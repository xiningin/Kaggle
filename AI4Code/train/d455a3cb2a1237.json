{"cell_type":{"b61f3344":"code","b2369c55":"code","deb11693":"code","fa91a352":"code","427d0d08":"code","1009846b":"code","9a2faadb":"code","85ff86f1":"code","7669fcf3":"code","651b5f57":"code","89f8905d":"code","9698af94":"code","3e533896":"code","665b9897":"code","72113771":"code","725e5584":"code","8b8bc822":"code","c17abe6c":"code","948400d9":"code","0621f5b0":"code","411a6292":"code","72ab73b4":"code","bacab341":"code","c42b5a5b":"code","85f20967":"code","ea2fa90c":"code","d3e4ef06":"code","96b23f0e":"code","8240e2de":"code","60a52786":"code","8eea8b1b":"code","23034ce9":"code","9b66825a":"code","e3e61568":"code","2666fa8f":"code","43f3faf0":"code","ae779437":"code","2e732c9f":"code","95df2215":"code","864d7e14":"code","8c9265b9":"code","de9fa0a1":"code","5e53d05b":"code","720aaf49":"code","d77dd5d6":"code","026e1ee1":"code","fc382c32":"code","740e4d47":"code","2328e3a6":"code","e4240af8":"code","8977c73a":"code","d4c3a470":"code","0a6abce3":"code","117c6840":"code","846e9f98":"code","0c59c34b":"code","e77c18b8":"code","793de132":"code","5c9ca2c6":"code","b5fc7592":"code","0dd280f9":"code","2b3666b4":"code","12b80a64":"code","2afbaaa8":"code","c3d0eec1":"code","ebb7d6fa":"code","352caf5d":"code","9f85db15":"code","e4295fd5":"code","5b117ad0":"code","6a262c55":"code","aea01023":"code","bf9fc9e5":"code","52ac8a46":"code","84793733":"code","89716878":"code","01d284c4":"code","6a14815e":"code","f1493b50":"code","b07b5c86":"markdown","313d7d6d":"markdown","96e744a1":"markdown","e51b8df2":"markdown","c8e3ba2c":"markdown","6d3618fe":"markdown","730c4d32":"markdown","7d74dd7b":"markdown","3e0bbe89":"markdown","30e51ca4":"markdown","7cd9192a":"markdown","29136c02":"markdown","902fa5cb":"markdown","31767ccf":"markdown","2cddec32":"markdown","7c6aa5e5":"markdown","cf30bdaa":"markdown","780d806f":"markdown","fa7ed6ef":"markdown","0883bc68":"markdown","9d4b6444":"markdown","8b91877e":"markdown","791eb0aa":"markdown","0970e965":"markdown","96d1a7e3":"markdown"},"source":{"b61f3344":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b2369c55":"file = open('\/kaggle\/input\/ense32020\/files\/adult.data', 'r')","deb11693":"def chr_int(a):\n    if a.isdigit():\n        return int(a)\n    else:\n        return 0\n                \ndata=[]\nfor line in file:\n     data1=line.split(', ')\n     if len(data1)==15:\n        data.append([chr_int(data1[0]),data1[1],chr_int(data1[2]),data1[3],chr_int(data1[4]),data1[5],data1[6],\\\n            data1[7],data1[8],data1[9],chr_int(data1[10]),chr_int(data1[11]),chr_int(data1[12]),data1[13],\\\n            data1[14]])","fa91a352":"print (data[1:2])","427d0d08":"df = pd.DataFrame(data) #  Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n\ndf.columns = ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"]\ndf.head()","1009846b":"df.tail()","9a2faadb":"df.shape","85ff86f1":"counts = df.groupby('country').size()\n\nprint (counts) ","7669fcf3":"counts = df.groupby('age').size().sort_values() # grouping by age\nprint (counts)","651b5f57":"ml = df[(df.sex == 'Male')] # grouping by sex\nml.shape\n","89f8905d":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\nml1.shape","9698af94":"fm =df[(df.sex == 'Female')]\nfm.shape","3e533896":"fm1 =df[(df.sex == 'Female')&(df.income=='>50K\\n')]\nfm1.shape","665b9897":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","72113771":"print ('The average age of men is: ', ml['age'].mean(), '.' )\nprint ('The average age of women is: ', fm['age'].mean(), '.')","725e5584":"print ('The average age of high-income men is: ', ml1['age'].mean(), '.' )\nprint ('The average age of high-income women is: ', fm1['age'].mean(), '.')","8b8bc822":"ml_mu = ml['age'].mean()\nfm_mu = fm['age'].mean()\nml_var = ml['age'].var()\nfm_var = fm['age'].var()\nml_std = ml['age'].std()\nfm_std = fm['age'].std()\n\nprint ('Statistics of age for men: mu:', ml_mu, 'var:', ml_var, 'std:', ml_std)\nprint ('Statistics of age for women: mu:', fm_mu, 'var:', fm_var, 'std:', fm_std)","c17abe6c":"ml_mu_hr = ml['hr_per_week'].mean()\nfm_mu_hr = fm['hr_per_week'].mean()\nml_var_hr = ml['hr_per_week'].var()\nfm_var_hr = fm['hr_per_week'].var()\nml_std_hr = ml['hr_per_week'].std()\nfm_std_hr = fm['hr_per_week'].std()\n\nprint ('Statistics of hours per week for men: mu:', ml_mu_hr, 'var:', ml_var_hr, 'std:', ml_std_hr)\nprint ('Statistics of hours per week for women: mu:', fm_mu_hr, 'var:', fm_var_hr, 'std:', fm_std_hr)","948400d9":"ml_median= ml['age'].median()\nfm_median= fm['age'].median()\n\nprint (\"Median age per men and women: \", ml_median, fm_median)","0621f5b0":"ml_median_age= ml1['age'].median()\nfm_median_age= fm1['age'].median()\n\nprint (\"Median age per men and women with high-income: \", ml_median_age, fm_median_age)","411a6292":"ml_median_hr= ml['hr_per_week'].median()\nfm_median_hr= fm['hr_per_week'].median()\nprint (\"Median hours per week per men and women: \", ml_median_hr, fm_median_hr)","72ab73b4":"import matplotlib.pyplot as plt\nml_age=ml['age']\nml_age.hist(density=0, histtype='stepfilled', bins=20)","bacab341":"fm_age=fm['age']\nfm_age.hist(density=0, histtype='stepfilled', bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Female samples',fontsize=15)\nplt.show()","c42b5a5b":"import seaborn as sns\nfm_age.hist(density=0, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=0, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Samples',fontsize=15)\nplt.show()","85f20967":"fm_age.hist(density=1, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('PMF',fontsize=15)\nplt.show()","ea2fa90c":"ml_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","d3e4ef06":"fm_age.hist(density=1, histtype='stepfilled', bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","96b23f0e":"ml_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","8240e2de":"fm_age.hist(density=1, histtype='step', cumulative=True, linewidth=3.5, bins=20)\n\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","60a52786":"ml_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5)   # default number of bins = 10\nfm_age.hist(bins=10, density=1, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Probability',fontsize=15)\nplt.show()","8eea8b1b":"ml_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20)\nfm_age.hist(density=1, histtype='step', cumulative=True,  linewidth=3.5, bins=20, color=sns.desaturate(\"indianred\", .75))\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","23034ce9":"print (\"The mean sample difference is \", ml_age.mean() - fm_age.mean())","9b66825a":"df['age'].median()","e3e61568":"len(df[(df.income == '>50K\\n') & (df['age'] < df['age'].median() - 15)])","2666fa8f":"len(df[(df.income == '>50K\\n') & (df['age'] > df['age'].median() + 35)])","43f3faf0":"df2 = df.drop(df.index[(df.income=='>50K\\n') & (df['age']>df['age'].median() +35) & (df['age'] > df['age'].median()-15)])\n\ndf2.shape","ae779437":"ml1_age=ml1['age']\nfm1_age=fm1['age']","2e732c9f":"ml2_age = ml1_age.drop(ml1_age.index[(ml1_age >df['age'].median()+35) & (ml1_age>df['age'].median() - 15)])\n\nfm2_age = fm1_age.drop(fm1_age.index[(fm1_age > df['age'].median()+35) & (fm1_age > df['age'].median()- 15)])","95df2215":"mu2ml = ml2_age.mean()\nstd2ml = ml2_age.std()\nmd2ml = ml2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income male population\n\nprint (\"Men statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", ml2_age.min(), \"Max:\",ml2_age.max())","864d7e14":"mu3ml = fm2_age.mean()\nstd3ml = fm2_age.std()\nmd3ml = fm2_age.median()\n\n# Computing the mean, std, median, min and max for the high-income female population\nprint (\"Women statistics: Mean:\", mu2ml, \"Std:\", std2ml, \"Median:\", md2ml, \"Min:\", fm2_age.min(), \"Max:\",fm2_age.max())","8c9265b9":"print ('The mean difference with outliers is: %4.2f.'% (ml_age.mean() - fm_age.mean()))\nprint (\"The mean difference without outliers is: %4.2f.\"% (ml2_age.mean() - fm2_age.mean()))","de9fa0a1":"plt.figure(figsize=(13.4,5))\n\ndf.age[(df.income == '>50K\\n')].plot(alpha=.25, color='blue')\ndf2.age[(df2.income == '>50K\\n')].plot(alpha=.45,color='red')\n\nplt.ylabel('Age')\nplt.xlabel('Samples')","5e53d05b":"\ncountx,divisionx = np.histogram(ml2_age, normed=True)\ncounty,divisiony = np.histogram(fm2_age, normed=True)","720aaf49":"import matplotlib.pyplot as plt\n\nval = [(divisionx[i]+divisionx[i+1])\/2 for i in range(len(divisionx)-1)]\n\nplt.plot(val, countx-county,'o-')\nplt.title('Differences in promoting men vs. women')\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Differences',fontsize=15)\nplt.show()","d77dd5d6":"print (\"Remember:\\n We have the following mean values for men, women and the difference:\\nOriginally: \", ml_age.mean(), fm_age.mean(),  ml_age.mean()- fm_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"For high-income: \", ml1_age.mean(), fm1_age.mean(), ml1_age.mean()- fm1_age.mean()) # The difference between the mean values of male and female populations.)\nprint (\"After cleaning: \", ml2_age.mean(), fm2_age.mean(), ml2_age.mean()- fm2_age.mean()) # The difference between the mean values of male and female populations.)\n\nprint (\"\\nThe same for the median:\")\nprint (ml_age.median(), fm_age.median(), ml_age.median()- fm_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml1_age.median(), fm1_age.median(), ml1_age.median()- fm1_age.median()) # The difference between the mean values of male and female populations.)\nprint (ml2_age.median(), fm2_age.median(), ml2_age.median()- fm2_age.median()), # The difference between the mean values of male and female populations.)","026e1ee1":"def skewness(x):\n    res=0\n    m=x.mean()\n    s=x.std()\n    for i in x:\n        res+=(i-m)*(i-m)*(i-m)\n    res\/=(len(x)*s*s*s)\n    return res\n\nprint (\"The skewness of the male population is:\", skewness(ml2_age))\nprint (\"The skewness of the female population is:\", skewness(fm2_age))","fc382c32":"def pearson(x):\n    return 3*(x.mean()-x.median())\/x.std()\n\nprint (\"The Pearson's coefficient of the male population is:\", pearson(ml2_age))\nprint (\"The Pearson's coefficient of the female population is:\", pearson(fm2_age))","740e4d47":"ml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\n\nml2 = ml1.drop(ml1.index[(ml1['age']>df['age'].median() +35)&(ml1['age']> df['age'].median()- 15)])\n\nfm2 = fm1.drop(fm1.index[(fm1['age']> df['age'].median() + 35)& (fm1['age']> df['age'].median() - 15)])\n\nprint (ml2.shape, fm2.shape)","2328e3a6":"print (\"Men grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(ml2_age[ml2_age<41])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(ml2_age[ml2_age >44])\/float(len(ml2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(ml2_age[(ml2_age>40) & (ml2_age< 45)])\/float(len(ml2_age.index)))),\"%.\")","e4240af8":"print (\"Women grouped in 3 categories:\")\nprint (\"Young:\",int(round(100*len(fm2_age[fm2_age <41])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Elder:\", int(round(100*len(fm2_age[fm2_age >44])\/float(len(fm2_age.index)))),\"%.\")\nprint (\"Average age:\", int(round(100*len(fm2_age[(fm2_age>40) & (fm2_age< 45)])\/float(len(fm2_age.index)))),\"%.\")","8977c73a":"print (\"The male mean:\", ml2_age.mean())\nprint (\"The female mean:\", fm2_age.mean())","d4c3a470":"ml2_young = len(ml2_age[(ml2_age<41)])\/float(len(ml2_age.index))\nfm2_young  = len(fm2_age[(fm2_age<41)])\/float(len(fm2_age.index))\nprint (\"The relative risk of female early promotion is: \", 100*(1-ml2_young\/fm2_young))","0a6abce3":"ml2_elder = len(ml2_age[(ml2_age>44)])\/float(len(ml2_age.index))\nfm2_elder  = len(fm2_age[(fm2_age>44)])\/float(len(fm2_age.index))\nprint (\"The relative risk of male late promotion is: \", 100*ml2_elder\/fm2_elder)","117c6840":"l = 3\nx=np.arange(0,2.5,0.1)\ny= 1- np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential CDF: $\\lambda$ =%.2f'% l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('CDF',fontsize=15)\nplt.show()","846e9f98":"from __future__ import division\nimport scipy.stats as stats\n\nl = 3\nx=np.arange(0,2.5,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential PDF: $\\lambda$ =%.2f'% l, fontsize=15)\nplt.xlabel('x', fontsize=15)\nplt.ylabel('PDF', fontsize=15)\nplt.show()","0c59c34b":"l = 0.25\n\nx=np.arange(0,25,0.1)\ny= l * np.exp(-l*x)\n\nplt.plot(x,y,'-')\nplt.title('Exponential: $\\lambda$ =%.2f' %l ,fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('PDF',fontsize=15)\nplt.show()","e77c18b8":"u=6 # mean\ns=2 # standard deviation\n\nx=np.arange(0,15,0.1)\n\ny=(1\/(np.sqrt(2*np.pi*s*s)))*np.exp(-(((x-u)**2)\/(2*s*s)))\n\nplt.plot(x,y,'-')\nplt.title('Gaussian PDF: $\\mu$=%.1f, $\\sigma$=%.1f'%(u,s),fontsize=15)\nplt.xlabel('x',fontsize=15)\nplt.ylabel('Probability density',fontsize=15)\nplt.show()","793de132":"fig, ax = plt.subplots(1, 4, sharey=True, squeeze=True, figsize=(14, 5))\nx = np.linspace(0, 1, 100)\nfor i in range(4):\n    f = np.mean(np.random.random((10000, i+1)), 1)\n    m, s = np.mean(f), np.std(f, ddof=1)\n    fn = (1\/(s*np.sqrt(2*np.pi)))*np.exp(-(x-m)**2\/(2*s**2))  # normal pdf            \n    ax[i].hist(f, 40, normed=True, color=[0, 0.2, .8, .6]) \n    ax[i].set_title('n=%d' %(i+1))\n    ax[i].plot(x, fn, color=[1, 0, 0, .6], linewidth=5)\nplt.suptitle('Demonstration of the central limit theorem for a uniform distribution', y=1.05)\nplt.show()","5c9ca2c6":"from scipy.stats.distributions import norm\n\n# Some random data\ny = np.random.random(15) * 10\nx = np.linspace(0, 10, 100)\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\ny = np.r_[x1, x2] # r_ Translates slice objects to concatenation along the first axis.\nx = np.linspace(min(y), max(y), 100)\n\n# Smoothing parameter\ns = 0.4\n\n# Calculate the kernels\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'go', ms=10)","b5fc7592":"from scipy.stats import kde\n\nx1 = np.random.normal(-1, 0.5, 15)\n\n# parameters: (loc=0.0, scale=1.0, size=None)\n\nx2 = np.random.normal(6, 1, 10)\ny = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\n\nx = np.linspace(min(y), max(y), 100)\ns = 0.4   # Smoothing parameter\n\nkernels = np.transpose([norm.pdf(x, yi, s) for yi in y])\n\n# Calculate the kernels\ndensity = kde.gaussian_kde(y)\n\nplt.plot(x, kernels, 'k:')\nplt.plot(x, kernels.sum(1), 'r')\nplt.plot(y, np.zeros(len(y)), 'bo', ms=10)","0dd280f9":"xgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(y, bins=28, normed=True)\nplt.plot(xgrid, density(xgrid), 'r-')","2b3666b4":"# Create a bi-modal distribution with a mixture of Normals.\n\nx1 = np.random.normal(-1, 2, 15) # parameters: (loc=0.0, scale=1.0, size=None)\nx2 = np.random.normal(6, 3, 10)\n\n# Append by row\nx = np.r_[x1, x2]\n\n# r_ Translates slice objects to concatenation along the first axis.\nplt.hist(x, bins=18, normed=True)","12b80a64":"density = kde.gaussian_kde(x)\nxgrid = np.linspace(x.min(), x.max(), 200)\nplt.hist(x, bins=18, normed=True)\nplt.plot(xgrid, density(xgrid), 'r-')","2afbaaa8":"x = np.random.normal(0.0, 1.0, 10000)\na = plt.hist(x,50,normed='True')\n","c3d0eec1":"print ('The empirical mean of the sample is ', x.mean())","ebb7d6fa":"NTs=200\nmu=0.0\nvar=1.0\nerr = 0.0\nNPs=1000\nfor i in range(NTs):\n    x = np.random.normal(mu, var, NPs)\n    err += (x.mean()-mu)**2\n\nprint ('MSE: ', err\/NTs)","352caf5d":"def Cov(X, Y):\n    def _get_dvis(V):\n        return [v - np.mean(V) for v in V]\n    dxis = _get_dvis(X)\n    dyis = _get_dvis(Y)\n    return np.sum([x * y for x, y in zip(dxis, dyis)])\/len(X)\n\n\nX = [5, -1, 3.3, 2.7, 12.2]\nX= np.array(X)\nY = [10, 12, 8, 9, 11]\n\nprint (\"Cov(X, X) = %.2f\" % Cov(X, X))\nprint (\"Var(X) = %.2f\" % np.var(X))\n\nprint (\"Cov(X, Y) = %.2f\" % Cov(X, Y))","9f85db15":"MAXN=100\nMAXN=40\n\nX=np.array([[1,9],[3, 2], [5,3],[5.5,4],[6,4],[6.5,4],[7,3.5],[7.5,3.8],[8,4],\n[8.5,4],[9,4.5],[9.5,7],[10,9],[10.5,11],[11,11.5],[11.5,12],[12,12],[12.5,12],[13,10]])","e4295fd5":"plt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('Economic growth(T)',fontsize=15)\nplt.ylabel('Stock market returns(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","5b117ad0":"X=np.array([[1,8],[2, 7], [3,6],[4,8],[5,8],[6,7],[7,7],[8,5],[9,5],[10,6],[11,4],[12,5],[13,3],[14,2],[15,2],[16,1]])\n\nplt.subplot(1,2,1)\nplt.scatter(X[:,0],X[:,1],color='b',s=120, linewidths=2,zorder=10)\nplt.xlabel('World Oil Production(T)',fontsize=15)\nplt.ylabel('Gasoline prices(T)',fontsize=15)\nplt.gcf().set_size_inches((20,6))","6a262c55":"def Corr(X, Y):\n    assert len(X) == len(Y)\n    return Cov(X, Y) \/ np.prod([np.std(V) for V in [X, Y]])\n\nprint (\"Corr(X, X) = %.5f\" % Corr(X, X))\n\nY=np.random.random(len(X))\n\nprint (\"Corr(X, Y) = %.5f\" % Corr(X, Y))\n","aea01023":"def list2rank(l):\n    #l is a list of numbers\n    # returns a list of 1-based index; mean when multiple instances\n    return [np.mean([i+1 for i, sorted_el in enumerate(sorted(l)) if sorted_el == el]) for el in l]\n\nl = [7, 1, 2, 5]\nprint (\"ranks: \", list2rank(l))\n\ndef spearmanRank(X, Y):\n    # X and Y are same-length lists\n    print (list2rank(X) )\n    print (list2rank(Y))\n    return Corr(list2rank(X), list2rank(Y))\n\nX = [10, 20, 30, 40, 1000]\nY = [-70, -1000, -50, -10, -20]\nplt.plot(X,'ro')\nplt.plot(Y,'go')\n\nprint (\"Pearson rank coefficient: %.2f\" % Corr(X, Y))\nprint (\"Spearman rank coefficient: %.2f\" % spearmanRank(X, Y))","bf9fc9e5":"X=np.array([[10.0, 8.04,10.0, 9.14, 10.0, 7.46, 8.0, 6.58],\n[8.0,6.95, 8.0, 8.14, 8.0, 6.77, 8.0, 5.76],\n[13.0,7.58,13.0,8.74,13.0,12.74,8.0,7.71],\n[9.0,8.81,9.0,8.77,9.0,7.11,8.0,8.84],\n[11.0,8.33,11.0,9.26,11.0,7.81,8.0,8.47],\n[14.0,9.96,14.0,8.10,14.0,8.84,8.0,7.04],\n[6.0,7.24,6.0,6.13,6.0,6.08,8.0,5.25],\n[4.0,4.26,4.0,3.10,4.0,5.39,19.0,12.50],\n[12.0,10.84,12.0,9.13,12.0,8.15,8.0,5.56],\n[7.0,4.82,7.0,7.26,7.0,6.42,8.0,7.91],\n[5.0,5.68,5.0,4.74,5.0,5.73,8.0,6.89]])","52ac8a46":"plt.subplot(2,2,1)\nplt.scatter(X[:,0],X[:,1],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","84793733":"print('mean :',X[:,0].mean())\nprint('var :',np.var(X[:,0]))\nprint (\"Cov(X, Y):\",Cov(X[:,0], X[:,1]))\nprint (\"Corr(X, Y):\", Corr(X[:,0], X[:,1]))\nprint (\"Spearman rank coefficient:\", spearmanRank(X[:,0], X[:,1]))","89716878":"plt.subplot(2,2,2)\nplt.scatter(X[:,2],X[:,3],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.subplot(2,2,3)\nplt.scatter(X[:,4],X[:,5],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)","01d284c4":"print('mean :',X[:,2].mean())\nprint('var :',np.var(X[:,2]))\nprint (\"Cov(X, Y):\",Cov(X[:,2], X[:,3]))\nprint (\"Corr(X, Y):\", Corr(X[:,2], X[:,3]))\nprint (\"Spearman rank coefficient:\", spearmanRank(X[:,2], X[:,3]))\n\nprint('mean :',X[:,4].mean())\nprint('var :',np.var(X[:,4]))\nprint (\"Cov(X, Y):\",Cov(X[:,4], X[:,5]))\nprint (\"Corr(X, Y):\", Corr(X[:,4], X[:,5]))\nprint (\"Spearman rank coefficient:\", spearmanRank(X[:,4], X[:,5]))","6a14815e":"plt.subplot(2,2,4)\nplt.scatter(X[:,6],X[:,7],color='r',s=120, linewidths=2,zorder=10)\nplt.xlabel('x1',fontsize=15)\nplt.ylabel('y1',fontsize=15)\nplt.gcf().set_size_inches((10,10))","f1493b50":"print('mean :',X[:,6].mean())\nprint('var :',np.var(X[:,6]))\nprint (\"Cov(X, Y):\",Cov(X[:,6], X[:,7]))\nprint (\"Corr(X, Y):\", Corr(X[:,6], X[:,7]))\nprint (\"Spearman rank coefficient:\", spearmanRank(X[:,6], X[:,7]))","b07b5c86":"5. How many items are there for USA? and for Mexico? \nIl y a 29170 \u00e9l\u00e9ments pour les Etats Unis et 643 pour le Mexique.\n","313d7d6d":"10. Show the graphics and an explain the result.\nOn observe la r\u00e9partition des \u00e2ges des hommes","96e744a1":"21. Explain the result\nOn obtient l'obliquit\u00e9 des s\u00e9ries de donn\u00e9es ml2_age et fm2_age","e51b8df2":"14. Show the graphics and an explain the result.\nLes valeurs sont normalis\u00e9es.","c8e3ba2c":"6. What is the age of the most represented people?\nLa population la plus repr\u00e9sent\u00e9e a 36 ans.","6d3618fe":"10. Describe an explain the result.\nNous obtenons les m\u00e9dianes de plusieurs s\u00e9ries de donn\u00e9es. Par exemple, nous avons l'\u00e2ge m\u00e9dian des femmes : 35ans. Cela signifie que 50% des femmes du DataFrame ont moins de 35ans, et 50% ont plus de 35ans.","730c4d32":"1.What is the obtained result? What did you ask for in the previous command? Explain.\ndata est un tableau de tableaux (matrice). La commande data1:2] cr\u00e9\u00e9 une copie de la matrice data en ne conservant que la 1\u00e8re ligne (le 1er tableau).","7d74dd7b":"7. Describe an explain the result.\nOn obtient le taux des personnes avec un grand salaire, \nle taux des personnes avec un grand salaire parmi les hommes et \nle taux des personnes avec un grand salaire parmi les femmes.","3e0bbe89":"2.Describe and explain the result.\nOn cr\u00e9e un tableau avec un titre pour chaque colonne. On utilise pour cela notre matrice et le module panda.\n\"df.head()\" affiche les 5 premi\u00e8res lignes du tableau.","30e51ca4":"11. Show the graphics and an explain the result.\nOn observe la r\u00e9partition des \u00e2ges des femmes.","7cd9192a":"9. Describe an explain the result.\nOn observe la moyenne, la variance et l'\u00e9cart-type pour diff\u00e9rentes s\u00e9ries de donn\u00e9es : pour l'\u00e2ge des hommes, l'\u00e2ge des femmes, le nombre d'heures effectu\u00e9s par semaine pour les hommes, et le nombre d'heures effectu\u00e9s par semaine pour les femmes.","29136c02":"21. What does the figure shows?\nLa courbe rouge repr\u00e9sente des donn\u00e9es. Pour d\u00e9terminer la densit\u00e9 de distribution de ces donn\u00e9es, on utilise des densit\u00e9s gaussiennes que nous sommons pour retrouver la courbe rouge.","902fa5cb":"18. Show the graphics and an explain the result.\nOn observe la r\u00e9partition des \u00e2ges des hommes et des femmes. Les valeurs sont normalis\u00e9es et il y a seulement 10barres par histogramme.","31767ccf":"8. Describe an explain the result.\nOn obtient l'\u00e2ge moyen des hommes, l'\u00e2ge moyen des femmes, l'\u00e2ge moyen des hommes aux hauts revenus et l'\u00e2ge moyen des femmes aux hauts revenus. Dans les 2 cas, les hommes sont plus \u00e2g\u00e9s que les femmes.","2cddec32":"19. Show the graphics and an explain the result.\nOn observe les valeurs cumul\u00e9es des r\u00e9partitions des \u00e2ges des hommes et des femmes.","7c6aa5e5":"15. Show the graphics and an explain the result.\nLes valeurs sont normalis\u00e9es.","cf30bdaa":"16. Show the graphics and an explain the result.\nNous observons les valeurs cumul\u00e9es de la r\u00e9partition des \u00e2ges des hommes.","780d806f":"21. What do you obtained as result?\nOn obtient l'erreur quadratique moyenne.","fa7ed6ef":"13. Show the graphics and an explain the result.\nCe sont les m\u00eames r\u00e9partitions mais cette-fois elles sont normalis\u00e9es.\n","0883bc68":"12. Show the graphics and an explain the result.\nOn observe la r\u00e9partition des \u00e2ges des hommes et des femmes. Pour les hommes, les barres sont plus hautes parce qu'il y en a moins.","9d4b6444":"4.Describe an explain the result.\nOn obtient le nombre de colonnes et de lignes du tableau.","8b91877e":"20. Explain the result.\nEn moyenne, l'\u00e2ge des hommes est 2,57 fois plus \u00e9lev\u00e9 que l'\u00e2ge des femmes.","791eb0aa":"Exercise: Obtain for the Anscombe's quartet [2] given in the figures bellow, the different estimators (mean, variance, covariance for each pair, Pearson's correlation and Spearman's rank correlation.","0970e965":"17. Show the graphics and an explain the result.\nNous observons les valeurs cumul\u00e9es de la r\u00e9partition des \u00e2ges des femmes.","96d1a7e3":"3.Describe and explain the result. Compare with the previous one.\n\"df.tail()\" affiche les 5 derni\u00e8res lignes du tableau."}}