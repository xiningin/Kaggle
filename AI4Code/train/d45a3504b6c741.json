{"cell_type":{"f4d8e146":"code","5852aeb3":"code","292a1a11":"code","3b946df5":"code","5d479f3e":"code","9d818a73":"code","2a157413":"code","7713602b":"code","3371e2fd":"code","d6c3ef4e":"code","79e610a0":"code","af28339d":"code","88f52874":"code","67b3142a":"code","49e11be7":"code","9644c6d7":"code","2abd5413":"code","e37d18d5":"code","5b688f28":"code","399bed6a":"code","968ba1b1":"code","e8905236":"code","9474e027":"markdown","802421fb":"markdown","df0cbbe1":"markdown","d10870ef":"markdown","c68a365e":"markdown","523626bb":"markdown","8c679713":"markdown"},"source":{"f4d8e146":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5852aeb3":"df = pd.read_csv(\"\/kaggle\/input\/ramen-ratings\/ramen-ratings.csv\")\ndf.head()","292a1a11":"df.tail()","3b946df5":"print(df.columns)\nprint(\"\")\nprint(df.shape)","5d479f3e":"df.info()","9d818a73":"print(df.Brand.value_counts(dropna = False ))","2a157413":"# df.Stars.astype(\"str\")\nprint(df.Stars.value_counts(dropna = False ))\ndf1 = df[df.Stars!=\"Unrated\"]\ndf1_series1 = df1.Stars.astype(\"float\")\n","7713602b":"df_dict = {\"stars\":list(df1_series1)}\ndf2 = pd.DataFrame(df_dict)","3371e2fd":"#print(df1.Stars.value_counts(dropna = False)) # without unrated restourants\ndf2.info()\ndf2.head()\ndf2.describe()\n","d6c3ef4e":"df2.boxplot(column='stars')","79e610a0":"df_head = df.head()\ndf_head\n","af28339d":"melted = pd.melt(frame = df_head, id_vars =\"Brand\", value_vars=[\"Style\",\"Country\"])\nmelted","88f52874":"melted.pivot(index =\"Brand\", columns = \"variable\",values = \"value\")","67b3142a":"df_tail = df.tail()\nconc_data_row  =pd.concat([df_head,df_tail], axis = 0, ignore_index = True)\nconc_data_row","49e11be7":"df01 = df[\"Brand\"].tail()\ndf02 = df[\"Style\"].tail()\nconc_data_col = pd.concat([df01,df02], axis = 1)\nconc_data_col","9644c6d7":"df.info()","2abd5413":"df[\"Style\"].value_counts(dropna =False)","e37d18d5":"df.dropna(subset = [\"Style\"], inplace = True )\n","5b688f28":"assert  df.Style.notnull().all()","399bed6a":"df[\"Top Ten\"].fillna(\"empty\",inplace = True)","968ba1b1":"assert  df[\"Top Ten\"].notnull().all()","e8905236":"df[\"Top Ten\"].head()","9474e027":"\n**EXPLORATORY DATA ANALYSIS**","802421fb":"**Tidy Data**","df0cbbe1":"\n**VISUAL EXPLORATORY DATA ANALYSIS**","d10870ef":"**First Impression**","c68a365e":"**Concatenating Data**","523626bb":"**Pivoting Data**","8c679713":"**MISSING DATA and TESTING WITH ASSERT**"}}