{"cell_type":{"0a3c53f2":"code","c1a95836":"code","acee5b59":"code","309ab27d":"code","30a7c43e":"code","51a37874":"code","939bc8f2":"code","f67c365b":"code","0d1d0f2a":"code","0c5e13a6":"code","b720ccaa":"code","0fee34c0":"code","a1ae4f14":"code","5bc16e83":"code","02e1dc71":"code","005e7c09":"code","7ec8d982":"code","086cb446":"code","84968178":"code","ef16cceb":"code","e54e49af":"code","c88d315a":"code","b589369e":"code","88ca3678":"code","70a5bc49":"code","7174966a":"code","201b7f21":"code","85193a2f":"code","bcfda386":"code","69d2e384":"code","697480f1":"code","74c0ff44":"code","93628aec":"code","a1f76e0f":"code","8e16c2cf":"code","df33caa7":"code","5fe8c007":"code","f2a1146a":"code","54f485bd":"markdown","6f039b9d":"markdown","fc3a2071":"markdown","3142d52f":"markdown","272870f7":"markdown","40e1602f":"markdown","bbeff733":"markdown","e7ec752b":"markdown","1b896cb6":"markdown","b8440a57":"markdown","048f6e86":"markdown","c330d484":"markdown","208de477":"markdown","0f120ccc":"markdown","0e648eb2":"markdown","932523c3":"markdown","f9c9be07":"markdown","ec054478":"markdown","5dfa4d2e":"markdown","6e4053fb":"markdown","aff688c0":"markdown","3be85365":"markdown","ca534c87":"markdown","33c07c48":"markdown","09e924fe":"markdown","6ad24ed9":"markdown","9528047c":"markdown","c3ca1763":"markdown","b5b4eb8c":"markdown","f8c1f3a6":"markdown","c67237f7":"markdown","764c387b":"markdown"},"source":{"0a3c53f2":"# Data Processing\nimport numpy as np \nimport pandas as pd \n\n# Data Visualization\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set(style='whitegrid')\n\n# Modeling\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom sklearn.linear_model import SGDClassifier\n\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import roc_curve, auc, accuracy_score, roc_auc_score, f1_score, recall_score, precision_score\n\n\nfrom sklearn.model_selection import RandomizedSearchCV","c1a95836":"df_train = pd.read_csv('\/kaggle\/input\/health-insurance-cross-sell-prediction\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/health-insurance-cross-sell-prediction\/test.csv')","acee5b59":"df_train.head()","309ab27d":"df_test.head()","30a7c43e":"df_train = df_train.drop(['id'], axis=1)\ndf_test = df_test.drop(['id'], axis=1)","51a37874":"df_train[['Age', 'Annual_Premium', 'Policy_Sales_Channel', 'Vintage']].describe()","939bc8f2":"df_train.isna().sum()","f67c365b":"df_test.isna().sum()","0d1d0f2a":"df_train['Response'].value_counts()","0c5e13a6":"b = sns.countplot(x='Response', data=df_train)\nb.set_title(\"Response Distribution\")","b720ccaa":"b = sns.countplot(x='Gender', data=df_train)\nb.set_title(\"Gender Distribution\");","0fee34c0":"pd.crosstab(df_train['Response'], df_train['Gender']).plot(kind=\"bar\", figsize=(10,6))\n\nplt.title(\"Response distribution for Gender\")\nplt.xlabel(\"0 = Customer is Not interested, 1 = Customer is interested\")\nplt.ylabel(\"Amount\")\nplt.legend([\"Female\", \"Male\"])\nplt.xticks(rotation=0);","a1ae4f14":"b = sns.distplot(df_train['Age'])\nb.set_title(\"Age Distribution\");","5bc16e83":"b = sns.boxplot(y = 'Age', data = df_train)\nb.set_title(\"Age Distribution\");","02e1dc71":"b = sns.boxplot(y='Age', x='Response', data=df_train);\nb.set_title(\"Age Distribution for each Response\");","005e7c09":"df_train['Driving_License'].value_counts()","7ec8d982":"df_train = df_train.drop(\"Driving_License\", axis=1)\ndf_test = df_test.drop(\"Driving_License\", axis=1)","086cb446":"df_train['Region_Code'].value_counts().head(30).plot(kind='barh', figsize=(20,10), title=\"Region_Code distribution in df_train\");","84968178":"df_train['Previously_Insured'].value_counts()","ef16cceb":"pd.crosstab(df_train['Response'], df_train['Previously_Insured'])","e54e49af":"pd.crosstab(df_train['Response'], df_train['Previously_Insured']).plot(kind=\"bar\", figsize=(10,6))\n\nplt.title(\"Response distribution for Previously_Insured\")\nplt.xlabel(\"0 = Customer is Not interested, 1 = Customer is interested\")\nplt.ylabel(\"Amount\")\nplt.legend([\"Customer doesn't have Vehicle Insurance\", \"Customer already has Vehicle Insurance\"])\nplt.xticks(rotation=0);","c88d315a":"df_train['Vehicle_Age'].value_counts()","b589369e":"pd.crosstab(df_train['Response'], df_train['Vehicle_Age']).plot(kind=\"bar\", figsize=(10,6))\n\nplt.title(\"Response distribution for Vehicle_Age\")\nplt.xlabel(\"0 = Customer is Not interested, 1 = Customer is interested\")\nplt.ylabel(\"Amount\")\nplt.legend([\"1-2 Year\", \"< 1 Year\", \"> 2 Years\"])\nplt.xticks(rotation=0);","88ca3678":"df_train['Vehicle_Damage'].value_counts()","70a5bc49":"pd.crosstab(df_train['Response'], df_train['Vehicle_Damage'])","7174966a":"pd.crosstab(df_train['Response'], df_train['Vehicle_Damage']).plot(kind=\"bar\", figsize=(10,6))\n\nplt.title(\"Response distribution for Vehicle_Damage\")\nplt.xlabel(\"0 = Customer is Not interested, 1 = Customer is interested\")\nplt.ylabel(\"Amount\")\nplt.legend([\"Vehicle Damage\", \"No Vehicle Damage\"])\nplt.xticks(rotation=0);","201b7f21":"df_train['Annual_Premium'].describe()","85193a2f":"b = sns.boxplot(y='Annual_Premium', x='Response', data=df_train);\nb.set_title(\"Annual_Premium Distribution for each Response\");","bcfda386":"df_train['Policy_Sales_Channel'].describe()","69d2e384":"b = sns.boxplot(y='Policy_Sales_Channel', x='Response', data=df_train);\nb.set_title(\"Policy_Sales_Channel Distribution for each Response\");","697480f1":"df_train['Vintage'].describe()","74c0ff44":"b = sns.boxplot(y='Vintage', x='Response', data=df_train);\nb.set_title(\"Vintage Distribution for each Response\");","93628aec":"df_train.head()","a1f76e0f":"df_train['Gender'] = pd.Categorical(df_train['Gender'])\ndf_train['Previously_Insured'] = pd.Categorical(df_train['Previously_Insured'])\ndf_train['Vehicle_Age'] = pd.Categorical(df_train['Vehicle_Age'])\ndf_train['Vehicle_Damage'] = pd.Categorical(df_train['Vehicle_Damage'])\ndf_train['Response'] = pd.Categorical(df_train['Response'])\ndf_train['Region_Code'] = pd.Categorical(df_train['Region_Code'])\n\ndf_train = pd.concat([df_train[['Age', 'Annual_Premium', 'Policy_Sales_Channel', 'Vintage', 'Response']],\n           pd.get_dummies(df_train[['Gender', 'Previously_Insured', 'Vehicle_Age', 'Vehicle_Damage']])], axis=1)","8e16c2cf":"df_train.head()","df33caa7":"#Using Pearson Correlation\nplt.figure(figsize=(12,10))\ncor = df_train.corr()\nsns.heatmap(cor, annot=True)\nplt.show()","5fe8c007":"X = df_train.drop([\"Response\"], axis=1).to_numpy()\ny = df_train['Response'].values","f2a1146a":"np.random.seed(42)\n\n# Defining a dictionary of models\nmodels = {\"Logistic Regression\": LogisticRegression(max_iter=10000), \n          \"Random Forest\": RandomForestClassifier(),\n          \"GradientBoostingClassifier\" : GradientBoostingClassifier()}\n\n\n# Initialize StratifiedKFold\nskf = StratifiedKFold(n_splits=5, shuffle=True)\n\n\n\n\nfor name, model in models.items():\n    \n    # Create list for ROC AUC scores\n    roc_auc_score_list = []\n    \n    for train_index, test_index in skf.split(X,y):\n        X_train, X_test = X[train_index], X[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n\n        model.fit(X_train, y_train)\n\n        roc_auc_score_list.append(roc_auc_score(y_test, model.predict_proba(X_test)[:, 1]))\n        fpr, tpr, _ = roc_curve(y_test, model.predict_proba(X_test)[:, 1])\n        plt.plot(fpr, tpr)\n\n        #print(f\"ROC AUC Score for the fold no. {i} on the test set: {roc_auc_score(y_test, model.predict_proba(X_test)[:, 1])}\")\n\n\n    print(f'Mean roc_auc_score {name} : {np.mean(roc_auc_score_list)}')","54f485bd":"### Vintage","6f039b9d":"Both genders seem to be pretty similar in their response.","fc3a2071":"### Vehicle_Damage","3142d52f":"The `GradientBoostingClassifier()` gives us the best score with an average of `0.854707413585548`.","272870f7":"# Modeling","40e1602f":"### Annual_Premium","bbeff733":"We can see that customers that already have a vehicle insurance with only very little exception are not interested.","e7ec752b":"### Driving_License","1b896cb6":"Now let's take a look at the correlation:","b8440a57":"Great! Now our data is in numeric form!","048f6e86":"**If you liked this notebook or found it helpful in any way, feel free to leave an upvote - That will keep me motivated :)**\n\n**If you have any suggestions for improvement, leave a comment :)**","c330d484":"### Region_Code","208de477":"### Policy_Sales_Channel","0f120ccc":"<h1 style=\"text-align:center\">Who will buy your insurance?<\/h1>","0e648eb2":"We do not have any. That's great!","932523c3":"<div style=\"text-align:center;\"><img src=\"https:\/\/images.unsplash.com\/photo-1570042707390-2e011141ab78?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1789&q=80\" \/><\/div>","f9c9be07":"We can see that we have a lot more customers that are not interested. This should be taken into account when dividing the data into train and test sets for the modeling.","ec054478":"## Gender","5dfa4d2e":"## Target Value - Response","6e4053fb":"## Imports","aff688c0":"As a first step, we should get all our data in numeric form.","3be85365":"### Previously_Insured","ca534c87":"## Check for NaN values","33c07c48":"**Context:** \n> Our client is an Insurance company that has provided Health Insurance to its customers now they need your help in building a model to predict whether the policyholders (customers) from past year will also be interested in Vehicle Insurance provided by the company.\n\n**About the Data:**\n* id:\tUnique ID for the customer\n* Gender:\tGender of the customer\n* Age:\tAge of the customer\n* Driving_License:\n   * 0 : Customer does not have DL \n   * 1 : Customer already has DL\n* Region_Code:\tUnique code for the region of the customer\n* Previously_Insured:\n   * 1 : Customer already has Vehicle Insurance \n   * 0 : Customer doesn't have Vehicle Insurance\n* Vehicle_Age:\tAge of the Vehicle\n* Vehicle_Damage:\n   * 1 : Customer got his\/her vehicle damaged in the past. \n   * 0 : Customer didn't get his\/her vehicle damaged in the past.\n* Annual_Premium:\tThe amount customer needs to pay as premium in the year\n* PolicySalesChannel:\tAnonymized Code for the channel of outreaching to the customer ie. Different Agents, Over Mail, Over Phone, In Person, etc.\n* Vintage:\tNumber of Days, Customer has been associated with the company\n* Response:\n   * 1 : Customer is interested \n   * 0 : Customer is not interested","09e924fe":"### Vehicle_Age","6ad24ed9":"Let's take a look at our data again.","9528047c":"There are only a small number of people with no driving license. This might mess up our models. Therefore, we should get drop `Driving_License` for now.","c3ca1763":"## Age","b5b4eb8c":"The `id` column is unecessary. Let's drop it for `df_train` and `df_test`.","f8c1f3a6":"Let's check the scores with all features:","c67237f7":"# Exploratory Data Analysis","764c387b":"## Feature Engineering"}}