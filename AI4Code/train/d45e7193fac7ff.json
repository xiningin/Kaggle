{"cell_type":{"2734ff18":"code","f4a6bdb2":"code","e636bf28":"code","d2693318":"code","a10a02f5":"code","5f2a7c9f":"code","56f3e9df":"code","cf71d677":"code","ecaa6b77":"code","81d9906e":"code","d965c12c":"markdown"},"source":{"2734ff18":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f4a6bdb2":"from sklearn.datasets import make_blobs\nfrom sklearn.cluster import KMeans\n","e636bf28":"x,y=make_blobs(n_samples=200,n_features=2,centers=3,cluster_std=0.5,random_state=0)","d2693318":"len(x)","a10a02f5":"y","5f2a7c9f":"plt.scatter(x[:,:-1],x[:,-1],color='black')","56f3e9df":"kmean=KMeans(n_clusters=3,init='random',n_init=1,max_iter=4,tol=1e-04,random_state=2)","cf71d677":"ypred=kmean.fit_predict(x)","ecaa6b77":"ypred","81d9906e":"plt.scatter(\n    x[ypred == 0, 0], x[ypred == 0, 1],\n    s=50, c='lightgreen',\n    marker='s', edgecolor='black',\n    label='cluster 1'\n)\n\nplt.scatter(\n    x[ypred == 1, 0], x[ypred == 1, 1],\n    s=50, c='orange',\n    marker='o', edgecolor='black',\n    label='cluster 2'\n)\n\nplt.scatter(\n    x[ypred == 2, 0], x[ypred == 2, 1],\n    s=50, c='lightblue',\n    marker='v', edgecolor='black',\n    label='cluster 3'\n)\n\n# plot the centroids\nplt.scatter(\n    kmean.cluster_centers_[:, 0], kmean.cluster_centers_[:, 1],\n    s=250, marker='*',\n    c='red', edgecolor='black',\n    label='centroids'\n)\nplt.legend(scatterpoints=1)","d965c12c":"**From the above figure we can say that there are three clusters**"}}