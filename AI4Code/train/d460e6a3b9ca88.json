{"cell_type":{"91106355":"code","57094412":"code","6164bdb6":"code","cd42bbed":"code","94ec27b9":"code","9deac57e":"code","ba3da7ef":"code","23a329c8":"code","76eca3b9":"code","263c1dc0":"code","9c8eb403":"code","36d860c5":"code","b66af676":"code","59b8eb82":"code","d1acb535":"code","5364b535":"markdown"},"source":{"91106355":"import gc\nimport time\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.models as M\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, ModelCheckpoint\nimport tensorflow_addons as tfa\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.metrics import log_loss\nfrom tqdm.notebook import tqdm\n\nprint(\"Tensorflow version \" + tf.__version__)\nAUTO = tf.data.experimental.AUTOTUNE","57094412":"# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection. No parameters necessary if TPU_NAME environment variable is set. On Kaggle this is always the case.\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","6164bdb6":"MIXED_PRECISION = False\nXLA_ACCELERATE = True\n\nif MIXED_PRECISION:\n    from tensorflow.keras.mixed_precision import experimental as mixed_precision\n    if tpu: policy = tf.keras.mixed_precision.experimental.Policy('mixed_bfloat16')\n    else: policy = tf.keras.mixed_precision.experimental.Policy('mixed_float16')\n    mixed_precision.set_policy(policy)\n    print('Mixed precision enabled')\n\nif XLA_ACCELERATE:\n    tf.config.optimizer.set_jit(True)\n    print('Accelerated Linear Algebra enabled')","cd42bbed":"train_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntrain_targets = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\n\nss = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')","94ec27b9":"def preprocess(df):\n    df.loc[:, 'cp_type'] = df.loc[:, 'cp_type'].map({'trt_cp': 0, 'ctl_vehicle': 1})\n    df.loc[:, 'cp_dose'] = df.loc[:, 'cp_dose'].map({'D1': 0, 'D2': 1})\n    del df['sig_id']\n    return df\n\ntrain = preprocess(train_features)\ntest = preprocess(test_features)\n\ndel train_targets['sig_id']","9deac57e":"train.head()","ba3da7ef":"def create_model(num_columns, hidden_units, dropout_rate):\n    \n    inp = tf.keras.layers.Input(shape = (num_columns, ))\n    x = tf.keras.layers.BatchNormalization()(inp)\n    \n    for units in hidden_units:\n        \n        x = tfa.layers.WeightNormalization(tf.keras.layers.Dense(units, activation = 'elu'))(x)\n        x = tf.keras.layers.Dropout(dropout_rate)(x)\n        x = tf.keras.layers.BatchNormalization()(x)\n        \n    out = tfa.layers.WeightNormalization(tf.keras.layers.Dense(206, activation = 'sigmoid'))(x)\n    \n    model = tf.keras.models.Model(inputs = inp, outputs = out)\n    \n    model.compile(optimizer = tfa.optimizers.Lookahead(tf.optimizers.Adam(), sync_period = 10), \n                  loss='binary_crossentropy')\n    \n    return model","23a329c8":"### Permutation importance ~20 minutes\n'''\nfrom typing import Tuple, List, Callable, Any\n\nfrom sklearn.utils import check_random_state  # type: ignore\n\n### from eli5\ndef iter_shuffled(X, columns_to_shuffle=None, pre_shuffle=False,\n                  random_state=None):\n    rng = check_random_state(random_state)\n\n    if columns_to_shuffle is None:\n        columns_to_shuffle = range(X.shape[1])\n\n    if pre_shuffle:\n        X_shuffled = X.copy()\n        rng.shuffle(X_shuffled)\n\n    X_res = X.copy()\n    for columns in tqdm(columns_to_shuffle):\n        if pre_shuffle:\n            X_res[:, columns] = X_shuffled[:, columns]\n        else:\n            rng.shuffle(X_res[:, columns])\n        yield X_res\n        X_res[:, columns] = X[:, columns]\n\n\n\ndef get_score_importances(\n        score_func,  # type: Callable[[Any, Any], float]\n        X,\n        y,\n        n_iter=5,  # type: int\n        columns_to_shuffle=None,\n        random_state=None\n    ):\n    rng = check_random_state(random_state)\n    base_score = score_func(X, y)\n    scores_decreases = []\n    for i in range(n_iter):\n        scores_shuffled = _get_scores_shufled(\n            score_func, X, y, columns_to_shuffle=columns_to_shuffle,\n            random_state=rng, base_score=base_score\n        )\n        scores_decreases.append(scores_shuffled)\n\n    return base_score, scores_decreases\n\n\n\ndef _get_scores_shufled(score_func, X, y, base_score, columns_to_shuffle=None,\n                        random_state=None):\n    Xs = iter_shuffled(X, columns_to_shuffle, random_state=random_state)\n    res = []\n    for X_shuffled in Xs:\n        res.append(-score_func(X_shuffled, y) + base_score)\n    return res\n\ndef metric(y_true, y_pred):\n    metrics = []\n    for i in range(y_pred.shape[1]):\n        if y_true[:, i].sum() > 1:\n            metrics.append(log_loss(y_true[:, i], y_pred[:, i]))\n    return np.mean(metrics)   \n\nperm_imp = np.zeros(train.shape[1])\nfor n, (tr, te) in enumerate(KFold(n_splits=2, random_state=seed, shuffle=True).split(train_targets)):\n    print(f'Fold {n}')\n\n    model = create_model(len(list(train.columns)))\n    reduce_lr_loss = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=3, verbose=1, epsilon=1e-4, mode='min')\n\n    model.fit(train.values[tr],\n              train_targets.values[tr],\n              validation_data=(train.values[te], train_targets.values[te]),\n              epochs=40, batch_size=128,\n              callbacks=[reduce_lr_loss], verbose=2\n             )\n        \n    def _score(X, y):\n        pred = model.predict(X)\n        return metric(y, pred)\n\n    base_score, local_imp = get_score_importances(_score, train.values[te], train_targets.values[te], n_iter=1, random_state=0)\n    perm_imp += np.mean(local_imp, axis=0)\n    print('')\n    break\n    \ntop_feats = np.argwhere(perm_imp < 0).flatten()\nprint(top_feats)\n'''","76eca3b9":"top_feats = [  0,   1,   2,   3,   5,   6,   8,   9,  10,  11,  12,  14,  15,\n        16,  18,  19,  20,  21,  23,  24,  25,  27,  28,  29,  30,  31,\n        32,  33,  34,  35,  36,  37,  39,  40,  41,  42,  44,  45,  46,\n        48,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,\n        63,  64,  65,  66,  68,  69,  70,  71,  72,  73,  74,  75,  76,\n        78,  79,  80,  81,  82,  83,  84,  86,  87,  88,  89,  90,  92,\n        93,  94,  95,  96,  97,  99, 100, 101, 103, 104, 105, 106, 107,\n       108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,\n       121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134,\n       135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,\n       149, 150, 151, 152, 153, 154, 155, 157, 159, 160, 161, 163, 164,\n       165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 180,\n       181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195,\n       197, 198, 199, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213,\n       214, 215, 218, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230,\n       231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245,\n       246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260,\n       261, 263, 265, 266, 268, 270, 271, 272, 273, 275, 276, 277, 279,\n       282, 283, 286, 287, 288, 289, 290, 294, 295, 296, 297, 299, 300,\n       301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 315,\n       316, 317, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331,\n       332, 333, 334, 335, 338, 339, 340, 341, 343, 344, 345, 346, 347,\n       349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362,\n       363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377,\n       378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391,\n       392, 393, 394, 395, 397, 398, 399, 400, 401, 403, 405, 406, 407,\n       408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422,\n       423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435,\n       436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450,\n       452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465,\n       466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482,\n       483, 485, 486, 487, 488, 489, 491, 492, 494, 495, 496, 500, 501,\n       502, 503, 505, 506, 507, 509, 510, 511, 512, 513, 514, 516, 517,\n       518, 519, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533,\n       534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547,\n       549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563,\n       564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 577, 580,\n       581, 582, 583, 586, 587, 590, 591, 592, 593, 595, 596, 597, 598,\n       599, 600, 601, 602, 603, 605, 607, 608, 609, 611, 612, 613, 614,\n       615, 616, 617, 619, 622, 623, 625, 627, 630, 631, 632, 633, 634,\n       635, 637, 638, 639, 642, 643, 644, 645, 646, 647, 649, 650, 651,\n       652, 654, 655, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668,\n       669, 670, 672, 674, 675, 676, 677, 678, 680, 681, 682, 684, 685,\n       686, 687, 688, 689, 691, 692, 694, 695, 696, 697, 699, 700, 701,\n       702, 703, 704, 705, 707, 708, 709, 711, 712, 713, 714, 715, 716,\n       717, 723, 725, 727, 728, 729, 730, 731, 732, 734, 736, 737, 738,\n       739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751,\n       752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765,\n       766, 767, 769, 770, 771, 772, 774, 775, 780, 781, 782, 783, 784,\n       785, 787, 788, 790, 793, 795, 797, 799, 800, 801, 805, 808, 809,\n       811, 812, 813, 816, 819, 820, 821, 822, 823, 825, 826, 827, 829,\n       831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845,\n       846, 847, 848, 850, 851, 852, 854, 855, 856, 858, 860, 861, 862,\n       864, 867, 868, 870, 871, 873, 874]\nprint(len(top_feats))","263c1dc0":"target_counts = np.sum(train_targets.values, axis = 1)\nprint(np.unique(target_counts, return_counts = True))\ntarget_counts[target_counts == 7] = 5\nprint(np.unique(target_counts, return_counts = True))","9c8eb403":"N_STARTS = 3\nHIDDEN_UNITS = [2048, 1024, 512]\nDROPOUT_RATE = 0.5\nEPOCHS = 30\nBATCH_SIZE = 128\nN_SPLITS = 7\n\nres = train_targets.copy()\nss.loc[:, train_targets.columns] = 0\nres.loc[:, train_targets.columns] = 0\n\nfor seed in range(N_STARTS):\n    \n    for n, (tr, te) in enumerate(StratifiedKFold(n_splits = N_SPLITS, \n                                                 random_state = seed, \n                                                 shuffle = True).split(train.values[:, top_feats], \n                                                                       target_counts)):\n        print(f'Seed {seed}, Fold {n}:')\n        start_time = time.time()\n        \n        with strategy.scope():\n        \n            model = create_model(len(top_feats), HIDDEN_UNITS, DROPOUT_RATE)\n            \n        rlr = ReduceLROnPlateau(monitor='val_loss', factor = 0.1, patience = 3, \n                                verbose = 0, epsilon = 1e-4, mode = 'min')\n        \n        ckp = ModelCheckpoint(f'model_{seed}_{n}.hdf5', monitor = 'val_loss', verbose = 0, \n                              save_best_only = True, save_weights_only = True, mode = 'min')\n        \n        x_tr, x_val = train.values[tr][:, top_feats], train.values[te][:, top_feats]\n        y_tr, y_val = train_targets.astype(float).values[tr], train_targets.astype(float).values[te]\n        \n        history = model.fit(x_tr, y_tr, validation_data = (x_val, y_val), epochs = EPOCHS, \n                            batch_size = BATCH_SIZE, callbacks = [rlr, ckp], verbose = 0)\n        \n        hist = pd.DataFrame(history.history)\n        \n        model.load_weights(f'model_{seed}_{n}.hdf5')\n\n        ss.loc[:, train_targets.columns] += model.predict(test_features.values[:, top_feats])\n        res.loc[te, train_targets.columns] += model.predict(train.values[te][:, top_feats])\n        print('Best Validation Loss:\\t', hist['val_loss'].min())\n        print('Cost Time:\\t', time.time() - start_time)\n        print('-' * 50)\n        \n        K.clear_session()\n        del model, history, hist\n        gc.collect()\n    \nss.loc[:, train_targets.columns] \/= ((n + 1) * N_STARTS)\nres.loc[:, train_targets.columns] \/= N_STARTS","36d860c5":"metrics = []\nfor _target in train_targets.columns:\n    metrics.append(log_loss(train_targets.loc[:, _target], res.loc[:, _target]))\n    \nprint(f'OOF Metric: {np.mean(metrics)}')","b66af676":"metrics = []\nres.loc[train['cp_type'] == 1, train_targets.columns] = 0\nfor _target in train_targets.columns:\n    metrics.append(log_loss(train_targets.loc[:, _target], res.loc[:, _target]))\n    \nprint(f'OOF Metric with postprocessing: {np.mean(metrics)}')","59b8eb82":"ss.loc[test['cp_type'] == 1, train_targets.columns] = 0","d1acb535":"ss.to_csv('submission.csv', index = False)","5364b535":"Based on [Baseline NN with K-Folds][1] and [keras Multilabel Neural Network v1.2][2]\n\nTry StratifiedKFold\n\n[1]: https:\/\/www.kaggle.com\/stanleyjzheng\/baseline-nn-with-k-folds.\n[2]: https:\/\/www.kaggle.com\/simakov\/keras-multilabel-neural-network-v1-2\n"}}