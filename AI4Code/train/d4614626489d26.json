{"cell_type":{"24c4b5dc":"code","5e7b675d":"code","b1bfe6e0":"code","02499e99":"code","3de01544":"code","5b8cb744":"code","b02dc4cb":"code","fc91bb8e":"code","7a3387a4":"code","428bb556":"code","7f59f1f9":"code","a5b574b0":"code","51796db0":"code","1f4c00f8":"code","9fc57042":"code","a4ad2c9d":"code","1c8e18d6":"code","aa054240":"code","28ad65d8":"code","7ab6e219":"code","0afe4bab":"code","0895b8ea":"code","f478320e":"code","11e56ea3":"code","0c6cf7b5":"code","b646a7ed":"code","a77b315c":"code","80610b72":"code","60c61738":"code","2a7e9c8d":"code","ca1baf23":"code","9096d5d5":"code","06954751":"code","63818c75":"code","12bda1a7":"code","a9557aca":"code","19f6096d":"code","173cbcee":"code","6c779346":"code","18525e72":"code","ab11a1f7":"code","b5135cc1":"code","896d0449":"code","12ef656a":"code","d2cf6070":"markdown","e7434b5c":"markdown","603fc3c5":"markdown","f468f7c9":"markdown","79e9b8e7":"markdown","2aee3928":"markdown","70b4f3f5":"markdown","5538db83":"markdown","d66d3be0":"markdown","0e62264c":"markdown","860fddfb":"markdown","9e39bc1b":"markdown","634259a0":"markdown","6e42fec6":"markdown","50a74d04":"markdown","f3d949d4":"markdown","4d106d26":"markdown","060910bd":"markdown"},"source":{"24c4b5dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e7b675d":"import numpy as np\nimport pandas as pd\n\n#for visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\n#for jupoter notebook widgets\nimport ipywidgets as widgets\nfrom ipywidgets import interact\nfrom ipywidgets import interact_manual\n\n#for interactive shells\nfrom IPython.display import display\n\n#for supress warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#setting up the chart size and background\nfrom matplotlib import rcParams\nrcParams['figure.figsize'] = 10, 6\nrcParams['lines.linewidth'] = 3\nplt.style.use('fivethirtyeight')","b1bfe6e0":"#Load Data Set\ndata = pd.read_csv('\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv')","02499e99":"data.head()","3de01544":"data.info()","5b8cb744":"#making variables for categorical and numeric\ncat = ['gender','race\/ethnicity','parental level of education','lunch',\n       'test preparation course']\nnum = ['math score','reading score', 'writing score']","b02dc4cb":"data[cat].describe()","fc91bb8e":"data[num].describe()","7a3387a4":"plt.figure(figsize=(8, 8))\nsns.heatmap(data.corr(), cmap='Blues', annot=True, fmt='.2f')","428bb556":"fig, ((ax1, ax2, ax3)) = plt.subplots(1,3, figsize = (15,8))\nsns.histplot(data, x='math score',color = 'blue', kde =True, label = 'Distribution of Math score', ax = ax1)\nsns.histplot(data, x='writing score',color = 'blue', kde = True,label = 'Distribution of Writing Score', ax = ax2)\nsns.histplot(data, x='reading score',color = 'blue', kde= True,label = 'Distribution of Reading Score', ax = ax3)\n\n# Set axis label\nax1.set_ylabel('Frequency')\n\n\nax2.set_ylabel('')\nax3.set_ylabel('')\n\n# Set Title for each plots\nax1.set_title('Math Score')\nax2.set_title('Writing Score')\nax3.set_title('Reading Score')\n\n\nfig.suptitle('Histogram Plots of Multiple Distributions', fontsize = 'xx-large')\nplt.show()","7f59f1f9":"for i in range(0, len(num)):\n    plt.subplot(1, len(num), i+1)\n    sns.boxplot(data[num[i]], color='blue', orient='h')\n    plt.tight_layout()","a5b574b0":"sns.boxplot(data=data, x='gender', y='math score')","51796db0":"# Getting values for each of the column\n\nfor col in data.columns:\n    print(f\"Column: {col}\")\n    print(data[col].value_counts())\n    \n    print(\"==\"*20)","1f4c00f8":"ax = sns.countplot(x=\"gender\", data=data)\nplt.title('Number of Female vs Male')","9fc57042":"ax = sns.countplot(x=\"race\/ethnicity\", hue='gender', data=data, order=['group A','group B','group C','group D','group E'])\nplt.title('Number of Group for every category in race\/ethnicity')","a4ad2c9d":"ax = sns.countplot(x=\"lunch\", hue='gender', data=data)\nplt.title('Count launch standard and free\/reduced')","1c8e18d6":"ax = sns.countplot(x=\"parental level of education\", hue = 'gender', data=data)\nplt.title('Number of parental level of education for every category')\nplt.xticks(rotation = 45)","aa054240":"display(data[['gender','math score','writing score','reading score']].groupby(['gender']).agg(['mean']).style.background_gradient(cmap = 'Wistia'))\n\ndata[['gender','math score','writing score','reading score']].groupby(['gender']).agg(['mean']).plot(kind = 'bar')\nplt.title('Which Genre have best mean score ?', fontsize =20)\nplt.xticks(rotation =0, fontsize =20)\nplt.ylabel('score', fontsize =15)\nplt.xlabel(' ',)\nplt.show()","28ad65d8":"display(data[['lunch','math score','writing score','reading score']].groupby(['lunch']).agg(['mean']).style.background_gradient(cmap = 'Wistia'))\n\ndata[['lunch','math score','writing score','reading score']].groupby(['lunch']).agg(['mean']).plot(kind = 'bar')\nplt.title('lunch mean score  for every category subject', fontsize =20)\nplt.xticks(rotation =0, fontsize =20)\nplt.ylabel('score', fontsize =15)\nplt.xlabel(' ',)\nplt.show()","7ab6e219":"display(data[['race\/ethnicity','math score','writing score','reading score']].groupby(['race\/ethnicity']).agg(['mean']).style.background_gradient(cmap = 'Wistia'))\n\ndata[['race\/ethnicity','math score','writing score','reading score']].groupby(['race\/ethnicity']).agg(['mean']).plot(kind = 'bar')\nplt.title('race\/ethnicity mean score  for every category subject?', fontsize =20)\nplt.xticks(rotation =0, fontsize =20)\nplt.ylabel('score', fontsize =15)\nplt.xlabel(' ',)\nplt.show()","0afe4bab":"display(data[['parental level of education','math score','writing score','reading score']].groupby(['parental level of education']).agg(['mean']).style.background_gradient(cmap = 'Wistia'))\n\ndata[['parental level of education','math score','writing score','reading score']].groupby(['parental level of education']).agg(['mean']).plot(kind = 'bar')\nplt.title('parental level of education mean score for category subject', fontsize =20)\nplt.xticks(rotation =40, fontsize =20)\nplt.ylabel('score', fontsize =15)\nplt.xlabel(' ',)\nplt.show()","0895b8ea":"#Create column for analyst more deeply\n\ndata['FinalScore'] = round(((data['math score']+data['writing score']+data['reading score'])\/3),2)","f478320e":"data.head()","11e56ea3":"#this function to make a new column grade category\ndef grade(FinalScore):\n    if (FinalScore>=90):\n        return 'A'\n    if (FinalScore >= 80):\n        return 'B'\n    if (FinalScore >= 60):\n        return 'C'\n    if (FinalScore >= 40):\n        return 'D'\n    else: \n        return 'E'\ndata['Grade']=data['FinalScore'].apply(grade)\ndata.Grade.value_counts()","0c6cf7b5":"#this function is to make a status of the students pass\/fail on their exam\ndef Status(FinalScore):\n    if(FinalScore >=40):\n      return 'PASS'\n    else:\n      return 'FAIL'\ndata['Status']=data['FinalScore'].apply(Status)\ndata.Status.value_counts()","b646a7ed":"#top 10 the best students\ndisplay(data[['gender','race\/ethnicity','parental level of education','lunch','test preparation course','FinalScore','Grade']].sort_values(by = 'FinalScore', ascending =False).head(10).style.background_gradient(cmap = 'spring'))","a77b315c":"#top 10 the bad students\ndisplay(data[['gender','race\/ethnicity','parental level of education','lunch','test preparation course','FinalScore','Grade']].sort_values(by = 'FinalScore', ascending =False).tail(10).style.background_gradient(cmap = 'spring'))","80610b72":"student = data.copy()\nstudent.head()","60c61738":"student.drop('Status', axis =1, inplace =True)\nstudent","2a7e9c8d":"student['lunch_standard'] = student['lunch'].map({'free\/reduced':0,'standard':1})\nstudent['test_prep_course_completed'] = student['test preparation course'].map({'completed':1, 'none':0})\nstudent['parent_edu_numerical'] = student['parental level of education'].map({'some high school':1, 'high school':2,'some college':3,'bachelor\\'s degree':4,'associate\\'s degree':5,'master\\'s degree':6})","ca1baf23":"add_column = pd.get_dummies(data['gender'])","9096d5d5":"student = student.join(add_column)","06954751":"student.head()","63818c75":"#make a heat map to see the correlation between variable\nstudent_corr = student.corr()\nmask = np.zeros_like(student_corr)\nmask[np.triu_indices_from(mask)] = True\n\nfig, ax = plt.subplots(figsize=(9, 8))\nax = sns.heatmap(student_corr,mask=mask, \n                 annot=True, annot_kws={'size':10}, fmt=\".2f\")\nplt.title(\"Correlation Every Variable\")\nplt.show()","12bda1a7":"#Modelling\n#Normalization\nstudent[num] = ((student[num] - student[num].min())\/(student[num].max()-student[num].min()))","a9557aca":"X = student[['female','male','parent_edu_numerical','lunch_standard','test_prep_course_completed','reading score']]\ny = student['math score']","19f6096d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,random_state =1)","173cbcee":"from sklearn.ensemble import RandomForestRegressor\nmodel=RandomForestRegressor(n_estimators=100)\nmodel.fit(X_train,y_train)\npreds=model.predict(X_test)","6c779346":"from sklearn import metrics\nfrom sklearn.metrics import r2_score\n\nprint('MAE:', metrics.mean_absolute_error(y_test, preds))\nprint('MSE:', metrics.mean_squared_error(y_test, preds))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, preds)))\nprint(\"R_square score: \", r2_score(y_test,preds))","18525e72":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.preprocessing import RobustScaler,StandardScaler\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn import ensemble\nfrom sklearn.metrics import mean_squared_error,r2_score\n\nparams = {'n_estimators':300,\n          'max_depth': 4,\n          'min_samples_split': 5,\n          'learning_rate': 0.01,\n          'loss': 'ls'}\ngb = ensemble.GradientBoostingRegressor(**params)\ngb.fit(X_train, y_train)\n\nmse = mean_squared_error(y_test, gb.predict(X_test))\n\nprint(\"Gradient boosting regressor score : \", gb.score(X_test, y_test) )\nprint(\"Gradient Boosting regressor Mean squared error : \" , mean_squared_error(preds, y_test))","ab11a1f7":"lr = LinearRegression()\nlr.fit(X_train, y_train)\ny_pred = lr.predict(X_test)\nprint(\"Linear regression score : \", lr.score(X_test, y_test) )\nprint(\"Linear regression Mean squared error : \" , mean_squared_error(y_pred, y_test))","b5135cc1":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()\nrf.fit(X_train,y_train)\ny_pred = rf.predict(X_test)\n\nprint(\"Random forest regressor score : \", rf.score(X_test, y_test) )\nprint(\"Random forest regressor Mean squared error : \" , mean_squared_error(preds, y_test) )","896d0449":"ls = Lasso()\nls.fit(X_train, y_train)\ny_pred = ls.predict(X_test)\n\nprint(\"Lasso regressor score : \", ls.score(X_test, y_test) )\nprint(\"Lasso regressor Mean squared error : \" , mean_squared_error(y_pred, y_test))","12ef656a":"rd = Ridge()\nrd.fit(X_train,y_train)\ny_pred = rd.predict(X_test)\n\nprint(\"Ridge regression score : \", rd.score(X_test, y_test) )\nprint(\"Ridge regression Mean squared error : \" , mean_squared_error(y_pred, y_test))","d2cf6070":"based on information above : <br>\nGeneral information : <br>\n1. the most student pass the exam with C grade <br>\n2. the students pass the exam are 970 <br>\n\n\ntop 10 of the best students: <br>\n\n1.female students dominate out of the top 10 rankings compared to men. <br>\n2.the top 10 students, their parents have academic degrees. <br>\n3. out of the top 10 students, on average they have a standard lunch and complete their test preparation. <br>\n\ntop 10 of the bad students: <br>\n1. From the bottom 10 students, both male and female have relatively the same proportions. <br>\n2. of the bottom 10 students, all of their parents do not have academic degrees. <br>\n3. From the 10 bottom students, on average, they do not have a standard lunch and also do not have a test preparation course.\n","e7434b5c":"### **Feature Engineering**","603fc3c5":"Female more dominant in writing and reading subject than male. <br>\nMale more dominant in math subject than Female","f468f7c9":"there are has multicolinearity between writing score and reading score (0.95) and finale score between math score (0.92) and between writing score and reading score (0.97) <br>\n\nwe will drop column final score and writing score, we only choose reading score for our model","79e9b8e7":"Based on information above : <br>\n\n1. number of the female students is 518, while the male students is 482. <br>\n2. in the race\/ethnicity column, group C has the highest number, followed by group D >B>E>A. <br>\n3.parents of students with the category \"some college\" are the most and have relatively the same number as \"high school\", while parents of students with master's degrees are the least, amounting to 59. <br>\n4. the students with standard lunch are the most than free\/reduced. <br>\n5. many students who do not have test preparation compared to students who have completed test preparation. <br>","2aee3928":"data not have missing value for each column","70b4f3f5":"there are outliers both of female and male","5538db83":"we get the best model is **Ridge regression**","d66d3be0":"transfrom the column which have ordinal and nominal data to be a numeric for buiild a model. <br>\n\nOneHotCoder for nominal type, and label encodeer for ordinal type. <br>\n\nnominal type : <br>\n1. gender <br>\n2. race\/ethnicity ( not uses for modeling) <br>\n\nordinal type: <br>\n1. parental level of education <br>\n2. lunch <br>\n3. test preparation course <br>","0e62264c":"### Import Packages","860fddfb":"for numerical data follows normal distribution, there is not have scew","9e39bc1b":"Based on information above, we get information : <br>\n1. The students with gender female have high frequently than male. <br>\n2. race\/ethnicity have 5 unique value, that are **Group A,B,C,D and E** with group C have high frequently than the others. <br>\n3. parental level of education has 6 unique values, that are **some high school**, **high school**, **some college**, **bachelor's degree**, **associate's degree**, **master's college**. <br>\n4. lunch has two category, that is standard and free\/reduced. <br>\n5. test preparation has two category, that is completed and none. <br>\n6. there is any student get score 0 for math category. <br>\n7. math score has positive correlation reading score and writing score. <br>","634259a0":"if the students have standard lunch, they are will have higher score than the students have lunch free\/reduced","6e42fec6":"### Introdcution\nThis data set contains data about each student's performance in math, reading and writing tests. the data set contains gender, race\/ethnicity, the last education of each student's parents, students who have standard and free\/reduced lunches, and information on test preparations carried out by each student.","50a74d04":"Group E have the best score than the others groups","f3d949d4":"students who have parents with master's educational background tend to have good math, writing and reading scores","4d106d26":"![download.jpg](attachment:afc84b03-be1a-4e4f-ac55-657886390e37.jpg) <br>\nhttps:\/\/en.wikipedia.org\/wiki\/Academic_grading_in_Indonesia <br>\nin here i will use Indonesian standard for judge some student pass the exam.\ni will use role :\n1. Grade A for final score => 90\n2. Grade B for final score => 80 and <90\n3. Grade C for final score =>60 and <80\n4. Grade D for final score > 40 and <60\n5. Grade E for final score <=40","060910bd":"### Exploration Data Analysist "}}