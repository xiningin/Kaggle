{"cell_type":{"4df531aa":"code","a4e22e44":"code","39534881":"code","f8313f0e":"code","7d3bad8c":"code","49e2103e":"code","8fde9235":"code","2eb8184c":"code","9405aa22":"code","b87536a7":"code","628b11ad":"code","c939e4dc":"code","881b6e5a":"code","ccb8baa1":"code","b94bb978":"code","508b980c":"code","f80826e3":"code","ba40207b":"code","475eb581":"code","60be296b":"code","76f136fa":"code","730f0938":"code","33826571":"code","8e107ac9":"code","fd7a59c6":"code","03b46f73":"code","a302f021":"code","340e8d10":"code","e77e9add":"code","78ce941b":"code","460cadf0":"code","d637fa92":"code","d5d1aff1":"code","f0e06333":"code","a26670a5":"code","ec5c43e2":"markdown","181fcc59":"markdown","4b0d5494":"markdown","12c10584":"markdown","df208853":"markdown","92f88dfd":"markdown","28a10cee":"markdown","fba2d3a4":"markdown","9716faa8":"markdown","b78cbd4d":"markdown","31a948cd":"markdown","322c6011":"markdown","7e668306":"markdown","2b2ea6a6":"markdown","42b348a1":"markdown","c8da62c5":"markdown","abe4b674":"markdown","fe03eb54":"markdown","ab845d32":"markdown","24a8fa5f":"markdown","b4ae55cb":"markdown","62210aa4":"markdown","457fde80":"markdown","8c81a853":"markdown","0faf155f":"markdown","6d65ae17":"markdown","97e2b97b":"markdown","2baafef0":"markdown","5db697db":"markdown","d4bd9a04":"markdown","10847f38":"markdown","30e13686":"markdown","eed44fc3":"markdown","950bb348":"markdown","bead1986":"markdown","51030de8":"markdown"},"source":{"4df531aa":"# data manipulation\nimport pandas as pd\nimport numpy as np\n\n# data visualization\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport seaborn as sns\n\n# other\nimport warnings\nwarnings.filterwarnings(\"ignore\")","a4e22e44":"df = pd.read_csv('\/kaggle\/input\/amazon-top-50-bestselling-books-2009-2019\/bestsellers with categories.csv')\ndf.head()","39534881":"df.info()","f8313f0e":"df.describe()","7d3bad8c":"df_genre_year = df.groupby(['Genre', 'Year'], as_index=False).agg({'Name': 'count'}).rename(columns={'Name': 'count'}).sort_values('Year')","49e2103e":"fig = make_subplots(rows=2,\n                    cols=2,\n                    column_widths=[0.5, 0.5],\n                    row_heights=[0.7, 0.3],\n                    vertical_spacing=0.08,\n                    specs=[[{'colspan': 2}, {}],\n                           [{'type': 'xy'}, None]],\n                    subplot_titles=['Genre Ratio by Year']\n                   )\n\n\n\nfig.add_trace(\n        go.Bar(\n            name=\"Non Fiction\",\n            x=df_genre_year[df_genre_year['Genre']=='Non Fiction']['Year'],\n            y=df_genre_year[df_genre_year['Genre']=='Non Fiction']['count'],\n            marker_color='orangered',\n            offsetgroup=0\n        ),\n    row=1,\n    col=1\n            )\nfig.add_trace(\n        go.Bar(\n            name=\"Fiction\",\n            x=df_genre_year[df_genre_year['Genre']=='Fiction']['Year'],\n            y=df_genre_year[df_genre_year['Genre']=='Fiction']['count'],\n            marker_color='black',\n            offsetgroup=1\n        ),\n    row=1,\n    col=1\n            )\n\nfig.add_trace(\n        go.Bar(\n            x=df_genre_year.groupby('Genre', as_index=False).agg({'count': 'sum'})['count'],\n            y=df_genre_year.groupby('Genre', as_index=False).agg({'count': 'sum'})['Genre'],\n            orientation='h',\n            text=df_genre_year.groupby('Genre', as_index=False).agg({'count': 'sum'})['count'],\n            textposition=\"inside\", \n            marker_color=['black', 'orangered'],\n            showlegend=False\n        ),\n    row=2,\n    col=1\n            )\nfig.update_xaxes(dtick=1, row=1, col=1)\nfig.update_layout(template='simple_white', height=800)\nfig.update_xaxes(visible=False, row=2, col=1)\nfig['layout']['annotations'][0].update(x=0.5, y=1.05)\nfig.show()","8fde9235":"df_genre_rate_year = df.groupby(['Genre', 'Year'], as_index=False).agg({'User Rating': 'mean'}).round(3).sort_values('Year')","2eb8184c":"fig = go.Figure(\n    data=[\n        go.Scatter(\n            name='Fiction',\n            x=df_genre_rate_year.query('Genre==\"Fiction\"')['Year'],\n            y=df_genre_rate_year.query('Genre==\"Fiction\"')['User Rating'],\n            marker_color='black',\n        ),\n        go.Scatter(\n            name='Non Fiction',\n            x=df_genre_rate_year.query('Genre==\"Non Fiction\"')['Year'],\n            y=df_genre_rate_year.query('Genre==\"Non Fiction\"')['User Rating'],\n            marker_color='orangered',\n        ),\n    ],\n    layout=go.Layout(\n    template='seaborn',\n    title='Average User Rating by Year',\n    title_x=0.5,\n    yaxis_title='User Rating',\n    xaxis_dtick=1,\n    xaxis_title='Year')\n)\nfig.show()","9405aa22":"df_price_year = df[df['Price']>0].groupby(['Genre', 'Year'], as_index=False).agg({'Price': 'mean'}).round(1).sort_values('Year')","b87536a7":"fig = go.Figure(\n    data=[\n        go.Scatter(\n            name='Fiction',\n            x=df_price_year.query('Genre==\"Fiction\"')['Year'],\n            y=df_price_year.query('Genre==\"Fiction\"')['Price'],\n            marker_color='black',\n        ),\n        go.Scatter(\n            name='Non Fiction',\n            x=df_price_year.query('Genre==\"Non Fiction\"')['Year'],\n            y=df_price_year.query('Genre==\"Non Fiction\"')['Price'],\n            marker_color='orangered',\n        ),\n    ],\n    layout=go.Layout(\n    template='seaborn',\n    title='Average Price by Genre per Year',\n    title_x=0.5,\n    yaxis_title='Price, $',\n    xaxis_dtick=1,\n    xaxis_title=\"Year\")\n)\nfig.show()","628b11ad":"df_genre_rev_year = df.groupby(['Genre', 'Year'], as_index=False).agg({'Reviews': 'mean'}).astype({'Reviews':'int'}).sort_values('Year')","c939e4dc":"fig = go.Figure(\n    data=[\n        go.Scatter(\n            name='Fiction',\n            x=df_genre_rev_year.query('Genre==\"Fiction\"')['Year'],\n            y=df_genre_rev_year.query('Genre==\"Fiction\"')['Reviews'],\n            marker_color='black',\n        ),\n        go.Scatter(\n            name='Non Fiction',\n            x=df_genre_rev_year.query('Genre==\"Non Fiction\"')['Year'],\n            y=df_genre_rev_year.query('Genre==\"Non Fiction\"')['Reviews'],\n            marker_color='orangered',\n        ),\n    ],\n    layout=go.Layout(\n    template='seaborn',\n    title='Average Reviews by Genre per Year',\n    title_x=0.5,\n    yaxis_title='Reviews',\n    xaxis_dtick=1)\n)\nfig.show()","881b6e5a":"df_wo_dupl = df.drop_duplicates(subset=['Name', 'Author', 'Reviews'])\ndf_wo_dupl.shape","ccb8baa1":"df_multiple_books = df.groupby(['Name', 'Author', 'Genre'], as_index=False).agg({'Reviews':'count'}).sort_values('Reviews', ascending=False)","b94bb978":"colors = ['coral', 'mediumturquoise']\n\nfig = make_subplots(rows=2,\n                    cols=2,\n                    column_widths=[0.8, 0.2],\n                    row_heights=[0.3, 0.7],\n                    specs=[[None, {\"type\": \"domain\"}],\n                         [{'colspan': 2}, None]],\n                    vertical_spacing=1,\n                    horizontal_spacing = 0.1,\n                    subplot_titles =['Genre\\'s Distribution', 'Top 30 multiple best-selling books']\n                          )\n\n\n\nfig.add_trace(\n        go.Bar(\n            x=df_multiple_books['Name'][:30],\n            y=df_multiple_books['Reviews'][:30],\n            text=df_multiple_books['Genre'][:30],\n            textposition=\"inside\",\n            marker_color='darkslateblue',\n            textfont_color=[colors[0] if x == 'Fiction' else colors[1] for x in df_multiple_books['Genre'][:30]],\n            showlegend=False,\n            ),\n    row=2,\n    col=1\n            )\nfig.add_trace(\n    go.Pie(\n        labels=df_multiple_books[:30].Genre.value_counts().index.tolist(),\n        values=df_multiple_books[:30].Genre.value_counts().values.tolist(),\n        marker=dict(colors=colors[::-1], line=dict(color='#000000', width=1))\n        ),\n    row=1,\n    col=2\n        )\n\nfig.update_yaxes(title_text=\"Number of times\", row=2, col=1)\nfig.update_layout(template='simple_white', height=1000)\nfig.update_xaxes(dtick=1,\n                 tickangle=60,\n                 ticktext=df_multiple_books['Name'][:30].apply(lambda x: ' '.join((x.split())[:5])+'...' if len(x.split()) > 5 else x),\n                 tickvals=df_multiple_books['Name'][:30], row=2, col=1)\n\n\n\nfig['layout']['annotations'][0].update(x=0.9, y=0.9)\nfig['layout']['annotations'][1].update(x=0.4, y=0.9)\nfig.show()","508b980c":"most_review_df = df_wo_dupl.groupby(['Name', 'Genre'], as_index=False).agg({'Reviews': 'sum'}).sort_values('Reviews', ascending=False)","f80826e3":"\nfig = make_subplots(rows=2,\n                    cols=2,\n                    column_widths=[0.8, 0.2],\n                    row_heights=[0.2, 0.8],\n                    specs=[[None, {\"type\": \"domain\"}],\n                         [{'colspan': 2}, None]],\n                    vertical_spacing=1,\n                    horizontal_spacing = 0.01,\n                    subplot_titles =['Genre\\'s Distribution', 'Top 30 most Reviewed Books']\n                          )\n\n\nfig.add_trace(\n        go.Bar(\n            x=most_review_df['Name'][:30],\n            y=most_review_df['Reviews'][:30],\n            text=most_review_df['Genre'][:30],\n            textposition=\"inside\",\n            marker_color='darkslateblue',\n            textfont_color=[colors[0] if x == 'Fiction' else colors[1] for x in most_review_df['Genre'][:30]],\n            showlegend=False,\n            ),\n    row=2,\n    col=1\n            )\nfig.add_trace(\n    go.Pie(\n        labels=most_review_df[:30].Genre.value_counts().index.tolist(),\n        values=most_review_df[:30].Genre.value_counts().values.tolist(),\n        marker=dict(colors=colors, line=dict(color='#000000', width=1))\n        ),\n    row=1,\n    col=2\n        )\n\n\nfig.update_yaxes(title_text=\"Reviews\", row=2, col=1)\nfig.update_layout(template='simple_white', height=800)\nfig.update_xaxes(dtick=1,\n                 tickangle=60,\n                 ticktext=most_review_df['Name'][:30].apply(lambda x: ' '.join((x.split())[:5])+'...' if len(x.split()) > 5 else x),\n                 tickvals=most_review_df['Name'][:30], row=2, col=1)\n\nfig['layout']['annotations'][0].update(x=0.9, y=0.9)\nfig['layout']['annotations'][1].update(x=0.4, y=0.9)\nfig.show()\n","ba40207b":"most_expensive_df = df_wo_dupl.groupby(['Name', 'Author', 'Genre'], as_index=False).agg({'Price': 'mean'}).sort_values('Price', ascending=False)","475eb581":"fig = make_subplots(rows=2,\n                    cols=2,\n                    column_widths=[0.8, 0.2],\n                    row_heights=[0.2, 0.8],\n                    specs=[[None, {\"type\": \"domain\"}],\n                         [{'colspan': 2}, None]],\n                    vertical_spacing=1,\n                    horizontal_spacing = 0.01,\n                    subplot_titles =['Genre\\'s Distribution', 'Top 30 Most Expensive Books']\n                          )\n\nfig.add_trace(\n        go.Bar(\n            x=most_expensive_df['Name'][:30],\n            y=most_expensive_df['Price'][:30],\n            text=most_expensive_df['Genre'][:30],\n            textposition=\"inside\",\n            marker_color='darkslateblue',\n            textfont_color=[colors[0] if x == 'Fiction' else colors[1] for x in most_expensive_df['Genre'][:30]],\n            showlegend=False,\n            ),\n    row=2,\n    col=1\n            )\nfig.add_trace(\n    go.Pie(\n        labels=most_expensive_df[:30].Genre.value_counts().index.tolist(),\n        values=most_expensive_df[:30].Genre.value_counts().values.tolist(),\n        marker=dict(colors=colors[::-1], line=dict(color='#000000', width=1))\n        ),\n    row=1,\n    col=2\n        )\n\n\nfig.update_yaxes(title_text=\"Price, $\", row=1, col=1)\nfig.update_layout(template='simple_white', height=1000)\nfig.update_xaxes(dtick=1,\n                 tickangle=60,\n                 ticktext=most_expensive_df['Name'][:30].apply(lambda x: ' '.join((x.split())[:5])+'...' if len(x.split()) > 5 else x),\n                 tickvals=most_expensive_df['Name'][:30], row=2, col=1)\n\nfig['layout']['annotations'][0].update(x=0.9, y=0.9)\nfig['layout']['annotations'][1].update(x=0.4, y=0.9)\nfig.show()\n","60be296b":"high_rate_df = df_wo_dupl.groupby(['Name', 'Author', 'Genre'], as_index=False).agg({'User Rating': 'mean'}).sort_values('User Rating', ascending=False)\nhigh_rate_df_4dot9 = high_rate_df[high_rate_df['User Rating']==4.9]","76f136fa":"fig = make_subplots(rows=2,\n                    cols=1,\n                    specs=[[{\"type\": \"xy\"}],\n                          [{\"type\": \"xy\"}]],\n                    subplot_titles =['Histogram of User Rating by Genre', '4.9 rated Books']\n                          )\nfig.add_trace(go.Histogram(x=high_rate_df.query('Genre==\"Fiction\"')['User Rating'], nbinsx=20, name='Fiction', marker_color=colors[0]), row=1, col=1)\nfig.add_trace(go.Histogram(x=high_rate_df.query('Genre==\"Non Fiction\"')['User Rating'], nbinsx=20, name='Non Fiction', marker_color=colors[1]), row=1, col=1)\n\nfig.add_trace(go.Bar(\n                x=high_rate_df_4dot9['Name'],\n                y=high_rate_df_4dot9['User Rating'],\n                marker_color=[colors[0] if x == 'Fiction' else colors[1] for x in high_rate_df_4dot9['Genre']],\n                showlegend=False\n                    ),\n              row=2,\n              col=1\n            )\n\nfig.update_layout(template='simple_white', height=1000)\nfig.update_xaxes(dtick=0.1, title_text='Rating', row=1, col=1)\nfig.update_yaxes(title_text='Freq', row=1, col=1)\n\nfig.update_xaxes(dtick=1,\n                 tickangle=60,\n                 ticktext=high_rate_df_4dot9['Name'][:30].apply(lambda x: ' '.join((x.split())[:5])+'...' if len(x.split()) > 5 else x),\n                 tickvals=high_rate_df_4dot9['Name'][:30], row=2, col=1)\nfig.update_yaxes(title_text='Rating')","730f0938":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(18,6))\nsns.heatmap(df_wo_dupl[['Price', 'User Rating', 'Reviews']].corr(), annot=True, vmin=-1, vmax=1, ax=ax1)\nsns.heatmap(df_wo_dupl.query('Genre==\"Fiction\"')[['Price', 'User Rating', 'Reviews']].corr(), annot=True, vmin=-1, vmax=1, ax=ax2)\nsns.heatmap(df_wo_dupl.query('Genre==\"Non Fiction\"')[['Price', 'User Rating', 'Reviews']].corr(), annot=True, vmin=-1, vmax=1, ax=ax3)\nfig.tight_layout()\nax1.set_title('Fiction + Non Fiction', fontsize=14)\nax2.set_title('Fiction', fontsize=14)\nax3.set_title('Non Fiction', fontsize=14);","33826571":"def iqr_outliers(df):\n    q1 = df.quantile(0.25)\n    q3 = df.quantile(0.75)\n    iqr = q3 - q1\n    lower_tail = q1 - 1.5 * iqr\n    upper_tail = q3 + 1.5 * iqr\n    return lower_tail, upper_tail","8e107ac9":"index_rating = df_wo_dupl[(df_wo_dupl['User Rating'] < iqr_outliers(df_wo_dupl['User Rating'])[0]) | (df_wo_dupl['User Rating'] > iqr_outliers(df_wo_dupl['User Rating'])[1])].index\n\nindex_price = df_wo_dupl[(df_wo_dupl['Price'] < iqr_outliers(df_wo_dupl['Price'])[0]) | (df_wo_dupl['Price'] > iqr_outliers(df_wo_dupl['Price'])[1])].index\n\nindex_reviews = df_wo_dupl[(df_wo_dupl['Reviews'] < iqr_outliers(df_wo_dupl['Reviews'])[0]) | (df_wo_dupl['Reviews'] > iqr_outliers(df_wo_dupl['Reviews'])[1])].index\n\ndf_wo_out = df_wo_dupl.drop(index_reviews | index_price | index_rating)\n","fd7a59c6":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(18,6))\nsns.heatmap(df_wo_out[['Price', 'User Rating', 'Reviews']].corr(), annot=True, vmin=-1, vmax=1, ax=ax1)\nsns.heatmap(df_wo_out.query('Genre==\"Fiction\"')[['Price', 'User Rating', 'Reviews']].corr(), annot=True, vmin=-1, vmax=1, ax=ax2)\nsns.heatmap(df_wo_out.query('Genre==\"Non Fiction\"')[['Price', 'User Rating', 'Reviews']].corr(), annot=True, vmin=-1, vmax=1, ax=ax3)\nfig.tight_layout()\nax1.set_title('Fiction + Non Fiction', fontsize=14)\nax2.set_title('Fiction', fontsize=14)\nax3.set_title('Non Fiction', fontsize=14);","03b46f73":"unique_authbook = df_wo_dupl.groupby('Author', as_index=False)['Name'].count().sort_values('Name', ascending=False)","a302f021":"fig = go.Figure(\n    data=[\n        go.Bar(\n            x=unique_authbook['Author'][:30],\n            y=unique_authbook['Name'][:30],\n            marker_color='teal',\n            text=unique_authbook['Name'].astype('str') + ' books',\n            textposition='inside',\n        )\n    ],\n    layout=go.Layout(\n        template='simple_white',\n        height=1000,\n        title=\"Top 30 multiple best-selling Authors\",\n        title_x=0.5,\n        yaxis_title=\"Number of Books\",\n        xaxis=dict(dtick=1,\n        tickangle=60),\n    )\n)\nfig.show()","340e8d10":"df_nonfiction_unique = df_wo_dupl.query('Genre == \"Fiction\"').groupby('Author', as_index=False)['Name'].count().rename(columns={'Name': 'cnt_nonfiction'})\ndf_fiction_unique = df_wo_dupl.query('Genre == \"Non Fiction\"').groupby('Author', as_index=False)['Name'].count().rename(columns={'Name': 'cnt_fiction'})\n\ndf_auth_both_genre = df_fiction_unique.merge(df_nonfiction_unique, on='Author', how='inner')","e77e9add":"fig = go.Figure(data=[go.Table(\n    header=dict(values=list(df_auth_both_genre.columns),\n                fill_color='paleturquoise',\n                align='left'),\n    cells=dict(values=df_auth_both_genre.transpose().values.tolist(),\n               fill_color='lavender',\n               align='left'))\n])\nfig.update_layout(title_text='Bestselling Authors in both Genres', title_x=0.5)\nfig.show()","78ce941b":"most_review_auth_df = df_wo_dupl.groupby('Author', as_index=False).agg({'Reviews': 'sum', 'Name': 'count'}).sort_values('Reviews', ascending=False)\nmost_review_auth_df['rev_per_book'] = (most_review_auth_df['Reviews']\/most_review_auth_df['Name']).astype('int')","460cadf0":"fig = make_subplots(rows=2,\n                    cols=1,\n                    specs=[[{\"type\": \"xy\"}],\n                          [{\"type\": \"xy\"}]],\n                    subplot_titles =['Top 30 most reviewed Authors', 'Top 30 most reviewed Authors per Book (min 2 Books)']\n                          )\n\n\nfig.add_trace(\n        go.Bar(\n            x=most_review_auth_df['Author'][:30],\n            y=most_review_auth_df['Reviews'][:30],\n            marker_color='teal',\n            text=[str(x) + ' book' if x==1 else str(x) + ' books' for x in  most_review_auth_df['Name'][:30]],\n            textposition='inside',\n            showlegend=False,\n            ),\n    row=1,\n    col=1\n            )\n\n\nfig.add_trace(\n        go.Bar(\n            x=most_review_auth_df.query('Name > 1').sort_values('rev_per_book', ascending=False)['Author'][:30],\n            y=most_review_auth_df.query('Name > 1').sort_values('rev_per_book', ascending=False)['rev_per_book'][:30],\n            marker_color=\"crimson\",\n            text=[str(x) + ' book' if x==1 else str(x) + ' books' for x in  most_review_auth_df.query('Name > 1').sort_values('rev_per_book', ascending=False)['Name'][:30]],\n            textposition='inside',\n            showlegend=False,\n            ),\n    row=2,\n    col=1\n)\n\nfig.update_layout(template='simple_white', height=1200)\nfig.update_yaxes(title_text=\"Reviews\", row=1, col=1)\nfig.update_xaxes(dtick=1,\n                 tickangle=60,\n                 ticktext=most_review_auth_df['Author'][:30],\n                 tickvals=most_review_auth_df['Author'][:30], row=1, col=1)\n\n\nfig.update_yaxes(title_text=\"Reviews\", row=2, col=1)\nfig.update_xaxes(dtick=1,\n                 tickangle=60,\n                 ticktext=most_review_auth_df.query('Name > 1').sort_values('rev_per_book', ascending=False)['Author'][:30],\n                 tickvals=most_review_auth_df.query('Name > 1').sort_values('rev_per_book', ascending=False)['Author'][:30], row=2, col=1)","d637fa92":"most_expensive_auth_df = df_wo_dupl.groupby('Author', as_index=False).agg({'Price': 'mean', 'Name': 'count'}).sort_values('Price', ascending=False)","d5d1aff1":"fig = make_subplots(rows=2,\n                    cols=1,\n                    specs=[[{\"type\": \"xy\"}],\n                          [{\"type\": \"xy\"}]],\n                    subplot_titles =['Top 30 Authors with the most expensive Books on average', 'Top 30 Authors with the most expensive Books on average (min 2 Books)']\n                          )\n\n\nfig.add_trace(\n        go.Bar(\n            x=most_expensive_auth_df['Author'][:30],\n            y=most_expensive_auth_df['Price'][:30],\n            text=[str(x) + ' book' if x==1 else str(x) + ' books' for x in  most_expensive_auth_df['Name'][:30]],\n            textposition='inside',\n            marker_color='teal',\n            showlegend=False,\n            ),\n    row=1,\n    col=1\n            )\n\n\nfig.add_trace(\n        go.Bar(\n            x=most_expensive_auth_df.query('Name > 1')['Author'][:30],\n            y=most_expensive_auth_df.query('Name > 1')['Price'][:30],\n            text=[str(x) + ' book' if x==1 else str(x) + ' books' for x in most_expensive_auth_df.query('Name > 1')['Name'][:30]],\n            textposition='inside',\n            marker_color=\"crimson\",\n            showlegend=False,\n            ),\n    row=2,\n    col=1\n)\n\nfig.update_layout(template='simple_white', height=1200)\nfig.update_yaxes(title_text=\"Price, $\", row=1, col=1)\nfig.update_xaxes(dtick=1,\n                 tickangle=60,\n                 ticktext=most_expensive_auth_df['Author'][:30],\n                 tickvals=most_expensive_auth_df['Author'][:30], row=1, col=1)\n\n\nfig.update_yaxes(title_text=\"Price, $\", row=2, col=1)\nfig.update_xaxes(dtick=1,\n                 tickangle=60,\n                 ticktext=most_expensive_auth_df.query('Name > 1')['Author'][:30],\n                 tickvals=most_expensive_auth_df.query('Name > 1')['Author'][:30], row=2, col=1)","f0e06333":"high_rate_auth_df = df_wo_dupl.groupby('Author', as_index=False).agg({'User Rating': 'mean', 'Name': 'count'}).sort_values('User Rating', ascending=False)","a26670a5":"fig = make_subplots(rows=2,\n                    cols=1,\n                    specs=[[{\"type\": \"xy\"}],\n                          [{\"type\": \"xy\"}]],\n                    subplot_titles =['Top 30 highest-rated Authors', 'Top 30 highest-rated Authors (min 2 books)']\n                          )\n\n\nfig.add_trace(\n        go.Bar(\n            x=high_rate_auth_df['Author'][:30],\n            y=high_rate_auth_df['User Rating'][:30],\n            text=[str(x) + ' book' if x==1 else str(x) + ' books' for x in  high_rate_auth_df['Name'][:30]],\n            textposition='inside',\n            marker_color='teal',\n            showlegend=False,\n            ),\n    row=1,\n    col=1\n            )\n\n\nfig.add_trace(\n        go.Bar(\n            x=high_rate_auth_df.query('Name > 1')['Author'][:30],\n            y=high_rate_auth_df.query('Name > 1')['User Rating'][:30],\n            text=high_rate_auth_df.query('Name > 1')['Name'][:30].astype('str')+' books',\n            textposition='inside',\n            marker_color=\"crimson\",\n            showlegend=False,\n            ),\n    row=2,\n    col=1\n)\n\nfig.update_layout(template='simple_white', height=1200)\nfig.update_yaxes(title_text=\"Price\", range=[4.6, 5], row=1, col=1)\nfig.update_xaxes(dtick=1,\n                 tickangle=60,\n                 ticktext=high_rate_auth_df['Author'][:30],\n                 tickvals=high_rate_auth_df['Author'][:30], row=1, col=1)\n\n\nfig.update_yaxes(title_text=\"Price\", range=[4.3, 5], row=2, col=1)\nfig.update_xaxes(dtick=1,\n                 tickangle=60,\n                 ticktext=high_rate_auth_df.query('Name > 1')['Author'][:30],\n                 tickvals=high_rate_auth_df.query('Name > 1')['Author'][:30], row=2, col=1)","ec5c43e2":"<a id=\"authors-analysis\"><\/a>\n## 2.4. Authors Analysis \u270d\ufe0f","181fcc59":"![image.png](attachment:0f375d67-5e99-4153-a128-d44258c83458.png)","4b0d5494":"<a id=\"genres-price\"><\/a>\n### 2.1.3. Average Price by Genre per Year","12c10584":"<a id=\"books-rating\"><\/a>\n### 2.2.4. The highest rated Books","df208853":"<a id=\"correlation\"><\/a>\n## 2.3. Correlation between numerical Features","92f88dfd":"<a id=\"books-price\"><\/a>\n### 2.2.3. The most expensive Books","28a10cee":"<a id=\"authors-both\"><\/a>\n#### 2.4.1.1. Best-selling Authors in both Genres","fba2d3a4":"<a id=\"authors-price\"><\/a>\n### 2.4.3. Authors with the most expensive Books","9716faa8":"<a id=\"genres-reviews\"><\/a>\n### 2.1.4. Average Reviews by Genre per Year","b78cbd4d":"<font size='4'>We can notice that the data either have weak or no correlation<\/font>","31a948cd":"<font size='4'>Let's select rows which Price isn't equal 0<\/font>","322c6011":"<a id=\"genres-analysis\"><\/a>\n## 2.1. Genres analysis \ud83d\udcd6","7e668306":"<a id=\"data-vis\"><\/a>\n# <p style=\"background-color:PaleTurquoise; font-family:newtimeroman; font-size:120%; text-align:center; border-radius: 15px 50px;\">2. Data Visualization \ud83d\udcca<\/p>","2b2ea6a6":"<a id=\"correlation-woutliers\"><\/a>\n### 2.3.2 Data without Outliers","42b348a1":"<a id=\"correlation-outliers\"><\/a>\n### 2.3.1 Data with Outliers","c8da62c5":"<a id=\"genres-ratio\"><\/a>\n### 2.1.1. Genre Ratio by Year","abe4b674":"<p style=\"font-family:newtimeroman; font-size:30px; text-align:center; \">Thank you for reading my work to the end.<\/p>\n<p style=\"font-family:newtimeroman; font-size:30px; text-align:center; \">I would be grateful for any feedback and your votes.<\/p>\n<p style=\"font-family:newtimeroman; font-size:30px; text-align:center; \">Have a nice day and I hope that my work was interesting and useful for you.<\/p>\n\n <button><a href=\"#start\">Back to Top<\/a><\/button>\n","fe03eb54":"* <font size='4'>The Number of Books in Genre Non Fiction is usually more than Fiction (except 2014);<\/font>\n* <font size='4'>The Average User Rating is higher for Fiction than for Non Fiction (except 2012, 2013);<\/font>\n* <font size='4'>The Average Price for Books of Non Fiction Genre is higher than Fiction (except for 2009);<\/font>\n* <font size='4'>The Average Reviews for Fiction Books is more than Non Fiction (except 2018).<\/font>\n\n","ab845d32":"<a id=\"books-multiple\"><\/a>\n### 2.2.1. Top 30 multiple best-selling Books","24a8fa5f":"<font size='4'>As we can see, correlation has remained the same. So outliers didn't matter much<\/font>","b4ae55cb":"* <font size='4'> Jeff Kiney is the leader among authors whose books have become bestsellers (12 books)<\/font>\n* <font size='4'> E. L. James and Suzanne Collins is the most reviewed authors (130k reviews)<\/font>\n* <font size='4'> American Psychiatric Association (105\uff04) publishes the most expensive books on average but among those who have more than 1 book is The College Board (38\uff04)<\/font>\n* <font size='4'>The author with the highest average rating is Dav Pilkey (4.9 rating, 6 books) <\/font>","62210aa4":"<a id=\"books-analysis\"><\/a>\n## 2.2. Books Analysis \ud83d\udcda","457fde80":"<a id=\"import-libraries\"><\/a>\n# Import Libraries","8c81a853":"<a id=\"intro\"><\/a>\n# Introduction\n\n<font size='4'>Amazon is the world's largest online marketplace, AI assistant provider, live-streaming platform and cloud computing platform as measured by revenue and market capitalization. Amazon is the largest Internet company by revenue in the world. It is the second largest private employer in the United States and one of the world's most valuable companies. As of 2020, Amazon has the highest global brand valuation. <\/font> <a href=\"https:\/\/en.wikipedia.org\/wiki\/Amazon_(company)\">[wiki]<\/a>\n    \n<font size='4'>This kernel focuses on researching Amazons top 50 bestsellers between 2009 and 2019.\nWe will find out which genres, books and authors were the most popular. How the rating, price and reviews of books changed during this period and also analyze the relationship between these features.<\/font> ","0faf155f":"<a id=\"authors-rating\"><\/a>\n### 2.4.4. The highest-rated Authors","6d65ae17":"<a id=\"start\"><\/a>\n## <p style=\"background-color:PaleTurquoise; font-family:newtimeroman; font-size:120%; text-align:center; border-radius: 15px 50px;\">Table of Content<\/p>\n[Introduction](#intro)\n\n[Import Libraries](#import-libraries)\n\n1. [Data Preparation \ud83d\udd0e](#data-prep)\n\n2. [Data Visualization \ud83d\udcca](#data-vis)\n\n    2.1. [Genres Analysis \ud83d\udcd6](#genres-analysis)\n    \n    2.1.1. [Genre Ratio by Year](#genres-ratio)\n    \n    2.1.2. [Average User Rating by Genre per Year](#genres-rating)\n    \n    2.1.3. [Average Price by Genre per Year](#genres-price)\n    \n    2.1.4. [Average Reviews by Genre per Year](#genres-reviews)\n    \n    2.2. [Books Analysis \ud83d\udcda](#books-analysis)\n    \n    2.2.1. [Top 30 multiple best-selling Books](#books-multiple)\n    \n    2.2.2. [The most reviewed Books](#books-reviews)\n    \n    2.2.3. [The most expensive Books](#books-price)\n    \n    2.2.4. [The highest rated Books](#books-rating)\n    \n    2.3. [Correlation between numerical Features](#correlation)\n    \n    2.3.1. [Data with Outliers](#correlation-outliers)\n    \n    2.3.2. [Data without Outliers](#correlation-woutliers)\n    \n    2.4. [Authors Analysis \u270d\ufe0f](#authors-analysis)\n    \n    2.4.1. [Top multiple best-selling Authors](#authors-multiple)\n    \n    2.4.1.1. [Best-selling Authors in both Genres](#authors-both)\n    \n    2.4.2. [The most reviewed Authors](#authors-reviews)\n    \n    2.4.3. [Authors with the most expensive Books](#authors-price)\n    \n    2.4.4. [The highest-rated Authors](#authors-rating)\n    ","97e2b97b":"<a id=\"authors-multiple\"><\/a>\n### 2.4.1. Top multiple best-selling Authors","2baafef0":"<a id=\"authors-reviews\"><\/a>\n### 2.4.2. The most reviewed Authors","5db697db":"<font size='4'>it's worth noting that Reviews, Price and User Rating columns contain outliers which we'll analyze later<\/font>\n","d4bd9a04":"<a id=\"genres-rating\"><\/a>\n### 2.1.2. Average User Rating by Genre per Year","10847f38":"* <font size='4'>Publication Manual of the American Psychological Association is the absolute leader among multiple bestsellers (10 times);<\/font>\n* <font size='4'>Where the Crawdads Sing is the most reviewed book (87.841 k. reviews);<\/font>\n* <font size='4'>Diagnostic and Statistical Manual of Mental Disorders is the most expensive book (105\uff04);<\/font>\n* <font size='4'>The highest rating is 4.9. More often it is awarded to books of the fiction genre (22 vs 6), but also a rating below 4 is received only by fiction (5).<\/font>\n\n","30e13686":"<a id=\"books-reviews\"><\/a>\n### 2.2.2. The most reviewed Books","eed44fc3":"<a id=\"data-prep\"><\/a>\n# <p style=\"background-color:PaleTurquoise; font-family:newtimeroman; font-size:120%; text-align:center; border-radius: 15px 50px;\">1. Data Preparation \ud83d\udd0e<\/p>\n","950bb348":"Let's look correlation in data with outliers:","bead1986":"<font size='4'>As we see, there is no NaN values<\/font>\n","51030de8":"<font size='4'>Next, let's look at the data without outliers. Perhaps something will change?<\/font>\n\n<font size='4'>First define outliers search function by IQR method<\/font>"}}