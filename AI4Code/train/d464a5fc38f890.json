{"cell_type":{"21997f5d":"code","9ed9372e":"code","e7ee214c":"code","dc363d09":"code","3b4af6b6":"code","23b0d9aa":"code","baa81934":"code","69cfdc27":"code","51cf447d":"code","b87d5884":"code","d6a3a7f2":"code","9f509dab":"code","a8dbd6d6":"code","275fdf39":"code","b31c36b8":"code","018edac8":"code","d4263192":"code","32bc2c00":"code","5b6f7767":"code","4132167f":"code","a1a07cd9":"code","cc70f42e":"code","fc35c0f2":"code","10457758":"code","83a4032e":"code","13d53ee6":"code","c0e7d275":"code","2421b26e":"code","282feaab":"code","1cc1ee0d":"code","fc751816":"code","629c506f":"code","560d8b09":"code","45609df1":"code","f5464661":"code","c1db4637":"code","dce0a14d":"markdown","a1d95a1b":"markdown","cc7e1012":"markdown","8a0f2dba":"markdown","030abfaa":"markdown","2c4a59e8":"markdown","4a129dc2":"markdown","f694a0f6":"markdown","b3bd3949":"markdown","704973a1":"markdown","cadb8585":"markdown","4ca788b1":"markdown","5808f8c6":"markdown","ac18dd4c":"markdown","f27cb46d":"markdown","4c158b6f":"markdown","1163efc3":"markdown","b6b93a00":"markdown","a0e199c5":"markdown","3a729363":"markdown","ae10e76a":"markdown","6aa86547":"markdown","0aef1596":"markdown","31059706":"markdown","a22049b4":"markdown","43a91eb8":"markdown","456ea652":"markdown","aceaddd9":"markdown","26abe0e4":"markdown","d927cf29":"markdown","d3be88b6":"markdown"},"source":{"21997f5d":"# \u5bfc\u5165\u6570\u636e\u5206\u6790\u5e38\u7528\u5e93\uff0c\u8be5\u90e8\u5206\u6a21\u5757\u53ef\u7528\u4e8e\u6570\u636e\u96c6\u7684\u5206\u6790\u548c\u53ef\u89c6\u5316\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.set_option('max_columns', 100); pd.set_option('max_row', 1000)","9ed9372e":"# \u5bfc\u5165\u6570\u636e\n# df_train = pd.read_csv(r'F:\\Python\\datasets\\kaggle\\started\\titanic\\train.csv')\n# df_test = pd.read_csv(r'F:\\Python\\datasets\\kaggle\\started\\titanic\\test.csv')\n\ndf_train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")","e7ee214c":"# \u67e5\u770b\u8bad\u7ec3\u6570\u636e\ndf_train.head()","dc363d09":"# \u5206\u6790\u6570\u636e\u96c6\ndf_train.info()\n\n# 1\u3001\u901a\u8fc7\u67e5\u770binfo\u4fe1\u606f\u53d1\u73b0\uff0c\u8bad\u7ec3\u96c6\u6709891\u4e2a\u6837\u672c\uff0c\u5176\u4e2dAge\u3001Cabin\u3001Embarked\u6709\u7f3a\u5931\u9879\n# 2\u3001\u5176\u4e2dCabin\u7a7a\u503c\u592a\u591a\uff0c\u4e00\u822c\u5bf9\u4e8e\u8fd9\u79cd\u7279\u5f81\u53ef\u4ee5\u76f4\u63a5\u5220\u9664","3b4af6b6":"# \u67e5\u770b\u6837\u672c\u6570\u636e\u5206\u5e03\u6bd4\u4f8b\nplt.pie(x=np.bincount(df_train.Survived),\n        labels=np.unique(df_train.Survived),\n        #------autopct\u767e\u5206\u6bd4\u683c\u5f0f labeldistance\u7c7b\u578b\u8ddd\u79bb\u4e2d\u5fc3\u957f\u5ea6\uff0cpctdistance\u767e\u5206\u6bd4\u8ddd\u79bb\u4e2d\u5fc3\u957f\u5ea6\n        autopct='%.2f%%', labeldistance=1.2, pctdistance=0.75, \n        counterclock=False, startangle=30,  #------counterclock True\u987a\u65f6\u9488 False\u9006\u65f6\u9488 startangle\u5f00\u59cb\u89d2\u5ea6\n        wedgeprops={'width':0.5, 'edgecolor':'w'}, #------\u8bbe\u7f6e\u4e2d\u5fc3\u5bbd\u5ea6\uff0c\u53ef\u4ee5\u7528\u6765\u751f\u6210\u73af\u56fe\n        radius=1  #------\u534a\u5f84\n       )","23b0d9aa":"# \u901a\u8fc7\u77e9\u9635\u6563\u70b9\u56fe\u67e5\u770b\u6570\u636e\u7279\u5f81\u4e4b\u95f4\u7684\u5185\u5728\u5173\u7cfb\nsns.pairplot(df_train.drop(['PassengerId'], axis='columns'), \n             hue='Survived', kind='scatter', \n             palette='husl', height=2,\n            )","baa81934":"# \u67e5\u770bCabin\u7279\u5f81\u5206\u5e03\ndf_train[df_train.Cabin.notna()].Survived.value_counts()","69cfdc27":"# \u67e5\u770bTicket\u76f8\u5173\u4fe1\u606f\ndf_train[df_train.Ticket.str.isdigit()].Survived.value_counts()","51cf447d":"# \u67e5\u770bTicket\u76f8\u5173\u4fe1\u606f\ndf_train[~df_train.Ticket.str.isdigit()].Survived.value_counts()","b87d5884":"# \u987e\u5ba2\u59d3\u540d\u867d\u7136\u6ca1\u6709\u76f4\u63a5\u5173\u7cfb\uff0c\u4f46\u662f\u5176\u5305\u542b\u4f8b\u5982Dr\uff0cMrs\u7b49\uff0c\u53ef\u4ee5\u5355\u51fa\u62bd\u53d6\u51fa\u6765\u4f5c\u4e3a\u4e00\u4e2a\u7279\u5f81\nname_type = df_train.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\npd.crosstab(name_type, df_train.Survived)","d6a3a7f2":"# \u901a\u8fc7\u540d\u5b57\u7684\u5c5e\u6027\u6211\u4eec\u589e\u52a0name_type\u5c5e\u6027\uff0c\u5e76\u5220\u9664Name\u5c5e\u6027\ndf_train['name_type'] = name_type.map(lambda a:a if a in \\\n                                      ['Master', 'Miss', 'Mr', 'Mrs'] else 'Others')","9f509dab":"# \u4ece\u5bf9Ticket\u7684\u5206\u6790\u4e2d\u53ef\u4ee5\u53d1\u73b0\uff0c\u6570\u5b57\u7f16\u7801\u8239\u7968\u548c\u975e\u6570\u5b57\u7f16\u7801\u8239\u7968\u4f3c\u4e4e\u5bf9\u4e8e\u662f\u5426\u5e78\u5b58\u6ca1\u6709\u5e2e\u52a9\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u5c5e\u6027\u5254\u9664\ndf_train.drop(['Ticket'], axis='columns', inplace=True)\n\n# \u5220\u9664Cabin\ndf_train.drop('Cabin', axis='columns', inplace=True)\n\n# \u5220\u9664PassengerId\ndf_train.drop('PassengerId', axis='columns', inplace=True)\n\n# \u5220\u9664\u7528\u6237\u540d\u5b57\ndf_train.drop(['Name'], axis='columns', inplace=True)","a8dbd6d6":"# \u67e5\u770b\u65b0\u7684df\ndf_train.head()","275fdf39":"# \u586b\u8865\u7a7a\u503c-Age\nage_mean = df_train.Age.mean()\nage_std = df_train.Age.std()\nage_nan_count = df_train[df_train.Age.isna()].Survived.count()\n\n# \u968f\u673a\u751f\u6210Age\ndf_train.fillna(value={'Age':np.random.randint(age_mean-age_std, age_mean+age_std)}, inplace=True)","b31c36b8":"# \u67e5\u770bEmbarked\u5206\u5e03\u60c5\u51b5\ndf_train.Embarked.value_counts()","018edac8":"# \u76f4\u63a5\u586b\u5145Embarked\u4e3a\u5176\u6700\u591a\u9879S\ndf_train.fillna(value={'Embarked':'S'}, inplace=True)","d4263192":"# \u91cd\u65b0\u67e5\u770bdf_train\uff0c\u786e\u8ba4\u586b\u8865Nan\u5b8c\u6210\ndf_train.info()","32bc2c00":"# \u6570\u636e\u8868\u793a\uff0cOne-hot\u7f16\u7801\uff0c\u91c7\u7528pandas\u7684get_dummies\u51fd\u6570\ndf_train = pd.get_dummies(df_train)","5b6f7767":"df_train.head()","4132167f":"# \u751f\u6210\u673a\u5668\u5b66\u4e60\u6240\u9700\u683c\u5f0f\u7684\u6837\u672c\u6570\u636e\u96c6\nX = np.array(df_train.drop(['Survived'], axis='columns'))\ny = np.array(df_train.Survived)","a1a07cd9":"X.shape","cc70f42e":"y.shape","fc35c0f2":"# \u62c6\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, train_size=0.8, shuffle=True, random_state=3)","10457758":"from sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\n\nclassifier_score = []\n\n# 1\u3001Knn\u7b97\u6cd5\npipe = make_pipeline(StandardScaler(), KNeighborsClassifier())\nparam_grids = {\n    'kneighborsclassifier__n_neighbors':range(1, 10)\n}\ngridcv = GridSearchCV(estimator=pipe, param_grid=param_grids, cv=5).fit(X_train, y_train)\nscore = gridcv.score(X_test, y_test)\nprint('Best param:', gridcv.best_params_)\nprint('KNeighborsClassifier Score:', score.mean())\nclassifier_score.append(('KNeighborsClassifier', score.mean()))","83a4032e":"# 2\u3001Logic\u56de\u5f52\u7b97\u6cd5\nfrom sklearn.linear_model import LogisticRegression\n\npipe = make_pipeline(StandardScaler(), LogisticRegression())\nparam_grids = {\n    'logisticregression__C':[0.1, 1, 5, 10, 20]\n}\ngridcv = GridSearchCV(estimator=pipe, param_grid=param_grids, cv=5).fit(X_train, y_train)\nscore = gridcv.score(X_test, y_test)\nprint('Best param:', gridcv.best_params_)\nprint('LogisticRegression Score:', score.mean())\nclassifier_score.append(('LogisticRegression', score.mean()))","13d53ee6":"# 3\u3001\u51b3\u7b56\u6811\u7b97\u6cd5\nfrom sklearn.tree import DecisionTreeClassifier\n\npipe = make_pipeline(DecisionTreeClassifier())\nparam_grids = {\n    'decisiontreeclassifier__max_depth':range(3, 20)\n}\ngridcv = GridSearchCV(estimator=pipe, param_grid=param_grids, cv=5).fit(X_train, y_train)\nscore = gridcv.score(X_test, y_test)\nprint('Best param:', gridcv.best_params_)\nprint('DecisionTreeClassifier Score:', score.mean())\nclassifier_score.append(('DecisionTreeClassifier', score.mean()))","c0e7d275":"# 4\u3001\u968f\u673a\u68ee\u6797\u7b97\u6cd5\nfrom sklearn.ensemble import RandomForestClassifier\n\npipe = make_pipeline(StandardScaler(), RandomForestClassifier())\nparam_grids = {\n    'randomforestclassifier__max_features':range(3, 15)\n}\ngridcv = GridSearchCV(estimator=pipe, param_grid=param_grids, cv=5).fit(X_train, y_train)\nscore = gridcv.score(X_test, y_test)\nprint('Best param:', gridcv.best_params_)\nprint('RandomForestClassifier Score:', score.mean())\nclassifier_score.append(('RandomForestClassifier', score.mean()))","2421b26e":"# 5\u3001\u652f\u6301\u5411\u91cf\u673asvm\u7b97\u6cd5\nfrom sklearn.svm import SVC\n\npipe = make_pipeline(StandardScaler(), SVC())\nparam_grids = {\n    'svc__C':[0.1, 0.5, 1, 5, 10, 15, 20],\n    'svc__gamma':[0.0001, 0.001, 0.01, 0.1, 1, 5, 10]\n}\ngridcv = GridSearchCV(estimator=pipe, param_grid=param_grids, cv=5).fit(X_train, y_train)\nscore = gridcv.score(X_test, y_test)\nprint('Best param:', gridcv.best_params_)\nprint('SVC Score:', score.mean())\nclassifier_score.append(('SVC', score.mean()))","282feaab":"# 6\u3001AdaBoost\u7b97\u6cd5\nfrom sklearn.ensemble import AdaBoostClassifier\n\npipe = make_pipeline(StandardScaler(), AdaBoostClassifier())\nparam_grids = {\n    'adaboostclassifier__learning_rate':[0.1, 0.5, 1, 1.5, 2],\n    'adaboostclassifier__n_estimators':[50, 100]\n}\ngridcv = GridSearchCV(estimator=pipe, param_grid=param_grids, cv=5).fit(X_train, y_train)\nscore = gridcv.score(X_test, y_test)\nprint('Best param:', gridcv.best_params_)\nprint('AdaBoostClassifier Score:', score.mean())\nclassifier_score.append(('AdaBoostClassifier', score.mean()))","1cc1ee0d":"# 6\u3001AdaBoost\u7b97\u6cd5\nfrom xgboost import XGBClassifier\n\npipe = make_pipeline(StandardScaler(), XGBClassifier(use_label_encoder=False, verbosity=1,))\nparam_grids = {\n    'xgbclassifier__max_depth':[3, 6, 9],\n    'xgbclassifier__learning_rate':[0.001, 0.01, 0.1, 1]\n}\ngridcv = GridSearchCV(estimator=pipe, param_grid=param_grids, cv=5).fit(X_train, y_train)\nscore = gridcv.score(X_test, y_test)\nprint('Best param:', gridcv.best_params_)\nprint('XGBClassifier Score:', score.mean())\nclassifier_score.append(('XGBClassifier', score.mean()))","fc751816":"classifier_score","629c506f":"classifier = [item[0] for item in classifier_score]\nscore = [item[1] for item in classifier_score]","560d8b09":"# \u901a\u8fc7\u53ef\u89c6\u5316\u5224\u65ad\u6700\u4f73\u6a21\u578b\nplt.rcParams['font.sans-serif'] = ['SimHei']\nplt.rcParams['font.size'] = 12\nsns.barplot(y=classifier, x=score)","45609df1":"# \u9009\u62e9svm\u6a21\u578b\u7ee7\u7eed\u4f18\u5316---\u7f29\u5c0f\u53c2\u6570\u8303\u56f4\n\npipe = make_pipeline(StandardScaler(), SVC())\nparam_grids = {\n    'svc__C':np.linspace(0.5, 2, 10),\n    'svc__gamma':np.linspace(0.01, 0.2, 20)\n}\ngridcv = GridSearchCV(estimator=pipe, param_grid=param_grids, cv=5).fit(X_train, y_train)\nscore = gridcv.score(X_test, y_test)\nprint('Best param:', gridcv.best_params_)\nprint('SVC Score:', score.mean())\n\n# Best param: {'svc__C': 1, 'svc__gamma': 0.1}\n# SVC Score: 0.8268156424581006","f5464661":"# \u9009\u62e9\u968f\u673a\u68ee\u6797\u8fdb\u884c\u7ee7\u7eed\u4f18\u5316\n\nparam_grids = {\n    'n_estimators':[1000],\n    'max_features':range(10, 15)\n}\ngridcv = GridSearchCV(estimator=RandomForestClassifier(n_jobs=-1), \n                      param_grid=param_grids, cv=5)\ngridcv.fit(X_train, y_train)\n\ntrain_score = gridcv.score(X_train, y_train)\ntest_score = gridcv.score(X_test, y_test)\n\nprint('Best param:', gridcv.best_params_)\nprint('Train Score:{}  Test Score:{}'.format(train_score, test_score))","c1db4637":"# \u6a21\u578b\u4fdd\u5b58\n# model.save('D:\/desktop\/model.model')\n\n# \u6a21\u578b\u5e94\u7528\n# model.predit()","dce0a14d":"## \u5206\u6790\u6570\u636e","a1d95a1b":"# \u6a21\u578b\u5206\u6790","cc7e1012":"# \u6a21\u578b\u9009\u62e9","8a0f2dba":"## \u67e5\u770b\u6570\u636e","030abfaa":"\u5728\u9009\u62e9\u6a21\u578b\u4e2d\uff0c\u7406\u8bba\u4e0a\u5e94\u8be5\u5206\u6790\u6570\u636e\u60c5\u51b5\u9009\u62e9\u6700\u4f18\u6a21\u578b\uff0c\u4f46\u5b9e\u9645\u5de5\u4f5c\u4e2d\u8d77\u59cb\u76f4\u63a5\u5224\u65ad\u662f\u4e0d\u73b0\u5b9e\u7684\uff0c\u6700\u4f73\u7684\u65b9\u6cd5\u662f\u9009\u62e9\u51e0\u79cd\u6a21\u578b\u8fdb\u884c\u521d\u6b65\u5206\u6790\uff0c\u5927\u81f4\u4e86\u89e3\u4e00\u4e0b\u54ea\u4e2a\u6a21\u578b\u53ef\u80fd\u6700\u4f73\uff0c\u7136\u540e\u518d\u7cbe\u786e\u8c03\u53c2\u83b7\u53d6\u6700\u4f73\u5f97\u5206\uff0c\u5728\u6d45\u5c42\u673a\u5668\u5b66\u4e60\u4e2d\uff0censemble\u6a21\u578b\u5f80\u5f80\u6548\u679c\u66f4\u4f73\uff0c\u4f8b\u5982\u968f\u673a\u68ee\u6797\u3001\u68af\u5ea6\u63d0\u5347\u3001xgboost\u7b49\uff0c\u540c\u65f6\u4e5f\u53ef\u4f7f\u4f7f\u7528\u7ebf\u6027\u6a21\u578b\u8fdb\u884c\u9a8c\u8bc1\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c\u6570\u636e\u96c6\u8f83\u7b80\u5355\uff0cknn\u3001\u903b\u8f91\u56de\u5f52\u7b49\u7b80\u5355\u6a21\u578b\u6216\u8bb8\u4e5f\u4f1a\u5f97\u5230\u8f83\u597d\u7684\u6548\u679c\u3002","2c4a59e8":"# \u7279\u5f81\u5de5\u7a0b","4a129dc2":"\u901a\u8fc7\u5bf9\u53c2\u6570\u7684\u7cbe\u786e\u8c03\u6574\uff0c\u6211\u4eec\u6709\u7406\u7531\u76f8\u4fe1svm\u6709\u66f4\u597d\u7684\u6cdb\u5316\u6548\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9svm\u6a21\u578b\u8fdb\u884cpredict","f694a0f6":"## \u6570\u636e\u8f6c\u6362\u548c\u7f16\u7801","b3bd3949":"## \u5bfc\u5165\u6570\u636e","704973a1":"## Logic\u56de\u5f52\u7b97\u6cd5","cadb8585":"# \u4e1a\u52a1\u573a\u666f","4ca788b1":"## \u586b\u8865\u7a7a\u503c","5808f8c6":"## \u51b3\u7b56\u6811\u7b97\u6cd5","ac18dd4c":"## K-\u8fd1\u90bb\u6a21\u578b","f27cb46d":"## \u6570\u636e\u62c6\u5206","4c158b6f":"\u7279\u5f81\u8bf4\u660e\uff1a  \n1\u3001PassengerId\uff1a\u6e38\u5ba2\u7f16\u7801\uff0c\u552f\u4e00\u6807\u8bc6\uff0c\u5bf9\u4e8e\u6a21\u578b\u6ca1\u6709\u5b9e\u8d28\u4f5c\u7528\u7279\u5f81  \n2\u3001Survived\uff1a\u662f\u5426\u5e78\u5b58 0-No 1-Yes \u5373\u6a21\u578b\u8bad\u7ec3\u4e2d\u7684\u6807\u7b7e  \n3\u3001Pclass\uff1a\u8239\u7968\u7b49\u7ea7  \n4\u3001Name\uff1a\u6e38\u5ba2\u59d3\u540d\uff0c\u6e38\u5ba2\u59d3\u540d\u672c\u65e0\u5b9e\u8d28\u610f\u4e49\uff0c\u4f46\u5176\u5305\u542bMr\uff0cMrs\u7b49\u4fe1\u606f\uff0c\u53ef\u4ee5\u901a\u8fc7\u5904\u7406\u83b7\u53d6\u65b0\u7684\u7279\u5f81  \n5\u3001Sex\uff1a\u6027\u522b  \n6\u3001Age\uff1a\u5e74\u9f84 \u8fde\u7eed\u503c  \n7\u3001SibSp\uff1a\u6cf0\u5766\u5c3c\u514b\u53f7\u4e0a\u7684\u5144\u5f1f\u59d0\u59b9\/\u914d\u5076\u6570\u91cf  \n8\u3001parch\uff1a\u6cf0\u5766\u5c3c\u514b\u53f7\u4e0a\u7684\u7236\u6bcd\/\u5b69\u5b50\u6570\u91cf  \n9\u3001Ticket\uff1a\u7968\u53f7  \n10\u3001Fare\uff1a\u8239\u7968\u4ef7\u683c  \n11\u3001Cabin\uff1a\u5ba2\u8231\u53f7  \n12\u3001Embarked\uff1a\u51fa\u53d1\u6e2f  ","1163efc3":"## \u652f\u6301\u5411\u91cf\u673asvm\u7b97\u6cd5","b6b93a00":"\u672c\u573a\u666f\u4e2d\u7279\u5f81\u8f83\u5c11\uff0c\u4e14\u901a\u8fc7\u524d\u9762\u7684\u6570\u636e\u5904\u7406\u5df2\u7ecf\u5168\u90e8\u8f6c\u6362\u6210\u6570\u503c\uff0c\u6545\u65e0\u9700\u5355\u72ec\u505a\u7279\u5f81\u5de5\u7a0b\uff0c\u63a5\u4e0b\u6765\u53ef\u4ee5\u76f4\u63a5\u5efa\u6a21","a0e199c5":"# \u6a21\u578b\u5e94\u7528","3a729363":"# \u6a21\u578b\u8c03\u53c2","ae10e76a":"\u53ef\u4ee5\u770b\u51fa\uff0c\u9488\u5bf9\u6cf0\u5766\u5c3c\u514b\u8fd9\u4efd\u6570\u636e\u96c6\uff0csvm\u3001\u968f\u673a\u68ee\u6797\u548c\u903b\u8f91\u56de\u5f52\u6548\u679c\u8868\u73b0\u76f8\u5bf9\u8f83\u597d","6aa86547":"## xgboost\u7b97\u6cd5","0aef1596":"# \u6570\u636e\u5904\u7406","31059706":"## \u65b0\u589e\u7279\u5f81","a22049b4":"\u673a\u5668\u5b66\u4e60\u5904\u7406\u95ee\u9898\u7684\u5e38\u89c4\u6b65\u9aa4\uff1a\n\n\u2460 \u4e1a\u52a1\u573a\u666f\uff1a\u4e86\u89e3\u4e1a\u52a1\u573a\u666f\u548c\u76ee\u6807\n\n\u2461 \u6570\u636e\u51c6\u5907\uff1a\u83b7\u53d6\u6570\u636e+\u8ba4\u8bc6\u6570\u636e\n\n\u2462 \u6570\u636e\u5904\u7406\uff1a\u6570\u636e\u6e05\u6d17\u3001\u566a\u58f0\u6570\u636e\u5904\u7406\u3001\u6570\u636e\u6807\u51c6\u5316\u3001\u6570\u636e\u8868\u793a\u7b49\n\n\u2463 \u7279\u5f81\u5de5\u7a0b\uff1a\u7279\u5f81\u63d0\u53d6\u548c\u7279\u5f81\u9009\u62e9\n\n\u2464 \u6a21\u578b\u9009\u62e9\uff1a\u6839\u636e\u5177\u4f53\u4e1a\u52a1\u573a\u666f\u548c\u6570\u636e\u91cf\u7ea7\u9009\u62e9\u5177\u4f53\u6a21\u578b\n\n\u2465 \u6a21\u578b\u8c03\u53c2\uff1a\u4ea4\u53c9\u9a8c\u8bc1\u3001\u7f51\u683c\u641c\u7d22\u7b49\u83b7\u53d6\u6700\u4f73\u6a21\u578b\u53c2\u6570\n\n\u2466 \u6a21\u578b\u5206\u6790\uff1a\u4e0d\u540c\u7684\u8bc4\u5224\u6807\u51c6loss function\u5bf9\u7ed3\u679c\u7684\u5f71\u54cd\uff0c\u6a21\u578b\u8bc4\u4f30\u7b49\n\n\u2467 \u6a21\u578b\u5e94\u7528\uff1a\u6a21\u578b\u4fdd\u5b58\u3001\u6a21\u578b\u9884\u6d4b","43a91eb8":"## AdaBoost\u7b97\u6cd5","456ea652":"\u6570\u636e\u5904\u7406\u5206\u6790\uff1a  \n1\u3001PassengerId\u4e3a\u65c5\u5ba2\u7f16\u7801\uff0c\u6ca1\u6709\u4efb\u4f55\u53c2\u8003\u4ef7\u503c\uff0c\u53ef\u4ee5\u76f4\u63a5\u5220\u6389  \n2\u3001Cabin\u7279\u5f81\u7edd\u5927\u90e8\u5206\u4e3a\u7a7a\uff0c\u65e0\u6cd5\u5904\u7406\uff0c\u4e14\u4e0d\u4e3a\u7a7a\u7684\u90e8\u5206\u4e5f\u6ca1\u6709\u5b9e\u8d28\u89c4\u5f8b\uff0c\u6ca1\u6709\u53c2\u8003\u4ef7\u503c\uff0c\u53ef\u4ee5\u76f4\u63a5\u5220\u9664  \n3\u3001Ticket\u4e3a\u8239\u7968\u7f16\u53f7\uff0c\u672c\u8d28\u4e0a\u662f\u5426\u751f\u8fd8\u4e0e\u5176\u6ca1\u6709\u76f4\u63a5\u5173\u7cfb\uff0c\u76f4\u63a5\u5220\u9664  \n4\u3001Name\u4e3a\u65c5\u6e38\u540d\u5b57\uff0c\u672c\u8d28\u4e0a\u662f\u5426\u751f\u8fd8\u4e0e\u5176\u6ca1\u6709\u76f4\u63a5\u5173\u7cfb\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u4ece\u540d\u5b57\u4e2d\u83b7\u53d6\u66f4\u4e3a\u660e\u7ec6\u7684\u4fe1\u606f\uff0c\u4f8b\u5982Mis\uff0cMaster\u7b49  ","aceaddd9":"## \u5220\u9664\u65e0\u7528\u5c5e\u6027","26abe0e4":"# \u6570\u636e\u51c6\u5907","d927cf29":"Titanic - Machine Learning from Disaster  \nStart here! Predict survival on the Titanic and get familiar with ML basics\n\n\u672c\u6b21\u673a\u5668\u5b66\u4e60\u6211\u4eec\u5e0c\u671b\u901a\u8fc7\u5bf9\u6cf0\u5766\u5c3c\u514b\u53f7\u707e\u96be\u4e2d\u4e58\u5ba2\u7684\u76f8\u5173\u5c5e\u6027\u63cf\u8ff0\uff0c\u9884\u6d4b\u5176\u662f\u5426\u5728\u6b64\u6b21\u707e\u96be\u4e2d\u5e78\u5b58\uff0c\u6570\u636e\u5305\u542b\u4e86test.csv\u548ctrain.csv\uff0c\u5176\u5206\u522b\u7528\u4e8e\u505a\u6d4b\u8bd5\u548c\u6a21\u578b\u8bad\u7ec3\uff0c\u800c\u6211\u4eec\u7684\u76ee\u6807\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5c3d\u53ef\u80fd\u8ba9\u6a21\u578b\u5728\u6d4b\u8bd5\u6570\u636e\u4e0a\u7684\u8bc4\u5206\u66f4\u9ad8\uff0c\u5373\u5c3d\u91cf\u63d0\u5347\u6a21\u578b\u7684\u51c6\u786e\u6027\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7ecf\u5178\u7684\u4e8c\u5206\u7c7b\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u6e05\u6d17\uff0c\u53bb\u6389\u4e00\u4e9b\u566a\u58f0\u6570\u636e\uff0c\u7136\u540e\u9009\u62e9\u9002\u5f53\u7684\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u548c\u8bc4\u4f30\uff0c\u5f00\u59cb~","d3be88b6":"## \u968f\u673a\u68ee\u6797\u7b97\u6cd5"}}