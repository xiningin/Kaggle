{"cell_type":{"c47480bf":"code","c098f428":"code","3a5548c0":"code","3df635a8":"code","0adbd101":"code","ea8ab804":"code","ad694aac":"code","f744120c":"code","ac8786c7":"code","2cefb635":"code","f8a20c53":"code","b72acda7":"code","067fd1d1":"code","aa87920c":"code","7c53c875":"code","35efe9c4":"code","02009677":"code","e171044f":"code","1d262f1e":"code","34dd6c83":"code","10ddcd28":"code","e0217f10":"code","7580a96c":"code","1cc68934":"code","be1d0cc5":"code","96abb439":"code","6e3e557c":"markdown","b982fcd9":"markdown","dea73e14":"markdown","8d29a513":"markdown","4991c157":"markdown","61e57762":"markdown","368d26a2":"markdown","b1eb45ca":"markdown","0610aae6":"markdown","493604bd":"markdown","d7a650a2":"markdown","7914e46e":"markdown","fa9151c3":"markdown","6ce2ecfd":"markdown","4176be8f":"markdown","016b6180":"markdown","693e8f12":"markdown","a4aed0cc":"markdown","1dfb7dec":"markdown"},"source":{"c47480bf":"import numpy as np # Linear algebra\nimport pandas as pd # For manipulating data\nimport matplotlib.pyplot as plt # For plotting\nimport seaborn as sns # For plotting\nimport os # For accessing system files","c098f428":"# Listing all the files\nroot_dir = '..\/input\/sales-analysis-2019\/'\nfiles = [file for file in os.listdir(root_dir)]\n\n# Creating an empty DataFrame for storing all the data\nall_months_data = pd.DataFrame() \n\n# Merging all the CSV files\nfor file in files:\n    df = pd.read_csv(root_dir + file)\n    all_months_data = pd.concat([all_months_data, df])\n    \n# Saving the file to do further analysis\nall_months_data.to_csv('all_data.csv', index = False)","3a5548c0":"all_data = pd.read_csv('all_data.csv')\nall_data.head()","3df635a8":"# Total NaN in columns\nall_data.isnull().sum()","0adbd101":"# Dropping the NaN\nall_data.dropna(inplace=True)","ea8ab804":"# Add month column\nall_data['Month'] = all_data['Order Date'].str[0:2]\ntry:\n    all_data['Month'] = all_data['Month'].astype(np.int32)\nexcept Exception as e:\n    print(e)","ad694aac":"# Finding the Or in Month column\ntemp_df = all_data[all_data['Order Date'].str[0:2] == 'Or']\ntemp_df.head()","f744120c":"# Removing Or data\nall_data = all_data[all_data['Order Date'].str[0:2] != 'Or']","ac8786c7":"# Againg adding the month column\n\nall_data['Month'] = all_data['Order Date'].str[0:2]\nall_data['Month'] = all_data['Month'].astype(np.int32)","2cefb635":"# Converting price column to numeric column\nall_data['Price Each'] = all_data['Price Each'].astype(np.float64)\n\n# Converting Quantity column to numeric column\nall_data['Quantity Ordered'] = all_data['Quantity Ordered'].astype(np.int64)\n\n# Adding sales Columns\nall_data['Sales'] = all_data['Quantity Ordered'] * all_data['Price Each']","f8a20c53":"# Checking the data type of every column\nall_data.info()","b72acda7":"# Freuency of the months in sales\nresults = all_data.groupby('Month').sum()\nresults","067fd1d1":"# plotting the sales result\n\nmonths = range(1,13)\nplt.bar(months, results['Sales'])\nplt.title('Sales per Month')\nplt.xticks(months)\nplt.ylabel('Sales in USD')\nplt.xlabel('Months')\nplt.show();","aa87920c":"results['Month'] = results.index\n\nsns.lineplot(x='Month', y='Sales', data=results, color='red', markers='--')\n\nplt.xticks(months)\nplt.title('Sales per Month')\nplt.xlabel('Months for Sales')\nplt.ylabel('Sales in USD($)')\nplt.show()","7c53c875":"# Adding Cities column\n\nall_data['City'] = all_data['Purchase Address']\nall_data['State'] = all_data['Purchase Address']\ndef adding_city_and_state(a):\n    return f\"{a.split(',')[1][1:]} ({a.split(',')[2][1:3]})\"\n \nall_data['City'] = all_data['City'].apply(adding_city_and_state)\nall_data['City'].head()","35efe9c4":"# Grouping via City\nresults = all_data.groupby('City').sum()\nresults[results['Sales'] == results['Sales'].max()]","02009677":"# plotting the resulted sales\n\ncities = [city for city, _ in all_data.groupby('City')]\n\nplt.bar(cities, results['Sales'])\nplt.xticks(cities, rotation='vertical')\nplt.ylabel('Sales in USD')\nplt.xlabel('City Name')\nplt.show();","e171044f":"results['City'] = results.index\n\nsns.lineplot(x='City', y='Sales', data=results, color='red')\n\nplt.xticks(cities, rotation='vertical')\nplt.title('Sales per City')\nplt.xlabel('City for Sales')\nplt.ylabel('Sales in USD($)')\nplt.show()","1d262f1e":"# Converting Order Date to date time field using pandas to_datetime\n\nall_data['Order Date'] = pd.to_datetime(all_data['Order Date'])\nall_data.head()","34dd6c83":"# Adding Hours column in our dataset\nall_data['Hour'] = all_data['Order Date'].dt.hour\n\n# Adding Minute column in our dataset\nall_data['Minute'] = all_data['Order Date'].dt.minute\n\nall_data.head()","10ddcd28":"hours = [hour for hour, _ in all_data.groupby('Hour')]\n\nplt.plot(hours, all_data.groupby(['Hour']).count())\nplt.xticks(hours)\nplt.xlabel(\"Hours ----->\")\nplt.ylabel(\"Number of Orders ----->\")\nplt.grid()\nplt.show();","e0217f10":"# Capturing all the duplicate Order ID to find out which are boughts in pairs\n\ntemp = all_data[all_data['Order ID'].duplicated(keep=False)]\ntemp.head(10)","7580a96c":"# adding Grouped column which will tell us what products are sold with the same Order Id\n\ntemp['Grouped'] = temp.groupby('Order ID')['Product'].transform(lambda x: ','.join(x))\ntemp.head()","1cc68934":"# Removing the duplicates from the dataset\n\ntemp = temp[['Order ID', 'Grouped']].drop_duplicates()\ntemp.head()","be1d0cc5":"# Counting the frequency of occurence of two products together\n\nfrom itertools import combinations\nfrom collections import Counter\n\ncount = Counter()\n\nfor row in temp['Grouped']:\n    row_list = list(row.split(','))\n    count.update(Counter(combinations(row_list, 2)))\nitems = []\nitems_count = []\nfor key, value in count.most_common(10):\n    items.append(str(key))\n    items_count.append(int(value))\n    print(f\"{str(key)[1:-1]} : {str(value)}\")\n\nitem_len = range(1, len(items)+1)\nplt.bar(item_len, items_count)\nplt.xticks(item_len, rotation='vertical')\nplt.show()\n    ","96abb439":"# Uploading my notebook to my jovian.ml account\n!pip install jovian\nimport jovian\njovian.commit(project='eda_on_sales_analysis_2019')","6e3e557c":"### Augmenting data with extra columns","b982fcd9":"# Q1: What was the best month for sales? and how much was earned that month?","dea73e14":"We got the result... but its better to visulize our data to get good insight.","8d29a513":"# **Sales Data Analysis**\nSales analysis is mining your data to evaluate the performance of your sales team against its goals. It provides insights about the top performing and underperforming products\/services, the problems in selling and market opportunities, sales forecasting, and sales activities that generate revenue.\n\nRegular sales data analysis provides an understanding of the products that your customers are buying and helps you dissect why they are behaving in a certain way. You can also find patterns in your lead conversions and drop offs. All of these aspects enable you to optimize your sales process.\n\n\n![Image](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxITEhUSEhIVFRUWGBkXFxcYFRoYGBgYFxcXFxcVFxUbHyggGxolHRcYITEhJSkrLi4uFyAzODMtNyotLisBCgoKDg0OGhAQGi0lICYtLSstLS0rLi0tLy0tLy8tLS0vLS0tLS0tKy0tLS0tLS0tLS0tLS0tLSstLS0tLS0tLf\/AABEIALsBDgMBEQACEQEDEQH\/xAAcAAABBAMBAAAAAAAAAAAAAAAABAUGBwECAwj\/xABREAABAwEDBAcVBgQGAgMBAAABAAIDEQQSIQUGMVEHE0FhcaGzFBciMjRSU1RVYnJzdIGRkpOUsdHTFRYzNbLBI0LS8CQ2Q4LD4aLCY4PjRf\/EABsBAQADAQEBAQAAAAAAAAAAAAABAgMEBQYH\/8QAPREAAgECAwUDCQYGAgMAAAAAAAECAxEEEjEFEyFBUWFxkRQyM1KBobHR4QYVNFPB8BYiI0KSooLxQ2Jy\/9oADAMBAAIRAxEAPwCB5RynNPI6SWRznONcSaDvWjcA3AFcgSbd33GgDbu+40Abd33GgDbu+40Abd33GgDbu+40Abd33GgDbu+40Abd33GgDbu+40Btth1n0oDXbu+40Abd33GgDbu+40Abd33GgOtnt0kZvRzPY6lLzJHMNN0VaQaIDkJe+40Abd33GgDbu+40Abd33GgMiXvuNABlPXH0oDG3d9xoA27vuNAG3d9xoA27vuNAG3d9xoA27vuNAG3d9xoA27vuNAG3d9xoDIlPXH0oCy9hXKkptEtnc9zotqMga4khrmvY2rdVQ7EDUFDCKzUkF9WBzIMjQWhsMLnts0J6OMEEkMBLqUJ061SKzTsyrH3JrrPI2OsMYe5jXECIUqWgmmGhVlFoDj9mwdhj9m35KtyA+zYOwx+zb8kuA+zYOwx+zb8kuA+zYOwx+zb8kuA+zYOwx+zb8kuA+zYOwx+zb8kuA+zYOwx+zb8kuAdk2Cn4Mfs2\/JLg805pNBtlkBFQZ4QQcQQZG1BC2ehdnovKVkiY0FsUQNafht1HeWUeLIQjhMYregid\/saP2XkbX2o8DktG+a\/O2luztOmjh97fjY5vylZAXAwwgtoHVa0UvCoFbupeYvtDWaTVHW9v5umvI18jj63uMtyhZCARFAQcAQG4mlaaNRHpUP7RVk7Oj7\/oPI4+t7jUZTsnYoNFdDNdNSn+IK\/5Hv8AoPI4+sd454HCrbPEQd0Nb8lnL7TTi7Ol7\/oSsCn\/AHe42vw9rReq3+lV\/iiX5X+30J8hXre4WWOywvBO0RDGnSN+S93Ze0HjaTqONrO2t+Sf6nJXpbqVr3O\/2bB2GP2bfkvSuYEQ2WbFE3Jkzmxsab0WIYAcZmboCtDUlEH2FIGPtkwe1rhtBNHAEV2yPHFWnoWZc\/2bB2GP2bfks7lBqyKI5ZLS10ENIptrbSNvS3Gux1mpKtJWSLPgOv2bB2GP2bfkq3Kh9mwdhj9m35JcB9mwdhj9m35JcB9mwdhj9m35JcB9mwdhj9m35JcETy06SF21sFlkkNXCMWUdCwYl73X6NAG7ulefXr1absmm+lvqfQ4LCYSvHPOEox0zOS4voll4v4EgyLZ4pbPFK6GK8+NrjSNoFXNBNBRdlKblBSZ5GMpKjiJ046JteBV+zjZ2MmstxjW1ZJW60CvRM00XRA50I9hPq+Tyd\/KwqzLIr9SQXvL\/AJfi8lg\/41Wn6RFGSLIT3bXCNtYRtbOhwvdIMFWer4AeVmBJbspwxYSPAJ3MSfQFDaRlUr06fnM3sVujlFY3BwGnWOEHEImmTTqwqK8XcUqTQEAICM5ezhdG8xRAVb0ziK40rQBUlK2h52JxkoSyQMZDzhfI8RygdFW64CmNNBCRlfUYbGSnLJPmUNmf1bY\/Hw8o1dUtD1GekMsdIPC\/YrKGpEdRBZLKX1oQKa1422tmVMa4ZJJWvr22+R1UK6pXujn912Xr9BeqSTU1Jd12vero3F5X3HjMuXeRt7eXs8epr5XT1szV+ajCQd0UoQ52FA1oI1GjR6FZbFxiTW8j4drfTtHldPozIzWbhjopumlWi6DQbt0U4FD2Ji\/Xj4Pnx6dePePK6fRiqHIpaKNIpVzt3S5xceMlYS+zmIk7uceS58lboWWNguTN\/st3XDjVf4Zr+vH3\/Iny6HRi6w2csaQSDjXDgX0GycBPB0nCbTu78O5HHiKqqSuhSvUOchmy\/wDlc3hQ8tGrw1JRBNg3q2byc8pGrT0JZdpWRUjWZsjnPtjnsuONoxbUOuna2YXhgVpPkWlyJMsyoIAQCe2W2OJt6V7WDW4gKs5xgrydjWjQqVpZacW32DNasuSSi7ZI3dFgJpG3I2981rqOeaaAAuWeJbX9Ne16Hp0tnU6Ur4mS4cckXeT7G1wj7WZsGTGRtc2pc5\/4kjunkJFCXHz4AYBcijqa1sTKpJPRLzUtF3fviPFhsrYo2RMrdY0NbU1NAKCpXqwioxSR49erKrUlUlq22\/aVJs7\/AI1l8XL+pi3gUQ37CfV8nk7+VhVmWRX6kgveX\/L8XksH\/Gq0\/SIoyVZDszNohddF7amY0x6QKk27sDiVQFb5TmvzSOvB1XuoQaigNBQ8CynFp2Z4OJjKNWSlr+7C3NaYNtDQXBt4EYml7DAcNaKacW3wNsBGTq3jolxJ2tD2DKAR5TyjHAwySGg3BuuOoDdKtCDk7ItGLk7Iik2SbTaL1o2trL5qGXqOu0ABNcKlVrU0pfyu552NwTc81N3694tyFm\/Ix4lloLtSGg1NaaTTCizjHmymGwcoyzz5FE5n9W2Px8PKNXW9D1WekMsdIPC\/YrKGpEdSN5Qtckd248trWtDppReHt3EVaTp7uTV76ew9nZlCnUUs8U9P1GJ+cVsGJe+l5w8wkDQa1O4SdAXkrF1nwVV6dey\/Rc+87vJqS\/8AGvDtNW502moNX3aEkgkjANcKGlTpI0aQVZ169vSu\/f7Pr3EKhR\/LVu43izltTqGrgLwBq47rntqKDR0INe+CrLE143W9en6J\/r7iVh6L\/wDGhw+1p+yv9K5vvDE\/mPxN\/IsP6iH7NW1ySGS+8uoG0qdFby9vY2Iq1XPeSbtbX2nkbVoU6ahkilr+hIl7x4wICGbL\/wCVzeFDy0avDUlEE2DerZvJzykatPQll2krIqRnM20NkfbXsJLXWioqC002tm4QCPOtJq1i0uRJ1mVOcc7XFwa4EtNHAGpaSK0I3MCoUk20mXlTlFJyVk9O0TZXyi2zxOldjSga0aXOODWNGslUq1FTjmZthMLLE1VTj7X0S1b7hqzfyc1xdLO0PtN6ryWkiO8A5scZIpRoIFW7tVzYaEZ3nLjI9DaGJnBRpUXlpW4WetuDbtxu31F2WKXoa3a7ZhejLzW47pHDpD3xw3N1a4nzTlwN7VLX83k0ua1XNdi7zK4jUcmr1FoeY9Sndnf8ay+Ll\/UxbQJQ37CfV8nk7+VhVmWRX6kgveX\/AC\/F5LB\/xqtP0iKMeIMusighYGl7hFHXGgHQNwrrXi7Q2tTw9RwSzPwsejhdnTrRzt2QnmtkltcIGkQxkVkoavcBpa3DR\/e8d9m7Vo17q1p8ly8S1fBPDLPqPrMjwBjY9qbdboqMd8101K7pvM7s8qrCNV3mrnO3ZDgkj2u4GgYtLQAWnWCrU5uDui9K1LzFYbbHlWWzkw2oF10VZK3G+3QKjX\/e+efG43DYdKUnxfLn\/wBHZTwksRxpe0Uz5zwtYXC8XaAymLidA1LLBY2ji5ZIPj0f74irgK1LztOpyyZkl8jxabXi\/wD04\/5YxuYdd\/enR6M6iissPEwlNJZYEhWBiYdoQHmDM\/q2x+Ph5Rq3ehdnovOCYMjBIr0VOIrOGpEdRns8tlkrzQ9rKdLekDK66Y47i4sfh8PVy756XtxsehhJYpX8ni31srnXasmdni9uPmvP+79n9f8AY695tP8ALf8Ah9AEWTOzxe3HzT7v2f1\/2G82n+W\/8PoG1ZN7PF7cfNPu\/Z\/X\/Ybzaf5cv8PoG1ZM7PF7cfNPu\/Z\/X\/YnebT\/AC5f4fQVWC2WCGu12iIXqVrM06K7++urDU8Jh7unJce05sRRx9e2enLh\/wCr+Q72S2Ryi9G9rwDQlrg4V1VG7iu6E4zV4u559WjUpO1SLT7VY7qxkQzZf\/K5vCh5aNXhqSiCbBvVs3k55SNWnoSy7VkVI9ms6s1uINf8T\/xsWk9EWlyHjKltbDE+V2hjSaazuAb5NB51hVqKnByfI1w1CVetGlHm7EYs9lksgjtbiSZOqx4x1WyAd4TTgXDGEqNqr5+d7fke5UrU8a54WP8Ab6P\/AIqzX\/K1+872d\/NU3NB\/BiJbAOudodPT0hvnKpUqb2ebktPmVcPI6O4Xny4z7Fyj+r8B7yaDekrepVtKuBb0orcaMWiumuk1K68Lozy8Xa0LW0fJ315vn7OXAxlUGsVL9L+N14aKXHdODi5u8Ma0O4rYjzBg2v57205pt6rTo+18uBouE3HJq9RaHmPUp3Z3\/Gsvi5f1MW0CUN+wn1fJ5O\/lYVZlkV+pIL3l\/wAvxeSwf8arT9KijOb8nSNjjddJa6NhBArpYMDqXxe1sFVhiJzSbTbdz6XAYqnOlGN7NcLDnm3k+TbBIWlrW10ilSQRQelabIwVXfKrJWS68+BntLE0906ad2\/cSxfVHzxlAQ3OeFwmLj0rgLp3MBQj+9a+Q2zSnHEOctHa3yPpdmVIugorVaifIUDnTMu\/ykEnUBpr8Fz7MpTniYOHJ3fd9dDbHVIwoSzc1Zd5Ol9ufKAgMO0IDzBmf1bY\/Hw8o1bvQuz0LnX+E3wx8Cs4akR1K5zlH4f+7\/1Xk7X1h7f0Prvs0+FX\/j+pHDDJjSu6RXHHGg4F5ilDhdfv5nuuNTjlfW3H98O6xi5LX06NA0acNGlT\/TsR\/XzcX8Oz6g2GWteCuHw1DTvo5U7aBRrZr5u\/99PebQRSVq7+9H\/arNwtaJekql7zf74fU73TqPoWR0XRZexiP8NJ40\/oYvb2Z6N9\/wCiPivtL+Jh\/wDP6smK9E+dIZsv\/lc3hQ8tGrw1JRBNg3q2byc8pGrT0JZdpCyKkTzclgspt1SyKJlooBg1o\/hswaP2CmtUUYqUmdFKhUrzUKcW2d3Svtj4wYzHZ2vD+jwfMW4tFz+VlaHosTTQvNlWVapGD4K\/jb4I9RU4YCnNqWao1bhpG+vHm+XDQkFraCx4IBBaa1FRSm6N0by7avo5dz14rwPHotqpFrW604MboGgNaAAAAAABQAUwoNwby8yHmo9Obbk29b8zpkoC\/NS5W82t1ha7pG0vuODzqI0CgXbhbWZz42+Wne+j1d1q9Fy7b8+JjLN29BW5XbMLzC41uP6RwwY7fOFKq2J80nA3tUtfzeTSWq1XNdiMriNByavUWh5j1Kd2d\/xrL4uX9TFtAlDfsJ9XyeTv5WFWZZFfqSC95f8AL8XksH\/Gq0\/SooyXZE6ng8VH+gLOfnMC1VAIAQGHsBFCARqIqolFSVpK5MZOLumYjja0UaABqAoohCMFaKt3EynKTvJ3NlYqCAw7QgPMOZ\/Vtj8fDyjVu9C7PQudf4TfDHwKzhqRHUipztjsOD4nP2zRdIFLuuvhLLEVlTtdHr7O2TPHZnCSWW2vbf5HPnuWbteT1m8H7LHyheqztX2cnx\/rLh1TXZz7gOy5Zu13+s1PKF6rJf2cknZ149TZuy1Zzos8h4HNVXiYrWLLQ+zNSfGNaL7uJnnsQdrSes1R5XDoX\/hWt+YvBkhzRztjt5kDInM2sNJvEGt69op4K1pVY1L2R5W09k1MAouUk819OwklFseQZQEM2X\/yubwoeWjV4akogmwb1bN5OeUjVp6Esu0hZFSDZuZLjFotbn1lfHPda+Q3nD+Gw3tV7HTSuC5cak5RfZ+p6eGr1I0nTi7J625\/TsJZZumGnd\/srmp33sbX53ta2nO\/F+zmZ17ZGKpulNK6DooDo3CcKr0Kl8jt05a+y5xw85X6jczQK10DTp85GFV5kdFc9J6s7ZNrekrfpUUvFpb0orcAxArpvbtdxduG0Zz4u1oWtezvZO+vPk+y3IxlUOrFS\/S\/jdc0Cl13Tg4ubXcbjWitiPMGDy\/z3tpwunfVaW0ffwsaLhNxyavUWh5j1Kd2d\/xrL4uX9TFtAlDfsJ9XyeTv5WFWZZFfqSC848jSWnJFkEUrg4WaL+EHBrJDdYaPrqpgopzUZcUVY4WXNOUMaDlG0tIaAWtf0IIAwbvBHVV\/NRFjr91ZO6Vq9dRvV6qFg+6sndK1eum9XqoWD7qyd0rV66b1eqhYPurJ3StXrpvV6qFg+6sndK1eum9XqoWD7qyd0rV66b1eqhYPurJ3StXrpvV6qFjvYc3XxyNkNvtEgaaljn1a7eI1KHUTVsqBQeaHVtj8fDyjVaWhdnonOGB0kYDBeIdWlRoodZWUXZkLUgWc2Z1rtG17W1ou3q3ngabtKehc+KpurbL2n0ewtp4fBqpvW+NrWV9LjAdjC29bFr\/FG6sFRrJ34Hrz21s2Ss783p1\/7MDYwt2qLTX8Uawf2COjVfQiO29nrnLW+nan7rKxu3Yztw3IvahVlhqj1saw2\/s+Gjfh0Nudtb9UXtQq+SVOw0\/iTA9X4E02Ns2p7G6cz3BfDLt14d0pdWvpC6MPSlTvc+f29tOhjI01Sb4XvdW1sTm+NYXSfNhfGsICG7Lzh9lzY\/zQ8sxXhqSiC7Bx\/wAbN5OeUjVp6EsusvGsLIqQzJ2TMotktDr1lbtkt+rg8h3QNF5l11Q3ClDjUFKtOnUte\/A3jVyrgK3Mym17KcxuBrVwa8BmGkgvqa6MFnHDUFJTs7rS9vkJVnJWO9p+0rjsbG\/oT0N2TosOlxdTHRitpRpyWWS4Mzi0ndHCCzZRut6KxswHQ3JOhw6XB9MNGCwWForgr+75GzxMm7sxYosotfLQWNlS2r7r\/wCJ0IFcH1w6XHUtYU6cFwuVqVpVElJuy0XQLfDlFzoqixvo+oddf\/D6F3R4vrvYY4qZwpzVncUqzp3ytq6s+068y5R7JYvUl\/rWPk9Lt93yLeUMkNmc642+Wl9Beu4NrTGgONFr3HOyodnY\/wAay+BL+pi1gShBsJ9XyeTv5WFWZZFfqSCx8ibE7rRZ4bQLY1u2xsku7QTdvtDqV2wVpXTRUc7EXFvOWf2833c\/VUbwXDnLP7eb7ufqpvBcOcs\/t5vu5+qm8Fw5yz+3m+7n6qbwXDnLP7eb7ufqpvBc5WnYeMbHPfb2hrRUkWZxoBpNBISpzi4xw5nWF7mtbliIlxDQOZn4kmgHT61a76C5Iecs\/t5vu5+qq7wXA7C7+3m+7n6qjedguVpkiybfNDDW7tr2MvUrdvuDa0qK0roqtHwJLL5yz+3m+7n6qz3hFw5yz+3m+7n6qbwXEk+xVGzp8qwN8KMD4zK2Z9BmNY9i6Fwq3K1ncBuiMH4TKsqmVXfAtCMpu0Vd9hwfsbwD\/wDps81leeMSLF4ykuZ2x2bin\/Z70bRbGkLsBlSPz2dzfjIFKxdJ8ys9n4mOsH7OPwHFmwy4iot7CNYs5+qtVUTON3Ts0Z5yz+3m+7n6qbwi4c5Z\/bzfdz9VN4LjPnbsaOsNlfaTahJcLBcEJbW+9rOmvnRero3FZTuwmMmZOaxyhM+ESiK5GZLxZfrRzW0peb12neUt2JJnzln9vN93P1VTeEXDnLP7eb7ufqpvBcOcs\/t5vu5+qm8FzlaNiARismUY2DW6G6PSZVKnfRC5zi2JmOZtrcpRGPRfENW4Ghx22mlRKpk87gWgpTeWKuzrDsPX8WZQjdwQV+EqhVovQmcJw4Si13nTnLP7eb7ufqqd4UuHOWf2833c\/VTeC4c5Z\/bzfdz9VN4LkRz4zQOTnxMMwl21rnVEdyl0tFKXnV0q8ZXJTHrYT6vk8nfysKMlFfqSD0vmN+XWPyeLk2rGWpVj4qkAgBAYQEGynslQR2ja2RulgYbs07MWsc40bSnTCoNeKq0VN2A55yZ5wWeJjoyJ5ZgNojYal9cA7DQ2vnOgKIwbYIS3Y9tZMdteWCYztlkgY0NDWX2k3SMLwxJHGTpvnWgLdWIMO0IDzBmf1bY\/Hw8o1bvQuz0zbbUyKN0shusY0ucdQAqVild2KFEZ559Wi1vc1j3RWetGsabpcNchGJJ1VoONdkKaj3lG7kODQtSpkYGowOvdQlO2hIsgZxOY4MmcXMOAccS0750kfBebi8DGazU1Z\/E9nZ+1Z05KFV3j15r6EzXhH1grsGUJYTWNxGsaWnhCvCpKDvFnPXw1KurTV\/j4k6yHlltob1rx0zf3G8vUo1lUXafK47Ayw0usXo\/3zHRbHAQzZf8AyubwoeWjV4akogmwb1bN5OeUjVp6Esu5ZFTSWQNBc4gNAJJOAAGkkqQVrnLsgvcTHZOhbo20joj4IPSjfOPAuunh1rIi5B7RO97rz3Oe47riSfSV0JJaAsjNv8nd4T+UC8vaGkvYd+zPxUPb8BljeWmrSQdYND6QvCTtofZSipKzV0SLJGdL2UbN0beu\/mHD13xXXSxbXCfFHjYvY8J\/zUeD6cvoTKGVrmhzSCCKgjdC9FNNXR81OEoScZKzRupKlObO\/wCNZfFy\/qYtYFkN+wn1fJ5O\/lYVZlkV+pIPS+Y35dY\/J4uTasZalWPiqQJcoZQigZtk0jY2VAvONBUmgClK4O7pWht4kBoFSa4UpWtdVFAK9yhlafK0jrLYXGOyNNJ7TTp9bI948e7QadUlHiwTDJmb1mgs\/MrIm7URRwcAb9cCX6yVRybdwMeTc07FkzbrWA590OcK9EY2AVLWb+nE47muukc1WSguZWUlFOTNW7JdhONJvZj+pdy2RiH08focb2hRXXw+pnnk2HVN6g\/qU\/c2I7PH6D7xo9vh9SWQTB7Gvboc0OFdNHCor6V5k4uMnF8jtjJSSa5nmXM\/q2x+Ph5Rq1ehoy8dlG0FthcwH8R7WngFXH9IVaXnGbKJtLaFdZQTKwBCDBUElkZCnL7PG46btDwt6EniXzOLgoVpJdfjxPudn1HUw0JPp8OAvXOdgoyfbHRSNkbuHHfG6PQrU5uElJGOIoRrU3TlzLNikDmhw0EAjgOK9pO6uj4aUXGTi9UQ\/Zf\/ACubwoeWjWkNSEQTYN6tm8nPKRq09CWXcsipWuybl8l3MkZo0UdLTdJxazgAoTwjUuvD0\/7mQQBdQBAWZm3+Tu8J\/KBeVtDSXsO\/Zn4qHt+Axrwj7MygJFmhlQsftLj0L+l3nfI\/FdeEq2lkejPF2vhFOG+jqte1fQmy9I+YKc2d\/wAay+Ll\/UxawLIb9hPq+Tyd\/KwqzLIgUzAHOaHXgCQHDQ4A0Dhw6VJB6UzG\/LrH5PFybVjLUqztnHnBBYoTLM6m41o6Z7utaP30BIxbfAgiGTs3J8pv5rykHMiodoswJbdBGD3HSDu6zvDBXclHhECf7lW6vMUlqP2czo71RthbuQ004Ur1u6BuBnWvMh8ESTJecuTIY2xQyBjGigAjk9PS4k61zOvB8bnE9p4Zay9z+Qr++Nh7P\/4P\/pUb+HUr96YX1vc\/ka502lsmTbRIw1a6F5BoRUUO4cV24Jp1oNdUdFSpGpQco6NFFQaF9pT0Pnp6m6uUPQmR+pofFM\/QF8NX9LLvfxPqKXo49y+B5tzP6tsfj4eUapehuy69lYf4VjtwSAelrvkq0dTORR9rdUrrK8hMrEAhAICwc2B\/hYuA\/qcvm8f+Il7Pgj7XZP4SHt+LHVch6IICxM2n1s0ROoj0OI\/Zevh3ekj4zaUcuKml+7oYNl\/8rm8KHlo10w1OJEE2DerZvJzykatPQll3LIqUBla0mSeWQ6XPcfS40HoXpxVkkQJVYAgLRzTs735JuNaS5zn0Giv8TfXl46LlmSOzAVI08RGc3ZL5CL7vWrsR9ZvzXj+TVeh9P954X1\/c\/kH3etXYj6zfmnk1XoPvPC+v7n8jeLIVqaQ4RGoII6JukY61Kw9VO9iJbRwkk4uevY\/kWCF6x8eyndnf8ay+Ll\/UxawJQ3bCvV0mNP8ADu3Cf9WLUrMsiAKSD0vmP+XWPyeLk2rGWpViE5rwvtrrZPNt5FNqjeW3YqaaAaccRhw1OKz8pppWzLxRbdy6Mk23N64ekKm\/pesvFDdz6PwNLS4GN9DXoXfAq6lGSvF3M6iai0+hQ9k0HzLzOSPiaup3UGRZFo\/JH+TO+BXt7O9JT70fWUPwS7imoNC+3p6HjT1N1coehMj9TQ+KZ+gL4av6WXe\/ifUUvRx7l8Dzbmf1bY\/Hw8o1S9Ddl7bJ1kMmTpi0VMd2TRXBrhePql3mqq0n\/MZy0PP0jqldhQ0UgEIBCT0Tm3ZIfs+zse0PEcTWuqKkOAo\/fGNdG4vFxFek4OrNfy+Nj0VGvhqu7jKz+JxtGa8UgvQS03j0Q9Okeeq5IU6NdZqE0\/34o9KnterT4V4e3T6fAYbdkaeLFzCR1zeiHFo86ynQnDVHrUMfQrebLj0fBk7yJZyyCNp0horwnE\/FepRjlppHymNqKpiJyXX4cCNbL\/5XN4UPLRreGpzIgmwb1bN5OeUjVp6Esu5ZFSgcr2YxTyxnS17h5qmh9FF6cXeKZAkVgTPNDM\/bALRauggHRBpwL986mcZXPWrqPBENpK7JlBnNGJLgZdhADWuApSm7d3Grz892cSx8XO1uHUV5QMrejZIXMOOFDT5jfXz201jsPepSqNw9nD6dvie\/hXQqKzSv8Ru+0ZevPEvD+9sZ+Y\/cdvktL1TLLfMSAHmpw3N1WhtPGzkoqo7vhyIeHopXcSUBffI8Mp3Z3\/Gsvi5f1MWsCyG\/YT6vk8nfysKsyyK\/UkHpfMf8usfk8PJtWL1KsZIunfwn4r81xfny72fR0\/NXcdlyFx9sPU7uB\/7r7vYf4KPe\/ieDtL0ku79ClLJoPmV+SPz+rqd1BkWRaPyR\/kzvgV7ezvSU+9H1lD8Eu4pqDQvt6eh409TdXKHoTI\/U0PimfoC+Gr+ll3v4n1FL0ce5fA825n9W2Px8PKNUvQ3Z6dmiDmlrhVrgWkawRQj0LAoebM7MgvsdpkhIJY01Y4jAsdiyp0VphwgrvhLMrmbVhmqrALykD9mtknbXiV3SMOjrnDR5gvPx+J3cci1fwPX2Tgd\/PeS82L8WW9mZbaOdA7Q8VHCBiPOPgvLwsk705aM9LbNBuKrR1XB\/p7\/idrTEY3loJBBwO9uL4vE0Z4TESgm01o+zkY05KrBNiqz5Ykb01HDf0+lehhtvYmlwn\/Mu3Xx+dzCpgqctOBIIX1aCRSorQ7i+yozdSCk1a\/JnkyjlbSdyH7L\/AOVzeFDy0a3hqQiCbBvVs3k55SNWnoSy7lkVK42Tc3ze5rjFQQGygblMGv4Nw8AXXh6n9rIOeamaDWNFqtoutGLYjxF4+DfTqUVq9uESspKEc0tBblrLLpzQdDGNDde+75Lz5SueNiMTKq7chrVTmHjIeWzD0D+ijO5ut3xvbysnyZ14bFOlwenwHm22AFu2wm8w40HxHy3F8vtTY2S9aguHNdO7s7OR9bhMappKT7mZyHY6u2wjAaN8\/wDSrsLAupU38lwWna\/p8S+NrZY5FqyQL7A8kpzZ3\/Gsvi5f1MWsCyG\/YT6vk8nfysKsyyK\/UkHpfMf8usfk8PJtWL1KsZIunfwn4r81xfny73+p9HT81dx3XIXHyw9Tu4H\/ALr7vYf4KPe\/ieDtL0ku79ClLJoPmV+SPz+rqd1BkWRaPyR\/kzvgV7ezvSU+9H1lD8Eu4pqDQvt6eh409TdXKHoTI\/U0Pio\/0BfC1\/Sy738T6ij6OPcvgeas15WstVle8hrWzROc46A1r2kk7wAV2m1wNmy97Rsh5PBuxyPnd1sMT3n00A41RUZvkUckMeVM6rVNV0NiDW0oBPKA53+xtR6XBdVOllRRzINa88ZWucySxWUO0ODojXHXirWAvyFnJaZXfwbDZKN0uuFgG9eqceAFLXF7C\/KWX5sDNYpGXcKxkSsprwoQFw4zAyrNOL0PV2btOOFi4yi3d8jlkzOez32ubKGuBBF\/oBhrJwHpXmeRYiEk0j2pbTwdam4yla65pllW4stDGywObJuG44PGO+MMCvO27gJ1ctSnG8tGvh4HiYOtGDcW+B3ybkm6Q6TE7jdwcOsquzNibpqrX4vkunf1fuGIxmZZYadR3X0Z55DNl\/8AK5vCh5aNXhqSiCbBvVs3k55SNWnoSy7lkVMEICP5y5Jmlo5jrwH+nox1jWeFUlFs4MZh6lTjF+wiM0LmGj2lp1EUWZ5UouLtJWNFBU2ijc40aC46gKlSWScnZEvzYydPFUvN1h\/kOJrr71aRTR6uDo1YcZcF0JABTQrJJKyPQbuZUkFObO\/41l8XL+pi1gWQ37CfV8nk7+VhVmWRX6kgsTI2yvLZ7PDZxZGOEUbYw4ykE3GhtSLuGhUcONyLCNuyPICTzMzH\/wCQ669avn6v2cp1G3vHxd9F8z0I46SVsvvN+eXJ2sz2h\/pWP8L0vzX4L5k\/eEvV94th2W5WxmPmSM1BFdtdu711e3gsCsLRVJSvrxt1OLET30m3wuQ6LLzm\/wCmPWPyU+RL1jwpbFhL+9+H1On3id2Mesfko8hXre4r9xw9d+H1JBJslyGxmx8zMoYzHf2w1xGm7d4qrtw63MotcbHpwwyhRVK\/K1yJMyiQKXR6V7EdryX9i8focj2XFvzn4GxyietA860e1KjXCKRT7tgn5zFlszpt0oDHWqW6AGhrHFjaAUAuspXz1XmNJtu3FnelZJDnkXNQUElqqAcREMHHwzucGlaRhchysSaF4Y25ExsbdTRT061qoozcmaueTiSfSrWIucbbY4Z6bdHeI0OBo6mqo0hUcEyVI7CgaGMaGMboaNH\/AGVZRsQ3c3ZO4aCUshcSZQydBP8AisDXdkbg7z6\/PVVcCykRK35PtFiffjke1rulljc5ld5104HeWMo9TRO46ZL2Scow0BlEzRuStvH1xR3pJWTpRZa7H\/nyzdpxn\/7XDiurKVG3MvF3GfOrZJkttmfZnWZkYeWG8JC4i49r9BaNN2iqo2Zawy5mZ0OyfM+ZsTZS5hjoXFtKua6tQD1vGpauSTHnzTdpx+2d\/Qq7siwc+abtOP2zv6E3YsHPmm7Tj9s7+hN2LGsmzHK4UdYYiNRlJ\/8ARRu0Q4p6ifnqDubZ\/W\/\/ADTdIz8npeqvA7x7MUjRRthiA3pSPgxN2jRQS0N+fNN2lH7Z39Cndk2DnzTdpx+2d\/Qm7Fg5803acftnf0JuxYiee2dz8ovie+FsW1tc0Bry6t4tNcQKaFaMbEofNhPq+Tyd\/KwoyUSLKuwwx8jnQWvamEkhjodsu13A4SNw4R50uLCTnJP7oN91P1kzCwc5J\/dBvup+smYWDnJP7oN91P1kzCwc5J\/dBvup+smYWDnJP7oN91P1kzCwc5J\/dBvup+smYWDnJP7oN91P1kzCxGs9sxRk5jHOtjZXyOIbGILhoBVzydsdgMBo0uC0p8WUm7IiC2MiV5o5KAHNLxU6IgdFRpkPBoHnWkI3KSkSRxJNTpWxkCAEAIAQAgBADmtc0seLzHYOafiNR31DVyU7FfZZycYJSwmo0tdradB4dw74XO1Y2TuIVBJYWbmxZzZZo7THb2hsg6XmYktcCWuYTtorRwIrQVpVc0uDsbrirjlzkn90G+6n6yjMTYOck\/ug33U\/WTMLBzkn90G+6n6yZhYOck\/ug33U\/WTMLBzkn90G+6n6yZhYOck\/ug33U\/WTMLBzkn90G+6n6yZhYOck\/ug33U\/WTMLBzkn90G+6n6yZhYOck\/ug33U\/WTMLBzkn90G+6n6yXFiY5iZhRZOvv2wzSvF0vLbgDa1utZU0qQCak6AobJJgoAIAQAgBACAEAIDzlskZe5st0jmmscf8KPfa0m84cLqngouqEbIwk7sjLWkkAaTh6VYqWVFGGtaxuhrQ0cAFB8\/OulKyMG7m6kgEAIAQAgBACAEAwZ4wViY\/dY6n+1+njA9KzqLmaQfIh6xNC0thDL12SSxPODwZY\/DaAHt87QD\/ALSsqseFzSm+RcawNQQAgBACAEAIAQAgBACAEAIAQAgBACAEAICL7JGXuZLDI9ppJJ\/Cj13n6XDwW3neYK8I3ZWbsjzkAukwFOTm1ljGt7f1BTHUh6FirpMDKAEAIAQAgBACAEA05ztrZn7xaf8AyCrPzS0NSDrnNhVkq3Pgmjnj6eNwe3fppad4ioO8SoavwB6hydbWTRMmjNWSNDm8BFfSuVqzsdKdxSoAIAQAgBACAEAIAQAgBACAEAIAQAgBACAonZjy5t9s2hpqyzi7wyOoXnzC63zFdFNWRjN3ZAFoUF2RG1tEVeuB9GP7K0dURLQsELoMAQAgBACAEAIAQAgG\/L7K2eXwa+ijv2VZ6MtHUgC5zY6RhAXVsNZYvQOsjjjGS9ngOPRDzONf9ywqrmawfIsdZGgIAQAgBACAEAIAQAgBACAEAIAQAgBAN2cWU+ZrLNaKV2uNzgNZA6EemimKu7EN2Vzy\/PM57i9xvOcS5x1uJqT6V1nOc0A5ZuAG0xcLj6GO\/dWh5xWWhPAugxMoAQAgBACAEAIAQCTKzKwSjWx\/6Soloy0dSuwVzGxuwoCVZkZa5mtMctcK0dvsdg758ICpJXRaLsz0QuY3BAMecWdENjLRK2Q3wSLgadGnS4K8YOWhWUlEYuelY9G12j1I\/qLRUJdhTfI3h2TbG5wbtdoFSBW4zCppXB5PoBKnyeXYRvokvsVrZKxskZq12g0I0Gmg4jELBpp2ZqndXR3UEggBACAEAIAQAgNJJmt6ZwHCQEAx2nPPJ8b3MfamBzSWuGOBGkaFfJLoVzLqc\/v1k3tuP\/y+SbuXQZ49RRlI2e3WR8Ymbtc7C0PBFRXAOAOojiUK8XoHZo8+5dzZtNkcRLHVtcJGG9Gd8OGjgNCulNPQxaa1GyKzvdg1jncAJVrMi4+5t5ImZMJHx3WgHSW1qRTRWutXpxdyk3wJatjIEAIAQAgBACAEAIDlaY7zHNG60j0ghHoSiByZEtDNMVfBId+krmys2uhI6NwNC0g6iCFFibkwzJzPmtMrHygRWcEOc55AvtBrdY04muiugcRpKVi0Y3L8Fqj69vrBc9mb3DmqPr2+sEsxciuyLYIbRZrxnijfGasc94DeiwLHGuAdhjrAWlJtPQzqJNFKl11xaSDTdDg4Hgc2oPmK7UzmaJjmPm9FO+\/Jao2EC82Nr2OkrovOFehAru41O4s6lVx0RaEL6stywiGKNsTHtusFBVwrwk6zp8645Nt3Z1KyVjvzVH17fWCizJudI5A7FpB4DVQDZACAEAIAQAgKs2ZSNss1adJJp4WLsw2jOavqiuxINY9K6DENsGselAYvNO6OJLgyCBqS4C+NfGgHLINDId5p+IUohj+pIBACAEAIAQAgBACAKICHXhrCqWM3xr40Bio3kuLAHDe4kuLGbw3kBi8N5AZvjWgMFw1hAY6He4kuLGeh3uJLixbew8RzJLTs55ONceJ85dx00NGTxc5sCAEAyMt0lB0W5qHyQG3N0nXcQ+SAObpOu4h8kBylmLumDXU1safiFKbRFjnQdYz2bPkmZ9RZBQdYz2bPkmZ9RZEez8ia6yOBY3p2aGhp06wAVeEnfUrKKsRTINmY1rgGjSNOO5vrpUmY5UOZY3rW+qFOdkZUaTNFNAHAAEU2Q4o43VbOyMqC6mdjKgupnYyoLqZ2MqC6mdjKgupnYyoec07FHLaLkjQ5txxodYosqtSSjwZpCEb6DJEOhHAPgtc7M8qNrqZ2MqAhM7JyoVXG9a31Qq52TlRrJG2h6Fug\/wAoTOxlQz5v2VjS6jRoGnHd31CkyXFDzcHWt9UKc7IyoLg61vqhM7GVBcHWt9UJnYyoLg61vqhM7GVBcHWt9UJnYyoztbetb6AmdjKhFmxZWC3h10VvSaRUdK7cOCznJ5WXhFXRZUVoc0UbRo1BrR8AuZu5udObpOu4h8lADm6TruIfJAdbHO58l1zjS644YYgtG5wlAf\/Z)\n\n\n\nDataset which are being used are from https:\/\/www.kaggle.com\/rishabh25126\/sales-analysis-2019\n","4991c157":"Before we need to go further their are some **0r** in out data which are giving the error... so let's fix this first","61e57762":"From this we can say that the sales are high in morning between 11am-12am and evening 6pm-8pm. So we should advertise some what after those periods.","368d26a2":"Here we can see that San Francisco (CA)\thas the highest number of sales.","b1eb45ca":"### Augmenting the data with City column for further analysis","0610aae6":"# Q4 What products are most often sold together?","493604bd":"Import some essential libraries","d7a650a2":"### At last lets check the data-type and null values in our data","7914e46e":"### Dealing with missing values","fa9151c3":"# Q2: What city had the highest number of sales?","6ce2ecfd":"### Converting some columns to numeric columns and Augmenting the Sales Column to our dataset","4176be8f":"# **Q3: What time should we display advertisements to maximize likelihood of customer's buying product?**","016b6180":"Here we can see that 'iPhone', 'Lightning Charging Cable' are sold often together","693e8f12":"Now, as the **Or** is being removed we can again do the **Month** operation","a4aed0cc":"# **Data Preprocessing**\nThere are total of 12 CSV files for each month so we need to merge all the data to the single CSV file","1dfb7dec":"Now let's read the merged CSV file from the disk"}}