{"cell_type":{"0e46fbef":"code","3f41c5a3":"code","16e7aa2a":"code","d87b7ed0":"code","d2347214":"code","02d6d4eb":"code","42245af4":"code","37572677":"code","31b1a3c9":"code","28fca9f8":"code","6ac29b93":"code","e1489d5a":"code","bab75fc1":"code","fca8be86":"code","6a1f268f":"code","579d30fd":"code","dfad60a1":"code","7ac6e544":"code","47ac39c2":"code","6ead2c3d":"code","93b93d53":"code","65ef83fe":"code","2b703cc8":"code","896952f7":"code","9f9fc894":"code","52ffbc1a":"code","b699b19f":"code","b8bacbb3":"code","292146e3":"code","78d87ea9":"code","432f76e8":"code","72f48e33":"code","2d3ad7c8":"code","85c21089":"code","67d5ddd0":"code","974cb402":"code","6b6aae2b":"code","41fcc747":"code","7da22110":"code","6d5ad39a":"code","b83d84d2":"code","73c343cc":"code","49137d61":"code","9e354d36":"code","dd61a94a":"code","35cd7c9e":"code","b4ef5e1d":"code","559604a6":"code","248d1c70":"code","b5567e89":"code","320a4a15":"code","9406046b":"code","1cf296c8":"code","5ae867bf":"code","808e9535":"code","57cde947":"code","8d39a28f":"markdown"},"source":{"0e46fbef":"\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","3f41c5a3":"df=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest=pd.read_csv(\"..\/input\/titanic\/test.csv\")\ndf.head()","16e7aa2a":"df.drop(\"Name\",axis=1,inplace=True)\ndf.drop(\"Ticket\",axis=1,inplace=True)\ndf.drop([\"Fare\"],axis=1,inplace=True)","d87b7ed0":"df.head()","d2347214":"df.isna().sum()","02d6d4eb":"df[\"Cabin\"].fillna(str(df[\"Cabin\"].mode().values[0]),inplace=True)","42245af4":"df[\"Cabin\"]=df[\"Cabin\"].apply(lambda x:str(x).replace(' ','')if ' ' in str(x) else str(x))","37572677":"df[\"Deck\"] = df[\"Cabin\"].str.slice(0,1)","31b1a3c9":"df.drop([\"Cabin\"],axis=1,inplace=True)","28fca9f8":"def impute_median(series):\n    return series.fillna(series.median())","6ac29b93":"df.Age=df.Age.transform(impute_median)","e1489d5a":"df.isnull().sum()","bab75fc1":"df[\"Embarked\"]=df[\"Embarked\"].fillna(\"S\")","fca8be86":"df.isnull().sum()","6a1f268f":"df['Is_Married'] = np.where(df['SibSp']==1, 1, 0)\ndf.head()","579d30fd":"df[\"Family_Size\"]=df.SibSp+df.Parch\ndf.head()","dfad60a1":"df['Elderly'] = np.where(df['Age']>=50, 1, 0)","7ac6e544":"df.head()","47ac39c2":"df.dtypes","6ead2c3d":"from sklearn.preprocessing import LabelEncoder\nlabelEncoder_Y=LabelEncoder()\ndf.iloc[:,3]=labelEncoder_Y.fit_transform(df.iloc[:,3].values)\ndf.iloc[:,7]=labelEncoder_Y.fit_transform(df.iloc[:,7].values)\ndf.iloc[:,8]=labelEncoder_Y.fit_transform(df.iloc[:,8].values)","93b93d53":"df.dtypes","65ef83fe":"df.Sex.value_counts()","2b703cc8":"sns.countplot(df.Sex,label=\"count\")\nplt.show()","896952f7":"df.Survived.value_counts()","9f9fc894":"sns.countplot(df.Survived,label=\"count\")\nplt.show()","52ffbc1a":"sns.pairplot(df.iloc[:,1:12],hue=\"Survived\")\nplt.show()","b699b19f":"df.iloc[:,1:12].corr()","b8bacbb3":"plt.figure(figsize=(10,10))\nsns.heatmap(df.iloc[:,1:12].corr(), annot=True,fmt=\".0%\")\nplt.show()","292146e3":"test.head()","78d87ea9":"test['Is_Married'] = np.where(test['SibSp']==1, 1, 0)\ntest.head()","432f76e8":"test[\"Family_Size\"]=test.SibSp+test.Parch\ntest.head()","72f48e33":"test['Elderly'] = np.where(test['Age']>=50, 1, 0)\ntest.head()","2d3ad7c8":"test.drop(\"Name\",axis=1,inplace=True)\ntest.drop(\"Ticket\",axis=1,inplace=True)\ntest.drop(\"Fare\",axis=1,inplace=True)","85c21089":"test.isnull().sum()","67d5ddd0":"test.Age=test.Age.transform(impute_median)","974cb402":"test[\"Cabin\"].fillna(str(test[\"Cabin\"].mode().values[0]),inplace=True)","6b6aae2b":"test[\"Cabin\"]=test[\"Cabin\"].apply(lambda x:str(x).replace(' ','')if ' ' in str(x) else str(x))","41fcc747":"test[\"Deck\"] = test[\"Cabin\"].str.slice(0,1)","7da22110":"test.drop([\"Cabin\"],axis=1,inplace=True)","6d5ad39a":"test.dtypes","b83d84d2":"from sklearn.preprocessing import LabelEncoder\nlabelEncoder_Y=LabelEncoder()\ntest.iloc[:,2]=labelEncoder_Y.fit_transform(test.iloc[:,2].values)\ntest.iloc[:,6]=labelEncoder_Y.fit_transform(test.iloc[:,6].values)\ntest.iloc[:,10]=labelEncoder_Y.fit_transform(test.iloc[:,10].values)\n","73c343cc":"test.head()","49137d61":"x=df.iloc[:,2:12].values\ny=df.iloc[:,1].values.reshape(-1,1)\nx_test  = test.drop(\"PassengerId\",axis=1).copy()","9e354d36":"\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.469,random_state=42)","dd61a94a":"from sklearn.preprocessing import StandardScaler\n\nsc=StandardScaler()\nx_train=sc.fit_transform(x_train)\nx_test=sc.fit_transform(x_test)","35cd7c9e":"x_train.shape","b4ef5e1d":"x_test.shape","559604a6":"y_train.shape","248d1c70":"y_test.shape","b5567e89":"def models(x_train,y_train):\n  \n  from sklearn.linear_model import LogisticRegression\n  log=LogisticRegression(random_state=42)\n  log.fit(x_train,y_train)\n  \n \n  from sklearn.tree import DecisionTreeClassifier\n  tree=DecisionTreeClassifier(criterion='entropy',random_state=0)\n  tree.fit(x_train,y_train)\n  \n  \n  from sklearn.ensemble import RandomForestClassifier\n  forest = RandomForestClassifier(n_estimators=15,criterion=\"entropy\",random_state=0)\n  forest.fit(x_train,y_train)\n\n  print(\"[0]Logistic Regression Training Accuracy:\",log.score(x_train,y_train))\n  print(\"[1]Decision Tree Classifier Training Accuracy:\",tree.score(x_train,y_train))\n  print(\"[2]Random Forest Classifier Training Accuracy:\",forest.score(x_train,y_train))\n  \n  return log,tree,forest","320a4a15":"model = models(x_train,y_train)","9406046b":"from sklearn.metrics import confusion_matrix\n\n\nfor i in range(len(model)):\n  print(\"Model \", i)\n  cm =confusion_matrix(y_test,model[i].predict(x_test))\n\n  TP=cm[0][0]\n  TN=cm[1][1]\n  FN=cm[1][0]\n  FP=cm[0][1]\n\n  print(cm)\n  print(\"Testing Accuracy = \", (TP+TN) \/ (TP+TN+FN+FP))\n  print()","1cf296c8":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\n\nfor i in range(len(model) ):\n  print(\"Model \",i)\n  print( classification_report(y_test,model[i].predict(x_test)))\n  print( accuracy_score(y_test,model[i].predict(x_test)))\n  print()","5ae867bf":"pred=model[0].predict(x_test)\nprint(pred)\n","808e9535":"PassengerId = test['PassengerId']\nsubmission = pd.DataFrame({ 'PassengerId': PassengerId,\n                            'Survived': pred })\nsubmission.to_csv(r'submission.csv',index=False)","57cde947":"from IPython.display import FileLink\nFileLink(r'submission.csv')","8d39a28f":"<a href=\".\/submission.csv\"> Download File <\/a>"}}