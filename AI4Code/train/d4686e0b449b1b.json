{"cell_type":{"3c6fd68b":"code","a958c3bb":"code","309c508b":"code","e96a697f":"code","92cdede4":"code","acb5d246":"code","8c183c3e":"code","7c5aba56":"code","986255cd":"code","45372bfc":"code","33d7cd7b":"code","579fb78c":"code","6b78f6b1":"code","bee3f997":"code","c9aa5f98":"code","5cdc8c2f":"code","5166adb5":"code","6c4cc2d5":"code","338558ff":"code","ba0da21e":"code","51fd5478":"code","06e71af9":"code","59ad4729":"code","e208c4ca":"code","e57082f5":"code","7c4794d5":"code","4c0cdcef":"code","968b6825":"code","9cafca96":"code","c4db3307":"code","bc0ab629":"code","b4852e8b":"code","453e1956":"code","237fa183":"code","55c49b06":"code","5d9fa3be":"code","3f91eab0":"code","a1cf694f":"code","1e3f2999":"code","0a4bfedd":"code","32f03a4b":"code","7efb8369":"code","bc0ea62f":"code","42a16e94":"code","fd304d44":"code","c1038583":"markdown","112d0953":"markdown","6d0e6312":"markdown","de26ccf5":"markdown","5b323a6e":"markdown","2474ab1e":"markdown","42d40a9a":"markdown","23fb21ae":"markdown"},"source":{"3c6fd68b":"import pandas as pd\nimport numpy as np\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\n","a958c3bb":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\n","309c508b":"df_train.head(2)","e96a697f":"df_train.corr()","92cdede4":"df_train.shape","acb5d246":"y_train = df_train.Survived","8c183c3e":"df_train= df_train.drop(['Name', 'PassengerId', 'Ticket', 'Survived'], axis =1)\ndf_train.head(2)","7c5aba56":"df_test = df_test.drop(['PassengerId', 'Name', 'Ticket'], axis =1)\n","986255cd":"print(df_test.shape)\nprint(df_train.shape)","45372bfc":"# Checking null values\ndf_train.isnull().sum()\n","33d7cd7b":"# Replacing null values of age with the median value \n\nx_age_median = df_train.Age.median()\n\nL = []\nfor i in df_train.Age.values:\n    try:\n        \n        type(int(i))\n        L.append(i)\n    except:\n        L.append(x_age_median)\ndf_train['Age']= L","579fb78c":"# Label enconding the Cabin column:\nle = preprocessing.LabelEncoder()\nunique_cabin_list = list(df_train.Cabin.unique())\nle.fit(unique_cabin_list)\na = list(le.classes_)\nnew_cabin_list = list(le.transform(list(df_train.Cabin)))\ndf_train.Cabin = new_cabin_list","6b78f6b1":"# Label enconding the gender column:\nle = preprocessing.LabelEncoder()\nunique_Sex_list = list(df_train.Sex.unique())\nle.fit(unique_Sex_list)\na = list(le.classes_)\nnew_Sex_list = list(le.transform(list(df_train.Sex)))\ndf_train.Sex = new_Sex_list","bee3f997":"# Label enconding the Embarked column:\nle = preprocessing.LabelEncoder()\nunique_embarked_list = list(df_train.Embarked.unique())\nle.fit(unique_embarked_list)\na = list(le.classes_)\nnew_embarked_list = list(le.transform(list(df_train.Embarked)))\ndf_train.Embarked = new_embarked_list","c9aa5f98":"df_train.head()","5cdc8c2f":"X_train, X_cv, y_train_new, y_cv = train_test_split( df_train, y_train, test_size=0.33, random_state=0)","5166adb5":"print(X_train.shape)\nprint(y_train_new.shape)\nprint(X_cv.shape)\nprint(y_cv.shape)","6c4cc2d5":"List_Accuracy_cv = []\nk_range = range(1,20)\nfor k in k_range:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(X_train, y_train_new)\n    y_pred = knn.predict(X_cv)\n    accuracy = (metrics.accuracy_score(y_cv, y_pred))\n    List_Accuracy_cv.append(accuracy)\nprint(List_Accuracy_cv)\n","338558ff":"plt.plot(k_range, List_Accuracy_cv)\nplt.xlabel('value of k for KNN')\nplt.ylabel('Cross-Validated Accuracy')","ba0da21e":"List_Accuracy_train = []\nk_range = range(1,20)\nfor k in k_range:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(X_train, y_train_new)\n    y_pred = knn.predict(X_train)\n    accuracy = (metrics.accuracy_score(y_train_new, y_pred))\n    List_Accuracy_train.append(accuracy)\nprint(List_Accuracy_train)\n","51fd5478":"plt.plot(k_range, List_Accuracy_train)\nplt.xlabel('value of k for KNN')\nplt.ylabel('Cross-Validated Accuracy')","06e71af9":"knn = KNeighborsClassifier(n_neighbors=8)\nknn.fit(X_train, y_train_new)","59ad4729":"# Replacing null values of age with the median value \n\nx_age_median = df_test.Age.median()\n\nL = []\nfor i in df_test.Age.values:\n    try:\n        \n        type(int(i))\n        L.append(i)\n    except:\n        L.append(x_age_median)\ndf_test['Age']= L","e208c4ca":"# Label enconding the Cabin column:\nle = preprocessing.LabelEncoder()\nunique_cabin_list = list(df_test.Cabin.unique())\nle.fit(unique_cabin_list)\na = list(le.classes_)\nnew_cabin_list = list(le.transform(list(df_test.Cabin)))\ndf_test.Cabin = new_cabin_list","e57082f5":"# Label enconding the gender column:\nle = preprocessing.LabelEncoder()\nunique_Sex_list = list(df_test.Sex.unique())\nle.fit(unique_Sex_list)\na = list(le.classes_)\nnew_Sex_list = list(le.transform(list(df_test.Sex)))\ndf_test.Sex = new_Sex_list","7c4794d5":"# Label enconding the Embarked column:\nle = preprocessing.LabelEncoder()\nunique_embarked_list = list(df_test.Embarked.unique())\nle.fit(unique_embarked_list)\na = list(le.classes_)\nnew_embarked_list = list(le.transform(list(df_test.Embarked)))\ndf_test.Embarked = new_embarked_list","4c0cdcef":"df_test.head()","968b6825":"df_test.isnull().sum()","9cafca96":"# Replacing null values of age with the median value \n\nx_fare_median = df_test.Fare.median()\n\nL = []\nfor i in df_test.Fare.values:\n    try:\n        \n        type(int(i))\n        L.append(i)\n    except:\n        L.append(x_fare_median)\ndf_test['Fare']= L","c4db3307":"df_test.isnull().sum()","bc0ab629":"y_pred = knn.predict(df_test)\ny_pred","b4852e8b":"print(X_train.shape)\nprint(y_train_new.shape)\nprint(X_cv.shape)\nprint(y_cv.shape)","453e1956":"from sklearn.linear_model import LogisticRegression\nAccuracy = []\n\nc_range = [.0001, .001, .01, .1, 1, 10, 100, 1000]\nfor i in c_range:\n    clf = LogisticRegression(random_state = 0, C = i  ).fit(X_train, y_train_new)\n    y_pred = clf.predict(X_train)\n    accuracy = (metrics.accuracy_score(y_train_new, y_pred))\n    Accuracy.append(accuracy)\nAccuracy","237fa183":"from sklearn.linear_model import LogisticRegression\nAccuracy = []\n\nc_range = [.0001, .001, .01, .1, 1, 10, 100, 1000]\nfor i in c_range:\n    clf = LogisticRegression(random_state = 0, C = i).fit(X_train, y_train_new)\n    y_pred = clf.predict(X_cv)\n    accuracy = (metrics.accuracy_score(y_cv, y_pred))\n    Accuracy.append(accuracy)\nAccuracy","55c49b06":"from sklearn.model_selection import GridSearchCV\nclf = LogisticRegression()\nparameters = {'penalty':('l1', 'l2'), 'C':[.001, .01, .1, 1, 10,100,1000]}\nGrid_clf = GridSearchCV(clf, parameters, cv = 10)","5d9fa3be":"Grid_clf.fit(X_train, y_train_new)\ny_pred = Grid_clf.predict(X_train)\naccuracy = (metrics.accuracy_score(y_train_new, y_pred))\naccuracy ","3f91eab0":"Grid_clf.fit(X_train, y_train_new)\ny_pred = Grid_clf.predict(X_cv)\naccuracy = (metrics.accuracy_score(y_cv, y_pred))","a1cf694f":"accuracy","1e3f2999":"Grid_clf.best_estimator_\n","0a4bfedd":"Grid_clf.best_params_\n","32f03a4b":"clf = LogisticRegression(random_state = 0, C = .1, penalty = 'l2').fit(df_train, y_train)\ny_pred = clf.predict(df_test)","7efb8369":"df_test.shape","bc0ea62f":"len(y_pred)","42a16e94":"df_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndf = pd.DataFrame()\ndf['PassengerId'] = df_test['PassengerId']\ndf['Survived'] = y_pred\ndf.head()","fd304d44":"df.to_csv('gender_submission.csv', index = False)","c1038583":"# **Loading the data**","112d0953":"# **Importing Libraries**","6d0e6312":"# **KNN Model**","de26ccf5":"## **Removing Null Values**","5b323a6e":"# **Data Processing**","2474ab1e":"# **Logistic Regression**","42d40a9a":"# **Data Visualization**","23fb21ae":"# **Split the data**"}}