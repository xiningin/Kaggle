{"cell_type":{"2af8167a":"code","bcc3e960":"code","f96567e2":"code","8f690aa6":"code","30c54467":"code","d0bfbc6b":"code","a822cda6":"code","b0a71df4":"code","259ae32f":"code","6e43151a":"code","1a6391d9":"code","39cba38d":"code","f563f1dd":"code","9cebe6fe":"code","22240557":"code","d1ab8176":"code","3d073f10":"code","53ddf2cc":"markdown","9d8ae35a":"markdown","11d78c1a":"markdown","0e71ea08":"markdown","1e663e83":"markdown"},"source":{"2af8167a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\nimport plotly.express as px\nimport squarify\nplt.style.use('fivethirtyeight')\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bcc3e960":"data = pd.read_csv('..\/input\/yeastcsv\/yeast.csv', encoding='ISO-8859-2')\ndata.head()","f96567e2":"data.isnull().sum()","8f690aa6":"!pip install squarify","30c54467":"#Code by Roshan Sharma https:\/\/www.kaggle.com\/roshansharma\/market-basket-analysis\n\nfrom wordcloud import WordCloud\n\nplt.rcParams['figure.figsize'] = (15, 15)\nwordcloud = WordCloud(background_color = 'white', width = 1200,  height = 1200, max_words = 100).generate(str(data[\"name\"]))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('Yeast Protein Classes',fontsize = 20)\nplt.show()","d0bfbc6b":"##Code by Roshan Sharma https:\/\/www.kaggle.com\/roshansharma\/market-basket-analysis\n\n# looking at the frequency of Mandatory BCG Strain 2015-2020\n\nplt.rcParams['figure.figsize'] = (18, 10)\ncolor = plt.cm.rainbow(np.linspace(0, 1, 40))\ndata[\"name\"].value_counts().head(50).plot.bar(color = color)\nplt.title('Yeast Protein Classes', fontsize = 20)\nplt.xticks(rotation = 90 )\nplt.grid()\nplt.show()","a822cda6":"y = data[\"name\"].value_counts().head(50).to_frame()\ny.index\ny.head()","b0a71df4":"#Code by Roshan Sharma https:\/\/www.kaggle.com\/roshansharma\/market-basket-analysis\n# plotting a tree map\n\nplt.rcParams['figure.figsize'] = (10, 10)\ncolor = plt.cm.cool(np.linspace(0, 1,10))\nsquarify.plot(sizes = y.values, label = y.index, alpha=.8, color = color)\nplt.title('Tree Map of Yeast Protein')\nplt.axis('off')\nplt.show()","259ae32f":"data['nuc'] = 'Nuc'\nnuc = data.truncate(before = -1, after = 15)","6e43151a":"data.head()","1a6391d9":"#Code by Roshan Sharma https:\/\/www.kaggle.com\/roshansharma\/market-basket-analysis\n\nimport networkx as nx\n\nnuc = nx.from_pandas_edgelist(nuc, source = 'nuc', target = \"name\", edge_attr = True)","39cba38d":"#Code by Roshan Sharma https:\/\/www.kaggle.com\/roshansharma\/market-basket-analysis\n\nplt.rcParams['figure.figsize'] = (20, 20)\npos = nx.spring_layout(nuc)\ncolor = plt.cm.Wistia(np.linspace(0, 15, 1))\nnx.draw_networkx_nodes(nuc, pos, node_size = 15000, node_color = color)\nnx.draw_networkx_edges(nuc, pos, width = 3, alpha = 0.6, edge_color = 'black')\nnx.draw_networkx_labels(nuc, pos, font_size = 20, font_family = 'sans-serif')\nplt.axis('off')\nplt.grid()\nplt.title('Yeast Protein', fontsize = 40)\nplt.show()","f563f1dd":"#Code by Roshan Sharma https:\/\/www.kaggle.com\/roshansharma\/market-basket-analysis\n\ndata['mit'] = 'Mit'\nmit = data.truncate(before = -1, after = 15)\nmit = nx.from_pandas_edgelist(mit, source = 'mit', target = \"mcg\", edge_attr = True)","9cebe6fe":"data.head()","22240557":"#Code by Roshan Sharma https:\/\/www.kaggle.com\/roshansharma\/market-basket-analysis\n\nplt.rcParams['figure.figsize'] = (20, 20)\npos = nx.spring_layout(mit)\ncolor = plt.cm.Blues(np.linspace(0, 15, 1))\nnx.draw_networkx_nodes(mit, pos, node_size = 15000, node_color = color)\nnx.draw_networkx_edges(mit, pos, width = 3, alpha = 0.6, edge_color = 'brown')\nnx.draw_networkx_labels(mit, pos, font_size = 20, font_family = 'sans-serif')\nplt.axis('off')\nplt.grid()\nplt.title('Mitochondrial Yeast Protein', fontsize = 40)\nplt.show()","d1ab8176":"#Code by Roshan Sharma https:\/\/www.kaggle.com\/roshansharma\/market-basket-analysis\n\ndata['vac'] = 'Vac'\nvac = data.truncate(before = -1, after = 10)\nvac = nx.from_pandas_edgelist(vac, source = 'vac', target = \"alm\", edge_attr = True)","3d073f10":"#Code by Roshan Sharma https:\/\/www.kaggle.com\/roshansharma\/market-basket-analysis\n\nplt.rcParams['figure.figsize'] = (20, 20)\npos = nx.spring_layout(vac)\ncolor = plt.cm.Reds(np.linspace(0, 15, 1))\nnx.draw_networkx_nodes(vac, pos, node_size = 15000, node_color = color)\nnx.draw_networkx_edges(vac, pos, width = 3, alpha = 0.6, edge_color = 'pink')\nnx.draw_networkx_labels(vac, pos, font_size = 20, font_family = 'sans-serif')\nplt.axis('off')\nplt.grid()\nplt.title('Vacuolar Yeast Protein', fontsize = 40)\nplt.show()","53ddf2cc":"\n\nThe classification tree used for yeast protein localization. The leaf nodes are labeled with the class that they represent, while the other nodes are labeled with their feature variable. All the edges shown are directed downward and the edges connecting feature variable to their classification variables are not shown explicitly. \n\n![](https:\/\/d3i71xaburhd42.cloudfront.net\/623c5e3441a1e08e3da2c68924c85e4b95274652\/7-Figure3-1.png)https:\/\/www.semanticscholar.org\/paper\/A-Probabilistic-Classification-System-for-the-Sites-Horton-Nakai\/623c5e3441a1e08e3da2c68924c85e4b95274652\/figure\/5\n\nhttps:\/\/www.aaai.org\/Papers\/ISMB\/1996\/ISMB96-012.pdf","9d8ae35a":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Yeast Protein Data<\/span><\/h1><br>\n\nCreator and Maintainer:\n     Kenta Nakai\n         Institue of Molecular and Cellular Biology\n     Osaka, University\n     1-3 Yamada-oka, Suita 565 Japan\n     nakai@imcb.osaka-u.ac.jp\n         http:\/\/www.imcb.osaka-u.ac.jp\/nakai\/psort.html\nDonor: Paul Horton (paulh@cs.berkeley.edu)\nDate: September, 1996\nSee also: E.coli database\n\nPast Usage.\n\nReference: \"A Probablistic Classification System for Predicting the Cellular\nLocalization Sites of Proteins\", Paul Horton & Kenta Nakai,\nIntelligent Systems in Molecular Biology, 109-115.\nSt. Louis, USA 1996.\n\nResults: 55% for Yeast data with an ad hoc structured probability model. Also similar accuracy for Binary Decision Tree and Bayesian Classifier methods were applied by the same authors in unpublished results.\n\nhttps:\/\/www.kaggle.com\/samanemami\/yeastcsv","11d78c1a":"Proteins from yeast were classified into l0 classes:\n\ncytoplasmic, including cytoskeletal (CYT);\n\nnuc]ear (NUC);\n\nvacuolar (VAC);\n\nmitochondrial (MIT); \n\nisomal (POX);\n\nextracellular, including those localized to the cell wall (EXC);\n\nproteins localized t.o the lumen of the endoplasmic reticulum (ERL);\n\nmembrane proteins with a cleaved signal (ME1); \n\nmembrane proteins with an uncleared signal (ME2); \n\nand membrane proteins with no N-terminal signM (ME3), where ME1, ME2, and ME3 proteins may be  localized to the plasma membrane, the endoplasmic reticulum membrane, or the membrane of a golgi body.\n\nhttps:\/\/www.aaai.org\/Papers\/ISMB\/1996\/ISMB96-012.pdf","0e71ea08":"<center style=\"font-family:verdana;\"><h1 style=\"font-size:200%; padding: 10px; background: black;\"><b style=\"color:#03e8fc;\">Predicting Cellular Localization Protein<\/b><\/h1><\/center>\n\n\"A Probabilistic Classification System for Predicting the Cellular Localization Sites of Proteins\"\n\nAuthors: Paul Horton, Kenta Nakai\n\n\"The authors have defined a simple model of classification which combines human provided expert knowledge with probabilistic reasoning. They have developed software to implement this model and have applied it to the problem of classifying proteins into their various cellular localization sites based on their amino acid sequences.\"\n\n\"Since their system requires no hand tuning to learn training data, they can now evaluate the prediction accuracy of protein localization sites by a more objective cross-validation method than earlier studies using production rule type expert systems.\"\n\n\"1484 yeast proteins were classified into 10 classes with an accuracy of 55~0. Additionally they\nreport empirical results using three different strategies for handling continuously valued variables in their probabilistic reasoning system.\"\n\n\"They defined a simple model for probabilistic classification of objects. The model, consists of a rooted binary tree of \"classification variables\" and a \"feature variable\" associated with each non-leaf node of the binary tree. The leaves of the tree represent the possible classes into which an object can be classified.\"\n\nhttps:\/\/www.aaai.org\/Papers\/ISMB\/1996\/ISMB96-012.pdf","1e663e83":"I think some features are missing since we have 10 classifications for Yeast Protein though the Dataframe showed only eight. Besides Kaggle Dataset didn't show the complete 18 columns of the csv. My data has only 9 columns. The other nine are duplicates. \n\nThere is a message: Unable to show preview, Internal error."}}