{"cell_type":{"2bbd0b55":"code","d8929dc5":"code","49bf22c3":"code","12752a6e":"code","c056972e":"code","b292a3ed":"code","54970438":"code","3f726633":"code","649727e4":"code","89ff7ddd":"code","cfb20872":"code","fd724a6d":"code","a1395237":"code","eda75ef2":"code","1937a7e5":"code","e3ffc8a0":"code","1cb718b7":"code","d39b5f93":"code","39a61299":"code","ce8a9dfd":"code","4ce750bf":"markdown","c06435c4":"markdown","8d6bce55":"markdown"},"source":{"2bbd0b55":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom datetime import date","d8929dc5":"# First, we will create 6 different dataframes.  \n# Each will have 2 columns: the values of the die rolled (1-6) and a key to cross join with\nd1 = {'d1':list(range(1,7))}\n\ndf1 = pd.DataFrame(data=d1)\n\ndf1['key'] = 1\n\nd2 = {'d2':list(range(1,7))}\n\ndf2 = pd.DataFrame(data=d2)\n\ndf2['key'] = 1\n\nd3 = {'d3':list(range(1,7))}\n\ndf3 = pd.DataFrame(data=d3)\n\ndf3['key'] = 1\n\nd4 = {'d4':list(range(1,7))}\n\ndf4 = pd.DataFrame(data=d4)\n\ndf4['key'] = 1\n\nd5 = {'d5':list(range(1,7))}\n\ndf5 = pd.DataFrame(data=d5)\n\ndf5['key'] = 1\n\nd6 = {'d6':list(range(1,7))}\n\ndf6 = pd.DataFrame(data=d6)\n\ndf6['key'] = 1","49bf22c3":"# To create a table with all combination of rolls, the individual tables are joined similar\n# to a SQL cross join.\ndf_rolls = pd.merge(df1, df2, on ='key')\ndf_rolls = pd.merge(df_rolls, df3, on ='key')\ndf_rolls = pd.merge(df_rolls, df4, on ='key')\ndf_rolls = pd.merge(df_rolls, df5, on ='key')\ndf_rolls = pd.merge(df_rolls, df6, on ='key').drop(\"key\", 1)\n\ndf_rolls.head(12)","12752a6e":"# A column used to sum each of the 6 dice\ndf_rolls['roll_sum'] = df_rolls['d1'] + df_rolls['d2'] + df_rolls['d3'] \\\n    + df_rolls['d4'] + df_rolls['d5'] + df_rolls['d6'] ","c056972e":"# A lambda function used to identify the rows where the sum is either 6 or 36\ndf_rolls['winner'] = df_rolls[['roll_sum']].apply(lambda x: 'W' if (x['roll_sum'] == 6) | (x['roll_sum'] == 36)\\\n                                else 'L', axis=1)","b292a3ed":"# Create a table that groups by the W\/L column created\n# Because we have labeled each row as either W or L, we can now use value_counts()\n# to count the winners and also get a % of winners out of all possible combinations.\nw1 = pd.DataFrame(df_rolls.winner.value_counts().reset_index())\nw1.rename(columns={'index':'win_or_lose', 'winner':'possible_outcomes'}, inplace=True)","54970438":"# Create a table that groups by the W\/L column created and shows results as a %\nw2 = pd.DataFrame(df_rolls.winner.value_counts(normalize=True).reset_index())\nw2.rename(columns={'index':'win_or_lose', 'winner':'possible_outcomes_pct'}, inplace=True)","3f726633":"w1 = w1.merge(w2, how='left', on='win_or_lose')\nw1","649727e4":"# A dataframe that shows the probabability for each possible sum\npd.DataFrame(df_rolls.roll_sum.value_counts(normalize=True).reset_index()).sort_values('index')","89ff7ddd":"# Visualizing the distribution of possible sums\nplt.hist(df_rolls.roll_sum, bins=31)","cfb20872":"# A lambda function used to identify the rows where the sum is even\ndf_rolls['winner_even'] = df_rolls[['roll_sum']].apply(lambda x: \\\n                'W' if (x['roll_sum'] % 2 == 0) & (x['roll_sum'] % 3 == 0) else 'L', axis=1)","fd724a6d":"# Create a table that groups by the W\/L column created\nw1_even = pd.DataFrame(df_rolls.winner_even.value_counts().reset_index())\nw1_even.rename(columns={'index':'win_or_lose', 'winner_even':'possible_outcomes'}, inplace=True)","a1395237":"# Create a table that groups by the W\/L column created and shows results as a %\nw2_even = pd.DataFrame(df_rolls.winner_even.value_counts(normalize=True).reset_index())\nw2_even.rename(columns={'index':'win_or_lose', 'winner_even':'possible_outcomes_pct'}, inplace=True)","eda75ef2":"w1_even = w1_even.merge(w2_even, how='left', on='win_or_lose')\nw1_even","1937a7e5":"# Create a column that will combine the dice values into a list\ndf_rolls['combined'] = df_rolls[['d1', 'd2', 'd3', 'd4', 'd5', 'd6']].values.tolist()","e3ffc8a0":"# Create a column that will identify rows where only 2 dice show as duplicates\n# For each row, look at the list, use set() to get the unique values, and then\n# use len() to count those values.  If there are 5, call it a 'W'.\ndf_rolls['single_dup'] = df_rolls[['combined']].\\\n    apply(lambda x: 'W' if len(set(x['combined'])) == 5 else 'L', axis=1) ","1cb718b7":"# Show a few winner\/loser scenarios\ndf_rolls[['d1', 'd2', 'd3', 'd4', 'd5', 'd6', 'combined', 'single_dup']].sample(5, random_state=6)","d39b5f93":"# Create a table that groups by the W\/L column created\nw1_single_dup = pd.DataFrame(df_rolls.single_dup.value_counts().reset_index())\nw1_single_dup.rename(columns={'index':'win_or_lose', 'single_dup':'possible_outcomes'}, inplace=True)","39a61299":"# Create a table that groups by the W\/L column created and shows results as a %\nw2_single_dup = pd.DataFrame(df_rolls.single_dup.value_counts(normalize=True).reset_index())\nw2_single_dup.rename(columns={'index':'win_or_lose', 'single_dup':'possible_outcomes_pct'}, inplace=True)","ce8a9dfd":"w1_single_dup = w1_single_dup.merge(w2_single_dup, how='left', on='win_or_lose')\nw1_single_dup","4ce750bf":"## For the brief history of where this first problem came from, please take a quick look at [my article on Medium.](https:\/\/medium.com\/geekculture\/6-dice-1-roll-sum-of-1-or-36-grand-prize-408eadb1403b)\n\n## The question: if someone has 6 dice, what is the probability that the sum of all dice, in a single roll, will sum to either 6 or 36?","c06435c4":"## What is the probability of the sum of the 6 dice being a number divisible by 2 and 3?","8d6bce55":"# What is the probability of rolling all 6 dice and having only 2 dice showing the same value\/rolling only a single pair?"}}