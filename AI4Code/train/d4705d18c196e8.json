{"cell_type":{"918ed190":"code","b6cc6350":"code","76e80657":"code","5bb9e2e5":"code","15893b33":"code","4333d911":"code","7ad5a49b":"code","a6ac43a0":"code","f0abcbea":"code","ea415862":"code","4115fef1":"code","2f53a2ec":"code","0e8ae08e":"code","ec548ac6":"code","f7b1bf1a":"code","fa32384f":"code","735299ab":"code","b497e36a":"code","5c76597f":"code","46ad5f09":"code","0220ad09":"code","36374b7a":"code","9fbab244":"code","b299f9c0":"code","0b04ba07":"code","250acc58":"code","f0f137ec":"code","d0bb8bc5":"code","2295839e":"code","d583b825":"code","6d78bdd4":"code","9b4cf95d":"code","376dddeb":"code","db7bfdd6":"code","b2fa8c26":"code","66a7e0fd":"code","6339ba73":"code","171d7180":"code","41323d81":"code","66fbb767":"code","54dd6bc0":"code","ca03855a":"markdown","55717c8b":"markdown","a0364824":"markdown","ee27b156":"markdown","beaaf0cd":"markdown","f9723f02":"markdown","43b27a6d":"markdown","87e76a4f":"markdown","0b0a0f18":"markdown","b9281276":"markdown","3f11f25d":"markdown","f5b8378e":"markdown","a9e293da":"markdown","fbf7df1b":"markdown","5afff381":"markdown","2f2c8b1c":"markdown","131860ef":"markdown","23b64eac":"markdown","9a580dba":"markdown","94dbc756":"markdown","6c45a029":"markdown"},"source":{"918ed190":"import numpy as np \nimport pandas as pd \nimport os\n\n#\u53ef\u8996\u5316\u7cfb\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n%matplotlib inline\n#matplotlib\u306e\u30b0\u30e9\u30d5\u306e\u30c7\u30b6\u30a4\u30f3\u304b\u3048\u308c\u308b\u3093\u3059\u306d\u30fc\u306f\u30fc\u77e5\u3089\u3093\u304b\u3063\u305f\n#https:\/\/qiita.com\/eriksoon\/items\/b93030ba4dc686ecfbba\u3000\u3053\u3053\u53c2\u7167\nplt.style.use('ggplot')\n\n#\u5b9a\u756a\u306e\u6a5f\u68b0\u5b66\u7fd2\u7cfb\nimport lightgbm as lgb\nimport xgboost as xgb\n\n#\u5b9a\u756a\u306e\u6642\u9593\nimport time\nimport datetime\n\n#\u3053\u308c\u3082\u3088\u304f\u898b\u308b\u3051\u3069\u30c0\u30df\u30fc\u5909\u6570\u4f5c\u6210\u306e\u6642\u306b\u4f7f\u3044\u307e\u3059\u306d\nfrom sklearn.preprocessing import LabelEncoder\n#\u7c21\u5358\u306b\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5206\u3051\u308c\u308b\u3084\u3064\nfrom sklearn.model_selection import StratifiedKFold, KFold\n#\u3053\u308c\u3082\u3088\u304f\u898b\u308b\u3051\u3069\u5e73\u5747\u4e8c\u4e57\u8aa4\u5dee (MSE)\n#\u78ba\u304b\u3053\u306e\u30b3\u30f3\u30da\u306e\u30b9\u30b3\u30a2\u7b97\u51fa\u6cd5\u306f\u4e8c\u4e57\u5e73\u5747\u5e73\u65b9\u6839\u8aa4\u5dee (RMSE)\n#https:\/\/pythondatascience.plavox.info\/scikit-learn\/%E5%9B%9E%E5%B8%B0%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AE%E8%A9%95%E4%BE%A1\n#\u3053\u3053\u5206\u304b\u308a\u6613\u3044\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import Ridge, RidgeCV\n#\u30ab\u30fc\u30cd\u30eb\u5fc5\u9808\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\nimport gc\n#catboost\u306f\u73cd\u3057\u3044\u69d8\u306a\uff1f\nfrom catboost import CatBoostRegressor\n\n#\u3088\u304f\u898b\u308b\u3051\u3069matplotlib\u3088\u308a\u7dba\u9e97\u30673D\u30e2\u30c7\u30eb\u3082\u66f8\u3051\u308b\u304b\u3089\u4f7f\u3063\u3066\u308b\uff1f\uff1f\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n\n#\u4f55\u56de\u304b\u307f\u305f\u3051\u3069\u30a2\u30e9\u30fc\u30c8\u3063\u307d\u3044\u3000\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\npd.set_option('max_colwidth', 500)\npd.set_option('max_columns', 500)\n\n# import workalendar\n# from workalendar.america import Brazil","b6cc6350":"%%time\n#\u30bb\u30eb\u306e\u5b9f\u884c\u6642\u9593\u6e2c\u308c\u307e\u3059\u3000\u4e00\u756a\u4e0a\u306b\u8a18\u8ff0\u3057\u306a\u3044\u3068\u30a8\u30e9\u30fc\u5410\u304f\u3088\n#\u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307e\u305b\u308b\ntrain = pd.read_csv('..\/input\/train.csv', parse_dates=['first_active_month'])\n#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307e\u305b\u308b\ntest = pd.read_csv('..\/input\/test.csv', parse_dates=['first_active_month'])\n#\u30b5\u30f3\u30d7\u30eb\u63d0\u51fa\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307e\u305b\u308b\nsubmission = pd.read_csv('..\/input\/sample_submission.csv')","76e80657":"#\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3092\u6e1b\u3089\u3059\u95a2\u6570\u3092\u5b9a\u7fa9\ndef reduce_mem_usage(df, verbose=True):\n    #\u578b\u5ba3\u8a00\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    #\u30e1\u30e2\u30ea\u306e\u6d88\u8cbb\u5272\u5408\u3092\u683c\u7d0d\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    #\u30ab\u30e9\u30e0\u540d\u3092\u4e00\u3064\u305a\u3064\u5f15\u3063\u5f35\u3063\u3066\u304f\u308b\n    for col in df.columns:\n        #\u30ab\u30e9\u30e0\u306e\u578b\u3092col_type\u306b\u4ee3\u5165\n        col_type = df[col].dtypes\n        #\u578b\u304c\u6570\u5b57\u3060\u3063\u305f\u3089\n        if col_type in numerics:\n            #c_min\u306e\u6700\u4f4e\u5024\u3092c_max\u306b\u6700\u5927\u5024\u3092\u5165\u308c\u308b\n            c_min = df[col].min()\n            c_max = df[col].max()\n            #\u578b\u540d\u306e\u6700\u521d3\u6587\u5b57\u304cint~\u578b\u3060\u3063\u305f\u3089\n            if str(col_type)[:3] == 'int':\n                #c_min\u304cint8\u306e\u6570\u5024\u7bc4\u56f2\u306b\u3042\u308c\u3070int8\u578b\u3067\u683c\u7d0d\u3059\u308b\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                #\u540c\u69d8\u306bint16\u3067\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                #\u540c\u69d8\u306bint32\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                #\u540c\u69d8\u306bint64\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                 #\u540c\u69d8\u306bfloat16\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                #\u540c\u69d8\u306bfloat32\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    #\u540c\u69d8\u306bfloat64\n                    df[col] = df[col].astype(np.float64)    \n    #\u30e1\u30e2\u30ea\u306e\u6d88\u8cbb\u5272\u5408\u306e\u7b97\u51fa\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    #\u7b97\u51fa\uff1f\uff1f\uff1f\uff1f\u308f\u304b\u3089\u3093\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","5bb9e2e5":"#\u30c7\u30fc\u30bf\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u306e\u30a8\u30af\u30bb\u30eb\uff08\u30ab\u30e9\u30e0\u60c5\u5831\u304b\u3044\u3066\u308b\u3068\u3053\uff09\n#\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u60c5\u5831\u3092\u958b\u3044\u3066\u898b\u3066\u308b\ne = pd.read_excel('..\/input\/Data_Dictionary.xlsx', sheet_name='train')\ne\n\n#\u30ab\u30e9\u30e0\u540d\n#\u82f1\u8a9e\u540d\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u65e5\u672c\u8a9e\u540d\n#card_id\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u30ab\u30fc\u30c9ID\u3000\u3000\u3000\u3000\n#first_active_month\u3000\u3000\u521d\u8cfc\u5165\u6708\u3000\u3000\u3000\u3000\n#feature_1            #\u30c7\u30fc\u30bf\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u306e\u30a8\u30af\u30bb\u30eb\uff08\u30ab\u30e9\u30e0\u60c5\u5831\u304b\u3044\u3066\u308b\u3068\u3053\uff09\n#\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u60c5\u5831\u3092\u958b\u3044\u3066\u898b\u3066\u308b\ne = pd.read_excel('..\/input\/Data_Dictionary.xlsx', sheet_name='train')\ne\n\n#\u30ab\u30e9\u30e0\u540d\n#\u82f1\u8a9e\u540d\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u65e5\u672c\u8a9e\u540d\n#card_id\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u30ab\u30fc\u30c9ID\u3000\u3000\u3000\u3000\n#first_active_month\u3000\u3000\u521d\u8cfc\u5165\u6708\u3000\u3000\u3000\u3000\n#feature_1#\u30c7\u30fc\u30bf\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u306e\u30a8\u30af\u30bb\u30eb\uff08\u30ab\u30e9\u30e0\u60c5\u5831\u304b\u3044\u3066\u308b\u3068\u3053\uff09\n#\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u60c5\u5831\u3092\u958b\u3044\u3066\u898b\u3066\u308b\ne = pd.read_excel('..\/input\/Data_Dictionary.xlsx', sheet_name='train')\ne\n\n#\u30ab\u30e9\u30e0\u540d\n#\u82f1\u8a9e\u540d\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u65e5\u672c\u8a9e\u540d\n#card_id\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u30ab\u30fc\u30c9ID\u3000\u3000\u3000\u3000\n#first_active_month\u3000\u3000\u521d\u8cfc\u5165\u6708\u3000\u3000\u3000\u3000\n#feature_1            \u533f\u540d\u30ab\u30fc\u30c9\u306e\u5206\u985e\u6a5f\u80fd(\u30b4\u30fc\u30eb\u30c9\u4f1a\u54e1\uff1f)\n#feature_2\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uff13\u6bb5\u968e\u306b\u5206\u304b\u308c\u3066\u3044\u308b\n#feature_3\n#target\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u5c65\u6b74\u304a\u3088\u3073\u8a55\u4fa1\u671f\u9593\u306e2\u30f6\u6708\u5f8c\u306b\u7b97\u51fa\u3055\u308c\u305f\n#\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u30ed\u30a4\u30e4\u30ea\u30c6\u30a3\u6570\u5024\u30b9\u30b3\u30a2\uff1f\uff1f","15893b33":"#\u30af\u30ec\u30ab\u9867\u5ba2\u306e\u30ab\u30c6\u30b4\u30ea\u5206\u3051\u306e\u578b\u3092'category'\u578b\u306b\u5909\u63db(\u6587\u5b57\u5217)\ntrain['feature_1'] = train['feature_1'].astype('category')\ntrain['feature_2'] = train['feature_2'].astype('category')\ntrain['feature_3'] = train['feature_3'].astype('category')\ntrain.head()","4333d911":"train.info()","7ad5a49b":"#\u30af\u30ec\u30ab\u9867\u5ba2\u306e\u30ab\u30c6\u30b4\u30ea\u5206\u3051\u6bce\u306b\n#target\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u5c65\u6b74\u304a\u3088\u3073\u8a55\u4fa1\u671f\u9593\u306e2\u30f6\u6708\u5f8c\u306b\u7b97\u51fa\u3055\u308c\u305f\n#\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u30ed\u30a4\u30e4\u30ea\u30c6\u30a3\u6570\u5024\u30b9\u30b3\u30a2\uff1f\uff1f\n#\u30bf\u30fc\u30b2\u30c3\u30c8(\u4e0a\u53c2\u7167)\u306e\u5206\u5e03\u5ea6\u5408\u3044\u3092\u30f4\u30a1\u30a4\u30aa\u30ea\u30f3\u30d7\u30ed\u30c3\u30c8\u3067\u53ef\u8996\u5316\n#\u4e00\u884c\u76ee\u306f\u56f3\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u8a2d\u5b9a\u306e\u5ba3\u8a00\u3000\u591a\u5206\uff13\u3064\u6a2a\u4e26\u3073\u56f3\u3092\u4f5c\u308b\u306e\u306b\u3053\u306e\u66f8\u304d\u65b9\u3058\u3083\u306a\u3044\u3068\u30c0\u30e1\nfig, ax = plt.subplots(1, 3, figsize = (16, 6))\nplt.suptitle('Violineplots for features and target');\nsns.violinplot(x=\"feature_1\", y=\"target\", data=train, ax=ax[0], title='feature_1');\nsns.violinplot(x=\"feature_2\", y=\"target\", data=train, ax=ax[1], title='feature_2');\nsns.violinplot(x=\"feature_3\", y=\"target\", data=train, ax=ax[2], title='feature_3');","a6ac43a0":"#\u305d\u308c\u305e\u308c\u306e\u30ab\u30c6\u30b4\u30ea\u5225\u306e\u9867\u5ba2\u6570\nfig, ax = plt.subplots(1, 3, figsize = (16, 6));\ntrain['feature_1'].value_counts().sort_index().plot(kind='bar', ax=ax[0], color='teal', title='feature_1');\ntrain['feature_2'].value_counts().sort_index().plot(kind='bar', ax=ax[1], color='brown', title='feature_2');\ntrain['feature_3'].value_counts().sort_index().plot(kind='bar', ax=ax[2], color='gold', title='feature_3');\nplt.suptitle('Counts of categiories for features');","f0abcbea":"#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u578b\u5909\u63db\u3082\u884c\u3063\u3066\u3044\u308b\ntest['feature_1'] = test['feature_1'].astype('category')\ntest['feature_2'] = test['feature_2'].astype('category')\ntest['feature_3'] = test['feature_3'].astype('category')","ea415862":"train.head()","4115fef1":"#first_active_month\u3000\u3000\u521d\u8cfc\u5165\u6708\n#\u3053\u306e\u30ab\u30e9\u30e0\u3092sort_index\u3067\u65e5\u4ed8\uff08\u884c\u3092\uff09\u6607\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u5404\u3005\u306e\u65e5\u4ed8\u306e\u6570\u3092\u7b97\u51fa\nd1 = train['first_active_month'].value_counts().sort_index()","2f53a2ec":"d1.head()","0e8ae08e":"#\u4e0a\u306e\u51e6\u7406\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3082\u540c\u69d8\u306b\u884c\u3063\u3066\u3044\u308b\nd2 = test['first_active_month'].value_counts().sort_index()\n#\u6298\u308c\u7dda\u30b0\u30e9\u30d5\u306e\u8868\u8a18\n#x\u8ef8\u3068y\u8ef8\u3068\u6298\u308c\u7dda\u306e\u6307\u5b9a\ndata = [go.Scatter(x=d1.index, y=d1.values, name='train'), go.Scatter(x=d2.index, y=d2.values, name='test')]\n#\u30bf\u30a4\u30c8\u30eb\nlayout = go.Layout(dict(title = \"Counts of first active\",\n                  #x\u8ef8\u306e\u9805\u76ee\u540d\n                  xaxis = dict(title = 'Month'),\n                  #\uff59\u8ef8\u306e\u9805\u76ee\u540d\n                   yaxis = dict(title = 'Count'),\n                 #\u51e1\u4f8borientation\u306f\u914d\u7f6e\u65b9\u6cd5\u3060\u3063\u305f\u3088\u3046\u306a\n                  ),legend=dict(\n                orientation=\"v\"))","ec548ac6":"#\u4e0a\u306e\u51e6\u7406\u3067\u30c7\u30fc\u30bf\u5165\u308c\u3066\u3000\u3053\u306e\u30b3\u30fc\u30c9\u3067iplot(\u591a\u5206plotly\u304c\u3053\u308c)\u306e\u53ef\u8996\u5316\u5b9f\u884c\npy.iplot(dict(data=data, layout=layout))","f7b1bf1a":"#first_active_month\u3000\u3000\u521d\u8cfc\u5165\u6708\u306e\u5024\u304c\u7a7a\u5024\u3067feature_1\u5206\u985e\u304c5\u3067feature_2\u304c2\u3067feature_3\u304c\uff11\u3060\u3063\u305f\u3089\n#\u521d\u8cfc\u5165\u6708\u306b\u6700\u5c0f\u5024\u3092\u5165\u308c\u308b\ntest.loc[test['first_active_month'].isna(),'first_active_month'] = test.loc[(test['feature_1'] == 5) & (test['feature_2'] == 2) & (test['feature_3'] == 1), 'first_active_month'].min()","fa32384f":"#target\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u5c65\u6b74\u304a\u3088\u3073\u8a55\u4fa1\u671f\u9593\u306e2\u30f6\u6708\u5f8c\u306b\u7b97\u51fa\u3055\u308c\u305f\n#\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u30ed\u30a4\u30e4\u30ea\u30c6\u30a3\u6570\u5024\u30b9\u30b3\u30a2\uff1f\uff1f\n#\u4e0a\u8a18\u306e\u5206\u5e03\u3092\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u53ef\u8996\u5316\n#\u8b0e\u306e-30\nplt.hist(train['target']);\nplt.title('Target distribution');","735299ab":"#-20\u4ee5\u4e0b\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u6570\u3092\u6570\u3048\u3066\u8868\u793a\nprint('There are {0} samples with target lower than -20.'.format(train.loc[train.target < -20].shape[0]))","b497e36a":"#max_date\u5909\u6570\u306b\u3000#first_active_month\u3000\u3000\u521d\u8cfc\u5165\u6708\u3000\u306e\u6700\u7d42\u65e5\u3060\u3051\u3092\u629c\u304d\u51fa\u3057\u3066\u653e\u308a\u8fbc\u3080\nmax_date = train['first_active_month'].dt.date.max()\ndef process_main(df):\n    #\u5e74\u3001\u6708\u3001\u65e5\u306b\u5206\u3051\u308b\uff1f\n    date_parts = [\"year\", \"weekday\", \"month\"]\n    #\uff11\u500b\u305a\u3064for\u6587\u56de\u3059\u611f\u3058\uff1f\n    for part in date_parts:\n        #_\u3067\u30c7\u30fc\u30bf\u5206\u5272\n        part_col = 'first_active_month' + \"_\" + part\n        #datetime\u578b\u304b\u3089int\u578b\u306b\u5909\u63db\n        df[part_col] = getattr(df['first_active_month'].dt, part).astype(int)\n    #\u6708\u306e\u6700\u7d42\u65e5\u304b\u3089\u3069\u308c\u4f4d\u524d\u304b\u3092\u7d4c\u904e\u6642\u9593\u30ab\u30e9\u30e0\u540d\u3068\u3057\u3066\u8ffd\u52a0        \n    df['elapsed_time'] = (max_date - df['first_active_month'].dt.date).dt.days\n    \n    return df","5c76597f":"#\u308f\u304b\u308a\u307e\u305b\u3093\ntrain = process_main(train)\ntest = process_main(test)","46ad5f09":"#\u4eca\u5ea6\u306fData_Dictionary\u306e\u30b7\u30fc\u30c8\u540d\u304chistory\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\nhistorical_transactions = pd.read_csv('..\/input\/historical_transactions.csv')\ne = pd.read_excel('..\/input\/Data_Dictionary.xlsx', sheet_name='history')\ne\n\n#2\u30ab\u30fc\u30c9ID\n#3\u73fe\u5728\u304b\u3089\u4f55\u304b\u6708\u524d\n#4\u8cfc\u5165\u65e5\n#5\u6c7a\u6e08\u307e\u3067\u7d42\u308f\u3063\u305f\u304b\u3000Y\u304bN\n#6\u30ab\u30c6\u30b4\u30ea\uff13\u3000A~C\n#7\u5206\u5272\u6255\u3044\u6570\n#8\u30ab\u30c6\u30b4\u30ea\uff11 Y\u304bN\n#9\u8ca9\u58f2\u5074\u30ab\u30c6\u30b4\u30eaID\n#10 \u30b5\u30d6\u30bb\u30af\u30bf\u30fcID \u308f\u304b\u308a\u307e\u305b\u3093\n#11 \u8ca9\u58f2\u5074ID\n#12 \u8cfc\u5165\u6570 \u3053\u308c\u610f\u5473\u4e0d\u660e\n#13 \u5e02\u8857ID\n#14\u3000\u56fdID\n#15 \u30ab\u30c6\u30b4\u30ea\uff12\u30001~4","0220ad09":"#\u30ec\u30b3\u30fc\u30c9\u4ef6\u6570\u8868\u793a\nprint(f'{historical_transactions.shape[0]} samples in data')\nhistorical_transactions.head()","36374b7a":"#5\u6c7a\u6e08\u307e\u3067\u7d42\u308f\u3063\u305f\u304b\u3000Y\u304bN\u306e\u30d0\u30a4\u30ca\u30ea\u5024\u306b\u5909\u63db\u3057\u307e\u3057\u3087\u3046\n#Y\u3060\u3063\u305f\u30891\u3044\u308c\u3066N\u3060\u3063\u305f\u30890\u306b\u3059\u308b\u30e9\u30e0\u30c0\u5f0f\u3044\u308c\u3066\u307e\u3059\u3002\nhistorical_transactions['authorized_flag'] = historical_transactions['authorized_flag'].apply(lambda x: 1 if x == 'Y' else 0)","9fbab244":"#\u6c7a\u6e08\u5b8c\u4e86\u7387\u306e\u8868\u793a\u30008%\u4f4d\u306f\u6c7a\u6e08\u5931\u6557\u3057\u3066\u308b\nprint(f\"At average {historical_transactions['authorized_flag'].mean() * 100:.4f}% transactions are authorized\")\nhistorical_transactions['authorized_flag'].value_counts().plot(kind='barh', title='authorized_flag value counts');","b299f9c0":"#\u6700\u4f4e\u30e9\u30f3\u30af\u306e\u65b9\u304c\u91cd\u8981\u306730\u56de\u306b1\u56de\u3057\u304b\u6210\u529f\u3057\u3066\u306a\u3044\u3000\u306a\u3093\u3067\uff1f\u3000\u4e0d\u6b63\u53d6\u5f15\uff1f\nautorized_card_rate = historical_transactions.groupby(['card_id'])['authorized_flag'].mean().sort_values()\nautorized_card_rate.head()","0b04ba07":"#\u5f8c\u308d\u306f\u5f53\u7136100%\nautorized_card_rate.tail()","250acc58":"historical_transactions['installments'].value_counts()","f0f137ec":"#\u5206\u5272\u6255\u3044\u3068\u6c7a\u6e08\u5b8c\u4e86\u7387\u3067\u96c6\u8a08\u3057\u3066\u5e73\u5747\nhistorical_transactions.groupby(['installments'])['authorized_flag'].mean()","d0bb8bc5":"#installments\u3092category\u578b\u306b\u578b\u5909\u63db\nhistorical_transactions['installments'] = historical_transactions['installments'].astype('category')","2295839e":"#purchase_date \u8cfc\u5165\u65e5\u306b\u6642\u9593\u3082\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u3000\u65e5\u4ed8\u3060\u3051\u306b\u5909\u63db\nhistorical_transactions['purchase_date'] = pd.to_datetime(historical_transactions['purchase_date'])","d583b825":"plt.title('Purchase amount distribution.');\nhistorical_transactions['purchase_amount'].plot(kind='hist');","6d78bdd4":"#\uff0d\uff11\u3068\uff10\u3067\u30eb\u30fc\u30d7\nfor i in [-1, 0]:\n    #purchase_amount\u8cfc\u5165\u91cf\u304c-1\u30680\u3088\u308a\u4e0b\u306e\u5024\u306e\u6570\u3092\u629c\u304d\u51fa\u3059\n    n = historical_transactions.loc[historical_transactions['purchase_amount'] < i].shape[0]\n    #\u30d7\u30ea\u30f3\u30c8\n    print(f\"There are {n} transactions with purchase_amount less than {i}.\")\n#\u6b21\u306f0,10,100\nfor i in [0, 10, 100]:\n    #\u4eca\u5ea6\u306f\u9006\u306b\u4e0a\n    n = historical_transactions.loc[historical_transactions['purchase_amount'] > i].shape[0]\n    print(f\"There are {n} transactions with purchase_amount more than {i}.\")","9b4cf95d":"#\uff10\u4ee5\u4e0b\u306e\u5206\u5e03\u5177\u5408\u3092\u53ef\u8996\u5316\nplt.title('Purchase amount distribution for negative values.');\nhistorical_transactions.loc[historical_transactions['purchase_amount'] < 0, 'purchase_amount'].plot(kind='hist');","376dddeb":"#\u7f6e\u63db\u3059\u308b\u5024\u3092\u5b9a\u7fa9\nmap_dict = {'Y': 0, 'N': 1}\n#\u30e9\u30e0\u30c0\u6587\u4f7f\u3063\u3066\u30ab\u30c6\u30b4\u30ea\uff11\u306e\u7f6e\u63db\u5b9f\u884c\nhistorical_transactions['category_1'] = historical_transactions['category_1'].apply(lambda x: map_dict[x])\n#\u30ab\u30c6\u30b4\u30ea\uff11\u3092\u96c6\u8a08\u3057\u3066\u3000purchase_amount \u8cfc\u5165\u91cf\u306e\u5e73\u5747\u3001\u6a19\u6e96\u504f\u5dee\u3001\u30ab\u30a6\u30f3\u30c8\u6570\u3068\u3000authorized_flag \u6c7a\u6e08\u5b8c\u4e86\u7387\u306e\u5e73\u5747\u3001\u6a19\u6e96\u504f\u5dee\u3092\u8868\u793a\u3000\u3053\u308c\u4fbf\u5229\u3060\u306d\u3047\nhistorical_transactions.groupby(['category_1']).agg({'purchase_amount': ['mean', 'std', 'count'], 'authorized_flag': ['mean', 'std']})","db7bfdd6":"#\u30eb\u30fc\u30d7\u6587\u3067\u30ab\u30e9\u30e0\u307e\u308f\u3057\nfor col in ['city_id', 'merchant_category_id', 'merchant_id', 'state_id', 'subsector_id']:\n    #\u5404\u3005\u306e\u30ab\u30e9\u30e0\u306e\u4e00\u610f\u306e\u5024\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u30d7\u30ea\u30f3\u30c8\n    print(f\"There are {historical_transactions[col].nunique()} unique values in {col}.\")","b2fa8c26":"#\u53d6\u5f15\u5c65\u6b74\u96c6\u8a08\ndef aggregate_historical_transactions(trans, prefix):\n    #purchase_month\u3000\u8cfc\u5165\u65e5\u4ed8\u306e\u6708\u3060\u3051\u629c\u304d\u51fa\u3057\u3066\u308b\n    trans['purchase_month'] = trans['purchase_date'].dt.month\n#     trans['year'] = trans['purchase_date'].dt.year\n#     trans['weekofyear'] = trans['purchase_date'].dt.weekofyear\n#     trans['month'] = trans['purchase_date'].dt.month\n#     trans['dayofweek'] = trans['purchase_date'].dt.dayofweek\n#     trans['weekend'] = (trans.purchase_date.dt.weekday >=5).astype(int)\n#     trans['hour'] = trans['purchase_date'].dt.hour\n    #\u4f55\u304b\u6708\u9055\u3046\u304b\u3092\u8868\u8a18(\u4eca\u65e5\u306e\u65e5\u4ed8\u30fc\u8cfc\u5165\u65e5\u4ed8)\u00f730\u306e\u5207\u308a\u6368\u3066\u3067\u8a08\u7b97\n    trans['month_diff'] = ((datetime.datetime.today() - trans['purchase_date']).dt.days)\/\/30\n    #\u3053\u3053\u306f\u610f\u5473\u4e0d\u660e\u3060\u304c\n    #month_lag\u306f2018\u5e74\u306e2\u6708\u304b\u3089\u3069\u308c\u3060\u3051\u524d\u306e\u8cfc\u5165\u6708\u304b\u8a18\u8ff0\u3057\u3066\u308b\u304c\n    #\u4e0b\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u304a\u304b\u3057\u304f\u306a\u3089\u306a\u3044\uff1f\u3068\u601d\u3046\n    trans['month_diff'] += trans['month_lag']\n    #\u5206\u5272\u6255\u3044\u306e\u30ab\u30e9\u30e0\u3092int\u578b\u5909\u63db\n    trans['installments'] = trans['installments'].astype(int)\n    #purchase_date \u8cfc\u5165\u65e5\u4ed8\u3092\u6642\u7cfb\u5217\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u5909\u63db\u3059\u308b\u307f\u305f\u3044\u3060\u3051\u3069\n    trans.loc[:, 'purchase_date'] = pd.DatetimeIndex(trans['purchase_date']). \\\n                                        astype(np.int64) * 1e-9\n    #\u5de6\u306e10\u306e-9\u4e57\u3057\u3066\u308b\u610f\u5473\u304c\u3055\uff50\uff50\uff50\u3063\u3071\u308a\n    #\u30c0\u30df\u30fc\u5909\u6570\u4f5c\u6210\u30e1\u30bd\u30c3\u30c9(\u7537\u2192\uff11\u3000\u5973\u2192\uff10\u307f\u305f\u3044\u306a\u7f6e\u63db)\n    trans = pd.get_dummies(trans, columns=['category_2', 'category_3'])\n    agg_func = {\n        'authorized_flag': ['sum', 'mean'],\n        'category_1': ['sum', 'mean'],\n        'category_2_1.0': ['mean', 'sum'],\n        'category_2_2.0': ['mean', 'sum'],\n        'category_2_3.0': ['mean', 'sum'],\n        'category_2_4.0': ['mean', 'sum'],\n        'category_2_5.0': ['mean', 'sum'],\n        'category_3_1': ['sum', 'mean'],\n        'category_3_2': ['sum', 'mean'],\n        'category_3_3': ['sum', 'mean'],\n        'merchant_id': ['nunique'],\n        'purchase_amount': ['sum', 'mean', 'max', 'min', 'std'],\n        'installments': ['sum', 'mean', 'max', 'min', 'std'],\n        'purchase_month': ['mean', 'max', 'min', 'std'],\n        #ptp\u306f\u5024\u306e\u7bc4\u56f2\u3092\u7b97\u51fa\u3057\u3066\u304f\u308c\u308b\n        'purchase_date': [np.ptp, 'max', 'min'],\n        'month_lag': ['min', 'max'],\n        'merchant_category_id': ['nunique'],\n        'state_id': ['nunique'],\n        'subsector_id': ['nunique'],\n        'city_id': ['nunique'],\n        'month_diff': ['min', 'max', 'mean']\n    }\n    #agg\u306f\u6307\u5b9a\u3057\u305f\u30ab\u30e9\u30e0\u6bce\u306b\u96c6\u8a08\u3092\u3068\u3063\u3066\u304f\u308c\u308b\n    agg_trans = trans.groupby(['card_id']).agg(agg_func)\n    #\n    agg_trans.columns = [prefix + '_'.join(col).strip() for col in agg_trans.columns.values]\n    #\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u756a\u53f7\u964d\u308a\u306a\u304a\u3057\n    agg_trans.reset_index(inplace=True)\n\n    df = (trans.groupby('card_id')\n          .size()\n          .reset_index(name='{}transactions_count'.format(prefix)))\n\n    agg_trans = pd.merge(df, agg_trans, on='card_id', how='left')\n\n    return agg_trans","66a7e0fd":"#\u6708\u9593\u96c6\u8a08\u3000\u5f15\u6570history\ndef aggregate_per_month(history):\n    #\u30ab\u30fc\u30c9ID\u3068\u4f55\u304b\u6708\u524d\u306b\u8cfc\u5165\u3057\u305f\u304b\u3067\u96c6\u8a08\n    grouped = history.groupby(['card_id', 'month_lag'])\n    #installments \u5206\u5272\u6255\u3044\u3092int\u578b\u306b\u578b\u5909\u63db\n    history['installments'] = history['installments'].astype(int)\n    agg_func = {\n            'purchase_amount': ['count', 'sum', 'mean', 'min', 'max', 'std'],\n            'installments': ['count', 'sum', 'mean', 'min', 'max', 'std'],\n            }\n\n    intermediate_group = grouped.agg(agg_func)\n    intermediate_group.columns = ['_'.join(col).strip() for col in intermediate_group.columns.values]\n    intermediate_group.reset_index(inplace=True)\n\n    final_group = intermediate_group.groupby('card_id').agg(['mean', 'std'])\n    final_group.columns = ['_'.join(col).strip() for col in final_group.columns.values]\n    final_group.reset_index(inplace=True)\n    \n    return final_group\n\nfinal_group = aggregate_per_month(historical_transactions) ","6339ba73":"%%time\n#\u3044\u3089\u3093\u30c7\u30fc\u30bf\u524a\u9664\ndel d1, d2, autorized_card_rate\n#\u8efd\u304f\u3059\u308b\u305f\u3081\u306b\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\ngc.collect()","171d7180":"historical_transactions.head()","41323d81":"#historical_transactions \u53d6\u5f15\u5c65\u6b74\u30b7\u30fc\u30c8\u306b\n#\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3092\u6e1b\u3089\u3059\u95a2\u6570\u3092\u5b9a\u7fa9\n#def reduce_mem_usage(df, verbose=True):\n#\u4e0a\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u653e\u308a\u8fbc\u307f\nhistorical_transactions = reduce_mem_usage(historical_transactions)","66fbb767":"historical_transactions.head()","54dd6bc0":"history = aggregate_historical_transactions(historical_transactions, prefix='hist_')\nhistory = reduce_mem_usage(history)\ngc.collect()","ca03855a":"\u904e\u53bb\u6c7a\u6e08\u6210\u529f\u5272\u5408\u306e\u6700\u4f4e\u30e9\u30f3\u30af\u3068\u6700\u9ad8\u30e9\u30f3\u30af(\u6700\u9ad8\u306f\u5927\u4f53100%\u3060\u3088\u306d)","55717c8b":"**\u30e1\u30a4\u30f3\u30c7\u30fc\u30bf\u306e\u63a2\u7d22**\n<br>\u30c7\u30fc\u30bf\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046","a0364824":"\u8cfc\u5165\u91d1\u984d \n<br>\u6b8b\u5ff5\u306a\u304c\u3089\u3001purchase_amount\u306f\u6b63\u898f\u5316\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u305d\u308c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002","ee27b156":"\u5206\u5272\u6255\u3044","beaaf0cd":"**\u30ab\u30c6\u30b4\u30ea**","f9723f02":"\u30bf\u30fc\u30b2\u30c3\u30c8","43b27a6d":"\u4e0a\u304b\u3089\u308f\u304b\u308b\u3053\u3068\u306f\n<br>\u30ab\u30c6\u30b4\u30ea\uff11\u306e\n<br>N\u306f\u8cfc\u5165\u91cf\u5c0f\u3000\u30d0\u30e9\u3064\u304d\u5c0f\u3000\u6c7a\u6e08\u5b8c\u4e86\u7387\u4f4e\u3000\u30d0\u30e9\u3064\u304d\u5927\n<br>Y\u306f\u8cfc\u5165\u91cf\u5927\u3000\u30d0\u30e9\u3064\u304d\u5927\u3000\u6c7a\u6e08\u5b8c\u4e86\u7387\u9ad8\u3000\u30d0\u30e9\u3064\u304d\u5c0f","87e76a4f":"\u672a\u3060\u306b\u30b5\u30d6\u30bb\u30af\u30bf\u30fcID\u3060\u3051\u8b0e\n\n<br>**\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0**","0b0a0f18":"\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6570\u306e\u50be\u5411\u306f\u4f3c\u3066\u3044\u3066\u3001\u3053\u308c\u306f\u7d20\u6674\u3089\u3057\u3044\u3067\u3059\u3002\n\u671f\u9593\u306e\u7d42\u308f\u308a\u306b\u306a\u305c\u3053\u3093\u306a\u306b\u6025\u6fc0\u306a\u6e1b\u5c11\u304c\u3042\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\u305d\u308c\u306f\u308f\u3056\u3068\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u3042\u308b\u3044\u306f\u3001\u65b0\u3057\u3044\u30ab\u30fc\u30c9\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u5f8c\u306b\u306e\u307f\u8003\u616e\u3055\u308c\u307e\u3059\u3002\n\n#\u3082\u3057\u304b\u3057\u3066\u30b3\u30f3\u30da\u3092\u8003\u616e\u3057\u3066\u308b\u3068\u304b\uff1f\n\n\u307e\u305f\u3001\u30c6\u30b9\u30c8\u3067\u4e0d\u8db3\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u3092\u542b\u30801\u884c\u304c\u3042\u308a\u307e\u3059\u3002\u79c1\u306f\u6700\u521d\u306e\u30c7\u30fc\u30bf\u3092\u8a18\u5165\u3057\u307e\u3059\u304c\u3001\u540c\u3058\u6a5f\u80fd\u5024\u3092\u6301\u3061\u307e\u3059\u3002","b9281276":"\u9762\u767d\u3044\u3002\u6700\u3082\u4e00\u822c\u7684\u306a\u5206\u5272\u6255\u3044\u306e\u6570\u306f\u3001\u4e88\u60f3\u3055\u308c\u308b0\u30681\u3067\u3059\u3002\u3057\u304b\u3057-1\u3068999\u306f\u5947\u5999\u3067\u3059\u3002\u3053\u308c\u3089\u306e\u5024\u306f\u6b20\u640d\u5024\u3092\u57cb\u3081\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u305f\u3068\u601d\u3044\u307e\u3059\u3002","3f11f25d":"\u4e00\u65b9\u3001\u627f\u8a8d\u3055\u308c\u305f\u53d6\u5f15\u304c3\uff05\u3057\u304b\u306a\u3044\u3053\u3068\u3092\u8003\u3048\u308b\u3068\u3001999\u306f\u4e0d\u6b63\u53d6\u5f15\u3092\u610f\u5473\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\u3082\u30461\u3064\u8208\u5473\u6df1\u3044\u3053\u3068\u306f\u3001\u5206\u5272\u6255\u3044\u306e\u6570\u304c\u591a\u3044\u307b\u3069\u3001\u627f\u8a8d\u7387\u304c\u4f4e\u3044\u3053\u3068\u3067\u3059\u3002","f5b8378e":"\u53d6\u5f15\u5c65\u6b74\n<br>card_id\u3054\u3068\u306b3\u304b\u6708\u5206\u306e\u53d6\u5f15\u5c65\u6b74","a9e293da":"\u3059\u3079\u3066\u306e\u30ab\u30c6\u30b4\u30ea\u306f\u304b\u306a\u308a\u7570\u306a\u308a\u307e\u3059","fbf7df1b":"\u3053\u308c\u30892\u3064\u306e\u30d7\u30ed\u30c3\u30c8\u306f\u91cd\u8981\u306a\u30a2\u30a4\u30c7\u30a2\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u6a5f\u80fd\u306e\u7570\u306a\u308b\u30ab\u30c6\u30b4\u30ea\u306f\u3055\u307e\u3056\u307e\u306a\u6570\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5206\u5e03\u306f\u307b\u307c\u540c\u3058\u3067\u3059\u3002\n\u3053\u308c\u306f\u3001\u3053\u308c\u3089\u306e\u6a5f\u80fd\u304c\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u4e88\u6e2c\u306b\u3042\u307e\u308a\u9069\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u4ed6\u306e\u6a5f\u80fd\u3068\u6a5f\u80fd\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001\u3053\u308c\u3089\u306e\u6a5f\u80fd\u306e\u5404\u30ab\u30c6\u30b4\u30ea\u306e\u5e73\u5747\u76ee\u6a19\u5024\u304c\u30bc\u30ed\u306b\u8fd1\u3044\u3053\u3068\u3082\u6ce8\u76ee\u306b\u5024\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30c7\u30fc\u30bf\u304c\u6b63\u898f\u5206\u5e03\u304b\u3089\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3055\u308c\u305f\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002","5afff381":"**\u4e00\u822c\u60c5\u5831**\n<br>\u3053\u306e\u30ab\u30fc\u30cd\u30eb\u306fElo Merchant Category Recommendation\u30b3\u30f3\u30c6\u30b9<br>\u30c8\u306eEDA\u3068\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u30fb\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u306b\u5c02\u5ff5\u3057\u3066\u3044\u307e\u3059\u3002\n<br>\n<br>\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306f\u3001Elo\u3068\u305d\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u30af\u30e9<br>\u30a4\u30a2\u30f3\u30c8\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u5404card_id\u306e\u30ed\u30a4\u30e4\u30ea\u30c6\u30a3\u30b9\u30b3\u30a2\u3092<br>\u4e88\u6e2c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n","2f2c8b1c":"-0.7\u304c\u591a\u3044\uff1f\n<br>\u307b\u3068\u3093\u3069\u3059\u3079\u3066\u306e\u53d6\u5f15\u306e\u8cfc\u5165\u91d1\u984d\u306e\u7bc4\u56f2\u306f\uff08-1\u30010\uff09\u3067\u3059\u3002\u304b\u306a\u308a\u5f37\u3044\u6b63\u898f\u5316\u3068\u9ad8\u3044\u7570\u5e38\u5024\u3092\u51e6\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","131860ef":"\u30d5\u30a3\u30fc\u30c1\u30e3\u30fc\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0","23b64eac":"\u305d\u3057\u3066\u305d\u308c\u3089\u306f1\u3064\u306e\u30e6\u30cb\u30fc\u30af\u306a\u5024\u3092\u6301\u3063\u3066\u3044\u307e\u3059\uff1a-33.21928095\u3002\n<br>\u3053\u308c\u306f\u7279\u5225\u306a\u5834\u5408\u306e\u3088\u3046\u3067\u3059\u3002\u3053\u308c\u3089\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u5358\u7d14\u306b\u9664\u5916\u3059\u308b\u306e\u304c\u59a5\u5f53\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u5f8c\u3067\u8a66\u3057\u307e\u3059\u3002","9a580dba":"\u3053\u308c\u306f\u672c\u5f53\u306b\u5947\u5999\u306b\u898b\u3048\u307e\u3059\uff01","94dbc756":"-1\uff5e\uff10\u304c\u307b\u3068\u3093\u3069\u3063\u3059\u306d","6c45a029":"\u307b\u3068\u3093\u3069\u306e\u53d6\u5f15\u304c\u62d2\u5426\u3055\u308c\u305f\u30ab\u30fc\u30c9\u304c\u3044\u304f\u3064\u304b\u3042\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u306e\u4e0d\u6b63\u53d6\u5f15\u306f\u3042\u308a\u307e\u3057\u305f\u304b\uff1f"}}