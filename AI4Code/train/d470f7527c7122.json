{"cell_type":{"d1a9ffb0":"code","93dda216":"code","9e077c34":"code","01678d8c":"code","49335665":"code","6fcccf6c":"code","f0a7134a":"code","fecaee0d":"code","f577c678":"code","775d503d":"code","a4017d6b":"code","f7bdf034":"code","a4045d37":"code","41d39aef":"code","27b1a240":"code","1be4a041":"code","7df7de2c":"code","79fcba86":"code","b356d09e":"code","7d4788a3":"code","4a506f7a":"code","f7d554e4":"code","3f7dfcfe":"code","82aac5b9":"code","c654b0fc":"code","a180f55d":"code","2e44a36d":"code","c27a373a":"code","9ae9a664":"code","bc7d4ccb":"code","708d381c":"code","9332ef65":"code","4015046b":"code","be704632":"code","e8f194e1":"code","22d43bf9":"code","9d3e0b30":"code","8b14193f":"code","2e1bca31":"code","156fd676":"code","8ebd169e":"code","54454ed6":"code","817a0b33":"code","8a1c19e4":"code","af1d0a61":"code","35254a5d":"code","644fed60":"code","c2283332":"code","5f9257c4":"code","01ccfe6a":"code","c4e8fcc2":"code","450ef858":"code","92d2aa08":"code","6dedac78":"code","49f9cef9":"code","0c4b61c8":"code","635325ca":"code","1019ad83":"code","4ab440b6":"code","42e3e89f":"code","419b7a8e":"code","7128e4f9":"code","9c041a71":"code","2ed7efae":"code","02379a1a":"code","8217a04c":"code","5610b6aa":"code","a49d303a":"code","9294b197":"code","e171aeda":"code","8aa606c7":"code","beae4dce":"markdown","da219d4d":"markdown","c8602f80":"markdown","03f720c5":"markdown","a377c13e":"markdown","9b81c194":"markdown","24ecbe07":"markdown","c484d795":"markdown","cad3dd24":"markdown","3bf12159":"markdown","f8b4f7a3":"markdown","262a2b96":"markdown","fbab0adf":"markdown","210185ec":"markdown","6cbe80a5":"markdown","9259d102":"markdown","38ec1706":"markdown","c460192e":"markdown","1a82b808":"markdown","aa91029e":"markdown","eceaafdd":"markdown","6f10def8":"markdown","d97ee812":"markdown","f383cc1b":"markdown","5c095cd3":"markdown","da86441b":"markdown","38062137":"markdown","7491a4f0":"markdown","1a17b392":"markdown","cb378a16":"markdown","89da21f2":"markdown","b5009ad8":"markdown","9a047553":"markdown","bd8f6b7d":"markdown","782cb3f9":"markdown","ce815a2e":"markdown","33d55a10":"markdown","9340d71e":"markdown","b0746ccf":"markdown","7d224d41":"markdown","06c01d04":"markdown","255f3e9c":"markdown","7894c34f":"markdown","ffefd003":"markdown","1ac48416":"markdown","c15c07ae":"markdown","8eb055ce":"markdown","d1de60c1":"markdown","2060d955":"markdown","9864c705":"markdown","3cf1f1eb":"markdown","c0ee7cfc":"markdown","ec4abaa2":"markdown","343867bd":"markdown","5fb36e28":"markdown","bafb6776":"markdown","189b6836":"markdown","530180cc":"markdown","b72ce09b":"markdown"},"source":{"d1a9ffb0":"from warnings import filterwarnings\nfilterwarnings('ignore')","93dda216":"# Some Libraries Imported\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","9e077c34":"matches = pd.read_csv(\"..\/input\/tsf-datasets\/matches.csv\")\nmatches.head()","01678d8c":"matches.info()","49335665":"deliveries = pd.read_csv(\"..\/input\/tsf-datasets\/deliveries.csv\")\ndeliveries.head()","6fcccf6c":"deliveries.info()","f0a7134a":"matches.isnull().sum()","fecaee0d":"# !pip install missingno","f577c678":" # Observation of Missing Value of Data\nimport missingno as msno\n\nmsno.matrix(matches);","775d503d":"#Percentage of NAN Values \nper_Nan = [(c, matches[c].isna().mean()*100) for c in matches]\nper_Nan = pd.DataFrame(per_Nan, columns=[\"column_name\", \"Percentage\"])","a4017d6b":"per_Nan","f7bdf034":"matches.drop('umpire3',axis = 1, inplace=True)","a4045d37":"deliveries.isnull().sum()","41d39aef":"matches['team1'].unique()","27b1a240":"matches['team2'].unique()","1be4a041":"deliveries['batting_team'].unique()","7df7de2c":"deliveries['bowling_team'].unique()","79fcba86":"matches.replace('Rising Pune Supergiant','Rising Pune Supergiants', inplace = True)","b356d09e":"deliveries.replace('Rising Pune Supergiant','Rising Pune Supergiants', inplace = True)","7d4788a3":"matches.loc[matches['city'].isnull()]","4a506f7a":"matches['city'].fillna('Dubai', inplace = True)","f7d554e4":"matches['city'].unique()","3f7dfcfe":"matches.replace('Bengaluru','Bangalore', inplace = True)","82aac5b9":"deliveries.replace('Bengaluru','Bangalore', inplace = True)","c654b0fc":"# lets see how many matches are being played every season\nplt.subplots(figsize=(15,5))\nsns.countplot(x = 'season', data = matches, palette = 'inferno')\nplt.xlabel('Season',fontsize=15)\nplt.ylabel('Number of Matches Played',fontsize=15)\nplt.title('Number of Matches in Each Season',fontsize=20)\nplt.show()","a180f55d":"num_matches = pd.concat([matches['team1'], matches['team2']])\n\nnum_matches = num_matches.value_counts()\n\nplt.figure(figsize=(15,7))\nplt.bar(x=num_matches.index, height=num_matches.values,color='yellow')\nplt.title('Number of Matches played by each team',fontsize=20)\nplt.xlabel('Team',fontsize=15)\nplt.ylabel('Number of Matches',fontsize=15)\nplt.xticks(rotation=90,fontsize=15)\n\nfor i,v in enumerate(num_matches.values):\n    plt.text(x=i, y=v+2, s=v)\n    \nplt.show()    ","2e44a36d":"sns.set(style='darkgrid')\nfig=plt.gcf()\nfig.set_size_inches(18.5,10.5)\nwins=pd.DataFrame(matches['winner'].value_counts())\nwins['name']=wins.index\nplt.xticks(rotation=90,fontsize=15)\nplt.yticks(fontsize=16)\nplt.bar(wins['name'],\n        wins['winner'],\n        color=['#15244C','#FFFF48','#292734','#EF2920','#CD202D','#ECC5F2',\n               '#294A73','#D4480B','#242307','#FD511F','#158EA6','#E82865',\n               '#005DB7','#C23E25','#E82865']\n        ,alpha=0.8)\ncount=0\nfor i in wins['winner']:\n    plt.text(count-0.15,i-4,str(i),size=15,color='black',rotation=90)\n    count+=1\nplt.title('Total Wins by Each Team',fontsize=20)\nplt.xlabel('Teams',fontsize=15)\nplt.ylabel('Total Number of Matches Won (2008-2019)',fontsize=14)\nplt.show()","c27a373a":"winner_by_season = matches.groupby('season')['winner'].value_counts()","9ae9a664":"groups = winner_by_season.groupby('season')\nfig = plt.figure()\ncount = 1\n\nfor year, group in groups:\n    ax = fig.add_subplot(4,3,count)\n    ax.set_title(year)\n    ax = group[year].plot.bar(figsize = (15,20), width = 0.8,color='yellow')\n    \n    count+=1;\n    \n    plt.xlabel('')\n    plt.yticks([])\n    plt.ylabel('No. of matches won')\n    \n    total_of_matches = []\n    for i in ax.patches:\n        total_of_matches.append(i.get_height())\n    total = sum(total_of_matches)\n    \n    for i in ax.patches:\n        ax.text(i.get_x()+0.2, i.get_height()-1.5,s= i.get_height(),color=\"black\",fontweight='bold')\nplt.tight_layout()\nplt.show()","bc7d4ccb":"season_winner = matches.drop_duplicates('season', keep='last')\nseason_winner = season_winner[['season', 'winner']]\nseason_winner.sort_values('season',inplace=True)\nseason_winner.reset_index(inplace=True, drop=True)\nseason_winner","708d381c":"plt.subplots(figsize=(13,8))\nsns.countplot('winner', data = season_winner, palette = 'inferno')\nplt.xlabel('Teams',fontsize=15)\nplt.xticks(rotation=90,fontsize=15)\nplt.ylabel('Number of seasons won by any team',fontsize=15)\nplt.title('Total Championship Numbers',fontsize=20)\nplt.show()","9332ef65":"finals = matches.drop_duplicates('season', keep='last')\nfinals = finals[['season', 'team1', 'team2', 'winner', ]]\n\n# Teams who reaches maximum number of finals\nmost_finals = pd.concat([finals['team1'], finals['team2']])\nmost_finals = most_finals.value_counts().reset_index()\nmost_finals = pd.DataFrame(most_finals)\nmost_finals.columns = ['Team', 'Number of Final']\n\n# Teams who won the final.\nwin_finals = finals['winner'].value_counts().reset_index()\nwin_finals = pd.DataFrame(win_finals,)\n\nmost_finals = most_finals.merge(win_finals, left_on='Team',right_on='index', how='outer')\nmost_finals.drop('index', axis=1,inplace=True)\nmost_finals.set_index('Team', drop=True, inplace=True)\nmost_finals.columns = ['Number of Times Finals played', 'Number of Times Finals won']\nmost_finals.plot(kind='bar', figsize=(13,7),fontsize=15, title='How many Finals Teams Played and How Many Finals Won')\nplt.show()","4015046b":"# Visualizing how many matches were played in which city.\nplt.subplots(figsize=(18.5,10.5))\nsns.countplot(x = 'city', data = matches, palette = 'tab20', order=matches['city'].value_counts().index)\nplt.ylabel('Number of Matches Held',fontsize=15)\nplt.title('Number of matches held in each city',fontsize=20)\nplt.xlabel('Cities',fontsize=15)\nplt.xticks(rotation=90,fontsize=15)\nplt.show()","be704632":"# Picking the top 10 players based on the no. of Man of Match (MOM) awards won\nmom=matches['player_of_match'].value_counts()[:10]\nmom","e8f194e1":"# Plot to visualise the top 10 players based on the number of MOM awards won\nplt.subplots(figsize=(18.5,10.5))\nax = sns.barplot(x = mom.index, y = mom,orient='v', palette = 'tab10')\nplt.ylabel('Number of awards won',fontsize=15)\nplt.title('Top 10 players based on number of awards won',fontsize=20)\nplt.xlabel('Players',fontsize=15)\nplt.xticks(rotation=90,fontsize=15)\n# Write the value count\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nfor p in ax.patches:\n    ax.annotate('{0:.1f}'.format(p.get_height()), (p.get_x()+0.2, p.get_height()+0.2))       \nplt.show()","22d43bf9":"# Visualization of how many matches were played in which venue.\nplt.subplots(figsize=(18.5,10.5))\nsns.countplot(x = 'venue', data = matches, palette = 'tab20', order=matches['venue'].value_counts().index)\nplt.ylabel('Number of matches played',fontsize=15)\nplt.title('Number of Matches in each Venue',fontsize=20)\nplt.xlabel('Stadium',fontsize=15)\nplt.xticks(rotation=90,fontsize=15)\nplt.show()","9d3e0b30":"plt.figure(figsize = (20,15))\nax = sns.countplot(x='venue', data = matches, hue = 'winner',order=matches['venue'].value_counts().iloc[:10].index,palette='tab10')\nplt.xticks(rotation=30, ha = 'right',fontsize=15)\nplt.ylabel('Number of Matches',fontsize=15)\nplt.xlabel('Venues',fontsize=15)\nplt.title('Stadium Effect On Win',fontsize=20)\nplt.legend(loc='upper right')\nplt.show()","8b14193f":"plt.figure(figsize = (20,15))\nax = sns.countplot(x='city', data = matches, hue = 'winner',order=matches['city'].value_counts().iloc[:10].index,palette='tab10')\nplt.xticks(rotation=30, ha = 'right',fontsize=15)\nplt.ylabel('Number of Matches',fontsize=15)\nplt.xlabel('Cities',fontsize=15)\nplt.title('City Effect On Win',fontsize=20)\nplt.legend(loc='upper right')\nplt.show()","2e1bca31":"plt.subplots(figsize=(18.5,10.5))\ntoss=matches[matches['toss_winner']==matches['winner']]\nax = sns.countplot(\"winner\", data = toss, hue = 'toss_decision',order = toss['toss_winner'].value_counts().index,palette='Set1')\nplt.title(\"Number of winning teams according to the toss decision\",fontsize=20)\nplt.xticks(rotation=90, ha = 'right',fontsize=15)\nplt.ylabel('Number of Matches',fontsize=15)\nplt.xlabel('Winner',fontsize=15)\n\n# Write the value count\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nfor p in ax.patches:\n    ax.annotate('{0:.1f}'.format(p.get_height()), (p.get_x()+0.05, p.get_height()+0.5))        \n        \n    \nplt.show()","156fd676":"team = matches['team1'].unique()\n\ntoss_match_winner = []\nfor var in team:\n    count = matches[(matches['toss_winner'] == var) & (matches['winner'] == var)]['id'].count()\n    toss_match_winner.append(count)\n\n    \n    \nplt.figure(figsize=(18.5,10.5))\nplt.bar(x=team, height=toss_match_winner,color='yellow')\nplt.xticks(rotation=90,fontsize=15)\nplt.title('Toss Winner and Match Winner',fontsize=20)\nplt.xlabel('Teams',fontsize=15)\nplt.ylabel('Number of times match win with toss win',fontsize=15)\n\nfor i,v in enumerate(toss_match_winner):   \n    plt.text(x=i, y=v+1, s=v)\nplt.show()","8ebd169e":"df = pd.merge(matches, deliveries, left_on='id', right_on='match_id')","54454ed6":"df.head()","817a0b33":"# Getting total runs from each season\ntotal_run = df.groupby(['season','match_id'])['total_runs'].sum().reset_index()\ntotal_run = total_run.groupby(['season'])['total_runs'].sum().reset_index()\ntotal_run","8a1c19e4":"plt.subplots(figsize=(15,5))\nax = sns.barplot(x ='season', y='total_runs',data = total_run, palette = 'tab10')\nplt.xlabel('Seasons',fontsize=15)\nplt.ylabel('Runs',fontsize=15)\nplt.title('Runs in Each Season',fontsize=20)\n\n# Write the value count\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nfor p in ax.patches:\n    ax.annotate('{0:.1f}'.format(p.get_height()), (p.get_x()+0.15, p.get_height()+0.5))   \n\n\nplt.show()\n\n","af1d0a61":"# Getting total runs from each teams\nteam_runs = df.groupby('batting_team')['total_runs'].sum().reset_index()\nteam_runs = team_runs.groupby(['batting_team'])['total_runs'].sum().reset_index()","35254a5d":"team_runs","644fed60":"plt.subplots(figsize=(15,5))\nax = sns.barplot(x ='batting_team', y='total_runs',data = team_runs, palette = 'tab10')\nplt.xlabel('Teams',fontsize=15)\nplt.ylabel('Runs',fontsize=15)\nplt.title('Runs in Each Teams',fontsize=20)\nplt.xticks(rotation=90,fontsize=15)\n\n# Write the value count\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nfor p in ax.patches:\n    ax.annotate('{0:.1f}'.format(p.get_height()), (p.get_x()+0.03, p.get_height()+0.5))   \n\nplt.show()\n\n","c2283332":"# Runs Distribution By each Team in 1st Inning and 2nd Inning\ninning_run = df.groupby(['batting_team','match_id','inning', 'over'])['total_runs'].sum().reset_index()\ninning_run = inning_run.groupby(['batting_team','inning'])['total_runs'].sum().reset_index()\ninning_run = inning_run.drop(inning_run[inning_run.inning > 2 ].index)\ninning_run[0:5]","5f9257c4":"plt.subplots(figsize=(15,5))\nax = sns.barplot(x ='batting_team', y='total_runs',data = inning_run,hue='inning')\nplt.xlabel('Teams',fontsize=15)\nplt.ylabel('Runs',fontsize=15)\nplt.title('Runs Distribution By each Team in Innings',fontsize=20)\nplt.xticks(rotation=90,fontsize=15)\nplt.show()\n","01ccfe6a":"batsman = df['batsman'].unique()\nbatsman[:5]","c4e8fcc2":"def check_fours(x): # Counting number of fours\n    global count\n    if x==4:\n        count+=1","450ef858":"count=0\nbatsman_fours = []       # This list will contain the fours amount numbers of each batsman hitting.\nfor i in batsman:\n    temp_df = df[df['batsman']==i]\n    temp_df['batsman_runs'].apply(check_fours)\n    batsman_fours.append(count)\n    count=0","92d2aa08":"df_fours = pd.DataFrame(data={'Batsman':batsman, 'Fours':batsman_fours})\ndf_fours.sort_values('Fours', inplace=True,ascending=False,)\ndf_fours.reset_index(drop=True, inplace=True)\ndf_fours = df_fours[:10]\n\ndf_fours","6dedac78":"# Ranking of players by fours amount.\ndf_fours.T","49f9cef9":"plt.subplots(figsize=(15,5))\nax = sns.barplot(x ='Batsman', y='Fours',data = df_fours, palette = 'tab10')\nplt.xlabel('BATSMAN',fontsize=15)\nplt.ylabel('FOURS',fontsize=15)\nplt.title('Top 10 Batsman with most number of FOURS',fontsize=20)\nplt.xticks(rotation=90,fontsize=15)\n\n# Write the value count\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nfor p in ax.patches:\n    ax.annotate('{0:.1f}'.format(p.get_height()), (p.get_x()+0.2, p.get_height()+0.5))   \n\nplt.show()","0c4b61c8":"def check_sixes(x): # Counting number of fours\n    global count\n    if x==6:\n        count+=1","635325ca":"count=0\nbatsman_sixes = []       # This list will contain the fours amount numbers of each batsman hitting.\nfor i in batsman:\n    temp_df = df[df['batsman']==i]\n    temp_df['batsman_runs'].apply(check_sixes)\n    batsman_sixes.append(count)\n    count=0","1019ad83":"df_sixes = pd.DataFrame(data={'Batsman':batsman, 'Sixes':batsman_sixes})\ndf_sixes.sort_values('Sixes', inplace=True,ascending=False,)\ndf_sixes.reset_index(drop=True, inplace=True)\ndf_sixes = df_sixes[:10]\n\ndf_sixes","4ab440b6":"# Ranking of players by fours amount.\ndf_sixes.T","42e3e89f":"plt.subplots(figsize=(15,5))\nax = sns.barplot(x ='Batsman', y='Sixes',data = df_sixes, palette = 'tab10')\nplt.xlabel('BATSMAN',fontsize=15)\nplt.ylabel('SIXES',fontsize=15)\nplt.title('Top 10 Batsman with most number of SIXES',fontsize=20)\nplt.xticks(rotation=90,fontsize=15)\n\n# Write the value count\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nfor p in ax.patches:\n    ax.annotate('{0:.1f}'.format(p.get_height()), (p.get_x()+0.2, p.get_height()+0.5))   \n\nplt.show()","419b7a8e":"def check_dots(x): # Counting number of fours\n    global count\n    if x==0:\n        count+=1","7128e4f9":"count=0\nbatsman_dots = []       # This list will contain the fours amount numbers of each batsman hitting.\nfor i in batsman:\n    temp_df = df[df['batsman']==i]\n    temp_df['batsman_runs'].apply(check_dots)\n    batsman_dots.append(count)\n    count=0","9c041a71":"df_dots = pd.DataFrame(data={'Batsman':batsman, 'Dots':batsman_dots})\ndf_dots.sort_values('Dots', inplace=True,ascending=False,)\ndf_dots.reset_index(drop=True, inplace=True)\ndf_dots = df_dots[:10]\n\ndf_dots","2ed7efae":"# Ranking of players by fours amount.\ndf_dots.T","02379a1a":"plt.subplots(figsize=(15,5))\nax = sns.barplot(x ='Batsman', y='Dots',data = df_dots, palette = 'tab10')\nplt.xlabel('BATSMAN',fontsize=15)\nplt.ylabel('DOTS',fontsize=15)\nplt.title('Top 10 Batsman with most number of DOTS',fontsize=20)\nplt.xticks(rotation=90,fontsize=15)\n\n# Write the value count\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nfor p in ax.patches:\n    ax.annotate('{0:.1f}'.format(p.get_height()), (p.get_x()+0.2, p.get_height()+0.5))   \n\nplt.show()","8217a04c":"individual  = df.groupby(['batsman','match_id'])['batsman_runs'].sum().reset_index()\nindividual.sort_values('batsman_runs',axis=0, inplace=True,ascending=False)\nindividual.drop('match_id',inplace=True,axis=1)\nindividual = individual[:10]","5610b6aa":"individual","a49d303a":"individual.plot(x='batsman', kind='bar', figsize=(12,6),color='green')\nplt.xlabel('Batsman',fontsize=15)\nplt.ylabel('Runs',fontsize=15)\nplt.title('Top 10 Individual Scores',fontsize=20)\nplt.xticks(rotation=90,fontsize=15)\nplt.show()","9294b197":"bowler = df['bowler'].value_counts()[:10]\n\nplt.figure(figsize=(15,7))\nplt.bar(x=bowler.index, height=bowler.values,color='orange')\n\nplt.title('Bowlers who bowled maximum balls', fontsize=20)\nplt.xlabel('BOWLER',fontsize=15)\nplt.ylabel('BALLS',fontsize=15)\n\nfor i,v in enumerate(bowler.values):\n    plt.text(x=i, y=v+1, s=v)\n    \nplt.show() ","e171aeda":"dot_ball = df[df['total_runs']==0]\ndot_ball = dot_ball['bowler'].value_counts()[:10]\n\nplt.figure(figsize=(15,7))\nplt.bar(x=dot_ball.index, height=dot_ball.values,color='lightgreen')\n\nplt.title('Bowlers who have maximum number of Dot balls', fontsize=20)\nplt.xlabel('BOWLER',fontsize=15)\nplt.ylabel('BALLS',fontsize=15)\n\nfor i,v in enumerate(dot_ball.values):\n    plt.text(x=i, y=v+1, s=v)\n    \nplt.show() \n","8aa606c7":"extra_runs = df[df['extra_runs']!=0]\nextra_runs = extra_runs['bowler'].value_counts()[:10]\n\nplt.figure(figsize=(15,7))\nplt.bar(x=extra_runs.index, height=extra_runs.values,color='lightblue')\n\nplt.title('Bowlers who have bowled maximum number of Extra balls', fontsize=20)\nplt.xlabel('BOWLER',fontsize=15)\nplt.ylabel('BALLS',fontsize=15)\n\nfor i,v in enumerate(extra_runs.values):\n    plt.text(x=i, y=v+1, s=v)\n    \nplt.show() \n","beae4dce":"* Mumbai Indians is the team with the most total runs.","da219d4d":"* 'Bangalore' and 'Bengaluru' These two are the same statement.","c8602f80":"**player_dismissed:** Name of the player dismissed (If out)\n**dismissal_kind:** How the player was dismissed (If out)\n**fielder:** Fielder involved in the dismissal (If any)\n* It is normal for these features to contain missing data. Because not every player may have taken these actions.","03f720c5":"* The maximum matches played on Eden Gardens Stadium\n* Other favorite stadiums are Wankhede, M. Chinnaswamy Stadium.","a377c13e":"* In general, it has been observed that the number of wins is higher when toss_decision is 'field'.","9b81c194":"* **22. Top 10 Bowlers with maximum number of Dot Balls**","24ecbe07":"* **11. Observing the effect of the field situation on the winning for the 10 cities with the most matches**","c484d795":"* Although Chennai Super Kings played a lot of finals, their ability to win the final match is low.\n* Mumbai Indians won the most in the finals.","cad3dd24":"* **10. Observing the effect of the field situation on the winning for the 10 stadiums with the most matches**","3bf12159":"* Harbhajan Singh bowled maximum balls.","f8b4f7a3":"* **13. Toss Winner and Match Winner**","262a2b96":"* In 2011,2012,2013 more then 20000 runs were made.\n* In each Season there were more then 15000 runs.\n* Many runs in each season of IPL show that the matches are very competitive.","fbab0adf":"* **16. Visualization of teams' runs according to 1st and 2nd Inning**","210185ec":"* **20. Top 10 Individuals Score**","6cbe80a5":"* **23. Top 10 Bowlers with maximum number of extras**","9259d102":"* **21. Top 10 Bowler who bowled Maximum bowls in IPL**","38ec1706":"* **2. Number of matches played by each team.**","c460192e":"* **4. Visualization of the total number of matches won by the teams for all seasons.**","1a82b808":"* Among the teams with high wins, all except Kolkata Knight Riders are observed to have higher running in the 1st inning than the 2nd inning.\n* For example, for teams with high wins such as Mumbai Indians, Chenai Super Kings, Royal Challengers Bangalore, the run in 1st Inning is higher.","aa91029e":"* Maximum number of matches played by Mumbai Indians, Chennai Super Kings, Kolkata Knight Riders.","eceaafdd":"* CH Gayle tops the list as expected.\n* Although AB de Villiers is not in the fours, it is in the 2nd place in the sixes.\n* Although MS Dhoni is not in the fours, it is in the 3rd place in the sixes.","6f10def8":"* Harbhajan Singh also bowled maximum Dot balls.","d97ee812":"* Mumbai, the city of the Mumbai Indians team, stands out as the city with the most wins.","f383cc1b":"* Mumbai was observed as the city with the most played.\n* Other favorite cities are Bangalore, Kolkate, Delhi.","5c095cd3":"* The day CH Gayle hit 175 runs","da86441b":"* **18. Top 10 Batsman with most number of Sixes**","38062137":"* **8. Plot to visualise the top 10 players based on the number of MOM awards won**","7491a4f0":"* 'Rising Pune Supergiant' and 'Rising Pune Supergiants' These two are the same statement.","1a17b392":"* **9. Visualizing the number of matches held in each venues.**","cb378a16":"*  G Gambhir came in first with 484 fours, followed by SK Raina.\n* V Kohli is in 4th place with 384 fours.\n* CH Gayle, the top scorer, is 9th place on the top 10 players that have the most fours.","89da21f2":"# **2. Data Read**","b5009ad8":"# **3. Data Visualization**","9a047553":"* SL Malinga bowled maximum Extra balls.","bd8f6b7d":"* The team with the most points, both Toss Winner and Match Winner, is Chennai Super Kings.","782cb3f9":"# **3. Data Cleaning**","ce815a2e":"* The variable 'umpire3' was dropped because it contains too much missing data.","33d55a10":"* Maximum number of matches played by Mumbai Indians, Royal Challengers Bangalore, Kolkata Knight Riders.","9340d71e":"* **14. Total runs across each season**","b0746ccf":"* **1. Number of matches in the season.**","7d224d41":"* CH Gayle is the player with the most man of the match award.\n* It is followed by AB de Villiers.","06c01d04":"* Read First Dataset","255f3e9c":"* **15. Total Runs score by each Team**","7894c34f":"## **Exploratory Data Analysis - Sports**","ffefd003":"* Read Second Dataset","1ac48416":"* **5. Champion in each season**","c15c07ae":"* **3. Total number of wins by each team**","8eb055ce":"# **1. The Story of the Dataset**\n### **Information about some variables used in the Data Set.**\n#### **1st \"matches\" Dataset**\n* id: The IPL match id.\n* season: The IPL season\n* city: The city where the IPL match was held.\n* date: The date on which the match was held.\n* team1: One of the teams of the IPL match\n* team2: The other team of the IPL match\n* toss_winner: The team that won the toss\n* toss_decision: The decision taken by the team that won the toss to \u2018bat\u2019 or \u2018field\u2019\n* result: The result(\u2018normal\u2019, \u2018tie\u2019, \u2018no result\u2019) of the match.\n* dl_applied: (1 or 0)indicates whether the Duckworth-Lewis rule was applied or not.\n* winner: The winner of the match.\n* win_by_runs: Provides the runs by which the team batting first won\n* win_by_runs: Provides the number of wickets by which the team batting second won.\n* player_of_match: The outstanding player of the match.\n* venue: The venue where the match was hosted.\n* umpire1: One of the two on-field umpires who officiate the match.\n* umpire2: One of the two on-field umpires who officiate the match.\n* umpire3: The off-field umpire who officiates the match\n#### **2nd \"deliveries\" Dataset**\n* match_id: Unique Identifier for a match\n* inning: Match innings - 1st innings\/2nd innings\n* batting_team: Name of the batting team\n* bowling_team: Name of the bowling team\n* over: Current over\n* ball: Current ball of the over\n* batsman: Name of the batsman on strike\n* non_striker: Name of the batsman on non-striker's end\n* bowler: Name of the bowler\n* is_super_over: Is this a super-over (0 or 1)\n* wide_runs: Runs given as wide\n* bye_runs: Runs given as bye\n* legbye_runs: Runs given as leg-bye\n* noball_runs: Runs given as no-ball\n* penalty_runs: Runs given as penalty\n* batsman_runs: Runs scored by the batsman\n* extra_runs: Total extra runs (Wide, Bye, No-ball, Penalty)\n* total_runs: Total runs from the ball (extra_runs, batsman_runs)\n* player_dismissed: Name of the player dismissed (If out)\n* dismissal_kind: How the player was dismissed (If out)\n* fielder: Fielder involved in the dismissal (If any)","d1de60c1":"* **6. Visualization of how many finals which team played and how many of these matches they won.**","2060d955":" **Results**\n* In the final matches, some teams had a very low win rate, so it is important for the championship to come to the final and not give up.\n* In general, it has been observed that the number of wins is higher when toss_decision is 'field'.\n* The teams with higher toss_winner are the teams with more wins.\n* The place where the match is played is very effective for victory. Especially some teams may have displacement phobia.\n* It is very important to have effective players, that is, players with high statistics.\n* The teams that can be recommended for companies for the teams with high number of wins and champions in recent years are: Mumbai Indians, Chennai Super Kings and Kolkata Knight Riders.\n* The recommended bowler for companies could be: SL Malinga, Herbajan Singh, B.Kumar, A.Mishra.\n* Players as recommended batman for companies could be: CH Gayle, BB MccOllum, AB de Villiers, V Kohli, S Dhawan, SK Raina.","9864c705":"* Particularly striking here is that Mumbai Indian's number of victories is as low as 10 in Eden Gardens, the stadium where the most games are played. Because Mumbai Indian is the team with the most wins.\n* This shows that Mumbai Indians is not very good with the Eden Garden stadium, also due to the deplacement disadvantage.","3cf1f1eb":"* The most matches were played in 2013 and the least in 2009.","c0ee7cfc":"* V Kohli tops the list, followed by S Dhawan and CH Gayle.","ec4abaa2":"* **17. Top 10 Batsman with most number of Fours**","343867bd":"* The team with the most championships between the seasons of 2008-2019 is Mumbai Indians.","5fb36e28":"\n* \"Exploratory Data Analysis\" was performed on the \"Indian Premier League\" dataset.\n### Problems\n* Perform \u2018Exploratory Data Analysis\u2019 on dataset \u2018Indian Premier League\u2019\n* As a sports analysts, find out the most successful teams, players and factors contributing win or loss of a team.\n* Suggest teams or players a company should endorse for its products. \n\n\n# Author: Muhammet Varl\u0131","bafb6776":"* **19. Top 10 Batsman with most number of dot balls.**","189b6836":"* **7. Visualizing the number of matches held in each city.**","530180cc":"* **12. Number of wins according to Toss Decision**","b72ce09b":"* Merge 2 Dataset"}}