{"cell_type":{"af3643c5":"code","82267bd3":"code","4aa8a52e":"code","9b0d328a":"code","7b227d67":"code","2c509857":"code","b05028ad":"code","5586e358":"code","9097e7b4":"code","6376e551":"code","3171af37":"code","bbae4be3":"code","8d1d15cf":"code","a990a013":"code","09bccdac":"code","118213d2":"code","102fc7a3":"code","f3676d57":"code","d3b4d8e9":"code","70047af5":"code","c631e15d":"code","58b66791":"code","777882c8":"code","4f96d6e4":"code","bc149d37":"code","e721a83c":"code","843303be":"code","ce452579":"code","f5683c0f":"code","822c29dc":"code","cb8c0fc7":"code","909aee7b":"code","e63ce9d0":"code","b0455848":"code","db9f5a29":"code","8daca169":"code","15ff8c24":"markdown","fda5effb":"markdown","53e1bca1":"markdown","30905e98":"markdown","16fb7ecf":"markdown","dad27c4e":"markdown","7b3c788a":"markdown","fd7f7457":"markdown","5c851f65":"markdown","7c8cc4cf":"markdown","3a758f85":"markdown"},"source":{"af3643c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","82267bd3":"import pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')","4aa8a52e":"train=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ndisplay(train.head()),display(test.head())","9b0d328a":"train.isnull().sum(),test.isnull().sum()\n","7b227d67":"train.drop([\"Cabin\"],axis=1,inplace=True)\ntest.drop([\"Cabin\"],axis=1,inplace=True)\ntrain.columns","2c509857":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","b05028ad":"def is_alone(x):\n    if  (x['SibSp'] + x['Parch'])  > 0:\n        return 1\n    else:\n        return 0\n\ntrain['Is_alone'] = train.apply(is_alone, axis = 1)\ntest['Is_alone'] = test.apply(is_alone, axis = 1)\n\ng = sns.catplot(x=\"Is_alone\", col = 'Survived', data=train, kind = 'count', palette='deep')","5586e358":"g = sns.FacetGrid(train, col='Survived')\ng = g.map(sns.distplot, \"Age\")","9097e7b4":"train.head()","6376e551":"train.corr()","3171af37":"train.drop(['PassengerId','Name','SibSp','Parch','Ticket'],axis=1,inplace=True)\ntest.drop(['Name','SibSp','Parch','Ticket'],axis=1,inplace=True)\nprint(train.columns),print(test.columns)","bbae4be3":"train['Survived'].value_counts()","8d1d15cf":"feature=train.drop(\"Survived\",axis=1)\ntarget=train['Survived']\ntarget.shape","a990a013":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test= train_test_split(feature,target, test_size = 0.3, random_state = 23)\nprint(x_train.shape),print(y_train.shape)","09bccdac":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import make_column_transformer\nimport numpy as np\n#from sklearn.impute import IterativeImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import KBinsDiscretizer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import make_pipeline\n","118213d2":"numerical_features = ['Age','Fare','Is_alone'] \ncategorical_features = ['Pclass','Sex','Embarked']","102fc7a3":"preprocessor=make_column_transformer(\n             (make_pipeline(\n              SimpleImputer(strategy='median'),\n              KBinsDiscretizer(n_bins=3)), numerical_features),\n             \n              (make_pipeline(\n               SimpleImputer(strategy='constant',fill_value='missing'),\n              OneHotEncoder(categories='auto',handle_unknown='ignore')), categorical_features)\n)","f3676d57":"from sklearn.linear_model import LogisticRegression\nlog_model=make_pipeline(preprocessor,LogisticRegression())\nlog_model.fit(x_train,y_train)","d3b4d8e9":"log_pred=log_model.predict(x_test)\nlog_pred","70047af5":"from sklearn import metrics\nfrom sklearn.metrics import accuracy_score\nacc_log=accuracy_score(log_pred,y_test)\nacc_log","c631e15d":"from sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_val_predict\n","58b66791":"result_log = cross_val_score(log_model,feature, target, cv=10, scoring=\"accuracy\" )\nprint(\"Cross val Score \", result_log.mean())","777882c8":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\n","4f96d6e4":"rf_model=make_pipeline(preprocessor,RandomForestClassifier(n_estimators=500))\nrf_model.fit(x_train,y_train)\nrf_pred=rf_model.predict(x_test)\nprint(rf_pred)\nacc_rf=accuracy_score(rf_pred,y_test)\nprint(\"Accuracy= \",acc_rf)\nresult_rf = cross_val_score(rf_model,feature, target, cv=10, scoring=\"accuracy\" )\nprint(\"Cross val Score \", result_rf.mean())","bc149d37":"svc_model=make_pipeline(preprocessor,SVC(kernel='rbf',C=1))\nsvc_model.fit(x_train,y_train)\nsvc_pred=svc_model.predict(x_test)\nprint(svc_pred)\nacc_svc=accuracy_score(svc_pred,y_test)\nprint(\"Accuracy\",acc_svc)\nresult_svc = cross_val_score(svc_model,feature, target, cv=10, scoring=\"accuracy\" )\nprint(\"Cross val Score \", result_svc.mean())","e721a83c":"from sklearn.neighbors import KNeighborsClassifier\nknn_model=make_pipeline(preprocessor,KNeighborsClassifier(n_neighbors=8))\nknn_model.fit(x_train,y_train)\nknn_pred=knn_model.predict(x_test)\nprint(knn_pred)\nacc_knn=accuracy_score(knn_pred,y_test)\nprint(\"Accuracy\",acc_knn)\nresult_knn = cross_val_score(knn_model,feature, target, cv=10, scoring=\"accuracy\" )\nprint(\"Cross val Score \", result_knn.mean())","843303be":"models=pd.DataFrame({ 'model':['Logistic','Random forest','SVM','KNN'],\n                    'Accuracy':[acc_log,acc_rf,acc_svc,acc_knn],\n                    'Cross_Val_Score':[result_log.mean(),result_rf.mean(),result_svc.mean(),result_knn.mean()]})\nmodels","ce452579":"models.sort_values(by='Accuracy',ascending=True)","f5683c0f":"models.sort_values(by='Cross_Val_Score',ascending=True)","822c29dc":"test.head()","cb8c0fc7":"x_test=test.drop('PassengerId',axis=1)\nx_test.head()","909aee7b":"sub_data=pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\nsub_data.head()","e63ce9d0":"y_test=sub_data.iloc[:,1]\ny_test","b0455848":"pred_sub=svc_model.predict(x_test)\nprint(pred_sub)\nacc_sub=accuracy_score(y_test, pred_sub)\nprint('Accuracy= ', acc_sub)\n","db9f5a29":"df = pd.DataFrame()\ndf['PassengerId'] = test['PassengerId']\ndf['Survived'] = pred_sub\ndf.to_csv('\/kaggle\/working\/titanic_final2.csv', index=False)\npd.set_option('display.max_rows', 500)\nresults = pd.read_csv('\/kaggle\/working\/titanic_final2.csv')\n#results","8daca169":"results","15ff8c24":"***I also check about Age, so that i conclude which age group survive.\nAnd according to my thinking  most of the young people survive***","fda5effb":"***As you can clearly see, a person has better a chance of surviving if he\/she is not alone. This might prove to be a very good feature in prediction***","53e1bca1":"# **K NEIGHBORS CLASSIFIER**","30905e98":"# **SUPPORT VECTOR MACHINE**","16fb7ecf":"# **TABLE**","dad27c4e":"# **LOGISTIC REGRESSION**","7b3c788a":"***Basically, the columns SibSp and Parch tell us whether the corresponding person was accompanied by anyone or not. So we will create a new column Is_alone which will tell us whether the person was accompanied (1) or not (0).***","fd7f7457":"# **RANDOM FOREST CLASSIFIER**","5c851f65":"***SUBMISSION***","7c8cc4cf":"**So, SVM is best.**","3a758f85":"***There are many null values in Cabin column also data type is critical so, i decided to drop it.***"}}