{"cell_type":{"5ea49c17":"code","b313a345":"code","3e53c030":"code","da60d163":"code","df2e679d":"code","9b3204de":"code","69699ad5":"code","44a9d8b4":"code","6f6afb96":"code","ffae2cab":"code","12612ff6":"code","306fb7fa":"code","beade616":"code","23bcc9c2":"code","d4065e7f":"code","bf962e14":"code","cf7f066e":"markdown"},"source":{"5ea49c17":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b313a345":"import matplotlib.pyplot as plt\nfrom tensorflow import keras","3e53c030":"X_train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\nX_test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nprint(X_train.head())","da60d163":"y_train = X_train.pop('label')\nprint(type(y_train))","df2e679d":"X_train = (X_train\/255).to_numpy()\nX_test = (X_test\/255).to_numpy()\ny_train = y_train.to_numpy()","9b3204de":"print(type(X_train))","69699ad5":"print(X_train[0].shape)\nX_trainExample = X_train[0].reshape(28,28)\nprint(X_trainExample.shape)","44a9d8b4":"plt.figure()\nplt.imshow(X_trainExample,cmap=plt.cm.binary)\nplt.show()","6f6afb96":"X_train = keras.utils.normalize(X_train, axis=1)\nX_test = keras.utils.normalize(X_test, axis=1)\nprint(X_train)","ffae2cab":"print(y_train)","12612ff6":"import tensorflow as tf","306fb7fa":"model = keras.models.Sequential()\nmodel.add(keras.layers.Dense(512, activation=tf.nn.relu))\nmodel.add(keras.layers.Dropout(0.3))\nmodel.add(keras.layers.Dense(256, activation=tf.nn.relu))\nmodel.add(keras.layers.Dropout(0.3))\nmodel.add(keras.layers.Dense(128, activation=tf.nn.relu))\nmodel.add(keras.layers.Dense(10, activation=tf.nn.softmax))\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])","beade616":"early_stopping = keras.callbacks.EarlyStopping()\nmodel.fit(X_train, y_train, epochs=5, callbacks=[early_stopping])\npred = model.predict(X_test)","23bcc9c2":"print(np.argmax(pred[4]))\nX_test0 = X_test[4].reshape(28,28)\nplt.imshow(X_test0)\nplt.show()\nprint(pred.shape)","d4065e7f":"print(np.argmax(pred, axis=1))","bf962e14":"subm = pd.DataFrame({'ImageId': np.arange(1, 28001), 'Label':np.argmax(pred, axis=1)})\nsubm.to_csv('submission.csv',index=False)\nprint(subm)","cf7f066e":"**Normalizing**"}}