{"cell_type":{"0f81b224":"code","38da8f2b":"code","d5d324cf":"code","e6df2226":"code","6e21885d":"code","5fdabec9":"code","f118a7a1":"code","4bbf5e0e":"code","b0abb0b3":"code","030f735e":"code","287c4e1f":"code","883032c7":"markdown","ed21410d":"markdown","881028f2":"markdown","d0bc310a":"markdown","fa2777b4":"markdown","3d12dfe0":"markdown","166916da":"markdown","5f2c36d9":"markdown","73e8ae5a":"markdown","2ea9c015":"markdown","53f6e029":"markdown","a760ba98":"markdown","f7570743":"markdown","4868acc3":"markdown"},"source":{"0f81b224":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport seaborn as sb\n\ninformationsTitanic = pd.read_csv('..\/input\/titanic\/train.csv', header = 0, sep = ',')\n#print(type(informationsTitanic))\n#full_data = [informationsTitanic, test]\ninformationsTitanic.info(verbose=False)\ninformationsTitanic.head(n=30)\n\nprint('Voici les informations relatives \u00e0 notre fichier csv : \\n\\n')\nprint (informationsTitanic.info())\nprint('\\n\\nVoici quelques donn\u00e9es pr\u00e9sentes dans le fichier csv :\\n\\n')\nprint (informationsTitanic)\nsb.heatmap(informationsTitanic.isnull(), yticklabels=False, cmap='viridis')","38da8f2b":"#ajout d'une colonne NewSex qui contient 1 pour Male et O pour Female #################################\n\ndictarget = {'female': 0, 'male': 1}\ninformationsTitanic['Sex'] = informationsTitanic['Sex'].map(dictarget)\n#print (informationsTitanic['New_Sex'])\nprint (informationsTitanic['Sex'])\n    \n#######################################################################################################\n\n#ajout d'une colonne New_Age ##########################################################################\n\ninformationsTitanic['New_Age'] = informationsTitanic['Age']\n    #print (informationsTitanic)\n    \n#######################################################################################################\n\n#calcul de la moyenne sans prendre en compte les NaN ##################################################\n\nmatrice_age_calcul_mean = informationsTitanic['New_Age']\n\nadd = 0\npassage_if = 0\npassage_else = 0\nnoValue = \"NaN\"\n    \nfor compteur in range (len(matrice_age_calcul_mean)):\n    if(float(matrice_age_calcul_mean[compteur]) > 0 and float(matrice_age_calcul_mean[compteur]) < 200 ):\n        passage_if = passage_if + 1\n        add = add + matrice_age_calcul_mean[compteur]\n    else:\n        matrice_age_calcul_mean[compteur] = 0\n        add = add + matrice_age_calcul_mean[compteur]\n        passage_else = passage_else + 1\n        \n#print (matrice_age_calcul_mean)\n#print (compteur)\n#print (add)\n#print (passage_if)\n#print (passage_else)\n\nmean_matrice_age = (add)\/(passage_if)\nprint('This is the mean of the age : ' + str(mean_matrice_age))\n\n#######################################################################################################\n\n#modifier les NaN par la moyenne calcul\u00e9e pr\u00e9cedemment ################################################\n\ncompteur2 = 0\n#print(informationsTitanic['Age'])\nmatrice_age_sans_NaN = informationsTitanic['Age']\n\nfor compteur2 in range (len(matrice_age_sans_NaN)):\n    if(float(matrice_age_sans_NaN[compteur2]) > 0 and float(matrice_age_sans_NaN[compteur2]) < 200 ):\n        print('\\n')\n    else:\n        matrice_age_sans_NaN[compteur2] = round (mean_matrice_age, 2)\n\n#######################################################################################################\n\nprint (mean_matrice_age)\nprint (round (mean_matrice_age, 2))\n\n#print (informationsTitanic['Age'])\n#print (matrice_age_sans_NaN)\n\n#comparaison du nombre de non null valeur dans Age\n#print (informationsTitanic.info())\n#print (informationsTitanic)\nprint (informationsTitanic['Age'])\nprint (informationsTitanic['New_Age'])\nsb.heatmap(informationsTitanic.isnull(), yticklabels=False, cmap='viridis')","d5d324cf":"import seaborn as sb\nimport time as time\n\nprint (\"Faites votre choix : \\n Pour le graphe 'Survivant', tapez 1\\n Pour le graphe 'Sex', tapez 2\\n Pour le graphe 'Class', tapez 3\\ Pour quitter, tapez 0\")\n#choix = input()\n#choix_numero = int(choix)\n\nwhile True:\n    choix = int(input())\n    if choix == 1:\n        print(\"choix 1\")\n        time.sleep(10)\n        sb.countplot(x='Survived' , data=informationsTitanic)\n    elif choix == 2:\n        print(\"choix 2\")\n        sb.countplot(x='Survived' , hue='Sex' , data=informationsTitanic)\n    elif (choix < 0 and choix > 3):\n        print(\"Choix non valide\")\n    else:\n        break\nprint(\"Sortie de boucle\")","e6df2226":"import seaborn as sb\nimport time as time\n\nprint (\"Faites votre choix : \\n Pour le graphe 'Survivant', tapez 1\\n Pour le graphe 'Sex', tapez 2\\n Pour le graphe 'Class', tapez 3\\ Pour quitter, tapez 0\")\n#choix = input()\n#choix_numero = int(choix)\nchoix = int(input())\nif choix == 1:\n    print(\"choix 1\")\n    sb.countplot(x='Survived' , data=informationsTitanic)\nif choix == 2:\n    print(\"choix 2\")\n    sb.countplot(x='Survived' , hue='Sex' , data=informationsTitanic)\nif choix == 3:\n    print(\"choix 3\")\n    sb.countplot(x='Survived' , hue='Pclass' , data=informationsTitanic)\nif (choix < 0 and choix > 3):\n    print(\"Choix non valide\")","6e21885d":"print (informationsTitanic[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean())","5fdabec9":"print (informationsTitanic[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean())","f118a7a1":"for dataset in full_data:\n    dataset['IsAlone'] = 0\n    dataset.loc[ dataset['SibSp'] + dataset['Parch'] + 1 == 1, 'IsAlone'] = 1\nprint (train[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean())","4bbf5e0e":"for dataset in full_data:\n    age_avg \t   = dataset['Age'].mean()\n    age_std \t   = dataset['Age'].std()\n    age_null_count = dataset['Age'].isnull().sum()\n    \n    age_null_random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null_count)\n    dataset['Age'][np.isnan(dataset['Age'])] = age_null_random_list\n    dataset['Age'] = dataset['Age'].astype(int)\n    ","b0abb0b3":"for dataset in full_data:\n    # Mapping Sex\n    dataset['Sex'] = dataset['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\n    \n    # Mapping Age\n    dataset.loc[ dataset['Age'] <= 2, 'Age'] \t\t\t\t\t       = 0\n    dataset.loc[(dataset['Age'] >  2) & (dataset['Age'] <=  8), 'Age'] = 1\n    dataset.loc[(dataset['Age'] >  8) & (dataset['Age'] <= 16), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 3\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 4\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 5\n    dataset.loc[ dataset['Age'] > 64, 'Age']                           = 6\n\n# Feature Selection\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Fare', 'Cabin', 'SibSp',\\\n                 'Parch', 'Embarked']\ntrain = train.drop(drop_elements, axis = 1)\ntest  = test.drop(drop_elements, axis = 1)\n\nprint (train.head(10))\n\ntrain = train.values\ntest  = test.values\n\n","030f735e":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nclassifiers = [\n    KNeighborsClassifier(5),\n    SVC(probability=True),\n    DecisionTreeClassifier(),\n    LogisticRegression()]\n\nlog_cols = [\"Classifier\", \"Accuracy\"]\nlog \t = pd.DataFrame(columns=log_cols)\n\nsss = StratifiedShuffleSplit(n_splits=10, test_size=0.1, random_state=0)\n\nX = train[0::, 1::]\ny = train[0::, 0]\n\nacc_dict = {}\n\nfor train_index, test_index in sss.split(X, y):\n\tX_train, X_test = X[train_index], X[test_index]\n\ty_train, y_test = y[train_index], y[test_index]\n\t\n\tfor clf in classifiers:\n\t\tname = clf.__class__.__name__\n\t\tclf.fit(X_train, y_train)\n\t\ttrain_predictions = clf.predict(X_test)\n\t\tacc = accuracy_score(y_test, train_predictions)\n\t\tif name in acc_dict:\n\t\t\tacc_dict[name] += acc\n\t\telse:\n\t\t\tacc_dict[name] = acc\n\nfor clf in acc_dict:\n\tacc_dict[clf] = acc_dict[clf] \/ 10.0\n\tlog_entry = pd.DataFrame([[clf, acc_dict[clf]]], columns=log_cols)\n\tlog = log.append(log_entry)\n\nplt.xlabel('Accuracy')\nplt.title('Classifier Accuracy')\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x='Accuracy', y='Classifier', data=log, color=\"b\")","287c4e1f":"candidate_classifier = SVC()\ncandidate_classifier.fit(train[0::, 1::], train[0::, 0])\nresult = candidate_classifier.predict(test)\n","883032c7":"# Data Mapping #\n","ed21410d":"## 2. Sex ##","881028f2":"## 3. SibSp and Parch ##\nWith the number of siblings\/spouse and the number of children\/parents we can create new feature called Family Size.","d0bc310a":"good! now we have a clean dataset and ready to predict. let's find which classifier works better on this dataset. ","fa2777b4":"## Introduction ##\n\nNous allons d\u00e9j\u00e0 voir les donn\u00e9es pr\u00e9sentes dans le fichier .csv que nous avons choisi","3d12dfe0":"## 1. Pclass ##\n","166916da":"## 1. Modification de colonnes ##","5f2c36d9":"## 4. Age ##\nwe have plenty of missing values in this feature. # generate random numbers between (mean - std) and (mean + std).\nthen we categorize age into 5 range.","73e8ae5a":"# Prediction #\nnow we can use SVC classifier to predict our data.","2ea9c015":" so we have titles. let's categorize it and check the title impact on survival rate.","53f6e029":"# Corr\u00e9lation et moyenne#","a760ba98":"# Classifier Comparison #","f7570743":"good! the impact is considerable.","4868acc3":"# Am\u00e9lioration du fichier csv #"}}