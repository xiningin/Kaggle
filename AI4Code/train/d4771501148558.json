{"cell_type":{"61f95efc":"code","0d9c4204":"code","37b4a85a":"code","11d45838":"code","a16f5c6a":"code","9d3a2975":"code","f44c29eb":"markdown","be9b17c6":"markdown"},"source":{"61f95efc":"import os\nprint(os.listdir(\"..\/input\"))","0d9c4204":"import pandas as pd\nimport numpy as np\nimport warnings\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score\nimport time\nimport catboost as cb\nimport lightgbm as lgb\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\ntraindata = pd.read_csv('..\/input\/train.csv')\ntestdata = pd.read_csv('..\/input\/test.csv')\nsubmission =  pd.read_csv('..\/input\/sample_submission.csv')","37b4a85a":"X_train = traindata.iloc[:, :-1].values\ny_train = traindata.iloc[:, 14].values\nX_test = testdata.iloc[:, :].values","11d45838":"start_time = time.time()\nwarnings.filterwarnings('ignore')\nclassifier = cb.CatBoostClassifier( task_type = 'GPU',silent=True , cat_features=[2,6,7,9,11,12,13 ], one_hot_max_size=2,loss_function='Logloss',eval_metric='AUC',boosting_type='Ordered', random_seed=25)\nclassifier.fit(X_train , y_train)\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\nprint ( accuracies.mean() *100)\nprint ( accuracies*100 )\nprint ( 'Variance:' , accuracies.std()*100 )\nend_time = time.time()\nprint(\"The Execution Time  is %s seconds\" % (end_time - start_time))","a16f5c6a":"y_pred = classifier.predict(X_test).astype(int)\nsubmission['class']=y_pred\nsubmission.to_csv('Sub_catg_5.csv' , index = False)","9d3a2975":"start_time = time.time()\nwarnings.filterwarnings('ignore')\nclassifier = lgb.LGBMClassifier(silent=False,min_data_in_leaf=2000, subsample_for_bin=400000,n_estimators=300, categorical_feature = [2,6,7,9,11,12,13 ] ,random_state=None)\nclassifier.fit(X_train , y_train)\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10 )\nprint ( accuracies.mean()*100 )\nprint ( accuracies*100 )\nprint ( 'Variance:' , accuracies.std()*100 )\nend_time = time.time()\nprint(\"The Execution Time  is %s seconds\" % (end_time - start_time))","f44c29eb":"# Method 2 - LightGBM with Tuned Hyper Parameters","be9b17c6":"# Method 1 - CatBoost with Tuned Hyper Parameters"}}