{"cell_type":{"d9d0c715":"code","92847e8f":"code","34865ca9":"code","65357c06":"code","9268e408":"code","3cd03065":"code","c56f3e02":"code","9bcfda31":"code","cd31f23b":"code","4dc7ba4f":"code","ad618026":"code","19731ab0":"code","d6cdb3c1":"code","014d3dd8":"code","91120116":"code","2d43f4c1":"code","927f4292":"code","b8f5291b":"code","edb26563":"code","8cd84b2d":"code","9f0a1f99":"code","20c486fb":"code","477e8c8d":"code","d9712f61":"code","4633c450":"code","7c1f05aa":"code","99ebcb7c":"code","0db2eaac":"markdown","3260439b":"markdown","6fe45ea5":"markdown","898d72e1":"markdown","790ad3fc":"markdown","fd0e1d4e":"markdown","ed2d2e6f":"markdown","c8408d41":"markdown","d769269e":"markdown","eead05d8":"markdown"},"source":{"d9d0c715":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport keras\nfrom matplotlib.patches import Arc\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD, Adam, Adadelta, RMSprop\nimport keras.backend as K\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import classification_report\n\nimport warnings\n\n\n\npd.set_option('display.max_columns', 100)\npd.set_option('display.max_rows', 100)","92847e8f":"df = pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')\ndf.head()","34865ca9":"df.info()","65357c06":"df.describe().T","9268e408":"df.columns[df.isnull().any()]","3cd03065":"df.isnull().sum()","c56f3e02":"# As you can see, 48 is repeating many times. For dropping these rows we need to firstly check they are in same row or not\ndf_nan = df.isnull().sum()\ndict_nan = dict()\n\nfor index, value in df_nan.items():\n    dict_nan[index] = df[df[index].isnull()].index.tolist()\n\ntest_list = df[df[\"Crossing\"].isnull()].index.tolist()\n\nres = {idx : sum(1 for i in j if i in test_list) \n                for idx, j in dict_nan.items()} \n\ndf.drop(df.index[test_list],inplace =True)\n\n# Filling \"No Club\" text for players who are not part of any club.\ndf['Club'].fillna(value='No Club', inplace=True)","9bcfda31":"# Converting string Value and Wage columns to integer\ndef string_to_int(string):\n    if string[-1].isdigit():\n        return int(string)\n    mult = m[string[-1]]\n    return int(float(string[:-1]) * mult)\n\nm = {'K':1000, 'M':1000000, 'B':1000000000}\n\ndf.drop(['Unnamed: 0','Photo','Flag','Club Logo'],axis=1,inplace=True)\ndf = df[df['Position'].notna()]\n\nfor element in [\"Value\", \"Wage\"]:\n    df[element] = df[element].str.replace('\u20ac', '')\n    df[element] = df[element].apply(lambda x: string_to_int(x))","cd31f23b":"# Getting correlation map from some columns in order to understand relations\nselectedData = df[['Age','Overall','Potential',\"Aggression\" ,'Acceleration','SprintSpeed',\"BallControl\" ,\"Agility\",\"Stamina\",'Strength']]\nsns.pairplot(selectedData)","4dc7ba4f":"# Showing best 15 countries with the most players\nplayersNationality = df['Nationality'].value_counts()\nplayersNationality = playersNationality.nlargest(15)\n\nplt.figure(figsize=(12,8))\nax = sns.barplot(x = playersNationality.values, y = playersNationality.index, data=df, palette = \"rocket\", orient = 'h')\nax.set_xlabel(xlabel=\"Number of players\", fontsize=13)\nax.set_ylabel(ylabel='Nationality', fontsize=13)\nax.set_title(label='Number of players with their nationality', fontsize=17)\nplt.show()","ad618026":"# Relation between Age and \nplt.figure(figsize=(12,8))\nax = sns.distplot(df.Age, kde=True, bins = 60, color = \"r\")\nax.set_xlabel(xlabel=\"Age\", fontsize=13)\nax.set_ylabel(ylabel='Number of players', fontsize=13)\nax.set_title(label='Histogram of players age', fontsize=17)\nplt.show()","19731ab0":"fig, ax = plt.subplots(1,2,figsize=(12,8))\nplt.subplots_adjust(left  = 0.125, right = 1.4, bottom = 0.1, top = 0.9, wspace = 0.2, hspace = 0.2)\nsns.scatterplot(x = df[\"Overall\"], y = df[\"Value\"], color = 'r', ax=ax[0])\nsns.scatterplot(x = df[\"Overall\"], y = df[\"Wage\"], color = 'r', ax=ax[1])\nfig.show()","d6cdb3c1":"plt.figure(figsize=(12,8))\nax = sns.countplot(x = 'Position', data = df, palette = 'rocket')\nax.set_xlabel(xlabel=\"Position\", fontsize=13)\nax.set_ylabel(ylabel='Number of players', fontsize=13)\nax.set_title(label='Number of players on the position', fontsize=17)\nplt.show()","014d3dd8":"plt.figure(figsize=(12,8))\nax = sns.jointplot(x = df['Age'], y = df['Potential'], kind = \"kde\", color = \"r\")\nplt.show()\n\n# Potential tends to fall as you grow old","91120116":"# Left Footed Players vs Right Footed Players\nsns.lmplot(x = 'BallControl', y = 'Dribbling', data = df, col = 'Preferred Foot', line_kws={'color':'red'} ,scatter_kws = {'alpha':0.2})","2d43f4c1":"playerPositions = {\n    'ST': (115, 45),\n    'CF': (120,45),\n    'GK': (9,45), \n    'LF': (115,55),\n    'RF': (115, 35), \n    'CAM': (100,45), \n    'LAM': (100,60), \n    'RAM': (100,30), \n    'CB': (25,45), \n    'LCB': (25,60), \n    'RCB': (25,30), \n    'LB': (25,82), \n    'RB': (25,8), \n    'LWB': (50,82), \n    'RWB': (50,8), \n    'CDM': (50,45), \n    'CM': (70,45), \n    'LM': (70,82), \n    'RM': (70,8), \n    'LW': (100,82), \n    'RW': (100,8), \n    'LCM': (70,60), \n    'RCM': (70,30), \n    'LS': (110,60), \n    'RS': (110,30), \n    'LDM': (50,60), \n    'RDM': (50,30)\n}\n\n#Preparing data\nplayerPositionIndexsList = list()\nfor index, row in df.iterrows():\n    playerPositionIndexsList.append([playerPositions[row[\"Position\"]][0], playerPositions[row[\"Position\"]][1],row[\"Position\"]])\ndf_players_loc = pd.DataFrame(playerPositionIndexsList, columns=['x', 'y', \"pos\"])\n\n#Create figure\nfig=plt.figure()\nfig.set_size_inches(12, 8)\nax=fig.add_subplot(1,1,1)\n\n\n#Pitch Outline & Centre Line\nplt.plot([0,0],[0,90], color=\"black\")\nplt.plot([0,130],[90,90], color=\"black\")\nplt.plot([130,130],[90,0], color=\"black\")\nplt.plot([130,0],[0,0], color=\"black\")\nplt.plot([65,65],[0,90], color=\"black\")\n\n#Left Penalty Area\nplt.plot([16.5,16.5],[65,25],color=\"black\")\nplt.plot([0,16.5],[65,65],color=\"black\")\nplt.plot([16.5,0],[25,25],color=\"black\")\n\n#Right Penalty Area\nplt.plot([130,113.5],[65,65],color=\"black\")\nplt.plot([113.5,113.5],[65,25],color=\"black\")\nplt.plot([113.5,130],[25,25],color=\"black\")\n\n#Left 6-yard Box\nplt.plot([0,5.5],[54,54],color=\"black\")\nplt.plot([5.5,5.5],[54,36],color=\"black\")\nplt.plot([5.5,0.5],[36,36],color=\"black\")\n\n#Right 6-yard Box\nplt.plot([130,124.5],[54,54],color=\"black\")\nplt.plot([124.5,124.5],[54,36],color=\"black\")\nplt.plot([124.5,130],[36,36],color=\"black\")\n\n#Prepare Circles\ncentreCircle = plt.Circle((65,45),9.15,color=\"black\",fill=False)\ncentreSpot = plt.Circle((65,45),0.8,color=\"black\")\n\n#Draw Circles\nax.add_patch(centreCircle)\nax.add_patch(centreSpot)\n\n#Prepare Arcs\nleftArc = Arc((11,45),height=18.3,width=18.3,angle=0,theta1=310,theta2=50,color=\"black\")\nrightArc = Arc((119,45),height=18.3,width=18.3,angle=0,theta1=130,theta2=230,color=\"black\")\n\n#Draw Arcs\nax.add_patch(leftArc)\nax.add_patch(rightArc)\n\n#Tidy Axes\nplt.axis('off')\n\nfor key,value in playerPositions.items():\n    ax.annotate(key, (value[0], value[1]))\n\nsns.kdeplot(df_players_loc[\"x\"],df_players_loc[\"y\"], shade=True, bw = 10,n_levels=50)\n\nplt.ylim(0, 90)\nplt.xlim(0, 130)\n\n\n#Display Pitch\nplt.show()\n\n# Heatmap of the players' position in the field","927f4292":"df_model = df[[\"Overall\", 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling',\n                   'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n                   'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n                   'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n                   'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n                   'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n                   'GKKicking', 'GKPositioning', 'GKReflexes']]","b8f5291b":"x = df_model.drop(\"Overall\", axis = 1)\ny = df_model[\"Overall\"]\n\nss = StandardScaler()\n\nx = pd.DataFrame(ss.fit_transform(x))\n\nx.head()","edb26563":"x.shape","8cd84b2d":"x_train, x_test, y_train, y_test = train_test_split(x.values, y,\n                                                    test_size=0.2)","9f0a1f99":"K.clear_session()\n\nmodel = Sequential()\nmodel.add(Dense(8, activation='relu', input_shape=(33,)))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1))\n\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics = [\"mse\", \"mae\", \"mape\", \"accuracy\"])\nmodel.summary()","20c486fb":"history = model.fit(x_train, y_train, epochs=30, callbacks=[keras.callbacks.EarlyStopping(patience=3)])","477e8c8d":"model.predict(x_test[4].reshape(1,33), batch_size=1)","d9712f61":"predictions = model.predict(x_test)","4633c450":"predictions","7c1f05aa":"# showing barchart for getting information about difference between actual and predicted data\ndf_difference = pd.DataFrame({'Actual': np.array(y_test[:10]).flatten(), 'Predicted': predictions[:10].flatten()})\ndf_difference.plot(kind='bar',figsize=(12,8))\nplt.show()","99ebcb7c":"plt.figure(figsize=(12,8))\nplt.plot(history.history['mse'], label=\"Mean squared error\")\nplt.legend(loc=\"upper right\")\nplt.show()","0db2eaac":"<a id=\"2\"><\/a>\n# Basic Data Analysis\nIn this section we will do a quick look through the data.","3260439b":"# **FIFA 19 Player Data Analysis and Modelling**\n\n### In this kernel I will use FIFA 19 dataset to show you different aspects about players' ratings, values and ability. At the end of the kernel I will try to use Neural Network for predicting players' overall rating with some of abilities. If you have any suggest, advice or correction please don't hesitate to write it.\n\n    \n<center><img src=\"https:\/\/compass-ssl.xbox.com\/assets\/09\/a8\/09a80760-7c99-401b-ab49-3c7a2274f891.jpg?n=FIFA-19_Gallery-0_1350x759_03.jpg\"><\/center>","6fe45ea5":"<a id=\"5\"><\/a>\n# Modelling","898d72e1":"The project is for people who love data science and have grown up playing football and are FIFA enthusiasts. The data is scraped from the website https:\/\/sofifa.com by extracting the Player personal data, followed by Player IDs and their playing and style statistics.\n\nInsights and correlations between player value, wage, age, special attributes, and performance can be derived from the dataset. This uninterpreted data can be converted into information by analysing it. We have derived summary statistics for teams, clubs, & players. Through extensive football experience: the insights provided in our results, alongwith understanding, and contextualized information enables users to act smartly when playing FIFA, picking a better team for say Fantasy Premier league, or increase their betting odds.","790ad3fc":"**Thank You!** If you have any suggestion or advice or feedback, I will be very appreciated to hear them.","fd0e1d4e":"# Table of contents:\n\n* [1. Import libraries](#1)\n* [2. Basic Data Analysis](#2)\n* [3. Data cleaning](#3)\n* [4. Data Analysis and Visualization](#4)\n* [5. Modeling](#5)\n","ed2d2e6f":"<a id=\"1\"><\/a>\n# Import libraries","c8408d41":"# Introduction","d769269e":"<a id=\"3\"><\/a>\n# Data cleaning","eead05d8":"<a id=\"4\"><\/a>\n# Data Analysis and Visualization"}}