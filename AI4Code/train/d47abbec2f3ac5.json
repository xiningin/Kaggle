{"cell_type":{"6d46068d":"code","5a1554cf":"code","6637d172":"code","52b168bb":"code","fb141c38":"code","3c1fa466":"code","c98776a2":"code","a96e70de":"code","2b6c2466":"code","386e3af8":"code","43df1c55":"code","9662b519":"code","2c263249":"code","91eb17af":"code","e9b66587":"code","4ff80e4e":"code","ccd47a9e":"code","be03286d":"code","8c4290e6":"code","c1da03b0":"code","9fc03e92":"code","92ab84c2":"markdown","6d4b247e":"markdown","bf554295":"markdown","c813de1d":"markdown","5ac1cc83":"markdown","a8914e95":"markdown","ded8e443":"markdown","4e26e060":"markdown","cf9bc84f":"markdown","9bd70084":"markdown","da10b580":"markdown","bce2a459":"markdown","d4fc147f":"markdown","879c5fc0":"markdown","42a2082e":"markdown","741c1c74":"markdown"},"source":{"6d46068d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5a1554cf":"df=pd.read_csv('\/kaggle\/input\/obesity-among-adults-by-country-19752016\/data.csv')","6637d172":"df.head()","52b168bb":"df.shape","fb141c38":"df.iloc[0,1]","3c1fa466":"df.columns","c98776a2":"df.drop([0,1,2],inplace=True)\ndf.head()","a96e70de":"df.reset_index(drop=True,inplace=True)","2b6c2466":"df.head()","386e3af8":"df.rename(columns={'Unnamed: 0': 'Country'}, inplace=True)","43df1c55":"df.head()","9662b519":"ndf = df.melt('Country', var_name='Year', value_name='Obesity (%)')\nndf[['Year', 'Sex']] = ndf['Year'].str.split('.', expand=True)","2c263249":"ndf.head(10)","91eb17af":"ndf=ndf.sort_values(by=['Country','Year'])","e9b66587":"ndf=ndf.reset_index(drop=True)","4ff80e4e":"ndf.head()","ccd47a9e":"ndf['Sex']=ndf['Sex'].map({None: 'Both sexes', '1': 'Male', '2':'Female'})","be03286d":"ndf['Age standardized estimate']=ndf['Obesity (%)'].apply(lambda x:x.split()[1])","8c4290e6":"ndf['Obesity (%)']=ndf['Obesity (%)'].apply(lambda x:x.split()[0])","c1da03b0":"ndf.head()","9fc03e92":"ndf.to_csv('\/kaggle\/working\/obesity-clean-split.csv')","92ab84c2":"As we can see, the titles which have **.1** and **.2** as suffix are **'Male'** and **'Female'** respectively and the other one with only the year (e.g., 2016) is overall obesity for both sexes.\n\nAlso, reset the indices:","6d4b247e":"Let's drop the unnecessary top 3 rows","bf554295":"Here comes the important part.\n\nWhat I personally want to do right here is have 4 columns, namely, **Country, Year, Obesity (%) and Sex** for easier Exploratory Data Analysis and Visualizations.\n\nI used `df.melt()` for the same. It essentially \"unpivots\" the data from a wide format to a long format.\n\nDocumentation for the same can be viewed [here](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.melt.html)","c813de1d":"![](https:\/\/ichef.bbci.co.uk\/news\/660\/cpsprodpb\/143A0\/production\/_112184828_gettyimages-939290830.jpg)\n\nObesity is a medical condition in which excess body fat has accumulated to an extent that it may have a negative effect on health. People are generally considered obese when their body mass index (BMI), a measurement obtained by dividing a person's weight by the square of the person's height, is over 30 ; the range 25\u201330  is defined as overweight. Obesity increases the likelihood of various diseases and conditions, particularly cardiovascular diseases, type 2 diabetes, obstructive sleep apnea, certain types of cancer, osteoarthritis, and depression.\n\nHere we look at the WHO adults' obesity dataset for each country from 1975 to 2016.\n\nThe metric used is percentage of adults who have Body Mass Index (BMI) >= 30.\n\n### **Update**:\n\nThanks to [Ran.Krish](https:\/\/www.kaggle.com\/rankirsh) and [AndrewHou](https:\/\/www.kaggle.com\/andrewhou) for the explanation about the estimate range within brackets in the data.\n\nI'll quote them here\n\n> It is probably a confidance interval, ill try to explain.\nResearchers can't know exactly what is the obesity rate so they compute a confidance interval (usually 95%), it means that we are 95% confident that the obesity rate in every sample (of the same size) in this specific country will be between 0.2 and 1.1\n\n> Thanks ,you did a great explaining.\nLet me just add this for people without Statistical backgrounds.\nResearchers aren't able to ask every person to compute the exact number of Obesity %, it would cost a lot of money.\nso they just use sampling methods, for example, ask 10% people of every cities ( saturated sampling).\n0.5 is the point estimation.\n0.2~1.1 is the interval estimation, which means researchers are 95% or so confident that the REAL obesity% is between 0.2~1.1","5ac1cc83":"Resetting the indices:","a8914e95":"As we can see we need to change the 3 distinct values in **'Sex'** column.\n\nWe do this as follows:","ded8e443":"Let us see what the data from the downloaded csv file looks like:","4e26e060":"One of the headers is not clearly visible, let's print it","cf9bc84f":"What are the column titles?","9bd70084":"Now we sort our dataset by **Country** and by **Year**","da10b580":"**Loading the data**","bce2a459":"Let's split the obesity data to create another column which has the age-standardized estimate","d4fc147f":"Voila! We fixed the downloaded dataset as we wanted.\n\nLet us save the output .csv file.","879c5fc0":"Set the first column title to be **Country**","42a2082e":"Check the dimensions of the dataframe df","741c1c74":"`drop=True` is used to delete the 'index' column which is created if we do `df.reset_index()` without `drop=True`"}}