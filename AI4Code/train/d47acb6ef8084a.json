{"cell_type":{"9048ee16":"code","d832804a":"code","13996826":"code","69b41ff3":"code","8a5ad5c0":"code","5e1023c7":"code","af1657f5":"code","4cb9a51d":"code","a5455795":"code","61e79261":"code","fa17af1c":"code","dd8b98c6":"code","e0902d5b":"code","fdbb4d04":"code","c7082b29":"code","f69b54a7":"code","ee2f25f5":"code","be055e43":"code","62eed053":"code","4e424734":"code","1998dc23":"code","63cc9bb6":"code","2384632e":"code","ab129c56":"code","debdfe4f":"code","020e387b":"code","b3eceb77":"code","3420f623":"code","b15f34c8":"code","1747873d":"code","3b6e03df":"code","04279308":"code","409010d6":"code","97edfa8d":"code","b645392c":"code","f28f97e5":"code","7495fb04":"code","4340fcb1":"markdown","b885395e":"markdown","1957401f":"markdown","4551616d":"markdown","c55f007f":"markdown","82ad82ee":"markdown","84505b97":"markdown","d5554cc9":"markdown","774b8455":"markdown"},"source":{"9048ee16":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\nimport pylab \nimport scipy.stats as stats\nfrom sklearn.preprocessing import MinMaxScaler","d832804a":"data_path = \"..\/input\/titanic\/train.csv\"\ndf = pd.read_csv(data_path)\n\n\ntest_data_path = \"..\/input\/titanic\/test.csv\"\ndf_test = pd.read_csv(test_data_path)\ndf_test.head()\ntest_passenger_id = df_test['PassengerId'].values\n\ndf.head()","13996826":"print(f\"Data frame shape: {df.shape}\")\ndf.isnull().sum()","69b41ff3":"df_test.isnull().sum()","8a5ad5c0":"print(f\"Percentage of data missing for Age: {177\/891*100}\")","5e1023c7":"print('Oldest Passenger was of:', df.Age.max(), 'Years')\nprint('Youngest Passenger was of:', df.Age.min(), 'Years')\nprint(\"Average Age of the Passengers in ship:\" + \"{:.2f}\".format(df.Age.mean()), 'Years')","af1657f5":"sns.distplot(df['Age'])","4cb9a51d":"df['AgeMissing'] = 0\ndf.loc[df['Age'].isnull(), 'AgeMissing'] = 1\ndf['Age'].fillna(0, inplace=True)\n\ndf_test['AgeMissing'] = 0\ndf_test.loc[df_test['Age'].isnull(), 'AgeMissing'] = 1\ndf_test['Age'].fillna(0, inplace=True)","a5455795":"df['isChild'] = 0\ndf.loc[df['Age'] <=10, 'isChild'] = 1\n\ndf_test['isChild'] = 0\ndf_test.loc[df_test['Age'] <= 10, 'isChild'] = 1","61e79261":"df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)","fa17af1c":"# Fill NaN value for fare in test data \n\ndf_test['Fare'].fillna(df_test['Fare'].mean(), inplace=True)","dd8b98c6":"df['Initial']=0\nfor i in df:\n    df['Initial']=df.Name.str.extract('([A-Za-z]+)\\.')\n\ndf['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                      ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Mrs','Mr','Mr','Mr','Mr','Mr', 'Mr'],\n                      inplace=True)\n\ndf_test['Initial']=0\nfor i in df_test:\n    df_test['Initial']=df_test.Name.str.extract('([A-Za-z]+)\\.')\n\ndf_test['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                      ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Mrs','Mr','Mr','Mr','Mr','Mr', 'Mr'],\n                      inplace=True)\n\ndf.groupby('Initial')['Age'].mean().reset_index(name ='Mean')","e0902d5b":"df['Family_Size'] = 0\ndf['Family_Size'] = df.Parch + df.SibSp\ndf['Alone'] = 0\ndf.loc[df['Family_Size'] ==0, 'Alone'] = 1\n\n\ndf_test['Family_Size'] = 0\ndf_test['Family_Size'] = df_test.Parch + df_test.SibSp\ndf_test['Alone'] = 0\ndf_test.loc[df_test['Family_Size'] ==0, 'Alone'] = 1","fdbb4d04":"df.drop(['Name', 'Ticket','Cabin','PassengerId'], axis = 1, inplace=True)\ndf_test.drop(['Name', 'Ticket','Cabin','PassengerId'], axis = 1, inplace=True)","c7082b29":"one_hot_encoded_df = pd.get_dummies(df, columns = ['Sex', 'Embarked', 'Pclass', 'Initial'])\none_hot_encoded_df_test = pd.get_dummies(df_test, columns = ['Sex', 'Embarked', 'Pclass', 'Initial'])","f69b54a7":"one_hot_encoded_df.head()","ee2f25f5":"one_hot_encoded_df_test.head()","be055e43":"scaler = MinMaxScaler()\none_hot_encoded_df.iloc[:,1:] = scaler.fit_transform(one_hot_encoded_df.iloc[:,1:].to_numpy())\none_hot_encoded_df_test.iloc[:,0:] = scaler.fit_transform(one_hot_encoded_df_test.iloc[:,0:].to_numpy())","62eed053":"one_hot_encoded_df.head()","4e424734":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.svm import SVC","1998dc23":"train, val = train_test_split(one_hot_encoded_df, test_size=0.3, \n                              random_state=0, \n                              stratify=df['Survived'])\n\ntrain_X = train[train.columns[1:]]\ntrain_Y = train[train.columns[:1]]\n\nval_X = val[val.columns[1:]]\nval_Y = val[val.columns[:1]]","63cc9bb6":"model_KNN = KNeighborsClassifier(n_neighbors=5)\nmodel_KNN.fit(train_X, train_Y)\ntrain_pred_KNN= model_KNN.predict(train_X)\nval_pred_KNN= model_KNN.predict(val_X)\nprint(f\"KNN Train accuracy:{metrics.accuracy_score(train_pred_KNN, train_Y):.3f}\")\nprint(f\"KNN Validation accuracy:{metrics.accuracy_score(val_pred_KNN, val_Y):.3f}\")","2384632e":"svclassifier = SVC(kernel='rbf')\nsvclassifier.fit(train_X, train_Y)\ntrain_pred_SVM = svclassifier.predict(train_X)\npred_SVM= svclassifier.predict(val_X)\nprint(f\"SVM Train accuracy:{metrics.accuracy_score(train_pred_SVM, train_Y):.3f}\")\nprint(f\"SVM Validation accuracy:{metrics.accuracy_score(pred_SVM, val_Y):.3f}\")","ab129c56":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2","debdfe4f":"# feature selection\ndef select_features(X_train, y_train, X_test):\n\tfs = SelectKBest(score_func=chi2, k='all')\n\tfs.fit(X_train, y_train)\n\tX_train_fs = fs.transform(X_train)\n\tX_test_fs = fs.transform(X_test)\n\treturn X_train_fs, X_test_fs, fs","020e387b":"train_fs, X_test_fs, fs = select_features(train_X, train_Y, val_X)","b3eceb77":"col_names = one_hot_encoded_df.columns.values","3420f623":"col_names = one_hot_encoded_df.columns\nfor i, col in zip(range(len(fs.scores_)), col_names[1:]):\n\tprint(f\"{col} : {fs.scores_[i]}\")","b15f34c8":"sns.barplot([i for i in range(len(fs.scores_))], fs.scores_)\nplt.show()","1747873d":"one_hot_encoded_df.drop(['Age', 'isChild','AgeMissing','Embarked_Q'], axis = 1, inplace=True)\none_hot_encoded_df_test.drop(['Age','isChild', 'AgeMissing','Embarked_Q'], axis = 1, inplace=True)","3b6e03df":"one_hot_encoded_df.head()","04279308":"train, val = train_test_split(one_hot_encoded_df, test_size=0.3, \n                              random_state=0, \n                              stratify=df['Survived'])\n\ntrain_X = train[train.columns[1:]]\ntrain_Y = train[train.columns[:1]]\n\nval_X = val[val.columns[1:]]\nval_Y = val[val.columns[:1]]","409010d6":"model_KNN = KNeighborsClassifier(n_neighbors=5)\nmodel_KNN.fit(train_X, train_Y)\ntrain_pred_KNN= model_KNN.predict(train_X)\nval_pred_KNN= model_KNN.predict(val_X)\nprint(f\"KNN Train accuracy:{metrics.accuracy_score(train_pred_KNN, train_Y):.3f}\")\nprint(f\"KNN Validation accuracy:{metrics.accuracy_score(val_pred_KNN, val_Y):.3f}\")","97edfa8d":"svclassifier = SVC(kernel='rbf')\nsvclassifier.fit(train_X, train_Y)\ntrain_pred_SVM = svclassifier.predict(train_X)\npred_SVM= svclassifier.predict(val_X)\nprint(f\"SVM Train accuracy:{metrics.accuracy_score(train_pred_SVM, train_Y):.3f}\")\nprint(f\"SVM Validation accuracy:{metrics.accuracy_score(pred_SVM, val_Y):.3f}\")","b645392c":"test_pred = svclassifier.predict(one_hot_encoded_df_test[one_hot_encoded_df_test.columns[:]])","f28f97e5":"column_names = [\"PassengerId\", \"Survived\"]\nresult = pd.DataFrame(columns = column_names)\nresult['PassengerId'] = test_passenger_id\nresult['Survived'] = test_pred\n!rm -rf submission.csv\nresult.to_csv(\"submission.csv\", index=False)","7495fb04":"pd.read_csv('.\/submission.csv')","4340fcb1":"Age, SibSp, Embarked_Q are not so important variable","b885395e":"Dropping Name, PassengerId, Ticket, Cabin","1957401f":"It's not recommended to impute more than 5% of missing data. Imputing more than 5% of data might result in bias","4551616d":"Adding a variable to indicate whether the survivor is child or not. ","c55f007f":"Age is not normally distributed imputing the mean is not a right approximation. Replacing NaN values with 0 and adding a categorical variable to indicate missing data","82ad82ee":"Performaning variable selection","84505b97":"Encoding the string values to integer ","d5554cc9":"There are missing values in the dataset which needs to handled","774b8455":"Embarked has 2 missing values filling it by its mode"}}