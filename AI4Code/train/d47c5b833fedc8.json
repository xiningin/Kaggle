{"cell_type":{"05d0b90b":"code","3c3ba228":"code","a5c3b727":"code","3d5db239":"code","14f4bcf3":"code","93328f70":"code","85aafcf7":"code","d61c5594":"code","397e4ca5":"code","ba8a840e":"code","0381e5ed":"code","8cee9bf5":"code","ac5ef9f3":"code","f0e5a519":"code","7f0a67ef":"code","6ed7cd4b":"code","dfba8e82":"code","0245d942":"code","6a8c3629":"code","c96f5e3f":"code","0a77686c":"code","f49cfdf1":"code","1d8f3fd5":"code","bc3c12be":"code","cd79e48c":"markdown","3542c1dc":"markdown","3c9c2d84":"markdown","a417a743":"markdown","d272d755":"markdown","44feeab4":"markdown"},"source":{"05d0b90b":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl \nmpl.rcParams[\"figure.figsize\"] = [15,7]\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.stattools import acf,pacf","3c3ba228":"os.chdir(\"\/kaggle\/input\/wallmart\")","a5c3b727":"df = pd.read_csv(\"kaggle_subset.csv\")\n\n# Extracting sales of 'FOODS_1_001' item to df1\ndf1 = pd.DataFrame(np.zeros((1913,1)))\ndf1.columns = ['FOODS_1_001'] \nfor i in range(1,30491):\n    i = df.columns[i]\n    item = i.split('_')[0] + '_' + i.split('_')[1] + '_' + i.split('_')[2]\n    if item == 'FOODS_1_001':\n        df1[item] += df[i]\ndf1.head()\n\ndf1['date'] = df['date']\ndf1 = df1.set_index('date')\ndf1.head()","3d5db239":"# Droping zeros from dataset \n# Should do imputing later on\ndf1 = df1[df1['FOODS_1_001'] != 0]","14f4bcf3":"# Log transformation\ndf1_log = np.log(df1)\ndf1_log.head()","93328f70":"# Finding moving averages and standard deviation\nmoving_avg_log = df1_log.rolling(window=365).mean()\nmoving_std_log = df1_log.rolling(window=365).std()","85aafcf7":"# Calculating difference b\/w log of dataset values and movig average\nlogscaleMinusMA = df1_log - moving_avg_log\nlogscaleMinusMA.dropna(inplace=True)","d61c5594":"# Calculating exponential weighted averages of log of dataset values\nexpDecayWeightAvg = df1_log.ewm(halflife=12, min_periods=0, adjust = True).mean()","397e4ca5":"dflogMinusExpDecay = df1_log - expDecayWeightAvg","ba8a840e":"plt.figure(figsize = [19, 5])\nplt.plot()\nplt.plot(dflogMinusExpDecay)\nplt.plot(dflogMinusExpDecay.rolling(window=12).mean())","0381e5ed":"dftest  =  adfuller(dflogMinusExpDecay['FOODS_1_001'],autolag='AIC')\ndfoutput = pd.Series(dftest[0:4],index=['Test Statistic','p-value','#Lags used','#Observations'])\nfor key,value in dftest[4].items() :\n    dfoutput[\"Critical values(%s)\"%key] = value\ndfoutput","8cee9bf5":"# Integration part of ARIMA\n# Difference is taken as 1\ndf1LogDiffShift = df1_log - df1_log.shift(1)\nplt.plot(df1LogDiffShift)","ac5ef9f3":"# Droping NaN values and plotting\ndf1LogDiffShift.dropna(inplace = True)\nplt.plot(df1LogDiffShift)","f0e5a519":"# Performing Dickey fuller test to check whether data is stationary or not\ndftest  =  adfuller(df1LogDiffShift['FOODS_1_001'],autolag='AIC')\ndfoutput = pd.Series(dftest[0:4],index=['Test Statistic','p-value','#Lags used','#Observations'])\nfor key,value in dftest[4].items() :\n    dfoutput[\"Critical values(%s)\"%key] = value\ndfoutput","7f0a67ef":"# Determining P and Q values which are respectively AR and MA parts of ARIMA model \n# Plotting pacf and acf graph to get p and q values\nlag_acf = acf(df1LogDiffShift, nlags=20)\nlag_pacf = pacf(df1LogDiffShift, nlags=20, method ='ols')\n\nplt.subplot(121)\nplt.plot(lag_acf)\nplt.axhline(y=0,linestyle='--',color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(df1LogDiffShift)),linestyle='--',color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(df1LogDiffShift)),linestyle='--',color='gray')\nplt.title('ACF')\n\nplt.subplot(122)\nplt.plot(lag_pacf)\nplt.axhline(y=0,linestyle='--',color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(df1LogDiffShift)),linestyle='--',color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(df1LogDiffShift)),linestyle='--',color='gray')\nplt.title('PACF')\nplt.tight_layout()","6ed7cd4b":"# Fitting the ARIMA model\nmodel = ARIMA(df1_log,order=(1,1,1))\nresults_AR = model.fit(disp=-1)\nresults_AR.fittedvalues\nplt.plot(df1LogDiffShift['FOODS_1_001'])\nplt.plot(results_AR.fittedvalues,color='red')\nplt.title('RSS: %.4f'% sum((results_AR.fittedvalues - df1LogDiffShift['FOODS_1_001'])**2))","dfba8e82":"predictions_AR_diff = pd.Series(results_AR.fittedvalues , copy= True)","0245d942":"predictions_AR_diff_cumsum = predictions_AR_diff.cumsum()","6a8c3629":"predictions_AR_log = pd.Series(df1_log['FOODS_1_001'].iloc[0], index = df1_log.index)\npredictions_AR_log = predictions_AR_log.add(predictions_AR_diff_cumsum,fill_value=0)\npredictions_AR_log.head()","c96f5e3f":"predictions_AR = np.exp(predictions_AR_log)\nplt.plot(df1,color='black')\n#plt.plot(predictions_AR, color='red')","0a77686c":"predictions_AR","f49cfdf1":"plt.plot(predictions_AR, color='red')","1d8f3fd5":"results_AR.plot_predict(1,1709+60)","bc3c12be":"x=results_AR.forecast(steps=60)","cd79e48c":"### Impute the missing values","3542c1dc":"## ARIMA model to predict sales of one item","3c9c2d84":"### Importing libraries","a417a743":"### Importing dataset","d272d755":"# Impute the missing values","44feeab4":"Null hypothesis states that data is not stationary but from the above result we see that p-value is very low and hence we conclude that data is stationary."}}