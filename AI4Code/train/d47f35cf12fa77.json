{"cell_type":{"0185a222":"code","b51a839b":"code","e1873dc7":"code","a16a4efe":"code","f3457f3a":"code","207c7a29":"code","e0439fd7":"code","d12db8ea":"code","51d179a3":"code","ca410425":"code","80f6ab86":"code","3463a398":"code","cf14b9ce":"code","a3a8b201":"code","d03f88ea":"code","c9bb46e2":"code","df110bed":"code","22dfa7d6":"code","70443bfb":"code","c120e1c7":"code","7ebfb72c":"code","45085745":"code","f2533475":"code","f0054386":"code","a5070ebb":"code","1c72d080":"code","bb3be4f3":"code","c2706e52":"code","6be71c38":"code","c38ce269":"code","2748e679":"code","17444ec1":"code","b4d57e0c":"code","1546e7aa":"markdown","cfb80b69":"markdown","1e6aeb2f":"markdown","5b678acd":"markdown","481d8bb6":"markdown","4db0fc86":"markdown","55b07ad8":"markdown","34d88c45":"markdown","015f4add":"markdown","640851ae":"markdown","2e98997a":"markdown","d3d05fd8":"markdown","3b9db2f4":"markdown","ba9f3b5b":"markdown","ef95a7ff":"markdown","b96a6c40":"markdown","e90cd88b":"markdown","512c663e":"markdown","045f5005":"markdown","5ebac033":"markdown","2e41b55d":"markdown"},"source":{"0185a222":"import os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.set_context('notebook')\nfrom pprint import pprint\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b51a839b":"data = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\ndata.head()","e1873dc7":"# Number of rows\nprint(data.shape[0])","a16a4efe":"# Column names\ndata.columns.tolist()","f3457f3a":"# Data types\ndata.dtypes","207c7a29":"# data['species'] = data.species.str.replace('Iris-', '')\ndata['Species'] = data.Species.apply(lambda r: r.replace('Iris-', ''))\ndata.head()","e0439fd7":"data.Species.value_counts()","d12db8ea":"# Select just the rows desired from the 'describe' method and add in the 'median'\nstats_df = data.describe()\nstats_df.loc['range'] = stats_df.loc['max'] - stats_df.loc['min']\n\nout_fields = ['mean','25%','50%','75%', 'range']\nstats_df = stats_df.loc[out_fields]\nstats_df.rename({'50%': 'median'}, inplace=True)\nstats_df","51d179a3":"# The mean calculation\ndata.groupby('Species').mean()","ca410425":"# The median calculation\ndata.groupby('Species').median()","80f6ab86":"# applying multiple functions at once - 2 methods\ndata.groupby('Species').agg(['mean', 'median'])  # passing a list of recognized strings\ndata.groupby('Species').agg([np.mean, np.median])  # passing a list of explicit aggregation functions","3463a398":"# If certain fields need to be aggregated differently, we can do:\nagg_dict = {field: ['mean', 'median'] for field in data.columns if field != 'Species'}\nagg_dict['PetalLengthCm'] = 'max'\npprint(agg_dict)\ndata.groupby('Species').agg(agg_dict)","cf14b9ce":"# A simple scatter plot with Matplotlib\nax = plt.axes()\nax.scatter(data.SepalLengthCm, data.SepalWidthCm)\nax.set(xlabel='Sepal Length (cm)',\n       ylabel='Sepal Width (cm)',\n       title='Sepal Length vs Width')","a3a8b201":"ax = plt.axes()\nax.hist(data.PetalLengthCm, bins=25);\nax.set(xlabel='Petal Length (cm)', \n       ylabel='Frequency',\n       title='Distribution of Petal Lengths')","d03f88ea":"# Alternatively using Pandas plotting functionality\nax = data.PetalLengthCm.plot.hist(bins=25)\nax.set(xlabel='Petal Length (cm)', \n       ylabel='Frequency',\n       title='Distribution of Petal Lengths')","c9bb46e2":"ax = data.iloc[:,1:].plot.hist(bins=25, alpha=0.5, figsize=(10,6))\nax.set_xlabel('Size (cm)')","df110bed":"# To create four separate plots, use Pandas `.hist` method\naxList = data.iloc[:,1:].hist(bins=25, figsize=(10,8))\n\n# Add some x- and y- labels to first column and last row\nfor ax in axList.flatten():\n    if ax.is_last_row():\n        ax.set_xlabel('Size (cm)')\n        \n    if ax.is_first_col():\n        ax.set_ylabel('Frequency')","22dfa7d6":"data.iloc[:,1:].boxplot(by='Species', figsize=(10,8))","70443bfb":"# Reshape the data so there is only a single measurement in each column\nplot_data = (data.iloc[:,1:]\n             .set_index('Species')\n             .stack()\n             .to_frame()\n             .reset_index()\n             .rename(columns={0:'size', 'level_1':'measurement'}))\nplot_data.head()","c120e1c7":"sns.set_palette('muted')\nplt.figure(figsize=(10,6))\nsns.boxplot(x='measurement', y='size', \n            hue='Species', data=plot_data)","7ebfb72c":"sns.set_context('notebook')\nsns.pairplot(data.iloc[:,1:], hue='Species')","45085745":"corrmat = data.iloc[:,1:].corr()\nsns.heatmap(corrmat, annot = True, square = True)","f2533475":"from sklearn import metrics\nfrom sklearn.metrics import confusion_matrix, roc_curve, auc, accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.svm import SVC","f0054386":"x = data.iloc[:,1:-1]\nx.head()","a5070ebb":"y = pd.factorize(data['Species'])[0]\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=21)\nprint(\"Train shape:\", X_train.shape, y_train.shape)\nprint(\"Test set shape:\", X_test.shape, y_test.shape)","1c72d080":"# Setting up plotting functions\n\ndef plot_confusion_matrix(y_test, y_preds, title):\n    \n    classes=['Setosa','Versicolor', 'Virginica']\n    \n    cm = confusion_matrix(y_test, y_preds)\n    \n    group_counts = [\"{0:0.0f}\".format(value) for value in cm.flatten()]\n    group_percentages = [\"{0:.1%}\".format(value) for value in cm.flatten()\/np.sum(cm)]\n    \n    labels = [f\"{v1}\\n{v2}\" for v1, v2 in zip(group_counts, group_percentages)]\n    labels = np.asarray(labels).reshape(3,3)\n    \n    plt.style.use('seaborn')\n    sns.set_context('notebook') \n    plt.figure(figsize=(8,6))\n    ax = sns.heatmap(cm, annot=labels, fmt='', cmap='Blues')\n    ax.set_title(title)\n    ax.set_xlabel('\\nPredicted Species')\n    ax.set_ylabel('Actual Species\\n')\n    ax.xaxis.set_ticklabels(classes)\n    ax.yaxis.set_ticklabels(classes)\n    plt.show()\n    \ndef plot_roc(y_test, y_probs, title):\n    fpr = {}\n    tpr = {}\n    roc_auc = {}\n    thresh = {}\n    classes = 3\n\n    for i in range(classes):    \n        fpr[i], tpr[i], thresh[i] = roc_curve(y_test, y_probs[:,i], pos_label=i)\n        roc_auc[i] = auc(fpr[i], tpr[i])\n\n    colors = ['salmon', 'teal', 'slateblue']\n    species = ['Setosa' if i == 0 else 'Versicolor' if i == 1 else 'Virginica' for i in range(classes)]\n    \n    plt.figure(figsize=(9,6))\n    for i, color in zip(range(classes), colors):\n        plt.plot(fpr[i], tpr[i], color=color, lw=2.5, alpha=0.8,\n                 label='ROC Curve of {0} (AUC = {1:0.3f})'.format(species[i], roc_auc[i]))\n    plt.plot([0, 1], [0, 1], 'k--', lw=1)\n    plt.title(title, fontsize=18)\n    plt.xlabel('False Positive Rate', fontsize=14)\n    plt.ylabel('True Positive rate', fontsize=14)\n    plt.legend(loc='best', fontsize=14)\n    plt.show()","bb3be4f3":"glm=LogisticRegression(multi_class='multinomial', solver='newton-cg').fit(X_train, y_train)\nglm_preds=glm.predict(X_test)\nglm_probs=glm.predict_proba(X_test)\nglm_acc=accuracy_score(y_test,glm_preds)\nprint(\"Test Set Accuracy: {:.1%}\".format(glm_acc))\nplot_confusion_matrix(y_test, y_preds=glm_preds, title='\\nLogistic Regression Confusion Matrix')","c2706e52":"plot_roc(y_test, y_probs=glm_probs, title='\\nMulticlass ROC Curve of Iris Species\\nLogistic Regression')","6be71c38":"lda = LinearDiscriminantAnalysis().fit(X_train, y_train)\nlda_preds=lda.predict(X_test)\nlda_probs=lda.predict_proba(X_test)\nlda_acc=accuracy_score(y_test,lda_preds)\nprint(\"Test Set Accuracy: {:.1%}\".format(lda_acc))\nplot_confusion_matrix(y_test, y_preds=lda_preds, title='\\nLinear Discriminant Analysis Confusion Matrix')","c38ce269":"plot_roc(y_test, y_probs=lda_probs, title='\\nMulticlass ROC Curve of Iris Species\\nLinear Discriminant Analysis')","2748e679":"svm = SVC(kernel='linear', C=1.2, probability=True).fit(X_train, y_train)\nsvm_preds=svm.predict(X_test)\nsvm_probs=svm.predict_proba(X_test)\nsvm_acc=accuracy_score(y_test,svm_preds)\nprint(\"Test Set Accuracy: {:.1%}\".format(svm_acc))\nplot_confusion_matrix(y_test, y_preds=svm_preds, title='\\nLinear SVM Confusion Matrix')","17444ec1":"plot_roc(y_test, y_probs=svm_probs, title='\\nMulticlass ROC Curve of Iris Species\\nLinear SVM')","b4d57e0c":"data = {'Accuracy': [glm_acc, lda_acc, svm_acc]}\nres = pd.DataFrame(data, index=['Logistic Regression', 'Linear Discriminant Analysis', \n                                'Linear SVM']).sort_values(by=['Accuracy'], ascending=False)\nplt.figure(figsize=(9,6))\nax=sns.barplot(x=res.index, y='Accuracy', data=res, palette='Blues_d')\nsns.despine(top=True, right=True, left=False, bottom=False)\nplt.xlabel('Model', fontsize=20)\nplt.ylabel('Accuracy', fontsize=20)\nax.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: '{:.0f}%'.format(x*100)))\nfor p in ax.patches:\n    ax.annotate('{:.1f}%'.format(p.get_height()*100), (p.get_x()+0.4, p.get_height()), \n                ha='center', va='bottom', color= 'black')\nplt.title('\\nModel Accuracy on the Test Set', fontsize=20)\nplt.show()","1546e7aa":"---\n##### Machine Learning Foundation (C) 2020 IBM Corporation","cfb80b69":"Overall, the Linear SVM produced the highest accuracy at 97.8% with an Area Under the Curve of more than 0.99 for each of the species. It also misclassified the fewest number of flowers in the confusion matrix.","1e6aeb2f":"### Question 6\n\nMake a histogram of any one of the four features. Label axes and title it as appropriate. ","5b678acd":"### Question 5\n\nMake a scatter plot of `sepal_length` vs `sepal_width` using Matplotlib. Label the axes and give the plot a title.","481d8bb6":"---\n# Part II. Predicting the species of iris flowers","4db0fc86":"### Question 7\n\nNow create a single plot with histograms for each feature (`petal_width`, `petal_length`, `sepal_width`, `sepal_length`) overlayed. If you have time, next try to create four individual histogram plots in a single figure, where each plot contains one feature.\n\nFor some hints on how to do this with Pandas plotting methods, check out the [visualization guide](http:\/\/pandas.pydata.org\/pandas-docs\/version\/0.18.1\/visualization.html) for Pandas.","55b07ad8":"### Question 1\n\nLoad the data from the file using the techniques learned today. Examine it.\n\nDetermine the following:\n\n* The number of data points (rows). (*Hint:* check out the dataframe `.shape` attribute.)\n* The column names. (*Hint:* check out the dataframe `.columns` attribute.)\n* The data types for each column. (*Hint:* check out the dataframe `.dtypes` attribute.)","34d88c45":"# Predicting the Species of Iris Flowers \ud83c\udf3a\ud83c\udf3c","015f4add":"### Question 2\n\nExamine the species names and note that they all begin with 'Iris-'. Remove this portion of the name so the species name is shorter. \n\n*Hint:* there are multiple ways to do this, but you could use either the [string processing methods](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/text.html) or the [apply method](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.apply.html).","640851ae":"### Question 9\n\nNow make a single boxplot where the features are separated in the x-axis and species are colored with different hues. \n\n*Hint:* you may want to check the documentation for [Seaborn boxplots](http:\/\/seaborn.pydata.org\/generated\/seaborn.boxplot.html). \n\nAlso note that Seaborn is very picky about data format--for this plot to work, the input dataframe will need to be manipulated so that each row contains a single data point (a species, a measurement type, and the measurement value). Check out Pandas [stack](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.stack.html) method as a starting place.\n\nHere is an example of a data format that will work:\n\n|   | species | measurement  | size |\n| - | ------- | ------------ | ---- |\n| 0\t| setosa  | sepal_length | 5.1  |\n| 1\t| setosa  | sepal_width  | 3.5  |","2e98997a":"### Question 4\n\nCalculate the following **for each species** in a separate dataframe:\n\n* The mean of each measurement (sepal_length, sepal_width, petal_length, and petal_width).\n* The median of each of these measurements.\n\n*Hint:* you may want to use Pandas [`groupby` method](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.groupby.html) to group by species before calculating the statistic.\n\nIf you finish both of these, try calculating both statistics (mean and median) in a single table (i.e. with a single groupby call). See the section of the Pandas documentation on [applying multiple functions at once](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/groupby.html#applying-multiple-functions-at-once) for a hint.","d3d05fd8":"There are three species of the iris flower that we would like to predict using the petal and sepal features.","3b9db2f4":"### Question 10\n\nMake a [pairplot](http:\/\/seaborn.pydata.org\/generated\/seaborn.pairplot.html) with Seaborn to examine the correlation between each of the measurements.\n\n*Hint:* this plot may look complicated, but it is actually only a single line of code. This is the power of Seaborn and dataframe-aware plotting! See the lecture notes for reference.","ba9f3b5b":"## Logistic Regression","ef95a7ff":"----\n# Part I. Exploratory Data Analysis\n\nWe will be using the iris data set for this tutorial. This is a well-known data set containing iris species and sepal and petal measurements. The data we will use are in a file called `iris_data.csv` found in the [data](data\/) directory.","b96a6c40":"#### Correlation Matrix","e90cd88b":"### Question 3\n\nDetermine the following:  \n* The number of each species present. (*Hint:* check out the series `.value_counts` method.)\n* The mean, median, and quantiles and ranges (max-min) for each petal and sepal measurement.\n\n*Hint:* for the last question, the `.describe` method does have median, but it's not called median. It's the *50%* quantile. `.describe` does not have range though, and in order to get the range, you will need to create a new entry in the `.describe` table, which is `max - min`.","512c663e":"## Linear Support Vector Machine","045f5005":"![iris](https:\/\/miro.medium.com\/max\/1050\/0*Uw37vrrKzeEWahdB)","5ebac033":"### Question 8\n\nUsing Pandas, make a boxplot of each petal and sepal measurement. Here is the documentation for [Pandas boxplot method](http:\/\/pandas.pydata.org\/pandas-docs\/version\/0.18.1\/visualization.html#visualization-box).","2e41b55d":"## Linear Discriminant Analysis"}}