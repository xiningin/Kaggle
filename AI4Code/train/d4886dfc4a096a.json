{"cell_type":{"b2999eb9":"code","42e31ecc":"code","557226a8":"code","bc5be675":"code","0db864d2":"markdown"},"source":{"b2999eb9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","42e31ecc":"train_df = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv', nrows=None)","557226a8":"train_df.dtypes","bc5be675":"d_c = []\nfor feature_71 in train_df['feature_71'].value_counts().index[:200]:\n    d0_same = train_df[np.abs((train_df['feature_71'] - feature_71)) < 0.001]\n    if d0_same['feature_2'].value_counts().max() == 1 or d0_same['feature_1'].value_counts().max() == 1:\n        # print('pass')\n        continue\n    \n    d0_same = d0_same[d0_same['feature_2'] == d0_same['feature_2'].value_counts().index[0]]\n    \n    print('Find unique stocks:', d0_same.shape,)\n    print('resp mean {0}, std {1}'.format(np.mean(d0_same['resp'] > 0), \n                                          np.std(d0_same['resp'] > 0)))\n    print(d0_same[['resp', 'feature_1', 'feature_2', 'feature_2', 'feature_70']].head(2))\n    print('')\n    \n    if np.mean(d0_same['resp'] > 0) > 0.5:\n        d_c.append(1)\n    else:\n        d_c.append(0)\n    \n    \n    # print(d0_same.shape)\n    # d_c.append(d0_same)\n    # break","0db864d2":"We can find the std is 0, means that the resp is same in unique stock."}}