{"cell_type":{"ebd4fbf2":"code","890d64a4":"code","ae55cac4":"code","f16fd55f":"code","a1da59d8":"code","606196cf":"code","ecd460db":"code","21f22a5a":"code","d3169b40":"code","4ffdae7f":"code","354d4148":"code","93a8be73":"code","4b750665":"code","e80ee17c":"code","b6072dbf":"code","a0ccfaa6":"code","24f05d2b":"code","00dab3b5":"code","1041816a":"code","7e1116b0":"code","12065f80":"code","5209f7f8":"code","b518c5c2":"code","84d767cc":"markdown","50344a69":"markdown","879fe3bc":"markdown"},"source":{"ebd4fbf2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","890d64a4":"import tensorflow as tf\nimport os\nimport random\nimport numpy as np\n \nfrom tqdm import tqdm \n\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\nimport matplotlib.pyplot as plt","ae55cac4":"# \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u0641\u0637 \u0627\u0644\u0636\u063a\u0637 \u0639\u0646 \u0627\u0644\u0645\u0644\u0641\u0627\u062a \nimport zipfile\nwith zipfile.ZipFile(\"..\/input\/data-science-bowl-2018\/stage1_train.zip\",\"r\") as zip_ref:\n    zip_ref.extractall(\"stage1_train\")","f16fd55f":"# \u0641\u0643 \u0627\u0644\u0636\u063a\u0637 \u0627\u064a\u0636\u0627 \nimport zipfile\nwith zipfile.ZipFile(\"..\/input\/data-science-bowl-2018\/stage1_test.zip\",\"r\") as zip_ref:\n    zip_ref.extractall(\"stage1_test\")","a1da59d8":"# \u0627\u0644\u0628\u0630\u0648\u0631 \u0627\u0644\u0639\u0634\u0648\u0627\u0626\u064a\u0647 \u0647\u064a \u0627\u062f\u0627\u0647 \u0647\u0627\u0645\u0647 \u0641\u064a \u062a\u062b\u0628\u064a\u062a \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0627\u0644\u062a\u064a \u062a\u0639\u062a\u0645\u062f \u0639\u0644\u064a \u0627\u0644\u0627\u062e\u062a\u064a\u0627\u0631 \u0627\u0644\u0639\u0634\u0648\u0627\u0626\u064a \nseed = 42\nnp.random.seed = seed","606196cf":"IMG_WIDTH = 128\nIMG_HEIGHT = 128\nIMG_CHANNELS = 3\n\nTRAIN_PATH = 'stage1_train\/'\nTEST_PATH = 'stage1_test\/'\n\n# \u062a\u0644\u0643 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0647 \u062a\u0639\u0645\u0644 \u0639\u0644\u064a \n# \u0627\u0638\u0647\u0627\u0631 \u0627\u0633\u0645 \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0627\u0648\u0644 \u0648\u062c\u0645\u064a\u0639 \u0627\u0644\u0645\u0644\u0641\u0627\u062a \u0627\u0644\u062a\u064a \u064a\u062d\u062a\u0648\u064a\u0647\u0627 , \u0648\u0646\u062d\u0646 \u0646\u0631\u064a\u062f \u0627\u0644\u0645\u0644\u0641\u0627\u062a \u0627\u0644\u062a\u064a \u064a\u062d\u062a\u0648\u064a\u0647\u0627 \u0648\u062a\u062c\u0627\u0647\u0644 \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0631\u0626\u064a\u0633\u064a \n# \u0644\u0630\u0644\u0643 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u0627\u0636\u0627\u0641\u0647 \u0631\u0642\u0645 1 \u0627\u0644\u064a \u0627\u0644\u0643\u0648\u062f \u0648\u062a\u0639\u0646\u064a \u0627\u0644\u0639\u0646\u0635\u0631 \u0627\u0644\u062b\u0627\u0646\u064a .\n#train_ids = next(os.walk(TRAIN_PATH))\n\ntrain_ids = next(os.walk(TRAIN_PATH))[1]\n# \u0633\u062a\u062a\u0643\u0631\u0631 \u0646\u0641\u0633 \u0627\u0644\u0639\u0645\u0644\u064a\u0647 \u0645\u0639 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \ntest_ids = next(os.walk(TEST_PATH))[1]\n\n\n# \u0647\u0646\u0627 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u0627\u0636\u0627\u0641\u0647 \u0633\u0644\u0627\u0633\u0644 \u0641\u0627\u0631\u063a\u0647 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u062a\u062e\u0632\u064a\u0646 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0627\u0644\u062a\u064a \u0646\u062d\u0635\u0644 \u0639\u0644\u064a\u0647\u0627 \u0641\u064a\u0645\u0627 \u0628\u0639\u062f \n# \u0627\u0644\u0647\u062f\u0641 \u0647\u0646\u0627 \u0647\u0648 \u0627\u0633\u062a\u062e\u0631\u0627\u062c \u0643\u0644 \u0627\u0644\u0635\u0648\u0631 \u0648\u0627\u0639\u0627\u062f\u0647 \u062a\u0634\u0643\u0644\u064a\u0647\u0627 \nX_train = np.zeros((len(train_ids), IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.uint8)\nY_train = np.zeros((len(train_ids), IMG_HEIGHT, IMG_WIDTH, 1), dtype=np.bool)","ecd460db":"train_ids[:5]","21f22a5a":"test_ids[:5]","d3169b40":"print(X_train.shape)\nprint(Y_train.shape)","4ffdae7f":"# \u0647\u0646\u0627 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u0637\u0628\u0627\u0639\u0647 \u062c\u0645\u0644\u0647 \u0627\u0641\u062a\u062a\u0627\u062d\u064a\u0647 \u0641\u064a \u0627\u0644\u0628\u062f\u0627\u064a\u0647 \nprint('Resizing training images and masks')\n# \u0647\u0646\u0627 \u0646\u0642\u0648\u0645 \u0628\u0627\u0646\u0634\u0627\u0621 \u0644\u0648\u0628 \n# \u062a\u0644\u0643 \u0627\u0644\u062f\u0627\u0644\u0647 tqdm \n# \u062a\u0639\u0645\u0644 \u0639\u0644\u064a \u0627\u0638\u0647\u0627\u0631 \u0634\u0631\u064a\u0637 \u0627\u0644\u062a\u0642\u062f\u0645 \nfor n, id_ in tqdm(enumerate(train_ids), total=len(train_ids)):  \n    # \u0627\u0644\u0627\u0646 \u0627\u0635\u0628\u062d \u0644\u062f\u064a\u0646\u0627 \u0645\u0633\u0627\u0631 \u064a\u062f\u062e\u0644 \u0627\u0644\u064a \/\u0627\u0648  \u064a\u062a\u062e\u0637\u064a \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u0627\u0648\u0644 \u0648\u064a\u062f\u062e\u0644 \u0627\u0644\u064a \u0627\u0644\u0645\u0644\u0641\u064a\u0646 \n    path = TRAIN_PATH + id_\n    # \u0647\u0646\u0627 \u0646\u0642\u0648\u0645 \u0628\u062f\u0645\u062c \u0627\u0644\u0645\u0633\u0627\u0631 \u0645\u0639 \u0627\u0633\u0645 \u0645\u0646 \u0627\u0633\u0645\u0627\u0621 \u0627\u0644\u0645\u0644\u0641\u0627\u062a \u0627\u0644\u0645\u0648\u062c\u0648\u062f\u0647 \u0641\u064a \u0627\u0644\u0645\u0644\u0641 \u0627\u0644\u062b\u0627\u0646\u064a \u062d\u062a\u064a \u064a\u0633\u062a\u0637\u064a\u0639 \u0627\u0644\u062f\u062e\u0648\u0644 \u0627\u0644\u064a\u0647\u0627 \u0648\u062a\u062d\u0648\u064a\u0644 \u0646\u0648\u0639 \u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u062a\u064a \u064a\u0628\u062f\u0627 \u0641\u064a \u062a\u0643\u0627\u0631\u0627\u0647\u0627 \u0627\u0644\u064a \u0646\u0648\u0639 \u0645\u0648\u062d\u062f \u0645\u0646 \u0627\u0645\u062a\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0635\u0648\u0631 \n    img = imread(path + '\/images\/' + id_ + '.png')[:,:,:IMG_CHANNELS]  \n    # \u0628\u0639\u062f\u0647\u0627 \u064a\u0639\u0645\u0644 \u0639\u0644\u064a \u0627\u0639\u0627\u062f\u0647 \u062a\u0634\u0643\u064a\u0644 \u062d\u062c\u0645 \u0627\u0644\u0635\u0648\u0631\u0647 \u0627\u0644\u064a \u0627\u0644\u0627\u0628\u0639\u0627\u062f \u0627\u0644\u062a\u064a \u0627\u0634\u0631\u0646\u0627 \u0627\u0644\u064a\u0647\u0627 \u0645\u0633\u0628\u0642\u0627 \n    img = resize(img, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)\n    # \u0628\u0639\u062f\u0647\u0627 \u0645\u0628\u0627\u0634\u0631\u0647 \u0646\u0639\u0645\u0644 \u0639\u0644\u064a \u062a\u062e\u0632\u064a\u0646 \u062a\u0644\u0643 \u0627\u0644\u0635\u0648\u0631\u0647 \u0627\u0644\u0646\u0627\u062a\u062c\u0647 \u062f\u0627\u062e\u0644 \u0627\u0644\u0645\u0635\u0641\u0648\u0641\u0647 \u0627\u0644\u062a\u064a \u0642\u0645\u0646\u0627 \u0628\u0627\u0646\u0634\u0627\u0621\u0647\u0627 \n    X_train[n] = img  #Fill empty X_train with values from img\n    mask = np.zeros((IMG_HEIGHT, IMG_WIDTH, 1), dtype=np.bool)\n    for mask_file in next(os.walk(path + '\/masks\/'))[2]:\n        mask_ = imread(path + '\/masks\/' + mask_file)\n        mask_ = np.expand_dims(resize(mask_, (IMG_HEIGHT, IMG_WIDTH), mode='constant',  \n                                      preserve_range=True), axis=-1)\n        mask = np.maximum(mask, mask_)  \n            \n    Y_train[n] = mask  ","354d4148":"print(path)","93a8be73":"# \u0647\u0630\u0627 \u0647\u0648 \u0628\u0639\u062f  \u0627\u0644\u0635\u0648\u0631\u0647 \u0628\u0639\u062f \u0627\u062c\u0631\u0627\u0621 \u062a\u062d\u062c\u064a\u0645 \u0644\u0647\u0627 \nprint(img.shape)","4b750665":"# \u0647\u0630\u0627 \u0647\u0648 \u0627\u0644\u0645\u062e\u0632\u0646 \u0627\u0644\u0630\u064a \u064a\u062d\u062a\u0648\u064a \u0639\u0644\u064a \u0643\u0644 \u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u062a\u064a \u0644\u064a\u062f\u0646\u0627 \u0628\u0646\u0641\u0633 \u0627\u0644\u0627\u0628\u0639\u0627\u062f \nprint(X_train.shape)","e80ee17c":"# test images\nX_test = np.zeros((len(test_ids), IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.uint8)\nsizes_test = []\nprint('Resizing test images') \nfor n, id_ in tqdm(enumerate(test_ids), total=len(test_ids)):\n    path = TEST_PATH + id_\n    img = imread(path + '\/images\/' + id_ + '.png')[:,:,:IMG_CHANNELS]\n    sizes_test.append([img.shape[0], img.shape[1]])\n    img = resize(img, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)\n    X_test[n] = img\n\nprint('Done!')","b6072dbf":"X_test.shape","a0ccfaa6":"img.shape","24f05d2b":"# \u0647\u0646\u0627 \u0642\u0645\u0646\u0627 \u0628\u0627\u0646\u0634\u0627\u0621 \u0631\u0642\u0645 \u0639\u0634\u0648\u0627\u0626\u064a \u064a\u062a\u062f\u0631\u062c \u0645\u0646 0 \u0627\u0644\u064a 670 \nimage_x = random.randint(0, len(train_ids))\n# \u0642\u0645\u0646\u0627 \u0628\u062a\u0645\u0631\u064a\u0631 \u0630\u0644\u0643 \u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0639\u0634\u0648\u0627\u0626\u064a \nimshow(X_train[image_x])\nplt.show()\n# \u0647\u0646\u0627 \u0642\u0645\u0646\u0627 \u0628\u062a\u0645\u0631\u064a\u0631 \u0646\u0641\u0633 \u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u064a \u0635\u0648\u0631 \u0627\u0644\u0645\u0627\u0633\u0643 \nimshow(np.squeeze(Y_train[image_x]))\nplt.show()","00dab3b5":"# \u0647\u0646\u0627 \u0647\u064a\u0643\u0644 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u0627\u0644\u0630\u064a \u0644\u062f\u064a\u0646\u0627 \n#Build the model\ninputs = tf.keras.layers.Input((IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS))\ns = tf.keras.layers.Lambda(lambda x: x \/ 255)(inputs)\n\n#Contraction path\nc1 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(s)\nc1 = tf.keras.layers.Dropout(0.1)(c1)\nc1 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c1)\np1 = tf.keras.layers.MaxPooling2D((2, 2))(c1)\n\nc2 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p1)\nc2 = tf.keras.layers.Dropout(0.1)(c2)\nc2 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c2)\np2 = tf.keras.layers.MaxPooling2D((2, 2))(c2)\n \nc3 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p2)\nc3 = tf.keras.layers.Dropout(0.2)(c3)\nc3 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c3)\np3 = tf.keras.layers.MaxPooling2D((2, 2))(c3)\n \nc4 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p3)\nc4 = tf.keras.layers.Dropout(0.2)(c4)\nc4 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c4)\np4 = tf.keras.layers.MaxPooling2D(pool_size=(2, 2))(c4)\n \nc5 = tf.keras.layers.Conv2D(256, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p4)\nc5 = tf.keras.layers.Dropout(0.3)(c5)\nc5 = tf.keras.layers.Conv2D(256, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c5)\n\n#Expansive path \nu6 = tf.keras.layers.Conv2DTranspose(128, (2, 2), strides=(2, 2), padding='same')(c5)\nu6 = tf.keras.layers.concatenate([u6, c4])\nc6 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u6)\nc6 = tf.keras.layers.Dropout(0.2)(c6)\nc6 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c6)\n \nu7 = tf.keras.layers.Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same')(c6)\nu7 = tf.keras.layers.concatenate([u7, c3])\nc7 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u7)\nc7 = tf.keras.layers.Dropout(0.2)(c7)\nc7 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c7)\n \nu8 = tf.keras.layers.Conv2DTranspose(32, (2, 2), strides=(2, 2), padding='same')(c7)\nu8 = tf.keras.layers.concatenate([u8, c2])\nc8 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u8)\nc8 = tf.keras.layers.Dropout(0.1)(c8)\nc8 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c8)\n \nu9 = tf.keras.layers.Conv2DTranspose(16, (2, 2), strides=(2, 2), padding='same')(c8)\nu9 = tf.keras.layers.concatenate([u9, c1], axis=3)\nc9 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u9)\nc9 = tf.keras.layers.Dropout(0.1)(c9)\nc9 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c9)\n \noutputs = tf.keras.layers.Conv2D(1, (1, 1), activation='sigmoid')(c9)\n \nmodel = tf.keras.Model(inputs=[inputs], outputs=[outputs])\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.summary()","1041816a":"#Modelcheckpoint\ncheckpointer = tf.keras.callbacks.ModelCheckpoint('model_for_nuclei.h5', verbose=1, save_best_only=True)\n\ncallbacks = [\n        tf.keras.callbacks.EarlyStopping(patience=2, monitor='val_loss'),\n        tf.keras.callbacks.TensorBoard(log_dir='logs')]\n\nresults = model.fit(X_train, Y_train, validation_split=0.1, batch_size=16, epochs=5, callbacks=callbacks)","7e1116b0":"idx = random.randint(0, len(X_train))\n\n\npreds_train = model.predict(X_train[:int(X_train.shape[0]*0.9)], verbose=1)\npreds_val = model.predict(X_train[int(X_train.shape[0]*0.9):], verbose=1)\npreds_test = model.predict(X_test, verbose=1)","12065f80":"preds_test.shape","5209f7f8":"preds_train_t = (preds_train > 0.5).astype(np.uint8)\npreds_val_t = (preds_val > 0.5).astype(np.uint8)\npreds_test_t = (preds_test > 0.5).astype(np.uint8)","b518c5c2":"# \u0647\u0646\u0627 \u0646\u062a\u0627\u0643\u062f \u0645\u0646 \u0627\u0646 \u0646\u0646\u062a\u0627\u0626\u062c \u0627\u0644\u062a\u062f\u0631\u064a\u0628 \u062c\u064a\u062f\u0647 \n# Perform a sanity check on some random training samples\nix = random.randint(0, len(preds_train_t))\nimshow(X_train[ix])\nplt.show()\nimshow(np.squeeze(Y_train[ix]))\nplt.show()\nimshow(np.squeeze(preds_train_t[ix]))\nplt.show()\n\n# Perform a sanity check on some random validation samples\nix = random.randint(0, len(preds_val_t))\nimshow(X_train[int(X_train.shape[0]*0.9):][ix])\nplt.show()\nimshow(np.squeeze(Y_train[int(Y_train.shape[0]*0.9):][ix]))\nplt.show()\nimshow(np.squeeze(preds_val_t[ix]))\nplt.show()","84d767cc":"# work in progress.......","50344a69":"# \u0647\u0630\u0627 \u0627\u0644\u0645\u0648\u062f\u064a\u0644 \u0633\u064a\u0621 \u0639\u0646\u062f\u0645\u0627 \u064a\u062a\u0639\u0644\u0642 \u0627\u0644\u0627\u0645\u0631 \u0628\u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0642\u0644\u064a\u0644\u0647 .\n# \u0643\u0645\u0627 \u0627\u0646\u0647 \u064a\u0633\u062a\u063a\u0631\u0642 \u0627\u0644\u0643\u062b\u064a\u0631 \u0645\u0646 \u0627\u0644\u0648\u0642\u062a \u0641\u064a \u0627\u0644\u062a\u0639\u0644\u0645 \u0627\u0646 \u0643\u0627\u0646\u062a \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0643\u0628\u064a\u0631\u0647 .","879fe3bc":"# Thanks a lot: \n[https:\/\/github.com\/bnsreenu\/python_for_microscopists\/blob\/master\/076-077-078-Unet_nuclei_tutorial.py](http:\/\/)"}}