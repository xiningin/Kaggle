{"cell_type":{"fab1b556":"code","7f3b8243":"code","1eba9b7e":"code","77d0d067":"code","bf04f89c":"code","663f2548":"code","e7286133":"code","52a2e757":"code","25314ead":"code","51a8ea0d":"code","fab61158":"code","413f9923":"code","263d7261":"code","a5e3ac10":"code","15509917":"code","bc7e84ba":"code","1efe7be0":"code","8de6144b":"code","0bea88d7":"code","2685a3e0":"code","f5777d48":"code","594fb8e3":"code","a71be033":"code","9c7039c7":"code","c806c80a":"code","8c0e2c8f":"code","336b8c2f":"code","13f598f9":"code","b18c8ae3":"code","6ae09e2b":"code","8218e11a":"code","dc0a7d7c":"code","53fb6d78":"code","c796380c":"code","4f7ce1c2":"code","e16e23ea":"code","7daf1ffe":"code","d748514f":"markdown","39415afe":"markdown","b2f8acc8":"markdown","22aa4018":"markdown","85aec493":"markdown","bb40003b":"markdown","32700c84":"markdown","c6d19e15":"markdown","c72b817b":"markdown","20557b33":"markdown","91392203":"markdown","3093c850":"markdown","b33e9433":"markdown","4a84fe2a":"markdown","3bdc8df4":"markdown","34466fab":"markdown","f5f2a626":"markdown","c62f95d4":"markdown","11659a9f":"markdown","5aca5333":"markdown","4ab1b93c":"markdown","efa653cb":"markdown","dce85f97":"markdown","3cf5fe84":"markdown","99b3767a":"markdown","e2386220":"markdown","6aafd0af":"markdown","6b14f5ea":"markdown","dbfb2d20":"markdown","d972b0e9":"markdown","0c289b79":"markdown","e906f40c":"markdown","54eb2e93":"markdown"},"source":{"fab1b556":"# Load libraries\nimport numpy as np\nimport pandas as pd\nfrom pandas import read_csv\nimport seaborn as sns\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n#Load dataset\ndata_train=pd.read_csv(\"..\/input\/train_V2.csv\")\ntrain_df=data_train.sample(n=100000)\n","7f3b8243":"train_df=train_df.drop(['Id','groupId','matchId'],axis=1)\ntrain_df.info()","1eba9b7e":"plt.title('Correlation B\/w Winning % and other Independent Variable')\ntrain_df.corr()['winPlacePerc'].sort_values().plot(kind='barh',figsize=(10,8))","77d0d067":"travel_values=train_df[['walkDistance','rideDistance','swimDistance']].sum()\nplt.pie(travel_values, explode=[0,0.1,0],\n        labels=['Walking','Riding','Swimming'], autopct='%1.1f%%',startangle=90)","bf04f89c":"train_df[['walkDistance','rideDistance']].hist(bins=15, color='steelblue', \n                                                              edgecolor='black', linewidth=1.0,\n                                                              xlabelsize=8, ylabelsize=8, grid=False)    \nplt.tight_layout(rect=(0, 0, 0.9, 0.9)) ","663f2548":"plt.subplots(1,1,figsize=(8,5))\nplt.subplot(1,1,1,title='Relationship value[0-1]')\nax1=sns.heatmap(train_df[['walkDistance','rideDistance','swimDistance','winPlacePerc']].corr(),annot=True,center=True)","e7286133":"sns.scatterplot(train_df['walkDistance'],train_df['winPlacePerc'])","52a2e757":"plt.subplots(2,2,figsize=(20,16))\n\nplt.subplot(2,2,1)\nDBNOS = pd.cut(train_df['DBNOs'], [-1, 0, 2, 5, 10, 60], \n               labels=['0_times','1-2_times', '3-5_times', '6-10_times', '10+_times'])\n\nax1=sns.boxplot(DBNOS,train_df['winPlacePerc'])\n\nplt.subplot(2,2,2)\nRevives = pd.cut(train_df['revives'], [-1, 0, 2, 5, 10, 60], \n               labels=['0_times','1-2_times', '3-5_times', '6-10_times', '10+_times'])\n\nsns.boxplot(Revives,train_df['winPlacePerc'])\n\nplt.subplot(2,2,3)\nHeals = pd.cut(train_df['heals'], [-1, 0, 2, 5, 10, 60], \n               labels=['0_times','1-2_times', '3-5_times', '6-10_times', '10+_times'])\n\nsns.boxplot(Heals,train_df['winPlacePerc'])\n\nplt.subplot(2,2,4)\nBoosts = pd.cut(train_df['boosts'], [-1, 0, 2, 5, 10, 60], \n               labels=['0_times','1-2_times', '3-5_times', '6-10_times', '10+_times'])\n\nsns.boxplot(Boosts,train_df['winPlacePerc'])\n\n","25314ead":"plt.subplots(1,1,figsize=(10,5))\nplt.subplot(1,1,1,title='Relationship value range [0-1]')\nax1=sns.heatmap(train_df[['boosts','heals','revives','DBNOs','winPlacePerc']].corr(),annot=True)","51a8ea0d":"plt.subplots(1,2,figsize=(20,5))\nplt.subplot(1,2,1,title='Boosts Vs. Heals')\nsns.lineplot(train_df['boosts'],train_df['heals'])\nplt.subplot(1,2,2,title='Boosts Vs. Winning Percentage(%)')\nsns.lineplot(train_df['boosts'],train_df['winPlacePerc'])","fab61158":"train_df[['weaponsAcquired','damageDealt']].hist(bins=15, color='steelblue', \n                                                              edgecolor='black', linewidth=1.0,\n                                                              xlabelsize=8, ylabelsize=8, grid=False)    \nplt.tight_layout(rect=(0, 0, 0.9, 0.9)) ","413f9923":"plt.subplots(1,1,figsize=(8,5))\n\nplt.subplot(1,1,1)\nVehicle_destroys = pd.cut(train_df['vehicleDestroys'], [-1, 0, 1, 2, 3], \n               labels=['0_times','1_times', '2_times', '3_times'])\n\nax1=sns.boxplot(Vehicle_destroys,train_df['winPlacePerc'])","263d7261":"plt.subplots(1,1,figsize=(8,5))\nplt.subplot(1,1,1,title='Relationship value range [0-1]')\nax1=sns.heatmap(train_df[['weaponsAcquired','damageDealt','vehicleDestroys','winPlacePerc']].corr(),annot=True)","a5e3ac10":"plt.subplots(1,2,figsize=(20,5))\nplt.subplot(1,2,1,title='weaponsAcquired Vs. Damagedealt')\nsns.lineplot(train_df['weaponsAcquired'],train_df['damageDealt'])\nplt.subplot(1,2,2,title='weaponsAcquired Vs. Winning Percentage(%)')\nsns.lineplot(train_df['weaponsAcquired'],train_df['winPlacePerc'])","15509917":"\ntrain_df[['longestKill','killPlace']].hist(bins=15, color='steelblue', \n                                                              edgecolor='black', linewidth=1.0,\n                                                              xlabelsize=8, ylabelsize=8, grid=False)    \nplt.tight_layout(rect=(0, 0, 0.9, 0.9)) ","bc7e84ba":"plt.subplots(1,1,figsize=(8,5))\n\nplt.subplot(1,1,1)\nKill_streak = pd.cut(train_df['killStreaks'], [-1, 0, 1, 2, 3,10], \n               labels=['0_times','1_times', '2_times', '3_times','3+times'])\n\nax1=sns.boxplot(Kill_streak,train_df['winPlacePerc'])","1efe7be0":"plt.title('Killing Place(position) Vs. Winning percentage')\nsns.lineplot(train_df['killPlace'],train_df['winPlacePerc'])","8de6144b":"plt.subplots(1,1,figsize=(8,5))\nplt.subplot(1,1,1,title='Relationship value range [0-1]')\nax1=sns.heatmap(train_df[['longestKill','killStreaks','killPlace','winPlacePerc']].corr(),annot=True)","0bea88d7":"plt.title('Killing Place(position) Vs. killstreak')\nsns.lineplot(train_df['killPlace'],train_df['killStreaks'])","2685a3e0":"plt.subplots(1,2,figsize=(20,8))\n\nplt.subplot(1,2,1)\nKills = pd.cut(train_df['kills'], [-1, 0, 2, 5, 10, 60], \n               labels=['0_times','1-2_times', '3-5_times', '6-10_times', '10+_times'])\n\nax1=sns.boxplot(Kills,train_df['winPlacePerc'])\n\nplt.subplot(1,2,2)\nHeadshot = pd.cut(train_df['headshotKills'], [-1, 0, 2, 5, 10, 60], \n               labels=['0_times','1-2_times', '3-5_times', '6-10_times', '10+_times'])\n\nsns.boxplot(Headshot,train_df['winPlacePerc'])\n\n\n","f5777d48":"\nX = np.arange(train_df['roadKills'].value_counts().count())[1:]\nx=train_df['roadKills'].value_counts().count()-train_df['teamKills'].value_counts().count()\na=list(train_df['teamKills'].value_counts().sort_index()[1:])  # values taken from one and exclues zero.\na.extend(list(np.round(np.zeros(x))))  # Added three zeros because team kills only have 5 unique values\nb=list(train_df['roadKills'].value_counts().sort_index()[1:])\n\nax1=plt.bar(X + 0.00, a, color = 'b', width = 0.25)\nax2=plt.bar(X + 0.25, b, color = 'g', width = 0.25)\nplt.legend((ax1[0],ax2[0]),('teamkills','roadkills'))\nplt.show()\n","594fb8e3":"plt.subplots(1,1,figsize=(8,5))\nplt.subplot(1,1,1,title='Relationship value range [0-1]')\nax1=sns.heatmap(train_df[['headshotKills','kills','roadKills','teamKills','winPlacePerc']].corr(),annot=True)","a71be033":"data_match=train_df[['matchType','winPlacePerc']]\ndata_match=pd.get_dummies(data_match)\nplt.title('Match type relationship with winning percentage(%)')\ndata_match.corr()['winPlacePerc'][1:].sort_values().plot.barh()","9c7039c7":"plt.subplots(2,2,figsize=(20,16))\n\nplt.subplot(2,2,1)\nwinpt = pd.cut(train_df['winPoints'], [-1, 0, 200, 500, 1000, 2000,5000], \n               labels=['<0_pts','1-200_pts', '201-500_pts', '501-1000_pts', \n                       '1001-2000_pts','2000+_pts'])\n\nax1=sns.boxplot(winpt,train_df['winPlacePerc'])\n\nplt.subplot(2,2,2)\nrankpt = pd.cut(train_df['rankPoints'], [-1, 0, 200, 500, 1000, 2000,5000,10000], \n               labels=['<0_pts','1-200_pts', '201-500_pts', '501-1000_pts', \n                       '1001-2000_pts','2000-5000_pts','5000+_pts'])\n\n\nsns.boxplot(rankpt,train_df['winPlacePerc'])\n\nplt.subplot(2,2,3)\nkillpt = pd.cut(train_df['killPoints'], [-1, 0, 200, 500, 1000, 2000,5000,10000], \n               labels=['<0_pts','1-200_pts', '201-500_pts', '501-1000_pts', \n                       '1001-2000_pts','2000-5000_pts','5000+_pts'])\n\nsns.boxplot(killpt,train_df['winPlacePerc'])\n\nplt.subplot(2,2,4)\nnumgrp = pd.cut(train_df['numGroups'], [-1, 0, 20, 40, 60, 80,100,120], \n               labels=['0_grp','1-20_grp', '21-40_grp','41-60_grp','61-80_grp','81-100_grp',\n                      '101+_grp'])\n\nsns.boxplot(numgrp,train_df['winPlacePerc'])\n\n","c806c80a":"train_df.info()","8c0e2c8f":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ntrain_df['matchType']=le.fit_transform(train_df['matchType'])\n","336b8c2f":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nx_features=list(train_df)\ndata_mat = train_df[x_features].as_matrix()                                                                                                              \nvif = [ variance_inflation_factor( data_mat,i) for i in range(data_mat.shape[1]) ]\nvif_factors = pd.DataFrame()\nvif_factors['column'] = list(x_features)\nvif_factors['vif'] = vif     \nvif_factors.sort_values(by=['vif'],ascending=False)[0:10]","13f598f9":"x_features.remove('maxPlace')\nx_features.remove('numGroups')\nx_features.remove('winPoints')\nx_features.remove('rankPoints')\nx_features.remove('killPoints')\nx_features.remove('matchDuration')\ndata_mat = train_df[x_features].as_matrix()                                                                                                              \nvif = [ variance_inflation_factor( data_mat,i) for i in range(data_mat.shape[1]) ]\nvif_factors = pd.DataFrame()\nvif_factors['column'] = list(x_features)\nvif_factors['vif'] = vif     \nvif_factors.sort_values(by=['vif'],ascending=False)[0:10]","b18c8ae3":"train_df.corr()['kills'].sort_values(ascending=False)[:10]","6ae09e2b":"x_features.remove('winPlacePerc')\nx_features.remove('headshotKills')\ndata_mat = train_df[x_features].as_matrix()                                                                                                              \nvif = [ variance_inflation_factor( data_mat,i) for i in range(data_mat.shape[1]) ]\nvif_factors = pd.DataFrame()\nvif_factors['column'] = list(x_features)\nvif_factors['vif'] = vif     \nvif_factors.sort_values(by=['vif'],ascending=False)[0:10]","8218e11a":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error","dc0a7d7c":"data_train=data_train[data_train['winPlacePerc'].isnull()==False]\ndata_train['matchType']=le.fit_transform(data_train['matchType'])","53fb6d78":"#For building model i am using full data set.\nX=data_train[x_features]\nY=data_train['winPlacePerc']\n# Split-out validation dataset\nvalidation_size = 0.30\nseed = 7\nX_train, X_validation, Y_train, Y_validation = train_test_split(X, Y, test_size=validation_size, random_state=seed)","c796380c":"model1=GradientBoostingRegressor(learning_rate=0.8)\nmodel1=model1.fit(X_train,Y_train)\nprint(model1.score(X_train,Y_train))\nprint(model1.score(X_validation,Y_validation))","4f7ce1c2":"test_df=pd.read_csv('..\/input\/test_V2.csv')","e16e23ea":"test_df['matchType']=le.fit_transform(test_df['matchType'])\nX_test=test_df[x_features]","7daf1ffe":"pred=pd.DataFrame(model1.predict(X_test),test_df['Id'])\npred.rename({0:'winPlacePerc'},axis=1).to_csv('sample_submission.csv')","d748514f":"- Kills and damage dealt are highly correlated to target column.so we remove the column which is highly correlated with kills and that will the vif value for kills.","39415afe":"![](https:\/\/cdn.images.express.co.uk\/img\/dynamic\/143\/590x\/secondary\/PUBG-Season-3-1471563.jpg?r=1534919473997)","b2f8acc8":"# Game kill Attributes\n- **headshotKills** - Number of enemy players killed with headshots.\n- **kills** - Number of enemy players killed.\n- **roadKills** - Number of kills while in a vehicle.\n- **teamKills** - Number of times this player killed a teammate.","22aa4018":"# Multicollinearity.\nMulticollinearity exists when two or more of the predictors in a regression model are moderately or highly correlated. \n### Types of multicollinearity\nThere are two types of multicollinearity:\n- **Structural multicollinearity** is a mathematical artifact caused by creating new predictors from other predictors \u2014 such as, creating the predictor x2 from the predictor x.\n- **Data-based multicollinearity**, on the other hand, is a result of a poorly designed experiment, reliance on purely observational data, or the inability to manipulate the system on which the data are collected.\n\nIn the case of structural multicollinearity, the multicollinearity is induced by what you have done. Data-based multicollinearity is the more troublesome of the two types of multicollinearity. Unfortunately it is the type we encounter most often!","85aec493":"# ***Game Life Attributes***\n- **boosts** - Number of boost items used.\n- **heals** - Number of healing items used.\n- **revives** - Number of times this player revived teammates.\n- **DBNOs(Dead But Not Out)** - Number of enemy players knocked.","bb40003b":"# ***Battle achievement attributes***\n- **longestKill** - Longest distance between player and player killed at time of death. This may be misleading, as downing a player and driving away may lead to a large longestKill stat.\n- **killStreaks** - Max number of enemy players killed in a short amount of time.\n- **killPlace** - Ranking in match of number of enemy players killed.","32700c84":"- Teamkills count will be always high in the game when compared with road kills ","c6d19e15":"- match type is object, so it is converted to dummies to built analyse\/build model.","c72b817b":"# ***Game Weapons\/Damages Attributes***\n- **weaponsAcquired** - Number of weapons picked up.\n- **damageDealt** - Total damage dealt. Note: Self inflicted damage is subtracted.\n- **vehicleDestroys** - Number of vehicles destroyed","20557b33":"![](https:\/\/i.kinja-img.com\/gawker-media\/image\/upload\/t_original\/g1lbmognqejekzh5qeoa.jpg)","91392203":"![](https:\/\/cdn.didongthongminh.vn\/upload_images\/2018\/06\/pubg-player-unknown-battlegrounds-characters-uhd-4k-wallpaper.jpg)\n- This Kernel explains **Player Unknown Battle Ground** commonly known as PUBG Game **Winning Percentage Prediction**.\n- Train dataset contains 44,46,966 records , but here I used one lakh sample records from the given dataset. ","3093c850":"- Repeatedly killing the enemy in short period of time will increase the winning percentage(%). ","b33e9433":"- DBNOs,boosts and heals are having similar charactereistics(increases the winning % with increase in itself ).\n- 3-5 times revived player is always having more winning percentage.","4a84fe2a":"![](https:\/\/www.pcgamesn.com\/wp-content\/uploads\/legacy\/pubg_4.jpg)\n","3bdc8df4":"# Please share your comments and it will be more helpful in upcomings.","34466fab":"- Player destroyed atleast one vehicle have will have winning percentage more than 50.","f5f2a626":"# Game Points Attributes:\n- **rankPoints** - Elo-like ranking of player. This ranking is inconsistent and is being deprecated in the API\u2019s next version, so use with caution. Value of -1 takes place of \u201cNone\u201d.\n- **winPoints** - Win-based external ranking of player. (Think of this as an Elo ranking where only winning matters.) If there is a value other than -1 in rankPoints, then any 0 in winPoints should be treated as a \u201cNone\u201d.\n- **killPoints** - Kills-based external ranking of player. (Think of this as an Elo ranking where only kills matter.) If there is a value other than -1 in rankPoints, then any 0 in killPoints should be treated as a \u201cNone\u201d.\n- **numGroups** - Number of groups we have data for in the match.","c62f95d4":"- Player quickly killing the enemy will always be at top position.","11659a9f":"- Winning percentage(%) increases till some boosts times and then decreases rapidly.","5aca5333":"- A **variance inflation factor**(VIF) detects multicollinearity in regression analysis.\n- VIF=1\/(1-r2)\n- A rule of thumb for interpreting the variance inflation factor:\n1 = not correlated.\nBetween 1 and 5 = moderately correlated.\nBetween 5 and 10 =  correlated \nGreater than 10 = highly correlated.","4ab1b93c":"- Top Rank(position) player will always have high winning percentage(%).","efa653cb":"# ***Different types of matches***\n- **matchType** - String identifying the game mode that the data comes from. The standard modes are \u201csolo\u201d, \u201cduo\u201d, \u201csquad\u201d, \u201csolo-fpp\u201d, \u201cduo-fpp\u201d, and \u201csquad-fpp\u201d; other modes are from events or custom matches.","dce85f97":"-  **Id,groupId,matchId** columns are unique identifiers , so they are **dropped**","3cf5fe84":"![](https:\/\/www.esports.net\/wp-content\/uploads\/2018\/10\/new-pubg-rank-points.jpg)","99b3767a":"- Remove the variables with high VIF values.","e2386220":"- 1 Lakh sample record for training model contains **no null values**.","6aafd0af":"-    **Travelling distance(walking) and Kills**  are **highly influencing** the Winning Percentage of the player.","6b14f5ea":"- More than 2000 points in killing or ranking will have better change of winning.\n- All number of groups will almost have same winning percentage(%).","dbfb2d20":"![](https:\/\/cdn-static.denofgeek.com\/sites\/denofgeek\/files\/styles\/main_wide\/public\/oneshot-main.jpg?itok=Ee52yuEn)","d972b0e9":"- Damage done by others will be decreased when the weapons depot size increases.\n- Winning Percentage(%) constantly increases when the player have large depot of weapons","0c289b79":" #  *** Game Travel Attributes***\n - **walkDistance** - Total distance traveled on foot measured in meters.\n - **rideDistance** - Total distance traveled in vehicles measured in meters.\n - **swimDistance** - Total distance traveled by swimming measured in meters.","e906f40c":"- Instead of killing normal,headshot will slightly increase the winning percentage(%).","54eb2e93":"![](https:\/\/st1.latestly.com\/wp-content\/uploads\/2018\/09\/PUBG-Photo-Credit-Variety.com_-784x441.jpg)"}}