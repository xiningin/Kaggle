{"cell_type":{"cc1c024a":"code","8fed2720":"code","82ded8b1":"code","18275dac":"code","819d27bd":"code","f4c150b3":"code","6f1457ba":"code","dc283248":"code","66cce184":"code","a1c0301d":"code","6f253872":"code","24a6dbc3":"code","c7a9b074":"code","a840009c":"code","d269b28d":"code","22d1e590":"code","202b5809":"code","79e5acae":"code","61533bb4":"markdown","1f2d4aae":"markdown","4f60f4e0":"markdown","1467c998":"markdown","cacf89ad":"markdown"},"source":{"cc1c024a":"import numpy as np\nimport pandas as pd\nimport matplotlib\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom plotnine import *\nimport plotnine\nimport os\n\n%matplotlib inline\nplotnine.options.figure_size = (8,2.5)\nprint(os.listdir(\"..\/input\"))\ndata = pd.read_csv(\"..\/input\/train.csv\", index_col = False, engine = \"python\")\n\n#data = pd.read_csv(r\"D:\\1\u5b66\u4e60\\titanic\u6570\u636e\\train.csv\", index_col = False, engine = \"python\")\nprint(\n\"\"\"\nPassengerId\uff1a\u65c5\u5ba2ID  Survived\uff1a\u662f\u5426\u5e78\u5b58  Pclass\uff1a\u4e58\u5ba2\u7b49\u7ea7     Name\uff1a\u65c5\u5ba2\u59d3\u540d\uff0c\nSex\uff1a\u6027\u522b            Age\uff1a\u5e74\u9f84           SibSp\uff1a\u5802\u5144\u5f1f\u59b9\u4e2a\u6570  Parch\uff1a\u7236\u6bcd\u4e0e\u5c0f\u5b69\u4e2a\u6570\uff0c\nTicket\uff1a\u8239\u7968\u4fe1\u606f     Fare\uff1a\u7968\u4ef7          Cabin\uff1a\u5ba2\u8231          Embarked\uff1a\u7b49\u8231\u6e2f\u53e3\n\"\"\")\ndata.info()\nprint(\"Age\u7f3a\u5931\u503c\u6709{0}\u4e2a\".format(data.Age.isnull().sum()))\ndata[\"Survived\"] = data.Survived.astype(\"category\")","8fed2720":"#\u79f0\u8c13\u4e0e\u5b58\u6d3b\u7684\u5173\u7cfb\ndata[\"Name2\"]=data.Name.str.findall(\",\\s*(.*?)\\s*\\.\").apply(lambda x: x[0])\nprint(data.pivot_table(values=\"PassengerId\", index=\"Name2\", aggfunc=\"count\").sort_values(\n    by=\"PassengerId\", ascending=False, na_position=\"first\"))\ndata.query(\"Name2=='the Countess'\")\nname_label = [\"Mr\", \"Miss\", \"Mrs\", \"Master\", \"Dr\", \"Sir\",\"Ms\", \"Lady\"]\ndata[\"Name2\"] = data.Name2.apply(lambda x: x if x in name_label else \"Other\")\nprint(ggplot(data, aes(x=\"Name2\", fill = \"Survived\"))+\n      geom_bar(position=\"dodge\")\n      #stat_bin(aes(y=\"..count..\", label=\"..count..\"), geom=\"text\", size=10, lineheight=0.2,parse=lambda x: \" \" if x else x)\n     )\nprint(ggplot(data, aes(x=\"Name2\",y=\"Age\"))+\n      geom_boxplot()\n     )","82ded8b1":"#\u5e74\u9f84\u5206\u5e03\uff1a[15,36, 50, 80]\ndata2 = data.dropna(axis=0, how=\"any\", subset=[\"Age\"])\nage_break = [0, 15,36, 50, 80]\nprint(ggplot(data2, aes(x=\"Age\", fill=\"Survived\"))+\n     geom_histogram(binwidth=1, position=\"stack\", show_legend=True)+\n     geom_vline(xintercept=age_break)+\n     facet_grid(\".~Sex\")\n     )","18275dac":"#\u5802\u5144\u5f1f\u59d0\u59b9\u591a\u4f59\u4e09\u4e2a\u7684\u4e00\u822c\u572820\u5c81\u4ee5\u4e0b\uff0c\u4e14\u66f4\u6613\u6b7b\u4ea1\n(ggplot(data2, aes(x=\"Age\", y=\"SibSp\", color=\"Survived\") )+\n geom_point(size=0.2, position=position_jitter(width=0.01, height=0.2), show_legend=True)+\n facet_grid(\".~Sex\")\n)","819d27bd":"#\u7236\u6bcd\u5b69\u5b50\u591a\u4e8e3\u4eba\u7684\u66f4\u6613\u6b7b\u4ea1\uff0c\u591a\u96c6\u4e2d\u572830-50\u4e4b\u95f4\u3002\n(ggplot(data2, aes(x=\"Age\", y=\"Parch\", color=\"Survived\") )+\n geom_point(size=0.2, position=position_jitter(width=0.01, height=0.2), show_legend=True)+\n facet_grid(\".~Sex\"))","f4c150b3":"(ggplot(data2, aes(x=\"SibSp\", y=\"Parch\", color=\"Age\") )+\n geom_point(size=0.2, position=position_jitter(width=0.2, height=0.2), show_legend=True)+\n facet_grid(\"Survived~Sex\"))","6f1457ba":"#\u4e00\u7b49\u8231\u5e73\u574787.9\uff1b\u4e8c\u7b49\u8231\u5e73\u574721.5\uff1b\u4e09\u7b49\u8231\u5e73\u574713.2\u3002\nprint(ggplot(data2, aes(x=\"Pclass\", y=\"Fare\"))+\n geom_boxplot()+\n scale_y_continuous(limits=[0,280])+\n facet_grid(\".~Pclass\")\n)\ndata2.groupby(by=\"Pclass\").Fare.mean()","dc283248":"#\u4ec5\u8003\u8651\u8231\u4f4d\u6c34\u5e73\u5373\u53ef\uff0c\u9ad8\u7ea7\u8231\u4f4d\u751f\u5b58\u7387\u66f4\u9ad8\uff0c\u603b\u4eba\u6570\u4e5f\u504f\u5c11\u3002\u66f4\u591a\u7684\u662f3\u7b49\u4ed3\n(ggplot(data, aes(x=\"Fare\", fill=\"Survived\"))+\n  geom_histogram(binwidth=10)+\n  geom_vline(xintercept=50, size=0.3)+\n facet_grid(\"Pclass~Sex\", scales=\"free_y\")+\n scale_x_continuous(limits=[0,280])\n)","66cce184":"#\u7968\u4ef7\u572850\u4ee5\u4e0a\u7684\u5973\u6027\u57fa\u672c\u5e78\u5b58\n(ggplot(data, aes(x=\"Age\", y=\"Fare\", color=\"Survived\"))+\n  geom_point(size=0.2, position=\"identity\")+\n  geom_hline(yintercept=15, size = 0.3, color=\"green\", linetype=\"-.\")+\n  geom_hline(yintercept=25, size = 0.3, color= \"green\", linetype=\"-.\")+\n  facet_grid(\".~Sex\")+\n  scale_y_continuous(limits=[0,280])\n)\n#  geom_point(size=0.5, position=position_jitter(width=0, height=0.05)))","a1c0301d":"#\u4ee5\"Name2\"\u7684\u5747\u503c\u66ff\u6362\u7f3a\u5931\u503c\nage_mean = data.groupby(by = [\"Name2\"], axis=0, as_index=False, sort=True).Age.mean().round(decimals=0)\ndata_nona = data.merge(age_mean, on = [\"Name2\"], how = \"left\", suffixes = [\"\",\"_mean\"])\ndata_nona[\"Age\"] = data_nona.apply(lambda x: x.Age_mean if pd.isnull(x.Age) else x.Age, axis=1 )\nprint(data_nona.info())\nprint(ggplot(data_nona, aes(x=\"Age\", fill=\"Survived\"))+\ngeom_histogram(binwidth=10, breaks=age_break, position=\"fill\")+\nscale_x_continuous(limits=[0,85], expand=[0,0])+\nfacet_grid(\".~Sex\")\n)","6f253872":"#\u7279\u5f81\u5904\u7406\uff1a\u5efa\u6a21\u53d1\u73b0Age\u5206\u7bb1\u6548\u679c\u4e0d\u597d\uff0c\u4e4b\u540e\u4f18\u5316\u5206\u7bb1\nage_break_label = list(range(1, len(age_break)))\ndata_nona[\"Age2\"] = pd.cut(data_nona.Age, bins=age_break, right=True, retbins=False,precision=0, labels = age_break_label)\nSex2 = pd.get_dummies(data_nona.Sex, prefix=\"Sex\")\ndata_nona[\"Name3\"] = data_nona.Name2.apply(lambda x: x if x in [\"Mr\", \"Miss\", \"Mrs\", \"Master\"] else \"other\")\nName3 = pd.get_dummies(data_nona.Name3, prefix=\"Name\")\nPclass2 = pd.get_dummies(data_nona.Pclass, prefix=\"Pclass\")\ndata_nona = data_nona.join(Sex2, how=\"inner\", sort = True).join(Pclass2, how=\"inner\", sort=True).join(Name3, how=\"inner\", sort=True)\nfeatures = ['Survived', 'Age', 'SibSp', 'Parch', 'Fare','Sex_female', 'Sex_male','Pclass_1', 'Pclass_2', 'Pclass_3',\n           'Name_Master', 'Name_Miss', 'Name_Mr', 'Name_Mrs', 'Name_other']\ndata_nona = data_nona.filter(items = features, axis = 1)","24a6dbc3":"#\u903b\u8f91\u56de\u5f52\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn import linear_model\nfrom sklearn import metrics\n# \u62c6\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nx_train, x_test, y_train, y_test = model_selection.train_test_split(data_nona.loc[:,features[1:]], data_nona.loc[:,features[0]],\n                                            train_size=0.8, test_size=0.2, random_state=1, shuffle=False)#, stratify=data_nona.Survived)","c7a9b074":"# \u5efa\u7acb\u903b\u8f91\u56de\u5f52\u6a21\u578b\nlg = linear_model.LogisticRegression(penalty=\"l2\", dual=False, tol=0.0001, fit_intercept=True, intercept_scaling=10, \n                                     solver=\"liblinear\", C=0.6, class_weight=None)\nlg.fit(x_train, y_train)\nprint(x_train.columns)\nprint(lg.intercept_)\nprint(lg.coef_)\nlg.score(x_train, y_train, sample_weight=None)","a840009c":"# \u5b66\u4e60\u66f2\u7ebf\ndata_size, scores_train, scores_test = model_selection.learning_curve(lg, x_train, y_train, groups=None, \n                             train_sizes=np.linspace(start=0.1, stop=1.0, num=100, endpoint=True ),\n                              cv = 5, scoring=metrics.make_scorer(metrics.recall_score, pos_label=1), shuffle=False, random_state=1)\nscores_train=scores_train.mean(axis=1)\nscores_test=scores_test.mean(axis=1)\n\n(ggplot(pd.DataFrame({\"x\":data_size, \"scores_train\":scores_train, \"scores_test\":scores_test}), aes(x=\"x\"))+\ngeom_line(aes(y=\"scores_train\"), color=\"red\", show_legend=True)+\ngeom_line(aes(y=\"scores_test\"), color=\"green\", show_legend=True)\n)","d269b28d":"#\u9884\u6d4b\u6240\u5c5e\u7c7b\ny_predic_test=pd.DataFrame(lg.predict(x_test), columns=[\"pred\"], index=x_test.index)\nres = y_predic_test.join(y_test, how=\"inner\")\nprint(pd.crosstab(values=res.pred, index=res.Survived, columns=res.pred, aggfunc=\"count\", rownames=[\"survived\"], colnames=[\"predice\"],\n            margins = True) )\n#\u9884\u6d4b\u6982\u7387\ny_proba_train=pd.DataFrame(lg.predict_proba(x_test)[:,1], columns=[\"pred\"], index=x_test.index)\nres_prob = y_proba_train.join(y_test, how=\"inner\")","22d1e590":"# \u6027\u80fd\u8bc4\u4ef7\nprint('''Confusion_matrix\uff1a\n {0}'''.format(metrics.confusion_matrix(res.iloc[:, 1], res.iloc[:, 0], labels=[0,1], sample_weight=None)))\nprint(\"Recall\uff1a{0:.2%}\".format(metrics.recall_score(res.iloc[:, 1], res.iloc[:, 0], pos_label=1, sample_weight=None)))\nprint(\"Precision\uff1a{0:.2%}\".format(metrics.precision_score(res.iloc[:, 1], res.iloc[:, 0], pos_label=1, sample_weight=None)))\nprint(\"F1\uff1a{0:.2%}\".format(metrics.f1_score(res.iloc[:, 1], res.iloc[:, 0], pos_label=1, sample_weight=None)))\nprint(\"Fbeta_score\uff1a{0:.2%}\".format(metrics.fbeta_score(res.iloc[:, 1], res.iloc[:, 0], beta=1.2, pos_label=1, sample_weight=None)))\nprint(\"AUC\uff1a{0:.2%}\".format(metrics.roc_auc_score(res_prob.iloc[:, 1], res_prob.iloc[:, 0])))\nprint('''Classification_report\uff1a\n      {0}'''.format(metrics.classification_report(res.iloc[:, 1], res.iloc[:, 0], labels=[0, 1], \n                                                  target_names=[\"\u5047\", \"\u771f\"], sample_weight=None, digits=2)))\nPR_curve = metrics.precision_recall_curve(res_prob.iloc[:,1], res_prob.iloc[:,0], pos_label=1, sample_weight=None)\nprint(pd.DataFrame({\"precision\":PR_curve[0], \"recall\":PR_curve[1]}).plot(x=\"precision\", y=\"recall\", kind=\"line\",title=\"PR_Curve\"))\ntpr, fpr, thresholds = metrics.roc_curve(res_prob.iloc[:, 1], res_prob.iloc[:, 0], pos_label=1, sample_weight=None, drop_intermediate=True)\nprint(ggplot(pd.DataFrame({\"tpr\":tpr, \"fpr\":fpr}), aes(x=\"tpr\", y=\"fpr\"))+\n geom_line()+\n geom_abline(slope=1, intercept=0, color=\"red\")+\n ggtitle(title=\"AUC-Curve\")      \n)","202b5809":"1# \u4ea4\u53c9\u9a8c\u8bc1\u83b7\u83b7\u5f97\u6700\u4f73\u60e9\u7f5a\u9879\u56e0\u5b50\uff0c\u5e76\u8fdb\u884c\u6a21\u578b\u9009\u5b9a\nCs=np.linspace(0.1, 1, num=20)\nlg2 = linear_model.LogisticRegressionCV(Cs=Cs, fit_intercept=True, cv=10, dual=False, penalty=\"l2\", scoring=metrics.make_scorer(metrics.roc_auc_score), solver=\"liblinear\", \n                                  tol=0.0001, max_iter=500, class_weight=None, refit=True, intercept_scaling=10, random_state=None)\nlg2.fit(x_train, y_train)\nprint(\"\"\"\u5404\u6298\u6b21\u5f97\u5206\uff1a\n{0}\n\"\"\".format(pd.DataFrame(lg2.scores_[1], columns = Cs)))\nlg2.C_","79e5acae":"# \u5bf9\u6d4b\u8bd5\u6570\u636e\u8fdb\u884c\u9884\u6d4b\u5e76\u4e0a\u4f20Kaggle\u67e5\u770b\u5f97\u5206\ndata_new = pd.read_csv(\"..\/input\/test.csv\", index_col = False, engine = \"python\")\n#data_new = pd.read_csv(r\"D:\\1\u5b66\u4e60\\titanic\u6570\u636e\\test.csv\", index_col = False, engine = \"python\")\n\ndata_new[\"Name2\"]=data_new.Name.str.findall(\",\\s*(.*?)\\s*\\.\").apply(lambda x:x[0] if x[0] in name_label else \"other\")\ndata_new[\"Name3\"]=data_new.Name.str.findall(\",\\s*(.*?)\\s*\\.\").apply(lambda x:x[0] if x[0] in ['Mr', 'Miss', 'Mrs', 'Master'] else \"other\")\n\n# \u8865\u5145Age\u7684\u7f3a\u5931\u503c\ndata_new_nona = data_new.merge(age_mean, on = [\"Name2\"], how = \"left\", suffixes = [\"\",\"_mean\"])\ndata_new_nona[\"Age\"] = data_new_nona.apply(lambda x: x.Age_mean if pd.isnull(x.Age) else x.Age, axis=1 )\n# \u8865\u5145Fare\u7684\u7f3a\u5931\u503c\nFare_mean_test = data.groupby(by = [ \"Pclass\"], axis=0, as_index=False, sort=True).Fare.mean().round(decimals=0)\ndata_new_nona = data_new_nona.merge(Fare_mean_test, on = [\"Pclass\"], how = \"left\", suffixes = [\"\",\"_mean\"])\ndata_new_nona[\"Fare\"] = data_new_nona.apply(lambda x: x.Fare_mean if pd.isnull(x.Fare) else x.Fare, axis=1 )\n# \u7279\u5f81\u53d8\u6362\ndata_new_nona[\"Age2\"] = pd.cut(data_new_nona.Age, bins=age_break, right=True, retbins=False,precision=0, labels = age_break_label)\nSex2_new = pd.get_dummies(data_new_nona.Sex, prefix=\"Sex\")\nPclass2_new = pd.get_dummies(data_new_nona.Pclass, prefix=\"Pclass\")\nName3_new = pd.get_dummies(data_new_nona.Name3, prefix=\"Name\")\ndata_new_nona = data_new_nona.join(Sex2_new, how=\"inner\", sort = True).join(\n    Pclass2_new, how=\"inner\", sort=True).join(\n    Name3_new, how=\"inner\", sort=True)\ndata_new_nona = data_new_nona.filter(items = features, axis = 1)\npd.DataFrame({\"Survived\":lg.predict(data_new_nona)}, index=data_new.PassengerId).to_csv(\"logistic_submission.csv\", index=True)\n#pd.DataFrame({\"result\":lg.predict(data_new_nona)}, index=data_new.PassengerId, columns=[\"Survived\"]).to_csv(r\"D:\\1\u5b66\u4e60\\titanic\u6570\u636e\\res.csv\", index=True)\n#lg.predict_proba(data_new_nona)","61533bb4":"\u7efc\u4e0a\uff0c\u9009\u62e9\u5e74\u9f84\u3001\u6027\u522b\u3001\u8231\u4f4d\u3001\u7968\u4ef7\u3001SibSp\u548cParch\u3001\u79f0\u547c\u3002","1f2d4aae":"# \u7279\u5f81\u53d8\u6362\uff1a\u8865\u5145\u5e74\u9f84\u7f3a\u5931\u503c\uff1b\u5bf9\u5e74\u9f84\u8fdb\u884c\u5206\u7bb1","4f60f4e0":"# \u5efa\u6a21","1467c998":"# \u673a\u5668\u5b66\u4e60\uff1a\u6cf0\u5766\u5c3c\u514b\u53f7\u6570\u636e\u5206\u6790","cacf89ad":"# \u6570\u636e\u63a2\u7d22"}}