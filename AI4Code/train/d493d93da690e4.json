{"cell_type":{"df318b27":"code","62957afe":"code","5b63bade":"code","86edda3c":"code","03fb905d":"code","97f339ea":"code","add8458a":"code","0b2b46ec":"code","f0d5fee2":"code","53acff20":"code","739511a7":"code","025e7db9":"code","565aa485":"code","bc995ddf":"code","3c74bf72":"code","8f42cbc6":"code","8ba489f4":"code","dc65296d":"code","c4f989c2":"code","c5eda7c5":"code","53343b5b":"code","8410da69":"code","70134c1f":"code","93cac75d":"code","5d37a199":"code","b3158960":"code","523309e3":"code","bd4e37bd":"code","6cf5c4cd":"code","d6239502":"markdown","38e98fd8":"markdown","842c872d":"markdown","19487ec3":"markdown","fc13819b":"markdown","f0b5f5ad":"markdown","efdc16e8":"markdown","b7c3a490":"markdown","12a6796d":"markdown","e2d34e96":"markdown","29ce37ad":"markdown","ed3b2801":"markdown","b688e824":"markdown","a037201a":"markdown","d6aa7c1b":"markdown","9b6e5caf":"markdown","f0944063":"markdown","655fc560":"markdown","3472afd8":"markdown","ae75a950":"markdown"},"source":{"df318b27":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sklearn \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","62957afe":"data = pd.read_csv('..\/input\/customer-churn-with-explainable-ai\/Churn_Modelling.csv')\ndata.head()","5b63bade":"data.info()","86edda3c":"data.nunique()","03fb905d":"# inspect target results\nsns.countplot(data['Exited'])","97f339ea":"g = sns.FacetGrid(data,col='Exited')\ng.map(plt.hist,'CreditScore')","add8458a":"# inspect geography\nsns.countplot(data['Geography'])","0b2b46ec":"g = sns.FacetGrid(data,col='Exited')\ng.map(plt.hist,'Age')","f0d5fee2":"g = sns.FacetGrid(data,col='Exited')\nfor ax in g.axes.flat:\n    for label in ax.get_xticklabels():\n        label.set_rotation(45)\ng.map(plt.hist,'Balance')","53acff20":"from sklearn.preprocessing import LabelEncoder\nlabels = data['Exited']\nle = LabelEncoder()\nle.fit(labels)\nlabels = le.transform(labels)\nclass_names = le.classes_","739511a7":"data = data.drop(['RowNumber', 'CustomerId', 'Surname', 'Exited'], axis = 1) \ndata.head()","025e7db9":"feature_names = data.columns.tolist()","565aa485":"categorical_features = [1,2,7,8]\ncategorical_names = {}\nfor feature in categorical_features:\n    column = data.iloc[:,feature].values\n    le = LabelEncoder()\n    le.fit(column)\n    data.iloc[:, feature] = le.transform(column)\n    categorical_names[feature] = le.classes_","bc995ddf":"data.head(10)","3c74bf72":"\ndata.info()","8f42cbc6":"seed = 101 # fix random seed for reproducibility\nnp.random.seed(seed)\n\n# Split Train Test sets\nfrom sklearn.model_selection import train_test_split\ntrain, test, labels_train, labels_test = train_test_split(data, labels, \n                                                    test_size=0.2,\n                                                    stratify=labels,\n                                                    random_state=seed)\nprint(train.shape, test.shape, labels_train.shape, labels.shape)","8ba489f4":"import xgboost\ngbtree = xgboost.XGBClassifier(n_estimators=300, seed=seed, scale_pos_weight=4 ,eval_metric=\"aucpr\")\ngbtree.fit(train, labels_train)","dc65296d":"y_preds = gbtree.predict(test)","c4f989c2":"from sklearn.metrics import accuracy_score,confusion_matrix,classification_report\ndef model_evaluate(): \n    \n    print('Test Accuracy:\\t{:0.1f}%'.format(accuracy_score(labels_test,y_preds)*100))\n    \n    #classification report\n    print('\\n')\n    print(classification_report(labels_test, y_preds))\n\n    #confusion matrix\n    confmat = confusion_matrix(labels_test, y_preds)\n\n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.matshow(confmat, cmap=plt.cm.Blues, alpha=0.3)\n    for i in range(confmat.shape[0]):\n        for j in range(confmat.shape[1]):\n            ax.text(x=j, y=i, s=confmat[i, j], va='center', ha='center')\n    plt.xlabel('Predicted label')\n    plt.ylabel('True label')\n    plt.tight_layout()","c5eda7c5":"# evaluate model with test set\nmodel_evaluate()","53343b5b":"#PLot PR-curve\nfrom sklearn.metrics import precision_recall_curve\ny_pred = gbtree.predict_proba(test)\nprecision, recall, thresholds = precision_recall_curve(labels_test, y_pred[:,1])\n \nthresholds = np.append(thresholds, 1)\nf1_scores = 2*(precision*recall)\/(precision+recall)\nplt.step(recall, precision, color='b', alpha=0.4, where='post')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.ylim([0.0, 1.05])\nplt.xlim([0.0, 1.0])\nplt.title('Precision-Recall curve')\nplt.show()","8410da69":"# Feature importance\nfrom xgboost import plot_importance\nplot_importance(gbtree)","70134c1f":"import lime.lime_tabular\nexplainer = lime.lime_tabular.LimeTabularExplainer(train.values ,feature_names = feature_names,class_names=class_names,\n                                                   categorical_features=categorical_features, \n                                                   categorical_names=categorical_names, kernel_width=3)","93cac75d":"predict_fn = lambda x: gbtree.predict_proba(x).astype(float)","5d37a199":"#Choose a local instance\nchosen = test.iloc[111]\nprint(chosen)","b3158960":"print('True class: %s' % class_names[labels_test[111]])","523309e3":"exp = explainer.explain_instance(chosen, predict_fn,num_features=5)\nexp.show_in_notebook(show_all=False)","bd4e37bd":"chosen['Age'] = 40\nchosen['IsActiveMember'] = 0\nprint(chosen)","6cf5c4cd":"exp = explainer.explain_instance(chosen, predict_fn,num_features=5)\nexp.show_in_notebook(show_all=False)","d6239502":"Now, let's use LIME!!","38e98fd8":"Explicitly define the categorical features, we need this for LIME.\nCategorical data: Geography, Gender, HasCrCard, IsActiveMember.","842c872d":"Funny..there are a lot of balances with zero amount!","19487ec3":"This was an imbalanced dataset where the positive cases were much lesser than the negative. Hence for the positive cases, the XGB model gets 50+% of the positive classification correct. There are alot of false negatives & positives.","fc13819b":"All the customers come from Europe. Most are from France (~50%) while Germany is ~25% and Spain 25%","f0b5f5ad":"Drop the columns RowNumber, CustomerId, Surname as they are not predictive features, and remove the labels column","efdc16e8":"From a global importance level, it seems the top 3 features are EstimatedSalary, CreditScore & Balance.","b7c3a490":"Looks like credit score is a normal distribution, with the center between 600-700 for both classes.","12a6796d":"There are several columns with categorical data:\nGeography, Gender, HasCrCard, IsActiveMember.\nThe column Exited has the label to be predicted. ","e2d34e96":"Let's look at the XGB model global importance features, we'll contrast with LIME local importance later.","29ce37ad":"Predicted Probability of the class has now reduced!","ed3b2801":"Start Data Processing","b688e824":"Lime tabular needs a predict function","a037201a":"There are 10000 entries, with 14 columns.\nThere are 3 text fields, Surname, Geography & Gender.\nThe rest of the features have number entries, and there are no empty fields.","d6aa7c1b":"LIME predicts for this local instance, the 2 features that contribute to the classification is Age and IsActiveMember, rather than the 3 global importance features reported by XGBoost. Let's test this out, by modifying the 2 features that LIME chose ","9b6e5caf":"Start separating out the labels column","f0944063":"There is a class imbalance issue, with the no. of people exiting 1 quarter that of those that stayed!","655fc560":"Ok..now the dataframe has all data as integers\/floats, so we are ready to start training the XGBoost classifier!","3472afd8":"Let's explore the data! ","ae75a950":"Looks like a majority of the loyal customers are between 20-40 years old"}}