{"cell_type":{"7d828691":"code","591d1062":"code","bca84a19":"code","0aa8c506":"code","18b7b90b":"code","7bdd348e":"code","b83b8ef0":"code","4232d59c":"code","afae53df":"code","7d2eec7b":"markdown","5505fea5":"markdown","46be4024":"markdown","ef9d8e85":"markdown","a9a8ae22":"markdown","55f88c51":"markdown","8d9416a4":"markdown"},"source":{"7d828691":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","591d1062":"!git clone  'https:\/\/github.com\/ultralytics\/yolov5.git' # For loading official yolo-v5","bca84a19":"import os, sys, random, shutil\nfrom glob import glob\nimport pandas as pd\nfrom shutil import copyfile\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib import patches\nimport numpy as np\nimport os","0aa8c506":"shutil.copyfile('\/kaggle\/input\/blood-cell-count-and-typesdetection\/bcc-kaggle.yaml', '\/kaggle\/working\/yolov5\/bcc-kaggle.yaml')\n!cp -r '\/kaggle\/input\/blood-cell-count-and-typesdetection' '\/kaggle\/working\/blood-cell-count-and-typesdetection'","18b7b90b":"!pip install --upgrade pip\n!pip install Cython\n!pip install matplotlib>=3.2.2\n!pip install numpy>=1.18.5\n!pip install opencv-python>=4.1.2\n!pip install pillow\n!pip install PyYAML>=5.3\n!pip install scipy>=1.4.1\n!pip install tensorboard>=2.2\n!pip install tqdm>=4.41.0\n!pip install torch===1.6.0 torchvision===0.7.0 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html","7bdd348e":"import torch, torchvision\nimport torch.nn as nn\nprint(torch.__version__, torchvision.__version__)\nos.getcwd()","b83b8ef0":"%%time\n# Here I have provided only 10 epochs, feel free to increment it, to get more accuracy !!!\n\n\n!python yolov5\/train.py --img 640 --batch 8 --epochs 100 --data yolov5\/bcc-kaggle.yaml --cfg \/kaggle\/working\/yolov5\/models\/yolov5s.yaml --name BCCM","4232d59c":"# Detection or Run Inference on the model\n\n!python yolov5\/detect.py --source \/kaggle\/working\/blood-cell-count-and-typesdetection\/images\/images\/valid\/ --weights ..\/input\/blood-cell-count-and-typesdetection\/best_BCCM.pt\n","afae53df":"disp_images = glob('\/kaggle\/working\/inference\/output\/*')\nfig=plt.figure(figsize=(20, 28))\ncolumns = 3\nrows = 5\nfor i in range(1, columns*rows +1):\n    img = np.random.choice(disp_images)\n    img = plt.imread(img)\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(img)\nplt.show()","7d2eec7b":"# To get Yolo-V5 on the dataset","5505fea5":"## And for misc reasons, kaggle is quite slower to train when compared to Google Colab","46be4024":"# Packages to install to run Yolo efficiently","ef9d8e85":"# Helpul Imports","a9a8ae22":"# To train the model, we need to pass some parameters\n\n**1. Path of train.py**\n\n**2. --img <img size (int)>**\n\n**3. --batch <batch size (int)>**\n\n**4. --epochs <No. of Epochs to train (int)> [Choose your preferred epochs]**\n\n**5. --data <Path of your dataset's yaml file>**\n\n**6. --cfg <path of your preferred yolo model's yaml file> [choose from yolos\/m\/l\/x (small, medium, large, xlarge)]**\n\n**7. --name <\"name of your saved model after training\"> [Usually stored at \"runs\/exp5_BCCM\/weights\/filename.pt\"]**","55f88c51":"## Before you use this notebook, to get more insights about Yolo-V5 and running it on custom datasets, please read this blog I've written - [Link](https:\/\/medium.com\/towards-artificial-intelligence\/yolo-v5-object-detection-on-a-custom-dataset-61d478bc08f9) ","8d9416a4":"# Detection or Model Inference\n\n**1. Path of detect.py**\n\n**2. --source <\"Provide the path of single image or folder path for multiple image prediction\">**\n\n**3. --weights <\"Load the weights saved from training your model\">**"}}