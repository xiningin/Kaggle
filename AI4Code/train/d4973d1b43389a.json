{"cell_type":{"1d71b8af":"code","402d387b":"code","cf534d39":"code","811f2398":"code","95164239":"code","3a947862":"code","c3d518e1":"code","d5e35af9":"code","7f4275fc":"code","a1865851":"code","5b6fed7c":"code","4babf2ff":"code","21c7d087":"code","8a170ae3":"code","c2a02bb8":"code","590e5a73":"code","f51e6338":"code","a81aa949":"markdown","202c509f":"markdown","3f1d21ff":"markdown","8035a87d":"markdown"},"source":{"1d71b8af":"######## If you think this is interesting, please upvote this notebook ########\nsub  = '..\/input\/st-21-a-minmax-ctsp\/submission_no_wildcards_2456_2455_2452.csv'\nwsub = '..\/input\/st-21-a-wildcard-filling\/submission_wildcards_2446_2452_2450.csv'","402d387b":"import pandas as pd\nimport itertools\nfrom spacy import displacy\nall_perms = [''.join(list([str(x) for x in p])) for p in list(itertools.permutations(range(1,8), 7))]\nLETTERS = {\n    1: '\ud83c\udf85',  # father christmas\n    2: '\ud83e\udd36',  # mother christmas\n    3: '\ud83e\udd8c',  # reindeer\n    4: '\ud83e\udddd',  # elf\n    5: '\ud83c\udf84',  # christmas tree\n    6: '\ud83c\udf81',  # gift\n    7: '\ud83c\udf80',  # ribbon\n    8: '\ud83c\udf1f',  # star\n}\nINV_LETTERS = {v: k for k, v in LETTERS.items()}\nsolution = pd.read_csv(sub)\nstrings = [''.join([str(INV_LETTERS[c]) for c in s]) for s in solution.schedule]\nsolution = pd.read_csv(wsub)\nwstrings = [''.join([str(INV_LETTERS[c]) for c in s]) for s in solution.schedule]\n\ndef find_strings_perms_counts(strings, strings_perms, verbose=False):\n    perms = []\n    counts = [[],[],[]]\n    perms_repate = [[],[],[]]\n    perms_repate_counts = [[],[],[]]\n    for s_i, s in enumerate(strings):\n        perms.append([])\n        counts[s_i] = [0]*len(s)\n        for i in range(len(s)-6):\n            p = s[i:i+7]\n            if p in perms[s_i]:\n                perms_repate[s_i].append(p)\n            if p in strings_perms[s_i]:\n                perms[s_i].append(p)\n                for j in range(i, i+7):\n                    counts[s_i][j] += 1\n    for s_i, s in enumerate(strings):\n        perms_repate_counts[s_i] = [0]*len(s)\n        for i in range(len(s)-6):\n            p = s[i:i+7]\n            if p in perms_repate[s_i]:\n                for j in range(i, i+7):\n                    perms_repate_counts[s_i][j] += 1\n            \n    return perms, counts, perms_repate, perms_repate_counts","cf534d39":"group_perms, group_counts, group_perms_repate, perms_repate_counts = find_strings_perms_counts(strings, [all_perms,all_perms,all_perms])\nwgroup_perms, wgroup_counts, wgroup_perms_repate, wperms_repate_counts = find_strings_perms_counts(wstrings, group_perms)\nskip_perms = [list(set(group_perms[i])-set(wgroup_perms[i])) for i in range(3)]\nsgroup_perms, sgroup_counts, sgroup_perms_repate, sperms_repate_counts = find_strings_perms_counts(strings, skip_perms)","811f2398":"[len(x) for x in skip_perms]","95164239":"from spacy import displacy\ndef visualize_superpermutation(title, perm, counts):\n    colors = {\n            '0': '#ffffff',\n            '1': '#f6f7da',\n            '2': '#faf7da',\n            '3': '#f0f7da',\n            '4': '#c9df8a',\n            '5': '#77ab59',\n            '6': '#36802d',\n            '7': '#234d20',\n            'W': '#DC143C',\n         }\n    ents = []\n    for i, count in enumerate(counts):\n        if perm[i] == '8':\n            count = 'W'\n        ents.append({'start':i, 'end':i+1, 'label': str(count)})\n        doc = {\n            \"text\": perm,\n            \"ents\": ents,\n            \"title\": title\n        }\n    options = {\"ents\": [str(x) for x in ['0','1','2','3','4','5','6','7','W']], \"colors\": colors}\n    displacy.render(doc, style=\"ent\", options=options, manual=True, jupyter=True)","3a947862":"visualize_superpermutation('With Wildcard', wstrings[0], wgroup_counts[0])","c3d518e1":"visualize_superpermutation('Without Wild', strings[0], group_counts[0])","d5e35af9":"visualize_superpermutation('Skipped Permutations', strings[0], sgroup_counts[0])","7f4275fc":"visualize_superpermutation('With Wildcard', wstrings[1], wgroup_counts[1])","a1865851":"visualize_superpermutation('Without Wild', strings[1], group_counts[1])","5b6fed7c":"visualize_superpermutation('Skipped Permutations', strings[1], sgroup_counts[1])","4babf2ff":"visualize_superpermutation('With Wildcard', wstrings[2], wgroup_counts[2])","21c7d087":"visualize_superpermutation('Without Wild', strings[2], group_counts[2])","8a170ae3":"visualize_superpermutation('Skipped Permutations', strings[2], sgroup_counts[2])","c2a02bb8":"visualize_superpermutation('Group 1', strings[0], perms_repate_counts[0])","590e5a73":"visualize_superpermutation('Group 2', strings[1], perms_repate_counts[1])","f51e6338":"visualize_superpermutation('Group 3', strings[2], perms_repate_counts[2])","a81aa949":"# Group 1","202c509f":"# Group 3","3f1d21ff":"# Group 2","8035a87d":"# Without Wildcard Solution with only repeated permutations"}}