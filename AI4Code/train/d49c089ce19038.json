{"cell_type":{"0562e824":"code","419ec12f":"code","0f1b2739":"code","08f026eb":"code","3c7da31e":"code","6c51dea5":"code","41bea115":"code","46ae84e6":"code","66805f21":"code","50d84f99":"code","66f67f56":"code","af6f7c76":"code","085d9d17":"code","291e28ed":"code","78e0bd6a":"markdown","4cb7f61d":"markdown","529f4812":"markdown","f4a0f7a7":"markdown","cd8d69fc":"markdown","a98607fb":"markdown","02c6f523":"markdown","812bb88b":"markdown","20cb9553":"markdown","2d9bf0bb":"markdown","3677d4d8":"markdown","949cb4a5":"markdown","f7e8c96b":"markdown","ca1f3cfc":"markdown"},"source":{"0562e824":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.image as mpimg\n\nimport tensorflow as tf\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","419ec12f":"# Define our example directories and files\nbase_dir = '..\/input\/chest-xray-pneumonia\/chest_xray'\n\ntrain_dir = os.path.join( base_dir, 'train')\nvalidation_dir = os.path.join( base_dir, 'val')\ntest_dir = os.path.join( base_dir,'test')\n\ntrain_NORMAL_dir = os.path.join(train_dir, 'NORMAL') \ntrain_PNEUMONIA_dir = os.path.join(train_dir, 'PNEUMONIA')\nvalidation_NORMALs_dir = os.path.join(validation_dir, 'NORMAL')\nvalidation_PNEUMONIA_dir = os.path.join(validation_dir, 'PNEUMONIA')\ntest_NORMAL_dir = os.path.join(test_dir, 'NORMAL')\ntest_PNEUMONIA_dir = os.path.join(test_dir, 'PNEUMONIA')\n\n\ntrain_NORMAL_fnames = os.listdir(train_NORMAL_dir)\ntrain_PNEUMONIA_fnames = os.listdir(train_PNEUMONIA_dir)\nvalidation_NORMAL_fnames = os.listdir(validation_NORMALs_dir)\nvalidation_PNEUMONIA_fnames = os.listdir(validation_PNEUMONIA_dir)\n\n#ratio of training set\ntrain_ratio = (len(train_PNEUMONIA_fnames) + len(train_NORMAL_fnames))\/(len(train_PNEUMONIA_fnames) + len(train_NORMAL_fnames)+len(validation_NORMAL_fnames) + len(validation_PNEUMONIA_fnames))\n\nprint(f'NORMAL class in Training set = {len(train_NORMAL_fnames)} : {round(len(train_NORMAL_fnames)\/(len(train_NORMAL_fnames)+len(train_PNEUMONIA_fnames)),3)*100}%')\nprint(f'PNEUMONIA class in Training set = {len(train_PNEUMONIA_fnames)} : {round(len(train_PNEUMONIA_fnames)\/(len(train_NORMAL_fnames)+len(train_PNEUMONIA_fnames)),3)*100}%')\nprint(f'Training set : Validation set ratio = {round(train_ratio*100,1)}% : {round((1-train_ratio)*100,1)}%')","0f1b2739":"old_train_set = []\nold_validation_set = []\n\nfor (dirpath, dirnames, filenames) in os.walk(train_dir):\n    old_train_set += [os.path.join(dirpath, file) for file in filenames]\nfor (dirpath, dirnames, filenames) in os.walk(validation_dir):\n    old_validation_set += [os.path.join(dirpath, file) for file in filenames]\n\nfull_train_set = old_train_set + old_validation_set #combine old training and validation set together for further splitting\nfull_train_set = pd.DataFrame({'abs_path' : full_train_set}) #put path into \nfull_train_set.loc[full_train_set['abs_path'].str.contains('NORMAL'), 'Class'] = 'NORMAL'\nfull_train_set.loc[full_train_set['abs_path'].str.contains('PNEUMONIA'), 'Class'] = 'PNEUMONIA'\nfull_train_set.sample(5)","08f026eb":"X = full_train_set['abs_path']\ny = full_train_set['Class']\n\n\nval_split = 0.2\n\nX_train,X_val,y_train,y_val = train_test_split(X,y,test_size = val_split,stratify=y,random_state=42)\n\ntrain_set = pd.DataFrame({'abs_path':X_train,'Class':y_train})\nvalidation_set = pd.DataFrame({'abs_path':X_val,'Class':y_val})","3c7da31e":"datagen = ImageDataGenerator(rescale=1.\/255)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\n#Train Image Generator\ntrain_generator=datagen.flow_from_dataframe(\ndataframe=train_set,\nx_col=\"abs_path\",\ny_col=\"Class\",\nbatch_size=32,\nseed=42,\nshuffle=True,\nclass_mode=\"binary\",\ntarget_size=(150,150))\n\n#Validation Image Generator\nvalidation_generator=datagen.flow_from_dataframe(\ndataframe=validation_set,\nx_col=\"abs_path\",\ny_col=\"Class\",\nbatch_size=32,\nseed=42,\nshuffle=True,\nclass_mode=\"binary\",\ntarget_size=(150,150))\n\n#Test Image Generator\ntest_generator = test_datagen.flow_from_directory(\ntest_dir,\nbatch_size=32,\nclass_mode=\"binary\",\ntarget_size = (150,150))","6c51dea5":"normal_count = 0\npneumonia_count = 0\nfor i in range(len(train_generator.labels)):\n    if train_generator.labels[i] == 0:\n        normal_count += 1\n    else:\n        pneumonia_count += 1\n        \nassert(normal_count+pneumonia_count==len(train_generator.labels))\n\n\nnormal_weight = pneumonia_count\/normal_count\npneumonia_weight = 1\n\nclass_weight = {0:normal_weight,1:pneumonia_weight}","41bea115":"val_normal_count = 0\nval_pneumonia_count = 0\nfor i in range(len(validation_generator.labels)):\n    if validation_generator.labels[i] == 0:\n        val_normal_count += 1\n    else:\n        val_pneumonia_count += 1\n        \nprint(f'normal in train set = {normal_count}')\nprint(f'pneumonia in train set = {pneumonia_count}')\nprint(f'normal in val set = {val_normal_count}')\nprint(f'pneumonia in val set = {val_pneumonia_count}')","46ae84e6":"x_batch, y_batch = next(train_generator)\nfig = plt.figure(figsize = (20,20))\n\nfor i in range(25):\n    ax = plt.subplot(5,5,i+1)\n    plt.imshow(x_batch[i])\n    if y_batch[i] == 1:\n        plt.title('PNEUMONIA')\n    else:\n        plt.title('NORMAL')\n","66805f21":"from tensorflow.keras.applications.vgg16 import VGG16\n\npre_trained_model = VGG16(input_shape=(150,150,3),include_top=False)\n\n#freeze layers weight \nfor layer in pre_trained_model.layers:\n    layer.trainable = False\n\npre_trained_model.summary()","50d84f99":"last_layer = pre_trained_model.get_layer('block5_pool')\nprint('last layer output shape: ', last_layer.output_shape)\nlast_output = last_layer.output","66f67f56":"\n# Flatten the output layer to 1 dimension\nx = layers.Flatten()(last_output)\n# Add a fully connected layer with 512 hidden units and ReLU activation\nx = layers.Dense(128, activation='relu', kernel_regularizer=tf.keras.regularizers.L2(0.001))(x)\n# Add a dropout rate of 0.2\nx = layers.Dropout(0.2)(x)                  \n# Add a final sigmoid layer for classification\nx = layers.Dense(1, activation='sigmoid')(x)           \n\nMETRICS = [\n      tf.keras.metrics.TruePositives(name='tp'),\n      tf.keras.metrics.FalsePositives(name='fp'),\n      tf.keras.metrics.TrueNegatives(name='tn'),\n      tf.keras.metrics.FalseNegatives(name='fn'), \n      tf.keras.metrics.BinaryAccuracy(name='accuracy'),\n      tf.keras.metrics.Precision(name='precision'),\n      tf.keras.metrics.Recall(name='recall'),\n      tf.keras.metrics.AUC(name='auc'),\n]\n\nmodel = Model(pre_trained_model.input, x) \n\nmodel.compile(optimizer = 'adam', \n              loss = 'binary_crossentropy', \n              metrics = METRICS)\n\nmodel.summary()","af6f7c76":"#Training hyperparameters\nbatch_size = 32\nsteps_per_epoch = len(train_generator.labels) \/\/ batch_size\nvalidation_step = len(validation_generator.labels) \/\/ batch_size\nepochs = 50\n\nhistory = model.fit(train_generator,\n        validation_data = validation_generator,\n        steps_per_epoch = steps_per_epoch,\n        epochs = epochs,\n        validation_steps = validation_step,\n        class_weight=class_weight)\n","085d9d17":"plt.style.use('ggplot')\ndef plot_metrics(history):\n    metrics =  ['loss', 'auc', 'precision', 'recall']\n    fig = plt.figure(figsize=(10,10))\n    fig.suptitle('Preliminary performance of model', fontsize=16, y=1.05)\n    for n, metric in enumerate(metrics):\n        name = metric.replace(\"_\",\" \").capitalize()\n        plt.subplot(2,2,n+1)\n        sns.lineplot(history.epoch,  history.history[metric], label='Train')\n        sns.lineplot(history.epoch, history.history['val_'+metric] ,label='Val')\n        plt.xlabel('Epoch')\n        plt.ylabel(name)\n        if metric == 'loss':\n          plt.ylim([0, plt.ylim()[1]])\n        elif metric == 'auc':\n          plt.ylim([0.8,1])\n        else:\n          plt.ylim([0,1])\n    \n        plt.legend()\n        \n    fig.tight_layout(pad=1.0)\n","291e28ed":"plot_metrics(history)","78e0bd6a":"# Model Buidling","4cb7f61d":"![VGG-16 architecture](https:\/\/neurohive.io\/wp-content\/uploads\/2018\/11\/vgg16.png)\n\nTo save time, I decide to use pretrained VGG16 model from Tensorflow [x] you can try other model to see the different","529f4812":"From sample of our dataset, \n\n* Chest x-rays for people who are healthy (NORMAL) are clearer, minimal white shaded in lung area\n* On the other hand, for people who have Pneumonia, their x-rays image seem more opaque. ","f4a0f7a7":"![Pneumonia](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/2\/23\/Lobar_pneumonia_illustrated.jpg)\n\n> Pneumonia is an **inflammatory condition of the lung primarily affecting the small air sacs known as alveoli**. Symptoms typically include some combination of productive or **dry cough, chest pain, fever and difficulty breathing**. The severity of the condition is variable. Pneumonia is **usually caused by infection with viruses or bacteria**, and less commonly by other microorganisms. Identifying the responsible pathogen can be difficult. Diagnosis is often based on symptoms and physical examination. Chest X-rays, blood tests, and culture of the sputum may help confirm the diagnosis. The disease may be classified by where it was acquired, such as community- or hospital-acquired or healthcare-associated pneumonia.[1]\n\n> According to WHO, Pneumonia is the single **largest infectious cause of death in children worldwide**. Pneumonia killed 808 694 children under the age of 5 in 2017, accounting for 15% of all deaths of children under five years old. Pneumonia affects children and families everywhere, but is most prevalent in South Asia and sub-Saharan Africa. Children can be protected from pneumonia, it can be prevented with simple interventions, and treated with low-cost, low-tech medication and care.[2]\n\nTherefore, the earlier detection of Pneumania, the better chance of survival of children. In this study we'll focus on building a model to help doctor classifying chest x-rays images to identify which patiences has Pneumonia or not?","cd8d69fc":"# What exactly is Pneumania : Why we should pay attention to it?","a98607fb":"# Dataset Visualization","02c6f523":"# Data preparation","812bb88b":"# Pneumania Classification : Transfered CNN","20cb9553":"**Cautions!**\n* We might experience class imbalanced problem. We should be awared that classification accuracy is not a good evaluating metrics in this case.\n* Training\/Validation set split is too extreme. With this size of validation set, our model may not generalized enough. To fix this I'll re-split train:val set to have more proper ratio","2d9bf0bb":"Looking good! We've managed to solve extreme training and validation set split from 99:1 ratio to 90:10 ratio with stratified class.","3677d4d8":"This notebook is inspired by :\n\n[1] [Wikipedia : Pneumonia](https:\/\/en.wikipedia.org\/wiki\/Pneumonia#Respiratory_and_circulatory_failure)\n\n[2] [WHO : Pneumonia](https:\/\/www.who.int\/news-room\/fact-sheets\/detail\/pneumonia)\n\n[x] [TensorFlow Pneumonia Classification on X-rays by Amy Jang](https:\/\/www.kaggle.com\/amyjang\/tensorflow-pneumonia-classification-on-x-rays) where she point out interesting problem and solution for this dataset\n\n[x] [ImageGenerator flow from dataframe](https:\/\/medium.com\/@vijayabhaskar96\/tutorial-on-keras-flow-from-dataframe-1fd4493d237c)\n\n[x] [Transfer Learning : from Tensorflow in pratice specialization](https:\/\/github.com\/lmoroney\/dlaicourse\/blob\/master\/Exercises\/Exercise%207%20-%20Transfer%20Learning\/Exercise%207%20-%20Answer.ipynb)\n\n[x] [VGG16 : Pretrained model from Tensorflow](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/applications\/vgg16)\n\n[x] [Precision recall curve for Keras model](https:\/\/www.dlology.com\/blog\/simple-guide-on-how-to-generate-roc-plot-for-keras-classifier\/)","949cb4a5":"Let's have a look what our dataset look like ...","f7e8c96b":"# Data Explanation\n![Example](https:\/\/i.imgur.com\/jZqpV51.png)\n\nThe dataset is organized into 3 folders (train, test, val) and contains subfolders for each image category (Pneumonia\/Normal). There are 5,863 X-Ray images (JPEG) and 2 categories (Pneumonia\/Normal).\n\nChest X-ray images (anterior-posterior) were selected from retrospective cohorts of pediatric patients of one to five years old from Guangzhou Women and Children\u2019s Medical Center, Guangzhou. All chest X-ray imaging was performed as part of patients\u2019 routine clinical care.\n\nFor the analysis of chest x-ray images, all chest radiographs were initially screened for quality control by removing all low quality or unreadable scans. The diagnoses for the images were then graded by two expert physicians before being cleared for training the AI system. In order to account for any grading errors, the evaluation set was also checked by a third expert.","ca1f3cfc":"# Acknowledgement"}}