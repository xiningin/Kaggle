{"cell_type":{"598d3a04":"code","57bf80b4":"code","6ba0a70e":"code","98dad36c":"code","ebf6ef7d":"code","aa4fb4b0":"code","455e96c7":"code","671b5dac":"code","a7e64304":"code","e592b869":"code","f041ad5a":"code","79ce31ef":"code","84a26640":"code","6259493c":"code","b1761c44":"code","5003d978":"code","e7923d67":"markdown","c9c8fd55":"markdown","a231ca90":"markdown","d3d9c961":"markdown","177dacad":"markdown","ed5062e7":"markdown"},"source":{"598d3a04":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","57bf80b4":"import statsmodels.api as sm\nfrom tqdm.autonotebook import tqdm\nfrom matplotlib import pyplot as plt\n%matplotlib inline","6ba0a70e":"df = pd.read_csv('\/kaggle\/input\/how-to-do-product-analytics\/product.csv', sep=',')\ndf.shape","98dad36c":"df.head()","ebf6ef7d":"df.groupby('site_version')[['user_id']].count()","aa4fb4b0":"df.target.mean()","455e96c7":"df.groupby('site_version').target.mean()","671b5dac":"# Creating an list with bootstrapped means for each AB-group\nboot_1d = []\nfor i in tqdm(range(100), leave=False):\n    boot_mean = df.sample(frac=1, replace=True).groupby('site_version').target.mean()\n    boot_1d.append(boot_mean)\n    \n# Transforming the list to a DataFrame\nboot_1d = pd.DataFrame(boot_1d)\n    \n# A Kernel Density Estimate plot of the bootstrap distributions\nboot_1d.plot.kde();","a7e64304":"boot_1d.head()","e592b869":"# Adding a column with the % difference between the two AB-groups\nboot_1d['diff'] = (boot_1d.desktop-boot_1d.mobile)\/boot_1d.mobile * 100\n\n# Ploting the bootstrap % difference\nax = boot_1d['diff'].plot.kde()","f041ad5a":"# Calculating the probability that 1-day retention is greater when the gate is at level 30\nprob = (boot_1d['diff']>0).mean()\n\n# Pretty printing the probability\nprint('{:.1%}'.format(prob))","79ce31ef":"# Calculating 7-day retention for both AB-groups\ndf.groupby('site_version').target.mean()","84a26640":"n_rows_desktop, n_rows_mobile = df.groupby('site_version').target.count()\ntrgt_desktop, trgt_mobile = df.groupby('site_version').target.mean()","6259493c":"n_rows_desktop, n_rows_mobile, trgt_desktop, trgt_mobile","b1761c44":"interval = 1.96 * np.sqrt((trgt_desktop*(1-trgt_desktop)\/n_rows_desktop) + (trgt_mobile*(1-trgt_mobile)\/n_rows_mobile))\nprint(\"Lower bond: {0:.3f}%, upper bond: {1:.3f}%\".format(trgt_desktop-trgt_mobile-interval, trgt_desktop-trgt_mobile+interval))","5003d978":"z_score, p_value = sm.stats.proportions_ztest([trgt_mobile*n_rows_mobile, trgt_desktop*n_rows_desktop], \n                                              [n_rows_mobile, n_rows_desktop], \n                                              alternative='smaller')\nprint(\"Z-score={0:.3f},  p_value={1:.3f}\".format(z_score, p_value))","e7923d67":"## A\/B testing. What for?\n\n- Advertising display options\n- Choosing the color and shape of the button\n- Choosing the layout of site elements\n- And other marketing stuff that love to test\n\n\nOften there is a need to make decisions on the implementation of the task, which will subsequently affect the product. One way or another, the decision will affect profits.\n\nWhat decisions do we make?\n\n* button color\n* word order\n* location of the banner ad\n* location of the recommendations block\n* required fields in the registration form\n* ...\n\nWe need a tool that allows you to choose the most profitable solution among many options.\nWhat does this mean?\n\nYou can\u2019t say in advance which solution will be more profitable. Often a profitable option is not expected. Each choice must be justified, it must be possible to prove that the solution will be the best.****","c9c8fd55":"# Legend:\nWe are an online store of sports goods: clothing, shoes, accessories and sports nutrition. On the main page of the store we show users banners in order to stimulate their sales. Now one of 5 banners is randomly displayed there. Each banner advertises a specific product or the entire company. Our marketers believe that the experience with banners can vary by segment, and their effectiveness may depend on the characteristics of user behavior.\nThe manager of the company had an offer from partners to sell this place for a banner and advertise another service there (payment is assumed according to the CPC model).\nHelp the manager make a decision.","a231ca90":"# A\/B Test Concept\n\n* ** Fix ** some version\n* All users are divided into ** two (or several) groups **\n* Half of users see ** old ** version\n* Half of users see ** new ** version\n* Measure ** metric ** for some ** period **\n* ** Analyze ** the result\n* Make ** decision **","d3d9c961":"# Business goal:\n- Perform data analysis.\n- A\/B testing","177dacad":"# Data for A\/B test\nYou have information about which banner appeared to the user, whether he clicked on it, as well as information about user purchases.\n* order_id - unique purchase number (NA for banner clicks and impressions)\n* user_id - unique identifier of the client\n* page_id - unique page number for event bundle (NA for purchases)\n* product - banner \/ purchase product\n* site_version - version of the site (mobile or desktop)\n* time - time of the action\n* title - type of event (show, click or purchase)\n* target - target class","ed5062e7":"### Import libraries, configure pandas"}}