{"cell_type":{"6b02b940":"code","f1c9e167":"code","e286d6eb":"code","66dbb612":"code","567e96ac":"code","0df58f09":"code","8b765089":"code","ccbbe8f8":"code","0ec2522e":"code","48f9e348":"code","6f6b8d28":"code","42abc7dc":"code","a6ba7e92":"code","5d544552":"code","c3389bdb":"code","ab505085":"code","f44bdab8":"code","bbd1e7ef":"code","3301a40a":"code","33c25173":"code","4fb9d631":"code","33357645":"code","5c1f7f21":"code","287eb146":"code","e6b57879":"code","2337d59a":"code","2894a508":"code","60a9d0e6":"code","333c434b":"code","98841c9d":"code","39386c4c":"code","b8c1622f":"code","2a0e384d":"code","08bdd249":"code","110ed22d":"code","9c78db8c":"code","ba770b06":"code","e3e274b6":"code","69839f19":"code","1376fdc9":"code","f2aa90da":"code","3419f138":"code","6afca722":"code","cb9bcff5":"code","37644e79":"code","59d0bb53":"code","d8b06740":"code","64ec7da8":"code","21aa807f":"code","ff4eb442":"code","a3975c03":"code","dc1e4b59":"code","22fbed15":"code","5957a21e":"markdown","d54e8211":"markdown","17f0f0bb":"markdown","23a822e4":"markdown","18c37e47":"markdown","dd6f64d7":"markdown","91fcb1ed":"markdown"},"source":{"6b02b940":"#Import all the required libraries\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import OrdinalEncoder, LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, ConfusionMatrixDisplay, classification_report, confusion_matrix\nimport seaborn as sns","f1c9e167":"#Retrieve the file dir and filename\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        file = os.path.join(dirname, filename)\n        print(file)","e286d6eb":"#Read the dataset\n\ndf = pd.read_csv(file)\ndf","66dbb612":"#Print the information of the dataset\n\ndf.info()","567e96ac":"#Prepare the data\n\nX = df.drop(['class'],axis=1)\nX","0df58f09":"#Prepare the target\n\ny = df['class']\ny","8b765089":"#Encode the data and target\n\noe = OrdinalEncoder(dtype=np.int)\nle = LabelEncoder()\n\nX_encoded = np.array(oe.fit_transform(X))\ny_encoded = np.array(le.fit_transform(y))","ccbbe8f8":"#Build a list of data and target again for inspecting\n\nX_y_encoded = np.hstack([y_encoded.reshape(-1,1), X_encoded])\nX_y_encoded","0ec2522e":"#Build the dataframe of the encoded data so it will be easier to inspect it\n\ndf_2 = pd.DataFrame(X_y_encoded, columns=df.columns)\ndf_2","48f9e348":"#Print the description of the data, it's found out that the veil-type column \n#just have 1 unique value, consider to drop it\n\ndf_2.describe()","6f6b8d28":"#Drop the veil-type column\n\ndf_2.drop(['veil-type'], axis =1, inplace=True)\ndf_2","42abc7dc":"#Split the data into 80% of train and 20% of test\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X_encoded, y_encoded, train_size=0.8, random_state=23)","a6ba7e92":"#Fit the RandomForestClassifier Model with dataset\n\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\nX_train_predicted = model.predict(X_train)\nprint('Accuracy score for train data is: ', accuracy_score(y_train, \n                                                          X_train_predicted))","5d544552":"#Print the accuracy score of the test data\n\ny_predicted = model.predict(X_test)\nprint('Accuracy score for test data is: ', accuracy_score(y_test, \n                                                          y_predicted))","c3389bdb":"#Print the classification report\n\nprint(classification_report(y_test, y_predicted, target_names=le.classes_))","ab505085":"#Display the confusion matrix\n\nX_predicted = model.predict(X_encoded)\ndisp = ConfusionMatrixDisplay(\n        confusion_matrix(X_predicted, y_encoded),\n        display_labels=le.classes_)\ntitle = 'Confusion Matrix of Mushrooms Classification using\\nRandom Forest Classifier\\n Excluded veil-type'\ndisp.plot(cmap=plt.cm.Blues)\nplt.title(title)\nplt.show","f44bdab8":"#Print the Correlation Map\n\ndf_corr = df_2.corr()\ndf_corr","bbd1e7ef":"#Plot the Correlation Map using Heat Map\n\nplt.figure(figsize=(20, 8))\n\nmask = np.triu(np.ones_like(df_corr, dtype=np.bool))\nheatmap = sns.heatmap(df_corr, vmin=-1, vmax=1, mask=mask, annot=True)\nheatmap.set_title('Correlation Heatmap of Mushroom Dataset Features', \n                  fontdict={'fontsize':12}, pad=12);","3301a40a":"#Inspect the Features that Correlating with Class\n\nplt.figure(figsize=(10, 15))\nheatmap = sns.heatmap(df_corr[['class']].sort_values(by='class', \n                                                     ascending=False), \n                      vmin=-1, vmax=1, annot=True)\nheatmap.set_title('Features Correlating with Class', \n                  fontdict={'fontsize':18}, pad=16)","33c25173":"#Function for decide the correlate column\n\ndef correlate_column(corr_num = float):\n  column = []\n\n  for i in range(len(df_corr['class'])):\n    if df_corr['class'][i] > corr_num or df_corr['class'][i] < -(corr_num):\n      column.append(df_corr.index[i])\n  return column","4fb9d631":"#Take the column that has correlate value > 0.5 or < -0.5\n\ndf_3 = df_2[correlate_column(0.5)]\ndf_3","33357645":"#Prepare the data that has correlate value > 0.5 or < -0.5\n\nX_corr = df_3.drop(['class'], axis=1)\nX_corr","5c1f7f21":"#Prepare the target\n\ny_corr = df_3['class']\ny_corr","287eb146":"#Split the data into 80% of train and 20% of test\n\nX_train_corr, X_test_corr, y_train_corr, y_test_corr = train_test_split(\n    X_corr, y_corr, train_size=0.8, random_state=23)","e6b57879":"#Fit the model with prepared correlate data\n\nmodel_corr = RandomForestClassifier()\nmodel_corr.fit(X_train_corr, y_train_corr)\nX_train_corr_predicted = model_corr.predict(X_train_corr)\nprint('Accuracy score for train data is: ', \n      accuracy_score(y_train_corr, X_train_corr_predicted))","2337d59a":"#Print accuracy score for the test correlate data\n\ny_predicted_corr = model_corr.predict(X_test_corr)\nprint('Accuracy score for test data is: ', accuracy_score(y_test_corr, \n                                                          y_predicted_corr))","2894a508":"#Print the Classification report of > 0.5 or < -0.5 correlate value data\n\nprint(\"Classification Report of > 0.5 or < -0.5 correlate value data:\")\nprint('-'*65)\nprint(classification_report(y_test_corr, y_predicted_corr, \n                            target_names=le.classes_))","60a9d0e6":"#Plot the Confusion Matrix of > 0.5 or < -0.5 correlate value data\n\nX_corr_predicted = model_corr.predict(X_corr)\ndisp = ConfusionMatrixDisplay(\n        confusion_matrix(X_corr_predicted, y_corr),\n        display_labels=le.classes_)\ntitle = 'Confusion Matrix of Mushrooms Classification using\\nRandom Forest Classifier\\n Using > 0.5 and < -0.5 Correlate Value'\ndisp.plot(cmap=plt.cm.Blues)\nplt.title(title)\nplt.show","333c434b":"#Take the column that has correlate value > 0.29 or < -0.29\n\ndf_4 = df_2[correlate_column(0.29)]\ndf_4","98841c9d":"#Prepare the data that has correlate value > 0.29 or < -0.29\n\nX_corr_1 = df_4.drop(['class'], axis=1)\nX_corr_1","39386c4c":"#Prepare the target\n\ny_corr_1 = df_4['class']\ny_corr_1","b8c1622f":"#Split the data into 80% of train and 20% of test\n\nX_train_corr_1, X_test_corr_1, y_train_corr_1, y_test_corr_1 = train_test_split(\n    X_corr_1, y_corr_1, train_size=0.8, random_state=23)","2a0e384d":"#Fit the model with prepared correlate data\n\nmodel_corr_1 = RandomForestClassifier()\nmodel_corr_1.fit(X_train_corr_1, y_train_corr_1)\nX_train_corr_1_predicted = model_corr_1.predict(X_train_corr_1)\nprint('Accuracy score for train data is: ', \n      accuracy_score(y_train_corr_1, X_train_corr_1_predicted))","08bdd249":"#Print accuracy score for the test correlate data\n\ny_predicted_corr_1 = model_corr_1.predict(X_test_corr_1)\nprint('Accuracy score for test data is: ', accuracy_score(y_test_corr_1, \n                                                          y_predicted_corr_1))","110ed22d":"#Print the Classification report of > 0.29 or < -0.29 correlate value data\n\nprint(\"Classification Report of > 0.29 or < -0.29 correlate value data:\")\nprint('-'*65)\nprint(classification_report(y_test_corr_1, y_predicted_corr_1, \n                            target_names=le.classes_))","9c78db8c":"#Plot the Confusion Matrix of > 0.29 or < -0.29 correlate value data\n\nX_corr_1_predicted = model_corr_1.predict(X_corr_1)\ndisp = ConfusionMatrixDisplay(\n        confusion_matrix(X_corr_1_predicted, y_corr_1),\n        display_labels=le.classes_)\ntitle = 'Confusion Matrix of Mushrooms Classification using\\nRandom Forest Classifier\\n Using > 0.29 and < -0.29 Correlate Value'\ndisp.plot(cmap=plt.cm.Blues)\nplt.title(title)\nplt.show","ba770b06":"#Take the column that has correlate value > 0.22 or < -0.22\n\ndf_5 = df_2[correlate_column(0.22)]\ndf_5","e3e274b6":"#Prepare the data that has correlate value > 0.22 or < -0.22\n\nX_corr_2 = df_5.drop(['class'], axis=1)\nX_corr_2","69839f19":"#Prepare the target\n\ny_corr_2 = df_5['class']\ny_corr_2","1376fdc9":"#Split the data into 80% of train and 20% of test\n\nX_train_corr_2, X_test_corr_2, y_train_corr_2, y_test_corr_2 = train_test_split(\n    X_corr_2, y_corr_2, train_size=0.8, random_state=23)","f2aa90da":"#Fit the model with prepared correlate data\n\nmodel_corr_2 = RandomForestClassifier()\nmodel_corr_2.fit(X_train_corr_2, y_train_corr_2)\nX_train_corr_2_predicted = model_corr_2.predict(X_train_corr_2)\nprint('Accuracy score for train data is: ', \n      accuracy_score(y_train_corr_2, X_train_corr_2_predicted))","3419f138":"#Print accuracy score for the test correlate data\n\ny_predicted_corr_2 = model_corr_2.predict(X_test_corr_2)\nprint('Accuracy score for test data is: ', accuracy_score(y_test_corr_2, \n                                                          y_predicted_corr_2))","6afca722":"#Print the Classification report of > 0.22 or < -0.22 correlate value data\n\nprint(\"Classification Report of > 0.22 or < -0.22 correlate value data:\")\nprint('-'*65)\nprint(classification_report(y_test_corr_2, y_predicted_corr_2, \n                            target_names=le.classes_))","cb9bcff5":"#Plot the Confusion Matrix of > 0.22 or < -0.22 correlate value data\n\nX_corr_2_predicted = model_corr_2.predict(X_corr_2)\ndisp = ConfusionMatrixDisplay(\n        confusion_matrix(X_corr_2_predicted, y_corr_2),\n        display_labels=le.classes_)\ntitle = 'Confusion Matrix of Mushrooms Classification using\\nRandom Forest Classifier\\n Using > 0.22 and < -0.22 Correlate Value'\ndisp.plot(cmap=plt.cm.Blues)\nplt.title(title)\nplt.show","37644e79":"#Take the column that has correlate value > 0.21 or < -0.21\n\ndf_6 = df_2[correlate_column(0.21)]\ndf_6","59d0bb53":"#Prepare the data that has correlate value > 0.21 or < -0.21\n\nX_corr_3 = df_6.drop(['class'], axis=1)\nX_corr_3","d8b06740":"#Prepare the target\n\ny_corr_3 = df_6['class']\ny_corr_3","64ec7da8":"#Split the data into 80% of train and 20% of test\n\nX_train_corr_3, X_test_corr_3, y_train_corr_3, y_test_corr_3 = train_test_split(\n    X_corr_3, y_corr_3, train_size=0.8, random_state=23)","21aa807f":"#Fit the model with prepared correlate data\n\nmodel_corr_3 = RandomForestClassifier()\nmodel_corr_3.fit(X_train_corr_3, y_train_corr_3)\nX_train_corr_3_predicted = model_corr_3.predict(X_train_corr_3)\nprint('Accuracy score for train data is: ', \n      accuracy_score(y_train_corr_3, X_train_corr_3_predicted))","ff4eb442":"#Print accuracy score for the test correlate data\n\ny_predicted_corr_3 = model_corr_3.predict(X_test_corr_3)\nprint('Accuracy score for test data is: ', accuracy_score(y_test_corr_3, \n                                                          y_predicted_corr_3))","a3975c03":"#Print the Classification report of > 0.21 or < -0.21 correlate value data\n\nprint(\"Classification Report of > 0.21 or < -0.21 correlate value data:\")\nprint('-'*65)\nprint(classification_report(y_test_corr_3, y_predicted_corr_3, \n                            target_names=le.classes_))","dc1e4b59":"#Plot the Confusion Matrix of > 0.21 or < -0.21 correlate value data\n\nX_corr_3_predicted = model_corr_3.predict(X_corr_3)\ndisp = ConfusionMatrixDisplay(\n        confusion_matrix(X_corr_3_predicted, y_corr_3),\n        display_labels=le.classes_)\ntitle = 'Confusion Matrix of Mushrooms Classification using\\nRandom Forest Classifier\\n Using > 0.21 and < -0.21 Correlate Value'\ndisp.plot(cmap=plt.cm.Blues)\nplt.title(title)\nplt.show","22fbed15":"print('The features most indicative of a poisonous mushroom are: ')\nfor i in range(X_test_corr_3.columns.values.shape[0]):\n  print(f\"{i+1}. {X_test_corr_3.columns.values[i]}\")\nprint('\\nIt\\'s because, when we used correlate values > 0.21 or < -0.21'+\n      ' the accuracy is perfect,\\nbut when we start to used correlate values'+\n      ' > 0.22 or < -0.22, the accuracy is decreasing.')\nprint('\\nIt\\'s indicating that the features that have to correlate values'+\n      '> 0.21 or < -0.21\\nare the features most indicative of a'+\n      ' poisonous mushroom ')","5957a21e":"##### Now, we will try to train using using > 0.22 and < -0.22 Correlate to Class","d54e8211":"#### Conclusion!","17f0f0bb":"##### Now, we will try to train using using > 0.21 and < -0.21 Correlate to Class","23a822e4":"##### We will try to train using > 0.5 or < -0.5 Correlate to Class","18c37e47":"## Hi all, in this notebook, I'll try to fit the mushroom dataset with the Random Forest model. Besides that, I'll try to find out, what features are the most indicative of a poisonous mushroom. Check the code below!","dd6f64d7":"### Take a Look of the Correlation each Features","91fcb1ed":"##### Now, we will try to train using using > 0.29 and < -0.29 Correlate to Class"}}