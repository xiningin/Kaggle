{"cell_type":{"5a816db3":"code","ea831b05":"code","bb951b1a":"code","b639d361":"code","45445165":"code","9aaf2f1b":"code","77b5f39f":"code","fa4bfe0d":"code","e8194e33":"code","6e76ccdf":"code","9a0c6096":"code","5169e3ad":"code","46e82a86":"code","330ca52e":"code","aea8ffd7":"code","241b968a":"code","e5f6433d":"markdown","41961e69":"markdown","bbbdbc80":"markdown","13da7f03":"markdown","9bf4fe31":"markdown","eb2caae3":"markdown","6e192ab0":"markdown","3ecaf8aa":"markdown","dc980b74":"markdown","56b4f31f":"markdown","03aa689d":"markdown","0002c85b":"markdown"},"source":{"5a816db3":"import pandas as pd\nimport numpy as np\nimport datetime\nimport random\nimport glob\nimport cv2\nimport os\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import BatchNormalization,Activation,Dropout,Dense\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.utils import plot_model\nfrom tensorflow.keras.layers import Flatten, Conv2D, MaxPooling2D, GlobalAveragePooling2D\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, Callback, ReduceLROnPlateau\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ndef seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n\n# \u4e71\u6570\u30b7\u30fc\u30c9\u56fa\u5b9a\nseed_everything(2020)","ea831b05":"inputPath = '..\/input\/datarobot-ai-academy-deep-learning-for-dic\/images\/train_images\/'\n# \u753b\u50cf\u8aad\u307f\u8fbc\u307f\nimage = cv2.imread(inputPath+'1_bathroom.jpg')\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\ndisplay(image.shape)\ndisplay(image[0][0])\n# \u753b\u50cf\u3092\u8868\u793a\nplt.figure(figsize=(8,4))\nplt.imshow(image)","bb951b1a":"# \u753b\u50cf\u306e\u30b5\u30a4\u30ba\u5909\u66f4\nimage = cv2.resize(image,(256,256))\ndisplay(image.shape)\ndisplay(image[0][0])\n# \u753b\u50cf\u3092\u8868\u793a\nplt.figure(figsize=(8,4))\nplt.imshow(image)","b639d361":"train = pd.read_csv('..\/input\/datarobot-ai-academy-deep-learning-for-dic\/train.csv')\ndisplay(train.shape)\ndisplay(train.head())","45445165":"def load_images(df,inputPath,size,roomType):\n    images = []\n    for i in df['id']:\n        basePath = os.path.sep.join([inputPath, \"{}_{}*\".format(i,roomType)])\n        housePaths = sorted(list(glob.glob(basePath)))\n        for housePath in housePaths:\n            image = cv2.imread(housePath)\n            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n            image = cv2.resize(image, (size, size))\n        images.append(image)\n    return np.array(images) \/ 255.0\n\n# load train images\ninputPath = '..\/input\/datarobot-ai-academy-deep-learning-for-dic\/images\/train_images\/'\nsize = 64\nroomType = 'frontal'\ntrain_images = load_images(train,inputPath,size,roomType)\ndisplay(train_images.shape)\ndisplay(train_images[0][0][0])","9aaf2f1b":"train_x, valid_x, train_images_x, valid_images_x = train_test_split(train, train_images, test_size=0.2)\ntrain_y = train_x['price'].values\nvalid_y = valid_x['price'].values\ndisplay(train_images_x.shape)\ndisplay(valid_images_x.shape)\ndisplay(train_y.shape)\ndisplay(valid_y.shape)","77b5f39f":"def create_cnn(inputShape):\n    model = Sequential()\n    \"\"\"\n    \u6f14\u7fd2:kernel_size\u3092\u5909\u66f4\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\n    \"\"\"    \n    model.add(Conv2D(filters=32, kernel_size=(5, 5), strides=(1, 1), padding='same',\n                     activation='relu', kernel_initializer='he_normal', input_shape=inputShape))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.1))\n\n    model.add(Conv2D(filters=64, kernel_size=(5, 5), strides=(1, 1), padding='same', \n                     activation='relu', kernel_initializer='he_normal'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.1))\n    \"\"\"\n    \u6f14\u7fd2:\u3082\u3046\u4e00\u5c64Conv2D->MaxPooling2D->BatchNormalization->Dropout\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\n    \"\"\"    \n    \n    model.add(Flatten())\n    \n    model.add(Dense(units=256, activation='relu',kernel_initializer='he_normal'))  \n    model.add(Dense(units=32, activation='relu',kernel_initializer='he_normal'))    \n    model.add(Dense(units=1, activation='linear'))\n    \n    model.compile(loss='mape', optimizer='adam', metrics=['mape']) \n    return model","fa4bfe0d":"# callback parameter\nfilepath = \"cnn_best_model.hdf5\" \nes = EarlyStopping(patience=5, mode='min', verbose=1) \ncheckpoint = ModelCheckpoint(monitor='val_loss', filepath=filepath, save_best_only=True, mode='auto') \nreduce_lr_loss = ReduceLROnPlateau(monitor='val_loss',  patience=2, verbose=1,  mode='min')\n\n# \u8a13\u7df4\u5b9f\u884c\ninputShape = (size, size, 3)\nmodel = create_cnn(inputShape)\nhistory = model.fit(train_images_x, train_y, validation_data=(valid_images_x, valid_y),epochs=30, batch_size=32,\n    callbacks=[es, checkpoint, reduce_lr_loss])\n","e8194e33":"def mean_absolute_percentage_error(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\n# load best model weights\nmodel.load_weights(filepath)\n\n# \u8a55\u4fa1\nvalid_pred = model.predict(valid_images_x, batch_size=32).reshape((-1,1))\nmape_score = mean_absolute_percentage_error(valid_y, valid_pred)\nprint (mape_score)","6e76ccdf":"model.summary()","9a0c6096":"plot_model(model, to_file='cnn.png')","5169e3ad":"loss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(loss))\nplt.plot(epochs, loss, 'bo' ,label = 'training loss')\nplt.plot(epochs, val_loss, 'b' , label= 'validation loss')\nplt.title('Training and Validation loss')\nplt.legend()\nplt.show()","46e82a86":"from tensorflow.keras.applications import VGG16\n\ndef vgg16_feature_extraction(inputShape):\n    backbone = VGG16(weights='imagenet',\n                    include_top=False,\n                    input_shape=inputShape)\n    \n    model = Sequential(layers=backbone.layers)     \n    model.add(Flatten())  \n    model.add(Dense(units=256, activation='relu',kernel_initializer='he_normal'))    \n    model.add(Dense(units=32, activation='relu',kernel_initializer='he_normal'))    \n    model.add(Dense(units=1, activation='linear'))\n    model.trainable = False    \n    model.compile(loss='mape', optimizer='adam', metrics=['mape']) \n    model.summary()\n    return model\n\n# \u8a13\u7df4\u5b9f\u884c\ninputShape = (size, size, 3)\nmodel = vgg16_feature_extraction(inputShape)\nhistory = model.fit(train_images_x, train_y, validation_data=(valid_images_x, valid_y),epochs=30, batch_size=32,\n    callbacks=[es, checkpoint, reduce_lr_loss])","330ca52e":"def vgg16_finetuning(inputShape):\n    backbone = VGG16(weights='imagenet',\n                    include_top=False,\n                    input_shape=inputShape)\n    \"\"\"\n    \u6f14\u7fd2:Convolution Layer\u306e\u91cd\u307f\u3092\u5168\u90e8\u8a13\u7df4\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff01\n    \"\"\"    \n    \n    for layer in backbone.layers[:15]:\n        layer.trainable = False\n    for layer in backbone.layers:\n        print(\"{}: {}\".format(layer, layer.trainable))\n        \n    model = Sequential(layers=backbone.layers)     \n    model.add(GlobalAveragePooling2D())\n    model.add(Dense(units=256, activation='relu',kernel_initializer='he_normal'))  \n    model.add(Dense(units=32, activation='relu',kernel_initializer='he_normal'))    \n    model.add(Dense(units=1, activation='linear'))\n    \n    model.compile(loss='mape', optimizer='adam', metrics=['mape']) \n    model.summary()\n    return model\n\n# callback parameter\nfilepath = \"transfer_learning_best_model.hdf5\" \nes = EarlyStopping(patience=5, mode='min', verbose=1) \ncheckpoint = ModelCheckpoint(monitor='val_loss', filepath=filepath, save_best_only=True, mode='auto') \nreduce_lr_loss = ReduceLROnPlateau(monitor='val_loss',  patience=2, verbose=1,  mode='min')\n\n# \u8a13\u7df4\u5b9f\u884c\ninputShape = (size, size, 3)\nmodel = vgg16_finetuning(inputShape)\nhistory = model.fit(train_images_x, train_y, validation_data=(valid_images_x, valid_y),epochs=30, batch_size=32,\n    callbacks=[es, checkpoint, reduce_lr_loss])\n\n# load best model weights\nmodel.load_weights(filepath)\n\n# \u8a55\u4fa1\nvalid_pred = model.predict(valid_images_x, batch_size=32).reshape((-1,1))\nmape_score = mean_absolute_percentage_error(valid_y, valid_pred)\nprint (mape_score)","aea8ffd7":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(horizontal_flip=True,\n                             vertical_flip=True,\n                             )\n\ninputPath = '..\/input\/datarobot-ai-academy-deep-learning-for-dic\/images\/train_images\/'\nimage = cv2.imread(inputPath+'1_bathroom.jpg')\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nimage_data = image \/ 255.0\nimage_data = image_data.reshape(1,image_data.shape[0],image_data.shape[1],image_data.shape[2])\n\nprint (image_data.shape)\nfor batch in datagen.flow(image_data,batch_size=1):\n    plt.imshow(image_data[0])\n    plt.show() \n    plt.imshow(batch[0])\n    plt.show()       \n    break","241b968a":"\"\"\"\n\u6f14\u7fd2:ImageDataGenerator\u4e2d\u306b\u65b0\u305f\u306a\u4e09\u3064\u3092\u8ffd\u52a0\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff01\n                             rotation_range=90,\n                             width_shift_range=0.2,\n                             height_shift_range=0.2,\n\"\"\"    \n\n# callback parameter\nfilepath = \"data_aug_best_model.hdf5\" \nes = EarlyStopping(patience=5, mode='min', verbose=1) \ncheckpoint = ModelCheckpoint(monitor='val_loss', filepath=filepath, save_best_only=True, mode='auto') \nreduce_lr_loss = ReduceLROnPlateau(monitor='val_loss',  patience=2, verbose=1,  mode='min')\n\n# \u8a13\u7df4\u5b9f\u884c\ndatagen = ImageDataGenerator(horizontal_flip=True,\n                             vertical_flip=True,\n                             )\ninputShape = (size, size, 3)\nbatch_size = 32\nmodel = vgg16_finetuning(inputShape)\ndatagen.fit(train_images_x,augment=True)\ntrain_datagen = datagen.flow(train_images_x, train_y, batch_size=batch_size, shuffle=True)\nhistory = model.fit(train_datagen, validation_data=(valid_images_x, valid_y),\n    steps_per_epoch=len(train_images_x) \/ batch_size, epochs=30,                \n    callbacks=[es, checkpoint, reduce_lr_loss])\n\n\n\n# load best model weights\nmodel.load_weights(filepath)\n\n# \u8a55\u4fa1\nvalid_pred = model.predict(valid_images_x, batch_size=32).reshape((-1,1))\nmape_score = mean_absolute_percentage_error(valid_y, valid_pred)\nprint (mape_score)","e5f6433d":"# \u8ee2\u79fb\u5b66\u7fd2","41961e69":"# \u30e2\u30c7\u30eb\u8a13\u7df4","bbbdbc80":"# CNN\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b","13da7f03":"# \u30e2\u30c7\u30eb\u53ef\u8996\u5316","9bf4fe31":"# \u6570\u5024\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f","eb2caae3":"# \u30e2\u30c7\u30eb\u8a55\u4fa1","6e192ab0":"# \u30c7\u30fc\u30bf\u6c34\u5897\u3084\u3057","3ecaf8aa":"# \u8a13\u7df4\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4f5c\u6210","dc980b74":"# \u753b\u50cf\u3092\u8aad\u307f\u8fbc\u307f","56b4f31f":"# \u8a13\u7df4\u5c65\u6b74\u53ef\u8996\u5316","03aa689d":"# \u753b\u50cf\u51e6\u7406","0002c85b":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8"}}