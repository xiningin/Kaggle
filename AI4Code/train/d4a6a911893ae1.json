{"cell_type":{"42af8397":"code","9bb9527c":"code","b713a8ad":"code","9d97b913":"code","a8bf8544":"code","ecea1cde":"code","e866d3f7":"code","b0f7a98e":"code","fb86cfa2":"code","d80838be":"code","9e636227":"code","aa65d924":"code","f1fe6650":"code","17d7982f":"code","97d46385":"code","13924266":"code","822374d6":"code","2918d575":"code","4621ce8d":"code","c1846ebb":"code","8d3dcbf6":"code","aafe9e05":"code","43fe5e46":"code","e7723c44":"code","cf95434c":"code","7ed4ded4":"code","886b7b7a":"code","c9297a07":"code","0ac6f19e":"code","f1bf682e":"code","e1edfcd9":"code","afbcf3c4":"code","7adae798":"code","cc44e6a5":"code","dce80fd0":"code","f57b2f06":"code","681b059c":"markdown","584b4213":"markdown","0688c90e":"markdown","ab5c1ae2":"markdown","d65fb30f":"markdown","1fa06641":"markdown","0623d716":"markdown","0cc2baba":"markdown","dac0adee":"markdown","46074998":"markdown","31b78142":"markdown","6514f478":"markdown","6eeda137":"markdown"},"source":{"42af8397":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","9bb9527c":"df=pd.read_csv('..\/input\/real-estate-price-prediction\/Real estate.csv')","b713a8ad":"df.head()","9d97b913":"df.info()","a8bf8544":"df.shape","ecea1cde":"df.drop('No',axis=1,inplace=True)","e866d3f7":"df.head()","b0f7a98e":"sns.pairplot(df)","fb86cfa2":"sns.histplot(data=df,x='Y house price of unit area',kde=True)","d80838be":"sns.heatmap(df.corr(),annot=True,cmap='Blues')","9e636227":"X=df.drop('Y house price of unit area',axis=1)","aa65d924":"y=df['Y house price of unit area']","f1fe6650":"from sklearn.preprocessing import PolynomialFeatures","17d7982f":"polynomial_converter=PolynomialFeatures(degree=2,include_bias=False)","97d46385":"poly_features=polynomial_converter.fit_transform(X)","13924266":"poly_features.shape","822374d6":"X.shape","2918d575":"from sklearn.model_selection import train_test_split","4621ce8d":"X_train , X_test , y_train , y_test=train_test_split( poly_features, y,test_size=0.3, random_state=101)","c1846ebb":"from sklearn.linear_model import LinearRegression","8d3dcbf6":"polymodel=LinearRegression()","aafe9e05":"polymodel.fit(X_train , y_train)","43fe5e46":"y_pred=polymodel.predict(X_test)","e7723c44":"pd.DataFrame({'y_test':y_test,'y_pred':y_pred,'Residuals':(y_test-y_pred)}).head(8)","cf95434c":"from sklearn import metrics","7ed4ded4":"MAE_poly=metrics.mean_absolute_error(y_test,y_pred)\nMSE_poly=metrics.mean_squared_error(y_test,y_pred)\nRMSE_poly=np.sqrt(MSE_poly)","886b7b7a":"pd.DataFrame([MAE_poly ,MSE_poly, RMSE_poly],index=['MAE','MSE','RMSE'],columns=['metrics'])","c9297a07":"#create train list RMSE per degree\ntrain_RMSE_list=[]\n#create test list RMSE per degree \ntest_RMSE_list=[]\n\nfor d in range(1,10):\n    #create poly dataset for degree(d)\n    polynomial_converter=PolynomialFeatures(degree=d, include_bias=False)\n    poly_features=polynomial_converter.fit_transform(X)\n    \n    #train & test dataset\n    X_train , X_test , y_train , y_test = train_test_split(poly_features, y, test_size=0.3)\n    \n    #train model\n    polymodel=LinearRegression()\n    polymodel.fit(X_train , y_train)\n    \n    #predicting\n    y_train_pred=polymodel.predict(X_train)\n    y_test_pred=polymodel.predict(X_test)\n    \n    #evaluating model\n    train_RMSE=np.sqrt(metrics.mean_squared_error(y_train , y_train_pred))\n    \n    test_RMSE=np.sqrt(metrics.mean_squared_error(y_test, y_test_pred))\n    \n    #Append to RMSE to the train & test list\n    train_RMSE_list.append(train_RMSE)\n    test_RMSE_list.append(test_RMSE)","0ac6f19e":"train_RMSE_list","f1bf682e":"test_RMSE_list","e1edfcd9":"plt.plot(range(1,6) , train_RMSE_list[:5], label='Train RMSE')\nplt.plot(range(1,6) , test_RMSE_list[:5], label='Test RMSE')\nplt.xlabel('Polynomial Degree')\nplt.ylabel('RMSE')\nplt.legend()","afbcf3c4":"#2 degree polynomials are suitable","7adae798":"#Create polynomial features\nFinal_polynomial_converter= PolynomialFeatures(degree=2, include_bias=False)\n\nFinal_poly_features= Final_polynomial_converter.fit_transform(X)\n\n\n#Split dataSet\nX_train, X_test, y_train, y_test = train_test_split(Final_poly_features, y, test_size=0.3)\n\n#Train model\nFinal_PolyModel=LinearRegression()\nFinal_PolyModel.fit(X_train, y_train)","cc44e6a5":"from joblib import dump, load","dce80fd0":"dump(Final_PolyModel,'Price_PolyModel.joblib')","f57b2f06":"dump(Final_polynomial_converter, 'Poly_Converter.joblib')","681b059c":"# Predicting Test Data","584b4213":"# Adjusting Model Parameters","0688c90e":"# EDA","ab5c1ae2":"# Finalizing Model Parameters","d65fb30f":"# Saving Model","1fa06641":"# Split Data to Train & Test","0623d716":"# Data Overviwe","0cc2baba":"# Evaluatig Model","dac0adee":"# Detemine Features & Labels","46074998":"# Import DataSet","31b78142":"# Train Model","6514f478":"# Plot Polynomial Degree vs RMSE","6eeda137":"# Preprocessing"}}