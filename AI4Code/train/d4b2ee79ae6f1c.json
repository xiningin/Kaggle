{"cell_type":{"9da3aa27":"code","d1784ece":"code","b239933d":"code","09322fab":"code","e3bbc7d0":"code","80258de0":"code","fd3dce26":"code","fa79542c":"code","ab5e6ef8":"code","07ab35a1":"code","4e983725":"code","40a87c85":"code","66e43854":"code","8e145b59":"code","0b78f41f":"code","9990cba2":"code","7b5c72c6":"code","d4699501":"code","6603aec7":"code","6303f65a":"code","8160d714":"code","b1ffea08":"code","2b135df2":"code","698fd22c":"code","f4ad380b":"code","84dbe07a":"code","57e5225d":"code","81727878":"code","be195fc2":"code","060ca209":"code","a8005781":"code","d02170dd":"code","2beb3b4c":"code","953a0aae":"code","3aa56345":"code","7a004716":"code","d2b971bd":"code","b91c46a5":"code","993cca1e":"code","a7e9cefe":"code","8c9875af":"code","09ce1ece":"code","b02f693f":"code","89e6e70c":"markdown","8706365c":"markdown","a2ab4d19":"markdown","263e437c":"markdown","272a6c7b":"markdown","e62bd238":"markdown"},"source":{"9da3aa27":"from pathlib import Path\n\nimport cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.neighbors import NearestNeighbors\n\nfrom tqdm import tqdm","d1784ece":"ROOT = Path('\/kaggle')\nINPUT = ROOT \/ 'input'\nDATA = INPUT \/ 'seti-breakthrough-listen'\nTRAIN = DATA \/ 'train'\nTEST = DATA \/ 'test'","b239933d":"def add_image_path(df: pd.DataFrame, root):\n    out_df = df.copy()\n    out_df['image_path'] = df['id'].apply(lambda x: root \/ x[0] \/ f'{x}.npy')\n    return out_df","09322fab":"train_df = pd.read_csv(DATA \/ 'train_labels.csv')\ntest_df = pd.read_csv(DATA \/ 'sample_submission.csv')\nall_df = pd.concat([train_df, test_df]).reset_index(drop=True)","e3bbc7d0":"train_df = add_image_path(train_df, TRAIN)\ntest_df = add_image_path(test_df, TEST)\n\nimage_paths = np.concatenate([\n    train_df['image_path'].values,\n    test_df['image_path'].values,\n])","80258de0":"def normalize(x: np.ndarray) -> np.ndarray:\n    return (x - x.mean(keepdims=True)) \/ x.std(keepdims=True)","fd3dce26":"def normalize_columnwise(x: np.ndarray) -> np.ndarray:\n    return (x - x.mean(axis=0, keepdims=True)) \/ x.std(axis=0, keepdims=True)","fa79542c":"def clean_image(x: np.ndarray) -> np.ndarray:\n    x = normalize_columnwise(x)\n    neigh = NearestNeighbors(n_neighbors=2, algorithm=\"brute\", metric=\"minkowski\", p=2)\n    neigh.fit(x.T)\n    _, inds = neigh.kneighbors(x.T)\n    nearest_columns = inds[:, 1]\n    x = x - x[:, nearest_columns]\n    x = x.clip(min=0.0)\n    return x","ab5e6ef8":"def plot_cleaned_image(image_path):\n    x = np.load(image_path)\n    x = x[0]\n    \n    x1 = x.astype('f')\n    x2 = clean_image(x1)\n\n    fig, axes = plt.subplots(1, 2, figsize=(12, 6))\n    axes[0].imshow(x1)\n    axes[1].imshow(x2)\n    \n    plt.show()\n    plt.close()","07ab35a1":"def get_index_by_id_starts_with(df: pd.DataFrame, image_id: str) -> int:\n    return df[df['id'].str.startswith(image_id)].index.item()","4e983725":"plot_cleaned_image(image_paths[594])","40a87c85":"plot_cleaned_image(image_paths[19798])","66e43854":"plot_cleaned_image(image_paths[23742])","8e145b59":"plot_cleaned_image(image_paths[59038])","0b78f41f":"plot_cleaned_image(image_paths[44])","9990cba2":"plot_cleaned_image(image_paths[36])","7b5c72c6":"plot_cleaned_image(image_paths[61])","d4699501":"plot_cleaned_image(image_paths[98])","6603aec7":"plot_cleaned_image(image_paths[109])","6303f65a":"plot_cleaned_image(image_paths[195])","8160d714":"plot_cleaned_image(image_paths[33930])","b1ffea08":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, '38e4f')])","2b135df2":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, '9928b0')])","698fd22c":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, 'd74b3a')])","f4ad380b":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, '04d80')])","84dbe07a":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, '53f6a20')])","57e5225d":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, '896a08')])","81727878":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, '779062')])","be195fc2":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, 'b49b6')])","060ca209":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, 'd8664')])","a8005781":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, '00865')])","d02170dd":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, '81b958')])","2beb3b4c":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, '41a48')])","953a0aae":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, 'd8ca4')])","3aa56345":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, '66c7f97')])","7a004716":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, 'a325f3')])","d2b971bd":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, 'bd3bb')])","b91c46a5":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, 'afffc46a')])","993cca1e":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, 'bf9667')])","a7e9cefe":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, 'e1b81')])","8c9875af":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, 'b9e2c2')])","09ce1ece":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, 'a9520d')])","b02f693f":"plot_cleaned_image(image_paths[get_index_by_id_starts_with(all_df, '7a943b44')])","89e6e70c":"# Positive Example","8706365c":"# Load Dataset","a2ab4d19":"# Test Data","263e437c":"# Negative Example","272a6c7b":"# Utility Functions","e62bd238":"# About\n\nWhen I was trying to reproduce 1st place solution magic #2, I come up with a naiive algorithm which cancels background noize.\nIn this algorithm, it's not necessary to assume there exists the dupulicated image on the dataset.\n\nThe process is like below:\n\n1. for each images, apply process below\n1. normalize each column\n1. for each columns, find similar column in the image by kNN search\n1. replace the column with the difference of original and nearest matched column\n\nIt's not perfectly eliminate the background noize, and it sometimes eliminate the signal, but it shows the possibility that even if the duplicated image not exists on the dataset, the 1st place approach -- clean background noise -- can be effective for the general task."}}