{"cell_type":{"3ff966e2":"code","b655bafe":"code","1f681470":"code","04b8df34":"code","d02f0519":"code","22437c0f":"code","50b13d10":"code","85fb45b9":"code","610cbe54":"code","12fbb0ae":"code","1bdf975d":"code","c72d5c77":"markdown","5804813d":"markdown","94e63f76":"markdown","6a68dbc9":"markdown","bcaab598":"markdown","4a016c90":"markdown","a8a5bfff":"markdown","6d08ba8b":"markdown","6080f822":"markdown"},"source":{"3ff966e2":"from random import randint\nfrom IPython.display import clear_output","b655bafe":"board = list(range(1,10))\nboard","1f681470":"def board_design(board):\n    \n    \"\"\"\n    The board design function is intended as the graphical part of the game.\n    I've decided to put a tab at the begining of each line, to make it look better.\n    The board will begin with \"_\",will have \"|\" between numbers and \"-\" between lines\n    \"\"\"\n    \n    # The upper part\n    print(\"\\t\"+\"_\"*19)\n\n    #First Line\n    print(\"\\n\\t| \",board[6],\" | \", board[7],\" | \", board[8],\" | \")\n    \n    #Between line 1 and 2\n    \n    print(\"\\n\\t\"+\"-\"*19)\n    \n    #Second Line\n    print(\"\\n\\t| \",board[3],\" | \", board[4],\" | \", board[5],\" | \")\n  \n    #Between line 2 and 3\n    \n    print(\"\\n\\t\"+\"-\"*19)    \n    \n    \n    #Last Line\n    print(\"\\n\\t| \",board[0],\" | \", board[1],\" | \", board[2],\" | \")   \n\n    # The bottom part\n    print(\"\\t\"+\"_\"*19)\n    \n    \nboard_design(board)","04b8df34":"# Determining the first player\n\ndef first_player():\n    \n    \"\"\"\n    The first player will be determined by using randint to pick between 1 and 2\n        *) 1 is for X\n        *) 2 is for O\n        \n    The function will also return a list two, either [X & O] or [O & X]. This will help us in filling out the board.\n    \"\"\"\n\n    \n    \n    first_player = randint(1,2)\n    \n    if first_player == 1:\n        print(\"Player X goes first.\")\n        print(\"Player O goes second.\\n\")\n        return[\"X\",\"O\"]\n    \n    else:\n        print(\"Player 0 goes first.\")\n        print(\"Player X goes second.\\n\")\n        return[\"O\",\"X\"]\n    \nfirst_player()","d02f0519":"def player_choice(board):\n    \n    \"\"\"\n    Decided that position will start with 0, as it's not in the board.\n    \"\"\"\n\n    position = 0\n    \n    while position not in board:\n        position = int(input(\"Select position (1-9):\"))\n        \n    \n    return position-1\n\nplayer_choice(board)","22437c0f":"def place_marker(board, marker, position):\n    #Our function will take the board, a marker (which will be X or O) and a position determined by the player\n    board[position] = marker\n\n    \n#testing out our functions\nposition = player_choice(board)\nplace_marker(board, \"%\", position)\nboard_design(board)","50b13d10":"def full_board(board):\n    \n    \"\"\"\n    My approach is that items from board will be added to a new list name \"numbers\".\n    Afterwards, an if statement will test to see if there are any numbers in the \"numbers\" list.\n    I'm doing this to avoid any errors raised by the fact that \"board\" will contain \"X\", which is a string.\n    \"\"\"\n    \n    numbers = []\n    \n    #we are using isdigit in order to test and append \n    for item in board:\n        if str(item).isdigit():\n            numbers.append(item)\n    \n    if any([num >= 1 for num in numbers]):\n        return False\n    else:\n        return True\n        \n\nfull_board(board)","85fb45b9":"def win_check(board, mark):\n    \"\"\"\n    We have to create a function that checks whether a player is able to win.\n    Easiest way is to just use a return and check if any winning condition is met.\n    \"mark\" will be added at the end, so that we get to know who is the winner.\n    \"\"\"\n    \n    return(\n     #horizontal   \n    (board[0] == board[1] == board[2] == mark) or\n    (board[3] == board[4] == board[5] == mark) or   \n    (board[6] == board[7] == board[8] == mark)\n    \n    #vertical\n    or\n    (board[0] == board[3] == board[6] == mark) or\n    (board[1] == board[4] == board[7] == mark) or\n    (board[2] == board[5] == board[8] == mark)\n        \n    #diagonal\n    or\n    (board[0] == board[4] == board[8] == mark) or\n    (board[2] == board[4] == board[6] == mark) \n    )\n\nwin_check(board, \"X\")","610cbe54":"#Intro\n\ndef intro():\n    print(\"Welcome to Tic Tac Toe!\")\n    print(\"\\n\")\n    print(\"The rules are simple. The player who succeeds in placing three of their marks in a horizontal, vertical, or diagonal row is the winner.\")\n    print(\"It is a solved game, with a forced draw assuming best play from both players.\")\n    input(\"\\nPress Enter to continue...\")\n    \n    clear_output()\n    \nintro()","12fbb0ae":"#Repeat function\n\ndef repeat(): \n    \n    \"\"\"\n    This will be quite straightforward.\n    We will have a list with two choices, \"yes\" and \"no\". You should be able to write it in caps lock, capitalized, lower case, either way. \n    As long if it's not \"yes\" or \"no\", the code will repeat.\n    When \"yes\" is the input, the game will restart.\n    When \"no\" is the input, the game will stop.\n    \n    \"\"\"  \n    \n    #Creating the list and the choice\n    repeat = ['yes','no']\n    select = \" \"\n    \n    #Leaving two spaces just because we want to make it a little more visible for the user\n    print(\"\\n\\n\")\n    \n    \n    #While select is not yes, or no, the code will repeat.\n    while select not in repeat:\n        select = input('Do you want to play again?\\n Write \"YES\" or \"NO\":\\n')\n        select = select.lower() #transforming the choice into lower case\n        if select not in repeat: #repeating the code in case of an invalid choice\n            clear_output()\n            print('Chose \"YES\" or \"NO\":\\n')\n    \n    #If either yes or no are written, the function will determine if the game will return True or False\n    if select == \"yes\":\n        return True\n    else:\n        return False","1bdf975d":"\nwhile True:\n    #First, clearing the screen, recreating the board and displaying the intro.\n    clear_output()\n    board = list(range(1,10))\n    intro()\n    print(\"\\n\")\n    \n    #Choosing the first player\n    order = first_player()\n    print(\"\\n\")\n    \n    #Player 1 and Player 2 will take either \"X\" or \"O\"\n    player1 = order[0]\n    player2 = order[1]\n    \n    #Since Player1 is the first player, he\/she will be assigned to a variable named turn.\n    #Turn will be used to determine which is the player that has his\/her turn.\n    turn = player1\n    \n    #Game_on will remain true until a finishing condition is met\n    game_on = True\n    \n    while game_on == True:\n        \n        #Player 1 takes thet first turn\n        if turn == player1:\n            board_design(board)\n            print(\"\\nPlayer {}\".format(player1))\n            position = player_choice(board)\n            place_marker(board, player1, position)\n            clear_output()\n            \n            if win_check(board, player1):\n                print(\"Game won by Player {} !\".format(player1))\n                PlayerX =+ 1\n                game_on = False\n            elif full_board(board):\n                print(\"It's a Draw!\")\n                Draw =+ 1\n                game_on = False\n            else:\n                turn = player2\n        \n        #Player 2 has the next turn\n        \n        elif turn == player2:\n            board_design(board)\n            print(\"\\nPlayer {}\".format(player2))\n            position = player_choice(board)\n            place_marker(board, player2, position)\n            clear_output()\n            \n            if win_check(board, player2) == True:\n                print(\"Game won by Player {} !\".format(player2))\n                Player0 =+ 1\n                game_on = False\n            elif full_board(board):\n                print(\"It's a Draw!\")\n                Draw =+ 1\n                game_on = False\n            else:\n                turn = player1\n\n    \n    #Repeating\n    if not repeat():\n        break","c72d5c77":"# Gameplay\n\nWe have designed the board, but we do not have a way of interacting with it. \n\n## First Player\n\nThe gameplay should revolve around two players, one with *X* and one with *O*. At the start of the game, <code>randint<\/code> will determine which player starts. The game will continue until a winner is declared, or the board is full.\n","5804813d":"# Designing the Board\n\nAs mentioned, there will be 9 squares each corresponding to a number from 1 to 9. The board will look something like this, using simple Python text graphics.\n\n>     _____________\n>     \n>     | 1 | 2 | 3 |\n>     -------------\n>     | 4 | 5 | 6 |\n>     -------------\n>     | 7 | 8 | 9 |\n>     _____________\n\n\nFirst, we should create a list that will keep hold of the numbers and selections. For now, it will look like a simple 1 - 9 list, but as we will play on, it will replace numbers with Xs or Os.","94e63f76":"# Intro\n\n**Tic Tac Toe**, or **Xs and 0s**, is an old game dating back to Ancient Egypt. \n\nIt's a game for two players who take turns marking the spaces in a three-by-three grid with X or O. The player who succeeds in placing three of their marks in a horizontal, vertical, or diagonal row is the winner. It is a solved game, with a forced draw assuming best play from both players.\n\nThere is no universally-agreed rule as to who plays first, but in this article the convention that X plays first is used.\n\n# Game Design\n\nThe first thing to do is create the board. It should involve 9 squares, which will be delimited by a character. Each square will correspond to a number from 1 to 9.\n\nThen we should create the mechanics for the two players, one using X and the other 0. At the start of the game, the code will decide randomly who goes first.\n\nPlayers will decide which square they want to fill in with their symbol in their respective turn.\n\nThe game stops when there is a winner or when when all the squares are filled out. If  is able to fill out 3 consecutive diagonal, horizontal or vertical line, then he is declared the winner.\n\nI'll also create a table in order to keep track of the numbers of wins, losses or draws.\n\n\n# Importing Libraries\n\nAs usual, the first thing to do is importing the necessary tools from different libraries that are available to Python. I would want a <code>randint<\/code> in order to determine who goes first. <code>clear_output<\/code> will also be of help because we will clear the game in order to display the latest version of the board, each time.","6a68dbc9":"# THE GAME\n\nThe moment he we have all been waiting for, running the game.\n\nThis will require two while loops... one that will start the game and restart it if we want to start again, and one that will keep the game going as long as a condition is not met (either someone wins, or the board is full).","bcaab598":"# Intro & Repeat\n\nWe have all our building blocks except for the intro of the game and a replay function.","4a016c90":"Next, we should actually design the board.","a8a5bfff":"## Accepting User Input\n\nNext, we want to be able to interact with the board. \n\nIn order to do this, would need our program to accept a valid player input, between 1 and 9 that is also compatible with a free space board. Then, it should have a marker (which will be our *X* or *0*, depending on the player). ","6d08ba8b":"Well, I can't say it's been easy... \n\nBut I hope this notebooks help others trying to get into Python.","6080f822":"## End Game\n\nThe game will stop, eventually. It will be either a draw or a win for someone. First we should create a function to check if the board is full. Afterwards, a function that will determine if winning conditions are met."}}