{"cell_type":{"5bd847ae":"code","149ecee2":"code","8a9798b6":"code","b87bbd5e":"code","1726be48":"code","65ecef82":"code","e0e32444":"code","7f80e895":"code","c44aee43":"code","100f9326":"code","eb891570":"code","68b5a9fb":"code","50c942fc":"code","4714bf13":"code","5b5aecb1":"code","bebbda32":"code","14aa9b5d":"code","1dfb2165":"code","073c7383":"code","0304390e":"code","e4aa7bfe":"code","87eb01ff":"code","a8cefc20":"code","b66f5fb2":"code","57482a1a":"code","69db4578":"code","f84deba9":"code","5e6400e7":"code","2a29aeb3":"code","58ba2ef5":"code","00db504c":"code","befe5a6d":"code","28167fdf":"code","5b608602":"code","993d90a3":"code","89f184d8":"code","b63c5882":"code","c6bb27c4":"code","b1b211d9":"code","013cabff":"code","70a7602a":"code","b31aad2a":"code","88290bbb":"code","074d0888":"code","36111abc":"code","67a9ee37":"code","0c514222":"code","ae04fd09":"code","69f3d0eb":"code","5932d52a":"code","3ccee956":"code","bcc4e680":"code","831f1d56":"code","f56e4ed4":"code","13387ba5":"code","c1f9a897":"code","15a9b703":"code","286ff08e":"code","406828b1":"code","79d97cb4":"code","14989f1b":"code","aa7d88c2":"code","be32c129":"code","5c5b1326":"code","1f9ca0e0":"code","0fc82ef0":"code","ad468cf9":"code","3921c319":"code","e8c64f88":"code","a8f28d82":"code","25edc8a9":"code","5da41b33":"code","61bcf9b3":"code","14d8e3cb":"code","b457b6b3":"code","202f4d3f":"code","7dd2efc9":"code","f49f1719":"code","969ea7f5":"code","6a534b76":"code","fccc5063":"code","bb9e548f":"code","304c92d4":"code","cf3bbb39":"code","e3d2a054":"code","5c897f06":"code","7b92ceb1":"code","f8b2b4b5":"code","b6d42a26":"code","3d16beee":"code","d1f1df6b":"code","9a0730e8":"code","4bbb86e6":"code","cf23ebff":"code","4d3bb718":"code","fef41a98":"code","8742da3f":"code","179d06f8":"code","b16501e3":"code","95e297fb":"code","59571b86":"code","ce14e253":"code","101f380c":"code","3db9d0cd":"code","48a7e300":"code","5990a2a3":"code","acb30138":"code","29ad3526":"code","7c438075":"code","a3cdff3d":"code","9591da47":"code","b34d2671":"code","6a22276e":"code","de3a8975":"code","b5a438b1":"code","2a9524f9":"code","a0f13696":"code","9aa208e2":"code","dc32df55":"code","4ca6a074":"code","594f78c1":"code","b7b919ef":"code","c24508fe":"code","c106a1fb":"code","796ebfb9":"code","36d85e3a":"code","4ed1e81b":"code","407a1f6f":"code","ae4a6da7":"code","f31d1cb8":"code","a2bfd734":"code","9e924347":"code","47fa45fd":"code","6fb59ef4":"code","88881483":"code","dae95d87":"code","d6d461ec":"code","e74f566e":"code","ac855e1f":"code","4af5dfa1":"code","f7f6e7d5":"code","c8b074d0":"markdown","09b86aed":"markdown","328ebaba":"markdown","f079d6e4":"markdown","e8367040":"markdown","2036ed49":"markdown","09654102":"markdown","ac710722":"markdown","c0fbb009":"markdown","8d5945b1":"markdown","d7066935":"markdown","9b38eab3":"markdown","83a3b775":"markdown","ea4cbbee":"markdown","3648e014":"markdown","89e90a64":"markdown","4cd7f308":"markdown","2d5cf858":"markdown","8b256e0a":"markdown","ad955dbe":"markdown","caf87792":"markdown","fe51cc3d":"markdown","515ca5c0":"markdown","d0107c9d":"markdown","a842ccfb":"markdown","9489ae16":"markdown","983c1980":"markdown","70a5a26b":"markdown","1b924ed8":"markdown","6796749e":"markdown","493627ae":"markdown","7ba3697b":"markdown","712d88dd":"markdown"},"source":{"5bd847ae":"import numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","149ecee2":"pwd","8a9798b6":"train=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest=pd.read_csv('..\/input\/titanic\/test.csv')","b87bbd5e":"train.head()","1726be48":"test.head()","65ecef82":"train_df=train.copy()\ntest_df=test.copy()","e0e32444":"train_df.describe().T","7f80e895":"test_df.describe().T","c44aee43":"train_df.shape","100f9326":"test_df.shape","eb891570":"train_df.info()","68b5a9fb":"test_df.info()","50c942fc":"train_df['Sex'].value_counts()","4714bf13":"train_df.groupby('Sex')['Survived'].mean()","5b5aecb1":"sns.barplot(x=\"Sex\", y=\"Survived\", data=train_df)","bebbda32":"train_df['Pclass'].value_counts()","14aa9b5d":"train_df.groupby('Pclass')['Survived'].mean()","1dfb2165":"sns.barplot(x=\"Pclass\", y=\"Survived\", data=train_df)","073c7383":"fig = plt.figure(figsize=(12,6),)\n\nax=sns.kdeplot(train.Pclass[train.Survived == 0] , \n               color='red',\n               shade=True,\n               label='not survived')\n\nax=sns.kdeplot(train.loc[(train['Survived'] == 1),'Pclass'] , \n               color='g',\n               shade=True, \n               label='survived', \n              )\nplt.title('Survived vs Non-Survived')\nplt.ylabel(\"Frequency of Survived Passenger\")\nplt.xlabel(\"Class of Passenger\")\n## Converting xticks into words for better understanding\nlabels = ['Upper', 'Middle', 'Lower']\nplt.xticks(sorted(train.Pclass.unique()), labels);","0304390e":"train_df['Embarked'].value_counts()","e4aa7bfe":"train_df.groupby('Embarked')['Survived'].mean()","87eb01ff":"sns.barplot(x=\"Embarked\", y=\"Survived\", data=train_df);","a8cefc20":"train_df['Survived'].value_counts().plot.barh().set_title('Frequency of Survived');","b66f5fb2":"train_df['Ticket'].value_counts()","57482a1a":"train_df['SibSp'].value_counts()","69db4578":"train_df.groupby('SibSp')['Survived'].mean()","f84deba9":"sns.barplot(x=\"SibSp\", y=\"Survived\", data=train_df);","5e6400e7":"train_df['Parch'].value_counts()","2a29aeb3":"train_df.groupby('Parch')['Survived'].mean()","58ba2ef5":"sns.barplot(x=\"Parch\", y=\"Survived\", data=train_df);","00db504c":"train_df.isnull().sum()","befe5a6d":"test_df.isnull().sum()","28167fdf":"100*train_df.isnull().sum()\/len(train_df)","5b608602":"100*test_df.isnull().sum()\/len(test_df)","993d90a3":"train_df = train_df.drop(columns=\"Cabin\")","89f184d8":"test_df = test_df.drop(columns=\"Cabin\")","b63c5882":"train_df.isnull().sum()","c6bb27c4":"test_df.isnull().sum()","b1b211d9":"train_df['Title'] = train['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\ntest_df['Title'] = test['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\n","013cabff":"train_df.head()","70a7602a":"test_df.head()","b31aad2a":"train_df['Title'] = train_df['Title'].replace(['Lady', 'Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\ntrain_df['Title'] = train_df['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\ntrain_df['Title'] = train_df['Title'].replace('Mlle', 'Miss')\ntrain_df['Title'] = train_df['Title'].replace('Ms', 'Miss')\ntrain_df['Title'] = train_df['Title'].replace('Mme', 'Mrs')","88290bbb":"test_df['Title'] = test_df['Title'].replace(['Lady', 'Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\ntest_df['Title'] = test_df['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\ntest_df['Title'] = test_df['Title'].replace('Mlle', 'Miss')\ntest_df['Title'] = test_df['Title'].replace('Ms', 'Miss')\ntest_df['Title'] = test_df['Title'].replace('Mme', 'Mrs')","074d0888":"train_df['Title'].value_counts()","36111abc":"test_df['Title'].value_counts()","67a9ee37":"[train_df.groupby('Title')['Age'].median(),train_df.groupby('Title')['Age'].std(),train_df.groupby('Title')['Age'].mean()]","0c514222":"train_df['Age'].fillna(train_df.groupby('Title')['Age'].transform('median'),inplace=True)","ae04fd09":"train_df.isnull().sum()","69f3d0eb":"test_df['Age'].fillna(test_df.groupby('Title')['Age'].transform('median'),inplace=True)","5932d52a":"test_df.isnull().sum()","3ccee956":"train_df['Embarked'].value_counts()","bcc4e680":"train_df[train_df.Embarked.isnull()]","831f1d56":"train_df.groupby(['Embarked','Title'])['Title'].count()","f56e4ed4":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna('S')","13387ba5":"train_df.isnull().sum()","c1f9a897":"test_df[test.Fare.isnull()]","15a9b703":"test_df[[\"Pclass\",\"Fare\"]].groupby(\"Pclass\").mean()","286ff08e":"test_df[\"Fare\"] = test_df[\"Fare\"].fillna(12.46)","406828b1":"test_df.isnull().sum()","79d97cb4":"train_df.describe(percentiles=[0.05,0.1,0.25,0.5,0.75,0.9,0.95,0.99]).T","14989f1b":"sns.boxplot(x = train_df['Fare']);","aa7d88c2":"Q1=train_df['Fare'].quantile(0.25)\nQ3=train_df['Fare'].quantile(0.75)\nIQR=Q3-Q1\nprint(IQR)","be32c129":"lower_limit=Q1 - 1.5 * IQR\nupper_limit=Q3 + 1.5 * IQR\nprint('lower limit: '+str(lower_limit))\nprint('upper limit: '+str(upper_limit))","5c5b1326":"train_df['Fare'][train_df['Fare']>upper_limit].count()","1f9ca0e0":"train_df['Fare'][train_df['Fare']>upper_limit].sort_values(ascending=False).head()","0fc82ef0":"train_df['Fare']=train_df['Fare'].replace(512.3292,275)\ntest_df['Fare']=test_df['Fare'].replace(512.3292,275)","ad468cf9":"embarked_dict={'S':1,'C':2,'Q':3}","3921c319":"train_df['Embarked']=train_df['Embarked'].map(embarked_dict)\ntest_df['Embarked']=test_df['Embarked'].map(embarked_dict)","e8c64f88":"train_df.head()","a8f28d82":"train_df['Sex']=train_df['Sex'].map(lambda x:0 if x=='female' else 1).astype(int)\ntest_df['Sex']=test_df['Sex'].map(lambda x:0 if x=='female' else 1).astype(int)","25edc8a9":"train_df.head()","5da41b33":"test_df.head()","61bcf9b3":"train_df['Title'].unique()","14d8e3cb":"test_df['Title'].unique()","b457b6b3":"# There is no Royal Category at test_df,\ntitle_dict={'Mr':1,'Mrs':2,'Miss':3,'Master':4,'Rare':5,'Royal':5}","202f4d3f":"train_df['Title']=train_df['Title'].map(title_dict)\ntest_df['Title']=test_df['Title'].map(title_dict)","7dd2efc9":"train_df.head()","f49f1719":"test_df.head()","969ea7f5":"train_df=train_df.drop(['Name','Ticket','Fare'],axis=1)","6a534b76":"train_df.head()","fccc5063":"test_df=test_df.drop(['Name','Ticket','Fare'],axis=1)","bb9e548f":"test_df.head()","304c92d4":"# new field family size\ntrain_df['FamilySize']=train_df['SibSp'] + train_df['Parch'] + 1\ntest_df['FamilySize']=test_df['SibSp'] + test_df['Parch'] + 1","cf3bbb39":"train_df.head()","e3d2a054":"train_df['is_Single']=train_df['FamilySize'].map(lambda x: 1 if x < 2 else 0)\ntest_df['is_Single']=test_df['FamilySize'].map(lambda x: 1 if x < 2 else 0)","5c897f06":"train_df=pd.get_dummies(train_df,columns=['Title'],drop_first=False)\ntest_df=pd.get_dummies(test_df,columns=['Title'],drop_first=False)","7b92ceb1":"train_df = pd.get_dummies(train_df, columns = [\"Embarked\"], prefix=\"Em\")\ntest_df = pd.get_dummies(test_df, columns = [\"Embarked\"], prefix=\"Em\")","f8b2b4b5":"train_df.head()","b6d42a26":"test_df.head()","3d16beee":"train_df['Pclass'] = train_df['Pclass'].astype('category',copy=False)\ntrain_df=pd.get_dummies(train_df,columns=['Pclass'],drop_first=False)\ntrain_df.head()","d1f1df6b":"test_df['Pclass'] = test_df['Pclass'].astype('category',copy=False)\ntest_df=pd.get_dummies(test_df,columns=['Pclass'],drop_first=False)\ntest_df.head()","9a0730e8":"train_df.head()","4bbb86e6":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import GridSearchCV\nX = train_df.drop(['Survived', 'PassengerId'], axis=1)\nY = train_df[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.20, random_state = 13)\n","cf23ebff":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression(solver='liblinear')\nlogreg.fit(x_train, y_train)\ny_pred = logreg.predict(x_test)\nacc_log_model = round(accuracy_score(y_pred, y_test) , 4)*100\nprint(str(acc_log_model)+str('%'))\nprint(confusion_matrix(y_pred, y_test))","4d3bb718":"from sklearn.svm import SVC\nsvm_model = SVC(kernel = \"linear\").fit(x_train, y_train)\ny_pred = svm_model.predict(x_test)","fef41a98":"acc_svm_model = round(accuracy_score(y_pred, y_test) , 4)*100\nprint(str(acc_svm_model)+str('%'))\nprint(confusion_matrix(y_pred, y_test))","8742da3f":"svc_params = {\"C\": np.arange(1,5)}\n\nsvc = SVC(kernel = \"linear\")\n\nsvc_cv = GridSearchCV(svc,svc_params, \n                            cv = 10, \n                            n_jobs = -1, \n                            verbose = 2 )\n\nsvc_cv.fit(x_train, y_train)","179d06f8":"print(\"Best Parameters: \" + str(svc_cv.best_params_))","b16501e3":"svc_tuned = SVC(kernel = \"linear\", C = 1).fit(x_train, y_train)\ny_pred = svc_tuned.predict(x_test)","95e297fb":"acc_svc_tuned = round(accuracy_score(y_pred, y_test), 4)*100\nprint(str(acc_svc_tuned)+str('%'))\nprint(confusion_matrix(y_pred, y_test))","59571b86":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree\ncart = DecisionTreeClassifier()\ncart_model = cart.fit(x_train, y_train)\ny_pred = cart_model.predict(x_test)","ce14e253":"cart_model = round(accuracy_score(y_test, y_pred),4)*100\nprint(str(cart_model)+str('%'))\nprint(confusion_matrix(y_pred, y_test))","101f380c":"cart_grid = {\"max_depth\": range(1,10),\n            \"min_samples_split\" : list(range(2,50)) }","3db9d0cd":"cart = tree.DecisionTreeClassifier()\ncart_cv = GridSearchCV(cart, cart_grid, cv = 10, n_jobs = -1, verbose = 2)\ncart_cv_model = cart_cv.fit(x_train, y_train)","48a7e300":"print(\"Best Parameters: \" + str(cart_cv_model.best_params_))","5990a2a3":"cart = tree.DecisionTreeClassifier(max_depth = 3, min_samples_split = 2)\ncart_tuned = cart.fit(x_train, y_train)\ny_pred = cart_tuned.predict(x_test)","acb30138":"cart_acc = round(accuracy_score(y_pred, y_test), 4)*100\nprint(str(cart_acc)+str('%'))\nprint(confusion_matrix(y_pred, y_test))","29ad3526":"from sklearn.ensemble import GradientBoostingClassifier\n\ngb = GradientBoostingClassifier()\ngb.fit(X, Y)\ny_pred = gb.predict(x_test)\nacc_gradient = round(accuracy_score(y_pred, y_test), 4)*100\nprint(str(acc_gradient)+str('%'))\nprint(confusion_matrix(y_pred, y_test))","7c438075":"gbm_params = {\"learning_rate\" : [0.001, 0.01, 0.1, 0.05],\n             \"n_estimators\": [100,500,1000],\n             \"max_depth\": [3,5,10],\n             \"min_samples_split\": [2,5,10]}","a3cdff3d":"gbm = GradientBoostingClassifier()\n\ngbm_cv = GridSearchCV(gbm, gbm_params, cv = 10, n_jobs = -1, verbose = 2)","9591da47":"gbm_cv.fit(x_train, y_train)","b34d2671":"print(\"Best Parameters: \" + str(gbm_cv.best_params_))","6a22276e":"gbm = GradientBoostingClassifier(learning_rate = 0.001, \n                                 max_depth = 3,\n                                min_samples_split = 2,\n                                n_estimators = 1000)","de3a8975":"gbm_tuned =  gbm.fit(x_train,y_train)","b5a438b1":"y_pred = gbm_tuned.predict(x_test)\ngbm_acc = round(accuracy_score(y_pred, y_test), 4)*100\nprint(str(gbm_acc)+str('%'))\nprint(confusion_matrix(y_pred, y_test))","2a9524f9":"from sklearn.model_selection import GridSearchCV, StratifiedKFold, StratifiedShuffleSplit\nfrom sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier()\nrfc.fit(x_train,y_train)\nypred=rfc.predict(x_test)\nacc_rfc = round(accuracy_score(y_pred, y_test) , 4)*100\nprint(str(acc_rfc)+str('%'))\nprint(confusion_matrix(y_test,y_pred))","a0f13696":"rf_params = {\"max_depth\": [2,5,8,10],\n            \"max_features\": [2,5,8],\n            \"n_estimators\": [10,500,1000],\n            \"min_samples_split\": [2,5,10]}","9aa208e2":"rf_model = RandomForestClassifier()\n\nrf_cv_model = GridSearchCV(rf_model, \n                           rf_params, \n                           cv = 10, \n                           n_jobs = -1, \n                           verbose = 2) ","dc32df55":"rf_cv_model.fit(x_train, y_train)","4ca6a074":"print(\"Best Parameters: \" + str(rf_cv_model.best_params_))","594f78c1":"rf_tuned = RandomForestClassifier(max_depth = 5, \n                                  max_features = 2, \n                                  min_samples_split = 10,\n                                  n_estimators = 1000)\n\nrf_tuned.fit(x_train, y_train)","b7b919ef":"y_pred = rf_tuned.predict(x_test)\nacc_rfc_tuned = round(accuracy_score(y_pred, y_test) , 4)*100\nprint(str(acc_rfc_tuned)+str('%'))\nprint(confusion_matrix(y_test,y_pred))","c24508fe":"from lightgbm import LGBMClassifier\nlgbm = LGBMClassifier().fit(x_train, y_train)\ny_pred = lgbm.predict(x_test)\nacc_lgbm=round(accuracy_score(y_pred, y_test) , 4)*100\nprint(str(acc_lgbm)+str('%'))\nprint(confusion_matrix(y_test,y_pred))","c106a1fb":"lgbm = LGBMClassifier()\nlgbm_params = {\n        'n_estimators': [100, 500, 1000, 2000],\n        'subsample': [0.6, 0.8, 1.0],\n        'max_depth': [3, 4, 5,6],\n        'learning_rate': [0.1,0.01,0.02,0.05],\n        \"min_child_samples\": [5,10,20]}\n","796ebfb9":"lgbm_cv_model = GridSearchCV(lgbm, lgbm_params, \n                             cv = 10, \n                             n_jobs = -1, \n                             verbose = 2)\nlgbm_cv_model.fit(x_train, y_train)","36d85e3a":"print(\"Best Parameters: \" + str(lgbm_cv_model.best_params_))","4ed1e81b":"lgbm = LGBMClassifier(learning_rate = 0.02, \n                       max_depth = 3,\n                       subsample = 0.6,\n                       n_estimators = 100,\n                       min_child_samples = 10)","407a1f6f":"lgbm_tuned = lgbm.fit(x_train,y_train)","ae4a6da7":"y_pred = lgbm_tuned.predict(x_test)\nacc_lgbm_tuned=round(accuracy_score(y_pred, y_test) , 4)*100\nprint(str(acc_lgbm_tuned)+str('%'))\nprint(confusion_matrix(y_test,y_pred))","f31d1cb8":"from xgboost import XGBClassifier","a2bfd734":"xgb_model = XGBClassifier().fit(x_train, y_train)","9e924347":"y_pred = xgb_model.predict(x_test)\nacc_xgb=round(accuracy_score(y_test, y_pred),4)*100\nprint(str(acc_xgb)+str('%'))\nprint(confusion_matrix(y_test,y_pred))","47fa45fd":"xgb_params = {\n        'n_estimators': [100, 500, 1000, 2000],\n        'subsample': [0.6, 0.8, 1.0],\n        'max_depth': [3, 4, 5,6],\n        'learning_rate': [0.1,0.01,0.02,0.05],\n        \"min_samples_split\": [2,5,10]}","6fb59ef4":"xgb = XGBClassifier()\nxgb_cv_model = GridSearchCV(xgb, xgb_params, cv = 10, n_jobs = -1, verbose = 2)","88881483":"xgb_cv_model.fit(x_train, y_train)","dae95d87":"print(\"Best Parameters: \" + str(xgb_cv_model.best_params_))","d6d461ec":"xgb = XGBClassifier(learning_rate = 0.02, \n                    max_depth = 3,\n                    min_samples_split = 2,\n                    n_estimators = 100,\n                    subsample = 0.6)","e74f566e":"xgb_tuned =  xgb.fit(x_train,y_train)","ac855e1f":"y_pred = xgb_tuned.predict(x_test)\nacc_xgb=round(accuracy_score(y_test, y_pred),4)*100\nprint(str(acc_xgb)+str('%'))\nprint(confusion_matrix(y_test,y_pred))","4af5dfa1":"#set ids as PassengerId and predict survival \nids = test_df['PassengerId']\nypred = lgbm_tuned.predict(test_df.drop('PassengerId', axis=1))\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': ypred })\noutput.to_csv('submission.csv', index=False)","f7f6e7d5":"output.head(7)","c8b074d0":"### Read csv Files","09b86aed":"# Develop  Machine Learning Model to predict Titanic Survival","328ebaba":"### **Support Vector Machines**","f079d6e4":"Number of frequncy is too much. this upper limit cannot be accepted  ","e8367040":"Dummy Fields - Emabarked Title Pclass","2036ed49":"### **Gradient Boost Classifier**","09654102":"#### Model Tunning","ac710722":"### **LightGBM Classifier**","c0fbb009":"### **Transformation of Variables**","8d5945b1":"# Titanic Surival Prediction","d7066935":"### **Drop Fields**","9b38eab3":"### Submission","83a3b775":"## Categorical Variable and Visualisaton","ea4cbbee":"### **Random Forest Classifier**","3648e014":"# Treatment of Missing Values","89e90a64":"### **Logistic Regression**","4cd7f308":"Fill Missing Value will be filled median of each Title Category","2d5cf858":"### **XGBOOST**","8b256e0a":"## **Modelling**","ad955dbe":"### **CART**","caf87792":"**Categorical:**\n***\n\n**Nominal**\n- **Cabin**\n- **Embarked** (Port of Embarkation)\n            -C(Cherbourg)\n            -Q(Queenstown) \n            -S(Southampton)\n        \n-(Nominal variable with only two categories)\n- **Sex**\n    - Female\n    - Male\n    \n**Ordinal**\n- **Pclass** (socio-economic status of passenger) \n            - 1(Upper)\n            - 2(Middle) \n            - 3(Lower)\n\n**Numeric:**\n***\n**Discrete**\n- **Passenger ID**(Unique identifing # for each passenger)\n- **SibSp**\n- **Parch**\n- **Survived** (Outcome)\n    - 0 : Not survived\n    - 1 : survived\n    \n**Continous**\n- **Age**\n- **Fare**\n\n**String**\n***\n- **Ticket** (Ticket number for passenger.)\n- **Name**(  Name of the passenger.) ","fe51cc3d":"### Outliers","515ca5c0":"#### Model Tunning","d0107c9d":"#### Model Tunning","a842ccfb":"Cabin is dropped because it has 78.23 missing value ","9489ae16":"275 is acceptable for upper limit","983c1980":"#### Model Tunning","70a5a26b":"### **Converting to Dummy Variables**\n","1b924ed8":"#### Model Tunning","6796749e":"# Explore Dataset","493627ae":"### About Dataset","7ba3697b":"fare seems to have outlier. max value is 512.3292 and 99 percentile is 249.00622","712d88dd":"#### Model Tunning"}}