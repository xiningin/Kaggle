{"cell_type":{"15c9da5f":"code","fdf048ab":"code","423d4308":"code","47af65d5":"code","8a0e5dfc":"code","661dceea":"code","a6a5b7e9":"code","04928e66":"code","a1b5dff0":"code","da4c12aa":"code","406f0f7a":"code","0f790a68":"code","905a1796":"code","cceb0aef":"code","7cf47e38":"code","97b9c855":"code","7164e092":"code","f855f696":"code","ed7b5bdc":"code","b969350b":"code","428d033c":"code","d680f06d":"code","e73defd4":"code","6ac61c10":"code","300147b1":"code","bb52c85b":"markdown","98fc71a5":"markdown","78724a65":"markdown","48b4073d":"markdown","657bc0a2":"markdown","04e990a7":"markdown","48ff8843":"markdown","a40be7f2":"markdown","510f4e69":"markdown","cc7b211d":"markdown","15c8e060":"markdown","4b6adccd":"markdown","f230cb8c":"markdown","ec397f1c":"markdown","19e8d222":"markdown","27044367":"markdown","465260be":"markdown","93cc9f6f":"markdown","ee51de46":"markdown","3032dc34":"markdown","39b3cb15":"markdown","828f443a":"markdown"},"source":{"15c9da5f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fdf048ab":"import numpy as np\nimport pandas as pd\n\nfrom datetime import datetime\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\n\n!pip install jovian --upgrade --quiet\nimport jovian","423d4308":"project='hotel_booking_demand_course_project'\n# jovian.commit(project=project)","47af65d5":"df = pd.read_csv(\"\/kaggle\/input\/hotel-booking-demand\/hotel_bookings.csv\")","8a0e5dfc":"df","661dceea":"df.sample(10)","a6a5b7e9":"df.shape","04928e66":"df.describe()","a1b5dff0":"df.info()","da4c12aa":"# Checking for null values\ndf.isnull().sum()","406f0f7a":"df.drop('agent', axis=1, inplace=True)\ndf.drop('company', axis=1, inplace=True)","0f790a68":"print(df.hotel.value_counts())","905a1796":"# Only non cancelled bookings included \nguests_per_country = df[df.is_canceled == 0].groupby('country').hotel.count().sort_values(ascending = False)\nguests_per_country = guests_per_country.reset_index()\nguests_per_country.rename(columns = {'hotel' : 'bookings'}, inplace = True)\n\n\n# The top 10 countries with highest number of bookings\nguests_per_country_top_10 = guests_per_country[:10].copy()\n\n# Others countries bookings combined\nnew_row = pd.DataFrame(data = { 'country' : ['Others'],\n                                'bookings' : [guests_per_country['bookings'][10:].sum()]\n                                })\n\nguests_per_country = pd.concat([guests_per_country_top_10, new_row])\n\n\n#Pie chart Plot\nfig = plt.figure(figsize =(15, 15)) \nplt.title(\"Percentage of guests from countries\")\nplt.legend(guests_per_country.index, loc=\"best\")\nplt.pie(guests_per_country.bookings , autopct='%1.1f%%', labels=guests_per_country.country , explode =(0.1,0,0,0,0,0,0,0,0,0,0));","cceb0aef":"print('{0:.2f}% of all bookings are cancelled.'.format(df.is_canceled.value_counts()[1]*100\/df.is_canceled.count()))","7cf47e38":"df['arrival_date'] = df.apply(lambda x:datetime.strptime(\"{0} {1} {2}\".format(x['arrival_date_year'],x['arrival_date_month'], x['arrival_date_day_of_month']), \"%Y %B %d\"),axis=1)\ndf[[\"arrival_date\", \"arrival_date_day_of_month\",\"arrival_date_month\",\"arrival_date_year\"]].sample(5) ","97b9c855":"# Get total monthly bookings\nbookings_per_month = df.groupby(df['arrival_date'].dt.strftime('%B-%Y')).count().hotel  # convert arrival date to month-year format to count total no of bookings in a month\nbookings_per_month = bookings_per_month.reset_index()\n\nbookings_per_month['month_year'] = pd.to_datetime(bookings_per_month.arrival_date, format='%B-%Y')  # Convert month-year to datetime and create new column to sort values\nbookings_per_month = bookings_per_month.sort_values('month_year')  \n\nprint(bookings_per_month.head())\n\n\n# Plot monthly bookings \n\nplt.figure(figsize=(20, 8))\nplt.title(\"Total Monthly bookings done\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Number of bookings\")\nplt.plot(bookings_per_month.arrival_date , bookings_per_month.hotel);\nplt.xticks(rotation=45);","7164e092":"\nbookings_per_month = df.groupby(['hotel',  df['arrival_date'].dt.strftime('%B-%Y')]).count().lead_time\nbookings_per_month = bookings_per_month.reset_index()\nbookings_per_month.rename(columns = {'lead_time':'bookings'} , inplace = True)\nbookings_per_month\nbookings_per_month['month_year'] = pd.to_datetime(bookings_per_month.arrival_date, format='%B-%Y')  # Convert to datetime to sort values\nbookings_per_month = bookings_per_month.sort_values('month_year')  \n# print(bookings_per_month.head())\n\n# bookings_per_month = bookings_per_month.unstack()\nbookings_per_month_rh = bookings_per_month[bookings_per_month.hotel == 'Resort Hotel']\nbookings_per_month_ch = bookings_per_month[bookings_per_month.hotel == 'City Hotel']\n\n\nplt.figure(figsize=(20, 8))\nplt.title(\"Total Monthly bookings of both the hotels compared\")\nplt.xlabel(\"Months\")\nplt.ylabel(\"Total no of bookings\")\nplt.plot(bookings_per_month_rh.arrival_date , bookings_per_month_rh.bookings);\nplt.plot(bookings_per_month_ch.arrival_date , bookings_per_month_ch.bookings);\nplt.legend([\"Resort Hotel\",\"City Hotel\"])\nplt.xticks(rotation=45);\n                            \n","f855f696":"# Bookings done including cancelled bookings made by different types of customers.\n\n# df.customer_type.unique()\ncustomer_bookings = df.groupby(['customer_type','is_canceled']).count().hotel.reset_index()\ncustomer_bookings.rename(columns = {'hotel':'bookings'} , inplace = True)\nprint(customer_bookings)\n\n# Plotting The graph\nplt.figure(figsize = (10,6))\n\nax = sns.barplot('customer_type', 'bookings', hue='is_canceled', data=customer_bookings );\n\nplt.title(\"Number of booking made \/ cancelled by different types of customers\")\nplt.xlabel(\"Customer Type\")\nplt.ylabel(\"Number of bookings \")\n\nleg_handles = ax.get_legend_handles_labels()[0]\nax.legend(leg_handles, ['Not Cancelled', 'Booking Cancelled'], title='Cancelled');","ed7b5bdc":"# Bookings done including cancelled bookings made by different types of customers.\n\n# df.customer_type.unique()\ncustomer_bookings = df.groupby(['customer_type','hotel']).count().lead_time.reset_index()\ncustomer_bookings.rename(columns = {'lead_time':'bookings'} , inplace = True)\nprint(customer_bookings)\n\n# Plotting The graph\nplt.figure(figsize = (10,6))\n\nsns.barplot('customer_type', 'bookings', hue='hotel', data=customer_bookings );\n\nplt.title(\"Hotel preference by customer type\")\nplt.xlabel(\"Customer Type\")\nplt.ylabel(\"Number of bookings\");\n","b969350b":"# df.lead_time\n# Plot histogram for 90 days or 3 months of lead time\n\nsns.set_style(\"whitegrid\")\nplt.figure(figsize = (20,6))\nplt.hist(df.lead_time, bins=np.arange(0, 90, 1));\n\n\nplt.xlabel(\"Number of days between Booking date and Arrival Date\")\nplt.ylabel(\"Number of Bookings\");","428d033c":"meal_preference = df.meal.value_counts()\nmeal_preference.index.name = \"meal_type\"\nmeal_preference = meal_preference.reset_index()\nmeal_preference\n\nplt.figure(figsize = (15,10))\nplt.pie(meal_preference.meal, autopct='%1.1f%%', labels=meal_preference.meal_type);\n\nplt.title(\"Meal Preference Pie chart\");\n","d680f06d":"deposit_type_by_hotel  = df.groupby([\"hotel\",\"deposit_type\"]).lead_time.count()\ndeposit_type_by_hotel = deposit_type_by_hotel.reset_index()\ndeposit_type_by_hotel.rename(columns = {\"lead_time\":\"bookings\"}, inplace = True)\ndeposit_type_by_hotel\n\nplt.figure(figsize = (10,6))\n\nsns.barplot('deposit_type', 'bookings', hue='hotel', data=deposit_type_by_hotel );\nplt.title(\"Bookings by Deposit type\")\nplt.xlabel(\"Deposit type\")\nplt.ylabel(\"Number of bookings\");","e73defd4":"print('{0:.2f}% of all bookings are cancelled at City Hotel.'.format(df[df.hotel == \"City Hotel\"].is_canceled.sum() * 100 \/ df[df.hotel == \"City Hotel\"].is_canceled.count()))\nprint('{0:.2f}% of all bookings are cancelled at Resort Hotel.'.format(df[df.hotel == \"Resort Hotel\"].is_canceled.sum() * 100 \/ df[df.hotel == \"Resort Hotel\"].is_canceled.count()))","6ac61c10":"# Checking for corelation between columns using heat map\n\n# sns.set_style(\"whitegrid\")\n# plt.figure(figsize = (20,20))\n# sns.heatmap(df.corr(), annot=True, cmap='Blues'); ","300147b1":"project='hotel_booking_demand_course_project'\n\n# jovian.commit(project=project)","bb52c85b":"## Q. How many days in advance are most of the bookings made. ","98fc71a5":"## ==> For our time analysis we will convert 'arrival_date_year', 'arrival_date_month', 'arrival_date_day_of_month' into a single date column \"arrival_date\"","78724a65":"### 2 columns - Agent and Company have a lot of null values. As we wont be using these column for our analysis we will drop them.","48b4073d":"### Transient and transient party guests prefer City Hotel while hotel preference for Group and Contract bookings is similar for both the hotels.","657bc0a2":"## Q. Total number of bookings by each hotel.","04e990a7":"## Q. Hotel preference by Customer type.","48ff8843":"## Q. Deposit type prefered by Hotel for booking.","a40be7f2":"### Most of the guests prefer Bed and Breakfast. Around 12% prefer Half-Board meal while only a small percent of people prefer Full-board meal.","510f4e69":"### We can see from the above bar chart that November, December and January are off seasons and less booking are done during these months as compared to other months.","cc7b211d":"### The bar chart above indicates that City Hotel offered most of its bookings without any initial deposit which maybe the reason for high booking cancellation percentage in comparision to Resort Hotel.","15c8e060":"## Q. Number of bookings made in both the hotels.","4b6adccd":"## Q. Bookings \/ Cancelled Bookings by different types of customers.","f230cb8c":"### We can see a total of 119390 bookings were made during the period this data was collected.","ec397f1c":"## Q. Meal preference by customers","19e8d222":"### Most of the bookings are made by Transient Guests while Group bookings were least in number.","27044367":"## Q. Total number of bookings made per month.","465260be":"### We have data only for 2 hotels namely Resort Hotel and City Hotel. Also, City Hotel has almost twice the number of bookings made in comparision to Resort Hotel","93cc9f6f":"### We can see that more than one-third of all booking made are cancelled.","ee51de46":"### It is observed that highest number of booking are made by guests from Portugal. Also, Majority of bookings came through customers from Europe.","3032dc34":"### We can see that most of the bookings are made only a day before their arrival date. Also majority of the bookings are made within a week before the arrival date. ","39b3cb15":"## Q. What percentage of total booking are cancelled.\n","828f443a":"## Q. Which countries have highest percentage of customers."}}