{"cell_type":{"93b5e7f3":"code","541b39a1":"code","85e2a054":"code","9544f9cc":"code","6ea5b22c":"code","fa9060be":"code","245dd05c":"code","55ab6541":"code","b23b5b3c":"code","0a2a432c":"code","1a6afff5":"code","49aeae7c":"code","1b838325":"code","3d4d4829":"code","4f5935d3":"code","4310006f":"code","8376463a":"code","05cc63dd":"code","a7f1a6e0":"code","f10feb2b":"code","598ea125":"code","457b7e7f":"code","d7835fe4":"code","ea6e203c":"code","ab194261":"code","68c8fe90":"code","85389612":"code","67ab123f":"code","fd69cdbb":"code","8d5a2c31":"code","63cfbbce":"code","7209d5c9":"code","004119fe":"code","7c0a7586":"code","1cacf931":"code","644425c9":"code","b167a245":"code","d276e14f":"code","d43ecfcd":"code","bb518b18":"code","0205ad4c":"code","c546fd06":"code","b7e827fc":"code","dcb97f7d":"code","cb912f9b":"code","0164b8a2":"code","9d5e43bc":"code","c52b8df8":"code","d5c7b1ca":"code","b5117f58":"code","9eb288d1":"code","f0f88a06":"code","3971f215":"code","fca53185":"code","5c7885d3":"code","ccc0f057":"code","486047bf":"code","5fc70be0":"code","38ae1585":"code","63a31b40":"code","23ca9e4d":"markdown","9adfde0e":"markdown","0e0f2512":"markdown","5b1ccb0e":"markdown","a524714f":"markdown","a9321434":"markdown","00f06610":"markdown","9b01bf35":"markdown","0c8d9ef4":"markdown","174824db":"markdown","37bb8535":"markdown","a249033a":"markdown","074dfee9":"markdown","2b3793f8":"markdown","0d815064":"markdown","05dd3695":"markdown"},"source":{"93b5e7f3":"import pandas as pd\nurl = 'https:\/\/datasciencemeetup.s3.amazonaws.com\/data\/WA_Fn-UseC_-Telco-Customer-Churn+2.csv'\ndf = pd.read_csv(url)\ndf","541b39a1":"pip install lifelines","85e2a054":"import matplotlib.pyplot as plt  # visualization\nimport numpy as np  # linear algebra\nimport pandas as pd  # data processing, CSV file I\/O (e.g. pd.read_csv)","9544f9cc":"import lifelines","6ea5b22c":"df_churn = df","fa9060be":"df_churn = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndf_churn","245dd05c":"df_churn['customerID'].duplicated().any()","55ab6541":"df_churn.set_index('customerID', inplace=True)\ndf_churn","b23b5b3c":"df_churn.info()","0a2a432c":"def clean_data(df):\n    df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')\n    df['TotalCharges'] = df['TotalCharges'].fillna(0)\n    X = pd.get_dummies(df.drop(['Churn', 'tenure'], axis=1), drop_first=True)\n    y = df.loc[:, ['tenure', 'Churn']]\n    y.columns = ['time', 'status']\n    y['status'] = y.loc[:, 'status'] == 'Yes'\n    df_clean = pd.concat([y, X], axis=1)\n    return df_clean\ndf_churn_clean = clean_data(df_churn)\ndf_churn_clean","1a6afff5":"num_customers = df_churn_clean.shape[0]\nnum_train = int(num_customers * 0.7)\ntrain_customers = np.random.choice(df_churn_clean.index, size=num_train, replace=False)\ndf_train = df_churn_clean.loc[train_customers]\n\nnum_dev = int((num_customers - num_train) * 0.5)\ndev_customers = np.random.choice(df_churn_clean.drop(train_customers).index, size=num_dev, replace=False)\ndf_dev = df_churn_clean.loc[dev_customers]\n\ntest_customers = df_churn.drop(train_customers).drop(dev_customers).index\ndf_test = df_churn_clean.loc[test_customers]","49aeae7c":"print('Train', df_train.shape)\nprint('Dev', df_dev.shape)\nprint('Test', df_test.shape)\nprint('Total:', df_dev.shape[0] + df_test.shape[0] + df_train.shape[0])\nassert df_dev.shape[0] + df_test.shape[0] + df_train.shape[0] == df_churn.shape[0]","1b838325":"df_train.info()","3d4d4829":"from lifelines.plotting import plot_lifetimes\ntime = df_train['time'].sample(25, replace=False)\nstatus = df_train['status'].sample(25, replace=False)\nplt.figure(figsize=(16, 6));\nplot_lifetimes(time, status)\nplt.xlabel('Days subscribed');\nplt.ylabel('Customer ID');\nplt.title('Customer subscription lifelines');","4f5935d3":"T = df_train['time']\nE = df_train['status']\nkmf = lifelines.KaplanMeierFitter().fit(T, E, alpha=0.01)\nkmf.plot_survival_function()\nplt.ylim(0, 1);","4310006f":"df_churn.head()","8376463a":"ax = plt.subplot(111)\ngroup = 'OnlineSecurity'\nfor name, df in df_churn.groupby(group):\n    idx = df_churn[group] == name\n    kmf = lifelines.KaplanMeierFitter().fit(T[idx], E[idx], alpha=0.05, label=name)\n    kmf.plot_survival_function(ax=ax)\nplt.title(group);","05cc63dd":"ax = plt.subplot(111)\ngroup = 'InternetService'\nfor name, df in df_churn.groupby(group):\n    idx = df_churn[group] == name\n    kmf = lifelines.KaplanMeierFitter().fit(T[idx], E[idx], alpha=0.05, label=name)\n    kmf.plot_survival_function(ax=ax)\nplt.title(group);","a7f1a6e0":"from lifelines import NelsonAalenFitter\nnaf = NelsonAalenFitter(alpha=0.05, nelson_aalen_smoothing = False).fit(T, E)\nnaf.cumulative_hazard_.head()","f10feb2b":"?NelsonAalenFitter","598ea125":"naf.plot()","457b7e7f":"ax = plt.subplot(111)\ngroup = 'InternetService'\nfor name, df in df_churn.groupby(group):\n    idx = df_churn[group] == name\n    naf = NelsonAalenFitter().fit(T[idx], E[idx], label=name)\n    naf.plot(ax=ax)\nplt.title(group);","d7835fe4":"ax = plt.subplot(111)\ngroup = 'InternetService'\nfor name, df in df_churn.groupby(group):\n    idx = df_churn[group] == name\n    naf = NelsonAalenFitter().fit(T[idx], E[idx], label=name)\n    naf.plot_hazard(ax=ax, bandwidth=5)\nplt.title(group);","ea6e203c":"df_train.info()","ab194261":"from lifelines import CoxPHFitter\n?CoxPHFitter.fit","68c8fe90":"cph = CoxPHFitter()\ncph.fit(df_train, duration_col='time', event_col='status')\ncph.print_summary()","85389612":"# detecting multicollinearity: https:\/\/www.analyticsvidhya.com\/blog\/2020\/03\/what-is-multicollinearity\/\n# VIF starts at 1 and has no upper limit\n# VIF = 1, no correlation between the independent variable and the other variables\n# VIF exceeding 5 or 10 indicates high multicollinearity between this independent variable and the others\n\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\ndef calc_vif(X):\n\n    # Calculating VIF\n    vif = pd.DataFrame()\n    vif[\"variables\"] = X.columns\n    vif[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n\n    return(vif)\n\nfeature_vif = calc_vif(df_train.drop(['status', 'time'], axis=1))\nfeature_vif.sort_values('VIF')","67ab123f":"features_keep = feature_vif.loc[feature_vif['VIF'] < 10, 'variables'].tolist()\nfeatures_keep.extend(['time', 'status'])\nfeatures_keep","fd69cdbb":"cph = CoxPHFitter()\ncph.fit(df_train.loc[:, features_keep], duration_col='time', event_col='status')\ncph.print_summary()","8d5a2c31":"cph.plot();","63cfbbce":"surv_pred_train = cph.predict_survival_function(df_train)\nsurv_median_pred_train = cph.predict_median(df_train)","7209d5c9":"surv_pred_train","004119fe":"kmf.survival_function_","7c0a7586":"import plotly.graph_objs as go\n\nfig = go.Figure()\n\nbuttons = []\n\nfig.add_trace(\n    go.Scatter(\n        x=kmf.survival_function_.index, \n        y=kmf.survival_function_['KM_estimate'],\n        marker_color=\"black\",\n        name='KM estimate'\n    )\n)\nbuttons.append(dict(method='restyle', label='KM Estimate', \n                    args=[{'y': [kmf.survival_function_['KM_estimate'].values]}]))\n\nfor customerID in surv_pred_train.columns[0:50]:\n    color = 'red' if df_train_clean.loc[customerID, 'status'] else 'blue'\n    customer_probabilities = surv_pred_train[customerID]\n    fig.add_trace(\n        go.Scatter(\n            x=surv_pred_train.index, \n            y=customer_probabilities,\n            marker_color=color,\n            name=customerID\n        )\n    )\n    buttons.append(dict(method='restyle',\n                        label=customerID,\n                        args=[{'y': [customer_probabilities.values]}])\n                  )\nupdatemenu = [{}]\nupdatemenu[0]['buttons'] = buttons\nupdatemenu[0]['direction'] = 'down'\nupdatemenu[0]['showactive'] = True\n\n# update layout and show figure\nfig.update_layout(updatemenus=updatemenu)\n\n\n\n#fig.show()","1cacf931":"surv_median_pred_train","644425c9":"surv_pred_train.columns[100]","b167a245":"patient_name = surv_pred_train.columns[90]\npred_median = surv_median_pred_train\nax = surv_pred_train[patient_name].plot()\nkmf.plot(ax=ax, label='KM Estimator')\nplt.vlines(df_train.loc[patient_name, 'time'], ymin=0, ymax=1)\nplt.vlines(surv_median_pred_train[patient_name], ymin=0, ymax=1, color='red')","d276e14f":"# predict on dev\nsurv_pred_dev = cph.predict_survival_function(df_dev)\nsurv_median_pred_dev = cph.predict_median(df_dev)","d43ecfcd":"patient_name = surv_pred_dev.columns[80]\npred_median = surv_median_pred_dev\nax = surv_pred_dev[patient_name].plot()\nkmf.plot(ax=ax, label='KM Estimator')\nplt.vlines(df_dev.loc[patient_name, 'time'], ymin=0, ymax=1)\nplt.vlines(surv_median_pred_dev[patient_name], ymin=0, ymax=1, color='red')","bb518b18":"ax = surv_pred_dev.iloc[:, 0:6].plot();\nkmf.plot(ax=ax, label='KM Estimator')","0205ad4c":"from lifelines.utils import concordance_index\nconcordance_index(df_dev['time'], -cph.predict_partial_hazard(df_dev), df_dev['status'])","c546fd06":"cph.check_assumptions(df_train.loc[:, features_keep], p_value_threshold=0.05, show_plots=True)","b7e827fc":"assumptions_results = lifelines.statistics.proportional_hazard_test(\n    cph, df_train.loc[:, features_keep], time_transform='rank'\n)\nassumptions_results.print_summary()","dcb97f7d":"assumptions_results.p_value","cb912f9b":"features_selected = list(np.array(assumptions_results.name)[0.05 > assumptions_results.p_value])\nfeatures_selected.extend(['time', 'status'])","0164b8a2":"features_selected","9d5e43bc":"cph2 = CoxPHFitter().fit(df_train.loc[:, features_selected],\n                         duration_col='time',\n                         event_col='status')","c52b8df8":"concordance_index(df_dev['time'], -cph2.predict_partial_hazard(df_dev), df_dev['status'])","d5c7b1ca":"cph2.print_summary()","b5117f58":"import umap","9eb288d1":"?umap.UMAP","f0f88a06":"mapper = umap.UMAP(metric='hamming', n_neighbors=50)\nmapper.fit(df_train[features_selected])","3971f215":"embedding = mapper.transform(df_train[features_selected])","fca53185":"df_embedding = pd.DataFrame(embedding, index=df_train.index)\ndf_embedding['status'] = df_train['status']","5c7885d3":"df_embedding","ccc0f057":"df_embedding.plot(kind='scatter', x=0, y=1)","486047bf":"import seaborn as sns","5fc70be0":"?sns.scatterplot","38ae1585":"plt.figure(figsize=(16, 6))\nsns.scatterplot(data=df_embedding, x=0, y=1, hue='status');\nplt.show()","63a31b40":"?pd.DataFrame.plot","23ca9e4d":"## Cox Proportional Hazards Regression\nThis is one of the most popular models used in research papers, clinical trials, and survival analysis.\n\n$$h(t, X) = h_0(t)exp(\\beta X)$$\n\nIt estimates the survival function using features in your data.","9adfde0e":"These are all our features. We will pay special attention to `tenure` and `Churn` because they are our _response_ variables","0e0f2512":"### The hazard rate\nVisualizing the hazard function in `Lifelines` requires setting a `bandwidth` parameter to control how we estimate. The lower the bandwidth, the less smooth the hazard function will be. Try a few different values.","5b1ccb0e":"__Key outputs:__\n- P values tell you how significant the feature is.\n- exp(coef) tell you how much an increase in your feature will contribute to the hazard.\n$$exp(-coef) = \\frac{hazard\\ of\\ group 1(t)}{hazard\\ of\\ group 2(t)}$$\n- Concordance.","a524714f":"## Checking your assumptions\nWhen models don't perform well, it can be because the data does not satisfy their assumptions. Cox PH assumes that the hazards for any two individuals have the same shape, so that if you divide one by the other, the hazard ratio is constant.","a9321434":"### What is Kaplain-Meier good for?; Customer segmentation.\nYou don't need much data to create it, but the catch is it can't be used to predict what an _individual_ will do, only what your _population_ may do. You can improve on the Kaplan-Meier using __customer segmentation__.","00f06610":"# Why survival analysis > classification\nGene Signature Improves Prediction of Multi-Drug Resistant Ovarian Cancer Survival:\n![sa](https:\/\/home.ccr.cancer.gov\/inthejournals\/dev\/images\/GeneSignatureMDROvarianCancer.jpg)\n\nReliability engineering:\n<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/7\/78\/Bathtub_curve.svg\/1280px-Bathtub_curve.svg.png\" alt=\"Drawing\" style=\"width: 400px;\"\/>","9b01bf35":"# Agenda\n\n1. Why use survival analysis?\n2. Prepare data.\n3. Create survival models.\n4. Evaluate.\n5. Improve.\n6. Test.\n","0c8d9ef4":"# Evaluating your model\n\n## Plotting coefficiencts","174824db":"# Survival analysis\n## The survival function\nThe survival function answers the question: \"what is the probability that an event will happen at some time $t$?\"\n$$S(t) = Pr(t < T)$$\n### Kaplan-Meier\nThe __Kaplan-Meier Estimator__ estimates the survival function using __time__ and __status__. It is the simplest survival model that tells you the probability of the event occurring at time $t$. The shaded region around the line is the _confidence interval_, which tells you how _certain_ you can be that the _true_ probability is within the shaded region.\n\n> A 95% CI is the interval that you are 95% certain contains the true population value as it might be estimated from a much larger study.","37bb8535":"## Concordance\nhttps:\/\/stats.stackexchange.com\/a\/478305\/11867","a249033a":"# How can you predict what individual customers will do?\nThe non-parametric models: Kaplan-Meier and Nelson-Aalen are great for analyzing groups of people. Buut to analyze what any individual person will do, you need more information. You need a parametric model.\n\n","074dfee9":"Let's see our lifetimes","2b3793f8":"# Estimate Hazard\nThe hazard function is one of the most difficult aspects of survival analysis to explain. Think of hazard as a _risk_ of the event occurring at any given time. Here is the definition:\n> The hazard function is defined as the event rate at time $t$ conditional on survival until time $t$.\n\nThe bottom line is you always want your hazard to be low. If it goes up, that's a red flag that something has changed between you and your customer. This is an opportunity to learn what's changed and if you can intervene.\n\n## The Nelson-Aalen estimator\n\n### Cumulative hazard\nSimilar to the Kaplan-Meier estimator, the Nelson-Aalen estimator is also non-parametric. It estimates the __cumulative hazard rate__ which estimates the cumulative number of expected events at time $t$.","0d815064":"# Split your data to avoid information leakage","05dd3695":"## Predicting on the development set"}}