{"cell_type":{"b59d81cf":"code","0e8e03fa":"code","28b68ee4":"code","8339ec70":"code","31a46232":"code","7b9b3249":"code","05e40d53":"code","d87d890c":"code","6778c21f":"code","26919ce2":"code","da5da720":"code","4cf4b8b5":"code","cd480355":"code","af6d483d":"code","525f3139":"code","3b6a923d":"code","585791ec":"code","b15a301b":"code","cd97cebc":"markdown","72455ddc":"markdown","055573be":"markdown"},"source":{"b59d81cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n","0e8e03fa":"data = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')","28b68ee4":"data.info()","8339ec70":"data.corr()","31a46232":"#correlation map\n\nf,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","7b9b3249":"data.head(7)","05e40d53":"data.columns","d87d890c":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.restecg.plot(kind = 'line', color = 'g',label = 'restecg',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.oldpeak.plot(color = 'r',label = 'oldpeak',linewidth=1, alpha = 0.2,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","6778c21f":"# Scatter Plot \n# x = attack, y = defense\ndata.plot(kind='scatter', x='trestbps', y='chol',alpha = 0.5,color = 'red')\nplt.xlabel('trestbps')              # label = name of label\nplt.ylabel('chol')\nplt.title('trestbps chol Scatter Plot')            # title = title of plot","26919ce2":"# clf() = cleans it up again you can start a fresh\ndata.trestbps.plot(kind = 'hist',bins = 50)\nplt.clf()\n# We cannot see plot due to clf()","da5da720":"#create dictionary and look its keys and values\ndictionary = {'turkey' : 'trabzon','georgia' : 'batumi'}\nprint(dictionary.keys())\nprint(dictionary.values())","4cf4b8b5":"# In order to run all code you need to take comment this line\n# del dictionary         # delete entire dictionary     \nprint(dictionary)       # it gives error because dictionary is deleted","cd480355":"data = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')","af6d483d":"series = data['exang']        # data['Defense'] = series\nprint(type(series))\ndata_frame = data[['exang']]  # data[['Defense']] = data frame\nprint(type(data_frame))\n","525f3139":"# Comparison operator\nprint(3 > 2)\nprint(3!=2)\n# Boolean operators\nprint(True and False)\nprint(True or False)","3b6a923d":"# 1 - Filtering Pandas data frame\nx = data['trestbps']>180     # There are only 2 patients who have higher defense value than 180\ndata[x]","585791ec":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\ndata[(data['trestbps']>165) & (data['chol']>150)]\n\n#filtering with pandas\n#data[np.logical_and(data['Defense']>200, data['Attack']>100 )]   ","b15a301b":"# Stay in loop if condition( i is not equal 5) is true\ni = 0\nwhile i != 5 :\n    print('i is: ',i)\n    i +=1 \nprint(i,' is equal to 5')","cd97cebc":"First look in data. What we have? Column names & Data Types","72455ddc":"Data Correlation. Gives you correlation of data between discrete values. \n\n* Approaching 1 means datas are related each other positively. (Positive Correlation)\n* Approaching 0 means datas are not related each other.\n* Approaching 1 means datas are related each other negatively. (Negative Correlation)","055573be":"**Hello World Kernel**\n\nThis my first kernel that I write in Istanbul.\n\nIn this Kernel I will try to explain how you can write first Kernel in Kaggle while I am trying to do same for myself too.\n\n**1. My Background**\n\nI have already known about programming, algorithm structures and started learning Python two years ago. Then I could not achieve being sustainable to study. I failed in Python. Later I uploaded Anaconda.  And here we are again. This is the milestone for my Data Science career.\n\n*Thanks to Datai Team on Udemy!*\n\nI learned some basics until now like:\n\n* Python Syntax (data types, functions, loops)\n* Skills of Numpy, Pandas, Matplotlib and Seaborn Libraries \n* Basics of Data Science (Data Implementing & Filtering)\n* Introduction to Kaggle \n\n\n**2. Dataset**\n\nI will use [Heart Disease UCI](https:\/\/www.kaggle.com\/ronitf\/heart-disease-uci) in this Kernel.\n\n\n"}}