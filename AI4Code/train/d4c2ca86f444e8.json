{"cell_type":{"09e130a7":"code","76a6108f":"code","990f33b4":"code","c27946f2":"code","ed449190":"code","9fbf8e6c":"code","55dba42c":"code","2b0914ae":"code","e7527390":"code","ee709049":"code","71ea57e0":"code","200ed5d3":"code","2e9154a7":"code","e8674977":"code","2c1635ba":"code","59fdc5b0":"code","88b8ca60":"code","5918ef56":"code","ad48a542":"code","f02e5c31":"code","042fc554":"code","a2c0d8a7":"code","94398e4c":"code","0dba4a9e":"code","c5c0fabd":"code","69d9a896":"code","e85f2f77":"code","f99960f5":"code","38a39720":"code","ed2f2224":"markdown","655e936f":"markdown","7d150d43":"markdown","f01d7380":"markdown","42e0888b":"markdown","1a981360":"markdown"},"source":{"09e130a7":"!pip install jovian --quiet --upgrade","76a6108f":"# imports\nimport jovian\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import DataLoader, TensorDataset, random_split","990f33b4":"df = pd.read_csv('\/kaggle\/input\/league-of-legends-diamond-ranked-games-10-min\/high_diamond_ranked_10min.csv')","c27946f2":"df.head() #overview of data format","ed449190":"df.shape","9fbf8e6c":"df.columns # shows all columns in dataset ; len(df.columns) = 40","55dba42c":"df.drop(['gameId','redFirstBlood','blueTotalGold','redTotalGold','blueTotalExperience','redTotalExperience','redGoldDiff','redExperienceDiff','redKills','redDeaths'], axis=1, inplace=True)","2b0914ae":"df.head()","e7527390":"targets = df[['blueWins']].values\nfeatures = df.drop('blueWins', axis=1).values","ee709049":"features.shape , targets.shape","71ea57e0":"test_size = int(.10 * 9879) # represents size of validation set\nval_size = test_size\ntrain_size = 9879 - test_size*2\ntrain_size , val_size, test_size","200ed5d3":"dataset = TensorDataset(torch.tensor(features).float(), torch.from_numpy(targets).float())\ntrain_ds, val_ds, test_ds = random_split(dataset, [train_size, val_size, test_size])","2e9154a7":"batch_size = 128","e8674977":"train_loader = DataLoader(train_ds, batch_size, shuffle=True)\nval_loader = DataLoader(val_ds, batch_size)\ntest_loader = DataLoader(test_ds, batch_size)","2c1635ba":"for xb, yb in train_loader:\n    print(xb.shape, yb.shape)\n    print(xb, yb)\n    break # check if train_loader works","59fdc5b0":"input_size = 29 # all the feature columns\noutput_size = 1 # probability of 0 to 1 in the chances of blue side winning\nthreshold = 0.5","88b8ca60":"# here the 'fun' begins!\nclass LOLModel(nn.Module):\n    def __init__(self):\n        # initiate the model\n        super().__init__()\n        self.linear = nn.Linear(input_size, output_size)\n        self.sigmoid = nn.Sigmoid()\n        \n    def forward(self, xb):\n        # forward function of the model \n        out = self.sigmoid(self.linear(xb))\n        return out\n    \n    def training_step(self, batch):\n        # used for training per batch in an eopch\n        inputs, labels = batch\n        out = self(inputs)\n        loss = F.binary_cross_entropy(out, labels)\n        return loss\n    \n    def validation_step(self, batch):\n        # used on function `evaluate` to iterate model through a batch\n        inputs, labels = batch\n        out = self(inputs)\n        loss = F.binary_cross_entropy(out, labels)\n        acc = accuracy(out, labels)\n        # `.detach()` makes sure gradient is not tracked\n        return {'val_loss': loss.detach(), 'val_acc' : acc.detach()}\n    \n    def validation_epoch_end(self, outputs):\n        # calculate mean loss and accuracy for batch called w\/ `evaluate`\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()\n        return {'val_loss': epoch_loss.item(), 'val_acc' : epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result, num_epochs):\n        # print function to see what's going on\n        if ((epoch+1) % 10 == 0) or (epoch == (num_epochs-1)):\n            # print for every 5 epochs\n            print(\"Epoch [{}], val_loss: {:.4f}, val_acc {:.4f}\".format(epoch+1, result['val_loss'], result['val_acc']))","5918ef56":"def accuracy(out, labels):\n    return torch.tensor(torch.sum(abs(out-labels) < threshold).item() \/ len(out))","ad48a542":"def evaluate(model, val_loader):\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.Adam):\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        for batch in train_loader:\n            loss = model.training_step(batch)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        model.epoch_end(epoch, result, epochs)\n        history.append(result)\n    return history\n# Setup for train loop","f02e5c31":"model = LOLModel()\n# model.double()","042fc554":"evaluate(model, val_loader)","a2c0d8a7":"history = fit(750, .0001, model, train_loader, val_loader)","94398e4c":"accuracies = [r['val_acc'] for r in history]\nplt.plot(accuracies, '-x')\nplt.xlabel('epoch')\nplt.ylabel('Accuracy')\nplt.title('Accuracy vs. No. of epochs')","0dba4a9e":"evaluate(model, test_loader)","c5c0fabd":"torch.save(model.state_dict(), 'lol_logistic.pth')","69d9a896":"jovian.log_dataset(path='\/kaggle\/input\/league-of-legends-diamond-ranked-games-10-min\/high_diamond_ranked_10min.csv', description='LOL diamond-level ingame data within the first 10 minutes')","e85f2f77":"jovian.log_metrics(val_acc = history[-1]['val_acc'], val_loss = history[-1]['val_loss'])","f99960f5":"jovian.log_hyperparams(lr = 0.0001, epochs = 750, batch_size = 128)","38a39720":"jovian.commit(project='lol-logistic',environment=None, outputs=['lol_logistic.pth'])","ed2f2224":"---","655e936f":"^^ Removing some irrelevant data (gamerid not necessary; total gold\/exp is redundant because of blue gold\/exp diff stats; red kills\/deaths & gold\/exp diff are opposites of respective stats for blue side) ","7d150d43":"---","f01d7380":"## Evaluation","42e0888b":"^^ We have approx. 10k data points for training, 40 features each","1a981360":"75% accurate, not too bad!\n### EDIT: Thanks Sebgolos for pointing my error w\/ my threshold typo!"}}