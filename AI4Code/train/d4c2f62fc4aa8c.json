{"cell_type":{"320c7492":"code","a0128b02":"code","2f9f8d2c":"code","ab10087e":"code","dce1bedf":"code","ac624b3c":"code","f282dbb6":"code","f9fc035e":"code","48136171":"code","0d2130d1":"code","9f6efec5":"code","69665596":"code","517eab90":"code","2df51fb5":"code","264e4bb9":"code","3392b68c":"code","30b64fc8":"code","bfc7c913":"code","f4e8f00b":"code","96c3e730":"code","6e497a1b":"code","aaee9296":"code","623b5b54":"code","af1b7c6f":"code","d8535299":"code","ed66a155":"code","7b24d7a9":"code","f12b1ccc":"code","c45c13d5":"code","c2719847":"code","0f5aebbd":"code","68af2640":"code","94609901":"code","daba91e0":"code","0aaa891b":"code","f588d6da":"code","33ebf2f2":"code","d8088ff3":"code","8ea5db54":"code","5dc96044":"code","756d656c":"code","161d7924":"code","14d60ee0":"code","698db78e":"code","9bf9e0e0":"code","d314d5e1":"code","90f59dbf":"code","2c25f71b":"code","debc5f66":"code","a8f057ae":"code","689c186d":"code","67f18d87":"code","8ee6c1a0":"code","ec26e610":"code","3c55650b":"code","513661a1":"code","94aba7f2":"code","b997984d":"code","6308ab91":"code","735364db":"code","1c8fbb55":"code","5b3e0549":"code","a75c17b8":"code","c42bb558":"code","4bf42731":"code","06c34f18":"code","67962476":"code","54cb985c":"code","bbc47df9":"code","1b4ff024":"code","8007ae79":"code","b1946add":"code","c1880909":"code","4bb252db":"code","7ea618f5":"code","acf52963":"code","e242426b":"code","00a16a52":"code","9ff5e53d":"code","b04f37c8":"code","7ca8d750":"code","e56c298f":"code","2b0492fb":"code","6eabdb07":"code","fc9c1542":"code","00869824":"code","78b35476":"code","a1f58565":"code","93cf7ea0":"code","c7dc87bf":"code","4db52406":"code","7c9cf031":"code","744ad6da":"code","79a7ec3e":"code","eb15dea5":"code","a7515267":"code","782bd35e":"code","8bd19044":"code","eb25ee60":"code","64e37563":"code","11d4b137":"code","115cb010":"code","c559dd9d":"code","3590cea5":"code","2d707440":"code","ebb9e977":"code","9b622e96":"code","aaebfd66":"code","1aad3712":"code","82fb4907":"code","f8381fbb":"code","5cb0af13":"code","752678b1":"code","8f1be3c5":"code","2dbcd18c":"code","a59775f2":"code","be5b58b5":"code","b09f4af4":"code","41392d34":"code","42ad2deb":"code","d8512cb9":"code","3f5b66e2":"code","f7dfe443":"code","8a8469f3":"code","908cab15":"code","be0e5549":"code","352c9bf4":"code","8e0e94b1":"code","97487e43":"code","e6c5a0e8":"code","e30094b9":"code","986b3537":"code","93f14165":"code","66e19b13":"code","b8a7a2a6":"code","e6094fd3":"code","8af8fee2":"code","1da7b608":"code","41ae547c":"code","d233eeba":"code","e79e09a9":"code","cf466e84":"code","4a1eeb2b":"code","ac63f46c":"code","a6e88efa":"code","fd74223f":"code","b18e94fd":"code","1bd70acd":"code","8cc8cf91":"code","f687d66e":"code","4d9b6d8f":"code","ac785d5d":"code","aeee3b07":"code","8a432b1f":"code","977c0d5f":"code","c5ce4865":"code","2ed33a7c":"code","d574b099":"code","230bfa58":"code","ae8cddcb":"code","7546fda2":"code","2b812335":"code","feb6038c":"code","f5fb5c08":"code","177db5d3":"code","f5a26bd9":"code","dfff4ec6":"code","1ee6b6a2":"markdown","ce4d5bbb":"markdown","0a775f82":"markdown","94368b17":"markdown","17be9407":"markdown","00e79c20":"markdown","66bb8da4":"markdown","69302e67":"markdown","ad955fd6":"markdown"},"source":{"320c7492":"\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn import preprocessing \nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom category_encoders import *\nfrom sklearn.preprocessing import LabelEncoder\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import datasets, linear_model, metrics\nfrom sklearn.metrics import  confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import accuracy_score, plot_confusion_matrix\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LogisticRegression","a0128b02":"    df=pd.read_csv('..\/input\/heart-failure\/heart_failure.csv')\n\n    df.head()","2f9f8d2c":"#getting the names of columns\ndf.columns","ab10087e":"#getting the shape of the dataset\ndf.shape","dce1bedf":"df.skew()","ac624b3c":"df.corr()","f282dbb6":"#Global declartions of function names\nglobal Head\nglobal Size\nglobal Column_names\nglobal Describe\nglobal Shape\nglobal Count\nglobal Value_count\nglobal ISNULL\nglobal Tail\nglobal Ndim\nglobal Nunique\nglobal Memory_usage\nglobal Duplicated\nglobal ISNA\nglobal DTYPES\nglobal CORR\nglobal Info\nglobal operations\n        \n\n        ","f9fc035e":" def Head(value=5):\n            print('\\033[1m'+'displaying the', value, 'rows'+'\\033[0m')\n            a=df.head(value)\n            return a\n            print(\"--------------------------------------------------------------------------\")\nHead()","48136171":" def Tail():\n    print('\\033[1m'+\"The last five rows of the dataframe are\"+'\\033[0m')\n    co3=df.tail()\n    return(co3)\n    print(\"--------------------------------------------------------------------------\")\nTail()","0d2130d1":"def Describe():\n    print('\\033[1m'+\"The Description of our dataset is:\"+'\\033[0m')\n    des=df.describe()\n    return(des)\n    print(\"--------------------------------------------------------------------------\")\nDescribe()","9f6efec5":"def Size():\n    print('\\033[1m'+\"The size of dataset is :\"+'\\033[0m')\n    siz=df.size\n    print(siz,'\\n')\n    print(\"--------------------------------------------------------------------------\")\nSize()","69665596":"def Count():\n    print('\\033[1m'+\"The count of non null values are:\"+'\\033[0m')\n    co=df.count()\n    print(co,'\\n')\n    print(\"--------------------------------------------------------------------------\")\nCount()","517eab90":"def ISNULL():\n    print('\\033[1m'+\"Detection of missing values\"+'\\033[0m')\n    co2=df.isnull().sum()\n    print(co2,'\\n')\n    print(\"--------------------------------------------------------------------------\")\nISNULL()","2df51fb5":"def Ndim():\n    print('\\033[1m'+\"The dimensions of data set are:\"+'\\033[0m')\n    co4=df.ndim\n    print(co4,'\\n')\n    print(\"--------------------------------------------------------------------------\")\nNdim()","264e4bb9":"def Nunique():\n    print('\\033[1m'+\"Total number of unique values are:\"+'\\033[0m')\n    co5=df.nunique()\n    print(co5,'\\n')\n    print(\"--------------------------------------------------------------------------\")\nNunique()","3392b68c":"def Memory_usage():\n    print('\\033[1m'+\"The total memory used is :\"+'\\033[0m')\n    co6=df.memory_usage()\n    print(co6,'\\n')\n    print(\"--------------------------------------------------------------------------\")\nMemory_usage()","30b64fc8":"def Duplicated():\n    print('\\033[1m'+\"Total number of duplicate rows\"+'\\033[0m')\n    co7=df.duplicated().count()\n    return(co7)\n    print(\"--------------------------------------------------------------------------\")\nDuplicated()","bfc7c913":"def DTYPES():\n    print('\\033[1m'+\"The datatypes are :\"+'\\033[0m')\n    co9=df.dtypes\n    print(co9,'\\n')\n    print(\"--------------------------------------------------------------------------\")\nDTYPES()","f4e8f00b":"def Info():\n    print('\\033[1m'+\"The info of data set is :\"+'\\033[0m')\n    co11=df.info()\n    print(\"--------------------------------------------------------------------------\")\nInfo()","96c3e730":"def operations(df,x):\n    if df[x].dtype==\"float64\":\n        print('\\033[1m'+'', x, 'rows'+'\\033[0m')\n        print('\\033[1m'+\"It is a quantitaive data \\n\"+'\\033[0m')\n        print(\"The mean is :\\n\",df[x].mean())\n        print(\"The median is :\\n\",df[x].median())\n        print(\"The Standard Deviation is \\n\",df[x].std())\n        q1=df[x].quantile(0.25)\n        q2=df[x].quantile(0.5)\n        q3=df[x].quantile(0.75)\n        IQR=q3-q1\n        LLP=q1-1.5*IQR\n        ULP=q3+1.5*IQR\n        print(\"The quartiles are q1 : \\n\",q1)\n        print(\"The quartiles are q2 : \\n\",q2)\n        print(\"The quartiles are q3 :\\n \",q3)\n        print(\"The Uppler limit point of the data is \\n\",ULP)\n        print(\"The lower limit point of the data is \\n \",LLP)\n        if df[x].min()>LLP and df[x].max()<ULP:\n            print(\"The outliers are not present \\n\")\n            print(\"--------------------------------------------------------------------------\")\n\n        else:\n\n            print(\"The outliers are present \\n\")\n            print(\"The outliers are :\")\n            print(df[df[x].values>ULP][x])\n            print(df[df[x].values<LLP][x])\n\n            print(\"--------------------------------------------------------------------------\")\n\n\n    elif df[x].dtype==\"int64\":\n        print('\\033[1m'+'', x, 'rows'+'\\033[0m')\n        print('\\033[1m'+\"It is a quantitaive data \\n\"+'\\033[0m')\n        print(\"The mean is : \\n\",df[x].mean())\n        print(\"The median is : \\n\",df[x].median())\n        print(\"The Standard Deviation is \\n\",df[x].std())\n        q1=df[x].quantile(0.25)\n        q2=df[x].quantile(0.5)\n        q3=df[x].quantile(0.75)\n        IQR=q3-q1\n        LLP=q1-1.5*IQR\n        ULP=q3+1.5*IQR\n        print(\"The quartiles are q1 : \\n\",q1)\n        print(\"The quartiles are q2 : \\n\",q2)\n        print(\"The quartiles are q3 : \\n\",q3)\n        print(\"The Uppler limit point of the data is \\n\",ULP)\n        print(\"The lower limit point of the data is \\n\",LLP)\n        if df[x].min()>LLP and df[x].max()<ULP:\n            print(\"The outliers are not present \\n\")\n\n            print(\"--------------------------------------------------------------------------\")\n\n        else:\n\n            print(\"The outliers are present \\n\")\n            print(\"The outliers are :\")\n            print(df[df[x].values>ULP][x])\n            print(df[df[x].values<LLP][x])\n            print(\"--------------------------------------------------------------------------\")\n\n\n\n\n\n\n\n    else:\n\n        print('\\033[1m'+\"The data is Qualitative \\n\"+'\\033[0m')\n\n\n        if df[x].nunique()==1:\n            print('\\033[1m'+\"The data is singular \\n\"+'\\033[0m')\n            print(\"The mode is :\",df[x].mode())\n            print(\"The count of mode is \\n\",df[x].value_counts())\n        elif df[x].nunique()==2:\n            print('\\033[1m'+\"The data is Binary \\n\"+'\\033[0m')\n            print(\"The mode is :\",df[x].mode())\n            print(\"The count of mode is \\n\",df[x].value_counts())\n        elif df[x].nunique()>2:\n            print('\\033[1m'+\"The data is Multi \\n\"+'\\033[0m')\n            print(\"The mode is :\",df[x].mode())\n            print(\"The count of mode is \\n\",df[x].value_counts())\n\n        print(\"--------------------------------------------------------------------------\")\n\nc=df.columns\nfor i in c:\n    operations(df,i)\n    print(\"\\n\")\n\n\n","6e497a1b":"def Summary():\n        print('\\033[1m'+\"The Summary of data is  \\n\"+'\\033[0m')\n        print(\"The shape of the datset is :\",df.shape)\n        print(\"The sixe o the data set is :\",df.size)\n        print(\"The dimensions of the dataset are:\",df.ndim)\n        print(\"The memory usage of the data set are\",df.memory_usage())\n        print(\"The data types of the dataset are:\",df.dtypes)\n        print(\"--------------------------------------------------------------------------\")\n\nSummary()     ","aaee9296":" def Column_Summary():\n        print('\\033[1m'+\"The Column wise Summary of data is  \\n\"+'\\033[0m')\n        k=df.columns\n        for i in k:\n            print('\\033[1m'+'', i, 'rows'+'\\033[0m')\n            print(\"The Shape of the column \",i,\"is \",df[i].shape)\n            print(\"The Size of the column \",i,\"is \",df[i].size)\n            print(\"The Dimensions of the column \",i,\"is \",df[i].ndim)\n            print(\"The Memory used by the column \",i,\"is \",df[i].memory_usage())\n            print(\"The Data types  of the column \",i,\"is \",df[i].dtypes)\n            print(\"--------------------------------------------------------------------------\")\nColumn_Summary()","623b5b54":"df","af1b7c6f":"df['age'].min()","d8535299":"df['age'].max()","ed66a155":"df['age'].values","7b24d7a9":"list1=df[['age','anaemia']]","f12b1ccc":"list1[(list1['anaemia'] > 0) & (list1['age'] > 40) & (list1['age'] <= 50)]['age']","c45c13d5":"list1[(list1['anaemia'] > 0) & (list1['age'] > 50) & (list1['age'] <= 60)]['age']","c2719847":"list1[(list1['anaemia'] > 0) & (list1['age'] > 60) & (list1['age'] <= 70)]['age']","0f5aebbd":"len(list1[(list1['anaemia'] > 0) & (list1['age'] > 70) & (list1['age'] <= 80)]['age'])","68af2640":"len(list1[(list1['anaemia'] > 0) & (list1['age'] > 80) & (list1['age'] <= 90)]['age'])","94609901":"len(list1[(list1['anaemia'] > 0) & (list1['age'] > 90) & (list1['age'] <= 100)]['age'])","daba91e0":"list2=df[['age','creatinine_phosphokinase']]","0aaa891b":"(list2[ (list2['age']>40 ) & (list2['age']<=50)]['creatinine_phosphokinase']).mean()","f588d6da":"(list2[ (list2['age']>50 ) & (list2['age']<=60)]['creatinine_phosphokinase']).mean()","33ebf2f2":"(list2[ (list2['age']>60 ) & (list2['age']<=70)]['creatinine_phosphokinase']).mean()","d8088ff3":"(list2[ (list2['age']>70 ) & (list2['age']<=80)]['creatinine_phosphokinase']).mean()","8ea5db54":"(list2[ (list2['age']>80 ) & (list2['age']<=90)]['creatinine_phosphokinase']).mean()","5dc96044":"(list2[ (list2['age']>90 ) & (list2['age']<=100)]['creatinine_phosphokinase']).mean()","756d656c":"list3=df[['age','diabetes']]","161d7924":"len(list3[(list3['diabetes'] > 0) & (list3['age'] > 40) & (list3['age'] <= 50)]['age'])","14d60ee0":"len(list3[(list3['diabetes'] > 0) & (list3['age'] > 50) & (list3['age'] <= 60)]['age'])","698db78e":"len(list3[(list3['diabetes'] > 0) & (list3['age'] > 60) & (list3['age'] <= 70)]['age'])","9bf9e0e0":"len(list3[(list3['diabetes'] > 0) & (list3['age'] > 70) & (list3['age'] <= 80)]['age'])","d314d5e1":"len(list3[(list3['diabetes'] > 0) & (list3['age'] > 80) & (list3['age'] <= 90)]['age'])","90f59dbf":"len(list3[(list3['diabetes'] > 0) & (list3['age'] > 90) & (list3['age'] <= 100)]['age'])","2c25f71b":"list4=df[['age','ejection_fraction']]","debc5f66":"(list4[ (list4['age']>40 ) & (list4['age']<=50)]['ejection_fraction']).mean()","a8f057ae":"(list4[ (list4['age']>40 ) & (list4['age']<=50)]['ejection_fraction']).mean()","689c186d":"(list4[ (list4['age']>50 ) & (list4['age']<=60)]['ejection_fraction']).mean()","67f18d87":"(list4[ (list4['age']>60 ) & (list4['age']<=70)]['ejection_fraction']).mean()","8ee6c1a0":"(list4[ (list4['age']>70 ) & (list4['age']<=80)]['ejection_fraction']).mean()","ec26e610":"(list4[ (list4['age']>80 ) & (list4['age']<=90)]['ejection_fraction']).mean()","3c55650b":"(list4[ (list4['age']>90 ) & (list4['age']<=100)]['ejection_fraction']).mean()","513661a1":"list5=df[['age','high_blood_pressure']]","94aba7f2":"len(list5[(list5['high_blood_pressure'] > 0) & (list5['age'] > 40) & (list5['age'] <= 50)]['age'])","b997984d":"len(list5[(list5['high_blood_pressure'] > 0) & (list5['age'] > 50) & (list5['age'] <= 60)]['age'])","6308ab91":"len(list5[(list5['high_blood_pressure'] > 0) & (list5['age'] > 60) & (list5['age'] <= 70)]['age'])","735364db":"len(list5[(list5['high_blood_pressure'] > 0) & (list5['age'] > 70) & (list5['age'] <= 80)]['age'])","1c8fbb55":"len(list5[(list5['high_blood_pressure'] > 0) & (list5['age'] > 80) & (list5['age'] <= 90)]['age'])","5b3e0549":"len(list5[(list5['high_blood_pressure'] > 0) & (list5['age'] > 90) & (list5['age'] <= 100)]['age'])","a75c17b8":"list6=df[['age','platelets']]","c42bb558":"(list6[ (list6['age']>40 ) & (list6['age']<=50)]['platelets']).mean()","4bf42731":"(list6[ (list6['age']>50 ) & (list6['age']<=60)]['platelets']).mean()","06c34f18":"(list6[ (list6['age']>60 ) & (list6['age']<=70)]['platelets']).mean()","67962476":"(list6[ (list6['age']>70 ) & (list6['age']<=80)]['platelets']).mean()","54cb985c":"(list6[ (list6['age']>80 ) & (list6['age']<=90)]['platelets']).mean()","bbc47df9":"(list6[ (list6['age']>90 ) & (list6['age']<=100)]['platelets']).mean()","1b4ff024":"list7=df[['age','serum_creatinine']]","8007ae79":"(list7[ (list7['age']>40 ) & (list7['age']<=50)]['serum_creatinine']).mean()","b1946add":"(list7[ (list7['age']>50 ) & (list7['age']<=60)]['serum_creatinine']).mean()","c1880909":"(list7[ (list7['age']>60 ) & (list7['age']<=70)]['serum_creatinine']).mean()","4bb252db":"(list7[ (list7['age']>70 ) & (list7['age']<=80)]['serum_creatinine']).mean()","7ea618f5":"(list7[ (list7['age']>80 ) & (list7['age']<=90)]['serum_creatinine']).mean()","acf52963":"(list7[ (list7['age']>90 ) & (list7['age']<=100)]['serum_creatinine']).mean()","e242426b":"list8=df[['age','serum_sodium']]","00a16a52":"(list8[ (list8['age']>40 ) & (list8['age']<=50)]['serum_sodium']).mean()","9ff5e53d":"(list8[ (list8['age']>50 ) & (list8['age']<=60)]['serum_sodium']).mean()","b04f37c8":"(list8[ (list8['age']>60 ) & (list8['age']<=70)]['serum_sodium']).mean()","7ca8d750":"(list8[ (list8['age']>70 ) & (list8['age']<=80)]['serum_sodium']).mean()","e56c298f":"(list8[ (list8['age']>80 ) & (list8['age']<=90)]['serum_sodium']).mean()","2b0492fb":"(list8[ (list8['age']>90 ) & (list8['age']<=100)]['serum_sodium']).mean()","6eabdb07":"list9=df[['age','sex']]","fc9c1542":"len(list9[(list9['sex'] > 0) & (list9['age'] > 40) & (list9['age'] <= 50)]['age'])","00869824":"len(list9[(list9['sex'] > 0) & (list9['age'] > 50) & (list9['age'] <= 60)]['age'])","78b35476":"len(list9[(list9['sex'] > 0) & (list9['age'] > 60) & (list9['age'] <= 70)]['age'])","a1f58565":"len(list9[(list9['sex'] > 0) & (list9['age'] > 70) & (list9['age'] <= 80)]['age'])","93cf7ea0":"len(list9[(list9['sex'] > 0) & (list9['age'] > 80) & (list9['age'] <= 90)]['age'])","c7dc87bf":"len(list9[(list9['sex'] > 0) & (list9['age'] > 90) & (list9['age'] <= 100)]['age'])","4db52406":"list10=df[['age','sex']]","7c9cf031":"len(list10[(list10['sex'] == 0) & (list10['age'] > 40) & (list10['age'] <= 50)]['age'])","744ad6da":"len(list10[(list10['sex'] == 0) & (list10['age'] > 50) & (list10['age'] <= 60)]['age'])","79a7ec3e":"len(list10[(list10['sex'] == 0) & (list10['age'] > 60) & (list10['age'] <= 70)]['age'])","eb15dea5":"len(list10[(list10['sex'] == 0) & (list10['age'] > 70) & (list10['age'] <= 80)]['age'])","a7515267":"len(list10[(list10['sex'] == 0) & (list10['age'] > 80) & (list10['age'] <= 90)]['age'])","782bd35e":"len(list10[(list10['sex'] == 0) & (list10['age'] > 90) & (list10['age'] <= 100)]['age'])","8bd19044":"list11=df[['age','smoking','sex']]","eb25ee60":"len(list11[(list11['sex'] >0)& (list11['smoking'] >0) & (list11['age'] > 40) & (list11['age'] <= 50)]['age'])","64e37563":"len(list11[(list11['sex'] >0)& (list11['smoking'] >0) & (list11['age'] > 50) & (list11['age'] <= 60)]['age'])","11d4b137":"len(list11[(list11['sex'] >0)& (list11['smoking'] >0) & (list11['age'] > 60) & (list11['age'] <= 70)]['age'])","115cb010":"len(list11[(list11['sex'] >0)& (list11['smoking'] >0) & (list11['age'] > 70) & (list11['age'] <= 80)]['age'])","c559dd9d":"len(list11[(list11['sex'] >0)& (list11['smoking'] >0) & (list11['age'] > 80) & (list11['age'] <= 90)]['age'])","3590cea5":"len(list11[(list11['sex'] >0)& (list11['smoking'] >0) & (list11['age'] > 90) & (list11['age'] <= 100)]['age'])","2d707440":"list12=list11=df[['age','smoking','sex']]","ebb9e977":"len(list12[(list12['sex'] ==0)& (list12['smoking'] ==0) & (list12['age'] > 40) & (list12['age'] <= 50)]['age'])","9b622e96":"len(list12[(list12['sex'] ==0)& (list12['smoking'] ==0) & (list12['age'] > 50) & (list12['age'] <= 60)]['age'])","aaebfd66":"len(list12[(list12['sex'] ==0)& (list12['smoking'] ==0) & (list12['age'] > 60) & (list12['age'] <= 70)]['age'])","1aad3712":"len(list12[(list12['sex'] ==0)& (list12['smoking'] ==0) & (list12['age'] > 70) & (list12['age'] <= 80)]['age'])","82fb4907":"len(list12[(list12['sex'] ==0)& (list12['smoking'] ==0) & (list12['age'] > 80) & (list12['age'] <= 90)]['age'])","f8381fbb":"len(list12[(list12['sex'] ==0)& (list12['smoking'] ==0) & (list12['age'] > 90) & (list12['age'] <= 100)]['age'])","5cb0af13":"list13=df[['age','time']]","752678b1":"(list13[ (list13['age']>40 ) & (list13['age']<=50)]['time']).mean()","8f1be3c5":"(list13[ (list13['age']>50 ) & (list13['age']<=60)]['time']).mean()","2dbcd18c":"(list13[ (list13['age']>60 ) & (list13['age']<=70)]['time']).mean()","a59775f2":"(list13[ (list13['age']>70 ) & (list13['age']<=80)]['time']).mean()","be5b58b5":"(list13[ (list13['age']>80 ) & (list13['age']<=90)]['time']).mean()","b09f4af4":"(list13[ (list13['age']>90 ) & (list13['age']<=100)]['time']).mean()","41392d34":"list14=df[['age','sex','DEATH_EVENT']]","42ad2deb":"len(list14[(list14['sex'] > 0) & (list14['DEATH_EVENT'] > 0) & (list14['age'] > 40) & (list14['age'] <= 50)]['age'])","d8512cb9":"len(list14[(list14['sex'] > 0) & (list14['DEATH_EVENT'] > 0) & (list14['age'] > 50) & (list14['age'] <= 60)]['age'])","3f5b66e2":"len(list14[(list14['sex'] > 0) & (list14['DEATH_EVENT'] > 0) & (list14['age'] > 60) & (list14['age'] <= 70)]['age'])","f7dfe443":"len(list14[(list14['sex'] > 0) & (list14['DEATH_EVENT'] > 0) & (list14['age'] > 70) & (list14['age'] <= 80)]['age'])","8a8469f3":"len(list14[(list14['sex'] > 0) & (list14['DEATH_EVENT'] > 0) & (list14['age'] > 80) & (list14['age'] <= 90)]['age'])","908cab15":"len(list14[(list14['sex'] > 0) & (list14['DEATH_EVENT'] > 0) & (list14['age'] > 90) & (list14['age'] <= 100)]['age'])","be0e5549":"len(list14[(list14['sex']==0) & (list14['DEATH_EVENT'] > 0) & (list14['age'] > 40) & (list14['age'] <= 50)]['age'])","352c9bf4":"len(list14[(list14['sex']==0) & (list14['DEATH_EVENT'] > 0) & (list14['age'] > 50) & (list14['age'] <= 60)]['age'])","8e0e94b1":"len(list14[(list14['sex']==0) & (list14['DEATH_EVENT'] > 0) & (list14['age'] > 60) & (list14['age'] <= 70)]['age'])","97487e43":"len(list14[(list14['sex']==0) & (list14['DEATH_EVENT'] > 0) & (list14['age'] > 70) & (list14['age'] <= 80)]['age'])","e6c5a0e8":"len(list14[(list14['sex']==0) & (list14['DEATH_EVENT'] > 0) & (list14['age'] > 80) & (list14['age'] <= 90)]['age'])","e30094b9":"len(list14[(list14['sex']==0) & (list14['DEATH_EVENT'] > 0) & (list14['age'] > 90) & (list14['age'] <= 100)]['age'])","986b3537":"list15=df[['age','diabetes','sex']]","93f14165":"len(list15[(list15['sex']>0) & (list15['diabetes'] > 0) & (list15['age'] > 40) & (list15['age'] <= 50)]['age'])","66e19b13":"len(list15[(list15['sex']>0) & (list15['diabetes'] > 0) & (list15['age'] > 50) & (list15['age'] <= 60)]['age'])","b8a7a2a6":"len(list15[(list15['sex']>0) & (list15['diabetes'] > 0) & (list15['age'] > 60) & (list15['age'] <= 70)]['age'])","e6094fd3":"len(list15[(list15['sex']>0) & (list15['diabetes'] > 0) & (list15['age'] > 70) & (list15['age'] <= 80)]['age'])","8af8fee2":"len(list15[(list15['sex']>0) & (list15['diabetes'] > 0) & (list15['age'] > 80) & (list15['age'] <= 90)]['age'])","1da7b608":"len(list15[(list15['sex']>0) & (list15['diabetes'] > 0) & (list15['age'] > 90) & (list15['age'] <= 100)]['age'])","41ae547c":"len(list15[(list15['sex']>0) & (list15['diabetes'] > 0) & (list15['age'] > 90) & (list15['age'] <= 100)]['age'])","d233eeba":"len(list15[(list15['sex']==0) & (list15['diabetes'] > 0) & (list15['age'] > 40) & (list15['age'] <= 50)]['age'])","e79e09a9":"len(list15[(list15['sex']==0) & (list15['diabetes'] > 0) & (list15['age'] > 50) & (list15['age'] <= 60)]['age'])","cf466e84":"len(list15[(list15['sex']==0) & (list15['diabetes'] > 0) & (list15['age'] > 60) & (list15['age'] <= 70)]['age'])","4a1eeb2b":"len(list15[(list15['sex']==0) & (list15['diabetes'] > 0) & (list15['age'] > 70) & (list15['age'] <= 80)]['age'])","ac63f46c":"len(list15[(list15['sex']==0) & (list15['diabetes'] > 0) & (list15['age'] > 80) & (list15['age'] <= 90)]['age'])","a6e88efa":"len(list15[(list15['sex']==0) & (list15['diabetes'] > 0) & (list15['age'] > 90) & (list15['age'] <= 100)]['age'])","fd74223f":"df2={'age_group:':['40-50','50-60','60-70','70-80','80-90','90-100'],'count_anemia':[67,88,85,34,15,3],'creatinine_phosphokinase_avg':[758.32,672.22,381.55,411.29,951.8,355],'diabetes':[31,40,39,9,3,1],'diabetes_male':[13,22,24,6,2,1],'diabetes_female':[18,18,15,3,1,0],'ejection_fraction_avg':[36.43,38.39,39.22,35.67,43.8,36],'high_blood_pressure':[23,25,33,19,2,2],'platelets_avg':[277106.68,261369.38,251681.060,266052.65,265423.86,306786.01],'serum_creatinine_avg':[1.12,1.56,1.26,1.83,1.46,1.61],'serum_sodium_avg':[136.17,137.03,136.82,136.23,135.86,134.66],'Males':[38,60,51,27,11,2],'Females':[29,28,34,7,4,1],'smoke_male':[17,30,27,11,5,0],'smoke_female':[28,27,33,6,4,1],'time_avg':[137.31,133.85,134.36,114.35,78,33.66],'Male_Death':[10,14,14,14,8,2],'Female_Death':[9,11,7,4,2,1]}","b18e94fd":"new = pd.DataFrame.from_dict(df2)","1bd70acd":"new","8cc8cf91":"for i in df.columns:\n    sns.distplot(df[i])\n    plt.show()\n    \n","f687d66e":"plt.figure(figsize=(10,16))\nax = sns.heatmap(df.corr(),annot = True, cmap = 'viridis')\nplt.show()\n","4d9b6d8f":"new.columns","ac785d5d":"df3=new.drop('age_group:',axis=1)","aeee3b07":"df3","8a432b1f":"for i in df3.columns:\n    x=new['age_group:']\n    y=df3[i]\n    sns.barplot(x,y)\n    plt.show()","977c0d5f":"import plotly.graph_objects as go\ncolors = ['gold', 'mediumturquoise', 'darkorange', 'lightgreen','red','green']\nfor i in df3.columns:\n\n    fig = go.Figure(data=[go.Pie(labels=new['age_group:'],\n                                 values=df3[i])])\n    fig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,\n                      marker=dict(colors=colors, line=dict(color='#000000', width=2)))\n    print('\\033[1m'+i+'\\033[0m')\n    fig.show()","c5ce4865":"for i in df.columns:\n    sns.boxplot(df[i])\n    plt.show()","2ed33a7c":"sns.pairplot(df)\nplt.show()","d574b099":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(df.drop(['DEATH_EVENT'],axis = 1))","230bfa58":"feature=df\nfeature=feature.drop('DEATH_EVENT',axis=1)","ae8cddcb":"label=df['DEATH_EVENT']","7546fda2":"X_train,X_test,y_train,y_test=train_test_split(feature,label,test_size=.3)","2b812335":"print(X_train.shape,y_train.shape)","feb6038c":"print(X_test.shape,y_test.shape)","f5fb5c08":"from sklearn.metrics import classification_report, confusion_matrix","177db5d3":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)","f5a26bd9":"y_pred = logreg.predict(X_test)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))","dfff4ec6":"confusion_matrix = confusion_matrix(y_test, y_pred)\nprint(confusion_matrix)","1ee6b6a2":"# Exploratory Data Analysis","ce4d5bbb":"# Importing Required Libraries","0a775f82":"# Data Modelling and Feature Extraction  ","94368b17":"# # Distribution Plots","17be9407":"# Relational Observation of Data Frame","00e79c20":"# Relation Plots","66bb8da4":"# Summary of EDA","69302e67":"# Data Visualization","ad955fd6":"# Querying the Data"}}