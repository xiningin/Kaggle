{"cell_type":{"8e4df7e6":"code","860a19ee":"code","2c72aec2":"code","a5ab16ad":"code","b84ffb5b":"code","77c73cf6":"code","f6ec1e51":"code","bbfd4984":"code","6a572eca":"code","4dcf6393":"code","2fc449e2":"code","169d6898":"code","b8809e4b":"code","7ff1e405":"code","a848f26a":"code","65d8aea8":"code","f54c40b9":"code","6530d291":"code","67ae1ba5":"code","2c911a08":"code","0e73a204":"code","150fecb4":"code","26abe691":"code","f250700e":"code","1f0b1427":"code","62dd5596":"code","81743bf3":"code","09601f4f":"code","bb38d867":"code","fc4254d5":"code","e5dfbbeb":"code","d23537dc":"code","14f1fd7a":"markdown","57993273":"markdown","81d0a072":"markdown","95520a4a":"markdown","b5a6def8":"markdown","21c9b09e":"markdown"},"source":{"8e4df7e6":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","860a19ee":"data = pd.read_csv(r'..\/input\/kidney-kronicle\/kidney_disease.csv')\ndata.head()","2c72aec2":"data.shape","a5ab16ad":"columns=pd.read_csv('..\/input\/kidney-kronicle\/data_description.txt',sep='-')\ncolumns=columns.reset_index()\ncolumns.columns=['cols','abb_col_names']\ncolumns","b84ffb5b":"data.head()","77c73cf6":"data.columns=columns['abb_col_names'].values\ndata.head()","f6ec1e51":"data.info()","bbfd4984":"data.columns","6a572eca":"features=['packed cell volume','white blood cell count', 'red blood cell count']\ndef convert_dtype(data,feature):\n    data[feature] = pd.to_numeric(data[feature], errors='coerce')","4dcf6393":"for feature in features:\n    convert_dtype(data,feature)\ndata.info()","2fc449e2":"def extract_cat_num(data):\n    cat_col=[col for col in data.columns if data[col].dtype=='object']\n    num_col=[col for col in data.columns if data[col].dtype!='object']\n    return cat_col,num_col\ncat_col,num_col=extract_cat_num(data)","169d6898":"cat_col","b8809e4b":"num_col","7ff1e405":"for col in cat_col:\n    print('{} has {} values '.format(col,data[col].unique()))\n    print('\\n')","a848f26a":"#Replace incorrect values\ndata['diabetes mellitus']=data['diabetes mellitus'].replace(to_replace = {'\\tno':'no','\\tyes':'yes',' yes':'yes'},inplace=True)\ndata['coronary artery disease'] = data['coronary artery disease'].replace(to_replace = '\\tno', value='no')\ndata['class'] = data['class'].replace(to_replace = 'ckd\\t', value = 'ckd')\nfor col in cat_col:\n    print('{} has {} values  '.format(col, data[col].unique()))\n    print('\\n')","65d8aea8":"!pip install pandas-profiling\n","f54c40b9":"from pandas_profiling import ProfileReport\nProfileReport(data, title=\"EDA Report\")","6530d291":"data1 = data.sample(frac=0.99, random_state=42)\ndata_unseen = data.drop(data1.index)\ndata.reset_index(inplace=True, drop=True)\ndata_unseen.reset_index(inplace=True, drop=True)\nprint('Data for Modeling: ' + str(data.shape))","67ae1ba5":"print('Unseen Data For Predictions: ' + str(data_unseen.shape))","2c911a08":"!pip install pycaret","0e73a204":"from pycaret.classification import *","150fecb4":"kidney = setup(data = data1, target = 'class', session_id=123,\n                  normalize = True, \n                  transformation = True, \n                  log_experiment = True,\n               train_size = 0.8, # training over 80% of available data\n                  handle_unknown_categorical = True, \n                  unknown_categorical_method = 'most_frequent',\n                  remove_multicollinearity = True, #rop one of the two features that are highly correlated with each other\n                  ignore_low_variance = True,#all categorical features with statistically insignificant variances are removed from the dataset.\n                  combine_rare_levels = True,# all levels in categorical features below the threshold defined in rare_level_threshold param are combined together as a single level\n                  numeric_imputation='median',\n                  categorical_imputation='mode',\n                  ignore_features=['id'],\n               feature_selection = True)","26abe691":"best = compare_models()","f250700e":"et = create_model('et')","1f0b1427":"print(et)","62dd5596":"tuned_et = tune_model(et)","81743bf3":"evaluate_model(tuned_et)","09601f4f":"predict_model(tuned_et)","bb38d867":"final_et = finalize_model(tuned_et)\nfinal_et","fc4254d5":"predict_model(final_et)","e5dfbbeb":"unseen_predictions = predict_model(final_et, data=data_unseen)\nunseen_predictions.head()","d23537dc":"print(\"Confidence Score :   {}\".format(round(unseen_predictions.Score.mean(),2)))","14f1fd7a":"## Features:\n*     age - age\n*     bp - blood pressure\n*     sg - specific gravity\n*     al - albumin\n*     su - sugar\n*     rbc - red blood cells\n*     pc - pus cell\n*     pcc - pus cell clumps\n*     ba - bacteria\n*     bgr - blood glucose random\n*     bu - blood urea\n*     sc - serum creatinine\n*     sod - sodium\n*     pot - potassium\n*     hemo - haemoglobin\n*     pcv - packed cell volume\n*     wc - white blood cell count\n*     rc - red blood cell count\n*     htn - hypertension\n*     dm - diabetes mellitus\n*     cad - coronary artery disease\n*     appet - appetite\n*     pe - pedal edema\n*     ane - anemia\n*     classification - class","57993273":"# Extract Numerical & Categorical Features","81d0a072":"So we need to correct 2 features and the target variable which contain certain discrepancy in some values.","95520a4a":"As it can be seen, red_blood_cell_count, packed_cell_volume and white_blood_cell_count are object type. We need to \nchange to numerical dtype.","b5a6def8":"### total unique categories in our categorical features to check if any dirtiness in data or not","21c9b09e":"# Task to predict whether person has ckd or notckd??\n\n## ckd-chronic kidney disease\n## notckd-not crornic kidney disease"}}