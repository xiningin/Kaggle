{"cell_type":{"dbcaf104":"code","c4441866":"code","0336caa9":"code","c5b6d005":"code","c51d8c3a":"code","576a45c0":"code","240595ed":"code","59c81130":"code","fc645c0d":"code","5172df54":"code","b54496df":"markdown","64a42910":"markdown","d2c41c8e":"markdown","7fcf928f":"markdown","4c5d1b62":"markdown","09be2b33":"markdown","df759eda":"markdown","23b30d98":"markdown","4fadbed3":"markdown","d8c685a8":"markdown","f6bca828":"markdown","a737fcc1":"markdown"},"source":{"dbcaf104":"# NOT TO DO\nlist_of_values = []\nfor i in range(24):\n    list_of_values.append(i)\n\n# IMPROVE PERFORMANCE\nlist_of_values = [i for i in range(24)]\n\n# ALSO CAN BE USED ON DICTIONARIES\ndict_of_values = {f'str_{i}': i for i in range(24)}","c4441866":"import pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('..\/input\/avocado-prices\/avocado.csv')","0336caa9":"df.filter(['Date','AveragePrice']).head()","c5b6d005":"df.filter(like='Bags').head()","c51d8c3a":"df.filter(regex='\\d').head()","576a45c0":"df['AveragePrice_shift_not_cool'] = df.AveragePrice.shift(1)\ndf.head()","240595ed":"df.assign(\n    AveragePrice_shift_cool = lambda df: df.AveragePrice.shift(1)\n).head()","59c81130":"df.filter(['Date','AveragePrice']).plot()","fc645c0d":"df.groupby(\n    'Date'\n).agg(\n    mean_price = pd.NamedAgg('AveragePrice','mean')\n).head()","5172df54":"import seaborn as sns\n\nsns.heatmap(\n    df.assign(\n        Date = lambda df: pd.to_datetime(df.Date),\n        year = lambda df: df.Date.dt.year,\n        month = lambda df: df.Date.dt.month\n    ).pivot_table(\n        index='year',\n        columns='month',\n        values='AveragePrice',\n        aggfunc='mean',\n        fill_value=0\n    )\n)","b54496df":"Use this. Can be very useful if the variable is temporary","64a42910":"# Python tricks\n\n## Performance improving\n\n### List comprehension\n\nAvoid using `for` loops if it isn't as a list comprehension.","d2c41c8e":"### Selecting columns\n\nI hate to use the double brackets to select columns, it breaks aesthetics. Pandas know it and has `filter` method.","7fcf928f":"### Heatmap without `.corr`\n\nThis is an extra that I've using and works great. I want a heatmap that shows a greater color as the number of users increase by week day and month (or whatever other aggregation function). Well, use the following:","4c5d1b62":"# Notebooks keyboard shortcuts\n\n## Cell Execution\n\n- Execute a cell without adding a new one `ctrl+enter`.\n- Execute a cell adding a new one if there isn't another one `shift+enter`.\n- Execute a cell adding a new one in the middle `alt+enter`.\n\n## Cell Manipulation\n\n- Add one cell above the selected one, press `a` once.\n- Add one cell below the selected one, press `b` once.\n- Cut a cell just by pressing `x` once.\n- Copy a cell pressing `c` once.\n- Paste a cell just by pressing `v` selecting the cell that will be above.\n- Change a cell between Markdown, Code and Plain Text by pressing `m`, `y`, and `r` respectively.\n- Press `esc` to stop editing a cell.\n- You can select cells by holding shift and moving arrows up and down.\n\n## Markdown\n\n- There are two way to create lists: By adding a minus \\- (list won't be enumerated) or by adding number (list would be enumerated).\n    - Sublists are created by adding a tabular space followed by a minus \\- or a number.\n- Adding a greater than \\> symbol create a highligh space.\n> This is the space I'm talking about\n- Especial characters need to be scaped using a single backslash, but dollar sign that requires doble backslash.\n- The number of number sign \\# at the benining of any text make it a heading, the greater the number of number signs, the lower the heading.\n- A single line of code can be added to a markdown cell by including this sign \\` at the begining and closing of a character or line.\n\n`a`\n\n`this is code`\n\n- Multi line code can be added by adding triple \\`\\`\\` at the begining and at the ending of a code block.\n\n```\nThis is a line of code\n\nAnd this is also a line of the same code\n```\n\n- You can include the code language by opening and closing braces after the first triple of \\`\\`\\`\n\n```{python}\n# This is a comment\nfor i in range(24):\n    print(i)\n```\n\n- You can also add code by adding a tabular space before any line of code\n\n\n    This is code\n    And this is code, too\n\n- If your notebook needs mode emotion, use some emojist, here is the [code list](https:\/\/github.com\/ikatyang\/emoji-cheat-sheet)\n- Needs link in your notebook? use this `[Your text](your_url)`\n\n## Mathjax\n\n- To create formulas on a markdown cell, start with \\\\$ and end with \\\\$.\n\n$ y = mx + b$\n\n- Subindex are done by using underscore. If a subindex requires a subindex, use braces.\n\n$ y = a_0 + a_{t+1} + b_{x_1} + b_{x_2}$\n\n- More MathJax references [here](https:\/\/math.meta.stackexchange.com\/questions\/5020\/mathjax-basic-tutorial-and-quick-reference)","09be2b33":"# What is this?\n\nThis is a list of python and notebooks tip and tricks that I'll be updating regularly. Has no particular order.\n\nAny contribution will be helpfull.","df759eda":"### Creating new columns\n\nInstead of this:","23b30d98":"### Agregating\n\nWhen aggregating, you can use `.agg` and inside of it create agregations with `pd.NamedAgg`","4fadbed3":"# Pandas\n\n## Improve readability\n\nIn general, pandas improves python readability, however it can be better using a super useful and easy methods\n\n### Selection `NaN` records\n\nYou can use `df[df.column_name.isna()]`, but to keep aesthetics you can do:","d8c685a8":"Or by using a regex","f6bca828":"It also allows to filter columns that contains string, as follow:","a737fcc1":"### Plotting!\n\nYou can plot using pandas, without the intervention of `matplotlib`. The `plot` method has useful parameters like the following:\n\n- x: The column to be in x axis\n- y: A string or list of string with the name of the columns to plot\n- figsize: A tuple with the height and width of chart\n- subplots: If `y` has more than one string and you set this as `True`, then pandas will plot as many charts as large the `y` array\n- logy, logx, loglog: log the correspoding axis (logx for x axis, logy for y axis and loglog for both)"}}