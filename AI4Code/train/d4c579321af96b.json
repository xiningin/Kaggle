{"cell_type":{"2a0f4107":"code","ec2f8e44":"code","55c05045":"code","29cdaf11":"code","a5e8ed78":"code","c00699cf":"code","f08df2a3":"code","fb5af62f":"code","05396a1f":"code","099c1f36":"code","5934c56d":"code","313487e8":"code","2dfa2163":"code","3e00afe8":"code","328aff42":"code","8803c867":"code","cf7937a6":"code","e4574715":"code","3ec953ad":"code","fdd6318b":"code","0620cc51":"code","3dc1d00d":"code","6d6e5940":"code","e89a667e":"code","718b899f":"code","1d534765":"code","b112b60c":"code","1f7ff7fd":"code","fdfa7097":"code","aa4dda4d":"code","8cf9630f":"code","937a0a36":"code","e793bb09":"code","98fe3b9b":"code","db790fa7":"code","d552b5d4":"code","84618e52":"code","790a3a60":"code","40b39127":"code","9046d0f0":"code","94278b74":"code","d8997f8f":"code","61918f38":"markdown","a311886c":"markdown","6a40fb8f":"markdown","c2489dc4":"markdown","f4c20d87":"markdown","9426e28c":"markdown","0fce752b":"markdown","ebf93121":"markdown","81b005ca":"markdown","cdccd068":"markdown","0c1bd392":"markdown","7b87526e":"markdown","27813ac4":"markdown","8c39ee15":"markdown","c0e917a8":"markdown","73ac7114":"markdown","f04cdc12":"markdown","f1bb3d72":"markdown","fac53c7e":"markdown"},"source":{"2a0f4107":"\nimport pandas as pd\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set(color_codes=True)\nimport itertools\nplt.style.use('fivethirtyeight')\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","ec2f8e44":"diabetes = pd.read_csv(\"\/kaggle\/input\/diabetes.csv\")\nprint(diabetes.columns)\n","55c05045":"diabetes.shape","29cdaf11":"diabetes.head()","a5e8ed78":"display(diabetes.info())","c00699cf":"diabetes['Outcome'].value_counts()","f08df2a3":"print (diabetes.isnull().values.any())","fb5af62f":" 0 in diabetes.values\n","05396a1f":"print(\"# rows in dataframe {0}\".format(len(diabetes)))\nprint(\"Zero in Pregnancies : {0}\".format(len(diabetes.loc[diabetes['Pregnancies'] == 0])))\nprint(\"Zero in Glucose : {0}\".format(len(diabetes.loc[diabetes['Glucose'] == 0])))\nprint(\"Zero in BloodPressure: {0}\".format(len(diabetes.loc[diabetes['BloodPressure'] == 0])))\nprint(\"Zero in SkinThickness : {0}\".format(len(diabetes.loc[diabetes['SkinThickness'] == 0])))\nprint(\"Zero in Insulin  : {0}\".format(len(diabetes.loc[diabetes['Insulin'] == 0])))\nprint(\"Zero in BMI : {0}\".format(len(diabetes.loc[diabetes['BMI'] == 0])))\nprint(\"Zero in DiabetesPedigreeFunction  : {0}\".format(len(diabetes.loc[diabetes['DiabetesPedigreeFunction'] == 0])))\nprint(\"Zero in Age: {0}\".format(len(diabetes.loc[diabetes['Age'] == 0])))","099c1f36":"#Replace 0 to NaN\n\nR_d=diabetes[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']]=diabetes[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.nan)\nR_d.head()","5934c56d":"R_d.isnull().sum()[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']]\n","313487e8":"pd.options.display.float_format ='{:,.2f}'.format\n\ndiabetes['Glucose'].fillna(diabetes['Glucose'].mean(),inplace=True)\ndiabetes['BloodPressure'].fillna(diabetes['BloodPressure'].mean(),inplace=True)\ndiabetes['SkinThickness'].fillna(diabetes['SkinThickness'].mean(),inplace=True)\ndiabetes['Insulin'].fillna(diabetes['Insulin'].mean(),inplace=True)\ndiabetes['BMI'].fillna(diabetes['BMI'].mean(),inplace=True)\ndiabetes.head()","2dfa2163":"diabetes['Outcome'].value_counts()","3e00afe8":"fig1, ax1 = plt.subplots(1,2,figsize=(8,8))\n\nsns.countplot(diabetes['Outcome'],ax=ax1[0])\n\nlabels = 'Healthy', 'Diabetic'\n\ndiabetes.Outcome.value_counts().plot.pie(labels=labels, autopct='%1.1f%%',shadow=True, startangle=90)","328aff42":"fig, ax = plt.subplots(4,2, figsize=(16,16))\nsns.distplot(diabetes.Age, bins = 20, ax=ax[0,0]) \nsns.distplot(diabetes.Pregnancies, bins = 20, ax=ax[0,1]) \nsns.distplot(diabetes.Glucose, bins = 20, ax=ax[1,0]) \nsns.distplot(diabetes.BloodPressure, bins = 20, ax=ax[1,1]) \nsns.distplot(diabetes.SkinThickness, bins = 20, ax=ax[2,0])\nsns.distplot(diabetes.Insulin, bins = 20, ax=ax[2,1])\nsns.distplot(diabetes.DiabetesPedigreeFunction, bins = 20, ax=ax[3,0]) \nsns.distplot(diabetes.BMI, bins = 20, ax=ax[3,1]) ","8803c867":"sns.pairplot(diabetes,hue='Outcome', diag_kind='kde')","cf7937a6":"pd.options.display.float_format ='{:,.3f}'.format\n\ncorrelation=diabetes.corr()\ncorrelation","e4574715":"sns.set(font_scale=1.15)\nplt.figure(figsize=(12, 8))\n\nax =sns.heatmap(correlation, linewidths=0.01,\n            annot=True,square=True,cmap='BuPu',linecolor=\"black\")\n\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\n\nplt.title('Correlation between features');\n\nplt.show()","3ec953ad":"Feature = diabetes[['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n       'BMI', 'DiabetesPedigreeFunction', 'Age']]","fdd6318b":"X= Feature\nX[0:5]","0620cc51":"y = diabetes['Outcome'].values\ny[0:5]","3dc1d00d":"from sklearn import preprocessing\n\nX = preprocessing.StandardScaler().fit(X).transform(X)\nX[0:5]","6d6e5940":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.3, random_state=42)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","e89a667e":"trainval = (1.0 * len(X_train)) \/ (1.0 * len(diabetes.index))\ntestval = (1.0 * len(X_test)) \/ (1.0 * len(diabetes.index))\nprint(\"{0:0.2f}% in training set\".format(trainval * 100))\nprint(\"{0:0.2f}% in test set\".format(testval * 100))","718b899f":"from sklearn.tree import DecisionTreeClassifier\ndiabetesTree = DecisionTreeClassifier()\ndiabetesTree","1d534765":"diabetesTree.fit(X_train,y_train)","b112b60c":"y_predict = diabetesTree.predict(X_test)","1f7ff7fd":"from sklearn import metrics\nprint(\"DecisionTrees's Accuracy on Train set: \", metrics.accuracy_score(y_train, diabetesTree.predict(X_train)))\nprint(\"DecisionTrees's Accuracy on Test set : \", metrics.accuracy_score(y_test, y_predict))","fdfa7097":"from sklearn.metrics import classification_report, confusion_matrix\n\n#Plot the confusion matrix\nsns.set(font_scale=1.5)\ncm = confusion_matrix(y_test, y_predict)\nax = sns.heatmap(cm, annot=True, cmap='BuPu', fmt='g')\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\nplt.xlabel(\"Predicted label\")\nplt.ylabel(\"True label\")\n\nplt.show()","aa4dda4d":"print (classification_report(y_test,y_predict))","8cf9630f":"from sklearn.model_selection import GridSearchCV\n","937a0a36":"parameters = {'max_depth': (2,4,6,8,10),\n             'criterion': ('gini','entropy'),\n             'min_samples_leaf' : (1,2,3,4,5),\n             'max_leaf_nodes' : (3,4,5,6,7,8,9,10)\n        \n             }","e793bb09":"gridsearch_tree = GridSearchCV(estimator = diabetesTree,\n                           param_grid = parameters,\n                           scoring = 'accuracy',\n                           cv = 10,\n                        n_jobs = -1\n                          )","98fe3b9b":"gridsearch_tree.fit(X_train, y_train)\n","db790fa7":"print(\"tuned  decision tree perameter: {}\" .format(gridsearch_tree.best_params_))\nprint(\"best score: {}\" .format(gridsearch_tree.best_score_))","d552b5d4":"print(\"best estimator: {}\" .format(gridsearch_tree.best_estimator_))","84618e52":"diabetesTree = DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=4,\n            max_features=None, max_leaf_nodes=9, min_impurity_decrease=0.0,\n            min_impurity_split=None, min_samples_leaf=4,\n            min_samples_split=2, min_weight_fraction_leaf='deprecated',\n            presort=False, random_state=None, splitter='best')","790a3a60":"diabetesTree.fit(X_train,y_train)","40b39127":"y_predict = diabetesTree.predict(X_test)","9046d0f0":"from sklearn import metrics\nprint(\" Tuned DecisionTrees's Accuracy on Train set: \", metrics.accuracy_score(y_train, diabetesTree.predict(X_train)))\nprint(\"Tuned DecisionTrees's Accuracy on Test set : \", metrics.accuracy_score(y_test, y_predict))","94278b74":"from sklearn.metrics import classification_report, confusion_matrix\n\n#Plot the confusion matrix\nsns.set(font_scale=1.5)\ncm = confusion_matrix(y_test, y_predict)\nax = sns.heatmap(cm, annot=True, cmap='BuPu', fmt='g')\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\nplt.xlabel(\"Predicted label\")\nplt.ylabel(\"True label\")\n\nplt.show()","d8997f8f":"print (classification_report(y_test,y_predict))","61918f38":"# Predictive Modeling with Hyperparammeter Tuning ","a311886c":"Handling the Missing values by replacing NaN to mean\n","6a40fb8f":"Count 0 values in diabetes dataset","c2489dc4":"## Pair Plots\n\nPair plot is used to understand the best set of features to explain a relationship between two variables or to form the most separated clusters. It also helps to form some simple classification models by drawing some simple lines or make linear separation in our dataset.","f4c20d87":"Analysing the Outcome to  get the number of diabetic & Healthy person\n","9426e28c":"Variables within a dataset can be related for lots of reasons. It can be useful in data analysis and modeling to better understand the relationships between variables. The statistical relationship between two variables is referred to as their correlation. \n\nA correlation could be positive, meaning both variables move in the same direction, or negative, meaning that when one variable\u2019s value increases, the other variables\u2019 values decrease. Correlation can also be neural or zero, meaning that the variables are unrelated.","0fce752b":"This notebook is a guide to Hyperparameter Tuning.\nIn machine learning, hyperparameter optimization or tuning is the problem of choosing a set of optimal hyperparameters for a learning algorithm.\nA hyperparameter is a parameter whose value is used to control the learning process.\nPlease upvote if you like this kernel.\n","ebf93121":"\n# # Correlation between features","81b005ca":"# Feature selection","cdccd068":"Observations:\nThe correlation plot shows the relation between the parameters.\n\nGlucose,Age,BMI and Pregnancies are the most correlated parameters with the Outcome. Insulin and DiabetesPedigreeFunction have little correlation with the outcome. BloodPressure and SkinThickness have tiny correlation with the outcome. There is a little correlation between Age and Pregnancies,Insulin and Skin Thickness, BMI and Skin Thickness,Insulin and Glucose","0c1bd392":"correlation plot---heatmap\n","7b87526e":"check the desired 70% train, 30% test split of the data","27813ac4":"Outcome 0 means Non diabetic, outcome 1 means diabetic\n so the Data is biased towards people who are non-diabetics","8c39ee15":"# Data Visualization","c0e917a8":"count plot shows the count values of the outcome.\npieplot shows that 65.1% people are Healthy and 34.9% people are diabetic","73ac7114":"Train Test Split","f04cdc12":"# Decision Tree","f1bb3d72":"# Normalize Data ","fac53c7e":"Dist Plot helps us to flexibly plot a univariate distribution of observations.\n"}}