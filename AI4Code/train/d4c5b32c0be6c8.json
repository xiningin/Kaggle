{"cell_type":{"73a6b667":"code","09267646":"code","e4cd0a88":"code","0eac9a9e":"code","1d9842b2":"code","294d5e5c":"code","d0c81ebe":"code","852a483d":"code","f36a797f":"code","8f67d298":"code","49f82b26":"code","ebb8932f":"code","46a52529":"code","4b3867a8":"code","0c67eeba":"code","d6e082b4":"code","38b4c3c2":"code","65351634":"code","dc5373e9":"code","640dbb05":"code","5dd680a4":"code","97a6a24d":"code","7cbd4f81":"code","03b79bdc":"code","022e6b3b":"code","e9886aa1":"code","5c49db20":"code","ea3ebf44":"code","a9deef6b":"code","c5ad9e33":"code","4746f349":"code","c78593af":"code","17eb4466":"code","a2c39fc6":"code","caa867e5":"code","c8286e76":"code","16997423":"code","28650b75":"code","e3e4eea6":"code","223d722e":"code","9bad1ad5":"code","f53241ba":"code","2cad3698":"code","789c3c06":"code","ac60247c":"code","26fac615":"code","4065f768":"code","03938162":"code","74de0cfc":"code","47e5cd8e":"code","c7cfeead":"code","9472b3f5":"code","444af123":"code","f636cff3":"code","65863493":"code","6dea22d2":"code","2376a2f3":"code","876c42dc":"code","b61419ea":"code","50ea9515":"code","368f66d3":"code","cadbd5df":"code","af7e2c6f":"code","9d628961":"code","8e21e204":"code","5357bcbd":"code","485c86cb":"code","853aebd3":"code","4e677d7f":"code","4f314059":"code","4374455a":"code","636ec40c":"code","60bdad9d":"code","62b32855":"code","c330aa7a":"code","5d29576d":"code","12dbae49":"code","4da723c9":"code","6ce2918a":"code","0927aa65":"code","1ec2785d":"code","3a0c95ae":"code","6dacad24":"code","dcbd058d":"code","6ad90373":"code","c5eab27c":"code","e558ebda":"code","adc254e2":"code","69617997":"code","6b9cc0fb":"code","758c319b":"code","a1743166":"code","fc1ec436":"code","4dcdc12d":"code","7e8dbef2":"code","296b2e0a":"markdown","0790551d":"markdown"},"source":{"73a6b667":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder,LabelEncoder\ndf=pd.read_csv('..\/input\/bigmart-sales-data\/Train.csv')\n#X=df.drop('Item_Outlet_Sales',axis=1)\n#y=df['Item_Outlet_Sales']\n#X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.20,random_state=42)","09267646":"from sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_absolute_error","e4cd0a88":"import matplotlib.pyplot as plt","0eac9a9e":"list(df.columns.values.tolist()) ","1d9842b2":"df.shape","294d5e5c":"df.head()","d0c81ebe":"df.isnull().sum()[:]","852a483d":"df.apply(lambda x : len(x.unique()))","f36a797f":"df.hist(figsize = (10,10),color='gray')","8f67d298":"cat_cols = df.select_dtypes(include=['object']).columns\nnum_cols = df.select_dtypes(exclude=['object']).columns\n#print(df[cat_cols].columns)\n#print(df[num_cols].columns)","49f82b26":"#check for missing values\nimport seaborn as sns\ndf.info()\n#df.isnull().sum()\nsns.heatmap(df.isnull(), yticklabels=False)","ebb8932f":"#correlation_matrix\ncorr_m = df.corr() \nf, ax = plt.subplots(figsize =(7,6)) \nsns.heatmap(corr_m,annot=True, cmap =\"YlGnBu\", linewidths = 0.1) ","46a52529":"print(df[cat_cols].columns)","4b3867a8":"#bar charts for cat_columns ","0c67eeba":"#1_plot(before change)\ndf['Item_Fat_Content'].value_counts().sort_index().plot.bar()","d6e082b4":"#1_plot(after_change) #1st change in dataset\n#LF,low fat and reg is a correction and should be replaced as Low Fat and Regular \ndf['Item_Fat_Content'].replace({'LF':'Low Fat','reg':'Regular','low fat':'Low Fat'},inplace = True)\ndf['Item_Fat_Content'].value_counts().sort_index().plot.bar()","38b4c3c2":"#2_plot\nsns.catplot('Item_Type',kind = 'count',data = df,aspect =4)","65351634":"#3_plot\nsns.catplot('Outlet_Identifier',kind = 'count',data = df,aspect =2)","dc5373e9":"#4_plot (missing values)\nsns.catplot('Outlet_Size',kind = 'count',data = df,aspect =2)","640dbb05":"#5_plot\nsns.catplot('Outlet_Location_Type',kind = 'count',data = df,aspect =4)","5dd680a4":"#6_plot\nsns.catplot('Outlet_Type',kind = 'count',data = df,aspect =3)","97a6a24d":"print(df[num_cols].columns)","7cbd4f81":"#bar charts for num_columns ","03b79bdc":"#7_plot\nsns.catplot('Outlet_Establishment_Year',kind = 'count',data = df,aspect =3)","022e6b3b":"#from pandas.plotting import scatter_matrix\n#fig, ax = plt.subplots(figsize=(12,12))\n#scatter_matrix(df, alpha=1, ax=ax)","e9886aa1":"#8_plot\nsns.scatterplot(x = 'Item_Visibility',y = 'Item_Outlet_Sales',data = df,alpha = 0.5);","5c49db20":"#In above plot, there are more than 500 data points at 0 which doesn't make sense. so considering them as missing values and imputing with mean values.\n#2nd change in dataset\na= df[df['Item_Visibility']!=0]['Item_Visibility'].mean()\ndf['Item_Visibility'] = df['Item_Visibility'].replace(0.00,a)\nsns.scatterplot(x = 'Item_Visibility',y = 'Item_Outlet_Sales',data = df,alpha = 0.5);","ea3ebf44":"df['Item_Weight'].isnull().sum(), df['Outlet_Size'].isnull().sum()","a9deef6b":"#1_missing value treated\n#from sklearn.impute import KNNImputer\n#kn= KNNImputer(weights='distance')\n#a= kn.fit_transform(df[\"Item_Weight\"].values.reshape(-1,1))\n#df[\"Item_Weight\"]=a","c5ad9e33":"df[\"Item_Weight\"]=df[\"Item_Weight\"].fillna(np.mean(df[\"Item_Weight\"]))","4746f349":"df[\"Item_Weight\"].isnull().sum()","c78593af":"df[\"Outlet_Size\"].isnull().sum()","17eb4466":"#check for mode\ndf[\"Outlet_Size\"].mode()","a2c39fc6":"#2_missing value treated\ndf[\"Outlet_Size\"] = df['Outlet_Size'].replace(np.nan, 'Medium')\ndf[\"Outlet_Size\"].isnull().sum()","caa867e5":"sns.heatmap(df.isnull(), yticklabels=False)","c8286e76":"df['Item_Identifier'].head(20)\n#all values in 'Item_Identifier' column can be catogerized into 3: FD, DR, NC","16997423":"df['Item_Category_Id'] =df['Item_Identifier'].replace({'^FD[A-Z]*[0-9]*':'FD','^DR[A-Z]*[0-9]*':'DR','^NC[A-Z]*[0-9]*':'NC'},regex = True)","28650b75":"sns.catplot('Item_Category_Id',kind = 'count',data = df,aspect =3)","e3e4eea6":"sns.scatterplot(x = 'Item_Category_Id',y = 'Item_Type',data = df,alpha = 0.5);","223d722e":"#from the below graph we can say that NC type of food cannot be LowFat.\nsns.scatterplot(x = 'Item_Category_Id',y = 'Item_Fat_Content',data = df,alpha = 0.5);","9bad1ad5":"df['Outlet_Age_Years'] = 2020-df['Outlet_Establishment_Year']","f53241ba":"df['Item_Type'].unique()","2cad3698":"Breakfast = [\"Breads\", \"Breakfast\", \"Dairy\", \"Fruits and Vegetables\",\"Snack Foods\"]\nDrinks= [\"Soft Drinks\", \"Hard Drinks\",\"Canned\"]\nNV=[\"Meat\",\"Frozen Foods\",\"Seafood\"]\nOthers=[\"Household\",\"Baking Goods\",\"Health and Hygiene\",\"Others\",\"Starchy Foods\"]","789c3c06":"items_list=[]\nfor i in df['Item_Type']:\n    if i in Breakfast:\n        items_list.append('Breakfast')\n    elif (i in Drinks):\n        items_list.append('Drinks')\n    elif (i in NV):\n        items_list.append('NV')    \n    elif (i in Others):\n        items_list.append('Others')      \ndf['Item_Type_new'] = items_list","ac60247c":"cat_cols","26fac615":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf['Outlet_Size']= le.fit_transform(df['Outlet_Size'])\ndf['Outlet_Location_Type'] = le.fit_transform(df['Outlet_Location_Type'])\ndf['Item_Fat_Content'] = le.fit_transform(df['Item_Fat_Content'])\ndf['Outlet_Identifier'] = le.fit_transform(df['Outlet_Identifier'])\n#df['Item_Type'] = le.fit_transform(df['Item_Type'])\ndf['Outlet_Type'] = le.fit_transform(df['Outlet_Type'])\ndf['Item_Identifier'] = le.fit_transform(df['Item_Identifier'])\ndf['Item_Type_new'] = le.fit_transform(df['Item_Type_new'])","4065f768":"df['Item_Category_Id'] = le.fit_transform(df['Item_Category_Id'])","03938162":"df","74de0cfc":"df = pd.get_dummies(df, columns=['Item_Category_Id','Item_Fat_Content','Outlet_Location_Type','Outlet_Size','Outlet_Type',\n                     'Item_Type_new','Outlet_Identifier'])","47e5cd8e":"#df['Item_MRP'] = np.log(df['Item_MRP'])\n#df['Item_Visibility'] = np.log(df['Item_Visibility'])","c7cfeead":"from sklearn import preprocessing\nscaler = preprocessing.MinMaxScaler()\nmin_max_scaler = preprocessing.MinMaxScaler()","9472b3f5":"df['Item_Identifier'] = pd.DataFrame(min_max_scaler.fit_transform(pd.DataFrame(df['Item_Identifier'])))","444af123":"df.head()","f636cff3":"#df.info()","65863493":"X=df.drop(['Item_Outlet_Sales','Outlet_Establishment_Year','Item_Identifier','Item_MRP','Item_Type'],axis=1)\ny=df['Item_Outlet_Sales']","6dea22d2":"#model_check_1\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom math import sqrt\nfrom sklearn.linear_model import LinearRegression","2376a2f3":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=3)\nL_R= LinearRegression()\nL_R.fit(X_train,y_train)\ny_pred=L_R.predict(X_test)\nr2scores= r2_score(y_test,y_pred)\nrmses= sqrt(mean_squared_error(y_test,y_pred))\nprint(\"r2scores : \",r2scores)\nprint(\"rmses : \",rmses)\nL_R.score(X_train,y_train),L_R.score(X_test,y_test)\nprint(L_R.intercept_)","876c42dc":"df.apply(lambda x : len(x.unique()))","b61419ea":"sns.scatterplot(x = 'Item_MRP',y = 'Item_Visibility',data = df,alpha = 0.5);","50ea9515":"sns.scatterplot(x = 'Item_MRP',y = 'Item_Outlet_Sales',data = df,alpha = 0.5);","368f66d3":"def clusters(x):\n    if x<70:\n        return 'a'\n    elif x in range(70,135):\n        return 'b'\n    elif x in range(135,200):\n        return 'c'\n    else:\n        return 'd'\ndf['Item_MRP_Clusters'] = df['Item_MRP'].astype('int').apply(clusters)\ndf['Item_MRP_Clusters'] = le.fit_transform(df['Item_MRP_Clusters'])","cadbd5df":"X=df.drop(['Item_Outlet_Sales','Outlet_Establishment_Year','Item_Identifier','Item_MRP','Item_Type'],axis=1)\ny=df['Item_Outlet_Sales']","af7e2c6f":"#model_check_2\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=3)\nL_R= LinearRegression()\nL_R.fit(X_train,y_train)\ny_pred=L_R.predict(X_test)\nr2scores= r2_score(y_test,y_pred)\nrmses= sqrt(mean_squared_error(y_test,y_pred))\nprint(\"r2scores : \",r2scores)\nprint(\"rmses : \",rmses)\nL_R.score(X_train,y_train),L_R.score(X_test,y_test)\nprint(L_R.intercept_)","9d628961":"sns.scatterplot(x = 'Item_Visibility',y = 'Item_Outlet_Sales',data = df,alpha = 0.5);","8e21e204":"X=df.drop(['Item_Outlet_Sales','Outlet_Establishment_Year','Item_Identifier','Item_MRP','Item_Type'],axis=1)\ny=df['Item_Outlet_Sales']","5357bcbd":"#same_duplicate\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=3)\nL_R= LinearRegression()\nL_R.fit(X_train,y_train)\ny_pred=L_R.predict(X_test)\nr2scores= r2_score(y_test,y_pred)\nrmses= sqrt(mean_squared_error(y_test,y_pred))\nprint(\"r2scores : \",r2scores)\nprint(\"rmses : \",rmses)\nL_R.score(X_train,y_train),L_R.score(X_test,y_test)\nprint(L_R.intercept_)","485c86cb":"plt.boxplot(df[\"Item_Visibility\"])","853aebd3":"print(df['Item_Visibility'].quantile(0.50)) \nprint(df['Item_Visibility'].quantile(0.91)) ","4e677d7f":"df['Item_Visibility'] = np.where(df['Item_Visibility'] > 0.14270015850000003, 0.062516602, df['Item_Visibility'])","4f314059":"plt.boxplot(df[\"Item_Visibility\"])","4374455a":"#model_1 using LinearRegression","636ec40c":"X=df.drop(['Item_Outlet_Sales','Outlet_Establishment_Year','Item_Identifier','Item_MRP','Item_Type'],axis=1)\ny=df['Item_Outlet_Sales']\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=3)\nL_R= LinearRegression()\nL_R.fit(X_train,y_train)\ny_pred=L_R.predict(X_test)\nr2scores= r2_score(y_test,y_pred)\nprint(\"r2scores : \",r2scores)\nL_R.score(X_train,y_train),L_R.score(X_test,y_test)\nprint(L_R.intercept_)","60bdad9d":"m_a_e=mean_absolute_error(y_test, y_pred)\nprint(m_a_e)","62b32855":"#rmse\nmse1=mean_squared_error(y_test,y_pred)\nL_R_score=np.sqrt(mse1)\nL_R_score","c330aa7a":"#cross_val\nscore=cross_val_score(L_R,X_train,y_train,cv=10,scoring='neg_mean_squared_error')\nL_R_score_cross=np.sqrt(-score)\nprint(np.mean(L_R_score_cross),np.std(L_R_score_cross))","5d29576d":"df1 = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ndf1","12dbae49":"import seaborn as sns\nax1 = sns.distplot(df1['Actual'], hist=False, color=\"red\", label=\"Actual Value\")\nsns.distplot(df1['Predicted'], hist=False, color=\"blue\", label=\"Predicted Values\" , ax=ax1)","4da723c9":"#model_2 using RandomForestRegressor","6ce2918a":"from sklearn.ensemble import RandomForestRegressor\nrf=RandomForestRegressor()\nrf.fit(X_train,y_train)\ny_pred2=rf.predict(X_test)","0927aa65":"mse2=mean_squared_error(y_test,y_pred2)\nrf_score=np.sqrt(mse2)\nrf_score","1ec2785d":"r2scores_2= r2_score(y_test,y_pred2)\nr2scores_2","3a0c95ae":"#cross_val\nrf=RandomForestRegressor()\nscore=cross_val_score(rf,X_train,y_train,cv=10,scoring='neg_mean_squared_error')\nrf_score_cross=np.sqrt(-score)\nprint(np.mean(rf_score_cross),np.std(rf_score_cross))","6dacad24":"df2 = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred2})\ndf2","dcbd058d":"import seaborn as sns\nax1 = sns.distplot(df2['Actual'], hist=False, color=\"red\", label=\"Actual Value\")\nsns.distplot(df2['Predicted'], hist=False, color=\"blue\", label=\"Predicted Values\" , ax=ax1)","6ad90373":"#model_3 using Lasso","c5eab27c":"#important_features (for ref only)\nfrom sklearn.linear_model import LassoCV\nm_l = LassoCV(alphas = [1, 0.1, 0.001, 0.0005])\nm_l.fit(X_train, y_train)\n#coef = pd.Series(m_l.coef_, index = X_train.columns)\n#imp_features = coef.index[coef!=0].tolist()","e558ebda":"y_pred3 = m_l.predict(X_test)\nmse3=mean_squared_error(y_test,y_pred3)\nmse3","adc254e2":"score=np.sqrt(mse3)\nscore","69617997":"r2scores_3= r2_score(y_test,y_pred3)\nr2scores_3","6b9cc0fb":"df3 = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred3})\ndf3","758c319b":"import seaborn as sns\nax1 = sns.distplot(df3['Actual'], hist=False, color=\"red\", label=\"Actual Value\")\nsns.distplot(df3['Predicted'], hist=False, color=\"blue\", label=\"Predicted Values\" , ax=ax1)","a1743166":"mse1,mse2,mse3","fc1ec436":"L_R_score, rf_score ,score","4dcdc12d":"F_scores = {'Model':  ['L_R', 'RF_R','LASSO'],\n         'RMSE': [L_R_score, rf_score ,score],\n            'R2': [r2scores,r2scores_2,r2scores_3]}","7e8dbef2":"df_scores = pd.DataFrame (F_scores, columns = ['Model','RMSE','R2'])\ndf_scores","296b2e0a":"# THANK_YOU","0790551d":"Item_Weight and Outlet_Size having missing values:\n1. Item_Weight: will replace missing values with mean\n2. Outlet_Size: will replace missing values with mode"}}