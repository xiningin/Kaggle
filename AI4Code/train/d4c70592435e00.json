{"cell_type":{"7e089d0e":"code","6e9fafe0":"code","0eb851a8":"code","195410f1":"code","cb6b2e7a":"code","c5de754d":"code","396052a4":"code","edc7be5a":"code","15e599b7":"code","96b68167":"markdown","2bf3504e":"markdown","b7ce6e81":"markdown","48114a59":"markdown","8215218b":"markdown","aee62c1f":"markdown","6186a0ed":"markdown"},"source":{"7e089d0e":"import pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf.head()","6e9fafe0":"print ('Number of Rows :', df.shape[0])\nprint ('Number of Columns :', df.shape[1])\nprint ('Number of Patients with outcome 1 :', df.Outcome.sum())\nprint ('Event Rate :', round(df.Outcome.mean()*100,2) ,'%')","0eb851a8":"df.describe()","195410f1":"from sklearn.preprocessing import normalize\n\nX = df.to_numpy()[:,0:8] \nY = df.to_numpy()[:,8]\n\nX_norm = normalize(X)","cb6b2e7a":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.wrappers.scikit_learn import KerasClassifier\n\nSEED = 42\nnp.random.seed(SEED)\n\ndef create_model(optimizer = 'adam'):\n    \n    model = Sequential()\n    model.add(Dense(12, activation = 'relu', input_dim=(8)))\n    model.add(Dense( 8, activation = 'relu'))\n    model.add(Dense( 1, activation = 'sigmoid'))\n    \n    model.compile(loss = 'binary_crossentropy', optimizer= optimizer, metrics = ['accuracy'])\n    \n    return model\n\nmodel = KerasClassifier(build_fn = create_model, epochs = 150, batch_size = 8, verbose = 0)","c5de754d":"from sklearn.model_selection import StratifiedKFold, cross_val_score\nkfold = StratifiedKFold(n_splits = 8, shuffle = True, random_state = SEED)\n\n%time results = cross_val_score(model, X_norm, Y, cv=kfold)\nprint ('Accuracy',round(results.mean()*100,2), '%')","396052a4":"param_grid = {\n    'optimizer'  : ['rmsprop','adam','sgd'],\n    'epochs'     : [100, 150, 200],\n    'batch_size' : [8, 16, 32],\n}","edc7be5a":"%%time \nfrom sklearn.model_selection import GridSearchCV\n\nmodel = KerasClassifier(build_fn = create_model, verbose = 0)\ngrid = GridSearchCV(estimator = model, param_grid = param_grid, cv = 3)\ngrid_result = grid.fit(X_norm, Y)\n\nprint (f'With {grid_result.best_params_} got {round(grid_result.best_score_*100,2)} as best score!!')","15e599b7":"print ('---- GRID SEARCH RESULTS ----')\nfor p,s in zip(grid_result.cv_results_['params'],grid_result.cv_results_['mean_test_score']):\n    print (f' Accuracy : {round(s*100,2)} % | Param : {p}')","96b68167":"## K-Fold\nWe will use `StratifiedKFold` to generate folds and define the number of splits by passing value to `n_splits` argument. We can use 8 folds here since 768\/8 = 96 observations in each fold. The results of the K-Fold can be measured using `cross_val_score`","2bf3504e":"The `GridSearchCV` results are stored in `cv_results_` argument for `grid_result` object, which can be used to visualize all grid search results","b7ce6e81":"## Grid Search\n\nBelow we will define the parameter grid, which will contain the values of paramters like `optimizer`, `epochs` etc. on which we will tune our model. We will use sklearn's `GridSearchCV` and pass on `model`, `param_grid` and `kfold` folds as arguments. Each parameter will be evaluated on 3 stratified cross-validation. This step is computationally intensive, a total of 81 models derived out of 3 x 3 x 3 (params) x 3 (folds) are being built here. ","48114a59":"## Preprocess\nDeep learning models scale well with normalized variables, so let's go ahead and `normalize` variables using `sklearn.preprocessing` module","8215218b":"## Load and Describe\nWe'll use `pandas` to load the dataset and identify some basic stats about the dataset like,\n* the shape of dataset we are dealing with using `df.shape`\n* the event rate = ones\/(ones + zeros)\n* the distribution of variables using `df.describe`","aee62c1f":"## Define model\n\nThe Keras library provides `KerasClassifier` wrapper for deep learning models to be used as classification in scikit-learn. This wrapper class in Keras take an argument `build_fn` which takes the function used to define the model as the value. Below we will define a `Sequential` model inside the function `create_model`\n","6186a0ed":"# Sklearn based Grid Search for NN models built using Keras and TensorFlow\n\n`sklearn` is one of the most popular libraries for machine learning. In this notebook, we will explore\n1. How to evaluate model performance using K-Fold Validation\n2. How to tune Grid Search model using sklearn `GridsearcCV` function\n\nBefore we go ahead, if you are new with Keras and Tensorflow and want to build from scratch, [this notebook](https:\/\/www.kaggle.com\/sumitkant\/simple-neural-network-with-keras-and-tensorflow) has a step by step breakdown of building a simple Multilayer perceptron model.\n\n**Let's K-Fold and Gridsearch...**"}}