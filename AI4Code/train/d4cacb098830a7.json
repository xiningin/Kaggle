{"cell_type":{"85f1e238":"code","84d3f9e0":"code","4346d23f":"code","7d66be3b":"code","9478dcba":"code","6f4d0f17":"code","ffb2141d":"code","1683e23a":"code","c91877b5":"code","1a8d9719":"code","64300a76":"code","002b993d":"code","bc72da5a":"code","704eb463":"code","95fa1ecd":"code","42a22742":"code","907b473b":"code","902df937":"code","2d1f7baa":"code","132ea78d":"code","f526f48b":"code","e84f8eb1":"code","8e0070b2":"code","d692b11f":"code","df50c46f":"code","32c0d302":"code","73395e7d":"code","98ae01fd":"code","ea3ae346":"code","552dc017":"code","dc278f99":"code","c9c4fb41":"code","fcd32b47":"code","f42f7f48":"code","079bed58":"code","f8f2a229":"code","2293b0ee":"code","2a03cd93":"code","4b054495":"markdown","54f7eb93":"markdown","00c1b945":"markdown","80e82e51":"markdown","594b39ec":"markdown","c3560bae":"markdown","06adf1f8":"markdown","4f5a4248":"markdown","3efa571f":"markdown","9241ba4e":"markdown","5cd72737":"markdown","dc3be094":"markdown","46e20bee":"markdown","b07a640c":"markdown","c49facc4":"markdown","f159e8fb":"markdown","54935bd1":"markdown","fe76fbba":"markdown","cdbd6c92":"markdown"},"source":{"85f1e238":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","84d3f9e0":"data=pd.read_csv('..\/input\/suicide-rates-overview-1985-to-2016\/master.csv')\nforever=pd.read_csv('..\/input\/the-demographic-rforeveralone-dataset\/foreveralone.csv')\ngune=pd.read_csv('..\/input\/gun-deaths-in-the-us\/guns.csv')\n\n\n# I will use 3 different data for practicing.","4346d23f":"gun=gune[gune.intent=='Suicide'] # we are looking for only suicides","7d66be3b":"gun.head()","9478dcba":"data.rename(columns={'suicides\/100k pop':'suicid_ratio',' gdp_for_year ($)':'gdp_for_year','gdp_per_capita ($)':'gdp_per_capita','HDI for year':'HDI_for_year'},inplace=True)","6f4d0f17":"data.info()","ffb2141d":"country_list=list(data['country'].unique()) # for each country\ncon_suicide_ratio = []\n\nfor i in country_list:\n    x = data[data['country']==i]\n    z = sum(x.suicid_ratio)\/len(x) # we summit all the suicide ration and divide it countries numbers For finding mean.\n    con_suicide_ratio.append(z)   # we can use also mean function here\n\ncon_percapita=[]\nfor i in country_list:           # with the same way I want to find each's GDP per capita\n    a= data[data['country']==i]\n    b=sum(a.gdp_per_capita)\/len(a)\n    con_percapita.append(b)\n\n# I need a another DataFrame so I create it.\ndata2 = pd.DataFrame({'country_list': country_list,'con_suicide_ratio':con_suicide_ratio,'Gdp_per_capita':con_percapita})\nnew_index = (data2['con_suicide_ratio'].sort_values(ascending=False)).index.values\nsorted_data = data2.reindex(new_index)","1683e23a":"data2.head()","c91877b5":"plt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['country_list'], y=sorted_data['con_suicide_ratio'])\nplt.xticks(rotation= 90)\nplt.xlabel('Countries')\nplt.ylabel('Suicide Rate')\nplt.title('Suicide Rate of Countries')\n","1a8d9719":"data.info()","64300a76":"country_list=list(data['country'].unique())\ncon_sui_75_over_ratio = []\n\nfor i in country_list:\n    over = data[(data['country']== i)&(data.age == '75+ years')]  # over 75 years old people who suicide\n    senieur=sum(over.suicid_ratio)\/len(over)\n    con_sui_75_over_ratio.append(senieur)\n\ndata2 = pd.DataFrame({'country_list': country_list,'con_suicide_ratio':con_suicide_ratio,'Gdp_per_capita':con_percapita,'over_75_suicide':con_sui_75_over_ratio})    \ndata2.head()","002b993d":"country_list=list(data['country'].unique())\nfemalelist=[]\nmalelist=[]\nfor i in country_list:\n    femel=data[(data['country']== i)&(data.sex=='female')]  # sex= female\n    mal=data[(data['country']== i)&(data.sex=='male')]      #sex=male\n    women=femel.suicid_ratio.mean()\n    femalelist.append(women)\n    men=mal.suicid_ratio.mean()\n    malelist.append(men)\n    \n    \ndata2['male_ratio']=malelist\ndata2['female_ratio']=femalelist","bc72da5a":"forever.head()","704eb463":"forever['bodyweight'].unique()\nforever.loc[forever['bodyweight'] == 'Normal weight'] = 'Normal'\nforever['bodyweight'].unique()","95fa1ecd":"weig_count= Counter(forever.bodyweight)   # now I will look the other data.\nmweig_count=weig_count.most_common(4)     #we count the bodyweight item so we will make a grafic for visuliasition.\nx,y = zip(*mweig_count)\nx,y = list(x),list(y)\nplt.figure(figsize=(15,10))\nax= sns.barplot(x=x, y=y,palette = sns.cubehelix_palette(len(x)))\nplt.xlabel('Bodyweights type')\nplt.ylabel('Frequency')\nplt.title('Bodyweights&suicide attempts')","42a22742":"forever.head()","907b473b":"emp_count= Counter(forever.employment)\nmost_comun_emp= emp_count.most_common(5)\nmost_comun_emp\nx,y = zip(*most_comun_emp)\nx,y = list(x),list(y)\nplt.figure(figsize=(15,10))\nax= sns.barplot(x=x, y=y,palette = sns.cubehelix_palette(len(x)))\nplt.xlabel('Employes')\nplt.ylabel('Frequency')\nplt.title('Most common 5 employes who suicide')","902df937":"data3=data2.head(5)","2d1f7baa":"plt.figure(figsize=(15,10))\nsns.lmplot(x=\"con_suicide_ratio\", y=\"Gdp_per_capita\", col=\"male_ratio\", hue=\"female_ratio\", data=data3,\n           col_wrap=2, ci=None, palette=\"muted\", height=4,\n           scatter_kws={\"s\": 50, \"alpha\": 1})","132ea78d":"data3","f526f48b":"# Set up the matplotlib figure\nf, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(7, 5), sharex=True)\n\n# Generate some sequential data\n\nsns.barplot(x=\"country_list\", y=\"con_suicide_ratio\", palette=\"rocket\",data=data3, ax=ax1)\nax1.axhline(0, color=\"k\", clip_on=False)\nax1.set_ylabel(\"con_suicide_ratio\")\n\n# Center the data to make it diverging\n\nsns.barplot(x=\"country_list\", y=\"over_75_suicide\", palette=\"vlag\",data=data3, ax=ax2)\nax2.axhline(0, color=\"k\", clip_on=False)\nax2.set_ylabel(\"over_75_suicide\")\n\n# Randomly reorder the data to make it qualitative\n\nsns.barplot(x=\"country_list\", y=\"female_ratio\", palette=\"deep\",data=data3, ax=ax3)\nax3.axhline(0, color=\"k\", clip_on=False)\nax3.set_ylabel(\"female_ratio\")\n\n# Finalize the plot\nsns.despine(bottom=True)\nplt.setp(f.axes, yticks=[])\nplt.tight_layout(h_pad=2)","e84f8eb1":"data2.head()","8e0070b2":"f, ax = plt.subplots(figsize=(6.5, 6.5))\nsns.despine(f, left=True, bottom=True)\nsns.scatterplot(data2.male_ratio, data2.female_ratio,\n                hue=\"Gdp_per_capita\", size=\"con_suicide_ratio\",\n                palette=\"ch:r=-.2,d=.3_r\",\n                sizes=(1, 8), linewidth=0,\n                data=data2, ax=ax)","d692b11f":"data2.head()","df50c46f":"sns.set(style=\"white\", palette=\"muted\", color_codes=True)\nf, axes = plt.subplots(2, 2, figsize=(7, 7), sharex=True)\nsns.despine(left=True)\nsns.distplot(data2.con_suicide_ratio, kde=False, color=\"b\", ax=axes[0, 0])\nsns.distplot(data2.over_75_suicide, hist=False, rug=True, color=\"r\", ax=axes[0, 1])\nsns.distplot(data2.male_ratio, hist=False, color=\"g\", kde_kws={\"shade\": True}, ax=axes[1, 0])\nsns.distplot(data2.female_ratio, color=\"m\", ax=axes[1, 1])\n\nplt.setp(axes, yticks=[])\nplt.tight_layout()\n","32c0d302":"data3","73395e7d":"\ng = sns.catplot(x=\"country_list\", y=\"con_suicide_ratio\", data=data2,\n                height=15, kind=\"bar\", palette=\"muted\")\ng.despine(left=False)\ng.set_ylabels(\"suicide ratio\")\ng.set_xticklabels(rotation=90)","98ae01fd":"data3","ea3ae346":"\n# Draw a heatmap with the numeric values in each cell\nf, ax = plt.subplots(figsize=(15, 9))\nsns.heatmap(data2.corr(), annot=True, linewidths=.5, ax=ax)","552dc017":"sns.jointplot(data2.male_ratio, data2.female_ratio,data= data2, kind=\"hex\", color=\"#4CB391\")","dc278f99":"data2.head()","c9c4fb41":"g = sns.lmplot(x=\"con_suicide_ratio\", y=\"over_75_suicide\", hue=\"country_list\",\n               truncate=True, height=10, data=data2)\n\n# Use more informative axis labels than are provided by default\ng.set_axis_labels(\"con_suicide_ratio\", \"over_75_suicide\")","fcd32b47":"sns.set(style=\"ticks\")\n\nsns.pairplot(data2, hue=\"country_list\")","f42f7f48":"cmap = sns.cubehelix_palette(rot=-.2, as_cmap=True)\nax = sns.scatterplot(x=\"Gdp_per_capita\", y=\"con_suicide_ratio\",\n                     hue=\"male_ratio\", \n                     palette=cmap, sizes=(10, 200),\n                     data=data2)","079bed58":"data2.head()\n","f8f2a229":"\nsns.set(style=\"darkgrid\")\n\ng = sns.jointplot(\"male_ratio\", \"female_ratio\", data=data2, kind=\"reg\",\n                   color=\"m\", height=7)","2293b0ee":"gun.head()","2a03cd93":"f, ax = plt.subplots()\nsns.despine(bottom=True, left=True)\n\n# Show each observation with a scatterplot\nsns.stripplot(x=\"month\", y=\"place\", hue=\"sex\",\n              data=gun, dodge=True, jitter=True,\n              alpha=.25, zorder=1)\n\n# Show the conditional means\nsns.pointplot(x=\"month\", y=\"place\", hue=\"sex\",\n              data=gun, dodge=.532, join=False, palette=\"dark\",\n              markers=\"d\", scale=.75, ci=None)\n\n# Improve the legend \nhandles, labels = ax.get_legend_handles_labels()\nax.legend( title=\"place\",\n          handletextpad=0, columnspacing=1,\n          loc=\"lower right\", ncol=3, frameon=True)","4b054495":"<a id=\"9\"><\/a> \n## Implot","54f7eb93":"<a id=\"11\"><\/a> \n## Scatter Plot","00c1b945":"# INTRODUCTION\n1. Read datas\n1. Suicide rate of each Country    \n1. GDP per Capita of each country\n1. Over 75 years old's Suicide ratio\n1. Male and Female Suicide ratio \n1. Bodyweights&suicide attempts (forever csv)\n1. Most common 5 employes who suicide (forever csv)\n\n<br>\n<br>\nPlot Contents:\n* [Bar Plot](#1)\n* [ImPlot](#2)\n* [Bar Plot](#3)\n* [Scatter Chart](#4)\n* [Dist Plot](#5)\n* [Cat Plot](#6)\n* [Heatmap](#7)\n* [Joint Plot](#8)\n* [ImPlot](#9)\n* [Pair Plot](#10)\n* [Scatter Plot](#11)\n* [Joint Plot](#12)\n* [Strip Plot](#13)\n    \n\n","80e82e51":"<a id=\"12\"><\/a> \n## Joint Plot","594b39ec":"<a id=\"8\"><\/a> \n## Joint Plot (hex)","c3560bae":"**LET S PRACT\u0130CE THE OTHER SEABORN GALLER\u0130ES :)**","06adf1f8":"Now we can easily look every country suicide ratio.","4f5a4248":"If you see anything is wrong please tell me .\n\n\n**\nTo be continued :)**\n","3efa571f":"<a id=\"13\"><\/a> \n## Strip Plot","9241ba4e":"<a id=\"7\"><\/a> \n## Heat Map","5cd72737":"<a id=\"4\"><\/a> \n## Scatter Plot","dc3be094":"<a id=\"10\"><\/a> \n## Pair Plot","46e20bee":"<a id=\"1\"><\/a> \n## Bar Plot","b07a640c":"<a id=\"2\"><\/a> \n## Implot","c49facc4":"<a id=\"6\"><\/a> \n## Cat Plot","f159e8fb":"<a id=\"3\"><\/a> \n## Bar Plot","54935bd1":"<a id=\"5\"><\/a> \n## Dist Plot","fe76fbba":"* **Fist to start up I would like to thank you [DATAI Team ](http:\/\/https:\/\/www.kaggle.com\/kanncaa1)for their works and courses.This Kernel is based on their [Seaborn kernel for beginners](http:\/\/https:\/\/www.kaggle.com\/kanncaa1\/seaborn-tutorial-for-beginners\/notebook)**\n\n\n> **I will use the[ seaborn gallery](http:\/\/https:\/\/seaborn.pydata.org\/examples\/index.html) for Visualization.**","cdbd6c92":"Sometimes there are spaces in the columns' names and if you want to use it it returns error so I would like to change them."}}