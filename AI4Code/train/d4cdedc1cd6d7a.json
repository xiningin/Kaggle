{"cell_type":{"ab099dbd":"code","768e56e7":"code","240b1e3e":"code","49fc982b":"code","7ffa79ec":"code","2c5d12ab":"code","566e067b":"code","9d2fc8fa":"code","79637c3f":"code","fc85fe15":"code","33650cbf":"code","6a358126":"code","ba519997":"code","070ed8a2":"code","d2a92122":"code","efd52f7e":"code","f09f5188":"code","d724820f":"code","7d4de7ef":"code","de80a0d5":"code","91fc8c47":"code","71b9f776":"code","7d1d5419":"markdown","5523a8d9":"markdown"},"source":{"ab099dbd":"# Loading Important Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom datetime import date, timedelta, datetime","768e56e7":"# Function to Load India Data \ndef load_country_data():\n    df = pd.read_csv(\"..\/input\/covid19-in-india\/covid_19_india.csv\")\n    return df","240b1e3e":"# Load Data\ndf = load_country_data()\ndf.head()\ndf[df[\"State\/UnionTerritory\"]==\"Telengana\"][-12:]","49fc982b":"# Listing all the states\ndf11 = df[\"State\/UnionTerritory\"].unique()\nprint(type(df11))\ndf11=df11[:-2]\nprint(df11)\nprint(len(df11))","7ffa79ec":"def split_state(name):\n    s = df[(df[\"State\/UnionTerritory\"] == name)]\n    return s.iloc[-45:]\ndfS = {}\nfor x in df11:\n    dfS[x] = split_state(x)\n    \ndef split_state(name):\n    s = df[(df[\"State\/UnionTerritory\"] == name)]\n    return s\ndfSS = {}\nfor x in df11:\n    dfSS[x] = split_state(x)\n# print(dfSS)","2c5d12ab":"#Growth rate calculation \nimport math\ndef growth_fac(a):\n    ev = a[0][-1]\n    bv = a[0][0]\n    if ev-bv == 0 or ev == 0 or bv ==0:\n        return 0\n    e = math.log(ev\/bv)\n    gf = (e\/len(a[0]))\n    print(gf, len(a[0]))\n    return gf*100\na=[[762, 803, 814, 848, 905, 968, 1000, 1046, 1102, 1175, 1236, 1326, 1415, 1511, 1568, 1661, 1749, 1809, 1888, 1943, 2008, 2110, 2152, 2152, 2306, 2439, 2640, 2841, 3048, 3174, 3341, 3452, 3559, 3708, 3820, 3963, 4095, 4257, 4438, 4634, 4862, 4995, 5199, 5371, 5616]]\ngrowth_fac(a)","566e067b":"dfSS['Kerala']","9d2fc8fa":"def split(state, s1, e1, c):\n    try:\n        print(state,s1,e1)\n        x = dfSS[state]\n        sd = x[x[\"Date\"]==s1][\"Sno\"].tolist()\n        sd1 = int(sd[0])\n        ed = x[x[\"Date\"]==e1][\"Sno\"].tolist()\n        ed1 = int(ed[0])\n        cu=[];de=[];co=[]\n        for i in range(sd1, ed1):\n            if not (x[x[\"Sno\"]==float(i)]).empty: \n                a= x[x[\"Sno\"]==float(i)].values.tolist()\n                cu.append(a[0][-3])\n                de.append(a[0][-2])\n                co.append(a[0][-1])\n        cu_gf = growth_fac([cu]);de_gf = growth_fac([de]);co_gf = growth_fac([co])\n    except:\n        c+=1\n        print(\"Exception\", c)\n        return 0,0,0,c        \n    return cu_gf, de_gf, co_gf, c\n\nCUGF0={};DEGF0={};CONGF0={};count=0\nCUGF1={};DEGF1={};CONGF1={};\nCUGF2={};DEGF2={};CONGF2={};\nCUGF3={};DEGF3={};CONGF3={};\nCUGF4={};DEGF4={};CONGF4={};\nCUGF5={};DEGF5={};CONGF5={};\nphase0={};phase1={};phase2={};phase3={};phase4={};phase5={};\nfor i in df11:\n    # Phases dates data in form of 2 seperate list \n    # sd -> Start Date; ed -> End Date\n    sd=[\"23\/03\/20\",\"15\/04\/20\",\"04\/05\/20\",\"18\/05\/20\",\"01\/06\/20\",\"01\/07\/20\"]\n    ed=[\"14\/04\/20\",\"03\/05\/20\",\"17\/05\/20\",\"31\/05\/20\",\"30\/06\/20\",\"24\/07\/20\"]\n    # Storing the data according to the phases\n    for j in range(len(sd)):\n        k=i\n        if j==0:\n            CUGF0[k], DEGF0[k], CONGF0[k], exceptionCount = split(i,sd[j],ed[j],count)\n        if j==1:\n            CUGF1[k], DEGF1[k], CONGF1[k], exceptionCount = split(i,sd[j],ed[j],count)\n        if j==2:\n            CUGF2[k], DEGF2[k], CONGF2[k], exceptionCount = split(i,sd[j],ed[j],count)\n        if j==3:\n            CUGF3[k], DEGF3[k], CONGF3[k], exceptionCount = split(i,sd[j],ed[j],count)\n        if j==4:\n            CUGF4[k], DEGF4[k], CONGF4[k], exceptionCount = split(i,sd[j],ed[j],count)\n        if j==5:\n            CUGF5[k], DEGF5[k], CONGF5[k], exceptionCount = split(i,sd[j],ed[j],count)\n","79637c3f":"CGF={};DGF={};ConGF={}\nfor i in dfS:\n    cured=[];deaths=[];confirmed=[]\n    x=dfS[i][\"State\/UnionTerritory\"].iloc[0]\n    cured.append(dfS[i][\"Cured\"].values.tolist())\n    deaths.append(dfS[i][\"Deaths\"].values.tolist())\n    confirmed.append(dfS[i][\"Confirmed\"].values.tolist())\n    \n    CGF[x] = growth_fac(cured);DGF[x] = growth_fac(deaths);ConGF[x] = growth_fac(confirmed)\n#     print(len(CGF),len(ConGF))\n#     print(CGF,DGF,ConGF); print();print()\nprint(CGF)\nprint();print()\nprint(DGF)\nprint();print()\nprint(ConGF)","fc85fe15":"print(\"Cured Growth Rates in States During Various Phases: \\n\")\nfor key, value in CUGF0.items():\n    print(key, ' : ', value)\nprint(\"\\n---------------------------END-----------------------------------\\n\")\nprint(\"Death Growth Rates in States During Various Phases: \\n\")\nfor key, value in DEGF0.items():\n    print(key, ' : ', value)\nprint(\"\\n---------------------------END-----------------------------------\\n\")\nprint(\"Confirmed Growth Rates in States During Various Phases: \\n\")\nfor key, value in CONGF0.items():\n    print(key, ' : ', value)\nprint(\"\\n---------------------------END-----------------------------------\\n\")\nprint(len(CUGF0))\nprint(\"exceptionCount:\",exceptionCount)","33650cbf":"print(\"Recent Cured Growth Rates in the states:\\n\")\nfor key, value in CGF.items():\n    print(key, ' : ', value)\nprint(\"\\n---------------------------END-----------------------------------\\n\")\n\nprint(\"Recent Death Growth Rates in the states:\\n\")\nfor key, value in DGF.items():\n    print(key, ' : ', value)\nprint(\"\\n---------------------------END-----------------------------------\\n\")\n\nprint(\"Recent Confirmed Growth Rates in the states:\\n\")\nfor key, value in ConGF.items():\n    print(key, ' : ', value)\nprint(\"\\n---------------------------END-----------------------------------\\n\")\n","6a358126":"# CGF,DGF,ConGF - Recent Trends\n# CUGF, DEGF, CONGF - Phase Trends\n# Correlations as measure of relation\ncured = pd.DataFrame(columns=[\"state\",\"cured\"])\nfor key, value in CGF.items():\n    cured = cured.append({\"state\": key, \"cured\":value},ignore_index=True)\n#     print(key, ' : ', value)\nprint(cured.head())\nphase1Cured = pd.DataFrame(columns=[\"state\",\"cured\"])\nfor key, value in CUGF0.items():\n    phase1Cured = phase1Cured.append({\"state\": key, \"cured\":value},ignore_index=True)\nprint(phase1Cured.head())\ncured.corrwith(phase1Cured, axis = 0)\n# print(CGF[\"Kerala\"])\n# correlation = df13.corr()\n","ba519997":"# Data Preparation\ncured = pd.DataFrame(CGF,index=[0])\ndeath = pd.DataFrame(DGF,index=[0])\nconfirmed = pd.DataFrame(ConGF,index=[0])\nprint(death)\ndf2 = cured.append(death)\ndf2 = df2.append(confirmed)\nprint(df2)\n\ncured0 = pd.DataFrame(CUGF0,index=[0])\ndeath0 = pd.DataFrame(DEGF0,index=[0])\nconfirmed0 = pd.DataFrame(CONGF0,index=[0])\ndfp0 = cured0.append(death0)\ndfp0 = dfp0.append(confirmed0)\nprint(dfp0)\n\n\ncured1 = pd.DataFrame(CUGF1,index=[0])\ndeath1 = pd.DataFrame(DEGF1,index=[0])\nconfirmed1 = pd.DataFrame(CONGF1,index=[0])\ndfp1 = cured1.append(death1)\ndfp1 = dfp1.append(confirmed1)\nprint(dfp1)\n\n\ncured2 = pd.DataFrame(CUGF2,index=[0])\ndeath2 = pd.DataFrame(DEGF2,index=[0])\nconfirmed2 = pd.DataFrame(CONGF2,index=[0])\ndfp2 = cured2.append(death2)\ndfp2 = dfp2.append(confirmed2)\nprint(dfp2)\n\n\ncured3 = pd.DataFrame(CUGF3,index=[0])\ndeath3 = pd.DataFrame(DEGF3,index=[0])\nconfirmed3 = pd.DataFrame(CONGF3,index=[0])\ndfp3 = cured3.append(death3)\ndfp3 = dfp3.append(confirmed3)\nprint(dfp3)\n\n\ncured4 = pd.DataFrame(CUGF4,index=[0])\ndeath4 = pd.DataFrame(DEGF4,index=[0])\nconfirmed4 = pd.DataFrame(CONGF4,index=[0])\ndfp4 = cured4.append(death4)\ndfp4 = dfp4.append(confirmed4)\nprint(dfp4)\n\n\ncured5 = pd.DataFrame(CUGF5,index=[0])\ndeath5 = pd.DataFrame(DEGF5,index=[0])\nconfirmed5 = pd.DataFrame(CONGF5,index=[0])\ndfp5 = cured5.append(death5)\ndfp5 = dfp5.append(confirmed5)\nprint(dfp5)\n\n\n# for key, value in CGF.items():\n#     cured = cured.append({\"state\": key, \"cured\":value},ignore_index=True)\n","070ed8a2":"# Correlation calculations\ncorr0 = df2.corrwith(dfp0, axis = 0)\ncorr1 = df2.corrwith(dfp1, axis = 0)\ncorr2 = df2.corrwith(dfp2, axis = 0)\ncorr3 = df2.corrwith(dfp3, axis = 0)\ncorr4 = df2.corrwith(dfp4, axis = 0)\ncorr5 = df2.corrwith(dfp5, axis = 0)\n# print(corr0,corr1,corr2,corr3,corr4,corr5)\ndfCorr0 = corr0.reset_index()\ndfCorr1 = corr1.reset_index()\ndfCorr2 = corr2.reset_index()\ndfCorr3 = corr3.reset_index()\ndfCorr4 = corr4.reset_index()\ndfCorr5 = corr5.reset_index()\n\ndfCorr0 = dfCorr0.rename(columns={'index': 'States', 0: 'Phase1'})\ndfCorr1 = dfCorr1.rename(columns={'index': 'States', 0: 'Phase2'})\ndfCorr2 = dfCorr2.rename(columns={'index': 'States', 0: 'Phase3'})\ndfCorr3 = dfCorr3.rename(columns={'index': 'States', 0: 'Phase4'})\ndfCorr4 = dfCorr4.rename(columns={'index': 'States', 0: 'Phase5'})\ndfCorr5 = dfCorr5.rename(columns={'index': 'States', 0: 'Phase6'})\nprint(dfCorr0.head())\nprint(dfCorr1.head())\nprint(dfCorr2.head())\nprint(dfCorr3.head())\nprint(dfCorr4.head())\nprint(dfCorr5.head())\n\n# print(dfCorr0.info)\n\n# print(dfCorr0)\n# print(type(dfCorr1))\n# print(type(corr0))","d2a92122":"# Final Correlation Analysis Results\ndf21 = pd.merge(dfCorr0,dfCorr1,on=\"States\")\ndf21 = pd.merge(df21,dfCorr2,on=\"States\")\ndf21 = pd.merge(df21,dfCorr3,on=\"States\")\ndf21 = pd.merge(df21,dfCorr4,on=\"States\")\ndf21 = pd.merge(df21,dfCorr5,on=\"States\")\ndf21","efd52f7e":"df22 = df21.set_index(\"States\")\nm = df22.idxmax(axis=1, skipna=True)\nm\nn = df22.max(axis=1)\nn","f09f5188":"# Minimum growth usuage and 0 calculation\np1 = pd.DataFrame(CUGF0,index=[0])\np2 = pd.DataFrame(CUGF1,index=[0])\np3 = pd.DataFrame(CUGF2,index=[0])\np4 = pd.DataFrame(CUGF3,index=[0])\np5 = pd.DataFrame(CUGF4,index=[0])\np6 = pd.DataFrame(CUGF5,index=[0])\ndfppCGF = p1.append(p2)\ndfppCGF = dfppCGF.append(p3)\ndfppCGF = dfppCGF.append(p4)\ndfppCGF = dfppCGF.append(p5)\ndfppCGF = dfppCGF.append(p6)\nprint(dfppCGF)\n","d724820f":"p1 = pd.DataFrame(DEGF0,index=[0])\np2 = pd.DataFrame(DEGF1,index=[0])\np3 = pd.DataFrame(DEGF2,index=[0])\np4 = pd.DataFrame(DEGF3,index=[0])\np5 = pd.DataFrame(DEGF4,index=[0])\np6 = pd.DataFrame(DEGF5,index=[0])\ndfppDGF = p1.append(p2)\ndfppDGF = dfppDGF.append(p3)\ndfppDGF = dfppDGF.append(p4)\ndfppDGF = dfppDGF.append(p5)\ndfppDGF = dfppDGF.append(p6)\nprint(dfppDGF)\n\np1 = pd.DataFrame(CONGF0,index=[0])\np2 = pd.DataFrame(CONGF1,index=[0])\np3 = pd.DataFrame(CONGF2,index=[0])\np4 = pd.DataFrame(CONGF3,index=[0])\np5 = pd.DataFrame(CONGF4,index=[0])\np6 = pd.DataFrame(CONGF5,index=[0])\ndfppCONGF = p1.append(p2)\ndfppCONGF = dfppCONGF.append(p3)\ndfppCONGF = dfppCONGF.append(p4)\ndfppCONGF = dfppCONGF.append(p5)\ndfppCONGF = dfppCONGF.append(p6)\nprint(dfppCONGF)\n","7d4de7ef":"dd = dfS[23][[\"Date\",\"Cured\"]].copy()\ndd[\"dif\"] = dd.Cured.diff()\ndd1 = dd.set_index(\"Date\")\ndd1\nplot_df(dd1, x=dd1.index, y=dd1[\"dif\"], title='Past Cured trend analysis.')    ","de80a0d5":"# Draw Plot\ndef plot_df(df, x, y, title=\"\", xlabel='Date', ylabel='Value', dpi=100):\n    plt.figure(figsize=(16,5), dpi=dpi)\n    plt.plot(x, y, color='tab:red')\n    plt.gca().set(title=title, xlabel=xlabel, ylabel=ylabel)\n    plt.show()\nd1 = dfS[0].set_index(\"Date\")\nplot_df(df, x=d1.index, y=d1[\"Cured\"], title='Past Cured trend analysis.')    ","91fc8c47":"d1 = dfS[0].set_index(\"Date\")\nplt.figure(figsize=(40,10))\nplt.xlabel('Dates')\nplt.ylabel('Active')\nplt.plot(d1['Confirmed'])\nplt.grid(True)\nplt.show()","71b9f776":"from matplotlib import pyplot\nfrom pandas.plotting import lag_plot\nd1 = dfS[0].set_index(\"Date\")\nplt.figure(figsize=(40,10))\nplt.xlabel('Dates')\nplt.ylabel('Active')\nlag_plot(d1['Confirmed'])\npyplot.show()","7d1d5419":"**VISUALIZATIONS**","5523a8d9":"**Seasonal Plot Draw it**"}}