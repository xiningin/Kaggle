{"cell_type":{"3a7d8458":"code","0ee69a3c":"code","60e0bc0a":"code","15f6ec58":"code","ec64d2d2":"code","d7a6e168":"code","1a65e549":"code","d4722108":"code","31c69d3e":"code","c06bbdc0":"code","7cefb0b4":"code","a9ec9ef0":"code","a5d2b4b8":"code","21ad3aa3":"code","3ec901d0":"code","1d093f10":"code","a95de237":"code","149cdb1a":"code","a39aedd1":"code","42e2dd0e":"code","a58add56":"code","d3b2dbf5":"code","627f0039":"code","ed9f9ed5":"code","df859cea":"code","43488840":"code","fbe58664":"markdown","81b7294d":"markdown","95a5dfe2":"markdown","0451a3b3":"markdown","6dac0854":"markdown","1f8d4cad":"markdown","f8af8352":"markdown","2209f4df":"markdown","024ffba1":"markdown","f6b80191":"markdown","7ee44d98":"markdown","134c5c98":"markdown","f2f3ad30":"markdown","b1dd6bd4":"markdown","758d4317":"markdown","0669bad4":"markdown","7d0e6db8":"markdown","449683fc":"markdown","82dce8fe":"markdown","c50b6823":"markdown","3005ee92":"markdown"},"source":{"3a7d8458":"COMPUTE_CV = False #\u306a\u304b\u306a\u304b\u3059\u3054\u3044\u3067\u3059\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3088\u3063\u3066\u3042\u308b\u7a0b\u5ea6\u3001\u8907\u6570\u306e\u8ab2\u984c\u306b\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\nEDA_DEMO = False\nALL_BLENDED = False\nBASELINE_HELPING = False\nMATCH_ONLY = False\nMLM_ONLY = False\nKEN_MATCHING = False\nBS_CLEANING = False\nTHEO_MERGE = False\nSEED = 134 #\u7e01\u8d77\u304c\u60aa\u3044\u6570\u5b57\u3060\u3063\u305f\u306e\u3067\u5909\u3048\u3066\u307f\u308b","0ee69a3c":"!pip install datasets --no-index --find-links=file:\/\/\/kaggle\/input\/coleridge-packages\/packages\/datasets\n!pip install ..\/input\/coleridge-packages\/seqeval-1.2.2-py3-none-any.whl\n!pip install ..\/input\/coleridge-packages\/tokenizers-0.10.1-cp37-cp37m-manylinux1_x86_64.whl\n!pip install ..\/input\/coleridge-packages\/transformers-4.5.0.dev0-py3-none-any.whl\n\nfrom IPython.display import clear_output\nclear_output()","60e0bc0a":"import os\nimport re\nimport json\nimport time\nimport random\nimport glob\nimport importlib\n\nimport numpy as np\nimport pandas as pd\n\nfrom tqdm.autonotebook import tqdm\n\nimport torch\nfrom datasets import load_dataset\nfrom transformers import AutoTokenizer, DataCollatorForLanguageModeling, \\\nAutoModelForMaskedLM, Trainer, TrainingArguments, pipeline\n\nfrom typing import List\nimport string\nfrom functools import partial\nimport warnings\nwarnings.filterwarnings(\"ignore\", 'This pattern has match groups')\n\nrandom.seed(SEED)\nnp.random.seed(SEED)\ntorch.manual_seed(SEED)\ntorch.backends.cudnn.deterministic = True\ntorch.backends.cudnn.benchmark = False\n\nsample_submission = pd.read_csv('..\/input\/coleridgeinitiative-show-us-the-data\/sample_submission.csv')\nif len(sample_submission) > 4: COMPUTE_CV = False\nif COMPUTE_CV: \n    print('this submission notebook will compute CV score but commit notebook will not')\nelse:\n    print('this submission notebook will only be used to submit result')","15f6ec58":"train_path = '..\/input\/coleridgeinitiative-show-us-the-data\/train.csv'\ntrain_files_path = '..\/input\/coleridgeinitiative-show-us-the-data\/train'\ntrain = pd.read_csv(train_path)\n\nif COMPUTE_CV: \n    sample_submission = train\n    paper_test_folder = '..\/input\/coleridgeinitiative-show-us-the-data\/train'\n    test_files_path = paper_test_folder\nelse:\n    sample_submission = pd.read_csv('..\/input\/coleridgeinitiative-show-us-the-data\/sample_submission.csv')\n    paper_test_folder = '..\/input\/coleridgeinitiative-show-us-the-data\/test'\n    test_files_path = paper_test_folder\n    \nadnl_govt_labels_path = '..\/input\/bigger-govt-dataset-list\/data_set_26897.csv'","ec64d2d2":"papers = {}\nfor paper_id in tqdm(sample_submission['Id']):\n    with open(f'{paper_test_folder}\/{paper_id}.json', 'r') as f:\n        paper = json.load(f)\n        papers[paper_id] = paper","d7a6e168":"if EDA_DEMO:\n    df_input = pd.DataFrame(columns=['id','section_title','text','data_label'])\n    for id in tqdm(train['Id'].values):\n        df=pd.read_json('..\/input\/coleridgeinitiative-show-us-the-data\/train\/{}.json'.format(id))    \n        for data_label in train[train['Id']==id]['dataset_label'].values:        \n            new_df=df[df['text'].str.contains(data_label)].copy(deep=True)\n            new_df.loc[:,['data_label']] = data_label\n            new_df.loc[:,['id']] = id\n            new_df.reset_index(inplace=True,drop=True)\n            df_input=pd.concat([df_input, new_df], ignore_index=True)\n            df_input.reset_index(inplace=True,drop=True)\nelse: df_input = None\n\ndf_input","1a65e549":"if EDA_DEMO: df_input = df_input[ df_input['section_title'] != '' ]\n\ndf_input","d4722108":"all_labels = set()\n\nfor label_1, label_2, label_3 in train[['dataset_title', 'dataset_label', 'cleaned_label']].itertuples(index=False):\n    all_labels.add(str(label_1).lower())\n    all_labels.add(str(label_2).lower())\n    all_labels.add(str(label_3).lower())\n    \nprint(f'No. different labels: {len(all_labels)}')","31c69d3e":"adnl_govt_labels = pd.read_csv(adnl_govt_labels_path)\n\nfor l in adnl_govt_labels.title:\n    all_labels.add(l)\n    \nall_labels = set(all_labels)\nprint(f'No. different labels: {len(all_labels)}')","c06bbdc0":"def clean_text(txt):\n    return re.sub('[^A-Za-z0-9]+', ' ', str(txt).lower()).strip()\n\n\ndef totally_clean_text(txt):\n    txt = clean_text(txt)\n    txt = re.sub(' +', ' ', txt)\n    return txt\n\nif not BS_CLEANING:\n    def text_cleaning(text):\n        '''\n        Converts all text to lower case, Removes special charecters, emojis and multiple spaces\n        text - Sentence that needs to be cleaned\n        '''\n        text = re.sub('[^A-Za-z0-9]+', ' ', str(text).lower()).strip()\n        text = re.sub(' +', ' ', text)\n        emoji_pattern = re.compile(\"[\"\n                                   u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                                   u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                                   u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                                   u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                                   \"]+\", flags=re.UNICODE)\n        text = emoji_pattern.sub(r'', text)\n        return text\nelse:\n    def text_cleaning(text):\n        '''\n        Converts all text to lower case, Removes special charecters, emojis and multiple spaces\n        text - Sentence that needs to be cleaned\n        '''\n        text = ''.join([k for k in text if k not in string.punctuation])\n        text = re.sub('[^A-Za-z0-9]+', ' ', str(text).lower()).strip()\n        # text = re.sub(\"\/'+\/g\", ' ', text)\n        return text\n\n\ndef read_json_pub(filename, train_data_path=train_files_path, output='text'):\n    json_path = os.path.join(train_data_path, (filename+'.json'))\n    headings = []\n    contents = []\n    combined = []\n    with open(json_path, 'r') as f:\n        json_decode = json.load(f)\n        for data in json_decode:\n            headings.append(data.get('section_title'))\n            contents.append(data.get('text'))\n            combined.append(data.get('section_title'))\n            combined.append(data.get('text'))\n    \n    all_headings = ' '.join(headings)\n    all_contents = ' '.join(contents)\n    all_data = '. '.join(combined)\n    \n    if output == 'text':\n        return all_contents\n    elif output == 'head':\n        return all_headings\n    else:\n        return all_data","7cefb0b4":"if not KEN_MATCHING and not MLM_ONLY:\n    literal_preds = []\n    for paper_id in tqdm(sample_submission['Id']):\n        paper = papers[paper_id]\n        text_1 = '. '.join(section['text'] for section in paper).lower()\n        text_2 = totally_clean_text(text_1)\n\n        labels = set()\n        for label in all_labels:\n            if label in text_1 or label in text_2:\n                labels.add(clean_text(label))\n\n        literal_preds.append('|'.join(labels))\n    literal_preds[:5]","a9ec9ef0":"literal_preds = []\n\nif KEN_MATCHING and not MLM_ONLY:\n    literal_preds = []\n    to_append = []\n    for index, row in tqdm(sample_submission.iterrows()):\n        to_append = [row['Id'],'']\n        large_string = str(read_json_pub(row['Id'], test_files_path))\n        clean_string = text_cleaning(large_string)\n        for index, row2 in adnl_govt_labels.iterrows():\n            query_string = str(row2['title'])\n            if query_string in clean_string:\n                if to_append[1] != '' and clean_text(query_string) not in to_append[1]:\n                    to_append[1] = to_append[1] + '|' + clean_text(query_string)\n                if to_append[1] == '':\n                    to_append[1] = clean_text(query_string)\n        literal_preds.append(*to_append[1:])\n\nelif MLM_ONLY:\n    print('This kernel will only use MLM model to predict.')","a5d2b4b8":"if not MATCH_ONLY:\n    PRETRAINED_PATH = '..\/input\/coleridge-bert-mlmv4\/output-mlm\/checkpoint-60000'\n    TOKENIZER_PATH = '..\/input\/coleridge-bert-mlmv4\/model_tokenizer'\n\n    MAX_LENGTH = 80\n    OVERLAP = 18\n\n    PREDICT_BATCH = 128 # a higher value requires higher GPU memory usage\n\n    DATASET_SYMBOL = '$' # this symbol represents a dataset name\n    NONDATA_SYMBOL = '#' # this symbol represents a non-dataset name","21ad3aa3":"if not MATCH_ONLY:\n    tokenizer = AutoTokenizer.from_pretrained(TOKENIZER_PATH, use_fast=True)\n    model = AutoModelForMaskedLM.from_pretrained(PRETRAINED_PATH)\n\n    mlm = pipeline(\n        'fill-mask', \n        model=model,\n        tokenizer=tokenizer,\n        device=0 if torch.cuda.is_available() else -1\n    )","3ec901d0":"def jaccard_similarity(s1, s2):\n    l1 = s1.split(\" \")\n    l2 = s2.split(\" \")    \n    intersection = len(list(set(l1).intersection(l2)))\n    union = (len(l1) + len(l2)) - intersection\n    return float(intersection) \/ union\n\ndef clean_paper_sentence(s):\n    \"\"\"\n    This function is essentially clean_text without lowercasing.\n    \"\"\"\n    s = re.sub('[^A-Za-z0-9]+', ' ', str(s)).strip()\n    s = re.sub(' +', ' ', s)\n    return s\n\ndef shorten_sentences(sentences):\n    \"\"\"\n    Sentences that have more than MAX_LENGTH words will be split\n    into multiple sentences with overlappings.\n    \"\"\"\n    short_sentences = []\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > MAX_LENGTH:\n            for p in range(0, len(words), MAX_LENGTH - OVERLAP):\n                short_sentences.append(' '.join(words[p:p+MAX_LENGTH]))\n        else:\n            short_sentences.append(sentence)\n    return short_sentences\n\nconnection_tokens = {'s', 'of', 'and', 'in', 'on', 'for', 'data', 'dataset'}\ndef find_mask_candidates(sentence):\n    \"\"\"\n    Extract masking candidates for Masked Dataset Modeling from a given $sentence.\n    A candidate should be a continuous sequence of at least 2 words, \n    each of these words either has the first letter in uppercase or is one of\n    the connection words ($connection_tokens). Furthermore, the connection \n    tokens are not allowed to appear at the beginning and the end of the\n    sequence.\n    \"\"\"\n    def candidate_qualified(words):\n        while len(words) and words[0].lower() in connection_tokens:\n            words = words[1:]\n        while len(words) and words[-1].lower() in connection_tokens:\n            words = words[:-1]\n        \n        return len(words) >= 2\n    \n    candidates = []\n    \n    phrase_start, phrase_end = -1, -1\n    for id in range(1, len(sentence)):\n        word = sentence[id]\n        if word[0].isupper() or word in connection_tokens:\n            if phrase_start == -1:\n                phrase_start = phrase_end = id\n            else:\n                phrase_end = id\n        else:\n            if phrase_start != -1:\n                if candidate_qualified(sentence[phrase_start:phrase_end+1]):\n                    candidates.append((phrase_start, phrase_end))\n                phrase_start = phrase_end = -1\n    \n    if phrase_start != -1:\n        if candidate_qualified(sentence[phrase_start:phrase_end+1]):\n            candidates.append((phrase_start, phrase_end))\n    \n    return candidates","1d093f10":"if not MATCH_ONLY:\n    mask = mlm.tokenizer.mask_token\n    all_test_data = []\n    \n    for paper_id in tqdm(sample_submission['Id']):\n        # load paper\n        paper = papers[paper_id]\n\n        # extract sentences\n        sentences = set([clean_paper_sentence(sentence) for section in paper \n                         for sentence in section['text'].split('.')\n                        ])\n        sentences = shorten_sentences(sentences) # make sentences short\n        sentences = [sentence for sentence in sentences if len(sentence) > 1] # only accept sentences with length > 1 chars\n        sentences = [sentence for sentence in sentences if any(word in sentence.lower() for word in ['data', 'study'])]\n        sentences = [sentence.split() for sentence in sentences] # sentence = list of words\n\n        # mask\n        test_data = []\n        for sentence in sentences:\n            for phrase_start, phrase_end in find_mask_candidates(sentence):\n                dt_point = sentence[:phrase_start] + [mask] + sentence[phrase_end+1:]\n                test_data.append((' '.join(dt_point), ' '.join(sentence[phrase_start:phrase_end+1]))) # (masked text, phrase)\n\n        all_test_data.append(test_data)","a95de237":"if not MATCH_ONLY:\n    pred_mlm_labels = []\n\n    for test_data in tqdm(all_test_data):\n        pred_bag = set()\n\n        if len(test_data):\n            texts, phrases = list(zip(*test_data))\n            mlm_pred = []\n            for p_id in range(0, len(texts), PREDICT_BATCH):\n                batch_texts = texts[p_id:p_id+PREDICT_BATCH]\n                batch_pred = mlm(list(batch_texts), targets=[f' {DATASET_SYMBOL}', f' {NONDATA_SYMBOL}'])\n\n                if len(batch_texts) == 1:\n                    batch_pred = [batch_pred]\n\n                mlm_pred.extend(batch_pred)\n\n            for (result1, result2), phrase in zip(mlm_pred, phrases):\n                if (result1['score'] > result2['score']*2 and result1['token_str'] == DATASET_SYMBOL) or\\\n                   (result2['score'] > result1['score']*2 and result2['token_str'] == NONDATA_SYMBOL):\n                    pred_bag.add(clean_text(phrase))\n\n        # filter labels by jaccard score \n        filtered_labels = []\n\n        for label in sorted(pred_bag, key=len, reverse=True):\n            if len(filtered_labels) == 0 or all(jaccard_similarity(label, got_label) < 0.75 for got_label in filtered_labels):\n                filtered_labels.append(label)\n\n        pred_mlm_labels.append('|'.join(filtered_labels))\n    \n    pred_mlm_labels[:5]","149cdb1a":"def read_append_return(filename, train_files_path=train_files_path, output='text'):\n    \"\"\"\n    Function to read json file and then return the text data from them and append to the dataframe\n    \"\"\"\n    json_path = os.path.join(train_files_path, (filename+'.json'))\n    headings = []\n    contents = []\n    combined = []\n    with open(json_path, 'r') as f:\n        json_decode = json.load(f)\n        for data in json_decode:\n            headings.append(data.get('section_title'))\n            contents.append(data.get('text'))\n            combined.append(data.get('section_title'))\n            combined.append(data.get('text'))\n    \n    all_headings = ' '.join(headings)\n    all_contents = ' '.join(contents)\n    all_data = '. '.join(combined)\n    \n    if output == 'text':\n        return all_contents\n    elif output == 'head':\n        return all_headings\n    else:\n        return all_data\n    \n    \ndef text_cleaning(text):\n    '''\n    Converts all text to lower case, Removes special charecters, emojis and multiple spaces\n    text - Sentence that needs to be cleaned\n    '''\n    text = ''.join([k for k in text if k not in string.punctuation])\n    text = re.sub('[^A-Za-z0-9]+', ' ', str(text).lower()).strip()\n    # text = re.sub(\"\/'+\/g\", ' ', text)\n    return text","a39aedd1":"if BASELINE_HELPING or ALL_BLENDED:\n    tqdm.pandas()\n\n    train['text'] = train['Id'].progress_apply(read_append_return)\n\n    if not COMPUTE_CV:\n        sample_submission['text'] = sample_submission['Id'].progress_apply(partial(read_append_return, train_files_path=test_files_path))\n\n    train.head()","42e2dd0e":"if BASELINE_HELPING or ALL_BLENDED:\n    tqdm.pandas()\n    \n    train['text'] = train['text'].progress_apply(text_cleaning)","a58add56":"if BASELINE_HELPING or ALL_BLENDED:\n    temp_1 = [x.lower() for x in train['dataset_label'].unique()]\n    temp_2 = [x.lower() for x in train['dataset_title'].unique()]\n    temp_3 = [x.lower() for x in train['cleaned_label'].unique()]\n\n    existing_labels = set(temp_1 + temp_2 + temp_3)\n\n    print(f'len(temp_1) = {len(temp_1)}')\n    print(f'len(temp_2) = {len(temp_2)}')\n    print(f'len(temp_3) = {len(temp_3)}')\n    print(f'len(existing_labels) = {len(existing_labels)}')\n\n    id_list = []\n    lables_list = []\n    for index, row in tqdm(sample_submission.iterrows()):\n        sample_text = row['text']\n        row_id = row['Id']\n        temp_df = train[train['text'] == text_cleaning(sample_text)]\n        cleaned_labels = temp_df['cleaned_label'].to_list()\n\n        for known_label in existing_labels:\n            if known_label in sample_text.lower():\n                cleaned_labels.append(clean_text(known_label))\n\n        cleaned_labels = [clean_text(x) for x in cleaned_labels]\n        cleaned_labels = set(cleaned_labels)\n        lables_list.append('|'.join(cleaned_labels))\n        id_list.append(row_id)","d3b2dbf5":"pred_mlm_labels","627f0039":"final_predictions = []\n\nif ALL_BLENDED:\n    for literal_match, mlm_pred, lables_match in zip(literal_preds, pred_mlm_labels, lables_list):\n        temp = [literal_match, mlm_pred, lables_match]\n        temp = [pred for pred in temp if pred]\n        temp = ('|').join(temp)\n        final_predictions.append(temp)\n        \nelif BASELINE_HELPING:\n    for literal_match, mlm_pred, lables_match in zip(literal_preds, pred_mlm_labels, lables_list):\n        if literal_match:\n            final_predictions.append(literal_match)\n        elif lables_match:\n            final_predictions.append(lables_match)\n        else:\n            final_predictions.append(mlm_pred)\n\nelif MATCH_ONLY:\n    final_predictions = literal_preds\n\nelif MLM_ONLY:\n    final_predictions = pred_mlm_labels\n\nelif THEO_MERGE:\n    for i in range(len(literal_preds)):\n        pred_naive = literal_preds[i].split('|')\n        pred_model = pred_mlm_labels[i].split('|')\n        pred_model_kept = []\n        for pred_m in pred_model:\n            kept = True\n            for pred_n in pred_naive:\n                if pred_m in pred_n or pred_n in pred_m:\n                    kept = False\n            if kept:\n                pred_model_kept.append(pred_m)\n        final_predictions.append(\"|\".join(pred_naive + pred_model_kept))\n\nelse:\n    for literal_match, mlm_pred in zip(literal_preds, pred_mlm_labels):\n        if literal_match:\n            final_predictions.append(literal_match)\n        else:\n            final_predictions.append(mlm_pred)\n\nsample_submission['PredictionString'] = final_predictions","ed9f9ed5":"sample_submission['PredictionString'] = final_predictions\nsample_submission[['Id', 'PredictionString']].to_csv('submission.csv', index=False)\n\nsample_submission.head()","df859cea":"# https:\/\/www.kaggle.com\/c\/coleridgeinitiative-show-us-the-data\/discussion\/230091\ndef compute_fbeta(y_true: List[List[str]],\n                  y_pred: List[List[str]],\n                  beta: float = 0.5) -> float:\n    \"\"\"Compute the Jaccard-based micro FBeta score.\n\n    References\n    ----------\n    - https:\/\/www.kaggle.com\/c\/coleridgeinitiative-show-us-the-data\/overview\/evaluation\n    \"\"\"\n\n    def _jaccard_similarity(str1: str, str2: str) -> float:\n        a = set(str1.split()) \n        b = set(str2.split())\n        c = a.intersection(b)\n        return float(len(c)) \/ (len(a) + len(b) - len(c))\n\n    tp = 0  # true positive\n    fp = 0  # false positive\n    fn = 0  # false negative\n    for ground_truth_list, predicted_string_list in zip(y_true, y_pred):\n        predicted_string_list_sorted = sorted(predicted_string_list)\n        for ground_truth in sorted(ground_truth_list):            \n            if len(predicted_string_list_sorted) == 0:\n                fn += 1\n            else:\n                similarity_scores = [\n                    _jaccard_similarity(ground_truth, predicted_string)\n                    for predicted_string in predicted_string_list_sorted\n                ]\n                matched_idx = np.argmax(similarity_scores)\n                if similarity_scores[matched_idx] >= 0.5:\n                    predicted_string_list_sorted.pop(matched_idx)\n                    tp += 1\n                else:\n                    fn += 1\n        fp += len(predicted_string_list_sorted)\n\n    tp *= (1 + beta ** 2)\n    fn *= beta ** 2\n    fbeta_score = tp \/ (tp + fp + fn)\n    return fbeta_score","43488840":"if COMPUTE_CV:\n    COMPUTE_CV_SCORE = compute_fbeta(sample_submission['cleaned_label'].apply(lambda x: [x]),\\\n                  sample_submission['PredictionString'].apply(lambda x: x.split('|')))\n    print('COMPUTE_CV_SCORE =', COMPUTE_CV_SCORE)\nelse:\n    print(f'COMPUTE_CV = {COMPUTE_CV}')\n    \nprint(f'EDA_DEMO = {EDA_DEMO}')\nprint(f'ALL_BLENDED = {ALL_BLENDED}')\nprint(f'BASELINE_HELPING = {BASELINE_HELPING}')\nprint(f'MATCH_ONLY = {MATCH_ONLY}')\nprint(f'MLM_ONLY = {MLM_ONLY}')\nprint(f'KEN_MATCHING = {KEN_MATCHING}')\nprint(f'BS_CLEANING = {BS_CLEANING}')\nprint(f'THEO_MERGE = {THEO_MERGE}')\nprint(f'SEED = {SEED}')","fbe58664":"# Import","81b7294d":"### Load model and tokenizer","95a5dfe2":"### Auxiliary functions","0451a3b3":"# About\n***The best LB result = 0.575 at [Version 2](https:\/\/www.kaggle.com\/chienhsianghung\/external-datasets-matching-mlmv4?scriptVersionId=64724529).***\n\nTrained a `New MLM` and added on [External_Datasets_Matching + MLM](https:\/\/www.kaggle.com\/chienhsianghung\/external-datasets-matching-mlm).\n\n\n`New MLM`\n- [[Coleridge] BERT - MLMv4](https:\/\/www.kaggle.com\/chienhsianghung\/coleridge-bert-mlmv4)\n","6dac0854":"### Paths and Hyperparameters","1f8d4cad":"## A Bit EDA","f8af8352":"#### Additional Govt Datasets","2209f4df":"# Masked Dataset Modeling","024ffba1":"### Matching on test data","f6b80191":"# Setting","7ee44d98":"# Transform data to MLM format","134c5c98":"# Load data","f2f3ad30":"# Literal Matching","b1dd6bd4":"#### Ken Matching","758d4317":"# Evaluation Metric","0669bad4":"## Aggregate final predictions and write submission file","7d0e6db8":"### Transform","449683fc":"### Predict","82dce8fe":"### Create a Knowledge Bank","c50b6823":"# Baseline Model","3005ee92":"# Install packages"}}