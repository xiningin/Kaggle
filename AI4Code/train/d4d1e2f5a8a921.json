{"cell_type":{"4d17773e":"code","613e32ad":"code","0e181b0a":"code","65ca1343":"code","a68de7b6":"code","1c99d83a":"code","f1e2734f":"code","42012280":"code","5b4d9343":"code","a81b1e27":"code","899cabfa":"code","126f4197":"code","1eaa1e7b":"code","f5bc8cee":"code","c7ac10af":"code","da00f5cc":"code","fdd8a19f":"code","74706f7c":"code","ba3fe680":"code","74bdb668":"code","a9b0dede":"code","dc618785":"code","41aa0e71":"code","dc9a31bc":"code","793cefc5":"code","9abfc72d":"code","e546805d":"code","18848939":"code","d7945f5d":"code","92e88dee":"code","dc25dfd4":"code","9b2a5ff1":"code","161930b2":"code","4a2ee795":"code","6d8bf99a":"code","f6cd42d7":"code","592b2723":"code","e7461256":"code","2abc4c9b":"code","ecaaf32c":"code","db2c15da":"code","635ac978":"code","a9381a07":"code","879d4938":"code","c3c2c1b8":"code","e1bc8151":"markdown","c1ac78c3":"markdown","4977d668":"markdown","796cec90":"markdown","6b7aba6d":"markdown","7afeb6ac":"markdown","86cc240a":"markdown","b8712edb":"markdown","15c3b6a9":"markdown"},"source":{"4d17773e":"%matplotlib inline\n","613e32ad":"!pip install --upgrade xgboost\nimport xgboost as xgb\nxgb.__version__","0e181b0a":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom tqdm import tqdm\nimport gc\nimport matplotlib.pyplot as plt\nimport shap\n\n# load JS visualization code to notebook\nshap.initjs()","65ca1343":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a68de7b6":"train = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/test.csv')\nsub = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')\n","1c99d83a":"columns = test.columns[1:]\ncolumns\n","f1e2734f":"target = train['target'].values","42012280":"cat_features = columns[:10]\ncat_features","5b4d9343":"for feature in cat_features:\n    le = LabelEncoder()\n    le.fit(train[feature])\n    train[feature] = le.transform(train[feature])\n    test[feature] = le.transform(test[feature])","a81b1e27":"train.head()","899cabfa":"test.head()","126f4197":"train_oof = np.zeros((300000,))\ntest_preds = 0\ntrain_oof.shape","1eaa1e7b":"xgb_params= {\n        \"objective\": \"reg:squarederror\",\n        \"max_depth\": 6,\n        \"learning_rate\": 0.01,\n        \"colsample_bytree\": 0.4,\n        \"subsample\": 0.6,\n        \"reg_alpha\" : 6,\n        \"min_child_weight\": 100,\n        \"n_jobs\": 2,\n        \"seed\": 2001,\n        'tree_method': \"gpu_hist\",\n        \"gpu_id\": 0,\n        'predictor': 'gpu_predictor'\n    }","f5bc8cee":"test = xgb.DMatrix(test[columns])","c7ac10af":"NUM_FOLDS = 10\nkf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=0)\n\nfor f, (train_ind, val_ind) in tqdm(enumerate(kf.split(train, target))):\n        #print(f'Fold {f}')\n        train_df, val_df = train.iloc[train_ind][columns], train.iloc[val_ind][columns]\n        train_target, val_target = target[train_ind], target[val_ind]\n        \n        train_df = xgb.DMatrix(train_df, label=train_target)\n        val_df = xgb.DMatrix(val_df, label=val_target)\n        \n        model =  xgb.train(xgb_params, train_df, 3800)\n        temp_oof = model.predict(val_df)\n        temp_test = model.predict(test)\n\n        train_oof[val_ind] = temp_oof\n        test_preds += temp_test\/NUM_FOLDS\n        \n        print(mean_squared_error(temp_oof, val_target, squared=False))","da00f5cc":"0.8434888431362352","fdd8a19f":"mean_squared_error(train_oof, target, squared=False)\n","74706f7c":"np.save('train_oof', train_oof)\nnp.save('test_preds', test_preds)","ba3fe680":"%%time\nshap_preds = model.predict(test, pred_contribs=True)","74bdb668":"train = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/test.csv')\nfor feature in cat_features:\n    le = LabelEncoder()\n    le.fit(train[feature])\n    train[feature] = le.transform(train[feature])\n    test[feature] = le.transform(test[feature])","a9b0dede":"# summarize the effects of all the features\nshap.summary_plot(shap_preds[:,:-1], test[columns])","dc618785":"shap.summary_plot(shap_preds[:,:-1], test[columns], plot_type=\"bar\")\n","41aa0e71":"%%time\nshap_interactions = model.predict(xgb.DMatrix(test[columns]), pred_interactions=True)","dc9a31bc":"def plot_top_k_interactions(feature_names, shap_interactions, k):\n    # Get the mean absolute contribution for each feature interaction\n    aggregate_interactions = np.mean(np.abs(shap_interactions[:, :-1, :-1]), axis=0)\n    interactions = []\n    for i in range(aggregate_interactions.shape[0]):\n        for j in range(aggregate_interactions.shape[1]):\n            if j < i:\n                interactions.append(\n                    (feature_names[i] + \"-\" + feature_names[j], aggregate_interactions[i][j] * 2))\n    # sort by magnitude\n    interactions.sort(key=lambda x: x[1], reverse=True)\n    interaction_features, interaction_values = map(tuple, zip(*interactions))\n    plt.bar(interaction_features[:k], interaction_values[:k])\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    plt.show()\n    \nplot_top_k_interactions(columns, shap_interactions, 10)\n","793cefc5":"np.unique(train['cat1'])","9abfc72d":"np.unique(train['cat2'])","e546805d":"train['cont8_cont0'] = train['cont8']*train['cont0']\ntrain['cont9_cont0'] = train['cont9']*train['cont0']\ntrain['cont9_cont5'] = train['cont9']*train['cont5']\ntrain['cont8_cont5'] = train['cont8']*train['cont5']\n\ntest['cont8_cont0'] = test['cont8']*test['cont0']\ntest['cont9_cont0'] = test['cont9']*test['cont0']\ntest['cont9_cont5'] = test['cont9']*test['cont5']\ntest['cont8_cont5'] = test['cont8']*test['cont5']\n","18848939":"del shap_interactions, shap_preds\ngc.collect()\ngc.collect()","d7945f5d":"columns = test.columns[1:]\ntarget = train['target'].values\ncolumns","92e88dee":"train_oof_2 = np.zeros((300000,))\ntest_preds_2 = 0\ntrain_oof_2.shape","dc25dfd4":"test = xgb.DMatrix(test[columns])","9b2a5ff1":"xgb_params= {\n        \"objective\": \"reg:squarederror\",\n        \"max_depth\": 6,\n        \"learning_rate\": 0.01,\n        \"colsample_bytree\": 0.4,\n        \"subsample\": 0.6,\n        \"reg_alpha\" : 6,\n        \"min_child_weight\": 100,\n        \"n_jobs\": 2,\n        \"seed\": 2001,\n        'tree_method': \"gpu_hist\",\n        \"gpu_id\": 0,\n        'predictor': 'gpu_predictor'\n    }","161930b2":"NUM_FOLDS = 10\nkf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=0)\n\nfor f, (train_ind, val_ind) in tqdm(enumerate(kf.split(train, target))):\n        #print(f'Fold {f}')\n        train_df, val_df = train.iloc[train_ind][columns], train.iloc[val_ind][columns]\n        train_target, val_target = target[train_ind], target[val_ind]\n        \n        train_df = xgb.DMatrix(train_df, label=train_target)\n        val_df = xgb.DMatrix(val_df, label=val_target)\n        \n        model =  xgb.train(xgb_params, train_df, 3800)\n        temp_oof = model.predict(val_df)\n        temp_test = model.predict(test)\n\n        train_oof_2[val_ind] = temp_oof\n        test_preds_2 += temp_test\/NUM_FOLDS\n        \n        print(mean_squared_error(temp_oof, val_target, squared=False))","4a2ee795":"mean_squared_error(train_oof_2, target, squared=False)\n","6d8bf99a":"mean_squared_error(0.5*train_oof+0.5*train_oof_2, target, squared=False)\n","f6cd42d7":"np.save('train_oof_2', train_oof_2)\nnp.save('test_preds_2', test_preds_2)","592b2723":"%%time\nshap_preds = model.predict(test, pred_contribs=True)","e7461256":"train = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/test.csv')\nfor feature in cat_features:\n    le = LabelEncoder()\n    le.fit(train[feature])\n    train[feature] = le.transform(train[feature])\n    test[feature] = le.transform(test[feature])\n    \ntrain['cont8_cont0'] = train['cont8']*train['cont0']\ntrain['cont9_cont0'] = train['cont9']*train['cont0']\ntrain['cont9_cont5'] = train['cont9']*train['cont5']\ntrain['cont8_cont5'] = train['cont8']*train['cont5']\n\ntest['cont8_cont0'] = test['cont8']*test['cont0']\ntest['cont9_cont0'] = test['cont9']*test['cont0']\ntest['cont9_cont5'] = test['cont9']*test['cont5']\ntest['cont8_cont5'] = test['cont8']*test['cont5']\n\ncolumns = test.columns[1:]","2abc4c9b":"# summarize the effects of all the features\nshap.summary_plot(shap_preds[:,:-1], test[columns])","ecaaf32c":"shap.summary_plot(shap_preds[:,:-1], test[columns], plot_type=\"bar\")\n","db2c15da":"sub['target'] = test_preds\nsub.to_csv('submission.csv', index=False)","635ac978":"sub['target'] = test_preds_2\nsub.to_csv('submission_2.csv', index=False)","a9381a07":"sub['target'] = 1.1*test_preds-0.1*test_preds_2\nsub.to_csv('submission_average_0.csv', index=False)","879d4938":"sub['target'] = 1.2*test_preds-0.2*test_preds_2\nsub.to_csv('submission_average_1.csv', index=False)","c3c2c1b8":"sub['target'] = 1.3*test_preds-0.3*test_preds_2\nsub.to_csv('submission_average_2.csv', index=False)","e1bc8151":"Let's applay label encoder to the categorical features.","c1ac78c3":"It took less than 2 minutes to calculate these values. On CPU this would take up to a day to compute.\n\nNow let's take a look at what are the top interactions in this dataset.","4977d668":"Next, we calculate the SHAP values for the test set.\n\n","796cec90":"In this notebook we'll explore feature importance using SHAP values. SHAP values are the most mathematically consistent way for getting feature importances, and they work particulalry nicely with the tree-based models. Unfortunately, calculating SHAP values is an **extremely** resource intensive process. However, starting with XGBoost 1.3 it is possible to calcualte these values on GPUs, whcih speeds up the process by a factor of 20X - 50X compared to calculating the same on a CPU. Furthermore, it is also possible to calculate SHAP values for feature interactions. The GPU speedup for those is even more dramatic - it takes a few minutes, as opposed to days or even longer on a CPU.","6b7aba6d":"We will now construct 5 more features out of the top 5 most interactive ones.","7afeb6ac":"Now let's do some plots of these values.","86cc240a":"Now let's see what are the SHAP values for this model","b8712edb":"At this point the Kaaggle Docker environment does not support XGBoost 1.3+, so we'll have to install it manually.\n","15c3b6a9":"Next, we'll calculate SHAP values for featue interactions. There will be 24x24x200,000 + 200,000 numbers that need to be computed."}}