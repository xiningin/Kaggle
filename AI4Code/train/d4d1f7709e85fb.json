{"cell_type":{"f9e66ad0":"code","66fc0987":"code","ff90d224":"code","fda13fb2":"code","0abc9c30":"code","077d0789":"code","cdcf3f3c":"code","f0fc2b79":"code","7cd7865b":"code","f4cc7eb7":"code","80176fe3":"code","9ca28c3e":"code","869971f6":"code","146062bf":"code","70efc8d2":"code","18a4ebfd":"code","a4a02d68":"markdown","7a40f7a2":"markdown"},"source":{"f9e66ad0":"import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import NullFormatter\nimport pandas as pd\nimport numpy as np\nimport matplotlib.ticker as ticker\nimport seaborn as sns\nfrom sklearn import preprocessing\n%matplotlib inline","66fc0987":"df = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')\ndf.head()","ff90d224":"df['radius_mean'].value_counts()\n\nprint(df.shape)\n","fda13fb2":"def diagnosis_value(diagnosis): \n    if diagnosis == 'M': \n        return 1\n    else: \n        return 0\n  \n    df['diagnosis'] = df['diagnosis'].apply(diagnosis_value)\n    df.drop(['Unnamed: 32','id'],axis=1)","0abc9c30":"plt.hist(df['radius_mean'])","077d0789":"X = df[[ 'radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n       'radius_se', 'texture_se', 'area_se', 'smoothness_se',\n       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n       'fractal_dimension_se', 'radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']] .values  #.astype(float)\nX[0:4]\ny= np.array(df['diagnosis'])","cdcf3f3c":"X = preprocessing.StandardScaler().fit(X).transform(X.astype(float))\nX[0:5]","f0fc2b79":"from sklearn.model_selection import train_test_split, cross_val_score\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","7cd7865b":"from sklearn.neighbors import KNeighborsClassifier","f4cc7eb7":"k = 4\n#Train Model and Predict  \nneigh = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)\nprint(neigh)","80176fe3":"yhat = neigh.predict(X_test)\nyhat[0:5]","9ca28c3e":"from sklearn import metrics\nprint(\"Train set Accuracy: \", metrics.accuracy_score(y_train, neigh.predict(X_train)))\nprint(\"Test set Accuracy: \", metrics.accuracy_score(y_test, yhat))","869971f6":"# write your code here\nk=6\nneigh = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)\nprint(neigh)\n#predicting\nyhat6=neigh.predict(X_test)\nprint('Train Accuracy is : ',metrics.accuracy_score(y_train, neigh.predict(X_train)))\nprint('test accuracy is : ', metrics.accuracy_score(y_test, yhat6))\n","146062bf":"Ks = 10\nmean_acc = np.zeros((Ks-1))\nstd_acc = np.zeros((Ks-1))\nConfustionMx = [];\nfor n in range(1,Ks):\n    \n    #Train Model and Predict  \n    neigh = KNeighborsClassifier(n_neighbors = n).fit(X_train,y_train)\n    yhat=neigh.predict(X_test)\n    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)\n\n    \n    std_acc[n-1]=np.std(yhat==y_test)\/np.sqrt(yhat.shape[0])\n\nmean_acc","70efc8d2":"plt.plot(range(1,Ks),mean_acc,'g')\nplt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)\nplt.legend(('Accuracy ', '+\/- 3xstd'))\nplt.ylabel('Accuracy ')\nplt.xlabel('Number of estimators (K)')\nplt.tight_layout()\nplt.show()","18a4ebfd":"print( \"The best accuracy was with\", mean_acc.max(), \"with k=\", mean_acc.argmax()+1) ","a4a02d68":"Lets load required libraries","7a40f7a2":"To use scikit-learn library, we have to convert the Pandas data frame to a Numpy array:"}}