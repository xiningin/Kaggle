{"cell_type":{"3cc77824":"code","730cf0a2":"code","67c483db":"code","c1ff0270":"code","eea857ce":"code","c17095c4":"code","1650faa7":"markdown","9975dd61":"markdown","206589dc":"markdown","740f7a31":"markdown"},"source":{"3cc77824":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport gc\nimport pickle\nimport numpy as np\nimport pandas as pd\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import StratifiedKFold","730cf0a2":"with open(\"..\/input\/tps-june-data-preprocess\/TPS_June_Dataset_Set1.txt\", 'rb') as handle: \n    data = handle.read()\n\nprocessed_data = pickle.loads(data)\ntrain_df = processed_data['train_df']\ntest_df = processed_data['test_df']\n\nYtrain_oh = pd.get_dummies(train_df['target']).values\n\ndel processed_data\ngc.collect()","67c483db":"Xtrain = train_df.loc[:, train_df.columns != 'target'].values\nYtrain = train_df['target'].values\nYtrain_oh = pd.get_dummies(train_df['target']).values\nXtest = test_df.values\n\nprint(\"Xtrain: {} \\nYtrain: {} \\nYtrain_oh: {} \\nXtest: {}\".format(Xtrain.shape, Ytrain.shape, \n                                                                   Ytrain_oh.shape, Xtest.shape))\n\ndel train_df\ndel test_df\ngc.collect()","c1ff0270":"FOLD = 10\nNUM_SEED = 3\n\n# Prediction Clipping Thresholds\np_min = 0.025\np_max = 1 - p_min\n\nnp.random.seed(3)\nseeds = np.random.randint(0, 100, size=NUM_SEED)\n\noof_score = 0\ny_pred_meta_xgb = np.zeros((Ytrain.shape[0], 9))\ny_pred_final_xgb = np.zeros((Xtest.shape[0], 9))\ncounter = 0\n\n\nfor sidx, seed in enumerate(seeds):\n    seed_score = 0\n    \n    kfold = StratifiedKFold(n_splits=FOLD, shuffle=True, random_state=seed)\n\n    for idx, (train, val) in enumerate(kfold.split(Xtrain, Ytrain)):\n        counter += 1\n\n        train_x, train_y, train_y_oh = Xtrain[train], Ytrain[train], Ytrain_oh[train]\n        val_x, val_y, val_y_oh = Xtrain[val], Ytrain[val], Ytrain_oh[val]\n        \n        model = XGBClassifier(\n            objective='multi:softmax',\n            eval_metric='mlogloss',\n            booster='gbtree',\n            sample_type='weighted',\n            tree_method='gpu_hist',\n            grow_policy='lossguide',\n            use_label_encoder=False,\n            num_round=5000,\n            num_class=9,\n            max_depth=9, \n            max_leaves=36,\n            learning_rate=0.0839,\n            subsample=0.7024,\n            colsample_bytree=0.5289,\n            min_child_weight=15,\n            reg_lambda=0.05465,\n            verbosity=0\n        )\n\n        model.fit(train_x, train_y, eval_set=[(train_x, train_y), (val_x, val_y)], \n                  early_stopping_rounds=100, verbose=50)\n\n        y_pred = model.predict_proba(val_x, iteration_range=(0, model.best_iteration))\n        #y_pred = np.clip(y_pred, p_min, p_max)\n        y_pred_meta_xgb[val] += y_pred\n        y_pred_final_xgb += model.predict_proba(Xtest, iteration_range=(0, model.best_iteration))\n        \n        score = log_loss(val_y_oh, y_pred)\n        oof_score += score\n        seed_score += score\n        print(\"Seed-{} | Fold-{} | OOF Score: {}\".format(seed, idx, score))\n    \n    print(\"\\nSeed: {} | Aggregate OOF Score: {}\\n\\n\".format(seed, (seed_score \/ FOLD)))\n\n\ny_pred_meta_xgb = y_pred_meta_xgb \/ float(NUM_SEED)\ny_pred_final_xgb = y_pred_final_xgb \/ float(counter)\n#y_pred_final_xgb = np.clip(y_pred_final_xgb, p_min, p_max)\noof_score \/= float(counter)\nprint(\"Aggregate OOF Score: {}\".format(oof_score))","eea857ce":"np.savez_compressed('.\/XGB_Meta_Features.npz',\n                    y_pred_meta_xgb=y_pred_meta_xgb, \n                    oof_score=oof_score,\n                    y_pred_final_xgb=y_pred_final_xgb)","c17095c4":"test_df = pd.read_csv(\"..\/input\/tabular-playground-series-jun-2021\/test.csv\")\nsubmit_df = pd.DataFrame()\nsubmit_df['id'] = test_df['id']\nsubmit_df['Class_1'] = y_pred_final_xgb[:,1]\nsubmit_df['Class_2'] = y_pred_final_xgb[:,2]\nsubmit_df['Class_3'] = y_pred_final_xgb[:,3]\nsubmit_df['Class_4'] = y_pred_final_xgb[:,4]\nsubmit_df['Class_5'] = y_pred_final_xgb[:,5]\nsubmit_df['Class_6'] = y_pred_final_xgb[:,6]\nsubmit_df['Class_7'] = y_pred_final_xgb[:,7]\nsubmit_df['Class_8'] = y_pred_final_xgb[:,8]\nsubmit_df['Class_9'] = y_pred_final_xgb[:,0]\n\nsubmit_df.to_csv(\".\/XGB_submission.csv\", index=False)\nsubmit_df.head()","1650faa7":"## Build and validate the model","9975dd61":"## Create submission file","206589dc":"## Import libraries","740f7a31":"## Prepare data for model training"}}