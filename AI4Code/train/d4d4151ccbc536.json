{"cell_type":{"9cf83c4c":"code","d0a1e852":"code","d4f18282":"code","9b957f41":"code","c0b0ac70":"code","9da39f2c":"code","1b5c88e8":"code","da2b40f4":"code","28117f77":"code","b04a2389":"code","5aac2ce6":"code","278039ae":"code","391b52ea":"code","f6e3802f":"code","e2ff0044":"code","0b8f9afc":"markdown","6184aec0":"markdown","cd79949c":"markdown"},"source":{"9cf83c4c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d0a1e852":"# Importing nessecary libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom keras.layers import Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, MaxPooling2D, Dropout\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.metrics import confusion_matrix\n","d4f18282":"train_file= '..\/input\/chest-xray-pneumonia\/chest_xray\/train\/'\ntest_file = '..\/input\/chest-xray-pneumonia\/chest_xray\/test\/'","9b957f41":"train_datagen = ImageDataGenerator(rescale=1.\/255)\ntrain_dataset = train_datagen.flow_from_directory(train_file,\n                                                      target_size=(150,150),\n                                                  batch_size=32,\n                                                  color_mode='grayscale',\n                                                    class_mode ='categorical')\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255,)\ntest_dataset = test_datagen.flow_from_directory(test_file,\n                                                      target_size=(150,150),\n                                                  batch_size=1,\n                                                  color_mode='grayscale',\n                                                    class_mode ='categorical',\n                                                shuffle=False)\n#Batch size for test data is one, as we pass one image at a time unlike training dataset","c0b0ac70":"#Visualizing the data\nx_batch, y_batch = next(train_dataset)\nx_batch = np.squeeze(x_batch)\n\nfor i in range (0,3):\n    image = x_batch[i]\n    plt.imshow(image, cmap=plt.get_cmap('gray'))\n    plt.show()","9da39f2c":"model = Sequential()\n\nmodel.add(Conv2D(filters= 64, padding='same', kernel_size=(11,11), input_shape=(150,150,1)))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Conv2D(75, (7,7), padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D((3,3), strides=(3,3)))\n\nmodel.add(Conv2D(100, (5,5), padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D((5,5), (5,5)))\n\nmodel.add(Flatten())\nmodel.add(Dense(75, activation='relu', kernel_initializer='he_normal'))\nmodel.add(Dense(25, activation='relu', kernel_initializer='he_normal'))\nmodel.add(Dense(2,activation='softmax'))\n","1b5c88e8":"model.summary()","da2b40f4":"#Compiling the model\nmodel.compile (loss = 'categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])","28117f77":"# Fitting the model\nmodel.fit(train_dataset, epochs=3)","b04a2389":"model.evaluate_generator(test_dataset, verbose=1)","5aac2ce6":"cost_df = pd.DataFrame(model.history.history)\nloss = cost_df['loss']\naccuracy = cost_df['accuracy']","278039ae":"cost_df.plot()\nprint(\"LOSS:\\n{}\\n\".format(loss))\nprint(\"ACCURACY:\\n{}\".format(accuracy))","391b52ea":"Y_pred = model.predict_generator(test_dataset)\ny_pred = np.argmax(Y_pred, axis=1)\nprint('Confusion Matrix')\nprint(confusion_matrix(test_dataset.classes, y_pred))","f6e3802f":"cf_matrix = confusion_matrix(test_dataset.classes, y_pred)\nsns.heatmap(cf_matrix\/np.sum(cf_matrix), annot=True, \n            fmt='.2%', cmap='Blues')","e2ff0044":"precision = cf_matrix[0][0]\/(cf_matrix[0][0]+cf_matrix[0][1])\nrecall = cf_matrix[0][0]\/(cf_matrix[0][0]+cf_matrix[1][0])\nprint('Precision = {}\\n'.format(precision))\nprint('Recall = {}'.format(recall))","0b8f9afc":"X-ray images of chest of different persons are provided. Our task is to predict if the given person has pneumonia. \nThe model developed is a CNN model. The details of the model are given below.","6184aec0":" Train accuracy is 97% and test accuracy is 82.6%. ","cd79949c":"Thus we have achieved a good recall of 82.8%"}}