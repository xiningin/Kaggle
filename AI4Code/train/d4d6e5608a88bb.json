{"cell_type":{"5510c344":"code","94e92823":"code","e28d1fce":"code","958a8ba5":"code","dbc0ebd3":"code","00cf89ca":"code","27e5f264":"code","6eade0d1":"code","983c6310":"code","9d1055d2":"code","7aa9adab":"code","133ff0af":"code","873cfcd7":"code","308684cb":"code","eb9c1925":"code","ffc620de":"code","7bf97c6e":"code","8aa2ff9d":"code","4ca022df":"code","0c7ea189":"code","f802c4b5":"code","a21c380e":"code","12ec345e":"code","d7339d2c":"code","302f8c32":"code","73d78a42":"code","c203aea1":"code","2ab0315e":"code","efe8c171":"code","da0a5270":"code","ebbf568b":"code","e353ea55":"code","18bd6c5e":"code","d2aa371a":"code","f5c16946":"code","21c512f6":"code","31a4949f":"code","a43e9d70":"markdown","2c15df36":"markdown","64ffd206":"markdown","88d68dcf":"markdown","5de8e764":"markdown","ed8710bc":"markdown","b78728f0":"markdown","c9910463":"markdown","5ed2b845":"markdown","5b401ff2":"markdown","c14bba73":"markdown","a68a69be":"markdown","3d2f2220":"markdown","f04228da":"markdown","62bf5208":"markdown","0c538bd7":"markdown","cede3f4e":"markdown","be27d472":"markdown","63280945":"markdown","e1ff1fb4":"markdown","ce8c7ee2":"markdown","a77d1c88":"markdown","cb7d5bc5":"markdown","c7e051bc":"markdown","857088dc":"markdown","16b6d175":"markdown","f8ac299f":"markdown","64f18897":"markdown","1eff377e":"markdown","dc70c648":"markdown","ede37743":"markdown","e98b8e6d":"markdown","d45d8d86":"markdown","cdd98190":"markdown"},"source":{"5510c344":"# Installation of Plotly with geographical maps\n# ----------------------------------------------\n# !pip install plotly==4.9.0\n# !pip install plotly plotly-geo==1.0.0\n# !pip install plotly chart-studio==1.0.0\n# !pip install -U kaleido\n\n# Installation of pygal\n# ----------------------------------------------\n!pip install pygal","94e92823":"import os\nimport numpy as np\nimport pandas as pd\nimport datetime\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\nfrom matplotlib.pyplot import figure\nimport seaborn as sns\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport plotly.graph_objs as go #importing graphical objects\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport pygal\nfrom pygal.style import LightSolarizedStyle\nfrom IPython.display import SVG, HTML\n%matplotlib inline\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e28d1fce":"# Import the .CSV file\nmy_path = '\/kaggle\/input\/fatal-polich-shooting-notebook-kahana-peled'\ndata = pd.read_csv(my_path+'\/fatal-police-shootings-data.csv',\n                   parse_dates=['date'], index_col='id')","958a8ba5":"# Looking at 25\/05\/2020 - the date of George Perry Floyd Jr. died in Minnesota from police brutality (but wasn't shot...)\ndata[data['date']=='2020-05-25']","dbc0ebd3":"data.shape","00cf89ca":"data.dtypes","27e5f264":"# Missing values?\ndata.isnull().sum()","6eade0d1":"# Fill 1 missing value for Gender as Male (95% of the set is 'M')\ndata['gender'].fillna('M', inplace=True)\n\n# Fill Armed, Race & Flee as unknowns\ndata.fillna({'armed': 'Unknown', 'race': 'Unknown', 'flee': 'Unknown'}, inplace = True) ","983c6310":"# Searching for identical lines\ndata.duplicated().sum()","9d1055d2":"# Serching semi-duplicates\nMDuplicates = data.loc[data.duplicated(subset=['date', 'gender', 'race', 'state', 'city'], keep=False)]\ndata[data.index.isin(['3364', '4246'])]","7aa9adab":"#Adding year to data\ndata['Year']=data['date'].dt.year\n#Adding month to data\ndata['Month']=data['date'].dt.month\n#Adding Day to data\ndata['Day']=data['date'].dt.day\n#Adding Dayofweek to data\ndata['Dayofweek']=data['date'].dt.day_name()\n#Adding numDayofweek to data\ndata['numDayofweek']=data['date'].dt.dayofweek\n##Adding year to month\ndata['Year_month']=data['Year'].astype(str)+'\/'+data['Month'].astype(str)","133ff0af":"# Plotting Total Death Cases per Year\nfig, ax = plt.subplots(2, 1, figsize=(10, 5))\nfig.suptitle('Total Death & Monthly Average per Year', fontsize=14)\nx = pd.Series(['2015','2016','2017','2018','2019','2020'])\n\n# Subplot 1 - Total Death\ny1 = data.groupby(['Year'])['name'].count()\nax[0].plot(x, y1, color='blue')\nax[0].fill_between(x, 0, y1, color='blue', alpha=0.3)\nax[0].set_ylabel(\"Total\",color='blue',fontsize=14)\nax[0].yaxis.labelpad = 15\nax[0].set_ylim([500, 1100])\n\n\n# Subplot 2 - Monthly Average\ny2 = data.groupby(['Year', 'Month'])['name'].count().unstack('Year').mean(axis=0)\nax[1].plot(x, y2, color='red')\nax[1].fill_between(x, 0, y2, color='red', alpha=0.3)\nax[1].set_ylabel(\"Monthly Av.\",color=\"red\",fontsize=14)\nax[1].set_xlabel(\"year\",fontsize=14)\nax[1].set_ylim([80, 84])\nax[1].yaxis.labelpad = 28\n\nplt.show()","873cfcd7":"a = data.groupby(['Month','Year'])['name'].count().to_frame().unstack('Year').mean(axis=1).to_frame()\nmonth = pd.Series(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])\nfig, ax = plt.subplots(figsize=(16, 4))\nplt.plot(month, a.values, color='mediumvioletred', marker=\"X\")\nax.grid(True)\nax.set_xticklabels(labels=month, fontsize=12)\nax.set_ylim(70, 95, 5)\nax.set_xlim('Jan', 'Dec')\nax.legend(labels='')\nplt.title(label='Average death cases per month',  fontsize=14, color = 'b')\nplt.tight_layout()\nplt.show()","308684cb":"dayofweek=data.groupby(['numDayofweek','Dayofweek'])['name'].count().rename('count').reset_index()\nax=dayofweek.plot(kind='barh',x='Dayofweek',y='count',\n                  linewidth=4,linestyle=':',\n                  color='green',figsize=(10, 5))\nplt.title(label='Death cases over days of week', fontsize=14)\nplt.legend(loc='best')\nax.set_xlim([500, 900])\nax.tick_params(labelsize=12)\nax.set_ylabel(ylabel='Day', fontsize=14)\nrects = ax.patches\n\n# For each bar: Place a label\nfor rect in rects:\n    # Get X and Y placement of label from rect.\n    x_value = rect.get_width()\n    y_value = rect.get_y() + rect.get_height() \/ 2\n    # Number of points between bar and label. Change to your liking.\n    space = 5\n    # Vertical alignment for positive values\n    ha = 'left'\n\n    # Use X value as label and format number with one decimal place\n    label = x_value\n\n    # Create annotation\n    plt.annotate(\n        label,                      # Use `label` as label\n        (x_value, y_value),         # Place label at end of the bar\n        xytext=(space, 0),          # Horizontally shift label by `space`\n        textcoords=\"offset points\", # Interpret `xytext` as offset in points\n        va='center',                # Vertically center label\n        ha=ha)                      # Horizontally align label differently for\n                                    # positive and negative values.\n\n\nplt.show()","eb9c1925":"#group by manner_of_death to find relations\ndf_manner_of_death=data.groupby('manner_of_death')['name'].count().sort_values(ascending=False)\n\nfig, ax= plt.subplots(figsize=(6,6))\nax = df_manner_of_death.plot.pie(labels=data['manner_of_death'].unique(),\n                                 autopct='%1.1f%%', \n                                 colors=['limegreen','green'],\n                                 fontsize=12)\nplt.title(label='Manner Of Death', fontsize=14)\nplt.ylabel('')\nplt.tight_layout()\nplt.show()","ffc620de":"text=data['armed'].rename(\"armed\").reset_index()\ntext=text['armed'].dropna().rename(\"armed\").reset_index()\ntext=list(text['armed'])\n[s.strip().replace(\"'\",'') for s in text]\ntext=set(text)\n# # # ##Create and generate a word cloud image:\nwordcloud = WordCloud(regexp=r\"\\w[\\w]+\" , background_color=\"red\").generate(str(text))\nplt.figure(figsize=(20, 8))\nplt.title('Armed  distribution\\n', size=25)\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","7bf97c6e":"def armed(grp):\n  if grp in ('gun','pistol'):\n    return 'Hot'\n  elif grp in ('unarmed'):\n    return 'unarmed'\n  else:\n    return 'Cold'\n#adding field to seperate HOT WEAPON from ALL POP\ndata['Hot_Cold_weapon']=data['armed'].apply(lambda grp: armed(grp))\n#hot cold weapoon \ndf_Hot_Cold_weapon=data.groupby(['Year','Hot_Cold_weapon'])['name'].count().rename('count').reset_index()\ndf_Hot_Cold_weapon_sort=df_Hot_Cold_weapon.sort_values(by=['Year','count'],ascending=False)\n#Pivot manner_of_death per year\ndf_Hot_Cold_weapon_sort_pivot=df_Hot_Cold_weapon.pivot_table(index='Year',columns='Hot_Cold_weapon',\n                                                             values='count',aggfunc=sum,margins=True, \n                                                             dropna=True, fill_value=0)\n\n#the percentage of manner_of_death per year from All population per year\nd=df_Hot_Cold_weapon_sort_pivot.div( df_Hot_Cold_weapon_sort_pivot.iloc[:,-1], axis=0)\nd=d[:-1].reset_index()\nax = d[['Year','Hot','Cold','unarmed']].plot(kind='bar',\n                                             stacked=False,\n                                             x='Year',figsize=(18,5))\nax.set_xticklabels(labels = d['Year'].unique(), rotation=0,\n                                               ha='center',\n                                               fontsize=12)\nplt.legend(bbox_to_anchor=(1.1, 0.5))\nplt.show()","8aa2ff9d":"ax1 = data['age'].plot(kind='hist',bins=10, figsize=(15, 5))\nax1.axvline(x=data['age'].mean(), ymin=0, ymax=1, color='red',\n                                                    linewidth=2,\n                                                    linestyle='dashed')\nax1.axvline(x=data['age'].median(), ymin=0, ymax=1, color='orange',\n                                                    linewidth=2,\n                                                    linestyle='dashed')\nmin_ylim, max_ylim = plt.ylim()\nplt.text(data['age'].mean()*1.03, max_ylim*0.2, 'Mean: {:.2f}'.format(data['age'].mean()),\n                                                                      color='w', weight='bold')\nplt.text(data['age'].median()*0.7, max_ylim*0.2, 'Median: {:.2f}'.format(data['age'].median()),\n                                                                      color='w', weight='bold')\n\nplt.title(label='Age histogram', fontsize=12)\nplt.show()","4ca022df":"boxprops = dict(linestyle='-', linewidth=4, color='r')\nmedianprops = dict(linestyle='-', linewidth=4, color='r')\nz = data.groupby(['Year','age'])['name'].count().rename('count').reset_index()\nax=z.boxplot(by='Year',color=dict(boxes='r',whiskers='k', medians='k',caps='r'),\n             grid=True,column='age',rot=45,\n             showfliers=False, showmeans=True,\n             boxprops=boxprops,                                                                                    \n             medianprops=medianprops,\n             figsize=(18,5))\nplt.suptitle(\"\")\nax.set_xlabel(\"\")\nax.set_title(\"Age distribution by year\")\nplt.show()","0c7ea189":"#group by gender to find relations\ndf_gender=data.groupby('gender')['name'].count().rename('count').reset_index()\nax = df_gender.plot.pie(y='count',labels=['Female','Male'],\n                   autopct='%1.1f%%',\n                   colors=['green','limegreen'],\n                   figsize=(6,6), fontsize=12)\nax.set_title(\"Gender Victim Distribution\", fontsize=14)\nax.legend(labels='')\nplt.ylabel('')\nplt.show()","f802c4b5":"race_data = pd.read_csv(my_path+'\/Race distrebution 2017.csv')\nrace_data=race_data.rename(columns={'RaceCode':'race'})\ndf_race=data.groupby(['race'])['name'].count().rename('count').reset_index()\ndf_race=df_race[~df_race['race'].isin(['N','A','Unknown'])]\nd=df_race.sort_values(by=['race','count'],ascending=False)\nd['Percentage']=d['count']\/d['count'].sum()\nd['Percentage']=d['Percentage'].map(lambda n: '{:,.2%}'.format(n))\nd=d.drop_duplicates()\nd=pd.merge(d.reset_index(), race_data.reset_index(), on=['race'], how='left')\nd['normelized']=d['count']\/d['Quantity']*100000\nd.sort_values(by='normelized',inplace=True)\ncolors = ['lightslategray',] * 5\ncolors[3] = 'crimson'\nfig = go.Figure(data=[go.Bar(x=d['race'],y=d['normelized'],width=[1, 2, 0.9, 1])])\nfig.update_layout(title=\"Race Death Normaliztion per 100,000 in Population\",\n    xaxis_title=\"Race\",\n    xaxis = dict(tickmode = 'array',\n                 tickvals = ['B', 'H', 'W', 'O'],\n                 ticktext = ['Black','Hispanic','White','Other']),\n    yaxis_title=\"Deaths per 100,000\")\n\nfig.update_traces(marker_color=colors, marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5, opacity=0.6)\nfig.show()","a21c380e":"pop = pd.read_csv(my_path+'\/USpop2019.csv',thousands=',')\n\n# merge the data of population according to state abbervation\ndata = pd.merge(data, pop)\n\n# calculate the value of normalized incidents per 100,000 population for each row\ndata['incidents'] = data.groupby('state')['state'].transform('count')\ndata['state_norm'] = data['incidents'] \/ data['2019'] * 50000","12ec345e":"state_data = data.copy()\n\nfig = go.Figure(data=go.Choropleth(\n    locations= state_data['state'], # Spatial coordinates\n    z = state_data['incidents'].astype(float), # Data to be color-coded\n    locationmode = 'USA-states', # set of locations match entries in `locations`\n    colorscale = 'Blues',\n    colorbar_title = \"# incidents\",\n))\n\nfig.update_layout(\n    title_text = 'Incidents By state: Choropleth',\n    geo_scope='usa', # limite map scope to USA\n)\n\nfig.show()","d7339d2c":"fig = go.Figure(data=go.Choropleth(\n    locations= state_data['state'], # Spatial coordinates\n    z = state_data['state_norm'].astype(float), # Data to be color-coded\n    locationmode = 'USA-states', # set of locations match entries in `locations`\n    colorscale = 'Blues',\n    colorbar_title = \"# incidents\\n per 50,000\",\n))\n\nfig.update_layout(\n    title_text = 'Incidents By state: Normalized by Popultion Choropleth',\n    geo_scope='usa', # limite map scope to USA\n)\n\nfig.show()","302f8c32":"# Import the .CSV file\ncity_pop = pd.read_csv(my_path+'\/CityPop2019.csv',thousands=',', header=0, \n                       names = ['City and State', '2019c'])\ncity_pop['city'] = ''\n\n# Seperate city & state columns from the combined field to 2 new columns\ndef split_city(rec):\n  return rec.split(',')[0].strip()\n\ndef split_state(rec):\n  return rec.split(',')[1].strip()\n\ncity_pop['city'] = list(map(split_city, city_pop['City and State']))\ncity_pop['city'] = city_pop['city'].str.replace('.city$','')\ncity_pop['state_name'] = list(map(split_state, city_pop['City and State']))\ncity_pop.drop('City and State', axis=1, inplace=True)","73d78a42":"# merge the data of population according to state name\ncity_data = pd.merge(data, city_pop, on=['city','state_name'], how='left')\ncity_data.head(2)\n\n# calculate the value of normalized incidents per 10,000 population for each row\ncity_data['city_incidents'] = city_data.groupby('city')['city'].transform('count')\ncity_data['city_norm'] = city_data['city_incidents'] \/ city_data['2019c'] * 50000\n\n# Plot the absolute graph of incidents states\ntotal = pd.pivot_table(city_data, values='city_incidents',index='city').sort_values(by='city_incidents',\n                                                                                    ascending=False).head(10)\nax1 = total.plot(kind='bar', figsize = (20, 4),\n                 title='Absolute # of incidents',\n                 color='green', fontsize=12)\nax1.set_xticklabels(ax1.get_xticklabels(), rotation=0, ha='center')\n\n# Plot the normalized graph of incidents states\nrelative = pd.pivot_table(city_data, values='city_norm', index='city').sort_values(by='city_norm',\n                                                                                   ascending=False).head(10)\nax2 = relative.plot(kind='bar', figsize = (20, 4),\n                    title='Normalized # of incidents per 10,000',\n                    color = 'limegreen', fontsize=12)\nax2.set_xticklabels(ax2.get_xticklabels(), rotation=0, ha='center')\nplt.show()","c203aea1":"fig, ax1 = plt.subplots(figsize=(20,5))\nax1 = city_data.city_incidents.T.hist(bins=90)\nax1.set_xlabel('# of incidents', fontsize=12)\nax1.set_ylabel('# of cities', fontsize=12)\nax1.set_xlim(0,90)\nax1.set_xticklabels(labels=range(0,91,10))\nax1.axvline(x=city_data.city_incidents.mean(), ymin=0, ymax=1, color='red',\n            linewidth=2, linestyle='dashed')\nax1.axvline(x=city_data.city_incidents.median(), ymin=0, ymax=1, color='orange',\n            linewidth=2, linestyle='dashed')\nmin_ylim, max_ylim = plt.ylim()\nplt.text(city_data.city_incidents.mean()*1.1, max_ylim*0.9, 'Mean: {:.2f}'.format(city_data.city_incidents.mean()))\nplt.text(city_data.city_incidents.median()*1.1, max_ylim*0.9, 'Median: {:.2f}'.format(city_data.city_incidents.median()))\nplt.show()","2ab0315e":"# Ploting a bar chart of the attribute\ntable = pd.crosstab(data['Year'], data['signs_of_mental_illness'], normalize=0)\nax = table.plot(kind='barh',stacked=True, color=['blue','limegreen'], figsize=(15, 5))\n\nlabels = []\nfor j in table.columns:\n    for i in table.index:\n        label = str('{0:.2%}'.format(table.loc[i][j]))\n        labels.append(label)\n\npatches = ax.patches\n\nfor label, rect in zip(labels, patches):\n    width = rect.get_width()\n    if width > 0:\n        x = rect.get_x()\n        y = rect.get_y()\n        height = rect.get_height()\n        ax.text(x + width\/2., y + height\/2., label, ha='center', \n                va='center', color='white', weight='bold')\n\nax.set_xticklabels(labels='')\nax.set_yticklabels(labels=ax.get_yticklabels(), fontsize=12)\n\nplt.legend(loc='best')\nplt.title('% signs_of_mental_illness\\n', fontsize=14, color='r')\nplt.legend(bbox_to_anchor=(1.1, 1.0), fontsize=12)\nplt.show()","efe8c171":"table = data.groupby('threat_level')['name'].count()\ntotal = table.values.sum()\nlabels = ['{0:.1%}'.format(i\/total) for i in table.values]\n\nfig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(aspect=\"equal\"))\nwedges, texts = ax.pie(table, wedgeprops=dict(width=0.5), \n                       startangle=-40, colors=['r','salmon','pink'])\nbbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"k\", lw=0.72)\nkw = dict(arrowprops=dict(arrowstyle=\"-\"),\n          bbox=bbox_props, zorder=0, va=\"center\")\n\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1)\/2. + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    ax.annotate(labels[i], xy=(x, y), xytext=(np.sign(x), y), fontsize=12, **kw)\n\n\nax.legend(wedges, table.index,\n          ncol = 3,\n          loc=\"lower center\",\n          fontsize=12)\n\nax.set_title(\"Threat Level Disposition\", fontsize=14)\nplt.show()","da0a5270":"# Inplace replacing nan values with Unknown.\ndata['flee'].fillna('Unknown', inplace=True)\nc =  data['flee'].value_counts(normalize=True).to_frame().T\n\n# Plot the double donut pie \nfig, ax = plt.subplots(figsize=(8,8))\nplt.axis('equal')\n\nall_val = [c.iloc[0][i] for i in c]\nax1 = plt.pie([0.63, 0.37], radius=1,\n        colors=['green', 'limegreen'],\n        pctdistance=0.7,\n        wedgeprops=dict(width=0.5, edgecolor='white'),\n        labels=['Not Fleeing', 'Flee'],\n        textprops={'fontsize': 12})\n\nax2 = plt.pie(all_val, radius=0.5,\n        colors=['red','salmon','tomato','coral','peachpuff'],\n        wedgeprops=dict(width=0.3, edgecolor='white'),\n        autopct='%.1f%%',\n        pctdistance=0.7, \n        labeldistance=0.7)\n\nhandles, labels = ax.get_legend_handles_labels()\nleg_labels = ['Not Fleeing', 'Flee', 'Not fleeing', 'Car', 'Foot', 'Unknown', 'Other']\nplt.legend(labels=leg_labels, loc=(0.9, 0.1), fontsize=12)\nplt.show()","ebbf568b":"# plot a normalized bar by state\ne = pd.crosstab(data.state_name, data.body_camera, margins=True, normalize='index').sort_values(by=False, ascending=True).head(10)\nax = e.plot.bar(stacked=True, figsize = (20, 5),\n                 title = '% Body Camera per state', \n                 color=['green', 'lime'],\n                 fontsize=12)\n\nlabels = []\nfor j in e.columns:\n    for i in e.index:\n        label = str('{0:.2%}'.format(e.loc[i][j]))\n        labels.append(label)\n\npatches = ax.patches\n\nfor label, rect in zip(labels, patches):\n    width = rect.get_width()\n    if width > 0:\n        x = rect.get_x()\n        y = rect.get_y()\n        height = rect.get_height()\n        ax.text(x + width\/2., y + height\/2., label, ha='center',\n                va='center', color='white', weight='bold')\n\nax.set_xticklabels(labels=ax.get_xticklabels(), rotation=0)\nax.set_yticklabels(labels='')\n\nplt.legend(bbox_to_anchor=(1.0, 1.0))\nplt.show()","e353ea55":"# Creating a subset\na = data[['state_name','age', 'race', 'gender']]\n\n# Plotting swarmplot\nfig, ax = plt.subplots(figsize=(20,6))\nplt.title('Age-Race with gender disposition', fontsize=14, color='r')\nax = sns.swarmplot(x=\"race\", y=\"age\", hue=\"gender\",palette=\"Set2\", dodge=True, data=a)\nax.set_xticklabels(labels=['Asian','Hispanic','White','Native American','Other','Black','Unknown'])\nax.set_yticks(ticks=np.arange(0,101,10))\nplt.legend()\nfig.show()","18bd6c5e":"def flee(grp):\n  if grp in ('Not fleeing'):\n    return 0\n  else:\n    return 1\n\ndata['flee_grp']=data['flee'].apply(lambda grp: flee(grp))\n\ndf=data.groupby(['Hot_Cold_weapon','flee_grp'])['name'].count().rename('count').reset_index()\nfig, ax = plt.subplots(figsize=(15, 5))\ngreenBars=list(df.loc[df['Hot_Cold_weapon']=='Cold']['count'])\norangeBars=list(df.loc[df['Hot_Cold_weapon']=='Hot']['count'])\nblueBars=list(df.loc[df['Hot_Cold_weapon']=='unarmed']['count'])\n\n## Data\nr = [0,1]\nraw_data = {'greenBars':greenBars, 'orangeBars': orangeBars,'blueBars':blueBars}\ndf = pd.DataFrame(raw_data)\n# From raw value to percentage\ntotals = [i+j+k for i,j,k in zip(df['greenBars'], df['orangeBars'], df['blueBars'])]\ngreenBars = [i \/ j * 100 for i,j in zip(df['greenBars'], totals)]\norangeBars = [i \/ j * 100 for i,j in zip(df['orangeBars'], totals)]\nblueBars = [i \/ j * 100 for i,j in zip(df['blueBars'], totals)]\n\n# plot\nbarWidth = 0.85\nnames = ('Flee','Not flee')\n# Create green Bars\nax1=plt.bar(r, greenBars, color='#b5ffb9', edgecolor='white',\n            width=barWidth, label='Cold')\n# Create orange Bars\nax2=plt.bar(r, orangeBars, bottom=greenBars, color='#f9bc86', \n            edgecolor='white', width=barWidth, label='Hot')\n# Create blue Bars\nax3=plt.bar(r, blueBars, bottom=[i+j for i,j in zip(greenBars, orangeBars)],\n            color='#a3acff', edgecolor='white', width=barWidth, label='Unurmed')\n\nplt.ylabel(\"Armed group percentage\")\nfor r1, r2, r3 in zip(ax1, ax2, ax3):\n    h1 = r1.get_height()\n    h2 = r2.get_height()\n    h3 = r3.get_height()\n    plt.text(r1.get_x() + r1.get_width() \/ 2., h1 \/ 2.,\n             \"{:.2%}\".format(h1\/100), \n             ha=\"center\", va=\"center\",\n             color=\"black\", fontsize=10, fontweight=\"bold\" )\n    plt.text(r2.get_x() + r2.get_width() \/ 2.,\n             h1 + h2 \/ 2., \"{:.2%}\".format(h2\/100), \n             ha=\"center\", va=\"center\",\n             color=\"black\", fontsize=10, fontweight=\"bold\")\n    plt.text(r3.get_x() + r3.get_width() \/ 2.,\n             h1 + h2 + h3 \/ 2., \"{:.2%}\".format(h3\/100), \n             ha=\"center\", va=\"center\",\n             color=\"black\", fontsize=10, fontweight=\"bold\")\n#################################################\n# # Custom x axis\n\nplt.xticks(r, names)\nplt.xlabel(\"group\")\nplt.legend(bbox_to_anchor=(1.0, 1.0))\nplt.title('Armed vs. Flee', fontsize=14, color='r')\n# Show graphic\nplt.show()","d2aa371a":"c = data[['age','flee','signs_of_mental_illness','gender', 'threat_level']]\nax = sns.catplot(x=\"threat_level\", y=\"age\",\n                hue=\"signs_of_mental_illness\", col=\"gender\",\n                data=c, kind=\"violin\", split=True,\n                height=4, aspect=1.2)\nplt.show()","f5c16946":"a = data[['age','threat_level','flee','gender']]\nax = sns.catplot(x='flee', y=\"age\", \n                 kind=\"box\", data=a, height=6, aspect=1.5)\nax.set(xlabel='Flee Method', ylabel='Age')\nplt.title('To flee or not to flee?', \n          fontdict={'size': 14, 'color':'red', 'weight': 'bold'})\nx = 1\ny = 30\nplt.annotate('Young flee\\n by foot', xy=(x,y), xytext=(x+0.3, 15), \n             annotation_clip=False,\n             arrowprops=dict(facecolor='red', shrink=0.05, headwidth=15, width=6))\nplt.show()","21c512f6":"# Seperating the data according to body camera\nnm = data[data['body_camera']== True].groupby('race')['name'].count()  # 644 records\norig = data[data['body_camera']== False].groupby('race')['name'].count()  # 4851 records\ny1 = nm.div(nm.sum())*100\ny1.index = ['Asian', 'Black', 'Hispanic', 'Native', 'Other', 'Unknown', 'White']\ny2 = orig.div(orig.sum())*100\ny2.index = ['Asian', 'Black', 'Hispanic', 'Native', 'Other', 'Unknown', 'White']\n\n# HTML code to display in colab notebook\nhtml_pygal = \"\"\"\n<!DOCTYPE html>\n<html>\n  <head>\n  <script type=\"text\/javascript\" src=\"http:\/\/kozea.github.com\/pygal.js\/javascripts\/svg.jquery.js\"><\/script>\n  <script type=\"text\/javascript\" src=\"https:\/\/kozea.github.io\/pygal.js\/2.0.x\/pygal-tooltips.min.js\"\"><\/script>\n  <\/head>\n  <body>\n    <figure>\n      {pygal_render}\n    <\/figure>\n  <\/body>\n<\/html>\n\"\"\"\n# plotting a dot chart with pygal\ndot_chart = pygal.Dot(x_label_rotation=30, height=300,show_legend=False, \n                      print_values=False,\n                      print_values_position='top',\n                      human_readable=True)\ndot_chart.title = 'Race effecting Body Camera presence?'\ndot_chart.x_labels = y1.index\ndot_chart.add('Camera = True', y1.to_list())\ndot_chart.add('Camera = False', y2.to_list())\ndisplay(HTML(html_pygal.format(pygal_render=dot_chart.render())))","31a4949f":"undeter = data[data['threat_level'] == 'undetermined'] # 244 records\nother = data[data['threat_level'] == 'other'] # 1698 records\nattack = data[data['threat_level'] == 'attack'] # 3553 records\n\na1 = undeter.groupby('Hot_Cold_weapon')['name'].count()#.to_frame()\ny1 = a1.div(a1.sum())*100\n\na2 = other.groupby('Hot_Cold_weapon')['name'].count()#.to_frame()\ny2 = a2.div(a2.sum())*100\n\na3 = attack.groupby('Hot_Cold_weapon')['name'].count()#.to_frame()\ny3 = a3.div(a3.sum())*100\n\na4 = data.groupby('Hot_Cold_weapon')['name'].count() # 5495 records\ny4 = a4.div(a4.sum())*100\n\nline_chart = pygal.Bar(height=300,show_legend=True,\n                      legend_at_bottom = True, \n                      print_values=True,\n                      print_values_position='center',\n                      value_formatter=lambda x: '{:2.2f}%'.format(x),\n                      rounded_bars=10,\n                      style=LightSolarizedStyle(\n                             value_font_size=12,\n                             value_colors=('white','white','white','white')))\nline_chart.title = 'Threat Level vs. Armed Category'\nline_chart.x_labels = ['COLD', 'HOT', 'UNARMED']\nline_chart.add('Immediate Threat (n=3,553)', y3)\nline_chart.add('Medium Threat (n=1,698)', y2)\nline_chart.add('Unknown Threat (n=244)', y1)\n# line_chart.add('All (n=5,495)',  y4)\ndisplay(HTML(html_pygal.format(pygal_render=line_chart.render())))","a43e9d70":"### **Armed vs. Flee**\n\n\n*   Seems like there is no strong connection between Armed and Fleeing\n*   There ara more not fleeing and unarmed that where shot than fleeing and unarmed","2c15df36":"# **Data Inspection**\n---","64ffd206":"### Month\nThe monthly average is also steady. It seems like 2020 has no significant change in number of deaths. According to the data below we can see that the 1st quarter had more incidents.\nThere is also an unexplained decline in September.","88d68dcf":"### **Mental illness - Men vs. Women**\n* Male's age disposition doesn't change as a function of level of threat in the presence of mental illness.\n\n* Female's age disposition does seems to change among the mental illness group in ALL threat levels","5de8e764":"## **Age**\n* For column \"Age\" there is 4.40% percent NAN values in the data\n>\n* The majority of deaths (60%) occurs at the age group of 30-60.\n> \n* Few cases where the age was below 10 and above 90. Intresting to find out what happand in this cases and if this cases are real.","ed8710bc":"## **Race**\n\nFor column \"race\" there were initally 10.08% percent NAN values in the data.\n\nAs shown below , If you are a black person there is 3 times bigger chance you will get killed by a police officer than a white guy, eventhough Black people are only 13% of the US population","b78728f0":"### **Age vs. flee attempts**\n\n* Younger flee people - tends to flee by foot\n* Unknown method of flee (e.g. - initally missing data), is similar to \"not fleeing\", suggesting that missing reports of fleeing is probably associated with not fleeing.","c9910463":"## **Threat level**\n\nThis column is made of 3 categories ([Additional reading](https:\/\/www.washingtonpost.com\/sf\/investigative\/2015\/10\/24\/on-duty-under-fire\/)):\n1. *Attack (~65%)*: there was direct and immediate threat to life. That would include incidents where officers or others were shot at, threatened with a gun, attacked with other weapons or physical force, etc. This is the highest level of threat\n2. *Other (~31%)*: incidents where officers or others faced significant threats. These shootings were most commonly of individuals who brandished knives and refused to drop them.\n3. *undetermined (~4%)*: all other incidents.","5ed2b845":"## **Name** \nThe most common name in the data is TK TK: ~3% from data. In journalism, [it means](https:\/\/en.wikipedia.org\/wiki\/To_come_(publishing)) that the data is unknown at the publicity time.\n","5b401ff2":"At a first glance, there are no fully-duplicate rows in the data. But since the data is loaded with 'TK TK' as names and 'Unknown' values, we will check the presence of a duplicate by the combination of: date, gender, race, state & city.\n\nThis reveals 16 pairs of suspected duplicate. But almost all pairs has its unique name. only one pair (3364 & 4246) seems as an actual duplicate and differ only with the flee value. Since it is just one value, we made a decision to keep the rows intact. ","c14bba73":"### **Race vs. body camera?**\n* While camera is off: White ~ 46%, Black ~ 22.6%\n* While camera is on: White ~ 37.6%, Black ~ 32.6%\n\n> It is reasonable to believe that when a police officer meets a black person, the body camera is turned on...","a68a69be":"## **Flee**\n\n* There are initially 4 categories of flee: Not fleeing, Car, Foot and Other. \n* In almost 60% of incidents, a flee wasn't recorded. That means that in most casese there was a face-to-face conflict.\n* There were initally 258 records with no data for this attribute. \n* We decided to set it as a fifth categoty - Unknown.","3d2f2220":"## **Signs of mental illness**\n\n[According to the NIH](https:\/\/www.nimh.nih.gov\/health\/statistics\/mental-illness.shtml) (National Institute of Mental Illness) the prevalence of Any Mental Illnes (AMI) is 18.9% of all U.S. adults, while the prevalence of (Serious Mental Illness) SMI is 4.5% of all U.S. adults. \nThe prevalence of mental illness among fatal shooting is 22.3% in average, but a slightly annual decrease can be observed (keep in mind that 2020 has partial data).\n\nThe high precentage can be due to equivalent categorizing such as AMI (i.e - whoever takes anti-depressants is suffering from mental illness) or maybe the presence of 'Suicide by cop' due to major depression.\nThe slight decline is expected since the police officers are probably trained better each year to deal will mentally illed people. ","f04228da":"### Year\nLooking at the timeline we can see there is almost a flat line representing the number of deaths over the years.\nThere is a decrease in the incidents number at 2016, possibly due to the presidential election year. Further investigation is required in 2021 to establish a possible connection.\n","62bf5208":"## **Missing Values**\n\nMissing values are present at 5 out of 13 columns in the dataset, with a relatively small amounts:\n\n* One missing value of 'gender' was filled as 'M'\n* 'Armed', 'Race' & 'Flee' will are filled with 'Unknown'\n* The 242 null values in 'Age' left as nulls.","0c538bd7":"# **Data Overview**\n---","cede3f4e":"### **Threat Level vs. Armed Category**\n* Declining percentage of 'hot' weapon according to threat level\n* Increase in 'Cold' and 'Unarmed' according to threat level\n* There is a linear correlation between Threat Level and the armed category","be27d472":"### Day of Week\nIt seems like there are more deaths in the middle of the week. Approximately 10% more.","63280945":"# **Summary**\n\nThis notebook presents links between different attributrs, personal observations and interpertations according to our understaning.\n\nMany other links were checked and excluded since it didn't donate sugnificant insights.\n\nThere are some insights that stand out of the EDA process, among them:\n* The decline in total number of deaths in 2016 is unclear. We suggest it may be related to the national election and the police state-of-mind that time. This could be further checked in the elections to come.\n* Normalizing the casualties' race to the population prevalence, there is a significant undeniable bias towards the 'Black' minority.\n* The use of a Teaser-gun is lower than expected, and the use of a gun seems to primarly be the first choice.\n* Normalizig the data according to population, the south & south-west states are more prone to shooting incidents to a wider degree.\n* There is a countinious decline of the percentage of incidents involving victims with signs of mentall illnes.\n* As a rule, women are only 4.4% of the annual incidents, and mainly - white woman.\n\nLooking forward - \n* This data is only half the story. Police officers are also killed on duty, sometimes in the same event a citizen is killed. We couldn't locate a dataset with police officers deaths, but a further comprehensive EDA is recommended if possible.\n* Exploring the data of this dataset at a single state or city level, looking for trends and explain it with domestic changes (e.g. unemployment rate, investments in education and so on), may lead to a better understanding of the federal data and may set a course to a better future.\n","e1ff1fb4":"## **Overview**","ce8c7ee2":"## **City**\n\nHere, too, we used an external data to normalize the data per city per 100,000 population for cities with more than 50,000 residents, using the 2019 estimation data of the US Census Bureu.\nFor the complete data table refer to [City and Town Population Totals: 2010-2019](https:\/\/www.census.gov\/data\/tables\/time-series\/demo\/popest\/2010s-total-cities-and-towns.html), *Annual Estimates of the Resident Population for Incorporated Places of 50,000 or More, Ranked by July 1, 2019 Population: April 1, 2010 to July 1, 2019*","a77d1c88":"> This project is the secnd assignment required in *Data Science Course, Naya College* and submitted to the instructor Dror Geva.\n> The project main purpose was to explore and practice the EDA process using PANDAS and MATPLOTLIB. We also used some newer packages (WordCloud, Plotly, pygal, seaborn) to plot data at the best possible way we found to fit the data presentation. ","cb7d5bc5":"## **Body Camera**\n\n* A boolean attribute, indicating whether the news report has indicated an officer was wearing a body camera and it may have recorded some portion of the incident. \n* In the vast majority of incidents, a body camera was *NOT* documented.\n* It doesn't necessary mean that the police officer didn't have a camera, but either it wasn't documented in the news report or the camera was OFF during the all event.\n* Currently, only NV & SC require all law enforcement agencies to use the cameras. Yet, the expectation for higher percerntage doesn't meet.\n* This data arouse susepicion of police bias. ","c7e051bc":"## **Date** \n\nEach line in the data has a date stamp. In order to analyze the data we added few more datetime attributes: Year, Month, Day, Day of Week, # Day of week, and a string concating the year and month.","857088dc":"## **State**\nAnalyzing the distribution of incidents per state, California is by far the most perdominant state in this dataset. However, this first three states in the sorted data are California, Texas & Florida, are also the most populated states in the US. \n\nTherefore we also normalized the data per state per 100,000, using the 2019 population data from 2019 estimation data of the US Census Bureu. In this scenario Alaska, with only 731,545 population, is now leading the list with more than 5 incidenets per 100,000. \n\nFor the complete data table refer to [State Population Totals and Components of Change: 2010-2019](https:\/\/www.census.gov\/data\/tables\/time-series\/demo\/popest\/2010s-state-total.html), *Annual Estimates of the Resident Population for the United States, Regions, States, and Puerto Rico: April 1, 2010 to July 1, 2019*\n\nNotice that although there are officially 50 states in the US, there are 51 'states' in the list of states in this dataframe. the additional state is the District of Columbia (DC) also known as **Washington D.C**.","16b6d175":"**The Data**\n\nIn 2015, The [Washington Post](https:\/\/www.washingtonpost.com\/graphics\/investigations\/police-shootings-database\/) began to log every fatal shooting by an on-duty police officer in the United States. In that time there have been more than 5,400 such shootings recorded by The Post. \nThe Post\u2019s data relies primarily on news accounts, social media postings and police reports.\nIn this notebook we used the most current dataset (taken directly from The Post, updated 04.08.2020) as the metadata.\n\nThe dataset is a tabular data, mainly constructed of categorical attributes. The 'age' attribute is the only linear numeric attribute in the file. In this notebook we explore each attribute in the data set, present it and mark our findings. Both internal and external links are explored where relevant.","f8ac299f":"There are 2820 unique cities in this attribute - an average of less than 2 incidents per city as shown in the histogram below. \n\nLooking at the absolute values of the first 20 cities, there are more than 20 cases for each. This means that a lot of cities has only 1 incident per city.","64f18897":"# **Fatal Police shootings**\n---\nSource: [Kaggle - Database of every fatal shooting in the United States by a police officer](https:\/\/www.kaggle.com\/mrmorj\/data-police-shootings)\n\n**Processed by: Guy Kahana & Anat Peled**","1eff377e":"## **Manner of Death** \nThere are two values for this attribute: Shot or Shot & Tasered. \nThe annual precenege of shot and Tasered (~5.0%) remains constant throuout the years.\nEventhough taser is less-lethal and we could excpect the police to use it more oftenly this is not the case.\n","dc70c648":"## **Gender**\n* 1 originally missing record filled to 'M'\n\n* Male gender is the majority the death ocurenses.\n\n* Throughout the years there is no change in the Malt to Female balance","ede37743":"## **Duplicates**","e98b8e6d":"# **Visualizations**","d45d8d86":"### **Age vs. Race-Gender** \n* Female \\ Male ratio is biggest in the white population\n* Asian, Native american and other minorities women in general are not involved it fatal shooting incidents","cdd98190":"## **Armed**\n* For this column there was initally 3.86% percent of NAN values in the data.\n>\n* In this specific column there is  a list of 93 armed options.\n>\n* We decided to divide in into three sub group: 'Hot' or 'Cold' weapon or unarmed.\n>\n* looking at these groups - the population is divided neearly equaly between hot and cold weapon: *50*%  for each group with tendency for Hot weapon."}}