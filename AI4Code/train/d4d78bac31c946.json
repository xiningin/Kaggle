{"cell_type":{"7f50f325":"code","bd0872f9":"code","76f16981":"code","b5df64af":"code","b510c2bb":"code","828cf658":"code","5430e8ae":"code","d4c4f11e":"code","72df52f0":"code","4af66941":"code","bc421047":"code","2d8aa199":"code","a4a348a1":"code","b3dc5950":"code","6a660477":"code","1cc06781":"code","4c5a07fd":"code","2c5b9bec":"code","3c556569":"code","6a22dd32":"code","8c722120":"code","8aa7e3c4":"code","ddf7752f":"code","436d0f60":"markdown","c22363c3":"markdown","f103bdb5":"markdown","87b2483d":"markdown","742ba500":"markdown","9d5be6f5":"markdown","b11bb588":"markdown","de347a48":"markdown","0108db6b":"markdown","6f75d536":"markdown","39590091":"markdown","8232f5df":"markdown","6c514045":"markdown","569c336c":"markdown","6e75ad9c":"markdown","afb5c091":"markdown"},"source":{"7f50f325":"#import libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt #data viz\nfrom matplotlib.gridspec import GridSpec #data viz\nimport seaborn as sns #data viz\n!pip install pywaffle\nfrom pywaffle import Waffle #data viz\nfrom sklearn.compose import ColumnTransformer #data preprocessing\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler #data preprocessing\nfrom sklearn.impute import KNNImputer #handle missing values\nfrom imblearn.over_sampling import SMOTE #balance classes\nfrom sklearn.model_selection import train_test_split #train\/test dataset\nfrom tensorflow.keras import layers, models #neural network architecture\nfrom tensorflow.keras.callbacks import EarlyStopping #regularization\nfrom tensorflow.keras.wrappers.scikit_learn import KerasClassifier\nfrom tensorflow import keras #keras\nimport tensorflow as tf #tensorflow\nfrom sklearn.metrics import accuracy_score, recall_score ,precision_score, f1_score#evaluate model","bd0872f9":"#Read In Dataset\npd.set_option('display.max_columns', None)\nstroke_data = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv', index_col='id')\nstroke_data.head()","76f16981":"#displays stats about the numerical features\nstroke_data.describe()","b5df64af":"#displays stats about the catagorical features\nstroke_data.describe(exclude = ['float', 'int64'])","b510c2bb":"#displays amount of null values for each column\nprint(stroke_data.isnull().sum())","828cf658":"#display percent of dataset with stroke\nperc_dis = stroke_data['stroke'].sum() \/ len(stroke_data)\nprint('Percent of patients in dataset with stroke:', round(perc_dis, 4))","5430e8ae":"fig = plt.figure(figsize = (24,10), dpi = 60)\ngs = GridSpec(ncols=10, nrows=12, left=0.05, right=0.5, wspace=0.2, hspace=0.1)\nfig.patch.set_facecolor('#f5f5f5')\nsns.set_palette(sns.color_palette(['#00f5d4','#f15bb5']))\n\nax1 = fig.add_subplot(gs[3:5, 0:4])\nax2 = fig.add_subplot(gs[8:, 0:4])\nax3 = fig.add_subplot(gs[3:, 6:])\n\n# axes list\naxes = [ ax1,ax2, ax3]\n\n# setting of axes; visibility of axes and spines turn off\nfor ax in axes:\n    ax.axes.get_yaxis().set_visible(False)\n    ax.set_facecolor('#f5f5f5')\n    \n    for loc in ['left', 'right', 'top', 'bottom']:\n        ax.spines[loc].set_visible(False)\n\n\n\n#-------Ax 1------------------------------------------------\nsns.kdeplot('age', data=stroke_data, ax=ax1, shade=True, color='#9b5de5', alpha=1)\nax1.set_xlabel('Age', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax1.text(-20, 0.035, 'Overall Age Distribution', {'font':'Serif', 'size':'25','color': 'black','weight':'bold'})\nax1.text(-20, 0.0275, 'The dataset contains a fairly balanced distribution \\nof samples respective to age.',\n         {'font':'Serif', 'color': 'black', 'size':14})\nax1.text(50, 0.019, 'Total',{'font':'Serif', 'size':'16','color': '#9b5de5','weight':'bold'})\nax1.text(68, 0.019, '=',{'font':'Serif', 'size':'16','color': 'black','weight':'bold'})\nax1.text(75, 0.019, 'Stroke',{'font':'Serif', 'size':'16','color': '#f15bb5','weight':'bold'})\nax1.text(98.5, 0.019, '+',{'font':'Serif', 'size':'16','color': 'black','weight':'bold'})\nax1.text(105, 0.019, 'Healthy',{'font':'Serif', 'size':'16','color': '#00c5a4','weight':'bold'})\n\n#-------Ax 2------------------------------------------------\nsns.kdeplot('age', data=stroke_data[stroke_data.stroke==0], ax=ax2, shade=True, \n            color='#00f5d4', alpha=1)\nsns.kdeplot('age', data=stroke_data[stroke_data.stroke==1], ax=ax2, shade=True, \n            color='#f15bb5', alpha=0.8)\nax2.set_xlabel('Age', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax2.text(-20, 0.06, 'Age Distribution by Stroke', {'font':'Serif', 'size':'25','color': 'black','weight':'bold'})\nax2.text(-20, 0.05, 'There is a clear relationship present between age and\\nstroke: as age increase so does ' +\\\n                         'risk of stroke.',\n         {'font':'Serif', 'color': 'black', 'size':14})\nax2.text(50, 0.042,'Stroke', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'#f15bb5'})\nax2.text(75, 0.042,'|', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax2.text(80, 0.042,'Healthy', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'#00c5a4'})\n\n#-------Ax 3------------------------------------------------\nax3.get_yaxis().set_visible(True)\nsns.violinplot(x='age', y='gender', data=stroke_data[stroke_data.gender!='Other'],\n               hue='stroke', ax=ax3, aspect=2, inner=None)\nax3.set_yticklabels( labels = ['Male', 'Female'],\n                fontdict = {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax3.set_ylabel('')\nax3.set_xlabel('Age', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax3.get_legend().remove()\nax3.text(-40, -0.975, 'Sex, Age, and Stroke', {'font':'Serif', 'size':'25','color': 'black','weight':'bold'})\nax3.text(-40, -0.7, 'Both males and females have a greater risk of stroke as\\nthey age. However, ' +\\\n         'females are prone to suffer strokes\\nfrom younger ages in comparison.', \n         {'font':'Serif', 'color': 'black', 'size':14})\nax3.text(25,-0.55,'Stroke', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'#f15bb5'})\nax3.text(50,-0.55,'|', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax3.text(55,-0.55,'Healthy', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'#00c5a4'})\n#---------------------------------------------------------------\nfig.text(0.19, 0.9, 'Strokes by Age', {'font':'Serif', 'weight':'bold','color': 'black', 'size':35})\nplt.show()\n","d4c4f11e":"fig = plt.figure(figsize = (24,10), dpi = 60)\ngs = GridSpec(ncols=10, nrows=12, left=0.05, right=0.5, wspace=0.2, hspace=0.1)\nfig.patch.set_facecolor('#f5f5f5')\nsns.set_palette(sns.color_palette(['#00f5d4','#f15bb5']))\n\nax1 = fig.add_subplot(gs[3:5, 0:4])\nax2 = fig.add_subplot(gs[8:, 0:4])\nax3 = fig.add_subplot(gs[3:, 7:])\n\n# axes list\naxes = [ ax1,ax2, ax3]\n\n# setting of axes; visibility of axes and spines turn off\nfor ax in axes:\n    ax.axes.get_yaxis().set_visible(False)\n    ax.set_facecolor('#f5f5f5')\n    \n    for loc in ['left', 'right', 'top', 'bottom']:\n        ax.spines[loc].set_visible(False)\n\n\n\n#-------Ax 1------------------------------------------------\nsns.kdeplot('avg_glucose_level', data=stroke_data, ax=ax1, shade=True, color='#9b5de5', alpha=1)\nax1.set_xlabel('Average Glucose Level', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax1.text(-50, 0.039, 'Overall Glucose Distribution', \n         {'font':'Serif', 'size':'25','color': 'black','weight':'bold'})\nax1.text(-50, 0.021, 'The majority of data points are between around 80-120 which\\nis a healthy level. ' +\\\n         'There are also a large amount of data points\\nfor glucose levels above 200. ' +\\\n         'People who are diabetic have\\naverage glucose levels in this range so it may represent\\ndiabetics.',\n         {'font':'Serif', 'color': 'black', 'size':14})\nax1.text(150, 0.019, 'Total',{'font':'Serif', 'size':'16','color': '#9b5de5','weight':'bold'})\nax1.text(195, 0.019, '=',{'font':'Serif', 'size':'16','color': 'black','weight':'bold'})\nax1.text(210, 0.019, 'Stroke',{'font':'Serif', 'size':'16','color': '#f15bb5','weight':'bold'})\nax1.text(270, 0.019, '+',{'font':'Serif', 'size':'16','color': 'black','weight':'bold'})\nax1.text(290, 0.019, 'Healthy',{'font':'Serif', 'size':'16','color': '#00c5a4','weight':'bold'})\n\n#-------Ax 2------------------------------------------------\nsns.kdeplot('avg_glucose_level', data=stroke_data[stroke_data.stroke==0], ax=ax2, shade=True, \n            color='#00f5d4', alpha=1)\nsns.kdeplot('avg_glucose_level', data=stroke_data[stroke_data.stroke==1], ax=ax2, shade=True, \n            color='#f15bb5', alpha=0.8)\nax2.set_xlabel('Average Glucose Level', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax2.text(-109, 0.0225, 'Glucose Distribution by Stroke', {'font':'Serif', 'size':'25','color': 'black','weight':'bold'})\nax2.text(-109, 0.019, 'There is a clear relationship present between average glucose\\nlevels and stroke: as glucose levels' +\\\n         ' increase so does risk of stroke.',\n         {'font':'Serif', 'color': 'black', 'size':14})\nax2.text(200, 0.014,'Stroke', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'#f15bb5'})\nax2.text(275, 0.014,'|', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax2.text(285, 0.014,'Healthy', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'#00c5a4'})\n\n#-------Ax 3------------------------------------------------\nax3.get_yaxis().set_visible(True)\nsns.violinplot(x='avg_glucose_level', y='gender', data=stroke_data[stroke_data.gender!='Other'],\n               hue='stroke', ax=ax3, aspect=2, inner=None)\nax3.set_yticklabels( labels = ['Male', 'Female'],\n                fontdict = {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax3.set_ylabel('')\nax3.set_xlabel('Average Glucose Level', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax3.get_legend().remove()\nax3.text(-220, -1.085, 'Sex, Glucose Levels, and Stroke', {'font':'Serif', 'size':'25','color': 'black','weight':'bold'})\nax3.text(-220, -0.875, 'Both males and females have a similar risk of stroke as\\naverage glucose levels rise', \n         {'font':'Serif', 'color': 'black', 'size':14})\nax3.text(200,-0.55,'Stroke', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'#f15bb5'})\nax3.text(295,-0.55,'|', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax3.text(305,-0.55,'Healthy', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'#00c5a4'})\n#---------------------------------------------------------------\nfig.text(0.135, 0.9, 'Strokes by Glucose Level', {'font':'Serif', 'weight':'bold','color': 'black', 'size':35})\nplt.show()","72df52f0":"fig = plt.figure(figsize = (24,10), dpi = 60)\ngs = GridSpec(ncols=10, nrows=12, left=0.05, right=0.5, wspace=0.2, hspace=0.1)\nfig.patch.set_facecolor('#f5f5f5')\nsns.set_palette(sns.color_palette(['#00f5d4','#f15bb5']))\n\nax1 = fig.add_subplot(gs[3:5, 0:4])\nax2 = fig.add_subplot(gs[8:, 0:4])\nax3 = fig.add_subplot(gs[3:, 7:])\n\n# axes list\naxes = [ ax1,ax2, ax3]\n\n# setting of axes; visibility of axes and spines turn off\nfor ax in axes:\n    ax.axes.get_yaxis().set_visible(False)\n    ax.set_facecolor('#f5f5f5')\n    \n    for loc in ['left', 'right', 'top', 'bottom']:\n        ax.spines[loc].set_visible(False)\n\n\n\n#-------Ax 1------------------------------------------------\nsns.kdeplot('bmi', data=stroke_data, ax=ax1, shade=True, color='#9b5de5', alpha=1)\nax1.set_xlabel('BMI', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax1.text(-10, 0.11, 'Overall BMI Distribution', \n         {'font':'Serif', 'size':'25','color': 'black','weight':'bold'})\nax1.text(-10, 0.095, 'The data displays a normal distribution',\n         {'font':'Serif', 'color': 'black', 'size':14})\nax1.text(40, 0.06, 'Total',{'font':'Serif', 'size':'16','color': '#9b5de5','weight':'bold'})\nax1.text(57, 0.06, '=',{'font':'Serif', 'size':'16','color': 'black','weight':'bold'})\nax1.text(63, 0.06, 'Stroke',{'font':'Serif', 'size':'16','color': '#f15bb5','weight':'bold'})\nax1.text(85, 0.06, '+',{'font':'Serif', 'size':'16','color': 'black','weight':'bold'})\nax1.text(90, 0.06, 'Healthy',{'font':'Serif', 'size':'16','color': '#00c5a4','weight':'bold'})\n\n#-------Ax 2------------------------------------------------\nsns.kdeplot('bmi', data=stroke_data[stroke_data.stroke==0], ax=ax2, shade=True, \n            color='#00f5d4', alpha=1)\nsns.kdeplot('bmi', data=stroke_data[stroke_data.stroke==1], ax=ax2, shade=True, \n            color='#f15bb5', alpha=0.8)\nax2.set_xlabel('BMI', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax2.text(-10, 0.1, 'BMI Distribution by Stroke', {'font':'Serif', 'size':'25','color': 'black','weight':'bold'})\nax2.text(-10, 0.085, 'It appears there is a slight relationship between BMI and stroke.\\n' +\\\n         'As BMI increase, the chance of stroke increases slightly',\n         {'font':'Serif', 'color': 'black', 'size':14})\nax2.text(70, 0.06,'Stroke', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'#f15bb5'})\nax2.text(92.5, 0.06,'|', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax2.text(97.5, 0.06,'Healthy', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'#00c5a4'})\n\n#-------Ax 3------------------------------------------------\nax3.get_yaxis().set_visible(True)\nsns.violinplot(x='bmi', y='gender', data=stroke_data[stroke_data.gender!='Other'],\n               hue='stroke', ax=ax3, aspect=2, inner=None)\nax3.set_yticklabels( labels = ['Male', 'Female'],\n                fontdict = {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax3.set_ylabel('')\nax3.set_xlabel('BMI', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax3.text(-50, -0.85, 'Sex, BMI, and Stroke', {'font':'Serif', 'size':'25','color': 'black','weight':'bold'})\nax3.text(-50, -0.67, 'Males and females have a similar BMI-stroke\\ndistribution.', \n         {'font':'Serif', 'color': 'black', 'size':14})\nax3.text(40,-0.55,'Stroke', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'#f15bb5'})\nax3.text(70,-0.55,'|', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax3.text(75,-0.55,'Healthy', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'#00c5a4'})\n#---------------------------------------------------------------\nfig.text(0.17, 0.85, 'Strokes by BMI', {'font':'Serif', 'weight':'bold','color': 'black', 'size':35})\nplt.show()","4af66941":"males_total = stroke_data.groupby('gender').gender.count()['Male']\nper_males_healthy = stroke_data[stroke_data.stroke==0].groupby('gender').gender.count()['Male'] \/ males_total\nper_males_stroke = stroke_data[stroke_data.stroke==1].groupby('gender').gender.count()['Male'] \/ males_total\nmales_healthy = round(per_males_healthy * 25, 0)\nmales_stroke = round(per_males_stroke * 25, )\nfemales_total = stroke_data.groupby('gender').gender.count()['Female']\nper_females_healthy = stroke_data[stroke_data.stroke==0].groupby('gender').gender.count()['Female'] \/ females_total\nper_females_stroke = stroke_data[stroke_data.stroke==1].groupby('gender').gender.count()['Female'] \/ females_total\nfemales_healthy = round(per_females_healthy * 25, 0)\nfemales_stroke = round(per_females_stroke * 25, 0)\n\n\n\nfig = plt.figure(FigureClass = Waffle, \n                 constrained_layout = True,\n                 figsize = (7,7),\n                 facecolor = '#f5f5f5',dpi = 100,\n                 \n                 plots = {121: #plots males with and without stroke\n                          {     \n                           'rows':5,\n                           'columns': 5,\n                           'values' : [males_healthy, males_stroke],\n                            'colors' : ['#00f5d4','#f15bb5'],\n                              'vertical' : True,\n                              'interval_ratio_y': 0.1,\n                              'interval_ratio_x': 0.1,\n                              'icons' : 'male',\n                              'icon_legend': False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.1\n                          },\n                          \n                          122 : #plots females with and without stroke\n                          { \n                            'rows': 5,\n                            'columns':5,\n                            'values':[females_healthy, females_stroke],         \n                              'colors' : ['#00f5d4','#f15bb5'],\n                              'vertical': True,\n                              'interval_ratio_y': 0.1,\n                              'interval_ratio_x': 0.1,\n                              'icons' : 'female',\n                              'icon_legend' :False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.1\n                                                      \n                           }\n                         },\n                   \n)\n\nfig.text(0.35, 0.75, 'Strokes by Sex', {'font':'Serif', 'weight':'bold','color': 'black', 'size':20})\nfig.text(0.24, 0.675, 'Male', {'font':'Serif', 'weight':'bold','color': 'black', 'size':16})\nfig.text(0.19, 0.27, 'Total: ' + str(males_total), {'font':'Serif', 'weight':'bold','color': 'black', 'size':14})\nfig.text(0.635, 0.675, 'Female', {'font':'Serif', 'weight':'bold','color': 'black', 'size':16})\nfig.text(0.61, 0.27, 'Total: ' + str(females_total), {'font':'Serif', 'weight':'bold','color': 'black', 'size':14})\nfig.text(0.4, 0.65, str(int(per_males_stroke * 100)) + '%', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(0.815, 0.65, str(int(per_females_stroke * 100)) + '%', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(.9, 0.72, 'Stroke', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(1.01, 0.72, '|', {'font':'Serif', 'weight':'bold','color': 'black', 'size':14})\nfig.text(1.03, 0.72, 'Healthy', {'font':'Serif', 'weight':'bold','color': '#00c5a4', 'size':14})\nfig.text(.87, 0.35, \n         'Males and females both suffer\\nstrokes at a similar proportion.\\n' +\\\n         'About 5% of males and 4% of\\nfemales in the dataset suffered\\na stroke.' +\\\n         '\\n\\n\\nThe data contains almost 50%\\nmore females than males. It is\\n' +\\\n         'worth noting as it may impact\\nour predictive models.', \n         {'font':'Serif', 'weight':'normal','color': 'black', 'size':12})\n\nplt.show()","bc421047":"no_hypertension_total = stroke_data.groupby('hypertension').hypertension.count()[0]\nper_no_hypertension_healthy = stroke_data[stroke_data.stroke==0].groupby('hypertension').hypertension.count()[0] \/ no_hypertension_total\nper_no_hypertension_stroke = stroke_data[stroke_data.stroke==1].groupby('hypertension').hypertension.count()[0] \/ no_hypertension_total\nno_hypertension_healthy = round(per_no_hypertension_healthy * 25, 0)\nno_hypertension_stroke = round(per_no_hypertension_stroke * 25, )\nhypertension_total = stroke_data.groupby('hypertension').hypertension.count()[1]\nper_hypertension_healthy = stroke_data[stroke_data.stroke==0].groupby('hypertension').hypertension.count()[1] \/ hypertension_total\nper_hypertension_stroke = stroke_data[stroke_data.stroke==1].groupby('hypertension').hypertension.count()[1] \/ hypertension_total\nhypertension_healthy = round(per_hypertension_healthy * 25, 0)\nhypertension_stroke = round(per_hypertension_stroke * 25, 0)\n\n\n\nfig = plt.figure(FigureClass = Waffle, \n                 constrained_layout = True,\n                 figsize = (7,7),\n                 facecolor = '#f5f5f5',dpi = 100,\n                 \n                 plots = {121:\n                          {     \n                           'rows':5,\n                           'columns': 5,\n                           'values' : [no_hypertension_healthy, no_hypertension_stroke],\n                            'colors' : ['#00f5d4','#f15bb5'],\n                              'vertical' : True,\n                              'interval_ratio_y': 0.1,\n                              'interval_ratio_x': 0.1,\n                              'icons' : 'heart',\n                              'icon_legend': False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.1\n                          },\n                          \n                          122 : \n                          { \n                            'rows': 5,\n                            'columns':5,\n                            'values':[hypertension_healthy, hypertension_stroke],         \n                              'colors' : ['#00f5d4','#f15bb5'],\n                              'vertical': True,\n                              'interval_ratio_y': 0.1,\n                              'interval_ratio_x': 0.1,\n                              'icons' : 'heartbeat',\n                              'icon_legend' :False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.1\n                                                      \n                           }\n                         },\n                   \n)\n\nfig.text(0.23, 0.75, 'Strokes by Hypertension', {'font':'Serif', 'weight':'bold','color': 'black', 'size':20})\nfig.text(0.15, 0.7, 'No Hypertension', {'font':'Serif', 'weight':'bold','color': 'black', 'size':16})\nfig.text(0.21, 0.27, 'Total: ' + str(no_hypertension_total), {'font':'Serif', 'weight':'bold','color': 'black', 'size':14})\nfig.text(0.59, 0.7, 'Hypertension', {'font':'Serif', 'weight':'bold','color': 'black', 'size':16})\nfig.text(0.63, 0.27, 'Total: ' + str(hypertension_total), {'font':'Serif', 'weight':'bold','color': 'black', 'size':14})\nfig.text(0.42, 0.65, str(int(per_no_hypertension_stroke * 100)) + '%', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(0.8, 0.65, str(int(per_hypertension_stroke * 100)) + '%', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(.9, 0.72, 'Stroke', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(1.01, 0.72, '|', {'font':'Serif', 'weight':'bold','color': 'black', 'size':14})\nfig.text(1.03, 0.72, 'Healthy', {'font':'Serif', 'weight':'bold','color': '#00c5a4', 'size':14})\nfig.text(.89, 0.3, \n         'It is clear that those with\\nhypertension are at a far\\ngreater risk of stroke.\\n' +\\\n         '\\n\\n\\nOnly about 3% of patients\\nwithout hypertension have\\nhad a stroke. Meanwhile,\\n' +\\\n         '13% of those with\\nhypertension have had a\\nstroke.', \n         {'font':'Serif', 'weight':'normal','color': 'black', 'size':12})\n\nplt.show()","2d8aa199":"no_heart_disease_total = stroke_data.groupby('heart_disease').heart_disease.count()[0]\nper_no_heart_disease_healthy = stroke_data[stroke_data.stroke==0].groupby('heart_disease').heart_disease.count()[0] \/ no_heart_disease_total\nper_no_heart_disease_stroke = stroke_data[stroke_data.stroke==1].groupby('heart_disease').heart_disease.count()[0] \/ no_heart_disease_total\nno_heart_disease_healthy = round(per_no_heart_disease_healthy * 25, 0)\nno_heart_disease_stroke = round(per_no_heart_disease_stroke * 25, )\nheart_disease_total = stroke_data.groupby('heart_disease').heart_disease.count()[1]\nper_heart_disease_healthy = stroke_data[stroke_data.stroke==0].groupby('heart_disease').heart_disease.count()[1] \/ heart_disease_total\nper_heart_disease_stroke = stroke_data[stroke_data.stroke==1].groupby('heart_disease').heart_disease.count()[1] \/ heart_disease_total\nheart_disease_healthy = round(per_heart_disease_healthy * 25, 0)\nheart_disease_stroke = round(per_heart_disease_stroke * 25, 0)\n\n\n\nfig = plt.figure(FigureClass = Waffle, \n                 constrained_layout = True,\n                 figsize = (7,7),\n                 facecolor = '#f5f5f5',dpi = 100,\n                 \n                 plots = {121: \n                          {     \n                           'rows':5,\n                           'columns': 5,\n                           'values' : [no_heart_disease_healthy, no_heart_disease_stroke],\n                            'colors' : ['#00f5d4','#f15bb5'],\n                              'vertical' : True,\n                              'interval_ratio_y': 0.1,\n                              'interval_ratio_x': 0.1,\n                              'icons' : 'heart',\n                              'icon_legend': False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.1\n                          },\n                          \n                          122 : \n                          { \n                            'rows': 5,\n                            'columns':5,\n                            'values':[heart_disease_healthy, heart_disease_stroke],         \n                              'colors' : ['#00f5d4','#f15bb5'],\n                              'vertical': True,\n                              'interval_ratio_y': 0.1,\n                              'interval_ratio_x': 0.1,\n                              'icons' : 'heartbeat',\n                              'icon_legend' :False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.1\n                                                      \n                           }\n                         },\n                   \n)\n\nfig.text(0.22, 0.75, 'Strokes by Heart Disease', {'font':'Serif', 'weight':'bold','color': 'black', 'size':20})\nfig.text(0.14, 0.7, 'No Heart Disease', {'font':'Serif', 'weight':'bold','color': 'black', 'size':16})\nfig.text(0.2, 0.27, 'Total: ' + str(no_heart_disease_total), {'font':'Serif', 'weight':'bold','color': 'black', 'size':14})\nfig.text(0.59, 0.7, 'Heart Disease', {'font':'Serif', 'weight':'bold','color': 'black', 'size':16})\nfig.text(0.64, 0.27, 'Total: ' + str(heart_disease_total), {'font':'Serif', 'weight':'bold','color': 'black', 'size':14})\nfig.text(0.41, 0.65, str(int(per_no_heart_disease_stroke * 100)) + '%', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(0.81, 0.65, str(int(per_heart_disease_stroke * 100)) + '%', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(.9, 0.72, 'Stroke', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(1.01, 0.72, '|', {'font':'Serif', 'weight':'bold','color': 'black', 'size':14})\nfig.text(1.03, 0.72, 'Healthy', {'font':'Serif', 'weight':'bold','color': '#00c5a4', 'size':14})\nfig.text(.89, 0.45, \n         'Heart disease is another major\\nfactor in one\\'s risk of stroke.' +\\\n         '\\nAlmost a fifth of all patients with\\nheart disease ' +\\\n         'suffered a stroke.', \n         {'font':'Serif', 'weight':'normal','color': 'black', 'size':12})\n\nplt.show()","a4a348a1":"married_total = stroke_data.groupby('ever_married').ever_married.count()['Yes']\nper_married_healthy = stroke_data[stroke_data.stroke==0].groupby('ever_married').ever_married.count()['Yes'] \/ married_total\nper_married_stroke = stroke_data[stroke_data.stroke==1].groupby('ever_married').ever_married.count()['Yes'] \/ married_total\nmarried_healthy = round(per_married_healthy * 25, 0)\nmarried_stroke = round(per_married_stroke * 25, )\nnot_married_total = stroke_data.groupby('ever_married').ever_married.count()['No']\nper_not_married_healthy = stroke_data[stroke_data.stroke==0].groupby('ever_married').ever_married.count()['No'] \/ not_married_total\nper_not_married_stroke = stroke_data[stroke_data.stroke==1].groupby('ever_married').ever_married.count()['No'] \/ not_married_total\nnot_married_healthy = round(per_not_married_healthy * 25, 0)\nnot_married_stroke = round(per_not_married_stroke * 25, 0)\n\n\n\nfig = plt.figure(FigureClass = Waffle, \n                 constrained_layout = True,\n                 figsize = (7,7),\n                 facecolor = '#f5f5f5',dpi = 100,\n                 \n                 plots = {121: \n                          {     \n                           'rows':5,\n                           'columns': 5,\n                           'values' : [married_healthy, married_stroke],\n                            'colors' : ['#00f5d4','#f15bb5'],\n                              'vertical' : True,\n                              'interval_ratio_y': 0.1,\n                              'interval_ratio_x': 0.1,\n                              'icons' : 'ring',\n                              'icon_legend': False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.1\n                          },\n                          \n                          122 : \n                          { \n                            'rows': 5,\n                            'columns':5,\n                            'values':[not_married_healthy, not_married_stroke],         \n                              'colors' : ['#00f5d4','#f15bb5'],\n                              'vertical': True,\n                              'interval_ratio_y': 0.1,\n                              'interval_ratio_x': 0.1,\n                              'icons' : 'child',\n                              'icon_legend' :False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.1\n                                                      \n                           }\n                         },\n                   \n)\n\nfig.text(0.29, 0.75, 'Strokes by Marriage', {'font':'Serif', 'weight':'bold','color': 'black', 'size':20})\nfig.text(0.24, 0.675, 'Married', {'font':'Serif', 'weight':'bold','color': 'black', 'size':16})\nfig.text(0.21, 0.27, 'Total: ' + str(married_total), {'font':'Serif', 'weight':'bold','color': 'black', 'size':14})\nfig.text(0.635, 0.675, 'Single', {'font':'Serif', 'weight':'bold','color': 'black', 'size':16})\nfig.text(0.62, 0.27, 'Total: ' + str(not_married_total), {'font':'Serif', 'weight':'bold','color': 'black', 'size':14})\nfig.text(0.41, 0.65, str(int(per_married_stroke * 100)) + '%', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(0.815, 0.65, str(int(per_not_married_stroke * 100)) + '%', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(.9, 0.72, 'Stroke', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(1.01, 0.72, '|', {'font':'Serif', 'weight':'bold','color': 'black', 'size':14})\nfig.text(1.03, 0.72, 'Healthy', {'font':'Serif', 'weight':'bold','color': '#00c5a4', 'size':14})\nfig.text(.89, 0.35, \n         'Those who have ever been married\\nare at a higher risk of stroke. This\\nmay ' +\\\n         'be due to the additional\\nstressors of married life taking its\\ntoll.' +\\\n         '\\n\\n\\n6% of those who were ever married\\nsuffered a stroke and just 1% of\\nthose ' +\\\n         'who were never married\\nsuffered a stroke.', \n         {'font':'Serif', 'weight':'normal','color': 'black', 'size':12})\n\nplt.show()","b3dc5950":"govt_job_total = stroke_data.groupby('work_type').work_type.count()['Govt_job']\nper_govt_job_healthy = stroke_data[stroke_data.stroke==0].groupby('work_type').work_type.count()['Govt_job'] \/ govt_job_total\nper_govt_job_stroke = stroke_data[stroke_data.stroke==1].groupby('work_type').work_type.count()['Govt_job'] \/ govt_job_total\ngovt_job_healthy = round(per_govt_job_healthy * 25, 0)\ngovt_job_stroke = round(per_govt_job_stroke * 25, 0)\n#---------------------------------------------------------------------\nnever_worked_total = stroke_data.groupby('work_type').work_type.count()['Never_worked']\nper_never_worked_healthy = stroke_data[stroke_data.stroke==0].groupby('work_type').work_type.count()['Never_worked'] \/ never_worked_total\nper_never_worked_stroke =  0 #no instances of never worked + stroke\nnever_worked_healthy = round(per_never_worked_healthy * 25, 0)\nnever_worked_stroke = round(per_never_worked_stroke * 25, 0)\n#-----------------------------------------------------------------------\nprivate_total = stroke_data.groupby('work_type').work_type.count()['Private']\nper_private_healthy = stroke_data[stroke_data.stroke==0].groupby('work_type').work_type.count()['Private'] \/ private_total\nper_private_stroke = stroke_data[stroke_data.stroke==1].groupby('work_type').work_type.count()['Private'] \/ private_total\nprivate_healthy = round(per_private_healthy * 25, 0)\nprivate_stroke = round(per_private_stroke * 25, 0)\n#--------------------------------------------------------------------\nself_employed_total = stroke_data.groupby('work_type').work_type.count()['Self-employed']\nper_self_employed_healthy = stroke_data[stroke_data.stroke==0].groupby('work_type').work_type.count()['Self-employed'] \/ self_employed_total\nper_self_employed_stroke = stroke_data[stroke_data.stroke==1].groupby('work_type').work_type.count()['Self-employed'] \/ self_employed_total\nself_employed_healthy = round(per_self_employed_healthy * 25, 0)\nself_employed_stroke = round(per_self_employed_stroke * 25, 0)\n#--------------------------------------------------------------------\nchildren_total = stroke_data.groupby('work_type').work_type.count()['children']\nper_children_healthy = stroke_data[stroke_data.stroke==0].groupby('work_type').work_type.count()['children'] \/ children_total\nper_children_stroke = stroke_data[stroke_data.stroke==1].groupby('work_type').work_type.count()['children'] \/ children_total\nchildren_healthy = round(per_children_healthy * 25, 0)\nchildren_stroke = round(per_children_stroke * 25, 0)\n#--------------------------------------------------------------------\n\n\n\nfig = plt.figure(FigureClass = Waffle, \n                 constrained_layout = True,\n                 figsize = (9,9),\n                 facecolor = '#f5f5f5',dpi = 100,\n                 \n                 plots = {\n                     151:\n                          {     \n                           'rows':5,\n                           'columns': 5,\n                           'values' : [govt_job_healthy, govt_job_stroke],\n                            'colors' : ['#00f5d4','#f15bb5'],\n                              'vertical' : True,\n                              'interval_ratio_y': 0.005,\n                              'interval_ratio_x': 0.005,\n                              'icons' : 'landmark',\n                              'icon_legend': False,\n                              'icon_size':15,\n                              'plot_anchor':'C',\n                              'alpha':0.1\n                          },\n                          \n                        152 :\n                          { \n                            'rows': 5,\n                            'columns':5,\n                            'values':[never_worked_healthy, never_worked_stroke],         \n                              'colors' : ['#00f5d4','#f15bb5'],\n                              'vertical': True,\n                              'interval_ratio_y': 0.005,\n                              'interval_ratio_x': 0.005,\n                              'icons' : 'male',\n                              'icon_legend' :False,\n                              'icon_size':15,\n                              'plot_anchor':'C',\n                              'alpha':0.1\n                                                      \n                           },\n                          \n                        153 :\n                          { \n                            'rows': 5,\n                            'columns':5,\n                            'values':[private_healthy, private_stroke],         \n                              'colors' : ['#00f5d4','#f15bb5'],\n                              'vertical': True,\n                              'interval_ratio_y': 0.005,\n                              'interval_ratio_x': 0.005,\n                              'icons' : 'building',\n                              'icon_legend' :False,\n                              'icon_size':15,\n                              'plot_anchor':'C',\n                              'alpha':0.1\n                                                      \n                           },\n                     \n                        154 :\n                          { \n                            'rows': 5,\n                            'columns':5,\n                            'values':[self_employed_healthy, self_employed_stroke],         \n                              'colors' : ['#00f5d4','#f15bb5'],\n                              'vertical': True,\n                              'interval_ratio_y': 0.005,\n                              'interval_ratio_x': 0.005,\n                              'icons' : 'laptop-house',\n                              'icon_legend' :False,\n                              'icon_size':15,\n                              'plot_anchor':'C',\n                              'alpha':0.1\n                                                      \n                           },\n                     \n                        155 :\n                          { \n                            'rows': 5,\n                            'columns':5,\n                            'values':[children_healthy, children_stroke],         \n                              'colors' : ['#00f5d4','#f15bb5'],\n                              'vertical': True,\n                              'interval_ratio_y': 0.005,\n                              'interval_ratio_x': 0.005,\n                              'icons' : 'baby',\n                              'icon_legend' :False,\n                              'icon_size':15,\n                              'plot_anchor':'C',\n                              'alpha':0.1\n                                                      \n                           }\n                     \n                         },\n                   \n)\n\nfig.text(0.25, 0.75, 'Strokes by Job Type', {'font':'Serif', 'weight':'bold','color': 'black', 'size':20})\nfig.text(0.14, 0.6, 'Government', {'font':'Serif', 'weight':'bold','color': 'black', 'size':10})\nfig.text(0.145, 0.4, 'Total: ' + str(govt_job_total), {'font':'Serif', 'weight':'bold','color': 'black', 'size':12})\nfig.text(0.28, 0.6, 'Never Employed', {'font':'Serif', 'weight':'bold','color': 'black', 'size':10})\nfig.text(0.3, 0.4, 'Total: ' + str(never_worked_total), {'font':'Serif', 'weight':'bold','color': 'black', 'size':12})\nfig.text(0.48, 0.6, 'Private', {'font':'Serif', 'weight':'bold','color': 'black', 'size':10})\nfig.text(0.45, 0.4, 'Total: ' + str(private_total), {'font':'Serif', 'weight':'bold','color': 'black', 'size':12})\nfig.text(0.61, 0.6, 'Self-Employed', {'font':'Serif', 'weight':'bold','color': 'black', 'size':10})\nfig.text(0.62, 0.4, 'Total: ' + str(self_employed_total), {'font':'Serif', 'weight':'bold','color': 'black', 'size':12})\nfig.text(0.75, 0.6, 'Works with Children', {'font':'Serif', 'weight':'bold','color': 'black', 'size':10})\nfig.text(0.775, 0.4, 'Total: ' + str(children_total), {'font':'Serif', 'weight':'bold','color': 'black', 'size':12})\nfig.text(0.23, 0.57, str(int(per_govt_job_stroke * 100)) + '%', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(0.37, 0.57, str(int(per_never_worked_stroke * 100)) + '%', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(0.54, 0.57, str(int(per_private_stroke * 100)) + '%', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(0.7, 0.57, str(int(per_self_employed_stroke * 100)) + '%', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(0.85, 0.57, str(int(per_children_stroke * 100)) + '%', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(.7, 0.72, 'Stroke', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(.79, 0.72, '|', {'font':'Serif', 'weight':'bold','color': 'black', 'size':14})\nfig.text(.8, 0.72, 'Healthy', {'font':'Serif', 'weight':'bold','color': '#00c5a4', 'size':14})\nfig.text(.1, 0.65, \n         'Working with children or not working at all seem to lower risk of suffering\\nstroke when in comaprison ' +\\\n         'to working in government, in the private sector\\nor being self-employed.', \n         {'font':'Serif', 'weight':'normal','color': 'black', 'size':10})\n\nplt.show()","6a660477":"rural_total = stroke_data.groupby('Residence_type').Residence_type.count()['Rural']\nper_rural_healthy = stroke_data[stroke_data.stroke==0].groupby('Residence_type').Residence_type.count()['Rural'] \/ rural_total\nper_rural_stroke = stroke_data[stroke_data.stroke==1].groupby('Residence_type').Residence_type.count()['Rural'] \/ rural_total\nrural_healthy = round(per_rural_healthy * 25, 0)\nrural_stroke = round(per_rural_stroke * 25, )\nurban_total = stroke_data.groupby('Residence_type').Residence_type.count()['Urban']\nper_urban_healthy = stroke_data[stroke_data.stroke==0].groupby('Residence_type').Residence_type.count()['Urban'] \/ urban_total\nper_urban_stroke = stroke_data[stroke_data.stroke==1].groupby('Residence_type').Residence_type.count()['Urban'] \/ urban_total\nurban_healthy = round(per_urban_healthy * 25, 0)\nurban_stroke = round(per_urban_stroke * 25, 0)\n\n\n\nfig = plt.figure(FigureClass = Waffle, \n                 constrained_layout = True,\n                 figsize = (7,7),\n                 facecolor = '#f5f5f5',dpi = 100,\n                 \n                 plots = {121: \n                          {     \n                           'rows':5,\n                           'columns': 5,\n                           'values' : [rural_healthy, rural_stroke],\n                            'colors' : ['#00f5d4','#f15bb5'],\n                              'vertical' : True,\n                              'interval_ratio_y': 0.1,\n                              'interval_ratio_x': 0.1,\n                              'icons' : 'tractor',\n                              'icon_legend': False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.1\n                          },\n                          \n                          122 : \n                          { \n                            'rows': 5,\n                            'columns':5,\n                            'values':[urban_healthy, urban_stroke],         \n                              'colors' : ['#00f5d4','#f15bb5'],\n                              'vertical': True,\n                              'interval_ratio_y': 0.1,\n                              'interval_ratio_x': 0.1,\n                              'icons' : 'city',\n                              'icon_legend' :False,\n                              'icon_size':20,\n                              'plot_anchor':'C',\n                              'alpha':0.1\n                                                      \n                           }\n                         },\n                   \n)\n\nfig.text(0.23, 0.75, 'Strokes by Residence Type', {'font':'Serif', 'weight':'bold','color': 'black', 'size':20})\nfig.text(0.24, 0.675, 'Rural', {'font':'Serif', 'weight':'bold','color': 'black', 'size':16})\nfig.text(0.21, 0.27, 'Total: ' + str(rural_total), {'font':'Serif', 'weight':'bold','color': 'black', 'size':14})\nfig.text(0.635, 0.675, 'Urban', {'font':'Serif', 'weight':'bold','color': 'black', 'size':16})\nfig.text(0.62, 0.27, 'Total: ' + str(urban_total), {'font':'Serif', 'weight':'bold','color': 'black', 'size':14})\nfig.text(0.41, 0.65, str(int(per_rural_stroke * 100)) + '%', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(0.815, 0.65, str(int(per_urban_stroke * 100)) + '%', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(.9, 0.72, 'Stroke', {'font':'Serif', 'weight':'bold','color': '#f15bb5', 'size':14})\nfig.text(1.01, 0.72, '|', {'font':'Serif', 'weight':'bold','color': 'black', 'size':14})\nfig.text(1.03, 0.72, 'Healthy', {'font':'Serif', 'weight':'bold','color': '#00c5a4', 'size':14})\nfig.text(.89, 0.45, \n         'Both those who live in rural\\nand urban residences suffer\\nstroke at a similar proportion.', \n         {'font':'Serif', 'weight':'normal','color': 'black', 'size':12})\n\nplt.show()","1cc06781":"fig = plt.figure(figsize = (24,10), dpi = 60)\ngs = GridSpec(ncols=10, nrows=12, left=0.05, right=0.5, wspace=0.2, hspace=0.1)\nfig.patch.set_facecolor('#f5f5f5')\nsns.set_palette(sns.color_palette(['#00f5d4','#f15bb5']))\n\nax1 = fig.add_subplot(gs[2:6, 0:6])\nax2 = fig.add_subplot(gs[8:, 0:6])\nax3 = fig.add_subplot(gs[3:, 9:])\n\n# axes list\naxes = [ ax1,ax2, ax3]\n\n# setting of axes; visibility of axes and spines turn off\nfor ax in axes:\n    ax.set_facecolor('#f5f5f5')\n    \n    for loc in ['left', 'right', 'top', 'bottom']:\n        ax.spines[loc].set_visible(False)\n\n\n\n#-------Ax 1------------------------------------------------\nsns.scatterplot(x='age', y='bmi', hue='stroke', data=stroke_data, ax=ax1)\nax1.get_legend().remove()\nax1.set_xlabel('Age', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax1.set_ylabel('BMI', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax1.text(-1, 110, 'How Age and BMI Affect Chance of Stroke', \n         {'font':'Serif', 'size':'18','color': 'black','weight':'bold'})\n\n#-------Ax 2------------------------------------------------\nsns.scatterplot(x='age', y='avg_glucose_level', hue='stroke', data=stroke_data, ax=ax2)\nax2.get_legend().remove()\nax2.set_xlabel('Age', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax2.set_ylabel('Glucose Level', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax2.text(-10, 300, 'How Age and Glucose Level Affects Chance of Stroke', \n         {'font':'Serif', 'size':'18','color': 'black','weight':'bold'})\n\n#-------Ax 3------------------------------------------------\ncmap = sns.diverging_palette(10, 325, as_cmap=True)\nsns.heatmap(pd.DataFrame(stroke_data.corr().iloc[:-1, -1]), cmap=cmap, annot=True, center=0, cbar=False)\nax3.set_xticks([-1], labels=[None])\nax3.set_yticklabels(labels = ['Age', 'Hypertension', 'Heart Disease', 'Glucose Level', 'BMI'],\n                fontdict = {'font':'Serif', 'fontsize':12,'fontweight':'bold', 'color':'black'})\nax3.text(-1.8, -0.5, 'Correlation with Stroke', {'font':'Serif', 'size':'18','color': 'black','weight':'bold'})\nax3.text(0, -0.67, '.', \n         {'font':'Serif', 'color': 'black', 'size':14})\nax3.text(-4,2.2,'Stroke', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'#f15bb5'})\nax3.text(-3.1,2.2,'|', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax3.text(-3, 2.2,'Healthy', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'#00c5a4'})\nax3.text(1.5, 5, 'Age is the most\\ncorrelated factor to\\nstroke at 25%.\\nHypertension,\\nheart disease,\\n' +\\\n         'and glucose level\\nfollow at 13% and\\nbmi correlates\\nby around 4%.\\n\\n\\n' +\\\n         'Most of those who\\nsuffered stroke are\\nelderly and either\\nhave high or low\\nbmi.\\n\\n\\n' +\\\n         'Most stroke patients\\nare older and have\\nhigh glucose levels.',\n         {'font':'Serif', 'color': 'black', 'size':14})\n#---------------------------------------------------------------\nfig.text(0.12, 0.85, 'Other Factors Affecting Stroke', {'font':'Serif', 'weight':'bold','color': 'black', 'size':35})\nplt.show()","4c5a07fd":"#removes labels from dataset\nX, y = stroke_data.drop('stroke', axis=1).values, stroke_data['stroke'].values\n\n#Encodes catagoric variables\ncat_ix = [0, 4, 5, 6, 9] #index of catagoric variables\ncat_ct = ColumnTransformer([\n    ('cat_vars', OneHotEncoder(), cat_ix)\n], remainder='passthrough')\nX_encoded = cat_ct.fit_transform(X)\n\n#Impute missing values\n#create KNN imputer object\nknn_imp = KNNImputer(n_neighbors=5)\nX_imputed = knn_imp.fit_transform(X_encoded)\n\n#Scale Numeric Variables\nnum_ix = [16, 19, 20] #index of numeric variables\nnum_ct = ColumnTransformer([\n    ('num_vars', StandardScaler(), num_ix)\n], remainder='passthrough')\nX_scaled = num_ct.fit_transform(X_imputed)\n\n#displays scaled data\nprint('Example of Processed Data:')\nprint(X_scaled[0])","2c5b9bec":"#Splits the data into train, test, validate\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=8)\nX_val, X_test, y_val, y_test = train_test_split(X_test, y_test, test_size=0.5, random_state=8)\n\n#displays the amount of samples in each dataset\nprint('Samples in Train Set:', len(X_train))\nprint('Samples in Validation Set:', len(X_val))\nprint('Samples in Test Set:', len(X_test))","3c556569":"#SMOTE for class balancing\nsm = SMOTE(random_state=8)\n\n#create new training set with SMOTE object\nX_bal, y_bal = sm.fit_resample(X_train, y_train)\n\n#Displays perccent of each class\nprint('Initial Dataset')\nprint('Percent \"stroke\":', y_train.sum()\/len(y_train))\nprint('Balanced Dataset')\nprint('Percent \"stroke\":', y_bal.sum()\/len(y_bal))","6a22dd32":"#builds the architecture for a neural network\n#creates a dense network with 1 skip step\ninputs = keras.Input(shape=(21,))\na = layers.Dense(64, activation='relu')(inputs)\nx = layers.Dropout(0.6)(a)\nx = layers.Dense(128, activation='relu')(x)\nx = layers.Dropout(0.6)(x)\nx = layers.Dense(256, activation='relu')(x)\nx = layers.Dropout(0.6)(x)\nx = layers.Dense(128, activation='relu')(x)\nx = layers.Dropout(0.6)(x)\nx = layers.concatenate([a, x])\nx = layers.Dense(64, activation='relu')(x)\nx = layers.Dropout(0.6)(x)\nx = layers.Dense(32, activation='relu')(x)\nx = layers.Dropout(0.6)(x)\noutput = layers.Dense(1, activation='sigmoid')(x)\n\nnn = keras.Model(inputs, output, name=\"stroke_predictor\")\nnn.summary()","8c722120":"#compiles the model with Adam optimizer\nnn.compile(optimizer=tf.optimizers.Adam(learning_rate=0.0001),\n            loss='binary_crossentropy', metrics=['accuracy'])\nearly_stopper = EarlyStopping(monitor='val_loss', patience=30, restore_best_weights=True)\n\n#Trains the neural network\nhistory = nn.fit(X_bal, y_bal, epochs=1000, callbacks=[early_stopper], validation_data=(X_val, y_val), verbose=0)","8aa7e3c4":"val_loss = history.history['val_loss']\ntrain_loss = history.history['loss']\nmin_val_loss = round(history.history['val_loss'][-30], 2)\nmin_train_loss = round(history.history['loss'][-30], 2)\n\nval_acc = history.history['val_accuracy']\ntrain_acc = history.history['accuracy']\nmax_val_acc = round(history.history['val_accuracy'][-30], 2)\nmax_train_acc = round(history.history['accuracy'][-30], 2)\n\n#plots the training vs validation loss and accuracy\nfig = plt.figure(figsize=(20, 10))\n\nax1 = fig.add_subplot(121)\nax2 = fig.add_subplot(122)\n\n\nax1.set_title('Loss', {'font':'Serif', 'fontsize':20,'fontweight':'bold', 'color':'black'})\nax1.set_xlabel('Epochs', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax1.plot(train_loss, label='Train')\nax1.plot(val_loss, label='Validation')\nax1.legend()\n\nfig.text(0.22, 0.23, 'Final Training Loss: ' + str(min_train_loss),\n         {'font':'Serif', 'fontsize':14,'fontweight':'bold', 'color':'black'})\nfig.text(0.22, 0.41, 'Final Validation Loss: ' + str(min_val_loss), \n         {'font':'Serif', 'fontsize':14,'fontweight':'bold', 'color':'black'})\n\nax2.set_title('Accuracy', {'font':'Serif', 'fontsize':20,'fontweight':'bold', 'color':'black'})\nax2.set_xlabel('Epochs', {'font':'Serif', 'fontsize':16,'fontweight':'bold', 'color':'black'})\nax2.plot(train_acc, label='Train')\nax2.plot(val_acc, label='Validation')\nax2.legend()\n\nfig.text(0.61, 0.82, 'Final Training Accuracy: ' + str(max_train_acc),\n         {'font':'Serif', 'fontsize':14,'fontweight':'bold', 'color':'black'})\nfig.text(0.61, 0.72, 'Final Validation Accuracy: ' + str(max_val_acc), \n         {'font':'Serif', 'fontsize':14,'fontweight':'bold', 'color':'black'})\n\nfig.text(0.3,1, 'Neural Network Metrics Per Epoch', {'font':'Serif', 'fontsize':32,'fontweight':'bold', 'color':'black'})\nplt.show()","ddf7752f":"#Display the metrics of the neural network on the test set\ntest_preds = nn.predict(X_test)\nthreshold = 0.25\ntest_preds = [1. if i > threshold else 0. for i in test_preds]\ntest_acc = accuracy_score(y_test, test_preds)\ntest_rec = recall_score(y_test, test_preds)\ntest_pre = precision_score(y_test, test_preds)\nprint('Test Set Metrics')\nprint('Model Accuracy:', test_acc)\nprint('Model Recall:', test_rec)\nprint('Model Precision:', test_pre)","436d0f60":"<a id=\"7\"><\/a>\n<h1 style = \"font-size:50px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #00bbf9; text-align: center; border-radius: 100px 100px;\">Conclusion<\/h1>\n<\/br>\n<\/br>\n<ul>\n    <li><strong>Age is a major risk factor for stroke.<\/strong> As we get older we are more at risk to suffer a stroke.<\/li>\n    <li><strong>Males and females both suffer stroke at a similar rate.<\/strong> However, females have been shown to suffer strokes at younger ages than males.<\/li>\n    <li><strong>Heart problems like hypertension and heart disease greatly increase the risk of stroke.<\/strong><\/li>\n    <li><strong>People who have been married are at a higher risk of stroke.<\/strong> This may be due to higher levels of stress that occur during married life.<\/li>\n    <li><strong>Working with children or not working at all seems to lower the risk of stroke.<\/strong> This may be because working with children or not working causes less stress.<\/li>\n    <li><strong>The predictive model will identify most (71%) at risk patients.<\/strong> This does come at the cost of a somewhat lower accuracy (71%), but in this situation it is better to have a higher false positive rate than  a false negative rate.<\/li>\n<ul>","c22363c3":"<h5>With a threshold of 0.25, a majority of at risk patients were identified. This decreased the accuracy to around 70% and will lead to around 30% of patients being falsley identified as at risk. These are acceptable numbers for the this problem.<\/h5>","f103bdb5":"<img src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAALYAAAM1CAYAAADdPAvvAAAAAXNSR0IArs4c6QAABut0RVh0bXhmaWxlACUzQ214ZmlsZSUyMGhvc3QlM0QlMjJhcHAuZGlhZ3JhbXMubmV0JTIyJTIwbW9kaWZpZWQlM0QlMjIyMDIxLTEyLTA2VDEzJTNBMzQlM0E1Ny4xMjVaJTIyJTIwYWdlbnQlM0QlMjI1LjAlMjAoV2luZG93cyUyME5UJTIwMTAuMCUzQiUyMFdpbjY0JTNCJTIweDY0KSUyMEFwcGxlV2ViS2l0JTJGNTM3LjM2JTIwKEtIVE1MJTJDJTIwbGlrZSUyMEdlY2tvKSUyMENocm9tZSUyRjk2LjAuNDY2NC40NSUyMFNhZmFyaSUyRjUzNy4zNiUyMiUyMGV0YWclM0QlMjIwQk9yb0E3em9uQTJWQk50MGJuYyUyMiUyMHZlcnNpb24lM0QlMjIxNS45LjElMjIlMjB0eXBlJTNEJTIyZGV2aWNlJTIyJTNFJTNDZGlhZ3JhbSUyMGlkJTNEJTIyQzVSQnM0M29EYS1LZHpaZU50dXklMjIlMjBuYW1lJTNEJTIyUGFnZS0xJTIyJTNFN1ZuYmNwc3dFUDBhejdRUDdYQXhHRCUyRkdkcEttU2RwMDBzUkozeFJRRExHTXFCQTI1T3Nyak1URkVCdGNmTWxNWGhKcFdhMmszWE9PRU82b3cxbDRUb0JuWDJNTG9vNGlXV0ZISFhVVXBXY283RzlzaUJKRFZ6Y1N3NFE0Vm1LU004T3Q4d3E1VWVMV3dMR2dYM0NrR0NQcWVFV2ppVjBYbXJSZ0E0VGdSZEh0R2FQaXJCNll3SkxoMWdTb2JCMDdGclVUcTZIME12czM2RXhzTWJPczk1TW5NeUNjJTJCVTU4RzFoNGtUT3BweDExU0RDbVNXc1dEaUdLY3lmeU1yNkl4dWhxcXA5JTJGJTJGJTJCWCUyRkJYZUR5OTglMkY3cjhrd2M2YURFbTNRS0JMMnczTml6c0hLT0Q1NG51bGtVZ2d3WUZyd1RpSTFGRUhOcDBoMXBSWjh3VlNHdkdDZzRCaVpzS0UybmlDWFlDdU1QYTQzek4yS1hlVDR6NTByWk80c0t6JTJGaExBNVRVeG5Ea0o4RHRiaiUyRmdiciUyQlpUZ2FWcTdPRUJhaU5nWmdTZUlCc0NjVHBZTEhXS0VDWHZrWWhmR29Td0dCcjZYYkhHbm1YVlFNN2U4Qm5HOEhLNTRwczhobmtGS0l1WkFJQUxVbVJmQkJ6aUdKNmxmT3ZRR08yeGVSZUowUzhFV0NUaEt4UkElMkJEb2dKJTJCYWg4dFRjRjZxMEVvb0JNSUMwRllvM2NmakxURWt6VndCb3N3dkdOOSUyQlE1NE1GJTJCQ0YlMkJ0N24xJTJGekxHWUI5YUY2d1hVTDhHTHhXSlNFRmRpWVRzVTNuckFqSjhzbUJnVjRkYXNVSE5JS0F6WGxrbzgxWXVaVW5sM2thbUZMSkpwNTVUQ2tONHViaUdiVFZNbmwxSTNnaTdMa0NKZGdRZ1M5diUyQlQzdjI4aHFmeThTUXpoZDJtYk9xN3ltWU5oY3NKa29tQTd6dG1NVmxGQld4Wk1IS0owU3J5SW16JTJGcXl0eSUyRjZ0V3FFeUs4OGJLVWc3VjM2JTJCMnFKc0pJaXZHTzJGSW1yeURNYVQ3d1pCS1dLdGFhd3pwcmg3amJ6Q0VKUmxFT1RjdmR2QWJMZHFRdGx4YiUyRlJGcXZ6Q0NOWkoxdDBweWJUUEpGVTElMkZKeVJQNjM4d2t2YyUyQlNGNk4lMkZ0WDM0dTFKcnEyZXFEc2p1U1kxcGF4WVc0TVI4aDVJYnBSUSUyQlRPZzdKcFF3aWE3OG5seDA0WWhZRmM0aGo4UEVvZE5EMGxtdlJFbVpUUHpuNTBRaWx2bVBwV2dwOWRVZ3AxZEwlMkZxYmxjQU15RHlWMEdheUFFT0hQb2lSclAwWTJ4bTBrdDRvekxtTkl0RngyYjdTUVhFbk55cnVac09XUFRHdVdjMFNZcTlKalBnNnRXUnQ0aWRwODhzYjhITHlVN2wlMkJQWnZON3UlMkYlMkJqTUNSU1pvNDhOUERlVnRCMDFidndUdVNzOUtDalhhRlpsM045bkNuTGtsRFhZVFdsaEN0N2hlS05sNG1LclBaJTJCcDFhcUVhbUZJODVEYWxXalVvV2JpY0hsWnRVeTNMdzlobDJzQmVhZmhFYnVySWwlMkI5WHVDc2gyOTcxd1hiYlhFVlJWM2dsQmRlM1FCRzM5U24lMkJNQksxN1hxdkhkRHpyMng3UFhYVUQwN2NtS090bVAySWw3dGt2Z2VycFB3JTNEJTNEJTNDJTJGZGlhZ3JhbSUzRSUzQyUyRm14ZmlsZSUzRUq3FbcAACAASURBVHhe7Z0NfBTVuf9\/rMkS0gQSNryEYAyo\/6C3lXsVWxWQXsRyq9T8\/3dbsYV4g1SRF0mIYq28CqFawJBQaASloIEK9Mbb2Ggvvcg1Ar5VabG9BS4aAibEAEsiiSEkYfP\/PMNOOiz7MjM7Mzsz+8zn065kz3nOc37nO888c3bmnF7ggxWwoQK9bNgn7hIrAAabIbClAgy2LYeVO8VgMwO2VMCOYKcAuBZAFoDM1NTU651OZ6bX6x3k9XpTOzs7kzs7O\/tcvHjR2dXVFef1eq8SR9bhcFyMi4vruuqqqzri4+PPx8fHtzgcjiYAjV1dXSeampqOAjgBoBbAZwCabUmFDTpldbC\/DuCWwYMH3wngH1tbW68laIcOHdp27bXXdl977bXxw4cPTxo8eDAGDhwIl8uFlJQUJCcnIzExEb1790ZcXBx69eqF7u5udHV14cKFC2hra0NLSwuam5vh8Xhw6tQpNDY2dtfU1LQdPXr0Qk1NjaOuri6R4E9KSqoB8KcvvvjiHQAfA\/irDbiwfBesBvYYl8v1XafTeffZs2e\/MWDAgAu33HKLd\/To0X1vuummq2688UZcffXVhg3K559\/jr\/97W\/45JNPLu7fv\/\/cxx9\/7Dh9+nTv\/v37\/6Wrq2v36dOn3wSwzzCHuKEeBcwO9qDExMSc\/v37\/+j06dPfysrKavvOd74Td\/fdd\/e94447hAhstoMi\/Lvvvov\/+q\/\/OveHP\/yhq7a2NnHAgAEfnD179tW2trbfUlpjNp\/t6I8ZwXalpKRM7dOnT15TU9ONd999d8v999\/vmjhxIgYMGGC5MTh9+jR27dqFHTt2eHbv3p2cmpr6t\/Pnz29ubm7eBsBjuQ5ZxGEzgX1vZmbm4\/X19Xfee++9TQ899FBaTk6ORWSU72ZlZSV+9atfnXnjjTdSMzIy3jlx4sTzAN6Qb4FLylEg2mAnDRky5PH29vZHMzIy4mfPnt0vNzc3jm7s7H7QDerWrVsvrlu3rrm+vr4zISFhw8mTJ1cDaLV7343oX7TATh82bNiyurq6B++7774vH3\/88QG33367Ef01ZRvvvfcenn\/++dOvv\/56v6FDh5YfO3ZsEYAGUzprEaeMBtuVlZW18sSJE3mPPPJI81NPPdX\/mmuusYhU+rt5\/PhxPPfcc2c3btyYkpmZ+XJtbe18zsPV6W4Y2MOHD\/95XV1dwYMPPtiybNkyV3p6ujqPY6BWQ0MDlixZcubll1\/uO3To0JKampqfxEC3Ne2i7mA7nc5\/TU5O\/sVtt90W\/\/zzzw\/Izs7WtAN2NnbkyBE8\/vjjp99\/\/\/3Otra2uefPn6+wc3+17JueYKcNGzZsa3d39zfXrVuXeu+992rpd0zZevPNNzF79uymXr16fXDs2LFcAGdiSgAVndUFbJfLNfXChQu\/fPjhhzuLi4v7q\/CLqwRQ4PHHH2\/auHFjXHx8\/MympiaaB+cjiAKag33ddddtu3Dhwj2vvPJKyre\/\/W0WXmMF3n77bTz44IPNvXv3fvPTTz+dorF525jTEuzMjIyMN775zW8O3L59+0Cn02kbkczWkY6ODjzwwAOnPvzww1P19fWU49ETh3xIFNAK7LF9+\/Z9\/YknnsCiRYvosVE+DFBg+fLlzatXr8a5c+fuA7DXgCYt00TEYPfr129ya2vrtldffbXXD37wA4dlem4TR3\/zm99c\/OEPf4i+fftObWpq2m6TbkXcjYjAzszMnHHmzJmSN998M2HcuHERO8MG1ClQXV2Ne+65pz01NTW\/vr5+ozor9qqlGuxBgwZNP3\/+\/Nrdu3cn3nrrrfZSxYK9+eMf\/4gJEya0fe1rX8tvaGh4yYJd0NRlVWC7XK5\/\/eqrr35dXV3d+5vf\/KamDrEx9Qp8+OGHGDdu3IWEhIQfNTc3v6bekvVrqgH7lri4uPd+\/\/vfx0+YMMH6CtisB7t378Z3v\/vdzq6uLnqqjF5Vi8lDKdh9XS7X4ZUrV6Y89NBDfWJSMQt0+le\/+lX7k08+2eTxeEYAOGcBlzV3URHYWVlZ\/33ffffdVFpayr8maj4U2hqcO3eu5\/XXX\/\/L8ePH\/1lby9awJhvsYcOGLUpNTX3s448\/tt77WdYYC829vOWWW043Nzevq6mpWaa5cZMblAv29Q6H4\/Bf\/vIXB70Jzoc1FKA36L\/xjW94vV4vpSS0JkrMHLLAzszMfGf69OkjFy9e3DdmlLFJR5cvX\/7lSy+99MmJEydo7ZWYOeSAPSkrK+uVY8eOpcaMKjbr6PDhw5uOHTv2IIAqm3UtaHfCgj148ODDJSUl10+ePJl\/LrcoFb\/5zW+6586d+79ffPEFpSQxcYQD+3sjRozYcujQIZ4FsTgON9xww9nDhw\/nAfidxbsiy\/2QYA8dOvTDFStW3Pzggw\/2LNwoyyoXMp0Cr7zyysUFCxYcqKuri4mfikOBnd2vX78Dzc3N9l\/kw3QY6uNQSkpK25dffnkzgCP6tGAeq0HBHjJkyKp77733oY0bN3IaYp7xisiTGTNmNL355pub6urqaFkHWx9BwR4wYMBn\/\/7v\/z78zjtjapbI1oP9zjvv4Pvf\/37N6dOnaf1wWx\/BwM742te+9mlra2uCrXsfg51LSkpq\/+qrr64DUG\/n7gcD+\/677rqrbPfu3ZyG2Gz0J0yY4HnrrbdmAdhps65d1p2AYA8ePLhs1qxZ0xYtWtTbCp2nhWWWLl2KdevWab5mNq13PWfOHMG+HRb7WbZsWfv69es3nzp1iuC27REQ7EGDBu3fuHHjHffdR++Imv9gsOWP0euvv45HHnnk3cbGxtHya1mvZECwU1NTP3\/nnXeGfv3rtMWL+Q8p2GfOnBGia79+\/bBhwwbB+X379mH06NHYv38\/ysvL6cVXrFq1CrSY\/LZt24T9aObNm4fc3FyhnBiln3rqKZSVlQl2Ro4cSYu3g+yPGTNGsCvWN+POCsFG7a9\/\/SvuvPPOuqamJuP2NIkCQgHBTkhIaK2rq\/uaVQbMH+zJkydj\/vz5mDJlCpYvX476+nqsWbMGBw4cEKDcunVrz3ekOS0bEQhsOkHS0tJ6UhHpf1NaQicFHdSOVQ46aYcOHfpVe3t7klV8VuNnQLBpW7gLFy44aEctKxz+YM+dOxdr164VcmIxSotgE+gEJJ20Yj1am4P+7h+xw4FtBW38faSd0Xr37k2Pstr61+RAYNPfvLQ9nFWOQKmIeCPpDzalIgR5nz59FINNJwq1RVeEgwcPYsaMGT22rKIV+Unb\/9GHlXxW6qstI7Z0hiRUxKbvKFJv2rTpsohN8IpR3z\/9kApMkb+mpoZWv1Kqe9TKx3LEhtVz7FBgU44t3kwS1NIcOyMjQ4CUgKWbS7pZlIJNZaW2OceO2vkZtmHbzooES0Xo73Rs3779slRCmmIUFxeD1uggiDMzM4Uby\/fff18A\/aOPPsLUqVMFG1ZMRWJ6VmTw4MHvbtiw4XarzGOHPX19BaRpCeXYsXj45rHfa2xsvMPO\/Q8YsQcOHLj+sccee3jhwoXxduo8gw26l+j4xS9+8dLp06dn22ls\/fsS9FmR8ePH\/\/Ktt94y357Odh4NA\/p21113efbs2RObz4oA4Kf7DIAsGk3E+tN9tG85P48dDfJ0bJOfxwYwePDgn993332PbNiwgXco0BE2I03PmDGjuaqq6sWTJ08+aWS70WiL33mMhupRapPfefQJn5GR8eGzzz57Kz1DwYe1FXjllVe6n3766Y\/q6+tj\/i11GklaV2TzoUOHeHbE2lzjhhtu8Bw+fHgaryviG8jBgwcfKi0tHXH\/\/fdbfGhj1\/2dO3ciPz\/\/CK8EJWHgqquu+t7VV1\/9Mq\/dZ90TY9iwYU2ff\/553sWLF1+3bi+UeS7r0UVabfXHP\/7xPy5atChZmXkuHW0Fli9ffu6ll146yKutBh4JXh872oSqaJ\/Xx5Yh2tVXX71gwIABBR9\/\/HGajOJcxAQK3HLLLWc8Hk\/p8ePHi0zgjqEuyEpFRI+ysrLe\/t73vvf1tWvX8iyJocOkvLG5c+ee+d3vfvfX2tpa3oNGhnzirmGpDz30EK8SJUOwaBTZvHlzx\/z58z28a5gy9XmfR2V6GVqa93m8JLeiVEQcocTExP\/r9Xq38868hjIbtjFxZ16Hw\/FAW1vbb8NWsHEBVWCTHunp6T\/+6quvSnkvdXPQIe6l3rdv34K6uroXzeFV9LxQDbYP7ke+\/PLL0jfffDNh3Lhx0etFjLdcXV2Ne+65p71fv35zGxoaYh5q1amIlKO0tLQHmpqatr766qvdP\/jBD6yxwo6NToSdO3d2\/uhHP3KkpaU92NjY+GsbdS2irkQUsSUtj+3bt+\/r8+fP77Vw4cJ+EXnElWUrsGLFii9XrlzZfe7cOVo9dK\/sijFQUCuwSarMjIyMN2699daBO3bsGOh0OmNAvuh0saOjg1ajavzjH\/94ur6+\/l4AJ6LjiXlb1RJsoZfDhw\/f2tnZee8rr7yS8u1vf9u8PbeoZ2+\/\/TYefPDB5t69e7\/x6aefXlrghI8rFNAcbGph4MCBuW1tbet\/\/OMfd6xZs4Z\/pdQIvMLCwrMvvvhifO\/evWd7PJ5yjcza0owuYPuUSsvKyiLxv7V+\/frUe+65x5YCGtGpN954g5YybgLwQW1tLb3OdMaIdq3chp5gC7okJSV9v3fv3qW333573OrVqwfaYbsLowacll0rLCw89cEHH3R1dXUVfPnll78xqm2rt6M72KJAWVlZz508eXJeXl5ey9KlS13p6elW1043\/xsaGmjdQM+WLVuShwwZsqa2tvYp3RqzqWHDwPbp5xo+fPiq2traf3v44Yebf\/rTn\/a\/5pprbCqt8m4dP34czz33nGfjxo2pWVlZL9fU1NBGox7llriG0WCLiqdfc801z5w8efLfcnJyzhUWFqbdfvvtMTsa7733HoqLi89UVlb2HTJkyCvHjx9fDKAhZgXRoOPRAlt0PWno0KFPtLW1zRgyZEj8nDlz+ubm5sbTZkd2P9ra2mijp85169adO3nyZGdiYuLGurq6VQBa7d53I\/oXbbClfbx36NChjzc0NNw5adKkpmnTpqXl5OQYoYGhbVRWVmLz5s2eqqqqlPT09Oq6urpiAG8Y6kQMNGYmsEW5Xf3798\/t3bv3vzU1Nd04YcKElsmTJ7to67kBAwZYbkhOnz6NXbt20aLxZ3bv3t23f\/\/+f2tvb99y9uzZrZw\/6zecZgRb2ttB8fHx3xs4cOCUM2fO3DZs2LDz3\/nOd+ImTJiQfMcdd2i+C68WMtN2c++++y52797d8oc\/\/KHr2LFjfdLS0t4\/derUrzs7O2n5g0Yt2mEboRUwO9j+3o8ZMGDAPXFxcXefPXv262lpaRdGjRp18Y477kgeOXJk\/I033oirrzZuX87PP\/8c9Cb4n\/\/856733nvv3Mcff3zV6dOne\/fv3\/+vXq93d2NjI6UY+xhC4xWwGtj+CtHWwbcMGjRobHd39z+1tbVd29nZ2Wfo0KFt1157bfd1113nHDZs2NcGDx5MP\/MLET4lJQXJycnCbry9e\/cG7WVJ28PR9n+0o9aFCxdAN3YtLS1obm4Wduk9deoUvvjiCxw7duyrTz\/9tOOzzz7rVVdXlxgfH38+KSnps+7u7j81NjbS03UfA\/ir8cPILforYHWwA40oLXt8LYCsuLi4rH79+l0XFxeX6fV6B3q93tTOzs5kgv\/ixYvOrq6uOOlGnrRxa1xcXNdVV13VQdDGx8e3xMXF0U\/ZjRcvXqw7e\/bs\/3q93uMAagF8BqCZkTKnAnYEW43StFsra6FGOZPW4cG8NDAMtkkBVesWg81gq2XH1PUYbAbb1ICqdY7BZrDVsmPqegw2g21qQNU6x2Az2GrZMXU9BpvBNjWgap1jsBlsteyYuh6DzWCbGlC1zjHYDLZadkxdj8FmsE0NqFrnGGwGWy07pq7HYDPYpgZUrXMMNoOtlh1T12OwGWxTA6rWOQabwVbLjqnrMdgMtqkBVescg81gq2XH1PUYbAbb1ICqdY7BZrDVsmPqegw2g21qQNU6x2Az2GrZMXU9BpvBNjWgap1jsBlsteyYuh6DzWCbGlC1zjHYDLZadkxdj8FmsE0NqFrnGGwGWy07pq7HYDPYpgZUrXMMNoOtlh1T12OwGWxTA6rWOQabwVbLjqnrMdgMtqkBVescg81gq2XH1PUYbAbb1ICqdY7BZrDVsmPqegw2g21qQNU6x2Az2GrZMXU9BpvBNjWgap1jsBlsteyYuh6DzWCbGlC1zjHYDLZadkxdj8FmsE0NqFrnGGwGWy07pq7HYDPYpgZUrXMMNoOtlh1T12OwGWxTA6rWuVgF+xo\/wWoBZPn97bhaUble9BWIRbAfAlAKwCORPwlAq+TfLgD5AH4V\/SFiD9QoEItgJwOoB\/AtAIcCiHYDgA8AZABoUSMq14m+ArEINqm+BMBQAA8HGIKNPvCfif7wsAdqFYhVsClq1wG4zS9qU7R+3wc9R2u1VJmgXqyCHSxqc7Q2AZRauBDLYPtHbY7WWhBlEhuxDLZ\/1H7Rl55wbm0SOCNxI9bBFqP2jwD8mnPrSFAyV91YB1uM2j8E8CoAjtbm4lO1Nww2QFF7HYA5PG+tmiPTVVQCdrbD4chNTU11t7S0ZHV0dCSYrjfskKCA0+lsT05Orm1qaqrwer3lAI7EmjSywE5KSnqhq6tr2syZM3vl5OTEjxw5EikpKbGmlWX629zcjIMHD6KysrKzrKysOy4ubnNra+ujlumABo6GA3uIy+V6a9KkSZklJSWJDLMGihtsgiAvKChoq6qqOuHxeO4CcNJgF6LSXEiwXS7XoYKCghELFy6MinPcqHYKFBUVoaSk5LDH46H5etsfQcGm9MPtdudu2bIl0fYqxEgH8\/Ly2ioqKspjIS0JBnZ2QkLCJw0NDU5OP+xDPaUl6enpHe3t7TfZ\/YYyINgOh6MoPz\/\/yeLi4nj7DCv3hBQoLCzsLC0tXen1em2dXwYEm3LrioqKEePGjWMabKZAdXU13G637XPtgGA7nc7zjY2NCZyG2IxqAJSODBo0qL2jo6OP\/Xr39x4Fy7G7u7u77dzvmO5br17CsIeb6rW0Rgy2pYdPnfMMtjrduJbJFWCwTT5A7J46BRhsdbpxLZMrwGCbfIDYPXUKMNjqdONaJleAwTb5ALF76hRgsNXpxrVMrgCDbfIBYvfUKcBgq9ONa5lcAQbb5APE7qlTgMFWpxvXMrkCDLbJB4jdU6cAg61ON65lcgUYbJMPELunTgEGW6FuR44cweTJk4U1LcSD1iDZsWMHsrOzFVrTrjj5NXfuXKxduzaqflCPtm3bJnRsypQp8Hg8wueuXbsQTCep75mZmViyZAmmT58eUT8YbIVsBQJo\/\/79mD17dlThNgvY5MemTZvwzDOXlgicN28exo4dK8BNOpWXl2PNmjXo0+fSyy3nz58Xyrz\/\/vs9+kltiOUUDhMYbIWKBQNo+fLlgqVFixb1DNaGDRuEv+3btw+jR48G1V26dCn69esH\/+\/EARb\/vnXrVgEGOgiIMWPGCP89Y8aMy8AQ3Q8FtjRqUvlly5YJfpLPw4cP72lHGmmlV6aJEycKUdjlcgm+UP3GxkbcdtttV\/hCNsePH9\/TXxHyYICSXbr60f+kVxupHYVDJBRnsBWqFgwgaTRavXp1D+TSaE5\/pDRm\/vz5Akw0ePX19QIcr732GmpqagTgCMQFCxZgxYoVOHPmTE+KQZdpim4ZGRlCOekRzC\/xhBGjprQc2RYjKNkSU4C0tDTBP2qDTkipnwcOHAh6dZL6LZ4ElZWVOHfunHAi+6ci4ok+Z84c4WSRgk267dmz54p+yh0uBluuUr5y4cAmGCg\/FKEQwcrNzQUBI82DpSeDFGypSxTR9u7d2xMZA13OqbzcVITgI5DoykH+SE8gMboSvASzGKVFANetW4fDhw9f9p3\/ySWN0OKVRrxi+fdFjMr+uoj9CRftQw0dg60R2OKgiWDTzZL0oNRi1KhRAlAEiBjRpDknDfTixYsvS1\/I7tSpUy+zJU0N5KQi0lSGyksjpwhXbS3tb3rphs+\/vLSONMr7pxf+J53\/v\/2vFmJEDnRSRppn+8AeBuBSx2x4aPoyb7gce9asWT0R0X+WRBr5AoEtai+Nqh999FFPihJqbIL5JebX4hVEapv8I\/goXaBDnIkIdlWgMqG+84fRv79SH3fu3NlzEov9kp5wGoH9UpDtAG2Bue5g+8+KSG8kxZuw9evXC5f+YBGb8nLxRi5Yjk0gSvNdacSUCzZdAVatWtUzAyGCn5WV1ZPu+J8MVIeuLPRJqYj\/zIb0hBRTGzpxpWmYf64ezneNcuwvAPxf32attoBZ2gnNwQ43jx1shiNUxG5ra+uZ7yXnxbxUjJLirEigNETMSYP5RVFfTGfoJo5yaMr5CTY6\/GdH\/O1JI2moiC3aEmdF6N\/SGZlQvvvPwWs0KzIXwAQAObajOsSiKbxgjg888WZSix+YIk0hxJMqkhtHsiG5efwLgKcAvGE3uDWN2HYSR0yTxOlHrfomnQ9XapOudhr\/8kibStHeO5cuTzY6GGwbDabcrvhN970NYBMA2qvGNgeDbZuhlN8RP7D\/BUAxgBvlWzB\/SQbb\/GOkuYcBfqD5LYDdvm0BNW8vGgYZ7GioHuU2A4B9O4DfAMgE4I2ye5o0z2BrIqO1jAT5SZ1y7L8BeNZavQnsLYNth1FU2IcgYH8DwDu+qN2i0KTpijPYphsS\/R0K8RAUPUt8ip4w1t8LfVtgsPXV15TWQ4B9LYD\/8UVtAtyyB4Nt2aFT73iYx1ZLAVwA8KT6FqJfk8GO\/hgY7kEYsK8GcBwAfdYb7pxGDTLYGglpJTMyXjSg15yuotcyrdQvqa8MtlVHLgK\/ZYCdDuBzAMMBnIigqahVZbCjJn30GpYBNjm3EoATQEH0PFXfMoOtXjvL1pQJ9iBfjm3JqM1gWxZP9Y7LBFuM2vFWzLUZbPV8WLamArAp16aZEXqGpM5KHea91K00Whr4qmIv9ecB0P7jT2jQvGEmAoLtcrkOVVRUjBg3bpxhjnBDxihQXV0Nt9t92OPx3CCzRZrPPgZgiO\/ndpnVolssINgOh6MoPz\/\/yeLiYsqv+LCRAoWFhZ2lpaUrvV7vQgXd+gWAcwAWKKgT1aLBcuzshISETxoaGpwpKSlRdZAb104BSkPS09M72tvbb6IFshRYvg7An31RmwA3\/REMbCQlJb3gdrtzt2zZkmj6XrCDshTIy8trq6ioKG9tbX1UVoXLC9ECO7RyVJGKuoZXCQo2eUK5dkFBwYiFC5VctQzvAzcoQ4GioiKUlJQoya39rVKUp9fHaKbkoowmo1okJNh06XG5XG9NmjQps6SkJJHTkqiOlarGKf0oKChoq6qqOuHxeO4CcFKVoUuVXvWtHFUSgQ1DqoYDW3CC0pKurq5pM2fO7JWTkxNPqx8x5IaMj6pGCGZaU7uysrKzrKysOy4ubrPK9MO\/fVp\/5GUAlHOb+pAFtq8H2Q6HIzc1NdXd0tKS1dHRkWDqnsWwc06nsz05Obm2qampwuv10ruMSm4Uwyn3pu\/F383hCkbzeyVgR9NPPdte6jMufurZlh1s30MbPwAYZebOMNjAEt8ahgy2fFLfA\/AcgEtrLJvwYLABjtjKwcwFQCvuT1Re1ZgaDDZHbLWkHQWQR+vdqzWgZz0Gm8FWy1chgJt9kVutDd3qMdiciqiFizajbATwTwA+U2tEr3oMNoMdCVv0+hgxND8SI3rUZbA5FYmEK1pg508A6DWy85EY0roug81gR8oUbQ7\/IQBaaMc0B4PNqUikMNLbKL8E8A+RGtKyPoPNYGvB017frgj\/oYUxLWww2JyKaMHRgwAmA7hXC2Na2GCwGWwtOCIb9BY7gX1QK4OR2GGwORWJhB9pXXo0wQXgMa0MRmKHwWawI+FHWpfeZqfHYwcA+Eoro2rtMNgMtlp2AtX7NQB68o\/eao\/qwWBzjq0lgLQ3+yrfz+xa2lVsi8HmiK0YmjAVDvh2Q6AXf6N2MNgMttbw0c3jt6L91B+DzWBrDXYygDMArgHwhdbG5dpjsBlsuawoKbfR9yjrz5VU0rIsg81ga8mTaIuWaXgRwI16GJdjk8HmWRE5nKgpQ0\/80Uaou9RUjrQOg80RO1KGgtWfA+B2AFP0aiCUXQabwdaLu34APAAG+24m9WonoF0Gm8HWE7gtvuWHDV\/rj8HmHFtPsOmXSFpYx\/BVoxhsBltPsMn2IQDTALyvd0NS+ww2g603bzQzMtDox1kZbAZbb7DpTfYPAKTp3RBH7MsV5kUp9SfuPwH8CsBO\/Zu61AJHbI7YRrBGa\/zlAPh\/RjTGYF9SmSO2\/rTRJgFNALJ8y6Lp3iJHbAZbd8h8DdCcNj2rvdaIBhlsBtsIzqiN7wKg7efoASndDwabwdYdMkkDnwP4FwD\/o3ejDDaDrTdjUvvFvq2rdd8WhcFmsI0Em572o+e0v653oww2g603Y\/72\/+b7iZ1+tNHtYLAZbN3gCmKYttKj6b8n9WyYwWaw9eQrkO1\/BFABgH5q1+1gsBls3eAKYZh2QcgH8I5ejTPYDLZebIWyS0\/89QcwT6\/GGWwGWy+2Qtn9BoDXAQzTq3EGm8HWi61wdunndUpHaDcEzQ8Gm8HWHCqZBunhM1o16gmZ5RUVY7AZbEXAaFiYZkd+A+B6DW32mGKwGWw9uJJrk54ZofchaXEdTQ8Gm8HWFCiFxp4F0OVbMUph1dDFGWwGW1OgFBqjR1jXA6C0RNMjVsHOAFDvU9L\/DRrpd5qKzcYCKnACwETfMg2aSRSLYNOdOE010fZtP\/E9AE+C\/h4ALXs7FMDNAFo0U5kNhVKAdvWtAbBaS5liEWzSj3K7+QAuSNaVo+UBevv2UPmpliKzrZAKTAJQCGC8ljrFKtgUtU\/7QJbqQ35UfAAAIABJREFUSaDTdm4crbWkLLQtB4BWAJlaLl4Zq2CLUZsihdOne4dvP3CO1sZBLbb07wAqAZRr1XQsg+0ftTlaa0WVcjs\/9qUiP1JeNXCNWAZbGrXpv+l9PI7WWpGlzA7dsH\/ie+JPWc0gpWMdbHGHK5KHbh45t9YEK1VG6FUxmqV6W1Vtv0qxDjbJQS+X0vGwFoKyDdUK0CtjcQCeVm1BUlEJ2NkOhyM3NTXV3dLSktXR0UHvrfFhQgWcTmd7cnJybVNTU4XX66UbsiMmdNPfpbEA1mi1SLwssJOSkl7o6uqaNnPmzF45OTnxI0eOREpKigW0ik0Xm5ubcfDgQVRWVnaWlZV1x8XFbW5tbX3UAmrQnjUjfT+eReRuOLCHuFyutyZNmpRZUlKSyDBHpHVUKhPkBQUFbVVVVSc8Hs9dAE5GxRF5jW4HQEsO0zp\/ER0hwXa5XIcKCgpGLFxIS67xYWUFioqKUFJSctjj8dxg4n7Qfc6dAHIj9TEo2JR+uN3u3C1btiRG2gjXN4cCeXl5bRUVFeUmTkvoHcj9AIZEqlgwsLMTEhI+aWhocHL6EanE5qlPaUl6enpHe3v7TSa+oaSXDx4E8HEkygUE2+FwFOXn5z9ZXFwcH4lxrms+BQoLCztLS0tXer1es+aXvwBwPNKn\/QKCTbl1RUXFiHHjxplvZNijiBSorq6G2+02c679rwCmA7g3ko4GBNvpdJ5vbGxM4DQkEmnNWZfSkUGDBrV3dHT0MaeHwkI6tI721yLxL1iO3d3d3R2JXa5rYgV69RKGPdxUbzR7QD+v0\/PyqpdAY7CjOXxRatsCYK\/0LRBfpFYiBlutchauZwGw6a2auQC+o1ZmBlutchauZwGw+wH4AoDq+wAG28KAqnXdAmBT12gRHXrDaZ+afjLYalSzeB2LgE0vfpwC8JwauRlsNapZvI5FwKb5bFr+7Htq5Gaw1ahm8ToWAXswANqIiea1FR8MtmLJrF\/BImCT0AT2DwEcVKo6g61UMRuUtxDYmwD8EcALSmVnsJUqZoPyFgKbns+mhSvzlMrOYCtVzAblLQQ27VVDi8OPUCo7g61UMRuUtxDYpHYTgGzf1J9s9Rls2VLZp6DFwN4FgJ7RrlIyAgy2ErVsUtZiYNODUBdxaYF+2QeDLVsq+xS0GNg5AB5R+uJBxGAvX74cixcvvmzUly1bhkWLaPPV6B3kFx3R9oN8IF\/Gjx+P0aPpBv\/SQX8bPnw4pkyZIvx7\/\/79GDNmTM\/3+\/bt6yl\/5MgRTJ48WVgrZMaMGVizZg369Okj1NmzZ4\/iPloMbNphghbqH6SEJk3AlgJ0\/vx5zJs3DxkZGYoFV+J4uLJmATsQfGIw2Lp1qwC2x+PBggULsGLFCrhcLgFYKrNt2zahm1SGTlA6Mfz7FeikCaeNxcCm7tA7kLQw\/Gfh+iZ+rznYZJgizNy5c7F27VpkZ2cL\/xYjzsSJE4UBEwdw3bp1gi\/bt28HrTC1Y8cOoY40gknriCfOhg0bhHrSyCbtdCiwA0XHm2++WTghc3NzeyKlFBppHTFqUntUh163Ir\/9fSFflyxZgunTpwt9kp70VFcasaW+E+gizGlpaZdpSdrt3bu3J2qTtps2bcIzzzwjRHE5hwXB\/g8Av\/ZN\/cnpYtDXg2S\/GhYIIHEACZIRI0ZcEXHq6+uFgTlw4IBw+SUgRLAo0s+aNQtz5szB0qVLBSCkkUvaHsE2e\/bsnpNBDtj+J50UlNdeew01NTVCdJRG0TNnzvTAlZmZ2XNFeuKJJ0JenUJB55+KSH2X+ii2N3bsWEFHf739Tx45o25BsCmvpbNW9oKVukRsKdhiPilGaRo0ApYi9eHDh3suuRTBqQyB5Q+2OFjSSEaXZWk70vxVbFOaIgUbcDo5ysvLhRPtxIkTPdGPTjoxf\/WPkmKdn\/3sZ3j66achQuffRqgcOBjYYp+kNqVXKTF98T+J\/XP4UIBbEGx6o2a2ZCOssOevLmBLASQPpDdF9G8x5aBIKEJFl1ERbIqYgW6Y2trahKi1axdNbf79CDbYwcD2v+GVphZi6rBz586eGz7ya+rUqZe1SekRpQBkS5q+SAtJ++M\/EoHADnR\/EuoKI6YeSvNsC4JNC8PTMyPpYYn2FdAFbOlg+MMrdUwaLf3BDgRIsEgeqLPBcmzpjZmY5\/ufXKdOnRJOLPFmLhigoa4Y5JOSiC0GAzpJxJkSshEop5bev4hXJ5tHbOpmA4Bb5a7EqjnY\/lHHP32ggSKQ6JNSkUAR+\/777+9JV8QUhXrmn2OKUX39+vWXTaWFSkWkYCcmJgo5Mh3iFJpo0+1298zq+EdNOmnoPkFMRYJFbLk5dqD0QzxZA0VsUT\/SJkZybJKDVmGlXyDfkBO1NQE73Dy2NK3wn\/kIlopIL\/\/SuVv\/WZFAaYgIdiC\/xBs+mlUhX2g2gWZkKOcXQfGfHRGjr5hSibM04okRDOxQ0ElTEak+0kETZ1mkMzJS\/ahsjMyKUFdpSQZ6boT26Ax7RAx22BYsVkB6c0ugR3qo\/RFFbrtK82uya8Ecm9ympYW\/C0DWzmIMtoQgMTIGmxuXC5t\/OTXwyWlL7UljUbD\/EcArAGil2LAHgx1WIvsVsCjYtPIv7cVJn\/RQVMiDwQ6nkA2\/tyjYNBK0dja9A0l7QjLY4USIte8tDDa9TVNBT2CEGzOO2OEUsuH3Fgb7Gd9whH02m8G2IbjhumRhsB8AQAvp3B+2j0EKyH4IKlwD\/L35FLAw2LJnRjhim4873T2yMNj0hF8zgN7hRGKwwylkw+8tDDaNxjEAE8K9dMBg2xDccF2yONj0aGcJgN+H6ieDHY4CG35vcbDplasjvgeigo4Og21DcMN1yeJgF9Bbdb6tPBjscIMdS99bHGxaL\/vRcMsxcMSOJaJ9fbU42Df6fn28gXPsGIQ35KCbf5\/HUO4nAPgy3JQfR+wYhN7iEZtGrA7A7b4dfAOOIIPNYFtRgb0AFoTauTcg2LyXuhXHWp7PFthLXU5HtgKg+ezyYIUDgu1yuQ5VVFSMGDdunJxGuIyFFKiurobb7T7s8XhC3nyZvEsrAJwHEHRL6oBgOxyOovz8\/CeLi4vpbQU+bKRAYWFhZ2lp6Uqv17vQwt2aAeBmAPSpKMfOTkhI+KShocGZkpJi4f6z61IFKA1JT0\/vaG9vp\/cG6dc7qx73AHgs1MpQwW4ekZSU9ILb7c7dsmVLolV7z35frkBeXl5bRUVFeWtrK\/3AYeWDTkxaipb2qFEUsYXClGsXFBSMWLjQylctK4+fdr4XFRWhpKTE6rm1KAhtakpLCqeqAhvAEJfL9dakSZMyS0pKEjkt0Q40oyxR+lFQUNBWVVV1wuPx3AXgpFFt69zOV77F4FsDtRM0FZEWprSkq6tr2syZM3vl5OTE02pEDLnOwxaBeYKZdj+orKzsLCsr646Li9tsg\/TDX5GjvudF\/lc12L6K2Q6HIzc1NdXd0tKS1dHRQT9t8mFCBZxOZ3tycnJtU1NThdfrpbleK98oBlO4GgDtEUOfVxyyIrYJx05Ll+iNZ9JhqZZG2ZbuCuwA8BoA+mSwA2jAYOvOoC4NlAKoAUCfDHYQsOnP4poVuowCG9VcAdq2IynY9h2cilzaGJNTEc25093gjwHcBoA+OWJzKqI7cEY1cB+A6QBog1MGm8E2ijvd27kDwGoA9Mlgc46tO3BGNfB\/AFQBoE8GmyO2Udzp3g5tN0E\/zgTcdoJvHvnmUXcCdWqA2PX6bvw5YnPE1gmz6Jg9C+A6APR52cER+1LEpoPnsaMDZySt0hN+d\/t+qGGw\/ZTkeexI0Ipu3Y8BPAzgAEfsKweCwY4unJG0vgfAcgD\/zWAz2JGAZLa6vwWwGUAlgx0YbM6xzYasPH9o38f\/CrQMA988\/v1xVX5sVR5MZir1SwB\/AVDGEfvKYRGBZrDNhKw8X2h\/9dMAVjHYDLY8ZKxRKuiNP6cinIpYA+HAXs4HMBAAffI8tp8GnIpYF+3ZAGiptjkMNqci1sX4Ss8fAjDa91w2R2yO2LZh+0e+JRimcMTmiG0bqgG4AfwQwPcZbAbbTmDTRkv0rAi9JsapCKcitmF7IoB5AP6FweaIbRuqAdBahD\/1bUHNEZsjtm3Ypi036Dn6b3PE5ohtG6oBjAHwLICxDPaVw8rPY1sXddoSj5ZgoLlsTkX8NBAfUv9n645vzHpOK0Gt8e35yGD7YcAR27rnxbd8i1IS4Aw2g21dkv08Z7BDDCW\/pW5dzjkVCQM2r7ZqTbhp3T56yYBvHgOMH+fY1oSavObpPo7Y1qU3hOf0wwwFpitmtPgNGl4JysrETwDwE99qUDwrwrMiVmb5Mt+\/69t6mragZrAZbNuAHXRXA05FgGO+YR5mm+GOnY78AAD9736O2FcOOoNt3RNhKgB6JjuXwWawrYvxlZ7TjmH06yO9RcM5tp8GHLGti\/pjAK4HMJfB5ohtXYyv9Jym+lIBPMVgM9h2ApvenrkIYBmDzWDbCeznAdQDKGawGWw7gb0BAG3XsZHBZrDtBPavfZuY0ifPivCsiG3Y\/h0Aitq0Qy+DzWDbBux3ACwAsJfBvqRAhu+mg\/7bfx5b+p1tCLBpRw76fnX8hMEGkn37Atb5Hnnc4RNlMoCfAxgK4GYALTaFwU7dOu5bU+QEg31JAVpkhVbBvwDA4duPm+ZDe\/teNaJls\/gwvwLnfFffK4JQrD7dR1GbNuUhkKUHgT6Ao7X5iQbgBNDq+7zC4VgFW4zahRJhOnwT\/RytLcE1BgP4E4D0QO7GMtj+UZujtTWAFr38OoDtAOiTI7afApRrP+n7G+0ZyNHaOnDTi7y0MdYVK61SF2I5YlP\/KWo3+3Tox7m1daiWvDlDb9BwxA6gwUnf34ZYaljZ2VkA\/gEAbYkXEdjZDocjNzU11d3S0pLV0dGRwNqaUwGn09menJxc29TUVOH1essBHDGnpxF5RY+sen0Lv6sDOykp6YWurq5pM2fO7JWTkxM\/cuRIpKSkROQVV9ZPgebmZhw8eBCVlZWdZWVl3XFxcZtbW1sf1a\/FqFh+AcCfAdCnYrCHuFyutyZNmpRZUlKSyDBHZQAjapQgLygoaKuqqjrh8XhozxYx9YrIrgkq\/xbAFgD0qQxsl8t1qKCgYMTChQtN0A92IRIFioqKUFJSctjj8dAWzXY4PvC960if8sGm9MPtdudu2bIl0Q4qcB+AvLy8toqKinKbpCWfA6DVVulTNtjZCQkJnzQ0NDg5\/bDPKUFpSXp6ekd7e\/tNNrihpGd76Gd1+pQHtsPhKMrPz3+yuLg43j7Dyj0hBQoLCztLS0tXer1eK+eX9Gjxh74HoAIObMAfaCi3rqioGDFuHG2jx4edFKiurobb7bZ6rk2L5Kz1LZYjH2yn03m+sbExgdMQOyF9qS+UjgwaNKi9o6Ojj4V7930ADwCgT\/lgA+ju7u62cL\/Z9VAK9OolXKit\/DgFPZV5tW8fdQabcb+kgA3ALgFAb8\/QHo8MNoNtG7D\/A8ArAOiTwWawbQM2vWAw3ffuKoPNYNsGbHrUmBbqb+KIzVT3KGDxHJveST0EIC3kDXKQL3lWxMYngsXBpt14aQ77mwy2jSFV0zWLgz0FwCQAP2Sw1Yy+jetYHGzasDQOwCIG28aQqumaxcHeCuAPvum+oN0P9usT59hqiLFIHYuDTc9fFwB4jyO2RYAzyk2Lg01TfNcCOMtgG0WMRdqxMNj0uOpHwVZ\/ksrPqYhFYNTSTQuDTe9s0k1jwEVyGGwtKbGgLQuDTWuI0JJmM8PJzhE7nEI2\/N7CYK\/3vdJGP9CEPCIGe\/ny5Vi8ePFljSxbtgyLFoWcZgznV8Tfk190RNsP8oF8GT9+PG6++WbMmzcPGzbQtinAjBkzsGbNGvTp0wdHjhzB5MmThfVA6Jg4cSK2bdsGl8sFj8eDKVOmYNeuXaA1XXbs2IHs7Gzs378fe\/bsUdxHC4P93wBWANgdDhBNwJYCdP78eWHwMjIyFAsezlkl35sFbCl8BCodBKmo09ixY4V\/U7ny8vIe0MW+hisnnjSjR4+WLY+FwT4FYCSAhnCd1RxsapCiz9y5c7F27VohskijkTQS0WCuW7dO8HH79u1XRKMxY8ZcEb3EgRaj3r59+xBoUEOBTe2KtqkBsiFG09zc3B57UmikdcRIS3XpJKbXrSiK+vtCvi5ZsgTTp08XdPA\/CPS9e\/cKML\/22muoqam5IhiQdps2bcIzzzwjRHb\/I9z3gQCwKNg0I0J7OtK62GEPXcAW4SNIRowYIUQkSgkIQIKlvr5eGMwDBw4IgEnBokg\/a9YszJkzB0uXLhWAkEY6KbAE2+zZs3suzdLeBgPb\/6QLBhdd\/hcsWIAVK1bgzJkzPSdqZmZmzxXpiSeeCHl1Cged1Ef\/lE48SaiPlZWVOHfunJDCSFMR6m+4k8dGYE\/0ba8yISzVId57k\/3LYyCApGCTE1RGzBdpsAlYitSHDx++7DsqQ1HLH2yxI2KuKZ4k0nb8o7bcVESaApw4caInOtJJJ+avUvgpaop1fvazn+Hpp5+GmE74Cx4qB6bvRF0SExOFE0SalognLJ1U4slPffT3RdSXcni56YhFIzbtGUS7F9D7jmEPXSK2FEDyQHrZp3+LUYcGTZpXimATuNL0Rbz0t7W19dxESXu2detW4e9yIrYIgvSGV5paiKnDzp07hRs+EaapU6deZp9SKkoRCE5p+iItJO2P9O+hrjRiFBZBz8rKukwj\/ytODIFNq8a+5VuvLzpgS8X3h9d\/gIOBHQiQYJE8UC+DRWxppKQZB\/+bNoLx1KlTwolFaQiVCQZoqCsG+RQoYpMt6rN4BQvku9RuWlpazxWOfIlhsGkvx7xQr4NJtdQ8YvvPivinD9KBpVQkENj333\/\/ZYMZLMcWo\/r69euvuAzLAVtMAUgQ\/2k3t9vdcyPnD5N4nyCmIsEitn+O7X9SSVMs6T1FoDRFbEN6j0JpUYzk2LS7WxsAWpmM1sQOe2gCdrh5bGla4T8PGyxiE8zi5V863+s\/KxIoDQmUbtDfaH5dvOETb8RotoFmZCjnp4gYLApLZ0XEmR3xxAgGtj90geb8xb5Rfi\/OY\/vfIErnsaWzStSncDeogQiwYI5NKz\/RjzOjwhLtKxAx2HIbsko56c0tgR7pofZHFLntxsg8Nv2ETrslPyxXFwZbopQYlYPNjcsV1b+cGvjktKX2pLFgxH7Rl1uXydGFyjDYcpWyUTkLgk0\/zNBmSgEXeQ+YbgUZL9nz2DYa75jpisXAFm8c6bNL7iBxxJarlI3KWQxsegimONSSwRyxbQRnJF2xGNj0fuN1AOYo6TNHbCVq2aSsxcD+NYD\/DPdWuv\/QMNg2gVVJNywG9mcA7gVwWFEf+eZRiVz2KGshsOlRVVpZdaBS5TliK1XMBuUtBLYbwL8BuE+p7Ay2UsVsUN5CYK8G4AHwrFLZGWylitmgvIXAfhfA0wDeVio7g61UMRuUtwjYCb4n+uizQ6nsDLZSxWxQ3iJg0+I4SwGMVSM5g61GNYvXsQjYtFwwReufqpGbwVajmsXrWARsWjuEtrt7Q43cDLYa1SxexwJgO+gFfAC038w5NXIz2GpUs3gdC4BNi07SFN\/taqUOCDbvpa5WTvPXs8he6pRf0+pAT6lVNCDYLpfrUEVFxYhx48aptcv1TKpAdXU13G73YY\/Hc4NJXSS39gBYBeD3an0MCLbD4SjKz89\/sri4mN4K5sNGChQWFnaWlpau9Hq9C03aLZoJofw60fepys1gOXZ2QkLCJw0NDc6UlBRVhrmS+RSgNCQ9Pb2jvb39Jt9yvOZzEviubymz8ZE4FwxsJCUlveB2u3O3bNlCZw4fNlAgLy+vraKiory1tfVRE3eHUhCaCbm0DrTKIyjYZI9y7YKCghELF5r1qqWy1zFYraioCCUlJWbPrWlk6MXdxwDQcyKqj5BgAxjicrnemjRpUmZJSUkipyWqdY5aRUo\/CgoK2qqqqk54PB76mfpk1JwJ3zA9f01LmUW8oEs4sAVXKC3p6uqaNnPmzF45OTnxtFIRQx5+lKJVgmCmnREqKys7y8rKuuPi4jabPP0QpaJnr+8BMDlS7WSB7Wsk2+Fw5KamprpbWlqyOjo66O6VDxMq4HQ625OTk2ubmpoqvF4vrVJ6xIRuBnKJdt2tBkAL5ER0KAE7ooZMXJl+DCAd6EkyPqKrQKNvmYXaSN1gsAEGO1KKtKl\/h2\/hyX\/SwhyDfQlsOp7RQlC2oVoB0p9We1L9M7q0ZQabI7ZqEjWuSOvy\/UTNa2CB\/GCwGWyN+VRl7moAf9Zimk9sncFmsFWRqHGlRwDcCeDyjX4iaITB5hw7Anw0q\/pbADsB0HJmmhwMNkdsTUCKwAjdMLb4VntqjsDOZVUZbAZbK5bU2vlX2laeto9Xa4BvHgMrx\/PYWhKl3NavfOvz\/UJ51eA1OGJzjq0lT2psnQZwK4CIf23keezL5eeIrQZHberc7fthjH511PTgiM05tqZAKTRG6Uc9gOcU1gtbnMFmsMNComOBEwD+BcDftG6DweYcW2um5NqjJRCeV7LbrlzDVI7B\/vvjqvzYqhJyIi9bAuAMgKLITV1pgcFmsPXgSo5NmgWZBOCvcgorLcNgM9hKmdGi\/D\/7FsQZpYWxQDYYbAZbL7ZC2aXZkAYAP9OrcQabwdaLrVB26U15itq6vYvJYDPYRoNNKz0tADBGz4YZbAZbT74C2d4E4C8AaFZEt4PBZrB1gyuAYVrQnR5NpZVe6RdH3Q4Gm8HWDa4Ahh8A8KBvURxd22WwGWxdAfMz\/h8A6G2Zl\/VulMFmsPVmTLRP+6HTsyGpkax7LddZBpvBlstKpOXmArgZQF6khuTUZ7AZbDmcaFHmPd+z1\/+phbFwNhhsfmw1HCNafE\/LllUAGK6FMTk2GGzgv31C0S9hfOijAO1ScAGAYTsIMNgcsfVB+XKr9BP6BD1eKAjmPIPNYOsNthvALAC0m4JhB4PNb9DoDRvNXb8OYLPeDUntM9gcsfXkLdP3IgHtKdOpZ0P+thlsBltP3ugpviEAZuvZSCDbDDaDrSdz9Lw1bZj0vp6NMNiB1eUdDfSh7l7fc9eaL4Yjx12O2Byx5XCipgwtC\/wWgA1qKkdah8FmsCNlKFB9ummkRXDoppF+mDH8YLCBYz7Vhxmuvn0bpPQuzbd1dFR6yWAz2HqAR2uG0LrXB\/QwLscmg81gy+FESZn7AdCeMvQTetQOBpvB1hq+Xb43ZDTbT0aNgww2g62Gm2B16PHUSgB08xjVg8FmsLUEcD0A2g99mZZG1dhisBlsNdwEqpMC4BSALAD0mGpUDwabwdYKwPkAbgQwTSuDkdhhsBnsSPiR1j3qey7kXa0MRmKHwWawI+FHrDvZN8Vn6MsEoRxnsBlsLcCm90bLfNtGa2EvYhuxCnaGZO04\/5\/Upd9FLHAMGBgL4EUAI8zU11gEO9n3U28dgJ8A2OEbELqc\/hzAUN\/CLrS\/Nx\/hFaAfYj7Ue\/XU8G5cXiIWwSYFngVAd\/H05BmtAEo6XARAG9bTUgE\/VSpkjJb\/PwA+ADA4Wk\/xBdM9VsGmqE1bHRPI0oNAHwCAo7W8M5XWuG4D8LS84saVilWwxahdCMDpk7sDQDFHa9nw9QfwhW91J0rrTHXEMtj+UZujtTI0F\/nuR2Yoq2ZM6VgGW4zaT\/qkXsnRWjZ0dF9Cu37dDeAT2bUMLBjrYFPUpq0jSId+nFvLJo+WBB4NgGaSTHnEOtg0KOIDO7T+BR\/yFKCfzx8CsFdeceNLKQE72+Fw5KamprpbWlqyOjo6Eox3l1uUo4DT6WxPTk6ubWpqqvB6veUa76dIDzn9wIh9ZOT0NVgZWWAnJSW90NXVNW3mzJm9cnJy4keOHImUFHpKkQ8zKtDc3IyDBw+isrKys6ysrDsuLm5za2vroxr5+iffvYghC7ir9Tkc2ENcLtdbkyZNyiwpKUlkmNXKHL16BHlBQUFbVVXVCY\/HQw8pRfKsNO36RSfIt6PXI3kthwTb5XIdKigoGLFwoWHrdcvzmkspVqCoqAglJSWHPR4P7bGo9qDtNmj2iFZQNfURFGxKP9xud+6WLVsSTd0Ddk62Anl5eW0VFRXlKtMSWk6BHkO4XXaDUSwYDOzshISETxoaGpycfkRxdDRumtKS9PT0jvb29ptU3FC+A4DeaRQfGtPYO23NBQTb4XAU5efnP1lcXByvbXNsLdoKFBYWdpaWlq70er1K8ssc3\/4xt0bbf7ntBwSbcuuKiooR48aNk2uHy1lEgerqarjdbqW59tsANgKI6lohSiQOCLbT6Tzf2NiYwGmIEimtUZbSkUGDBrV3dHT0kenxfQAWAxgls7wpigXLsbu7u7tN4SA7ob0CvXoJwx5uqldsuBrACwBe1d4T\/Swy2Pppa1rLCsD+fwCeAvAt03YmiGMMttVGTAN\/FYC9H0CpmV7Sldt9BluuUjYqJxNsenLvMQBjrNh1BtuKoxahzzLB\/ghAEYDfRthcVKoz2FGRPbqNygCbdvrKjfYa15GoxGBHop5F68oAm\/aPKQDwB4t2MeiUD0\/3WXVEZfgdBmzabHQiAJq\/tuzBEduyQ6fe8RBgEw\/HAdDjqaZYXFJtLxlstcpZuF4IsGmhoH8AMNXC3RNcZ7CtPoIq\/A8CdqovWtNjqf+jwqypqjDYphoOY5wJAjYt7UbvsdLcteUPBtvyQ6i8Az6wXwLwsK\/2db6ddE2xzYbyHl1Zg8HWQkWL2fCB3QlgHQBa5m2zLw1ZarGuBHWXwbbLSCrohw\/sr3z3WLSgJL3yRVtuE+y2OBhsWwyjsk74wP7St\/oVwUw7EtDiNwR7XwDPKLNovtKagn3kyBFMnjxZWNNCPGgNkh07diA7OztqvSe\/5s6di7Vr10bVDxJg27Ztgg5TpkyBx+MRPnft2oVgOkkuKHVnAAAXM0lEQVR9z8zMxJIlSzB9+vSI+uED+ywAWjFVetDCnDSPHb3B0ogSzcH2B2j\/\/v2YPXt2VOE2C9jkx6ZNm\/DMM5cC4rx58zB27FgBbtKpvLwca9asQZ8+l15uOX\/+vFDm\/fff79FPakMsp5QFH9i0PjitBS4etPD9HN9LBUpNmq687mBTj5cvXy50fNGiRT2DtWHDBuFv+\/btw+jRo0EDtnTpUvTr1w\/+34kDLP5969atAgx0EBBjxlx6snLGjBmXgSGqHQpsadSk8suWLRP8JJ+HDx\/e04400kqvTBMnThSisMvlEnyh+o2Njbjtttuu8IVsjh8\/vqe\/IuTBACW7dPWj\/0mvNlI7aojygd0KIMm3ECetmEpr8f2vGntmrGMI2NJotHr16h7IpdGc\/khpzPz58wWYaPDq6+sFOF577TXU1NQIwBGICxYswIoVK3DmzJmeFIMu0xTdMjIyhHLSIxjY4gkjRk1pObItRlCyJaYAaWlpgn\/UBp2QUj8PHDgQ9Ook9Vs8CSorK3Hu3DnhRPZPRcQTfc6cOcLJIgWbdNuzZ88V\/ZQLmA9sKu4FQMsoPy+3rlXKGQo2wUD5oQiFCFZubi4IGGkaIz0ZpGBLhaWItnfv3p7IGOhyTuXlpiIEH4FEVw7yR3oCidGV4CWYxSgtArhu3TocPnz4su\/8Ty5phBavNOIVy78vYlT210XsT7hoHwpAH9i05\/l3AdBafLY7DAFbHDQRbLpZkh6UWowaNUoAigARI5o056SBXryYXpb+e\/pCdqdOvfyxBmlqICcVkaYyVF4aOUW4amtrBVNiLiymPqJ9sY40yvunF\/4nnf+\/\/a8WYkQOdFJGmmfLeGzV8qAbAraYY8+aNasnIvrPkkgjXyCwRaWlUfWjjz7qSVFCjUSwiC3m1+IVRGqb\/CP4KF2gQ5yJCHZVoDKhvvOH0b+\/Uh937tzZcxL7nzzkF4Md\/rzTHWz\/WRHpjaR4E7Z+\/Xrh0h8sYlNeLt7IBcuxacCl+a40YsoFm64Aq1at6pmBEMHPysrqSXf8TwaqQ1cW+qRUxH9mQ3pCiqkNnbjSNMw\/Vw\/nu0Y5ttzlF8JTZMISmoMdbh472AxHqIjd1tbWM98rTUXEKCmmBoHSEDEnDeYXRX0xnaGbOMqhKecn2Ojwnx3xtydNXUJFbNGWOCtC\/5bOyITy3X8KVaNZEQbbhCekIS75pyaRNhppCiGeVJHcOJINzrEjHUkL1xfTJHH6UauuSOfDldqkq52GvzxyxFY6AFze3ApwxDb3+LB3KhVgsFUKx9XMrQCDbe7xYe9UKsBgqxSOq5lbAQbb3OPD3qlUgMFWKRxXM7cCDLa5x4e9U6kAg61SOK5mbgUYbHOPD3unUgEGW6VwXM3cCjDY5h4f9k6lAgy2SuG4mrkVYLDNPT7snUoFGGyVwnE1cyvAYJt7fNg7lQrELNi8l7pKYixQTcVe6hbo1ZUuBnyLwuVyHaqoqBgxbtw4S3aKnQ6uQHV1Ndxu92GPx3ODnXUKCLbD4SjKz89\/sri4ON7OnY\/FvhUWFnaWlpau9Hq9C+3c\/2DvvWUnJCR80tDQ4ExJSbFz\/2Oqb5SGpKend7S3t99EC2TZufNBX+hMSkp6we12527ZsiXRzgLEUt\/y8vLaKioqyltbWx+1e79DvqlMuXZBQcGIhQttfdWy+xgL\/SsqKkJJSYntc2txMMO9gj\/E5XK9NWnSpMySkpJETkusdw5Q+lFQUNBWVVV1wuPx3AXgpPV6odzjcGALFikt6erqmjZz5sxeOTk58bT6EUOuXGyjahDMtKZ2ZWVlZ1lZWXdcXNzmWEg\/pPrKAttXIdvhcOSmpqa6W1pasjo6OmhPQD5MqIDT6WxPTk6ubWpqqvB6veV2v1EMNARKwDbhEGrmUneIXYo1a4QNGacAg31JawbbOOYMaYnBZrANAc3oRhhsBtto5gxpj8FmsA0BzehGGGwG22jmDGmPwWawDQHN6EYYbAbbaOYMaY\/BZrANAc3oRhhsBtto5gxpj8FmsA0BzehGGGwG22jmDGmPwWawDQHN6EYYbAbbaOYMaY\/BZrANAc3oRhhsBtto5gxpj8FmsA0BzehGGGwG22jmDGmPwWawDQHN6EYYbAbbaOYMaY\/BZrANAc3oRhhsBtto5gxpj8FmsA0BzehGGGwG22jmDGmPwWawDQHN6EYYbAbbaOYMaY\/BZrANAc3oRhhsBtto5gxpj8FmsA0BzehGGGwG22jmDGmPwWawDQHN6EYYbAbbaOYMaY\/BZrANAc3oRhhsBtto5gxpj8FmsA0BzehGGGwG22jmDGmPwWawDQHN6EYYbAbbaOYMaY\/BZrANAc3oRhhsBtto5gxpj8FmsA0BzehGGGwG22jmDGmPwWawDQHN6EYYbAbbaOYMaY\/BZrANAc3oRhhsBtto5gxpj8FmsA0BzehGGGwG22jmDGmPwWawDQHN6EYYbAbbaOYMaY\/BZrANAc3oRmIV7McBFAF4CkApgG4ApEU+gOcALATwvNGDwe1pp0Csgp0MwAOgC0AbABeAswD6AIjz\/btFO5nZktEKxCrYpPOzAAoBOCWidwAoBvBToweC29NWgVgGm6L2aQC9JZJeADAAAEdrbTkz3Fosg+0ftTlaG46ffg3GOtjSqM3RWj\/ODLcc62CLUZtmSWgWhHNrwxHUp0EGG6CovRnANM6t9YEsGlaVgJ3tcDhyU1NT3S0tLVkdHR0J0XCY2wyvgNPpbE9OTq5tamqq8Hq95QCOhK9lrxKywE5KSnqhq6tr2syZM3vl5OTEjxw5EikpKfZSwka9aW5uxsGDB1FZWdlZVlbWHRcXt7m1tfVRG3UxbFfCgT3E5XK9NWnSpMySkpJEhjmsnqYrQJAXFBS0VVVVnfB4PHcBOGk6J3VwKCTYLpfrUEFBwYiFC+kXZj6srEBRURFKSkoOezyeG6zcD7m+BwWb0g+32527ZcuWRLnGuJy5FcjLy2urqKgoj4W0JBjY2QkJCZ80NDQ4Of0wN6xKvKO0JD09vaO9vf0mu99QBgTb4XAU5efnP1lcXByvRDgua34FCgsLO0tLS1d6vV5b55cBwabcuqKiYsS4cePMP1LsoSIFqqur4Xa7bZ9rBwTb6XSeb2xsTOA0RBEzlihM6cigQYPaOzo66BFd2x7Bcuzu7m569p4POyrQq5cw7OGmei3ddQbb0sOnznkGW51uXMvkCjDYJh8gdk+dAgy2Ot24lskVYLBNPkDsnjoFGGx1unEtkyvAYJt8gNg9dQow2Op041omV4DBNvkAsXvqFGCw1enGtUyuAINt8gFi99QpwGCr041rmVwBBtvkA8TuqVOAwVanG9cyuQIMtskHiN1TpwCDrVC3I0eOYPLkycKaFuJBa5Ds2LED2dnZCq1pV5z8mjt3LtauXRtVP6hH27ZtEzo2ZcoU4b+nTp0q\/HvZsmVYtGiR8N\/nz5\/HvHnzsGHDBuHfM2bMwJo1a4T\/XrJkCaZPnx5RPxhshWwFAmj\/\/v2YPXt2VOE2C9jkx6ZNm\/DMM8\/gxIkTPf9NMhPIY8eO7QFehF+EXPxOaqNPH3UvwTDYGoBNJpYvXy5YoojkH4327duH0aNHgwZs6dKl6NevX0+kEr\/zr7N161YBADroxBkzZsxlkc1\/wEOB7fF4BFu7du26LHKSz8OHD+9pRxpppVemiRMnCpHX5XIJvlDkbWxsxG233SZEWakvZHP8+PFCf\/0PslFTU9MTtaXf03d79+7tsRfKjpwhY7DlqCQpEwwgGvDy8nJhYFavXt0DuTSa0x8pjZk\/f74AEw1efX29UOe1117rGXQCccGCBVixYgXOnDnTk2JkZmYKUS8jI+MKOIL5FSgaiikL2RZ9lqYAaWlpgn90khKgUj8PHDgQ9Ook9ZtOAunh74e\/7NLAIJ7Me\/bsCXgSyBkyBluOSgrAJhgoPxShEAc0NzcXBIw0D5aeDFKwQ0UyaR1ppJSbihB8c+bMEa4c5I\/0BBJTCIKXQBOjtHilWbduHQ4fPnzZd1Jfg6UQ4hVHGvml9eh7aXv0XaTpCIOtEdjipVQEW7zsi+YptRg1apQAFAEiXtbFiEmQ0uAuXrxYqCKmKNKbL9FWIEBCgS1NZciG9GZXvOTX1tYK5ilS+5eX1pFGef90KNhJJ\/odCOBg9ycMdngwNX2ZNxhA4qV01qxZPRHRf5ZEGvkCgS12RRpVP\/roo6B5qX+0DDQrIubX4hVEapv8I7AqKysFU+JMRChAQ30XDkZ\/7eikpRNbvDLIif7hh\/tSCY7YcpXylZMzKyLNF8WbsPXr1wuX\/mARm\/Jy8UYuWI5NIErzXTmpiD\/YBNGqVat6ZnDE77Oysnpu3ALVEQGkVER6lZHK559j+58E0htE\/3THfxioLufYoeHUPGKHm8cONsMRKmK3tbVdNnMhpiLUNWlqECxPDTW\/TlFfnEumeWOCinJ+cebCf3ZEzHHFfkpTl3Dphv9shjSVkvouTbvE4RPnssW0LNjsipxYxBFbjko2LuOfmkTa1XDpiBz7WthgsOUobdMyYpQXpx+16qZ0PlypTbra8S+P8lTTNBWR1ySXirYCHLGjPQLcvi4KMNi6yMpGo60Agx3tEeD2dVGAwdZFVjYabQUY7GiPALeviwIMti6ystFoK8BgR3sEuH1dFGCwdZGVjUZbAQY72iPA7euiAIOti6xsNNoKMNjRHgFuXxcFGGxdZGWj0VaAwY72CHD7uijAYOsiKxuNtgIMdrRHgNvXRYGYBZv3UteFJ1MYjem91F0u16GKiooR48aNM8VgsBPaKVBdXQ23233Y4\/HcoJ1V81kK+AaNw+Eoys\/Pf7K4uDjefC6zR5EoUFhY2FlaWrrS6\/UujMSO2esGezUsOyEh4ZOGhgZnSkqK2fvA\/slUgNKQ9PT0jvb29ptoQSmZ1SxZLBjYSEpKesHtdudu2bIl0ZI9Y6evUCAvL6+toqKivLW19VG7yxMUbOo45doFBQUjFi609VXL7mMs9K+oqAglJSW2z63FwQwJNoAhLpfrrUmTJmWWlJQkclpivXOA0o+CgoK2qqqqEx6P5y4AJ63XC+UehwNbsEhpSVdX17SZM2f2ysnJiafVjxhy5WIbVYNgpl0lKisrO8vKyrrj4uI2x0L6IdVXFti+CtkOhyM3NTXV3dLSktXR0ZFg1EBxO8oUcDqd7cnJybVNTU0VXq+33O43ioHUUQK2MnWtVbqbFiG1lsvsbSgFeDAvqcNg2+w8YbAZbJshfak7DDaDzWDbUgEG25bDyhGbwWawbakAg23LYeWIzWAz2LZUgMG25bByxGawGWxbKsBg23JYOWIz2Ay2LRVgsG05rByxGWwG25YKMNi2HFaO2Aw2g21LBRhsWw4rR2wGm8G2pQIMti2HlSM2g81g21IBBtuWw8oRm8FmsG2pAINty2HliM1gM9i2VIDBtuWwcsRmsBlsWyrAYNtyWDliM9gMti0VYLBtOawcsRlsBtuWCjDYthxWjtgMNoNtSwUYbFsOK0dsBpvBtqUCDLYth5UjNoPNYNtSAQbblsPKEZvBZrBtqQCDbcth5YjNYDPYtlSAwbblsMZqxH4cQBGApwCUSvZ5zAfwHICFAJ635YjHSKdiFexkAB4AXQDaALgAnAXQB0Cc798tMcKALbsZq2DTYD4LoBCAUzKyHQCKAfzUlqMdQ52KZbApap8G0Fsy3hcADADA0driJ0Esg+0ftTlaWxxmqfuxDrY0anO0ZrBtpMClXJtmSWgWhHNrmwxtrEdsGkaK2psBTOPc2iZUAzAC7Izrr79+39GjR7PsI5uxPbn++utrjx49OgZAvbEtW7c13cFOTEz8xcMPP\/xISUmJdFrNuopFwfOCgoKOF198cWNbW9tjUWjekk3qDXYGgLq6ujpkZNB\/8qFGgfr6egwdOpSq0v9x1JYhoq5gc7SWMQIyi3DUlimUr5ieYHO0VjYWIUtz1FYmpm5gc7RWNhBySnPUlqPSpTJ6gc3RWv4YyC7JUVu2VPqAzdFa\/gAoLclRW55iekRsjtbytFdViqO2PNk0B5ujtTzhIynFUTu8elqDzdE6vOYRl+CoHV5CTcHmaB1ecK1KcNQOraSWYHO01opaGXY4ahsENkdrGTRqXISjdnBBtYrYHK01hlaOOY7aOoPN0VoOhvqU4agdWFctIjZHa32YlWWVo7ZOYHO0lsWfroU4al8pb6QRm6O1rsjKM85RW2OwOVrLA8+IUhy1L1c5kojN0doIYmW2wVFbI7A5WsskzsBiHLX\/LrbaiM3R2kBg5TbFUTtCsDlay0XN+HIctS9priZic7Q2nlfZLXLUVgk2R2vZjEWtIEdt5RGbo3XUcJXfMEdthWBztJYPV7RLxnrUVpJjc7SONq0K2o\/1qC0bbI7WCqgySdFYjtpyweZobRJYlbgRy1FbFtgcrZXgZK6ysRq15YDN0dpcrCryJlajdliwOVor4siUhWMxaocDm6O1KVFV5lQsRu2QYFslWh85cgSTJ0\/GwYMHhRFftmwZFi1aFHb0PR4P5syZg6VLlyI7Ozts+UAFqG2qv27dOrhctMGvOY9Yi9qhwLZEtN6\/fz9mz56NHTt29MC5fPlyUJRas2YN+vShXaQDH7EEdqxF7aBgWyFanz9\/HvPmzUNubi5Gjx7dQ6\/07zfffPNlZUSYn3rqKZSVlWHDhg0YOXIkXn75ZeHfVP6Xv\/ylEP23bt2KKVOmwD8q08lUXl4uXBWmT5+OXbt2YeLEidi2bRtHbZNcsIKBbYloHSoNoKhNxxNPPBEQbEof0tLSelKRzMxMoVxtba0A6JkzZzB37lysXbtWsCNNN0Sw6Ypw4sQJS6Qi1IdYitoBwbZCtKaBCgU2wVlTU6MY7LFjxwpRmg46OYYPH45Ro0bZAmzqU6zk2oHAHnLddde9u3379mtuueUWk1xYAruhB9jStMaOYH\/88cd44IEHjn\/66ad3ADhp6gGOwDlLR2w1OTadDGKKESgVESO2aJv+7R+x6Wqwd+9e4ebUSqlIrEds6r8lcmxyNNysCJWh3Jn2maSbPYJy1apVwixKILCpvAisNMem6cT169cLN5dkT1rOCtN9nGP7wr9V8mwx1w41jy2d5y4uLsaHH34o5MziDeP777\/fMytCJ8DixYsFFfbt29cz20InxNSpU4UZlFmzZuHAgQPCCdDW1taTk\/OsSAS5g8ZVLT+PrZUewdIarexH204szYiQ1rb45VELaOwOdqzMhogs8LMiWpwVJrcRa9E6bMSmAlbKtU3OV9Tci7VoLQtsK82QRI0cEzcci9FaLtgctU0MbjjXYjFaywabo3Y4fMz5faxGayVgc9Q2J7shvYrVaK0IbI7a1iI7lqO1UrA5aluI7ViO1orB5qhtDbJjPVqrAZujtgXYjvVorQpsjtrmJpuj9aXxCfeTesBR5F8jzQs3R+sIwOaobU6wOVr\/fVxURWyqzlHbfHBztNYAbI7a5gKbo\/Xl46E6YnPUNhfYHK01BJujtjng5mh95ThEFLE5apsDbI7WOoDNUTu6cHO0Dqx\/xBGbo3Z0weZorSPYHLWjAzdH6+C6axKxOWpHB2yO1gaAzVHbWLg5WofWW7OIzVHbWLA5WhsINkdtY+DmaB1eZ00jNkft8IJrUYKjdXgVNQebo3Z40SMpwdFannp6gM1P\/snTXlUpjtbyZNMFbI7a8sRXWoqjtXzF9AKbo7b8MZBdkqO1bKnUvRom07xldkWQ2Z+oFuNorUx+3SI2z5AoG4hwpTlah1Po8u91BZtzbWWDEaw0R2vlOuoNNufaysfkihocrZWLqDvYFLWvv\/76fUePHs1S7h7XIAWuv\/762qNHj46hzXVZEXkKGAG2PE+4FCugoQIMtoZisinzKMBgm2cs2BMNFWCwNRSTTZlHAQbbPGPBnmiowP8HXjuqjlauORsAAAAASUVORK5CYII=\" style=\"cursor:pointer;max-width:100%;\" onclick=\"(function(img){if(img.wnd!=null&&!img.wnd.closed){img.wnd.focus();}else{var r=function(evt){if(evt.data=='ready'&&evt.source==img.wnd){img.wnd.postMessage(decodeURIComponent(img.getAttribute('src')),'*');window.removeEventListener('message',r);}};window.addEventListener('message',r);img.wnd=window.open('https:\/\/viewer.diagrams.net\/?client=1&page=0&edit=_blank');}})(this);\"\/>","87b2483d":"<a id=\"1\"><\/a>\n<h1 style = \"font-size:50px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #00bbf9; text-align: center; border-radius: 100px 100px;\">Problem Statement<\/h1>\n<p>\n    According to the World Health Organization (WHO) stroke is the 2nd leading cause of death globally, responsible for approximately 11% of total deaths.\nThis dataset is used to predict whether a patient is likely to get stroke based on the input parameters like gender, age, various diseases, and smoking status. Each row in the data provides relavant information about the patient.\n    <\/p>\n<p>Source - <a href=\"https:\/\/www.kaggle.com\/fedesoriano\/stroke-prediction-dataset\">Kaggle - Stroke Prediction Dataset<\/a><\/p>","742ba500":"<h5>Only about 5% of the patients in the dataset experienced a stroke. While this may be good news for the patients, it makes creating our model more difficult. Later I will need to use SMOTE to balance the dataset.<\/h5>","9d5be6f5":"<h3>About Each Attribute<\/h3>\n<ul>\n<li>id: unique identifier<\/li>\n<li>gender: \"Male\", \"Female\" or \"Other\"<\/li>\n<li>age: age of the patient<\/li>\n<li>hypertension: 0 if the patient doesn't have hypertension, 1 if the patient has hypertension<\/li>\n<li>heart_disease: 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart disease<\/li>\n<li>ever_married: \"No\" or \"Yes\"<\/li>\n<li>work_type: \"children\", \"Govt_jov\", \"Never_worked\", \"Private\" or \"Self-employed\"<\/li>\n<li>Residence_type: \"Rural\" or \"Urban\"<\/li>\n<li>avg_glucose_level: average glucose level in blood<\/li>\n<li>bmi: body mass index<\/li>\n<li>smoking_status: \"formerly smoked\", \"never smoked\", \"smokes\" or \"Unknown\"*<\/li>\n<li>stroke: 1 if the patient had a stroke or 0 if not<\/li>\n<\/ul>\n<p>*Note: \"Unknown\" in smoking_status means that the information is unavailable for this patient<\/p>\n<p>Source - <a href=\"https:\/\/www.kaggle.com\/fedesoriano\/stroke-prediction-dataset\">Kaggle - Stroke Prediction Dataset<\/a><\/p>","b11bb588":"<h5>Now time to evaluate the model on the test data.<\/h5>","de347a48":"<h1 style = \"font-size:60px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #00bbf9; text-align: center; border-radius: 100px 100px;\">Stroke Prediction with Neural Networks<\/h1>\n\n<img src=\"https:\/\/media.istockphoto.com\/photos\/blood-clot-or-thrombus-blocking-the-red-blood-cells-stream-within-an-picture-id1297034329\" height=400px width=800px>\n\n<h1 style = \"font-size:40px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #00bbf9; text-align: center; border-radius: 100px 100px;\">Table of Contents<\/h1>\n\n* [Problem Statement](#1)\n    \n* [Project Objectives](#2)\n    \n* [Importing Libraries and Read In Dataset](#3)\n\n* [Visualizing the Data](#4)\n    \n* [Data Preprocessing](#5) \n\n* [Creating the Neural Network](#6)\n\n* [Conclusions](#7)","0108db6b":"<a id=\"4\"><\/a>\n<h1 style = \"font-size:50px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #00bbf9; text-align: center; border-radius: 100px 100px;\">Visualizing the Data<\/h1>","6f75d536":"<h5>BMI is the only column that has missing values. This will be handled later with KNN Imputer.<\/h5>","39590091":"<a id=\"6\"><\/a>\n<h1 style = \"font-size:50px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #00bbf9; text-align: center; border-radius: 100px 100px;\">Creating the Neural Network<\/h1>\n","8232f5df":"<a id=\"5\"><\/a>\n<h1 style = \"font-size:50px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #00bbf9; text-align: center; border-radius: 100px 100px;\">Data Preprocessing<\/h1>\n\n<h5>Now that we better understand the data, the data can be processed to feed to the neural network. First catagoric variables will be one hot encoded. After this I will take care of the null values for bmi. The KNN imputer will be used to fill in the missing values -- basing the new values off of similar patients. After that, the numeric variables will be scaled. Next, SMOTE will be used to increase the number of data points that are of the positive class (stroke). Finally, the data set will be split into train, validation and test datasets.<\/h5>","6c514045":"<a id=\"3\"><\/a>\n<h1 style = \"font-size:50px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #00bbf9; text-align: center; border-radius: 100px 100px;\">Importing Libraries and Read in Dataset<\/h1>","569c336c":"<a id=\"2\"><\/a>\n<h1 style = \"font-size:50px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #00bbf9; text-align: center; border-radius: 100px 100px;\">Project Objectives<\/h1>\n\n<ul>\n    <li>Determine what makes a person at risk for stroke<\/li>\n    <li>Create a machine learning model to perform early detection of stroke for patients<\/li> \n<\/ul>\n","6e75ad9c":"<h5>This architecture contains 5 dense layers and a skip connection in order to not lose any of the more simple connections while building more complex connections.<\/h5>","afb5c091":"<h5>Now the data is clean and the dataset is perfectly balanced. Time to work on the neural network!<\/h5>"}}