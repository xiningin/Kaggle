{"cell_type":{"3895f0bf":"code","27331553":"code","f82a46e0":"code","04b29560":"code","11d36795":"code","73b5b110":"code","08011552":"code","a767e0fb":"code","572896ed":"code","a2640018":"code","ba425ef6":"code","89a98f85":"code","916680e4":"code","7287f544":"code","3266af09":"code","74fc98aa":"code","036a65c0":"code","7e7c9ffe":"code","3611d4f8":"markdown"},"source":{"3895f0bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn import preprocessing\nfrom sklearn.cluster import KMeans\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","27331553":"df=pd.read_csv(\"\/kaggle\/input\/wine-pca\/Wine.csv\")\ndf.head()","f82a46e0":"df.info()","04b29560":"import seaborn as sns\nimport matplotlib.pyplot as plt\nheatmap=sns.heatmap(df.corr(),vmax=1, vmin=-1,annot=True,cmap=\"BrBG\")\nplt.figure(figsize=(160, 160))","11d36795":"df.corr()","73b5b110":"df.Customer_Segment.unique()","08011552":"sns.regplot(x=\"Flavanoids\",y=\"Total_Phenols\",data=df)\nplt.figure(figsize=(16,6))","a767e0fb":"df.columns","572896ed":"\nnew_df= preprocessing.StandardScaler().fit_transform(df)\nnew_df = pd.DataFrame(new_df, columns=['Alcohol', 'Malic_Acid', 'Ash', 'Ash_Alcanity', 'Magnesium','Total_Phenols', 'Flavanoids', 'Nonflavanoid_Phenols','Proanthocyanins', 'Color_Intensity', 'Hue', 'OD280', 'Proline','Customer_Segment'])","a2640018":"new_df.head()","ba425ef6":"new_df=new_df.drop([\"Customer_Segment\"],axis=1)\nnew_df.head()","89a98f85":"new_df.head()","916680e4":"new_df.columns","7287f544":"fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(6, 5))\n\nax1.set_title('Before Scaling')\nsns.kdeplot(df['Alcohol'], ax=ax1)\nsns.kdeplot(df['Ash_Alcanity'], ax=ax1)\nsns.kdeplot(df['Malic_Acid'], ax=ax1)\nax2.set_title('After Standard Scaler')\nsns.kdeplot(new_df['Alcohol'], ax=ax2)\nsns.kdeplot(new_df['Ash_Alcanity'], ax=ax2)\nsns.kdeplot(new_df['Malic_Acid'], ax=ax2)\nplt.show()","3266af09":"X=new_df.iloc[:,1:].values\nError =[]\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters = i).fit(X)\n    kmeans.fit(X)\n    Error.append(kmeans.inertia_)\n\nplt.plot(range(1, 11), Error)\nplt.title('Elbow method')\nplt.xlabel('No of clusters')\nplt.ylabel('Error')\nplt.show()\n","74fc98aa":"kmeans3=KMeans(n_clusters = 3).fit(X)\ny_pred3=kmeans3.fit_predict(X)\nprint(y_pred3)","036a65c0":"kmeans3.cluster_centers_","7e7c9ffe":"plt.scatter(X[:,5],X[:,4],c=y_pred3,cmap=\"rainbow\")","3611d4f8":"**feel free to edit and experiment**"}}