{"cell_type":{"47595d51":"code","b3df6a69":"code","c6ffefdd":"code","88156435":"code","70f6ed94":"code","82d021c4":"code","f587e5c7":"code","0b0e4b93":"code","50e875ff":"code","81192cd7":"code","94d65e21":"code","4312d529":"code","c838550b":"code","59156626":"code","a0d77174":"code","f902607b":"code","313e3201":"markdown","fda2f8db":"markdown","a5db5d94":"markdown","95ca3bd5":"markdown","bf4f92e6":"markdown","6a078b31":"markdown","eec93e50":"markdown","a5e48f90":"markdown"},"source":{"47595d51":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nsns.set()\n\nimport torch\n%matplotlib inline","b3df6a69":"iris = sns.load_dataset(\"iris\")","c6ffefdd":"#g = sns.pairplot(iris, hue=\"species\")\n\ndf = iris[iris.species != \"setosa\"]\ng = sns.pairplot(df, hue=\"species\")\ndf['species_n'] = iris.species.map({'versicolor':1, 'virginica':2});","88156435":"# Y = 'petal_length', 'petal_width'; X = 'sepal_length', 'sepal_width')\nX_iris = np.asarray(df.loc[:, ['sepal_length', 'sepal_width']], dtype=np.float32)\nY_iris = np.asarray(df.loc[:, ['petal_length', 'petal_width']], dtype=np.float32)\nlabel_iris = np.asarray(df.species_n, dtype=int)","70f6ed94":"scalerx, scalery = StandardScaler(), StandardScaler()\nX_iris = scalerx.fit_transform(X_iris)\nY_iris = StandardScaler().fit_transform(Y_iris)","82d021c4":"X_iris_tr, X_iris_val, Y_iris_tr, Y_iris_val, label_iris_tr, label_iris_val = train_test_split(X_iris, Y_iris, label_iris, train_size=0.5,stratify=label_iris)","f587e5c7":"# X=X_iris_tr; Y=Y_iris_tr; X_val=X_iris_val; Y_val=Y_iris_val\ndef two_layer_regression_numpy_train(X, Y, X_val, Y_val, lr, nite):\n    # N is batch size; D_in is input dimension;\n    # H is hidden dimension; D_out is output dimension.\n    # N, D_in, H, D_out = 64, 1000, 100, 10\n    N, D_in, H, D_out = X.shape[0], X.shape[1], 100, Y.shape[1]\n    W1 = np.random.randn(D_in, H)\n    W2 = np.random.randn(H, D_out)\n    losses_tr, losses_val = list(), list()\n    learning_rate = lr\n    for t in range(nite):\n        # Forward pass: compute predicted y\n        z1 = X.dot(W1)\n        h1 = np.maximum(z1, 0)\n        Y_pred = h1.dot(W2)\n        # Compute and print loss\n        loss = np.square(Y_pred - Y).sum()\n        # Backprop to compute gradients of w1 and w2 with respect to loss\n        grad_y_pred = 2.0 * (Y_pred - Y)\n        grad_w2 = h1.T.dot(grad_y_pred)\n        grad_h1 = grad_y_pred.dot(W2.T)\n        grad_z1 = grad_h1.copy()\n        grad_z1[z1 < 0] = 0\n        grad_w1 = X.T.dot(grad_z1)\n        # Update weights\n        W1 -= learning_rate * grad_w1\n        W2 -= learning_rate * grad_w2\n        # Forward pass for validation set: compute predicted y\n        z1 = X_val.dot(W1)\n        h1 = np.maximum(z1, 0)\n        y_pred_val = h1.dot(W2)\n        loss_val = np.square(y_pred_val - Y_val).sum()\n        losses_tr.append(loss)\n        losses_val.append(loss_val)\n        if t % 10 == 0:\n            print(t, loss, loss_val)\n    return W1, W2, losses_tr, losses_val","0b0e4b93":"W1, W2, losses_tr, losses_val = two_layer_regression_numpy_train(X=X_iris_tr,\n                                                                 Y=Y_iris_tr,\n                                                                 X_val=X_iris_val,\n                                                                 Y_val=Y_iris_val,\n                                                                 lr=1e-4, nite=50);\nplt.plot(np.arange(len(losses_tr)), losses_tr, \"-b\", np.arange(len(losses_val)), losses_val, \"-r\");","50e875ff":"# X=X_iris_tr; Y=Y_iris_tr; X_val=X_iris_val; Y_val=Y_iris_val\ndef two_layer_regression_tensor_train(X, Y, X_val, Y_val, lr, nite):\n    dtype = torch.float\n    device = torch.device(\"cpu\")\n    # device = torch.device(\"cuda:0\") # Uncomment this to run on GPU\n    # N is batch size; D_in is input dimension;\n    # H is hidden dimension; D_out is output dimension.\n    N, D_in, H, D_out = X.shape[0], X.shape[1], 100, Y.shape[1]\n    # Create random input and output data\n    X = torch.from_numpy(X)\n    Y = torch.from_numpy(Y)\n    X_val = torch.from_numpy(X_val)\n    Y_val = torch.from_numpy(Y_val)\n    # Randomly initialize weights\n    W1 = torch.randn(D_in, H, device=device, dtype=dtype)\n    W2 = torch.randn(H, D_out, device=device, dtype=dtype)\n    losses_tr, losses_val = list(), list()\n    learning_rate = lr\n    for t in range(nite):\n        # Forward pass: compute predicted y\n        z1 = X.mm(W1)\n        h1 = z1.clamp(min=0)\n        y_pred = h1.mm(W2)\n        # Compute and print loss\n        loss = (y_pred - Y).pow(2).sum().item()\n        # Backprop to compute gradients of w1 and w2 with respect to loss\n        grad_y_pred = 2.0 * (y_pred - Y)\n        grad_w2 = h1.t().mm(grad_y_pred)\n        grad_h1 = grad_y_pred.mm(W2.t())\n        grad_z1 = grad_h1.clone()\n        grad_z1[z1 < 0] = 0\n        grad_w1 = X.t().mm(grad_z1)\n        # Update weights using gradient descent\n        W1 -= learning_rate * grad_w1\n        W2 -= learning_rate * grad_w2\n        # Forward pass for validation set: compute predicted y\n        z1 = X_val.mm(W1)\n        h1 = z1.clamp(min=0)\n        y_pred_val = h1.mm(W2)\n        loss_val = (y_pred_val - Y_val).pow(2).sum().item()\n        losses_tr.append(loss)\n        losses_val.append(loss_val)\n        if t % 10 == 0:\n            print(t, loss, loss_val)\n    return W1, W2, losses_tr, losses_val\n","81192cd7":"W1, W2, losses_tr, losses_val = two_layer_regression_tensor_train(X=X_iris_tr,\n                                                                  Y=Y_iris_tr,\n                                                                  X_val=X_iris_val,\n                                                                  Y_val=Y_iris_val,\n                                                                  lr=1e-4, nite=50)\nplt.plot(np.arange(len(losses_tr)), losses_tr, \"-b\", np.arange(len(losses_val)), losses_val, \"-r\");","94d65e21":"# X=X_iris_tr; Y=Y_iris_tr; X_val=X_iris_val; Y_val=Y_iris_val\n# del X, Y, X_val, Y_val\ndef two_layer_regression_autograd_train(X, Y, X_val, Y_val, lr, nite):\n    dtype = torch.float\n    device = torch.device(\"cpu\")\n    # device = torch.device(\"cuda:0\") # Uncomment this to run on GPU\n    # N is batch size; D_in is input dimension;\n    # H is hidden dimension; D_out is output dimension.\n    N, D_in, H, D_out = X.shape[0], X.shape[1], 100, Y.shape[1]\n    # Setting requires_grad=False indicates that we do not need to compute gradients\n    # with respect to these Tensors during the backward pass.\n    X = torch.from_numpy(X)\n    Y = torch.from_numpy(Y)\n    X_val = torch.from_numpy(X_val)\n    Y_val = torch.from_numpy(Y_val)\n    # Create random Tensors for weights.\n    # Setting requires_grad=True indicates that we want to compute gradients with\n    # respect to these Tensors during the backward pass.\n    W1 = torch.randn(D_in, H, device=device, dtype=dtype, requires_grad=True)\n    W2 = torch.randn(H, D_out, device=device, dtype=dtype, requires_grad=True)\n    losses_tr, losses_val = list(), list()\n    learning_rate = lr\n    for t in range(nite):\n        # Forward pass: compute predicted y using operations on Tensors; these\n        # are exactly the same operations we used to compute the forward pass using\n        # Tensors, but we do not need to keep references to intermediate values since\n        # we are not implementing the backward pass by hand.\n        y_pred = X.mm(W1).clamp(min=0).mm(W2)\n        # Compute and print loss using operations on Tensors.\n        # Now loss is a Tensor of shape (1,)\n        # loss.item() gets the scalar value held in the loss.\n        loss = (y_pred - Y).pow(2).sum()\n        # Use autograd to compute the backward pass. This call will compute the\n        # gradient of loss with respect to all Tensors with requires_grad=True.\n        # After this call w1.grad and w2.grad will be Tensors holding the gradient\n        # of the loss with respect to w1 and w2 respectively.\n        loss.backward()\n        # Manually update weights using gradient descent. Wrap in torch.no_grad()\n        # because weights have requires_grad=True, but we don't need to track this\n        # in autograd.\n        # An alternative way is to operate on weight.data and weight.grad.data.\n        # Recall that tensor.data gives a tensor that shares the storage with\n        # tensor, but doesn't track history.\n        # You can also use torch.optim.SGD to achieve this.\n        with torch.no_grad():\n            W1 -= learning_rate * W1.grad\n            W2 -= learning_rate * W2.grad\n            # Manually zero the gradients after updating weights\n            W1.grad.zero_()\n            W2.grad.zero_()\n            y_pred = X_val.mm(W1).clamp(min=0).mm(W2)\n            # Compute and print loss using operations on Tensors.\n            # Now loss is a Tensor of shape (1,)\n            # loss.item() gets the scalar value held in the loss.\n            loss_val = (y_pred - Y).pow(2).sum()\n            \n        if t % 10 == 0:\n            print(t, loss.item(), loss_val.item())\n        losses_tr.append(loss.item())\n        losses_val.append(loss_val.item())\n    return W1, W2, losses_tr, losses_val","4312d529":"W1, W2, losses_tr, losses_val = two_layer_regression_autograd_train(X=X_iris_tr, Y=Y_iris_tr,\n                                                                    X_val=X_iris_val,\n                                                                    Y_val=Y_iris_val,\n                                                                    lr=1e-4, nite=50)\nplt.plot(np.arange(len(losses_tr)), losses_tr, \"-b\", np.arange(len(losses_val)), losses_val, \"-r\")","c838550b":"# X=X_iris_tr; Y=Y_iris_tr; X_val=X_iris_val; Y_val=Y_iris_val\n# del X, Y, X_val, Y_val\ndef two_layer_regression_nn_train(X, Y, X_val, Y_val, lr, nite):\n    # N is batch size; D_in is input dimension;\n    # H is hidden dimension; D_out is output dimension.\n    N, D_in, H, D_out = X.shape[0], X.shape[1], 100, Y.shape[1]\n    X = torch.from_numpy(X)\n    Y = torch.from_numpy(Y)\n    X_val = torch.from_numpy(X_val)\n    Y_val = torch.from_numpy(Y_val)\n    # Use the nn package to define our model as a sequence of layers. nn.Sequential\n    # is a Module which contains other Modules, and applies them in sequence to\n    # produce its output. Each Linear Module computes output from input using a\n    # linear function, and holds internal Tensors for its weight and bias.\n    model = torch.nn.Sequential(\n    torch.nn.Linear(D_in, H),\n    torch.nn.ReLU(),\n    torch.nn.Linear(H, D_out),\n    )\n    # The nn package also contains definitions of popular loss functions; in this\n    # case we will use Mean Squared Error (MSE) as our loss function.\n    loss_fn = torch.nn.MSELoss(reduction='sum')\n    losses_tr, losses_val = list(), list()\n    learning_rate = lr\n    for t in range(nite):\n        # Forward pass: compute predicted y by passing x to the model. Module objects\n        # override the __call__ operator so you can call them like functions. When\n        # doing so you pass a Tensor of input data to the Module and it produces\n        # a Tensor of output data.\n        y_pred = model(X)\n        # Compute and print loss. We pass Tensors containing the predicted and true\n        # values of y, and the loss function returns a Tensor containing the\n        # loss.\n        loss = loss_fn(y_pred, Y)\n        # Zero the gradients before running the backward pass.\n        model.zero_grad()\n        # Backward pass: compute gradient of the loss with respect to all the learnable\n        # parameters of the model. Internally, the parameters of each Module are stored\n        # in Tensors with requires_grad=True, so this call will compute gradients for\n        # all learnable parameters in the model.\n        loss.backward()\n        # Update the weights using gradient descent. Each parameter is a Tensor, so\n        # we can access its gradients like we did before.\n        with torch.no_grad():\n            for param in model.parameters():\n                param -= learning_rate * param.grad\n            y_pred = model(X_val)\n            loss_val = (y_pred - Y_val).pow(2).sum()\n            if t % 10 == 0:\n                print(t, loss.item(), loss_val.item())\n        losses_tr.append(loss.item())\n        losses_val.append(loss_val.item())\n    return model, losses_tr, losses_val","59156626":"model, losses_tr, losses_val = two_layer_regression_nn_train(X=X_iris_tr, Y=Y_iris_tr,\n                                                             X_val=X_iris_val,\n                                                             Y_val=Y_iris_val,\n                                                             lr=1e-4, nite=50)\nplt.plot(np.arange(len(losses_tr)), losses_tr, \"-b\", np.arange(len(losses_val)), losses_val, \"-r\");","a0d77174":"# X=X_iris_tr; Y=Y_iris_tr; X_val=X_iris_val; Y_val=Y_iris_val\ndef two_layer_regression_nn_optim_train(X, Y, X_val, Y_val, lr, nite):\n    # N is batch size; D_in is input dimension;\n    # H is hidden dimension; D_out is output dimension.\n    N, D_in, H, D_out = X.shape[0], X.shape[1], 100, Y.shape[1]\n    X = torch.from_numpy(X)\n    Y = torch.from_numpy(Y)\n    X_val = torch.from_numpy(X_val)\n    Y_val = torch.from_numpy(Y_val)\n    # Use the nn package to define our model and loss function.\n    model = torch.nn.Sequential(\n    torch.nn.Linear(D_in, H),\n    torch.nn.ReLU(),\n    torch.nn.Linear(H, D_out),\n    )\n    loss_fn = torch.nn.MSELoss(reduction='sum')\n    losses_tr, losses_val = list(), list()\n    # Use the optim package to define an Optimizer that will update the weights of\n    # the model for us. Here we will use Adam; the optim package contains many other\n    # optimization algoriths. The first argument to the Adam constructor tells the\n    # optimizer which Tensors it should update.\n    learning_rate = lr\n    optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n    for t in range(nite):\n        # Forward pass: compute predicted y by passing x to the model.\n        y_pred = model(X)\n        # Compute and print loss.\n        loss = loss_fn(y_pred, Y)\n        # Before the backward pass, use the optimizer object to zero all of the\n        # gradients for the variables it will update (which are the learnable\n        # weights of the model). This is because by default, gradients are\n        # accumulated in buffers( i.e, not overwritten) whenever .backward()\n        # is called. Checkout docs of torch.autograd.backward for more details.\n        optimizer.zero_grad()\n        # Backward pass: compute gradient of the loss with respect to model\n        # parameters\n        loss.backward()\n        # Calling the step function on an Optimizer makes an update to its\n        # parameters\n        optimizer.step()\n        \n        with torch.no_grad():\n            y_pred = model(X_val)\n        loss_val = loss_fn(y_pred, Y_val)\n        if t % 10 == 0:\n            print(t, loss.item(), loss_val.item())\n        losses_tr.append(loss.item())\n        losses_val.append(loss_val.item())\n    return model, losses_tr, losses_val","f902607b":"model, losses_tr, losses_val = two_layer_regression_nn_optim_train(X=X_iris_tr, Y=Y_iris_tr,\n                                                                   X_val=X_iris_val,\n                                                                   Y_val=Y_iris_val,\n                                                                   lr=1e-3, nite=50)\nplt.plot(np.arange(len(losses_tr)), losses_tr, \"-b\", np.arange(len(losses_val)), losses_val, \"-r\");","313e3201":"# Backpropagation with PyTorch: Tensors and autograd\n\nA fully-connected ReLU network with one hidden layer and no biases, trained to predict y\nfrom x by minimizing squared Euclidean distance. This implementation computes the forward\npass using operations on PyTorch Tensors, and uses PyTorch autograd to compute gradients.\nA PyTorch Tensor represents a node in a computational graph. If x is a Tensor that has x.\nrequires_grad=True then x.grad is another Tensor holding the gradient of x with respect to\nsome scalar value.","fda2f8db":"# Scale","a5db5d94":"# Backpropagation with PyTorch: Neural Network\n\nThis implementation uses the nn package from PyTorch to build the network. PyTorch autograd\nmakes it easy to define computational graphs and take gradients, but raw autograd can be a bit\ntoo low-level for defining complex neural networks; this is where the nn package can help. The\nnn package defines a set of Modules, which you can think of as a neural network layer that has\nproduces output from input and may have some trainable weights.","95ca3bd5":"# Backpropagation with PyTorch Tensors\n\nNumpy is a great framework, but it cannot utilize GPUs to accelerate its numerical computations.\nFor modern deep neural networks, GPUs often provide speedups of 50x or greater,\nso unfortunately numpy won\u2019t be enough for modern deep learning. Here we introduce the\nmost fundamental PyTorch concept: the Tensor. A PyTorch Tensor is conceptually identical to a\nnumpy array: a Tensor is an n-dimensional array, and PyTorch provides many functions for operating\non these Tensors. Behind the scenes, Tensors can keep track of a computational graph\nand gradients, but they\u2019re also useful as a generic tool for scientific computing. Also unlike\nnumpy, PyTorch Tensors can utilize GPUs to accelerate their numeric computations. To run a\nPyTorch Tensor on GPU, you simply need to cast it to a new datatype. Here we use PyTorch\nTensors to fit a two-layer network to random data. Like the numpy example above we need to\nmanually implement the forward and backward passes through the network:","bf4f92e6":"# Load iris data set\nGoal: Predict Y = [petal_length, petal_width] = f(X = [sepal_length, sepal_width])\n\n   *  Plot data with seaborn\n   *  Remove setosa samples\n   *  Recode \u2018versicolor\u2019:1, \u2018virginica\u2019:2\n   *  Scale X and Y\n   *  Split data in train\/test 50%\/50%","6a078b31":"# Split train test","eec93e50":"# Backpropagation with numpy\nThis implementation uses numpy to manually compute the forward pass, loss, and backward\npass.","a5e48f90":"# Backpropagation with PyTorch optim\n\nThis implementation uses the nn package from PyTorch to build the network. Rather than manually\nupdating the weights of the model as we have been doing, we use the optim package to\n254 Chapter 6. Deep Learning\nStatistics and Machine Learning in Python, Release 0.3 beta\ndefine an Optimizer that will update the weights for us. The optim package defines many optimization\nalgorithms that are commonly used for deep learning, including SGD+momentum,\nRMSProp, Adam, etc."}}