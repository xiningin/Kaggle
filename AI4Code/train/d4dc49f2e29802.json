{"cell_type":{"7dbd65c2":"code","0d61103e":"code","80114d5c":"code","3419c138":"code","d4cbb6fd":"code","21cc8b28":"code","18167354":"code","55fe5f52":"code","e17aa0bb":"code","b50338a1":"code","ee36023d":"code","0dc4b4d5":"code","c0a44f5f":"code","a57cf0be":"code","a44dad68":"code","2dc67160":"code","21df12a2":"code","27c7d712":"code","911caddd":"code","3432c34f":"code","9ab5c4eb":"code","e41b8068":"code","5d8cb395":"code","11d32c86":"code","e791e806":"code","f5796e44":"code","993b3fa9":"code","7aa46d3a":"code","2bf66e12":"code","60e8b897":"markdown","2da04206":"markdown","07ccb824":"markdown","3e45e427":"markdown","59202b5b":"markdown","63775b0e":"markdown","aa805106":"markdown"},"source":{"7dbd65c2":"#Import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport plotly.io as pio\n#pio.renderers","0d61103e":"# load dataset\niris = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')","80114d5c":"iris.head()","3419c138":"iris.describe()","d4cbb6fd":"iris.info()","21cc8b28":"iris.drop('Id',inplace=True,axis=1)","18167354":"iris.columns = map(str.lower, iris.columns)\niris.columns","55fe5f52":"# By removing the hue you can plot histograms for univariate distributions\nplt.style.use('ggplot')\nsns.pairplot(iris,hue='species',palette='colorblind')","e17aa0bb":"from mpl_toolkits.mplot3d.axes3d import Axes3D","b50338a1":"X= iris[iris['species']=='Iris-setosa']['sepallengthcm']\nY= iris[iris['species']=='Iris-setosa']['sepalwidthcm']\nZ= iris[iris['species']=='Iris-setosa']['sepalwidthcm']\n\n\nX2= iris[iris['species']=='Iris-virginica']['sepallengthcm']\nY2= iris[iris['species']=='Iris-virginica']['sepalwidthcm']\nZ2= iris[iris['species']=='Iris-virginica']['sepalwidthcm']\n\nX3= iris[iris['species']=='Iris-versicolor']['sepallengthcm']\nY3= iris[iris['species']=='Iris-versicolor']['sepalwidthcm']\nZ3= iris[iris['species']=='Iris-versicolor']['sepalwidthcm']","ee36023d":"fig = plt.figure()\nax = Axes3D(fig)\nax.scatter(X, Y, Z,c='b',label='Setosa')\nax.scatter(X2, Y2, Z2,c='r',label='Virginica')\nax.scatter(X3, Y3, Z3,c='g',label='Versicolor')\nplt.legend()","0dc4b4d5":"import plotly.express as px\ndf = px.data.iris()\nfig = px.scatter_3d(iris, x='sepallengthcm', y='sepalwidthcm', z='petalwidthcm',\n              color='species')\n# to see interactive plot, just remove 'renderer=\"svg\"'\nfig.show(renderer=\"kaggle\")","c0a44f5f":"from sklearn.model_selection import train_test_split\nX = iris.drop('species',axis=1)\ny= iris['species']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)","a57cf0be":"from sklearn.svm import SVC\nmodel = SVC()\nmodel.fit(X_train,y_train)","a44dad68":"prediction = model.predict(X_test)","2dc67160":"from sklearn.metrics import confusion_matrix,classification_report\nprint(confusion_matrix(prediction,y_test))\nprint(classification_report(prediction,y_test))","21df12a2":"# Scale Data\nfrom sklearn.preprocessing import StandardScaler\nscale= StandardScaler()\nscale.fit(iris.drop('species',axis=1))\nscaled_data = scale.transform(iris.drop('species',axis=1))","27c7d712":"from sklearn.decomposition import PCA\npca = PCA(n_components=3)","911caddd":"pca.fit(scaled_data)","3432c34f":"transformed_pca = pca.transform(scaled_data)","9ab5c4eb":"transformed_pca.shape","e41b8068":"transformed_iris = pd.DataFrame(transformed_pca,columns=['component1', 'component2', 'component3'])\ntransformed_iris['species'] = iris['species']\ntransformed_iris.head()","5d8cb395":"fig = px.scatter_3d(iris, x=transformed_iris['component1'], y=transformed_iris['component2'], \n                    z=transformed_iris['component3'],color='species')\n# to see interactive plot, just remove 'renderer=\"svg\"'\nfig.show(renderer=\"kaggle\")","11d32c86":"#Train model after PCA","e791e806":"transformed_iris.head()","f5796e44":"X2 = transformed_iris.drop('species',axis=1)\ny2= transformed_iris['species']\nX_train2, X_test2, y_train2, y_test2 = train_test_split(X2, y2, test_size=0.3)","993b3fa9":"from sklearn.svm import SVC\nmodel2 = SVC()\nmodel2.fit(X_train2,y_train2)","7aa46d3a":"prediction2 = model2.predict(X_test2)","2bf66e12":"print(confusion_matrix(prediction2,y_test2))\nprint(classification_report(prediction2,y_test2))","60e8b897":"## Evaluate model","2da04206":"## 3D Scatter plot","07ccb824":"## Interactive 3D Scatter plot","3e45e427":"## EDA","59202b5b":"## Support Vector Machine","63775b0e":"## PCA (dimension reduction)","aa805106":"## Evaluate model"}}