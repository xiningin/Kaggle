{"cell_type":{"d434213f":"code","a3258961":"code","3bbcbe0a":"code","2c06be78":"code","7d495a64":"code","9f791c09":"code","636c151b":"markdown","2f392f15":"markdown","d74eb82e":"markdown","975d5436":"markdown","b9b7891e":"markdown","f335a313":"markdown"},"source":{"d434213f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a3258961":"from skimage import data\nfrom skimage import color\nfrom skimage.filters import meijering, sato, frangi, hessian\nimport matplotlib.pyplot as plt\n\n\ndef identity(image, **kwargs):\n    \"\"\"Return the original image, ignoring any kwargs.\"\"\"\n    return image\n\n\nimage = color.rgb2gray(data.retina())[300:700, 700:900]\ncmap = plt.cm.gray\n\nkwargs = {'sigmas': [1], 'mode': 'reflect'}\n\nfig, axes = plt.subplots(2, 5)\nfor i, black_ridges in enumerate([1, 0]):\n    for j, func in enumerate([identity, meijering, sato, frangi, hessian]):\n        kwargs['black_ridges'] = black_ridges\n        result = func(image, **kwargs)\n        axes[i, j].imshow(result, cmap=cmap, aspect='auto')\n        if i == 0:\n            axes[i, j].set_title(['Original\\nimage', 'Meijering\\nneuriteness',\n                                  'Sato\\ntubeness', 'Frangi\\nvesselness',\n                                  'Hessian\\nvesselness'][j])\n        if j == 0:\n            axes[i, j].set_ylabel('black_ridges = ' + str(bool(black_ridges)))\n        axes[i, j].set_xticks([])\n        axes[i, j].set_yticks([])\n\nplt.tight_layout()\nplt.show()","3bbcbe0a":"from skimage import data\nfrom skimage import color\nfrom skimage.filters import meijering, sato, frangi, hessian\nimport matplotlib.pyplot as plt\n\n\ndef identity(image, **kwargs):\n    \"\"\"Return the original image, ignoring any kwargs.\"\"\"\n    return image\n\n\nimage = color.rgb2gray(data.retina())[300:700, 700:900]\ncmap = plt.cm.gray\n\nkwargs = {'sigmas': [1]}\n\nfig, axes = plt.subplots(2, 5)\nfor i, black_ridges in enumerate([1, 0]):\n    for j, func in enumerate([identity, meijering, sato, frangi, hessian]):\n        kwargs['black_ridges'] = black_ridges\n        result = func(image, **kwargs)\n        axes[i, j].imshow(result, cmap=cmap, aspect='auto')\n        if i == 0:\n            axes[i, j].set_title(['Original\\nimage', 'Meijering\\nneuriteness',\n                                  'Sato\\ntubeness', 'Frangi\\nvesselness',\n                                  'Hessian\\nvesselness'][j])\n        if j == 0:\n            axes[i, j].set_ylabel('black_ridges = ' + str(bool(black_ridges)))\n        axes[i, j].set_xticks([])\n        axes[i, j].set_yticks([])\n\nplt.tight_layout()\nplt.show()","2c06be78":"result = meijering(image)\nplt.imshow(result, cmap=cmap, aspect='auto')","7d495a64":"sigmas = [i for i in range(1, 10, 5)]","9f791c09":"result = meijering(image,sigmas=[1,5,10,20])\nplt.imshow(result, cmap=cmap, aspect='auto')","636c151b":"meijering (https:\/\/scikit-image.org\/docs\/stable\/api\/skimage.filters.html?highlight=filter#skimage.filters.meijering)\nhat einen parameter \"sigmas\", mit Standardwert \"range(1, 10, 1)\"\nich wollte den etwsa anpassen, um zu schauen, ob sich das Bild ver\u00e4ndert:","2f392f15":"1. Et voil\u00e0! Ich fand das Beispiel zu kompliziert. Hier eine abgespeckte Version:","d74eb82e":"Originalcode von hier:\nhttps:\/\/scikit-image.org\/docs\/stable\/auto_examples\/edges\/plot_ridge_filter.html#sphx-glr-auto-examples-edges-plot-ridge-filter-py","975d5436":"# Meijering-Filter\nDie referenzierte Publikation ist   \n[https:\/\/onlinelibrary.wiley.com\/doi\/full\/10.1002\/cyto.a.20022](https:\/\/onlinelibrary.wiley.com\/doi\/full\/10.1002\/cyto.a.20022)\n\nDarin geht's um die Kantendetektion bei \"Neuriten\" (?). Sie sagen:\n\n> technique consists of (1) a detection phase, in which every individual pixel in the image is assigned a value indicating its likelihood of be-longing to a neurite; and (2) the actual tracing phase, in which consecutive pixels that are most likely to represent the centerlines of the neurites are linked together to constitute the tracings.\n    \n    ","b9b7891e":"Originalcode funktioniert gar nicht!! Ich musste das 'mode' Schl\u00fcsselwertpaar entfernen:","f335a313":"Offenbar bewirkt ein zu grosses Sigma, dass die weissen R\u00e4nder gr\u00f6sser werden."}}