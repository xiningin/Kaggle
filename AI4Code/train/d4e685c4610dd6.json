{"cell_type":{"9b984896":"code","28f4bbd5":"code","12f9f76d":"code","657fd961":"code","ecdbec54":"code","0115fa94":"code","ba503351":"code","35558c83":"code","5e9ceb6e":"code","23b7dbc1":"code","25a39aaf":"code","8a31748c":"code","64b21f60":"code","c32a4fd5":"code","5f6dd214":"code","815f0d09":"code","d1c6402a":"code","22d72b77":"code","e993c943":"code","a5e55133":"code","6a43072e":"code","99c6cd69":"code","df001f6a":"code","1a49c01a":"code","5688afb7":"code","bc8d77bd":"code","b8f0b372":"code","66eb0c07":"code","5bca72e8":"code","b9cbba58":"code","866f3995":"code","f8135215":"markdown","96072b68":"markdown","0bd92504":"markdown","1c6d7997":"markdown","f9854bda":"markdown","72175655":"markdown","bf71c8b6":"markdown","c5a4f5cf":"markdown","3cad041a":"markdown","3a40ab46":"markdown","4d5dd5a4":"markdown","1a95d1b8":"markdown","9ea9fd5c":"markdown","d77b8283":"markdown","58ec4905":"markdown","5478c036":"markdown","4ab14511":"markdown","127f05f2":"markdown"},"source":{"9b984896":"# Basic Libraries\nimport numpy as np\nimport pandas as pd\n\n# Plotting and Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\n\n# Datetime \nimport warnings\nwarnings.filterwarnings('ignore')","28f4bbd5":"# Importing data\ndata = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')","12f9f76d":"# Checking the shape of the data\ndata.shape","657fd961":"# Checking for total number of null values\ndata.isnull().sum()","ecdbec54":"# Checking datatypes of each column\ndata.dtypes","0115fa94":"# Changing the datatype of Date from Object to Datetime\ndata.Date = pd.to_datetime(data.Date,dayfirst=True,errors='coerce')\n# data.ConfirmedForeignNational = data.ConfirmedForeignNational.astype(np.int64)\n# data.ConfirmedIndianNational = data.ConfirmedIndianNational.astype(np.int64)","ba503351":"# Checking the dtype of columns\ndata.dtypes","35558c83":"# Dropping the columns\ndata.drop(['Sno','Time'],axis=1,inplace=True)","5e9ceb6e":"data['State\/UnionTerritory'].unique()","23b7dbc1":"data[data['State\/UnionTerritory']=='Unassigned']","25a39aaf":"data.drop([500,528,617],inplace=True) # Dropped the unassigned values","8a31748c":"# Checking the Data head\ndata.head(3)","64b21f60":"ind = data.groupby('Date').agg({'Confirmed':'sum','Cured':'sum','Deaths':'sum'})\nind['SpreadRate'] = 0\nfor i in ind.index:\n  ind.loc[i,'SpreadRate'] = (ind.loc[ind.index.min(),'Confirmed'] if i ==  ind.index.min() else ind.loc[i,'Confirmed'] - ind.loc[i-np.timedelta64(1,'D'),'Confirmed'])\nind['ActiveCases'] = ind['Confirmed'] - ind['Cured']\nfig = make_subplots(rows=3,cols=2,specs=[[{},{}],[{'rowspan':2,'colspan':2},None],[None,None]],subplot_titles=['India Spread Rate','Active Cases','Confirmed vs Deaths vs Cured'])\n# Spread Rate in India\nfig.add_trace(go.Scatter(name='Spread Rate in India',x=ind.index,y=ind.SpreadRate,mode='markers+lines'),row=1,col=1)\nfig.update_xaxes(title_text='Date',row=1,col=1)\nfig.update_yaxes(title_text='Spread Rate',row=1,col=1)\n# Active Cases in India\nfig.add_trace(go.Scatter(name='Active Cases in India',x=ind.index,y=ind.ActiveCases,mode='markers+lines'),row=1,col=2)\nfig.update_xaxes(title_text='Date',row=1,col=2)\nfig.update_yaxes(title_text='Active Cases in India',row=1,col=2)\n# Bar plot Comparison\nht = [f'Confirmed Cases:{i}' for i in ind.Confirmed]\nfig.add_trace(go.Bar(x=ind.index,y=ind.Confirmed,name='Confirmed Cases',hovertext=ht),row=2,col=1)\nht = [f'Cured Cases:{i}' for i in ind.Cured]\nfig.add_trace(go.Bar(x=ind.index,y=ind.Cured,name='Cured Cases',hovertext=ht),row=2,col=1)\nht = [f'Deceased Cases:{i}' for i in ind.Deaths]\nfig.add_trace(go.Bar(x=ind.index,y=ind.Deaths,name='Deceased Cases',hovertext=ht),row=2,col=1)\nfig.update_xaxes(title_text='Date')\nfig.update_yaxes(title_text='Number of cases')\n# Layout\nfig.update_layout(title_text='Spread Rate vs Active Cases in India',barmode='stack',height=950)\nfig.show()","c32a4fd5":"latest_data = data.groupby('Date').get_group(data.Date.max())[['Date','State\/UnionTerritory','Cured','Deaths','Confirmed']]\nlatest_data['ActiveCases'] = latest_data['Confirmed'] - latest_data['Cured'] - latest_data['Deaths']\nlatest_data.sort_values(by='ActiveCases',ascending=False,inplace=True)\ntop3 = list(latest_data.head(3)['State\/UnionTerritory'])\ndisplay(latest_data.style.background_gradient(cmap='summer',subset=['ActiveCases']))\nprint()\nprint(f'States with Highest Active cases are {top3}')","5f6dd214":"# Storing group data in state_wise_groups\nstate_wise_groups = data.groupby('State\/UnionTerritory')","815f0d09":"'''Defining a function to give the stats of each State'''\ndef state_details(state_name,start_date=data.Date.min(),end_date=data.Date.max()):\n\n  '''Single State'''\n  if isinstance(state_name,str):\n    state = state_wise_groups.get_group(state_name).reset_index(drop=True)\n    state = state[(state.Date>=np.datetime64(start_date))&(state.Date<=np.datetime64(end_date))]\n    state['SpreadRate'] = 0\n    for i in state.index:\n      state.loc[i,'SpreadRate'] = (state.loc[i,'Confirmed'] if i == state.index.min() else state.loc[i,'Confirmed']-state.loc[i-1,'Confirmed'])\n    state['ActiveCases'] = state['Confirmed'] - state['Cured'] - state['Deaths']\n\n    fig = make_subplots(rows=2,cols=2,specs=[[{},{}],[{'colspan':2},None]],subplot_titles=[f'Spread Rate over a Period of {state.Date.max() - state.Date.min()} in {state_name}',f'Active Cases in {state_name}',f'Confirmed vs Deceased and Recovered Cases in {state_name}'])\n\n    # Spread Rate in the Given State\n    fig.add_trace(go.Scatter(name='Spread Cases per Day',x = state.Date,y = state.SpreadRate,mode='markers+lines'),row=1,col=1)\n    fig.update_xaxes(title_text='Dates',row=1,col=1)\n    fig.update_yaxes(title_text='Spread Rate',row=1,col=1)\n\n    # Active Cases in Given State\n    fig.add_trace(go.Scatter(name='Active Cases',x = state.Date,y = state.ActiveCases,mode='markers+lines'),row=1,col=2)\n    fig.update_xaxes(title_text='Dates',row=1,col=2)\n    fig.update_yaxes(title_text='Active Cases',row=1,col=2)\n\n    # Bar Plot\n    ht = [f'Confirmed Cases:{i}' for i in state.Confirmed]\n    fig.add_trace(go.Bar(x=state.Date,y=state.Confirmed,name='Confirmed Cases',hovertext=ht),row=2,col=1)\n    ht = [f'Cured Cases:{i}' for i in state.Cured]\n    fig.add_trace(go.Bar(x=state.Date,y=state.Cured,name='Cured Cases',hovertext=ht),row=2,col=1)\n    ht = [f'Deceased Cases:{i}' for i in state.Deaths]\n    fig.add_trace(go.Bar(x=state.Date,y=state.Deaths,name='Deceased Cases',hovertext=ht),row=2,col=1)\n\n    fig.update_layout(title_text=f'Spread Rate and Comparison of Cured vs Deceased vs Confirmed in {state_name}',height=950,barmode='stack')\n    fig.show()\n\n    # Showing Average Spread Rate in the Given Time Period\n    print(f'Average Spread Rate in {state_name} is {state.SpreadRate.mean()}')\n  \n  elif isinstance(state_name,list):\n    fig = make_subplots(rows=2,cols=2,subplot_titles=['Active Cases','Spread Rate','Deceased Cases','Cured Cases'])\n    state_color=['purple', 'red', 'rosybrown','royalblue', 'saddlebrown', 'salmon', 'sandybrown','seagreen', 'seashell', 'sienna', 'silver', 'skyblue']\n    count=0\n    # State-wise plotting\n    for s in set(state_name):\n      state = state_wise_groups.get_group(s).reset_index(drop=True)\n      state = state[(state.Date>=np.datetime64(start_date))&(state.Date<=np.datetime64(end_date))]\n      state['SpreadRate'] = 0\n      for i in state.index:\n        state.loc[i,'SpreadRate'] = (state.loc[i,'Confirmed'] if i == state.index.min() else state.loc[i,'Confirmed']-state.loc[i-1,'Confirmed'])\n      state['ActiveCases'] = state['Confirmed'] - state['Cured']\n      c=state_color[count] \n      count+=1\n      # Active Cases\n      ht = [f'{s}:{i}' for i in state.ActiveCases]\n      fig.add_trace(go.Scatter(name=f'{s}',x=state.Date,y=state.ActiveCases,hovertext=ht,mode='markers+lines',legendgroup='state',showlegend=True,line=dict(color=c)),row=1,col=1)\n\n      # Spread Rate\n      ht = [f'{s}:{i}' for i in state.SpreadRate]\n      fig.add_trace(go.Scatter(name=f'{s}',x=state.Date,y=state.SpreadRate,hovertext=ht,mode='markers+lines',legendgroup='state',showlegend=False,line=dict(color=c)),row=1,col=2)\n\n      # Deceased Cases\n      ht = [f'{s}:{i}' for i in state.Deaths]\n      fig.add_trace(go.Scatter(name=f'{s}',x=state.Date,y=state.Deaths,hovertext=ht,mode='markers+lines',legendgroup='state',showlegend=False,line=dict(color=c)),row=2,col=1)\n\n      # Cured Cases\n      ht = [f'{s}:{i}' for i in state.Cured]\n      fig.add_trace(go.Scatter(name=f'{s}',x=state.Date,y=state.Cured,hovertext=ht,mode='markers+lines',legendgroup='state',showlegend=False,line=dict(color=c)),row=2,col=2)\n    \n    # X and Y axis labels for Each Subplots\n    fig.update_xaxes(title_text='Date',row=1,col=1)\n    fig.update_yaxes(title_text='Active Cases',row=1,col=1)\n    fig.update_xaxes(title_text='Date',row=1,col=2)\n    fig.update_yaxes(title_text='Spread Rate',row=1,col=2)\n    fig.update_xaxes(title_text='Date',row=2,col=1)\n    fig.update_yaxes(title_text='Deceased Cases',row=2,col=1)\n    fig.update_xaxes(title_text='Date',row=2,col=2)\n    fig.update_yaxes(title_text='Cured Cases',row=2,col=2)\n\n    # Layout properties\n    fig.update_layout(title_text=f'Comparison between {state_name}',height=950)\n    fig.show()","d1c6402a":"# Spread Rate from the day of first detection\nstate_details('Kerala')","22d72b77":"# Spread Rate in Kerala for past 7 days\nstate_details('Kerala','2020-03-29')","e993c943":"# Spread Rate in Tamil Nadu since First Detection\nstate_details('Tamil Nadu')","a5e55133":"# Spread Rate in Tamil Nadu Over past 7 Days\nstate_details('Tamil Nadu','2020-03-29')","6a43072e":"state_details('Maharashtra')","99c6cd69":"# Spread Rate in Maharashtra Over past 7 Days\nstate_details('Maharashtra','2020-03-29')","df001f6a":"state_details('Delhi')","1a49c01a":"state_details('Delhi',data.Date.max()-pd.Timedelta(7,'D'))","5688afb7":"state_details(top3)","bc8d77bd":"state_details(top3,start_date=data.Date.max()-pd.Timedelta(7,'D'))","b8f0b372":"data['SpreadRate'] = 0\nfor s in data['State\/UnionTerritory'].unique():\n  state = state_wise_groups.get_group(s)\n  state['SpreadRate'] = 0\n  state['CureRate'] = 0\n  state['DeathRate'] = 0\n  for i in state.index:\n    data.loc[i,'SpreadRate']=state[state.Date == state.Date.min()]['Confirmed'].values if state.loc[i,'Date']==state.Date.min() else state.loc[i,'Confirmed']-state.loc[state[state.Date==state.loc[i,'Date']-pd.Timedelta(1,'D')].index.values,'Confirmed'].values\n    data.loc[i,'CureRate']=state[state.Date == state.Date.min()]['Cured'].values if state.loc[i,'Date']==state.Date.min() else state.loc[i,'Cured']-state.loc[state[state.Date==state.loc[i,'Date']-pd.Timedelta(1,'D')].index.values,'Cured'].values\n    data.loc[i,'DeathRate']=state[state.Date == state.Date.min()]['Deaths'].values if state.loc[i,'Date']==state.Date.min() else state.loc[i,'Deaths']-state.loc[state[state.Date==state.loc[i,'Date']-pd.Timedelta(1,'D')].index.values,'Deaths'].values","66eb0c07":"# Average Spread rate,Cure Rate,Death Rate for each state\narps = []\nfor s in data['State\/UnionTerritory'].unique():\n  state = state_wise_groups.get_group(s)\n  arps.append({'State':s,'Average Spread Rate':state['SpreadRate'].mean(),'Average Cure Rate':state['CureRate'].mean(),'Average Death Rate':state['DeathRate'].mean()})\naverages_statewise = pd.DataFrame(arps)","5bca72e8":"# Averages for the Entirity \nprint('Total Averages for all the States')\naverages_statewise.sort_values(by='Average Spread Rate',ascending=False).style.background_gradient(cmap='summer')","b9cbba58":"# Averages for the past 7 Days\narps = []\nfor s in data['State\/UnionTerritory'].unique():\n  state = state_wise_groups.get_group(s)\n  state = state[(state.Date.max()>state.Date)&(state.Date>=state.Date.max()-pd.Timedelta(7,'D'))]\n  arps.append({'State':s,'Average Spread Rate':state['SpreadRate'].mean(),'Average Cure Rate':state['CureRate'].mean(),'Average Death Rate':state['DeathRate'].mean()})\nweekly_average = pd.DataFrame(arps)","866f3995":"print('Weekly Average for All States')\nweekly_average.sort_values(by='Average Spread Rate',ascending=False).style.background_gradient(cmap='summer')","f8135215":"### Kerala","96072b68":"# COVID-19 (**CO**rona **VI**rus **D**isease 20**19**)\n\nCoronavirus disease (COVID-19) is an infectious disease caused by a new virus.\nThe disease causes respiratory illness (like the flu) with symptoms such as a cough, fever, and in more severe cases, difficulty breathing.\n\n**How it spreads**\n\nCoronavirus disease spreads primarily through contact with an infected person when they cough or sneeze. It also spreads when a person touches a surface or object that has the virus on it, then touches their eyes, nose, or mouth.","0bd92504":"**Unnecessary Columns**\n- Sno,Time","1c6d7997":"### Delhi","f9854bda":"# Libraries","72175655":"**Note:** Removing unassigned values.","bf71c8b6":"## Specific Statewise Analysis","c5a4f5cf":"# Exploratory Data Analysis","3cad041a":"**Observation:**\n- The Spread rate in India has a spiking increase after March $25^{th}$ and it fluctuates a lot.\n- The Number of Active cases in India has steadily increased.","3a40ab46":"## Feature Engineering","4d5dd5a4":"# Data Cleaning and Preprocessing","1a95d1b8":"**Observation:**\n- Active Cases:\n  - Maharashtra shows a gradual climb in Active cases where as Delhi and Tamilnadu show a very steep climb in the past few days.\n  - This might be due to different factors. Some of them might be,\n    - Availability of Test-Kits\n    - End of 2-week Incubation period, etc.\n- Spread Rate:\n  - The Spread Rate peaks in each state at different days.\n  - Visual plotting cannot be used just to find a pattern.\n- Cured cases:\n  - The Factors influencing cure aren't determined as of yet.","9ea9fd5c":"## India Spread Rate in General","d77b8283":"**Observation:**\n- The top 3 states with highest active cases are as follows\n  1. Tamil Nadu\n  2. Delhi\n  3. Maharashtra","58ec4905":"### Maharashtra","5478c036":"### SpreadRate,CureRate and DeathRate","4ab14511":"## Comparing top 3 States with High Number of Active cases.","127f05f2":"### Tamil Nadu"}}