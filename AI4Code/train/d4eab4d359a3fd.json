{"cell_type":{"090266f3":"code","5c519313":"code","ed76248d":"code","dd9a6f58":"code","b2975bc1":"code","c77a82cf":"code","fdb8195f":"code","b09728fb":"code","125cb012":"code","8bfcc015":"code","9709474a":"code","62b9ac84":"code","a60a06d2":"code","cd3812a5":"code","dee1cf7b":"code","30078749":"code","4f68a0c9":"code","8574d541":"code","d1e5e004":"code","548c0f96":"code","44d81677":"code","8a9dcf07":"code","1813add6":"code","70474303":"code","2044a67a":"code","6ca5e9a2":"code","f12d7ecb":"code","5875d16d":"code","feec7bc0":"code","194a1a07":"markdown","74e19853":"markdown","5d517ebd":"markdown","b1bd9ede":"markdown","5924068c":"markdown","3ce4f515":"markdown","463f588b":"markdown","3ee8cb13":"markdown","60f8b336":"markdown","28f73319":"markdown","9d159d2c":"markdown","e14f3b46":"markdown","0c174272":"markdown","04bd39cf":"markdown","10ecabff":"markdown","a10b0f50":"markdown","88614182":"markdown","df04c7ea":"markdown","6bc7c224":"markdown","d4d9f352":"markdown","e6b1976c":"markdown","e1e0af43":"markdown"},"source":{"090266f3":"import numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","5c519313":"train.head()","ed76248d":"train.shape, test.shape ","dd9a6f58":"test.head()","b2975bc1":"train.info()","c77a82cf":"Total=train.isnull().sum().sort_values(ascending=False)\nPercent_null=(train.isnull().sum()\/train.isnull().count()).sort_values(ascending=False)\nmissing_data=pd.concat([Total, Percent_null],axis=1, keys=['Total', 'Percent_null'])\nmissing_data.head(15)","fdb8195f":"train = train.drop(['PoolQC','MiscFeature','Alley','Fence'],axis=1)\ntrain.head()","b09728fb":"test = test.drop(['PoolQC','MiscFeature','Alley','Fence'],axis=1)\ntest.head()","125cb012":"train_cat = train.select_dtypes(include = ['object'])\ntest_cat = test.select_dtypes(include = ['object'])\ntrain_cat.info()","8bfcc015":"train_num = train.select_dtypes(include = ['int64','float64'])\ntest_num = test.select_dtypes(include = ['int64','float64'])\ntrain_num.info()","9709474a":"missing_cat_train = pd.DataFrame(train_cat.isna().sum().sort_values(ascending = False), columns=['missing_cat_total'])\nmissing_cat_test = pd.DataFrame(test_cat.isna().sum().sort_values(ascending = False), columns = ['missing_cat_total'])\nprint(missing_cat_train)\nprint( '-' * 40)\nprint(missing_cat_test)","62b9ac84":"missing_num_train = pd.DataFrame(train_num.isna().sum().sort_values(ascending = False), columns=['missing_num_total'])\nmissing_num_test = pd.DataFrame(test_num.isna().sum().sort_values(ascending = False), columns = ['missing_num_total'])\nprint(missing_num_train)\nprint( '-' * 40)\nprint(missing_num_test)","a60a06d2":"for col in ('FireplaceQu', 'GarageCond', 'GarageQual', 'GarageFinish','GarageType', 'BsmtFinType2', 'BsmtFinType1', 'BsmtExposure', 'BsmtQual', 'BsmtCond', 'MasVnrType','Electrical',\n           'MSZoning','Functional','Utilities','Exterior1st','Exterior2nd','SaleType','KitchenQual'):\n    train[col] = train[col].fillna('NA')\ntrain['MasVnrType'] = train['MasVnrType'].fillna('None')\nfor col in ('GarageYrBlt','LotFrontage','BsmtHalfBath','BsmtFullBath','BsmtFinSF2','GarageCars',\n            'GarageArea','TotalBsmtSF','BsmtUnfSF','BsmtFinSF1'):\n    train[col] = train[col].fillna(train[col].mean())\ntrain['MasVnrArea'] = train['MasVnrArea'].fillna(0)\n\n# do the same for test data\n\nfor col in ('FireplaceQu', 'GarageCond', 'GarageQual', 'GarageFinish', 'GarageType','BsmtFinType2', 'BsmtFinType1', 'BsmtExposure', 'BsmtQual', 'BsmtCond', 'MasVnrType','Electrical',\n           'MSZoning','Functional','Utilities','Exterior1st','Exterior2nd','SaleType','KitchenQual'):\n    test[col] = test[col].fillna('NA')\ntest['MasVnrType'] = test['MasVnrType'].fillna('None')\nfor col in ('GarageYrBlt','LotFrontage','BsmtHalfBath','BsmtFullBath','BsmtFinSF2','GarageCars',\n            'GarageArea','TotalBsmtSF','BsmtUnfSF','BsmtFinSF1'):\n    test[col] = test[col].fillna(test[col].mean())\ntest['MasVnrArea'] = test['MasVnrArea'].fillna(0)","cd3812a5":"train_cat = train.select_dtypes(include = ['object'])\ntest_cat = test.select_dtypes(include = ['object'])\nmissing_cat_train = pd.DataFrame(train_cat.isna().sum().sort_values(ascending = False), columns=['missing_cat_total'])\nmissing_cat_test = pd.DataFrame(test_cat.isna().sum().sort_values(ascending = False), columns = ['missing_cat_total'])\nprint(missing_cat_train)\nprint( '-' * 40)\nprint(missing_cat_test)","dee1cf7b":"train_num = train.select_dtypes(include = ['int64','float64'])\ntest_num = test.select_dtypes(include = ['int64','float64'])\nmissing_num_train = pd.DataFrame(train_num.isna().sum().sort_values(ascending = False), columns=['missing_num_total'])\nmissing_num_test = pd.DataFrame(test_num.isna().sum().sort_values(ascending = False), columns = ['missing_num_total'])\nprint(missing_num_train)\nprint( '-' * 40)\nprint(missing_num_test)","30078749":"corrmat = train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True)","4f68a0c9":"corrmat[\"SalePrice\"].sort_values(ascending=False)","8574d541":"cols=[ 'SalePrice','OverallQual','GrLivArea','GarageCars','GarageArea','TotalBsmtSF','1stFlrSF',\n      'FullBath','TotRmsAbvGrd','YearBuilt','YearRemodAdd']\nc = train[cols].corr()\nf, ax = plt.subplots(figsize=(10, 8))\nsns.heatmap(c, vmax=.8, square=True,annot=True)","d1e5e004":"plt.figure(figsize=(20,35))\nsns.set_palette('pastel')\nsns.set_style('darkgrid')\n\ni=1\nfor c in train.select_dtypes(include = ['object']).columns:\n    plt.subplot(8,5,i)\n    sns.violinplot(x=c, y='SalePrice', data=train)\n    i=i+1\n    \nplt.subplots_adjust(wspace=0.5, hspace=0.8)\nplt.show()","548c0f96":"features=['MSZoning', 'Neighborhood', 'Condition1', 'Condition2', 'RoofMatl', 'Exterior1st', \n          'Exterior2nd', 'MasVnrType', 'ExterQual', 'BsmtQual', 'BsmtCond', 'KitchenQual', \n          'SaleType', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', \n          'YearBuilt', 'YearRemodAdd']\ntraintest=pd.concat([train, test], axis=0, sort=False)[features]\ntraintest.shape","44d81677":"train_test = pd.get_dummies(traintest)\ntrain_test.shape","8a9dcf07":"X_train=train_test[0:1460]\nX_test=train_test[1460:2919]\ny_train= train[['SalePrice']]","1813add6":"print('Train', X_train.shape)\nprint('Test', X_test.shape)","70474303":"from sklearn.linear_model import LinearRegression\n\nlm = LinearRegression()\nlm.fit(X_train, y_train)\nYhat=lm.predict(X_test) \nprint(Yhat)","2044a67a":"print('The R-square is: ', lm.score(X_train, y_train))","6ca5e9a2":"pred_lm=[]\nfor item in Yhat:\n    for i in item:\n        pred_lm.append(i)\n        \n#Code required to submit for competition\noutput = pd.DataFrame({'Id':pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')['Id'],\n                       'SalePrice': pred_lm})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","f12d7ecb":"import xgboost as xgb\n\nmodel = xgb.XGBRegressor()\nmodel.fit(X_train, y_train)\nYhat=model.predict(X_test) \nprint(Yhat)\n","5875d16d":"print('The R-square is: ', model.score(X_train, y_train))","feec7bc0":"pred_xgboost=[]\nfor item in Yhat:\n    pred_xgboost.append(item)\n        \n#Code required to submit for competition\noutput = pd.DataFrame({'Id':pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')['Id'],\n                       'SalePrice': pred_xgboost})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","194a1a07":"### 5.2. XGBoost","74e19853":"## 3. Correlation analysis and data visualization","5d517ebd":"In the table above we see correlation between SalePrice and all variables of sample. Let's take variables which have absolute value of correlaton >= 0.5 and take a look on correlatios between them.","b1bd9ede":"The same for test sample.","5924068c":"## 2.Handling missing values","3ce4f515":"## 4. Transforming categorial data to numeric","463f588b":"We see that some of the columns have many missing values. Let's see which columns have more than 50% missing values and drop them.","3ee8cb13":"Result of our model: RMSE=0.15438. This is better by 2.5 p.p. then the prediction using linear regression.","60f8b336":"Let's drop variables, which have more than 50% missing values.","28f73319":"### 5. Prediction","9d159d2c":"Thus, we have train and test samples having 80 independent features each. Train sample also has a dependent  feature - SalePrice. We will have to predict this value for test sample.\n\nTrain sample has 1460 records, so it is representative for making prediction. Let's move to handling missing values to see, which missing values we may replace, and which variables we have to drop because of high percentage of missing values.","e14f3b46":"Let's check if we covered all mising values.","0c174272":"## 1. Gathering data","04bd39cf":"Result of our model:\nRMSE=0.17936\n(between the logarithm of the predicted value and the logarithm of the observed sales price).\nThis is quite good, since logarithm of the observed sales price on test sample makes values about 10-15.\nBut let's try to improve our model.","10ecabff":"* FireplaceQu means Fireplace quality, missing value in this variable may mean that there is no fireplace, so let's replace it with 'NA' value.\n* Missing values in GarageCond, GarageQual, GarageFinish, GarageType must mean that there is no garage. Let's fill them with NA.\n* GarageYrBlt means year when garage was built. We will replace missing values with average for this variable.\n* Missing values in BsmtExposure, BsmtFinType2, BsmtFinType1, BsmtCond, BsmtQual must mean that house doesn't own a basement. Let's replace this with NA.\n* Missing values in MasVnrType we will replace with None.\n* MasVnrArea means masonry veneer area in square feet. If it is missing, this may mean that house has no masonry veneer, so let's replace missing values by 0.\n* LotFrontage means linear feet of street connected to property. Let's replace missing values here with mean.\n* There are also a few missing values in test sample for other variables (usually 1-2,  maximum). We will replace them with mean for numeric values and NA for categorial.","a10b0f50":"### 5.1. Linear regression\nFirst let's try to predict using simple linear regression. ","88614182":"## Introduction","df04c7ea":"This is my second work in Kaggle competitions. Here I will predict house prices in Ames, Iowa, USA, using python feature analysis and advanced regression techniques.\n\nResearch plan:\n1. Gathering data\n2. Handling missing values\n3. Correlation analysis and data visualization\n4. Transforming categorial data to numeric\n5. Prediction","6bc7c224":"Now let's handle other missing values, separately for categorial and numeric variables.","d4d9f352":"Let's explore data and see, on which features depends SalePrice.\n\nWe will begin with **numeric features**.","e6b1976c":"Violin plot shows distribution density of variable for different category values.\nIf mean significantly differs for different values of variable, it means strong correlation of variable with target (SalePrice).\n\nSo we have such variables with high correlation:\nMSZoning, Neighborhood, Condition1, Condition2, RoofMatl, Exterior1st, Exterior2nd, MasVnrType, ExterQual, BsmtQual, BsmtCond, KitchenQual, SaleType.\n\n\n\n### Correlation analysis conclusion\nList of variables which we will use for modelling:\nMSZoning, Neighborhood, Condition1, Condition2, RoofMatl, Exterior1st, Exterior2nd, MasVnrType, ExterQual, BsmtQual, BsmtCond, KitchenQual, SaleType, OverallQual, GrLivArea, GarageCars, TotalBsmtSF, FullBath, YearBuilt, YearRemodAdd.","e1e0af43":"### Notes on correlations:\n* OverallQual (Overall material and finish quality) and GrLivArea (Above grade (ground) living area square feet) have the highest correlaton with SalePrice (79% and 70%), which is logical.\n* GrLivArea and TotRmsAbvGrd have very high correlaion (83%), so we can leave only one of them for prediction. It will be GrLivArea, since it has higher correlation with SalePice.\n* TotalBsmtSF and 1stFlrSF have correlation 82%. They have equal correlation with SalePrice, let's leave TotalBsmtSF.\n* GarageCars and GarageArea have correlation 88%. We will leave GarageCars, it has greater correlation with SalePrice.\n\nSo let's focus on these numeric variables: \n'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt', 'YearRemodAdd'.\n\nNow let's see dependencies of SalePrice on **categorical features**.\nTo do this we will use violin plots."}}