{"cell_type":{"19f31577":"code","518b6663":"code","8080423a":"code","ecbc269b":"code","67d8ed6b":"code","5f91cb22":"code","6244897b":"code","202451cc":"code","c185149e":"code","b9eff946":"markdown","b72707fe":"markdown","a028af28":"markdown"},"source":{"19f31577":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\ndata = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\n\nX_train_origin = data.drop(['SalePrice'], axis=1)\ny = data.SalePrice\nX_test_origin = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nX_train = X_train_origin.copy()\nX_test = X_test_origin.copy()","518b6663":"threshold = 0.1\ntotal = X_train.isnull().sum().sort_values(ascending = False)\npercent = (X_train.isnull().sum()\/X_train.isnull().count()).sort_values(ascending = False)\nmissing_data = pd.concat([total, percent], axis =1, keys=['Total', 'Percentage'])\ndisplay(missing_data[(missing_data.Percentage > 0)])\nX_train = X_train.drop(missing_data[missing_data.Percentage > threshold].index, axis = 1)\nX_test = X_test.drop(missing_data[missing_data.Percentage > threshold].index, axis = 1)","8080423a":"threshold = 0.95\ntotal = X_train.nunique()\npercent = (X_train.nunique()\/X_train.count())#.sort_values(ascending = False)\nidness_data = pd.concat([total, percent], axis =1, keys=['Total', 'Percentage'])\ndisplay(idness_data[(idness_data.Percentage > 0.2)].sort_values(by='Percentage', ascending = False))\nX_train = X_train.drop(idness_data[idness_data.Percentage > threshold].index, axis = 1)\nX_test = X_test.drop(idness_data[idness_data.Percentage > threshold].index, axis = 1)\n","ecbc269b":"# Combine Test and Training sets to maintain consistancy.\ncombined = pd.concat([X_train,X_test],axis=0)\ncombined.head()\ncombined.shape\n\n# Missing Value Handling\ndef HandleMissingValues(df):\n    # for Object columns fill using 'UNKOWN'\n    # for Numeric columns fill using median\n    num_cols = [cname for cname in df.columns if df[cname].dtype in ['int64', 'float64']]\n    cat_cols = [cname for cname in df.columns if df[cname].dtype == \"object\"]\n    values = {}\n    for a in cat_cols:\n        values[a] = 'UNKOWN'\n\n    for a in num_cols:\n        values[a] = df[a].median()\n        \n    df.fillna(value=values,inplace=True)\n    \nHandleMissingValues(combined)\ncombined.head()\n\n# Check for any missing values\ncombined.isnull().sum().sum()","67d8ed6b":"#Categorical Feature Encoding\ndef getObjectColumnsList(df):\n    return [cname for cname in df.columns if df[cname].dtype == \"object\"]\n\ndef PerformOneHotEncoding(df,columnsToEncode):\n    return pd.get_dummies(df,columns = columnsToEncode)\n\ncat_cols = getObjectColumnsList(combined)\ncombined = PerformOneHotEncoding(combined,cat_cols)\ncombined.head()","5f91cb22":"#respliting the data into train and test datasets\nX_train=combined.iloc[:1460,:]\nX_test=combined.iloc[1460:,:]\nprint(X_train.shape)\nprint(X_test.shape)","6244897b":"import xgboost as xgb\n\nmodel_xgb = xgb.XGBRegressor(n_estimators=340, max_depth=2, learning_rate=0.2)\nmodel_xgb.fit(X_train, y)\nxgb_preds=model_xgb.predict(X_test)","202451cc":"#make the submission data frame\nsubmission = {\n    'Id': X_test_origin.Id.values,\n    'SalePrice': xgb_preds\n}\nsolution = pd.DataFrame(submission)\nsolution.head()","c185149e":"#make the submission file\nsolution.to_csv('submission.csv',index=False)","b9eff946":"#### Drop column with >95% of unique","b72707fe":"#### Drop column with >10% of missing data","a028af28":"#### Handle remaining missing data"}}