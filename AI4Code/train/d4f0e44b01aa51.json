{"cell_type":{"c45b7134":"code","7dcf2262":"code","d6e9ba07":"code","f14a7da3":"code","cd2b6347":"code","282b3946":"code","912af51e":"code","5c321df8":"code","1fa56a17":"code","f0a06d02":"code","43ed5b08":"code","2eb3a971":"code","ce2853d3":"code","f4e2f296":"code","acbc05c2":"code","643a3a5d":"markdown","7419bc8e":"markdown","cbe37077":"markdown","e324b271":"markdown","f8284eb1":"markdown","4d1407c7":"markdown","54d92211":"markdown","aace24b3":"markdown","ec8a9cbe":"markdown","edf02781":"markdown","aaae52b5":"markdown"},"source":{"c45b7134":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7dcf2262":"import pandas as pd \nimport numpy as np\nimport nltk\nfrom nltk.tokenize import RegexpTokenizer\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.metrics import  accuracy_score , confusion_matrix , plot_confusion_matrix ,  classification_report\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport seaborn as sns\nstyle.use(\"seaborn\")","d6e9ba07":"DataSet = pd.read_csv(\"..\/input\/spam-text-message-classification\/SPAM text message 20170820 - Data.csv\")","f14a7da3":"DataSet","cd2b6347":"DataSet.info()","282b3946":"DataSet.describe()","912af51e":"sns.countplot(DataSet[\"Category\"])","5c321df8":"token = RegexpTokenizer(r'[a-zA-Z0-9]+')\nBOW = CountVectorizer(lowercase=True,stop_words='english',ngram_range = (1,1),tokenizer = token.tokenize)\nText_BOW = BOW.fit_transform(DataSet[\"Message\"])","1fa56a17":"Label = LabelBinarizer().fit_transform(np.array(DataSet[\"Category\"]))","f0a06d02":"X_train , X_test , y_train , y_test = train_test_split(Text_BOW , Label , test_size = 0.25 , random_state = 42)","43ed5b08":"from sklearn.svm import SVC\nSVC_classifier = SVC().fit(X_train , y_train)\nSVC_classifier_prediction = SVC_classifier.predict(X_test)\nSVC_Acc = accuracy_score(y_test , SVC_classifier_prediction)*100\nprint(f\"SVC model accuracy :{format(SVC_Acc ,'.2f')}%\")\n\ncm  = confusion_matrix(y_test , SVC_classifier_prediction)\n\ndisp = plot_confusion_matrix(SVC_classifier, X_test, y_test,\n                             display_labels=[\"Ham\" , \"Spam\"],\n                             cmap=plt.cm.Blues)\nplt.show()\n\nprint(classification_report(y_test ,SVC_classifier_prediction  , target_names = [\"Ham\" ,\"Spam\"]))","2eb3a971":"from sklearn.neighbors import KNeighborsClassifier\nKNN_CLASSIFICATION = KNeighborsClassifier(n_neighbors=3)\nKNN_CLASSIFICATION.fit(X_train  , y_train)\nKNN_CLASSIFICATION_Prediction= KNN_CLASSIFICATION.predict(X_test)\nKNN_Acc = accuracy_score(y_test , KNN_CLASSIFICATION_Prediction)*100 \nprint(f\"K-NEATEST NEIGHBOR model accuracy : {format(KNN_Acc , '.2f')}%\")\n\ncm  = confusion_matrix(y_test , KNN_CLASSIFICATION_Prediction)\n\ndisp = plot_confusion_matrix(KNN_CLASSIFICATION, X_test, y_test,\n                             display_labels=[\"Ham\" , \"Spam\"],\n                             cmap=plt.cm.Blues)\n\nplt.show()\n\nprint(classification_report(y_test ,KNN_CLASSIFICATION_Prediction  , target_names = [\"Ham\" ,\"Spam\"]))","ce2853d3":"from sklearn.naive_bayes import MultinomialNB\nNB_Classification = MultinomialNB().fit(X_train , y_train)\nNB_Classification_Prediction = NB_Classification.predict(X_test)\nNB_Acc = accuracy_score(y_test , NB_Classification_Prediction)*100 \nprint(f\"NAIVE BAYES model accuracy : {format(NB_Acc, '.2f')}%\")\n\ncm  = confusion_matrix(y_test , NB_Classification_Prediction)\n\ndisp = plot_confusion_matrix(NB_Classification, X_test, y_test,\n                             display_labels=[\"Ham\" , \"Spam\"],\n                             cmap=plt.cm.Blues)\nplt.show()\n\nprint(classification_report(y_test ,NB_Classification_Prediction  , target_names = [\"Ham\" ,\"Spam\"]))","f4e2f296":"from sklearn.linear_model import LogisticRegressionCV\n\nLR_Classification = LogisticRegressionCV().fit(X_train , y_train)\n\nLR_Classification_Prediction = LR_Classification.predict(X_test)\n\nLR_Acc = accuracy_score(y_test ,LR_Classification_Prediction)*100 \n\nprint(f\"LOGISITC REGRESSION model accuracy : {format(LR_Acc, '.2f')} %\")\n\ncm = confusion_matrix(y_test , LR_Classification_Prediction)\n\ndict = plot_confusion_matrix(LR_Classification, X_test , y_test , display_labels = [\"Ham\" , \"Spam\"] , cmap = plt.cm.Blues)\nplt.show()\n\nprint(classification_report(y_test ,LR_Classification_Prediction  , target_names = [\"Ham\" ,\"Spam\"]))","acbc05c2":"\nmodels = ['SVM','KNN','NB','LR']  \nacc = [SVC_Acc,KNN_Acc,NB_Acc,LR_Acc]  \nplt.bar(models,acc,color = 'blue')  \nplt.title('Compare')  \nplt.xlabel('Models')  \nplt.ylabel('Accuracy')  \nplt.show() ","643a3a5d":"# **Feature Generation using Bag of Words From Sklearn**","7419bc8e":"**Convert Label into Catigoral Labels** ","cbe37077":"# USING SUPPORT VECTOR MACHINE CLASSIFICATION\n","e324b271":"# USING NAIVE BAYES CLASSIFICATION","f8284eb1":"# Compare between Models","4d1407c7":"* Split Data and Labels ","54d92211":"# USING K-NEATEST NEIGHBOR CLASSIFICATION","aace24b3":"* AS YOU SEE THE DATA IS UNBALANCED","ec8a9cbe":"# USING LOGISTIC REGRESSION CLASSIFICATION\n","edf02781":"# **IMPORT SPAM TEXT MESSAGE CLASSIFICATION**","aaae52b5":"* As you see the DataSet is balanced"}}