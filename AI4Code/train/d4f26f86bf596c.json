{"cell_type":{"563c5b91":"code","866c7d3b":"code","d15c05dc":"code","f7e363e4":"code","f292c8a3":"code","08ad378a":"code","60c7f443":"code","f0a0b428":"code","38808616":"code","f7a672cc":"code","29705d6c":"code","1f689ff7":"code","f519b495":"code","584f45c1":"code","a15555cf":"code","356c9d86":"code","cd773924":"code","580c4e12":"code","15f35033":"code","d28b4a7e":"code","88743852":"code","2cedad26":"code","d602456e":"code","914da9c4":"code","a949812f":"code","5c2a1f48":"code","be770517":"code","21f94a01":"code","aff29e28":"code","1417cc01":"code","49296476":"code","14b64c55":"code","b1cd845c":"code","eda0261a":"code","ee8c416b":"code","6d8ebd9f":"code","71a3dff8":"code","9dd07bd3":"code","6a9e10a9":"code","a3b6773b":"code","36c154c4":"code","3cda5f41":"code","472b8835":"code","dc7ddfa8":"code","4c977653":"code","63ec5ba4":"code","ae17067f":"code","b7498a75":"markdown","02052c2a":"markdown"},"source":{"563c5b91":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","866c7d3b":"df = pd.read_csv('\/kaggle\/input\/hmeq-data\/hmeq.csv')","d15c05dc":"# identificando as colunas que s\u00e3o object\ndf.info()","f7e363e4":"#identificando os valores da coluna REASON - object\ndf['REASON'].value_counts()","f292c8a3":"#identificando os valores da coluna JOB - object\n\ndf['JOB'].value_counts()","08ad378a":"# Alterando valores da coluna REASON\n#0 DebtCon\n#1 HomeImp\n\nreasonvalor = {'DebtCon': 0, 'HomeImp': 1}\n\ndf['REASON'] = df['REASON'].replace(reasonvalor)\n","60c7f443":"# Alterando valores da coluna JOB\n#0 Other\n#1 ProfExe\n#2 Office\n#3 Mgr\n#4 Self\n#5 Sales\n\ntrabalho = {'Other': 0, 'ProfExe': 1, 'Office': 2,'Mgr': 3, 'Self': 4, 'Sales': 5}\n\ndf['JOB'] = df['JOB'].replace(trabalho)","f0a0b428":"#verificando se ainda existem colunas do tipo object\n\ndf.select_dtypes('object').head()\n","38808616":"#verificando valores nulos\ndf.isnull().sum()","f7a672cc":"df.describe()","29705d6c":"#analisando a vari\u00e1vel target\ndf['BAD'].value_counts().reset_index()","1f689ff7":"df['MORTDUE'].value_counts()","f519b495":"import seaborn as sns\nimport matplotlib.pyplot as plt","584f45c1":"#Tra\u00e7ando gr\u00e1ficos para analisar as vari\u00e1veis\nplt.figure(figsize=(4, 4))\nsns.countplot(y=\"REASON\", data=df)\n\nplt.figure(figsize=(8, 8))\nsns.countplot(y=\"JOB\", data=df)\n\nplt.figure(figsize=(8, 8))\nsns.countplot(y=\"DEROG\", data=df)\n\nplt.figure(figsize=(8, 8))\nsns.countplot(y=\"DELINQ\", data=df)\n\nplt.figure(figsize=(8, 8))\nsns.countplot(y=\"NINQ\", data=df)","a15555cf":"#Tra\u00e7ando gr\u00e1ficos para analisar as vari\u00e1veis\n\ndf[['LOAN', 'MORTDUE', 'VALUE', 'YOJ', 'CLAGE', 'CLNO', 'DEBTINC' ]].hist(figsize=[20,20])","356c9d86":"# conhecendo os valores de algumas vari\u00e1veis\n","cd773924":"#criando novo dataframe para imputar valores nulos\n\ndf2=df","580c4e12":"df2","15f35033":"#Excluindo valores onde s\u00f3 possuem os dados das vari\u00e1veis BAD, LOAN e mais alguma outra\n\n#Excluindo vari\u00e1veis com dados de BAD e LOAN\ndf2 = df2.dropna(subset=['MORTDUE', 'VALUE', 'REASON', 'JOB', 'YOJ', 'DEROG', 'DELINQ', 'CLAGE', 'NINQ', 'CLNO', 'DEBTINC'], how='all')\n\n#Excluindo vari\u00e1veis com dados de BAD, LOAN e MORTDUE\ndf2 = df2.dropna(subset=['VALUE', 'REASON', 'JOB', 'YOJ', 'DEROG', 'DELINQ', 'CLAGE', 'NINQ', 'CLNO', 'DEBTINC'], how='all')\n\n#Excluindo vari\u00e1veis com dados de BAD, LOAN e VALUE\ndf2 = df2.dropna(subset=['MORTDUE', 'REASON', 'JOB', 'YOJ', 'DEROG', 'DELINQ', 'CLAGE', 'NINQ', 'CLNO', 'DEBTINC'], how='all')\n\n#Excluindo vari\u00e1veis com dados de BAD, LOAN e REASON\ndf2 = df2.dropna(subset=['MORTDUE', 'VALUE', 'JOB', 'YOJ', 'DEROG', 'DELINQ', 'CLAGE', 'NINQ', 'CLNO', 'DEBTINC'], how='all')\n\n#Excluindo vari\u00e1veis com dados de BAD, LOAN e JOB\ndf2 = df2.dropna(subset=['MORTDUE', 'VALUE', 'REASON', 'YOJ', 'DEROG', 'DELINQ', 'CLAGE', 'NINQ', 'CLNO', 'DEBTINC'], how='all')\n\n#Excluindo vari\u00e1veis com dados de BAD, LOAN e 'YOJ'\ndf2 = df2.dropna(subset=['MORTDUE', 'VALUE', 'REASON', 'JOB', 'DEROG', 'DELINQ', 'CLAGE', 'NINQ', 'CLNO', 'DEBTINC'], how='all')\n\n#Excluindo vari\u00e1veis com dados de BAD, LOAN e DEROG\ndf2 = df2.dropna(subset=['MORTDUE', 'VALUE', 'REASON', 'JOB', 'YOJ', 'DELINQ', 'CLAGE', 'NINQ', 'CLNO', 'DEBTINC'], how='all')\n\n#Excluindo vari\u00e1veis com dados de BAD, LOAN e DELINQ\ndf2 = df2.dropna(subset=['MORTDUE', 'VALUE', 'REASON', 'JOB', 'YOJ', 'DEROG', 'CLAGE', 'NINQ', 'CLNO', 'DEBTINC'], how='all')\n\n#Excluindo vari\u00e1veis com dados de BAD, LOAN e CLAGE\ndf2 = df2.dropna(subset=['MORTDUE', 'VALUE', 'REASON', 'JOB', 'YOJ', 'DEROG', 'DELINQ', 'NINQ', 'CLNO', 'DEBTINC'], how='all')\n\n#Excluindo vari\u00e1veis com dados de BAD, LOAN e NINQ\ndf2 = df2.dropna(subset=['MORTDUE', 'VALUE', 'REASON', 'JOB', 'YOJ', 'DEROG', 'DELINQ', 'CLAGE', 'CLNO', 'DEBTINC'], how='all')\n\n#Excluindo vari\u00e1veis com dados de BAD, LOAN e CLNO\ndf2 = df2.dropna(subset=['MORTDUE', 'VALUE', 'REASON', 'JOB', 'YOJ', 'DEROG', 'DELINQ', 'CLAGE', 'NINQ', 'DEBTINC'], how='all')\n\n#Excluindo vari\u00e1veis com dados de BAD, LOAN e DEBTINC\ndf2 = df2.dropna(subset=['MORTDUE', 'VALUE', 'REASON', 'JOB', 'YOJ', 'DEROG', 'DELINQ', 'CLAGE', 'NINQ', 'CLNO'], how='all')","d28b4a7e":"df2","88743852":"#criando nova coluna com a rela\u00e7\u00e3o entre a coluna VALUE e a coluna MORTDUE\n\ndf2['VALUEMORTDUE'] = df2['VALUE'] \/ df2['MORTDUE']","2cedad26":"df2.head(30)","d602456e":"#verificando a moda (valor mais frequente) para definir a imputa\u00e7\u00e3o nos valores nulos das colunas VALUE e MORTDUE\nmode = float(df2['VALUEMORTDUE'].mode())\n\nmode","914da9c4":"#Criando um dicon\u00e1rio com os valores correspondentes a propor\u00e7\u00e3o m\u00e9dia do dataframe e imputando na base substituindo apenas os valores vazios\nMORTDUEMEDIA = {'MORTDUE': df2['VALUE']\/mode}\ndf2 = df2.fillna(value=MORTDUEMEDIA)\n\n\nVALUEMEDIA = {'VALUE': df2['MORTDUE']*mode}\ndf2=df2.fillna(value=VALUEMEDIA)\n","a949812f":"df2.info()","5c2a1f48":"df2.isnull().sum()","be770517":"#Rodando VALUEMORDUE novamente \ndf2['VALUEMORTDUE'] = df2['VALUE'] \/ df2['MORTDUE']","21f94a01":"df['MORTDUE'].min()","aff29e28":"df2.info()","1417cc01":"df2.isnull().sum()","49296476":"import plotly.io as pio\n\n#GR\u00c1FICO PARA VERIFICAR EM QUAIS CAMPOS DE JOB EST\u00c3O OS MISSING DE REASON\nGRAREASON = [dict(\n  type = 'bar',\n  x = df2['JOB'],\n  y = df2['REASON'].value_counts(dropna=False),\n  mode = 'markers',\n#  transforms = [dict(\n#    type = 'filter',\n#    target = 'y',\n#    operation = '==',\n#    value = NaN\n#  )]\n)]\n\nlayout = dict(\n    title = 'REASON = 1'\n)\n\nfig_dict = dict(data=GRAREASON, layout=layout)\n\npio.show(fig_dict, validate=False)\n\n\n","14b64c55":"#GR\u00c1FICO PARA VERIFICAR EM QUAIS CAMPOS DE JOB EST\u00c3O A MAIORIA DOS DADOS DE REASON\nimport plotly.express as px\nfig = px.bar(df2, x=\"REASON\", y=\"JOB\", color='JOB')\nfig.show()","b1cd845c":"df2.isnull().sum()","eda0261a":"#IMPUTANDO VALORES MISSING PELA MODA OU M\u00c9DIA\n\nk = ['REASON', 'JOB', 'YOJ', 'DEROG', 'DELINQ', 'NINQ', 'CLNO' ]\n\nfor i in list (k):\n    mode = float(df2[i].mode())\n    df2[i] = df2[i].fillna(mode)\n    \n\nW = ['MORTDUE', 'VALUE', 'CLAGE', 'DEBTINC']\nfor i in list (W):\n    mean = df2[W].mean()\n    df2[W] = df2[W].fillna(mean)\n    \ndf2['VALUEMORTDUE'] = df2['VALUE'] \/ df2['MORTDUE']","ee8c416b":"\ndf2.isnull().sum()","6d8ebd9f":"#Verificando a correla\u00e7\u00e3o entre as vari\u00e1veis\n\ncorr = df2.corr(method='spearman')\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(20, 18))\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=\"YlGnBu\", vmax=.30, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","71a3dff8":"# Separando o dataframe\n\n# Importando o train_test_split\nfrom sklearn.model_selection import train_test_split\n\n# Separando treino e teste\ntrain, test = train_test_split(df2, test_size=0.20, random_state=42)\n\n# N\u00e3o vamos mais usar o dataset de valida\u00e7\u00e3o\n\ntrain.shape, test.shape","9dd07bd3":"# definindo colunas de entrada\n\nfeats = [c for c in df.columns if c not in ['BAD']]","6a9e10a9":"# Random Forest\n\n# Importando o modelo\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Instanciar o modelo\nrf = RandomForestClassifier(n_estimators=200, random_state=42)","a3b6773b":"# Usar o cross validation\nfrom sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(rf, train[feats], train['BAD'], n_jobs=-1, cv=5)\n\nscores, scores.mean()","36c154c4":"# XGBoost\n\n# Importar o modelo\nfrom xgboost import XGBClassifier\n\n# Instanciar o modelo\nxgb = XGBClassifier(n_estimators=200, n_jobs=-1, random_state=42, learning_rate=0.05)","3cda5f41":"# Usando o cross validation\nscores = cross_val_score(xgb, train[feats], train['BAD'], n_jobs=-1, cv=5)\n\nscores, scores.mean()\n","472b8835":"# Usando o Randon Forest para treinamento e predi\u00e7\u00e3o\nrf.fit(train[feats], train['BAD'])","dc7ddfa8":"# Fazendo predi\u00e7\u00f5es\npreds = rf.predict(test[feats])","4c977653":"# Medir o desempenho do modelo\nfrom sklearn.metrics import accuracy_score\n\naccuracy_score(test['BAD'], preds)","63ec5ba4":"# Feature Importance\npd.Series(rf.feature_importances_, index=feats).sort_values().plot.barh()\n","ae17067f":"cnf_matrix = metrics.confusion_matrix(test['BAD'], preds)\n\n\n%matplotlib inline\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Matriz Confus\u00e3o', y=1.1)\nplt.ylabel('Real')\nplt.xlabel('Predito')","b7498a75":"\u00c1RVORE DE DECIS\u00c3O","02052c2a":"# Realizando an\u00e1lise explorat\u00f3ria"}}