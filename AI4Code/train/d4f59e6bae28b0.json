{"cell_type":{"01f767e5":"code","b0eff003":"code","2d230c23":"code","6bfa0149":"code","e1d32c03":"code","f2e296fc":"code","b5335cd6":"code","25246240":"code","f2df22a9":"code","a192ecf3":"code","43ddd480":"code","3dd79f65":"code","3b4af502":"code","eb1eee9f":"code","764628e8":"code","3b047888":"code","e0753d1d":"code","3c54e1b5":"code","2bec5637":"code","03ea31a3":"code","53854e45":"code","46f29d45":"code","804fdef2":"code","13e78011":"code","49c23079":"code","937c005e":"code","937c1f9b":"code","6d12a89e":"code","35341486":"code","3973c5ec":"code","a5f7dc77":"markdown","99d7af53":"markdown","a96a60d9":"markdown","f4012d7d":"markdown","e1615acb":"markdown","169fa5b4":"markdown","f247528b":"markdown","448d9a88":"markdown","53440402":"markdown","7949d5f1":"markdown","729caeae":"markdown","f2182a59":"markdown","909ac13e":"markdown","e3fa6d41":"markdown","3f2d9aba":"markdown","148d6c00":"markdown","32db3399":"markdown","3e443135":"markdown","8dd5355b":"markdown","94d35286":"markdown","f7b5c194":"markdown","0276f799":"markdown","fb7121e7":"markdown","0df6f7e0":"markdown","435dee9e":"markdown"},"source":{"01f767e5":"# \u3053\u306e Python 3 \u74b0\u5883\u306b\u306f\u3001\u591a\u304f\u306e\u4fbf\u5229\u306a\u5206\u6790\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n# kaggle\/python\u306eDocker\u30a4\u30e1\u30fc\u30b8\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002: https:\/\/github.com\/kaggle\/docker-python\n# \u4f8b\u3048\u3070\u3001\u30ed\u30fc\u30c9\u3059\u308b\u306e\u306b\u4fbf\u5229\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\nimport numpy as np # \u7dda\u5f62\u4ee3\u6570\nimport pandas as pd # \u30c7\u30fc\u30bf\u51e6\u7406, CSV\u30d5\u30a1\u30a4\u30eb I\/O (\u4f8b. pd.read_csv)\n\n# \u5165\u529b\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u8aad\u307f\u53d6\u308a\u5c02\u7528\u3067\u3059 \"..\/input\/\" directory\n# \u4f8b\u3048\u3070\u3001\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068 (run \u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u304b Shift+Enter \u30ad\u30fc\u3092\u62bc\u3057\u3066)\u3001\u5165\u529b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e0b\u306b\u3042\u308b\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u4e00\u89a7\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# \u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea(\/kaggle\/working\/)\u306b\u6700\u59275GB\u307e\u3067\u66f8\u304d\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u3001\"Save & Run All \"\u3092\u4f7f\u3063\u3066\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u305f\u3068\u304d\u306b\u51fa\u529b\u3068\u3057\u3066\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002 \n# \/kaggle\/temp\/ \u306b\u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u8fbc\u3080\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c\u3001\u73fe\u5728\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u5916\u306b\u306f\u4fdd\u5b58\u3055\u308c\u307e\u305b\u3093\u3002\n\nimport plotly.express as px\nfrom IPython.display import display\npd.options.display.max_columns = None\nimport random\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt","b0eff003":"train = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\ntrain['dataset'] = 'train'\ntest = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')\ntest['dataset'] = 'test'\ndf = pd.concat([train, test])","2d230c23":"train.head()","6bfa0149":"test.head()","e1d32c03":"print('Number of rows in training set: ', train.shape[0])\nprint('Number of columns in training set: ', train.shape[1]-1)\nprint('Number of rows in test set: ', test.shape[0])\nprint('Number of columns in test set: ', test.shape[1]-1)","f2e296fc":"df.info()","b5335cd6":"ds = df.groupby(['cp_type', 'dataset'])['sig_id'].count().reset_index()\nds.columns = ['cp_type', 'dataset', 'count']\nfig = px.bar(\n    ds, \n    x='cp_type', \n    y=\"count\", \n    color = 'dataset',\n    barmode='group',\n    orientation='v', \n    title='cp_type train\/test counts', \n    width=600,\n    height=500\n)\nfig.show()","25246240":"ds = df.groupby(['cp_time', 'dataset'])['sig_id'].count().reset_index()\nds.columns = ['cp_time', 'dataset', 'count']\nfig = px.bar(\n    ds, \n    x='cp_time', \n    y=\"count\", \n    color = 'dataset',\n    barmode='group',\n    orientation='v', \n    title='cp_time train\/test counts', \n    width=600,\n    height=500\n)\nfig.show()","f2df22a9":"ds = df.groupby(['cp_dose', 'dataset'])['sig_id'].count().reset_index()\nds.columns = ['cp_dose', 'dataset', 'count']\nfig = px.bar(\n    ds, \n    x='cp_dose', \n    y=\"count\", \n    color = 'dataset',\n    barmode='group',\n    orientation='v', \n    title='cp_dose train\/test counts', \n    width=600,\n    height=500\n)\nfig.show()","a192ecf3":"train_columns = train.columns.to_list()\ng_list = [i for i in train_columns if i.startswith('g-')]\nc_list = [i for i in train_columns if i.startswith('c-')]","43ddd480":"plot_list = [g_list[random.randint(0, len(g_list)-1)] for i in range(12)]\n\nfig = make_subplots(rows=4, cols=3)\n\ntrace0 = go.Histogram(x=train[plot_list[0]], nbinsx=20, name=plot_list[0])\ntrace1 = go.Histogram(x=train[plot_list[1]], nbinsx=20, name=plot_list[1])\ntrace2 = go.Histogram(x=train[plot_list[2]], nbinsx=20, name=plot_list[2])\ntrace3 = go.Histogram(x=train[plot_list[3]], nbinsx=20, name=plot_list[3])\ntrace4 = go.Histogram(x=train[plot_list[4]], nbinsx=20, name=plot_list[4])\ntrace5 = go.Histogram(x=train[plot_list[5]], nbinsx=20, name=plot_list[5])\ntrace6 = go.Histogram(x=train[plot_list[6]], nbinsx=20, name=plot_list[6])\ntrace7 = go.Histogram(x=train[plot_list[7]], nbinsx=20, name=plot_list[7])\ntrace8 = go.Histogram(x=train[plot_list[8]], nbinsx=20, name=plot_list[8])\ntrace9 = go.Histogram(x=train[plot_list[9]], nbinsx=20, name=plot_list[9])\ntrace10 = go.Histogram(x=train[plot_list[10]], nbinsx=20, name=plot_list[10])\ntrace11 = go.Histogram(x=train[plot_list[11]], nbinsx=20, name=plot_list[11])\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\nfig.append_trace(trace2, 1, 3)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 2)\nfig.append_trace(trace5, 2, 3)\nfig.append_trace(trace6, 3, 1)\nfig.append_trace(trace7, 3, 2)\nfig.append_trace(trace8, 3, 3)\nfig.append_trace(trace9, 4, 1)\nfig.append_trace(trace10, 4, 2)\nfig.append_trace(trace11, 4, 3)\n\nfig.update_layout(\n    title_text='Randomly selected gene expression features distributions'\n)\nfig.show()","3dd79f65":"plot_list = [c_list[random.randint(0, len(c_list)-1)] for i in range(12)]\n\nfig = make_subplots(rows=4, cols=3)\n\ntrace0 = go.Histogram(x=train[plot_list[0]], nbinsx=20, name=plot_list[0])\ntrace1 = go.Histogram(x=train[plot_list[1]], nbinsx=20, name=plot_list[1])\ntrace2 = go.Histogram(x=train[plot_list[2]], nbinsx=20, name=plot_list[2])\ntrace3 = go.Histogram(x=train[plot_list[3]], nbinsx=20, name=plot_list[3])\ntrace4 = go.Histogram(x=train[plot_list[4]], nbinsx=20, name=plot_list[4])\ntrace5 = go.Histogram(x=train[plot_list[5]], nbinsx=20, name=plot_list[5])\ntrace6 = go.Histogram(x=train[plot_list[6]], nbinsx=20, name=plot_list[6])\ntrace7 = go.Histogram(x=train[plot_list[7]], nbinsx=20, name=plot_list[7])\ntrace8 = go.Histogram(x=train[plot_list[8]], nbinsx=20, name=plot_list[8])\ntrace9 = go.Histogram(x=train[plot_list[9]], nbinsx=20, name=plot_list[9])\ntrace10 = go.Histogram(x=train[plot_list[10]], nbinsx=20, name=plot_list[10])\ntrace11 = go.Histogram(x=train[plot_list[11]], nbinsx=20, name=plot_list[11])\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\nfig.append_trace(trace2, 1, 3)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 2)\nfig.append_trace(trace5, 2, 3)\nfig.append_trace(trace6, 3, 1)\nfig.append_trace(trace7, 3, 2)\nfig.append_trace(trace8, 3, 3)\nfig.append_trace(trace9, 4, 1)\nfig.append_trace(trace10, 4, 2)\nfig.append_trace(trace11, 4, 3)\n\nfig.update_layout(\n    title_text='Randomly selected cell viability features distributions'\n)\nfig.show()","3b4af502":"columns = g_list + c_list\nfor_correlation = [columns[random.randint(0, len(columns)-1)] for i in range(40)]\ndata = df[for_correlation]\n\nf = plt.figure(figsize=(19, 15))\nplt.matshow(data.corr(), fignum=f.number)\nplt.xticks(range(data.shape[1]), data.columns, fontsize=14, rotation=45)\nplt.yticks(range(data.shape[1]), data.columns, fontsize=14)\ncb = plt.colorbar()\ncb.ax.tick_params(labelsize=14)","eb1eee9f":"import time\n\nstart = time.time()\ncols = ['cp_time'] + columns\nall_columns = []\nfor i in range(0, len(cols)):\n    for j in range(i+1, len(cols)):\n        if abs(train[cols[i]].corr(train[cols[j]])) > 0.9:\n            all_columns.append(cols[i])\n            all_columns.append(cols[j])\n\nprint(time.time()-start)","764628e8":"all_columns = list(set(all_columns))","3b047888":"len(all_columns)","e0753d1d":"data = df[all_columns]\n\nf = plt.figure(figsize=(19, 15))\nplt.matshow(data.corr(), fignum=f.number)\nplt.xticks(range(data.shape[1]), data.columns, fontsize=14, rotation=45)\nplt.yticks(range(data.shape[1]), data.columns, fontsize=14)\ncb = plt.colorbar()\ncb.ax.tick_params(labelsize=14)","3c54e1b5":"fig = make_subplots(rows=12, cols=3)\n\ntraces = [go.Histogram(x=train[col], nbinsx=20, name=col) for col in all_columns]\n\ni=1\nj=1\n\nfor trace in traces:\n    fig.append_trace(trace, i, j)\n    if j==3:\n        j=1\n        i+=1\n    else:\n        j+=1\n\nfig.update_layout(\n    title_text='Highly correlated features',\n    height=1200\n)\nfig.show()","2bec5637":"train_target = pd.read_csv(\"..\/input\/lish-moa\/train_targets_scored.csv\")\n\nprint('Number of rows : ', train_target.shape[0])\nprint('Number of cols : ', train_target.shape[1])\ntrain_target.head()","03ea31a3":"x = train_target.drop(['sig_id'], axis=1).sum(axis=0).sort_values().reset_index()\nx.columns = ['column', 'nonzero_records']\n\nfig = px.bar(\n    x.tail(50), \n    x='nonzero_records', \n    y='column', \n    orientation='h', \n    title='Columns with the higher number of positive samples (top 50)', \n    height=1000, \n    width=800\n)\nfig.show()","53854e45":"x = train_target.drop(['sig_id'], axis=1).sum(axis=0).sort_values(ascending=False).reset_index()\nx.columns = ['column', 'nonzero_records']\n\nfig = px.bar(\n    x.tail(50), \n    x='nonzero_records', \n    y='column', \n    orientation='h', \n    title='Columns with the lowest number of positive samples (top 50)', \n    height=1000, \n    width=800\n)\nfig.show()","46f29d45":"x = train_target.drop(['sig_id'], axis=1).sum(axis=0).sort_values(ascending=False).reset_index()\nx.columns = ['column', 'count']\nx['count'] = x['count'] * 100 \/ len(train_target)\nfig = px.bar(\n    x, \n    x='column', \n    y='count', \n    orientation='v', \n    title='Percent of positive records for every column in target', \n    height=800, \n    width=1200\n)\nfig.show()","804fdef2":"data = train_target.drop(['sig_id'], axis=1).astype(bool).sum(axis=1).reset_index()\ndata.columns = ['row', 'count']\ndata = data.groupby(['count'])['row'].count().reset_index()\nfig = px.bar(\n    data, \n    y=data['row'], \n    x=\"count\", \n    title='Number of activations in targets for every sample', \n    width=800, \n    height=500\n)\nfig.show()","13e78011":"data = train_target.drop(['sig_id'], axis=1).astype(bool).sum(axis=1).reset_index()\ndata.columns = ['row', 'count']\ndata = data.groupby(['count'])['row'].count().reset_index()\nfig = px.pie(\n    data, \n    values=100 * data['row']\/len(train_target), \n    names=\"count\", \n    title='Number of activations in targets for every sample (Percent)', \n    width=800, \n    height=500\n)\nfig.show()","49c23079":"train_target.describe()","937c005e":"start = time.time()\n\ncorrelation_matrix = pd.DataFrame()\nfor t_col in train_target.columns:\n    corr_list = list()\n    if t_col == 'sig_id':\n        continue\n    for col in columns:\n        res = train[col].corr(train_target[t_col])\n        corr_list.append(res)\n    correlation_matrix[t_col] = corr_list\n    \nprint(time.time()-start)","937c1f9b":"correlation_matrix['train_features'] = columns\ncorrelation_matrix = correlation_matrix.set_index('train_features')\ncorrelation_matrix","6d12a89e":"maxCol=lambda x: max(x.min(), x.max(), key=abs)\nhigh_scores = correlation_matrix.apply(maxCol, axis=0).reset_index()\nhigh_scores.columns = ['column', 'best_correlation']\n\nfig = px.bar(\n    high_scores, \n    x='column', \n    y=\"best_correlation\", \n    orientation='v', \n    title='Best correlation with train columns for every target column', \n    width=1200,\n    height=800\n)\nfig.show()","35341486":"col_df = pd.DataFrame()\ntr_cols = list()\ntar_cols = list()\nfor col in correlation_matrix.columns:\n    tar_cols.append(col)\n    tr_cols.append(correlation_matrix[col].abs().sort_values(ascending=False).reset_index()['train_features'].head(1).values[0])\n\ncol_df['column'] = tar_cols\ncol_df['train_best_column'] = tr_cols\n\ntotal_scores = pd.merge(high_scores, col_df)\ntotal_scores","3973c5ec":"count_features = total_scores['train_best_column'].value_counts().reset_index().sort_values('train_best_column')\ncount_features.columns = ['column', 'count']\nfig = px.bar(\n    count_features.tail(33), \n    x='count', \n    y=\"column\", \n    orientation='h', \n    title='Columns from training set with number of high correlations with target columns', \n    width=800,\n    height=700\n)\nfig.show()","a5f7dc77":"# \u4ee5\u4e0b\u9032\u884c\u4e2d","99d7af53":"### \u76f8\u95a2\u6027\u306e\u9ad8\u3044\u7279\u5fb4\u306e\u30da\u30a2\u3092\u898b\u3064\u3051\u308b","a96a60d9":"<a id=\"3\"><\/a>\n<h2 style='background:blue; border:0; color:white'><center>3. \u5b66\u7fd2\u7279\u5fb4\u91cf\u306e\u76f8\u95a2\u95a2\u4fc2<\/center><h2>","f4012d7d":"## \u3059\u3079\u3066\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u5217\u306b\u3064\u3044\u3066\u3001\u6700\u3082\u76f8\u95a2\u306e\u9ad8\u3044\u7279\u5fb4\u3092\u898b\u3064\u3051\u308b","e1615acb":"## \u5c11\u306a\u304f\u3068\u308250\u672c\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u30ab\u30e9\u30e0\u306e\u967d\u6027\u30b5\u30f3\u30d7\u30eb\u6570\u304c20\u672c\uff08\u7d040.1\uff05\uff09\u4ee5\u4e0b\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059!","169fa5b4":"### \u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3055\u308c\u305f\u5909\u6570\u9593\u306e\u76f8\u95a2\u3092\u898b\u3066\u307f\u3088\u3046","f247528b":"## 2.3 Cp_dose\u306e\u7279\u5fb4","448d9a88":"### \u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u307f\u307e\u3057\u3087\u3046","53440402":"### \u305d\u308c\u3089\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3057\u3087\u3046","7949d5f1":"## \u3053\u3053\u3067\u3001\u30b5\u30f3\u30d7\u30eb\u306e\u7d0440%\u304c\u3059\u3079\u3066\u306e\u5217\u3067\u30bc\u30ed\u3092\u6301\u3061\u300150%\u4ee5\u4e0a\u304c\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30bf\u30fc\u30b2\u30c3\u30c8\u5217\u30921\u3064\u3060\u3051\u6301\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002","729caeae":"<a id=\"4\"><\/a>\n<h2 style='background:blue; border:0; color:white'><center>4. \u30bf\u30fc\u30b2\u30c3\u30c8\u5206\u6790<\/center><h2>","f2182a59":"## \u5927\u304d\u306a\u76f8\u95a2\u884c\u5217\u3092\u898b\u3066\u307f\u307e\u3059","909ac13e":"### 872\u500b\u306e float \u7279\u5fb4\u91cf\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059","e3fa6d41":"## \u3067\u306f\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u304b\u3089\u3001\u3069\u306e\u30ab\u30e9\u30e0\u304c\u30bf\u30fc\u30b2\u30c3\u30c8\u30ab\u30e9\u30e0\u3068\u306e\u76f8\u95a2\u5024\u304c\u9ad8\u3044\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u30c1\u30e3\u30fc\u30c8\u306e\u5404\u884c\u306f\u3001\u30ab\u30e9\u30e0 `A` `N` \u304c\u7570\u306a\u308b\u30bf\u30fc\u30b2\u30c3\u30c8\u30ab\u30e9\u30e0\u3068\u306e\u76f8\u95a2\u304c\u6700\u3082\u9ad8\u3044\u5024\u3092\u6301\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u3066\u3044\u307e\u3059\u3002","3f2d9aba":"### \u7121\u4f5c\u70ba\u306b\u9078\u629e\u3055\u308c\u305f\u5217\u306e\u3044\u304f\u3064\u304b\u306e\u5206\u5e03","148d6c00":"### \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3068\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046","32db3399":"## 1\u3064\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u30ab\u30e9\u30e0\u306e\u6700\u5927\u306e\u967d\u6027\u30b5\u30f3\u30d7\u30eb\u6570\u306f3.5%\u3067\u3059\u3002\u306a\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u975e\u5e38\u306b\u30d0\u30e9\u30f3\u30b9\u306e\u60aa\u3044\u30c7\u30fc\u30bf\u3092\u6271\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002","3e443135":"## \u30bf\u30fc\u30b2\u30c3\u30c8\u30ab\u30e9\u30e0\u3068\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u304b\u3089\u306e\u3059\u3079\u3066\u306e\u30ab\u30e9\u30e0\u3068\u306e\u76f8\u95a2\u306e\u9ad8\u3044\u5024(\u7d76\u5bfe\u5024)\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u30c1\u30e3\u30fc\u30c8\u4e0a\u306e\u5404\u30ab\u30e9\u30e0\u306f\u3001\u73fe\u5728\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u30ab\u30e9\u30e0\u3068\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u306e\u5168\u30ab\u30e9\u30e0\u3068\u306e\u76f8\u95a2\u95a2\u4fc2\u306e\u6700\u5927\u5024\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002","8dd5355b":"## 2.2 Cp_time\u306e\u7279\u5fb4","94d35286":"<a id=\"1\"><\/a>\n<h2 style='background:blue; border:0; color:white'><center>1. \u57fa\u672c\u30c7\u30fc\u30bf\u306e\u6982\u8981<\/center><h2>","f7b5c194":"<h1><center>\u4f5c\u7528\u6a5f\u5e8f\uff08MoA\uff09\u4e88\u6e2c \u30c7\u30fc\u30bf\u89e3\u6790\u3068\u53ef\u8996\u5316<\/center><\/h1>\n\n<center><img src=\"https:\/\/pharmacyinnovations.net\/wp-content\/uploads\/pillsdrugs.png\"><\/center>\n","0276f799":"## 2.1 cp_type\u306e\u7279\u5fb4","fb7121e7":"### \u5408\u8a08\u306735\u306e\u30ab\u30e9\u30e0\u304c\u3042\u308a\u30010.9\u4ee5\u4e0a\u306e\u76f8\u95a2\u3092\u6301\u3064\u30ab\u30e9\u30e0\u304c1\u3064\u4ee5\u4e0a\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u3089\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002","0df6f7e0":"<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h2 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:blue; border:0; color:white' role=\"tab\" aria-controls=\"home\"><center>\u76ee\u6b21<\/center><\/h2>\n\n* [1. \u57fa\u672c\u30c7\u30fc\u30bf\u306e\u6982\u8981](#1)\n* [2. \u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u53ef\u8996\u5316](#2)\n* [3. \u5b66\u7fd2\u7279\u5fb4\u91cf\u306e\u76f8\u95a2\u95a2\u4fc2](#3)\n* [4. \u30bf\u30fc\u30b2\u30c3\u30c8\u5206\u6790](#4)\n    \n\u6ce8\u91c8\uff1a \u672c\u8a18\u4e8b\u306f https:\/\/www.kaggle.com\/isaienkov\/mechanisms-of-action-moa-prediction-eda \u3092\u65e5\u672c\u8a9e\u306b\u8a33\u3057\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002 \u5185\u5bb9\u306e\u8aa4\u308a\u3084\u8aa4\u8a33\u306b\u3064\u3044\u3066\u306f\u4e88\u3081\u3054\u5bb9\u8d66\u304f\u3060\u3055\u3044\u3002","435dee9e":"<a id=\"2\"><\/a>\n<h2 style='background:blue; border:0; color:white'><center>2. \u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u53ef\u8996\u5316<\/center><h2>"}}