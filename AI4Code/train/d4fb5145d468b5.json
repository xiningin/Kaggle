{"cell_type":{"ede6bafd":"code","34f00280":"code","fe415919":"code","0fee8904":"code","a80079c1":"code","0ec0b93a":"code","efdbb70b":"code","c2516f6f":"code","92396ada":"code","6a22c924":"code","757d4128":"code","bad96912":"code","f2a09de4":"code","1ade690b":"code","664e84ab":"code","4450d1e2":"code","a3b921de":"code","67529b04":"code","bb21ffc1":"code","0faeba75":"markdown","ceb54c65":"markdown","f787a558":"markdown","32f98590":"markdown","9a6d3dbc":"markdown","bb725389":"markdown"},"source":{"ede6bafd":"# libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.svm import SVC\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\n#Import Library MinMaxScaler\nfrom sklearn.preprocessing import MinMaxScaler","34f00280":"# read dataset\nletters = pd.read_csv('..\/input\/letterrecognition-using-svm\/letter-recognition.csv')","fe415919":"#show first 5 row from data\nletters.head()","0fee8904":"#show last 5 row from data\nletters.tail()","a80079c1":"# about the dataset\n\n# dimensions\nprint(\"Dimensions: \", letters.shape, \"\\n\")\n\n# data types\nprint(letters.info())\n\n# head\nletters.head()","0ec0b93a":"#extract latters from data and sorted\nOrder = list(np.sort(letters['letter'].unique()))\nprint(Order)","efdbb70b":"# a quirky bug: the column names have a space, e.g. 'xbox ', which throws and error when indexed\nprint(letters.columns)","c2516f6f":"# let's 'reindex' the column names\nletters.columns = ['letter', 'xbox', 'ybox', 'width', 'height', 'onpix', 'xbar',\n       'ybar', 'x2bar', 'y2bar', 'xybar', 'x2ybar', 'xy2bar', 'xedge',\n       'xedgey', 'yedge', 'yedgex']\nprint(letters.columns)","92396ada":"# basic plots: How do various attributes vary with the letters\n\nplt.figure(figsize=(16, 8))\nsns.barplot(x='letter', y='xbox', \n            data=letters, \n            order=Order)","6a22c924":"letter_means = letters.groupby('letter').mean()\nletter_means.head()","757d4128":"# average feature values\nround(letters.drop('letter', axis=1).mean(), 2)","bad96912":"# splitting into X and y\nX = letters.drop(\"letter\", axis = 1)\ny = letters['letter']","f2a09de4":"# scaling the features\n#Creat Object from MinMaxScaler\ns = MinMaxScaler()\n#fit_transform for dataset\nX_scaled = s.fit_transform(X)","1ade690b":"# train test split\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size = 0.3, random_state = 101)","664e84ab":"# linear model\n\nmodel_linear = SVC(kernel='linear')\nmodel_linear.fit(X_train, y_train)\n\n# predict\ny_pred_linear = model_linear.predict(X_test)\nprint ('y_prediction' , y_pred_linear) \n\n# accuracy\nprint(\"accuracy:\", metrics.accuracy_score(y_true=y_test, y_pred=y_pred_linear), \"\\n\")\n# cm\nprint(metrics.confusion_matrix(y_true=y_test, y_pred=y_pred_linear))","4450d1e2":"# non-linear model\n# using rbf kernel, C=1, default value of gamma\n\n# model\nnon_linear_model = SVC(kernel='rbf')\n\n# fit\nnon_linear_model.fit(X_train, y_train)\n\n# predict\ny_pred_rbf = non_linear_model.predict(X_test)\nprint('y_prediction is :' ,y_pred_rbf )\n\n# accuracy\nprint(\"accuracy:\", metrics.accuracy_score(y_true=y_test, y_pred=y_pred_rbf), \"\\n\")\n\n# cm\nprint(metrics.confusion_matrix(y_true=y_test, y_pred=y_pred_rbf))","a3b921de":"# using sigmoid kernel, C=1, default value of gamma\n\n# model\nnon_linear_model = SVC(kernel='sigmoid')\n# fit\nnon_linear_model.fit(X_train, y_train)\n\n# predict\ny_pred_sigmoid = non_linear_model.predict(X_test)\nprint('y_prediction is ::' , y_pred_sigmoid)\n\n# accuracy\nprint(\"accuracy :\", metrics.accuracy_score(y_true=y_test, y_pred=y_pred_sigmoid), \"\\n\")\n\n# cm\nprint(metrics.confusion_matrix(y_true=y_test, y_pred=y_pred_sigmoid))","67529b04":"# using poly kernel, C=1, default value of gamma\n\n# model\nnon_linear_model = SVC(kernel='poly')\n# fit\nnon_linear_model.fit(X_train, y_train)\n\n# predict\ny_pred_poly = non_linear_model.predict(X_test)\nprint('y_prediction is ::' , y_pred_poly)\n\n# accuracy\nprint(\"accuracy :\", metrics.accuracy_score(y_true=y_test, y_pred=y_pred_poly), \"\\n\")\n\n# cm\nprint(metrics.confusion_matrix(y_true=y_test, y_pred=y_pred_poly))","bb21ffc1":"print(\"accuracy with linear kernel :\", metrics.accuracy_score(y_true=y_test, y_pred=y_pred_linear), \"\\n\")\nprint(\"accuracy with rbf kernel :\",    metrics.accuracy_score(y_true=y_test, y_pred=y_pred_rbf), \"\\n\")\nprint(\"accuracy with sigmoid kernel :\", metrics.accuracy_score(y_true=y_test, y_pred=y_pred_sigmoid), \"\\n\")\nprint(\"accuracy with poly kernel :\",   metrics.accuracy_score(y_true=y_test, y_pred=y_pred_poly), \"\\n\")","0faeba75":"# sigmoid kernel","ceb54c65":"kernel{\u2018linear\u2019, \u2018poly\u2019, \u2018rbf\u2019, \u2018sigmoid\u2019, \u2018precomputed\u2019}, default=\u2019rbf\u2019","f787a558":"# Linear Kernel","32f98590":"# non-linear\n\n**rbf kernel**","9a6d3dbc":"Model Building\n\nLet's fist build two basic models - linear and non-linear with default hyperparameters, and compare the accuracies.","bb725389":"# from this comparison poly kernel has high accuracy"}}