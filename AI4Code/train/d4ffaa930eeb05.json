{"cell_type":{"298f42c2":"code","66e95bd8":"code","491ad6de":"code","7e69e849":"code","a25425e7":"code","ae18827c":"code","929dcae8":"code","3b6af7a6":"code","373e8d9b":"code","ee4f9b91":"code","391e3ca0":"code","c4fadcd9":"code","7e3323db":"code","412e0545":"code","57c6abe4":"code","ff0b8ff6":"code","2db70a57":"code","1350eb5a":"code","2bf3004b":"code","16c3bd04":"code","66962d53":"code","531a7756":"code","897c5270":"code","69b0feb1":"code","194f206b":"code","eda652a3":"code","82d5ebff":"code","784b9b76":"code","7c1632cb":"code","cb71435c":"markdown","d930ad9f":"markdown","a63070dc":"markdown","5ff816b1":"markdown","e5e9f48e":"markdown","b0bc928a":"markdown"},"source":{"298f42c2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n\n# TensorFlow \/ Keras functions\nfrom tensorflow import keras\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.callbacks import EarlyStopping \nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n# from tensorflow.keras.datasets import mnist\n\nimport warnings\nwarnings.filterwarnings('ignore')","66e95bd8":"!pwd","491ad6de":"# Read in the data\ntrain_raw = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","7e69e849":"train_raw.shape, test.shape","a25425e7":"train_raw.head()","ae18827c":"# Split raw data into predictor variables 'X' and response variable 'y'\nX = train_raw.drop('label', axis = 1).values\/255  # Normalize the data\ny = train_raw.label.values","929dcae8":"X.shape, y.shape","3b6af7a6":"# Check the distribution of the digits in training set\nsns.countplot(y)","373e8d9b":"# Display the first 8 images in the training set\nfig, ax = plt.subplots(2, 4) \nm=0\nwhile m < 8:\n    for i in range(2):\n        for j in range(4):\n            ax[i, j].imshow(X[m].reshape(28, 28), plt.cm.binary) \n            ax[i, j].set_xticks(())\n            ax[i, j].set_yticks(())\n            m += 1\nfig.set_size_inches(16, 7) \nfig.tight_layout()","ee4f9b91":"# Check the first 8 digits in 'y'\ny[:8]","391e3ca0":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 18000, stratify = y, random_state = 2020)\nX_valid, X_test, y_valid, y_test = train_test_split(X_valid, y_valid, test_size = 2000, stratify = y_valid, \n                                                    random_state = 2020)\n\nX_train.shape, X_valid.shape, X_test.shape, y_train.shape, y_valid.shape, y_test.shape","c4fadcd9":"# Reshape the input data into 3 dimension \nX_train = X_train.reshape(24000, 28, 28, 1)\nX_valid = X_valid.reshape(16000, 28, 28, 1)\nX_test = X_test.reshape(2000, 28, 28, 1)\n\nX_train.shape, X_valid.shape, X_test.shape","7e3323db":"# Label encode y variables\ny_train = to_categorical(y_train)\ny_valid = to_categorical(y_valid)\ny_test = to_categorical(y_test)","412e0545":"y_train[:8]","57c6abe4":"datagen = ImageDataGenerator(\n        rotation_range=8,  # random rotations within degree range: 0 - 15, because of hand writing issues\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally by 10% of total width\n        height_shift_range=0.1)  # randomly shift images vertically by 10% of total height\n\ndatagen.fit(X_train)","ff0b8ff6":"nn = Sequential()\nnn.add(Flatten(input_shape=(28, 28, 1)))\nnn.add(Dense(16, activation='relu')) \nnn.add(Dense(32, activation='relu'))\nnn.add(Dense(64, activation='relu'))\nnn.add(Dense(10, activation='softmax'))\nnn.summary()","2db70a57":"# Compile\nnn.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n# Fit\nnn.fit(datagen.flow(X_train, y_train, batch_size=128), epochs = 30, verbose = 2, validation_data = (X_valid, y_valid))","1350eb5a":"nn.evaluate(X_test, y_test)","2bf3004b":"# Make predictions using NN\ntest = test.values \/ 255\ntest_reshape = test.reshape(test.shape[0], 28, 28, 1)\nnn_results = nn.predict_classes(test_reshape)","16c3bd04":"nn_results","66962d53":"# nn_submission = pd.DataFrame(np.concatenate((np.array(range(1, test.shape[0] + 1)).reshape(-1, 1), \n#                                              nn_results.reshape(-1, 1)), axis = 1), \n#                              columns=['ImageId', 'Label'])\n\n# nn_submission.head()","531a7756":"# nn_submission.to_csv('submission_NN.csv', header=True, index=False)","897c5270":"cnn = Sequential()\ncnn.add(Conv2D(8, kernel_size=5, activation='relu', padding='same', input_shape=(28,28,1))) \ncnn.add(MaxPooling2D(pool_size=(2, 2), strides=2))\ncnn.add(Conv2D(16, kernel_size=3, activation='relu', padding='same'))\ncnn.add(MaxPooling2D(pool_size=(2, 2), strides=2)) \ncnn.add(Conv2D(32, kernel_size=3, activation='relu', padding='same'))\ncnn.add(Dropout(0.5))\n\ncnn.add(Flatten())\ncnn.add(Dense(64, activation='relu'))\ncnn.add(Dropout(0.5))\ncnn.add(Dense(10, activation='softmax'))\ncnn.summary()\n","69b0feb1":"# Compile the model\ncnn.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Fit the model\nhistory = cnn.fit(datagen.flow(X_train, y_train, batch_size=128), epochs = 50, verbose = 2, validation_data = (X_valid, y_valid))","194f206b":"cnn.evaluate(X_test, y_test)","eda652a3":"# Make predictions\ncnn_results = cnn.predict_classes(test_reshape)\ncnn_results","82d5ebff":"# Plot the accuracy score in both training set and validation for the CNN\nplt.plot(history.history['accuracy'], label='Training loss') \nplt.plot(history.history['val_accuracy'], label='Validation loss') \nplt.legend()","784b9b76":"# Plot the loss in both training set and validation for the CNN\nplt.plot(history.history['loss'], label='Training loss') \nplt.plot(history.history['val_loss'], label='Validation loss') \nplt.legend()","7c1632cb":"cnn_submission = pd.DataFrame(np.concatenate((np.array(range(1, test.shape[0] + 1)).reshape(-1, 1), \n                                             cnn_results.reshape(-1, 1)), axis = 1), \n                             columns=['ImageId', 'Label'])\n\ncnn_submission.to_csv('cnn_submission.csv', header=True, index=False)","cb71435c":"## Model building","d930ad9f":"### Model 2: Convelutional Neural Networks","a63070dc":"### Data Augmentation","5ff816b1":"## Data preprocessing and simple EDA","e5e9f48e":"## Split data into training set, validation set and test set","b0bc928a":"### Model 1: Neural Networks"}}