{"cell_type":{"90d4373e":"code","92f88c51":"code","1435ebf6":"code","c429c6e4":"code","d8ecd8f6":"code","94987f7f":"code","b711e65e":"code","57cf35e4":"code","5ca7b894":"code","2d0162ed":"code","8ebb9ab2":"code","4e4a0b77":"code","5544ac3e":"code","c5940263":"code","d3f5b5a2":"code","c5eb95c6":"code","41c3832d":"code","c9ede804":"code","427571c6":"code","6c0e12d0":"code","827e305e":"code","14718201":"code","3dbdb916":"markdown"},"source":{"90d4373e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","92f88c51":"import pandas as pd\nimport numpy as np\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\nimport tensorflow_hub as hub\nimport tensorflow_datasets as tfds\nfrom tensorflow.keras import layers\nfrom PIL import Image\nimport tensorflow as tf\npd.options.display.max_rows = 999\npd.options.display.max_columns= 999\nfrom sklearn.model_selection import train_test_split\nfrom keras.callbacks import ReduceLROnPlateau\nfrom matplotlib import pyplot","1435ebf6":"import pandas as pd\ndf_train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","c429c6e4":"x_train = df_train.drop(['label'] , axis = 1)\ny_train = df_train['label']","d8ecd8f6":"x_train.shape","94987f7f":"y_train.shape","b711e65e":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, Y_train, Y_test = train_test_split(x_train, y_train, test_size=0.2 , random_state=42)","57cf35e4":"X_train.dtypes","5ca7b894":"X_test.dtypes","2d0162ed":"X_train = X_train.values.reshape(X_train.shape[0], 28, 28 , 1).astype('float32')\nX_test = X_test.values.reshape(X_test.shape[0], 28, 28 , 1).astype('float32')","8ebb9ab2":"X_train[1]","4e4a0b77":"import matplotlib.pyplot as plt\nprint(\"the number of training examples = %i\" % X_train.shape[0])\nprint(\"the number of classes = %i\" % len(np.unique(y_train)))\nprint(\"Dimention of images = {:d} x {:d}  \".format(X_train[1].shape[0],X_train[1].shape[1])  )","5544ac3e":"sns.countplot(Y_test)","c5940263":"from keras.layers import Dropout\nfrom keras import Sequential\nfrom keras.layers import Dense, Dropout,Flatten\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\n\nmodel = Sequential()\n\nmodel.add(Conv2D(100, kernel_size=3, padding=\"valid\", input_shape=(28, 28, 1), activation = 'relu'))\nmodel.add(Conv2D(100, kernel_size=3, padding=\"valid\", activation = 'relu'))\nmodel.add(Conv2D(100, kernel_size=3, padding=\"valid\", activation = 'relu'))\n\nmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1)))\nfrom keras.layers.core import Activation\n\nmodel.add(Flatten())\nmodel.add(Dense(units= 500, activation='relu'  ))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(10))\nmodel.add(Activation(\"softmax\"))\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","d3f5b5a2":"from keras.utils import np_utils\nY_train = np_utils.to_categorical(Y_train).astype('int32')\nY_test = np_utils.to_categorical(Y_test)","c5eb95c6":"from tensorflow import keras\n\ncallbacks = [\n    keras.callbacks.EarlyStopping(\n        # Stop training when `val_loss` is no longer improving\n        monitor='val_loss',\n        # \"no longer improving\" being defined as \"no better than 1e-2 less\"\n        min_delta=1e-3,\n        # \"no longer improving\" being further defined as \"for at least 2 epochs\"\n        patience=25,\n        verbose=1)\n]","41c3832d":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n\nfrom keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(\n    featurewise_center=True,\n    featurewise_std_normalization=True,\n    rotation_range=10,\n    fill_mode='nearest',\n    validation_split = 0.2\n    )\n\ndatagen.fit(X_train)\n\ntrain_generator = datagen.flow(X_train, Y_train, batch_size=60, subset='training')\n\nvalidation_generator = datagen.flow(X_train, Y_train, batch_size=60, subset='validation')\n\n\n# fits the model on batches with real-time data augmentation:\nhistory = model.fit_generator(generator=train_generator,\n                    validation_data=validation_generator,\n                    use_multiprocessing=True,\n                    steps_per_epoch = len(train_generator) \/ 60,\n                    validation_steps = len(validation_generator) \/ 60,\n                    epochs = 30,\n                    workers=-1)\n","c9ede804":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.figure(figsize=(8, 8))\nplt.subplot(2, 1, 1)\nplt.plot(acc, label='Training Accuracy')\nplt.plot(val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.ylabel('Accuracy')\nplt.ylim([-1,1])\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(2, 1, 2)\nplt.plot(loss, label='Training Loss')\nplt.plot(val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.ylabel('Cross Entropy')\nplt.ylim([-1,1.0])\nplt.title('Training and Validation Loss')\nplt.xlabel('epoch')\nplt.show()","427571c6":"scores = model.evaluate(X_test, Y_test, verbose = 15 )\nprint ( scores )","6c0e12d0":"test_set = (df_test.values).reshape(-1, 28, 28 , 1).astype('float32')","827e305e":"import numpy\nres = model.predict(test_set)\nres = numpy.argmax(res,axis = 1)\nres = pd.Series(res, name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1 ,28001) ,name = \"ImageId\"),   res],axis = 1)\nsubmission.to_csv(\"My_submission.csv\",index=False)\nsubmission.head(10)","14718201":"from IPython.display import FileLink\nFileLink(r'My_submission.csv')","3dbdb916":"Introduction\nData preparation ->Load data ->Check for null and missing values ->Normalization ->Reshape ->Label encoding ->Split training and valdiation set\nCNN ->Define the model ->Set the optimizer and annealer ->Data augmentation\nEvaluate the model ->Training and validation curves ->Confusion matrix\nPrediction and submition ->Predict and Submit results"}}