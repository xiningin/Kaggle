{"cell_type":{"234830e3":"code","2c88c505":"code","556d66e4":"code","22c54480":"code","be19bfa6":"code","c6f43325":"code","f8d8545c":"code","bf424f63":"code","2b614a7a":"code","3a3f05cb":"code","afe67706":"code","f84f420c":"code","6a013ce7":"code","65ebd47d":"code","01bc3d47":"code","3061fcbf":"code","1d43c27a":"code","ae0522d1":"code","7054a6d5":"code","42378d95":"code","d94d3817":"code","6455d75a":"code","4de77416":"code","beeca7c0":"code","b280d0bc":"code","c7635996":"code","68be257f":"code","9a0276ab":"code","118cafce":"code","9f0e7f62":"code","27e40df7":"code","fd94bc6f":"code","f42ad4a0":"code","dc12e440":"code","729cef28":"code","dbf67d3e":"code","668ad0b7":"code","c986e114":"code","eb3590b3":"markdown","190d5f8f":"markdown","81b7beef":"markdown","01433f7e":"markdown","453089ef":"markdown","d66dabe2":"markdown"},"source":{"234830e3":"#  Author: -- Rishi Jain --","2c88c505":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","556d66e4":"#Import Keras framework for CNN\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom keras.models import Sequential\nfrom keras.layers import Convolution2D, MaxPooling2D, Conv2D, BatchNormalization\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras.utils.np_utils import to_categorical","22c54480":"import os\nos.chdir('..\/input\/utk-face-cropped\/')\nos.chdir('utkcropped')\nos.chdir('utkcropped')","be19bfa6":"from PIL import Image\nim =Image.open('100_0_0_20170112213500903.jpg.chip.jpg')\nim","c6f43325":"#Since dataset contains some mislabed examples which are not in form of <age>_<gender>_<enthnicity>_<date>\n#we remove those examples using fnmatch.\ntemp = os.listdir()\nimport fnmatch\ndataset = fnmatch.filter(temp, '*_*_*_*')\nm = len(dataset)\nprint(m)","f8d8545c":"from random import shuffle\nshuffle(dataset)","bf424f63":"#format of labelled images\ndataset[:2]","2b614a7a":"age = [i.split('_')[0] for i in dataset]\ngender = [i.split('_')[1] for i in dataset]\nethnicity = [i.split('_')[2] for i in dataset]","3a3f05cb":"#top 2 entries in age\nage[:2]","afe67706":"#Since ages are in strings we need to type cast to integer.\nage = list(map(int, age))\ngender = list(map(int,gender))\nethnicity = list(map(int,ethnicity))","f84f420c":"age[:2]","6a013ce7":"gender_classes = to_categorical(gender, num_classes=2)\nethnicity_classes = to_categorical(ethnicity,num_classes=5)","65ebd47d":"#Resizing Images to 128 x 128\nfrom scipy import misc\nimport cv2\nX_data =[]\nfor file in dataset:\n    face = misc.imread(file)\n    face = cv2.resize(face, (128, 128) )\n    X_data.append(face)\nX = np.squeeze(X_data)","01bc3d47":"#Normalizing Images\nX = X.astype('float32')\nX \/= 255","3061fcbf":"#Number of Training examples\nlen(X)","1d43c27a":"(X_gender_train, y_gender_train), (X_gender_test, y_gender_test) = (X[:18000],gender_classes[:18000]) , (X[18000:] , gender_classes[18000:])\n(X_gender_valid , y_gender_valid) = (X_gender_test[:3000], y_gender_test[:3000])\n(X_gender_test, y_gender_test) = (X_gender_test[3000:], y_gender_test[3000:])\n\n(X_ethnicity_train, y_ethnicity_train), (X_ethnicity_test, y_ethnicity_test) = (X[:18000],ethnicity_classes[:18000]) , (X[18000:] , ethnicity_classes[18000:])\n(X_ethnicity_valid , y_ethnicity_valid) = (X_ethnicity_test[:3000], y_ethnicity_test[:3000])\n(X_ethnicity_test, y_ethnicity_test) = (X_ethnicity_test[3000:], y_ethnicity_test[3000:])\n\n(X_age_train, y_age_train), (X_age_test, y_age_test) = (X[:18000],age[:18000]) , (X[18000:] , age[18000:])\n(X_age_valid , y_age_valid) = (X_age_test[:3000], y_age_test[:3000])\n(X_age_test, y_age_test) = (X_age_test[3000:], y_age_test[3000:])","ae0522d1":"import matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline\nplt.hist(gender)\nplt.xlabel('Gender')\nplt.ylabel('Frequency');","7054a6d5":"gender_model = Sequential()\ngender_model.add(Convolution2D(16, 3, padding='same', activation='relu', input_shape=(128,128, 3)))\ngender_model.add(MaxPooling2D(2, 2))\ngender_model.add(BatchNormalization())\n\ngender_model.add(Convolution2D(16, 3, padding='same', activation='relu'))\ngender_model.add(MaxPooling2D(2, 2))\ngender_model.add(BatchNormalization())\n\ngender_model.add(Convolution2D(32, 3, padding='same', activation='relu'))\ngender_model.add(MaxPooling2D(2, 2))\n\ngender_model.add(Convolution2D(32, 3,  activation='relu'))\ngender_model.add(MaxPooling2D(2, 2))\n\n\ngender_model.add(Flatten())\ngender_model.add(Dropout(0.30))\n\ngender_model.add(Dense(512, activation='relu'))\ngender_model.add(Dropout(0.50))\n\ngender_model.add(Dense(128, activation='relu'))\ngender_model.add(Dropout(0.50))\n\ngender_model.add(Dense(32, activation='relu'))\ngender_model.add(Dropout(0.50))\n\ngender_model.add(Dense(2, activation='sigmoid', name='predictions'))","42378d95":"gender_model.summary()","d94d3817":"gender_model.compile(loss='binary_crossentropy',\n             optimizer='adam',\n             metrics=['accuracy'])","6455d75a":"gender_history = gender_model.fit(X_gender_train,\n         y_gender_train,\n         batch_size=3000,\n         epochs=30,\n         validation_data=(X_gender_valid, y_gender_valid))","4de77416":"plt.plot(gender_history.history['loss'])\nplt.plot(gender_history.history['val_loss'])\nplt.title('model accuracy')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()","beeca7c0":"from keras.callbacks import ModelCheckpoint\ngender_modelcheckpoint = ModelCheckpoint(\"gender.model\")\n","b280d0bc":"# Plot a random sample of 5 test images, their predicted labels and ground truth\nimport matplotlib.pyplot as plt\nlabels = ['Male','Female']\nfigure = plt.figure(figsize=(15, 15))\ny_gender_pred = gender_model.predict(X_gender_test)\nfor i, index in enumerate(np.random.choice(X_gender_test.shape[0], size=5, replace=False)):\n    ax = figure.add_subplot(2, 5, i + 1, xticks=[], yticks=[])\n    # Display each image\n    ax.imshow(np.squeeze(X_gender_test[index]))\n    predict_index = np.argmax(y_gender_pred[index])\n    true_index = np.argmax(y_gender_test[index])\n    # Set the title for each image\n    ax.set_title(\"Predicted: {} ,\\n Actual: {}\".format(labels[predict_index], \n                                  labels[true_index]),\n                                  color=(\"green\" if predict_index == true_index else \"red\"))\nplt.show()","c7635996":"import matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline\nplt.hist(ethnicity)\nplt.xlabel('Ethnicity')\nplt.ylabel('Frequency');","68be257f":"ethnicity_model = Sequential()\nethnicity_model.add(Convolution2D(16, 3, padding='same', activation='relu', input_shape=(128, 128, 3)))\nethnicity_model.add(MaxPooling2D(2, 2))\n\nethnicity_model.add(Convolution2D(32, 3,padding='same' , activation='relu'))\nethnicity_model.add(MaxPooling2D(2, 2))\n\nethnicity_model.add(Convolution2D(32, 3,padding='same' , activation='relu'))\nethnicity_model.add(MaxPooling2D(2, 2))\n\nethnicity_model.add(Convolution2D(64, 3,padding='same' , activation='relu'))\nethnicity_model.add(MaxPooling2D(2, 2))\n\nethnicity_model.add(Convolution2D(64, 3,padding='same' , activation='relu'))\nethnicity_model.add(MaxPooling2D(2, 2))\n\nethnicity_model.add(Flatten())\nethnicity_model.add(Dropout(0.30))\nethnicity_model.add(Dense(256, activation='relu'))\n\nethnicity_model.add(Dropout(0.30))\nethnicity_model.add(Dense(64, activation='relu'))\nethnicity_model.add(Dense(5, activation='softmax'))","9a0276ab":"ethnicity_model.summary()","118cafce":"ethnicity_model.compile(loss='categorical_crossentropy',\n             optimizer='adam',\n             metrics=['accuracy'])\n\nethnicity_history = ethnicity_model.fit(X_ethnicity_train,\n         y_ethnicity_train,\n         batch_size=3000,\n         epochs=20,\n         validation_data=(X_ethnicity_valid, y_ethnicity_valid))","9f0e7f62":"plt.plot(ethnicity_history.history['loss'])\nplt.plot(ethnicity_history.history['val_loss'])\nplt.title('model accuracy')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()","27e40df7":"# Plot a random sample of 5 test images, their predicted labels and ground truth\nimport matplotlib.pyplot as plt\nlabels = ['White','Black','Asian','Indian','Others']\nfigure = plt.figure(figsize=(25, 20))\ny_ethnicity_pred = ethnicity_model.predict(X_ethnicity_test)\nfor i, index in enumerate(np.random.choice(X_ethnicity_test.shape[0], size=5, replace=False)):\n    ax = figure.add_subplot(3, 5, i + 1, xticks=[], yticks=[])\n    # Display each image\n    ax.imshow(np.squeeze(X_ethnicity_test[index]))\n    predict_index = np.argmax(y_ethnicity_pred[index])\n    true_index = np.argmax(y_ethnicity_test[index])\n    # Set the title for each image\n    ax.set_title(\"Predicted: {}\\n , Actual: {}\".format(labels[predict_index], \n                                  labels[true_index]),\n                                  color=(\"green\" if predict_index == true_index else \"red\"))\nplt.show()","fd94bc6f":"ethnicity_modelcheckpoint = ModelCheckpoint(\"ethnicity.model\")","f42ad4a0":"age_model = Sequential()\n\nage_model.add(Convolution2D(32, 3, padding='same', activation='relu', input_shape=(128, 128, 3)))\nage_model.add(MaxPooling2D(2, 2))\nage_model.add(BatchNormalization())\n\nage_model.add(Convolution2D(32, 3, padding='same', activation='relu'))\nage_model.add(MaxPooling2D(2, 2))\n\nage_model.add(Convolution2D(32, 3, padding='same', activation='relu'))\nage_model.add(MaxPooling2D(2, 2))\n\nage_model.add(Flatten())\n              \nage_model.add(Dropout(0.50))\nage_model.add(Dense(512, activation='relu'))\n              \nage_model.add(Dropout(0.50))\nage_model.add(Dense(128, activation='relu'))\n\nage_model.add(Dropout(0.50))\nage_model.add(Dense(16, activation='relu'))\n\nage_model.add(Dense(1, activation='linear',name='age_output'))\nage_model.summary()","dc12e440":"age_model.compile(loss='mse',\n             optimizer='adam',\n             metrics=['mae'])","729cef28":"age_history = age_model.fit(X_age_train,\n         y_age_train,\n         batch_size=1000,\n         epochs=40,\n         validation_data=(X_age_valid, y_age_valid))","dbf67d3e":"plt.plot(age_history.history['loss'])\nplt.plot(age_history.history['val_loss'])\nplt.title('model accuracy')\nplt.ylabel('Loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()","668ad0b7":"# Plot a random sample of 10 test images, their predicted labels and ground truth\nimport matplotlib.pyplot as plt\nfigure = plt.figure(figsize=(25, 20))\ny_age_pred = age_model.predict(X_age_test)\nfor i, index in enumerate(np.random.choice(X_age_test.shape[0], size=5, replace=False)):\n    ax = figure.add_subplot(1, 5, i + 1, xticks=[], yticks=[])\n    # Display each image\n    ax.imshow(np.squeeze(X_age_test[index]))\n    # Set the title for each image\n    ax.set_title(\"Predicted: {} , Actual: {}\".format(np.rint(y_age_pred[index]), \n                                  y_age_test[index]),\n                                  color=(\"green\" if abs(y_age_pred[index] - y_age_test[index])<=7  else \"red\"))\nplt.show()","c986e114":"age_modelcheckpoint = ModelCheckpoint(\"age.model\")","eb3590b3":"Since the cell contains images of age group in decreasing order, The images are not randomly distributed. We will use Shuffle() so that the distribution is random.","190d5f8f":"Types of Problem:\n\n1. AGE: Regression Problem\n\n2. GENDER: Binary Classification Problem\n\n3. ETHNICITY: Multiclass Classification Problem","81b7beef":"Since ages are returned as string therefore converting them to integers","01433f7e":"Ages are now converted to integers","453089ef":"Spliting data into Training Set, Validation Set and Test Set\n\nTrain Set Size : 18,000 examples\n\nValidation Set Size : 3,000 examples\n\nTest Set Size : 2,705 examples","d66dabe2":"Understanding dataset Each image is of dimension 200 x 200 x 3(RGB) The dataset contains entries like:\n\n* Age       :is a Positive Integer, denoting age of person\n* Gender    :is denoted by 1(male) or 0(female)\n* Ethnicity :is an integer from 0 to 4, denoting White, Black, Asian, Indian, and Others."}}