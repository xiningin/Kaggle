{"cell_type":{"0b520f50":"code","6f7fb32b":"code","87d1b5e5":"code","3e81d94e":"code","a9f4b4ec":"code","232f732a":"code","cd9a40fa":"code","485f1155":"code","00e50f7d":"code","3d4b503d":"code","0683aac3":"code","2810c55d":"code","5fc2f3bc":"code","2d21e226":"code","99c6bf64":"code","90d79e96":"code","abe76a37":"code","17893502":"code","b9e69355":"code","7aadefce":"code","568813ad":"code","5907f90d":"code","57789499":"code","beffd1c8":"code","dd50b6df":"code","4b9f3073":"code","fa689957":"code","ba7d42d7":"code","ff8ca4ab":"code","f6e2cd54":"markdown","a2b3cbb4":"markdown","b1b239ae":"markdown","940a431b":"markdown","325cfbe7":"markdown","a5bd849e":"markdown","03d1225b":"markdown","920673c2":"markdown","c627b262":"markdown","2c40e7cb":"markdown","2e0b4541":"markdown","94490741":"markdown","0cbc2644":"markdown","f5e30e2e":"markdown","290dc4bc":"markdown","85878a14":"markdown"},"source":{"0b520f50":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nimport lightgbm as lgb\nfrom sklearn.model_selection import StratifiedKFold\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6f7fb32b":"train_df = pd.read_csv('\/kaggle\/input\/airplane-accidents-severity-dataset\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/airplane-accidents-severity-dataset\/test.csv')\nsample_sub_df = pd.read_csv('\/kaggle\/input\/airplane-accidents-severity-dataset\/sample_submission.csv')","87d1b5e5":"train_df.head()","3e81d94e":"test_df.head()","a9f4b4ec":"sample_sub_df.head()","232f732a":"print(f'Shape of training data: {train_df.shape}')\nprint(f'Shape of testing data: {test_df.shape}')","cd9a40fa":"train_df.isna().sum()","485f1155":"test_df.isna().sum()","00e50f7d":"X_train = train_df.drop(['Severity', 'Accident_ID'], axis=1)\nY_train = train_df['Severity']","3d4b503d":"Y_train.unique()","0683aac3":"class_map = {\n    'Minor_Damage_And_Injuries': 0,\n    'Significant_Damage_And_Fatalities': 1,\n    'Significant_Damage_And_Serious_Injuries': 2,\n    'Highly_Fatal_And_Damaging': 3\n}\ninverse_class_map = {\n    0: 'Minor_Damage_And_Injuries',\n    1: 'Significant_Damage_And_Fatalities',\n    2: 'Significant_Damage_And_Serious_Injuries',\n    3: 'Highly_Fatal_And_Damaging'\n}","2810c55d":"Y_train = Y_train.map(class_map).astype(np.uint8)","5fc2f3bc":"plt.figure(figsize=(13,8))\nax = sns.barplot(np.vectorize(inverse_class_map.get)(pd.unique(Y_train)), Y_train.value_counts().sort_index())\nax.set(xlabel='Accident Severity', ylabel='# of records', title='Meter type vs. # of records')\nax.set_xticklabels(ax.get_xticklabels(), rotation=50, ha=\"right\")\nplt.show()","2d21e226":"plt.figure(figsize=(13,8))\nsns.distplot(X_train['Safety_Score'], kde=False)\nplt.show()","99c6bf64":"plt.figure(figsize=(13,8))\nsns.distplot(X_train['Days_Since_Inspection'], kde=False)\nplt.show()","90d79e96":"plt.figure(figsize=(13,8))\nsns.distplot(X_train['Total_Safety_Complaints'], kde=False)\nplt.show()","abe76a37":"plt.figure(figsize=(13,8))\nsns.distplot(X_train['Control_Metric'], kde=False)\nplt.show()","17893502":"plt.figure(figsize=(13,8))\nsns.distplot(X_train['Turbulence_In_gforces'], kde=False)\nplt.show()","b9e69355":"plt.figure(figsize=(13,8))\nsns.distplot(X_train['Cabin_Temperature'], kde=False)\nplt.show()","7aadefce":"plt.figure(figsize=(13,8))\nsns.distplot(X_train['Max_Elevation'], kde=False)\nplt.show()","568813ad":"plt.figure(figsize=(13,8))\nsns.distplot(X_train['Violations'], kde=False)\nplt.show()","5907f90d":"plt.figure(figsize=(13,8))\nsns.distplot(X_train['Adverse_Weather_Metric'], kde=False)\nplt.show()","57789499":"X_train['Total_Safety_Complaints'] = np.power(1.2, X_train['Total_Safety_Complaints'])\nX_train['Days_Since_Inspection'] = np.power(1.2, X_train['Days_Since_Inspection'])\nX_train['Safety_Score'] = np.power(1.2, X_train['Safety_Score'])","beffd1c8":"categoricals = ['Accident_Type_Code']","dd50b6df":"params = {\n            'boosting_type': 'gbdt',\n            'objective': 'multiclass',\n            'num_class': 4,\n            'metric': {'multi_logloss'},\n            'subsample': 0.4,\n            'subsample_freq': 1,\n            'learning_rate': 0.2,\n            'num_iterations': 2000,\n            'num_leaves': 100,\n            'feature_fraction': 0.8,\n            'lambda_l1': 1,\n            'lambda_l2': 1\n            }\n\nfolds = 10\nseed = 666\n\nkf = StratifiedKFold(n_splits=folds, shuffle=False, random_state=seed)\n\n# Score: 84.69896\nmodels = []\nfor train_index, val_index in kf.split(X_train, Y_train):\n    train_X = X_train.iloc[train_index]\n    val_X = X_train.iloc[val_index]\n    train_y = Y_train.iloc[train_index]\n    val_y = Y_train.iloc[val_index]\n    lgb_train = lgb.Dataset(train_X, train_y, categorical_feature=categoricals)\n    lgb_eval = lgb.Dataset(val_X, val_y, categorical_feature=categoricals)\n    gbm = lgb.train(params,\n                lgb_train,\n                num_boost_round=500,\n                valid_sets=(lgb_train, lgb_eval),\n                early_stopping_rounds=100,\n                verbose_eval = 100)\n    models.append(gbm)","4b9f3073":"test_df['Total_Safety_Complaints'] = np.power(1.2, test_df['Total_Safety_Complaints'])\ntest_df['Days_Since_Inspection'] = np.power(1.2, test_df['Days_Since_Inspection'])\ntest_df['Safety_Score'] = np.power(1.2, test_df['Safety_Score'])","fa689957":"preds = np.argmax(sum([model.predict(test_df.drop(['Accident_ID'], axis=1)) for model in models])\/folds, axis=1)","ba7d42d7":"submission = pd.DataFrame([test_df['Accident_ID'], np.vectorize(inverse_class_map.get)(preds)], index=['Accident_ID', 'Severity']).T\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","ff8ca4ab":"from IPython.display import FileLink, FileLinks\n\nFileLink('submission.csv')","f6e2cd54":"### 6. Distribution of Cabin Temperature (deg. F)","a2b3cbb4":"### 3. Distribution of total safety complaints","b1b239ae":"### 5. Distribution of Turbulence","940a431b":"### 2. Distribution of safety score","325cfbe7":"### 3. Distribution of days till Last inspection","a5bd849e":"## Exploratory Data Analysis","03d1225b":"### 8. Distribution of number of violations","920673c2":"### 7. Distribution of Max Elevation","c627b262":"So there are no missing values in the dataset.","2c40e7cb":"## Analysis of missing values (NaNs)","2e0b4541":"### 4. Distribution of control metric","94490741":"### 9. Distribution of adverse weather metric","0cbc2644":"So there are 4 classes of accidents (out target variable). Let's map those classes to integers","f5e30e2e":"## Highlights of the dataset\n\n<pre>\nAccident_ID:              \tunique id assigned to each row\nAccident_Type_Code:     \t  the type of accident (factor, not numeric)\nCabin_Temperature:      \t  the last recorded temperature before the incident, measured in degrees fahrenheit\nTurbulence_In_gforces:\t    the recorded\/estimated turbulence experienced during the accident\nControl_Metric:               an estimation of how much control the pilot had during the incident given the factors at play\nTotal_Safety_Complaints: \t number of complaints from mechanics prior to the accident\nDays_Since_Inspection:  \t  how long the plane went without inspection before the incident\nSafety_Score:           \t  a measure of how safe the plane was deemed to be\nSeverity:\t                 a description (4 level factor) on the severity of the crash [Target]\n<\/pre>","290dc4bc":"### 1. Distribution of Target Variable ","85878a14":"## Reading the given dataset"}}