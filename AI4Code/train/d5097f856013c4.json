{"cell_type":{"eac3e248":"code","3ca6fbd0":"code","55de9034":"code","e4d07830":"code","9cd03ca0":"code","b2cfc643":"code","7bcd9150":"code","6e28b90a":"code","a866d581":"code","7a9f03cc":"code","a14d2489":"code","2928944b":"code","38269d34":"code","d45df685":"code","ba69fc04":"code","d2090619":"code","ae39c553":"code","84cd5723":"code","c6621127":"code","faa50079":"markdown","f89564c0":"markdown","537cdd09":"markdown","e70b9b76":"markdown","aec284b4":"markdown","3ec4d371":"markdown","160cf88b":"markdown","bd87aeb5":"markdown","6a14dcdc":"markdown","67d69fd9":"markdown","6e7596ea":"markdown","0c269d84":"markdown","4f05de66":"markdown","d437c598":"markdown","96acc0f2":"markdown","df4a8716":"markdown","4a8f8a37":"markdown","c64268af":"markdown","c1e978f8":"markdown","f648d6ef":"markdown","0336bbfb":"markdown","1530e783":"markdown","3ba5d9a9":"markdown","e5942fc2":"markdown","faf0ddc4":"markdown","6f7692a9":"markdown","a9f44dd5":"markdown","1654b3af":"markdown"},"source":{"eac3e248":"import pandas as pd\n\nPATH_OF_DATA = '\/kaggle\/input\/tensorflow-great-barrier-reef\/'\ntrain_file = pd.read_csv(PATH_OF_DATA + 'train.csv')\ntrain_file","3ca6fbd0":"train_file.info()","55de9034":"train_file.duplicated().sum()","e4d07830":"def a_legit_resumetable(df):\n    '''This is a function to create summary but with features'''\n    print(f\"Shape: {df.shape}\")\n    one_summary = pd.DataFrame(df.dtypes, columns=['Data Type'])\n    one_summary = one_summary.reset_index()\n    one_summary = one_summary.rename(columns={'index': 'Features'})\n    one_summary['Num of Null Value'] = df.isnull().sum().values\n    one_summary['Num of Unique Value'] = df.nunique().values\n    one_summary['1st Value'] = df.iloc[0].values\n    one_summary['2nd Value'] = df.iloc[1].values\n    one_summary['3rd Value'] = df.iloc[2].values\n    return one_summary\n    ","9cd03ca0":"a_legit_resumetable(train_file)","b2cfc643":"def downcast_time(df, verbose=True):\n    begin_mem = df.memory_usage().sum() \/ 1024**2\n    for col in df.columns:\n        dtype_name = df[col].dtype.name\n        if dtype_name == 'object':\n            pass\n        elif dtype_name == 'bool':\n            df[col] = df[col].astype('int8')\n        elif dtype_name.startswith('int') or (df[col].round() == df[col]).all():\n            df[col] = pd.to_numeric(df[col], downcast='integer')\n        else:\n            df[col] = pd.to_numeric(df[col], downcast='float')\n    end_of_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose:\n        print('{:.1f}% Compressed'.format(100 * (begin_mem - end_of_mem) \/ begin_mem))\n        \n    return df","7bcd9150":"train_file = downcast_time(train_file)","6e28b90a":"# First, import the 'ast' module\nimport ast\n\n# Next, convert string to list type\ntrain_file['annotations'] = train_file['annotations'].apply(ast.literal_eval)\n\n# Finally, get the number of bounding boxes for each image\ntrain_file['num_bboxes'] = train_file['annotations'].apply(lambda i: len(i))","a866d581":"train_file[train_file['num_bboxes'] > 0]","7a9f03cc":"from os import listdir\nfrom PIL import Image\n\ndef verification(video_id):\n    path_of_file = PATH_OF_DATA + f'train_images\/video_{video_id}\/'\n    for filename in listdir(path_of_file):\n        if filename.endswith('.jpg'):\n            try:\n                image = Image.open(path_of_file + filename)\n                image.verify() # We need this line of code so that we can verify that it is an image\n            except (IOError, SyntaxError) as err:\n                print(\"There's a bad file there:\", filename) # This line prints out the names of corrupted files\n    print(f'Video {video_id} has all of the valid images. Results: Verified!')\n    \nfor video_id in range(3):\n    verification(video_id)","a14d2489":"import numpy as np\nfrom PIL import ImageDraw\n\ndef fetch_image(df, video_id, frame_id):\n    # Let's first get a frame!\n    a_frame = df[(df['video_id'] == video_id) & (df['video_frame'] == frame_id)].iloc[0]\n    # Now, we will get bounding_boxes!\n    bounding_boxes = a_frame['annotations']\n    # Finally, let's open images!\n    img = Image.open(PATH_OF_DATA + f'train_images\/video_{video_id}\/{frame_id}.jpg')\n    \n    for a_box in bounding_boxes:\n        x0, y0, x1, y1 = (a_box['x'], a_box['y'], a_box['x'] + a_box['width'], a_box['y'] + a_box['height'])\n        drawing = ImageDraw.Draw(img)\n        drawing.rectangle((x0, y0, x1, y1), outline=180, width=5)\n    return img\n\ndef fetch_image_list(df, video_id, num_images, start_frame_idx):\n    image_list = [np.array(fetch_image(df, video_id, start_frame_idx + index)) for index in range(num_images)]\n    return image_list","2928944b":"images = fetch_image_list(train_file, video_id=0, num_images=80, start_frame_idx=25)\nprint(f\"The number of images is: {len(images)}\")","38269d34":"import matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\n\nthe_grid = gridspec.GridSpec(4, 2)\nplt.figure(figsize=(18, 20))\n\nidx_list = [0, 5, 10, 15, 20, 25, 30, 35]\n\nfor i, idx in enumerate(idx_list):\n    ax = plt.subplot(the_grid[i])\n    plt.imshow(images[idx], interpolation='nearest')\n    ax.set_title(f'frame index {idx}')\n    plt.axis('off')\nplt.show()","d45df685":"from matplotlib import animation, rc\nrc('animation', html='jshtml')\n\ndef create_an_animation(imgs, frame_interval=130):\n    fig = plt.figure(figsize=(7, 4))\n    plt.axis('off')\n    img = plt.imshow(imgs[0])\n    \n    def animate(i):\n        img.set_array(imgs[i])\n        return [img]\n    \n    return animation.FuncAnimation(fig, animate, frames=len(imgs), interval=frame_interval)","ba69fc04":"frame_interval = 130 # Either set smaller number if wanted to play fast, else set bigger and slower\ncreate_an_animation(images, frame_interval=frame_interval)","d2090619":"import os\nimport sys\nimport tensorflow as tf\nimport time\n\n# Import the library that is used to submit the prediction result.\nINPUT_DIR = '..\/input\/tensorflow-great-barrier-reef\/'\nsys.path.insert(0, INPUT_DIR)\nimport greatbarrierreef\n\nMODEL_DIRECTORY = '..\/input\/cots-detection-w-tensorflow-object-detection-api\/cots_efficientdet_d0'\nstarting_time = time.time()\ntf.keras.backend.clear_session()\ndetect_fn_tf_odt = tf.saved_model.load(os.path.join(os.path.join(MODEL_DIRECTORY, 'output'), 'saved_model'))\nending_time = time.time()\ntotal_time = ending_time - starting_time\nprint(\"The total time is: \" + str(total_time) + \"s\")","ae39c553":"def load_image_into_numpy_array(path):\n    \"\"\"This actually loads an image from a file to a numpy array.\n    \n    Here's how:\n    The function puts image into numpy array to feed into tensorflow graph.\n    Note that by convention, we put it into a numpy array with shape into a format of height, width, and channels (which equals to 3) for RGB.\n    \n    The Args:\n    Path: a file path (that can be local or on colosus)\n    \n    How it returns:\n    The path returns an uint8 numpy array with shape with a format containing img_height, img_width, and 3.\n    \"\"\"\n    img_data = tf.io.gfile.GFile(path, 'rb').read()\n    image = Image.open(io.BytesIO(img_data))\n    (im_width, im_height) = image.size\n    \n    return np.array(image.getdata()).reshape(\n    (im_height, im_width, 3)).astype(np.uint8)\n\ndef detect(image_np):\n    \"\"\"This function can detect the infamous COTS from a given numpy image.\"\"\"\n    \n    input_tensor = np.expand_dims(image_np, 0)\n    starting_time = time.time()\n    detections = detect_fn_tf_odt(input_tensor)\n    return detections","84cd5723":"env = greatbarrierreef.make_env()  # First, initialize the environment\niteration_test = env.iter_test()  # Next, call iteration_test over an iterator which loops over the test set and sample submissions","c6621127":"detection_threshold = 0.19 # Change it whatever you want...\n\nsubmission_dict = {\n    'id': [],\n    'prediction_string': [],\n}\n\nfor (image_np, sample_prediction_df) in iteration_test:\n    height, width, _ = image_np.shape\n    \n    # Run object detection using the TensorFlow model.\n    detections = detect(image_np)\n    \n    # Parse the detection result and generate a prediction string.\n    num_detections = detections['num_detections'][0].numpy().astype(np.int32)\n    predictions = []\n    for index in range(num_detections):\n        score = detections['detection_scores'][0][index].numpy()\n        if score < detection_threshold:\n            continue\n\n        bbox = detections['detection_boxes'][0][index].numpy()\n        y_min = int(bbox[0] * height)\n        x_min = int(bbox[1] * width)\n        y_max = int(bbox[2] * height)\n        x_max = int(bbox[3] * width)\n        \n        bbox_width = x_max - x_min\n        bbox_height = y_max - y_min\n        \n        predictions.append('{:.2f} {} {} {} {}'.format(score, x_min, y_min, bbox_width, bbox_height))\n    \n    # Generate the submission data.\n    prediction_str = ' '.join(predictions)\n    sample_prediction_df['annotations'] = prediction_str\n    env.predict(sample_prediction_df)\n\n    print('Predictions: ', prediction_str)","faa50079":"## Load \"Train\" Data (and Imports) ##\nLike I said, before classifying the COTS again, we need to import a module, called pandas. Thus, we have to import the file path into the data_path variable and define the train variable that concatenates the file path of the competition data and the train.csv file and read it.","f89564c0":"Now, we are going to find the number of images in a list using the fetch_image_list function.","537cdd09":"As a result, we have some predictions to observe on, and thus, a submission.csv file appeared just in sight! If we submit this file, I expect that this scored a prediction score of 0.420ish or so...","e70b9b76":"## Plotting Frame Images with Bounding Boxes ##\nBefore we start plotting frame images with bounding boxes, we are going to load sequence of images with annotations. First, we are going to import numpy module as np and ImageDraw from the PIL (Python Image Library) module. Then, we will create two functions: one that fetch images, then fetch image lists.","aec284b4":"## Checking the Number of Frames with Bounding Boxes ##\nAfter the train_file variable obtained the number of bounding boxes, we can inspect the train_file variable by nesting the train_file variable with the 'num_bboxes' key and set it greater than 0.","3ec4d371":"## Feature Engineering ##\nNow that the train_file variable has been somewhat compressed, We can now start generating bounding boxes with annotations into the train_file variable! First of all, we have to import the ast module, then we convert the string of annotations to a list of annotations. Finally, we get the number of bounding boxes for each image.","160cf88b":"Now after that, let's load images into a numpy array using a load_image_into_numpy_array function. Thus, we are going to set up detection by create a detect function (see code for further explanation).","bd87aeb5":"As you can see, there are 80 images in all after running the fetch_image_list function. With all being set, let's plot the images with bounding boxes! First, we are going to import the two matplotlib modules, then set up the grid and the figsize, and finally, plot every bounding boxes in each frames by 5.","6a14dcdc":"After we created our env, we will start by setting the DETECTION_THRESHOLD to 0.19, set up submission_dict as a dictionary containing id and prediction_string. Then, we will start looping iteration_test with image_np and sample_prediction_df over detection_boxes, detection_scores, and num_detections. And then after that, generate the submission data.","67d69fd9":"## A Peek of the Train Data ##\nNow, after we read out the full path of the train.csv file, let's go and analyze the data inside. First analysis, we get the info of the train_file variable using the info function.","6e7596ea":"Super! Video 0, 1, and 2 has all of the valid images, and none of the bad files were present in one of the folders. Now that there are no bad files in these folders, now lets get started on plotting frame images with bounding boxes!","0c269d84":"After all, we have done making a video that is made out of binded frame indexes and plotting a bounding box from the first image with annotations. But that's not all because we are going to submit predictions with inference over a TensorFlow COTS model.","4f05de66":"After we defined the train_file variable again, we can see that 41.7% of the train_file has been compressed.","d437c598":"## Introduction before Coding ##\nAfter we classified all the Crown-of-Thorns starfish in the previous notebook (https:\/\/www.kaggle.com\/dinowun\/the-help-protect-the-great-barrier-reef-code), the COTS has returned again, and they want payback! But theres another way to fix the COTS' payback plan, use the EDA solution. In this second notebook, we will go over my simplified walkthrough of the EDA Solution. ","96acc0f2":"After running this line of code up there, we can see the shape of the train_file first, then we now observed that the one_summary variable is creating and reading out a csv file! There are 7 columns of labels: Features, Data Type, Num of Null Value, Num of Unique Value, 1st Value, 2nd Value, and 3rd Value. ","df4a8716":"After we run this cell, we see that every 5 frames, there are bounding boxes plotted from the annotations in every index. Now we got every bounding boxes in every frame, we will now finally animate images with bounding boxes!","4a8f8a37":"## Verification to Classify Whether There Is Corrupted Data ##\nBefore we plot frame images with bounding boxes that came from annotations, we have to verify if there are corrupted data in some images. So, let's take a run!","c64268af":"## Acknowledgements ##\nCredit to Aryan Lala and Diego Gomez for the EDA part and the prediction training part.\nTraining and Prediction Part: \nhttps:\/\/www.kaggle.com\/aryanlala\/object-detection-great-barrier-reef\/notebook\nEDA Part:\nhttps:\/\/www.kaggle.com\/diegoalejogm\/great-barrier-reefs-eda-with-animations","c1e978f8":"## Image Animation ##\nIn order to bind up all frame indexes, we are going to create an animated image or whatsoever call it a video. Another matplotlib module will be imported first with rc being set up, then the create_animation function will bind all frame indexes of images together in to one set thanks to the animate function inside, and lastly, set the frame interval to 130 and call the create_animation function.","f648d6ef":"As we run through the info() function of train_file, we see that the class of the train_file variable is a DataFrame object and there are 23501 entries according to RangeIndex. Also, there are 6 data columns: video_id (0), sequence (1), video_frame (2), sequence_frame (3), image_id (4), and last but not least, annotations (5). From each column, there are 4 int64 dtypes and 2 object dtypes. Over 1.1 MB of memory were used by the train_file variable. Second analysis, we'll find any signs of duplicated data over the train_file data.","0336bbfb":"**Excellent!** There are no signs of duplicated data over the train_file data. Last analysis, we will make a summary of features known as feature summary.","1530e783":"After running a_legit_resumetable function, we can now run the function again but this time with the train variable.","3ba5d9a9":"Great! Now, we now define the train_file again with the downcast function with the train_file variable!","e5942fc2":"## Loading the TensorFlow COTS Model to Run Inference ##\nNow that we had done the video framing of binded indexes with bounding boxes, let's load the TensorFlow COTS Model to run inference. First, let's import tensorflow, os, time, and sys modules including greatbarrierreef, and then let's set the model directory with the path of the model directory, clear session, load the saved model and finally, measure the end time with the end time variable. Thus, we have to set up the elapsed time variable and print them out to measure how long the TensorFlow COTS model load. ","faf0ddc4":"## Basic Engineering ##\nSince we setup'd our train_data, let's do some basic engineering. First, we have to create a function to downcast the train_file variable. Let's see how it went.","6f7692a9":"## The Usage of The Provided Python Time-Series API To Create Submission file ##\nWithin this format of submission in a csv file way, we are going to start initialize the environment with the make_env function over greatbarrierreef in an env variable, then iterate which loops over the test set and sample submissions with the iter_test function with the iteration_test variable.","a9f44dd5":"# **EDA Solution Simplified in TensorFlow Barrier Reef Competition (Adapted from Baek Kyun Shin, Diego Gomez, and Aryan Lala)** #","1654b3af":"After running this code, we see that all of the rows contained annotations of each images of the location of the COTS!"}}