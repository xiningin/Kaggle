{"cell_type":{"31ab2079":"code","6d325989":"code","9b621c34":"code","2fd8fc84":"code","3bb1ec30":"code","82ceb86b":"code","fd58efa7":"code","d8dfced8":"code","ba331e43":"code","e06f35aa":"code","dca58da7":"code","a6d31e76":"code","b87cd735":"code","f5117292":"code","3d73e03d":"code","520bec9b":"code","e0ffe88c":"code","34eb5cd7":"code","bd2cc76c":"code","014b4798":"code","9d95f5a4":"code","7ba5dcbf":"code","11e15bc7":"code","445feead":"code","5908df35":"code","6578c80d":"code","83f1df6a":"code","85efd255":"markdown"},"source":{"31ab2079":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6d325989":"# Reading the csv input dataset\nds = pd.read_csv('..\/input\/car-evaluation-data-set\/car_evaluation.csv',encoding = 'utf-8',header = None)","9b621c34":"# View first 5 records\nds.head()","2fd8fc84":"# Since the column names are not readable, we are renaming\nds.rename(columns = {0:'buying',1:'maint',2:'doors',3:'persons',4:'lug_boot',5:'safety',6:'classes'},inplace = True)","3bb1ec30":"ds.head()","82ceb86b":"# Checking whether null values are present\nds.isnull().sum()","fd58efa7":"# Checking unique values of each column, to check whether we can give ordinal values\nds.buying.unique()","d8dfced8":"ds.maint.unique()","ba331e43":"ds.doors.unique()","e06f35aa":"ds.persons.unique()","dca58da7":"ds.lug_boot.unique()","a6d31e76":"ds.safety.unique()","b87cd735":"ds.classes.unique()","f5117292":"# From the above we can see all the columns are non-numeric & categorical\n# Hence Encode Data\n\nds.buying.replace(('vhigh','high','med','low'),(1,2,3,4), inplace=True)\nds.maint.replace(('vhigh','high','med','low'),(1,2,3,4), inplace=True)\nds.doors.replace(('2','3','4','5more'),(1,2,3,4), inplace=True)\nds.persons.replace(('2','4','more'),(1,2,3), inplace=True)\nds.lug_boot.replace(('small','med','big'),(1,2,3), inplace=True)\nds.safety.replace(('low','med','high'),(1,2,3), inplace=True)\nds.classes.replace(('unacc','acc','good','vgood'),(1,2,3,4), inplace=True)","3d73e03d":"# checking shape of dataset\nds.shape","520bec9b":"ds.head()","e0ffe88c":"# Viewing histogram\nds.hist()","34eb5cd7":"# Assigning X & Y variables for the model\nX=ds[ds.columns[:-1]]\nY=ds['classes']","bd2cc76c":"X.head(2)","014b4798":"# Splitting train-test in the ratio 70:30\nfrom sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest = train_test_split(X,Y,test_size=0.3,random_state=42)","9d95f5a4":"# Applying KNN Classifier\n\nfrom sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_jobs=-1)","7ba5dcbf":"# Fitting into the model\nknn.fit(xtrain,ytrain)\npred=knn.predict(xtest)\nknn.score(xtest,ytest)","11e15bc7":"# Verifying the accuracy  \nfrom sklearn.metrics import classification_report\nprint(classification_report(ytest,pred))","445feead":"# Applying Random Forest Classifier\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import f1_score\n\nrfc=RandomForestClassifier(n_jobs=-1,random_state=51)","5908df35":"# Fitting into the model & check accuracy\nrfc.fit(xtrain,ytrain)\nrf_pred = rfc.predict(xtest)\nprint(rfc.score(xtest,ytest))\nprint(f1_score(ytest,rfc.predict(xtest),average='macro'))","6578c80d":"print(classification_report(ytest,rf_pred))","83f1df6a":"# Insights\n#----------\n# RFC is providing more Accuracy - 96%\n# Knn - 92%","85efd255":"# **Problem Statement for Car Evaluation Dataset:**\n\nIt is a multi-class classification problem. Task is to classify the give car dataset into 4 classes:\n1.Unacceptable, 2. Acceptable, 3. Good & 4. Very good\n\n**Independant Variables:**\n\n1. buying: buying price\n2. maint: maintenance price\n3. doors: numbers of doors\n4. persons: capacity in terms of persons to carry\n5. lug_boot: the size of luggage boot\n6. safety: estimated safety of the car\n\n**Target variable:**\nClass"}}