{"cell_type":{"52016861":"code","328824a6":"code","e859c6e5":"code","4f91bf83":"code","1eb351a2":"code","f03834d9":"code","44c13321":"code","ca1903b7":"code","287bd176":"code","ff650953":"code","8d1faa51":"code","d14c3b81":"code","209ecbbe":"markdown"},"source":{"52016861":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","328824a6":"import tensorflow as tf\nfrom tensorflow.keras import datasets, layers, models, regularizers, optimizers\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport numpy as np\nimport matplotlib.pyplot as plt\n \nEPOCHS=50\nNUM_CLASSES = 10\nBATCH_SIZE = 128\n    ","e859c6e5":"def load_data():\n    (x_train, y_train), (x_test, y_test) = datasets.cifar10.load_data()\n    x_train = x_train.astype('float32')\n    x_test = x_test.astype('float32')\n \n    #normalize \n    mean = np.mean(x_train,axis=(0,1,2,3))\n    std = np.std(x_train,axis=(0,1,2,3))\n    x_train = (x_train-mean)\/(std+1e-7)\n    x_test = (x_test-mean)\/(std+1e-7)\n \n    y_train =  tf.keras.utils.to_categorical(y_train,NUM_CLASSES)\n    y_test =  tf.keras.utils.to_categorical(y_test,NUM_CLASSES)\n\n    return x_train, y_train, x_test, y_test","4f91bf83":"def build_model(): \n    model = models.Sequential()\n    \n    #1st blocl\n    model.add(layers.Conv2D(32, (3,3), padding='same', \n        input_shape=x_train.shape[1:], activation='relu'))\n    model.add(layers.BatchNormalization())\n    model.add(layers.Conv2D(32, (3,3), padding='same', activation='relu'))\n    model.add(layers.BatchNormalization())\n    model.add(layers.MaxPooling2D(pool_size=(2,2)))\n    model.add(layers.Dropout(0.2))\n\n    #2nd block\n    model.add(layers.Conv2D(64, (3,3), padding='same', activation='relu'))\n    model.add(layers.BatchNormalization())\n    model.add(layers.Conv2D(64, (3,3), padding='same', activation='relu'))\n    model.add(layers.BatchNormalization())\n    model.add(layers.MaxPooling2D(pool_size=(2,2)))\n    model.add(layers.Dropout(0.3))\n\n    #3d block \n    model.add(layers.Conv2D(128, (3,3), padding='same', activation='relu'))\n    model.add(layers.BatchNormalization())\n    model.add(layers.Conv2D(128, (3,3), padding='same', activation='relu'))\n    model.add(layers.BatchNormalization())\n    model.add(layers.MaxPooling2D(pool_size=(2,2)))\n    model.add(layers.Dropout(0.4))\n\n    #dense  \n    model.add(layers.Flatten())\n    model.add(layers.Dense(NUM_CLASSES, activation='softmax'))\n    return model\n\n    \n ","1eb351a2":"\ndef plot_loss_curves(history):\n  \"\"\"\n  Returns separate loss curves for training and validation metrics.\n  \"\"\" \n  loss = history.history['loss']\n  val_loss = history.history['val_loss']\n\n  accuracy = history.history['accuracy']\n  val_accuracy = history.history['val_accuracy']\n\n  epochs = range(len(history.history['loss']))\n\n  # Plot loss\n  plt.plot(epochs, loss, label='training_loss')\n  plt.plot(epochs, val_loss, label='val_loss')\n  plt.title('Loss')\n  plt.xlabel('Epochs')\n  plt.legend()\n\n  # Plot accuracy\n  plt.figure()\n  plt.plot(epochs, accuracy, label='training_accuracy')\n  plt.plot(epochs, val_accuracy, label='val_accuracy')\n  plt.title('Accuracy')\n  plt.xlabel('Epochs')\n  plt.legend();","f03834d9":"(x_train, y_train, x_test, y_test) = load_data()\nmodel = build_model()\nmodel.compile(loss='categorical_crossentropy', \n            optimizer='RMSprop', \n            metrics=['accuracy'])","44c13321":"#train\nbatch_size = 64\nhistory = model.fit(x_train, y_train, batch_size=batch_size,epochs=EPOCHS, validation_data=(x_test,y_test)) \n\nscore = model.evaluate(x_test, y_test,batch_size=BATCH_SIZE)\n\nprint(\"\\nTest score:\", score[0])\nprint('Test accuracy:', score[1])","ca1903b7":"model.summary()","287bd176":"plot_loss_curves(history)","ff650953":"#image augmentation\ndatagen = ImageDataGenerator(\n    rotation_range=30,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True,\n    )\ndatagen.fit(x_train)\n \n#train\nbatch_size = 64\nh1 = model.fit(datagen.flow(x_train, y_train, batch_size=batch_size),epochs=EPOCHS,verbose=1,validation_data=(x_test,y_test))","8d1faa51":"#test\nscores = model.evaluate(x_test, y_test, batch_size=128, verbose=1)\nprint('\\nTest result: %.3f loss: %.3f' % (scores[1]*100,scores[0])) ","d14c3b81":"plot_loss_curves(h1)","209ecbbe":"The CIFAR10 dataset contains 60,000 color images in 10 classes, with 6,000 images in each class. The dataset is divided into 50,000 training images and 10,000 testing images. The classes are mutually exclusive and there is no overlap between them."}}