{"cell_type":{"ff4bbb50":"code","616b8f57":"code","6f5503c9":"code","82169eea":"code","51e2cf44":"code","7867c2e5":"code","12c014ab":"code","6916faa7":"code","a11df736":"code","310f1675":"code","3665da37":"code","33e05aef":"code","c5effae9":"code","ca140e99":"code","6fbb7930":"code","97ec27b6":"code","6bf71126":"code","2c10f515":"code","59f27c01":"code","47eec5bc":"code","9c1c09cb":"code","df894995":"code","c8c62958":"markdown","57f5caa1":"markdown","722d878a":"markdown","ae86e780":"markdown","2d4b829b":"markdown","9458edd5":"markdown","3fffcfbc":"markdown","d2896368":"markdown","23b4677d":"markdown","540e5839":"markdown","2d5cecfb":"markdown","12f5c942":"markdown","8d47d784":"markdown","fe7ce11a":"markdown","554cc048":"markdown","94aefc94":"markdown","7a0c7020":"markdown","3c6c9fb6":"markdown"},"source":{"ff4bbb50":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split","616b8f57":"dataset = pd.read_csv(\"..\/input\/iris-flower-dataset\/IRIS.csv\")","6f5503c9":"dataset.head()","82169eea":"dataset.info()","51e2cf44":"dataset.isnull().count()","7867c2e5":"dataset.describe()","12c014ab":"X = dataset.drop(['species'], axis=1)\nY = dataset['species']","6916faa7":"X.shape, Y.shape","a11df736":"sns.heatmap(dataset.corr(), annot = True);\n#annot = True adds the numbers onto the squares","310f1675":"sns.set_style(\"whitegrid\")\nsns.pairplot(dataset, hue=\"species\", markers='+',size=4)\nplt.show()","3665da37":"#Splitting the data into training and testing set\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.4, random_state=5)\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","33e05aef":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = pd.DataFrame(scaler.fit_transform(X_train), columns=X_train.columns)\nX_test = pd.DataFrame(scaler.transform(X_test), columns=X_test.columns)","c5effae9":"#create the model instance\nmodel = LogisticRegression()\n#fit the model on the training data\nmodel.fit(X_train, y_train)\n#the score, or accuracy of the model\nmodel.score(X_test, y_test)","ca140e99":"from sklearn.model_selection import cross_val_score\nscores = cross_val_score(model, X_train, y_train, cv=10)\nprint(np.mean(scores))","6fbb7930":"df_coef = pd.DataFrame(model.coef_, columns=X_train.columns)\ndf_coef","97ec27b6":"predictions = model.predict(X_test)\n#compare predicted values with the actual scores\ncompare_df = pd.DataFrame({'actual': y_test, 'predicted': predictions})\ncompare_df = compare_df.reset_index(drop = True)\ncompare_df","6bf71126":"classifier = KNeighborsClassifier(n_neighbors = 3, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)","2c10f515":"y_pred = classifier.predict(X_test)","59f27c01":"from sklearn.metrics import confusion_matrix\n#Logistic Regression\npd.DataFrame(confusion_matrix(y_test, predictions))","47eec5bc":"#KNN metric\npd.DataFrame(confusion_matrix(y_test, y_pred))","9c1c09cb":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, predictions))","df894995":"probs = model.predict_proba(X_test)\n#put the probabilities into a dataframe for easier viewing\nY_pp = pd.DataFrame(model.predict_proba(X_test), \n             columns=['class_0_pp', 'class_1_pp', 'class_2_pp'])\nY_pp.head()","c8c62958":"Checking the shape","57f5caa1":"Coefficients\n","722d878a":"Predicting Probability","ae86e780":"Confunsion Matrix","2d4b829b":"Look at the Data ","9458edd5":"baseline Predition","3fffcfbc":"Now look a the outlier, and some more statistical values","d2896368":"Classification Scores","23b4677d":"Standardize","540e5839":"The test score is already very high, but we can use the cross validated score to ensure the model's strength \n","2d5cecfb":"Importing the dataset","12f5c942":"Prediction","8d47d784":"Visualizing \n1. Correlations among data","fe7ce11a":"Apply K-nearest neighbour","554cc048":"The dataet consits of 3 unique types of petals","94aefc94":"Setting UP: Importing the Libraries","7a0c7020":"Modeling","3c6c9fb6":"Checking the missing value"}}