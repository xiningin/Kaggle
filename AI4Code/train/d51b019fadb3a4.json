{"cell_type":{"e46b796a":"code","cd0f0732":"code","6d43d779":"code","79998fa6":"code","a00711e2":"code","088feb99":"code","5c7dd241":"code","786e08ad":"code","7872653a":"code","1a6b4881":"code","322237ba":"code","bb2f48cb":"code","721053e8":"code","7e6e0882":"code","dd8b54af":"code","7bc9646e":"code","09fa4ca2":"code","c2467c8b":"code","7c3c4f4a":"code","a8eec1e8":"code","dc791e8e":"code","f0910722":"code","533128e2":"code","0e79704e":"code","ef946809":"code","621bcefd":"code","2ea2f007":"code","d496e25b":"code","7dc64fbf":"code","530c12c8":"code","026102d1":"code","9c0cbc10":"code","880340f0":"markdown","ea39af9e":"markdown","b8379d3f":"markdown","60c3c6e5":"markdown","80f43002":"markdown","241f006d":"markdown","da56e3d6":"markdown","69b729dd":"markdown","c53ceabc":"markdown","793e9853":"markdown","2e7b27a2":"markdown","58bde2d9":"markdown","31c5aa54":"markdown","28a10fcd":"markdown","3537968a":"markdown","96adfe2f":"markdown","81b6f58b":"markdown","c1e2f459":"markdown","c983ea27":"markdown","47eeb341":"markdown"},"source":{"e46b796a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cd0f0732":"df=pd.read_csv(\"..\/input\/default-of-credit-card-clients-dataset\/UCI_Credit_Card.csv\")\ndf","6d43d779":"df.info()","79998fa6":"df.columns","a00711e2":"cat_df = df.select_dtypes(include=['int64']).copy()\ncat_df = cat_df.drop(columns=\"ID\")#delete ID from categorical data -> not useful\ncat_df.columns","088feb99":"cat_df.shape","5c7dd241":"cat_df['EDUCATION'].replace({0: 4, 5: 4, 6: 4}, inplace=True)","786e08ad":"encode_columns=['SEX','MARRIAGE','EDUCATION']\nfor i in encode_columns:\n    cat_df=pd.get_dummies(cat_df, columns=[i])","7872653a":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\ncat_df.columns\n","1a6b4881":"unique_status = np.unique(cat_df[['PAY_0']])\nprint(\"total unique statuses:\", len(unique_status))\nprint(unique_status)","322237ba":"monthes=['PAY_0', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6']\nfor i in monthes:\n    cat_df=pd.get_dummies(cat_df, columns=[i])\n","bb2f48cb":"bins = [21, 30, 40, 50, 60, 76]\ngroup_names = ['21-30', '31-40', '41-50', '51-60', '61-76']\nage_cats = pd.cut(cat_df['AGE'], bins, labels=group_names)\ncat_df['age_cats'] = pd.cut(cat_df['AGE'], bins, labels=group_names)","721053e8":"cat_df=pd.get_dummies(cat_df, columns=['age_cats'])","7e6e0882":"cat_df.columns","dd8b54af":"len(cat_df.columns)","7bc9646e":"cat_df.dtypes","09fa4ca2":"len(cat_df.columns)","c2467c8b":"num_df = df.select_dtypes(include=['float64']).copy()\nnum_df.columns","7c3c4f4a":"bills=['BILL_AMT1', 'BILL_AMT2', 'BILL_AMT3', 'BILL_AMT4','BILL_AMT5','BILL_AMT6']\ncol_names=['Q_BILL_AMT1', 'Q_BILL_AMT2', 'Q_BILL_AMT3', 'Q_BILL_AMT4','Q_BILL_AMT5', 'Q_BILL_AMT6']\ni=0#counter \n\nfor col in bills:\n    quantile_list = [0, 0.25, 0.5, 0.75, 1.0]\n    quantile_labels = ['0-25Q', '25-50Q', '50-75Q', '75-100Q']\n    num_df[col_names[i]] = pd.qcut(num_df[col],q=quantile_list,labels=quantile_labels)\n    i+=1\n    \nnum_df.columns","a8eec1e8":"num_df.head()","dc791e8e":"pays=['PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5','PAY_AMT6','LIMIT_BAL']\ncol_names=['Q_PAY_AMT1', 'Q_PAY_AMT2', 'Q_PAY_AMT3','Q_PAY_AMT4','Q_PAY_AMT5','Q_PAY_AMT6','Q_LIMIT_BAL']\ni=0#counter \n\nfor col in pays:\n    quantile_list = [0, 0.25, 0.5, 0.75, 1.0]\n    quantile_labels = ['0-25Q', '25-50Q', '50-75Q', '75-100Q']\n    num_df[col_names[i]] = pd.qcut(num_df[col],q=quantile_list,labels=quantile_labels)\n    i+=1\n    \nnum_df.columns","f0910722":"encode_columns=['Q_BILL_AMT1', 'Q_BILL_AMT2','Q_BILL_AMT3', 'Q_BILL_AMT4', 'Q_BILL_AMT5', 'Q_BILL_AMT6','Q_PAY_AMT1', 'Q_PAY_AMT2', 'Q_PAY_AMT3','Q_PAY_AMT4','Q_PAY_AMT5','Q_PAY_AMT6','Q_LIMIT_BAL']\nfor i in encode_columns:\n    num_df=pd.get_dummies(num_df, columns=[i])","533128e2":"num_df.head()","0e79704e":"num_df.columns","ef946809":"len(num_df.columns)","621bcefd":"num_df['late_payer']=df['PAY_0'].apply(lambda x: 1 if x > 1 else 0)\n\nnum_df['late_payer'].head()","2ea2f007":"bill_mons=['BILL_AMT1','BILL_AMT2','BILL_AMT3','BILL_AMT4','BILL_AMT5','BILL_AMT6']\ncols=['OVER_BILL_AMT1','OVER_BILL_AMT2','OVER_BILL_AMT3','OVER_BILL_AMT4','OVER_BILL_AMT5','OVER_BILL_AMT6']\ni=0#counter\n\nfor mon in bill_mons:\n    num_df[cols[i]]=df[mon].apply(lambda x: 1 if x < 0 else 0)\n    i+=1\n    \nnum_df['OVER_BILL_AMT1'].head()    ","d496e25b":"data = pd.concat([cat_df, num_df], axis=1)","7dc64fbf":"target=data['default.payment.next.month']\ndata = data.drop(columns='default.payment.next.month')#delete target from dataframe","530c12c8":"data.head()","026102d1":"len(data.columns)","9c0cbc10":"#data.to_csv('mycsvfile.csv',index=False)","880340f0":"source:https:\/\/stackoverflow.com\/questions\/32984462\/setting-1-or-0-to-new-pandas-column-conditionally","ea39af9e":"now the originally numerical columns are categorical columns ","b8379d3f":"ONE-HOT-ENCODE the Q_PAY_AMTs , Q_BILL_AMTs, and Q_LIM_BAL","60c3c6e5":"ONE-HOT-ENCODE: \"SEX\",\"MARRIAGE\",\"EDUCATION\",","80f43002":"* will get 10-11 new columns per PAY_i with one-hot-encoding because some monthes might have 0 frequency of a payment status\/es","241f006d":"TOO MANY COLUMNS FOR \"EDUCATION\"\n\n->replace certain education statuses due to too many cols ->put all other options into 4 ","da56e3d6":"ONE-HOT-ENCODE the age categories :","69b729dd":"1. ADAPTIVE BINNING: the BILL_AMT cols\n\n\n* we use the data distribution itself to decide our bin ranges\n\n* bill_amts will be put into quantiles\n\nsource: https:\/\/towardsdatascience.com\/understanding-feature-engineering-part-1-continuous-numeric-data-da4e47099a7b","c53ceabc":"ONE-HOT-ENCODE \"PAY_i\":","793e9853":"BIN the AGE feature\n\n5 groups : 21-30 , 31-40 , 40-50 , 50-60 , 60-75\n\nsources:\n\nhttps:\/\/medium.com\/vickdata\/four-feature-types-and-how-to-transform-them-for-machine-learning-8693e1c24e80","2e7b27a2":"# *********Get CATEGORICAL data which is represented by int64:*************","58bde2d9":"2. ADAPTIVE BINNING: the PAY_AMT cols AND LIMIT_BAL\nwe use the data distribution itself to decide our bin ranges\n\nPAY_AMT(s) and LIMIT_BAL will be put into quantiles\n\nsource: https:\/\/towardsdatascience.com\/understanding-feature-engineering-part-1-continuous-numeric-data-da4e47099a7b","31c5aa54":"152 columns in all: next step is creating model with this df ","28a10fcd":"1. ONE-HOT-ENCODE certain categorical data\n\n\n* replaces i column with multiple columns that will be \"hot\" when rows with a certain status\n* will not one-hot-encode AGE","3537968a":"NEW COLUMN: create column that indicates if tuple has payed more than BILL_AMT (meaning they have a negative balance)","96adfe2f":"NEW COLUMN: create column that indicates if tuple has payment status >1 in first month and last month\n\n\n* make loop to go thru each PAY_0\n* make col with 0 or 1 that will indicate if condtion in true \n* add to num_df \n","81b6f58b":"CONCAT ALL DATAFRAMES MADE:","c1e2f459":"sources: \n* https:\/\/pbpython.com\/categorical-encoding.html=\n\n* https:\/\/www.shanelynn.ie\/using-pandas-dataframe-creating-editing-viewing-data-in-python\/\n\n* https:\/\/towardsdatascience.com\/categorical-encoding-using-label-encoding-and-one-hot-encoder-911ef77fb5bd","c983ea27":"# *********Get NUMERICAL data which is represented by float64:************* ","47eeb341":"pandas version:"}}