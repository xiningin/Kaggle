{"cell_type":{"18a3a9cf":"code","46bea319":"code","3abad80a":"code","2b4ad9cf":"code","fa0027f0":"code","8790e9c4":"code","4b2e3e66":"code","5307f9fb":"code","98e8396f":"code","0881ae86":"markdown","81343f5f":"markdown"},"source":{"18a3a9cf":"import requests\nimport pandas as pd\nimport pprint\nimport json\nimport time\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\npd.set_option('display.float_format', lambda x: '%.3f' % x)","46bea319":"#You will have to get a (free) account on opensky-network to obtain a username and password before continuing.\nfrom kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nusername = user_secrets.get_secret(\"username\")\npassword = user_secrets.get_secret(\"password\")","3abad80a":"airports=pd.read_csv(\"..\/input\/airports.csv\", header=0)\nconfirmed_cases=pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv\")\n\ncases=confirmed_cases.loc[confirmed_cases['Province\/State'] == 'New South Wales']\ncases=cases.drop(['Lat','Long','Province\/State','Country\/Region'],axis=1)\ncases = cases.stack() \ndf = cases.to_frame()\ndf.columns = ['count']","2b4ad9cf":"plt.rcParams['figure.figsize'] = [15, 10]\ndf.plot.line(rot=0,legend=False)\nplt.xticks(rotation=90) ","fa0027f0":"def epoch_to_time(x):\n    return pd.Timestamp(x+10*60*60, unit='s')\n\ndef flights_week(start,end, airport_code, country):\n    '''\n    description: Returns the daily counts and origin countries of flights into your airport of interest, over the given time period, note that \n    this duration cannot exceed 1 week.\n    \n    input: start = starting time of investigation in ISO 8601 format, e.g. 2020-04-01T00:00:00.007Z\n           end = ending time of investigation in ISO 8601 format, e.g. 2020-04-07T23:59:59.597Z\n           airport_code = ICAO airport code of airport of interest. These can be found in the airports dataset within this notebook.\n           country = This will be used in the function to exclude data from this country. For example, setting this to Australia will exclude\n                     flights with an origin country of Australia so this excludes domestic flights in my example.\n\n    \n    output: A pandas data frame with column headers as countries of origin flights and row index as date of arrival.     \n    \n    example: \n    \n                      Country           Canada  Germany  Hong Kong  Japan  Malaysia  New Zealand \n       time_stamp_day                                                             \n           2020-04-01                     0        0          2      0         1            2   \n    \n    '''\n    utc_time_begin = datetime.strptime(start, \"%Y-%m-%dT%H:%M:%S.%fZ\")\n    epoch_time_begin = int((utc_time_begin - datetime(1970, 1, 1)).total_seconds())\n\n    utc_time_end = datetime.strptime(end, \"%Y-%m-%dT%H:%M:%S.%fZ\")\n    epoch_time_end = int((utc_time_end - datetime(1970, 1, 1)).total_seconds())\n\n    call=\"https:\/\/{}:{}@opensky-network.org\/api\/flights\/arrival?airport={}&begin={}&end={}\".format(username,password,airport_code,epoch_time_begin,epoch_time_end)\n    res = requests.get(call)\n    \n    if res.status_code != 200:\n        print(\"Error\")\n        print(res.status_code)\n\n    con = res.json()\n    flight_list = []\n    for i in range(len(con)):\n        flight_list.append([]*3)\n        flight_list.append([con[i]['estDepartureAirport'],con[i]['callsign'],con[i]['lastSeen']])\n\n    df = pd.DataFrame(flight_list, columns = ['departure_airport', 'call_sign','epoch_arrival'])\n    df = df.dropna()\n    df.isnull().values.any()\n\n    df['time_stamp']=df.apply(lambda row: epoch_to_time(int(row['epoch_arrival'])),axis=1)\n    df['time_stamp_day']=df[\"time_stamp\"].values.astype('datetime64[D]')\n\n    xx = df.merge(airports[['ICAO','Country']],left_on='departure_airport',right_on='ICAO', how='left')\n    xv = xx.dropna()\n\n    test1=xv.loc[xv['Country'] != country]\n    test1 = test1.drop_duplicates()\n\n    country_count = pd.crosstab(test1.time_stamp_day,test1.Country)\n    return(country_count)","8790e9c4":"#Let us look at a week during COVID-19\n#flights_week(start,end,airport_code,country)\ncovid_week = flights_week(\"2020-04-01T00:00:00.007Z\",\"2020-04-07T23:59:59.597Z\",\"YSSY\",\"Australia\")","4b2e3e66":"plt.rcParams['figure.figsize'] = [15, 10]\nprev_week.plot.line(rot=0)\nplt.xticks(rotation=90)","5307f9fb":"#Try a week not impacted by COVID-19\n#flights_week(start,end,airport_code,country)\nnon_covid_week = flights_week(\"2019-04-01T00:00:00.007Z\",\"2019-04-07T23:59:59.597Z\",\"YSSY\",\"Australia\")","98e8396f":"plt.rcParams['figure.figsize'] = [15, 10]\nnon_covid_week.plot.line(rot=0)\nplt.xticks(rotation=90)","0881ae86":"Here I just do a basic plot of confirmed cases in the state of New South Wales.","81343f5f":"I started this investigation to examine the number of international flights arriving into Sydney Airport during COVID-19. I used a fantastic open source API https:\/\/opensky-network.org\/ to collect this data and have made this helper notebook for anyone else that wants to explore air travel data using their API.\n\nThis notebook will help you build a pandas dataframe like the following:\n\n                          Canada  Germany  Hong Kong  Japan  Malaysia  New Zealand \n       time_stamp_day                                                             \n           2020-04-01       0        0          2      0         1            2   \n\nFor my particular inputs, this was telling me the daily counts of flights arrving into Sydney airport and their origin country, over my duration of interest."}}