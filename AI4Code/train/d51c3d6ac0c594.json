{"cell_type":{"3dbf4efd":"code","36020f49":"code","23c11f14":"code","85ea6d07":"code","270eea0b":"code","55754700":"code","dcefd7ab":"code","fac38142":"code","6a633fe4":"code","efb0339c":"markdown","864cbed4":"markdown","cd96706e":"markdown","70e28e0f":"markdown","268b569e":"markdown","099ef26e":"markdown","185f3e59":"markdown","0237fa88":"markdown","19c4a8e2":"markdown"},"source":{"3dbf4efd":"# standard kaggle code:\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","36020f49":"df = pd.read_csv(\"\/kaggle\/input\/graph-visualization-task\/graph_edges.csv\" )\nprint(df.shape)\ndf.head()","23c11f14":"# To install:\n# on kaggle - it is already preinstalled \nnot_kaggle_flag = 0\nif not_kaggle_flag :\n    !pip install python-igraph # Pay attention: not just \"pip install igraph\" \n    !pip install cairocffi # Module required for plots \n\n\nimport igraph # On kaggle it is pre-installed \n","85ea6d07":"g = igraph.Graph(directed = True)\nnode_count = len( set(df['source']) | set(df['target']) ) \nprint('node_count', node_count)\ng.add_vertices(node_count)\ng.add_edges(df.values)\n\n# show some info:\nprint( g.summary() )\nprint('Number of weakly connected compoenents', len( g.clusters(mode='WEAK'))) # , 'what are them:', list( g.clusters(mode='WEAK') ) )\n","270eea0b":"print('Sizes of connected components')\nfor t in g.clusters(mode='WEAK') :\n    print(len(t))","55754700":"# Take first connected components:\n\ng2 = g.subgraph(g.clusters(mode='WEAK')[0] )\n","dcefd7ab":"layout = g2.layout_reingold_tilford(root=[2]) # layout_grid( ) # \nvisual_style = {}\nvisual_style[\"vertex_color\"] = ['green' for v in g.vs]\n#visual_style[\"vertex_label\"] = range(g.vcount()) \n\nvisual_style[\"vertex_size\"] = 2\n#visual_style[\"edge_label_size\"] = 10 # [2,2,2]\n#visual_style[\"margin\"] = 80\n\nigraph.plot(g2,  **visual_style, bbox = (800,800),  layout = layout )","fac38142":"#layout = g2.layout_kamada_kawai()# (root=[2]) # layout_grid( ) # visual_style = {} visual_style[\"vertex_color\"] = ['green' for v in g.vs]\n\n#visual_style[\"vertex_label\"] = range(g.vcount())\n\nvisual_style[\"vertex_size\"] = 2\n\n#visual_style[\"edge_label_size\"] = 10 # [2,2,2]\n\n#visual_style[\"margin\"] = 80\n\nigraph.plot(g2, **visual_style, bbox = (800,800) )# , layout = layout )\n","6a633fe4":"layout = g2.layout_kamada_kawai()# (root=[2]) # layout_grid( ) # \nvisual_style = {}\nvisual_style[\"vertex_color\"] = ['green' for v in g.vs]\n#visual_style[\"vertex_label\"] = range(g.vcount()) \n\nvisual_style[\"vertex_size\"] = 2\n#visual_style[\"edge_label_size\"] = 10 # [2,2,2]\n#visual_style[\"margin\"] = 80\n\nigraph.plot(g2,  **visual_style, bbox = (800,800) ,  layout = layout )","efb0339c":"layout = g2.layout_kamada_kawai()# (root=[2]) # layout_grid( ) # \nvisual_style = {}\nvisual_style[\"vertex_color\"] = ['green' for v in g.vs]\n#visual_style[\"vertex_label\"] = range(g.vcount()) \n\nvisual_style[\"vertex_size\"] = 2\n#visual_style[\"edge_label_size\"] = 10 # [2,2,2]\n#visual_style[\"margin\"] = 80\n\nigraph.plot(g2,  **visual_style, bbox = (800,800) ,  layout = layout )","864cbed4":"# Plot graph - reingold_tilford layout\n\n\nReingold-Tilford tree layout, useful for (almost) tree-like graphs\n\n\nSee docs\nhttps:\/\/igraph.org\/python\/doc\/tutorial\/tutorial.html#layout-algorithms\n\n\n","cd96706e":"# Load Data","70e28e0f":"# Default layout ","268b569e":"# Take first connected components:\n","099ef26e":"# igraph","185f3e59":"# Create graph","0237fa88":"# Kamada Kawai - not good results\n\nKamada-Kawai force-directed algorithm\n","19c4a8e2":"what is about ?\n\nPlot example graph by igraph\n\nActually took largest connected component and plot it \n\nSome other tutorial notebook and links to other materials  can be found here:\n\nhttps:\/\/www.kaggle.com\/alexandervc\/igraph-cheatsheet\n"}}