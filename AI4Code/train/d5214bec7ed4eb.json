{"cell_type":{"2f61c119":"code","88334c06":"code","fc77180f":"code","0b974910":"code","d1762dee":"code","d07c113e":"code","ea7c7403":"code","98262ec2":"code","c8c30c76":"code","14e2def0":"code","27da8205":"code","2b5ded2a":"code","77f4026d":"code","4e443024":"code","eb76098a":"code","c4c3d3c4":"code","7e75e128":"code","f0845838":"code","45dd11a0":"code","14f3e4a5":"markdown","dd384e3a":"markdown","28ce6714":"markdown"},"source":{"2f61c119":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","88334c06":"import cv2\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm","fc77180f":"x1 = pd.read_csv('..\/input\/test-face-detection-challenge-analytic-vidhya\/test_Rj9YEaI.csv')\nprint(x1)","0b974910":"x2=[]\nfacedetector=cv2.CascadeClassifier(\"..\/input\/haar-cascades-for-face-detection\/haarcascade_frontalface_alt.xml\")\nfor i in tqdm(range(x1.shape[0])):\n    z1 = '..\/input\/face-counting-challenge-analytics-vidhya\/image_data\/'+ x1['Name'][i]\n    #print(z1)\n    img = cv2.imread(z1 ,0)\n    face=facedetector.detectMultiScale(img,\n                                 scaleFactor=1.1, \n                                 minNeighbors=3, \n                                 minSize=(20, 20)\n                                 )\n    x2.append(len(face))\n    ","d1762dee":"print(x2)","d07c113e":"submissions = pd.DataFrame({'Name':x1['Name'],'HeadCount':x2})\nsubmissions.to_csv(\"\/kaggle\/working\/submission_1.csv\",index = False)","ea7c7403":"\n# my=cv2.imread(\"..\/input\/face-counting-challenge-analytics-vidhya\/image_data\/10022.jpg\")\n# my2=cv2.imread(\"..\/input\/face-counting-challenge-analytics-vidhya\/image_data\/10022.jpg\",0)\n# facedetector=cv2.CascadeClassifier(\"..\/input\/haar-cascades-for-face-detection\/haarcascade_frontalface_alt.xml\")","98262ec2":"# face=facedetector.detectMultiScale(my2,\n#                                  scaleFactor=1.1, \n#                                  minNeighbors=3, \n#                                  minSize=(20, 20)\n#                                  )\n# print('number of faces:')\n# print(len(face))","c8c30c76":"# fig,ax = plt.subplots(1)\n# im = cv2.cvtColor(my, cv2.COLOR_BGR2RGB)\n# ax.imshow(im)\n# for x,y,z,h in face:\n#     rect = patches.Rectangle((x,y),z,h,linewidth=1,edgecolor='r',facecolor='none')\n#     print(rect)\n#     ax.add_patch(rect)\n# plt.show()\n","14e2def0":"%matplotlib inline\nfrom matplotlib import pyplot as plt\nimport matplotlib.gridspec as gridspec\nfrom matplotlib.patches import Rectangle\n\nimport os\nimport json\nimport time\nimport numpy as np\nfrom PIL import Image\nimport torch\nfrom tqdm import tqdm\nimport cv2\nimport sys\nsys.path.append('\/kaggle\/input\/retinafacetorch')\nfrom retina import retinaface_model, detect_images","27da8205":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\nretinaface_model = retinaface_model(model_path='..\/input\/retinafacetorch\/Resnet50_Final.pth',device=device)","2b5ded2a":"import pandas as pd\nx1 = pd.read_csv('..\/input\/test-face-detection-challenge-analytic-vidhya\/test_Rj9YEaI.csv')","77f4026d":"my=cv2.imread(\"..\/input\/face-counting-challenge-analytics-vidhya\/image_data\/10022.jpg\")\nmy = cv2.cvtColor(my, cv2.COLOR_BGR2RGB)\nbboxes = detect_images(imgs=[np.float32(my)], net=retinaface_model, thresh=0.94, device=device, batch_run=False , rescale_factor = 1.1)","4e443024":"print(bboxes)\nprint(\"Total no. of faces: \",len(bboxes[0]))","eb76098a":"fig,ax = plt.subplots(1)\nim = my\nax.imshow(im)\nfor b in bboxes[0]:\n    rect = patches.Rectangle((b[0],b[1]),(b[2]-b[0]),(b[3]-b[1]),linewidth=1,edgecolor='r',facecolor='none')\n    print(rect)\n    ax.add_patch(rect)\nplt.show()","c4c3d3c4":"x3 =[]\nfor i in tqdm(range(x1.shape[0])):\n    z1 = '..\/input\/face-counting-challenge-analytics-vidhya\/image_data\/'+ x1['Name'][i]\n    #print(z1)\n    img = cv2.imread(z1 ,0)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    bboxes = detect_images(imgs=[np.float32(img)], net=retinaface_model, thresh=0.58, device=device, batch_run=False , rescale_factor = 1.3)\n    x3.append(len(bboxes[0]))\n# bboxes = detect_images(imgs=[np.float32(img) for img in imgs], net=retinaface_model, thresh=0.94, device=device)","7e75e128":"submissions = pd.DataFrame({'Name':x1['Name'],'HeadCount':x3})\nsubmissions.to_csv(\"\/kaggle\/working\/retinaface_2_thres0.58_scale1.3.csv\",index = False)","f0845838":"fig,ax = plt.subplots(1)\nim = cv2.imread(\"..\/input\/face-counting-challenge-analytics-vidhya\/image_data\/12744.jpg\")\nim = cv2.cvtColor(im, cv2.COLOR_BGR2RGB)\nbboxes = detect_images(imgs=[np.float32(im)], net=retinaface_model, thresh=0.58, device=device, batch_run=False , rescale_factor = 1.3)\nax.imshow(im)\nfor b in bboxes[0]:\n    rect = patches.Rectangle((b[0],b[1]),(b[2]-b[0]),(b[3]-b[1]),linewidth=1,edgecolor='r',facecolor='none')\n    ax.add_patch(rect)\nplt.show()\nprint(\"Total no. of faces: \",len(bboxes[0]))","45dd11a0":"train = pd.read_csv(\"..\/input\/face-counting-challenge-analytics-vidhya\/train.csv\")","14f3e4a5":"Basic HaarCascade to detect faces","dd384e3a":"# *****Now, trying 'RetinaFace' to detect*****","28ce6714":"Printing boxes on an image"}}