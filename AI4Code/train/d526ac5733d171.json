{"cell_type":{"77bb03a4":"code","529ad8f5":"code","cf390f67":"code","b2888bc7":"code","8b283d01":"code","18c4fcf8":"code","1e7f68f1":"code","8124d203":"code","aab01012":"code","cead97ab":"code","80401257":"code","9cdfa64e":"code","41df23c6":"code","1d6d110a":"code","ba6622f7":"code","531392e4":"markdown","86f048b1":"markdown","c8b7d344":"markdown","ffa9f076":"markdown","c6be71a4":"markdown","3795cb4a":"markdown","b113bb9f":"markdown","70605b29":"markdown","f7ca3a6b":"markdown","1a6efdc7":"markdown","aaf45fbf":"markdown"},"source":{"77bb03a4":"%matplotlib inline\n\nimport io\nimport sys\nimport os\nimport re\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom nltk import TweetTokenizer\nfrom sklearn import datasets, linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score","529ad8f5":"raw = pd.read_csv('..\/input\/twitter\/TASS2018.csv', sep=';')\nraw","cf390f67":"raw.info()","b2888bc7":"tweet_by_polarity = raw.groupby(\"polarity\", as_index=False)['content'].count()\ntweet_by_polarity.head(4)","8b283d01":"plt.figure(figsize=(9,5))\nsns.barplot(tweet_by_polarity['polarity'].values, tweet_by_polarity['content'].values, alpha=1)\nplt.title('Polary Frequency by content')\nplt.ylabel('content', fontsize=10)\nplt.xlabel('polarity', fontsize=10)\nplt.show()","18c4fcf8":"def features_lexical(text):\n    text_tokenizer = TweetTokenizer()\n    tokens_text = text_tokenizer.tokenize(text)\n    return tokens_text","1e7f68f1":"twchar=[] #Chars per tuit\ntwprom=[] #Weighted average number of characters\ntwword=[] #Words per tuit\ntwats=[] #Mentions per tuit\ntwemoji=[] # #Emojis\ntwesp=[] #Especial chars\nfor row in raw['content']: #Identificar las respectivas caracter\u00edsticas por comentario\n    twchar.append(len(row))\n    twprom.append(len(row)\/240)\n    twats.append(row.count(\"@\")) #Tener que existe la posibilidad de que exista un \"@\" sin que se mencione a una persona\n    a=re.findall(r'[^\\w\\s\\@\/|\u00b0!\"#$%&)(=?\u00bf\u00a1\u00a8*}{<>\",.:+-^\\']',row)\n    twemoji.append(np.size(a))\n    twword.append(len(features_lexical(row)))\n    b=re.findall(r'[^\\w\\s\\@]',row)\n    twesp.append(np.size(b)-np.size(a))","8124d203":"raw['N\u00b0 chars']=twchar\nraw['# char\/240']=twprom\nraw['# words']=twword\nraw['# mentions']=twats\nraw['# emojis']=twemoji\nraw['# esp char']=twesp\nraw","aab01012":"polarity_norm=[]\nfor row in raw['polarity']:\n    if row == 'NONE':\n        polarity_norm.append(0)\n    if row == 'NEU':\n        polarity_norm.append(2)\n    if row == 'N':\n        polarity_norm.append(1)\n    if row == 'P':\n        polarity_norm.append(3)","cead97ab":"# Split the data into training\/testing sets\ny_train = twchar[:-101] #No considering the latter 101 values\ny_test = twchar[-101:] #Considering the latter 101 values \n\n# Split the targets into training\/testing sets\nX_train = polarity_norm[:-101]\nX_test = polarity_norm[-101:]\n\nX_train=np.reshape(X_train,(405,1))\nX_test=np.reshape(X_test,(101,1))\n\n# Create linear regression object\n\nregr = linear_model.LinearRegression()\n\n# Train the model using the training sets\nregr.fit(X_train,y_train)","80401257":"# Make predictions using the testing set\ny_pred = regr.predict(X_test)","9cdfa64e":"# The coefficients\nprint('Coefficients: \\n', regr.coef_)\n# The mean squared error\nprint('Mean squared error: %.2f'\n      % mean_squared_error(y_test, y_pred))\n# The coefficient of determination: 1 is perfect prediction\nprint('Coefficient of determination: %.2f'\n      % r2_score(y_test, y_pred))","41df23c6":"# Plot outputs\nplt.scatter(X_test, y_test,  color='black')\nplt.plot(X_test, y_pred, color='blue', linewidth=3)\nplt.xticks(range(0,4,1))\nplt.yticks((range(10,160,20)))\nplt.title('Linear Regression Results')\nplt.ylabel('# Chars', fontsize=10)\nplt.xlabel('polarity', fontsize=10)\nplt.show()","1d6d110a":"# Split the data into training\/testing sets\ny_train = twword[:-101] #No considering the latter 101 values\ny_test = twword[-101:] #Considering the latter 101 values \n\n# Split the targets into training\/testing sets\nX_train = polarity_norm[:-101]\nX_test = polarity_norm[-101:]\n\nX_train=np.reshape(X_train,(405,1))\nX_test=np.reshape(X_test,(101,1))\n\n# Create linear regression object\n\nregr = linear_model.LinearRegression()\n\n# Train the model using the training sets\nregr.fit(X_train,y_train)","ba6622f7":"# Make predictions using the testing set\ny_pred = regr.predict(X_test)\n\n# Plot outputs\nplt.scatter(X_test, y_test,  color='black')\nplt.plot(X_test, y_pred, color='blue', linewidth=3)\nplt.xticks(range(0,4,1))\nplt.yticks((range(0,35,5)))\nplt.title('Linear Regression Results')\nplt.ylabel('# Words', fontsize=10)\nplt.xlabel('polarity', fontsize=10)\nplt.show()","531392e4":"# Prediction class","86f048b1":"# For #Chars","c8b7d344":"# **Gr\u00e1fica**","ffa9f076":"# Dataset description","c6be71a4":"# Define data (train\/test) & train the model ","3795cb4a":"# Import dataset","b113bb9f":"# For #Words","70605b29":"# **Adding new features to Dataframe**","f7ca3a6b":"# **Jose \u00c1ngel Pertuz Montes**\n# **Miguel \u00c1ngel Banda Del Valle**","1a6efdc7":"# Features\n- N\u00famero de caracteres por tuit\n- Promedio ponderado de caracteres por tuit  (#cartares\/240)\n- N\u00famero menciones \n- N\u00famero emojis\n- N\u00famero de palabras\n- N\u00famero de caracteres especiales","aaf45fbf":"# **Giving values to data, Polarity**"}}