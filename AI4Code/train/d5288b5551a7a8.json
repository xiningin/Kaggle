{"cell_type":{"df05ddce":"code","154e5d87":"code","547a0af2":"code","9458ee2e":"code","4799e2e5":"code","33600a68":"code","40cd02ff":"code","cd908dcb":"markdown","a6957243":"markdown"},"source":{"df05ddce":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport random\nimport time\nfrom IPython.display import display\nfrom sklearn.metrics import cohen_kappa_score, confusion_matrix\nfrom sklearn.model_selection import train_test_split","154e5d87":"#From https:\/\/www.kaggle.com\/cpmpml\/ultra-fast-qwk-calc-method\ndef qwk3(a1, a2, max_rat=3):\n    assert(len(a1) == len(a2))\n    a1 = np.asarray(a1, dtype=int)\n    a2 = np.asarray(a2, dtype=int)\n\n    hist1 = np.zeros((max_rat + 1, ))\n    hist2 = np.zeros((max_rat + 1, ))\n\n    o = 0\n    for k in range(a1.shape[0]):\n        i, j = a1[k], a2[k]\n        hist1[i] += 1\n        hist2[j] += 1\n        o +=  (i - j) * (i - j)\n\n    e = 0\n    for i in range(max_rat + 1):\n        for j in range(max_rat + 1):\n            e += hist1[i] * hist2[j] * (i - j) * (i - j)\n\n    e = e \/ a1.shape[0]\n\n    return 1 - o \/ e","547a0af2":"data = pd.read_csv(\"..\/input\/data-science-bowl-2019\/train_labels.csv\")","9458ee2e":"\"\"\"\n    1. Start from perfect agreement, \n    2. Add mistakes one by one, watching how the public and private score change\n    3. Do it until public and private scores are too low to be interesting\n    4. Repeat the whole process 1000 times\n\"\"\"\ndef test(public_size, private_size, min_score):\n    size = public_size + private_size\n    n_iter = 1000\n    n_iter2 = 200\n\n    stats = []\n    for i in range(n_iter):\n        data['submission'] = data['accuracy_group']\n\n        while(True):\n            for m in range(n_iter2):\n                n = random.randrange(0, size)\n                v = data.loc[n, 'submission']\n                if v == 0:\n                    data.loc[n,'submission'] = 1\n                elif v == 3:\n                    data.loc[n,'submission'] = 2\n                else:\n                    data.loc[n,'submission'] = v - 1 + 2 * random.randint(0, 1)\n            public_set = data.iloc[private_size : size]\n            public_kappa = qwk3(public_set['accuracy_group'], public_set['submission'])\n            private_set = data.iloc[:private_size]\n            private_kappa = qwk3(private_set['accuracy_group'], private_set['submission'])\n            if public_kappa < min_score and private_kappa < min_score:\n                break\n            d = {\n                'public_score': public_kappa,\n                'private_score': private_kappa,\n                'public_score_bin': int(public_kappa * 1000) \/ 1000,\n                'private_score_bin': int(private_kappa * 1000) \/ 1000,\n            }\n            stats.append(d)\n\n    return pd.DataFrame(stats)\n\nstats = test(1000, round(86\/14*1000), 0.300)   ","4799e2e5":"def plot(df, cat, val, min_score, max_score, title):\n    groups = df.where((df[cat] >= min_score) & (df[cat] <= max_score)).groupby([cat], as_index = False).agg({val: [\n        ('5%', (lambda x: x.quantile(.05))),\n        ('avg', 'mean'),\n        ('95%', (lambda x: x.quantile(.95))),\n        ('standard deviation', 'std')\n    ]})\n    \n    mean = groups[val]['avg']\n    error_low = mean - groups[val]['5%']\n    error_high = groups[val]['95%'] - mean\n    \n    fig = plt.figure()\n    fig.suptitle(title)\n    plt.xlabel(cat)\n    plt.ylabel(val)\n    plt.errorbar(groups[cat], mean, yerr=[error_low, error_high], markersize=5, markeredgecolor='red', markerfacecolor='red', linestyle='')\n    plt.grid()\n    plt.show()\n\n    return groups\n","33600a68":"groups1 = plot(stats, 'public_score_bin', 'private_score', 0.400, 0.600, 'Private score 95% confidence intervals assuming given public score')","40cd02ff":"pd.set_option('display.max_rows', 1000)\ndisplay(groups1)","cd908dcb":"**Full table below:**","a6957243":"Public score can be considered an estimator of the private score.\nThis notebook attempts to calculate a confidence interval for this score, in a non-parametric way.\n\n**Assumptions:**\n* the real accuracy groups for the public test set and the private test set are drawn from the same distribution as train_labels.csv\n* the public test set size is 1000 installations (as observed)\n* the private test set size is 86\/14*1000 and doesn't contain public test data (because \"Public leaderboard is calculated with approximately 14% of the test data. The final results will be based on the other 86%, so the final standings may be different.\")\n\n**Conclusions:**\n* The test set is **much** too small\n* It doesn't really matter if you improve by 0.001, or even by 0.010 \u2013 on the private leaderboard you may be worse by 0.050 as well\n* Anybody from the first ~25 places in public leaderboard may be the winner on the private leaderboard\n* Kappa seems to be biased \u2013 private scores are about 2% higher than the corresponding public scores\n* Private test set is about 6 times larger, so its standard error should be about (1\/6)^(1\/2) = 40% of the standard error in the public test score \u2013 still we are playing roulette here, the best solution on the private leaderboard may not be the best one in reality\n"}}