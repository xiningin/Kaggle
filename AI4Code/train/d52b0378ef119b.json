{"cell_type":{"da72c37d":"code","3972ee76":"code","4daee027":"code","1703475d":"code","2990601b":"code","8ee71257":"code","26d84a61":"code","598bb5b1":"code","1a75daad":"code","f0b48a60":"code","0aab7204":"code","1ca51a01":"code","bca74c01":"code","4648034c":"code","33e94d7f":"code","d01e5da4":"code","5a84d312":"code","102d26b8":"code","f97f86f9":"code","a46575f7":"code","ddb838ee":"code","d236e28c":"code","a5d5e8cf":"code","67db180f":"code","77000416":"code","aa23f1ad":"code","aebca8ba":"markdown"},"source":{"da72c37d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3972ee76":"import pandas as pd #importing all the necessary libraries\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_breast_cancer","4daee027":"cancer = load_breast_cancer() #loading our data","1703475d":"cancer.keys()","2990601b":"df = pd.DataFrame(cancer['data'],columns = cancer['feature_names']) #putting our data in a Dataframe","8ee71257":"df.head() #checking the head of the data","26d84a61":"df.describe()","598bb5b1":"df.isnull().sum() #checking for any sort of null value in our data","1a75daad":"sns.heatmap(df.isnull()) #looking for null values with help of heat map","f0b48a60":"from sklearn.model_selection import train_test_split #to split our data into training and testing set","0aab7204":"x = df\ny = cancer['target']","1ca51a01":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state = 101) #splitting our data","bca74c01":"from sklearn.svm import SVC #importing the svm model","4648034c":"svc  =SVC()","33e94d7f":"svc.fit(x_train,y_train) #fitting the data to our model","d01e5da4":"pred = svc.predict(x_test) #predicting the result","5a84d312":"from sklearn.metrics import classification_report,confusion_matrix","102d26b8":"print(classification_report(y_test,pred))\nprint('\\n')\nprint(confusion_matrix(y_test,pred)) #we print our results and its quite decent but it can be improved by using GridSearch which would help us find better hyperparameters for our problem","f97f86f9":"from sklearn.model_selection import GridSearchCV #importing Gridsearch","a46575f7":"param_grid = {'C':[0.1,1,10,100,1000],'gamma':[1,0.1,0.01,0.001,0.0001]}","ddb838ee":"grid = GridSearchCV(SVC(),param_grid,verbose = 3)","d236e28c":"grid.fit(x_train,y_train)","a5d5e8cf":"grid.best_estimator_","67db180f":"grid.best_params_","77000416":"grid_pred = grid.predict(x_test)","aa23f1ad":"print(classification_report(y_test,grid_pred))\nprint('\\n')\nprint(confusion_matrix(y_test,grid_pred))","aebca8ba":"We were able to get slightly better results upon using the GridSearch. This problem can be tackled using many other algorithms but i had never worked on it using SVM and i am pleased with the result"}}