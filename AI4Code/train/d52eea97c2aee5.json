{"cell_type":{"6b1d1767":"code","9061e648":"code","e34f0ef2":"code","b0546d6f":"code","c3d55b6d":"code","a098027d":"code","40e736c1":"code","6ffd2048":"code","7dc5c063":"code","895801cc":"code","7816c11c":"markdown","8a10aae2":"markdown"},"source":{"6b1d1767":"import numpy as np\nimport pandas as pd","9061e648":"# inference results\ndf_train = pd.read_csv(\"..\/input\/inference5folds\/train_inference_5folds.csv\")\n\ndf_train.head()","e34f0ef2":"# read logits\nlogits = np.array([df_train[\"logits0\"], df_train[\"logits1\"], df_train[\"logits2\"], df_train[\"logits3\"] ,df_train[\"logits4\"]]).T\nlogits","b0546d6f":"# accuracy for 5-fold\nnp.sum((df_train.label.values==logits.argmax(1)))\/(len(df_train))*100","c3d55b6d":"# get df for incorrect predictions\ndf_train[df_train[\"label\"]!=logits.argmax(1)]","a098027d":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(df_train[\"label\"], logits.argmax(1))\n\nprint(cm)","40e736c1":"for i, val in enumerate(cm):\n    print(\"for class {}: accuracy: {}\".format(i, val[i]\/sum(val)*100))","6ffd2048":"for i, val in enumerate(cm[:-1]):\n    print(\"for class {}: possibility to mistake for healthy: {}\".format(i, val[4]\/val[i]*100))","7dc5c063":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.heatmap(cm)\nplt.savefig('.sklearn_confusion_matrix.png')","895801cc":"from sklearn.metrics import classification_report\n\nprint(classification_report(df_train[\"label\"], logits.argmax(1)))","7816c11c":"# Analyze your model performance by confusion matrix","8a10aae2":"# Calculate P, R, f1"}}