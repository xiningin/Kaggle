{"cell_type":{"3d9c566e":"code","7be70343":"code","3a599270":"code","d745be3d":"code","0f7fde00":"code","16d0de58":"code","565ef88b":"code","e3237fc5":"code","2981c4f0":"code","f7ad4fdf":"code","88b96728":"code","f7ed09ff":"code","58a4ea95":"code","38e06b70":"code","fc1d3e8f":"code","874abe0f":"code","fa5df1ed":"code","1be80944":"code","d2d77904":"code","cdba88b9":"code","f484e7b0":"code","9ca7ae02":"code","4e6e62f5":"code","5e9c0dac":"code","e53d2489":"code","e27304a2":"code","558f4bca":"code","b9e157dd":"code","442a7f6b":"code","916c645f":"code","558e5ea4":"code","cc8c5ecb":"code","be2eb21b":"code","bf87a9ee":"code","a2c027d8":"code","f6e3b7cb":"code","3d8ffbc3":"code","38f73be6":"code","55d5d68a":"code","33b91c96":"code","01964572":"code","009b83d2":"code","889b1738":"code","e830e616":"code","03c6da24":"code","74bfdbb5":"code","f101aefa":"code","aa27170e":"code","67fa9d74":"code","5d63a138":"code","3fcbe2cf":"code","9bb6d093":"code","24df52e8":"code","e5343e7d":"code","0e85d3d5":"code","9da2c50b":"code","f3956700":"code","b2b7760f":"code","e73cdf2e":"code","bffa933d":"code","cb221d1f":"code","fbed84ae":"code","ac0031a8":"code","6268c983":"code","83e93f0d":"code","2884cebd":"code","99d09835":"code","61f050a2":"code","c7206c71":"code","f3542148":"code","ff7c3c8a":"code","530d8744":"code","03175a5a":"code","9a617bcc":"code","87e205ec":"code","49f895c4":"code","98c7141d":"code","b2ed85ed":"code","107f72a0":"code","87b5b7e8":"code","72389d4d":"code","dd5d48a7":"code","64cb5405":"code","ff8fce69":"code","8871b5a9":"code","654aaf2a":"code","237bff5b":"code","ee2bec49":"code","4bc24ff9":"code","a225f794":"code","e5ef4774":"code","b7cf3b50":"code","aaed9957":"code","8a4b10bb":"code","9dee9427":"code","9061849f":"code","2fe1d4cd":"code","f5dfbebb":"code","bad012db":"code","9f6895e5":"code","5f2e0cf6":"code","fb984f55":"markdown","2238c493":"markdown","870b9ae2":"markdown","71fada6a":"markdown","1cb430b2":"markdown","aea53f9b":"markdown","db5e1c59":"markdown","e0d96fa6":"markdown","e1a446be":"markdown","d11596db":"markdown","f4d051eb":"markdown","bca831b9":"markdown","f2b8234c":"markdown","2d01ecb6":"markdown","d565b24c":"markdown","033dfdd3":"markdown","e907cdeb":"markdown","160d788c":"markdown","a89cacf1":"markdown","6f25c2e6":"markdown","6728a972":"markdown","d59077a5":"markdown","ce34e0b9":"markdown","4887309e":"markdown","7df40a36":"markdown","e47d5f9f":"markdown","b5408e1f":"markdown","ff0f6952":"markdown","3f8314d3":"markdown","589e57ce":"markdown","6a115c4b":"markdown","75602f7c":"markdown","06a7691f":"markdown","08e28749":"markdown","cf033d62":"markdown","e4fbb206":"markdown","ed4d9e6e":"markdown","a16e95df":"markdown","1977b20c":"markdown","ee20de16":"markdown","2771c874":"markdown","e181c6e4":"markdown","06a9fba6":"markdown","117c42a9":"markdown","f2d65665":"markdown","917c2cbc":"markdown","5f25bffa":"markdown","4ad506fc":"markdown","1bd65ad9":"markdown","1cc38417":"markdown","94b81d22":"markdown","d92ca938":"markdown","a741a458":"markdown","2313dc9d":"markdown","79cb1521":"markdown","5de47305":"markdown","8e840942":"markdown","24c44e6d":"markdown","120097f4":"markdown","1d76425c":"markdown","c2c498b5":"markdown","033dc3ab":"markdown","34c7587c":"markdown","a0a43cd1":"markdown","31dd9c1e":"markdown","5357dd75":"markdown","69a7050c":"markdown","865fefa0":"markdown","01489197":"markdown","215a3f51":"markdown","58890e34":"markdown","08ceb955":"markdown","f859f154":"markdown","9a4cf32c":"markdown","dcf5fa35":"markdown","237f7941":"markdown","1d1065d5":"markdown","0920f57c":"markdown","edf7975c":"markdown","86df4915":"markdown","ececad08":"markdown","6ad53268":"markdown","6d3d7ae3":"markdown","d6d77a43":"markdown","a6b9d025":"markdown","da75d366":"markdown","d4297891":"markdown","acc35a6b":"markdown","1394a7c1":"markdown","536b8fd2":"markdown","3f3bcae9":"markdown","b4af752f":"markdown"},"source":{"3d9c566e":"from IPython.core.pylabtools import figsize\n\nfrom collections import Counter\nimport math\n\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import entropy\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import recall_score, make_scorer, confusion_matrix, classification_report, fbeta_score\n\nimport shap\nshap.initjs()  # Initialize SHAP js visualizations\n\n# Define seed for repeatability\nSEED = 42\nnp.random.seed(SEED)","7be70343":"# Read in the data\nfile_path = '..\/input\/freddie-mac-singlefamily-loanlevel-dataset\/loan_level_500k.csv'\n\ndata = pd.read_csv(file_path)\ndata.head()","3a599270":"data.info()","d745be3d":"# Drop columns\ndrop_cols = ['FIRST_PAYMENT_DATE', 'MATURITY_DATE', 'MORTGAGE_INSURANCE_PERCENTAGE', 'ORIGINAL_UPB',\n             'ORIGINAL_INTEREST_RATE', 'PREPAYMENT_PENALTY_MORTGAGE_FLAG', 'PROPERTY_STATE',\n             'LOAN_SEQUENCE_NUMBER', 'SELLER_NAME', 'SERVICER_NAME']\ndata.drop(columns=drop_cols, inplace=True)","0f7fde00":"# Analyze categorical columns\ndef bar_plot(df, col, fig_size=(12, 7), title=None, rot=90):\n    \n    print(\"Number of unique values: {}\".format(len(df[col].unique())))\n    print(\"Number of missing values: {}\".format(df[col].isnull().sum()))\n    \n    df = np.round(df[col].value_counts(normalize=True, ascending=False, dropna=False)*100, 2)\n    if True in df.index.isnull():\n        df.index = df.index.fillna(\"Missing Values\")\n    \n    print(df)\n    \n    figsize(fig_size[0], fig_size[1])\n    plt.title(title)\n    ax = df.plot.bar()\n    for p in ax.patches:\n        ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))\n    plt.xticks(rotation=rot)\n    plt.show()\n    \n\n# Analyze numerical columns\ndef exp_num_cols(df, col, title=\"\", fig_size=(12, 7), x_label=\"\"):\n    \n    print(\"Summary statistics: \\n\")\n    print(df[col].describe())\n    print(\"\\n\\nNumber of missing values: {}\".format(df[col].isnull().sum()))\n\n    fig, ax = plt.subplots()\n    plt.title(title)\n    df.loc[df.DELINQUENT == True, col].plot.hist(bins=50, density=True, \n                                                   ax=ax, alpha=0.4, label=\"Default\")\n    df.loc[df.DELINQUENT == False, col].plot.hist(bins=50, density=True, \n                                                  ax=ax, alpha=0.4, label=\"No Default\")\n    plt.xlabel(x_label)\n    plt.ylabel(\"Density Values\")\n    plt.legend()\n    plt.show()\n    \n\n# Theil's U\n\"\"\"Source: https:\/\/github.com\/shakedzy\/dython\/tree\/eed757172fd58209bec353911b7301b9def7db32\n\n\"\"\"\ndef _conditional_entropy(x,y):\n    # entropy of x given y\n    y_counter = Counter(y)\n    xy_counter = Counter(list(zip(x,y)))\n    total_occurrences = sum(y_counter.values())\n    entropy = 0\n    for xy in xy_counter.keys():\n        p_xy = xy_counter[xy] \/ total_occurrences\n        p_y = y_counter[xy[1]] \/ total_occurrences\n        entropy += p_xy * math.log(p_y\/p_xy)\n        \n    return entropy\n\ndef theil_u(x,y):\n    s_xy = _conditional_entropy(x,y)\n    x_counter = Counter(x)\n    total_occurrences = sum(x_counter.values())\n    p_x = list(map(lambda n: n\/total_occurrences, x_counter.values()))\n    s_x = entropy(p_x)\n    if s_x == 0:\n        return 1\n    else:\n        return (s_x - s_xy) \/ s_x","16d0de58":"# Explore the prepaid column\ndata.PREPAID.value_counts(dropna=False, normalize=True)","565ef88b":"# Explore the delinquent column\ndata.DELINQUENT.value_counts(dropna=False, normalize=True)","e3237fc5":"# Replace the true and false values of the Prepaid column with 1's and 0's\nreplace_dict = {True: 1, \n                False: 0}\ndata.PREPAID.replace(replace_dict, inplace=True)\ndata.PREPAID.value_counts(normalize=True)","2981c4f0":"# Replace the true and false values of the Delinquent column with 1's and 0's\ndata.DELINQUENT.replace(replace_dict, inplace=True)\ndata.DELINQUENT.value_counts(normalize=True)","f7ad4fdf":"# We will mark these loans where the status is prepaid and delinquent as NOT delinquent\npre_del_sum = data.PREPAID + data.DELINQUENT\npre_del_sum.value_counts(dropna=False, normalize=True)\ndata.loc[pre_del_sum == 2, 'DELINQUENT'] = 0\ndata.DELINQUENT.value_counts(dropna=False, normalize=True)","88b96728":"# After we create the label column we can drop the PREPAID column\ndata.drop(columns=['PREPAID'], inplace=True)","f7ed09ff":"# Explore Credit Score\nexp_num_cols(data, 'CREDIT_SCORE', title=\"Distribution of Credit Score Default vs. No Default\", \n             fig_size=(12, 7), x_label=\"Credit Score\")","58a4ea95":"# For rows with missing values, how many loans are delinquent\ndata.loc[data.CREDIT_SCORE.isnull(), 'DELINQUENT'].value_counts()","38e06b70":"# We will replace missing values with a missing value indicator - 0\ndata.CREDIT_SCORE.fillna(value=0, inplace=True)","fc1d3e8f":"bar_plot(data, col=\"FIRST_TIME_HOMEBUYER_FLAG\", fig_size=(8, 6), \n         title=\"First time buyer (Descending Order)\", rot=0)","874abe0f":"# The missing values are for those loans where the buyer does not fall into the definition\n# of a first home buyer. We will assign 'N'.\ndata.FIRST_TIME_HOMEBUYER_FLAG.fillna(value=\"N\", inplace=True)","fa5df1ed":"bar_plot(data, col=\"FIRST_TIME_HOMEBUYER_FLAG\", fig_size=(8, 6), \n         title=\"First time buyer (Descending Order)\", rot=0)","1be80944":"pd.crosstab(data.FIRST_TIME_HOMEBUYER_FLAG, data.DELINQUENT, normalize='index')","d2d77904":"print(\"Number of unique MSA codes: {}\".format(len(data.METROPOLITAN_STATISTICAL_AREA.unique())))\nprint(\"Number of missing values: {}\".format(data.METROPOLITAN_STATISTICAL_AREA.isnull().sum()))","cdba88b9":"# Fill the missing values in MSA with 'Unknown'\nmissing_val = 0\ndata.METROPOLITAN_STATISTICAL_AREA.fillna(value=missing_val, inplace=True)","f484e7b0":"cond = (data.METROPOLITAN_STATISTICAL_AREA != missing_val)\ndata.loc[cond, 'METROPOLITAN_STATISTICAL_AREA'] = data.loc[cond, 'METROPOLITAN_STATISTICAL_AREA'].astype(int)","9ca7ae02":"# Investigate areas with the highest loan default rates\npd.crosstab(data.METROPOLITAN_STATISTICAL_AREA, data.DELINQUENT, normalize='index')\\\n    .sort_values(by=1, ascending=False).head()","4e6e62f5":"# Investigate the unique values\nprint(\"Number unique values: {}\".format(len(data.NUMBER_OF_UNITS.unique())))\nprint(\"Unique values: {}\".format(data.NUMBER_OF_UNITS.unique()))\nprint(\"Number of missing values: {}\".format(data.NUMBER_OF_UNITS.isnull().sum()))","5e9c0dac":"# Investigate missing values\ndata.loc[data.NUMBER_OF_UNITS.isnull(), 'DELINQUENT'].value_counts()","e53d2489":"# Drop missing values\ndata = data[~data.NUMBER_OF_UNITS.isnull()].reset_index(drop=True, inplace=False)","e27304a2":"bar_plot(data, col=\"NUMBER_OF_UNITS\", fig_size=(8, 6), \n         title=\"Number of Units (Descending Order)\", rot=0)","558f4bca":"pd.crosstab(data.NUMBER_OF_UNITS, data.DELINQUENT, normalize='index').sort_values(by=1, ascending=False)","b9e157dd":"print(\"Number of unique values: {}\".format(len(data.OCCUPANCY_STATUS.unique())))\nprint(\"Unique values: {}\".format(data.OCCUPANCY_STATUS.unique()))\nprint(\"Number of missing values: {}\".format(data.OCCUPANCY_STATUS.isnull().sum()))","442a7f6b":"bar_plot(data, col=\"OCCUPANCY_STATUS\", fig_size=(8, 6), \n         title=\"Occupancy Status (Descending Order)\", rot=0)","916c645f":"pd.crosstab(data.OCCUPANCY_STATUS, data.DELINQUENT, normalize='index').sort_values(by=1, ascending=False)","558e5ea4":"# Distribution of occupancy statuses across number of units\npd.crosstab(data.OCCUPANCY_STATUS, data.NUMBER_OF_UNITS, normalize='index')","cc8c5ecb":"# Distribution of number of units across occupancy statuses\npd.crosstab(data.OCCUPANCY_STATUS, data.NUMBER_OF_UNITS, normalize='columns')","be2eb21b":"exp_num_cols(data, 'ORIGINAL_COMBINED_LOAN_TO_VALUE', \n             title=\"Combined Loan to Value, Default vs. No default\", \n             x_label=\"Combined Loan to Value\")","bf87a9ee":"data.loc[data.ORIGINAL_COMBINED_LOAN_TO_VALUE > 90, 'DELINQUENT'].value_counts(normalize=True)","a2c027d8":"data.loc[data.ORIGINAL_COMBINED_LOAN_TO_VALUE <= 90, 'DELINQUENT'].value_counts(normalize=True)","f6e3b7cb":"# Fill the missing values with the median\ndata.loc[data.ORIGINAL_COMBINED_LOAN_TO_VALUE.isnull(), 'ORIGINAL_COMBINED_LOAN_TO_VALUE'] = \\\n    data.ORIGINAL_COMBINED_LOAN_TO_VALUE.median()","3d8ffbc3":"data.groupby(['NUMBER_OF_UNITS'])['ORIGINAL_COMBINED_LOAN_TO_VALUE'].describe()","38f73be6":"exp_num_cols(data, 'ORIGINAL_DEBT_TO_INCOME_RATIO',\n             title=\"Debt to Income Ratio, Default vs. No Default\",\n             x_label='Debt to Income Ratio')","55d5d68a":"# Fill in missing values with '999'\ndti_ind = 999\ndata.ORIGINAL_DEBT_TO_INCOME_RATIO.fillna(value=dti_ind, inplace=True)","33b91c96":"# Create a separate column to indicate this information.\ndata['HIGH_DEBT_TO_INCOME_RATIO'] = 0\ndata.loc[data.ORIGINAL_DEBT_TO_INCOME_RATIO == dti_ind, 'HIGH_DEBT_TO_INCOME_RATIO'] = 1\ndata['HIGH_DEBT_TO_INCOME_RATIO'].value_counts(normalize=True)","01964572":"pd.crosstab(data.HIGH_DEBT_TO_INCOME_RATIO, data.DELINQUENT, normalize='index')","009b83d2":"exp_num_cols(data, 'ORIGINAL_LOAN_TO_VALUE',\n             title=\"Loan to Value, Default vs. No Default\",\n             x_label=\"Loan to Value\")","889b1738":"data.ORIGINAL_LOAN_TO_VALUE.plot.hist(bins=20)","e830e616":"# We will fill the missing values with the median\ndata.loc[data.ORIGINAL_LOAN_TO_VALUE.isnull(), 'ORIGINAL_LOAN_TO_VALUE'] = \\\n    data.ORIGINAL_LOAN_TO_VALUE.median()","03c6da24":"fig, ax = plt.subplots()\nplt.title(\"Relationship between Loan to Value, Credit Score and Delinquency\")\ndata[data.DELINQUENT == 0].plot.scatter(x=\"ORIGINAL_LOAN_TO_VALUE\", y=\"CREDIT_SCORE\",\n                                        c=\"blue\", alpha=0.4, ax=ax, label=\"No Default\")\ndata[data.DELINQUENT == 1].plot.scatter(x=\"ORIGINAL_LOAN_TO_VALUE\", y=\"CREDIT_SCORE\",\n                                        c=\"green\", alpha=0.4, ax=ax, label=\"Default\")\nplt.legend()\nplt.show()","74bfdbb5":"cond_default = ((data.DELINQUENT == 0) & (data.ORIGINAL_DEBT_TO_INCOME_RATIO < 200))\ncond_no_default = ((data.DELINQUENT == 1) & (data.ORIGINAL_DEBT_TO_INCOME_RATIO < 200))\n\nfig, ax = plt.subplots()\nplt.title(\"Relationship between Loan to Value, Credit Score and Delinquency\")\ndata[cond_default].plot.scatter(x=\"ORIGINAL_DEBT_TO_INCOME_RATIO\", y=\"CREDIT_SCORE\",\n                                        c=\"blue\", alpha=0.4, ax=ax, label=\"No Default\")\ndata[cond_no_default].plot.scatter(x=\"ORIGINAL_DEBT_TO_INCOME_RATIO\", y=\"CREDIT_SCORE\",\n                                        c=\"green\", alpha=0.4, ax=ax, label=\"Default\")\nplt.legend()\nplt.show()","f101aefa":"bar_plot(data, 'CHANNEL', title=\"Distribution of Channel (Descending order)\")","aa27170e":"pd.crosstab(data.CHANNEL, data.DELINQUENT, normalize='index').sort_values(by=1, ascending=False)","67fa9d74":"data.groupby(['CHANNEL'])['ORIGINAL_LOAN_TO_VALUE'].describe()","5d63a138":"bar_plot(data, 'PRODUCT_TYPE',\n         title=\"Product Type distribution (Descending order)\")","3fcbe2cf":"data.drop(columns=['PRODUCT_TYPE'], inplace=True)","9bb6d093":"bar_plot(data, 'PROPERTY_TYPE',\n         title=\"Property Type distribution (Descending order)\")","24df52e8":"data.loc[data.PROPERTY_TYPE.isnull(), 'DELINQUENT'].value_counts()","e5343e7d":"# Replace the missing values with 'Not Available'\ndata.PROPERTY_TYPE.fillna(value='Not Available', inplace=True)","0e85d3d5":"pd.crosstab(data.PROPERTY_TYPE, data.DELINQUENT, normalize='index').sort_values(by=1, ascending=False)","9da2c50b":"# Distribution of number of units across property type\npd.crosstab(data.NUMBER_OF_UNITS, data.PROPERTY_TYPE, normalize='columns')","f3956700":"print(\"Number of unique values: {}\".format(len(data.POSTAL_CODE.unique())))\nprint(\"Number of missing values: {}\".format(data.POSTAL_CODE.isnull().sum()))","b2b7760f":"data.loc[data.POSTAL_CODE.isnull(), 'DELINQUENT'].value_counts()","e73cdf2e":"# We can drop the rows with missing values\ndata = data[~data.POSTAL_CODE.isnull()].reset_index(drop=True, inplace=False)","bffa933d":"# Convert the type to int\ndata.POSTAL_CODE = data.POSTAL_CODE.astype('int')","cb221d1f":"bar_plot(data, 'LOAN_PURPOSE',\n         title=\"Loan Purpose distribution (Descending Order)\")","fbed84ae":"pd.crosstab(data.LOAN_PURPOSE, data.DELINQUENT, normalize='index').sort_values(by=1, ascending=False)","ac0031a8":"# Distribution of loan purpose across occupancy statuses\npd.crosstab(data.LOAN_PURPOSE, data.OCCUPANCY_STATUS, normalize='columns')","6268c983":"data.groupby(['OCCUPANCY_STATUS'])['ORIGINAL_LOAN_TO_VALUE'].describe()","83e93f0d":"data['REFINANCE_IND'] = 0\ncond = (data.LOAN_PURPOSE != 'P')\ndata.loc[cond, 'REFINANCE_IND'] = 1","2884cebd":"bar_plot(data, 'REFINANCE_IND',\n         title=\"Refinance Indicator distribution\")","99d09835":"pd.crosstab(data.REFINANCE_IND, data.DELINQUENT, normalize='index').sort_values(by=1, ascending=False)","61f050a2":"print(\"Number of unique values: {}\".format(len(data.ORIGINAL_LOAN_TERM.unique())))\nprint(\"Number of missing values: {}\".format(data.ORIGINAL_LOAN_TERM.isnull().sum()))","c7206c71":"exp_num_cols(data, 'ORIGINAL_LOAN_TERM', \n             title=\"Loan Term distribution, Default vs. No Default\",\n             x_label='Loan Term')","f3542148":"data.ORIGINAL_LOAN_TERM.value_counts(normalize=True, ascending=False)[:5]","ff7c3c8a":"print(\"Number of unique values: {}\".format(len(data.NUMBER_OF_BORROWERS.unique())))\nprint(\"Unique values: {}\".format(data.NUMBER_OF_BORROWERS.unique()))\nprint(\"Number of missing values: {}\".format(data.NUMBER_OF_BORROWERS.isnull().sum()))","530d8744":"# Investigate missing values\ndata.loc[data.NUMBER_OF_BORROWERS.isnull(), 'DELINQUENT'].value_counts()","03175a5a":"# Replace missing values with 'Not Available'\ndata.NUMBER_OF_BORROWERS.fillna(value='Not Available', inplace=True)","9a617bcc":"cond = (data.NUMBER_OF_BORROWERS != \"Not Available\")\ndata.loc[cond, 'NUMBER_OF_BORROWERS'] = data.loc[cond, 'NUMBER_OF_BORROWERS'].astype(int)","87e205ec":"# Convert data type of column to 'category'\ndata.NUMBER_OF_BORROWERS = data.NUMBER_OF_BORROWERS.astype('str')","49f895c4":"data.NUMBER_OF_BORROWERS.value_counts(normalize=True, ascending=False)","98c7141d":"data.groupby(['NUMBER_OF_BORROWERS'])['ORIGINAL_LOAN_TO_VALUE'].describe()","b2ed85ed":"# Get list of numerical columns\nnum_cols = data.select_dtypes('float64').columns\nnum_cols","107f72a0":"# Correlation heatmap\nplt.figure(figsize=(16, 6))\ndf_corr = data[num_cols].corr()\nax = sns.heatmap(df_corr, annot=True)\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\nplt.yticks(rotation=0)\nplt.show()","87b5b7e8":"# Get list of categorical values\ncat_cols = data.columns[~data.columns.isin(num_cols)]\ncat_cols = cat_cols.drop(['POSTAL_CODE'])\ncat_cols","72389d4d":"# Calculate Theil's U\ncat_corr = {}\nfor i in cat_cols:\n    cat_corr[i] = []\n    for j in cat_cols:\n        cat_corr[i].append(np.round(theil_u(data[i], data[j]), 3))\n\ncat_corr_df = pd.DataFrame(cat_corr, index=cat_cols)","dd5d48a7":"# Thiel's U heatmap\nplt.figure(figsize=(16, 6))\nplt.title(\"Thiel's U\")\nax = sns.heatmap(cat_corr_df, annot=True)\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\nplt.yticks(rotation=0)\nplt.show()","64cb5405":"# Define the list of columns to one-hot encode\ncategorical_feats = ['FIRST_TIME_HOMEBUYER_FLAG', 'OCCUPANCY_STATUS', 'CHANNEL',\n                     'PROPERTY_TYPE', 'LOAN_PURPOSE', 'NUMBER_OF_BORROWERS']","ff8fce69":"# Create a copy of the original dataset\nfeat_data = data.copy()","8871b5a9":"# One-hot encode the categorical features\nenc = OneHotEncoder(sparse=False)\nenc.fit(feat_data[categorical_feats])\nencoded_data = enc.transform(feat_data[categorical_feats])","654aaf2a":"# Get encoded colmun names\nenc_col_nm = pd.get_dummies(feat_data[categorical_feats],\n                            prefix=categorical_feats).columns\nenc_col_nm","237bff5b":"encoded_data = pd.DataFrame(encoded_data, columns=enc_col_nm)\nfeat_data.drop(columns=categorical_feats, inplace=True)\nfeat_data = pd.concat([feat_data, encoded_data], axis=1)","ee2bec49":"feat_data.head()","4bc24ff9":"# Split the dataset\ntest_size=0.2\ntrain_data, test_data = train_test_split(feat_data, random_state=SEED, stratify=feat_data.DELINQUENT,\n                                         test_size=test_size)","a225f794":"# Prepare the train dataset\ntrain_x = train_data[train_data.columns[~train_data.columns.isin(['DELINQUENT'])]]\ntrain_y = train_data.DELINQUENT","e5ef4774":"# Prepare the test dataset\ntest_x = test_data[test_data.columns[~test_data.columns.isin(['DELINQUENT'])]]\ntest_y = test_data.DELINQUENT","b7cf3b50":"# Define the model\ndc = DecisionTreeClassifier(max_depth=10, min_samples_split=10, min_samples_leaf=10,\n                            random_state=SEED, class_weight=\"balanced\")","aaed9957":"# Define a scorer\nrs = make_scorer(recall_score)\n\n# Cross validation\ncv = cross_val_score(dc, train_x, train_y, cv=5, n_jobs=-1, scoring=rs)\nprint(\"%0.2f recall with a standard deviation of %0.2f\" % (cv.mean(), cv.std()))","8a4b10bb":"# Fit the model\ndc.fit(train_x, train_y)","9dee9427":"# Get predictions from the test dataset\npred = dc.predict(test_x)\nprint(\"The test recall score is {}\".format(np.round(recall_score(test_y, pred), 2)))","9061849f":"plt.title(\"Confusion matrix\")\nax = sns.heatmap(confusion_matrix(test_y, pred), annot=True, fmt='d')\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\nplt.yticks(rotation=0)\nplt.xlabel(\"Predicted Labels\")\nplt.ylabel(\"Actual Labels\")\nplt.show()\nprint(classification_report(test_y, pred))","2fe1d4cd":"# fbeta score\nprint(\"F-Beta Score: {}\".format(np.round(fbeta_score(test_y, pred, beta=2, average='weighted'), 2)))","f5dfbebb":"# Create the SHAP explainer instance\nexplainer = shap.TreeExplainer(dc, train_x)\nshap_values = explainer.shap_values(train_x)","bad012db":"# SHAP summary plot\nfig, ax = plt.subplots()\nfig.set_size_inches(18, 8)\nshap.summary_plot(shap_values[1], train_x)\nplt.show()","9f6895e5":"# Sample a data point\nsample_loan = train_x.sample(n=1)\nsample_index = sample_loan.index\nsample_loan.head()","5f2e0cf6":"# Effect of featuer values on model prediction\nshap.force_plot(explainer.expected_value[1], shap_values[1][sample_index, :], train_x.iloc[sample_index,:])","fb984f55":"### Explore Number of Borrowers","2238c493":"- Loans for investment properties have the highest default rate.","870b9ae2":"### Explore the relationship between Number of Units and Property Type","71fada6a":"### Explore Property Type","1cb430b2":"The loan to value is evenly spread across 1, 2, or more than 2 borrowers.","aea53f9b":"- On average, a borrower requests for a loan that is 75% of the value of the property.\n- When loan to value is greater than 80%, the likelihood of a loan default increases. Borrowers who tend to take a loan the same amount as the value of the property tend to default more. This is interesting since 50% of the loans have values greater than 80%.\n- The distribution is skewed to the left. Additionally, the distribution is resembles a bi-modal distribution. We can see a peak at 78-80% and 90-95%.","db5e1c59":"- Majority of the investment properties, owner occupied and second homes are single unit homes. This is expected, since single unit homes account for almost 98% of the data points.\n- Borrowers who want to purchase their second home are looking for either single unit or double unit homes.","e0d96fa6":"We have 9 missing values. We will fill in the missing values with the median.","e1a446be":"- R: Retail\n- B: Broker\n- C: Correspondent\n- T: Third Party Organization Not Specified\n\nObservations:\n- Majority of the loans do not have the third party organization specified by the seller.\n- The next popular option is for a borrower to directly go to the lender or one of its affiliates.","d11596db":"## What can we do to improve our solution as we advance?\n\n### Data collection\nThe dataset provided to us has limited variables, but the model was able to perform reasonably well. It would be beneficial to the business if we can collect the following information -\n- Specific information about the borrower such as current address, past loan information, dependents and occupation.\n- Public information on the property areas such as average household income, population, average family size, current job rate, perecentage of homes owned, average percentage of mortgage loans defaulted, average cost of single family homes, types of public transportation available, number of schools in the area, average rank of schools in the area, crime rate, and number of hospitals.\n\n### Feature Engineering\n- Instead of one-hot encoding, perform binary encoding, frequency encoding, weight of evidence, etc.\n- Create features from summary statistics such as frequency for categorical data and mean, median, mode, skewness, and kurtosis for numerical features.\n- Discretize credit score, loan to value and debt-to-income ratio.\n- Apply PCA and append the principal components to the feature matrix. \n- Pass the feature matrix through an autoencoder to encode the features into a latent space and append the encodings to the feature matrix.\n\n### Improve model performance\n- Hyperparameter tuning.\n- Ensemble techniques such as boosting, bagging or stacking. \n- Try more complex models such as neural networks.","f4d051eb":"- 91% of the home mortgages are where the homes will be occupied by the owner.","bca831b9":"### How to read the above figure?\n\nThe above figure displays the contribution of each feature value on the base value of our model predictions. Base value is the average model output over the training dataset. Feature values that push the prediction value higher are shown in red and those pushing the predictions lower are shown in blue.\n\nSample various data points to observe the effects of the features on the model prediciton.","f2b8234c":"- From the above plot we can see that as the combined loan to value increases, the likelihood of defaulting on the loan increases. This is expected.","2d01ecb6":"### Explore Occupancy Status","d565b24c":"- CO: Condo\n- PU: Planned Unit Development\n- MH: Manufactured Housing\n- SF: Single-Family\n- CP: Cooperative share\n- LH: Leasehold\n\nObservations:\n- Single family homes are the most popular option amongst borrowers by a large margin.","033dfdd3":"# Explore the influence of variables on delinquency\n\nLet's determine which factors influence the chances of a borrower defaulting on the loan. **We will perform this analysis using SHAP!**\n\n### What is SHAP???\n\nSHAP (SHapley Additive exPlanations) leverages coalitional game theory concepts to help explain the feature contributions of any machine learning model.\nBelow are resources to learn more about SHAP:\n- [A Unified Approach to Interpreting Model Predictions](https:\/\/proceedings.neurips.cc\/paper\/2017\/file\/8a20a8621978632d76c43dfd28b67767-Paper.pdf)\n- [SHAP - Github](https:\/\/github.com\/slundberg\/shap)\n- [SHAP](https:\/\/christophm.github.io\/interpretable-ml-book\/shap.html)\n- [Shapley values](https:\/\/christophm.github.io\/interpretable-ml-book\/shapley.html#shapley)\n\nShapley values corresponding to a specific value of a feature is the contrbution of that feature value towards the model prediction. We will use the shapley values to study the influence of various variables on predicting delinquency.","e907cdeb":"### Explore relationship between Occupancy Status and Number of Units","160d788c":"- 97% of the loans are for houses with just 1 unit.","a89cacf1":"### Explore Metropolitan Statistical Area (MSA)\n\nAn MSA is generally with a population of 2.5 million or more. It may be divided into smaller groups of counties that the United States Office of Management and Budget refers to as Metropolitan Divisions.","6f25c2e6":"- None of the variables provide any information about delinquency. It is going to be a challenge for the model to predict delinquency given the variables.\n- We can see a strong relationship between loan purpose and refinance indicator. This is expected because we created refinance indicator from loan purpose.","6728a972":"### Create Refinance Indicator column\n\nFrom occupancy status, we know which mortgages are refinance mortgages, let's create a new column to indicate this information.","d59077a5":"- Almost all of the values are 360 months.\n- The shortest loan duration is 301 months.","ce34e0b9":"### Explore the relationship between Combined Loan to Value and Number of Units","4887309e":"### Prepare the Delinquent label\n\nFor each loan we know if the loan has been prepaid or is delinquent. We can leverage the information available in these two columns to determine the delinquency label for each loan. ","7df40a36":"Let us investigate the missing values.","e47d5f9f":"The test and cross-validation error are similar. This is good! There is no overfitting. We may be able to improve the model performance. We can try various methods like:\n\n- hyperparameter tuninig\n- try other feature engineering techniques like binary encoding, frequency encoding, etc.\n- train the model only on a subset of the features\n- try other imputation techniques, or use missing value indicators\n- use more complex models such as neural networks","b5408e1f":"## Define the scoring metric\n\nWe will use `Recall` to measure the performance of the model.","ff0f6952":"### Explore Postal Code\n\nDescription of postal code from the data dictionary - `###00, where \u201c###\u201d represents the first three digits of the 5-digit postal code`. We do not have the complete postal code.","3f8314d3":"# Drop irrelevant columns\n\nThe dataset used contains information that is unavailable at the time of loan application. We will drop these columns before starting with our analysis. The columns we will drop are:\n\n- FIRST_PAYMENT_DATE\n- MATURITY_DATE\n- MORTGAGE_INSURANCE_PERCENTAGE\n- ORIGINAL_UPB\n- ORIGINAL_INTEREST_RATE\n- PREPAYMENT_PENALTY_MORTGAGE_FLAG\n\nOther columns we will drop are:\n\n- We will drop `PROPERTY_STATE` as this information is encoded in the MSA column.\n\n- `LOAN_SEQUENCE_NUMBER` is a unique id assigned to each loan. As it provides no information we will drop this column.\n\n- `SELLER_NAME` and `SERVICER_NAME` are dependent loan activity and since this information is not available at the time of loan request we will drop these columns.","589e57ce":"The default rates for refinanced and purchase loans are similar.","6a115c4b":"The loan defaults are quite spread through the debt-to-income ratio. ","75602f7c":"### Explore the Debt to Income Ratio","06a7691f":"Manufactured housing has the highest default rate. It is almost six times the average default rate.","08e28749":"## Model training\n\nWe will select the Decision Tree classifier as our model to predict `Delinquency`.\n\n- The model is easy to interpret.\n- It is scale invariant.","cf033d62":"We can use MSA to extract economic data associated to the metropolitan area. We could leverage external information such as average household income, population, average family size, current job rate, perecentage of homes owned, average percentage of mortgage loans defaulted, average cost of single family homes, types of public transportation available, number of schools in the area, average rank of schools in the area, crime rate, and number of hospitals. ","e4fbb206":"### Explore relationship between Loan Purpose and Occupancy Status","ed4d9e6e":"### Explore Product Type","a16e95df":"## Helper functions","1977b20c":"Let us check if there are loans where the status is prepaid and delinquent. If such values exist we will give preference to the prepaid status. Why? A loan is labeled as delinquent if a payment is late by 1 day. We will give the customer up to 30 days to make the payment. We will only regard a loan delinquent, if the payment is late by more than 30 days. ","ee20de16":"The combined loan to value is more or less evenly spread through homes with units 1, 2, 3 and 4.","2771c874":"We do have some missing values. Can we drop these rows? Before we do that, let us check if we are lossing any vital information.","e181c6e4":"According to the data dictionary, a value is missing because the area is not a metropolitan area or the value is unknown. Since, we are not sure what the value could be, we will fill the missing values with `Unknown`.","06a9fba6":"- Majority of the borrowers are not first-time home buyers.\n- We also have some missing values. According to the data dictionary, if the loan transaction is for an investment property, for a second home and or refinancing then missing values are assigned. So, what is the purpose of `N`? \n- We will fill the missing values with `N` because `N` and missing values are serving the same purpose.","117c42a9":"The loan to value is spread evenly across the various occupancy statuses. ","f2d65665":"### Explore relationship between Occupancy Status and Loan to Value","917c2cbc":"- Combined loan to value and loan to value are almost perfectly correlated. This is expected. \n- As loan to value decreases there is a slight increase in credit score. \n- The other variables are weakly correlated. Knowing one variable does not give much information about the other.","5f25bffa":"Let us sample a data point from the training dataset and observe the effects of each feature value on the model prediction.","4ad506fc":"- Almost all of the condos are single unit condos.\n- All cooperative share homes are single unit homes.\n- Earlier, we learned that single unit homes are a very popular option. It is very evident for each property type.","1bd65ad9":"### Explore the correlations between the categorical features\n\nWe will use Thiel's U to quantify the relationship between the categorical features.\n\n- Theil's U is an uncertainty coefficient that is based on information theory.\n- It essentially tells us the likelihood of x given y. This probability measure makes Theil's U interpretable.\n- Moreover, this measure is not symmetric, p(x|y) != p(y|x). This gives us additional information about the relationship between x and y.","1cc38417":"# Predict loan default","94b81d22":"By removing the rows we are not be losing any vital information.","d92ca938":"First-time home buyer is a weak predictor of loan delinquency. Whether the borrower is a first-time home buyer or not, the default rate is similar.","a741a458":"- The broker channel has the highest loan default rate.\n- This is interesting. If loans are requested from channels other than the lender, the default rates tend to be higher. ","2313dc9d":"- Brokers and correspondents tend to have a higher minimum for loan to value. Probably they want the loan to value percentage to be above a threshold that makes the business deal valuable for them.","79cb1521":"- Purchase is the popular option for all occupancy statuses.\n- Refinance options are popular for investment properties and owner occupied properties.","5de47305":"- P: Purchase\n- C: Refinance - Cash Out\n- N: Refinance - No Cash Out\n\nMajority of the loans requested are for purchasing a property.","8e840942":"## Data Exploration","24c44e6d":"When the combined loan to value is greater than 90% the loan default rate is twice that when the loan to value is less than 90%.\n\nNext, we need to deal with missing values. Since we have only 12 missing rows, we will fill in the missing values with the median.","120097f4":"The default rate is quite similar across loan purpose.","1d76425c":"- From the above plot we can see that as credit score increases the likelihood of defaulting on the loan decreases. This is expected. A higher credit score indicates the borrower is relatively more capable of paying off the loan.\n- For credit score 500-690, the likelihood of defaulting on a loan is higher.\n- For credit score 690-800, the likelihood of not defaulting on the loan is higher.","c2c498b5":"If we decide to drop the rows we will be losing vital information on delinquent loans. We will fill in missing values with `Not Available`.","033dc3ab":"# Introduction\n\nBefore we begin with any data analysis, let us set up the business context first. \n\n### Company X offers home loans. The customer submits a loan application, and Company X wants to determine if the borrower will default on the loan. If Company X determines the borrower is likely to default on the loan, then Company X will deny the borrower's loan application.","34c7587c":"### Explore Loan Term","a0a43cd1":"We cannot remove the rows with missing values since we will be likely to lose vital information. Instead, we will replace the missing values with `Not Available`.","31dd9c1e":"Since we are loosing vital information, we will drop the rows with missing values.","5357dd75":"Higher the debt-to-income ratio, higher is the likelihood of a loan default. But for values between greater than 52% the likelihood of defaults and no defaults are similar.","69a7050c":"### How do we read the above plot?\n\nWe have a ranked list of features on the right-hand side of the plot. The dots on the plot represent each data point in our training dataset. The color of the dot represents the magnitude of the corresponding feature value. The x-axis is the SHAP values. SHAP values are the effect that each feature value of each data point has on the model's output.\n\n### Observations\n\n- Credit Score is the strongest predictor of loan delinquency. As the credit score decreases, it increases the likelihood of the borrower defaulting on the loan.\n- Postal Code, loan to value, number of borrowers = 1 and metropolitan statistical area are other strong predictors of loan delinquency.\n- The location of the property does have a considerable effect on loan delinquency. As next steps, we must investigate the economic conditions of the property locations that have a high default rate.\n- As loan to value increases, the likelihood of loan delinquency increases. We observed this pattern earlier. \n- If the number of borrowers is 2 or greater, it reduces the likelihood of loan delinquency. This makes intuitive sense - as the number of borrowers increases, the sources of capital are greater and hence the chance to pay off the loan also increases.\n- I expected debt-to-income ratio to be one of the top predictors of loan delinquency. \n- Property type, occupancy status and number of units are weak predictors of loan delinquency.","865fefa0":"### Explore relationship between Debt-to-income ratio, Credit Score and Delinquency","01489197":"### Explore Number of Units","215a3f51":"### Explore First Time Buyer Flag","58890e34":"- Majority of the loans have two or more borrowers.","08ceb955":"- O: Owner occupied\n- I: Investment property\n- S: Second home","f859f154":"Borrowers from MSA 41900 have a high likelihood to default on their loans. MSA 41900 is the San German-Cabo Rojo Metro Area in Puerto Rico.","9a4cf32c":"### Explore Loan Purpose","dcf5fa35":"## Encode categorical features","237f7941":"The F-beta score is a weighted harmonic mean between precision and recall, and is used to weight precision and recall differently. \n\nWe assign `beta=2` to place more emphasis on recall. We are making the assumption that the cost associated with a false negative is significantly higher than the cost associated with a false positive. Therefore, we focus on maximizing the recall and minimizing losses.","1d1065d5":"I expected to see loans with a high debt-to-income ratio to have a higher than average default rate.","0920f57c":"### Explore Number of Borrowers and Loan to Value","edf7975c":"- Almost all of the loan defaults are when loan to value is greater than 50%. This makes intuitive sense. Customers who request for loans that are relatively a small percentage of the value of the property tend to be better borrowers because they have the capability (to accrue the required capital over time) to pay off the loan.\n- As the loan to value decreases the variance in the credit score decreases as well. For loan to value less than 20%, the credit score ranges between 600 and 800. ","86df4915":"Since this column has the same value for all rows, it provides no useful information to us. Let us drop this column.","ececad08":"Great! So far, we have performed a deep-dive analysis of the dataset and found interesting patterns. Next, we will build a machine learning model to predict the likelihood a borrower will default on a loan at the time of requesting the loan.","6ad53268":"### Explore relationship between Channel and Loan to Value","6d3d7ae3":"### Explore Loan To Value\n\nEarlier, we had explored Combined Loan to Value. So how is that different from Loan to Value?\n\nThe main difference between the two lies in the numerator. Combined loan to value is the original mortgage loan amount on the note date plus any secondary mortgage loan amount disclosed by the Seller by the property's appraised value. Whereas, loan to value  is the original mortgage loan amount on the note date by the property's appraised value","d6d77a43":"### Explore Channel","a6b9d025":"## Test the classifier","da75d366":"We have over 14,000 missing values. From the data dictionary we learn that the missing values are where debt-to-income ratios are greater than 65%.\n\nWe will fill the missing values with an indicator value such as `999`. Additionally, we will create a new column that indicates high debt-to-income ratio.","d4297891":"### Explore Credit Score","acc35a6b":"### Explore relationship between Loan to Value, Credit Score and Delinquency","1394a7c1":"- 93% of the single unit homes are going to be occupied by the owner.\n- 65% of the homes with 4 units are purchased primarily as investment properties.","536b8fd2":"### Explore Combined Loan To Value","3f3bcae9":"### Explore correlations between the numerical variables","b4af752f":"Some of the rows with missing values are loans that are delinquent. Since, there is a scarcity of this information in our dataset we cannot drop these rows. Instead, we will fill in the missing values with a missing value indicator, `0`."}}