{"cell_type":{"4d0887ae":"code","d1567d26":"code","5e25cc3c":"code","e5d8f9f3":"code","0a0a9924":"code","5bc5a842":"code","635253d4":"code","afdec101":"code","e1206976":"code","2a5a6c67":"code","6b86aba7":"code","e1118c3b":"code","595f7b97":"code","f5ba9b86":"markdown"},"source":{"4d0887ae":"import numpy as np \nimport pandas as pd \nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n\nimport math\nfrom sklearn import preprocessing, model_selection\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport scipy.stats as stats\n","d1567d26":"df_belem = pd.read_csv(\"..\/input\/temperature-timeseries-for-some-brazilian-cities\/station_belem.csv\")\ndf_curitiba = pd.read_csv(\"..\/input\/temperature-timeseries-for-some-brazilian-cities\/station_curitiba.csv\")","5e25cc3c":"#Quest\u00e3o 1\ndisplay(df_belem.shape, df_curitiba.shape)","e5d8f9f3":"#Quest\u00e3o 2\ndf_belem.set_index('YEAR',inplace=True)\ndf_curitiba.set_index('YEAR',inplace=True)\ndisplay(df_belem.head())\ndisplay(df_curitiba.head())","0a0a9924":"#exerc\u00edcio 3\n#plota o histograma dos valores \n#vemos que h\u00e1 v\u00e1rios outliers pr\u00f3ximos de 1000 que provavelmente n\u00e3o s\u00e3o valores de temperatura v\u00e1lidos\nplt.figure(figsize=(25,25))\n#df_belem.boxplot()\ndf_belem.hist()\n\n","5bc5a842":"#mostra a quantidade de valores \u00fanicos no m\u1ebds de janeiro\n#verificando os valores \u00fanicos confirmamos que o valor 999.90 \u00e9 o \u00fanico outlier\ndisplay(df_belem['JAN'].value_counts())\ndisplay(df_curitiba['JAN'].value_counts())","635253d4":"#exerc\u00edcio 4\n#para tratar os outliers, podemos excluir os dados ausentes (999.90) ou substitu\u00ed-lo pela m\u00e9dia do ano anterior e posterior.\n#adotarei a solu\u00e7\u00e3o de substituir os nulos pela m\u00e9dia.\n\n\n#cria um novo dataset transformando o outlier em nulo para aplica\u00e7\u00e3o das fun\u00e7\u00f5es de tratamento\ndf_belem_t = df_belem.replace(999.90,np.nan)\n#substitui os valores nulos restantes pela m\u00e9dia do ano anterior e posterior\ndf_belem_t = df_belem_t.fillna(df_belem_t.mean())\ndisplay(df_belem_t)\n\n#cria um novo dataset transformando o outlier em nulo para aplica\u00e7\u00e3o das fun\u00e7\u00f5es de tratamento\ndf_curitiba_t = df_curitiba.replace(999.90,np.nan)\n#substitui os valores nulos restantes pela m\u00e9dia do ano anterior e posterior\ndf_curitiba_t = df_curitiba_t.fillna(df_curitiba_t.mean())\ndisplay(df_curitiba_t)\n","afdec101":"#exerc\u00edcio 5\nplt.figure(figsize=(10,10))\nfig=plt.figure()\nax=fig.add_axes([0,0,1,1])\nax.scatter(df_curitiba_t.index, df_curitiba_t.JUL, color='r')\nax.scatter(df_belem_t.index, df_belem_t.JUL, color='b')\nax.set_xlabel('Ano')\nax.set_ylabel('Temperatura (\u00baC)')\nax.legend([\"Curitiba - Julho\", \"Bel\u00e9m - Julho\"])\nax.set_title('scatter plot')\nplt.show()","e1206976":"#quest\u00e3o 6\ndisplay(df_curitiba_t['JUL'].describe())\ndisplay(df_belem_t['JUL'].describe())\nstats.f_oneway(df_belem_t['JUL'], df_curitiba_t['JUL'])","2a5a6c67":"#exerc\u00edcio 7\ndf_curitiba_jan = pd.DataFrame(df_curitiba_t['JAN'],columns=['JAN'])\n#cria o dataset de previs\u00e3o com os valores dos 3 anos anteriores\ndf_curitiba_jan['A1'] = df_curitiba_jan['JAN'].shift(1)\ndf_curitiba_jan['A2'] = df_curitiba_jan['JAN'].shift(2)\ndf_curitiba_jan['A3'] = df_curitiba_jan['JAN'].shift(3)\n#dropa os primeiros anos (que n\u00e3o tem anos anteriores para montar o dataset)\ndf_curitiba_jan = df_curitiba_jan.dropna()\ndisplay(df_curitiba_jan.head())\n#separa em conjuntos de teste e treinamento\nX_train, X_test, y_train, y_test = model_selection.train_test_split(df_curitiba_jan.drop(columns=['JAN']),df_curitiba_jan['JAN'],test_size=0.25, random_state=33)\n","6b86aba7":"#realiza regress\u00e3o com o regressor de gradient boosting XGBoost\n#ele frequentemente apresenta resultados iniciais melhores que uma rede neural sem ajustes\nmodel = xgb.XGBRegressor()\nmodel.fit(X_train,y_train)\np_train = model.predict(data=X_train)\np_test = model.predict(data=X_test)","e1118c3b":"#calcula os erros de previs\u00e3o\ntrainScore = math.sqrt(mean_squared_error(p_train, y_train))\nprint('Pontua\u00e7\u00e3o para o treinamento: %.2f RMSE' % (trainScore))\ntestScore = math.sqrt(mean_squared_error(p_test, y_test))\nprint('Pontua\u00e7\u00e3o para o teste: %.2f RMSE' % (testScore))","595f7b97":"#plota o resultado previsto em rela\u00e7\u00e3o ao real\ndf_plot = pd.DataFrame({'YEAR': X_test.index, 'PRED': p_test, 'REAL': y_test}).reset_index(drop=True)\ndisplay(df_plot.sort_values(['YEAR']).set_index('YEAR'))\nplt.figure(figsize=(10,10))\nfig=plt.figure()\nax=fig.add_axes([0,0,1,1])\nax.scatter(df_plot['YEAR'],df_plot['PRED'] , color='r')\nax.scatter(df_plot['YEAR'],df_plot['REAL'] , color='b')\nax.set_xlabel('Ano')\nax.set_ylabel('Temperatura (\u00baC)')\nax.legend([\"Curitiba - Janeiro - Previsto\", \"Curitiba - Janeiro - Real\"])\nax.set_title('scatter plot')\nplt.show()","f5ba9b86":"Atrav\u00e9s da an\u00e1lise acima, identificamos que h\u00e1 v\u00e1rios outliers com o valor 999.90. \nMinha conclus\u00e3o \u00e9 de que estes n\u00e3o s\u00e3o valores de temperatura v\u00e1lidos, e devem ser eliminados ou substitu\u00eddos do dataframe."}}