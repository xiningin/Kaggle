{"cell_type":{"175f1ddf":"code","0b5eb459":"code","c5c3e86f":"code","0671655b":"code","90e43943":"code","9aad8914":"code","fa79a47e":"code","14881c3a":"code","871ed07d":"code","de886baf":"code","729be302":"code","064a2493":"code","c7de4048":"code","e1711fda":"code","34a29cd8":"code","e26a2462":"code","d7115f39":"code","6e0b59db":"code","e297149b":"code","e577e4ce":"markdown","a4a0d1df":"markdown","8fc52ff4":"markdown","012bf14f":"markdown","a20f7abe":"markdown","64ef024d":"markdown","1049ad9d":"markdown","d345d59c":"markdown","83c9a216":"markdown","e0b5b188":"markdown","657ce528":"markdown","37de42e0":"markdown","3c43b663":"markdown","e78d60ef":"markdown","922367c3":"markdown","ede41472":"markdown"},"source":{"175f1ddf":"import numpy as np               # linear algebra - vectors and matrices\nimport matplotlib.pyplot as plt  # visualization\nimport matplotlib.cm as cm       # visualization\nimport seaborn as sns            # visualization\n%matplotlib inline\nsns.set()","0b5eb459":"class fuzzy:\n    \n    def __init__(self,size_set,conjunto_x=None, conjunto_y=None):\n        \n        self.x = np.zeros(size_set)\n        self.y = np.zeros(size_set)\n        self.set = np.zeros((size_set,2))\n        self.size = size_set\n        \n        if conjunto_x:\n            self.set_x(conjunto_x)\n        \n        if conjunto_y:\n            self.set_y(conjunto_y)\n            \n        if conjunto_x and conjunto_y:\n            self.merge()\n        \n    def set_x(self, conjunto):\n        \"\"\"\n        seta o conjunto passado ao conjunto x - dominio\n        \"\"\"\n        for i in range(self.x.shape[0]):\n            self.x[i] = conjunto[i]\n            \n    def set_y(self, conjunto):\n        \"\"\"\n        seta o conjunto passado ao conjunto y - pertinencias\n        \"\"\"\n        for i in range(self.y.shape[0]):\n            self.y[i] = conjunto[i]\n            \n    \n    def merge(self,verbose=False):\n        \"\"\"\n        junta o conjunto x com y em um unico array\n        \"\"\"\n        for i in range(self.x.shape[0]):\n            self.set[i][0] = self.x[i]\n            self.set[i][1] = self.y[i]\n            \n        if verbose:\n            print(self.set)\n        \n    def get_y(self, x):\n        \"\"\"\n        obtem o valor da pertinencia do valor x passado\n        \"\"\"\n        for i in range(self.x.shape[0]):\n            if x == self.x[i]:\n                return self.y[i]\n        return 0\n    \n    def view_set(self,):\n        print(self.set)\n        \n","c5c3e86f":"def triangular(a,m,b,x=None, p=None, max_degree=None):\n            \"\"\"\n            define pertinence y of the triangular function from x values\n            a - primeiro valor conjunto\n            m - valor mediano do conjunto\n            b - \u00faltimo valor do conjunto\n            x - valor a ser calculado\n            \"\"\"\n            # IF x\n            if x:\n                if x <= a or x >= b:\n                    return 0\n\n                if x == m and max_degree != None:\n                    return max_degree\n\n                if x > a and x <= m:\n                    return ((x-a)\/(m-a))\n\n                if x > m and x < b:\n                    return ((b-x)\/(b-m))\n            else:\n                x_after = (p * (m-a))+a\n                x_before = (((p * (b-m))-b) * -1)\n                return x_after, x_before\n            \ndef trapezoidal(a,m,n,b,x,max_degree = None):\n            \"\"\"\n            define pertinence y of the trapezoidal function from x values\n            a - primeiro valor conjunto\n            m - primeiro valor com maximo valor de pertin\u00eancia\n            n - primeiro valor com maximo valor de pertin\u00eancia\n            b - \u00faltimo valor do conjunto\n            x - valor a ser calculado\n            \"\"\"\n                \n            if max_degree is None:\n                max_degree = 1\n\n            if x <= a or x >= b:\n                return 0\n            \n            if x >= m and x <= n:\n                return max_degree\n\n            if x > a and x < m:\n                return (x-a)\/(m-a)\n    \n            if x > n and x < b:\n                return (b-x)\/(b-n)","0671655b":"def plot_sets(conjuntos, labels, title=None, position=None):\n    \"\"\"\n     - fun\u00e7\u00e3o para plotagem dos conjuntos 2d\n     -- plota os conjuntos em um mesmo plano\n    \"\"\"\n    \n    #color = ['--bo','--go', '--ro', '--yo', '--po']\n    facecolors = [cm.jet(x) for x in np.random.rand(20)]\n    \n    fig, ax = plt.subplots(figsize=(8,5))\n\n    indice = 0\n    \n    for i in conjuntos:\n        \n        if 'area' in labels[indice]:\n            labels[indice] = labels[indice].split('area')[0]\n            plt.fill_between(i[:,0], i[:,1], alpha=0.4)  \n            ax.plot(i[:,0], i[:,1], label=labels[indice], linewidth=4)\n        else:\n            ax.plot(i[:,0], i[:,1], label=labels[indice])\n            \n        indice += 1 \n            \n    if position:\n        legend = ax.legend(loc=position, shadow=True, fontsize='x-large')\n    else:\n        legend = ax.legend(loc=9, shadow=True, fontsize='medium',\n                           bbox_to_anchor=(0.5, -0.1), ncol=len(labels))\n\n    # Put a nicer background color on the legend.\n    legend.get_frame().set_facecolor('#f2f2f2')\n    plt.title(title)\n    plt.grid(True)","90e43943":"# visualiza\u00e7\u00e3o dos conjuntos\ndef plot_tensor(tensor, labels=None,  subtitles='Nan', position=None, dim=[1,1], size=(15,4)):\n    \"\"\"\n     - fun\u00e7\u00e3o para plotagem dos conjuntos 2d\n     tensor.....: matriz de gr\u00e1ficos para plotagem\n     labels ....: objetos descritos de cada gr\u00e1fico\n     subtitles..: subtitle of each graphs\n     position ..: local legend\n     dim........: list 2d with firt position wor, and tow col\n    \"\"\"\n    \n    facecolors = [cm.jet(x) for x in np.random.rand(20)]\n    \n    fig, ax = plt.subplots(dim[0], dim[1], figsize=size)\n    fig.subplots_adjust(top=0.85)\n\n    indice = 0\n    \n    for row in range(dim[0]): # linha da matriz de graficos\n        \n        for i in range(dim[1]): # coluna da matriz de gr\u00e1ficos\n\n            if subtitles[0][i] != 'Nan':\n                ax[i].set_title(label=subtitles[0][i],loc='center')\n\n                \n            for j in range(tensor[i].shape[0]): # for que ploa os conjuntos\n                \n                if 'area' in labels[i][j]:\n                    labels[i][j] = labels[i][j].split('area')[0]\n                    ax[i].fill_between(tensor[i][j][:,0], tensor[i][j][:,1], alpha=0.4) \n                    ax[i].plot(tensor[i][j][:,0], tensor[i][j][:,1], label=labels[i][j], linewidth=4)\n                else:\n                    ax[i].plot(tensor[i][j][:,0], tensor[i][j][:,1], label=labels[i][j])\n                \n                        \n            if position:\n                legend = ax[i].legend(loc=position, shadow=True, fontsize='x-large')\n            else:\n                legend = ax[i].legend(loc=9, shadow=True, fontsize='medium',  \n                                      bbox_to_anchor=(0.5, -0.15), ncol=len(labels))\n            indice += 1\n\n    legend.get_frame().set_facecolor('#f2f2f2')\n    plt.grid(True)","9aad8914":"# Varia\u00e7\u00e3o da vendas V - definindo os conjuntos fuzzy\nvendas_dim = fuzzy(size_set=4,conjunto_x=[-100,-100,-50,0],conjunto_y=[0,1,1,0])\n\nvendas_est = fuzzy(size_set=3,conjunto_x=[-50,0,50],conjunto_y=[0,1,0])\n\nvendas_aum = fuzzy(size_set=4,conjunto_x=[0,50,100,100],conjunto_y=[0,1,1,0])","fa79a47e":"s_baixa = fuzzy(size_set=3,conjunto_x=[0,0,50],conjunto_y=[0,1,0]) \n\ns_media = fuzzy(size_set=3,conjunto_x=[0,50,100],conjunto_y=[0,1,0]) \n\ns_alta = fuzzy(size_set=3,conjunto_x=[50,100,100],conjunto_y=[0,1,0]) ","14881c3a":"i_ruim = fuzzy(size_set=3,conjunto_x=[0,0,50],conjunto_y=[0,1,0]) \n\ni_medio = fuzzy(size_set=3,conjunto_x=[0,50,100],conjunto_y=[0,1,0])\n\ni_bom = fuzzy(size_set=3,conjunto_x=[50,100,100],conjunto_y=[0,1,0])","871ed07d":"# \ntensor = np.array([[vendas_dim.set,vendas_est.set,vendas_aum.set],\n                       [s_baixa.set,s_media.set,s_alta.set],\n                        [i_ruim.set,i_medio.set,i_bom.set]])\n\nsubtitles = np.array([['Varia\u00e7\u00e3o das Vendas', 'Sobrecarga de Servi\u00e7os',\n                       'N\u00edvel de informatiza\u00e7\u00e3o']])\n\nlabels = np.array([['Diminuindo', 'Est\u00e1vel', 'Aumentando'],\n                  ['baixa', 'm\u00e9dia', 'alta'],\n                  ['Ruim', 'M\u00e9dio', 'Bom']])\n\nplot_tensor(tensor, labels=labels, subtitles=subtitles,\n            position=None, dim=[1,tensor.shape[1]])","de886baf":"r_ruim = fuzzy(size_set=3,conjunto_x=[0,0,50],conjunto_y=[0,1,0]) \n\nr_medio = fuzzy(size_set=3,conjunto_x=[0,50,100],conjunto_y=[0,1,0])\n\nr_bom = fuzzy(size_set=3,conjunto_x=[50,100,100],conjunto_y=[0,1,0]) \n\nplot_sets(np.array([i_ruim.set,i_medio.set,i_bom.set]),\n          ['Leve', 'M\u00e9dia', 'Forte'],\n          'Recomenda\u00e7\u00e3o de Investimento (R)') # visualizando os conjuntos","729be302":"\ntensor = np.array([np.array([vendas_dim.set,vendas_est.set,vendas_aum.set,\n                             np.array([[55,0], [55,1]], dtype='float32')]),\n                       np.array([s_baixa.set,s_media.set,s_alta.set,\n                                 np.array([[60,0], [60,1]], dtype='float32')]),\n                        np.array([i_ruim.set,i_medio.set,i_bom.set,\n                                  np.array([[85,0], [85,1]], dtype='float32')])])\n\nsubtitles = np.array([['Varia\u00e7\u00e3o das Vendas', 'Sobrecarga de Servi\u00e7os',\n                       'N\u00edvel de informatiza\u00e7\u00e3o']])\n\nlabels = np.array([['Diminuindo', 'Est\u00e1vel', 'Aumentando','Entrada'],\n                  ['baixa', 'm\u00e9dia', 'alta', 'Entrada'],\n                  ['Ruim', 'M\u00e9dio', 'Bom', 'Entrada']])\n# aumentando\nplot_tensor(tensor, labels=labels, subtitles=subtitles, dim=[1,3])","064a2493":"in_vendas_aum = trapezoidal(a=0,m=50,n=100,b=100,x=55)\nin_servi_alta = triangular(a=50,m=100,b=100,x=85)\nin_info_bom = triangular(a=50,m=100,b=100,x=60)\n\nin_servi_media = triangular(a=0,m=50,b=100,x=60)\nin_servi_baixa = 0\nin_info_ruim = 0","c7de4048":"# obtendo o valor da regra\nR1_mandani = min(in_vendas_aum,in_servi_alta,in_info_bom)\n\n# encontrando as novas coordenadas de x que valor da regra 1 define\nx_cob_inv = triangular(a=i_bom.x[0],m=i_bom.x[1],b=i_bom.x[2],p=R1_mandani)\n\n# corte do Mandani\ncorte_mandani = np.array([[0,R1_mandani],[100,R1_mandani]]) \n\n# \u00c1rea de corte do Mandani\nr1_area_mandani = np.array([[i_bom.x[0],i_bom.y[0]],[x_cob_inv[0],R1_mandani],\n                            [x_cob_inv[1],R1_mandani],[i_bom.x[2],i_bom.y[2]]])\n\n# calculando o valor das pertin\u00eancia com Larsen\ny_larsen = i_bom.y * R1_mandani\n\n# criando a \u00e1rea \u1e55ara o gr\u00e1fico\nr1_larsen = np.array([[i_bom.x[0],y_larsen[0]],[i_bom.x[1],\n                     y_larsen[1]],[i_bom.x[2],y_larsen[2]]])\n\n# Matriz multidimensional\ntensor = np.array([np.array([i_ruim.set, i_medio.set, i_bom.set,\n                             corte_mandani, r1_area_mandani]),\n                    np.array([i_ruim.set, i_medio.set, i_bom.set,\n                              r1_larsen])])\n\nsubtitles = np.array([[' Recomenda\u00e7\u00e3o de Investimento (R) - Regra 1 Mandani',\n                       'Recomenda\u00e7\u00e3o de Investimento (R) - Regra 1 Larsen']])\n\nlabels = np.array([['Leve', 'M\u00e9dia', 'Forte', ''+str(R1_mandani), 'Mandani area'],\n                  ['Leve', 'M\u00e9dia', 'Forte', 'Larsen area']])\n\nplot_tensor(tensor, labels=labels, subtitles=subtitles, dim=[1,2], size=(15,5))","e1711fda":"R2_mandani = min(in_vendas_aum,in_servi_media,in_info_bom)\n\n# econtrando as novas coordenadas de x que valor da regra 1 define\nx_cob_inv = triangular(a=i_medio.x[0],m=i_medio.x[1],b=i_medio.x[2],p=R2_mandani)\n\n# corte do Mandani\ncorte_mandani = np.array([[0,R2_mandani],[100,R2_mandani]])\n\n# \u00c1rea de corte do Mandani\nr2_area_mandani = np.array([[i_medio.x[0],i_medio.y[0]],[x_cob_inv[0],R2_mandani],\n                            [x_cob_inv[1],R2_mandani],[i_medio.x[2],i_medio.y[2]]])\n\n# calculando o valor das pertin\u00eancia com Larsen\ny2_larsen = i_medio.y * R2_mandani\n\n# criando a \u00e1rea \u1e55ara o gr\u00e1fico\nr2_larsen = np.array([[i_medio.x[0],y2_larsen[0]],\n                      [i_medio.x[1],y2_larsen[1]],\n                      [i_medio.x[2],y2_larsen[2]]])\n\n# Matriz multidimensional\ntensor = np.array([\n                    np.array([i_ruim.set, i_medio.set, i_bom.set,\n                              corte_mandani, r2_area_mandani]),\n                    np.array([i_ruim.set, i_medio.set, i_bom.set, r2_larsen])\n                ])\n\nsubtitles = np.array([[' Recomenda\u00e7\u00e3o de Investimento (R) - Regra 2 Mandani',\n                       'Recomenda\u00e7\u00e3o de Investimento (R) - Regra 2 Larsen']])\n\nlabels = np.array([['Leve', 'M\u00e9dia', 'Forte', ''+str(R2_mandani), 'Mandani area'],\n                  ['Leve', 'M\u00e9dia', 'Forte', 'Larsen area']])\n\nplot_tensor(tensor, labels=labels, subtitles=subtitles, dim=[1,2], size=(15,5))\n","34a29cd8":"R3_mandani = min(in_vendas_aum, in_servi_baixa, in_info_bom)\n\n# econtrando as novas coordenadas de x que valor da regra 1 define\nx_cob_i = triangular(a=i_ruim.x[0],m=i_ruim.x[1],b=i_ruim.x[2],p=R3_mandani)\n\n# -------------------------------------------------------------------------------------------\n\n# corte do Mandani\ncorte_mandani = np.array([[0,R3_mandani],[100,R3_mandani]])\n\n# \u00c1rea de corte do Mandani\nr3_area_mandani = np.array([[i_ruim.x[0],i_ruim.y[0]],[x_cob_i[0],R3_mandani],\n                            [x_cob_i[1],R3_mandani],[i_ruim.x[2],i_ruim.y[2]]])\n\n# calculando o valor das pertin\u00eancia com Larsen\ny3_larsen = i_ruim.y * R3_mandani\n\n# criando a \u00e1rea \u1e55ara o gr\u00e1fico\nr3_larsen = np.array([[i_ruim.x[0],y3_larsen[0]],[i_ruim.x[1],y3_larsen[1]],\n                      [i_ruim.x[2],y3_larsen[2]]])\n\n# Matriz multidimensional\ntensor = np.array([\n                    np.array([i_ruim.set, i_medio.set, i_bom.set,\n                              corte_mandani, r3_area_mandani]),\n                    np.array([i_ruim.set, i_medio.set, i_bom.set,\n                              r3_larsen])])\n\nsubtitles = np.array([[' Recomenda\u00e7\u00e3o de Investimento (R) - Regra 3 Mandani',\n                       'Recomenda\u00e7\u00e3o de Investimento (R) - Regra 3 Larsen']])\n\nlabels = np.array([['Leve', 'M\u00e9dia', 'Forte', ''+str(R3_mandani), 'Mandani area'],\n                  ['Leve', 'M\u00e9dia', 'Forte', 'Larsen area']])\n\nplot_tensor(tensor, labels=labels, subtitles=subtitles, dim=[1,2], size=(15,5))","e26a2462":"R4_mandani = min(in_vendas_aum, in_servi_media, in_info_ruim)\n\n# encontrando as novas coordenadas de x que valor da regra 1 define\nx_cob_inv = triangular(a=i_bom.x[0],m=i_bom.x[1],b=i_bom.x[2],p=R4_mandani)\n# -------------------------------------------------------------------------\n# corte do Mandani\ncorte_mandani = np.array([[0,R4_mandani],[100,R4_mandani]])\n\n# \u00c1rea de corte do Mandani\nr4_area_mandani = np.array([[i_bom.x[0],i_bom.y[0]],[x_cob_inv[0],R4_mandani],\n                            [x_cob_inv[1],R4_mandani],[i_bom.x[2],i_bom.y[2]]])\n\n# calculando o valor das pertin\u00eancia com Larsen\ny4_larsen = i_ruim.y * R4_mandani\n\n# criando a \u00e1rea \u1e55ara o gr\u00e1fico\nr4_larsen = np.array([[i_bom.x[0],y4_larsen[0]],[i_bom.x[1],\n                    y4_larsen[1]],[i_bom.x[2],y4_larsen[2]]])\n\n# Matriz multidimensional\ntensor = np.array([\n                    np.array([i_ruim.set, i_medio.set, i_bom.set,\n                              corte_mandani, r4_area_mandani]),\n                    np.array([i_ruim.set, i_medio.set, i_bom.set,\n                              r4_larsen])])\n\nsubtitles = np.array([[' Recomenda\u00e7\u00e3o de Investimento (R) - Regra 4 Mandani',\n                       'Recomenda\u00e7\u00e3o de Investimento (R) - Regra 4 Larsen']])\n\nlabels = np.array([['Leve', 'M\u00e9dia', 'Forte', ''+str(R3_mandani), 'Mandani area'],\n                  ['Leve', 'M\u00e9dia', 'Forte', 'Larsen area']])\n\nplot_tensor(tensor, labels=labels, subtitles=subtitles, dim=[1,2], size=(15,5))","d7115f39":"# Mandani\naggre_mandani = np.zeros(r1_area_mandani.shape)\n\npontos = [0,10,100,100]\n\nfor i in range(r1_area_mandani.shape[0]):\n    aggre_mandani[i][1] = max(r1_area_mandani[i][1],\n                        r2_area_mandani[i][1],\n                        r3_area_mandani[i][1],\n                        r4_area_mandani[i][1])\n    aggre_mandani[i][0] = pontos[i] ","6e0b59db":"# Larsen\naggre_larsen = np.zeros(r2_larsen.shape)\n\npontos = [0,50,100]\n\nfor i in range(r2_larsen.shape[0]):\n    aggre_larsen[i][1] = max(r1_larsen[i][1],\n                        r2_larsen[i][1],\n                        r3_larsen[i][1],\n                        r4_larsen[i][1])\n    aggre_larsen[i][0] = pontos[i] ","e297149b":"# Matriz multidimensional\ntensor = np.array([[i_ruim.set, i_medio.set, i_bom.set, aggre_mandani],\n                   [i_ruim.set, i_medio.set, i_bom.set, aggre_larsen]])\n\n\nsubtitles = np.array([[' Recomenda\u00e7\u00e3o de Investimento (R) - Agrega\u00e7\u00e3o Mandani',\n                       'Recomenda\u00e7\u00e3o de Investimento (R) - Agrega\u00e7\u00e3o Larsen']])\n\nlabels = np.array([['Leve', 'M\u00e9dia', 'Forte', 'Mandani area'],\n                  ['Leve', 'M\u00e9dia', 'Forte', 'Larsen area']]) # 'Larsen area'\n\nplot_tensor(tensor, labels=labels, subtitles=subtitles, dim=[1,2], size=(15,5))","e577e4ce":"### Fun\u00e7\u00e3o para plotar apenas um gr\u00e1fico","a4a0d1df":" * **R4** - Se V est\u00e1 aumentando e S \u00e9 m\u00e9dia e I \u00e9 ruim ent\u00e3o R \u00e9 **forte**.","8fc52ff4":"# Fuzifica\u00e7\u00e3o\n> ## Varia\u00e7\u00e3o das vendas (V)","012bf14f":"> ## N\u00edvel de informatiza\u00e7\u00e3o (I)","a20f7abe":"### classe do conjunto fuzzy - defini\u00e7\u00f5es e opera\u00e7\u00f5es","64ef024d":"### Fun\u00e7\u00f5es de Pertin\u00eancia -  Triangular a Trapezoidal","1049ad9d":"> ## Recomenda\u00e7\u00e3o de investimento (R) - CONSEQUENTE\ncom valores leve, m\u00e9dia e forte","d345d59c":"> ## Sobrecarga de servi\u00e7os (S)","83c9a216":"# Fuzzy Inference\n> ## Opera\u00e7\u00e3o com Antecedentes\n\nAqui definem-se quais ser\u00e3o os conectivos l\u00f3gicos usados para estabelecer a rela\u00e7\u00e3o fuzzy que modela a base de regras. Este m\u00f3dulo fornecer \u00e1 a sa\u00edda a ser adotada pelo controlador a partir de cada entrada. O m\u00e9todo de infer\u00eancia usa as t-normas e t conormas para traduzir matematicamente as senten\u00e7as da base de regras, que s\u00e3o ligadas pelos conectivos e e ou.\nIremos utilizar o m\u00e9todo de infer\u00eancia de Mamdani, que segue o seguinte procedimento:\n\n1. Em cada regra $Rj$ , da base de regras fuzzy, a condicional \u201cse $x$ \u00e9 $Ai$ ent\u00e3o $u$ \u00e9 Bi\u201d \u00e9\nmodelada pela aplica\u00e7\u00e3o \u2227 (m\u00ednimo);\n\n2. adota-se a t-norma \u2227 para o conectivo l\u00f3gico e;\n\n### Calculano a pertin\u00eancia dos antecedentes","e0b5b188":" * **R3** - Se V est\u00e1 aumentando e S \u00e9 baixa e I \u00e9 bom ent\u00e3o R \u00e9 **leve**.","657ce528":"### Regras com Mandani\n * **R1** - Se V est\u00e1 _aumentando_ e S \u00e9 _alta_ e I \u00e9 _bom_ ent\u00e3o R \u00e9 **forte**.","37de42e0":"# Modelagem de Sistemas Fuzzy\n\nUma determinada empresa utiliza um sistema baseado em regras fuzzy para dar suporte \u00e0 _tomada de decis\u00f5es_, sendo que um subconjunto das regras faz uma recomenda\u00e7\u00e3o sobre a necessidade ou n\u00e3o de investir na melhoria da informatiza\u00e7\u00e3o do setor em fun\u00e7\u00e3o de tr\u00eas par\u00e2metros: o crescimento das vendas, a sobrecarga de servi\u00e7os dos funcion\u00e1rios e o n\u00edvel atual de informatiza\u00e7\u00e3o.\n\n * As vari\u00e1veis de entrada do conjunto de regras e seus valores ling\u00fc\u00edsticos s\u00e3o:\n   * Varia\u00e7\u00e3o das vendas (V) com valores diminuindo, est\u00e1vel, aumentando\n   * Sobrecarga de servi\u00e7os (S) com valores baixa, m\u00e9dia, alta\n   * N\u00edvel de informatiza\u00e7\u00e3o (I) com valores ruim, m\u00e9dio, bom\n * A vari\u00e1vel de sa\u00edda do conjunto de regras e seus valores ling\u00fc\u00edsticos s\u00e3o:\n   * Recomenda\u00e7\u00e3o de investimento (R) com valores leve, m\u00e9dia e forte\n * A vari\u00e1vel de entrada Varia\u00e7\u00e3o das vendas tem dom\u00ednio [-100,100]. As demais vari\u00e1veis de entrada e a de sa\u00edda s\u00e3o definidas no dom\u00ednio [0,100], e todas indicam porcentagem.\n\n---\n### Entrada \n\nConsidere os seguintes valores num\u00e9ricos para as vari\u00e1veis iniciais do exerc\u00edcio:\n* V = 55, S = 60 e I = 85.\n* Fa\u00e7a a infer\u00eancia pelo m\u00e9todo de Mamdani e Larsen e represente o resultado graficamente.\n* Aplique no conjunto resultante o m\u00e9todo de defuzzifica\u00e7\u00e3o de centro de \u00e1rea e centro de m\u00e1ximos.","3c43b663":"# Cria\u00e7\u00e3o das Regras\n\n   * Varia\u00e7\u00e3o das vendas (V) com valores diminuindo, est\u00e1vel, aumentando\n   * Sobrecarga de servi\u00e7os (S) com valores baixa, m\u00e9dia, alta\n   * N\u00edvel de informatiza\u00e7\u00e3o (I) com valores ruim, m\u00e9dio, bom\n * A vari\u00e1vel de sa\u00edda do conjunto de regras e seus valores ling\u00fc\u00edsticos s\u00e3o:\n   * Recomenda\u00e7\u00e3o de investimento (R) com valores leve, m\u00e9dia e forte\n\n Tomando como base as vari\u00e1veis de entrada:  _Varia\u00e7\u00e3o das vendas_ (V),  Sobrecarga de servi\u00e7os (S), N\u00edvel de informatiza\u00e7\u00e3o (I)  produzindo a vari\u00e1vel de sa\u00edda: _Recomenda\u00e7\u00e3o de investimento_ (R).\n\nCriando as seguintes regras:\n\n * **R1** - Se V est\u00e1 aumentando e S \u00e9 alta e I \u00e9 bom ent\u00e3o R \u00e9 forte.\n * **R2** - Se V est\u00e1 aumentando e S \u00e9 m\u00e9dia e I \u00e9 bom ent\u00e3o R \u00e9 m\u00e9dia.\n * **R3** - Se V est\u00e1 aumentando e S \u00e9 baixa e I \u00e9 bom ent\u00e3o R \u00e9 leve.\n * **R4** - Se V est\u00e1 aumentando e S \u00e9 m\u00e9dia e I \u00e9 ruim ent\u00e3o R \u00e9 forte.\n \n ---\n \n ### Entrada \n\nConsidere os seguintes valores num\u00e9ricos para as vari\u00e1veis iniciais do exerc\u00edcio:\n* V = 55, S = 60 e I = 85.\n* Fa\u00e7a a infer\u00eancia pelo m\u00e9todo de Mamdani e Larsen e represente o resultado graficamente.\n* Aplique no conjunto resultante o m\u00e9todo de defuzzifica\u00e7\u00e3o de centro de \u00e1rea e centro de m\u00e1ximos.\n \n\n","e78d60ef":" * **R2** - Se V est\u00e1 _aumentando_ e S \u00e9 _m\u00e9dia_ e I \u00e9 _bom_ ent\u00e3o R \u00e9 **M\u00e9dio**.","922367c3":"## Agrega\u00e7\u00e3o -  Agregation","ede41472":"### Visualiando os conjuntos Fuzzy das vari\u00e1veis lingu\u00edsticas de entrada"}}