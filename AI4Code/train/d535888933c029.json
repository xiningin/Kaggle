{"cell_type":{"2e258f59":"code","4b45b164":"code","c57398d4":"code","098ea645":"code","5ef2dcf5":"code","acc619cb":"code","83166fed":"code","a6ce57c8":"code","608c2d8d":"code","3b527c02":"markdown","3b48dfc5":"markdown","7791218e":"markdown","5da368c2":"markdown","223fce4f":"markdown","920673fd":"markdown","936e0f15":"markdown"},"source":{"2e258f59":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","4b45b164":"dataset_train = pd.read_csv('..\/input\/nn5-final-dataset-01\/NN5_FINAL_DATASET_TRAIN.csv', header=0)\ndataset_test = pd.read_csv('..\/input\/nn5-final-dataset-01\/NN5_FINAL_DATASET_TEST.csv', header=0)\nX_train = dataset_train.iloc[:, 0:7].values\ny_train = dataset_train.iloc[:, 7].values\nX_test = dataset_test.iloc[:, 0:7].values\ny_test = dataset_test.iloc[:, 7].values\nN_test = X_test[:,0]\n\nprint(X_train[0])\nprint(y_train[0])","c57398d4":"# Xs = {}\n# Xn = {}\n# for j in range(7):\n#     Xs[j] = {}\n#     Xn[j] = {}\n#     for i in range(len(X_train)):\n#         d = X_train[i][j]\n#         v = y_train[i]\n#         if d in Xs[j]:\n#             Xs[j][d] += v\n#             Xn[j][d] += 1\n#         else:\n#             Xs[j][d] = v\n#             Xn[j][d] = 1\n# for j in range(7):\n#     for d in Xs[j]:\n#         Xs[j][d] \/= Xn[j][d]\n\n# titles = [\"name\", \"weekday\", \"day_of_month\", \"month_of_year\", \"year\", \"day_of_year\", \"week_of_year\"]\n# for i in range(7):\n#     plt.bar(Xs[i].keys(), Xs[i].values(), color=\"green\")\n#     plt.title(titles[i])\n#     plt.show()\n","098ea645":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\n\nindexs = [0, 1]\nindex1 = [i for i in range(len(indexs))]\nX_train = X_train[:, indexs]\nX_test = X_test[:, indexs]\n\nfor i in range(len(indexs)):\n    X_train[:, i] = LabelEncoder().fit_transform(X_train[:, i])\n    X_test[:, i] = LabelEncoder().fit_transform(X_test[:, i])\nprint(X_train[0])\ncolumnTransformer = ColumnTransformer([('encoder', OneHotEncoder(), index1)], remainder = 'passthrough')\nX_train = columnTransformer.fit_transform(X_train).toarray()\nX_test = columnTransformer.transform(X_test).toarray()\nprint(X_train[0])","5ef2dcf5":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train[0])","acc619cb":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nmodel = Sequential()\nmodel.add(Dense(64, activation='relu', input_dim=X_train.shape[1]))\nmodel.add(Dense(32, activation = 'relu'))\nmodel.add(Dense(16, activation = 'relu'))\nmodel.add(Dense(8, activation = 'relu'))\nmodel.add(Dense(1, activation = 'linear'))\nmodel.compile(optimizer = 'adam', loss = 'mse')\nmodel.summary()","83166fed":"model.fit(X_train, y_train, batch_size = 100, epochs = 20)","a6ce57c8":"y_pred = model.predict(X_test)[:,0]\nS_test = {}\nS_pred = {}\nfor i in range(len(y_pred)):\n    name_series = N_test[i]\n    if name_series not in S_test:\n        S_test[name_series] = [y_test[i]]\n    else:\n        S_test[name_series].append(y_test[i])\n    if name_series not in S_pred:\n        S_pred[name_series] = [y_pred[i]]\n    else:\n        S_pred[name_series].append(y_pred[i])\nfor name in S_test:\n    S_test[name] = np.array(S_test[name])\n    S_pred[name] = np.array(S_pred[name])\n        \n# for i in range(len(y_test)):\n#     print(\"Y=%s, Predicted=%s\" % (y_test[i], y_pred[i][0]))","608c2d8d":"def smape(a, f):\n    return 1\/len(a) * np.sum(2 * np.abs(f-a) \/ (np.abs(a) + np.abs(f))*100)\ntotal = 0\nfor name in S_test:\n    s_mape = smape(S_test[name], S_pred[name])\n    total += s_mape\n    #print(name, s_mape)\nprint(\"MEAN SMAPE:\", total\/len(S_test))","3b527c02":"* \u0110\u00e1nh gi\u00e1 k\u1ebft qu\u1ea3","3b48dfc5":"* L\u1ea5y d\u1eef li\u1ec7u dataset","7791218e":"* Ti\u1ebfn h\u00e0nh training","5da368c2":"* T\u1ea1o model b\u1eb1ng keras","223fce4f":"* V\u1ebd c\u00e1c bi\u1ec3u \u0111\u1ed3 theo name, weekday, ...","920673fd":"* S\u1eed d\u1ee5ng c\u00e1c thu\u1ed9c t\u00ednh: \n* Ti\u1ebfn h\u00e0nh m\u00e3 h\u00f3a d\u1eef li\u1ec7u sang d\u1ea1ng onehot","936e0f15":"* Chu\u1ea9n h\u00f3a d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o"}}