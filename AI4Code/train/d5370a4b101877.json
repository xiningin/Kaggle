{"cell_type":{"7c5ff804":"code","9b53580f":"code","fa8051e1":"code","dc617378":"code","3eea53a3":"code","70264357":"code","d62c9186":"code","3f02fb31":"code","a7af7f7f":"code","d18ed471":"code","e776c9ba":"code","4ee1ff34":"code","31c53033":"code","170eac88":"code","89958ee9":"code","c43a1929":"code","33299711":"code","f66cf333":"code","7a41c877":"code","ac757657":"code","279adc2d":"code","691c6859":"code","5cfcf07e":"code","1cb9b855":"code","451b351f":"markdown","54261842":"markdown","41a923a0":"markdown","d8d3ce16":"markdown","d7c7a466":"markdown","8a9924e1":"markdown","eb300032":"markdown","6c441a75":"markdown","bbf63f74":"markdown","2205546d":"markdown","443b3bcd":"markdown"},"source":{"7c5ff804":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAUEAAACdCAMAAAAdWzrjAAAAz1BMVEUtWJ3\/\/\/7\/\/\/8uWZ0qVpzy9PhCa6cgUZomVJsRS5fY3ulzjbru8fbR2OY6XaDp7PEASZgARJUAOpHIx97f5e\/4+fsAQpQAPpO3xduyvdUAQJQeT5nd4uwAPJKQocTByt1NbqjO1OWptdBWdKubq8oAM48\/ZKNkfrBogbK0v9Zaea6FmL+mpcp\/k7yPoMNHZ6U4Up2nsdDOzeEAKI1JYqRTaqg+WqEoPZZxgbRNYKRNWaKgoslrebF1j7uhsM21udUADocAGYkAIooAMI+SmsIwEGYFAAAXgElEQVR4nO1dD5+iONJmQuwkCAIu2GJs+duIuurOzey+c+9tu3u39\/0\/0yUkQVCwnZkeu\/uO57c7M0Ig4aFSValUgqb16NGjR48ePXr06NGjR48ePXr06NGjR48ePXr8eMDXbsB7B4peuwXvHHgU4tduw7sGxHODvnYj3jMgCYCFXrsV7xnOAvQMntvS640r2YFvYfC\/zXpD\/eQAHl154QOTwA\/fwCA+rfHszg2O4Rs3Ve7hrtFe3U2213CC3TxgBDIGv9aSkMP+shSiPK+1AO2jN22rUDrPGwfoHjxdwSC9S2zG34evl0EceaOLDJLC9tYVaXRo+lvn66q4KYjhNTotygdg+DwnbghASeDXM3hvDS5qQnznA+DnWLWHVQS25OvquCGcBDQYRLkHrmAQEl\/w9\/UMkgUwLzJI5lw3hEIIIbb4r4rQN4d7ZgtqDOpEN5ht6GYQq0e\/n38jg7MtuMwgY7i877Ck0NkIVRG\/MVUoXyh2MtZD5hWDcFKY\/I13MohTpcFQITvxlQyKGqGDE3CZQbwW0g1sF3K3YCB1xeJNqUK65n9ichdzvioZRHRXtr6bQWJVVodmX8MgTTGvUN\/Muf9zicGZpe6bMd1HEvVrEL2hfkyLGDNx2CeCLyWDJDWEXHUySLLBsce78fWWBGo\/zXQcBWZZwSUG6abSDr6G0fqobsO3Y0xQZIZIw4eB5EsyKAXwAoO08O0jgziX3e0Kf5Ac\/jbG6UBZ724G4chUlH0AK+pa1a8P4OmtUIiJAUJMskqPCQbhflC97nYGKXu6GoP6Q3gtgyj1fxqTQ3X\/bgad1ZGyD\/4yFTIr24nfxmgQQ+bJxdgNqucRDOLoGQZJxPycGoPM1b3So4bQAz+N8fJ5BuUtVTnvU6mobSnsifttj\/wSqBqsY4dJDmMQLf2mDGokvMAgRG7KhiANBqXVbGfwSJGOmcZkDGqaB55hELLuIUrIv4ZrbniepoJBkL9WFEgna9XEyZ4\/BmOw9MsaDELidepBxxmG5Ri4weCd2ckgrCwnnkTMdWQM6ujuOT3oSPsOEtEfwMBhQ+\/QJebVGvfHgA5j4UwhfBAPzRhkhrXJILMwPmhlEOoHW1qdOoMwtzsZzMNJGX9B9C7jd+UMas7hMoMwkkx5dKeo1Hywx3Qo+3HmPhfV+SFA1DdKBt2tJ4ngDGpIDCuAIVnR75N2BklQWZ06g9qoi0F9ktkP\/FmddSgMcMkgcyfBBQb1e6lHQEGQLOl\/TlZu2QIhk\/g1nELMBmoWZxAtKiLKySFn12SQycCg1R90Vfc+YVD3OhikS+CVjC2q8INgcHiJQVrIsmxIjCL1rksXBroyDvQaTiFmFkIwSI9EhPyhcSosgVH1DEHJGYN00S6DXQySO7tkUH84Dp5LBqE+6PaoITak3PEoAqn6Q8kZc0XFyeXNVSHCMQ8jlwyGTQY13T5hkMTtYxKylX5uUw9qc9Ci36FTMK0pZPAfTQY1Z97JIOv5so6MNxYj+TY9nZfVZwfZYW7sFEK6L4NDJYNS5ioG5Us\/Mqi7YceojuR2iyVpY5CNfbnpEAzCvRphKAbjTgZVDAHMy1\/7aKmMifACoZTQzU2FEDtD0W0sYUmyBoMaCk8YfPipa1ysNFiTQeOUQejmWWm2BYMaeWoySFadDJKpZKyMTpOpoV4nEKFBupZjaveGQohSS+pjwSBEKhgwLSmSzzO\/gkHluVxmEOLAlzUKBmUVRwaTLgbRWl4YcpFjYxOwkEFcFWt1hWYEu9sJIXmqeq0l\/cGRfJ6VYDC4WgY1fX4Fg3hVmRzJYBV+EAzSTgaVCh6UAUiXDyAflftYlBWolzh\/IXquAKnCHIrBKhggGUyuZ1A4aJf1INSPtlcyqN+vrmJQBabBhvvMDn+1YDWWTqE9K4sT4e3ccM5kZpwyqBr6gxjkbs8JgxoaNhj82M4gdKQZsbipRaXrAsB+rayz4MwV9RnkVpoQLY+BeMkgFvEEELwEg5U\/eNSDE\/ukFzMv3Qc1Bg\/tDFLpq5RmBE6k2d2OZZfxR6UxUW9jfbMAA9mdMiiDgCD5egaNKxhkToik8Mhgbj7PIP5VastVaUYWyvzh3KwbE6V4P96sG0NHhngrBtVDdzB4322L8VUMas7TCYNq8HxRDzpS1kyePQGxeMt+hHXlf8kWidAEMG4X5FI+9FEGhacPDu22eNbNIGxhUEUW6u6FjDIeGZQ0X2JQxVXBhmjHKELCYxNUxSIcfgXUBLd3t4svKB+hYhBeZHDS3Yu1c2+mlUE5U9TBYLs\/iGWQyOM0yVg5sHNepoo2LHglWHhj0r25CZxFk0H1PFnZBMVgxUrnqE5rYxC2MYjTiwwGLQxWcdUC8X4g27ATym4i49Ol3MkAo5DV20C+wqMMSq9UMijHJNcw2OZRSyPRYBBqwvaeMfjQxSAXuhKhFDNRERJFlG1iZ3WamjdnEO+bDKou0sGg8\/0ManTQymAw62KQLgyLw9hz7Ubl2O2geg3ZlPTaCXrMlaFf304PQigng8akhCO9M8EgnQoGMZEYX2DQk6JBKjiSwXhGagddyeAn+ZsK6hO3HlmgtSvI7FHAYf\/Gv0ktOGKXOg7\/fxxth\/mn\/\/t1Y1QTO+h2wQXoiIccGBKeaEOGjgx+8NVJwzKfYbBWlkEagIHRgHhM31K\/\/bLQR\/cog0z1dmA+lE5zQNj1lhWH4XS6WoXW3FbT9cchym0gBwmggmjDoc5g7WzD+2pjsF62GvGAloMfTm6Z1Rk8vaTCQHkvUXZ27oO6sanfcLKkFmev44TBs9MXGPxGgMw5ejPdpULViVFndQAMbxlj1e+NVgaTmh5sOd3C4Og7GVw4R4+6u9T2i\/SmI7+ryI2D1PokbmVw9bUyCJUd\/EZIGbzMIBvISYfvy661HOvLRnHjPEI3PFE8bQyeqZwLDHZpsG6Iy4QlUQx2qcHfxLyD\/3naet63NvjW053KwxsoSPdUMHh6UsLvZvCs7POQ\/XJS04NddzF+kT4TiX3WjAoD0\/as6WIL7+nN07cc4fKZ6Z2EaKJgEIuY3+DL3Qn082VOYtYN2NFp2ecQNcYksjldhYkM5OOcXxlFaYno7vPf\/\/\/vw1X8GonArmiyrWMBR05t8FAwhHL2do9PcP6iZUoL8DQMvwpYuuLhhN9GzXbijrtQOYMtzlfNcVemz3ux8woJhEIPAlsts3JlkKpkReSL1kZ1GhudtMfeeAJqWfYkskfJc\/1KDgdFsrbjSQY7LqpksLnKalbOOQL\/ZuH9Wt3CFgNPjoP0B9Fxy8QKFUaxVHuho212S6eNQzU90EwZIGS4e0IXdTuEskY+loUjX+q5jtJEziXkTapmcmT1CjIo\/UFgyCbrjzJgyIYI+kS6DlN5EtLSAnpt\/oKaoojr9JIN71v+4iKFSE7WBQ+67u6agY4zSEvjN0MHSMw4Ae\/+2ud+Oej3MhAvm6zPpDE0I9dV2XqZPElDEVgC6bkUqsBpWI\/oL2T55FJWn0wFZL6eO8llLsyqK52Xbk8iMyVU3DuevUL2oMgaA7Fqspp8AvbPH5WHtxSE0SpDw2qZEJfyejjKG9bUYhlwackWdGUp8+M\/VI2d8T0sY0d+Pd+X\/C4vW7xCCivEokWhens4Ui5u5ev6UrU5VWqXn54yok+kGNSGVKgaN8hhdjv0sXVW412nPlM5mtaIKnkjS9lXfsCaHEjJM\/dEkfRnq15Bais0xPOopMZaeuGZR63fyydbHs8cR2gyDaerDYXfrLKpTJuoJp2M3OVvFqPZUOUmv7w7CPEiWV4e5DhS7RVVm485\/PJxKoE7cguWZzL4KGQZ1B4CZVX54FL3Urq3qhFE3QxCVGXzh8tcH0XbedVpWtTzd4IZLgCWlyw8SuWY6lfYuKr+OJVmU3ni587EcZKsbg3RcX3I5XiTnCmtakwmFwqjooo6+rbn1eKqqxcfEZfLOQBYTBwEW1mErpryN+uU8NVMVSsrQ1yl6PJbnhGibGRQs7r6WOXSzcfPtBTF9Rov5uPr99VSoaPmLCt5+SR0sQiSz8EUOSwnHihFiI+CEOU\/UZ4pYxk25J\/+GtrlIMk3w6j2YlFqlxGQ1bmMIDnn2FCQUA\/L8tbouWfDZGPL6EsYPTOIgagt5ga8zy9OIDmKO7CNOMh2m22xTNlwPFovt5tFYJnVi182NQgm+XK7WGyW++YYjubZ3AtbprMh9trGChhvLM\/YaM8\/GySjYWIZq01En18+j0JwwiFfRf7iBKqknErcuyJzXATvT\/sN5HKKzkankDw8uC1NRXL8F5xIJ0Szh9l1ThpEZDZz0FU83O\/Mpq72s5cfEWPaGnxuA3MMrq0eEYTbQgXO9MyXkdD164cJ1xelOV+JrGCu9i8fFoRkdSWBAMSja70AJ\/3Dtq3N2WysmqePb5d15urDj+Hcto3px6H+A3LPMZq2ddcW+oC9eM7rrsBXr5WW4dRzFYt+Afhyw6WVkDpMzTBl4\/yIsDTWrNKumbZn27YIPrbPK8Q7eLUjD3Pl\/B+aqo3KgU146xAxbPfSXuDG++CwXfO0CJfBcZjmyqNiu1tkySqOrTJZwIpX2SYi7ldIjaMcMTBobOqEcxkWvVqdvn3o2CENqwYxpioVhZYuYfnr6xZQkWPielG7ORTpaAA8vbEdX34g4LdJf3tkgYpVPGyg8hrBufcFR40FgJ\/KN6BjshZd+JYpe+8WVO1iBCwpw\/hebEnDLPqtMwXeJ2gZtWEWXOZGobUY9wI7Q\/\/zG4VeB5rxkUAs90tEpXvo2+E2f4VZxncKgpbFXTUwzpdFsbyjsxtmjP4XANGjIwMpA4b6qW0Xv8\/sPYQn3pPMQ3j2mLxjy2F87lScVvKmoe\/5f2ysksNRbaNR\/mOU5\/u8+XgUp2leD+yw6zRWDNVHtfxadgyfjHTzET+6HzWl3dmnKWpaMDJKU70tevQ2kWf+YMFeehr6Xs3HhvvQX62LTWjWn5c+TYs0CDc1k5OGIE434bQWXIZRCML1wgob4T44tMGwGGZeI5APg0U6DMP6SAjvkvU6DM9DRG8UGNke7zPOEAT1bAE6BD9PMHWCWrICTs09xSTMagMXUoA\/xmQ\/iGvTz+zYxwey962Gez6OARtLkZEV1Upm1gyTqD6WREPzESM0v2Kb2DcC3Tb4w6NlM4cAF+Bnh2nH++JIg5P4fMrLrcsgXvK8S2cHfj8KHCr4MZKALzUh5OuYHK7iRrVsD91OHE2nxXGMrt8b1r90na7PphLfLI4MJmcMwryo63RyAJvTOJRgkOzqk6eMwYOr0xX4vVZWMMjIqt9Rt81RcxKCp3CtybsanTMGWadBZH3O4MRJds3ldD6IN1ojH6ZkEDqhXwv1MAaz8TgF9Z4tGKQjq5HKQDIwCJZuvRI0BGC6dd7R+FK3vaen7fZpccZgUKxO9tygyzkAg4Yp4AziNDDrS9IZg8EwHBwa4soZXG68ZvgMIr5Jp9eYiqZbGwDzNdJnvhFMBrmma+vFLklOHgRpy8CXi6VkuSVYpdth3hAj1otH3snGvqUM4t+aMqhBcjc0QCOHB5J8OH1PcTbJIG3Vg\/sC1T+JoEMNT\/a2rTfKfZydpBTzXjyDHkjrJCg9eLrwGqLHXdOIMa99XPjhu2IQdjDIHoauj6aT7HiWL1nVGRR2t3nL0pLwreFGJ7aYDb0h66WVeoTRE+H7Tg1qDJIFX4D8OH9ru3t3Av5ilkm\/ZCnXMkjQJ9aLIXT0o\/umT8IDEzdiJLVezPzGP8YnDJIh+DjWmeUO6yOLBwtgBNH9YlUxju+8PYVk7R\/zjfQHezuDzEvdvhMGob7w7SfGUR74Rn3mJLd8axmlO7uWxeZkVhbts7olgXnoG8uTe\/Jja6hNDH919J7hk+kf0qgI\/ONnPeB+ahX7dVjTebobWpu7u1X2TghkT7uOojXvT2mUpkcGy99rhqhmO5lIsmP7hs5i5aK0KYPlsbXO3g77R9VhdVYRv2Ma1Ray6BQv0zVsrJ\/HhJUavR9vplzPIf+Gp8fluRrO1qHA8zLHY43C7QtZID4PxJzfsUePHj169OjRo0ePHj169OjRo0eP\/zH8qEUCL4cf3MDvzd9CtVBknUye+dRI6Omu59nvelPUnnXJV462HW6uWKTq\/m0R1jJzzoEaX40gr6OXd1xRt1U14\/Uz3+B+7kaRFVdztfpxghZtRhjXo\/HwbLuECqPF5eQduhlmbY3E6zhu+boFXtc\/w02z0BBTvzA\/aQI7sM7ZS9gnEdnuMY7KcnhYZM8mE+E0lPsswH34nbtg8vmDHGrQIRodHreRzU0zWtYmAmlWrqcW2QEns7abOf8ua7U8nopN26tEAqgFh1Xz2+TyhL5MUzU9Usuzsp7wsRa4T9M1FE2Yl3kglcijjWFlk63phzm0B+nEKtOw8CEJy49qnCTenM40l8lNrJuh4nu3skUP4RBhGBwQinhukLivm8TOptpwHWMS8G\/G4YDwH+vml8YLG0K0WMldTtCGb+EB9QRqeFSm+0A6WrfOiEH0GA6xoOQ4QY5+0XhpKsmFZGQwFYL5fyLxUEmPxlflOt7mgUI3sahriAQ6sucrxSEKcJnvqQkNhLWc4GqmChKv3GgER9BZPS+yl4GTObvZyrYzpNu5Bu8gHu33ZJfMCk++OFQsnSx2sKbP2fuiofqoB2+ZrvNv0buZbcu17yTxI\/ZGRraGC9sMogdHJ5nRrkbJytoiHW2YJMxLXvijFnP7Cek0kXvM0jS29uxRh4jubMYjCQa8N0MdabqWD51gsCY63SSEhGKXB2z4OSs3Yg+DkkS0lP2eDxI6kdxj3bX4XChlbb0Pk+\/qxfoktHbJnwvvz39S7JijBy35FA2D9DEKnb0n3xlKTO3JIuuHT0E2\/rQKQ7HVCF2P8GQ2mY3nvy3NyZ9y1tv51yLQ0vGjtXz89fcAgMHhrwc6ECqMUL4pC2NBtJmExr8Pjw\/7+K\/JY8Dnx50weHzY2mA6ftx5gS2+b2Xv4nT2mG0eZ64fQbzMYj6RTINwNnncfvz0aQuK+3EUEnoIyo+YZWkYoGj2T6MYjyOe9oC2nvsw+rIAYFoKMczXeMLTO\/E6i8O\/ku\/btUL\/y\/Yt72828GJvfW8asTGIPc+MY2NKoKGUB4qXReh47Cg\/Y4Kp+FrYlslHHMbxwJgDM56XnQivYmP1mRW12f+xYYSmzUrYpb3D84zoYYLdqVjZmRsgZmctn5W0eUIG3QL2Tw\/Mw3huA4MvHcNfBv7UC2PeptjMIR2a85VT7pRmxLy1rPzAio2QoEXZAN0O4mFuqwbwzh6Z\/J+Wbftl16WbHDoHJnloaBrh4y74PksC8+Uom05X0ynrBwf2ZzBNpkEwnTK1vC0Fhz37w2odFZCVGbITo9G23HAcT12684AVJIvy+uld2bnYPYafp9PgiR0KvjiPQ3ZmmompYmPHGDxgJ5D7m40KXvdiwYukzH8iX4xgNU127NI12krTu1\/m7PQ2YX8c2BH931nGjAT6xV7Jo+luypuLlmUDtMBauHfsSMHbtOBeDjZYs1cb1gPK78JpIXTJgSvgEbuXuxx+pyWBCMuVnHwDwCOQ9Achc2sOBnuT\/CzfxBzicpED1O1Fnn+x7hwiLxPFeSnIr2f\/KEW1XCOqXDVWHWNKrWoq6+afoyXUwfoIFebW4buMUL6UVC2lwIjdQteRuA0lqbeEOU3N3YSImsv2I7zPhNfDrtbLBrCzzJnM8cgIx6wto41MYsDxwPIC3hSyN9OWRRIvDFwkRusXKFAG\/MH80te8YX5FXg+1LAPn1hMaLeKuddt46XmlXYHL3QqsyGgbgvnJRhc4CoumMKEwNHU8XA1MrkPQxpdGnJUMmS0s7xXcIg8doSJt5YFoqTa52AK4PN+E9ayMzqQcDiMIyV3RtWIMj6RDh\/bbwmFF8+J8vf\/pDgY4TYeUuYWFJrbadaqvIDvlYnN2r+FtvvgHu7YleX5J0DVrwEoXtKyidYwnC6kbYemwX3NnOWjsLCrv1aNHjx49evTo0aNHjx49evTo0aNHjx49evTo0aMD\/wFxH9ogJCGuKwAAAABJRU5ErkJggg==',width=400,height=400)","9b53580f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.offline as py\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fa8051e1":"import re # regular expression libary.\nimport nltk # Natural Language toolkit\nnltk.download(\"stopwords\")  #downloading stopwords\nnltk.download('punkt')\nfrom nltk import word_tokenize,sent_tokenize\nnltk.download('wordnet')\nimport nltk as nlp","dc617378":"df = pd.read_csv('..\/input\/hespress\/stories_art-et-culture.csv', encoding='utf8')\ndf.head()","3eea53a3":"cult_list=[]\n\nfor cult in df.story:\n    cult=re.sub(\"[^a-zA-z]\",\" \",cult) # if expression in the sentence is not a word then this code change them to space\n    cult=cult.lower() # turns all word in the sentence into lowercase.\n    cult=nltk.word_tokenize(cult) # splits the words that are in the sentence from each other.\n    lemma=nlp.WordNetLemmatizer()\n    cult=[lemma.lemmatize(word) for word in cult] # this code finds the root of the word for a word in the sentence and change them to their root form.\n    cult=\" \".join(cult)\n    cult_list.append(cult) # store sentences in list","70264357":"from sklearn.feature_extraction.text import CountVectorizer #Bag of Words\n\nmax_features=500 # \"number\" most common(used) words in cult\n\ncount_vectorizer=CountVectorizer(max_features=max_features,stop_words=\"english\") # stop words will be dropped by stopwords command\n\nsparce_matrix=count_vectorizer.fit_transform(cult_list).toarray()# this code will create matrix that consist of 0 and 1.","d62c9186":"sparce_matrix.shape ","3f02fb31":"sparce_matrix","a7af7f7f":"print(\"Top {} the most used word in Stories: {}\".format(max_features,count_vectorizer.get_feature_names()))","d18ed471":"data=pd.DataFrame(count_vectorizer.get_feature_names(),columns=[\"Words\"])","e776c9ba":"data.head()","4ee1ff34":"from wordcloud import WordCloud \nimport matplotlib.pyplot as plt\nplt.subplots(figsize=(12,12))\nwordcloud=WordCloud(background_color=\"black\",width=1024,height=768).generate(\" \".join(data.Words[100:]))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","31c53033":"df.story.value_counts()","170eac88":"X=sparce_matrix\ny=df.story","89958ee9":"from sklearn.model_selection import train_test_split,GridSearchCV,cross_val_score\nfrom sklearn.metrics import confusion_matrix,accuracy_score,classification_report,log_loss,precision_score\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.metrics import roc_auc_score,roc_curve\n\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)\nprint(\"x_train\",X_train.shape)\nprint(\"x_test\",X_test.shape)\nprint(\"y_train\",y_train.shape)\nprint(\"y_test\",y_test.shape)","c43a1929":"from sklearn.svm import SVC\n\nlgbm_model=LGBMClassifier()\n\nlgbm_model.fit(X_train,y_train)","33299711":"y_pred=lgbm_model.predict(X_test)","f66cf333":"print(\"Accuracy:\",accuracy_score(y_test, y_pred))\nprint(\"Precision:\",precision_score(y_test, y_pred,average=\"micro\"))","7a41c877":"xgb=XGBClassifier()\nxgb_model=xgb.fit(X_train,y_train)","ac757657":"y_pred=xgb_model.predict(X_test)\n\n\nprint(\"Accuracy:\",accuracy_score(y_test, y_pred))\nprint(\"Precision:\",precision_score(y_test, y_pred,average=\"micro\"))","279adc2d":"from sklearn.naive_bayes import BernoulliNB\n\nnb=GaussianNB()\nnb2=BernoulliNB()\n\nnb_model=nb.fit(X_train,y_train)\nnb2_model=nb2.fit(X_train,y_train)\ny_pred=nb_model.predict(X_test)\ny_pred2=nb2_model.predict(X_test)\n\n\nprint(\"Accuracy:\",accuracy_score(y_test, y_pred))\nprint(\"Precision:\",precision_score(y_test, y_pred,average=\"micro\"))\nprint(\"**************************************************************\")\nprint(\"Accuracy_NB2:\",accuracy_score(y_test, y_pred2))\nprint(\"Precision_NB2:\",precision_score(y_test, y_pred2,average=\"micro\"))","691c6859":"from sklearn.ensemble import RandomForestClassifier\n\n\nrf_model=RandomForestClassifier(random_state=42)\nrf_model.fit(X_train,y_train)","5cfcf07e":"y_pred=rf_model.predict(X_test)\n\nprint(\"Accuracy:\",accuracy_score(y_test, y_pred))\nprint(\"Precision:\",precision_score(y_test, y_pred,average=\"micro\"))","1cb9b855":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#2B3A67','#42a7f5','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Mar\u00edlia Prata, not a DS. Stick around, I will be right back. @mpwolke' )","451b351f":"#RandomForest Classifier","54261842":"#Data Preproccesing,cleaning,","41a923a0":"#NaiveNayes","d8d3ce16":"#Codes by Erdal Nayir https:\/\/www.kaggle.com\/erdal002\/natural-language-processing\/comments","d7c7a466":"#Bag of Words","8a9924e1":"#Hespress officiel \n\nIt is an Marocain e-journal.\n\nHespress est une source centrale d'informations et de nouvelles sur le Maroc.","eb300032":"#Spoiler alert: No missing values ","6c441a75":"Top 2000 the most used word and 1000 sentences that are in story(?).\n\nAs you see columns of the matrix consist of the most common words and rows of the matrix consist of sentences","bbf63f74":"#LightGBM Classifier","2205546d":"#I got really low accuracy score. (Even here are Erdal's words, nothing is mine)\n\n\"I would get higher accuracy if I tuned my models or changed max_features.I tried to tune my models parameter but it took too much time(about 30 min. and still continue) so I stopped tunning.\"","443b3bcd":"#XGBM classifier"}}