{"cell_type":{"a88b7dc1":"code","4599f4d2":"code","f73ccf35":"code","13b96934":"code","618894fd":"code","4e730fff":"code","11519910":"code","16df15b1":"code","6898be48":"code","f4d73a06":"code","d3d83032":"code","1b572693":"code","4ef68570":"code","9d90f8bf":"code","92cb73e3":"code","fd237c48":"markdown","1acda0f1":"markdown","f853f539":"markdown","a76d52a8":"markdown","6c81234e":"markdown","e95cc0b0":"markdown","e13033e0":"markdown","5d551d9f":"markdown","ccd5a58c":"markdown","10f906cb":"markdown"},"source":{"a88b7dc1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4599f4d2":"#importing libraries\n\nimport pandas as pd\nimport seaborn as sns\nsns.set(color_codes=True)\nimport matplotlib.pyplot as plt\n%matplotlib inline","f73ccf35":"games = pd.read_csv('\/kaggle\/input\/games-data\/games.csv')","13b96934":"games.dropna(inplace=True)","618894fd":"games.head()","4e730fff":"sns.distplot(games['average_rating'])","11519910":"# Is there a linear relationship between Minage & Average Rating ?\n\nsns.jointplot(games['minage'], games['average_rating'],)","16df15b1":"sns.jointplot(games['minage'], games['average_rating'], kind=\"hex\")","6898be48":"sns.jointplot(games['minage'], games['average_rating'], kind=\"kde\")","f4d73a06":"sns.pairplot(games[['playingtime', 'minage', 'average_rating']])","d3d83032":"sns.stripplot(games['minage'], games['average_rating'],jitter=True)","1b572693":"sns.stripplot(games['type'], games['minage'], jitter=True)","4ef68570":"sns.countplot(games['type'])","9d90f8bf":"# since average playing time is quite low, we taking playing time valu lesser then 700 mins\n\nsns.regplot(x=\"playingtime\", y=\"average_rating\", data=games[games['playingtime'] < 700])","92cb73e3":"sns.pointplot(games['minage'], games['maxplaytime'], hue=games['type'])","fd237c48":"# Plotting univariate distributions\n\n### The most convenient way to take a quick look at a univariate distribution in seaborn is the distplot() function. By default, this will draw a histogram and fit a kernel density estimate (KDE).","1acda0f1":"# Visualizing pairwise relationships in a dataset\n\n### To plot multiple pairwise bivariate distributions in a dataset, you can use the pairplot() function. This creates a matrix of axes and shows the relationship for each pair of columns in a DataFrame. by default, it also draws the univariate distribution of each variable on the diagonal Axes:","f853f539":"# Plotting bivariate distributions\n\n### It can also be useful to visualize a bivariate distribution of two variables. The easiest way to do this in seaborn is to just use the jointplot() function, which creates a multi-panel figure that shows both the bivariate (or joint) relationship between two variables along with the univariate (or marginal) distribution of each on separate axes.\n\n# Scatterplots\n\n### The most familiar way to visualize a bivariate distribution is a scatterplot, where each observation is shown with point at the x and y values. This is analgous to a rug plot on two dimensions. You can draw a scatterplot with the matplotlib plt.scatter function, and it is also the default kind of plot shown by the jointplot() function","a76d52a8":"## Kernel Density Estimation","6c81234e":"\n### Analyzing the linear trend between playing time and average_rating received. There are two main functions in Seaborn to visualize a linear relationship determined through regression. These functions are regplot() and lmplot().","e95cc0b0":"## Plotting with categorical data","e13033e0":"# Point plots\n\n### An alternative style for visualizing the same information is offered by the pointplot() function. This function also encodes the value of the estimate with height on the other axis, but rather than show a full bar it just plots the point estimate and confidence interval. Additionally, pointplot connects points from the same hue category. This makes it easy to see how the main relationship is changing as a function of a second variable, because your eyes are quite good at picking up on differences of slopes:","5d551d9f":"## Hex Bin Plots","ccd5a58c":"### In a strip plot, the scatterplot points will usually overlap. This makes it difficult to see the full distribution of data. One easy solution is to adjust the positions (only along the categorical axis) using some random \u201cjitter\"","10f906cb":"### A special case for the bar plot is when you want to show the number of observations in each category rather than computing a statistic for a second variable. This is similar to a histogram over a categorical, rather than quantitative, variable. In seaborn, it\u2019s easy to do so with the countplot() function:"}}