{"cell_type":{"c8857f1b":"code","5a525ff9":"code","f5997855":"code","9448c6c7":"code","59106ee4":"code","64e0b256":"code","a3c67576":"code","07fc5c19":"code","f8b501e1":"code","9e0ae2fe":"code","15d4c3c4":"code","30283eed":"code","89a1e765":"code","b57a9509":"code","5f154a79":"code","7b175456":"code","2014edcd":"code","a114739b":"code","9c8a6e71":"code","a7b3ff9e":"markdown","0783579b":"markdown","92e3fbe6":"markdown","aa808916":"markdown","fe173b01":"markdown","48fc5895":"markdown","2adfb5f6":"markdown","0f12c1e9":"markdown"},"source":{"c8857f1b":"# Load librarys\nlibrary('edgeR')\nlibrary('limma')\nlibrary('Glimma')\nlibrary('ggplot2')\nlibrary('RColorBrewer')\nlibrary('morpheus')\nlibrary('org.Hs.eg.db')\nlibrary(\"dplyr\")\nlibrary(\"gplots\")","5a525ff9":"# Explore control vs cases Data to kwnow what is the bestway  to process data\nctrl_vs_cases_transcrip_data <- read.csv('\/home\/jupyter\/end-als\/transcriptomics-data\/DESeq2\/ctrl_vs_case.csv')","f5997855":"# Getting ctrl vs case group\nctrl_vs_cases_group <- factor(ctrl_vs_cases_transcrip_data$CtrlVsCase_Classifier)\n# Delete ctrl vs cases from original dataset \nctrl_vs_cases_procces <- subset(ctrl_vs_cases_transcrip_data, select= -c(2))\n# Transpose data to have id in columns\nctrl_vs_cases_procces <- t(ctrl_vs_cases_procces)\n# Change the columns names for the ids\ncolnames(ctrl_vs_cases_procces) <- ctrl_vs_cases_procces[1, ]\n# Delete  ids from the first row \nctrl_vs_cases_procces <- ctrl_vs_cases_procces[-c(1), ]\n# set rows names to add later to df\ngenes_names <- rownames(ctrl_vs_cases_procces)\nctrl_vs_cases_procces <- data.frame(ctrl_vs_cases_procces)\n# changing the type data chart to numeric\nctrl_vs_cases_procces <- as.data.frame(sapply(ctrl_vs_cases_procces, as.numeric))\n# Set row names genes to the new data colletion\nrownames(ctrl_vs_cases_procces) <- genes_names","9448c6c7":"# DGEList to run MDS\nctrl_vs_cases_procces_dglist <- DGEList(counts = as.matrix(ctrl_vs_cases_procces), group = ctrl_vs_cases_group)\n#plot MDS \nplotMDS(ctrl_vs_cases_procces_dglist, col=as.numeric(ctrl_vs_cases_procces_dglist$samples$group))\nlegend(\"bottomleft\", as.character(unique(ctrl_vs_cases_procces_dglist$samples$group)), col=1:3, pch=20)","59106ee4":"# Reading principal path L3 counts data to extrac txt files\nl3_count_main_path <- \"\/home\/jupyter\/end-als\/transcriptomics-data\/L3_counts\"\n# List of folder in L3_counts\nl3_count_main_path_list <- list.files(path = l3_count_main_path)\n# Declare variable just for concatenate txt files\nall_transcriptomic_counts <- \"Principal\"\nflag <- TRUE\nfor (folder in l3_count_main_path_list){\n    # Get sub-folder path\n    subfolder <- list.files(path=paste(l3_count_main_path, folder, sep='\/'))\n    # If the folder contains more than one file the is excluded\n    if (length(subfolder) > 1){\n        next\n    }\n    # Read last file this path contain the name of .txt file\n    exon_txt_file <- list.files(path=paste(l3_count_main_path, folder, subfolder, sep='\/'))\n    # Concatenate all path to read csv\n    complete_l3_count_path <- paste(l3_count_main_path, folder, subfolder, exon_txt_file, sep='\/')\n    \n    # Reading exo.txt file\n    l3_counts_per_id <- read.table(complete_l3_count_path, sep = \"\\t\", header=TRUE)\n    # Select genes columns and counts\n    l3_counts_per_id <- subset(l3_counts_per_id, select=(c(1,7)))\n    # Change the name of columns for genes for genes and counts per id\n    colnames(l3_counts_per_id) <- c(\"genes\", folder)\n    # If is the first iterarion then enter into if and save file in all_transcript_count to by concacatenate later\n    if(flag){\n        flag<- FALSE\n        all_transcriptomic_counts <- l3_counts_per_id\n        next\n    }\n    # Join all count in single file\n    all_transcriptomic_counts <- left_join(x = all_transcriptomic_counts, y = l3_counts_per_id, by = \"genes\", all.x = TRUE)\n}\n# Write csv file of raw counts\nwrite.csv(all_transcriptomic_counts, \"raw_L3counts_data.csv\")","64e0b256":"# To performance MDS with color by case and ctrl is necesario get the groups from clinical data portal data\nclinical_data_portal <- read.csv('\/home\/jupyter\/end-als\/clinical-data\/filtered-metadata\/metadata\/aals_dataportal_datatable.csv')\n# Creating dataframe just with data that we need\nclinical_data_portal_subset <- data.frame(clinical_data_portal$Participant_ID, clinical_data_portal$Sex,\n                                         clinical_data_portal$Race, clinical_data_portal$Subject.Group, \n                                         clinical_data_portal$Site.of.Onset, clinical_data_portal$NEFH..SMI32.,\n                                         clinical_data_portal$ISL1, clinical_data_portal$`NKX6.1`, \n                                         clinical_data_portal$TUBB3..TuJ1., clinical_data_portal$s100b)\n# Change col names\ncolnames(clinical_data_portal_subset) <- c(\"Participant_ID\", \"Sex\", \"Race\", \"SubjectGroup\", \"SiteOfOnset\", \"NEFH\",\n                                          \"ISL1\", \"NKX6\", \"TUBB3\", \"s100b\")\n# Transpose data to join data portal and raw counts data\nall_transcriptomic_counts_transpose <- t(all_transcriptomic_counts)\n# Change the columns names for the ids\ncolnames(all_transcriptomic_counts_transpose) <- all_transcriptomic_counts_transpose[1, ]\n# Delete  ids from the first row \nall_transcriptomic_counts_transpose <- data.frame(all_transcriptomic_counts_transpose[-c(1), ])\n# set participant Id as columns\nall_transcriptomic_counts_transpose$Participant_ID <- rownames(all_transcriptomic_counts_transpose)\n# Join raw counts and data portal \nall_transcriptomic_counts_and_data_portal <- left_join(x = all_transcriptomic_counts_transpose, \n                                       y = clinical_data_portal_subset, by = \"Participant_ID\", all.x = TRUE)\n\n# Save transcripts groups to use latter in Difererntial expression analysis\ntranscripts_groups <- all_transcriptomic_counts_and_data_portal[c(\"Participant_ID\", \"Sex\", \"Race\", \n                                                                 \"SubjectGroup\", \"SiteOfOnset\", \"NEFH\",\n                                                                 \"ISL1\", \"NKX6\", \"TUBB3\", \"s100b\")]\n\ntranscripts_groups$SubjectGroup[which(transcripts_groups$SubjectGroup != \"Healthy Control\")]  <- \"ALS\"\n# Delete columns from raw counts\nall_transcriptomic_counts_and_data_portal <- subset(all_transcriptomic_counts_and_data_portal, select=-c( Sex, Race, \n                                                                 SubjectGroup, SiteOfOnset, NEFH,\n                                                                 ISL1, NKX6, TUBB3, s100b))","a3c67576":"# report process to transpose data\n\n# Transpose data to have id in columns\nall_transcriptomic_counts_and_data_portal <- t(all_transcriptomic_counts_and_data_portal)\n# Change the columns names for  ids patinets\ncolnames(all_transcriptomic_counts_and_data_portal) <- all_transcriptomic_counts_and_data_portal[60676, ]\n# Delete  ids from the last row \nall_transcriptomic_counts_and_data_portal <- all_transcriptomic_counts_and_data_portal[-c(60676), ]\n# Convert matrix to data frame\nall_transcriptomic_counts_and_data_portal <- data.frame(all_transcriptomic_counts_and_data_portal)\n# Set genes ids\ngenes_id <- rownames(all_transcriptomic_counts_and_data_portal)\n# # changing the type data chart to numeric\nall_transcriptomic_counts_and_data_portal <- as.data.frame(sapply(all_transcriptomic_counts_and_data_portal, as.numeric))\n# Set row names genes to the new data colletion\nrownames(all_transcriptomic_counts_and_data_portal) <- genes_id","07fc5c19":"dgelist_edgeR_normalize <- DGEList(counts = as.matrix(all_transcriptomic_counts_and_data_portal), group = transcripts_groups$SubjectGroup)\n# Filter data by cpm\nkeep_data<- filterByExpr(dgelist_edgeR_normalize)\ndgelist_edgeR_normalize<- dgelist_edgeR_normalize[keep_data, , keep.lib.sizes=FALSE]\n# Normalize Data\nedgeR_normalize_data <- calcNormFactors(dgelist_edgeR_normalize)\n#edgeR_normalize_data <- logcpm <- cpm(edgeR_normalize_data, log=TRUE)\ndgelist_edgeR_normalize <- DGEList(counts = as.matrix(edgeR_normalize_data), group = transcripts_groups$SubjectGroup)","f8b501e1":"# plot MDS\nplotMDS(dgelist_edgeR_normalize, col=as.numeric(dgelist_edgeR_normalize$samples$group))\nlegend(\"bottomleft\", as.character(unique(dgelist_edgeR_normalize$samples$group)), col=1:3, pch=20)","9e0ae2fe":"# Filter just cases from raw data\nall_transcriptomic_counts_and_data_portal <- all_transcriptomic_counts_and_data_portal [transcripts_groups$SubjectGroup == 'ALS']\ntranscripts_groups <- transcripts_groups[transcripts_groups$SubjectGroup == 'ALS', ]","15d4c3c4":"# Calculate count per million and keep samples\ncpm_quantile_transform <- cpm(all_transcriptomic_counts_and_data_portal)\n# thresh_cpm to filter data\nthresh_cpm <- cpm_quantile_transform > 0.5\nkeep_quantile_data <- rowSums(thresh_cpm) >= 2\ncounts.keep_quantile_data<- all_transcriptomic_counts_and_data_portal[keep_quantile_data,]\n# Quantile normalization\nquantile_normalization_data <-normalizeQuantiles(counts.keep_quantile_data, ties=TRUE)\n# log transformation\nlog_quantile_norm_data <- log1p(quantile_normalization_data)\n#created dglist to make MDS\ndgelist_quantile_data <- DGEList(counts = as.matrix(log_quantile_norm_data), group = transcripts_groups$SubjectGroup)","30283eed":"# plot MDS\nplotMDS(dgelist_quantile_data, col=as.numeric(dgelist_quantile_data$samples$group))\nlegend(\"bottomleft\", as.character(unique(dgelist_quantile_data$samples$group)), col=1:3, pch=20)","89a1e765":"# Filter by markers\n# it'is neccesary create boolean list of each marker to filter all missings values\n# NEFH marker filter\nNEFH_boolean_list <- !is.na(transcripts_groups$NEFH)\nlog_quantile_norm_data <- log_quantile_norm_data [NEFH_boolean_list]\ntranscripts_groups <- transcripts_groups[NEFH_boolean_list, ]\n# ISL1 marker filter\nISL1_boolean_list <- !is.na(transcripts_groups$ISL1)\nlog_quantile_norm_data <- log_quantile_norm_data [ISL1_boolean_list]\ntranscripts_groups <- transcripts_groups[ISL1_boolean_list, ]\n# NKX6 marker filter\nNKX6_boolean_list <- !is.na(transcripts_groups$NKX6)\nlog_quantile_norm_data <- log_quantile_norm_data [NKX6_boolean_list]\ntranscripts_groups <- transcripts_groups[NKX6_boolean_list, ]\n# TUBB3 marker filter\nTUBB3_boolean_list <- !is.na(transcripts_groups$TUBB3)\nlog_quantile_norm_data <- log_quantile_norm_data [TUBB3_boolean_list]\ntranscripts_groups <- transcripts_groups[TUBB3_boolean_list, ]\n# s100b marker filter\ns100b_boolean_list <- !is.na(transcripts_groups$s100b)\nlog_quantile_norm_data <- log_quantile_norm_data [s100b_boolean_list]\ntranscripts_groups <- transcripts_groups[s100b_boolean_list, ]","b57a9509":"# remove bath effect by markers\nquantile_data_removeBatchEffect <- removeBatchEffect(log_quantile_norm_data, covariates=transcripts_groups[c(\"NEFH\", \"ISL1\", \"NKX6\", \"TUBB3\", \"s100b\")])","5f154a79":"# Plot MDS After generating an MDS plot, we did not observe any more heterogeneity in the data.\nplotMDS(quantile_data_removeBatchEffect)","7b175456":"heatmap_corrected_data <- heatmap.2(quantile_data_removeBatchEffect, dendrogram='both', distfun = function(x) dist(x, method=\"euclidean\"))","2014edcd":"hc <- as.hclust( heatmap_corrected_data$colDendrogram )\nclusters <- cutree(hc, k=2 )\n# clusters_corrected_data <\ntranscripts_groups$clusters <- clusters","a114739b":"# Diferential expression analisis\n# Declare covariantes\nNKX <- transcripts_groups$NEFH\nNEFH <- transcripts_groups$ISL1\nTUBB3 <- transcripts_groups$NKX6\nISL1 <- transcripts_groups$TUBB3\ns100b <- transcripts_groups$s100b\nsex <- transcripts_groups$Sex\nrace <- transcripts_groups$Race\nclusters <- factor(transcripts_groups$clusters)","9c8a6e71":"design_matrix <- model.matrix(~0 + clusters + NKX + NEFH + TUBB3 + ISL1 + s100b + race + sex )\n\ncolnames(design_matrix) <- c('clusters_one1', 'clusters_one2','NKX', 'NEFH', 'TUBB3', 'ISL1', 's100b',\n                     'race1', 'race2',\n                        'race3', 'rece4', 'sex') \n\n\n# fit data\nfit_case_clusters <- lmFit(as.matrix(log_quantile_norm_data), design_matrix)\n# contrast case vs control data\ncont.matrix_cluster <- makeContrasts(clusters_one1-clusters_one2, levels = design_matrix)\nfit_case_clusters <- contrasts.fit(fit_case_clusters, cont.matrix_cluster)\nfit_case_clusters <- eBayes(fit_case_clusters)\n\n#cluster1 vs all\nDEP_SIG_ALS_cluster1_vs_cluster2 <- topTable(fit_case_clusters, adjust = \"BH\", coef = 1,\n                                           number = length(fit_case_clusters$coefficients)) \n# Filter by  p.adjust.val\nDEP_SIG_ALS_cluster1_vs_cluster2 <- DEP_SIG_ALS_cluster1_vs_cluster2[ DEP_SIG_ALS_cluster1_vs_cluster2$adj.P.Val < 0.05, ]\nDEP_SIG_ALS_cluster1_vs_cluster2\n# write.csv(DEP_SIG_ALS_cluster1_vs_all, 'cluster1_vs_cluster2_corrected.csv') # Cluster1VsAll","a7b3ff9e":"\nWe then decided to look directly at the gene counts. To achieve this, we first extracted all the gene counts per patient from the different folders and created a matrix with gene counts. We excluded the control with ID CTRL-NEUEU392AE8 because this file containes 17 files into the folder.","0783579b":"\nTo identify subgroups of patients with different transcriptomic profiles we decided to follow an unsupervised clustering approach. However, for this approach we needed to remove the heterogeneity in the data caused by the different differentiation stages of the iPS cells. We use the removeBatchEffect function in the limma package to correct for the staining markers. We included 5 out 6 markers as covariates, as Nestin had 38 missing values. We removed 11 cases and 2 cases for this analysis because they had missing values for the markers. After generating an MDS plot, we did not observe any more heterogeneity in the data.","92e3fbe6":"As quartile normalization, followed by log transformation of the data has been suggested as a good approach to remove batch effects, we implemented it using limma. When we included all the genes, we saw a homogeneous model, but after removing the low count genes, we observed heterogeneity. We decided to use this data for further analysis including the staining markers for cell differentiation as covariates as suggested in one of the Kaggle discussions. We included sex and race as covariates, as they also affect gene expression. We wanted to include age, as it affects the transcriptomic profile, but this was not possible due to missing values in the data set.","aa808916":"In the first level of the dendrogram, we observed two main clusters with multiple smaller clusters. After some trial and error with a different number of sub-clusters, we decided to focus on the two main groups. We extracted the individuals belonging to each cluster, Cluster1 has 79 individuals, while Cluster2 has 45. After running a linear model including the covariates, we found 11 366 genes that were differentially expressed after correcting for multiple testing (FDR<0.05).","fe173b01":"We then performed the normalization on the raw count matrix in edgeR. For this we removed genes with low reads and then generated a new MDS; continuing to observe heterogeneity.","48fc5895":"# Summary\nAmyotrophic lateral sclerosis (ALS) is associated with progressive loss of motor neurons in the motor cortex and spinal cord. Several mechanisms of neuronal death have been proposed; however, it is generally accepted that ALS is the end result of a deleterious interplay between genetic and environmental factors. Therefore, this interplay has multiple pathways modulated by complex underlying genetic factors. With this project we aimed to identify mechanisms playing a role in the disease by studying gene expression data that result from the interaction of genetic and environmental factors. We had access to gene expression data from motor neurons that were derived from induced pluripotent stem cells generated from 137 ALS patients and 32 healthy controls. It is likely that the sample size of patients and\/or controls limited our ability to find differences.\nNext, we hypothesized that the differences in gene expression levels between subgroups of ALS patients could allow us to identify the pathway or mechanisms playing a role in the disease pathophysiology. To achieve this, we performed unsupervised hierarchical clustering to identify subgroups of patients with different gene expression profiles. We found two main clusters with multiple subdivisions, Cluster1 and Cluster2.\n\nAfter comparing the gene expression levels from Cluster1 to Cluster2 including sex, race and 5 differentiation markers as covariates, we identified 11366 genes that were differentially expressed after correcting for multiple testing (FDR<0.05). We then performed an overrepresentation pathways at Reactome (https:\/\/reactome.org\/PathwayBrowser\/#TOOL=AT) to identify the mechanisms in which these genes were involved stratifying by down- and up-regulated genes. The down-regulated genes are overrepresented significantly in multiple pathways (FILE).\n\n# Data analysis\n\nIn order to identify mechanisms that differ from ALS patients and healthy individuals we performed a differential expression analysis to identify genes whose expression was regulated differently. However, we did not identify significant differences. This analysis was underpower due to the limited sample size available in the study, however a larger sample size may lead to identification of relevant pathways. The analysis could also be affected by the heterogeneity present in the cohort, either by the batch effects or the different stages of cell development, although we corrected for it in our model.\nAs the aim of our analysis was to capture the mechanism related to the ALS pathophysiology, we explored the data and removed the technical artifacts when possible. It is known that transcriptomic data is prone to batch defects and that the iPScells could introduce too much variability as they are in diverse cell differentiation stages. Therefore, we made data exploration and normalization our priority.\nWe started working with the provided normalized DeSeq2 dataset. To assess the possible batch effects, we performed a Multidimensional scaling (MDS) analysis. We observed two main clusters with overlapping cases and controls suggesting a possible technical issue.","2adfb5f6":"We did not use this correction for the differential expression analysis as this function is not intended to be used prior to linear modelling. Thus, for the differential expression analysis we continued using the markers as covariates, but the data was used to genered heirarchical clustering.","0f12c1e9":"In order to extract the biological meaning of the identified genes, we performed overrepresentation analysis in Reactome (https:\/\/reactome.org\/PathwayBrowser\/#TOOL=AT). As input we introduced separately the genes that were down and up regulated, and selected the option \u201cProject to human\u201d for the analysis. The output of the analysis including the overrepresented genes can be found in XXX and XXX files.\n# Discussion\nOur top priority was to identify the mechanism playing a role in the disease by comparing gene expression differences in ALS patients compared to controls. However, we did not observe any significant difference between ALS patients and controls after correcting for multiple testing. It is likely that this lack of differential gene expression was due to limitations in the sample size.\nWe identified two main subgroups or clusters of gene expression with several subdivisions.\nInterestingly, genes involved in L13a-mediated translational silencing of Ceruloplasmin expression are regulated differently in Cluster1 compared to Cluster2, suggesting a higher expression of ceruloplasmin in Cluster one compared to cluster2. Ceruloplasmin is known to be altered in neurological diseases, as ceruloplasmin is related to iron\/copper metabolism, it is linked to neurologic symptoms and signs.\nSelenocysteine synthesis is another pathway relevant to ALS, as it has been shown that the cerebrospinal fluid of ALS patients contains elevated levels of selenium species. A recent study suggests that these elevated levels result from mutations causing ALS, as they only observed this in a patient with a mutation in TUBA4A (Mandrioli Et al. Neurodegener Dis 2017;17:171-180). A further study comparing the genetic mutation from patients in Cluster1 with Cluster2 could help us to assess if there is indeed a genetic component involved in this pathway.\nOther pathways potentially related to ALS include Response of EIF2AK4 (GCN2) to amino acid deficiency showing different regulation in Cluster1 compared to Cluster 2 are response of EIF2AK4 (GCN2) to amino acid deficiency, eukaryotic translation elongation and endosomal\/vacuolar pathway.\nIn conclusion, our results showed that ALS is being caused by multiple pathways. We observe 2 main subgroups in the gene expression data set. These results suggest that ALS results from multiple interactions of genes that alter multiple pathways that converge in the phenotype. Each of the clusters identified in this study can have different altered pathway subdivisions that may assist in designing new approaches to target drug development or in subtyping the disease."}}