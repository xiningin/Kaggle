{"cell_type":{"a6720b85":"code","9482761c":"code","f5678d5e":"code","7e1ccf05":"code","687bbe2e":"code","0a3d55c5":"code","2d53f781":"code","5bac00d3":"code","379730ea":"code","ae055b96":"code","d3d50d75":"code","926def08":"code","946b14e6":"code","72e4a4c5":"code","f7cb646c":"code","767a87dd":"code","25d9f3d9":"code","cffc7d95":"code","cea45d38":"code","94a19690":"code","66f3ef4c":"code","8db7c9b8":"code","a7ba6ef2":"code","e918e6cb":"code","f92929f7":"code","af229909":"markdown","5dfb867d":"markdown","957cf810":"markdown","18c5fec2":"markdown","0f61cc17":"markdown","d5cdbef1":"markdown","efa12841":"markdown","156ccdb0":"markdown","71047e22":"markdown","34f25e59":"markdown","510867a1":"markdown","b44d9cf3":"markdown","1d069003":"markdown","d9a6e8c4":"markdown","f21b70b9":"markdown","e0e91026":"markdown","c174d51f":"markdown","7739472b":"markdown","0d29694a":"markdown","b6ed5f1f":"markdown","6c021657":"markdown","2bfd8db8":"markdown","4bb1b010":"markdown","7ebc720b":"markdown","b045871a":"markdown","790af6ff":"markdown","753d9850":"markdown","bca60638":"markdown","4602ace9":"markdown","27d207f9":"markdown","698cd78b":"markdown","fd69d6ce":"markdown","d742fbe9":"markdown"},"source":{"a6720b85":"!pip install git+https:\/\/github.com\/rwightman\/pytorch-image-models\n!pip install --upgrade wandb","9482761c":"import os\nimport gc\nimport cv2\nimport copy\nimport time\nimport random\nfrom PIL import Image\n\n# For data manipulation\nimport numpy as np\nimport pandas as pd\n\n# Pytorch Imports\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.optim import lr_scheduler\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.cuda import amp\n\n# Utils\nimport joblib\nfrom tqdm import tqdm\nfrom collections import defaultdict\n\n# Sklearn Imports\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold, train_test_split\n\nimport timm\n\n# Albumentations for augmentations\nimport albumentations as A\nfrom albumentations.pytorch import ToTensorV2\n\n# For colored terminal text\nfrom colorama import Fore, Back, Style\ng_ = Fore.GREEN\nc_ = Fore.CYAN\nb_ = Fore.BLUE\nsr_ = Style.RESET_ALL\n\n# For descriptive error messages\nos.environ['CUDA_LAUNCH_BLOCKING'] = \"1\"","f5678d5e":"import wandb\n\ntry:\n    from kaggle_secrets import UserSecretsClient\n    user_secrets = UserSecretsClient()\n    api_key = user_secrets.get_secret(\"wandb_api\")\n    wandb.login(key=api_key)\n    anony = None\nexcept:\n    anony = \"must\"\n    print('If you want to use your W&B account, go to Add-ons -> Secrets and provide your W&B access token. Use the Label name as wandb_api. \\nGet your W&B access token from here: https:\/\/wandb.ai\/authorize')","7e1ccf05":"ROOT_DIR = \"..\/input\/landmark-retrieval-2021\"\nTRAIN_DIR = \"..\/input\/landmark-retrieval-2021\/train\"\nTEST_DIR = \"..\/input\/landmark-retrieval-2021\/test\"","687bbe2e":"CONFIG = dict(\n    seed = 42,\n    model_name = 'tf_mobilenetv3_small_100',\n    train_batch_size = 384,\n    valid_batch_size = 768,\n    img_size = 224,\n    epochs = 3,\n    learning_rate = 5e-4,\n    scheduler = None,\n    # min_lr = 1e-6,\n    # T_max = 20,\n    # T_0 = 25,\n    # warmup_epochs = 0,\n    weight_decay = 1e-6,\n    n_accumulate = 1,\n    n_fold = 5,\n    num_classes = 81313,\n    device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\"),\n    competition = 'GOOGL',\n    _wandb_kernel = 'deb'\n)","0a3d55c5":"def set_seed(seed = 42):\n    '''Sets the seed of the entire notebook so results are the same every time we run.\n    This is for REPRODUCIBILITY.'''\n    np.random.seed(seed)\n    random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    # When running on the CuDNN backend, two further options must be set\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = True\n    # Set a fixed value for the hash seed\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    \nset_seed(CONFIG['seed'])","2d53f781":"def get_train_file_path(id):\n    return f\"{TRAIN_DIR}\/{id[0]}\/{id[1]}\/{id[2]}\/{id}.jpg\"","5bac00d3":"df = pd.read_csv(f\"{ROOT_DIR}\/train.csv\")\n\nle = LabelEncoder()\ndf.landmark_id = le.fit_transform(df.landmark_id)\njoblib.dump(le, 'label_encoder.pkl')\n\ndf['file_path'] = df['id'].apply(get_train_file_path)","379730ea":"run = wandb.init(project='GLRet2021', \n                 config=CONFIG,\n                 job_type='Visualization',\n                 anonymous='must')","ae055b96":"preview_table = wandb.Table(columns=['Id', 'Image', 'Landmark ID'])\ntmp_df = df.sample(3000, random_state=CONFIG['seed']).reset_index(drop=True)\nfor i in tqdm(range(len(tmp_df))):\n    row = tmp_df.loc[i]\n    img = Image.open(row.file_path)\n    preview_table.add_data(row.id,\n                           wandb.Image(img),\n                           row.landmark_id)\n\nwandb.log({'Visualization': preview_table})\nrun.finish()","d3d50d75":"# Divide data into 60% training, 20% validation and 20% testing\ndf_train, df_test = train_test_split(df, test_size=0.4, stratify=df.landmark_id, \n                                     shuffle=True, random_state=CONFIG['seed'])\ndf_valid, df_test = train_test_split(df_test, test_size=0.5, shuffle=True, \n                                     random_state=CONFIG['seed'])","926def08":"class LandmarkDataset(Dataset):\n    def __init__(self, root_dir, df, transforms=None):\n        self.root_dir = root_dir\n        self.df = df\n        self.file_names = df['file_path'].values\n        self.labels = df['landmark_id'].values\n        self.transforms = transforms\n        \n    def __len__(self):\n        return len(self.df)\n    \n    def __getitem__(self, index):\n        img_path = self.file_names[index]\n        img = cv2.imread(img_path)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        label = self.labels[index]\n        \n        if self.transforms:\n            img = self.transforms(image=img)[\"image\"]\n            \n        return img, label","946b14e6":"data_transforms = {\n    \"train\": A.Compose([\n        A.Resize(CONFIG['img_size'], CONFIG['img_size']),\n        A.HorizontalFlip(p=0.5),\n        A.CoarseDropout(p=0.5),\n        A.Normalize(\n                mean=[0.485, 0.456, 0.406], \n                std=[0.229, 0.224, 0.225], \n                max_pixel_value=255.0, \n                p=1.0\n            ),\n        ToTensorV2()], p=1.),\n    \n    \"valid\": A.Compose([\n        A.Resize(CONFIG['img_size'], CONFIG['img_size']),\n        A.Normalize(\n                mean=[0.485, 0.456, 0.406], \n                std=[0.229, 0.224, 0.225], \n                max_pixel_value=255.0, \n                p=1.0\n            ),\n        ToTensorV2()], p=1.)\n}","72e4a4c5":"class LandmarkRetrievelModel(nn.Module):\n    def __init__(self, model_name, pretrained=True):\n        super(LandmarkRetrievelModel, self).__init__()\n        self.model = timm.create_model(model_name, pretrained=pretrained)\n        self.n_features = self.model.classifier.in_features\n        self.model.reset_classifier(0)\n        self.fc = nn.Linear(self.n_features, CONFIG['num_classes'])\n\n    def forward(self, x):\n        features = self.model(x)    # features = (bs, embedding_size)\n        output = self.fc(features)  # outputs = (bs, num_classes)\n        return output\n    \n    def extract_features(self, x):\n        features = self.model(x)    # features = (bs, embedding_size)\n        return features\n    \nmodel = LandmarkRetrievelModel(CONFIG['model_name'])\nmodel.to(CONFIG['device']);","f7cb646c":"def criterion(outputs, targets):\n    return nn.CrossEntropyLoss()(outputs, targets)","767a87dd":"def train_one_epoch(model, optimizer, scheduler, dataloader, device, epoch):\n    model.train()\n    scaler = amp.GradScaler()\n    \n    dataset_size = 0\n    running_loss = 0.0\n    \n    bar = tqdm(enumerate(dataloader), total=len(dataloader))\n    for step, (images, labels) in bar:         \n        images = images.to(device, dtype=torch.float)\n        labels = labels.to(device, dtype=torch.long)\n        \n        batch_size = images.size(0)\n        \n        with amp.autocast(enabled=True):\n            outputs = model(images)\n            loss = criterion(outputs, labels)\n            loss = loss \/ CONFIG['n_accumulate']\n            \n        scaler.scale(loss).backward()\n    \n        if (step + 1) % CONFIG['n_accumulate'] == 0:\n            scaler.step(optimizer)\n            scaler.update()\n\n            # zero the parameter gradients\n            for p in model.parameters():\n                p.grad = None\n\n            if scheduler is not None:\n                scheduler.step()\n                \n        running_loss += (loss.item() * batch_size)\n        dataset_size += batch_size\n        \n        epoch_loss = running_loss\/dataset_size\n        \n        bar.set_postfix(Epoch=epoch, Train_Loss=epoch_loss,\n                        LR=optimizer.param_groups[0]['lr'])\n    gc.collect()\n    \n    return epoch_loss","25d9f3d9":"@torch.no_grad()\ndef valid_one_epoch(model, dataloader, device, epoch):\n    model.eval()\n    \n    dataset_size = 0\n    running_loss = 0.0\n    \n    TARGETS = []\n    PREDS = []\n    \n    bar = tqdm(enumerate(dataloader), total=len(dataloader))\n    for step, (images, labels) in bar:        \n        images = images.to(device, dtype=torch.float)\n        labels = labels.to(device, dtype=torch.long)\n        \n        batch_size = images.size(0)\n        \n        outputs = model(images)\n        _, preds = torch.max(outputs,1)\n        loss = criterion(outputs, labels)\n        \n        running_loss += (loss.item() * batch_size)\n        dataset_size += batch_size\n        \n        epoch_loss = running_loss\/dataset_size\n        \n        PREDS.append(preds.view(-1).cpu().detach().numpy())\n        TARGETS.append(labels.view(-1).cpu().detach().numpy())\n        \n        bar.set_postfix(Epoch=epoch, Valid_Loss=epoch_loss,\n                        LR=optimizer.param_groups[0]['lr'])   \n    \n    TARGETS = np.concatenate(TARGETS)\n    PREDS = np.concatenate(PREDS)\n    val_acc = accuracy_score(TARGETS, PREDS)\n    gc.collect()\n    \n    return epoch_loss, val_acc","cffc7d95":"def run_training(model, optimizer, scheduler, device, num_epochs):\n    # To automatically log gradients\n    wandb.watch(model, log_freq=100)\n    \n    if torch.cuda.is_available():\n        print(\"[INFO] Using GPU: {}\\n\".format(torch.cuda.get_device_name()))\n    \n    start = time.time()\n    best_model_wts = copy.deepcopy(model.state_dict())\n    best_epoch_acc = 0\n    history = defaultdict(list)\n    \n    for epoch in range(1, num_epochs + 1): \n        gc.collect()\n        train_epoch_loss = train_one_epoch(model, optimizer, scheduler, \n                                           dataloader=train_loader, \n                                           device=CONFIG['device'], epoch=epoch)\n        \n        val_epoch_loss, val_epoch_acc = valid_one_epoch(model, valid_loader, \n                                                        device=CONFIG['device'], \n                                                        epoch=epoch)\n    \n        history['Train Loss'].append(train_epoch_loss)\n        history['Valid Loss'].append(val_epoch_loss)\n        history['Valid Acc'].append(val_epoch_acc)\n        \n        # Log the metrics\n        wandb.log({\"Train Loss\": train_epoch_loss})\n        wandb.log({\"Valid Loss\": val_epoch_loss})\n        wandb.log({\"Valid Acc\": val_epoch_acc})\n        \n        print(f'Valid Acc: {val_epoch_acc}')\n        \n        # deep copy the model\n        if val_epoch_acc >= best_epoch_acc:\n            print(f\"{c_}Validation Acc Improved ({best_epoch_acc} ---> {val_epoch_acc})\")\n            best_epoch_acc = val_epoch_acc\n            run.summary[\"Best Accuracy\"] = best_epoch_acc\n            best_model_wts = copy.deepcopy(model.state_dict())\n            PATH = \"ACC{:.4f}_epoch{:.0f}.bin\".format(best_epoch_acc, epoch)\n            torch.save(model.state_dict(), PATH)\n            # Save a model file from the current directory\n            wandb.save(PATH)\n            print(f\"Model Saved{sr_}\")\n            \n        print()\n    \n    end = time.time()\n    time_elapsed = end - start\n    print('Training complete in {:.0f}h {:.0f}m {:.0f}s'.format(\n        time_elapsed \/\/ 3600, (time_elapsed % 3600) \/\/ 60, (time_elapsed % 3600) % 60))\n    print(\"Best ACC: {:.4f}\".format(best_epoch_acc))\n    \n    # load best model weights\n    model.load_state_dict(best_model_wts)\n    \n    return model, history","cea45d38":"def prepare_loaders():    \n    train_dataset = LandmarkDataset(TRAIN_DIR, df_train, transforms=data_transforms['train'])\n    valid_dataset = LandmarkDataset(TRAIN_DIR, df_valid, transforms=data_transforms['valid'])\n\n    train_loader = DataLoader(train_dataset, batch_size=CONFIG['train_batch_size'], \n                              num_workers=4, shuffle=True, pin_memory=True)\n    valid_loader = DataLoader(valid_dataset, batch_size=CONFIG['valid_batch_size'], \n                              num_workers=4, shuffle=False, pin_memory=True)\n    \n    return train_loader, valid_loader","94a19690":"def fetch_scheduler(optimizer):\n    if CONFIG['scheduler'] == 'CosineAnnealingLR':\n        scheduler = lr_scheduler.CosineAnnealingLR(optimizer, T_max=CONFIG['T_max'], \n                                                   eta_min=CONFIG['min_lr'])\n    elif CONFIG['scheduler'] == 'CosineAnnealingWarmRestarts':\n        scheduler = lr_scheduler.CosineAnnealingWarmRestarts(optimizer, T_0=CONFIG['T_0'], \n                                                             T_mult=1, eta_min=CONFIG['min_lr'])\n    elif CONFIG['scheduler'] == None:\n        return None\n        \n    return scheduler","66f3ef4c":"train_loader, valid_loader = prepare_loaders()","8db7c9b8":"optimizer = optim.Adam(model.parameters(), lr=CONFIG['learning_rate'], weight_decay=CONFIG['weight_decay'])\nscheduler = fetch_scheduler(optimizer)","a7ba6ef2":"run = wandb.init(project='GLRet2021', \n                 config=CONFIG,\n                 job_type='Train',\n                 anonymous='must')","e918e6cb":"model, history = run_training(model, optimizer, scheduler,\n                              device=CONFIG['device'],\n                              num_epochs=CONFIG['epochs'])","f92929f7":"run.finish()","af229909":"![Upvote!](https:\/\/img.shields.io\/badge\/Upvote-If%20you%20like%20my%20work-07b3c8?style=for-the-badge&logo=kaggle)","5dfb867d":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Visualize Images<\/h1>","957cf810":"<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.5em; font-weight: 300;\">Define Optimizer and Scheduler<\/span>","18c5fec2":"![img](https:\/\/i.imgur.com\/Osk4Idv.gif)","0f61cc17":"![img](https:\/\/i.imgur.com\/XoiNakI.jpg)","d5cdbef1":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Training Configuration \u2699\ufe0f<\/h1>","efa12841":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Split Data<\/h1>","156ccdb0":"<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.5em; font-weight: 300;\"><a href=\"https:\/\/wandb.ai\/dchanda\/GLRet2021\/runs\/156aglc0\">View the Complete Dashboard Here \u2b95<\/a><\/span>","71047e22":"![img](https:\/\/i.imgur.com\/oMJjATK.jpg)","34f25e59":"<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.5em; font-weight: 300;\"><a href=\"https:\/\/wandb.ai\/dchanda\/GLRet2021\/runs\/38vetrye\">View the Complete Dashboard Here \u2b95<\/a><\/span>","510867a1":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Create Model<\/h1>","b44d9cf3":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Read the Data \ud83d\udcd6<\/h1>","1d069003":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Loss Function<\/h1>","d9a6e8c4":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Run Training<\/h1>","f21b70b9":"<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.5em; font-weight: 300;\">Loss\/Metric Curve<\/span>","e0e91026":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Dataset Class<\/h1>","c174d51f":"![](https:\/\/paperswithcode.com\/media\/datasets\/Google_Landmarks_Dataset_v2-0000004608-31bcf8ba.jpg)","7739472b":"<img src=\"https:\/\/i.imgur.com\/gb6B4ig.png\" width=\"400\" alt=\"Weights & Biases\" \/>\n\n<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.2em; font-weight: 300;\"> Weights & Biases (W&B) is a set of machine learning tools that helps you build better models faster. <strong>Kaggle competitions require fast-paced model development and evaluation<\/strong>. There are a lot of components: exploring the training data, training different models, combining trained models in different combinations (ensembling), and so on.<\/span>\n\n> <span style=\"color: #000508; font-family: Segoe UI; font-size: 1.2em; font-weight: 300;\">\u23f3 Lots of components = Lots of places to go wrong = Lots of time spent debugging<\/span>\n\n<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.2em; font-weight: 300;\">W&B can be useful for Kaggle competition with it's lightweight and interoperable tools:<\/span>\n\n* <span style=\"color: #000508; font-family: Segoe UI; font-size: 1.2em; font-weight: 300;\">Quickly track experiments,<br><\/span>\n* <span style=\"color: #000508; font-family: Segoe UI; font-size: 1.2em; font-weight: 300;\">Version and iterate on datasets, <br><\/span>\n* <span style=\"color: #000508; font-family: Segoe UI; font-size: 1.2em; font-weight: 300;\">Evaluate model performance,<br><\/span>\n* <span style=\"color: #000508; font-family: Segoe UI; font-size: 1.2em; font-weight: 300;\">Reproduce models,<br><\/span>\n* <span style=\"color: #000508; font-family: Segoe UI; font-size: 1.2em; font-weight: 300;\">Visualize results and spot regressions,<br><\/span>\n* <span style=\"color: #000508; font-family: Segoe UI; font-size: 1.2em; font-weight: 300;\">Share findings with colleagues.<\/span>\n\n<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.2em; font-weight: 300;\">To learn more about Weights and Biases check out this <strong><a href=\"https:\/\/www.kaggle.com\/ayuraj\/experiment-tracking-with-weights-and-biases\">kernel<\/a><\/strong>.<\/span>\n\n![img](https:\/\/i.imgur.com\/BGgfZj3.png)","0d29694a":"![](https:\/\/imgur.com\/Eey3cYG.gif)","b6ed5f1f":"<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.5em; font-weight: 300;\">Hardware Usage<\/span>","6c021657":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Install Required Libraries<\/h1>","2bfd8db8":"<br>\n<h1 style = \"font-size:60px; font-family:Garamond ; font-weight : normal; background-color: #f6f5f5 ; color : #fe346e; text-align: center; border-radius: 100px 100px;\">Google Landmark Retrievel 2021<\/h1>\n<br>","4bb1b010":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Introduction<\/h1>","7ebc720b":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Import Required Libraries \ud83d\udcda<\/h1>","b045871a":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Training Function<\/h1>","790af6ff":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Set Seed for Reproducibility<\/h1>","753d9850":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Augmentations<\/h1>","bca60638":"<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.5em; font-weight: 300;\">Model Weights<\/span>","4602ace9":"<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.5em; font-weight: 300;\">Start Training<\/span>","27d207f9":"<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.5em; font-weight: 300;\">Create Dataloaders<\/span>","698cd78b":"<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.3em; font-weight: 300;\">Welcome to the fourth Landmark Retrieval competition! This year, we introduce a lot more diversity in the challenge\u2019s test images in order to measure global landmark retrieval performance in a fairer manner. And following last year\u2019s success, we set this up as a code competition.<\/span><br>\n\n<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.3em; font-weight: 300;\">Image retrieval is a central problem in computer vision, relevant to many applications. The problem is usually posed as follows: given a query image, can you find similar images in a large database? This is especially important for query images containing landmarks, which accounts for a large portion of what people like to photograph.<\/span><br>\n\n<span style=\"color: #000508; font-family: Segoe UI; font-size: 1.3em; font-weight: 300;\">In this competition, the developed models are expected to retrieve relevant database images to a given query image (i.e., the model should retrieve database images containing the same landmark as the query).<\/span>","fd69d6ce":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Visualizations<\/h1>","d742fbe9":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Validation Function<\/h1>"}}