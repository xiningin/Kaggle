{"cell_type":{"81b929c9":"code","e0e9b066":"code","69fc8447":"code","8bc05e4e":"code","cf77a665":"code","0f5ff816":"code","73b67181":"code","4d2a0992":"code","67e219d6":"code","0261492e":"code","5bd8ede7":"code","c29e6c16":"code","5ca4fbb0":"code","a7bd18f4":"markdown","bf16d84c":"markdown","a8e8d974":"markdown","84ffc7e4":"markdown","fe6a1e83":"markdown","bab584c3":"markdown","732585c2":"markdown"},"source":{"81b929c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd\npd.set_option('display.max_columns', 5)\npd.set_option('display.width', 500)\npd.set_option('display.expand_frame_repr', False)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e0e9b066":"movie = pd.read_csv('\/kaggle\/input\/movie-lens-dataset\/movie_lens_dataset\/movie.csv')\nrating = pd.read_csv('\/kaggle\/input\/movie-lens-dataset\/movie_lens_dataset\/rating.csv')\ndf = movie.merge(rating, how=\"left\", on=\"movieId\")","69fc8447":"comment_counts = pd.DataFrame(df[\"title\"].value_counts())\nrare_movies = comment_counts[comment_counts[\"title\"] <= 1000].index\ncommon_movies = df[~df[\"title\"].isin(rare_movies)]\nuser_movie_df = common_movies.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")","8bc05e4e":"user_movie_df.head()","cf77a665":"user_id = 108170\n\nmovie_id = rating[(rating[\"userId\"] == user_id) & (rating[\"rating\"] == 5.0)].\\\n    sort_values(by=\"timestamp\", ascending=False)[\"movieId\"][0:1].values[0]\n\nmovie_name = df[df[\"movieId\"] == movie_id][\"title\"].values[0]","0f5ff816":"user_df = user_movie_df[user_movie_df.index == user_id]\nmovies_watched = user_df.columns[user_df.notna().any()].tolist()","73b67181":"movies_watched_df = user_movie_df[movies_watched]\nuser_movie_count = movies_watched_df.T.notnull().sum()\nuser_movie_count = user_movie_count.reset_index()\nuser_movie_count.columns = [\"userId\", \"movie_count\"]\nperc = len(movies_watched) * 60 \/ 100\nusers_same_movies = user_movie_count[user_movie_count[\"movie_count\"] > perc][\"userId\"]\nusers_same_movies.head()","4d2a0992":"final_df = pd.concat([movies_watched_df[movies_watched_df.index.isin(users_same_movies.index)],\n                      user_df[movies_watched]])\ncorr_df = final_df.T.corr().unstack().sort_values().drop_duplicates()\ncorr_df = pd.DataFrame(corr_df, columns=[\"corr\"])\ncorr_df.index.names = ['user_id_1', 'user_id_2']\ncorr_df = corr_df.reset_index()\ntop_users = corr_df[(corr_df[\"user_id_1\"] == user_id) & (corr_df[\"corr\"] >= 0.65)][\n    [\"user_id_2\", \"corr\"]].reset_index(drop=True)\ntop_users = top_users.sort_values(by='corr', ascending=False)\ntop_users.rename(columns={\"user_id_2\": \"userId\"}, inplace=True)\ntop_users_ratings = top_users.merge(rating[[\"userId\", \"movieId\", \"rating\"]], how='inner')","67e219d6":"top_users_ratings['weighted_rating'] = top_users_ratings['corr'] * top_users_ratings['rating']\nrecommendation_df = top_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})\nrecommendation_df = recommendation_df.reset_index()\nmovies_to_be_recommend = recommendation_df[recommendation_df[\"weighted_rating\"] > 4].\\\n    sort_values(\"weighted_rating\", ascending=False)","0261492e":"movies_to_be_recommend.merge(movie[[\"movieId\", \"title\"]])['title'][:5]","5bd8ede7":"def item_based_recommender(movie_name, user_movie_df):\n    movie_name = user_movie_df[movie_name]\n    return user_movie_df.corrwith(movie_name).sort_values(ascending=False).head(10)","c29e6c16":"movies_form_item_based = item_based_recommender(movie_name, user_movie_df)","5ca4fbb0":"movies_form_item_based[1:6].index","a7bd18f4":"## Making User-Based Movie Suggestions","bf16d84c":"# Step 4: Identifying Users with the Most Similar Behaviors to the User to Suggest","a8e8d974":"## Making Item-Based Movie Suggestions","84ffc7e4":"# Step 2: Determining the movies watched by user number 108170","fe6a1e83":"# Step 1: Preparing the Data Set","bab584c3":"# Step 3: Accessing Data and Ids of Other Users Watching the Same Movies","732585c2":"# Step 5: Calculating the Weighted Average Recommendation Score"}}