{"cell_type":{"e30ede7c":"code","ad922ac0":"code","80b0e539":"code","5a23eee1":"code","b3c4b9e6":"code","f7826cee":"code","0aff4457":"code","ca73d7e2":"code","410d0762":"code","0e78c8e8":"code","5a4619b0":"code","9665672c":"code","9a63c17a":"code","9bc53fb8":"code","c9ce0904":"code","aaec8b50":"code","3908d384":"code","2cc5c1ca":"code","ef897892":"code","34b7f5fd":"code","b73b671f":"code","b3cb3ef2":"markdown","7097833a":"markdown","0c015f39":"markdown","a5ca3205":"markdown","f9666b67":"markdown","3fb72632":"markdown","5f7e4554":"markdown","2e6c614a":"markdown","47dcb0be":"markdown","7d1f8aff":"markdown"},"source":{"e30ede7c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ad922ac0":"import warnings\nwarnings.filterwarnings('ignore')","80b0e539":"from imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom collections import Counter\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score","5a23eee1":"df = pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')","b3c4b9e6":"df.head()","f7826cee":"df.Class.value_counts()","0aff4457":"y = df.Class\nX = df.iloc[:,:-1]","ca73d7e2":"Counter(y)","410d0762":"rus = RandomUnderSampler(random_state = 42)\nX_res,y_res = rus.fit_resample(X,y)\nprint('Resampled dataset target shape : {}'.format(Counter(y_res)))","0e78c8e8":"X = pd.DataFrame(X_res)\ny = pd.DataFrame(y_res)\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state = 40)\nclf = LogisticRegression()\nclf.fit(X_train,y_train)\ny_pred = clf.predict(X_test)","5a4619b0":"print('Accuracy Score for Logistic Regression {}%'.format(round(accuracy_score(y_test,y_pred)*100,2)))","9665672c":"score = cross_val_score(clf,X,y, cv = 10)\nscore","9a63c17a":"print('K-fold Accuracy score: {}%'.format(round(score.mean()*100,2)))","9bc53fb8":"accuracy = []\nskf = StratifiedKFold(n_splits = 10, random_state = None)\nskf.get_n_splits(X,y)\n\nfor train_index, test_index in skf.split(X,y):\n    print('Train: ', train_index, 'Test: ', test_index)\n    X1_train,X1_test = X.iloc[train_index,:],X.iloc[test_index,:]\n    y1_train, y1_test = y.iloc[train_index,:],y.iloc[test_index,:]\n    clf.fit(X1_train,y1_train)\n    y1_pred = clf.predict(X1_test)\n    score = accuracy_score(y1_pred,y1_test)\n    accuracy.append(score)\n\nprint(accuracy)","c9ce0904":"accuracy = np.array(accuracy)\nprint('Accuracy score of Stratified K-fold: {}%'.format(round(accuracy.mean()*100,2)))","aaec8b50":"y = df.Class\nX = df.iloc[:,:-1]\nsm = SMOTE(random_state = 42)\nX_res, Y_res = sm.fit_resample(X,y)\nprint('Resampled dataset target shape: {}'.format(Counter(Y_res)))","3908d384":"X = pd.DataFrame(X_res)\ny = pd.DataFrame(Y_res)\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state = 55)\nclf = LogisticRegression()\nclf.fit(X_train,y_train)\ny_pred = clf.predict(X_test)","2cc5c1ca":"print('Accuracy score: {}%'.format(round(accuracy_score(y_pred,y_test)*100,2)))","ef897892":"score = cross_val_score(clf,X,y, cv = 10)\nscore = score.mean()\nprint('K-fold accuracy score: {}%'.format(round(score*100,2)))","34b7f5fd":"accuracy = []\nskf = StratifiedKFold(n_splits = 10, random_state = None)\n\nfor train_index, test_index in skf.split(X,y):\n    print('Train: ',train_index, 'Test: ',test_index)\n    X1_train, X1_test = X.iloc[train_index,:], X.iloc[test_index,:]\n    y1_train, y1_test = y.iloc[train_index,:], y.iloc[test_index,:]\n    clf.fit(X1_train, y1_train)\n    y1_pred = clf.predict(X1_test)\n    score = accuracy_score(y1_pred, y1_test)\n    accuracy.append(score)\nprint(accuracy)","b73b671f":"accuracy = np.array(accuracy)\nprint('Accuracy Score of Stratified K-Fold : {}%'.format(round(accuracy.mean()*100,2)))","b3cb3ef2":"### **Stratified K-fold Cross Validation**","7097833a":"### **K-fold Cross Validation**","0c015f39":"As we change the random state of the train_test_split, the accuracy score changes too. So, we use cross-validation.","a5ca3205":"In this dataset, Oversampling works better than Undersampling.","f9666b67":"### **Undersampling**","3fb72632":"### **K-fold Cross Validation**","5f7e4554":"### **Importing all the required libraries**","2e6c614a":"### **Oversampling using SMOTE**","47dcb0be":"In K-fold classification, there are chances that the target class might not have equal combinations, so we use Stratified K-fold.","7d1f8aff":"### **Stratified K-fold Cross Validation**"}}