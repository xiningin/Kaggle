{"cell_type":{"65597bd1":"code","1bb120b2":"code","c059658a":"code","dcde2ca1":"code","a6315de6":"code","cc789046":"code","e4383908":"code","9ca8965c":"code","12ac42d1":"code","cdda1f2c":"code","41edffb2":"code","0ba66d98":"code","f3ee56af":"code","cd85f106":"code","d48bc25e":"code","81f3eea0":"code","4b51e370":"code","946c1fcb":"code","41ae67fa":"code","77c9a7be":"code","40b9a8d3":"code","a42d6780":"code","f2ca6f07":"code","5c8a8044":"code","883aaf7b":"code","e194bdd7":"code","9087b957":"code","5d8ddfae":"code","0ef63f98":"code","fa8b5379":"code","aabe142b":"code","71ead85a":"code","b912654e":"code","166f7673":"code","598b2df5":"code","73ffde4d":"code","519cf58b":"code","40a16d5f":"code","8f7b4ab0":"code","445cfa15":"code","8d4144c3":"code","2c325322":"code","8ea16c93":"code","26823948":"code","4ed76a53":"code","e10ae65d":"code","e518e922":"code","448e604d":"code","dd9e4d3e":"code","4051bbfe":"code","2866208c":"code","a20039e4":"code","10f6e6bf":"code","d35fbf05":"code","baa552ea":"code","5d188f98":"code","a6ea8608":"code","19db8e71":"code","77e12bb0":"code","07049a38":"code","4fd2332f":"code","0908f1da":"code","d09bfd0e":"code","6ba5cb41":"code","10cf480d":"code","87046607":"code","5802e306":"code","2b37ca60":"code","fe397f5d":"code","d9707743":"code","9916295a":"code","23d5690b":"code","b31cfa1e":"code","0b788966":"code","1c8e0207":"code","d15e9cdb":"code","9095531b":"code","a38740bd":"code","965e6212":"code","605ff7d9":"code","5be6b9c8":"code","1b5f72c6":"code","5a142a23":"code","2a809e31":"code","cce24fd6":"code","fbd230da":"code","314ed82b":"code","2c7c617e":"code","8c8b3d5b":"code","98a6cd0b":"code","e70fb601":"markdown","310e76ca":"markdown","9a21ea33":"markdown"},"source":{"65597bd1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#null data process\nimport missingno as msno\n#ignore warnings\nimport warnings \n\n#setting \nplt.style.use('seaborn')\nsns.set(font_scale=2.5)\nwarnings.filterwarnings('ignore')\n\n#decline new window \n%matplotlib inline","1bb120b2":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","c059658a":"df_train.head(20)","dcde2ca1":"#feature\uac00 \uac00\uc9c4 \ud1b5\uacc4\uce58 \ubc18\ud658\ndf_train.describe()","a6315de6":"df_test.describe()","cc789046":"df_test.shape  #col \uc774 11? 11+1?","e4383908":"#Null data check\nfor col in df_train.columns:\n    #\uc624\ub978\ucabd \uc815\ub82c \n    msg = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_train[col].isnull().sum() \/ df_train[col].shape[0]))\n    print(msg)","9ca8965c":"for col in df_test.columns:\n    #\uc67c\ucabd\uc815\ub82c {:>10}\\t\n    msg = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_test[col].isnull().sum() \/ df_test[col].shape[0]))\n    print(msg)","12ac42d1":"#series \uac1d\uccb4 \ntype(df_train[col].isnull()) ","cdda1f2c":"#\ucc28\uc6d0 \ubc18\ud658\n#df_train['Embarked'].shape\ndf_train['Age'].shape","41edffb2":"#msno.matrix\n#iloc? : \ud589\ubc88\ud638\ub97c \ud1b5\ud574 \ub370\uc774\ud130\ub97c \uac00\uc838\uc628\ub2e4 \n\nmsno.matrix(df=df_train.iloc[:,:], figsize=(8,8), color=(1.0,0.5,0.2))","0ba66d98":"#msno.bar \nmsno.bar(df=df_train.iloc[:,:], figsize=(8,8), color=(1.0,0.5,0.2))\n","f3ee56af":"#target lebel \ud655\uc778 \nf, ax = plt.subplots(1, 2, figsize=(18, 8))\n\ndf_train['Survived'].value_counts().plot.pie(explode=[0, 0.1], autopct='%1.1f%%', ax=ax[0], shadow=True)\nax[0].set_title('Pie plot - Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived', data=df_train, ax=ax[1])\nax[1].set_title('Count plot - Survived')\n\nplt.show()","cd85f106":"#target\n#count plot \/ plot pie  [check]\n\n\nf, ax = plt.subplots(1,2, figsize=(18,8))\ndf_train['Survived'].value_counts().plot.pie(explode= [0,0.1], autopct='%1.1f%%',ax = ax[0] , shadow = True)\nax[0].set_title('Survived')\nax[0].set_ylabel('')\n\nsns.countplot('Survived',data=df_train, ax= ax[1])\nax[1].set_title('Survived')\n\nplt.show()","d48bc25e":"type(df_train['Survived'].value_counts()) #series\ndf_train['Survived'].value_counts()","81f3eea0":"df_train.shape #\uc704\uc5d0\uc11c\ub294 \uc65c 11\uac1c\ub85c \ub098\uc624\ub294\uc9c0 ? ","4b51e370":"df_train.head()","946c1fcb":"#Groupby \ube44\uad50 \ndf_train[['Pclass', 'Survived']].groupby(['Pclass'],as_index=True).count()","41ae67fa":"df_train[['Pclass','Survived']].groupby(['Pclass'],as_index=True).sum()","77c9a7be":"#pd.crosstab row & col \npd.crosstab(df_train['Sex'],df_train['Survived'],margins=False).style.background_gradient()","40b9a8d3":"pd.crosstab(df_train['Pclass'],df_train['Survived'],margins=True).style.background_gradient(cmap='summer_r')","a42d6780":"#\uc0dd\uc874\ub960\ndf_train[['Pclass','Survived']].groupby(['Pclass'],as_index=True).mean().sort_values(by='Survived',ascending=False).plot.bar()","f2ca6f07":"f, ax = plt.subplots(1, 2, figsize=(18, 8))\ndf_train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Sex: Survived vs Dead')\nplt.show()","5c8a8044":"# col index gap \ub098\ub220\uc11c \uad6c\ud574\ubcfc\uac83 ! \nf, ax = plt.subplots(1, 2 , figsize= (20,20))\ndf_train[['Age','Survived']].groupby(['Age'],as_index=False).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived Age')\n\nsns.countplot('Age',hue='Survived',data= df_train, ax=ax[1])\nax[1].set_title('Age: Survived vs Death')\nplt.show()","883aaf7b":"df_train.head()","e194bdd7":"df_train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean()","9087b957":"pd.crosstab(df_train['Sex'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')","5d8ddfae":"#factorplot \n#hue\uac00 \ub420 \uc218 \uc788\ub294 \uacbd\uc6b0\uc640 \ub420 \uc218 \uc5c6\ub294 \uacbd\uc6b0 \ucc28\uc774 \ud655\uc778\ud574 \ubcfc \uac83 \nsns.factorplot('Pclass', 'Survived', hue='Sex', data=df_train, size=6, aspect=1.5)","0ef63f98":"sns.factorplot(x='Sex',y='Survived', col = 'Pclass', data=df_train, size=9, aspect=1)","fa8b5379":"print('\uc81c\uc77c \ub098\uc774 \ub9ce\uc740 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].max()))\nprint('\uc81c\uc77c \uc5b4\ub9b0 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].min()))\nprint('\ud0d1\uc2b9\uac1d \ud3c9\uade0 \ub098\uc774 : {:.1f} Years'.format(df_train['Age'].mean()))","aabe142b":"#sns.kdeplot\n\nfig, ax = plt.subplots(1, 1, figsize=(9, 5))\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Age'], ax=ax)\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax=ax)\nplt.legend(['Survived == 1', 'Survived == 0'])\nplt.show()","71ead85a":"df_train[df_train['Survived'] == 1]['Age'].hist() #true\uc778\uac83\ub4e4\uc73c age\uceec\ub7fc\ub9cc \uac00\uc838\uc634","b912654e":"#\uc815\ubcf4\ud655\uc778 \n\n#iloc vs loc \ube44\uad50 \n#loc gets rows (or columns) with particular labels from the index. # 1\uae4c\uc9c0 \uc9dc\ub974\uace0 \n#iloc gets rows (or columns) at particular positions in the index (so it only takes integers)\n\ndf_train.iloc[0:1,:] #\uc778\ub371\uc2a4\uac00 10\uac1c \ub098\uc62c\ub54c \uae4c\uc9c0 \n#df_train.loc[0:1,:]","166f7673":"df_train.loc[:10,:] #\uc778\ub371\uc2a4\uc5d0 10\uc774 \ub098\uc62c\ub54c \uae4c\uc9c0 ","598b2df5":"# Age distribution withing classes\nplt.figure(figsize=(8, 6))\ndf_train['Age'][df_train['Pclass'] == 1].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 2].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 3].plot(kind='kde')\n\nplt.xlabel('Age')\nplt.title('Age Distribution within classes')\nplt.legend(['1st Class', '2nd Class', '3rd Class'])","73ffde4d":"#\ubc30\uc5f4\uc744 \uc0dd\uc131\ud558\uc5ec \ub098\uc774\ub300\ub85c \ub2e4\uc2dc \ubb36\uc740 \uceec\ub7fc \uc0dd\uc131\ncummulate_survival_ratio = []\nfor i in range(1, 80):\n    cummulate_survival_ratio.append(df_train[df_train['Age'] < i]['Survived'].sum() \/ len(df_train[df_train['Age'] < i]['Survived']))\n    \nplt.figure(figsize=(7, 7))\nplt.plot(cummulate_survival_ratio)\nplt.title('Survival rate change depending on range of Age', y=1.02)\nplt.ylabel('Survival rate')\nplt.xlabel('Range of Age(0~x)')\nplt.show()","519cf58b":"f, ax = plt.subplots(1, 1, figsize=(7, 7))\ndf_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax)","40a16d5f":"f,ax=plt.subplots(2, 2, figsize=(20,15))\nsns.countplot('Embarked', data=df_train, ax=ax[0,0])\nax[0,0].set_title('(1) No. Of Passengers Boarded')\nsns.countplot('Embarked', hue='Sex', data=df_train, ax=ax[0,1])\nax[0,1].set_title('(2) Male-Female Split for Embarked')\nsns.countplot('Embarked', hue='Survived', data=df_train, ax=ax[1,0])\nax[1,0].set_title('(3) Embarked vs Survived')\nsns.countplot('Embarked', hue='Pclass', data=df_train, ax=ax[1,1])\nax[1,1].set_title('(4) Embarked vs Pclass')\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","8f7b4ab0":"df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1 # \uc790\uc2e0\uc744 \ud3ec\ud568\ud574\uc57c\ud558\ub2c8 1\uc744 \ub354\ud569\ub2c8\ub2e4\ndf_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] + 1 # \uc790\uc2e0\uc744 \ud3ec\ud568\ud574\uc57c\ud558\ub2c8 1\uc744 \ub354\ud569\ub2c8\ub2e4","445cfa15":"print(\"Maximum size of Family: \", df_train['FamilySize'].max())\nprint(\"Minimum size of Family: \", df_train['FamilySize'].min())","8d4144c3":"f,ax=plt.subplots(1, 3, figsize=(40,10))\nsns.countplot('FamilySize', data=df_train, ax=ax[0])\nax[0].set_title('(1) No. Of Passengers Boarded', y=1.02)\n\nsns.countplot('FamilySize', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('(2) Survived countplot depending on FamilySize',  y=1.02)\n\ndf_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax[2])\nax[2].set_title('(3) Survived rate depending on FamilySize',  y=1.02)\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","2c325322":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","8ea16c93":"# feature engineering\ndf_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].mean() # testset \uc5d0 \uc788\ub294 nan value \ub97c \ud3c9\uade0\uac12\uc73c\ub85c \uce58\ud658\ud569\ub2c8\ub2e4.\n\ndf_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ndf_test['Fare'] = df_test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)","26823948":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","4ed76a53":"df_train.head()","e10ae65d":"df_train['Ticket'].value_counts()","e518e922":"import numpy as np\nimport pandas as pd\nfrom pandas import Series\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn')\nsns.set(font_scale=2.5)\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n\n%matplotlib inline\n\ndf_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndf_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1 # \uc790\uc2e0\uc744 \ud3ec\ud568\ud574\uc57c\ud558\ub2c8 1\uc744 \ub354\ud569\ub2c8\ub2e4\ndf_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] + 1 # \uc790\uc2e0\uc744 \ud3ec\ud568\ud574\uc57c\ud558\ub2c8 1\uc744 \ub354\ud569\ub2c8\ub2e4\n\ndf_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].mean()\n\ndf_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ndf_test['Fare'] = df_test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\n","448e604d":"df_train['Initial']= df_train['Name'].str.extract('([A-Za-z]+)\\.')\n    \ndf_test['Initial']= df_test.Name.str.extract('([A-Za-z]+)\\.')","dd9e4d3e":"pd.crosstab(df_train['Initial'], df_train['Sex']).T.style.background_gradient(cmap='summer_r') #Checking the Initials with the Sex","4051bbfe":"df_train['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)\n\ndf_test['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)","2866208c":"df_train.groupby('Initial').mean()","a20039e4":"df_train.groupby('Initial')['Survived'].mean().plot.bar()","10f6e6bf":"df_train.groupby('Initial').mean()","d35fbf05":"df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mr'),'Age'] = 33\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mrs'),'Age'] = 36\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Master'),'Age'] = 5\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Miss'),'Age'] = 22\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Other'),'Age'] = 46\n\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mr'),'Age'] = 33\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mrs'),'Age'] = 36\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Master'),'Age'] = 5\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Miss'),'Age'] = 22\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Other'),'Age'] = 46","baa552ea":"print('Embarked has ', sum(df_train['Embarked'].isnull()), ' Null values')","5d188f98":"df_train['Embarked'].fillna('S', inplace=True)","a6ea8608":"df_train['Age_cat'] = 0\ndf_train.loc[df_train['Age'] < 10, 'Age_cat'] = 0\ndf_train.loc[(10 <= df_train['Age']) & (df_train['Age'] < 20), 'Age_cat'] = 1\ndf_train.loc[(20 <= df_train['Age']) & (df_train['Age'] < 30), 'Age_cat'] = 2\ndf_train.loc[(30 <= df_train['Age']) & (df_train['Age'] < 40), 'Age_cat'] = 3\ndf_train.loc[(40 <= df_train['Age']) & (df_train['Age'] < 50), 'Age_cat'] = 4\ndf_train.loc[(50 <= df_train['Age']) & (df_train['Age'] < 60), 'Age_cat'] = 5\ndf_train.loc[(60 <= df_train['Age']) & (df_train['Age'] < 70), 'Age_cat'] = 6\ndf_train.loc[70 <= df_train['Age'], 'Age_cat'] = 7\n\ndf_test['Age_cat'] = 0\ndf_test.loc[df_test['Age'] < 10, 'Age_cat'] = 0\ndf_test.loc[(10 <= df_test['Age']) & (df_test['Age'] < 20), 'Age_cat'] = 1\ndf_test.loc[(20 <= df_test['Age']) & (df_test['Age'] < 30), 'Age_cat'] = 2\ndf_test.loc[(30 <= df_test['Age']) & (df_test['Age'] < 40), 'Age_cat'] = 3\ndf_test.loc[(40 <= df_test['Age']) & (df_test['Age'] < 50), 'Age_cat'] = 4\ndf_test.loc[(50 <= df_test['Age']) & (df_test['Age'] < 60), 'Age_cat'] = 5\ndf_test.loc[(60 <= df_test['Age']) & (df_test['Age'] < 70), 'Age_cat'] = 6\ndf_test.loc[70 <= df_test['Age'], 'Age_cat'] = 7","19db8e71":"def category_age(x):\n    if x < 10:\n        return 0\n    elif x < 20:\n        return 1\n    elif x < 30:\n        return 2\n    elif x < 40:\n        return 3\n    elif x < 50:\n        return 4\n    elif x < 60:\n        return 5\n    elif x < 70:\n        return 6\n    else:\n        return 7    \n    \ndf_train['Age_cat_2'] = df_train['Age'].apply(category_age)","77e12bb0":"print('1\ubc88 \ubc29\ubc95, 2\ubc88 \ubc29\ubc95 \ub458\ub2e4 \uac19\uc740 \uacb0\uacfc\ub97c \ub0b4\uba74 True \uc918\uc57c\ud568 -> ', (df_train['Age_cat'] == df_train['Age_cat_2']).all())","07049a38":"df_train","4fd2332f":"df_train.drop(['Age', 'Age_cat_2'], axis=1, inplace=True)\ndf_test.drop(['Age'], axis=1, inplace=True)","0908f1da":"df_train.loc[df_train['Initial']=='Master','Initial']","d09bfd0e":"df_train['Initial'] = df_train['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})\ndf_test['Initial'] = df_test['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})","6ba5cb41":"df_train['Embarked'].unique() #array","10cf480d":"df_train['Embarked'].value_counts() #series","87046607":"df_train['Embarked'] = df_train['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})\ndf_test['Embarked'] = df_test['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})","5802e306":"df_train['Embarked'].isnull().any()","2b37ca60":"df_train['Sex'] = df_train['Sex'].map({'female': 0, 'male': 1})\ndf_test['Sex'] = df_test['Sex'].map({'female': 0, 'male': 1})","fe397f5d":"heatmap_data = df_train[['Survived', 'Pclass', 'Sex', 'Fare', 'Embarked', 'FamilySize', 'Initial', 'Age_cat']] \n\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(14, 12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(heatmap_data.astype(float).corr(), linewidths=0.1, vmax=1.0,\n           square=True, cmap=colormap, linecolor='white', annot=True, annot_kws={\"size\": 16})\n\ndel heatmap_data","d9707743":"df_train = pd.get_dummies(df_train, columns=['Initial'], prefix='Initial')\ndf_test = pd.get_dummies(df_test, columns=['Initial'], prefix='Initial')","9916295a":"df_train.head()","23d5690b":"df_train = pd.get_dummies(df_train, columns=['Embarked'], prefix='Embarked')\ndf_test = pd.get_dummies(df_test, columns=['Embarked'], prefix='Embarked')","b31cfa1e":"df_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)\ndf_test.drop(['PassengerId', 'Name',  'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)","0b788966":"df_train.head()","1c8e0207":"df_test.head()","d15e9cdb":"from sklearn.ensemble import RandomForestClassifier \nfrom sklearn import metrics \nfrom sklearn.model_selection import train_test_split ","9095531b":"X_train = df_train.drop('Survived', axis=1).values\ntarget_label = df_train['Survived'].values\nX_test = df_test.values","a38740bd":"X_tr, X_vld, y_tr, y_vld = train_test_split(X_train, target_label, test_size=0.3, random_state=2018)","965e6212":"model = RandomForestClassifier()\nmodel.fit(X_tr, y_tr)\nprediction = model.predict(X_vld)","605ff7d9":"df_train.shape","5be6b9c8":"X_tr.shape #30% vld 70% train","1b5f72c6":"print('\ucd1d {}\uba85 \uc911 {:.2f}% \uc815\ud655\ub3c4\ub85c \uc0dd\uc874\uc744 \ub9de\ucda4'.format(y_vld.shape[0], 100 * metrics.accuracy_score(prediction, y_vld)))","5a142a23":"model.feature_importances_","2a809e31":"from pandas import Series\n\nfeature_importance = model.feature_importances_\nSeries_feat_imp = Series(feature_importance, index=df_test.columns)","cce24fd6":"plt.figure(figsize=(8, 8))\nSeries_feat_imp.sort_values(ascending=True).plot.barh()\nplt.xlabel('Feature importance')\nplt.ylabel('Feature')\nplt.show()","fbd230da":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","314ed82b":"submission.head()","2c7c617e":"prediction = model.predict(X_test)\nsubmission['Survived'] = prediction","8c8b3d5b":"submission","98a6cd0b":"submission.to_csv('.\/my_first_submission.csv', index=False)","e70fb601":"Data ","310e76ca":"(prediction == y_vld).sum()\/prediction.shape[0]","9a21ea33":"> Feature Engineering"}}