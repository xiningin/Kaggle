{"cell_type":{"0ccd3644":"code","94f6a2ae":"code","ad42a9e2":"code","119bec28":"code","f1265e3e":"code","46d8a44f":"code","7a793a98":"code","f2b48c88":"code","ad25f51a":"code","b7f546e6":"markdown"},"source":{"0ccd3644":"from sklearn.model_selection import KFold,StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\n\nimport numpy as np \nimport pandas as pd\nimport math\n\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nimport tensorflow_addons as tfa\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import activations,callbacks\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras import initializers\nfrom tensorflow.keras import regularizers\nfrom keras.models import Model","94f6a2ae":"train = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/train.csv')\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-aug-2021\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/tabular-playground-series-aug-2021\/sample_submission.csv\")\n","ad42a9e2":"y = train['loss']\nX = train.drop(['id','loss'],axis = 1)\ntest = test.drop(['id'],axis = 1)\ny.shape,X.shape,test.shape","119bec28":"# Preprocessing :\ndf0 = np.zeros((400000,100))\ndf = pd.concat([X,test],axis=0,copy=False)\nfor i in range(X.shape[1]):\n    df0[:,i] = pd.qcut(df.iloc[:,i],50,labels=False,duplicates = 'drop').values\nX_q = df0[:X.shape[0],:]\ntest_q = df0[X.shape[0]:,:]\nX_q.shape,test_q.shape","f1265e3e":"\nes = tf.keras.callbacks.EarlyStopping(\n    monitor= 'val_loss', min_delta=1e-15, patience=10, verbose=0,\n    mode='auto', baseline=None, restore_best_weights=True)\n\nplateau = tf.keras.callbacks.ReduceLROnPlateau(\n    monitor='val_loss', factor=0.8, patience=3, verbose=0,\n    mode='auto')","46d8a44f":"def emb_model():\n    \n    # Input & embedding\/conv layer :\n    \n    emb_inputs = layers.Input(shape = (100))\n    x = layers.Embedding (input_dim = 50, output_dim = 10)(emb_inputs)\n    x = layers.Conv1D(10,1,activation = 'relu')(x)\n    x = layers.Flatten()(x)\n    x = layers.Dropout(0.3)(x)\n    \n    # only one Dense layer :\n\n    x = layers.Dense(\n            units = 10, \n            activation ='relu',\n            kernel_initializer ='he_uniform')(x)\n    \n    # Output layer :\n    \n    emb_outputs = layers.Dense(\n        units = 1,\n        activation = 'linear',\n        kernel_initializer ='he_uniform',name = 'last')(x)\n\n    #----------- Model instantiation  ---------------\n    model = Model(emb_inputs,emb_outputs)\n\n    return model","7a793a98":"N_FOLDS = 10\nSEED = 42\nEPOCH = 50\nN_round = 1\n\nfor i in range (N_round):\n    \n    oof = np.zeros((X_q.shape[0],1))\n    pred = np.zeros((test_q.shape[0],1))\n\n    skf = StratifiedKFold(n_splits=N_FOLDS, \n                          shuffle=True, \n                          random_state=SEED *i\n                         )\n\n    for fold, (tr_idx, ts_idx) in enumerate(skf.split(X_q,y)):\n        print(f\"\\n ====== TRAINING ROUND {i} FOLD {fold} =======\\n\")\n\n        X_train = X_q[tr_idx]\n        y_train = y[tr_idx]\n        X_test = X_q[ts_idx]\n        y_test = y[ts_idx]\n\n        K.clear_session()\n\n        #================= MODEL training =========\n\n        model= emb_model()\n        model.compile(loss='mse',metrics=[tf.keras.metrics.RootMeanSquaredError()],optimizer = keras.optimizers.Adam(learning_rate=0.001))\n        #model.compile(loss=error,optimizer = keras.optimizers.Adam(learning_rate=0.01))\n        model.fit(X_train, y_train,\n                  batch_size = 128, \n                  epochs = EPOCH,\n                  validation_data=(X_test, y_test),\n                  callbacks=[es, plateau],\n                  verbose = 0)\n\n        #============== Model prediction ==========\n\n        pred_round = model.predict(X_test) \n        oof[ts_idx] += pred_round\n        score_NN_round = math.sqrt(mean_squared_error(y_test, pred_round))\n        print(f\"\\nFOLD {fold} round {i} Score regression model: {score_NN_round}\\n\")\n        pred += model.predict(test_q) \/ N_FOLDS \n     \n\n    score_round = math.sqrt(mean_squared_error(y, oof))\n    print(f\"\\n=== FINAL SCORE round {i} REGRESSION MODEL  : {score_round}===\\n\") ","f2b48c88":"sample_submission['loss'] = pred","ad25f51a":"sample_submission.to_csv('submission9.csv',index = False)\ndisplay(pd.read_csv(\"submission9.csv\"))","b7f546e6":"![image.png](attachment:770ad502-6516-4dea-8144-064e4cc1482e.png)"}}