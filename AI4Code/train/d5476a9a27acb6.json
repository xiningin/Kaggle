{"cell_type":{"321d1531":"code","eb4ede2b":"code","423a61b2":"code","ce894719":"code","ffe32f5a":"code","dc343c1a":"code","626fcd37":"code","4a393339":"code","c3d473d6":"code","e35de933":"code","c41b3d17":"code","27c16e91":"code","38b9ccc3":"code","897e9ddf":"code","685f3921":"code","09f5bd70":"code","2635de5c":"code","d38019d5":"code","e8bf3a24":"markdown","2c03ddc7":"markdown"},"source":{"321d1531":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eb4ede2b":"import random\nimport cv2\nimport glob\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom collections import Counter","423a61b2":"path=glob.glob(\"..\/input\/6000-children-and-teen-book-covers\/BookCovers\/*.jpg\")","ce894719":"random.shuffle(path)","ffe32f5a":"df=pd.DataFrame(path,columns=['location'])\ndf.head()","dc343c1a":"df.shape","626fcd37":"#Taking first 3000 images...\n\ndf.drop(labels=range(3000,6231),axis=0,inplace=True)\ndf.shape","4a393339":"def rgb_to_hex(rgb):\n    return \"#{:02x}{:02x}{:02x}\".format(int(rgb[0]), int(rgb[1]), int(rgb[2]))\n\ndef modify(image):\n    return image.reshape(-1, 3)","c3d473d6":"# Making a function to use all the processes on 3000 images together...\n\ndef process(path):\n    img=cv2.imread(path)\n    img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n    kmeans=KMeans(1)\n    kmeans.fit(modify(img))\n    return kmeans.cluster_centers_[0], rgb_to_hex(kmeans.cluster_centers_[0])","e35de933":"#Getting Red...\n\nred=df['location'].apply(lambda x : process(x)[0][0])","c41b3d17":"#Getting Green...\n\ngreen=df['location'].apply(lambda x : process(x)[0][1])","27c16e91":"#Getting Blue...\n\nblue=df['location'].apply(lambda x:process(x)[0][2])","38b9ccc3":"#Making coloumns and adding in df...\n\ndf['red']=red\ndf['green']=green\ndf['blue']=blue","897e9ddf":"#Getting hex_colors...\n\nhex_color=df['location'].apply(lambda x:process(x)[1])","685f3921":"#Making hex column...\n\ndf['hex_colors']=hex_color","09f5bd70":"#So, our dataframe looks like this...\ndf","2635de5c":"#Nothing empty, so it has been made properly...\n\ndf.isnull().sum()","d38019d5":"#Saving file to output...\n\ndf.to_csv('3000_bookcovers.csv',index=False)","e8bf3a24":"**So, I have created the csv file and saved it to my system and will use in next or second notebook and will continue to work with that dataframe...**","2c03ddc7":"**Hello Everyone! In this notebook, I am extracting red, green, blue and hex colors of random 3000 images in the form of a dataframe and I will save it in my system as a csv file and will use it in another notebook so that I will not have to run for 3000 images again and again. So, this is my first notebook...**"}}