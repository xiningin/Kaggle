{"cell_type":{"562cb4a3":"code","e6abbe86":"code","0277122c":"code","7b406b50":"code","cd607f91":"code","b5d9580f":"code","07b43341":"code","eba9a748":"code","774e39c9":"code","118f3cc6":"code","96b5c618":"code","e400d482":"code","059734da":"code","23c9f11e":"code","0bfdae17":"code","9980daa1":"code","0f637be0":"code","23cd4f40":"code","69ab1760":"code","0167c1bf":"code","8cf2cdb8":"code","73fad32a":"markdown","aa09d888":"markdown","1c8f824c":"markdown","71ee9a53":"markdown","cd787d4b":"markdown","2a51b86a":"markdown","487ed1fe":"markdown","1f3d1325":"markdown","c9f775d3":"markdown"},"source":{"562cb4a3":"import numpy as np\nimport pickle\nimport cv2\nfrom os import listdir\nfrom sklearn.preprocessing import LabelBinarizer\nfrom keras.models import Sequential\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers.core import Activation, Flatten, Dropout, Dense\nfrom keras import backend as K\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import img_to_array\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.losses import categorical_crossentropy\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom keras.utils.vis_utils import plot_model","e6abbe86":"EPOCHS = 25\nINIT_LR = 1e-3\nBS = 32\ndefault_image_size = tuple((256, 256))\nimage_size = 0\ndirectory_root = '..\/input\/plantvillage\/'\nwidth=256\nheight=256\ndepth=3","0277122c":"def convert_image_to_array(image_dir):\n    try:\n        image = cv2.imread(image_dir)\n        if image is not None :\n            image = cv2.resize(image, default_image_size)   \n            return img_to_array(image)\n        else :\n            return np.array([])\n    except Exception as e:\n        print(f\"Error : {e}\")\n        return None","7b406b50":"image_list, label_list = [], []\nshow_image=[]\ntry:\n    print(\" Processing Every Folder\")\n    main_folder = listdir(directory_root)\n    for directory in main_folder :\n        # remove .DS_Store from list\n        if directory == \".DS_Store\" :\n            main_folder.remove(directory)\n    \n    for plant_folder in main_folder :\n        disease_folder_list = listdir(f\"{directory_root}\/{plant_folder}\")\n        \n        for disease_folder in disease_folder_list :\n            # remove .DS_Store from list\n            if disease_folder == \".DS_Store\" :\n                disease_folder_list.remove(disease_folder)\n            \n        for plant_disease_folder in disease_folder_list:\n            print(f\" Loding Images From -> {plant_disease_folder} \")\n            disease_image_list = listdir(f\"{directory_root}\/{plant_folder}\/{plant_disease_folder}\/\")\n  \n            for single_disease_image in disease_image_list :\n                       \n                if single_disease_image == \".DS_Store\" :\n                    disease_image_list.remove(single_disease_image)\n\n            for image in disease_image_list[:200]:\n                image_directory = f\"{directory_root}\/{plant_folder}\/{plant_disease_folder}\/{image}\"\n                if image_directory.endswith(\".jpg\") == True or image_directory.endswith(\".JPG\") == True:\n                    image_list.append(convert_image_to_array(image_directory))\n                    label_list.append(plant_disease_folder)\n    print(\"Image Loading completed  !!\")  \nexcept Exception as e:\n    print(f\"Error : {e}\")","cd607f91":"label_binarizer = LabelBinarizer()\nimage_labels = label_binarizer.fit_transform(label_list)\npickle.dump(label_binarizer,open('label_transform.pkl', 'wb'))\n# print(image_labels)\nn_classes = len(label_binarizer.classes_)\n","b5d9580f":"print(label_binarizer.classes_)","07b43341":"np_image_list = np.array(image_list, dtype=np.float16) \/ 225.0","eba9a748":"print(\"[INFO] Spliting data to train, test\")\nx_train, x_test, y_train, y_test = train_test_split(np_image_list, image_labels, test_size=0.2, random_state = 42) ","774e39c9":"aug = ImageDataGenerator(\n    rotation_range=25, width_shift_range=0.1,\n    height_shift_range=0.1, shear_range=0.2, \n    zoom_range=0.2,horizontal_flip=True, \n    fill_mode=\"nearest\")","118f3cc6":"model = Sequential()\ninputShape = (height, width, depth)\nchanDim = -1\nif K.image_data_format() == \"channels_first\":\n    inputShape = (depth, height, width)\n    chanDim = 1\nmodel.add(Conv2D(32, (3, 3), padding=\"same\",input_shape=inputShape))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(MaxPooling2D(pool_size=(3, 3)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(Conv2D(64, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(128, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(Conv2D(128, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(1024))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(n_classes))\nmodel.add(Activation(\"softmax\"))","96b5c618":"# # Compile the model\n# model.compile(loss=categorical_crossentropy, optimizer=\"adam\", metrics=['accuracy'])","e400d482":"opt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt,metrics=[\"accuracy\"])","059734da":"from IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot","23c9f11e":"SVG(model_to_dot(model).create(prog='dot',format='svg'))","0bfdae17":"history = model.fit_generator(\n    aug.flow(x_train, y_train, batch_size=BS),\n    validation_data=(x_test, y_test),\n    steps_per_epoch=len(x_train) \/\/ BS,\n    epochs=EPOCHS, verbose=1\n    )","9980daa1":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\n#Train and validation accuracy\nplt.plot(epochs, acc, 'b', label='Training accurarcy')\nplt.plot(epochs, val_acc, 'r', label='Validation accurarcy')\nplt.title('Training and Validation accurarcy')\nplt.legend()\n\nplt.figure()\n#Train and validation loss\nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and Validation loss')\nplt.legend()\nplt.show()","0f637be0":"print(\"[INFO] Calculating model accuracy\")\nscores = model.evaluate(x_test, y_test)\nprint(f\"Test Accuracy: {scores[1]*100}\")","23cd4f40":"predictions = model.predict(x_test,verbose=1)","69ab1760":"from sklearn.metrics import confusion_matrix\npred = model.predict(x_test)\npred = np.argmax(pred,axis=1)\ny_test2 = np.argmax(y_test,axis=1)\n\ncm = confusion_matrix(y_test2,pred)\nnp.set_printoptions(precision=2)\nprint(cm)\nplt.figure()","0167c1bf":"import seaborn as sns\nimport matplotlib.pyplot as plt \n\nax= plt.subplot()\nsns.heatmap(cm, annot=True, ax = ax); #annot=True to annotate cells\n\n# labels, title and ticks\nax.set_xlabel('Predicted labels');ax.set_ylabel('True labels'); \nax.set_title('Confusion Matrix'); \nax.xaxis.set_ticklabels(label_binarizer.classes_,rotation=90); ax.yaxis.set_ticklabels(label_binarizer.classes_,rotation=0);","8cf2cdb8":"# save the model to disk\nprint(\"[INFO] Saving model...\")\nmodel.save('mymodel.h5')","73fad32a":"Print the classes","aa09d888":"Plot the train and val curve","1c8f824c":"Model Accuracy","71ee9a53":"Fetch images from directory","cd787d4b":"Save model using Pickle","2a51b86a":"Transform Image Labels uisng [Scikit Learn](http:\/\/scikit-learn.org\/)'s LabelBinarizer","487ed1fe":"Function to convert images to array","1f3d1325":"Import neccessary packages","c9f775d3":"Model Summary"}}