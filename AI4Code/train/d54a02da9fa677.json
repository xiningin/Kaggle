{"cell_type":{"41dcdb3a":"code","fd39e832":"code","bf796a3e":"code","efbe82c8":"code","d308e7d3":"code","9a1ddb44":"code","f6d23125":"code","61ce1db2":"code","0fe6c324":"code","7b659dd8":"code","ba264011":"code","7ed8d662":"code","e2038e02":"code","b91ea283":"code","5076e42f":"code","cd8bd543":"code","373bb1e9":"code","62ea9297":"code","544fd8a5":"code","f2198d94":"code","49bf4bd7":"code","9d9cee74":"code","015acf8e":"code","bf87e10c":"code","430e7074":"code","78db7593":"code","24ba6f8e":"code","253c81df":"code","5aafe655":"code","11d9ea1e":"code","f6984923":"code","1df73105":"code","60952763":"code","eaef646e":"code","0a7b8232":"code","d0cd2615":"code","2506ce9b":"code","0c43450f":"code","3290d392":"code","bf0bb0d9":"code","683fbe25":"markdown","37dfd91c":"markdown","4d198c0a":"markdown","d7e5cd80":"markdown","984e80fd":"markdown","f8442107":"markdown","51a33dbc":"markdown","1f589685":"markdown","b03131b7":"markdown","e95a974c":"markdown","46e308d9":"markdown","2e6937e0":"markdown","b021f05b":"markdown","4d433ff4":"markdown","67d075ef":"markdown","e85204a6":"markdown","41e5d21f":"markdown","9a497f03":"markdown","08226ceb":"markdown","572aa978":"markdown","f9679afe":"markdown","61d0fc8f":"markdown","e194b8d4":"markdown","67046bfe":"markdown","35cab204":"markdown"},"source":{"41dcdb3a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n% matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import accuracy_score","fd39e832":"data = pd.read_csv('..\/input\/train_loan.csv')","bf796a3e":"data.head()","efbe82c8":"data.shape","d308e7d3":"data.info()","9a1ddb44":"data.isnull().sum()","f6d23125":"data['LoanAmount'].fillna(data.LoanAmount.median(), inplace = True)\ndata['Loan_Amount_Term'].fillna(data.Loan_Amount_Term.mode()[0], inplace = True)\ndata['Gender'].fillna(data.Gender.mode()[0], inplace = True)\ndata['Married'].fillna(data.Married.mode()[0], inplace = True)\ndata['Dependents'].fillna(data.Dependents.mode()[0], inplace = True)\ndata['Self_Employed'].fillna(data.Self_Employed.mode()[0], inplace = True)\ndata['Credit_History'].fillna(data.Credit_History.mode()[0], inplace = True)\n","61ce1db2":"data.dtypes","0fe6c324":"data['ApplicantIncome'] = data['ApplicantIncome'].astype('float64')\ndata.dtypes","7b659dd8":"data.Loan_Status.value_counts()","ba264011":"data.Loan_Status.value_counts(normalize = True).plot(kind = 'bar').grid(True, axis = 'y')","7ed8d662":"plt.figure(figsize = (15,15))\n\nplt.subplot(3,2,1)\ndata.Gender.value_counts(normalize = True).plot.bar(title = 'Gender').grid(True, axis = 'y')\nplt.xticks(rotation = 45)\n\nplt.subplot(3,2,2)\ndata.Married.value_counts(normalize = True).plot.bar(title = 'Married').grid(True, axis = 'y')\nplt.xticks(rotation = 45)\n\nplt.subplot(3,2,3)\ndata.Education.value_counts(normalize = True).plot.bar(title = 'Education').grid(True, axis = 'y')\nplt.xticks(rotation = 30)\n\nplt.subplot(3,2,4)\ndata.Dependents.value_counts(normalize = True).plot.bar(title= 'Dependants').grid(True, axis = 'y')\nplt.xticks(rotation = 45)\n\nplt.subplot(3,2,5)\ndata.Self_Employed.value_counts(normalize = True).plot.bar(title = 'Self_Employed').grid(True, axis = 'y')\nplt.xticks(rotation = 45)\n\nplt.subplot(3,2,6)\ndata.Property_Area.value_counts(normalize = True).plot.bar(title = 'Property-Area').grid(True, axis = 'y')\nplt.xticks(rotation = 45)","e2038e02":"plt.figure(figsize = (15,10))\nplt.subplot(231)\nsns.boxplot(y= data.ApplicantIncome)\n\nplt.subplot(232)\nsns.boxplot(y= data.CoapplicantIncome)\n\nplt.subplot(233)\nsns.boxplot(y= data.LoanAmount)\n\nplt.subplot(234)\nsns.distplot(data.ApplicantIncome)\n\nplt.subplot(235)\nsns.distplot(data.CoapplicantIncome)\n\nplt.subplot(236)\nsns.distplot(data.LoanAmount)","b91ea283":"data.Credit_History.value_counts(normalize = True).plot.bar(title = 'Credit History', figsize = (7,5)).grid(True, axis = 'y')","5076e42f":"pd.crosstab(data.Gender, data.Loan_Status)","cd8bd543":"pd.crosstab(data.Gender, data.Loan_Status).plot.bar(figsize = (5,5))","373bb1e9":"pd.crosstab(data.Married, data.Loan_Status, normalize = True).plot.bar(figsize = (5,5))\n\npd.crosstab(data.Dependents, data.Loan_Status, normalize = True).plot.bar(figsize = (5,5))\n\npd.crosstab(data.Education, data.Loan_Status, normalize = True).plot.bar(figsize = (5,5))\n\npd.crosstab(data.Self_Employed, data.Loan_Status, normalize = True).plot.bar(figsize = (5,5))","62ea9297":"sns.boxplot(y= 'ApplicantIncome', x= 'Loan_Status', data = data)","544fd8a5":"bins = [0,2500,4000,6000,81000]\ngroup = ['low', 'average', 'high', 'very high']\ndata['ApplicantIncome new'] = pd.cut(data['ApplicantIncome'], bins, labels = group)\npd.crosstab(data['ApplicantIncome new'], data['Loan_Status'], normalize = True).plot.bar(figsize = (5,5), stacked = True)","f2198d94":"sns.boxplot(y= 'CoapplicantIncome', x= 'Loan_Status', data = data)","49bf4bd7":"bins = [0,1000,2000,4000,42000]\ngroup = ['low', 'average', 'high', 'very high']\ndata['CoapplicantIncome new'] = pd.cut(data['CoapplicantIncome'], bins, labels = group)\npd.crosstab(data['CoapplicantIncome new'], data['Loan_Status'], normalize = True).plot.bar(figsize = (5,5), stacked = True)","9d9cee74":"data['Total_Income'] = data['ApplicantIncome'] + data['CoapplicantIncome']\nsns.boxplot(y= 'Total_Income', x= 'Loan_Status', data = data)","015acf8e":"bins = [0,2500,5000,10000,81000]\ngroups = ['low', 'average', 'high', 'very high']\ndata['Total_Income_new'] = pd.cut(data['Total_Income'], bins, labels = group)\npd.crosstab(data.Total_Income_new, data.Loan_Status, normalize = True).plot.bar(figsize = (5,5))","bf87e10c":"pd.crosstab(data.Credit_History, data.Loan_Status).plot.bar(stacked = True, figsize = (5,5))","430e7074":"bin = [0,100,200,700]\ngroup = ['low', 'average', 'high']\ndata['loanamount'] = pd.cut(data['LoanAmount'], bin, labels = group)\npd.crosstab(data.loanamount, data.Loan_Status, normalize = True).plot.bar(stacked = True, figsize = (5,5))","78db7593":"data['Loan_Status'] = data['Loan_Status'].map({'N': 0, 'Y': 1})\ndata['Dependents'] = data['Dependents'].map({'0': 0, '1': 1, '2': 2, '3+': 3})","24ba6f8e":"train = data[['ApplicantIncome', 'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term', 'Credit_History', 'Loan_Status']]\nsns.heatmap(train.corr(), annot = True, cmap=\"BuPu\")","253c81df":"X = data.drop(['Loan_ID', 'Loan_Status', 'ApplicantIncome new', 'CoapplicantIncome new',\n               'Total_Income_new', 'loanamount', 'ApplicantIncome', 'CoapplicantIncome'], axis = 1)\ny = data.Loan_Status\nX = pd.get_dummies(X)","5aafe655":"X.columns","11d9ea1e":"skf = StratifiedKFold(n_splits = 5, random_state = 1, shuffle = True)\nfor train_index, test_index in skf.split(X,y):\n    X_train, X_test = X.loc[train_index], X.loc[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    \nmodel = LogisticRegression(random_state = 1)\nmodel.fit(X_train, y_train)\nmodel.predict(X_test)\nprint(accuracy_score(y_test, model.predict(X_test)))","f6984923":"test = pd.read_csv('..\/input\/test_loan.csv')\ntest_original = test.copy()\ntest.head()","1df73105":"test.shape","60952763":"test['LoanAmount'].fillna(test.LoanAmount.median(), inplace = True)\ntest['Loan_Amount_Term'].fillna(test.Loan_Amount_Term.mode()[0], inplace = True)\ntest['Gender'].fillna(test.Gender.mode()[0], inplace = True)\ntest['Married'].fillna(test.Married.mode()[0], inplace = True)\ntest['Dependents'].fillna(test.Dependents.mode()[0], inplace = True)\ntest['Self_Employed'].fillna(test.Self_Employed.mode()[0], inplace = True)\ntest['Credit_History'].fillna(test.Credit_History.mode()[0], inplace = True)","eaef646e":"test['ApplicantIncome'] = test['ApplicantIncome'].astype('float64')\ntest['Dependents'] = test['Dependents'].map({'0': 0, '1': 1, '2': 2, '3+': 3})\ntest['Total_Income'] =test['ApplicantIncome'] + test['CoapplicantIncome']\ntest = test.drop(['Loan_ID','ApplicantIncome', 'CoapplicantIncome'], axis = 1)","0a7b8232":"test = pd.get_dummies(test)","d0cd2615":"test.columns","2506ce9b":"test.isna().sum()","0c43450f":"prediction = model.predict(test)\nsubmission = pd.DataFrame({'Loan_ID': test_original['Loan_ID'], 'Loan_Status': prediction})\nsubmission['Loan_Status'].replace(0, 'N', inplace = True)\nsubmission['Loan_Status'].replace(1, 'Y', inplace = True)","3290d392":"submission.head()","bf0bb0d9":"submission['Loan_Status'].value_counts(normalize = True).plot(kind = 'bar')","683fbe25":"We have 614 rows and 13 columns in our training dataset. ","37dfd91c":"### Visualizing numerical features","4d198c0a":"### First 5 samples of the dataset","d7e5cd80":"About 85% of the applicants have their previous debts repayed.","984e80fd":"2. Other categorical features","f8442107":"### Converting the Applicant Income datatype to a float","51a33dbc":"### Reading the csv file","1f589685":"### Preparing the testing dataset","b03131b7":"### Filling Missing values (categorical variables with mode value and numerical variables with the mean\/meian value)","e95a974c":"Following types of applicants have a higher chance of getting their loan approved-\n1. Married applicants\n2. Applicants with zero dependants or 3+\n3. Graduate applicants\n","46e308d9":"### Checking the shape of the dataset","2e6937e0":"From the above graphs we can say that-\n1. Over 80% of the applicants were male.\n2. About 65% of the total applicants were married.\n3. Around 78% of the applicants were graduate.\n4. About 85% of the applicants were not self-employed.\n5. About 35% of the applicants were from semi-urban area.\n6. Most of the applicants have no dependants.","b021f05b":"### Checking for null values","4d433ff4":"Applicants who are not able to pay their previous debts does not get their loan approved.","67d075ef":"1. Target variable (Loan_Status)","e85204a6":"We can say that applicants with average to high total income has better chances to get their loan approved as compare to low income applicants.","41e5d21f":"There are three different datatypes in our dataset.\n\nobject - consists of categorical features\/variables. Loan_ID, Gender, Married, Dependents, Education, Self_Employed, Property_Area, Loan_Status in the dataset belong to this category.\n\nint64 - variable\/feature with integer value. ApplicantIncome belongs to this category.\n\nfloat64 - variable\/integer with a decimal value. In the dataset variables\/features belonging to this category are: CoApplicantIncome, LoanAmount, Loan_Amount_term, and Credit_History.","9a497f03":"### Prediction on the testing dataset","08226ceb":"We can see that out of 614 applicants, only 422(about 69%) applicants get their loan approved while the loan request of the remaining people (192) get rejected.","572aa978":"We can see that there are many outliers present for the applicant income, coapplicant income and loan amount","f9679afe":"### Numerical variables and target variable","61d0fc8f":"### Checking the datatypes in the dataset","e194b8d4":"### Importing necessary libraries","67046bfe":"### Visualizing categorical features","35cab204":"### Summary of the dataset"}}