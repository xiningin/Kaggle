{"cell_type":{"24d78c04":"code","a25671c9":"code","95101896":"code","f453c196":"code","6d10de6b":"code","6f98b022":"code","f6145486":"code","2a2392cd":"code","e75b0f76":"code","93a07dcc":"code","f653f9de":"code","14549731":"markdown","d32c189e":"markdown","76dd4248":"markdown","e98b1a1d":"markdown","5ddf9204":"markdown","a04ffc55":"markdown","2c513204":"markdown","df383445":"markdown","0e545b82":"markdown","94b19aff":"markdown","ddb413cc":"markdown","4fe0e6c0":"markdown","99dd71bc":"markdown","e1f3523e":"markdown","ed6f66ff":"markdown","f3066fab":"markdown"},"source":{"24d78c04":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a25671c9":"## Load the liberaries\nimport pandas as pd\nimport sqlite3","95101896":"## connect to dataset\npwd = '..\/input\/ipldatabase\/'\ndb = pwd + 'database.sqlite'\n\n\n## Read Master File\nconn = sqlite3.connect(db)\nmaster_table = pd.read_sql(\"\"\"SELECT * \n                    FROM sqlite_master\n                    WHERE type='table';\"\"\", conn)\nprint(master_table.tbl_name.to_list())","f453c196":"## Read all tables and print table colummns, this reference will help us understanding common columns amongst the tables\nPlayer_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Player;\"\"\", conn)\nExtra_Runs_table= pd.read_sql(\"\"\"SELECT *\n                        FROM extra_runs;\"\"\", conn)\nBatsman_Scored_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Batsman_Scored;\"\"\", conn)\nBatting_Style_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Batting_Style;\"\"\", conn)\nBowling_Style_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Bowling_Style;\"\"\", conn)\nBowling_Style_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Bowling_Style;\"\"\", conn)\nCountry_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Country;\"\"\", conn)\nSeason_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Season;\"\"\", conn)\nCity_table= pd.read_sql(\"\"\"SELECT *\n                        FROM City;\"\"\", conn)\nOutcome_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Outcome;\"\"\", conn)\nWin_By_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Win_By;\"\"\", conn)\nWicket_Taken_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Wicket_Taken;\"\"\", conn)\nVenue_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Venue;\"\"\", conn)\nExtra_Type_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Extra_Type;\"\"\", conn)\nOut_Type_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Out_Type;\"\"\", conn)\nToss_Decision_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Toss_Decision;\"\"\", conn)\nUmpire_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Umpire;\"\"\", conn)\nTeam_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Team;\"\"\", conn)\nBall_by_Ball_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Ball_by_Ball;\"\"\", conn)\nSysdiagrams_table= pd.read_sql(\"\"\"SELECT *\n                        FROM sysdiagrams;\"\"\", conn)\nSqlite_Sequence_table= pd.read_sql(\"\"\"SELECT *\n                        FROM sqlite_sequence;\"\"\", conn)\nMatch_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Match;\"\"\", conn)\nRolee_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Rolee;\"\"\", conn)\nPlayer_Match_table= pd.read_sql(\"\"\"SELECT *\n                        FROM Player_Match;\"\"\", conn)\n\nprint('The colums for Player_table are:',Player_table.columns.to_list())\nprint('The colums for Extra_Runs_table are:',Extra_Runs_table.columns.to_list())\nprint('The colums for Batsman_Scored_table are:',Batsman_Scored_table.columns.to_list())\nprint('The colums for Batting_Style_table are:',Batting_Style_table.columns.to_list())\nprint('The colums for Bowling_Style_table are:',Bowling_Style_table.columns.to_list())\nprint('The colums for Country_table are:',Country_table.columns.to_list())\nprint('The colums for Season_table:',Season_table.columns.to_list())\nprint('The colums for City_table:',City_table.columns.to_list())\nprint('The colums for Outcome_table:',Outcome_table.columns.to_list())\nprint('The colums for Win_By_table:',Win_By_table.columns.to_list())\nprint('The colums for Wicket_Taken_table:',Wicket_Taken_table.columns.to_list())\nprint('The colums for Venue_table:',Venue_table.columns.to_list())\nprint('The colums for Extra_Type_table:',Extra_Type_table.columns.to_list())\nprint('The colums for Out_Type_table:',Out_Type_table.columns.to_list())\nprint('The colums for Toss_Decision_table:',Toss_Decision_table.columns.to_list())\nprint('The colums for Umpire_table:',Umpire_table.columns.to_list())\nprint('The colums for Team_table:',Team_table.columns.to_list())\nprint('The colums for Ball_by_Ball_table:',Ball_by_Ball_table.columns.to_list())\nprint('The colums for Sysdiagrams_table:',Sysdiagrams_table.columns.to_list())\nprint('The colums for Sqlite_Sequence_table:',Sqlite_Sequence_table.columns.to_list())\nprint('The colums for Match_table:',Match_table.columns.to_list())\nprint('The colums for Rolee_table:',Rolee_table.columns.to_list())\nprint('The colums for Player_Match_table:',Player_Match_table.columns.to_list())","6d10de6b":"##Query 1:- Select all columns from player's table\n\nsql = pd.read_sql(\"\"\"SELECT * \n                    FROM Player_Match;\"\"\", conn)\nsql.head()","6f98b022":"sql = pd.read_sql(\"\"\"\nselect t_one.player_name,\nt_two.player_id,\nt_three.batting_hand\nfrom player t_one\njoin player_match t_two on t_one.player_id = t_two.player_id\njoin batting_style t_three on t_one.batting_hand = t_three.batting_id\n\n\"\"\", conn)\n\n\nsql.head()\n","f6145486":"## Query 21 Batsman vs runs\n\nsql = pd.read_sql(\"\"\"\nselect * from (\nselect\na.striker,\ncount(distinct a.match_id) as Batting_innings,\na.striker_name,\na.role_desc,\na.batting_hand,\nsum(a.runs) as runs\nfrom\n(\nselect\nbyb.match_id as match_id,\nbyb.over_id as over_id,\nbyb.ball_id as ball_id,\nbyb.innings_no as innings_no,\nbyb.team_batting as team_batting,\nstriker,\nnon_striker,\nbowler,\nrole_desc,\nbs.batting_hand as batting_hand,\npl.player_name as striker_name,\nruns_scored as Runs from ball_by_ball byb\njoin batsman_scored bsco on byb.ball_id= bsco.ball_id and byb.match_id= bsco.match_id and byb.over_id= bsco.over_id and byb.innings_no= bsco.innings_no\njoin player_match pm on bsco.match_id = pm.match_id\njoin player pl on byb.striker= pl.player_id\njoin rolee re on pm.role_id=re.role_id\njoin batting_Style bs on pl.batting_hand=bs.batting_id\ngroup by\nstriker,\nbyb.match_id,\nbyb.over_id,\nbyb.ball_id\norder by bsco.innings_no asc\n)a\ngroup by a.striker_name\norder by a.striker\n) b\norder by b.runs desc\n\"\"\", conn) \n\n\nsql.head()","2a2392cd":"sql = pd.read_sql(\"\"\"\n\nselect \nb.striker,\nb.player_name,\nsum(b.fifties) as fifties,\nsum(b.hundreds) as hundreds from (\nselect *,\n(case when a.runs >= 30 then 1 else 0 end) as thirties,\n(case when a.runs >= 50 then 1 else 0 end) as fifties,\n(case when a.runs >= 100 then 1 else 0 end) as hundreds from (\nselect striker,\nbs.match_id,\nplayer_name,\nbyb.innings_no, \nsum(runs_scored) as runs \nfrom ball_by_ball byb\njoin batsman_scored bs on byb.match_id=bs.match_id and byb.over_id=bs.over_id and byb.ball_id=bs.ball_id and byb.innings_no= bs.innings_no\njoin player pl on byb.striker=pl.player_id\ngroup by bs.match_id,\nplayer_name\norder by byb.innings_no\n) a\norder by a.runs desc\n)b\ngroup by b.player_name\norder by b.striker\n\n\"\"\", conn) \n\n\nsql.head()","e75b0f76":"\nsql = pd.read_sql(\"\"\"\nselect\na.match_id,\na.bowler,\nmax(a.wickets),\na.runs_given,\nmax(a.wickets) ||'-'|| a.runs_given AS Best_Bowling_figure\n\nfrom (\nselect\nwt.match_id,\nwt.bowler,\nwt.wickets,\nrt.runs_given\n\nfrom\n(\nselect byb.match_id,bowler, count(byb.ball_id) as wickets from \nball_by_ball byb\njoin wicket_taken wkt on byb.match_id=wkt.match_id and byb.over_id=wkt.over_id and byb.ball_id=wkt.ball_id and byb.innings_no=wkt.innings_no\ngroup by byb.match_id,bowler\n) wt\n\njoin \n(select byb.match_id,bowler, sum(runs_scored) as runs_given from \nball_by_ball byb\njoin batsman_scored bs on byb.match_id=bs.match_id and byb.over_id=bs.over_id and byb.ball_id=bs.ball_id and byb.innings_no=bs.innings_no\ngroup by bs.match_id,bowler\n) rt on rt.match_id=wt.match_id ) a\ngroup by a.bowler\norder by a.wickets desc\n\"\"\", conn) \n\nsql.head()","93a07dcc":"sql = pd.read_sql(\"\"\"\n\nselect\nc.bowler,\nc.player_name,\nc.wickets,\nc.economy_rate,\nc.bowler_strike_rate,\nbest_bowling_table.best_bowling_figure\nfrom (\nselect \na.bowler,\na.player_name,\na.wickets,\nballs_table.balls_bowled as Balls_bowled,\neconomy_table.runs_given as runs_given,\n6*(round(round(economy_table.runs_given,2)\/round(balls_table.balls_bowled,2),2)) as economy_rate,\nround(round(balls_table.balls_bowled,2)\/round(a.wickets,2),2) as bowler_strike_rate\nfrom (\nselect bowler,pl.player_name as player_name,count(out_name) as wickets from wicket_taken wkt\njoin out_type ot on wkt.kind_out=ot.out_id\njoin ball_by_ball byb on byb.match_id=wkt.match_id and byb.over_id=wkt.over_id and byb.ball_id=wkt.ball_id and byb.innings_no=wkt.innings_no\njoin player pl on byb.bowler=pl.player_id\ngroup by player_name\n) a join (select bowler,count(ball_id) as Balls_Bowled from ball_by_ball\ngroup by bowler) balls_table on a.bowler=balls_table.bowler join (select * from (\nselect\na.bowler,\ncount(distinct a.match_id) as Innings_Bowled,\na.bowler_name,\na.role_desc,\nsum(a.runs) as runs_given\nfrom\n(\nselect\nbyb.match_id as match_id,\nbyb.over_id as over_id,\nbyb.ball_id as ball_id,\nbyb.innings_no as innings_no,\nbyb.team_batting as team_batting,\nstriker,\nnon_striker,\nbowler,\nrole_desc,\nbs.batting_hand as batting_hand,\npl.player_name as bowler_name,\nruns_scored as Runs from ball_by_ball byb\njoin batsman_scored bsco on byb.ball_id= bsco.ball_id and byb.match_id= bsco.match_id and byb.over_id= bsco.over_id and byb.innings_no= bsco.innings_no\njoin player_match pm on bsco.match_id = pm.match_id\njoin player pl on byb.bowler= pl.player_id\njoin rolee re on pm.role_id=re.role_id\njoin batting_Style bs on pl.batting_hand=bs.batting_id\ngroup by\nstriker,\nbyb.match_id,\nbyb.over_id,\nbyb.ball_id,\nbsco.innings_no\norder by bsco.innings_no asc\n)a\ngroup by a.bowler_name\norder by a.bowler\n) b\norder by b.runs_given desc) economy_table on a.bowler=economy_table.bowler\norder by a.wickets desc) c join (select\na.match_id,\na.bowler,\nmax(a.wickets),\na.runs_given,\nmax(a.wickets) ||'-'|| a.runs_given AS Best_Bowling_figure\n\nfrom (\nselect\nwt.match_id,\nwt.bowler,\nwt.wickets,\nrt.runs_given\n\nfrom\n(\nselect byb.match_id,bowler, count(byb.ball_id) as wickets from \nball_by_ball byb\njoin wicket_taken wkt on byb.match_id=wkt.match_id and byb.over_id=wkt.over_id and byb.ball_id=wkt.ball_id and byb.innings_no=wkt.innings_no\ngroup by byb.match_id,bowler\n) wt\n\njoin \n(select byb.match_id,bowler, sum(runs_scored) as runs_given from \nball_by_ball byb\njoin batsman_scored bs on byb.match_id=bs.match_id and byb.over_id=bs.over_id and byb.ball_id=bs.ball_id and byb.innings_no=bs.innings_no\ngroup by bs.match_id,bowler\n) rt on rt.match_id=wt.match_id ) a\ngroup by a.bowler\norder by a.wickets desc) best_bowling_table on c.bowler=best_bowling_table.bowler\n\"\"\", conn) \n\n\nsql.head()","f653f9de":"sql = pd.read_sql(\"\"\"\n\nselect \ns.striker,\ns.striker_name,\ns.role_desc,\ns.batting_hand\n,bowling_style_table.bowling_skill,\ns.runs,\ns.matches,\ns.dismissals,\nround(round(s.runs,2)\/round(s.dismissals,2),2) as batt_avg,\ns.Highest_score,\ns.thirties, \ns.fifties,\ns.hundreds,\ns.balls_faced_career,\ns.strike_rate,\ns.wickets_taken,\ns.economy_rate,\ns.strike_rate,\ns.best_bowling_figure\n from (\nselect\nf.striker,\nf.striker_name,\nf.role_desc,\nf.batting_hand,\nf.runs,\nf.matches,\nf.dismissals,\nround(round(f.runs,2)\/round(f.dismissals,2),2) as batt_avg,\nf.Highest_score,\nf.thirties, \nf.fifties,\nf.hundreds,\nf.balls_faced_career,\nf.strike_rate,\nf.wickets_taken,\nbowler_table.economy_rate as economy_rate,\nbowler_table.bowler_strike_rate as strike_rate,\nbowler_table.best_bowling_figure as best_bowling_figure\n\nfrom (\nselect \ng.striker,\ng.striker_name,\ng.role_desc,\ng.batting_hand,\ng.runs,\ng.matches,\ng.dismissals,\nround(round(g.runs,2)\/round(g.dismissals,2),2) as batt_avg,\ng.Highest_score,\ng.thirties, \ng.fifties,\ng.hundreds,\ng.balls_faced_career,\ng.strike_rate,\nbowlers_table.wickets as wickets_taken\n\nfrom (\nselect\nf.striker,\nf.striker_name,\nf.role_desc,\nf.batting_hand,\nf.runs,\nf.matches,\ndissmissals_table.dismissals as dismissals,\nround(round(f.runs,2)\/round(dissmissals_table.dismissals,2),2) as batt_avg,\nf.Highest_score,\nf.thirties, \nf.fifties,\nf.hundreds,\nf.balls_faced_career,\nf.strike_rate\nfrom (\nselect \ne.striker,\ne.striker_name,\ne.role_desc,\ne.batting_hand,\ne.runs,\ne.matches,\nround(round(e.runs,2)\/round(e.matches,2),2) as batt_avg,\ne.Highest_score,\ne.thirties, \ne.fifties,\ne.hundreds,\nsum(ball_face_by_batsman_per_match) as balls_faced_career,\n100*(round(round(e.runs,4)\/round(sum(ball_face_by_batsman_per_match),4),4)) as strike_rate\nfrom (\nselect\nd.striker,\nd.striker_name,\nd.role_desc,\nd.batting_hand,\nd.runs,\nd.matches,\n100*round(round(d.runs,2)\/round(d.matches,2),2) as batt_avg,\nmax(d.max_individual_score_per_match) as Highest_score,\nd.thirties, \nd.fifties,\nd.hundreds\n\nfrom\n(select c.striker,\nc.striker_name,\nc.role_desc,\nc.batting_hand,\nc.runs,\nc.matches,\nc.max_individual_score_per_match,\nfifties_hundreds_table.thirties, \nfifties_hundreds_table.fifties,\nfifties_hundreds_table.hundreds\nfrom (\nselect \nruns_table.striker,\nruns_table.striker_name,\nruns_table.matches,\nruns_table.role_desc,\nruns_table.batting_hand,\nruns_table.runs,\nhighest_score.runs as max_individual_score_per_match from\n(\nselect * from \n(\nselect\na.striker,\ncount(distinct a.match_id) as Matches,\na.striker_name,\na.role_desc,\na.batting_hand,\nsum(a.runs) as runs\nfrom\n(\nselect\nbyb.match_id as match_id,\nbyb.over_id as over_id,\nbyb.ball_id as ball_id,\nbyb.innings_no as innings_no,\nbyb.team_batting as team_batting,\nstriker,\nnon_striker,\nbowler,\nrole_desc,\nbs.batting_hand as batting_hand,\npl.player_name as striker_name,\nruns_scored as Runs from ball_by_ball byb\njoin batsman_scored bsco on byb.ball_id= bsco.ball_id and byb.match_id= bsco.match_id and byb.over_id= bsco.over_id and byb.innings_no= bsco.innings_no\njoin player_match pm on bsco.match_id = pm.match_id\njoin player pl on byb.striker= pl.player_id\njoin rolee re on pm.role_id=re.role_id\njoin batting_Style bs on pl.batting_hand=bs.batting_id\ngroup by\nstriker,\nbyb.match_id,\nbyb.over_id,\nbyb.ball_id\norder by bsco.innings_no asc\n)a\ngroup by a.striker_name\norder by a.striker\n)b\ngroup by b.striker_name,b.striker,b.matches\norder by b.runs desc ) runs_table join (select * from (\nselect striker,\nbs.match_id,\nplayer_name,\nbyb.innings_no, \nsum(runs_scored) as runs \nfrom ball_by_ball byb\njoin batsman_scored bs on byb.match_id=bs.match_id and byb.over_id=bs.over_id and byb.ball_id=bs.ball_id and byb.innings_no= bs.innings_no\njoin player pl on byb.striker=pl.player_id\ngroup by bs.match_id,\nplayer_name\norder by byb.innings_no\n) a\norder by a.runs desc) highest_score on runs_table.striker=highest_score.striker and runs_table.striker=highest_score.striker\n)c\njoin (select \nb.striker,\nb.player_name,\nsum(b.thirties) as thirties,\nsum(b.fifties) as fifties,\nsum(b.hundreds) as hundreds from (\nselect *,\n(case when a.runs >= 30 then 1 else 0 end) as thirties,\n(case when a.runs >= 50 then 1 else 0 end) as fifties,\n(case when a.runs >= 100 then 1 else 0 end) as hundreds from (\nselect striker,\nbs.match_id,\nplayer_name,\nbyb.innings_no, \nsum(runs_scored) as runs \nfrom ball_by_ball byb\njoin batsman_scored bs on byb.match_id=bs.match_id and byb.over_id=bs.over_id and byb.ball_id=bs.ball_id and byb.innings_no= bs.innings_no\njoin player pl on byb.striker=pl.player_id\ngroup by bs.match_id,\nplayer_name\norder by byb.innings_no\n) a\norder by a.runs desc\n)b\ngroup by b.player_name\norder by b.striker) fifties_hundreds_table on c.striker=fifties_hundreds_table.striker\n)d\ngroup by d.striker_name\norder by d.matches desc\n)e join (select match_id,striker,count(ball_id) as ball_face_by_batsman_per_match from ball_by_ball\ngroup by striker,match_id) ball_faced_table on e.striker=ball_faced_table.striker\ngroup by e.striker ) f join (select * from (\nselect player_out,count(out_name) as dismissals from wicket_taken wkt\njoin out_type ot on wkt.kind_out=ot.out_id\ngroup by player_out\n) a) dissmissals_table on f.striker=dissmissals_table.player_out\ngroup by f.striker\n) g join (select * from (\nselect bowler,pl.player_name as player_name,count(out_name) as wickets from wicket_taken wkt\njoin out_type ot on wkt.kind_out=ot.out_id\njoin ball_by_ball byb on byb.match_id=wkt.match_id and byb.over_id=wkt.over_id and byb.ball_id=wkt.ball_id and byb.innings_no=wkt.innings_no\njoin player pl on byb.bowler=pl.player_id\ngroup by player_name\n) a\norder by a.wickets desc) bowlers_table on g.striker=bowlers_table.bowler\norder by g.striker) f \njoin (select\nc.bowler,\nc.player_name,\nc.wickets,\nc.economy_rate,\nc.bowler_strike_rate,\nbest_bowling_table.best_bowling_figure\nfrom (\nselect \na.bowler,\na.player_name,\na.wickets,\nballs_table.balls_bowled as Balls_bowled,\neconomy_table.runs_given as runs_given,\n6*(round(round(economy_table.runs_given,2)\/round(balls_table.balls_bowled,2),2)) as economy_rate,\nround(round(balls_table.balls_bowled,2)\/round(a.wickets,2),2) as bowler_strike_rate\nfrom (\nselect bowler,pl.player_name as player_name,count(out_name) as wickets from wicket_taken wkt\njoin out_type ot on wkt.kind_out=ot.out_id\njoin ball_by_ball byb on byb.match_id=wkt.match_id and byb.over_id=wkt.over_id and byb.ball_id=wkt.ball_id and byb.innings_no=wkt.innings_no\njoin player pl on byb.bowler=pl.player_id\ngroup by player_name\n) a join (select bowler,count(ball_id) as Balls_Bowled from ball_by_ball\ngroup by bowler) balls_table on a.bowler=balls_table.bowler join (select * from (\nselect\na.bowler,\ncount(distinct a.match_id) as Innings_Bowled,\na.bowler_name,\na.role_desc,\nsum(a.runs) as runs_given\nfrom\n(\nselect\nbyb.match_id as match_id,\nbyb.over_id as over_id,\nbyb.ball_id as ball_id,\nbyb.innings_no as innings_no,\nbyb.team_batting as team_batting,\nstriker,\nnon_striker,\nbowler,\nrole_desc,\nbs.batting_hand as batting_hand,\npl.player_name as bowler_name,\nruns_scored as Runs from ball_by_ball byb\njoin batsman_scored bsco on byb.ball_id= bsco.ball_id and byb.match_id= bsco.match_id and byb.over_id= bsco.over_id and byb.innings_no= bsco.innings_no\njoin player_match pm on bsco.match_id = pm.match_id\njoin player pl on byb.bowler= pl.player_id\njoin rolee re on pm.role_id=re.role_id\njoin batting_Style bs on pl.batting_hand=bs.batting_id\ngroup by\nstriker,\nbyb.match_id,\nbyb.over_id,\nbyb.ball_id,\nbsco.innings_no\norder by bsco.innings_no asc\n)a\ngroup by a.bowler_name\norder by a.bowler\n) b\norder by b.runs_given desc) economy_table on a.bowler=economy_table.bowler\norder by a.wickets desc) c join (select\na.match_id,\na.bowler,\nmax(a.wickets),\na.runs_given,\nmax(a.wickets) ||'-'|| a.runs_given AS Best_Bowling_figure\n\nfrom (\nselect\nwt.match_id,\nwt.bowler,\nwt.wickets,\nrt.runs_given\n\nfrom\n(\nselect byb.match_id,bowler, count(byb.ball_id) as wickets from \nball_by_ball byb\njoin wicket_taken wkt on byb.match_id=wkt.match_id and byb.over_id=wkt.over_id and byb.ball_id=wkt.ball_id and byb.innings_no=wkt.innings_no\ngroup by byb.match_id,bowler\n) wt\n\njoin \n(select byb.match_id,bowler, sum(runs_scored) as runs_given from \nball_by_ball byb\njoin batsman_scored bs on byb.match_id=bs.match_id and byb.over_id=bs.over_id and byb.ball_id=bs.ball_id and byb.innings_no=bs.innings_no\ngroup by bs.match_id,bowler\n) rt on rt.match_id=wt.match_id ) a\ngroup by a.bowler\norder by a.wickets desc) best_bowling_table on c.bowler=best_bowling_table.bowler) bowler_table on f.striker_name=bowler_table.player_name\n) s join (select player_name,bl.bowling_skill from player p\njoin bowling_style bl on p.bowling_skill=bl.bowling_id) bowling_style_table on s.striker_name=bowling_style_table.player_name\n\"\"\", conn) \n\n\nsql.head()","14549731":"# Note:-  We all know the saying \"Learning by doing\" , a humble suggestion is to try and solve the usecase on your own, before looking into the solution. This can be solved in multiple ways, please feel free to post you solutions in the comments , so that the larger audience can benfit from the effort\n\n\n# If you're unable to arrive the solution, cheers! and thanks for trying. Please look at the approach to solutions below","d32c189e":"# Note:- If you have any doubts\/clarifications, please feel free to mention it in the comments column","76dd4248":"# **Master Query:-**","e98b1a1d":"# **Data Base Schema**\n![image.png](attachment:65d52c79-36bd-4701-b9e1-21598a18e3f0.png)","5ddf9204":"# **Step 2.a :- Once the setup is done, let's push all the sqlite tables into a set of DFs, this can be done using the pandas package.**\n# **Step 2.b :- We can use the column function to display the set of titles associated within each table**\n# **Step 2.c :- The idenfied column titles will be pushed into a list and displayed for further reference. This effort will help us a high level understanding of the table schema**\n","a04ffc55":"# Hey Kaggle Fam :)! In this tutorial we will be crafting a step by step approach to write advacned SQL queries in Kaggle. We will be taking an example from on one of my SQL NBs \"IPL Dive Deep using SQL\", link:- https:\/\/www.kaggle.com\/arvinthsss\/ipl-dive-deep-using-sql.\n# If you'd like a buddy mentor for SQL and Data Analytics i'm just a ping away :)!","2c513204":"## ***Chunk Series 1:- Striker vs Striker ID***","df383445":"# **How to Approach the problem?**\n\n# **To arrive at our desired results, let's breakdown the problem into a series of chunks were we write SQL code using the available schema and understand the data better.**\n\n# **Based on the chunks, we will circle back on integrating the sets of code to a single SQL query that matches our requirement.**\n\n# **Each chunk is unique, we will be writing queries using a set SQL clauses and functions, if you're a beginner to SQL or an advanced user looking for a quick refresher, i would recommend https:\/\/www.kaggle.com\/arvinthsss\/sql-syntax-series-using-netflix-dataset,  this SQL NB contains a series of functions and clauses that will get us get started.**","0e545b82":"# **Step 1:- Setup a SQLite Enviroment in the NB**","94b19aff":"# **Chunk Series 3:- 30s,50s and 100s**","ddb413cc":"## The prepared chunks will be fused into a single long query, we can simply join the relevant chunks using the striker ID and name, as the players are unique entities in the table, to map the bowlers and batters in the match table we can join the entities on bowler=bowler_id and striker=player_id. The Data Schema will help us visually track the data journey across the mutliple tables","4fe0e6c0":"## **Chunk Series 2:- Batting Runs and Innings**","99dd71bc":"# **Chunk Series 4:- Bowler best Bowling Figures**","e1f3523e":"# **Chunk Series 5:- Bowler Stats Overall**","ed6f66ff":"# **Step 3:- Test the Query**","f3066fab":"# **As our setup is complete, let's further jump onto solving a problem, we will be derving a complete career matrix for the players**\n# **The data list contains**\n## 1.Striker ID\n## 2.Striker_Name\n## 3.Role_Desc\n## 4.Batting_Hand\n## 5.Bowling_Skill\n## 6.Total Runs Scored in IPL\n## 7.Total Games Played\n## 8.Total number of time Dismised\n## 9.Batting Avg in IPL\n## 10.Highest Score\n## 11.Number of 30s or Above\n## 12.Number of 50s or Above\n## 13.Numbe of 100s or Above\n## 14.Total Balls Faced in the Career\n## 15.Player Batting Strike\n## 16.Total Wickets Taken\n## 17.Economy_Rate\n## 18.Strike Rate\n## 19.Best Bowling Figures\n"}}