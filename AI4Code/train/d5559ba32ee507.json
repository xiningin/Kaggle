{"cell_type":{"8a89976e":"code","26411241":"code","cebf7884":"code","be8d3d0d":"code","ae25740c":"code","8a5bd606":"code","5283f331":"code","739b8587":"code","9205b352":"code","2e97d1c2":"code","7c4ad2b3":"code","203cc9fc":"code","c2725f67":"code","5fac8cd6":"code","e86f882a":"code","aa2f1b12":"code","d9c46f83":"code","99c34d0b":"code","cfd2ea8a":"code","f7cc5fe3":"code","e234c5e0":"code","224fd00d":"code","4668f78b":"markdown"},"source":{"8a89976e":"# library imports\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom tensorflow import random\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models  import Sequential\nfrom keras.layers import Dense, LSTM, Dropout\nfrom keras import metrics # metrics.\n\nimport keras # keras.metrics\nimport shutil","26411241":"def filesystem():\n    # use this method, when run locally\n\n    try:\n        os.mkdir('data')\n    except:\n        pass\n    try:\n        os.mkdir(\"data\/current\")\n    except:\n        pass\n    print(\"file system is all set\")\n#filesystem()","cebf7884":"data = pd.read_csv('..\/input\/btcdaily\/btcdaily.csv',  index_col = 0, parse_dates = True)","be8d3d0d":"training = data[['open']].values","ae25740c":"# to rescale data for training\nscaler =  MinMaxScaler(feature_range = (0, 1))\n\n\"\"\"\nThere are several tasks that can be changed inside the operation that's one the progress to loeading the rest of the data -->\n\n\n\"\"\"","8a5bd606":"training_scaled = scaler.fit_transform(training)\ntraining_data_points = 300\ntesting_scaled = training_scaled[-400-training_data_points:]\ntraining_scaled = training_scaled[-2400:-400] \nprint(len(training_scaled), len(testing_scaled))\n","5283f331":"def prepare_train_test(training_scaled, testing_scaled):\n    X_train = []\n    y_train = []\n    for i in range(training_data_points, len(training_scaled)):\n        X_train.append(training_scaled[i-training_data_points:i, 0])\n        y_train.append(training_scaled[i, 0])\n    X_train, y_train = np.array(X_train), np.array(y_train)\n\n    X_test = []\n    y_test = []\n    for i in range(training_data_points, len(testing_scaled)):\n        X_test.append(testing_scaled[i-training_data_points:i, 0])\n        y_test.append(testing_scaled[i, 0])\n    X_test, y_test = np.array(X_test), np.array(y_test)\n    X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))\n    X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\n    print(X_train.shape, X_test.shape)\n    return X_train, y_train, X_test, y_test\n\nX_train, y_train, X_test, y_test  = prepare_train_test(training_scaled, testing_scaled)","739b8587":"def get_model():\n    model = Sequential()\n    model.add(LSTM(units = 100, return_sequences = True, input_shape = (X_train.shape[1], 1)))\n    model.add(LSTM(units = 100, return_sequences = True))\n    model.add(LSTM(units = 50, return_sequences = True))\n    model.add(LSTM(units = 50))\n    model.add(Dense(units = 1))\n    # tweak the optimizer, loss functions and metrics here --> below ---> \n    model.compile(optimizer = 'adam', loss = ['mse',\"mape\"] , metrics=[keras.metrics.mae, keras.metrics.mape])\n    \n    return model\nmodel = get_model()","9205b352":"model.summary()","2e97d1c2":"# training the model\n\nhistory = model.fit(X_train, y_train, epochs = 100, batch_size = 60, validation_data=(X_test, y_test))","7c4ad2b3":"model.save_weights(\"lstm_stock_price_predict.h5\")\n","203cc9fc":"history.history.keys()","c2725f67":"def training_loss_graph(history):\n    plt.plot(history.history['loss'], label = 'Training loss')\n    plt.plot(history.history['val_loss'], label = 'Validation loss')\n    plt.legend()\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Loss\")\n    plt.show()\n    \n    plt.plot(history.history['mean_absolute_percentage_error'], label = \"MAPE_training\")\n    plt.plot(history.history[\"val_mean_absolute_percentage_error\"], label =\"MAPE_validation\")\n    plt.legend()\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"MAPE_Error\")\n    plt.show()\n    \n    # mean absolute error\ntraining_loss_graph(history)","5fac8cd6":"\ndef get_predicted_INV_scaled(X_test):\n    predicted_prices = model.predict(X_test)\n    predicted_prices = scaler.inverse_transform(predicted_prices)\n    prices = scaler.inverse_transform([y_test])\n    return predicted_prices, prices\npredicted_prices, prices = get_predicted_INV_scaled(X_test)","e86f882a":"def show_graph_result(prices, predicted_prices):\n    # be mindful that the data is the global\n    index = data.index.values[-len(prices[0]):]\n    test_result = pd.DataFrame(columns = [\"real\", 'predicted'])\n    test_result['real'] = prices[0]\n    test_result['predicted'] = predicted_prices\n    test_result.index = index\n    test_result.plot(figsize= (16, 10))\n    plt.title(\"Actual and Predicted prices from the test\")\n    plt.ylabel(\"Price\")\n    plt.xlabel(\"Time step\")\n    plt.show()\n    \nshow_graph_result(prices, predicted_prices)","aa2f1b12":"# future next --> 30 days what is going to happen","d9c46f83":"last_60_days = X_test[-1]\nprint(X_test.shape,last_60_days.shape)","99c34d0b":"#l.reshape(1, X_test[])","cfd2ea8a":"def get_number_days_predictions(days = 7):\n    \n    current = X_test[-1]\n    print(current.shape)\n    for i in range(days):\n        predicted = model.predict(np.reshape(current, (1, current.shape[0], 1)))\n        current1 = list(current[1:])\n        current1.append(predicted[0])\n        current = np.array(current1)\n        print(\" --- \")\n    return current[-days:]\n\n\ndef generate_index(n):\n    import datetime\n    base = datetime.datetime.today()\n    date_list  = [base + datetime.timedelta(days = x) for x in range(n)]\n    return date_list\n\n\ndef get_result_frame(results, date_list):\n    predict_df = pd.DataFrame(columns = ['predictions'])\n    \n    predict_df['predictions'] = results\n    predict_df.index = date_list\n    return predict_df\n\n\ndays_to_predict = 7\n\ndate_list = generate_index(days_to_predict)\n\nresults = get_number_days_predictions(days_to_predict)\n\nresults = scaler.inverse_transform(results).reshape(-1)   ","f7cc5fe3":"predict_df  = get_result_frame(results, date_list)\npredict_df.plot()","e234c5e0":"#1700*300*6\n\"\"\"\nHigh, Low, Close, Open, Volume, Adj Close\n\n\"\"\"","224fd00d":"\"\"\"\nCNN  -- [nx6]--> image\n\n\"\"\"","4668f78b":"#  This is simple an..\/input\/btcdaily\/ementation of the LSTM for the prediction of time series data, specially on the stock and cryptocurrency"}}