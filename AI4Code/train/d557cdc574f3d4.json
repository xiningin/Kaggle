{"cell_type":{"fbaa1803":"code","788d814d":"code","11ee7370":"code","2be57052":"code","b77f327f":"code","2cad2600":"code","48d73cc8":"code","446ba07b":"code","0a917514":"code","4e6ab1d2":"code","9e454851":"code","461c92ed":"code","24f585ae":"code","f0f2fc1b":"code","75a06ed1":"code","bf725b44":"code","d67a8fa3":"code","7437433a":"code","a2168af1":"code","4fda26e1":"code","7dd40db6":"code","fa9039ea":"code","2ad1711b":"code","08c4f4f6":"code","ca06bb7b":"code","5aa8041a":"code","ecec5417":"code","ce0d1b66":"code","cf813883":"code","f829095d":"code","2f15926d":"code","11891c42":"code","80692b7f":"code","f42afc40":"code","e752b611":"code","7ff8d2ae":"code","b26cdf68":"markdown","d19e98bc":"markdown","fb921d68":"markdown","7067726e":"markdown","6ed4c6bc":"markdown","749754c5":"markdown","19c6e86b":"markdown","72ce913d":"markdown","21ffee1f":"markdown"},"source":{"fbaa1803":"import pandas as pd\nimport datetime as dt\nimport numpy as np\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 15, 6\nfrom patsy import dmatrices\nfrom pandas import Series\nfrom matplotlib import pyplot\nfrom datetime import datetime\nfrom matplotlib.pyplot import figure\n\nimport statsmodels.api as sm\n\nfigure(num=None, figsize=(16, 12), dpi=80, facecolor='w', edgecolor='k')\n\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing, SimpleExpSmoothing, Holt\n\nimport sys\nimport warnings\nimport itertools\nwarnings.filterwarnings(\"ignore\")\n\n\nimport statsmodels.tsa.api as smt\nimport statsmodels.formula.api as smf\n\nfrom statsmodels.tsa.stattools import adfuller\n\n\nfrom statsmodels.tsa.arima_model import ARIMA","788d814d":"airpax_data = pd.read_csv(\"..\/input\/AirPassengers.csv\")\nairpax_data.head()","11ee7370":"#Parse strings to datetime type\nairpax_data['Month'] = pd.to_datetime(airpax_data['Month'],infer_datetime_format=True) #convert from string to datetime\nairpax_data = airpax_data.set_index(['Month'])","2be57052":"## plot graph\nplt.xlabel('Date')\nplt.ylabel('Number of air passengers')\nplt.plot(airpax_data)","b77f327f":"#Test whether Timeseries is Stationary or not\ndef test_stationarity(timeseries):\n    \n    #Determing rolling statistics\n    rolmean = timeseries.rolling(window=12).mean()\n    rolstd = timeseries.rolling(window=12).std()\n\n    #Plot rolling statistics:\n    orig = plt.plot(timeseries, color='blue',label='Original')\n    mean = plt.plot(rolmean, color='red', label='Rolling Mean')\n    std = plt.plot(rolstd, color='black', label = 'Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show(block=False)\n    \n    #Perform Dickey-Fuller test:\n    print ('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries['#Passengers'], autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print (dfoutput)","2cad2600":"test_stationarity(airpax_data)","48d73cc8":"airpax_df1 = airpax_data.diff(periods=1)\nairpax_df1.dropna(inplace=True)\ntest_stationarity(airpax_df1)","446ba07b":"airpax_log = np.log10(airpax_data)\nairpax_log.dropna(inplace=True)\ntest_stationarity(airpax_log)","0a917514":"airpax_log_df = airpax_log.diff(periods=1)\nairpax_log_df.dropna(inplace=True)\ntest_stationarity(airpax_log_df)","4e6ab1d2":"airpax_decompose = sm.tsa.seasonal_decompose(airpax_data['#Passengers'], model=\"multiplicative\", freq=12)\nairpax_decompose.plot()\nplt.show()","9e454851":"trend = airpax_decompose.trend\nseasonal = airpax_decompose.seasonal\nresidual = airpax_decompose.resid","461c92ed":"print(\"Trend \\n\",trend.head(24))\nprint(\"Seasonal \\n\",seasonal.head(24))\nprint(\"Residual \\n\",residual.head(24))","24f585ae":"train=airpax_data[0:int(len(airpax_data)*0.80)] \ntest=airpax_data[int(len(airpax_data)*0.80):]\n#Split the data for 21 month test\n\ntrain_log = np.log10(train['#Passengers'])","f0f2fc1b":"def mean_absolute_percentage_error(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100","75a06ed1":"model_airpax = ExponentialSmoothing(np.asarray(train['#Passengers']),seasonal_periods=24, trend='add',seasonal='mul').fit(optimized=True)","bf725b44":"airpax_Holt = test.copy()","d67a8fa3":"airpax_Holt['Holt']=model_airpax.forecast(len(test['#Passengers']))","7437433a":"mean_absolute_percentage_error(test['#Passengers'],airpax_Holt['Holt'])","a2168af1":"model_airpax.params","4fda26e1":"airpax_Holt['Pax'] = model_airpax.forecast(len(test['#Passengers']))\nplt.figure(figsize=(16,8))\nplt.plot(train['#Passengers'], label='Train')\nplt.plot(test['#Passengers'], label='Test')\nplt.plot(airpax_Holt['Holt'], label='Holt Trend Add Seasonal Mul')\nplt.legend(loc=0)","7dd40db6":"fig, axes = plt.subplots(1, 2)\nfig.set_figwidth(12)\nfig.set_figheight(4)\nsmt.graphics.plot_acf(airpax_log_df, lags=20, ax=axes[0])\nsmt.graphics.plot_pacf(airpax_log_df, lags=20, ax=axes[1])\nplt.tight_layout()","fa9039ea":"# Define the p, d and q parameters to take any value between 0 and 2\np = d = q = range(0, 2)\n\n# Generate all different combinations of p, d and q triplets\npdq = list(itertools.product(p, d, q))\n\n# Generate all different combinations of seasonal p, q and q triplets\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]","2ad1711b":"best_aic = np.inf\nbest_pdq = None\nbest_seasonal_pdq = None\ntemp_model = None\ntrain_log = np.log10(train['#Passengers'])","08c4f4f6":"for param in pdq: #Non-Seasonal\n    for param_seasonal in seasonal_pdq:\n        \n        try:\n            temp_model = sm.tsa.statespace.SARIMAX(train_log,\n                                             order = param,\n                                             seasonal_order = param_seasonal)\n            results = temp_model.fit()\n\n            # print(\"SARIMAX{}x{}12 - AIC:{}\".format(param, param_seasonal, results.aic))\n            if results.aic < best_aic:\n                best_aic = results.aic\n                best_pdq = param\n                best_seasonal_pdq = param_seasonal #Store the best param values : AIC, P, D, Q [Non-S \/ Seas]\n        except:\n            #print(\"Unexpected error:\", sys.exc_info()[0])\n            continue\nprint(\"Best SARIMAX{}x{}12 model - AIC:{}\".format(best_pdq, best_seasonal_pdq, best_aic))","ca06bb7b":"mod = sm.tsa.statespace.SARIMAX(train_log,\n                                order=(0,1,1),\n                                seasonal_order=(1,0,1,12),\n                                enforce_stationarity=True)\n\nbest_results = mod.fit()\n\nprint(best_results.summary().tables[1])","5aa8041a":"best_results.summary().tables[1]","ecec5417":"pred_dynamic = best_results.get_prediction(start=pd.to_datetime('2012-01-01'), dynamic=True, full_results=True)\n","ce0d1b66":"pred_dynamic_ci = pred_dynamic.conf_int()","cf813883":"pred99 = best_results.get_forecast(steps=24, alpha=0.1)","f829095d":"# Extract the predicted and true values of our time series\nsales_ts_forecasted = pred_dynamic.predicted_mean\ntestCopy = test.copy()\ntestCopy['Passengers_Forecast'] = np.power(10, pred99.predicted_mean)","2f15926d":"# Compute the root mean square error\nmse = ((testCopy['#Passengers'] - testCopy['Passengers_Forecast']) ** 2).mean()\nrmse = np.sqrt(mse)\nprint('The Root Mean Squared Error of our forecasts is {}'.format(round(rmse, 3)))","11891c42":"axis = train['#Passengers'].plot(label='Train Sales', figsize=(10, 6))\ntestCopy['#Passengers'].plot(ax=axis, label='Test Sales', alpha=0.7)\ntestCopy['Passengers_Forecast'].plot(ax=axis, label='Forecasted ', alpha=0.7)\naxis.set_xlabel('Years')\naxis.set_ylabel('Passengers')\nplt.legend(loc='best')\nplt.show()\nplt.close()","80692b7f":"# Get forecast 36 steps (3 years) ahead in future\nn_steps = 36\npred_uc_99 = best_results.get_forecast(steps=36, alpha=0.01) # alpha=0.01 signifies 99% confidence interval\npred_uc_95 = best_results.get_forecast(steps=36, alpha=0.05) # alpha=0.05 95% CI\n\n# Get confidence intervals 95% & 99% of the forecasts\npred_ci_99 = pred_uc_99.conf_int()\npred_ci_95 = pred_uc_95.conf_int()","f42afc40":"n_steps = 36\nidx = pd.date_range(airpax_data.index[-1], periods=n_steps, freq='MS')\nfc_95 = pd.DataFrame(np.column_stack([np.power(10, pred_uc_95.predicted_mean), np.power(10, pred_ci_95)]), \n                     index=idx, columns=['forecast', 'lower_ci_95', 'upper_ci_95'])\nfc_99 = pd.DataFrame(np.column_stack([np.power(10, pred_ci_99)]), \n                     index=idx, columns=['lower_ci_99', 'upper_ci_99'])\nfc_all = fc_95.combine_first(fc_99)\nfc_all = fc_all[['forecast', 'lower_ci_95', 'upper_ci_95', 'lower_ci_99', 'upper_ci_99']] # just reordering columns\nfc_all.head()","e752b611":"# plot the forecast along with the confidence band\naxis = airpax_data['#Passengers'].plot(label='Observed', figsize=(8, 4))\nfc_all['forecast'].plot(ax=axis, label='Forecast', alpha=0.7)\naxis.fill_between(fc_all.index, fc_all['lower_ci_95'], fc_all['upper_ci_95'], color='k', alpha=.15)\naxis.set_xlabel('Years')\naxis.set_ylabel('Tractor Sales')\nplt.legend(loc='best')\nplt.show()","7ff8d2ae":"best_results.plot_diagnostics(lags=30, figsize=(16,12))\nplt.show()","b26cdf68":"- Critical values are no where close to the Test Statistics. Hence, we can say that our Time Series at the moment is not stationary","d19e98bc":"### Time Series Decomposition","fb921d68":"### Double Exponential (Holt)","7067726e":"- The rolling values appear to be varying slightly but there is no specific trend.\n- The test statistic is smaller than the 10% critical values so we can say with 95% confidence that this is a stationary series.","6ed4c6bc":"### Building Models\n","749754c5":"- From the above graph, we see that rolling mean has a trend component and rolling standard deviation is fairly constant with time. ","19c6e86b":"### Plot ACF and PACF for residuals of ARIMA model","72ce913d":"### Forecast sales using the best fit ARIMA model\n","21ffee1f":"### Plotting ACF & PACF"}}