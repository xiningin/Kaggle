{"cell_type":{"97ec2a90":"code","ae41182a":"code","dfb3c779":"code","315b3c8d":"code","5339ef2f":"code","c3be7f8d":"code","e8ad291d":"code","706450af":"code","36435667":"markdown","58282087":"markdown","50cc7362":"markdown"},"source":{"97ec2a90":"from tensorflow.keras.layers import Input, Dense, BatchNormalization, Dropout, Concatenate, Lambda, GaussianNoise, Activation\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.losses import BinaryCrossentropy\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.layers.experimental.preprocessing import Normalization\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nfrom random import choices","ae41182a":"SEED = 1111\n\ntf.random.set_seed(SEED)\nnp.random.seed(SEED)\n\ntrain = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv')\ntrain = train.reset_index(drop = True) \ntrain = train[train['weight'] != 0]\n\ntrain.fillna(train.mean(),inplace=True)\n\n\ntrain['action'] = ((train['resp'].values) > 0).astype(int)","dfb3c779":"features = [c for c in train.columns if \"feature\" in c]\n\nf_mean = np.mean(train[features[1:]].values,axis=0)\n\nresp_cols = ['resp_1', 'resp_2', 'resp_3', 'resp', 'resp_4']\n\nX_train = train.loc[:, train.columns.str.contains('feature')]\n#y_train = (train.loc[:, 'action'])\n\ny_train = np.stack([(train[c] > 0).astype('int') for c in resp_cols]).T","315b3c8d":"def create_mlp(\n    num_columns, num_labels, hidden_units, dropout_rates, label_smoothing, learning_rate\n):\n\n    inp = tf.keras.layers.Input(shape=(num_columns,))\n    x = tf.keras.layers.BatchNormalization()(inp)\n    x = tf.keras.layers.Dropout(dropout_rates[0])(x)\n    for i in range(len(hidden_units)):\n        x = tf.keras.layers.Dense(hidden_units[i])(x)\n        x = tf.keras.layers.BatchNormalization()(x)\n        x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n        x = tf.keras.layers.Dropout(dropout_rates[i + 1])(x)\n\n    x = tf.keras.layers.Dense(num_labels)(x)\n    out = tf.keras.layers.Activation(\"sigmoid\")(x)\n\n    model = tf.keras.models.Model(inputs=inp, outputs=out)\n    model.compile(\n        optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate),\n        loss=tf.keras.losses.BinaryCrossentropy(label_smoothing=label_smoothing),\n        metrics=tf.keras.metrics.AUC(name=\"AUC\"),\n    )\n\n    return model","5339ef2f":"epochs = 200\nbatch_size = 4096\nhidden_units = [160, 160, 160]\ndropout_rates = [0.2, 0.2, 0.2, 0.2]\nlabel_smoothing = 1e-2\nlearning_rate = 1e-3\n\nUnder_85 = create_mlp(\n    130, 5, hidden_units, dropout_rates, label_smoothing, learning_rate\n    )\nOver_85 = create_mlp(\n    130, 5, hidden_units, dropout_rates, label_smoothing, learning_rate\n    )","c3be7f8d":"Under_85.load_weights(f'..\/input\/under85\/model_under.h5')\nOver_85.load_weights(f'..\/input\/over85\/model_over.h5')","e8ad291d":"O_models = []\nU_models = []\n\nO_models.append(Over_85)\nU_models.append(Under_85)\n\nth = 0.5000","706450af":"f = np.median\n\nimport janestreet\nenv = janestreet.make_env()\nfor (test_df, pred_df) in tqdm(env.iter_test()):\n    if test_df['weight'].item() > 0:\n        x_tt = test_df.loc[:, features].values\n        if np.isnan(x_tt[:, 1:].sum()):\n            x_tt[:, 1:] = np.nan_to_num(x_tt[:, 1:]) + np.isnan(x_tt[:, 1:]) * f_mean\n        O_pred = np.mean([model(x_tt, training = False).numpy() for model in O_models],axis=0)\n        O_pred = f(O_pred)\n        U_pred = np.mean([model(x_tt, training = False).numpy() for model in U_models],axis=0)\n        U_pred = f(U_pred)\n        \n        pred_df.action = np.where(0.95*O_pred + 0.05*U_pred >= th, 1, 0).astype(int)\n    else:\n        pred_df.action = 0\n    env.predict(pred_df)","36435667":"# **IF This Kernel Helps.. Please Upvote**","58282087":"That's it!","50cc7362":"Loaded model weights trained with data from date under 85, over 85.\nEnsembled "}}