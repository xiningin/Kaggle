{"cell_type":{"dcb885a3":"code","be559808":"code","0023d149":"code","5377ba55":"code","53764403":"code","3800ce29":"code","f02184c3":"code","3365bf1e":"code","9250f75f":"code","3dca699c":"code","e3d217e9":"code","bc5f743d":"code","3d2849c0":"code","49e341a3":"code","5040abd7":"code","8d4bd7c6":"code","8c354611":"code","76dd8e9e":"code","5a3238c4":"code","70b92da6":"code","f6d70611":"code","c96be3c4":"code","77f319f4":"code","fe24b0fc":"code","9bf4b59c":"code","b55b248c":"code","5ef3450c":"code","9053ffb0":"code","d05c43d4":"code","9ebfd5b9":"markdown","6f3044e3":"markdown"},"source":{"dcb885a3":"\nimport numpy as np\nimport pandas as pd\nimport glob\nimport time\nimport pandas as pd\n# from xml.dom import minidom\n\n\nimport os\nimport matplotlib.pyplot as plt\nimport keras\n\nimport cv2","be559808":"df=pd.read_csv('\/kaggle\/input\/cross-site-scripting-xss-dataset-for-deep-learning\/XSS_dataset.csv', encoding='utf-8-sig')","0023d149":"df.head()","5377ba55":"df=df[df.columns[-2:]]  # Only get sentence and labels","53764403":"df.head()","3800ce29":"# Get Sentences data from data frame\nsentences=df['Sentence'].values\nsentences[1]","f02184c3":"print(len(sentences))","3365bf1e":"# Convert to ASCII\n\ndef convert_to_ascii(sentence):\n    sentence_ascii=[]\n\n    for i in sentence:\n        \n        \n        \"\"\"Some characters have values very big e.d 8221 adn some are chinese letters\n        I am removing letters having values greater than 8222 and for rest greater \n        than 128 and smaller than 8222 assigning them values so they can easily be normalized\"\"\"\n       \n        if(ord(i)<8222):      # \u201d has ASCII of 8221\n            \n            if(ord(i)==8217): # \u2019  :  8217\n                sentence_ascii.append(134)\n            \n            \n            if(ord(i)==8221): # \u201d  :  8221\n                sentence_ascii.append(129)\n                \n            if(ord(i)==8220): # \u201c  :  8220\n                sentence_ascii.append(130)\n                \n                \n            if(ord(i)==8216): # \u2018  :  8216\n                sentence_ascii.append(131)\n                \n            if(ord(i)==8217): # \u2019  :  8217\n                sentence_ascii.append(132)\n            \n            if(ord(i)==8211): # \u2013  :  8211\n                sentence_ascii.append(133)\n                \n                \n            \"\"\"\n            If values less than 128 store them else discard them\n            \"\"\"\n            if (ord(i)<=128):\n                    sentence_ascii.append(ord(i))\n    \n            else:\n                    pass\n            \n\n    zer=np.zeros((10000))\n\n    for i in range(len(sentence_ascii)):\n        zer[i]=sentence_ascii[i]\n\n    zer.shape=(100, 100)\n\n\n#     plt.plot(image)\n#     plt.show()\n    return zer\n","9250f75f":"\n\n# send each sentence to be converted to ASCII\n\n\narr=np.zeros((len(sentences),100,100))\n\nfor i in range(len(sentences)):\n    \n    image=convert_to_ascii(sentences[i])\n\n    x=np.asarray(image,dtype='float')\n    image =  cv2.resize(x, dsize=(100,100), interpolation=cv2.INTER_CUBIC)\n    image\/=128\n\n    \n#     if i==1:\n#         plt.plot(image)\n#         plt.show()    \n    arr[i]=image\n\n","3dca699c":"print(\"Input data shape : \", arr.shape)","e3d217e9":"# Reshape data for input to CNN\ndata = arr.reshape(arr.shape[0], 100, 100, 1)","bc5f743d":"data.shape","3d2849c0":"y=df['Label'].values","49e341a3":"# Split into train\/test data\nfrom sklearn.model_selection import train_test_split\ntrainX, testX, trainY, testY = train_test_split(data,y, test_size=0.2, random_state=42)","5040abd7":"# import libraries for Making Model\nimport tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Conv2D, MaxPooling2D,Flatten,Dropout,MaxPool2D, BatchNormalization","8d4bd7c6":"# A basic CNN Model\n# Number of layers = 11\n# Number of Convolutional layer: 3\n\nmodel=tf.keras.models.Sequential([\n    \n    tf.keras.layers.Conv2D(64,(3,3), activation=tf.nn.relu, input_shape=(100,100,1)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Conv2D(128,(3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Conv2D(256,(3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    \n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(256, activation='relu'),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n    \n])","8c354611":"\nmodel.compile(loss='binary_crossentropy', \n              optimizer='adam', \n              metrics=['accuracy'])\nmodel.summary()","76dd8e9e":"# Stop when validation accuracy > 97\n\nclass myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('val_accuracy')>0.97):\n            print(\" \\n Reached 97% + validation accuracy\")\n            self.model.stop_training=True\ncallbacks = myCallback()","5a3238c4":"batch_size = 128\nnum_epoch = 10\n#model training\nmodel_log = model.fit(trainX, trainY,\n          batch_size=batch_size,\n          epochs=num_epoch,\n          verbose=1,\n          validation_data=( testX,  testY)\n#                        callbacks=[callbacks]\n                     )","70b92da6":"# predict for test set\npred=model.predict(testX)\n","f6d70611":"# Threshold values predicted\n\nfor i in range(len(pred)):\n    if pred[i]>0.5:\n        pred[i]=1\n    elif pred[i]<=0.5:\n        pred[i]=0\n\n","c96be3c4":"# Count True predicted and wrong predicted\n\ntrue=0\nfalse=0\n\nfor i in range(len(pred)):\n    if pred[i] == testY[i]:\n        true+=1\n    else:\n        false+=1\n        \nprint(\"correct predicted :: \", true)\nprint(\"false prediction :: \", false)","77f319f4":"# Number of attack and benign data in test set\n\nattack=0\nbenign=0\nfor i in range(len(testY)):\n    if testY[i]==1:\n        attack+=1\n    else:\n        benign+=1\n\nprint(\"Attack data in test set :: \", attack)\nprint(\" Benign data in test set :: \", benign)","fe24b0fc":"# Takes True positive, true negative, false positive and false negative as input\n# Returns Accuracy\n\ndef accuracy_function(tp,tn,fp,fn):\n    \n    accuracy = (tp+tn) \/ (tp+tn+fp+fn)\n    \n    return accuracy","9bf4b59c":"# Takes True Positive and false positive\n# Returns Precision\n\ndef precision_function(tp,fp):\n    \n    precision = tp \/ (tp+fp)\n    \n    return precision","b55b248c":"#Takes True Positive and false negative\n# Returns Recall\n\ndef recall_function(tp,fn):\n    \n    recall=tp \/ (tp+fn)\n    \n    return recall","5ef3450c":"#Takes true values and predicted\n# Returns Accuracy, precision and recall\n\n\ndef confusion_matrix(truth,predicted):\n    \n    true_positive = 0\n    true_negative = 0\n    false_positive = 0\n    false_negative = 0\n    \n    for true,pred in zip(truth,predicted):\n        if true == 1:\n            if pred == true:\n                true_positive += 1\n            elif pred != true:\n                false_negative += 1\n\n        elif true == 0:\n            if pred == true:\n                true_negative += 1\n            elif pred != true:\n                false_positive += 1\n            \n    accuracy=accuracy_function(true_positive, true_negative, false_positive, false_negative)\n    precision=precision_function(true_positive, false_positive)\n    recall=recall_function(true_positive, false_negative)\n    \n    return (accuracy,\n            precision,\n           recall)","9053ffb0":"accuracy,precision,recall=confusion_matrix(testY,pred)","d05c43d4":"print(\" Accuracy : {0} \\n Precision : {1} \\n Recall : {2}\".format(accuracy, precision, recall))","9ebfd5b9":"### Confusion Matrix","6f3044e3":"### Import Libraries"}}