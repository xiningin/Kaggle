{"cell_type":{"8af4662e":"code","5c52bff7":"code","3f275d4a":"code","df118bfb":"code","beddb666":"code","71035da4":"code","e93d49e2":"code","686215e3":"code","2310940e":"code","fc61baea":"code","50626d68":"code","1bf80640":"code","59528b2f":"code","4e43dc4a":"code","9aa72dda":"code","9472b613":"code","1a01f4c9":"code","331055b2":"code","ec379f12":"code","549ae575":"code","a7e78181":"code","b8a352c3":"code","20dd4c80":"code","d07b7843":"code","f6fbb1e9":"code","c4c44a61":"code","76bca9ec":"code","4337f644":"code","2c066ea2":"code","044380d1":"code","e6647bd8":"markdown","e238686a":"markdown","5e699f70":"markdown","c4c26824":"markdown","60b93eee":"markdown","2223156e":"markdown","eebcf658":"markdown","fc6d8f28":"markdown","37a770c5":"markdown","8c692097":"markdown"},"source":{"8af4662e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5c52bff7":"import os\nos.chdir('\/kaggle\/input\/jane-street-market-prediction\/')\nimport janestreet\nos.chdir('\/kaggle\/working')\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\nimport shap","3f275d4a":"sample_prediction_df = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/example_sample_submission.csv', encoding = 'utf-8-sig')\nfeatures = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/features.csv', encoding = 'utf-8-sig')\ntest_data = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/example_test.csv', encoding = 'utf-8-sig')\ntrain_data = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv', encoding = 'utf-8-sig')","df118bfb":"print(train_data.shape)\ntrain_data.head()","beddb666":"print(features.shape)\nfeatures.head()","71035da4":"print(test_data.shape)\ntest_data.head()","e93d49e2":"print(sample_prediction_df.shape)\nsample_prediction_df.head()","686215e3":"train_data.describe()","2310940e":"print('Number of rows in data:', train_data.shape[0])\ncolumns_in_train_data_nan = pd.DataFrame(train_data.isna().sum()).rename(columns = {0:'Number of NaNs'}).sort_values(by = ['Number of NaNs'], ascending = False)\ncolumns_in_train_data_nan['% NaNs'] = (columns_in_train_data_nan['Number of NaNs']\/train_data.shape[0]) * 100\ncolumns_in_train_data_nan[columns_in_train_data_nan['Number of NaNs']>100000]","fc61baea":"# Fill NaNs with mean of column:\ntrain_data.fillna(train_data.mean(), inplace = True)","50626d68":"pd.DataFrame(train_data['date'].unique()).describe().rename(columns = {0:'Number of days'})","1bf80640":"print('Number of rows with weight 0:',train_data[train_data['weight']==0].shape[0])\nprint('Number of rows with weight non-zero:',train_data[train_data['weight']!=0].shape[0])","59528b2f":"features[features==True].count(axis = 1).plot()","4e43dc4a":"train_data.groupby(['date']).size().reset_index().rename(columns = {0: '# Trades in a day'}).plot('date','# Trades in a day', title = 'Trades in a day [1-500]')","9aa72dda":"# Correlation analysis from <https:\/\/www.kaggle.com\/isaienkov\/jane-street-market-prediction-fast-understanding>\n\n# Correlation\ncorr_high_columns = []\ncols = train_data.columns.tolist()\nfor i in range(0, len(cols)):\n    for j in range(i+1, len(cols)):\n        if abs(train_data[cols[i]].corr(train_data[cols[j]])) > 0.95:\n            corr_high_columns = corr_high_columns + [cols[i], cols[j]]","9472b613":"corr_high_columns = list(set(corr_high_columns))\nprint('Number of columns:', len(corr_high_columns))","1a01f4c9":"corr_high_columns","331055b2":"#Correlation matrix\nf = plt.figure(\n    figsize=(22, 22)\n)\n\nplt.matshow(\n    train_data[corr_high_columns].corr(), \n    fignum=f.number\n)\n\nplt.title('Correlation matrix - for corr above 0.9')\nplt.xticks(\n    range(train_data[corr_high_columns].shape[1]), \n    train_data[corr_high_columns].columns, \n    fontsize=14, \n    rotation=90\n)\n\nplt.yticks(\n    range(train_data[corr_high_columns].shape[1]), \n    train_data[corr_high_columns].columns, \n    fontsize=14\n)\n\ncb = plt.colorbar()\ncb.ax.tick_params(\n    labelsize=14\n)","ec379f12":"#Action metric created using: <https:\/\/www.kaggle.com\/hamditarek\/market-prediction-xgboost-with-gpu-fit-in-1min>\n# Create action metric\n# train_data['action'] = ((train_data['weight'].values * train_data['resp'].values) > 0).astype('int')\ntrain_data['action'] = ((train_data['weight'].values * (train_data['resp_1'] + train_data['resp_2'] + train_data['resp_3'] + train_data['resp_4']).values)\/4 > 0).astype('int')\n\ntrain_data_for_model = train_data[train_data['weight'] != 0]\n# train_data_for_model = train_data.copy(deep = True)\n\nX_train = train_data_for_model.loc[:, train_data_for_model.columns.str.contains('feature')]\ny_train = train_data_for_model.loc[:, 'action']","549ae575":"print(X_train.shape)\nX_train.head()","a7e78181":"print(y_train.shape)\nprint(y_train.sum())\ny_train.head()","b8a352c3":"del columns_in_train_data_nan, train_data, features, test_data, train_data_for_model, corr_high_columns","20dd4c80":"import gc\ngc.collect()","d07b7843":"# clf = xgb.XGBClassifier(use_label_encoder=False,\n#     n_estimators=500,\n#     max_depth=10,\n#     learning_rate=0.06,\n#     subsample=0.9,\n#     colsample_bytree=0.7,\n#     random_state=42,\n#     tree_method='gpu_hist'  # Treats numerical variable as bins (makes process much faster)\n# )","f6fbb1e9":"# %time clf.fit(X_train, y_train)","c4c44a61":"import pickle\nfilename = '..\/input\/jane-street-pred-model-weights\/Jane_Street_stock_market_pred.sav'\n# pickle.dump(clf, open(filename, 'wb'))","76bca9ec":"clf = pickle.load(open(filename, 'rb'))","4337f644":"# #SHAP plots\n# # Create object that can calculate shap values\n# explainer = shap.TreeExplainer(clf)\n\n# df = X_train.sample(n=1000)\n# # calculate shap values. This is what we will plot.\n# shap_values = explainer.shap_values(df)\n\n# # Make plot\n# shap.summary_plot(shap_values, df)","2c066ea2":"# submission_df = pd.DataFrame(data = None, columns = ['action'])","044380d1":"env = janestreet.make_env() # initialize the environment\niter_test = env.iter_test() # an iterator which loops over the test set\n\n# count = 0\nfor (test_df, sample_prediction_df) in env.iter_test():\n    if test_df['weight'].item() > 0:\n        X_test = test_df.loc[:, test_df.columns.str.contains('feature')]\n        X_test = X_test.fillna(0)\n        y_preds = clf.predict(X_test)\n        sample_prediction_df.action = y_preds.astype(int)\n    else:\n        sample_prediction_df.action = 0\n    env.predict(sample_prediction_df)","e6647bd8":"## Prediction","e238686a":"The data contains 500 days for trading","5e699f70":"feature_0 is the only feature without any true tag","c4c26824":"## Feature importance","60b93eee":"Features 39, 64 & 20 strictly increase the action probability. The other features may be dependent on each other. Dimensionality reduction is required to train a better model.","2223156e":"## Model","eebcf658":"## Load the data files","fc6d8f28":"## Import necessary packages","37a770c5":"Trades with weight = 0 were intentionally included in the dataset for completeness, although such trades will not contribute towards the scoring evaluation","8c692097":"## EDA"}}