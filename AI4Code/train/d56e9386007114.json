{"cell_type":{"42cfac01":"code","86cc87bc":"code","adacb4c7":"code","28935b8c":"code","0162698d":"code","95affb5f":"code","e94e1325":"code","3747cdc5":"code","ae7d19f6":"code","c37bb727":"code","9388da0f":"code","ecb97ca5":"code","d8a37f40":"code","5ed58ad7":"code","e76cd6e2":"code","a96bacd5":"code","d1df2bb4":"code","80729120":"code","4a31921e":"code","3b6d4f2d":"code","aabb40d1":"code","47e5c15d":"code","11e90115":"code","f7f6661e":"code","63f7859e":"code","2ba2780c":"code","356b3f81":"code","d9c35c72":"code","43d758a2":"code","d3253e26":"code","06b40cf2":"code","d746ef8b":"code","24269cc9":"markdown","3cf10794":"markdown","153fdb80":"markdown","953025a0":"markdown","54fba9cf":"markdown","11016e12":"markdown","a6295800":"markdown","997f31df":"markdown","63b4c5e3":"markdown","cff98762":"markdown","fdb11f0c":"markdown","97b393ff":"markdown"},"source":{"42cfac01":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve,auc\nfrom sklearn.metrics import f1_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import plot_tree\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import recall_score\n\npd.set_option('display.max_rows', 999)\npd.set_option('display.max_columns', 999)\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","86cc87bc":"train = pd.read_csv('..\/input\/home-credit-default-risk\/application_train.csv')\nprint(\"train data: %s rows and %s cols\"%train.shape)\ntest = pd.read_csv('..\/input\/home-credit-default-risk\/application_test.csv')\nprint(\"test data: %s rows and %s cols\"%train.shape)\ncc = pd.read_csv('..\/input\/home-credit-default-risk\/credit_card_balance.csv')\nprint(\"Credit Card Balance: %s rows and %s cols\"%cc.shape)\npmts = pd.read_csv('..\/input\/home-credit-default-risk\/installments_payments.csv')\nprint(\"Installments Payments: %s rows and %s cols\"%pmts.shape)","adacb4c7":"train.head()","28935b8c":"train.info()","0162698d":"train.describe()","95affb5f":"train.isnull().sum()[train.isnull().sum() > 2000]","e94e1325":"train['TARGET'].plot.hist(title = 'target var: default indicator')","3747cdc5":"train['TARGET'].value_counts()","ae7d19f6":"train['CNT_CHILDREN'].plot.hist(title = 'Num of Children')","c37bb727":"sns.boxplot(x=train['CNT_CHILDREN'])","9388da0f":"sns.set(rc={'figure.figsize':(18,5)})\nax = sns.boxplot(x=train[train.AMT_INCOME_TOTAL < 0.05e+07]['AMT_INCOME_TOTAL'])\nax.set_xticks(range(0,500000,25000))\nax","ecb97ca5":"ages = [int(-x\/365) for x in train.DAYS_BIRTH]\nsns.set(rc={'figure.figsize':(10,5)})\nsns.distplot(ages, hist=True, kde=False, \n             bins=10,hist_kws={'edgecolor':'black'})\nplt.title('Density of Ages')\nplt.xlabel('Ages')\nplt.ylabel('Frequency')","d8a37f40":"train['REG_REGION_NOT_LIVE_REGION'].plot.hist(title = 'Non-match Address')","5ed58ad7":"fig, ax = plt.subplots(1,2)\nsns.histplot(data=train, x=\"EXT_SOURCE_2\",kde=True,ax=ax[0])\nsns.histplot(data=train, x=\"EXT_SOURCE_3\",kde=True,ax=ax[1])\nfig.show()","e76cd6e2":"# sns.set(rc={'figure.figsize':(15,9)})\n# fig, ax = plt.subplots(2,2)\n# sns.histplot(data=train, x=\"OBS_30_CNT_SOCIAL_CIRCLE\",kde=True,ax=ax[0,0])\n# sns.histplot(data=train, x=\"DEF_30_CNT_SOCIAL_CIRCLE\",kde=True,ax=ax[0,1])\n# sns.histplot(data=train, x=\"OBS_60_CNT_SOCIAL_CIRCLE\",kde=True,ax=ax[1,0])\n# sns.histplot(data=train, x=\"DEF_60_CNT_SOCIAL_CIRCLE\",kde=True,ax=ax[1,1])\n# fig.show()","a96bacd5":"for col in train.columns:\n    if train[col].dtype == 'object':\n        print(\"object column %s have %s unique values\"%(str(col),train[col].nunique()))\n        if train[col].nunique() <= 3:\n            print(train[col].value_counts())\n            print('-------------')\n        else:\n            ax = sns.catplot(x=col, kind=\"count\", data=train,height=6, aspect=2.2)\n            for axes in ax.axes.flat:\n                axes.set_xticklabels(axes.get_xticklabels(),rotation = 45,horizontalalignment = 'right')","d1df2bb4":"cc.describe()","80729120":"pmts.describe()","4a31921e":"sns.set(rc={'figure.figsize':(18,5)})\nax = sns.boxplot(x=cc['AMT_BALANCE'])\nax.set_xticks([x\/10*1e6 for x in range(-5,15,1)])\nax","3b6d4f2d":"sns.set(rc={'figure.figsize':(12,5)})\nax = sns.histplot(data=cc[cc.CNT_DRAWINGS_CURRENT < 10], x=\"CNT_DRAWINGS_CURRENT\")\nax.set_xticks(range(0,10,1))\nax","aabb40d1":"sns.histplot(data=pmts, x=\"DAYS_INSTALMENT\")","47e5c15d":"sns.histplot(data=pmts, x=\"DAYS_ENTRY_PAYMENT\")","11e90115":"# Feature Engineering and extract attributes for use from Credit Card Balance & Installments Payments\ncc['AMT_DRAWINGS_PCT'] = [x\/y if (y != 0) & pd.notnull(y) else np.nan for x,y in zip(cc.AMT_DRAWINGS_CURRENT,cc.AMT_CREDIT_LIMIT_ACTUAL)]\ncc['AMT_DRAWINGS_ATM_PCT'] = [x\/y if (y != 0) & pd.notnull(y) else np.nan for x,y in zip(cc.AMT_DRAWINGS_ATM_CURRENT,cc.AMT_CREDIT_LIMIT_ACTUAL)]\ncc['AMT_DRAWINGS_OTHER_PCT'] = [x\/y if (y != 0) & pd.notnull(y) else np.nan for x,y in zip(cc.AMT_DRAWINGS_OTHER_CURRENT,cc.AMT_CREDIT_LIMIT_ACTUAL)]\ncc['AMT_DRAWINGS_POS_PCT'] = [x\/y if (y != 0) & pd.notnull(y) else np.nan for x,y in zip(cc.AMT_DRAWINGS_POS_CURRENT,cc.AMT_CREDIT_LIMIT_ACTUAL)]\n\ncc['AMT_PRINCIPAL_RECEIVABLE_PCT'] = [x\/y if (y != 0) & pd.notnull(y) else np.nan for x,y in zip(cc.AMT_RECEIVABLE_PRINCIPAL,cc.AMT_RECIVABLE)]\n\ncc_use = cc.groupby(['SK_ID_CURR'],as_index=False).agg({'AMT_BALANCE': np.mean,\n                                                        'AMT_DRAWINGS_PCT':np.mean,\n                                                        'AMT_DRAWINGS_ATM_PCT':np.mean,\n                                                        'AMT_DRAWINGS_OTHER_PCT':np.mean,\n                                                        'AMT_DRAWINGS_POS_PCT':np.mean,\n                                                        'AMT_PRINCIPAL_RECEIVABLE_PCT':np.mean,\n                                                        'CNT_DRAWINGS_ATM_CURRENT':np.mean,\n                                                        'CNT_DRAWINGS_CURRENT':np.mean,\n                                                        'CNT_DRAWINGS_OTHER_CURRENT':np.mean,\n                                                        'CNT_DRAWINGS_POS_CURRENT':np.mean,\n                                                        'SK_DPD':np.mean,\n                                                        'SK_DPD_DEF':np.mean})\npmts['DAYS_INSTALMENT_DIFF'] = pmts['DAYS_INSTALMENT'] - pmts['DAYS_ENTRY_PAYMENT']\npmts['AMT_PATMENT_PCT'] = [x\/y if (y != 0) & pd.notnull(y) else np.nan for x,y in zip(pmts.AMT_PAYMENT,pmts.AMT_INSTALMENT)]\npmts_use = pmts.groupby(['SK_ID_CURR'],as_index=False).agg({'DAYS_INSTALMENT_DIFF':np.mean,\n                                                            'AMT_PATMENT_PCT':np.mean})                                                          ","f7f6661e":"# Remove vars that has too many missing variable\ncols_remove = train.columns[train.isnull().sum() > 100000]\ntrain_use = train.drop(cols_remove,axis=1)\n\n# Remove outliers\ntrain_use = train_use[(train_use.CNT_CHILDREN <= 5) & (train_use.AMT_INCOME_TOTAL <= 350000)]\n\n# Merge Credit Card Balance & Installment Payments\ntrain_use = train_use.merge(cc_use,on='SK_ID_CURR',how='left')\ntrain_use = train_use.merge(pmts_use,on='SK_ID_CURR',how='left')\n\n# Missing Value Imputation - Assign an extreme value\ntrain_use = train_use.fillna(-999)\n\n# One-hot encoding for categorical variable\ncat_cols = [key for key in dict(train_use.dtypes) if dict(train_use.dtypes)[key] in ['object']]\ncat_cols_df = pd.get_dummies(train_use[cat_cols],drop_first=True)\ntrain_use = pd.concat([cat_cols_df,train_use[train_use.columns[~train_use.columns.isin(cat_cols)]]], axis = 1)\n\n# print(train_use.shape)\ntrain_use = train_use[train_use.columns[~train_use.columns.isin(cat_cols)]]\n\n# Remove ID column\ntrain_use = train_use.drop(['SK_ID_CURR'],axis=1).reset_index(drop=True)\ntrain_use.replace([np.inf, -np.inf], np.nan, inplace=True)\n\ntrain_use.shape","63f7859e":"x = train_use.drop(['TARGET'],axis=1).copy()\ny = train_use['TARGET'].copy()\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3,random_state=0)\nmodel = DecisionTreeClassifier(criterion='gini')\nmodel = model.fit(x_train,y_train)\ny_pred_p = model.predict_proba(x_test)[:,1]\ny_pred = model.predict(x_test)\n\nauc_test = roc_auc_score(y_test, y_pred_p)\nprint(\"AUC Performance: \", auc_test)\nf1_test = f1_score(y_test, y_pred)\nprint(\"F1 Score: \", f1_test)\nrecall_test = recall_score(y_test, y_pred, average='weighted')\nprint(\"Recall Score: \", recall_test)","2ba2780c":"y_test.value_counts()","356b3f81":"pd.Series(y_pred).value_counts()","d9c35c72":"pd.DataFrame(sorted(zip(x_train.columns,model.feature_importances_),key=lambda x: x[1],reverse=True),columns=['Name','Importance'])[:20]","43d758a2":"# confusion matrix\ncm = confusion_matrix(y_test, y_pred)\nsns.heatmap(cm, annot=True, fmt='d')","d3253e26":"plot_confusion_matrix(model,x_test, y_test, normalize='true')","06b40cf2":"# Precision-Recall Curve\nprecision, recall, thresholds = precision_recall_curve(y_test, y_pred)\n\nfig, ax = plt.subplots()\nax.plot(recall, precision, color='red')\n\nax.set_title('Precision-Recall Curve')\nax.set_ylabel('Precision')\nax.set_xlabel('Recall')\n\nplt.show()","d746ef8b":"# ROC Curve\nmetrics.plot_roc_curve(model, x_test, y_test)","24269cc9":"2) The mean and 75% percentile of number of children are 0.417052 and 1. There are some **outliers** we can remove before building the model.","3cf10794":"## Import Data","153fdb80":"## Categorical Vars","953025a0":"## Plot evaluation metrics","54fba9cf":"## Build Decision Tree","11016e12":"3) Visualization of some other significant features","a6295800":"## Data Visualization - Train Data\n1) From the density plot we can see class 0 has a lot more records than class 1. Overall the default rate is at 8%. **This is an imblanced dataset.**","997f31df":"## Visualization - Credit Card Balance & Installments Payments","63b4c5e3":"### Missing values","cff98762":"## Check Feature Importance","fdb11f0c":"## Explore Train Data","97b393ff":"## Prepare Data for modeling"}}