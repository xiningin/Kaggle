{"cell_type":{"926905d7":"code","bcb588a8":"code","e4bb3a99":"code","aef81f0a":"code","bc2ec2bd":"code","a85afca2":"code","5fbaee65":"code","70789824":"code","c84df1e8":"code","19542935":"code","dad15649":"code","d992ebc3":"code","54abeac9":"code","591b1040":"code","290bad2f":"code","3cc48093":"code","dc448be4":"code","518b36da":"code","1fcf5f6b":"code","7e944b37":"code","6001cdc9":"code","070d03bf":"code","f3ff6e6b":"code","e78ed151":"code","7b2a87a8":"code","23fffcf7":"code","4d780c1c":"code","3e2b0588":"code","0f2a9841":"code","a60fc468":"markdown","8ad9b78a":"markdown","10ed1e5b":"markdown","39b2c49b":"markdown","0249a4f8":"markdown","f761d48b":"markdown","40aa0f37":"markdown"},"source":{"926905d7":"from kaggle.competitions import nflrush\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom tqdm import tqdm\n\nenv = nflrush.make_env()","bcb588a8":"df = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\ndf.columns","e4bb3a99":"iter_test = env.iter_test()","aef81f0a":"df['Position'].unique()","bc2ec2bd":"offense_position=['QB','RB','FB','HB','WR','TE','C','G','T']\ndiffense_position=['DL','DT','NT','LB','ILB','MLB','OLB','DB','CB','S','SS','SAF']\nnew_df=df.groupby(['PlayId','Position']).count()","a85afca2":"position_count=new_df['GameId'].unstack().fillna(0).astype(int)\nposition_count","5fbaee65":"pd.merge(position_count,df[['PlayId','Yards']],on='PlayId').corr()['Yards'].sort_values(ascending=False)","70789824":"def process(df):\n    df=pd.get_dummies(df,columns=['Team','PlayDirection','OffenseFormation'])\n    df=df[(df['StadiumType']!='Cloudy') & (df['StadiumType']!='Bowl')]\n    df=df.drop('FieldPosition', axis=1)\n    outdoor=['Outdoor', 'Outdoors','Open','Indoor, Open Roof','Outdoor Retr Roof-Open', 'Oudoor', 'Ourdoor','Retr. Roof-Open','Outdor',\n       'Retr. Roof - Open', 'Domed, Open', 'Domed, open', 'Outside','Heinz Field']\n    indoor=['Indoors', 'RetractableRoof', 'Indoor','Retr. Roof-Closed','Dome', 'Domed, closed','Indoor, Roof Closed', 'Retr. Roof Closed','Closed Dome','Dome, closed','Domed']\n    df['stadiumtype']=(df['StadiumType'].isin(outdoor)*1)\n    rain=['Light Rain', 'Showers','Cloudy with periods of rain, thunder possible. Winds shifting to WNW, 10-20 mph.','Rain', 'Heavy lake effect snow','Snow', 'Cloudy, Rain','Rain shower','Rainy']\n    df['weather']=(~df['GameWeather'].isin(rain)*1)\n    df['PlayerHeight']= df['PlayerHeight'].apply(lambda x: 12*int(x.split('-')[0])+int(x.split('-')[1]))\n    df['gameclock']=[ pd.Timedelta(val).total_seconds() for val in df['GameClock']]\n    return df","c84df1e8":"df=process(df)","19542935":"df=df.dropna()","dad15649":"df_position=pd.merge(df,position_count, on='PlayId')","d992ebc3":"df_position=df_position.rename(columns={'S_x':'S','S_y':'S_position'})","54abeac9":"df_position.columns","591b1040":"df_position.isnull().sum().sum()","290bad2f":"df_position.corr()['Yards'].sort_values(ascending=False).head(20)","3cc48093":"def feature(df):\n    features=pd.DataFrame(df,columns=['X', 'Y', 'S', 'A', 'Dis','Dir','YardLine', 'Quarter',\n       'gameclock', 'Down', 'Distance','HomeScoreBeforePlay', 'VisitorScoreBeforePlay', 'DefendersInTheBox','PlayerHeight',\n       'PlayerWeight','Temperature', 'Humidity', 'Team_home', 'stadiumtype', 'weather','PlayDirection_right',\n       'OffenseFormation_ACE',\n       'OffenseFormation_I_FORM', 'OffenseFormation_JUMBO',\n       'OffenseFormation_PISTOL', 'OffenseFormation_SHOTGUN',\n       'OffenseFormation_SINGLEBACK', 'OffenseFormation_WILDCAT','C', 'CB', 'DB',\n       'DE', 'DL', 'DT', 'FB', 'FS', 'G', 'HB', 'ILB', 'LB', 'MLB', 'NT', 'OG',\n       'OLB', 'OT', 'QB', 'RB', 'S_position', 'SAF', 'SS', 'T', 'TE', 'WR'])\n    return features\n    \n\n                      ","dc448be4":"features=feature(df_position)","518b36da":"train_mean=features.mean(axis=0)\ntrain_mean","1fcf5f6b":"train_std=features.std(axis=0)\ntrain_std","7e944b37":"def normalize(features):\n    scaler=StandardScaler()\n    X=(features-train_mean)\/train_std\n    return X","6001cdc9":"def train_predict(X,target):\n    lr=LinearRegression()\n    lr.fit(X,target)\n    return lr\n    ","070d03bf":"X=normalize(features)","f3ff6e6b":"target=pd.Series(df_position['Yards'])\nlr=train_predict(X,target)","e78ed151":"r=lr.score(X,target)\nr","7b2a87a8":"train_df=df_position.iloc[:0,:]","23fffcf7":"for (test_df, sample_prediction_df) in tqdm(iter_test):\n    new_df=test_df.groupby(['PlayId','Position']).count()\n    position_count=new_df['GameId'].unstack().fillna(0).astype(int)\n    test_df=process(test_df)\n    test_df=pd.merge(test_df,position_count, on='PlayId')\n    test_df=test_df.rename(columns={'S_x':'S','S_y':'S_position'})\n    test_df=pd.concat([train_df, test_df],sort=False)\n    test_df=test_df.fillna(0)\n    test_feature=feature(test_df)\n    test_X=normalize(test_feature)\n    pred_y=lr.predict(test_X)\n    pred_y=np.round(pred_y)\n    score=np.array([(i >= pred_y).mean()*1 for i in range(-99,100)])\n    sample_prediction_df.iloc[0,:]=score.T\n    env.predict(sample_prediction_df)","4d780c1c":"sample_prediction_df","3e2b0588":"env.write_submission_file()","0f2a9841":"import os\nprint([filename for filename in os.listdir('\/kaggle\/working') if '.csv' in filename])","a60fc468":"## \u8a13\u7df4","8ad9b78a":" # \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f","10ed1e5b":"## \u30c0\u30df\u30fc\u5909\u6570\u5316","39b2c49b":"# \u524d\u51e6\u7406","0249a4f8":"# \u30e2\u30b8\u30e5\u30fc\u30eb\u5c0e\u5165","f761d48b":"# \u4e88\u6e2c","40aa0f37":"## \u6b63\u898f\u5316"}}