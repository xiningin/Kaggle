{"cell_type":{"d1fd1890":"code","3cbdd2ba":"code","098d2e62":"code","969a3b3b":"code","ab8254c1":"code","4c08e646":"code","c8f92f04":"code","f0f381ce":"code","ca2286f5":"code","6462fa6c":"code","6aef65f4":"code","4b7138f8":"code","dd2615cd":"code","767f443a":"code","ba9118b0":"code","5d3057c0":"code","10b83d68":"code","d04ca0ae":"code","f7b33cc5":"code","0345809b":"code","cdaec644":"code","a9531d59":"code","374360f5":"code","016c117a":"code","12d4fa20":"code","05ebed20":"code","00034e41":"code","b31cc6b1":"code","52892e50":"code","cf77bbbf":"code","69ea93c6":"code","961d48e9":"code","f22ff779":"code","3752c13c":"code","af60c895":"code","05cfc745":"code","215c9e12":"code","d067a67a":"code","48e55af7":"code","6eaed8a4":"code","bafce854":"code","d9e99304":"code","5225cd5e":"code","35e6084f":"code","3cccb14f":"code","7152a317":"code","c46a7511":"code","d1c140aa":"markdown","9bf45183":"markdown","87bbc63e":"markdown","a8ae2d4a":"markdown","cdace58c":"markdown","e779db05":"markdown","ce1babfa":"markdown","b5557335":"markdown","55d543a1":"markdown","7c44261e":"markdown","5cd99929":"markdown","b8a927e3":"markdown","9e49dfed":"markdown","71ff990c":"markdown","241ca991":"markdown","2a419408":"markdown","b4942861":"markdown","c31fd558":"markdown","e030ac85":"markdown","82d21086":"markdown","e470b68e":"markdown","542c6ddf":"markdown","debf6e1b":"markdown","e0a665c2":"markdown","50a0c598":"markdown","eeba7bc8":"markdown","de37324a":"markdown","9810f5b1":"markdown","315e1989":"markdown","6235c54c":"markdown","e4e714bd":"markdown","9d90b1f4":"markdown","59d6b81f":"markdown","ccac77fc":"markdown","a6914353":"markdown","85728ee1":"markdown","1a39cd75":"markdown","99ab064d":"markdown","1bcca342":"markdown","98603dd6":"markdown","62498fce":"markdown"},"source":{"d1fd1890":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3cbdd2ba":"import pandas as pd\npd.set_option(\"max_columns\", 100)\nimport re\n\nfrom sklearn.metrics.pairwise import linear_kernel\n\nfrom nltk.corpus import stopwords\nfrom nltk.stem import SnowballStemmer\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","098d2e62":"metadata = pd.read_csv(\"\/kaggle\/input\/the-movies-dataset\/movies_metadata.csv\")","969a3b3b":"metadata.head()","ab8254c1":"C = metadata['vote_average'].mean()","4c08e646":"m = metadata['vote_count'].quantile(0.90)","c8f92f04":"movies = metadata.copy().loc[metadata['vote_count'] >= m]","f0f381ce":"movies.shape","ca2286f5":"def weighted_rating(x, m = m, C = C):\n    v = x['vote_count']\n    R = x['vote_average']\n    return (v \/ (v + m) * R) + (m \/ (m + v) * C)","6462fa6c":"movies['Overall Score'] = movies.apply(weighted_rating, axis = 1)","6aef65f4":"movies.sort_values(by = 'Overall Score', ascending = False, inplace = True)\nmovies[['title', 'vote_count', 'vote_average', 'Overall Score']].head(20)","4b7138f8":"movies = metadata.copy()","dd2615cd":"movies","767f443a":"from ast import literal_eval\n\nmovies[\"genres\"] = movies[\"genres\"].apply(literal_eval)","ba9118b0":"movies[\"genres\"][0]","5d3057c0":"def genres_extractor(my_list):\n    gen_list = []\n    for i in my_list:\n        gen_list.append(i[\"name\"])\n    \n    return gen_list","10b83d68":"movies[\"gen_list\"] = movies[\"genres\"].apply(genres_extractor)","d04ca0ae":"movies.head()","f7b33cc5":"movies[\"gen_list\"] = movies[\"gen_list\"].apply(lambda x: \" \".join(x)) ","0345809b":"movies.overview = movies.gen_list + \" \" + movies.overview","cdaec644":"movies.head()","a9531d59":"movies[\"overview\"].dropna(inplace = True)","374360f5":"stop_words = stopwords.words(\"english\")\nstemmer = SnowballStemmer(\"english\")\n\ncleaning = \"@\\S+|https?:\\S+|http?:\\S|[^A-Za-z]+\"\n\ndef preprocess(text, stem=False):\n    # Remove link,user and special characters\n    text = re.sub(cleaning, ' ', str(text).lower()).strip()\n    tokens = []\n    for token in text.split():\n        if token not in stop_words:\n            if stem:\n                tokens.append(stemmer.stem(token))\n            else:\n                tokens.append(token)\n    return \" \".join(tokens)","016c117a":"movies.overview = movies.overview.apply(lambda x: preprocess(x, stem = False))","12d4fa20":"movies","05ebed20":"from sklearn.feature_extraction.text import TfidfVectorizer\n\nvect = TfidfVectorizer()\n\ndtm = vect.fit_transform(movies[\"overview\"])","00034e41":"dtm.shape","b31cc6b1":"dtm_matrix = dtm[:30000] # 30000 for prevent memory allocation problem\ncosine_sim = linear_kernel(dtm_matrix, dtm_matrix)","52892e50":"cosine_sim.shape","cf77bbbf":"cosine_sim[1]","69ea93c6":"indices = pd.Series(index = metadata['title'], data = metadata.index).drop_duplicates()\nindices","961d48e9":"def get_recommendations(title, cosine_sim = cosine_sim):\n    # Get the index of the movie that matches the title\n    idx = indices[title]\n    \n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    \n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key = lambda x : x[1], reverse = True)\n    \n    # Get the scores of the 10 most similar movies, we stared with 1 because index 0 will give the same name of the input title \n    sim_scores = sim_scores[1:11]\n    \n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n    \n    # Return the top 10 most similar movies\n    return metadata['title'][movie_indices]","f22ff779":"get_recommendations('The Dark Knight Rises')","3752c13c":"get_recommendations('The Godfather')","af60c895":"#ratings = pd.read_csv('..\/input\/the-movies-dataset\/ratings_small.csv')\nratings = pd.read_csv('\/kaggle\/input\/the-movies-dataset\/ratings.csv')\n\nratings.drop(\"timestamp\", axis = 1, inplace = True)","05cfc745":"ratings","215c9e12":"ratings = ratings[ratings[\"userId\"] < 15000]","d067a67a":"movies = metadata[[\"id\", \"title\"]]\nmovies.columns = [\"movieId\", \"title\"]\nmovies = movies[~movies[\"movieId\"].str.contains(\"-\")]\nmovies[\"movieId\"] = movies[\"movieId\"].astype(\"int64\")\nmovies.head()","48e55af7":"del metadata","6eaed8a4":"df = pd.merge(ratings, movies)","bafce854":"df.title.nunique(), df.userId.nunique()","d9e99304":"movie_ratings = df.pivot_table(index = [\"userId\"], columns = [\"title\"], values = \"rating\")\nmovie_ratings.head()","5225cd5e":"movie_ratings = movie_ratings.dropna(thresh = 10, axis = 1).fillna(0)","35e6084f":"movie_ratings","3cccb14f":"item_similarity = movie_ratings.corr(method = \"pearson\")","7152a317":"def get_similar_movies(movie_name, user_rating):\n    similar_score = item_similarity[movie_name]*(user_rating-2.5)\n    similar_score = similar_score.sort_values(ascending = False)\n    \n    return similar_score","c46a7511":"science_fiction_lover = [(\"Back to the Future Part II\", 5), (\"Big Fish\", 1)]\n    \nsimilar_movies = pd.DataFrame()\n\nfor movie, rating in science_fiction_lover:\n    similar_movies = similar_movies.append(get_similar_movies(movie, rating), ignore_index = True)\n\nsimilar_movies.head()\nsimilar_movies.sum().sort_values(ascending = False)","d1c140aa":"#### Function that takes in movie title as input and outputs most similar movies","9bf45183":"#### Let's get recommendations","87bbc63e":"#### We computed the cosine similarity matrix\n","a8ae2d4a":"#### There are 5204 movies and 14717 users","cdace58c":"#### We will drop the movies which have less than 10 users rated it","e779db05":"## Loading the Dataset","ce1babfa":"#### That is all for popularity based recommender","b5557335":"# Movie Recommendation System","55d543a1":"## User Based Recommendation Collaborative Filtering","7c44261e":"#### There are 270896 user, it is so much, our memory is not enough for this. So we take 15000 of them","5cd99929":"#### Function that computes the weighted rating of each movie by IMDB formula","b8a927e3":"#### Let's get recommendation","9e49dfed":"#### We dropped null values","71ff990c":"## Content Based Recommendation","241ca991":"#### Genres extractor function","2a419408":"#### Eliminating numbers, html tags from overview, shortly we are cleaning the overview text","b4942861":"#### The mean of the mean of all movies","c31fd558":"#### Calculate the minimum number of votes required to be in the chart, m\n\n- We will use cutoff m as the 90th percentile. In other words, for a movie to be featured in the charts, it must have more votes than at least 90% of the movies on the list. (In top of 10%)","e030ac85":"#### We do some arrangements for movies dataframe","82d21086":"#### We turned string type list to list","e470b68e":"The formula for calculating the Top Rated 250 Titles gives a true Bayesian estimate:\nweighted rating (WR) = (v \u00f7 (v+m)) \u00d7 R + (m \u00f7 (v+m)) \u00d7 C where:\n\n- R = average for the movie (mean) = (Rating)\n- v = number of votes for the movie = (votes)\n- m = minimum votes required to be listed in the Top 250\n- C = the mean vote across the whole report (currently 7.0)","542c6ddf":"#### We merge the ratings and movies dataframes","debf6e1b":"#### We can also vectorize credits information such as director and cast names.","e0a665c2":"#### We see that over 73535 different words were used to describe the 45466 movies in our dataset","50a0c598":"#### We add gen_list to overview we will use it after","eeba7bc8":"#### We sorted movies based on score calculated above","de37324a":"#### Applying cleaning function","9810f5b1":"#### Get similar movie function","315e1989":"#### We extracted the genres","6235c54c":"#### Each movie will be a 1x30000 column vector where each column will be a similarity score with each movie.","e4e714bd":"#### We created new column has a name \"Overall Score\" and calculated its value with weighted_rating() function\n","9d90b1f4":"#### We will vectorize the all words in overview","59d6b81f":"#### We need to give their titles","ccac77fc":"## Popularity Based Recommendation","a6914353":"#### We turned list to string","85728ee1":"#### Preprocessing","1a39cd75":"#### We are creating a person who loves science fiction and don't love drama","99ab064d":"#### We copied the portion of the dataframe that we need and filtered it","1bcca342":"## Importing Necessary Libraries","98603dd6":"#### We are creating a pivot table, movies are in columns, users are in rows (sparse matrix). It shows which viewer gave which rating to which movie or not.","62498fce":"#### We are calculating item similarity so we can get recommendation "}}