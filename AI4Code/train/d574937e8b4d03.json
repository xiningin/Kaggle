{"cell_type":{"c445eb39":"code","21705fb2":"code","0ecf8248":"code","bdd38e30":"code","4a7d2333":"code","2ea7f88f":"code","5b61a68c":"code","7ad23ecc":"code","0658cf06":"code","3b67e29b":"code","35043987":"code","93204169":"code","99702485":"code","d8bc6803":"code","ff4adad3":"code","63c12182":"code","2c75a163":"code","8c344c32":"markdown","fd0ce152":"markdown","9737163e":"markdown","a093ce51":"markdown"},"source":{"c445eb39":"!git clone https:\/\/github.com\/leekunhee\/Mask_RCNN.git\n!cd Mask_RCNN && python setup.py install","21705fb2":"import os,sys\nimport pandas as pd\nfrom PIL import Image\nfrom os import listdir\nfrom numpy import zeros, asarray, expand_dims, mean\nimport numpy as np\n\nROOT_DIR = os.path.abspath(\".\/Mask_RCNN\")\nsys.path.append(ROOT_DIR) \n\nfrom mrcnn.utils import Dataset,extract_bboxes\nfrom mrcnn.visualize import display_instances\nfrom matplotlib import pyplot\nfrom mrcnn.config import Config\nfrom mrcnn.model import MaskRCNN\nfrom mrcnn.utils import compute_ap\nfrom mrcnn.model import load_image_gt\nfrom mrcnn.model import mold_image\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0ecf8248":"class PedDataset(Dataset):\n    def load_dataset(self, dataset_dir='..\/input\/pennfudan-database-for-pedestrian-detection-zip\/PennFudanPed', mode='train'):\n        self.add_class('dataset',1,'pedestrian')\n        images_dir = dataset_dir + '\/PNGImages\/'\n        annotations_dir = dataset_dir + '\/Annotation\/'\n        masks_dir = dataset_dir + '\/PedMasks\/'\n        if mode=='train':\n            j=0\n            for filename in listdir(images_dir):\n                j+=1\n                if j>150:\n                    continue\n                image_id = filename\n                img_path = images_dir + image_id\n                ann_path = annotations_dir + image_id[:-4]+'.txt'\n                mask_path = masks_dir + image_id[:-4]+'_mask.png'\n                self.add_image('dataset', image_id=image_id, path=img_path, ann_path=ann_path, mask_path=mask_path)\n        if mode=='test':\n            j=0\n            for filename in listdir(images_dir):\n                j+=1\n                if j<=150:\n                    continue\n                image_id = filename\n                img_path = images_dir + image_id\n                ann_path = annotations_dir + image_id[:-4]+'.txt'\n                mask_path = masks_dir + image_id[:-4]+'_mask.png'\n                self.add_image('dataset', image_id=image_id, path=img_path, ann_path=ann_path, mask_path=mask_path)\n        \n    def extract_boxes(self, image_id):\n        info = self.image_info[image_id]\n        file = info['ann_path']\n        boxes = list()\n        f = open(filename,'r')\n        for x in f:\n            if '(Xmin, Ymin) - (Xmax, Ymax)' in x:\n                xmin = int(x[-23:-20])\n                ymin = int(x[-18:-15])\n                xmax = int(x[-10:-7])\n                ymax = int(x[-5:-2])\n                coors = [xmin, ymin, xmax, ymax]\n                boxes.append(coors)\n        width = 559\n        height = 536\n        return boxes, width, height\n    def load_mask(self, image_id):\n        info = self.image_info[image_id]\n        file = info['mask_path']\n        #boxes, w, h = self.extract_boxes(image_id)\n        #masks = zeros([w, h, len(boxes)], dtype='uint8')\n        masks = Image.open(file)\n        masks = np.array(masks)\n        ob_id = np.unique(masks)\n        ob_id = ob_id[1:]\n        masks = masks == ob_id[:, None, None]\n        masks = np.moveaxis(masks,0,-1)\n        class_ids = list()\n        for i in range(len(ob_id)):\n#             box = boxes[i]\n#             row_s, row_e = box[1], box[3]\n#             col_s, col_e = box[0], box[2]\n#             masks[row_s:row_e, col_s:col_e, i] = 1\n            class_ids.append(self.class_names.index('pedestrian'))\n        return masks, asarray(class_ids, dtype='int32')\n    \n    def image_reference(self, image_id):\n        info = self.image_info[image_id]\n        return info['path']","bdd38e30":"train_set = PedDataset()\ntrain_set.load_dataset(mode='train')\ntrain_set.prepare()\nprint('Train: %d' % len(train_set.image_ids))\n \ntest_set = PedDataset()\ntest_set.load_dataset(mode='test')\ntest_set.prepare()\nprint('Test: %d' % len(test_set.image_ids))","4a7d2333":"image_id = 2\nimage = train_set.load_image(image_id)\nprint(image.shape)\nmask, class_ids = train_set.load_mask(image_id)\nprint(mask.shape)\npyplot.imshow(image)\npyplot.imshow(mask[:, :, 0], cmap='gray', alpha=0.6)\npyplot.show()","2ea7f88f":"class PedConfig(Config):\n    NAME = \"ped_cfg\"\n    NUM_CLASSES = 2\n    STEPS_PER_EPOCH = 150\n    VALIDATION_STEPS = 20\n    IMAGES_PER_GPU = 1\n    IMAGE_MIN_DIM = 384\n    IMAGE_MAX_DIM = 448\n    \nconfig = PedConfig()","5b61a68c":"config.display()","7ad23ecc":"model = MaskRCNN(mode='training', model_dir='.\/', config=config)","0658cf06":"model.load_weights('..\/input\/mask-rcnn-coco-weights\/mask_rcnn_coco.h5', by_name=True, exclude=[\"mrcnn_class_logits\", \"mrcnn_bbox_fc\",  \"mrcnn_bbox\", \"mrcnn_mask\"])","3b67e29b":"model.train(train_set, test_set, learning_rate=config.LEARNING_RATE, epochs=10, layers='heads')","35043987":"class PredictionConfig(Config):\n    NAME = \"ped_cfg\"\n    NUM_CLASSES = 2\n    GPU_COUNT = 1\n    IMAGES_PER_GPU = 1\n    USE_MINI_MASK = False","93204169":"cfg = PredictionConfig()\nmodel = MaskRCNN(mode='inference', model_dir='.\/', config=cfg)","99702485":"for i in listdir():\n    print(i)\n    if i[:3]=='ped':\n        path=i","d8bc6803":"model.load_weights('.\/'+path+'\/mask_rcnn_ped_cfg_0010.h5', by_name=True)","ff4adad3":"def evaluate_model(dataset, model, cfg):\n    APs = list()\n    j=0\n    for image_id in dataset.image_ids:\n        if j>50:\n            continue\n        image, image_meta, gt_class_id, gt_bbox, gt_mask = load_image_gt(dataset, cfg, image_id)\n        scaled_image = mold_image(image, cfg)\n        sample = expand_dims(scaled_image, 0)\n        yhat = model.detect(sample, verbose=0)\n        r = yhat[0]\n        AP, _, _, _ = compute_ap(gt_bbox, gt_class_id, gt_mask, r[\"rois\"], r[\"class_ids\"], r[\"scores\"], r['masks'])\n        APs.append(AP)\n        j+=1\n    mAP = mean(APs)\n    return mAP","63c12182":"train_mAP = evaluate_model(train_set, model, cfg)\nprint(\"Train mAP: %.3f\" % train_mAP)\ntest_mAP = evaluate_model(test_set, model, cfg)\nprint(\"Test mAP: %.3f\" % test_mAP)","2c75a163":"class_names = ['BG', 'pedestrian']\nfor i in range(5):\n    image = test_set.load_image(i)\n    results = model.detect([image], verbose=1)\n    r = results[0]\n    display_instances(image, r['rois'], r['masks'], r['class_ids'], class_names, r['scores'])","8c344c32":"# Importing and Installing libraries","fd0ce152":"# Evaluation","9737163e":"# Training","a093ce51":"# Dataset"}}