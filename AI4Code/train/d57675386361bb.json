{"cell_type":{"d1c3ae9c":"code","5f10c9f7":"code","46b07ad3":"code","ce51c311":"code","7d7e7563":"code","572eb844":"code","deb1a36e":"code","d0582b76":"code","feac179f":"code","2d32d23b":"code","03d9e998":"code","4e2c8c64":"code","a8695e2c":"code","ac08162c":"markdown","cd10f5d7":"markdown","cb774f5f":"markdown","fe0c41ed":"markdown","9bb121c8":"markdown","c9857a9c":"markdown","59951e3f":"markdown","da2ba016":"markdown"},"source":{"d1c3ae9c":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nimport lightgbm\nimport xgboost\nfrom sklearn import svm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\n\nimport matplotlib.pyplot as plt","5f10c9f7":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","46b07ad3":"input_dir = '\/kaggle\/input\/santander-customer-transaction-prediction\/'\ndf_train = pd.read_csv(input_dir + 'train.csv')\ndf_train","ce51c311":"var_columns = [c for c in df_train.columns if c not in ['ID_code','target']]\n\nX = df_train.loc[:, var_columns]\ny = df_train.loc[:, 'target']\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2)\nX_train.shape, X_valid.shape, y_train.shape, y_valid.shape","7d7e7563":"model_rf = RandomForestClassifier(class_weight='balanced',\n                                 criterion='gini',\n                                 max_depth=55,\n                                 max_features='log2',\n                                 min_samples_leaf=0.005,\n                                 min_samples_split=0.005,\n                                 n_estimators=190)\n\nmodel_rf.fit(X_train, y_train)","572eb844":"model_gbm = GradientBoostingClassifier(n_estimators=5000,\n                                       learning_rate=0.05,\n                                       max_depth=3,\n                                       subsample=0.5,\n                                       validation_fraction=0.1,\n                                       n_iter_no_change=20,\n                                       max_features='log2',\n                                       verbose=0)\nmodel_gbm.fit(X_train, y_train)","deb1a36e":"lgbm_train_data = lightgbm.Dataset(X_train, label=y_train)\nlgbm_valid_data = lightgbm.Dataset(X_valid, label=y_valid)\n\nparameters = {'objective': 'binary',\n              'metric': 'auc',\n              'is_unbalance': 'true',\n              'boosting': 'gbdt',\n              'num_leaves': 63,\n              'feature_fraction': 0.5,\n              'bagging_fraction': 0.5,\n              'bagging_freq': 20,\n              'learning_rate': 0.01,\n              'verbose': 0\n             }\n\nmodel_lgbm = lightgbm.train(parameters,\n                            lgbm_train_data,\n                            valid_sets=lgbm_valid_data,\n                            num_boost_round=5000,\n                            early_stopping_rounds=50)","d0582b76":"model_xgboost = xgboost.XGBClassifier(learning_rate=0.05,\n                                      max_depth=2,\n                                      n_estimators=5000,\n                                      subsample=0.5,\n                                      colsample_bytree=0.25,\n                                      eval_metric='auc',\n                                      verbosity=0,\n                                      use_label_encoder=False)\n\neval_set = [(X_valid, y_valid)]\n\nmodel_xgboost.fit(X_train,\n                  y_train,\n                  early_stopping_rounds=20,\n                  eval_set=eval_set,\n                  verbose=False)","feac179f":"y_train_pred_rf = model_rf.predict_proba(X_train)[:,1]\ny_train_pred_gbm = model_gbm.predict_proba(X_train)[:,1]\ny_train_pred_lgbm = model_lgbm.predict(X_train)\ny_train_pred_xgboost = model_xgboost.predict_proba(X_train)[:,1]\n\ny_valid_pred_rf = model_rf.predict_proba(X_valid)[:,1]\ny_valid_pred_gbm = model_gbm.predict_proba(X_valid)[:,1]\ny_valid_pred_lgbm = model_lgbm.predict(X_valid)\ny_valid_pred_xgboost = model_xgboost.predict_proba(X_valid)[:,1]\n\ny_train_pred_all = np.mean([y_train_pred_rf, y_train_pred_gbm, y_train_pred_lgbm, y_train_pred_xgboost], axis=0)\ny_valid_pred_all = np.mean([y_valid_pred_rf, y_valid_pred_gbm, y_valid_pred_lgbm, y_valid_pred_xgboost], axis=0)","2d32d23b":"train_auc_list = [roc_auc_score(y_train, y_train_pred_rf),\n                  roc_auc_score(y_train, y_train_pred_gbm),\n                  roc_auc_score(y_train, y_train_pred_lgbm),\n                  roc_auc_score(y_train, y_train_pred_xgboost),\n                  roc_auc_score(y_train, y_train_pred_all)]\n\nvalid_auc_list = [roc_auc_score(y_valid, y_valid_pred_rf),\n                  roc_auc_score(y_valid, y_valid_pred_gbm),\n                  roc_auc_score(y_valid, y_valid_pred_lgbm),\n                  roc_auc_score(y_valid, y_valid_pred_xgboost),\n                  roc_auc_score(y_valid, y_valid_pred_all)]\n\npd.DataFrame({\"Technique\": [\"Random Forest\", \"GBM\", \"LightGBM\", \"XGBoost\", \"All\"],\n              \"Train_AUC\": train_auc_list,\n              \"Valid_AUC\": valid_auc_list\n})","03d9e998":"df_test = pd.read_csv(input_dir + 'test.csv')\ndf_sample_submissions = pd.read_csv(input_dir + 'sample_submission.csv')\ndf_test.shape, df_sample_submissions.shape","4e2c8c64":"X_test = df_test.loc[:, var_columns]\n\ny_test_pred_rf = model_rf.predict_proba(X_test)[:,1]\ny_test_pred_gbm = model_gbm.predict_proba(X_test)[:,1]\ny_test_pred_lgbm = model_lgbm.predict(X_test)\ny_test_pred_xgboost = model_xgboost.predict_proba(X_test)[:,1]\n\ndf_sample_submissions['target'] = np.mean([y_test_pred_rf, y_test_pred_gbm, y_test_pred_lgbm, y_test_pred_xgboost], axis=0)\ndf_sample_submissions","a8695e2c":"output_dir = '\/kaggle\/working\/'\ndf_sample_submissions.to_csv(output_dir + \"07_ensemble_scores.csv\", index=False)","ac08162c":"#### 3.c LightGBM","cd10f5d7":"## 4. Combine scores","cb774f5f":"## 3. Create Models\n#### 3.a Random Forest","fe0c41ed":"## 1. Read Train CSV","9bb121c8":"# Santander Customer Transaction Prediction - Ensemble\n## Ensemble of Random Forest, GBM, XGBoost and LightGBM\n\nIn the Kaggle competition, the objective is to identify which customer will make a transaction in the future.\n\n**Link to the competition**: https:\/\/www.kaggle.com\/c\/santander-customer-transaction-prediction\/  \n**Type of Problem**: Classification  \n**Metric for evalution**: AOC (Area Under Curve)\n\nThis Python 3 environment comes with many helpful analytics libraries installed\nIt is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python","c9857a9c":"#### 3.b GBM","59951e3f":"## 5. Score the test data\nFirst let us import test.csv\n","da2ba016":"#### 3.d XGBoost"}}