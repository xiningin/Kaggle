{"cell_type":{"1e707593":"code","d32ceb2f":"code","84de3697":"code","930f6202":"code","fc523778":"code","ccdcb847":"code","d808a19d":"code","9597452a":"code","b85e9c44":"code","ae2c0e88":"code","4de415fd":"code","747e4ac9":"code","67f0d7de":"code","27d31d39":"code","c34aadf9":"code","f92bd4ec":"code","d9dafc32":"code","11b1146e":"code","8beaa5c8":"code","6e1fc1c8":"code","e6bb4c70":"code","e6414c9b":"code","b0b0cd77":"code","d6ba37fd":"markdown","37a98ce8":"markdown"},"source":{"1e707593":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\nfrom matplotlib import ticker \nimport pycountry_convert as pc\nimport folium\nimport branca\nfrom datetime import datetime, timedelta,date\nfrom scipy.interpolate import make_interp_spline, BSpline\nimport plotly.express as px\nimport json, requests\nimport calmap\nimport matplotlib.dates as mdates\nfrom matplotlib.ticker import FuncFormatter\nimport matplotlib.ticker as tick\n\nimport plotly.graph_objs as go\nimport plotly.offline as py\n\nfrom keras.layers import Input, Dense, Activation, LeakyReLU\nfrom keras import models\nfrom keras.optimizers import RMSprop, Adam\n\nimport warnings\nwarnings.filterwarnings('ignore')","d32ceb2f":"# Retriving Dataset\ndf_confirmed = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndf_deaths = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\n\n# Depricated\ndf_covid19 = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\")","84de3697":"#Lets start analizing the shape and format of the data\nprint(df_confirmed.tail(10))","930f6202":"df_confirmed.rename(columns={'Province\/State':'state','Country\/Region':'country'}, inplace = True)\ndf_deaths.rename(columns={'Province\/State':'state','Country\/Region':'country'}, inplace = True)\ndf_covid19.rename(columns={'Country_Region':'country'}, inplace = True)","fc523778":"# Changing the conuntry names as required by pycountry_convert Lib\ndf_confirmed.loc[df_confirmed['country'] == \"US\", \"country\"] = \"USA\"\ndf_deaths.loc[df_deaths['country'] == \"US\", \"country\"] = \"USA\"\ndf_covid19.loc[df_covid19['country'] == \"US\", \"country\"] = \"USA\"\n\ndf_confirmed.loc[df_confirmed['country'] == 'Korea, South', \"country\"] = 'South Korea'\ndf_deaths.loc[df_deaths['country'] == 'Korea, South', \"country\"] = 'South Korea'\ndf_covid19.loc[df_covid19['country'] == \"Korea, South\", \"country\"] = \"South Korea\"\n\ndf_confirmed.loc[df_confirmed['country'] == 'Taiwan*', \"country\"] = 'Taiwan'\ndf_deaths.loc[df_deaths['country'] == 'Taiwan*', \"country\"] = 'Taiwan'\ndf_covid19.loc[df_covid19['country'] == \"Taiwan*\", \"country\"] = \"Taiwan\"\n\ndf_confirmed.loc[df_confirmed['country'] == 'Congo (Kinshasa)', \"country\"] = 'Democratic Republic of the Congo'\ndf_deaths.loc[df_deaths['country'] == 'Congo (Kinshasa)', \"country\"] = 'Democratic Republic of the Congo'\ndf_covid19.loc[df_covid19['country'] == \"Congo (Kinshasa)\", \"country\"] = \"Democratic Republic of the Congo\"\n\ndf_confirmed.loc[df_confirmed['country'] == \"Cote d'Ivoire\", \"country\"] = \"C\u00f4te d'Ivoire\"\ndf_deaths.loc[df_deaths['country'] == \"Cote d'Ivoire\", \"country\"] = \"C\u00f4te d'Ivoire\"\ndf_covid19.loc[df_covid19['country'] == \"Cote d'Ivoire\", \"country\"] = \"C\u00f4te d'Ivoire\"\n\ndf_confirmed.loc[df_confirmed['country'] == \"Reunion\", \"country\"] = \"R\u00e9union\"\ndf_deaths.loc[df_deaths['country'] == \"Reunion\", \"country\"] = \"R\u00e9union\"\ndf_covid19.loc[df_covid19['country'] == \"Reunion\", \"country\"] = \"R\u00e9union\"\n\ndf_confirmed.loc[df_confirmed['country'] == 'Congo (Brazzaville)', \"country\"] = 'Republic of the Congo'\ndf_deaths.loc[df_deaths['country'] == 'Congo (Brazzaville)', \"country\"] = 'Republic of the Congo'\ndf_covid19.loc[df_covid19['country'] == \"Congo (Brazzaville)\", \"country\"] = \"Republic of the Congo\"\n\ndf_confirmed.loc[df_confirmed['country'] == 'Bahamas, The', \"country\"] = 'Bahamas'\ndf_deaths.loc[df_deaths['country'] == 'Bahamas, The', \"country\"] = 'Bahamas'\ndf_covid19.loc[df_covid19['country'] == \"Bahamas, The\", \"country\"] = \"Bahamas\"\n\ndf_confirmed.loc[df_confirmed['country'] == 'Gambia, The', \"country\"] = 'Gambia'\ndf_deaths.loc[df_deaths['country'] == 'Gambia, The', \"country\"] = 'Gambia'\ndf_covid19.loc[df_covid19['country'] == \"Gambia, The\", \"country\"] = \"Gambia\"\n","ccdcb847":"# getting all countries\ncountries = np.asarray(df_confirmed[\"country\"])\n# Continent_code to Continent_names\ncontinents = {\n    'NA': 'North America',\n    'SA': 'South America', \n    'AS': 'Asia',\n    'OC': 'Australia',\n    'AF': 'Africa',\n    'EU' : 'Europe',\n    'na' : 'Others'\n}\n\n# Defininng Function for getting continent code for country.\ndef country_to_continent_code(country):\n    try:\n        a = pc.country_alpha2_to_continent_code(pc.country_name_to_country_alpha2(country))\n        return continents[a]\n    except :\n        return 'Others'\n    \ndf_confirmed.insert(1,'continent',df_confirmed.country.map(country_to_continent_code))\ndf_covid19.insert(1,'continent',df_covid19.country.map(country_to_continent_code))\ndf_deaths.insert(1,'continent',df_deaths.country.map(country_to_continent_code))","d808a19d":"df_confirmed = df_confirmed[df_confirmed.continent != \"Others\"]\ndf_covid19 = df_covid19[df_covid19.continent != \"Others\"]\ndf_deaths = df_deaths[df_deaths.continent != \"Others\"]\n\nprint(df_covid19.head())","9597452a":"df_countries_cases = df_covid19.copy().drop(['Lat','Long_','Last_Update','ISO3', 'UID'],axis =1)\ndf_countries_cases.fillna(0,inplace = True)","b85e9c44":"#No mising values\nprint(df_countries_cases.isnull().sum())","ae2c0e88":"df_continent = pd.DataFrame(df_covid19.copy().drop(['Lat','Long_','country','Last_Update', 'Incident_Rate', 'UID'],axis =1))\ndf_continent = df_continent.groupby(\"continent\", as_index = False).sum()\ndf_continent = df_continent.sort_values(\"Deaths\", ascending = False)\n\ntotals = [i+j+k for i,j,k in zip(df_continent.Deaths, df_continent.Recovered, df_continent.Active)]\ndeathsBars = [i \/ j * 100 for i,j in zip(df_continent.Deaths, totals)]\nrecovBars = [i \/ j * 100 for i,j in zip(df_continent.Recovered, totals)]\nactiveBars = [i \/ j * 100 for i,j in zip(df_continent.Active, totals)]\ncontinent = df_continent.continent\n\ndf =pd.DataFrame(zip(continent,activeBars, recovBars,deathsBars))\ndf.sort_values(1, ascending = True, inplace = True)","4de415fd":"deathsBars = df[1]\nrecovBars = df[2]\nactiveBars = df[3]\ny = df[0]\n\n#plt.style.use('seaborn-darkgrid')\npalette = plt.get_cmap('Set1')\n\n#my_dpi=90\nf = plt.figure(figsize=(7,8))\nax = plt.subplot(211)\n\nwidth = 0.5\nax.barh(y, deathsBars,width, color=palette(1), edgecolor='white', label='Deaths')\nax.barh(y, recovBars,width, left=deathsBars, color='grey', edgecolor='white', label='Recovers')\nax.barh(y, activeBars,width, left=[100-i for i in activeBars], color=palette(8), edgecolor='white', label='Actives')\n\nax = plt.gca()\nfmt = '%.0f%%' # Format the ticks in %'\nxticks = tick.FormatStrFormatter(fmt)\nax.xaxis.set_major_formatter(xticks)\n\nplt.title('% of affected by continent (Deaths - Recovered - Actives)', loc='left', fontsize = 18, pad = 10)\nax.set( ylim=[3*width - 1, len(df)+1])    \nplt.tick_params(labelsize = 12)   \n\nax.legend()\n\n\nplt.show() ","747e4ac9":"df_dates_cv = df_confirmed.drop(['state','Lat','Long'], axis=1)\ndates_columns = df_confirmed.drop(['state','country','continent','Lat','Long'], axis=1)\n\nmelted_confirmed=pd.melt(frame=df_dates_cv,id_vars=['country','continent'], value_vars= dates_columns)\nmelted_confirmed.rename(columns={'variable':'date', 'value':'confirmed'}, inplace= True)\nmelted_confirmed['deaths'] =0\nmelted_confirmed","67f0d7de":"df_dates_cv = df_deaths.drop(['state','Lat','Long'], axis=1)\ndates_columns = df_deaths.drop(['state','country','continent','Lat','Long'], axis=1)\n\nmelted_deaths = pd.melt(frame=df_dates_cv,id_vars=['country','continent'], value_vars= dates_columns)\nmelted_deaths.rename(columns={'variable':'date', 'value':'deaths'}, inplace= True)\nmelted_deaths.insert(3, 'confirmed',0)\nmelted_deaths","27d31d39":"conc_data_row = pd.concat([melted_confirmed, melted_deaths],ignore_index =True)\nconc_data_row['date'] = pd.to_datetime(conc_data_row.date)\nconc_data_row.insert(3,'month', pd.DatetimeIndex(conc_data_row.date).month)\nconc_data_row= conc_data_row.groupby(['date','month'], as_index=False)['confirmed', 'deaths'].sum()\n","c34aadf9":"df_month = conc_data_row.groupby(['month','date'], as_index=False).sum()","f92bd4ec":"def y_fmt(tick_val, pos):\n    if tick_val > 1000000:\n        val = int(tick_val\/1000000)\n        return '{:d} M'.format(val)\n    elif tick_val > 1000:\n        val = int(tick_val\/ 1000)\n        return '{:d} k'.format(val)\n    else:\n        return tick_val","d9dafc32":"# Make a data frame\ndf=pd.DataFrame({'x': df_month.date, 'y1': df_month.confirmed, 'y2': df_month.deaths})\n    \n#plt.style.use('fivethirtyeight')\nplt.style.use('seaborn-darkgrid')\nmy_dpi=100\n#f =plt.figure(figsize=(480\/my_dpi, 480\/my_dpi), dpi=my_dpi)\nf =plt.figure(figsize=(10, 10))\nax = f.add_subplot(111)\n\npalette = plt.get_cmap('Set1')\n\nfont = {'family': 'arial',\n        'color':  'darkred',\n        'weight': 'normal'\n        }\n\n# multiple line plot\nplt.plot(df['x'], df['y2'], marker='', color='grey', linewidth=1, alpha=0.4)\n    \n#Now re do the interesting curve, but biger with distinct color\nplt.plot(df['x'], df['y1'], marker='', color=palette(1), linewidth=4, alpha=0.7) \n\n# plot\nx_pos = df.x.tail(1).item()+ timedelta(days=5)\nplt.text(x_pos, df.y2.tail(1).item(), str(y_fmt(df.y2.tail(1).item(),0)) + ' Deaths', horizontalalignment='left', size=12, color='grey', fontdict=font)\n     \n#And add a special annotation for the group we are interested in\nplt.text(x_pos, df.y1.tail(1).item(), str(df.y1.tail(1).item()\/1000) + 'K Confirmed', horizontalalignment='left', size=12, color=palette(1), fontdict=font)\n\nmonthyearFmt = mdates.DateFormatter('%d %b')\nax.xaxis.set_major_formatter(monthyearFmt)\n\nax = plt.gca()\nax.yaxis.set_major_formatter(tick.FuncFormatter(y_fmt))\nplt.tick_params(labelsize = 13) \n\n# Add titles\nplt.title(\"Evolution of confirmed cases vs deaths over the time\", loc='left', fontsize=18, fontweight=0, color='black', fontdict=font)\n\n","11b1146e":"conc_data_row = pd.concat([melted_confirmed, melted_deaths],ignore_index =True)\n#conc_data_row = conc_data_row[conc_data_row['country'] == 'Spain']\nconc_data_row = conc_data_row.groupby(['country','continent','date'], as_index=False)['confirmed', 'deaths'].sum()\nconc_data_row['date'] = pd.to_datetime(conc_data_row.date)\n#conc_data_row.insert(3,'month', pd.DatetimeIndex(conc_data_row.date).month)\n\nday_after = conc_data_row.copy()\nday_after['date'] =  day_after['date']- timedelta(days=1)\n\n\nconc_data_row_new = pd.merge(conc_data_row,day_after,on=['country','continent','date'])\n\nconc_data_row_new['new_cases'] = conc_data_row_new['confirmed_y'] - conc_data_row_new['confirmed_x']\nconc_data_row_new['new_deaths'] = conc_data_row_new['deaths_y'] - conc_data_row_new['deaths_x']\nconc_data_row_new.drop(['confirmed_y', 'deaths_y'], axis = 1, inplace = True)\nconc_data_row_new.rename(columns = {'confirmed_x':'confirmed','deaths_x':'deaths'}, inplace = True)\nconc_data_row_new.insert(3,'month', pd.DatetimeIndex(conc_data_row_new.date).month)\n#conc_data_row_new['month_d'] = conc_data_row_new['month'].map(month)","8beaa5c8":"# Make a data frame\n \ndef plot_new_cases(df):    \n    df=pd.DataFrame({'x': df.date, 'c':df.continent, 'y1': df.new_cases, 'y2': df.new_deaths})\n    #plt.style.use('fivethirtyeight')\n    plt.style.use('seaborn-darkgrid')\n    my_dpi=60\n\n    #(96\/my_dpi, 480\/my_dpi)\n    \n    #plt.figure(figsize=(10, 10), dpi=my_dpi)\n    f = plt.figure(figsize=(8, 3))\n    ax = f.add_subplot(111)\n\n    palette = plt.get_cmap('Set1')\n    font = {'family': 'arial',\n            'color':  'darkred',\n            'weight': 'normal',\n            'size': 20\n            }\n\n    #Now re do the interesting curve, but biger with distinct color\n    plt.plot(df['x'], df['y1'], marker='', color=palette(1), linewidth=4, alpha=0.7) \n    plt.plot(df['x'],df['y2'], marker='', color='grey', linewidth=1, alpha=0.4)\n\n    \n    monthyearFmt = mdates.DateFormatter('%d %b')\n    ax.xaxis.set_major_formatter(monthyearFmt)\n    plt.yticks([])\n\n    # Adding labes of total deaths\n    x_pos = df.x.tail(1).item()+ timedelta(days=5)\n    plt.text(x_pos, df.y2.tail(1), str(df.y2.sum()) + ' Total Deaths', horizontalalignment='left', size=12, color='grey', fontdict=font)\n    \n    #Adding information of last amount of new cases \n    plt.text(x_pos, df.y1.max()\/2, str(int(df.y1.sum())) + ' Last new cases' , horizontalalignment='left', size=12, color=palette(1), fontdict=font)\n    \n    #Adding information such as the highet pick\n    max_y1 = df.y1.max()\n    day = df[df['y1']== max_y1]\n    text =  str(max_y1) + ' Highest pick \\nof new cases on '+ str(day.x.item().strftime('%d %b'))\n    plt.text(x_pos, df.y1.max()*0.9, text , horizontalalignment='left', size=12, color=palette(1), fontdict=font)\n    \n    plt.title('Distribution of new cases: ' + df.c.max(), \n              loc='left', fontsize=16, fontweight=0, color='black', fontdict=font, pad = 10)","6e1fc1c8":"p_continent = conc_data_row_new.groupby(['continent', 'date'],as_index=False)['new_cases','new_deaths'].sum()\n\nfor i in p_continent.continent.unique():\n    df = pd.DataFrame(p_continent[p_continent['continent'] == i])\n    plot_new_cases(df)","e6bb4c70":"temp_data = conc_data_row_new.copy()\ntemp_data = temp_data.groupby('date', as_index=False)['new_cases','new_deaths'].sum()\ntemp_data.sort_values('date', inplace = True)","e6414c9b":"\n# Plot\nf = plt.figure(figsize=(15,10))\nax = f.add_subplot(111)\n\nplt.plot(temp_data.date,temp_data.new_cases,color=palette(1),linewidth=2,  marker='o',markersize=5)\n\n# Tick-Parameters\nmonthyearFmt = mdates.DateFormatter('%d %b')\nax.xaxis.set_major_formatter(monthyearFmt)\n\nax = plt.gca()\nax.yaxis.set_major_formatter(tick.FuncFormatter(y_fmt))\nplt.tick_params(labelsize = 13) \n\n# Plot Title\nplt.title('Distribution of new cases over the time',loc='left', fontsize=18, color='black', pad = 10)\n\n\nplt.show()","b0b0cd77":"\ndef barv_graph(df):\n    \n    #plt.style.use('seaborn-darkgrid')\n    palette = plt.get_cmap('Set1')\n\n    my_dpi=100\n    #plt.subplots(figsize=(480\/my_dpi, 480\/my_dpi), dpi=my_dpi)\n    f = plt.figure(figsize=(8,30))\n    ax = plt.subplot(711)\n    \n\n    x_pos = np.arange(len(df))\n    width = 0.3\n\n    #plt.subplots(figsize = (10,8))\n    ax.barh(x_pos, df.Active, width, color=palette(8), edgecolor='white', label = 'Active')\n    ax.barh(x_pos+(width), df.Deaths, width, color='orange', edgecolor='white', label = 'Deaths')\n    ax.barh(x_pos+(width*2), df.Confirmed, width, color=palette(1), edgecolor='white', label='Confirmed')\n\n    text = '10 countries with most confirmed cases in '+ df.continent.max()\n    plt.title(text , loc='left', fontsize = 18, pad = 10)\n    ax.set(yticks=x_pos + (width*2), yticklabels=df.country, ylim=[2*width - 1, len(df)])\n    #plt.yticks(x_pos, df.country)\n    \n    ax = plt.gca()\n    ax.xaxis.set_major_formatter(tick.FuncFormatter(y_fmt))\n    plt.tick_params(labelsize = 12)   \n    \n    ax.legend()\n    plt.show()\n    \n    \ndf_p = df_countries_cases.groupby(['country','continent'], as_index = False)['Confirmed', 'Deaths', 'Recovered','Active'].sum()\n\nfor x in df_p.continent.unique():\n    df = df_p[df_p['continent']==x]\n    df.sort_values('Confirmed',ascending = False, inplace = True)\n    df= df.head(10)\n    df.sort_values('Confirmed',ascending = True, inplace = True)\n    barv_graph(df)\n     ","d6ba37fd":"**These charts confirm us what we know about how thw virus has moved around the world:**\n\n- It start in Asia it has two pick, the first one starts in China (the origin of the virus) and the next means that the virus has moved to other countries (knowing the last news from Rusia).  \n\n- In Europe and  Australia, the line starts to increase very fast since march, the diference is that in Australia the curve has a remarkable descending at the beggining of april, however, in Europe that the curve starts to decrease these last days. These are quarantine effects that tell us that the strategy made by Australia has been more effective.\n\n- In America, the curve starts to increase after 15 of march, firts in North America, the same in Africa they have being hardly affected in comparison other countries\n\nThe behavior of the expasion of the virus can be expalined  because the air traffic between Asia - Europe is higher, (and inside Europe is masive) and also they are closer than USA.\n\nIn Australia looks like the quarantine has promising results than the other places but, again, we have to take in mind that there are many other factor such us the distance, air traffic, population and of course the earlier actions taken by Australia and the well bebahavior of their citicens","37a98ce8":"Hi all!\nHere an EDA of the covid19. I have experience working with BI toot but this my first time working with python and Im loving it.\nI have develope some charts that I consider usefull to transmit the information in an easy way.\n\nThis is a first version, I will be updating in the way I'd learn more. I'm really enjoying learning a bit more this quarantine, any suggestion is always welcome!\n\nStay safe!"}}