{"cell_type":{"c0b8c5d4":"code","4ba4eaa0":"code","10b295d9":"code","6a1f7296":"code","c9ed3f9c":"code","36c1abe0":"code","23c9f0b9":"code","48ccaedc":"code","7fd4d1a7":"code","affbc4a0":"code","533053a0":"markdown","c4ee7c89":"markdown","8eb06922":"markdown","7190701d":"markdown","61ab18f0":"markdown"},"source":{"c0b8c5d4":"import numpy as np # lineer cebir i\u015flemleri i\u00e7in\nimport pandas as pd # verinin organizasyonu i\u00e7in\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.model_selection import train_test_split\n#Grafik \u00e7izdirme k\u00fct\u00fcphanesi\nimport matplotlib.pyplot as plt\n\nimport os #Sistem \nimport warnings #uyar\u0131lar\nprint(os.listdir(\"..\/input\/linearregressiondataset\"))\nwarnings.filterwarnings(\"ignore\")","4ba4eaa0":"df = pd.read_csv(\"..\/input\/linearregressiondataset\/linear-regression-dataset.csv\",sep = \";\")\n#dataset tan\u0131mlama","10b295d9":"plt.scatter(df.deneyim,df.maas)\nplt.xlabel(\"deneyim\")\nplt.ylabel(\"maas\")\nplt.show()\n#deneyim ve maas grafiksel g\u00f6sterim","6a1f7296":"# linear regression model olusturma\nlinear_reg = LinearRegression()\n\nx = df.deneyim.values.reshape(-1,1)\ny = df.maas.values.reshape(-1,1)\n\"\"\"\u015eimdi veri \u00e7er\u00e7evesini e\u011fitim ve test setlerine ay\u0131ral\u0131m (%20):\"\"\"\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state=9)\nlinear_reg.fit(X_train,y_train)","c9ed3f9c":"b0 = linear_reg.predict(np.array(0).reshape(-1,1))\nprint(\"b0: \",b0)\n#fit edilmis modeli kullanarak 0 deneyim maas\u0131n\u0131 tahmin ettirme","36c1abe0":"b0_ = linear_reg.intercept_\nprint(\"b0_: \",b0_)   # y eksenini kestigi nokta intercept\n\nb1 = linear_reg.coef_\nprint(\"b1: \",b1)   # egim slope","23c9f0b9":"####\n# maas = 1809 + 1151*deneyim formulu ile tanimlayabiliriz...\nmaas_yeni = 1809.81189224 + 1151.87310697*11\nprint(maas_yeni)\nprint(linear_reg.predict(np.array(11).reshape(-1,1)))\n#goruldugu gibi iki sonucta ayni cikmaktadir..\n####\n\n\n# visualize line\nplt.scatter(x, y, color = \"m\", \n\t\t\tmarker = \"o\", s = 30)\n\n\narray = np.array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]).reshape(-1,1)  # deneyim\ny_head = linear_reg.predict(array)  # maas\n\nplt.plot(array, y_head,color = \"red\")\nplt.xlabel('x') \nplt.ylabel('y')\nplt.show()\nprint(\"deneyim 100 iken maas: \"+str(int(linear_reg.predict(np.array(100).reshape(-1,1))[0][0]))+\" TL\")\nprint(\"deneyim 10 iken maas: \"+str(int(linear_reg.predict(np.array(10).reshape(-1,1))[0][0]))+\" TL\")\nprint(\"deneyim 1 iken maas: \"+str(int(linear_reg.predict(np.array(1).reshape(-1,1))[0][0]))+\" TL\")","48ccaedc":"pred = linear_reg.predict(X_test)\ntest_set_rmse = (np.sqrt(mean_squared_error(y_test, pred)))\ntest_set_r2 = r2_score(y_test, pred)\n\nprint(\"MSE: \"+str(test_set_rmse))\nprint(\"R-2: \"+str(test_set_r2))","7fd4d1a7":"import numpy as np \nimport matplotlib.pyplot as plt \n\ndef estimate_coef(x, y): \n\t# g\u00f6zlem \/ puan say\u0131s\u0131\n\tn = np.size(x) \n\n\t# x ve y vekt\u00f6r\u00fcn\u00fcn ortalamas\u0131 \n\tm_x, m_y = np.mean(x), np.mean(y) \n\n\t# x ile ilgili \u00e7apraz sapma ve sapman\u0131n hesaplanmas\u0131 \n\tSS_xy = np.sum(y*x) - n*m_y*m_x \n\tSS_xx = np.sum(x*x) - n*m_x*m_x \n\n\t# regresyon katsay\u0131lar\u0131n\u0131n hesaplanmas\u0131 \n\tb_1 = SS_xy \/ SS_xx \n\tb_0 = m_y - b_1*m_x \n\n\treturn(b_0, b_1) \n\ndef plot_regression_line(x, y, b): \n    # SADECE GORSEL AMACLI\n\t# ger\u00e7ek noktalar\u0131 da\u011f\u0131l\u0131m grafi\u011fi olarak \u00e7izmek\n\tplt.scatter(x, y, color = \"m\", \n\t\t\tmarker = \"o\", s = 30) \n\n\t# \u00f6ng\u00f6r\u00fclen yan\u0131t vekt\u00f6r\u00fc \n\ty_pred = b[0] + b[1]*x \n\n\t# regresyon \u00e7izgisinin \u00e7izilmesi \n\tplt.plot(x, y_pred, color = \"g\") \n\n\t# etiket koymak\n\tplt.xlabel('x') \n\tplt.ylabel('y') \n\n\t# g\u00f6sterme i\u015flevi \n\tplt.show() \n\ndef main(): \n    #rastgele tutarl\u0131 x ve y olu\u015fturma\n\tx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) \n\ty = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12]) \n\n\t# tahmin katsay\u0131lar\u0131 \n\tb = estimate_coef(x, y) \n\tprint(\"tahmin katsay\u0131lar\u0131:\\nb_0 = {} \\\\nb_1 = {}\".format(b[0], b[1])) \n\n\t# x ve y ile regresyon cizgisi cizme \n\tplot_regression_line(x, y, b) \n\nif __name__ == \"__main__\": \n\tmain() \n","affbc4a0":"import matplotlib.pyplot as plt \nfrom sklearn import datasets, linear_model \n\n# boston veri k\u00fcmesini y\u00fckleyin\nboston = datasets.load_boston(return_X_y=False) \n\n# \u00f6zellik matrisi (X) ve yan\u0131t vekt\u00f6r\u00fcn\u00fc (y) tan\u0131mlama \nX = boston.data \ny = boston.target \n\n# X ve y'yi e\u011fitim ve test setlerine b\u00f6lmek\nfrom sklearn.model_selection import train_test_split \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, \n\t\t\t\t\t\t\t\t\t\t\t\t\trandom_state=1) \n\n# do\u011frusal regresyon nesnesi olusturma\nreg = linear_model.LinearRegression() \n\n# e\u011fitim setlerini kullanarak modeli e\u011fitme\nreg.fit(X_train, y_train) \n\n# katsay\u0131lar\nprint('Coefficients: \\n', reg.coef_) \n\n# varyans skoru: 1, m\u00fckemmel bir tahmin anlam\u0131na gelir \nprint('Variance score: {}'.format(reg.score(X_test, y_test))) \n\n#gorsel\nplt.style.use('fivethirtyeight') \n\n## E\u011fitim verilerinde art\u0131k hatalar\u0131n \u00e7izilmesi\nplt.scatter(reg.predict(X_train), reg.predict(X_train) - y_train, \n\t\t\tcolor = \"green\", s = 10, label = 'Train data') \n\n## Test verilerinde art\u0131k hatalar\u0131n \u00e7izilmesi\nplt.scatter(reg.predict(X_test), reg.predict(X_test) - y_test, \n\t\t\tcolor = \"blue\", s = 10, label = 'Test data') \n\n# s\u0131f\u0131r hata icin cizgi \u00e7izme\nplt.hlines(y = 0, xmin = 0, xmax = 50, linewidth = 2) \n\nplt.legend(loc = 'upper right') \n\n## plot ba\u015fl\u0131\u011f\u0131 \nplt.title(\"kal\u0131nt\u0131 hatalar\") \n\n#goster\nplt.show() \n","533053a0":"***FARKLI DATASETLER \u0130LE L\u0130NEAR REGRESS\u0130ON Y\u00d6NTEM\u0130 KULLANIMI***","c4ee7c89":"**RASTGELE OLU\u015eTURULMU\u015e DATA, FORM\u00dcL \u0130LE HESAPLAMA**","8eb06922":"**BOSTON KONUT DATASI \u0130LE SKLEARN KULLANARAK FARKLI B\u0130R L\u0130NEAR REGRESS\u0130ON**\n\n    BOSTON DATASET: Boston \u00e7evresindeki konut fiyatlar\u0131 hakk\u0131nda 506 g\u00f6zlem i\u00e7ermektedir. Regresyon \u00f6rneklerinde s\u0131kl\u0131kla kullan\u0131l\u0131r ve 15 \u00f6zellik i\u00e7erir.","7190701d":"**MAAS-DENEY\u0130M DATASET\u0130 TANIMLAMA \u0130LE SKLEARN KULLANARAK HESAPLAMA**","61ab18f0":"\u015eimdi, regresyon g\u00f6revlerini de\u011ferlendirmek i\u00e7in yayg\u0131n olarak kullan\u0131lan iki \u00f6l\u00e7\u00fcm olan RMSE ve R-2 \u00f6l\u00e7\u00fcmlerini kullanarak ger\u00e7ek de\u011ferlere y\u00f6nelik \u00f6ng\u00f6r\u00fcleri kontrol edece\u011fiz:"}}