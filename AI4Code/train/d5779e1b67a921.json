{"cell_type":{"e45dc755":"code","052a6433":"code","bb21441a":"code","ac8aa749":"code","8496bef4":"code","54c713e6":"code","dd30c0e9":"code","f4da2237":"code","7fe63b80":"code","302de9df":"code","aa397ba3":"code","72a8a5a0":"code","bb450546":"code","438dc843":"code","2924111a":"code","e7e465d6":"code","4fa84b77":"code","eb1e0b6e":"code","bfda66eb":"markdown","5898e40b":"markdown"},"source":{"e45dc755":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Importing the libraries\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","052a6433":"# Importing the training set\ndataset_train = pd.read_csv('..\/input\/Uniqlo(FastRetailing) 2012-2016 Training - stocks2012-2016.csv')","bb21441a":"dataset_train.head()","ac8aa749":"train = dataset_train.loc[:, [\"Open\"]].values\ntrain","8496bef4":"# Feature Scaling\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range = (0, 1))\ntrain_scaled = scaler.fit_transform(train)\ntrain_scaled.shape","54c713e6":"# train part\nN = 1000\nplt.plot(train_scaled[:N])\nplt.show()","dd30c0e9":"# we are going to predict the last 1226-N values \nplt.plot(train_scaled[N:])\nplt.show()","f4da2237":"# Creating a data structure with 50 timesteps and 1 output\nX_train = []\ny_train = []\ntimesteps = 50\nfor i in range(timesteps, N):\n    X_train.append(train_scaled[i-timesteps:i, 0])\n    y_train.append(train_scaled[i, 0])\nX_train, y_train = np.array(X_train), np.array(y_train)","7fe63b80":"print('X_train shape: ', X_train.shape)\nprint('y_train shape: ', y_train.shape)","302de9df":"# Reshaping\nX_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))","aa397ba3":"print('X_train shape: ', X_train.shape)\nprint('y_train shape: ', y_train.shape)","72a8a5a0":"import math\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation\nfrom keras.layers import LSTM\nfrom sklearn.metrics import mean_squared_error\n\n# model\nmodel = Sequential()\nmodel.add(LSTM(128, input_shape=(timesteps, 1), return_sequences=True)) # 128 lstm neuron(block)\nmodel.add(LSTM(64, return_sequences=True)) # 64 lstm neuron(block)\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(32)) # 128 lstm neuron(block)\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n          \nmodel.compile(loss='mean_squared_error', optimizer='adam')\nmodel.fit(X_train, y_train, epochs=250, batch_size=32)","bb450546":"predicted_stock_price = []\n\n#1\nX_test = X_train[(N-51),:] # the last \nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (1, X_test.shape[0], X_test.shape[1]))\na = model.predict(X_test)\npredicted_stock_price = np.append(predicted_stock_price, a)\nX_test = np.append(X_test, predicted_stock_price) \nX_test","438dc843":"#2-7\nfor i in range(1,(1226-N)):\n    X_test = X_test[1:51]\n    X_test = np.array(X_test)\n    X_test = np.reshape(X_test, (1, 50, 1))\n    a = model.predict(X_test)\n    predicted_stock_price = np.append(predicted_stock_price, a)  \n    X_test = np.append(X_test, predicted_stock_price[i])","2924111a":"predicted_stock_price = scaler.inverse_transform(predicted_stock_price.reshape(-1,1))\npredicted_stock_price.shape","e7e465d6":"# train part\nplt.plot(train[:N])\nplt.show()","4fa84b77":"# we are going to predict \nplt.plot(train[N:], color = 'blue', label = 'Real Google Stock Price')\n#plt.title('Google Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Google Stock Price')\nplt.legend()\nplt.show()","eb1e0b6e":"# Visualising the results\n# plt.plot(train[1216:].reshape(-1,1), color = 'blue', label = 'Real Google Stock Price')\nplt.plot(predicted_stock_price, color = 'red', label = 'Predicted Google Stock Price')\nplt.title('Google Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Google Stock Price')\nplt.legend()\nplt.show()","bfda66eb":"<a id=\"33\"><\/a>\n### Predictions and Visualising RNN Model","5898e40b":"### Create LSTM Model"}}