{"cell_type":{"57256121":"code","a52a8db8":"code","fe5c8cd7":"code","4dabf49c":"code","fbb3f35d":"code","b5bf8967":"code","9db351fa":"code","d77a7d59":"code","9747832c":"markdown","ea9857df":"markdown","03e22ba4":"markdown","82b99d1e":"markdown","3170f16d":"markdown","92b490fe":"markdown","ec26b8bd":"markdown","57ed71b4":"markdown","76261ce5":"markdown","6461b378":"markdown","cc4e1179":"markdown","92ba722d":"markdown","bcf6c5b8":"markdown"},"source":{"57256121":"import os\nif not os.path.exists('.mujoco_setup_complete'):\n  # Get the prereqs\n  !apt-get -qq update\n  !apt-get -qq install -y libosmesa6-dev libgl1-mesa-glx libglfw3 libgl1-mesa-dev libglew-dev patchelf\n  # Get Mujoco\n  !mkdir ~\/.mujoco\n  !wget -q https:\/\/mujoco.org\/download\/mujoco210-linux-x86_64.tar.gz -O mujoco.tar.gz\n  !tar -zxf mujoco.tar.gz -C \"$HOME\/.mujoco\"\n  !rm mujoco.tar.gz\n  # Add it to the actively loaded path and the bashrc path (these only do so much)\n  !echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME\/.mujoco\/mujoco210\/bin' >> ~\/.bashrc \n  !echo 'export LD_PRELOAD=$LD_PRELOAD:\/usr\/lib\/x86_64-linux-gnu\/libGLEW.so' >> ~\/.bashrc \n  # THE ANNOYING ONE, FORCE IT INTO LDCONFIG SO WE ACTUALLY GET ACCESS TO IT THIS SESSION\n  !echo \"\/root\/.mujoco\/mujoco210\/bin\" > \/etc\/ld.so.conf.d\/mujoco_ld_lib_path.conf\n  !ldconfig\n  # Install Mujoco-py\n  !pip3 install -U 'mujoco-py<2.2,>=2.1'\n  # run once\n  !touch .mujoco_setup_complete\n\ntry:\n  if _mujoco_run_once:\n    pass\nexcept NameError:\n  _mujoco_run_once = False\nif not _mujoco_run_once:\n  # Add it to the actively loaded path and the bashrc path (these only do so much)\n  try:\n    os.environ['LD_LIBRARY_PATH']=os.environ['LD_LIBRARY_PATH'] + ':\/root\/.mujoco\/mujoco210\/bin'\n  except KeyError:\n    os.environ['LD_LIBRARY_PATH']='\/root\/.mujoco\/mujoco210\/bin'\n  try:\n    os.environ['LD_PRELOAD']=os.environ['LD_PRELOAD'] + ':\/usr\/lib\/x86_64-linux-gnu\/libGLEW.so'\n  except KeyError:\n    os.environ['LD_PRELOAD']='\/usr\/lib\/x86_64-linux-gnu\/libGLEW.so'\n  # presetup so we don't see output on first env initialization\n  import mujoco_py\n  _mujoco_run_once = True\n#source of this code block : https:\/\/gist.github.com\/BuildingAtom\/3119ac9c595324c8001a7454f23bf8c8","a52a8db8":"import mujoco_py","fe5c8cd7":"!apt install -y python-opengl ffmpeg > \/dev\/null 2>&1\n\n# !apt install -y xvfb\n%pip install pyvirtualdisplay","4dabf49c":"from pyvirtualdisplay import Display\ndisplay = Display(visible=0, size=(400, 300))\ndisplay.start()\n\n\nfrom matplotlib import pyplot as plt, animation\n%matplotlib inline\nfrom IPython import display\n\ndef create_anim(frames, dpi, fps):\n    plt.figure(figsize=(frames[0].shape[1] \/ dpi, frames[0].shape[0] \/ dpi), dpi=dpi)\n    patch = plt.imshow(frames[0])\n    def setup():\n        plt.axis('off')\n    def animate(i):\n        patch.set_data(frames[i])\n    anim = animation.FuncAnimation(plt.gcf(), animate, init_func=setup, frames=len(frames), interval=fps)\n    return anim\n\ndef display_anim(frames, dpi=10, fps=100):\n    anim = create_anim(frames, dpi, fps)\n    return anim.to_jshtml()\n\ndef save_anim(frames, filename, dpi=60, fps=50):\n    anim = create_anim(frames, dpi, fps)\n    anim.save(filename)\n\n\nclass trigger:\n    def __init__(self):\n        self._trigger = True\n\n    def __call__(self, e):\n        return self._trigger\n\n    def set(self, t):\n        self._trigger = t","fbb3f35d":"import gym\n\n!pip install tensorflow==1.15.0\nimport tensorflow as tf\n\n!apt-get install -y cmake libopenmpi-dev python3-dev zlib1g-dev\n!pip install \"stable-baselines[mpi]==2.9.0\"","b5bf8967":"from stable_baselines import PPO1\nfrom stable_baselines.common.policies import MlpPolicy\nenv = gym.make(\"Walker2d-v2\")\n\nmodel = PPO1(MlpPolicy, env, verbose=0)","9db351fa":"model.learn(total_timesteps=4000000)","d77a7d59":"frames = []\nenv = gym.make(\"Walker2d-v2\")\nobs = env.reset()\ndone = False\nepisode_reward = 0\nwhile not done:\n    frames.append(env.render(mode='rgb_array'))\n    obs, rew,done,info = env.step(model.predict(obs)[0])\n    episode_reward += rew\nenv.close()\n\nprint(\"Episode Reward: \" + str(episode_reward))\n\ndisplay.HTML(display_anim(frames))","9747832c":"Train our agent :","ea9857df":"# **Step 5 :** Display Episode Frames In the notebook","03e22ba4":"![OpenAI Mujuco Environments](https:\/\/i.imgur.com\/FM4B4Gq.png)","82b99d1e":"# **Step 1 :** Install Mujuco Physics engine on the kernel","3170f16d":"# Introduction\n\nI needed to setup OpenAI Gym Mujuco Envroinments for my personal project, but unfortunately I did not find any solution that works properly, or some of the solutions that used to work are no longer working.\nSo by searching in the internet, github and exploring previous netbooks, I was able to find a way to implement it in Kegel.\n\nIn this notebook, we first setup Mujuco physics engine then we go for setting up a virtual display to display the environments episodes in the notebook and finally we apply reinforcement learning using OpenAI stable baselines v2 to train our agent ","92b490fe":"# **Step 2 :** Install Virtual Display","ec26b8bd":"# **Step 4 :** Create The Agent Model And Train It","57ed71b4":"# **Step 3 :** import OpenAI gym , Install Tensorflow 1.x and Stable baselines 2.x","76261ce5":"Finally render an episode and display it in the notebook :","6461b378":"Then import it :","cc4e1179":"Then import it and define some helper functions:","92ba722d":"# **Please Do Upvote :D**","bcf6c5b8":"Create our environment , and the model (I will use Walker2d-v2 environment but you can change it to any mujuco environments available in OpenAI gym) :"}}