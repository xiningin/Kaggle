{"cell_type":{"8d1ae6a5":"code","4c10b6f5":"code","da1c1992":"code","cb568263":"code","7e9392e7":"code","99980e12":"code","62d1c335":"code","2516a183":"code","3bb277c3":"code","333b5b3a":"code","30d0b160":"code","e0123bbc":"code","85378554":"code","a6eb331d":"code","06dba8e1":"code","efc0c209":"code","e263554c":"code","1def7395":"code","58914e17":"code","f9164f38":"code","1a552e57":"code","38af7364":"code","f2bc47b2":"code","76120634":"code","e243bf34":"code","0eaa6107":"code","c216d641":"code","4782aee6":"code","8939bfd2":"code","a40c0363":"code","0d49aff5":"code","933cf512":"code","3339d662":"code","2f9b870d":"code","43bc4512":"code","43a44de5":"code","a059a421":"code","1c380ffc":"code","ee47893b":"code","4e656c66":"code","5881bb0d":"code","0734fea8":"code","b809f3ae":"code","7df3b0d8":"code","c0496efa":"code","d1a631bb":"code","f5492844":"markdown","f9b14dca":"markdown","6a54eeb1":"markdown","137013eb":"markdown","c48afa20":"markdown","3c59914b":"markdown","740faf35":"markdown","520aad95":"markdown","46ba28fa":"markdown","c25e0d93":"markdown","6a04425f":"markdown","d622f91a":"markdown","ca0f0918":"markdown","748b2a49":"markdown","0030d342":"markdown","968ac317":"markdown","e0a758a9":"markdown","0d002e3c":"markdown","9be328cb":"markdown","a2819afe":"markdown","38a46f93":"markdown","6a672173":"markdown","1bb44df9":"markdown","200e2f51":"markdown","f690b549":"markdown","96bbff2d":"markdown","f50d12ef":"markdown","8bf9d1ff":"markdown","d8db6559":"markdown","602c8300":"markdown","081bc013":"markdown","8aa3ac87":"markdown","dc38eed9":"markdown","6aebfecb":"markdown","69ba8fac":"markdown","5663c6e9":"markdown","8724947a":"markdown","c016fbaa":"markdown","85486e36":"markdown","371dd9ad":"markdown","0fbb02ab":"markdown","8a110b99":"markdown","97cf245c":"markdown","2e6baabc":"markdown","af37e16a":"markdown","af592f01":"markdown","c81230ca":"markdown","c440dbcd":"markdown","1236c141":"markdown","85edf9d5":"markdown","28d6b358":"markdown","e0c3c19d":"markdown","d5507a05":"markdown"},"source":{"8d1ae6a5":"from selenium import webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as sc\nfrom selenium.webdriver.common.by import By\nimport pandas as pd\n# The driver must be in the same folder as your notebook\ndriver = webdriver.Chrome(r'C:\\Users\\jose\\Documents\\Data Science\\Personal\\Soccer\\Understat Kaggle\\chromedriver')\n","4c10b6f5":"driver = webdriver.Chrome(r'C:\\Users\\jose\\Documents\\Data Science\\Personal\\Soccer\\Understat Kaggle\\chromedriver')\n# Input the link using get fucntion\nlink = \"https:\/\/understat.com\/player\/8260\"\ndriver.get(link)\n# select the match data \nhaaland_stats = driver.execute_script('return groupsData;')\n# close the driver \ndriver.close()","da1c1992":"# First let's check the json data obtained\nhaaland_stats","cb568263":"pd.DataFrame(haaland_stats)","7e9392e7":"# let's explore the keys of the dictionary\nhaaland_stats.keys()","99980e12":"pd.DataFrame(haaland_stats['shotTypes'])","62d1c335":"# First we create the DataFrame \nhaaland_shot_types = pd.DataFrame(haaland_stats['shotTypes'])\n# using apply series to expand the dictionary and easily access the 2020\/2021 season for Erling Haaland shotTypes\nhaaland_shot_types['2020'].apply(pd.Series)","2516a183":"# Merging the 2021 and the 2020 season into a single DataFrame for Erling Haaland \nhaaland_shot_types['2020'].apply(pd.Series).append(haaland_shot_types['2019'].apply(pd.Series))","3bb277c3":"pd.DataFrame(haaland_stats['season'])","333b5b3a":"driver = webdriver.Chrome(r'C:\\Users\\jose\\Documents\\Data Science\\Personal\\Soccer\\Understat Kaggle\\chromedriver')\n# Input the link using get fucntion\nlink = \"https:\/\/understat.com\/player\/8260\"\ndriver.get(link)\n# select the shot data \nhaaland_shots = driver.execute_script('return shotsData;')\n# close the driver \ndriver.close()","30d0b160":"haaland_shots","e0123bbc":"df = pd.DataFrame(haaland_shots)\ndf","85378554":"# Filtering Haaland's goals assisted by Jadon Sancho\ndf_sancho = df[df['player_assisted']=='Jadon Sancho']\n# Filtering Haaland's shot data against Wolfsburg \ndf_wolfs = df[(df['h_team']=='Wolfsburg')|(df['a_team']=='Wolfsburg')]","a6eb331d":"# displaying both dataframes\nprint('Shots assisted by Sancho')\ndisplay(df_sancho)\nprint('Agains Wolfsburg')\ndisplay(df_wolfs)","06dba8e1":"driver = webdriver.Chrome(r'C:\\Users\\jose\\Documents\\Data Science\\Personal\\Soccer\\Understat Kaggle\\chromedriver')\n# Input the link using get fucntion\nlink = \"https:\/\/understat.com\/player\/8260\"\ndriver.get(link)\n# select the shot data \nhaaland_matches_data = driver.execute_script('return matchesData;')\n# close the driver \ndriver.close()","efc0c209":"df = pd.DataFrame(haaland_matches_data)\ndf","e263554c":"driver = webdriver.Chrome(r'C:\\Users\\jose\\Documents\\Data Science\\Personal\\Soccer\\Understat Kaggle\\chromedriver')\n# Input the link using get fucntion\nlink = \"https:\/\/understat.com\/player\/8260\"\ndriver.get(link)\n# select the shot data \nhaaland_min_max = driver.execute_script('return minMaxPlayerStats;')\n# close the driver \ndriver.close()","1def7395":"df = pd.DataFrame(haaland_min_max)\ndf['FW'].apply(pd.Series)","58914e17":"driver = webdriver.Chrome(r'C:\\Users\\jose\\Documents\\Data Science\\Personal\\Soccer\\Understat Kaggle\\chromedriver')\n# Input the link using get fucntion\nlink = \"https:\/\/understat.com\/match\/15438\"\ndriver.get(link)\n# select the shot data \nshots_match = driver.execute_script('return shotsData;')\n# close the driver \ndriver.close()","f9164f38":"# create the dataframe\ndf = pd.DataFrame(shots_match['h'])\nmatch_shots = df.append(pd.DataFrame(shots_match['a']))\nmatch_shots\n","1a552e57":"driver = webdriver.Chrome(r'C:\\Users\\jose\\Documents\\Data Science\\Personal\\Soccer\\Understat Kaggle\\chromedriver')\n# Input the link using get fucntion\nlink = \"https:\/\/understat.com\/match\/15438\"\ndriver.get(link)\n# select the shot data \nmatch_info = driver.execute_script('return match_info;')\n# close the driver \ndriver.close()","38af7364":"match_info.keys()","f2bc47b2":"ser = pd.Series(match_info)","76120634":"pd.DataFrame(ser).T","e243bf34":"driver = webdriver.Chrome(r'C:\\Users\\jose\\Documents\\Data Science\\Personal\\Soccer\\Understat Kaggle\\chromedriver')\n# Input the link using get fucntion\nlink = \"https:\/\/understat.com\/match\/15438\"\ndriver.get(link)\n# select the shot data \nrosters_data = driver.execute_script('return rostersData;')\n# close the driver \ndriver.close()","0eaa6107":"df = pd.DataFrame(rosters_data[\"h\"]).T\ndf.columns","c216d641":"df","4782aee6":"driver = webdriver.Chrome(r'C:\\Users\\jose\\Documents\\Data Science\\Personal\\Soccer\\Understat Kaggle\\chromedriver')\n# Input the Bundesliga link using get fucntion\nlink = \"https:\/\/understat.com\/league\/Bundesliga\"\ndriver.get(link)\n# select the shot data \nbundesliga_fixtures = driver.execute_script('return datesData;')\n# close the driver \ndriver.close()","8939bfd2":"df = pd.DataFrame(bundesliga_fixtures)\ndf.columns","a40c0363":"type(bundesliga_fixtures)","0d49aff5":"df['numbers'].apply(pd.Series)","933cf512":"df","3339d662":"df[['a','h']].apply(pd.Series)","2f9b870d":"driver = webdriver.Chrome(r'C:\\Users\\jose\\Documents\\Data Science\\Personal\\Soccer\\Understat Kaggle\\chromedriver')\n# Input the link using get fucntion\nlink = \"https:\/\/understat.com\/league\/Bundesliga\"\ndriver.get(link)\n# select the shot data \nget_table = driver.execute_script('return teamsData;')\n# close the driver \ndriver.close()","43bc4512":"df = pd.DataFrame(get_table.values())\ndf = df.explode(\"history\")\ndh = df.pop(\"history\")\ndf = pd.concat([df.reset_index(drop=True), pd.DataFrame(dh.tolist())], axis=1)\ndf = df.infer_objects()","43a44de5":"table = df.groupby(['title']).agg({'wins': 'sum', 'draws': 'sum', 'loses': 'sum', 'scored': 'sum', 'missed': 'sum', 'pts': 'sum', 'xG': 'sum', 'xGA': 'sum', 'xpts': 'sum', 'npxG': 'sum', 'npxGA': 'sum', 'deep': 'sum', 'deep_allowed': 'sum'}).reset_index()\ntable","a059a421":"get_table.keys()","1c380ffc":"a = get_table['117']","ee47893b":"b = a['history']","4e656c66":"pd.DataFrame(b)","5881bb0d":"driver = webdriver.Chrome(r'C:\\Users\\jose\\Documents\\Data Science\\Personal\\Soccer\\Understat Kaggle\\chromedriver')\n# Input the link using get fucntion\nlink = \"https:\/\/understat.com\/league\/Bundesliga\"\ndriver.get(link)\n# select the shot data \nall_players_data = driver.execute_script('return playersData;')\n# close the driver \ndriver.close()","0734fea8":"players_data = pd.DataFrame(all_players_data)\nplayers_data.set_index('player_name',inplace=True)","b809f3ae":"players_data","7df3b0d8":"# It's also possible to filter the data to obtain specific roster\ndortmund_roster = players_data[players_data['team_title']=='Borussia Dortmund']\ndortmund_roster","c0496efa":"driver = webdriver.Chrome(r'C:\\Users\\jose\\Documents\\Data Science\\Personal\\Soccer\\Understat Kaggle\\chromedriver')\n# Input the link using get fucntion\nlink = \"https:\/\/understat.com\/\"\ndriver.get(link)\n# select the shot data \nleague_stats = driver.execute_script('return statData;')\n# close the driver \ndriver.close()","d1a631bb":"# creating the DataFrame\nleague_stats = pd.DataFrame(league_stats)\nleague_stats","f5492844":"----","f9b14dca":"Once again the data is nested in home and away teams so in this case to visualize it better we must a DataFrame and merge them together, the \"h\" and \"a\".","6a54eeb1":"**Filtering the shot data**","137013eb":"Now we have the entire shot data for Haaland's 2 years at Dortmund","c48afa20":"Let's start by scraping a Haaland's grouped stats such as displayed in Understat's webpage \n\n![image-3.png](attachment:image-3.png)\n\n\n","3c59914b":"Using the same procedure as before , we must click right and inspect, after that step click on console and then F5 to reload the page. After the page is reloaded we must search for the the first executable script, in this case **shotsData** \n\nRemember, instead execute scripts[1][2] etc like in beautiful soup , we execute their variables \n\n\n\n![image.png](attachment:image.png)","740faf35":"<a id=\"6.2\"><\/a>\n## Teams Individual performance\nNow instead of focusing in the full table we can also scrape the individual performances for each team, meaning the stats for each game , 38 rows","520aad95":"---","46ba28fa":"<a id=\"2.\"><\/a>\n# 2. Importing libraries.","c25e0d93":"<a id=\"4.\"><\/a>\n# 4. Match data\n\nAfter scraping the grouped stats, the players shot and the radars data, we'll proceed to scrape all the data available from Understat using the matches ID.\n","6a04425f":"<a id=\"8.\"><\/a>\n# 8. Stats for every league","d622f91a":"# Webscraping of Understat using Selenium \n\n\n**By Jose Gonzalez**\n\n![image.png](attachment:image.png)\n","ca0f0918":"<a id=\"1.\"><\/a>\n# 1. Introduction \n\n**IMPORTANT NOTE: It's not possible to run Selenium on Kaggle which is why this notebook is not run, to be able to run it just download it and run on your local Jupyter. If not you can also check it out fully run [here on Github](https:\/\/github.com\/Josegra\/Understat-Series\/blob\/main\/Webscraping%20Understat\/Selenium.ipynb)**\n\nThis is the beggining of my Understat series in which I intent to using 3 different methods to scrape data from [Understat](https:\/\/understat.com\/) using Selenium, The Understat package created by [Amos Sebastian](https:\/\/understat.readthedocs.io\/en\/latest\/) and Beautiful Soup, heavily inspired by [McKay Johns tutorials](https:\/\/www.youtube.com\/c\/mckayjohns). Also I plan on using for loops to scrape entire rosters and all goals in several leagues.\n\nThis notebook's made to scrape football statistics from the incredible webpage Understat using **Selenium**\n\nHere are some of the other notebooks created for the Understat Series :\n\n1. [Understat Series : Webscraping of Understat using the Beautiful Soup](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-beautiful-soup)\n2. [Understat Series : Understat package](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-understat-package)\n\n3. [Understat Series : Webscraping using Selenium](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-selenium)\n\n4. [Understat Series : Webscraping using for loops](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-for-loops)\n\n5. [Understat Series : Probabilities and Random](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-probabilities-and-random)\n\n6. [Understat Series : Diverging plots](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-diverging-plots)\n\n7. [Understat Series : xG Rolling averages](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-rolling-averages)\n\n8. [Understat Series : xG Flow Chart](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-flow-chart)\n\n9. [Understat Series : Shotmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-shotmaps)\n\n10. [Understat Series : Heatmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-heatmaps)\n\n11. [Understat Series : Top 2 Goalscorers](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-top-2-goalscorers)\n\n12. [Understat Series : Dashboards](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-dashboards)","748b2a49":"Let's proceed to scrape the entire matches data for Haaland's career at Dortmund, selecting the variable matchesData instead of shotsData\n","0030d342":"Now let's proceed to scrape the match's basic info such as chances, goals, deep passes , ppda etc. \n\nFor it let's select right under shotsData, **Match_info**\n\n![image.png](attachment:image.png)","968ac317":"---","e0a758a9":"<a id=\"3.\"><\/a>\n\n# 3. Player data \n\nIn this section we'll focus on the stats available to scrape from Understat using the player's ID.","0d002e3c":"<a id=\"6.1\"><\/a>\n## Full Table","9be328cb":"<a id=\"7.\"><\/a>\n# 7. Scrape Bundesliga rosters","a2819afe":"And now we have a df we can work with ease , the same case is applied to the other keys such as season, shotZones, situation and positions. \n\nSome keys such as 'season' don't require more unnesting ","38a46f93":"<a id=\"3.4\"><\/a>\n## 3.4. Players radar data","6a672173":"<a id=\"8.\"><\/a>\n# References","1bb44df9":"Now we are able to create a DataFrame from those five keys,position', 'season', 'shotTypes', 'shotZones', 'situation'","200e2f51":"<a id=\"5.\"><\/a>\n# 5. Get fixtures for Bundesliga, La Liga , EPL , Calcio , Ligue 1 and Russian League","f690b549":"Once we've seen the impossibility on creating a df right the way let's explore the dictionary keys","96bbff2d":"We realized the data is a dictionary type with several different keys \n","f50d12ef":"Now to start scraping we select the exact location of our driver in our PC file path\n\nThen it is necessary to copy and paste the link for our the driver to get it\nFinally we must select what script to execute, for it \n    1.Click right and select inspect\n    2.Go to sources\n    3.Reload the page to obatain the page's code and CRTL F for \"groupsData\" which is the script to execute\n\n\nIn **beautiful soup** we'd execute scripts by number [1],[2] instead the variable contained in that script","8bf9d1ff":"---","d8db6559":"Now we have the entire match data for the entire Borussia Dortmund roster","602c8300":"We cannot merge the json data into a DataFrame just yet due to the nested dictionaries that would draw an error such as \"Mixing dicts with non-Series may lead to ambiguous ordering\"","081bc013":"If we want instead of scraping the entire data for all the matches as done before , we can scrape all the players data for this specific match, in other words the roster data for these two teams : \n\n![image.png](attachment:image.png)\n","8aa3ac87":"<a id=\"9.\"><\/a>\n# Other notebooks\nHere are some more notebooks on the subject\n\n   1. https:\/\/github.com\/gogi-biker\/Pars_-football\/blob\/414e3d3bd2f8c54c3ad6c3e014271dda5b228a70\/old\/parse_teams.py\n   \n   \n   2. https:\/\/github.com\/tlary\/webscraping-understat\/blob\/main\/footyutils.py\n   \n   \n   3. https:\/\/github.com\/amotta11003\/fplanalytics\/blob\/6a2a7d8d559bf9d30261c9fc9d6cd57fa0b78bdc\/.ipynb_checkpoints\/gather_data-checkpoint.ipynb","dc38eed9":"<a id=\"3.2\"><\/a>\n##  3.2. Shot data","6aebfecb":"These notebooks were the main references : \n\n   1. https:\/\/github.com\/JackyKch\/LiverpoolEvolutionKlopp\/blob\/eb3ca9401b331f08c5816537b91614b3baeba310\/script\/scrapping\/dev_ibrahim\/scrapping_understat.ipynb\n   \n   \n   2. https:\/\/github.com\/bfrentz\/postmatch\/blob\/0c58e808ceb38a1ed5e550f796a3974d3a13e01b\/soccer_scraper.py","69ba8fac":"<a id=\"3.3\"><\/a>\n## 3.3.  Players complete matches data","5663c6e9":"If want it it's possible to filter the data in a way to make it easier to analyze ","8724947a":"Once the data's been scraped let's check it out to determine the path forward","c016fbaa":"And now we have successfully scraped every single shot in Dortmund vs Leverkusen match","85486e36":"We can also merge both years into a single DataFrame using the append function","371dd9ad":"<a id=\"4.3\"><\/a>\n## 4.3 Players match info","0fbb02ab":"<a id=\"3.1\"><\/a>\n## 3.1. Grouped stats","8a110b99":"Now using another link , each leagues respective links , we are going to scrape fixtures, tables and the players data","97cf245c":"<a id=\"4.2\"><\/a>\n## 4.2 Match stats","2e6baabc":"Same case as **shotsData**, the data is not nested , therefore it's possible to create a DataFrame directly","af37e16a":"In Understat website each player's assigned a unique ID in this case for Halaand, it's number 8260\n","af592f01":"-----","c81230ca":"* [1. Introduction](#1.)\n    - [1.1. Notebook Content.](#1.1)\n* [2.Importing libraries.](#2.)\n* [3.Player data.](#3.)\n    - [3.1. Player grouped stat.](#3.1)\n    - [3.2. Shot data.](#3.2)\n    - [3.3. Match data.](#3.3)\n    - [3.4. Radar data.](#3.4)\n* [4. Match data](#4.)\n    - [4.1. Shot data.](#4.1)\n    - [4.2. Match stats](#4.2)\n    - [4.3. Player match info](#4.3)\n* [5. Get fixtures](#5.)\n* [6. Get table](#6.)\n    - [4.3. Full Table](#6.1)\n    - [4.3. Individual teams performance](#6.2)\n* [7. Scrape Bundesliga rosters](#7.)\n* [8. References](#8.)\n* [9. Other Notebooks](#9.)\n","c440dbcd":"<a id=\"6.\"><\/a>\n# 6. Get table\nNow let's scrape the standings table from Bundesliga","1236c141":"<a id=\"1.1\"><\/a>\n## 1.1.  Notebook content","85edf9d5":"<a id=\"4.1\"><\/a>\n## 4.1. Shots","28d6b358":"To visualize it better let's create first a series and then turn it into a DataFrame \n","e0c3c19d":"Contrary to the **grouped stats** , **players shot data** is not nested into dictionaries , therefore we are able to create a DataFrame directly, following the same procedure except we proceed to select the **shotsData** variable instead of the **groupedStats**","d5507a05":"As it is still nested, it's necessary to expand them using the apply series function to visualize them better"}}