{"cell_type":{"319b1bc1":"code","3dd0b642":"code","3b7573da":"code","cc6a50b0":"code","099b175c":"code","725b3792":"markdown","4aa779c3":"markdown","cb62dfcf":"markdown"},"source":{"319b1bc1":"from pathlib import Path\n\nDATA_PATH = Path('\/kaggle\/input\/CORD-19-research-challenge\/2020-03-13\/')","3dd0b642":"from tqdm import tqdm\nimport json\n\ndef iter_papers():\n    \"\"\"\n    Iterate over all directories and yields all papers\n    \"\"\"\n    dirs = 'comm_use_subset noncomm_use_subset pmc_custom_license biorxiv_medrxiv'.split()\n    for dir in dirs:\n        fnames = (DATA_PATH \/ dir \/ dir).glob('*')\n        for fname in fnames:\n            with fname.open() as f:\n                content = json.load(f)\n            yield content    ","3b7573da":"import re\nfrom collections import namedtuple\n\nWindow = namedtuple('Window', ['field', 'left', 'center', 'right'])\n\ndef _get_win_pat(name, size):\n    return '(?P<%s>\\w+(\\W+\\w+){,%s})' % (name, size)\n\ndef iter_gd(paper, pat_str, left_wsize=5, right_wsize=5):\n    \"\"\"\n    Generator for matching snippets\n    \"\"\"\n    pat_str = pat_str.replace(' ', '\\W+')\n    full_pat_str = f\"{_get_win_pat('left', left_wsize)} (?P<center>{pat_str}) {_get_win_pat('right', left_wsize)}\"\n    pat = re.compile(full_pat_str, re.I | re.M)\n    \n    def get(k):\n        res = paper\n        for kk in k.split('.'): res=res.get(kk)\n        return res\n        \n    for key in 'abstract body_text metadata.title'.split():\n        val = get(key)\n#         print(key)\n        if isinstance(val, list): val = '\\n\\n'.join([e['text'] for e in val])\n\n#         print(val)\n        for match in pat.finditer(val):\n            yield Window(field=key, **match.groupdict())\n","cc6a50b0":"it = iter_papers()\n\nfrom tqdm.auto import tqdm\n\ninserted = tqdm(desc='inserted')\nrelevant = []\npat = re.compile('covid|coronavirus', re.I)\nfor p in tqdm(iter_papers()):\n    if pat.match(p['metadata']['title']): \n        relevant.append(p)\n        inserted.update()","099b175c":"from IPython.display import display, Markdown\n\ndm = lambda x: display(Markdown(x))\n\nfor paper in relevant:\n    matches = list(iter_gd(\n        paper, 'transmission|incubation|environmental stability|nasal discharge|sputum|urine', \n        left_wsize=30, right_wsize=30\n    ))\n    if matches:\n        dm(f\"#### {paper['metadata']['title']}\")\n        for match in matches:\n            if match.field == 'metadata.title': continue\n            dm(f\"{match.left} **{match.center}** {match.right}\")","725b3792":"# For this first attempt, just limit the papers to those saying either covid or coronavirus on the title","4aa779c3":"# Snippets\n\nNow look for snippets sorrounding the following keywords:\n\n- transmission\n- incubation\n- environmental stability\n- nasal discharge\n- sputum\n- urine","cb62dfcf":"# Super hacky and slow regex search engine\n\nThis is just another way for me to understand what's on the data. It's uses regular expressions to browse through the papers and display sorrounding snippets on markdown"}}