{"cell_type":{"f87056d0":"code","4916da7b":"code","154c8e4f":"code","b6021cfc":"code","272427ff":"code","11ecb70d":"code","8fed3aa7":"code","69e7cbf4":"code","b8268dbf":"code","8a978509":"code","321eb37d":"code","89c585ef":"code","7f2f2c66":"code","4a3d74d7":"code","4e9c81cd":"code","baf6d921":"code","b7b413ad":"code","3c930f5b":"code","90461a13":"code","4b330b09":"code","72012af1":"code","2d3873c1":"code","9eba071b":"code","6efd94f1":"code","c7e69fa4":"code","31b18fa0":"code","8517b5df":"code","46f1f398":"code","3c75046e":"code","71cbbb9e":"code","546933f3":"code","3db7f693":"code","57104475":"code","b5def470":"markdown","21a57b86":"markdown","4b097523":"markdown","a4818998":"markdown","5a15b6bd":"markdown","86fe240d":"markdown"},"source":{"f87056d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4916da7b":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","154c8e4f":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","b6021cfc":"train.info()","272427ff":"test.info()","11ecb70d":"all = pd.concat([train, test], sort = False)\nall.info()","8fed3aa7":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","69e7cbf4":"all.info()","b8268dbf":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","8a978509":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","321eb37d":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","89c585ef":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","7f2f2c66":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","4a3d74d7":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","4e9c81cd":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","baf6d921":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","b7b413ad":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","3c930f5b":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","90461a13":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","4b330b09":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","72012af1":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","2d3873c1":"from sklearn.linear_model import LogisticRegression","9eba071b":"logmodel = LogisticRegression(solver = 'liblinear')\nlogmodel.fit(X_train,y_train)","6efd94f1":"predictions = logmodel.predict(X_test)\npredictions","c7e69fa4":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","31b18fa0":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,predictions)","8517b5df":"all_test.head()","46f1f398":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","3c75046e":"TestForPred.info()","71cbbb9e":"t_pred = logmodel.predict(TestForPred).astype(int)","546933f3":"PassengerId = all_test['PassengerId']","3db7f693":"logSub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nlogSub.head()","57104475":"logSub.to_csv(\"1_Logistics_Regression_Submission.csv\", index = False)","b5def470":"****Build Logistic Model","21a57b86":"****Check Accuracy","4b097523":"****Train\/Test Split","a4818998":"****Final Predictions","5a15b6bd":"****Confusion Matrix","86fe240d":"****Extra Features:"}}