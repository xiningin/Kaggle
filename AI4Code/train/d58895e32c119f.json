{"cell_type":{"078c28fc":"code","91c7db79":"code","16c7bd9c":"code","34335fda":"code","d4cdf46a":"code","2ce16891":"code","39aba0e8":"code","a1a95da9":"code","21669052":"code","c6c23d4c":"code","6946ea96":"code","33a96e67":"code","09de6215":"code","3b945793":"code","0bf6d2d8":"code","dab5fa6c":"code","8cf39f88":"code","1de4724e":"code","c8a44730":"code","2d1bbbdf":"markdown","151f1ab6":"markdown","c0682239":"markdown","dd81a7e9":"markdown","c633463b":"markdown","7963eff0":"markdown","025ab72c":"markdown","9386a8be":"markdown","7864301e":"markdown","8136da95":"markdown","5ddecb3b":"markdown","4fcf2faf":"markdown","9f48529a":"markdown","1a24305c":"markdown","99c8e237":"markdown","6212c1bd":"markdown","d6af30d3":"markdown","79589812":"markdown","9222944c":"markdown","2d771616":"markdown","61ead337":"markdown","745aa88b":"markdown","e55edcbd":"markdown","f667f7ee":"markdown","afe58a11":"markdown","2f1ef1de":"markdown","e0b0ad89":"markdown"},"source":{"078c28fc":"#Read CSV files by Kaggle's way\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","91c7db79":"#import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom tensorflow import keras as kr\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.layers import MaxPooling2D\nfrom tensorflow.keras.layers import Dense, Activation, Flatten,BatchNormalization, Activation,MaxPool2D,Dropout\nfrom tensorflow.keras.optimizers import Adam","16c7bd9c":"#load CSV files as Pandas Dataframe\ntrain_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\ntrain_data","34335fda":"#make train data and test data\nx_train,y_train=train_data.iloc[0:,1:],train_data.iloc[0:,[0]]\nx_test=test_data.iloc[0:,0:]","d4cdf46a":"#import numpy and give a seed. \nimport numpy as np\nnp.random.seed(182)\n#Show 3 images at random and convert them into gray scale. \nfor i in range(3):\n    plt.imshow(x_train.iloc[np.random.randint(0,200)].values.reshape(28,28),cmap='Greys')\n    plt.show()","2ce16891":"#change train data and test data into float32 and divide by 255\n#That normalizes data from 1 to 0. \nx_train = x_train.astype('float32')\/255\ny_train = y_train.astype('float32')\nx_test = x_test.astype('float32')\/255","39aba0e8":"#change data into numpy array\nx_train= x_train.to_numpy()\ny_train= y_train.to_numpy()\nx_test = x_test.to_numpy()\n#reshape train data and test data into 28 * 28 * 1channel\nx_train=x_train.reshape(-1,28,28,1)\nx_test=x_test.reshape(-1,28,28,1)\n#conver y_train into 10 categories\ny_train = kr.utils.to_categorical(y_train, 10)","a1a95da9":"#Build 1st model.\nmodel = Sequential()\nmodel.add(Conv2D(32,3, activation='relu',padding='same', input_shape=(28, 28,1)))\nmodel.add(Conv2D(32,3,padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\nmodel.compile(optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","21669052":"#model fitting\nresult1=model.fit(x_train, y_train,batch_size=128, epochs=30)","c6c23d4c":"#build 2nd model\nmodel = Sequential()\nmodel.add(Conv2D(32,3, activation='relu',padding='same', input_shape=(28, 28,1)))\nmodel.add(Conv2D(32,3,padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\nmodel.compile(optimizer='rmsprop',loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","6946ea96":"#model fitting\nresult2=model.fit(x_train, y_train,batch_size=128, epochs=30)","33a96e67":"#Evaluate the two models by using two metrics, loss and accuracy.\nmetrics = ['loss', 'accuracy']\n#show the evaluation result by using matoplot.\nplt.figure(figsize=(10, 5))\n#Use \"For Loop\".\nfor i in range(len(metrics)):\n    metric = metrics[i]\n    #set subplots to show the result\n    plt.subplot(1, 2, i+1)\n    #Titles of subplots are \"loss\" and \"accuracy\"\n    plt.title(metric) \n    plt_result1 = result1.history[metric] \n    plt_result2 = result2.history[metric]\n\n    #plot them all\n    plt.plot(plt_result1, label='1st model') \n    plt.plot(plt_result2, label='2nd model') \n    plt.legend() \nplt.show()","09de6215":"i=25\n#Here is the prediction sample.\nplt.imshow(x_test[[i]].reshape(28,28),cmap='Greys')\n#Let's predict.\nprediction=model.predict(x_test[[i]]) \nprediction","3b945793":"#Let's check the result.\nprint(\"The answer is\",np.argmax(prediction),\". :-)\")","0bf6d2d8":"#Let's predict! \npredictions = model.predict(x_test)","dab5fa6c":"#save files for submission \nresults = np.argmax(predictions,axis=1)\nresults = pd.Series(results, name=\"Label\")\nresults.tail()","8cf39f88":"list=[]\n[list.append(i) for i in range(1,28001)]\nImageID = pd.Series(list, name=\"ImageID\").astype(\"int32\")","1de4724e":"submission = pd.concat([ImageID,results],axis = 1)\nsubmission.to_csv(\"prediction132.csv\", index=False)\nprint(\"prediction10.csv was saved.\")","c8a44730":"submission.tail()","2d1bbbdf":"### Step 9: Let's make a submission file!","151f1ab6":"<HR>","c0682239":"<HR>","dd81a7e9":"####  Let's think about how many targets are in the dataset. Handwritten digits from 0 to 9 has <font color=\"red\"><u>10 categories<\/U><\/font>.\n","c633463b":"## <i> <font color=\"orange\">Thanks for checking my notebook. Feel free to post comments :-) <\/font><\/i>","7963eff0":"### Step 1: Load Python libraries.","025ab72c":"<HR>","9386a8be":"### [2nd model]","7864301e":"### Step 8: It's time to predict correct labels on test data","8136da95":"### Step 6: Let's visualize those learning process and compare two models.","5ddecb3b":"### Step4: \"Let's build Deep learning layers.","4fcf2faf":"### By the way, let's check what kinda digit images we have.","9f48529a":"<BR><BR>\n## Let's experience <font color=\"blue\">\"Image recognition by using Deep Learning Tech\"<\/font> with <font color=\"green\"> MNIST dataset.<\/font>\n## What is MNIST?\nThe MNIST is a database of handwritten digits from 0 to 9. By the way, MNIST stands for Modified National Institute of Standards and Technology database.\n## What is Deep Learning?\nDeep learning is one of machine learning algorithms which consists of multiple layers to extract features of datasets.\n## What is Tensoflow Keras?\nTensorflow Keras is an open-source framework that can run deep learning models in Python. Keras acts as an interface for the TensorFlow library.\n<HR>","1a24305c":"### [1st model]","99c8e237":"### Step3: \"Pepper-the-soup\" process","6212c1bd":"<HR>","d6af30d3":"<HR>","79589812":"<HR>","9222944c":"#### <font color=\"blue\"> There are 785 columns, and the first column is the label.<\/font>\n#### <font color=\"blue\">785 -1 =784. That means 28 x 28 = 784.<\/font>","2d771616":"<HR>","61ead337":"<HR>","745aa88b":"<HR>","e55edcbd":"### Step2: Let's load data and prepare for experiencing Deep Learning models.","f667f7ee":"<HR>","afe58a11":"<HR>","2f1ef1de":"### Step 7: Does this model work? Give it a try! ","e0b0ad89":"### Step 5: Now is the training time to got this program to learn features of this dataset."}}