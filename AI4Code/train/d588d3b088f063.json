{"cell_type":{"68bfaf3e":"code","56f9ed6f":"code","394b5b80":"code","42d306dd":"code","4fb31958":"code","b082f141":"code","a86aba8c":"code","8bdf8a66":"code","cc54af5a":"code","f4dc80ed":"markdown"},"source":{"68bfaf3e":"!pip install yfinance\n\nimport yfinance as yf\nimport pandas as pd\nimport numpy as np\nimport collections\nimport os\nfrom tqdm import tqdm\nfrom matplotlib.backends.backend_pdf import PdfPages\nfrom matplotlib import pyplot as plt\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","56f9ed6f":"def fincorr(train_date,valid_date,test_date,train_threshold,valid_threshold,lag):\n    \n    # DATA\n    nasdaq = pd.read_csv(\"..\/input\/markets\/nasdaq2.csv\", index_col=0)\n    clean = nasdaq.copy()\n    train = clean[test_date-(3+valid_date+train_date):test_date-(2+valid_date)]\n    valid = clean[test_date-(3+valid_date):test_date-2]\n    test = clean[test_date-2:test_date]\n    full = clean[test_date-(3+valid_date+train_date):test_date]\n\n    # TRAINING\n    train_results = {}\n    for symbol in tqdm(train.columns): \n        df = train.copy()\n        df[symbol] = df[symbol].shift(lag)\n        corr_matrix = np.corrcoef(df[lag:], rowvar=False)[df.columns.get_loc(symbol)]\n        corr_series = pd.Series(corr_matrix, index =df.columns) \n        high_corr = corr_series[(corr_series>train_threshold)&(corr_series<0.99)].to_dict() \n        train_results[symbol] = high_corr  \n    train_results = {k: v for k, v in train_results.items() if v}\n\n    # VALIDATION\n    valid_symbols = []\n    valid_results = {}\n    for k, v in train_results.items():\n        x = []\n        x.append(k)\n        for k1, v1 in v.items():\n            x.append(k1)\n        valid_symbols.append(x)\n    for s in valid_symbols:\n        symbol = s[0]\n        df = valid[s]\n        df[symbol] = df[symbol].shift(lag)\n        df = df.iloc[lag:]\n        x = df.corr()[symbol]\n        y = x[(x>valid_threshold)&(x<1)].to_dict()\n        valid_results[symbol] = y\n    valid_results = {k: v for k, v in valid_results.items() if v}\n\n    # RESULTS\n    test_symbols = []\n    tp,tn,fp,fn = 0,0,0,0\n    for k, v in valid_results.items():\n        x = []\n        x.append(k)\n        for k1, v1 in v.items():\n            x.append(k1)\n        test_symbols.append(x)\n    for s in test_symbols:\n        symbol = s[0]\n        df = test[s]\n        df[symbol] = df[symbol].shift(lag)\n        df = df.iloc[lag]\n        for sym in s[1:]:\n            if (df[0] > 0) & (df[sym] > 0):\n                tp += 1\n            if (df[0] < 0) & (df[sym] < 0):\n                tn += 1\n            if (df[0] > 0) & (df[sym] < 0):\n                fp += 1\n            if (df[0] < 0) & (df[sym] > 0):\n                fn +=1            \n\n    def accuracy(tp,tn,fp,fn):\n        try:\n            return (tp+tn)\/(tp+tn+fp+fn) \n        except ZeroDivisionError:\n            return 0                           \n    accuracy = round(accuracy(tp,tn,fp,fn),2)\n    \n    def precision(tp,fp):\n        try:\n            return tp\/(tp+fp) \n        except ZeroDivisionError:\n            return 0\n    precision = round(precision(tp,fp),2)\n    \n    def recall(tp,tn):\n        try:\n            return tp\/(tp+tn)\n        except ZeroDivisionError:\n            return 0\n    recall = round(recall(tp,tn),2)\n    \n    def f1(precision,recall):\n        try:\n            return 2 * (precision*recall)\/(precision+recall)\n        except ZeroDivisionError:\n            return 0\n    F1 = round(f1(precision,recall),2)\n    \n    print('Trained pairs:', len(train_results))\n    print('Validation pairs:', len(valid_results), '\\n')\n    print('TP:',tp, '|', 'TN:',tn, '|', 'FP:', fp, '|', 'FN:', fn, '\\n')            \n    print('Accuracy:', accuracy) \n    print('Precision:', precision) \n    print('Recall:', recall) \n    print('F1:', F1) \n\n#     # GRAPHS\n#     with PdfPages('Graphs.pdf') as export_pdf:\n#         for k, v in valid_results.items():\n#             for k1, v1 in v.items():        \n#                 df = full[[k, k1]]\n#                 df[k] = df[k].shift(1)\n#                 ax = df.plot(figsize=(10,4), grid=True, color=['blue', 'red','black'])\n#                 ymin, ymax = ax.get_ylim()\n#                 xmin, xmax = ax.get_xlim()\n#                 ax.vlines([test_date-1,test_date-(2+valid_date)], ymin=ymin, ymax=ymax, color='black')\n#                 ax.hlines(0, xmin=xmin, xmax=xmax, color='black')\n#                 export_pdf.savefig()\n    return len(train_results), len(valid_results), tp, tn, fp, fn, accuracy, precision, recall, F1\n# fincorr(8,16,24,0.7,0.7,1)","394b5b80":"# HYPERPARAMETERS OPTIMIZATION\ntrain_range = np.arange(8,21)\nvalid_range = np.arange(2,9)\nd = {}\n\nfor x in tqdm(train_range):\n    temp = {}\n    for i in valid_range:\n        temp[i] = fincorr(30-i-x,30-i,30,0.7,0.7,1)\n    d[x] = temp\n    \n# metrics = pd.DataFrame.from_dict(d, orient='index', columns=['Trained Pairs','Validation Pairs','TP','TN','FP','FN','Accuracy','Precision','Recall','F1'])","42d306dd":"# METRICS DICTIONARY TO DATAFRAME\nmetrics = pd.DataFrame.from_dict({(i,j): d[i][j] for i in d.keys() for j in d[i].keys()}, orient='index')\nmetrics.columns = ['Trained Pairs','Validation Pairs','TP','TN','FP','FN','Accuracy','Precision','Recall','F1']\n#metrics.sort_values('Accuracy', ascending=False)\n#metrics.to_csv('metrics.csv')\nmetrics","4fb31958":"# METRICS TO GRAPH\nwith PdfPages('Graphs.pdf') as export_pdf:\n    metrics.iloc[:,6:7].plot()\n    #plt.suptitle(\"Metrics Training Days 7-20 nasdaq[30:]\")\n    export_pdf.savefig()\n    metrics.iloc[:,:6].plot()\n    #plt.suptitle(\"Metrics Training Days 7-20 nasdaq[30:]\")\n    export_pdf.savefig()","b082f141":"fincorr(8,3,45,0.7,0.7,1)","a86aba8c":"nasdaq = pd.read_csv(\"..\/input\/markets\/nasdaq2.csv\", index_col=0)\nclean = nasdaq.copy()\ntrain = clean[0:10]\ntrain_results = {}\nd = (train >= 0)\nfor symbol in tqdm(train.columns):\n    df = d.copy()\n    df[symbol] = df[symbol].shift(1).astype('bool')\n    s = df[1:].corr()[symbol]\n    y = s[(s>0.7)][1:].to_dict()\n    train_results[symbol] = y\ntrain_results = {k: v for k, v in train_results.items() if v}","8bdf8a66":"def finposneg(train_date,valid_date, test_date,train_threshold,valid_threshold,lag):\n    \n    # DATA\n    nasdaq = pd.read_csv(\"..\/input\/markets\/nasdaq2.csv\", index_col=0)\n    clean = nasdaq.copy()\n    train = clean[0:train_date]\n    valid = clean[train_date-1:valid_date]\n    test = clean[valid_date-1:test_date]\n    full = clean[:test_date]\n\n    train_results = {}\n    d = (train >= 0)\n    for symbol in tqdm(train.columns):\n        df = d.copy()\n        df[symbol] = df[symbol].shift(1).astype('bool')\n        s = df[1:].corr()[symbol]\n        y = s[(s>0.7)][1:].to_dict()\n        train_results[symbol] = y\n    train_results = {k: v for k, v in train_results.items() if v}\n    \n    valid_symbols = []\n    for k, v in x.items():\n        x = []\n        x.append(k)\n        for k1, v1 in v.items():\n            x.append(k1)\n        valid_symbols.append(x)\n\n    valid_results = {}\n    for s in tqdm(valid_symbols[0]):\n        symbol = s[0]\n        df = valid[s]\n        d = (df >= 0)\n        d[symbol] = d[symbol].shift(1).astype('bool')\n        s = d.corr()[symbol]\n        y = s[(s>0.9)].drop(symbol).to_dict()\n        train_results[symbol] = y\n    valid_results = {k: v for k, v in valid_results.items() if v}\n    valid_results\n\n    return train_results\nx=finposneg(10,18,24,0.7,0.7,1)","cc54af5a":"valid_symbols = []\nfor k, v in valid.items():\n    x = []\n    x.append(k)\n    for k1, v1 in v.items():\n        x.append(k1)\n    valid_symbols.append(x)\n    \nvalid_results = {}\nfor s in tqdm(valid_symbols[0]):\n    symbol = s[0]\n    df = valid[s]\n    d = (df >= 0)\n    d[symbol] = d[symbol].shift(1).astype('bool')\n    s = d.corr()[symbol]\n    y = s[(s>0.9)].drop(symbol).to_dict()\n    train_results[symbol] = y\nvalid_results = {k: v for k, v in valid_results.items() if v}\nvalid_results","f4dc80ed":"## POS\/NEG:"}}