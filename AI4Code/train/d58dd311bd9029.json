{"cell_type":{"f5b12289":"code","281b300e":"code","6d16f146":"code","c74855d4":"code","b5b1b751":"code","e30ef26a":"code","26029208":"code","ba07b99b":"code","2418bca4":"code","a1cf9fc7":"code","c6ae9582":"code","a56ff08b":"code","88b12b66":"code","664c58e9":"code","78a70fab":"code","29fcdfa4":"code","f125d29a":"code","a4a1f942":"code","33a881fc":"code","2125fdba":"code","34bb8720":"code","4a83609e":"code","31ec36f1":"code","d88a17d0":"code","646adcbc":"code","22ece06e":"code","02cbe8a3":"code","09b5f75f":"code","6c9ec242":"code","90097933":"code","57927f95":"code","67857ed4":"markdown"},"source":{"f5b12289":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","281b300e":"!rm -rf input","6d16f146":"!cp -r ..\/input .","c74855d4":"from fastai import *\nfrom fastai.vision import *\nimport matplotlib.pyplot as plt","b5b1b751":"path = Path('input\/train\/')","e30ef26a":"np.random.seed(42)\ndata = ImageDataBunch.from_folder(path,test='..\/test', ds_tfms=get_transforms(),valid_pct=0.25,size=299,bs=32,num_workers=0)\ndata.normalize(imagenet_stats)","26029208":"print(data.classes)\nlen(data.classes),data.c","ba07b99b":"data.show_batch(rows=3,figsize=(7,6))","2418bca4":"learn = create_cnn(data,models.resnet50,metrics=error_rate)","a1cf9fc7":"from torch import nn\nimport torch.nn.functional as F\n\nclass FocalLoss(nn.Module):\n    def __init__(self, alpha=1, gamma=2, logits=False, reduction='elementwise_mean'):\n        super(FocalLoss, self).__init__()\n        self.alpha = alpha\n        self.gamma = gamma\n        self.logits = logits\n        self.reduction = reduction\n\n    def forward(self, inputs, targets):\n        if self.logits:\n            BCE_loss = F.binary_cross_entropy_with_logits(inputs, targets, reduction='none')\n        else:\n            BCE_loss = F.binary_cross_entropy(inputs, targets, reduction='none')\n        pt = torch.exp(-BCE_loss)\n        F_loss = self.alpha * (1-pt)**self.gamma * BCE_loss\n\n        if self.reduction is None:\n            return F_loss\n        else:\n            return torch.mean(F_loss)","c6ae9582":"learn.loss_fn = FocalLoss()","a56ff08b":"learn.lr_find()\nlearn.recorder.plot()","88b12b66":"learn.fit_one_cycle(7,slice(1e-2))","664c58e9":"learn.save('stg-1')","78a70fab":"learn.lr_find()\nlearn.recorder.plot()","29fcdfa4":"#learn.load('stg-1')","f125d29a":"learn.unfreeze()\nlearn.fit_one_cycle(6,max_lr=slice(1e-4,1e-3))","a4a1f942":"data = ImageDataBunch.from_folder(path,test='..\/test', ds_tfms=get_transforms(),valid_pct=0.25,size=350,bs=32,num_workers=0)\ndata.normalize(imagenet_stats)","33a881fc":"interp = ClassificationInterpretation.from_learner(learn)\nfrom sklearn import metrics\nprint(metrics.classification_report(interp.y_true.numpy(), interp.pred_class.numpy(),target_names =data.classes))","2125fdba":"learn.save('stg-2')","34bb8720":"learn.data=data","4a83609e":"learn.unfreeze()\nlearn.fit_one_cycle(3,max_lr=slice(1e-5,1e-4))","31ec36f1":"preds,y=learn.get_preds(ds_type=DatasetType.Test)","d88a17d0":"preds = np.argmax(preds, axis = 1)\npreds_classes = [data.classes[i] for i in preds]","646adcbc":"submission = pd.DataFrame({ 'file': os.listdir('input\/test'), 'species': preds_classes })\nsubmission.to_csv('test_classification_results.csv', index=False)","22ece06e":"submission","02cbe8a3":"!rm -rf input","09b5f75f":"#data = ImageDataBunch.from_folder(path,test='..\/test', ds_tfms=get_transforms(),valid_pct=0.25,size=299,bs=32,num_workers=0)\n#data = ImageDataBunch.from_csv(path, val_idxs =[0], test_name='test')\n#learn = ConvLearner.pretrained(model, data, precompute=True)","6c9ec242":"def change_fc_data(learn, train_index, val_index):\n    tmpl = f'_{learn.models.name}_{learn.data_.sz}.bc'\n    names = [os.path.join(learn.tmp_path, p+tmpl) for p in ('x_act', 'x_act_val', 'x_act_test')]\n    learn.get_activations()\n    act, val_act, test_act = [bcolz.open(p) for p in names]\n    data_x = np.vstack([val_act, act])\n    data_y = np.array(list(learn.data.val_y) + list(learn.data.trn_y))\n    train_x = data_x[train_index] \n    valid_x = data_x[val_index]\n    train_y = data_y[train_index] \n    valid_y = data_y[val_index]\n    learn.fc_data = ImageClassifierData.from_arrays(learn.data_.path,\n                 (train_x, train_y), \n                 (valid_x, valid_y), learn.data_.bs, classes=learn.data_.classes,\n                 test = test_act if learn.data_.test_dl else None, num_workers=8)\n    return learn","90097933":"#ind = pd.read_csv(f'{PATH}\/labels.csv', index_col='id')\n#skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\n#for train_index, val_index in skf.split(ind.index, ind['breed'])\n\n","57927f95":"#data = ImageClassifierData.from_csv(val_idxs =[0], test_name='test')\n#learn = ConvLearner.pretrained(model, data, precompute=True)\n#learn = change_fc_data(learn, train_index, val_index)\n\n","67857ed4":"https:\/\/forums.fast.ai\/t\/cross-validation-with-fast-ai\/7988"}}