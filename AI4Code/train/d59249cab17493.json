{"cell_type":{"084bfa2b":"code","663ebe01":"code","4f05de66":"code","e1ae3587":"code","5a71b380":"code","b7d0de7b":"code","5654ff90":"code","818ae08e":"code","98bc1e40":"code","9707b0dc":"code","ad137ba3":"code","195d1017":"code","2e3763bc":"code","dcd5129a":"code","462cdeba":"code","589e0259":"code","a1d01a54":"code","1cd73284":"code","7d9e0378":"code","37bcb389":"code","bd0188c9":"code","926853ed":"code","5ece316e":"code","35d48d49":"code","54a6d2fe":"markdown","6f8f4e74":"markdown","2397ea6d":"markdown","8dabc92b":"markdown","a32468fb":"markdown","4abde5c7":"markdown","0aa16597":"markdown","18853b27":"markdown","42905853":"markdown","ad843cec":"markdown","08cc1955":"markdown","1950f9d5":"markdown","42639d7a":"markdown","fa9f9e4c":"markdown","b518e040":"markdown","81f8228e":"markdown","af975910":"markdown","d2c083d9":"markdown","52897f61":"markdown","2d629d1e":"markdown","959699aa":"markdown","04b92ed0":"markdown"},"source":{"084bfa2b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport re\nfrom textblob import TextBlob\nfrom wordcloud import WordCloud","663ebe01":"df = pd.read_csv('..\/input\/covid-19-nlp-text-classification\/Corona_NLP_train.csv', encoding = \"ISO-8859-1\")","4f05de66":"f'The data has {df.shape[0]} Rows and {df.shape[1]} Columns'","e1ae3587":"df.head()","5a71b380":"df.isna().sum()","b7d0de7b":"plt.figure(figsize=(10,6))\nsns.countplot(y=df['Sentiment'])\nplt.yticks(size=13)\nplt.show()","5654ff90":"df = df.iloc[:,4:]","818ae08e":"df['Sentiment'].unique()","98bc1e40":"# Create a function to clean the tweets\ndef cleanTxt(text):\n    text = re.sub('@[A-Za-z0\u20139]+', '', text) #Removing @mentions\n    text = re.sub('#', '', text) # Removing '#' hash tag\n    text = re.sub('RT[\\s]+', '', text) # Removing RT\n    text = re.sub('https?:\\\/\\\/\\S+', '', text) # Removing hyperlink\n \n    return text\n\n\ndf = df[df['Sentiment'] != \"Neutral\"]\ndf = df[df['Sentiment'] != \"Extremely Negative\"]\ndf = df[df['Sentiment'] != \"Extremely Positive\"]\n\n# apply the function (Clean Text)\ndf['OriginalTweet'] = df['OriginalTweet'].apply(cleanTxt)","9707b0dc":"# Create a function to get the subjectivity\ndef getSubjectivity(text):\n    return TextBlob(text).sentiment.subjectivity\n\n# Create a function to get the polarity\ndef getPolarity(text):\n    return  TextBlob(text).sentiment.polarity\n\n\n# Create two new columns 'Subjectivity' & 'Polarity'\ndf['Subjectivity'] = df['OriginalTweet'].apply(getSubjectivity)\ndf['Polarity'] = df['OriginalTweet'].apply(getPolarity)","ad137ba3":"allWords = ' '.join([twts for twts in df['OriginalTweet']])\nwordCloud = WordCloud(width=500, height=300, random_state=21, max_font_size=110).generate(allWords)\n\n\nplt.figure(figsize=(10,6))\nplt.imshow(wordCloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","195d1017":"def getAnalysis(score):\n    if score < 0:\n        return 'Negative'\n    else:\n        return 'Positive'\ndf['Analysis'] = df['Polarity'].apply(getAnalysis)","2e3763bc":"print('Printing positive tweets:\\n')\nj=1\nsortedDF = df.sort_values(by=['Polarity']) #Sort the tweets\nfor i in range(sortedDF.shape[0]):\n    if j > 10:\n        break\n    if( sortedDF.iloc[i,-1] == 'Positive'):\n        print(str(j) + ') '+ sortedDF.iloc[i,0])\n        print()\n        j += 1","dcd5129a":"print('Printing Negative tweets:\\n')\nj=1\nsortedDF = df.sort_values(by=['Polarity'], ascending=False) #Sort the tweets\nfor i in range(sortedDF.shape[0]):\n    if j > 10:\n        break\n    if( sortedDF.iloc[i,-1] == 'Negative'):\n        print(str(j) + ') '+ sortedDF.iloc[i,0])\n        print()\n        j += 1","462cdeba":"plt.figure(figsize=(10,6)) \nfor i in range(100):\n    plt.scatter(df.iloc[i,-2], df.iloc[i,-3], color='skyblue') \n# plt.scatter(x,y,color)   \nplt.title('Sentiment Analysis', size=20) \nplt.xlabel('Polarity', size=15) \nplt.ylabel('Subjectivity', size=15) \nplt.show()","589e0259":"from sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM, SpatialDropout1D\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.utils.np_utils import to_categorical","a1d01a54":"df = pd.read_csv('..\/input\/covid-19-nlp-text-classification\/Corona_NLP_train.csv', encoding = \"ISO-8859-1\")\ndf = df[['OriginalTweet', 'Sentiment']]","1cd73284":"def getAnalysis(score):\n    if score == 'Negative' or score == 'Extremely Negative':\n        return 0\n    else:\n        return 1\ndf['Sentiment'] = df['Sentiment'].apply(getAnalysis)","7d9e0378":"tokenizer = Tokenizer(num_words=1500, split=' ')\ntokenizer.fit_on_texts(df['OriginalTweet'].values)\n\nX = tokenizer.texts_to_sequences(df['OriginalTweet'])\nX = pad_sequences(X)","37bcb389":"embed_dim = 128\nlstm_out = 196\n\nmodel = Sequential()\nmodel.add(Embedding(1500, embed_dim,input_length = 28))\nmodel.add(LSTM(lstm_out, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1,activation='softmax'))\nmodel.compile(loss = 'binary_crossentropy', optimizer='adam',metrics = ['accuracy'])","bd0188c9":"Le = LabelEncoder()\ny = Le.fit_transform(df['Sentiment'])","926853ed":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.15)","5ece316e":"model.fit(X_train, y_train, validation_data=(X_test,y_test), epochs=5, batch_size=32)","35d48d49":"model.evaluate(X_test,y_test)","54a6d2fe":"## Importing the libraries","6f8f4e74":"## Split the data","2397ea6d":"## Explore the data","8dabc92b":"## Comvert the probability to Negative or Positive","a32468fb":"## Read the data","4abde5c7":"## Label encoder for the Sentiment column","0aa16597":"# The link of the data set:\nhttps:\/\/www.kaggle.com\/datatattle\/covid-19-nlp-text-classification","18853b27":"## Text Preprocessing","42905853":"## Show the top 10 Positive Tweets","ad843cec":"## train the model ","08cc1955":"## Plot the Subjectivity and the Polarity of the first 100 row","1950f9d5":"## Tokenizer","42639d7a":"## Map Negative and Extremely Negative to 0 else 1","fa9f9e4c":"## Build the model","b518e040":"## Find subjectivity and polarity","81f8228e":"## Read the data","af975910":"## Plot a Word Cloud","d2c083d9":"# Classify with Keras and tensorflow","52897f61":"## Show the top 10 Negative Tweets","2d629d1e":"## Remove the unnecessary columns","959699aa":"## Import the libraries","04b92ed0":"## Plot the Sentiment column"}}