{"cell_type":{"4e7dd63b":"code","97736ab7":"code","188989f7":"code","89734f0d":"code","01ded3f9":"code","c7da646a":"code","47e8505d":"code","4a8dc83f":"code","1192380b":"code","c9c3e8bf":"code","a972b473":"code","c85153f0":"code","f55bd390":"code","60ed2510":"code","d8b638e7":"code","0aa3e314":"markdown","af0dafb1":"markdown","f764e2d3":"markdown","7c3f538f":"markdown","bc0d633f":"markdown","b5c73a38":"markdown","3bafb204":"markdown","3122a10b":"markdown","667a2897":"markdown","82aa7fdb":"markdown","eb727847":"markdown","65ef4a00":"markdown","a954d8ed":"markdown","bf505ae3":"markdown"},"source":{"4e7dd63b":"import os\nimport cv2\nimport glob\nimport random\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","97736ab7":"SEED = 42 # will preserve the order of image displayed\nROWS = 3  # grid rows\nCOLS = 3  # grid size","188989f7":"files = glob.glob('..\/input\/flower-color-images\/flower_images\/flower_images\/*.png')","89734f0d":"files_to_display = random.sample(files, ROWS*COLS) # sample of images from the folder\n\n# reading, converting RGBA files to RGB and stacking images\nX_train = np.vstack([cv2.cvtColor(plt.imread(f), cv2.COLOR_RGBA2RGB)  for f in files_to_display]) \nX_train = X_train.reshape(ROWS*COLS, 128, 128, 3)","01ded3f9":"def plot_images(datagen, X_train, multiplier=3):\n    # plotting image\n    f, axes = plt.subplots(ROWS, COLS, figsize = (COLS*multiplier, ROWS*multiplier))\n    axes = axes.reshape(-1)\n    \n    # iterating over batch of image to display individual image\n    batch = datagen.flow(X_train, batch_size=1, seed = SEED)\n    for i in range(ROWS*COLS):\n        axes[i].imshow(batch.next()[0])\n        axes[i].axis('off')","c7da646a":"from keras.preprocessing.image import ImageDataGenerator # importing the ImageDataGenerator API from keras\n\ndatagen = ImageDataGenerator() # intialize ImageDataGenerator\ndatagen.fit(X_train)           # fitting sample of images\nplot_images(datagen, X_train)  # plotting the grid with augmentations","47e8505d":"datagen = ImageDataGenerator(featurewise_center=True, featurewise_std_normalization=True)\ndatagen.fit(X_train)\nplot_images(datagen, X_train)","4a8dc83f":"datagen = ImageDataGenerator(rotation_range = 90)\ndatagen.fit(X_train)\nplot_images(datagen, X_train)","1192380b":"datagen = ImageDataGenerator(width_shift_range=0.2)\ndatagen.fit(X_train)\nplot_images(datagen, X_train)","c9c3e8bf":"datagen = ImageDataGenerator(height_shift_range=0.2)\ndatagen.fit(X_train)\nplot_images(datagen, X_train)","a972b473":"datagen = ImageDataGenerator(horizontal_flip=True)\ndatagen.fit(X_train)\nplot_images(datagen, X_train)","c85153f0":"datagen = ImageDataGenerator(vertical_flip=True)\ndatagen.fit(X_train)\nplot_images(datagen, X_train)","f55bd390":"datagen = ImageDataGenerator(zoom_range=0.3)\ndatagen.fit(X_train)\nplot_images(datagen, X_train)","60ed2510":"datagen = ImageDataGenerator(shear_range=45.0)\ndatagen.fit(X_train)\nplot_images(datagen, X_train)","d8b638e7":"datagen = ImageDataGenerator(\n    vertical_flip      = True,\n    horizontal_flip    = True,\n    rotation_range     = 90,\n    width_shift_range  = 0.2,\n    height_shift_range = 0.2,\n    zoom_range         = 0.3\n)\n\ndatagen.fit(X_train)\nplot_images(datagen, X_train, multiplier=3)","0aa3e314":"## 2. Random Rotations\n\nA whitening transform of an image is a linear algebra operation that reduces the redundancy\nin the matrix of pixel images. Less redundancy in the image is intended to better highlight\nthe structures and features in the image to the learning algorithm","af0dafb1":"# Image Augmentation\n\nImage Augmentation is a technique that artificially increases the size of the dataset by creating modified versions of images. This technique can help in better generalization of object detection model. `ImageDataGenerator` API from Keras provides capabilities for augmenting images out of the box and directly use them in training. It can also be used to save a copy of newly generated images","f764e2d3":"## 4. Vertical Shift\nSimilar to width shift","7c3f538f":"# Different types of Augmentations\n\n## 1. Feature Standardization\nFeature standardization is similar to the standardization peformed for tabular data. Feature Standardization standardizes pixel values across the entire dataset.","bc0d633f":"## 6. Vertical Flip","b5c73a38":"## 5. Horizontal Flip\nFlipping random images horizontally to create a mirror image","3bafb204":"Defined helper function to plot images","3122a10b":"### References\n\n* [How to Configure Image Data Augmentation in Keras](https:\/\/machinelearningmastery.com\/how-to-configure-image-data-augmentation-when-training-deep-learning-neural-networks\/) on MachineLearningMastery.com","667a2897":"## All in One","82aa7fdb":"### Displaying a sample","eb727847":"## 3. Width shift\n\nShifts an image by a random distance. This is done to handle images that may not be centered while training. this would increase the chances of learning from non-centered images","65ef4a00":"### ImageDataGenerator API\n> Rather than performing the operations on your entire image dataset in memory, the API is\n> designed to be iterated by the deep learning model fitting process, creating augmented image\n> data in real time. This reduces your memory overhead, but adds some additional time\n> cost during model training.\n> ~ **MachineLearningMastery**","a954d8ed":"## 8. Shear ","bf505ae3":"## 7. Zoom Range"}}