{"cell_type":{"46fd354d":"code","218a2384":"code","26af1ecc":"code","e47ed952":"code","36792f1b":"code","d03170c3":"code","5dd88508":"code","842786ff":"code","01632b50":"code","b10dc2f3":"code","3002a736":"code","e4c3aeb4":"code","f24b2737":"code","d47cce45":"code","db6b483d":"code","e8074a57":"code","104345c3":"code","acc45c70":"code","d5418cc6":"code","881ec432":"code","d510a761":"code","d4ec99b9":"code","dd0d31ac":"code","6ddbc788":"code","b17bdfde":"code","ab3d27c0":"code","da614286":"code","405ba919":"code","997a2201":"code","45a3e892":"code","6ad88d46":"code","d75ab2ef":"code","65fe8586":"code","04d2ebaa":"code","ad08494d":"code","c433865e":"code","8aef3bf1":"code","3123de9a":"code","d725eac4":"code","ec907b12":"code","b06bf3db":"code","5d91f1c3":"code","f69942ee":"code","a4b6c43e":"code","878821c5":"code","eaa2d70e":"code","33afb9d1":"code","dce1221c":"code","b626acd4":"code","4fab31f0":"code","5ac29876":"code","85c3fa97":"code","0cc9c68e":"code","a466b475":"code","fd7c4095":"code","75503981":"code","025dbdc0":"code","e1c4d9c3":"code","f2624c5c":"code","27b0f7e3":"code","d148cf72":"code","8152f2de":"code","c13b8bb2":"code","f4a79f58":"code","50f4fe53":"code","6f172299":"code","e62942b0":"code","cdcd13de":"code","21b12eb7":"code","b05972e6":"code","cc3c9872":"code","020bb6ec":"code","03c5d717":"code","999b5436":"code","2be2f98f":"code","d29d17c3":"code","483f6a32":"code","c7f0b72b":"code","c8880bd7":"code","e1959ccf":"code","6a44bc08":"code","229d4b07":"code","f44e5dee":"code","e1ed0b50":"code","0ed9480d":"code","022f042d":"code","ef1af78a":"code","c4da5a62":"code","dce33b37":"code","9c4ea112":"code","4b93b0fe":"code","79f827fa":"code","385f8c90":"code","ee4d47f1":"code","ab114722":"code","4e808a3c":"code","c437fdea":"code","17aee9af":"code","a825ed10":"code","19ce5e6c":"code","2a7bf468":"code","e474dc33":"code","ab00633d":"code","469a11c7":"code","3854709a":"code","77eb5005":"code","80c34454":"code","aa196935":"code","6385fccb":"code","ace2c437":"code","54f5246c":"code","87328c17":"code","e95e38af":"code","cbe9a3c3":"code","31dd88e9":"code","00297d4b":"code","d3a6fb6c":"code","7d5ea218":"code","a23a9104":"code","07a95bd9":"code","7a05d825":"code","c69d4cb3":"code","fa3f1bf4":"code","6a6a67a9":"code","2fb7a172":"code","e7c086a0":"code","1d893b1a":"code","57897f87":"code","7db24fac":"code","371c4de3":"code","ef4b9aaf":"code","daeff408":"code","bb9e499d":"code","9ec22293":"code","b1f62c49":"code","b64d1084":"code","78b4824f":"code","e83d1432":"code","5d1609be":"code","c04ce73a":"code","b92a71f1":"code","b627143f":"code","989d0653":"code","e0efe040":"code","20cd9ac3":"code","8d2feeb8":"code","eaec04f6":"code","89f86d6f":"code","3ac971a7":"code","dbf0001c":"code","13a7ac23":"code","adfa7ee0":"code","aff290d4":"code","a12e8bea":"code","9cc569af":"code","86fb593d":"code","e791c3f7":"code","1014125c":"code","5167767c":"code","d144a25c":"code","55acdce6":"code","b018bcb1":"code","34d3a6c6":"code","92dbb4ef":"code","2547ce52":"code","0cf376da":"code","f5bccbf2":"code","dbad68c6":"code","5db0da7c":"code","a174eeff":"code","67741be2":"code","f5e45ea1":"code","58012b50":"code","f1369fab":"code","d50fde46":"code","28cec60c":"code","cbd8c1ec":"code","5bbe11b0":"code","8329ebce":"code","fe050a69":"code","5084fa4a":"code","91fde3fb":"code","e5d4d909":"code","fe6aff20":"code","000b8d02":"code","e0a81e31":"code","7a25d86c":"code","09e6f90e":"code","301bc086":"code","b303da8d":"code","097dd0fe":"code","c85b9794":"code","a82323fc":"code","bf9fa2bf":"code","3bd6c3e8":"code","0b66f988":"code","576aa584":"code","b7268bdd":"code","4cede87b":"code","1e94693d":"code","a5fda3b7":"code","65ad50e9":"code","9a5d2c92":"code","3af093fb":"code","9fafc147":"code","727b18fd":"code","52088a5f":"code","e5018783":"code","48fe09a4":"code","3bfd1512":"code","751d9f00":"code","5e150efe":"code","da25f9e6":"code","7a4c871d":"code","b74c7168":"code","be0781d9":"code","01728c89":"code","bd14a8d3":"code","34995e6b":"code","2ebce118":"code","221ebf5a":"code","a7ca56cb":"code","87c52b7e":"code","8eb2addc":"code","2f53de33":"code","cbcf2791":"code","d0ea034d":"code","ac0e1bd4":"code","a7c084fd":"code","bd5f686e":"code","28ec4582":"code","cec17f24":"code","76d7f09d":"code","a1594971":"code","b13c27a3":"code","cbb9721a":"code","57d966ee":"code","64a7057c":"code","49d78528":"code","debc8bab":"code","00f8b7b5":"code","efa1f9bb":"code","644dc35a":"code","5a8b5fb8":"code","86859486":"code","b3b54870":"code","ffd880b1":"code","2d451ba5":"code","290d4263":"code","b2df784d":"code","d1a1a390":"code","85662c97":"code","99c649ce":"code","4a7e0fd5":"code","930d514f":"code","5a46dea0":"code","e2a5ec1f":"code","db17749d":"code","ec0bde80":"code","4b0802ec":"code","03078a85":"code","c5798830":"code","460aa758":"code","aed6097c":"code","8d9c8b77":"code","4f8eab23":"code","39bed44f":"code","de132adc":"code","64f2737e":"code","0db478a3":"code","90bfb21e":"code","13117396":"code","03e8b0c8":"code","0d3b05a9":"code","a55f4e56":"code","e4bb7ad0":"code","045517df":"code","7eaeacf8":"code","3437fcf8":"code","4b7cfe4c":"code","4db23192":"code","7a6d1003":"code","9103b676":"code","395dc4e6":"code","740d3d84":"code","4750a45d":"code","e78ec653":"code","aa0a9d2e":"code","1d3847a1":"code","fecd2263":"code","4e667c6f":"code","3e991c0e":"code","fa814525":"code","a18bb0a8":"code","7f60f5b8":"code","71e92b6b":"code","10af3303":"code","9108e005":"code","733da584":"code","7dd22d12":"code","474292fe":"code","11d8ac78":"code","cc65ff7a":"code","f4eb53e9":"code","4164a825":"code","0d54ff07":"code","7ef7e58e":"code","cef6e812":"code","f7defd15":"code","5de77e83":"code","5aa97c82":"code","0bd225c6":"code","2f445c41":"code","ebf327a6":"code","fc75d9c8":"code","0592067e":"code","f9d5c503":"code","5b411820":"code","68d4e2f3":"code","a19a430f":"code","ed43a741":"code","4dce0bec":"code","d69cac1e":"code","6e5ca409":"code","53901b1a":"code","251d2e0b":"code","fafc20c0":"code","bd8477b0":"code","e897c19f":"code","2040ef00":"code","f46e1dda":"code","77d86800":"code","b8994936":"code","97f1176a":"code","f3830e55":"code","fbca5f25":"code","8d364bc9":"code","00944190":"code","ede27be2":"code","680739fa":"code","9a487d69":"code","e743bbb0":"code","1fd1cf85":"code","d84908b4":"code","96634259":"code","80a3e260":"code","79e6c8dc":"code","da58e3f5":"code","388498a4":"code","f58e224d":"code","6c39eb38":"code","f8bc4d96":"code","2b10504d":"code","3a19b3f9":"code","9c7d4415":"code","775404ad":"code","0e20355a":"code","95beb1fb":"code","5951aa82":"code","4278046f":"code","cff49c46":"code","e25aca7c":"code","539d619f":"code","e08c584d":"code","0b46e7a7":"code","f1a202f4":"code","f60e07c6":"code","a3f46bb2":"code","21484e5e":"code","2fd21a57":"code","b9706c3a":"code","319152ad":"code","b0009e8b":"code","6c21f6f5":"code","b81ee9d6":"code","50b9ce76":"code","9c408d00":"code","b103d88f":"code","3c390578":"code","53466238":"code","472685ec":"code","be3907e1":"code","80eed8b1":"code","d563188f":"markdown","c503fddb":"markdown","2e9e68f4":"markdown","ebfb5c9f":"markdown","2fe97f4c":"markdown","f64b6899":"markdown","773a011b":"markdown","450806cb":"markdown","e5a26e43":"markdown","b66dc039":"markdown","4d2ff39e":"markdown","6d211f24":"markdown","86737a28":"markdown","41651dda":"markdown","9f3028ca":"markdown","1dc4a012":"markdown","72acb2ae":"markdown","f28fc6c8":"markdown","e763e2d5":"markdown","609eaa7d":"markdown","2feba807":"markdown","e73abcdc":"markdown","45e17dfb":"markdown","45de4eea":"markdown","86948bc1":"markdown","0e6e42ac":"markdown","80e50452":"markdown","7c789795":"markdown","5844f5c4":"markdown","34fe82a5":"markdown","1d777504":"markdown","706ebb27":"markdown","b70b4a58":"markdown","fdfc9a3a":"markdown","c5aaabac":"markdown","90908996":"markdown","bfdf2948":"markdown","7fa80ea0":"markdown","2f643fa3":"markdown","d23f92ec":"markdown","240098f4":"markdown","7f8047ae":"markdown","0cb2f91d":"markdown","780c3561":"markdown","d3d47345":"markdown","36b08de7":"markdown","9464288b":"markdown","86c74b7b":"markdown","767b0b4b":"markdown","2b33ecc2":"markdown","64098984":"markdown","8d285646":"markdown","5f5aa521":"markdown","ed65da92":"markdown","277a2bc7":"markdown","aa735315":"markdown","fd7794af":"markdown","5fb9f022":"markdown","a321ecdd":"markdown","991105ac":"markdown","e4aa4872":"markdown","3b8af06e":"markdown","24dd27e1":"markdown","547f1d01":"markdown","51f1774f":"markdown","3ffc1ad4":"markdown","77dabf22":"markdown","311893ae":"markdown","e7e92f23":"markdown","c93da0d3":"markdown","f1dc9fc4":"markdown","8653df8e":"markdown","19f746ff":"markdown","0c7dc061":"markdown","f5c20ab4":"markdown","4ae1cdff":"markdown","85d4cf72":"markdown","2f76edc9":"markdown","e5605030":"markdown","a864da50":"markdown","cd311060":"markdown","011a6076":"markdown","d8183a25":"markdown","77615f43":"markdown","b7a4a012":"markdown","c78965d5":"markdown","e68a2c2a":"markdown","6eff4319":"markdown","569dd46c":"markdown","12ba7d8a":"markdown","621360eb":"markdown","6f0ed03a":"markdown","7c18dc6d":"markdown","0f8a1d7f":"markdown","556f5658":"markdown","1e8832d8":"markdown","94e9d8a9":"markdown","3c70e824":"markdown","87fdbff3":"markdown","cdd1b96b":"markdown","7b183dfb":"markdown","1efc53a7":"markdown","a3782b30":"markdown","65fef612":"markdown","631d0608":"markdown","ea4844bc":"markdown","af9e9abf":"markdown","55fc8615":"markdown","62d9cbf9":"markdown","2e9ad3c6":"markdown","6a58fa31":"markdown","8fe658f1":"markdown","4c30d3b5":"markdown","a5913418":"markdown","bd8cf7a7":"markdown","dd9d5c05":"markdown","c4987be4":"markdown","4c413c43":"markdown","1112ed06":"markdown","40108c63":"markdown","fce0101d":"markdown","1032b6f8":"markdown","dbf59577":"markdown","b45bfb49":"markdown","501e1c10":"markdown","735ba5f9":"markdown","ce3c4e5e":"markdown","4c5054cd":"markdown","43a12c52":"markdown","d9d3fd06":"markdown","92d40c12":"markdown","79dd6aab":"markdown","580a5774":"markdown","0df84106":"markdown","dc3f0878":"markdown","5e363bc8":"markdown","1b48f3ea":"markdown","d733b284":"markdown","e18e92c7":"markdown","1fd21136":"markdown","f07e7376":"markdown","4985a817":"markdown","6c6f7bd4":"markdown","45622865":"markdown","c245e820":"markdown","0522dfc4":"markdown","8fb3c48a":"markdown","297f58ef":"markdown","0c9171f3":"markdown","a30ebe80":"markdown","c7104430":"markdown","201e36b6":"markdown","fcdae262":"markdown","61963f74":"markdown","7b793a8d":"markdown","2f4923cb":"markdown","d3b827a8":"markdown","6c05d26e":"markdown","8cd60737":"markdown","85022c50":"markdown","a0c39fb1":"markdown","a752af75":"markdown","4d97ca01":"markdown","0c123e85":"markdown","082c23f7":"markdown","0a7d5bf3":"markdown","ec7a8039":"markdown","98b87ddf":"markdown","fce90733":"markdown","501d4379":"markdown","8ad9f8d3":"markdown","6890b611":"markdown","9f69926e":"markdown","2d2933f4":"markdown","ba967b84":"markdown","04e7f486":"markdown","05bb1284":"markdown","288fd7f7":"markdown","66aeb2c4":"markdown","f7684561":"markdown"},"source":{"46fd354d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","218a2384":"import warnings\nwarnings.filterwarnings('ignore')","26af1ecc":"# This will help us in truncating the longer array\nimport numpy as np\nnp.set_printoptions(threshold = 100)","e47ed952":"import numpy as np","36792f1b":"# code to check version of numpy library\n\nnp.__version__","d03170c3":"#  to display all the contents of the numpy namespace, you can type this, np.<TAB>\n# And to display NumPy\u2019s built-in documentation, you can use this: np?\n\nnp?","5dd88508":"# ways of creating a NumPy array\n# First, we can use np.array to create arrays from Python lists:\n\nt= np.array([1,2,3,4,5,6,7,9])\np=np.array([3.14,6,8,9,2,6,8])\nprint(t,p)","842786ff":"p=np.array([3.14,6,8,9,10,15,19,21])\nprint(p)","01632b50":"# If we want to explicitly set the data type of the resulting array, we can use the dtype keyword:\n\nj=np.array([3.14,6,2,9,18,69],dtype='float32')\nprint(j)","b10dc2f3":"g=np.array([3.24,6,8,9],dtype='float64')\nprint(g)","3002a736":"# NumPy arrays can explicitly be multidimensional; here\u2019s one way of initializing a multidimensional array using a list of lists:\n\n# nested lists result in multidimensional arrays\n\na=np.array([range(i,i+3) for i in [2,3,4]])\nprint(a)","e4c3aeb4":"#  it is more efficient to create arrays from scratch using rou\u2010tines built into NumPy. Here are several examples:\nbb=np.zeros(100,dtype=int)\nprint(bb)\n","f24b2737":"# # Create a 3x5 floating-point array filled with 1s\n\ntt=np.ones((3, 5), dtype=float)\nprint(tt)","d47cce45":"# # Create a 3x5 array filled with 3.14\n\nqw=np.full((3, 5), 3.14)\nprint(qw)","db6b483d":"# Create an array filled with a linear sequence\n # Starting at 0, ending at 20, stepping by 2\n # (this is similar to the built-in range() function)\n\ner=np.arange(0,20,2)\nprint(er)","e8074a57":"# # Create an array of five values evenly spaced between 0 and 1\nop=np.linspace(0, 1, 5)\nprint(op)","104345c3":"# Create a 3x3 array of uniformly distributed\n# random values between 0 and 1\n\nnp.random.random((3, 3))\n","acc45c70":"# Create a 3x3 array of normally distributed random values\n # with mean 0 and standard deviation 1\n    \nnp.random.normal(0,1,(3,3))    ","d5418cc6":"# Create a 3x3 array of random integers in the interval [0, 10)\n\nnp.random.randint(0,10,(3,3))","881ec432":"# # Create a 3x3 identity matrix\n\nnp.eye(3)","d510a761":"# Create an uninitialized array of three integers\n # The values will be whatever happens to already exist at that\n # memory location\n\nnp.empty(3)","d4ec99b9":"# NumPy Array Attributes\n\n# define three random arrays: a one-dimensional, two-dimensional, and three-dimensional array.\n\nnp.random.seed(0) # seed for reproducibility\nx1 = np.random.randint(10, size=6) # One-dimensional array\nx2 = np.random.randint(10, size=(3, 4)) # Two-dimensional array\nx3 = np.random.randint(10, size=(3, 4, 5)) # Three-dimensional array\n\nprint(\"x3: ndim=\", x3.ndim)\nprint(\"x3: shape=\",x3.shape)\nprint(\"x3: size=\",x3.size)\nprint(\"x3: dtype=\", x3.dtype)\nprint(\"x3: itemsize=\", x3.itemsize, \"bytes\")\nprint(\"x3: nbytes=\", x3.nbytes, \"bytes\")\n\n","dd0d31ac":"# Array Indexing: Accessing Single Elements\nx1\nx1[0]\nx2[2]","6ddbc788":"# In a multidimensional array, you access items using a comma-separated tuple of indices:\n\nx2\nx2[0,0]\nx2[2,0]\nx2[0,-1]","b17bdfde":"# Array Slicing: Accessing Subarrays\n# x[start:stop:step]\n\n# Multidimensional subarray\n# Multidimensional slices work in the same way, with multiple slices separated by com\u2010mas. For example:\n\nx2\nx2[:2,:3]  # two rows, three columns\n","ab3d27c0":"# Accessing array rows and columns. One commonly needed routine is accessing singlerows or columns of an array. You can do this by combining indexing and slicing,using an empty slice marked by a single colon (:):\n\nprint(x2[:, 0]) # first column of x2\nprint(x2[0, :]) # first row of x2\n\n# In the case of row access, the empty slice can be omitted for a more compact syntax:\n\nprint(x2[0]) # equivalent to x2[0, :]","da614286":"# Subarrays as no-copy views\n\n# One important\u2014and extremely useful\u2014thing to know about array slices is that they return views rather than copies of the array data. This is one area in which NumPy array slicing differs from Python list slicing: in lists, slices will be copies. Consider ourtwo-dimensional array from before:\n\nprint(x2)\n\n# Let\u2019s extract a 2\u00d72 subarray from this:\n\nt=x2[:2,:2]\n","405ba919":"print(t)\n","997a2201":"# Now if we modify this subarray, we\u2019ll see that the original array is changed! Observe:\n\nt[0,0]=99\nprint(x2)","45a3e892":"# Creating copies of arrays\n\n# Despite the nice features of array views, it is sometimes useful to instead explicitly copy the data within an array or a subarray. This can be most easily done with the copy() method:\n\nprint(x2)","6ad88d46":"x2_subset=x2[:2,:2].copy()\nprint(x2_subset)","d75ab2ef":"# Reshaping of Arrays\n# Another useful type of operation is reshaping of arrays. The most flexible way of doing this is with the reshape() method. For example, if you want to put the num\u2010 bers 1 through 9 in a 3\u00d73 grid, you can do the following: # \n\ngrid_3D=np.arange(1,10).reshape(3,3)  # 3D array\nprint(grid_3D)\n\ngrid_10D=np.arange(1,101).reshape(10,10)   # # 10D array\nprint(grid_10D)\n    \n","65fe8586":"# Another common reshaping pattern is the conversion of a one-dimensional array into a two-dimensional row or column matrix. You can do this with the reshape method, or more easily by making use of the newaxis keyword within a slice opera\u2010tion:\n\nn=np.array([1,2,7])\nprint(n)\n# row vector via reshape\nn.reshape(1,3)\n# row vector via newaxis\nn[np.newaxis,:]\n# column vector via reshape\nn.reshape(3,1)\n# column vector via newaxis\nn[:,np.newaxis]\n    ","04d2ebaa":"# Array Concatenation and Splitting\n# It\u2019s also possible to combine multiple arrays into one, and to conversely split a single array into multiple arrays. We\u2019ll take a look at those operations here.\n\nx=np.array([2,3,4,7])\ny=np.array([6,7,8,9])\nt=np.concatenate([x,y])\nprint(t)\n\n# You can also concatenate more than two arrays at once:\n\nz=np.array([88,33,45])\np=np.array([67,71,82])\n\nt1=np.concatenate([x,y,z,p])\nprint(t1)\n\n# np.concatenate can also be used for two-dimensional arrays:\ngrid = np.array([[1, 2, 3],\n [4, 5, 6]])\n\nbb=np.concatenate([grid,grid])\nprint(bb)\n\n\n","ad08494d":"# concatenate along the first axis\nnp.concatenate([grid, grid])\n","c433865e":"# concatenate along the second axis (zero-indexed)\nnp.concatenate([grid, grid], axis=1)\n","8aef3bf1":"# For working with arrays of mixed dimensions, it can be clearer to use the np.vstack (vertical stack) and np.hstack (horizontal stack) functions:\n\n# v-stack\n\nx10 = np.array([1, 2, 3])\nx11 = np.array([[9, 8, 7],\n               [6, 5, 4]])\n\noutput=np.vstack([x10,x11])\nprint(output)\n\n# h-stack\n\ny = np.array([[99],\n [99]])\n\nnp.hstack([grid, y])\n\n","3123de9a":"# Splitting of arrays\n\n# The opposite of concatenation is splitting, which is implemented by the functions\n# np.split, np.hsplit, and np.vsplit. For each of these, we can pass a list of indices giving the split points:\n\nx = [1, 2, 3, 99, 99, 3, 2, 1]\nx1, x2, x3 = np.split(x, [3, 5])\nprint(x1, x2, x3)\n\n# Notice that N split points lead to N + 1 subarrays. The related functions np.hsplit and np.vsplit are similar:\n\ngrid=np.arange(16).reshape(4,4)\nprint(grid)\nupper,lower=np.vsplit(grid,[2])\n","d725eac4":"\nprint(upper)\nprint(lower)","ec907b12":"left, right = np.hsplit(grid, [2])\nprint(left)\nprint(right)\n","b06bf3db":"np.random.seed(0)\n\ndef compute_reciprocals(values):\n    output=np.empty(len(values))\n    for i in range(len(values)):\n        output[i]=1.0\/values[i]\n        return output\n    \nvalues=np.random.randint(1,10,size=5)\ncompute_reciprocals(values)","5d91f1c3":"big_array=np.random.randint(1,100,size=1000000)\n%timeit compute_reciprocals(big_array)","f69942ee":"print(compute_reciprocals(values))\nprint(1.0 \/ values)","a4b6c43e":"# Looking at the execution time for our big array, we see that it completes orders of magnitude faster than the Python loop:\n\n%timeit (1.0 \/ big_array)","878821c5":"np.arange(5)","eaa2d70e":"np.arange(1,6)\n\n# And ufunc operations are not limited to one-dimensional arrays\u2014they can act on multidimensional arrays as well:\n\nx=np.arange(9).reshape(3,3)\n2**x\n","33afb9d1":"# Array arithmetic\n\n# NumPy\u2019s ufuncs feel very natural to use because they make use of Python\u2019s native arithmetic operators. The standard addition, subtraction, multiplication, and division can all be used:\n\nx=np.arange(4)\nprint(\"x  =\", x)\nprint(\"x+5 =\",x+5)\nprint(\"x+2 =\",x+2)\nprint(\"x+8 =\",x+8)","dce1221c":"print(\"x \/ 2 =\", x \/ 2)\nprint(\"x \/\/ 2 =\", x \/\/ 2) # floor division","b626acd4":"print(\"-x = \", -x)\nprint(\"x ** 2 = \", x ** 2)\nprint(\"x % 2 = \", x % 2)\n","4fab31f0":"# In addition, these can be strung together however you wish, and the standard order of operations is respected:\n-(0.5*x+1)**2\n","5ac29876":"# Absolute value\n\n# Just as NumPy understands Python\u2019s built-in arithmetic operators, it also understands Python\u2019s built-in absolute value function:\n\nx=np.array([-2,-3,5,6,-8,6,45,2])\nabs(x)\n\n# The corresponding NumPy ufunc is np.absolute, which is also available under the alias np.abs:\n\nnp.absolute(x)\n\n# This ufunc can also handle complex data, in which the absolute value returns the magnitude:\n\ny=np.array([3,4j,4+8j,2+99j])\n\nnp.absolute(y)\n","85c3fa97":"# Trigonometric functions\n# NumPy provides a large number of useful ufuncs, and some of the most useful for the data scientist are the trigonometric functions. We\u2019ll start by defining an array of angles:\n\ntheta = np.linspace(0, np.pi, 3)\n\nprint(\"theta   =\", theta)\nprint(\"sin(theta)   =\", np.sin(theta))\nprint(\"cos(theta)   =\", np.cos(theta))\nprint(\"tan(theta)   =\", np.tan(theta))\n","0cc9c68e":"# The values are computed to within machine precision, which is why values that should be zero do not always hit exactly zero. Inverse trigonometric functions are also available:\n\nx = [-1, 0, 1]\nprint(\"x = \", x)\nprint(\"arcsin(x) = \", np.arcsin(x))\nprint(\"arccos(x) = \", np.arccos(x))\nprint(\"arctan(x) = \", np.arctan(x))\n\n","a466b475":"# Exponents and logarithms\n# Another common type of operation available in a NumPy ufunc are the exponentials:\n\nx=[1,2,3]\nprint(\"x  =\",x)\nprint(\"e^x =\",np.exp(x))\nprint(\"2^x =\",np.exp2(x))\nprint(\"3^x =\",np.power(3,x))\n","fd7c4095":"# The inverse of the exponentials, the logarithms, are also available. The basic np.log gives the natural logarithm; if you prefer to compute the base-2 logarithm or the base-10 logarithm\n\nx=[1,2,4,10]\nprint(\"x  =:\",x)\nprint(\"in(x) =:\",np.log(x))\nprint(\"log2(x) =:\",np.log2(x))\nprint(\"log10(x) =:\",np.log10(x))\n","75503981":"# There are also some specialized versions that are useful for maintaining precision with very small input:\n\nx = [0, 0.001, 0.01, 0.1]\nprint(\"exp(x) - 1 =\", np.expm1(x))\nprint(\"log(1 + x) =\", np.log1p(x))\n\n# When x is very small, these functions give more precise values than if the raw np.log or np.exp were used.","025dbdc0":"# NumPy has many more ufuncs available, including hyperbolic trig functions, bitwis arithmetic, comparison operators, conversions from radians to degrees, rounding and remainders, and much more. \n# Another excellent source for more specialized and obscure ufuncs is the submodule scipy.special.\n\nfrom scipy import special\n\n# Gamma functions (generalized factorials) and related functions\n\nx=[1,5,10]\n\nprint(\"gamma(x) =\",special.gamma(x))\nprint(\"In|gamma(x)| =\", special.gammaln(x))\nprint(\"beta (x,2) =\", special.beta(x,2))\n    ","e1c4d9c3":"# Error function (integral of Gaussian)\n# its complement, and its inverse\n\nx=np.array([0.3,0.7,0.8,1])\nprint(\"erf(x) =\",special.erf(x))\nprint(\"erfc(x) =\",special.erfc(x))\nprint(\"erfinv(x) =\", special.erfinv(x))\n\n\n# There are many, many more ufuncs available in both NumPy and scipy.special.","f2624c5c":"# Specifying output\n\n# For large calculations, it is sometimes useful to be able to specify the array where the result of the calculation will be stored. \n\nx=np.arange(5)\ny=np.empty(5)\nnp.multiply(x,10,out=y)\n\n# This can even be used with array views. For example, we can write the results of a computation to every other element of a specified array:\n\ny=np.zeros(10)\nnp.power(2,x,out=y[::2])\nprint(y)\n\n","27b0f7e3":"# Aggregates\n\n# we can use the reduce method of any ufunc. A reduce repeatedly applies a given operation to the elements of an array until only a single result remains.\n\n# For example, calling reduce on the add ufunc returns the sum of all elements in the array:\n\n\nx=np.arange(1,6)\nnp.add.reduce(x)\n","d148cf72":"# Similarly, calling reduce on the multiply ufunc results in the product of all array elements:\n\nnp.multiply.reduce(x)","8152f2de":"# If we\u2019d like to store all the intermediate results of the computation, we can instead use accumulate:\n\nnp.add.accumulate(x)","c13b8bb2":"np.multiply.accumulate(x)","f4a79f58":"# Outer products\n# Finally, any ufunc can compute the output of all pairs of two different inputs using\n# the outer method. This allows you, in one line, to do things like create a multiplica\u2010tion table:\n\nx=np.arange(1,6)\nnp.multiply.outer(x,x)","50f4fe53":"# NumPy has fast built-in aggregation functions for working on arrays; we\u2019ll discuss and demonstrate some of them here.\n# Summing the Values in an Array\n\nL=np.random.random(110)\nsum(L)","6f172299":"np.sum(L)","e62942b0":"big_array=np.random.rand(100000)\n%timeit sum(big_array)\n%timeit np.sum(big_array)","cdcd13de":"# Minimum and Maximum\n\nmin(big_array)\n","21b12eb7":"max(big_array)","b05972e6":"# Multidimensional aggregates\n\n# One common type of aggregation operation is an aggregate along a row or column.Say you have some data stored in a two-dimensional array\n\nM=np.random.random((3,4))\nprint(M)\n\n# By default, each NumPy aggregation function will return the aggregate over the entire array:\nM.sum()","cc3c9872":"# Aggregation functions take an additional argument specifying the axis along which the aggregate is computed. For example, we can find the minimum value within each column by specifying axis=0\n\nM.min(axis=1)","020bb6ec":"M.min(axis=0)","03c5d717":"a = np.array([1, 1, 2])\nb = np.array([5, 6, 5])\na + b","999b5436":"a+5","2be2f98f":"# We can similarly extend this to arrays of higher dimension. Observe the result when we add a one-dimensional array to a two-dimensional array\n\nM=np.ones((3,3))\nM","d29d17c3":"M+a\n\n# Here the one-dimensional array a is stretched, or broadcast, across the second dimension in order to match the shape of M","483f6a32":"# While these examples are relatively easy to understand, more complicated cases can involve broadcasting of both arrays. Consider the following example:\n\na=np.arange(3)\nb=np.arange(3)[:,np.newaxis]\nprint(a)\nprint(b)\n\nprint(a+b)","c7f0b72b":"# Rules of Broadcasting\n# Broadcasting in NumPy follows a strict set of rules to determine the interaction between the two arrays\n# Rule 1: If the two arrays differ in their number of dimensions, the shape of the one with fewer dimensions is padded with ones on its leading (left) side.\n# Rule 2: If the shape of the two arrays does not match in any dimension, the array with shape equal to 1 in that dimension is stretched to match the other shape\n# Rule 3: If in any dimension the sizes disagree and neither is equal to 1, an error is raised.\n\n#Broadcasting example 1\n#Let\u2019s look at adding a two-dimensional array to a one-dimensional array:\n\nM=np.ones((2,3))\na=np.arange((3))\n\n# Let\u2019s consider an operation on these two arrays. The shapes of the arrays are:\n\nM.shape","c8880bd7":"a.shape\n\n# We see by rule 1 that the array a has fewer dimensions, so we pad it on the left with ones:\n","e1959ccf":"M+a   # addition will be a 2x3 matrix","6a44bc08":"# Broadcasting example 2\n\n# Let\u2019s take a look at an example where both arrays need to be broadcast:\n\na=np.arange(3).reshape((3,1))\nb=np.arange(3)\n\na+b","229d4b07":"# Broadcasting example 3\n\n# Now let\u2019s take a look at an example in which the two arrays are not compatible:\n\nM=np.ones((3,2))\na=np.arange(3)\n\n# This is just a slightly different situation than in the first example: the matrix M is transposed. How does this affect the calculation? The shapes of the arrays are\n\nM.shape\na.shape\n\n# M+a This gives error , so we need to do right side padding\n\n# Note the potential confusion here: you could imagine making a and M compatible by, say, padding a\u2019s shape with ones on the right rather than the left\n\na[:,np.newaxis].shape\n\nM + a[:, np.newaxis]","f44e5dee":"# Also note that while we\u2019ve been focusing on the + operator here, these broadcasting rules apply to any binary ufunc. For example, here is the logaddexp(a, b) function,\n# which computes log(exp(a) + exp(b)) with more precision than the naive approach\n\nnp.logaddexp(M, a[:, np.newaxis])","e1ed0b50":"# Broadcasting in Practice\n\n# Centering an array\n\n# One commonly seen example is centering an array of data. Imagine you have an array of 10 observations, each of which consists of 3 values. Using the standard convention, we\u2019ll store this in a 10\u00d73 array:\n\nX=np.random.random((10,3))\n\n# We can compute the mean of each feature using the mean aggregate across the first dimension\n\nXmean=X.mean(0)\nXmean\n\n# And now we can center the X array by subtracting the mean (this is a broadcasting operation)\n\nX_centered = X - Xmean","0ed9480d":"# To double-check that we\u2019ve done this correctly, we can check that the centered array has near zero mean \nX_centered.mean(0)","022f042d":"# Plotting a two-dimensional function\n\n# One place that broadcasting is very useful is in displaying images based on two dimensional functions. If we want to define a function z = f(x, y), broadcasting can be used to compute the function across the grid\n\n# x and y have 50 steps from 0 to 5\nx = np.linspace(0, 5, 50)\ny = np.linspace(0, 5, 50)[:, np.newaxis]\nz = np.sin(x) ** 10 + np.cos(10 + y * x) * np.cos(x)\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\n\nplt.imshow(z, origin='lower', extent=[0, 5, 0, 5],cmap='viridis')\nplt.colorbar()","ef1af78a":"import numpy as np\nimport pandas as pd\n\n# Comparison Operators as ufuncs\n\nx = np.array([1, 2, 3, 4, 5])\n\nx < 3 # less than","c4da5a62":"x > 3 # greater than","dce33b37":"x != 3 # not equal","9c4ea112":"x == 3 # equal","4b93b0fe":"# It is also possible to do an element-by-element comparison of two arrays, and to include compound expressions:\n\n(x*2)==(x**2)","79f827fa":"# Just as in the case of arithmetic ufuncs, these will work on arrays of any size and shape. Here is a two-dimensional example\n\nrng = np.random.RandomState(0)\nx = rng.randint(12, size=(3, 4))\nx","385f8c90":"x<6\n\n# In each case, the result is a Boolean array, and NumPy provides a number of straight\u2010forward patterns for working with these Boolean results.","ee4d47f1":"# Working with Boolean Arrays\n# Given a Boolean array, there are a host of useful operations you can do. We\u2019ll work with x, the two-dimensional array we created earlier\n\nprint(x)","ab114722":"# Counting entries\n\n# how many values less than 6?\n\nnp.count_nonzero(x<6)","4e808a3c":"np.sum(x < 6)","c437fdea":"# how many values less than 6 in each row?\nnp.sum(x < 6, axis=0)  # axis 0 means row 1.","17aee9af":"np.sum(x < 6, axis=1)  # axis 1 means row 2.","a825ed10":"# If we\u2019re interested in quickly checking whether any or all the values are true, we can use (you guessed it) np.any() or np.all()\n\n# are there any values greater than 8?\n\nnp.any(x>8)\n\n","19ce5e6c":"# are there any values less than zero?\nnp.any(x < 0)\n","2a7bf468":"# are all values less than 10?\nnp.all(x < 10)\n","e474dc33":"# are all values equal to 6?\nnp.all(x == 6)","ab00633d":"# np.all() and np.any() can be used along particular axes as well. For example:\n\n# are all values in each row less than 8?\nnp.all(x < 8, axis=1)","469a11c7":"# Boolean Arrays as Masks\n\n#  A more powerful pattern is to use Boolean arrays as masks, to select particular subsets of the data themselves\n\n\n\n","3854709a":"# Now to select these values from the array, we can simply index on this Boolean array; this is known as a masking operation\n\nx[x<5]","77eb5005":"# Fancy indexing is like the simple indexing we\u2019ve already seen, but we pass arrays of indices in place of single scalars. This allows us to very quickly access and\n# modify complicated subsets of an array\u2019s values.\n\nimport numpy as np\nrand = np.random.RandomState(42)\n\nx = rand.randint(100, size=10)\nprint(x)","80c34454":"# Suppose we want to access three different elements. We could do it like this\n[x[3],x[5],x[7]]","aa196935":"# Alternatively, we can pass a single list or array of indices to obtain the same result\n\nind=[3,4,7]\nx[ind]","6385fccb":"# With fancy indexing, the shape of the result reflects the shape of the index arrays rather than the shape of the array being indexed:\n\nind=np.array([[3,7],[4,5]])\nx[ind]","ace2c437":"# Fancy indexing also works in multiple dimensions. Consider the following array\n\nX=np.arange(12).reshape((3,4))\nX","54f5246c":"# Like with standard indexing, the first index refers to the row, and the second to the column\n\nrow=np.array([0,1,2])\ncol=np.array([2,1,3])\n\nX[row,col]","87328c17":"X[row[:, np.newaxis], col]","e95e38af":"row[:, np.newaxis] * col","cbe9a3c3":"# Combined Indexing\n\n# For even more powerful operations, fancy indexing can be combined with the other indexing schemes we\u2019ve seen\n\nprint(X)","31dd88e9":"# We can combine fancy and simple indices\n\nX[2, [2, 0, 1]]","00297d4b":"# We can also combine fancy indexing with slicing\n\nX[1:, [2, 0, 1]]","d3a6fb6c":"# And we can combine fancy indexing with masking\n\nmask = np.array([1, 0, 1, 0], dtype=bool)\nX[row[:, np.newaxis], mask]\n\n","7d5ea218":"# Example: Selecting Random Points\n\n# One common use of fancy indexing is the selection of subsets of rows from a matrix. For example, we might have an N by D matrix representing N points in D dimen\u2010 sions, such as the following points drawn from a two-dimensional normal distribution\n\n\nmean=[0,0]\ncov=[[1,2],[2,5]]\n\nX = rand.multivariate_normal(mean, cov, 100)\nX.shape","a23a9104":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn; seaborn.set() # for plot styling\n\nplt.scatter(X[:, 0], X[:, 1]);","07a95bd9":"# Let\u2019s use fancy indexing to select 20 random points. We\u2019ll do this by first choosing 20 random indices with no repeats, and use these indices to select a portion of the original array\n\nindices=np.random.choice(X.shape[0],20,replace=False)\nindices\n","7a05d825":"selection=X[indices]\nselection.shape","c69d4cb3":"# Now to see which points were selected, let\u2019s over-plot large circles at the locations of the selected points\n\nplt.scatter(X[:, 0], X[:, 1], alpha=0.3)\nplt.scatter(selection[:, 0], selection[:, 1],facecolor='none', s=200)","fa3f1bf4":"# Modifying Values with Fancy Indexing\n\n#  imagine we have an array of indices and we\u2019d like to set the corresponding items in an array to some value\n\nx=np.arange(10)\ni=np.array([2,1,8,4])\nx[i]=99\nprint(x)","6a6a67a9":"#  Consider the following:\n\nx=np.zeros(10)\n\nx[[0,0]]=[4,6]\nx\n\n# Where did the 4 go? The result of this operation is to first assign x[0] = 4, followed by x[0] = 6. The result, of course, is that x[0] contains the value 6.\n","2fb7a172":"#  consider this operation\n\ni=[2,3,3,4,4,4,4]\nx[i]+=1\ni","e7c086a0":"# you can use the at() method of ufuncs (available since NumPy 1.8), and do the following\n\nx=np.zeros(10)\nnp.add.at(x,i,1)\nprint(x)","1d893b1a":"#  Binning Data\n\nnp.random.seed(42)\nx=np.random.randn(100)\n\n# compute a histogram by hand\n\nbins=np.linspace(-5,5,20)\ncounts=np.zeros_like(bins)\n\n# find the appropriate bin for each x\ni = np.searchsorted(bins, x)\n\n# add 1 to each of these bins\nnp.add.at(counts, i, 1)\n\n# plot the results\nplt.plot(bins, counts, linestyle='steps')\n\n\n\n","57897f87":"# Of course, it would be silly to have to do this each time you want to plot a histogram. This is why Matplotlib provides the plt.hist() routine, which does the same in a\n# single line\n\nplt.hist(x, bins, histtype='step')","7db24fac":"print(\"NumPy routine:\")\n%timeit counts, edges = np.histogram(x, bins)","371c4de3":"print(\"Custom routine:\")\n%timeit np.add.at(counts, np.searchsorted(bins, x), 1)","ef4b9aaf":"# Fast Sorting in NumPy: np.sort and np.argsort\n\nx = np.array([2, 1, 4, 3, 5])\nnp.sort(x)","daeff408":"x.sort()\nprint(x)","bb9e499d":"# A related function is argsort, which instead returns the indices of the sorted elements\n\nx = np.array([2, 1, 4, 3, 5])\ni = np.argsort(x)\nprint(i)\n\n","9ec22293":"x[i]","b1f62c49":"# Sorting along rows or columns\n\n# A useful feature of NumPy\u2019s sorting algorithms is the ability to sort along specific rows or columns of a multidimensional array using the axis argument\n\nrand = np.random.RandomState(42)\nX = rand.randint(0, 10, (4, 6))\nprint(X)","b64d1084":"# sort each column of X\nnp.sort(X, axis=0)\n","78b4824f":"# sort each row of X\nnp.sort(X, axis=1)\n","e83d1432":"# Partial Sorts: Partitioning\n\n# Sometimes we\u2019re not interested in sorting the entire array, but simply want to find the K smallest values in the array. NumPy provides this in the np.partition function.\n# np.partition takes an array and a number K; the result is a new array with the small\u2010 est K values to the left of the partition, and the remaining values to the right, in arbi\u2010trary order\n\nx = np.array([7, 2, 3, 1, 6, 5, 4])\nnp.partition(x, 3)\n\n# Note that the first three values in the resulting array are the three smallest in the array, and the remaining array positions contain the remaining values. Within the\n# two partitions, the elements have arbitrary order","5d1609be":"# Similarly to sorting, we can partition along an arbitrary axis of a multidimensional array\n\nnp.partition(X, 2, axis=1)","c04ce73a":"# Example: k-Nearest Neighbors\n\n# Let\u2019s quickly see how we might use this argsort function along multiple axes to find the nearest neighbors of each point in a set. We\u2019ll start by creating a random set of 10\n# points on a two-dimensional plane. Using the standard convention, we\u2019ll arrange these in a 10\u00d72 array\n\nX = rand.rand(10, 2)\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn; seaborn.set() # Plot styling\nplt.scatter(X[:, 0], X[:, 1], s=100)\n","b92a71f1":"dist_sq = np.sum((X[:,np.newaxis,:] - X[np.newaxis,:,:]) ** 2, axis=-1)\n","b627143f":"# for each pair of points, compute differences in their coordinates\ndifferences = X[:, np.newaxis, :] - X[np.newaxis, :, :]\ndifferences.shape","989d0653":"# This operation has a lot packed into it, and it might be a bit confusing if you\u2019re unfa\u2010miliar with NumPy\u2019s broadcasting rules. When you come across code like this, it can\n# be useful to break it down into its component steps\n\n# for each pair of points, compute differences in their coordinates\ndifferences = X[:, np.newaxis, :] - X[np.newaxis, :, :]\ndifferences.shape","e0efe040":"# square the coordinate differences\nsq_differences = differences ** 2\nsq_differences.shape","20cd9ac3":"# sum the coordinate differences to get the squared distance\ndist_sq = sq_differences.sum(-1)\ndist_sq.shape","8d2feeb8":"# Just to double-check what we are doing, we should see that the diagonal of this matrix (i.e., the set of distances between each point and itself) is all zero\n\ndist_sq.diagonal()","eaec04f6":"# It checks out! With the pairwise square-distances converted, we can now use np.arg sort to sort along each row. The leftmost columns will then give the indices of the nearest neighbors\n\nnearest = np.argsort(dist_sq, axis=1)\nprint(nearest)","89f86d6f":"K = 2\nnearest_partition = np.argpartition(dist_sq, K + 1, axis=1)","3ac971a7":"plt.scatter(X[:, 0], X[:, 1], s=100)\n# draw lines from each point to its two nearest neighbors\nK = 2\nfor i in range(X.shape[0]):\n    for j in nearest_partition[i, :K+1]:\n     # plot a line from X[i] to X[j]\n     # use some zip magic to make it happen:\n         plt.plot(*zip(X[j], X[i]), color='black')","dbf0001c":"# Imagine that we have several categories of data on a number of people (say, name,age, and weight), and we\u2019d like to store these values for use in a Python program. It\n# would be possible to store these in three separate arrays\n\nname = ['Alice', 'Bob', 'Cathy', 'Doug']\nage = [25, 45, 37, 19]\nweight = [55.0, 85.5, 68.0, 61.5]","13a7ac23":"# create a structured array using a compound data type specification\n\n# Use a compound data type for structured arrays\ndata = np.zeros(4, dtype={'names':('name', 'age', 'weight'),'formats':('U10', 'i4', 'f8')})\nprint(data.dtype)","adfa7ee0":"# Now that we\u2019ve created an empty container array, we can fill the array with our lists of values\n\ndata['name'] = name\ndata['age'] = age\ndata['weight'] = weight\nprint(data)","aff290d4":"# The handy thing with structured arrays is that you can now refer to values either by index or by name\n\n# Get all names\ndata['name']","a12e8bea":"# Get first row of data\ndata[0]","9cc569af":"# Get the name from the last row\ndata[-1]['name']\n","86fb593d":"# Using Boolean masking, this even allows you to do some more sophisticated opera\u2010tions such as filtering on age\n\n# Get names where age is under 30\ndata[data['age'] < 30]['name']\n","e791c3f7":"# Creating Structured Arrays\n\n# Structured array data types can be specified in a number of ways. Earlier, we saw the dictionary method\n\nnp.dtype({'names':('name', 'age', 'weight'),'formats':('U10', 'i4', 'f8')})\n","1014125c":"np.dtype({'names':('name', 'age', 'weight'),'formats':((np.str_, 10), int, np.float32)})","5167767c":"# A compound type can also be specified as a list of tuples\n\nnp.dtype([('name', 'S10'), ('age', 'i4'), ('weight', 'f8')])","d144a25c":"np.dtype('S10,i4,f8')\n","55acdce6":"# More Advanced Compound Types\n\n# Here, we\u2019ll create a data type with a mat component consisting of a 3\u00d73 floating-point matrix:\n\ntp = np.dtype([('id', 'i8'), ('mat', 'f8', (3, 3))])\nX = np.zeros(1, dtype=tp)\nprint(X[0])\nprint(X['mat'][0])\n\n","b018bcb1":"# RecordArrays: Structured Arrays with a Twist\n\n# NumPy also provides the np.recarray class, which is almost identical to the struc\u2010 tured arrays just described,\n\ndata['age']\n\n# If we view our data as a record array instead, we can access this with slightly fewer Keystrokes\n\ndata_rec = data.view(np.recarray)\ndata_rec.age","34d3a6c6":"# The downside is that for record arrays, there is some extra overhead involved in accessing the fields, even when using the same syntax. We can see this here\n\n%timeit data['age']\n%timeit data_rec['age']\n%timeit data_rec.age","92dbb4ef":"#  Create an empty array\n\nimport numpy as np\n\nempty=np.empty([2,2],int)\nprint(empty)\nprint(empty.shape)\nprint(empty.size)","2547ce52":"# Check whether the array is empty\n\na=np.array([])\nb=np.array([1,2])\n\ndef check_empty(a):\n    if a.size==0:\n        print(\"Empty array\")\n    else:\n        print(\"Not Empty Array\")\n        \n\ncheck_empty(a)\ncheck_empty(b)\n        ","0cf376da":"# Check elements count\n\np=np.array([])\nq=np.array([2,3])\n\ndef get_elements(a):\n    return a.ndim and a.size\n\nprint('p-dimensional=', get_elements(p))\nprint('q-dimensional=', get_elements(q))","f5bccbf2":"# Arrange numpy between numbers\n\na=np.arange(4,12)\n\nprint(a,a.shape,a.size)","dbad68c6":"#Arrange numpy between numbers with intervals\n\na=np.arange(10,40,5)\nprint('a:',a)","5db0da7c":"# How to reshape array\n\na=np.arange(15,33,3)\nb=a.reshape(2,3)\n\nprint('a=',a.shape)\nprint('\\n After Reshaping')\nprint('b=',b.shape)\n","a174eeff":"# Create a numpy with random integers and size\n\na = np.random.randint(10, size = 5)\n\nprint(a)","67741be2":"a=np.random.randint(1,20,size=(2,3))\nprint(a,'a.shape :',a.shape)\nprint('a.dtype :',a.dtype)","f5e45ea1":"b=np.array(('New York','Boston','DC'))\nprint(b,'b.dtype :',b.dtype)","58012b50":"x = np.array(['Toronto', 'Montreal'], dtype=str)\nprint(x)\nprint(x.dtype)","f1369fab":"x=np.array(['To'],dtype=str)\ny = x.view('S1').reshape(x.size, -1)\nprint(y)","d50fde46":" # Print without truncation\nx=np.arange(10000)\nprint(\"Before setting print option : \")\nprint(x) # this will print with truncation\nimport sys # System-specific parameters and functions\nnp.set_printoptions(precision=4)\nprint(\"\\n Print after setting option :\")\nprint(a) # This will print without truncation\n","28cec60c":"# Save Numpy to CSV\nx=np.asarray([[1,2,3],[4,5,6]])\nprint(x)\ntest=np.savetxt(\"abcd.csv\",a,delimiter=\",\")","cbd8c1ec":"# Dataframe to Numpy\n\ndf=pd.DataFrame({'a1':[1,2,3],'a2':[4,5,6],'a3':[7,8,9]})\nprint(df)\n\nx=df.to_numpy()\nprint(\"\\n DataFrame to numpy array :\",x)\nx.dtype\n\ny=df.index.to_numpy()\nprint(\"\\nDataFrame indices to Numpy\")\nprint(y)\n\nz=df['a1'].to_numpy()\nprint(\"\\nDataFrame series to Numpy\")\nprint(z)","5bbe11b0":"# Get the nth column of an array\n\nx=np.array([[1,2,3],[3,4,6],[3,6,4],[9,7,4]])\nprint(\"Numpy : \",x)\n\ny=x[:,0]\nprint(\"\\nx[:,0] :\",y)\n\nz=x[:,1]\nprint(\"\\nz=x[:,1] :\",z)\n\na=x[1:]\nprint(\"\\nx[1:0] :\",a)","8329ebce":"a=np.matrix([[1,2,3,4],[2,3,4,5],[3,4,5,6]])\nprint(\"Original Numpy array :\",a,\"Original Numpy array shape :\",a.shape)","fe050a69":"# reshape with -1\nc=np.reshape(a,-1)\nprint(\"new shape :\",c)","5084fa4a":"# reshape with (2,-1) # row*col\nf=np.reshape(a,(2,-1))\nprint(f)","91fde3fb":"# reshape with (3,-1) # row*col\ng=np.reshape(a,(3,-1))\nprint(g)","e5d4d909":"# reshape with (4,-1) # row*col\nj=np.reshape(a,(4,-1))\nprint(j)","fe6aff20":"# Argsort on Numpy array\na=np.random.randint(0,10,(3,3))\nprint(\"Before a:\",a)","000b8d02":"# numpy.argsort() function is used to perform an indirect sort along the given axis using the algorithm specified by the kind keyword. It returns an array of indices of the same shape as arr that that would sort the array.\n\na=np.random.randint(0,10,(3,3))\nprint(\"Before a:\",a)\nprint(\"\\nAfter :\")\nb=a[a[:,2].argsort()]\nprint(b)","e0a81e31":"np.show_config()","7a25d86c":"#  Check atlas \n# 143\nimport numpy.distutils.system_info as sysinfo\nsysinfo.get_info('atlas')","09e6f90e":"a=np.array([1,3,4],dtype=float)\nprint(\"Original :\",a)","301bc086":"b=np.gradient(a)\nprint(\"\\nAfter Gradient :\",b)","b303da8d":"c=np.gradient(a,2)\nprint(\"\\nAfter Gradient (a,2) :\",c)","097dd0fe":"a=np.array([[10,20],[30,40]])\nb=a.flatten()\nprint(\"\\n After Flatten :\",b)","c85b9794":"c=a.flatten('F')\nprint(c)","a82323fc":"a=np.array([4,5])\nprint(a),print(a.shape)","bf9fa2bf":"b=np.expand_dims(a,axis=0)\nprint(\"after Dimension Expansion :\",b)","3bd6c3e8":"print(b.shape)","0b66f988":"a=np.array([2,3,5,6,7,8,10,33,23,67])\nprint(a)","576aa584":"b=np.partition(a,5)\nprint(\"\\n After Partitioning :\",b)","b7268bdd":"# Unpack list elements \n#139\n\na_list = [[1, 2, 3], [4, 5, 6]]\nb_list=np.concatenate(a_list).ravel()\nprint(b_list)\n","4cede87b":"a=np.array([[1,2,3],[2,3,5],[6,7,2]])\nprint(\"Original :\",a)","1e94693d":"print(\"\\ntriu() without any parameter:\",np.triu(a))\n","a5fda3b7":"print(\"\\nAbove 1st diagonal zeroed:\",np.triu(a,1))","65ad50e9":"print(\"\\nBelow 1st diagonal zeroed:\",np.triu(a,-1))\n","9a5d2c92":"# Functions creating iterators\nimport itertools","3af093fb":"a_list=[\"CA\",\"BA\",\"BJ\"]\nprint(\"original :\",a_list)","9fafc147":"rotation=50\nicc=itertools.cycle(a_list)\na=[next(icc) for _ in range(rotation)]\nprint(a)","727b18fd":"# we will do numpy resize as well\n\nb=np.resize(a_list,rotation)\nprint(\"\\n\\nAfter looping 50 rounds by using Numpy Resize :\",b)","52088a5f":"# Find indices with SearchSorted\n# function is used to find the indices into a sorted array arr such that, if elements are inserted before the indices, the order of arr would be still preserved. Here, binary search is used to find the required insertion indices.\na = np.searchsorted([1,2,3,4,5], 3)\nprint('np.searchsorted([1,2,3,4,5], 3):',a)","e5018783":"b = np.searchsorted([1,2,3,4,5], [7, 2, 3])\nprint('\\nnp.searchsorted([1,2,3,4,5], [7, 2, 3]):',b)\n","48fe09a4":"# input array \nin_arr = [2, 3, 4, 5, 6] \nprint (\"Input array : \", in_arr) \n  \n# the number which we want to insert \nnum = 4\nprint(\"The number which we want to insert : \", num)    \n  \nout_ind = np.searchsorted(in_arr, num, side ='right')  \nprint (\"Output indices to maintain sorted array : \", out_ind) ","3bfd1512":"# convert a list and tuple into NumPy arrays\n#  Using numpy.asarray()\n# It converts the input to an array. The input may be lists of tuples, tuples, tuples of tuples, tuples of lists and ndarray.\n\nlist1 = [3, 4, 5, 6]\nprint(type(list1))","751d9f00":"# conversion \narray1 = np.asarray(list1)\nprint(type(array1))","5e150efe":"# tuple \ntuple1 = ([8, 4, 6], [1, 2, 3]) \nprint(type(tuple1)) \nprint(tuple1) \nprint() \n  ","da25f9e6":"# conversion \narray2 = np.asarray(tuple1) \nprint(type(array2)) \nprint(array2)","7a4c871d":"a=np.array(['a','b','g','h','a','b','t','l','r'])\nprint(np.unique(a))","b74c7168":"from numpy.random import default_rng\na = np.array([1, 2, 3])\nb = np.array([7, 8, 9])\nrng = default_rng()\nrng.beta(a+10,b+10)","be0781d9":"# make an array with numpy \ngfg = np.array([1, 2, 3, 4, 5, 6]) \n  \n# applying numpy.__lt__() method \nprint(gfg.__lt__(4)) ","01728c89":"# make an array with numpy \n#133\ngfg = np.array([[1, 2, 3, 4, 5, 6], \n                [6, 5, 4, 3, 2, 1]]) \n  \n# applying numpy.__lt__() method \nprint(gfg.__lt__(4)) ","bd14a8d3":"b=np.random.multinomial(20,[1\/6.]*6,size=1)\nprint(b)\n\n# How to interpret?\n# Assuue, you throw dice 20 times, if you get a result [[2 3 1 5 3 6]], it means\n# You got 1 for 2 times\n# You got 2 for 3 times","34995e6b":"size   = 11\nlevels = 6\na = np.random.multinomial(size, np.ones(levels)\/levels, size=1)\n\nprint(a)","2ebce118":"a = np.busday_count('2018-01', '2021-01')\n\nprint(a)","221ebf5a":"gfg = np.array([1, 2, 3, 4, 5, 6]) \ngfg.nbytes\n#output will be 24*memory occupied by 16 bit integer = 24*2 = 48","a7ca56cb":"y = np.array([[1,3],[5,6]])\nx = np.copy(y)","87c52b7e":"y","8eb2addc":"x","2f53de33":"# Get transpose of an n-d array\na = np.array([[1, 2], [3, 4]])\na","cbcf2791":"a.transpose()","d0ea034d":"#np.reshape:\n\na = np.array([[1, 2], [3, 4]])\na","ac0e1bd4":"a.reshape(-1)","a7c084fd":"# np.ravel\na = np.array([[1, 2], [3, 4]])\na","bd5f686e":"a.ravel()","28ec4582":"import numpy as np\nx=np.array([1,6,2,5,9],dtype=np.float32)\nprint(x)","cec17f24":"x.astype(np.int16)","76d7f09d":"x.astype(np.bool)","a1594971":"x = np.array([[4,3],[3,2]])\nx\n              ","b13c27a3":"x.sort(axis=1) #sort each row\nx","cbb9721a":"x.sort(axis=0) #sort each col\nx","57d966ee":"# vector cross-product from physics. It\u2019s the direction of torque taken about a point.\n\n\nx = np.array([[1,2,3]])\ny = np.array([[4,5,6]])\nz=np.cross(x,y)\nz","64a7057c":"a = np.eye(2) #identity matrix of size 2\na","49d78528":"b = np.array([[1,2],[3,4]])\nb","debc8bab":"np.matmul(a,b) ","00f8b7b5":"np.multiply(a,b)","efa1f9bb":"a = np.array([[1,2,3],[4,8,16]])\na","644dc35a":"b = np.array([5,6,11]).reshape(-1,1)\nb","5a8b5fb8":"np.dot(a,b)","86859486":"a=np.array([[1, 2, 3, 4]])\na","b3b54870":"b=np.array([[4],\n       [5],\n       [6],\n       [7]])\nb","ffd880b1":"np.dot(a,b)\n#130","2d451ba5":"\na=np.array([1,6,3,8])\nprint(\"Original :\",a)\nb = np.zeros((a.size, a.max() + 1))\nb[np.arange(a.size), a] = 1\n\nprint('\\nAfter:',b)\n","290d4263":"x = np.array([[[0], [1], [2]]])\nprint(\"Original:\",x,\"\\n Original shape :\",x.shape)","b2df784d":"y = np.squeeze(x)\nprint('\\nAfter Squeezing:',y)\nprint('\\nShape:', y.shape)","d1a1a390":"# This function removes one-dimensional entry from the shape of the given array. Two parameters are required for this function.\n\nimport numpy as np  \nx = np.arange(9).reshape(1,3,3) \n\nprint('\\n Array X:',x)\ny = np.squeeze(x) \n\nprint('\\n Array Y:',y) \n\nprint('The shapes of X and Y array:',x.shape, y.shape) \n","85662c97":"a = np.array([[10, 20, 30],\n                         [100, 200, 300]])\n\nprint('Original:',a)","99c649ce":"permutation = [1, 0]\nb = a[permutation]\nprint('\\nAfer:',b)","4a7e0fd5":"a = np.full((3,2), np.nan, dtype='f,f')\nprint('Original:')\nprint(a)\n","930d514f":"a[0] = (12, 2)\nprint('\\nAfter setting up a tuple:',a)\n#125","5a46dea0":"x = np.array([[1,10,18],[11,2,3]])\nprint('Original:')\nprint(x)","e2a5ec1f":"print('\\nPrinting Cols with Index:')\nfor i in range(3):\n    print(i,x[:,i])","db17749d":"M1 = [[8, 14, -6],\n           [12,7,4], \n           [-11,3,21]]\nprint(M1)","ec0bde80":"matrix_length = len(M1)\nmatrix_length","4b0802ec":"#To read the last element from each row.\n# for i in range(matrix_length):\n# print(M1[i][-1])\n\nfor i in range(3):\n    print(M1[i][-1])","03078a85":"# To print the rows in the Matrix\nprint(M1[i])","c5798830":"M1 = [[8, 14, -6],\n           [12,7,4], \n           [-11,3,21]]\nprint(M1)","460aa758":"M2 = [[3, 16, -6],\n           [9,7,-4], \n           [-1,3,13]]\nprint(M2)","aed6097c":"# Last will initialize a matrix that will store the result of M1 + M2.\nM3  = [[0,0,0],\n            [0,0,0],\n            [0,0,0]]\nprint(M3)","8d9c8b77":"#To Add M1 and M2 matrices\nfor i in range(len(M1)):\n    for j in range(len(M2)):  \n        M3[i][j]=M1[i][j]+M2[i][j]\nprint(\"The sum of Matrix M1 and M2 = \", M3)","4f8eab23":"M3  = [[0,0,0],\n       [0,0,0],\n       [0,0,0]]\nprint(M3)","39bed44f":"for i in range(len(M1)):\n    for j in range(len(M2)):\n        M3[i][j] = M1[i][j] * M2[i][j]\n\n#To Print the matrix\nprint(\"The multiplication of Matrix M1 and M2 = \", M3)","de132adc":"a_list = [10, 25, 35]\nresult = np.resize(a_list, 12)\n\nprint(result)","64f2737e":"import re\n\na_list = '''\n[[25  3  2]\n [ 1 21  0]\n [ 1  0  0]]\n'''\n\nprint('Original String:')\nprint(a_list)\n\nrows = []\n\nfor line in filter(len, map(str.strip, a_list.split(\"\\n\"))):\n    rows.append([ int(v) for v in re.findall(r\"\\b[0-9]+\\b\", line) ])\n\nnp_rows = np.array(rows)\nprint('\\nAfter converting string to Numpy Array:')\nprint(np_rows)\n\n# do this opeartion just to verify\nnp_rows += 2\n\nprint('\\nAfter converting string to Numpy Array and add 2 in all elements:')\nprint(np_rows)\n\nprint('\\nDatatype:')\nprint(type(np_rows))","0db478a3":"np.seterr(all = \"ignore\")\na = np.mean([])  # this will be okay as we set the `ignore` option\nprint('Mean of empty array:',a)","90bfb21e":"print('\\nAfter setting error:')\nnp.seterr(all = \"raise\")\ntry:\n    a = np.mean([])\nexcept FloatingPointError as err:\n    print('FloatingPointError: ', err)\n    \n# other options: 'ignore\u2019, \u2018warn\u2019, \u2018raise\u2019, \u2018call\u2019, \u2018print\u2019, \u2018log\u2019","13117396":"x=np.array(1.1-2.2j)\nprint('Original:',x)","03e8b0c8":"print('\\nDatatype:')\nprint(x.dtype)\n","0d3b05a9":"y = np.abs(x)\nprint('\\nAbsolute Value:')\nprint(y)","a55f4e56":"for i in np.arange(0.0, 2.1, 0.1):\n    print(i)","e4bb7ad0":"a = np.arange(6)\na.flags.writeable = False\n\nprint('Before:')\nprint(a)\n\n","045517df":"a=np.array([1,2,3])\nb=np.array([4,4,3])\n\nc = np.multiply.outer(a, b)\n\nprint(c)\n\nd=c.ravel()\nprint(\"\\nline change:\", d)","7eaeacf8":"a, b = [2,7,8], [1,9]\n\nc = np.abs(np.subtract.outer(a, b))\nprint('Original:')\nprint(c)\n\nd = c.ravel()\nprint('\\nAfter ravel:')\nprint(d)\n","3437fcf8":"dt=1.0\na=np.arange(0.0,5.0,dt)\na\n\n# if a is less than 3 and greater than 0, multiply by 2 or else multiply by 4\nb = np.where((a >= 0) & (a < 3), 2 * dt, 4 * dt)\nprint('\\nAfter:')\nprint(b)","4b7cfe4c":"a = np.arange(6).reshape(3, 2)\nprint('Before:\\n')\nprint(a)","4db23192":"b = (np.array(a) ** 2).sum(-1)\nprint('\\nAfter:')\nprint(b)","7a6d1003":"X = np.arange(12).reshape(6, 2)\nprint('Original:')\nprint(X)","9103b676":"Y = X.reshape(3, 2, 2, order = 'F')\nprint('\\nReshape with Order F:')\nprint(Y)\n\n# Options: \n# 'C' - # C-like index ordering\n# 'F' - # Fortran-like index ordering\n# 'A' - # Mixed Fortran or C (check docucmnetation for more)","395dc4e6":"a = np.ascontiguousarray(np.random.randint(0, 10, 5))\nprint(a)","740d3d84":"print(a.flags)","4750a45d":"b = np.array(np.random.randint(0, 10, 5))\nprint(b)\nprint(b.flags)\n","e78ec653":"a = np.arange(6).reshape(2, -1) \n\nprint('Before:')\nprint(a)","aa0a9d2e":"b = np.transpose(a)\nprint('\\nAfter:')\nprint(b)","1d3847a1":"a = np.array([10, 20])\nprint('Before:')\nprint(a)","fecd2263":"import pickle\n\nb = pickle.dumps(a, protocol = 4)\n\nprint('\\nSerialized Numpy Array:')\nprint(b)","4e667c6f":"c = pickle.loads(b)\n\nprint('\\nDe-serialized Numpy Array:')\nprint(c)","3e991c0e":"a = np.array([11, 22, 33, 44, 55])\nprint('Before:')\nprint(a)\n#109","fa814525":"idx = [4, 2, 0, 1, 3]\n\nb = a[idx]\n\nprint('\\nAfter:')\nprint(b)","a18bb0a8":"a = np.array([1, 2])\nb = np.array([3, 4])\n\nprint(\"Original array :\",a)\nprint(\"Original array :\",b)","7f60f5b8":"c = np.append([a], [b], axis = 0)\nprint('\\nArray c : append a and b on axis 0:')\nprint(c)","71e92b6b":"d = np.append([a], [b], axis = 1)\nprint('\\nArray d : append a and b on axis 1:')\nprint(d)","10af3303":"x = np.arange(10)\ny = np.roll(x, 2)\n\nprint(x)\n\nprint(y)","9108e005":"x = np.arange(1, 7).reshape(2, 3)\n\nprint(x)","733da584":"y = np.roll(x, 1, axis = 1)\n\nprint('\\nAfter:')\nprint(y)","7dd22d12":"a = np.random.randint(1, 10, 9).reshape(3, 3)\n\nprint('Original Array :')\nprint(a)","474292fe":"b = np.apply_along_axis(sorted, 0, a)\n\nprint('\\nAfter sorting :')\nprint(b)","11d8ac78":"def get_avg(a):\n    return (a[0] + a[-1]) \/ 2\n\na = np.random.randint(1, 10, 9).reshape(3, 3)\n\nprint('Original array:')\nprint(a)","cc65ff7a":"b = np.apply_along_axis(get_avg, 0, a)\n\nprint('\\nAfter averaging the first and last element:')\nprint(b)","f4eb53e9":"def get_max(a, b):\n    \n    if (a > b): \n        return a\n    \n    return b\n","4164a825":"b_vectfunc = np.vectorize(get_max)\nx = [[1, 2, 3], [4, 7, 2]]\ny = [7, 4, 5]\n\nresult = b_vectfunc(x, y)\n\nprint(result)\n\n# Note: It will compare the array element wise and get the max value","0d54ff07":"a = np.random.randint(0, 10, 20).reshape(4, 5)\n\nprint('Original Array:')\nprint(a)","7ef7e58e":"# How many elements in column 3 are greater than 2?\n\nb=a[:,2]>2\nprint(b)","cef6e812":"a = np.arange(6).view([('b', np.int),('c', np.int)])\n\nprint(a)\n\nprint(a['b'] < 4)\n\nprint((a['b'] < 4).sum())","f7defd15":"aa = np.array([[1,2,3,4], [2,3,4,5], [5,6,7,8], [9,10,11,12]])\nbb = np.array([[100,200,300,400], [100,200,300,400], [100,200,300,400], [100,200,300,400]])\n\ndef vec2(a,b):\n    return a+b\nfunc2=np.vectorize(vec2)\nprint(func2(bb[:,1], aa[:,1]))","5de77e83":"x = np.arange(12).reshape(3, 4)\nprint('Before:')\nprint(x)","5aa97c82":"y = x[:, [1, 3]]\nprint('\\nAfter selecting specific columns:')\nprint(y)","0bd225c6":"a = np.random.rand(2, 4)\nprint('Before:')\nprint(a)\n\na[a > 0.5] = 0.5\nprint('\\nAfter updating a[a > 0.5] = 0.5:')\nprint(a)","2f445c41":"a = np.empty((3, 2,))\na[:] = np.nan\nprint('nan using empty:')\nprint(a)\n\nb = np.full([3, 2], np.nan)\nprint('\\nnan using full:')\nprint(b)","ebf327a6":"a = np.ones((2, 2), dtype = bool)\nprint('True Boolean Array:')\nprint(a)\n\nb = np.zeros((2, 3), dtype = bool)\nprint('\\nFalse Boolean Array:')\nprint(b)\n\nc = np.full((2, 4), True)\nprint('\\nTrue Boolean Array by using .full:')\nprint(c)","fc75d9c8":"a = np.array([1, 4, 5, 4])\nprint('Before:')\nprint(a)\n\nb = np.array([3, 4])\nc = np.setdiff1d(a, b)\n\nprint('\\nAfter Deleting specific elements:')\nprint(c)","0592067e":"a = np.array([1, 3, 5, 4, 7])\nprint('Before:')\nprint(a)\n\nindices = [2, 3]\nb = np.delete(a, indices)\n\nprint('\\nAfter Deleting specific indices:')\nprint(b)","f9d5c503":"a = np.full((2, 4), 23)\nprint('Array with prefilled values:')\nprint(a)\n\nb = np.empty((2, 4), dtype = int)\nb.fill(23)\nprint('\\nArray with prefilled values by using empty and fill:')\nprint(b)","5b411820":"a = np.full((2, 4), 23)\nprint('Array with prefilled values:')\nprint(a)\n\nb = np.empty((2, 4), dtype = int)\nb.fill(33)\nprint('\\nArray with prefilled values by using empty and fill:')\nprint(b)","68d4e2f3":"from PIL import Image\n\nimage_np = np.asarray(Image.open('\/kaggle\/input\/picture\/happ diwali.jpg'))\nprint(type(image_np))","a19a430f":"x = np.arange(8).reshape(2, -1)\nprint('Before:')\nprint(x)\n\ny = np.flip(x)\nprint('\\nAfter reversing with flip:')\nprint(y)\n\ny = np.flipud(x)\nprint('\\nAfter reversing with flipud:')\nprint(y)\n\ny = np.fliplr(x)\nprint('\\nAfter reversing with fliplr:')\nprint(y)","ed43a741":"x = np.arange(8).reshape(2, -1)\nprint('Before:')\nprint(x)\n\ny = x[::-1]\nprint('\\nAfter reversing:')\nprint(y)","4dce0bec":"x = np.arange(8).reshape(2, -1)\nprint('Before:')\nprint(x)\n\ny = x[::-1]\nprint('\\nAfter reversing:')\nprint(y)","d69cac1e":"x = np.arange(4)\nprint('Before:')\nprint(x)\n\ny = x[::-1]\nprint('\\nAfter reversing:')\nprint(y)","6e5ca409":"a = np.arange(4).reshape(2, -1)\nb = np.array([[5, 6]])\n\nprint('a:')\nprint(a)\n\nprint('\\nb:')\nprint(b)\n\n# appending as a row\nc = np.concatenate((a, b), axis = 0)\nprint('\\nAfter appending as a row:')\nprint(c)\n\n\n# appending as a colum\nd = np.concatenate((a, b.T), axis = 1)\nprint('\\nAfter appending as a colum:')\nprint(d)\n\n\ne = np.concatenate((a, b), axis = None)\nprint('\\nAfter flatteeing and appending:')\nprint(e)","53901b1a":"a = np.array([[1,2],[3,4]])\nprint('Original numpy array, a:')\nprint(a)\n\nravel_a = np.ravel(a)\nflatten_a = np.ndarray.flatten(a)  \n\nprint('\\nravel a:')\nprint(ravel_a)\n\nprint('\\nflatten a:')\nprint(flatten_a)\n\nravel_a[0] = 100\nprint('\\nAfter changing ravel, a:')\nprint(a)\n\nflatten_a[1] = 200\nprint('\\nAfter changing flatten, a:')\nprint(a)\n\nprint('\\nravel a base:')\nprint(ravel_a.base)\n\nprint('\\nflatten a base:')\nprint(flatten_a.base) # since it is a copy, you would see None as base","251d2e0b":"a = np.arange(6).reshape(2, -1)\nprint('Numpy Array:')\nprint(a)\n\nb = np.hstack((a, np.zeros((a.shape[0], 1), dtype = a.dtype)))\nprint('\\nAfter appending with hstack:')\nprint(b)","fafc20c0":"x = np.arange(6).reshape(2, -1) # -1 is used for lazy option\nprint('Numpy Array:')\nprint(x)\n\ndf = pd.DataFrame.from_records(x)\nprint('\\nDataframe from Numpy Array by using from_records:')\nprint(df)","bd8477b0":"x = np.array([[90, 98], [92, 99]])\nprint('Numpy Array:')\nprint(x)\n\ndf = pd.DataFrame({'Maths': x[:, 0], 'Science': x[:, 1]})\nprint('\\nDataframe from Numpy Array:')\nprint(df)","e897c19f":"a = np.arange(6).reshape(2, 3)\nprint('Before:')\nprint(a)\n\nb = list(a.flatten())\nprint('\\nAfter flattening the array to list:')\nprint(b)","2040ef00":"import numpy as np\nfrom itertools import chain\n\na = np.arange(12).reshape(2, 3, 2)\nprint('Before:')\nprint(a)\n\nb = a.tolist()\nprint('\\nAfter tolist:')\nprint(b)\n\nc = list(chain.from_iterable(a))\nprint('\\nAfter flattening the array to list:')\nprint(c)","f46e1dda":"x = np.datetime64('2020-09-30')\nprint('Sample numpy datetime:')\nprint(x)\n# print(type(x))\n\nx1 = np.datetime64('2020-09', 'D')\nprint('\\nNumpy Datetime with forcing D option:')\nprint(x1)\n# print(type(x1))","77d86800":"x = np.matrix(np.ones((3,3)))\nprint('Before:')\nprint(x)\n\n\nnp.array(x)[2] = 2\nprint('\\nAfter changing elements by array:')\nprint(x)\n\nnp.asarray(x)[2] = 6\nprint('\\nAfter changing elements by asarray:')\nprint(x)","b8994936":"x = np.array([[2.0, 8.8], [2.3, 1.9]])\nprint('Before:')\nprint(x)\n\ny = x.astype(int)\nprint('\\nAfter changing the datatype:')\nprint(y)\n\nz = np.int_(x)\nprint('\\nAfter changing the datatype by using int_:')\nprint(z)","97f1176a":"x = np.array([1.24500, 1.0000])\nprint('Before:')\nprint(x)\n\nnp.set_printoptions(formatter={'float': '{: 0.2f}'.format})\nprint('\\nAfter formattting the float:')\nprint(x)","f3830e55":"x = np.array([1.2e-10, 2.1, 23])\nprint('Before:')\nprint(x)\n\nnp.set_printoptions(suppress = True)\nprint('\\nAfter suppressing the scientific notation:')\nprint(x)\n\n# reset\nnp.set_printoptions(suppress = False)","fbca5f25":"x = np.array([0, 0, 1, 2, 1, 1, 0, 0, 0])\nprint('Original Array:')\nprint(x)\n\nnum_zeros = (x == 0).sum()\nnum_ones = (x == 1).sum()\n\nprint('\\nzeros sum:')\nprint(num_zeros)\n\nprint('\\nones sum:')\nprint(num_ones)\n\nprint('\\nones sum by using list:')\nx_list = list(x)\nprint(x_list.count(1))","8d364bc9":"x = np.array([0, 1, 2, 5, 0])\ny = np.array([0, 1, 4])\n\nprint('x:')\nprint(x)\n\nprint('\\ny:')\nprint(y)\n\nz = np.union1d(x, y)\nprint('\\nnp.union1d(x, y):')\nprint(z)","00944190":"x = np.array([0, 1, 2, 5, 0])\ny = np.array([0, 1, 4])\n\nprint('x:')\nprint(x)\n\nprint('\\ny:')\nprint(y)\n\nprint('\\nnp.setdiff1d(x, y):')\nprint(np.setdiff1d(x, y))","ede27be2":"x = np.array([0, 1, 2, 5, 0])\ny = np.array([0, 1, 4])\n\nprint('x:')\nprint(x)\n\nprint('\\ny:')\nprint(y)\n\nprint('\\nnp.intersect1d(x, y):')\nprint(np.intersect1d(x, y))","680739fa":"x = np.array([0, 1, 2, 5, 0])\ny = np.array([0, 1])\n\nprint('x:')\nprint(x)\n\nprint('\\ny:')\nprint(y)\n\nprint('\\nnp.in1d(x, y):')\nprint(np.in1d(x, y))","9a487d69":"x = np.array([1, 2, 6, 4, 2, 3, 2])\n\nprint('x:')\nprint(x)\n\nout, indices = np.unique(x, return_inverse=True)\n\nprint('\\nunique elements of x:')\nprint(out)\n\nunique, counts = np.unique(x, return_counts=True)\nunique_dict = dict(zip(unique, counts))\n\nprint('\\nunique elements and count:')\nprint(unique_dict)\n\nimport collections\ncol_counter = collections.Counter(x)\nprint('\\nunique elements and count by collections.counter:')\nprint(col_counter)","e743bbb0":"np.random.seed(12)\na = np.random.rand(4)\nprint('Random array after first seed:',a)","1fd1cf85":"np.random.seed(12)\nb = np.random.rand(4)\nprint('\\nRandom array after second seed:')\nprint(b)","d84908b4":"c = np.random.rand(4)\nprint('\\nRandom array after no seed:',c)","96634259":"x = np.arange(10)\n\nprint('x Before shuffling (using permutation):')\nprint(x)\n\nprint('\\nx After shuffling (using permutation):')\nprint(np.random.permutation(10))","80a3e260":"x = np.arange(10)\n\nprint('x Before shuffling:')\nprint(x)\n\nprint('\\nx After shuffling:')\nnp.random.shuffle(x)\nprint(x)","79e6c8dc":"x = np.random.choice(40, 4, replace = False)\n\nprint('np.random.choice(40, 4, replace = False):\\n')\nprint(x)","da58e3f5":"x = np.random.randint(10, 20, (4, 2))\n\nprint('np.random.randint(10, 20, (4, 2)):\\n')\nprint(x)","388498a4":"x = np.array([1, 2, 2, 1, 1, 1, 5, 5])\n\nprint('x:')\nprint(x)\n\nprint('\\nnp.bincount(x): ')\nprint(np.bincount(x))","f58e224d":"x = np.array([0, 1, 3])\ny = np.array([2, 4, 5])\nprint('x:')\nprint(x)\nprint('\\ny:')\nprint(y)\n\nprint('\\nnp.correlate(x, y): ')\nprint(np.correlate(x, y))","6c39eb38":"x = np.array([0, 1, 3])\ny = np.array([2, 4, 5])\nprint('x:')\nprint(x)\nprint('\\ny:')\nprint(y)\n\nprint('\\nnp.corrcoef(x, y): ')\nprint(np.corrcoef(x, y))","f8bc4d96":"x = np.array([0, 1, 2])\ny = np.array([7, 8, 9])\n\nprint('x:')\nprint(x)\nprint('\\ny:')\nprint(y)\n\nprint('\\nnp.cov(x, y): ')\nprint(np.cov(x, y))","2b10504d":"x = np.arange(6).reshape((2, 3))\nprint('x:')\nprint(x)\n\nprint('\\nnp.median(x): ')\nprint(np.median(x))","3a19b3f9":"x = np.arange(6).reshape((2, 3))\nprint('x:',x)\n\nprint('\\nnp.percentile(x, 90, 0): ')\nprint(np.percentile(x, 90, 0))","9c7d4415":"x = np.arange(6).reshape((2, 3))\nprint('x:')\nprint(x)\n\nprint('\\nx.min(axis = 0) : ')\nprint(x.min(axis = 0))","775404ad":"x = np.arange(10).reshape((2, 5))\nprint('x:')\nprint(x)\n\nprint('\\nnp.amax(x, 1) : ')\nprint(np.amax(x, 1))","0e20355a":"x = np.arange(10).reshape((2, 5))\nprint('x:')\nprint(x)\n\nprint('\\nnp.amin(x, 1) : ')\nprint(np.amin(x, 1))","95beb1fb":"x = np.arange(10).reshape((2, 5))\n\nprint('x:')\nprint(x)\n\nprint('\\nx.min(axis = 1) : ')\nprint(x.min(axis = 1))","5951aa82":"a = np.arange(6).reshape(2, 3)\na += 1\nprint(a)\n\na_mean = np.min(a)\nprint('Mean : ', a_mean)\n\na_max = np.max(a)\nprint('Max : ', a_max)\n\na_sum = np.sum(a)\nprint('Sum : ', a_sum)","4278046f":"a = np.array([[1, 2, 3]])\nprint('Before : ')\nprint(a)\n\nb = np.repeat(a, 3, axis=0)\nprint('\\nAfter : ')\nprint(b)","cff49c46":"a = np.arange(27).reshape(3, 3, 3)\nprint(a)\n\nprint(a[0, 1, 1])","e25aca7c":"a = np.arange(20)\nprint('Before : ')\nprint(a)\n\nnp.random.shuffle(a)\n\nprint('\\nAfter : ')\nprint(a)","539d619f":"a = np.arange(9).reshape(3, 3)\nprint('Before : ')\nprint(a)\n\na[[0,1]] = a[[1, 0]]\n\nprint('\\nAfter : ')\nprint(a)","e08c584d":"a = np.arange(10, 60, 7)\nprint(a)\n\nb = 23\nc = a.flat[np.abs(a - b).argmin()]\nprint(f'Elemenet near by {b} : {c}')","0b46e7a7":"from io import StringIO\n\ncontent = StringIO('''\n1, 2, 3\n6, ,  8\n20, , 20\n''')\na = np.genfromtxt(content, delimiter=\",\", dtype=np.int)\nprint(a)","f1a202f4":"a = np.random.randint(50, 100, 5)\n\nprint('Before : ')\nprint(a)\n\na.sort()\nprint('\\nAfter : ')\nprint(a)","f60e07c6":"a = np.random.random(5)\n\nprint('Before : ')\nprint(a)\n\na.sort()\nprint('\\nAfter : ')\nprint(a)","a3f46bb2":"a = np.random.randint(0, 10, 10)\nb = np.random.randint(0, 10, 10)\nprint(a)\nprint(b)\nprint('common values between a and b : ', np.intersect1d(a,b))","21484e5e":"x = [1, 2]\nprint('Before : ')\nprint(x)\nprint(type(x))\n\nprint('\\nAfter : ')\nc = np.asarray(x, float)\nprint(c)\nprint(type(c))\nprint(c.dtype)","2fd21a57":"x = [1, 2]\nprint('Before : ')\nprint(x)\nprint(type(x))\n\nprint('\\nAfter : ')\nb = np.asfarray(x)\nprint(b)\nprint(type(b))\nprint(b.dtype)\n\nprint('\\nAfter : ')\nc = np.asarray(x, float)\nprint(c)\nprint(type(c))\nprint(c.dtype)","b9706c3a":"a = [[0, 1, 2], [21, 22, 23]]\nprint('Before : ')\nprint(a)\nprint(type(a))\n\nprint('\\nAfter : ')\nb = np.array(a)\nprint(b)\nprint(type(b))\nprint(b.dtype)\nprint(b.shape)","319152ad":"a = [0, 1, 2]\nprint('Before : ')\nprint(a)\n\nprint('\\nAfter : ')\nb = np.array(a, dtype = float)\nprint(b)\nprint(b.dtype)","b0009e8b":"a = [0, 1, 2]\nprint('Before : ')\nprint(a)\n\nprint('\\nAfter : ')\nb = np.array(a)\nprint(b)\nprint(b.dtype)","6c21f6f5":"a = np.arange(10).reshape((2, 5))\nprint('Before : ')\nprint(a)\n\nprint('\\nAfter : ')\nb = np.where((a > 3) & (a < 7),  a * 3, 0)\nprint(b)","b81ee9d6":"a = np.arange(10).reshape((2, 5))\nprint('Before : ')\nprint(a)\n\nprint('\\nAfter : ')\nb = np.where((a > 3) & (a < 7), 0, a)\nprint(b)","50b9ce76":"a = np.arange(8).reshape((2, 4))\nprint('Before : ')\nprint(a)\n\nprint('\\nAfter : ')\nb = np.where(a < 4, 0, 20)\nprint(b)\n\n# Note: it matches, replace with 0, if not replace with 20","9c408d00":"a = np.arange(10).reshape(2, 5)\nprint('Before : ')\nprint(a)\nprint(type(a))\nprint(type(a[0]))\nprint(type(a[0][0]))\n\nb = a.tolist()\nprint('\\nAfter : ')\nprint(b)\nprint(type(b))\nprint(type(b[0]))\nprint(type(b[0][0]))","b103d88f":"a = np.arange(10).reshape(2, 5)\nprint('Before : ')\nprint(a)\n\nprint('\\nAfter : ')\nb = np.flip(a)\nprint(b)","3c390578":"a = np.arange(10).reshape(2, 5)\nprint('Before : ')\nprint(a)\n\nprint('\\nAfter : ')\nb = np.fliplr(a)\nprint(b)","53466238":"a = np.arange(12).reshape((3, 4))\nprint('Before : ')\nprint(a)\n\nprint(np.count_nonzero(a > 5))\n\nprint(a % 3 == 1)\nprint(np.count_nonzero(a % 3 == 1))","472685ec":"x = np.matrix([[10, 20], [60, 70]])\nprint('Before Inverse : ')\nprint(x)\n\nprint('After Inverse : ')\nprint(x.I)","be3907e1":"x = np.random.random(10)\n\nprint('Original Array:')\nprint(x)\n\nprint('\\nAfter setting presicion:')\nnp.set_printoptions(precision = 2)\nprint(x)","80eed8b1":"df = pd.DataFrame({'a1': [1, 2, 3], 'a2': [4, 5, 6]}, index = ['X', 'Y', 'Z'])\n\nprint('Dataframe:')\nprint(df)\n\nx = df.to_numpy()\n\nprint('\\nDataframe to Numpy:')\nprint(x)\n\ny = df.index.to_numpy()\nprint('\\nDataframe Indices to Numpy:')\nprint(y)\n\nz = df['a1'].to_numpy()\nprint('\\nDataframe Series to Numpy:')\nprint(z)","d563188f":"<a id=\"section-five\"><\/a>\n# Section 5 - Specialized ufuncs","c503fddb":"Vectorized operations in NumPy are implemented via ufuncs, whose main purpose is\nto quickly execute repeated operations on values in NumPy arrays. Ufuncs are\nextremely flexible\u2014before we saw an operation between a scalar and an array, but we\ncan also operate between two arrays:","2e9e68f4":"<a id=\"section-eightyfour\"><\/a>\n# Section 84 - Numpy Roll","ebfb5c9f":"<a id=\"section-hundredfourtynine\"><\/a>\n# Section 149 - 2D list to numpy array","2fe97f4c":"<a id=\"section-seven\"><\/a>\n# Section 7 - Ufuncs: Learning More","f64b6899":"<a id=\"section-fiftysix\"><\/a>\n# Section 56 - dot product of a row vector with a column vector","773a011b":"<a id=\"section-seventysix\"><\/a>\n# Section 76 - Element-wise math","450806cb":"<a id=\"section-fourtyseven\"><\/a>\n# Section 47 - Get the memory space occupied by an n-dimensional array","e5a26e43":"<a id=\"section-thirteen\"><\/a>\n# Section 13 - Create an Empty Array","b66dc039":"<a id=\"section-hundredtwo\"><\/a>\n# Section 102 - Reverse 2D Array","4d2ff39e":"<a id=\"section-seventyseven\"><\/a>\n# Section 77 - Numpy Reshape with Order","6d211f24":"<a id=\"section-hundredtwenty\"><\/a>\n# Section 120 - Create a boolean array with a shape of x","86737a28":"There is also a unary ufunc for negation, a ** operator for exponentiation, and a %\noperator for modulus:","41651dda":"<a id=\"section-thirty\"><\/a>\n# Section 30 - Check Numpy Configuration","9f3028ca":"<a id=\"section-hundredtwentyfive\"><\/a>\n# Section 125 - Create 4 different integers from 0, 40","1dc4a012":"<a id=\"section-hundredthirteen\"><\/a>\n# Section 113 - Convert flot array to int array","72acb2ae":"<a id=\"section-hundredtwentysix\"><\/a>\n# Section 126 - Create random int numpy array with specific shape","f28fc6c8":"**Computation on NumPy Arrays: Universal Functions**\n\nUp until now, we have been discussing some of the basic nuts and bolts of NumPy; in\nthe next few sections, we will dive into the reasons that NumPy is so important in the\nPython data science world. Namely, it provides an easy and flexible interface to opti\u2010\nmized computation with arrays of data.\nComputation on NumPy arrays can be very fast, or it can be very slow. The key to\nmaking it fast is to use vectorized operations, generally implemented through Num\u2010\nPy\u2019s universal functions (ufuncs). This section motivates the need for NumPy\u2019s ufuncs,\nwhich can be used to make repeated calculations on array elements much more effi\u2010\ncient. It then introduces many of the most common and useful arithmetic ufuncs\navailable in the NumPy package.\n","e763e2d5":"<a id=\"section-ninteen\"><\/a>\n# Section 19 - Create a numpy with random integers","609eaa7d":"<a id=\"section-hundredfourtyfive\"><\/a>\n# Section 145 - Random array and sorting","2feba807":"<a id=\"section-sixtyfour\"><\/a>\n# Section 64 - To print the rows in the Matrix\n","e73abcdc":"<a id=\"section-thirtythree\"><\/a>\n# Section 33 - Flatten Array","45e17dfb":"<a id=\"section-sixteen\"><\/a>\n# Section 16 - Arrange numpy between numbers","45de4eea":"**Introducing UFuncs**\n\n\nFor many types of operations, NumPy provides a convenient interface into just this\nkind of statically typed, compiled routine. This is known as a vectorized operation.\nYou can accomplish this by simply performing an operation on the array, which will\nthen be applied to each element. This vectorized approach is designed to push the\nloop into the compiled layer that underlies NumPy, leading to much faster execution.\nCompare the results of the following two:\n","86948bc1":"<a id=\"section-twelve\"><\/a>\n# Section 12 - Structured Data: NumPy\u2019s Structured Arrays","0e6e42ac":"<a id=\"section-hundredtwentythree\"><\/a>\n# Section 123 - Shuffling by permutation","80e50452":"<a id=\"section-nintyone\"><\/a>\n# Section 91 - Selecting specific columns","7c789795":"<a id=\"section-hundredfiftyfour\"><\/a>\n# Section 154 - Numpy where ","5844f5c4":"<a id=\"section-hundredninteen\"><\/a>\n# Section 119 - Find unique intersection","34fe82a5":"<a id=\"section-fiftynine\"><\/a>\n# Section 59 - Squeeze 1","1d777504":"#                                    Comprehensive Guide to--Numpy Array\n\nThis chapter will cover NumPy in detail. NumPy (short for Numerical Python) pro\u2010\nvides an efficient interface to store and operate on dense data buffers. In some ways,\nNumPy arrays are like Python\u2019s built-in list type, but NumPy arrays provide much\nmore efficient storage and data operations as the arrays grow larger in size. NumPy\narrays form the core of nearly the entire ecosystem of data science tools in Python, so\ntime spent learning to use NumPy effectively will be valuable no matter what aspect of data science interests you.","706ebb27":"<a id=\"section-hundredfiftyfive\"><\/a>\n# Section 155 - Convert numpy array to list ","b70b4a58":"<a id=\"section-fifteen\"><\/a>\n# Section 15 - Check elements count","fdfc9a3a":"<a id=\"section-hundredseven\"><\/a>\n# Section 107 - Numpy to Dataframe by using from_records","c5aaabac":"<a id=\"section-twentyfour\"><\/a>\n# Section 24 - Print without truncation","90908996":"<a id=\"section-eleven\"><\/a>\n# Section 11 - Sorting Arrays","bfdf2948":"<a id=\"section-hundredfiftynine\"><\/a>\n# Section 159 - Numpy Inverse","7fa80ea0":"<a id=\"section-hundredthirtyfour\"><\/a>\n# Section 134 - Using amax function","2f643fa3":"<a id=\"section-fourtyone\"><\/a>\n# Section 41 - Get only unique","d23f92ec":"<a id=\"section-hundredten\"><\/a>\n# Section 110 - Numpy 2D array flat list","240098f4":"<a id=\"section-sixtyeight\"><\/a>\n# Section 68 - Convert List of List String to Numpy Array","7f8047ae":"<a id=\"section-hundredfiftythree\"><\/a>\n# Section 153 - Numpy where with multiple conditions - apply only on matching conditions","0cb2f91d":"<a id=\"section-hundredfiftytwo\"><\/a>\n# Section 152 - Process with where","780c3561":"<a id=\"section-one\"><\/a>\n# Section  1 - Import Numpy & basic check","d3d47345":"<a id=\"section-hundredeleven\"><\/a>\n# Section 111 - Numpy Datetime","36b08de7":"<a id=\"section-hundredthirtyseven\"><\/a>\n# Section 137 - Min, Max, Sum","9464288b":"<a id=\"section-hundredtwentyseven\"><\/a>\n# Section 127 - Count the number of occurrences","86c74b7b":"<a id=\"section-hundredtwentyone\"><\/a>\n# Section 121 - Get unique elements","767b0b4b":"<a id=\"section-eightyeight\"><\/a>\n# Section 88 - If condition and sum on Numpy colum","2b33ecc2":"<a id=\"section-hundredseventeen\"><\/a>\n# Section 117 - Find the union","64098984":"<a id=\"section-fourtynine\"><\/a>\n# Section 49 - Get transpose of an n-d array","8d285646":"<a id=\"section-seventynine\"><\/a>\n# Section 79 - Transpose of a Matrix","5f5aa521":"<a id=\"section-fiftyseven\"><\/a>\n# Section 57 - Convert Array indices to One Hot Encoded","ed65da92":"All of these arithmetic operations are simply convenient wrappers around specific\nfunctions built into NumPy; for example, the + operator is a wrapper for the add\nfunction:","277a2bc7":"![image.png](attachment:image.png)","aa735315":"<a id=\"section-hundredfourtysix\"><\/a>\n# Section 146 - Find common values between two numpy array","fd7794af":"<a id=\"section-hundredsixty\"><\/a>\n# Section 160 - Numpy with precision","5fb9f022":"<a id=\"section-eightysix\"><\/a>\n# Section 86 - Apply Along Axis on Numpy Matrix","a321ecdd":"<a id=\"section-fiftyeight\"><\/a>\n# Section 58 - Squeeze 2","991105ac":"<a id=\"section-eightythree\"><\/a>\n# Section 83 - Roll elements","e4aa4872":"<a id=\"section-hundredfiftysix\"><\/a>\n# Section 156 - Flip a numpy array by using flip (both horizontally and vertically) ","3b8af06e":"This default behavior is actually quite useful: it means that when we work with large\ndatasets, we can access and process pieces of these datasets without the need to copy\nthe underlying data buffer.","24dd27e1":"<a id=\"section-seventeen\"><\/a>\n# Section 17 - Arrange numpy between numbers with intervals","547f1d01":"<a id=\"section-thirtyone\"><\/a>\n# Section 31 - Check atlas","51f1774f":"<a id=\"section-hundredthirtysix\"><\/a>\n# Section 136 - Get min of axis = 1","3ffc1ad4":"<a id=\"section-hundredfour\"><\/a>\n# Section 104 - Numpy Concatenate","77dabf22":"<a id=\"section-hundredthirtynine\"><\/a>\n# Section 139 - Get specific element","311893ae":"<a id=\"section-ninty\"><\/a>\n# Section 90 - Vectorize","e7e92f23":"<a id=\"section-nintythree\"><\/a>\n# Section 93 - Array of NaN","c93da0d3":"<a id=\"section-thirtyfour\"><\/a>\n# Section 34 - Expand Dimension","f1dc9fc4":"<a id=\"section-hundrednine\"><\/a>\n# Section 109 - Numpy 2D array to flat list","8653df8e":"<a id=\"section-hundredtwelve\"><\/a>\n# Section 112 - array vs asarray","19f746ff":"<a id=\"section-twentyseven\"><\/a>\n# Section 27 - Get the nth column of an array","0c7dc061":"<a id=\"section-hundredone\"><\/a>\n# Section 101 - Reverse 2D array with elements","f5c20ab4":"The Slowness of Loops\nPython\u2019s default implementation (known as CPython) does some operations very\nslowly. This is in part due to the dynamic, interpreted nature of the language: the fact\nthat types are flexible, so that sequences of operations cannot be compiled down to\nefficient machine code as in languages like C and Fortran. Recently there have been\nvarious attempts to address this weakness: well-known examples are the PyPy project,\na just-in-time compiled implementation of Python; the Cython project, which con\u2010\nverts Python code to compilable C code; and the Numba project, which converts\nsnippets of Python code to fast LLVM bytecode. Each of these has its strengths and\nweaknesses, but it is safe to say that none of the three approaches has yet surpassed\nthe reach and popularity of the standard CPython engine.\nThe relative sluggishness of Python generally manifests itself in situations where\nmany small operations are being repeated\u2014for instance, looping over arrays to oper\u2010\n50 | Chapter 2: Introduction to NumPy\nate on each element. For example, imagine we have an array of values and we\u2019d like to\ncompute the reciprocal of each. A straightforward approach might look like this:","4ae1cdff":"<a id=\"section-hundredthirtythree\"><\/a>\n# Section 133 - Get min of axis = 0","85d4cf72":"<a id=\"section-hundredfourtyseven\"><\/a>\n# Section 147 - Convert list to numpy array with explicit datatype","2f76edc9":"<a id=\"section-eightynine\"><\/a>\n# Section 89 - If condition on Numpy array ","e5605030":"<a id=\"section-seventyfour\"><\/a>\n# Section 74 - Subtract Outer","a864da50":"<a id=\"section-eightyone\"><\/a>\n# Section 81 - Rearrange array with specified index","cd311060":"<a id=\"section-hundredsix\"><\/a>\n# Section 106 - Append with hstack","011a6076":"<a id=\"section-hundredeighteen\"><\/a>\n# Section 118 - Find the diff","d8183a25":"<a id=\"section-twentyone\"><\/a>\n# Section 21 - Array of Strings","77615f43":"<a id=\"section-fifty\"><\/a>\n# Section 50 - Flatten an n-d array to get a one-dimensional array","b7a4a012":"<a id=\"section-ten\"><\/a>\n# Section 10 - Fancy Indexing","c78965d5":"<a id=\"section-hundred\"><\/a>\n# Section 100 - Reverse 2D array with elements","e68a2c2a":"<a id=\"section-eightyseven\"><\/a>\n# Section 87 - Using Vectorize function on Numpy","6eff4319":"![image.png](attachment:image.png)","569dd46c":"<a id=\"section-hundredfourtyeight\"><\/a>\n# Section 148 - Convert list to float numpy array","12ba7d8a":"<a id=\"section-fiftytwo\"><\/a>\n# Section 52 - Sort NumPy array","621360eb":"\n# Table of content\n\n* [Section  1 - Import Numpy & basic check](#section-one)                                      \n* [Section 2 - Creating Arrays from Scratch](#section-two) \n* [Section 3 - Array Slicing: Accessing Subarrays](#section-Three)                             \n* [Section 4 - Computation on NumPy Arrays: Universal Functions](#section-four)\n* [Section 5 - Specialized ufuncs](#section-five)                                              \n* [Section 6 - Advanced Ufunc Features](#section-six)\n* [Section 7 - Ufuncs: Learning More](#section-seven)                                          \n* [Section 8 - Computation on Arrays: Broadcasting](#section-eight)\n* [Section 9 - Comparisons, Masks, and Boolean Logic](#section-nine)                           \n* [Section 10 - Fancy Indexing](#section-ten)\n* [Section 11 - Sorting Arrays](#section-eleven)                                               \n* [Section 12 - Structured Data: NumPy\u2019s Structured Arrays](#section-twelve)\n* [Section 13 - Create an Empty Array](#section-thirteen)                                                \n* [Section 14 - Check if an Array is Empty](#section-fourteen)\n* [Section 15 - Check elements count](#section-fifteen)                                                 \n* [Section 16 - Arrange numpy between numbers](#section-sixteen)\n* [Section 17 - Arrange numpy between numbers with intervals](#section-seventeen)\n* [Section 18 - How to reshape array](#section-eighteen)\n* [Section 19 - Create a numpy with random integers](#section-ninteen)\n* [Section 20 - Create a numpy with random integers and size](#section-twenty)\n* [Section 21 - Array of strings](#section-twenthone)\n* [Section 22 - Numpy array with strings and dtype](#section-twentytwo)\n* [Section 23 - Numpy array with strings and explicit dtype](#section-twentythree)\n* [Section 24 - Print without truncation](#section-twentyfour)\n* [Section 25 - Save Numpy to CSV](#section-twentyfive)\n* [Section 26 - Dataframe to Numpy](#section-twentysix)\n* [Section 27 - Get the nth column of an array](#section-twentyseven)\n* [Section 28 - Reshape with -1](#section-twentyeight)\n* [Section 29 - Argsort on Numpy array](#section-twentynine)\n* [Section 30 - Check Numpy Configuration](#section-thirty)\n* [Section 31 - Check atlas](#section-thirtyone)\n* [Section 32 - Gradient sample](#section-thirtytwo)\n* [Section 33 - Flatten Array](#section-thirtythree)\n* [Section 34 - Expand Dimension](#section-thirtyfour)\n* [Section 35 - Partitioning array](#section-thirtyfive)\n* [Section 36 - Unpack list elements](#section-thirtysix)\n* [Section 37 - Applying Triu function](#section-thirtyseven)\n* [Section 38 - Loop list by using itertools.cycle](#section-thirtyeight)\n* [Section 39 - Find indices with SearchSorted](#section-thirtynine)\n* [Section 40 - convert a list and tuple into NumPy arrays](#section-fourty)\n* [Section 41 - Get only unique](#section-fourtyone)\n* [Section 42 - Random Generator - Draw samples from Beta Distribution](#section-fourtytwo)\n* [Section 43 - find element in an array less then the value Provided](#section-fourtythree)\n* [Section 44 - Multinomial 2](#section-fourtyfour)\n* [Section 45 - Multinomial 1](#section-fourtyfive)\n* [Section 46 - Business Day Count](#section-fourtysix)\n* [Section 47 - Get the memory space occupied by an n-dimensional array](#section-fourtyseven)\n* [Section 48 - How to create a copy of NumPy array](#section-fourtyeight)\n* [Section 49 - Get transpose of an n-d array](#section-fourtynine)\n* [Section 50 - Flatten an n-d array to get a one-dimensional array](#section-fifty)\n* [Section 51 - Change the data type of elements in the NumPy array](#section-fiftyone)\n* [Section 52 - Sort NumPy array](#section-fiftytwo)\n* [Section 53 - Get cross-product of two numpy vectors](#section-fiftythree)\n* [Section 54 - Multiply two NumPy matrices](#section-fiftyfour)\n* [Section 55 - Dot product of two arrays](#section-fiftyfive)\n* [Section 56 - dot product of a row vector with a column vector](#section-fiftysix)\n* [Section 57 - Convert Array indices to One Hot Encoded](#section-fiftyseven)\n* [Section 58 - Squeeze 2](#section-fiftyeight)\n* [Section 59 - Squeeze 1](#section-fiftynine)\n* [Section 60 - Rearrange with permutation](#section-sixty)\n* [Section 61 - Initalize array with tuples](#section-sixtyone)\n* [Section 62 - Print columns by index](#section-sixtytwo)\n* [Section 63 - To read the last element from each row in Matrix](#section-sixtythree)\n* [Section 64 - To print the rows in the Matrix](#section-sixtyfour)\n* [Section 65 - Adding Matrices Using Nested List](#section-sixtyfive)\n* [Section 66 - Multiplication of Matrices using Nested List](#section-sixtysix)\n* [Section 67 - Resize a list with rounds](#section-sixtyseven)\n* [Section 68 - Convert List of List String to Numpy Array](#section-sixtyeight)\n* [Section 69 - Set Error in Numpy](#section-sixtynine)\n* [Section 70 - Complex number and absolute value](#section-seventy)\n* [Section 71 - Float anomalies in Numpy Arange](#section-seventyone)\n* [Section 72 - Immutable Array](#section-seventytwo)\n* [Section 73 - Multiply Outer](#section-seventythree)\n* [Section 74 - Subtract Outer](#section-seventyfour)\n* [Section 75 - \"Where\" With multiple condition](#section-seventyfive)\n* [Section 76 - Element-wise math](#section-seventysix)\n* [Section 77 - Numpy Reshape with Order](#section-seventyseven)\n* [Section 78 - Continguous Array](#section-seventyeight)\n* [Section 79 - Transpose of a Matrix](#section-seventynine)\n* [Section 80 - Serialize array with pickle](#section-eighty)\n* [Section 81 - Rearrange array with specified index](#section-eightyone)\n* [Section 82 - Array Append on Axis 0 and Axis 1](#section-eightytwo)\n* [Section 83 - Roll elements](#section-eightythree)\n* [Section 84 - Numpy Roll](#section-eightyfour)\n* [Section 85 - Sort the arry by using](#section-eightyfive)\n* [Section 86 - Apply Along Axis on Numpy Matrix](#section-eightysix)\n* [Section 87 - Using Vectorize function on Numpy](#section-eightyseven)\n* [Section 88 - If condition and sum on Numpy colum](#section-eightyeight)\n* [Section 89 - If condition on Numpy array](#section-eightynine)\n* [Section 90 - Vectorize](#section-ninty)\n* [Section 91 - Selecting specific columns](#section-nintyone)\n* [Section 92 - Replace values with specific condition](#section-nintytwo)\n* [Section 93 - Array of NaN](#section-nintythree)\n* [Section 94 - Boolean Numpy Array](#section-nintyfour)\n* [Section 95 - Deleting specific elements](#section-nintyfive)\n* [Section 96 - Deleting specific elements with indices](#section-nintysix)\n* [Section 97 - Array with prefilled values](#section-nintyseven)\n* [Section 98 - Array with prefilled values using empty](#section-nintyeight)\n* [Section 99 - Image as an array](#section-nintynine)\n* [Section 100 - Reverse 2D array with elements](#section-hundred)\n* [Section 101 - Reverse 2D array with elements](#section-hundredone)\n* [Section 102 - Reverse 2D Array](#section-hundredtwo)\n* [Section 103 - Reverse 1D Array](#section-hundredthree)\n* [Section 104 - Numpy Concatenate](#section-hundredfour)\n* [Section 105 - Ravel and Flatten with assignment](#section-hundredfive)\n* [Section 106 - Append with hstack](#section-hundredsix)\n* [Section 107 - Numpy to Dataframe by using from_records](#section-hundredseven)\n* [Section 108 - Numpy array to Pandas Dataframe](#section-hundredeight)\n* [Section 109 - Numpy 2D array to flat list](#section-hundrednine)\n* [Section 110 - Numpy 2D array flat list](#section-hundredten)\n* [Section 111 - Numpy Datetime](#section-hundredeleven)\n* [Section 112 - array vs asarray](#section-hundredtwelve)\n* [Section 113 - Convert flot array to int array](#section-hundredthirteen)\n* [Section 114 - Print with decimal format](#section-hundredfourteen)\n* [Section 115 - Pretty print - suppress the scientific notation](#section-hundredfifteen)\n* [Section 116 - Element Sum](#section-hundredsixteen)\n* [Section 117 - Find the union](#section-hundredseventeen)\n* [Section 118 - Find the diff](#section-hundredeighteen)\n* [Section 119 - Find unique intersection](#section-hundredninteen)\n* [Section 120 - Create a boolean array with a shape of x](#section-hundredtwenty)\n* [Section 121 - Get unique elements](#section-hundredtwentyone)\n* [Section 122 - Seed for random](#section-hundredtwentytwo)\n* [Section 123 - Shuffling by permutation](#section-hundredtwentythree)\n* [Section 124 - Shuffle](#section-hundredtwentyfour)\n* [Section 125 - Create 4 different integers from 0, 40](#section-hundredtwentyfive)\n* [Section 126 - Create random int numpy array with specific shape](#section-hundredtwentysix)\n* [Section 127 - Count the number of occurrences](#section-hundredtwentyseven)\n* [Section 128 - Cross correlation](#section-hundredtwentyeight)\n* [Section 129 - Pearson product-moment correlation](#section-hundredtwentynine)\n* [Section 130 - Covariance matrix](#section-hundredthirty)\n* [Section 131 - Find median](#section-hundredthirtyone)\n* [Section 132 - Calculate 90th percentile of an axis](#section-hundredthirtytwo)\n* [Section 133 - Get min of axis = 0](#section-hundredthirtythree)\n* [Section 134 - Using amax function](#section-hundredthirtyfour)\n* [Section 135 - Using amin function](#section-hundredthirtyfive)\n* [Section 136 - Get min of axis = 1](#section-hundredthirtysix)\n* [Section 137 - Min, Max, Sum](#section-hundredthirtyseven)\n* [Section 138 - Repeat an array](#section-hundredthirtyeight)\n* [Section 139 - Get specific element](#section-hundredthirtynine)\n* [Section 140 - Shuffle](#section-hundredfourty)\n* [Section 141 - Swap rows](#section-hundredfourtyone)\n* [Section 142 - Find the nearest element in the array](#section-hundredfourtytwo)\n* [Section 143 - String to numpy array](#section-hundredfourtythree)\n* [Section 144 - Random int array and sorting](#section-hundredfourtyfour)\n* [Section 145 - Random array and sorting](#section-hundredfourtyfive)\n* [Section 146 - Find common values between two numpy array](#section-hundredfourtysix)\n* [Section 147 - Convert list to numpy array with explicit datatype](#section-hundredfourtyseven)\n* [Section 148 - Convert list to float numpy array](#section-hundredfourtyeight)\n* [Section 149 - 2D list to numpy array](#section-hundredfourtynine)\n* [Section 150 - List to numpy array with explicit dtype](#section-hundredfifty)\n* [Section 151 - List to numpy array](#section-hundredfiftyone)\n* [Section 152 - Process with where](#section-hundredfiftytwo)\n* [Section 153 - Numpy where with multiple conditions - apply only on matching conditions](#section-hundredfiftythree)\n* [Section 154 - Numpy where](#section-hundredfiftyfour)\n* [Section 155 - Convert numpy array to list](#section-hundredfiftyfive)\n* [Section 156 - Flip a numpy array by using flip (both horizontally and vertically)](#section-hundredfiftysix)\n* [Section 157 - Flip a numpy array by using fliplr (horizontally)](#section-hundredfiftyseven)\n* [Section 158 - Numpy compare with nonzero count](#section-hundredfiftyeight)\n* [Section 159 - Numpy Inverse](#section-hundredfiftynine)\n* [Section 160 - Numpy with precision](#section-hundredsixty)\n* [Section 161 - Dataframe to Numpy](#section-hundredsixtyone)\n","6f0ed03a":"<a id=\"section-hundredfifteen\"><\/a>\n# Section 115 - Pretty print - suppress the scientific notation","7c18dc6d":"<a id=\"section-fourtythree\"><\/a>\n# Section 43 - find element in an array less then the value Provided","0f8a1d7f":"<a id=\"section-sixtythree\"><\/a>\n# Section 63 - To read the last element from each row in Matrix","556f5658":"<a id=\"section-nintyeight\"><\/a>\n# Section 98 - Array with prefilled values using empty","1e8832d8":"<a id=\"section-hundredtwentyfour\"><\/a>\n# Section 124 - Shuffle","94e9d8a9":"<a id=\"section-hundredthree\"><\/a>\n# Section 103 - Reverse 1D Array","3c70e824":"<a id=\"section-sixtytwo\"><\/a>\n# Section 62 - Print columns by index","87fdbff3":"<a id=\"section-hundredfifty\"><\/a>\n# Section 150 - List to numpy array with explicit dtype","cdd1b96b":"<a id=\"section-hundredtwentytwo\"><\/a>\n# Section 122 - Seed for random","7b183dfb":"<a id=\"section-hundredtwentyeight\"><\/a>\n# Section 128 - Cross correlation","1efc53a7":"<a id=\"section-nintyfive\"><\/a>\n# Section 95 - Deleting specific elements","a3782b30":"<a id=\"section-sixty\"><\/a>\n# Section 60 - Rearrange with permutation","65fef612":"<a id=\"section-sixtysix\"><\/a>\n# Section 66 - Multiplication of Matrices using Nested List","631d0608":"<a id=\"section-hundredfourtytwo\"><\/a>\n# Section 142 - Find the nearest element in the array","ea4844bc":"<a id=\"section-seventyfive\"><\/a>\n# Section 75 - \"Where\" With multiple condition","af9e9abf":"<a id=\"section-fiftyone\"><\/a>\n# Section 51 - Change the data type of elements in the NumPy array.","55fc8615":"<a id=\"section-eightyfive\"><\/a>\n# Section 85 - Sort the arry by using ","62d9cbf9":"Here 'U10' translates to \u201cUnicode string of maximum length 10,\u201d 'i4' translates to\n\u201c4-byte (i.e., 32 bit) integer,\u201d and 'f8' translates to \u201c8-byte (i.e., 64 bit) float.\u201d We\u2019ll\ndiscuss other options for these type codes in the following section.\n","2e9ad3c6":"<a id=\"section-seventyeight\"><\/a>\n# Section 78 - Continguous Array","6a58fa31":"Computations using vectorization through ufuncs are nearly always more efficient\nthan their counterpart implemented through Python loops, especially as the arrays\ngrow in size. Any time you see such a loop in a Python script, you should consider\nwhether it can be replaced with a vectorized expression.\n","8fe658f1":"<a id=\"section-Three\"><\/a>\n# Section 3 - Array Slicing: Accessing Subarrays","4c30d3b5":"<a id=\"section-hundredfourtythree\"><\/a>\n# Section 143 - String to numpy array","a5913418":"<a id=\"section-eighteen\"><\/a>\n# Section 18 - How to reshape array","bd8cf7a7":"It takes several seconds to compute these million operations and to store the result!\n\n**%timeit**","dd9d5c05":"<a id=\"section-twentythree\"><\/a>\n# Section 23 - Numpy array with strings and explicit dtype","c4987be4":"<a id=\"section-six\"><\/a>\n# Section 6 - Advanced Ufunc Features","4c413c43":"<a id=\"section-thirtyeight\"><\/a>\n# Section 38 - Loop list by using itertools.cycle","1112ed06":"<a id=\"section-nintytwo\"><\/a>\n# Section 92 - Replace values with specific condition","40108c63":"<a id=\"section-hundredsixtyone\"><\/a>\n# Section 161 - Dataframe to Numpy","fce0101d":"<a id=\"section-hundredfourtyone\"><\/a>\n# Section 141 - Swap rows","1032b6f8":"if we measure the execution time of this code for a large input, we\nsee that this operation is very slow, perhaps surprisingly so! We\u2019ll benchmark this\nwith IPython\u2019s %timeit magic ","dbf59577":"<a id=\"section-sixtyone\"><\/a>\n# Section 61 - Initalize array with tuples","b45bfb49":"<a id=\"section-fiftythree\"><\/a>\n# Section 53 - Get cross-product of two numpy vectors","501e1c10":"<a id=\"section-nintyfour\"><\/a>\n# Section 94 - Boolean Numpy Array","735ba5f9":"<a id=\"section-hundredfiftyone\"><\/a>\n# Section 151 - List to numpy array","ce3c4e5e":"<a id=\"section-hundredeight\"><\/a>\n# Section 108 - Numpy array to Pandas Dataframe","4c5054cd":"<a id=\"section-hundredthirtyfive\"><\/a>\n# Section 135 - Using amin function","43a12c52":"<a id=\"section-eight\"><\/a>\n# Section 8 - Computation on Arrays: Broadcasting","d9d3fd06":"<a id=\"section-sixtyseven\"><\/a>\n# Section 67 - Resize a list with rounds","92d40c12":"<a id=\"section-sixtyfive\"><\/a>\n# Section 65 - Adding Matrices Using Nested List","79dd6aab":"<a id=\"section-eightytwo\"><\/a>\n# Section 82 - Array Append on Axis 0 and Axis 1","580a5774":"<a id=\"section-seventytwo\"><\/a>\n# Section 72 - Immutable Array","0df84106":"<a id=\"section-nintysix\"><\/a>\n# Section 96 - Deleting specific elements with indices","dc3f0878":"<a id=\"section-four\"><\/a>\n# Section 4 - Computation on NumPy Arrays: Universal Functions\n","5e363bc8":"<a id=\"section-twentyfive\"><\/a>\n# Section 25 - Save Numpy to CSV","1b48f3ea":"<a id=\"section-thirtyfive\"><\/a>\n# Section 35 - Partitioning array","d733b284":"<a id=\"section-thirtynine\"><\/a>\n# Section 39 - Find indices with SearchSorted","e18e92c7":"<a id=\"section-hundredfourtyfour\"><\/a>\n# Section 144 - Random int array and sorting","1fd21136":"<a id=\"section-fourtysix\"><\/a>\n# Section 46 - Business Day Count","f07e7376":"<a id=\"section-hundredfourty\"><\/a>\n# Section 140 - Shuffle","4985a817":"<a id=\"section-hundredfive\"><\/a>\n# Section 105 - Ravel and Flatten with assignment","6c6f7bd4":"<a id=\"section-hundredtwentynine\"><\/a>\n# Section 129 - Pearson product-moment correlation","45622865":"<a id=\"section-twentysix\"><\/a>\n# Section 26 - Dataframe to Numpy","c245e820":"<a id=\"section-hundredthirtytwo\"><\/a>\n# Section 132 - Calculate 90th percentile of an axis","0522dfc4":"<a id=\"section-thirtytwo\"><\/a>\n# Section 32 - Gradient sample","8fb3c48a":"<a id=\"section-hundredsixteen\"><\/a>\n# Section 116 - Element Sum","297f58ef":"<a id=\"section-seventyone\"><\/a>\n# Section 71 - Float anomalies in Numpy Arange","0c9171f3":"<a id=\"section-hundredfourteen\"><\/a>\n# Section 114 - Print with decimal format","a30ebe80":"<a id=\"section-twentynine\"><\/a>\n# Section 29 - Argsort on Numpy array","c7104430":"<a id=\"section-fourty\"><\/a>\n# Section 40 - convert a list and tuple into NumPy arrays","201e36b6":"<a id=\"section-seventythree\"><\/a>\n# Section 73 - Multiply Outer","fcdae262":"<a id=\"section-seventy\"><\/a>\n# Section 70 - Complex number and absolute value","61963f74":"<a id=\"section-twenty\"><\/a>\n# Section 20 - Create a numpy with random integers and size","7b793a8d":"But this is a bit clumsy. There\u2019s nothing here that tells us that the three arrays are\nrelated; it would be more natural if we could use a single structure to store all of this\ndata. NumPy can handle this through structured arrays, which are arrays with com\u2010\npound data types.","2f4923cb":"<a id=\"section-fourtyfour\"><\/a>\n# Section 44 - Multinomial 2","d3b827a8":"<a id=\"section-nine\"><\/a>\n# Section 9 - Comparisons, Masks, and Boolean Logic","6c05d26e":"Exploring NumPy\u2019s UFuncs\n\nUfuncs exist in two flavors: unary ufuncs, which operate on a single input, and binary\nufuncs, which operate on two inputs. We\u2019ll see examples of both these types of func\u2010\ntions here.","8cd60737":"<a id=\"section-thirtyseven\"><\/a>\n# Section 37 - Applying Triu function\n\n\n","85022c50":"<a id=\"section-fiftyfive\"><\/a>\n# Section 55 - Dot product of two arrays","a0c39fb1":"<a id=\"section-eighty\"><\/a>\n# Section 80 - Serialize array with pickle","a752af75":"<a id=\"section-fourtyeight\"><\/a>\n# Section 48 - How to create a copy of NumPy array","4d97ca01":"<a id=\"section-hundredfiftyeight\"><\/a>\n# Section 158 - Numpy compare with nonzero count ","0c123e85":"<a id=\"section-fourteen\"><\/a>\n# Section 14 - Check if an Array is Empty","082c23f7":"<a id=\"section-twentyeight\"><\/a>\n# Section 28 - Reshape with -1","0a7d5bf3":"<a id=\"section-nintyseven\"><\/a>\n# Section 97 - Array with prefilled values","ec7a8039":"<a id=\"section-nintynine\"><\/a>\n# Section 99 - Image as an array","98b87ddf":"<a id=\"section-two\"><\/a>\n# Section 2 - Creating Arrays from Scratch","fce90733":"<a id=\"section-twentytwo\"><\/a>\n# Section 22 - Numpy array with strings and dtype","501d4379":"<a id=\"section-fourtytwo\"><\/a>\n# Section 42 - Random Generator - Draw samples from Beta Distribution","8ad9f8d3":"<a id=\"section-fourtyfive\"><\/a>\n# Section 45 - Multinomial 1","6890b611":"<a id=\"section-hundredthirty\"><\/a>\n# Section 130 - Covariance matrix","9f69926e":"<a id=\"section-fiftyfour\"><\/a>\n# Section 54 - Multiply two NumPy matrices","2d2933f4":"<a id=\"section-thirtysix\"><\/a>\n# Section 36 - Unpack list elements ","ba967b84":"<a id=\"section-hundredthirtyeight\"><\/a>\n# Section 138 - Repeat an array","04e7f486":"<a id=\"section-hundredthirtyone\"><\/a>\n# Section 131 - Find median","05bb1284":"<a id=\"section-hundredfiftyseven\"><\/a>\n# Section 157 - Flip a numpy array by using fliplr (horizontally) ","288fd7f7":"<a id=\"section-sixtynine\"><\/a>\n# Section 69 - Set Error in Numpy","66aeb2c4":"![image.png](attachment:image.png)","f7684561":"A Python matrix is a specialized two-dimensional rectangular array of data stored in rows and columns. The data in a matrix can be numbers, strings, expressions, symbols, etc. Matrix is one of the important data structures that can be used in mathematical and scientific calculations."}}