{"cell_type":{"a6e93ab5":"code","8c491385":"code","db5da535":"code","eda91c1e":"code","ed649f35":"code","b2023cdf":"code","440fc27b":"code","d7ec55a7":"code","1ba169f6":"code","dccc6d6b":"code","1e9b0a2f":"code","0f87bf8f":"code","53905f4e":"code","60ad8005":"code","cca6c85a":"code","927e8274":"code","45e8acc3":"code","187b13ee":"code","9421aefb":"code","3bd80aaf":"code","043b00ec":"code","35709c3d":"code","ce679417":"code","2b27b536":"code","61962ebe":"code","fd8c4a33":"code","a7007b66":"code","40f8ea02":"code","19ce3525":"code","635526a0":"code","e434798e":"code","acab7459":"code","ec1ec2b9":"code","1b8a6e6e":"code","1134745d":"code","2b74ed36":"code","7887547b":"code","ccf00c83":"code","fefa37f7":"code","c8c4bb3d":"code","8357ccce":"code","0fbbc19d":"code","b57f8e26":"code","8571b2af":"code","c184b088":"code","c4e6bf2d":"code","17eccb7c":"code","23aea6c3":"code","88084a8c":"code","fd378410":"code","022962e0":"code","157fe76b":"code","0cb85b4d":"code","bdee6059":"code","a99f3614":"code","6ef47a23":"code","e15b5939":"code","c478060b":"code","c30a3179":"markdown","09b0ec4b":"markdown","9666bf4b":"markdown","47d8234e":"markdown","41089498":"markdown","40be710d":"markdown","bc4ba21a":"markdown","16298357":"markdown","229198af":"markdown","c38da3fe":"markdown","773ab525":"markdown","f7baac6b":"markdown"},"source":{"a6e93ab5":"import time\nimport random\nimport dask\n\n\n@dask.delayed\ndef inc(x):\n    time.sleep(random.random())\n    return x + 1\n\n@dask.delayed\ndef dec(x):\n    time.sleep(random.random())\n    return x - 1\n\ndef add(x, y):\n    time.sleep(random.random())\n    return x + y","8c491385":"%%time\nx = inc(1)\ny = dec(2)\nz = add(x, y)\nz","db5da535":"%%time\nz.compute()","eda91c1e":"z.visualize()","ed649f35":"import os\nimport time\n\n\nimport dask\nimport dask.array as da\nimport dask.dataframe as dd\nimport numpy as np","b2023cdf":"print(dask.__version__)\nprint(np.__version__)","440fc27b":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d7ec55a7":"dtype = {\n    'fine_grained_location': 'float64', \n    'officer_id':'object', \n    'county_fips': 'float64'\n}\n\nddf = dd.read_csv(\n    \"\/kaggle\/input\/stanford-open-policing-project-texas\/TX_2010_onwards.csv\", \n#     blocksize=\"25MB\", \n    dtype=dtype, \n    low_memory=False,\n    assume_missing=True\n)\n\n# ddf = ddf.map_partitions(cudf.from_pandas)  # convert pandas partitions into cudf partitions\n\nddf","1ba169f6":"%%time\nddf.head()","dccc6d6b":"ddf.map_partitions(len).compute()","1e9b0a2f":"%%time\nddf.map_partitions(type).compute()","0f87bf8f":"%%time\nlen(ddf)","53905f4e":"%%time\nddf.shape[0].compute()","60ad8005":"ddf_rows = ddf.shape[0].compute()\nddf_col = ddf.shape[1]\nprint(f\"Number of rows: {ddf_rows}\")\nprint(f\"Number of columns: {ddf_col}\")","cca6c85a":"%%time\n(ddf.isna().sum().compute() \/ ddf_rows) * 100","927e8274":"columns = [\n    'police_department', 'driver_age_raw', 'driver_age', 'search_type_raw', \n    'search_type', 'is_arrested'\n]\nprint(f\"Number of columns before removing columns: {ddf.shape[1]}\")\n\nddf = ddf.drop(columns, axis=1)\n\nprint(f\"Number of columns After removing columns: {ddf.shape[1]}\")","45e8acc3":"(ddf.isna().sum().compute() \/ ddf_rows) * 100","187b13ee":"print(ddf_rows)\nddf = ddf.dropna(how='any')\nprint(ddf.shape[0].compute())","9421aefb":"(ddf.isna().sum().compute() \/ ddf_rows) * 100","3bd80aaf":"# print(ddf.shape[0].compute())\n# ddf = ddf.drop_duplicates()\n# print(ddf.shape[0].compute())","043b00ec":"# print(ddf.shape[0].compute())\n# ddf = ddf.drop_duplicates(subset=['id'])\n# print(ddf.shape[0].compute())","35709c3d":"ddf['id'].nunique().compute()","ce679417":"non_object_col = ddf.columns[(ddf.dtypes != object) & (ddf.dtypes != bool)].to_list()","2b27b536":"ddf[non_object_col]","61962ebe":"ddf.info()","fd8c4a33":"# Describe shows only numerical columns\nddf[non_object_col].describe(percentiles=[.25, .5, .75, .85, .9]).compute()","a7007b66":"# for column in ddf.columns:\n#     print(f\"{column}: Number of unique values {ddf[column].nunique().compute()}\")\n#     print(\"_______________________________________________\\n\")","40f8ea02":"ddf.columns","19ce3525":"ddf['contraband_found'].value_counts().compute()","635526a0":"ddf['stop_outcome'].value_counts().compute()","e434798e":"ddf['driver_race'].value_counts().compute()","acab7459":"ddf['driver_gender'].value_counts().compute()","ec1ec2b9":"ddf['state'].value_counts().compute()","1b8a6e6e":"# State contains only one value\nddf = ddf.drop('state', axis=1)","1134745d":"ddf['county_name'].value_counts().compute()","2b74ed36":"montgomery = ddf[ddf['county_name'].str.contains('Montgomery')]\nmontgomery_county_fips = montgomery.groupby('driver_race').driver_gender.agg(['count'])","7887547b":"montgomery.groupby('driver_race').driver_gender.count().compute()","ccf00c83":"# montgomery_county_fips.visualize()","fefa37f7":"# montgomery_county_fips.compute()","c8c4bb3d":"import numpy as np\nimport dask.array as da","8357ccce":"a_np = np.arange(1, 50, 3)\na_np","0fbbc19d":"a_da = da.arange(1, 50, 3, chunks=5)\na_da","b57f8e26":"print(a_da.dtype)\nprint(a_da.shape)","8571b2af":"a_da.visualize()","c184b088":"(a_da ** 2).visualize()","c4e6bf2d":"print(a_da.chunks)\nprint(a_da.chunksize)","17eccb7c":"x = da.random.random(20, chunks=5)\nx","23aea6c3":"result = x.sum()\nresult","88084a8c":"result.visualize()","fd378410":"result.compute()","022962e0":"x = da.random.random(size=(15, 15), chunks=(10, 5))\nx","157fe76b":"print(x.chunks)\nprint(x.chunksize)","0cb85b4d":"result = (x + x.T).sum()\nresult","bdee6059":"result.visualize()","a99f3614":"result.compute()","6ef47a23":"x = da.random.random(size=(20_000, 20_000), chunks=(2_000, 2_000))\nx","e15b5939":"result = (x + x.T).sum()\nresult","c478060b":"result.compute()","c30a3179":"# Reading Dask DataFrame\n\nRead CSV files into a Dask.DataFrame: This parallelizes the `pandas.read_csv()`:\n- `blocksize=25e7`: 250MB chunks\n- `dtype`: Dask don't explore all the data, sometime it mismatch the dtypes","09b0ec4b":"# Dask DataFrame Shape","9666bf4b":"# Drop Columns","47d8234e":"# Dask Arrays","41089498":"# Drop Rows","40be710d":"# Analysing some columns","bc4ba21a":"# Missing Values","16298357":"# Dask natively scales Python\n\nDask provides advanced parallelism for analytics, enabling performance at scale for the tools you love","229198af":"# Dask DataFrame info","c38da3fe":"# What is this Dask Dataframe?\nA large, virtual dataframe divided along the index into multiple Pandas dataframes:","773ab525":"# Dask Delayed\n\nThese functions do simple operations like add two numbers together, but they sleep for a random amount of time to simulate real work.","f7baac6b":"# Drop_duplicates Rows"}}