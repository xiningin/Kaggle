{"cell_type":{"8723afa0":"code","d311c3ee":"code","64333646":"code","99fd5114":"code","26ca26e6":"code","52a9f0ed":"code","bd8a6fd7":"code","554af971":"code","d7da4333":"code","add3623b":"code","bc0c3119":"code","e9284d62":"code","77d7847b":"markdown"},"source":{"8723afa0":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom pandas import read_csv\nimport seaborn as sns\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d311c3ee":"# \u00d6ncelikle veriyi okuyoruz\nitem_categories=pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\nitems=pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\nsales_train=pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\nsample_submission=pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')\nshops=pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv')\ntest=pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')","64333646":"# item_cnt_day alan\u0131 ve  item_price alan\u0131 s\u0131f\u0131rdan k\u00fc\u00e7\u00fck olamaz bu sebeple veriyi yeniden d\u00fczenliyoruz\nsales_train = sales_train[sales_train['item_cnt_day']>0]\nsales_train = sales_train[sales_train['item_price']>0]\n\n#Verilere bakt\u0131\u011f\u0131mda verilerin ili\u015fkisel veri tabanlar\u0131 gibi tasarlanm\u0131\u015f olduklar\u0131n\u0131 g\u00f6rd\u00fcm bu sebeple veriyi birle\u015ftiriyoruz\ntrain_full = pd.merge(sales_train, items, how='left', on=['item_id','item_id'])\ntrain_full = pd.merge(train_full, item_categories, how='left', on=['item_category_id','item_category_id'])\ntrain_full = pd.merge(train_full, shops, how='left', on=['shop_id','shop_id'])\ntrain_full['total_price']=train_full['item_price']*train_full['item_cnt_day']\n\n#Tarihin date verisi olarak alg\u0131lanmas\u0131 i\u00e7in ayarlar\u0131 yap\u0131yoruz\ntrain_full['date'] = pd.to_datetime(train_full['date'], format='%d.%m.%Y')\ntrain_full['month'] = train_full['date'].dt.month\ntrain_full['year'] = train_full['date'].dt.year\ntrain_full['day'] = train_full['date'].dt.day","99fd5114":"train_full.tail()","26ca26e6":"train_full.head()","52a9f0ed":"train_full.info()\n#Verilerimizi tek bir dataframede toparlad\u0131k","bd8a6fd7":"# Buradaki grafikle hangi aylarda en fazla sat\u0131\u015f yap\u0131ld\u0131\u011f\u0131n\u0131 g\u00f6rebilmekteyiz\nplt.figure(figsize=(35,10))\nsns.countplot(x='date_block_num', data=train_full);\nplt.xlabel('Aylar')\nplt.ylabel('Sat\u0131\u015flar')\nplt.title('Aylara g\u00f6re Sat\u0131\u015flar')\nplt.show()","554af971":"#Hangi ma\u011fazalar\u0131n ne kadarl\u0131k sat\u0131\u015f yapt\u0131klar\u0131n\u0131 buradan g\u00f6rebilmekteyiz.\nsales_total_price = pd.DataFrame(train_full.groupby(['shop_id'])['total_price'].sum().reset_index())\nplt.figure(figsize=(35,10))\nplt.xlabel('Ma\u011faza ID')\nplt.ylabel('Toplam Kazan\u00e7')\nplt.title('Ma\u011fazalar\u0131n Aylara g\u00f6re Toplam Kazan\u00e7lar\u0131')\nsns.barplot(x=\"shop_id\", y=\"total_price\", data=sales_total_price , order=sales_total_price['shop_id'])\nplt.show()","d7da4333":"#Hangi ma\u011fazalar\u0131n ka\u00e7ar adet sat\u0131\u015f yapt\u0131klar\u0131n\u0131 buradan g\u00f6rebilmekteyiz.\nsales_total = pd.DataFrame(train_full.groupby(['shop_id'])['item_cnt_day'].sum().reset_index())\nplt.figure(figsize=(35,10))\nplt.xlabel('Ma\u011faza ID')\nplt.ylabel('Toplam Sat\u0131\u015f Say\u0131s\u0131')\nplt.title('Ma\u011fazalar\u0131n Aylara g\u00f6re Toplam Sat\u0131\u015flar\u0131')\nsns.barplot(x=\"shop_id\", y=\"item_cnt_day\", data=sales_total , order=sales_total_price['shop_id'])\nplt.show()","add3623b":"train_full = train_full[['date_block_num','shop_id','item_id','total_price','item_category_id','item_cnt_day']]\ntrain_full","bc0c3119":"from keras.models import Sequential\nfrom keras.layers import Dense\n\n\n\nX = train_full.iloc[:, :5]  \ny = train_full.iloc[:, 5:6]  \n\nmodel = Sequential()\nmodel.add(Dense(32, input_dim=5, activation='relu'))   \nmodel.add(Dense(16, activation='relu'))                \nmodel.add(Dense(1, activation='sigmoid'))            \n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])   \n\nmodel.fit(X, y, epochs=5)  \n_, accuracy = model.evaluate(X, y)\nprint('Accuracy: %.2f' % (accuracy*100))","e9284d62":"from keras.utils.vis_utils import plot_model\n\nplot_model(model, to_file='pima_model_plot.png', \n           show_shapes=True, show_layer_names=True)\n\npima_model_plot=plt.imread(\"pima_model_plot.png\")\nplt.figure(figsize=(12,10))\nplt.xticks([])\nplt.yticks([])\nplt.imshow(pima_model_plot)\nplt.show()","77d7847b":"    ID - an Id that represents a (Shop, Item) tuple within the test set\n    shop_id - unique identifier of a shop\n    item_id - unique identifier of a product\n    item_category_id - unique identifier of item category\n    item_cnt_day - number of products sold. You are predicting a monthly amount of this measure\n    item_price - current price of an item\n    date - date in format dd\/mm\/yyyy\n    date_block_num - a consecutive month number, used for convenience. January 2013 is 0, February 2013 is 1,..., October 2015 is 33\n    item_name - name of item\n    shop_name - name of shop\n    item_category_name - name of item category\n    month - month\n    day - day\n    year - year"}}