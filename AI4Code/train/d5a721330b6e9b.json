{"cell_type":{"0fc585d6":"code","118d80b8":"code","4d42fdad":"code","d875607e":"code","2803777e":"code","b477e976":"code","82c301f9":"code","94a7fa2a":"code","6bd69da8":"code","b416de53":"code","1bc1e107":"code","d4c83b8e":"code","dee399ca":"code","c1b52d03":"code","9776cf81":"code","5483600c":"code","bfa6ad00":"code","4e45dcbc":"code","0d2355af":"code","8f5cd149":"code","a73eb273":"code","e52cb553":"code","2b598d4d":"code","6e410c28":"code","68d7e292":"code","6975d8ec":"code","8832d8e6":"code","4d9ff011":"code","f7c4f211":"code","f94cc5a3":"code","f5fffb38":"code","20e3fc12":"code","50de8773":"code","51aa6aed":"code","7c35034f":"code","a5b5547c":"code","06b730d2":"code","f8dc1652":"code","cec84663":"code","5dfc8745":"code","af471b2f":"code","450edfa3":"code","25212259":"code","ddd0d229":"code","6cae9702":"code","4ca21a01":"code","70e1cbd1":"code","ee360572":"code","9ae3c4d0":"code","46a14f92":"code","f2985381":"code","90126ed5":"code","65f4af05":"code","a2471cd2":"code","6a9593e4":"code","8542145f":"code","793d39bb":"code","dc034944":"code","07d9ff55":"code","f95cc087":"code","fd80e381":"code","da85ef8e":"code","3cc0a219":"code","ac3bce01":"code","cf9c1bab":"code","4e298eda":"code","ff46e7cf":"code","5b09fa95":"code","2f93da57":"code","52e9f3f0":"code","bd4ba041":"code","99889b99":"code","7ef3d2ad":"code","e867f92c":"code","e9673b4f":"code","84cb0d3b":"code","70c8d658":"code","5a1c8400":"code","aed0f4ad":"code","51a01ee2":"code","e6c1c8ef":"code","bbea39a1":"code","36614fc0":"code","4b6c3aeb":"code","02a5f81a":"code","5de2b401":"code","5cd725d9":"code","e37e5f99":"code","8f62d00c":"code","5f866fe1":"code","6d11cbbe":"code","c6524f0e":"code","22d28160":"code","3aee8957":"code","15853b85":"code","494eaf5b":"code","38e2c187":"code","75752748":"code","c861271e":"code","14dfb71d":"code","418266be":"code","ed67bf4a":"code","8947a02d":"code","7b844796":"code","1ecdccd9":"code","719e7730":"code","867c1d9d":"code","1337dc9f":"code","b4c2759c":"code","1492db75":"code","7fd54688":"code","4838ab54":"code","d44ce698":"code","52c228f4":"code","1b1df546":"code","603c28d6":"code","0ab86d7a":"code","236a4b4c":"code","f49f5247":"markdown","57061fc0":"markdown","b618a588":"markdown","924219da":"markdown","662d44c3":"markdown","9f07c091":"markdown","c0b0fa02":"markdown","ed8bbd54":"markdown","e85704a5":"markdown","a6611554":"markdown","1f350e06":"markdown","ce0b329f":"markdown","a7c6e741":"markdown","9a5b6c35":"markdown","ab74110c":"markdown","49b218d5":"markdown","aad6aab6":"markdown","bcbc1935":"markdown","3bd0b7ad":"markdown","d9347712":"markdown"},"source":{"0fc585d6":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","118d80b8":"df=pd.read_csv(\"..\/input\/ckdisease\/kidney_disease.csv\")","4d42fdad":"df","d875607e":"df.shape","2803777e":"col_dict={\"bp\":\"blood pressure\",\n          \"sg\":\"specific gravity\",\n          \"al\":\"albumin\",\n          \"su\":\"sugar\",\n          \"rbc\":\"red blood cells\",\n          \"pc\":\"pus cell\",\n          \"pcc\":\"pus cell clumps\",\n          \"ba\":\"bacteria\",\n          \"bgr\":\"blood glucose random\",\n          \"bu\":\"blood urea\",\n          \"sc\":\"serum creatinine\",\n          \"sod\":\"sodium\",\n          \"pot\":\"potassium\",\n          \"hemo\":\"hemoglobin\",\n          \"pcv\":\"packed cell volume\",\n          \"wc\":\"white blood cell count\",\n          \"rc\":\"red blood cell count\",\n          \"htn\":\"hypertension\",\n          \"dm\":\"diabetes mellitus\",\n          \"cad\":\"coronary artery disease\",\n          \"appet\":\"appetite\",\n          \"pe\":\"pedal edema\",\n          \"ane\":\"anemia\",\n          \"classification\":\"class\"}\n\ndf.rename(columns=col_dict, inplace=True)","b477e976":"col_dict","82c301f9":"df\n","94a7fa2a":"df.dtypes","6bd69da8":"#As it can be seen, red_blood_cell_count, packed_cell_volume and white_blood_cell_count are object type. We need to \n#change to numerical dtype.","b416de53":"def convert_dtype(df,feature):\n    df[feature] = pd.to_numeric(df[feature],errors='coerce')","1bc1e107":"features=['red_blood_cell_count','packed_cell_volume','white_blood_cell_count']\n\nfor feature in features:\n    convert_dtype(df,feature)","d4c83b8e":"df.dtypes","dee399ca":"df.drop([\"id\"],axis=1,inplace=True) ","c1b52d03":"def extract_cat_num(df):\n    cat_col=[col for col in df.columns if df[col].dtype=='object']\n    num_col=[col for col in df.columns if df[col].dtype!='object']\n    return cat_col,num_col","9776cf81":"cat_col,num_col=extract_cat_num(df)","5483600c":"cat_col","bfa6ad00":"num_col","4e45dcbc":"for col in cat_col:\n    print('{} has {} values '.format(col,df[col].unique()))\n    print('\\n')","0d2355af":"## ckd-chronic kidney disease\n## notckd-->> not crornic kidney disease","8f5cd149":"#Replace incorrect values\n\ndf['diabetes_mellitus'].replace(to_replace = {'\\tno':'no','\\tyes':'yes',' yes':'yes'},inplace=True)\n\ndf['coronary_artery_disease'] = df['coronary_artery_disease'].replace(to_replace = '\\tno', value='no')\n\ndf['class'] = df['class'].replace(to_replace = 'ckd\\t', value = 'ckd')","a73eb273":"for col in cat_col:\n    print('{} has {} values  '.format(col, df[col].unique()))\n    print('\\n')","e52cb553":"len(num_col)","2b598d4d":"plt.figure(figsize=(30,20))\nfor i,feature in enumerate(num_col):\n    plt.subplot(5,3,i+1)\n    df[feature].hist()\n    plt.title(feature)","6e410c28":"len(cat_col)","68d7e292":"plt.figure(figsize=(20,20))\nfor i,feature in enumerate(cat_col):\n    plt.subplot(4,3,i+1)\n    sns.countplot(df[feature])","6975d8ec":"sns.countplot(x='class',data=df)\nplt.xlabel(\"class\")\nplt.ylabel(\"Count\")\nplt.title(\"target Class\")","8832d8e6":"plt.figure(figsize=(10,))\ncorr_df = df.corr()\nsns.heatmap(corr_df,annot=True)","4d9ff011":"df.groupby(['red_blood_cells','class'])['red_blood_cell_count'].agg(['count','mean','median','min','max'])","f7c4f211":"!pip install plotly\nimport plotly.express as px","f94cc5a3":"px.violin(df,y='red_blood_cell_count',x=\"class\", color=\"class\")","f5fffb38":"px.scatter(df,'hemoglobin','packed_cell_volume')","20e3fc12":"### analysing distribution of 'red_blood_cell_count' in both Labels \n\ngrid=sns.FacetGrid(df, hue=\"class\",aspect=2)\ngrid.map(sns.kdeplot, 'red_blood_cell_count')\ngrid.add_legend()","50de8773":"# Defining violin and scatter plot & kde_plot functions\ndef violin(col):\n    fig = px.violin(df, y=col, x=\"class\", color=\"class\", box=True)\n    return fig.show()\n\ndef scatters(col1,col2):\n    fig = px.scatter(df, x=col1, y=col2, color=\"class\")\n    return fig.show()","51aa6aed":"def kde_plot(feature):\n    grid = sns.FacetGrid(df, hue=\"class\",aspect=2)\n    grid.map(sns.kdeplot, feature)\n    grid.add_legend()","7c35034f":"kde_plot('red_blood_cell_count')","a5b5547c":"kde_plot('hemoglobin')","06b730d2":"kde_plot('white_blood_cell_count')","f8dc1652":"scatters('red_blood_cell_count', 'packed_cell_volume')","cec84663":"scatters('hemoglobin','packed_cell_volume')","5dfc8745":"scatters('red_blood_cell_count', 'hemoglobin')","af471b2f":"violin('red_blood_cell_count')","450edfa3":"violin('packed_cell_volume')","25212259":"scatters('red_blood_cell_count','albumin')","ddd0d229":"scatters('packed_cell_volume','blood_urea')","6cae9702":"fig = px.bar(df, x=\"specific_gravity\", y=\"packed_cell_volume\",\n             color='class', barmode='group',\n             height=400)\nfig.show()","4ca21a01":"df.isna().sum().sort_values(ascending=False)","70e1cbd1":"cat_col","ee360572":"sns.countplot(df['red_blood_cells'])","9ae3c4d0":"data=df.copy()","46a14f92":"### filling missing with Random value","f2985381":"data['red_blood_cells'].isnull().sum()","90126ed5":"data['red_blood_cells'].dropna().sample()","65f4af05":"random_sample=data['red_blood_cells'].dropna().sample(data['red_blood_cells'].isnull().sum())\nrandom_sample","a2471cd2":"random_sample.index","6a9593e4":"data[data['red_blood_cells'].isnull()].index","8542145f":"random_sample.index=data[data['red_blood_cells'].isnull()].index","793d39bb":"random_sample.index","dc034944":"random_sample","07d9ff55":"data.loc[data['red_blood_cells'].isnull(),'red_blood_cells']=random_sample","f95cc087":"data.head()","fd80e381":"sns.countplot(data['red_blood_cells'])","da85ef8e":"data['red_blood_cells'].value_counts()\/len(data)","3cc0a219":"len(df[df['red_blood_cells']=='normal'])\/248","ac3bce01":"len(df[df['red_blood_cells']=='abnormal'])\/248","cf9c1bab":"### lets create a function so that I can easily do it for all features\ndef Random_value_imputation(feature):\n    random_sample=data[feature].dropna().sample(data[feature].isnull().sum())               \n    random_sample.index=data[data[feature].isnull()].index\n    data.loc[data[feature].isnull(),feature]=random_sample\n\n","4e298eda":"Random_value_imputation('pus_cell')\nRandom_value_imputation('red_blood_cells')","ff46e7cf":"data[cat_col].isnull().sum()","5b09fa95":"### as rest of the features has less missing values,so I can fill it using mode concept","2f93da57":"mode=data['pus_cell_clumps'].mode()[0]\nmode","52e9f3f0":"data['pus_cell_clumps']=data['pus_cell_clumps'].fillna(mode)","bd4ba041":"def impute_mode(feature):\n    mode=data[feature].mode()[0]\n    data[feature]=data[feature].fillna(mode)","99889b99":"for col in cat_col:\n    impute_mode(col)","7ef3d2ad":"data[cat_col].isnull().sum()","e867f92c":"data[num_col].isnull().sum()","e9673b4f":"### lets fill missing values in Numerical features using Random value Imputation","84cb0d3b":"for col in num_col:\n    Random_value_imputation(col)","70c8d658":"data[num_col].isnull().sum()","5a1c8400":"for col in cat_col:\n    print('{} has {} categories'.format(col, data[col].nunique()))","aed0f4ad":"#### as we have just 2 categories in each feature then we can consider Label Encoder as it will not cause Curse of Dimensionality","51a01ee2":"from sklearn.preprocessing import LabelEncoder","e6c1c8ef":"le = LabelEncoder()","bbea39a1":"for col in cat_col:\n    data[col]=le.fit_transform(data[col])","36614fc0":"data.head()","4b6c3aeb":"#SelectKBest-to select k best features\n#chi2-Internally this class is going to check that whether p-value is less than 0.05 or not\n#based on that,it will actually order all the features","02a5f81a":"from sklearn.feature_selection import SelectKBest#Also known as Information Gain\nfrom sklearn.feature_selection import chi2","5de2b401":"ind_col=[col for col in data.columns if col!='class']\ndep_col='class'","5cd725d9":"X=data[ind_col]\ny=data[dep_col]","e37e5f99":"ordered_rank_features=SelectKBest(score_func=chi2,k=20)\nordered_feature=ordered_rank_features.fit(X,y)","8f62d00c":"ordered_feature","5f866fe1":"#To get scores(rank) of feature,what we can do we can use scores function\nordered_feature.scores_","6d11cbbe":"datascores=pd.DataFrame(ordered_feature.scores_,columns=[\"Score\"])\ndatascores","c6524f0e":"dfcolumns=pd.DataFrame(X.columns)\ndfcolumns","22d28160":"features_rank=pd.concat([dfcolumns,datascores],axis=1)","3aee8957":"features_rank","15853b85":"#Higher the score is,more important feature is \nfeatures_rank.columns=['Features','Score']\nfeatures_rank","494eaf5b":"#fetch largest 10 values of Score column\nfeatures_rank.nlargest(10,'Score')","38e2c187":"selected_columns=features_rank.nlargest(10,'Score')['Features'].values","75752748":"X_new=data[selected_columns]","c861271e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_new,y,train_size=0.75)","14dfb71d":"print(X_train.shape)\nprint(X_test.shape)","418266be":"## check whether dataset is imbalance or not\ny_train.value_counts()","ed67bf4a":"### Lets find best model using Hyperparameter optimization","8947a02d":"!pip install xgboost\nfrom xgboost import XGBClassifier\nXGBClassifier()","7b844796":"## Hyper Parameter Optimization with respect to XGBoost\n\nparams={\n \"learning_rate\"    : [0.05, 0.20, 0.25 ] ,\n \"max_depth\"        : [ 5, 8, 10, 12],\n \"min_child_weight\" : [ 1, 3, 5, 7 ],\n \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.4 ],\n \"colsample_bytree\" : [ 0.3, 0.4, 0.7 ]\n    \n}","1ecdccd9":"from sklearn.model_selection import RandomizedSearchCV","719e7730":"from xgboost import XGBClassifier\nclassifier=XGBClassifier()","867c1d9d":"import warnings\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","1337dc9f":"random_search=RandomizedSearchCV(classifier,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)","b4c2759c":"random_search.fit(X_train, y_train)","1492db75":"random_search.best_estimator_","7fd54688":"random_search.best_params_","4838ab54":"classifier=XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.4, gamma=0.0, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.25, max_delta_step=0, max_depth=5,\n              min_child_weight=1, monotone_constraints='()',\n              n_estimators=100, n_jobs=2, num_parallel_tree=1,\n              objective='binary:logistic', random_state=0, reg_alpha=0,\n              reg_lambda=1, scale_pos_weight=1, subsample=1,\n              tree_method='exact', use_label_encoder=True,\n              validate_parameters=1, verbosity=None)\n\n## we have got this model on the basis of cross valudation & hyper-parameter optimization","d44ce698":"classifier.fit(X_train,y_train)","52c228f4":"y_pred=classifier.predict(X_test)","1b1df546":"from sklearn.metrics import confusion_matrix,accuracy_score","603c28d6":"confusion = confusion_matrix(y_test, y_pred)\nprint('Confusion Matrix:')\nprint(confusion)","0ab86d7a":"### to make confusion matrix user-friendly\nplt.imshow(confusion)","236a4b4c":"accuracy_score(y_test, y_pred)","f49f5247":"# **Random Value Imputation\u00b6**","57061fc0":"**feature Encoding**","b618a588":"1.RBC count range ~2 to <4.5 and Hemoglobin between 3 to <13 are mostly classified as positive for chronic kidney  \ndisease(i.e ckd).\n\n\n2.RBC count range >4.5 to ~6.1 and Hemoglobin between >13 to 17.8 are classified as negative for chronic kidney \ndisease(i.e nockd).","924219da":"# **Now, let's check the label distribution for categorical data**","662d44c3":"A few features have imbalanced categories. Stratified folds will be necessary while cross validation.","9f07c091":"**Positive Correlation:**\n\n* Specific gravity -> Red blood cell count, Packed cell volume and Hemoglobin\n* Sugar -> Blood glucose random\n* Blood Urea -> Serum creatinine\n* Hemoglobin -> Red Blood cell count <- packed cell volume\n\n\n**Negative Correlation:**\n\n* Albumin, Blood urea -> Red blood cell count, packed cell volume, Hemoglobin\n* Serum creatinine -> Sodium","c0b0fa02":"Let's drop the id column. id column is seems to be an unique identifier for each row so we are dropping that it won't help us to find any insights from the data","ed8bbd54":"# Model Building","e85704a5":"Observations:\n1.     Age looks a bit left skewed\n2.     Blood gluscose random is right skewed\n3.     Blood Urea is also a bit right skewed\n4.     Rest of the features are lightly skewed    ","a6611554":"# **CORRELATION**","1f350e06":"Clearly, specific gravity >=1.02 affects non ckd","ce0b329f":"Clearly, albumin levels of above 0 affect ckd largely","a7c6e741":"Packed cell volume >= 40 largely affects to be non ckd","9a5b6c35":"*total unique categories in our categorical features to check if any dirtiness in data or not*","ab74110c":"So we need to correct 2 features and the target variable which contain certain discrepancy in some values.","49b218d5":"# **Now let's check for negative correlation and its impact on classes**\n\nAlbumin, Blood urea -> Red blood cell count, packed cell volume, Haemoglobin","aad6aab6":"**Feature Importance**","bcbc1935":"# **Checking features distribution**","3bd0b7ad":"# **Extract Numerical & Categorical Features**","d9347712":"    Both distributions are quite different, distribution CKD is quite normal and evenly distributed but not CKD distribution is a little bit left-skewed but quite close to a normal distribution"}}