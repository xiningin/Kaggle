{"cell_type":{"d4bd20b6":"code","7e16acab":"code","f4f0a7ec":"code","97be51c8":"code","c19f853e":"code","15f469ae":"code","208ccd3f":"code","cdf955cf":"code","e9ce0121":"code","e482c240":"code","18cdb76b":"code","2ad63ff7":"code","078db094":"code","7711cbb4":"code","e61d36cb":"code","cb19ac50":"code","31f9467a":"code","57b8109f":"code","421df6c6":"code","a641e945":"code","b8fc3f17":"code","ae35dfa9":"code","8eeffd48":"code","8e56db74":"code","4d6b2440":"code","6731a218":"code","10812389":"code","f2261568":"code","8305a057":"code","d6328916":"code","164c7afc":"code","e08ed507":"code","8a279eaa":"code","cd2968e4":"code","0e25dd45":"code","e3d2f16f":"code","d30ae2c2":"code","a34b6c69":"code","5f9d476f":"code","8d090b55":"code","d15bcea8":"code","7f0906fc":"code","7e3e85c5":"code","41e77778":"code","9f50670e":"code","ee7c97c4":"code","3d2ea475":"code","35755d63":"code","8f0e9e1f":"code","4a9abe11":"code","e490d908":"code","5ef5d2f0":"code","44349a19":"code","c5f6ce34":"code","0ae4ec55":"code","8c910f8a":"markdown","9906e833":"markdown","3aaabb63":"markdown","5916562b":"markdown","7a5871c3":"markdown","d43a2606":"markdown","0b2774c2":"markdown","9451da65":"markdown","92fb593f":"markdown","ab850178":"markdown","8a824355":"markdown","9ab831d4":"markdown","35058ff6":"markdown","34cd61a4":"markdown","a2e987bd":"markdown","d5addc0e":"markdown","7603e7e0":"markdown"},"source":{"d4bd20b6":"import os\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom xgboost import XGBClassifier","7e16acab":"path='..\/input\/av-healthcare-analytics-ii\/healthcare'\ntrain_orig=pd.read_csv(os.path.join(path,'train_data.csv'))\ntest_orig=pd.read_csv(os.path.join(path,'test_data.csv'))\nsubm=pd.read_csv(os.path.join(path,'sample_sub.csv'))","f4f0a7ec":"for col in test_orig.columns:\n    print(\"{}:\\ntrain dataset:{}\\ntest dataset:{}\".format(col,train_orig[col].nunique(),test_orig[col].nunique()))\n    print(\"=======================================\")","97be51c8":"test_orig.isna().sum()","c19f853e":"train_orig.isna().sum()","15f469ae":"train_orig['Admission_Deposit'].describe()","208ccd3f":"test_orig['Admission_Deposit'].describe()","cdf955cf":"train_orig.head()","e9ce0121":"test_orig.head()","e482c240":"train_orig.info()","18cdb76b":"print(train_orig['Stay'].unique())\nprint(f\"\\nTotal number of target values:{train_orig['Stay'].nunique()}\")","2ad63ff7":"data= pd.concat([train_orig,test_orig],sort=False)","078db094":"data.isna().sum()","7711cbb4":"data.info()","e61d36cb":"for col in data.columns:\n    print(\"{}:{}\".format(col,data[col].nunique()))\n    print(\"=======================================\")\n    \n# Hence case_id is unique for every row","cb19ac50":"categorical_col=[]\nfor col in data.columns:\n    if data[col].dtype== object and data[col].nunique()<=50:\n        categorical_col.append(col)\nprint(categorical_col)","31f9467a":"for col in categorical_col:\n    print(f\"{col}:\\n{data[col].value_counts()}\")\n    print(\"=======================================\")","57b8109f":"data.groupby(['Hospital_region_code','Ward_Facility_Code']).size()","421df6c6":"data['Hospital_region_code_FEAT_Ward_Facility_Code']= data['Hospital_region_code']+'_'+data['Ward_Facility_Code']","a641e945":"data.groupby(['Hospital_type_code','Hospital_code']).size()","b8fc3f17":"data['Hospital_code']= data['Hospital_code'].apply(lambda x: str(x))\ndata['Hospital_type_code_FEAT_Hospital_code']= data['Hospital_type_code']+'_'+data['Hospital_code']\ndata['Hospital_code']= data['Hospital_code'].apply(lambda x: int(x))","ae35dfa9":"data.groupby(['Hospital_type_code','Hospital_region_code']).size()","8eeffd48":"data['Hospital_type_code_FEAT_Hospital_region_code']= data['Hospital_type_code']+'_'+data['Hospital_region_code']","8e56db74":"data.groupby(['Hospital_region_code','City_Code_Hospital']).size()","4d6b2440":"data['City_Code_Hospital']= data['City_Code_Hospital'].apply(lambda x: str(x))\ndata['Hospital_region_code_FEAT_City_Code_Hospital']= data['Hospital_region_code']+'_'+data['City_Code_Hospital']\ndata['City_Code_Hospital']= data['City_Code_Hospital'].apply(lambda x: int(x))","6731a218":"data.groupby(['Bed Grade','Ward_Facility_Code']).size()","10812389":"data['Visitors with Patient'].unique()","f2261568":"data['City_Code_Patient'].unique()","8305a057":"data['Stay'].value_counts()","d6328916":"data['prev_hosp_code']= data['Hospital_code'].shift(1,axis=0)\ndata['prev_patientid']= data['patientid'].shift(1,axis=0)\ndata['prev_hosp_code'].fillna(0,inplace=True)\ndata['prev_patientid'].fillna(31397,inplace=True)","164c7afc":"def fxy(prev_hosp_code,hosp_code,prev_patientid,patientid):\n    if ((prev_patientid-patientid==0)&(prev_hosp_code-hosp_code==0))==True:\n        return 1\n    else:\n        return 0\ndata['patient_visiting_consecutive']= data.apply(lambda x: fxy(x['prev_hosp_code'],x['Hospital_code'],\n                                                               x['prev_patientid'],x['patientid']),axis=1)","e08ed507":"data['patient_visiting_consecutive'].value_counts()","8a279eaa":"data.head().T","cd2968e4":"data.drop(['case_id','patientid','Stay','prev_hosp_code','prev_patientid'],axis=1,inplace=True)","0e25dd45":"categorical_col=[]\nfor col in data.columns:\n    if data[col].dtype== object and data[col].nunique()<=50:\n        categorical_col.append(col)\nprint(categorical_col)","e3d2f16f":"le= LabelEncoder()","d30ae2c2":"for col in categorical_col:\n    data[col]= le.fit_transform(data[col])","a34b6c69":"#Filling null values\ndata['City_Code_Patient'].fillna(data['City_Code_Patient'].median(),inplace=True)\ndata['Bed Grade'].fillna(-1,inplace=True)","5f9d476f":"train_new= data[:len(train_orig)]\ntest_new= data[len(train_orig):]","8d090b55":"y_le= LabelEncoder()\n\ny= y_le.fit_transform(train_orig['Stay'])","d15bcea8":"check=pd.concat([train_new,pd.DataFrame(data=y,columns=['Stay'])],axis=1)","7f0906fc":"check.corr()['Stay'].sort_values()","7e3e85c5":"y_le.classes_","41e77778":"\nX_train, X_test, y_train, y_test = train_test_split(train_new, y, test_size=0.2, random_state=101)","9f50670e":"model = XGBClassifier(base_score=0.5, booster=None, colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.6, gamma=0.1, gpu_id=-1,\n              importance_type='gain', interaction_constraints=None,\n              learning_rate=0.0300000012, max_delta_step=0, max_depth=8,\n              min_child_weight=3, monotone_constraints=None,\n              n_estimators=500, n_jobs=0, num_class=11, num_parallel_tree=1,\n              objective='multi:softprob', random_state=0, reg_alpha=0.1,\n              reg_lambda=1, scale_pos_weight=None, subsample=0.6,\n              tree_method=None, validate_parameters=False, verbosity=None)","ee7c97c4":"model.fit(X_train,y_train)","3d2ea475":"pred= model.predict(X_test)","35755d63":"print(classification_report(pred,y_test))","8f0e9e1f":"from xgboost import plot_importance\n\nplot_importance(model);","4a9abe11":"testset_pred= model.predict(test_new)","e490d908":"testset_pred= list(y_le.inverse_transform(testset_pred))","5ef5d2f0":"subm.head()","44349a19":"final_subm= pd.DataFrame(data= testset_pred,index=subm['case_id'],columns=['Stay'])","c5f6ce34":"final_subm.to_csv('final_subm_new.csv')","0ae4ec55":"df= pd.read_csv('final_subm_new.csv')\ndf.head()","8c910f8a":"# Importing libraries and Loading the Data","9906e833":"# Problem Statement\nRecent Covid-19 Pandemic has raised alarms over one of the most overlooked area to focus: Healthcare Management. While healthcare management has various use cases for using data science, patient length of stay is one critical parameter to observe and predict if one wants to improve the efficiency of the healthcare management in a hospital.\n\nThis parameter helps hospitals to identify patients of high LOS risk (patients who will stay longer) at the time of admission. Once identified, patients with high LOS risk can have their treatment plan optimized to miminize LOS and lower the chance of staff\/visitor infection. Also, prior knowledge of LOS can aid in logistics such as room and bed allocation planning.\n\nSuppose you have been hired as Data Scientist of HealthMan \u2013 a not for profit organization dedicated to manage the functioning of Hospitals in a professional and optimal manner. The task is to accurately predict the Length of Stay for each patient on case by case basis so that the Hospitals can use this information for optimal resource allocation and better functioning. The length of stay is divided into 11 different classes ranging from 0-10 days to more than 100 days.\n\nEvaluation Metric : **100*accuracy score**\n\n* Public Leaderboard: 42.917% (Rank 57)\n* Private Leaderboard: 42.74% (Rank 53)\n\n[Link To the Leaderboard](https:\/\/datahack.analyticsvidhya.com\/contest\/janatahack-healthcare-analytics-ii\/#LeaderBoard)","3aaabb63":"## Got 43% accuracy on Validation set.","5916562b":"# Model Building- XGBoost","7a5871c3":"**Generating a feature for Hospital_region_code_FEAT_Ward_Facility_Code because particular ward_Facility_Code corresponds to particular Hospital_region_code**","d43a2606":"## Imputing Missing Values","0b2774c2":"**Number of unique values for each column in train and test dataset**","9451da65":"> from sklearn.model_selection import RandomizedSearchCV\n> \n> param_dist = {'n_estimators': [100,500],'learning_rate': [0.03,0.1],'max_depth': [5,8],'subsample':[i\/10.0 for i in range(6,8)],'colsample_bytree':[i\/10.0 for i in range(6,8)],'min_child_weight': [1,3]}","92fb593f":"**Generating a feature for Hospital_type_code_FEAT_Hospital_Code because particular Hospital_Code corresponds to particular Hospital_type_code**","ab850178":"## Feature Preprocessing and Feature Generation","8a824355":"**Dropping unnecessary columns from the data**","9ab831d4":"## Label Encoding all the Categorical Features.","35058ff6":"## Prediction on Test set \n## Got an accuracy of 42.917% on Public leaderboard.","34cd61a4":"model_tuning= RandomizedSearchCV(estimator = model, param_distributions=param_dist,verbose = 1, n_jobs =-1, n_iter = 5)","a2e987bd":"**Concatenating train and test data for further inspection**","d5addc0e":"**Generating a feature which tells if particular patient has visited the same hospital again.**","7603e7e0":"## Checking correlation of features with the target Column."}}