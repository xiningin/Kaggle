{"cell_type":{"808416b5":"code","b8c46d4c":"code","4c52e30d":"code","53e9dd27":"markdown","e6bb9f13":"markdown","a1050eb7":"markdown","2ddc1312":"markdown"},"source":{"808416b5":"# example of defining composite models for the progressive growing gan\nfrom numpy import expand_dims\nfrom numpy import zeros\nfrom numpy import ones\nfrom numpy import vstack\nfrom numpy.random import randn\nfrom numpy.random import randint\nfrom keras.optimizers import Adam\nfrom keras.models import Sequential\nfrom keras.models import Model\nfrom keras.layers import Input\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\nfrom keras.layers import Activation\nfrom keras.layers import Reshape\nfrom keras.layers import Conv2D\nfrom keras.layers import UpSampling2D\nfrom keras.layers import AveragePooling2D\nfrom keras.layers import LeakyReLU\nfrom keras.layers import BatchNormalization\nfrom keras.layers import Add\nfrom keras.utils.vis_utils import plot_model\nfrom keras import backend\nfrom skimage.transform import resize\nimport matplotlib.pyplot as pyplot\nimport sys\n\n\n# weighted sum output\nclass WeightedSum(Add):\n\t# init with default value\n\tdef __init__(self, alpha=0.0, **kwargs):\n\t\tsuper(WeightedSum, self).__init__(**kwargs)\n\t\tself.alpha = backend.variable(alpha, name='ws_alpha')\n\n\t# output a weighted sum of inputs\n\tdef _merge_function(self, inputs):\n\t\t# only supports a weighted sum of two inputs\n\t\tassert (len(inputs) == 2)\n\t\t# ((1-a) * input1) + (a * input2)\n\t\toutput = ((1.0 - self.alpha) * inputs[0]) + (self.alpha * inputs[1])\n\t\treturn output\n\ndef load_real_samples():\n\t# load Vaporarray dataset\n\tX = np.load('..\/input\/vaporarray\/test.out.npy')\n\treturn X\n\ndef generate_real_samples(dataset, n_samples):\n\t# choose random instances\n\tix = randint(0, dataset.shape[0], n_samples)\n\t# retrieve selected images\n\tX = dataset[ix]\n\t# generate 'real' class labels (1)\n\ty = np.random.uniform(low=0.8, high=1, size=(n_samples,1))\n\treturn X, y\n\n# generate points in latent space as input for the generator\ndef generate_latent_points(latent_dim, n_samples):\n\t# generate points in the latent space\n\tx_input = randn(latent_dim * n_samples)\n\t# reshape into a batch of inputs for the network\n\tx_input = x_input.reshape(n_samples, latent_dim)\n\treturn x_input\n\n# use the generator to generate n fake examples, with class labels\ndef generate_fake_samples(g_model, latent_dim, n_samples):\n\t# generate points in latent space\n\tx_input = generate_latent_points(latent_dim, n_samples)\n\t# predict outputs\n\tX = g_model.predict(x_input)\n\t# create 'fake' class labels (0)\n\ty = zeros((n_samples, 1))\n\treturn X, y\n\n# create and save a plot of generated images\ndef save_plot(examples, epoch, n=7):\n\t# plot images\n\texamples\n\tfor i in range(n * n):\n\t\t# define subplot\n\t\tpyplot.subplot(n, n, 1 + i)\n\t\t# turn off axis\n\t\tpyplot.axis('off')\n\t\t# plot raw pixel data\n\t\tpyplot.imshow(examples[i])\n\t# save plot to file\n\tfilename = 'vaporwave_e%03d.png' % (epoch+1)\n\tpyplot.savefig(filename)\n\tpyplot.close()\n    \n# evaluate the discriminator, plot generated images, save generator model\ndef summarize_performance(epoch, g_model, d_model, dataset, latent_dim, n_samples=150):\n\t# prepare fake examples\n\tx_fake, y_fake = generate_fake_samples(g_model, latent_dim, n_samples)\n\t# save plot\n\tsave_plot(x_fake, epoch)\n\t# save the generator model tile file\n\tfilename = 'generator_model_%03d.h5' % (epoch+1)\n\tg_model.save(filename)\n\n# add a discriminator block\ndef add_discriminator_block(old_model, n_input_layers=3):\n\t# get shape of existing model\n\tin_shape = list(old_model.input.shape)\n\t# define new input shape as double the size\n\tinput_shape = (in_shape[-2].value*2, in_shape[-2].value*2, in_shape[-1].value)\n\tin_image = Input(shape=input_shape)\n\t# define new input processing layer\n\td = Conv2D(64, (1,1), padding='same', kernel_initializer='he_normal')(in_image)\n\td = LeakyReLU(alpha=0.2)(d)\n\t# define new block\n\td = Conv2D(64, (3,3), padding='same', kernel_initializer='he_normal')(d)\n\td = BatchNormalization()(d)\n\td = LeakyReLU(alpha=0.2)(d)\n\td = Conv2D(64, (3,3), padding='same', kernel_initializer='he_normal')(d)\n\td = BatchNormalization()(d)\n\td = LeakyReLU(alpha=0.2)(d)\n\td = AveragePooling2D()(d)\n\tblock_new = d\n\t# skip the input, 1x1 and activation for the old model\n\tfor i in range(n_input_layers, len(old_model.layers)):\n\t\td = old_model.layers[i](d)\n\t# define straight-through model\n\tmodel1 = Model(in_image, d)\n\t# compile model\n\tmodel1.compile(loss='mse', optimizer=Adam(lr=0.0004, beta_1=0, beta_2=0.99, epsilon=10e-8))\n\t# downsample the new larger image\n\tdownsample = AveragePooling2D()(in_image)\n\t# connect old input processing to downsampled new input\n\tblock_old = old_model.layers[1](downsample)\n\tblock_old = old_model.layers[2](block_old)\n\t# fade in output of old model input layer with new input\n\td = WeightedSum()([block_old, block_new])\n\t# skip the input, 1x1 and activation for the old model\n\tfor i in range(n_input_layers, len(old_model.layers)):\n\t\td = old_model.layers[i](d)\n\t# define straight-through model\n\tmodel2 = Model(in_image, d)\n\t# compile model\n\tmodel2.compile(loss='mse', optimizer=Adam(lr=0.0004, beta_1=0, beta_2=0.99, epsilon=10e-8))\n\treturn [model1, model2]\n\n# define the discriminator models for each image resolution\ndef define_discriminator(n_blocks, input_shape=(4,4,3)):\n\tmodel_list = list()\n\t# base model input\n\tin_image = Input(shape=input_shape)\n\t# conv 1x1\n\td = Conv2D(64, (1,1), padding='same', kernel_initializer='he_normal')(in_image)\n\td = LeakyReLU(alpha=0.2)(d)\n\t# conv 3x3 (output block)\n\td = Conv2D(128, (3,3), padding='same', kernel_initializer='he_normal')(d)\n\td = BatchNormalization()(d)\n\td = LeakyReLU(alpha=0.2)(d)\n\t# conv 4x4\n\td = Conv2D(128, (4,4), padding='same', kernel_initializer='he_normal')(d)\n\td = BatchNormalization()(d)\n\td = LeakyReLU(alpha=0.2)(d)\n\t# dense output layer\n\td = Flatten()(d)\n\tout_class = Dense(1)(d)\n\t# define model\n\tmodel = Model(in_image, out_class)\n\t# compile model\n\tmodel.compile(loss='mse', optimizer=Adam(lr=0.0004, beta_1=0, beta_2=0.99, epsilon=10e-8))\n\t# store model\n\tmodel_list.append([model, model])\n\t# create submodels\n\tfor i in range(1, n_blocks):\n\t\t# get prior model without the fade-on\n\t\told_model = model_list[i - 1][0]\n\t\t# create new model for next resolution\n\t\tmodels = add_discriminator_block(old_model)\n\t\t# store model\n\t\tmodel_list.append(models)\n\treturn model_list\n\n# add a generator block\ndef add_generator_block(old_model):\n\t# get the end of the last block\n\tblock_end = old_model.layers[-2].output\n\t# upsample, and define new block\n\tupsampling = UpSampling2D()(block_end)\n\tg = Conv2D(64, (3,3), padding='same', kernel_initializer='he_normal')(upsampling)\n\tg = BatchNormalization()(g)\n\tg = LeakyReLU(alpha=0.2)(g)\n\tg = Conv2D(64, (3,3), padding='same', kernel_initializer='he_normal')(g)\n\tg = BatchNormalization()(g)\n\tg = LeakyReLU(alpha=0.2)(g)\n\t# add new output layer\n\tout_image = Conv2D(3, (1,1), padding='same', kernel_initializer='he_normal')(g)\n\t# define model\n\tmodel1 = Model(old_model.input, out_image)\n\t# get the output layer from old model\n\tout_old = old_model.layers[-1]\n\t# connect the upsampling to the old output layer\n\tout_image2 = out_old(upsampling)\n\t# define new output image as the weighted sum of the old and new models\n\tmerged = WeightedSum()([out_image2, out_image])\n\t# define model\n\tmodel2 = Model(old_model.input, merged)\n\treturn [model1, model2]\n\n# define generator models\ndef define_generator(latent_dim, n_blocks, in_dim=4):\n\tmodel_list = list()\n\t# base model latent input\n\tin_latent = Input(shape=(latent_dim,))\n\t# linear scale up to activation maps\n\tg  = Dense(128 * in_dim * in_dim, kernel_initializer='he_normal')(in_latent)\n\tg = Reshape((in_dim, in_dim, 128))(g)\n\t# conv 4x4, input block\n\tg = Conv2D(128, (3,3), padding='same', kernel_initializer='he_normal')(g)\n\tg = BatchNormalization()(g)\n\tg = LeakyReLU(alpha=0.2)(g)\n\t# conv 3x3\n\tg = Conv2D(128, (3,3), padding='same', kernel_initializer='he_normal')(g)\n\tg = BatchNormalization()(g)\n\tg = LeakyReLU(alpha=0.2)(g)\n\t# conv 1x1, output block\n\tout_image = Conv2D(3, (1,1), padding='same', kernel_initializer='he_normal', activation = 'sigmoid')(g)\n\t# define model\n\tmodel = Model(in_latent, out_image)\n\t# store model\n\tmodel_list.append([model, model])\n\t# create submodels\n\tfor i in range(1, n_blocks):\n\t\t# get prior model without the fade-on\n\t\told_model = model_list[i - 1][0]\n\t\t# create new model for next resolution\n\t\tmodels = add_generator_block(old_model)\n\t\t# store model\n\t\tmodel_list.append(models)\n\treturn model_list\n\n# define composite models for training generators via discriminators\ndef define_composite(discriminators, generators):\n\tmodel_list = list()\n\t# create composite models\n\tfor i in range(len(discriminators)):\n\t\tg_models, d_models = generators[i], discriminators[i]\n\t\t# straight-through model\n\t\td_models[0].trainable = False\n\t\tmodel1 = Sequential()\n\t\tmodel1.add(g_models[0])\n\t\tmodel1.add(d_models[0])\n\t\tmodel1.compile(loss='mse', optimizer=Adam(lr=0.0001, beta_1=0, beta_2=0.99, epsilon=10e-8))\n\t\t# fade-in model\n\t\td_models[1].trainable = False\n\t\tmodel2 = Sequential()\n\t\tmodel2.add(g_models[1])\n\t\tmodel2.add(d_models[1])\n\t\tmodel2.compile(loss='mse', optimizer=Adam(lr=0.0001, beta_1=0, beta_2=0.99, epsilon=10e-8))\n\t\t# store\n\t\tmodel_list.append([model1, model2])\n\treturn model_list\n\n# define models\ndiscriminators = define_discriminator(6)\n# define models\ngenerators = define_generator(100, 6)\n# define composite models\ncomposite = define_composite(discriminators, generators)","b8c46d4c":"# update the alpha value on each instance of WeightedSum\ndef update_fadein(models, step, n_steps):\n\t# calculate current alpha (linear from 0 to 1)\n\talpha = step \/ float(n_steps - 1)\n\t# update the alpha for each model\n\tfor model in models:\n\t\tfor layer in model.layers:\n\t\t\tif isinstance(layer, WeightedSum):\n\t\t\t\tbackend.set_value(layer.alpha, alpha)\n                \n# train a generator and discriminator\ndef train_epochs(g_model, d_model, gan_model, dataset, n_epochs, n_batch, fadein=False):\n\t# calculate the number of batches per training epoch\n\tbat_per_epo = int(dataset.shape[0] \/ n_batch)\n\t# calculate the number of training iterations\n\tn_steps = bat_per_epo * n_epochs\n\t# calculate the size of half a batch of samples\n\thalf_batch = int(n_batch \/ 2)\n\t# manually enumerate epochs\n\tfor i in range(n_steps):\n\t\t# update alpha for all WeightedSum layers when fading in new blocks\n\t\tif fadein:\n\t\t\tupdate_fadein([g_model, d_model, gan_model], i, n_steps)\n\t\t# prepare real and fake samples\n\t\tX_real, y_real = generate_real_samples(dataset, half_batch)\n\t\tX_fake, y_fake = generate_fake_samples(g_model, latent_dim, half_batch)\n\t\t# update discriminator model\n\t\td_loss1 = d_model.train_on_batch(X_real, y_real)\n\t\td_loss2 = d_model.train_on_batch(X_fake, y_fake)\n\t\t# update the generator via the discriminator's error\n\t\tz_input = generate_latent_points(latent_dim, n_batch)\n\t\ty_real2 = ones((n_batch, 1))\n\t\tg_loss = gan_model.train_on_batch(z_input, y_real2)\n        \n# scale images to preferred size\ndef scale_dataset(images, new_shape):\n\timages_list = list()\n\tfor image in images:\n\t\t# resize with nearest neighbor interpolation\n\t\tnew_image = resize(image, new_shape, 0)\n\t\t# store\n\t\timages_list.append(new_image)\n\treturn np.asarray(images_list)\n\n# train the generator and discriminator\ndef train(g_models, d_models, gan_models, dataset, latent_dim, e_norm, e_fadein, n_batch):\n\t# fit the baseline model\n\tg_normal, d_normal, gan_normal = g_models[0][0], d_models[0][0], gan_models[0][0]\n\t# scale dataset to appropriate size\n\tgen_shape = g_normal.output_shape\n\tscaled_data = scale_dataset(dataset, gen_shape[1:])\n\tprint('Scaled Data', scaled_data.shape)\n\t# train normal or straight-through models\n\ttrain_epochs(g_normal, d_normal, gan_normal, scaled_data, e_norm, n_batch)\n\t# process each level of growth\n\tfor i in range(1, len(g_models)):\n\t\t# retrieve models for this level of growth\n\t\t[g_normal, g_fadein] = g_models[i]\n\t\t[d_normal, d_fadein] = d_models[i]\n\t\t[gan_normal, gan_fadein] = gan_models[i]\n\t\t# scale dataset to appropriate size\n\t\tgen_shape = g_normal.output_shape\n\t\tscaled_data = scale_dataset(dataset, gen_shape[1:])\n\t\tprint('Scaled Data', scaled_data.shape)\n\t\t# train fade-in models for next level of growth\n\t\ttrain_epochs(g_fadein, d_fadein, gan_fadein, scaled_data, e_fadein, n_batch, True)\n\t\t# train normal or straight-through models\n\t\ttrain_epochs(g_normal, d_normal, gan_normal, scaled_data, e_norm, n_batch)\n\t\tsummarize_performance(i, g_normal, d_normal, dataset, latent_dim)","4c52e30d":"import numpy as np\n# number of growth phase, e.g. 3 = 16x16 images, 6 = 128x128 images\nn_blocks = 7\n# size of the latent space\nlatent_dim = 100\n# define models\nd_models = define_discriminator(n_blocks)\n# define models\ng_models = define_generator(100, n_blocks)\n# define composite models\ngan_models = define_composite(d_models, g_models)\n# load image data\ndataset = load_real_samples()\n# train model\ntrain(g_models, d_models, gan_models, dataset, latent_dim, 200, 200, 8)","53e9dd27":"**Fade-in\/-out**\n\nThis is a crucially part of building the model, where the different layers of the progression are merged into one training model.","e6bb9f13":"**Training the Model**\n\nNo we start training the model, taking a snapshopt for each completed block (e.g. 4x4, 8x8,...).","a1050eb7":"#Versioning Comments\n\nV1-V9:\n\nI mainly tried out the model and upped the epoch and block size to their target values of 6 blocks (128x128 images) and 100 epochs. The outcome is very interesting but mode collapse remains a problem. So after these version I used different learning rates for the discriminator and generator.\n\nV10-12:\n\nI also added label smoothing and corrected an issue in the production of the sample images.\n\nV15:\nIntroducing sigmoid function","2ddc1312":"**Builing a proGAN to generate Vaporwave Images**\n\nBuilding of https:\/\/www.kaggle.com\/fnguyen\/vaporgan, I try to get better performance by using a more modern architecture. So instead of using dcGAN I will now build a progressive GAN.\n\n**Dataset**\n\nThe training data has been sourced from r\/VaporwaveArt subreddit and provides us with 909 images that have been resized to 128x128 pixel images and converted to arrays using PIL.\n"}}