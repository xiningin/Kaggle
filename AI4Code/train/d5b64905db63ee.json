{"cell_type":{"8a2b730f":"code","caecc55f":"code","b5b232c1":"code","055d627f":"code","9e5369c7":"code","12728172":"code","9bac6a44":"code","a6c5d877":"code","e117561a":"code","ac694047":"code","0f797348":"code","b653aec9":"code","edb1eed0":"code","73ea697b":"code","2cc063e4":"code","c2f469a7":"code","a11883ab":"code","aa1d075e":"code","4731d5e3":"code","42b32147":"code","8c22f82f":"code","6ce2f1a5":"code","28197307":"code","2104a5b4":"code","95b4aa91":"code","efe6010a":"code","80c22bc4":"code","a1062358":"code","f1b43ab7":"code","f378120c":"code","8a70a599":"code","5b13af88":"code","81f70091":"code","605a0297":"code","48ef0d48":"markdown","8bc1d3c4":"markdown","e2c93262":"markdown","4920aa58":"markdown","6b06bd33":"markdown","0809429f":"markdown","22649b34":"markdown","ef8636d6":"markdown","1350c26d":"markdown","324d978a":"markdown","c496542c":"markdown","a824c886":"markdown","a3c34a9a":"markdown","291863af":"markdown","dd33c9e2":"markdown","aebc9a2a":"markdown","ca62e129":"markdown","bc9a1806":"markdown","a68bf2fb":"markdown","d346e978":"markdown","c6cdbb7d":"markdown","fb279e9d":"markdown","f3c0fffe":"markdown","2b15447e":"markdown","d54fc12e":"markdown","33d848e9":"markdown","5b7b543f":"markdown","bdc6e705":"markdown"},"source":{"8a2b730f":"import warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport pandas_datareader as web\nplt.style.use('seaborn-darkgrid')\nplt.rc('figure', figsize=(18,8))\nplt.rc('lines', markersize=4)\nplt.rc('font', size=18)\n!rm -rf .\/logs\/\n%load_ext tensorboard\nfrom sklearn.datasets import fetch_openml\nimport tensorflow as tf\nfrom tensorflow import keras","caecc55f":"intel = web.DataReader('INTC', data_source='yahoo', start='2012-01-01', end='2019-12-31')\nintel","b5b232c1":"plt.title('Intel Stock Price ($)')\nplt.xlabel('Open Stock Price ($)')\nplt.ylabel('Close Stock Price ($)')\nplt.scatter(intel['Open'],intel['Close'])\nplt.show()","055d627f":"plt.title('Intel Stock Price ($)')\nplt.xlabel('Years')\nplt.ylabel('Close Stock Price ($)')\nplt.plot(intel['Close'])\nplt.show()","9e5369c7":"intel = intel[['Close']]\nintel.head()","12728172":"futuredays = 50","9bac6a44":"intel['prediction'] = intel[['Close']].shift(-futuredays)\nintel","a6c5d877":"x = np.array(intel.drop(['prediction'], 1))[:-futuredays]\nx","e117561a":"y =np.array(intel['prediction'])[:-futuredays]\ny","ac694047":"from sklearn.model_selection import train_test_split\nx_train,x_test, y_train,y_test = train_test_split(x,y, test_size=0.25)","0f797348":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor","b653aec9":"linear = LinearRegression().fit(x_train, y_train)","edb1eed0":"tree = DecisionTreeRegressor().fit(x_train,y_train)","73ea697b":"x_future = intel.drop(['prediction'], 1)[:-futuredays]\nx_future = x_future.tail(futuredays)\nx_future = np.array(x_future)\nx_future","2cc063e4":"linear_prediction = linear.predict(x_future)","c2f469a7":"tree_prediction = tree.predict(x_future)","a11883ab":"predictions = linear_prediction\nvalid = intel[x.shape[0]:]\nvalid[\"Predictions\"] = predictions\nplt.title(\"Intel Stock Price Prediction Model(Linear Regression Model)\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Close Price USD ($)\")\nplt.plot(intel[\"Close\"])\nplt.plot(valid[[\"Close\", \"Predictions\"]])\nplt.legend([\"Original\", \"Valid\", \"Predictions\"])\nplt.show()","aa1d075e":"predictions = tree_prediction\nvalid = intel[x.shape[0]:]\nvalid[\"Predictions\"] = predictions\nplt.title(\"Intel Stock Price Prediction Model(Decision Tree Regressor Model)\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Close Price USD ($)\")\nplt.plot(intel[\"Close\"])\nplt.plot(valid[[\"Close\", \"Predictions\"]])\nplt.legend([\"Original\", \"Valid\", \"Predictions\"])\nplt.show()","4731d5e3":"plt.title('Intel Stock Price in Future($) by Linear')\nplt.xlabel('Futuredays Days')\nplt.ylabel('Close Stock Price($)')\nplt.plot(linear_prediction)","42b32147":"plt.title('Intel Stock Price in Future($) by Tree')\nplt.xlabel('Futuredays Days')\nplt.ylabel('Close Stock Price($)')\nplt.plot(tree_prediction)","8c22f82f":"sns.pairplot(intel)","6ce2f1a5":"sns.distplot(linear_prediction)","28197307":"sns.distplot(tree_prediction)","2104a5b4":"intel.corr()","95b4aa91":"sns.heatmap(intel)","efe6010a":"from sklearn import datasets, linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score","80c22bc4":"regr = linear_model.LinearRegression()","a1062358":"regr.fit(x_train,y_train)","f1b43ab7":"y_pred = regr.predict(x_test)","f378120c":"print('coefficient: \\n', regr.coef_)","8a70a599":"print('Mean squared Erroe: %2f' % mean_squared_error(y_test, y_pred))","5b13af88":"print('Coefficient of determination: %.2f' % r2_score(x_test, y_pred))","81f70091":"plt.scatter(x_test, y_test, color='blue')\nplt.plot(x_test, y_pred, color='red', linewidth=3)","605a0297":"from mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x_test, y_test, marker='.', color='blue')\nax.set_xlabel(\"X1\")\nax.set_ylabel(\"X2\")\nax.set_zlabel(\"y\")\nplt.plot(x_test, y_pred, color='red', linewidth=1)","48ef0d48":"**FIT IN THE LINE**","8bc1d3c4":"**PLOT CLOSING PRICE IN LINE PLOT**","e2c93262":"**PRINT PREDICTED VALUE OF FUTUREDAYS**","4920aa58":"**MEAN SQUARED ERROR  \"ERROR IN LINE PREDICTED**","6b06bd33":"**CREATE SEPERATE DATAFRAME OF CLOSE PRICE**","0809429f":"**DISTRIBUTION PLOT OF TREE**","22649b34":"**IMPORT DATA FROM 2012 TO 2020**","ef8636d6":"**PAIRPLOT PREDICTION**","1350c26d":"**CREATE PREDICTED VALUE OF 2012 TO 2020 VALUE**","324d978a":"**SHIFT FUTUREDAYS IN DATAFRAME**","c496542c":"**IMPORT LINEAR AND TREE REGRESSOR**","a824c886":"**PLOT TREE MODEL IN LINE PLOT**","a3c34a9a":"**IMPORT ALL PACKAGES**","291863af":"**PLOT LINEAR REGRESSION**","dd33c9e2":"**PLOT LINEAR REGRESSION IN 3D**","aebc9a2a":"![OIP.jpg](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wBDAAsJCQcJCQcJCQkJCwkJCQkJCQsJCwsMCwsLDA0QDBEODQ4MEhkSJRodJR0ZHxwpKRYlNzU2GioyPi0pMBk7IRP\/2wBDAQcICAsJCxULCxUsHRkdLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCz\/wAARCAC0AQgDASIAAhEBAxEB\/8QAGwAAAgMBAQEAAAAAAAAAAAAAAAECAwYEBQf\/xABIEAACAQMDAAcDBwYKCwAAAAAAAQIDBBEFEiEGEzFBUXF0NWGyFCIyNJGxsxVzgZOhwxYjJERScsHR0uElQlRVY2SEkqLw8f\/EABsBAAMBAQEBAQAAAAAAAAAAAAECAwQABgUH\/8QAKxEAAwACAgEDAgYCAwAAAAAAAAECAxEEEhMFITEjQSQ0YXGBkTLBUfDx\/9oADAMBAAIRAxEAPwCfPiHPiAcnp2jEmHPiHPiHICtDphlhz4gArQ6Ychl+IATaKKg58Q5ABSiYc+Ic+IAI0UTDnxDL8Rcj5EaKJhl+IZYAI0UVBl+I+fEXIxGiioOQ58QAm0OqDLDLAZNlFYZfiHIJEiTRVWLnxDL94wJNFVkDnxDnxAZCkaJyBl+IZAZJyaFlFlhkMDwTclFmBN5XIAlygF6lFmKOQ5GI9\/1PzFUGRiwMVodUAciyMRooqAAARodUAAAjkqqAAARodUABgBGiioBgBNofuAAArQysB4ESJtDKxJDwAyTkdWAwSGSaG8gh4AaJNDrILAYHgZJyWWUWAwPAYEclFmFyGB4HgTqHziSAklygF6j+c5QAD3zk8GqAP8gAVyOqAAARyUVAAAT6lFQAACuSisYAAjkdUAABNyOrAAAn1G7gNBgBHIe4xgBNo7yBgeAQybQfIA0h4GScneUWB4JICTQfMRwPBLAYJudhWYjhjSeSSHgTqN5yIYZLaG0Vyd5xJcoCSXKAXoHznAADPeuTy\/YQDARoqqEMAEcjqgAAFcjqwwBaqFw0mqcsNZXZ2MjOFSGFOLi2srPeibQZzS3pMgAAK5LKwAAJNDdwAYm4rtaXm0vvEaG7EgEpQfClFv3NDJuTu4x4QiSJuRXYDSAZNyL5B4JYEjptbS4vKvUW8YyqbJTxKSitsWk+X5kWtfIPJt6RRgeD05aFrFOE5zo0VGEZTk1Wi8KKy+Dz15EvZ\/B1VU\/5IikPBJIeBGhPMRwGCW0eBWgeYiGCeECQvU7zEUuUBYlyvMAdTvMeUAAe8aPlKgDAD\/uRNyOqEMYsCOSioBDAXQ6o9amv4un\/AFI\/ccd99Ol\/UfxEIx1GUYyp0ryUGltcKVZxa7nFpYwV1Y3EXHr41oyazFVozi8Z7UprsI7T9kZcPGrHk7srAtVvdySlG2uZRksxcaFVxkvFNRwQnTq0nirTqU3jdirCUHjxxNJ4E2n7Jn0k2kRA6KNjqVxHfQs7qrDunClLY\/KUsIVezvrZZuLW4ox\/pVKclH\/uxt\/aT7RvWx9Vreig0XRSnSq3eoKpThNK2pNKcVJJuo+zKM6aPoj9c1H0tH8RmflrWGiuB\/UR72sW9rDS9SlChRjJW82pRpwTXZ2NIwGT6LrKlLS9SjGMpSdvNKMIuUm+OElyfPpULmCcp29xCKxmVSjUhFZ4WXJJGHgvcvb+5XlezWiBJEUTipTkoQjKc32QpxlKT8oxWTe0Yewd5NHTHTNXaz+T7vHvpNP7HyUTp1qMtlanUpz5+bVhKD\/QpIg+r9kxK7L3aBHs9HPaa9NX++B4yPa6O+0l6av98DPmldGdgv6sr9TWXX1W79PW+Bnz9LheSPoF19Wu\/T1vgZgorheSMmBezNXqNa6\/yJIeCSQ8F3J8nykcDwSwh4F6i+QhtHgkkPArk7ykUuUBJLlAL1B5TxQGkGD3JFMAQwA0UTAAARoZUAvEYCOSio+jaP7K0n0dD4EZrpa\/5bZr\/k\/3kjS6P7J0n0dD4UZrpb9dtPR\/vJHluGvxf8s+9yH+H\/o02k+y9K9FbfAiuvpNpdahTvrmKq9TQhSo0ZrNNSU5TdSSfa+eP\/cWaT7M0r0Vt+Gjyek+o17alQtLebhO5U51pweJKlFqO2LXPL7fL3mSIu8ziPl7LVUzjVV9j3Xc2cZ9U7i3VRPHVurBSz4bW8lrjGScZJNNNNPlNPuaZ8pwvBfYjXdFL+vVVzY1ZymqMIVqDk25Rg5bZQy+5cY8zVyfTnhjuq3olh5ayV1a0cfSLR6NnsvbWGyhUnsrU19GnN8qUV4Pw7n58S6IfXNR9LS\/EZpNYpRraXqkH3WtSos\/0qa6xP8AYZrog\/5bqXpaX4jHjJWTiX2+wlQozzr7m0PH6Rtfki75X07fv\/4sS\/W\/ZOqemn\/YfOc45fmR4XG8r77+GPys\/jXXXyj0tL02vqdx1UG4UaeJXFVJPZF9kY5\/1n3fb7nu7OwsrCmqVrRjBY+dLtqTfjOb5bOTQLSNrpdpwlUuIK6rPvcqqUkn5LC\/Qef0hqazWq\/I7S1u3bKEXVnRhJqtKXO3cu5eHj5AzZHyMvRPSFxwsGPu1tnvO7sVLY7q2U08bXWp7s+GM5JVqFtc03Tr0oVaclnE0mvNM+fLTNW\/3dd\/qWe5ob1q1uKdvXtbtWdXdF9bCW2jLDakm+xPsfmDJxVE9ovYMfLd11qGtnHq2ky0+pGpTbla1ZNQb5lTl27Jv7n\/AHc29HvaUfTV\/vgae\/to3dndUJLLlTk4e6pFbov7TMdHfaUfTV\/vgNGTyYa38oyZcKxcmOvw2ay5+rXX5it8DMGuxeSN5c\/Vrr8xW+BmFiuzyE4q3sT1Z6cfz\/oaRLAYGanJ8PsGB4GMXQvYWPcGCQxdA7CUeUBJdq8wO0B2eAAwPZFhAMABTEMAOYyYCGArHTPouj+ytJ9HQ+FGa6W\/XrP0f7yRpdH9laV6Sh8KM10t+u2fo\/3kjyfC\/O\/yz0XJ\/Lf0abSfZmleitvgRl+l3tC09FH8WZqNJ9l6V6K2+BGX6W+0LX0UPxagOD+b\/sPJ9uP\/AEZw0PRL2ldein+LAzzNB0Rf+krn0M\/xaZ9vnL8Pf7HzuM\/qya7UvZ2qehuvwpGV6Hv+Waj6Wj+IzVan7N1X0N3+FIxfRS4jS1R05PHym1qUo++cJKol9mT4fGl1xcuv0PpZnrPBrdb9kar6af8AYfNnypLxUl9qPq1ejTuaFe3qc061OdKeOHtksPBh9T6N1dNtq938sjVpUpU0ouk4ze+agstSa7\/Ar6ZnxwnFP3b9iXNxXWqn7Gz0+caljp84\/RlaW7Xl1aKLvWdKsqzt7mtKFVRjPHVVZLbLsacYtHk9FNShVtnp9SSVa23Sopv6dBvOF74v9mD0dX0ahqsKct\/VXNJNUquMpxfO2ce9fp+\/nDWKcedxm9kaVkq8SrF8kf4R6C\/51L9RW\/wj\/hDoX+0y\/UVv8JnH0X1yMtqdnKOfpddNLHjhwyetYdGKFHNS\/nG4qOLiqcE40YZ4zz85vwfHkaMmHiQtq2\/+\/sZYy8unrql+\/wD6d35f0R\/ziX6mt\/hPD6Pe0\/8Ap7j4oFWq6PU05qrTmp2s57Yb2lUhJ87Wu\/zX\/wBs6O+0o+mr\/fAqsOOcFXje9ox3my3yIjKtaZrbn6tdfmK3wMwsexeRurn6tdfmK3wMxFGnUq4UI5wk2+ElnxbIcL4rZ3rCbcJfr\/oaJIJRnB7ZJp8P9D5TTQI29Tz72vYkGBZGK5F2NDyIfAvUBJdq8wBdq8wB1OZnxDA9YadgAAcEAAeDgiAeBAHTNbYdIdKtbGxt6nyjrKFvTpT20sx3RWHh7jx9e1C11K4t6tt1m2nb9XLrI7Xu3uXCyzyRM+fi9PxYsnlnezdfMyZI8b+DX2PSLSbaysbep8p30belSntpJx3Qik8PceJr+oWupXVCtbdZshbxpS6yO17lOUuFl+J5LItgw+n48WTyzvY1cu8kdH8CbPV0DUbTTLyvcXPWbJ20qMeqhve5zjLsyvA8hsTZry4VlhxXwxMduGqRtrzpRo1ezvqFNXXWVravShuopR3Tg4rL3GKp1KlKpTq05yhUpyjOE48OMovKaKxNkuPwsfHTmfff\/JbLnrK06+xtLLpjQ6uEb+3qRqpJSqWyjOE347G019rI630g0i+0y5trerVdepKg4xnRnFYjUjJ5k1j9pjGxbiC9JwzayTtaKPmZHPVl9OtVo1KdWlOUKlOSlTnBtSjJd6ZrbDphDbGGo0ZbksddbJNS98qbefsf6DF7g3GjkcLFyF9REMea8L3LPpceknR6Uc\/LMcdjo18\/ZsOS56WadTi1a06tefc5rqqfm3L53\/iYJSZYpHz16Phl7bbK36jl1paPTu9Qu7+r1txPLWdkI8U6afdCJ2aNe0LK8VxX37OpqU\/mR3PdJxa4z7jxIyLoyNN8aXj8aWkfM81TkWX5ZtavSDS6tGvTirjdOlUhHdSSWZRaWfnHiWlaFLiWMrMouSlKDbg6bU1HnHPH+Z5sJe8vjLsMM8KMacr7nZ+bky0qrXsdletGrPKcmlu+dLCcnKcpvhd3PBBNFKfvHkdYlK0jFVOntl2UPJTkakDxil2R5RTvHv8AeL0AXp8oClTXAA8YrPGAAPQmoAAABTGhiQwhExDYjtDITExsiwDkX2EGTkythRRCZBsk2VtlEiiBsg5A2QbHUj62S3EMkWyLkOoDosyPcU7hbw9ANHTvRJTOXc+0kp9gHjJOTtjMujM4IzLYzI1iIUj0IT95fGoedGoXRqGesRBo74zJqZxxqE1PsIPEI0dW73j3+85t495PxA0dG4e45941MHjO0dKlyvMChS5XIA8YDjAAPobKgPgEGDgoYABwUAhkWFDITIvvJMhI4dEGRG2QbKJFURkyuTJSZW2USKSRbINg2QbLKSqQmyLkJsg2VUj6JORHcQciLkUUnaLd4KZTuFvG8Yrk6lNlsahwqZZGfvFeMz1J6EZlsahwRqF0ZmesRCpO+NQsUzhjP3lqqEHiJtHYpkt5xqoySn7yTxC6OveSUjkVQkqgrxi6OxSXAHOp9gCeMGiYDAARB3AxHbCPICAKGQA32AJhGIsi2SZCQyHRFlcn3E2VSZWUVRBlbZORVJl5RWSLKpE5FUmWlFkiLZXJjkyDZdIokLJFsTfvINllI+iWRZ4IiyhtAaJpk1IpySTC5I2jpjItjI5VIsjIk4MtI61MsjPuOSMixSIuCLR1qZJTZzKT7hqbJOBTqUiW85lLge8m4FOpT5QHOpcoAdANHsYQYQAfOJiaQtqAAhDah7UADIZCwiLSAADEWitoAKIdEGu0rkkAFpKoqkippcgBoktJVJIrkAFoLyVSK5ABoRVEGQaQAVQwn3CwgAojn8BhcDwgA4jRJLksXAAKzJRNd3kWIAIsjRZHvJpABJikooYATYo4rLivFoAAVjI\/\/9k=)","ca62e129":"**SET LINEAR AND TREE PREDICT IN LINEAR,TREE PREDICTION VARIABLE**","bc9a1806":"**PLOT LINEAR MODEL IN LINE PLOT**","a68bf2fb":"**DROP FUTUREDAYS IN NUMPY ARRAY**","d346e978":"**CREATE FUTUREDAYS 50**","c6cdbb7d":"**DISTRIBTION PLOT OF LINEAR**","fb279e9d":"**IMPORT SKLEARN MODEL**","f3c0fffe":"**PLOT OPEN AND CLOSE STOCK DATA IN SCATTER PLOT**","2b15447e":"**IMPORT SKLEARN PACKAGES, MSE,R2_SCORE AND READY TO CREATE 3D MODEL**","d54fc12e":"**STOCK PRICE ON FUTURE DAYS**","33d848e9":"**ACCURACY OF LINE FITTED**","5b7b543f":"**IT PREDICTED NEARBY VALUES**","bdc6e705":"**COMPARE ACTUAL AND PREDICTED**"}}