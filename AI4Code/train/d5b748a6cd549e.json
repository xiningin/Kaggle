{"cell_type":{"9e976bd6":"code","560b5841":"code","e60b8ce6":"code","389c158e":"code","1dfa64d4":"code","880dcb6e":"code","67d0ce78":"code","f96522da":"code","8ce1a664":"code","eb917a0f":"code","a8ba8dd3":"code","7673da8a":"code","a811e0f6":"code","3709a3b9":"code","24fc0b2e":"code","020bc943":"code","9e97d20a":"code","3bc59704":"code","c9beb06e":"code","a4ff4779":"code","980ab47e":"code","f7b7684d":"code","0fe76ef5":"code","5f564e75":"code","b0529311":"code","425b175d":"code","3564df8f":"code","ce91a759":"code","b7452f11":"code","129249b9":"code","a02c1e17":"code","0238d051":"markdown","34cb6b28":"markdown","3d11f0f3":"markdown","154d61a6":"markdown","e2456532":"markdown","cc839560":"markdown","29604a30":"markdown","4b48ba6d":"markdown","76f44958":"markdown","5e4444f5":"markdown","f758c8f8":"markdown","934e4f00":"markdown","47b26b2c":"markdown","2be45d54":"markdown","9d62b38a":"markdown","0ebdf11a":"markdown","723437ee":"markdown","8e94c626":"markdown","96dbee7e":"markdown","b1add225":"markdown","28f2c235":"markdown","d82a713e":"markdown","987c6697":"markdown"},"source":{"9e976bd6":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns","560b5841":"import io\ntrain=pd.read_csv('..\/input\/ipl\/matches.csv')\ntrain.info()","e60b8ce6":"train.dtypes","389c158e":"train.isnull().sum()","1dfa64d4":"# checking whether there is any null value in the winner col\ntrain[pd.isnull(train['winner'])]","880dcb6e":"# Filling the null values as Tie\ntrain['winner'].fillna('Draw',inplace=True)","67d0ce78":"# checking the null values in the city col\ntrain[pd.isnull(train['city'])]","f96522da":"# Filling the null cities as Dubai\ntrain['city'].fillna('Dubai',inplace=True)\ntrain.describe()","8ce1a664":"# Let us get some basic stats #\nprint(\"Number of matches played so far : \", train.shape[0])\nprint(\"Number of seasons : \", len(train.season.unique()))\n","eb917a0f":"sns.countplot(x='season', data=train)\nplt.show()","a8ba8dd3":"plt.figure(figsize=(12,6))\nsns.countplot(x='venue', data=train)\nplt.xticks(rotation='vertical')\nplt.show()","7673da8a":"\ntemp = pd.melt(train, id_vars=['id','season'], value_vars=['team1', 'team2'])\n\nplt.figure(figsize=(12,6))\nsns.countplot(x='value', data=temp)\nplt.xticks(rotation='vertical')\nplt.show()","a811e0f6":"plt.figure(figsize=(12,6))\nsns.countplot(x='winner', data=train)\nplt.xticks(rotation='vertical')\nplt.show()","3709a3b9":"champ = train.drop_duplicates(subset=['season'], keep='last')[['season', 'winner']].reset_index(drop=True)\nchamp","24fc0b2e":"toss = train.toss_decision.value_counts()\nlabels = (np.array(toss.index))\nsizes = (np.array((toss \/ toss.sum())*100))\ncolors = ['gold', 'lightskyblue']\nplt.pie(sizes, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title(\"Toss decision percentage\")\nplt.show()","020bc943":"plt.figure(figsize=(12,6))\nsns.countplot(x='season', hue='toss_decision', data=train)\nplt.xticks(rotation='vertical')\nplt.show()","9e97d20a":"num_of_wins = (train.win_by_wickets>0).sum()\nnum_of_loss = (train.win_by_wickets==0).sum()\nlabels = [\"Wins\", \"Loss\"]\ntotal = float(num_of_wins + num_of_loss)\nsizes = [(num_of_wins\/total)*100, (num_of_loss\/total)*100]\ncolors = ['gold', 'lightskyblue']\nplt.pie(sizes, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title(\"Win percentage batting second\")\nplt.show()","3bc59704":"train[\"field_win\"] = \"win\"\ntrain[\"field_win\"].loc[train['win_by_wickets']==0] = \"loss\"\nplt.figure(figsize=(12,6))\nsns.countplot(x='season', hue='field_win', data=train)\nplt.xticks(rotation='vertical')\nplt.show()","c9beb06e":"mom = train.player_of_match.value_counts()[:10]\nlabels = np.array(mom.index)\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots()\nrects = ax.bar(ind, np.array(mom), width=width, color='y')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Most number of M.O.M\")\nplt.show()","a4ff4779":"ump = pd.melt(train, id_vars=['id'], value_vars=['umpire1', 'umpire2'])\n\nump = ump.value.value_counts()[:10]\nlabels = np.array(ump.index)\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots()\nrects = ax.bar(ind, np.array(ump), width=width, color='r')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Top Umpires\")\nplt.show()","980ab47e":"train['toss_winner_is_winner'] = 'no'\ntrain['toss_winner_is_winner'].loc[train.toss_winner == train.winner] = 'yes'\nresult = train.toss_winner_is_winner.value_counts()\n\nlabels = (np.array(result.index))\nsizes = (np.array((result \/ result.sum())*100))\ncolors = ['gold', 'lightskyblue']\nplt.pie(sizes, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title(\"Toss winner is match winner\")\nplt.show()","f7b7684d":"plt.figure(figsize=(12,6))\nsns.countplot(x='toss_winner', hue='toss_winner_is_winner', data=train)\nplt.xticks(rotation='vertical')\nplt.show()","0fe76ef5":"scores = pd.read_csv('..\/input\/ipl\/deliveries.csv')","5f564e75":"runs = scores.groupby('batsman')['batsman_runs'].agg('sum').reset_index().sort_values(by='batsman_runs', ascending=False).reset_index(drop=True)\nruns = runs.iloc[:10,:]\n\nlabels = np.array(runs['batsman'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots()\nrects = ax.bar(ind, np.array(runs['batsman_runs']), width=width, color='blue')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Top run scorers in IPL\")\nplt.show()","b0529311":"boundaries = scores.groupby('batsman')['batsman_runs'].agg(lambda x: (x==4).sum()).reset_index().sort_values(by='batsman_runs', ascending=False).reset_index(drop=True)\nboundaries = boundaries.iloc[:10,:]\n\nlabels = np.array(boundaries['batsman'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots()\nrects = ax.bar(ind, np.array(boundaries['batsman_runs']), width=width, color='green')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Batsman with most number of boundaries.!\")\nplt.show()","425b175d":"\nsixes = scores.groupby('batsman')['batsman_runs'].agg(lambda x: (x==6).sum()).reset_index().sort_values(by='batsman_runs', ascending=False).reset_index(drop=True)\nsixes = sixes.iloc[:10,:]\n\nlabels = np.array(sixes['batsman'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots()\nrects = ax.bar(ind, np.array(sixes['batsman_runs']), width=width, color='m')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Batsman with most number of sixes.!\")\nplt.show()","3564df8f":"dots = scores.groupby('batsman')['batsman_runs'].agg(lambda x: (x==0).sum()).reset_index().sort_values(by='batsman_runs', ascending=False).reset_index(drop=True)\ndots = dots.iloc[:10,:]\n\nlabels = np.array(dots['batsman'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots()\nrects = ax.bar(ind, np.array(dots['batsman_runs']), width=width, color='c')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Batsman with most number of dot balls.!\")\nplt.show()","ce91a759":"balls = scores.groupby('bowler')['ball'].agg('count').reset_index().sort_values(by='ball', ascending=False).reset_index(drop=True)\nballs = balls.iloc[:10,:]\n\nlabels = np.array(balls['bowler'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots()\nrects = ax.bar(ind, np.array(balls['ball']), width=width, color='cyan')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Top Bowlers - Number of balls bowled in IPL\")\nplt.show()","b7452f11":"dots1 = scores.groupby('bowler')['total_runs'].agg(lambda x: (x==0).sum()).reset_index().sort_values(by='total_runs', ascending=False).reset_index(drop=True)\ndots1 = dots1.iloc[:10,:]\n\nlabels = np.array(dots1['bowler'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots()\nrects = ax.bar(ind, np.array(dots1['total_runs']), width=width, color='yellow')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Top Bowlers - Number of dot balls bowled in IPL\")\nplt.show()","129249b9":"extras = scores.groupby('bowler')['extra_runs'].agg(lambda x: (x>0).sum()).reset_index().sort_values(by='extra_runs', ascending=False).reset_index(drop=True)\nextras = extras.iloc[:10,:]\n\nlabels = np.array(extras['bowler'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots()\nrects = ax.bar(ind, np.array(extras['extra_runs']), width=width, color='magenta')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Bowlers with more extras in IPL\")\nplt.show()\n","a02c1e17":"plt.figure(figsize=(12,6))\nsns.countplot(x='dismissal_kind', data=scores)\nplt.xticks(rotation='vertical')\nplt.show()","0238d051":"# Most COMMON Dismissals","34cb6b28":"# Toss Decision for each season","3d11f0f3":"# Most Number of balls bowled","154d61a6":"# Most Number of Extras","e2456532":"# Season wise Batting Second Win percentage","cc839560":"# Most Runs","29604a30":"# DATA Preprocessing","4b48ba6d":"# Champions for Each Season","76f44958":"# TOSS decision - Bat\/ Field","5e4444f5":"# No. of matched played in each season","f758c8f8":"# Which Team won the most after winning Toss","934e4f00":"# Players who won M.O.M the most","47b26b2c":"# No. of macthes played by each Team","2be45d54":"# Most Dot Balls","9d62b38a":"# No. of matches played in each Venue","0ebdf11a":"# Most 6's","723437ee":"# Most DOt balls bowled","8e94c626":"# Umpires Most Appearances","96dbee7e":"# Teams Won While Chasing","b1add225":"# Now Goin through the Delivery Dataset","28f2c235":"# No. of wins per each Team","d82a713e":"# Most Boundaries","987c6697":"# Results after Winning the Toss\n"}}