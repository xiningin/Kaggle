{"cell_type":{"db962c02":"code","f1142e26":"code","561ab701":"code","f2c06d9c":"code","2026e6d0":"code","f8a8a844":"code","11a5104b":"code","923050e2":"code","7acbb5fb":"code","5711ec1a":"code","8606cc23":"code","5974f754":"code","27f8993f":"code","9f34f059":"code","d87d2e61":"code","f883b2d1":"code","81c23224":"code","aa12ad3d":"code","3b930e21":"code","9c7bddb3":"code","ff6b6b2f":"code","a75c0b1b":"code","faf0089f":"code","58fe1f17":"markdown","80a91967":"markdown","838984cf":"markdown","29b1b263":"markdown","91305f61":"markdown","647f7b81":"markdown","f2193c57":"markdown","98ed1d14":"markdown","97d293a0":"markdown"},"source":{"db962c02":"import numpy as np\nimport pandas as pd\n\nimport plotly.express as px\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import f1_score, recall_score, precision_score, plot_confusion_matrix, accuracy_score\n\nfrom lightgbm import LGBMClassifier\n\nimport matplotlib.pyplot as plt\n\nimport optuna\nfrom optuna.samplers import TPESampler","f1142e26":"df = pd.read_csv('\/kaggle\/input\/passenger-list-for-the-estonia-ferry-disaster\/estonia-passenger-list.csv')\ndf.head()","561ab701":"for col in df.columns:\n    print(col, str(round(100* df[col].isnull().sum() \/ len(df), 2)) + '%')","f2c06d9c":"df.describe()","2026e6d0":"data = df['Country'].value_counts().reset_index()\n\ndata.columns = [\n    'Country', \n    'Passengers'\n]\n\nfig = px.bar(\n    data, \n    x='Country', \n    y='Passengers', \n    orientation='v', \n    title='Number of Passengers by country', \n    width=800,\n    height=600\n)\n\nfig.show()","f8a8a844":"data = df['Sex'].value_counts().reset_index()\ndata.columns = [\n    'Sex', \n    'Passengers'\n]\n\nfig = px.pie(\n    data, \n    values='Passengers', \n    names='Sex', \n    title='Number of Passengers by gender', \n    width=500, \n    height=500\n)\n\nfig.show()","11a5104b":"data = df['Category'].value_counts().reset_index()\n\ndata.columns = [\n    'Category', \n    'Passengers'\n]\n\nfig = px.pie(\n    data, \n    values='Passengers', \n    names='Category', \n    title='Number of Passengers by category', \n    width=500, \n    height=500\n)\n\nfig.show()","923050e2":"data = df['Survived'].value_counts().reset_index()\ndata.columns = [\n    'Survived', \n    'Passengers'\n]\n\nfig = px.pie(\n    data, \n    values='Passengers', \n    names='Survived', \n    title='Survival distribution', \n    width=500, \n    height=500\n)\n\nfig.show()","7acbb5fb":"fig = px.histogram(\n    df, \n    \"Age\", \n    nbins=20, \n    title='Age distribution', \n    width=800\n)\n\nfig.show()","5711ec1a":"fig = px.box(\n    df, \n    x=\"Survived\", \n    y=\"Age\", \n    points='all',\n    height=600,\n    width=800,\n    title='Age & Survived box plot'\n)\n\nfig.show()","8606cc23":"X = df[['Country', 'Sex', 'Age', 'Category', 'Survived']]\n\ncategorical = [\n    'Country', \n    'Sex', \n    'Category'\n]\n\nfor cat in categorical:\n    X = pd.concat([X, pd.get_dummies(X[cat], prefix=cat)], axis=1)\n    X = X.drop([cat], axis=1)\nX = X.drop(['Sex_F', 'Category_C'], axis=1)","5974f754":"f = plt.figure(figsize=(19, 15))\nplt.matshow(X.corr(), fignum=f.number)\nplt.xticks(range(X.shape[1]), X.columns, fontsize=14, rotation=45)\nplt.yticks(range(X.shape[1]), X.columns, fontsize=14)\ncb = plt.colorbar()\ncb.ax.tick_params(labelsize=14)","27f8993f":"for col in X.columns:\n    if abs(X[col].corr(X['Survived'])) < 0.1:\n        X = X.drop([col], axis=1)","9f34f059":"y = X['Survived']\nX = X.drop(['Survived'], axis=1)\n\nX, X_test, y, y_test = train_test_split(X, y, random_state=0, test_size=0.2, shuffle=False)","d87d2e61":"model = LogisticRegression(random_state=0)\nmodel.fit(X, y)","f883b2d1":"preds = model.predict(X_test)\n\nprint('Logistic Regression ', accuracy_score(y_test, preds))","81c23224":"plot_confusion_matrix(model, X_test, y_test)\nplt.show()","aa12ad3d":"print('Logistic Regression f1-score', f1_score(y_test, preds))\nprint('Logistic Regression precision', precision_score(y_test, preds))\nprint('Logistic Regression recall', recall_score(y_test, preds))","3b930e21":"model = RandomForestClassifier(random_state=666)\nmodel.fit(X, y)","9c7bddb3":"preds = model.predict(X_test)\n\nprint('Random Forest', accuracy_score(y_test, preds))\nprint('Random Forest f1-score', f1_score(y_test, preds))\nprint('Random Forest precision', precision_score(y_test, preds))\nprint('Random Forest recall', recall_score(y_test, preds))","ff6b6b2f":"plot_confusion_matrix(model, X_test, y_test)\nplt.show()","a75c0b1b":"sampler = TPESampler(\n    seed=0\n)\n\ndef create_model(trial):\n    max_depth = trial.suggest_int(\"max_depth\", 2, 5)\n    n_estimators = trial.suggest_int(\"n_estimators\", 2, 200)\n    min_samples_leaf = trial.suggest_int(\"min_samples_leaf\", 1, 10)\n    model = RandomForestClassifier(\n        min_samples_leaf=min_samples_leaf, \n        n_estimators=n_estimators, \n        max_depth=max_depth, \n        random_state=0\n    )\n    return model\n\ndef objective(trial):\n    model = create_model(trial)\n    model.fit(X, y)\n    preds = model.predict(X_test)\n    score = f1_score(y_test, preds)\n    return score\n\nstudy = optuna.create_study(direction=\"maximize\", sampler=sampler)\nstudy.optimize(objective, n_trials=50)\n\nrf_params = study.best_params\nrf_params['random_state'] = 0\nrf = RandomForestClassifier(\n    **rf_params\n)\nrf.fit(X, y)\npreds = rf.predict(X_test)\n\nprint('Optimized Random Forest: ', accuracy_score(y_test, preds))\nprint('Optimized Random Forest f1-score: ', f1_score(y_test, preds))","faf0089f":"plot_confusion_matrix(rf, X_test, y_test)\nplt.show()","58fe1f17":"Let's try Random Forest model with default parameters","80a91967":"We can see that we have enough high accuracy, but model didn't classify any item from class 1. So lets use f1-score, precision and recall.","838984cf":"NaNs percent for every column","29b1b263":"Let's check a confusion matrix.","91305f61":"# Baseline modeling","647f7b81":"Let's build simple logistic regression model to get baseline score","f2193c57":"<h1><center>The Estonia Disaster Passenger List. Data analysis and modeling<\/center><\/h1>\n\n<center><img src=\"https:\/\/bb.lv\/engine\/client\/content\/articles\/mega\/15696046575278a5ba6e8c931c110c6cfc9923cbeb04b.jpg\"><\/center>\n\n","98ed1d14":"Next we need to try optimize hyperparameters for models.","97d293a0":"# Data overview"}}