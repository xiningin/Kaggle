{"cell_type":{"2042c13d":"code","07f03024":"code","4d36f97d":"code","240bb571":"code","59a22d40":"code","c530b835":"code","2a919efc":"code","52bb936f":"code","16fb0a4d":"code","d3bd6162":"code","897fa3ed":"code","c47fea17":"code","7d09198e":"code","7184d454":"code","0d67e3dd":"code","b2d215f8":"code","8f3548ee":"code","8cd44e54":"code","b8c550a6":"code","eeb20588":"code","489fec37":"code","4e94d1c0":"code","31cc063c":"code","5fa506e9":"code","7003c272":"code","82172992":"markdown","1d5c9320":"markdown","74670ae4":"markdown","f5a9e9c7":"markdown","6333dfd2":"markdown","ca42767d":"markdown","e8ef0603":"markdown","591db47e":"markdown","3050b2b7":"markdown"},"source":{"2042c13d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","07f03024":"import pandas as pd\nimport torch\nimport numpy as np","4d36f97d":"# Input (temp, rainfall, humidity)\ninputs = np.array([[73, 67, 43], \n                   [91, 88, 64], \n                   [87, 134, 58], \n                   [102, 43, 37], \n                   [69, 96, 70]], dtype='float32')","240bb571":"#yeild in tons\ntargets = np.array([[56, 70], \n                    [81, 101], \n                    [119, 133], \n                    [22, 37], \n                    [103, 119]], dtype='float32')","59a22d40":"inputs = torch.from_numpy(inputs)\ntargets = torch.from_numpy(targets)\nprint(\"inputs\",inputs)\nprint(\"targets\",targets)","c530b835":"#weight and bias\nw = torch.rand(2,3,requires_grad= True)\nb= torch.rand(2, requires_grad= True)\nprint(w)\nprint(b)","2a919efc":"def model(x):\n    \n    return x @ w.t()+ b\n\n#Our model is simply a function that performs a matrix multiplication of the \n#inputs and the weights w (transposed) and adds the bias b (replicated for each observation).","52bb936f":"preds = model(inputs)\nprint(preds)","16fb0a4d":"#lets compare this result to actual targets\nprint(targets)\nprint(\"diffrence bitween actual and predicted \", preds-targets)","d3bd6162":"def lossf(t1,t2):\n    diff = t1 - t2\n    return torch.sum(diff * diff) \/ diff.numel()","897fa3ed":"loss =lossf(preds,targets)\nprint(loss)","c47fea17":"loss.backward()","7d09198e":"print(w)\nprint(w.grad)","7184d454":"w\nw.grad","0d67e3dd":"with torch.no_grad():\n    w -= w.grad * 1e-5\n    b -= b.grad * 1e-5","b2d215f8":"loss = lossf(preds, targets)\nprint(loss)","8f3548ee":"w.grad.zero_()\nb.grad.zero_()\nprint(w.grad)\nprint(b.grad)","8cd44e54":"preds = model(inputs)\nprint(preds)","b8c550a6":"loss =lossf(preds,targets)\nprint(loss)","eeb20588":"loss.backward()","489fec37":"w,b","4e94d1c0":"for i in range(100):\n    preds = model(inputs)\n    loss = lossf(preds, targets)\n    loss.backward()\n \n    with torch.no_grad():\n       \n        w -= w.grad * 1e-5\n        b -= b.grad * 1e-5\n        w.grad.zero_()\n        b.grad.zero_()\nprint(\"no of epoch\",i+1)\n        \n        ","31cc063c":"loss = lossf(preds, targets)\nprint(loss)","5fa506e9":"preds","7003c272":"targets","82172992":"We'll create a model that predicts crop yields for apples and oranges (target variables) by looking at the average temperature, rainfall, and humidity (input variables or features) in a region. Here's the training data:","1d5c9320":"x * wT + b","74670ae4":"**Compute gradients**","f5a9e9c7":"**upvote if you like it**","6333dfd2":"#Calculate the difference between the two matrices (preds and targets).\n#quare all elements of the difference matrix to remove negative values.\n#Calculate the average of the elements in the resulting matrix.","ca42767d":"lets convert np array into pytorch tensor\n","e8ef0603":"**Loss function**","591db47e":"****","3050b2b7":"![image.png](attachment:c303ae61-0aed-4ad7-8ef9-8830dc0cd266.png)"}}