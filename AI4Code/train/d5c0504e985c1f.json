{"cell_type":{"c8eb1678":"code","ce2ab8f4":"code","dabff59c":"code","4d46be49":"code","f42dbd20":"code","f620a3e6":"code","561eb57f":"code","dbbbdffb":"code","c477be14":"code","4e96d539":"markdown","e294de53":"markdown","6f575cec":"markdown","8f93b311":"markdown","3c7ff19d":"markdown","9d9bcbf1":"markdown","f6d1fa26":"markdown"},"source":{"c8eb1678":"# Importing libraries\nimport numpy as np\nimport nltk\nimport pandas as pd\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.stem import WordNetLemmatizer\nimport re\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport random","ce2ab8f4":"# Opening data file\nfile = open('..\/input\/hrithikadodiaspacebot\/space-bot.txt', 'r', encoding='utf-8')","dabff59c":"# Read data from file\ncorpus = file.read()","4d46be49":"# Split by paragraphs\ntokens = re.split(\"[\\n+]\", corpus)","f42dbd20":"lemm = WordNetLemmatizer()\n\ndef clean_data(corpus):\n    result = []\n    for sentence in corpus:\n        # Removing parenthesis from sentence\n        sentence = re.sub(r\"[\\([{})\\]]\",\" \" , sentence)\n        # Convert to list of words\n        sentence = sentence.split()\n        # Lemmatize each word\n        sentence = [lemm.lemmatize(word) for word in sentence]\n        # Form string from list and append to result\n        result.append(\" \".join(sentence))\n    return result","f620a3e6":"clean_corpus = clean_data(tokens)\n\n# Well, I had some empty strings in data after cleaning it. So just removing them with the following code.\nwhile \"\" in clean_corpus:\n    clean_corpus.remove(\"\")","561eb57f":"# Let's have a glimpse of our corpus\nprint(f\"Length of our corpus is: {len(clean_corpus)}\")\nprint(\"An example of corpus:\")\nprint(clean_corpus[5])","dbbbdffb":"welcome = ['hi', 'hey']\n\ndef chatbot_response(user_chat):\n    # If user inputs any of the greeting words, give greeting in response\n    for w in user_chat.split():\n        if w.lower() in welcome:\n            return random.choice(welcome)\n    # Pre-processing user chat\n    user_chat = clean_data([user_chat])\n    # Append user input to our clean_corpus\n    clean_corpus.append(\" \".join(user_chat))\n    cv = TfidfVectorizer()\n    X = cv.fit_transform(clean_corpus)\n    # Find cosine-similarity between user input and all our sentences in the corpus \n    cosine_data = cosine_similarity(X[-1], X)\n    # Sorting the data by similarity and selecting most relevant sentence as the answer. We use the second last sentence as \n    # answer this is because the last sentence in our corpus is user input \n    idx = cosine_data.argsort()[0][-2]\n    # Removing user input from corpus\n    clean_corpus.pop(-1)\n    return clean_corpus[idx]","c477be14":"# print(\"SPACE BOT: Hi!! Type bye to exit. Ask me anything: \")\n# while(True):\n#     user_chat = input()\n#     if(user_chat.lower()==\"bye\"):\n#         print(\"Bye\")\n#         break\n#     print(\"SPACE BOT: \", end=\" \")\n#     print(chatbot_response(user_chat))","4e96d539":"# <span style=\"font-family:consolas; background:#ffff80; font-size: 25px; test-align: center;\">IMPORTING LIBRARIES AND DATA<\/span>","e294de53":"# <span style=\"font-family:consolas; background:#99c2ff; font-size: 25px; test-align: center;\">DATA PREPROCESSING<\/span>","6f575cec":"<span style=\"font-family:consolas; background:#ffff22; font-size: 20px; test-align: center;\">Data Creds: NASA<br> If you like this notebook please upvote it:)<\/span>","8f93b311":"# <span style=\"font-family:consolas; background:#ffb3cc; font-size: 25px; test-align: center;\">IMPORTANT STUFF: TF-IDF AND COSINE SIMILARITY<\/span>\n<br>\n<span style=\"font-family:consolas; font-size: 18px; test-align: center;\">\n    <b style=\" background:#b3e6ff;\">REVEALING THE SECRET BEHIND THE CHATBOT<\/b>\ud83d\udd75\ufe0f\u200d\u2642\ufe0f: The basic idea is finding the most similar sentence to the user input from the text.<br>\n    <b>TF-IDF<\/b> means term frequency - inverse document frequency. Machines do not understand words, so we have to convert them to numbers. Here, we do this with the help of TF-IDF. It actually measures how important a word is in the document.<br>\n    <b>Cosine Similarity<\/b> is used to find out similarity between two sentences.\n    \n<\/span>","3c7ff19d":"![hrithika-space-bot-output.JPG](attachment:075a8ee1-a7c8-489b-b34d-e1662742c8a3.JPG)","9d9bcbf1":"# <span style=\"font-family:consolas; background:#ffa366; font-size: 25px; test-align: center;\">RESULT TIME<\/span>\n<span style=\"font-family:consolas; font-size: 18px; test-align: center;\">Finally, we can use our chatbot!! <br> The following code may not work while uploading notebook on kaggle. So I have put image of my output below.<\/span>","f6d1fa26":"# <span style=\"font-family:consolas; background:#99ffff; font-size: 45px; test-align: center;\">SPACE BOT<\/span>\ud83d\ude80\ud83c\udf0c\n\n<span style=\"font-family:consolas; font-size: 18px; test-align: center;\">A chatbot is used to mimic human conversation skills. Nowadays, chatbots are used for placing orders, answering user queries, reporting issues, scheduling appointments, etc. Use of chatbot enhances user experience of a product.\nIn this notebook I have built a chatbot which helps in understanding one of the most amazing objects out there in space - <b>Neutron Stars<\/b>\u2b50. To build this chatbot, I make use of <b>NLTK<\/b> library.\n<\/span>\n"}}