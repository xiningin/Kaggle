{"cell_type":{"4c203ebe":"code","4bd5e376":"code","1bdf2df8":"code","aebe239b":"code","0455a66a":"code","5192df1a":"code","656d7b16":"code","ad581306":"code","916ea00b":"code","ebce7d09":"code","d669c3ba":"markdown","3d2f80ba":"markdown","01551795":"markdown","139bacdf":"markdown"},"source":{"4c203ebe":"!pip install timm > \/dev\/null","4bd5e376":"import pandas as pd\nimport numpy as np\n\nimport torch\nfrom torch.utils.data import Dataset,DataLoader\nfrom torch import nn\nimport cv2\nimport timm\n\nimport matplotlib.pylab as plt\n\nfrom tqdm.notebook import tqdm","1bdf2df8":"def get_img(path):\n    im_bgr = cv2.imread(path)\n    im_rgb = im_bgr[:, :, ::-1]\n    return im_rgb\n\nclass PogDataset(Dataset):\n    def __init__(\n        self, df, data_root, transforms=None, output_label=True\n    ):\n        super().__init__()\n        self.df = df.reset_index(drop=True).copy()\n        self.transforms = transforms\n        self.data_root = data_root\n        self.output_label = output_label\n    \n    def __len__(self):\n        return self.df.shape[0]\n\n    def __getitem__(self, index: int):\n        \n        # get labels\n        if self.output_label:\n            target = self.df.iloc[index]['target']\n          \n        path = \"{}\/{}.jpg\".format(self.data_root, self.df.iloc[index]['video_id'])\n\n        img  = get_img(path)\n        \n        if self.transforms:\n            img = self.transforms(image=img)['image']\n\n        if self.output_label == True:\n            return img, target\n        else:\n            return img","aebe239b":"train = pd.read_parquet('..\/input\/kaggle-pog-series-s01e01\/\/train.parquet')\ntest = pd.read_parquet('..\/input\/kaggle-pog-series-s01e01\/\/test.parquet')\nss = pd.read_csv('..\/input\/kaggle-pog-series-s01e01\/sample_submission.csv')\n\ntrain_ = train.query('has_thumbnail').reset_index(drop=True).copy()\ntest_ = test.query('has_thumbnail').reset_index(drop=True).copy()","0455a66a":"from albumentations import Normalize, Compose\nfrom albumentations.pytorch import ToTensorV2\n\ndef get_transforms():\n    return Compose([\n            Normalize(mean=[0.485, 0.456, 0.406],\n                      std=[0.229, 0.224, 0.225],\n                      max_pixel_value=255.0, p=1.0),\n            ToTensorV2(p=1.0),\n        ], p=1.)","5192df1a":"data_root = '..\/input\/kaggle-pog-series-s01e01\/thumbnails\/'\n\ntrain_ds = PogDataset(df=train_,\n                      data_root=data_root,\n                     transforms=get_transforms())\n\ntest_ds = PogDataset(df=test_,\n                      data_root=data_root,\n                     transforms=get_transforms(),\n                     output_label=False\n                    )","656d7b16":"class PogFeatureExtractor(nn.Module):\n    def __init__(self, model_arch, pretrained=False):\n        super().__init__()\n        self.model = timm.create_model(model_arch, pretrained=pretrained)\n#         n_features = self.model.classifier.in_features\n#         self.model.classifier = nn.Linear(n_features, n_features)\n\n    def forward(self, x):\n        x = self.model(x)\n        return x","ad581306":"model = PogFeatureExtractor('tf_efficientnet_b0_ns',\n                            pretrained=True)\n\nmodel = model.eval()\nmodel = model.cuda()","916ea00b":"train_feats = []\nfor img, label in tqdm(train_ds):\n    img = img.cuda()\n    features = model(img.unsqueeze(0))\n    train_feats.append(features.cpu().detach().numpy())\n    \ntrain_feats_df = pd.DataFrame(np.stack(train_feats).squeeze(1))\ntrain_feats_df.columns = [f'f{x}' for x in train_feats_df.columns]\n\ntrain_w_feats = pd.concat([\n    train_,\n    train_feats_df], axis=1\n)\ntrain_w_feats.to_parquet('train_thumbnail_feats.parquet')","ebce7d09":"test_feats = []\nfor img in tqdm(test_ds):\n    img = img.cuda()\n    features = model(img.unsqueeze(0))\n    test_feats.append(features.cpu().detach().numpy())\n\ntest_feats_df = pd.DataFrame(np.stack(test_feats).squeeze(1))\ntest_feats_df.columns = [f'f{x}' for x in test_feats_df.columns]\n\ntest_w_feats = pd.concat([\n    test_,\n    test_feats_df], axis=1\n)\ntest_w_feats.to_parquet('test_thumbnail_feats.parquet')","d669c3ba":"# Run on Training Set","3d2f80ba":"# Model Feature Extractor","01551795":"# Run on Test Set","139bacdf":"# Create the Model"}}