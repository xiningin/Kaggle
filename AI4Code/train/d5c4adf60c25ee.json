{"cell_type":{"41ae4ff8":"code","1bb0bb4c":"code","94e5075c":"code","5162cef9":"code","64981747":"code","0e45b00d":"markdown","4c4699f8":"markdown","06a20919":"markdown"},"source":{"41ae4ff8":"# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1bb0bb4c":"import numpy as np \nimport os\nimport tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Conv2D,Flatten,MaxPooling2D,UpSampling2D,InputLayer,Reshape\n\nfrom keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array\nfrom keras.preprocessing.image import array_to_img\nimport matplotlib.pyplot as plt\n\n#%% Data receive functions, receive datas from folders\n\ndef getData(pathd,shape):\n    #file i\/o \u00e7al\u0131\u015f\u0131lmal\u0131\n    os.chdir(pathd)\n    Alldatas=[]\n    img_data=[]\n    img_data=os.listdir(\".\")\n    for image in img_data:\n        _,extension = os.path.splitext(image)\n        if(extension==\".jpg\" or extension==\".jpeg\" or extension==\".png\"):\n            img=load_img(image)\n            img=img.resize((shape[0],shape[1]))\n            x=img_to_array(img)\n           # x=x.reshape((1,) + x.shape)\n            Alldatas.append(x)\n    return Alldatas\nscale=(540,258)\nall_img=getData(\"\/kaggle\/input\/cleaning-dirty-documents-unzipped\/train\",scale)\nall_img_y=getData(\"\/kaggle\/input\/cleaning-dirty-documents-unzipped\/train_cleaned\",scale)\n#%%\nall_img=tf.image.rgb_to_grayscale(all_img)\nall_img_y=tf.image.rgb_to_grayscale(all_img_y)\n#%%\n","94e5075c":"def prepare(arr,flatten=True):\n    arr=np.asarray(arr,dtype=\"float32\")\n    arr2=arr\/255-0.5\n    if(flatten):\n        Count=arr2.shape[0]\n        arr2=arr2.flatten()\n        shap=int(arr2.shape[0]\/Count)\n        arr2=arr2.reshape(Count,shap)\n    return arr2\n        \n# EDIT DATASET AND RESHAPE\ntrain = prepare(all_img,flatten=False)\ntrain_y = prepare(all_img_y,flatten=False)\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(train,train_y,test_size=0.1,random_state=42)","5162cef9":"#CREATE AUTOENCODER\n\nfrom keras.layers import Activation\nfrom keras import optimizers\ndef cust(x):\n    return tf.keras.backend.sigmoid(x)-0.5\n\nopt = optimizers.adamax(learning_rate=0.001)\nmodel = Sequential()\nmodel.add(Conv2D(128, (3, 3), padding='same',input_shape=(258,540,1),data_format=\"channels_last\"))\nmodel.add(MaxPooling2D((2, 2), padding='same')) \nmodel.add(UpSampling2D((2, 2))) #SIGMOID TO EASILY GENERATE IMAGES IN WIDE RANGE\nmodel.add(Conv2D(1, (3, 3), activation=cust, padding='same'))\nmodel.compile(loss=\"mean_squared_error\",optimizer=opt)\nprint(model.summary())\n\n    \nmodel.fit(x_train,\n          y_train,\n          epochs = 600,\n          batch_size = 7,\n          validation_data = (x_test,y_test),\n          verbose=1)\n\n#%% Check difference between test images\n","64981747":"for i in range(0,9):\n    check=x_test[i]\n    matrix=model.predict(check.reshape((1,)+check.shape)).reshape(258,540,1)\n    \n    #Show real image and generated image from autoencoder\n    plt.figure(figsize=(50,50))\n    plt.subplot(10,10,1)\n    plt.imshow(array_to_img(check+0.5),cmap=\"gray\")\n    plt.subplot(10,10,2)\n    plt.imshow(array_to_img(matrix+0.5),cmap=\"gray\")\n\n#%%\n#Plot Loss\nplt.figure(figsize=(10,10))\n\nplt.plot(model.history.history['loss'])\nplt.plot(model.history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n#%% V\u0131sualizing Model\nfrom keras.utils.vis_utils import plot_model\nplot_model(model, show_shapes=True, show_layer_names=True)","0e45b00d":"Preparing Data","4c4699f8":"Showing, Visualizing Noised and Denoised image","06a20919":"Creating Convolutional Autoencoder"}}