{"cell_type":{"af27ece9":"code","902c5859":"code","9580a742":"code","f501246b":"code","db16ec6d":"code","79751c8e":"code","9f1a9721":"code","fdf8734b":"code","9599ba90":"code","1aa0b536":"code","cc085878":"code","4e739531":"code","b1c05bb4":"code","950f0a2a":"code","6636fe55":"code","1914b848":"code","7a9c3f3d":"code","d966c348":"code","6336f7b5":"code","bc63739d":"code","3613f23a":"code","4d171bfc":"code","c4bae095":"code","0f18e333":"code","1748cab9":"code","c369576e":"code","b2064ab1":"code","f19d813c":"code","45691b38":"code","c1dd3352":"code","7ae8e900":"code","6c7783f3":"code","a4f012a6":"code","e39e6ad1":"code","b7371ffd":"code","f812cce8":"markdown","aa452f3b":"markdown","29b27986":"markdown","ff8501c5":"markdown","c72a2af6":"markdown","6b4ab7af":"markdown","2723f422":"markdown","2f2ea198":"markdown","83efb8b2":"markdown","60f9c450":"markdown","22c20ac7":"markdown","b5d9e691":"markdown","e2da2b01":"markdown","b744cc41":"markdown","a6b609a3":"markdown","c593ed9b":"markdown","03f0c200":"markdown","5ca91e35":"markdown","58047a36":"markdown","14f64222":"markdown","7d69a48a":"markdown","9981c9cb":"markdown","1aaaeea8":"markdown","72c2e1c8":"markdown","9d63bbaf":"markdown","d0d33008":"markdown","5782e411":"markdown"},"source":{"af27ece9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","902c5859":"nsfg=pd.read_hdf(\"..\/input\/pythonworkingwithdatesandtimes\/nsfg.hdf5\")","9580a742":"print(nsfg.shape)","f501246b":"# Print the values and their frequencies before nan\nprint(nsfg['nbrnaliv'].value_counts())\n\n# Replace the value 8 with NaN\nnsfg['nbrnaliv'].replace([8], np.nan, inplace=True)\n\n# Print the values and their frequencies\nprint(nsfg['nbrnaliv'].value_counts())","db16ec6d":"# Select the columns and divide by 100\nagecon = nsfg['agecon'] \/ 100\nagepreg = nsfg['agepreg'] \/ 100\n\n# Compute the difference\npreg_length = agepreg - agecon\n\n# Compute summary statistics\nprint(preg_length.describe())","79751c8e":"# Plot the histogram\nplt.hist(agecon, bins=20, histtype='step')\n\n# Label the axes\nplt.xlabel('Age at conception')\nplt.ylabel('Number of pregnancies')\n\n# Show the figure\nplt.show()","9f1a9721":"pip install empiricaldist","fdf8734b":"from empiricaldist import Pmf, Cdf","9599ba90":"gss=pd.read_hdf(\"..\/input\/pythonworkingwithdatesandtimes\/gss.hdf5\")\nyear=gss['year']\n# Compute the PMF for year\npmf_year = Pmf.from_seq(year, normalize=False)\n\n# Print the result\nprint(pmf_year)","1aa0b536":"# Select the age column\nage = gss['age']\n\n# Make a PMF of age\npmf_age = Pmf.from_seq(age)\n\n# Plot the PMF\npmf_age.bar()\n\n# Label the axes\nplt.xlabel('Age')\nplt.ylabel('PMF')\nplt.show()","cc085878":"age = gss['age']\n\n# Compute the CDF of age\ncdf_age = Cdf.from_seq(age)\n\n# Calculate the CDF of 30\nprint(cdf_age(30))\nprint(1 - cdf_age(30))","4e739531":"# Calculate the 75th percentile \nincome=gss['realinc']\ncdf_income=Cdf.from_seq(income)","b1c05bb4":"# Calculate the 75th percentile \npercentile_75th = cdf_income.inverse(0.75)\n\n# Calculate the 25th percentile\npercentile_25th = cdf_income.inverse(0.25)\n\n# Calculate the interquartile range\niqr = percentile_75th - percentile_25th\n\n# Print the interquartile range\nprint(iqr)","950f0a2a":"# Select realinc\nincome = gss['realinc']\n\n# Make the CDF\ncdf_income = Cdf(income)\n\n# Plot it\ncdf_income.plot()\n\n# Label the axes\nplt.xlabel('Income (1986 USD)')\nplt.ylabel('CDF')\nplt.show()","6636fe55":"educ = gss['educ']\n\n# Bachelor`s degree\nbach = (educ >= 16)\n\n# Associate degree\nassc = ((educ >= 14) & (educ < 16))\n\n# High school (12 or fewer years of education)\nhigh = (educ <= 12)\nprint(high.mean())","1914b848":"income = gss['realinc']\n\n# Plot the CDFs\nCdf.from_seq(income[high]).plot(label='High school')\nCdf.from_seq(income[assc]).plot(label='Associate')\nCdf.from_seq(income[bach]).plot(label='Bachelor')\n\n# Label the axes\nplt.xlabel('Income (1986 USD)')\nplt.ylabel('CDF')\nplt.legend()\nplt.show()","7a9c3f3d":"# Extract realinc and compute its log\nincome = gss['realinc']\nlog_income = np.log10(income)\n\n# Compute mean and standard deviation\nmean = np.mean(log_income)\nstd = np.std(log_income)\nprint(mean, std)\n\n# Make a norm object\nfrom scipy.stats import norm\ndist = norm(mean,std)","d966c348":"# Evaluate the model CDF\nxs = np.linspace(2, 5.5)\nys = dist.cdf(xs)\n\n# Plot the model CDF\nplt.clf()\nplt.plot(xs, ys, color='gray')\n\n# Create and plot the Cdf of log_income\nCdf.from_seq(log_income).plot()\n    \n# Label the axes\nplt.xlabel('log10 of realinc')\nplt.ylabel('CDF')\nplt.show()","6336f7b5":"import seaborn as sns\n# Evaluate the normal PDF\nxs = np.linspace(2, 5.5)\nys = dist.pdf(xs)\n\n# Plot the model PDF\nplt.clf()\nplt.plot(xs, ys, color='gray')\n\n# Plot the data KDE\nsns.kdeplot(log_income)\n\n# Label the axes\nplt.xlabel('log10 of realinc')\nplt.ylabel('PDF')\nplt.show()","bc63739d":"brfss = pd.read_hdf('..\/input\/pythonworkingwithdatesandtimes\/brfss.hdf5')","3613f23a":"#print(brfss.head())\n# Extract age\nage = Pmf(brfss['AGE'])\n\n# Plot the PMF\npmf_age = Pmf.from_seq(age)\npmf_age.bar()\n\n# Label the axes\nplt.xlabel('Age in years')\nplt.ylabel('PMF')\nplt.show()","4d171bfc":"# Select the first 1000 respondents\nbrfss = brfss[:1000]\n\n# Extract age and weight\nage = brfss['AGE']\nweight = brfss['WTKG3']\n\n# Make a scatter plot\nplt.plot(age,weight,'o',alpha=0.1)\n\nplt.xlabel('Age in years')\nplt.ylabel('Weight in kg')\n\nplt.show()","c4bae095":"# Select the first 1000 respondents\nbrfss = brfss[:1000]\n\n# Add jittering to age\nage = brfss['AGE'] + np.random.normal(0,2.5, size=len(brfss))\n# Extract weight\nweight = brfss['WTKG3']\n\n# Make a scatter plot\nplt.plot(age, weight, 'o', markersize=5, alpha=0.2)\n\nplt.xlabel('Age in years')\nplt.ylabel('Weight in kg')\nplt.show()","0f18e333":"# Drop rows with missing data\ndata = brfss.dropna(subset=['_HTMG10', 'WTKG3'])\n\n# Make a box plot\nsns.boxplot(x='_HTMG10',y='WTKG3',data=data,whis=10)\n\n# Plot the y-axis on a log scale\nplt.yscale('log')\n\n# Remove unneeded lines and label axes\nsns.despine(left=True, bottom=True)\nplt.xlabel('Height in cm')\nplt.ylabel('Weight in kg')\nplt.show()\n","1748cab9":"# Extract income\nincome = brfss['INCOME2']\n\n# Plot the PMF\nPmf.from_seq(income).bar()\n\n# Label the axes\nplt.xlabel('Income level')\nplt.ylabel('PMF')\nplt.show()","c369576e":"# Drop rows with missing data\ndata = brfss.dropna(subset=['INCOME2', 'HTM4'])\n\n# Make a violin plot\nsns.violinplot(x='INCOME2',y='HTM4',data=data,inner=None)\n\n# Remove unneeded lines and label axes\nsns.despine(left=True, bottom=True)\nplt.xlabel('Income level')\nplt.ylabel('Height in cm')\nplt.show()\n","b2064ab1":"# Select columns\ncolumns = ['AGE','INCOME2','_VEGESU1']\nsubset = brfss[columns]\n\n# Compute the correlation matrix\nprint(subset.corr())","f19d813c":"from scipy.stats import linregress\n\n# Extract the variables\nsubset = brfss.dropna(subset=['INCOME2', '_VEGESU1'])\nxs = subset['INCOME2']\nys = subset['_VEGESU1']\n\n# Compute the linear regression\nres = linregress(xs,ys)\nprint(res)","45691b38":"# Plot the scatter plot\nplt.clf()\nx_jitter = xs + np.random.normal(0, 0.15, len(xs))\nplt.plot(x_jitter, ys, 'o', alpha=0.2)\n\n# Plot the line of best fit\nfx = np.array([xs.min(), xs.max()])\nfy = res.intercept + res.slope * fx\nplt.plot(fx, fy, '-', alpha=0.7)\n\nplt.xlabel('Income code')\nplt.ylabel('Vegetable servings per day')\nplt.ylim([0, 6])\nplt.show()","c1dd3352":"from scipy.stats import linregress\nimport statsmodels.formula.api as smf\n\n# Run regression with linregress\nsubset = brfss.dropna(subset=['INCOME2', '_VEGESU1'])\nxs = subset['INCOME2']\nys = subset['_VEGESU1']\nres = linregress(xs,ys)\nprint(res)\n\n# Run regression with StatsModels\nresults = smf.ols('_VEGESU1 ~ INCOME2', data = brfss).fit()\nprint(results.params)","7ae8e900":"# Group by educ\ngrouped = gss.groupby('educ')\n\n# Compute mean income in each group\nmean_income_by_educ = grouped['realinc'].mean()\n\n# Plot mean income as a scatter plot\nplt.plot(mean_income_by_educ,'o',alpha=0.5)\n\n# Label the axes\nplt.xlabel('Education (years)')\nplt.ylabel('Income (1986 $)')\nplt.show()","6c7783f3":"import statsmodels.formula.api as smf\n\n# Add a new column with educ squared\ngss['age2'] = gss['age'] ** 2\ngss['educ2'] = gss['educ'] ** 2\n\n# Run a regression model with educ, educ2, age, and age2\nresults = smf.ols('realinc ~ educ + educ2 + age + age2', data=gss).fit()\n\n# Print the estimated parameters\nprint(results.params)","a4f012a6":"# Run a regression model with educ, educ2, age, and age2\nresults = smf.ols('realinc ~ educ + educ2 + age + age2', data=gss).fit()\n\n# Make the DataFrame\ndf = pd.DataFrame()\ndf['educ'] = np.linspace(0, 20)\ndf['age'] = 30\ndf['educ2'] = df['educ']**2\ndf['age2'] = df['age']**2\n\n# Generate and plot the predictions\npred = results.predict(df)\nprint(pred.head())","e39e6ad1":"# Plot mean income in each age group\nplt.clf()\ngrouped = gss.groupby('educ')\nmean_income_by_educ = grouped['realinc'].mean()\nplt.plot(mean_income_by_educ, 'o', alpha=0.5)\n\n# Plot the predictions\npred = results.predict(df)\nplt.plot(df['educ'], pred, label='Age 30')\n\n# Label axes\nplt.xlabel('Education (years)')\nplt.ylabel('Income (1986 $)')\nplt.legend()\nplt.show()","b7371ffd":"# Recode grass\ngss['grass'].replace(2, 0, inplace=True)\n\n# Run logistic regression\nresults = smf.logit('grass ~ age + age2 + educ + educ2 + C(sex)', data=gss).fit()\nresults.params\n\n# Make a DataFrame with a range of ages\ndf = pd.DataFrame()\ndf['age'] = np.linspace(18, 89)\ndf['age2'] = df['age']**2\n\n# Set the education level to 12\ndf['educ'] = 12\ndf['educ2'] = df['educ']**2\n\n# Generate predictions for men and women\ndf['sex'] = 1\npred1 = results.predict(df)\n\ndf['sex'] = 2\npred2 = results.predict(df)\n\nplt.clf()\ngrouped = gss.groupby('age')\nfavor_by_age = grouped['grass'].mean()\nplt.plot(favor_by_age, 'o', alpha=0.5)\n\nplt.plot(df['age'], pred1, label='Male')\nplt.plot(df['age'],pred2,label='Female')\n\nplt.xlabel('Age')\nplt.ylabel('Probability of favoring legalization')\nplt.legend()\nplt.show()","f812cce8":"## Multivariate Thinking\n### Using StatsModels","aa452f3b":"### Jittering","29b27986":"## Distributions\n### Probability Mass Functions","ff8501c5":"## Relationships","c72a2af6":"### Compute IQR","6b4ab7af":"### Logistic regression","2723f422":"### Scatter plot","2f2ea198":"### Plot a CDF","83efb8b2":"## Read, clean, and validate","60f9c450":"### Modeling distributions\n### Distribution of income","22c20ac7":"### Make a CDF","b5d9e691":"### PMF of age","e2da2b01":"### Plot income CDFs","b744cc41":"## Read, clean, and validate","a6b609a3":"### Non-linear model of education","c593ed9b":"### Visualizing regression results","03f0c200":"### Simple regression","5ca91e35":"### Comparing distributions","58047a36":"### correlations","14f64222":"### Distribution of income","7d69a48a":"### Multiple regression","9981c9cb":"### Extract education levels","1aaaeea8":"### Computer variables","72c2e1c8":"### Visualizing relation","9d63bbaf":"### Filter and visualize","d0d33008":"### Comparing CDFs","5782e411":"### Comparing PDFs"}}