{"cell_type":{"e0e562d5":"code","917674bd":"code","eb1ab3b0":"code","67c70b67":"code","44fd52e2":"code","056587c3":"code","9064ebd8":"code","979d9ade":"code","62c2183a":"code","1fb33532":"code","9e814286":"code","fd457520":"code","9c5e8e0e":"code","dd65d180":"code","76ea3d07":"code","959b8d93":"code","5d239aea":"code","6fedb578":"code","ca78490e":"code","aefc3e1d":"code","fa1e6ab6":"code","2d651cff":"code","cf83fce8":"code","04b86fff":"code","a3dcad39":"code","d216c97f":"code","625f1809":"code","920a897f":"code","fd9ea60b":"code","10e4eeb6":"code","b7f377a2":"code","ab1d9247":"code","70ec1bec":"code","2aa5461e":"code","89445986":"code","fb671fdd":"code","d50ff06b":"code","d73bb0d2":"code","c559700b":"code","6b96d116":"code","68d692cd":"code","9c9e6a6e":"code","64a3a1fd":"code","28508adb":"code","57356452":"code","ead1bdcb":"code","361c9369":"code","67277fed":"code","f378aaab":"code","cbb27189":"code","cdfbaf0f":"code","b0e01997":"code","64338442":"code","1b639a43":"code","906bb7b2":"code","e286a061":"code","56cd90c8":"code","c56e2524":"code","158218a3":"code","f2210694":"code","02bc942e":"code","3fd7d344":"code","a6afaac5":"code","f5c9dabe":"code","1ac9b3bf":"code","4076defb":"code","ef783f45":"code","6efda29b":"code","571c6fc2":"code","8653cbb9":"code","9681601d":"code","d2b1f439":"code","2990577c":"code","d64ebef0":"code","ceab17b3":"code","2e58b95c":"code","4aaab9f2":"code","63884ef3":"code","8f435aad":"code","f0057af2":"code","e12dde76":"code","530fcc4f":"code","48facbc6":"markdown","0d9ecc9f":"markdown","b85f9aa5":"markdown","88115ea6":"markdown","cc8efd22":"markdown","c3b6a9fc":"markdown","a0e13323":"markdown","83f68082":"markdown","b640cd77":"markdown","23c6a7a1":"markdown"},"source":{"e0e562d5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nprint(os.listdir(\"..\/input\"))","917674bd":"train_df = pd.read_csv('..\/input\/train\/train.csv')\ntrain_df.info()","eb1ab3b0":"test_df = pd.read_csv('..\/input\/test\/test.csv')\ntest_df.info()","67c70b67":"train_df.head()","44fd52e2":"train_df.Type.value_counts().plot(kind='bar')","056587c3":"train_df.Name.value_counts().head()","9064ebd8":"train_df.Age.plot(kind='hist')","979d9ade":"plt.figure(figsize=(20,10))\nsns.boxplot(x='AdoptionSpeed', y='Age', data=train_df, showfliers=False)","62c2183a":"breed_label = pd.read_csv('..\/input\/breed_labels.csv')\nbreed_label.head()","1fb33532":"train_df.Breed1.value_counts().reset_index().join(breed_label.set_index('BreedID'),on='index').rename(columns={'index':'Breed1','Breed1':'Count'}).head()","9e814286":"train_df.Breed2.value_counts().reset_index().join(breed_label.set_index('BreedID'),on='index').rename(columns={'index':'Breed2','Breed2':'Count'}).head()","fd457520":"train_df.Breed2.loc[train_df.Breed1==train_df.Breed2] = 0","9c5e8e0e":"train_df['Mixed_Breed'] = train_df.apply(lambda x: 0 if x.Breed2==0 and x.Breed1!=307 else 1, axis=1)\ntest_df['Mixed_Breed'] = test_df.apply(lambda x: 0 if x.Breed2==0 and x.Breed1!=307 else 1, axis=1)","dd65d180":"train_df.Mixed_Breed.value_counts().plot(kind='bar')","76ea3d07":"color_label = pd.read_csv('..\/input\/color_labels.csv')\ncolor_label","959b8d93":"train_df.Color1.value_counts().reset_index().join(color_label.set_index('ColorID'),on='index').rename(columns={'index':'Color1','Color1':'Count'})","5d239aea":"train_df.Color2.value_counts().reset_index().join(color_label.set_index('ColorID'),on='index').rename(columns={'index':'Color2','Color2':'Count'})","6fedb578":"train_df.Color3.value_counts().reset_index().join(color_label.set_index('ColorID'),on='index').rename(columns={'index':'Color3','Color3':'Count'})","ca78490e":"train_df['Num_Color'] = train_df.apply(lambda x:  3-sum([y==0 for y in [x.Color1, x.Color2, x.Color3]]), axis=1)\ntest_df['Num_Color'] = test_df.apply(lambda x:  3-sum([y==0 for y in [x.Color1, x.Color2, x.Color3]]), axis=1)","aefc3e1d":"train_df.Num_Color.value_counts().plot(kind='bar')","fa1e6ab6":"train_df.MaturitySize.value_counts().plot(kind='bar')","2d651cff":"train_df.FurLength.value_counts().plot(kind='bar')","cf83fce8":"train_df.Vaccinated.value_counts().plot(kind='bar')","04b86fff":"train_df.Dewormed.value_counts().plot(kind='bar')","a3dcad39":"train_df.Sterilized.value_counts().plot(kind='bar')","d216c97f":"train_df.Health.value_counts().plot(kind='bar')","625f1809":"train_df.Quantity.value_counts().plot(kind='bar')","920a897f":"train_df.Fee.plot(kind='hist')","fd9ea60b":"state_label = pd.read_csv('..\/input\/state_labels.csv')\nstate_label","10e4eeb6":"train_df.State.value_counts().reset_index().join(state_label.set_index('StateID'),on='index').rename(columns={'index':'State','State':'Count'})","b7f377a2":"train_df.RescuerID.value_counts().head(10).plot(kind='bar')","ab1d9247":"train_df.VideoAmt.value_counts().plot(kind='bar')","70ec1bec":"train_df.PhotoAmt.value_counts().plot(kind='bar')","2aa5461e":"plt.figure(figsize=(20,10))\nsns.boxplot(x='AdoptionSpeed', y='PhotoAmt', data=train_df)","89445986":"train_df.AdoptionSpeed.value_counts().sort_index().plot(kind='bar')","fb671fdd":"train_df['Description'].fillna(\"\", inplace=True)\ntest_df['Description'].fillna(\"\", inplace=True)","d50ff06b":"train_df['Description_Length'] = train_df.Description.map(len)\ntest_df['Description_Length'] = test_df.Description.map(len)","d73bb0d2":"plt.figure(figsize=(20,10))\nsns.boxplot(x='AdoptionSpeed', y='Description_Length', data=train_df, showfliers=False)","c559700b":"sentiment_list = os.listdir('..\/input\/train_sentiment')","6b96d116":"sentiment = {}\nfor x in sentiment_list:\n    sentiment[x[:9]] = pd.read_json('..\/input\/train_sentiment\/{}'.format(x), orient='index', typ='series').documentSentiment","68d692cd":"sentiment_df = pd.DataFrame.from_dict(sentiment).transpose()","9c9e6a6e":"train_df = train_df.join(sentiment_df, on='PetID')","64a3a1fd":"train_df.magnitude.fillna(0, inplace=True)\ntrain_df.score.fillna(0, inplace=True)","28508adb":"sentiment_list_test = os.listdir('..\/input\/test_sentiment')\nsentiment_test = {}\nfor x in sentiment_list_test:\n    sentiment_test[x[:9]] = pd.read_json('..\/input\/test_sentiment\/{}'.format(x), orient='index', typ='series').documentSentiment\nsentiment_df_test = pd.DataFrame.from_dict(sentiment_test).transpose()\ntest_df = test_df.join(sentiment_df_test, on='PetID')\ntest_df.magnitude.fillna(0, inplace=True)\ntest_df.score.fillna(0, inplace=True)","57356452":"from sklearn.feature_extraction.text import TfidfVectorizer","ead1bdcb":"import re\npattern = re.compile('[\\W_]+', re.UNICODE)\ntexts = [pattern.sub(' ', x) for x in train_df.Description]\ntexts_test = [pattern.sub(' ', x) for x in test_df.Description]","361c9369":"Tfidf = TfidfVectorizer(stop_words='english',ngram_range=(1,3), max_features=20000,max_df=0.95,min_df=5)","67277fed":"train_x_tfidf_full = Tfidf.fit_transform(texts)\ntest_x_tfidf = Tfidf.transform(texts_test)","f378aaab":"from sklearn.decomposition import TruncatedSVD","cbb27189":"svd = TruncatedSVD(n_components=100, random_state=42)\ntrain_x_svd = svd.fit_transform(train_x_tfidf_full)","cdfbaf0f":"train_df = train_df.join(pd.DataFrame(train_x_svd, columns=['svd_'+str(x) for x in np.arange(100)]))","b0e01997":"test_x_svd = svd.transform(test_x_tfidf)\ntest_df = test_df.join(pd.DataFrame(test_x_svd, columns=['svd_'+str(x) for x in np.arange(100)]))","64338442":"photo_list = os.listdir('..\/input\/train_metadata')","1b639a43":"profile_photo = [x for x in photo_list if \"-1.\" in x]","906bb7b2":"example = pd.read_json('..\/input\/train_metadata\/{}'.format(profile_photo[0]), orient='index', typ='series')","e286a061":"example.labelAnnotations[0]","56cd90c8":"example.cropHintsAnnotation['cropHints'][0]","c56e2524":"example.imagePropertiesAnnotation","158218a3":"def get_dominant_color(photo_json):\n    example = pd.read_json('..\/input\/train_metadata\/{}'.format(photo_json), orient='index', typ='series')\n    max_index = np.argmax([x['pixelFraction'] for x in example.imagePropertiesAnnotation['dominantColors']['colors']])\n    result = example.imagePropertiesAnnotation['dominantColors']['colors'][max_index]['color']\n    result['score'] = example.imagePropertiesAnnotation['dominantColors']['colors'][max_index]['score']\n    result['pixelFraction'] = example.imagePropertiesAnnotation['dominantColors']['colors'][max_index]['pixelFraction']\n    try:\n        result['image_description'] = example.labelAnnotations[0]['description']\n        result['image_description_score'] = example.labelAnnotations[0]['score']\n        \n    except AttributeError:\n        result['image_description'] = -1\n        result['image_description_score'] = -1\n        \n    result['image_confidence'] = example.cropHintsAnnotation['cropHints'][0]['confidence']\n    try:\n        result['image_importanceFraction'] = example.cropHintsAnnotation['cropHints'][0]['importanceFraction']\n    except KeyError:\n        result['image_importanceFraction'] = -1\n    return result","f2210694":"get_dominant_color(profile_photo[1])","02bc942e":"dominant_color_train = {}\nfor x in profile_photo:\n    dominant_color_train[x[:9]] = get_dominant_color(x)","3fd7d344":"dominant_color_df = pd.DataFrame(dominant_color_train).transpose()\ndominant_color_df.columns = ['photo_'+x for x in dominant_color_df.columns]\ntrain_df = train_df.join(dominant_color_df, on='PetID', rsuffix='_color')","a6afaac5":"train_df[pd.DataFrame(dominant_color_df).columns.tolist()] = train_df[pd.DataFrame(dominant_color_df).columns.tolist()].fillna(-1)","f5c9dabe":"photo_list_test = os.listdir('..\/input\/test_metadata')\nprofile_photo_test = [x for x in photo_list_test if \"-1.\" in x]\n\ndef get_dominant_color_test(photo_json):\n    example = pd.read_json('..\/input\/test_metadata\/{}'.format(photo_json), orient='index', typ='series')\n    max_index = np.argmax([x['pixelFraction'] for x in example.imagePropertiesAnnotation['dominantColors']['colors']])\n    result = example.imagePropertiesAnnotation['dominantColors']['colors'][max_index]['color']\n    result['score'] = example.imagePropertiesAnnotation['dominantColors']['colors'][max_index]['score']\n    result['pixelFraction'] = example.imagePropertiesAnnotation['dominantColors']['colors'][max_index]['pixelFraction']\n    try:\n        result['image_description'] = example.labelAnnotations[0]['description']\n        result['image_description_score'] = example.labelAnnotations[0]['score']\n        \n    except AttributeError:\n        result['image_description'] = -1\n        result['image_description_score'] = -1\n        \n    result['image_confidence'] = example.cropHintsAnnotation['cropHints'][0]['confidence']\n    try:\n        result['image_importanceFraction'] = example.cropHintsAnnotation['cropHints'][0]['importanceFraction']\n    except KeyError:\n        result['image_importanceFraction'] = -1\n    return result\n\ndominant_color_test = {}\nfor x in profile_photo_test:\n    dominant_color_test[x[:9]] = get_dominant_color_test(x)\n    \ndominant_color_df_test = pd.DataFrame(dominant_color_test).transpose()\ndominant_color_df_test.columns = ['photo_'+x for x in dominant_color_df_test.columns]\ntest_df = test_df.join(dominant_color_df_test, on='PetID', rsuffix='_color')\n\ntest_df[pd.DataFrame(dominant_color_df_test).columns.tolist()] = test_df[pd.DataFrame(dominant_color_df_test).columns.tolist()].fillna(-1)","1ac9b3bf":"photo_image_description = {}\nfor i,x in enumerate(pd.concat([train_df.photo_image_description, test_df.photo_image_description]).value_counts().index):\n    photo_image_description[x] = i\n    \ntrain_df.photo_image_description = train_df.photo_image_description.map(lambda x: photo_image_description[x])\ntest_df.photo_image_description = test_df.photo_image_description.map(lambda x: photo_image_description[x])","4076defb":"import lightgbm as lgb","ef783f45":"train_df.columns","6efda29b":"features = [x for x in train_df.columns if x not in ['Name', 'Type','RescuerID','AdoptionSpeed','Description','PetID']]","571c6fc2":"df_train, df_val = train_test_split(train_df, test_size=0.3, random_state=420)","8653cbb9":"df_train.columns","9681601d":"from sklearn.metrics import cohen_kappa_score","d2b1f439":"def kappa_scorer(pred, train_data):\n    length = len(train_data.get_label())\n    pred_results = [[pred[x], pred[x+length*1], pred[x+length*2], pred[x+length*3], pred[x+length*4]] for x in np.arange(length)]\n    \n    return 'kappa', cohen_kappa_score([np.argmax(x) for x in pred_results],train_data.get_label(), weights='quadratic'), True","2990577c":"d_train = lgb.Dataset(df_train[features], label=df_train['AdoptionSpeed'],feature_name=features, \n                      categorical_feature=['Breed1', 'Breed2', 'Gender', 'Color1', 'Color2',\n       'Color3', 'MaturitySize', 'FurLength', 'Vaccinated', 'Dewormed',\n       'Sterilized', 'Health', 'State','Mixed_Breed','photo_image_description'])\nd_val = lgb.Dataset(df_val[features], label=df_val['AdoptionSpeed'], reference=d_train,feature_name=features, \n                    categorical_feature=['Breed1', 'Breed2', 'Gender', 'Color1', 'Color2',\n       'Color3', 'MaturitySize', 'FurLength', 'Vaccinated', 'Dewormed',\n       'Sterilized', 'Health', 'State', 'Mixed_Breed','photo_image_description'])\n\nparams = {\"objective\" : \"multiclass\",\n              \"num_class\": 5,\n              \"metric\" : \"None\",\n              \"learning_rate\" : 0.1,\n              \"bagging_seed\" : 420,\n              \"feature_fraction\" : 0.4,\n              \"early_stopping_rounds\": 100\n             }\n\nevals_result = {}\nmodel = lgb.train(params, d_train, num_boost_round=1000, valid_sets=[d_train, d_val], feval=kappa_scorer, evals_result=evals_result, verbose_eval=10)","d64ebef0":"d_train = lgb.Dataset(df_train[features], label=df_train['AdoptionSpeed'],feature_name=features, \n                      categorical_feature=['Breed1', 'Breed2', 'Gender', 'Color1', 'Color2',\n       'Color3', 'MaturitySize', 'FurLength', 'Vaccinated', 'Dewormed',\n       'Sterilized', 'Health', 'State','Mixed_Breed','photo_image_description'])\n\ncv_dict = lgb.cv(params, d_train, num_boost_round=1000, feval=kappa_scorer, verbose_eval=10)","ceab17b3":"from sklearn.dummy import DummyClassifier\n\ndummy_model = DummyClassifier(random_state=1)\ndummy_model.fit(df_train[features], df_train['AdoptionSpeed'])\ncohen_kappa_score(dummy_model.predict(df_val[features]), df_val['AdoptionSpeed'])","2e58b95c":"fig, ax = plt.subplots(figsize=(12,10))\nlgb.plot_importance(model, height=0.8, ax=ax)\nax.grid(False)\nplt.ylabel('Feature', size=12)\nplt.xlabel('Importance', size=12)\nplt.title(\"Importance of the Features of LightGBM Model\", fontsize=15)\nplt.show()","4aaab9f2":"pred_test = model.predict(test_df[features], num_iteration=model.best_iteration)","63884ef3":"submission = pd.concat([test_df.PetID,pd.DataFrame(pred_test, columns=['A','B','C','D','E'])],axis=1)","8f435aad":"submission['AdoptionSpeed'] = submission.apply(lambda x: np.argmax([x.A,x.B,x.C,x.D,x.E]), axis=1)","f0057af2":"submission = submission[['PetID','AdoptionSpeed']]\nsubmission.head()","e12dde76":"submission.to_csv('submission.csv',index=False)","530fcc4f":"submission.AdoptionSpeed.value_counts()","48facbc6":"## Photo Metadata","0d9ecc9f":"## LGB Model","b85f9aa5":"Some missing values","88115ea6":"Some missing values","cc8efd22":"## Add Tfidf features","c3b6a9fc":"It would seem like many people like to name their pets as 'Baby' or 'Lucky'.","a0e13323":"## Prediction","83f68082":"## EDA","b640cd77":"## Description Sentiment","23c6a7a1":"There are more dogs than cats."}}