{"cell_type":{"ffea46d1":"code","199c5b27":"code","e999f379":"code","54edaa6b":"code","3dc78ddf":"code","27c2b61d":"code","ed956e94":"code","fc2705c7":"code","70f53e86":"code","969bb9df":"code","e0f30388":"code","2b9947e8":"code","5135b5a2":"code","8e51ebf3":"code","ce8f2af7":"code","52030756":"code","c115e38a":"code","447813e0":"code","50adf8f4":"code","83a32d0f":"code","436495f6":"code","a5386273":"code","d73b0ebc":"code","28607599":"code","89f805da":"code","06b51333":"code","b8bb3173":"code","ad9e103f":"code","234ba8af":"code","ba8188c5":"code","532703f8":"code","705dbf23":"code","5858d55f":"code","d51fd961":"code","ddedf379":"markdown","da9bcb15":"markdown","39c4e4ae":"markdown","1b8a11b3":"markdown","77aa0038":"markdown","c2b7a18e":"markdown","ebab0d9c":"markdown","7540dcec":"markdown","e9b5ab0b":"markdown","019e4d69":"markdown"},"source":{"ffea46d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","199c5b27":"import numpy as np\nimport pandas as pd\nimport missingno as msno\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndf_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","e999f379":"df_test.head()","54edaa6b":"df_train.head()","3dc78ddf":"df_train.info()","27c2b61d":"# check missing values\nmsno.matrix(df_train)","ed956e94":"df_train.isna().sum()","fc2705c7":"# for Embarked column, there are 2 missing values, \n# fill it with modus data in the column\n\n# cek modus\ndf_train.Embarked.value_counts()","70f53e86":"# modus data in Embarked columns is S\ndf_train.Embarked = df_train.Embarked.fillna('S')","969bb9df":"# for Cabin column, there are too many missing values\n# just drop the column\ndf_train.drop('Cabin', axis=1, inplace=True)","e0f30388":"# fill Age column with median\ndf_train.Age.median()","2b9947e8":"df_train.Age.fillna(28, inplace=True)","5135b5a2":"# Analysis\ndf_ = df_train[['Survived','Pclass','Sex','Age','Fare','Embarked']]\ndf_.describe()","8e51ebf3":"# Fare quantile\ndf_['fare_quantile'] = pd.qcut(df_['Fare'].copy(), q=5)\npassanger_fare_quantile = df_['fare_quantile'].value_counts().sort_index()\npassanger_fare_quantile_survived = df_.groupby('fare_quantile').sum()['Survived']\nfare_plot = pd.DataFrame({'total_passangers':passanger_fare_quantile,\n              'survived_passangers':passanger_fare_quantile_survived\n             })\nfare_plot.index.rename('Fare Quantile (Pounds)',inplace=True)\nprint('Distribusi penumpang berdasarkan harga tiket:\\n{}\\n'.format(fare_plot))\nplt.style.use('seaborn-dark')\nax = fare_plot.plot(kind='bar', rot=45, title='Passanger distribution by ticket fare')\nax.set_xlabel('Fare Quantile')\nax.set_ylabel('Number of Passangers')\nplt.legend(bbox_to_anchor=(1,1))\nplt.show()","ce8f2af7":"# Survival rate vs Age\nprint(df_.groupby('Survived').agg({'Age':'mean'}))\nsns.distplot(df_.Age, label='Age distribution').set_title('Passanger distribution by age')\nplt.legend()\nplt.show()","52030756":"# distribusi usia\ndf_['age_quantile'] = pd.qcut(df_['Age'], q=4)\nage_quantile = df_['age_quantile'].value_counts().sort_index()\nage_quantile_survived = df_.groupby('age_quantile').sum()['Survived']\n\nage_plot = pd.DataFrame({'total_passangers':age_quantile,\n              'survived_passangers':age_quantile_survived\n             })\nage_plot.index.rename('Age Quantile (year)',inplace=True)\nax = age_plot.plot(kind='bar', rot=0, title='Passanger distribution by age')\nax.set_xlabel('Age Quantile (year)')\nax.set_ylabel('Number of Passangers')\nplt.legend(bbox_to_anchor=(1,1))\nplt.show()\nprint('Distribusi penumpang berdasarkan usia:\\n{}\\n'.format(age_plot))\n","c115e38a":"# Survival rate vs Sex\npassanger_by_sex = df_.Sex.value_counts().sort_index()\npassanger_by_sex_survived = df_.groupby('Sex').sum()['Survived']\nsex_plot = pd.DataFrame({'total_passangers':passanger_by_sex,\n              'survived_passangers':passanger_by_sex_survived\n             })\nsex_plot.index.rename('Sex',inplace=True)\n\n# plot\nax_sex = sex_plot.plot(kind='bar', rot=0, title='Passanger distribution by sex')\nax_sex.set_xlabel('Sex')\nax_sex.set_ylabel('Number of Passangers')\nplt.legend(bbox_to_anchor=(1,1))\nplt.show()\n\nprint('Distribusi penumpang berdasarkan jenis kelamin:\\n{}\\n'.format(sex_plot))","447813e0":"# Survival rate vs Pclass \npassanger_by_pclass = df_.Pclass.value_counts().sort_index()\npassanger_by_pclass_survived = df_.groupby('Pclass').sum()['Survived']\npclass_plot = pd.DataFrame({'total_passangers':passanger_by_pclass,\n              'survived_passangers':passanger_by_pclass_survived\n             })\npclass_plot.index.rename('Pclass', inplace=True)\n\npclass_plot = pclass_plot.plot(kind='bar', rot=0, title='Passanger distribution by ticket fare')\npclass_plot.set_xlabel('Pclass')\npclass_plot.set_ylabel('Number of Passangers')\nplt.legend(bbox_to_anchor=(1,1))\nplt.show()\nprint('Distribusi penumpang berdasarkan usia:\\n{}\\n'.format(pclass_plot))","50adf8f4":"df_.groupby('Embarked').agg({'Survived':'sum'})","83a32d0f":"df_train_ = df_train[['Survived','Pclass','Sex','Age','Fare']]\ndf_train_.head()","436495f6":"# encode label\ndf_train_ = pd.get_dummies(df_train_, columns=['Sex'])\ndf_train_.head()","a5386273":"from sklearn.preprocessing import MinMaxScaler\nmmscaler = MinMaxScaler()\ndf_train_.loc[:,['Pclass','Age','Fare']] = mmscaler.fit_transform(df_train.loc[:,['Pclass','Age','Fare']])\ndf_train_.head()","d73b0ebc":"# model\n# split data features and target\nx_train = df_train_.drop('Survived', axis=1)\ny_train = df_train_['Survived']","28607599":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import roc_auc_score","89f805da":"rf = RandomForestClassifier()\nparam_grid = {\n           'n_estimators' : np.arange(4,16,2),\n           'criterion' : ['gini','entropy'],\n           'max_depth' : np.arange(1,10),\n           'min_samples_leaf':np.arange(1,30),\n           'random_state':np.arange(2,30)\n}\nrcv = RandomizedSearchCV(rf, param_grid, scoring='roc_auc', cv=10, return_train_score=True)\nrcv.fit(x_train,y_train)","06b51333":"print('Best parameters :\\n{}\\n'.format(rcv.best_params_))\nprint('Best score :\\n{}\\n'.format(rcv.best_score_))\nprint('Mean train scores :\\n{}\\n'.format(rcv.cv_results_['mean_train_score']))\nprint('Mean test scores :\\n{}\\n'.format(rcv.cv_results_['mean_test_score']))","b8bb3173":"df_test = df_test[['Pclass','Sex','Age','Fare']]\ndf_test.head()","ad9e103f":"df_test.info()","234ba8af":"df_test.isna().sum()","ba8188c5":"# handle missing values\ndf_test.Fare = df_test.Fare.fillna(df_test.Fare.mean())\ndf_test.Age = df_test.Age.fillna(df_test.Age.median())","532703f8":"# encode label\ndf_test = pd.get_dummies(df_test, columns=['Sex'])","705dbf23":"# scale the data\ndf_test.loc[:,['Pclass','Age','Fare']] = mmscaler.fit_transform(df_test.loc[:,['Pclass','Age','Fare']])\ndf_test.head()","5858d55f":"# test model\nresult = rcv.predict(df_test)","d51fd961":"pass_id = pd.read_csv('..\/input\/titanic\/test.csv')['PassengerId']\nresult_csv = pd.DataFrame({'PassengerId':pass_id,\n                           'Survived':result\n                          })\n# save\nresult_csv.to_csv('titanic_prediction_fin.csv', index = False)","ddedf379":"Dari distribusi jumlah penumpang yang selamat berdasarkan harga tiket, kemungkinan hubungan yang dapat disimpulkan adalah bahwa semakin mahal tiket, penumpang akan semakin diprioritaskan untuk diselamatkan. Kemungkinan lain adalah lokasi untuk kelas premium (harga tiket tinggi) mudah dijangkau sehingga penumpang mudah menyelamatkan diri\/diselamatkan","da9bcb15":"Dari data diatas, terlihat bahwa penumpang dengan rentang usia 41-80 tahun (usia lanjut) sangat sedikit yang selamat, jika dibandingkan dengan penumpang pada rentang usia yang lain. Hal ini dapat terjadi kemungkinan karena fisik penumpang usia lanjut tidak cukup kuat untuk bertahan, meskipun penumpang usia lanjut diprioritaskan dalam penyelamatan.","39c4e4ae":"## Exploratory Data Analysis","1b8a11b3":"Kebanyakan penumpang berada direntang usia 20-40 tahun. Wajar jika usia rata-rata penumpang yang survived ada diangka 28.37 yang notabene mendekati angka rataannya\n\nterlihat puncaknya jauh lebih tinggi daripada data lain. hal ini terjadi karena kita mengisi missing values (yg cukup banyak) dengan nilai median\n\nfor more accurate analysis, its better to group the data with another feature or use binning, so we dont make a wrong assumption","77aa0038":"Penumpang dari Southampton paling banyak selamat.","c2b7a18e":"### Test the model","ebab0d9c":"Terlihat bahwa penumpang kelas 1 lebih banyak yang selamat disusul oleh kelas 3, lalu kelas 2. Hal ini dapat terjadi karena penumpang kelas 1 lebih diutamakan dibandingkan kelas lainnya. Penumpang kelas 3 memiliki survival rate lebih tinggi dibandingkan penumpang kelas 2 karena jumlahnya jauh lebih banyak.","7540dcec":"Dari grafik diatas, terlihat bahwa jumlah perempuan yang selamat lebih dari 2x lipat laki-laki, padahal jumlah penumpang laki-laki jauh lebih banyak dibandingkan jumlah penumpang perempuan. Hal ini mungkin terjadi sebab kecenderungan penyelamatan untuk menyelamatkan perempuan terlebih dahulu.","e9b5ab0b":"## Feature engineering","019e4d69":"### 1st ML"}}