{"cell_type":{"300d34e8":"code","6bb5671f":"code","449527c6":"code","9cdcf106":"code","86af2090":"code","a2268a0e":"code","ba683d40":"code","539eeac6":"code","eacd4196":"code","e111836c":"code","b19fd075":"code","be5a85f6":"code","bcc03d74":"code","a6d27b5a":"code","51146e50":"code","c2feed20":"code","0e6fd3f1":"code","e0b5a432":"code","dc10ed3c":"code","674d0b19":"code","888720b1":"code","1295b470":"code","6ae3e7a7":"markdown","e7035b31":"markdown","63c2b7dc":"markdown","60e181fc":"markdown","d6859784":"markdown","ac25786f":"markdown","e4b04b7c":"markdown","174b7501":"markdown","9f8a89cf":"markdown","119eb92f":"markdown","7a5b8416":"markdown","73ffb634":"markdown","fbccb6b5":"markdown","58ad030d":"markdown"},"source":{"300d34e8":"# for kaggle-environments\nfrom lux.game import Game\nfrom lux.game_map import Cell, RESOURCE_TYPES\nfrom lux.constants import Constants\nfrom lux.game_constants import GAME_CONSTANTS\nfrom lux import annotate\nimport math\nimport json","6bb5671f":"!pip install kaggle-environments -U","449527c6":"from kaggle_environments import make","9cdcf106":"# run this if using kaggle notebooks\n!cp -r ..\/input\/lux-ai-2021\/* .","86af2090":"%%writefile Cartographer.py\nimport numpy as np\nfrom lux.constants import Constants\nfrom lux.game_constants import GAME_CONSTANTS\nfrom collections import deque\nfrom IPython.core.display import display, HTML\ndisplay(HTML(\"<style>.container { width:100% !important; }<\/style>\"))\n\nclass Cartographer:\n    def __init__(self, lux_map, player, opponent, observation):\n        self.observation = observation\n        self.height = lux_map.height\n        self.width = lux_map.width\n        self.map = lux_map\n        self.player = player\n        self.opponent = opponent\n        self.city_map = np.zeros([self.width, self.height], np.int16)\n        self.unit_map = np.zeros([self.width, self.height], np.int16)\n        self.fuel_map = np.zeros([self.width, self.height], np.int16)\n        self.resource_map = np.zeros([self.width, self.height], str)\n        self.harvesting_map = np.zeros([self.width, self.height], HarvestingTile)\n        self.resource_clusters = []\n        map_size_dict = {12: \"S\", 16: \"M\", 24: \"L\", 32: \"XL\"}\n        self.map_size = map_size_dict[self.width]\n        self.territory_map = None\n\n    def map_battlefield(self):\n        self.build_city_map()\n        self.build_unit_map()\n        self.build_fuel_map()\n        self.build_resource_map()\n        self.build_harvesting_map()\n\n    \"\"\"\n    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    Some methods to map the battlefield.\n    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    \"\"\"\n\n    def build_city_map(self):\n        \"\"\"\n        Returns a grid with values 0, 1 or 2\n        0: No-city on postion\n        1: Player-city on postion\n        2. Opponent-city on postion\n        \"\"\"\n        player_city_tiles = {(tile.pos.x, tile.pos.y) for city in self.player.cities.values()\n                             for tile in city.citytiles}\n        opponent_city_tiles = {(tile.pos.x, tile.pos.y) for city in self.opponent.cities.values()\n                               for tile in city.citytiles}\n\n        for x in range(self.width):\n            for y in range(self.height):\n                if (x, y) in player_city_tiles:\n                    self.city_map[x][y] = 1\n                elif (x, y) in opponent_city_tiles:\n                    self.city_map[x][y] = 2\n\n    def build_unit_map(self):\n        \"\"\"\n        Returns a grid with values 0, 1 or 2.\n        0: No-unit on postion\n        1: Player-unit on postion\n        2: Opponent-unit on postion\n        \"\"\"\n        player_unit_tiles = {(unit.pos.x, unit.pos.y) for unit in self.player.units}\n        opponent_unit_tiles = {(unit.pos.x, unit.pos.y) for unit in self.opponent.units}\n\n        for x in range(self.width):\n            for y in range(self.height):\n                if (x, y) in player_unit_tiles:\n                    self.unit_map[x][y] = 1\n                elif (x, y) in opponent_unit_tiles:\n                    self.unit_map[x][y] = 2\n\n    def build_fuel_map(self):\n        \"\"\"\n        Returns a grid with the amount of fuel left on each cell from a players perspective. This included the players\n        research level.\n        Can be used for resource cluster evaluation.\n        \"\"\"\n        for x in range(self.width):\n            for y in range(self.height):\n                cell = self.map.get_cell(x, y)\n                if cell.has_resource():\n                    if cell.resource.type == Constants.RESOURCE_TYPES.WOOD:\n                        self.fuel_map[x][y] = 1 * cell.resource.amount\n                    elif cell.resource.type == Constants.RESOURCE_TYPES.COAL and self.player.researched_coal():\n                        self.fuel_map[x][y] = 10 * cell.resource.amount\n                    elif cell.resource.type == Constants.RESOURCE_TYPES.URANIUM and self.player.researched_uranium():\n                        self.fuel_map[x][y] = 40 * cell.resource.amount\n\n    def build_resource_map(self):\n        \"\"\"\n        Returns a grid with values w, c or u.\n        Just for debugging and some simple map visualisations.\n        w: Wood\n        c: Coal\n        u: Uranium\n        \"\"\"\n        for x in range(self.width):\n            for y in range(self.height):\n                cell = self.map.get_cell(x, y)\n                if cell.has_resource():\n                    if cell.resource.type == Constants.RESOURCE_TYPES.WOOD:\n                        self.resource_map[x][y] = \"w\"\n                    elif cell.resource.type == Constants.RESOURCE_TYPES.COAL:\n                        self.resource_map[x][y] = \"c\"\n                    elif cell.resource.type == Constants.RESOURCE_TYPES.URANIUM:\n                        self.resource_map[x][y] = \"u\"\n\n    def build_harvesting_map(self):\n        \"\"\"\n        Builds a grid of HarvestingTiles. The research status of the player is taken into account.\n        \"\"\"\n        for x in range(self.width):\n            for y in range(self.height):\n                cell = self.map.get_cell(x, y)\n                fuel_value_per_turn = 0\n                collection_amount_per_turn = 0\n                num_wood = 0\n                num_coal = 0\n                num_uranium = 0\n                for k, direction in GAME_CONSTANTS[\"DIRECTIONS\"].items():\n                    adjacent_pos = cell.pos.translate(direction, 1)\n                    if (0 <= adjacent_pos.x < self.width) and (0 <= adjacent_pos.y < self.height):\n                        # adjacent_pos is still on map\n                        adjacent_cell = self.map.get_cell(adjacent_pos.x, adjacent_pos.y)\n                        if adjacent_cell.has_resource():\n                            if adjacent_cell.resource.type == Constants.RESOURCE_TYPES.WOOD:\n                                fuel_value_per_turn += 20\n                                collection_amount_per_turn += 20\n                                num_wood += 1\n                            elif adjacent_cell.resource.type == Constants.RESOURCE_TYPES.COAL and \\\n                                    self.player.researched_coal():\n                                fuel_value_per_turn += 50\n                                collection_amount_per_turn += 5\n                                num_coal += 1\n                            elif adjacent_cell.resource.type == Constants.RESOURCE_TYPES.URANIUM and \\\n                                    self.player.researched_uranium():\n                                fuel_value_per_turn += 80\n                                collection_amount_per_turn += 2\n                                num_uranium += 1\n\n                self.harvesting_map[x][y] = HarvestingTile(fuel_value_per_turn, collection_amount_per_turn, num_wood,\n                                                           num_coal, num_uranium)\n\n    def build_territory_map(self):\n        \"\"\"\n        With this map we can decide whether a resource tile is on the player's side rather than on the opponent's side.\n        Note: Only works if both starting cities are alive. Use this in turn one and save the output globally.\n        \"\"\"\n        territory_map = np.zeros([self.width, self.height], np.int16)\n        player_city = None\n        opponent_city = None\n\n        if len(self.player.cities.keys()) > 0:\n            player_city = self.player.cities[list(self.player.cities.keys())[0]]\n        if len(self.opponent.cities.keys()) > 0:\n            opponent_city = self.opponent.cities[list(self.opponent.cities.keys())[0]]\n\n        if (player_city is not None) and (opponent_city is not None):\n            # get mirror axis:\n            if player_city.citytiles[0].pos.x == opponent_city.citytiles[0].pos.x:\n                # mirror_axis --> x\n                for x in range(self.width):\n                    for y in range(self.height):\n                        if y < self.height \/ 2:\n                            if player_city.cityid == \"c_1\":\n                                territory_map[x][y] = 1\n                            else:\n                                territory_map[x][y] = 2\n                        else:\n                            if player_city.cityid == \"c_1\":\n                                territory_map[x][y] = 2\n                            else:\n                                territory_map[x][y] = 1\n            else:\n                # mirror_axis --> y\n                for x in range(self.width):\n                    for y in range(self.height):\n                        if x < self.width \/ 2:\n                            if player_city.cityid == \"c_1\":\n                                territory_map[x][y] = 1\n                            else:\n                                territory_map[x][y] = 2\n                        else:\n                            if player_city.cityid == \"c_1\":\n                                territory_map[x][y] = 2\n                            else:\n                                territory_map[x][y] = 1\n        else:\n            print(\"can't build territory_map\")\n        return territory_map\n\n    def build_resource_cluster(self):\n        \"\"\"\n        Builds list of ResourceClusters.\n        Note: clusters that connect diagonal are not counting as one cluster. (They are added together later)\n        \"\"\"\n        directions = [[0, 1], [1, 0], [0, -1], [-1, 0]]\n        mapped_tiles = set()\n        for x in range(self.width):\n            for y in range(self.height):\n                if (x, y) not in mapped_tiles:\n                    cell = self.map.get_cell(x, y)\n                    if cell.has_resource():\n                        # build cluster:\n                        resource_cluster = ResourceCluster(map_size=self.map_size)\n                        resource_tile = ResourceTile(pos_tuple=(x, y), resource_type=self.resource_map[x][y],\n                                                     fuel_amount=self.fuel_map[x][y])\n                        resource_cluster.add_resource_tile(resource_tile=resource_tile)\n                        mapped_tiles.add((x, y))\n                        cluster_discovered = False\n                        tiles_to_visit = set()\n                        while not cluster_discovered:\n                            for d in directions:\n                                new_x = x + d[0]\n                                new_y = y + d[1]\n                                if (new_x, new_y) not in mapped_tiles:\n                                    # check if tile is on map.\n                                    if (0 <= new_x < self.width) and (0 <= new_y < self.height):\n                                        cell = self.map.get_cell(new_x, new_y)\n                                        if cell.has_resource():\n                                            resource_tile = ResourceTile(pos_tuple=(new_x, new_y),\n                                                                         resource_type=self.resource_map[new_x][new_y],\n                                                                         fuel_amount=self.fuel_map[new_x][new_y])\n                                            resource_cluster.add_resource_tile(resource_tile=resource_tile)\n                                            mapped_tiles.add((new_x, new_y))\n                                            tiles_to_visit.add((new_x, new_y))\n                            if len(tiles_to_visit) == 0:\n                                cluster_discovered = True\n                            else:\n                                x, y = tiles_to_visit.pop()\n                        resource_cluster.check_surrounding(map_width=self.width, map_height=self.height,\n                                                           city_map=self.city_map, player=self.player,\n                                                           opponent=self.opponent, unit_map=self.unit_map,\n                                                           territory_map=self.territory_map)\n                        self.resource_clusters.append(resource_cluster)\n        # add clusters that are diagonally connected together.\n        all_connected = False\n        combined_clusters = []\n        clusters = set(self.resource_clusters.copy())\n        joint_clusters = set()\n        if len(clusters) > 0:\n            while not all_connected:\n                cluster = clusters.pop()\n                combined = False\n                if cluster not in joint_clusters:\n                    other_clusters = [c for c in clusters if c not in joint_clusters]\n                    for other_cluster in other_clusters:\n                        for r1_tile in cluster.resource_tiles:\n                            for r2_tile in other_cluster.resource_tiles:\n                                dist = self.distance(origin=r1_tile.pos, destination=r2_tile.pos)\n                                if dist == 2:\n                                    # check for diagonal connection.\n                                    if (r1_tile.pos[0] != r2_tile.pos[0]) and (r1_tile.pos[1] != r2_tile.pos[1]):\n                                        # --> diagonal connection:\n                                        joint_clusters.add(other_cluster)\n                                        joint_clusters.add(cluster)\n                                        cluster += other_cluster\n                                        combined = True\n                                        break\n\n                if combined:\n                    clusters.add(cluster)\n                else:\n                    if cluster not in joint_clusters:\n                        combined_clusters.append(cluster)\n                if len(clusters) == 0:\n                    all_connected = True\n        self.resource_clusters = combined_clusters\n\n    \"\"\"\n    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    Some basic distance methods.\n    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    \"\"\"\n\n    @staticmethod\n    def distance(origin, destination):\n        \"\"\"\n        Return Manhatten distance between two points.\n        :param origin: list [x, y]\n        :param destination: list [x, y]\n        :return: int\n        \"\"\"\n        return np.abs(origin[0] - destination[0]) + np.abs(origin[1] - destination[1])\n\n    @staticmethod\n    def distance_with_obstacles(obstacles_map, origin, destination):\n        \"\"\"\n        Return the shortest distance between two point without moving over obstacles given a grid of obstacles. An\n        obstacles is identified by any value greater then 0 in the given grid.\n        If no way is found we return 1000.\n        \"\"\"\n        obstacles_map[origin[0]][origin[1]] = 0  # the starting position cant be an obstacle\n        directions = [[0, 1], [1, 0], [0, -1], [-1, 0]]\n        q = deque()\n        origin.append(0)\n        q.append(origin)  # [row, col, distance]\n\n        visited = set()\n        while len(q) > 0:\n            cr, cc, c_dist = q.popleft()\n            if cr == destination[0] and cc == destination[1]:\n                return c_dist\n            if obstacles_map[cr][cc] >= 1:  #\n                # obstacle\n                continue\n            for direction in directions:\n                nr, nc = cr + direction[0], cc + direction[1]\n                if 0 <= nr < len(obstacles_map) and 0 <= nc < len(obstacles_map[0]) and (nr, nc) not in visited:\n                    q.append([nr, nc, c_dist + 1])\n                    visited.add((nr, nc))\n        return 1000\n\n    @staticmethod\n    def distance_to_district(pos, district_mayor):\n        \"\"\"\n        Return the distance and the closes tile from a position to a district.\n        :param pos: pos tuple\n        :param district_mayor: DistrictMayor\n        :return: distance, pos\n        \"\"\"\n        min_tile_dist = np.inf\n        closest_tile_pos = None\n        for city_tile in district_mayor.city.citytiles:\n            dist = Cartographer.distance(origin=[pos[0], pos[1]], destination=[city_tile.pos.x, city_tile.pos.y])\n            if dist < min_tile_dist:\n                min_tile_dist = dist\n                closest_tile_pos = (city_tile.pos.x, city_tile.pos.y)\n        if min_tile_dist < 100:\n            return min_tile_dist, closest_tile_pos\n        else:\n            return 1000, None\n\n    @staticmethod\n    def distance_cluster_to_district(cluster, district_mayor):\n        \"\"\"\n        Calculate the min distance between a ResourceCluster and a DistrictMajor\n        :param cluster: ResourceCluster\n        :param district_mayor: DistrictMajor\n        :return: Min distance between both clusters as distance.\n        \"\"\"\n        min_dist = np.inf\n        dist = 1000\n        for resource_tile in cluster.resource_tiles:\n            dist, _ = Cartographer.distance_to_district(pos=resource_tile.pos, district_mayor=district_mayor)\n            if dist < min_dist:\n                min_dist = dist\n        return dist\n\n    @staticmethod\n    def distance_to_cluster(pos, cluster):\n        \"\"\"\n        Distance between a position and a resource cluster.\n        :param pos: position tuple.\n        :param cluster: ResourceCluster\n        :return: distance , closest tile pos\n        \"\"\"\n        min_tile_dist = np.inf\n        closest_tile_pos = None\n        resource_positions = set([rt.pos for rt in cluster.resource_tiles])\n        for tile_pos in cluster.surrounding_tiles_pos.union(resource_positions):\n            dist = Cartographer.distance(origin=pos, destination=tile_pos)\n            if dist < min_tile_dist:\n                min_tile_dist = dist\n                closest_tile_pos = tile_pos\n        if closest_tile_pos is not None:\n            return min_tile_dist, closest_tile_pos\n        else:\n            return 1000, None\n\n    @staticmethod\n    def distance_cluster_to_cluster(cluster1, cluster2):\n        \"\"\"\n        Calculates the distance between two resource clusters.\n        :param cluster1: ResourceCluster\n        :param cluster2: ResourceCluster\n        :return: distance , closest tile pos 1, closest tile pos 2\n        \"\"\"\n        connection_tile_pos_1 = None\n        connection_tile_pos_2 = None\n        min_dist = np.inf\n        for tile_pos in cluster1.surrounding_tiles_pos:\n            dist, tile_2_pos = Cartographer.distance_to_cluster(pos=tile_pos, cluster=cluster2)\n            if dist < min_dist:\n                min_dist = dist\n                connection_tile_pos_1 = tile_pos\n                connection_tile_pos_2 = tile_2_pos\n        if connection_tile_pos_1 is not None:\n            return min_dist, connection_tile_pos_1, connection_tile_pos_2\n        else:\n            return 1000, None, None\n\n    @staticmethod\n    def distance_district_to_district(district1, district2):\n        \"\"\"\n        Calculates the distance between two resource clusters.\n        :param district1: DistrictMayor\n        :param district2: DistrictMayor\n        :return: distance , closest tile pos 1, closest tile pos 2\n        \"\"\"\n        connection_tile_pos_1 = None\n        connection_tile_pos_2 = None\n        min_dist = np.inf\n        for tile_pos in district1.city_tiles_positions:\n            dist, tile_2_pos = Cartographer.distance_to_district(pos=tile_pos, district_mayor=district2)\n            if dist < min_dist:\n                min_dist = dist\n                connection_tile_pos_1 = tile_pos\n                connection_tile_pos_2 = tile_2_pos\n        if connection_tile_pos_1 is not None:\n            return min_dist, connection_tile_pos_1, connection_tile_pos_2\n        else:\n            return 1000, None, None\n\n\nclass HarvestingTile:\n    \"\"\"\n    Stores harvesting information per tile.\n    fuel_value_per_turn: The maximal amount of collected fuel per turn.\n    collection_amount_per_turn: the amount of collectible resources per turn.\n    num_wood: num reachable wood tiles\n    num_coal: num reachable coal tiles\n    num_uranium: num reachable uranium tiles\n    \"\"\"\n    def __init__(self, fuel_value_per_turn, collection_amount_per_turn, num_wood, num_coal, num_uranium):\n        self.fuel_value_per_turn = fuel_value_per_turn\n        self.collection_amount_per_turn = collection_amount_per_turn\n        self.num_wood = num_wood\n        self.num_coal = num_coal\n        self.num_uranium = num_uranium\n\n\nclass ResourceTile:\n    def __init__(self, pos_tuple, resource_type, fuel_amount):\n        self.pos = pos_tuple\n        self.resource_type = resource_type\n        self.fuel_amount = fuel_amount\n\n\nclass ResourceCluster:\n    \"\"\"\n    This class hold resource cluster specific information.\n    \"\"\"\n    def __init__(self, map_size):\n        self.map_size = map_size\n        self.resource_tiles = set()\n        self.size = 0\n        self.fuel_amount = 0\n        self.cluster_type = None\n        self.surrounding_tiles_pos = set()\n        self.territory = None  # can be None p for player o for opponent or b for both\n        self.captured_by = None  # can be None p for player o for opponent or b for both\n        self.attached_player_city_tiles_pos = set()\n        self.attached_opponent_city_tiles_pos = set()\n        self.unguarded_expansion_pos = set()\n        self.close_opponent_units = []\n        self.min_dist_to_opponent_unit = np.inf\n        self.num_surrounding_units = 0\n        self.num_surrounding_opponent_units = 0\n        self.num_possible_expansions = 0\n        self.num_wood_tiles = 0\n        self.num_send_blockers = 0\n\n    def __add__(self, other):\n        \"\"\"\n        Adds two clusters together.\n        \"\"\"\n        new_cluster = ResourceCluster(map_size=self.map_size)\n        new_cluster.resource_tiles = set.union(self.resource_tiles, other.resource_tiles)\n        new_cluster.size = self.size + other.size\n        new_cluster.fuel_amount = self.fuel_amount + other.fuel_amount\n        combined_cluster_types = sorted(set([t for t in self.cluster_type] + [t for t in other.cluster_type]))\n        new_cluster.cluster_type = \"\".join(combined_cluster_types)\n        new_cluster.surrounding_tiles_pos = set.union(self.surrounding_tiles_pos, other.surrounding_tiles_pos)\n        if self.territory == other.territory:\n            new_cluster.territory = self.territory\n        else:\n            new_cluster.territory = \"b\"\n\n        if self.captured_by == other.captured_by:\n            if self.captured_by is None:\n                new_cluster.captured_by = None\n            else:\n                new_cluster.captured_by = self.captured_by\n        elif self.captured_by != other.captured_by:\n            if self.captured_by is None:\n                new_cluster.captured_by = other.captured_by\n            elif other.captured_by is None:\n                new_cluster.captured_by = self.captured_by\n            else:\n                new_cluster.captured_by = \"b\"\n\n        new_cluster.attached_player_city_tiles_pos = set.union(self.attached_player_city_tiles_pos,\n                                                               other.attached_player_city_tiles_pos)\n        new_cluster.attached_opponent_city_tiles_pos = set.union(self.attached_opponent_city_tiles_pos,\n                                                                 other.attached_opponent_city_tiles_pos)\n        new_cluster.unguarded_expansion_pos = set.union(self.unguarded_expansion_pos, other.unguarded_expansion_pos)\n        new_cluster.min_dist_to_opponent_unit = min(self.min_dist_to_opponent_unit, other.min_dist_to_opponent_unit)\n        new_cluster.num_surrounding_units = self.num_surrounding_units + other.num_surrounding_units\n        new_cluster.num_surrounding_opponent_units = \\\n            self.num_surrounding_opponent_units + other.num_surrounding_opponent_units\n        new_cluster.num_possible_expansions = self.num_possible_expansions + other.num_possible_expansions\n        new_cluster.num_wood_tiles = self.num_wood_tiles + other.num_wood_tiles\n        new_cluster.num_send_blockers = self.num_send_blockers + other.num_send_blockers\n        return new_cluster\n\n    def unit_is_in_cluster(self, unit):\n        \"\"\"\n        Checks if a unit is part of a resource cluster. (Standing on or around it)\n        :param unit: luc unit\n        :return: boolean\n        \"\"\"\n        is_part_of_cluster = False\n        if (unit.pos.x, unit.pos.y) in [rt.pos for rt in self.resource_tiles]:\n            is_part_of_cluster = True\n        if (unit.pos.x, unit.pos.y) in self.surrounding_tiles_pos:\n            is_part_of_cluster = True\n        return is_part_of_cluster\n\n    def add_resource_tile(self, resource_tile):\n        self.resource_tiles.add(resource_tile)\n        self.size += 1\n        self.fuel_amount += resource_tile.fuel_amount\n        if self.cluster_type is None:\n            self.cluster_type = resource_tile.resource_type\n        else:\n            if resource_tile.resource_type not in self.cluster_type:\n                self.cluster_type += resource_tile.resource_type\n                sorted_items = sorted(self.cluster_type)\n                self.cluster_type = \"\".join(sorted_items)\n\n    def check_surrounding(self, map_width, map_height, city_map, player, opponent, unit_map, territory_map):\n        \"\"\"\n        Checks the surrounding for this cluster and fills all its properties.\n        :param map_width: lux map width\n        :param map_height: lux map height\n        :param city_map: Cartographer.city_map\n        :param player: lux player\n        :param opponent: lux opponent\n        :param unit_map: Cartographer.unit_map\n        :param territory_map: Cartographer.territory_map\n        :return:\n        \"\"\"\n        surrounding_tiles_pos = set()\n        resource_tiles_pos = [(rt.pos[0], rt.pos[1]) for rt in self.resource_tiles]\n        directions = [[0, 1], [1, 0], [0, -1], [-1, 0]]\n        for tile in self.resource_tiles:\n            for d in directions:\n                new_x = tile.pos[0] + d[0]\n                new_y = tile.pos[1] + d[1]\n                if (0 <= new_x < map_width) and (0 <= new_y < map_height):\n                    if ((new_x, new_y) not in surrounding_tiles_pos) and ((new_x, new_y) not in resource_tiles_pos):\n                        surrounding_tiles_pos.add((new_x, new_y))\n        self.surrounding_tiles_pos = surrounding_tiles_pos\n\n        for pos in surrounding_tiles_pos:\n            if city_map[pos[0]][pos[1]] == 1:\n                # player city_tile\n                self.attached_player_city_tiles_pos.add(pos)\n            elif city_map[pos[0]][pos[1]] == 2:\n                # opponent city_tile\n                self.attached_opponent_city_tiles_pos.add(pos)\n            else:\n                # free spot:\n                self.num_possible_expansions += 1\n\n        if len(self.attached_player_city_tiles_pos) > 0:\n            if len(self.attached_opponent_city_tiles_pos) > 0:\n                self.captured_by = \"b\"\n            else:\n                self.captured_by = \"p\"\n        else:\n            if len(self.attached_opponent_city_tiles_pos) > 0:\n                self.captured_by = \"o\"\n\n        # check for closes opponent.\n        opponent_obstacle_map = city_map.copy()\n        for x in range(len(city_map)):\n            for y in range(len(city_map[0])):\n                if unit_map[x][y] == 1:\n                    opponent_obstacle_map[x][y] = 1\n        # --> units and city tiles count as obstacle for opponent units.\n        \"\"\"\n        Note: If no unit is around 10 tiles the default value will be 100,\n        \"\"\"\n        close_opponent_units = []\n        min_dist = 100\n        for tile in resource_tiles_pos:\n            for unit in opponent.units:\n                dist = Cartographer.distance(origin=(unit.pos.x, unit.pos.y), destination=tile)\n                if dist < 8:\n                    dist = Cartographer.distance_with_obstacles(origin=[unit.pos.x, unit.pos.y], destination=tile,\n                                                                obstacles_map=opponent_obstacle_map)\n                    if dist < min_dist:\n                        if self.map_size in [\"S\", \"M\"]:\n                            if dist <= 3:\n                                close_opponent_units.append([unit, dist])\n                        elif self.map_size in [\"L\", \"XL\"]:\n                            if dist <= 6:\n                                close_opponent_units.append([unit, dist])\n                        min_dist = dist\n        close_opponent_units = sorted(close_opponent_units, key=lambda k: k[1])\n        close_opponent_units = [c[0] for c in close_opponent_units]\n        self.close_opponent_units = close_opponent_units\n        self.min_dist_to_opponent_unit = min_dist\n\n        # check number of surrounding player units.\n        for pos in surrounding_tiles_pos:\n            if unit_map[pos[0]][pos[1]] == 1:\n                if city_map[pos[0]][pos[1]] == 1:\n                    # city tile --> check for more then on unit if\n                    num_units = len([u for u in player.units if (u.pos.x, u.pos.y) == pos])\n                    self.num_surrounding_units += num_units\n                else:\n                    self.num_surrounding_units += 1\n            else:\n                # no unit is standing on this tile:\n                if city_map[pos[0]][pos[1]] == 0:\n                    # no city tile on this position\n                    self.unguarded_expansion_pos.add(pos)\n        for pos in resource_tiles_pos:\n            if unit_map[pos[0]][pos[1]] == 1:\n                self.num_surrounding_units += 1\n\n        # check number of surrounding opponent units.\n        if self.min_dist_to_opponent_unit < 2:\n\n            for pos in self.surrounding_tiles_pos.union(resource_tiles_pos):\n                if unit_map[pos[0]][pos[1]] == 2:\n                    if city_map[pos[0]][pos[1]] == 2:\n                        num_units = len([u for u in opponent.units if (u.pos.x, u.pos.y) == pos])\n                        self.num_surrounding_opponent_units += num_units\n                    else:\n                        self.num_surrounding_opponent_units += 1\n\n        # check territory:\n        for tile in self.resource_tiles:\n            if territory_map[tile.pos[0]][tile.pos[1]] == 1:\n                # player territory\n                if self.territory is None:\n                    self.territory = \"p\"\n                elif self.territory == \"o\":\n                    self.territory = \"b\"\n                    break\n            if territory_map[tile.pos[0]][tile.pos[1]] == 2:\n                # opponent territory\n                if self.territory is None:\n                    self.territory = \"o\"\n                elif self.territory == \"p\":\n                    self.territory = \"b\"\n                    break\n\n        # count_num_wood_tiles:\n        self.num_wood_tiles = len([rt for rt in self.resource_tiles if rt.resource_type == \"w\"])\n\n    def show(self):\n        \"\"\"\n        For debugging.\n        \"\"\"\n        print(30 * \"-\")\n        print(f\"size: {self.size}\")\n        print(f\"fuel_amount: {self.fuel_amount}\")\n        print(f\"cluster_type: {self.cluster_type}\")\n        print(f\"territory: {self.territory}\")\n        print(f\"captures_by: {self.captured_by}\")\n        print(f\"min_dist_to_opponent_unit: {self.min_dist_to_opponent_unit}\")\n        print(f\"num_surrounding_units: {self.num_surrounding_units}\")\n        print(f\"num_possible_expansions: {self.num_possible_expansions}\")\n        print(f\"unguarded_expansion_pos: {self.unguarded_expansion_pos}\")\n        print(f\"num_wood_tiles: {self.num_wood_tiles}\")\n        print(30 * \"-\")\n","a2268a0e":"%%writefile agent.py\nfrom lux.game import Game\nfrom lux.game_map import Cell, RESOURCE_TYPES\nfrom lux.constants import Constants\nfrom lux.game_constants import GAME_CONSTANTS\nfrom lux import annotate\nfrom Cartographer import Cartographer\ngame_state = None\n\ndef agent(observation, configuration):\n    global game_state\n    global night_steps_left\n    global territory_map\n\n\n    if observation[\"step\"] == 0:\n        game_state = Game()\n        game_state._initialize(observation[\"updates\"])\n        game_state._update(observation[\"updates\"][2:])\n        game_state.id = observation.player\n    else:\n        game_state._update(observation[\"updates\"])\n\n    actions = []\n\n    player = game_state.players[observation.player]\n    opponent = game_state.players[(observation.player + 1) % 2]\n\n    if observation[\"step\"] == 0:\n        \"\"\"\n        Set some initial variables:\n        \"\"\"\n        night_steps_left = 90\n        cartographer = Cartographer(lux_map=game_state.map, player=player, opponent=opponent, observation=observation)\n        territory_map = cartographer.build_territory_map()\n\n    cartographer = Cartographer(lux_map=game_state.map, player=player, opponent=opponent, observation=observation)\n    cartographer.territory_map = territory_map\n    cartographer.map_battlefield()\n    cartographer.build_resource_cluster()\n    \n    # show territory_map in step 1\n    if (observation[\"step\"] == 1):\n        for x in range(cartographer.width):\n            for y in range(cartographer.height):\n                if territory_map[x][y] == 1:\n                    actions.append(annotate.circle(x, y))\n                if territory_map[x][y] == 2:\n                    actions.append(annotate.x(x, y))\n    \n    # show resource clusters in step 2.\n    if (observation[\"step\"] >= 2):\n        for rc in cartographer.resource_clusters:\n            resource_positions = [rp.pos for rp in rc.resource_tiles]\n            for rp in resource_positions:\n                actions.append(annotate.circle(rp[0], rp[1]))\n            for sp in rc.surrounding_tiles_pos:\n                actions.append(annotate.x(sp[0], sp[1]))\n\n    return actions","ba683d40":"env = make(\"lux_ai_2021\", configuration={\"seed\": 798047131, \"loglevel\": 1, \"annotations\" : True}, debug=True)\nsteps = env.run([\".\/agent.py\", \".\/agent.py\"])\nenv.render(mode=\"ipython\", width=1200, height=800)","539eeac6":"%%writefile MovementOfficer.py\nfrom Cartographer import Cartographer\nimport numpy as np\nfrom General import OrderType\n\n\nclass MovementOfficer:\n    \"\"\"\n    Handles movement orders.\n    \"\"\"\n    def __init__(self, step, city_map, unit_map, player, opponent, lux_map, harvesting_map):\n        self.direction_dict = {\"e\": [1, 0], \"s\": [0, 1], \"w\": [-1, 0], \"n\": [0, -1]}\n        self.step = step\n        self.unit_map = unit_map\n        self.city_map = city_map\n        self.player = player\n        self.opponent = opponent\n        self.obstacles_map = np.zeros([len(self.unit_map), len(self.unit_map[0])], np.int16)\n        self.builder_obstacles_map = np.zeros([len(self.unit_map), len(self.unit_map[0])], np.int16)\n        self.map = lux_map\n        self.harvesting_map = harvesting_map\n        self.movement_map = np.zeros([len(self.unit_map), len(self.unit_map[0])], object)\n        self.day = None\n\n    def build_movement_map(self, orders):\n        \"\"\"\n        Builds movement map with orders in mind.\n        A builder which is at his building position can't be moved even if he hast cd == 0.\n        :param orders: List of orders.\n        \"\"\"\n        for player_unit in self.player.units:\n            if player_unit.cooldown > 0:\n                # unit wont move this turn;\n                self.movement_map[player_unit.pos.x][player_unit.pos.y] = \"x\"\n            else:\n                # check if unit could be moved and if it has an order to do something.\n                unit_order = [o for o in orders if o.unit == player_unit]\n                if len(unit_order) == 1:\n                    # unit could move but has an order\n                    if (unit_order[0].order_type == OrderType.Expansion) and (unit_order[0].dist == 0):\n                        # builder standing on his expansion spot --> can't be moved\n                        self.movement_map[player_unit.pos.x][player_unit.pos.y] = \"x\"\n                    elif unit_order[0].dist == 0:\n                        # todo: potential for improvements. Move harvesting units for example in favor of other\n                        #  harvesting units\n                        # some other unit with order and cd 0 that sits on its destination.\n                        self.movement_map[player_unit.pos.x][player_unit.pos.y] = \"x\"\n                    else:\n                        # some units with move order that is not at its destination. Move this unit first.\n                        self.movement_map[player_unit.pos.x][\n                            player_unit.pos.y] = f\"p {player_unit.id} {1}\"  # 1 == Has order\n                else:\n                    # unit could move and has no order\n                    self.movement_map[player_unit.pos.x][player_unit.pos.y] = f\"p {player_unit.id} {0}\"  # 0 == No order\n\n        for opp_unit in self.opponent.units:\n            if opp_unit.cooldown > 0:\n                # unit wont move this turn;\n                self.movement_map[opp_unit.pos.x][opp_unit.pos.y] = \"x\"\n            else:\n                # unit could move\n                self.movement_map[opp_unit.pos.x][opp_unit.pos.y] = \"x\"\n\n        for x in range(len(self.city_map)):\n            for y in range(len(self.city_map[0])):\n                if self.city_map[x][y] == 2:\n                    # opponent city tile:\n                    self.movement_map[x][y] = \"x\"\n\n                elif self.city_map[x][y] == 1:\n                    # player city tile\n                    self.movement_map[x][y] = \"c\"\n        return self.movement_map\n\n    def get_possible_directions_for_unit(self, unit, destination, is_builder, is_returning_harvester,\n                                         use_obstacle_maps=False):\n        \"\"\"\n        Greedy ....\n        \"\"\"\n        possible_directions_dict = {}\n        distances = []\n\n        if is_builder:\n            cargo = 100 - unit.get_cargo_space_left()\n            if cargo < 60:\n                # treat builder as normal unit:\n                is_builder = False\n\n        for key, value in self.direction_dict.items():\n            new_x, new_y = unit.pos.x + value[0], unit.pos.y + value[1]\n            if (0 <= new_x < self.map.width) and (0 <= new_y < self.map.height):\n                # new position is on map. --> check for obstacles:\n                if use_obstacle_maps:\n                    if is_builder or is_returning_harvester:\n                        if self.builder_obstacles_map[new_x][new_y] == 0:\n                            dist = Cartographer.distance(origin=[new_x, new_y], destination=destination)\n                            distances.append(dist)\n                            possible_directions_dict[key] = [(new_x, new_y), dist, (new_x == destination[0])\n                                                             or (new_y == destination[1])]\n                            # new_position, distance to destination, on the same axis\n                    else:\n                        if self.obstacles_map[new_x][new_y] == 0:\n                            dist = Cartographer.distance(origin=[new_x, new_y], destination=destination)\n                            distances.append(dist)\n                            possible_directions_dict[key] = [(new_x, new_y), dist, (new_x == destination[0])\n                                                             or (new_y == destination[1])]\n                        # new_position, distance to destination, on the same axis\n\n                else:\n                    # use movement_map\n                    if self.movement_map[new_x][new_y] != \"x\":\n                        if is_builder or is_returning_harvester:\n                            if self.movement_map[new_x][new_y] != \"c\":\n                                dist = Cartographer.distance(origin=[new_x, new_y], destination=destination)\n                                distances.append(dist)\n                                possible_directions_dict[key] = [(new_x, new_y), dist, (new_x == destination[0])\n                                                                 or (new_y == destination[1])]\n                                # new_position, distance to destination, on the same axis\n                        else:\n                            dist = Cartographer.distance(origin=[new_x, new_y], destination=destination)\n                            distances.append(dist)\n                            possible_directions_dict[key] = [(new_x, new_y), dist, (new_x == destination[0])\n                                                             or (new_y == destination[1])]\n                            # new_position, distance to destination, on the same axis\n\n        shortest_directions = [k for k, v in possible_directions_dict.items() if v[1] == min(distances)]\n        if len(shortest_directions) > 1:\n            # exclude opposite direction\n            shortest_directions_ex_opposite = [k for k in shortest_directions if not possible_directions_dict[k][2]]\n            if len(shortest_directions_ex_opposite) > 1:\n                # choose random direction between the other\n                possible_directions = shortest_directions_ex_opposite\n            elif len(shortest_directions_ex_opposite) == 1:\n                possible_directions = shortest_directions_ex_opposite\n            else:\n                # len(shortest_directions_ex_opposite) == 0\n                # this means that the destination is diagonal to the origin.\n                # So we choose one at random.\n                possible_directions = shortest_directions\n        elif len(shortest_directions) == 1:\n            possible_directions = shortest_directions\n        else:\n            possible_directions = []\n\n        return possible_directions\n\n    def move_units(self, move_orders):\n        \"\"\"\n        Main method of MevementOfficer.\n        Logic: The idea is that we try to move each unit towards its destination\n        without collisions and blockades. So we start with units that have free movement options. Imagine a chain of\n        five units that all have the same destination. Here we make sure that the movement action is performed in such\n        a way thatthat the first unit (at the head of the chain) is moved first, and then the second unit is moved to\n        the old place of the first unit and so on. If a unit without an order and cd = 0 blocks a unit with an order,\n        we move that unit out of the way.\n\n        :param move_orders: list of move orders.\n        \"\"\"\n        actions = []\n        unit_movement_options = set()\n        for order in move_orders:\n\n            directions = self.get_possible_directions_for_unit(\n                unit=order.unit, destination=order.pos,\n                is_returning_harvester=((order.order_type == OrderType.Harvest_Return) and (order.dist > 1)),\n                is_builder=order.order_type == OrderType.Expansion)\n\n            unit_movement_options.add(MovementOptions(order=order, directions=directions,\n                                                      harvesting_map=self.harvesting_map,\n                                                      movement_map=self.movement_map, day=self.day))\n\n        def try_to_move_unit_without_order(unit_id, blocked_positions):\n            \"\"\"\n            Check if there is a spot where the unit can move without blocking another possibility of movement.\n            :return: bool\n            \"\"\"\n            can_be_moved = False\n            evasive_pos = ()\n            evasive_direction = None\n            unit = [u for u in self.player.units if u.id == unit_id]\n            if len(unit) > 0:\n                unit = unit[0]\n                for direction, delta in self.direction_dict.items():\n                    new_x = unit.pos.x + delta[0]\n                    new_y = unit.pos.y + delta[1]\n                    if (0 <= new_x < self.map.width) and (0 <= new_y < self.map.height):\n                        if (self.movement_map[new_x][new_y] == \"c\" or self.movement_map[new_x][new_y] == 0) and \\\n                                ((new_x, new_y) not in blocked_positions):\n                            evasive_direction = direction\n                            evasive_pos = (new_x, new_y)\n                            can_be_moved = True\n                            break\n            if can_be_moved:\n                # We move the unit and update our Movement map. Other units cant be moved to this position.\n                self.movement_map[evasive_pos[0]][evasive_pos[1]] = \"x\"\n                if self.movement_map[unit.pos.x][unit.pos.y][0] == \"p\":\n                    self.movement_map[unit.pos.x][unit.pos.y] = 0\n                for v in unit_movement_options:\n                    v.remove_option_direction(pos=(evasive_pos[0], evasive_pos[1]))\n                    v.build_options_from_directions()\n                actions.append(unit.move(evasive_direction))\n                return True\n            else:\n                return False\n\n        def assign_position(move_action):\n            \"\"\"\n            Moves unit from move action to best direction.\n            Removes the given spots from all other Move Actions after adding the move actions.\n            Resets all other options for the moved unit.\n            :param move_action: MoveAction\n            :return:\n            \"\"\"\n            actions.append(move_action.order.unit.move(move_action.best_option.direction))\n            self.movement_map[move_action.best_option.pos[0]][move_action.best_option.pos[1]] = \"x\"\n            if self.movement_map[move_action.order.unit.pos.x][move_action.order.unit.pos.y][0] == \"p\":\n                # update movement map. If this unit was a blocker --> remove it. Otherwise it was standing on a city and\n                # we leave the entry as \"c.\n                self.movement_map[move_action.order.unit.pos.x][move_action.order.unit.pos.y] = 0\n            for v in unit_movement_options:\n                v.remove_option_direction(pos=move_action.best_option.pos)\n                v.build_options_from_directions()\n\n        loop_move_actions = set()\n\n        def stay(move_action):\n            \"\"\"\n            Assing unit to its current spot and mark this spot on the movement map as obstacle.\n            :param move_action:\n            :return:\n            \"\"\"\n            self.movement_map[move_action.order.unit.pos.x][move_action.order.unit.pos.y] = \"x\"\n            for v in unit_movement_options:\n                v.remove_option_direction(pos=(move_action.order.unit.pos.x, move_action.order.unit.pos.y))\n                v.build_options_from_directions()\n\n        def try_to_execute_move_action(move_action):\n\n            if move_action.can_move and not move_action.best_option.collision:\n                # has a best option that will not collide with other units.\n                # check if another unit wants to go there:\n                possible_collision = False\n                critical_collision = False\n                for v in unit_movement_options:\n                    if v.order.unit.id != move_action.order.unit.id:\n                        if v.includes_option_with_position(pos=move_action.best_option.pos):\n                            if v.num_options == 1:\n                                possible_collision = True\n                                critical_collision = True\n                            else:\n                                possible_collision = True\n                if critical_collision:\n\n                    if move_action.num_options == 1:\n                        # we have a critical collision and both unit can only move on that single tile.\n                        # --> prefer builder\n                        if move_action.order.order_type == OrderType.Expansion:\n                            # if i am a builder --> take the spot. Else --> don't move\n                            assign_position(move_action=move_action)\n                        else:\n                            # i am not a builder and therefor i will not move\n                            stay(move_action)\n                    elif move_action.num_options > 1:\n                        # we have a collision and at least one unit can only move on that one tile in our best option.\n                        # But we have other option. Try them first.\n                        move_action.remove_option_direction(pos=move_action.best_option.pos)\n                        move_action.build_options_from_directions()\n                        try_to_execute_move_action(move_action=move_action)\n                else:\n                    # no critical collision\n                    if possible_collision:\n                        # we have a possible collision but all other units have at least one additional option.\n                        # --> just move\n                        assign_position(move_action=move_action)\n                    else:\n                        # no collision at all. We can move:\n                        assign_position(move_action=move_action)\n            elif move_action.can_move and move_action.best_option.collision:\n                # we have a best option but we will collide with other units.\n                if move_action.best_option.collision_unit_has_order:\n                    # our_best_option will collide with another unit with an order.\n                    if move_action in loop_move_actions:\n                        # we are in a loop --> try to move this unit if possible:\n                        if move_action.num_options > 1:\n                            # we have additional options: --> remove best option and add updated move action.\n                            loop_move_actions.remove(move_action)\n                            move_action.remove_option_direction(pos=move_action.best_option.pos)\n                            move_action.build_options_from_directions()\n                            try_to_execute_move_action(move_action=move_action)\n                        else:\n                            # we have only one or zero move action.\n                            stay(move_action)\n                    else:\n                        # first time seeing this move action. Try to move blocking unit with order first:\n                        blocking_unit_move_action = [mo for mo in unit_movement_options if mo.order.unit.id ==\n                                                     move_action.best_option.collision_unit_id]\n                        if len(blocking_unit_move_action) > 0:\n                            blocking_unit_move_action = blocking_unit_move_action[0]\n                            unit_movement_options.add(move_action)\n                            loop_move_actions.add(move_action)\n                            unit_movement_options.remove(blocking_unit_move_action)\n                            try_to_execute_move_action(move_action=blocking_unit_move_action)\n                        else:\n                            print(f\"WARNING: step: ({self.step}). Something went wrong while moving.\")\n                else:\n                    # our best_option will collide with another unit with no order.\n                    # try to move blocking unit\n                    possible_taken_positions = set()\n                    for v in unit_movement_options:\n                        # don't move on current positions of units with orders\n                        possible_taken_positions.add((v.order.unit.pos.x, v.order.unit.pos.y))\n                        if len(v.options) > 0:\n                            for o in v.options:\n                                possible_taken_positions.add(o.pos)\n\n                    moved_unit = try_to_move_unit_without_order(unit_id=move_action.best_option.collision_unit_id,\n                                                                blocked_positions=possible_taken_positions)\n                    if moved_unit:\n                        # we moved the blocking unit aside and can move now:\n                        assign_position(move_action=move_action)\n                    else:\n                        # we cant move the blocking unit.\n                        if move_action.num_options > 1:\n                            # we have additional options: --> remove best option and add updated move action.\n                            move_action.remove_option_direction(pos=move_action.best_option.pos)\n                            move_action.build_options_from_directions()\n                            try_to_execute_move_action(move_action=move_action)\n                        else:\n                            # don't move at all:\n                            stay(move_action)\n            else:\n                # we have nowhere to go and this means that this unit is an obstacle. --> remove all options with the\n                # given position of the unit\n                stay(move_action)\n\n        all_units_moved = False\n        while not all_units_moved:\n            if len(unit_movement_options) == 0:\n                all_units_moved = True\n            else:\n                move_action = unit_movement_options.pop()\n                try_to_execute_move_action(move_action=move_action)\n\n        return actions\n\n    def build_obstacles_maps(self):\n        \"\"\"\n        Builds obstacles maps and builder_obstacles_map bases on cities and units.\n        Considers units with cd 0 not as obstacle.\n        :return:\n        \"\"\"\n        for x in range(len(self.city_map)):\n            for y in range(len(self.city_map[0])):\n                if self.city_map[x][y] == 2:\n                    # opponent city tile:\n                    self.obstacles_map[x][y] = 2\n                    self.builder_obstacles_map[x][y] = 2\n                elif self.city_map[x][y] == 1:\n                    # player city tile\n                    self.builder_obstacles_map[x][y] = 1\n                else:\n                    # no city tile:\n                    if self.unit_map[x][y] == 2:\n                        # opponent unit:\n                        unit = [u for u in self.opponent.units if (u.pos.x, u.pos.y) == (x, y)][0]\n                        if unit.cooldown > 0:\n                            # unit won't move in this turn\n                            self.obstacles_map[x][y] = 2\n                            self.builder_obstacles_map[x][y] = 2\n                    elif self.unit_map[x][y] == 1:\n                        # player unit:\n                        unit = [u for u in self.player.units if (u.pos.x, u.pos.y) == (x, y)][0]\n                        if unit.cooldown > 0:\n                            # unit won't move in this turn\n                            self.obstacles_map[x][y] = 1\n                            self.builder_obstacles_map[x][y] = 1\n\n\nclass MovementOptions:\n    def __init__(self, order, directions, harvesting_map, movement_map, day):\n        self._direction_dict = {\"e\": [1, 0], \"s\": [0, 1], \"w\": [-1, 0], \"n\": [0, -1]}\n        self.order = order\n        self.directions = directions\n        self.harvesting_map = harvesting_map\n        self.movement_map = movement_map\n        self.day = day\n        self.num_options = 0\n        self.best_option = None\n        self.can_move = False\n        self.options = None\n        self.build_options_from_directions()\n\n    def reset_option(self):\n        \"\"\"\n        After we moved a unit its option will be cleared that none of them will interfere with other move actions.\n        \"\"\"\n        self.num_options = 0\n        self.directions = []\n        self.best_option = None\n        self.can_move = False\n        self.options = None\n\n    def includes_option_with_position(self, pos):\n        \"\"\"\n        Checks if a given position is part of an option and if it can be removed and the unit can still move.\n        :param pos: position tuple\n        \"\"\"\n        if self.options is not None:\n            pos_option = [o for o in self.options if o.pos == pos]\n            if len(pos_option) == 0:\n                # no option with given position\n                return False\n            else:\n                return True\n\n    def remove_option_direction(self, pos):\n        \"\"\"\n        Removes a direction from the move options.\n        :param pos: position tuple\n        \"\"\"\n        if self.includes_option_with_position(pos=pos):\n            option_to_remove = [o for o in self.options if o.pos == pos][0]\n            new_possible_directions = [d for d in self.directions if d != option_to_remove.direction]\n            self.directions = new_possible_directions\n\n    def build_options_from_directions(self):\n        \"\"\"\n        Builds move actions for given directions.\n        :return:\n        \"\"\"\n        self.options = []\n        self.best_option = None\n        max_direction_value = 0\n\n        for direction in self.directions:\n            collision_unit_id = None\n            collision_unit_has_order = False\n            new_pos = (self.order.unit.pos.x + self._direction_dict[direction][0],\n                       self.order.unit.pos.y + self._direction_dict[direction][1])\n            # define direction value\n\n            if self.order.order_type == OrderType.Expansion:\n                if self.order.unit.get_cargo_space_left() > 0:\n                    direction_value = self.harvesting_map[new_pos[0]][new_pos[1]].collection_amount_per_turn\n                else:\n                    direction_value = 0\n            elif self.order.order_type == OrderType.Harvest_Go:\n                direction_value = self.harvesting_map[new_pos[0]][new_pos[1]].fuel_value_per_turn\n            else:\n                direction_value = 0\n\n            if isinstance(self.movement_map[new_pos[0]][new_pos[1]], str) and \\\n                    self.movement_map[new_pos[0]][new_pos[1]][0] == \"p\":\n                # ['p', 'u_15', '1']\n                collision_info = self.movement_map[new_pos[0]][new_pos[1]].split()\n                collision_unit_id = collision_info[1]\n                collision_unit_has_order = bool(int(collision_info[2]))\n                collision = True\n            else:\n                collision = False\n            if direction_value > max_direction_value:\n                max_direction_value = direction_value\n            self.options.append(\n                MoveOption(direction=direction, pos=new_pos, value=direction_value, collision=collision,\n                           collision_unit_id=collision_unit_id, collision_unit_has_order=collision_unit_has_order))\n        # remove options that would kill units at night:\n        if not self.day:\n            # unit wont survive night if next step is not a harvesting spot.\n            if self.order.unit.get_cargo_space_left() >= 60:\n                possible_options = []\n                for option in self.options:\n                    if self.harvesting_map[option.pos[0]][option.pos[1]].collection_amount_per_turn >= 4:\n                        possible_options.append(option)\n                self.options = possible_options\n\n        if len(self.options) > 1:\n            # get_options with max direction value:\n            best_options = [o for o in self.options if o.value == max_direction_value]\n            if len(best_options) > 1:\n                # more then one optimal option: --> exclude collision moves\n                best_no_collision_options = [o for o in best_options if not o.collision]\n                if len(best_no_collision_options) == 0:\n                    best_option = best_options[0]\n                elif len(best_no_collision_options) == 1:\n                    best_option = best_no_collision_options[0]\n                else:\n                    # > 1\n                    best_option = best_no_collision_options[0]\n            else:\n                # we have one option with max direction value:\n                best_option = best_options[0]\n        elif len(self.options) == 1:\n            # single option\n            best_option = self.options[0]\n        else:\n            # no movement option\n            best_option = None\n        self.best_option = best_option\n        if self.best_option is not None:\n            self.can_move = True\n        else:\n            self.can_move = False\n        self.num_options = len(self.options)\n\n    def show(self):\n        print(30*\"*\")\n        print(f\"num_options: {self.num_options}\")\n        print(f\"best_option: {self.best_option}\")\n        print(f\"can_move: {self.can_move}\")\n\n\nclass MoveOption:\n    def __init__(self, direction, pos, value, collision, collision_unit_id=None, collision_unit_has_order=None):\n        self.direction = direction\n        self.pos = pos\n        self.value = value\n        self.collision = collision\n        self.collision_unit_id = collision_unit_id\n        self.collision_unit_has_order = collision_unit_has_order\n\n    def __str__(self):\n        return f\"d: {self.direction}, pos: {self.pos}, value: {self.value}, collision: {self.collision}\"\n","eacd4196":"%%writefile ExpansionOfficer.py\nimport numpy as np\nfrom Cartographer import Cartographer\nimport math\nfrom lux.constants import Constants\n\n\nclass ExpansionOfficer:\n\n    def __init__(self, lux_map, city_map, harvesting_grid, builder_obstacles_map, obstacles_map, resource_cluster,\n                 movement_officer):\n        \"\"\"\n        :param lux_map: A lux map object.\n        :param city_map: A grid with 0, 1 and 2 values. (0 for no city, 1 for player city and 2 for opponent city.\n        :param harvesting_grid: A grid of of HarvestingTile objects\n        \"\"\"\n        self.height = lux_map.height\n        self.width = lux_map.width\n        self.map = lux_map\n        self.city_map = city_map\n        self.harvesting_grid = harvesting_grid\n        self.builder_obstacles_map = builder_obstacles_map\n        self.obstacles_map = obstacles_map\n        self.expansion_map = np.zeros([self.width, self.height], np.int32)\n        self.strategic_expansion_map = np.zeros([self.width, self.height], np.int32)\n        self.resource_cluster = resource_cluster\n        self.movement_officer = movement_officer\n        self.district_mayors = None\n\n    def build_expansion_maps(self, strategy_information, units):\n        \"\"\"\n        Build both normal and strategic expansion map.\n        :param strategy_information: StrategyInformation object\n        :param units: list of free units.\n        :return:\n        \"\"\"\n        self.build_expansion_map()\n        self.build_strategic_expansion_map(strategy_information=strategy_information, units=units)\n\n    def get_number_of_free_expansion_spots(self):\n        \"\"\"\n        Counts the number of free expansion-spots from the expansion map.\n        :return:\n        \"\"\"\n        number_of_free_expansion_spots = 0\n        for x in range(self.width):\n            for y in range(self.height):\n                if self.expansion_map[x][y] > 0:\n                    number_of_free_expansion_spots += 1\n        return number_of_free_expansion_spots\n\n    def build_expansion_map(self):\n        \"\"\"\n        Builds a grid of possible expansion spots with specific expansion values depending on the amount of attached\n        resource tiles.\n        \"\"\"\n        for x in range(self.width):\n            for y in range(self.height):\n                cell = self.map.get_cell(x, y)\n                if not cell.has_resource() and self.city_map[x][y] == 0:\n                    # cell has no resource tiles and there is no city build on it ---> possible expansion spot.\n                    harvesting_tile = self.harvesting_grid[x][y]\n                    if (harvesting_tile.num_wood + harvesting_tile.num_coal + harvesting_tile.num_uranium) > 0:\n                        expansion_value = 1\n                    else:\n                        expansion_value = 0\n                    self.expansion_map[x][y] = expansion_value\n\n    def update_expansion_maps(self, assigned_expansion_spots: list):\n        \"\"\"\n        All assigned_spots will be removed from the expansion_map. (set to 0).\n        :param assigned_expansion_spots: List of ExpansionSpots.\n        \"\"\"\n        if len(assigned_expansion_spots) > 0:\n            for spot in assigned_expansion_spots:\n                self.expansion_map[spot.spot_pos[0]][spot.spot_pos[1]] = 0\n                self.strategic_expansion_map[spot.spot_pos[0]][spot.spot_pos[1]] = 0\n\n    def find_strategic_expansions(self, unit, max_number):\n        if ((len(self.district_mayors) == 1) and (self.district_mayors[0].size == 1)) \\\n                or (len(self.district_mayors) == 0):\n            # if we have no cities or only one of size one we are simply looking for the fastest expansion.\n            exp_spots = self.find_fastest_expansion_for_unit(unit=unit, max_number=max_number,\n                                                             expansion_map=self.expansion_map)\n        else:\n            \"\"\"\n            We have at least one city of size 2 or more cities of arbitrary size.\n            At this point we care about not building to much around small clusters and not building inside fully\n            Captures clusters. --> we optimise our expansion map.\n            \"\"\"\n            exp_spots = self.find_fastest_expansion_for_unit(unit=unit, max_number=max_number,\n                                                             expansion_map=self.strategic_expansion_map)\n        return exp_spots\n\n    def build_strategic_expansion_map(self, strategy_information, units):\n        \"\"\"\n        Modifies the expansion_map to form a strategic expansion maps. I think here is a lot of potential for\n        improvements.\n        :param strategy_information: StrategyInformation object\n        :param units: List of free units.\n        \"\"\"\n\n        strategic_expansion_map = self.expansion_map.copy()\n        \"\"\"\n        Move to cole tiles before it is researched:\n        \"\"\"\n        for x in range(self.width):\n            for y in range(self.height):\n                if self.city_map[x][y] == 0:\n                    cell = self.map.get_cell(x, y)\n                    is_possible_coal_expansion_spot = False\n                    for direction, delta in self.movement_officer.direction_dict.items():\n                        adjacent_pos = cell.pos.translate(direction, 1)\n                        if (0 <= adjacent_pos.x < self.width) and (0 <= adjacent_pos.y < self.height):\n                            # adjacent_pos is still on map\n                            adjacent_cell = self.map.get_cell(adjacent_pos.x, adjacent_pos.y)\n                            if adjacent_cell.has_resource() and \\\n                                    adjacent_cell.resource.type == Constants.RESOURCE_TYPES.COAL:\n                                is_possible_coal_expansion_spot = True\n                    if is_possible_coal_expansion_spot and \\\n                            not cell.has_resource() and strategy_information.player_research_points > 40:\n                        strategic_expansion_map[x][y] = 1\n        \"\"\"\n        Move to uranium before it is researched:\n        \"\"\"\n        for x in range(self.width):\n            for y in range(self.height):\n                if self.city_map[x][y] == 0:\n                    cell = self.map.get_cell(x, y)\n                    is_uranium_expansion = False\n                    for direction, delta in self.movement_officer.direction_dict.items():\n                        adjacent_pos = cell.pos.translate(direction, 1)\n                        if (0 <= adjacent_pos.x < self.width) and (0 <= adjacent_pos.y < self.height):\n                            # adjacent_pos is still on map\n                            adjacent_cell = self.map.get_cell(adjacent_pos.x, adjacent_pos.y)\n                            if adjacent_cell.has_resource() and \\\n                                    adjacent_cell.resource.type == Constants.RESOURCE_TYPES.URANIUM:\n                                is_uranium_expansion = True\n                    if is_uranium_expansion and \\\n                            not cell.has_resource() and strategy_information.player_research_points > 180:\n                        strategic_expansion_map[x][y] = 1\n\n        \"\"\"\n        Add strategic expansion from district mayor expansions:\n        \"\"\"\n        for dist_major in self.district_mayors:\n            other_district_mayors = [o_dist_major for o_dist_major in self.district_mayors\n                                     if o_dist_major != dist_major]\n            positions = dist_major.get_strategic_expansion_positions(other_district_mayors=other_district_mayors,\n                                                                     harvesting_map=self.harvesting_grid, units=units,\n                                                                     strategic_information=strategy_information)\n            for pos in positions:\n                strategic_expansion_map[pos[0]][pos[1]] = 1\n\n        for cluster in self.resource_cluster:\n            \"\"\"\n            Loop through all resorce clusters and adjust there expansion spots depending on the current state of the\n            game.\n            \"\"\"\n            # don't build more then one city tile at uranium or coal cluster if no opponent is around:\n            if ((cluster.captured_by == \"p\") or (cluster.captured_by == \"b\")) and (\"w\" not in cluster.cluster_type)\\\n                    and (cluster.min_dist_to_opponent_unit > 6):\n                for pos in cluster.surrounding_tiles_pos:\n                    # exclude all expansion positions if they are not attached to wood tiles.\n                    if self.harvesting_grid[pos[0]][pos[1]].num_wood == 0:\n                        strategic_expansion_map[pos[0]][pos[1]] = 0\n\n            \"\"\"\n            Handle player wood cluster:\n            Don't over expand. We want to reserve wood as long as possible without slowing down our research speed.\n            \"\"\"\n            if ((cluster.captured_by == \"p\") and (\"w\" in cluster.cluster_type)) \\\n                    and (cluster.min_dist_to_opponent_unit > 10):\n                max_num_expansions = cluster.size - len(cluster.attached_player_city_tiles_pos)\n                if max_num_expansions <= 0:\n                    for pos in cluster.surrounding_tiles_pos:\n                        strategic_expansion_map[pos[0]][pos[1]] = 0\n\n            if ((cluster.captured_by == \"p\") and (\"w\" in cluster.cluster_type)) \\\n                    and (cluster.min_dist_to_opponent_unit > 4) and (strategy_information.step > 30):\n\n                # get attached district mayors:\n                attached_district_majors = set()\n                for dist_major in self.district_mayors:\n                    for pos in cluster.attached_player_city_tiles_pos:\n                        if pos in dist_major.city_tiles_positions:\n                            attached_district_majors.add(dist_major)\n\n                # stop expanding wood cluster_cities (min size 3) if there would die from the expansion after\n                # coal is researched.\n                if strategy_information.player_research_status > 0:\n                    for att_dist_mayor in attached_district_majors:\n                        if (att_dist_mayor.num_possible_expansions == 0) and (att_dist_mayor.size > 2):\n                            for pos in att_dist_mayor.expansion_positions:\n                                strategic_expansion_map[pos[0]][pos[1]] = 0\n\n                # stop expanding directly on wood clusters if uranium is researched.\n                if strategy_information.player_research_status == 2:\n                    for pos in cluster.surrounding_tiles_pos:\n                        strategic_expansion_map[pos[0]][pos[1]] = 0\n\n                # leave door open to closest coal or uranium cluster\n                # start by finding the closest coal or uranium cluster (if there is one in range.)\n                cu_clusters = [c for c in self.resource_cluster if (\"u\" in c.cluster_type) or (\"c\" in c.cluster_type)]\n\n                close_cu_clusters = []\n                for cu_cluster in cu_clusters:\n                    dist, _, _ = Cartographer.distance_cluster_to_cluster(cluster1=cluster, cluster2=cu_cluster)\n                    if dist < 6:\n                        close_cu_clusters.append(cu_cluster)\n\n                num_openings = 0\n                for cu_cluster in close_cu_clusters:\n                    # try to find best opening position for this cluster.\n                    min_dist = np.inf\n                    opening_pos = None\n                    for pos in cluster.surrounding_tiles_pos:\n                        if self.city_map[pos[0]][pos[1]] == 0:\n                            dist, _ = Cartographer.distance_to_cluster(pos=pos, cluster=cu_cluster)\n                            if dist < min_dist:\n                                min_dist = dist\n                                opening_pos = pos\n                    if (opening_pos is not None) and (num_openings < 2):\n                        num_openings += 1\n                        strategic_expansion_map[opening_pos[0], opening_pos[1]] = 0\n\n                if num_openings < 2:\n                    \"\"\"\n                    We want at least 2 openings per cluster for units to leave with wood for coal and uranium \n                    expansions.\n                    Even if we do not have a close by expansion spot it makes sense to keep a door open to connect\n                    Attached cities. But we need to protect this gate!\n                    \"\"\"\n\n                    num_further_openings = 2 - num_openings\n                    for pos in cluster.surrounding_tiles_pos:\n                        if num_further_openings > 0:\n                            if self.city_map[pos[0], pos[1]] == 0:\n                                strategic_expansion_map[pos[0], pos[1]] = 0\n                                num_further_openings -= 1\n\n        self.strategic_expansion_map = strategic_expansion_map\n\n    def find_fastest_expansion_time_from_pos(self, pos, expansion_map, harvesting_map, radius):\n        \"\"\"\n        Find's the fastest time to expand if a unit  with cargo = 0 would be standing on the given position.\n        The idea is to check expansion times from city tiles to decide where to spawn a unit.\n        Restriction: This could lead to an performance issue, so we restrict ourselfs to positions in a given radius.\n        Note: Not used jet. Did not increase the performance at all... (needs fixes)\n        :param pos: pos tuple\n        :param expansion_map: map with expansion values.\n        :param harvesting_map: harvesting map from Cartographer\n        :param radius: The max radius we are looking for expansion spots.\n        \"\"\"\n        min_building_time = np.inf\n        for x in range(self.width):\n            for y in range(self.height):\n                if expansion_map[x][y] > 0:\n                    simple_dist = Cartographer.distance(origin=[pos[0], pos[1]], destination=[x, y])\n                    if simple_dist <= radius:\n                        real_dist = Cartographer.distance_with_obstacles(origin=[pos[0], pos[1]], destination=[x, y],\n                                                                         obstacles_map=self.builder_obstacles_map)\n                        expansion_spot_collection_amount = harvesting_map[x][y].collection_amount_per_turn\n                        building_time = np.inf\n                        if real_dist == 1:\n                            # spot is next to given position:\n                            if expansion_spot_collection_amount > 0:\n                                time_to_harvest = int(math.ceil(100 \/ expansion_spot_collection_amount))\n                                building_time = time_to_harvest\n                            \"\"\"\n                            Note: If we build a unit (City tiles are first in line), this unit can move in the same \n                            turn and collect at its destination. --> building tile harvesting time in destination.\n                            (Max harvesting value in neighbor expansion spot is 60 so no need for max(time, 2).\n                            \"\"\"\n                        elif real_dist > 1:\n                            # spot is more then one tile away.\n                            # try to find best next position\n                            possible_spots = []\n                            best_spot = None\n                            min_dist = np.inf\n                            for key, value in self.movement_officer.direction_dict.items():\n                                new_x, new_y = x + value[0], y + value[1]\n                                if (0 <= new_x < self.map.width) and (0 <= new_y < self.map.height):\n                                    new_real_distance = Cartographer.distance_with_obstacles(\n                                        origin=[new_x, new_y], destination=[x, y],\n                                        obstacles_map=self.builder_obstacles_map)\n                                    if new_real_distance < min_dist:\n                                        min_dist = new_real_distance\n                                    if self.builder_obstacles_map[x][y] == 0:\n                                        # free spot:\n                                        new_spot_collection_amount = harvesting_map[new_x][new_y].\\\n                                            collection_amount_per_turn\n                                        possible_spots.append([(x, y), new_real_distance, new_spot_collection_amount])\n                                    elif self.city_map[x][y] == 1:\n                                        # player city tile --> we add 0 as spot harvesting amount.\n                                        possible_spots.append([(new_x, new_y), new_real_distance, 0])\n                            if len(possible_spots) == 1:\n                                best_spot = possible_spots[0]\n                            elif len(possible_spots) > 1:\n                                # select spots with min distance (greedy)\n                                min_dist = sorted(possible_spots, key=lambda k: k[1])[0]\n                                possible_spots = [spot for spot in possible_spots if spot[1] == min_dist]\n                                if len(possible_spots) == 1:\n                                    best_spot = possible_spots[0]\n                                elif len(possible_spots) > 1:\n                                    # take spot with best collection amount:\n                                    max_collection_amount = sorted(possible_spots, key=lambda k: k[2], reverse=True)[0]\n                                    best_spot = [spot for spot in possible_spots if spot[2] == max_collection_amount][0]\n\n                            if best_spot is not None:\n                                new_spot_collection_amount = harvesting_map[best_spot[0][0]][best_spot[0][1]]. \\\n                                    collection_amount_per_turn\n                                harvesting_amount = new_spot_collection_amount * 2 + 2 * best_spot[2]\n                                if harvesting_amount >= 100:\n                                    building_time = 2 * best_spot[1]\n                                    # 2 + distance\n                                else:\n                                    new_spot_harvesting_amount = 2 * new_spot_collection_amount\n                                    missing_fuel = 100 - new_spot_harvesting_amount\n                                    if missing_fuel <= 0:\n                                        print(\"WARNING: Missing Fuel is below zero!!!\")\n                                    if expansion_spot_collection_amount > 0:\n                                        time_to_harvest = int(math.ceil(missing_fuel \/\n                                                                        expansion_spot_collection_amount))\n                                        building_time = time_to_harvest + 2 * best_spot[2]\n\n                        if building_time < min_building_time:\n                            min_building_time = building_time\n        return min_building_time\n\n    def find_fastest_expansion_for_unit(self, unit, max_number, expansion_map):\n        \"\"\"\n        Finds the fastest expansion for a given unit. (max_number many)\n        :param max_number: The maximum number of returned expansion spots\n        :param unit: Lux game unit\n        :param expansion_map: map with expansion values.\n        :return: List of sorted expansion spots (up to max_number many)\n        \"\"\"\n        if unit.get_cargo_space_left() == 0 and expansion_map[unit.pos.x][unit.pos.y] > 0:\n            exp_spot = ExpansionSpot(spot_pos=[unit.pos.x, unit.pos.y], unit=unit,\n                                     city_grid=self.city_map, harvesting_map=self.harvesting_grid,\n                                     builder_obstacles_map=self.builder_obstacles_map, obstacles_map=self.obstacles_map)\n            exp_spot.time_to_build = unit.cooldown\n            exp_spots = [exp_spot]\n        elif unit.get_cargo_space_left() == 0 and expansion_map[unit.pos.x][unit.pos.y] == 0:\n            # find closest spots (closest means fastest if unit has a full cargo.)\n            exp_spots = []\n            for x in range(self.width):\n                for y in range(self.height):\n                    if expansion_map[x][y] > 0:\n                        exp_spots.append(ExpansionSpot(spot_pos=[x, y], unit=unit, city_grid=self.city_map,\n                                                       harvesting_map=self.harvesting_grid,\n                                                       builder_obstacles_map=self.builder_obstacles_map,\n                                                       obstacles_map=self.obstacles_map))\n            if len(exp_spots) > 0:\n                exp_spots = sorted(exp_spots, key=lambda k: k.dist, reverse=False)\n                for exp_spot in exp_spots:\n                    time_to_walk = unit.cooldown + 2 * exp_spot.dist\n                    exp_spot.time_to_build = time_to_walk\n                exp_spots = sorted(exp_spots, key=lambda k: k.time_to_build, reverse=False)\n                exp_spots = exp_spots[:max_number]\n\n        else:\n            exp_spots = []\n            for x in range(self.width):\n                for y in range(self.height):\n                    if expansion_map[x][y] > 0:\n                        if self.harvesting_grid[x][y].collection_amount_per_turn > 0:\n                            exp_spots.append(ExpansionSpot(spot_pos=[x, y], unit=unit, city_grid=self.city_map,\n                                                           harvesting_map=self.harvesting_grid,\n                                                           builder_obstacles_map=self.builder_obstacles_map,\n                                                           obstacles_map=self.obstacles_map))\n\n            if len(exp_spots) > 0:\n                exp_spots = sorted(exp_spots, key=lambda k: k.dist, reverse=False)\n                for exp_spot in exp_spots:\n                    # cargo until next possible step\n                    cargo = 100 - unit.get_cargo_space_left() + unit.cooldown * exp_spot.origin_harvesting_amount\n\n                    # add cargo from traveling.\n                    \"\"\"\n                    Note: We do not take more the the next step (the next tile) into account.\n                    \"\"\"\n                    if exp_spot.dist == 1:\n                        # easy case: expansion spot i neighbor tile.\n                        cargo += 2 * exp_spot.spot_collection_amount\n                    else:\n                        # expansion spot is more then one tile away. We add the farming amount of the first tile in the\n                        # expansion direction times 2 (unit needs to stand there for 2 round until it can move again).\n\n                        # try to find best next position\n                        best_next_pos = None\n\n                        directions = self.movement_officer.get_possible_directions_for_unit(\n                            unit=unit, destination=exp_spot.spot_pos, is_builder=True, is_returning_harvester=False,\n                            use_obstacle_maps=True)\n                        max_direction_value = 0\n                        new_positions_with_values = []\n                        for direction in directions:\n                            new_pos = (unit.pos.x + self.movement_officer.direction_dict[direction][0],\n                                       unit.pos.y + self.movement_officer.direction_dict[direction][1])\n                            # define direction value\n\n                            if unit.get_cargo_space_left() > 0:\n                                direction_value = self.movement_officer.harvesting_map[new_pos[0]][\n                                    new_pos[1]].collection_amount_per_turn\n                            else:\n                                direction_value = 0\n                            if direction_value > max_direction_value:\n                                max_direction_value = direction_value\n                            new_positions_with_values.append([direction_value, new_pos])\n\n                        if len(new_positions_with_values) > 0:\n                            best_next_pos = [pos_and_val[1] for pos_and_val in new_positions_with_values if\n                                             pos_and_val[0] == max_direction_value][0]\n\n                        if best_next_pos is not None:\n                            # farming amount from next cell + farming amount from expansion spot if we find a next pos.\n                            cargo += 2 * exp_spot.spot_collection_amount \\\n                                     + 2 * self.harvesting_grid[best_next_pos[0]][\n                                         best_next_pos[1]].collection_amount_per_turn\n                        else:\n                            # if we don't find a next position.\n                            cargo += 2 * exp_spot.spot_collection_amount\n\n                    # calculate building time\n                    if cargo >= 100:\n                        # by the time the unit can build he will have enough material to build so if it moves directly\n                        # to the spot\n                        time = unit.cooldown + 2 * exp_spot.dist\n                    else:\n                        # unit needs to farm at building spot, so we add the spot_harvesting_amount until 100 is reached\n                        missing_material = 100 - cargo\n                        if exp_spot.spot_collection_amount > 0:\n                            # harvesting at spot location:\n                            time_to_harvest = int(math.ceil(missing_material \/ exp_spot.spot_collection_amount))\n                        else:\n                            # 100 is only a dummy value\n                            time_to_harvest = 100\n                        time_to_walk = unit.cooldown + 2 * exp_spot.dist\n                        time = time_to_walk + time_to_harvest\n\n                    exp_spot.time_to_build = time\n\n                # sort by time_to_build\n                exp_spots = sorted(exp_spots, key=lambda k: k.time_to_build, reverse=False)\n                exp_spots = exp_spots[:max_number]\n        return exp_spots\n\n\nclass ExpansionSpot:\n    \"\"\"\n    Holds all information about an expansion spot.\n    \"\"\"\n    def __init__(self, spot_pos, unit, city_grid, harvesting_map, builder_obstacles_map, obstacles_map):\n        self.id = f\"{spot_pos[0]}{spot_pos[1]}\"\n        self.spot_pos = spot_pos\n        self.unit = unit\n        self.city_grid = city_grid\n        self.harvesting_map = harvesting_map\n        self.origin_pos = [unit.pos.x, unit.pos.y]\n        if city_grid[unit.pos.x][unit.pos.y] > 0:\n            # unit standing on city tile :\n            self.origin_harvesting_amount = 0\n        else:\n            self.origin_harvesting_amount = harvesting_map[unit.pos.x][unit.pos.y].collection_amount_per_turn\n        self.spot_collection_amount = harvesting_map[spot_pos[0]][spot_pos[1]].collection_amount_per_turn\n\n        self.harvesting_pos = self.find_harvesting_spot()\n        self.dist = self.calculate_distance(builder_obstacles_map=builder_obstacles_map, obstacles_map=obstacles_map)\n        self.time_to_build = None\n\n    def find_harvesting_spot(self):\n        \"\"\"\n        Finds a suitable farming spot if an expansion spot has no collection amount.\n        :return:\n        \"\"\"\n        if (self.spot_collection_amount == 0) and (self.unit.get_cargo_space_left() != 0):\n            # find closest farming spot near unit\n            # look around building unit\n            min_dist = np.inf\n            closest_spot = None\n            closest_spot_pos = None\n            for x in range(len(self.city_grid)):\n                for y in range(len(self.city_grid[0])):\n                    if self.harvesting_map[x][y].num_wood > 0:\n                        simple_dist = Cartographer.distance(origin=self.origin_pos, destination=[x, y])\n                        if simple_dist < min_dist:\n                            min_dist = simple_dist\n                            closest_spot = self.harvesting_map[x][y]\n                            closest_spot_pos = (x, y)\n                        elif simple_dist < min_dist + 2:\n                            if self.harvesting_map[x][y].collection_amount_per_turn > closest_spot.collection_amount_per_turn + 10:\n                                # we do not adjust min_dist here!\n                                closest_spot = self.harvesting_map[x][y]\n                                closest_spot_pos = (x, y)\n            if closest_spot is not None:\n                harvesting_pos = closest_spot_pos\n            else:\n                harvesting_pos = self.spot_pos\n        else:\n            # spot_collection_amount < 20 or unit has full cargo.\n            harvesting_pos = self.spot_pos\n        return harvesting_pos\n\n    def calculate_distance(self, builder_obstacles_map, obstacles_map):\n        \"\"\"\n        Calculate distance to expansions spot. If a unit has at least 60 cargo we don't want to walk over city tiles.\n        Further more if the distance is more then 8 we use the simple distance for performance reasons.\n        We always move to the harvesting position. If we have a full cargo or the spot pos is a good harvesting spot\n        we will move to the building spot.\n        :return: int\n        \"\"\"\n        simple_dist = Cartographer.distance(origin=self.origin_pos, destination=self.harvesting_pos)\n\n        cargo = 100 - self.unit.get_cargo_space_left()\n        if cargo >= 60:\n            obstacles_map = builder_obstacles_map\n        else:\n            obstacles_map = obstacles_map\n\n        if simple_dist < 8:\n            dist = Cartographer.distance_with_obstacles(obstacles_map=obstacles_map, origin=self.origin_pos,\n                                                        destination=self.harvesting_pos)\n        else:\n            dist = simple_dist\n        return dist\n\n    def show(self):\n        \"\"\"\n        Display function for debugging.\n        \"\"\"\n        print(30 * \"-\")\n        print(\"spot_pos: \", self.spot_pos)\n        print(\"harvesting_pos: \", self.harvesting_pos)\n        print(\"origin_pos: \", self.origin_pos)\n        print(\"dist: \", self.dist)\n        print(\"origin_harvesting_amount: \", self.origin_harvesting_amount)\n        print(\"spot_harvesting_amount: \", self.spot_collection_amount)\n        print(\"time_to_build: \", self.time_to_build)\n        print(30 * \"-\")\n\n\n","e111836c":"%%writefile HarvestingOfficer.py\n\nfrom lux.constants import Constants\n\n\nclass HarvestingOfficer:\n    def __init__(self, harvesting_map, resource_clusters, lux_map):\n        self.map = lux_map\n        self.height = lux_map.height\n        self.width = lux_map.width\n        self.harvesting_map = harvesting_map\n        self.resource_clusters = resource_clusters\n        self.free_harvesting_positions = self.get_free_harvesting_positions()\n        self.strategic_harvesting_positions = self.get_strategic_harvesting_positions()\n\n    def get_free_harvesting_positions(self):\n        \"\"\"\n        Get's all free harvesting locations as set.\n        :return: set of position tuples.\n        \"\"\"\n        free_harvesting_tiles = set()\n        for x in range(self.width):\n            for y in range(self.height):\n                if self.harvesting_map[x][y].fuel_value_per_turn > 0:\n                    free_harvesting_tiles.add((x, y))\n        return free_harvesting_tiles\n\n    def get_strategic_harvesting_positions(self):\n        \"\"\"\n        Removing harvesting positions from the free_harvesting_positions if they would lead to unnecessary wood\n        harvesting.\n        :return: set of position tuples.\n        \"\"\"\n        strategic_harvesting_positions = self.free_harvesting_positions.copy()\n        for cluster in self.resource_clusters:\n            if cluster.captured_by == \"p\":\n                possible_farming_tiles = [rt.pos for rt in cluster.resource_tiles] + \\\n                                         [st for st in cluster.surrounding_tiles_pos\n                                          if st not in cluster.attached_player_city_tiles_pos]\n\n                for tile_pos in possible_farming_tiles:\n                    harvesting_tile = self.harvesting_map[tile_pos[0]][tile_pos[1]]\n                    if harvesting_tile.num_wood > 0:\n                        directions = [[0, 1], [1, 0], [0, -1], [-1, 0], [0, 0]]\n                        is_harvesting_spot = True\n                        for d in directions:\n                            new_x = tile_pos[0] + d[0]\n                            new_y = tile_pos[1] + d[1]\n                            if (0 <= new_x < self.width) and (0 <= new_y < self.height):\n                                cell = self.map.get_cell(new_x, new_y)\n                                if cell.has_resource():\n                                    if cell.resource.type == Constants.RESOURCE_TYPES.WOOD:\n                                        if cell.resource.amount < 200:\n                                            is_harvesting_spot = False\n                                            break\n                        if (not is_harvesting_spot) and (tile_pos in strategic_harvesting_positions):\n                            strategic_harvesting_positions.remove(tile_pos)\n\n        return strategic_harvesting_positions","b19fd075":"%%writefile CityCouncil.py\nfrom Cartographer import Cartographer\nimport numpy as np\n\n\nclass CityCouncil:\n    \"\"\"\n    Manages information about each city.\n    Each city has a DistrictMayor and the CityCouncil manages them.\n    \"\"\"\n    def __init__(self, lux_map, city_map, unit_map, player, harvesting_map, expansion_officer):\n        self.map = lux_map\n        self.city_map = city_map\n        self.unit_map = unit_map\n        self.player = player\n        self.harvesting_map = harvesting_map\n        self.cities = player.cities\n        self.expansion_officer = expansion_officer\n        self.district_mayors = []\n\n    def distribute_fuel_income(self):\n        \"\"\"\n        Distributes the fuel-income per turn by giving each city a priority. (for harvesters)\n        :return:\n        \"\"\"\n        for dm in self.district_mayors:\n            if not dm.survives_all_nights:\n                if not dm.survives_next_night:\n                    dm.harvesting_priority = dm.size + 1\n                else:\n                    dm.harvesting_priority = dm.size\n\n    def summon_district_mayors(self, night_steps_left):\n        district_mayors = []\n        for city in self.cities.values():\n            district_mayors.append(DistrictMayor(city=city, harvesting_map=self.harvesting_map,\n                                                 night_steps_left=night_steps_left, lux_map=self.map,\n                                                 city_map=self.city_map, unit_map=self.unit_map))\n        self.district_mayors = district_mayors\n        self.distribute_fuel_income()\n\n    def get_district_mayor_by_id(self, city_id):\n        \"\"\"\n        Return district major based on his city_id\n        :param city_id: str\n        :return: DistrictMayor\n        \"\"\"\n        return_district_major = None\n        for district_mayor in self.district_mayors:\n            if district_mayor.city.cityid == city_id:\n                return_district_major = district_mayor\n                break\n        return return_district_major\n\n    def get_district_mayor_by_pos(self, pos):\n        \"\"\"\n        Return district major based on pos\n        :param pos: tupel\n        :return: DistrictMayor\n        \"\"\"\n        return_district_major = None\n        for district_mayor in self.district_mayors:\n            if pos in district_mayor.city_tiles_positions:\n                return_district_major = district_mayor\n                break\n        return return_district_major\n\n    def build_fastest_expanding_units_and_research(self, max_worker_to_build):\n        \"\"\"\n        Build units where the expansion time is shortest. It is not always advantageous to build a new unit when it is\n        possible.\n        Logic: Build units on tiles with the least expansion time. If we have more than one tile with the same time,\n         we choose the tile of the newest city.\n        Note: Not used. Needs to be improved...\n        :param : max_worker_to_build: Maximum number of workers we can build this turn.\n        \"\"\"\n        actions = []\n        if max_worker_to_build > 0:\n            # order city by id: returns list of tuples [[city_id, city], ...] that can be sorted by city_id\n            city_ids = [[city.cityid[city.cityid.find(\"_\") + 1:], city] for city in self.cities.values()]\n            cities = sorted(city_ids, key=lambda k: k[0], reverse=True)\n            tiles_with_expansion_time_and_age = []\n            # [tile, min_expansion_time, age]\n            age = 0\n            for city in cities:\n                for city_tile in reversed(city[1].citytiles):\n                    expansion_time = self.expansion_officer.find_fastest_expansion_time_from_pos(\n                        pos=(city_tile.pos.x, city_tile.pos.y),\n                        expansion_map=self.expansion_officer.strategic_expansion_map,\n                        harvesting_map=self.harvesting_map, radius=5)\n                    expansion_time += city_tile.cooldown\n                    tiles_with_expansion_time_and_age.append([city_tile, expansion_time, age])\n                    age += 1\n            # sort city_tiles by expansion_time and then by age. --> if we have two tiles with the same expansion value\n            # we prefer the city_tile from the newer city.\n            tiles_with_expansion_time_and_age = sorted(tiles_with_expansion_time_and_age, key=lambda k: (k[1], k[2]))\n            # try to build the units with the first max_worker_to_build city_tiles.\n            index = 1\n            for tile_info in tiles_with_expansion_time_and_age:\n                city_tile = tile_info[0]\n                if index <= max_worker_to_build:\n                    if city_tile.can_act():\n                        action = city_tile.build_worker()\n                        actions.append(action)\n                else:\n                    # research if necessary\n                    if not self.player.researched_uranium():\n                        action = city_tile.research()\n                        actions.append(action)\n                index += 1\n\n        else:\n            # we cant build workers. So research if possible and necessary:\n            for city in self.cities.values():\n                for city_tile in city.citytiles:\n                    if not self.player.researched_uranium() and city_tile.can_act():\n                        action = city_tile.research()\n                        actions.append(action)\n        return actions\n\n    def build_units_and_research(self, max_worker_to_build):\n        \"\"\"\n        Handle unit building and researching.\n        :param max_worker_to_build:\n        :return:\n        \"\"\"\n        actions = []\n        # order city by id: returns list of tuples [[city_id, city], ...] that can be sorted by city_id\n        city_ids = [[city.cityid[city.cityid.find(\"_\") + 1:], city] for city in self.cities.values()]\n        # sort cities by id:\n        cities = sorted(city_ids, key=lambda k: k[0], reverse=True)\n        for city in cities:\n            # now we loop in reverse to prefer newer city tiles for unit production.\n            for city_tile in reversed(city[1].citytiles):\n                if city_tile.can_act():\n                    if max_worker_to_build > 0:\n                        action = city_tile.build_worker()\n                        actions.append(action)\n                        max_worker_to_build -= 1\n                    else:\n                        if not self.player.researched_uranium():\n                            # We only research until we researched uranium. Then we stop and\n                            # don't wast city cd for useless further research points.\n                            action = city_tile.research()\n                            actions.append(action)\n        return actions\n\n\nclass DistrictMayor:\n    \"\"\"\"\n    Handles information from one city.\n    \"\"\"\n    def __init__(self, city, harvesting_map, night_steps_left, lux_map, city_map, unit_map):\n        self.origin = [city.citytiles[0].pos.x, city.citytiles[0].pos.y]\n        self.city_tiles_positions = set([(tile.pos.x, tile.pos.y) for tile in city.citytiles])\n        self.city = city\n        self.city_map = city_map\n        self.harvesting_map = harvesting_map\n        self.size = len(city.citytiles)\n        self.light_upkeep = city.get_light_upkeep()\n        self.survives_next_night = bool((self.light_upkeep * 10) < city.fuel)\n        self.survives_all_nights = bool((self.light_upkeep * night_steps_left) < city.fuel)\n        self.expansion_positions = self.get_expansion_positions(lux_map=lux_map, city_map=city_map)\n        self.free_district_harvesting_spots = []\n        self.best_free_harvesting_spot = None\n        self.update_district_harvesting_information(harvesting_map=harvesting_map, unit_map=unit_map,\n                                                    assigned_positions=[])\n        self.fuel_income_per_turn = self.get_fuel_income_per_turn(harvesting_map=harvesting_map, unit_map=unit_map)\n        # Resource drops on CityTiles is before CityTiles consume fuel so we add fuel_income_per_turn to city.fuel\n        self.district_harvesting_spots = self.get_district_harvesting_spots(harvesting_map=harvesting_map)\n        self.harvesting_priority = 0\n        self.num_possible_expansions = self.get_min_num_possible_expansions(night_steps_left)\n\n    def get_min_num_possible_expansions(self, night_steps_left):\n        \"\"\"\n        Calculates the max number of possible expansions that won't kill the city until the end of the game.\n        :param night_steps_left:\n        :return: num possible expansions as int\n        \"\"\"\n        if self.survives_all_nights:\n            num_possible_expansions = 0\n            for i in range(11):\n                # max will be 10 but this should be enough\n                if bool(((self.light_upkeep + i * 24) * night_steps_left) < self.city.fuel):\n                    num_possible_expansions += 1\n                else:\n                    break\n        else:\n            num_possible_expansions = 0\n\n        return num_possible_expansions\n\n    def get_strategic_expansion_positions(self, other_district_mayors, units, harvesting_map, strategic_information):\n        \"\"\"\n        Logic:\n        1) Expand on uranium and coal cities if they would survive the next night\n        2) Expand cities that would survive until the end.\n        3) Try to wall enemies\n        \"\"\"\n\n        \"\"\"\n        1) Expand on uranium and coal cities if they would survive the next night.\n        a) If city.size == 1 --> expand in all possible directions\n        b) Else expand in direction of all other clusters with min size 2.\n        c) And we ensure that expansion spots ar not only attached to coal or uranium tiles. Otherwise they might be \n            blocked by harvesters.\n        d) expand in all directions if its last day and city would survive last night\n        \"\"\"\n        def add_positions_close_other_clusters(usable_positions):\n            for other_dist_mayor in priority_other_district_mayors:\n                min_dist = np.inf\n                expansion_pos = None\n                for pos in usable_positions:\n                    dist, _ = Cartographer.distance_to_district(pos=pos, district_mayor=other_dist_mayor)\n                    if dist < min_dist:\n                        min_dist = dist\n                        expansion_pos = pos\n                if expansion_pos is not None:\n                    strategic_expansion_positions.add(expansion_pos)\n\n        strategic_expansion_positions = set()\n        is_coal_or_uranium_expansion = False\n        for ha_spot in self.district_harvesting_spots:\n            if ha_spot.includes_coal or ha_spot.includes_uranium:\n                is_coal_or_uranium_expansion = True\n\n        priority_other_district_mayors = [dm for dm in other_district_mayors if dm.size >= 2]\n\n        if is_coal_or_uranium_expansion and self.survives_next_night:\n            if self.size == 1:\n                \"\"\" a) \"\"\"\n                strategic_expansion_positions = self.expansion_positions.copy()\n            else:\n                \"\"\" b) \"\"\"\n                add_positions_close_other_clusters(usable_positions=self.expansion_positions)\n                \"\"\" c) \"\"\"\n                no_non_c_u_harvesting_expansion_spot = True\n                for pos in strategic_expansion_positions:\n                    harvesting_tile = harvesting_map[pos[0]][pos[1]]\n                    if ((harvesting_tile.num_coal == 0) and (harvesting_tile.num_uranium == 0)) or \\\n                            harvesting_tile.num_wood > 0:\n                        no_non_c_u_harvesting_expansion_spot = False\n                        break\n                if no_non_c_u_harvesting_expansion_spot:\n                    # try to find expansion spot that is not a coal or uranium spot:\n                    possible_position = set()\n                    for pos in self.expansion_positions:\n                        harvesting_tile = harvesting_map[pos[0]][pos[1]]\n                        if ((harvesting_tile.num_coal == 0) and (harvesting_tile.num_uranium == 0)) or \\\n                                harvesting_tile.num_wood > 0:\n                            possible_position.add(pos)\n\n                    add_positions_close_other_clusters(usable_positions=possible_position)\n                \"\"\" d) \"\"\"\n                if strategic_information.step >= 320:\n                    for pos in self.expansion_positions:\n                        strategic_expansion_positions.add(pos)\n\n        elif is_coal_or_uranium_expansion is False and (self.num_possible_expansions > 0):\n            \"\"\"\n            2) Expand cities that would survive until the end. \n            a) expand in direction of closest unit with 100 wood \n            b) if no spots where found try the same thing but with cycles\n            c) expand in all directions if last day\n            \"\"\"\n            \"\"\" a) \"\"\"\n            full_cargo_units = [unit for unit in units if unit.get_cargo_space_left() == 0]\n            # use only expansion positions that are not attached to a wood cluster and that are not closing a cyrcle.\n            possible_expansions_positions = []\n            for pos in self.expansion_positions:\n                if harvesting_map[pos[0]][pos[1]].num_wood == 0:\n                    # check if more then one other city tile is connected to pos (one and 3 is ok but 2 is not ok)\n                    # not on map counts as city tile.\n                    num_surrounding_city_tiles = 0\n                    directions = [[0, 1], [1, 0], [0, -1], [-1, 0]]\n                    for d in directions:\n                        new_x = pos[0] + d[0]\n                        new_y = pos[1] + d[1]\n                        if (0 <= new_x < len(self.harvesting_map)) and (0 <= new_y < len(self.harvesting_map[0])):\n                            if self.city_map[new_x][new_y] > 0:\n                                num_surrounding_city_tiles += 1\n                        else:\n                            num_surrounding_city_tiles += 1\n                    if num_surrounding_city_tiles != 2:\n                        possible_expansions_positions.append(pos)\n\n            num_expansions = 0\n            min_dist = np.inf\n            positions = set()\n            for i in range(self.num_possible_expansions):\n                used_units = set()\n                for unit in full_cargo_units:\n                    for tile_pos in possible_expansions_positions:\n                        dist = Cartographer.distance(origin=(unit.pos.x, unit.pos.y), destination=tile_pos)\n                        if dist < min_dist:\n                            positions = set()\n                            positions.add(tile_pos)\n                            used_units = set()\n                            used_units.add(unit)\n                            min_dist = dist\n                        elif dist == min_dist:\n                            positions.add(tile_pos)\n                            used_units.add(unit)\n                for pos in positions:\n                    strategic_expansion_positions.add(pos)\n                    num_expansions += 1\n                for u in used_units:\n                    full_cargo_units.remove(u)\n\n            \"\"\" b) \"\"\"\n            if (self.num_possible_expansions - num_expansions) > 0:\n                # use only expansion positions that are not attached to a wood cluster\n                possible_expansions_positions = [pos for pos in self.expansion_positions\n                                                 if harvesting_map[pos[0]][pos[1]].num_wood == 0]\n                num_expansions = 0\n                min_dist = np.inf\n                positions = set()\n                for i in range(self.num_possible_expansions):\n                    used_units = set()\n                    for unit in full_cargo_units:\n                        for tile_pos in possible_expansions_positions:\n                            dist = Cartographer.distance(origin=(unit.pos.x, unit.pos.y), destination=tile_pos)\n                            if dist < min_dist:\n                                positions = set()\n                                positions.add(tile_pos)\n                                used_units = set()\n                                used_units.add(unit)\n                                min_dist = dist\n                            elif dist == min_dist:\n                                positions.add(tile_pos)\n                                used_units.add(unit)\n                    for pos in positions:\n                        strategic_expansion_positions.add(pos)\n                        num_expansions += 1\n                    for u in used_units:\n                        full_cargo_units.remove(u)\n\n            \"\"\" c) \"\"\"\n            if strategic_information.step >= 320:\n                for pos in possible_expansions_positions:\n                    strategic_expansion_positions.add(pos)\n\n        return strategic_expansion_positions\n\n    def update_district_harvesting_information(self, harvesting_map, unit_map, assigned_positions):\n        \"\"\"\n        Updates free_district_harvesting_spots and best_free_harvesting_spot.\n        :param harvesting_map: harvesting map\n        :param unit_map: unit map\n        :param assigned_positions: list of tuples with positions of taken tiles.\n        \"\"\"\n        self.free_district_harvesting_spots = self.get_free_district_harvesting_spots(harvesting_map=harvesting_map,\n                                                                                      unit_map=unit_map,\n                                                                                      assigned_positions=\n                                                                                      assigned_positions)\n        if len(self.free_district_harvesting_spots) == 1:\n            self.best_free_harvesting_spot = sorted(self.free_district_harvesting_spots,\n                                                    key=lambda k: k.harvesting_value, reverse=True)[0]\n        elif len(self.free_district_harvesting_spots) > 1:\n            self.best_free_harvesting_spot = self.free_district_harvesting_spots[0]\n        else:\n            self.best_free_harvesting_spot = None\n\n    def get_expansion_positions(self, lux_map, city_map):\n        \"\"\"\n        All tiles that would expand this city. Regardless if it would be a good expansion or not.\n        :return:\n        \"\"\"\n        expansion_positions = set()\n        directions = [[1, 0], [0, 1], [-1, 0], [0, -1]]\n        for tile in self.city.citytiles:\n            for d in directions:\n                adjacent_pos = [tile.pos.x + d[0], tile.pos.y + d[1]]\n                if (0 <= adjacent_pos[0] < lux_map.width) and (0 <= adjacent_pos[1] < lux_map.height):\n                    cell = lux_map.get_cell(tile.pos.x + d[0], tile.pos.y + d[1])\n                    if not cell.has_resource() and city_map[tile.pos.x + d[0]][tile.pos.y + d[1]] == 0:\n                        expansion_positions.add((tile.pos.x + d[0], tile.pos.y + d[1]))\n        return expansion_positions\n\n    def get_district_harvesting_spots(self, harvesting_map):\n        \"\"\"\n        Builds a sorted list of HarvestingSpots for this district. Includes only spots with positive harvesting_value.\n        :param harvesting_map: Cartographer.harvesting_map\n        :return: A sorted list of HarvestingSpots.\n        \"\"\"\n        district_harvesting_spots = []\n        for tile in self.city.citytiles:\n            # city tile is free\n            harvesting_tile = harvesting_map[tile.pos.x][tile.pos.y]\n            if harvesting_tile.fuel_value_per_turn > 0:\n                district_harvesting_spots.append(DistrictHarvestingSpot(pos=(tile.pos.x, tile.pos.y),\n                                                                        harvesting_tile=harvesting_tile))\n        district_harvesting_spots = sorted(district_harvesting_spots, key=lambda k: k.harvesting_value, reverse=True)\n        return district_harvesting_spots\n\n    def get_free_district_harvesting_spots(self, harvesting_map, unit_map, assigned_positions):\n        \"\"\"\n        Get all free district harvesting spots based on the unit_map and additional assigned positions.\n        :param harvesting_map: harvesting map\n        :param unit_map: unit map\n        :param assigned_positions: list of tuples with positions of taken tiles.\n        :return: a list of DistrictHarvestingSpot with positions and specific harvesting value.\n        \"\"\"\n\n        own_unit_map = unit_map.copy()\n        for pos_list in assigned_positions:\n            own_unit_map[pos_list[0]][pos_list[1]] = 1\n\n        district_harvesting_spots = []\n        for tile in self.city.citytiles:\n            if own_unit_map[tile.pos.x][tile.pos.y] == 0:\n                # city tile is free\n                harvesting_tile = harvesting_map[tile.pos.x][tile.pos.y]\n                district_harvesting_spots.append(DistrictHarvestingSpot(pos=(tile.pos.x, tile.pos.y),\n                                                                        harvesting_tile=harvesting_tile))\n        return district_harvesting_spots\n\n    def get_fuel_income_per_turn(self, harvesting_map, unit_map):\n        \"\"\"\n        Calculates the fuel-income per turn for this city. (from city harvesters only)\n        :param harvesting_map: Cartographer.harvesting_map\n        :param unit_map: Cartographer.unit_map\n        :return:\n        \"\"\"\n        fuel_income_per_turn = 0\n        for tile in self.city.citytiles:\n            if unit_map[tile.pos.x][tile.pos.y] == 1:\n                # min one unit standing on city tile --> is harvesting for city\n                fuel_income_per_turn += harvesting_map[tile.pos.x][tile.pos.y].fuel_value_per_turn\n        return fuel_income_per_turn\n\n    def show(self):\n        \"\"\"\n        For debugging.\n        \"\"\"\n        print(30 * \"*\")\n        print(\"City_id: \", self.city.cityid)\n        print(\"Size: \", self.size)\n        print(\"fuel:\", self.city.fuel)\n        print(\"fuel_consumption_per_night: \", self.light_upkeep)\n        print(\"survives_next_night: \", self.survives_next_night)\n        print(\"survives_all_nights: \", self.survives_all_nights)\n        print(\"expansion_positions: \", self.expansion_positions)\n        print(\"fuel_income_per_turn: \", self.fuel_income_per_turn)\n        print(30 * \"*\")\n\n\nclass DistrictHarvestingSpot:\n    \"\"\"\n    Holds information about a district harvesting spot.\n    \"\"\"\n    def __init__(self, pos, harvesting_tile):\n        self.pos = pos\n        self.harvesting_value = harvesting_tile.fuel_value_per_turn\n        self.includes_wood = (harvesting_tile.num_wood > 0)\n        self.includes_coal = (harvesting_tile.num_coal > 0)\n        self.includes_uranium = (harvesting_tile.num_uranium > 0)","be5a85f6":"%%writefile General.py\nfrom lux import annotate\nfrom enum import Enum\nimport numpy as np\nfrom Cartographer import Cartographer\nimport math\nfrom ExpansionOfficer import ExpansionSpot\n\n\nclass General:\n    def __init__(self, cartographer, expansion_officer, movement_officer, city_council, harvesting_officer, actions):\n        self.cartographer = cartographer\n        self.expansion_officer = expansion_officer\n        self.movement_officer = movement_officer\n        self.city_council = city_council\n        self.harvesting_officer = harvesting_officer\n        self.units_cap = sum([len(x.citytiles) for x in cartographer.player.cities.values()])\n        self.num_units = len(cartographer.player.units)\n        self.free_units = set(cartographer.player.units.copy())\n        self.assigned_builder_ids = set()\n        self.night_steps_left = 0\n        self.steps_until_night = 0\n        self.steps_until_day = 0\n        self.day = True\n        self.actions = actions\n        self.orders = []\n        self.strategy_information = None\n        max_worker_to_build = self.units_cap - self.num_units\n        building_and_research_actions = self.city_council.build_units_and_research(\n            max_worker_to_build=max_worker_to_build)\n        self.actions += building_and_research_actions\n        # update num units\n        self.num_units = len(cartographer.player.units)\n        self.free_units = set(cartographer.player.units.copy())\n\n    def order(self):\n        \"\"\"\n        Gives each unit an order for one step. We need to handle some exceptions though....\n        \"\"\"\n\n        \"\"\"\n        Support early uranium or coal expansion. (if we build a uranium or coal expansion we need to ensure that this \n        expansion wont die.)\n        \"\"\"\n        city_units = [u for u in self.free_units if self.cartographer.city_map[u.pos.x][u.pos.y] == 1]\n        secured_positions = set()\n        for unit in city_units:\n            if self.strategy_information.player_research_status == 1:\n                # check if coal harvesting spot:\n                if self.cartographer.harvesting_map[unit.pos.x][unit.pos.y].num_coal > 0:\n                    if (unit.pos.x, unit.pos.y) not in secured_positions:\n                        self.assign_order_to_unit(unit=unit, position_tuple=(unit.pos.x, unit.pos.y),\n                                                  order_type=OrderType.CitySupport)\n                        secured_positions.add((unit.pos.x, unit.pos.y))\n            if self.strategy_information.player_research_status == 2:\n                # check if coal harvesting spot:\n                if self.cartographer.harvesting_map[unit.pos.x][unit.pos.y].num_coal > 0\\\n                        or self.cartographer.harvesting_map[unit.pos.x][unit.pos.y].num_uranium > 0:\n                    if (unit.pos.x, unit.pos.y) not in secured_positions:\n                        self.assign_order_to_unit(unit=unit, position_tuple=(unit.pos.x, unit.pos.y),\n                                                  order_type=OrderType.CitySupport)\n                        secured_positions.add((unit.pos.x, unit.pos.y))\n        # get harvesting units\n\n        self.order_unit_distribution()\n\n        if self.strategy_information.num_player_city_tiles > self.strategy_information.num_player_save_city_tiles:\n            \"\"\"\n            If we have cities to support we don't want units with substantial amounts of fuel value to switch orders.\n            Wood harvester will possible still switch orders.\n            \"\"\"\n            harvester = set()\n            for unit in self.free_units:\n                # get cluster of unit:\n                if unit.cargo.coal > 50:\n                    unit_cluster = None\n                    for cluster in self.cartographer.resource_clusters:\n                        if \"c\" in cluster.cluster_type:\n                            cluster_tiles = [rt.pos for rt in cluster.resource_tiles] + \\\n                                            [t for t in cluster.surrounding_tiles_pos]\n                            if (unit.pos.x, unit.pos.y) in cluster_tiles:\n                                unit_cluster = cluster\n                                break\n                    if (unit_cluster is None) or (unit_cluster is not None\n                                                and (unit_cluster.min_dist_to_opponent_unit > 6)):\n                        # add units to harvesters if they are not part of an coal cluster that is under attack\n                        harvester.add(unit)\n                if unit.cargo.uranium > 30:\n                    harvester.add(unit)\n            if len(harvester) > 1:\n                self.order_harvesting(units=harvester)\n\n        \"\"\"\n        If a unit is standing on an possible expansion spot and an opponent unit is standing right next to it.\n        it should not move.\n        \"\"\"\n        check_units = [u for u in self.free_units.copy()\n                       if self.cartographer.harvesting_map[u.pos.x][u.pos.y].collection_amount_per_turn > 0]\n        for unit in check_units:\n            if (self.expansion_officer.expansion_map[unit.pos.x][unit.pos.y] != 0) and (\n                    self.expansion_officer.strategic_expansion_map[unit.pos.x][unit.pos.y] == 0):\n                # check if enemy unit want on this spot:\n                # close by opponent unit:\n                opp_unit_close_by = False\n                for opp_unit in self.cartographer.opponent.units:\n                    dist = Cartographer.distance(origin=(unit.pos.x, unit.pos.y),\n                                                 destination=(opp_unit.pos.x, opp_unit.pos.y))\n                    if dist <= 2:\n                        opp_unit_close_by = True\n                        break\n                if opp_unit_close_by:\n                    self.assign_order_to_unit(unit=unit, position_tuple=(unit.pos.x, unit.pos.y),\n                                              order_type=OrderType.ClusterDefence)\n            elif (self.expansion_officer.expansion_map[unit.pos.x][unit.pos.y] != 0) and (\n                    self.expansion_officer.strategic_expansion_map[unit.pos.x][unit.pos.y] != 0):\n                # in this case we should build there.\n                spot = ExpansionSpot(spot_pos=[unit.pos.x, unit.pos.y], unit=unit,\n                                     city_grid=self.expansion_officer.city_map,\n                                     harvesting_map=self.expansion_officer.harvesting_grid,\n                                     builder_obstacles_map=self.expansion_officer.builder_obstacles_map,\n                                     obstacles_map=self.expansion_officer.obstacles_map)\n                self.assign_order_to_unit(unit=spot.unit, position_tuple=spot.harvesting_pos,\n                                          order_type=OrderType.Expansion, additional_information=spot)\n\n        \"\"\"\n        Basic order for orders in respect of the steps_until_night.\n        \"\"\"\n        if self.steps_until_night < 6:\n            # save units that need saving.\n            self.order_city_support()\n            self.order_expansions()\n            self.order_save_spots()\n            self.order_unit_blocking()\n            self.order_resource_defense()\n            self.order_harvesting()\n        else:\n            self.order_unit_blocking()\n            self.order_expansions()\n            self.order_resource_defense()\n            self.order_city_support()\n            self.order_harvesting()\n\n        \"\"\"\n        For debugging:\n        Shoa order development and overall development.\n        \"\"\"\n        #self.print_orders()\n        #self.strategy_information.show()\n\n    def print_orders(self):\n        num_orders = len(self.orders)\n        building_orders = [o for o in self.orders if o.order_type == OrderType.Expansion]\n        city_support = [o for o in self.orders if o.order_type == OrderType.CitySupport]\n        save_spot = [o for o in self.orders if o.order_type == OrderType.SaveSpot]\n        harvest_go = [o for o in self.orders if o.order_type == OrderType.Harvest_Go]\n        harvest_return = [o for o in self.orders if o.order_type == OrderType.Harvest_Return]\n        cluster_defence = [o for o in self.orders if o.order_type == OrderType.ClusterDefence]\n        distribution = [o for o in self.orders if o.order_type == OrderType.Distribution]\n        blockers = [o for o in self.orders if o.order_type == OrderType.Blocking]\n        num_free_units = len(self.free_units)\n        print(f\"step: {self.cartographer.observation['step']}, units \/ free: ({self.num_units} \/ \"\n              f\"{num_free_units}) , num_orders: {num_orders} \"\n              f\"(b: {len(building_orders)}, cs:{len(city_support)}, s: {len(save_spot)}, hg: {len(harvest_go)},\"\n              f\" hr: {len(harvest_return)}, cd: {len(cluster_defence)}, d: {len(distribution)}),\"\n              f\" b: {len(blockers)})\")\n\n    def execute_orders(self, game_state, show_annotation):\n        \"\"\"\n        Executes orders. --> adds actions to actions.\n        Note: We wont build 3 days before night if a city can't sustain by its own.\n        :param game_state: global game_state\n        :param show_annotation: boolean.\n        \"\"\"\n        move_orders = []\n        for order in self.orders:\n            if order.dist == 0:\n                if order.order_type == OrderType.Expansion:\n                    # try to build:\n                    if order.unit.can_act() and order.unit.can_build(game_state.map):\n                        if order.additional_information.spot_collection_amount < 21:\n                            # city can't be supported by its own. --> don't build 3 steps before night.\n                            if self.steps_until_night > 3:\n                                action = order.unit.build_city()\n                                self.actions.append(action)\n                        else:\n                            action = order.unit.build_city()\n                            self.actions.append(action)\n            else:\n                # move\n                if order.unit.can_act():\n                    move_orders.append(order)\n        move_actions = self.movement_officer.move_units(move_orders=move_orders)\n\n        for action in move_actions:\n            self.actions.append(action)\n\n        if show_annotation:\n            self.order_annotation()\n\n    def assign_order_to_unit(self, unit, position_tuple, order_type, additional_information=None):\n        \"\"\"\n        Assigns an oder to a unit and thereby removes unit from free units.\n        \"\"\"\n        if unit in self.free_units:\n            self.orders.append(Order(order_type=order_type, unit=unit,\n                                     pos=position_tuple, additional_information=additional_information))\n            self.free_units.remove(unit)\n\n    def order_annotation(self):\n        \"\"\"\n        Handles order annotations.\n        Note: Could be extended by text annotations.\n        \"\"\"\n        for order in self.orders:\n            if order.order_type == OrderType.Expansion:\n                self.actions.append(annotate.circle(order.pos[0], order.pos[1]))\n                self.actions.append(annotate.line(order.unit.pos.x, order.unit.pos.y, order.pos[0], order.pos[1]))\n            elif order.order_type == OrderType.CitySupport:\n                self.actions.append(annotate.x(order.pos[0], order.pos[1]))\n                self.actions.append(annotate.line(order.unit.pos.x, order.unit.pos.y, order.pos[0], order.pos[1]))\n                self.actions.append(annotate.text(order.unit.pos.x, order.unit.pos.y, \"H\", 15))\n            elif order.order_type == OrderType.SaveSpot:\n                self.actions.append(annotate.x(order.pos[0], order.pos[1]))\n                self.actions.append(annotate.circle(order.pos[0], order.pos[1]))\n                self.actions.append(annotate.line(order.unit.pos.x, order.unit.pos.y, order.pos[0], order.pos[1]))\n            elif order.order_type == OrderType.Distribution:\n                self.actions.append(annotate.x(order.pos[0], order.pos[1]))\n                self.actions.append(annotate.line(order.unit.pos.x, order.unit.pos.y, order.pos[0], order.pos[1]))\n            elif order.order_type == OrderType.Blocking:\n                self.actions.append(annotate.x(order.pos[0], order.pos[1]))\n                self.actions.append(annotate.line(order.unit.pos.x, order.unit.pos.y, order.pos[0], order.pos[1]))\n\n    def get_distribution_options_for_cluster(self, cluster):\n        \"\"\"\n        Builds and returns an ClusterDistributionOptions object.\n        We use only wood cluster for distribution.\n        \"\"\"\n        cluster_dist_opts = ClusterDistributionOptions(cluster=cluster, units=self.free_units,\n                                                       strat_info=self.strategy_information,\n                                                       city_council=self.city_council)\n        other_clusters = [c for c in self.cartographer.resource_clusters if (c != cluster)\n                          and (\"w\" in c.cluster_type) and (c.size >= 2)]\n\n        for other_cluster in other_clusters:\n            dist, origin_tile_pos, destination_tile_pos = Cartographer.distance_cluster_to_cluster(\n                cluster1=cluster, cluster2=other_cluster)\n            if origin_tile_pos is not None:\n                cluster_dist_opts.add_spot(DistributionSpot(other_cluster=other_cluster, dist=dist,\n                                                            origin_cluster=cluster,\n                                                            origin_tile_pos=origin_tile_pos,\n                                                            destination_tile_pos=destination_tile_pos))\n\n        cluster_dist_opts.prioritize_spots()\n        return cluster_dist_opts\n\n    def order_unit_distribution(self):\n        \"\"\"\n        The idea is to strategically distribute the units on the map and thus expand evenly and quickly.\n        To do this, we look at all the wood clusters on the map and evaluate them according to size, distance and\n        position on the map. For example, a forest cluster of size 6 that is located on both the player's and the\n        opponent's territory has a higher priority than a size 8 wood cluster located on the player territory.\n\n        Further more we need to ensure that not all units are leaving one cluster for distribution reasons.\n        \"\"\"\n        # get all distribution spots\n        cluster_unit_mapping = {}\n        cluster_distribution_options = []\n        for cluster in self.cartographer.resource_clusters:\n            if cluster.captured_by in [\"p\", \"b\"]:\n                if len(cluster.attached_player_city_tiles_pos) >= 2:\n                    # try to move to next cluster.\n                    cluster_distribution_option = self.get_distribution_options_for_cluster(cluster=cluster)\n                    cluster_distribution_option.trim_spots()\n                    for unit in cluster_distribution_option.cluster_units:\n                        cluster_unit_mapping[unit] = cluster_distribution_option\n                    cluster_distribution_options.append(cluster_distribution_option)\n        # Now find suitable units for these spots:\n        distribution_spots = []\n\n        for cluster in self.cartographer.resource_clusters:\n            # we do not want to have multiple units distribute to the same cluster. This results in bad unit\n            # distribution and possible bad defence.\n            # --> one distribution for one cluster. (take the spot with the closest distance.\n            spots_for_cluster = [spot for cluster_dist_opt in cluster_distribution_options for spot in\n                                 cluster_dist_opt.distribution_spots if spot.other_cluster == cluster]\n            if len(spots_for_cluster) == 1:\n                distribution_spots.append(spots_for_cluster[0])\n            elif len(spots_for_cluster) >= 1:\n                spots_for_cluster = sorted(spots_for_cluster, key=lambda k: k.dist)\n                distribution_spots.append(spots_for_cluster[0])\n\n        # first we sort recording to dist and then priority\n        distribution_spots = sorted(sorted(distribution_spots, key=lambda k: k.dist),\n                                    key=lambda k: k.priority, reverse=True)\n        for dist_spot in distribution_spots:\n            # find closest unit that can make it.\n            min_dist = np.inf\n            closest_unit = None\n            for unit in self.free_units:\n                dist, pos = Cartographer.distance_to_cluster(pos=(unit.pos.x, unit.pos.y),\n                                                             cluster=dist_spot.other_cluster)\n                if self.get_unit_range(unit) >= dist:\n                    if dist < min_dist:\n                        min_dist = dist\n                        if unit in cluster_unit_mapping.keys():\n                            # check if unit is about to populate another wood cluster. This can be the case if two\n                            # wood clusters are close together and one unit is part of both.\n                            is_close_to_wood_cluster = False\n                            wood_cluster = [c for c in self.cartographer.resource_clusters\n                                            if (\"w\" in c.cluster_type) and (c != dist_spot.origin_cluster)\n                                            and (len(c.attached_player_city_tiles_pos) < 2)\n                                            and (c.size >= 2)]\n                            for cluster in wood_cluster:\n                                cluster_dist, _, _ = Cartographer.distance_cluster_to_cluster(\n                                    cluster1=dist_spot.origin_cluster, cluster2=cluster)\n                                if cluster_dist > 1:\n                                    dist, _ = Cartographer.distance_to_cluster(pos=(unit.pos.x, unit.pos.y),\n                                                                               cluster=cluster)\n                                    if dist == 0:\n                                        is_close_to_wood_cluster = True\n                                        break\n                            if (closest_unit is not None) and (closest_unit in cluster_unit_mapping.keys()):\n                                # reset num_usable_units for the old units cluster\n                                cluster_unit_mapping[closest_unit].num_usable_units += 1\n\n                            if (cluster_unit_mapping[unit].num_usable_units > 0)\\\n                                    and (is_close_to_wood_cluster is False):\n                                cluster_unit_mapping[unit].num_usable_units -= 1\n                                closest_unit = unit\n                        else:\n                            # Here we need to check if this unit is close to another wood cluster and tries to capture\n                            # it. But exclude the origin cluster that the unit was moving from.\n                            # get closest cluster:\n                            c_min_dist = np.inf\n                            closest_dist_cluster = None\n                            for cluster_dist_opt in cluster_distribution_options:\n                                dist, _ = Cartographer.distance_to_cluster(pos=(unit.pos.x, unit.pos.y),\n                                                                           cluster=cluster_dist_opt.cluster)\n                                if dist < c_min_dist:\n                                    c_min_dist = dist\n                                    closest_dist_cluster = cluster_dist_opt\n\n                            if closest_dist_cluster is not None:\n                                closest_dist_cluster.num_usable_units -= 1\n\n                            is_close_to_wood_cluster = False\n                            wood_cluster = [c for c in self.cartographer.resource_clusters\n                                            if (\"w\" in c.cluster_type) and (c != dist_spot.origin_cluster)\n                                            and (len(c.attached_player_city_tiles_pos) < 2)\n                                            and (c.size >= 2)]\n                            for cluster in wood_cluster:\n                                cluster_dist, _, _ = Cartographer.distance_cluster_to_cluster(\n                                    cluster1=dist_spot.origin_cluster, cluster2=cluster)\n                                if cluster_dist > 1:\n                                    dist, _ = Cartographer.distance_to_cluster(pos=(unit.pos.x, unit.pos.y),\n                                                                               cluster=cluster)\n                                    if dist == 0:\n                                        is_close_to_wood_cluster = True\n                                        break\n                            if is_close_to_wood_cluster is False:\n                                if (closest_unit is not None) and (closest_unit in cluster_unit_mapping.keys()):\n                                    # reset num_usable_units for the old units cluster\n                                    cluster_unit_mapping[closest_unit].num_usable_units += 1\n                                closest_unit = unit\n\n            if closest_unit is not None:\n                # check if the distribution spot is blocked by opponent city tile.\n                dist, pos = Cartographer.distance_to_cluster(pos=(closest_unit.pos.x, closest_unit.pos.y),\n                                                             cluster=dist_spot.other_cluster)\n                if self.cartographer.city_map[pos[0]][pos[1]] == 2:\n                    # tile is blocked: --> find closest free tile:\n                    dist_to_closest_free_tile = np.inf\n                    closest_free_tile_pos = None\n                    for spot in dist_spot.other_cluster.surrounding_tiles_pos:\n                        dist = Cartographer.distance_with_obstacles(obstacles_map=self.movement_officer.obstacles_map,\n                                                                    origin=[closest_unit.pos.x, closest_unit.pos.y],\n                                                                    destination=spot)\n                        if dist < dist_to_closest_free_tile:\n                            dist_to_closest_free_tile = dist\n                            closest_free_tile_pos = spot\n                    pos = closest_free_tile_pos\n                # check if can harvest at distribution spot\n                if (pos is not None) and (self.cartographer.harvesting_map[pos[0]][pos[1]].fuel_value_per_turn < 20):\n                    # spot has no harvesting value --> find closest tile with positive harvesting value\n                    # This is the case if coal or uranium is part of the cluster and it is not researched jet\n                    dist_to_closest_free_tile = np.inf\n                    closest_harvesting_tile_pos = None\n                    for spot in dist_spot.other_cluster.surrounding_tiles_pos:\n                        if self.cartographer.harvesting_map[spot[0]][spot[1]].fuel_value_per_turn >= 20:\n                            dist = Cartographer.distance_with_obstacles(\n                                obstacles_map=self.movement_officer.obstacles_map,\n                                origin=[closest_unit.pos.x, closest_unit.pos.y], destination=spot)\n                            if dist < dist_to_closest_free_tile:\n                                dist_to_closest_free_tile = dist\n                                closest_harvesting_tile_pos = spot\n                    pos = closest_harvesting_tile_pos\n                if pos is not None:\n                    self.assign_order_to_unit(unit=closest_unit, position_tuple=pos,\n                                              order_type=OrderType.Distribution)\n\n    def order_resource_defense(self):\n        \"\"\"\n        Simply moves units to possible expansion spots to block them for enemy players. Especially useful for player\n        wood expansions.\n        Note: Mostly redundant due to our new blocking orders.\n        :return: Simply assigns orders.\n        \"\"\"\n        clusters_to_defence = [cluster for cluster in self.cartographer.resource_clusters\n                               if cluster.captured_by in [\"p\", \"b\"]]\n\n        clusters_to_defence = sorted(clusters_to_defence, key=lambda k: k.min_dist_to_opponent_unit)\n\n        defence_positions = set()\n        for cluster in clusters_to_defence:\n            if (cluster.captured_by == \"p\") or (cluster.captured_by == \"b\"):\n                for pos in cluster.unguarded_expansion_pos:\n                    defence_positions.add(pos)\n\n        # check for free units that are already on a defence position.\n        for unit in self.free_units:\n            if (unit.pos.x, unit.pos.y) in defence_positions:\n                self.assign_order_to_unit(unit=unit, position_tuple=(unit.pos.x, unit.pos.y),\n                                          order_type=OrderType.ClusterDefence)\n                defence_positions.remove((unit.pos.x, unit.pos.y))\n\n        # find closes free unit for each spot:\n        for pos in defence_positions:\n            # check if pos can be defended (it has a positive harvesting value)\n            if self.cartographer.harvesting_map[pos[0]][pos[1]].collection_amount_per_turn > 4:\n                closest_dist = np.inf\n                closest_unit = None\n                for unit in self.free_units:\n                    dist = Cartographer.distance(origin=[unit.pos.x, unit.pos.y], destination=pos)\n                    if dist < closest_dist:\n                        closest_dist = dist\n                        closest_unit = unit\n                if closest_unit is not None:\n                    unit_will_make_it = False\n                    if self.day:\n                        unit_range = self.get_unit_range(closest_unit)\n                        if unit_range >= closest_dist:\n                            unit_will_make_it = True\n                    else:\n                        # move at night\n                        if closest_dist == 1:\n                            # unit is next to spot: (check if unit can survive at pos)\n                            collection_amount = self.cartographer.harvesting_map[pos[0]][\n                                pos[1]].collection_amount_per_turn\n                            if collection_amount > 4:\n                                unit_will_make_it = True\n                        else:\n                            # check if default direction leads to a farming cell.\n                            cell = self.cartographer.map.get_cell(pos[0], pos[1])\n                            direct_direction = closest_unit.pos.direction_to(cell.pos)\n                            new_pos = closest_unit.pos.translate(direct_direction, 1)\n                            collection_amount = self.cartographer.harvesting_map[new_pos.x][new_pos.y].\\\n                                collection_amount_per_turn\n                            if collection_amount > 4:\n                                unit_will_make_it = True\n                    if unit_will_make_it:\n                        self.assign_order_to_unit(unit=closest_unit, position_tuple=pos,\n                                                  order_type=OrderType.ClusterDefence)\n\n    def order_unit_blocking(self):\n        \"\"\"\n        Orders the closest unit to block en opponent unit if it reaches minimum distance for blocking.\n        :return:\n        \"\"\"\n        # for now we only block units if our our cluster is in danger.\n        min_dist_for_blocking = {\"S\": 3, \"M\": 3, \"L\": 6, \"XL\": 6}\n        clusters_to_defence = [rc for rc in self.cartographer.resource_clusters if (rc.captured_by == \"p\")\n                               and (rc.min_dist_to_opponent_unit <= min_dist_for_blocking[self.cartographer.map_size])]\n\n        def unit_is_allowed_to_block(blocker_unit):\n            \"\"\"\n            Checks if a unit is allowed to block other units.\n            1) We need to prevent all units from leaving one cluster\n            2) If we have only one unit at a specific cluster this unit can't block. --> this unit needs to build!\n            3) If a unit is Distributing to an enemy cluster it is allowed to block incoming units.\n            \"\"\"\n            allowed_to_block = False\n            unit_clusters = []\n            for _cluster in self.cartographer.resource_clusters:\n                if _cluster.unit_is_in_cluster(unit=blocker_unit):\n                    # units can be part of two clusters!\n                    unit_clusters.append(_cluster)\n            if len(unit_clusters) == 0:\n                # unit is part of no cluster\n                allowed_to_block = True\n            elif len(unit_clusters) == 1:\n                # unit is part of one cluster\n                unit_cluster = unit_clusters[0]\n                if unit_cluster.num_surrounding_units > (unit_cluster.num_send_blockers + 1):\n                    # at least one unit remains in cluster.\n                    allowed_to_block = True\n                    unit_cluster.num_send_blockers += 1\n            else:\n                # unit is part of more thn one cluster\n                allowed_to_block = True\n                for uc in unit_clusters:\n                    # leave no cluster behind:\n                    if uc.num_surrounding_units <= (uc.num_send_blockers + 1):\n                        # at least one unit remains in cluster.\n                        allowed_to_block = False\n\n                if allowed_to_block is True:\n                    for uc in unit_clusters:\n                        uc.num_send_blockers += 1\n\n            return allowed_to_block\n\n        for cluster in clusters_to_defence:\n            cluster_units = set()\n            # exclude o_units that are part of another cluster. We only block units that are coming to our cluster\n            other_clusters = [oc for oc in self.cartographer.resource_clusters if oc != cluster]\n            for o_unit in cluster.close_opponent_units:\n                # check if opponent unit is part of another cluster:\n                for oc in other_clusters:\n                    if oc.unit_is_in_cluster(unit=o_unit):\n                        cluster_units.add(o_unit)\n            possible_invaders = [o_u for o_u in cluster.close_opponent_units if o_u not in cluster_units]\n\n            for o_unit in possible_invaders:\n                o_unit_dist, cluster_arrival_tile = Cartographer.distance_to_cluster(pos=(o_unit.pos.x, o_unit.pos.y),\n                                                                                     cluster=cluster)\n                o_unit_cell = self.cartographer.map.get_cell(o_unit.pos.x, o_unit.pos.y)\n                arrival_cell = self.cartographer.map.get_cell(cluster_arrival_tile[0], cluster_arrival_tile[1])\n                direction = o_unit_cell.pos.direction_to(arrival_cell.pos)\n                adjacent_pos = o_unit_cell.pos.translate(direction, 1)\n                # axis:\n                if np.abs(o_unit.pos.x - cluster_arrival_tile[0]) >= np.abs(o_unit.pos.y - cluster_arrival_tile[1]):\n                    moving_axis = \"x\"\n                else:\n                    moving_axis = \"y\"\n\n                # try to find closest unit to block:\n                min_dist = np.inf\n                closest_unit = None\n                for unit in self.free_units:\n                    dist_to_o_unit = Cartographer.distance(origin=(unit.pos.x, unit.pos.y),\n                                                           destination=(o_unit.pos.x, o_unit.pos.y))\n                    dist_to_arrival_tile = Cartographer.distance(origin=(unit.pos.x, unit.pos.y),\n                                                                 destination=(arrival_cell.pos.x, arrival_cell.pos.y))\n\n                    if dist_to_arrival_tile < o_unit_dist:\n                        if dist_to_o_unit < min_dist:\n                            # check if unit is allowed to block\n                            if unit_is_allowed_to_block(blocker_unit=unit):\n                                min_dist = dist_to_o_unit\n                                closest_unit = unit\n                    elif dist_to_arrival_tile == o_unit_dist:\n                        if (dist_to_o_unit < min_dist) and (unit.cooldown <= o_unit.cooldown):\n                            # check if unit is allowed to block\n                            if unit_is_allowed_to_block(blocker_unit=unit):\n                                min_dist = dist_to_o_unit\n                                closest_unit = unit\n\n                if closest_unit is not None:\n                    if min_dist == 1:\n                        blocking_pos = (closest_unit.pos.x, closest_unit.pos.y)\n                    else:\n                        if moving_axis == \"y\":\n                            if closest_unit.pos.x != o_unit.pos.x:\n                                blocking_pos = (o_unit.pos.x, closest_unit.pos.y)\n                            else:\n                                blocking_pos = (adjacent_pos.x, adjacent_pos.y)\n                        else:\n                            if closest_unit.pos.y != o_unit.pos.y:\n                                blocking_pos = (closest_unit.pos.x, o_unit.pos.y)\n                            else:\n                                blocking_pos = (adjacent_pos.x, adjacent_pos.y)\n                    self.assign_order_to_unit(unit=closest_unit, position_tuple=blocking_pos,\n                                              order_type=OrderType.Blocking)\n\n    def get_save_spots(self):\n        \"\"\"\n        Builds a set of save spots. A Save spot is every tile on which a unit will survive the following night.\n        This could be a city which will survive the following night or any other farming location.\n        Note: Not all harvesting values are save. City tiles on a given harvesting spot can be dangerous.\n        :return: set() of tuples\n        \"\"\"\n        save_spots = set()\n        for x in range(self.cartographer.width):\n            for y in range(self.cartographer.height):\n                if self.cartographer.city_map[x][y] == 0:\n                    # no city tile\n                    harvesting_tile = self.cartographer.harvesting_map[x][y]\n                    if harvesting_tile.collection_amount_per_turn > 0 and self.cartographer.unit_map[x][y] < 2:\n                        # no enemy is standing on this tile\n                        save_spots.add(SaveSpot(pos=(x, y), is_city=False))\n                elif self.cartographer.city_map[x][y] == 1:\n                    # player city tile\n                    city_id = self.cartographer.map.get_cell(x, y).citytile.cityid\n                    district_mayor = self.city_council.get_district_mayor_by_id(city_id=city_id)\n                    if district_mayor.survives_next_night:\n                        save_spots.add(SaveSpot(pos=(x, y), is_city=True))\n                else:\n                    # opponent city tile. --> no save spot\n                    pass\n        return save_spots\n\n    def order_save_spots(self):\n        \"\"\"\n        Order all self.free_units to move to save location to survive the night.\n        :return:\n        \"\"\"\n        save_spots = self.get_save_spots()\n        save_spot_order = []\n        \"\"\"\n        Prefer save spots that are not wood harvesting spots: (We do not want to harvest wood if its not ordered)\n        \"\"\"\n        priority_1_save_spots = []\n        for spot in save_spots:\n            if spot.is_city:\n                if self.cartographer.harvesting_map[spot.pos[0]][spot.pos[1]].num_wood == 0:\n                    # save spot without wood harvesting\n                    priority_1_save_spots.append(spot)\n            else:\n                priority_1_save_spots.append(spot)\n\n        priority_2_save_spots = [s for s in save_spots if s not in priority_1_save_spots]\n\n        def save_spot_distribution(priority_save_spot: list):\n            for unit in self.free_units:\n                unit_cargo = 100 - unit.get_cargo_space_left()\n                unit_will_die = unit_cargo < 40\n                spot_positions = [spot.pos for spot in priority_save_spot]\n                if (len(priority_save_spot) > 0) and unit_will_die:\n                    if (unit.pos.x, unit.pos.y) not in spot_positions:\n                        # find closes save spot for unit.\n                        min_dist = np.inf\n                        closest_spot = None\n                        for spot in priority_save_spot:\n                            dist = self.cartographer.distance(origin=(unit.pos.x, unit.pos.y), destination=spot.pos)\n                            if dist < min_dist:\n                                min_dist = dist\n                                closest_spot = spot\n                            elif (dist == min_dist) and (not spot.is_city):\n                                # prefer non city save spots\n                                min_dist = dist\n                                closest_spot = spot\n\n                        if closest_spot is not None:\n                            unit_range = self.get_unit_range(unit=unit)\n                            # in 6 steps a unit can move 3 tiles. (minimum)\n                            if min_dist <= unit_range:\n                                save_spot_order.append([unit, closest_spot])\n                                if not closest_spot.is_city:\n                                    # city save spots can host any number of units but other save spots only one.\n                                    priority_save_spot.remove(closest_spot)\n                    else:\n                        # unit is standing on save spot.\n                        if len(priority_save_spot) > 0:\n                            closest_spot = [spot for spot in priority_save_spot\n                                            if spot.pos == (unit.pos.x, unit.pos.y)][0]\n                            save_spot_order.append([unit, closest_spot])\n                            if not closest_spot.is_city:\n                                # city save spots can host any number of units but other save spots only one.\n                                priority_save_spot.remove(closest_spot)\n\n        # fist priority 1 and then priority 2 save spots\n        save_spot_distribution(priority_save_spot=priority_1_save_spots)\n        save_spot_distribution(priority_save_spot=priority_2_save_spots)\n\n        for order in save_spot_order:\n            self.assign_order_to_unit(unit=order[0], position_tuple=order[1].pos,\n                                      order_type=OrderType.SaveSpot)\n\n    def order_city_support(self):\n        \"\"\"\n        Orders units for harvesting in the city. This is not the most efficient way to harvest in most cases, but the\n        units will not block other units if they are standing on a city tile, so it can be beneficial.\n        \"\"\"\n        def find_closes_free_unit_for_spot(district_harvesting_spot):\n            \"\"\"\n            Finds the closest unit for given district_harvesting_spot.\n            :param district_harvesting_spot: DistrictHarvestingSpot\n            :return: closest_unit and its distance to the gives DistrictHarvestingSpot\n            \"\"\"\n            m_dist = np.inf\n            c_unit = None\n            # only free units with less then 50 wood. (We do not want to wast wood.\n            for unit in self.free_units:\n                # if unit.cargo.wood < 50:\n                dist = self.cartographer.distance(origin=district_harvesting_spot.pos,\n                                                  destination=(unit.pos.x, unit.pos.y))\n                if dist < m_dist:\n                    m_dist = dist\n                    c_unit = unit\n                if m_dist == 0:\n                    break\n            return c_unit, m_dist\n\n        for dist_mayor in self.city_council.district_mayors:\n            if not dist_mayor.survives_next_night:\n                for dist_ha_spot in dist_mayor.district_harvesting_spots:\n                    if dist_ha_spot.harvesting_value > 27:\n                        closest_unit, min_dist = find_closes_free_unit_for_spot(district_harvesting_spot=dist_ha_spot)\n                        if closest_unit is not None and (min_dist < self.get_unit_range(unit=closest_unit)):\n                            self.assign_order_to_unit(unit=closest_unit, position_tuple=dist_ha_spot.pos,\n                                                      order_type=OrderType.CitySupport)\n\n            else:\n                # city will survive next night:\n                for dist_ha_spot in dist_mayor.district_harvesting_spots:\n                    if dist_ha_spot.includes_coal or dist_ha_spot.includes_uranium:\n                        closest_unit, min_dist = find_closes_free_unit_for_spot(district_harvesting_spot=dist_ha_spot)\n                        if closest_unit is not None and (min_dist < self.get_unit_range(unit=closest_unit)):\n                            self.assign_order_to_unit(unit=closest_unit, position_tuple=dist_ha_spot.pos,\n                                                      order_type=OrderType.CitySupport)\n\n    def order_harvesting(self, units=None):\n        \"\"\"\n        Orders free units or given units to harvest.\n        :param units:\n        \"\"\"\n        if units is None:\n            units = self.free_units\n\n        def get_biggest_priority_city(unit):\n            unit_day_range = math.floor(self.steps_until_night \/ 2)\n            # find district in need with the highest priority within unit range\n            max_priority = 0\n            dist_to_max = np.inf\n            max_priority_pos = None\n            for district_mayor in district_mayors_for_farming:\n                if district_mayor.harvesting_priority > 0:\n                    dist, closest_tile_pos = Cartographer.distance_to_district(pos=(unit.pos.x, unit.pos.y),\n                                                                               district_mayor=district_mayor)\n                    if dist < unit_day_range:\n                        \"\"\"\n                        Note: Unit range might be very high since the cargo is full.\n                        \"\"\"\n                        if (district_mayor.harvesting_priority > max_priority) or \\\n                                ((district_mayor.harvesting_priority == max_priority) and (dist < dist_to_max)):\n                            max_priority = district_mayor.harvesting_priority\n                            dist_to_max = dist\n                            max_priority_pos = closest_tile_pos\n            return dist_to_max, max_priority_pos, max_priority\n\n        # get all cities that need farming\n        harvesting_orders = []\n        district_mayors_for_farming = [district_mayor for district_mayor in self.city_council.district_mayors\n                                       if not district_mayor.survives_all_nights]\n\n        if self.night_steps_left < 12:\n            # we harvest everything in the last day cycle:\n            free_harvesting_positions = self.harvesting_officer.free_harvesting_positions\n        else:\n            free_harvesting_positions = self.harvesting_officer.strategic_harvesting_positions\n\n        for unit in units:\n            distance_to_city_tile, tile_pos, priority = get_biggest_priority_city(unit=unit)\n            unit_day_range = math.floor(self.steps_until_night \/ 2)\n            if (unit.get_cargo_space_left() == 0) or ((unit.get_cargo_space_left() <= 50) and\n                                                      distance_to_city_tile < unit_day_range):\n                # go to closest city in need.\n                if tile_pos is not None:\n                    harvesting_orders.append([unit, tile_pos, OrderType.Harvest_Return])\n\n            else:\n                unit_range = self.get_unit_range(unit=unit)\n                # if not on harvesting spot move to closes spot.\n                fuel_value_at_pos = self.cartographer.harvesting_map[unit.pos.x][unit.pos.y].fuel_value_per_turn\n                if fuel_value_at_pos == 0:\n                    # unit is not on a harvesting location --> find closest harvesting location:\n                    min_dist = np.inf\n                    closest_free_harvesting_pos = None\n                    for free_pos in free_harvesting_positions:\n                        dist = self.cartographer.distance(origin=[unit.pos.x, unit.pos.y],\n                                                          destination=[free_pos[0], free_pos[1]])\n                        if dist < min_dist:\n                            min_dist = dist\n                            closest_free_harvesting_pos = free_pos\n                    if (closest_free_harvesting_pos is not None) and (unit_range >= min_dist):\n                        # remove new position from free_harvesting_positions\n                        free_harvesting_positions.remove(closest_free_harvesting_pos)\n                        harvesting_orders.append([unit, closest_free_harvesting_pos, OrderType.Harvest_Go])\n                else:\n                    # look for better spot around.\n                    directions = [[0, 1], [1, 0], [0, -1], [-1, 0]]\n                    for d in directions:\n                        new_x = unit.pos.x + d[0]\n                        new_y = unit.pos.y + d[1]\n                        max_fuel_value = 0\n                        better_harvesting_pos = None\n                        if (0 <= new_x < self.cartographer.width) and (0 <= new_y < self.cartographer.height):\n                            fuel_value = self.cartographer.harvesting_map[new_x][new_y].fuel_value_per_turn\n                            if ((new_x, new_y) in free_harvesting_positions) and fuel_value > max_fuel_value:\n                                max_fuel_value = fuel_value\n                                better_harvesting_pos = (new_x, new_y)\n                        if (better_harvesting_pos is not None) and (max_fuel_value > fuel_value_at_pos):\n                            # add old unit position to free_harvesting_positions and remove new position\n                            free_harvesting_positions.add((unit.pos.x, unit.pos.y))\n                            free_harvesting_positions.remove(better_harvesting_pos)\n                            harvesting_orders.append([unit, better_harvesting_pos, OrderType.Harvest_Go])\n\n        for order in harvesting_orders:\n            self.assign_order_to_unit(unit=order[0], position_tuple=order[1], order_type=order[2])\n\n    def order_expansions(self):\n        \"\"\"\n        Order expansions until no worker is free or no more spots are found.\n        Runs a maximum of 10 cycles.\n        :return:\n        \"\"\"\n        counter = 1\n        order_expansions = True\n        full_cargo_units = [unit for unit in self.free_units if unit.get_cargo_space_left() == 0]\n        if self.strategy_information.player_research_status > 1:\n            self.order_closest_expansion_spots(units=full_cargo_units, max_number_per_unit=1)\n\n        while order_expansions:\n            counter += 1\n            fastest_spots = self.order_fastest_expansion_spots()\n            self.expansion_officer.update_expansion_maps(fastest_spots)\n            for spot in fastest_spots:\n                self.assign_order_to_unit(unit=spot.unit, position_tuple=spot.harvesting_pos,\n                                          order_type=OrderType.Expansion, additional_information=spot)\n            if (len(self.free_units) == 0) or (self.expansion_officer.get_number_of_free_expansion_spots() == 0)\\\n                    or counter == 10:\n                order_expansions = False\n\n    def order_closest_expansion_spots(self, units, max_number_per_unit=1):\n        \"\"\"\n        Only for units with full cargo\n        \"\"\"\n        for unit in units:\n            unit_expansions = self.expansion_officer.find_strategic_expansions(unit=unit,\n                                                                               max_number=max_number_per_unit)\n            if len(unit_expansions) > 0:\n                self.expansion_officer.update_expansion_maps(unit_expansions)\n                self.assign_order_to_unit(unit=unit_expansions[0].unit, position_tuple=unit_expansions[0].harvesting_pos,\n                                          order_type=OrderType.Expansion, additional_information=unit_expansions[0])\n\n    def order_fastest_expansion_spots(self, max_number_per_unit=5):\n        \"\"\"\n        Finds the fastest 5 expansion spots for each unit. Then we find the fastest unit for each expansion spot and\n        therefor fastest expansion overall.\n        Note: Lot of space for improvement. (Unit movement and so on ...\n        :param max_number_per_unit:\n        :return:\n        \"\"\"\n\n        def get_closest_spot_to_opponent_unit(input_spots):\n            closest_dist_to_enemy = np.inf\n            best_spot = None\n            for spot in input_spots:\n                for unit in self.cartographer.opponent.units:\n                    dist = Cartographer.distance(origin=spot.spot_pos,\n                                                 destination=(unit.pos.x, unit.pos.y))\n                    if dist < closest_dist_to_enemy:\n                        closest_dist_to_enemy = dist\n                        best_spot = spot\n            return best_spot\n\n        def get_closest_spot_to_next_expansion(input_spots, distribution_option):\n            \"\"\"\n            Old (Not uses for now)\n            \"\"\"\n            best_distribution_option = distribution_option.distribution_spots[0]\n            closest_dist_to_distribution_spot = np.inf\n            best_spots = []\n            for spot in input_spots:\n                dist = Cartographer.distance(\n                    origin=spot.spot_pos, destination=(best_distribution_option.origin_tile_pos[0],\n                                                       best_distribution_option.origin_tile_pos[1]))\n                if dist < closest_dist_to_distribution_spot:\n                    closest_dist_to_distribution_spot = dist\n                    best_spots = [spot]\n                elif dist == closest_dist_to_distribution_spot:\n                    best_spots.append(spot)\n\n            closest_spot_to_opponent = get_closest_spot_to_opponent_unit(input_spots)\n            if closest_spot_to_opponent in best_spots:\n                best_spot = closest_spot_to_opponent\n            else:\n                best_spot = best_spots[0]\n\n            return best_spot\n\n        expansion_options = []\n        for unit in self.free_units:\n            unit_expansions = self.expansion_officer.find_strategic_expansions(unit=unit,\n                                                                               max_number=max_number_per_unit)\n            expansion_options += unit_expansions\n\n        # find best unit to build expansion.\n        best_expansion_options = []\n        unique_expansion_ids = set([ex_spot.id for ex_spot in expansion_options])\n        for exp_id in unique_expansion_ids:\n            spots_with_id = [spot for spot in expansion_options if spot.id == exp_id]\n            min_time_to_build = min(spot.time_to_build for spot in spots_with_id)\n            spots_with_fastest_building_time = [spot for spot in spots_with_id if\n                                                spot.time_to_build == min_time_to_build]\n            if len(spots_with_fastest_building_time) > 1:\n                best_expansion_options += spots_with_fastest_building_time\n            else:\n                best_expansion_options.append(spots_with_fastest_building_time[0])\n\n        # Now we have the best units for each expansion. Now we need to identify the best expansions since we probable\n        # do not have the same amount of units as expansions.\n        final_spots = []\n        units = set([ex_spot.unit for ex_spot in best_expansion_options])\n        for unit in units:\n            # all spots where this specific unit is the fastest builder\n            unit_spots = [spot for spot in best_expansion_options if unit == spot.unit]\n            if len(unit_spots) > 0:\n                # some unity may not have a fastest expansion spot since another unit took it.\n                min_time_to_build = min(spot.time_to_build for spot in unit_spots) + 1  # min time + 1\n\n                unit_spots_with_min_time = [spot for spot in unit_spots if spot.time_to_build <= min_time_to_build]\n\n                # get unit_cluster:\n                unit_clusters = set()\n                for cluster in self.cartographer.resource_clusters:\n                    dist, _ = Cartographer.distance_to_cluster(pos=(unit.pos.x, unit.pos.y), cluster=cluster)\n                    if dist == 0:\n                        unit_clusters.add(cluster)\n                \"\"\"\n                NOTE: Here we decide how we choose between the best spots for a unit.\n                      We prefer spots that are closer to enemy spots and sometime spots that are closer to next \n                      cluster positions for faster expansions.\n                \"\"\"\n                if (len(unit_spots_with_min_time) > 1) and (min_time_to_build > 0):\n                    if self.strategy_information.num_player_city_tiles == 1:\n                        # get closest cluster\n                        unit_cluster = None\n                        if len(unit_clusters) > 0:\n                            # choose the biggest wood cluster as unit cluster.\n                            biggest_wood_cluster = None\n                            max_num_wood_tiles = 0\n                            for uc in unit_clusters:\n                                if uc.num_wood_tiles > max_num_wood_tiles:\n                                    max_num_wood_tiles = uc.num_wood_tiles\n                                    biggest_wood_cluster = uc\n                            if biggest_wood_cluster is not None:\n                                unit_cluster = biggest_wood_cluster\n                            else:\n                                # one at random (shot not be possible i guess...)\n                                unit_cluster = unit_clusters.pop()\n\n                        if unit_cluster is not None:\n                            distribution_option = self.get_distribution_options_for_cluster(cluster=unit_cluster)\n                            if len(distribution_option.distribution_spots) > 0:\n                                best_distribution_option = distribution_option.distribution_spots[0]\n                                closest_dist_to_distribution_spot = np.inf\n                                best_spots = []\n                                for spot in unit_spots_with_min_time:\n                                    dist = Cartographer.distance(\n                                        origin=spot.spot_pos, destination=(best_distribution_option.origin_tile_pos[0],\n                                                                           best_distribution_option.origin_tile_pos[1]))\n                                    if dist < closest_dist_to_distribution_spot:\n                                        closest_dist_to_distribution_spot = dist\n                                        best_spots = [spot]\n                                    elif dist == closest_dist_to_distribution_spot:\n                                        best_spots.append(spot)\n                                # check if closest spot is paar of min distance spots:\n                                closest_spot_to_opponent = get_closest_spot_to_opponent_unit(unit_spots_with_min_time)\n                                if closest_spot_to_opponent in best_spots:\n                                    best_spot = closest_spot_to_opponent\n                                else:\n                                    best_spot = best_spots[0]\n                            else:\n                                # choose spot that is the closest to enemy unit:\n                                best_spot = get_closest_spot_to_opponent_unit(unit_spots_with_min_time)\n                        else:\n                            # choose spot that is the closest to enemy unit:\n                            best_spot = get_closest_spot_to_opponent_unit(unit_spots_with_min_time)\n                    else:\n                        # We have more then one captures cluster\n                        # choose spot that is the closest to enemy unit:\n                        best_spot = get_closest_spot_to_opponent_unit(unit_spots_with_min_time)\n                else:\n                    # only one spot, so len(unit_spots_with_min_time) = 1\n                    if len(unit_spots_with_min_time) > 1:\n                        print(\"WARNING: something went wrong for distribution spots. (General)\")\n                    best_spot = unit_spots_with_min_time[0]\n\n                if best_spot is not None:\n                    # check if unit can go there\n                    unit_will_make_it = False\n                    if self.day:\n                        unit_range = self.get_unit_range(unit=best_spot.unit)\n                        if unit_range >= best_spot.dist:\n                            unit_will_make_it = True\n                    else:\n                        # move at night\n                        if best_spot.dist == 1:\n                            # unit is next to spot: (check if unit can survive at pos)\n                            collection_amount = self.cartographer.harvesting_map[best_spot.spot_pos[0]][\n                                best_spot.spot_pos[1]].collection_amount_per_turn\n                            if collection_amount > 4:\n                                unit_will_make_it = True\n                        else:\n                            # check if default direction leads to a farming cell.\n                            cell = self.cartographer.map.get_cell(best_spot.spot_pos[0], best_spot.spot_pos[1])\n                            direct_direction = best_spot.unit.pos.direction_to(cell.pos)\n                            new_pos = best_spot.unit.pos.translate(direct_direction, 1)\n                            collection_amount = self.cartographer.harvesting_map[new_pos.x][new_pos.y]. \\\n                                collection_amount_per_turn\n                            if collection_amount > 4:\n                                unit_will_make_it = True\n                    if unit_will_make_it:\n                        best_expansion_options = [exp_spot for exp_spot in best_expansion_options\n                                                  if exp_spot.id != best_spot.id]\n                        final_spots.append(best_spot)\n        return final_spots\n\n    def get_unit_range(self, unit):\n        \"\"\"\n        Calculates the unit range for a given unit.\n        :param unit: lux unit\n        \"\"\"\n        cargo = 100 - unit.get_cargo_space_left()\n        if self.day:\n            unit_range = math.floor(self.steps_until_night \/ 2) + math.floor(cargo \/ 16)\n            # 16 = 4 * 4 (4 is cool down at night and 4 fuel per step --> 16 fuel per moved tile\n        else:\n            # night:\n            unit_range = math.floor(cargo \/ 16)\n        return unit_range\n\n    def get_day_night_information(self, night_steps_left):\n        \"\"\"\n        First of all we need to know in which state we are. In terms of night and day shift.\n        There are 30 day steps followed by 10 night steps.\n        \"\"\"\n        self.steps_until_night = 30 - self.cartographer.observation[\"step\"] % 40\n        if self.steps_until_night > 0:\n            self.day = True\n            self.steps_until_day = 0\n        else:\n            self.day = False\n\n        if not self.day:\n            night_steps_left -= 1\n            self.steps_until_day = self.steps_until_night + 10\n        self.night_steps_left = night_steps_left\n        return night_steps_left\n\n    def build_strategy_information(self):\n        \"\"\"\n        Builds strategy information.\n        \"\"\"\n        # Get city information:\n        num_player_city_tiles = 0\n        num_player_save_city_tiles = 0\n        for dist_mayor in self.city_council.district_mayors:\n            if dist_mayor.survives_all_nights:\n                num_player_save_city_tiles += dist_mayor.size\n            num_player_city_tiles += dist_mayor.size\n\n        num_opponent_city_tiles = 0\n        num_opponent_save_city_tiles = 0\n        for city in self.cartographer.opponent.cities.values():\n            city_size = len(city.citytiles)\n            survives_all_nights = bool((city.get_light_upkeep() * self.night_steps_left) < city.fuel)\n            if survives_all_nights:\n                num_opponent_save_city_tiles += city_size\n            num_opponent_city_tiles += city_size\n\n        # Get research information:\n        if self.cartographer.player.researched_uranium():\n            player_research_status = 2\n        elif self.cartographer.player.researched_coal():\n            player_research_status = 1\n        else:\n            player_research_status = 0\n\n        if self.cartographer.opponent.researched_uranium():\n            opponent_research_status = 2\n        elif self.cartographer.opponent.researched_coal():\n            opponent_research_status = 1\n        else:\n            opponent_research_status = 0\n        player_research_points = self.cartographer.player.research_points\n        opponent_research_points = self.cartographer.opponent.research_points\n\n        # Get map resource information (With Player Research):\n        amount_of_wood_fuel = 0\n        amount_of_coal_fuel = 0\n        amount_of_uranium_fuel = 0\n\n        for cluster in self.cartographer.resource_clusters:\n            for resource_tile in cluster.resource_tiles:\n                if resource_tile.resource_type == \"w\":\n                    amount_of_wood_fuel += resource_tile.fuel_amount\n                elif resource_tile.resource_type == \"c\":\n                    amount_of_coal_fuel += resource_tile.fuel_amount\n                elif resource_tile.resource_type == \"u\":\n                    amount_of_uranium_fuel += resource_tile.fuel_amount\n\n        step = self.cartographer.observation[\"step\"]\n\n        # get num player and opponent clusters:\n        num_player_cluster = 0\n        num_opponent_cluster = 0\n        for cluster in self.cartographer.resource_clusters:\n            if cluster.captured_by == \"p\":\n                num_player_cluster += 1\n            elif cluster.captured_by == \"o\":\n                num_opponent_cluster += 1\n            elif cluster.captured_by == \"b\":\n                num_player_cluster += 1\n                num_opponent_cluster += 1\n\n        \"\"\"\n        Idea: We could think about the general resource information an the map. Independent of research.\n              And the amount of cluster and there sice could also be key. \n        \"\"\"\n\n        strategy_information = StrategyInformation(num_player_city_tiles=num_player_city_tiles,\n                                                   num_player_save_city_tiles=num_player_save_city_tiles,\n                                                   num_opponent_city_tiles=num_opponent_city_tiles,\n                                                   num_opponent_save_city_tiles=num_opponent_save_city_tiles,\n                                                   player_research_status=player_research_status,\n                                                   opponent_research_status=opponent_research_status,\n                                                   player_research_points=player_research_points,\n                                                   opponent_research_points=opponent_research_points,\n                                                   amount_of_wood_fuel=amount_of_wood_fuel,\n                                                   amount_of_coal_fuel=amount_of_coal_fuel,\n                                                   amount_of_uranium_fuel=amount_of_uranium_fuel, step=step,\n                                                   map_size=self.cartographer.map_size,\n                                                   num_player_cluster=num_player_cluster,\n                                                   num_opponent_cluster=num_opponent_cluster)\n        self.strategy_information = strategy_information\n\n\nclass OrderType(Enum):\n    Expansion = \"Expansion\"\n    Harvest_Go = \"Harvest_Go\"\n    Harvest_Return = \"Harvest_Return\"\n    CitySupport = \"CitySupport\"\n    SaveSpot = \"SaveSpot\"\n    ClusterDefence = \"ClusterDefence\"\n    Distribution = \"Distribution\"\n    Blocking = \"Blocking\"\n\n\nclass Order:\n    def __init__(self, order_type: OrderType, unit, pos, additional_information=None):\n        \"\"\"\n        :param order_type: OrderType\n        :param unit: lux unit\n        :param pos: pos tuple\n        \"\"\"\n        self.order_type = order_type\n        self.unit = unit\n        self.pos = pos\n        self.additional_information = additional_information\n        self.dist = Cartographer.distance(origin=(unit.pos.x, unit.pos.y), destination=pos)\n\n\nclass SaveSpot:\n    def __init__(self, pos, is_city):\n        self.pos = pos\n        self.is_city = is_city\n\n\nclass StrategyInformation:\n    \"\"\"\n    Holds strategic information for one step.\n    \"\"\"\n    def __init__(self, num_player_city_tiles, num_player_save_city_tiles, num_opponent_city_tiles, num_player_cluster,\n                 num_opponent_cluster,\n                 num_opponent_save_city_tiles, player_research_status, opponent_research_status, player_research_points,\n                 opponent_research_points, amount_of_wood_fuel, amount_of_coal_fuel, amount_of_uranium_fuel, step,\n                 map_size):\n        self.num_player_city_tiles = num_player_city_tiles\n        self.num_player_save_city_tiles = num_player_save_city_tiles\n        self.num_player_cluster = num_player_cluster\n        self.num_opponent_city_tiles = num_opponent_city_tiles\n        self.num_opponent_save_city_tiles = num_opponent_save_city_tiles\n        self.num_opponent_cluster = num_opponent_cluster\n        self.player_research_status = player_research_status\n        self.opponent_research_status = opponent_research_status\n        self.player_research_points = player_research_points\n        self.opponent_research_points = opponent_research_points\n        self.amount_of_wood_fuel = amount_of_wood_fuel\n        self.amount_of_coal_fuel = amount_of_coal_fuel\n        self.amount_of_uranium_fuel = amount_of_uranium_fuel\n        self.step = step\n        self.map_size = map_size\n\n    def show(self):\n        print(50 * \"-\")\n        print(f\"Step: {self.step}  map_size: {self.map_size}\")\n        print(f\"Fuel left: wood: {self.amount_of_wood_fuel}  |  coal: {self.amount_of_coal_fuel}\"\n              f\"  |  uranium: {self.amount_of_uranium_fuel} \")\n        print(\"           Player  |  Opponent\")\n        print(f\"city_tiles      {self.num_player_city_tiles}  |  {self.num_opponent_city_tiles}\")\n        print(f\"save_tiles      {self.num_player_save_city_tiles}  |  {self.num_opponent_save_city_tiles}\")\n        print(f\"research state  {self.player_research_status}  |  {self.player_research_status}\")\n        print(f\"research points {self.player_research_points}  |  {self.opponent_research_points}\")\n        print(f\"num_player_cluster: {self.num_player_cluster}  |  {self.num_opponent_cluster}\")\n        print(50 * \"-\")\n\n\nclass DistributionSpot:\n    def __init__(self, origin_cluster, other_cluster, dist, origin_tile_pos, destination_tile_pos):\n        self.origin_cluster = origin_cluster\n        self.other_cluster = other_cluster\n        self.dist = dist\n        self.origin_tile_pos = origin_tile_pos\n        self.destination_tile_pos = destination_tile_pos\n        self.priority = 0\n\n\nclass ClusterDistributionOptions:\n    def __init__(self, cluster, units, strat_info, city_council):\n        self.cluster = cluster\n        self.cluster_units = []\n        self.strategic_information = strat_info\n        for unit in units:\n            dist, _ = Cartographer.distance_to_cluster(pos=(unit.pos.x, unit.pos.y), cluster=cluster)\n            if dist == 0:\n                self.cluster_units.append(unit)\n        self.distribution_spots = []\n        # set num of units that could be send away\n        \"\"\"\n        Note: If no enemy is around this number is all but one. If otherwise an enemy is around we need to make sure \n        that we can protect the cluster.\n        --> We need one unit for each possible expansion spot and one for each city tiles that will not survive the\n        next night.\n        \"\"\"\n        self.max_num_distributions = 0\n        if (cluster.captured_by == \"b\") or (cluster.captured_by == \"p\" and cluster.min_dist_to_opponent_unit < 6):\n            # we do not want to lose captured clusters\n            if strat_info.num_player_cluster == 1:\n                if (len(cluster.attached_player_city_tiles_pos) == 2) and (cluster.num_surrounding_units == 2):\n                    self.max_num_distributions = 1\n                elif (len(cluster.attached_player_city_tiles_pos) == 3) and (cluster.num_surrounding_units > 2):\n                    self.max_num_distributions = 2\n                elif (len(cluster.attached_player_city_tiles_pos) == 4) and (cluster.num_surrounding_units > 2):\n                    self.max_num_distributions = 2\n            else:\n                num_city_tiles_to_support = len(cluster.attached_player_city_tiles_pos)\n                # exclude those that will survive the next night.\n                for tile_pos in cluster.attached_player_city_tiles_pos:\n                    district_major = city_council.get_district_mayor_by_pos(pos=tile_pos)\n                    if district_major.survives_next_night:\n                        num_city_tiles_to_support -= 1\n\n                num_support_tiles = num_city_tiles_to_support + cluster.num_possible_expansions\n                if cluster.num_surrounding_units > num_support_tiles:\n                    self.max_num_distributions = cluster.num_surrounding_units - num_support_tiles\n                else:\n                    if cluster.num_surrounding_units >= (cluster.num_surrounding_opponent_units + 2):\n                        self.max_num_distributions = cluster.num_surrounding_units - \\\n                                                     (cluster.num_surrounding_opponent_units + 2)\n        else:\n            if (len(cluster.attached_player_city_tiles_pos) == 2) and (cluster.num_surrounding_units == 2):\n                self.max_num_distributions = 1\n            elif (len(cluster.attached_player_city_tiles_pos) == 3) and (cluster.num_surrounding_units > 2):\n                self.max_num_distributions = 2\n            elif (len(cluster.attached_player_city_tiles_pos) >= 3) and (cluster.num_surrounding_units > 2):\n                self.max_num_distributions = 2\n        self.num_usable_units = self.max_num_distributions\n\n    def add_spot(self, spot: DistributionSpot):\n        self.distribution_spots.append(spot)\n\n    def prioritize_spots(self):\n        \"\"\"\n        Adds the priority to each spot in self.distribution_spots and then sorts all spots recording to there priority.\n        \"\"\"\n        for spot in self.distribution_spots:\n            if (spot.other_cluster.num_surrounding_units < 1) \\\n                    and (len(spot.other_cluster.attached_player_city_tiles_pos) == 0):\n                base_priority = spot.other_cluster.num_wood_tiles\n                priority = base_priority\n                # only if we have no unit there we want to co there.\n                # check for territory\n                if self.strategic_information.num_player_cluster == 1:\n                    # we do not want the player to walk to the opponent cluster first.\n                    if spot.other_cluster.territory == \"o\":\n                        priority = 0\n                else:\n                    # even if we do hae more then one cluster we should still prefer expand on our side of the map first\n                    if spot.other_cluster.territory == \"o\":\n                        priority = base_priority * 0.6\n\n                if spot.other_cluster.territory == \"b\":\n                    # We should highly prioritise both clusters.\n                    priority = base_priority * 1.51\n                \"\"\"\n                Note: Increasing priority fpr clusters with coal or uranium did't work out in the early games.\n                \"\"\"\n                spot.priority = priority\n        self.distribution_spots = sorted(sorted(self.distribution_spots,\n                                                key=lambda k: k.dist), key=lambda k: k.priority, reverse=True)\n\n    def trim_spots(self):\n        \"\"\"\n        One cluster can only afford a certain amount of distributions spots. Drop all but the best\n        self.max_num_distributions spots.\n        \"\"\"\n        self.distribution_spots = [spot for spot in self.distribution_spots if spot.priority > 0]\n        self.distribution_spots = self.distribution_spots[:max(self.max_num_distributions, 2)]","bcc03d74":"%%writefile agent.py\nimport time\nfrom lux.game import Game\nfrom Cartographer import Cartographer\nfrom ExpansionOfficer import ExpansionOfficer\nfrom General import General\nfrom MovementOfficer import MovementOfficer\nfrom CityCouncil import CityCouncil\nfrom HarvestingOfficer import HarvestingOfficer\n\ngame_state = None\n\n\ndef agent(observation, configuration):\n    global game_state\n    global night_steps_left\n    global territory_map\n\n    step_start = time.time()\n\n    if observation[\"step\"] == 0:\n        game_state = Game()\n        game_state._initialize(observation[\"updates\"])\n        game_state._update(observation[\"updates\"][2:])\n        game_state.id = observation.player\n    else:\n        game_state._update(observation[\"updates\"])\n\n    actions = []\n\n    player = game_state.players[observation.player]\n    opponent = game_state.players[(observation.player + 1) % 2]\n\n    if observation[\"step\"] == 0:\n        \"\"\"\n        Set some initial variables:\n        \"\"\"\n        night_steps_left = 90\n        cartographer = Cartographer(lux_map=game_state.map, player=player, opponent=opponent, observation=observation)\n        territory_map = cartographer.build_territory_map()\n\n    cartographer = Cartographer(lux_map=game_state.map, player=player, opponent=opponent, observation=observation)\n    cartographer.territory_map = territory_map\n    cartographer.map_battlefield()\n    cartographer.build_resource_cluster()\n    harvesting_officer = HarvestingOfficer(harvesting_map=cartographer.harvesting_map,\n                                           resource_clusters=cartographer.resource_clusters, lux_map=game_state.map)\n    movement_officer = MovementOfficer(step=observation[\"step\"], city_map=cartographer.city_map,\n                                       unit_map=cartographer.unit_map, player=player,\n                                       opponent=opponent, lux_map=game_state.map,\n                                       harvesting_map=cartographer.harvesting_map)\n    expansion_officer = ExpansionOfficer(lux_map=game_state.map, city_map=cartographer.city_map,\n                                         harvesting_grid=cartographer.harvesting_map,\n                                         builder_obstacles_map=movement_officer.builder_obstacles_map,\n                                         obstacles_map=movement_officer.obstacles_map,\n                                         resource_cluster=cartographer.resource_clusters,\n                                         movement_officer=movement_officer)\n    city_council = CityCouncil(lux_map=game_state.map, city_map=cartographer.city_map, unit_map=cartographer.unit_map,\n                               player=player, harvesting_map=cartographer.harvesting_map,\n                               expansion_officer=expansion_officer)\n    general = General(cartographer=cartographer, expansion_officer=expansion_officer, movement_officer=movement_officer,\n                      city_council=city_council, harvesting_officer=harvesting_officer, actions=actions)\n    night_steps_left = general.get_day_night_information(night_steps_left=night_steps_left)\n    movement_officer.day = general.day\n    city_council.summon_district_mayors(night_steps_left=general.night_steps_left)\n    expansion_officer.district_mayors = city_council.district_mayors\n    general.build_strategy_information()\n    expansion_officer.build_expansion_maps(strategy_information=general.strategy_information, units=general.free_units)\n    general.order()\n    movement_officer.build_movement_map(orders=general.orders)\n    general.execute_orders(game_state=game_state, show_annotation=True)\n\n    step_end = time.time()\n    step_duration = step_end - step_start\n    if step_duration > 1:\n        print(f\"WARNING: Step Duration {step_duration} Seconds (Step: {observation['step']})\")\n\n    return actions","a6d27b5a":"env = make(\"lux_ai_2021\", configuration={\"seed\": 41, \"loglevel\": 1, \"annotations\" : True}, debug=True)\nsteps = env.run([\".\/agent.py\", \".\/agent.py\"])","51146e50":"env.render(mode=\"ipython\", width=1200, height=800)","c2feed20":"env = make(\"lux_ai_2021\", configuration={\"seed\": 58, \"loglevel\": 1, \"annotations\" : True}, debug=True)\nsteps = env.run([\".\/agent.py\", \".\/agent.py\"])","0e6fd3f1":"env.render(mode=\"ipython\", width=1200, height=800)","e0b5a432":"env = make(\"lux_ai_2021\", configuration={\"seed\": 218, \"loglevel\": 1, \"annotations\" : True}, debug=True)\nsteps = env.run([\".\/agent.py\", \".\/agent.py\"])","dc10ed3c":"env.render(mode=\"ipython\", width=1200, height=800)","674d0b19":"env = make(\"lux_ai_2021\", configuration={\"seed\": 139, \"loglevel\": 1, \"annotations\" : True}, debug=True)\nsteps = env.run([\".\/agent.py\", \".\/agent.py\"])","888720b1":"env.render(mode=\"ipython\", width=1200, height=800)","1295b470":"!tar -czvf submission19.tar.gz __init__.py agent.py main.py lux\/*","6ae3e7a7":"<a id=\"2.\"><\/a>\n<a id=\"2.1\"><\/a>\n<div style=\"display:fill;\n           border-radius:0px;\n           border-style: solid;\n           text-align:center;\n           font-size:17px;\n           letter-spacing:0.5px;\n           padding: 0.4em;\n           text-align:left\">  \n<h1> 2. Classes <\/h1>\n<hr>\n<h2> 2.1 Cartographer and Helper Classes <\/h2>","e7035b31":"<a id=\"2.5\"><\/a>\n<div style=\"display:fill;\n           border-radius:0px;\n           border-style: solid;\n           text-align:center;\n           font-size:17px;\n           letter-spacing:0.5px;\n           padding: 0.4em;\n           text-align:left\">  \n<h2> 2.5 CityCouncil and DistrictMayor <\/h2>\n<\/div>","63c2b7dc":"<a id=\"3.\"><\/a>\n<div style=\"display:fill;\n           border-radius:0px;\n           border-style: solid;\n           text-align:center;\n           font-size:17px;\n           letter-spacing:0.5px;\n           padding: 0.4em;\n           text-align:left\">  \n<h1> 3. Agent <\/h1>\n<\/div>","60e181fc":"<div style=\"display:fill;\n           border-radius:0px;\n           border-style: solid;\n           text-align:center;\n           font-size:17px;\n           letter-spacing:0.5px;\n           padding: 0.4em;\n           text-align:left\">  \n    <h1>\ud83e\udd16 <b>  Pure Rule-Bases-Agent for the LUX-AI Challenge  <\/b> \ud83e\udd16<\/h1>\n<\/div>","d6859784":"<a id=\"4.\"><\/a>\n<div style=\"display:fill;\n           border-radius:0px;\n           border-style: solid;\n           text-align:center;\n           font-size:17px;\n           letter-spacing:0.5px;\n           padding: 0.4em;\n           text-align:left\">  \n<h1> 4. Final Thoughts <\/h1>\n<hr> \nAfter all, there's a lot to improve on and this agent didn't hold up against all the IL copys of Toade Brigade, but it was a fun project and I really enjoyed classic object-oriented programming as a contrast from all the data science stuff at work.  I hope some of you found this notebook helpful and maybe learned something. Please let me know what you think in the comments and ask questions if you want. Have a nice day ;)\n<\/div>","ac25786f":"<a id=\"1.\"><\/a>\n<div style=\"display:fill;\n           border-radius:0px;\n           border-style: solid;\n           text-align:center;\n           font-size:17px;\n           letter-spacing:0.5px;\n           padding: 0.4em;\n           text-align:left\">   \n<h1> 1. Introduction and Idea <\/h1>\nHello everyone. Now that the competition is over, I thought I might share my purely rules-based agent with you. I started this competition as a small side project and ended up having a lot of fun with it. So i invested my evenings over the last few weeks. The core idea was to describe all the components of the game in separate classes in a classic object-oriented way. The overall structure suffered a bit from the rapid development of the leaderboard and the time lag on my side, but I think it's still okay overall and some of you may find it interesting. \n\n<hr>\nThe idea is that we have a general and five officers. The general takes the information from his five officers and decides which order each unit will receive for each step. The orders are divided into eight different types:\n<ul>\n  <li> <b>Expansion <\/b>       --> The unit finds the fastest or most strategic expansion spot and moves there. (or to a suitable harvesting location if the expansion location has no possible harvesting value).<\/li>\n  <li> <b>Harvest_Go <\/b>      --> Find the best location to harvest and harvest there. (go there first)<\/li>\n  <li> <b>Harvest_Return <\/b>  --> Return from harvesting to support the city with the highest priority.<\/li>\n  <li> <b>CitySupport <\/b>     --> Cities harvesting. Only if the support will generate enough to help the city survive the next night.<\/li>\n  <li> <b>SaveSpot <\/b>        --> Move to a safe place to survive the night. Can be a harvesting location with fuel_collection_amount > 4 or a city_tile of a city that survives the night.<\/li>\n  <li> <b>ClusterDefence <\/b>  --> Stands on a possible expansion spot to block this spot for enemy units.<\/li>\n  <li> <b>Distribution <\/b>    --> Move to the wood cluster that is not jet captured by the player. (This is cruel for a good agent).<\/li>\n  <li> <b>Blocking <\/b>        --> Block incoming units before they reach your cluster.<\/li>\n<\/ul> \n\nEach step begins with the Cartographer mapping the battlefield. Then the HarvestingOfficer takes these maps and creates the harvesting maps. Then the ExpansionOfficer, CityCouncyl, and MovementOfficer take these maps and create additional information for the General. Then the General takes all this information to order each unit for that step.\n\n<hr>\nLet's start with a small introduction for each class. This might make it easier to read the code later. As mentioned before, we have six main classes (the general and his five officers). In addition to that, each main class has several helper classes. However, sometimes these classes are just containers or enums.\n\n<ol>\n<li> <b> Cartographer: <\/b> <br> The Cartographer is the first class and maps the battlefield each turn. In addition, this class manages the distance logic on these maps.An important auxiliary class is the ResouceCluser, which is created by the Cartographer for each resource cluster. The ResourceCluster manages cluster-related information such as size, captures_by, territory, min_dist_to_opponent_unit, and more at each step of the game. This information plays an important role in unit distribution and expansion logic. <\/li>\n<li> <b> CityCouncil and DistrictMayor: <\/b> <br> As the name suggests, these classes are responsible for managing the cities. For this purpose, each city has a DistrictMajor that manages important information such as fuel_income_per_turn, number_of_possible_expansions, strategic_expansion_positions and so on. The CityCouncil is responsible for managing all DistrictMajors and thus tasks such as spawning units, research, and fuel priorities. <\/li>  \n<li> <b> MovementOfficer: <\/b> <br> The MovementOfficer handles all movement orders. It uses its MovementOptions helper class to evaluate all movement options for all units and execute them in an optimized way to make sure we have no collisions within our own units and no unnecessary blocking. <\/li>\n<li> <b> ExpansionOfficer: <\/b> <br> This class handles expansions. For this task, the class uses map information from the cartographer to create two expansion maps. A base map (which contains all possible expansion points with positive harvest value) and a strategic map that handles things like walls and other strategic things. <\/li>\n<li> <b> HarvestingOfficer: <\/b> <br> This class simply creates lists of all harvest positions and strategic harvest positions. Strategic here means, for example, that we don't want to harvest from a wood tile with less than 250 wood to prevent them from perishing when we have other options. <\/li>\n<li> <b> General: <\/b> <br> This is the main class. It uses all the information from the other classes to give all units a task for each step.<\/li>\n<\/ol>\n    \n<hr>\n\nI tried to leave some helpful comments in the code to make it easier to understand. Or at least I hope they make the code easier to understand. In the end, it was a growing project and some parts might not be consistent.( All in all, we are talking about 3.2k lines of code. So you could start by looking at some sample games in section 3.1 and using the table of contents for navigation). Please let me know what you think. \n<\/div>","e4b04b7c":"<a id=\"2.1.1\"><\/a>\n<div style=\"display:fill;\n           border-radius:0px;\n           border-style: solid;\n           text-align:center;\n           font-size:17px;\n           letter-spacing:0.5px;\n           padding: 0.4em;\n           text-align:left\">  \n<h2> 2.1.1 Maps in Excample Run <\/h2>\n<hr>\nTerritory map in the first step from the point of view of both players. (o for player territory and x for opponent territory). <br>\nAt steps > 1 we show the resource clusters. (o for resource tile and x for surrounding tiles). Feel free to change the seed and try other maps by adjusting the code above.\n<\/div>","174b7501":"## Submission","9f8a89cf":"<a id=\"2.2\"><\/a>\n<div style=\"display:fill;\n           border-radius:0px;\n           border-style: solid;\n           text-align:center;\n           font-size:17px;\n           letter-spacing:0.5px;\n           padding: 0.4em;\n           text-align:left\">  \n<h2> 2.2 MovementOfficer <\/h2>\n<\/div>","119eb92f":"<a id=\"2.4\"><\/a>\n<div style=\"display:fill;\n           border-radius:0px;\n           border-style: solid;\n           text-align:center;\n           font-size:17px;\n           letter-spacing:0.5px;\n           padding: 0.4em;\n           text-align:left\">  \n<h2> 2.4 HarvestingOfficer <\/h2>\n<\/div>","7a5b8416":"## Table of contents\n* [1. Introduction and Idea](#1.)\n* [2. Classes](#2.)\n    - [2.1 Cartographer and Helper Classes](#2.1)\n        - [2.1.1 Maps in Excample Run](#2.1.1)\n    - [2.2 MovementOfficer](#2.2)\n    - [2.3 ExpansionOfficer](#2.3)\n    - [2.4 HarvestingOfficer](#2.4)\n    - [2.5 CityCouncil and DistrictMayor](#2.5)\n    - [2.6 General](#2.6)\n* [3. Complet Agent](#3.)\n    - [3.1 Some Excample Matches](#3.1)\n* [4. Final Thoughts](#4.)\n","73ffb634":"<a id=\"3.1\"><\/a>\n<div style=\"display:fill;\n           border-radius:0px;\n           border-style: solid;\n           text-align:center;\n           font-size:17px;\n           letter-spacing:0.5px;\n           padding: 0.4em;\n           text-align:left\">  \n<h2> 3.1 Some Excample Matchs <\/h2>\n<\/div>","fbccb6b5":"<a id=\"2.6\"><\/a>\n<div style=\"display:fill;\n           border-radius:0px;\n           border-style: solid;\n           text-align:center;\n           font-size:17px;\n           letter-spacing:0.5px;\n           padding: 0.4em;\n           text-align:left\">  \n<h2> 2.6 General <\/h2>\n<\/div>","58ad030d":"<a id=\"2.3\"><\/a>\n<div style=\"display:fill;\n           border-radius:0px;\n           border-style: solid;\n           text-align:center;\n           font-size:17px;\n           letter-spacing:0.5px;\n           padding: 0.4em;\n           text-align:left\">  \n<h2> 2.3 ExpansionOfficer <\/h2>\n<\/div>"}}