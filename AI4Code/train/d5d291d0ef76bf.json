{"cell_type":{"34b7bf73":"code","3367827c":"code","77d7d71e":"code","70ca5c13":"code","d126dcbf":"code","44cdeb67":"code","2d96718c":"code","55a59a73":"code","038757f5":"code","6f8d76dd":"code","f2a6b131":"code","e8de6217":"code","e227e25d":"code","c1bafc70":"code","6c885f03":"markdown","2db39159":"markdown","fdd79315":"markdown","6adff308":"markdown","2cfaa455":"markdown","469defc0":"markdown","b74ddd44":"markdown","8b4174b0":"markdown","09aa205c":"markdown","9b21f7b6":"markdown","da94078d":"markdown"},"source":{"34b7bf73":"import os\nimport cv2\nimport random\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","3367827c":"# all classes \nclasses = [\"brightpixel\",\n            \"narrowband\",\n            \"narrowbanddrd\",\n            \"noise\",\n            \"squarepulsednarrowband\",\n            \"squiggle\",\n            \"squigglesquarepulsednarrowband\"]\nnum_images = 2\nfor _class in classes:\n    # start off by observing images\n    path = os.path.join(\"..\/input\/primary_small\/train\", _class)\n    image_files = os.listdir(path)\n    random_images = random.sample(range(0, len(image_files)-1), num_images)\n    fig, axes = plt.subplots(nrows=1, ncols=num_images, figsize=(12, 14), squeeze=False)\n    fig.tight_layout()\n    for l in range(1):\n        for m in range(num_images):\n            axes[l][m].imshow(cv2.imread(os.path.join(path, image_files[random_images[m]]), 0), cmap=\"gray\")\n            axes[l][m].axis(\"off\")\n            axes[l][m].set_title(_class)\n# done displaying","77d7d71e":"def display(image):\n    fig = plt.figure(figsize=(9, 11))\n    plt.imshow(image, cmap=\"gray\")\n    plt.axis(\"off\")\n    plt.show()","70ca5c13":"_random = random.choice(os.listdir(os.path.join(\"..\/input\/primary_small\/train\/narrowband\")))\n# lets read the image and display it\nnarrowband = cv2.imread(os.path.join(\"..\/input\/primary_small\/train\/narrowband\", _random))\ndisplay(narrowband)","d126dcbf":"# convert from BGR to Grayscale\nnarrowband = cv2.cvtColor(narrowband, cv2.COLOR_BGR2GRAY)\ndisplay(narrowband)","44cdeb67":"# now let's extract some features from the image\nlow = np.min(narrowband)\nhigh = np.max(narrowband)\nmean = np.mean(narrowband)\nstd = np.std(narrowband)\nvariance = np.var(narrowband)\n# print\nprint(\"Min: {}\".format(low))\nprint(\"Max: {}\".format(high))\nprint(\"Mean: {}\".format(mean))\nprint(\"Standard Deviation: {}\".format(std))\nprint(\"Variance: {}\".format(variance))","2d96718c":"clipped = np.clip(narrowband, mean-3.5*std, mean+3.5*std)\n# print\nprint(\"Min: {}\".format(np.min(clipped)))\nprint(\"Max: {}\".format(np.max(clipped)))\ndisplay(clipped)","55a59a73":"# Gaussian blurr\ngaussian = cv2.GaussianBlur(narrowband, (3, 3), 1)\nprint(\"Min: {}\".format(np.min(gaussian)))\nprint(\"Max: {}\".format(np.max(gaussian)))\nprint(\"Mean: {}\".format(np.mean(gaussian)))\ndisplay(gaussian)","038757f5":"# lets do a morphological closing on the clipped image which is dilation + erosion\nmorphed = cv2.morphologyEx(gaussian, cv2.MORPH_CLOSE, kernel=np.ones((3, 3), dtype=np.float32))\ndisplay(morphed)","6f8d76dd":"# we'll start by applying sobel edge detection along x-axis\nsobelx = cv2.Sobel(morphed, cv2.CV_64F, 1, 0, 2)\ndisplay(sobelx)","f2a6b131":"# let's apply sobel ege detection along y-axis\nsobely = cv2.Sobel(morphed, cv2.CV_64F, 0, 1, 2)\ndisplay(sobely)","e8de6217":"blended = cv2.addWeighted(src1=sobelx, alpha=0.7, src2=sobely, beta=0.3, gamma=0)\ndisplay(blended)","e227e25d":"def process_image(image):\n    # grayscale conversion\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    # clip intensities\n    mean = np.mean(image)\n    std = np.std(image)\n    image = np.clip(image, mean-3.5*std, mean+3.5*std)\n    # morph close \n    morphed = cv2.morphologyEx(image, cv2.MORPH_CLOSE, kernel=np.ones((3, 3), dtype=np.float32))\n    # gradient in both directions\n    sobelx = cv2.Sobel(morphed, cv2.CV_64F, 1, 0, 2)\n    sobely = cv2.Sobel(morphed, cv2.CV_64F, 0, 1, 2)\n    # blend \n    blended = cv2.addWeighted(src1=sobelx, alpha=0.7, src2=sobely, beta=0.3, gamma=0)\n    return blended\n","c1bafc70":"for _class in classes:\n    # start off by observing images\n    path = os.path.join(\"..\/input\/primary_small\/train\", _class)\n    image_files = os.listdir(path)\n    random_images = random.sample(range(0, len(image_files)-1), num_images)\n    fig, axes = plt.subplots(nrows=1, ncols=num_images, figsize=(11, 12), squeeze=False)\n    fig.tight_layout()\n    for l in range(1):\n        for m in range(num_images):\n            axes[l][m].imshow(process_image(cv2.imread(os.path.join(path, image_files[random_images[m]]))), cmap=\"gray\")\n            axes[l][m].axis(\"off\")\n            axes[l][m].set_title(_class)\n# done displaying","6c885f03":"After inspecting from the below features, we can clearly see that there are outliers in our images which are far away from the mean","2db39159":"The Gaussian Blurr increased the min and reduced the max pixel intensities further for the image packing the pixels closer to each other that smoothens the image. Unofrtunately for images that have weak signals Gaussian blurr actually blurrs part of the signal itself which we may not help, so it's upto us on if we want to use the Gaussian blurr or not(I decided to use it for further downstream transformations). \n\nLet's move on to morphological operations on the narrowband image.","fdd79315":"The above image is so far the smoothest image and it clearly distinguishes the signal from background which will save a lot of time later when classifying them via a Convolutional Neural Network.\n\nFinally let's apply same set of transformations to couple of images in each class and see if the results are uniform. Before that let's copy all the above transformations into a method.","6adff308":"We can see that the maximum pixel intensity reduced by clipping the image which makes much smoother image. Now let's perform some image arithmetic methods like applying Gaussian Blurr, Morphing and Gradient selection","2cfaa455":"Notice how the image is displayed in weird colorspace? This is because openCV reads an image in \"BGR\" format when compared to matplotlib expectation of \"RGB\". Let's make the image grayscale and start applying preprocessing.","469defc0":"## SETI Explanatory Analysis and Preprocessing Images\n\nLet's start by examining images in each class, below snippet will randomly select two images from the training data and displays them.","b74ddd44":"One can observe that despite many signals being strong with less noice, we still have some images with high level of noice and even some signals hiding along noice. So we'll do some preprocessing to the images to see if that can extract the features we're looking for.\n\nLet's pick a random image from \"narrowband\" class and perform some pre-processing on them and see how it turns out. Before that let's construct a helper method that takes a numpy array and displays it as a image.","8b4174b0":"Now, let's blend both images with more horizontal weight as we know all signals have a gradient along horizontal axis","09aa205c":"Let's make an assumption that every pixel which is 3.5 times standard deviations away from mean value is an outlier and clip it's value to the 3.5 * std","9b21f7b6":"As you see that the above pre-processign algorithm did really good in highlighting the signal in each class,even for the classes that have some vertical gradient in them such as Squiggle and Squigglesquarepulsednarrowband by preserving their shape.\n\nWe can pre-process the images further by applying Image PCA, Dialtion and other image arithmetic techniques, but these should be sufficient to feed the images to any Machine Learning\/Deep Learning algorithms for successful classification.","da94078d":"This morphological closing clearly helped some of the low intensity signal pixels to expose more and brighten the signal compared to background noice. \n\nNow, lets observe all the images from all classes (scroll above to 3rd cell) and we can notice that each signal has some gradient along the horizontal axis and we'll make use of that gradient by applying Sobel operations to the morphed image"}}