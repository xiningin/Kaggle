{"cell_type":{"52edb43f":"code","01067d18":"code","89b4021b":"code","85228bd4":"code","a7251e50":"code","9edf5542":"code","b1f84fae":"code","e1e38451":"code","bbcb2e2b":"code","8302e80e":"code","6d0eff9d":"code","60630435":"code","58cbe36b":"code","c10ec5e1":"code","b955d4c6":"code","ea0b5581":"code","299aeeab":"code","04c525e5":"code","0fc46314":"code","665587bc":"markdown","d68c60c7":"markdown","46ccc6b8":"markdown","3883575f":"markdown"},"source":{"52edb43f":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAwICRcVExgXFhcaGRgYHh4aHRoaHR8fHR0iIB8iIiAdHyYmKjkvJSc3KB4iMEYxNTs+QUJBIy5JT0g\/TjlAQT4BDQ4OExETIBUVIz4mJy0+QD4+Pj4+Pj4+Pj4+Pj8+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+Pj4+PkU+Pj4+Pj4+Sv\/AABEIALcBEwMBIgACEQEDEQH\/xAAbAAEAAgMBAQAAAAAAAAAAAAAABQYBAwQHAv\/EADgQAAEEAQMCBQMDAQcEAwAAAAEAAgMRBBIhMQVBBhNRYXEigZEHFKEyQlKSscHR4TNiovAVI3L\/xAAZAQEBAQEBAQAAAAAAAAAAAAAAAgEDBAX\/xAAfEQEBAQEAAwEBAAMAAAAAAAAAARECEiExA0FRYXH\/2gAMAwEAAhEDEQA\/APVUREBERAREQEREBERAREQERaZpwxjnGyGAk1udhZ29UG1FA9Q66S2BuKGySZILmajTWsABL3VvQsDbuVjB6pkMyW4+UxmqRrnRyRXpdpq2kHcGja3Gan0WHGhvwqZ0nrMxzWSve79tlukihaf6QY\/6CP8A9AON96STS3F0RVfrHU8jHyjGwGUZLAIWECmSNNOLiBemjqN3wfVb+o9WyMZ+PGY2zulBadB0uLmglxAOwbQ7lbhqxIuKLqDHPMZOmRrGyOaf7INgWeOx79l1g2pa+kREBERAREQEREBERAREQEREBERAREQEREBERAREQYXPm5jIY3SSODWNq3HgWa\/1XF1rrcWN5YcbfK4NYwEW4k0SewA7k7duSFC9czMiKV8DwyWLMIbE6WgyIkU6N4A3HcepNWqnOstx2da69JjZMAEYkglY5ziyy8aaJI7Ggbrki\/RQnRc4wyzzteZMWXIc2Tk6NdFkg\/7fqDSO23ou3B6Lkt0Y7nahjPjlhyDwW7h8RF3dEgdqI9FZMLpsUJeY2BvmO1uA4Lu5A4F8mlWyRMlvtWsPos4sREMkw5XiFz2kxyRSAO0Gt6BNWOKCksDpeQ\/Jbk5To9UbXNjii1aW6qtxJ3JoVwrAim9arHPm4wlifGSWh7S0lppwBFGj2KhB4RZoiZ58+iEtcxuptNLeK2VjWjMlLI3OBaC0E\/Vxt6+gWS2fDI5Zuma8uLILv+kx7AyuS+vqu9thVV3WiTp73dQbO6vLjhLWb7l7nW4122A\/lRvSfHME0nkyAwyXpFkOY4\/9rhtv2urVqW3Z9ZLL8ee9TyZRjzENd+4z5H03+lzYIwRe+42H5ep\/ojpGQNyJZmMx2xBzYo2\/Q1gaCCXncmvYKdfA1xstBIBAJG4B5APYFQGZ4cc6KDFDz+1aXGTenuaCSyMH0BP4AW+WzDLPaZ6ZnieFkoa5geLAfsa7H7jddipnRsWTIySHSukxcN5EbnAAvkG1Ej+oM3F+p9QpLoXiB08sjHxuDPMlZFI0EtcIyQQ70O3fY9ll5z42VYkRFLRERAREQEREBERAREQEREBERAREQEREGFydTyzDC+RsbpHNGzGC3OPYBdL3AAk7Abk\/CqU3WBkyNfjTuhmAIZFMCIp2Xdt7G+xBsbWFsmstx9dKyYM1josppORoJk8yIxENJumEi6Bqjd7A2u3p\/SHuhfj5RbPC1zTFIT9bm8gOruOLHIXK7p\/\/AMhJG+Vj4Hwao5oyNpGuo6A7gsJANjtsrQxgaAAKAFADgAKrWSMtFBZRZUKEREGFFeI+sR4mO6R+97Nb3c4jYf7+ylV5H+o3VhPmeW0\/RAC32LzRcf4A+xV\/nz5XEfp14zVWebJNAWSaHAs3Q9gvR\/068SPlJxZjqc0ao3HktHLT612K83Xf0DqAxsuKY3pY4F1c6SCD87G69l6\/053nHj47s617wi0487ZGNewhzXAEEcEHutq8L3oDxJ0V8zGmJ7m6SS6JrtDZQTZBI4d6H8qU6bhMgibHGzQ0C9N3RO5snk33XWuTqTphGTjtY6SxQkJa2r3JIBPC3bfTM\/rrWVQH9RzppmwCcR5HmEPjZGKjY2iZHOJOoEEVQFk12NXxrwbogkbH\/lbecJdfaIiloiIgIiICIiAiIgIiICIiAiIgIiIIjr0YnjfiiXy5JWEja7aCNV+xujuDR2UW2QP0YmdiijQjkjBdE6htRG8Zod6+Vy9XLMieQ4+cyOYsdA6KQCqBIIF0QSe4vspLw7Hla3ee0RRxxsijjY7UxxFkyA0DxQrtRV5kT9qbxMcRRtYCSGANBcS5xA9SdyVvWUUKFhZURN1USOngx3A5ETbIc0lgJAIDiNtwfW90nsccvihjsqDGgqR0hJeRwxguyfexwrEvLfAOK9uc6RwaKdJE9u+pj3bjbuDRF2vQOqdYZjj6myO2s+XG51D1JAoK++ZLkRzdm1IOdQsmvleddT\/Tx9SzfuAXEvkotNGyTR35WvxV4uZmxtxcUPJle1pLhpvcU0d9zV\/CisvrWZiTZEMzi9z4xERZofT9L2+9E\/K6ccdT5crn31zfvuKwCsrCL1vG9B\/S\/rJ1PxXmxRkjvtRAc0fkH8r0ZeJ+DJC3qOMR3fpPwWm17YvH+0zp7vxtvPtlERcXVXMxhxp3vggknyMkg6iQGMa0AAFx4aDvXO5WnBxsjHyPPyZo6yKY9jGkBrxXl6ebNagSavZWHN8zy3eTp8yvp13pv3relU+q9MYGF3UM869iwNIYxjhuHNYNyQfUlXLqbMXRFzYGQ2WJj2klrgCCQQT7kHjhdKhQiIgIiICIiAiIgIiICIiAiIgLTkSFrXENLiASGjkn0C3Lh6vnnHgfKI3SaBelgtx+EFKz88ZTizOAxGb7OgJcQO\/mkFrft+VdOj4EUEDI4b0AWCSSTe92VV4euZWZJEyM48bJdRJB817Q0AkOBoNdvVEGldGtoAegpX1syJmfX2sIsqFMKv53V3QY8szxGDHKA5sbtX0F4bqdsCHUbI9lYFG9S6NDO14e3\/qMLHFuxIsEX6kEWCeFss\/rLv8AFZ8F+HZ48mTJnIpxcWAG9Wo3robAUaF77lWXxHhsmxJWvDiNJcA27sCxVd7XfHGGsDW8NAAv2FBaOmZonhbIAW6rtp5BBII\/IK29W3WSSTHnn6e+G5f3AyJo3MbEDpDwQS8irAPYC9\/dcv6nxac4H+\/G0\/4SQvQ2dYb5s7Xjy4oNIMr9mlxFkAnagCBfqvPf1Ona\/LjLSHDygbaQRu40fwu3HVve1x\/Tmc8ZFPWUWHHa16nkXv8ATXoDnSfu3imMtsY7l3Bd8AWPk+y9MUb4exPJw4I+NLG38kWf5Kkl4O+vK6+hxz4zGURFC2FQ+qOOFN\/9GDFrkcWske4ySv7lzWgE0BfcK+KudWyosXKdO6KeV5jDQ5jC5kbQSSAeASRZ+Aq5vtl+Orw1nOmhLnyxyOvcRtLNGw+gtduCPelMqF6Lnid7njFki1NB814aNY7DY2dje6mllIyiIsaIiICIiAiIgIiICIiAiIgwo\/rPUv20YfodIS5rA1pAJLjQ5IHKkFG9d6c7IhDGPDHB7HhxGoAtcDxYvhJ99sv+kFJiOlyI5RgSQvDm3M2VjXabF6gL1CuQVb1CM6dmWC7MFAglrYWiwDuLJPKm1t9kjKLCysaIiIMLTjwNjaGtFAX\/ACST\/JSZzg5gaLBJDjdUKJB996H3VMHUsrGg6gcp1yAB8dG2gSW1ob6URwqk1NuNPWv1AY2eWJsTZYgCzc0HO4N7H6RuPdUybqMLsUxDGa2QOBEodZrVZabHFbCvROh+H581xELQQ2tT3Gmi\/XuT3oKW8QeBpMTH87zWvDa1tAIqzVizuLK9UnHNk\/rzW99S3PSqrdhQ+ZNGz++9rfy4A\/5rSuvo0gblQOJoCWMkngAPFkrrfjhPse9AUFlVzO8bYUL9BlLiDRLGlwHyRt+FuxfF+DJsMhgPo+2n\/wAgF4PG\/cfQ8p\/lPItbHhwBBBB4INgrYpUwoXroyJD5MD4G62O1CXUXUdrAHZTSgOr+Hv3OSJS90eiMNjfGSHtfqJv0IqhRWxlZ6DiZcJbHPPC9jWBrWMYWu+mgCSXG9vZT6rvS\/DzoMvzjK+UmMte+R1kuLgRTeAKHAViS+yCIixoiIgIiICIiAiIgIiICIiAiIgwi558jSQ0AucRdCuPUngBfUJcR9YAPoDYr8cpjN943oiI0RF8udQsmgEGvIl0sc6idIJocmhdBV\/qGND1HHiOvQ3JEbqJAeWtOstAPJuh7Kv8AWPEk+bmfs8J2mMnS6RoskcOdfYAfldfRenOd1RzpYnMixI9GOHA1QoageCSLP39l0nPjN\/qPKX1Ej4bLMXp85aN4H5BIvclrnEA\/YNVf6j4sGd058Oisl7mt8tlnULsubfYAb3wvvo3VoZc3qMWsNjyAdFmgSGlrjv3I391VPC2QIsguIuopQB6uLDVfyuvPH2379cr18k+Ipw3r0RbMnGfC\/RINLwGktNWLAIsDg0Rsta9Ly2ZcYWUU503whl5DGyMiGh3DnODSR6gHelN6k+t5lt9Prw14qmwiQPriPMbiQB7t9D\/BXoPh\/wAawZbxFTo5Dw19EOoWQCNiaHC8\/wDG2DFj5TYoWhoZGzVR5ebNn3qlt8A9KfPmseBUcB1ud7gHSB7k19gVx755vPl8duOup14\/Xsawij29RJNCN12RVtsEC999l5pNeq3PqRRfDDYBIo+novtY0REQEREBERAREQEREBERAREQEREHJkxf2w\/RQonYiud7XNjS1INIc7UDb3k8D0HpfsFJEWoyWMhznSPrUaDWf1OA4Hr3Ow9eVfNc+pl2JRcmdmNhZqIc4k01rRbnHsAP\/QvrFlJ+kgNcBekGyG8C\/dby0Xxv6qPi5diHLs6UW0Q447B9yP8AvRAB+5Ufk+FsjI2yc57mHlkbRGD81yrUi3yz4Wajej9DgxGaYYw2+Xcud8nkqSRFm79JMULxB+nommMmO9sYcbLHAkAnktri+aVe694Knw42ytcJWt3cWAgsrg0bse\/ZevL5c0EURYK6z9eoi\/lzf48J6n1ibJ0mZweW8O0tafuQAT91wr1vqPgDDmcXND4nE2fLIr\/CQQPsFowP06xopGvdJLJpIcGu0BpIN700E7j1XaftzI4X8erfdcfh\/wDTxjQyTKdrdsTENmg80TyfjhWzrPUo8PHfK6gGCmtG1nhrR8lSDnAAk7Dm15H4y6+7OyBFDbomnSwDl7jsXfnYe2\/dcZv6X38drnE9IVrZs7K2BfLM6\/YX3Po0D+AvY\/DvRmYeO2Jm55e7u53c\/Hp7KM8GeFhhM1v+qd4+o9mj+63\/AFPdWLInDGlx4H8+wW\/p35XJ8Zxx4zb9fORIQ5gBrUdz8C6+6+Jo2mRpun70RyQKsH24WmVrnN1bPa4Allix7sI\/yP5XTjQNb9QBsgbuJJr034XP4v7XSiIpWIiICIiAiIgIiICIiAiIgIiICIiAtTwOQAXAGuL+L91tRBFxCRrXOfpZf1Ocdz8CtgANhuV1Y2Rq2ILTzR7j1\/4XzlwFxaeQ02Wng+\/yO17LmnkohjdQY005zdyCdwwd\/wDbYK\/rl75\/4lEXHFmABokOl1WRR2F0CewXYosx0l1lERGiIiAiIgr\/AI0gyZcQx4zS58hDXU4CmUb3JHOw+6i\/BHhD9qPOnaPPNhrdiIxx221EdxwDSua1PnaHBpO54A5+fhVOrmRNk3a2FcEc5MlSDSDvHdehu\/R1dvT7r66my2B2\/wBBs6TRrvX+f2WYYnuGmUBzTuCDR+\/v7ikkyam2242R4oa4lpoHlva\/UehXSgWVK5MEREaIiICIiAiIgIiICIiAiIgIiICIiAiIgwtUsIdV9jq+T2tbUSXGWI\/UfM1FpaA0h5NaSBuK9e\/2K+fOeIjJdFxBa0ixRoNb7Xtv7qQe0EUQCO4K1yQBxaTww2B6mqH4Vanxv8fLJjYDxTjdUbG1f7rbG8OFggj1C582HWWDerJJBraiK+9rOYS2F2jahQrsOLHwE+43bN346kUb5bWPiEfcm6N23SfqPqbrf3X105p3JB5cLLib+o7UeE8f6zy947i4AWdh7rVPktbfJIoUOfqND+Vx57KdpP8ATKWj4cCL\/IH8JBCXiVrrugy9xdA0R+bWzmZrL1dyRuyJX03ZwBvVpokbbLW9ocC+MfW07iqJrlp+R\/otuJE4Notayx\/ZNm+54pb4YQ0GrJJsk8kpuNy36+xTm7jkbg+\/YrLQAKHHC+kULEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBYIWUQamQNadgB8BfTGADYUOV9omsx8kAr6REaIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiD\/\/Z',width=400,height=400)","01067d18":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","89b4021b":"# Import Python Packages\n# PyTesseract and Tika-Python for OCR\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport shutil\nimport PIL\nimport os\nfrom os import walk\nfrom shutil import copytree, ignore_patterns\nfrom collections import Counter\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud, STOPWORDS\nfrom PIL import Image\nfrom wand.image import Image as Img\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_colwidth', 500)\n#mueller_report = pd.read_csv('..\/input\/data-science-cheat-sheets\/Interview Questions\/AI Questions.pdf') # one row per line","85228bd4":"# Define helper function for plotting word clouds\ndef wordCloudFunction(df,column,numWords):\n    # adapted from https:\/\/www.kaggle.com\/benhamner\/most-common-forum-topic-words\n    topic_words = [ z.lower() for y in\n                       [ x.split() for x in df[column] if isinstance(x, str)]\n                       for z in y]\n    word_count_dict = dict(Counter(topic_words))\n    popular_words = sorted(word_count_dict, key = word_count_dict.get, reverse = True)\n    popular_words_nonstop = [w for w in popular_words if w not in stopwords.words(\"english\")]\n    word_string=str(popular_words_nonstop)\n    wordcloud = WordCloud(stopwords=STOPWORDS,\n                          background_color='white',\n                          max_words=numWords,\n                          width=1000,height=1000,\n                         ).generate(word_string)\n    plt.clf()\n    plt.imshow(wordcloud)\n    plt.axis('off')\n    plt.show()","a7251e50":"# Define helper function for plotting word bar graphs\ndef wordBarGraphFunction(df,column,title):\n    # adapted from https:\/\/www.kaggle.com\/benhamner\/most-common-forum-topic-words\n    topic_words = [ z.lower() for y in\n                       [ x.split() for x in df[column] if isinstance(x, str)]\n                       for z in y]\n    word_count_dict = dict(Counter(topic_words))\n    popular_words = sorted(word_count_dict, key = word_count_dict.get, reverse = True)\n    popular_words_nonstop = [w for w in popular_words if w not in stopwords.words(\"english\")]\n    plt.barh(range(50), [word_count_dict[w] for w in reversed(popular_words_nonstop[0:50])])\n    plt.yticks([x + 0.5 for x in range(50)], reversed(popular_words_nonstop[0:50]))\n    plt.title(title)\n    plt.show()","9edf5542":"# Preview the data folder\ninputFolder = '..\/input\/'\nfor root, directories, filenames in os.walk(inputFolder):\n    for filename in filenames: \n        print(os.path.join(root,filename))\n        \n# Move data to folder with read\/write access\noutputFolder = '\/kaggle\/working\/pdfs\/'\nshutil.copytree(inputFolder,outputFolder,ignore=ignore_patterns('*.db'))\nfor root, directories, filenames in os.walk(outputFolder, topdown=False):\n    for file in filenames:\n        try:\n            shutil.move(os.path.join(root, file), outputFolder)\n        except OSError:\n            pass\nprint(os.listdir(outputFolder))","b1f84fae":"# Look at page 2\npdf = os.path.join(outputFolder,'Information Organizations and their Websites Performance. A Global Report for Summarization and Optimization Purposes..pdf[2]')\nwith Img(filename=pdf, resolution=300) as img:\n    img.compression_quality = 99\n    img.convert(\"RGBA\").save(filename='\/kaggle\/working\/Information Organizations and their Websites Performance. A Global Report for Summarization and Optimization Purposes..jpg') # intro page to preview later","e1e38451":"# Parse a PDF file and convert it to CSV using PyTesseract\nimport pytesseract\npdfimage = Image.open('\/kaggle\/working\/Information Organizations and their Websites Performance. A Global Report for Summarization and Optimization Purposes..jpg')\ntext = pytesseract.image_to_string(pdfimage)  \ndf = pd.DataFrame([text.split('\\n')])","bbcb2e2b":"# Plot WordCloud of page 2\nplt.figure(figsize=(10,10))\nwordCloudFunction(df.T,0,10000000)\nplt.figure(figsize=(10,10))\nwordBarGraphFunction(df.T,0,\"Most Common Words on Page 2 of Information Organizations and their Websites Performance. A Global Report for Summarization and Optimization Purposes..\")","8302e80e":"# Parse a PDF file and convert it to CSV using Tika-Python\n!pip install tika\nimport tika\nfrom tika import parser\ntika.initVM()\nparsed = parser.from_file('\/kaggle\/working\/Information Organizations and their Websites Performance. A Global Report for Summarization and Optimization Purposes..jpg') \ntext = parsed[\"content\"]\ndf = pd.DataFrame([text.split('\\n')])\ndf.drop(df.iloc[:, 1:46], inplace=True, axis=1)","6d0eff9d":"# Convert PDF to JPG and then convert JPG to CSV\n# I will do this for Pages 1 to 11 but\n# Eventually I should loop through the entire document\n\n# PDF to JPG for p2\npdf = os.path.join(outputFolder,'Information Organizations and their Websites Performance. A Global Report for Summarization and Optimization Purposes..pdf[2]')\nwith Img(filename=pdf, resolution=300) as img:\n    img.compression_quality = 99\n    img.convert(\"RGBA\").save(filename='\/kaggle\/working\/Information Organizations and their Websites Performance. A Global Report for Summarization and Optimization Purposes..jpg')\npdfimage2 = Image.open('\/kaggle\/working\/Information Organizations and their Websites Performance. A Global Report for Summarization and Optimization Purposes..jpg')","60630435":"# PDF to JPG for p5\npdf = os.path.join(outputFolder,'Information Organizations and their Websites Performance. A Global Report for Summarization and Optimization Purposes..pdf[5]')\nwith Img(filename=pdf, resolution=300) as img:\n    img.compression_quality = 99\n    img.convert(\"RGBA\").save(filename='\/kaggle\/working\/Information Organizations and their Websites Performance. A Global Report for Summarization and Optimization Purposes..jpg')\npdfimage5 = Image.open('\/kaggle\/working\/Information Organizations and their Websites Performance. A Global Report for Summarization and Optimization Purposes..jpg')\n\n# PDF to JPG for p1\npdf = os.path.join(outputFolder,'Information Organizations and their Websites Performance. A Global Report for Summarization and Optimization Purposes..pdf[1]')\nwith Img(filename=pdf, resolution=300) as img:\n    img.compression_quality = 99\n    img.convert(\"RGBA\").save(filename='\/kaggle\/working\/Information Organizations and their Websites Performance. A Global Report for Summarization and Optimization Purposes..jpg')\npdfimage1 = Image.open('\/kaggle\/working\/Information Organizations and their Websites Performance. A Global Report for Summarization and Optimization Purposes..jpg')","58cbe36b":"# Parse a PDF file and convert it to CSV using PyTesseract (p1)\ntext = pytesseract.image_to_string(pdfimage1)\ndf = pd.DataFrame([text.split('\\n')])\ndf.drop(df.iloc[:, 27:], inplace=True, axis=1)\ndf.drop(df.iloc[:, :3], inplace=True, axis=1)\ndf.columns = range(df.shape[1])","c10ec5e1":"# Parse a PDF file and convert it to CSV using Tika-Python (p1-11)\ntika.initVM()\nparsed = parser.from_file('\/kaggle\/working\/Information Organizations and their Websites Performance. A Global Report for Summarization and Optimization Purposes..jpg')\nparsed2 = parser.from_file('\/kaggle\/working\/Information Organizations and their Websites Performance. A Global Report for Summarization and Optimization Purposes..jpg')\n\ntext = parsed[\"content\"]\ndf2 = pd.DataFrame([text.split('\\n')])\ndf2.drop(df2.iloc[:, 1:50], inplace=True, axis=1)\ndf2.drop(df2.iloc[:, 26:], inplace=True, axis=1)\ndf2.columns = range(df2.shape[1])\n\ntext = parsed2[\"content\"]\ndf3 = pd.DataFrame([text.split('\\n')])\ndf3.drop(df3.iloc[:, :50], inplace=True, axis=1)\ndf3.drop(df3.iloc[:, 22:], inplace=True, axis=1)\ndf3.columns = range(df3.shape[1])\n\ndfcombined = pd.concat([df, df2, df3]) # combine pages 1-11","b955d4c6":"#Explore page 1 - Mueller Report. Here I don't know how many pages each Cheat Sheet. There are 30 pages \nw, h = pdfimage1.size # crop image\npdfimage1.crop((0, 1240, w, h-1300)) # display exerpt of PDF","ea0b5581":"# Convert PDF to JPG and then convert JPG to CSV\n# I will do this for Pages 1 to 11 but\n# Eventually I should loop through the entire document\n\n# PDF to JPG for p5\npdf = os.path.join(outputFolder,'Information Organizations and their Websites Performance. A Global Report for Summarization and Optimization Purposes..pdf[5]')\nwith Img(filename=pdf, resolution=300) as img:\n    img.compression_quality = 99\n    img.convert(\"RGBA\").save(filename='\/kaggle\/working\/Information Organizations and their Websites Performance. A Global Report for Summarization and Optimization Purposes..jpg')\npdfimage5 = Image.open('\/kaggle\/working\/Information Organizations and their Websites Performance. A Global Report for Summarization and Optimization Purposes..jpg')","299aeeab":"#Explore page 5 - Mueller Report. Here I don't know how many pages each Cheat Sheet. There are 30 pages \nw, h = pdfimage5.size # crop image\npdfimage5.crop((0, 1240, w, h-1300)) # display exerpt of PDF","04c525e5":"# Pages 1, 2 and 5\ndfcombined.head() # preview csv of 1-11","0fc46314":"# Clean up the notebook\n!apt-get install zip # install zip\n!zip -r pdfs.zip \/kaggle\/working\/pdfs\/ # zip up a few files\n!rm -rf pdfs\/* # remove everything else","665587bc":"#Codes from Paul Mooney https:\/\/www.kaggle.com\/paultimothymooney\/what-is-inside-of-the-mueller-report\/notebook","d68c60c7":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata, not a DS. Shh.   @mpwolke","46ccc6b8":"#PDF to CSV\n\nConvert Page 3 of PDF to CSV (Method 1 of 2: PyTesseract)","3883575f":"Image platform.europeanmoocs.eu"}}