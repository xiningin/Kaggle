{"cell_type":{"be83d97a":"code","52023761":"code","f9822870":"code","d4ed18ad":"code","61baf1c5":"code","1cab6546":"code","abdda3de":"code","f5122791":"code","0771615f":"code","5a1a21cb":"code","2c6f3b18":"code","2cbd45a7":"code","c74ba030":"code","1627a3a8":"code","ab8ba7f0":"code","a26c247a":"code","793aaaff":"code","2371299b":"code","37c8a63e":"code","72a955ef":"code","07d3fbf1":"markdown","6647345e":"markdown","84ce0e59":"markdown","3bc39d99":"markdown","1c2ff0ef":"markdown"},"source":{"be83d97a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport cv2 \nimport os \nfrom random import shuffle \nfrom tqdm import tqdm \nfrom PIL import Image\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","52023761":"train_messy = \"..\/input\/images\/images\/train\/messy\"\ntrain_clean= \"..\/input\/images\/images\/train\/clean\"\ntest_messy= \"..\/input\/images\/images\/val\/messy\"\ntest_clean= \"..\/input\/images\/images\/val\/clean\"\nimage_size = 128","f9822870":"Image.open(\"..\/input\/images\/images\/train\/messy\/73.png\")","d4ed18ad":"Image.open(\"..\/input\/images\/images\/train\/clean\/73.png\")","61baf1c5":"for image in tqdm(os.listdir(train_messy)): \n    path = os.path.join(train_messy, image)\n    img = cv2.imread(path, cv2.IMREAD_GRAYSCALE) \n    img = cv2.resize(img, (image_size, image_size)).flatten()   \n    np_img=np.asarray(img)\n    \nfor image2 in tqdm(os.listdir(train_clean)): \n    path = os.path.join(train_clean, image2)\n    img2 = cv2.imread(path, cv2.IMREAD_GRAYSCALE) \n    img2 = cv2.resize(img2, (image_size, image_size)).flatten() \n    np_img2=np.asarray(img2)\n\nplt.figure(figsize=(10,10))\nplt.subplot(1, 2, 1)\nplt.imshow(np_img.reshape(image_size, image_size))\nplt.axis('off')\nplt.subplot(1, 2, 2)\nplt.imshow(np_img2.reshape(image_size, image_size))\nplt.axis('off')\nplt.title(\"Messy and Clean Rooms in GrayScale\")","1cab6546":"def train_data():\n    train_data_messy = [] \n    train_data_clean=[]\n    for image1 in tqdm(os.listdir(train_messy)): \n        path = os.path.join(train_messy, image)\n        img1 = cv2.imread(path, cv2.IMREAD_GRAYSCALE) \n        img1 = cv2.resize(img1, (image_size, image_size))\n        train_data_messy.append(img1) \n    for image2 in tqdm(os.listdir(train_clean)): \n        path = os.path.join(train_clean, image)\n        img2 = cv2.imread(path, cv2.IMREAD_GRAYSCALE) \n        img2 = cv2.resize(img2, (image_size, image_size))\n        train_data_clean.append(img2) \n    \n    train_data= np.concatenate((np.asarray(train_data_messy),np.asarray(train_data_clean)),axis=0)\n    return train_data ","abdda3de":"def test_data():\n    test_data_messy = [] \n    test_data_clean=[]\n    for image1 in tqdm(os.listdir(test_messy)): \n        path = os.path.join(test_messy, image1)\n        img1 = cv2.imread(path, cv2.IMREAD_GRAYSCALE) \n        img1 = cv2.resize(img1, (image_size, image_size))\n        test_data_messy.append(img1) \n    for image2 in tqdm(os.listdir(test_clean)): \n        path = os.path.join(test_clean, image2)\n        img2 = cv2.imread(path, cv2.IMREAD_GRAYSCALE) \n        img2 = cv2.resize(img2, (image_size, image_size))\n        test_data_clean.append(img2) \n    \n    test_data= np.concatenate((np.asarray(test_data_messy),np.asarray(test_data_clean)),axis=0) \n    return test_data ","f5122791":"train_data = train_data() \ntest_data = test_data()","0771615f":"x_data=np.concatenate((train_data,test_data),axis=0)\nx_data = (x_data-np.min(x_data))\/(np.max(x_data)-np.min(x_data))\n\n","5a1a21cb":"z1 = np.zeros(96)\no1 = np.ones(96)\nY_train = np.concatenate((o1, z1), axis=0)\nz = np.zeros(10)\no = np.ones(10)\nY_test = np.concatenate((o, z), axis=0)","2c6f3b18":"y_data=np.concatenate((Y_train,Y_test),axis=0).reshape(x_data.shape[0],1)","2cbd45a7":"print(\"X shape: \" , x_data.shape)\nprint(\"Y shape: \" , y_data.shape)","c74ba030":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=0.15, random_state=42)\nnumber_of_train = x_train.shape[0]\nnumber_of_test = x_test.shape[0]","1627a3a8":"x_train_flatten = x_train.reshape(number_of_train,x_train.shape[1]*x_train.shape[2])\nx_test_flatten = x_test .reshape(number_of_test,x_test.shape[1]*x_test.shape[2])\nprint(\"X train flatten\",x_train_flatten.shape)\nprint(\"X test flatten\",x_test_flatten.shape)","ab8ba7f0":"x_train = x_train_flatten.T\nx_test = x_test_flatten.T\ny_test = y_test.T\ny_train = y_train.T\nprint(\"x train: \",x_train.shape)\nprint(\"x test: \",x_test.shape)\nprint(\"y train: \",y_train.shape)\nprint(\"y test: \",y_test.shape)","a26c247a":"def initialize_weights_and_bias(dimension):\n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w, b\n\ndef sigmoid(z):\n    y_head = 1\/(1+np.exp(-z))\n    return y_head\n\ndef forward_backward_propagation(w,b,x_train,y_train):\n    # forward propagation\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]\n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients = {\"derivative_weight\": derivative_weight,\"derivative_bias\": derivative_bias}\n    return cost,gradients\n\ndef update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    for i in range(number_of_iterarion):\n        \n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        \n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 100 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n    \n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list\n\ndef predict(w,b,x_test):\n    \n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction\n\ndef logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n\n    dimension =  x_train.shape[0]\n    w,b = initialize_weights_and_bias(dimension)\n\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    y_prediction_train = predict(parameters[\"weight\"],parameters[\"bias\"],x_train)\n    \n    print(\"Test Accuracy: {} %\".format(round(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100,2)))\n    print(\"Train Accuracy: {} %\".format(round(100 - np.mean(np.abs(y_prediction_train - y_train)) * 100,2)))","793aaaff":"logistic_regression(x_train, y_train, x_test, y_test,learning_rate = 0.01, num_iterations = 1500)","2371299b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\ngrid={\"C\":np.logspace(-3,3,7),\"penalty\":[\"l1\",\"l2\"]},\nlogistic_regression=LogisticRegression(random_state=42)\nlog_reg_cv=GridSearchCV(logistic_regression,grid,cv=10)\nlog_reg_cv.fit(x_train.T,y_train.T)\n","37c8a63e":"print(\"best hyperparameters: \", log_reg_cv.best_params_)\nprint(\"accuracy: \", log_reg_cv.best_score_)","72a955ef":"log_reg= LogisticRegression(C=1,penalty=\"l1\")\nlog_reg.fit(x_train.T,y_train.T)\nprint(\"test accuracy: {} \".format(log_reg.fit(x_test.T, y_test.T).score(x_test.T, y_test.T)))\nprint(\"train accuracy: {} \".format(log_reg.fit(x_train.T, y_train.T).score(x_train.T, y_train.T)))","07d3fbf1":"A Clean Room","6647345e":"In this kernel, I used grid search method in logistic regression to classify rooms as messy or clean.","84ce0e59":"LOGISTIC REGRESSION","3bc39d99":"A Messy Room","1c2ff0ef":"IMAGE CLASSIFICATION WITH LOGISTIC REGRESSION"}}