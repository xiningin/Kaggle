{"cell_type":{"4b496e53":"code","52e91600":"code","93bcab26":"code","92a5c6ee":"code","8084761b":"code","84d8b568":"code","655d5c0d":"code","27d505ab":"code","4d51294f":"code","1955767d":"code","1ce98dd3":"code","8d19231d":"code","649c0135":"code","20dbdcae":"code","5d6a99d1":"code","b22bca46":"code","00081372":"code","c0014329":"code","78116407":"code","1a90e57a":"markdown","b2d212e8":"markdown","a146b05d":"markdown","babbacfb":"markdown","15fe4f4e":"markdown"},"source":{"4b496e53":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","52e91600":"df = pd.read_csv('\/kaggle\/input\/boston-dataset\/boston_data.csv')\ndf.head()","93bcab26":"df.shape","92a5c6ee":"print(df.describe())","8084761b":"df.isnull().sum()","84d8b568":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(50,50))\nsns.pairplot(df)\n\nplt.show()","655d5c0d":"plt.hist(df['medv'])\n","27d505ab":"# Training","4d51294f":"X = df.drop(['medv'],axis = 1)\nX.head()","1955767d":"y = df.medv\ny","1ce98dd3":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.24)\n\nprint(\"xtrain shape : \", X_train.shape) \nprint(\"xtest shape  : \", X_test.shape) \nprint(\"ytrain shape : \", y_train.shape) \nprint(\"ytest shape  : \", y_test.shape) ","8d19231d":"from sklearn.linear_model import LinearRegression\n\nreg = LinearRegression()\nreg.fit(X_train,y_train)","649c0135":"prediction = reg.predict(X_test)\nprediction","20dbdcae":"reg.score(X_test,y_test)","5d6a99d1":"plt.scatter(y_test,prediction)","b22bca46":"from sklearn.metrics import mean_squared_error \n\nmse = mean_squared_error(y_test, prediction) \nprint(\"Mean Square Error : \", mse) ","00081372":"from sklearn.metrics import mean_absolute_error\nmean_absolute_error(y_test,prediction)","c0014329":"test = pd.read_csv('\/kaggle\/input\/boston-dataset\/boston_test_data.csv')\nreg.predict(test)","78116407":"test.to_csv('csv_to_submit.csv', index = False)","1a90e57a":"VISUALISING THE PREDCITED VALUE","b2d212e8":"# Visualisation ","a146b05d":"Loading the dataset","babbacfb":"Splitting and testing","15fe4f4e":"Checking for Nan values"}}