{"cell_type":{"07538218":"code","337b4615":"code","c34f1f1d":"code","2187877e":"code","77cdc82f":"code","769bcb6a":"code","5b493882":"code","94fd7f19":"code","58838e5d":"code","1a321c53":"code","cbfde266":"code","6931c17f":"code","9f4ea898":"code","ab75804e":"code","43e19522":"code","f880cbfa":"code","d94721c4":"code","e801fff7":"code","387fae21":"code","ed6db683":"code","c5e6dba5":"code","db243111":"code","d808b833":"code","e812260e":"code","3d630779":"code","01db5ddf":"code","bbdb82a0":"code","2e371bf4":"code","73fdd9c3":"code","b4ba6601":"code","fa88a295":"code","c1f9b040":"code","31f2aef9":"code","21f266ee":"code","5825ba6c":"code","151b593a":"code","175e4dc4":"code","30f69d00":"code","e2438bb7":"markdown","3bf1984b":"markdown","a4dfcda2":"markdown","685c089c":"markdown","39337aef":"markdown","36ba4e46":"markdown","ad7864b5":"markdown","30eb9483":"markdown","94f60f2e":"markdown","f851517c":"markdown","d355c95d":"markdown","77d772a3":"markdown","6436af12":"markdown","6151de5b":"markdown"},"source":{"07538218":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","337b4615":"df= pd.read_csv('..\/input\/real-estate-price-prediction\/Real estate.csv')","c34f1f1d":"df.head()","2187877e":"df.info()","77cdc82f":"df.shape","769bcb6a":"df.describe()","5b493882":"sns.pairplot(df, diag_kind='kde')","94fd7f19":"sns.heatmap(df.corr(), annot=True)","58838e5d":"X= df.drop('Y house price of unit area', axis=1)\ny= df['Y house price of unit area']","1a321c53":"from sklearn.preprocessing import PolynomialFeatures","cbfde266":"polynomial_converter= PolynomialFeatures(degree=2, include_bias=False)","6931c17f":"poly_features= polynomial_converter.fit_transform(X)","9f4ea898":"X.shape","ab75804e":"poly_features.shape","43e19522":"from sklearn.model_selection import train_test_split","f880cbfa":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","d94721c4":"from sklearn.linear_model import LinearRegression","e801fff7":"polomodel= LinearRegression()","387fae21":"polomodel.fit(X_train, y_train)","ed6db683":"y_pred= polomodel.predict(X_test)","c5e6dba5":"from sklearn import metrics","db243111":"MAE_poly= metrics.mean_absolute_error(y_test, y_pred)\nMSE_poly= metrics.mean_squared_error(y_test, y_pred)\nRMSE_poly= np.sqrt(MSE_poly)","d808b833":"MAE_poly","e812260e":"MSE_poly","3d630779":"RMSE_poly","01db5ddf":"#train List of RMSE per Degree\ntrain_RMSE_List=[]\n\n#test List RMSE per Degree\ntest_RMSE_List=[]\n\nfor d in range(1, 10):\n    #preprocessing\n    polynomial_converter= PolynomialFeatures(degree=2, include_bias=False)\n    poly_features= polynomial_converter.fit_transform(X)\n    \n    #split: Train & Test \n    X_train, X_test, y_train, y_test= train_test_split(poly_features, y, test_size=0.3, random_state=101)\n    \n    #Train the Model\n    polymodel= LinearRegression()\n    polymodel.fit(X_train, y_train)\n    \n    #predicting on Both Train & Test Data\n    y_train_pred= polymodel.predict(X_train)\n    y_test_pred= polymodel.predict(X_test)\n    \n    #Evaluation\n    #RMSE of Train Set\n    train_RMSE= np.sqrt(metrics.mean_squared_error(y_train, y_train_pred))\n    \n    #RMSE of Test Set\n    test_RMSE= np.sqrt(metrics.mean_squared_error(y_test, y_test_pred))\n    \n    #Append\n    train_RMSE_List.append(train_RMSE)\n    test_RMSE_List.append(test_RMSE)","bbdb82a0":"train_RMSE_List","2e371bf4":"test_RMSE_List","73fdd9c3":"plt.plot(range(1, 6), train_RMSE_List[:5], label='Train RMSE')\nplt.plot(range(1, 6), test_RMSE_List[:5], label='Test RMSE')\nplt.legend()","b4ba6601":"#Creat Polynomial Features\nFinal_polynomial_converter= PolynomialFeatures(degree=2, include_bias=False)\n\nFinal_poly_features= Final_polynomial_converter.fit_transform(X)\n\n#Split the Dataset\nX_train, X_test, y_train, y_test= train_test_split(Final_poly_features, y, test_size=0.3, random_state=101) \n\n#Train the Model\nFinal_polyModel= LinearRegression()\nFinal_polyModel.fit(X_train, y_train)","fa88a295":"from joblib import dump, load","c1f9b040":"dump(Final_polyModel, 'salseModel.joblib')","31f2aef9":"dump(Final_polynomial_converter, 'FinalConverter.joblib')","21f266ee":"load_converter= load('FinalConverter.joblib')","5825ba6c":"load_polyModel= load('salseModel.joblib')","151b593a":"Campaign=[[150, 25, 14]]","175e4dc4":"Campaign_poly= load_converter.transform(Campaign)","30f69d00":"Final_polyModel.predict(Campaign_poly)","e2438bb7":"# **FEATURE & LABEL**","3bf1984b":"# **FINALIZING THE MODEL**","a4dfcda2":"# **ADJUSTING MODEL PARAMETERS**","685c089c":"# **SAVING THE MODEL**","39337aef":"# **PREPROCESSING**","36ba4e46":"# **TRAIN & TEST**","ad7864b5":"# **PREDICTING TEST DATA**","30eb9483":"# **IMPORT DATASET**","94f60f2e":"# **TRAIN THE MODEL**","f851517c":"# **DATA OVERVIEW**","d355c95d":"# **EDA**","77d772a3":"# **EVALUATING THE MODEL**","6436af12":"# **IMPORT LIBRARIES**","6151de5b":"# **DEPLOYMENT**"}}