{"cell_type":{"b4a3952a":"code","b91d58bd":"code","2f152bd5":"code","7396910b":"code","21c4eeb9":"code","e02a3f6a":"code","ddc6d59f":"code","4439f0db":"code","b4bae722":"code","088f4213":"code","05dbad84":"code","32c2c5c9":"code","d137c0ba":"code","08b04622":"code","a6d8e109":"code","95cdfc70":"code","5e84669a":"code","60e321b5":"code","c8b15a94":"code","0352ddc6":"code","61faecd2":"markdown","27b29da4":"markdown","c9ea448c":"markdown","bb009dbb":"markdown","2e860219":"markdown","cd1e47b4":"markdown","dfdc4b1f":"markdown","3de5eb83":"markdown","edf2b395":"markdown"},"source":{"b4a3952a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b91d58bd":"import numpy as np \nimport pandas as pd \n\nfrom xgboost import XGBRegressor\nfrom IPython.display import display\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_absolute_error\n\n\n# Read the data\ntrain_data = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv', index_col=\"Id\")\ntest_data = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv', index_col=\"Id\")\n\n# Remove rows with missing target, separate target from predictors\ntrain_data.dropna(axis=0, subset=[\"SalePrice\"], inplace=True)\ntrain_Y = train_data.SalePrice\ntrain_X= train_data.drop(['SalePrice'], axis=1)\n\n# Divide data into training and validation subsets\nX_train, X_valid, y_train, y_valid = train_test_split(train_X, train_Y, train_size=0.8, random_state=0)","2f152bd5":"print(X_train.shape, X_valid.shape, y_train.shape, y_valid.shape)","7396910b":"X_train.info()","21c4eeb9":"# # List of numerical features;\n# num_features = [col for col in X_train.columns if X_train[col].dtypes !=\"object\"]\n\n# # List of categorical features; Since we're using OrdinalEncoder. No limit to discard features with larger categorical type..\n# cat_features = [col for col in X_train.columns if X_train[col].dtypes ==\"object\"]\n\n# # variation in categorical features unique types over x_train & y_train. Thus, discard those features\n# good_cat_features = [col for col in cat_features if set(X_valid[col]).issubset(set(X_train[col]))]\n\n# finalized_features = num_features + good_cat_features\n\n# x_train = X_train[finalized_features]\n# x_valid = X_valid[finalized_features]\n\n# print(x_train.shape, x_valid.shape)","e02a3f6a":"numerical_transformer = SimpleImputer(strategy=\"constant\")\n\ncategorical_transformer = Pipeline(\n    steps=[(\"imputer\", SimpleImputer(strategy=\"most_frequent\")),(\"ord_enc\", OrdinalEncoder())]\n)\n\npreprocessor = ColumnTransformer(\n    transformers =  [\n        (\"num\", numerical_transformer, num_features), \n        (\"cat\", categorical_transformer, good_cat_features)\n    ]\n)","ddc6d59f":"def score_pipeline(preprocessor, model, x_train, y_train, x_valid, y_valid):\n    model = Pipeline(steps=[\n        (\"preprocessor\", preprocessor),(\"model\", model)\n    ])\n    \n    model.fit(x_train, y_train)\n    preds = model.predict(x_valid)\n    \n    return mean_absolute_error(preds, y_valid)","4439f0db":"## Varying the n_estimators with LR=0.1\nmodel_1 = XGBRegressor()\nmodel_2 = XGBRegressor(n_estimators=100, early_stopping_rounds=5, learning_rate=0.1, \n                       eval_set= [(x_valid, y_valid)], verbose=False)\nmodel_3 = XGBRegressor(n_estimators=500, early_stopping_rounds=5, learning_rate=0.1, \n                       eval_set= [(x_valid, y_valid)], verbose=False)\nmodel_4 = XGBRegressor(n_estimators=1000, early_stopping_rounds=5, learning_rate=0.1,\n                       eval_set= [(x_valid, y_valid)], verbose=False)\nmodel_5 = XGBRegressor(n_estimators=2000, early_stopping_rounds=5, learning_rate=0.1,\n                       eval_set= [(x_valid, y_valid)], verbose=False)\n\n## Varying the n_estimators with LR=0.05\nmodel_6 = XGBRegressor(n_estimators=100, early_stopping_rounds=5, learning_rate=0.05, \n                       eval_set= [(x_valid, y_valid)], verbose=False)\nmodel_7 = XGBRegressor(n_estimators=500, early_stopping_rounds=5, learning_rate=0.05, \n                       eval_set= [(x_valid, y_valid)], verbose=False)\nmodel_8 = XGBRegressor(n_estimators=1000, early_stopping_rounds=5, learning_rate=0.05,\n                       eval_set= [(x_valid, y_valid)], verbose=False)\nmodel_9 = XGBRegressor(n_estimators=2000, early_stopping_rounds=5, learning_rate=0.05,\n                       eval_set= [(x_valid, y_valid)], verbose=False)\n\nmodel_10 = XGBRegressor(n_estimators=1000, early_stopping_rounds=5, learning_rate=0.01, \n                       eval_set= [(x_valid, y_valid)], verbose=False)\nmodel_11 = XGBRegressor(n_estimators=1500, early_stopping_rounds=5, learning_rate=0.01, \n                       eval_set= [(x_valid, y_valid)], verbose=False)\nmodel_12 = XGBRegressor(n_estimators=2000, early_stopping_rounds=5, learning_rate=0.01, \n                       eval_set= [(x_valid, y_valid)], verbose=False)\n\nmodel_13 = XGBRegressor(n_estimators=1000, early_stopping_rounds=5, learning_rate=0.001, \n                       eval_set= [(x_valid, y_valid)], verbose=False)\nmodel_14 = XGBRegressor(n_estimators=2000, early_stopping_rounds=5, learning_rate=0.001, \n                       eval_set= [(x_valid, y_valid)], verbose=False)","b4bae722":"import warnings\nwarnings.filterwarnings(action=\"ignore\")\n\nmodels = [\n        model_1, model_2, model_3, model_4, model_5, model_6, model_7, model_8, \n        model_9,model_10, model_11, model_12, model_13, model_14\n         ]\n\nmodels_score = {}\n\nfor idx, model in enumerate(models):\n    mae = score_pipeline(preprocessor, model, x_train, y_train, x_valid, y_valid)\n    print(f\"model_{idx+1} \\t\\tMAE:{mae}\")\n    models_score[f\"model{idx+1}\"] = mae","088f4213":"sorted(models_score.items(), key=lambda x:x[1])","05dbad84":"x_train_full = train_X.copy() \ny_train_full = train_Y.copy()\nx_test_full = test_data.copy()\n\nx_train_full.shape,  y_train_full.shape, x_test_full.shape,","32c2c5c9":"num_features = [col for col in x_train_full.columns if x_train_full[col].dtypes !=\"object\"]\ncat_features = [col for col in x_train_full.columns if x_train_full[col].dtypes ==\"object\"]\n\nfinal_features = num_features + cat_features\n\nx_train_full = x_train_full[final_features]\nx_test_full = x_test_full[final_features]","d137c0ba":"numerical_transformer_const = SimpleImputer(strategy=\"constant\")\n\ncategorical_transformer = Pipeline(\n    steps=[\n        (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\n        (\"ord_enc\", OrdinalEncoder())\n    ]\n)\n\npreprocessor_final = ColumnTransformer( \n    transformers=[\n        ('num', numerical_transformer_const, num_features),\n        ('cat', categorical_transformer, good_cat_features)\n    ]\n)","08b04622":"model = XGBRegressor(n_estimators=2000, early_stopping_rounds=5, learning_rate=0.05,\n                       eval_set= [(x_valid, y_valid)], verbose=False)","a6d8e109":"clf = Pipeline(steps=[(\"preprocessor\", preprocessor_final),(\"model\", model)])\nclf.fit(x_train_full, y_train_full)\n\npreds_test = clf.predict(x_test_full)","95cdfc70":"output = pd.DataFrame({\"Id\": x_test_full.index, 'SalePrice': preds_test})\noutput.to_csv(\"submission.csv\", index=False)","5e84669a":"output","60e321b5":"import pandas as pd\nimport numpy as np\nfrom xgboost import XGBRegressor\nfrom IPython.display import display\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_absolute_error\n\n\n# Read the data\ntrain_data = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv', index_col=\"Id\")\ntest_data = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv', index_col=\"Id\")\n\n# Remove rows with missing target, separate target from predictors\ntrain_data.dropna(axis=0, subset=[\"SalePrice\"], inplace=True)\ntrain_Y = train_data.SalePrice\ntrain_X= train_data.drop(['SalePrice'], axis=1)\n\n# Divide data into training and validation subsets\nX_train, X_valid, y_train, y_valid = train_test_split(train_X, train_Y, train_size=0.8, random_state=0)\n\nprint(\"file loaded!!\")","c8b15a94":"## Implementing GRIDSEARCHCV WITH PIPELINE\n\nimport time\n# num_features = [col for col in X_train.columns if X_train[col].dtypes !=\"object\"]\n\n# # List of categorical features; Since we're using OrdinalEncoder. No limit to discard features with larger categorical type..\n# cat_features = [col for col in X_train.columns if X_train[col].dtypes ==\"object\"]\n\n# # variation in categorical features unique types over x_train & y_train. Thus, discard those features\n# good_cat_features = [col for col in cat_features if set(X_valid[col]).issubset(set(X_train[col])) and col !='Exterior1st']\n\n# finalized_features = num_features + good_cat_features\n\nstart_time = time.time()\n\nnum_features = ['MSSubClass', 'LotFrontage', 'LotArea',] \ncat_features = ['MSZoning', 'Street', 'Alley', 'LotShape']\nx_train = X_train[num_features+cat_features]\nx_valid = X_valid[num_features+cat_features]\n\nnumerical_transformer = SimpleImputer(strategy=\"constant\")\n\ncategorical_transformer = Pipeline(\n    steps=[(\"imputer\", SimpleImputer(strategy=\"most_frequent\")),(\"ord_enc\", OrdinalEncoder())]\n)\n\npreprocessor = ColumnTransformer(\n    transformers =  [\n        (\"num\", numerical_transformer, num_features), \n        (\"cat\", categorical_transformer, cat_features)\n    ]\n)\n\nmodel = XGBRegressor()\nmy_pipeline = Pipeline(steps=[(\"preprocessor\", preprocessor),(\"model\", model)])\n\nparam_grid = {\n#     \"preprocessor__num\": [\"constant\", ]\n    \"model__n_estimators\": [100,200],\n    \"model__learning_rate\": [0.1, 0.5]\n}\n\nsearch = GridSearchCV(my_pipeline, param_grid, n_jobs=-1, cv=5)\nsearch.fit(x_train, y_train)\nprint(\"Best parameter (CV score=%0.3f):\" % search.best_score_)\nprint(search.best_params_)\n\nend_time = time.time()\nprint(\"Time taken\", end_time-start_time)","0352ddc6":"def check_params_exist(esitmator, params_keyword):\n    all_params = esitmator.get_params().keys()\n    available_params = [x for x in all_params if params_keyword in x]\n    if len(available_params)==0:\n        return \"No matching params found!\"\n    else:\n        return available_params\n    \ncheck_params_exist(my_pipeline, \"imputer\")","61faecd2":"## Importing the packages and reading the data","27b29da4":"## Evaluating the Validation score and hyperparemeter tunning","c9ea448c":"## Defining a method for evaluating validation score","bb009dbb":"## Conclusion: \n- By hyperparamter tuning model_10 is comes out as the best model and we're going to use it for prediction on testing-data\n-----","2e860219":"## Finalizing the features","cd1e47b4":"## Creating a sklearn-Pipeline to perform pre-processing of the data which includes:\n1. Handling of missing value\n2. OrdinalEncoding of Categorical data","dfdc4b1f":"# Testing Pipline with GridsearchCV\n\n- StackOverflow Answer [https:\/\/stackoverflow.com\/questions\/63467815\/how-to-access-columntransformer-elements-in-gridsearchcv]","3de5eb83":"-----","edf2b395":"# Final Predcition on testing set\n\n### 1. For it we'll train the model on whole data"}}