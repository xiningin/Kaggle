{"cell_type":{"08a39d92":"code","27a1b637":"code","3a7d4aa6":"code","4912c7fd":"code","cfa2d471":"code","ced56756":"code","918e8aa5":"code","0f0b5b6f":"code","08ce2559":"code","a258922d":"code","9e5356c9":"code","98e4c1bc":"code","84225954":"code","a0a87bb9":"code","056ea05d":"code","5f2e7435":"code","8fc3811b":"code","dc2c5d5f":"code","25dd0068":"code","42219673":"code","3672d285":"code","3c93e352":"code","84dbd1b8":"code","98f7e7b1":"code","7922a1c3":"code","4c50a118":"code","e612cea5":"code","3b58f272":"code","8613e375":"markdown","70225bbc":"markdown","6aaaead7":"markdown","2ed94712":"markdown","35600f2d":"markdown","68201c14":"markdown","60946060":"markdown","df147f36":"markdown","5cd74c3e":"markdown","027c5c60":"markdown","423fddf4":"markdown","4695616f":"markdown","47f38251":"markdown","d57105dd":"markdown","4c549436":"markdown","88b26710":"markdown","51b623c7":"markdown","d3dc6265":"markdown","3e9aed08":"markdown","ff0cc63c":"markdown","86b5abc9":"markdown","1fd54fb0":"markdown","458df326":"markdown","041300a8":"markdown","ac2a325e":"markdown","f8804797":"markdown","b2c6af79":"markdown","a6f4db55":"markdown","ac9e8d64":"markdown","ac11cdf3":"markdown","52f5fd5d":"markdown","8c5746ba":"markdown","f0210246":"markdown"},"source":{"08a39d92":"# Data methods \n\nimport pandas as pd\nimport os\n\ndef get_plant_data(number=1, generation_data=False):\n    \"\"\"\n    Loads a .csv into a pd.DataFrame instance and convert its date_time column \n    using the right format\n    \"\"\"\n    date_format = '%Y-%m-%d %H:%M'\n    \n    if number == 1 and generation_data:\n        file_name = 'Plant_1_Generation_Data.csv'\n        date_format = '%d-%m-%Y %H:%M'\n        \n    if number == 1 and not generation_data:\n        file_name = 'Plant_1_Weather_Sensor_Data.csv'\n        \n    if number == 2 and generation_data:\n        file_name = 'Plant_2_Generation_Data.csv'\n        \n    if number == 2 and not generation_data:\n        file_name = 'Plant_2_Weather_Sensor_Data.csv'\n        \n    file_path = os.path.join(\n        '\/kaggle\/input\/solar-power-generation-data\/', file_name)\n\n    df = pd.read_csv(file_path)\n    df.loc[:, 'DATE_TIME'] = pd.to_datetime(df['DATE_TIME'], format=date_format)\n    \n    return df\n\n\ndef join_datasets(df_plant_1, df_plant_2):\n    \"\"\"\n    Joins two related datasets\n    \"\"\"\n    \n    df = pd.concat([df_plant_1, df_plant_2])\n    df.columns = [c.lower() for c in df.columns]\n    \n    return df","27a1b637":"# Viz methods\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ntry:\n    init_notebook_mode(connected=True)\nexcept:\n    pass\nimport plotly.graph_objs as go\n\ndef get_bar_trace(x, y, name):\n    return go.Bar(name=name, x=x, y=y)\n\ndef get_simple_layout(title, x_axis_name, y_axis_name):\n    return {\n        \"title\": {\"text\": f'{title}'},\n        \"xaxis\": {\"title\": {\"text\": f\"{x_axis_name}\"}},\n        \"yaxis\": {\"title\": {\"text\": f\"{y_axis_name}\"}},\n        \"legend\": {\n            \"x\": 0.8,\n            \"y\": 0\n        },\n        \"autosize\": True\n    }\n\ndef plot_figure(data, layout):\n    fig = go.Figure(data=data, layout=layout)\n    fig.show()","3a7d4aa6":"df_plant1_gd = get_plant_data(number=1, generation_data=True)\ndf_plant1_sensors = get_plant_data(number=1, generation_data=False)\n\n\ndf_plant2_gd = get_plant_data(number=2, generation_data=True)\ndf_plant2_sensors = get_plant_data(number=2, generation_data=False)\n\ngeneration_dataset, sensors_dataset = [\n    join_datasets(df_p1, df_p2)\n    for (df_p1, df_p2) in [\n        [df_plant1_gd, df_plant2_gd],\n        [df_plant1_sensors, df_plant2_sensors],\n    ]\n]","4912c7fd":"generation_dataset.shape[0]","cfa2d471":"generation_dataset.groupby(['plant_id']).size()","ced56756":"generation_dataset.columns","918e8aa5":"generation_dataset.describe()","0f0b5b6f":"sensors_dataset.shape","08ce2559":"sensors_dataset.groupby(['plant_id']).size()","a258922d":"sensors_dataset.columns","9e5356c9":"sensors_dataset.describe()","98e4c1bc":"result = generation_dataset.daily_yield.mean()\n\nprint(f'The mean value of daily yield is {result:.2f} kW')","84225954":"daily_irradiation = sensors_dataset.groupby(sensors_dataset.date_time.dt.date).agg({\n    'irradiation': 'sum'\n}).reset_index()\n\ndata = get_bar_trace(x=daily_irradiation['date_time'], y=daily_irradiation['irradiation'], name='daily_irradiation')\nlayout = get_simple_layout(title='Daily irradiation measured by weather sensors',\n                           x_axis_name='date',\n                           y_axis_name='irradiation amount')\nplot_figure(data, layout)","a0a87bb9":"max_ambient_temp, max_module_temp = sensors_dataset.ambient_temperature.max(), sensors_dataset.module_temperature.max()\n\nprint(f'The max ambient temperature is {max_ambient_temp:.2f} while {max_module_temp:.2f} is the max module temperature')","056ea05d":"inverters_by_plant = generation_dataset.groupby(['plant_id']).agg({\n    'source_key': 'nunique'\n}).reset_index()\n\n_ = [print(f'There are {row[\"source_key\"]} inverters in plant {row[\"plant_id\"]}') for _, row in inverters_by_plant.iterrows()]","5f2e7435":"min_dc_power, max_dc_power = generation_dataset.dc_power.min(), generation_dataset.dc_power.max()\nmin_ac_power, max_ac_power = generation_dataset.ac_power.min(), generation_dataset.ac_power.max()\n\ngeneration_dataset_daily = generation_dataset.groupby(['plant_id', generation_dataset.date_time.dt.date]).agg({\n    'dc_power': 'sum',\n    'ac_power': 'sum'\n})\n\nmin_dc_power_daily, max_dc_power_daily = generation_dataset_daily.ac_power.min(), generation_dataset_daily.ac_power.max()\nmin_ac_power_daily, max_ac_power_daily = generation_dataset_daily.dc_power.min(), generation_dataset_daily.dc_power.max()\n\nprint(f'The minimum DC generated power in the intervals is {min_dc_power:.2f}, the maximum is {max_dc_power:.2f}')\nprint(f'The minimum AC generated power in the intervals is {min_ac_power:.2f}, the maximum is {max_ac_power:.2f}')\nprint()\nprint(f'The minimum DC generated power in a whole day is {min_dc_power_daily:.2f} whereas the maximum is {max_dc_power_daily:.2f}')\nprint(f'The minimum AC generated power in a whole day is {min_ac_power_daily:.2f} while the maximum is {max_ac_power_daily:.2f}')","8fc3811b":"inverters_generation = generation_dataset.groupby(['source_key']).agg({\n    'dc_power': 'sum',\n    'ac_power': 'sum'\n}).reset_index()\n\ninverters_generation.loc[:, 'total'] = inverters_generation['ac_power'] + inverters_generation['dc_power']\n\nmask_max_dc = inverters_generation['dc_power'] == inverters_generation['dc_power'].max()\nmask_max_ac = inverters_generation['ac_power'] == inverters_generation['ac_power'].max()\nmask_max = inverters_generation['total'] == inverters_generation['total'].max()\n\nprint(f\"The inverted that has generated the maximum amount of power is {inverters_generation.loc[mask_max_ac | mask_max_dc | mask_max, 'source_key'].values[0]}\")","dc2c5d5f":"inverters_generation.sort_values('total', ascending=False, inplace=True)","25dd0068":"data = get_bar_trace(x=inverters_generation['source_key'], y=inverters_generation['total'], name='total_inverter_generation')\nlayout = get_simple_layout(title='Total power generation by inverter',\n                           x_axis_name='inverter',\n                           y_axis_name='power generation (Hz)')\nplot_figure(data, layout)","42219673":"date_range = pd.date_range(\n    start=generation_dataset.date_time.min(), \n    end=generation_dataset.date_time.max(), \n    freq='15min'\n)\ndf_expected_lectures = pd.DataFrame({\n    'date_time': date_range\n})\n\nall_expected_lectures = pd.concat([\n    pd.DataFrame({\n        'date_time': date_range,\n        'plant_id': [plant_id] * len(date_range),\n        'source_key': [source_key] * len(date_range)\n    })\n    for plant_id in generation_dataset['plant_id'].unique()\n    for source_key in generation_dataset.loc[generation_dataset['plant_id'] == plant_id]['source_key'].unique()\n])\n\nall_expected_lectures = all_expected_lectures.merge(\n    generation_dataset, on=['plant_id', 'source_key', 'date_time'], how='left')","3672d285":"total_missing_lectures = all_expected_lectures.loc[all_expected_lectures['dc_power'].isna()].groupby(['plant_id', 'source_key']).agg({\n    'date_time': 'nunique'\n}).reset_index()\n\ntotal_missing_lectures","3c93e352":"print(f'The total missing lectures are {total_missing_lectures[\"date_time\"].sum()}')","84dbd1b8":"missing_lectures_by_date = all_expected_lectures.loc[\n    all_expected_lectures['dc_power'].isna()\n].groupby(['plant_id', 'source_key', all_expected_lectures.date_time.dt.date]).size().reset_index()\n\n\nmissing_lectures_by_date.columns = list(missing_lectures_by_date.columns[:-1]) + ['total']\n\ndata = get_bar_trace(x=missing_lectures_by_date['date_time'], y=missing_lectures_by_date['total'], name='missing_lectures_by_date')\nlayout = get_simple_layout(title='Missing power generation lectures by date',\n                           x_axis_name='date',\n                           y_axis_name='missing lectures')\nplot_figure(data, layout)","98f7e7b1":"sensors_dataset","7922a1c3":"date_range = pd.date_range(\n    start=sensors_dataset.date_time.min(), \n    end=sensors_dataset.date_time.max(), \n    freq='15min'\n)\ndf_expected_lectures = pd.DataFrame({\n    'date_time': date_range\n})\n\nall_expected_lectures = pd.concat([\n    pd.DataFrame({\n        'date_time': date_range,\n        'plant_id': [plant_id] * len(date_range),\n        'source_key': [source_key] * len(date_range)\n    })\n    for plant_id in sensors_dataset['plant_id'].unique()\n    for source_key in sensors_dataset.loc[sensors_dataset['plant_id'] == plant_id]['source_key'].unique()\n])\n\nall_expected_lectures = all_expected_lectures.merge(\n    sensors_dataset, on=['plant_id', 'source_key', 'date_time'], how='left')","4c50a118":"total_missing_lectures = all_expected_lectures.loc[all_expected_lectures['module_temperature'].isna()].groupby(['plant_id', 'source_key']).agg({\n    'date_time': 'nunique'\n}).reset_index()\n\ntotal_missing_lectures","e612cea5":"print(f'The total missing lectures are {total_missing_lectures[\"date_time\"].sum()}')","3b58f272":"missing_lectures_by_date = all_expected_lectures.loc[\n    all_expected_lectures['module_temperature'].isna()\n].groupby(['plant_id', 'source_key', all_expected_lectures.date_time.dt.date]).size().reset_index()\n\n\nmissing_lectures_by_date.columns = list(missing_lectures_by_date.columns[:-1]) + ['total']\n\ndata = get_bar_trace(x=missing_lectures_by_date['date_time'], y=missing_lectures_by_date['total'], name='missing_lectures_by_date')\nlayout = get_simple_layout(title='Missing weather sensors lectures by date',\n                           x_axis_name='date',\n                           y_axis_name='missing lectures')\nplot_figure(data, layout)","8613e375":" - The difference between the maximum module temperature and the maximum ambient temperature is 27.5 degrees.\n - It's pretty simple to see that the inverters from one plant generate much more amount of power than the other, probably they're placed in places that receive different quantity of sun during the day, or they're just smaller.\n - The difference of missing lectures between sensors and power generation is huge, while in the first one there are 7k of missing data points, in the second one only 87 data points are missing.","70225bbc":"### About the asked questions ","6aaaead7":"## Questions and thoughts","2ed94712":"### Q1: What is the mean value of daily yield?\n","35600f2d":"#### Description","68201c14":"## Methods","60946060":"## Conclusions","df147f36":"### Q6: Which inverter (source_key) has produced maximum DC\/AC power? \n","5cd74c3e":"### Q4: How many inverters are there for each plant?\n","027c5c60":"### Q8: Is there any missing data?\n","423fddf4":"## Datasets obtention","4695616f":"## Presented questions:","47f38251":"#### Description","d57105dd":" - The daily yield median is 2.8k, while the 15 minutes interval median is 6 for dc_power and 3.5 for ac_power. \n - The irradiaton measured by sensors median is 0.02, but it has a mean of .23. The ambient temperature is median is 25.95 and the module temperature median is 26.39","4c549436":"### Q3: What is the max ambient and module temperature?\n","88b26710":"#### Columns\n\n - date_time: Date and time for each observation. Observations recorded at 15 minute intervals.\n - plant_id: Plant ID - this will be common for the entire file.\n - source_key: Source key in this file stands for the inverter id.\n - dc_power: Amount of DC power generated by the inverter (source_key) in this 15 minute interval. Units - kW.\n - ac_power: Amount of AC power generated by the inverter (source_key) in this 15 minute interval. Units - kW.\n - daily_yield: Daily yield is a cumulative sum of power generated on that day, till that point in time.\n - total_yield: This is the total yield for the inverter till that point in time.\n","51b623c7":"- A possible approach to check if the panel was working at certain time (thinking about Predictive Maintenance) might be by considering the missing data and the temperature difference between ambient and module by interval.\n- Why the external sensors has missing data? It could be a higher signal that the environment wasn't the best and both (sensor and module) stopped working, if both data is missed. \n- For suboptimally performing equipment a way that might be considered is analyzing the power generation difference between sensors by hour, those that are outliers and lies below the Q1-1.5\\*IQR could be the ones that aren't working as well as expected. LOF may be a good choice to do this.","d3dc6265":"#### Missing lectures by plant and inverter","3e9aed08":"### Q2: What is the total irradiation per day?\n","ff0cc63c":"#### Generation missing data","86b5abc9":"* ## Introduction\n\nThis exploratory data analysis aims to help to understand the data of the presented dataset and to try answering the following questions:\n\n - What is the mean value of daily yield?\n - What is the total irradiation per day?\n - What is the max ambient and module temperature?\n - How many inverters are there for each plant?\n - What is the maximum\/minimum amount of DC\/AC Power generated in a time interval\/day?\n - Which inverter (source_key) has produced maximum DC\/AC power?\n - Rank the inverters based on the DC\/AC power they produce\n - Is there any missing data?\n \nAfter that, a conclusion about the entire notebook will be presented.\n\nFinally, some questions and thoughts regarding the entire EDA and the possible projects to consider will be written.","1fd54fb0":"### Weather sensor dataset\n\n**Weather sensor data gathered for one solar plant every 15 minutes over a 34 days period.**\n\n#### Shape","458df326":"### Q5: What is the maximum\/minimum amount of DC\/AC Power generated in a time interval\/day?\n","041300a8":"#### Weather sensors missing data","ac2a325e":"# EDA of Solar Power Generation Dataset","f8804797":"#### Columns\n\n - date_time: Date and time for each observation. Observations recorded at 15 minute intervals.\n - plant_id: Plant ID - this will be common for the entire file.\n - source_key: Source key in this file stands for the inverter id.\n - ambient_temperature: This is the ambient temperature at the plant.\n - module_temperature: There's a module (solar panel) attached to the sensor panel. This is the temperature reading for that module.\n - irradiation: Amount of irradiation for the 15 minute interval.","b2c6af79":"#### Missing lectures by plant and inverter","a6f4db55":"#### Data by plant","ac9e8d64":"### Generation dataset\n\n**Solar power generation data for one plant gathered at 15 minutes intervals over a 34 days period.**\n\n#### Shape","ac11cdf3":"#### Data by plant","52f5fd5d":"### About the stats of the datasets","8c5746ba":"## Datasets description","f0210246":"### Q7: Rank the inverters based on the DC\/AC power they produce\n"}}