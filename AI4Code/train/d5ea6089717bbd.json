{"cell_type":{"8f841864":"code","ef897c7e":"code","ca6d5b83":"code","2dc6cf18":"code","9305107a":"code","a8bdb655":"code","ad1706a3":"code","cb721f99":"code","2eb45443":"code","c57dcdc9":"code","86c1f1d8":"code","9f12a3fa":"code","007eb177":"code","1ba793d1":"code","6f1019b2":"code","e537eab5":"code","28971325":"code","5ea2d83f":"code","d14e6faa":"code","a02882f4":"markdown","70272f6f":"markdown","c9c6e89e":"markdown","0ecd0b47":"markdown","772aa596":"markdown","ef7cb72d":"markdown","61c0d4e3":"markdown","0302a5e0":"markdown","37973e9f":"markdown","9a683770":"markdown","465c975d":"markdown"},"source":{"8f841864":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom PIL import Image\nfrom scipy.signal import convolve2d\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\n\nsns.set(style='white', context='notebook', palette='deep')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ef897c7e":"x_1=np.load(\"\/kaggle\/input\/sign-language-digits-dataset\/X.npy\")\ny_1=np.load(\"\/kaggle\/input\/sign-language-digits-dataset\/Y.npy\")\nprint(np.shape(x_1),np.shape(y_1))","ca6d5b83":"plt.imshow(x_1[1])","2dc6cf18":"y_1[1]","9305107a":"kernel_1 = np.array([[-1, 0, 1],\n                   [-1, 0, 1],\n                   [-1, 0, 1]])\nkernel_2 = np.array([[-1, -1, -1],\n                   [0, 0, 0],\n                   [1, 1, 1]])\ndef edge(im):\n    out1 = convolve2d(im, kernel_1)\n    out2 = convolve2d(im, kernel_2)\n    new=np.sqrt(np.square(out1)+np.square(out2))\n    return new\n\ndef comp(img):\n    _,a=plt.subplots(ncols=2)\n    a[0].imshow(img)\n    a[1].imshow(edge(img))","a8bdb655":"comp(x_1[1100])","ad1706a3":"edge_x=[]\nfor im in x_1:\n    edge_x.append(edge(im))\nedge_x=np.array(edge_x)    \n","cb721f99":"plt.imshow(edge_x[1100][:50,:])","2eb45443":"edge_x=edge_x[:,:50,:]","c57dcdc9":"data=np.reshape(edge_x,(2062,50,66,1))","86c1f1d8":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (50,66,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","9f12a3fa":"optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","007eb177":"model.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","1ba793d1":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","6f1019b2":"epochs = 30 # Turn epochs to 30 to get 0.9967 accuracy\nbatch_size = 50","e537eab5":"X_train, X_val, Y_train, Y_val = train_test_split(data,  y_1, test_size = 0.1, random_state= 2)","28971325":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=30,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.05, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)","5ea2d83f":"history = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs =  30, validation_data = (X_val,Y_val),\n                              verbose = 1, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","d14e6faa":"fig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","a02882f4":"# Comparing the original image and the edge image","70272f6f":"# Cropping all the images in the dataset","c9c6e89e":"# Training and validating on validation set","0ecd0b47":"The edge images seems pretty well.\nSo now we will convert the image dataset to edge dataset","772aa596":"# Data Augmentation","ef7cb72d":"# Plotting the loss and accuracy for training and validation set","61c0d4e3":"# Defining Function for edges\n\nTo identify the sign through the images only the edges of the hands matters.\nSo will retreive just the edges from the image dataset ","0302a5e0":"# Reshaping the dataset to add one more dimension which indicates channel","37973e9f":"The lower part of the hand doesn't give us any viable information.\nSo we can crop our image.","9a683770":"# Defing the callback function","465c975d":"# Defining the Model"}}