{"cell_type":{"c53af1c7":"code","3b5e91c7":"code","e54db4da":"code","043750db":"code","262005df":"code","840426f6":"code","845a9fe8":"code","313a026f":"code","0f9a0192":"code","fbb75caa":"code","6d5c60f1":"code","eaf8e102":"code","da3d3906":"code","d4760c15":"code","e00c7a6a":"code","dc51a464":"code","552b5eb4":"code","904f1bcf":"code","6c9bf71a":"code","1a3fdf04":"code","0c99a95b":"code","3eaa7199":"code","07301391":"code","db860b04":"code","3bd0f57a":"code","38121e87":"code","7dce857b":"code","0139994c":"code","f980a5aa":"code","9f7d446f":"code","d7a1bee2":"code","3b255529":"code","abcee2ff":"code","7969f3b2":"code","3fa44798":"code","fd2bc85f":"code","4a0ca420":"code","54b26931":"code","7b54fdd8":"code","b95ef924":"code","11bf2d71":"code","74f071fc":"code","a76c5258":"code","343e5c7b":"code","158c0dbc":"code","a7517c13":"code","ac8e9ca0":"markdown","430c3915":"markdown","a1f9576b":"markdown","0ec22777":"markdown","a6c09cdb":"markdown","063adc0a":"markdown","2c8f08d0":"markdown"},"source":{"c53af1c7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","3b5e91c7":"# READ A COMMA-SEPARETED VALUES (CSV)FILE INTO PANDAS DATA FRAME.\ntrain=pd.read_csv(r\"..\/input\/titanic\/train.csv\")\ntrain.head(10)","e54db4da":"test=pd.read_csv(r\"..\/input\/titanic\/test.csv\")\ntest.head(10)","043750db":"# COUNT THE NUMBER OF ROWS AND COLUMNS IN THE TRAIN DATASET AND TEST DATASET.\nprint(train.shape)\nprint(test.shape)\n","262005df":"#LOOK AT THE COLUMNS OF TRAIN DATASET AND TEST DATASET.\nprint(train.columns)\nprint(test.columns)","840426f6":"train.isnull().sum()","845a9fe8":"# GET THE COUNT OF THE NUMBER OF SURVIOURS,SEX,EMBARKED,SIBSP,TICKET.\nprint(train[\"Survived\"].value_counts())\nprint(train[\"Sex\"].value_counts())\nprint(train[\"Embarked\"].value_counts())\nprint(train[\"SibSp\"].value_counts())\nprint(train[\"Ticket\"].value_counts())","313a026f":"test.isnull().sum()","0f9a0192":"sns.countplot(x=\"Survived\",data=train)","fbb75caa":"sns.countplot(x=\"Sex\",data=train)","6d5c60f1":"#LOOK AT THE SURVIVAL RATE BY SEX.\ntrain.groupby('Sex')[['Survived']].mean()","eaf8e102":"#LOOK AT SURVIVAL RATE BY SEX AND PCLASS\ntrain.pivot_table('Survived',index='Sex',columns='Pclass')","da3d3906":"#LOOK AT SURVIVAL RATE BY SEX AND PCLASS VISUALLY.\ntrain.pivot_table('Survived',index='Sex',columns='Pclass').plot()","d4760c15":"#PLOT THE SURVIVAL RATE OF EACH CLASS\nsns.barplot(x='Pclass',y='Survived',data=train)","e00c7a6a":"#LOOK AT SURVIVAL RATE BY SEX ,AGE AND PCLASS.\nage=pd.cut(train['Age'],[0,18,80])\ntrain.pivot_table('Survived',['Sex','Age'],'Pclass')","dc51a464":"#COUNT THE EMPTY VALUES IN EACH COLUMN\ntrain.isna().sum()","552b5eb4":"#LOOK AT ALL OF THE VALUES IN EACH COLUMN AND GET A COUNT.\nfor val in train:\n    print(train[val].value_counts())\n    print()","904f1bcf":"train.dtypes","6c9bf71a":"#PRINT THE UNIQUE VALUES IN THE COLUMNS\nprint(train['Sex'].unique())\nprint(train['Embarked'].unique())","1a3fdf04":"title=set()\nfor name in train[\"Name\"]:\n    title.add(name.split(\",\")[1].split(\".\")[0].strip())\nprint(title)    ","0c99a95b":"titles={'Sir':\"officer\",'Mme':\"normald\",'Mr':\"norm\",'Master':\"normald\",'Don':\"officer\",'Miss':\"normald\",'Lady':\"normald\",'Mlle':\"normald\",'Col':\"officer\",'Ms':\"normald\",'the Countess':\"royal\",'Mrs':\"normald\",'Major':\"officer\",'Capt':\"officer\",'Dr':\"officer\",'Rev':\"officer\",'Jonkheer':\"royal\"}\n","3eaa7199":"train[\"Name\"]=train[\"Name\"].map(lambda name:name.split(\",\")[1].split(\".\")[0].strip())\ntrain[\"Name\"]=train.Name.map(titles)\ntrain.head(10)","07301391":"#DROP THE UNWANTED FIELDS.\ndf=train.drop([\"Ticket\",\"Cabin\",\"PassengerId\"],axis=1)\ndf.head()","db860b04":"#CONVERTING THE STRING VALUES(CATEGORICAL VALUES) TO INTEGER\ndf.Sex=df.Sex.map({\"female\":0,\"male\":\"1\"})\ndf.Embarked=df.Embarked.map({\"S\":0,\"C\":\"1\",\"Q\":2})\ndf.Name=df.Name.map({\"royal\":0,\"normald\":1,\"officer\":2,\"norm\":3})\ndf.head()","3bd0f57a":"df.isnull().sum()","38121e87":"#REPLACING ALL THE NULL VALUES.\ndf.fillna(df.Age.mean(),inplace=True)\nround(df[\"Age\"],1)\ndf.head(10)","7dce857b":"df.isnull().sum()","0139994c":"#GET SOME STATISTICS.\ndf.describe()","f980a5aa":"#THE STANDARDSCALER ASSUMES DATA IS NORMALLYDISTRIBUTED WITHIN EACH FEATURE AND SCALES THEM SUCH \n#THAT THE DISTRIBUTION CENTERED AROUND 0, WITH A STANDARD DEVIATION BY 1.\n\nfrom sklearn.preprocessing import StandardScaler\ndf[\"Age\"]=round((df.Age-df.Age.mean()\/df.Age.std()))\ndf[\"Fare\"]=round((df.Fare-df.Fare.mean()\/df.Fare.std()))\n","9f7d446f":"df.head()","d7a1bee2":"df.head()","3b255529":"from sklearn.model_selection import train_test_split","abcee2ff":"x_train,x_test,y_train,y_test=train_test_split(\n     df.drop([\"Survived\"],axis=1),\n     df.Survived,test_size=0.2,\n     random_state=0,\n     stratify=df.Survived)","7969f3b2":"def models(x_train,y_train):\n    # USE RANDOM FOREST CLASSIFIER\n    from sklearn.ensemble import RandomForestClassifier\n    forest= RandomForestClassifier(n_estimators=10,criterion='entropy',random_state=0)\n    forest.fit(x_train,y_train)\n    \n    \n\n    \n    \n    #PRINT THE TRAINING ACCURACY FOR RANDOM FOREST CLASSIFIER.\n    print('Random forest  training accuracy:',forest.score(x_train,y_train))\n    \n    return forest","3fa44798":"#GET AND TRAIN RANDOM FOREST CLASSIFIER MODELS\nmodel=models(x_train,y_train)","fd2bc85f":"title=set()\nfor name in test[\"Name\"]:\n    title.add(name.split(\",\")[1].split(\".\")[0].strip())\nprint(title)    ","4a0ca420":"\n\ntitles={'Sir':\"officer\",'Mme':\"normald\",'Mr':\"norm\",'Master':\"normald\",'Don':\"officer\",'Miss':\"normald\",'Lady':\"normald\",'Mlle':\"normald\",'Lady':\"normald\",'Mlle':\"normald\",'Col':\"officer\",'Ms':\"normald\",'the Countess':\"royal\",'Mrs':\"normald\",'Major':\"officer\",'Capt':\"officer\",'Dr':\"officer\",'Rev':\"officer\",'Jonkheer':\"royal\"}","54b26931":"test[\"Name\"]=test[\"Name\"].map(lambda name:name.split(\",\")[1].split(\".\")[0].strip())\ntest[\"Name\"]=test.Name.map(titles)\ntest.head(10)","7b54fdd8":"#DROPPING UNWANTED FIELDS.\ndf1=test.drop([\"Ticket\",\"Cabin\",\"PassengerId\"],axis=1)\ndf1.head()","b95ef924":"#CONVERTING THE STRING VALUES(CATEGORICAL VALUES) TO INTEGER\ndf1.Sex=df1.Sex.map({\"female\":0,\"male\":\"1\"})\ndf1.Embarked=df1.Embarked.map({\"S\":0,\"C\":\"1\",\"Q\":2})\ndf1.Name=df1.Name.map({\"royal\":0,\"normald\":1,\"officer\":2,\"norm\":3})\ndf1.head()","11bf2d71":"df1.isnull().sum()","74f071fc":"#REPLACING ALL THE NULL VALUES\ndf1.fillna(df1.Age.mean(),inplace=True)","a76c5258":"df1.isnull().sum()","343e5c7b":"df1[\"Age\"]=round((df1.Age-df1.Age.mean()\/df1.Age.std()))\ndf1[\"Fare\"]=round((df1.Fare-df1.Fare.mean())\/df1.Fare.std())\n","158c0dbc":"df1.head()","a7517c13":"#PRINT THE PREDICTION.\npred=model.predict(df1)\npred","ac8e9ca0":"# DATA ANALYSIS.","430c3915":"# FEATURE SCALLING.","a1f9576b":"# PRINT THE PREDICTION ON DECISION TREE  MODEL","0ec22777":"# CREATE A FUNCTION WITH RANDOM FOREST CLASSIFIER MODEL","a6c09cdb":"# CLEANING THE DATASET","063adc0a":"# IMPORTING PACKAGES.","2c8f08d0":"# DATA MODELLING"}}