{"cell_type":{"c06c3b34":"code","ea043af1":"code","6c7f6116":"code","2090a257":"code","109cb63b":"code","c20c1e94":"code","a3ce897f":"code","a0603de7":"code","ee907648":"code","56293863":"code","bed20210":"code","f9bd7b32":"code","32edc7a9":"code","b817f3c1":"code","c859dd84":"code","f3ea2e78":"code","26eca3bc":"code","ccadee12":"code","8f83b42f":"code","15e7cd24":"code","ba1bf15e":"code","1df7a2a3":"code","48d6ecab":"code","d1ef9be9":"code","ee6396e2":"code","3ebe77b8":"code","fb9d29ea":"code","fecce9da":"code","bd3be68e":"code","ee4f774d":"code","3358b64d":"code","680ddc3e":"code","6e8ed6cb":"code","567db798":"code","3f3e9687":"code","702bb016":"code","e16a0981":"code","3261c1e2":"code","eff600ed":"code","6f2e21c1":"code","ad7bb7ce":"code","8eec3f1c":"code","b022edd6":"code","d424ecff":"code","a52deec3":"code","b6f96024":"code","8f2f0b49":"code","b80966b4":"code","48d4592a":"code","db26b9c1":"code","5262a431":"code","b35ee047":"code","10114d9c":"code","bb1648ed":"code","5781dc0c":"code","316985f1":"code","c5d84e15":"code","fcc27672":"code","2ad591fe":"code","0f05a049":"code","10be766e":"code","e71b2dd6":"code","5fbd032b":"code","c1519c69":"code","26d617e9":"code","0b816177":"code","4b8c23b6":"code","3f3fd017":"code","7ffd58a0":"code","5fba6f72":"code","8f021fd7":"code","49fe6b75":"code","27a770d4":"code","0fa5e964":"code","bdc63a8a":"code","1b64c005":"code","8619e8e9":"code","ff53c2f8":"code","45988ae8":"code","ca201dcf":"code","b6be2f67":"code","25068c4d":"code","31ff1250":"code","f9283d6b":"code","d3625657":"code","5ea4c696":"code","2e31e9d3":"code","ddf288b7":"code","5c79f8e5":"code","effd5a0f":"code","668317ca":"code","05232aae":"code","86cff985":"code","cc8583e9":"code","2755bfda":"code","eeea848f":"code","ae0b40e0":"code","362aa5dc":"code","64e5a8cb":"code","afa80bf2":"code","18fb0913":"code","3246524b":"code","b35a5d92":"code","94057794":"code","28b1066c":"code","1e52702d":"code","221ffce6":"code","81cec648":"code","4a408951":"code","e6cbb95e":"code","869160b1":"code","22233668":"code","5263c081":"code","7a8b40a6":"code","e16f3470":"code","020ed1ad":"code","4814eea8":"code","8ac8e3c2":"code","f39fdc4f":"code","0d1074ba":"code","818b4484":"code","29e9d5d8":"code","9a53350d":"code","f4692cdf":"code","c09c41b8":"code","f8b42e3c":"code","5678f359":"code","28a963a1":"code","018e09ea":"code","536712ce":"code","027f40d7":"code","a1f43c3e":"code","5df6aa56":"code","9bf1183c":"code","6ea0d27d":"code","6fbb3b04":"code","7b6bbbd4":"code","bd8d25ff":"code","dc2c5ec1":"code","8eeb3bdf":"code","16f54514":"code","5d72eb8a":"code","79ce928b":"code","bb2eac2b":"code","0babbdfa":"code","83fbde4a":"code","1df68ad9":"code","17d744a2":"code","cf732a33":"code","ad662264":"code","8a44e31f":"code","45ae474a":"code","5c27bc88":"code","859fc1c5":"code","ad69e57d":"code","9e40c1c9":"code","3a91e742":"code","621652d6":"code","8c5ee260":"code","2365b951":"code","d893a019":"code","806a852f":"code","d0c929aa":"code","aa8036e2":"code","c888a09f":"code","3302b75f":"code","e70a72d2":"code","f7f01f32":"code","02418cd8":"code","bafc0933":"code","0a1dcdc0":"code","90aef4fe":"code","633525d7":"code","34980f9a":"code","07154924":"code","852688dc":"code","ab11642c":"code","215042d8":"code","4aa806aa":"code","c6df9464":"code","be3ee37f":"code","2f211bbe":"code","82295077":"code","9c3f8290":"code","19024743":"code","cf2ba947":"code","a49460d7":"code","608f17df":"code","ac5524c0":"code","a959234f":"code","28dce66f":"code","cbac5a15":"code","da39dce4":"code","1854e1a5":"code","386fabb2":"code","2e2bdbe7":"code","b936af69":"code","25e8c968":"code","05e2c4c5":"code","5df19117":"code","42c95b56":"code","5d4a7291":"code","2587d19e":"code","7b7eb49b":"code","355f6456":"code","d508202a":"code","18c05e0a":"code","eeea7bb4":"code","3f394fd9":"code","506bc8df":"code","2dbcd737":"code","4b44add3":"code","efe31e59":"code","08eaf2d2":"code","4e0685bc":"code","91268373":"code","007f2d6a":"code","a790f017":"code","f2548ea7":"code","412395f3":"code","404cc739":"code","435b4ee4":"code","2c55b0ac":"code","709ad7e2":"code","d6895775":"code","e3eab5e1":"code","096a7e01":"code","0ef59059":"code","7522dfb6":"code","9ddd0d4b":"code","48e3040a":"code","aeafe3f2":"code","0d5ad541":"markdown","695950bd":"markdown","17201062":"markdown","45983399":"markdown","49e6634e":"markdown","af4a16fa":"markdown","7f233fe9":"markdown","aad5c0c9":"markdown","787a8e26":"markdown","6255a717":"markdown","45bec4b9":"markdown","19f7efa7":"markdown","f7ac0c96":"markdown","462b7e5c":"markdown","94f83664":"markdown","9aeb807b":"markdown","143b80a8":"markdown","283288f7":"markdown","847a9604":"markdown","6671259e":"markdown","5752274c":"markdown","05794833":"markdown","775ff255":"markdown","a6c90d67":"markdown","b0a14c28":"markdown","fc53fb1f":"markdown","76f14827":"markdown","98743f26":"markdown","e0886fcc":"markdown","7db302d3":"markdown","b624e70d":"markdown","062fda5e":"markdown","f6850517":"markdown","ee8c2119":"markdown","643f6532":"markdown","8c28ce90":"markdown","5f61a1e8":"markdown","93d584c4":"markdown","9f7ad79e":"markdown","c13cdd50":"markdown","b9680576":"markdown","1932baac":"markdown","c6411e83":"markdown","c3e180c2":"markdown","1f0c4ccd":"markdown","7d197564":"markdown","722f3066":"markdown","2f66e11a":"markdown","2736b772":"markdown","eb219531":"markdown","00f0808d":"markdown","83132a99":"markdown","fc591d76":"markdown","f46c41fa":"markdown","3b175337":"markdown","02dcf22b":"markdown","fe6bda28":"markdown","9d871a49":"markdown","53e86130":"markdown","ba9f3202":"markdown","bad5fcc2":"markdown","440bd3d2":"markdown","ecf34445":"markdown","2cfad634":"markdown","73d74b01":"markdown","a6854b3b":"markdown","0e62df95":"markdown","14f9885f":"markdown","96e63cba":"markdown","3b87662b":"markdown","374b9c11":"markdown","a4977abe":"markdown","a616adf0":"markdown","9be0625c":"markdown","4fe25352":"markdown","bb8dd507":"markdown","d533471e":"markdown"},"source":{"c06c3b34":"name1 = \"John\"\nname2 = \"Smith\"\nfull_name = name1 + \" \" + name2\nprint(full_name)","ea043af1":"# .format()\nname = \"John\"\nage = 29\nprint(\"Hello {}, you are {}\".format(name, age))","6c7f6116":"# f strings\nname = \"Harry\"\nprint(f\"Hello {name}\")","2090a257":"# .title()\nname = \"john smith\"\nprint(name.title())","109cb63b":"# .replace()\nwords = \"Hello, there!\"\nprint(words.replace(\"!\", \"?\"))","c20c1e94":"# .find()\nsentence = \"Go ahead and run that cell. You\u2019ll notice that we got an output of 5. Find returns the starting index position of the match.\"\nsentence.find(\"we\")","a3ce897f":"# .strip()\nname = \" john \"\nprint(name.strip())","a0603de7":"# .split()\nsentence = \"Go ahead and run that cell. You\u2019ll notice that we got an output of 5. Find returns the starting index position of the match.\"\nsentence.split(\" \")","ee907648":"# create a product and price for three items\np1_name, p1_price = \"Books\", 49.95\np2_name, p2_price = \"Computer\", 579.99\np3_name, p3_price = \"Monitor\", 124.89\n\n# create a company name and information\ncompany_name = \"coding temple, inc.\"\ncompany_address = \"283 Franklin St.\"\ncompany_city = \"Boston, MA\"\n\n# declare ending message\nmessage = \"Thanks for shopping with us today!\"","56293863":"# create a top border\nprint( \"*\" * 50 )\n\n# print company information first, using format\nprint(\"\\t\\t{}\".format(company_name.title()))\nprint(\"\\t\\t{}\".format(company_address))\nprint(\"\\t\\t{}\".format(company_city))\n\n# print a line between sections\nprint( \"=\" * 50 )\n\n# print out header for section of items\nprint(\"\\tProduct Name\\tProduct Price\")\n\n# create a print statement for each product\nprint(\"\\t{}\\t\\t${}\".format(p1_name, p1_price))\nprint(\"\\t{}\\t${}\".format(p2_name, p2_price))\nprint(\"\\t{}\\t\\t${}\".format(p3_name, p3_price))\n\n# print a line between sections\nprint('=' * 50)\n\n# print out header for section of total\nprint(\"\\t\\t\\tTotal\")\n\n# calculate total price and print out\ntotal = p1_price + p2_price + p3_price\nprint(\"\\t\\t\\t${}\".format(total))\n\n# print a line between sections\nprint( \"=\" * 50)\n\n# output thank you message\nprint(\"\\n\\t{}\\n\".format(message))\n\n# create a bottom border\nprint( \"*\" * 50 )","bed20210":"print(input(\"What is your name?\"))","f9bd7b32":"ans = input(\"What is your name?\")\nprint(\"Hello {}!\".format(ans))","32edc7a9":"type(ans)","b817f3c1":"#Checking the Type\nnum = 5\nprint(type(num))","c859dd84":"# Converting Data Types\nnum = \"9\"\nnum = int(num)\nprint(type(num))","f3ea2e78":"ans = input(\"Type a number to add: \")\nprint(\"initial type: \", type(ans))\nresult = 100 + int(ans)\nprint(\"100 + {} = {}\".format(ans, result))","26eca3bc":"try:\n    ans = float(input(\"Type a number to add: \"))\n    print(\"100 + {} = {}\".format(ans, 100+ans))\n    print(\"The program did not break!\")\nexcept:\n    print(\"You did not put in a valid number!\")\n# without try\/except print statement would not get hit if error occurs\n","ccadee12":"try:\n    ans = float(input(\"Type a number to add: \"))\n    print(\"100 + {} = {}\".format(ans, 100+ans))\n    print(\"The program did not break\")\nexcept:\n    print(\"You did not put in a valid number!\")\n# without try\/except print statement would not get hit if error occurs","8f83b42f":"x, y = 5, 10\nif x < y: \n    print(\"x is less than y\")","15e7cd24":"x, y, z = 5, 10, 5\nif x < y and x == y:\n    print(\"both statements were true\")\nelse:\n    print(\"false\")","ba1bf15e":"#membership operator \"in\"\nword = \"Baseball\"\nif 'b' in word:\n    print(\"{} contain the character b\".format(word))","1df7a2a3":"#membership operator \"not in\"\nword = \"Baseball\"\nif 'z' in word:\n    print(\"{} contain the character z\".format(word))\nelse:\n    print(\"{} doesn't contain the character z\".format(word))","48d6ecab":"# using the elif conditional statement\nx, y = 5, 10\nif x > y:\n    print(\"x is greater\")\nelif x < y:\n    print(\"x is less\")","d1ef9be9":"# checking more than one elif conditional statement\nx, y = 5, 10\nif x > y:\n    print(\"x is greater\")\nelif (x + 10) < y:\n    print(\"x is less\")\nelif (x + 5) == y:\n    print(\"equal\")","ee6396e2":"# writing multiple conditionals within each other - multiple block levels\nx, y, z = 5, 10, 5\nif x > y:\n    print(\"greater\")\nelif x <= y:\n    if x == z:\n        print(\"x is equal to z\")\n    elif x != z:\n        print(\"x is not equal to z\")","3ebe77b8":"# using an else statement\nname = \"John\"\nif name == \"Jacob\":\n    print(\"Hello Jacob!\")\nelse:\n    print(\"Hello {}!\".format(name))","fb9d29ea":"# writing a full conditional statement with if, elif, else\nname = \"sJohn\"\nif name[0] == \"A\":\n    print(\"Name starts with an A\")\nelif name[0] == \"B\":\n    print(\"Name starts with a B\")\nelif name[0] == \"J\":\n    print(\"Name starts with a J\")\nelse: # covers all other possibilities\n    print( \"Name starts with a {}\".format( name[0] ) )","fecce9da":"# Step 1: Ask User for Calculation to Be Performed\noperation = input(\"Would you like to add\/substract\/multiply\/divide? \").lower()\nprint(\"You chose to {}.\".format(operation))","bd3be68e":"# Step 2: Ask for Numbers, Alert Order Matters\nif operation == \"substract\" or operation == \"divide\":\n    print(\"You chose to {}.\".format(operation))\n    print(\"Please keep in mind that the order of your numbers matter.\")\nnum1 = input(\"What is the first number?\")\nnum2 = input(\"What is the second number?\")\nprint(\"First Number: {}\".format(num1))\nprint(\"Second Nunber: {}\".format(num2))","ee4f774d":"# Step 3: Set Up Try\/Except for Mathematical Operation\ntry:\n    # step 3a: immediately try to convert numbers input to floats\n    num1, num2 = float(num1), float(num2)\n    # step 3b: perform operation and print result\n    if operation == \"add\":\n        result = num1 + num2\n        print(\"{} + {} = {}\".format(num1, num2, result))\n    elif operation == \"substract\":\n        result = num1 - num2\n        print(\"{} - {} = {}\".format(num1, num2, result))\n    elif operation == \"multiply\":\n        result = num1 * num2\n        print(\"{} * {} = {}\".format(num1, num2, result))\n    elif operation == \"divide\":\n        result = num1 \/ num2\n        print(\"{} \/ {} = {}\".format(num1, num2, result))\n    else:\n        # else will be hit if they didn't chose an option correctly\n        print(\"Sorry, but '{}' is not an option.\".format(operation))\nexcept:\n    # steb 3c: print error\n    print(\"Error: Improper numbers used. Please try again\")","3358b64d":"# declaring a list of numbers\nnums = [5, 10, 15.2, 20]\nprint(nums)","680ddc3e":"# accessing elements within a list\nprint( nums[1] ) # will output the value at index 1 = 10\nnum = nums[2] # saves index value 2 into num\nprint(num) # prints value assigned to num","6e8ed6cb":"# declaring a list of mixed data types\nnum = 4.3\ndata = [num, \"word\", True] # the power of data collection\nprint(data)","567db798":"# understanding lists within lists\ndata = [5, \"book\", [ 34, \"hello\" ], True] # lists can hold any type\nprint(data)\nprint( data[2] )","3f3e9687":"# using double bracket notation to access lists within lists\nprint( data[2][0] ) # will output 34\ninner_list = data[2] # inner list will equal [34, 'hello']\nprint( inner_list[1] ) # will output 'hello'","702bb016":"# changing values in a list through index\ndata = [5, 10, 15, 20]\nprint(data)\ndata[0] = 100 # change the value at index 0 - (5 to 100)\nprint(data)","e16a0981":"a = [5, 10]\nprint(id(a))","3261c1e2":"# Changing the value at a specific index will change the value for both lists. Let\u2019s see an example:\n# understanding how lists are stored\na = [5, 10]\nb = a\nprint( \"a: {}\\t b: {}\".format(a, b) )\nprint( \"Location a[0]: {}\\t Location b[0]: {}\".format( id(a[0]), id(b[0]) ) )\na[0] = 20 # re-declaring the value of a[0] also changes b[0]\nprint( \"a: {}\\t b: {}\".format(a, b) )","eff600ed":"# using [:] to copy a list\ndata = [5, 10, 15, 20]\ndata_copy = data[:]\ndata[0] = 50\nprint(\"data: {}\\t data_copy: {}\".format(data, data_copy))","6f2e21c1":"# writing your first for loop using range\nfor num in range(5):\n    print( \"Value: {}\".format(num) )","ad7bb7ce":"# providing the start, stop, and step for the range function\nfor num in range(2, 10, 2):\n    print( \"Value: {}\".format(num) ) # will print all evens between 2and 10","8eec3f1c":"# printing all characters in a name using the 'in' keyword\nname = \"John Smith\"\nfor letter in name:\n    print( \"Value: {}\".format(letter) )","b022edd6":"# using the continue statement within a foor loop\nfor num in range(5):\n    if num == 3:\n        continue\n    print(num)","d424ecff":"# breaking out of a loop using the 'break' keyword\nfor num in range(5):\n    if num == 3:\n        break\n    print(num)","a52deec3":"# setting a placeholder using the 'pass' keyword\nfor i in range(5):\n    # TODO: add code to print number\n    pass","b6f96024":"# writing your first while loop\nhealth = 10\nwhile health > 0:\n    print(health)\n    health -= 1 # forgetting this line will result in infinite loop","8f2f0b49":"# This is an example of infinite loops\n# game_over = False\n# while not game_over:\n#     print(game_over)","b80966b4":"# using two or more loops together is called a nested loop\nfor i in range(2): # outside loop\n    for j in range(3): # inside loop\n        print( i, j )","48d4592a":"# checking the number of items within a list\nnums = [5, 10, 15]\nlength = len(nums) # len() returns an integer\nprint(length)","db26b9c1":"# accessing specific items of a list with slices\nprint( nums[ 1 : 3 ] ) # will output items in index 1 and 2\nprint( nums[ : 2 ] ) # will output items in index 0 and 1\nprint( nums[ : : 2 ] ) # will print every other index - 0, 2, 4, etc.\nprint( nums[ -2 : ] ) # will output the last two items in list","5262a431":"# .append()\n# adding an item to the back of a list using append\nnums = [10, 20]\nnums.append(5)\nprint(nums) # outputs [10, 20, 5]","b35ee047":"# .insert( )\n# adding a value to the beginning of the list\nwords = [ \"ball\", \"base\" ]\nnums.insert(0, \"glove\") # first number is the index, second is the value\nnums","10114d9c":"# .pop()\n# using pop to remove items and saving to a variable to use later\nitems = [5, \"ball\", True]\nitems.pop( ) # by default removes the last item\nremoved_item = items.pop(0) # removes 5 and saves it into the variable\nprint(removed_item, \"\\n\", items)","bb1648ed":"# .remove()\n# using the remove method with a try and except\nsports = [ \"baseball\", \"soccer\", \"football\", \"hockey\" ]\ntry:\n    sports.remove(\"soccer\")\nexcept:\n    print(\"That item does not exist in the list\")\nprint(sports)","5781dc0c":"# using min, max, and sum\nnums = [5, 3, 9]\nprint( min(nums) ) # will find the lowest number in the list\nprint( max(nums) ) # will find the highest number in the list\nprint( sum(nums) ) # will add all numbers in the list and return the sum","316985f1":"# sorted\n# using sorted on lists for numerical and alphabetical data\nnums = [5, 8, 0, 2]\nsorted_nums = sorted(nums) # save to a new variable to use later\nprint(nums, sorted_nums) # the original list is in tact","c5d84e15":"# sort\n# sorting a list with .sort() in-place\nnums = [5, 0, 8, 3]\nnums.sort( ) # alters the original variable directly\nprint(nums)","fcc27672":"# using conditional statements on a list\nnames = [ \"Jack\", \"Robert\", \"Mary\" ]\nif \"Mary\" in names:\n    print(\"found\") # will run since Mary is in the list\nif \"Jimmy\" not in names:\n    print(\"not found\") # will run since Jimmy is not in the list","2ad591fe":"# using a for loop to print all items in a list\nsports = [ \"Baseball\", \"Hockey\", \"Football\", \"Basketball\" ]\nfor sport in sports:\n    print(sport)","0f05a049":"# using the while loop to remove a certain value\nnames = [ \"Bob\", \"Jack\", \"Rob\", \"Bob\", \"Robert\" ]\nwhile \"Bob\" in names:\n    names.remove(\"Bob\") # removes all instances of 'Bob'\nprint(names)","10be766e":"page ","e71b2dd6":"a = 100\ndef amount():\n    a = 79\n    return a","5fbd032b":"print(amount())","c1519c69":"sentence = \"I am global\"\ndef printing():\n#     sentence = \"I am local\"\n    \n    def execution():\n        print(\"result is \" + sentence)\n    execution()\n    \nprinting()","26d617e9":"sentence = \"I am global\"\ndef printing():\n    sentence = \"I am local\"\n    \n    def execution():\n        print(\"result is \" + sentence)\n    execution()\n    \nprinting()","0b816177":"sentence = \"I am global\"\ndef printing():\n    sentence = \"I am local\"\n    \n    def execution():\n        sentence = \"I am very local\"\n        print(\"result is \" + sentence)\n    execution()\n    \nprinting()","4b8c23b6":"number = 99\ndef write(number):\n    print(f'number = {number}')\n    \n#     redefine the variable number\n    number = 300\n    print(f'the number is changed into {number}')\n\nwrite(number)","3f3fd017":"print(number)","7ffd58a0":"number = 99\ndef write():\n    global number\n\n#     redefine the variable number\n    number = \"CHANGED NUMBER\"\n    print(f'the number is changed into {number}')\n\nwrite()","5fba6f72":"print(number)","8f021fd7":"# recommended way to change the global variable\nnumber = 99\ndef write(number):\n#     redefine the variable number\n    number = \"CHANGED NUMBER\"\n    print(f'the number is changed into {number}')\n    return number\n\nnumber = write(number)\nprint(number)","49fe6b75":"def multiply10(num):\n    return num*10","27a770d4":"multiply10(20)","0fa5e964":"number = [3, 6, 9]\nmultiply10(number) #not like this","bdc63a8a":"for item in map(multiply10, number):\n    print(item)","1b64c005":"result = list(map(multiply10, number))\nresult","8619e8e9":"def words_number(word) :\n    if len(word) % 2 == 0:\n        return 'It is even'\n    else: \n        return 'It is odd'","ff53c2f8":"words_number('humiliate')","45988ae8":"word_list = ['hurry', 'even', 'moment']\nresult = list(map(words_number, word_list))\nresult","ca201dcf":"def check_even(num):\n    return num%2 == 0","b6be2f67":"check_even(10)","25068c4d":"number = [1, 2, 3, 4, 5, 6, 7, 8]\nresult = list(filter(check_even, number))\nresult","31ff1250":"# conventional function\ndef multiply10(num):\n    return num*10","f9283d6b":"# lambda expression\nlambda num: num * 10","d3625657":"my_function = lambda num: num * 10","5ea4c696":"my_function(10)","2e31e9d3":"# with list\nlist_result = list(map(lambda x: x*10, number))\nlist_result","ddf288b7":"even_number = list(filter(lambda num: num%2 == 0, number))\neven_number","5c79f8e5":"print(type([]))\nprint(type({}))\nprint(type('it is string'))\nprint(type(12))\nprint(type(13.98))\nprint(type(()))\nprint(type(True))\nprint(type(None))","effd5a0f":"# Python 3.x\nclass NamaClass:\n    pass\n\n# Python 2.x\nclass NamaClass2():\n    pass","668317ca":"var1 = NamaClass()","05232aae":"type(var1)","86cff985":"# class Kulkas:\n    \n#     def __init__(self, merek, harga):\n#         self.merek = merek\n#         self.harga = harga\n        \nclass Kulkas:\n    \n    def __init__(self, merek, harga):\n        self.brand = merek\n        self.price = harga\n        self.guarantee = 3\n        self.power = \"electricity\"","cc8583e9":"# item1 = Kulkas(merek=\"Samsung\", harga=500)\nitem1 = Kulkas(\"Samsung\", 500) # --> self in class represent the assigned variable\nitem2 = Kulkas(\"Toshiba\", 600)","2755bfda":"item1.brand, item1.price, item1.guarantee\n# those are similar to self.brand, self.price","eeea848f":"item2.brand, item2.price, item2.power\n# those are similar to self.brand, self.price","ae0b40e0":"class Refrigerator:\n    # class object attribute (this attribute is global for class Refrigerator)\n    seller = \"Mr. Smith\"\n    \n    def __init__(self, brand, price):\n        self.brand = brand\n        self.price = price\n        self.guarantee = 3\n        self.power = \"electricity\"\n        \n    def consumption(self):\n        print(\"500 W\")\n        \n    def description(self, company):\n        print(\"Refrigerator {} is {} and the seller is {}. \\nIt is under {}\".format(self.brand, self.price, self.seller, company))","362aa5dc":"item = Refrigerator(\"LG\", 200)","64e5a8cb":"# running method within init\nitem.seller","afa80bf2":"# running method outside init --> use bracket ()\nitem.consumption(), item.description(\"LG Japan\")","18fb0913":"class Circle:\n    \n    # phi coefficient\n    phi = 3.14\n    \n    def __init__(self, radius):\n        self.radius = radius\n        self.area = 2 * self.phi * (radius ** 2)\n        \n    def circumference(self):\n        return 2 * self.phi * self.radius\n    \n#     def area(self):\n#         return 2 * self.phi * (self.radius ** 2)","3246524b":"circle1 = Circle(10)","b35a5d92":"circle1.circumference(), circle1.area\n# if the method used is outside init, then it should be \"circle1.area()\"","94057794":"# parent class\nclass Student:\n    \n    status = \"student\"\n    \n    def __init__(self, name, classroom):\n        self.name = name\n        self.classroom = classroom\n        \n    def description(self):\n        print(\"{} in classroom {} is a {}\".format(self.name, self.classroom, self.status))","28b1066c":"jack = Student(\"Jack\", \"12\")","1e52702d":"jack.description()","221ffce6":"# child class --> this class inherits Student class\nclass Score(Student):\n    \n    def __init__(self, name, classroom):\n        super().__init__(name, classroom)       # super will look for the similar def __init__ from parent class represents Student class\n        # Student.__init__(name, classroom)     # it is also allowed, but it is recommended to use super()\n        self.score_update = []\n        \n    def input_score(self, add):\n        return self.score_update.append(add)","81cec648":"bill = Score(\"Bill\", 13)","4a408951":"bill.description() # it is inherited from Student class","e6cbb95e":"bill.input_score(90)","869160b1":"bill.score_update","22233668":"class Cat:\n    def __init__(self, name):\n        self.name = name\n        \n    def response(self):\n        return self.name + \" miauw!\"\n    \nclass Dog:\n    def __init__(self, name):\n        self.name = name\n        \n    def response(self):\n        return self.name + \" guk-guk!\"","5263c081":"bucky = Cat(\"Bucky\")\nkiku = Dog(\"Kiku\")","7a8b40a6":"bucky.response(), kiku.response()","e16f3470":"for animals in (bucky, kiku):\n    print(type(animals))\n    print(animals.response())","020ed1ad":"def animal_speaks(animal):\n    print(animal.response())","4814eea8":"animal_speaks(kiku), animal_speaks(bucky)","8ac8e3c2":"class Sample:\n    \n    def __init__(self, name, number, word):\n        self.name = name\n        self.number = number\n        self.word = word\n        \n    def print(self):\n        return self.name\n    \n    def __str__(self):\n        return self.name","f39fdc4f":"sample = Sample('testing', 44, 'test')\njojo = Sample(\"Jojo\", 50, \"konami\")","0d1074ba":"sample.print()","818b4484":"print(dir(sample))","29e9d5d8":"sample.__str__(), str(sample) # can be used in two ways","9a53350d":"jojo.print()","f4692cdf":"class BankAccount:\n    \n    def __init__(self, saving_amount):\n        self.saving_amount = saving_amount\n\n    def print_balance(self):\n        print(\"Your balance is Rp {}\".format(self.saving_amount))\n    \n    def save(self):\n        add = int(input(\"input your amount to save = \"))\n        self.saving_amount += add\n    \n    def withdraw(self):\n        substract = int(input(\"Enter the amount you want to witdraw = \"))\n        if self.saving_amount < substract:\n            print(\"Sorry, your balance is not sufficient. \\n Your balance is {}\").format(self.saving_amount)\n        else:\n            self.saving_amount -= substract","c09c41b8":"mysaving = BankAccount(100000)","f8b42e3c":"mysaving.print_balance()","5678f359":"mysaving.save()","28a963a1":"mysaving.print_balance()","018e09ea":"mysaving.withdraw()","536712ce":"mysaving.print_balance()","027f40d7":"def christmas():\n    print(\"We will have Christmas soon\")","a1f43c3e":"sample = christmas","5df6aa56":"sample, christmas","9bf1183c":"sample()","6ea0d27d":"del christmas","6fbb3b04":"christmas","7b6bbbd4":"sample, sample()","bd8d25ff":"def easter(month=\"April\"):\n    print(\"Ready to welcome Easter\")\n    \n    def location():\n        return \"\\t the location is at our home\"\n  \n    \n    def confirmation():\n        return \"\\n \\t this is not April yet, check the calendar\"\n    \n#     print(location())\n#     print(confirmation())\n    print(\"this is the last command in function easter\")\n    \n    if month == \"April\":\n        return location\n    else:\n        return confirmation","dc2c5ec1":"easter()\n# function location doesnt appear since it is defined within function easter","8eeb3bdf":"check_easter = easter()","16f54514":"check_easter","5d72eb8a":"check_easter()","79ce928b":"print(check_easter())","bb2eac2b":"check_more = easter(\"May\")","0babbdfa":"print(check_more())","83fbde4a":"def greeting():\n    return \"Good morning\"\n\ngreeting()","1df68ad9":"def news(other_function):\n    print(\"I run another function\")\n    print(other_function)","17d744a2":"news(greeting())","cf732a33":"def mydecorator(function):\n    def wrap_func():\n        print(\"I am the command before the original function\")\n        print(\"\\n\")\n        function()\n        print(\"\\n\")\n        print(\"I am the after original function\")\n        print(\"\ud83d\ude04\ud83d\ude04\ud83d\ude04\ud83d\ude04\ud83d\ude04\ud83d\ude04\ud83d\ude04\ud83d\ude04\ud83d\ude04\ud83d\ude04\ud83d\ude04\")\n        \n        \n    return wrap_func","ad662264":"@mydecorator\ndef greeting():\n    print(\"Good morning\")\ngreeting()","8a44e31f":"def calculate():\n    print(\"math and aritmathic should be mastered before learning AI and data science\")\ncalculate()","45ae474a":"@mydecorator\ndef calculate():\n    print(\"math and aritmathic should be mastered before learning AI and data science\")\ncalculate()","5c27bc88":"@mydecorator\ndef calculate():\n    print(\"math and aritmathic should be mastered before learning AI and data science\")\ndef greeting():\n    print(\"Good morning\")\n    \n# only the first function after @mydecorator will be affected","859fc1c5":"calculate()","ad69e57d":"greeting()","9e40c1c9":"user1 = {'name': 'Barnes',\n        'valid': True}","3a91e742":"def authentication(function):\n    def wrap_func(*args, **kwargs):\n        if args[0]['valid']:\n            return function(*args, **kwargs)\n    return wrap_func","621652d6":"@authentication\ndef send_chat(user):\n    print(\"chat is successfully sent\")","8c5ee260":"send_chat(user1)","2365b951":"import sympy as sym\nfrom IPython.display import Math\nimport math\nimport numpy as np","d893a019":"x","806a852f":"x = sym.symbols('x')\nx","d0c929aa":"x + 1","aa8036e2":"x ** 7","c888a09f":"display(x + 87)","3302b75f":"y, z = sym.symbols('y, z')\nx\/y","e70a72d2":"display(Math(\"\\\\frac{x}{y}\"))","f7f01f32":"display(sym.sqrt(6))","02418cd8":"np.sqrt(6)","bafc0933":"math.sqrt(6)","0a1dcdc0":"display(Math(\"\\\\sigma = \\\\frac {\\\\mu}{\\\\sqrt{x+y^{25z}}}\"))","90aef4fe":"display(Math('z_{87k}'))","633525d7":"display(Math(\"\\\\text{the answer is} \\\\frac {x}{y^{15}}\"))","34980f9a":"display(Math('\\\\sin{3\\\\pi + \\\\theta}'))","07154924":"display(Math('\\\\sin(3\\\\pi + \\\\theta)'))","852688dc":"display(Math('e = mc^2'))","ab11642c":"mu, alpha, sigma = sym.symbols(\"mu, alpha, sigma\")","215042d8":"p = mu + 2*45 + sym.exp(sigma+alpha)\np","4aa806aa":"x,y,z = sym.symbols(\"x,y,z\")","c6df9464":"p = x+10","be3ee37f":"p.subs(x, 2)","2f211bbe":"p = x + 10 + 4**y","82295077":"p.subs({x:10,\n       y:2})","9c3f8290":"x = sym.symbols('x')\np = 5*x + 5 - 20","19024743":"sym.solve(p)","cf2ba947":"display(Math('\\\\text{the solution of case }%s \\\\text{ is x = } %g' %(sym.latex(p), sym.solve(p)[0])))","a49460d7":"p2 = x**2 - 4\nsym.solve(p2)","608f17df":"answer = sym.solve(p2)\n\nfor i in range(0, len(answer)):\n    print(\"Solution #\" + str(i+1) + \" is \" + str(answer[i]))","ac5524c0":"y = sym.symbols('y')\np3 = x\/10 - x*y + 50\nsym.solve(p3,y), sym.solve(p3,x)","a959234f":"import sympy as sym\nfrom IPython.display import Math","28dce66f":"x,y,z = sym.symbols('x y z')","cbac5a15":"p1 = x**y * x**z\ndisplay(p1)","da39dce4":"display(sym.simplify(p1))","1854e1a5":"p2 = x**y \/ x**z\ndisplay(p2)\ndisplay(Math(sym.latex(p2)))","386fabb2":"display(sym.simplify(p2))","2e2bdbe7":"p3 = x**y * y**z\ndisplay(p3)\ndisplay(sym.simplify(p3))","b936af69":"x,y,z = sym.symbols('x y z')","25e8c968":"p1 = x*(x+1)\np2 = x\ndisplay(sym.expand(p1*p2))","05e2c4c5":"p3 = y**12 + x**8\ndisplay(p1*p2*p3)","5df19117":"display(sym.expand(p1*p2*p3))","42c95b56":"p4 = sym.sqrt(y)\ndisplay(p4)","5d4a7291":"display(sym.expand((p1*p2*p3)\/p4))","2587d19e":"display((p1*p2*p3)\/p4)","7b7eb49b":"display(sym.simplify(p1*p2*p3)\/p4)","355f6456":"%whos","d508202a":"x,y,z = sym.symbols('x y z')","18c05e0a":"p1 = 5*(x*y)\np2 = (5*x)*y","eeea7bb4":"p1-p2","3f394fd9":"display(p1)\ndisplay(p2)","506bc8df":"a = sym.symbols('a')","2dbcd737":"x = a*(67-a) + 1\/a**2 * (16+a)\ndisplay(x)","4b44add3":"p6 = x*(y+z)\np7 = 3\/x + x**2","efe31e59":"display(p6)\ndisplay(p7)","08eaf2d2":"display(p6*p7)","4e0685bc":"display(sym.expand(p6*p7))","91268373":"display(p6*p7 - p6*p7)","007f2d6a":"b1 = [1,2,3,4,5]\nsum(b1)","a790f017":"import numpy as np\nnp.sum(b1)","f2548ea7":"# products\nnp.prod(b1)","412395f3":"# cumulative summation\nnp.cumsum(b1)","404cc739":"b2 = np.array([[1, 2, 3],[4, 5, 6]])\nprint(b2)","435b4ee4":"display(Math(sym.latex(sym.simplify(b2))))","2c55b0ac":"np.cumsum(b2)","709ad7e2":"b1","d6895775":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","e3eab5e1":"plt.plot(b1, 'rs-')\nplt.plot(np.cumsum(b1), 'bo-')\nplt.legend(['b1', 'cumulative'])\nplt.show();","096a7e01":"plt.plot(b1, 'rs-')\nplt.plot(np.cumprod(b1), 'bo-')\nplt.legend(['b1', 'cumulative product'])\nplt.show();","0ef59059":"np.cumprod(b1)","7522dfb6":"# QUIZ 1\nbil2 = np.arange(1,5)\np1 = np.sum(bil2)\np2 = np.sum(bil2**2)\n\nj1 = p1\/p2\nj2 = 1\/p1","9ddd0d4b":"print(f'Answer 1 is {j1} \\nAnswer 2 is {j2}'), j1 == j2","48e3040a":"# QUIZ 2\np3 = np.prod(bil2)\np4 = np.prod(bil2**2)\n\nj3 = p3\/p4\nj4 = 1\/p3","aeafe3f2":"print(f'Answer 1 is {j3} \\nAnswer 2 is {j4}'), j3 == j4","0d5ad541":"#### Variable Storage","695950bd":"## For Loop","17201062":"## 1) Everything in Python is class","45983399":"Converting User Input","49e6634e":"### Algebra","af4a16fa":"![image.png](attachment:image.png)","7f233fe9":"# Map, Filter and Lambda\n\n- if the result is boolean, use filter\n- if the result is non-boolean, use map","aad5c0c9":"### Infinite Loops","787a8e26":"```\n%time\n%%timeit\n%%writefile\n%ls\n%%HTML\n%%latex\n%load_ext\n%lsmagic\n```","6255a717":"# Lists and Loops\nA list is a data structure in Python that is a mutable, ordered sequence of elements.\n\nvariable a super item\narray is a super variable\nobject is a super array","45bec4b9":"Code Blocks and Indentation","19f7efa7":"## 2) Define Class","f7ac0c96":"##### 1) Simple Class","462b7e5c":"### Exercise: CALCULATOR\n![image.png](attachment:image.png)","94f83664":"# Python's execution order\n- (L) Local\n- (E) Enclosing function local\n- (G) Global\n- (B) Built-in","9aeb807b":"##### CASE 3: Solving Algebra","143b80a8":"## 3) Inheritance","283288f7":"Cumulative Product\n![image.png](attachment:image.png)","847a9604":"### If Statements","6671259e":"### Elif Statements","5752274c":"### Loops and Lists\n#### Using For Loops","05794833":"##### CASE 4: DECORATOR\nusing @","775ff255":"#### Slicing Lists","a6c90d67":"### Filter","b0a14c28":"### Nested Loops","fc53fb1f":"# Basic Math","76f14827":"##### CASE 1: Using Math","98743f26":"#### Adding Items","e0886fcc":"##### Continue Statement","7db302d3":"## 5) Dunder \/ Magic Methods\nnever change dunder methods","b624e70d":"##### 2) __init__","062fda5e":"##### Pass Statement\nNothing happens, but that\u2019s a good thing. If you take the\npass statement out completely, the program will break because there needs to be some\nsort of code within the block.","f6850517":"#### While vs For\n* For loops are generally used when you need to count or iterate over a collection of elements.\n* While loops are generally used when doing condition-based looping\n* When using a while loop, often you\u2019ll use boolean variables. Each loop has their use cases; in most cases it\u2019s personal preference,\n* general rule of thumb is counting with for loops, conditions with while loops.","ee8c2119":"#### Working with Numerical List Data","643f6532":"### Conditionals and Lists\nUsing \u201cin\u201d and \u201cnot in\u201d Keywords","8c28ce90":"##### CASE 2: using sym","5f61a1e8":"##### CASE 3: How to Use Decorator","93d584c4":"## 4) Polymorphism\nfeature from a class can be used in a function where the function has the same character as the used object","9f7ad79e":"### Aritmatika","c13cdd50":"### Decorator\n#### CASE 1","b9680576":"if we delete the function, the variable still stores the memory and still will run properly","1932baac":"##### CASE 5: When the decorator is used\n\nat web development\n- Flask\n- Django","c6411e83":"#### Exercise 3: Bank Account","c3e180c2":"### String Concatenation","1f0c4ccd":"#### book link: https:\/\/b-ok.asia\/book\/5397996\/6aa85e","7d197564":"### Algebra Principle\n![image.png](attachment:image.png)","722f3066":"### Else Statements","2f66e11a":"#### Removing Items","2736b772":"#### Elaborate algebra equation\n- a(b+c) = ab + ac\n- (a+b)(c+d) = ac + ad + bc + bd\n- (a-b)(-c+d) = -ac + ad + bc -bd","eb219531":"#### CASE 2","00f0808d":"Handling Errors","83132a99":"# User Input and Conditionals","fc591d76":"##### CASE 2: change the global variable value","f46c41fa":"### Exercise 1: Refrigerator Class","3b175337":"Type Converting","02dcf22b":"![image.png](attachment:image.png)","fe6bda28":"# Project: Printing Receipts","9d871a49":"# OBJECT ORIENTED PROGRAMMING in PYTHON\nhttps:\/\/www.youtube.com\/watch?v=XPU6WwohCDY&list=PLIeJsyt_FUfJ-uFjT2JejrbqeuNKwRSuZ","53e86130":"$$ \\text{this is written in markdown} \\frac {x}{y_k} $$","ba9f3202":"### Lambda Expression","bad5fcc2":"#### Sorting a List","440bd3d2":"### Exercise 2: Calculation for Circle Area & Circumference","ecf34445":"use map to multiply each number","2cfad634":"## While Loops\n- A while loop is generally used when you need to loop based on a condition rather than counting.","73d74b01":"### User Input and Type Converting\nAccepting User Input|","a6854b3b":"### Algebra Principle - Associative, Commutative, Distributive\n\n- Associative - a(bc)=(ab)c --> abc=abc\n- Commutative - ab=ba - abc=acb=bac\n- Distrbutive - x(y+z)= xy + xz","0e62df95":"### Map","14f9885f":"##### Break Statement","96e63cba":"Storing User Input","3b87662b":"### Formatting Strings","374b9c11":"# Working with Strings","a4977abe":"#### Copying a List\n- by using [:], we will not affect the original variable\n- you can also use the method .copy()","a616adf0":"### Working with Lists\n#### Checking Length","9be0625c":"#### Using While Loops","4fe25352":"- special characteristics of object is it has method and attribute --> try to add \".\", then \"tab\" and it will display methods\/attributes\n- OOP enables us to create our own object, including defining our method and attribute","bb8dd507":"### Sigma and Phi\n\nSummation (Sigma Symbol)\n- total addition of variable x\n- x starts from index i\n- x ends at index n\n\nProducts (multiplication) (Phi Symbol)\n- total multiplication of variable x\n- x starts from index i\n- x ends at index n\n\nCumulative Sum\n![image.png](attachment:image.png)","d533471e":"##### CASE 1"}}