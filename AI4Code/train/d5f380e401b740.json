{"cell_type":{"fdb3bd61":"code","37a5995a":"code","fb548624":"code","19f60b6c":"code","89cc8336":"code","ebb25dc6":"code","bf608682":"code","9ac2a646":"code","e6751249":"code","dae0e95b":"code","056fc902":"code","e1dbc348":"code","e1236919":"code","6a2f5896":"code","3edda48d":"code","79fc579e":"code","c1a3e5a1":"code","cecb2c8c":"code","f29edb58":"code","0062a855":"code","cf42b826":"code","253115eb":"code","14b2e86d":"code","7e6f3646":"code","c6d33181":"code","7ee2e4e4":"markdown","e85c292b":"markdown","951af865":"markdown","906ec547":"markdown","e83de27c":"markdown","ed23d691":"markdown","d10183fe":"markdown","a2d95dab":"markdown","7b691d34":"markdown","a3a4e141":"markdown","aeb287c8":"markdown","c0466c43":"markdown","f2de83c4":"markdown","073b99d1":"markdown","e384dfbc":"markdown","8748a49c":"markdown","78199f1c":"markdown","9f8c498e":"markdown","480de699":"markdown","9d031724":"markdown"},"source":{"fdb3bd61":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","37a5995a":"data = pd.read_csv('\/kaggle\/input\/star-dataset\/6 class csv.csv')\ndata.head(10)","fb548624":"print('shape: ', data.shape)","19f60b6c":"data.describe()","89cc8336":"sns.set(style=\"darkgrid\")\nstars_types = pd.DataFrame(data['Star type'].value_counts().sort_values(ascending=False))\nplt.figure(figsize=(15,5))\nax = sns.barplot(x = stars_types.index, y = 'Star type' , data = stars_types, palette='pastel')","ebb25dc6":"stars_color = pd.DataFrame(data['Star color'].value_counts().sort_values(ascending=False))\nplt.figure(figsize=(15,5))\nax = sns.barplot(x = stars_color.index, y = 'Star color' , data = stars_color, palette='pastel')\nax = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)","bf608682":"stars_spectral = pd.DataFrame(data['Spectral Class'].value_counts().sort_values(ascending=False))\nplt.figure(figsize=(15,5))\nax = sns.barplot(x = stars_spectral.index, y = 'Spectral Class' , data = stars_spectral, palette='pastel')\nax = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)","9ac2a646":"stars_data = {\n    'temperature': data['Temperature (K)'],\n    'luminosity': data['Luminosity(L\/Lo)'],\n    'radius': data['Radius(R\/Ro)'],\n    'absolute_magnitude': data['Absolute magnitude(Mv)'],\n    'star_type': data['Star type'],\n    'star_color': data['Star color'],\n    'spectral_class': data['Spectral Class']\n}\nstars_data = pd.DataFrame.from_dict(stars_data)\nstars_data['star_type'] = stars_data['star_type'].astype('category').cat.codes\nstars_data['star_color'] = stars_data['star_color'].astype('category').cat.codes\nstars_data['spectral_class'] = stars_data['spectral_class'].astype('category').cat.codes\n\ncorr = stars_data.corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nf, ax = plt.subplots(figsize=(10, 10))\ncmap = sns.diverging_palette(200, 21, as_cmap=True)\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()\ncorr","e6751249":"f, axes = plt.subplots(2, 2, figsize=(10, 10))\nsns.despine(left=True)\n\nsns.distplot(stars_data['temperature'], color='b', ax=axes[0, 0])\nsns.distplot(stars_data['luminosity'], color='m', ax=axes[0, 1])\nsns.distplot(stars_data['radius'], color='r', ax=axes[1, 0])\nsns.distplot(stars_data['absolute_magnitude'], color='g', ax=axes[1, 1])\nplt.setp(axes, yticks=[])\nplt.tight_layout()","dae0e95b":"ax = sns.catplot(x = 'Star color', y = 'Temperature (K)', kind = \"box\", data = data, palette='pastel')\nax = ax.fig.set_size_inches(30, 5)","056fc902":"ax = sns.catplot(x = 'Star color', y = 'Luminosity(L\/Lo)', kind = \"box\", data = data, palette='pastel')\nax = ax.fig.set_size_inches(30, 5)","e1dbc348":"ax = sns.catplot(x = 'Star color', y = 'Radius(R\/Ro)', kind = \"box\", data = data, palette='pastel')\nax = ax.fig.set_size_inches(30, 5)","e1236919":"ax = sns.catplot(x = 'Star color', y = 'Absolute magnitude(Mv)', kind = \"box\", data = data, palette='pastel')\nax = ax.fig.set_size_inches(30, 5)","6a2f5896":"import plotly.express as px\n\nfig = px.scatter(data, x=\"Temperature (K)\", y=\"Luminosity(L\/Lo)\", size=\"Radius(R\/Ro)\", color=\"Star color\",\n           hover_name=\"Star type\", log_x=True, size_max=60)\nfig.show()\n","3edda48d":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(stars_data.drop('star_type',axis=1), stars_data['star_type'], test_size=0.40, random_state=42)","79fc579e":"from sklearn.tree import DecisionTreeClassifier\n\ndtree = DecisionTreeClassifier()\ndtree.fit(X_train,y_train)\npredictions = dtree.predict(X_test)","c1a3e5a1":"from sklearn.metrics import classification_report,confusion_matrix\n\nconfusion_matrix(y_test,predictions)","cecb2c8c":"print(classification_report(y_test,predictions))","f29edb58":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression(random_state=42, max_iter=10000)\nlogreg.fit(X_train, y_train)\npredictions = logreg.predict(X_test)\n\nprint(classification_report(y_test, predictions))","0062a855":"features_data = pd.DataFrame({'color': stars_data['star_color'], 'spectral_class': stars_data['spectral_class'], 'star_type': stars_data['star_type']})\nX_train, X_test, y_train, y_test = train_test_split(features_data.drop('star_type',axis=1), features_data['star_type'], test_size=0.20, random_state=42)","cf42b826":"logreg.fit(X_train, y_train)\npredictions = logreg.predict(X_test)\n\nprint(classification_report(y_test, predictions))","253115eb":"import plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn.linear_model import LinearRegression\n\n\n# Split data into training and test splits\ntrain_idx, test_idx = train_test_split(stars_data.index, test_size=.2, random_state=42)\nstars_data['split'] = 'train'\nstars_data.loc[test_idx, 'split'] = 'test'\n\nX = stars_data[['star_color', 'spectral_class']]\ny = stars_data['star_type']\nX_train = stars_data.loc[train_idx, ['star_color', 'spectral_class']]\ny_train = stars_data.loc[train_idx, 'star_type']\n\n# Condition the model on sepal width and length, predict the petal width\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\nstars_data['prediction'] = model.predict(X)\n\nfig = px.scatter(\n    stars_data, x='star_color', y='spectral_class',\n    marginal_x='histogram', marginal_y='histogram',\n    color='split', trendline='ols'\n)\nfig.update_traces(histnorm='probability', selector={'type':'histogram'})\nfig.add_shape(\n    type=\"line\", line=dict(dash='dash'),\n    x0=y.min(), y0=y.min(),\n    x1=y.max(), y1=y.max()\n)\n\nfig.show()","14b2e86d":"features_data['temp'] = pd.Series(stars_data['temperature'], index = features_data.index)\nfeatures_data['radius'] = pd.Series(stars_data['radius'], index = features_data.index)\n\nX_train, X_test, y_train, y_test = train_test_split(features_data.drop('star_type',axis=1), features_data['star_type'], test_size=0.20, random_state=42)\nlogreg.fit(X_train, y_train)\npredictions = logreg.predict(X_test)\n\nprint(classification_report(y_test, predictions))","7e6f3646":"features_data['luminosity'] = pd.Series(stars_data['luminosity'], index = features_data.index)\nX_train, X_test, y_train, y_test = train_test_split(features_data.drop('star_type', axis=1), features_data['star_type'], test_size=0.20, random_state=42)\nlogreg.fit(X_train, y_train)\npredictions = logreg.predict(X_test)\n\nprint(classification_report(y_test, predictions))","c6d33181":"features_data['absolute_magnitude'] = pd.Series(stars_data['absolute_magnitude'], index = features_data.index)\ndel features_data['luminosity']\n\nX_train, X_test, y_train, y_test = train_test_split(features_data.drop('star_type', axis=1), features_data['star_type'], test_size=0.20, random_state=42)\nlogreg.fit(X_train, y_train)\npredictions = logreg.predict(X_test)\n\nprint(classification_report(y_test, predictions))","7ee2e4e4":"Well, we have good data, because we have not a lot of outliers and our data are well-balanced.","e85c292b":"## Let`s download and see the data:","951af865":"Explore color types:","906ec547":"# Classification. Logistic Regression","e83de27c":"Based on EDA, we can say that star color, spectral class have the greatest impact on star type:","ed23d691":"Well, it is very good. Let`s try Logistic regression for this task.","d10183fe":"Have we got well-balanced data?","a2d95dab":"# Classification. Decision Tree","7b691d34":"We see the quality has improved without using luminosity.","a3a4e141":"Now see by boxplots, have we got outliers?\n\nExploring numeric features\/star color. ","aeb287c8":"Let's add some interactive plots:","c0466c43":"Use only two features is bad idea, let`s add another features:","f2de83c4":"So, quality has decreased.","073b99d1":"Let`s see distibution of our numeric data:","e384dfbc":"Explore spectral classes:","8748a49c":"Look better, add luminosity:\n","78199f1c":"# EDA:\n\nkeep in mind:\n- Brown Dwarf -> Star Type = 0\n- Red Dwarf -> Star Type = 1\n- White Dwarf-> Star Type = 2\n- Main Sequence -> Star Type = 3\n- Supergiant -> Star Type = 4\n- Hypergiant -> Star Type = 5","9f8c498e":"Try Logistic Regression with all features:","480de699":"And we can see the most high dependenses between:\n- temp and radius;\n- star_type and star_color, spectral_class;\n- star_color and radius, spectral_class.","9d031724":"Have we got any linear dependences of our data?\n\nLet`s explore this by correlation. \n"}}