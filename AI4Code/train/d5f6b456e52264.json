{"cell_type":{"bad86eb7":"code","c6b3ca22":"code","b227ea6a":"code","023ab18e":"code","0045f7d5":"code","c2a02ccc":"code","5d302d23":"code","2b38777f":"code","1e61b56c":"code","0fb4de45":"code","e34446be":"code","39c7c206":"code","67c855f4":"code","329601af":"code","6993d860":"code","7f916f94":"code","da575f7e":"markdown","117ef706":"markdown","d7616acf":"markdown","9018e74d":"markdown","ea40a0b2":"markdown","4d91a010":"markdown","652480ce":"markdown","9bd7505e":"markdown","6a2c201a":"markdown","09d74ec9":"markdown","453c5bb8":"markdown"},"source":{"bad86eb7":"!pip install vaex==2.5.0 ","c6b3ca22":"import vaex\n\nimport pandas as pd\nimport numpy as np","b227ea6a":"n_rows = 100000 # one hundred thousand random data\nn_cols = 10\ndf = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, n_cols)), columns=['c%d' % i for i in range(n_cols)])\ndf.head()","023ab18e":"df.info(memory_usage='deep')","0045f7d5":"file_path = 'main_dataset.csv'\ndf.to_csv(file_path, index=False)","c2a02ccc":"vaex_df = vaex.from_csv(file_path)","5d302d23":"type(vaex_df)","2b38777f":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/working'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1e61b56c":"vaex_df = vaex.open('\/kaggle\/working\/main_dataset.csv')","0fb4de45":"type(vaex_df)","e34446be":"vaex_df.head()","39c7c206":"%%time\nvaex_df['multiplication_col13']=vaex_df.c1*vaex_df.c3","67c855f4":"vaex_df['multiplication_col13']","329601af":"vaex_df[vaex_df.c2>70]","6993d860":"dff=vaex_df[vaex_df.c2>70]","7f916f94":"dff.c2.minmax(progress='widget')","da575f7e":"Vaex required us to give data in form of hdf5 format","117ef706":"### Vaex, what's that?\n- Vaex is a high performance Python library for lazy Out-of-Core DataFrames (similar to Pandas), to visualize and explore big tabular datasets. \n- It calculates statistics such as mean, sum, count, standard deviation etc, on an N-dimensional grid for more than a billion (10^9) samples\/rows per second. \n- Visualization is done using histograms, density plots and 3d volume rendering, allowing interactive exploration of big data. Vaex uses memory mapping, zero memory copy policy and lazy computations for best performance (no memory wasted).","d7616acf":"### Read Hdf5 files using Vaex library","9018e74d":"#### Filtering will not make a memory copy","ea40a0b2":"#### All the agorithms work out of core, the limit is the size of your hard driver","4d91a010":"<img src=\"https:\/\/miro.medium.com\/max\/1232\/1*4Y0aCKaVIywjhohnd5dWPA.png\">","652480ce":"# Vaex: Python module to load data fast!","9bd7505e":"### Creating Csv files","6a2c201a":"### Out-of-core DataFrame\nFiltering and evaluating expressions will not waste memory by making copies; the data is kept untouched on disk, and will be streamed only when needed. Delay the time before you need a cluster.","09d74ec9":"### Expression system\n- Let's try to implement some expressions using vaex\n- Don't waste memory or time with feature engineering, we (lazily) transform your data when needed.","453c5bb8":"### Create Hdf5 files"}}