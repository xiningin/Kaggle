{"cell_type":{"784c151b":"code","5c0239d7":"code","6a97b4ef":"code","06073bac":"code","92ab86f8":"code","50de90df":"code","d738958a":"code","8298ac7d":"code","0710a1c5":"code","b08af76f":"code","83a9b8aa":"code","32050d45":"code","3aa7f777":"code","1fb387c2":"code","9aa22341":"code","ec1f6215":"code","14dc5cea":"markdown","1d09f763":"markdown"},"source":{"784c151b":"# importing libraries\nimport numpy as np\nimport pandas as pd\n\n# checking all directories in our datasets\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5c0239d7":"train_path = '..\/input\/tabular-playground-series-feb-2021\/train.csv'\ntest_path = '..\/input\/tabular-playground-series-feb-2021\/test.csv'\n\n# reading train.csv\ntrain = pd.read_csv(train_path)\ntrain.head()","6a97b4ef":"# rows and column in train folder\ntrain.shape","06073bac":"# reading test.csv\ntest = pd.read_csv(test_path)\ntest.head()","92ab86f8":"test.shape","50de90df":"extra = []\nfor i in train.columns:\n    if i in test.columns:\n        print(i,end=' ')\n    else:\n        extra.append(i)\n\nprint('\\n\\nextra column in train')\nprint(extra)","d738958a":"target = train['target']\ntrain.drop(['target'],axis = 1,inplace = True)\n\nprint(target)","8298ac7d":"# as we don't have any null values in this dataset\ntrain.isnull().values.any()","0710a1c5":"for i in train.columns:\n    if train[i].dtype == 'object':\n        print(i,train[i].unique())","b08af76f":"# as we have columns of object type so convert them using label encoding\n\nfrom sklearn.preprocessing import LabelEncoder\n\nfor i in train.columns:\n    if train[i].dtype == 'object':\n        labelencoder = LabelEncoder()\n        \n        labelencoder.fit(list(train[i].values))\n        train[i] = labelencoder.transform(train[i].values)\n        print(i,train[i].unique())","83a9b8aa":"for i in test.columns:\n    if test[i].dtype == 'object':\n        print(i,test[i].unique())","32050d45":"# as we have columns of object type so convert them using label encoding\n\nfor i in test.columns:\n    if test[i].dtype == 'object':\n        labelencoder = LabelEncoder()\n        \n        labelencoder.fit(list(test[i].values))\n        test[i] = labelencoder.transform(test[i].values)\n        print(i,test[i].unique())","3aa7f777":"from sklearn.ensemble import RandomForestRegressor","1fb387c2":"# read submission file\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv',index_col='id')","9aa22341":"from sklearn.model_selection import train_test_split\n\nX_train,X_valid,y_train,y_valid = train_test_split(train,target,\n                                                   train_size=0.8,\n                                                   test_size=0.2,\n                                                   random_state=42)","ec1f6215":"from sklearn.metrics import mean_absolute_error\nfrom xgboost import XGBRegressor\n\n# initalise xgb regressor\nmodel = XGBRegressor(n_estimators = 100,learning_rate=0.01)\n\n# train the model\nmodel.fit(X_train,y_train,early_stopping_rounds=5,\n               eval_set = [(X_valid,y_valid)],\n              verbose=False)\n\n#predict test dataset\nsubmission['target'] = model.predict(test)\nsubmission.to_csv('random_forest.csv')","14dc5cea":"<h2 style=\"color:red;\"> We can increase accuracy of current notebook, if we hypertune some parameter in xgboost. <\/h2>\n\n<h1 style=\"color:orange;\">Upvote it! if you like it<\/h1>","1d09f763":"<h1 style=\"color:orange;\"> Let's Go through this Notebook!<\/h1>"}}