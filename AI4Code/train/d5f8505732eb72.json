{"cell_type":{"66c8a132":"code","c882543e":"code","79a45ade":"code","ae4eebe0":"code","a6042aa1":"code","6443de01":"code","1602c55a":"code","56cb83cf":"code","e237e178":"code","6028cc06":"code","8007083d":"code","83b14d1a":"code","b0de3f30":"code","366ca504":"code","13f06962":"code","7a41cd59":"code","28424fe8":"code","ac53ee22":"code","db991a99":"code","7053d77d":"markdown","76cdf1e4":"markdown"},"source":{"66c8a132":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport cv2\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Activation, Flatten, Dropout\nfrom tensorflow.keras import optimizers","c882543e":"device_name = tf.test.gpu_device_name()\nif \"GPU\" not in device_name:\n    print(\"GPU device not found\")\nprint('Found GPU at: {}'.format(device_name))","79a45ade":"tf.test.is_gpu_available()","ae4eebe0":"# config\nROOT = '..\/input\/dlub-summer-school-challenge-2021\/'\nTRAIN_DIR = 'train\/train\/'\nTEST_DIR = 'test\/test\/'","a6042aa1":"# load csv files\ntrain = pd.read_csv(ROOT + 'train.csv')\ncategory = pd.read_csv(ROOT + 'category.csv')\nsubmission = pd.read_csv(ROOT + 'submission.csv')\n\ntrain.head()","6443de01":"# convert `category_id` to string\ntrain['category_id'] = train['category_id'].astype(str)\n# check label distribution\ntrain['category_id'].value_counts()","1602c55a":"# convert labels to dictionary\ncategory_dict = {row[1]['category_id']: row[1]['category_name'] for row in category.iterrows()}\nfilename_dict = {row[1]['filename']: row[1]['category_id'] for row in train.iterrows()}","56cb83cf":"# check the number of training images\ntrain_list = os.listdir(ROOT + TRAIN_DIR)\nprint(f\"Number of images: {len(train_list)}\")","e237e178":"# plot the image sample\nfig, axs = plt.subplots(1,5, figsize=(15,3))\n\naxs = axs.flatten()\n\nfor image, ax in zip(train_list[:5], axs):\n    img = cv2.imread(ROOT + TRAIN_DIR + image)\n    name = category_dict[int(filename_dict[image])]\n    ax.imshow(img)\n    ax.set_title(f'{name}: {img.shape}')\n    \nfig.show()","6028cc06":"# create image generator\n#train image generator\ntrain_gen = ImageDataGenerator(\n    rotation_range=45,\n    rescale=1.\/255,\n    horizontal_flip=True,\n    zoom_range=0.2,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    fill_mode='nearest',\n    validation_split=0.2 # split data to train and validation\n)\n\n# test image generator\ntest_gen = ImageDataGenerator(rescale = 1.\/255)","8007083d":"# load the images\nTARGET_SIZE = (128,128)\nX_COL = 'filename'\nY_COL = 'category_id'\nBATCH_SIZE = 32\nCLASS_MODE = 'categorical'\nSEED = 42\n\ntrain_data = train_gen.flow_from_dataframe(dataframe=train, \n                                           directory=ROOT+TRAIN_DIR, \n                                           x_col=X_COL, \n                                           y_col=Y_COL, \n                                           seed=SEED,\n                                           batch_size=BATCH_SIZE, \n                                           shuffle=True, \n                                           class_mode=CLASS_MODE,\n                                           target_size=TARGET_SIZE,\n                                           subset='training'\n                                          )\n\nvalidation_data = train_gen.flow_from_dataframe(dataframe = train, \n                                           directory=ROOT+TRAIN_DIR, \n                                           x_col=X_COL, \n                                           y_col=Y_COL, \n                                           seed=SEED,\n                                           batch_size=BATCH_SIZE, \n                                           shuffle=True, \n                                           class_mode=CLASS_MODE,\n                                           target_size=TARGET_SIZE,\n                                           subset='validation'\n                                          )\n\ntest_data = test_gen.flow_from_dataframe(dataframe=submission, \n                                         directory=ROOT+TEST_DIR, \n                                         x_col=X_COL,\n                                         seed=SEED,\n                                         batch_size=BATCH_SIZE, \n                                         shuffle=False, \n                                         class_mode=None,\n                                         target_size=TARGET_SIZE\n                                          )","83b14d1a":"image, label = next(train_data)\nprint(f\"Image and batch size: {image.shape}\")\nprint(f\"Labels: {label[0]}\")","b0de3f30":"image = next(test_data)\nprint(f\"Image and batch size: {image.shape}\") ","366ca504":"# build the model\nINPUT_SHAPE = (128,128,3)\nmodel = Sequential([\n    Conv2D(32, (3,3), padding='same', activation='relu', input_shape=INPUT_SHAPE),\n    MaxPooling2D((2,2)),\n    Dropout(0.1),\n    \n    Conv2D(32, (3,3), padding='same', activation='relu'),\n    MaxPooling2D((2,2)),\n    Dropout(0.1),\n    \n    Conv2D(64, (3,3), padding='same', activation='relu'),\n    MaxPooling2D((2,2)),\n    Dropout(0.1),\n    \n    Conv2D(64, (3,3), padding='same', activation='relu'),\n    MaxPooling2D((2,2)),\n    Dropout(0.1),\n    \n    Flatten(),\n    Dense(128, activation='relu'),\n    Dropout(0.1),\n    Dense(64, activation='relu'),\n    Dropout(0.1),\n    Dense(25, activation='sigmoid')\n    ])\n\nmodel.summary()","13f06962":"# compile the model\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=optimizers.SGD(learning_rate=0.01),\n              metrics=['categorical_accuracy'])","7a41cd59":"# train the model\nEPOCH = 60\n\nhistory = model.fit(train_data,\n                    validation_data=validation_data,\n                    epochs=EPOCH\n)","28424fe8":"# predict test data\ntest_data.reset()\npred = model.predict_classes(test_data,\n                             verbose=1)","ac53ee22":"submission['category_id'] = pred\nsubmission.head()","db991a99":"submission.to_csv('submission_simple_cnn.csv', index=False)","7053d77d":"# SIMPLE CNN TO CLASSIFY FOOD IMAGES USING TF","76cdf1e4":"The end of the notebook"}}