{"cell_type":{"09688eb4":"code","7327f69a":"code","fe1dd5e6":"code","2c370bab":"code","a6169414":"code","eb543b0f":"code","920f3ed0":"code","da1c105b":"code","bc48c698":"code","2c9b2c2d":"code","697b9aed":"code","f4a0724a":"code","27be1493":"code","27d25053":"code","058eaf2e":"code","8c0daa7f":"code","7abb97de":"code","20c78087":"code","9f8aa0bd":"code","cf8966d8":"markdown","c2f0dd9e":"markdown","76c55dff":"markdown","a6ab172d":"markdown","e68dcfa6":"markdown"},"source":{"09688eb4":"import numpy as np \nimport pandas as pd ","7327f69a":"train=pd.read_csv(\"..\/input\/train.csv\")\ntest=pd.read_csv(\"..\/input\/test.csv\")","fe1dd5e6":"train.head()","2c370bab":"train=train.drop(['Age','Gender'],axis=1)","a6169414":"# Getting Year from Date\ndef get_year(x):\n    date = str(x)\n    year = date[:4]\n    return year","eb543b0f":"# Adding the Year column to Train Data\ntrain['Year'] = train.apply(lambda x : get_year(x['Date']), axis=1)","920f3ed0":"# Getting Month from Date\ndef get_month(x):\n    date = str(x)\n    month = date[4:]\n    return month","da1c105b":"# Adding the Month column to Train Data\ntrain['Month'] = train.apply(lambda x : get_month(x['Date']), axis=1)","bc48c698":"train.head()","2c9b2c2d":"pid_list = set(train['UID'])\ntest_df = pd.DataFrame()\nfor item in pid_list:\n    df = train[train['Year']=='2013']\n    df1 = df[df['UID']==item]\n    if df1.shape[0]<10:\n        df1_month = set(df1['Month'])\n        df2 = train[train['Year']=='2012']\n        df3 = df2[df2['UID']==item]\n        df3_month = set(df3['Month'])\n        difference_month = df3_month.difference(df1_month)\n        for m in difference_month:\n            df4 = df3[df3['Month']==m]\n            df1 = df1.append(df4)\n    if df1.shape[0]<10:\n        df1_month = set(df1['Month'])\n        df2 = train[train['Year']=='2011']\n        df3 = df2[df2['UID']==item]\n        df3_month = set(df3['Month'])\n        difference_month = df3_month.difference(df1_month)\n        for m in difference_month:\n            df4 = df3[df3['Month']==m]\n            df1 = df1.append(df4)\n        \n    test_df = test_df.append(df1)  \n    \ntrain = test_df","697b9aed":"train.head(5)","f4a0724a":"# Probability for Event P(E)\n\nnew_train_df = train.groupby([\"UID\",\"Event_Code\"]).size().reset_index(name=\"count_of_event_for_patient\")\ntrial_train = train.merge(new_train_df, on = ['UID','Event_Code'])\n\nnew_train_df1 = train.groupby([\"UID\"]).size().reset_index(name=\"total_events_for_patient\") \ntrial_train = trial_train.merge(new_train_df1, on = ['UID'])\n\ntrial_train['prob_of_event'] = trial_train['count_of_event_for_patient'] \/ trial_train['total_events_for_patient']\n\ntrain = trial_train","27be1493":"train.head()","27d25053":"# Probability for Month P(M)\n\nnew_train_df = train.groupby([\"UID\",\"Month\"]).size().reset_index(name=\"count_of_month_for_patient\")\ntrial_train = train.merge(new_train_df, on = ['UID','Month'])\n\nnew_train_df1 = train.groupby([\"UID\"]).size().reset_index(name=\"total_months_for_patient\") \ntrial_train = trial_train.merge(new_train_df1, on = ['UID'])\n\ntrial_train['prob_of_month'] = trial_train['count_of_month_for_patient'] \/ trial_train['total_months_for_patient']\ntrain = trial_train","058eaf2e":"# Probability of Month Given the Event P(M\/E)\n\nnew_train_df = train.groupby([\"UID\",\"Event_Code\",\"Month\"]).size().reset_index(name=\"count_of_month_and_event_for_patient\")\ntrial_train = train.merge(new_train_df, on = ['UID','Event_Code','Month'])\n\nnew_train_df1 = train.groupby([\"UID\"]).size().reset_index(name=\"total_event_for_patient_when_month\") \ntrial_train = trial_train.merge(new_train_df1, on = ['UID'])\n\ntrial_train['prob_of_month_when_event'] = trial_train['count_of_month_and_event_for_patient'] \/ trial_train['total_event_for_patient_when_month']\ntrain = trial_train","8c0daa7f":"# Computing the Probability\ntrain['prob_of_occurrence'] = (train['prob_of_month_when_event']*train['prob_of_event']) \/ train['prob_of_month']\nnew_sort = train","7abb97de":"# Extracting the Top 10 probability Events\nfreq_events1 = pd.crosstab(index=[new_sort['UID']],columns=new_sort['Event_Code'], values = new_sort['prob_of_occurrence'], aggfunc=np.mean)\nfreq_events1.fillna(0)\nfreq_events1.reset_index(drop=False, inplace=True)\n\nsubmit = freq_events1.loc[:,freq_events1.columns != 'UID'].apply(lambda x: pd.Series(x.sort_values(ascending=False).iloc[:10].index, index=['Event'+str(x) for x in range(1,11)]),axis=1).reset_index()\nsubmit.drop('index',inplace=True, axis=1)\n\nsubmit['UID'] = freq_events1['UID']\n\ncols = submit.columns.tolist()\ncols = cols[-1:] + cols[:-1]\nsubmit = submit[cols]","20c78087":"submit","9f8aa0bd":"# final submission\nsubmit.to_csv(\"submission.csv\", index=False)","cf8966d8":"## Problem Statement\nInsurance Plus++, a premium payer, wants to use predictive modeling on healthcare data to predict the occurrence of future events among their covered patients. They want to use existing data about their patients\u2019 previous medical events to predict future events in their patient journey. Events are recorded in the standardized ICD-9 format (details here). In this challenge, the goal is to predict the next 10 events in 2014 for each patient in order of occurrence.","c2f0dd9e":"## Data Preparation","76c55dff":"## Computing the Probability of Occurrence\n### #Formula used : P(E\/M) = [ P(M\/E)*P(E) ] \/ P(M)","a6ab172d":"The challenge was organized by zs on Hackerearth and it was open for US citizens.\nI scored 5th rank on leaderboard","e68dcfa6":"### Extracting 10 recent details of patients  "}}