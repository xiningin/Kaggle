{"cell_type":{"103c6a79":"code","924c5443":"code","4d085284":"code","4aed36ac":"code","a69f76d7":"code","88f7bd84":"code","271dc1ab":"code","0606be07":"code","cf4b3219":"markdown"},"source":{"103c6a79":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra phyton mathdan daha gelismis mat. formulu\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","924c5443":"imdb = pd.read_csv(\"..\/input\/imdb-data\/IMDB-Movie-Data.csv\") #Dataframe","4d085284":"imdb.head()","4aed36ac":"genresList = []\nfor genre in imdb[\"Genre\"]:\n    for unique in genre.split(\",\"):\n        if unique not in genresList:\n            genresList.append(unique)\nprint(len(genresList)) #len -> length = eleman say\u0131s\u0131","a69f76d7":"genreTotal = {}   # Total Rating\ngenreCount = {}   # Genre Film Count\n\nfor genre in genresList:\n    genreTotal[genre] = 0\n    genreCount[genre] = 0\nprint(genreTotal)\nprint(genreCount)","88f7bd84":"for idx,genres in enumerate(imdb[\"Genre\"]):\n    #print(idx,genres)\n    for genre in genres.split(\",\"):\n        genreTotal[genre] += imdb[\"Rating\"][idx]\n        genreCount[genre] += 1\nprint(genreTotal)\nprint(\"*******\")\nprint(genreCount)","271dc1ab":"genreAverage={}\nfor genre in genreTotal.keys():\n    genreAverage[genre] = genreTotal[genre] \/ genreCount[genre]\nprint(genreAverage)","0606be07":"resultGenre = \"temp\"\nresultRating = 0\nfor genre in genreAverage.keys():\n    if genreAverage[genre] > resultRating:\n        resultGenre = genre\n        resultRating = genreAverage[genre]\n        \nprint(\"IMDB LOVES \" + resultGenre + \" WITH AN AVERAGE OF \" + str(round(resultRating,2)))","cf4b3219":"imdb[\"Genre\"]"}}