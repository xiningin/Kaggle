{"cell_type":{"289f097a":"code","e43e3066":"code","cbc519ec":"code","af48c433":"code","4348c1d0":"code","a8d35aeb":"code","045f7fe3":"code","8787c529":"code","0fdca984":"markdown","0068495f":"markdown","2b738e34":"markdown","4e746080":"markdown","92a4c34f":"markdown","182cc65a":"markdown","29e19fa9":"markdown","e1d3877c":"markdown","7bd57634":"markdown","39d06964":"markdown","54673d6d":"markdown","bcbef31c":"markdown"},"source":{"289f097a":"# Import Libraries \nfrom collections import namedtuple\nfrom datetime import datetime\nimport glob\nimport math\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport pytz\nimport seaborn as sns\nimport time\nfrom tqdm import tqdm\nimport warnings \n\npd.set_option('max_columns', 1000)\nwarnings.filterwarnings('ignore')","e43e3066":"\"\"\"\nFunction to calculate the distance between two points\n\nParameters:\n    p1: point in form of [p1, p2]\n    p2: point in the form of [p1, p2]\n    \nReturns: euclidean distance between p1 and p2\n\"\"\"\ndef calcDistance(p1, p2):\n    return (math.sqrt( ((p1[0]-p2[0])**2)+((p1[1]-p2[1])**2) ))\n\n'''\nFunction to reduce memory usage of dataframe \n\nCode for function from Revised BDB Data by Joe Andruzzi (jdruzzi)\n'''\ndef reduce_mem_usage(df):\n\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df\n\n'''\nClass to import, clean and standardize the data\n\nCode for class edited from Revised BDB Data by Joe Andruzzi (jdruzzi)\n'''\nclass CreateNFLData:\n\n    def __init__(self):\n        pass\n\n    \"\"\"\n    Load data from all weeks into one dataframe.\n    \n    Parameters: None\n    Return: dataFrame with all weeks of data\n    \"\"\"\n    def LoadData(self):\n        globbed_files = glob.glob(\"..\/input\/nfl-big-data-bowl-2021\/week*.csv\") #creates a list of all csv files\n        data = []\n        for csv in tqdm(globbed_files):\n            frame = pd.read_csv(csv, index_col=0)\n            frame = reduce_mem_usage(frame)\n            data.append(frame)\n\n        WeekData = pd.concat(data).reset_index()\n        \n        return WeekData\n\n\n    \"\"\"\n    Function to standardize data coordinates, orientation, direction, and possession teams.\n    \n    Parameter: \n        W: dataframe to be standardized\n        \n    Returns: dataframe with standardized columns\n    \"\"\"\n    def Standardize(self,W):\n        W['Dir_rad'] = np.mod(90 - W.dir, 360) * math.pi\/180.0\n        W['ToLeft'] = W.playDirection == \"left\"\n        W['TeamOnOffense'] = \"home\"\n        W.loc[W.possessionTeam != W.PlayerTeam, 'TeamOnOffense'] = \"away\"\n        W['YardLine_std'] = 100 - W.yardlineNumber\n        W.loc[W.yardlineSide.fillna('') == W.possessionTeam,  \n                'YardLine_std'\n                ] = W.loc[W.yardlineSide.fillna('') == W.possessionTeam,  \n                'yardlineNumber']\n        W['X_std'] = W.x\n        W.loc[W.ToLeft, 'X_std'] = 120 - W.loc[W.ToLeft, 'x'] \n        W['Y_std'] = W.y\n        W.loc[W.ToLeft, 'Y_std'] = 160\/3 - W.loc[W.ToLeft, 'y'] \n        W['Dir_std'] = W.Dir_rad\n        W.loc[W.ToLeft, 'Dir_std'] = np.mod(np.pi + W.loc[W.ToLeft, 'Dir_rad'], 2*np.pi)\n        W['X_std'] = round(W['X_std'],2)\n        W['Y_std'] = round(W['Y_std'],2)\n        W['Orientation_rad'] = np.mod(-W.o + 90, 360) * math.pi\/180.0\n        W['Orientation_std'] = W.Orientation_rad\n        W.loc[W.ToLeft, 'Orientation_std'] = np.mod(np.pi + W.loc[W.ToLeft, 'Orientation_rad'], 2*np.pi)\n        return W\n\n    \"\"\"\n    Function to merge the game and play data into the dataframe df\n    \n    Parameters:\n        df: dataframe for play and game data to be merged with\n        \n    Returns: dataframe merged with play and game data\n    \"\"\"\n    def mergeGameData(self,df):\n        games = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/games.csv', index_col=0)\n        plays = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/plays.csv', index_col=0, usecols= ['gameId', 'playId','yardlineNumber','possessionTeam','yardlineSide'])\n        df = pd.merge(df, games, how='left', left_on=['gameId'], right_on=['gameId'])\n        df['PlayerTeam'] = np.where(df['team'] == 'home', df['homeTeamAbbr'], df['visitorTeamAbbr'] )\n        df = df.drop(['homeTeamAbbr','visitorTeamAbbr'], axis=1)\n        df = pd.merge(df, plays, how='left', left_on=['gameId', 'playId'], right_on=['gameId', 'playId'])\n        df['OnOffense'] = np.where(df['PlayerTeam'] == df['possessionTeam'], True, False)\n        return df\n\n\"\"\"\nClass to store information for one play\n\"\"\"\nclass play:\n        \n    def __init__(self, gameId, playId):\n        self.gameId = gameId\n        self.playId = playId\n        self.targetReceiver = None #target\n        self.receiverPos = None\n        self.receiverName = None\n        self.receiverArrivedLocation = None\n        self.receiverArrivedSpeed = None\n        self.receiverArrivedOrientation = None\n        self.receiverToBall = None\n        self.defender = None\n        self.defenderPos = None\n        self.defenderName = None\n        self.defenderArrivedLocation = None\n        self.defenderArrivedSpeed = None\n        self.defenderArrivedOrientation = None\n        self.separationAtArrival = None\n        self.footballReleaseLocation = None\n        self.releaseTimestamp = None\n        self.footballArriveLocation = None\n        self.arriveTimestamp = None\n        self.distanceOfPass = None\n        self.passClassification = None\n        self.timeElapsed = None\n        self.events = None\n        self.passOutcome = None\n        self.receiverReleaseLocation = None\n        self.receiverReleaseSpeed = None\n        self.receiverReleaseOrientation = None\n        self.defenderReleaseLocation = None\n        self.defenderReleaseSpeed = None\n        self.defenderReleaseOrientation = None\n        self.separationRelease = None\n        self.separationDiff = None\n        self.separationOverTime = None\n        self.timeIntoGameRelease = None\n        self.timeIntoGameArrive = None\n\n        \n    def add_receiver_information(self, position, name, location, speed, orientation, distanceToBall):\n        self.receiverPos = position\n        self.receiverName = name\n        self.receiverArrivedLocation = location\n        self.receiverArrivedSpeed = speed\n        self.receiverArrivedOrientation = orientation\n        self.receiverToBall = distanceToBall\n    \n    def add_defender_information(self, nflId, position, name, location, separation, speed, orientation):\n        self.defender = nflId\n        self.defenderPos = position\n        self.defenderName = name\n        self.defenderArrivedLocation = location\n        self.separationAtArrival = separation\n        self.defenderArrivedSpeed = speed\n        self.defenderArrivedOrientation = orientation\n\n    def add_football_release_information(self, location, timestamp):\n        self.footballReleaseLocation = location\n        self.releaseTimestamp = timestamp\n        \n    def add_football_arrive_information(self, location, timestamp):\n        self.footballArriveLocation = location\n        self.arriveTimestamp = timestamp\n        \n    def add_pass_information(self, distance, targetReceiver):\n        self.distanceOfPass = distance\n        if (distance < 10):\n            self.passClassification = 1\n        elif (10 <= distance <= 20):\n            self.passClassification = 2\n        else: # > 20\n            self.passClassification = 3\n        self.targetReceiver = targetReceiver\n    \n    def add_game_time(self, timeIntoGameRelease, timeIntoGameArrive, timeElapsed):\n        self.timeIntoGameRelease = timeIntoGameRelease\n        self.timeIntoGameArrive = timeIntoGameArrive\n        self.timeElapsed = timeElapsed\n        \n    def add_event_information(self, events, outcome):\n        self.events = events\n        self.passOutcome = outcome\n        \n    def add_release_information(self, receiver, receiverSpeed, receiverOrientation, defender, defenderSpeed, defenderOrientation, distance):\n        self.receiverReleaseLocation = receiver\n        self.receiverReleaseSpeed = receiverSpeed\n        self.receiverReleaseOrientation = receiverOrientation\n        self.defenderReleaseLocation = defender\n        self.defenderReleaseSpeed = defenderSpeed\n        self.defenderReleaseOrientation = defenderOrientation\n        self.separationRelease = distance\n        \n    def add_separation_metrics(self, diffSeparation, separationOverTime):\n        self.separationDiff = diffSeparation\n        self.separationOverTime = separationOverTime","cbc519ec":"# Initalize class to use to import and clean data \nCreate = CreateNFLData()\n\n# Load data and reduce memory usage\nWeekData = Create.LoadData()\n\n# Merge play and game data into play by play data\nWeekGameData = Create.mergeGameData(WeekData)\n\n# Standardize play by play data\nFinaldf = Create.Standardize(WeekGameData)\n\n# Drop unneeded columns\ncleanedData = Finaldf.drop(columns=['x', 'y', 'o', 'jerseyNumber', 'yardlineSide', 'yardlineNumber', 'ToLeft'])\n\n#cleanedData.to_csv(\"finalDf.csv\")","af48c433":"# Get all play information for plays with pass_arrived or pass_forward events\nforward_passes = cleanedData.query('event == \"pass_forward\" or event == \"pass_arrived\"')\n\n# Define named tuple to use for storing plays\nPlayIdentifier = namedtuple(\"UniquePlay\", [\"game\", \"play\"])\n\n# Dictionary to map play identifier tuple to play class object\nplays = {}\n\n# Try to identify the football location and time at pass_release and pass_arrived for all plays \nfor index, row in forward_passes.iterrows():\n    gameId = row[\"gameId\"]\n    playId = row[\"playId\"]\n    \n    # Create play identifier tuple\n    p = PlayIdentifier(gameId, playId)\n        \n    currentPlay = plays.get(p)\n    \n    if (currentPlay == None):\n        currentPlay = play(gameId, playId)\n    \n    if (row[\"team\"] == 'football'):  \n        # Try to get football release position and time for pass_forward\n        if(row[\"event\"] == \"pass_forward\"):\n            currentPlay.add_football_release_information([row[\"X_std\"], row[\"Y_std\"]], row[\"time\"])\n        \n        # Try to get football arrival position and time for pass_arrived\n        elif(row[\"event\"] == \"pass_arrived\"):\n            currentPlay.add_football_arrive_information([row[\"X_std\"], row[\"Y_std\"]], row[\"time\"])\n    \n    plays[p] = currentPlay\n    \n# Import csv with target receiver for each play\ntargetedReciever = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021-bonus\/targetedReceiver.csv\")\n\n# Datetime format for play by play (UTC)\nfmt1 = '%Y-%m-%dT%H:%M:%S.%fZ' # 2018-10-12T00:25:17.099Z\n\n# Filter all plays to keep plays with release and arrive ball location and target receiver \nvalidPlays = {}\nfor p in plays.keys():\n    c = plays.get(p)\n    \n    # Check if we have a release location and arrive location for pass\n    if ((c.footballReleaseLocation is not None) and (c.footballArriveLocation is not None)):\n        #Get target receiver for current play\n        currentPlay = targetedReciever[(targetedReciever.gameId == c.gameId) & (targetedReciever.playId == c.playId)]\n        \n        #Confrim we have only one row = one target reciever\n        assert len(currentPlay.index) == 1\n        \n        receiver = currentPlay.iloc[0]['targetNflId']\n        \n        # Filter out plays where receiver is None\/undefined\n        if(math.isnan(receiver) == False):\n            # Calculate distance between football release location and arrive location (pass distance)\n            passDist = calcDistance(c.footballReleaseLocation, c.footballArriveLocation)\n            \n            # Add objects to current play class object\n            c.add_pass_information(passDist, receiver)\n            \n            # Add play to play dictionary\n            validPlays[p] = c \n\nassert(len(validPlays.keys()) == 14485)\n            \n# Dictionary for plays containing all needed information\nfinalPlays = {}\ncount = 0\n\nfmt2 = '%m\/%d\/%Y %H:%M:%S'# 12\/10\/2020 20:00:00\n\nfor p in validPlays.keys():\n    c = validPlays.get(p)\n    \n    currentPlayData = cleanedData[(cleanedData.gameId == c.gameId) & (cleanedData.playId == c.playId)]\n    \n    gameTime = currentPlayData.gameTimeEastern.unique()\n    assert (len(gameTime) == 1)\n    gameDate = currentPlayData.gameDate.unique()\n    assert (len(gameDate) == 1)\n    gameTime = gameTime[0]\n    gameDate = gameDate[0]\n    \n    eastUS = pytz.timezone('US\/Eastern')\n    timestampEastern = eastUS.localize(datetime.strptime(gameDate + \" \" + gameTime, fmt2))\n    timestampUTC = timestampEastern.astimezone(pytz.utc)  \n    \n    timeRelease = datetime.strptime(c.releaseTimestamp, fmt1).astimezone(pytz.utc)  \n    timeArrive = datetime.strptime(c.arriveTimestamp, fmt1).astimezone(pytz.utc)  \n    \n    timeIntoGameRelease = (timeRelease - timestampUTC).total_seconds()\n    timeIntoGameArrive = (timeArrive - timestampUTC).total_seconds()\n    \n    timeElapsed = (timeArrive - timeRelease).total_seconds()\n    \n    c.add_game_time(timeIntoGameRelease, timeIntoGameArrive, timeElapsed)\n    \n    passArrivedDataReceiver = currentPlayData[(currentPlayData.event == \"pass_arrived\") & (currentPlayData.OnOffense == True) & (currentPlayData.nflId == c.targetReceiver)]\n    if (len(passArrivedDataReceiver) != 1):\n        # No data on target reciever at pass_arrived\n        count+=1\n        continue\n    \n    passArrivedDataDefense = currentPlayData[(currentPlayData.event == \"pass_arrived\") & (currentPlayData.OnOffense == False)]\n    \n    passForwardData = currentPlayData[(currentPlayData.event == \"pass_forward\")]\n    \n    events = currentPlayData.event.unique()\n    outcome = list(filter(lambda k: 'pass_outcome' in k, events))\n    if (len(outcome) == 0):\n        # Exclude plays without a pass_outcome\n        count+=1\n        continue\n    \n    outcome = outcome[0]\n    \n    if (outcome == \"pass_outcome_touchdown\"):\n        outcome = \"pass_outcome_caught\"\n    \n    c.add_event_information(events, outcome)\n    \n    position = passArrivedDataReceiver.iloc[0][\"position\"]\n    name = passArrivedDataReceiver.iloc[0][\"displayName\"]\n    receiverArriveLocation = [passArrivedDataReceiver.iloc[0][\"X_std\"], passArrivedDataReceiver.iloc[0][\"Y_std\"]]\n    distReceiverToBall = calcDistance(c.footballArriveLocation, receiverArriveLocation)\n    \n    c.add_receiver_information(position, name, receiverArriveLocation, passArrivedDataReceiver.iloc[0][\"s\"], passArrivedDataReceiver.iloc[0][\"Orientation_std\"], distReceiverToBall)\n    \n    minDist = 120\n    defender = None\n    position = None\n    name = None\n    speed = None\n    orientation = None\n    location = [0, 0]\n    \n    for index, row in passArrivedDataDefense.iterrows():\n        if (row[\"displayName\"] != \"Football\"):\n            distanceToTarget = calcDistance(receiverArriveLocation, [row['X_std'], row['Y_std']])\n            \n            if(distanceToTarget < minDist):\n                minDist = distanceToTarget\n                defender = row['nflId']\n                position = row['position']\n                name = row['displayName']\n                speed = row[\"s\"]\n                orientation = row[\"Orientation_std\"]\n                location = [row['X_std'], row['Y_std']]\n    \n    c.add_defender_information(defender, position, name, location, minDist, speed, orientation )\n    \n    \n    defenderReleaseLocationData = passForwardData[passForwardData.nflId == defender]\n    if(len(defenderReleaseLocationData.index) == 0):\n        # No data on defender at time of pass_forward\n        count+=1\n        continue\n    \n    defenderReleaseLocation = [defenderReleaseLocationData.iloc[0]['X_std'], defenderReleaseLocationData.iloc[0]['Y_std']]\n\n    targetReleaseLocationData = passForwardData[passForwardData.nflId == c.targetReceiver]\n    if (len(targetReleaseLocationData.index) == 0):\n        # No data on target receiver at time of pass_forward\n        count+=1\n        continue\n    \n    targetReleaseLocation = [targetReleaseLocationData.iloc[0]['X_std'], targetReleaseLocationData.iloc[0]['Y_std']]\n    \n    separation = calcDistance(defenderReleaseLocation, targetReleaseLocation)   \n    \n    c.add_release_information(targetReleaseLocation, targetReleaseLocationData.iloc[0]['s'], targetReleaseLocationData.iloc[0]['Orientation_std'], defenderReleaseLocation, defenderReleaseLocationData.iloc[0]['s'], defenderReleaseLocationData.iloc[0]['Orientation_std'], separation)\n    \n    diffSeparation = c.separationRelease - c.separationAtArrival\n    if (c.timeElapsed < 0.5):\n        # exclude plays where time elapsed is less than half a second\n        count+=1\n        continue\n    \n    separationOverTime = diffSeparation \/ c.timeElapsed\n    \n    c.add_separation_metrics(diffSeparation, separationOverTime)\n      \n    finalPlays[p] = c\n\nassert (count == 635)\nassert (len(finalPlays.keys()) == 13850)\n\n# Create dataframe with calculated play information\nplayInformation = pd.DataFrame(columns=['gameId', 'playId', 'targetReceiver','receiverPos','receiverName','receiverArrivedLocation', 'receiverArrivedSpeed','receiverArrivedOrientation',\n                                        'receiverDistanceToBall','defender','defenderPos','defenderName','defenderArrivedLocation','defenderArrivedSpeed','defenderArrivedOrientation',\n                                        'separationAtArrival','footballReleaseLocation','releaseTimestamp','footballArriveLocation','arriveTimestamp','distanceOfPass',\n                                        'passClassification','timeElapsed','events','passOutcome','receiverReleaseLocation','receiverReleaseSpeed','receiverReleaseOrientation',\n                                        'defenderReleaseLocation','defenderReleaseSpeed','defenderReleaseOrientation','separationRelease','separationDiff', 'separationOverTime',\n                                        'timeIntoGameRelease','timeIntoGameArrive'])\n\nfor p in finalPlays.keys():\n    c = finalPlays.get(p)\n    playInformation = playInformation.append({'gameId': c.gameId, \n                                              'playId': c.playId, \n                                              'targetReceiver': c.targetReceiver, \n                                              'receiverPos': c.receiverPos, \n                                              'receiverName':c.receiverName, \n                                              'receiverArrivedLocation': c.receiverArrivedLocation, \n                                              'receiverArrivedSpeed': c.receiverArrivedSpeed, \n                                              'receiverArrivedOrientation': c.receiverArrivedOrientation,\n                                              'receiverDistanceToBall' : c.receiverToBall,\n                                              'defender': c.defender,\n                                              'defenderPos' : c.defenderPos, \n                                              'defenderName' : c.defenderName, \n                                              'defenderArrivedLocation' : c.defenderArrivedLocation, \n                                              'defenderArrivedSpeed': c.defenderArrivedSpeed, \n                                              'defenderArrivedOrientation' : c.defenderArrivedOrientation, \n                                              'separationAtArrival' : c.separationAtArrival,\n                                              'footballReleaseLocation' : c.footballReleaseLocation, \n                                              'releaseTimestamp' : c.releaseTimestamp, \n                                              'footballArriveLocation' : c.footballArriveLocation, \n                                              'arriveTimestamp' : c.arriveTimestamp, \n                                              'distanceOfPass' : c.distanceOfPass,\n                                              'passClassification' : c.passClassification,\n                                              'timeElapsed' : c.timeElapsed, \n                                              'events' : c.events, \n                                              'passOutcome' : c.passOutcome,\n                                              'receiverReleaseLocation' : c.receiverReleaseLocation, \n                                              'receiverReleaseSpeed' : c.receiverReleaseSpeed, \n                                              'receiverReleaseOrientation' : c.receiverReleaseOrientation, \n                                              'defenderReleaseLocation' : c.defenderReleaseLocation, \n                                              'defenderReleaseSpeed' : c.defenderReleaseSpeed, \n                                              'defenderReleaseOrientation' : c.defenderReleaseOrientation,\n                                              'separationRelease' : c.separationRelease, \n                                              'separationDiff' : c.separationDiff, \n                                              'separationOverTime' : c.separationOverTime, \n                                              'timeIntoGameRelease' : c.timeIntoGameRelease, \n                                              'timeIntoGameArrive': c.timeIntoGameArrive}, ignore_index=True)\n    \n#playInformation.head()\n#playInformation.to_csv(\"playAnalysis.csv\")\n\nplayInformation = playInformation.replace(\"pass_outcome_interception\", \"pass_outcome_incomplete\")\n\nplays = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/plays.csv\")\n\nplayInformation = playInformation.merge(plays, on=[\"gameId\", \"playId\"])","4348c1d0":"DBWRCoverage = playInformation[((playInformation.defenderPos == \"CB\") | (playInformation.defenderPos == \"DB\")) & (playInformation.receiverPos == \"WR\")]\n\ndistanceAtRelease = DBWRCoverage[[\"separationRelease\", \"defenderName\"]]\ndistanceAtArrival = DBWRCoverage[[\"separationAtArrival\", \"defenderName\"]]\n\ndf = DBWRCoverage.defenderName.value_counts().rename_axis('defenderName').reset_index(name='plays')\n\navgRelease = distanceAtRelease.groupby('defenderName', as_index=False)['separationRelease'].mean()\n\navgArrival = distanceAtArrival.groupby('defenderName', as_index=False)['separationAtArrival'].mean()\n\nfinalData = avgRelease.merge(avgArrival, on=\"defenderName\").sort_values(by=[\"separationRelease\"])\n\nfinalData = finalData.merge(df, on=\"defenderName\").sort_values(by=[\"separationAtArrival\"])\n\nfinalData = finalData[(finalData.plays > 30)].reset_index(drop=True)\n\nsubset = finalData[(finalData.separationAtArrival < 3.0) & (finalData.separationRelease < 3.0)]\n\ntop5Arrival = subset.head(5)\n\nplt.figure(1, figsize=(7,7))\nsns.scatterplot(data=subset, x='separationRelease', y='separationAtArrival', hue='defenderName', size='plays', sizes=(80,200))\nplt.legend(bbox_to_anchor=(1.1, 1),borderaxespad=0)\nplt.xlim(left=1.5, right=3.1)\nplt.ylim(bottom=1.5, top=3.1)\nplt.title('Separation At Pass Arrival vs. Release', fontsize=18)\nplt.xlabel('Separation At Pass Release (yards)', fontsize=15)\nplt.ylabel('Separation At Pass Arrival (yards)', fontsize=15)\nplt.show()","a8d35aeb":"# greatest decrease in separation\n\n#remove outlier\ndiffSeparation = DBWRCoverage[(DBWRCoverage.gameId != 2018120902) & (DBWRCoverage.playId != 2017)]\n\ndiffSeparation = diffSeparation[[\"separationDiff\", \"defenderName\"]]\n\ndiffSeparationAvg = diffSeparation.groupby('defenderName', as_index=False)['separationDiff'].mean()\ndiffSeparationAvg = diffSeparationAvg.sort_values(by=[\"separationDiff\"], ascending=False)\n\ndiffSeparationAvg = diffSeparationAvg.merge(df, on=[\"defenderName\"]).reset_index(drop=True)\ndiffSeparationAvg = diffSeparationAvg[(diffSeparationAvg.plays > 30)].reset_index(drop=True)\n\ntop5Separation = diffSeparationAvg.head(5)\n\nprint(top5Separation)\n\ndiffSeparationAvg.drop(columns = [\"plays\"]).plot(kind='box', subplots=True, layout=(1,1), sharex=False, sharey=False, figsize=(3,3), \n                                        title='Distribution of Average Separation Difference')\n\nplt.show()","045f7fe3":"top5Separation = top5Separation[['defenderName']]\n\ntop5Arrival = top5Arrival[['defenderName']]\n\narrival = DBWRCoverage.query(\"defenderName in @top5Arrival.defenderName\")\n\nseparation = DBWRCoverage.query(\"defenderName in @top5Separation.defenderName\")\n\nplt.figure(1)\nm, b = np.polyfit(arrival['timeIntoGameArrive'], arrival['epa'], 1)\n#add linear regression line to scatterplot \nplt.plot(arrival['timeIntoGameArrive'],[(m*x)+b for x in arrival['timeIntoGameArrive']], label='Top 5 Players by Lowest Average Separation')\n\nm, b = np.polyfit(separation['timeIntoGameArrive'], separation['epa'], 1)\n#add linear regression line to scatterplot \nplt.plot(separation['timeIntoGameArrive'],[(m*x)+b for x in separation['timeIntoGameArrive']], label='Top 5 Players by Greatest Difference in Separation')\nplt.legend(bbox_to_anchor=(1.5, 1),borderaxespad=0)\n\nplt.title('EPA vs. Game Time Elapsed', fontsize=16)\nplt.xlabel('Game Time Elapsed (seconds)', fontsize=12)\nplt.ylabel('EPA', fontsize=12)\n\nplt.show()\n\nplt.figure(2)\nm, b = np.polyfit(arrival['timeIntoGameArrive'], arrival['separationAtArrival'], 1)\n#add linear regression line to scatterplot \nplt.plot(arrival['timeIntoGameArrive'],[(m*x)+b for x in arrival['timeIntoGameArrive']], label='lowestSeparation')\n\nm, b = np.polyfit(separation['timeIntoGameArrive'], separation['separationAtArrival'], 1)\n#add linear regression line to scatterplot \nplt.plot(separation['timeIntoGameArrive'],[(m*x)+b for x in separation['timeIntoGameArrive']], label='greatestDiffSeparation')\nplt.legend(bbox_to_anchor=(1.5, 1),borderaxespad=0)\n\nplt.title('Separation at Arrival vs. Game Time Elapsed', fontsize=16)\nplt.xlabel('Game Time Elapsed (seconds)', fontsize=12)\nplt.ylabel('Avg Separation At Arrival (yards)', fontsize=12)\n\nplt.show()","8787c529":"Melvin = DBWRCoverage[(DBWRCoverage.defenderName == \"Rashaan Melvin\")]\nConley = DBWRCoverage[(DBWRCoverage.defenderName == \"Gareon Conley\")]\n\nm, b = np.polyfit(Melvin['timeIntoGameArrive'], Melvin['separationAtArrival'], 1) \nplt.plot(Melvin['timeIntoGameArrive'],[(m*x)+b for x in Melvin['timeIntoGameArrive']], label=\"Rashaan Melvin\")\n\nm, b = np.polyfit(Conley['timeIntoGameArrive'], Conley['separationAtArrival'], 1)\nplt.plot(Conley['timeIntoGameArrive'],[(m*x)+b for x in Conley['timeIntoGameArrive']], label=\"Gareon Conley\")\n\nplt.legend(bbox_to_anchor=(1.5, 1),borderaxespad=0)\nplt.ylim(bottom=0.0, top = 3.0)\nplt.title('Separation at Arrival vs. Game Time Elapsed', fontsize=15)\nplt.xlabel('Game Time Elapsed (seconds)', fontsize=12)\nplt.ylabel('Avg Separation At Arrival (yards)', fontsize=12)\n\nplt.show()\n\nm, b = np.polyfit(Melvin['timeIntoGameArrive'], Melvin['epa'], 1)\nplt.plot(Melvin['timeIntoGameArrive'],[(m*x)+b for x in Melvin['timeIntoGameArrive']], label=\"Rashaan Melvin\")\n\nm, b = np.polyfit(Conley['timeIntoGameArrive'], Conley['epa'], 1)\nplt.plot(Conley['timeIntoGameArrive'],[(m*x)+b for x in Conley['timeIntoGameArrive']], label=\"Gareon Conley\")\n\nplt.title('EPA vs. Game Time Elapsed', fontsize=15)\nplt.xlabel('Game Time Elapsed (seconds)', fontsize=12)\nplt.ylabel('EPA', fontsize=12)\nplt.legend(bbox_to_anchor=(1.5, 1),borderaxespad=0)\nplt.show()","0fdca984":"We begin our analysis of the effects of fatigue by looking at the trend of separation throughout the game and EPA throughout the game for the top 5 players in each category. EPA, Expected Points Added, measures the value of individual plays in terms of points, and is calculated as the difference in Expected Points (EP) of the down, distance, and field position at the start of the play and the end of the play. Therefore, defenders strive to decrease EPA throughout the play.\n\nAs you can see below, for the top 5 players by lowest average separation, average EPA increases by about 0.15 while average separation at arrival increases by 0.5 yards from the beginning to end of the game. However, for top 5 players by greatest average difference in separation, average EPA only increases slightly by about 0.01 while average separation at arrival decreases by about 0.3 yards from beginning to end of the game. From this we can conclude that for players that play a tighter coverage, fatigue sets in throughout the game causing looser coverage as the game progresses.","0068495f":"## 2. Analysis","2b738e34":"## 1. Data Wrangling\n\nPrior to analysis, the data was cleaned, standardized,and aggregated by play. For each play, the target receiver and closest defender were identified, along with their position, separation, speed, and orientation at the point of pass release and pass arrival.\n\nA few key notes:\n* Pass Classification: passes were classified by distance\n    * 1: distance < 10 yards\n    * 2: 10 yards <= distance <= 20 yards\n    * 3: distance > 20 yards\n    \n    \n* Difference in Separation = separationAtRelease - separationAtArrival\n    * Positive difference in separation: defender gained ground on the receiver\n    * Negative difference in separation: defender lost ground on the receiver\n    \n    \n* For the purpose of this analysis, we define cornerbacks as both \"CB\" and \"DB\". \n\n* Players with less than 30 plays were filtered out of the analysis.\n\n* Plays were filtered for all plays where a wide receiver was the target receiver and a cornerback was the closest defender.\n\n* For classification of pass_outcomes, pass_outcome_touchdown is included in pass_complete and pass_outcome_interception is included in pass_incomplete","4e746080":"### Cornerback is among the most critical positions on the defense, yet one of the most difficult to play due to the speed, technique, and quickness required to guard the best receivers in the league. According to the *New York Times* article, [How Offense Took Over the N.F.L.](https:\/\/www.nytimes.com\/2019\/01\/19\/sports\/nfl-offense-records.html), teams passed the football 47% of the time in 1980. However, in the past three years, teams have averaged around a 60% passing rate. With NFL offenses passing on more plays than ever, it is imperative for teams to have lockdown cornerbacks.","92a4c34f":"### Effects of Fatigue on the Top Players","182cc65a":"# The Effects of Fatigue on Defensive Coverage","29e19fa9":"![](https:\/\/nflmocks.com\/wp-content\/uploads\/imagn-images\/2017\/07\/15225265.jpeg)","e1d3877c":"### Lowest Average Separation At Pass Release and Arrival \nAs we can see from the scatter plot below, there are two players that fall into the bottom left corner with low averages in both separation at pass release and separation at pass arrival. William Jackson, cornerback for the Bengals, and Byron Jones, cornerback for the Cowboys, averaged the lowest separation at release and arrival meaning they are able to keep a close coverage to the receiver throughout the entire play. While both players have a lower average at pass arrival than at pass release, Jackson is consistently able to close over half a yard on average from a separation of 2.4 yards at release to 1.7 yards at arrival in addition to maintaining close coverage throughout the play. The top players in this category are great candidates for man coverage as they are able to maintain a tight degree of separation throughout the play. ","7bd57634":"Suppose you're a coach for the Raiders in 2018 and Gareon Conley is one of your starting cornerbacks. However, you recently acquired Rashaan Melvin in free agency. Gareon Conley ranks 3rd in lowest average separation at pass release and arrival, while Rashaan Melvin ranks 15th in greatest average difference in separation. As a coach, is there a time in the game when it's most effective to make the substitution?\n\nLet's look at pass coverage for passes over 20 yards. Though Conley starts the game with tighter coverage on average separation at pass arrival and a lower average EPA, as the game progresses, there comes a point where Melvin would be more effective as Conley's average separation at pass arrival increases and thus, average EPA increases. As a coach, it may be more effective to either make a substitution towards the end of the third quarter for a fresh Melvin or to have more rest for Conley earlier on in the game to keep his coverage tighter throughout the whole game. ","39d06964":"### Greatest Decrease in Average Separation from Pass Release to Arrival\n\nAs we can see from the box plot below, there are two players who are outliers in average greatest decrease in separation i.e. these two players can gain the most yards on average on the receiver from pass release to pass arrival. These players are Darryl Roberts, cornerback for the Jets, and Terrance Mitchell, cornerback for the Browns. Roberts and Mitchell are not the best cornerbacks in the league with pretty average player grades. However, this stat provides value into hustle - these players fight to stay with and gain ground on the wide receiver as the ball is in the air. Though Roberts and Mitchell rank 48 and 87 respectively in lowest average separation at pass release and arrival, these two players are strong personnel for zone-coverage due to their ability to quickly close on the receiver. ","54673d6d":"## 3. Future Directions\n\n**1. Effect of Player Load on Separation**\n\nWith the increase in availability of biometric data, many teams have begun tracking player load, a measurement of a player's work commonly calculated from acceleration data. The addition of player load data to play by play enables coaches and trainers to evaluate the effect of load on performance. With regard to cornerbacks, since we see a trend of an increase in separation as the game progresses, it is likely there is a point where player load effects the separation a cornerback is able to create or maintain. With this analysis, the coaching staff could make an informed decision on when to make a substitution or how to better manage the player's load to maintain a tight average of separation throughout the game. \n\n**2. Coverage Breakdown: Man vs. Zone**\n\nBreaking down the analysis of separation related to fatigue a step further, a cornerback's separation at arrival over time could be evaluated in a man coverage versus a zone coverage. With this analysis, a coach could better decide defensive coverage depending on defensive scheme, an opponent, or healthy personnel. Players with a strong closing speed, who can gain tightness in separation may be better suited for a zone coverage, while players who are able to maintain a tight degree of separation from pass release to arrival may be better suited for man coverage in the beginning of the game, but does that trend hold throughout the whole game?\n\n**3. Situational Breakdown**\n\nLastly, identifying trends in separation for players under certain situations may help identify effective personnel for certain game day situations. For example, in looking at end of game situations where the defense is winning in a one possession game, you may identify one cornerback who plays a tighter coverage than average to try to eliminate the pass to his receiver. On the other hand, what if a different cornerback plays a looser coverage than normal to be able to help out his teammates if needed. Which player do you go with? It may depend on the opponent, coaching staff, or other personnel on the field. However, with this information, coaches are informed on which player to choose in certain situations.","bcbef31c":"## Introduction\n\nThe most effective cornerbacks are able to create or maintain a tight separation between himself and the target receiver at the point of pass arrival. The tighter the degree of separation, the harder it will be for a receiver to catch the ball. \n\n**The goal of this analysis is to...**\n1. Identify cornerbacks who maintain the tightest separation throughout the play\n1. Identify cornerbacks who are able to create tight separation throughout the play\n1. Explore the impact of fatigue on separation for the cornerbacks in each category"}}