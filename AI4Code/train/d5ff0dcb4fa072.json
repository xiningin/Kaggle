{"cell_type":{"6058f579":"code","d8113c74":"code","c36d11bd":"code","1d797744":"code","e4ecf692":"code","3eb304e8":"code","6b037687":"code","c5e37aae":"code","42d7bf65":"code","931c2086":"code","a6b452f1":"markdown"},"source":{"6058f579":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime, timedelta\n\nfrom keras.layers import Dense, LSTM, Dropout\nfrom keras.models import Sequential\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d8113c74":"dataset = pd.read_csv('..\/input\/TS.csv')\ndataset.Date = pd.to_datetime(dataset.Date)\ndataset.set_index('Date')\ndataset.info()","c36d11bd":"def plot_dataset(x, y, second_color_index = 0, original_x = None, original_y = None):\n    years = mdates.YearLocator()   # every year\n    months = mdates.MonthLocator()  # every month\n    yearsFmt = mdates.DateFormatter('%Y-%m')\n    monthsFmt = mdates.DateFormatter('%m')\n\n    fig = plt.figure(figsize=(20,10))\n    ax = fig.add_subplot(111)\n    if (second_color_index == 0):\n        ax.plot(x, y)\n    else:\n        x1, y1 = x[:second_color_index], y[:second_color_index]\n        ax.plot(x1, y1, color='blue')\n        x2, y2 = x[second_color_index:], y[second_color_index:]\n        ax.plot(x2, y2, color='red')\n    \n    if (original_x is not None):\n        ax.plot(original_x, original_y, color='green')\n            \n    # format the ticks\n    ax.xaxis.set_major_locator(months)\n    ax.xaxis.set_major_formatter(yearsFmt)\n\n    # format the coords message box\n    ax.format_xdata = mdates.DateFormatter('%Y-%m-%d')\n    ax.grid(True)\n\n    # rotates and right aligns the x labels, and moves the bottom of the\n    # axes up to make room for them\n    fig.autofmt_xdate()\n    plt.show()\n    \nplot_dataset(dataset.Date, dataset.Price)","1d797744":"training_set = dataset.Price.values\ntraining_set = training_set.reshape(-1,1)\n\n# Feature Scaling\nsc = MinMaxScaler(feature_range = (0, 1))\ntraining_set_scaled = sc.fit_transform(training_set)\nprint(len(training_set_scaled))","e4ecf692":"# Creating a data structure with window_size timesteps and t+1 output\nwindow_size = 20\nn_features = 1\n\nX_train = []\ny_train = []\nfor i in range(window_size, len(training_set_scaled)):\n    X_train.append(training_set_scaled[i-window_size:i, 0])\n    y_train.append(training_set_scaled[i, 0])\n    \nX_train, y_train = np.array(X_train), np.array(y_train)\nprint(X_train.shape, y_train.shape)\n\n# Reshaping, making inputs ready for RNN\nX_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], n_features))\nprint(X_train.shape, y_train.shape)","3eb304e8":"# Create LSTM model\nmodel = Sequential()\nmodel.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], n_features)))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units = 50, return_sequences = True))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units = 50, return_sequences = True))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units = 50))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units = 1))\nmodel.compile(optimizer = 'adam', loss = 'mse', metrics=['acc'])\nhistory = model.fit(X_train, y_train, epochs = 800, batch_size = 32)","6b037687":"# plot history\nplt.plot(history.history['loss'], label='train loss')\n#plt.plot(history.history['val_loss'], label='test')\nplt.plot(history.history['acc'], label='train acc')\n#plt.plot(history.history['val_acc'], label='test')\n#plt.plot(history.history['mean_squared_error'], label='train mse')\n#plt.plot(history.history['val_mean_squared_error'], label='test')\nplt.title('Sales Amount Prediction')\nplt.xlabel('Time')\nplt.ylabel('Sales Amount')\nplt.legend()\nplt.show()","c5e37aae":"test_size = 60\n\ninputs = dataset.Price[len(dataset) - test_size - window_size:].values\ninputs = inputs.reshape(-1,1)\ninputs = sc.transform(inputs)\n\nX_test = []\nfor i in range(window_size, len(inputs)):\n    X_test.append(inputs[i-window_size:i, 0])\n\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], n_features))\npredicted_sales_amount = model.predict(X_test)\npredicted_sales_amount = sc.inverse_transform(predicted_sales_amount)\n#print(predicted_sales_amount.shape)\n\nlast_date = dataset.Date.iloc[-1];\ndataset_with_predictions = dataset.copy()\nfor i in range(0,len(predicted_sales_amount)):\n    next_date = last_date + timedelta(days=1)\n    dataset_with_predictions = dataset_with_predictions.append({'Date':next_date, 'Price':predicted_sales_amount[i][0]}, ignore_index=True)\n    last_date = next_date\n    \nprint(len(dataset_with_predictions))    \ndataset_with_predictions.tail()","42d7bf65":"prediction_start = len(dataset) - len(predicted_sales_amount)\nplot_dataset(dataset_with_predictions.Date, dataset_with_predictions.Price, prediction_start, dataset.Date, dataset.Price)","931c2086":"dt = pd.to_datetime('2018-03-01')\noriginal_set = dataset.copy()\noriginal_set.set_index('Date', inplace=True)\noriginal_y = original_set.loc['2018-03-01':]\n#original_y.head()\n\npredictde_set = dataset_with_predictions.copy()\npredictde_set.set_index('Date', inplace=True)\npredicted_y = predictde_set.loc['2018-03-01':'2018-04-30']\n#predicted_y.head()\n\n# calculate RMSE for intersection of dates\nrmse = np.sqrt(mean_squared_error(original_y.Price, predicted_y.Price))\nprint('Test RMSE: %.3f' % rmse)","a6b452f1":"##Making the predictions"}}