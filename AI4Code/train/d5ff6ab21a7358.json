{"cell_type":{"dd4fea04":"code","720a3b7f":"code","29ccbc14":"code","97481cae":"code","6ec4c45d":"code","4e26326d":"code","eda59504":"code","c4add697":"code","427706ec":"code","23b8dd10":"code","774f267b":"code","2013652b":"code","a48701ea":"code","1c534baf":"code","6aceadfb":"code","86331f1e":"code","b71df5bb":"code","1a16124a":"code","b46a9a0e":"code","0259a695":"code","1038ea1d":"code","5a9224c7":"code","a71753f7":"code","6a10fa53":"code","56ac22f0":"code","095cfcd2":"code","cc07f6a8":"code","e9c7dfef":"code","06ec7edb":"code","25ce2d24":"code","86b6a6b4":"code","1b12605e":"code","a7324583":"code","a2e8f96c":"code","89344458":"code","8eb68f12":"code","d7b3c780":"code","259c3169":"code","b4ec8143":"code","9fac8941":"code","24b49df5":"code","217dfdca":"code","cd44c9e8":"code","6fcc335c":"code","deb7c13a":"code","15a40492":"code","21df1f7f":"code","5c633445":"code","4ff9366e":"code","c331aaec":"code","86eaf690":"code","bf260200":"code","c680856a":"code","68412e7c":"code","2f95a288":"code","e51c3805":"code","7cf974c4":"code","5a9a3464":"code","e9f75436":"markdown","59a59640":"markdown","1aa6b3ba":"markdown","3c996c05":"markdown","525c110a":"markdown","52c5dd17":"markdown","c38d3bb7":"markdown","52b1108e":"markdown"},"source":{"dd4fea04":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport nltk\nimport seaborn as sns\nfrom wordcloud import WordCloud, STOPWORDS\nimport scikitplot as skplt\n\nfrom keras import callbacks\nfrom keras.layers import Bidirectional\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers import Embedding\nfrom keras.layers import LSTM\nfrom keras.models import Sequential\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\n\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.preprocessing.text import Tokenizer\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.set_option('display.max_columns', 20)\npd.set_option('display.max_rows', 10)\n\nplt.rc('figure', figsize=(10, 7))\n\nnum_epoch = 5","720a3b7f":"data = pd.read_csv('..\/input\/womens-ecommerce-clothing-reviews\/Womens Clothing E-Commerce Reviews.csv')\ndata.drop(columns=\"Unnamed: 0\", axis=1, inplace=True)\ndata","29ccbc14":"department_list = data['Department Name'].dropna().unique()\ndepartment_list = [x.lower() for x in department_list]\ndepartment_list","97481cae":"class_list = data['Class Name'].dropna().unique()\nclass_list = [x.lower() for x in class_list]\nclass_list","6ec4c45d":"department_and_class = np.concatenate((department_list, class_list, ['dress', 'petite', 'petit', 'skirt', 'shirt', 'jacket', 'intimate', 'blouse', 'coat', 'sweater']), axis=0)\ndepartment_and_class","4e26326d":"review_data = data[['Review Text','Recommended IND']]\nreview_data","eda59504":"review_data.isnull().sum().sort_values()","c4add697":"review_data.dropna(axis=0,inplace=True)","427706ec":"review_data","23b8dd10":"#import for test train split and vect\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\ndef tfidf(data):\n    tfidf_vectorizer =TfidfVectorizer(min_df=3,  max_features=None, \n             analyzer='word', use_idf=1,smooth_idf=1,sublinear_tf=1,\n            stop_words = 'english')\n\n\n    train = tfidf_vectorizer.fit_transform(data)\n\n    return train, tfidf_vectorizer","774f267b":"from sklearn.decomposition import  TruncatedSVD\nimport matplotlib\nimport matplotlib.patches as mpatches\n\n\ndef plot_LSA(test_data, test_labels):\n        #reduce into 2 dimensions using svd \n        lsa = TruncatedSVD(n_components=2)\n        #fits to the train data\n        lsa.fit(test_data)\n        lsa_scores = lsa.transform(test_data)\n        color_mapper = {label:idx for idx,label in enumerate(set(test_labels))}\n        color_column = [color_mapper[label] for label in test_labels]\n        colors = ['orange','blue','blue']\n        if plt:\n            plt.scatter(lsa_scores[:,0], lsa_scores[:,1], s=8, alpha=.8, c=test_labels, cmap=matplotlib.colors.ListedColormap(colors))\n            red_patch = mpatches.Patch(color='orange', label='Recommended IND = 0')\n            blue_patch = mpatches.Patch(color='blue', label='Recommended IND = 1')\n            plt.legend(handles=[red_patch, blue_patch], prop={'size': 12})","2013652b":"X = review_data[\"Review Text\"]\ny = review_data[\"Recommended IND\"]\n\n# Create sequence\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(review_data['Review Text'])\nvocabulary_size = len(tokenizer.word_index) + 1\nprint(vocabulary_size)\n\n# \u9650\u5236\u6700\u957f\u957f\u5ea6\u4e3a70\uff0c\u8fc7\u957f\u622a\u65ad\uff0c\u8fc7\u77ed\u5c31\u5728\u540e\u65b9\uff08post\uff09\u8865\u9f50\nmax_length = 70\n\nsequences = tokenizer.texts_to_sequences(X)\nfeatures = pad_sequences(sequences, maxlen=max_length, padding='post')","a48701ea":"from string import punctuation\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nimport re\n\n# if you don't have stopwords and have some error, please use the download code bollow!\n# nltk.download('stopwords')\nstop_words = set(stopwords.words('english'))\n### Text Normalizing function. Part of the following function was taken from this link. \ndef clean_text(text):\n    \n    ## Remove puncuation\n    text = text.translate(punctuation)\n    \n    ## Convert words to lower case and split them\n    text = text.lower().split()\n    \n    ## Remove stop words\n    text = [w for w in text if not w in stop_words]\n    \n    text = \" \".join(text)\n    ## Clean the text\n    text = re.sub(r\"[^A-Za-z0-9^,!.\\\/'+-=]\", \" \", text)\n    text = re.sub(r\"what's\", \"what is \", text)\n    text = re.sub(r\"\\'s\", \" \", text)\n    text = re.sub(r\"\\'ve\", \" have \", text)\n    text = re.sub(r\"n't\", \" not \", text)\n    text = re.sub(r\"i'm\", \"i am \", text)\n    text = re.sub(r\"\\'re\", \" are \", text)\n    text = re.sub(r\"\\'d\", \" would \", text)\n    text = re.sub(r\"\\'ll\", \" will \", text)\n    text = re.sub(r\",\", \" \", text)\n    text = re.sub(r\"\\.\", \" \", text)\n    text = re.sub(r\"!\", \" ! \", text)\n    text = re.sub(r\"\\\/\", \" \", text)\n    text = re.sub(r\"\\^\", \" ^ \", text)\n    text = re.sub(r\"\\+\", \" + \", text)\n    text = re.sub(r\"\\-\", \" - \", text)\n    text = re.sub(r\"\\=\", \" = \", text)\n    text = re.sub(r\"'\", \" \", text)\n    text = re.sub(r\"(\\d+)(k)\", r\"\\g<1>000\", text)\n    text = re.sub(r\":\", \" : \", text)\n    text = re.sub(r\" e g \", \" eg \", text)\n    text = re.sub(r\" b g \", \" bg \", text)\n#     text = re.sub(r\" u s \", \" american \", text)\n    text = re.sub(r\"\\0s\", \"0\", text)\n    text = re.sub(r\" 9 11 \", \"911\", text)\n    text = re.sub(r\"e - mail\", \"email\", text)\n    text = re.sub(r\"j k\", \"jk\", text)\n    text = re.sub(r\"\\s{2,}\", \" \", text)\n    ## Stemming\n    text = text.split()\n    stemmer = PorterStemmer()\n    stemmed_words = [stemmer.stem(word) for word in text]\n    text = \" \".join(stemmed_words)\n    return text","1c534baf":"review_data['Review Text'] = review_data['Review Text'].map(lambda x: clean_text(x))","6aceadfb":"review_data","86331f1e":"from keras.utils import to_categorical\n\nX = review_data[\"Review Text\"]\ny = review_data[\"Recommended IND\"]\n\n# Create sequence\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(review_data['Review Text'])\nvocabulary_size = len(tokenizer.word_index) + 1\nprint(vocabulary_size)","b71df5bb":"sequences = tokenizer.texts_to_sequences(review_data['Review Text'])\nnp.max([len(x) for x in sequences])","1a16124a":"# \u9650\u5236\u6700\u957f\u957f\u5ea6\u4e3a70\uff0c\u8fc7\u957f\u622a\u65ad\uff0c\u8fc7\u77ed\u5c31\u5728\u540e\u65b9\uff08post\uff09\u8865\u9f50\nmax_length = 70\npadded_features = pad_sequences(sequences, maxlen=max_length, padding='post')","b46a9a0e":"plot_LSA(padded_features, y)\nplt.show()","0259a695":"from scipy import interp\nimport matplotlib.pyplot as plt\nfrom itertools import cycle\nfrom sklearn.metrics import roc_curve, auc\n\ndef plot_roc(n_classes, y_test, y_score, title, class_name_list):\n    # Plot linewidth.\n    lw = 2\n\n    y_test = sentiment_test[1]\n    y_score = test_score\n    # Compute ROC curve and ROC area for each class\n    fpr = dict()\n    tpr = dict()\n    roc_auc = dict()\n    for i in range(n_classes):\n        fpr[i], tpr[i], _ = roc_curve(y_test[:, i], y_score[:, i])\n        roc_auc[i] = auc(fpr[i], tpr[i])\n\n    # Compute micro-average ROC curve and ROC area\n    fpr[\"micro\"], tpr[\"micro\"], _ = roc_curve(y_test.ravel(), y_score.ravel())\n    roc_auc[\"micro\"] = auc(fpr[\"micro\"], tpr[\"micro\"])\n\n    # Compute macro-average ROC curve and ROC area\n\n    # First aggregate all false positive rates\n    all_fpr = np.unique(np.concatenate([fpr[i] for i in range(n_classes)]))\n\n    # Then interpolate all ROC curves at this points\n    mean_tpr = np.zeros_like(all_fpr)\n    for i in range(n_classes):\n        mean_tpr += interp(all_fpr, fpr[i], tpr[i])\n\n    # Finally average it and compute AUC\n    mean_tpr \/= n_classes\n\n    fpr[\"macro\"] = all_fpr\n    tpr[\"macro\"] = mean_tpr\n    roc_auc[\"macro\"] = auc(fpr[\"macro\"], tpr[\"macro\"])\n\n    # Plot all ROC curves\n    plt.figure(1)\n    plt.plot(fpr[\"micro\"], tpr[\"micro\"],\n             label='micro-average ROC curve (area = {0:0.2f})'\n                   ''.format(roc_auc[\"micro\"]),\n             color='deeppink', linestyle=':', linewidth=4)\n\n    plt.plot(fpr[\"macro\"], tpr[\"macro\"],\n             label='macro-average ROC curve (area = {0:0.2f})'\n                   ''.format(roc_auc[\"macro\"]),\n             color='navy', linestyle=':', linewidth=4)\n\n    colors = cycle(['aqua', 'darkorange', 'cornflowerblue'])\n    for i, color in zip(range(n_classes), colors):\n        plt.plot(fpr[i], tpr[i], color=color, lw=lw,\n                 label='ROC curve of class {0} (area = {1:0.2f})'\n                 ''.format(class_name_list[i], roc_auc[i]))\n\n    plt.plot([0, 1], [0, 1], 'k--', lw=lw)\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title(title)\n    plt.legend(loc=\"lower right\")\n    plt.show()","1038ea1d":"from sklearn import model_selection\n\nX_train, X_val, y_train, y_val = model_selection.train_test_split(review_data['Review Text'], review_data['Recommended IND'], test_size=0.2, random_state=666)\nX_test, X_val, y_test, y_val = model_selection.train_test_split(X_val, y_val, test_size=0.5, random_state=888)","5a9224c7":"print(len(X_train))\nprint(len(X_val))\nprint(len(X_test))","a71753f7":"from imblearn.over_sampling import RandomOverSampler\nfrom imblearn.under_sampling import RandomUnderSampler\n\nrus = RandomUnderSampler()\nros = RandomOverSampler()","6a10fa53":"X_over, X_cat, y_over, y_cat = model_selection.train_test_split(X_train, y_train, test_size=0.2, random_state=888)\nX_over, X_under, y_over, y_under = model_selection.train_test_split(X_over, y_over, test_size=0.75, random_state=888)","56ac22f0":"print(X_under.shape, X_over.shape, y_under.shape, y_over.shape, X_cat.shape, y_cat.shape)","095cfcd2":"ros_sequences = tokenizer.texts_to_sequences(X_over)\nros_features = pad_sequences(ros_sequences, maxlen=max_length, padding='post')\ntrain_X_ros, train_y_ros = ros.fit_sample(ros_features, y_over)","cc07f6a8":"print(train_X_ros.shape, train_y_ros.shape)\ntrain_y_ros.value_counts()","e9c7dfef":"rus_sequences = tokenizer.texts_to_sequences(X_under)\nrus_features = pad_sequences(rus_sequences, maxlen=max_length, padding='post')\ntrain_X_rus, train_y_rus = rus.fit_sample(rus_features, y_under)","06ec7edb":"print(train_X_rus.shape, train_y_rus.shape)\ntrain_y_rus.value_counts()","25ce2d24":"print(X_cat.shape, y_cat.shape)\ny_cat.value_counts()","86b6a6b4":"y_cat.value_counts()","1b12605e":"cat_0_idx = y_cat[y_cat == 0]\ncat_0_idx = list(cat_0_idx.keys())\ncat_1_idx = y_cat[y_cat == 1]\ncat_1_idx = list(cat_1_idx.keys())","a7324583":"X_cat_0 = X_cat[cat_0_idx]\nX_cat_1 = X_cat[cat_1_idx]","a2e8f96c":"count_0 = len(cat_0_idx)","89344458":"import random\nnew_X_0 = []\nfor idx in cat_0_idx:\n    cur = X_cat_0[idx]\n    p = random.randint(0, 1)\n    cur_idx = len(cur) \/\/ 2\n    cur = cur[:cur_idx] if p == 0 else cur[cur_idx:]\n    new_X_0.append(cur)\nnew_X_0.extend(list(X_cat_0.values))\n\nnew_X_1 = []\nfor idx in cat_1_idx:\n    cur = X_cat_1[idx]\n    p = random.randint(0, 1)\n    cur_idx = len(cur) \/\/ 2\n    cur = cur[:cur_idx] if p == 0 else cur[cur_idx:]\n    new_X_1.append(cur)\nnew_X_1 = random.sample(new_X_1, count_0)\nnew_X_1.extend(random.sample(list(X_cat_1.values), count_0))","8eb68f12":"print(len(new_X_0))\nprint(len(new_X_1))","d7b3c780":"len(new_X_0 + new_X_1)","259c3169":"X_cat = pd.Series(new_X_0 + new_X_1)\ny_cat = pd.Series([0] * count_0 * 2 + [1] * count_0 * 2)","b4ec8143":"cat_sequences = tokenizer.texts_to_sequences(X_cat)\ncat_features = pad_sequences(cat_sequences, maxlen=max_length, padding='post')","9fac8941":"cat_features.shape","24b49df5":"cat_features","217dfdca":"train_X_rus","cd44c9e8":"train_X_ros","6fcc335c":"features_all = np.concatenate((cat_features, train_X_rus, train_X_ros))","deb7c13a":"features_all.shape","15a40492":"y_all = y_cat.append(train_y_rus).append(train_y_ros)","21df1f7f":"labels_all = to_categorical(y_all)\nlabels_all[0]\nprint(labels_all.shape)","5c633445":"plot_LSA(features_all, y_all)\nplt.show()","4ff9366e":"val_sequences = tokenizer.texts_to_sequences(X_val)\nval_features = pad_sequences(val_sequences, maxlen=max_length, padding='post')\nval_labels = to_categorical(y_val)\nprint(val_features.shape, val_labels.shape)\n\ntest_sequences = tokenizer.texts_to_sequences(X_test)\ntest_features = pad_sequences(test_sequences, maxlen=max_length, padding='post')\ntest_labels = to_categorical(y_test)\nprint(test_features.shape, test_labels.shape)","c331aaec":"model = Sequential()\n\ne = Embedding(vocabulary_size, 100, input_length=max_length, trainable=True)\nmodel.add(e)\nmodel.add(Bidirectional(LSTM(128, dropout=0.5, return_sequences=True)))\nmodel.add(Bidirectional(LSTM(256, dropout=0.5)))\nmodel.add(Dense(2, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nmodel.fit(features_all, labels_all, epochs=num_epoch, batch_size=256, verbose=1,\n          validation_data=(val_features, val_labels), shuffle=True)\n\nscore = model.evaluate(test_features, test_labels, verbose=1)\n\nprint('loss : {}, acc : {}'.format(score[0], score[1]))","86eaf690":"test_score = model.predict(test_features)\ntest_predictions = np.argmax(test_score, axis=1)\n\nclass_names = ['(0) Not recommended class', '(1) Recommended class']\nreport = classification_report(np.argmax(test_labels, axis=1), test_predictions, target_names=class_names)\nmatrix = pd.DataFrame(confusion_matrix(y_true=np.argmax(test_labels, axis=1), y_pred=test_predictions), \n                                        index=class_names, columns=class_names)\nprint(matrix)\nprint(report)\nf1_score(np.argmax(test_labels, axis=1), test_predictions, average='micro')   ","bf260200":"skplt.metrics.plot_roc(np.argmax(test_labels, axis=1), model.predict_proba(test_features),\n                      title='ROC Curves - hyper') ","c680856a":"model = Sequential()\n\nclass_weight = {0: 5, 1: 1}\ne = Embedding(vocabulary_size, 100, input_length=max_length, trainable=True)\nmodel.add(e)\nmodel.add(Bidirectional(LSTM(128, dropout=0.5, return_sequences=True)))\nmodel.add(Bidirectional(LSTM(256, dropout=0.5)))\nmodel.add(Dense(2, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nmodel.fit(features_all, labels_all, epochs=num_epoch, batch_size=256, verbose=1,\n          validation_data=(val_features, val_labels), shuffle=True, class_weight=class_weight)\n\nscore = model.evaluate(test_features, test_labels, verbose=1)\n\nprint('loss : {}, acc : {}'.format(score[0], score[1]))\n\n","68412e7c":"test_score = model.predict(test_features)\ntest_predictions = np.argmax(test_score, axis=1)\n\nclass_names = ['(0) Not recommended class', '(1) Recommended class']\nreport = classification_report(np.argmax(test_labels, axis=1), test_predictions, target_names=class_names)\nmatrix = pd.DataFrame(confusion_matrix(y_true=np.argmax(test_labels, axis=1), y_pred=test_predictions), \n                                        index=class_names, columns=class_names)\nprint(matrix)\nprint(report)\nf1_score(np.argmax(test_labels, axis=1), test_predictions, average='micro')   ","2f95a288":"skplt.metrics.plot_roc(np.argmax(test_labels, axis=1), model.predict_proba(test_features),\n                      title='ROC Curves - hyper') ","e51c3805":"model = Sequential()\n\nclass_weight = {0: 10, 1: 1}\ne = Embedding(vocabulary_size, 100, input_length=max_length, trainable=True)\nmodel.add(e)\nmodel.add(Bidirectional(LSTM(128, dropout=0.5, return_sequences=True)))\nmodel.add(Bidirectional(LSTM(256, dropout=0.5)))\nmodel.add(Dense(2, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nmodel.fit(features_all, labels_all, epochs=num_epoch, batch_size=256, verbose=1,\n          validation_data=(val_features, val_labels), shuffle=True, class_weight=class_weight)\n\nscore = model.evaluate(test_features, test_labels, verbose=1)\n\nprint('loss : {}, acc : {}'.format(score[0], score[1]))\n\n","7cf974c4":"test_score = model.predict(test_features)\ntest_predictions = np.argmax(test_score, axis=1)\n\nclass_names = ['(0) Not recommended class', '(1) Recommended class']\nreport = classification_report(np.argmax(test_labels, axis=1), test_predictions, target_names=class_names)\nmatrix = pd.DataFrame(confusion_matrix(y_true=np.argmax(test_labels, axis=1), y_pred=test_predictions), \n                                        index=class_names, columns=class_names)\nprint(matrix)\nprint(report)\nf1_score(np.argmax(test_labels, axis=1), test_predictions, average='micro')   ","5a9a3464":"skplt.metrics.plot_roc(np.argmax(test_labels, axis=1), model.predict_proba(test_features),\n                      title='ROC Curves - hyper') ","e9f75436":"# Recommended IND Classification","59a59640":"\u5f31\u667a\u7b97\u6cd51\uff1a0.4undersampling\uff0c0.4oversamplling\uff0c0.2\u662f\u53d6\u968f\u673a\u53d6\u53e5\u5b50\u7684\u524d\u534a\u53e5\u6216\u8005\u540e\u534a\u53e5\u751f\u6210\u65b0\u7684\u6570\u636e\u3002\u8fd9\u6837\u7684\u7406\u7531\u662f\uff0c\u6709\u90e8\u5206\u7528\u6237\u4f1a\u5728\u8bc4\u8bba\u4e00\u5f00\u59cb\u6216\u8005\u6700\u540e\u9762\u5f3a\u70c8\u8868\u8fbe\u81ea\u5df1\u7684\u60c5\u611f\u3002\u6240\u4ee5\u4f7f\u7528\u8fd9\u6837\u7684\u65b9\u5f0f\u6765\u505a\u6570\u636e\u589e\u5f3a\u6709\u5229\u4e8e\u5206\u7c7b\u3002","1aa6b3ba":"\u867d\u7136\u597d\u8bc4\u7684recall\u548c\u5dee\u8bc4\u7684prec\u90fd\u4e0b\u964d\u4e86\uff0c\u597d\u8bc4\u7684prec\u548c\u5dee\u8bc4\u7684recall\u90fd\u5f88\u9ad8\uff0c\u4f46\u662f\u6211\u89c9\u5f97\u662f\u5408\u7406\u7684\uff1a\u5982\u679c\u8981\u505a\u8bc4\u8bba\u7cbe\u9009\uff0c\u6bd4\u5982\u628a\u597d\u8bc4\u653e\u5728\u524d\u9762\uff0c\u90a3\u4e48\u597d\u8bc4prec\u9ad8\u662f\u5408\u7406\u7684\uff0c\u8bf4\u660e\u7ed9\u7528\u6237\u770b\u7684\u8bc4\u8bba\u57fa\u672c\u90fd\u662f\u597d\u8bc4\uff1b\u5982\u679c\u5e97\u5bb6\u60f3\u770b\u8206\u60c5\u5206\u6790\uff0c\u5c31\u662f\u60f3\u770b\u81ea\u5df1\u5e97\u94fa\u7684\u5dee\u8bc4\uff0c\u90a3\u4e48\u5dee\u8bc4recall\u9ad8\u662f\u5408\u7406\u7684\uff0c\u8bf4\u660e\u6b64\u65f6\u7ed9\u5e97\u5bb6\u770b\u7684\u5dee\u8bc4\u57fa\u672c\u90fd\u627e\u51fa\u6765\u4e86\u3002\n\u540e\u671f\u4e0d\u77e5\u9053\u591a\u8bad\u7ec3\u591a\u51e0\u6b21\uff0c\u8fd8\u6709\u8c03\u6574\u4e09\u79cdresample\u65b9\u5f0f\u7684\u6bd4\u91cd\uff0c\u4e0d\u77e5\u9053\u6548\u679c\u5982\u4f55\u3002","3c996c05":"Tokenizer\u662f\u4e00\u4e2a\u7528\u4e8e\u5411\u91cf\u5316\u6587\u672c\uff0c\u6216\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u5e8f\u5217\uff08\u5373\u5355\u8bcd\u5728\u5b57\u5178\u4e2d\u7684\u4e0b\u6807\u6784\u6210\u7684\u5217\u8868\uff0c\u4ece1\u7b97\u8d77\uff09\u7684\u7c7b\u3002\n\nword_index: \u5b57\u5178\uff0c\u5c06\u5355\u8bcd\uff08\u5b57\u7b26\u4e32\uff09\u6620\u5c04\u4e3a\u5b83\u4eec\u7684\u6392\u540d\u6216\u8005\u7d22\u5f15\u3002\u4ec5\u5728\u8c03\u7528fit_on_texts\u4e4b\u540e\u8bbe\u7f6e\u3002\n\ntexts_to_sequences(texts)\n\ntexts\uff1a\u5f85\u8f6c\u4e3a\u5e8f\u5217\u7684\u6587\u672c\u5217\u8868\n\n\u8fd4\u56de\u503c\uff1a\u5e8f\u5217\u7684\u5217\u8868\uff0c\u5217\u8868\u4e2d\u6bcf\u4e2a\u5e8f\u5217\u5bf9\u5e94\u4e8e\u4e00\u6bb5\u8f93\u5165\u6587\u672c\n\npad_sequences \u5c06\u591a\u4e2a\u5e8f\u5217\u622a\u65ad\u6216\u8865\u9f50\u4e3a\u76f8\u540c\u957f\u5ea6\u3002\n\n\u8be5\u51fd\u6570\u5c06\u4e00\u4e2a num_samples \u7684\u5e8f\u5217\uff08\u6574\u6570\u5217\u8868\uff09\u8f6c\u5316\u4e3a\u4e00\u4e2a 2D Numpy \u77e9\u9635\uff0c\u5176\u5c3a\u5bf8\u4e3a (num_samples, num_timesteps)\u3002 num_timesteps \u8981\u4e48\u662f\u7ed9\u5b9a\u7684 maxlen \u53c2\u6570\uff0c\u8981\u4e48\u662f\u6700\u957f\u5e8f\u5217\u7684\u957f\u5ea6\u3002\n\n\u6bd4 num_timesteps \u77ed\u7684\u5e8f\u5217\u5c06\u5728\u672b\u7aef\u4ee5 value \u503c\u8865\u9f50\u3002\n\n\u6bd4 num_timesteps \u957f\u7684\u5e8f\u5217\u5c06\u4f1a\u88ab\u622a\u65ad\u4ee5\u6ee1\u8db3\u6240\u9700\u8981\u7684\u957f\u5ea6\u3002\u8865\u9f50\u6216\u622a\u65ad\u53d1\u751f\u7684\u4f4d\u7f6e\u5206\u522b\u7531\u53c2\u6570 pading \u548c truncating \u51b3\u5b9a\u3002\n\n\u5411\u524d\u8865\u9f50\u4e3a\u9ed8\u8ba4\u64cd\u4f5c\u3002","525c110a":"# Data Structure","52c5dd17":"# Basic Visualization","c38d3bb7":"# Reference\n1. https:\/\/medium.com\/@sabber\/classifying-yelp-review-comments-using-lstm-and-word-embeddings-part-1-eb2275e4066b\n2. https:\/\/www.kaggle.com\/rajmehra03\/a-detailed-explanation-of-keras-embedding-layer\n3. https:\/\/machinelearningmastery.com\/develop-bidirectional-lstm-sequence-classification-python-keras\/","52b1108e":"# Review Text Feature Transformation"}}