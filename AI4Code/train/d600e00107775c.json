{"cell_type":{"19d79d06":"code","a1d2153b":"code","507ac6c3":"code","3b5f436e":"code","756eaf04":"code","d598df65":"code","37b87a7b":"code","d1c51cd3":"code","64346aa1":"code","569ae4d3":"code","ba8edde7":"code","144628e7":"code","2062c009":"code","a0b47603":"code","d61fa9ce":"code","564c5f17":"code","58c52e48":"code","7c9aa7ec":"markdown","5d6f66c7":"markdown","e332b41e":"markdown","1095b913":"markdown","8e4a897c":"markdown","61a116ec":"markdown","35193f44":"markdown","4a90f2fe":"markdown"},"source":{"19d79d06":"from keras.preprocessing.image import load_img, ImageDataGenerator\nfrom keras.layers import Conv2D, Dense, MaxPooling2D, Activation, Dropout, Flatten\nfrom keras.models import Sequential\nfrom keras.layers.normalization import BatchNormalization\nfrom glob import glob\nfrom random import shuffle\n\nimport numpy as np\nimport pandas as pd\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\n\nprint(os.listdir(\"..\/input\"))\nprint(os.listdir(\"..\/input\/chest_xray\/chest_xray\/\"))","a1d2153b":"path_to_data = \"..\/input\/chest_xray\/chest_xray\/\"","507ac6c3":"img_normal_path = path_to_data + \"train\/NORMAL\/NORMAL2-IM-0927-0001.jpeg\"\nimg_normal = load_img(img_normal_path)\nprint(\"Normal Image\")\nplt.imshow(img_normal)\nplt.show()","3b5f436e":"img_other_path = path_to_data + \"train\/PNEUMONIA\/person478_virus_975.jpeg\"\nimg_other = load_img(img_other_path)\nprint(\"PNEUMONIA Image\")\nplt.imshow(img_other)\nplt.show()","756eaf04":"img_width, img_height = 128, 128\nbatch_size = 16\nepochs = 10","d598df65":"source_images = []\nfor key in os.listdir(os.path.join(path_to_data, \"train\", \"NORMAL\")):\n    if not \"DS_Store\" in key:\n        source_images.append(os.path.join(path_to_data, \"train\", \"NORMAL\", key))\nfor key in os.listdir(os.path.join(path_to_data, \"train\", \"PNEUMONIA\")):\n    if not \"DS_Store\" in key:\n        source_images.append(os.path.join(path_to_data, \"train\", \"PNEUMONIA\", key))\nshuffle(source_images)\nprint(len(source_images))","37b87a7b":"valid_images = []\nfor key in os.listdir(os.path.join(path_to_data, \"val\", \"NORMAL\")):\n    if not \"DS_Store\" in key:\n        valid_images.append(os.path.join(path_to_data, \"val\", \"NORMAL\", key))\nfor key in os.listdir(os.path.join(path_to_data, \"val\", \"PNEUMONIA\")):\n    if not \"DS_Store\" in key:\n        valid_images.append(os.path.join(path_to_data, \"val\", \"PNEUMONIA\", key))\nshuffle(valid_images)\nprint(len(valid_images))","d1c51cd3":"test_images = []\nfor key in os.listdir(os.path.join(path_to_data, \"test\", \"NORMAL\")):\n    test_images.append(os.path.join(path_to_data, \"test\", \"NORMAL\", key))\nfor key in os.listdir(os.path.join(path_to_data, \"test\", \"PNEUMONIA\")):\n    test_images.append(os.path.join(path_to_data, \"test\", \"PNEUMONIA\", key))\nshuffle(test_images)\nprint(len(test_images))","64346aa1":"# Getting number of training, validation and test samples\nnb_train_samples = len(source_images)\nnb_test_samples = len(test_images)\nnb_valid_samples = len(valid_images)\n\nprint(\"Training samples: \" + str(nb_train_samples))\nprint(\"Validation samples: \" + str(nb_valid_samples))\nprint(\"Testing samples: \" + str(nb_test_samples))","569ae4d3":"model = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), input_shape= (img_width, img_height, 3), name=\"conv1\"))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(32, (3, 3), name=\"conv2\"))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(64, (3, 3), name=\"conv3\"))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(64, (3, 3), name=\"conv4\"))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(128))\nmodel.add(Dropout(0.5))\nmodel.add(Activation(\"relu\"))\n\nmodel.add(Dense(64))\nmodel.add(Dropout(0.5))\nmodel.add(Activation(\"relu\"))\n\nmodel.add(Dense(1))\nmodel.add(Activation(\"sigmoid\"))\n\nmodel.summary()","ba8edde7":"model.compile(loss=\"binary_crossentropy\", optimizer=\"rmsprop\", metrics=[\"accuracy\"])","144628e7":"def train_generator():\n    while True:\n        for start in range(0, nb_train_samples, batch_size):\n            x_batch = []\n            y_batch = []\n            \n            end = min(start + batch_size, nb_train_samples)\n            for img_path in range(start, end):\n                img = cv2.imread(source_images[img_path])\n                img = cv2.resize(img, (img_width, img_height))\n                x_batch.append(img)\n                if \"NORMAL\" in source_images[img_path]:\n                    y_batch.append([\"0\"])\n                elif \"PNEUMONIA\" in source_images[img_path]:\n                    y_batch.append([\"1\"])\n            \n            yield (np.array(x_batch), np.array(y_batch))\n            \n            ","2062c009":"def valid_generator():\n    while True:\n        for start in range(0, nb_valid_samples, batch_size):\n            x_batch = []\n            y_batch = []\n            \n            end = min(start + batch_size, nb_valid_samples)\n            for img_path in range(start, end):\n                img = cv2.imread(valid_images[img_path])\n                img = cv2.resize(img, (img_width, img_height))\n                x_batch.append(img)\n                if \"NORMAL\" in valid_images[img_path]:\n                    y_batch.append([\"0\"])\n                elif \"PNEUMONIA\" in valid_images[img_path]:\n                    y_batch.append([\"1\"])\n            yield (np.array(x_batch), np.array(y_batch))\n            \n            ","a0b47603":"def test_generator():\n    while True:\n        for start in range(0, nb_test_samples, batch_size):\n            x_batch = []\n            y_batch = []\n            \n            end = min(start + batch_size, nb_test_samples)\n            for img_path in range(start, end):\n                img = cv2.imread(test_images[img_path])\n                img = cv2.resize(img, (img_width, img_height))\n                x_batch.append(img)\n                if \"NORMAL\" in test_images[img_path]:\n                    y_batch.append([\"0\"])\n                elif \"PNEUMONIA\" in test_images[img_path]:\n                    y_batch.append([\"1\"])\n            yield (np.array(x_batch), np.array(y_batch))","d61fa9ce":"model.fit_generator(\n    train_generator(),\n    epochs= epochs,\n    steps_per_epoch= nb_train_samples \/\/ batch_size,\n    validation_data= test_generator(),\n    validation_steps = nb_valid_samples \/\/ batch_size,\n)","564c5f17":"model.save_weights(\"model_1.h5\")","58c52e48":"# Evaluating the model\nscores = model.evaluate_generator(generator=test_generator(), steps=nb_test_samples \/\/ batch_size)\nprint(\"Test accuracy is {}\".format(scores[1] * 100))","7c9aa7ec":"Resulting accuracy in case of training is **98.8%** and on testing data accuracy is **65.2%** .","5d6f66c7":"Visualizing Normail Image","e332b41e":"Visualizing PNEUMONIA Image","1095b913":"## Creating CNN Model","8e4a897c":"## Getting file paths","61a116ec":"## Evaluating the model","35193f44":"## Setting Up Custom Data Generators without augmentation\n","4a90f2fe":"## Setting Up Hyper-parameters"}}