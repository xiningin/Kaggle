{"cell_type":{"6e872a64":"code","c692d96e":"code","c38b0eb7":"code","2942b26a":"code","11718112":"code","10198c16":"code","ab18c9e5":"code","89ee2dca":"code","70a47ad3":"code","1df27103":"code","d35f5cb6":"code","d8096bc6":"code","462af4f9":"code","0207cdce":"code","71ef13ce":"code","9daeb7da":"markdown","1ade8779":"markdown","b5d98839":"markdown","1a200a7f":"markdown","20a7e34f":"markdown","d0f6e9c6":"markdown"},"source":{"6e872a64":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n#import dataframe_image as dfi\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom sklearn.preprocessing import MinMaxScaler\nimport warnings\nwarnings.filterwarnings('ignore')","c692d96e":"df=pd.read_csv('..\/input\/english-premier-league-xg-data\/EPL_result.csv')\n\n#Name to abbreviation\nteam_abb={'Everton':'EVE', 'Aston Villa':'AVL',\n          'Leicester City':'LEI', 'Arsenal':'ARS',\n          'Liverpool':'LIV','Tottenham':'TOT', \n          'Chelsea':'CHE', 'Leeds United':'LEE', \n          'Newcastle Utd':'NEW','West Ham':'WHU', \n          'Southampton':'SOU', 'Crystal Palace':'CRY', \n          'Wolves':'WOL','Manchester City':'MCI', \n          'Brighton':'BHA', 'Manchester Utd':'MUN', \n          'West Brom':'WBA','Burnley':'BUR', \n          'Sheffield Utd':'SHU', 'Fulham':'FUL'}\ndf.Home=df.Home.apply(lambda x: team_abb[x])\ndf.Away=df.Away.apply(lambda x: team_abb[x])\n\ndf['GD']=df.G_Home-df.G_Away\ndf['Pts_Home']=df.GD.apply(lambda x : 3 if x>0 else (0 if x<0 else 1))\ndf['Pts_Away']=df.GD.apply(lambda x : 0 if x>0 else (3 if x<0 else 1))\ndf.head()","c38b0eb7":"gw_last=7        #Last Gameweek number to be updated\ngw_next=gw_last+1","2942b26a":"df_temp=pd.DataFrame({'Team':list(team_abb.values())})\ndf_temp['M_h']=df_temp.Team\\\n.apply(lambda x:df[df.Home==x][df.GW<gw_next].count()[0])\n\ndf_temp['M_a']=df_temp.Team\\\n.apply(lambda x:df[df.Away==x][df.GW<gw_next].count()[0])\n\ndf_temp['M']=df_temp.M_h+df_temp.M_a\n\ndf_temp['xG_h']=df_temp.Team\\\n.apply(lambda x:df.xG_Home[df.Home==x][df.GW<gw_next].sum())\n\ndf_temp['xG_a']=df_temp.Team\\\n.apply(lambda x:df.xG_Away[df.Away==x][df.GW<gw_next].sum())\n\ndf_temp['xG']=df_temp.xG_a+df_temp.xG_h\n\ndf_temp['xGpm_h']=df_temp.xG_h\/df_temp.M_h\ndf_temp['xGpm_a']=df_temp.xG_a\/df_temp.M_a\ndf_temp['xGpm']=df_temp.xG\/df_temp.M\n\ndf_temp['xGA_h']=df_temp.Team\\\n.apply(lambda x:df.xG_Away[df.Home==x][df.GW<gw_next].sum())\n\ndf_temp['xGA_a']=df_temp.Team\\\n.apply(lambda x:df.xG_Home[df.Away==x][df.GW<gw_next].sum())\n\ndf_temp['xGA']=df_temp.xGA_a+df_temp.xGA_h\n\ndf_temp['xGApm_h']=df_temp.xGA_h\/df_temp.M_h\ndf_temp['xGApm_a']=df_temp.xGA_a\/df_temp.M_a\ndf_temp['xGApm']=df_temp.xGA\/df_temp.M\n\ndf_temp['delta_xGpm']=df_temp.xGpm-df_temp.xGApm\n\n\ndf_temp['P_h']=df_temp.Team\\\n.apply(lambda x:df.Pts_Home[df.Home==x][df.GW<gw_next].sum())\n\ndf_temp['P_a']=df_temp.Team\\\n.apply(lambda x:df.Pts_Away[df.Away==x][df.GW<gw_next].sum())\n\ndf_temp['P']=df_temp.P_a+df_temp.P_h\n\ndf_temp['Ppm_h']=df_temp.P_h\/df_temp.M_h\ndf_temp['Ppm_a']=df_temp.P_a\/df_temp.M_a\ndf_temp['Ppm']=df_temp.P\/df_temp.M\n\ndf_temp['G_h']=df_temp.Team\\\n.apply(lambda x:df.G_Home[df.Home==x][df.GW<gw_next].sum())\n\ndf_temp['G_a']=df_temp.Team\\\n.apply(lambda x:df.G_Away[df.Away==x][df.GW<gw_next].sum())\n\ndf_temp['G']=df_temp.G_a+df_temp.G_h\n\ndf_temp['GA_h']=df_temp.Team\\\n.apply(lambda x:df.G_Away[df.Home==x][df.GW<gw_next].sum())\n\ndf_temp['GA_a']=df_temp.Team\\\n.apply(lambda x:df.G_Home[df.Away==x][df.GW<gw_next].sum())\n\ndf_temp['GA']=df_temp.GA_a+df_temp.GA_h\n\ndf_temp['GD']=df_temp.G-df_temp.GA\ndf_temp['delta_xG_ha']=df_temp.xG_h-df_temp.xG_a\ndf_temp['delta_xGA_ha']=df_temp.xGA_h-df_temp.xGA_a","11718112":"df_temp[['Team','M','P','GD','G','GA' ]].sort_values(by=['P','GD','G'], ascending=False)\\\n.style.background_gradient(cmap='RdYlGn',subset=['G','GA'])","10198c16":"plt.figure(figsize=(8,5))\n#plt.suptitle(\"EPL 2020\/21 SEASON UPTO GW4\")\n\nplt.subplot(1,2,1)\nplt.title(\"xG Scored per match\")\nsns.barplot(orient='h', x='xGpm',y='Team',\n            data=df_temp.sort_values(by='xGpm',ascending=False))\nplt.grid(which='both', axis='x')\n\nplt.subplot(1,2,2)\nplt.title(\"xG Conceaded per match\")\nsns.barplot(orient='h', x='xGApm',y='Team',\n            data=df_temp.sort_values(by='xGApm',ascending=True))\nplt.grid(which='both', axis='x')\n\nplt.tight_layout()\nplt.savefig('xg_xa.png')\nplt.show()","ab18c9e5":"plt.figure(figsize=(10,6))\nplt.title(\"xG Scored Vs xG Conceded\")\nsns.scatterplot(data=df_temp, x='xGApm', y='xGpm')\nfor i in range(df_temp.shape[0]):\n    plt.text(df_temp.xGApm[i]+0.01, df_temp.xGpm[i]+0.01, \n             df_temp.Team[i], fontdict={'fontsize':8})\nplt.xlabel(\"xG conceded Per match\")\nplt.ylabel(\"xG Scored Per match\")\n#plt.plot([0,3],[0,3],'r--')\nplt.xlim(df_temp.xGApm.min()-0.2,df_temp.xGApm.max()+0.2)\nplt.ylim(df_temp.xGpm.min()-0.2,df_temp.xGpm.max()+0.2)\nplt.axhline(y=df_temp.xGpm.mean(),ls='--', color='k')\nplt.axvline(x=df_temp.xGApm.mean(),ls='--', color='k')\n\nplt.text(x=1.6, y=2.25, s=\"Q1\\nStrong Attack\\nWeak Defence\", \n         alpha=0.7,fontsize=9, color='red')\nplt.text(x=0.9, y=2.25, s=\"Q2\\nStrong Attack\\nStrong Defence\", \n         alpha=0.7,fontsize=9, color='red')\nplt.text(x=0.9, y=0.9, s=\"Q3\\nWeak Attack\\nStrong Defence\", \n         alpha=0.7,fontsize=9, color='red')\nplt.text(x=1.6, y=0.9, s=\"Q3\\nWeak Attack\\nWeak Defence\", \n         alpha=0.7,fontsize=9, color='red')\n\n#plt.savefig('scatter_xg_xa.png')\nplt.show()","89ee2dca":"plt.figure(figsize=(6,4))\nplt.title(\"xG Scored - xG Conceded\")\nsns.barplot(orient='h', x='delta_xGpm',y='Team', \n            data=df_temp.sort_values(by='delta_xGpm', ascending=False))\nplt.grid(which='both', axis='x')\nplt.xlabel('Delta xG')\nplt.tight_layout()\n#plt.savefig('delta_xg.png')\nplt.show()","70a47ad3":"plt.figure(figsize=(8,5))\n#plt.suptitle(\"EPL 2020\/21 SEASON UPTO GW4\")\n\nplt.subplot(1,2,1)\nplt.title(\"xG Scored at home per match\")\nsns.barplot(orient='h', x='xG_h',y='Team',\n            data=df_temp.sort_values(by='xG_h',ascending=False))\nplt.grid(which='both', axis='x')\n\nplt.subplot(1,2,2)\nplt.title(\"xG Scored at away per match\")\nsns.barplot(orient='h', x='xG_a',y='Team',\n            data=df_temp.sort_values(by='xG_a',ascending=False))\nplt.grid(which='both', axis='x')\n\nplt.tight_layout()\n#plt.savefig('xg_xa.png')\nplt.show()","1df27103":"plt.figure(figsize=(8,5))\n#plt.suptitle(\"EPL 2020\/21 SEASON UPTO GW4\")\n\nplt.subplot(1,2,1)\nplt.title(\"xG Conceded at home per match\")\nsns.barplot(orient='h', x='xGA_h',y='Team',\n            data=df_temp.sort_values(by='xGA_h',ascending=True))\nplt.grid(which='both', axis='x')\n\nplt.subplot(1,2,2)\nplt.title(\"xG Conceded at away per match\")\nsns.barplot(orient='h', x='xGA_a',y='Team',\n            data=df_temp.sort_values(by='xGA_a',ascending=True))\nplt.grid(which='both', axis='x')\n\nplt.tight_layout()\n#plt.savefig('xg_xa.png')\nplt.show()","d35f5cb6":"sns.barplot(data=df_temp.sort_values(by='xG', ascending=False), x='delta_xG_ha', y='Team')\nplt.show()","d8096bc6":"df_fix=df[df.GW>gw_last].iloc[:,:3].reset_index()\n\ndef predict_xg(df_fix):\n    df_fix['G_home']=0.0\n    df_fix['G_away']=0.0\n\n    for i in range(df_fix.shape[0]):\n        df_fix.G_home[i]=(df_temp.xGpm[df_temp.Team==df_fix.Home[i]].sum()+\n                       df_temp.xGApm[df_temp.Team==df_fix.Away[i]].sum())\/2\n        df_fix.G_away[i]=(df_temp.xGpm[df_temp.Team==df_fix.Away[i]].sum()+\n                       df_temp.xGApm[df_temp.Team==df_fix.Home[i]].sum())\/2\n\n    df_fix['GD']=df_fix['G_home']-df_fix['G_away']\n    df_fix['GS']=df_fix['G_home']+df_fix['G_away']\n    df_fix=df_fix.sort_values(by='GD', ascending=False)\n    return df_fix\n\ndf_fix=predict_xg(df_fix)\n\ndf_styled=df_fix.iloc[:,1:][df_fix.GW==gw_next].style.background_gradient(cmap='RdYlGn',subset=['GD','GS']).hide_index()\n#dfi.export(df_styled,\"mytable.png\")\ndf_styled","462af4f9":"weeks_for_fdr=3\ngw_dict={}\nfor i in range(1,weeks_for_fdr+1):\n    gw_dict.update({str(\"GW\"+str(gw_last+i)):gw_last+i})\n\n\ndf_fdr=pd.DataFrame({'Team':df_temp.Team})\n\nfor GW in gw_dict.keys():\n    temp_df=df_fix[df_fix.GW==gw_dict[GW]]\n\n    df_fdr[GW]=df_fdr.Team\\\n    .apply(lambda x:(temp_df[temp_df.Home==x].GD.sum()) \n           if x in (temp_df.Home.unique()) \n           else -temp_df[temp_df.Away==x].GD.sum())\n    \nsc=MinMaxScaler()\ndf_fdr['Mean']=df_fdr.mean(axis=1)\nfor col in gw_dict.keys():\n    df_fdr[col]=sc.fit_transform(np.array(df_fdr[col]).reshape(-1,1))\ndf_fdr=df_fdr.sort_values(by='Mean', ascending=False)\ndf_fdr.style.background_gradient(cmap='RdYlGn',\n                                 subset=list(gw_dict.keys()))","0207cdce":"df_result=pd.read_csv(\"..\/input\/english-premier-league-xg-data\/EPL_result.csv\")\ndf_result=df_result[df_result.GW==gw_next]\n\n#Name Preprocess\ndf_result.Home=df_result.Home.apply(lambda x: team_abb[x])\ndf_result.Away=df_result.Away.apply(lambda x: team_abb[x])\n\ndf_result['Match']=df_result.Home+\" Vs \"+df_result.Away\ndf_result[\"act_GD\"]=df_result.G_Home-df_result.G_Away\ndf_result[\"act_xGD\"]=df_result.xG_Home-df_result.xG_Away\ndf_result[\"pred_xG_Home\"]=df_result.Home\\\n.apply(lambda x:df_fix.G_home[df_fix.Home==x][df_fix.GW==gw_next].sum())\ndf_result[\"pred_xG_Away\"]=df_result.Home\\\n.apply(lambda x:df_fix.G_away[df_fix.Home==x][df_fix.GW==gw_next].sum())\ndf_result[\"pred_xGD\"]=df_result.Home\\\n.apply(lambda x:df_fix.GD[df_fix.Home==x][df_fix.GW==gw_next].sum())\ndf_result['xG_diff']=abs(df_result.pred_xGD-df_result.act_xGD)\ndf_result.sort_values(by='xG_diff', ascending=True, inplace=True)\ndf_result","71ef13ce":"plt.figure(figsize=(8,4))\nplt.title(\"Predicted xG difference vs Actual xG difference\")\nsns.barplot(y='Match', x='pred_xGD', orient='h',data=df_result, color='red', alpha=0.8\n            , label=\"Predicted\")\nsns.barplot(y='Match', x='act_xGD', orient='h', data=df_result, color='blue', alpha=0.8\n            , label=\"Actual\")\nplt.xlabel(\"Expected Goal Difference\")\n#plt.xticks(rotation=90)\nplt.legend(loc=\"upper left\")\nplt.grid(axis='x')\nplt.savefig('pred_vs_act.png')\nplt.show()","9daeb7da":"### Home Advantage","1ade8779":"### Prediction","b5d98839":"### Fixture Difficulty Rating","1a200a7f":"### xG Scored vs Conceded","20a7e34f":"### Actual Vs Expected Goals For and Against (After updating GW8 results)","d0f6e9c6":"### EPL TABLE"}}