{"cell_type":{"67153e29":"code","add85a6d":"code","0b3fab78":"code","d8cc6a25":"code","69ce7e08":"code","818b96f2":"code","039ad6b8":"code","58b662b5":"code","67d6f70b":"code","29c1ef6a":"markdown","913befd0":"markdown","20d1064e":"markdown","5aabfc1e":"markdown"},"source":{"67153e29":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib\n%matplotlib inline\nfrom datetime import datetime\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","add85a6d":"# let's get an overview over the structure of the data\ndata = pd.read_csv(\"..\/input\/BreadBasket_DMS.csv\")\ndata.head(10)","0b3fab78":"data['Date'].describe()","d8cc6a25":"data['Transaction'].describe()","69ce7e08":"# what items are sold in the bakery?\nfor item in set(data['Item']):\n    print(item)\nprint('There are ' + str(len(set(data['Item']))) + \" items that can be purchased in the bakery.\")","818b96f2":"Item = []\nPurchases = []\nfor item in set(data['Item']):\n    Item.append(item)\n    indices = [i for i, x in enumerate(data['Item']) if x == item]\n    Purchases.append(len(indices))\ndf_purchase = pd.DataFrame(data = [Item, Purchases])\ndf_purchase = df_purchase.transpose()\ndf_purchase.columns = ['Item', 'Purchases']\ndf_purchase.sort_values(by=['Purchases'], inplace=True)\ndf_purchase.head(10)\n\nplt.figure(figsize=(15,15))\nsns.barplot(x=df_purchase['Purchases'], y=df_purchase['Item'])","039ad6b8":"# when are these items sold?\nitems = np.transpose(np.array(list(set(data['Item']))))\npurchase_time = pd.DataFrame(np.zeros((len(items), 24)))\n\n\nzipped = zip(range(95), items)\nitem_dict = {}\nfor ID, item in zipped:\n    item_dict[ID] = item\n  \npurchase_time.rename(item_dict, axis='index', inplace=True)\npurchase_time.head()\nfor item in items:\n    indices = [i for i, x in enumerate(data['Item']) if x == item]\n    for index in indices:\n        time = data['Time'].iloc[index][0:2]\n        purchase_time.loc[[item], [int(time)]] = purchase_time.loc[[item], [int(time)]] + 1\n        \npurchase_time.head(10)","58b662b5":"plt.figure(figsize=(25,25))\nfor i in range(1, len(items)):\n    plt.subplot(19, 5, i)\n    sns.lineplot(x=range(0,24), y=purchase_time.loc[items[i-1]])","67d6f70b":"# coming next: correlations between item to be sold and date\/time.","29c1ef6a":"Apparently, we have four columns:\n1. Date, indicating Year-Month-Day of a certain transaction event\n1. Time, indicating the exact time (Hour-Minute-Second) of the transaction event\n1. Transaction, indicating what transaction is happening. In each transaction, several \n1. Items can be purchased (see transaction 3, in which hot chocolate, jam, and cookies are obtained.\n\nSo, what can we do with this kind of data? Several ideas come to mind:\n1.  We can investigate whether items are differently purchased in different months \n1.  Maybe we can split the data and see whether we can predict what kind of items are purchased in the last month\n1.  We could try and see whether some items are correlated and tend to be bought together\n1.  We could calculate, how many items the bakery has to provide each day so that each customer gets what they want (maybe that helps the bakery to be more cost-effective).","913befd0":"Ok, 95 items in total. What are the classic choices (which is where the cash is made)?","20d1064e":"We are looking at a collection of 9684 transactions. In total, 21293 items are part of these transactions, so that per transaction 2.2 items are purchased.","5aabfc1e":"It's interesting to note that in most purchases only a very specific subset of items is obtained. Coffee, bread, and tea already account for more than 9.000 transactions. The item 'NONE' is a bit weird and there is no explanation regarding what it could mean. It might make sense to delete it from the dataset since a transaction with no item purchased does not make any sense."}}