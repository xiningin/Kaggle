{"cell_type":{"0e3a0649":"code","f307deb7":"code","426ea15f":"code","11d75dda":"code","654299db":"code","79822b68":"code","d8248360":"code","b45f8271":"code","92e92e8c":"code","e56082e2":"code","9c940c88":"code","9f2e1473":"code","d344a354":"code","271790d3":"code","e0fc350f":"code","d760d09c":"code","8c4361d6":"code","6e002b3b":"code","66521a7c":"code","6d1a9c0a":"code","eb82a92e":"code","fae597a7":"code","be2634c6":"code","7bc672dd":"code","59141805":"code","d3da084e":"markdown","2e827d93":"markdown","71c28035":"markdown","2d990d64":"markdown","2a8fd46d":"markdown","84562290":"markdown","a5913925":"markdown","8dee7051":"markdown","991dcba9":"markdown","133e9083":"markdown","0060dee6":"markdown","3244e133":"markdown","b4ccd1ad":"markdown","dfa00b96":"markdown","c9d180de":"markdown","1743bf36":"markdown","7b3416d9":"markdown"},"source":{"0e3a0649":"import numpy as np \nimport pandas as pd\nfrom sklearn import datasets\nimport seaborn as sns\nfrom sklearn.covariance import EllipticEnvelope\nfrom sklearn.datasets import make_blobs","f307deb7":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","426ea15f":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","11d75dda":"df.info()","654299db":"df","79822b68":"#\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 - \u043a\u043e\u043b\u043e\u043d\u043a\u0430 \u0432 unixtime \u0434\u043b\u044f \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c df.\n#\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 - \u0432 df \u043a\u043e\u043b\u043e\u043d\u043a\u0430 \u0438\u0437 unixtime \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442\u0441\u044f \u0432 datetime.\ndef unixtime_to_datetime(unixtime_colomn):\n    df[unixtime_colomn] = pd.to_datetime(df[unixtime_colomn], unit='s')","d8248360":"df['Datetime'] = pd.to_datetime(df['Datetime'],format='%d-%m-%Y %H:%M')\n\ndf['year']=df['Datetime'].dt.year \ndf['month']=df['Datetime'].dt.month \ndf['day']=df['Datetime'].dt.day\n\ndf['dayofweek_num']=df['Datetime'].dt.dayofweek  \ndf['dayofweek_name']=df['Datetime'].dt.weekday_name\n\ndata.head()","b45f8271":"df = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv')\ndf","92e92e8c":"def fill_value (column_na): #\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 NaN-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\n    df[column_na] = df[column_na].fillna(-999) #\u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0432 df, \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043c\u044b \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c, \u0447\u0442\u043e \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0438 \u0440\u0430\u043d\u044c\u0448\u0435 \u0431\u044b\u043b null\n    \n#\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0441\u0442\u0430\u0432\u043a\u0438\nfill_value('Age')\ndf","e56082e2":"def fill_mean (column_na, groupby_parameter): #\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f column_na - \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438, groupby_parameter - \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u043a\u0430, \u0434\u043b\u044f \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e\n    df[column_na] = df.groupby(groupby_parameter)[column_na].transform(\n        lambda grp: grp.fillna(np.mean(grp))\n    )\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nfill_mean('Age', 'Sex')\ndf","9c940c88":"def fill_similar(column_na):#\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 NaN-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\n    df[column_na] = df[column_na].ffill().bfill()\n# \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nfill_similar('Cabin')\ndf","9f2e1473":"sns.boxplot(x=df['Age'])","d344a354":"df['Age'].describe()","271790d3":"def find_outburst(column):\n    low_fence = df[column].quantile(0.10)\n    high_fence = df[column].quantile(0.90)\n    df_out = df.loc[(df[column] > low_fence) & (df[column] < high_fence)]\n    return df_out","e0fc350f":"df_out = find_outburst('Age')","d760d09c":"sns.boxplot(x=df_out['Age'])","8c4361d6":"def new_feat_outburst(column):\n    low_fence = df[column].quantile(0.10)\n    high_fence = df[column].quantile(0.90)\n    df['Outburst'] = np.where((df[column] > low_fence) & (df[column] < high_fence), 0, 1)\n    return df","6e002b3b":"new_df = new_feat_outburst('Age')\nnew_df","66521a7c":"df","6d1a9c0a":"def find_cat(df):\n    for name in df.columns:\n        cat_feat = ''\n        cat_feat += name\n        if (type(df[name][0])== str): #\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u0432 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0435 0 \u0443 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0441\u0442\u0440\u043e\u043a\u0430\n            cat_feat += ' \u0441\u0442\u0440\u043e\u043a\u0430'\n        if (df[name].nunique()<=10): #\u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0435, \u0447\u0438\u0441\u043b\u043e 10 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 - \u044d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n            cat_feat += ' \u043c\u0435\u043d\u0435\u0435 10 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439'\n        if (cat_feat!=name):\n            print(cat_feat)\n            \nfind_cat(df)","eb82a92e":"# \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 2\u0443\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 (\u043a\u043e\u043d\u044a\u044e\u043d\u0446\u0438\u044f)\ndef make_feat_conj(df, cat1, cat2):\n    df[cat1 + '+' + cat2] = df[cat1].astype(str) + '+' + df[cat2].astype(str)\n    return df\nmake_feat_conj(df, 'Sex', 'Embarked')","fae597a7":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit(df.Sex)\ndf['Sex_le'] = le.transform(df.Sex)\ndf","be2634c6":"df","7bc672dd":"#\u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\nfrom sklearn.preprocessing import OneHotEncoder\njust_dummies = pd.get_dummies(df['Embarked'])\n#\u0433\u0434\u0435 df['dummy'] - \u0441\u0442\u043e\u043b\u0431\u0435\u0446, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c\n#\u041a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0438\u0440\u0443\u0435\u0448\u044c \u043a \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0443 df \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\nstep_1 = pd.concat([df, just_dummies], axis=1)      \n#\u0423\u0434\u0430\u043b\u044f\u0435\u0448\u044c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u0442\u0440\u043e\u0438\u043b \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nstep_1.drop(['Embarked'], inplace=True, axis=1)\ndf","59141805":"def code_mean(df, cat_feat, real_feat):\n    return(df[cat_feat].map(df.groupby(cat_feat)[real_feat].mean()))\n\ndf['Sex_Age_mean'] = code_mean(df, 'Sex', 'Age')\ndf","d3da084e":"**\u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438** \n[\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438](https:\/\/dyakonov.org\/2016\/08\/03\/python-%D0%BA%D0%B0%D1%82%D0%B5%D0%B3%D0%BE%D1%80%D0%B8%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5-%D0%BF%D1%80%D0%B8%D0%B7%D0%BD%D0%B0%D0%BA%D0%B8\/)","2e827d93":"**2 \u0441\u0442\u0440\u0430\u0434\u0435\u0433\u0438\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438**\n\n1 - \u043e\u0442\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438\n\n\/\/q = df['Age'].quantile(0.80)","71c28035":"\u0415\u0441\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0438\u0439 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u0439 sklearn.preprocessing.LabelEncoder, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e (\u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043d\u043e\u043c\u0435\u0440 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438). \u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0431\u044b \u0435\u0433\u043e \u043d\u0435 \u0431\u044b\u043b\u043e, \u0442\u043e \u0442\u0430\u043a\u0443\u044e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0443 \u043d\u0435\u0441\u043b\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0430\u043c\u043e\u043c\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 map. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0437\u0430\u0434\u0430\u0451\u0442\u0441\u044f \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0438 \u0447\u0435\u043c \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c.\n","2d990d64":"2 - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f","2a8fd46d":"**\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u0442\u0443 \u043d\u0430 \u0433\u043e\u0434\/\u043c\u0435\u0441\u044f\u0446\/\u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438 (\u0447\u0438\u0441\u043b\u043e 1-7 + \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0434\u043d\u044f)**","84562290":"# \u0420\u0430\u0431\u043e\u0442\u0430 \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c","a5913925":"**\u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043d\u043e\u0432\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438**","8dee7051":"**\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 unixtime \u2192 datetime**","991dcba9":"**\u0417\u0430\u043c\u0435\u043d\u0430 null-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438**","133e9083":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435","0060dee6":"**\u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 null-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0438\u0437 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f**","3244e133":"# \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043d\u0435\u0442\u0438\u043f\u0438\u0447\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 (\u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438 \u0432 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445)","b4ccd1ad":"\u0415\u0441\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0438\u0439 \u043c\u0435\u0442\u043e\u0434 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0435\u0433\u043e \u0447\u0430\u0441\u0442\u043e \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043d\u0430\u0438\u0432\u043d\u044b\u043c \/ \u0433\u043b\u0443\u043f\u044b\u043c (dummy) \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438\u043b\u0438 one-hot-\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c. \u0414\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f N \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0433\u0434\u0435 N \u2014 \u0447\u0438\u0441\u043b\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439. \u041a\u0430\u0436\u0434\u044b\u0439 i-\u0439 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u2014 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a i-\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438.","dfa00b96":"# \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","c9d180de":"**\u0412\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 null-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0435**","1743bf36":"**Dummy-\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435**","7b3416d9":"**\u041d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**"}}