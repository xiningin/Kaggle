{"cell_type":{"30777ce6":"code","9de130e5":"code","e62b3eb5":"code","fdf25f62":"code","ea9b6658":"code","ea62851c":"code","1caf392c":"code","2541698a":"code","67512fd1":"code","c83161ae":"code","7328ae6c":"code","eb378be2":"code","f3210bfe":"code","e594dcfa":"code","df7ccd28":"code","03bd14ba":"code","2e053b2f":"code","3dda7227":"code","6cb55e1d":"code","e316604b":"code","f3668717":"code","d43c81cd":"code","137e1a37":"code","d0ec60f2":"markdown","19f5542f":"markdown","c68a94f0":"markdown","e55cbe5f":"markdown","86d7d7b1":"markdown","289f54a8":"markdown","29fb3465":"markdown","1c3fcde3":"markdown","fc79339e":"markdown","a8db13fd":"markdown"},"source":{"30777ce6":"!pip install ..\/input\/mmcvwhl\/addict-2.2.1-py3-none-any.whl\n!pip install ..\/input\/mmdetection20-5-13\/mmcv-0.5.1-cp37-cp37m-linux_x86_64.whl\n!pip install ..\/input\/mmdetection20-5-13\/terminal-0.4.0-py3-none-any.whl\n!pip install ..\/input\/mmdetection20-5-13\/terminaltables-3.1.0-py3-none-any.whl","9de130e5":"!cp -r ..\/input\/mmdetection20-5-13\/mmdetection\/mmdetection .","e62b3eb5":"!mkdir -p mmdetection\/data\/Wheatdetection\/annotations\n!cp -r ..\/input\/global-wheat-detection\/test mmdetection\/data\/Wheatdetection\/test\n!cp -r ..\/input\/global-wheat-detection\/sample_submission.csv mmdetection\/data\/Wheatdetection\/\n!mkdir mmdetection\/configs\/wheatdetection","fdf25f62":"!cp ..\/input\/mmdetfasterrcnn\/config\/config\/faster_rcnn_r50_fpn_1x_coco_test.py mmdetection\/configs\/wheatdetection\n!cp ..\/input\/mmdetfasterrcnn\/config\/config\/wheat_detection_test.py mmdetection\/configs\/_base_\/datasets\n!cp ..\/input\/mmdetfasterrcnn\/config\/config\/__init__.py mmdetection\/mmdet\/datasets\n!cp ..\/input\/mmdetfasterrcnn\/config\/config\/wheat.py mmdetection\/mmdet\/datasets","ea9b6658":"cd mmdetection","ea62851c":"!cp -r ..\/..\/input\/mmdetection20-5-13\/cocoapi\/cocoapi .","1caf392c":"cd cocoapi\/PythonAPI","2541698a":"!make","67512fd1":"!make install","c83161ae":"!python setup.py install","7328ae6c":"import pycocotools","eb378be2":"cd ..\/..","f3210bfe":"!pip install -v -e .","e594dcfa":"cd ..\/","df7ccd28":"import sys\nsys.path.append('mmdetection') # To find local version","03bd14ba":"from mmdet.apis import init_detector, inference_detector, show_result_pyplot\nimport mmcv\nfrom mmcv import Config\nfrom mmdet.models import build_detector\nfrom mmcv.runner import load_checkpoint\nfrom mmcv.parallel import MMDataParallel\nfrom mmdet.apis import single_gpu_test\nfrom mmdet.datasets import build_dataloader, build_dataset\n\nimport pandas as pd\nimport os\nimport json\n\nfrom PIL import Image\n\nimport torch","2e053b2f":"def format_prediction_string(boxes, scores):\n    pred_strings = []\n    for j in zip(scores, boxes):\n        pred_strings.append(\"{0:.4f} {1} {2} {3} {4}\".format(j[0], j[1][0], j[1][1], j[1][2], j[1][3]))\n\n    return \" \".join(pred_strings)\n\n\ndef gen_test_annotation(test_data_path, annotation_path):\n    test_anno_list = []\n    for img in os.listdir(test_data_path):\n        if img.endswith('jpg'):\n            img_info = {}\n            img_info['filename'] = img\n            img_size = Image.open(os.path.join(test_data_path, img)).size\n            img_info['width'] = img_size[0]\n            img_info['height'] = img_size[1]\n            test_anno_list.append(img_info)\n    with open(annotation_path, 'w+') as f:\n        json.dump(test_anno_list, f)","3dda7227":"DIR_INPUT = '\/kaggle\/working\/mmdetection\/data\/Wheatdetection'\nDIR_TEST = f'{DIR_INPUT}\/test'\nDIR_ANNO = f'{DIR_INPUT}\/annotations'\n\nDIR_WEIGHTS = '\/kaggle\/input\/mmdetfasterrcnn'\nWEIGHTS_FILE = f'{DIR_WEIGHTS}\/epoch_50.pth'\n\ntest_df = pd.read_csv(f'{DIR_INPUT}\/sample_submission.csv')\n\n# prepare test data annotations\ngen_test_annotation(DIR_TEST, DIR_ANNO + '\/detection_test.json')","6cb55e1d":"config_file = '\/kaggle\/working\/mmdetection\/configs\/wheatdetection\/faster_rcnn_r50_fpn_1x_coco_test.py'\ncfg = Config.fromfile(config_file)\ncfg.data.test.test_mode = True\n\ndistributed = False","e316604b":"dataset = build_dataset(cfg.data.test)\ndata_loader = build_dataloader(\n    dataset,\n    samples_per_gpu=1,\n    workers_per_gpu=1,\n    dist=distributed,\n    shuffle=False)","f3668717":"#################################### faster rcnn ############################################\ndevice = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')\n\nmodel = build_detector(cfg.model, train_cfg=None, test_cfg=cfg.test_cfg)\ncheckpoint = load_checkpoint(model, WEIGHTS_FILE, map_location='cpu')\n\nmodel.CLASSES = dataset.CLASSES\n\nmodel = MMDataParallel(model, device_ids=[0])\noutputs = single_gpu_test(model, data_loader, False, None, 0.5)\n\nresults = []\n\nfor images_info, result in zip(dataset.data_infos, outputs):\n    boxes = result[0][:, :4]\n    scores = result[0][:, 4]\n\n    boxes[:, 2] = boxes[:, 2] - boxes[:, 0]\n    boxes[:, 3] = boxes[:, 3] - boxes[:, 1]\n\n    result = {\n        'image_id': images_info['filename'][:-4],\n        'PredictionString': format_prediction_string(boxes, scores)\n    }\n\n    results.append(result)","d43c81cd":"test_df = pd.DataFrame(results, columns=['image_id', 'PredictionString'])\n\n# save result\ntest_df.to_csv('submission.csv', index=False)","137e1a37":"# !rm -rf mmdetection\/","d0ec60f2":"Now, we can use MMDetection for the inference.","19f5542f":"We should prepare the data and convert to COCO format.","c68a94f0":"We define a function `gen_test_annotation`, use the hot-plug way to generate the tesing annotation to fit the final tesing environment.","e55cbe5f":"Copy the MMDetection framework to the writeable directoy.","86d7d7b1":"Some config files for faster-rcnn implement and test data.","289f54a8":"compile the coco toolbox","29fb3465":"First, I followed this [blog](https:\/\/www.kaggle.com\/c\/severstal-steel-defect-detection\/discussion\/113195) to install python dependences.","1c3fcde3":"In the Global Wheat Detection Challenge we can not use Internet during inference, so it is not easy to use MMDetection as there are many dependences that are not installed in default kaggle environment.","fc79339e":"compile the MMDetection Framework","a8db13fd":"Hi kagglers! Here I am going to show how to use a toolbox to test the object detection baseline in Global Wheat Detection problem.\n\n[MMDetection](https:\/\/github.com\/open-mmlab\/mmdetection) is an open source object detection toolbox based on PyTorch. It is a part of the OpenMMLab project developed by Multimedia Laboratory, CUHK.\n\n [Detectron2](https:\/\/github.com\/facebookresearch\/detectron2), [maskrcnn-benchmark](https:\/\/github.com\/facebookresearch\/maskrcnn-benchmark) and [SimpleDet](http:\/\/https:\/\/github.com\/TuSimple\/simpledet) are codebases for computer vision tasks, but the training speed of MMDetection is faster and updated frequency."}}