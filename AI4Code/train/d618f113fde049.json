{"cell_type":{"b2cd2687":"code","f90252cd":"code","20be4777":"code","32a62f16":"code","3ba3354f":"code","78450542":"code","ee3cf754":"code","b0c04c65":"code","608b9b8d":"code","a4f41b77":"code","d344063a":"code","654526c5":"code","d47101ea":"code","06a04fb1":"code","ce5c1a1d":"code","38b87893":"code","7474f11f":"code","3e3d4c1d":"code","c138ff44":"code","f9c4efb8":"code","1ddcbf92":"code","adb03ced":"code","5928ceca":"code","51be50d7":"code","a4efb0e8":"code","fe71ba0a":"code","9890693e":"code","5690bd34":"code","3a67500d":"code","31209fec":"code","f0b2b772":"code","085b67dd":"code","6cee73be":"code","f571336b":"code","31fce7ce":"code","d065c773":"code","5b6957a7":"code","05ad8ff3":"code","56993e9e":"code","a617f4c9":"code","097b660f":"code","b4a3fb71":"code","a444f67f":"code","b1d29aa4":"code","68dc5cb9":"code","0b15dbb6":"code","7670ecc2":"code","90a12791":"code","2334d23b":"code","14c0e8b0":"code","4a5009d3":"code","567e3a40":"code","a023d194":"code","41498d0d":"code","c72b59c5":"code","68dbc7d4":"code","9a5d84a4":"code","881cfebd":"code","c35e9eb2":"code","c0ecbbf7":"code","686d2ddb":"code","da8c604b":"code","b961f1c9":"code","daf05ebf":"code","4b1f8e28":"code","0d103343":"code","fdaea96d":"code","0823cb0d":"code","72ce4c98":"code","8dfafc7c":"code","f78564b6":"code","a291f9d0":"code","df952eb1":"code","78406566":"code","e771b2ef":"code","8b6d65c9":"code","a1dd309a":"code","5058afe0":"code","1a1923bf":"code","a03fc996":"code","9d96f26b":"code","9b3b6e44":"code","b603ecad":"code","ceda29e4":"code","cb7921c0":"code","38309f4b":"code","c9038c32":"code","dd00692a":"code","fd559964":"code","6dbce659":"code","5dd41034":"code","47e7eecf":"code","2084d67b":"code","efddf02d":"code","8f16dceb":"code","b18a5f64":"code","58fab4f2":"code","054916bd":"code","4a18d396":"code","5ee14dd0":"code","f6a25d36":"code","511aebcb":"code","68710c65":"code","05158595":"code","f9fe1ade":"code","a6f8a065":"code","5c978ade":"code","27bf16ab":"code","9dd1d4c4":"code","042d78b0":"code","8bf35550":"code","b4436b90":"code","b5f9dc1f":"code","66f483a3":"code","0300f999":"code","119b4bae":"code","14b1ddd1":"code","c54ba5e4":"code","1c3b7b26":"code","6d75569a":"code","39581a4c":"code","f87d3890":"code","5ade88a3":"code","f34d96fe":"code","ab353bd5":"code","d5f3b040":"code","39944c91":"code","34e1c8db":"code","dad1b4d4":"code","9b9ff214":"code","f835fda6":"code","6aa6fe76":"code","e004adc4":"code","36d442f5":"code","d8586459":"code","7d933cb5":"code","081d46bf":"code","a5ad4223":"code","a0c57873":"code","b7358a17":"code","2682bf6c":"code","b3aafd2c":"code","4a97db92":"code","6a78a8b4":"code","d28a6387":"code","7762938f":"code","1c36122a":"code","d5df0c9c":"code","f54c80da":"code","1d39f908":"code","9717d910":"code","daac4d42":"code","52a80a7e":"code","e42719c6":"code","77c08e7b":"code","1058a467":"code","1ab58410":"code","28dedb1e":"code","02cdef0a":"markdown","f2d0364c":"markdown","7880b51a":"markdown","3bc55dbf":"markdown","8827c489":"markdown","2dac3ed3":"markdown","d75f4165":"markdown","b543730e":"markdown","7cfc404f":"markdown","ff381e6b":"markdown","f98313f2":"markdown","d659b055":"markdown","6af1aa87":"markdown","cccdc67e":"markdown","df6c2685":"markdown","00d98e35":"markdown","32a86994":"markdown","21b46aaf":"markdown","9aca98a9":"markdown","6ca79300":"markdown"},"source":{"b2cd2687":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom datetime import datetime","f90252cd":"from sklearn.metrics import mean_squared_error , mean_absolute_error\nimport xgboost as xgb\nfrom xgboost import plot_importance, plot_tree\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostRegressor\nfrom sklearn.metrics import accuracy_score","20be4777":"class color:  # Testing to make the heading look a liitle more impressive\n   BOLD = '\\033[1m'","32a62f16":"df = pd.read_csv(\"..\/input\/demand-forecasting-kernels-only\/train.csv\")\ndf.head()","3ba3354f":"split = \"2017-01-01\"","78450542":"df['date'] =  pd.to_datetime(df['date'])","ee3cf754":"split = \"2017-01-01\"","b0c04c65":"df['ItemStoreCombined'] = df['item'].map(str) + '-' + df['store'].map(str) \n# this is used in particular to ensure the rolling forecast data does not leak from 1 item \/ store combination to the next","608b9b8d":"df.head()","a4f41b77":"\ndf['dayofweek'] = df['date'].dt.dayofweek\ndf['quarter'] = df['date'].dt.quarter\ndf['month'] = df['date'].dt.month\ndf['year'] = df['date'].dt.year\ndf['dayofyear'] = df['date'].dt.dayofyear\ndf['dayofmonth'] = df['date'].dt.day\ndf['weekofyear'] = df['date'].dt.weekofyear","d344063a":"df_roll=df.copy() # for the rolling forecast","654526c5":"# for rolling forecast\ndf_roll['sales-1'] = df_roll.groupby('ItemStoreCombined')['sales'].rolling(1).mean().reset_index(0,drop=True)\ndf_roll['sales-2'] = df_roll.groupby('ItemStoreCombined')['sales'].rolling(2).mean().reset_index(0,drop=True)\ndf_roll['sales-3'] = df_roll.groupby('ItemStoreCombined')['sales'].rolling(3).mean().reset_index(0,drop=True)\ndf_roll['sales-4'] = df_roll.groupby('ItemStoreCombined')['sales'].rolling(4).mean().reset_index(0,drop=True)\ndf_roll['sales-5'] = df_roll.groupby('ItemStoreCombined')['sales'].rolling(5).mean().reset_index(0,drop=True)\ndf_roll['sales-6'] = df_roll.groupby('ItemStoreCombined')['sales'].rolling(6).mean().reset_index(0,drop=True)\ndf_roll['sales-7'] = df_roll.groupby('ItemStoreCombined')['sales'].rolling(7).mean().reset_index(0,drop=True)","d47101ea":"df_roll.head(10)","06a04fb1":"# ConsideredLooking forward but chose not to","ce5c1a1d":"df_roll_1_1= df_roll[(df_roll.store==1) & (df_roll.item==1)]","38b87893":"df_roll_2_2 = df_roll[(df_roll.store==2) & (df_roll.item==2)]","7474f11f":"df_roll_2_2.head() # to check rolling mean worked. As this is product 2 in store 2 and as Sales--3 has Nan then the rolling mean is not bleeding from earlier data","3e3d4c1d":"df_roll_1_1.head()  ","c138ff44":"df_roll = df_roll.dropna()  ","f9c4efb8":"df = df.set_index('date')","1ddcbf92":"df.head()","adb03ced":"def calculate_error(test_sales, train_sales , test_prediction, train_prediction):\n    # https:\/\/www.machinelearningplus.com\/time-series\/arima-model-time-series-forecasting-python\/\n    MSE_test = mean_squared_error(y_true=test_sales,  y_pred=test_prediction) # Mean Square Error (MAE)\n    MSE_train = mean_squared_error(y_true=train_sales,  y_pred=train_prediction)\n    MAE_test = mean_absolute_error(y_true=test_sales,  y_pred=test_prediction) # Mean Absolute Error (MAE)\n    MAE_train = mean_absolute_error(y_true=train_sales,  y_pred=train_prediction)\n    MAPE = np.mean(np.abs(test_prediction - test_sales  ) **2)  # Mean Absolute Percentage Error (MAPE)\n    RMSE  = np.mean(np.sqrt((test_prediction - test_sales) ** 2))    \n    return{'MSE_test': MSE_test, 'MSE_train':MSE_train ,'MAE_test': MAE_test, 'MAE_train':MAE_train, 'MAPE':MAPE, 'RMSE':RMSE}","5928ceca":"def calculate_errorb(test_sales,  test_prediction):\n    # https:\/\/www.machinelearningplus.com\/time-series\/arima-model-time-series-forecasting-python\/\n    MSE_test = mean_squared_error(y_true=test_sales,  y_pred=test_prediction) # Mean Square Error (MAE)\n    MAE_test = mean_absolute_error(y_true=test_sales,  y_pred=test_prediction) # Mean Absolute Error (MAE)\n    MAPE = np.mean(np.abs(test_prediction - test_sales  ) **2)  # Mean Absolute Percentage Error (MAPE)\n    RMSE  = np.mean(np.sqrt((test_prediction - test_sales) ** 2))    \n    return{'MSE_test': MSE_test ,'MAE_test': MAE_test,  'MAPE':MAPE, 'RMSE':RMSE}","51be50d7":"df_roll_store_item = df.groupby([\"store\",\"item\"]).rolling('7D').sales.mean() ","a4efb0e8":"print(df_roll_store_item)","fe71ba0a":"df_roll_store_item =df_roll_store_item.reset_index()","9890693e":"df_roll_store_item.head()","5690bd34":"df_roll_store_item.sample(5)","3a67500d":"df_roll_store_item =df_roll_store_item.rename(columns={\"sales\":\"Mean_Amount_7D\"})","31209fec":"df_roll_store_item.head()","f0b2b772":"df_roll_final = df_roll.merge(df_roll_store_item, left_on=['date','store','item'], right_on=['date','store','item'] )","085b67dd":"df_roll_final_7days = df_roll_final[(df_roll_final.date >= '2017-01-01') & (df_roll_final.date < '2017-01-08')]","6cee73be":"df_roll_final_7days.head()","f571336b":"df_roll_final_7days.sum()","31fce7ce":"df_roll_final.head()","d065c773":"df_roll_final = df_roll_final.drop (['sales-1', 'sales-2','sales-3', 'sales-4', 'sales-5', 'sales-6',  'sales-7'],axis=1)","5b6957a7":"df_train = df[ :split ] \ndf_test = df[split : ] ","05ad8ff3":"# df_test_final will be the collated way of comparing the sales and all the forecasting options. \n# Every time a new model is run it will be added to this\ndf_test_final = df_test.copy()","56993e9e":"df_test_final =df_test_final.drop (['dayofweek', 'quarter','month', 'year', 'dayofyear', 'weekofyear'],axis=1)","a617f4c9":"df_test.head()","097b660f":"y_train = df_train.loc[:,'sales']\ny_test= df_test.loc[:,'sales']\nX_train = df_train.drop (['sales'],axis=1) \nX_test = df_test.drop (['sales'],axis=1)","b4a3fb71":"print(y_train.shape)\nprint(y_test.shape)\nprint(X_train.shape)\nprint(X_test.shape)","a444f67f":"X_train.head()","b1d29aa4":"y_train.head()","68dc5cb9":"df_test_final = df_test_final.merge(df_roll_store_item, left_on=['date','store','item'], right_on=['date','store','item'] )","0b15dbb6":"df_test_final.head()","7670ecc2":"df_roll.head()","90a12791":"df_weighted = df_roll.copy() ","2334d23b":"df_weighted['date'] =  pd.to_datetime(df_weighted['date'])","14c0e8b0":"df_weighted = df_weighted.set_index('date')","4a5009d3":"df_weighted.head()","567e3a40":"weights = np.arange(1,11) #this creates an array with integers 1 to 10 included\nweights","a023d194":"wma10 = df_weighted['sales'].rolling(10).apply(lambda prices: np.dot(prices, weights)\/weights.sum(), raw=True)","41498d0d":"wma10.head(20)","c72b59c5":"df_weighted['10-day-WMA'] = wma10","68dbc7d4":"df_weighted.head()","9a5d84a4":"wma10.sample(5)","881cfebd":"df_weighted.info()","c35e9eb2":"df_weighted.tail()","c0ecbbf7":"df_weighted_7days = df_weighted[(df_weighted.index >= '2017-01-01')] ","686d2ddb":"df_weighted_7days = df_weighted_7days[(df_weighted_7days.index < '2017-01-08')]","da8c604b":"df_weighted_7days.head()","b961f1c9":"RMSE_Weighted_10 =  np.mean(np.sqrt((df_weighted_7days['10-day-WMA'] - df_weighted_7days['sales']) ** 2))    ","daf05ebf":"sma10 = df_weighted['sales'].rolling(10).mean()\n","4b1f8e28":"df_weighted['sma10'] = sma10","0d103343":"df_weighted_short = df_weighted[split : \"2017-03-30\"] \ndf_weighted_short_1_1 =  df_weighted_short[(df_weighted_short.store==1) & (df_weighted_short.item==1)]","fdaea96d":"df_weighted_short_1_1.head()","0823cb0d":"plt.figure(figsize = (12,6))\nplt.plot(df_weighted_short_1_1['sales'], label=\"sales\")\nplt.plot(df_weighted_short_1_1['10-day-WMA'], label=\"10-Day WMA\")\nplt.plot(df_weighted_short_1_1['sma10'], label=\"10-Day SMA\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"sales\")\nplt.legend()\nplt.show()","72ce4c98":"XG_model = xgb.XGBRegressor(n_estimators=1000) ","8dfafc7c":"X_test = X_test.drop (['ItemStoreCombined'],axis=1)\nX_train = X_train.drop (['ItemStoreCombined'],axis=1)","f78564b6":"X_test.head()","a291f9d0":"y_test.head()","df952eb1":"y_test.sum()","78406566":"%%time\nXG_model.fit(X_train, y_train,eval_set=[(X_test, y_test)],early_stopping_rounds=50,verbose=False)\n","e771b2ef":"_ = plot_importance(XG_model, height=0.9)","8b6d65c9":"XG_test_prediction = XG_model.predict(X_test)","a1dd309a":"XG_test_all =X_test.copy()\nXG_train_all =X_train.copy()\nXG_test_all['XG prediction'] = XG_model.predict(X_test)\nXG_train_all['XG prediction'] =XG_model.predict(X_train)\nXG_test_all['sales'] = y_test\nXG_train_all['sales'] = y_train\ndf_xg_all = pd.concat([XG_test_all, XG_train_all], sort=False)","5058afe0":"RMSE_XG_initial  = np.mean(np.sqrt((XG_test_all['XG prediction'] - XG_test_all['sales']) ** 2)) \nprint(RMSE_XG_initial)","1a1923bf":"_ = df_xg_all[['sales','XG prediction']].plot(figsize=(15, 5))\n# too many stores and products for graph to be useful apart form seeing the outliers\n# when see the blue this is the outliers\n# there are very few super low sales days\n# there are plenty of days that are very high - which are good for business but hard to forecast","a03fc996":"df_xg_all.sample(10)","9d96f26b":"XG_test_all.head()","9b3b6e44":"XG_test_all['sales']","b603ecad":"XG_test_all['XG prediction']","ceda29e4":"XG_test_all.head()","cb7921c0":"df_test_all_1_1 = XG_test_all[(XG_test_all.store==1)&(XG_test_all.item==1)]","38309f4b":"_ = df_test_all_1_1[['sales','XG prediction']].plot(figsize=(15, 5))","c9038c32":"df_test_all_2_1 = XG_test_all[(XG_test_all.store==2)&(XG_test_all.item==1)]","dd00692a":"_ = df_test_all_2_1[['sales','XG prediction']].plot(figsize=(15, 5))","fd559964":"df_test_all_2_2 = XG_test_all[(XG_test_all.store==2)&(XG_test_all.item==2)]","6dbce659":"_ = df_test_all_2_2[['sales','XG prediction']].plot(figsize=(15, 5))","5dd41034":"XG_test_all.head()","47e7eecf":"# This calls the error calculating function\nXG_Results= calculate_error(XG_test_all['sales'],XG_train_all['sales'],XG_test_all['XG prediction'],XG_train_all['XG prediction'])","2084d67b":"print(XG_Results)","efddf02d":"print(color.BOLD +\"XG Boost Results \")\nprint ('\\033[0m')\n\nprint(\"Mean Squared Error -MSE\")\nprint(\"MSE_test\",XG_Results['MSE_test'])\nprint(\"MSE_train\",XG_Results['MSE_train'])\nprint(\" \")\nprint(\"Mean Absolute Error - MAE\")\nprint(\"MAE_test\",XG_Results['MAE_test'])\nprint(\"MAE_train\",XG_Results['MAE_train'])\nprint(\" \")\nprint(\"Mean Absolute Percentage Error - MPE\")\nprint(\"MAPE\",XG_Results['MAPE'])\nprint(\" \")\nprint(\"Root Mean Squared Error -RMSE\")\nprint(\"RMSE\",XG_Results['RMSE'])\n","8f16dceb":"XGaccuracy = accuracy_score(XG_test_all['sales'], XG_test_all['XG prediction'].round()) \nprint(\"Accuracy: %.2f%%\" % (XGaccuracy * 100.0))\n# This accuracy score does not relfect the accuracy of the result. Instead I looked at the forecasts. I have therefore not used accuracy score further and instead used RMSE and others\/","b18a5f64":"XG_test_all['error'] = XG_test_all['sales'] - XG_test_all['XG prediction']\nXG_test_all['abs_error'] = XG_test_all['error'].apply(np.abs)\nXG_test_all['abs_error_percent'] = (XG_test_all['abs_error'] \/ XG_test_all['sales'])*100\nerror_by_day = XG_test_all.groupby(['year','month','dayofmonth']).mean()[['sales','XG prediction','error','abs_error','store','item']]","58fab4f2":"error_by_day = XG_test_all.groupby(['year','month','dayofmonth']).mean()[['sales','XG prediction','error','abs_error','store','item']]\n1\nerror_by_day.sort_values('error', ascending=True).head(5)","054916bd":"df_xg_all.head()","4a18d396":"XG_test_all['error']","5ee14dd0":"\nnum_bins = 100\nplt.title('XG by prod abs error percent')\nplt.hist(XG_test_all['abs_error_percent'], bins =num_bins)\nplt.xlim((0,50))\nplt.show()","f6a25d36":"XG_test_all.head()","511aebcb":"XG_test_all.abs_error_percent.quantile([0.01,0.05,0.1,0.25,0.5,0.75,0.995])\n# used this information for presentation in pack to look at the accuracy of the model","68710c65":"XG_test_all.abs_error_percent.quantile([0.01,0.05,0.1,0.25,0.5,0.75,0.995])\n# used this information for presentation in pack to look at the accuracy of the model","05158595":"XG_test_predictions = XG_test_all.copy()","f9fe1ade":"XG_test_predictions.head()","a6f8a065":"XG_test_predictions = XG_test_predictions.drop (['dayofweek', 'dayofmonth','quarter','month', 'year', 'dayofyear', 'weekofyear'],axis=1)","5c978ade":"df_test_final.sum()","27bf16ab":"df_test_final = df_test_final.merge(XG_test_predictions, left_on=['date','store','item'], right_on=['date','store','item'] )","9dd1d4c4":"df_test_final.sample(10)","042d78b0":"#CatBoostModel=CatBoostRegressor(iterations=50, depth=3, learning_rate=0.1, loss_function='RMSE')\nCatBoostModel=CatBoostRegressor()","8bf35550":"CatBoostModel.fit(X_train, y_train,eval_set=(X_test, y_test),plot=True)","b4436b90":"catboostpred = CatBoostModel.predict(X_test)","b5f9dc1f":"print(catboostpred)","66f483a3":"CAT_test_all =X_test.copy()\nCAT_train_all =X_train.copy()\nCAT_test_all['CAT prediction'] = CatBoostModel.predict(X_test)\nCAT_train_all['CAT prediction'] =CatBoostModel.predict(X_train)\nCAT_test_all['sales'] = y_test\nCAT_train_all['sales'] = y_train\ndf_CAT_all = pd.concat([CAT_test_all, CAT_train_all], sort=False)\n","0300f999":"CAT_test_all.sum()","119b4bae":"df_test_all_1_1 = CAT_test_all[(CAT_test_all.store==1)&(CAT_test_all.item==1)]","14b1ddd1":"_=df_test_all_1_1[['sales','CAT prediction']].plot(figsize=(15, 5))","c54ba5e4":"CAT_Results= calculate_error(CAT_test_all['sales'],CAT_train_all['sales'],CAT_test_all['CAT prediction'],CAT_train_all['CAT prediction'])","1c3b7b26":"print(color.BOLD +\"CAT Boost Results \")\nprint ('\\033[0m')\n\nprint(\"Mean Squared Error -MSE\")\nprint(\"MSE_test\",CAT_Results['MSE_test'])\nprint(\"MSE_train\",CAT_Results['MSE_train'])\nprint(\" \")\nprint(\"Mean Absolute Error - MAE\")\nprint(\"MAE_test\",CAT_Results['MAE_test'])\nprint(\"MAE_train\",CAT_Results['MAE_train'])\nprint(\" \")\nprint(\"Mean Absolute Percentage Error - MPE\")\nprint(\"MAPE\",CAT_Results['MAPE'])\nprint(\" \")\nprint(\"Root Mean Squared Error -RMSE\")\nprint(\"RMSE\",CAT_Results['RMSE'])","6d75569a":"df_test_final = df_test_final.merge(CAT_test_all, left_on=['date','store','item'], right_on=['date','store','item'] )","39581a4c":"df_test_final.head()","f87d3890":"df_test_final.sum()","5ade88a3":"df_test_final.sample(5)","f34d96fe":"df_test_final_1_1= df_test_final[(df_test_final.store==1) & (df_test_final.item==1)]\n\n#df_test_final_1_1= df_test_final_Auto[(df_test_final_Auto.store==1) & (df_test_final_Auto.item==1)]\ndf_test_final_1_1_Jan = df_test_final_1_1[(df_test_final.date<'2017-01-31')]","ab353bd5":"df_test_final_1_1.sample(3)","d5f3b040":"RMSE_1_1_XG  = np.mean(np.sqrt((df_test_final_1_1['XG prediction'] - df_test_final_1_1['sales']) ** 2)) \nprint(RMSE_1_1_XG)","39944c91":"df_test_final_1_1_NovDec = df_test_final_1_1[(df_test_final.date>'2017-10-31')]","34e1c8db":"df_test_final_1_1_Jan.info()","dad1b4d4":"df_test_final_1_1_Jan.head(2)","9b9ff214":"f, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(10)\n_ = df_test_final_1_1_Jan[['XG prediction', 'CAT prediction','sales_x']].plot(ax=ax, style=['-','-','.'])\nax.set_ylim(0, 50)\n#ax.set_xbound(lower='12-12-2017', upper='31-12-2017')\nplot = plt.suptitle('Jan 2017 sales and forecast for product 1 in store 1')","f835fda6":"df_test_final_7days = df_test_final[(df_test_final.date>'2017-01-01')]","6aa6fe76":"df_test_final_7days = df_test_final_7days[(df_test_final_7days.date<'2017-01-08')]","e004adc4":"df_test_final_7days.head()","36d442f5":"RMSE_7_days_Cat  = np.mean(np.sqrt((df_test_final_7days['CAT prediction'] - df_test_final_7days['sales_x']) ** 2)) \nprint(RMSE_7_days_Cat)","d8586459":"df_test_final_new = df_test_final.copy()","7d933cb5":"df_test_final_new['date'] =  pd.to_datetime(df_test_final_new['date'])","081d46bf":"df_test_final_new = df_test_final_new.set_index('date')","a5ad4223":"DailyFinal = df_test_final_new.resample('D').sum()","a0c57873":"DailyFinal.head()","b7358a17":"RMSE_daily_XG  = np.mean(np.sqrt((DailyFinal['XG prediction'] - DailyFinal['sales_x']) ** 2)) \nprint(RMSE_daily_XG)","2682bf6c":"RMSE_daily_CAT  = np.mean(np.sqrt((DailyFinal['CAT prediction'] - DailyFinal['sales_x']) ** 2)) \nprint(RMSE_daily_CAT)","b3aafd2c":"MonthlyFinal = df_test_final_new.resample('M').sum()","4a97db92":"MonthlyFinal.head()","6a78a8b4":"MonthlyFinal.info()","d28a6387":"RMSE_monthly_XG  = np.mean(np.sqrt((MonthlyFinal['XG prediction'] - MonthlyFinal['sales_x']) ** 2)) \nprint(RMSE_monthly_XG)","7762938f":"RMSE_monthly_CAT  = np.mean(np.sqrt((MonthlyFinal['CAT prediction'] - MonthlyFinal['sales_x']) ** 2)) \nprint(RMSE_monthly_CAT)","1c36122a":"df_test_final.sample(10)","d5df0c9c":"Store_Month_Test_Final = df_test_final_new.groupby(['store']).resample('M').sum()","f54c80da":"Store_Month_Test_Final.tail(10)","1d39f908":"RMSE_Store_Month_XG  = np.mean(np.sqrt((Store_Month_Test_Final['XG prediction'] - Store_Month_Test_Final['sales_x']) ** 2)) \nprint(RMSE_Store_Month_XG)","9717d910":"RMSE_Store_Month_Cat  = np.mean(np.sqrt((Store_Month_Test_Final['CAT prediction'] - Store_Month_Test_Final['sales_x']) ** 2)) \nprint(RMSE_Store_Month_Cat)","daac4d42":"Store_Month_Test_Final.info()","52a80a7e":"Store_item_Month_Test_Final = df_test_final_new.groupby(['store','item']).resample('M').sum()","e42719c6":"Store_item_Month_Test_Final.head()","77c08e7b":"RMSE_Store_item_XG  = np.mean(np.sqrt((Store_item_Month_Test_Final['XG prediction'] - Store_item_Month_Test_Final['sales_x']) ** 2)) \nprint(RMSE_Store_item_XG)","1058a467":"RMSE_Store_item_Month_Cat  = np.mean(np.sqrt((Store_item_Month_Test_Final['CAT prediction'] - Store_item_Month_Test_Final['sales_x']) ** 2)) \nprint(RMSE_Store_item_Month_Cat)","1ab58410":"print(color.BOLD +\"RMSE \")\nprint ('\\033[0m')\n\nprint(\"Root Mean Squared Error -RMSE\")\nprint(\"RMSE XG Boost\",XG_Results['RMSE'])\nprint(\"RMSE\",CAT_Results['RMSE'])","28dedb1e":"df_test_final.sum()","02cdef0a":"# To check rolling mean is working correctly","f2d0364c":"# Weighted and SMA","7880b51a":"# XG Boost","3bc55dbf":"# Set Date as Index","8827c489":"# By Store by Item","2dac3ed3":"# Splitting and make Test Train and Main Tracking Option","d75f4165":"# added some forecasts form Amazon and compared them - that are NOT included here","b543730e":"# Add XG Boost Results to final(master tab)","7cfc404f":"# Main Modelling for Time Series Store forecast\nBy Alex Dance https:\/\/www.linkedin.com\/in\/alex-dance\/\nThis notebook is one of several notebooks for a project to improve store and product forecasts\nEDA \u2013 Exploratory Data Analysis \u2013 includes working with annual forecasts\nMain Modelling\nXG Boost modelling by Month\nWeighted average\nARIMA \u2013 Month and Other Modelling\nDeep Learning","ff381e6b":"# Monthly Final","f98313f2":"# Plotting all together","d659b055":"# Group by Store","6af1aa87":"# Final Compare","cccdc67e":"# Add Rolling ","df6c2685":"# Functions to calculate multiple error metrics\n* calculate_error is for more metrics\n* calculate errorb is for less metrics","00d98e35":"# Final Results","32a86994":"# Rolling Forecast","21b46aaf":"# Cat Boost","9aca98a9":"# Feature Engineering","6ca79300":"# Covert to By Day"}}