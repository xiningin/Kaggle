{"cell_type":{"106c3804":"code","dcf23346":"code","33e5daf3":"code","3c206521":"code","12d2374e":"code","3c5e5e92":"code","085b164f":"code","cc1ea38f":"code","f84a50e3":"code","a9c2a008":"code","5eb06a02":"markdown","c848b418":"markdown","06ac99d7":"markdown","e064b63d":"markdown","58ef131c":"markdown","4534f0b3":"markdown","c5387fee":"markdown","79c42409":"markdown"},"source":{"106c3804":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\nfrom keras.utils import np_utils\n%matplotlib inline","dcf23346":"data = pd.read_csv(\"..\/input\/train.csv\")\ndata = data.values\n#Taking labels(first column) out of data.\nlabel = data[:,0]\n\n# Drop 'label' column\ndata = data[:,1:]\n\nprint(\"Data loaded, ready to go!\")","33e5daf3":"#plot distribution of label values\ng = sns.countplot(label)","3c206521":"#splitting data into train and valid\ntrain_data=data[:35000,:]\nvalid_data=data[35000:,:]\n\n#reshaping to make it in proper input shape for a neural network\ntrain_data = train_data.reshape(train_data.shape[0], 1, 28, 28).astype('float32')\nvalid_data = valid_data.reshape(valid_data.shape[0], 1, 28, 28).astype('float32')\n\n#normalise data\ntrain_data = train_data \/ 255\nvalid_data= valid_data\/255\n\n#spliting label into train and valid\ntrain_label = label[:35000]\nvalid_label = label[35000:]\n\n#one-hot-encoding\n#Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\ntrain_label = np_utils.to_categorical(train_label)\nvalid_label = np_utils.to_categorical(valid_label)\n\n#print shape\nprint(\"train_data shape: \",train_data.shape)\nprint(\"train_label shape: \",train_label.shape)\nprint(\"valid_data shape: \",valid_data.shape)\nprint(\"valid_label shape: \",valid_label.shape)","12d2374e":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers import Flatten\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.utils import np_utils\nfrom keras import backend as K\nK.set_image_dim_ordering('th')\n\n# fix random seed for reproducibility\nseed = 7\nnp.random.seed(seed)","3c5e5e92":"def create_model():\n    # create model\n    model = Sequential()\n    model.add(Conv2D(32, (5, 5), input_shape=(1, 28, 28), activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.2))\n    model.add(Flatten())\n    model.add(Dense(128, activation='relu'))\n    model.add(Dense(10, activation='softmax'))\n    # Compile model\n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model","085b164f":"# build the model\nmodel = create_model()\n# Fit the model\nmodel.fit(train_data, train_label, validation_data=(valid_data, valid_label), epochs=10, batch_size=200, verbose=2)\n","cc1ea38f":"# Final evaluation of the model\nscores = model.evaluate(valid_data, valid_label, verbose=0)\nprint(\"CNN Error: %.2f%%\" % (100-scores[1]*100))","f84a50e3":"model.save(\"model.h5\")\nprint(\"model weights saved in model.h5 file\")","a9c2a008":"from keras.models import model_from_json\nmodel_json = model.to_json()\nwith open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)\nprint(\"model saved as model.json file\")","5eb06a02":"Importing data from csv files:\n1. train.csv : The training data set, has 785 columns. The first column, called \"label\", is the digit that was drawn by the user. The rest of the columns contain the pixel-values of the associated image.\n2. test.csv: The test data set, (test.csv), is the same as the training set, except that it does not contain the \"label\" column.\n\nReading train data using pandas.\n\n","c848b418":"Importing required python modules\n1. pandas and numpy for reading csv files and saving the results\n2. matplotlib and seaborn for plotting graphs to visualise and make sense of data\n3. np_utils for \"one-hot encoding\" of labels","06ac99d7":"Passing training and validation data along with labels to model","e064b63d":"Define a function to create a model","58ef131c":"Importing modules needed to build model\nKeras does provide a lot of capability for creating convolutional neural networks.","4534f0b3":"Exciting! we have trained our model\nSaving model weights for later use","c5387fee":"Diving data and label into two parts: train and validation.\nWe have a separate test.csv file for testing our model predictions","79c42409":"Saving model information in .json file"}}