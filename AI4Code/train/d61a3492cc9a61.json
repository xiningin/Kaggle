{"cell_type":{"d4475040":"code","e17c58e4":"code","20888fca":"code","599801d4":"code","e9314e71":"code","f753769c":"code","a57ccb5d":"code","fb4a2496":"code","e9f24076":"code","6bca6609":"code","9d3e6b59":"code","0343a93a":"code","c0fde99d":"code","7a62f02f":"code","cce34baf":"code","c0a63ddd":"code","24084296":"code","ac83bfd9":"markdown","c86c0426":"markdown","3abf563b":"markdown","2de7f311":"markdown","77366f7b":"markdown","46050e63":"markdown","7a56c089":"markdown","c5d96bdd":"markdown","58005418":"markdown","ea447adc":"markdown","fbb495b3":"markdown"},"source":{"d4475040":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e17c58e4":"# Importing Required Libraries\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msn","20888fca":"#Reading the data using pandas\nheart = pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\nheart.head(10) # Displaying first few lines of the data","599801d4":"#Displaying a concise summary of a DataFrame\nheart.info()","e9314e71":"#Generating descriptive statistics.\nheart.describe()","f753769c":"msn.matrix(heart)","a57ccb5d":"heart.isnull().any()","fb4a2496":"fig , ((ax1, ax2), (ax3, ax4), (ax5, ax6)) = plt.subplots(nrows = 3, ncols = 2, figsize = (8, 10))\n\nax = [ax1, ax2 ,ax3, ax4 ,ax5]\n\nfeature = ['creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_creatinine', 'serum_sodium']\n\nfor i, axes in zip(feature, ax):\n    sns.boxplot(heart[i], ax = axes)\n    \n    axes.set_title(i, fontsize = 15)\n    axes.set_xticks([])\n    axes.set_xlabel('')\n    \nax6.set_visible(False)\nplt.tight_layout()\nplt.show()","e9f24076":"# Correcting Outilers using IQR Score\nQ1 = heart.quantile(0.25)\nQ3 = heart.quantile(0.75)\nIQR = Q3 - Q1\nprint('IQR Score : \\n\\n{}'.format(IQR))\n\nheart = heart[~((heart < (Q1 - 1.5 * IQR)) |(heart > (Q3 + 1.5 * IQR)))]\n\n#Filling the outliers value with mean value of corresponding features\nheart = heart.fillna(heart.mean())\n\nfig , ((ax1, ax2), (ax3, ax4), (ax5, ax6)) = plt.subplots(nrows = 3, ncols = 2, figsize = (8, 10))\nfig.suptitle('After Correcting outliers', fontsize = 20)\n\nax = [ax1, ax2 ,ax3, ax4 ,ax5]\n\nfeature = ['creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_creatinine', 'serum_sodium']\n\nfor i, axes in zip(feature, ax):\n    sns.boxplot(heart[i], ax = axes)\n    \n    axes.set_title(i, fontsize = 15)\n    axes.set_xticks([])\n    axes.set_xlabel('')\n    \n\nax6.set_visible(False)\n\nplt.show()\nplt.tight_layout()\nfig.subplots_adjust(top=0.888)","6bca6609":"plt.figure(figsize = (10, 10)) \nsns.heatmap(heart.corr(), annot=True)","9d3e6b59":"fig , ((ax1, ax2), (ax3, ax4), (ax5, ax6)) = plt.subplots(nrows = 3, ncols = 2, figsize = (8, 10))\n\nax = [ax1, ax2 ,ax3, ax4 ,ax5, ax6]\n\nfeature = ['age', 'creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_creatinine', 'serum_sodium']\n\nfor i, axes in zip(feature, ax):\n    sns.distplot(heart[i][heart.DEATH_EVENT == 1], ax = axes, label = 'Deceased')\n    sns.distplot(heart[i][heart.DEATH_EVENT == 0], ax = axes, label = 'Not Deceased')\n    \n    axes.set_title(i, fontsize = 15)\n    #axes.set_xticks([])\n    axes.set_xlabel('')\n    axes.legend()\n\nplt.tight_layout()\nplt.show()","0343a93a":"X = heart[['age', 'anaemia', 'creatinine_phosphokinase', 'diabetes',\n       'ejection_fraction', 'high_blood_pressure', 'platelets',\n       'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']]\n\ny = heart[['DEATH_EVENT']]","c0fde99d":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, np.array(y).ravel(), random_state=1,test_size=0.2)","7a62f02f":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import f1_score\n\nLogistic = LogisticRegression(solver = 'liblinear', max_iter=10000).fit(X_train, y_train)\n\nLog_pred = Logistic.predict(X_test)\n\nprint('Accuracy Score : {:.2f}%'.format(Logistic.score(X_test, y_test)*100))\nprint('\\nf1 Score : ', f1_score(y_test, Log_pred))\nprint('\\nPrecision Score : ', precision_score(y_test, Log_pred))\nprint('\\nRecall Score : ', recall_score(y_test, Log_pred))","cce34baf":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import f1_score\n\nRndClf = RandomForestClassifier(n_estimators = 100, max_depth = 15, max_leaf_nodes = 40).fit(X_train, y_train)\n\nRnd_pred = RndClf.predict(X_test)\n\nprint('Accuracy Score : {:.2f}%'.format(RndClf.score(X_test, y_test)*100))\nprint('\\nf1 Score : ', f1_score(y_test, Rnd_pred))\nprint('\\nPrecision Score : ', precision_score(y_test, Rnd_pred))\nprint('\\nRecall Score : ', recall_score(y_test, Rnd_pred))","c0a63ddd":"from sklearn.svm import SVC\nfrom sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import f1_score\n\nsvc = SVC().fit(X_train, y_train)\n\nsvc_pred = svc.predict(X_test)\n\nprint('Accuracy Score : {:.2f}%'.format(svc.score(X_test, y_test)*100))","24084296":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import f1_score\n\ntree = DecisionTreeClassifier(max_depth = 15, max_features = 10, max_leaf_nodes = 45).fit(X_train, y_train)\n\ntree_pred = tree.predict(X_test)\n\nprint('Accuracy Score : {:.2f}%'.format(tree.score(X_test, y_test)*100))\nprint('\\nf1 Score : ', f1_score(y_test, tree_pred))\nprint('\\nPrecision Score : ', precision_score(y_test, tree_pred))\nprint('\\nRecall Score : ', recall_score(y_test, tree_pred))","ac83bfd9":"### Decision Tree Classifier","c86c0426":"# Missing Values","3abf563b":"# Outliers Or Variance Detection\n* In creatinine_phosphokinase, ejection_fraction, platelets, serum_creatinine, and serum_sodium.","2de7f311":"# Model Training","77366f7b":"### Logistic Regression","46050e63":"### RandomForestClassifier","7a56c089":"* No Missing values present in the data.","c5d96bdd":"# Correlation between features\n   * Computing pairwise correlation of columns, excluding NA\/null values.","58005418":"# Visualization","ea447adc":"### Support Vector Machine","fbb495b3":"* As there are lots of outliers\/variance in creatinine_phosphokinase, platelets, serum_creatinine.\n* Correcting these outliers\/variance using IQR Score."}}