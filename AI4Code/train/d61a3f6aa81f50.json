{"cell_type":{"ff7d95d7":"code","c46821e2":"code","f70e63c4":"code","f3ed0a91":"code","8b9a9c50":"code","9fabd79e":"code","c1abdc5f":"code","700b095a":"code","97672be2":"code","ee6f9230":"code","93790ff0":"markdown","c5250b82":"markdown","860fb071":"markdown","bebdab55":"markdown","f2ea56af":"markdown","e2e72bcd":"markdown","0d1a3be2":"markdown","470b1004":"markdown","83331a2f":"markdown","cbd71208":"markdown","7195291d":"markdown"},"source":{"ff7d95d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n# Importa Packages \nimport numpy as np                # linear algebra\nimport pandas as pd               # data frames\nimport seaborn as sns             # visualizations\nimport matplotlib.pyplot as plt   # visualizations\nimport scipy.stats                # statistics\nfrom sklearn import preprocessing\nfrom scipy.cluster.hierarchy import dendrogram, linkage\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c46821e2":"# Upload data\nmovies = pd.read_csv('..\/input\/movies.csv', encoding = \"ISO-8859-1\")\n\n#Visualizaci\u00f3n de los 5 primeros registros\nprint(movies.head())\n# informacion de las variables\nprint(movies.info())\n# shape de los datos\nprint(movies.shape)\n# Descripcion de los datos\nmovies.describe()","f70e63c4":"# Compute the correlation matrix\ncorr=movies.iloc[:,~movies.columns.isin(['company','country','director','genre','name','released',\n                                         'star','writer'])].corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n\nplt.show()\n\n","f3ed0a91":"g = sns.PairGrid(movies.loc[:,[\"budget\",\"gross\",\"runtime\",\"score\",\"votes\",\"year\"]])\ng.map_diag(plt.hist, histtype=\"step\", linewidth=3)\ng.map_offdiag(plt.scatter)","8b9a9c50":"sin = linkage(movies.loc[:,[\"gross\",\"score\"]],method=\"single\")\n#\"budget\",\"gross\",\"runtime\",\"score\",\"votes\",\"year\"\nplt.figure(figsize=(18,6))\ndendrogram(sin, leaf_rotation=90)\nplt.xlabel('Index')\nplt.ylabel('Euclidean distances')\nplt.suptitle(\"DENDROGRAM SINGLE METHOD\",fontsize=8)\nplt.show()\n","9fabd79e":"from scipy.cluster.hierarchy import fcluster\nmovies_clus=movies.copy()\n\nmovies_clus['2_clust']=fcluster(sin,2, criterion='maxclust')\nmovies_clus['3_clust']=fcluster(sin,3, criterion='maxclust')\nmovies_clus['10_clust']=fcluster(sin,10, criterion='maxclust')\nmovies_clus.head()\n\nplt.figure(figsize=(24,4))\n\nplt.suptitle(\"Hierarchical Clustering Single Method\",fontsize=18)\n\nplt.subplot(1,3,1)\nplt.title(\"K = 2\",fontsize=14)\nsns.scatterplot(x=\"gross\",y=\"votes\", data=movies_clus, hue=\"2_clust\")\n\nplt.subplot(1,3,2)\nplt.title(\"K = 3\",fontsize=14)\nsns.scatterplot(x=\"gross\",y=\"votes\", data=movies_clus, hue=\"3_clust\")\n\nplt.subplot(1,3,3)\nplt.title(\"K = 10\",fontsize=14)\nsns.scatterplot(x=\"gross\",y=\"votes\", data=movies_clus, hue=\"10_clust\")\n","c1abdc5f":"g = sns.PairGrid(movies_clus, vars=[\"budget\",\"gross\",\"runtime\",\"score\",\"votes\",\"year\"], hue='3_clust',palette=\"RdBu\")\ng.map(plt.scatter)\ng.add_legend()\n","700b095a":"com = linkage(movies.loc[:,[\"gross\",\"score\"]],method=\"complete\")\n#\"budget\",\"gross\",\"runtime\",\"score\",\"votes\",\"year\"\nplt.figure(figsize=(18,6))\ndendrogram(com, leaf_rotation=90)\nplt.xlabel('Index')\nplt.ylabel('Euclidean distances')\nplt.suptitle(\"DENDROGRAM COMPLETE METHOD\",fontsize=8)\nplt.show()\n","97672be2":"from scipy.cluster.hierarchy import fcluster\nmovies_clus=movies.copy()\n\nmovies_clus['2_clustCom']=fcluster(com,2, criterion='maxclust')\nmovies_clus['3_clustCom']=fcluster(com,3, criterion='maxclust')\nmovies_clus['10_clustCom']=fcluster(com,10, criterion='maxclust')\nmovies_clus.head()\n\nplt.figure(figsize=(24,4))\n\nplt.suptitle(\"Hierarchical Clustering Complete Method\",fontsize=18)\n\nplt.subplot(1,3,1)\nplt.title(\"K = 2\",fontsize=14)\nsns.scatterplot(x=\"gross\",y=\"votes\", data=movies_clus, hue=\"2_clustCom\")\n\nplt.subplot(1,3,2)\nplt.title(\"K = 3\",fontsize=14)\nsns.scatterplot(x=\"gross\",y=\"votes\", data=movies_clus, hue=\"3_clustCom\")\n\nplt.subplot(1,3,3)\nplt.title(\"K = 10\",fontsize=14)\nsns.scatterplot(x=\"gross\",y=\"votes\", data=movies_clus, hue=\"10_clustCom\")\n","ee6f9230":"g = sns.PairGrid(movies_clus, vars=[\"budget\",\"gross\",\"score\",\"votes\"], hue='3_clustCom', palette=\"RdBu\")\ng.map(plt.scatter)\ng.add_legend()","93790ff0":"El dendograma nos indica que no es posible realizar mas de un cluster","c5250b82":"**Objetivo**\n* Se puede anticipar el rating que va a obtener una pel\u00edcula de acuerdo a sus caracteristicas?, an\u00e1lisis mediante clusters jerarquicos.","860fb071":"Tenemos informaci\u00f3n sobre 6820 peliculas entre los a\u00f1os 1986 y 2016, nos interesa realizar an\u00e1lisis de closuter sobre las variables numericas;\n*  Budget: Presupuesto de una pelicula. Algunas pel\u00edculas no tienen, por lo que aparece como 0.\n*  Gross:  Los ingresos de la pel\u00edcula\n*  Runtime: Tiempo de ejecuci\u00f3n: duraci\u00f3n de la pel\u00edcula\n*  Score: Calificaci\u00f3n de usuario de IMDb\n*  Votes: N\u00famero de votos de los usuarios ","bebdab55":"**An\u00e1lisis de datos**\n","f2ea56af":"Definitivamente es obvio que no se pueden realizar clusters sobre el conjunto de datos, con el metodo de \"Single\".\nIntenatremos con \"Complete\" y depende de los resultados se probara con transformaci\u00f3n de datos ","e2e72bcd":"En este caso es mas facil identificar tres grupos entre las peliculas \"taquilleras\" y \"Mejor votadas\"","0d1a3be2":"Vemos una correlaci\u00f3n entre los ingresos de la pelicula y los votos, el presupuesto y los ingresos.","470b1004":"Podemos identificar grupos: donde las pel\u00edculas m\u00e1s taquilleras tienen mejores votaci\u00f3n o las pel\u00edculas con m\u00e1s presupuesto tienen mejor recaudo.\n\n\n**Conclusi\u00f3n:**\nSin embargo con estas variables no es f\u00e1cil identificar grupos de pel\u00edculas, se puede decir que entre m\u00e1s taquillera la pel\u00edcula mejor votaci\u00f3n va a tener, como segundo paso esta explorar realizar estos grupos con variables categ\u00f3ricas por ejemplo: Productora o Director, e identificar el \u00e9xito con estas variables.\n","83331a2f":"No se observan grupos diferenciados en las distintas variables, tal vez se puedan formar dos grupos con los votos y las ganacias de las peliculas.","cbd71208":"***An\u00e1lisis de Cluster con el met\u00f3do Jerarquico \"Single\"***","7195291d":"**An\u00e1lisis de Cluster con el met\u00f3do Jerarquico \"Complete\"**\n"}}