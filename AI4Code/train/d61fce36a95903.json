{"cell_type":{"53738a0a":"code","32182c2a":"code","0381baae":"code","246f6d77":"code","4993ff6e":"code","9a929e05":"code","6d1abc85":"code","1af35a9e":"code","788cf705":"markdown","356e5ffc":"markdown","e6dd3fc4":"markdown","877024ed":"markdown","a7b4c6ae":"markdown","92051b4e":"markdown","7a05d330":"markdown","78564e86":"markdown","32202b16":"markdown","71e6754a":"markdown"},"source":{"53738a0a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n\n# Any results you write to the current directory are saved as output.","32182c2a":"\nimport keras\nfrom keras.models import Sequential # This package is used for implenting NN as layers\nfrom keras.layers import Convolution2D  #  Required for adding the convolution layer \nfrom keras.layers import MaxPooling2D  #  Required for adding the pooling layer\nfrom keras.layers import Flatten   # Required for converting the pooled feature maps into large featured vector\nfrom keras.layers import Dense, Activation  # Required for implementing the fully connected neural network","0381baae":"# Initialing the CNN\nclassifier = Sequential() \n#  Implementing the convolution layer\nclassifier.add(Convolution2D(32,(3,3), input_shape=(64,64,3), activation='relu'))  \n# no of filters =32, kernel size (3,3), the shape of input images (64,64,3) \n# Implementing the Max pooling layer\n# Adding the non-linearity to the convolution layer\nclassifier.add(MaxPooling2D(pool_size=(2,2)))  # implement the pooling layer and reduced the size of the feature map\n#  Implenting the Flatten Layer\n#  Before feeding into the neural network , we flatten the featured map into hughe single dimensional vector\nclassifier.add(Flatten())\n#  Implementing the Neural Network \n# Implementing th hidden layer\nclassifier.add(Dense(128))\nclassifier.add(Activation('relu'))\n# implementing the Output layer\nclassifier.add(Dense(1))\nclassifier.add(Activation('sigmoid'))\n# Compiling the CNN\nclassifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n\n","246f6d77":"from keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(\n        rescale=1.\/255,\n        shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True)\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\n","4993ff6e":"training_set = train_datagen.flow_from_directory(\n        '\/kaggle\/input\/menwomen-classification\/traindata\/traindata\/',\n        target_size=(64, 64),\n        batch_size=32,\n        class_mode='binary')\n\ntest_set = test_datagen.flow_from_directory(\n         '\/kaggle\/input\/menwomen-classification\/testdata\/testdata\/',\n        target_size=(64, 64),\n        batch_size=32,\n        class_mode='binary')\n","9a929e05":"history=classifier.fit_generator(\n        training_set,\n        steps_per_epoch=2891,\n        epochs=5,\n        validation_data=test_set,\n        validation_steps=1330)","6d1abc85":"classifier.save_weights('classifier.h5')","1af35a9e":"import matplotlib.pyplot as plt\n# Plot training & validation accuracy values\nplt.plot(history.history['accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.show()\n\n# Plot training & validation loss values\nplt.plot(history.history['loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.show()","788cf705":"# Data Loading and Data Augmentation \n\nIn this section we will load the training and test data set in to the python envvoirnment, as our dataset is small, \nso in order to achieve better accuray we will be Keras built in data augmentation function to increase the data.\nThe dataset is divided in to two categories.i.e training data set and test data set. \nThe training data directory and test data directory containing one subdirectory per image class, filled with .jpg images.\n\nIn the training set we have 1000 images of men and 1912 images of women. \nin the test set we have 418 image of men and 915 images of women.\n\nWe will be using Keras ImageDataGenerator class for applying random transformations and normalization on our image data set during the training phase. We will be using below mentioned options for data augmentation. (for further information see keras documentation). Note we shall apply data augmentation to the training set.\n\n* **shear_range** is for randomly applying shearing transformations.\n* **zoom_range** is for randomly zooming inside pictures.\n* **horizontal_flip** is for randomly flipping half of the images horizontally. \n* **rescale** is a value by which we will multiply the data by scaling with a 1\/255. factor and convert values between 0 and 1.","356e5ffc":"# Saving the model ","e6dd3fc4":"# Men-Women Image Classifier Using CNN","877024ed":"# Importing the Libraries      \nIn order to build the convolution neural network model in the Keras, we will first import the libraries.\nwe will be importing standard tf.keras package.","a7b4c6ae":"# Plotting the Accuracy and Loss Plots\n\nNow we will plot the accuray and loss plots inorder to see model's accuray and loss function during training phase. \nAs the number of epochs increase the model accuray gets higher and loss reduces. \n\n\n\n","92051b4e":"# Fitting the Model \n\nNow we will give the augmented images data generator and test the data generator to the .fit_generator for fitting the model.\n","7a05d330":"# Conclusion and further improvments \nThe model has an accuray of 0,95 which is reasonably good but we can further improve it.\nwe can imporve the accuray of the model using by performing advanced data augmentation techniques , drop outs, use of regularization (L1 and L2) or\nfine tuning the model by addng more convolution layers.","78564e86":"# Building the Classifier\n\nNow we will build the image classifier, we will be using the Adam Optimizer. Since its Binary Classification task, we will be using binary_crossentropy as loss. The model is shown in the figure below.\n\n![](https:\/\/raw.githubusercontent.com\/saadpd\/deep-learning\/master\/Men-Women%20Classification.jpg)","32202b16":"# Convolution Neural Network\n\nIn this kernel, we will be using Keras to build convolution neural network model and see how it performs on this new data set i.e. ( Manual collection of images men-women)\n\n\n\n\n\n\n","71e6754a":"# Reference \n1. https:\/\/keras.io\/examples\/cifar10_cnn\/\n2. https:\/\/blog.keras.io\/building-powerful-image-classification-models-using-very-little-data.html\n3. http:\/\/vision.stanford.edu\/cs598_spring07\/papers\/Lecun98.pdf\n4. Convolution Neural Netwroks by Andrew NG ( Coursera Deep learning Specialization )\n\n"}}