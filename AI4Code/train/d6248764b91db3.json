{"cell_type":{"d90fdadb":"code","baa1f11e":"code","86ee456d":"code","af4a5617":"code","dc30f5ff":"code","6c065046":"code","d08e4f02":"code","56fbee0c":"code","c515e14e":"markdown","fc34394f":"markdown","bd5f3a09":"markdown","00796351":"markdown"},"source":{"d90fdadb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","baa1f11e":"#Importing required Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","86ee456d":"#Reading the csv file using pandas\ndata = pd.read_csv(r'\/kaggle\/input\/most-popular-programming-languages-since-2004\/Most Popular Programming Languages from 2004 to 2020.csv')\n\n#Convering the date to Datetime data type\ndata['Date'] = pd.to_datetime(data['Date'])\n\n#Setting date as index\ndata.set_index('Date', inplace = True)\n\n#Displying first few lines of the dataset\ndata.head()","af4a5617":"import missingno as miss\n\nmiss.matrix(data)","dc30f5ff":"data.describe()","6c065046":"#DataFrame Information\ndata.info()","d08e4f02":"mask = data.mean() > 2.5\n\ndata = data.loc[:, mask]\n\nclms = data.columns.tolist()\nclms","56fbee0c":"#%matplotlib notebook\n#pd.plotting.register_matplotlib_converters()\n \nplt.figure(figsize = (15, 8))\nsns.set(style = 'dark')\n\nfor language in clms:\n    sns.lineplot(x = data.index, y = data[language], label = language)\n\nplt.ylabel('Popularity', fontsize = 12)\nplt.xlabel('Year', fontsize = 12)\nplt.title('Popular Prgramming Languages', fontsize = 20)\nplt.legend(loc = 2)\nplt.yticks(fontsize = 10)\nplt.xticks(rotation = 45, fontsize = 10)\nplt.tight_layout()\nplt.show()","c515e14e":"* The above clms list showing our top 10 programming languages.\n\n# Visualization","fc34394f":"* For visualization I'm including only those programming languages whose mean value is greater than 2.5.\n* And I'm doing this using the result as boolean mask.","bd5f3a09":"# Looking for null values","00796351":"* We can see that there are no missing values in the data.\n* Now, we can move to the visualization step."}}