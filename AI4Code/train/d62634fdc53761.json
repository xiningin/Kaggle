{"cell_type":{"06fbc73f":"code","b5911c22":"code","12af1503":"code","336409b7":"code","20a32a4d":"code","3f70d85a":"code","86f2d7f1":"code","79754aba":"code","3aa2a5f6":"code","e09e0057":"code","600e3d79":"code","4809f168":"code","72c29a62":"code","37ecd75d":"code","7cf75041":"code","575dbecf":"code","a59e73bc":"code","c14d62b4":"code","415c8ae0":"code","58e942fc":"code","fbb7b7c4":"code","594d9dfa":"code","184bf553":"code","f503eacb":"code","3e91229a":"code","f74bcafe":"code","3fdc5fa2":"code","9e061b69":"code","292e3c0e":"code","d92d284a":"code","d9ebbe08":"code","12a07399":"code","3705f1d2":"code","03f5e8d0":"code","cb026c41":"code","bb7cb691":"code","8c1d13b9":"code","ed34c6ed":"code","8033b821":"code","7e5e08f4":"code","5f09bbab":"code","09bbdb11":"code","7b20ae72":"code","cf4d493f":"code","2a56cafd":"code","08c3f7f7":"markdown","19b9e337":"markdown","c7464706":"markdown","09f9d2bd":"markdown","3770f8df":"markdown","7b976908":"markdown","f9bd5450":"markdown","a778619a":"markdown","6ab7d6e0":"markdown","34429a40":"markdown","b28a54b0":"markdown","04511422":"markdown","a33b880c":"markdown","3601dc28":"markdown","b4fc96f5":"markdown"},"source":{"06fbc73f":"import warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import  accuracy_score, f1_score, precision_score,confusion_matrix, recall_score, roc_auc_score\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier\nfrom sklearn.svm import SVC\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","b5911c22":"df = pd.read_csv('..\/input\/early-stage-diabetes-risk-prediction-dataset\/diabetes_data_upload.csv')\ndf.head()","12af1503":"df.isna().sum()","336409b7":"df.info()","20a32a4d":"#Distribution of Target Variable\nsns.countplot(df['class'],data=df)\n\n# plotting to create pie chart and bar plot as subplots\nplt.figure(figsize=(14,7))\nplt.subplot(121)\ndf[\"class\"].value_counts().plot.pie(autopct = \"%1.0f%%\",colors = sns.color_palette(\"prism\",7),startangle = 60,labels=[\"Positive\",\"Negative\"],\nwedgeprops={\"linewidth\":2,\"edgecolor\":\"k\"},explode=[.1,0],shadow =True)\nplt.title(\"Distribution of Target  Variable\")\n\nplt.subplot(122)\nax = df[\"class\"].value_counts().plot(kind=\"barh\")\n\nfor i,j in enumerate(df[\"class\"].value_counts().values):\n    ax.text(.7,i,j,weight = \"bold\",fontsize=20)\n\nplt.title(\"Count of Target Variable\")\nplt.show()","3f70d85a":"# Distribution of Gender\nsns.countplot(df['Gender'],hue=df['class'], data=df)\n\nplot_criteria= ['Gender', 'class']\ncm = sns.light_palette(\"red\", as_cmap=True)\n(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)","86f2d7f1":"# Distribution of Polyuria\nsns.countplot(df['Polyuria'],hue=df['class'], data=df)\n\n\nplot_criteria= ['Polyuria', 'class']\ncm = sns.light_palette(\"red\", as_cmap=True)\n(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)","79754aba":"# Distribution of Polydipsia\nsns.countplot(df['Polydipsia'],hue=df['class'], data=df)\n\n\nplot_criteria= ['Polydipsia', 'class']\ncm = sns.light_palette(\"red\", as_cmap=True)\n(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)","3aa2a5f6":"# Distribution of sudden weight loss\nsns.countplot(df['sudden weight loss'],hue=df['class'], data=df)\n\n\nplot_criteria= ['sudden weight loss', 'class']\ncm = sns.light_palette(\"red\", as_cmap=True)\n(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)","e09e0057":"# Distribution of weakness\nsns.countplot(df['weakness'],hue=df['class'], data=df)\n\n\nplot_criteria= ['weakness', 'class']\ncm = sns.light_palette(\"red\", as_cmap=True)\n(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)","600e3d79":"# Distribution of Polyphagia\nsns.countplot(df['Polyphagia'],hue=df['class'], data=df)\n\n\nplot_criteria= ['Polyphagia', 'class']\ncm = sns.light_palette(\"red\", as_cmap=True)\n(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)","4809f168":"# Distribution of Genital thrush\nsns.countplot(df['Genital thrush'],hue=df['class'], data=df)\n\n\nplot_criteria= ['Genital thrush', 'class']\ncm = sns.light_palette(\"red\", as_cmap=True)\n(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)","72c29a62":"# Distribution of visual blurring\nsns.countplot(df['visual blurring'],hue=df['class'], data=df)\n\n\nplot_criteria= ['visual blurring', 'class']\ncm = sns.light_palette(\"red\", as_cmap=True)\n(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)","37ecd75d":"# Distribution of Itching\nsns.countplot(df['Itching'],hue=df['class'], data=df)\n\n\nplot_criteria= ['Itching', 'class']\ncm = sns.light_palette(\"red\", as_cmap=True)\n(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)","7cf75041":"# Distribution of Irritability\nsns.countplot(df['Irritability'],hue=df['class'], data=df)\n\n\nplot_criteria= ['Irritability', 'class']\ncm = sns.light_palette(\"red\", as_cmap=True)\n(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)","575dbecf":"# Distribution of delayed healing\nsns.countplot(df['delayed healing'],hue=df['class'], data=df)\n\n\nplot_criteria= ['delayed healing', 'class']\ncm = sns.light_palette(\"red\", as_cmap=True)\n(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)","a59e73bc":"# Distribution of partial paresis\nsns.countplot(df['partial paresis'],hue=df['class'], data=df)\n\n\nplot_criteria= ['partial paresis', 'class']\ncm = sns.light_palette(\"red\", as_cmap=True)\n(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)","c14d62b4":"# Distribution of muscle stiffness\nsns.countplot(df['muscle stiffness'],hue=df['class'], data=df)\n\n\nplot_criteria= ['muscle stiffness', 'class']\ncm = sns.light_palette(\"red\", as_cmap=True)\n(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)","415c8ae0":"# Distribution of Alopecia\nsns.countplot(df['Alopecia'],hue=df['class'], data=df)\n\n\nplot_criteria= ['Alopecia', 'class']\ncm = sns.light_palette(\"red\", as_cmap=True)\n(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)","58e942fc":"# Distribution of Obesity\nsns.countplot(df['Obesity'],hue=df['class'], data=df)\n\n\nplot_criteria= ['Obesity', 'class']\ncm = sns.light_palette(\"red\", as_cmap=True)\n(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)","fbb7b7c4":"# Function for Pie Plot\ndef plotPie(value, title, label):\n    plt.figure(figsize=(4,4))\n    plt.pie(\n        value.value_counts(),\n        startangle=90,\n        labels = label,\n        autopct=(lambda p:f'{p:.2f}%\\n{p*sum(value.value_counts())\/100 :.0f} items')\n    )\n    plt.title(title)\n    plt.show()","594d9dfa":"df_symptoms = df[df.columns.difference([\"Age\", \"class\", \"Gender\"])]\nplt.figure(figsize=(5,5))\n\nfor column in df_symptoms.columns:\n    plotPie(df_symptoms[column], column.capitalize(), [\"Yes\", \"No\"])","184bf553":"# Changing Postive to 1 and Negative to 0\ndf['class'] = df['class'].apply(lambda x: 0 if x=='Negative' else 1)\ndf['class'].head()","f503eacb":"# Separating Target feature\nX = df.drop(['class'], axis=1)\ny = df['class']","3e91229a":"# Storing Features\nobjectList = X.select_dtypes(include = \"object\").columns\nprint(objectList)","f74bcafe":"#Label Encoding for object to numeric conversion\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\nfor feature in objectList:\n    X[feature] = le.fit_transform(X[feature].astype(str))\n\nprint (X.info())","3fdc5fa2":"X.head(5)","9e061b69":"X.corrwith(y)","292e3c0e":"#Correlation with Response Variable class\n\nX.corrwith(y).plot.bar(\n        figsize = (16, 6), title = \"Correlation with Diabetes\", fontsize = 15,\n        rot = 90, grid = True)\n","d92d284a":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2,stratify=y, random_state = 12345)","d9ebbe08":"## checking distribution of target variable in train test split\nprint('Distribution of target variable in training set')\nprint(y_train.value_counts())\n\nprint('Distribution of target variable in test set')\nprint(y_test.value_counts())","12a07399":"minmax = MinMaxScaler()\nX_train[['Age']] = minmax.fit_transform(X_train[['Age']])\nX_test[['Age']] = minmax.transform(X_test[['Age']])","3705f1d2":"X_train.head()","03f5e8d0":"X.columns","cb026c41":"X.head()","bb7cb691":"X_FS = X[['Polyuria', 'Polydipsia','Age', 'Gender','partial paresis','sudden weight loss','Irritability', 'delayed healing','Alopecia','Itching']]","8c1d13b9":"X_train, X_test, y_train, y_test = train_test_split(X_FS, y, test_size = 0.2, stratify=y, random_state = 12345)","ed34c6ed":"minmax = MinMaxScaler()\nX_train[['Age']] = minmax.fit_transform(X_train[['Age']])\nX_test[['Age']] = minmax.transform(X_test[['Age']])","8033b821":"# Logistic Regression\nlogi = LogisticRegression(random_state = 0, penalty = 'l2')\nlogi.fit(X_train, y_train)","7e5e08f4":"# Cross Validation\nfrom sklearn import model_selection\nkfold = model_selection.KFold(n_splits=10, random_state=7)\nscoring = 'accuracy'\n\nacc_logi = cross_val_score(estimator = logi, X = X_train, y = y_train, cv = kfold,scoring=scoring)\nacc_logi.mean()","5f09bbab":"# Model Evaluation\ny_predict_logi = logi.predict(X_test)\nacc = accuracy_score(y_test, y_predict_logi)\nroc = roc_auc_score(y_test, y_predict_logi)\nprec = precision_score(y_test, y_predict_logi)\nrec = recall_score(y_test, y_predict_logi)\nf1 = f1_score(y_test, y_predict_logi)\n\nresults = pd.DataFrame([['Logistic Regression',acc, acc_logi.mean(), prec, rec, f1,roc]], columns = ['Model', 'Accuracy','Cross Val Accuracy', 'Precision', 'Recall', 'F1 Score','ROC'])\nresults\n","09bbdb11":"# Random Forest\nrf = RandomForestClassifier(criterion='gini',n_estimators=100)\nrf.fit(X_train,y_train)","7b20ae72":"# Cross Validation\nkfold = model_selection.KFold(n_splits=10, random_state=7)\nscoring = 'accuracy'\n\nacc_rf = cross_val_score(estimator = rf, X = X_train, y = y_train, cv = kfold,scoring=scoring)\nacc_rf.mean()","cf4d493f":"# Model Evaluation\ny_predict_r = rf.predict(X_test)\nroc=roc_auc_score(y_test, y_predict_r)\nacc = accuracy_score(y_test, y_predict_r)\nprec = precision_score(y_test, y_predict_r)\nrec = recall_score(y_test, y_predict_r)\nf1 = f1_score(y_test, y_predict_r)\n\nmodel_results = pd.DataFrame([['Random Forest',acc, acc_rf.mean(),prec,rec, f1,roc]], columns = ['Model', 'Accuracy','Cross Val Accuracy', 'Precision', 'Recall', 'F1 Score','ROC'])\n\nresults = results.append(model_results, ignore_index = True)\nresults","2a56cafd":"from sklearn import metrics\nimport matplotlib.pyplot as plt\n\nplt.figure()\n\n# Add the models to the list that you want to view on the ROC plot\nmodels = [\n{\n    'label': 'Logistic Regression',\n    'model': LogisticRegression(random_state = 0, penalty = 'l2'),\n},\n\n    {\n    'label': 'Random Forest',\n    'model': RandomForestClassifier(n_estimators = 100,criterion='gini', random_state = 47),\n},\n    \n]\n\n# Below for loop iterates through your models list\nfor m in models:\n    model = m['model']\n    model.fit(X_train, y_train)\n    y_pred=model.predict(X_test)\n    \n# Compute False postive rate, and True positive rate\n    fpr, tpr, thresholds = metrics.roc_curve(y_test, model.predict_proba(X_test)[:,1])\n    \n# Calculate Area under the curve to display on the plot\n    auc = metrics.roc_auc_score(y_test,model.predict(X_test))\n    \n# Now, plot the computed values\n    plt.plot(fpr, tpr, label='%s ROC (area = %0.2f)' % (m['label'], auc))\n    \n# Custom settings for the plot \nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('1-Specificity(False Positive Rate)')\nplt.ylabel('Sensitivity(True Positive Rate)')\nplt.title('Receiver Operating Characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()","08c3f7f7":"## Distribution of Different Features","19b9e337":"## Data Pre-Processing","c7464706":"## Feature Selection","09f9d2bd":"## Model Building","3770f8df":"## Importing Dataset","7b976908":"# Early Stage Diabetes Prediction\n","f9bd5450":"## Checking Missing Values","a778619a":"## Data Normalization","6ab7d6e0":"## Plotting ROC","34429a40":"## Importing Libraries ","b28a54b0":"# About Data\nThis dataset contains the sign and symptpom data of newly diabetic or would be diabetic patient.This has been collected using direct questionnaires from the patients of Sylhet Diabetes Hospital in Sylhet, Bangladesh and approved by a doctor.\n\n## Features of the dataset\nThe dataset consist of total **15** features and one target variable named class.\n\n**1. Age:** Age in years ranging from (20years to 65 years)<br>\n**2. Gender:** Male \/ Female<br>\n**3. Polyuria:** Yes \/ No<br>\n**4. Polydipsia:** Yes\/ No<br>\n**5. Sudden weight loss:** Yes\/ No <br>\n**6. Weakness:** Yes\/ No<br>\n**7. Polyphagia:** Yes\/ No<br>\n**8. Genital Thrush:** Yes\/ No<br>\n**9. Visual blurring:** Yes\/ No<br>\n**10. Itching:** Yes\/ No<br>\n**11. Irritability:** Yes\/No<br>\n**12. Delayed healing:** Yes\/ No<br>\n**13. Partial Paresis:** Yes\/ No<br>\n**14. Muscle stiffness:** yes\/ No<br>\n**15. Alopecia:** Yes\/ No<br>\n**16. Obesity:** Yes\/ No<br>\n\n**Class:** Positive \/ Negative","04511422":"## Occurences of Symptoms in patients","a33b880c":"## Data Normalization","3601dc28":"## Correlation between features","b4fc96f5":"## Train and Test Split"}}