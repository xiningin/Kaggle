{"cell_type":{"cffa4fbc":"code","ef39b655":"code","0784e836":"code","68c4c9f9":"code","5cc298fe":"code","60c0ac2d":"code","4219b71a":"code","3443fa5a":"code","f04d9685":"code","3a8d96b9":"code","cdc4bebd":"code","903d14dc":"code","9089f152":"code","3fadff5c":"code","1ad641a9":"code","65361b99":"code","38988594":"code","80144e2c":"code","50fffee8":"code","d2d409a8":"code","799debc1":"code","956fd249":"code","7ac61af2":"code","457bc0d6":"code","b2b2e204":"code","7095a786":"code","2ad69b68":"markdown","55555fd2":"markdown","1d68d5c2":"markdown","a31f7145":"markdown","4bae0f52":"markdown","f425c30f":"markdown","f79d7e45":"markdown","2aed609b":"markdown","ea21e92b":"markdown","8dcd78d1":"markdown","7146a19b":"markdown","26fb569f":"markdown","74ac7593":"markdown","0eb9ae03":"markdown","e6730aa5":"markdown","f93d1b6b":"markdown","ed3f3886":"markdown","983a5f32":"markdown","a10ebfb3":"markdown","8bd7eb22":"markdown","eb9b26e0":"markdown"},"source":{"cffa4fbc":"#Imports:\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd\nimport numpy as np\nimport altair as alt\nimport matplotlib.pyplot as plt\nimport re\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ef39b655":"#Settings:\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\nalt.data_transformers.enable('default', max_rows=None)\n%matplotlib inline \npd.set_option('display.max_rows', 100)\npd.set_option('display.max_columns', 40)\npd.set_option('display.width', 1000)","0784e836":"#Support functions:\n\n#for each string, and a compiled pattern object, use the findall method.\n#return true if we find ONE SINGLE 5 digit zipcode. False otherwise. \ndef regapp(x,pattObj):\n    hold = pattObj.findall(x)\n    result = False\n    if (len(hold) == 1):\n        result = True\n    return result\n\ndef cleanup(cell):\n    return float(cell.replace(\"$\",\"\"))\n\ndef cutgps(cell,myregex):\n    store = re.findall(myregex,cell)\n    if (store): #empty\n         retVal = store[0]\n    else:\n         retVal = \"NA\" #Some of the entries are missing their lat\/long data\n    return retVal\n\n#first, lets extract the GPS coordinates:\n#What can we assume? each column is a non-empty string, at least.\ndef getlatlong(cell, pos):\n    if (cell == \"NA\"):\n        return cell\n    sectionList = cell.replace(\"(\",\"\").replace(\")\",\"\").split(\",\")\n    return float(sectionList[pos]) #0 or 1. Float will clip out spaces for us!\n\n","68c4c9f9":"dfILS = pd.read_csv(\"..\/input\/Iowa_Liquor_Sales.csv\")\ndfILS.columns.values","5cc298fe":"#we will use this to calculate the percentage of rows lost after cleaning.\nlossDict = {}\nlossDict['fullsize'] = dfILS.shape[0] \n","60c0ac2d":"dfILS.info()","4219b71a":"dfILS.isnull().sum() #our number of nas.","3443fa5a":"#We should be able to drop NAs, and still have over 12M rows to choose from.\n#This loss is acceptable.\ndfILS.dropna(inplace=True)\nlossDict['nullloss'] = (lossDict['fullsize']- dfILS.shape[0])","f04d9685":"nameDict = {\"Invoice\/Item Number\":\"invoicenumber\"\n,\"Date\":\"date\"\n,\"Store Number\":\"storenumber\"\n,\"Store Name\":\"storename\"\n,\"Address\":\"address\"            \n,\"City\":\"city\"\n,\"Zip Code\":\"zipcode\"\n,\"Store Location\":\"storelocation\"\n,\"County Number\":\"countynumber\"\n,\"County\":\"countyname\"\n,\"Category\":\"categorynumber\"\n,\"Category Name\":\"categoryname\"\n,\"Vendor Name\":\"vendorname\"\n,\"Vendor Number\":\"vendornumber\"\n,\"Item Number\":\"itemnumber\"\n,\"Item Description\":\"itemdescription\"\n,\"Pack\":\"pack\"\n,\"Bottle Volume (ml)\":\"bottlevolumeml\"\n,\"State Bottle Cost\":\"statebottlecost\"\n,\"State Bottle Retail\":\"statebottleretail\"\n,\"Bottles Sold\":\"bottlessold\"\n,\"Sale (Dollars)\":\"saleprice\"\n,\"Volume Sold (Liters)\":\"volumesoldlitre\"\n,\"Volume Sold (Gallons)\":\"volumesoldgallon\"}\n\ndfILS.rename(columns = nameDict,inplace=True)","3a8d96b9":"dfILS.tail(3)","cdc4bebd":"#The following are easy to correct. #the ints are not that big, so we can use int32 instead of 64 to save space.\nconvertList = [\"countynumber\",\"vendornumber\",\"storenumber\",\"categorynumber\",\"pack\",\"bottlevolumeml\",\"bottlessold\",\n               \"volumesoldlitre\",\"volumesoldgallon\",\"itemnumber\"]\n\nfor item in convertList:\n    dfILS = dfILS.astype({item: \"int32\"},inplace=True)    \n","903d14dc":"dfILS['zipcode'].unique() #if you want to look for yourself.","9089f152":"dfILS['zipcode'] = dfILS['zipcode'].apply(str)","3fadff5c":"pattObj = re.compile(r\"[0-9]{5}\")\nboolSelect = dfILS['zipcode'].apply(regapp,args=(pattObj,))\nlossDict['ziploss'] = boolSelect.value_counts().loc[False]\ndfILS = dfILS[boolSelect]\n","1ad641a9":"dfILS['zipcode'] = dfILS['zipcode'].apply(float)\ndfILS['zipcode'] = dfILS['zipcode'].apply(int) \ndfILS = dfILS.astype({\"zipcode\": \"int32\"}, inplace=True) \n#done!","65361b99":"for columnname in [\"statebottlecost\",\"statebottleretail\",\"saleprice\"]:\n    dfILS[columnname] = dfILS[columnname].apply(cleanup)\n    dfILS.astype({columnname:\"float32\"},inplace=True)\n    \n#dfILS.info() #check to see that the three cols are now floats.","38988594":"#First, mutate the store location column; replace it with just the GPS substring.\n#myregex = r\"(\\(.+,.+\\))\"\n#dfILS['storelocation'] = dfILS['storelocation'].apply(cutgps,args=(myregex,))","80144e2c":"#suppressed as I don't need this for tableau!\n#dfILS['latitude'] = dfILS['storelocation'].apply(getlatlong,args=(0,))\n#dfILS['longitude'] = dfILS['storelocation'].apply(getlatlong,args=(1,))\n","50fffee8":"dfILS.drop(columns=[\"storelocation\"], axis=1,inplace=True)","d2d409a8":"#boolSelect2 = dfILS['latitude'] == \"NA\"\n#boolSelect2.value_counts() #our number of nas.","799debc1":"dfILS.info()","956fd249":"rowsum = lossDict['nullloss'] + lossDict['ziploss']\nprint(\"Rows Lost: \" + str(rowsum) + \"\\n Percentage Loss: \" + str(rowsum\/lossDict['fullsize']))","7ac61af2":"dfILS.head(5)","457bc0d6":"def uniquefilewrite(colA,colB,filename):\n    storage = dfILS.drop_duplicates(subset=[colA,colB],keep=\"first\",inplace=False)\n    storage.loc[:,[colA,colB]].to_csv(filename + \".csv\",index=False)\n    return","b2b2e204":"colA = [\"storenumber\",\"countynumber\",\"categorynumber\",\"vendornumber\",\"itemnumber\"]\ncolB = [\"storename\",\"countyname\",\"categoryname\",\"vendorname\",\"itemdescription\"]\n\nfor tup in list(zip(colA,colB)):\n    uniquefilewrite(tup[0],tup[1],tup[1])\n    ","7095a786":"colList = [\"invoicenumber\",\"date\",\"city\", \"zipcode\", \"storenumber\",\"countynumber\",\n           \"categorynumber\", \"vendornumber\",\"itemnumber\",\"bottlevolumeml\",\"statebottlecost\",\n            \"statebottleretail\", \"bottlessold\", \"saleprice\" ,\"volumesoldlitre\"]\n\ndfILS.loc[:,colList].to_csv(\"ILS_clean.csv\",index=False)\n","2ad69b68":"## Data Loading:","55555fd2":"![](http:\/\/)Kaggle Session information indicates our data takes up < 1.4GB of space. Much better!","1d68d5c2":"### Dealing with Zipcodes:\n\nZipcode is classed as a string object type, because of zipcode anomolies in the data. There are zipcodes of the form \"752-6\". Casting occured because of non-numeric characters. We need to cut out rows that don't conform to a 5 digit code, before casting to int.","a31f7145":"Lets get some basic information about our data frame. We can already see some columns are upcast (float instead of ints).","4bae0f52":"## Putting Redundant Information into Separate Tables:\n\nWe can shrink this data frame significantly, by putting coupled elements in a separate table, that can be joined by the user\nat a later date. In particular:\n\n- store number and store name\n- county number and county name\n- category and category name\n- vendor number and vendor name\n- item number and item description\n\nWe can just store the integer number column, and store a reduced table of unique values in a separate file. Via a left join, we can \nreconstruct the data if needed.","f425c30f":"Now that our data is tidy, we can subset and save it to .csv files. There are some examples below:","f79d7e45":"931655 NAs is roughly 10 percent of our data. Should they be dumped? I choose not to. I'll deal with \"NA\"s further down the pipeline. ","2aed609b":"Checking out nulls:","ea21e92b":"We have to step down type incrementally. string '7723632.0' throws a ValueError.","8dcd78d1":"Next, we need to clean up the sales columns. They are strings because the dollar sign symbol was included in the spreadsheet. Again,\nthe numbers in sales aren't that large, so lets use a float32 instead of a float64 to save some space. ","7146a19b":"### Separating GPS coordinates from the Store Location Column:\n\n#### Note: This code was unused for the final dataframe (I didn't need it). Uncomment code below to use GPS coordinates.\n\nNext we will split the Store Location Column. There appears to be zipcode and GPS information encoded in these columns. Individual addresses for a store don't matter, as this dataset needs to be aggregated at a larger geographical area to do reasonable modelling. The storelocaiton column will be split (and dropped). We will add a latitude and longitude column, instead.","26fb569f":"### Writing out our dataframe\n\nThe data is now tidy and free of redundant data.","74ac7593":"## Introduction:\n\nOur Dataset is about 3.6GB on disk, and \"wc -l datafile.csv\" tells us that we have 37 768 482 rows. Each line in the file takes up about 3 lines, so we have about 12589494 potential rows to access, in the dataset. \n\nI had problems trying to load this dataset with the Dask framework. Trying to load the entire dataset using pandas on a small laptop was also painful. I make use of the 16Gb of RAM a Kaggle Kernel provides.\n\n**Note:** This script is not currently optimized for efficiency. It takes about ~300s to run. \n\n## Goal: \n\nTidy the dataset, and create a smaller dataframe with redundant information stored in separate files. Users can join this information if they need to. ","0eb9ae03":"### Dealing with Sales Columns:","e6730aa5":"There appear to be *non numeric characthers (\"712-2\"), floats, strings and ints all mixed together*. Yikes. Upcast to strings,\nfilter anomolies, and then convert whats left to ints.","f93d1b6b":"Finally, our GPS conversion has introduced some NAs - as not every storelocation had GPS coordinates. Lets check string NAs.","ed3f3886":"## Subsetting and Saving our Data:","983a5f32":"## Data Tidying:","a10ebfb3":"Our Column Names need to be tidied up.","8bd7eb22":"Pandas has a tendency to upcast a lot of the columns. We need to make the datatypes more specific (example: float64 -> int32). \ncountynumber, category, vendornumber, and zipcode are cast as floats or string objects. Observe below:","eb9b26e0":"### Summary and Check of Data Tidying:\n\nWe have saved some memory by casting the columns to smaller types."}}