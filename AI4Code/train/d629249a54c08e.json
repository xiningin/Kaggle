{"cell_type":{"7d0f56d9":"code","76f02bc1":"code","24a4ac0a":"code","f464f02f":"code","e62c2752":"code","bf454038":"code","96af4f28":"code","c14fe1f7":"code","6a9c406d":"code","f0471101":"code","abe44ea8":"code","e1d02775":"code","098cb220":"code","eff38068":"code","f1e69a29":"code","038655d8":"code","9daa8d80":"code","0be7f510":"code","44704654":"code","7b8bd5ef":"code","9d7b05a8":"code","d300b599":"code","a15eccef":"code","2c3fc61b":"code","fdfe5bab":"code","4959b0e3":"code","b5876cbb":"code","9fc344aa":"code","beed77f8":"code","cf331c2b":"code","1fd35338":"code","e1133437":"code","ca5afff0":"code","e0d38a0f":"code","7e463fdf":"code","cda436b9":"code","4cae402a":"code","43ad950d":"code","342cb387":"code","e7fdf36c":"code","ef5e63aa":"code","8b51c7cf":"code","0118811b":"code","b7f334b4":"code","39729f55":"code","4517448c":"code","250ee6a3":"code","7c0d42e1":"code","f2e30bf0":"code","52bcac12":"code","91a42cb4":"code","a89e38dc":"code","8fd66506":"code","18e0a186":"code","e91a594c":"code","1f56d1ee":"markdown","a829e3fe":"markdown","c64946a8":"markdown","0cf719c6":"markdown","8ef03dc5":"markdown","9160f74f":"markdown","faa83798":"markdown","cc960786":"markdown","b6ccf0fd":"markdown","92244808":"markdown","7f2bf083":"markdown","cc7bd8b1":"markdown","435c784e":"markdown","35a3a3b8":"markdown","bb8b8209":"markdown","8bba6aed":"markdown","aa0d461b":"markdown","2a717978":"markdown","e5727126":"markdown","9fb1fb6b":"markdown","82cbae20":"markdown","fa262240":"markdown","60f146d6":"markdown","ddad3e5a":"markdown","3da45fd4":"markdown","95caf851":"markdown","8b983ec4":"markdown","abc886b8":"markdown","388cd0c8":"markdown","43ab1788":"markdown"},"source":{"7d0f56d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","76f02bc1":"df_train_val = pd.read_csv('\/kaggle\/input\/bluebook-for-bulldozers\/TrainAndValid.csv',\n                           low_memory=False,\n                           parse_dates=['saledate'])\n\nprint(df_train_val.shape)","24a4ac0a":"df_train_val.sort_values(by=[\"saledate\"], inplace=True, ascending=True)\ndf_train_val.head(20)","f464f02f":"print(df_train_val.info())","e62c2752":"print(df_test.info())","bf454038":"df_train_val.drop('SalesID', axis=1, inplace=True)","96af4f28":"removed_features = ['SalesID']\nprint(removed_features)","c14fe1f7":"print(df_train_val.info())","6a9c406d":"df_train_val[\"saleYear\"] = df_train_val.saledate.dt.year\ndf_train_val[\"saleMonth\"] = df_train_val.saledate.dt.month\ndf_train_val[\"saleDay\"] = df_train_val.saledate.dt.day\ndf_train_val[\"saleDayofweek\"] = df_train_val.saledate.dt.dayofweek\ndf_train_val[\"saleDayofyear\"] = df_train_val.saledate.dt.dayofyear\ndf_train_val.drop(\"saledate\", axis=1, inplace=True)","f0471101":"for label, content in df_train_val.items():\n    if pd.api.types.is_string_dtype(content):\n        df_train_val[label] = content.astype('category').cat.as_ordered()","abe44ea8":"df_train_val.info()","e1d02775":"import matplotlib.pyplot as plt","098cb220":"fig, ax = plt.subplots(figsize=(10, 5))\nax.scatter(df_train_val['saleYear'][:1000], df_train_val['SalePrice'][:1000])","eff38068":"df_train_val.SalePrice.plot.hist()","f1e69a29":"df_train_val.head().T","038655d8":"for label, content in df_train_val.items():\n    if 100*df_train_val[label].isna().sum()\/len(df_train_val) > 70:\n        removed_features.append(label)\n        print(label,\n              '{0:.2f}%'.format(100*df_train_val[label].isna().sum()\/len(df_train_val)))","9daa8d80":"print(removed_features)","0be7f510":"list(set(removed_features).intersection(set(df_train_val.columns)))","44704654":"df_train_val.drop(\n    list(set(removed_features).intersection(set(df_train_val.columns))),\n    axis=1,\n    inplace=True)","7b8bd5ef":"df_train_val.info()","9d7b05a8":"for label, content in df_train_val.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isna(content).sum():\n            df_train_val[label] = content.fillna(content.median())\n    else:\n        df_train_val[label] = pd.Categorical(content).codes+1","d300b599":"for label, content in df_train_val.items():\n    if df_train_val[label].isna().sum():\n        print(label,\n              '{0:.2f}%'.format(100*df_train_val[label].isna().sum()\/len(df_train_val)))","a15eccef":"df_train_val.info()","2c3fc61b":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_log_error, mean_absolute_error","fdfe5bab":"def rmsle(y_test, y_preds):\n    return np.sqrt(mean_squared_log_error(y_test, y_preds))\n\ndef show_scores(model, X_train, y_train, valid=False, X_valid=None, y_valid=None):\n    train_preds = model.predict(X_train)\n    \n    scores = dict()\n    \n    scores['Training MAE'] = mean_absolute_error(y_train, train_preds)\n    scores['Training RMSLE'] = rmsle(y_train, train_preds)\n    scores['Training R^2'] = model.score(X_train, y_train)\n    \n    if valid:\n        val_preds = model.predict(X_valid)\n        scores['Valid MAE'] = mean_absolute_error(y_valid, val_preds)\n        scores['Valid RMSLE'] = rmsle(y_valid, val_preds)\n        scores['Valid R^2'] = model.score(X_valid, y_valid)\n\n    return scores","4959b0e3":"models = dict()","b5876cbb":"models['basic'] = RandomForestRegressor(n_jobs=-1)","9fc344aa":"models['basic'].fit(df_train_val.drop('SalePrice', axis=1), df_train_val.SalePrice)","beed77f8":"show_scores(models['basic'],\n            df_train_val.drop('SalePrice', axis=1),\n            df_train_val.SalePrice)","cf331c2b":"df_train_val.saleYear.unique()","1fd35338":"df_valid = df_train_val[df_train_val.saleYear == 2012]\ndf_train = df_train_val[df_train_val.saleYear != 2012]\n\ndf_train.shape, df_valid.shape","e1133437":"X_train, y_train = df_train.drop(\"SalePrice\", axis=1), df_train.SalePrice\nX_valid, y_valid = df_valid.drop(\"SalePrice\", axis=1), df_valid.SalePrice\n\nX_train.shape, y_train.shape, X_valid.shape, y_valid.shape","ca5afff0":"models['no_tuning'] = RandomForestRegressor(n_jobs=-1)","e0d38a0f":"models['no_tuning'].fit(X_train, y_train)","7e463fdf":"show_scores(model=models['no_tuning'],\n            X_train=X_train,\n            y_train=y_train,\n            valid=True,\n            X_valid=X_valid,\n            y_valid=y_valid)","cda436b9":"from sklearn.model_selection import RandomizedSearchCV","4cae402a":"rf_grid = {\"n_estimators\": np.arange(10, 100, 10),\n           \"max_depth\": [None, 3, 5, 10],\n           \"min_samples_split\": np.arange(2, 20, 2),\n           \"min_samples_leaf\": np.arange(1, 20, 2),\n           \"max_features\": [0.5, 1, \"sqrt\", \"auto\"],\n           \"max_samples\": [20000]}","43ad950d":"%%time\nrs_model = RandomizedSearchCV(RandomForestRegressor(),\n                              param_distributions=rf_grid,\n                              n_iter=20,\n                              cv=5,\n                              verbose=True)\n\nrs_model.fit(X_train, y_train)","342cb387":"best_params = rs_model.best_params_\nbest_params","e7fdf36c":"show_scores(model=rs_model,\n            X_train=X_train,\n            y_train=y_train,\n            valid=True,\n            X_valid=X_valid,\n            y_valid=y_valid)","ef5e63aa":"models['rs'] = RandomForestRegressor(n_jobs=-1,\n                                     n_estimators=best_params['n_estimators'],\n                                     min_samples_split=best_params['min_samples_split'],\n                                     min_samples_leaf=best_params['min_samples_leaf'],\n                                     max_features=best_params['max_features'],\n                                     max_depth=best_params['max_depth'])\nmodels['rs'].fit(X_train, y_train)","8b51c7cf":"show_scores(model=models['rs'],\n            X_train=X_train,\n            y_train=y_train,\n            valid=True,\n            X_valid=X_valid,\n            y_valid=y_valid)","0118811b":"df_test = pd.read_csv('\/kaggle\/input\/bluebook-for-bulldozers\/Test.csv',\n                      low_memory=False,\n                      parse_dates=['saledate'])","b7f334b4":"df_test.head(10)","39729f55":"df_test.head().T","4517448c":"df_test['saleYear'] = df_test.saledate.dt.year\ndf_test['saleMonth'] = df_test.saledate.dt.month\ndf_test['saleDay'] = df_test.saledate.dt.day\ndf_test['saleDayofweek'] = df_test.saledate.dt.dayofweek\ndf_test['saleDayofyear'] = df_test.saledate.dt.dayofyear\ndf_test.drop('saledate', axis=1, inplace=True)","250ee6a3":"df_test.head().T","7c0d42e1":"salesID = df_test.SalesID\nsalesID.head()","f2e30bf0":"df_test.drop(\n    list(set(removed_features).intersection(set(df_test.columns))),\n    axis=1,\n    inplace=True)","52bcac12":"df_test.columns","91a42cb4":"df_test.isna().sum()\/len(df_test)","a89e38dc":"for label, content in df_test.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isna(content).sum():\n            df_test[label] = content.fillna(content.median())\n\n    else:\n        df_test[label] = pd.Categorical(content).codes + 1\n        ","8fd66506":"df_test.isna().sum()\/len(df_test)","18e0a186":"test_preds = dict()\nfor label, model in models.items():\n    test_preds[label] = model.predict(df_test)","e91a594c":"for label, preds in test_preds.items():\n    output = pd.DataFrame({'SalesID': salesID, 'SalePrice': preds})\n    output.to_csv('my_submission_{}.csv'.format(label), index=False)\n\nprint('Your submission was successfully saved!')","1f56d1ee":"* Evaluation","a829e3fe":"**Splitting saledate feature**","c64946a8":"# Loading Data","0cf719c6":"* Split data into **training** and **validation**","8ef03dc5":"# Predictions","9160f74f":"**Reducing features to match the model**","faa83798":"# Preprocessing","cc960786":"**RandomizedSearchCV Model**\n* With validation\n* With hyper-parameter tuning","b6ccf0fd":"# Training","92244808":"**Dropping features with missing values > 70%**","7f2bf083":"* Evaluation","cc7bd8b1":"**Dropping SalesID feature**","435c784e":"**Function for metrics**","35a3a3b8":"* Fitting data","bb8b8209":"**Splitting saledate feature**","8bba6aed":"* Hyperparameters to tune","aa0d461b":"**Adding rs_model to models dictionary**\n* Fitting data","2a717978":"**Filling missing numerical data and converting string to numerical(categorical) data**","e5727126":"**Filling numerical data and converting categorical data to numerical data**","9fb1fb6b":"* Evaluation","82cbae20":"* Fitting the data","fa262240":"* Evaluation","60f146d6":"# Saving submission files","ddad3e5a":"**Converting string to categorical data**","3da45fd4":"**Validation Model**\n* With validation\n* Without hyper-parameter tuning","95caf851":"**Basic Model**\n* Without validation\n* Without hyper-parameter tuning","8b983ec4":"# Preprocessing","abc886b8":"* Best hyperparameters","388cd0c8":"# Testing","43ab1788":"# Loading Data"}}