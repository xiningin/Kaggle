{"cell_type":{"f03e0201":"code","d993beff":"code","026d9289":"code","b4c5091c":"code","386c46a2":"code","238fb011":"code","ae1e5173":"code","e5996855":"code","acaf59d2":"code","71db7953":"code","900bc9fb":"code","aaecd8c3":"code","d49e34a1":"code","37b5a386":"code","3220bfb4":"code","8c17b0f9":"code","1aac73ca":"code","1a1594eb":"code","9b7d17ed":"code","64565fdc":"code","9a118b11":"code","b2a2bfd9":"code","e2d1a11b":"code","849f0fb8":"code","0cccb976":"code","b47cb7a6":"code","b42fca2f":"code","772c5cf3":"code","ebbf92f0":"code","5ca833cb":"code","6e2955a6":"code","39458438":"code","713adc04":"code","586c2c29":"code","d305b049":"markdown","dec1d751":"markdown","77a275ca":"markdown","a16a30a8":"markdown","9fc43b48":"markdown","4965bb7f":"markdown","c92d1729":"markdown","4a109f2c":"markdown","306317a9":"markdown","d8989799":"markdown","2d0b436a":"markdown","8c9976a5":"markdown","7242f8ea":"markdown","acc65cc2":"markdown","6c1eb724":"markdown","152d7c60":"markdown","c8fbeaaf":"markdown","91b7d9bb":"markdown","08bbfa84":"markdown"},"source":{"f03e0201":"import matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport random\nimport csv\nimport cv2\n\n%matplotlib inline","d993beff":"basedir = '..\/input\/train_v2\/'","026d9289":"train_df = pd.read_csv(\"..\/input\/train_ship_segmentations_v2.csv\")\ntrain_df.head()","b4c5091c":"train_df[\"GotShip\"] = 0\ntrain_df.loc[train_df[\"EncodedPixels\"].notnull(), \"GotShip\"] = 1\n# train_df['GotShips'] = np.where(train_df['EncodedPixels'].isnull(), 0, 1)\ntrain_df.head()","386c46a2":"print('Number of images without ships in train log: ', train_df.ImageId[train_df['GotShip'] == 0].nunique())\n\n# train_df.to_csv(\".\/dataset\/train\/ships.csv\")","238fb011":"noship = train_df[train_df['GotShip'] == 0]\nnoship.head()","ae1e5173":"def show_samples(imagedata, no_of_images, no_of_rows=4, no_of_cols=4):\n    i = 0\n    ship_sx = random.sample(range(0, len(imagedata)), no_of_images)\n    samples = imagedata.iloc[ship_sx]\n    fig = plt.figure(1, figsize = (20,20))\n    for index, row in samples.iterrows():\n        i = i + 1\n        image = mpimg.imread(basedir + row['ImageId'])\n        img = image.copy()\n        rszImg = cv2.resize(img, (200, 200), cv2.INTER_AREA)\n\n        ax = fig.add_subplot(no_of_rows, no_of_cols, i)\n        ax.set_title(index)\n        ax.imshow(rszImg)\n        fig.tight_layout()  ","e5996855":"show_samples(noship, 16)","acaf59d2":"print('Number of images with ships in train log: ', train_df.ImageId[train_df['GotShip'] != 0].size)\nprint('Number of unique images with ships in train log: ', train_df.ImageId[train_df['GotShip'] != 0].nunique())\n\n# train_df.to_csv(\".\/dataset\/train\/ships.csv\")","71db7953":"ship = train_df[train_df['GotShip'] != 0]\nship.head(10)","900bc9fb":"show_samples(ship, 15)","aaecd8c3":"x = train_df[train_df[\"ImageId\"] == \"000194a2d.jpg\"]\nx","d49e34a1":"show_samples(x, 5)","37b5a386":"# CHECK THAT NO DUPLICATE ENCODEDPIXELS ARE LISTED\nduped_ship = ship.drop_duplicates(\"EncodedPixels\")\nprint (len(duped_ship))","3220bfb4":"df1 = pd.DataFrame({'':['Ship', 'No Ship'], 'Image Count':[len(ship), len(noship)]})\ndf1","8c17b0f9":"df1.plot.bar(x='', y='Image Count', rot=0, color='b', legend=None, title=\"Ship Count Distribution\")","1aac73ca":"# COUNT THE NUMBER OF DUPLICATES EACH IMAGE HAS\nunique_ship = ship['ImageId'].value_counts().reset_index()\nunique_ship.columns = ['ImageId', 'NumberOfDuplicates']\nunique_ship.head()","1a1594eb":"# COUNT THE NUMBER OF IMAGES vs NUMBER OF DUPLICATES \ndupeship = unique_ship.groupby('NumberOfDuplicates').count()\ndupeship","9b7d17ed":"plt.figure()\ndf2 = pd.DataFrame(dupeship, columns=['NumberOfDuplicates', 'ImageId'])\nax = df2.plot.bar(color='r', legend=None, title=\"Ship Duplicates Distribution\")\nax.set_xlabel(\"Number of Duplicates\")\nax.set_ylabel(\"Number of Images\")","64565fdc":"# SAMPLE\nidx = random.sample(range(0, len(ship)), 1)\nsx_one = ship.iloc[idx]\nencodedpixels = sx_one['EncodedPixels'].values\nsx_image = sx_one['ImageId'].values","9a118b11":"sx = sx_image[0]\nsx_base = basedir + sx\nsx_base","b2a2bfd9":"sample_data = ship[ship['ImageId'] == sx]\nsample_data","e2d1a11b":"unique_ship.NumberOfDuplicates[unique_ship['ImageId'] == sx_image[0]]","849f0fb8":"# CREATE AN IMAGE MASK\nmask = np.zeros((768, 768))\n\n# UNRAVEL MASK INTO ARRAY\nmask = mask.ravel()\nmask","0cccb976":"# CREATE SHIP MASK\ndef encode_rle(encodedpixels, n=2):\n    # SPLIT ENCODED PIXELS STRING\n    shipmask = encodedpixels.split()\n    # CONVERT LIST TO TUPLES\n    shipmask = zip(*[iter(shipmask)]*n)\n    # CONVERT STRING TO INT\n    rle = [(int(start), int(start) + int(length)) for start, length in shipmask]\n    return rle","b47cb7a6":"rle_data = sample_data['EncodedPixels'].apply(encode_rle)\nrle_data","b42fca2f":"def total_mask(rle_data, mask):\n    for rle in rle_data:\n        for start,end in rle:\n            print (start, end)\n            mask[start:end] = 1\n    mask = mask.reshape(768,768).T\n    return mask","772c5cf3":"mask = total_mask(rle_data, mask)","ebbf92f0":"img_mask = np.dstack((mask, mask, mask))\nfig = plt.figure()\nax = fig.add_subplot(1, 1, 1)\nax.imshow(img_mask)","5ca833cb":"# SHOW MASK IMAGE\nfig = plt.figure()\n\nax = fig.add_subplot(1, 2, 1)\nax.set_title(\"RLE Masking\")\nax.imshow(img_mask)\n\norig_image = mpimg.imread(sx_base)\nax = fig.add_subplot(1, 2, 2)\nax.set_title(\"Orig Image\")\nax.imshow(orig_image)\nfig.tight_layout()","6e2955a6":"x = range(1200)\nfig, ax = plt.subplots(1, figsize = (50,50))\nax.imshow(orig_image, extent=[0, 1200, 0, 1200])","39458438":"poly = np.ascontiguousarray(mask, dtype=np.uint8)\n(flags, contours, h) = cv2.findContours(poly, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)","713adc04":"contour_image = orig_image.copy()\ncv2.drawContours(contour_image, contours, -1, (0,255,0), 1)","586c2c29":"x = range(1200)\nfig, ax = plt.subplots(1, figsize = (50,50))\nax.imshow(contour_image, extent=[0, 1200, 0, 1200])","d305b049":"##### THE ENCODED PIXELS","dec1d751":"### IMAGES WITH\/WITHOUT SHIPS DISTRIBUTION","77a275ca":"### TRAIN IMAGES WITHOUT SHIPS","a16a30a8":"##### IMAGE MASK AND ENCODEDPIXELS COMBINED","9fc43b48":"### SAMPLE IMAGES WITH SHIPS","4965bb7f":"### TRAIN IMAGES","c92d1729":"### TRAIN IMAGES WITH LABELS","4a109f2c":"### SAMPLE IMAGES WITH SHIPS, SIMILAR IMAGEID","306317a9":"## Data Analysis and Visualization","d8989799":"### Load CSV Files","2d0b436a":"Dataset:\n\n- Load CSV files\n    - Label Dataset: find how many unique images with and without ships\n    - Count Ships: count how many ships in images\n- Show sample images\n    - show area given by EncodedPixels in a bounding box\n\nThings considered:\n\n- check if there are duplicates of 'ImageId'\n- do not use 'ImageId' as index, it is not unique\n- image may have several copies and each one may have a partial set of ship pixels\n- an image copy may show one or more ships\n- check if there are duplicates of 'EncodedPixels', whether the whole string or a tuple","8c9976a5":"##### THE MASK","7242f8ea":"## Airbus Ship Detection Project","acc65cc2":"### NUMBER OF SHIPS PER IMAGE DISTRIBUTION","6c1eb724":"### TEST IMAGES WITH SHIPS ","152d7c60":"### IMAGES WITH DUPLICATES","c8fbeaaf":"## Count Ships","91b7d9bb":"### SAMPLE IMAGES WITHOUT SHIPS","08bbfa84":"Several images with ships have similar ImageId but different EncodedPixels. An example is given below."}}