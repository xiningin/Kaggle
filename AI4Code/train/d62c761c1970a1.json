{"cell_type":{"c4d3aa77":"code","2e95494a":"code","669a3153":"code","3a3015b4":"code","dd5036e6":"code","d305048d":"code","87e42cbf":"code","bf7a9941":"markdown","593a793c":"markdown","7209f4ff":"markdown"},"source":{"c4d3aa77":"import numpy as np\nimport pandas as pd\nimport scipy.stats as stats\nfrom pathlib import Path\nimport glob\nimport pickle\nimport matplotlib.pyplot as plt\nimport joblib\n\nimport random\nimport os\nimport glob\nimport json\n\nimport cv2\nfrom PIL import Image","2e95494a":"sites = []\nfor path in os.listdir('..\/input\/wifi-features-all'):\n    if (len(path.split('_')[0])>20) and (not path.split('_')[0] in sites):\n        sites.append(path.split('_')[0])","669a3153":"thresh_path = '..\/input\/threshold-images\/'\nmeta_path = '..\/input\/indoor-location-navigation\/metadata\/'","3a3015b4":"# Plot the training Data For an example Floor\nexample_site = '5dbc1d84c1eb61796cf7c010'\nexample_floorNo = 'F7'\nfloors = os.listdir(meta_path+example_site)\narray = joblib.load(thresh_path+'thresh_list_'+example_site+'.pkl')\narray = array[floors.index(example_floorNo)]\nwhite_area = []\nfor (x,y) in zip(np.where(array[:,:,1] == 0)[0],np.where(array[:,:,1] == 0)[1]):\n    white_area.append( (x, y) )\ndf = pd.DataFrame(white_area, columns=['x','y'])\ndf.plot(x='x', y='y', kind='scatter')","dd5036e6":"del array, white_area","d305048d":"base=\"..\/input\/indoor-location-navigation\"","87e42cbf":"for site in sites:\n    print(site)\n    site_white_areas = []\n    floors = os.listdir(meta_path+site)\n    array = joblib.load(thresh_path+'thresh_list_'+site+'.pkl')\n    print(site+ ' ' , floors)\n    for floor in floors:\n        floor_array = array[floors.index(floor)]\n        floor_white_area = []\n        for (x,y) in zip(np.where(floor_array[:,:,1] == 0)[0],np.where(floor_array[:,:,1] == 0)[1]):\n            floor_white_area.append( (x, y) )\n        site_white_areas.append(floor_white_area)\n        floor_df = pd.DataFrame(floor_white_area)\n        floor_df.columns = ['x','y']\n        \n        ######\n        floor_df['x2'] = floor_array.shape[0] - floor_df['x']\n        \n        json_plan_filename = f\"{base}\/metadata\/{site}\/{floor}\/floor_info.json\"\n        with open(json_plan_filename) as json_file:\n            json_data = json.load(json_file)\n\n        width_meter = json_data[\"map_info\"][\"width\"]\n        height_meter = json_data[\"map_info\"][\"height\"]\n        \n        # Convert to meters\n        floor_df['x2'] = floor_df['x2'] * height_meter \/ floor_array.shape[0]\n        floor_df['y2'] = floor_df['y'] * width_meter \/ floor_array.shape[1]\n        \n        #######\n        floor_df.to_csv('white_area_'+site+'_'+floor+'.csv', index=False)","bf7a9941":"In this notebook, I make dataframes containing the white pixel locations in each floor image. I wanted just the hallway areas, but I am having trouble creating a contour around the building. I use these dataframes to push predictions into the hallway areas (hopefully) in my notebook https:\/\/www.kaggle.com\/therocket290\/indoor-navigation-push-to-hallway-post-process.","593a793c":"## Example","7209f4ff":"I will work on dropping the pixels outside the building."}}