{"cell_type":{"560b8b6c":"code","40432167":"code","ece00e30":"code","6214b519":"code","d4e8b774":"code","60898f85":"code","97129170":"code","37827981":"code","b625c992":"code","663fc2ff":"code","959544ac":"code","8fee758c":"code","8e6b5307":"code","699b3eb4":"code","75615da2":"code","24d39512":"code","8b978aec":"code","8f3d558f":"code","bbade748":"code","041f580a":"code","32249941":"code","2aa02426":"code","f679b7ad":"code","a50b71e3":"code","4dc93b07":"markdown","c3f45f15":"markdown","2cf48c19":"markdown","75601348":"markdown"},"source":{"560b8b6c":"# Importing all necessary libraries.\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","40432167":"df = pd.read_csv('..\/input\/employee-attrition\/WA_Fn-UseC_-HR-Employee-Attrition.csv')","ece00e30":"df.head()","6214b519":"df.info()","d4e8b774":"df.describe()","60898f85":"df.shape","97129170":"df.dtypes","37827981":"df.isna().sum()","b625c992":"df['Attrition'].value_counts()","663fc2ff":"import seaborn as sns\nsns.countplot(df['Attrition'])","959544ac":"plt.subplots(figsize=(12,4))\nsns.countplot(x='Age', hue='Attrition', data=df, palette = 'colorblind')","8fee758c":"df['StandardHours'].unique()","8e6b5307":"df = df.drop(\"Over18\", axis=1)\ndf = df.drop(\"EmployeeNumber\", axis=1)\ndf = df.drop(\"StandardHours\", axis=1)\ndf = df.drop(\"EmployeeCount\", axis=1)","699b3eb4":"df.corr()","75615da2":"plt.figure(figsize=(14,14))\nsns.heatmap(df.corr(), annot=True, fmt='.0%' )","24d39512":"from sklearn.preprocessing import LabelEncoder\n\nfor column in df.columns:\n    if df[column].dtype == np.number:\n        continue\n    df[column] = LabelEncoder().fit_transform(df[column])","8b978aec":"df['Age_Years'] = df['Age'] ","8f3d558f":"df = df.drop('Age', axis=1)","bbade748":"df.head()","041f580a":"X = df.iloc[:, 1:df.shape[1]].values\ny = df.iloc[:, 0].values","32249941":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 2)","2aa02426":"from sklearn.ensemble import RandomForestClassifier\nforest = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nforest.fit(X_train, y_train)","f679b7ad":"forest.score(X_train, y_train)","a50b71e3":"from sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_test, forest.predict(X_test))\n\nTN = cm[0][0]\nTP = cm[1][1]\nFN = cm[1][0]\nFP = cm[0][1]\n\nprint(cm)\nprint('Model Testing Accuracy = {}'.format((TP + TN \/ (TP + TN + FN + FP))))","4dc93b07":"# Data","c3f45f15":"# Random Forest","2cf48c19":"# Importing Libraries","75601348":"# EDA"}}