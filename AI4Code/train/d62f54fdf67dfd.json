{"cell_type":{"a15c3966":"code","33481b96":"code","18788d9e":"code","8dd4b7da":"code","b84e655e":"code","43ead5f7":"code","397edc61":"code","cba3d90d":"code","50460710":"code","c12c248a":"code","8855f663":"code","f25ffb75":"code","01d9c330":"code","c2e2ae86":"code","792ef642":"code","a8363000":"code","56cbc875":"code","bca557f2":"code","1f0e071d":"code","1cbfd937":"code","45e6caa6":"code","6f4be927":"code","7ed2a5fc":"code","97b6d1bc":"code","d0bce185":"code","e6cdf41c":"code","9f43422a":"markdown","6a196898":"markdown","065028e7":"markdown","4fb7a691":"markdown","13c0027d":"markdown","162d0f1f":"markdown","fef96ff9":"markdown","9ef394eb":"markdown","ba2896e8":"markdown","76d30e67":"markdown","99d3bc0e":"markdown","c31cc638":"markdown","a53d46ad":"markdown"},"source":{"a15c3966":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd \nimport os\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","33481b96":"df = pd.read_csv(\"..\/input\/habit-loop-tracker\/habitss.csv\"  ,usecols=range(1,8))\ndf = df.replace(2, 1)","18788d9e":"df.head()","8dd4b7da":"df.columns\n# Arthour is my late night activity which I focus on my personal projects for\n# personal or professional development","b84e655e":"df.describe()","43ead5f7":"X = df.iloc[:,[0,1,2,4,5,6]].values # other habits\ny = df.iloc[:,3].values #arthour","397edc61":"#splitting the dataset into Training set and Test Set\nfrom sklearn.model_selection import train_test_split\nLR_X_train, LR_X_test, LR_y_train, LR_y_test = train_test_split(X,y, test_size = 0.2, random_state=0)\nKNN_X_train, KNN_X_test, KNN_y_train, KNN_y_test = train_test_split(X,y, test_size = 0.2, random_state=0)\nSVM_X_train, SVM_X_test, SVM_y_train, SVM_y_test = train_test_split(X,y, test_size = 0.2, random_state=0)\nNB_X_train, NB_X_test, NB_y_train, NB_y_test = train_test_split(X,y, test_size = 0.2, random_state=0)\nDT_X_train, DT_X_test, DT_y_train, DT_y_test = train_test_split(X,y, test_size = 0.2, random_state=0)\nRF_X_train, RF_X_test, RF_y_train, RF_y_test = train_test_split(X,y, test_size = 0.2, random_state=0)","cba3d90d":"from sklearn.linear_model import LogisticRegression\nLR_classifier = LogisticRegression(random_state=0)\nLR_classifier.fit(LR_X_train,LR_y_train)\nLR_y_pred = LR_classifier.predict(LR_X_test)","50460710":"from sklearn.neighbors import KNeighborsClassifier\nKN_classifier = KNeighborsClassifier(n_neighbors = 5, metric='minkowski', p=2)\nKN_classifier.fit(KNN_X_train,KNN_y_train)\nKN_y_pred = KN_classifier.predict(KNN_X_test)","c12c248a":"from sklearn.svm import SVC\nSVC_classifier = SVC(kernel = 'linear', random_state=0)\nSVC_classifier.fit(SVM_X_train,SVM_y_train)\nSVC_y_pred = SVC_classifier.predict(SVM_X_test)","8855f663":"from sklearn.naive_bayes import GaussianNB\nNB_classifier = GaussianNB()\nNB_classifier.fit(NB_X_train,NB_y_train)\nNB_y_pred = NB_classifier.predict(NB_X_test)","f25ffb75":"from sklearn.tree import DecisionTreeClassifier\nDT_classifier = DecisionTreeClassifier(criterion = 'entropy', random_state=0)\nDT_classifier.fit(DT_X_train,DT_y_train)\nDT_y_pred = DT_classifier.predict(DT_X_test)","01d9c330":"from sklearn.ensemble import RandomForestClassifier\nRF_classifier = RandomForestClassifier(n_estimators=10,criterion = 'entropy', random_state=0)\nRF_classifier.fit(RF_X_train,RF_y_train)\nRF_y_pred = RF_classifier.predict(RF_X_test)","c2e2ae86":"from sklearn.model_selection import cross_val_score\n#accuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\n#LR\nLR_CV_accuracies = cross_val_score(estimator = LR_classifier, X = LR_X_train, y = LR_y_train, cv = 10)\nLR_CV_accuracy_mean = LR_CV_accuracies.mean()\nLR_CV_accuracy_std = LR_CV_accuracies.std()\n\n#KNN\nKNN_CV_accuracies = cross_val_score(estimator = KN_classifier, X = KNN_X_train, y = KNN_y_train, cv = 10)\nKNN_CV_accuracy_mean = KNN_CV_accuracies.mean()\nKNN_CV_accuracy_std = KNN_CV_accuracies.std()\n\n#SVM\nSVM_CV_accuracies = cross_val_score(estimator = SVC_classifier, X = SVM_X_train, y = SVM_y_train, cv = 10)\nSVM_CV_accuracy_mean = SVM_CV_accuracies.mean()\nSVM_CV_accuracy_std = SVM_CV_accuracies.std()\n\n#NB\nNB_CV_accuracies = cross_val_score(estimator = NB_classifier, X = NB_X_train, y = NB_y_train, cv = 10)\nNB_CV_accuracy_mean = LR_CV_accuracies.mean()\nNB_CV_accuracy_std = LR_CV_accuracies.std()\n\n#DT\nDT_CV_accuracies = cross_val_score(estimator = DT_classifier, X = DT_X_train, y = DT_y_train, cv = 10)\nDT_CV_accuracy_mean = DT_CV_accuracies.mean()\nDT_CV_accuracy_std = DT_CV_accuracies.std()\n\n#RF\nRF_CV_accuracies = cross_val_score(estimator = RF_classifier, X = RF_X_train, y = RF_y_train, cv = 10)\nRF_CV_accuracy_mean = RF_CV_accuracies.mean()\nRF_CV_accuracy_std = RF_CV_accuracies.std()\n\n\n\n","792ef642":"from sklearn.metrics import precision_recall_fscore_support\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.metrics import roc_auc_score","a8363000":"#LR\n# LR_accuracy = accuracy_score(LR_y_test, LR_y_pred)\nLR_precision = precision_score(LR_y_test, LR_y_pred)\nLR_recall = recall_score(LR_y_test, LR_y_pred)\nLR_f1 = f1_score(LR_y_test, LR_y_pred)\nLR_kappa = cohen_kappa_score(LR_y_test, LR_y_pred)\n\n#KNN\n# KNN_accuracy = accuracy_score(KNN_y_test,KN_y_pred)\nKNN_precision = precision_score(KNN_y_test,KN_y_pred)\nKNN_recall = recall_score(KNN_y_test,KN_y_pred)\nKNN_f1 = f1_score(KNN_y_test,KN_y_pred)\nKNN_kappa = cohen_kappa_score(KNN_y_test,KN_y_pred)\n\n#SVM\n# SVM_accuracy = accuracy_score(SVM_y_test,SVC_y_pred)\nSVM_precision = precision_score(SVM_y_test,SVC_y_pred)\nSVM_recall = recall_score(SVM_y_test,SVC_y_pred)\nSVM_f1 = f1_score(SVM_y_test,SVC_y_pred)\nSVM_kappa = cohen_kappa_score(SVM_y_test,SVC_y_pred)\n\n#NB\n# NB_accuracy = accuracy_score(NB_y_test,NB_y_pred)\nNB_precision = precision_score(NB_y_test,NB_y_pred)\nNB_recall = recall_score(NB_y_test,NB_y_pred)\nNB_f1 = f1_score(NB_y_test,NB_y_pred)\nNB_kappa = cohen_kappa_score(NB_y_test,NB_y_pred)\n\n#DT\n# DT_accuracy = accuracy_score(DT_y_test,DT_y_pred)\nDT_precision = precision_score(DT_y_test,DT_y_pred)\nDT_recall = recall_score(DT_y_test,DT_y_pred)\nDT_f1 = f1_score(DT_y_test,DT_y_pred)\nDT_kappa = cohen_kappa_score(DT_y_test,DT_y_pred)\n\n#RF\n# RF_accuracy = accuracy_score(RF_y_test,RF_y_pred)\nRF_precision = precision_score(RF_y_test,RF_y_pred)\nRF_recall = recall_score(RF_y_test,RF_y_pred)\nRF_f1 = f1_score(RF_y_test,RF_y_pred)\nRF_kappa = cohen_kappa_score(RF_y_test,RF_y_pred)\n\n","56cbc875":"model_res1= {\n    'LR':[LR_precision*100,LR_recall*100,LR_f1*100,LR_kappa*100],\n    'SVM':[SVM_precision*100,SVM_recall*100,SVM_f1*100,SVM_kappa*100],\n    'KNN':[KNN_precision*100,KNN_recall*100,KNN_f1*100,KNN_kappa*100],\n    'NB':[NB_precision*100,NB_recall*100,NB_f1*100,NB_kappa*100],\n    'DT':[DT_precision*100,DT_recall*100,DT_f1*100,DT_kappa*100],\n    'RF':[RF_precision*100,RF_recall*100,RF_f1*100,RF_kappa*100]\n}\neval1 = df = pd.DataFrame(model_res1, index =['Precision', 'Recall', 'F1','Kappa',]) \n","bca557f2":"eval1","1f0e071d":"model_res2= {\n    'LR':[LR_CV_accuracy_mean*100,LR_CV_accuracy_std*100],\n    'SVM':[SVM_CV_accuracy_mean*100,SVM_CV_accuracy_std],\n    'KNN':[KNN_CV_accuracy_mean*100,KNN_CV_accuracy_std],\n    'NB':[NB_CV_accuracy_mean*100,NB_CV_accuracy_std*100],\n    'DT':[DT_CV_accuracy_mean*100,DT_CV_accuracy_std*100],\n    'RF':[RF_CV_accuracy_mean*100,RF_CV_accuracy_std*100]\n}\neval2 = df = pd.DataFrame(model_res2, index =['CV Accuracy Mean', 'CV Accuracy Std']) \neval2","1cbfd937":"from sklearn.metrics import confusion_matrix","45e6caa6":"#LR\nconfusion_matrix(LR_y_test, LR_y_pred)","6f4be927":"#KNN\nconfusion_matrix(KNN_y_test,KN_y_pred)","7ed2a5fc":"#SVM\nconfusion_matrix(SVM_y_test,SVC_y_pred)","97b6d1bc":"#NB\nconfusion_matrix(NB_y_test,NB_y_pred)","d0bce185":"#DT\nconfusion_matrix(DT_y_test,DT_y_pred)","e6cdf41c":"#RF\nconfusion_matrix(RF_y_test,RF_y_pred)","9f43422a":"# Preprocessing","6a196898":"## Confusion Matrix","065028e7":"## SVM","4fb7a691":"## Random Forest","13c0027d":"## KNN","162d0f1f":"### Model Evaluation 1","fef96ff9":"# Cross Validation","9ef394eb":"### Model Evaluation 2","ba2896e8":"# Evaluation","76d30e67":"## Decision Tree (DT)","99d3bc0e":"## Logistic Regression (LR)","c31cc638":"## Naive Bayes (NB)","a53d46ad":"# Classifiers"}}