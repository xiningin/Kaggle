{"cell_type":{"a50c8f9f":"code","a5864715":"code","e51c8f25":"code","e020dfa3":"code","3cb2de94":"code","0cbe35d3":"code","6f812661":"code","2fe1bdfd":"code","416e9271":"code","0f0907a0":"code","0acd98dd":"code","3cf42f28":"code","77e31d69":"code","e7ebf27b":"code","fb1cb37f":"code","cf7eecea":"code","1ff3ae6e":"code","5c867a65":"code","4df11978":"code","91adc3fc":"code","f3775de2":"code","3d711211":"code","4f390841":"code","1e15ed96":"code","f2be3a27":"code","a0cf1df6":"code","cdccb44b":"code","ff79aee3":"markdown","dac09e8b":"markdown","6392a34c":"markdown","1ecb121a":"markdown","9348204d":"markdown","bede9e58":"markdown","7896c294":"markdown","499bc25a":"markdown","a0852024":"markdown","adc5b99c":"markdown","7efa91ab":"markdown","0dcfb674":"markdown","e4cfdc00":"markdown","843790f5":"markdown","fc02e1cb":"markdown","228b4698":"markdown","8dbea297":"markdown","995e57c0":"markdown","aa84667a":"markdown"},"source":{"a50c8f9f":"!pip install cairosvg","a5864715":"import numpy as np\nimport pandas as pd\n\nimport datatable as dt\nimport gc\nimport re\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport shap\nfrom scipy import stats\nfrom tqdm import tqdm\nimport optuna\nfrom optuna.samplers import TPESampler\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier, LGBMModel\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.feature_selection import RFE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom collections import defaultdict\nimport joblib\nimport json\n\n# these imports are used to convert the tree to PNG\nfrom cairosvg import svg2png\nfrom PIL import Image\nfrom io import BytesIO\n\nfrom pandas_profiling import ProfileReport\n\nsns.set(style='whitegrid', font_scale=1.5)\n\nINPUT_DIR = '..\/input\/titanic'\n\nTARGET = 'Survived'\nRANDOM_STATE = 997\nVERSION = 1","e51c8f25":"full_train_df = pd.read_csv(f'{INPUT_DIR}\/train.csv')\nfull_test_df = pd.read_csv(f'{INPUT_DIR}\/test.csv')\nfull_comb_df = pd.concat([full_train_df, full_test_df], ignore_index=True).drop(TARGET, axis=1)","e020dfa3":"full_train_df.info()\nfull_train_df","3cb2de94":"ProfileReport(full_train_df, progress_bar=False).to_widgets()","0cbe35d3":"ddf = full_train_df.copy()\n\nddf['Embarked'].fillna('?', inplace=True)\n\nplt.figure(figsize=(15, 7))\nsns.barplot(data=ddf, x='Embarked', y='Fare', order=ddf['Embarked'].sort_values().unique())\nplt.show()","6f812661":"full_train_df['Embarked'].fillna('C', inplace=True)","2fe1bdfd":"age_mean_pclass_df = full_train_df.groupby('Pclass')['Age'].mean(\n).reset_index().rename(columns={'Age': 'Pclass_Age'})","416e9271":"ddf = full_train_df.copy()\n\nplt.figure(figsize=(15, 7))\nsns.barplot(data=ddf, x='Pclass', y=TARGET, order=ddf['Pclass'].sort_values().unique())\nplt.show()","0f0907a0":"ddf = full_train_df.copy()\n\nplt.figure(figsize=(15, 7))\nsns.barplot(data=ddf, x='Embarked', y=TARGET, order=ddf['Embarked'].sort_values().unique())\nplt.show()","0acd98dd":"ddf = full_train_df.copy()\n\nplt.figure(figsize=(15, 7))\nsns.barplot(data=ddf, x='SibSp', y=TARGET, order=ddf['SibSp'].sort_values().unique())\nplt.show()\n\n# [0, 2], [3,4], [5,inf)\ndef transform_sibsp(x):\n    if x <= 2: return '0'\n    elif 3 <= x <= 4: return '1'\n    return '2'\n\nddf['SibSp'] = ddf['SibSp'].transform(transform_sibsp)","3cf42f28":"ddf = full_train_df.copy()\n\nplt.figure(figsize=(15, 7))\nsns.barplot(data=ddf, x='Parch', y=TARGET, order=ddf['Parch'].sort_values().unique())\nplt.show()\n\n# 0, [1, 3], [4,inf)\ndef transform_parch(x):\n    if x == 0: return '0'\n    elif 1 <= x <= 3: return '1'\n    return '2'\n\nddf['Parch'] = ddf['Parch'].transform(transform_parch)","77e31d69":"ddf = full_train_df.copy()\n\nddf['Family'] = ddf['SibSp'] + ddf['Parch'] + 1\n\nplt.figure(figsize=(15, 7))\nsns.barplot(data=ddf, x='Family', y=TARGET, order=ddf['Family'].sort_values().unique())\nplt.show()\n\n# 1, [2, 4], [5, 7], [8, inf)\ndef transform_family(x):\n    if x == 1: return '0'\n    elif 2 <= x <= 4: return '1'\n    elif 5 <= x <= 7: return '2'\n    return '3'\n\nddf['Family'] = ddf['Family'].transform(transform_family)","e7ebf27b":"ddf = full_train_df.copy()\nddf['Title'] = ddf['Name'].str.split(' ').str[1]\nprint('=== Unique titles ===\\n', ddf['Title'].unique())\n\nddf['Title'] = ddf['Title'].transform(lambda x: x if x in ['Mr.', 'Mrs.', 'Master.', 'Dr.', 'Ms.'] else 'Others')\nddf","fb1cb37f":"train_df = full_train_df.copy()\ntest_df = full_test_df.copy()","cf7eecea":"CATEGORIAL_FEATURES = [\n    'Pclass',\n    'Title',\n    'Sex',\n#     'Ticket',\n#     'Cabin',\n    'Family',\n    'Parch',\n    'SibSp',\n    'Embarked',\n]","1ff3ae6e":"def feature_engineering(df: pd.DataFrame) -> pd.DataFrame:\n\n    # `Age` fillna\n    df = df.merge(age_mean_pclass_df, how='left', on='Pclass')\n    df['Age'].fillna(df['Pclass_Age'], inplace=True)\n    df.drop('Pclass_Age', axis=1, inplace=True)\n\n    # `Fare` fillna\n    df['Fare'].fillna(df['Fare'].mean(), inplace=True)\n\n    # generate `Family`\n    df['Family'] = df['SibSp'] + df['Parch'] + 1\n\n    # generate `Title` and then drop 'Name'\n    df['Title'] = df['Name'].str.split(' ').str[1]\n    df['Title'] = df['Title'].transform(\n        lambda x: x if x in ['Mr.', 'Mrs.', 'Master.', 'Dr.', 'Ms.'] else 'Others')\n    df.drop('Name', axis=1, inplace=True)\n    \n    # transform\n    df['SibSp'] = df['SibSp'].transform(transform_sibsp)\n    df['Parch'] = df['Parch'].transform(transform_parch)\n    df['Family'] = df['Family'].transform(transform_family)\n    \n    df.fillna(0, inplace=True)\n\n    for col_ in CATEGORIAL_FEATURES:\n        df[col_] = df[col_].astype('category')\n\n    return df","5c867a65":"train_df = feature_engineering(train_df)\n\ntrain_df.info()\ntrain_df.isnull().sum() \/ len(train_df)","4df11978":"test_df = feature_engineering(test_df)\n\ntest_df.info()\ntest_df.isnull().sum() \/ len(test_df)","91adc3fc":"FEATURES = train_df.columns.drop(['PassengerId', 'Cabin', 'Ticket', TARGET])\nFEATURES","f3775de2":"def objective(trial):\n    X_train, X_valid, y_train, y_valid = train_test_split(\n        train_df[FEATURES],\n        train_df[TARGET],\n        test_size=0.2,\n        random_state=RANDOM_STATE\n    )\n    lgb_train = lgb.Dataset(\n        X_train, y_train, categorical_feature=CATEGORIAL_FEATURES, free_raw_data=False)\n    lgb_valid = lgb.Dataset(\n        X_valid, y_valid, categorical_feature=CATEGORIAL_FEATURES, free_raw_data=False)\n\n    param = {\n        \"boosting_type\": \"gbdt\",\n        \"objective\": \"binary\",\n        \"verbosity\": -1,\n        \"learning_rate\": trial.suggest_uniform(\"learning_rate\", 0.1, 1),\n        \"num_leaves\": trial.suggest_int(\"num_leaves\", 7, 127),\n        \"max_depth\": trial.suggest_int(\"max_depth\", 3, 32),\n        \"min_data_in_leaf\": trial.suggest_int(\"min_data_in_leaf\", 7, 63),\n        'random_state': RANDOM_STATE,\n    }\n\n    model = lgb.train(param,\n                      lgb_train,\n                      num_boost_round=200,\n                      early_stopping_rounds=10,\n                      verbose_eval=10,\n                      valid_sets=[lgb_train, lgb_valid])\n    y_pred = model.predict(X_valid) >= 0.5\n    accuracy = accuracy_score(y_valid, y_pred)\n\n    return accuracy\n\n\nstudy = optuna.create_study(\n    direction=\"maximize\", sampler=TPESampler(seed=RANDOM_STATE))\nstudy.optimize(objective, n_trials=20)\n\nprint(\"Number of finished trials: {}\".format(len(study.trials)))\n\nprint(\"Best trial:\")\ntrial = study.best_trial\n\nprint(\"  Value: {}\".format(trial.value))\n\nprint(\"  Params: \")\nfor key, value in trial.params.items():\n    print(\"    {}: {}\".format(key, value))","3d711211":"%%time\nparams = {\n    'boosting_type': 'gbdt',\n    'objective': 'binary',\n    'metric': 'binary_logloss',\n    'learning_rate': 0.2,\n    'max_depth': 9,\n    'num_leaves': 117,\n    'min_data_in_leaf': 22,\n    'random_state': RANDOM_STATE,\n    'verbose': -1\n}\n\nparams.update(trial.params)\n\nX_train, X_valid, y_train, y_valid = train_test_split(\n    train_df[FEATURES],\n    train_df[TARGET],\n    test_size=0.2,\n    random_state=RANDOM_STATE\n)\nlgb_train = lgb.Dataset(\n    X_train, y_train, categorical_feature=CATEGORIAL_FEATURES, free_raw_data=False)\nlgb_valid = lgb.Dataset(\n    X_valid, y_valid, categorical_feature=CATEGORIAL_FEATURES, free_raw_data=False)\n\nmodel = lgb.train(params,\n                  lgb_train,\n                  num_boost_round=200,\n                  early_stopping_rounds=10,\n                  verbose_eval=10,\n                  valid_sets=[lgb_train, lgb_valid])\n\ny_pred = model.predict(X_valid) >= 0.5\n\naccuracy = round(accuracy_score(y_valid, y_pred), 4)\nprint('\\n\\n>> LGBM accuracy:', accuracy)","4f390841":"lgb.plot_importance(model, figsize=(15, 15), importance_type='split')\nplt.show()","1e15ed96":"lgb.plot_importance(model, figsize=(15, 15), importance_type='gain')\nplt.show()","f2be3a27":"# show tree and save as png\ndef save_tree_diagraph(model):\n    tree_digraph = lgb.create_tree_digraph(model, show_info=['split_gain', 'internal_count'])\n\n    tree_png = svg2png(tree_digraph._repr_svg_(), output_width=3840)\n    tree_png = Image.open(BytesIO(tree_png))\n\n    tree_png.save('tree_digraph.png')\n\n    display(tree_png)\n    \nsave_tree_diagraph(model)","a0cf1df6":"shap.initjs()\n\nexplainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(X_valid)\n\nshap.summary_plot(shap_values, X_valid, plot_type=\"bar\")","cdccb44b":"test_df[TARGET] = model.predict(test_df[FEATURES]) >= 0.5\ntest_df[TARGET] = test_df[TARGET].astype(np.int8)\nsubmission_df = test_df[['PassengerId', TARGET]]\nsubmission_df.to_csv('output.csv', index=False)\nsubmission_df","ff79aee3":"## Embarked","dac09e8b":"<a id='3-5'><\/a><br>\n## Start training","6392a34c":"# <center style=\"background-color:Gainsboro; width:60%;\">Content<\/center>\n\n1. [Load](#1)\n2. [Training set](#2)\n3. [Train LGBM](#3)\n    - [3-1 Define the FE function](#3-1)\n    - [3-2 Train FE](#3-2)\n    - [3-3 Test FE](#3-3)\n    - [3-4 Tune](#3-4)\n    - [3-5 Start training](#3-5)\n    - [3-6 Feature importance](#3-6)\n4. [Submit](#4)\n\n","1ecb121a":"## Name","9348204d":"## Handle missing `Embarded` values","bede9e58":"<a id='3-4'><\/a><br>\n## Tune","7896c294":"## SibSp + Parch -> Family","499bc25a":"## Handle missing `Age` values","a0852024":"<a id='3-3'><\/a><br>\n## Test FE","adc5b99c":"<a id='1'><\/a><br>\n# <center style=\"background-color:Gainsboro; width:60%;\">Load<\/center>","7efa91ab":"<a id='4'><\/a><br>\n# <center style=\"background-color:Gainsboro; width:60%;\">Submit<\/center>","0dcfb674":"<a id='3-2'><\/a><br>\n## Train FE","e4cfdc00":"<a id='3-1'><\/a><br>\n## Define the FE function","843790f5":"## SibSp","fc02e1cb":"## Pclass","228b4698":"<a id='2'><\/a><br>\n# <center style=\"background-color:Gainsboro; width:60%;\">Training set<\/center>","8dbea297":"<a id='3-6'><\/a><br>\n## Feature Importance","995e57c0":"## Parch","aa84667a":"<a id='3'><\/a><br>\n# <center style=\"background-color:Gainsboro; width:60%;\">Train LGBM<\/center>"}}