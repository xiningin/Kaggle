{"cell_type":{"c0bcc695":"code","200198a8":"code","e813c779":"code","55bb30c2":"code","e687ed4e":"code","6f8774fe":"code","97c01f06":"code","1807198f":"code","d53f98d9":"markdown","3440ea53":"markdown","68590fa5":"markdown","7afa5b6e":"markdown","f9521514":"markdown","ea11b138":"markdown","32cf8b00":"markdown"},"source":{"c0bcc695":"import warnings\nwarnings.filterwarnings(\"ignore\")","200198a8":"import tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom abc import ABC, abstractmethod\n\nfrom typing import Optional, Callable\nimport pandas as pd","e813c779":"class ImagePipeline(ABC):\n    input_path = '..\/input\/petfinder-pawpularity-score\/'","55bb30c2":"class TrainImagePipeline(ImagePipeline):\n    X: tf.keras.preprocessing.image.DirectoryIterator\n    def get_dataframe(self):\n        self.df = pd.read_csv(\n            self.input_path + \"train.csv\",\n        )[['Id', 'Pawpularity']]\n        self.df.index = self.df.Id\n        self.df.index = self.df.index.astype(str) + \".jpg\"\n        self.df.drop(\"Id\", axis=1, inplace=True)\n        \n    def __init__(\n        self,\n        datagen: Optional[ImageDataGenerator]=None,\n        seed: Optional[int]=1234\n    ):\n        if datagen:\n            self.datagen = datagen\n        else:\n            self.datagen = ImageDataGenerator(\n                rescale=1.\/255,\n                width_shift_range=0.2,\n                height_shift_range=0.2,\n                shear_range=0.2,\n                zoom_range=0.2,\n                horizontal_flip=True,\n                validation_split=0.25\n            )\n        \n        self.get_dataframe()\n\n        self.X = self.datagen.flow_from_dataframe(\n            dataframe=self.df.reset_index(),\n            directory=self.input_path + \"train\",\n            x_col=\"Id\",\n            y_col=\"Pawpularity\",\n            class_mode=\"raw\",\n            shuffle=True,\n            target_size=(224, 224),\n            batch_size=32,\n            seed=seed,\n            subset='training'\n        )\n        \n        self.X_val = self.datagen.flow_from_dataframe(\n            dataframe=self.df.reset_index(),\n            directory=self.input_path + \"train\",\n            x_col=\"Id\",\n            y_col=\"Pawpularity\",\n            class_mode=\"raw\",\n            shuffle=True,\n            target_size=(224, 224),\n            batch_size=32,\n            seed=seed,\n            subset='validation'\n        )\n        \ntrain = TrainImagePipeline()","e687ed4e":"class TestImagePipeline(ImagePipeline):\n    X: tf.keras.preprocessing.image.DirectoryIterator\n    \n    def get_dataframe(self):\n        self.df = pd.read_csv(\n            self.input_path + \"test.csv\",\n        )[['Id']]\n        self.df.index = self.df.Id\n        self.df.index = self.df.index.astype(str) + \".jpg\"\n        self.df.drop(\"Id\", axis=1, inplace=True)\n        \n    def __init__(\n        self,\n        datagen: Optional[ImageDataGenerator]=None,\n        seed: Optional[int]=1234\n    ):\n        self.datagen = ImageDataGenerator(\n            rescale=1.\/255\n        )\n        self.get_dataframe()\n        self.X = self.datagen.flow_from_dataframe(\n            dataframe=self.df.reset_index(),\n            directory=self.input_path + \"test\",\n            x_col=\"Id\",\n            class_mode=None,\n            target_size=(224, 224),\n            batch_size=32,\n            seed=seed\n        )\ntest = TestImagePipeline()","6f8774fe":"from keras.models import Sequential, Model\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense, Input\n\n\nclass KerasFitter():\n    def __init__(\n        self,\n        get_model_function: Callable,\n        train: TrainImagePipeline,\n        epochs: int = 1,\n        name=\"model\"\n    ):\n        self.name = name\n        self.epochs = epochs\n        self.train = train\n        self.model = get_model_function()\n        self.model.summary()\n    \n    def run(self):\n        \"\"\"\n        Run fit modle\n        \"\"\"\n        checkpoint_filepath = f'{self.name}.h5'\n        model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(\n            filepath=checkpoint_filepath,\n            monitor='val_loss',\n            verbose=1,\n            mode='min',\n            save_best_only=True\n        )\n        self.model.fit_generator(\n            self.train.X,\n            epochs=self.epochs,\n            validation_data=self.train.X_val,\n            callbacks=[model_checkpoint_callback]\n        )\n    \n    def save(self):\n        \"\"\"\n        Save model\n        \"\"\"\n        self.model(f\"{self.name}.h5\")\n        ","97c01f06":"def get_poc():\n    \"\"\"\n    Get a Prove of Concept model\n    \"\"\"\n    X = Input(shape=(224, 224, 3))\n    output = Conv2D(32, (3, 3))(X)\n    output = Activation('relu')(output)\n    output = MaxPooling2D(pool_size=(2, 2))(output)\n\n    output = Conv2D(32, (3, 3))(output)\n    output = Activation('relu')(output)\n    output = MaxPooling2D(pool_size=(2, 2))(output)\n\n\n    output = Flatten()(output)  # this converts our 3D feature maps to 1D feature vectors\n    output = Dense(128, activation='relu', name=\"encode\")(output)\n    output = Dropout(0.5)(output)\n    output = Dense(64, activation='relu')(output)\n    output = Activation('relu')(output)\n    output = Dropout(0.5)(output)\n    output = Dense(1)(output)\n    y = Activation('relu')(output)\n    \n    model = Model(X, y)\n    model.compile(\n        loss='mse',\n        optimizer='adam',\n        metrics=['mse', 'mae']\n    )\n\n    return model\n\n\nfit_effnet = KerasFitter(get_poc, train, epochs=10, name=\"poc\")\nfit_effnet.run()","1807198f":"from tensorflow.keras.applications import EfficientNetB0\n\ndef get_effnet():\n    \"\"\"\n    Get EfficientNet model\n    \"\"\"\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver.connect()\n        print(\"Device:\", tpu.master())\n        strategy = tf.distribute.TPUStrategy(tpu)\n    except ValueError:\n        print(\"Not connected to a TPU runtime. Using CPU\/GPU strategy\")\n        strategy = tf.distribute.MirroredStrategy()\n    with strategy.scope():\n        \n        efficientnet = EfficientNetB0(\n            include_top=True,\n            weights=None,\n            classes=500\n        )\n        \n        # Fine tuner\n#         efficientnet.trainable = False\n#         for layer in efficientnet.layers[-1:-2]:\n#             if not isinstance(layer, tf.keras.layers.BatchNormalization):\n#                 layer.trainable = True\n        \n        inputs = Input(shape=(224, 224, 3))\n        outputs = EfficientNetB0(include_top=True, weights=None, classes=500)(inputs)\n        outputs = Dense(1)(outputs)\n        outputs = Activation('relu')(outputs)\n        model = tf.keras.Model(inputs, outputs)\n        \n        tf.keras.optimizers.Adam(\n            learning_rate=0.05,\n            beta_1=0.9,\n            beta_2=0.999,\n            epsilon=1e-07,\n            amsgrad=False,\n            name=\"Adam\"\n        )\n        model.compile(\n            optimizer=\"adam\", loss=\"mse\", metrics=[\"mse\", \"mae\"]\n        )\n        \n    return model\n\n\nfit_effnet = KerasFitter(get_effnet, train, epochs=10, name=\"effnet\")\nfit_effnet.run()","d53f98d9":"## Image importer pipeline","3440ea53":"# Effnet","68590fa5":"## Abstact","7afa5b6e":"# Image essentials","f9521514":"# Modelling\n## Model POC","ea11b138":"# My plan\n\n<img src=\"https:\/\/storage.googleapis.com\/kagglesdsdata\/datasets\/1668256\/2736421\/Untitled%20Diagram.jpg?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=databundle-worker-v2%40kaggle-161607.iam.gserviceaccount.com%2F20211024%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20211024T123653Z&X-Goog-Expires=345599&X-Goog-SignedHeaders=host&X-Goog-Signature=9e680da0f538f11121b42c676b8c0253ec3c4ab87ff211a0cedc3b56e26319b0642efdea15b465954153dda3fa31d28371c2ffcefc1bb9b57e49181051d56ea8350ac3bf05a13e3fef9e65a321b88e84c841b3ad7ad6941c9c93d2db2d23882620c08b61390e0fdaac276331aa323fcce6fbb931d748b1aecabc3a662f7910481b2ad4e9625f01055d19af1b673ff14cd24aaae2c5ae85a56a9a8f88da75a88051b8676a88ae4fe46e55a37e5f1093eab67d7c1e4d3348d92419f5d3fc12932832307e0e9c3a13e6aff6afcb84f4c0a8365757b3c1d9f9b010c422aa4b2008ae9c1ef31b7200a145f9b69a36280168166b2fe138a52e6de8d1e879bbfdf097c1\" width=\"750\" height=\"500\">","32cf8b00":"# Train"}}