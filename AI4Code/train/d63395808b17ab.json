{"cell_type":{"5ed2ee1b":"code","4cea0f23":"code","5fb95f31":"code","be78299c":"code","c204c6b1":"code","1fe6c619":"code","1686b576":"code","e46a2a87":"code","ea62f3e8":"code","3c74a16d":"code","9bd6b87a":"code","f87e9228":"code","5556177b":"code","1549ec98":"code","038da80d":"code","363b6f5e":"code","b1c58a5d":"code","d6c2d278":"code","0c45faa1":"code","d63b1d7a":"code","27d6e0c3":"code","611be0f7":"code","1c3f5c8e":"code","01d85150":"code","36482fd5":"markdown","9406e563":"markdown","56ebf1dd":"markdown","8033a5ef":"markdown"},"source":{"5ed2ee1b":"import os\nimport gc\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import kurtosis\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.linear_model import LogisticRegression\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nfrom sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold\nimport xgboost as xgb\nwarnings.simplefilter(action='ignore', category=FutureWarning)","4cea0f23":"DATA_DIRECTORY = \"..\/input\/home-credit-loan-better-data-processing\"","5fb95f31":"train = pd.read_csv(os.path.join(DATA_DIRECTORY, 'train.csv'))\ntest_df = pd.read_csv(os.path.join(DATA_DIRECTORY, 'test.csv'))\nlabels = pd.read_csv(os.path.join(DATA_DIRECTORY, 'labels.csv'))","be78299c":"import re\ntrain = train.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))\ntest = test_df.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))\nlabels = labels.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))","c204c6b1":"train=np.nan_to_num(train)\ntest=np.nan_to_num(test)\nlabels=np.nan_to_num(labels)","1fe6c619":"train = pd.DataFrame(train)\ntest = pd.DataFrame(test)\nlabels=pd.DataFrame(labels)","1686b576":"train.head()","e46a2a87":"print(test.shape)","ea62f3e8":"from lightgbm import LGBMClassifier\n\nlgbmc = LGBMClassifier()\nlgbmc.fit(train, labels)","3c74a16d":"lgbm_pred = lgbmc.predict_proba(test)[:,1]","9bd6b87a":"lgbm_pred_train = lgbmc.predict_proba(train)[:,1]","f87e9228":"from sklearn.ensemble import RandomForestClassifier\n\nrf =RandomForestClassifier()\nrf.fit(train, labels)","5556177b":"rf_pred = rf.predict_proba(test)[:,1]","1549ec98":"rf_pred_train = rf.predict_proba(train)[:,1]","038da80d":"lgbm_pred=pd.DataFrame(lgbm_pred)\nrf_pred=pd.DataFrame(rf_pred)","363b6f5e":"lgbm_pred_train=pd.DataFrame(lgbm_pred_train)\nrf_pred_train=pd.DataFrame(rf_pred_train)","b1c58a5d":"df_test = pd.concat([lgbm_pred, rf_pred], axis=1)\npredd=lgbm_pred\ndel lgbm_pred, rf_pred\ngc.collect()","d6c2d278":"df_test.head()","0c45faa1":"df_train = pd.concat([lgbm_pred_train, rf_pred_train], axis=1)\ndel lgbm_pred_train, rf_pred_train\ngc.collect()","d63b1d7a":"df_train.head()","27d6e0c3":"print(df_train.shape)","611be0f7":"from keras.models import Sequential\nfrom keras.layers import Dense\nmodel = Sequential([\n    Dense(1000, activation='relu', input_shape=(2,)),\n    Dense(1000, activation='relu'),\n    Dense(1000, activation='relu'),\n    Dense(1000, activation='relu'),\n    Dense(1, activation='sigmoid'),\n])\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n              \nhist = model.fit(df_train, labels,\n          batch_size=32, epochs=2)","1c3f5c8e":"pred = model.predict_proba(df_test)","01d85150":"submit = test_df[['SK_ID_CURR']]\nsubmit['TARGET'] = predd\nsubmit.to_csv('ensamble_1_updated_data.csv', index = False)","36482fd5":"# NN","9406e563":"# Random Forest","56ebf1dd":"# Enasamble-1(LGBM+RF+NN)","8033a5ef":"# LGBM"}}