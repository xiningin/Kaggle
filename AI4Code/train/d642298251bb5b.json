{"cell_type":{"5b27ecb2":"code","05c57c90":"code","32a3df5e":"code","0e392941":"code","887cbebe":"code","dbd43413":"code","5b88ecf0":"code","187b37c5":"code","0b59d55f":"code","1fb664ff":"code","0a913210":"code","4e6b4b08":"code","14259cef":"code","5b0f8d50":"code","def74167":"code","e348dc57":"code","ce7bab99":"code","7a39947f":"code","9c51485c":"code","bbdcd43d":"code","03a760f9":"code","0dfa1022":"code","4768aa24":"code","fd03b05d":"code","f257ee16":"code","a4471757":"code","06b9eba7":"code","558cf81f":"code","3be06e6c":"code","1b7fd586":"code","a1a0a190":"code","e457559a":"code","59db17d6":"code","7ae9c7cd":"code","67d796ba":"code","f3bf7366":"code","0372704d":"markdown","4309edf1":"markdown","38c33737":"markdown","eb9c3ed4":"markdown","b396b3ab":"markdown","a952c9dd":"markdown","63fa61bb":"markdown","fb376361":"markdown","76e2c8e1":"markdown","746abcc4":"markdown","5cdfc619":"markdown","99434841":"markdown"},"source":{"5b27ecb2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","05c57c90":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel, cosine_similarity\nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.corpus import wordnet\nfrom scipy import stats\nfrom ast import literal_eval\n\nfrom surprise import Reader, Dataset, SVD\nfrom surprise.model_selection import cross_validate\nimport warnings; warnings.simplefilter('ignore')","32a3df5e":"sr=pd.read_csv('\/kaggle\/input\/the-movies-dataset\/movies_metadata.csv')\nsr.head()","0e392941":"sr.shape","887cbebe":"np.sum(sr.isna())","dbd43413":"sr['genres'] = sr['genres'].apply(literal_eval).apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])\nsr = sr.drop([19730, 29503, 35587])","5b88ecf0":"#Number of votes for the movie\nnumber_votes=sr[sr['vote_count'].notnull()]['vote_count']\nnumber_votes","187b37c5":"#Average rating of the movie\nvote_average=sr[sr['vote_average'].notnull()]['vote_average']\nvote_average","0b59d55f":"#Mean votes across the whole report\nC=np.mean(vote_average)\nC","1fb664ff":"m=np.quantile(number_votes,0.9)\nm","0a913210":"Reduced_movies=sr[(sr['vote_count']>m) & (sr['vote_count'].notnull())][['title','popularity','genres','vote_count','vote_average']]\nReduced_movies.head()","4e6b4b08":"np.sum(Reduced_movies.isna())\n#There is no null values in the final data set","14259cef":"Reduced_movies['Weighted_rating'] = (Reduced_movies['vote_count']\/(Reduced_movies['vote_count']+m))*Reduced_movies['vote_average'] + (m\/(Reduced_movies['vote_count']+m))*C\nReduced_movies.head()","5b0f8d50":"#Sort the values in descending order\nReduced_movies=Reduced_movies.sort_values('Weighted_rating',ascending=False)\nReduced_movies.head(20)","def74167":"def simple_recommendation(data,genre='Nothing',percentile=0.9):\n    if genre != 'Nothing':\n        data=data[data['genres'].apply(lambda x: True if genre in x else False)]\n    votes=data[data['vote_count'].notnull()]['vote_count']\n    vote_average=data[data['vote_average'].notnull()]['vote_average']\n    C=np.mean(vote_average)\n    m=np.quantile(votes,percentile)\n    data=data[(data['vote_count']>m) & (data['vote_count'].notnull())]\n    data['Weighted_rating'] = (data['vote_count']\/(data['vote_count']+m))*data['vote_average'] + (m\/(data['vote_count']+m))*C\n    return data.sort_values('Weighted_rating',ascending=False)","e348dc57":"simple_recommendation(sr,'Nothing')[['title','popularity','genres','vote_count','vote_average']].head(20)","ce7bab99":"simple_recommendation(sr,'Mystery')[['title','popularity','genres','vote_count','vote_average']].head(20)","7a39947f":"sr.columns","9c51485c":"sample=simple_recommendation(sr,'Nothing',0.70)\nsample['overview']=sample['overview'].fillna('')\nsample['tagline']=sample['tagline'].fillna('')\nsample['description']=(sample['tagline']+' '+sample['overview']).fillna('')","bbdcd43d":"vector=TfidfVectorizer(stop_words='english',analyzer='word',ngram_range=(1,2))\nmatrix=vector.fit_transform(sample['description'])\nmatrix.shape","03a760f9":"cosine = linear_kernel(matrix, matrix)","0dfa1022":"data=sample.reset_index()\ntitles=data['title']\nindices = pd.Series(data.index, index=data['title'])","4768aa24":"def content_based_recommendation(title,indices=indices,titles=titles,cosine=cosine):\n    idx=indices[title]\n    sim_scores = list(enumerate(cosine[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    movie_indices=[i[0] for i in sim_scores[1:26]]\n    return titles.iloc[movie_indices]","fd03b05d":"content_based_recommendation('Inception')","f257ee16":"keyword=pd.read_csv('\/kaggle\/input\/the-movies-dataset\/keywords.csv')\ncredits=pd.read_csv('\/kaggle\/input\/the-movies-dataset\/credits.csv')\nkeyword['id'] = keyword['id'].astype('int')\ncredits['id'] = credits['id'].astype('int')\nsr['id'] = sr['id'].astype('int')\nsr = sr.merge(credits, on='id')\nsr = sr.merge(keyword, on='id')\n","a4471757":"sample=simple_recommendation(sr,'Nothing',0.70)\nsample.columns","06b9eba7":"sample['cast'] = sample['cast'].apply(literal_eval)\nsample['crew'] = sample['crew'].apply(literal_eval)\nsample['keywords'] = sample['keywords'].apply(literal_eval)","558cf81f":"#one of the important crew members we preferred for watching the film are DIRECTORS","3be06e6c":"def diro(x):\n    for i in x:\n        if i['job']=='Director':\n            return i['name']\n    return ''\n\ndef get_list(x):\n    if isinstance(x, list):\n        names = [i['name'] for i in x]\n        if len(names) > 3:\n            names = names[:3]\n        return names\n    return []","1b7fd586":"sample['director']=sample['crew'].apply(diro)\nsample['cast']=sample['cast'].apply(get_list)\nsample['keywords']=sample['keywords'].apply(get_list)","a1a0a190":"data = sample\ndef clean_data(x):\n    if isinstance(x,list):\n        return [str.lower(i.replace(\" \",\"\")) for i in x]\n    else:\n        if isinstance(x,str):\n            #the director is multiplied with 3 to increase its weight as there are 3 actors.\n            return [str.lower(x.replace(\" \",\"\")) for i in range(3)] \n\nfeatures=['director','keywords','cast','genres']\nfor i in features:\n    data[i]=data[i].apply(clean_data)\n        ","e457559a":"data['All']=(data['director'] + data['keywords'] + data['cast'] + data['genres']).apply(lambda x: ' '.join(x))\ndata.head()[features+['All']]","59db17d6":"count = CountVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')\nmatrix = count.fit_transform(data['All'])\nmatrix.shape","7ae9c7cd":"cosine = cosine_similarity(matrix, matrix)\ndata = data.reset_index()\ntitles=data['title']\nindices = pd.Series(data.index, index=data['title'])","67d796ba":"content_based_recommendation('The Dark Knight',indices,titles,cosine)","f3bf7366":"content_based_recommendation('Inception',indices,titles,cosine)","0372704d":"I will use IMDB's weighted rating formula to construct my chart. Mathematically, it is represented as follows:\n\nWeighted Rating (WR) =  (v\/(v+m))*R   +   (m\/(v+m))*C\n\n\n\n* v is the number of votes for the movie \n* m is the minimum votes required to be listed in the chart\n* R is the average rating of the movie\n* C is the mean vote across the whole report","4309edf1":"# # As our recommender only recommends based on the Plot or description of the movie, but many of us prefers movies based on actors or other crew members.","38c33737":"# **SIMPLE RECOMMENDATION FINAL SYSTEM WITH Genre**","eb9c3ed4":"# **CONTENT BASED RECOMMENDER**","b396b3ab":"**As, we can see the recommendations are very good based on the content which invloves the directors, actors and others.**","a952c9dd":"So, the next one will be based on Content based recommendations based on directors, actors and others","63fa61bb":"# # As the computation is very higher if we use all 40,000 data, so we will take percentile to be 80% from the previous Recommeder and then use it here for the Description based Recommender.","fb376361":"# **SIMPLE RECOMMENDER\/ Demographic Filtering**\n\n","76e2c8e1":"#  Use the Weighted Rating Formula","746abcc4":"The minimum votes required to be on the list can be defined by taking 90% percentile as our cutoff.","5cdfc619":"The content of the movie (overview, cast, crew, keyword, tagline etc) is used to find its similarity with other movies. Then the movies that are most likely to be similar are recommended.\n\n\n\n**MOVIE DESCRIPTION\/PLOT BASED RECOMMENDER**","99434841":"This type of recommenders offers based on movie popularity and genre. This recommender does not give personalized recommendations based on the user history. All we have to do is sort our movies based on ratings and popularity and display the top movies of our list"}}