{"cell_type":{"3fd7cd3a":"code","ec6e6e59":"code","7c413a5f":"code","de1669df":"code","a62fb9ca":"code","fd6bcaee":"code","0395e0a1":"code","d3b80472":"code","bf816828":"code","a1634b1b":"code","1def2fdc":"code","b5bc5027":"code","2c46fd91":"code","73f13dd7":"code","e7fc96d7":"code","e249c122":"code","4866c065":"code","d0b31364":"code","6fe38990":"code","a4edccac":"code","f71588f9":"code","97533a8c":"code","77abd7ff":"code","efe90cb6":"code","2135bd63":"code","c435051b":"code","bbee82dd":"code","aafdc7ea":"code","29ca56f6":"code","30898a7f":"code","95bc1d52":"code","0a5b8f73":"code","23f56fd6":"code","a24baaaa":"code","f27dd898":"code","f9a9a0ad":"code","a5fb4d2c":"code","50e8dbb5":"code","7be52b7a":"code","79573c29":"code","00231e32":"code","9644ba48":"code","ce149091":"code","df286856":"code","c53cf0fe":"code","6054ef52":"code","d7672de6":"code","20822f3a":"code","55d7517e":"code","81e9fdd6":"code","673838ba":"code","5f075188":"code","54917be1":"code","54cb5d8a":"code","523980bd":"code","dbe1c398":"code","dbf0425e":"code","f358fb6c":"code","ba68d0c2":"code","a9a63a8c":"code","978c227a":"code","56e9b36f":"code","8369642e":"code","0c312179":"code","bee7fcd3":"code","7caa86bb":"code","6ab51777":"code","0c617836":"code","4a7f1bc9":"code","916190d7":"code","adf54cc1":"code","29fa24db":"code","38450763":"code","c00f9711":"code","2445477c":"code","33b3d4e3":"code","cfc7797d":"code","2a37c168":"markdown","5a7efa26":"markdown","da3654d9":"markdown","773e1eac":"markdown","2fd980c3":"markdown","82d4da20":"markdown","e4178a98":"markdown","c456c877":"markdown","789fc93a":"markdown","8b096e47":"markdown","d604df72":"markdown","b8dde211":"markdown","5e6fd144":"markdown","4942236c":"markdown","9c80f551":"markdown","05a4a0eb":"markdown","64c2a239":"markdown","ac0eb159":"markdown","11b34544":"markdown","4d79c62e":"markdown","6910d89e":"markdown","c4af7ff9":"markdown","6724738f":"markdown"},"source":{"3fd7cd3a":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings('ignore') ","ec6e6e59":"kill = pd.read_csv('..\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv', encoding=\"windows-1252\")","7c413a5f":"kill.head()","de1669df":"kill.shape","a62fb9ca":"kill.name.value_counts()","fd6bcaee":"# Problem: TK TK is most probably not a name or surname. We will clean them.\npairs = kill.name[kill.name != 'TK TK'].str.split()\npairs.head()","0395e0a1":"type(pairs)","d3b80472":"pairs.shape","bf816828":"pairs[0]","a1634b1b":"pairs[0][0]","1def2fdc":"table=[]\nfor i in pairs:\n    for j in i:\n        table.append(j)","b5bc5027":"len(table)","2c46fd91":"most_common_names=Counter(table)\nmost_common_names","73f13dd7":"most_common_names = most_common_names.most_common(15)\nmost_common_names","e7fc96d7":"df = pd.DataFrame(list(most_common_names), columns=[\"name_or_surname_most_frequency\", \"frequency\"])\ndf","e249c122":"# with pandas\nfig, ax = plt.subplots(figsize=(15,8))\ndf.plot(rot=45, kind='bar', ax=ax)\n\nax.set_ylabel(\"Frequency\")\nax.set_xlabel(\"Names or Surnames\")\nax.set_title(\"Most common 15 Name OR Surname of killed people\")\nax.set_xticklabels(df.name_or_surname_most_frequency, rotation=45)\n\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x()+0.2, p.get_height()+0.5));","4866c065":"# with matplotlib\nfig, ax = plt.subplots(figsize=(15,8))\nax.bar(x=df.name_or_surname_most_frequency, height=df.frequency)\n\nax.set_ylabel(\"Frequency\")\nax.set_xlabel(\"Names or Surnames\")\nax.set_title(\"Most common 15 Name OR Surname of killed people\")\nax.set_xticklabels(df.name_or_surname_most_frequency, rotation=45)\n\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x()+0.2, p.get_height()+0.5));","d0b31364":"# with seaborn\nfig, ax = plt.subplots(figsize=(15,7))\nsns.barplot(x=\"name_or_surname_most_frequency\", y=\"frequency\", data=df)\n\nax.set_ylabel(\"Frequency\")\nax.set_xlabel(\"Names or Surnames\")\nax.set_title(\"Most common 15 Name OR Surname of killed people\")\nax.set_xticklabels(df.name_or_surname_most_frequency, rotation=45)\n\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x()+0.2, p.get_height()+0.5));","6fe38990":"kill.head()","a4edccac":"kill.race.unique()","f71588f9":"kill.race.value_counts(dropna=False)","97533a8c":"kill.dropna(inplace=True)","77abd7ff":"kill.shape","efe90cb6":"kill.race.value_counts(dropna=False)","2135bd63":"labels=kill.race.value_counts().index\nlabels","c435051b":"sizes=kill.race.value_counts().values\nsizes","bbee82dd":"explode = (0, 0, 0.1, 0, 0, 0)\n\nfig1, ax1 = plt.subplots(figsize=(10,10))\nax1.pie(x = sizes, \n        explode=explode, \n        labels=labels, \n        autopct='%1.1f%%',\n#         shadow=True, \n        startangle=70,\n#         radius=1.5,\n       );","aafdc7ea":"kill.head()","29ca56f6":"kill.manner_of_death.unique()","30898a7f":"# with pandas\nfig, ax = plt.subplots(2,2,figsize=(12,8))\n\n\nkill[(kill['gender']=='M') & (kill['manner_of_death']=='shot')]['age'].plot(kind='box',ax=ax[0,0])\nax[0,0].set_ylabel(\"age\")\nax[0,0].set_xlabel(\"gender=M, manner_of_death=shot \")\n\nkill[(kill['gender']=='F')  & (kill['manner_of_death']=='shot')]['age'].plot(kind='box',ax=ax[0,1])\nax[0,1].set_ylabel(\"age\")\nax[0,1].set_xlabel(\"gender=F, manner_of_death=shot \")\n\nkill[(kill['gender']=='M') & (kill['manner_of_death']=='shot and Tasered')]['age'].plot(kind='box',ax=ax[1,0])\nax[1,0].set_ylabel(\"age\")\nax[1,0].set_xlabel(\"gender=M, manner_of_death= shot and Tasered \")\n\nkill[(kill['gender']=='F')  & (kill['manner_of_death']=='shot and Tasered')]['age'].plot(kind='box',ax=ax[1,1])\nax[1,1].set_ylabel(\"age\")\nax[1,1].set_xlabel(\"gender=F, manner_of_death= shot and Tasered \")\nplt.show()","95bc1d52":"# with matplotlib\nfig, ax = plt.subplots(2,2,figsize=(12,8))\n\nax[0,0].boxplot(kill[(kill['gender']=='M') & (kill['manner_of_death']=='shot')]['age'])\nax[0,0].set_ylabel(\"age\")\nax[0,0].set_xlabel(\"gender=M, manner_of_death=shot \")\n\nax[0,1].boxplot(kill[(kill['gender']=='F') & (kill['manner_of_death']=='shot')]['age'])\nax[0,1].set_ylabel(\"age\")\nax[0,1].set_xlabel(\"gender=F, manner_of_death=shot \")\n\nax[1,0].boxplot(kill[(kill['gender']=='M') & (kill['manner_of_death']=='shot and Tasered')]['age'])\nax[1,0].set_ylabel(\"age\")\nax[1,0].set_xlabel(\"gender=M, manner_of_death= shot and Tasered \")\n\nax[1,1].boxplot(kill[(kill['gender']=='F') & (kill['manner_of_death']=='shot and Tasered')]['age'])\nax[1,1].set_ylabel(\"age\")\nax[1,1].set_xlabel(\"gender=F, manner_of_death= shot and Tasered \")\nplt.show()","0a5b8f73":"# with seaborn\nsns.boxplot(x=\"gender\", y=\"age\", hue = \"manner_of_death\", data=kill);","23f56fd6":"# with matplotlib\nplt.figure(figsize=(8,8))\n\nplt.subplot(2, 2, 1)\nplt.violinplot(kill[(kill[\"gender\"]==\"M\") & (kill[\"manner_of_death\"]==\"shot\")][\"age\"])\nplt.title(\"Shot\")\nplt.ylabel(\"age\")\nplt.xlabel(\"gender=M\")\n\nplt.subplot(2, 2, 2)\nplt.violinplot(kill[(kill[\"gender\"]==\"M\") & (kill[\"manner_of_death\"]==\"shot and Tasered\")][\"age\"])\nplt.title(\"Shot_Tasered\")\nplt.xlabel(\"gender=M\")\n\nplt.subplot(2, 2, 3)\nplt.violinplot(kill[(kill[\"gender\"]==\"F\") & (kill[\"manner_of_death\"]==\"shot\")][\"age\"])\nplt.ylabel(\"age\")\nplt.xlabel(\"gender=F\")\n\nplt.subplot(2, 2, 4)\nplt.violinplot(kill[(kill[\"gender\"]==\"F\") & (kill[\"manner_of_death\"]==\"shot and Tasered\")][\"age\"])\nplt.xlabel(\"gender=F\")\n\nplt.tight_layout() ","a24baaaa":"# with seaborn\nfig, ax = plt.subplots(figsize=(10,6))\nsns.swarmplot(x=\"gender\", y=\"age\", hue = \"manner_of_death\", data=kill);","f27dd898":"kill.head()","f9a9a0ad":"# with pandas\n\nfig, ax = plt.subplots()\nkill.gender.value_counts().plot(kind='bar', ax=ax)\n# or\n# ax = kill.gender.value_counts().plot(kind='bar')\n\nax.set_title(\"Gender Distribution\", fontsize=15)\n\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x()+0.2, p.get_height()+20));","a5fb4d2c":"# with matplotlib\nfig, ax = plt.subplots()\nax.bar(kill.gender.value_counts().index,kill.gender.value_counts().values)\nax.set_title(\"Gender Distribution\", fontsize=15)\n\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x()+0.35, p.get_height()+20));","50e8dbb5":"# with seaborn\nfig, ax = plt.subplots()\nsns.countplot(x=\"gender\", data=kill)\nax.set_title(\"Gender Distribution\", fontsize=15)\n\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x()+0.35, p.get_height()+20));","7be52b7a":"common_weapons = kill.armed.value_counts(dropna=False)[:7]\ncommon_weapons","79573c29":"# with pandas\nfig, ax = plt.subplots(figsize=(8,5))\ncommon_weapons.plot(kind='bar',ax=ax)\nax.set_xticklabels(common_weapons.index, rotation=45)\n\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x()+0.1, p.get_height()+10));","00231e32":"# with matplotlib\nfig, ax = plt.subplots(figsize=(8,5))\nax.bar(x = common_weapons.index, height=common_weapons.values)\nax.set_xticklabels(common_weapons.index, rotation=45)\n\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x()+0.1, p.get_height()+10));","9644ba48":"# with seaborn barplot\nfig, ax = plt.subplots(figsize=(8,5))\nsns.barplot(x=common_weapons.index, y=common_weapons.values)\nax.set_xticklabels(common_weapons.index, rotation=45)\n\nfor p in ax.patches:\n    ax.annotate(round(p.get_height()), (p.get_x()+0.25, p.get_height()+10));","ce149091":"# with seaborn countplot\nfig, ax = plt.subplots(figsize=(8,5))\nsns.countplot(x='armed', data=kill, order=kill.armed.value_counts().iloc[:7].index )\nax.set_xticklabels(kill.armed.value_counts().iloc[:7].index, rotation=45)\n\nfor p in ax.patches:\n    ax.annotate(round(p.get_height()), (p.get_x()+0.25, p.get_height()+10));","df286856":"kill.head()","c53cf0fe":"kill[\"age_cat\"]=kill.age.apply(lambda x : \"above25\" if x >25 else \"below25\")","6054ef52":"kill.head()","d7672de6":"age_class = kill.age_cat.value_counts()\nage_class","20822f3a":"# with pandas\nax = age_class.plot.bar()\n\nfor p in ax.patches:\n    ax.annotate(round(p.get_height()), (p.get_x()+0.2, p.get_height()+10));","55d7517e":"# with matplotlib\nfig, ax = plt.subplots()\nax.bar(x = age_class.index, height= age_class.values)\n\nfor p in ax.patches:\n    ax.annotate(round(p.get_height()), (p.get_x()+0.35, p.get_height()+10));","81e9fdd6":"# with seaborn\nax = sns.countplot(x=\"age_cat\", data=kill)\n\nfor p in ax.patches:\n    ax.annotate(round(p.get_height()), (p.get_x()+0.35, p.get_height()+10));","673838ba":"race_freq = kill.race.value_counts()\nrace_freq","5f075188":"# with pandas\nax = race_freq.plot.bar()\nax.set_title('Race of killed people',color = 'blue',fontsize=15);","54917be1":"# with matplotlib\nfig, ax = plt.subplots()\nax.bar(x=race_freq.index, height=race_freq.values)\nax.set_title('Race of killed people',color = 'blue',fontsize=15);","54cb5d8a":"# with seaborn barplot\n# fig, ax = plt.subplots()\nax = sns.barplot(x=race_freq.index, y=race_freq.values)\nax.set_title('Race of killed people',color = 'blue',fontsize=15);","523980bd":"# with seaborn countplot\nfig, ax = plt.subplots()\nsns.countplot(x=\"race\", data=kill,\n             order=race_freq.index,\n             )\nax.set_title('Race of killed people',color = 'blue',fontsize=15);","dbe1c398":"city_freq = kill.city.value_counts()[:12]\ncity_freq","dbf0425e":"# with pandas\nax = city_freq.plot.bar(rot=45, figsize=(8,5))\nax.set_title('Most dangerous cities',color = 'blue',fontsize=15);","f358fb6c":"# with matplotlib\nfig, ax =plt.subplots(figsize=(8,5))\nax.bar(x=city_freq.index, height=city_freq.values)\nax.set_title('Most dangerous cities',color = 'blue',fontsize=15)\nax.set_xticklabels(city_freq.index, rotation = 45);","ba68d0c2":"# with seaborn barplot\nfig, ax =plt.subplots(figsize=(8,5))\nax = sns.barplot(x=city_freq.index, y=city_freq.values)\nax.set_xticklabels(city_freq.index, rotation = 45)\nax.set_title('Most dangerous cities',color = 'blue',fontsize=15);","a9a63a8c":"# with seaborn countplot\nfig, ax =plt.subplots(figsize=(8,5))\nsns.countplot(x=\"city\", data=kill,\n             order=city_freq.index,\n             )\nax.set_xticklabels(city_freq.index, rotation = 45)\nax.set_title('Most dangerous cities',color = 'blue',fontsize=15);","978c227a":"state_freq = kill.state.value_counts()[:20]\nstate_freq","56e9b36f":"# with pandas\nax = state_freq.plot.bar(rot=45, figsize=(8,5))\nax.set_title('Most dangerous states',color = 'blue',fontsize=15);","8369642e":"# with matplotlib\nfig, ax =plt.subplots(figsize=(8,5))\nax.bar(x=state_freq.index, height=state_freq.values)\nax.set_title('Most dangerous states',color = 'blue',fontsize=15)\nax.set_xticklabels(state_freq.index, rotation = 45);","0c312179":"# with seaborn barplot\nfig, ax =plt.subplots(figsize=(8,5))\nax = sns.barplot(x=state_freq.index, y=state_freq.values)\nax.set_xticklabels(state_freq.index, rotation = 45)\nax.set_title('Most dangerous states',color = 'blue',fontsize=15);","bee7fcd3":"# with seaborn countplot\nfig, ax =plt.subplots(figsize=(8,5))\nsns.countplot(x=\"state\", data=kill,\n             order=state_freq.index,\n             )\nax.set_xticklabels(state_freq.index, rotation = 45)\nax.set_title('Most dangerous states',color = 'blue',fontsize=15);","7caa86bb":"illness = kill.signs_of_mental_illness.value_counts()\nillness","6ab51777":"# with pandas\nillness.plot.bar(rot=0);","0c617836":"# with matplotlib\nfig, ax =plt.subplots(figsize=(8,5))\nax.bar(x=illness.index,\n       height=illness.values)\nax.set_xticks(np.arange(illness.size))\nax.set_xticklabels(illness.index, rotation = 0);","4a7f1bc9":"# with seaborn\nsns.countplot(kill.signs_of_mental_illness);","916190d7":"threads_freq = kill.threat_level.value_counts()\nthreads_freq","adf54cc1":"# with pandas\nthreads_freq.plot.bar(rot=0);\n# kill.threat_level.value_counts().plot.bar(rot=0);","29fa24db":"# with matplotlib\nfig, ax =plt.subplots()\nax.bar(x=threads_freq.index,\n       height=threads_freq.values)\nax.set_xticks(np.arange(threads_freq.size))\nax.set_xticklabels(threads_freq.index, rotation = 0);","38450763":"# with seaborn\nsns.countplot(kill.threat_level);","c00f9711":"flee_freq = kill.flee.value_counts()\nflee_freq","2445477c":"# with pandas\nflee_freq.plot.bar(rot=0);","33b3d4e3":"# with matplotlib\nfig, ax =plt.subplots()\nax.bar(x=flee_freq.index,\n       height=flee_freq.values)\nax.set_xticks(np.arange(flee_freq.size))\nax.set_xticklabels(flee_freq.index, rotation = 0);","cfc7797d":"# with seaborn\nsns.countplot(kill.flee);","2a37c168":"**INSTRUCTION-3: Plot number of age of killed people under two groups : Under 25 and Above 25**","5a7efa26":"**INSTRUCTION-6: Plot 20 most dangerous states**","da3654d9":"**INSTRUCTION-9: Plot number of Flee Types**","773e1eac":"**INSTRUCTION-2: Plot 7 most common kill weapons**","2fd980c3":"**INSTRUCTION-1: Plot number of people by gender**","82d4da20":"Dataset Resource: [Kaggle](https:\/\/www.kaggle.com\/kwullum\/fatal-police-shootings-in-the-us)","e4178a98":"**INSTRUCTION : Plot Most common 15 Name OR Surname of killed people** ","c456c877":"## 3a.Box plot of age in both genders separeted by manner of death.","789fc93a":"## 5. Kill properties","8b096e47":"**INSTRUCTION-7: Plot Having mental ilness or not for killed people**","d604df72":"**INSTRUCTION: Demonstrate the Qurtiles of age in both genders separeted by manner of death.**","b8dde211":"**INSTRUCTION-2: Demonstrate Race Ratio of Killed People by a Pie Chart (You can use Matplotlib)**","5e6fd144":"**INSTRUCTION-4: Plot number of killed poeple by race**","4942236c":"Problem: missing value on race column.","9c80f551":"**INSTRUCTION-8: Plot number of Threat Types**","05a4a0eb":"**INSTRUCTION-1: Drop the all raws that contain missing value (dropna)**","64c2a239":"## 3b. Swarm or Violin Plot ","ac0eb159":"## 1. Most common 15 Name or Surname of killed people ","11b34544":"**INSTRUCTION-5: Plot 12 most dangerous cities**","4d79c62e":"## 2. Killed People According to Races (Pie Chart)","6910d89e":"INSTRUCTIONS\n1. Most common 15 Name or Surname of killed people\n1. Killed People According to Races\n1. Box and Swarm Plots in kill data\n1. Kill properties (Count Plot)\n    * Number of people by gender\n    * Kill weapon\n    * Age of killed people\n    * Race of killed people\n    * Most dangerous cities\n    * Most dangerous states\n    * Having mental ilness or not for killed people\n    * Threat types\n    * Flee types\n<br>","c4af7ff9":"**INSTRUCTION: Demonstrate the age in both genders separeted by manner of death by a swarm or violin plot.**","6724738f":"# Clue 1: You need to separate the names and surnames because we are asking most common name OR surname.\n\n# Clue 2 :After seperation make a whole list that contains both names and surnames.\n\n# Clue 3 : How to separate the name and surname pairs?\n\n>>> pairs = [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]\n>>> numbers, letters = zip(*pairs)\n>>> numbers\n(1, 2, 3, 4)\n>>> letters\n('a', 'b', 'c', 'd')\n\n# Clue 4: You can use Counter() and most_common() built in functions together to find the most common names or surnames, or you can write your own functions for this purpose."}}