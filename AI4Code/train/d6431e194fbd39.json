{"cell_type":{"f5f30d52":"code","51f989fd":"code","4cb8db12":"code","526007e7":"code","46297709":"code","9236458d":"code","1eb52dbd":"code","c1ed92ca":"code","6d1aff6e":"code","7d13befb":"code","82550e3b":"code","27241750":"code","4b12a4f9":"markdown","8ff9bcad":"markdown","e02680e4":"markdown","91167a27":"markdown","273d218c":"markdown","cc1f3cd0":"markdown","b5a89a2d":"markdown","05f26b6f":"markdown","6465a62a":"markdown","be3a733e":"markdown","1f932950":"markdown","b2dda3bc":"markdown"},"source":{"f5f30d52":"# Pandas\nimport pandas as pd\n# Numpy\nimport numpy as np\n# Visualisation\nimport plotly.express as px","51f989fd":"Train = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/train.csv',  index_col='id')\nTest = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/test.csv',  index_col='id')","4cb8db12":"highest_corr = np.abs(Train.corr()[['loss']]).sort_values('loss', ascending=False).iloc[1:10]","526007e7":"virtualise_data = Train[list(highest_corr.index) + ['loss']]\n\nfig = px.parallel_coordinates(\n    virtualise_data.sample(15000, random_state=125),\n    color=\"loss\",\n    color_continuous_scale=px.colors.diverging.Tealrose,\n                             color_continuous_midpoint=2,\n    range_color=[\n        min(virtualise_data['loss']),\n        max(virtualise_data['loss'])\n    ]\n    \n)\nfig.show()","46297709":"from sklearn.preprocessing import PowerTransformer\n\nX_train = Train.drop('loss', axis=1)\ny_train = Train[['loss']]\n\npt = PowerTransformer()\n\npt.fit(X_train)\nX_train = pt.transform(X_train)","9236458d":"normalise_data = pd.concat([pd.DataFrame(X_train), y_train], axis=1)\nhighest_corr = np.abs(normalise_data.corr()[['loss']]).sort_values('loss', ascending=False).iloc[1:10]\nhighest_corr","1eb52dbd":"virtualise_data = normalise_data[list(highest_corr.index) + ['loss']]\n\nfig = px.parallel_coordinates(\n    virtualise_data.sample(15000, random_state=1254),\n    color=\"loss\",\n    color_continuous_scale=px.colors.diverging.Tealrose,\n                             color_continuous_midpoint=2,\n    range_color=[\n        min(virtualise_data['loss']),\n        max(virtualise_data['loss'])\n    ]\n    )\nfig.show()","c1ed92ca":"from sklearn.model_selection import KFold\n\n# Config variable\nN_FOLD = 20\n\nkf = KFold(n_splits=N_FOLD)\nkf.get_n_splits(X_train)\n\nprint(kf)\n\nX_train = pd.DataFrame(X_train)\n\nfor train_index, test_index in kf.split(X_train):\n    print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n    X_train_fold, X_test_fold = X_train.loc[train_index], X_train.loc[test_index]\n    y_train_fold, y_test_fold = y_train.iloc[train_index], y_train.iloc[test_index]","6d1aff6e":"from copy import deepcopy\n\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\n\ndef RMSE(prediction, actual):\n    return mean_squared_error(prediction, actual, squared=False)\n\n# Select features\nnormalise_data = pd.concat([pd.DataFrame(X_train), y_train], axis=1)\nhighest_corr = np.abs(normalise_data.corr()[['loss']]).sort_values('loss', ascending=False).iloc[1:11]\nselected_features = list(highest_corr.index)\n\nclass Trainer:\n    def __init__(self, n_fold, model, X_train, y_train):\n        self.N_FOLD = n_fold\n        self.kf = KFold(n_fold)\n        self.kf.get_n_splits(X_train)\n        self.X_train = X_train\n        self.y_train = y_train\n        self.model = model\n        self.train_results = {}\n    \n    @staticmethod\n    def evaluate(prediction, actual, metrics: list):\n        results = {}\n        for metric in metrics:\n            results[metric.__name__] = metric(prediction, actual)\n        return results\n    \n    \n    def train(self, model_fit_args: dict={}, metrics=[]):\n        for k, (train_index, test_index)in enumerate(self.kf.split(self.X_train)):\n            X_train_fold, X_test_fold = self.X_train.iloc[train_index], self.X_train.iloc[test_index]\n            y_train_fold, y_test_fold = self.y_train.iloc[train_index], self.y_train.iloc[test_index]\n            \n            X_train_fold_sample = X_train_fold.sample(10000, random_state=1234)[selected_features]\n            y_train_fold_sample =  y_train_fold.loc[X_train_fold_sample.index]\n\n            model.fit(X_train_fold_sample, y_train_fold_sample)\n            \n            train_prediction = model.predict(X_train_fold_sample)\n            train_score = self.evaluate(train_prediction, y_train_fold_sample, metrics)\n            \n            test_prediction = model.predict(X_test_fold[selected_features])\n            test_score = self.evaluate(test_prediction, y_test_fold, metrics)\n            \n            self.train_results[f'Fold {k}'] = {}\n            self.train_results[f'Fold {k}']['model'] = deepcopy(model) \n            self.train_results[f'Fold {k}']['train_score'] = train_score\n            self.train_results[f'Fold {k}']['test_score'] = test_score\n            print(f'Fold {k}')\n            print(self.train_results[f'Fold {k}'])\n            print('-' * 36)\n    \n    def predict(self, X):\n        predictions = pd.DataFrame()\n        for k, fold in self.train_results.items():\n            model = fold['model']\n            prediction = model.predict(X[selected_features])\n            predictions[k] = prediction\n        return predictions.mean(axis=1)\n        ","7d13befb":"from sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor(\n    max_depth=2,\n    criterion='mse',\n    random_state=12,\n    bootstrap=True\n)\n\n# from sklearn.ensemble import HistGradientBoostingRegressor\n# model = HistGradientBoostingRegressor()\n","82550e3b":"trainer = Trainer(N_FOLD, model, X_train, y_train)\ntrainer.train(metrics=[RMSE, mean_absolute_error])","27241750":"X_valid = pd.DataFrame(pt.transform(Test))[selected_features]\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-aug-2021\/sample_submission.csv', index_col='id')\nsubmission['loss'] = trainer.predict(X_valid).values\nsubmission.to_csv('submission.csv')","4b12a4f9":"## Feature selection","8ff9bcad":"## Normalise","e02680e4":"# Set up training process","91167a27":"# Train","273d218c":"### Set up Kfold","cc1f3cd0":"# Import","b5a89a2d":"# Analytics","05f26b6f":"## Visualise sample data","6465a62a":"### Make it into class based","be3a733e":"## Make models","1f932950":"## Split data","b2dda3bc":"# Submission"}}