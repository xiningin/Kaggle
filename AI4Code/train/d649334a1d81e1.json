{"cell_type":{"44ca5ec0":"code","8d448a66":"code","f790862b":"code","d9cc927c":"code","53f764bd":"code","b48967da":"code","a23ea3b6":"code","54ee6716":"code","7610c9d6":"code","dc78c5a3":"code","b8d50ddb":"code","fb7a425e":"code","6303de15":"code","e1960198":"code","d68b8ca3":"code","71f0c68b":"code","b4122511":"code","cf9eeff4":"code","19e7cd4f":"code","2b5ad584":"markdown","6c2b16af":"markdown","d1440f1b":"markdown","4bb18431":"markdown","a70b86e4":"markdown","823270ca":"markdown","e0d43bd7":"markdown","28cf0610":"markdown","5e0c4c54":"markdown","c34434a2":"markdown","f82e3861":"markdown","cea4562f":"markdown","d9647a44":"markdown","700a894b":"markdown","60f66c2b":"markdown","a677715c":"markdown"},"source":{"44ca5ec0":"%%writefile main.py\nimport random\n\ndef random_agent_seeded(observation, configuration, seed=42):\n    # Set a deterministic seed\n    if observation.step == 0:\n        random.seed(seed)\n\n    action = random.randint(0, configuration.signs-1)\n    print(f'random_agent_seeded({seed}) = {action}')\n    return int(action)\n\n\ndef random_agent_unseeded(observation, configuration):\n    # Reset seed using system clock\n    if observation.step == 0:\n        random.seed(None)\n\n    action = random.randint(0, configuration.signs-1)\n    print(f'random_agent_unseeded() = {action}')\n    return int(action)\n","8d448a66":"%%writefile -a main.py\n# %%writefile IrrationalAgent.py\n# Source: https:\/\/www.kaggle.com\/jamesmcguigan\/random-seed-search-irrational-agent\/\n# Source: https:\/\/github.com\/JamesMcGuigan\/ai-games\/blob\/master\/games\/rock-paper-scissors\/rng\/IrrationalAgent.py\n\nimport re\nimport time\nfrom typing import List, Union\n\nfrom mpmath import mp\nmp.dps = 2048  # more than 1000 as 10%+ of chars will be dropped\n\n\ndef encode_irrational(irrational: Union[str,mp.mpf], offset=0) -> List[int]:\n    \"\"\"\n    Encode the irrational number into trinary\n    The irrational is converted to a string, \"0\"s are removed\n    Then each of the digits is converted to an integer % 3 and added the to sequence\n    \"\"\"\n    if isinstance(irrational, list) and all([ 0 <= n <= 2 for n in irrational ]):\n        return irrational  # prevent double encoding\n\n    string   = re.sub('[^1-9]', '', str(irrational))\n    sequence = [\n        ( int(c) + int(offset) ) % 3\n        for c in string\n    ]\n    assert len(sequence) >= 1000\n    return sequence\n\n\n\nclass IrrationalAgent():\n    \"\"\"\n    Play an fixed sequence of moves derived the digits of an irrational number\n\n    Irrational numbers are more mathematically pure source of randomness than\n    the repeating numbers used by the Mersenne Twister RNG\n\n    This agent is pure Chaos and contains no Order capable of being exploited once the game has started\n\n    Its only vulnerability is Password Attack.\n    Pleased to meet you, won't you guess my name?\n\n    There are an uncountable infinity of irrational numbers\n    Your choice of irrational is your password\n    Be irrational in your choice of irrational if want this agent to be secure\n    Alternatively choose a popular irrational with an offset to attack a specific agent\n\n    This is the true Nash Equilibrium solution to Rock Paper Scissors\n    \"\"\"\n\n    irrationals = {\n        name: encode_irrational(irrational)\n        for name, irrational in {\n            'pi':       mp.pi(),\n            'phi':      mp.phi(),\n            'e':        mp.e(),\n            'sqrt2':    mp.sqrt(2),\n            'sqrt5':    mp.sqrt(5),\n            'euler':    mp.euler(),\n            'catalan':  mp.catalan(),\n            'apery':    mp.apery(),\n            # 'khinchin':  mp.khinchin(),  # slow\n            # 'glaisher':  mp.glaisher(),  # slow\n            # 'mertens':   mp.mertens(),   # slow\n            # 'twinprime': mp.twinprime(), # slow\n        }.items()\n    }\n\n\n    def __init__(self, name='irrational', irrational: Union[str,mp.mpf] = None, offset=0, verbose=True):\n        # Irrational numbers are pure random sequences that are immune to random seed search\n        # Using name == 'irrational' causes the number to be reset each new game\n        if irrational is not None and ( name == 'irrational' or name in self.irrationals.keys() ):\n            name = 'secret'\n        if name == 'irrational':\n            irrational = self.generate_secure_irrational()\n        if name in self.irrationals.keys():\n            irrational = self.irrationals[name]\n        self.irrational = self.encode_irrational(irrational, offset=offset)\n\n        self.name       = name\n        self.offset     = offset\n        self.verbose    = verbose\n        self.reset()\n\n\n    def reset(self):\n        \"\"\"\n        Reset on the first turn of every new game\n        This allows a single instance to be run in a loop for testing\n        \"\"\"\n        self.history = {\n            \"action\":   [],\n            \"opponent\": []\n        }\n        if self.name == 'irrational':\n            irrational      = self.generate_secure_irrational()\n            self.irrational = self.encode_irrational(irrational, offset=self.offset)\n\n\n\n    def __call__(self, obs, conf):\n        return self.agent(obs, conf)\n\n    def agent(self, obs, conf):\n        \"\"\" Wrapper function for setting state in child classes \"\"\"\n\n        # Generate a new history and irrational seed for each new game\n        if obs.step == 0:\n            self.reset()\n\n        # Keep a record of opponent and action state\n        if obs.step > 0:\n            self.history['opponent'].append(obs.lastOpponentAction)\n\n        # This is where the subclassable agent logic happens\n        action = self.action(obs, conf)\n\n        # Keep a record of opponent and action state\n        self.history['action'].append(action)\n        return action\n\n\n    def action(self, obs, conf):\n        \"\"\" Play the next digit in a fixed irrational sequence \"\"\"\n        action = int(self.irrational[ obs.step % len(self.irrational) ])\n        action = (action + self.offset) % conf.signs\n        if self.verbose:\n            name = self.__class__.__name__ + ':' + self.name + (f'+{self.offset}' if self.offset else '')\n            opponent = ( self.history['opponent'] or [None] )[-1]\n            expected = ( action - 1 ) % 3\n            print(f\"{obs.step:4d} | {opponent}{self.win_symbol()} > action {action} | \" +\n                  f\"{name}\")\n        return action\n\n\n    @staticmethod\n    def generate_secure_irrational():\n        \"\"\"\n        Be irrational in your choice of irrational if want this agent to be secure\n        \"\"\"\n        irrational = sum([\n            mp.sqrt(n) * (time.monotonic_ns() % 2**32)\n            for n in range(2, 5 + (time.monotonic_ns() % 1024))\n        ])\n        return irrational\n\n\n    @classmethod\n    def encode_irrational(cls, irrational: Union[str,mp.mpf], offset=0) -> List[int]:\n        if irrational is None:\n            irrational = cls.generate_secure_irrational()\n        return encode_irrational(irrational, offset)\n\n\n\n    ### Logging\n\n    def win_symbol(self):\n        \"\"\" Symbol representing the reward from the previous turn \"\"\"\n        action   = ( self.history['action']   or [None] )[-1]\n        opponent = ( self.history['opponent'] or [None] )[-1]\n        if isinstance(action, int) and isinstance(opponent, int):\n            if action % 3 == (opponent + 1) % 3: return '+'  # win\n            if action % 3 == (opponent + 0) % 3: return '|'  # draw\n            if action % 3 == (opponent - 1) % 3: return '-'  # loss\n        return ' '\n\n\nirrational_instance = IrrationalAgent(name='pi', offset=0)\ndef irrational_agent(obs, conf):\n    return irrational_instance.agent(obs, conf)\n","f790862b":"%%writefile -a main.py\n# %%writefile IrrationalSearchAgent.py\n# Source: https:\/\/www.kaggle.com\/jamesmcguigan\/random-seed-search-irrational-search-agent\/\n# Source: https:\/\/github.com\/JamesMcGuigan\/ai-games\/blob\/master\/games\/rock-paper-scissors\/rng\/IrrationalSearchAgent.py\nfrom typing import List, Tuple, Union\n\nfrom mpmath import mp\n\n# from IrrationalAgent import IrrationalAgent\n\n\nclass IrrationalSearchAgent(IrrationalAgent):\n    \"\"\"\n    This attempts a Password Attack against IrrationalAgent\n\n    Its only vulnerability is Password Attack.\n    Pleased to meet you, won't you guess my name?\n\n    There are an uncountable infinity of irrational numbers,\n    but a rather limited number of useful irrationals with pronounceable names\n\n    This will only work if the opponent has chosen to play an irrational agent\n    but has chosen to play a popular named irrational\n    and has also chosen the same trinary encoding algorithm\n\n    If the opponent is not playing a known irrational sequence\n    then the true Nash Equilibrium is to play a secret and unnamed irrational sequence\n    \"\"\"\n\n    def __init__(self, name='irrational', irrational=None, search: List[Union[str, mp.mpf]]=None, verbose=True):\n        search = {\n            f'irrational#{n}': self.encode_irrational(number)\n            for n, number in enumerate(search)\n        } if search is not None else {}\n        self.irrationals = { **self.__class__.irrationals, **search }\n        super().__init__(name=name, irrational=irrational, verbose=verbose)\n\n\n    def action(self, obs, conf):\n        expected, irrational_name = self.search_irrationals(self.history['opponent'])\n        if expected is not None:\n            action   = (expected + 1) % conf.signs\n            opponent = ( self.history['opponent'] or [None] )[-1]\n            if self.verbose:\n                print(f\"{obs.step:4d} | {opponent}{self.win_symbol()} > action {expected} -> {action} | \" +\n                      f\"Found Irrational: {irrational_name}\")\n        else:\n            action = super().action(obs, conf)  # play our own irrational number sequence\n        return action\n\n\n    def search_irrationals(self, sequence: List[int]) -> Tuple[int, str]:\n        \"\"\"\n        Search through list of named irrational sequences\n        if found, return the next expected number in the sequence along with the name\n        \"\"\"\n        expected, irrational_name = None, None\n        if len(sequence):\n            for offset in [0,1,2]:\n                for irrational_name, irrational in self.irrationals.items():\n                    irrational = [ (n + offset) % 3 for n in irrational[:len(sequence)+1] ]\n                    if irrational[:len(sequence)] == sequence:\n                        expected = irrational[len(sequence)]\n                        break\n                else: continue\n                break\n        return expected, irrational_name\n\n\n\n\nirrational_search_instance = IrrationalSearchAgent()\ndef irrational_search_agent(obs, conf):\n    return irrational_search_instance.agent(obs, conf)\n","d9cc927c":"%%writefile -a main.py\n# %%writefile RandomSeedSearch.py\n# Source: https:\/\/www.kaggle.com\/jamesmcguigan\/random-seed-search-nash-equilibrium-opening-book\/\n# Source: https:\/\/github.com\/JamesMcGuigan\/ai-games\/blob\/master\/games\/rock-paper-scissors\/rng\/RandomSeedSearch.py\n\nimport glob\nimport os\nimport random\nimport time\nfrom collections import defaultdict\nfrom operator import itemgetter\nfrom typing import List, Optional, Tuple\n\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'  # disable tensorflow logging\n\nimport numpy as np\nimport tensorflow as tf\nfrom humanize import naturalsize\n\n# from rng.IrrationalSearchAgent import IrrationalSearchAgent\n\n# BUGFIX: Kaggle Submission Environment os.getcwd() == \"\/kaggle\/working\/\"\nif os.environ.get('GFOOTBALL_DATA_DIR', ''):\n    os.chdir('\/kaggle_simulations\/agent\/')\n\n\nclass RandomSeedSearch(IrrationalSearchAgent):\n    \"\"\"\n    The Random Seed Search algorithm takes the default RNG `random.random(seed)`,\n    and generates RNG sequences (length 20) for as many seeds as can fit in the\n    100Mb submission filesize limit. This happens to be 20 million seeds.\n    Numpy.size = `(20,000,000, 20) x int8` = 425.0 MB = 94Mb tar.gz.\n    Compression offers a ~4.5x space saving,\n    mostly due to the first 6 bits in every int8 being zero for trinary numbers.\n\n    Pre-caching costs 27 minutes of compile time.\n    By careful use of excluding previously rejected seeds,\n    we can search this array very quickly and even implement\n    offset search for the opponents history without the 1s timelimit.\n    Each turn we can reduce the remaining search space by a factor of 3.\n    This is compared to the previous implemention which could\n    only search about ~10,000 seeds per turn using a python loop.\n\n    If a seed is found, the next number in the sequence can be predicted\n    without violating apparent randomness.\n    This effectively acts as an opening book against Mersenne Twister RNG agents.\n    What is observed in practice is the Random Seed Search is only occasionally able to\n    find a small sequences numbers, often during the other agent's random warmup period.\n    I have not yet seen a +500 score against an unseeded random agent.\n    I suspect these partial matching sequences represent hash collisions\n    of repeating sequences within the Mersenne Twister number.\n\n    As the history gets longer, hash collisions become exponentially rarer.\n    This is the game-winning difference between using a repeating number and irrational number\n    for your source of randomness.\n    The effect is quite small, but the 50% standard deviation for a random draw\n    is in this game is only 20. A statistical 2-3 point advantage shifts\n    the probability distribution of endgame score, a -21 score gets converted into a draw\n    and a +19 score gets converted into a win.\n\n    This is equivalent to the statistical effect that causes\n    Black Holes to slowly lose mass via Hawking Radiation.\n\n    Achievement Unlocked: Beat the unbeatable Nash Equilibrium RNG bot!\n    \"\"\"\n\n    methods     = [ 'random' ]  # [ 'np', 'tf' ]  # just use random\n    cache_steps = 20  # seeds are rarely found after move 15\n    cache_seeds = int(4 * 100_000_000 \/ len(methods) \/ cache_steps)  # 100Mb x 4.25x tar.gz compression\n    cache = {\n        method: np.load(f'{method}.npy')\n        for method in methods\n        if os.path.exists(f'{method}.npy')\n    }\n\n    def __init__(self,\n                 min_length=4,\n                 max_offset=1000,\n                 use_stats=True,\n                 cheat=False,\n                 no_submit=False,\n                 verbose=True\n    ):\n        \"\"\"\n        :param min_length:  minimum sequence length for a match 3^4 == 1\/81 probability\n        :param max_offset:  maximum offset to search for from start of history\n        :param use_stats:   pick the most probable continuation rather than minimum seed\n        :param no_submit:   throw exception mid-game, to allow testing  submission environment\n        :param cheat:       set the opponents seed - only works on localhost\n        :param verbose:     log output to console\n        \"\"\"\n        self.use_stats  = use_stats\n        self.cheat      = cheat   # needs to be set before super()\n        self.min_length = min_length\n        self.max_offset = max_offset\n        self.no_submit  = no_submit\n        self.conf       = {'episodeSteps': 1000, 'actTimeout': 1000, 'agentTimeout': 15, 'runTimeout': 1200, 'isProduction': False, 'signs': 3}\n        super().__init__(verbose=verbose)\n        self.print_cache_size()\n\n    def reset(self):\n        \"\"\" This gets called at the beginning of every game \"\"\"\n        if self.verbose >= 2: print(f'{self.__class__.__name__} | reset()')\n        super().reset()\n\n        # SPEC: self.candidate_seeds[method][offset] = list(seeds)\n        self.candidate_seeds = defaultdict(lambda: defaultdict(dict))\n        # SPEC: self.repeating_seeds[method] = count\n        self.repeating_seeds = defaultdict(lambda: defaultdict(int))\n        if self.cheat:\n            self.set_global_seed()\n\n\n    # obs  {'step': 168, 'lastOpponentAction': 0}\n    # conf {'episodeSteps': 1000, 'actTimeout': 1000, 'agentTimeout': 15, 'runTimeout': 1200, 'isProduction': False, 'signs': 3}\n    def action(self, obs, conf):\n        # NOTE: self.history state is managed in the parent class\n        self.conf = conf\n\n        # This allows testing of the agent without actually submitting to the competition\n        if self.no_submit and obs.step > 900:\n            raise Exception(\"Don't Submit To Competition\")\n\n        # This is a short circuit to speed up unit tests\n        irrational, irrational_name = self.search_irrationals(self.history['opponent'])\n        if irrational is not None and obs.step > self.min_length + 2:\n            return super().action(obs, conf)\n\n        # Search the Random Seed Cache\n        # Important to do this each turn as it reduces self.candidate_seeds[offset] by 1\/3\n        expected, seed, offset, method = self.search_cache(self.history['opponent'])\n\n        # If have multiple or zero seed matches, but also an irrational, then use that\n        if seed is None and irrational is not None:\n            action = super().action(obs, conf)\n\n        elif expected is not None:\n            action   = (expected + 1) % conf.signs\n            opponent = ( self.history['opponent'] or [None] )[-1]\n            if seed is None: seed = f\"{'many':>12s}\"\n            else:            seed = f\"{seed + (offset or 0)\/1000:12.3f}\"\n            if self.verbose:\n                print(\n                    f\"{obs.step:4d} | {opponent}{self.win_symbol()} > action {expected} -> {action} | \" +\n                    f\"Found RNG Seed: {method:6s} {seed} |\",\n                    self.log_repeating_seeds()\n                )\n\n        else:\n            # Default to parent class to return a secure Irrational sequence\n            action = super().action(obs, conf)\n\n        return int(action) % conf.signs\n\n\n\n    ### Searching\n\n    def search_cache(self, history: List[int]) \\\n            -> Tuple[Optional[int], Optional[int], Optional[int], Optional[str]]:\n        \"\"\"\n        Search though the range of different pre-cached numpy arrays for a seed sequence match\n        \"\"\"\n        expected, seed, offset, method = None, None, None, None\n        for method in self.methods:\n            seed, expected, offset = self.search_cache_method(history, method=method)\n            if expected is not None:\n                break\n        return expected, seed, offset, method\n\n\n    def search_cache_method(self, history: List[int], method='random') \\\n            -> Tuple[Optional[int], Optional[int], Optional[int]]:\n        \"\"\"\n        Perform a vectorized numpy search for the opponent's RNG sequence\n        This allows 8.5 million records to be searched in about 0.2ms\n        Compared to a search rate of about ~10,000\/s using list() comparison in a python loop\n        \"\"\"\n        time_start = time.perf_counter()\n        seed     = None\n        expected = None\n        offset   = None\n        if method in self.cache.keys() and len(history):\n\n            # Keep track of sequences we have already excluded, to improve performance\n            seeds, offset = self.find_candidate_seeds(history, method)\n            sequence      = history[offset:]\n\n            if self.use_stats and len(seeds) >= 2:\n                # the most common early-game case is a hash collision\n                # we can compute stats on the distribution of next numbers\n                # the list of matching seeds will exponentially decrease as history gets longer\n                seed     = None\n                stats    = np.bincount(self.cache[method][seeds,len(sequence)])\n                expected = np.argmax(stats)\n                if np.count_nonzero(stats) == 1:  # all seeds agree\n                    seed = np.min(seeds)\n\n            elif len(seeds):\n                # Pick the first matching seed, and play out the full sequence\n                seed = np.min(seeds)\n                size = len(sequence)\n\n                if self.cache[method].shape[1] > size:\n                    # Lookup the next number from the cache\n                    expected = self.cache[method][seed,size]\n                else:\n                    # Compute the remainder of the Mersenne Twister sequence\n                    expected = self.get_rng_sequence(seed, length=size + 1, method=method)[-1]\n\n            # This is a log of how much statistical advantage we gained\n            if seed is not None:\n                self.repeating_seeds[method][seed + offset\/1000] += 1\n\n        if self.verbose >= 2:\n            time_taken = (time.perf_counter() - time_start) * 1000\n            print(f'{self.__class__.__name__} | search_cache({method}): {time_taken:.3f}ms')\n\n        return seed, expected, offset\n\n\n    def find_candidate_seeds(self, history, method: str) -> Tuple[np.ndarray, int]:\n        \"\"\"\n        Find a list of candidate seeds for a given sequence\n        This makes searching through the cache very fast\n        We can effectively exclude a third of the cache on ever iteration\n\n        This now also implements offset search to find more candidates\n        Despite using a loop here, the search time is somewhat stable around 600ms\n        As we can exclude 1\/3 of the dataset for each offset at each turn\n\n        By implementing offset search we constantly find seeds throughout the match\n        and RandomSeedSearch stops being just an opening book\n        \"\"\"\n\n        seeds_by_offset = {}\n        max_offset = min(self.max_offset, len(history))\n        for offset in range(max_offset):\n            sequence = history[offset:]\n            size     = np.min([len(sequence), self.cache[method].shape[1]])\n            if size < self.min_length: continue  # reduce the noise of matching sequences\n\n            # Have we already searched for this offset and excluded possibilities\n            if offset in self.candidate_seeds[method]:\n                candidates = self.candidate_seeds[method][offset]\n                if len(candidates) == 0:\n                    seeds = candidates  # we found an empty list\n                else:\n                    seeds_idx  = np.where( np.all(\n                        self.cache[method][ candidates, :size ] == sequence[ :size ]\n                    , axis=1))[0]\n                    seeds = candidates[seeds_idx]\n            else:\n                seeds = np.where( np.all(\n                    self.cache[method][ : , :size ] == sequence[ :size ]\n                , axis=1))[0]\n\n            self.candidate_seeds[method][offset] = seeds\n            if len(seeds):\n                seeds_by_offset[offset] = seeds\n\n        # Return the search that returned the shortest list\n        if len(seeds_by_offset) == 0:\n            seeds  = np.array([])\n            offset = 0\n        else:\n            offset = sorted(seeds_by_offset.items(), key=lambda pair: len(pair[1]))[0][0]\n            seeds  = seeds_by_offset[offset]\n        return seeds, offset\n\n\n    def get_rng_sequence(self, seed, length, method='random', use_cache=True) -> List[int]:\n        \"\"\"\n        Generates the first N numbers for a given Mersenne Twister seed sequence\n\n        Results may potentially be cached, though careful attention is paid to\n        save and restore the internal state of random.random() to prevent us\n        from affecting the opponent's RNG sequence,\n        and accidentally stealing numbers from their sequence\n        \"\"\"\n        sequence = []\n        if ( use_cache\n         and method in self.cache.keys()\n         and seed   < self.cache[method].shape[0]\n         and length < self.cache[method].shape[1]\n        ):\n            sequence = self.cache[method][seed][:length]\n        else:\n            # If the results are not in the cache\n            # ensure we save and restore random seed state to avoid affecting opponent's RNG\n            if method == 'random':\n                seed_state = random.getstate()\n                random.seed(seed)\n                sequence = [ random.randint(0,2) for _ in range(length) ]\n                random.setstate(seed_state)\n            elif method == 'np':\n                seed_state = np.random.get_state()\n                np.random.seed(seed)\n                sequence = np.random.randint(0,2, length)\n                np.random.set_state(seed_state)\n            elif method == 'tf':\n                generator = tf.random.Generator.from_seed(seed)\n                sequence = generator.uniform((length,), minval=0, maxval=3, dtype=tf.dtypes.int32).numpy()\n        return list(sequence)\n\n\n\n    ### Precaching\n\n    def precache(self) -> List[str]:\n        # BUGFIX: joblib PicklingError: Could not pickle the task to send it to the workers\n        return [ self.precache_method(method) for method in self.methods ]\n\n    def precache_method(self, method='random') -> str:\n        \"\"\"\n        Compute all the random.random() Mersenne Twister RNG sequences\n        for the first 17 million seeds.\n        Only the first 25 numbers from each sequence are returned,\n        but we rarely find cache hits or hash collisions after the first 15 moves.\n\n        These numbers are configurable via cls.cache_steps and cls.cache_seeds\n\n        This takes about 23 minutes of runtime and generates 425Mb of int8 data\n        This compresses to 94Mb in tar.gz format which is under the 100Mb submission limit\n        \"\"\"\n        filename = f'{method}.npy'\n        shape    = (self.cache_seeds, self.cache_steps)\n        if os.path.exists(filename) and np.load(filename).shape == shape:\n            print(f'cached {filename:10s} =', shape, '=', naturalsize(os.path.getsize(filename)))\n        else:\n            method_cache = np.array([\n                self.get_rng_sequence(seed=seed, length=self.cache_steps, method=method)\n                for seed in range(self.cache_seeds)\n            ], dtype=np.int8)\n            np.save(filename, method_cache)\n            print(f'wrote  {filename:10s} =', method_cache.shape, '=', naturalsize(os.path.getsize(filename)))\n        return filename\n\n\n\n    ### Logging\n\n    def log_repeating_seeds(self) -> dict:\n        \"\"\"\n        Format self.repeating_seeds for logging\n\n        3^4 = 1 in 81   chance, which is the default minimum sequence length\n        3^5 = 1 in 243  chance\n        3^6 = 1 in 729  chance, which in theory should happen once per game\n        3^7 = 1 in 2187 chance, which is a statistical advantage\n        \"\"\"\n        repeating_seeds = {}\n        for method in self.repeating_seeds.keys():\n            repeating_seeds[method] = {\n                key: value\n                for key, value in self.repeating_seeds[method].items()\n                if value >= self.min_length\n            }\n            repeating_seeds[method] = dict(sorted(repeating_seeds[method].items(), key=itemgetter(1), reverse=True))\n            if len(repeating_seeds[method]) == 0:\n                del repeating_seeds[method]\n        return repeating_seeds\n\n\n    def print_cache_size(self):\n        \"\"\" Mostly for debugging purposes, log the contents of the cache \"\"\"\n        if self.verbose:\n            filenames = [ (filename + ' = ' + naturalsize(os.path.getsize(filename)))\n                          for filename in glob.glob('*') ]\n            print('tar.gz =', filenames)\n            print(f'{self.__class__.__name__}::cache.keys()', list(self.cache.keys()))\n            for name, cache in self.cache.items():\n                print(f'{self.__class__.__name__}::cache[{name}] = {cache.shape}' )\n\n\n    ### Cheats\n\n    @staticmethod\n    def set_global_seed(seed=42):\n        \"\"\"\n        This is a cheat to set the opponent's RNG seed\n        It only works when playing on localhost or inside a Kaggle Notebook\n        This is due to both agents playing within the same python process\n        and thus sharing random.random() RNG state\n\n        This doesn't work inside the kaggle leaderboard submission environment\n        as both agents play within different CPU processes.\n\n        This attack also assumes that we do not ourselves invoke the\n        random.random() RNG ourselves at runtime, which is solved by\n        precaching the first 8.5 million seed sequences at compile time\n        \"\"\"\n        random.seed(seed)\n        np.random.seed(seed)\n        tf.random.set_seed(seed)\n\n\n\nrandom_seed_search_instance = RandomSeedSearch()\ndef random_seed_search_agent(obs, conf):\n    return random_seed_search_instance.agent(obs, conf)\n","53f764bd":"%run main.py","b48967da":"# We can save some notebook compile time by reusing the cache generated by the last submission\n!cp -v ..\/input\/random-seed-search-nash-equilibrium-opening-book\/*.npy .\/","a23ea3b6":"%%time\nRandomSeedSearch().precache()","54ee6716":"%%time\n%run main.py","7610c9d6":"%%time\nimport random\n\nrandom.seed(42)\nmethod   = 'random'\nsize     = RandomSeedSearch.cache[method].shape[1]\nhistory  = np.array([ random.randint(0,2) for _ in range(size)  ])\nnp.where( np.all(\n    RandomSeedSearch.cache[method][ : , :size ] == history[ :size ]\n, axis=1))[0]","dc78c5a3":"%%time\n%run main.py","b8d50ddb":"%%writefile test_RandomSeedSearch.py\nimport numpy as np\nimport pytest\nfrom joblib import delayed, Parallel\nfrom kaggle_environments import evaluate\n\nfrom main import IrrationalAgent\nfrom main import IrrationalSearchAgent\nfrom main import random_agent_seeded\nfrom main import RandomSeedSearch\n\n\n@pytest.mark.parametrize(\"name\",   IrrationalSearchAgent.irrationals.keys())\n@pytest.mark.parametrize(\"offset\", [0,1,2])\ndef test_RandomSeedSearch_vs_named_irrational(name, offset):\n    \"\"\" Assert we can find the full irrational sequence every time \"\"\"\n    assert len(RandomSeedSearch.cache)  # check cache filepath can be found\n    episodeSteps = 100\n    results = evaluate(\n        \"rps\",\n        [\n            IrrationalAgent(name=name, offset=offset, verbose=False),\n            RandomSeedSearch(verbose=False)\n        ],\n        configuration={\n            \"episodeSteps\": episodeSteps,\n            \"tieRewardThreshold\":  1,     # Disable draws\n            \"actTimeout\":          1000,  # Prevent TimeoutError\n        },\n        # debug=True  # pull request\n    )\n    results = np.array(results).reshape((-1,2))\n    assert len(results[ results == None ]) == 0   # No errored matches    \n    assert (results[0][0] + episodeSteps\/2.1) < results[0][1]\n\n\ndef test_RandomSeedSearch_vs_seeded_rng():\n    \"\"\" Assert we can find the full irrational sequence every time \"\"\"\n    assert len(RandomSeedSearch.cache)  # check cache filepath can be found\n    episodeSteps = 100\n    results = evaluate(\n        \"rps\",\n        [\n            random_agent_seeded,\n            RandomSeedSearch(verbose=False)\n        ],\n        configuration={\n            \"episodeSteps\": episodeSteps,\n            \"tieRewardThreshold\":  1,     # Disable draws\n            \"actTimeout\":          1000,  # Prevent TimeoutError\n        },\n        # debug=True  # pull request\n    )\n    assert results[0][0] < results[0][1], results\n\n\n\ndef test_RandomSeedSearch_vs_Irrational():\n    \"\"\" Show we don't have a statistical advantage inside the opening book vs irrational \"\"\"\n    episodeSteps = 100\n    results = Parallel(-1)( delayed(evaluate)(\n        \"rps\",\n        [\n            IrrationalAgent(verbose=False),\n            RandomSeedSearch(verbose=False)\n        ],\n        configuration={\n            \"episodeSteps\": episodeSteps,\n            \"tieRewardThreshold\":  1,     # Disable draws\n            \"actTimeout\":          1000,  # Prevent TimeoutError\n        },\n        num_episodes=1\n        # debug=True,  # pull request\n    ) for _ in range(int(1000\/episodeSteps)) )\n    results = np.array(results).reshape((-1,2))\n    assert len(results[ results == None ]) == 0   # No errored matches\n\n    totals  = np.mean(results, axis=0)\n    std     = np.std(results, axis=0).round(2)\n    winrate = [ np.sum(results[:,0] > results[:,1]),\n                np.sum(results[:,0] < results[:,1]) ]\n\n    print('results', results)\n    print('totals',  totals)\n    print('std',     std)\n    print('winrate', winrate)\n\n    assert np.abs(totals[0]) < 0.2 * episodeSteps  # scores are within 20%\n    assert np.abs(totals[1]) < 0.2 * episodeSteps  # scores are within 20%\n    assert np.abs(std[0])    < 0.2 * episodeSteps  # std  within 20%\n    assert np.abs(std[1])    < 0.2 * episodeSteps  # std  within 20%\n\n\n\ndef test_RandomSeedSearch_vs_unseeded_RNG():\n    \"\"\" Show we have a statistical advantage vs RNG \"\"\"\n    episodeSteps = 100\n    results = Parallel(-1)( delayed(evaluate)(\n        \"rps\",\n        [\n            \"rng\/random_agent_unseeded.py\",\n            RandomSeedSearch(verbose=False)\n        ],\n        configuration={\n            \"episodeSteps\": episodeSteps,\n            \"tieRewardThreshold\":  1,     # Disable draws\n            \"actTimeout\":          1000,  # Prevent TimeoutError\n        },\n        num_episodes=1\n        # debug=True,  # pull request\n    ) for _ in range(int(1000\/episodeSteps)) )\n    results = np.array(results).reshape((-1,2))\n    assert len(results[ results == None ]) == 0   # No errored matches\n\n    totals  = np.sum(results, axis=0)\n    std     = np.std(results, axis=0).round(2)\n    winrate = [ np.sum(results[:,0] > results[:,1]),\n                np.sum(results[:,0] < results[:,1]) ]\n\n    print('results', results)\n    print('totals',  totals)\n    print('std',     std)\n    print('winrate', winrate)\n\n    assert winrate[0] <= winrate[1], winrate      # We have a winrate advantage or draw\n    assert totals[0]  <  totals[1],  totals       # We have a statistical advantage\n    # assert np.abs(std[0]) < 0.2 * episodeSteps  # std within 20%\n    # assert np.abs(std[1]) < 0.2 * episodeSteps  # std within 20%\n","fb7a425e":"!pip install --upgrade -q kaggle_environments 2> \/dev\/null","6303de15":"!pytest -v test_RandomSeedSearch.py","e1960198":"from kaggle_environments import make, evaluate\n\nenv = make(\"rps\", configuration={\"episodeSteps\": 10}, debug=True)\nenv.run([ RandomSeedSearch(max_offset=1000), random_agent_seeded,  ])\nenv.render(mode=\"ipython\", width=400, height=400)","d68b8ca3":"from kaggle_environments import make, evaluate\n\nenv = make(\"rps\", configuration={\"episodeSteps\": 20}, debug=True)\nenv.run([ RandomSeedSearch(verbose=2, max_offset=1000), random_agent_unseeded,  ])\nenv.render(mode=\"ipython\", width=400, height=400)","71f0c68b":"from kaggle_environments import make, evaluate\n\nenv = make(\"rps\", configuration={\"episodeSteps\": 20}, debug=True)\nenv.run([ RandomSeedSearch(cheat=True, max_offset=0), random_agent_unseeded,  ])\nenv.render(mode=\"ipython\", width=400, height=400)","b4122511":"from kaggle_environments import make, evaluate\n\nenv = make(\"rps\", configuration={\"episodeSteps\": 30}, debug=True)\nenv.run([ RandomSeedSearch(), IrrationalAgent(name='pi', verbose=False),  ])\nenv.render(mode=\"ipython\", width=400, height=400)","cf9eeff4":"%%time\nimport numpy as np\nfrom joblib import delayed, Parallel\n\nagents  = [ RandomSeedSearch(verbose=False), random_agent_unseeded ]\n\nresults = evaluate(\n    \"rps\",\n    agents,\n    configuration={\n        \"episodeSteps\":        1000,  # Full match\n        \"tieRewardThreshold\":  1,     # Disable draws\n        \"actTimeout\":          1000,  # Prevent TimeoutError\n    },\n    num_episodes=30\n    # debug=True,  # pull request\n)\n\nresults = np.array(results).reshape((-1,2))\nresults[ results == None ] = -1\ntotals  = np.sum(results, axis=0)\nstd     = np.std(results, axis=0).round(2)\n# simulate +-20 draws\nwinrate = [ np.sum(results[:,0]-20 > results[:,1]),\n            np.sum(results[:,0]+20 < results[:,1]) ]\n\n\nprint([ getattr(agent, '__name__', agent.__class__.__name__) for agent in agents ])\nprint('winrate', winrate, '\/', len(results))\nprint('totals ', totals)\nprint('std    ', std)","19e7cd4f":"%%time\n%%bash\nGZIP=-9 tar cfz main.py.tar.gz main.py *.npy\nls -lah  *.tar.gz *.npy *.py\ntar -tvf *.tar.gz","2b5ad584":"In localhost mode, we can also cheat by setting the opponents seed for them. However this doesn't actually work in the submissions environment.","6c2b16af":"# Demonstration\n","d1440f1b":"However a small but consistent statistical advantage can sometimes be enough to convert a loss into a draw and a draw into a win. ","4bb18431":"# Opponents\n\nWe have two classes of opponent that we are attempting to counter.\n\nThe first is a random agent that has explictly set a numeric seed smaller than 17 million. Against this agent, we can a near perfect score, however it may take a few turns to establish a pattern match.\n\nThe second agent is the unseeded random agent. Behind the scenes `random.seed(None)` gets its seed value from `urandom` which means we are unlikely to find the exact seed on our list. What we are left with are hash collisions, which are a byproduct of the Mersenne Twiser algorithm that uses a repeating number (with a Mersenne Prime period) rather than the pure unbreakable randomness of an Irrational number. The logs show that occasionally we will get a sequence of 3-8 numbers in a row that follow one of the seed patterns found in the cache. This usually only happens within the first 15 opening moves of the game, but this gives us a small but significant statistical advantage over the Nash Equlibrium strategy. As they say in Vegas: The House Always Wins! \n- https:\/\/github.com\/python\/cpython\/blob\/master\/Modules\/_randommodule.c","a70b86e4":"# Statistics","823270ca":"Versus an agent with a manually defined seed, we can easily win without the need for offset search.","e0d43bd7":"# Random Seed Search Nash Equilibrium Opening Book\n\n\nRock Paper Scissors is a battle between Order and Chaos. Hail Eris!\n\nThe Nash Equilibrium strategy for Rock Paper Scissors is to play perfectly randomly. On a long enough timeline, this a guaranteed statistical draw. For years it was said this strategy couldn't be beaten. This is only true with a mathematically pure implementation of randomness. However is the more popular method is `random.random(seed)`.\n\nThis uses the Mersenne Twister algorithm which has a period length is chosen to be a Mersenne prime. The randomness generated by the Mersenne Twister acts as a repeating number rather than a true irrational number. Within the randomness is a hidden pattern, incredibly faint but with just enough information structure to be exploitable.\n\nMost of the leaderboard have traded the Nash Equilibrium Draw for high-risk, high-reward Order. Playing on the side of Order results in winning games more quickly but only if your Order is better than their Order, which is how the leaderboard is sorted and it comes with a time limit. Playing on the side of Chaos gives a baseline strategy of an unbeatable statistical draw. All that is required is to exploit the opponents Order and use it against them. Thus is invoked the Third Law of Thermodynamics \"A system's entropy approaches a constant value as its temperature approaches absolute zero.\"\n\nRandom Seed Search has a leaderboard score of 915 which is +230 points above the Nash Equilibrium PI bot and is still slowly trending upwards. \n\nIrrational numbers do however contain one fatal flaw. They are password protected. They have to be beaten before the game starts with it's author explicitly naming them in his source code. So how many irrational numbers are there? An infinite amount. This makes brute force search impossible. However human linguistics only has room for a small number of named irrational numbers. What is your favorite irrational number? Name it! Did you choose PI?\n\nThe price of being irrational is that you are forced to introduce yourself as: Pleased to meet you, won't you guess my name? Strategy is to play a fixed sequence against every opponent. The password attack is performed by playing a counter-irrational agent with the same sequence but all the numbers rotated by +1 % 3. The Anti-Pi bot can equally be countered by the Anti-Anti-PI bot, which does the same again. However my PI bot was forked 5 times (+3 upvotes) whilst the Anti-Anti-PI bots got no forks and less upvotes. Human psychology prefers not to be too irrational when it comes to selecting irrational numbers. This causes selection bias which is exploitable.\n\nThus the choice of irrational number can be used both as an attack and as a secret secure password. \n\nAnti-Pi bot scores [ 824 803 711 668 685 ] vs [ 685 ] for my original Pi bot. There are two effects to be seen here. First is that three of the scores [ 668 662 685 ] are within 23 points of each other. This is the Nash Equilibrium draw point for this game with exactly equal wins and losses. The Mersenne Twister RNG Bot scores [ 761 ] which is in the middle of the Anti-PI bot distribution. The other two Anti-Pi bots scores are [ 824 803 711 ] in a slightly higher range. 5 people forked my notebook (yet only 3 gave upvotes). The Anti-Pi bot is thus a password attack on an irrational agent. The Anti-Anti-PI bot scored [ 711 662 ]. which correlates within 21 of the 685 Pi-Bot Nash Equlibrium centerpoint.  Nobody forked the Anti-Pi or Anti-Anti-Pi bots.\n\nPI can be transformed into base 3 by `list(map( lambda c: int(c) % 3, re.sub( '[^1-9]', '', str(math.pi) )))`. but in practice requires `import mpmath; mpmath.1234; mpmath.p()` to generate a string long enough to satisfy a thousand move game.\n\nThe Random Seed Search algorithm takes the default RNG `random.random(seed)`, \nand generates RNG sequences (length 20) for as many seeds as can fit in the \n100Mb submission filesize limit. This happens to be 20 million seeds. \nNumpy.size = `(20,000,000, 20) x int8` = 425.0 MB = 94Mb tar.gz. \nCompression offers a ~4.5x space saving, \nmostly due to the first 6 bits in every int8 being zero for trinary numbers. \n\nPre-caching costs 27 minutes of compile time. \nBy careful use of excluding previously rejected seeds, \nwe can search this array very quickly and even implement \noffset search for the opponents history without the 1s timelimit. \nEach turn we can reduce the remaining search space by a factor of 3. \nThis is compared to the previous implemention which could \nonly search about ~10,000 seeds per turn using a python loop.\n\nIf a seed is found, the next number in the sequence can be predicted \nwithout violating apparent randomness. \nThis effectively acts as an opening book against Mersenne Twister RNG agents. \nWhat is observed in practice is the Random Seed Search is only occasionally able to \nfind a small sequences numbers, often during the other agent's random warmup period. \nI have not yet seen a +500 score against an unseeded random agent. \nI suspect these partial matching sequences represent hash collisions \nof repeating sequences within the Mersenne Twister number. \n\nAs the history gets longer, hash collisions become exponentially rarer. \nThis is the game-winning difference between using a repeating number and irrational number \nfor your source of randomness. \nThe effect is quite small, but the 50% standard deviation for a random draw \nis in this game is only 20. A statistical 2-3 point advantage shifts \nthe probability distribution of endgame score, a -21 score gets converted into a draw \nand a +19 score gets converted into a win. \n\nThis is equivalent to the statistical effect that causes \nBlack Holes to slowly lose mass via Hawking Radiation.\n\nThe leaderboard rewards winning points quickly, but the only way to become champion is to never statistically lose. Order can be indeed be beaten at its own game.\n\n(Hopefully) Achievement Unlocked: Beat the unbeatable Nash Equilibrium RNG bot!\n\nTODO: verify the statistics and make sure this actually works in practice. However this is still a really cool idea and implemention.","28cf0610":"# Irrational Agent\n\nFor a more extended discussion of the grandparent class, see the [IrrationalAgent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-irrational-agent) notebook","5e0c4c54":"# Precache RNG Sequences\n\nCompute all the random.random() Mersenne Twister RNG sequences for the first 20 million seeds.\n\nOnly the first 20 numbers from each sequence are returned, but we rarely find cache hits or hash collisions after the first 15 moves. A sequence of 20 trinary numbers has a 1 in 3.5 billion probability of occuring randomly.\n\nThis takes about 23 minutes of runtime and generates 425Mb of int8 data. This compresses to 94Mb in tar.gz format which is under the 100Mb submission limit.\n\nAt runtime it takes upto 850ms (on localhost) and 1.2s (inside a Kaggle notebook) to search through this entire list as a numpy vectorized operation. This is close or even over to the maximum 1s\/turn runtime limit imposed by the competition. \n\nHowever this search time can be reduced massively by keeping track of previously excluded seed indexes. This enables us to do offset searching, searching for hash collisions at all possible sequence lengths. Search time for this loop remains stable around 600ms as the number of remaining candidate seeds for each offset is reduced by a factor of 3 after each search.","c34434a2":"We can also beat anybody who plays an irrational sequence","f82e3861":"# Further Reading\n\nIf you liked this notebook, please upvote!\n\nThis work was inspired by my previous attempt to apply this approach to the MINST dataset, for which I was able to achieve [11% accuracy](https:\/\/www.kaggle.com\/jamesmcguigan\/minst-random-seed-search) on a 1 in 10 choice! \n\nThis notebook is part of a series exploring Rock Paper Scissors:\n\nIrrational\n- [PI Bot](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-pi-bot)\n- [Anti-PI Bot](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-pi-bot)\n- [Anti-Anti-PI Bot](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-anti-pi-bot)\n- [Irrational Agent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-irrational-agent)\n- [Irrational Search Agent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-irrational-search-agent)\n- [Random Seed Search Nash Equlibrium Opening Book](https:\/\/www.kaggle.com\/jamesmcguigan\/random-seed-search-nash-equlibrium-opening-book)\n\nRNG\n- [Random Agent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-random-agent)\n- [RNG Statistics](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-rng-statistics)\n\nSequence\n- [De Bruijn Sequence](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-de-bruijn-sequence)\n\nOpponent Response\n- [Anti-Rotn](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-rotn)\n- [Sequential Strategies](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-sequential-strategies)\n\nStatistical \n- [Weighted Random Agent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-weighted-random-agent)\n- [Anti-Rotn Weighted Random](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-anti-rotn-weighted-random)\n- [Statistical Prediction](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-statistical-prediction)\n\nMemory Patterns\n- [Naive Bayes](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-naive-bayes)\n- [Memory Patterns](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-memory-patterns)\n\nDecision Tree\n- [XGBoost](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-xgboost)\n- [Multi Stage Decision Tree](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-multi-stage-decision-tree)\n- [Decision Tree Ensemble](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-decision-tree-ensemble)\n\nNeural Networks\n- [LSTM](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-lstm)\n\nEnsemble\n- [Multi Armed Stats Bandit](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-multi-armed-stats-bandit)\n\nRoShamBo Competition Winners\n- [Iocaine Powder](https:\/\/www.kaggle.com\/jamesmcguigan\/rps-roshambo-comp-iocaine-powder)\n- [Greenberg](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-greenberg)","cea4562f":"# Random Seed Search\n\nThis is the class you have been looking for","d9647a44":"# Unit Tests\n\nMake sure everything works as expected","700a894b":"# Submission\n\nMulti-file submissions where introduced during Hailte \n\n> Today we released support for multi-file agents. To upload an agent with multiple files, submit your work as a .tar.gz archive (the name must end in .tar.gz) with a python file at the top level called main.py that conforms to the normal agent submission requirements. The maximum upload size of 100MB applies to the full archive. For the initial release of this feature we only compile the main.py file so to import other python files you'll either have to compile\/exec or importlib the relevant files. We're hoping to improve this in a future release and will update this topic as appropriate. - Sam Harris\n- https:\/\/www.kaggle.com\/c\/halite\/discussion\/177686\n\n\n`tar.gzip` gives about 4.25 - 4.8x compression, which is due to the first 6 bits in every numpy int8 being 0 when encoding trinary","60f66c2b":"# Irrational Search Agent\n\nFor a more extended discussion of the parent class, see the [IrrationalSearchAgent](https:\/\/www.kaggle.com\/jamesmcguigan\/rock-paper-scissors-irrational-search-agent) notebook","a677715c":"Versus an unseeded agent, we hopefully get a small statistical advantage from hash collisions.\n\nTimings for offset search over the entire history remain stable around ~750ms"}}