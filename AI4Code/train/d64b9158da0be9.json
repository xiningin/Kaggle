{"cell_type":{"a21fc41b":"code","f950d3c6":"code","f62d83cf":"code","330af66c":"code","f90c61b5":"code","2bb17c4b":"code","bcb921cc":"code","de498f06":"code","7a680516":"code","df542654":"code","e4ad79e7":"code","6d5d6186":"code","afd96ce2":"code","eabbc228":"code","67ef3647":"code","418a28c4":"code","2a37fa05":"code","2be2769d":"code","861016c1":"code","bb4809e6":"code","141bbc6c":"code","229c279c":"code","93f955ee":"code","8f90a8e1":"code","688ae28c":"code","85e896fa":"code","5563048a":"code","5e8aebd7":"code","01a184f7":"code","147ba381":"code","a8900608":"code","6bff8c09":"code","2cb6fef0":"code","703f32fc":"code","896eca43":"code","50b9ce4c":"code","cdd5dc12":"code","540e09e8":"code","ec070cf5":"code","816f6eb4":"code","42f4d4a4":"code","6bce86a7":"code","e9a8c73d":"code","9a4144c4":"code","32b9ce1e":"code","21e334dd":"code","0f208716":"code","14103d21":"code","92e80582":"code","e9011013":"code","50b09c80":"code","9a230a76":"code","ee6d9694":"code","fcd5becb":"code","63161b34":"code","076280b0":"code","dde2e6d1":"code","b67deab9":"code","926cb13f":"code","fcd49523":"code","3c2a4104":"code","ac8f2b01":"code","52b36687":"code","47531c18":"code","d732e41a":"code","9848ed06":"markdown","60c325d5":"markdown","3262944b":"markdown","9d0e2b45":"markdown","a49b885e":"markdown","eb68eb3c":"markdown","b4477af6":"markdown","88665dc3":"markdown","f5d05fb4":"markdown","42739d1f":"markdown","08a829c3":"markdown","b0af0a78":"markdown","0a878840":"markdown","91ad41c2":"markdown","9d96cee2":"markdown","fbd08b09":"markdown","ee3610b1":"markdown","93d40e6f":"markdown","0092d7df":"markdown","3e590a71":"markdown","5b632d85":"markdown","230de4e0":"markdown","d695640a":"markdown","4c8cd981":"markdown","841af932":"markdown","c400d466":"markdown","8536b26f":"markdown","8ee75795":"markdown","1f089315":"markdown","6949e0d5":"markdown","303c3d43":"markdown","881a578d":"markdown","c32fff75":"markdown","03be418f":"markdown","ff7c7e4e":"markdown","b04b8bb4":"markdown","4f63a134":"markdown","ae73c1f6":"markdown","4a44839e":"markdown","d2e45de2":"markdown","9ce6c283":"markdown","cdd36c08":"markdown","7668bc13":"markdown","b33122bf":"markdown","29d0bef8":"markdown","78317040":"markdown","ecbf61a7":"markdown","03a143d2":"markdown","11f95942":"markdown","da165639":"markdown","cd3c90ab":"markdown","ed50a35e":"markdown","8066855e":"markdown","50f64c68":"markdown","1c2708ef":"markdown","c18bac98":"markdown","cb566a49":"markdown","9e21cb99":"markdown","e8f67a47":"markdown","ad628b9a":"markdown","79e2daa1":"markdown","7324e272":"markdown","7d2e0aa8":"markdown","a2514050":"markdown","09d49584":"markdown"},"source":{"a21fc41b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os","f950d3c6":"from sklearn.preprocessing import OneHotEncoder, LabelBinarizer \nfrom sklearn.impute import KNNImputer                                     # imputation of missing data\nfrom imblearn.over_sampling import SMOTE                                  # upsampling\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import f1_score","f62d83cf":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","330af66c":"train = pd.read_csv('\/kaggle\/input\/pet-adoption\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/pet-adoption\/test.csv')\nprint(train.shape,test.shape)","f90c61b5":"train.head()","2bb17c4b":"test.head()","bcb921cc":"train.dtypes","de498f06":"test.dtypes","7a680516":"train['issue_date'] = train['issue_date'].astype('datetime64')\ntrain['listing_date'] = train['listing_date'].astype('datetime64')\ntest['issue_date'] = test['issue_date'].astype('datetime64')\ntest['listing_date'] = test['listing_date'].astype('datetime64')","df542654":"train.describe(include='all')","e4ad79e7":"test.describe(include='all')","6d5d6186":"train['length(m)']*=100\ntest['length(m)']*=100\ntrain.rename(columns={'length(m)':'length(cm)'}, inplace=True)\ntest.rename(columns={'length(m)':'length(cm)'}, inplace=True)","afd96ce2":"(train['length(cm)']==0).sum()","eabbc228":"(test['length(cm)']==0).sum()","67ef3647":"train.loc[train['length(cm)']==0,'length(cm)'] = np.nan\ntest.loc[test['length(cm)']==0,'length(cm)'] = np.nan","418a28c4":"train['ratio l\/h'] = train['length(cm)']\/train['height(cm)']\ntest['ratio l\/h'] = test['length(cm)']\/test['height(cm)']","2a37fa05":"train['difference'] = (train['listing_date'] - train['issue_date']).dt.days\ntest['difference'] = (test['listing_date'] - test['issue_date']).dt.days","2be2769d":"train['issue_month'] = train['issue_date'].dt.month\ntest['issue_month'] = test['issue_date'].dt.month","861016c1":"train['listing_month'] = train['listing_date'].dt.month\ntest['listing_month'] = test['listing_date'].dt.month","bb4809e6":"train.drop(columns=['listing_date', 'issue_date'], inplace=True)\ntest.drop(columns=['listing_date', 'issue_date'], inplace=True)","141bbc6c":"sns.set(style=\"white\")\ncorr = train.drop(columns=['pet_id']).corr()\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\nf, ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(corr, mask=mask, cmap='seismic_r', vmax=.5, center=0, annot=True,\n            square=True, linewidths=.9, cbar_kws={\"shrink\": .5}, fmt='.2f')\nplt.show()","229c279c":"sns.set(style=\"white\")\ncorr = test.corr()\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\nf, ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(corr, mask=mask, cmap='Spectral', vmax=.3, center=0, annot=True,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, fmt='.2f')\nplt.show()","93f955ee":"plt.figure(figsize=(10,2))\nsns.boxplot(train['difference'], palette='winter')\nplt.title('Train Difference')\nplt.xlabel(\"Days\")\nplt.show()","8f90a8e1":"plt.figure(figsize=(10,2))\nsns.boxplot(test['difference'], palette='afmhot')\nplt.title('Train Difference')\nplt.xlabel(\"Days\")\nplt.show()","688ae28c":"sns.countplot(x=train['condition'], hue=train['breed_category'], palette='Set1', saturation=0.89)\nplt.legend(title='Breed Category', bbox_to_anchor=(1.35, 0.5), loc='right', ncol=1)\nplt.xlabel(\"Condition\")\nplt.ylabel(\"Count\")\nplt.title(\"Value counts for Condition and Breed Category\", fontsize=15, pad=20)\nplt.show()","85e896fa":"sns.countplot(x=train['condition'], hue=train['pet_category'], log=True, palette='magma', saturation=1)\nplt.legend(title='Pet Category', bbox_to_anchor=(1.3, 0.5), loc='right', ncol=1)\nplt.xlabel(\"Condition\")\nplt.ylabel(\"Count\")\nplt.title(\"Value counts for Condition and Pet Category\", fontsize=15, pad=20)\nplt.show()","5563048a":"nan_cols_train = train.isna().sum()\nnan_cols_test = test.isna().sum()\n\nprint(nan_cols_train[nan_cols_train>0],'\\n')\nprint(nan_cols_test[nan_cols_test>0])","5e8aebd7":"plt.figure(figsize=(10,5))\nsns.countplot(x=train['condition'].isna(), hue=train['X1'], log=True, palette='Set1', saturation=1)\nplt.xlabel(\"Is NaN ?\")\nplt.ylabel(\"Count\")\nplt.title(\"Train Condition (Is NaN?) and X1\", fontsize=15, pad=20)\nplt.legend(title='X1', bbox_to_anchor=(1.12, 0.5), loc='right', ncol=1, title_fontsize=14)\nplt.show()","01a184f7":"plt.figure(figsize=(10,5))\nsns.countplot(x=test['condition'].isna(), hue=test['X1'], log=True, palette='Set1', saturation=1)\nplt.xlabel(\"Is NaN ?\")\nplt.ylabel(\"Count\")\nplt.title(\"Test Set: Condition (Is NaN?) and X1\", fontsize=15, pad=20)\nplt.legend(title='X1', bbox_to_anchor=(1.12, 0.5), loc='right', ncol=1, title_fontsize=14)\nplt.show()","147ba381":"fig, ax = plt.subplots(1, 2, figsize=(11,5))\nsns.countplot(x=train['condition'].isna(), hue=train['X2'], log=True, palette='gist_ncar', saturation=0.9, ax=ax[0])\nax[0].set_xlabel(\"Is NaN ?\")\nax[0].set_ylabel(\"Count\")\nax[0].set_title(\"Train Set: Condition (Is NaN?) and X2\", fontsize=15, pad=20)\nax[0].get_legend().remove()\n\nsns.countplot(x=test['condition'].isna(), hue=test['X2'], log=True, palette='gist_ncar', saturation=0.9, ax=ax[1])\nax[1].set_xlabel(\"Is NaN ?\")\nax[1].set_ylabel(\"Count\")\nax[1].set_title(\"Test Set: Condition (Is NaN?) and X2\", fontsize=15, pad=20)\nax[1].get_legend().remove()\n\nlines, labels = fig.axes[-1].get_legend_handles_labels()\nfig.legend(lines, labels, loc = 'right', title='X2', title_fontsize=14)\nfig.show()","a8900608":"plt.figure(figsize=(4,4))\nsns.countplot(x=train['condition'].isna(), hue=train['breed_category'], palette='CMRmap')\nplt.xlabel(\"Is NaN ?\")\nplt.ylabel(\"Count\")\nplt.title(\"Condition (Is NaN?) and Breed Category\", fontsize=15, pad=20)\nplt.legend(title='Breed Category', bbox_to_anchor=(1.55, 0.5), loc='right', ncol=1, title_fontsize=13)\nplt.show()","6bff8c09":"plt.figure(figsize=(4,4))\nsns.countplot(x=train['condition'].isna(), hue=train['pet_category'], palette=\"plasma\", saturation=1)\nplt.xlabel(\"Is NaN ?\")\nplt.ylabel(\"Count\")\nplt.title(\"Condition (Is NaN?) and Breed Category\", fontsize=15, pad=20)\nplt.legend(title='Breed Category', bbox_to_anchor=(1.55, 0.5), loc='right', ncol=1, title_fontsize=13)\nplt.show()","2cb6fef0":"clr_tr = set(train['color_type'].values)\nclr_te = set(test['color_type'].values)\nclr_tr-clr_te","703f32fc":"train.drop(train[(train['color_type'] == 'Black Tiger') | (train['color_type'] == 'Brown Tiger')].index , inplace=True, axis=0)\ntrain.reset_index(drop=True, inplace=True)","896eca43":"cols = ['color_type','X1', 'X2', 'issue_month', 'listing_month']\n\nohe = OneHotEncoder(sparse=False, dtype='int8')\ntr = pd.DataFrame(ohe.fit_transform(train[cols]), columns=ohe.get_feature_names(cols))\nte = pd.DataFrame(ohe.transform(test[cols]), columns=ohe.get_feature_names(cols))","50b9ce4c":"cols.extend(['pet_id'])\nX_test = pd.concat([test.drop(columns=cols), te], axis=1)\n\ncols.extend(['breed_category', 'pet_category'])\nX = pd.concat([train.drop(columns=cols), tr], axis=1)","cdd5dc12":"y1 = train['breed_category'].astype('int')\ny2 = train['pet_category']","540e09e8":"X['imputed_condition'] = train['condition'].isna()\nX_test['imputed_condition'] = test['condition'].isna()","ec070cf5":"X['imputed_length'] = train['length(cm)'].isna()\nX_test['imputed_length'] = test['length(cm)'].isna()","816f6eb4":"knni = KNNImputer(n_neighbors=4, weights='distance')\nX = pd.DataFrame(knni.fit_transform(X), columns=X.columns)\nX_test = pd.DataFrame(knni.transform(X_test), columns=X.columns)","42f4d4a4":"X['id_1'] = train['pet_id'].apply(lambda x: int(x[5]))\nX_test['id_1'] = test['pet_id'].apply(lambda x: int(x[5]))","6bce86a7":"X['id_2'] = train['pet_id'].apply(lambda x: int(x[6]))\nX_test['id_2'] = test['pet_id'].apply(lambda x: int(x[6]))","e9a8c73d":"X['id_3'] = train['pet_id'].apply(lambda x: int(x[7]))\nX_test['id_3'] = test['pet_id'].apply(lambda x: int(x[7]))","9a4144c4":"X['id_4'] = train['pet_id'].apply(lambda x: int(x[8]))\nX_test['id_4'] = test['pet_id'].apply(lambda x: int(x[8]))","32b9ce1e":"X['id_12'] = train['pet_id'].apply(lambda x: int(x[5:7]))\nX_test['id_12'] = test['pet_id'].apply(lambda x: int(x[5:7]))","21e334dd":"X['id_23'] = train['pet_id'].apply(lambda x: int(x[6:8]))\nX_test['id_23'] = test['pet_id'].apply(lambda x: int(x[6:8]))","0f208716":"X.head()","14103d21":"X_test.head()","92e80582":"y1.value_counts()","e9011013":"y2.value_counts()","50b09c80":"over_y1 = SMOTE(sampling_strategy='minority', random_state=42118231, k_neighbors=4)\nX1_over, y1_over = over_y1.fit_sample(X, y1)","9a230a76":"cb1 = CatBoostClassifier(boosting_type='Ordered', random_state=42)\ncb1.fit(X1_over, y1_over, verbose=100)","ee6d9694":"{x:y for x,y in zip(cb1.feature_names_,cb1.feature_importances_)}","fcd5becb":"pred_y1 = cb1.predict(X_test)","63161b34":"y1_f1 = f1_score(y1, cb1.predict(X), average=\"weighted\")\nprint(\"F1 - y1:\", y1_f1)","076280b0":"lbbc = LabelBinarizer()\nX = pd.concat([X, pd.DataFrame(lbbc.fit_transform(y1)).add_prefix('breed_')], axis=1)\nX_test = pd.concat([X_test, pd.DataFrame(lbbc.transform(pred_y1)).add_prefix('breed_')], axis=1)","dde2e6d1":"over_y2 = SMOTE(sampling_strategy='not majority', random_state=42118231, k_neighbors=4)\nX2_over, y2_over = over_y2.fit_sample(X, y2)","b67deab9":"cb2 = CatBoostClassifier(boosting_type='Ordered', random_state=42)\ncb2.fit(X2_over, y2_over, verbose=100)","926cb13f":"{x:y for x,y in zip(cb2.feature_names_,cb2.feature_importances_)}","fcd49523":"pred_y2 = cb2.predict(X_test)","3c2a4104":"y2_f1 = f1_score(y2,cb2.predict(X), average=\"weighted\")\nprint(\"F1 - y2:\", y2_f1)","ac8f2b01":"print(\"Score: \", (y1_f1+y2_f1)*50)","52b36687":"predicted = pd.DataFrame(data={'pet_id' : test['pet_id'].values,\n                               'breed_category' : pred_y1.reshape(-1),\n                               'pet_category' : pred_y2.reshape(-1)})\npredicted.shape","47531c18":"predicted.head()","d732e41a":"predicted.to_csv('submit.csv', index=False)","9848ed06":"Score used during competition","60c325d5":"One Hot Encoding of columns with categorical values","3262944b":"Setting rows with length 0 to NaN in both data set which will be imputed later","9d0e2b45":"Creating dataframe of predicted values","a49b885e":"In train set color_type has 56 unique values but in test set there are 54 unique values","eb68eb3c":"### Problem statement\n\nHaving a pet is one of life\u2019s most fulfilling experiences. Your pets spoil you with their love, compassion and loyalty. And dare anyone lay a finger on you in your pet\u2019s presence, they are in for a lot of trouble. Thanks to social media, videos of clumsy and fussy (yet adorable) pets from across the globe entertain you all day long. Their love is pure and infinite. So, in return, all pets deserve a warm and loving family, indeed. And occasional boops, of course.\n\nNumerous organizations across the world provide shelter to all homeless animals until they are adopted into a new home. However, finding a loving family for them can be a daunting task at times.  This International Homeless Animals Day, we present a Machine Learning challenge to you: Adopt a buddy.\n\nThe brighter side of the pandemic is an increase in animal adoption and fostering. To ensure that their customers stay indoors, a leading pet adoption agency plans on creating a virtual-tour experience, showcasing all animals available in their shelter. To enable that, you have been tasked to build a Machine Learning model that determines type and breed of the animal based on its physical attributes and other factors.","b4477af6":"* *New feature difference*\n\nContains difference as number of days between listing_date and issue_date","88665dc3":"Count plot for value counts of condition and pet category","f5d05fb4":"Finding which two values in column color_type are extra in train set","42739d1f":"* *New feature id_4*\n\nContains fourth digit from pet_id column","08a829c3":"Number of rows which have 0 length in train data","b0af0a78":"Predicting y2 i.e. pet category","0a878840":"Box plots for difference column","91ad41c2":"Concatenating one hot encoded columns to train and test set after droping unwanted columns\n\nNew dataframe X will be used as training set and X_test for prediction","9d96cee2":"* *New feature id_12*\n\nContains first and second digit from pet_id column","fbd08b09":"Importing and reading dataset","ee3610b1":"Check if NaN values in condition column of train and test set is related to X2","93d40e6f":"Change datatype of issue_date and listing_date columns to datetime64","0092d7df":"Here we find that columns with breed category 2 have value in condition column as NaN","3e590a71":"* *New feature issue_month*\n\nContains month on which the pet was issued to the shelter","5b632d85":"Feature importances of catboost model used for predicting y2 i.e. pet category","230de4e0":"![](https:\/\/storage.googleapis.com\/kagglesdsdata\/datasets%2F823854%2F1438175%2FCapture.PNG?GoogleAccessId=databundle-worker-v2@kaggle-161607.iam.gserviceaccount.com&Expires=1598395734&Signature=os6hNLJVgB65Onyl56UB3tVB1%2BXjVBU0brZ0xwUVKCxRPcoFj2Dj2pw2LnDHs%2BY3mSkuML00apvFgH%2FVkXmb38wr3HktKLEtF4izRN8vlMd6%2BeqONvo529br75CiUBFwt84cmsf%2BcIr1A5ztJUls1N0ZEJjT27q2%2FLyveP%2FlLxMWQGeUDCiQuBfl%2FalQdhrrfW3eSvA1tX8ymu0Qxu%2FS3Hdi6mDWloYos5DnSgpVW1w6NJUaKVz%2BbrMoTCxd0ozEHsopRQGZWwqDg1Dm4fFRdj3r33X1DikdmEeaIXsjfyFgJVhjZzVnAI%2FPDPzMqqZo3Gwyu7QyzyyBL%2F1HsPldyw%3D%3D)","d695640a":"Check if NaN values in condition column of train set is related to X1","4c8cd981":"## Problem Understanding","841af932":"Creating CatBoostClassifier model and training","c400d466":"Test set correlation","8536b26f":"* *New feature id_1*\n\nContains first digit from pet_id column","8ee75795":"F1 score of train data i.e. (X, y2) which was before oversampling","1f089315":"Check if NaN values in condition column of test set is related to X1","6949e0d5":"Feature importances of catboost model used for predicting y1 i.e. breed category","303c3d43":"Check if columns contain NaN values and if they exist then count number of NaN values in each column","881a578d":"* *New feature imputed_condition*\n\nContains True if value in condition column was missing else False","c32fff75":"Number of rows which have 0 length in test data","03be418f":"* *New feature id_3*\n\nContains third digit from pet_id column","ff7c7e4e":"Count plot for value counts of condition and breed category","b04b8bb4":"Check if NaN values in condition column of train set is related to breed category","4f63a134":"* *New feature id_23*\n\nContains second and third digit from pet_id column","ae73c1f6":"* *New feature id_2*\n\nContains second digit from pet_id column","4a44839e":"Variables y1 and y2 will be used by separate classifiers during fitting\n\ny1 contains breed_category and y2 contains pet_category ","d2e45de2":"In above plot we can see that in train set where condition is 0.0 breed category is 1.0 and where condition is 1.0 there breed category is 0.0","9ce6c283":"### Dataset\n\nThe dataset consists of parameters such as: a unique ID assigned to each animal that is up for adoption, date on which they arrived at the shelter, their physical attributes such as color, length and height, among other factors.","cdd36c08":"Oversampling of data using SMOTE (Synthetic Minority Over-sampling TEchnique)\n\nStrategy is set to 'not majority' as we need oversampling of all classes expect the one with majority","7668bc13":"Oversampling of data using SMOTE (Synthetic Minority Over-sampling TEchnique)\n\nStrategy is set to 'minority' as we need oversampling of one class only","b33122bf":"## Modelling and Evaluation ","29d0bef8":"* *New feature ratio l\/h*\n\nContains ratio of length and height","78317040":"From descriptive statistics we can see that some rows have 0 value in length column in both train and test data","ecbf61a7":"Predicting y1 i.e. breed category","03a143d2":"From value counts of y1 and y2 we can see that data set is imbalanced therefore to balance the data we will use oversampling techniques","11f95942":"Dropping unnecessary columns ","da165639":"# HackerEarth Machine Learning challenge: Adopt a buddy\n## Jul 30, 2020, 10:30 PM IST - Aug 23, 2020, 10:30 PM IST","cd3c90ab":"Train set correlation","ed50a35e":"Importing necessary libraries and functions","8066855e":"Creating CatBoostClassifier model and training","50f64c68":"Convert length column to cm ","1c2708ef":"F1 score of train data i.e. (X, y1) which was before oversampling","c18bac98":"![](http:\/\/media-fastly.hackerearth.com\/media\/hackathon\/hackerearth-machine-learning-challenge-pet-adoption\/images\/b9411a7ed2-PetAdoption_CoverImage.jpg)","cb566a49":"Appending breed category to train and test data after one hot encoding","9e21cb99":"Dropping rows where color_type is 'Black Tiger' or 'Brown Tiger'","e8f67a47":"Using KNN Imputer from sklearn for imputation of missing data","ad628b9a":"* *New feature listing_month*\n\nContains month when the pet arrived at the shelter","79e2daa1":"## Exploratory Data Analysis (EDA)","7324e272":"Check if NaN values in condition column of train set is related to pet category","7d2e0aa8":"* *New feature imputed_length* \n\nContains True if value in length(cm) column was missing else False","a2514050":"## Importing","09d49584":"In both data set issue_date and listing_date is of type object which must be changed to datetime64"}}