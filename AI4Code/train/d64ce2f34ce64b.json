{"cell_type":{"8b1c6a20":"code","8c83bccb":"code","3c309c56":"code","0cca50e3":"code","dbd5b8fe":"code","90071703":"code","d64f18b0":"code","a78ff35d":"code","4c4a5da5":"code","159e0241":"code","1c3b37ac":"code","c9e9d916":"code","d5083d81":"code","a5388302":"code","b2688f37":"code","722038ea":"code","b4e8cd6e":"code","1bacb747":"code","4d5dcc57":"code","e18da75a":"code","537728c3":"code","26b035ae":"code","67a11e11":"code","e310e5da":"code","b788aab6":"code","5b7405f2":"code","33ad56de":"code","e255459a":"code","bdb4df90":"markdown","eda4ec28":"markdown","8961043d":"markdown","62224433":"markdown","62386707":"markdown","9e39c70e":"markdown","282f11a1":"markdown","909a0fab":"markdown","6f95683c":"markdown","0e1f7962":"markdown","4bd43dcb":"markdown","2f814bce":"markdown","28e26e73":"markdown","0e3ca8ca":"markdown","5a57f85f":"markdown","c4782d9e":"markdown","4d62d834":"markdown","23a44379":"markdown","a7bda894":"markdown","c66e325e":"markdown","38f8e6c6":"markdown","f7ead8fa":"markdown","0bc3bca8":"markdown","2f5803a6":"markdown","17928292":"markdown"},"source":{"8b1c6a20":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8c83bccb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport gc","3c309c56":"df= pd.read_csv('\/kaggle\/input\/2021ai511ml-regression-group-5\/train_data.csv')\ndf","0cca50e3":"main_df= pd.read_csv('\/kaggle\/input\/2021ai511ml-regression-group-5\/test_data.csv')\nmain_df","dbd5b8fe":"df.drop(axis=\"columns\", labels=\"Unnamed: 0\", inplace=True)","90071703":"main_df.drop(axis=\"columns\", labels=\"Unnamed: 0\", inplace=True)","d64f18b0":"df.isna().sum()","a78ff35d":"main_df.isna().sum()","4c4a5da5":"df.duplicated().sum()","159e0241":"main_df.duplicated().sum()","1c3b37ac":"main_df","c9e9d916":"df","d5083d81":"# #normalising\n# col=df.columns\n# for i in col[:2]:\n#     #mean\n#     mean = df[i].mean() \n#     #standard deviation\n#     st = df[i].std() \n#     df[i] = (df[i]-mean)\/st\n# df.head()","a5388302":"# #normalising\n# col=main_df.columns\n# for i in col[:2]:\n#     #mean\n#     mean = main_df[i].mean() \n#     #standard deviation\n#     st = main_df[i].std() \n#     main_df[i] = (main_df[i]-mean)\/st\n# main_df.head()","b2688f37":"df = df.to_numpy()\ndf.shape","722038ea":"main_df = main_df.to_numpy()\nmain_df.shape","b4e8cd6e":"#null matrix of all zeros\nX = np.zeros(shape = (1000,3)) \n\nX[:, :2] = df[:, :2] #taking x-inv and y-inv\n\n#bias\nX[:, 2:3] = 1\n\n#weight matrix initialisation\nW = np.random.rand(3,1)\n\n#taking the force for results\nY = df[:, 2:3]\nn_points, n_col = df.shape","1bacb747":"#null matrix of all zeros\nX1 = np.zeros(shape = (10000,3)) \nX1[:, :2] = main_df[:, :2] #taking both x-inv and y-inv\n#bias\nX1[:, 2:3] = 1\n\nn_points1, n_col1 = main_df.shape","4d5dcc57":"n = n_points\nX_train = X[:n, :]\nY_train = df[:n, 2]","e18da75a":"n1 = n_points1\nX_test= X1[:n1, :]","537728c3":"X_train.shape","26b035ae":"X_test.shape","67a11e11":"Y_train.shape","e310e5da":"W = np.linalg.inv(X_train.T@X_train) @ (X_train.T@Y_train)","b788aab6":"Y_pred = X_test @ W\n\nplt.scatter(X_train[:, 0], Y_train)\nplt.plot(X_test[:,0], Y_pred, color=\"red\")\nplt.title(\"Hackathon-Regression\")\nplt.xlabel(\"X-inv and Y-inv\")\nplt.ylabel(\"Pred:Force\")\nplt.show()","5b7405f2":"y = list(range(10000))\nY_final = np.zeros(shape = (10000, 2))\nY_final[:, 0] = y\nY_final[:, 1] = Y_pred\nY_final[:, 0] = Y_final[:, 0].astype('int64')","33ad56de":"dtypes = {'Id':'int','Predicted':'float'}\ndata = pd.DataFrame(Y_final, columns = ['Id','Predicted'])\nfor c in data.columns:\n    data[c] = data[c].astype(dtypes[c])\ndata.head()","e255459a":"data.to_csv(\"Regression_Output.csv\", index=False)","bdb4df90":"***Reading the testing data csv file and displaying them***","eda4ec28":"# Learning Algorithm","8961043d":"*Checking if any duplicate row exists or not*","62224433":"*NO duplicate row existed*","62386707":"*Deleting the Unnamed: 0 column as it makes no sense to the data*","9e39c70e":"The numpy.zeros() function returns a new array of given shape here it is 1000 rows and 2 columns, with zeros.","282f11a1":"*For training data*","909a0fab":"**Step 2: Check for missing values**","6f95683c":"***Reading the training data csv file and displaying them***","0e1f7962":"# **Dealing with missing values**\n* Drop the rows with null values. This can be done if you have plenty of good data available and the loss of a few rows doesn't impact the training much.\n* Drop the columns with null values. This should be done if there is a lot of data missing from a particular column and no suitable default value can be inferred for the missing values.\n* Replace the null values with the mean, median, mode or a default value. This should be done if there is not much data missing in a column, the column is important for training, OR if a sensible default value exists.\n\n**Step 1: Delete the problamatic column**","4bd43dcb":"# Prediction","2f814bce":"*Checking the missing values present in the dataset*","28e26e73":"***converting pandas Series to numpy Array***","0e3ca8ca":"*There are no null values present in the data therefore no need to handle the missing values*","5a57f85f":"# Normalisation","c4782d9e":"*For Testing data*","4d62d834":"*For training data*","23a44379":"# Dealing with Duplicate Rows","a7bda894":"# ***CLOSED FORM SOLUTION***","c66e325e":"*For Testing data*","38f8e6c6":"*Conversion of dataframe to csv file*","f7ead8fa":"####  Numpy is used for handling numbers.\n#### Pandas are used for handling the dataset.\n#### Matplotlib is used to plot the graph.","0bc3bca8":"***Importing Important Libraries***","2f5803a6":"***Testing dataset after preprocessing is done***","17928292":"***Training Dataset after preprocessing is done***"}}