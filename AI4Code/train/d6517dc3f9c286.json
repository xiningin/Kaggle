{"cell_type":{"68e4976f":"code","0ef244a1":"code","93a4fb08":"code","fbad2f3b":"code","7e6bf198":"code","fd7b7d06":"code","77740659":"code","fbe02c01":"code","d7555d8c":"code","4398dd0b":"code","8f6b03c1":"code","3c9b1b3e":"code","3e63f8e0":"code","85bd8e89":"code","5b5535eb":"code","ba5fe269":"code","e6dfe4f6":"code","1e9c9d1b":"code","179277ac":"code","5ef6dd20":"code","3847c19a":"code","056294a6":"code","4f2bd20e":"code","d4d5da87":"code","4bf41b52":"code","91fef740":"code","10c10cac":"code","fe58e12c":"code","f1bcbcfe":"code","0a822d4e":"code","25b78d70":"code","8bb6c12a":"code","e1364b9e":"code","6034f271":"code","4eb964aa":"code","21664632":"code","1655f23f":"code","791a6664":"markdown","bd44f429":"markdown","0dd602ea":"markdown","cce9e7d5":"markdown","2eb221a9":"markdown","50249cf3":"markdown","f82e32ae":"markdown","83f75e38":"markdown","15799424":"markdown","acde773d":"markdown","7d6ea381":"markdown","f24f59aa":"markdown","ffef1343":"markdown","2536329e":"markdown","4748c22f":"markdown","d09aad80":"markdown"},"source":{"68e4976f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0ef244a1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure","93a4fb08":"ii=pd.read_csv(\"\/kaggle\/input\/stock-exchange-data\/indexInfo.csv\") #IndexInfo\nii","fbad2f3b":"iD=pd.read_csv(\"\/kaggle\/input\/stock-exchange-data\/indexData.csv\")  #IndexData\niD","7e6bf198":"iD.info()","fd7b7d06":"ip=pd.read_csv(\"\/kaggle\/input\/stock-exchange-data\/indexProcessed.csv\") #processed data\nip","77740659":"ip.info()","fbe02c01":"df=pd.DataFrame(iD)\ndf.dropna()\ndf","d7555d8c":"df[['Index',\"Open\",'High',\"Low\",'Close','Adj Close']]","4398dd0b":"f=df[df.Index=='NYA']\n# dropping the rows having NaN values\ndf = df.dropna()\n# To reset the indices \ndf = df.reset_index(drop = True)\ndf['INR_close']=df['Adj Close']*74.243277\nprint(df[df.Index=='NYA'])","8f6b03c1":"figure(figsize=(16, 8), dpi=80)\nplt.plot(f['Date'],f['Close'])","3c9b1b3e":"f=df[df.Index=='IXIC']\n# dropping the rows having NaN values\ndf = df.dropna()\n  \n# To reset the indices \ndf = df.reset_index(drop = True)\ndf['INR_close']=df['Adj Close']*74.243277\nprint(df[df.Index=='IXIC'])","3e63f8e0":"figure(figsize=(16, 8), dpi=80)\nplt.plot(f['Date'],f['Close'])","85bd8e89":"f=df[df.Index=='HSI']\ndf['INR_close']=df['Adj Close']*9.53884\n# dropping the rows having NaN values\ndf = df.dropna()\n  \n# To reset the indices \ndf = df.reset_index(drop = True)\nprint(df[df.Index=='HSI'])","5b5535eb":"figure(figsize=(16, 8), dpi=80)\nplt.plot(f['Date'],f['Close'])","ba5fe269":"f=df[df.Index=='000001.SS']\ndf=df.dropna()\ndf=df.reset_index(drop=True)\ndf['INR_close']=df['Adj Close']*11.4606\nprint(df[df.Index=='000001.SS'])","e6dfe4f6":"figure(figsize=(16, 8), dpi=80)\nplt.plot(f['Date'],f['Close'])","1e9c9d1b":"f=df[df.Index=='N225']\ndf=df.dropna()\ndf=df.reset_index(drop=True)\ndf['INR_close']=df['Adj Close']*0.676722\nprint(df[df.Index=='N225'])","179277ac":"figure(figsize=(16, 8), dpi=80)\nplt.plot(f['Date'],f['Close'])","5ef6dd20":"f=df[df.Index=='N100']\ndf=df.dropna()\ndf=df.reset_index(drop=True)\ndf['INR_close']=df['Adj Close']*87.0449\nprint(df[df.Index=='N100'])","3847c19a":"figure(figsize=(16, 8), dpi=80)\nplt.plot(f['Date'],f['Close'])","056294a6":"f=df[df.Index=='399001.SZ']\ndf=df.dropna()\ndf=df.reset_index(drop=True)\ndf['INR_close']=df['Adj Close']*11.4597\nprint(df[df.Index=='399001.SZ'])","4f2bd20e":"figure(figsize=(16, 8), dpi=80)\nplt.plot(f['Date'],f['Close'])","d4d5da87":"f=df[df.Index=='GSPTSE']\ndf=df.dropna()\ndf=df.reset_index(drop=True)\ndf['INR_close']=df['Adj Close']*58.8842\nprint(df[df.Index=='GSPTSE'])","4bf41b52":"figure(figsize=(16, 8), dpi=80)\nplt.plot(f['Date'],f['Close'])","91fef740":"f=df[df.Index=='NSEI']\ndf=df.dropna()\ndf=df.reset_index(drop=True)\ndf['INR_close']=df['Adj Close']\nprint(df[df.Index=='NSEI'])","10c10cac":"figure(figsize=(16, 8), dpi=80)\nplt.plot(f['Date'],f['Close'])","fe58e12c":"f=df[df.Index=='GDAXI']\ndf=df.dropna()\ndf=df.reset_index(drop=True)\ndf['INR_close']=df['Adj Close']*87.0449\nprint(df[df.Index=='GDAXI'])","f1bcbcfe":"figure(figsize=(16, 8), dpi=80)\nplt.plot(f['Date'],f['Close'])","0a822d4e":"f=df[df.Index=='KS11']\ndf.dropna()\ndf.reset_index(drop=True)\ndf['INR_close']=df['Adj Close']*0.0634347\nprint(df[df.Index=='KS11'])","25b78d70":"figure(figsize=(16, 8), dpi=80)\nplt.plot(f['Date'],f['Close'])","8bb6c12a":"f=df[df.Index=='SSMI']\ndf.dropna()\ndf.reset_index(drop=True)\ndf['INR_close']=df['Adj Close']*81.0973\nprint(df[df.Index=='SSMI'])","e1364b9e":"figure(figsize=(16, 8), dpi=80)\nplt.plot(f['Date'],f['Close'])","6034f271":"f=df[df.Index=='TWII']\ndf.dropna()\ndf.reset_index(drop=True)\ndf['INR_close']=df['Adj Close']*3.55520\nprint(df[df.Index=='TWII'])","4eb964aa":"figure(figsize=(16, 8), dpi=80)\nplt.plot(f['Date'],f['Close'])","21664632":"f=df[df.Index=='J203.JO']\ndf.dropna()\ndf.reset_index(drop=True)\ndf['INR_close']=df['Adj Close']*4.98955\nprint(df[df.Index=='J203.JO'])","1655f23f":"figure(figsize=(16, 8), dpi=80)\nplt.plot(f['Date'],f['Close'])","791a6664":"**(3) China\tShanghai Stock Exchange\t000001.SS\tCNY**\n\n1.00 CNY =11.4606 Indian Rupees","bd44f429":"**(12) Taiwan\tTaiwan Stock Exchange\tTWII\tTWD**\n\n1.00 TWD =3.55520 Indian Rupees","0dd602ea":"**(2) Hong Kong\tHong Kong Stock Exchange\tHSI\tHKD**\n\n1.00 HKD =9.53884 Indian Rupees","cce9e7d5":"***Dropping the NAN columns***","2eb221a9":"**Reading the data available in the files and intergrating**","50249cf3":"**(7) Canada\tToronto Stock Exchange\tGSPTSE\tCAD**\n\n1.00 CAD =58.8842 Indian Rupees","f82e32ae":"**(4) Japan\tTokyo Stock Exchange\tN225\tJPY**\n\n1.00 CNY =0.676722 Indian Rupees","83f75e38":"**(5) Europe\tEuronext\tN100\tEUR**\n\n1.00 EUR =87.0449 Indian Rupees","15799424":"**(1) United States\tNASDAQ\tIXIC\tUSD**\n\n1.00 US Dollar =74.243277 Indian Rupees","acde773d":"**(0) United States\tNew York Stock Exchange\tNYA\tUSD**\n\n1.00 US Dollar =74.243277 Indian Rupees\n","7d6ea381":"**(8) India\tNational Stock Exchange of India\tNSEI\tINR**\n\n1.00 INR =1 Indian Rupees","f24f59aa":"**(6) China\tShenzhen Stock Exchange\t399001.SZ\tCNY**\n\n1.00 CNY =11.4597 Indian Rupees","ffef1343":"**(10) Korea\tKorea Exchange\tKS11\tKRW**\n\n1.00 KRW =0.0634347 Indian Rupees","2536329e":"**(11) Switzerland\tSIX Swiss Exchange\tSSMI\tCHF**\n\n1.00 CHF =81.0973 Indian Rupees","4748c22f":"**(13) South Africa\tJohannesburg Stock Exchange\tJ203.JO\tZAR**\n\n1.00 ZAR =4.98955 Indian Rupees","d09aad80":"**(9) Germany\tFrankfurt Stock Exchange\tGDAXI\tEUR**\n\n1.00 EUR =11.4606 Indian Rupees"}}