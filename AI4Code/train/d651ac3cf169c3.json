{"cell_type":{"0c20df0d":"code","33072714":"code","0f9955c0":"code","f002e086":"code","640cd203":"code","d1ad7ceb":"code","c1f54c9e":"code","0687b508":"code","5ad93a8c":"code","9a456d3a":"code","ee77f5e6":"code","9465c00e":"code","15e2aea4":"code","21e8901e":"code","3cce526b":"code","ef938670":"code","66ffa671":"code","7c128ed3":"code","e3a45101":"code","5e4f58ba":"code","1e089357":"code","82f8ad64":"code","ca91900e":"code","980b9ad6":"code","0203b0d6":"code","78e1bdc2":"code","f59eca12":"code","26a95a42":"code","a7a4adf1":"code","7b9d7e5f":"code","6785f2ee":"code","98bd034b":"code","4c704d5f":"code","2453f3d5":"code","b2d2ff5b":"code","ae89aff2":"code","6a818514":"code","1e6c2415":"code","135c0857":"markdown","a1bbbb19":"markdown","2ea49637":"markdown","3474345b":"markdown","d1361af0":"markdown","05274aa2":"markdown","676c8ce3":"markdown","c5618577":"markdown"},"source":{"0c20df0d":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score","33072714":"data_df = pd.read_csv('..\/input\/videogamesales\/vgsales.csv')\ndata_df.head()","0f9955c0":"data_df.info()","f002e086":"data_df.isnull().sum()","640cd203":"data_df = data_df.dropna(subset=['Year','Publisher'],axis=0)\ndata_df.isnull().sum()","d1ad7ceb":"AnnualSalesMarket = data_df.groupby('Year')[['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']].sum().reset_index()\nplt.plot(AnnualSalesMarket['Year'], AnnualSalesMarket['NA_Sales'], label='North America Sales')\nplt.plot(AnnualSalesMarket['Year'], AnnualSalesMarket['EU_Sales'], label='Europe Sales')\nplt.plot(AnnualSalesMarket['Year'], AnnualSalesMarket['JP_Sales'], label='Japan Sales')\nplt.plot(AnnualSalesMarket['Year'], AnnualSalesMarket['Other_Sales'], label='Other Sales')\nplt.ylabel('Sales')\nplt.xlabel('Years')\nplt.title('Sales VS Years')\nplt.legend()\nplt.show()","c1f54c9e":"data = data_df.drop(['Rank','Name','Year','JP_Sales','Other_Sales','Global_Sales'], axis=1)\ndata.head()","0687b508":"le = LabelEncoder()\ndata['Platform'] = le.fit_transform(data['Platform'].astype('str'))\ndata['Genre'] = le.fit_transform(data['Genre'].astype('str'))\ndata['Publisher'] = le.fit_transform(data['Publisher'].astype('str'))\ndata.head()","5ad93a8c":"y = data_df['Global_Sales']","9a456d3a":"scaler = StandardScaler()\nscaler.fit(data)\ndata = scaler.transform(data)","ee77f5e6":"X_train, X_test, y_train, y_test = train_test_split(data, y, test_size=0.30)","9465c00e":"reg = LinearRegression()\nreg.fit(X_train,y_train)","15e2aea4":"y_pred = reg.predict(X_test)","21e8901e":"Acc_reg = reg.score(X_train, y_train)\nacc_reg = reg.score(X_test, y_test)\nprint ('Train Accuracy : {:.2f}%'.format(Acc_reg*100))\nprint ('Test Accuracy : {:.2f}%'.format(acc_reg*100))","3cce526b":"print('Mean squared error: %.2f'% mean_squared_error(y_test, y_pred))\nprint('Variance Score: %.2f'% r2_score(y_test, y_pred))","ef938670":"model_svr = SVR()\nmodel_svr.fit(X_train, y_train)","66ffa671":"pred_svr = model_svr.predict(X_test)","7c128ed3":"Acc_svr = model_svr.score(X_train, y_train)\nacc_svr = model_svr.score(X_test, y_test)\nprint ('Train Accuracy : {:.2f}%'.format(Acc_svr*100))\nprint ('Test Accuracy : {:.2f}%'.format(acc_svr*100))","e3a45101":"print('Mean squared error: %.2f'% mean_squared_error(y_test, pred_svr))\nprint('Variance Score: %.2f'% r2_score(y_test, pred_svr))","5e4f58ba":"neigh = KNeighborsRegressor()\nneigh.fit(X_train, y_train)","1e089357":"pred_neigh = neigh.predict(X_test)","82f8ad64":"Acc_neigh = neigh.score(X_train, y_train)\nacc_neigh = neigh.score(X_test, y_test)\nprint ('Train Accuracy : {:.2f}%'.format(Acc_neigh*100))\nprint ('Test Accuracy : {:.2f}%'.format(acc_neigh*100))","ca91900e":"print('Mean squared error: %.2f'% mean_squared_error(y_test, pred_neigh))\nprint('Variance Score: %.2f'% r2_score(y_test, pred_neigh))","980b9ad6":"gbr = GradientBoostingRegressor()\ngbr.fit(X_train,y_train)","0203b0d6":"pred_gbr = gbr.predict(X_test)","78e1bdc2":"Acc_gbr = gbr.score(X_train, y_train)\nacc_gbr = gbr.score(X_test, y_test)\nprint ('Train Accuracy : {:.2f}%'.format(Acc_gbr*100))\nprint ('Test Accuracy : {:.2f}%'.format(acc_gbr*100))","f59eca12":"print('Mean squared error: %.2f'% mean_squared_error(y_test, pred_gbr))\nprint('Variance Score: %.2f'% r2_score(y_test, pred_gbr))","26a95a42":"dtr = DecisionTreeRegressor()\ndtr.fit(X_train, y_train)","a7a4adf1":"pred_dtr = dtr.predict(X_test)","7b9d7e5f":"Acc_dtr = dtr.score(X_train, y_train)\nacc_dtr = dtr.score(X_test, y_test)\nprint ('Train Accuracy : {:.2f}%'.format(Acc_dtr*100))\nprint ('Test Accuracy : {:.2f}%'.format(acc_dtr*100))","6785f2ee":"print('Mean squared error: %.2f'% mean_squared_error(y_test, pred_dtr))\nprint('Variance Score: %.2f'% r2_score(y_test, pred_dtr))","98bd034b":"rfr = RandomForestRegressor()\nrfr.fit(X_train, y_train)","4c704d5f":"pred_rfr = rfr.predict(X_test)","2453f3d5":"Acc_rfr = rfr.score(X_train, y_train)\nacc_rfr = rfr.score(X_test, y_test)\nprint ('Train Accuracy : {:.2f}%'.format(Acc_rfr*100))\nprint ('Test Accuracy : {:.2f}%'.format(acc_rfr*100))","b2d2ff5b":"print('Mean squared error: %.2f'% mean_squared_error(y_test, pred_rfr))\nprint('Variance Score: %.2f'% r2_score(y_test, pred_rfr))","ae89aff2":"output = pd.DataFrame({\"Model\":['Linear Regression','SVR','KNeighborsRegressor',\n                                'Gradient Boosting Regressor','Decision Tree Regressor',\n                               'Random Forest Regressor'],\n                      \"Accuracy\":[acc_reg, acc_svr, acc_neigh, acc_gbr, acc_dtr, acc_rfr]})","6a818514":"output","1e6c2415":"sns.barplot(x='Accuracy', y='Model', data=output)","135c0857":"# Linear Regression","a1bbbb19":"# Random Forest Regressor","2ea49637":"# Final Report","3474345b":"#  Sales VS Year","d1361af0":"# Gradient Boosting Regressor","05274aa2":"# KNeighborsRegressor","676c8ce3":"# Decision Tree Regressor","c5618577":"# SVR"}}