{"cell_type":{"9107ede8":"code","1becef5f":"code","db8439a4":"code","53cec4bf":"code","433c7f25":"code","88cade47":"code","dc4fcb81":"code","793b0e06":"code","a0bdeabf":"code","948f2f40":"code","95a72445":"code","0c8758fe":"code","b92e2bb3":"code","953de8e8":"code","7787705a":"code","0d003540":"code","709a3a51":"code","b1fe5738":"code","af724375":"code","ad596b9c":"code","bbf49038":"code","85adf536":"code","ef884f5d":"code","d6624656":"markdown","f807f83a":"markdown","71a92ac3":"markdown","23899f45":"markdown","20a8eecd":"markdown","ed4a5139":"markdown","7af6c3d2":"markdown","23681762":"markdown","c3a2fcdd":"markdown"},"source":{"9107ede8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1becef5f":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly import tools\nfrom plotly.subplots import make_subplots","db8439a4":"df = pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')\ndf.head()","53cec4bf":"df.shape","433c7f25":"df.info()","88cade47":"df.describe()","dc4fcb81":"df.isna().sum()","793b0e06":"df.drop(['id','Unnamed: 32'],1,inplace=True)","a0bdeabf":"fig = px.bar(x=df['diagnosis'].value_counts().index, y=df['diagnosis'].value_counts(), text=(df['diagnosis'].value_counts()\/len(df['diagnosis'])*100))\nfig.update_traces(marker_color=['crimson','maroon'], textposition='outside', texttemplate='%{text:.4s}%')\nfig['layout'].update(height=500, width=600, title='Diagnosis Distribution')\nfig.show()","948f2f40":"for i in df.iloc[:,1:]:\n    plt.show()\n    sns.distplot(df[i])\n    plt.xlabel(i, fontsize=12)\n    plt.ylabel('Count', fontsize=13)\n    plt.tight_layout();","95a72445":"for i in df.iloc[:,1:]:\n    fig = px.histogram(df, x=i, title=str(i)+' Distribution', height=500, width=700, nbins=100, color='diagnosis')\n    fig.show()","0c8758fe":"# Encoding Target variable\ndf['diagnosis'] = pd.factorize(df['diagnosis'])[0]\n","b92e2bb3":"corr = df.corr()\ncorrelated = corr['diagnosis'].apply(np.abs).sort_values(ascending=False).index\ncorr_sorted = corr[correlated].reindex(correlated)\ncorr_sorted.head()","953de8e8":"most_corr = corr_sorted[(corr_sorted.iloc[:,0 ]>=0.7) | (corr_sorted.iloc[:,0] <= -0.7)].index\n\ncorr_sorted = corr_sorted.loc[most_corr, most_corr]\n\ncorr_sorted","7787705a":"fig, ax=plt.subplots(figsize=(15, 7))\ncmap=sns.diverging_palette(20, 220, n=200)\n\nsns.heatmap(corr_sorted, ax=ax, annot=True, cmap=cmap)\nplt.show()","0d003540":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nx = df.drop('diagnosis',1)\ny = df['diagnosis']\n\nprint(x.shape)\nprint(y.shape)","709a3a51":"sc = StandardScaler()\nx = sc.fit_transform(x)","b1fe5738":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\nx = pca.fit_transform(x)","af724375":"x_train, x_test, y_train, y_test = train_test_split(x,y, random_state=10, test_size=0.2)","ad596b9c":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\nlogr = LogisticRegression()\n\nlogr.fit(x_train, y_train)","bbf49038":"y_pred = logr.predict(x_test)","85adf536":"print('Accuracy Score Of Logistic Regression Model is: ', accuracy_score(y_test, y_pred))","ef884f5d":"con = confusion_matrix(y_pred, y_test)\ncon","d6624656":"We have skewed distribution.","f807f83a":"Benign and Malignant are two diagnosis mentioned in data, Lets see what they mean.\n\n**Benign** Diagnosis: A benign tumor means the tumor can grow but will not spread. Some types of cancer do not form a tumor.\n\n**Malignant** Diagnosis: A cancerous tumor is malignant, meaning it can grow and spread to other parts of the body.\n\n","71a92ac3":"**Scaling Data**","23899f45":"# Logistic Regression# ","20a8eecd":"We have slight imbalance data. Diagnosis **benign** is 62.7% and **malignant** diagnosis is 37.2%","ed4a5139":"# Bivariate Analysis","7af6c3d2":"Lot of overlap between two Disgnosis.","23681762":"**Looking for Correlation**","c3a2fcdd":"**Applying PCA**"}}