{"cell_type":{"ddc089e5":"code","634c0f33":"code","3583d0ee":"code","2366de68":"code","6d2dc099":"code","a2acf2e5":"code","b3dd6d17":"code","a56709aa":"code","99766681":"code","d22279e7":"code","9370fee1":"code","94a5a1fc":"code","ef6705ad":"code","6a608671":"code","58fcca92":"markdown","82bdd8ed":"markdown","7ab01945":"markdown","044a790e":"markdown","b27d3fe0":"markdown"},"source":{"ddc089e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","634c0f33":"df=pd.read_csv('..\/input\/spotify-dataset-19212020-160k-tracks\/data_by_genres.csv')\ndf","3583d0ee":"df=df.drop('genres',axis=1)","2366de68":"df","6d2dc099":"from sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nimport seaborn as sns\nfrom sklearn.preprocessing import normalize","a2acf2e5":"kmeans = KMeans(\n    init=\"random\",\n    n_clusters=2,\n    n_init=10,\n    max_iter=300,\n    random_state=42\n)","b3dd6d17":"colonnes=[\"acousticness\",\"instrumentalness\"]\ndonnees=normalize(df[colonnes], axis=0, norm='max')","a56709aa":"kmeans.fit(donnees)","99766681":"kmeans.inertia_","d22279e7":"kmeans.labels_","9370fee1":"resultats=np.zeros((donnees.shape[0], 3))\nresultats[:,:2]=donnees\nfor i in range (np.shape(kmeans.labels_)[0]):\n    resultats[i,2]=kmeans.labels_[i]\nresultats","94a5a1fc":"colonnesbis=list.copy(colonnes)\ncolonnesbis.append('cluster')","ef6705ad":"df_resultats=pd.DataFrame(list(resultats),columns=colonnesbis)","6a608671":"sns.lmplot(x='acousticness', y='instrumentalness', data=df_resultats, fit_reg=False, hue='cluster')","58fcca92":"On normalise les donn\u00e9es","82bdd8ed":"On se d\u00e9barasse de la colonne genres","7ab01945":"Je vais maintenant visualiser le clustering","044a790e":"Nous donne l'attribution de chaque entr\u00e9e dans une liste.","b27d3fe0":"kmeans.inertia_ nous donne la plus petite valeur SSE"}}