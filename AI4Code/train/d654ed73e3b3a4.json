{"cell_type":{"edd5f1ad":"code","3a975165":"code","7b57d0f1":"code","04a82c2c":"code","92610b9a":"code","50fd7361":"code","280f9bc2":"code","e00c9b30":"markdown","ac99d029":"markdown","9ec40e41":"markdown","bbb4dd04":"markdown","2c1367d5":"markdown"},"source":{"edd5f1ad":"%%writefile my_goose.py\n\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import Observation, Configuration, Action, row_col\n\n\ndef agent(obs_dict, config_dict):\n    \"\"\"This agent always moves toward observation.food[0] but does not take advantage of board wrapping\"\"\"\n    observation = Observation(obs_dict)\n    configuration = Configuration(config_dict)\n    player_index = observation.index\n    player_goose = observation.geese[player_index]\n    player_head = player_goose[0]\n    player_row, player_column = row_col(player_head, configuration.columns)\n    food = observation.food[0]\n    food_row, food_column = row_col(food, configuration.columns)\n\n    if food_row > player_row:\n        return Action.SOUTH.name\n    if food_row < player_row:\n        return Action.NORTH.name\n    if food_column > player_column:\n        return Action.EAST.name\n    return Action.WEST.name","3a975165":"%%writefile boiler_goose.py\nimport dataclasses\nfrom dataclasses import dataclass\nfrom typing import List, NamedTuple, Set, Dict, Optional, Tuple, Callable\nimport numpy as np\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import Action\nfrom abc import ABC, abstractmethod\nimport sys\nimport traceback\n\n\ntrans_action_map: Dict[Tuple[int, int], Action] = {\n    (-1, 0): Action.NORTH,\n    (1, 0): Action.SOUTH,\n    (0, 1): Action.EAST,\n    (0, -1): Action.WEST,\n}\n\n\nclass Pos(NamedTuple):\n    x: int\n    y: int\n\n    def __repr__(self):\n        return f\"[{self.x}:{self.y}]\"\n\n\n@dataclass\nclass Goose:\n    head: Pos = dataclasses.field(init=False)\n    poses: List[Pos]\n\n    def __post_init__(self):\n        self.head = self.poses[0]\n\n    def __repr__(self):\n        return \"Goose(\" + \"-\".join(map(str, self.poses)) + \")\"\n\n    def __iter__(self):\n        return iter(self.poses)\n\n    def __len__(self):\n        return len(self.poses)\n\n\ndef field_idx_to_pos(field_idx: int, *, num_cols: int, num_rows: int) -> Pos:\n    x = field_idx \/\/ num_cols\n    y = field_idx % num_cols\n\n    if not (0 <= x < num_rows and 0 <= y < num_cols):\n        raise ValueError(\"Illegal field_idx {field_idx} with x={x} and y={y}\")\n\n    return Pos(x, y)\n\n\nclass Geometry:\n    def __init__(self, size_x, size_y):\n        self.size_x = size_x\n        self.size_y = size_y\n\n    @property\n    def shape(self) -> Tuple[int, int]:\n        return (self.size_x, self.size_y)\n\n    def prox(self, pos: Pos) -> Set[Pos]:\n        return {\n            self.translate(pos, direction)\n            for direction in [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        }\n\n    def translate(self, pos: Pos, diff: Tuple[int, int]) -> Pos:\n        x, y = pos\n        dx, dy = diff\n        return Pos((x + dx) % self.size_x, (y + dy) % self.size_y)\n\n    def trans_to(self, pos1: Pos, pos2: Pos) -> Tuple[int, int]:\n        dx = pos2.x - pos1.x\n        dy = pos2.y - pos1.y\n\n        if dx <= self.size_x \/\/ 2:\n            dx += self.size_x\n\n        if dx > self.size_x \/\/ 2:\n            dx -= self.size_x\n\n        if dy <= self.size_y \/\/ 2:\n            dy += self.size_y\n\n        if dy > self.size_y \/\/ 2:\n            dy -= self.size_y\n\n        return (dx, dy)\n\n    def action_to(self, pos1, pos2):\n        diff = self.trans_to(pos1, pos2)\n\n        result = trans_action_map.get(diff)\n\n        if result is None:\n            raise ValueError(f\"Cannot step from {pos1} to {pos2}\")\n\n        return result\n\n@dataclass\nclass State:\n    food: Set[Pos]\n    geese: Dict[int, Goose]\n    index: int\n    step: int\n    geo: Geometry\n\n    field: np.ndarray = dataclasses.field(init=False)\n    my_goose: Goose = dataclasses.field(init=False)\n    danger_poses: Set[Pos] = dataclasses.field(init=False)\n\n    def __post_init__(self):\n        self.field = np.full(fill_value=0, shape=self.geo.shape)\n        for goose in self.geese.values():\n            for pos in goose.poses[:-1]:  # not considering tail!\n                self.field[pos.x, pos.y] = 1\n                \n            if self.geo.prox(goose.head) & self.food:\n                tail = goose.poses[-1]\n                self.field[tail.x, tail.y] = 1\n                \n\n        self.my_goose = self.geese[self.index]\n\n        self.danger_poses = {\n            pos\n            for i, goose in self.geese.items()\n            if i != self.index\n            for pos in self.geo.prox(goose.head)\n        }\n\n    @classmethod\n    def from_obs_conf(cls, obs, conf):\n        num_cols = conf[\"columns\"]\n        num_rows = conf[\"rows\"]\n        step = obs[\"step\"]\n        index = obs[\"index\"]\n\n        geese = {\n            idx: Goose(\n                poses=[\n                    field_idx_to_pos(idx, num_cols=num_cols, num_rows=num_rows)\n                    for idx in goose_data\n                ]\n            )\n            for idx, goose_data in enumerate(obs[\"geese\"])\n            if goose_data\n        }\n\n        food = {\n            field_idx_to_pos(idx, num_cols=num_cols, num_rows=num_rows)\n            for idx in obs[\"food\"]\n        }\n\n        return cls(\n            food=food,\n            geese=geese,\n            index=index,\n            step=step,\n            geo=Geometry(size_x=num_rows, size_y=num_cols),\n        )\n\n    def __repr__(self):\n        return (\n            f\"State(step:{self.step}, index:{self.index}, Geese(\"\n            + \",\".join(f\"{idx}:{len(goose.poses)}\" for idx, goose in self.geese.items())\n            + f\"), food:{len(self.food)})\"\n        )\n\n@dataclass\nclass FloodfillResult:\n    field_dist: np.ndarray\n    frontiers: List[List[Tuple[int, int]]]\n\n\ndef flood_fill(is_occupied: np.ndarray, seeds: List[Pos]) -> FloodfillResult:\n    \"\"\"\n    Flood will start with distance 0 at seeds and only flow where is_occupied[x,y]==0\n    \"\"\"\n    size_x, size_y = is_occupied.shape\n\n    field_dist = np.full(fill_value=-1, shape=(size_x, size_y))\n\n    frontier = [(s.x, s.y) for s in seeds]\n\n    frontiers = [frontier]\n\n    for seed in seeds:\n        field_dist[seed] = 0\n\n    dist = 1\n\n    while frontier:\n        new_frontier: List[Tuple[int, int]] = []\n        for x, y in frontier:\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                new_x = (x + dx) % size_x\n                new_y = (y + dy) % size_y\n                if is_occupied[new_x, new_y] == 0 and field_dist[new_x, new_y] == -1:\n                    field_dist[new_x, new_y] = dist\n                    new_frontier.append((new_x, new_y))\n        frontier = new_frontier\n        frontiers.append(frontier)\n        dist += 1\n\n    return FloodfillResult(field_dist=field_dist, frontiers=frontiers)\n\n\ndef get_dist(\n    floodfill_result: FloodfillResult, test_func: Callable[[Tuple[int, int]], bool]\n) -> Optional[int]:\n    for dist, frontier in enumerate(floodfill_result.frontiers):\n        for pos in frontier:\n            if test_func(pos):\n                return dist\n\n    return None\n\nclass BaseAgent(ABC):\n    def __init__(self):\n        self.last_pos: Optional[Pos] = None\n\n    def __call__(self, obs, conf):\n        try:\n            state = State.from_obs_conf(obs, conf)\n\n            next_pos = self.step(state)\n\n            action = state.geo.action_to(state.my_goose.head, next_pos)\n\n            self.last_pos = state.my_goose.head\n\n            return action.name\n        except Exception as exc:\n            traceback.print_exc(file=sys.stderr)\n            raise\n\n    @abstractmethod\n    def step(self, state: State) -> Pos:\n        \"\"\"\n        return: next position\n\n        Implement this\n        \"\"\"\n        pass\n\n    def next_poses(self, state: State) -> Set[Pos]:\n        head_next_poses = state.geo.prox(state.my_goose.head)\n\n        result = {\n            pos\n            for pos in head_next_poses\n            if pos != self.last_pos and state.field[pos] == 0\n        }\n\n        return result\n\nfrom operator import itemgetter\nimport random\n\nclass FloodGoose(BaseAgent):\n    def __init__(self, min_length=13):\n        super().__init__()\n        self.min_length = min_length\n        \n    def step(self, state):\n        result = None\n        \n        if len(state.my_goose) < self.min_length:\n            result = self.goto(state, lambda pos:pos in state.food)\n        elif len(state.my_goose) >= 3:\n            result = self.goto(state, lambda pos:pos==state.my_goose.poses[-1])\n            \n        if result is None:\n            result = self.random_step(state)\n            \n        return result\n    \n    def goto(self, state, test_func):\n        result = None\n        \n        pos_dists = {}\n        for pos in self.next_poses(state):\n            flood = flood_fill(state.field, [pos])\n            dist = get_dist(flood, test_func)\n            if dist is not None:\n                pos_dists[pos] = dist\n\n        if pos_dists:\n            closest_pos, _ = min(pos_dists.items(), key=itemgetter(1))\n\n            if closest_pos not in state.danger_poses:\n                result = closest_pos\n                \n        return result\n        \n    \n    def random_step(self, state):\n        next_poses = self.next_poses(state) - state.danger_poses - state.food\n        if not next_poses:\n            next_poses = self.next_poses(state) - state.danger_poses\n\n            if not next_poses:\n                next_poses = self.next_poses(state)\n\n                if not next_poses:\n                    next_poses = state.geo.prox(state.my_goose.head)\n                        \n        result = random.choice(list(next_poses))\n        \n        return result\n    \n\nagent = FloodGoose(min_length=8)\n\ndef call_agent(obs, conf):\n    return agent(obs, conf)\n","7b57d0f1":"%%writefile crazy_goose.py\nimport numpy as np\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import Observation, Configuration, Action, row_col\n\n# Moves constants\nSOUTH = 1\nNORTH = 2\nEAST  = 3\nWEST  = 4\nREVERSE_MOVE = {\n    None : None,\n    SOUTH: NORTH,\n    NORTH: SOUTH,\n    EAST : WEST,\n    WEST : EAST,\n}\nCIRCLE_MOVE = {\n    None : None,\n    SOUTH: WEST,\n    NORTH: EAST,\n    EAST : SOUTH,\n    WEST : NORTH\n}\n\n# Board constants\nMY_HEAD             =  2\nFOOD_CELL           =  1\nEMPTY               =  0\nHEAD_POSSIBLE_CELL  = -1\nBODY_CELL           = -2\n\n# Store last move\nlast_move = None\nlast_eaten = 0\nlast_size = 1\nstep = 0\n\n# Returns a list of possible destinations in order to reach `dest_cell`\ndef move_towards (head_cell, neck_cell, dest_cell, configuration):\n    print (\"--- Computing food movements...\")\n    destinations = []\n    x_head, y_head = row_col(head_cell, configuration.columns)\n    x_neck, y_neck = row_col(neck_cell, configuration.columns)\n    x_dest, y_dest = row_col(dest_cell, configuration.columns)\n    print (\"-> Head at ({}, {})\".format(x_head, y_head))\n    print (\"-> Neck at ({}, {})\".format(x_neck, y_neck))\n    print (\"-> Dest at ({}, {})\".format(x_dest, y_dest))\n    dx = x_head - x_dest\n    dy = y_head - y_dest\n    if (dx >= 4):\n        dx = 7 - dx\n    elif (dx <= -4):\n        dx += 7\n    if (dy >= 6):\n        dy = 11 - dy\n    elif (dy <= -6):\n        dy += 11\n    print (\"dx={}, dy={}\".format(dx, dy))\n    if (dx > 0):\n        x_move = (x_head - 1 + 7) % 7\n        y_move = y_head\n        print (\"Move ({}, {}), Neck ({}, {})\".format(x_move, y_move, x_neck, y_neck))\n        if not ((x_move == x_neck) and (y_move == y_neck)):\n            destinations.append((x_move, y_move, NORTH))\n    elif (dx < 0):\n        x_move = (x_head + 1 + 7) % 7\n        y_move = y_head\n        print (\"Move ({}, {}), Neck ({}, {})\".format(x_move, y_move, x_neck, y_neck))\n        if not ((x_move == x_neck) and (y_move == y_neck)):\n            destinations.append((x_move, y_move, SOUTH))\n    if (dy > 0):\n        x_move = x_head\n        y_move = (y_head - 1 + 11) % 11\n        print (\"Move ({}, {}), Neck ({}, {})\".format(x_move, y_move, x_neck, y_neck))\n        if not ((x_move == x_neck) and (y_move == y_neck)):\n            destinations.append((x_move, y_move, WEST))\n    elif (dy < 0):\n        x_move = x_head\n        y_move = (y_head + 1 + 11) % 11\n        print (\"Move ({}, {}), Neck ({}, {})\".format(x_move, y_move, x_neck, y_neck))\n        if not ((x_move == x_neck) and (y_move == y_neck)):\n            destinations.append((x_move, y_move, EAST))\n    return destinations\n\ndef get_all_movements(goose_head, configuration):\n    x_head, y_head = row_col(goose_head, configuration.columns)\n    movements = []\n    movements.append(((x_head - 1 + 7) % 7, y_head, NORTH))\n    movements.append(((x_head + 1 + 7) % 7, y_head, SOUTH))\n    movements.append((x_head, (y_head - 1 + 11) % 11, WEST))\n    movements.append((x_head, (y_head + 1 + 11) % 11, EAST))\n    return movements\n    \ndef get_nearest_cells(x, y):\n    # Returns adjacent cells from the current one\n    result = []\n    for i in (-1,+1):\n        result.append(((x+i+7)%7, y))\n        result.append((x, (y+i+11)%11))\n    return result\n\n# Compute L1 distance between cells\ndef cell_distance (a, b, configuration):\n    xa, ya = row_col(a, configuration.columns)\n    xb, yb = row_col(b, configuration.columns)\n    dx = abs(xa - xb)\n    dy = abs(ya - yb)\n    if (dx >= 4):\n        dx = 7 - dx\n    if (dy >= 6):\n        dy = 11 - dy\n    return dx + dy\n\n# Tells if that particular cell forbids movement on the next step\ndef is_closed (movement, board):\n    return all([board[x_adj, y_adj] for (x_adj, y_adj) in get_nearest_cells(movement[0], movement[1])])\n\ndef is_safe (movement, board):\n    return board[movement[0], movement[1]] >= 0\n\ndef is_half_safe (movement, board):\n    return board[movement[0], movement[1]] >= -1\n\ndef agent (obs_dict, config_dict):\n    global last_move\n    global last_eaten\n    global last_size\n    global step\n    print (\"==============================================\")\n    observation = Observation(obs_dict)\n    configuration = Configuration(config_dict)\n    player_index = observation.index\n    player_goose = observation.geese[player_index]\n    player_head = player_goose[0]\n    player_row, player_column = row_col(player_head, configuration.columns)\n\n    if (len(player_goose) > last_size):\n        last_size = len(player_goose)\n        last_eaten = step\n    step += 1\n    \n    moves = {\n        1: 'SOUTH',\n        2: 'NORTH',\n        3: 'EAST',\n        4: 'WEST'\n    }\n\n    board = np.zeros((7, 11))\n    \n    # Adding food to board\n    for food in observation.food:\n        x, y = row_col(food, configuration.columns)\n        print (\"Food cell on ({}, {})\".format(x, y))\n        board[x, y] = FOOD_CELL\n        \n    # Adding geese to the board\n    for i in range(4):\n        goose = observation.geese[i]\n        # Skip if goose is dead\n        if len(goose) == 0:\n            continue\n        # If it's an opponent\n        if i != player_index:\n            x, y = row_col(goose[0], configuration.columns)\n            # Add possible head movements for it\n            for px, py in get_nearest_cells(x, y):\n                print (\"Head possible cell on ({}, {})\".format(px, py))\n                # If one of these head movements may lead the goose\n                # to eat, add tail as BODY_CELL, because it won't move.\n                if board[px, py] == FOOD_CELL:\n                    x_tail, y_tail = row_col(goose[-1], configuration.columns)\n                    print (\"Adding tail on ({}, {}) as the goose may eat\".format(x_tail, y_tail))\n                    board[x_tail, y_tail] = BODY_CELL\n                board[px, py] = HEAD_POSSIBLE_CELL\n        # Adds goose body without tail (tail is previously added only if goose may eat)\n        for n in goose[:-1]:\n            x, y = row_col(n, configuration.columns)\n            print (\"Body cell on ({}, {})\".format(x, y))\n            board[x, y] = BODY_CELL\n    \n    # Adding my head to the board\n    x, y = row_col(player_head, configuration.columns)\n    print (\"My head is at ({}, {})\".format(x, y))\n    board[x, y] = MY_HEAD\n    \n    # Debug board\n    print (board)\n    \n    # Iterate over food and geese in order to compute distances for each one\n    food_race = {}\n    for food in observation.food:\n        food_race[food] = {}\n        for i in range(4):\n            goose = observation.geese[i]\n            if len(goose) == 0:\n                continue\n            food_race[food][i] = cell_distance(goose[0], food, configuration)\n    \n    # The best food is the least coveted\n    best_food = None\n    best_distance = float('inf')\n    best_closest_geese = float('inf')\n    for food in food_race:\n        print (\"-> Food on {}\".format(row_col(food, configuration.columns)))\n        my_distance = food_race[food][player_index]\n        print (\" - My distance is {}\".format(my_distance))\n        closest_geese = 0\n        for goose_id in food_race[food]:\n            if goose_id == player_index:\n                continue\n            if food_race[food][goose_id] <= my_distance:\n                closest_geese += 1\n        print (\" - There are {} closest geese\".format(closest_geese))\n        if (closest_geese < best_closest_geese):\n            best_food = food\n            best_distance = my_distance\n            best_closest_geese = closest_geese\n            print (\"  * This food is better\")\n        elif (closest_geese == best_closest_geese) and (my_distance <= best_distance):\n            best_food = food\n            best_distance = my_distance\n            best_closest_geese = closest_geese\n            print (\"  * This food is better\")\n            \n    # Now that the best food has been found, check if the movement towards it is safe.\n    # Computes every available move and then check for move priorities.\n    if len(player_goose) > 1:\n        food_movements = move_towards(player_head, player_goose[1], best_food, configuration)\n    else:\n        food_movements = move_towards(player_head, player_head, best_food, configuration)\n    all_movements = get_all_movements(player_head, configuration)\n    # Excluding last movement reverse\n    food_movements = [move for move in food_movements if move[2] != REVERSE_MOVE[last_move]]\n    all_movements  = [move for move in all_movements if move[2] != REVERSE_MOVE[last_move]]\n    print (\"-> Available food moves: {}\".format(food_movements))\n    print (\"-> All moves: {}\".format(all_movements))\n    \n    # Trying to reach goal size of 4\n    if (len(player_goose) < 4):\n        \n        # 1. Food movements that are safe and not closed\n        for food_movement in food_movements:\n            print (\"Food movement {}\".format(food_movement))\n            if is_safe (food_movement, board) and not is_closed(food_movement, board):\n                print (\"It's safe! Let's move {}!\".format(moves[food_movement[2]]))\n                last_move = food_movement[2]\n                return moves[food_movement[2]] # Move here\n\n        # 2. Any movement safe and not closed\n        for movement in all_movements:\n            print (\"Movement {}\".format(movement))\n            if is_safe (movement, board) and not is_closed(movement, board):\n                print (\"It's safe! Let's move {}!\".format(moves[movement[2]]))\n                last_move = movement[2]\n                return moves[movement[2]] # Move here\n\n        # 3. Food movements half safe and not closed\n        for food_movement in food_movements:\n            if is_half_safe (food_movement, board) and not is_closed(food_movement, board):\n                print (\"Food movement {} is half safe, I'm going {}!\".format(food_movement, moves[food_movement[2]]))\n                last_move = food_movement[2]\n                return moves[food_movement[2]] # Move here\n\n        # 4. Any movement half safe and not closed\n        for movement in all_movements:\n            if is_half_safe (movement, board) and not is_closed(movement, board):\n                print (\"Movement {} is half safe, I'm going {}!\".format(movement, moves[movement[2]]))\n                last_move = movement[2]\n                return moves[movement[2]] # Move here\n\n        # 5. Food movements that are safe\n        for food_movement in food_movements:\n            print (\"Food movement {}\".format(food_movement))\n            if is_safe (food_movement, board):\n                print (\"It's safe! Let's move {}!\".format(moves[food_movement[2]]))\n                last_move = food_movement[2]\n                return moves[food_movement[2]] # Move here\n\n        # 6. Any movement safe\n        for movement in all_movements:\n            print (\"Movement {}\".format(movement))\n            if is_safe (movement, board):\n                print (\"It's safe! Let's move {}!\".format(moves[movement[2]]))\n                last_move = movement[2]\n                return moves[movement[2]] # Move here\n\n        # 7. Food movements half safe\n        for food_movement in food_movements:\n            if is_half_safe (food_movement, board):\n                print (\"Food movement {} is half safe, I'm going {}!\".format(food_movement, moves[food_movement[2]]))\n                last_move = food_movement[2]\n                return moves[food_movement[2]] # Move here\n\n        # 8. Any movement half safe\n        for movement in all_movements:\n            if is_half_safe (movement, board):\n                print (\"Movement {} is half safe, I'm going {}!\".format(movement, moves[movement[2]]))\n                last_move = movement[2]\n                return moves[movement[2]] # Move here\n    \n    # Just trying to walk in circles\n    else:\n        \n        # Delete food moves\n        food_coordinates = []\n        for food in food_race:\n            x_food, y_food = row_col(food, configuration.columns)\n            food_coordinates.append((x_food, y_food))\n        available_moves = []\n        for move in all_movements:\n            for (x_food, y_food) in food_coordinates:\n                if (move[0] != x_food) or (move[1] != y_food):\n                    available_moves.append(move)\n        \n        # 1. Run in circles if you can\n        circle_move = CIRCLE_MOVE[last_move]\n        for move in available_moves:\n            if (move[2] == circle_move) and (is_safe(move, board)) and not (is_closed(move, board)):\n                last_move = move[2]\n                return moves[move[2]]\n        \n        # 2. Any movement safe and not closed\n        for movement in all_movements:\n            print (\"Movement {}\".format(movement))\n            if is_safe (movement, board) and not is_closed(movement, board):\n                print (\"It's safe! Let's move {}!\".format(moves[movement[2]]))\n                last_move = movement[2]\n                return moves[movement[2]] # Move here\n\n        # 3. Any movement half safe and not closed\n        for movement in all_movements:\n            if is_half_safe (movement, board) and not is_closed(movement, board):\n                print (\"Movement {} is half safe, I'm going {}!\".format(movement, moves[movement[2]]))\n                last_move = movement[2]\n                return moves[movement[2]] # Move here\n            \n        # 4. Any movement safe\n        for movement in all_movements:\n            print (\"Movement {}\".format(movement))\n            if is_safe (movement, board):\n                print (\"It's safe! Let's move {}!\".format(moves[movement[2]]))\n                last_move = movement[2]\n                return moves[movement[2]] # Move here\n            \n        # 5. Any movement half safe\n        for movement in all_movements:\n            if is_half_safe (movement, board):\n                print (\"Movement {} is half safe, I'm going {}!\".format(movement, moves[movement[2]]))\n                last_move = movement[2]\n                return moves[movement[2]] # Move here\n            \n    # Finally, if all moves are unsafe, randomly pick one\n    rand_pick = np.random.randint(4) + 1\n    last_move = rand_pick\n    print (\"Yeah whatever, I'm going {}\".format(moves[rand_pick]))\n    return moves[rand_pick]","04a82c2c":"%%writefile risk_averse_greedy.py\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import Observation, Configuration, Action, row_col\nimport numpy as np\nimport random\n\ndef get_nearest_cells(x,y):\n    # returns all cells reachable from the current one\n    result = []\n    for i in (-1,+1):\n        result.append(((x+i+7)%7, y))\n        result.append((x, (y+i+11)%11))\n    return result\n\ndef find_closest_food(table):\n    # returns the first step toward the closest food item\n    new_table = table.copy()\n    \n    \n    # (direction of the step, axis, code)\n    possible_moves = [\n        (1, 0, 1),\n        (-1, 0, 2),\n        (1, 1, 3),\n        (-1, 1, 4)\n    ]\n    \n    # shuffle possible options to add variability\n    random.shuffle(possible_moves)\n    \n    \n    updated = False\n    for roll, axis, code in possible_moves:\n\n        shifted_table = np.roll(table, roll, axis)\n        \n        if (table == -2).any() and (shifted_table[table == -2] == -3).any(): # we have found some food at the first step\n            return code\n        else:\n            mask = np.logical_and(new_table == 0,shifted_table == -3)\n            if mask.sum() > 0:\n                updated = True\n            new_table += code * mask\n        if (table == -2).any() and shifted_table[table == -2][0] > 0: # we have found some food\n            return shifted_table[table == -2][0]\n        \n        # else - update new reachible cells\n        mask = np.logical_and(new_table == 0,shifted_table > 0)\n        if mask.sum() > 0:\n            updated = True\n        new_table += shifted_table * mask\n\n    # if we updated anything - continue reccurison\n    if updated:\n        return find_closest_food(new_table)\n    # if not - return some step\n    else:\n        return table.max()\n\nlast_step = None\n\ndef agent(obs_dict, config_dict):\n    global last_step\n    \n    observation = Observation(obs_dict)\n    configuration = Configuration(config_dict)\n    player_index = observation.index\n    player_goose = observation.geese[player_index]\n    player_head = player_goose[0]\n    player_row, player_column = row_col(player_head, configuration.columns)\n\n\n    table = np.zeros((7,11))\n    # 0 - emply cells\n    # -1 - obstacles\n    # -4 - possible obstacles\n    # -2 - food\n    # -3 - head\n    # 1,2,3,4 - reachable on the current step cell, number is the id of the first step direction\n    \n    legend = {\n        1: 'SOUTH',\n        2: 'NORTH',\n        3: 'EAST',\n        4: 'WEST'\n    }\n    \n    # let's add food to the map\n    for food in observation.food:\n        x,y = row_col(food, configuration.columns)\n        table[x,y] = -2 # food\n        \n    # let's add all cells that are forbidden\n    for i in range(4):\n        opp_goose = observation.geese[i]\n        if len(opp_goose) == 0:\n            continue\n            \n        is_close_to_food = False\n            \n        if i != player_index:\n            x,y = row_col(opp_goose[0], configuration.columns)\n            possible_moves = get_nearest_cells(x,y) # head can move anywhere\n            \n            for x,y in possible_moves:\n                if table[x,y] == -2:\n                    is_close_to_food = True\n            \n                table[x,y] = -4 # possibly forbidden cells\n        \n        # usually we ignore the last tail cell but there are exceptions\n        tail_change = -1\n        if obs_dict['step'] % 40 == 39:\n            tail_change -= 1\n        \n        # we assume that the goose will eat the food\n        if is_close_to_food:\n            tail_change += 1\n        if tail_change >= 0:\n            tail_change = None\n            \n\n        for n in opp_goose[:tail_change]:\n            x,y = row_col(n, configuration.columns)\n            table[x,y] = -1 # forbidden cells\n    \n    # going back is forbidden according to the new rules\n    x,y = row_col(player_head, configuration.columns)\n    if last_step is not None:\n        if last_step == 1:\n            table[(x + 6) % 7,y] = -1\n        elif last_step == 2:\n            table[(x + 8) % 7,y] = -1\n        elif last_step == 3:\n            table[x,(y + 10)%11] = -1\n        elif last_step == 4:\n            table[x,(y + 12)%11] = -1\n        \n    # add head position\n    table[x,y] = -3\n    \n    # the first step toward the nearest food\n    step = int(find_closest_food(table))\n    \n    # if there is not available steps try to go to possibly dangerous cell\n    if step not in [1,2,3,4]:\n        x,y = row_col(player_head, configuration.columns)\n        if table[(x + 8) % 7,y] == -4:\n            step = 1\n        elif table[(x + 6) % 7,y] == -4:\n            step = 2\n        elif table[x,(y + 12)%11] == -4:\n            step = 3\n        elif table[x,(y + 10)%11] == -4:\n            step = 4\n                \n    # else - do a random step and lose\n        else:\n            step = np.random.randint(4) + 1\n    \n    last_step = step\n    return legend[step]","92610b9a":"from kaggle_environments import evaluate\nimport pandas as pd\n\ngoose_lst = [\n    \"my_goose.py\",\n    \"boiler_goose.py\",\n    \"crazy_goose.py\",\n    \"risk_averse_greedy.py\"\n]\n\ngoose_score = {\n    goose_lst[0]: [0, 0, 0, 0],\n    goose_lst[1]: [0, 0, 0, 0],\n    goose_lst[2]: [0, 0, 0, 0],\n    goose_lst[3]: [0, 0, 0, 0]\n}","50fd7361":"outcomes = evaluate(\n    \"hungry_geese\",\n    goose_lst,\n    num_episodes=100,\n)\n\nrank_lst = []\nfor outcome in outcomes:\n    sorted_outcome = sorted(outcome, reverse=True)\n    rank = [sorted_outcome.index(goose_score)+1 for goose_score in outcome]\n    rank_lst.append(rank)\n\nfor rank in rank_lst:\n    for i in range(4):\n        goose_score[list(goose_score.keys())[i]][rank[i]-1] += 1","280f9bc2":"df = pd.DataFrame.from_dict(goose_score, orient='index',\n                            columns=['1st', '2nd', '3rd', '4th'])\ndf","e00c9b30":"Results","ac99d029":"Public gooses from :\n\n[risk averse greedy goose](https:\/\/www.kaggle.com\/ilialar\/risk-averse-greedy-goose),\n\n[boilergoose](https:\/\/www.kaggle.com\/superant\/mighty-boilergoose-with-flood-fill), \n\n[crazy goose](https:\/\/www.kaggle.com\/gabrielmilan\/crazy-goose)","9ec40e41":"Start the battle!","bbb4dd04":"Prepare your gooses!","2c1367d5":"# **A very simple, expandable dojo to train\/evaluate your gooses.**"}}