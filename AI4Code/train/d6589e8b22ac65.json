{"cell_type":{"0c6013e1":"code","ed96e159":"code","359ccdb2":"code","153eafe8":"code","af5a0396":"code","3e613e64":"code","3f09f5bd":"code","248770cb":"code","d4751d71":"code","56c9aaa2":"code","e47cef3e":"code","d874ff79":"code","ab63c037":"code","90fd17a9":"code","5683d607":"code","930d8772":"code","d21ab9f2":"code","8b97e892":"code","cd22c31c":"code","1f7c76da":"code","6e685e8e":"code","41a73899":"code","d724c151":"code","76200569":"code","0a37dec6":"code","f2cb1e41":"code","4e62565b":"markdown","080ecd64":"markdown","bd15a2b1":"markdown","6b251004":"markdown","16477c47":"markdown","715fa156":"markdown"},"source":{"0c6013e1":"# import the necessary libraries\n\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt # plotting \nimport seaborn as sns # visualizations","ed96e159":"# storing or settings to access the API in variables\napi_base_url = 'https:\/\/www.vegguide.org' \nregion_id = 2 # we can retrieve reviews from different regions\nresource_path='\/entry\/{0}\/reviews'.format(region_id) \napi_comments_url = api_base_url+resource_path #actual url that will be used","359ccdb2":"import requests # importing the requests library to perform http requests the api","153eafe8":"# perform a http GET request to the URL specified earlier with custom HTTP headers\nreq = requests.get(api_comments_url, headers={\n    'User-Agent':'SampleApi\/0.01',\n    'Accept':'application\/json'})","af5a0396":"#extract the data from the http response\ndata = req.json()","3e613e64":"data # just viewing the data","3f09f5bd":"# How many rows\/records\nprint('We have {0} rows\/records in the retrieved dataset'.format(len(data))) ","248770cb":"# What does one row\/record look like?\ndata[0] ","d4751d71":"# What keys\/entries\/columns are available in json row?\ndata[0].keys()","56c9aaa2":"data[0]['body'] # a close look at the body key","e47cef3e":"data[0]['body']['text\/vnd.vegguide.org-wikitext']","d874ff79":"# This cell has an error, only kept for discussion purposes\n\n\n#data_rows=[]\n#for index in range(0,len(data)):\n#    row = data[index]\n#    data_rows.append({\n#        'comment':row['body']['text\/vnd.vegguide.org-wikitext'],\n#        'date':row['last_modified_datetime'],\n#        'user_veg_level_num':row['user']['veg_level'],\n#        'user_veg_level_desc':row['user']['veg_level_description'],\n#        'user_name':row['user']['name'],\n#        'rating':row['rating']\n#    })\n#data_rows","ab63c037":"# This cell has an error, only kept for discussion purposes\n\n\n#data_rows=[]\n#for index in range(0,len(data)):\n#    row = data[index]\n#    print(index)\n#    print(row.keys())\n#    data_rows.append({\n#        'comment':row['body']['text\/vnd.vegguide.org-wikitext'],\n#        'date':row['last_modified_datetime'],\n#        'user_veg_level_num':row['user']['veg_level'],\n#        'user_veg_level_desc':row['user']['veg_level_description'],\n#        'user_name':row['user']['name'],\n#        'rating':row['rating']\n#   })\n#data_rows","90fd17a9":"#extracting the data as flat records to be added to a list `data_rows`\ndata_rows=[] # create a list to store all records\nfor index in range(0,len(data)): # iterate for each row in dataset\n    row = data[index] #temporary variable to store row\n    data_rows.append({ # extracting data from json document and creating dictionary and appending\n        'comment':row['body']['text\/vnd.vegguide.org-wikitext'] if 'body' in row else '',\n        'date':row['last_modified_datetime'] if 'last_modified_datetime' in row else None,\n        'user_veg_level_num':row['user']['veg_level'],\n        'user_veg_level_desc':row['user']['veg_level_description'],\n        'user_name':row['user']['name'],\n        'rating':row['rating']\n    })\ndata_rows #previewing results","5683d607":"data2 = pd.DataFrame(data_rows) # transform results as dataframe\ndata2.head() #preview dataframe","930d8772":"#utiliy method to draw a wordcloud from list\/series\n#modified\ndef wordcloud_draw(data, color = 'black'):\n    \"\"\"\n       Draws a wordcloud\n       \n       params:\n           data : list\/series - set of sentences to include\n        \n       requires ```wordcloud``` package\n    \"\"\"\n    from wordcloud import WordCloud, STOPWORDS\n    words = ' '.join(data)\n    cleaned_word = \" \".join([word for word in words.split()\n                            if 'http' not in word\n                                and not word.startswith('@')\n                                and not word.startswith('#')\n                                and word != 'RT'\n                            ])\n    wordcloud = WordCloud(stopwords=STOPWORDS,\n                      background_color=color,\n                      width=2500,\n                      height=2000\n                     ).generate(cleaned_word)\n    plt.figure(1,figsize=(13, 13))\n    plt.imshow(wordcloud)\n    plt.axis('off')\n    plt.show()","d21ab9f2":"#visualize what everyone is saying\nwordcloud_draw(data2['comment'])","8b97e892":"# import library to assist with sentiment analysis\n# Currently using https:\/\/github.com\/cjhutto\/vaderSentiment\n# NB. There are implications and factors to consider, we will discuss\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer","cd22c31c":"# create a SentimentIntensityAnalyzer\nanalyzer = SentimentIntensityAnalyzer()","1f7c76da":"# let us extract ONE (1) senetence\ntest_sentence = data2['comment'][0]\n# analyze that sentence\nsentiment_result = analyzer.polarity_scores(test_sentence)\n# it returns a python dictionary of values\nsentiment_result","6e685e8e":"# we could analyze each row in our data set using the apply method\ndata2['comment'].apply(analyzer.polarity_scores)","41a73899":"# let us define a function to analyze one sentence and return the compound value\ndef get_how_positive(sentence):\n    return analyzer.polarity_scores(sentence)['compound']","d724c151":"# testing the application of the method\ndata2['comment'].apply(get_how_positive)","76200569":"# creating a new column in our data set to store the sentiment value\ndata2['sentiment'] = data2['comment'].apply(get_how_positive)\n# previewing updates\ndata2.head(10)","0a37dec6":"# Deterimining the correlation between the sentiment values and existing ratings\nprint(\"Correlation\")\ndata2[['rating','sentiment']].corr()","f2cb1e41":"# Visualizing the correlation on a heatmap\nsns.heatmap(data2[['rating','sentiment']].corr())","4e62565b":"## Sentiment Analysis\n\nLet us perform [sentiment analysis](https:\/\/en.wikipedia.org\/wiki\/Sentiment_analysis) on the text. What is the relationship between the ratings and the sentiments derived.? ","080ecd64":"### How to use this implementation?","bd15a2b1":"## Questions?","6b251004":"## Who doesn't love food? : Consuming APIs and utilizing Sentiment Analysis\n\n@author [gggordon](github.com\/gggordon)\n\n@created 31.10.2018\n\nThe following notebook is an introduction tutorial presented as part of a wider course Data Warehousing and Data Mining. While the notebook does provide sample constructs and resources. The author only intends to presents the concepts and does not  indicate ownership of the resources presented. \n\nNB. This notebook is accompanied by a discussion\n\n### Topics:\n    - Restful APIs\n    - Wordclouds\n    - Correlation\n    - Sentiment Analysis","16477c47":"### Aim: To retrieve comments from a food related API (restful) and perform sentiment analysis on the data set","715fa156":"## The Food API\n\nWe will be consuming\/retrieving data from a [restful](https:\/\/en.wikipedia.org\/wiki\/Representational_state_transfer) [api](https:\/\/en.wikipedia.org\/wiki\/Application_programming_interface) provided by [VegGuide.org](https:\/\/www.vegguide.org). \n\nYou may learn more about the API and how to access it here :  https:\/\/www.vegguide.org\/site\/api-docs\n\nYou may test and explore the api here : https:\/\/www.vegguide.org\/api-explorer\/"}}