{"cell_type":{"0a0fb7fe":"code","4a34ed66":"code","6063aa1e":"code","0fcdaf36":"code","6ea0b584":"code","e5f9912d":"code","2ff05a50":"code","5f841b5e":"code","d8006fd1":"code","7f0ca616":"code","bd422a55":"code","f35826e6":"code","0f540ac3":"code","ccc3dc2f":"code","38dbcb42":"code","1f69a008":"code","8e8e40e9":"code","acb1b379":"code","2480c6df":"code","d0b136b5":"code","6e56220a":"code","b8ca06ea":"markdown","49a6f29e":"markdown","b8902465":"markdown","5b2e43b2":"markdown","3cd54a02":"markdown","11198e4c":"markdown","c03caf42":"markdown","7a2a4834":"markdown","fd24fd24":"markdown"},"source":{"0a0fb7fe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom collections import Counter\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn import svm\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.tree import DecisionTreeClassifier\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn.metrics import classification_report,accuracy_score\nfrom matplotlib import pyplot\nfrom xgboost import plot_importance\nimport warnings\nwarnings.filterwarnings(action=\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4a34ed66":"df = pd.read_csv(\"\/kaggle\/input\/company-bankruptcy-prediction\/data.csv\")\ndf.head()","6063aa1e":"#Shape of the dataset\ndf.shape","0fcdaf36":"#Statistical summary of data\ndf.describe()","6ea0b584":"#feature information\ndf.info()","e5f9912d":"#Checking for missing values\nc=0\nfor col in df.columns:\n    null_values_count = df[col].isnull().sum()\n    if null_values_count > 0:\n        c=c+1\n        print(col,null_values_count)\n\nif c==0:\n    print(\"No missing values found in the dataset\")","2ff05a50":"X=df.drop(['Bankrupt?'],axis=1)\ny=df['Bankrupt?']\nvar_thres = VarianceThreshold(3.0)\nvar_thres.fit(X)","5f841b5e":"required_features = [col for col in X.columns if col in X.columns[var_thres.get_support()]]\nprint(required_features)","d8006fd1":"len(required_features)","7f0ca616":"df_v1 = df[required_features]\ndf_v1.head()","bd422a55":"#Checking for multicollinearity\ndf_v1_corr = df_v1.corr()\ndf_v1_corr.style.background_gradient(cmap='coolwarm')","f35826e6":"#Distribution of features\ndf_v1.hist(bins=25,figsize = (30,30))","0f540ac3":"df.groupby('Bankrupt?')['Bankrupt?'].count()","ccc3dc2f":"X_new = df[required_features] #Taking the required independent variables\ny_new = df['Bankrupt?'] #Dependent variable\n\n#Initializing SMOTE\nsm = SMOTE(random_state=42)\nX_smote,y_smote = sm.fit_sample(X_new,y_new)","38dbcb42":"count_class = Counter(y_smote)\nprint(count_class)","1f69a008":"#Splitting training and testing data\nX_train, X_test, y_train, y_test = train_test_split(X_smote,y_smote,test_size=0.3, random_state=42)","8e8e40e9":"models = {\n    'SVM':{'model':svm.SVC(gamma='auto',C=5,kernel='rbf'),'params': {'C': [1,5,10]}},\n    'xgboost':{'model':xgb.XGBClassifier(),'params': {'max_depth':[4,6,8]}},\n    'random_forest': {'model': RandomForestClassifier(),'params': {'n_estimators': [1,5]}},\n    'logistic_regression' : {'model': LogisticRegression(solver='liblinear',multi_class='auto'),'params': {'C': [1,5]}},\n    'naive_bayes_gaussian': {'model': GaussianNB(),'params': {}},\n    'decision_tree': {'model': DecisionTreeClassifier(),'params': {'criterion': ['gini','entropy']}}\n}","acb1b379":"scores = []\n\nfor model_name, mp in models.items():\n    clf =  GridSearchCV(mp['model'],mp['params'] ,cv= 2, return_train_score=False)\n    clf.fit(X_smote, y_smote)\n    scores.append({\n        'model': model_name,\n        'best_score': clf.best_score_,\n        'best_params': clf.best_params_\n    })\n    \ndf_model = pd.DataFrame(scores,columns=['model','best_score','best_params'])\ndf_model","2480c6df":"#Xgboost classifier\nxgb_model = xgb.XGBClassifier()\nxgb_model.fit(X_train,y_train)\nypred_xgb = xgb_model.predict(X_test)\nprint(classification_report(y_test,ypred_xgb))","d0b136b5":"print(accuracy_score(y_test,ypred_xgb))","6e56220a":"#Plotting features importance\nplot_importance(xgb_model)\npyplot.show()","b8ca06ea":"# Company Bankruptcy prediction","49a6f29e":"Observation:\n* The dataset contains unbalanced classes. This issue can be resolved by using SMOTE technique","b8902465":"# **Data Profiling**","5b2e43b2":"# SMOTE technique","3cd54a02":"Observation:\n* 24 features are selected. Features having variance of less than 3.0 has been dropped","11198e4c":"# Model selection and building","c03caf42":"# Feature Selection","7a2a4834":"**Observation:**\n* Xgboost classifier performs well than other models","fd24fd24":"Observation:\n* All the features are numeric. No need of any encoding techniques"}}