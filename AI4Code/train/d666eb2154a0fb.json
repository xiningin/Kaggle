{"cell_type":{"6d2b6886":"code","342419be":"code","ebe33bf7":"code","b200daea":"code","6499714b":"code","dbf2f566":"code","2327d900":"code","9a75ae62":"code","1c7d9427":"code","fdfb053a":"code","f68cb043":"code","7f2e78e2":"code","7928f53c":"code","bb72400d":"code","f562a6cb":"code","67a61c03":"code","7759653d":"code","b0748628":"markdown","ac655445":"markdown","f2fc31dd":"markdown","778b9e38":"markdown"},"source":{"6d2b6886":"import time\nimport math\nimport numpy as np\nimport pandas as pd\nimport scipy as sc\nfrom scipy.optimize import minimize \nfrom scipy.optimize import Bounds","342419be":"data = pd.read_csv(\"..\/input\/dmia-sport-2019-fall-intro\/train.csv\", delimiter=',')","ebe33bf7":"data_test = pd.read_csv(\"..\/input\/dmia-sport-2019-fall-intro\/Xtest.csv\", delimiter=',')","b200daea":"size_test = data_test.shape[0]\nsize_test","6499714b":"data.head()","dbf2f566":"arr_a = np.array(list(map(float, data['Times'].values)))","2327d900":"arr_a[0:5]","9a75ae62":"arr_len = len(arr_a)\narr_len","1c7d9427":"def f_rmsle(arr_p, arr_a, arr_len):\n    \"\"\"\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \n    \"\"\"\n    lst = [(math.log(p+1)-math.log(a+1))**2 for p,a in zip(arr_p, arr_a)]\n    lst_sum = sum(lst)\n    res = math.sqrt(lst_sum \/ arr_len)\n    return res","fdfb053a":"def f_minimize(arr_const):\n    \"\"\"\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0432 minimize\n    \"\"\"\n    const = arr_const[0]\n    arr_p = np.full_like(arr_a, const)\n    assert len(arr_p) == len(arr_a)\n    return f_rmsle(arr_p, arr_a, arr_len)","f68cb043":"init = np.array([1.3])\ninit","7f2e78e2":"bnds = Bounds(np.array([0.5]), np.array([2.3]), keep_feasible=True)\nbnds","7928f53c":"%%time\narr_const_minimize = minimize(f_minimize, init, bounds=bnds)","bb72400d":"arr_const_minimize","f562a6cb":"opt_const = arr_const_minimize.x[0]\nopt_const","67a61c03":"def save_res_const(cnst, fn):\n    y_pred = np.array([cnst]*size_test)\n    df_res = data_test[['Id']]\n    df_res['Times'] = y_pred\n    df_res.to_csv('data\/res\/' + fn + '.csv', sep=',', index=None)","7759653d":"save_res_const(opt_const, 'const1')","b0748628":"# \u0427\u0442\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","ac655445":"# \u0420\u0430\u0441\u0447\u0435\u0442 \u043f\u043e\u0440\u043e\u0433\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438\n\n$$ rmsle = \\sqrt{ \\frac{1}{n} \\sum_{i=1}^{n} (log(p_i + 1) - log(a_i + 1)) ^ 2  }  $$\n\n$p_i$ - predicted\n\n$a_i$ - actual","f2fc31dd":"# \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432","778b9e38":"# Score = 0.41231"}}