{"cell_type":{"beb0258b":"code","c003e543":"code","1ff57801":"code","bc2bf26c":"code","cfebf666":"code","40c77a7e":"code","bdf4da20":"code","a524affa":"code","fa335be1":"code","053a7c39":"code","c9e860ba":"code","78f4506c":"code","022914d5":"code","96fe2c03":"code","33fcc2b9":"code","7d4bd75e":"code","d634e3fc":"code","a4372b98":"code","973f57bb":"code","ad0e220b":"code","71d57aa8":"code","5f57a4c6":"code","f6161092":"code","baf391c8":"code","342ba7d4":"code","282ae8b2":"code","e99aaea4":"code","ead683b3":"code","7d31d3f0":"code","d334c506":"markdown","536643bf":"markdown"},"source":{"beb0258b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c003e543":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","1ff57801":"for dirname, _, filenames in os.walk('.'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","bc2bf26c":"import re\nimport string\n# Thanks to https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\nabbreviations = {\n    \"$\" : \" dollar \",\n    \"\u20ac\" : \" euro \",\n    \"4ao\" : \"for adults only\",\n    \"a.m\" : \"before midday\",\n    \"a3\" : \"anytime anywhere anyplace\",\n    \"aamof\" : \"as a matter of fact\",\n    \"acct\" : \"account\",\n    \"adih\" : \"another day in hell\",\n    \"afaic\" : \"as far as i am concerned\",\n    \"afaict\" : \"as far as i can tell\",\n    \"afaik\" : \"as far as i know\",\n    \"afair\" : \"as far as i remember\",\n    \"afk\" : \"away from keyboard\",\n    \"app\" : \"application\",\n    \"approx\" : \"approximately\",\n    \"apps\" : \"applications\",\n    \"asap\" : \"as soon as possible\",\n    \"asl\" : \"age, sex, location\",\n    \"atk\" : \"at the keyboard\",\n    \"ave.\" : \"avenue\",\n    \"aymm\" : \"are you my mother\",\n    \"ayor\" : \"at your own risk\", \n    \"b&b\" : \"bed and breakfast\",\n    \"b+b\" : \"bed and breakfast\",\n    \"b.c\" : \"before christ\",\n    \"b2b\" : \"business to business\",\n    \"b2c\" : \"business to customer\",\n    \"b4\" : \"before\",\n    \"b4n\" : \"bye for now\",\n    \"b@u\" : \"back at you\",\n    \"bae\" : \"before anyone else\",\n    \"bak\" : \"back at keyboard\",\n    \"bbbg\" : \"bye bye be good\",\n    \"bbc\" : \"british broadcasting corporation\",\n    \"bbias\" : \"be back in a second\",\n    \"bbl\" : \"be back later\",\n    \"bbs\" : \"be back soon\",\n    \"be4\" : \"before\",\n    \"bfn\" : \"bye for now\",\n    \"blvd\" : \"boulevard\",\n    \"bout\" : \"about\",\n    \"brb\" : \"be right back\",\n    \"bros\" : \"brothers\",\n    \"brt\" : \"be right there\",\n    \"bsaaw\" : \"big smile and a wink\",\n    \"btw\" : \"by the way\",\n    \"bwl\" : \"bursting with laughter\",\n    \"c\/o\" : \"care of\",\n    \"cet\" : \"central european time\",\n    \"cf\" : \"compare\",\n    \"cia\" : \"central intelligence agency\",\n    \"csl\" : \"can not stop laughing\",\n    \"cu\" : \"see you\",\n    \"cul8r\" : \"see you later\",\n    \"cv\" : \"curriculum vitae\",\n    \"cwot\" : \"complete waste of time\",\n    \"cya\" : \"see you\",\n    \"cyt\" : \"see you tomorrow\",\n    \"dae\" : \"does anyone else\",\n    \"dbmib\" : \"do not bother me i am busy\",\n    \"diy\" : \"do it yourself\",\n    \"dm\" : \"direct message\",\n    \"dwh\" : \"during work hours\",\n    \"e123\" : \"easy as one two three\",\n    \"eet\" : \"eastern european time\",\n    \"eg\" : \"example\",\n    \"embm\" : \"early morning business meeting\",\n    \"encl\" : \"enclosed\",\n    \"encl.\" : \"enclosed\",\n    \"etc\" : \"and so on\",\n    \"faq\" : \"frequently asked questions\",\n    \"fawc\" : \"for anyone who cares\",\n    \"fb\" : \"facebook\",\n    \"fc\" : \"fingers crossed\",\n    \"fig\" : \"figure\",\n    \"fimh\" : \"forever in my heart\", \n    \"ft.\" : \"feet\",\n    \"ft\" : \"featuring\",\n    \"ftl\" : \"for the loss\",\n    \"ftw\" : \"for the win\",\n    \"fwiw\" : \"for what it is worth\",\n    \"fyi\" : \"for your information\",\n    \"g9\" : \"genius\",\n    \"gahoy\" : \"get a hold of yourself\",\n    \"gal\" : \"get a life\",\n    \"gcse\" : \"general certificate of secondary education\",\n    \"gfn\" : \"gone for now\",\n    \"gg\" : \"good game\",\n    \"gl\" : \"good luck\",\n    \"glhf\" : \"good luck have fun\",\n    \"gmt\" : \"greenwich mean time\",\n    \"gmta\" : \"great minds think alike\",\n    \"gn\" : \"good night\",\n    \"g.o.a.t\" : \"greatest of all time\",\n    \"goat\" : \"greatest of all time\",\n    \"goi\" : \"get over it\",\n    \"gps\" : \"global positioning system\",\n    \"gr8\" : \"great\",\n    \"gratz\" : \"congratulations\",\n    \"gyal\" : \"girl\",\n    \"h&c\" : \"hot and cold\",\n    \"hp\" : \"horsepower\",\n    \"hr\" : \"hour\",\n    \"hrh\" : \"his royal highness\",\n    \"ht\" : \"height\",\n    \"ibrb\" : \"i will be right back\",\n    \"ic\" : \"i see\",\n    \"icq\" : \"i seek you\",\n    \"icymi\" : \"in case you missed it\",\n    \"idc\" : \"i do not care\",\n    \"idgadf\" : \"i do not give a damn fuck\",\n    \"idgaf\" : \"i do not give a fuck\",\n    \"idk\" : \"i do not know\",\n    \"ie\" : \"that is\",\n    \"i.e\" : \"that is\",\n    \"ifyp\" : \"i feel your pain\",\n    \"IG\" : \"instagram\",\n    \"iirc\" : \"if i remember correctly\",\n    \"ilu\" : \"i love you\",\n    \"ily\" : \"i love you\",\n    \"imho\" : \"in my humble opinion\",\n    \"imo\" : \"in my opinion\",\n    \"imu\" : \"i miss you\",\n    \"iow\" : \"in other words\",\n    \"irl\" : \"in real life\",\n    \"j4f\" : \"just for fun\",\n    \"jic\" : \"just in case\",\n    \"jk\" : \"just kidding\",\n    \"jsyk\" : \"just so you know\",\n    \"l8r\" : \"later\",\n    \"lb\" : \"pound\",\n    \"lbs\" : \"pounds\",\n    \"ldr\" : \"long distance relationship\",\n    \"lmao\" : \"laugh my ass off\",\n    \"lmfao\" : \"laugh my fucking ass off\",\n    \"lol\" : \"laughing out loud\",\n    \"ltd\" : \"limited\",\n    \"ltns\" : \"long time no see\",\n    \"m8\" : \"mate\",\n    \"mf\" : \"motherfucker\",\n    \"mfs\" : \"motherfuckers\",\n    \"mfw\" : \"my face when\",\n    \"mofo\" : \"motherfucker\",\n    \"mph\" : \"miles per hour\",\n    \"mr\" : \"mister\",\n    \"mrw\" : \"my reaction when\",\n    \"ms\" : \"miss\",\n    \"mte\" : \"my thoughts exactly\",\n    \"nagi\" : \"not a good idea\",\n    \"nbc\" : \"national broadcasting company\",\n    \"nbd\" : \"not big deal\",\n    \"nfs\" : \"not for sale\",\n    \"ngl\" : \"not going to lie\",\n    \"nhs\" : \"national health service\",\n    \"nrn\" : \"no reply necessary\",\n    \"nsfl\" : \"not safe for life\",\n    \"nsfw\" : \"not safe for work\",\n    \"nth\" : \"nice to have\",\n    \"nvr\" : \"never\",\n    \"nyc\" : \"new york city\",\n    \"oc\" : \"original content\",\n    \"og\" : \"original\",\n    \"ohp\" : \"overhead projector\",\n    \"oic\" : \"oh i see\",\n    \"omdb\" : \"over my dead body\",\n    \"omg\" : \"oh my god\",\n    \"omw\" : \"on my way\",\n    \"p.a\" : \"per annum\",\n    \"p.m\" : \"after midday\",\n    \"pm\" : \"prime minister\",\n    \"poc\" : \"people of color\",\n    \"pov\" : \"point of view\",\n    \"pp\" : \"pages\",\n    \"ppl\" : \"people\",\n    \"prw\" : \"parents are watching\",\n    \"ps\" : \"postscript\",\n    \"pt\" : \"point\",\n    \"ptb\" : \"please text back\",\n    \"pto\" : \"please turn over\",\n    \"qpsa\" : \"what happens\", #\"que pasa\",\n    \"ratchet\" : \"rude\",\n    \"rbtl\" : \"read between the lines\",\n    \"rlrt\" : \"real life retweet\", \n    \"rofl\" : \"rolling on the floor laughing\",\n    \"roflol\" : \"rolling on the floor laughing out loud\",\n    \"rotflmao\" : \"rolling on the floor laughing my ass off\",\n    \"rt\" : \"retweet\",\n    \"ruok\" : \"are you ok\",\n    \"sfw\" : \"safe for work\",\n    \"sk8\" : \"skate\",\n    \"smh\" : \"shake my head\",\n    \"sq\" : \"square\",\n    \"srsly\" : \"seriously\", \n    \"ssdd\" : \"same stuff different day\",\n    \"tbh\" : \"to be honest\",\n    \"tbs\" : \"tablespooful\",\n    \"tbsp\" : \"tablespooful\",\n    \"tfw\" : \"that feeling when\",\n    \"thks\" : \"thank you\",\n    \"tho\" : \"though\",\n    \"thx\" : \"thank you\",\n    \"tia\" : \"thanks in advance\",\n    \"til\" : \"today i learned\",\n    \"tl;dr\" : \"too long i did not read\",\n    \"tldr\" : \"too long i did not read\",\n    \"tmb\" : \"tweet me back\",\n    \"tntl\" : \"trying not to laugh\",\n    \"ttyl\" : \"talk to you later\",\n    \"u\" : \"you\",\n    \"u2\" : \"you too\",\n    \"u4e\" : \"yours for ever\",\n    \"utc\" : \"coordinated universal time\",\n    \"w\/\" : \"with\",\n    \"w\/o\" : \"without\",\n    \"w8\" : \"wait\",\n    \"wassup\" : \"what is up\",\n    \"wb\" : \"welcome back\",\n    \"wtf\" : \"what the fuck\",\n    \"wtg\" : \"way to go\",\n    \"wtpa\" : \"where the party at\",\n    \"wuf\" : \"where are you from\",\n    \"wuzup\" : \"what is up\",\n    \"wywh\" : \"wish you were here\",\n    \"yd\" : \"yard\",\n    \"ygtr\" : \"you got that right\",\n    \"ynk\" : \"you never know\",\n    \"zzz\" : \"sleeping bored and tired\"\n}\n\ndef convert_abbrev(word):\n    return abbreviations[word.lower()] if word.lower() in abbreviations.keys() else word\n\n# Thanks to https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\nfrom nltk.tokenize import word_tokenize\ndef convert_abbrev_in_text(text):\n    tokens = word_tokenize(text)\n    tokens = [convert_abbrev(word) for word in tokens]\n    text = ' '.join(tokens)\n    return text\n\ndef remove_URL(text):\n    url = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    return url.sub(r'',text)\n\n# Reference : https:\/\/gist.github.com\/slowkow\/7a7f61f495e3dbb7e3d767f97bd7304b\ndef remove_emoji(text):\n    emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    return emoji_pattern.sub(r'', text)\n\ndef remove_html(text):\n    html=re.compile(r'<.*?>')\n    return html.sub(r'',text)\ndef remove_punct(text):\n    table=str.maketrans('','',string.punctuation)\n    return text.translate(table)\n","cfebf666":"# version 15\nconvert_abbrev_flag = False\nmodel_type = 'default'\nDropout_num = 0\nlearning_rate = 1e-5\nmax_len = 160\nlayers = [] #not including final layer\nactivation = 'relu' #for the non-final layers\nremove_emoji_flag = False\nremove_URL_flag = False\nremove_html_flag = False\nremove_punct_flag = False\nepochs=3\nbatch_size=16\nvalidation_split=0.2\nremove_rows_based_on_cv = True #remove rows based on cross val predictions from train set\nremove_row_cutoffs = (0.4,0.6) #if cutoffs for class 0 and 1\nmodel_name = 'bert_default_dropout_{}_shape_{}'.format(Dropout_num,'_'.join([str(i) for i in layers]))","40c77a7e":"# # version 14\n# convert_abbrev_flag = False\n# model_type = 'default'\n# Dropout_num = 0\n# learning_rate = 1e-5\n# max_len = 160\n# layers = [] #not including final layer\n# activation = 'relu' #for the non-final layers\n# remove_emoji_flag = False\n# remove_URL_flag = False\n# remove_html_flag = False\n# remove_punct_flag = False\n# epochs=3\n# batch_size=16\n# validation_split=0.2\n# remove_rows_based_on_cv = True #remove rows based on cross val predictions from train set\n# remove_row_cutoffs = (0.5,0.5) #if cutoffs for class 0 and 1\n# model_name = 'bert_default_dropout_{}_shape_{}'.format(Dropout_num,'_'.join([str(i) for i in layers]))","bdf4da20":"# # version 13\n# convert_abbrev_flag = False\n# model_type = 'default'\n# Dropout_num = 0\n# learning_rate = 1e-5\n# max_len = 160\n# layers = [] #not including final layer\n# activation = 'relu' #for the non-final layers\n# remove_emoji_flag = False\n# remove_URL_flag = False\n# remove_html_flag = False\n# remove_punct_flag = True\n# epochs=3\n# batch_size=16\n# validation_split=0.2\n# remove_rows_based_on_cv = True #remove rows based on cross val predictions from train set\n# model_name = 'bert_default_dropout_{}_shape_{}'.format(Dropout_num,'_'.join([str(i) for i in layers]))","a524affa":"# # version 12 - best till now\n# convert_abbrev_flag = False\n# model_type = 'default'\n# Dropout_num = 0\n# learning_rate = 1e-5\n# max_len = 160\n# layers = [] #not including final layer\n# activation = 'relu' #for the non-final layers\n# remove_emoji_flag = False\n# remove_URL_flag = False\n# remove_html_flag = False\n# remove_punct_flag = False\n# epochs=3\n# batch_size=16\n# validation_split=0.2\n# remove_rows_based_on_cv = True #remove rows based on cross val predictions from train set\n# model_name = 'bert_default_dropout_{}_shape_{}'.format(Dropout_num,'_'.join([str(i) for i in layers]))","fa335be1":"# #version 10\n# convert_abbrev_flag = False\n# model_type = 'default'\n# Dropout_num = 0\n# learning_rate = 1e-6\n# max_len = 200\n# layers = [] #not including final layer\n# activation = 'relu' #for the non-final layers\n# remove_emoji_flag = False\n# remove_URL_flag = False\n# remove_html_flag = False\n# remove_punct_flag = False\n# epochs=3\n# batch_size=16\n# validation_split=0.2\n# model_name = 'bert_default_dropout_{}_shape_{}'.format(Dropout_num,'_'.join([str(i) for i in layers]))","053a7c39":"# #version 8\n# convert_abbrev_flag = False\n# model_type = 'default'\n# Dropout_num = 0\n# learning_rate = 1e-5\n# max_len = 200\n# layers = [] #not including final layer\n# activation = 'relu' #for the non-final layers\n# remove_emoji_flag = True\n# remove_URL_flag = True\n# remove_html_flag = True\n# remove_punct_flag = True\n# model_name = 'bert_default_preprocessed_dropout_{}_shape_{}'.format(Dropout_num,'_'.join([str(i) for i in layers]))","c9e860ba":"# #version 7\n# convert_abbrev_flag = False\n# model_type = 'default'\n# Dropout_num = 0\n# learning_rate = 1e-5\n# max_len = 200\n# layers = [30] #not including final layer\n# activation = 'relu' #for the non-final layers\n# model_name = 'model_bert_default_dropout_{}_shape_{}'.format(Dropout_num,'_'.join([str(i) for i in layers]))","78f4506c":"# #version 6\n# convert_abbrev = False\n# model_type = 'dropout'\n# Dropout_num = 0.1\n# learning_rate = 1e-5\n# max_len = 200\n# layers = [30] #not including final layer\n# activation = 'relu' #for the non-final layers\n# model_name = 'model_bert_dropout_{}_shape_{}'.format(Dropout_num,'_'.join([str(i) for i in layers]))","022914d5":"# version 5\n# convert_abbrev = False\n# model_type = 'Dropout'\n# Dropout_num = 0\n# learning_rate = 1e-5\n# max_len = 200\n# model_name = 'model_bert_GlobalAveragePooling1D'\n# layers = [30] #not including final layer\n# activation = 'relu' #for the non-final layers","96fe2c03":"train = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")","33fcc2b9":"import pickle\nwith open('..\/input\/bert-prediction\/predictions.pkl','rb') as f:\n    predictions = pickle.load(f)","7d4bd75e":"train['infold_pred'] = predictions['infold_pred']\ntrain['outfold_pred'] = predictions['outfold_pred']","d634e3fc":"\n\nif convert_abbrev_flag:\n    train[\"text\"] = train[\"text\"].apply(lambda x: convert_abbrev_in_text(x))\n    test[\"text\"] = test[\"text\"].apply(lambda x: convert_abbrev_in_text(x))\n    \nif remove_emoji_flag:\n    train[\"text\"] = train[\"text\"].apply(lambda x: remove_emoji(x))\n    test[\"text\"] = test[\"text\"].apply(lambda x: remove_emoji(x))\n\nif remove_URL_flag:\n    train['text'] = train['text'].apply(remove_URL)\n    test['text'] = test['text'].apply(remove_URL)\nif remove_html_flag:\n    train['text'] = train['text'].apply(remove_html)\n    test['text'] = test['text'].apply(remove_html)\nif remove_punct_flag:\n    train['text'] = train['text'].apply(remove_punct)\n    test['text'] = test['text'].apply(remove_punct)","a4372b98":"print(train.shape)\nif remove_rows_based_on_cv:\n    train = train[((train['target']==0)&(train['outfold_pred']<remove_row_cutoffs[0]))|((train['target']==1)&(train['outfold_pred']>remove_row_cutoffs[1]))]\nprint(train.shape)","973f57bb":"# We will use the official tokenization script created by the Google team\n!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","ad0e220b":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input,Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub\n\nimport tokenization","71d57aa8":"def bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)\n\n# Thanks to https:\/\/www.kaggle.com\/xhlulu\/disaster-nlp-keras-bert-using-tfhub\ndef build_model(bert_layer, max_len=512):\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    \n    if model_type=='default':\n        # Without Dropout\n        for layer in layers:\n            clf_output = Dense(layer, activation=activation)(clf_output)\n        out = Dense(1, activation='sigmoid')(clf_output)\n    elif model_type=='dropout':\n        # With Dropout(Dropout_num), Dropout_num > 0\n        for layer in layers:\n            x = Dropout(Dropout_num)(clf_output)\n            clf_output = Dense(layer, activation=activation)(x)\n        x = Dropout(Dropout_num)(clf_output)\n        out = Dense(1, activation='sigmoid')(x)\n    elif model_type=='GlobalAveragePooling1D':\n        for layer in layers:\n            if Dropout_num>0:\n                clf_output = Dropout(Dropout_num)(clf_output)\n            clf_output = Dense(layer, activation=activation)(clf_output)\n        x = tf.keras.layers.GlobalAveragePooling1D()(sequence_output)\n        out = Dense(1, activation='sigmoid')(x)\n\n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(Adam(lr=learning_rate), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model\n","5f57a4c6":"%%time\nmodule_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\"#\/2 is the updated version. need to try with that\n# module_url = \"https:\/\/tfhub.dev\/tensorflow\/albert_en_base\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","f6161092":"vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)","baf391c8":"train_input = bert_encode(train.text.values, tokenizer, max_len=max_len)\ntest_input = bert_encode(test.text.values, tokenizer, max_len=max_len)\ntrain_labels = train.target.values\n\nprint(train_input[0].shape,test_input[0].shape)","342ba7d4":"model = build_model(bert_layer, max_len=max_len)\nmodel.summary()","282ae8b2":"%%time\ncheckpoint = ModelCheckpoint('{}.h5'.format(model_name), monitor='val_loss', save_best_only=True)\n\ntrain_history = model.fit(\n    train_input, train_labels,\n    validation_split=0.2,\n    epochs=epochs,\n    callbacks=[checkpoint],\n    batch_size=batch_size,\n)","e99aaea4":"model.load_weights('{}.h5'.format(model_name))\ntest_pred = model.predict(test_input)","ead683b3":"submission['target'] = test_pred.round().astype(int)\nsubmission.to_csv('{}.csv'.format(model_name), index=False)","7d31d3f0":"os.remove('{}.h5'.format(model_name))","d334c506":"# Load and Preprocess\n\n- Load CSV files containing training data\n- Do cleaning if necessary","536643bf":"# BERT Model\n\n- Load BERT from the Tensorflow Hub\n- Load CSV files containing training data\n- Load tokenizer from the bert layer\n- Encode the text into tokens, masks, and segment flags\n- build model"}}