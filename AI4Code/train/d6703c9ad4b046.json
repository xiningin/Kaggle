{"cell_type":{"bd677698":"code","1dfb223c":"code","3cac3051":"code","748d39dc":"code","64bf14d8":"code","a9dd35c0":"code","2fa0a854":"code","486aa420":"code","9c5a4b5b":"code","c59e2b85":"code","effcc0f3":"code","2b5ed0ba":"code","d6971408":"code","ff3bdc1c":"code","7aef9628":"code","39300d42":"code","849d181a":"code","7073053e":"code","138b8977":"markdown","f9b0f82b":"markdown","7f113d7c":"markdown","b10e950c":"markdown","e2681873":"markdown","ea328b78":"markdown","f882025a":"markdown","ee1d786d":"markdown","fe995482":"markdown"},"source":{"bd677698":"import matplotlib.pyplot as plt # plotting\nfrom PIL import Image\nimport matplotlib.patches as patches\nimport matplotlib.image as IMG\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport scipy.io","1dfb223c":"def mat_to_boundbox(filename):\n    input = scipy.io.loadmat(filename)['boxes']\n    box_numbers = input.shape[-1]\n    bx1_e1 = input[0][0][0][0][0][0]\n    bx1_e2 = input[0][0][0][0][1][0]\n    bx1_e3 = input[0][0][0][0][2][0]\n    bx1_e4 = input[0][0][0][0][3][0]\n    bx1 = np.array([bx1_e1,bx1_e2,bx1_e3,bx1_e4])\n    output = np.array(bx1)\n    output = np.flip(output,1)\n    output = np.reshape(output,(1,4,2))\n    if box_numbers == 2:\n        bx2_e1 = input[0][1][0][0][0][0]\n        bx2_e2 = input[0][1][0][0][1][0]\n        bx2_e3 = input[0][1][0][0][2][0]\n        bx2_e4 = input[0][1][0][0][3][0]\n        bx2 = [bx2_e1,bx2_e2,bx2_e3,bx2_e4]\n        output = np.array([bx1,bx2])\n        output = np.flip(output,2)\n   \n    return output\n    ","3cac3051":"def drawBoundbox(image,coordinate):\n    plt.figure()\n    plt.imshow(img)\n    if coordinate.shape[0] >= 1:\n        plt.scatter(x=[coordinate[0][0][0],coordinate[0][1][0],coordinate[0][2][0],coordinate[0][3][0]], y=[coordinate[0][0][1],coordinate[0][1][1],coordinate[0][2][1],coordinate[0][3][1]], c='r', s=20)\n    if coordinate.shape[0] == 2:\n        plt.scatter(x=[coordinate[1][0][0],coordinate[1][1][0],coordinate[1][2][0],coordinate[1][3][0]], y=[coordinate[1][0][1],coordinate[1][1][1],coordinate[1][2][1],coordinate[1][3][1]], c='g', s=20)\n    plt.show()","748d39dc":"def resize_edit_box(imagefile,coordinatefile):\n    img = Image.open(imagefile)\n    img1 = img.resize((512,512),0)\n    img_shape = np.array(img).shape\n    img = np.array(img1)\n    \n    x_scale = 512 \/ img_shape[1]\n    y_scale = 512\/ img_shape[0]\n    \n    coordinate = mat_to_boundbox(coordinatefile)\n    \n    if coordinate.shape[0] == 1:\n        changed_x_coordinate = np.reshape(coordinate[:,:,0]*x_scale,(1,4,1))\n        changed_y_coordinate = np.reshape(coordinate[:,:,1]*y_scale,(1,4,1))\n    if coordinate.shape[0] == 2:\n        changed_x_coordinate = np.reshape(coordinate[:,:,0]*x_scale,(2,4,1))\n        changed_y_coordinate = np.reshape(coordinate[:,:,1]*y_scale,(2,4,1))\n        \n    coordinate = np.concatenate((changed_x_coordinate, changed_y_coordinate), axis=2)\n    \n    return img , coordinate\n","64bf14d8":"testImage_path = '\/kaggle\/input\/hand_dataset\/training_dataset\/training_data\/images\/Buffy_110.jpg'\ntestAnnotation_path = '\/kaggle\/input\/hand_dataset\/training_dataset\/training_data\/annotations\/Buffy_110.mat'\n\nimg, coordinate = resize_edit_box(testImage_path,testAnnotation_path)\ndrawBoundbox(img, coordinate)\n","a9dd35c0":"def distance(point1,point2):\n    distance = ((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2)**0.5\n    return distance\n\n\n\ndef coordinate_reformat(coordinate):\n    if coordinate.shape[0] >= 1:\n        x_center = (coordinate[0,0,0] + coordinate[0,2,0])\/2\n        y_center = (coordinate[0,0,1] + coordinate[0,2,1])\/2\n        height = np.amax(coordinate[0,:,1]) - np.amin(coordinate[0,:,1])\n        weight = np.amax(coordinate[0,:,0]) - np.amin(coordinate[0,:,0])\n        output = np.array([x_center,y_center,height,weight]).reshape(1,4,1)\n        \n        \n    if coordinate.shape[0] == 2:\n        x_center_2 = (coordinate[1,0,0] + coordinate[1,2,0])\/2\n        y_center_2 = (coordinate[1,0,1] + coordinate[1,2,1])\/2\n        height_2 = np.amax(coordinate[1,:,1]) - np.amin(coordinate[1,:,1])\n        weight_2 = np.amax(coordinate[1,:,0]) - np.amin(coordinate[1,:,0])\n        temp = np.array([x_center_2,y_center_2,height_2,weight_2]).reshape(1,4,1)\n        output = np.concatenate((output, temp), axis=0).reshape(2,4,1)\n        \n    return output\n\n\ndef coordinate_main(Newcoordinate):\n    center_x = Newcoordinate[0,0,0]\n    center_y = Newcoordinate[0,1,0]\n    height = Newcoordinate[0,2,0]\n    weidth = Newcoordinate[0,3,0]\n    \n    if Newcoordinate.shape[0] >= 1:\n        a = np.array([center_x - (height\/2 + weidth\/2), center_y - (height\/2 + weidth\/2)])\n        b = np.array([center_x - (height\/2 - weidth\/2), center_y - (height\/2 - weidth\/2)])\n        c = np.array([center_x - (-height\/2 - weidth\/2), center_y - (-height\/2 - weidth\/2)])\n        d = np.array([center_x - (-height\/2 + weidth\/2), center_y - (-height\/2 + weidth\/2)])\n        temp1 = np.concatenate((a,b,c,d),axis = 0).reshape(1,4,2)\n        \n    \n    if Newcoordinate.shape[0] == 2:\n        center_x = Newcoordinate[1,0,0]\n        center_y = Newcoordinate[1,1,0]\n        height = Newcoordinate[1,2,0]\n        weidth = Newcoordinate[1,3,0]\n        a = np.array([center_x - (height\/2 + weidth\/2), center_y - (height\/2 + weidth\/2)])\n        b = np.array([center_x - (height\/2 - weidth\/2), center_y - (height\/2 - weidth\/2)])\n        c = np.array([center_x - (-height\/2 - weidth\/2), center_y - (-height\/2 - weidth\/2)])\n        d = np.array([center_x - (-height\/2 + weidth\/2), center_y - (-height\/2 + weidth\/2)])\n        temp2 = output = np.concatenate((a,b,c,d),axis = 0).reshape(1,4,2)\n        \n        output = np.concatenate((temp1, temp2), axis = 0)\n        \n    return output","2fa0a854":"all_coordinate = np.empty([2])\nfor dirname, _, filenames in os.walk('..\/input\/hand_dataset\/training_dataset\/training_data\/annotations'):\n    for filename in filenames:\n        if 'Buffy' in filename: \n            temp = coordinate_reformat(mat_to_boundbox(os.path.join(dirname, filename))).reshape(1,-1,4)\n            if all_coordinate.shape[0] == 2:\n                all_coordinate = temp\n            else:\n                all_coordinate = np.concatenate((temp,all_coordinate),axis = 1)\n                \nprint(all_coordinate.shape)\nplt.plot(all_coordinate[0,:,2],all_coordinate[0,:,3],'ro') \nplt.show()","486aa420":"from sklearn.cluster import KMeans\nall_coordinate = all_coordinate.reshape(-1,4)\nHW = all_coordinate[:,2:4]\nkmeans = KMeans(n_clusters=1, random_state=0).fit(HW)\nkmeans.cluster_centers_","9c5a4b5b":"anchor_DEFUALT = np.array([51.49931633, 49.05936578])","c59e2b85":"def create_output(imgFile, annoFile, grid = 16):\n    img, coordinate = resize_edit_box(imgFile, annoFile)\n    coordinate = coordinate_reformat(coordinate)\n    step = img.shape[1]\/grid\n    output = np.zeros((5,grid,grid))\n    boundBox_grid_x = int(coordinate[0,0,0]\/step)\n    if boundBox_grid_x == 16: boundBox_grid_x = 15\n    boundBox_grid_y = int(coordinate[0,1,0]\/step)\n    if boundBox_grid_y == 16: boundBox_grid_y = 15\n    boundBox_x = (coordinate[0,0,0]% step)\/step\n    boundBox_y = (coordinate[0,1,0]% step)\/step\n    boundBox_height = coordinate[0,2,0]\/(anchor_DEFUALT[0] * grid)\n    boundBox_weidth = coordinate[0,3,0]\/(anchor_DEFUALT[1] * grid)\n    temp = np.array([1, boundBox_x, boundBox_y, boundBox_height, boundBox_weidth]).reshape(5)\n    output[:,boundBox_grid_x,boundBox_grid_y] = temp\n    \n    if coordinate.shape[0] == 2:\n        boundBox_grid_x = int(coordinate[1,0,0]\/step)\n        if boundBox_grid_x == 16: boundBox_grid_x = 15\n        boundBox_grid_y = int(coordinate[1,1,0]\/step)\n        if boundBox_grid_y == 16: boundBox_grid_y = 15\n        boundBox_x = (coordinate[1,0,0]% step)\/step\n        boundBox_y = (coordinate[1,1,0]% step)\/step\n        boundBox_height = coordinate[1,2,0]\/(anchor_DEFUALT[0] * grid)\n        boundBox_weidth = coordinate[1,3,0]\/(anchor_DEFUALT[1] * grid)\n        temp1 = np.array([1, boundBox_x, boundBox_y, boundBox_height, boundBox_weidth]).reshape(5)\n        output[:,boundBox_grid_x,boundBox_grid_y] = temp1\n        \n    return img, output\n    \n    ","effcc0f3":"import csv\n\ncsv_head = [\"no.\"]\nfor i in range(0,262144):\n    csv_head.append(\"pixel \" + str(i))\nfor i in range(0,256):\n    csv_head.append(\"Objectness score(gride\"+str(i)+\")\"), csv_head.append(\"Center x(gride\"+str(i)+\")\"), csv_head.append(\"Center y(gride\"+str(i)+\")\"), csv_head.append(\"Height(gride\"+str(i)+\")\"), csv_head.append(\"Width(gride\"+str(i)+\")\")","2b5ed0ba":"def create_dataset(images,annotations):\n    counter = 0\n    final_output = []\n    temp = []\n    for IMGdir, _, IMGfiles in os.walk(images):\n        for ANNOdir, _, ANNOfiles in os.walk(annotations):\n             for img_file in IMGfiles:\n                    for anno_file in ANNOfiles:\n                        if counter == 1:break\n                        idx = img_file.index('.jpg')\n                        if 'Buffy' in img_file and img_file[0:idx]+'.mat' == anno_file:\n                            img = os.path.join(IMGdir, img_file)\n                            ann = os.path.join(ANNOdir, anno_file)\n                            img, out = create_output(img,ann)\n                            img = np.reshape(img,(1,-1)).tolist()[0]\n                            out = np.reshape(out,(1,-1),order='F').tolist()[0]\n                            temp = [counter] + img + out\n                            final_output.append(temp)\n                            counter+=1\n    return final_output","d6971408":"trainimg_dir = '..\/input\/hand_dataset\/training_dataset\/training_data\/images'\ntrainanno_dir = '..\/input\/hand_dataset\/training_dataset\/training_data\/annotations'\n#train = create_dataset(trainimg_dir, trainanno_dir)\ntestimg_dir = '..\/input\/hand_dataset\/test_dataset\/test_data\/images'\ntestanno_dir = '..\/input\/hand_dataset\/test_dataset\/test_data\/annotations'\n#test = create_dataset(testimg_dir, testanno_dir)\n","ff3bdc1c":"write = []\nwrite.append(csv_head),write.append(train[0])\nwith open('dataset.csv', 'w', newline='') as file:\n    writer = csv.writer(file)\n    writer.writerows(write)","7aef9628":"import pandas as pd\ndf = pd.read_csv(\".\/dataset.csv\")\n","39300d42":"def generator(images, annotations , batch_size=32):\n    \"\"\"\n    Yields the next training batch.\n    \"\"\"\n    \n   \n    while True:\n        counter = 0\n        X_train = []\n        y_train = []\n        for IMGdir, _, IMGfiles in os.walk(images):\n            for ANNOdir, _, ANNOfiles in os.walk(annotations):\n                 for img_file in IMGfiles:\n                        for anno_file in ANNOfiles:\n                            if counter == batch_size: \n                                X_train = np.array(X_train)\n                                y_train = np.array(y_train)\n                                yield X_train, y_train\n                                X_train = []\n                                y_train = []\n                                counter = 0\n                            idx = img_file.index('.jpg')\n                            if 'Buffy' in img_file and img_file[0:idx]+'.mat' == anno_file:\n                                img = os.path.join(IMGdir, img_file)\n                                ann = os.path.join(ANNOdir, anno_file)\n                                img, out = create_output(img,ann)\n                                X_train.append(img)\n                                y_train.append(out)\n                                counter+=1","849d181a":"train_generator = generator(trainimg_dir, trainanno_dir, batch_size=32)\ntest_generator =  generator(testimg_dir, testanno_dir, batch_size=32)","7073053e":"x, y = next(train_generator)\nprint(x.shape)","138b8977":"# Data Generator","f9b0f82b":"# Importing required libraries","7f113d7c":"# Resize and edit bounding boxs coordinates","b10e950c":"# Find appropriate anchor boxes","e2681873":"# Creating CSV dataset","ea328b78":"**So appropriate anchor size is [51.49931633, 49.05936578]**","f882025a":"# Draw bounding box","ee1d786d":"# Chenging Coordinate format to Center(X),Center(Y),Height , Weight","fe995482":"# **How to read mat files?**"}}