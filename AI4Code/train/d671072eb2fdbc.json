{"cell_type":{"f991c501":"code","76164ea9":"code","1de9d65b":"code","48823de2":"code","48d5802c":"code","9cdfaa20":"code","4a39b680":"code","fffe6b98":"code","780c0080":"code","79809f8c":"code","ae129e23":"code","41c048c6":"code","6321a2b6":"code","97fba7cd":"code","788828cb":"code","2439c1a1":"code","eb4ed180":"code","5430d3c4":"code","6be13598":"code","166ec04c":"code","38175b42":"code","1b8ad665":"code","2b0b446e":"code","5ca5e163":"code","479bf71c":"code","3a0b881a":"code","a3820ab6":"code","d72f647a":"code","ef619fe7":"code","7b16292e":"code","d35131f2":"code","12815b46":"code","07b3946e":"code","478ac7bd":"code","4100f4ea":"code","1933cf9a":"code","2de64590":"code","ed1473de":"code","4f517f27":"code","f8027a5e":"code","4cbe3e33":"code","b8dc555d":"code","8861cc54":"code","abbdea38":"code","444029b5":"code","7abbb340":"code","1cecf7fa":"code","85006c81":"code","4428e4d1":"code","c8705fd2":"code","e7413f59":"code","6d96416a":"code","53bd975a":"code","b9b6a8e9":"code","7c4637f7":"code","a1cbfb15":"code","f97e3384":"code","a9164f5c":"code","72e19677":"code","a53806c3":"code","9db0c900":"code","4bd3c890":"code","bacb33ed":"code","48cbb426":"code","2129880a":"code","71ebcb8d":"code","1e4cdf2e":"code","002a38b0":"code","a109b625":"code","efc89623":"code","cfa8e7cb":"code","9444a81c":"code","fe3edf5c":"code","a6768c37":"code","40c5042b":"code","3bafb92d":"markdown","72f95eda":"markdown","255cfdab":"markdown","032089cf":"markdown","b76fbad8":"markdown","8ca207ce":"markdown","b340f4a6":"markdown","ce170f0c":"markdown","66c8c304":"markdown","5bc4173b":"markdown","de54aa6b":"markdown","4e96166c":"markdown","523e129b":"markdown","ab0ebc5d":"markdown","d4078e5d":"markdown","944f3bda":"markdown","26de0d8a":"markdown","52c70aac":"markdown","14223d20":"markdown","b6376f8c":"markdown","af775d94":"markdown","0a503af8":"markdown","0a278c2e":"markdown","cb6df668":"markdown","4409bc1d":"markdown","0c4a0abb":"markdown","1a53168f":"markdown","a7782cf4":"markdown","ad367690":"markdown","3d888b95":"markdown","591f3475":"markdown","3d6d1dfa":"markdown","fbb1b176":"markdown","7f090b9e":"markdown","88019bac":"markdown","f9777111":"markdown","c960a886":"markdown","9ecf010a":"markdown","d056607d":"markdown","a4f9ec12":"markdown","6d5a8bde":"markdown","68573694":"markdown","c4311239":"markdown","2bcc54a7":"markdown","a4006407":"markdown","cdd92579":"markdown","7c6d7b67":"markdown","fe2f1104":"markdown","f052f5af":"markdown","fbc378cb":"markdown","a1007a57":"markdown","fedebc00":"markdown","8b23ce2d":"markdown","ef31d9f2":"markdown","f3b5319e":"markdown","5862b2e6":"markdown","fb7721b8":"markdown","60f39d00":"markdown","38ca284a":"markdown","706a1c33":"markdown","4c12d297":"markdown","d013b55d":"markdown","5f52ea0a":"markdown","a9b0ff3c":"markdown","65729e56":"markdown"},"source":{"f991c501":"# importing libraries for EDA\nimport os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nimport random\nfrom scipy.stats import variation\nfrom wordcloud import WordCloud\n# importing libraries for logistic regression prediction\nimport statsmodels.api as sm \nimport time\nimport profile\nimport random\nimport math\nimport scipy \n%pylab inline\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\n\nsb.set()","76164ea9":"olympics = pd.read_csv('..\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv')\nolympics = olympics[olympics['Year'] > 1993]\nolympics.head(5)","1de9d65b":"olympics.groupby(['Year'])[['Medal']].count().head(10)","48823de2":"olympics.groupby(['Year'])[['Medal']].count().tail(10)","48d5802c":"population = pd.read_csv('..\/input\/world-bank-data-1960-to-2016\/country_population.csv')\npopulation.head()","9cdfaa20":"lifeexpectancy = pd.read_csv('..\/input\/world-bank-data-1960-to-2016\/life_expectancy.csv')\nlifeexpectancy.head()","4a39b680":"fertility = pd.read_csv('..\/input\/world-bank-data-1960-to-2016\/fertility_rate.csv')\nfertility.head()","fffe6b98":"gdp = pd.read_csv('..\/input\/gdp-world-bank-data\/GDP by Country.csv', skiprows = range(0,4))\ngdp.head()","780c0080":"happiness2016 = pd.read_csv('..\/input\/world-happiness\/2016.csv')\nhappiness2016.head()","79809f8c":"location = pd.read_csv(\"..\/input\/world-capitals-gps\/concap.csv\")\nlocation.head()","ae129e23":"medaltypes = ['Gold', 'Silver', 'Bronze']\nmedalpoints = ['Gold', 'Silver', 'Bronze', 'Medals', 'Medal_points']","41c048c6":"olympics = pd.concat([olympics, pd.get_dummies(olympics['Medal'])], axis = 1)\nolympics = olympics.drop('Medal', axis = 1)\nolympics.head()","6321a2b6":"def prepareMedals(origData, medals):\n    medalsDF = origData.groupby(['Year','Season','Team','NOC','Event'])[medals].sum()\n    for m in medals:\n            medalsDF.loc[medalsDF[m] > 0, m] = 1\n    medalsDF.reset_index(inplace = True )\n    return medalsDF\n\nmedals = prepareMedals(olympics, medaltypes)\nmedals.head(10)","97fba7cd":"groupForMedals = ['Year','Season','NOC','Team']\nmedalsTeams = medals.groupby(groupForMedals)[medaltypes].sum()\nprint(medalsTeams.head(10))","788828cb":"teamlist = olympics['Team'][olympics['Team'].str.contains(\"-\")].unique() \ndisplay(teamlist)","2439c1a1":"for i in teamlist:\n    # we go back to initial list athletes and remove last 2 chars if the name of the team is in the_list.\n    olympics.loc[olympics['Team']==i,'Team']=i[:-2]","eb4ed180":"medals = prepareMedals(olympics, medaltypes)\nmedalsTeams = medals.groupby(groupForMedals)[medaltypes].sum()\nmedalsTeams.reset_index(inplace = True)\nprint(medalsTeams.head(20))","5430d3c4":"# The Medal_points column is defined above to store the weigh of achieved medals for each country in each event.\n# Let assume:\n# - Gold = 3 points\n# - Silver = 2 points\n# - Bronze = 1 point\n# - NaN = 0 point\n# The Medal column is for the sum of achieved medal by that team\nmedalsTeams['Medal_points'] = (3 * medalsTeams['Gold']) + (2 * medalsTeams['Silver']) + medalsTeams['Bronze']\nmedalsTeams['Medals'] = medalsTeams['Gold'] + medalsTeams['Silver'] + medalsTeams['Bronze']\nmedalsTeams = medalsTeams.reindex(['Year', 'Season', 'Team', 'NOC', 'Gold', 'Silver', 'Bronze', 'Medals', 'Medal_points'] , axis=1)\ndisplay(medalsTeams.head(10))","6be13598":"totallist = medalsTeams.groupby(['Team'])[medalpoints].sum()\ntotallist.reset_index(inplace = True)\ndisplay(totallist.head(10))","166ec04c":"medalteams = totallist[totallist['Medal_points'] > 0]\nwc = WordCloud(background_color='white', max_words=300, max_font_size=20, colormap='plasma').generate(str(medalteams['Team']))\nplt.figure()\nplt.imshow(wc, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","38175b42":"f, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(5, 1, figsize=(30, 40), sharex=False)\n\n# First graph to show the top 20 countries from 1994 until 2016 based on the weight of medals.\nsb.barplot(data=totallist.sort_values(by='Medal_points').reset_index(drop=True).tail(20), x='Team', y='Medal_points', palette=\"deep\", ax=ax1)\n# Iterate through the list of axes' patches\nfor p in ax1.patches:\n    ax1.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), fontsize=12, color='Blue', ha='center', va='bottom')\nax1.axhline(0, color=\"k\", clip_on=True)\nax1.set_ylabel(\"Medal points\")\nax1.set_xlabel(\"Country\")\n\n# Second graph for medal count\nsb.barplot(data=totallist.sort_values(by='Medals').reset_index(drop=True).tail(20), x='Team', y='Medals', palette=\"deep\", ax=ax2)\nfor p in ax2.patches:\n    ax2.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), fontsize=12, color='Blue', ha='center', va='bottom')\nax2.axhline(0, color=\"k\", clip_on=True)\nax2.set_ylabel(\"Medals\")\nax2.set_xlabel(\"Country\")\n\n# 3rd graph for gold medals \nsb.barplot(data=totallist.sort_values(by='Gold', ascending = False).head(20), x='Team', y='Gold', palette=\"deep\", ax=ax3)\nfor p in ax3.patches:\n    ax3.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), fontsize=12, color='Blue', ha='center', va='bottom')\nax3.axhline(0, color=\"k\", clip_on=True)\nax3.set_ylabel(\"Gold\")\nax3.set_xlabel(\"Country\")\n\n# 4th graph for silver medals \nsb.barplot(data=totallist.sort_values(by='Silver', ascending = False).head(20), x='Team', y='Silver', palette=\"deep\", ax=ax4)\nfor p in ax4.patches:\n    ax4.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), fontsize=12, color='Blue', ha='center', va='bottom')\nax4.axhline(0, color=\"k\", clip_on=True)\nax4.set_ylabel(\"Silver\")\nax4.set_xlabel(\"Country\")\n\n# 5th graph for bronze medals \nsb.barplot(data=totallist.sort_values(by='Bronze', ascending = False).head(20), x='Team', y='Bronze', palette=\"deep\", ax=ax5)\nfor p in ax5.patches:\n    ax5.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), fontsize=12, color='Blue', ha='center', va='bottom')\nax5.axhline(0, color=\"k\", clip_on=True)\nax5.set_ylabel(\"Bronze\")\nax5.set_xlabel(\"Country\")","1b8ad665":"countrylist = medalsTeams['Team'].unique()\nbestyearofeachcountry = pd.DataFrame(columns=['Team','Year','Medal_points'])\nfor country in countrylist:\n    temp = medalsTeams.loc[medalsTeams['Team']==country].sort_values(by='Medal_points', ascending = False).head(1)[['Team','Year','Medal_points']]\n    frames = [bestyearofeachcountry, temp]\n    bestyearofeachcountry = pd.concat(frames)","2b0b446e":"bestyearofeachcountry = bestyearofeachcountry.loc[bestyearofeachcountry['Medal_points']>10]\n\n# The Medal_points is type object, hence we must change it into float or int.\nbestyearofeachcountry.loc[:,'Medal_points'] = bestyearofeachcountry.Medal_points.astype(np.float)\ng, (ax1) = plt.subplots(1, 1, figsize=(20, 10))\nsb.scatterplot(data = bestyearofeachcountry, x = 'Team', y = 'Year', size ='Medal_points', sizes=(10,1000), hue ='Medal_points', palette=\"Set1\", ax=ax1)\nax1.axhline(0, color=\"k\", clip_on=True)\nax1.set(ylim=(1990, 2020))\nax1.set_ylabel(\"Year\")\nax1.set_xlabel(\"Country\")\nfor item in ax1.get_xticklabels():\n    item.set_rotation(90)","5ca5e163":"medalsTeams.groupby('Season').count()","479bf71c":"# define the weigh for the plot\nexplode = (0.3, 0.2, 0.1, 0.025, 0.025, 0.025, 0.025, 0.025, 0.025, 0.025)\n\n#Athlete participation by country\nsummerdata = olympics[olympics.Season == 'Summer'] #focus only on Summer olympics (exclude Winter Olympics)\nsummercount = summerdata.groupby('NOC').count()\nsummerdf = pd.DataFrame(summercount, columns = ['Name']) \nsummersorted = summerdf.sort_values(['Name'], ascending = False) #Total number of athletes by country\n\n# Medal Count by Top 10 Countries:\nsummertop = summersorted.head(10)\nsummertop.sum()\n\n#Plot Top 10 Countries by  Athlete Count: Athletics Only\nfigure = summertop.plot(kind='pie', figsize=(7,5),subplots=True, explode = explode, autopct='%1.1f%%', legend = None)\nplt.axis('equal')\nplt.title(\"Top 10 Countries by  Athlete participating in SUMMER events\")\nplt.tight_layout()\nplt.show()  ","3a0b881a":"#Athlete participation by country\nwinterdata = olympics[olympics.Season == 'Winter'] #focus only on Winter olympics (exclude Summer Olympics)\nwintercount = winterdata.groupby('NOC').count()\nwinterdf = pd.DataFrame(wintercount, columns = ['Name']) \nwintersorted = winterdf.sort_values(['Name'], ascending = False) #Total number of athletes by country\n\n# Top 10\nwintertop = wintersorted.head(10)\nwintertop.sum()\n\n# Similar as Summer chart\nfigure = wintertop.plot(kind='pie', figsize=(7,5),subplots=True, explode = explode, autopct='%1.1f%%', legend = None)\nplt.axis('equal')\nplt.title(\"Top 10 Countries by  Athletes participating in WINTER events\")\nplt.tight_layout()\nplt.show()  ","a3820ab6":"eventspergame = pd.DataFrame(olympics.groupby(['Year','Season'])['Event'].nunique())\neventspergame.columns = ['Events']\neventspergame.reset_index(inplace = True)\ng, (ax1) = plt.subplots(1, 1, figsize = (20, 5))\nsb.lineplot(data = eventspergame,x = 'Year', y = 'Events', hue = 'Season', ax = ax1)","d72f647a":"def getbestyear(dataFrame, season = 'All', minimal = 5, value = 'Medal_points', columns = ['Team','Year','Medal_points'], sort_ascending = False):\n    dataFrame = dataFrame[dataFrame['Medal_points'] > minimal]\n    season = [season]\n    res = pd.DataFrame(columns = columns)\n    for country in countrylist:\n        temp = dataFrame.loc[(dataFrame['Team'] == country) & (dataFrame['Season'].isin(season))].sort_values(by = value, ascending = sort_ascending).head(1)[columns]\n        res = pd.concat([res, temp])\n    res.loc[:,value] = res[value].astype(np.float)\n    return res","ef619fe7":"def drawbybestyear(dataFrame, season = 'all', value = 'Medal_points', textDivisor = 1):\n    season = season.lower()\n    g, (ax1) = plt.subplots(1, 1, figsize=(20, 8))\n    sb.scatterplot(data = dataFrame, x = 'Team', y = 'Year', size = value, sizes = (5,750), hue = value, alpha = 0.7, edgecolors = \"red\", palette = season, legend = False, ax = ax1)\n    ax1.axhline(0, color=\"k\", clip_on=True)\n    yearsTicks = dataFrame['Year'].unique().tolist()\n    yearsTicks.sort()\n    ax1.set(ylim = (yearsTicks[0] - 1, yearsTicks[-1] + 1), yticks = (yearsTicks))\n    ax1.set_ylabel(\"Year\")\n    ax1.set_title(\"Year of best result in \" + value, pad = 50, loc = \"left\")\n    i = 0\n    prevYear = 0\n    for index, row in dataFrame.iterrows():\n        ax1.text(i, row['Year'] + 1, round(row[value]\/textDivisor, 2), color = 'black', withdash=True)\n        i += 1\n        prevYear = row['Year']\n    for item in ax1.get_xticklabels():\n        item.set_rotation(90)","7b16292e":"bestyearSummer = getbestyear(medalsTeams, \"Summer\")\ndrawbybestyear(bestyearSummer, 'Summer')","d35131f2":"bestyearWinter = getbestyear(medalsTeams, \"Winter\")\ndrawbybestyear(bestyearWinter, 'Winter')","12815b46":"# For Summer\nsummerCountries = pd.DataFrame(columns=['Team','Game'])\nsummerCountries['Team'] = bestyearSummer['Team']\nsummerCountries['Game'] = 1\n# For Winter\nwinterCountries = pd.DataFrame(columns = ['Team','Game'])\nwinterCountries['Team'] = bestyearWinter['Team']\nwinterCountries['Game'] = 2\n# Merge Summer and Winter\nwsCountries = pd.concat([winterCountries, summerCountries])\nwsCountries = wsCountries.groupby(['Team'])['Game'].sum().to_frame()\nwsCountries.reset_index(inplace = True)\n# Now we plot the merged dataframe\ng, (ax1) = plt.subplots(1, 1, figsize = (20, 7))\nsb.scatterplot(data = wsCountries, x = 'Team', y = 'Game', s = 1000, ax = ax1, alpha = 0.5, edgecolors = \"gray\", linewidth = 1, palette=\"Set2\")\nax1.axhline(0.6, clip_on = True)\nax1.set(ylim = (0.6, 3.4), yticks = (1, 2, 3), yticklabels = ('Summer','Winter', 'Both'))\nax1.set_ylabel(\"Olympic season\")\nfor item in ax1.get_xticklabels():\n    item.set_rotation(90)","07b3946e":"# create dataframe with unique participants grouped by year, season and team\nparticipants = pd.DataFrame(olympics.groupby(['Year','Season','Team'])['ID'].nunique())\nparticipants.columns = ['UniqueParticipants']\nparticipants.reset_index(inplace=True)\n#now we merge it with dataframe we worked with (until now that is)\nmedalsTeamsParticipants = medalsTeams.merge(participants, on=['Year','Season','Team'])\nmedalsTeamsParticipants.head()","478ac7bd":"def resultsallyears(tmpmedalsteams, season):\n    season = season[0].upper() + season.lower()[1:]\n    if season!='All':\n        tmpmedalsteams = tmpmedalsteams[tmpmedalsteams['Season'] == season]\n    tmplistcountries = np.unique(tmpmedalsteams.loc[tmpmedalsteams['Medal_points'] > 5, ['Team']].values)\n    # dataframe for the list\n    numcountries = pd.DataFrame(tmplistcountries)\n    numcountries.columns = ['Team']\n    # Add index column\n    numcountries['Id'] = numcountries.index\n    #Merge two dataframes \n    tmpmedalsteams = tmpmedalsteams.loc[tmpmedalsteams['Team'].isin(tmplistcountries)]\n    tmpmedalsteams = tmpmedalsteams.merge(numcountries, on = 'Team')\n    return tmpmedalsteams","4100f4ea":"def computecoeffvars(dataFrame):\n    coeffvardf = pd.DataFrame(columns=['Team', 'Coeff'])\n    countries = dataFrame['Team'].unique()\n    for c in countries:\n        points = dataFrame.loc[dataFrame['Team'] == c]['Medal_points']\n        coef = variation(points)\n        #add values to dataframe\n        coeffvardf = coeffvardf.append({'Team':c, 'Coeff':coef}, ignore_index=True) \n    return coeffvardf","1933cf9a":"def drawcoeffvar(dataFrame, palette): # palette for the graph\n    maxim = dataFrame.sort_values(by = 'Coeff', ascending = False)['Coeff'].head(1)\n    maxim = round((maxim.values[0] * 1.1), 2)\n    palette = palette.lower()\n    g, (ax1) = plt.subplots(1, 1, figsize = (20, 5))\n    sb.barplot(data = dataFrame, x = 'Team', y = 'Coeff', palette = palette, ax = ax1)\n    ax1.axhline(0, color = \"k\", clip_on=True)\n    ax1.set(ylim = (0, maxim))\n    ax1.set_ylabel(\"Coefficient of variation\")\n    #writting the datalabels\n    i = -0.25\n    prevValue = 0\n    for index, row in dataFrame.iterrows():\n        value = round(row['Coeff'], 2) #this is indendent to avoid text over text\n        if abs(1 - prevValue \/ value) < 0.1:\n            position = value + (maxim * 0.05)\n        else:\n            position = value\n        prevValue = position\n        ax1.text(i, position, value, color = 'black', withdash = True)\n        i += 1\n    for item in ax1.get_xticklabels():\n        item.set_rotation(90)","2de64590":"drawcoeffvar(computecoeffvars(resultsallyears(medalsTeams, 'Summer')) ,'Summer')","ed1473de":"drawcoeffvar(computecoeffvars(resultsallyears(medalsTeams, 'Winter')) ,'Winter')","4f517f27":"years = np.sort(olympics['Year'].unique())\nprint(str(years).split())","f8027a5e":"years_string=str(years)[1:-1].split()\n# In the GDP and Population, the Country is under 'Country Name'\n# We will get rid of 'Country Name' later after we merge with the Olympics data\n# For now, we leave it to filter the list.\ncntrname = 'Country Name'\nyears_string.insert(0, cntrname)\nprint(years_string)","4cbe3e33":"populationdata = population[years_string]\ndisplay(populationdata.head())","b8dc555d":"gdpdata = gdp[years_string]\ndisplay(gdpdata.head())","8861cc54":"olympic_countries = olympics['Team'].unique()\ngdp_countries = gdpdata['Country Name'].unique()","abbdea38":"np.setdiff1d(olympic_countries, gdp_countries)","444029b5":"np.setdiff1d(gdp_countries, olympic_countries)","7abbb340":"change = {\n'Bahamas, The':'Bahamas', \n'Cabo Verde':'Cape Verde',\n'Congo, Rep.':'Congo (Brazzaville)',\n'Russian Federation':'Russia',\n'St. Vincent and the Grenadines':'Saint Vincent and the Grenadines',\n'Venezuela, RB':'Venezuela',\n'Congo, Dem. Rep.':'Congo (Kinshasa)',\n'Micronesia, Fed. Sts.':'Federated States of Micronesia',\n'Gambia, The':'Gambia',\n'Guinea-Bissau':'Guinea Bissau',\n'Iran, Islamic Rep.':'Iran',\n'St. Kitts and Nevis':'Saint Kitts and Nevis',\n'Slovak Republic':'Slovakia',\n'Syrian Arab Republic':'Syria',\n'Hong Kong SAR, China':'Hong Kong',\n'Kyrgyz, Republic':'Kyrgyzstan',\n'Macedonia, FYR':'Macedonia',\n'Korea, Dem. People\u2019s Rep.':'North Korea',\n'St. Lucia':'Saint Lucia',\n'Timor-Leste':'Timor Leste',\n'Brunei Darussalam':'Brunei',\n'Egypt, Arab Rep.':'Egypt',\n'United Kingdom':'Great Britain',\n'Korea, Rep.':'South Korea',\n'Virgin Islands (U.S.)':'United States Virgin Islands',\n'Yemen, Rep.':'Yemen'}\n\ngdpmelted = gdpdata.melt(id_vars = ['Country Name'], value_vars = years_string[1:], var_name = 'Years')\ngdpmelted.columns = ['Team','Year','GDP']\ngdpmelted['Country'] = gdpmelted['Team']\ngdpmelted.head()\n# Loop to apply the changes\nfor key in change:\n    value = change[key]\n    gdpmelted.loc[gdpmelted['Team'] == key,'Team'] = value\n    \n# we need to convert the year back to int.\ngdpmelted['Year'] = gdpmelted['Year'].apply(int)\ngdpmelted.head()","1cecf7fa":"combineddata = pd.merge(medalsTeamsParticipants, gdpmelted, on = ['Team','Year'])\ncombineddata.drop(['Country'], axis = 1, inplace = True)\ncombineddata.head()","85006c81":"populationmelted = populationdata.melt(id_vars = ['Country Name'], value_vars = years_string[1:], var_name = 'Years')\npopulationmelted.columns = ['Team','Year','Population']\npopulationmelted['Year'] = populationmelted['Year'].apply(int)\npopulationmelted.head()","4428e4d1":"combineddata = pd.merge(combineddata, populationmelted, on = ['Team','Year'])\ncombineddata.head()","c8705fd2":"combineddata['MedalsPerPopulation'] = combineddata['Medals']\/(combineddata['Population']\/100000)\ncombineddata['MedalPointsPerPopulation'] = combineddata['Medal_points']\/(combineddata['Population']\/100000)\ncombineddata['GDPWorthPerMedal'] = (combineddata['GDP']\/combineddata['Medals'])\ncombineddata['GDPWorthPerMedalPoints'] = (combineddata['GDP']\/(combineddata['Medal_points']))\ncombineddata['ParticipantsPerPopulation'] = combineddata['UniqueParticipants']\/(combineddata['Population']\/100000)\ncombineddata.head()","e7413f59":"# This is to safer use, in case we make any messy.\nworking_data = combineddata.copy()","6d96416a":"summerbest = getbestyear(combineddata, \"Summer\", 10, 'GDPWorthPerMedalPoints', ['Team', 'Year', 'GDPWorthPerMedalPoints'], True)\ndrawbybestyear(summerbest, 'Summer', 'GDPWorthPerMedalPoints', 1000000000)","53bd975a":"winterbest = getbestyear(combineddata, \"Winter\", 10, 'GDPWorthPerMedalPoints', ['Team', 'Year', 'GDPWorthPerMedalPoints'], True)\ndrawbybestyear(winterbest, 'Winter', 'GDPWorthPerMedalPoints', 1000000000)","b9b6a8e9":"def comparisongraph(country, palette, data1, datalb1, data2, datalb2, d1div = 1, d2div = 1):\n    tempData = resultsallyears(combineddata, 'All')\n    dataFrame = tempData.loc[tempData['Team'] == country]\n    palette = palette.lower()\n    g, ax1 = plt.subplots(figsize = (20, 7))\n    sb.barplot(dataFrame['Year'].apply(lambda x: str(x)), dataFrame[data1].apply(lambda x: x \/ d1div), ax = ax1, palette = palette)\n    ax1.axhline(0, color = \"k\", clip_on = True)\n    ax2 = ax1.twinx()\n    sb.lineplot(dataFrame['Year'].apply(lambda x: str(x)), dataFrame[data2].apply(lambda x: x \/ d2div), linewidth = 4, marker = 's', markersize = 12, ax = ax2)\n    ax2.grid(False)\n    ax1.set_title('Comparison of ' + datalb1 + ' and ' + datalb2 + ' through years for ' + country)\n    ax1.set_ylabel(datalb1)\n    ax2.set_ylabel(datalb2)   ","7c4637f7":"comparisongraph(\"Germany\", \"seismic\", \"Medal_points\", \"Medal points\", \"GDP\", \"GDP (billion USD)\", 1, 1000000000)","a1cbfb15":"comparisongraph(\"United States\", \"Rocket\", \"Medal_points\", \"Medal points\", \"GDP\", \"GDP (billion USD)\", 1, 1000000000)","f97e3384":"comparisongraph(\"China\", \"deep\", \"Medal_points\", \"Medal points\", \"GDP\", \"GDP (billion USD)\", 1, 1000000000)","a9164f5c":"combineddata = working_data.copy()\nsummermostparticipants = getbestyear(combineddata, \"Summer\", 5, 'ParticipantsPerPopulation', ['Team', 'Year', 'ParticipantsPerPopulation'], False)\ndrawbybestyear(summermostparticipants, 'Summer', 'ParticipantsPerPopulation')","72e19677":"summermostparticipants = getbestyear(combineddata, \"Winter\", 5, 'ParticipantsPerPopulation', ['Team', 'Year', 'ParticipantsPerPopulation'], False)\ndrawbybestyear(summermostparticipants, 'Winter', 'ParticipantsPerPopulation')","a53806c3":"shortlistofsportycountries = ['Latvia','Slovenia', 'New Zealand']\nfor c in shortlistofsportycountries:\n    comparisongraph(c, \"deep\", \"UniqueParticipants\", \"Unique participants\", \"Population\", \"Population (in millions)\", 1, 1000000)","9db0c900":"summerdata = combineddata.copy()\nsummerdata = summerdata[summerdata['Season'] == 'Summer']\nsummerdata.head()","4bd3c890":"summerdata[\"Team\"] = summerdata[\"Team\"].astype('category')\nsummerdata.dtypes","bacb33ed":"summerdata[\"Team_Num\"] = summerdata[\"Team\"].cat.codes\nsummerdata.head()","48cbb426":"summerdata[\"GDP\"].fillna(0, inplace = True)\nsummerdata[\"Population\"].fillna(0, inplace = True)\nsummerdata[\"UniqueParticipants\"].fillna(0, inplace = True)","2129880a":"summerdata.isnull().sum()","71ebcb8d":"summerdata['Winner'] = summerdata.Medal_points.apply(lambda x: 1 if x > 0 else 0) \nsummerdata.head()","1e4cdf2e":"Independent_var = summerdata.iloc[:, [8,9,10,11,17]].values  \nDependent_var = summerdata.iloc[:, 18].values ","002a38b0":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(Independent_var, Dependent_var, test_size = 0.2, random_state = 10)  ","a109b625":"from sklearn import metrics\nfrom sklearn.neighbors import KNeighborsClassifier\n\n#Create KNN Classifier\nknn = KNeighborsClassifier(n_neighbors=5)\n#Train the model using the training sets\nknn.fit(X_train, y_train)\n#Predict the response for test dataset\ny_pred = knn.predict(X_test)\n\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","efc89623":"from sklearn.metrics import classification_report, confusion_matrix  \nprint(confusion_matrix(y_test, y_pred))  \nprint(classification_report(y_test, y_pred))  ","cfa8e7cb":"error = []\n\n# Calculating error for K values between 1 and 40\nfor i in range(1, 40):  \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train)\n    pred_i = knn.predict(X_test)\n    error.append(np.mean(pred_i != y_test))\n\nplt.figure(figsize=(12, 6))  \nplt.plot(range(1, 40), error, color='red', linestyle='dashed', marker='o',  \n         markerfacecolor='blue', markersize=10)\nplt.title('Error Rate K Value')  \nplt.xlabel('K Value')  \nplt.ylabel('Mean Error')  ","9444a81c":"#Import Random Forest Model\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Create a Gaussian Classifier\nclf=RandomForestClassifier(n_estimators=100)\n\n#Train the model using the training sets y_pred=clf.predict(X_test)\nclf.fit(X_train,y_train)\n\ny_pred=clf.predict(X_test)\n\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","fe3edf5c":"from sklearn.tree import DecisionTreeClassifier\n\n# Create Decision Tree classifer object\nclf = DecisionTreeClassifier(criterion=\"entropy\", max_depth=20)\n\nclf = clf.fit(X_train, y_train)\n\n#Predict the response for test dataset\ny_pred = clf.predict(X_test)\n\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","a6768c37":"from sklearn.linear_model import LinearRegression  \nfrom sklearn.neural_network import MLPClassifier  \nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier  \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\n\nplt.figure()\n\n# Add the models to the list that you want to view on the ROC plot\nmodels = [\n{\n    'label': 'Random Forest',\n    'model': RandomForestClassifier(n_estimators=100),\n},\n{\n    'label': 'Decision Tree',\n    'model': DecisionTreeClassifier(max_depth=20)  \n}\n    ,\n    {  \n     'label': 'Neural Network',\n     'model':MLPClassifier(hidden_layer_sizes=(10, 10, 10), max_iter=1000) \n    }\n     ,\n    {\n     'label': 'Logistic Regression',\n    'model': LogisticRegression(),\n    }\n]\n\n# Below for loop iterates through your models list\nfor m in models:\n    model = m['model'] # select the model\n    model.fit(X_train, y_train) # train the model\n    y_pred=model.predict(X_test) # predict the test data\n# Compute False postive rate, and True positive rate\n    fpr, tpr, thresholds = metrics.roc_curve(y_test, model.predict_proba(X_test)[:,1])\n# Calculate Area under the curve to display on the plot\n    auc = metrics.roc_auc_score(y_test,model.predict(X_test))\n# Now, plot the computed values\n    plt.plot(fpr, tpr, label='%s ROC (area = %0.2f)' % (m['label'], auc))\n# Custom settings for the plot \n#plt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('1-Specificity(False Positive Rate)')\nplt.ylabel('Sensitivity(True Positive Rate)')\nplt.title('Receiver Operating Characteristic')\nplt.legend(loc=\"lower right\")\nplt.show()   # Display","40c5042b":"# We skip autosklearn for now as we need to deal with some packages installation\n#import autosklearn.classification\n#import sklearn.model_selection\n#import sklearn.datasets\n#import sklearn.metrics\n#X, y = sklearn.datasets.load_digits(return_X_y=True)\n#X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(X, y, random_state=1)\n#automl = autosklearn.classification.AutoSklearnClassifier()\n#automl.fit(X_train, y_train)\n#y_hat = automl.predict(X_test)\n#print(\"Accuracy score\", sklearn.metrics.accuracy_score(y_test, y_hat))\n\nfrom tpot import TPOTClassifier\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\n\ndigits = load_digits()\nX_train, X_test, y_train, y_test = train_test_split(digits.data, digits.target, train_size=0.75, test_size=0.25)\n\npipeline_optimizer = TPOTClassifier(generations=5, population_size=20, cv=5,\n                                    random_state=42, verbosity=2)\npipeline_optimizer.fit(X_train, y_train)\nprint(pipeline_optimizer.score(X_test, y_test))","3bafb92d":"Similarly, we will do the same melting process with population data.","72f95eda":"Lately, we want to view on the map. So, we will need to use GPS data.","255cfdab":"Now, let see the Summer seasons plot!","032089cf":"Let check the list of countries competing in Olympics, but are not in the GDP list.","b76fbad8":"In Summer seasons, the United State (0.08) and France (0.08) are the most reliable.  \nIn Winter seasons, the Germany (0.19) and Norway (0.16) are the most reliable.","8ca207ce":"What we can learn from the above chart is:\n- Summer events always have more countries and the achievements are more than the Winter, which is understandable because the Winter event usually has less games than the Summer's.\n- Numerous countries involved in both seasons and performed well.\n\nNow we can see each country performs best in each season. How about the participants from each country contributing to the success? The reason is with the participant ratio we can check the coefficient variation of each country in each season throughout the Olympics events.","b340f4a6":"Next, Decision Tree","ce170f0c":"We will need to compute the Coefficient variation, because only variation or standard deviation is not enough to see who has the most stable results. We need to check what standard deviation in relation with average value is. And that is Coefficient of variation.  \nAs usual we will create functions to get the coefficient and then to draw them, and we will do for Winter and Summer games.","66c8c304":"Now, it's time to merge Olympics, GDP, and Population data.","5bc4173b":"Looks like we have a good dataframe. Now, we need to merge the above list to the olympics participants.","de54aa6b":"How about the Winter seasons?","4e96166c":"And China.","523e129b":"As we can see, the dataset has 15 attributes such as ID, Name, Sex, Age, ..., NOC, Medal (if the athlete achieved any).  \nLet's have a look medals achieved per year when the Olympics events held.  \nFirst 10 events of the Olympic records.","ab0ebc5d":"# Relationship between Olympic events and population, GDP <a class=\"anchor\" id=\"olympic_pop_gdp\"><\/a>\nNow time to work with the population data.  \nFirst, we will need the years when the Olympic events held (of course we need only after 1993).","d4078e5d":"We separate the dataset into training and test sets.","944f3bda":"Likely, we will need to separate into two subset of data for each season. We will check the distribution of the athletes participating the events.  \nWe just need to work woth top 10 countries, and we will go for each season.\nLet's put them into a pie chartn with their name, medal points distribution.  \nHow about the medal points distribution in Summer?","26de0d8a":"Last, 10 events.","52c70aac":"Let's draw the GPD Worth per Medal points.  \nFor Summer events.","14223d20":"From here, we can see:\n- The population rate in Latvia is dropping, but the rate of participant is still contributing well.\n- Slovenia and New Zealand population increase together with the participant rate.","b6376f8c":"# References <a class=\"anchor\" id=\"references\"><\/a>\n- [120 years of Olympic history: athletes and results](https:\/\/www.kaggle.com\/heesoo37\/120-years-of-olympic-history-athletes-and-results)\n- [Let's discover more about the Olympic Games!](https:\/\/www.kaggle.com\/marcogdepinto\/let-s-discover-more-about-the-olympic-games)\n- [Olympic games results vs GDP vs Population](https:\/\/www.kaggle.com\/vhlaca\/olympic-games-results-vs-gdp-vs-population)\n- [World Bank Data (1960 to 2016)](https:\/\/www.kaggle.com\/gemartin\/world-bank-data-1960-to-2016)\n- [Olympic winner prediction - Athletics](https:\/\/www.kaggle.com\/jbhosal\/olympic-winner-prediction-athletics)\n- [World Happiness Report Analysis](https:\/\/www.kaggle.com\/sabihaif\/world-happiness-report-analysis)\n- [Olympics Data- Cleaning, Exploration, Prediction](https:\/\/www.kaggle.com\/chadalee\/olympics-data-cleaning-exploration-prediction)","af775d94":"How about Winter?","0a503af8":"For the Summer, likely New Zealand (4.18) has the highest participant rate.  \nFor the Winter, Slovenia and Latvia (both 2.81) are the most sporty.  \nLet's put them in to graph for beter visualization. ","0a278c2e":"And countries not competing in Olympics, but in GDP list","cb6df668":"## Summary about the findings <a class=\"anchor\" id=\"summary_pop_gdp\"><\/a>\n1. In terms of number of medals (or medal points) then Germany is most succesfull in Winter and United States in Summer\n2. In terms of stability of results, France is the winner in Summer and Norway in Winter.\n3. In terms of number of participants over population, the mosts are Slovenia and Latvia in Winter, and New Zealand for Summer.\n4. Some countries don't participate in Winter games, and it's understandable due to their country's nature, like tropical or hot, rainy weather.","4409bc1d":"Now, we will apply KNN first.","0c4a0abb":"Whoa, the graph looks nice with the bubbles (the bubble idea is copied from [Han Rosling](https:\/\/en.wikipedia.org\/wiki\/Hans_Rosling) - the Master of data visualization).  \nWe can see some large bubbles like US, China, Russia, Great Britain, Australia, Germany.  \nOlympic games are usually held into two seasons. Let's have a look if our assumption is correct.  \nNext, let see how the medals in each season.","1a53168f":"Just for fun, plot a Word Cloud map for the countries achieving medals!","a7782cf4":"Find the average medal points","ad367690":"There are problems with the name of countries. For example:  \n- 'Bahamas' vs 'Bahamas, The'\n- or 'British' vs 'Great Britain'\n- etc  \n\nWe need to convert those names based on the Olympics names, since we will need to merge with the Olympics data.","3d888b95":"The above graphs give us the overall view for all medals distribution between countries for both Summer and Winter events from 1994 to 2016. There's question that how about if we want to know which year which country performs best throughout their involvements in all Olympic games? Also, how can we know which team performs best in which season?  \nThese questions can help us to narrow down to the certain criteria of the success of each country.  \nBy doing so, we will need some functions to filter the countries.","591f3475":"We need a function to filter which year is best for which country regardless winter or summer.  \nHence, the function input will base on the given data and the season indicator.  \nAlso, we need to find out the minimal to drop rows that in best years do not have more then \"minimal\" number of medals points.  \nBy doing so, we will need an empty dataframe, list thru the countries, sort the value based on Season, Team, then concat them.  \nNote: Medal_points is type object, so, we ust change into float or int.","3d6d1dfa":"Let draw Coefficient Variation for Summer first.","fbb1b176":"We will fill in the null with the frequent values.","7f090b9e":"Next, we will use Random Forest model.","88019bac":"Similarly, we will have GDP data with corresponding years.","f9777111":"Let's have a look at the population.","c960a886":"# Introduction  <a class=\"anchor\" id=\"introduction\"><\/a>\nWe want to explore the Olympic dataset from [here](https:\/\/www.kaggle.com\/heesoo37\/120-years-of-olympic-history-athletes-and-results). This data has 15 attributes and more than 271k records.\nBeside of it, we would like to see if there's any relationship between the achieved medals with the country population, its GDP, life expectancy, fertility, and happiness.  \n- For the country population, fertility rate, and life expectancy, we have the data from [here](https:\/\/www.kaggle.com\/gemartin\/world-bank-data-1960-to-2016)\n- For the GDP we refer to the World Bank data [here](https:\/\/www.kaggle.com\/theworldbank\/world-bank-gdp-ranking)\n- For the Happiness, [this report](https:\/\/www.kaggle.com\/unsdsn\/world-happiness) gives us from 2015 to 2017.  \n\n# Exploration data analysis  <a class=\"anchor\" id=\"eda\"><\/a>\nLet's digging in.  \nFirst, we will import the necessary libraries, and prepare to load the data.","9ecf010a":"## Plotting and analyzing <a class=\"anchor\" id=\"plottinganalyzing\"><\/a>\nLet's have a look into the distributions of medals for countries.  \nWe will go thru from medal points to each type of medals, like Gold, Silver, and Bronze.","d056607d":"Well, some interesting points:\n- China did participate in some Winter seasons, but the success is far from the Summer seasons (23 vs 223).\n- Some countries had less than 5 medals in Winter seasons, but overall, the Summer achiements outperformed the Winter ones.\n- Winter has less events than Summer.\n- We cannot see which countries are on one or both.  \n\nWe need a combined graph to show both Summer and Winter events. To do that, we will separate countries into 2 groups, then get the best year for each. Ater that, we will merge them, then draw the graph.","a4f9ec12":"## Analyzing the relationship between Olympic achievement with population and GDP <a class=\"anchor\" id=\"analyzing_pop_gdp\"><\/a>\nNow, GDP and population data is with the Olympics data. However, a few questions are:\n- How can we know the rate of GDP per population, or per medal?\n- How can we measure the medal point worth according to the GDP?\n- What portion is the rate of medal on population?\n\nWe will need to add some features into the combined dataframe.","6d5a8bde":"Let see the difference between Summer and Winter events thru the number of games.","68573694":"## Table of content:\n* [Introduction](#introduction)\n* [Exploration data analysis](#eda)\n    * [Importing data](#importdata)\n    * [Groupping and filtering](#groupfilterdata)\n    * [Plotting and analyzing](#plottinganalyzing)\n* [Relationship between Olympic events and population, GDP](#olympic_pop_gdp)\n    * [Cleaning and merging data](#cleaningmerging)\n    * [Analyzing the relationship between Olympic achievement with population and GDP](#analyzing_pop_gdp)\n    * [Summary about the findings](#summary_pop_gdp)\n* [Predictions](#predictions)\n* [References](#references)","c4311239":"As we can see from the above, each country has its poupulation value across from 1960 to 2016.  \nAlso, each country has its country code, which is same as the NOC from the Olympic data.  \nHow about life expectancy of each country?","2bcc54a7":"United States for all seasons.","a4006407":"As far as we have only happiness data of 3 years: 2015, 2016, and 2017. So, we will focus on the year 2016.","cdd92579":"## Cleaning and merging data <a class=\"anchor\" id=\"cleaningmerging\"><\/a>\nNot all the countries in the GDP data are involving in the Olympics, we will need to filter those not participating in Olympics.","7c6d7b67":"How the confusion matrix looks?","fe2f1104":"By comparing to Medal points of Summer and Winter graphs, we can notice some points:\n- The last event (2016), the GDP is getting higher. This is explainable with growth of GDP over years.\n- The investment into Olympics events for the athletes is likely increasing.\n\nLet's have a comparison between GDP growth and Olympics success rate.  \nWe will test and analyse on few countries like: United States, Germany, China.","f052f5af":"Germany for all seasons.","fbc378cb":"# Predictions <a class=\"anchor\" id=\"predictions\"><\/a>\n\n- Find the average of gold medal in Summer and Winter\n- Label the classes as \"Good = 1\" and \"Bad = 0\"\n- Classify the models: Decision Tree, Random Forest (ensembling), KNN\n\nUsing 'combineddata' dataset as this data has countries, medal points, GDP, and population.  \nThe independent variables: GDP, Population, Team (country).  \nThe dependent variables: Medal (average).\n\nTo predict which country can perform good or bad.\n\nWe will:\n- Get the top 10 gold medals for each year\n- Get the average top 10 gold medal threshold\n\nDataset will be separated into 2 sets: training and test.\n\nThen we will apply 4 models, one-by-one, tuning the hyper parameters, then plot the complexity curve, 2 learning curves.  \nThen we will choose the final model based on the comparison of all 4 models above (AUC is included).","a1007a57":"## Importing data  <a class=\"anchor\" id=\"importdata\"><\/a>\nNow, we allocate the olympic data and let see few records.  \nBeside, as mentioned in the Olympic data [link](https:\/\/www.kaggle.com\/heesoo37\/120-years-of-olympic-history-athletes-and-results)  \n*Note that the Winter and Summer Games were held in the same year up until 1992. After that, they staggered them such that Winter Games occur on a four year cycle starting with 1994, then Summer in 1996, then Winter in 1998, and so on. A common mistake people make when analyzing this data is to assume that the Summer and Winter Games have always been staggered.*\n\nTherefore, we will use the data after 1993.","fedebc00":"**Conclusion on GDP and Olympics performance view**  \nAs we can see from the three graphs:\n- Germany and US have a stable GDP, but the performance is different between these two countries. US likely performs in a stable improvement, while Germany has some downgrade of the achievement.\n- China GDP grows fast, but the performance decreased after the outstanding success in 2008, regardless its GDP increasing.\n\nThere are some links between the GDP and Olympics, but it's fading, not so clear. However, in bigger picture, the GDP increment has some effects on the Olympics performance, since more investments can spare for the athletes, the competition becomes more challenging.  \n\nLet's have a look which country is the most sporty. In order to do that, we need to add a column indicating the value of participant per population of each country to the combineddata dataframe.","8b23ce2d":"Now, draw function to be called for Winter and Summer. Here, we will use barblot.","ef31d9f2":"Now, we have the best year value, we need to make a plot, let use the scatterplot. Two things we need to do:\n- Define max and min values of y axis based on the data\n- Loop thru rows and get the values, label on the scatter point.","f3b5319e":"Let's see if we have a smooth error curve or zic-zac curve.","5862b2e6":"Now we need to define the independent and dependent variables for our prediction models.\n- Independent variables will be: Medals, Medal points, UniqueParticipants (athletes), GDP, ParticipantPerPopulation\n- Dependent variables: Team number","fb7721b8":"For Winter events.","60f39d00":"We will go thru all countries participated in the Olympics. Meaning we have columns of years and columns of the country names. In that matrix, we will fill in: \n- Population for each year of that country, \n- And GDP of the country in that year.","38ca284a":"Clearly we can see more medals in the Summer events than the Winters.  \nSince, there's a big gap between Summer and Winter events, we need to separate the seasons to find the best year of each country. Why do we need this? Because we need to know which country performing in each season. After knowing this, we can combine the result with the GDP and population for further analysis to understand if there's any links between these.","706a1c33":"How about the Winter events? Similarly, we will apply the same approach from the summer analysis.","4c12d297":"NOC is here and we have NaN values to deal with.  \nFrom the GDP, we just need to know the ranking of countries in 2017","d013b55d":"Now, we can even go deeper into the data for further analysis like which country outperformed in which sport with medal points or Gold, or Silver, or Bronze.  \nHowever, right now, we are interesting in how the performance relating to the GDP and population of each country.  \nFirst, we need a function which gives us the result for all years of a country (let apply medal point threshold by 5, 1 Gold and 1 Silver).","5f52ea0a":"One thing we can see that the number of participating athletes does not totally reflect to the medals achievements, meaning to say the most athlete contributing country is not the dominance on the medal table.  \nFor example, from our calculation above with the medal points, China is the second place for medals. However, they mainly join the Summer events rather than the Winter events.","a9b0ff3c":"## Groupping and filtering data  <a class=\"anchor\" id=\"groupfilterdata\"><\/a>\nThe olympics data contains more than 271k records for all the individual participated in all events. In order to analyze further, we need to group the Team, Seasons to find out about the medal values.  \nAlso, some countries have multiple teams joining the events, for those, we need to generalize the country names accordingly.  \nThere're three types of medal: Gold, Silver, and Bronze. To easily find out which team\/country performs best in each event, we need to convert this Medal types category to numerical data. One simple approach is to assign a number to each medal type such as:\n- Gold = 3 points\n- Silver = 2 points\n- Bronze = 1 points","65729e56":"We have some values from 1960 to 2016, NOC is also defined. But, we need to deal with some NaN values.  \nLet's have a look at fertility rate of each country (Fertility rate indicates the number of children a woman would give birth to during her childbearing years)."}}