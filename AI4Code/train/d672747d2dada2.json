{"cell_type":{"0c5422fa":"code","75e8fc06":"code","6542628a":"code","812a9a7c":"code","1cfbb87e":"code","fa9db832":"code","85dd3536":"code","07004ed3":"code","9a6bfce5":"code","5f3619e1":"code","8c600f34":"code","44d9b2fc":"code","b5acc2e8":"code","b110941e":"code","eb0555c2":"code","23238006":"code","fe82dda6":"code","bc41ccd4":"code","4a549749":"code","8e7d579c":"code","9c14dd19":"code","d65adfff":"code","04bf255a":"code","b9f401a7":"code","972bfa03":"code","bcafc6fb":"code","965d11ae":"code","ac6d1f82":"code","599c3702":"code","898df726":"code","03571ef9":"code","a68f8b7d":"code","d353803c":"code","ac063054":"code","18e27f1d":"code","f277731e":"code","cede2e04":"code","15f612a4":"code","313e5b29":"code","8a960b68":"code","b1190e18":"code","f2f22745":"code","ee56c9f4":"code","8fec6426":"code","99548562":"code","f1075f1b":"code","1969309d":"code","86ad3abb":"code","bf83f2f3":"code","3e73d6a7":"code","a76eaaf6":"code","7e7d303c":"code","f0ab8b9f":"markdown","dd45245c":"markdown","80d97a16":"markdown","576b01dd":"markdown","1384c280":"markdown","883b6874":"markdown","afe74bd4":"markdown"},"source":{"0c5422fa":"import warnings\nwarnings.filterwarnings('ignore')","75e8fc06":"import numpy as np\nimport pandas as pd\nimport matplotlib\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","6542628a":"ds = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv', delimiter=',')","812a9a7c":"ds.head(3)","1cfbb87e":"ds.drop(['id'], axis=1, inplace=True)","fa9db832":"ds.stroke[ds.gender == 'Other']","85dd3536":"ds.drop([3116], inplace=True)","07004ed3":"ds.columns","9a6bfce5":"columns_numeric = ['age', 'avg_glucose_level', 'bmi']\ncolumns_categorical = ['gender', 'hypertension', 'heart_disease', 'ever_married', \n                       'work_type', 'Residence_type', 'smoking_status']\ncolumns_dummis = ['gender', 'ever_married', 'work_type', 'Residence_type', 'smoking_status']\ncolumns_target = ['stroke']","5f3619e1":"def replace_nan(data, to_replace, replacement_data):\n    \n    data_def = data.copy(deep=True)\n    \n    index_zero = list(data_def[to_replace][data_def[replacement_data] == 0].index)\n    index_one = list(data_def[to_replace][data_def[replacement_data] == 1].index)\n    \n    for i in range(2):\n        minimum = data_def[to_replace][data_def[replacement_data] == i].quantile(0.25)\n        maximum = data_def[to_replace][data_def[replacement_data] == i].quantile(0.75)\n        \n        minimum -= (maximum - minimum) * 0.5\n        maximum += (maximum - minimum) * 0.5\n    \n        count = data_def[to_replace][data_def[replacement_data] == i].isnull().sum()\n        \n        data_for_nan = np.random.choice(range(int(minimum), int(maximum)), count)\n    \n        if i == 0:\n            index_null = data_def[to_replace][index_zero][data_def[to_replace].isnull()].index\n        else:\n            index_null = data_def[to_replace][index_one][data_def[to_replace].isnull()].index\n        \n        data_def[to_replace][index_null] = data_for_nan\n        \n    return data_def","8c600f34":"ds = replace_nan(ds, 'bmi', 'stroke')","44d9b2fc":"ds.info()","b5acc2e8":"ds = pd.get_dummies(ds, columns=columns_dummis, prefix_sep='_', drop_first=True)","b110941e":"ds.head(3)","eb0555c2":"from sklearn.model_selection import train_test_split","23238006":"ds_train, ds_test = train_test_split(ds, test_size=0.3, random_state=42, stratify=ds.stroke)","fe82dda6":"ds_train.stroke.value_counts(normalize=True), ds_test.stroke.value_counts(normalize=True)","bc41ccd4":"ds_train.shape[0] + ds_test.shape[0], ds.shape","4a549749":"add_rows = int(ds_train.stroke.value_counts()[0] * .8 - ds_train.stroke.value_counts()[1])\nadd_rows","8e7d579c":"int(add_rows \/ ds_train.stroke.value_counts()[1]), ds_train.stroke.value_counts()","9c14dd19":"index_train_one = ds_train.stroke[ds_train.stroke == 1].index\nds_train_one = ds_train.loc[index_train_one]","d65adfff":"for i in range(14):\n    ds_train = ds_train.append(ds_train_one)\n    #y_train = pd.concat([y_train, y_train[y_train == 1]])","04bf255a":"ds_train.stroke.value_counts(normalize=True)","b9f401a7":"from sklearn.utils import shuffle","972bfa03":"ds_train = shuffle(ds_train)","bcafc6fb":"from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score, roc_auc_score, roc_curve","965d11ae":"def print_metrics(actual, predict):\n    print('Accuracy: {:.3f}'.format(accuracy_score(actual, predict)))\n    print('Precision: {:.3f}'.format(precision_score(actual, predict)))\n    print('Recall: {:.3f}'.format(recall_score(actual, predict)))\n    print('F1 score: {:.3f}'.format(f1_score(actual, predict)))","ac6d1f82":"def plot_roc_auc(actual, predict):\n    \n    fpr, tpr, threshold = roc_curve(actual, predict)\n    plt.plot(fpr, tpr, color='b')\n    #plt.plot()\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.plot([0.0, 1.0], [0.0, 1.0], color='r')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC AUC = {:.3f}'.format(roc_auc_score(actual, predict)))","599c3702":"from sklearn.ensemble import RandomForestClassifier","898df726":"%%time\nbest_f1 = []\nbest_recall = []\nbest_roc_auc = []\nbest_precision = [] \nx = []\nx_keys = []\nn = 0\n\nfor cr in ['gini', 'entropy']:\n    for mln in [5, 3, None]:\n        for mf in [1, 2, 3, 'auto']:\n            for boot in [True, False]:\n                model = RandomForestClassifier(n_estimators=1000, criterion=cr, max_leaf_nodes=mln, \n                                               max_features=mf, bootstrap=boot, random_state=16, n_jobs=-1)\n                \n                model.fit(ds_train.drop(['stroke'], axis=1), ds_train.stroke)\n                y_pred = model.predict(ds_test.drop(['stroke'], axis=1))\n                \n                f1 = f1_score(ds_test.stroke, y_pred)\n                best_f1.append(f1)\n                \n                recall = recall_score(ds_test.stroke, y_pred)\n                best_recall.append(recall)\n                \n                precision = precision_score(ds_test.stroke, y_pred)\n                best_precision.append(precision)\n                \n                y_pred_prob = model.predict_proba(ds_test.drop(['stroke'], axis=1))\n                roc_auc = roc_auc_score(ds_test.stroke, y_pred_prob[:, 1])\n                best_roc_auc.append(roc_auc)\n                \n                x_keys.append(str(cr) +' '+ str(mln) +' '+ str(mf) +' '+ str(boot))\n                x.append(n)\n                n += 1","03571ef9":"plt.figure(figsize=(15, 5))\nplt.plot(x, best_f1, c='r', label='f1')\nplt.plot(x, best_recall, c='b', label='recall')\nplt.plot(x, best_roc_auc, c='green', label='roc_auc')\nplt.plot(x, best_precision, c='yellow', label='precision')\nplt.legend()\nplt.show()","a68f8b7d":"data_score = {'f1': best_f1, 'recall': best_recall, 'precision': best_precision, 'roc_auc': best_roc_auc}","d353803c":"ds_scores = pd.DataFrame(data_score, index=x_keys)","ac063054":"plt.figure(figsize=(4, 11))\nsns.heatmap(ds_scores.sort_values(by=['f1'], ascending=False), annot=True, fmt='.3f');","18e27f1d":"model_rf = RandomForestClassifier(n_estimators=1000, criterion='gini', max_leaf_nodes=5, \n                                               max_features=1, bootstrap=False, random_state=16, n_jobs=-1)","f277731e":"model_rf.fit(ds_train.drop(['stroke'], axis=1), ds_train.stroke)","cede2e04":"y_pred = model_rf.predict(ds_test.drop(['stroke'], axis=1))","15f612a4":"print_metrics(ds_test.stroke, y_pred)","313e5b29":"y_pred_prob = model_rf.predict_proba(ds_test.drop(['stroke'], axis=1))","8a960b68":"plot_roc_auc(ds_test.stroke, y_pred_prob[:, 1])","b1190e18":"from sklearn.metrics import confusion_matrix","f2f22745":"conf_matrix = confusion_matrix(ds_test.stroke, y_pred)","ee56c9f4":"sns.heatmap(conf_matrix, cmap='Blues', annot=True, fmt='');","8fec6426":"f1_sc = []\nthreshold = []\nrec_sc = []\nprec_sc = []\n\nfor i in np.linspace(0.0, 1.0, 1000):\n    recall_sc = recall_score(ds_test.stroke, y_pred_prob[:, 1] > i)\n    precision_sc = precision_score(ds_test.stroke, y_pred_prob[:, 1] > i)\n    f_one = f1_score(ds_test.stroke, y_pred_prob[:, 1] > i)\n    f1_sc.append(f_one)\n    threshold.append(i)\n    rec_sc.append(recall_sc)\n    prec_sc.append(precision_sc)","99548562":"plt.figure(figsize=(15, 8))\nplt.plot(np.linspace(0.0, 1.0, 1000), rec_sc, color='b', label='recall')\nplt.plot(np.linspace(0.0, 1.0, 1000), prec_sc, color='r', label='precision')\nplt.plot(np.linspace(0.0, 1.0, 1000), f1_sc, color='green', label='f1')\nplt.legend(loc='upper right')\nplt.show()","f1075f1b":"ds_sc = pd.DataFrame({'threshold': threshold,'f1': f1_sc, 'recall': rec_sc, 'precision': prec_sc}, range(len(f1_sc)))","1969309d":"plt.figure(figsize=(7, 7))\nsns.heatmap(ds_sc.sort_values(by='f1',ascending=False)[:30], annot=True, fmt='.6f')\nplt.title('Table scores');","86ad3abb":"# optimal threshold\nthreshold[510]","bf83f2f3":"conf_matrix = confusion_matrix(ds_test.stroke, y_pred_prob[:, 1] > 0.5105105105105106)","3e73d6a7":"sns.heatmap(conf_matrix, cmap='Blues', annot=True, fmt='');","a76eaaf6":"print_metrics(ds_test.stroke, y_pred_prob[:, 1] > 0.5105105105105106)","7e7d303c":"featureImportance = pd.DataFrame({'feature': ds_train.drop(['stroke'], axis=1).columns, \n                                 'importance': model_rf.feature_importances_})\n\nfeatureImportance.set_index('feature', inplace=True)\n\nfeatureImportance.sort_values(inplace=True, ascending=False, by=['importance'])\n\nfeatureImportance.plot(kind='bar');","f0ab8b9f":"### ---------- Random Forest ------------------","dd45245c":"#### selection of parameters","80d97a16":"#### finding the optimal threshold","576b01dd":"### --------------- metrics ------------------------","1384c280":"#### We need to identify people susceptible to stroke.    \n#### We should be more interested in the metric recall and f1.","883b6874":"optimal model parameters:     \n    - criterion      -> gini      \n    - max_leaf_nodes -> 5     \n    - max_features   -> 1     \n    - bootstrap      -> False     \n\n","afe74bd4":"#### Feature Importance"}}