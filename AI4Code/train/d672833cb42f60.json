{"cell_type":{"ed9042f0":"code","8902a041":"code","27d08c25":"code","d56cee78":"code","f12ba11d":"code","60d71997":"code","4375afdd":"code","967715cf":"code","bebbca95":"code","314fbb92":"code","4ff657fe":"code","2bbbf867":"code","91525d63":"code","8c743eb3":"code","cdfdba80":"code","1041bb1b":"markdown","3f8537a2":"markdown"},"source":{"ed9042f0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8902a041":"import tensorflow as tf\nfrom tensorflow import keras","27d08c25":"(train_x, train_y), (test_x, test_y) = keras.datasets.mnist.load_data()\nprint(train_x.shape)\nprint(test_x.shape)","d56cee78":"from sklearn.model_selection import train_test_split\ntrain_x, val_x, train_y, val_y = train_test_split(train_x, train_y, test_size=0.2, random_state=42)","f12ba11d":"print('taining data:\\n',train_x.shape)\nprint('validation data:\\n',val_x.shape)\nprint('test data:\\n',test_x.shape)","60d71997":"train_x=tf.expand_dims(train_x,3)\nval_x=tf.expand_dims(val_x,3)\ntest_x=tf.expand_dims(test_x,3)\nprint('taining data:\\n',train_x.shape)\nprint('validation data:\\n',val_x.shape)\nprint('test data:\\n',test_x.shape)","4375afdd":"train_x = train_x \/ 255\nval_x= val_x\/255\ntest_x = test_x \/ 255","967715cf":"# convert class vectors to binary class matrices(categorical to numerical)\nnum_classes = 10\ntrain_y = keras.utils.to_categorical(train_y, num_classes)\nval_y = keras.utils.to_categorical(val_y, num_classes)\ntest_y = keras.utils.to_categorical(test_y, num_classes)","bebbca95":"print(train_y.shape)\nprint(val_y.shape)\nprint(test_y.shape)","314fbb92":"from keras.models import Sequential\nfrom keras.layers import Conv2D,AveragePooling2D,Dense,Flatten\nLenet_model=Sequential()\nLenet_model.add(Conv2D(6,kernel_size=(5, 5),activation='tanh',input_shape=train_x.shape[1:],padding='same'))\nLenet_model.add(AveragePooling2D(pool_size=(2, 2)))\nLenet_model.add(Conv2D(16,kernel_size=(5, 5),activation='tanh',padding='valid'))\nLenet_model.add(AveragePooling2D(pool_size=(2,2)))\nLenet_model.add(Flatten())\nLenet_model.add(Dense(120,activation='sigmoid'))\nLenet_model.add(Dense(10,activation='softmax'))\n\nLenet_model.compile(loss=keras.losses.categorical_crossentropy,optimizer='adam',metrics=['accuracy'])\n\nLenet_model.fit(train_x,train_y,epochs=5,validation_data=(val_x,val_y))","4ff657fe":"score = Lenet_model.evaluate(test_x, test_y, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","2bbbf867":"Lenet_model.fit(train_x,train_y,epochs=5,validation_data=(test_x,test_y))","91525d63":"score = Lenet_model.evaluate(test_x, test_y, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","8c743eb3":"Lenet_model.predict_classes(test_x)[0]","cdfdba80":"test_y[0]","1041bb1b":"# LeNet on MNIST Dataset","3f8537a2":"there are 60k images in the training data and each image has the size of 28 by 28 pixels.\n\nthere are 10k images in the training data and each image has the size of 28 by 28 pixels."}}