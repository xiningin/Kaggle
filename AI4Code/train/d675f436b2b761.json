{"cell_type":{"53f2eb37":"code","7804604a":"code","016f3a9e":"code","2eab9aa8":"code","59467045":"code","e4b31c8e":"code","dfef64a5":"code","ec95d385":"code","6918b5f5":"code","b0b40988":"code","1bc4154f":"code","64aa6f25":"code","bef0a1bb":"code","e2512137":"code","1ec4c6b6":"code","0bda40ef":"markdown","1b553603":"markdown","3dedc1a3":"markdown","178a469a":"markdown","a768e690":"markdown","a4b9e5ff":"markdown","df14b883":"markdown"},"source":{"53f2eb37":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport numpy as np\nimport datetime as dt\nimport scipy.optimize as opt\nfrom sklearn.metrics import mean_squared_error\nplt.rcParams['figure.max_open_warning'] = 0","7804604a":"### Parameters\n\n# lockdown_window\n#\n# We will be plotting countries that have implemented a lockdown.\n# This parameter selects the countries that will be plotted: those that\n# have been locked down for a specified number of days\n\nlockdown_window = 21 ","016f3a9e":"# Load the data\n\n# get_date_str\n#\n# Used to format dates for display\n\ndef get_date_str(d0,fmt='%d %b %Y'):\n   return pd.to_datetime(d0).strftime(fmt)\n    \n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\ndf_train    = None\ndf_test     = None\ndf_lockdown = None\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        file_path = os.path.join(dirname,filename)\n        if filename.startswith('train'):\n            df_train = pd.read_csv(file_path, index_col='Id')\n        if filename.startswith('test'):\n            df_test = pd.read_csv(file_path)\n        if filename.startswith('countryLockdowndates.csv'):\n            df_lockdown = pd.read_csv(file_path)\n \nprint ('Data from {0} to {1}'.format(get_date_str(df_train.Date.min()),get_date_str(df_train.Date.max())))\n","2eab9aa8":"# clean_up_gaps in df_train\n#\n# a function that deletes territories that contain gaps, \n# i.e. data was missing, so Johns Hopkins added a placeholder\n#\ndef clean_up_gaps(row):\n    print ('\\t{0}-{1}'.format(row.Country_Region,row.Province_State))\n    df_train.drop(df_train[(df_train.Country_Region==row.Country_Region) &\n                           (df_train.Province_State==row.Province_State)].index, inplace=True)\n    \ndf_train['Province_State'].fillna(' ',inplace=True)\n\nby_ctry_prov = df_train.groupby(['Country_Region','Province_State'])[['ConfirmedCases','Fatalities']]\ndf_train[['NewCases','NewFatalities']]= by_ctry_prov.transform(lambda x: x.diff().fillna(0))\n\ngapped_data = df_train[df_train.NewCases < 0]\n\nif len(gapped_data.Country_Region)>0:\n    print (\"Deleting data where there are gaps\")\n    gapped_data.apply(clean_up_gaps,axis='columns')","59467045":"# reporting_territory\n#\n# It will be useful to concatenate Country_Region and Province_State\n\ndef reporting_territory(row):\n    if pd.isna(row.Province_State) or len(row.Province_State.strip())==0:\n        return row.Country_Region\n    else:\n        return row.Country_Region + '-'+row.Province_State\n    \ndf_train['Reporting_Territory'] = df_train.apply(reporting_territory,axis='columns')\ndf_train[\"Day\"]                 = pd.to_datetime(df_train[\"Date\"]).astype(int)","e4b31c8e":"# Get rid of undefined fields\nhas_null        = df_lockdown.Date.isnull()|df_lockdown.Type.isnull()|df_lockdown.Reference.isnull()\nrows_with_nulls = df_lockdown.loc[has_null,:].index\ndf_lockdown.drop(rows_with_nulls,inplace=True)\n    \n# Eliminate nans (especially from Province)\ndf_lockdown.replace(np.nan, '', regex=True,inplace=True)\nprint ('We have lockdown data for {0} countries'.format(df_lockdown.shape[0]))\n\n# Harmonize column names with infection and death data\n\ndf_lockdown.rename(columns={\"Country\/Region\":\"Country_Region\",\n                            \"Province\": \"Province_State\"},\n                   inplace=True)\n\ndf_lockdown['Reporting_Territory'] = df_lockdown.apply(reporting_territory,axis='columns')\n    \n    \n# fix error in datafile (was '23\/3030')\n#df_lockdown.loc[df_lockdown.Reporting_Territory=='US-Ohio',['Date']]=\"23\/03\/2020\"\n \ndf_lockdown[\"Day\"]  = df_lockdown[\"Date\"].map(lambda x:pd.to_datetime(x,format='%d\/%m\/%Y'), na_action='ignore')\n","dfef64a5":"# Delete lockdown records where there are gaps in infections & deaths\n# so we don't get spurious mismatches\n\ndef remove_lockdown_gaps(row):\n    df_lockdown.drop(\n        df_lockdown[(df_lockdown.Country_Region==row.Country_Region) &\n                         (df_lockdown.Province_State==row.Province_State)].index,\n                    inplace=True)\n    \nif len(gapped_data.Country_Region)>0:\n    print (\"Deleting lockdown records where there are gaps in infections & deaths\")\n    gapped_data.apply(remove_lockdown_gaps,axis='columns')\n    \ndf_territories = df_lockdown.merge(df_train,on=['Reporting_Territory','Reporting_Territory']).Reporting_Territory.unique()\n\nprint ('Unmatched Lockdown records')\nfor territory in df_lockdown[~df_lockdown.Reporting_Territory.isin(df_territories)].Reporting_Territory:\n    print ('\\t{0}'.format(territory))\n    \nprint ('\\nUnmatched Infection and Death records (treat these as not locked down)')\nfor territory in df_train[~df_train.Reporting_Territory.isin(df_territories)].Reporting_Territory.unique():\n    print ('\\t{0}'.format(territory))\n\n# A few adhoc fixes for states\n#     Guernsey\n#     Jersey\n#     Palestine\n#     Vatican City\ndf_lockdown.loc[df_lockdown.Country_Region=='Guernsey',['Reporting_Territory']]=\"United Kingdom-Channel Islands\"\ndf_lockdown.loc[df_lockdown.Country_Region=='Palestine',['Reporting_Territory']]=\"West Bank and Gaza\"\ndf_lockdown.loc[df_lockdown.Country_Region=='Vatican City',['Reporting_Territory']]=\"Holy See\"\n","ec95d385":"# get_date_ticks\n#\n# This is used to declutter date access\n\ndef get_date_ticks(df,ngaps=7):\n    dates    = df.Date.unique()\n    n        = len(dates)-1\n    stepsize = int(n\/ngaps)\n    return [dates[i] for i in range(0,n+1,stepsize)]\n\n# get_date_range\n#\n# This is for the title\n\ndef get_date_range(df):\n    return '{0} - {1}'.format(get_date_str(df.Date.min()),get_date_str(df.Date.max()))","6918b5f5":"# get_lockdown_status\n#\n# Find out whether specified territory has been locked down\n\ndef get_lockdown_status(territory):\n\n    status = 'Not locked down'\n    date   = None \n\n    rec = df_lockdown.loc[df_lockdown.Reporting_Territory==territory,\"Day\"]\n\n    if len(rec)>0:\n        status = 'Locked down'\n        date = rec.values[0]\n \n    return (status,date)","b0b40988":"# get_title\n#\n# Generate title for a plot\n\ndef get_title(country_region,date_range,scaling='Confirmed'):\n    status, date = get_lockdown_status(country_region)\n    if status == 'Locked down':\n        return '{0} Cases from {1}: {2}. {3} {4}.'.format(scaling,\n                                                        country_region,\n                                                        date_range,\n                                                        status,\n                                                        get_date_str(date))\n    else:\n        return '{0} Cases from {1}: {2}. {3}.'.format(scaling,\n                                                        country_region,\n                                                        date_range,\n                                                        status)","1bc4154f":"# get_first_reported_case\n#\n# Find date that first case was deteced in a territory\n\ndef get_first_reported_case(territory):\n   first_cases = df_train.loc[df_train.ConfirmedCases>0,[\"Reporting_Territory\",\"Day\"]].groupby(['Reporting_Territory']).min()\n   return first_cases.loc[territory,['Day']].values[0]\n","64aa6f25":"# plot_country\n#\n# Plot data for specified territory\n\ndef plot_country(territory = 'New Zealand',save_figure=False):\n    first_reported_case = get_first_reported_case(territory)\n    country_data        = df_train.loc[(df_train.Reporting_Territory==territory) & (df_train.Day>=first_reported_case),:]\n\n    _, lockdown_date    = get_lockdown_status(territory)\n\n    dates       = country_data.Date\n    cases       = country_data.ConfirmedCases\n \n    locked_down = [\"Locked down\" if l else \"Pre-lock down\" for l in pd.to_datetime(country_data.Date) >= lockdown_date]\n \n    plt.figure(figsize=(20,6))\n    sns.set_palette(\"RdBu_r\",1)\n    \n    # Workaround in case all data has been locked down or not\n    \n    if locked_down[0]!=locked_down[-1]:\n        sns.scatterplot(x=dates,y=cases,hue=locked_down,style=locked_down,palette=['r','b'])\n    else: \n        sns.scatterplot(x=dates,y=cases,hue=locked_down,style=locked_down,palette=['b'])\n        \n    plt.title(get_title(territory, get_date_range(country_data)))\n    plt.xticks(get_date_ticks(country_data))\n    \n    if save_figure:\n        plt.savefig(territory)\n\nplot_country()\nplot_country(territory='Italy')","bef0a1bb":"def plot_country_ignore_error(territory,save_figure=False):\n    try:\n        plot_country(territory=territory.Reporting_Territory,save_figure=save_figure)\n    except:\n        print ('Failed to process {0}'.format(territory.Reporting_Territory))\n\ncutoff_date = dt.datetime.today() -  dt.timedelta(days=lockdown_window)\n\n_=df_lockdown.loc[df_lockdown.Day<cutoff_date,:].apply(plot_country_ignore_error,axis='columns')","e2512137":"def logistic_function(x, a, b, x0,d):\n    return a\/(1+np.exp(-b*(x-x0))) + d \n\n\n\ndef fit_logistic(territory = 'China-Anhui'):\n    first_reported_case = get_first_reported_case(territory)\n    country_data        = df_train.loc[(df_train.Reporting_Territory==territory) & (df_train.Day>=first_reported_case),:]\n    dates               = [d for d in range(len(country_data.Day.values))]\n    final_cases         = country_data.ConfirmedCases.values.max()\n    cases               = country_data.ConfirmedCases.values\/final_cases\n    (a, b, x0,d), _     = opt.curve_fit(logistic_function, dates, cases)\n    prediction          = [final_cases* logistic_function(x, a, b, x0,d) for x in dates]\n    rms_error           = np.sqrt(mean_squared_error(country_data.ConfirmedCases.values,prediction))\n    \n    plt.figure(figsize=(20,6))\n    plt.plot(country_data.Date,country_data.ConfirmedCases,c='b',label='Confirmed Cases')\n    plt.plot(country_data.Date,prediction,c='r',label='Predicted cases')\n    plt.xticks(get_date_ticks(country_data))\n    plt.suptitle('Fitting {0}'.format(territory))\n    plt.title('a={0}, b={1}, x0={2}, d={3}. RMS error={4:.0f}'.format (a, b, round(x0),d, rms_error ))\n    plt.legend()\n    \nfit_logistic()\n#fit_logistic(territory = 'China-Fujian')\n#fit_logistic(territory = 'China-Guangdong')\n#fit_logistic(territory = 'New Zealand')\n","1ec4c6b6":"def fit_logistic_ignore_error(territory):\n    try:\n        fit_logistic(territory=territory.Reporting_Territory)\n    except:\n        print ('Failed to process {0}'.format(territory.Reporting_Territory))\n        \n_=df_lockdown.loc[df_lockdown.Day<cutoff_date,:].apply(fit_logistic_ignore_error,axis='columns')","0bda40ef":"# Effect of Lockdown\n\nThis notebook was created to help me understand the effect of lockdown.\n* Does it reduce growth of number of confirmed cases?\n* How long does it take to show an effect?\n\nTO DO:\n1. Build model for lockdown.\n1. Many countries have a logistic curve; is this true for all countries that have locked down long enough?\n1. How long is \"long enough\".","1b553603":"# Plot data for specified countries","3dedc1a3":"## Find mismatches\n*  Lockdown records that are not in Infections & Deaths\n*  Infections & Deaths records that are not in Lockdown","178a469a":"## Plot countries that have been locked down for more than *lockdown_window* days","a768e690":"Fit logistic function to data\n$\\frac{a}{1 + e^{-b(x-x_0)} }+ d$","a4b9e5ff":"## We need to harmonize the lockdown data with the infections and deaths","df14b883":"## Clean up the historical data for number of cases and deaths"}}