{"cell_type":{"c322cdc1":"code","5692244b":"code","17d94fe3":"code","7c738796":"code","91cff8f1":"code","9554f3da":"code","3ac2c81e":"code","1a272c13":"code","ef22c2b6":"code","cb488d66":"code","8215fc7f":"code","c82f2997":"code","8e823060":"code","1f2ed16c":"code","35e17d01":"code","155fa2c8":"code","65daede5":"code","ea0f672c":"code","853b68f5":"code","49b363f7":"code","d122f2a8":"code","6196cbee":"code","2e4b13ba":"code","bc6bc26a":"code","8248afed":"code","cb5e72bc":"code","fe00ea94":"code","25bb413e":"code","33d75a9e":"code","b91ef3f6":"code","e90bcf5f":"code","54c27b6d":"code","72f4ccd1":"code","6d0524b6":"code","80f6345f":"code","fbe0e71f":"code","272cb5e0":"code","999167ac":"code","45b13c84":"code","133ad680":"code","7b54998f":"code","bda91d51":"code","a378bf0a":"code","9528ad94":"code","bec30d53":"code","55b0dba1":"markdown","e86f7ae2":"markdown","e0efdf52":"markdown","06572ff5":"markdown","5aea5e01":"markdown","86b11d88":"markdown","cb2a9bd4":"markdown","7e21bd69":"markdown","48228042":"markdown","b2175a28":"markdown","175ca032":"markdown","a07de0f1":"markdown","0e84ddad":"markdown","064340b9":"markdown","e19c8555":"markdown","0496b854":"markdown","9814a314":"markdown","02c6b48c":"markdown","72f967c3":"markdown","2be63361":"markdown","2875fa15":"markdown","668ef38f":"markdown","976d9278":"markdown","89f8db20":"markdown","6d1d64fc":"markdown","72c19d9f":"markdown","66053ac4":"markdown","4be68325":"markdown","f56e0099":"markdown","421074aa":"markdown","e6633684":"markdown","4a8b9419":"markdown","80eea5ff":"markdown","e638ffb5":"markdown","5f1b2210":"markdown","9846f17f":"markdown","a588e1ba":"markdown","1e8ce762":"markdown","93652e08":"markdown","72a48c33":"markdown","bc8b2d59":"markdown","f916ebc3":"markdown","32f2bb31":"markdown","b84ee495":"markdown","96d78dfe":"markdown","c6161ffa":"markdown","81cb15de":"markdown","ddb31c7b":"markdown","ab851094":"markdown","317203c9":"markdown","608c2b9f":"markdown","1b62ecff":"markdown","3c1f0cd6":"markdown","74ead962":"markdown","331a1d58":"markdown","4d7eaee1":"markdown","cc13fbcf":"markdown","e4b2ed33":"markdown"},"source":{"c322cdc1":"%matplotlib inline\nfrom matplotlib import pyplot as plt\nplt.rcParams['figure.figsize'] = (10, 8)\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nimport collections\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn import preprocessing\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom ipywidgets import Image\nfrom io import StringIO\nimport pydotplus #pip install pydotplus","5692244b":"# Create dataframe with dummy variables\ndef create_df(dic, feature_list):\n    out = pd.DataFrame(dic)\n    out = pd.concat([out, pd.get_dummies(out[feature_list])], axis = 1)\n    out.drop(feature_list, axis = 1, inplace = True)\n    return out\n\n# Some feature values are present in train and absent in test and vice-versa.\ndef intersect_features(train, test):\n    common_feat = list( set(train.keys()) & set(test.keys()))\n    return train[common_feat], test[common_feat]","17d94fe3":"features = ['Looks', 'Alcoholic_beverage','Eloquence','Money_spent']","7c738796":"df_train = {}\ndf_train['Looks'] = ['handsome', 'handsome', 'handsome', 'repulsive',\n                         'repulsive', 'repulsive', 'handsome'] \ndf_train['Alcoholic_beverage'] = ['yes', 'yes', 'no', 'no', 'yes', 'yes', 'yes']\ndf_train['Eloquence'] = ['high', 'low', 'average', 'average', 'low',\n                                   'high', 'average']\ndf_train['Money_spent'] = ['lots', 'little', 'lots', 'little', 'lots',\n                                  'lots', 'lots']\ndf_train['Will_go'] = LabelEncoder().fit_transform(['+', '-', '+', '-', '-', '+', '+'])\n\ndf_train = create_df(df_train, features)\ndf_train","91cff8f1":"df_test = {}\ndf_test['Looks'] = ['handsome', 'handsome', 'repulsive'] \ndf_test['Alcoholic_beverage'] = ['no', 'yes', 'yes']\ndf_test['Eloquence'] = ['average', 'high', 'average']\ndf_test['Money_spent'] = ['lots', 'little', 'lots']\ndf_test = create_df(df_test, features)\ndf_test","9554f3da":"# Some feature values are present in train and absent in test and vice-versa.\ny = df_train['Will_go']\ndf_train, df_test = intersect_features(train=df_train, test=df_test)\ndf_train","3ac2c81e":"df_test","1a272c13":"dt = DecisionTreeClassifier(criterion='entropy', random_state=17)\ndt.fit(df_train, y);","ef22c2b6":"dot_data = StringIO()\nexport_graphviz(dt, feature_names = df_train.columns, out_file=dot_data,\n                filled=True) \ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())\nImage(value=graph.create_png())","cb488d66":"balls = [1 for i in range(9)] + [0 for i in range(11)]","8215fc7f":"# two groups\nballs_left  = [1 for i in range(8)] + [0 for i in range(5)] # 8 blue and 5 yellow\nballs_right = [1 for i in range(1)] + [0 for i in range(6)] # 1 blue and 6 yellow","c82f2997":"from math import log\n    \ndef entropy(a_list):\n    lst = list(a_list)\n    size = len(lst) * 1.0\n    entropy = 0\n    set_elements = len(set(lst))\n    if set_elements in [0,1]:\n        return 0\n    for i in set(lst):\n        occ = lst.count(i)\n        entropy -= occ\/size * log (occ\/size,2)\n    return entropy","8e823060":"print(entropy(balls)) # 9 blue \u0438 11 yellow\nprint(entropy(balls_left)) # 8 blue \u0438 5 yellow\nprint(entropy(balls_right)) # 1 blue \u0438 6 yellow\nprint(entropy([1,2,3,4,5,6])) # entropy of a fair 6-sided die","1f2ed16c":"# information gain calculation\ndef information_gain(root, left, right):\n    ''' root - initial data, left and right - two partitions of initial data'''\n        \n    return entropy(root) - 1.0 * len(left) \/ len(root) * entropy(left) \\\n                         - 1.0 * len(right) \/ len(root) * entropy(right) ","35e17d01":"print(information_gain(balls, balls_left, balls_right))","155fa2c8":"def best_feature_to_split(X, y):\n    '''Outputs information gain when splitting on best feature'''\n    out = []\n    for i in X.columns:\n        out.append(information_gain(y,y[X[i] == 0], y[X[i] == 1]))\n    return out","65daede5":"best_feature_to_split(df_train, y)","ea0f672c":"def btree(X,y):\n    clf = best_feature_to_split(X, y)\n    param = clf.index(max(clf))\n    ly = y[X.iloc[:,param] == 0]\n    ry = y[X.iloc[:,param] == 1]\n    print ('Column_' + str(param) + ' N\/Y?')\n    print ('Entropy: ',entropy (ly), entropy (ry))\n    print ('N count:',ly.count(),'\/', 'Y count:',ry.count())\n    if entropy (ly) != 0:\n        left = X[X.iloc[:,param] == 0]\n        btree(left, ly)\n    if entropy (ry) != 0:\n        right = X[X.iloc[:,param] == 1]\n        btree(right, ry)","853b68f5":"btree (df_train,y)","49b363f7":"data_train = pd.read_csv('..\/input\/adult.csv', names=['age', 'workclass', 'fnlwgt', 'education', 'education-num', 'marital-status', 'occupation',\n                                                     'relationship', 'race', 'sex', 'capital-gain', 'capital-loss', 'hours-per-week', 'native-country', 'Target'])","d122f2a8":"data_train.tail()","6196cbee":"# encode target variable as integer\ndata_train.loc[data_train['Target']==' <=50K', 'Target'] = 0\ndata_train.loc[data_train['Target']==' >50K', 'Target'] = 1","2e4b13ba":"data_train['Target'].value_counts()","bc6bc26a":"fig = plt.figure(figsize=(25, 15))\ncols = 5\nrows = np.ceil(float(data_train.shape[1]) \/ cols)\nfor i, column in enumerate(data_train.columns):\n    ax = fig.add_subplot(rows, cols, i + 1)\n    ax.set_title(column)\n    if data_train.dtypes[column] == np.object:\n        data_train[column].value_counts().plot(kind=\"bar\", axes=ax)\n    else:\n        data_train[column].hist(axes=ax)\n        plt.xticks(rotation=\"vertical\")\nplt.subplots_adjust(hspace=0.7, wspace=0.2)","8248afed":"data_train.dtypes","cb5e72bc":"# choose categorical and continuous features from data\n\ncategorical_columns = [c for c in data_train.columns \n                       if data_train[c].dtype.name == 'object']\nnumerical_columns = [c for c in data_train.columns \n                     if data_train[c].dtype.name != 'object']\n\nprint('categorical_columns:', categorical_columns)\nprint('numerical_columns:', numerical_columns)","fe00ea94":"# fill missing data\n\nfor c in categorical_columns:\n    data_train[c].fillna(data_train[c].mode(), inplace=True)\n    \nfor c in numerical_columns:\n    data_train[c].fillna(data_train[c].median(), inplace=True)","25bb413e":"data_train = pd.concat([data_train[numerical_columns],\n    pd.get_dummies(data_train[categorical_columns])], axis=1)","33d75a9e":"data_train.shape","b91ef3f6":"data_train.head(2)","e90bcf5f":"X = data_train.drop('Target', axis=1)\ny = data_train['Target']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","54c27b6d":"tree = DecisionTreeClassifier(max_depth=3, random_state=17)\ntree.fit(X_train, y_train)","72f4ccd1":"tree_predictions = tree.predict(X_test) ","6d0524b6":"accuracy_score(y_test,tree_predictions)","80f6345f":"tree_params = {'max_depth': range(2, 11)}\n\nlocally_best_tree = GridSearchCV(DecisionTreeClassifier(random_state=17),\n                                 tree_params, cv=5)                  \n\nlocally_best_tree.fit(X_train, y_train)","fbe0e71f":"print(\"Best params:\", locally_best_tree.best_params_)\nprint(\"Best cross validaton score\", locally_best_tree.best_score_)","272cb5e0":"tuned_tree = DecisionTreeClassifier(max_depth=9, random_state=17)\ntuned_tree.fit(X_train, y_train)\ntuned_tree_predictions = tuned_tree.predict(X_test)\naccuracy_score(y_test, tuned_tree_predictions)","999167ac":"rf = RandomForestClassifier(n_estimators=100, random_state=17)\nrf.fit(X_train, y_train)","45b13c84":"cv_scores = cross_val_score(rf, X_train, y_train, cv=3)","133ad680":"cv_scores, cv_scores.mean()","7b54998f":"forest_predictions = rf.predict(X_test) ","bda91d51":"accuracy_score(y_test,forest_predictions)","a378bf0a":"forest_params = {'max_depth': range(10, 16),\n                 'max_features': range(5, 105, 20)}\n\nlocally_best_forest = GridSearchCV(RandomForestClassifier(n_estimators=10, random_state=17,\n                                                         n_jobs=-1),\n                                   forest_params, cv=3, verbose=1)\n\nlocally_best_forest.fit(X_train, y_train)","9528ad94":"print(\"Best params:\", locally_best_forest.best_params_)\nprint(\"Best cross validaton score\", locally_best_forest.best_score_)","bec30d53":"tuned_forest_predictions = locally_best_forest.predict(X_test) \naccuracy_score(y_test,tuned_forest_predictions)","55b0dba1":"3\\. What is the entropy of the state given by the list **balls_left**?","e86f7ae2":"#### Creating the dataset","e0efdf52":"#### Fill in missing data for continuous features with their median values and for categorical features with their mode.","06572ff5":"#### Train a decision tree using sklearn on the training data. You may choose any depth for the tree.","5aea5e01":"4\\. What is the entropy of a fair dice? (where we look at a dice as a system with 6 equally probable states)?","86b11d88":"Make predictions for the test data.","cb2a9bd4":"### 3.2 Decision tree with parameter tuning","7e21bd69":"We'll go through a toy example of binary classification - Person A is deciding whether they will go on a second date with Person B. It will depend on their looks, eloquence, alcohol consumption (only for example), and how much money was spent on the first date.","48228042":"#### Test data","b2175a28":"### 3.1 Decision tree without parameter tuning","175ca032":"Let's take a sneak peek of upcoming lectures and try to use a random forest for our task. For now, you can imagine a random forest as a bunch of decision trees, trained on slightly different subsets of the training data.","a07de0f1":"<img src='https:\/\/habrastorage.org\/webt\/bd\/aq\/5w\/bdaq5wi3c4feezaexponvin8wmo.png'>","0e84ddad":"We'll dummy code some categorical features: **Workclass**, **Education**, **Martial_Status**, **Occupation**, **Relationship**, **Race**, **Sex**, **Country**. It can be done via pandas method **get_dummies**","064340b9":"#### Implement a function to calculate the Shannon Entropy","e19c8555":"Your goal is to figure out how decision trees work by walking through a toy problem. While a single decision tree does not yield outstanding results, other performant algorithms like gradient boosting and random forests are based on the same idea. That is why knowing how decision trees work might be useful.","0496b854":"<font color='red'>Answer:<\/font> 0.847","9814a314":"### Part 2. Functions for calculating entropy and information gain.","02c6b48c":"5\\. What is the information gain from splitting the initial dataset into **balls_left** and **balls_right** ?","72f967c3":"Next split the balls into two groups:","2be63361":"#### Draw a decision tree (by hand or in any graphics editor) for this dataset. Optionally you can also implement tree construction and draw it here.","2875fa15":"Consider the following warm-up example: we have 9 blue balls and 11 yellow balls. Let ball have label **1** if it is blue, **0** otherwise.","668ef38f":"#### Reading train and test data","976d9278":"<img src = 'https:\/\/habrastorage.org\/webt\/mu\/vl\/mt\/muvlmtd2njeqf18trbldenpqvnm.png'>","89f8db20":"#### Dataset description:","6d1d64fc":"1\\. What is the entropy $S_0$ of the initial system? By system states, we mean values of the binary feature \"Will_go\" - 0 or 1 - two states in total.","72c19d9f":"6\\. What is the test set accuracy of a decision tree with maximum tree depth of 3 and **random_state = 17**?","66053ac4":"2\\. Let's split the data by the feature \"Looks_handsome\". What is the entropy $S_1$ of the left group - the one with \"Looks_handsome\". What is the entropy $S_2$ in the opposite group? What is the information gain (IG) if we consider such a split?","4be68325":"<font color='red'>Answer:<\/font> 0.161","f56e0099":"**Target** \u2013 earnings level, categorical (binary) feature.","421074aa":"[Dataset](http:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/adult) UCI Adult : classify people using demographical data - whether they earn more than \\$50,000 per year or not.","e6633684":"### 3.4  Random forest with parameter tuning","4a8b9419":"### **Part 1. Toy dataset \"Will They?Won't they?\"","80eea5ff":"#### Primary data analysis","e638ffb5":"#### Additional: display the resulting tree using graphviz. You can use pydot or [web-service](https:\/\/www.coolutils.com\/ru\/online\/DOT-to-PNG) dot2png.","5f1b2210":"Train a random forest **(RandomForestClassifier)**. Set the number of trees to 100 and use **random_state = 17**.","9846f17f":"Perfrom cross-validation.","a588e1ba":"Train a decision tree **(DecisionTreeClassifier)** with a maximum depth of 3, and evaluate the accuracy metric on the test data. Use parameter **random_state = 17** for results reproducibility.","1e8ce762":"Feature descriptions:","93652e08":"<font color='red'>Answer:<\/font> 0.961","72a48c33":"Train a decision tree **(DecisionTreeClassifier, random_state = 17).** Find the optimal maximum depth using 5-fold cross-validation **(GridSearchCV)**.","bc8b2d59":"7\\. What is the test set accuracy of a decision tree with maximum depth of 9 and **random_state = 17**?","f916ebc3":"### Part 3. The \"Adult\" dataset","32f2bb31":"<font color='red'>Answer: <\/font>  $S_0 = -\\frac{3}{7}\\log_2{\\frac{3}{7}}-\\frac{4}{7}\\log_2{\\frac{4}{7}} = 0.985$.","b84ee495":"With some tuning we made a forest of 10 trees perform better than a forest of 100 trees with default hyperparameter values.","96d78dfe":"Tests","c6161ffa":"Train a decision tree with maximum depth of 9 (it is the best **max_depth** in my case), and compute the test set accuracy. Use parameter **random_state = 17** for reproducibility.","81cb15de":"## Let's start by loading all necessary libraries:","ddb31c7b":"Make predictions for the test data.","ab851094":"### 3.3  Random forest without parameter tuning","317203c9":"<font color='red'>Answer: <\/font> $S_1 = -\\frac{1}{4}\\log_2{\\frac{1}{4}}-\\frac{3}{4}\\log_2{\\frac{3}{4}} = 0.811$, $S_2 = -\\frac{2}{3}\\log_2{\\frac{2}{3}}-\\frac{1}{3}\\log_2{\\frac{1}{3}} = 0.918$, $IG = S_0-\\frac{4}{7}S_1-\\frac{3}{7}S_2 = 0.128$.","608c2b9f":"# Want to know how decision tree works?","1b62ecff":"<font color='red'>Answer:<\/font> 2.585","3c1f0cd6":"#### Optional:\n- Implement a decision tree building algorithm by calling **best_feature_to_split** recursively\n- Plot the resulting tree","74ead962":"Make a prediction with the trained model on the test data.","331a1d58":"- **Age** \u2013 continuous feature\n- **Workclass** \u2013  continuous feature\n- **fnlwgt** \u2013 final weight of object, continuous feature\n- **Education** \u2013  categorical feature\n- **Education_Num** \u2013 number of years of education, continuous feature\n- **Martial_Status** \u2013  categorical feature\n- **Occupation** \u2013  categorical feature\n- **Relationship** \u2013 categorical feature\n- **Race** \u2013 categorical feature\n- **Sex** \u2013 categorical feature\n- **Capital_Gain** \u2013 continuous feature\n- **Capital_Loss** \u2013 continuous feature\n- **Hours_per_week** \u2013 continuous feature\n- **Country** \u2013 categorical feature","4d7eaee1":"Train a random forest **(RandomForestClassifier)** of 10 trees. Tune the maximum depth and maximum number of features for each tree using **GridSearchCV**. ","cc13fbcf":"#### Training data","e4b2ed33":"#### Checking data types"}}