{"cell_type":{"305caa16":"code","dccc7874":"code","b51e6671":"code","260e591f":"code","37c6604d":"code","5b373239":"code","bff76c1f":"code","8bc402f7":"code","c5c2e762":"code","60e15dd8":"code","17f935d8":"code","a811b9e4":"code","50b26ee2":"code","9116787f":"code","c6d43033":"code","211e3dfc":"code","e3234f54":"code","f74ddddb":"code","63c37f8a":"code","31aec5be":"code","5693d5dd":"code","7994b4e7":"code","9ac45a86":"code","79aa6538":"code","9eb9c0c0":"code","81c84411":"code","50c9e587":"code","e7e85fbd":"code","122b7f96":"code","5f523931":"markdown","7e950273":"markdown","e68ca237":"markdown","22fa2a86":"markdown"},"source":{"305caa16":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom wordcloud import WordCloud\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dccc7874":"personality = pd.read_csv('..\/input\/big-five-personality-test\/IPIP-FFM-data-8Nov2018\/data-final.csv', sep='\\t')\npersonality\n","b51e6671":"personality.head()","260e591f":"personality.tail()","37c6604d":"personality.describe()","5b373239":"personality.dtypes\n","bff76c1f":"personality.info()","8bc402f7":"personality.shape","c5c2e762":"personality.columns\npersonality.columns.to_list()","60e15dd8":"pd.options.display.max_columns = 150\n\npersonality.drop(personality.columns[50:107], axis=1, inplace=True)\npersonality.drop(personality.columns[51:], axis=1, inplace=True)\n\nprint('Number of participants: ', len(personality))\npersonality.head()","17f935d8":"#Check Missing Value\nprint('Is there any missing value? ', personality.isnull().values.any())\nprint('How many missing values? ', personality.isnull().values.sum())\npersonality.dropna(inplace=True)\nprint('Number of participants after eliminating missing values: ', len(personality))","a811b9e4":"countries = pd.DataFrame(personality['country'].value_counts())\ncountries_5000 = countries[countries['country'] >= 5000]\nplt.figure(figsize=(15,5))\nsns.barplot(data=countries_5000, x=countries_5000.index, y='country')\nplt.title('Countries With More Than 5000 Participants')\nplt.ylabel('Participants');","50b26ee2":"plt.figure(figsize=[15,15])\nfft=['EXT1','EXT2','EXT3','EXT4','EXT5','EXT6','EXT7','EXT8','EXT9','EXT10']\nn=1\nfor f in fft:\n    plt.subplot(5,2,n)\n    sns.countplot(x=f,  edgecolor=\"black\", alpha=0.7, data=personality)\n    sns.despine()\n    plt.title(\"Q&As Related to Extroversion Personality : {} \".format(f))\n    n=n+1\nplt.tight_layout()\nplt.show()","9116787f":"plt.figure(figsize=[15,15])\nfft=['EST1','EST2','EST3','EST4','EST5','EST6','EST7','EST8','EST9','EST10']\nn=1\nfor f in fft:\n    plt.subplot(5,2,n)\n    sns.countplot(x=f,  edgecolor=\"black\", alpha=0.7, data=personality)\n    sns.despine()\n    plt.title(\"Q&As Related to Neuroticism Personality : {} \".format(f))\n    n=n+1\nplt.tight_layout()\nplt.show()","c6d43033":"plt.figure(figsize=[15,15])\nfft=['EST1','EST2','EST3','EST4','EST5','EST6','EST7','EST8','EST9','EST10']\nn=1\nfor f in fft:\n    plt.subplot(5,2,n)\n    sns.countplot(x=f,  edgecolor=\"black\", alpha=0.7, data=personality)\n    sns.despine()\n    plt.title(\"Q&As Related to Neuroticism Personality : {} \".format(f))\n    n=n+1\nplt.tight_layout()\nplt.show()","211e3dfc":"plt.figure(figsize=[15,15])\nfft=['AGR1','AGR2','AGR3','AGR4','AGR5','AGR6','AGR7','AGR8','AGR9','AGR10']\nn=1\nfor f in fft:\n    plt.subplot(5,2,n)\n    sns.countplot(x=f, edgecolor=\"black\", alpha=0.7, data=personality)\n    sns.despine()\n    plt.title(\"Q&As Related to Agreeable Personality : {} \".format(f))\n    n=n+1\nplt.tight_layout()\nplt.show()","e3234f54":"plt.figure(figsize=[15,15])\nfft=['CSN1','CSN2','CSN3','CSN4','CSN5','CSN6','CSN7','CSN8','CSN9','CSN10']\nn=1\nfor f in fft:\n    plt.subplot(5,2,n)\n    sns.countplot(x=f, edgecolor=\"black\", alpha=0.7, data=personality)\n    sns.despine()\n    plt.title(\"Q&As Related to Conscientious Personality: {} \".format(f))\n    n=n+1\nplt.tight_layout()\nplt.show()","f74ddddb":"plt.figure(figsize=[15,15])\nfft=['OPN1','OPN2','OPN3','OPN4','OPN5','OPN6','OPN7','OPN8','OPN9','OPN10']\nn=1\nfor f in fft:\n    plt.subplot(5,2,n)\n    sns.countplot(x=f,  edgecolor=\"black\", alpha=0.7, data=personality)\n    sns.despine()\n    plt.title(\"Q&As Related to Open Personality : {}  \".format(f))\n    n=n+1\nplt.tight_layout()\nplt.show()","63c37f8a":"from sklearn.preprocessing import MinMaxScaler\n\ndf = personality.drop('country', axis=1)\ncolumns = list(df.columns)\n\nscaler = MinMaxScaler(feature_range=(0,1))\ndf = scaler.fit_transform(df)\ndf = pd.DataFrame(df, columns=columns)\ndf_sample = df[:5000]\n\nfrom sklearn.cluster import KMeans\nfrom yellowbrick.cluster import KElbowVisualizer\n\nkmeans = KMeans()\nvisualizer = KElbowVisualizer(kmeans, k=(2,15))\nvisualizer.fit(df_sample)\nvisualizer.poof()","31aec5be":"X=personality.copy()\nfrom sklearn.cluster import KMeans\ndf = X.drop(\"country\", axis=1)\n#fit model\nkmeans = KMeans(n_clusters=5)\nk_fit = kmeans.fit(df)\n\npd.options.display.max_columns = 10\npredictions = k_fit.labels_\ndf['Clusters'] = predictions\ndf.head()","5693d5dd":"pd.options.display.max_columns = 150\ndf.groupby('Clusters').mean()","7994b4e7":"col_list = list(df)\next = col_list[0:10]\nest = col_list[10:20]\nagr = col_list[20:30]\ncsn = col_list[30:40]\nopn = col_list[40:50]\n\ndata_sums = pd.DataFrame()\ndata_sums['extroversion'] = df[ext].sum(axis=1)\/10\ndata_sums['neurotic'] = df[est].sum(axis=1)\/10\ndata_sums['agreeable'] = df[agr].sum(axis=1)\/10\ndata_sums['conscientious'] = df[csn].sum(axis=1)\/10\ndata_sums['open'] = df[opn].sum(axis=1)\/10\ndata_sums['clusters'] = predictions\ndata_sums.groupby('clusters').mean()","9ac45a86":"dataclusters = data_sums.groupby('clusters').mean()\nplt.figure(figsize=(22,3))\nfor i in range(0, 5):\n    plt.subplot(1,5,i+1)\n    plt.bar(dataclusters.columns, dataclusters.iloc[:, i], color='green', alpha=0.2)\n    plt.plot(dataclusters.columns, dataclusters.iloc[:, i], color='red')\n    plt.title('Cluster ' + str(i))\n    plt.xticks(rotation=45)\n    plt.ylim(0,4);","79aa6538":"from sklearn.decomposition import PCA\n\npca = PCA(n_components=2)\npca_fit = pca.fit_transform(df)\n\ndf_pca = pd.DataFrame(data=pca_fit, columns=['PCA1', 'PCA2'])\ndf_pca['Clusters'] = predictions\ndf_pca.head()","9eb9c0c0":"plt.figure(figsize=(10,10))\nsns.scatterplot(data=df_pca, x='PCA1', y='PCA2', hue='Clusters', palette='Set2', alpha=0.8)\nplt.title('Personality Clusters after PCA');","81c84411":"my_data = pd.read_excel('..\/input\/person')","50c9e587":"my_personality = k_fit.predict(my_data)\nprint('My Personality Cluster: ', my_personality)","e7e85fbd":"col_list = list(my_data)\next = col_list[0:10]\nest = col_list[10:20]\nagr = col_list[20:30]\ncsn = col_list[30:40]\nopn = col_list[40:50]\n\nmy_sums = pd.DataFrame()\nmy_sums['extroversion'] = my_data[ext].sum(axis=1)\/10\nmy_sums['neurotic'] = my_data[est].sum(axis=1)\/10\nmy_sums['agreeable'] = my_data[agr].sum(axis=1)\/10\nmy_sums['conscientious'] = my_data[csn].sum(axis=1)\/10\nmy_sums['open'] = my_data[opn].sum(axis=1)\/10\nmy_sums['cluster'] = my_personality\nprint('Sum of my question groups')\nmy_sums","122b7f96":"my_sum = my_sums.drop('cluster', axis=1)\nplt.bar(my_sum.columns, my_sum.iloc[0,:], color='green', alpha=0.2)\nplt.plot(my_sum.columns, my_sum.iloc[0,:], color='red')\nplt.title('Cluster 2')\nplt.xticks(rotation=45)\nplt.ylim(0,4);","5f523931":"# VISUALIZATION","7e950273":"**CLUSTERING**","e68ca237":"\n# VARIABLE DESCRIPTION","22fa2a86":" # INTRODUCTION"}}