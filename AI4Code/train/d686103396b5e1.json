{"cell_type":{"72ac8a9b":"code","f6877dda":"code","2f93ac07":"code","20c41389":"code","ba9ab860":"code","23b3000e":"code","864efcf9":"code","ae516c24":"code","2945e1c8":"code","59d94c11":"code","43f754b5":"code","e4e69965":"code","e834c09c":"code","d486b3ed":"code","b24338bd":"code","08c13d26":"code","f424cf82":"code","1c4031a9":"code","a918baae":"code","7f7eb713":"code","bf0a376f":"markdown","d4bf7dd9":"markdown","5795fb0f":"markdown","7e225c53":"markdown","853acefb":"markdown","5deec636":"markdown","90476724":"markdown","e685ddf9":"markdown","973da835":"markdown","8333aa90":"markdown","82776f39":"markdown","2fefeee5":"markdown","d5c3ffbf":"markdown","42733ceb":"markdown","5cc1439c":"markdown","05659747":"markdown","1b114c19":"markdown","c555cd16":"markdown","cc449afc":"markdown","ab19ce52":"markdown","2860a3c4":"markdown","60858b31":"markdown","84c8b15d":"markdown","b2cef69f":"markdown","da3aaa8b":"markdown","c5cb5395":"markdown","d6efc77a":"markdown","9b5df203":"markdown","59b20467":"markdown","f43b6d3c":"markdown","57a514ed":"markdown","283d1a95":"markdown","b3a849ab":"markdown","3d4c7328":"markdown","3eea3735":"markdown","dbc6be62":"markdown","2fe4b166":"markdown","dfb0a894":"markdown","eeddd3aa":"markdown","c0126978":"markdown","ea3e7658":"markdown","572a8281":"markdown","12f678bd":"markdown","7ab6a994":"markdown","2b156881":"markdown","fa4007fd":"markdown","1e6e3743":"markdown","5925b653":"markdown","1a9aa4f7":"markdown"},"source":{"72ac8a9b":"import numpy as np\nzero_state = np.array([[1],[0]])\none_state = np.array([[0],[1]])","f6877dda":"print(\"The |0> is \\n\", zero_state)\nprint(\"The |1> is \\n\", one_state)","2f93ac07":"print(\"The shape of the Vector |0> is\",zero_state.shape)\nprint(\"The shape of the Vector |1> is\",one_state.shape)","20c41389":"!pip install qiskit #Install qiskit on colab\n!pip install pylatexenc #Required for matplotlib support to render the images of circuit\nfrom IPython.display import clear_output #Clear the output after installation\nclear_output()","ba9ab860":"#QuantumCircuit is the class that we shall use for our circuit\n#Aer is required to get the required backend support\n#execute will execute our circuit\nfrom qiskit import QuantumCircuit, Aer, execute","23b3000e":"circuit_es1 = QuantumCircuit(2,2) #initializing our circuit with two qubits and two bits","864efcf9":"circuit_es1.h(0) #Applying hadamard Gate on the first qubit\ncircuit_es1.cx(0,1) #Applying the CNOT Gate with zeroth qubit as the control qubit \n                    #and the first qubit as the target qubit\ncircuit_es1.measure(0,0) #Measuring the zeroth qubit and storing its output to zeroth bit\ncircuit_es1.measure(1,1)","ae516c24":"#Let's visualize our circuit\ncircuit_es1.draw('mpl')","2945e1c8":"simulator = Aer.get_backend('qasm_simulator') #Using qasm_simulator, we can simulate our circuit on an actual quantum device\nresult = execute(circuit_es1,backend=simulator, shots = 1024).result() #shots = number of time we want to execute the circuit","59d94c11":"counts = result.get_counts() #Get the results for each simulation","43f754b5":"from qiskit.visualization import plot_histogram #To visualize our results\nplot_histogram(counts)","e4e69965":"circuit_es2 = QuantumCircuit(2,2)\ncircuit_es2.x(0) #Applying the NOT Gate on the first qubit to get the state |01>\ncircuit_es2.h(0) \ncircuit_es2.cx(0,1)\ncircuit_es2.measure(0,0) \ncircuit_es2.measure(1,1)","e834c09c":"#Let's visualize our circuit\ncircuit_es2.draw('mpl')","d486b3ed":"simulator = Aer.get_backend('qasm_simulator') \nresult = execute(circuit_es2,backend=simulator, shots = 1024).result() \ncounts = result.get_counts()\nplot_histogram(counts)","b24338bd":"circuit_es3 = QuantumCircuit(2,2)\ncircuit_es3.x(1) #Applying the NOT Gate on the second qubit to get the state |10>\ncircuit_es3.h(0) \ncircuit_es3.cx(0,1)\ncircuit_es3.measure(0,0) \ncircuit_es3.measure(1,1)","08c13d26":"#Let's visualize our circuit\ncircuit_es3.draw('mpl')","f424cf82":"simulator = Aer.get_backend('qasm_simulator') \nresult = execute(circuit_es3,backend=simulator, shots = 1024).result() \ncounts = result.get_counts()\nplot_histogram(counts)","1c4031a9":"circuit_es4 = QuantumCircuit(2,2)\ncircuit_es4.x(0)\ncircuit_es4.x(1) #Applying the NOT Gates on the two qubits to get the state |11>\ncircuit_es4.h(0) \ncircuit_es4.cx(0,1)\ncircuit_es4.measure(0,0) \ncircuit_es4.measure(1,1)","a918baae":"#Let's visualize our circuit\ncircuit_es4.draw('mpl')","7f7eb713":"simulator = Aer.get_backend('qasm_simulator') \nresult = execute(circuit_es4,backend=simulator, shots = 1024).result() \ncounts = result.get_counts()\nplot_histogram(counts)","bf0a376f":"**Analyzing the results:**\n\n* Clearly, we have got two states |00> and |11> with the right most number representing the state of the zeroth qubit. The probability of getting the state |00> is 0.503 and for |11>, it's 0.497\n\n* Note that we can never get the state (|00>+|11>)\/sqrt(2). As soon as we measure a qubit, the superposition state vanishes away and we get either |00> or |11>\n\n* Initially, all the qubits are in the |0> state. Therefore, initially before applying the Hadamard Gate, our circuit was in the state |00>. We transformed that state into the (|00>+|11>)\/sqrt(2) state. However, after measurement we can either get |00> or |11>.\n\n","d4bf7dd9":"[Qiskit](https:\/\/qiskit.org\/) is an open-source framework for Quantum Computing. It provides tools for creating and manipulating quantum programs and running them on prototype quantum devices on IBM Q Experience or on simulators on a local computer.\n\nThe version of Qiskit that we will be using is based on Python. The Swift and Javascript Versions of Qiskit are also in Development","5795fb0f":"**Prerequisites:**\n\n* Basic Python","7e225c53":"**The Second Bell State:**","853acefb":"![bellstate2](https:\/\/drive.google.com\/uc?export=view&id=1RgI7YvBP3g9SELxI_RsC1CpetDAvR1A3)","5deec636":"**Credits: Github-Qiskit**","90476724":"The Hadamard is a unique quantum gate and it transforms the state |0> to (|0>+|1>)\/sqrt(2) and |1> to (|0>-|1>)\/sqrt(2). Alternatively, this can be thought of as a 90 degree rotation around Y-Axis followed by a 180 degree rotation around X axis of the [Bloch Sphere](https:\/\/en.wikipedia.org\/wiki\/Bloch_sphere).\n\n\n","e685ddf9":"**Image Credits- qiskit.org\/textbook**","973da835":"**Image Credits- qiskit.org\/textbook**","8333aa90":"We shall build the first Entangled State.","82776f39":"![bellstate4](https:\/\/drive.google.com\/uc?export=view&id=1IHx8hYiKWPJBkkS07ub3Gbpa19Ni4y8C)","2fefeee5":"![bellstate1](https:\/\/drive.google.com\/uc?export=view&id=1jJKV_dQwfv-cVAW9UhR5jVJ6s8IhPtrT)","d5c3ffbf":"# Quantum Circuits for Entanglement","42733ceb":"![bellstate2](https:\/\/drive.google.com\/uc?export=view&id=1RgI7YvBP3g9SELxI_RsC1CpetDAvR1A3)","5cc1439c":"![cnot](https:\/\/drive.google.com\/uc?export=view&id=1gKB-XETmyVlZMGhrUt7ECPYkzQ2-aSaR)","05659747":"* At this point, a good question can be why is |0> equal to [[1],[0]]?\n\nThe Question has a simple answer. There are two possible states 0 and 1. The value 1 on the first place indicates that it's the state zero. Similarly, in the state |1>, the value 1 is on the second position, indicating the state one. This is similar to the concept of **One-Hot Encoding**.","1b114c19":"# What is Quantum Entanglement?","c555cd16":"Before we can use qiskit, we need to install the Qiskit in the Colab. If you want to install qiskit on your local machine, you can go through this [video](https:\/\/www.youtube.com\/watch?v=M4EkW4VwhcI).","cc449afc":"The CNOT Gate is one of the most commonly used gates in Quantum Circuits. It is the Quantum Analogue of the Classical XOR Gate. It operates on two Qubits namely, the control Qubit and the Target Qubit. The function of the Gate is simple! If the Control Qubit is in the state |1>, the CNOT Gate performs a NOT on the Target Qubit i.e it flips its state from |0> to |1> or from |1> to |0>. In the image above, the Control Qubit is denoted by **q0** and the Target Qubit is denoted by **q1**.\n\nHere, **\"|>\"** are a part of Dirac Notation and they distiguish the state of a Qubit from the state of a classical bit. They are pronounced as 'Ket'. For eg: |0> can be read out as \"Ket Zero\" or \"Ket of Zero\". As we know, the classical bit can take the values of either 0 or 1. Similarly, the Qubits can take either the state |0> or the state |1> or both at the same time(this is just a linear combination of these two states, popularly known as the concept of Superposition)\n\nAlso, it is important to note that |0> and |1> are both 2X1 Vectors and not a scalar value.","ab19ce52":"**Hadamard Gate:**","2860a3c4":"Now, this is the time to get into the cool coding part!","60858b31":"Essentially, we will be building a Quantum Circuit that works on Qubits (Quantum Analogue of Classical bits). ","84c8b15d":"![bellstate3](https:\/\/drive.google.com\/uc?export=view&id=1uCuRtHKtBnHisR6OKmzjgqvOo-sqPIqa)","b2cef69f":"**How does the state transformation take place?**\n\n* The Hadamard Gate transforms the state of the first qubit from state |0> to (|0>+|1>)\/sqrt(2). Therefore, our two qubit circuit is in the state (|00>+|01>)\/sqrt(2). The right most digit defines the state of zeroth qubit. \n\n* After the Hadamard Gate, we apply the CNOT Gate. Recall that the CNOT Gate performs a NOT on the target qubit if the control qubit is in the state |1>. Clearly, the CNOT Gate has no effect if the state is |00>. However, if the state is |01>, the NOT operation is performed and the |01> state is transformed to |11>. \n\n* Now, we finally achieve the state (|00>+|11>)\/sqrt(2). However, the state collapses before we make a measurement and therefore, we either get |00> or |11>","da3aaa8b":"If you find something incorrect in the notebook or feel that some concepts needed a better explaination or you need resources for better understanding, contact me on [LinkedIn](https:\/\/www.linkedin.com\/in\/jay-shah-mlpython\/).\n\n","c5cb5395":"![bellstate1](https:\/\/drive.google.com\/uc?export=view&id=1jJKV_dQwfv-cVAW9UhR5jVJ6s8IhPtrT)","d6efc77a":"# Quantum Gates","9b5df203":"**The Fourth Bell State:**","59b20467":"The Notebook was developed using the Google Colab. Therefore, if it is run in any other environment(like on a local machines), some steps may vary. However, the notebook can be executed easily in the Google Colab Environment without any changes.","f43b6d3c":"**The First Bell State:**","57a514ed":"![hadamard](https:\/\/drive.google.com\/uc?export=view&id=1cDIHI9EOFzh_ubdyRiSxnaOFEJsIrbzi)","283d1a95":"**THANK YOU!**","b3a849ab":"The only part of the circuit that we have not discussed yet is the **measurement**. \n\nThe \"Measurement\" is also considered as an operation in Quantum Computing. In fact, a measurement is the only way to extract output from a qubit. Here, we extract the output from the qubit and store it in a bit.\n","3d4c7328":"**Note:** Quantum Gates can be represented using a Unitary Matrix.\n\nThe Unitary Matrix for CNOT and Hadamard Gates also exist. \n\n\n","3eea3735":"Before we start building the circuit for Second Bell state, a common question can be - \"Why do these 4 Bell States differ?\"\n\nThe reason for the differences in the Bell States is the initial state. Each of the four Bell State has a different initial state.\n\nBell State 1 - |00>\n\nBell State 2 - |01>\n\nBell State 3 - |10>\n\nBell State 4 - |11>\n\nTherefore, the circuit for all the Bell States is the same. We only need to change the initial states of our qubits.","dbc6be62":"Quantum Gates are the most important part of a Quantum Circuit. We manipulate the state of Qubits by applying Quantum Gates on them. This is similar to a Classical Circuit where we use Classical Gates like AND, OR, NOT, NAND, etc. for the purpose of manipulation. Some of the Quantum Gates have a classical analogue (like Quantum NOT Gate) and some are completely new gates with no classical analogues(like Hadamard Gate).\n\nIn the Quantum Entanglement Circuit, we will be using two gates:\n* CNOT Gate\n* Hadamard Gate","2fe4b166":"![matrices](https:\/\/drive.google.com\/uc?export=view&id=17MYCH0msxepQst9Yi7O_KbS-J0G9773A)","dfb0a894":"# What is Qiskit?","eeddd3aa":"Before getting into the coding, it is important to undestand what do we mean by the concept of Quantum Entanglement? This concept of Quantum Entanglement is one of the most important concepts in Quantum Mechanics and it was a topic of \nhuge debate between Neil Bohr and Albert Einstein.\n\nThe Principle states that two quantum particles, when entangled, can communicate with each other instantly irrespective of the distance between them. This means that if we place one qubit from the entangled pair on one edge of the Observable Universe and the other qubit on the other edge, they can still communicate. In simple words, this violates the law of General Theory of Relativity which states that faster than light communication or travel is not possible. Albert Einstein named this concept of Entanglement as \"Spooky Action at a distance\".\n\nWith resect to Quantum Computing, the idea can be explained as, \"if you measure one qubit from the entangled pair, you instantly know the state of the second qubit\".\n\nIn this notebook, we will develop four entangled States(also popularly known as [Bell States](https:\/\/en.wikipedia.org\/wiki\/Bell_state)) using two Qubits.","c0126978":"The four Bell States are:\n\n(Image Credits: Wikipedia)","ea3e7658":"![qiskit](https:\/\/drive.google.com\/uc?export=view&id=147Ks5mVrOaTxQUTRIriihRXRT4zSdYTn)","572a8281":"![bellstate4](https:\/\/drive.google.com\/uc?export=view&id=1IHx8hYiKWPJBkkS07ub3Gbpa19Ni4y8C)","12f678bd":"## **Introduction**","7ab6a994":"**Note**: For the next three Bell States, try to figure out yourself the state transformation process as a simple exercise.","2b156881":"**Note:**\n\nHere, two zeros in the notation |00> indicate the states of two Qubits.","fa4007fd":"In this notebook, we shall learn to entangle two Qubits and create 4 Bell States using the python library Qiskit. The circuit used for demonstration of Quantum Entanglement is simple and therefore, this notebook is a great way for a beginner to get into the World of Quantum Computing using Qiskit.","1e6e3743":"**The Third Bell State:**","5925b653":"**CNOT Gate:**","1a9aa4f7":"![bellstate3](https:\/\/drive.google.com\/uc?export=view&id=1uCuRtHKtBnHisR6OKmzjgqvOo-sqPIqa)"}}