{"cell_type":{"ff10af22":"code","ef5063d5":"code","ef60373f":"code","e835f004":"markdown","fdeb40e3":"markdown"},"source":{"ff10af22":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ef5063d5":"# Agent Little_Pumba\n# Imports\n\n\n#Create a semi cleaver agent\n\ndef little_agent_pumba(obs, config):\n    \n    import math\n    import random\n    import numpy as np\n    \n    \n    # Check the score of every board\n    def board_posicion_score(board,piece,config):\n        score = 0\n        COL_COUNT = config.columns\n        ROW_COUNT = config.rows\n\n        # Score center\n        center_array = [int(i) for i in list(board[:,COL_COUNT\/\/2])]\n        center_count = center_array.count(piece)\n        score += center_count *2\n\n\n\n        # Score Horizontal\n        for r in range(ROW_COUNT):\n            row_array = [int(i) for i in board[r,:]]\n            for c in range(COL_COUNT-(config.inarow-1)):\n                window = row_array[c:c+config.inarow]\n                score += evaluate_window(window,piece)\n\n\n        # Score Vertical\n        for c in range(COL_COUNT):\n            col_array = [int(i) for i in board[:,c]]\n            for r in range(ROW_COUNT-(config.inarow-1)):\n                window = col_array[r:r+config.inarow]\n                score += evaluate_window(window,piece)\n\n\n        # Score diagonal positive\n        for r in range(ROW_COUNT-(config.inarow-1)):\n            for c in range(COL_COUNT-(config.inarow-1)):\n                window = [board[r+i][c+i] for i in range(config.inarow)]\n                score += evaluate_window(window,piece)\n\n        # Score diagonal negative\n        for r in range((config.inarow-1),ROW_COUNT):\n            for c in range(COL_COUNT-(config.inarow-1)):\n                window = [board[r-i][c+i] for i in range(config.inarow)]\n                score += evaluate_window(window,piece)\n        return score\n\n\n\n    # Simulate the drop of the piece\n\n    def drop_piece(board, col, piece, config):\n        next_grid = board\n        for row in range(config.rows-1, -1, -1):\n            if next_grid[row][col] == 0:\n                break\n        next_grid[row][col] = piece\n        return next_grid\n\n\n\n    # Evaluate the score of each window (Horizontal, Vertical, Positive Diagonal, Negative Diagonal - Tunning this scores you can get better score)\n    def evaluate_window(window,piece):\n        score = 0\n        EMPTY =0\n        opp_piece=1\n        if piece == 1:\n            opp_piece =2\n\n\n        if window.count(piece) == 4:\n            score += 100\n        elif window.count(piece) == 3 and window.count(EMPTY) ==1:\n            score += 15\n        elif window.count(piece) == 2 and window.count(EMPTY) == 2:\n            score += 5\n\n        if window.count(opp_piece) == 3 and window.count(EMPTY) ==1:\n            score -= 80\n\n        elif window.count(opp_piece) == 2 and window.count(EMPTY) == 2:\n             score -= 20\n        return score\n\n\n\n    # Is it a winning move?\n    def winning_move(board, player,config):\n        # Horizontal winning\n        COL_COUNT = config.columns\n        ROW_COUNT = config.rows\n\n\n        for c in range(COL_COUNT-(config.inarow-1)):\n            for r in range(ROW_COUNT):\n                if [board[r][c+i]== player for i in range(config.inarow)] == [True for j in range(config.inarow)]:\n\n                    return True\n\n        # Vertical winning\n        for c in range(COL_COUNT):\n            for r in range(ROW_COUNT-(config.inarow-1)):\n                if [board[r+i][c]== player for i in range(config.inarow)] == [True for j in range(config.inarow)]:\n                    return True\n\n\n        # Positive Diagonal winning\n        for c in range(COL_COUNT-(config.inarow-1)):\n            for r in range(ROW_COUNT-(config.inarow-1)):\n                if [board[r+i][c+i]== player for i in range(config.inarow)] == [True for j in range(config.inarow)]:\n\n                    return True\n\n        # Negative Diagonal winning\n        for c in range(COL_COUNT-(config.inarow-1)):\n            for r in range((config.inarow-1),ROW_COUNT):\n                if [board[r-i][c+i]== player for i in range(config.inarow)] == [True for j in range(config.inarow)]:\n\n                    return True\n\n\n\n\n    def is_terminal_node(board,valid_locations,piece,opp_piece,config):\n        return winning_move(board, opp_piece,config) or winning_move(board, piece,config) or len(valid_locations)==0\n\n\n    # Implemetation of the algorithm\n    def minimax_algorithm(board,depth,alpha,beta,maxmizingPlayer,obs,config,piece,opp_piece):\n        valid_locations = [c for c in range(config.columns) if obs.board[c] == 0]\n\n\n        if depth == 0 or is_terminal_node(board,valid_locations,piece,opp_piece,config):\n            #print(is_terminal_node(board,valid_locations,piece,opp_piece,config))\n            if is_terminal_node:\n                if winning_move(board,piece,config):\n                    return (None, math.inf)\n                elif winning_move(board,opp_piece,config):\n                    return(None,-math.inf)\n                else: \n                    return (None, board_posicion_score(board,piece,config))\n\n        if maxmizingPlayer:\n            value = -math.inf\n            best_col = random.choice(valid_locations)\n            for col in valid_locations:\n                board_copy = board.copy()\n                new_board = drop_piece(board_copy,col,piece,config)\n                new_score = minimax_algorithm(new_board,depth-1,alpha,beta,False,obs,config,piece,opp_piece)[1]\n                #print('AI -- Col {}, Value {}'.format(col,new_score))\n                #print(new_board)\n                if new_score > value:\n                    value = new_score\n                    best_col = col\n                alpha = max(alpha,value)\n                if alpha >= beta:\n                    break\n            return best_col, value\n\n        else: # Minimazing player\n            value = math.inf\n            best_col = random.choice(valid_locations)\n            for col in valid_locations:\n                board_copy = board.copy()\n                new_board = drop_piece(board_copy,col,opp_piece,config)\n                new_score =minimax_algorithm(new_board,depth-1,alpha,beta,True,obs,config,piece,opp_piece)[1]\n                #print('PLAYER -- Col {}, Value {}'.format(col,new_score))\n                #print(new_board)\n                if new_score < value:\n                    value = new_score\n                    best_col = col\n                beta = min(beta,value)\n                if beta <=alpha:\n                    break\n\n            return best_col, value\n\n\n\n\n\n\n\n    # Deep level is 2 - For a reason I do not know with a deepness of 2 is working better than with deep = 3\n    \n    \n    # Get list of valid moves\n    valid_moves = [c for c in range(config.columns) if obs.board[c] == 0]\n    # Convert the board to a 2D grid\n    grid = np.asarray(obs.board).reshape(config.rows, config.columns)\n    #print(grid)\n    piece = obs.mark\n    opp_piece =1\n    if piece == 1:\n        opp_piece=2\n    \n    best_col, minmax_score = minimax_algorithm(grid,2,-math.inf,math.inf,True,obs,config,piece,opp_piece)\n    \n    return best_col","ef60373f":"import inspect\nimport os\n\ndef write_agent_to_file(function, file):\n    with open(file, \"a\" if os.path.exists(file) else \"w\") as f:\n        f.write(inspect.getsource(function))\n        print(function, \"written to\", file)\n\nwrite_agent_to_file(little_agent_pumba, \".\/submission.py\")","e835f004":"## Code Itself","fdeb40e3":"# Minimax Algorithm with alpha beta prunning\n\nThis code is a mix between the Kaggle competition Tutorial and what Keith Galli did in his minimax algorithm in his youtube video about creating a 4Connect app\nI highly recomed his series: https:\/\/www.youtube.com\/watch?v=UYgyRArKDEs&list=PLFCB5Dp81iNV_inzM-R9AKkZZlePCZdtV\n\nThe key is to play around the score you assing to each possition of the board - please refer to his video."}}