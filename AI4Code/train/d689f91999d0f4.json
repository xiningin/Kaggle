{"cell_type":{"9f0c5782":"code","a24bcec7":"code","c60d950a":"code","8c58fa20":"code","f52ddfc8":"code","13bd366a":"code","9612e8bc":"code","48168d6c":"markdown","305c9263":"markdown","9470470f":"markdown","e648af50":"markdown","91af75c7":"markdown"},"source":{"9f0c5782":"#CSV files only\nimport pandas as pd\nimport glob\npath = r'\/kaggle\/input\/Python_Assignment_1\/Part_A\/train\/'\nfilenames = glob.glob(path+\"\/*.csv\")\ndfs = []\nfor filename in filenames:\n    dfs.append(pd.read_csv(filename))","a24bcec7":"for i in range(0, len(dfs)):\n    if (dfs[i].columns[0] == 'start' and dfs[i].index[-1][0] == 'end'):\n        dfs[i].drop(['end']).to_csv('file_no_{}'.format(i),header= False)","c60d950a":"path = r'\/kaggle\/input\/Python_Assignment_1\/Part_B\/CDR\/'\nfiles = glob.glob(path+'\/*.xml')\nfiles","8c58fa20":"import xml.etree.ElementTree as et  \nfor i in range(0, len(files)):\n    xtree = et.parse(files[3])\n    xroot = xtree.getroot() \n    df_cols = ['rowkey',\n           'latitude',\n           'longitude',\n           'signalStrength',\n           'uploadedbytes',\n           'downloadedBytes']\n    out_df = pd.DataFrame(columns = df_cols)\n    for node in xroot: \n        a = node.find(\"rowkey\").text if node is not None else None\n        b = node.find(\"latitude\").text if node is not None else None\n        c = node.find(\"longitude\").text if node is not None else None\n        d = node.find(\"signalStrength\").text if node is not None else None\n        e = node.find(\"uploadedbytes\").text if node is not None else None\n        f = node.find(\"downloadedBytes\").text if node is not None else None\n        out_df = out_df.append(pd.Series([a, b, c, d, e, f],\n                                     index = df_cols), \n                           ignore_index = True)\n    out_df.to_excel('converted{}.xlsx'.format(i+1))","f52ddfc8":"File = pd.read_csv(r'\/kaggle\/input\/Python_Assignment_1\/Part_C\/part_c_input_file.csv', index_col= 0, header=None)\nFile","13bd366a":"a = {}\nfor i in range(0, len(File)):\n    a[File.index[i]] = File.iloc[i].tolist()","9612e8bc":"a","48168d6c":"## Challenges:\nHere, I have tried to show some important topics,\n1. Part A focuses on retriving particular files with certain string patterns in it using Wildcard characters (.CSV files only), but have some added conditions like onle files that start with \"start\" and ends with \"end\", on a top of that removing thoes part and saving it with different names in different foder.\n2. Part B same as above for .XML extension formatting it to the pandas dataframe and saving it to the .XLSX format.\n3. Part C deals with treaming some part from a dataframe to Dictionary format.\n\nPlease suggest if I can improve it anymore.","305c9263":"# Part C\nIt deals with treaming some part from a dataframe to Dictionary format.","9470470f":"# Part B\nSame as Part A above for .XML extension formatting it to the pandas dataframe and saving it to the .XLSX format.","e648af50":" ## **Please recommend or suggest better way to do it.**","91af75c7":"# Part A\nIt focuses on retriving particular files with certain string patterns in it using Wildcard characters (.CSV files only), but have some added conditions like onle files that start with \"start\" and ends with \"end\", on a top of that removing thoes part and saving it with different names in different foder."}}