{"cell_type":{"605fde59":"code","04837686":"code","2fc6e0cc":"markdown","d2fbe8a2":"markdown"},"source":{"605fde59":"#import modules\nimport numpy as np\nimport pandas as pd \nfrom requests import get\nfrom bs4 import BeautifulSoup as soup\nimport re\nfrom datetime import date\nfrom tqdm.notebook import tqdm\nimport json","04837686":"#retrieve the main page (if it won't work, try using selenium)\nurl = \"https:\/\/www.soccerstats.com\"\npage = soup(get(url).content, \"html.parser\")\n\n#retrieve each league\nleagues = page.find_all(\"td\", {\"align\": \"center\", \"valign\": \"middle\", \"style\":\"background-color:#e1e1e1;line-height:1.2em;\"})\n\n#retrieve titles\ntitle_regex = re.compile('<span title=\"(.*?)\">')\ntitles = []\n\n#retrieve abbreviations\nabbrs = []\n\n#retrieve links\nhref_regex = re.compile('href=\"(.*?)\"')\nhrefs = []\n\n#fetch data \nfor league in leagues:\n    titles.append(re.findall(title_regex, str(league))[0])\n    hrefs.append(re.findall(href_regex, str(league))[0])\n    abbrs.append(league.text)\n    \n#absolute links to the urls\nleague_urls = [\"\/\".join([url, href]) for href in hrefs]\n\n#create list of dicts\nleagues_info = []\nfeatures = [\"title\", \"abbreviation\"]\nfeature_lists = [titles, abbrs]\nfor index in range(len(titles)):\n    new_dict = {}\n    for feature_index, feature in enumerate(features):\n        new_dict.update({feature: feature_lists[feature_index][index]})\n    leagues_info.append(new_dict)\n    \n#shorthand for loop\ninline_for = lambda x: tqdm(range(len(x)))\n\n#get raw content\npage_contents = [get(league_urls[x]).content for x in inline_for(league_urls)]\n\n#convert to pd.DataFrame objects\npages = [pd.read_html(page_contents[x]) for x in inline_for(page_contents)]\n\n#the desired columns\ncols = [\"GP\", \"W\", \"D\", \"L\", \"GF\", \"GA\", \"GD\", \"Pts\", \"Form\", \"PPG\", \"last 8\", \"CS\", \"FTS\"]\n\n\ntables = []\nfor table_list in pages:\n    \n    #selects the most similar result \n    likelihoods = []\n    for table in table_list:\n        likelihood = pd.Series(table.columns).isin(cols).sum()\n        likelihoods.append(likelihood)\n    table = table_list[np.argmax(likelihoods)]\n    \n    #a few changes to be made\n    try:\n        table.rename(columns = {\"Unnamed: 1\": \"Team\"}, inplace = True)\n    except:\n        pass\n    try:\n        table.drop(\"Unnamed: 0\", 1, inplace = True)\n    except:\n        pass\n    try:\n        table[\"Form\"] = list(map(lambda x: re.findall(\"\\d-\\d\", x), table[\"Form\"].values))\n    except:\n        pass\n    tables.append(table)\n\n#store data as dicts \nscoreboard_dicts = [x.to_dict() for x in tables]\n\n#today as string\ntoday = str(date.today())    \n\n#add items to the already existing json-like list\nfor i, dix in enumerate(leagues_info):\n    if(\"daily_results\" in dix.keys()):\n        dix[\"daily_results\"].update({today: scoreboard_dicts[i]})\n    else:\n        dix.update({\"daily_results\": {today: scoreboard_dicts[i]}})\n\n#load past data\nwith open(\"\/kaggle\/input\/most-popular-soccer-leagues\/leagues.json\") as read_file:\n    data = json.load(read_file)\n        \n#analyze differences \ndef diff_df(data, x, dat):\n    df1 = pd.DataFrame(data[x][\"daily_results\"][dat]).set_index(\"Team\")\n    df1 = df1.reindex(index = sorted(df1.index)).select_dtypes(exclude = [\"object\"]).reset_index(drop = True)\n    return df1.values\n\n#implement new changes\ndef new_scores(data, leagues_info):\n    for i in range(len(data)):\n        if((pd.Series([x[\"title\"] for x in data]) == pd.Series([x[\"title\"] for x in leagues_info])).sum() != 30): break\n        try:\n            dat = sorted(list(data[i][\"daily_results\"].keys()))[-1]\n            dif = np.sum(diff_df(data, i, dat) - diff_df(leagues_info, i, today))\n            if(dif > 0 or dif < 0):\n                data[i][\"daily_results\"].update({today: leagues_info[i][\"daily_results\"][today]})\n        except: pass\n    return data\n\n#run the function\ndata = new_scores(data, leagues_info)\n\n#save json file\nwith open(\"leagues.json\", \"w\") as write_file:\n    write_file.write(json.dumps(data))","2fc6e0cc":"# HOW TO SCRAPE SOCCER STATISTICS THE EASY WAY?","d2fbe8a2":"Steps Below:\n\n - Retrieve the main page and find the most popular leagues\n - Retrieve the scoreboard data from each league\n - Merge the data in a single JSON file"}}