{"cell_type":{"9ebd2ead":"code","aaaabb1b":"code","fb0cfa58":"code","92d2e506":"code","92245cc1":"code","1e834220":"code","0be49d68":"code","7eee7ac0":"code","8a405d0a":"code","4c8c5675":"code","e34c086c":"code","53d65642":"code","b8346d6c":"code","c29f6049":"code","f1c6bb76":"code","f7d80e19":"code","94838e07":"code","c0d9c02b":"code","ad0a38fb":"code","660d319f":"code","ef6898a3":"code","adcafad8":"code","35c13805":"code","467af75a":"code","e0eed8ef":"code","d37d8205":"code","20bb2708":"code","e9eaf079":"code","594c26e5":"code","2120e59a":"code","83da3b22":"code","b25a8e15":"code","14da6741":"code","407ea26d":"code","f9fbb88d":"markdown","9c59fa98":"markdown","a4a80dc8":"markdown","7a87e089":"markdown","5b2fc653":"markdown"},"source":{"9ebd2ead":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aaaabb1b":"import matplotlib.pyplot as plt \n\nfrom glob import glob \n\nfrom keras.utils import np_utils\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout,Flatten\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import BatchNormalization\n#from keras.callbacks import (ModelCheckpoint,ReduceLROnPlateau,CSVLogger)\nfrom sklearn import preprocessing\n\nfrom sklearn.model_selection import train_test_split\nimport cv2\n\nimport numpy as np \nimport pandas as pd\n\n\nfrom keras import layers\nfrom keras import models\nfrom keras import optimizers\n\nfrom keras.preprocessing.image import img_to_array, load_img\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D,GlobalMaxPool2D\nfrom keras.layers. normalization import BatchNormalization\nfrom keras.optimizers import Adam","fb0cfa58":"TRAIN_DATA_DIR = '\/kaggle\/input\/plant-seedlings-classification\/train\/*\/*.png'\nTEST_DATA_DIR = '\/kaggle\/input\/plant-seedlings-classification\/test\/*.png'","92d2e506":"data = glob(TRAIN_DATA_DIR)\n\ntraining_data=[]\ntraining_label=[]\n\ndata_count= len(data)\n\nprint(\"Reading Data\")\nfor d in data:\n    training_data.append(cv2.resize(cv2.imread(d),(240,240)))\n    training_label.append(d.split('\/')[-2])\nprint(\"Data Read Complete\")\ntraining_data = np.asarray(training_data)\ntraining_label = pd.DataFrame(training_label)","92245cc1":"training_data","1e834220":"print(\"Size Of traning Data\",len(training_data))","0be49d68":"training_label[0][1]","7eee7ac0":"plt.imshow(training_data[1])","8a405d0a":"training_data[1].shape","4c8c5675":"training_label[0].unique()","e34c086c":"\ncategory = ['Scentless Mayweed', 'Common wheat', 'Charlock', 'Black-grass',\n       'Sugar beet', 'Loose Silky-bent', 'Maize', 'Cleavers',\n       'Common Chickweed', 'Fat Hen', 'Small-flowered Cranesbill',\n       'Shepherds Purse']\nprint_data = {}\n\nprint('------ Data Contains----------')\n\nfor s in category:\n    count= len(os.listdir(os.path.join('..\/input\/plant-seedlings-classification\/train',s )))\n    print('{} data for - {} category'.format(count,s))\n    print_data[s] = count\n    \nplt.figure(figsize=(23, 8))  \nsns.barplot(list(print_data.keys()), list(print_data.values()))","53d65642":"LabelEncode = preprocessing.LabelEncoder()\nLabelEncode.fit(training_label[0])\nnew_label = LabelEncode.transform(training_label[0])\nclearalllabels = np_utils.to_categorical(new_label)\n\nprint(training_data.shape, clearalllabels.shape)","b8346d6c":"training_data[1][1]# Before Normilization","c29f6049":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(training_data,clearalllabels,test_size=0.2,random_state=1,stratify=clearalllabels)\n\nprint(x_train.shape,x_test.shape,y_train.shape,y_test.shape)","f1c6bb76":"x_train.shape[1:]  #Dimensions of the image","f7d80e19":"# Normalization of the Image Data\nx_train = x_train.astype('float32') \/ 255\nx_test = x_test.astype('float32') \/ 255 ","94838e07":"plt.imshow(x_train[0])","c0d9c02b":"data_generator = ImageDataGenerator(rotation_range=20,\n                                    zoom_range=0.2,\n                                    width_shift_range=0.2,\n                                    height_shift_range=0.2,\n                                    horizontal_flip=True,\n                                    vertical_flip=True,\n    )","ad0a38fb":"data_generator.fit(x_train) ","660d319f":"#Augmented Images\nfrom matplotlib import pyplot as plt\ngen = data_generator.flow(x_train[0:1], batch_size=1)\nfor i in range(1, 6):\n    plt.subplot(1,5,i)\n    plt.axis(\"off\")\n    plt.imshow(gen.next().squeeze(), cmap='gray')\n    plt.plot()\nplt.show()","ef6898a3":"import tensorflow as tf","adcafad8":"tf.keras.backend.clear_session()\n#initialising sequential model\nmodel = Sequential()\n#adding 1st convolution layer with 64 filter and imput shape 240 x240x3 with relu function\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), input_shape=(240, 240, 3), activation='relu'))\n#normalising batch\nmodel.add(BatchNormalization(axis=3))\n#adding 2nd convolution layer with 64 filters\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\n#maxpooling\nmodel.add(MaxPooling2D((2, 2)))\n#normalising batch\nmodel.add(BatchNormalization(axis=3))\nmodel.add(Dropout(0.1))\n#adding 3rd convolution layer with 32 filters\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu'))\n#normalising batch\nmodel.add(BatchNormalization(axis=3))\n#adding 4th convolution layer with 32 filters\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu'))\n#maxpooling\nmodel.add(MaxPooling2D((2, 2)))\n#normalising batch\nmodel.add(BatchNormalization(axis=3))\nmodel.add(Dropout(0.1))\n# Global Max pooling layer\nmodel.add(GlobalMaxPool2D())\n\n#flattening layer\nmodel.add(Flatten())\n#Dense layer\n#adding 1 st dense layer\nmodel.add(Dense(100, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n#adding 2 nd dense layer\nmodel.add(Dense(50, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n#adding dense layer with same output as no of cateogries, in our case 12 category with softmax function\nmodel.add(Dense(12, activation='softmax'))\n","35c13805":"model.summary()","467af75a":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","e0eed8ef":"#Saving the best model using model checkpoint callback\nmodel_checkpoint=tf.keras.callbacks.ModelCheckpoint('plat-seedling.h5', \n                                                    save_best_only=True, \n                                                    monitor='val_accuracy', \n                                                    mode='max',\n                                                    verbose=1)","d37d8205":"model_history=model.fit_generator(data_generator.flow(x_train,y_train,batch_size=16),epochs=200,\n          validation_data=(x_test,y_test),callbacks=model_checkpoint)","20bb2708":"#Final score and accuracy of the model\nscore, acc = model.evaluate(x_test,y_test)\nscore1, acc1 = model.evaluate(x_train,y_train)\nprint('Test score:', score,'   Test accuracy:', acc)\nprint('Train score:', score1,'   Train accuracy:',acc1)\n","e9eaf079":"from matplotlib import pyplot\n\n#plotting the accuracy and the loss curve \n\npyplot.plot(model_history.history['accuracy'], label='train')\npyplot.plot(model_history.history['val_accuracy'], label='test')\npyplot.legend()\npyplot.show()\n\npyplot.plot(model_history.history['loss'], label='train')\npyplot.plot(model_history.history['val_loss'], label='test')\npyplot.legend()\npyplot.show()\n","594c26e5":"\npath_to_test = TEST_DATA_DIR\npics = glob(path_to_test)\n#creating two list for isnseritng testing and testing labels\ntestimages = []\ntests = []\nnum = len(pics)\nprint(pics)\nfor i in pics:\n    tests.append(i.split('\/')[-1])\n    testimages.append(cv2.resize(cv2.imread(i),(240,240)))\ntestimages= np.asarray(testimages)","2120e59a":"# Normalization of the Image Data\ntestimages = testimages.astype('float32') \/ 255","83da3b22":"plt.imshow(testimages[0])","b25a8e15":"#using the model to predict the values on the testing data\nprediction = model.predict(testimages)\n\npred = np.argmax(prediction,axis=1)\npredStr = LabelEncode.classes_[pred]\nsubmission = {'file':tests,'species':predStr}\nsubmission = pd.DataFrame(submission)\nsubmission.to_csv(\"Prediction.csv\",index=False)","14da6741":"submission.head()","407ea26d":"# serialize model to JSON\nmodel_json = model.to_json()\nwith open(\"plant_seedling.json\", \"w\") as json_file:\n    json_file.write(model_json)\n\n# serialize weights to HDF5\nmodel.save_weights(\"plant-seedling.h5\")\n\nprint(\"Saved model to disk\")","f9fbb88d":"# Split the data","9c59fa98":"# Build the Model and summarize the model","a4a80dc8":"# Evaluate the Model","7a87e089":"# Read and explore the given dataset","5b2fc653":"# Predict the Result"}}