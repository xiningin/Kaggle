{"cell_type":{"20fc9fbd":"code","7274f028":"code","066009fe":"code","9089727f":"code","e569c749":"code","194835ba":"code","2b25d804":"code","ec359253":"code","d72db143":"code","164e69c4":"code","7c78d0b8":"markdown"},"source":{"20fc9fbd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7274f028":"import pandas as pd\nimport numpy as np \n\nx_train = pd.read_csv ('..\/input\/bigdata-test-example-data\/X_train_2.csv')\nx_test = pd.read_csv('..\/input\/bigdata-test-example-data\/X_test_2.csv')\ny_train = pd.read_csv('..\/input\/bigdata-test-example-data\/y_train.csv')\n\nx_test_id = x_test.iloc[:,0]\n\nprint(x_test_id)\n#print(x_train)\n\nx_train = x_train.iloc[:,1:]\nx_test = x_test.iloc[:,1:]\n\ny_train = y_train.iloc[:,1:]\n#print(x_train)\n#print(x_test)\n#print(y_train)\n\n","066009fe":"##pay back fillna \n#payback         \n#\nx_train.loc[:,'payback'] = x_train.loc[:,'payback'].fillna(0)\nx_test.loc[:,'payback'] = x_train.loc[:,'payback'].fillna(0)\n#print(x_train.loc[:,'payback'])\n\n#print(x_train.isnull().sum())","9089727f":"## from sklearn.preprocessing import LabelEncoder \n\nfrom sklearn.preprocessing import LabelEncoder \nprint(x_train.head())\n#main_product \n#where \n#x_train.loc []\n#print (x_train.loc[:,['main_product']])\nx_train.loc[:,['main_product','where']] = x_train.loc[:,['main_product','where']].apply(LabelEncoder().fit_transform)\n\nx_test.loc[:,['main_product','where']] = x_test.loc[:,['main_product','where']].apply(LabelEncoder().fit_transform)\n\n#print (x_train.loc[:,['main_product']])\n#print (x_test.loc[:,['main_product']])","e569c749":"from sklearn.linear_model import LogisticRegression \n\nmd = LogisticRegression()\n\nmd.fit(x_train,y_train)\n\nprint('Logistic_Regression ' , md.score(x_train,y_train))\n\n\n\n","194835ba":"pred = md.predict_proba(x_test)\npred = pd.DataFrame(pred)\npred = pred.iloc[:,1]\nprint(pred)","2b25d804":"ans = pd.concat({'x_test_id':x_test_id, 'gender':pred}, axis=1)\nprint(ans)\nansaddr='..\/input\/big-data\/x_outputcsv.csv'\n#ans.to_csv(ansaddr, index=False)","ec359253":"#sklearn RandomforestClassifier \n#sklearn svc \n\nfrom sklearn.svm import SVC\n\nmd_sv = SVC(C=1, gamma=10, random_state=1 , probability=True)\n\nmd_sv.fit(x_train, y_train)\n\nprint('SVC score ' , md_sv.score(x_train, y_train))\n\n\n","d72db143":"from sklearn.ensemble import RandomForestClassifier \n\nmd_r= RandomForestClassifier(max_depth=10 , n_estimators=100)\nmd_r.fit(x_train, y_train)\n\nprint('RandomForestClassifier Score : ',md_r.score(x_train, y_train))\n\n","164e69c4":"from sklearn.neighbors import KNeighborsClassifier \n\nmd_n = KNeighborsClassifier(n_neighbors=6)\n\nmd_n.fit(x_train, y_train)\nprint('KNeighborsClassifier Score ', md_n.score(x_train, y_train))\n\n","7c78d0b8":"##### import pandas as pd\n\nimport numpy as np \n\n\ndata = pd.read_csv('..\/input\/bigdata-test-example-data\/X_test_2.csv')\n\nprint(data)\n"}}