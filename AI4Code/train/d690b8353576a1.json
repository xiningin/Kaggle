{"cell_type":{"97b668ce":"code","91750918":"code","5f039129":"code","c09fe47f":"code","e0f32a32":"code","ea30104d":"code","80e9f5cf":"code","c2a2aea5":"code","dd1f51bf":"code","0a08db5d":"code","a50f8e44":"code","76abee5d":"code","62f79978":"code","56d4103f":"code","3f718a3c":"code","4874c34e":"code","b272101f":"code","015d29c7":"code","486dfe2a":"code","1ea88eec":"code","7e24ca3d":"code","ee7a6716":"code","18b85bfb":"code","ca1e5af9":"code","fe4531ed":"code","a5675929":"code","f83a6532":"code","10518326":"code","b249055e":"code","f6f76cb4":"code","dd392dc9":"code","de01f7b2":"code","bf64ccd2":"code","52468c61":"code","7e669087":"code","bc7cdd91":"code","16e0bbb5":"code","6a1774d2":"code","43015393":"code","a3dd3ac0":"code","0e719543":"code","0ff950d5":"markdown","22890e22":"markdown","9e89417e":"markdown","304d8f5c":"markdown","86fd5a3a":"markdown","ca8b4cf1":"markdown","f8465fbb":"markdown","3935f79d":"markdown","c03dc1be":"markdown","db089eb0":"markdown","9d7d0772":"markdown","6f75055e":"markdown","41c2ecac":"markdown","3ca3cac4":"markdown","e4c5df58":"markdown","e6e26052":"markdown","b1aac48d":"markdown","75a37958":"markdown","a0843679":"markdown","69e62c11":"markdown","b56f4567":"markdown","d373da90":"markdown","f17733b7":"markdown"},"source":{"97b668ce":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler,LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import GridSearchCV, train_test_split\nfrom sklearn import svm\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score\n\npd.options.display.max_colwidth = 200","91750918":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5f039129":"train = pd.read_csv('\/kaggle\/input\/advanced-dls-spring-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/advanced-dls-spring-2021\/test.csv')\ntrain.shape, test.shape","c09fe47f":"# \u0414\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0441\u043f\u0438\u0441\u043a\u0438 \u0441 \u0438\u043c\u0435\u043d\u0430\u043c\u0438 \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\n\n# \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nnum_cols = [\n    'ClientPeriod',\n    'MonthlySpending',\n    'TotalSpent'\n]\n\n# \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ncat_cols = [\n    'Sex',\n    'IsSeniorCitizen',\n    'HasPartner',\n    'HasChild',\n    'HasPhoneService',\n    'HasMultiplePhoneNumbers',\n    'HasInternetService',\n    'HasOnlineSecurityService',\n    'HasOnlineBackup',\n    'HasDeviceProtection',\n    'HasTechSupportAccess',\n    'HasOnlineTV',\n    'HasMovieSubscription',\n    'HasContractPhone',\n    'IsBillingPaperless',\n    'PaymentMethod'\n]\n\nfeature_cols = num_cols + cat_cols\ntarget_col = 'Churn'","e0f32a32":"train.sample(5)","ea30104d":"train.info()","80e9f5cf":"(train.isna() | train.isnull()).sum()","c2a2aea5":"(train.TotalSpent == ' ').sum(), (test.TotalSpent == ' ').sum()","dd1f51bf":"total_spent = pd.to_numeric(train.TotalSpent, errors='coerce')\ntrain.TotalSpent = total_spent.fillna(0) # total_spent.mean()\ntotal_spent = pd.to_numeric(test.TotalSpent, errors='coerce')\ntest.TotalSpent = total_spent.fillna(0)","0a08db5d":"num_cols","a50f8e44":"plt.figure(figsize=(20, 7))\nax = None\nfor i, column in enumerate(num_cols):\n    ax = plt.subplot(1, 3, i + 1, sharey=ax)\n    ax.set_title(column)\n    plt.hist(train[column])\nplt.show()","76abee5d":"out = list()\nfor column in cat_cols:\n    out.append([column, train[column].nunique(), dict(train[column].value_counts())])\npd.DataFrame(out, columns=['column', 'num_uniq', 'count_uniq'])","62f79978":"fig, ax = plt.subplots(4, 4, figsize=(16,16))\nax = ax.ravel()\nfor i, column in enumerate(cat_cols):\n    serie = train[column].value_counts()\n    labels = list(serie.index)\n    values = list(serie)\n    x = np.arange(len(labels))\n    ax[i].set_title(column)\n    ax[i].bar(x, values, width=0.5)\n    ax[i].set_xticks(x)\n    ax[i].set_xticklabels(labels)\n    if i == 15:\n        ax[i].tick_params(labelrotation=15)","56d4103f":"fig, ax = plt.subplots(4, 4, figsize=(16,16))\nax = ax.ravel()\nfor i, column in enumerate(cat_cols):\n    serie = train[column].value_counts()\n    labels = list(serie.index)\n    values = list(serie)\n    ax[i].set_title(column)\n    ax[i].pie(values,\n              labels=[str(s).replace(' ', '\\n') for s in labels],\n              autopct='%1.1f%%')","3f718a3c":"targets = train[target_col].value_counts()\nplt.pie(\n    targets,\n    labels=list(targets.index)\n)\nplt.show()","4874c34e":"cb_train = train.copy()\ncb_test = test.copy()","b272101f":"y = train[target_col]","015d29c7":"dummy_data = pd.get_dummies(train[cat_cols], drop_first=True) # drop_first=True\ntrain = pd.concat([train[num_cols], dummy_data], axis=1)","486dfe2a":"train[set(train.columns) - set(feature_cols)].head(5)","1ea88eec":"dummy_data = pd.get_dummies(test[cat_cols], drop_first=True) # drop_first=True\ntest = pd.concat([test[num_cols], dummy_data], axis=1)","7e24ca3d":"X_train, X_valid, y_train, y_valid = train_test_split(train, y, train_size=0.8, random_state=1)","ee7a6716":"scaler = StandardScaler()\nX_train[num_cols] = scaler.fit_transform(X_train[num_cols])\nX_valid[num_cols] = scaler.transform(X_valid[num_cols])\ntrain[num_cols] = scaler.transform(train[num_cols])\ntest[num_cols] = scaler.transform(test[num_cols])","18b85bfb":"X_train","ca1e5af9":"models_params = {\n    'logistic_regression': {\n        'model': LogisticRegression(),\n        'params': {\n            'C': [0.001, 0.01, 0.1, 1, 10, 30, 50, 100],\n        }\n    },\n    \n    'random_forest': {\n        'model': RandomForestClassifier(),\n        'params': {\n            'n_estimators' : [30, 50, 70, 100, 150, 200],\n            'min_samples_split': [5, 10, 15, 20, 25, 30]\n        }\n    },\n    \n    'svm' : {\n        'model': svm.SVC(gamma = 'auto'),\n        'params': {\n            'C': [1, 10, 20], \n            'kernel': ['rbf', 'linear']\n        }\n    },    \n}","fe4531ed":"score_table = list()\nfor model_name, value in models_params.items():\n    clf = GridSearchCV(\n        value['model'],\n        value['params'],\n        cv=5,\n        scoring='roc_auc',\n        n_jobs=-1,\n        verbose=10,\n    )\n    clf.fit(train, y)\n    print(clf.cv_results_['mean_test_score'])\n    score_table.append({\n        'model': model_name ,\n        'best_score': clf.best_score_ ,\n        'best_params': clf.best_params_,\n        'best_model': clf.best_estimator_\n    })","a5675929":"pd.DataFrame(score_table, columns=['model', 'best_score', 'best_params'])","f83a6532":"y_pred = score_table[0]['best_model'].predict_proba(test)[:,-1]","10518326":"import xgboost","b249055e":"params = {\n#     'booster': ['gbtree'],\n#     'n_estimators' : [8, 10, 12],\n#     'eta': [0.07, 0.1, 0.12],\n#     'max_depth': [7, 10, 12],\n#     'min_child_weight': [6, 7, 8, 9],\n#     'gamma': [0.03, 0.05, 0.07],\n#     'colsample_bytree': [0.25, 0.3, 0.35],\n    'booster': ['gblinear'],\n    'n_estimators': [10000],\n    'updater': ['shotgun']\n}\nclf = GridSearchCV(\n    xgboost.XGBClassifier(),\n    params,\n    cv=5,\n    scoring='roc_auc',\n    n_jobs=-1,\n    verbose=10\n)\nclf.fit(train, y)\nprint(clf.cv_results_['mean_test_score'])\nprint(clf.best_params_)","f6f76cb4":"max(clf.cv_results_['mean_test_score'])","dd392dc9":"pd.options.display.max_colwidth = 200\npd.DataFrame([\n    [{'booster': 'gbtree', 'colsample_bytree': 0.35, 'eta': 0.07, 'gamma': 0.07, 'max_depth': 12, 'min_child_weight': 9, 'n_estimators': 10}, 0.8409537799837079],\n    [{'colsample_bytree': 0.3, 'eta': 0.05, 'gamma': 0.0, 'max_depth': 20, 'min_child_weight': 5, 'n_estimators': 10}, 0.8414464698372527],\n    [{'colsample_bytree': 0.3, 'eta': 0.1, 'gamma': 0.05, 'max_depth': 10, 'min_child_weight': 7, 'n_estimators': 10}, 0.842736281878973],\n    [{'booster': 'gbtree', 'colsample_bytree': 0.35, 'eta': 0.12, 'gamma': 0.07, 'max_depth': 7, 'min_child_weight': 9, 'n_estimators': 10}, 0.8436879028707965],\n    [{'booster': 'gblinear', 'eta': 0.15, 'lambda': 0, 'n_estimators': 500, 'updater': 'coord_descent'}, 0.844827631927552],\n    [{'booster': 'gblinear', 'n_estimators': 500}, 0.8448524559481427],\n    [{'booster': 'gblinear', 'n_estimators': 1000, 'updater': 'shotgun'}, 0.8449470472449274]\n], columns=['best_params', 'mean_test_score'])","de01f7b2":"y_pred = clf.best_estimator_.predict_proba(test)[:,-1]","bf64ccd2":"import catboost","52468c61":"X_train, X_valid, y_train, y_valid = train_test_split(\n    cb_train[feature_cols], y, train_size=0.8, random_state=1, stratify=y\n)","7e669087":"boost_model = catboost.CatBoostClassifier(n_estimators=500, cat_features=cat_cols)\nboost_model.fit(X_train, y_train)\ny_train_pred = boost_model.predict_proba(X_train)[:, 1]\ny_valid_pred = boost_model.predict_proba(X_valid)[:, 1]\nroc_auc_score(y_train, y_train_pred), roc_auc_score(y_valid, y_valid_pred)","bc7cdd91":"# boost_model.fit(cb_train[feature_cols], y)","16e0bbb5":"params = {\n#     \"learning_rate\":[0.025, 0.03, 0.04],\n#     \"min_data_in_leaf\":[88, 90, 92],\n#     \"depth\": [3, 4, 5],\n#     \"iterations\":[187, 190, 193]\n# iter0\n#     'learning_rate': [0.01, 0.05, 0.1],\n#     'min_data_in_leaf': [10, 50, 100],\n#     'depth': [3, 5, 10],\n#     'iterations': [100, 200, 300]\n# iter1\n#     'learning_rate': [0.07, 0.1, 0.15],\n#     'min_data_in_leaf': [5, 10, 20],\n#     'depth': [4, 5, 7],\n#     'iterations': [50, 100, 150]\n# iter2\n#     'learning_rate': [0.05, 0.1, 0.15],\n#     'min_data_in_leaf': [10, 15, 20],\n#     'depth': [4, 5, 6, 7],\n#     'iterations': [100, 120, 150]\n# iter3\n    'learning_rate': [0.07, 0.1, 0.12],\n    'min_data_in_leaf': [10, 12, 14],\n    'depth': [5],\n    'iterations': [110, 120, 130]\n# iter4\n#     'learning_rate': [0.08, 0.1, 0.12],\n#     'min_data_in_leaf': [8, 9, 10, 12, 14],\n#     'depth': [4, 5, 6],\n#     'iterations': [100, 105, 110, 120, 130]\n\n}\nboost_model = catboost.CatBoostClassifier(cat_features=cat_cols, random_seed=1, verbose=False)\nresult = boost_model.grid_search(params, X_train, y_train)","6a1774d2":"pd.DataFrame([[\n    roc_auc_score(y_train, boost_model.predict_proba(X_train)[:, 1]),\n    roc_auc_score(y_valid, boost_model.predict_proba(X_valid)[:, 1]),\n    result['params'],\n]])","43015393":"pd.DataFrame([\n    [0.859125, 0.855956, {'min_data_in_leaf': 10, 'depth': 5, 'iterations': 100, 'learning_rate': 0.1}],\n    [0.85573, 0.855295, {'min_data_in_leaf': 5, 'depth': 4, 'iterations': 150, 'learning_rate': 0.07}],\n    [0.859285, 0.856213, {'min_data_in_leaf': 10, 'depth': 5, 'iterations': 120, 'learning_rate': 0.1}],\n    [0.859223, 0.856096, {'min_data_in_leaf': 10, 'depth': 5, 'iterations': 110, 'learning_rate': 0.1}],\n    [0.859723, 0.856381, {'min_data_in_leaf': 8, 'depth': 6, 'iterations': 105, 'learning_rate': 0.08}],\n])","a3dd3ac0":"y_pred = boost_model.predict_proba(cb_test)[:,-1]","0e719543":"submission = pd.read_csv(\n    '\/kaggle\/input\/advanced-dls-spring-2021\/submission.csv',\n    index_col='Id'\n)\nsubmission['Churn'] = y_pred\nsubmission.to_csv('my_submission.csv')","0ff950d5":"\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0441\u044d\u043c\u043f\u043b","22890e22":"#### One-hot-encoder","9e89417e":"#### catboost","304d8f5c":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c - null \u043d\u0435\u0442","86fd5a3a":"# \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435","ca8b4cf1":"## \u041d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","f8465fbb":"\u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","3935f79d":"### \u041a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","c03dc1be":"#### catboost","db089eb0":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0438\u0441\u043f\u044b\u0442\u0430\u043d\u0438\u0439","9d7d0772":"## \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","6f75055e":"\u041d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 (\u0441\u0438\u043b\u044c\u043d\u043e) \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043d\u0435\u0442","41c2ecac":"### \u041d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","3ca3cac4":"### \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0444\u0438\u0447\u0438","e4c5df58":"#### xgboost","e6e26052":"### \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0438\u0447\u0438","b1aac48d":"\u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0442\u0430\u0440\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b","75a37958":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","a0843679":"### \u0413\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0431\u0443\u0441\u0442\u0438\u043d\u0433","69e62c11":"\u041f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c","b56f4567":"\u0412 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 TotalSpent \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c","d373da90":"## \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445","f17733b7":"# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f"}}