{"cell_type":{"fe4c7dc7":"code","d23e07e2":"code","7717d65a":"code","c49c0ac1":"code","0825f1b6":"code","b3835231":"code","728353c4":"code","308966b5":"code","2e402b18":"code","7af751cd":"code","ea3148e6":"code","baba3347":"code","b9e1cd20":"code","90752c61":"markdown","6f795bd8":"markdown","07a5a81e":"markdown","a1329f3a":"markdown"},"source":{"fe4c7dc7":"import pandas as pd\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\n\nfrom learntools.core import *\n\niowa_file_path = '..\/input\/train.csv'\niowa_test_file_path = '..\/input\/test.csv'\ntrain_data = pd.read_csv(iowa_file_path)\ntest_data = pd.read_csv(iowa_test_file_path)\n\ny = train_data.SalePrice\ntrain_features = train_data.drop(['Id', 'SalePrice'], axis = 1)\ntest_data_no_id = test_data.drop(['Id'], axis = 1)","d23e07e2":"# fill in missing numeric values\nfrom sklearn.impute import SimpleImputer\n\n# impute\ntrain_data_num = train_features.select_dtypes(exclude=['object'])\ntest_data_num = test_data_no_id.select_dtypes(exclude=['object'])\nimputer = SimpleImputer()\ntrain_num_cleaned = imputer.fit_transform(train_data_num)\ntest_num_cleaned = imputer.transform(test_data_num)\n\n# columns rename after imputing\ntrain_num_cleaned = pd.DataFrame(train_num_cleaned)\ntest_num_cleaned = pd.DataFrame(test_num_cleaned)\ntrain_num_cleaned.columns = train_data_num.columns\ntest_num_cleaned.columns = test_data_num.columns","7717d65a":"# string columns: transform to dummies\ntrain_data_str = train_data.select_dtypes(include=['object'])\ntest_data_str = test_data_no_id.select_dtypes(include=['object'])\ntrain_str_dummy = pd.get_dummies(train_data_str)\ntest_str_dummy = pd.get_dummies(test_data_str)\ntrain_dummy, test_dummy = train_str_dummy.align(test_str_dummy, \n                                                join = 'left', \n                                                axis = 1)","c49c0ac1":"# convert numpy dummy tables to pandas DataFrame\ntrain_num_cleaned = pd.DataFrame(train_num_cleaned)\ntest_num_cleaned = pd.DataFrame(test_num_cleaned)","0825f1b6":"# joining numeric (after imputing) and string (converted to dummy) data\ntrain_all_clean = pd.concat([train_num_cleaned, train_dummy], axis = 1)\ntest_all_clean = pd.concat([test_num_cleaned, test_dummy], axis = 1)","b3835231":"# detect NaN in already cleaned test data \n# (there could be completely empty columns in test data)\ncols_with_missing = [col for col in test_all_clean.columns\n                                if test_all_clean[col].isnull().any()]\nfor col in cols_with_missing:\n    print(col, test_all_clean[col].isnull().any())","728353c4":"# since there are empty columns in test we need to drop them in train and test data\ntrain_all_clean_no_nan = train_all_clean.drop(cols_with_missing, axis = 1)\ntest_all_clean_no_nan = test_all_clean.drop(cols_with_missing, axis = 1)","308966b5":"train_X, val_X, train_y, val_y = train_test_split(train_all_clean_no_nan, y, random_state=1)","2e402b18":"# pipline\nfrom sklearn.pipeline import make_pipeline\n\npipe = make_pipeline(XGBRegressor(n_estimators = 1300, learning_rate=0.04, random_state = 1))\npipe.fit(train_X, train_y)","7af751cd":"xgb_predictions = pipe.predict(val_X)\n\nxgb_mae = mean_absolute_error(val_y, xgb_predictions)\nprint(\"XGBoost MAE default: {:,.0f}\".format(xgb_mae))","ea3148e6":"# To improve accuracy, create a new Random Forest model which you will train on all training data\npipe = make_pipeline(XGBRegressor(n_estimators = 1300, learning_rate=0.04, random_state = 1))\npipe.fit(train_all_clean_no_nan, y)","baba3347":"test_preds = pipe.predict(test_all_clean_no_nan)","b9e1cd20":"output = pd.DataFrame({'Id': test_data.Id,\n                       'SalePrice': test_preds})\noutput.to_csv('submission.csv', index=False)","90752c61":"# Pipeline: make Predictions and submit","6f795bd8":"# Pipeline for final XGBoost on all training data","07a5a81e":"# Pipeline for XGBoost training and validation","a1329f3a":"# Missing and categorical values"}}