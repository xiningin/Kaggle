{"cell_type":{"48d3156d":"code","b94bd399":"code","db4e1496":"code","efc1f728":"code","7db38ad4":"code","84c3d6c2":"code","d372de55":"code","74243bca":"code","88181c38":"code","bfbf59b2":"code","3f17b132":"code","7e65c6a9":"markdown","8e6eddf4":"markdown","3bb4653f":"markdown","08b354dd":"markdown","f9519659":"markdown","51ed54a5":"markdown","9a3fd585":"markdown","c39ab2fc":"markdown","ca314603":"markdown","f616f6a0":"markdown","0c0b9154":"markdown"},"source":{"48d3156d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport operator\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b94bd399":"%%time\n# Read in the data CSV files\ntrain = pd.read_csv('..\/input\/data-science-bowl-2019\/train.csv')\ntrain_labels = pd.read_csv('..\/input\/data-science-bowl-2019\/train_labels.csv')\ntest = pd.read_csv('..\/input\/data-science-bowl-2019\/test.csv')\nspecs = pd.read_csv('..\/input\/data-science-bowl-2019\/specs.csv')\nss = pd.read_csv('..\/input\/data-science-bowl-2019\/sample_submission.csv')","db4e1496":"assess_list = ['Bird Measurer', 'Cart Balancer', 'Cauldron Filler', 'Chest Sorter', 'Mushroom Sorter']\nworld_list = ['MAGMAPEAK', 'TREETOPCITY', 'CRYSTALCAVES']","efc1f728":"for a in assess_list:\n    world = train.loc[train['title'].str.contains(a), 'world'].unique()\n    print('{} Assessment in {} World'.format(a, world))","7db38ad4":"print('Find_course functions')\ndef world_in_label(df, world):\n    if world == 'MAGMAPEAK':\n        df = df.loc[df['title'].str.contains('Cauldron Filler')]\n    elif world == 'TREETOPCITY':\n        df = df.loc[(df['title'].str.contains('Bird Measurer')) | (df['title'].str.contains('Mushroom Sorter'))]\n    elif world == 'CRYSTALCAVES':\n        df = df.loc[(df['title'].str.contains('Cauldron Filler')) | (df['title'].str.contains('Chest Sorter'))]\n    \n    return df['installation_id'].unique()\n\ndef find_course(world):\n    label_ids = world_in_label(train_labels, world)\n    world_df = train.query('world==\"{}\"'.format(world))[['installation_id', 'world', 'title']]\n    world_df = world_df.loc[world_df['installation_id'].isin(label_ids)]\n    ids = world_df['installation_id'].unique()\n    num_course = world_df['title'].nunique()\n    \n    course_d = dict()\n    \n    print('{} ids'.format(len(ids)))\n    for i in ids:\n        if i not in label_ids:\n            continue\n        else:\n            id_df = world_df.query('installation_id==\"{}\"'.format(i))\n            if id_df['title'].nunique() == num_course:\n                try:\n                    course_d[str(id_df['title'].unique())] += 1\n                except:\n                    course_d[str(id_df['title'].unique())] = 1    \n    return course_d","84c3d6c2":"w_dict = dict()\nfor w in world_list:\n    print('World : {}'.format(w))\n    w_dict[w] = find_course(w)\n    print(sorted(w_dict[w].items(), key=operator.itemgetter(1), reverse=True)[:5])\n    print('='*100)","d372de55":"fig, ax = plt.subplots(1,3, figsize=(18,6))\nfor num, w in enumerate(world_list):\n#with sns.axes_style('Set1'):\n    plot = pd.DataFrame(sorted(w_dict[w].items(), key=operator.itemgetter(1), reverse=True)[:5]).plot(kind='bar', cmap='summer', ax=ax[num])\n    plot.set_title(w, fontsize=20)\n    plot.patches[0].set_color('orange')\n    plot.set_xticklabels(['Path {}'.format(i+1)  for i in range(5)], rotation=45)\n    plot.legend().remove()","74243bca":"temp = train.query('installation_id==\"002db7e3\"')\ntemp = temp.loc[temp['world'] == 'MAGMAPEAK']\nprint('\"Magma Peak - Level 1\" type is {}'.format(train.loc[train['title'].str.contains('Magma Peak - Level 1')]['type'].unique()))\ndisplay(temp.loc[temp['title'].str.contains('Level 1')])\nprint('\"Magma Peak - Level 2\" type is {}'.format(train.loc[train['title'].str.contains('Magma Peak - Level 2')]['type'].unique()))\ndisplay(temp.loc[temp['title'].str.contains('Level 2')])","88181c38":"#Save dict\npd.DataFrame(w_dict).to_csv('course_dict.csv')","bfbf59b2":"%%time\ntrain.loc[train['installation_id'] == '0006a69f']['world'].unique()","3f17b132":"%%time\ntrain.query('installation_id==\"0006a69f\"')['world'].unique()","7e65c6a9":"In the game, each world have several course. My main idea is __most players play the game in order.__\n\nSo I find the path that many users played.","8e6eddf4":"## Bonus.\n\nwhen extract specific data in Dataframe, `query` is faster than `.loc`.","3bb4653f":"In plot, most users play the APP in particular path.","08b354dd":"__PBS KIDS Measure Up! App__ have four world(`TREETOPCITY`, `CRYSTALCAVES`, `MAGMAPEAK`, `None`) and __five `Assessment`__. Each world have many titles(courses) and __the APP__ suggest course's procedure.\n\nIn this kernel, find the title's sequence(order).","f9519659":"![](https:\/\/user-images.githubusercontent.com\/30274701\/68392259-bfacd880-01ac-11ea-9de5-102f85865019.jpg)","51ed54a5":"# 2019 DSB EDA : 'World' and 'Title' sequence","9a3fd585":"Here, __courses in list__ is not match __above picture courses .__\n\nFor example, 'MAGMA PEAK' world have 9 courses in the picture. But train data have 11 unique courses.<br>\n\n\nI think `0000 - Level 0` is not in picture because its media type is just `clip`. It seem like intro clip.<br>\nIn this case, 'Magma Peak - Level 1' and 'Magma Peak - Level 2' is `clip`.","c39ab2fc":"### CRYSTALCAVES(15)\n\n* 'Crystal Caves - Level 1' \n* 'Chow Time' \n* 'Balancing Act'\n* 'Chicken Balancer (Activity)' \n* 'Lifting Heavy Things' \n* 'Crystal Caves - Level 2' \n* 'Honey Cake' \n* 'Happy Camel'\n* 'Cart Balancer (Assessment)' \n* 'Leaf Leader' \n* 'Crystal Caves - Level 3'\n* 'Heavy, Heavier, Heaviest' \n* 'Pan Balance' \n* 'Egg Dropper (Activity)'\n* 'Chest Sorter (Assessment)'\n\n\n### TREETOPCITY(17)\n\n* 'Tree Top City - Level 1' \n* 'Ordering Spheres' \n* 'All Star Sorting'\n* 'Costume Box'\n* 'Fireworks (Activity)'\n* '12 Monkeys'\n* 'Tree Top City - Level 2' \n* 'Flower Waterer (Activity)' \n* 'Pirate's Tale\n* 'Mushroom Sorter (Assessment)'\n* 'Air Show'\n* 'Treasure Map'\n* 'Tree Top City - Level 3'\n* 'Crystals Rule'\n* 'Rulers'\n* 'Bug Measurer (Activity)' \n* 'Bird Measurer (Assessment)'\n\n\n### MAGMA PEAK(11)\n\n* 'Magma Peak - Level 1'\n* 'Sandcastle Builder (Activity)' \n* 'Slop Problem' \n* 'Scrub-A-Dub' \n* 'Watering Hole (Activity)'\n* 'Magma Peak - Level 2'\n* 'Dino Drink'\n* 'Bubble Bath' \n* 'Bottle Filler (Activity)'\n* 'Dino Dive'\n* 'Cauldron Filler (Assessment)'","ca314603":"If we regard `None` world is just intro World, main world is three. In this game, we can find specific `Assessment` is in one world. \n\n* Mushroom Sorter -> TREETOPCITY\n* Bird Measurer -> TREETOPCITY\n* Cart Balancer -> CRYSTALCAVES\n* Chest Sorter -> CRYSTALCAVES\n* Cauldron Filler -> MAGMAPEAK\n\nIn test, we have to predict only last `Assesment`, so it's important specific world's procedure.","f616f6a0":"![Whole World](https:\/\/user-images.githubusercontent.com\/30274701\/68391745-9770aa00-01ab-11ea-87eb-e8fba91917d2.JPG)","0c0b9154":"Most user's path is below."}}