{"cell_type":{"861dd4ca":"code","580a3e58":"code","5692eec9":"code","c5e01821":"code","0274eead":"code","f70c1049":"code","36d65a83":"code","9683af1a":"code","c3afb90b":"code","58049a0a":"code","10e0c999":"code","4a1ef23b":"code","bc64582c":"code","d49b90f5":"code","d236eb7e":"code","8dc3f479":"code","da3c9e2a":"code","76791083":"code","ac930a54":"code","6497ca59":"code","dda3d1e1":"code","498dccf2":"code","5223e088":"code","67b8179a":"code","9372e57a":"code","bd534554":"code","be630e94":"code","016b4548":"code","57b2cd35":"markdown","668206a0":"markdown","736d3178":"markdown","b2917dda":"markdown","546d74b8":"markdown","41a6de07":"markdown","918b7299":"markdown","7db69a38":"markdown","b453f6ae":"markdown","8eaa75cc":"markdown","3098d743":"markdown","82ca8ae5":"markdown","32fd69bd":"markdown","61fac64a":"markdown","0fd7ab10":"markdown","b22716d2":"markdown","a4f60606":"markdown","936a3883":"markdown","53af8d49":"markdown","67c21e11":"markdown","85dd0f34":"markdown","3932c5b8":"markdown"},"source":{"861dd4ca":"# Import the libraries\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Viz with Plotly\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly_express as px\n\n# Seaborn and matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt","580a3e58":"# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","5692eec9":"# Read the train file\ndf_train = pd.read_csv('..\/input\/flight_delays_train.csv')","c5e01821":"# Check the dimensions\ndf_train.shape","0274eead":"#View first few rows\ndf_train.head()","f70c1049":"# Clean month, day of month and day of week\ndf_train['Month'] = df_train['Month'].str[2:].astype('int')\ndf_train['DayofMonth'] = df_train['DayofMonth'].str[2:].astype('int')\ndf_train['DayOfWeek'] = df_train['DayOfWeek'].str[2:].astype('int')\n\n# Check the results\ndf_train.sample(10)","36d65a83":"# Check the target variable\ntrace = [go.Bar(\n            x = df_train['dep_delayed_15min'].value_counts().index.values,\n            y = df_train['dep_delayed_15min'].value_counts().values,\n            #x = levels,\n            #text='Distribution of target variable',\n            marker = dict(color='red', opacity=0.6)\n    )]\n\n\nlayout = dict(title=\"Target variable,15 min Delay, distribution\", \n              margin=dict(l=100), \n              width=400, \n              height=400)\n\nfig = go.Figure(data=trace, layout=layout)\n\niplot(fig)","9683af1a":"# Plot the UniqueCarrier wise frequency of flights\n# UniqueCarrier\ntrace = [go.Bar(\n            x = df_train['UniqueCarrier'].value_counts().index.values,\n            y = df_train['UniqueCarrier'].value_counts().values,\n            marker = dict(color='blue', opacity=0.6)\n    )]\n\n\nlayout = dict(title=\"Carrier wise flight distribution\", \n              width=800, \n              height=400,\n                 xaxis=dict(title='Unique Carrier',tickmode='linear',tickangle=-45))\n\nfig = go.Figure(data=trace, layout=layout)\n\niplot(fig)","c3afb90b":"# By UniqueCarrier and Delay\n\ntrace1 = go.Bar(\n            x = df_train[df_train['dep_delayed_15min'] == 'Y']['UniqueCarrier'].value_counts().index.values,\n            y = df_train[df_train['dep_delayed_15min'] == 'Y']['UniqueCarrier'].value_counts().values,\n            name='Yes',\n            #marker=dict(color='rgb(49,130,189)')\n            marker=dict(color='red',opacity=0.6)\n)\ntrace2 = go.Bar(\n            x = df_train[df_train['dep_delayed_15min'] == 'N']['UniqueCarrier'].value_counts().index.values,\n            y = df_train[df_train['dep_delayed_15min'] == 'N']['UniqueCarrier'].value_counts().values,\n            name='No',\n            marker=dict(color='grey',opacity=0.8)\n)\n\ndata = [trace1, trace2]\n    \nlayout = go.Layout(title=\"Carrier wise flight distribution by Delay\",\n    xaxis=dict(title='Unique Carrier',tickangle=-45),\n    barmode='group'\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","58049a0a":"# Explore the Distance variable\ndata = [go.Histogram(x=df_train['Distance'])]\niplot(data)","10e0c999":"# Distance and Delay\ntrace1 = go.Histogram(\n    x=df_train[df_train['dep_delayed_15min'] == 'Y']['Distance'],\n    name='Yes',\n    marker=dict(color='red',opacity=0.6)\n)\ntrace2 = go.Histogram(\n    x=df_train[df_train['dep_delayed_15min'] == 'N']['Distance'],\n    name='No',\n    marker=dict(color='blue',opacity=0.2)\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Distance travelled and Delay\",\n                   barmode='overlay')\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","4a1ef23b":"# Create New Features - Departure hour and minute from Departure time\ndf_train['Dep_hour'] =  df_train['DepTime']\/\/100\ndf_train['Dep_minute'] =  df_train['DepTime']%100\ndf_train['Dep_hour'].replace(to_replace=[24,25], value=0, inplace=True)","bc64582c":"df_t = pd.crosstab(df_train.Dep_hour,df_train.dep_delayed_15min)\ndf_t.head()","d49b90f5":"trace0 = go.Scatter(\n    x = df_t.index,\n    y = df_t['N'],\n    mode = 'lines+markers',\n    name = 'No Delay'\n)\ntrace1 = go.Scatter(\n    x = df_t.index,\n    y = df_t['Y'],\n    #mode = 'markers',\n    mode = 'lines+markers',\n    name = 'Delays'\n)\ndata = [trace0, trace1]\nlayout = go.Layout(title=\"Departure Hour and Delay\")\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","d236eb7e":"# Create a new flag \ndf_train['Dep_hour_flag'] = ((df_train['Dep_hour'] >= 6) & (df_train['Dep_hour'] < 23)).astype('int')\ndf_t = pd.crosstab(df_train.Dep_hour_flag,df_train.dep_delayed_15min)\ndf_t.head()","8dc3f479":"trace0 = go.Scatter(\n    x = df_t.index,\n    y = df_t['N'],\n    mode = 'lines+markers',\n    name = 'No Delay'\n)\ntrace1 = go.Scatter(\n    x = df_t.index,\n    y = df_t['Y'],\n    #mode = 'markers',\n    mode = 'lines+markers',\n    name = 'Delays'\n)\ndata = [trace0, trace1]\nlayout = go.Layout(title=\"Departure Hour and Delay\")\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig)","da3c9e2a":"df_train.boxplot(column=\"Distance\",by= \"Dep_hour\",figsize= (20,10));","76791083":"f, ax = plt.subplots(figsize=(20, 10))\nsns.boxplot(x='UniqueCarrier', y = 'Distance',ax = ax, data = df_train, hue = 'dep_delayed_15min' )\nax.set_title('Distance Travelled by Carriers', size = 25)","ac930a54":"f, ax = plt.subplots(figsize=(20, 10))\nsns.boxplot(x='UniqueCarrier', y = 'DepTime',ax = ax, data = df_train, hue = 'dep_delayed_15min' )\nax.set_title('Departure Time by Carriers', size = 25)","6497ca59":"f, ax = plt.subplots(figsize=(20, 10))\nsns.boxplot(x='UniqueCarrier', y = 'Dep_hour',ax = ax, data = df_train, hue = 'dep_delayed_15min' )\nax.set_title('Departure Hour by Carriers', size = 25);","dda3d1e1":"# Define a functoin ot create the distribution plots\n\ndef plot_distribution(df, var, target, **kwargs):\n    row = kwargs.get('row', None)\n    col = kwargs.get('col', None)\n    facet = sns.FacetGrid(df, hue = target, aspect = 4, row = row, col = col)\n    facet.map(sns.kdeplot, var, shade = True)\n    facet.set(xlim = (0, df[var].max()))\n    facet.add_legend()\n    plt.show()","498dccf2":"#select numeric columns\nnum_cols = ['Distance', 'DepTime', 'Dep_hour','Dep_minute']\nfor numy in num_cols:\n    plot_distribution(df_train, numy, 'dep_delayed_15min')","5223e088":"# Using plotly express\npx.box(df_train, x=\"Distance\", y=\"UniqueCarrier\", orientation=\"h\")","67b8179a":"trace0 = go.Scatter(\n    x = df_train[df_train['dep_delayed_15min'] == 'Y']['Distance'],\n    y = df_train[df_train['dep_delayed_15min'] == 'Y']['DepTime'],\n    name = 'Yes',\n    mode = 'markers',\n    marker = dict(\n        size = 30,\n        color = rgba(152, 0, 0, .8)',\n        line = dict(\n            width = 2,\n            color = 'rgb(0, 0, 0)'\n        )\n    )\n)\n\ntrace1 = go.Scatter(\n    x = df_train[df_train['dep_delayed_15min'] == 'N']['Distance'],\n    y = df_train[df_train['dep_delayed_15min'] == 'N']['DepTime'],\n    name = 'No',\n    mode = 'markers',\n    marker = dict(\n        size = 10,\n        color = rgba(255, 182, 193, .6)',\n        line = dict(\n            width = 2,\n        )\n    )\n)\n\ndata = [trace0, trace1]\n\nlayout = dict(title = 'Distance and Departure Time',\n              yaxis = dict(zeroline = False),\n              xaxis = dict(zeroline = False)\n             )\n\nfig = dict(data=data, layout=layout)\niplot(fig)","9372e57a":"df_t = df_train[['dep_delayed_15min','Month','DayOfWeek','Dep_hour']]\n\n\ndayOfWeek={1:'Monday', 2:'Tuesday', 3:'Wednesday', 4:'Thursday', 5:'Friday', 6:'Saturday', 7:'Sunday'}\ndf_t['DayOfWeek'] = df_t['DayOfWeek'].map(dayOfWeek)\n\nmon_map = {1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May',\n            6: 'Jun', 7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'}\ndf_t['Month'] = df_t['Month'].map(mon_map)\ndf_t.head()","bd534554":"px.parallel_categories(df_t)","be630e94":"px.parallel_categories(df_t, color=\"Dep_hour\")","016b4548":"df_t.head()","57b2cd35":"Potential we can use this in our model.","668206a0":"The mean distance travelled per hour is different.The longest flights start first thing in the morning.","736d3178":"### 05 Plot the histogram of Distance with Delay. ","b2917dda":"### 03  Plot the UniqueCarrier and the Delay.","546d74b8":"### 01 Check the target variable dep_delayed_15min","41a6de07":"The delays happen between hours 6 and 23.Lets create a flag to denote this behaviour.","918b7299":"### 02 Plot the UniqueCarrier and their frequencies.","7db69a38":"There is lot of difference between the head and tail in the frequencies.If we plan to use this variable in our model, potentiialy we can see if we can merger a few of them together.","b453f6ae":"WN has most number of flights and seems to fly over shorter distances than AA which has the second most frequency of flights.","8eaa75cc":"There are quite a few outliers.","3098d743":"### 09 Scatter plot","82ca8ae5":"The target is not so badly skewed, the 15 mins delay(Y) has around 20 k rows.","32fd69bd":"### 04 Plot histogram for Distance.","61fac64a":"The mean time of all the flights which are delayed is later than the flights which are not delayed.","0fd7ab10":"Same as the above plot but just the hour component.","b22716d2":"### 06 Plot the departure hour and the delay.","a4f60606":"### In this kernel, we will visually explore the flight delays dataset, mosty using plotly.\n### Plots\n- 01 Check the target variable dep_delayed_15min\n- 02 Plot the UniqueCarrier and their frequencies.\n- 03  Plot the UniqueCarrier and the Delay.\n- 04 Plot histogram for Distance.\n- 05 Plot the histogram of Distance with Delay\n- 06 Plot the departure hour and the delay\n- 07 Various Boxplots\n- 08 Check the Distrubution\n- 09 Scatter PLot\n- 10 Parallel Coordinates","936a3883":"### 07 Boxplots","53af8d49":"Again we observe the difference in hour distribution for delayed and ontime flights.","67c21e11":"### Create new features","85dd0f34":"### 08 Check the Distrubution","3932c5b8":"Observe less delays in long distance flights."}}