{"cell_type":{"915d7703":"code","378e0f4e":"code","16f025b8":"code","0c3c1761":"code","cd69f599":"code","9b35b779":"code","abb76d39":"code","68ef744b":"code","6d43ca0d":"code","3191fe0f":"code","0b15055b":"code","764da984":"code","30a044d9":"code","a6d804ef":"code","af00e39a":"code","b962acb2":"code","e729b203":"code","bcdc11f9":"code","7abd7433":"code","ff64ace6":"code","38eadeed":"code","dff2d263":"code","36f8ae36":"code","d4b102d5":"code","dd18d2fa":"code","4fffd06d":"code","2916ddb6":"code","80d7cb15":"code","db727122":"code","c3d6ead0":"code","93390e29":"code","20ffa278":"code","bf984e2c":"code","a0ccac36":"code","439b882e":"code","9e7bb8c5":"code","d4e9bb74":"code","13b5faf0":"code","25c78d75":"code","d57b55ea":"markdown","22d868c4":"markdown","12057618":"markdown","5e3acd38":"markdown","f65bd989":"markdown","f4e4c3f7":"markdown","2f52ac19":"markdown","cdd1aa21":"markdown","37380361":"markdown","00dd95b6":"markdown","001a8908":"markdown","890fedc7":"markdown","1daaa623":"markdown","c1f13d79":"markdown","85eee823":"markdown","96fc897d":"markdown","6ecefbe1":"markdown","f26c59d4":"markdown","6e756e0f":"markdown","f05b62a9":"markdown","8b52ddcf":"markdown","140b0387":"markdown","32bd68ae":"markdown","b853e596":"markdown","372c9096":"markdown","61de01bb":"markdown","0f18e6ae":"markdown","291c1092":"markdown","6bef33d6":"markdown","6d870024":"markdown","edca9d35":"markdown","e3c5e002":"markdown","f9803ea2":"markdown"},"source":{"915d7703":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt # visualization","378e0f4e":"# from: https:\/\/www.kaggle.com\/sohier\/getting-imdb-kernels-working-with-tmdb-data\/\nimport json\n\ndef loadMovies(path):\n    df = pd.read_csv(path)\n    df['release_date'] = pd.to_datetime(df['release_date']).apply(lambda x: x.date())\n    json_columns = ['genres', 'keywords', 'production_countries', 'production_companies', 'spoken_languages']\n    for column in json_columns:\n        df[column] = df[column].apply(json.loads)\n    return df\n\n\ndef loadCredits(path):\n    df = pd.read_csv(path)\n    json_columns = ['cast', 'crew']\n    for column in json_columns:\n        df[column] = df[column].apply(json.loads)\n    return df","16f025b8":"import os\n\n# Listing files\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0c3c1761":"# Loading movies\ndfMovies = loadMovies(\"..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv\")\n\n# Filtering columns\ncolumnsOfInterest = ['id', 'title', 'genres', 'overview']\ndfMovies = dfMovies[columnsOfInterest]\n# Removing null(overview)\ndfMovies = dfMovies[dfMovies['overview'].notnull()].reset_index(drop=True)\n\n# Print\ndisplay(dfMovies.head(3))","cd69f599":"# Counting number of categories\ncategoriesCount = {}\n\nfor index, row in dfMovies.iterrows():\n    for category in row['genres']:\n        catName = category['name']\n        categoriesCount[catName] = categoriesCount[catName]+1 if (catName in categoriesCount) else 1","9b35b779":"print('number of categories:', len(categoriesCount.keys()))","abb76d39":"# Plotting\nkeys = categoriesCount.keys()\nvalues = categoriesCount.values()\n\nplt.bar(keys, values)\nplt.xticks(rotation='vertical')\nplt.show()","68ef744b":"import gensim # topic modeling toolkit\nimport nltk # natural language toolkit\n\nfrom gensim.utils import simple_preprocess\nfrom gensim.parsing.preprocessing import STOPWORDS\nfrom nltk.stem import WordNetLemmatizer, SnowballStemmer\nfrom nltk.stem.porter import *\n\nstemmer = SnowballStemmer('english')\nnltk.download('wordnet')","6d43ca0d":"# Lemmatization process\ndef lemmatize(text):\n    return WordNetLemmatizer().lemmatize(text, pos='v')\n\n\n# Stemming process\ndef stemming(text):\n    return stemmer.stem(text)\n\n\n# Tokenization process\ndef preprocess(text):\n    result = []\n    for token in gensim.utils.simple_preprocess(text):\n        if token not in gensim.parsing.preprocessing.STOPWORDS and len(token) > 3:\n            LemmatizedToken = lemmatize(token)\n            result.append(stemming(LemmatizedToken))\n    return result","3191fe0f":"movie = dfMovies.loc[255]\ndisplay(movie)","0b15055b":"overview = movie['overview']\nprint(overview)","764da984":"print(preprocess(overview))","30a044d9":"processedMovies = dfMovies['overview'].map(preprocess)\ndisplay(processedMovies)","a6d804ef":"dictionary = gensim.corpora.Dictionary(processedMovies)","af00e39a":"dictionary.filter_extremes(no_below=10, no_above=0.5, keep_n=100000)","b962acb2":"bowCorpus = [dictionary.doc2bow(doc) for doc in processedMovies]","e729b203":"display(bowCorpus[255])","bcdc11f9":"from gensim import corpora, models\n\ntfidf = models.TfidfModel(bowCorpus)\ntfidfCorpus = tfidf[bowCorpus]","7abd7433":"display(tfidfCorpus[255])","ff64ace6":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom gensim.matutils import corpus2dense","38eadeed":"tfidfDense = corpus2dense(tfidfCorpus, num_terms=100000, num_docs=len(tfidfCorpus))\ntfidfDense = tfidfDense.T","dff2d263":"print('movies, attributes:', tfidfDense.shape)","36f8ae36":"denseMatrix, yCategory = [], []\nfor index, row in dfMovies.iterrows():\n    for category in row['genres']:\n        denseMatrix.append(tfidfDense[index])\n        yCategory.append(category['name'])","d4b102d5":"denseMatrix = [tup.astype(np.float16) for tup in denseMatrix]","dd18d2fa":"del tfidfDense","4fffd06d":"X_train, X_test, y_train, y_test = train_test_split(denseMatrix, yCategory, test_size=0.1, random_state=43)\n\nprint('train size:', len(y_train))\nprint('test size :', len(y_test))","2916ddb6":"def getClassesProbabilities(model, record):\n    probs = model.predict_proba([record]).T\n    classes = model.classes_\n\n    output = pd.DataFrame(data=[classes,probs]).T\n    output.columns = ['category','probability']\n    output['probability'] = output.apply(lambda x: x['probability'][0], axis=1)\n    return output.sort_values(by='probability', ascending=False)","80d7cb15":"# Train model\nclf = LogisticRegression(random_state=43, max_iter=150).fit(X_train, y_train)","db727122":"from joblib import dump, load\n\n# Save model\ndump(clf, 'logisticRegression.model')","c3d6ead0":"# Load trained model\nclf = load('logisticRegression.model') ","93390e29":"clf.predict([X_test[1]])","20ffa278":"getClassesProbabilities(clf, X_test[1])","bf984e2c":"ldaBow = gensim.models.LdaMulticore(bowCorpus, num_topics=10, id2word=dictionary, passes=2, workers=2)","a0ccac36":"for idx, topic in ldaBow.print_topics(num_words=5):\n    print('Topic: {} Words: {}'.format(idx, topic))","439b882e":"ldaTfidf = gensim.models.LdaMulticore(tfidfCorpus, num_topics=10, id2word=dictionary, passes=2, workers=4)","9e7bb8c5":"for idx, topic in ldaTfidf.print_topics(num_words=5):\n    print('Topic: {} Word: {}'.format(idx, topic))","d4e9bb74":"for index, score in sorted(ldaTfidf[tfidfCorpus[255]], key=lambda tup: -1*tup[1]):\n    print(\"\\nScore: {}\\t Topic {}: {}\".format(score, index, ldaTfidf.print_topic(index, 5)))","13b5faf0":"newMovie = \"Woody attempts to make Forky, a toy, suffering from existential crisis, realise his importance in the life of Bonnie, their owner. However, things become difficult when Gabby Gabby enters their lives.\"\nprint(newMovie)","25c78d75":"bowVector = dictionary.doc2bow(preprocess(newMovie))\n\nfor index, score in sorted(ldaBow[bowVector], key=lambda tup: -1*tup[1]):\n    print(\"Score: {}\\t Topic {}: {}\".format(score, index, ldaBow.print_topic(index, 5)))","d57b55ea":"## Using TF-IDF","22d868c4":"---\n# Movies' categories\n\nWhich movie categories do we have in this dataset? How many movies per category do we have?","12057618":"See the 5 most representative words for each abstract topic.","5e3acd38":"### Predicting Topic using LDA TF-IDF model\n\nCheck which topic a movie belongs to.\n\n- Selecting a random movie - id 255.","f65bd989":"### Unseen movie using LDA BOW model\n\nCheck which topic a new movie belongs to.\n\n- Topic identify for \"Toy Story 4\".","f4e4c3f7":"At this point, we have two ways to represent the movies' attributes - bag-of-words and tf-idf.   \n**What can we do?** Classify categories, identify common topics into the movies, and so on.","2f52ac19":"## Using bag-of-words (BOW)","cdd1aa21":"Importing the main libraries.","37380361":"As we can see, we have a few categories presented in a high number of movies (_e.g.,_ Drama) and others not so much (_e.g.,_ TV Movie). \nAt this point, we have to specify the importance of these low representative categories for our project.\nFor studying proposes, I will maintain all of the categories. However, note that this action can injure our future prediction.","00dd95b6":"Filter out tokens that appear in\n\n- Less than 10 movies (absolute number); or\n- More than 50% movies (fraction of total corpus size).\n- After that, keep only the first 100,000 most frequent tokens.","001a8908":"Preview a vector of characteristics.","890fedc7":"## Attributes\n\nCreating a dense matrix, that is transform the words into a matrix of attributes.","1daaa623":"Testing preprocess -    \nSelecting a random movie.","c1f13d79":"See the 5 most representative words for each abstract topic.","85eee823":"## Bag of Words (BOW)\n\nThe [bag-of-words](https:\/\/en.wikipedia.org\/wiki\/Bag-of-words_model) model is a representation used in natural language processing to transform the document into number vectors. In this model, a document is represented as the bag of its words, disregarding grammar and even word order but keeping multiplicity\/quantity.","96fc897d":"Memory cleanning: reducing the decimals and deleting unused variables.","6ecefbe1":"## Trainning\n\nSplit the data into train and test datasets.","f26c59d4":"---\n# NLP (Natural Language Processing)\n\nExtract attributes from the movies' overview to create vectors of characteristics describing the movies and their categories.\n\n## Data Pre-processing\n\nIt will perform the following steps:\n\n- **Tokenization** - split the sentences into words\/tokens. Lowercase the words and remove punctuation.\n    - Words that have fewer than 3 characters are removed.\n    - All [stopwords](https:\/\/en.wikipedia.org\/wiki\/Stop_word) are removed.\n- **Lemmatization** \u2014 words in third person are changed to first person and verbs in past and future tenses are changed into present.\n- **Stemming** \u2014 words are reduced to their root form.","6e756e0f":"---\n# 2. Topic Modeling\n\nTopic modeling is a type of statistical modeling for discovering the abstract \"topics\" that occur in a set of documents. \n[Latent Dirichlet Allocation](https:\/\/en.wikipedia.org\/wiki\/Latent_Dirichlet_allocation) (LDA) model is an algorithm used to classify text in a document to a particular topic. \nA topic is represented by a set of most representative words (common words) that appear in a collection of documents.\n\nReferences:\n\n- [A Beginner\u2019s Guide to Latent Dirichlet Allocation (LDA)](https:\/\/towardsdatascience.com\/latent-dirichlet-allocation-lda-9d1cd064ffa2)\n- [Topic Modeling and Latent Dirichlet Allocation (LDA) in Python](https:\/\/towardsdatascience.com\/topic-modeling-and-latent-dirichlet-allocation-in-python-9bf156893c24)","f05b62a9":"Preprocess all movies.","8b52ddcf":"Getting characteristics of the categories:\n\n- For each movie\n    - For each category\n        - Get its atributes and it category","140b0387":"## Detecting categories\n\nPredict a categorie, or a set of categories, to a movie.","32bd68ae":"Preprocess coding _(hide)_.","b853e596":"# 1. Infer Categories\n\nNote, a movie is composed of a set of categories. Thus, we have to identify $n$ categories to an unseen movie, because we do not know the number of categories that it has. \nIn this way, we have to use a [soft classify](https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC3233196\/) approach - that is a classifier that identify a set of classes to a record.","372c9096":"Gensim doc2bow\n\n- Creating the movies' attributes\/characteristics.\n    - Using the dictionary to create the BOW.","61de01bb":"Let's train our classifier. ","0f18e6ae":"Loading the movies' data.","291c1092":"# Introduction\n\nIs it possible to infer a movie category\/genre, or a set of categories, based on its synopsis\/overview? In this notebook, I will execute an extensive data analysis on over 4.5k movies exploring its categories and overview. Let's try to predict a movie's category based on text - its overview!\n\nDataset: [TMDB 5000 Movie Dataset](https:\/\/www.kaggle.com\/tmdb\/tmdb-movie-metadata?select=tmdb_5000_movies.csv): Metadata on ~5,000 movies from TMDb.","6bef33d6":"See the probability for other categories.","6d870024":"Preview a vector of characteristics.","edca9d35":"## TF-IDF\n\n[Term frequency\u2013inverse document frequency](https:\/\/en.wikipedia.org\/wiki\/Tf%E2%80%93idf) (TF-IDF) is another way to represent the characteristics from movies, similar to bag-of-words.\nTF-IDF is a numerical statistic that is intended to reflect how important a word is to a document in a collection or corpus.","e3c5e002":"Listing the files.","f9803ea2":"# Loading the data\n\n- Importing main libraries\n- Listings files of the dataset\n- Loading data into a `pandas.DataFrame`"}}