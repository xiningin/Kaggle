{"cell_type":{"a673ce12":"code","7e96fdd6":"code","01c78e73":"code","51a42cfc":"code","a18cddac":"code","048725ad":"code","ec0fd771":"markdown","d5c60a37":"markdown"},"source":{"a673ce12":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e96fdd6":"from sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nimport cv2\nfrom collections import Counter\nfrom skimage.color import rgb2lab, deltaE_cie76","01c78e73":"img_sample_path = '\/kaggle\/input\/6000-children-and-teen-book-covers\/BookCovers\/hello-hello.jpg'\nimg_sample = cv2.imread(img_sample_path)\n\nprint(\"Shape of the image (an array): {}\".format(img_sample.shape))\nplt.imshow(img_sample)","51a42cfc":"img_sample = cv2.cvtColor(img_sample, cv2.COLOR_BGR2RGB)\nplt.imshow(img_sample)\nplt.axis('off')","a18cddac":"class DominantColorGen:\n    \n    def __init__(self, image, colors):\n        self.image = image\n        self.colors = colors\n        self.kmeans = KMeans(self.colors)\n        \n    def fit(self):\n        image = self.modify(self.image)\n        self.kmeans = KMeans(self.colors)\n        labels = self.kmeans.fit_predict(image)\n        self.counts = Counter(labels)\n        \n    def plot(self):\n        rgb_clusters = self.kmeans.cluster_centers_\n        rgb_centers = [rgb_clusters[key] for key in self.counts.keys()]\n        hex_centers = [self.rgb_to_hex(rgb_center) for rgb_center in rgb_centers]\n        \n        plt.pie(counts.values(), labels = hex_centers, colors = hex_centers, autopct = \"%1.0f%%\")\n        plt.show()\n        \n    def modify(self, image):\n        return image.reshape(image.shape[0] * image.shape[1], 3)\n    \n    def rgb_to_hex(self, rgb):\n        ## use int(rgb) or it throws an error: ValueError: Unknown format code 'x' for object of type 'float'\n        return \"#{:02x}{:02x}{:02x}\".format(int(rgb[0]), int(rgb[1]), int(rgb[2]))","048725ad":"dom = DominantColorGen(img_sample, 10)\ndom.fit()\n\nplt.figure(figsize = (20, 10))\ndom.plot()","ec0fd771":"The image is in \"BGR\" color encoding by default... we shall convert it into its original form of \"RGB\"","d5c60a37":"# The code"}}