{"cell_type":{"4699e19e":"code","b4e9009d":"code","4a4ffd63":"code","bf93a7fa":"code","0bcfea2f":"code","2c74689f":"code","dac1c8e7":"code","46325169":"code","ca10bfc5":"code","6acff50b":"code","289a34a2":"code","b742d25b":"code","f9be0529":"code","938c050f":"code","abecc7ad":"code","7d6a44ac":"code","123e5082":"code","9368ef5d":"code","bce61989":"code","d87c0a12":"code","d84c41eb":"code","4018f32e":"code","c3e93a4d":"code","65f9c80a":"code","1dad19fc":"code","f3c5dc1f":"code","73de1087":"code","486ce94a":"code","bd0cf765":"code","51ba0da8":"code","ffde5ba4":"code","7d9e19fe":"code","0c72ffac":"code","3391784c":"code","a1def47b":"code","939f7144":"code","df0cca2c":"code","2223f4af":"code","d773e48f":"code","ff96c710":"code","d7c6ba5e":"code","f0848b7a":"code","a56b305c":"code","008660fb":"code","f0277b41":"code","7e4b70f8":"code","f5bcc9c5":"code","ee8bba9a":"code","80dffffa":"code","bd9652ad":"code","7dcdb6f3":"code","6e9315b5":"code","e06045ca":"code","edf0fe23":"code","a5cbd948":"code","4e71ad86":"code","6fb4801d":"code","56a3cc73":"code","29399481":"code","65893f14":"code","9fe4be38":"markdown","4ab9d9ae":"markdown","3f7da874":"markdown","c6205d6d":"markdown","6daf2e4d":"markdown","431fd405":"markdown"},"source":{"4699e19e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b4e9009d":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf\nfrom statsmodels.tsa.seasonal import STL\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom statsmodels.tsa.forecasting.stl import STLForecast\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nimport re #to extract model name","4a4ffd63":"## ** counts both people riding bikes and pedestrians. **\nseattle_trail_df = pd.read_csv(\"..\/input\/seattle-burke-gilman-trail\/burke-gilman-trail-north-of-ne-70th-st-bike-and-ped-counter.csv\")\nseattle_trail_df","bf93a7fa":"seattle_trail_df['Date'] = pd.to_datetime(seattle_trail_df['Date'], infer_datetime_format=True)\nseattle_trail_df_time_indexed = seattle_trail_df.set_index('Date')\nseattle_trail_df_time_indexed = seattle_trail_df_time_indexed.ffill(axis = 0)\nseattle_trail_df_time_indexed","0bcfea2f":"#since KATS input needs a new column called time\nrenamed_df = seattle_trail_df.rename(columns={\"Date\": \"time\"})\n\n#since some datapoints were missing, we forward fill\nfilled_df = renamed_df.ffill(axis=0)\nfilled_df.info()","2c74689f":"pip install salesforce-merlion\n","dac1c8e7":"\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf\nfrom statsmodels.tsa.seasonal import STL\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom statsmodels.tsa.forecasting.stl import STLForecast\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nimport re\n\nfrom merlion.utils import TimeSeries\n\n#since merlion needs time indexed dataset input\nseattle_trail_train_df = seattle_trail_df_time_indexed[:int(0.7*len(seattle_trail_df_time_indexed.index))]\nseattle_trail_test_df = seattle_trail_df_time_indexed[int(0.7*len(seattle_trail_df_time_indexed.index)):]\n\n\nmerlion_train_data = TimeSeries.from_pd(seattle_trail_train_df)\nmerlion_test_data = TimeSeries.from_pd(seattle_trail_test_df)","46325169":"#RMSE calc from dataframe \n\ndef RMSE_calc(df):\n     print(f'The RMSE is {(((df[df.columns[0]]-df[df.columns[1]])**2).mean())**0.5 }')\n    ","ca10bfc5":"#Default Forecaster only for a forecast horizon of 4 days (~100 time steps)\n\nfrom merlion.models.defaults import DefaultForecasterConfig, DefaultForecaster\ndefault_merlion_model = DefaultForecaster(DefaultForecasterConfig(granularity='1h',target_seq_index=2))\ndefault_merlion_model.train(train_data=merlion_train_data)\ndefault_test_pred, default_test_err = default_merlion_model.forecast(time_stamps=\n                                                                     merlion_test_data.window(t0='2018-03-14 16:00:00',tf='2018-03-18 19:00:00').time_stamps)\n\n\n\ndefault_test_pred.to_pd","6acff50b":"#generating dataframe containing actual and forecasts for default forecaster\ndefault_df = default_test_pred.to_pd()\ndefault_df.rename(columns = {'Ped North':'forecasts'},inplace = True)\ndefault_df['actual'] = merlion_test_data.window(t0='2018-03-14 16:00:00',tf='2018-03-18 19:00:00').univariates['Ped North']\ndefault_df.head()","289a34a2":"default_df.plot()\nplt.show()","b742d25b":"#RMSE for default forecaster\nRMSE_calc(default_df)","f9be0529":"#Prophet model\nfrom merlion.models.forecast.prophet import ProphetConfig,Prophet\n\nProphet_merlion_model = Prophet(ProphetConfig(target_seq_index=2))\nProphet_merlion_model.train(train_data=merlion_train_data)\nProphet_test_pred, Prophet_test_err = Prophet_merlion_model.forecast(time_stamps=\n                                                                     merlion_test_data.window(t0='2018-03-14 16:00:00',tf='2018-03-18 19:00:00').time_stamps)\n\n\n\nProphet_test_pred.to_pd\n","938c050f":"#generating dataframe containing actual and forecasts for Prophet\nProphet_df = Prophet_test_pred.to_pd()\nProphet_df.rename(columns = {'Ped North':'forecasts'},inplace = True)\nProphet_df['actual'] = merlion_test_data.window(t0='2018-03-14 16:00:00',tf='2018-03-18 19:00:00').univariates['Ped North']\nProphet_df.head()","abecc7ad":"Prophet_df.plot()\nplt.title('Prophet results')\nplt.show()","7d6a44ac":"#RMSE for prophet\n\nRMSE_calc(Prophet_df)","123e5082":"#Arima model (default)\nfrom merlion.models.forecast.arima import ArimaConfig,Arima\n\nArima_merlion_model = Arima(ArimaConfig(max_forecast_steps=100,target_seq_index=2))\nArima_merlion_model.train(train_data=merlion_train_data)\nArima_test_pred, Arima_test_err = Arima_merlion_model.forecast(time_stamps=\n                                                                     merlion_test_data.window(t0='2018-03-14 16:00:00',tf='2018-03-18 19:00:00').time_stamps)\n\n\n\nArima_test_pred.to_pd\n\n","9368ef5d":"#generating dataframe containing actual and forecasts for Arima\nArima_df = Arima_test_pred.to_pd()\nArima_df.rename(columns = {'Ped North':'forecasts'},inplace = True)\nArima_df['actual'] = merlion_test_data.window(t0='2018-03-14 16:00:00',tf='2018-03-18 19:00:00').univariates['Ped North']\nArima_df.head()","bce61989":"Arima_df.plot()\nplt.title('Arima results')\nplt.show()\n","d87c0a12":"#RMSE for Arima (default config order = (4,1,2))\n\nRMSE_calc(Arima_df)","d84c41eb":"#Sarima model (default)\nfrom merlion.models.forecast.sarima import SarimaConfig,Sarima\n\nSarima_merlion_model = Sarima(SarimaConfig(max_forecast_steps=100,target_seq_index=2))\nSarima_merlion_model.train(train_data=merlion_train_data)\nSarima_test_pred, Sarima_test_err = Sarima_merlion_model.forecast(time_stamps=\n                                                                     merlion_test_data.window(t0='2018-03-14 16:00:00',tf='2018-03-18 19:00:00').time_stamps)\n\n\n\nSarima_test_pred.to_pd\n","4018f32e":"#generating dataframe containing actual and forecasts for Sarima\nSarima_df = Sarima_test_pred.to_pd()\nSarima_df.rename(columns = {'Ped North':'forecasts'},inplace = True)\nSarima_df['actual'] = merlion_test_data.window(t0='2018-03-14 16:00:00',tf='2018-03-18 19:00:00').univariates['Ped North']\nSarima_df.head()","c3e93a4d":"Sarima_df.plot()\nplt.title('Sarima results')\nplt.show()","65f9c80a":"# RMSE for Sarima(default config  order = (4,1,2), seasonal order = (2,0,1,24))\n\nRMSE_calc(Sarima_df)","1dad19fc":"# VAR model\n\nfrom merlion.models.forecast.vector_ar import VectorARConfig,VectorAR\n\nVAR_merlion_model = VectorAR(VectorARConfig(max_forecast_steps=100,maxlags=4,target_seq_index=2))\nVAR_merlion_model.train(train_data=merlion_train_data)\nVAR_test_pred, VAR_test_err = VAR_merlion_model.forecast(time_stamps=\n                                                                    merlion_test_data.window(t0='2018-03-14 16:00:00',tf='2018-03-18 19:00:00').time_stamps)\n\n\n\nVAR_test_pred.to_pd\n\n\n","f3c5dc1f":"#generating dataframe containing actual and forecasts for VAR\nVAR_df = VAR_test_pred.to_pd()\nVAR_df.rename(columns = {'Ped North':'forecasts'},inplace = True)\nVAR_df['actual'] = merlion_test_data.window(t0='2018-03-14 16:00:00',tf='2018-03-18 19:00:00').univariates['Ped North']\nVAR_df.head()","73de1087":"VAR_df.plot()\nplt.title('VAR results')\nplt.show()","486ce94a":"RMSE_calc(VAR_df)","bd0cf765":"#Ensemble of forecast models\n\nfrom merlion.models.ensemble.forecast import ForecasterEnsembleConfig,ForecasterEnsemble\n\nEnsemble_merlion_model = ForecasterEnsemble(config=ForecasterEnsembleConfig(max_forecast_steps=100,target_seq_index=2),models=[Arima_merlion_model,Sarima_merlion_model,Prophet_merlion_model,VAR_merlion_model,default_merlion_model])\nEnsemble_merlion_model.train(train_data=merlion_train_data)\nEnsemble_test_pred, Ensemble_test_err = Ensemble_merlion_model.forecast(time_stamps=\n                                                                    merlion_test_data.window(t0='2018-03-14 16:00:00',tf='2018-03-18 19:00:00').time_stamps)\n\n\n\nEnsemble_test_pred.to_pd\n\n\n\n","51ba0da8":"VAR_merlion_model.config","ffde5ba4":"pip install kats","7d9e19fe":"from kats.consts import TimeSeriesData\n\n","0c72ffac":"#maxlags\n#Maximum number of lags to check for order selection, Defaults to 12 * (nobs\/100.)**(1.\/4)\n\n#method\n#Estimation method to use Defaults to OLS\n\n#ic\n#Information criterion to use for VAR order selection Defaults to None\n\n#trend\n#\u201cc\u201d - add constant (Default), \u201cct\u201d - constant and trend, \u201cctt\u201d - constant, linear and quadratic trend, \u201cn\u201d\/\u201cnc\u201d - no constant, no trend","3391784c":"filled_df[:int(0.7*len(filled_df))]","a1def47b":"#convert pandas Dataframe object to kats time series data object\nseattle_trail_train_ts = TimeSeriesData(filled_df[:int(0.7*len(filled_df))])\nseattle_trail_test_ts = TimeSeriesData(filled_df[int(0.7*len(filled_df)):])\n","939f7144":"# Use VAR model to forecast this multivariate time series\nfrom kats.models.var import VARModel, VARParams\n\nparams = VARParams()\nm = VARModel(seattle_trail_train_ts, params)\nm.fit()\nfcst = m.predict(steps=24,freq='1H')\n\n#m.plot()\n#plt.show()\n\n","df0cca2c":"fcst_dataframe=fcst['Ped South'].to_dataframe()\nfcst_dataframe.head()","2223f4af":"#putting the forecasts alonside the actual values\n#lots of NaN in forecasts\n\nPed_south_forecast = pd.DataFrame()\nPed_south_forecast['Actual'] = filled_df[int(0.7*len(filled_df)):int(0.7*len(filled_df))+23]['Ped South']\nPed_south_forecast['Predictions'] = fcst_dataframe['fcst']\nPed_south_forecast.head()","d773e48f":"#VAR model is a multivariate extension of the univariate autoregressive (AR) model.\n#It captures the linear interdependencies between multiple variables using a system of equations.\n#Each variable depends not only on its own lagged values but also on the lagged values of other variables.\n\n\n#to get nan rows in a dataframe\n#filled_df.loc[renamed_df[renamed_df.isna().any(axis = 1)].index,:]","ff96c710":"from merlion.evaluate.forecast import ForecastMetric\nfrom merlion.models.factory import ModelFactory\nfrom merlion.models.ensemble.combine import ModelSelector\n\n# Time series is sampled hourly, so max_forecast_steps = 24 means we can predict up to 1 day in the future\ntarget_seq_index = 2\nmax_forecast_steps = 24\nkwargs = dict(target_seq_index=target_seq_index, max_forecast_steps=max_forecast_steps)\n\nmodel1 = ModelFactory.create(\"DefaultForecaster\", **kwargs)\nmodel2 = ModelFactory.create(\"Arima\", **kwargs)\nmodel3 = ModelFactory.create(\"Sarima\", **kwargs)\nmodel4 = ModelFactory.create(\"Prophet\", **kwargs)\n\n# This ModelSelector combiner picks the best model based on sMAPE\nmodel5 = ModelFactory.create(\"ForecasterEnsemble\", models=[model1, model2,model3,model4],\n                             combiner=ModelSelector(metric=ForecastMetric.RMSE))\n\nfor model in [model1, model2, model3, model4, model5]:\n    print(f\"Training {type(model).__name__}...\")\n    train_pred, train_stderr = model.train(merlion_train_data)","d7c6ba5e":"#evaluating for a day ahead","f0848b7a":"from merlion.evaluate.forecast import ForecastMetric\n\ntarget_univariate = merlion_test_data.univariates[merlion_test_data.names[target_seq_index]]\ntarget = target_univariate[:max_forecast_steps].to_ts()\n\nfor model in [model1, model2, model3, model4,model5]:\n    forecast, stderr = model.forecast(target.time_stamps)\n    rmse = ForecastMetric.RMSE.value(ground_truth=target, predict=forecast)\n    smape = ForecastMetric.sMAPE.value(ground_truth=target, predict=forecast)\n    print(f\"{type(model).__name__}\")\n    print(f\"RMSE:  {rmse:.4f}\")\n    print(f\"sMAPE: {smape:.4f}\")\n    print()\n","a56b305c":"import statsmodels.api as sm\nfrom statsmodels.tsa.api import VAR\nfrom statsmodels.tsa.base.datetools import dates_from_str\n","008660fb":"#For direct analysis of non-stationary time series, a standard stable VAR(p) model is not appropriate.","f0277b41":"filled_df_indexed = filled_df.set_index('time')\nfilled_df_indexed","7e4b70f8":"filled_df.drop(['time'])","f5bcc9c5":"tsa_model = VAR(filled_df[:int(0.7*len(filled_df))].drop('time'))\nresult = tsa_model.fit()\n","ee8bba9a":"df = seattle_trail_df_time_indexed[:int(0.7*(len(seattle_trail_df_time_indexed)))]\nlag_order = result.k_ar\nresult.forecast(steps=24,y=df.iloc[-24:])\n","80dffffa":"US_df = sm.datasets.macrodata.load_pandas().data","bd9652ad":"US_df","7dcdb6f3":"dates = US_df[['year', 'quarter']].astype(int).astype(str)\n","6e9315b5":"quarterly = dates[\"year\"] + \"Q\" + dates[\"quarter\"]\nquarterly","e06045ca":"quarterly = dates_from_str(quarterly)\n","edf0fe23":"US_df_selection1 = US_df[['realgdp','realcons','realinv']]","a5cbd948":"US_df_selection1 #selecting only realgdp,real personal consumption expenditure, real gross private domestic investment","4e71ad86":"US_df_selection1.index = pd.DatetimeIndex(quarterly)\nselection1_data = np.log(US_df_selection1).diff().dropna()\nmodel_selection1 = VAR(selection1_data)\n    ","6fb4801d":"list_tsa_VAR_models = []\nlag_order_list = []\n\n\nfor i in range(0,15):\n    temp_results = model_selection1.fit(i)\n    list_tsa_VAR_models.append(temp_results)\n    \n    \n    \n\n    \n    \n","56a3cc73":"list_tsa_VAR_models.forecast()","29399481":"sm.datasets.copper.load_pandas().data","65893f14":"sm.datasets.interest_inflation.load_pandas().data","9fe4be38":"# **Merlion multivariate forecasting**","4ab9d9ae":"# **KATS multivariate tsa**","3f7da874":"# **statsmodel.tsa VAR**","c6205d6d":"# **Evaluating the four models**","6daf2e4d":"# **US Macroeconomic Data for 1959Q1 - 2009Q3**","431fd405":"# **Training process for 4 models (defaultforecaster, arima, ensemble,prophet)**"}}