{"cell_type":{"212d6043":"code","7a7c9e3b":"code","072b07a9":"code","877f0a3e":"code","c9d4ed46":"code","3133b24c":"code","c5e7c847":"code","15b462b4":"code","126b0643":"code","6817825e":"code","aec81a12":"code","ee25d0c6":"code","e3d491f0":"code","a6ee142a":"code","f7ea8146":"code","1be569b9":"code","49b8aa00":"code","d93ea459":"code","7ca53c1a":"code","28eae138":"code","63cdbfb6":"code","10a81fe5":"code","5cd0796d":"code","026b50ec":"code","bbd0a892":"code","faf60bf9":"code","d2143229":"markdown","ff774081":"markdown","7fbbe402":"markdown","b22b2c2c":"markdown","ce7c4234":"markdown","4c7ca60b":"markdown","3f6f87fb":"markdown","33b544d5":"markdown","4989861f":"markdown","6dee1360":"markdown","024ed8ce":"markdown","0b761bcd":"markdown"},"source":{"212d6043":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re\nimport pandas as pd\nfrom nltk.corpus import stopwords\nimport re\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/word2vec-nlp-tutorial\/\"))\nprint(os.listdir(\"..\/input\/movie-review\/\"))\n\n# Any results you write to the current directory are saved as output.","7a7c9e3b":"df_train = pd.read_csv(\"..\/input\/word2vec-nlp-tutorial\/labeledTrainData.tsv\", header=0, delimiter=\"\\t\", quoting=3)\ndf_train.head()","072b07a9":"df_train1=pd.read_csv(\"..\/input\/movie-review\/imdb_master.csv\",encoding=\"latin-1\")\ndf_train1.head()","877f0a3e":"df_train1=df_train1.drop([\"type\",'file'],axis=1)","c9d4ed46":"df_train1.rename(columns={'label':'sentiment',\n                          'Unnamed: 0':'id',\n                          'review':'review'}, \n                 inplace=True)","3133b24c":"df_train1 = df_train1[df_train1.sentiment != 'unsup']","c5e7c847":"maping = {'pos': 1, 'neg': 0}\ndf_train1['sentiment'] = df_train1['sentiment'].map(maping)","15b462b4":"new_train=pd.concat([df_train,df_train1])","126b0643":"df_test=pd.read_csv(\"..\/input\/word2vec-nlp-tutorial\/testData.tsv\",header=0, delimiter=\"\\t\", quoting=3)\ndf_test.head()","6817825e":"new_train.head()","aec81a12":"from bs4 import BeautifulSoup\ndef review_to_words( raw_review ):\n    # 1. Remove HTML\n    review_text = BeautifulSoup(raw_review, 'lxml').get_text() \n    \n    # 2. Remove non-letters with regex\n    letters_only = re.sub(\"[^a-zA-Z]\", \" \", review_text) \n    \n    # 3. Convert to lower case, split into individual words\n    words = letters_only.lower().split()                           \n    \n    # 4. Create set of stopwords\n    stops = set(stopwords.words(\"english\"))                  \n    \n    # 5. Remove stop words\n    meaningful_words = [w for w in words if not w in stops]   \n    \n    # 6. Join the words back into one string separated by space, \n    # and return the result.\n    return( \" \".join( meaningful_words ))   \n\nnew_train['review']=new_train['review'].apply(review_to_words)\ndf_test[\"review\"]=df_test[\"review\"].apply(review_to_words)","ee25d0c6":"from wordcloud import WordCloud, STOPWORDS\nstopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='black',\n        stopwords=stopwords,\n        max_words=200,\n        max_font_size=40, \n        scale=3,\n        random_state=1 # chosen at random by flipping a coin; it was heads\n).generate(str(data))\n\n    fig = plt.figure(1, figsize=(15, 15))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()\n\nshow_wordcloud(new_train[\"review\"])","e3d491f0":"# checking nullity in the data of train and test\nnew_train.isnull().sum(),df_test.isnull().sum()\n","a6ee142a":"from keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Dense , Input , LSTM , Embedding, Dropout , Activation\nfrom keras.layers import Bidirectional, GlobalMaxPool1D\nfrom keras.models import Model\nfrom keras import initializers, regularizers, constraints, optimizers, layers","f7ea8146":"list_classes = [\"sentiment\"]\ny = new_train[list_classes].values\nlist_sentences_train = new_train[\"review\"]\nlist_sentences_test = df_test[\"review\"]","1be569b9":"max_features = 6000\ntokenizer = Tokenizer(num_words=max_features)\ntokenizer.fit_on_texts(list(list_sentences_train))\nlist_tokenized_train = tokenizer.texts_to_sequences(list_sentences_train)\nlist_tokenized_test = tokenizer.texts_to_sequences(list_sentences_test)","49b8aa00":"totalNumWords = [len(one_comment) for one_comment in list_tokenized_train]\nplt.hist(totalNumWords,bins = np.arange(0,410,10))#[0,50,100,150,200,250,300,350,400])#,450,500,550,600,650,700,750,800,850,900])\nplt.xlabel(\"Distribution of comment\")\nplt.ylabel(\"no of comments\")\nplt.title(\"no of comments vs no of words distribution \")\nplt.show()","d93ea459":"maxlen = 370\nX_t = pad_sequences(list_tokenized_train, maxlen=maxlen)\nX_te = pad_sequences(list_tokenized_test, maxlen=maxlen)","7ca53c1a":"inp = Input(shape=(maxlen, ))\nembed_size = 128\nx = Embedding(max_features, embed_size)(inp)","28eae138":"x = LSTM(60, return_sequences=True,name='lstm_layer')(x)\nx = GlobalMaxPool1D()(x)\nx = Dropout(0.1)(x)\nx = Dense(50, activation=\"relu\")(x)\nx = Dropout(0.1)(x)\nx = Dense(1, activation=\"sigmoid\")(x)\nmodel = Model(inputs=inp, outputs=x)\nmodel.compile(loss='binary_crossentropy',\n                  optimizer='adam',\n                  metrics=['accuracy'])","63cdbfb6":"batch_size = 32\nepochs = 2\nmodel.fit(X_t,y, batch_size=batch_size, epochs=epochs, validation_split=0.2)","10a81fe5":"prediction = model.predict(X_te)\ny_pred = (prediction > 0.5)","5cd0796d":"df_test[\"sentiment\"] = df_test[\"id\"].map(lambda x: 1 if int(x.strip('\"').split(\"_\")[1]) >= 5 else 0)\ny_test = df_test[\"sentiment\"]","026b50ec":"from sklearn.metrics import f1_score, confusion_matrix\nprint('F1-score: {0}'.format(f1_score(y_pred, y_test)))\nprint('Confusion matrix:')\nconfusion_matrix(y_pred, y_test)","bbd0a892":"# ouput submission file \ndf_test = df_test[['id','sentiment']]","faf60bf9":"df_test.to_csv(\"submission.csv\",index=False)","d2143229":"## First use pandas pd.read_csv() for reading these tabulated files and our basic process will be like \n* importing data \n* cleaning them \n* visualizing them \n* our stack models for deep leaning with ","ff774081":"# tokenize upto max 6000 words \n# then using keras function of preprocessing of tokenizing and padding \n","7fbbe402":"# making function for filtering the text","b22b2c2c":"* First we import important packages like pandas,nltk,re,os \n* we use pandas to handle our dataset it is used to take input of test and training data then \n* we import stopwords to remove usnecessary words like is,are,names etc from the dataset we use re to keep only words\n* i will explain this in details where we use re. then we import os for setting directory\n* some worldcloud and barplot visualization ","ce7c4234":"*  removing html tags \n*  re.sub(\"[^a-zA-Z]\",\" \", raw_review)\" \n* in this line we will keep all the alphabetical words which are present in the file name raw_review all special characters are replaced by a space.\n* spliting of words with normalizing it \n* taking stopwords into account \n* checking words alphanumeric or not \n* then after checking we stopwords finding and removing them \n* joinning meaningful words","4c7ca60b":"# checking distribution of word length","3f6f87fb":"***if you dont have any of these files then you can download these files from command prompt  pip install module name\nfor pandas --- pip install pandas for nltk ---- pip install nltk then you have to download stopwords by going to python editor and import nltk then nltk.download() select all from gui or you can make custom download i suggest you to download all. Rest are inbuilt in python(excluding keras i explained thoses below) just import and enjoy.***","33b544d5":"# So for now files importing has been done \n# Step 2 begins that is data cleaning","4989861f":"## dropping unecessary columns from additional dataset and combine as one ,\n**step 1 done\nnow after this cleaning will startdown**","6dee1360":"# using above function and store the filter things in array","024ed8ce":"# importing keras files \n## tokenizer and padding is necessary so that long and short reviews must be of same length\n## what is stacking idea , first to create word2vec dictionary , word embbeding \n## apply cnn with maxpooling to find out features of neg and positive sentiment \n## apply lstm bi directional unit to for need of good memory \n\nBackground of the Techniques\nConvolution Neural Networks (CNN):\n\nCNN\u2019s are efficient for sentence classification tasks as the convolution layers can extract features horizontally from multiple words . These characteristics are essential for classification tasks as it is tricky to find clues about class memberships especially when these clues can appear in different orders in the input.  CNN has also been used for document topic classifications where a single local phrase could aid in establishing the topic regardless of the position where it appears in the document. They found that CNN is powerful enough to find these local indicators due to the powerful combination of the convolution and pooling layers.\nLong Short-Term Memory (LSTM):\n\nAn example of LSTM\u2019s effectiveness is its ability to capture changing sentiment in a tweet. A sentence such as \u201cThe movie was fine but not to my expectation\u201d contains words with conflicting sentiments which is not able to be inferred accurately by a typical neural network. However, LSTM will learn that the sentiments expressed towards the end of the sentence would carry more important context compared to the words at the start.\n\nCNN\u200a\u2014\u200aLSTM Model:\n\nThe final model architecture is . We initialized the model with Keras\u2019 Sequential layer and added the embedding layer as the first layer. By using the embedding layer, the positive integers is turned into a dense vector of fixed size and this new representations will be passed to the CNN layer. Each filter in the CNN will detect specific features or patterns and then it will be pooled to a smaller dimension in the max-pooling layer. These features are then passed into a single LSTM layer of 100 units. Then, the LSTM outputs are then fed to a Fully Connected Layer (FCL) which was built using Keras\u2019s Dense layer. As there are five labels to be predicted, a softmax activation function was used at the output layer.\n\n\n","0b761bcd":"# maxlen of review is 400 words "}}