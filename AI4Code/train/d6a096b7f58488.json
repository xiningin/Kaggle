{"cell_type":{"e333dcbe":"code","c46392c6":"code","885ca04c":"code","7e2ecbf0":"code","0d43f47b":"code","2cc1383f":"code","c28253a2":"code","1c0a71f1":"code","5c3c1995":"code","7fac27b4":"code","ddc4e3ff":"code","7885bb5d":"code","e97d52bb":"code","114ff994":"code","d9028d56":"code","9ef47b54":"code","577d9436":"code","53e4bbac":"code","bc54dedb":"code","494370e5":"code","d85bb54c":"code","4523de21":"code","c5d9b4ab":"code","7c208a0c":"code","b587569a":"code","629b779d":"code","ea26dc36":"code","2d3d7a31":"code","202e948f":"code","9b721929":"code","2ac1af03":"code","d0246d18":"code","9ba33e0f":"code","0f060cb8":"code","2a039c2a":"code","bd7b61ee":"code","22936d3d":"code","d42fe979":"code","b128178a":"code","8e4bd055":"code","ed34939c":"code","c218655c":"markdown","3b68f57f":"markdown","ca4c5437":"markdown","e4e8f8bd":"markdown","11a53434":"markdown","f6330493":"markdown","472507be":"markdown","fbdc011d":"markdown","1194ada0":"markdown","c0cf77a7":"markdown","f5a4c4fd":"markdown","30e47bf8":"markdown","40a45501":"markdown","a08c7513":"markdown","cb95b0b4":"markdown","840f31cb":"markdown","0a8923ec":"markdown","9ec35b69":"markdown","1e1a1c6e":"markdown","75bcfde9":"markdown","5b6fba21":"markdown","65cd06cf":"markdown","71c797a1":"markdown","e104ee14":"markdown","886cd674":"markdown","ee17c3d0":"markdown","8ea9a67a":"markdown","84950cf5":"markdown"},"source":{"e333dcbe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nfrom shapely.geometry import Point\nimport folium\n# Import package for pretty printing\nimport pprint\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c46392c6":"# Load the dataset\npermit_data = pd.read_csv('\/kaggle\/input\/geospatical\/building_permits_2017.csv')\n\n# Look at the first few rows of the chickens DataFrame\nprint(permit_data.head())\n\n# Plot the locations of all Nashville chicken permits\nplt.scatter(x = permit_data.lng, y = permit_data.lat)\n\n# Show the plot\nplt.show()","885ca04c":"service_district = gpd.read_file('\/kaggle\/input\/geospatical\/council_districts.geojson')","7e2ecbf0":"service_district.plot()\nplt.show()","0d43f47b":"# Plot the Service Districts without any additional arguments\nservice_district.plot()\nplt.show()\n\n# Plot the Service Districts, color them according to name, and show a legend\nservice_district.plot(column = 'first_name', legend = True)\nplt.show()","2cc1383f":"school_districts = gpd.read_file('\/kaggle\/input\/geospatical\/school_districts.geojson')","c28253a2":"lgnd_kwds = {'title': 'School Districts',\n               'loc': 'upper left', 'bbox_to_anchor': (1, 1.03), 'ncol': 1}\n\n# Plot the school districts using the tab20 colormap (qualitative)\nschool_districts.plot(column = 'district', cmap = 'tab20', legend = True, legend_kwds = lgnd_kwds)\nplt.xlabel('Latitude')\nplt.ylabel('Longitude')\nplt.title('Nashville School Districts')\nplt.show();","1c0a71f1":"# Set legend style\nlgnd_kwds = {'title': 'School Districts',\n               'loc': 'upper left', 'bbox_to_anchor': (1, 1.03), 'ncol': 1}\n\n# Plot the school districts using the summer colormap (sequential)\nschool_districts.plot(column = 'district', cmap = 'summer', legend = True, legend_kwds = lgnd_kwds)\nplt.xlabel('Latitude')\nplt.ylabel('Longitude')\nplt.title('Nashville School Districts')\nplt.show();","5c3c1995":"lgnd_kwds = {'title': 'School Districts',\n               'loc': 'upper left', 'bbox_to_anchor': (1, 1.03), 'ncol': 1}\n\n# Plot the school districts using Set3 colormap without the column argument\nschool_districts.plot(cmap = 'Set3', legend = True, legend_kwds = lgnd_kwds)\nplt.xlabel('Latitude')\nplt.ylabel('Longitude')\nplt.title('Nashville School Districts')\nplt.show();","7fac27b4":"# Read in the neighborhoods geojson file\nneighborhoods = gpd.read_file('\/kaggle\/input\/geospatical\/neighborhoods.geojson')\n\n# Print the first few rows of neighborhoods\nprint(neighborhoods.head())\n\n# Plot the neighborhoods, color according to name and use the Dark2 colormap\nneighborhoods.plot(column = 'name', cmap = 'Dark2')\n\n# Show the plot.\nplt.show()","ddc4e3ff":"# Print the first row of school districts GeoDataFrame and the crs\nprint(school_districts.head(1))\nprint(school_districts.crs)\n\n# Convert the crs to epsg:3857\nschool_districts.geometry = school_districts.geometry.to_crs(epsg = 3857)\n                        \n# Print the first row of school districts GeoDataFrame and the crs again\nprint(school_districts.head(1))\nprint(school_districts.crs)","7885bb5d":"art=pd.read_csv('\/kaggle\/input\/geospatical\/public_art.csv')","e97d52bb":"# Print the first few rows of the art DataFrame\nprint(art.head())\n\n# Create a geometry column from lng & lat\nart['geometry'] = art.apply(lambda x: Point(float(x.Longitude), float(x.Latitude)), axis=1)\n\n# Create a GeoDataFrame from art and verify the type\nart_geo = gpd.GeoDataFrame(art, crs = neighborhoods.crs, geometry = art.geometry)\nprint(type(art_geo))","114ff994":"# Spatially join art_geo and neighborhoods \nart_intersect_neighborhoods = gpd.sjoin(art_geo, neighborhoods, op = 'intersects')\n\n# Print the shape property of art_intersect_neighborhoods\nprint(art_intersect_neighborhoods.shape)","d9028d56":"# Create art_within_neighborhoods by spatially joining art_geo and neighborhoods\nart_within_neighborhoods = gpd.sjoin(art_geo, neighborhoods, op = 'within')\n\n# Print the shape property of art_within_neighborhoods\nprint(art_within_neighborhoods.shape)","9ef47b54":"# Create art_within_neighborhoods by spatially joining art_geo and neighborhoods\nart_containing_neighborhoods = gpd.sjoin(art_geo, neighborhoods, op = 'contains')\n\n# Print the shape property of art_within_neighborhoods\nprint(art_containing_neighborhoods.shape)","577d9436":"# Spatially join neighborhoods with art_geo\nneighborhood_art = gpd.sjoin(art_geo, neighborhoods, op = \"within\")\n\n# Print the first few rows\nprint(neighborhood_art.head())","53e4bbac":"# Get name and title from neighborhood_art and group by name\nneighborhood_art_grouped = neighborhood_art[['name', 'Title']].groupby('name')\n\n# Aggregate the grouped data and count the artworks within each polygon\nprint(neighborhood_art_grouped.agg('count').sort_values(by = 'Title', ascending = False))","bc54dedb":"# Create urban_art from neighborhood_art where the neighborhood name is Urban Residents\nurban_art = neighborhood_art.loc[neighborhood_art.name == \"Urban Residents\"]\n\n# Get just the Urban Residents neighborhood polygon and save it as urban_polygon\nurban_polygon = neighborhoods.loc[neighborhoods.name == \"Urban Residents\"]\n\n# Plot the urban_polygon as ax \nax = urban_polygon.plot(color = 'lightgreen')\n\n# Add a plot of the urban_art and show it\nurban_art.plot( ax = ax, column = 'Type', legend = True);\nplt.show()","494370e5":"# Create downtown_center from urban_poly_3857\ndowntown_center = urban_polygon.geometry.centroid\n\n# Print the type of downtown_center \nprint(type(downtown_center))\n\n# Plot the urban_poly_3857 as ax and add the center point\nax = urban_polygon.plot(color = 'lightgreen')\ndowntown_center.plot(ax = ax, color = 'black')\nplt.xticks(rotation = 45)\n\n# Show the plot\nplt.show()","d85bb54c":"downtown_center.geometry","4523de21":" #Create art_dist_meters using art and the geometry from art\nart_dist_meters = gpd.GeoDataFrame(art, geometry = art.geometry, crs = {'init': 'epsg:4326'})\nprint(art_dist_meters.head(2))\n\n# Set the crs of art_dist_meters to use EPSG:3857\nart_dist_meters.geometry = art_dist_meters.geometry.to_crs(epsg = 3857)\nprint(art_dist_meters.head(2))\n\n# Add a column to art_meters, center\nart_dist_meters['center'] = art_dist_meters.apply(lambda x: downtown_center.geometry,axis=1)","c5d9b4ab":"\nart_dist_meters['center']","7c208a0c":"\n\n# Create array for folium called urban_location\nurban_location = [36.16127820928791, -86.77756457127047]\n\n# Print urban_location\nprint(urban_location)","b587569a":"# Construct a folium map with urban_location\ndowntown_map = folium.Map(location = urban_location, zoom_start = 15)\n\n# Display the map\ndisplay(downtown_map)","629b779d":"# Construct a map from folium_loc: downtown_map\ndowntown_map = folium.Map(location = urban_location, zoom_start = 15)\n\n# Draw our neighborhood: Urban Residents\nfolium.GeoJson(urban_polygon.geometry).add_to(downtown_map)\n\n# Display the map\ndisplay(downtown_map)","ea26dc36":"# Iterate through the urban_art and print each part of tuple returned\nfor row in urban_art.iterrows():\n  print('first part: ', row[0])\n  print('second part: ', row[1])\n\n# Create a location and marker with each iteration for the downtown_map\nfor row in urban_art.iterrows():\n    row_values = row[1] \n    location = [row_values['Latitude'], row_values['Longitude']]\n    marker = folium.Marker(location = location)\n    marker.add_to(downtown_map)\n\n# Display the map\ndisplay(downtown_map)","2d3d7a31":"# Print the urban_art titles\nprint(urban_art.\n    Title)\n\n#Print the urban_art descriptions\nprint(urban_art.Description)\n\n# Replace Nan and ' values in description\nurban_art.Description.fillna('', inplace = True)\nurban_art.Description = urban_art.Description.str.replace(\"'\", \"`\")\n\n#Print the urban_art descriptions again\nprint(urban_art.Description)","202e948f":"# Construct downtown map\n\nfolium.GeoJson(urban_polygon).add_to(downtown_map)\n\n# Create popups inside the loop you built to create the markers\nfor row in urban_art.iterrows():\n    row_values = row[1] \n    location = [row_values['Latitude'], row_values['Longitude']]\n    popup = (str(row_values['Title']) + ': ' + \n             str(row_values['Description'])).replace(\"'\", \"`\")\n    marker = folium.Marker(location = location, popup = popup)\n    marker.add_to(downtown_map)\n\n# Display the map.\ndisplay(downtown_map)","9b721929":"# Create a shapely Point from lat and lng\npermit_data['geometry'] = permit_data.apply(lambda x: Point((float(x.lng) , float(x.lat))), axis = 1)\n\n# Build a GeoDataFrame: permits_geo\npermits_geo = gpd.GeoDataFrame(permit_data, crs = service_district.crs, geometry = permit_data.geometry)\n\n# Spatial join of permits_geo and council_districts\npermits_by_district = gpd.sjoin(permits_geo, service_district, op = 'within')\nprint(permits_by_district.head(2))\n\n# Create permit_counts\npermit_counts = permits_by_district.groupby(['district']).size()\nprint(permit_counts)","2ac1af03":"# Create an area column in council_districts\nservice_district['area'] = service_district.geometry.area\nprint(service_district.head(2))","d0246d18":"# Convert permit_counts to a DataFrame\npermits_df = permit_counts.to_frame()\nprint(permits_df.head(2))","9ba33e0f":"# Reset index and column names\npermits_df.reset_index(inplace=True)\npermits_df.columns = ['district', 'bldg_permits']\nprint(permits_df.head(2))","0f060cb8":"# Merge council_districts and permits_df: \ndistricts_and_permits = pd.merge(service_district, permits_df, on = 'district')\nprint(districts_and_permits.head(2))","2a039c2a":"# Print the type of districts_and_permits\nprint(type(districts_and_permits))\n\n# Create permit_density column in districts_and_permits\ndistricts_and_permits['permit_density'] = districts_and_permits.apply(lambda row: row.bldg_permits \/ row.area, axis = 1)\n\n# Print the head of districts_and_permits\nprint(districts_and_permits.head(5))","bd7b61ee":"# Simple plot of building permit_density\ndistricts_and_permits.plot(column ='permit_density', legend = True);\nplt.show();","22936d3d":"# Polished choropleth of building permit_density\ndistricts_and_permits.plot(column = 'permit_density', cmap = 'BuGn', edgecolor = 'black', legend = True)\nplt.xlabel('longitude')\nplt.ylabel('latitude')\nplt.xticks(rotation = 'vertical')\nplt.title('2017 Building Project Density by Council District')\nplt.show();","d42fe979":"# Change council_districts crs to epsg 3857\nservice_district = service_district.to_crs(epsg = 3857)\nprint(service_district.crs)\nprint(service_district.head())\n\n# Create area in square km\nsqm_to_sqkm = 10**6\nservice_district['area'] = service_district.geometry.area \/ sqm_to_sqkm\n\n# Change council_districts crs back to epsg 4326\nservice_district = service_district.to_crs(epsg = 4326)\nprint(service_district.crs)\nprint(service_district.head())","b128178a":"# Create permits_geo\npermits_geo = gpd.GeoDataFrame(permit_data, crs =service_district.crs, geometry = permit_data.geometry)\n\n# Spatially join permits_geo and council_districts\npermits_by_district = gpd.sjoin(permits_geo, service_district, op = 'within')\nprint(permits_by_district.head(2))\n\n# Count permits in each district\npermit_counts = permits_by_district.groupby('district').size()\n\n# Convert permit_counts to a df with 2 columns: district and bldg_permits\ncounts_df = permit_counts.to_frame()\ncounts_df = counts_df.reset_index()\ncounts_df.columns = ['district', 'bldg_permits']\nprint(counts_df.head(2))","8e4bd055":"# Merge permits_by_district and counts_df\ndistricts_and_permits = pd.merge(permits_by_district, counts_df, on = 'district')\n\n# Create permit_density column\ndistricts_and_permits['permit_density'] = districts_and_permits.apply(lambda row: row.bldg_permits \/ row.area, axis = 1)\nprint(districts_and_permits.head(2))\n\n# Create choropleth plot\ndistricts_and_permits.plot(column = 'permit_density', cmap = 'OrRd', edgecolor = 'black', legend = True)\n\n# Add axis labels and title\nplt.xlabel('longitude ')\nplt.ylabel('latitude')\nplt.title('2017 Building Project Density by Council District')\nplt.show()","ed34939c":"# Center point for Nashville\nnashville = [36.1636,-86.7823]\n\n# Create map\nm = folium.Map(location=nashville, zoom_start=10)\n# Build choropleth\nm.choropleth(\n    geo_data=districts_and_permits,\n    name='geometry',\n    data=districts_and_permits,\n    columns=['district', 'permit_density'],\n    key_on='feature.properties.district',\n    fill_color='Reds',\n    fill_opacity=0.5,\n    line_opacity=1.0,\n    legend_name='2017 Permitted Building Projects per km squared'\n)\n# Create LayerControl and add it to the map            \nfolium.LayerControl().add_to(m)\n\n# Display the map\ndisplay(m)   \n\n","c218655c":"## Art distances from neighborhood center\n\nNow that you have the center point and the art locations in the units we need to calculate distances in meters, it's time to perform that step.","3b68f57f":"# Choropleth","ca4c5437":"## You can see that most development has happened close to the city center! The scale for permit density is hard to interpret. We'll fix that next.","e4e8f8bd":"## You will need to import the Point constructor from the shapely.geometry module to create a geometry column in art before you can create a GeoDataFrame from art. This will get you ready to spatially join the art data and the neighborhoods data in order to discover which neighborhood has the most art.","11a53434":"# GeoSeries and folium","f6330493":"## There is no legend when the column argument is not supplied even if you set legend to True!","472507be":"## The council_districts have area in kilometers squared and geometry measures in decimal degrees. Let's go join it to the permits.","fbdc011d":"## Geopandas choropleths","1194ada0":"## That's a lot of neighborhoods! How will we find one to stroll through and look at public art?","c0cf77a7":"### zoom_start : if value is higher then we will zoom the location more","f5a4c4fd":"# Creating and joining GeoDataFrames","30e47bf8":"## You will learn how to find a GeoDataFrame's coordinate reference system and how to change it. The school districts GeoDataFrame is available in your workspace as school_districts","40a45501":"## Is there a difference between art (point data) that intersects with neighborhoods (polygon data) and art (point data) within neighborhoods (polygon data)? Explore different spatial joins with the art_geo and neighborhoods GeoDataFrames, which are available in your workspace.","a08c7513":"## Plotting the Urban Residents neighborhood and art\n### Now you know that most art is in the Urban Residents neighborhood. In this exercise, you'll create a plot of art in that neighborhood. First you will subset just the urban_art from neighborhood_art and you'll subset the urban_polygon from neighborhoods. Then you will create a plot of the polygon as ax before adding a plot of the art.","cb95b0b4":"### You can see the centroid of the Urban Residents neighborhood. Notice that latitude and longitude are in meters instead of degrees. In the next exercise you will calculate the distance in meters of each artwork from the centroid of the Urban Residents neighborhood.","840f31cb":"## It looks like most of the public art is in the Urban Residents neighborhood. Next you'll subset neighborhood art and neighborhoods to get only the Urban Residents art and neighborhood.","0a8923ec":"## Construct a GeoDataFrame from a DataFrame","9ec35b69":"## Now you have a count of building permits issued for each council district. Next you'll get the area of each council_district.In order to create a normalized value for the building permits issued in each council district, you will need to find the area of each council district. Remember that you can leverage the area attribute of a GeoSeries to do this. You will need to convert permit_counts to a DataFrame so you can merge it with the council_districts data. Both permit_counts and council_districts are in your workspace.","1e1a1c6e":"##  You have created a folium map of downtown Nashville, a polygon showing the Urban Residents neighborhood, and markers to show the location of the artworks. All that's left is to create some popups for the markers!","75bcfde9":"## There are no neighborhood polygons contained within an artworks point location. That's not too surprising is it?","5b6fba21":"## Spatial Joins","65cd06cf":"## You can change the coordinate reference system of a GeoDataFrame by changing the crs property of the GeoDataFrame. Notice that the units for geometry change when you change the CRS. You always need to ensure two GeoDataFrames share the same crs before you spatially join them.","71c797a1":"## That's great work! You have created a column with the area in the council_districts Geo DataFrame and built a DataFrame from the permit_counts. You have merged all the information into a single GeoDataFrame. Next you will calculate the permits by area for each council district.\n\n","e104ee14":"## The center of the Urban Residents neighborhood\n\nNow you'll find the center point of the urban_poly_3857 and plot it over the polygon.","886cd674":"## Notice how easy it is to add style to the plot. Now you have a map of service districts that you can plot with the chicken data.","ee17c3d0":"## Aggregating points within polygons\n### Now that you have spatially joined art and neighborhoods, you can group, aggregate, and sort the data to find which neighborhood has the most public art. You can count artwork titles to see how many artworks are in each neighborhood.","8ea9a67a":"## Create a folium location from the urban centroid\n\nIn order to construct a folium map of the Urban Residents neighborhood, you need to build a coordinate pair location that is formatted for folium.","84950cf5":"## Now that you have successfully joined art and neighborhoods you can see the title and other information about the artwork along with the name of the neighborhood where it is located. Next you'll do the work to see what art is in which neighborhood!"}}