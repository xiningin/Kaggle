{"cell_type":{"20b67398":"code","90ca540c":"code","d3395567":"code","85ba75de":"code","3748c42e":"code","8ad1a472":"code","a40ba835":"code","03091e6b":"code","8f669e80":"code","f5bf44b5":"code","ba70da25":"code","0b74b825":"code","c5230e9c":"code","f4fe8bda":"code","79a1dd34":"code","25ff8f77":"code","72a716b9":"code","06598031":"code","9a6d81bc":"markdown","5289b6d3":"markdown","5d09e14f":"markdown","b76eb916":"markdown","2bd7d334":"markdown","77b0ff68":"markdown","cf9a96fa":"markdown","21e5ed62":"markdown","acc9897d":"markdown","293f95d6":"markdown","289f776d":"markdown","15e7f90f":"markdown","32ba89e1":"markdown","d0067e20":"markdown"},"source":{"20b67398":"\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport seaborn as sns\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pylab as plt\n\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","90ca540c":"voice = pd.read_csv('..\/input\/voicegender\/voice.csv')","d3395567":"voice.head()","85ba75de":"#Printing the total distribution\n\nprint(\"Total Number of samples : {}\".format(voice.shape[0]))\n\nprint(\"Total No.of Males : {}\".format(voice[voice.label == 'male'].shape[0]))\n\nprint(\"Total No.of Females : {}\".format(voice[voice.label == 'female'].shape[0]))\n","3748c42e":"#Checking for Null Values\n\nvoice.isnull().sum()","8ad1a472":"sns.pairplot(voice[['meanfreq', 'Q25', 'Q75', 'skew', 'centroid', 'label']], \n                 hue='label', size=2)","a40ba835":"voice.head()\nvoice.plot(kind='scatter', x='meanfreq', y='dfrange')\nvoice.plot(kind='kde', y='meanfreq')","03091e6b":"voice.label = [1 if each == \"male\" else 0 for each in voice.label]\n\nvoice.head()","8f669e80":"X = voice.drop([\"label\"], axis = 1)\ny = voice.label.values\n\n#Normalizing X\n\nX = (X - X.min()) \/ (X.max() - X.min())\n\nprint(X.shape)\nprint(y.shape)","f5bf44b5":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42)\n\ny_train = y_train.reshape(-1,1)\ny_test = y_test.reshape(-1,1)\n\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","ba70da25":"import tensorflow as tf\nimport tensorflow.keras as keras","0b74b825":"model = keras.Sequential([keras.layers.InputLayer(input_shape=X_train.shape[1:]),\n                          keras.layers.Dense(32, activation='relu'),\n                          keras.layers.Dense(64, activation='relu'),\n                          keras.layers.Dropout(0.2),\n                          keras.layers.Dense(32, activation='relu'),\n                          keras.layers.Dropout(0.2),\n                          keras.layers.Dense(16, activation='relu'),\n                          keras.layers.Dense(1, activation='sigmoid')\n                         ])","c5230e9c":"model.summary()","f4fe8bda":"model.compile(optimizer='Adam', loss='binary_crossentropy', metrics=['accuracy'])","79a1dd34":"reduce_lr = keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.2,\n                              patience=5, min_lr=0.001)\n\nv_split= 0.2\nepoch = 100","25ff8f77":"history = model.fit(X_train, y_train, validation_split = v_split , epochs =epoch, callbacks=[reduce_lr])","72a716b9":"history_df = pd.DataFrame(history.history)\n\nhistory_df.plot(figsize=(10,10))\n\nplt.grid(True)\nplt.gca().set_ylim(0,1.15)\nplt.show()","06598031":"pred = model.evaluate(X_test, y_test)","9a6d81bc":"Converting the Label for easier Classification","5289b6d3":"# Visualizing the Model's Performance","5d09e14f":"**Importing the necessary Libraries for Operations**","b76eb916":"# Visualizing the Data","2bd7d334":"Making train and test Data for Model training","77b0ff68":"# Introduction","cf9a96fa":"# Data Preparation","21e5ed62":"Fitting the Model","acc9897d":"This is the second notebook for my 100Days of Coding Challenge","293f95d6":"Model Summary","289f776d":"**Final Test set Prediction Results**","15e7f90f":"**Building a simple Multilayer NN for Classification with Tensorflow**","32ba89e1":"Separating the Labels from Data","d0067e20":"Setting the Hyper-Parameters"}}