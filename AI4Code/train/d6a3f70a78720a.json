{"cell_type":{"a9e270f3":"code","f4e0a969":"code","25902b42":"code","c68c3c87":"code","967dae5e":"code","ecc882ee":"code","abadb4a7":"code","8046663f":"code","30c152ce":"code","88d30dc9":"code","24e41150":"code","91a97647":"code","0542df40":"code","b6882d7d":"code","d765931f":"code","cd58e6d3":"code","0f959ed0":"code","d715288a":"code","aa5bcc69":"code","c2fcfef4":"markdown","676feeeb":"markdown","240959c5":"markdown"},"source":{"a9e270f3":"import numpy as np\nimport pandas as pd\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm_notebook\nsns.set_style(\"whitegrid\")\nsns.set_palette(\"colorblind\")\n\n# from matplotlib import rc\n# rc('font',**{'family':'sans-serif'})\n# rc('axes', **{'titlesize': '8', 'labelsize': '6'})\n# rc('legend', **{'fontsize': '6'})\n# rc('figure', **{'dpi' : 200})\n\n!ls \/kaggle\/input\/sales-forecasting-tdt4173 | sort","f4e0a969":"# Reading datasets\ntrain = pd.read_csv('\/kaggle\/input\/sales-forecasting-tdt4173\/beer_train.csv', parse_dates=['Date'])\ntest = pd.read_csv('\/kaggle\/input\/sales-forecasting-tdt4173\/beer_test.csv', parse_dates=['Date'])\nsku_features = pd.read_csv('\/kaggle\/input\/sales-forecasting-tdt4173\/sku_features.csv')\nid_map = pd.read_csv('\/kaggle\/input\/sales-forecasting-tdt4173\/id_store_sku.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/sales-forecasting-tdt4173\/sampleSubmission.csv')","25902b42":"# Train set\nprint(train.info())\ntrain.head()","c68c3c87":"# Test set\nprint(test.info())\ntest.head()","967dae5e":"# SKU features\nsku_features","ecc882ee":"# This dataset is needed to match ts_id with its corresponding SKU and Store\nid_map.head()","abadb4a7":"    \ndef plot_by_id(df, ts_id):\n    df_ = df[df['ts_id'] == ts_id][['Date', 'Sales']]\n    g = sns.lineplot(df_['Date'], df_['Sales'])\n    plt.xticks(rotation=90)\n    \ndef plot_promo_sales(df, ts_id):\n    df_ = df[df['ts_id'] == ts_id][['Date', 'isPromo', 'Sales']]\n    fig, axs = plt.subplots(2, 1, sharex=True)\n    sns.lineplot(df_['Date'], df_['Sales'], ax=axs[0], color='r')\n    sns.lineplot(df_['Date'], df_['isPromo'], ax=axs[1], color='b')\n    plt.xticks(rotation=90)\n    ","8046663f":"plot_promo_sales(train, 69)","30c152ce":"# This is a core part of the transition from a time-series prediction to a regression problem.\n# The main idea is to featurize time in a way that it will keep the important information about the date.\n\ndef generate_features(df, sku_features, id_map):\n        \n    # Add metadata\n    df = pd.merge(df, id_map, how='left', on='ts_id')\n    df = pd.merge(df, sku_features, how='left', on='SKU')\n\n    # Time features\n    df['day_of_month'] = df['Date'].dt.day\n    df['day_of_week'] = df['Date'].dt.weekday\n    df['month'] = df['Date'].dt.month\n    df['year'] = df['Date'].dt.year\n    df['week'] = df['Date'].dt.week\n    \n    # Enlarge promo features\n    # Since we know that promo is important\n    \n    df['ts_promo'] = df['ts_id'].astype(str) + df['isPromo'].astype(str)\n    df['store_promo'] = df['Store'].astype(str) + df['isPromo'].astype(str)\n    df['segment_promo'] = df['Segment'].astype(str) + df['isPromo'].astype(str)\n    df['brand_promo'] = df['Brand'].astype(str) + df['isPromo'].astype(str)\n    df['sku_promo'] = df['SKU'].astype(str) + df['isPromo'].astype(str)\n    \n    df['dom_promo'] = df['day_of_month'].astype(str) + df['isPromo'].astype(str)\n    df['dow_promo'] = df['day_of_week'].astype(str) + df['isPromo'].astype(str)\n    \n    return df","88d30dc9":"train = generate_features(train, sku_features, id_map)\ntest = generate_features(test, sku_features, id_map)","24e41150":"train.head()","91a97647":"test.head()","0542df40":"train_y = train['Sales']\ndel(train['Sales'], train['Date'])\ntrain_features = train\n\ndel(test['Date'], test['id'])\ntest_features = test","b6882d7d":"# Treat all features as categories\n# Be careful, for some of the features the order matters. When converting to categorical, we loose the order information. \nfor c in test_features.columns:\n    test_features[c] = test_features[c].astype('category')\n    train_features[c] = train_features[c].astype('category')","d765931f":"# Run a simple job to fit a model without validation\n# Keep in mind that those parameters are not the best, you have to optimize them when applying KFold CV\nimport lightgbm as lgb\nclf = lgb.LGBMRegressor(num_leaves= 7, max_depth=8, \n                         random_state=42, \n                         silent=True, \n                         metric='rmse', \n                         n_jobs=-1, \n                         n_estimators=1000,\n                         colsample_bytree=0.95,\n                         subsample=0.95,\n                         learning_rate=0.001)\n\nclf.fit(train_features, train_y)","cd58e6d3":"# Get prediction\nprediction = clf.predict(test_features)","0f959ed0":"submission['Sales'] = prediction\nsubmission","d715288a":"submission.to_csv('intro_submission.csv', index=False)","aa5bcc69":"# Feature importances\nfeat_imp = pd.Series(clf.feature_importances_, index=train_features.columns)\nfeat_imp.nlargest(30).plot(kind='barh', figsize=(6,6))","c2fcfef4":"Introduction Notebook for Sales Forecasting Competition.\nIn this notebook you will see how to convert time-series prediction problems into regression.","676feeeb":"## Visualization","240959c5":"## Basic feature Engineering"}}