{"cell_type":{"7812d2b1":"code","f634cdd9":"code","b56aee5b":"code","d9112f43":"code","4c60af85":"code","86c3f51b":"code","71dc82cb":"code","50014b8e":"code","c80c2ce1":"code","a47ce802":"code","1f8e74db":"code","b19b2864":"code","c12e99e5":"code","15fd1372":"code","af8942b7":"code","010cb941":"code","b3dc1576":"code","0e3bdf9c":"markdown","cb26e018":"markdown","7b7107f5":"markdown","c71b3fd6":"markdown","c9a602ec":"markdown","5c5aedf9":"markdown","6aa90273":"markdown","a0c27030":"markdown"},"source":{"7812d2b1":"import numpy as np; np.random.random(42)\nimport pandas as pd\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score\nimport warnings; warnings.filterwarnings(\"ignore\")\n\n%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns; sns.set()","f634cdd9":"plt.rcParams['figure.figsize'] = [10, 5]\nplt.rcParams['font.size'] = 12","b56aee5b":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nsubmit = pd.read_csv('..\/input\/sample_submission.csv')\nprint(train.shape, test.shape, submit.shape)","d9112f43":"print( train.target.value_counts() \/ train.shape[0] * 100 )","4c60af85":"train.head()","86c3f51b":"feature_names = train.columns[2:]","71dc82cb":"plt.figure(figsize=(16,16))\ntrain_corr = train.iloc[:, 1:].corr()\nsns.heatmap(train_corr, cmap=\"Blues\", square=True, vmax=1, vmin=-1, center=0)\nplt.show()","50014b8e":"train_corr.iloc[[0],:]","c80c2ce1":"sns.boxplot(train_corr.iloc[0, 1:])\nplt.show()","a47ce802":"corr_index = (train_corr.iloc[0, 1:].values > 0.1) + (train_corr.iloc[0, 1:].values < -0.1)\nfeatures_selected = feature_names[corr_index].tolist()\nprint(len(features_selected))","1f8e74db":"train_selected = train.loc[:, [\"target\"]+features_selected]\ntest_selected = test.loc[:, features_selected]\ntrain_selected.head()","b19b2864":"sns.distplot(train.iloc[0,1:].values)\nplt.show()","c12e99e5":"target = train_selected[\"target\"].values\ntrain_selected.drop([\"target\"], axis=1, inplace=True)","15fd1372":"N_FOLDS = 10\nfeatures = train_selected.columns.tolist()","af8942b7":"folds = StratifiedKFold(n_splits=N_FOLDS, shuffle=True, random_state=42)\noof = np.zeros(len(train_selected))\nsub = np.zeros(len(test_selected))\nscore = [0 for _ in range(folds.n_splits)]\n\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(train_selected.values, target)):\n    X_train, y_train = train_selected.iloc[trn_idx][features], target[trn_idx]\n    X_val, y_val = train_selected.iloc[val_idx][features], target[val_idx]\n    X_test = test_selected.values\n    clf = LogisticRegression(penalty=\"l1\", C=0.1, solver=\"liblinear\", random_state=42)\n    clf.fit(X_train, y_train)\n    oof[val_idx] = clf.predict_proba(X_val)[:, 1]\n    sub += clf.predict_proba(X_test)[:, 1] \/ folds.n_splits\n    score[fold_] = roc_auc_score(target[val_idx], oof[val_idx])\n    print(\"Fold {}: {}\".format(fold_+1, round(score[fold_],5)))\n\nprint(\"CV score(auc): {:<8.5f}, (std: {:<8.5f})\".format(roc_auc_score(target, oof), np.std(score)))","010cb941":"sns.boxplot(sub)\nplt.show()","b3dc1576":"submit = pd.read_csv('..\/input\/sample_submission.csv')\nsubmit[\"target\"] = sub\nsubmit.to_csv(\"submission.csv\", index=False)\nsubmit.head(20)","0e3bdf9c":"Check the distribution of the prediction","cb26e018":"## 1. Check the correlation matrix","7b7107f5":"## 3. Build Logistic Regression with selected features","c71b3fd6":"You can't capture any insight except that many features have a weak correlation.\n\nSo, focus on the correlation coefficient of features with target.","c9a602ec":"**Thank you for reading!**","5c5aedf9":"***Please upvote this kernel if you like it!***\n\nThis is my initial experiment, so very simple process is performed:\n\n1. Check the correlation matrix\n2. Select features that exceed a threshold value\n3. Build Logistic Regression with selected features\n\nUsed this model : **https:\/\/www.kaggle.com\/nadare\/simple-logistic-regression-with-l1-penalty**","6aa90273":"## 2. Select features that exceed a threshold value","a0c27030":"get features that have over 0.1 or under -0.1 correlation coefficient"}}