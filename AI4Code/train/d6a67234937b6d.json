{"cell_type":{"d9693183":"code","e00959eb":"code","2e34210a":"code","fcadabb1":"code","232075dd":"code","dc09bef8":"code","a1173ab1":"code","e9d156fe":"code","fe6971be":"code","c6fb487e":"code","e0c26e15":"code","b0fa2192":"code","0b2b64cf":"code","7c94a235":"code","28111c0f":"code","8b8314d1":"code","28ac6fa1":"code","c270be95":"code","287b06bf":"code","cc4e5587":"code","16d92587":"code","7a7a6eb2":"code","bc377bd0":"code","a6a30838":"code","2bab388a":"code","43052510":"code","420dfd0c":"code","dc71f328":"code","7d24313b":"code","6e53f39e":"code","f3f2f427":"code","81b29212":"code","4999b706":"code","65be50d4":"code","6871db8e":"code","aa1c5c16":"code","6c851848":"code","7734e728":"code","9ecfc92f":"code","97ac144c":"code","f65af146":"code","f5aeeeff":"code","88138ebd":"code","7ca66d0f":"code","786e211b":"code","2a871f76":"code","8fc3b074":"code","e254508e":"code","a989ec7e":"code","521249ac":"code","cf1babcb":"markdown","306ef3a7":"markdown","5ab18543":"markdown","9eb3b012":"markdown","8c251a33":"markdown","820103e3":"markdown","dc1369e6":"markdown","7d5e4e3d":"markdown","e0a90d15":"markdown"},"source":{"d9693183":"import numpy as np\nimport pandas as pd\nimport os\nimport warnings; warnings.simplefilter('ignore')\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport seaborn as sns","e00959eb":"df=pd.read_csv('..\/input\/nyse\/prices.csv')\ndf","2e34210a":"print(\"Starting date : {}\".format(df['date'].min()))\nprint(\"Ending   date : {}\".format(df['date'].max()))","fcadabb1":"df.info()","232075dd":"df.describe()","dc09bef8":"print(\"Lowest Stock Price : \\n\")\ndf[['date','symbol','low']][df['low']==df['low'].min()]","a1173ab1":"print(\"Highest Stock Price : \\n\")\n\ndf[['date','symbol','high']][df['high']==df['high'].max()]","e9d156fe":"print(\"Minimum Stock Volume : \\n\")\ndf[df['volume']==df['volume'].min()]","fe6971be":"print(\"Maximum Stock Volume : \\n\")\ndf[df['volume']==df['volume'].max()]","c6fb487e":"print(\"Number of Companies : \",df['symbol'].nunique())\ndf['symbol'].unique()","e0c26e15":"df1=df[df['symbol']=='GOOGL']\ndf1","b0fa2192":"df1.info()","0b2b64cf":"df1.describe()","7c94a235":"print(\"Lowest Stock Price : \\n\")\n\ndf1[['date','symbol','low']][df1['low']==df1['low'].min()]","28111c0f":"print(\"Highest Stock Price : \\n\")\n\ndf1[['date','symbol','high']][df1['high']==df1['high'].max()]","8b8314d1":"print(\"Minimum Stock Volume : \\n\")\ndf1[df1['volume']==df1['volume'].min()]","28ac6fa1":"print(\"Maximum Stock Volume : \\n\")\ndf1[df1['volume']==df1['volume'].max()]","c270be95":"np.round(df1.median(),2)","287b06bf":"df1['date']=pd.to_datetime(df1['date'])","cc4e5587":"print(\"Starting date : {}\".format(df1['date'].min()))\nprint(\"Ending   date : {}\".format(df1['date'].max()))","16d92587":"data = []\ndata.append(go.Scatter(x = df1['date'], y = df1['open'].values,name = \"Open\"))\ndata.append(go.Scatter(x = df1['date'], y = df1['close'].values,name = \"Close\" ))\nlayout = go.Layout(dict(title = \"Opening and Closing prices of GOOGLE asset\",\n                  xaxis = dict(title = 'Year'),\n                  yaxis = dict(title = 'Price (USD)'),\n                  ),legend=dict(\n                orientation=\"h\"))\npy.iplot(dict(data=data, layout=layout), filename='basic-line')","7a7a6eb2":"data = []\nfor asset in ['AMZN','AAPL','GOOGL']:\n    asset_df = df[(df['symbol'] == asset)]\n\n    data.append(go.Scatter(x = asset_df['date'].values, y = asset_df['close'].values,name = asset ))\nlayout = go.Layout(dict(title = \"Closing prices of 3 assets - AMAZON, APPLE, GOOGLE\",\n                  xaxis = dict(title = 'Year'),\n                  yaxis = dict(title = 'Price (USD)'),\n                  ),legend=dict(\n                orientation=\"h\"))\npy.iplot(dict(data=data, layout=layout), filename='basic-line')","bc377bd0":"data = []\ndata.append(go.Scatter(x = df1['date'], y = df1['volume'].values,name = \"Volume\"))\nlayout = go.Layout(dict(title = \"Volume of GOOGLE asset\",\n                  xaxis = dict(title = 'Year'),\n                  yaxis = dict(title = 'Volume'),\n                  ),legend=dict(\n                orientation=\"h\"))\npy.iplot(dict(data=data, layout=layout), filename='basic-line')","a6a30838":"data = []\nfor asset in ['AMZN','AAPL','GOOGL']:\n    asset_df = df[(df['symbol'] == asset)]\n\n    data.append(go.Scatter(x = asset_df['date'].values, y = asset_df['volume'].values,name = asset ))\nlayout = go.Layout(dict(title = \"Volume of 3 assets - AMAZON, APPLE, GOOGLE\",\n                  xaxis = dict(title = 'Year'),\n                  yaxis = dict(title = 'Volume'),\n                  ),legend=dict(\n                orientation=\"h\"))\npy.iplot(dict(data=data, layout=layout), filename='basic-line')","2bab388a":"df['price_diff'] = df['close'] - df['open']\ngrouped = df.groupby('date').agg({'price_diff': ['std', 'min']}).reset_index()","43052510":"print(f\"Average standard deviation of price change within a day in {grouped['price_diff']['std'].mean():.4f}.\")","420dfd0c":"df1.drop(['symbol'], axis=1, inplace=True)","dc71f328":"colors = ['#C71585','#0000CD']\nsns.set(palette=colors, font='Serif', style='white', rc={'axes.facecolor':'whitesmoke', 'figure.facecolor':'whitesmoke'})\n\ndf1.corr()['close']","7d24313b":"fig=plt.figure(figsize=(15,8))\nsns.heatmap(df1.corr(), annot=True, cmap=[colors[0],colors[1]], linecolor='white', linewidth=2 )","6e53f39e":"X=df1[['date','volume','open']]\ny=df1['close']","f3f2f427":"XX_train = X[:1000]\nXX_test = X[1000:]\n\ny_train = y[:1000]\ny_test = y[1000:]","81b29212":"print(\"Starting date : {}\".format(XX_test['date'].min()))\nprint(\"Ending   date : {}\".format(XX_test['date'].max()))","4999b706":"X_train = XX_train[['volume','open']]\nX_test = XX_test[['volume','open']]","65be50d4":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test =scaler.transform(X_test)","6871db8e":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\nfrom sklearn import set_config\nmodel = LinearRegression()\nmodel.fit(X_train,y_train)\nset_config(display='diagram')\npred=model.predict(X_test)\nsc=np.round(model.score(X_test, y_test),2) * 100\nr2=np.round(r2_score(y_test,pred),2)\nmse=np.round(mean_squared_error(y_test,pred),2)\nmae=np.round(mean_squared_error(y_test,pred),2)","aa1c5c16":"pred_df = pd.DataFrame(pred,y_test.index,['prediction'])\ny_test = pd.DataFrame(y_test,y_test.index,['close'])\n\nXX_test = XX_test.join(pred_df)\nXX_test = XX_test.join(y_test)","6c851848":"XX_test","7734e728":"data = []\ndata.append(go.Scatter(x = XX_test['date'], y = XX_test['prediction'].values,name = \"Prediction\"))\ndata.append(go.Scatter(x = XX_test['date'], y = XX_test['close'].values,name = \"Actual\" ))\nlayout = go.Layout(dict(title = \"Predicted and Actual Closing prices of GOOGLE asset\",\n                  xaxis = dict(title = 'Year'),\n                  yaxis = dict(title = 'Price (USD)'),\n                  ),legend=dict(\n                orientation=\"h\"))\npy.iplot(dict(data=data, layout=layout), filename='basic-line')","9ecfc92f":"X=df1[['open']]\ny=df1['close']\ndates = df1['date']\nlength=100\n","97ac144c":"training_set = X.iloc[:1000].values\ntest_set = X.iloc[1000:].values\ntest_dates = dates[1000:]","f65af146":"maxOpen = max(training_set)\nminOpen = min(training_set)\n\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler(feature_range = (0, 1))\ntraining_set_scaled = sc.fit_transform(training_set)\ntest_set_scaled=sc.transform(test_set)","f5aeeeff":"X_train = []\ny_train = []\n\nfor i in range(length, len(training_set)):\n    X_train.append(training_set_scaled[i-length:i, 0])\n    y_train.append(training_set_scaled[i, 0])\n    \nX_train, y_train = np.array(X_train), np.array(y_train)\nX_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))","88138ebd":"X_test = []\ny_test = []\nfor i in range(length, len(test_set)):\n    X_test.append(test_set_scaled[i-length:i, 0])\n    y_test.append(test_set_scaled[i, 0])\nX_test, y_test = np.array(X_test), np.array(y_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))","7ca66d0f":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, LSTM, Dropout\nmodel = Sequential()\nmodel.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units = 50, return_sequences = True))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units = 50, return_sequences = True))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units = 50))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units = 1))\n\nmodel.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\nmodel.fit(X_train, y_train, validation_data=(X_test,y_test),epochs = 100, batch_size = 32)","786e211b":"loss = pd.DataFrame()\n\nfig=plt.figure(figsize=(15,8))\nplt.title(\"Loss Vs Epochs\", size=20, weight='bold')\n\nplt.plot(model.history.history['loss'],label='Train Loss')\nplt.plot(model.history.history['val_loss'],label='Validation Loss')\nplt.legend(loc='best')\n\nplt.show()\n","2a871f76":"pred=model.predict(X_test)","8fc3b074":"y_test = y_test.reshape(-1, 1)\n\nsc = MinMaxScaler(feature_range = (minOpen, maxOpen))\npred_scaled = sc.fit_transform(pred)\ny_test_scaled=sc.transform(y_test)","e254508e":"test=pd.DataFrame(columns=['test','pred'])\ntest['test']=y_test_scaled.flatten()\ntest['pred']=pred_scaled.flatten()\ntest","a989ec7e":"r2 = r2_score(y_test_scaled,pred_scaled)\nmse = mean_squared_error(y_test_scaled,pred_scaled)\nmae = mean_squared_error(y_test_scaled,pred_scaled)\n\nprint('R2 Score : ',r2)\nprint('Mean Squared error : ',mse)\nprint('Mean Absolute error :',mae)","521249ac":"data = []\ndata.append(go.Scatter(x = test_dates, y = test['pred'].values,name = \"Prediction\"))\ndata.append(go.Scatter(x = test_dates, y = test['test'].values,name = \"Actual\" ))\nlayout = go.Layout(dict(title = \"Predicted and Actual Closing prices of GOOGLE asset\",\n                  xaxis = dict(title = 'Year'),\n                  yaxis = dict(title = 'Price'),\n                  ),legend=dict(\n                orientation=\"h\"))\npy.iplot(dict(data=data, layout=layout), filename='basic-line')","cf1babcb":"# 1. Load and Analyze Data ","306ef3a7":"# 4. Prediction Model","5ab18543":"Table of Content\n\n#### 1. Load and Analyze Data \n#### 2. Extract GOOGLE stock data and analyze it\n#### 3. Prepare Train and Test dataset\n#### 4. Prediction Model\n#### 4.1 Linear regression model\n#### 4.2 LSTM","9eb3b012":"# 4.2 LSTM","8c251a33":"# 3. Prepare Train and Test dataset","820103e3":"# GOOGLE stock price prediction LSTM","dc1369e6":"# 2. Extract GOOGLE stock data and analyze it","7d5e4e3d":"### Creating a model with 100 time-steps and 1 output\n### Prediction of CLOSE price would depend on Previous 100 days","e0a90d15":"# 4.1 Linear regression model"}}