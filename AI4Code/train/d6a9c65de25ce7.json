{"cell_type":{"e8a2a139":"code","a711ba08":"code","5ab0b4dd":"code","41e42a33":"code","8ff62dd4":"code","06126b07":"code","3751592e":"code","77acc24f":"code","1dd506f5":"code","e2a2f055":"code","aeb170c0":"code","3bd1049b":"code","ec3de192":"code","bd4e9b24":"code","1aac3a64":"code","4353a130":"markdown","b853c436":"markdown","2150981d":"markdown","31fa34fd":"markdown","a54244f4":"markdown","689524b7":"markdown","8cb00b9f":"markdown","e4458f43":"markdown","4856d94d":"markdown"},"source":{"e8a2a139":"# imports\n\nimport fiona\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom geopandas.plotting import plot_polygon_collection\nfrom shapely.geometry import shape","a711ba08":"# tools\n\n# EEPSG:102003 USA_Contiguous_Albers_Equal_Area_Conic\nequal_area_proj = ('+proj=aea'\n                   ' +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96'\n                   ' +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs ')\n\ndef project(geom, p1, p2=equal_area_proj):\n    \"\"\"Convert geom from p1 to p2\n    \n    Parameters\n    ----------\n    geom: shapely geometry object\n    p1: str or dict\n        Parameters for the original projection\n    p2: str or dict\n        Parameters for the desired projection\n        \n    Returns\n    -------\n    shapely geometry object\n        An object equivalent to geom, but\n        projected into p2 instead\n    \"\"\"\n    import pyproj\n    from functools import partial    \n    from shapely.ops import transform\n    \n    p1 = pyproj.Proj(p1, preserve_units=True)\n    p2 = pyproj.Proj(p2, preserve_units=True)\n    project = partial(pyproj.transform, p1, p2)\n    transformed = transform(project, geom)\n    return transformed","5ab0b4dd":"!ls ..\/input\/data-science-for-good\/","41e42a33":"# retrieve district geometry and properties\n\nloc = '..\/input\/data-science-for-good\/cpe-data\/Dept_11-00091\/11-00091_Shapefiles'\nwith fiona.open(loc) as c:\n    rec = next(iter(c))  # choose first district of the list\n    crs = c.crs  # coordinate reference system","8ff62dd4":"rec['properties']","06126b07":"d14_shape = shape(rec['geometry'])\nd14_shape = project(d14_shape, crs)  # project into equal-area\nd14_shape","3751592e":"# retrieve census tracts shapes and properties\n\nloc = '..\/input\/01-example-workflow\/ma_simplified'\nwith fiona.open(loc) as c:\n    records = list(c)  # retrieve all tracts from shapefile\n    crs = c.crs  # coordinate reference system\nprint(f\"{len(records)} census tracts available\")","77acc24f":"# set shapely ``shape`` in each record\n\nfor record in records:\n    record['shape'] = shape(record['geometry'])\n    # project into equal-area\n    record['shape'] = project(record['shape'], crs)","1dd506f5":"# plot census tracts\n\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111)\n\npolygons = [r['shape'] for r in records]\nplot_polygon_collection(ax, polygons);","e2a2f055":"percentages = {}\n\nfor record in records:\n    id = record['properties']['AFFGEOID']\n    intersection = record['shape'].intersection(d14_shape)\n    percentage = intersection.area \/ record['shape'].area\n    percentages[id] = percentage\n\nlist(percentages.items())[:5]","aeb170c0":"# plot the intercepting census tracts\n\nfig = plt.figure(figsize=(12, 8))\nax = fig.add_subplot(111)\n\ntracts = [r['shape'] for r in records\n          if percentages[r['properties']['AFFGEOID']] > 0]\nplot_polygon_collection(ax, tracts, edgecolor='white', alpha=0.5)\nplot_polygon_collection(ax, [d14_shape], color='red', alpha=0.5)","3bd1049b":"loc = ('..\/input\/data-science-for-good\/cpe-data\/Dept_11-00091\/11-00091_ACS_data'\n       '\/11-00091_ACS_race-sex-age\/ACS_15_5YR_DP05_with_ann.csv')\ndf = pd.read_csv(loc, skiprows=[1])  # there are 2 header rows\ndf = df.set_index('GEO.id')  # prepare for joining\ndf.head()","ec3de192":"###\n# Estimate; RACE - Race alone or in combination with one or more other races - Total population - Black or African American\nblack_varname = 'HC01_VC79'\n\n# Estimate; RACE - Race alone or in combination with one or more other races - Total population\ntotal_varname = 'HC01_VC77'\n###\n\n# join percentage values\npct_series = pd.Series(percentages)\npct_series.name = 'percentage'\nsmall = df[[black_varname, total_varname]].join(pct_series, how='left')\n\n# estimate populations inside police district\nsmall['black_pop'] = small[black_varname] * small['percentage']\nsmall['total_pop'] = small[total_varname] * small['percentage']\n\nsmall.head()","bd4e9b24":"black_pop = small['black_pop'].sum()\ntotal_pop = small['total_pop'].sum()","1aac3a64":"print(f\"Estimated black population: {black_pop:.1f}\")\nprint(f\"Estimated total population: {total_pop:.1f}\")\nprint(f\"Estimated percentage: {black_pop \/ total_pop:.1%}\")","4353a130":"# Combining the shapes\n\nNow let's combine the shapes from the tracts with the shape from the district. We want to know what percentage of each census tract is part of the specified district.\n\nTo store this data, we will use a vanilla dictionary.","b853c436":"# Final steps\n\nNow we calculate the total amount of people and the total amount of black people in the district.\n\nWe start by loading the census data:","2150981d":"# Police District\n\nFirst, we need to retrieve the geometry for the police district.\n\nSince we have no data for Providence, let's use Boston (arbitrarily) instead.\n\n![](https:\/\/upload.wikimedia.org\/wikipedia\/en\/b\/b7\/Boston_Police_patch.jpg)","31fa34fd":"# Census tracts\n\nThe census tracts (from the ACS) were retrieved in [this location][1]. It is a simplified version, so and we will probably want to use the [TIGER][2] later.\n\n[1]: https:\/\/www.census.gov\/geo\/maps-data\/data\/tiger-cart-boundary.html\n[2]: https:\/\/www.census.gov\/geo\/maps-data\/data\/tiger.html","a54244f4":"# Implementation Of The Example Workflow\n\nTo get used to the data of this challenge, and to catch a view of where this challenge will challenge us, I came up with a simple implementation of the example workflow proposed by Chris from Kaggle [here][1].\n\nMay be a bit late for the party, but, if anyone has suggestions or concerns, I'd be more than happy to listen.\n\n[1]: https:\/\/www.kaggle.com\/center-for-policing-equity\/data-science-for-good\/discussion\/67450","689524b7":"Nice...\n\nNow that we have the shape for the district, let's focus on the census tracts.","8cb00b9f":"Then, we estimate the population contribution from each census tract (both for black and total people):","e4458f43":"Summing the contributions, we arrive at estimates of the amount of people:","4856d94d":"We chose district 14. Let's plot its shape using shapely."}}