{"cell_type":{"6efc5691":"code","d5b48e53":"code","9aea2bb7":"code","e2608428":"code","2d7197ef":"code","2e338a21":"code","294a7b8d":"code","a5dba3a0":"code","7ad78795":"code","845fb89d":"code","3dab50a8":"code","f4087081":"code","cbfcc191":"markdown","1aade19a":"markdown","e294c044":"markdown","7ef22406":"markdown","0b634539":"markdown"},"source":{"6efc5691":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d5b48e53":"# data loading \nimport pandas as pd\nimport numpy as np\n\n#loading the train data and marking id as index\ntrain_data=pd.read_csv(\"..\/input\/tabular-playground-series-jan-2021\/train.csv\",index_col=0)\n\n#loading the test data and marking id as index\ntest_data=pd.read_csv(\"..\/input\/tabular-playground-series-jan-2021\/test.csv\",index_col=0)\n","9aea2bb7":"#looking at the data\ntrain_data.head()","e2608428":"train_data.describe()\n#looking at the range an the other information of the data","2d7197ef":"# import the visulization libraries\nimport matplotlib.pyplot as plt \nimport seaborn as sns","2e338a21":"#taking out the column names to which needed to be visulaize\ncols=[col for col in train_data.columns if col not in ['target']]\n\n#creating a sheet that can be use to plot the data of 7*2 size\nfig, ax = plt.subplots(nrows=7, ncols=2, figsize=(15,15))\nfig.tight_layout()\n\n#plotting of data\ni=j=0\nfor col in cols:\n    #load the column name\n    #plot the data - in this case KDE to visulaize distribution of data\n    sns.kdeplot(data=train_data[col],shade=True,ax=ax[i][j],legend=False)\n    #set name of the plot\n    ax[i][j].set_title(col)\n    #logic to plot in th shape of matrix(7*2) \n    j+=1\n    if(j%2==0):\n        i+=1\n        j=0\n        \n#dislplay the plots\nplt.show()","294a7b8d":"# take out the data needed to be predicted\ny=train_data['target']\n# Mark the features as X\nX=train_data.drop('target',axis=1)","a5dba3a0":"#load the libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error","7ad78795":"# split the train data to train and validation data keeping the shuffle TRUE to get random data \nX_train,X_valid,y_train,y_valid=train_test_split(X,y,random_state=42,shuffle=True)","845fb89d":"# loading the XGBRegressor - to be used as model\nfrom xgboost import XGBRegressor\nimport math","3dab50a8":"# creatng the model with hyperparameter as \n    # n_estimators=1000 that is choosen by hit and trial\n    # and learning rate 0.001\nmodel=XGBRegressor(n_estimators=1000,learning_rate=0.01)\n\n# providing the data to fit in the model with hyperparameters\n    # early_stopping_rounds to avoid time usage\n    # using an evalution as \nmodel.fit(X_train,y_train,early_stopping_rounds=5,eval_set=[(X_valid,y_valid)],verbose=False)\n\n#making predictions on validation data\npredictions=model.predict(X_valid)\n\n# printing the error - in this case RMSE (root mean squared error)\nprint(\"n_estimators: {} error: {} \".format(1000,math.sqrt(mean_squared_error(y_valid,predictions))))","f4087081":"# making predication on the test data\ntest_predictions=model.predict(test_data)\n\n# getting the prediction in appropriate format\noutput=pd.DataFrame({\"id\":test_data.index,'target':test_predictions})\n\n# converting it to csv format\noutput.to_csv('.\/Submission.csv',index=False)","cbfcc191":"## Submission ","1aade19a":"here we can see all the featues are continous and largly centered between 0-1","e294c044":"## Model Creation ","7ef22406":"# Tabular Playground Series\n\n","0b634539":"## Visualization of the data"}}