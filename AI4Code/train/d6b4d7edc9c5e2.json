{"cell_type":{"a276db5c":"code","e5bcd360":"code","be11a410":"code","107b4fa0":"code","1190ffaf":"code","4750a334":"code","c2ebceaf":"code","16b9c222":"code","ceb47bac":"code","6326c2b1":"code","57e04811":"code","e1565793":"code","0a9c5924":"code","6d1c338c":"code","85894ad2":"code","a81ab247":"code","50fb5d62":"code","70abf493":"code","7a4005af":"code","23fbe9b5":"code","04698c61":"code","38c59446":"code","aae431d4":"code","426614fb":"code","b46acf22":"code","5557cf8a":"code","33ddde3e":"code","924f7e9b":"code","b0865019":"code","e80e6407":"code","4998e438":"code","aa3eaaa1":"code","c3792f45":"code","0a4e5c87":"code","32e68d44":"code","00669b20":"code","0bace83f":"code","ba985620":"code","d1d1cad6":"code","48eda6e0":"code","abc16e10":"code","3da1858c":"code","d39572e5":"code","d394ac1c":"code","05e2e582":"code","d0c16337":"code","51ff9d29":"code","67195cb6":"code","356517fb":"code","20a0d80e":"code","146b29f9":"code","52cfb74a":"code","c64bb76e":"code","d9667414":"code","a9526103":"code","3de566c2":"code","8b32314f":"code","e8103256":"code","31ff8ec4":"code","5d415a43":"code","f10aa672":"code","b4497aa8":"code","afa72730":"code","e6ccc934":"code","90b46304":"code","ce0b03f1":"code","f8d609a3":"code","088a2490":"code","4cf56241":"code","2dc4af06":"code","b7614859":"code","8573e3ad":"code","af9ca94f":"code","8da32612":"code","c4234379":"code","dd921b0f":"code","1c14725a":"code","15a3ccf3":"code","c81ae942":"code","c58c14e1":"code","0a2bd216":"code","62f74d77":"code","730454b1":"code","56605c95":"code","3283a41e":"code","4bf9c689":"code","a0740473":"code","443973dd":"code","8b56f7aa":"code","8d34e573":"code","e4c16e49":"code","8b2d9264":"code","1671373c":"code","93e32034":"code","9c29e23c":"code","1a325398":"code","07d25dbf":"code","40409223":"code","93d592ca":"code","6ae74a58":"code","bb445b71":"code","714dfab0":"code","df5b82fd":"code","aefc5cad":"code","fd7f700c":"code","405d54ff":"code","b02264b5":"code","9566e438":"code","5990975d":"code","e0613901":"code","d8474c26":"code","31807a60":"code","17376912":"code","4369cc68":"code","cc84a15c":"code","6a380d80":"code","9077b327":"code","ed85ee22":"code","f34e418e":"code","c66b4b60":"code","2f1e3b0a":"code","20a7931e":"code","5a450f31":"code","071d881d":"code","232558b1":"code","4819144b":"code","61c59f61":"code","b55a2e2f":"code","fb71b122":"code","d71758ff":"code","b5f872ad":"code","887ea12c":"code","6a3a6a8b":"code","067f3e31":"code","5fc79f8e":"code","fc6d7cad":"code","78cfbb0d":"code","d7f8439f":"code","a2bb50e5":"code","39cfd7eb":"code","f68431ed":"code","8ec6289c":"code","3414ae22":"code","e671fa92":"code","a2b8d4f1":"code","8f06bec6":"code","ccf9920b":"code","1157c94c":"code","22937bd3":"code","7a958412":"code","e1791b75":"code","56224bb4":"code","22848c69":"code","accebff8":"code","2b8927de":"code","e4f87ca6":"markdown","52e8844a":"markdown","cd640446":"markdown","a91801f6":"markdown","e61f4ff7":"markdown","da5391d2":"markdown","07140eb9":"markdown","3232afaa":"markdown","efc99093":"markdown","d56d82c6":"markdown","d8636b9a":"markdown","55e41f39":"markdown","6f97a480":"markdown","83a99ff3":"markdown","62014b87":"markdown","2c499d78":"markdown","6e290f4c":"markdown","4d426127":"markdown","94ac6214":"markdown","a7e9f9f8":"markdown","6723b9cb":"markdown","705c3616":"markdown","20d0fccb":"markdown","f8731e36":"markdown","7310d27e":"markdown","8eba7929":"markdown","78c88b6a":"markdown","0bf64784":"markdown","dcf6038c":"markdown","791689f4":"markdown","cc18d684":"markdown","5ca2d46d":"markdown","d772fc8c":"markdown"},"source":{"a276db5c":"import numpy as np \nimport pandas as pd \n\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","e5bcd360":"!pip install apyori","be11a410":"from apyori import apriori\nfrom collections import Counter\nfrom datetime import datetime\nfrom itertools import combinations\nimport matplotlib.pyplot as plt","107b4fa0":"import zipfile\nwith zipfile.ZipFile('..\/input\/instacart-market-basket-analysis\/aisles.csv.zip', 'r') as zip_ref:\n    zip_ref.extractall('output')\nwith zipfile.ZipFile('..\/input\/instacart-market-basket-analysis\/departments.csv.zip', 'r') as zip_ref:\n    zip_ref.extractall('output')    \nwith zipfile.ZipFile('..\/input\/instacart-market-basket-analysis\/orders.csv.zip', 'r') as zip_ref:\n    zip_ref.extractall('output')\nwith zipfile.ZipFile('..\/input\/instacart-market-basket-analysis\/order_products__prior.csv.zip', 'r') as zip_ref:\n    zip_ref.extractall('output')\nwith zipfile.ZipFile('..\/input\/instacart-market-basket-analysis\/order_products__train.csv.zip', 'r') as zip_ref:\n    zip_ref.extractall('output')\nwith zipfile.ZipFile('..\/input\/instacart-market-basket-analysis\/products.csv.zip', 'r') as zip_ref:\n    zip_ref.extractall('output')","1190ffaf":"from subprocess import check_output\nprint(check_output([\"ls\", \".\/output\"]).decode(\"utf8\"))","4750a334":"aisles = pd.read_csv('.\/output\/aisles.csv')\naisles.head()","c2ebceaf":"aisles.info()","16b9c222":"aisles.isna().sum(axis = 0)","ceb47bac":"departments = pd.read_csv('.\/output\/departments.csv')\ndepartments.head()","6326c2b1":"departments.info()","57e04811":"departments.shape","e1565793":"products = pd.read_csv('.\/output\/products.csv') \nproducts.head()","0a9c5924":"products.info()","6d1c338c":"products.shape","85894ad2":"products.isna().sum(axis = 0)","a81ab247":"products.describe()","50fb5d62":"orders = pd.read_csv('.\/output\/orders.csv') \norders.head()","70abf493":"orders.info()","7a4005af":"orders.shape","23fbe9b5":"orders.eval_set.value_counts()","04698c61":"orders.drop('eval_set', axis = 1, inplace=True)","38c59446":"orders.describe()","aae431d4":"orders.isna().sum(axis = 0)","426614fb":"orders.loc[orders.days_since_prior_order.isna()]","b46acf22":"fig, ax = plt.subplots(1, 2, figsize=(18, 6))\nax[0].boxplot(orders.order_dow, patch_artist=True)\nax[0].set_title('Boxplot day of week')\nax[0].set_ylabel('day of week')\nn_bins=12\nax[1].hist(orders.order_hour_of_day, color='c', bins=n_bins)\nax[1].set_title('Histogram hour of day')\nax[1].set_xlabel('hour')\nax[1].set_ylabel('count');","5557cf8a":"plt.figure(figsize = (15,5))\nplt.bar(range(200), orders.days_since_prior_order[:200] + 1)\nplt.title('Days since prior order')\nplt.xlabel('index')\nplt.ylabel('days since prior order + 1');","33ddde3e":"orders_prior = pd.read_csv('.\/output\/order_products__prior.csv') \norders_prior.head()","924f7e9b":"orders_prior.info()","b0865019":"orders_prior.shape","e80e6407":"orders_prior.isna().sum(axis=0)","4998e438":"orders_apriori = orders.copy()\norders_apriori.head()","aa3eaaa1":"#Visualizing number of orders by user id:\norders_by_user = orders.groupby('user_id')['order_number'].max()","c3792f45":"orders_by_user.head()","0a4e5c87":"orders_prior.head(15)","32e68d44":"products_by_user = orders[['order_id', 'user_id']].merge(\n    orders_prior[['order_id', 'add_to_cart_order']].groupby('order_id').max().rename({'add_to_cart_order': 'size_of_order'}, axis = 1),\n                                                                                        on = 'order_id')","00669b20":"products_by_user.head()","0bace83f":"products_by_user = products_by_user.drop('order_id', axis = 1).groupby('user_id')['size_of_order'].sum()","ba985620":"min_ord= min(orders_by_user)\nmax_ord= max(orders_by_user)\nprint(\"The maximum orders by user is {} and the minimum orders by user is {} \" .format(max_ord, min_ord))\n","d1d1cad6":"fig, ax = plt.subplots(1, 2, figsize=(16,5))\nax[0].hist(orders_by_user, bins = max(orders_by_user) - min(orders_by_user))\nax[0].set_title('Count of orders by user')\nax[0].set_xlabel('number of orders')\nax[0].set_ylabel('count')\n\nax[1].hist(products_by_user, bins = 100, color='k')\nax[1].set_title('Count of products by user')\nax[1].set_xlabel('number of products')\nax[1].set_ylabel('count');","48eda6e0":"orders_apriori.drop(['user_id', 'order_id'], axis = 1, inplace=True)","abc16e10":"orders_apriori.head()","3da1858c":"orders.head()","d39572e5":"orders_by_order_number = orders.order_number.value_counts()\norders_by_order_number","d394ac1c":"plt.bar(orders_by_order_number.index, orders_by_order_number)\nplt.title('Number of orders by order number')\nplt.xlabel('order number')\nplt.ylabel('number of orders');","05e2e582":"def order_number_categorical(order_number):\n  if order_number in range(3):\n    return 'order_number_1-3'\n  if order_number in range(3, 5):\n    return 'order_number_4-5'\n  if order_number in range(5, 10):\n    return 'order_number_6-10'\n  if order_number in range(10, 20):\n    return 'order_number_11-20'\n  if order_number in range(20, 40):\n    return 'order_number_21-40'\n  if order_number in range(40, 60):\n    return 'order_number_41-60'\n  if order_number >= 60:\n    return 'order_number_60+'","d0c16337":"orders_apriori.order_number = orders_apriori.order_number.map(order_number_categorical)","51ff9d29":"orders_by_dow = orders.order_dow.value_counts()\norders_by_dow","67195cb6":"products_by_dow = orders[['order_id', 'order_dow']].merge(\n    orders_prior[['order_id', 'add_to_cart_order']].groupby('order_id').max().rename({'add_to_cart_order': 'order_size'}, axis = 1),\n    on = 'order_id'\n)","356517fb":"products_by_dow = products_by_dow.drop('order_id', axis=1).groupby('order_dow')['order_size'].sum()","20a0d80e":"products_by_dow","146b29f9":"fig, ax = plt.subplots(1, 2, figsize=(15, 5))\nax[0].bar(orders_by_dow.index, orders_by_dow)\nax[0].set_title('Number of orders by day of week')\nax[0].set_xlabel('day of week')\nax[0].set_ylabel('number of orders')\n\nax[1].bar(products_by_dow.index, products_by_dow)\nax[1].set_title('Number of products by day of week')\nax[1].set_xlabel('day of week')\nax[1].set_ylabel('number of products');","52cfb74a":"def dow_categorical(dow):\n  if dow in [0, 1]:\n    return 'weekend'\n  else:\n    return 'weekday'","c64bb76e":"orders_apriori.order_dow = orders_apriori.order_dow.map(dow_categorical)\norders_apriori.head()","d9667414":"orders_by_hour = orders.order_hour_of_day.value_counts()\norders_by_hour","a9526103":"products_by_hour = orders[['order_id', 'order_hour_of_day']].merge(\n    orders_prior[['order_id', 'add_to_cart_order']].groupby('order_id').max().rename({'add_to_cart_order': 'order_size'}, axis = 1),\n    on = 'order_id'\n)\nproducts_by_hour = products_by_hour.drop('order_id', axis = 1).groupby('order_hour_of_day')['order_size'].sum()","3de566c2":"products_by_hour","8b32314f":"fig, ax = plt.subplots(1, 2, figsize=(15, 5))\nax[0].bar(orders_by_hour.index, orders_by_hour, color='m')\nax[0].set_title('Number of orders by hour of day')\nax[0].set_xlabel('hour of day')\nax[0].set_ylabel('number of orders')\n\nax[1].bar(products_by_hour.index, products_by_hour, color='k')\nax[1].set_title('Number of products by hour of day')\nax[1].set_xlabel('hour of day')\nax[1].set_ylabel('number of products');","e8103256":"def hour_categorical(hour):\n  if hour in range(7):\n    return 'early_hours'\n  if hour in range(7,10):\n    return 'hour_' + str(hour)\n  if hour in range(10, 17):\n    return 'peak_hours'\n  if hour in range(17, 24):\n    return 'hour_' + str(hour)","31ff8ec4":"orders_apriori.order_hour_of_day = orders_apriori.order_hour_of_day.map(hour_categorical)\norders_apriori.head()","5d415a43":"plt.hist(orders.days_since_prior_order, bins = 30)\nplt.title('Histogram of days since prior order')\nplt.xlabel('days')\nplt.ylabel('count of days');","f10aa672":"def interval_categorical(interval):\n  if np.isnan(interval):\n    return 'first_order'\n  elif interval in [7, 14, 21]:\n    return 'interval_weekly'\n  elif interval == 30:\n    return 'interval_30+'\n  else:\n    return 'interval_others'","b4497aa8":"orders_apriori.days_since_prior_order = orders_apriori.days_since_prior_order.map(interval_categorical)\norders_apriori.head()","afa72730":"products_id_to_name = {k: v for k, v in zip(products.product_id, products.product_name)}\nprint(products_id_to_name)","e6ccc934":"order_products_names = orders_prior.copy()\norder_products_names['product_name'] = order_products_names.product_id.map(lambda x: products_id_to_name[x])\norder_products_names","90b46304":"reorder_proportion = pd.crosstab(order_products_names.product_name, order_products_names.reordered)\nreorder_proportion","ce0b03f1":"reorder_proportion.sort_values(by = 0, ascending=False)","f8d609a3":"reorder_proportion.sort_values(by = 1, ascending=False)","088a2490":"reorder_proportion['total'] = reorder_proportion.sum(axis = 1)\nreorder_proportion['0.perc'] = reorder_proportion[0] \/ reorder_proportion['total']\nreorder_proportion['1.perc'] = reorder_proportion[1] \/ reorder_proportion['total']","4cf56241":"reorder_proportion.head()","2dc4af06":"reorder_proportion.sort_values(by = ['0.perc', 'total'], ascending = False)[['0.perc', 'total']]","b7614859":"reorder_proportion.sort_values(by = ['1.perc', 'total'], ascending = False)[['1.perc', 'total']]","8573e3ad":"reorder_proportion.total.sort_values(ascending=False)","af9ca94f":"products_bought = sorted(orders_prior.product_id.unique())\nprint(len(products_bought), len(products))","8da32612":"products_not_bought = list(products.product_id[~products.product_id.isin(products_bought)])\nproducts_not_bought","c4234379":"[products_id_to_name[product] for product in products_not_bought]","dd921b0f":"products_not_registered = list(pd.Series(products_bought)[~pd.Series(products_bought).isin(products.product_id)])\nprint(len(products_not_registered), products_not_registered)","1c14725a":"cart_size = orders_prior.groupby('order_id')['add_to_cart_order'].max()\ncart_size","15a3ccf3":"cart_size = cart_size.value_counts()\ncart_size","c81ae942":"plt.bar(cart_size.index, cart_size)\nplt.title('Count of order size')\nplt.xlabel('order size')\nplt.ylabel('count');","c58c14e1":"add_to_cart = pd.crosstab(order_products_names.product_name, order_products_names.add_to_cart_order)\nadd_to_cart","0a2bd216":"for i in range(1,6):\n  print('ORDER = ', i)\n  print(add_to_cart.sort_values(by = i, ascending=False)[i][:5])\n  print('\\n')","62f74d77":"orders_apriori.head()","730454b1":"orders_apriori.shape","56605c95":"transactions = []\nfor i in range(orders_apriori.shape[0]):\n  transactions.append([str(orders_apriori.values[i, j]) for j in range(orders_apriori.shape[1])])","3283a41e":"transactions[:4]","4bf9c689":"0.005 * 100","a0740473":"start = datetime.now()\nrules = apriori(transactions, min_support = 0.005, min_confidence = 0.2, min_lift = 2)\nresults = list(rules)\nprint('Execution time: ', datetime.now() - start)","443973dd":"len(results)","8b56f7aa":"results[0]","8d34e573":"results[0][0]","e4c16e49":"results[0][1]","8b2d9264":"r = results[0][2]\nr","1671373c":"type(r)","93e32034":"r[0]","9c29e23c":"r[1]","1a325398":"r[0][2]","07d25dbf":"r[0][3]","40409223":"A = []\nB = []\nsupport = []\nconfidence = []\nlift = []\n\nfor result in results:\n  s = result[1]\n  result_rules = result[2]\n  for result_rule in result_rules:\n    a = list(result_rule[0])\n    b = list(result_rule[1])\n    c = result_rule[2]\n    l = result_rule[3]\n    A.append(a)\n    B.append(b)\n    support.append(s)\n    confidence.append(c)\n    lift.append(l) \n\nrules_df = pd.DataFrame({\n    'A': A,\n    'B': B,\n    'support': support,\n    'confidence': confidence,\n    'lift': lift\n})\n\nrules_df = rules_df.sort_values(by = 'lift', ascending = False).reset_index(drop = True)\nlen(rules_df)","93d592ca":"A[0]","6ae74a58":"B[0]","bb445b71":"A[1], B[1]","714dfab0":"rules_df.head()","df5b82fd":"transactions_df = orders_prior[['order_id', 'product_id']][:5000]\ntransactions_df","aefc5cad":"n_orders = len(set(transactions_df.order_id))\nn_products = len(set(transactions_df.product_id))\nprint(n_orders, n_products)","fd7f700c":"transactions_df.product_id.value_counts()","405d54ff":"product_frequency = transactions_df.product_id.value_counts() \/ n_orders\nproduct_frequency","b02264b5":"min(product_frequency), max(product_frequency)","9566e438":"plt.hist(product_frequency, bins = 100)\nplt.title('Number of times each product frequency occurs')\nplt.xlabel('product frequency')\nplt.ylabel('number of times');","5990975d":"plt.hist(product_frequency, bins = 100)\nplt.title('Number of times each product frequency occurs')\nplt.xlabel('product frequency')\nplt.ylabel('number of times')\nplt.ylim([0, 100]);","e0613901":"min_support = 0.01\nproducts_apriori = product_frequency[product_frequency >= min_support]\nprint(products_apriori)","d8474c26":"products_apriori.index","31807a60":"transactions_apriori = transactions_df[transactions_df.product_id.isin(products_apriori.index)]\ntransactions_apriori","17376912":"order_sizes = transactions_apriori.order_id.value_counts()\norder_sizes","4369cc68":"max(order_sizes), min(order_sizes)","cc84a15c":"plt.hist(order_sizes, bins = max(order_sizes) - min(order_sizes))\nplt.title('Number of times each order size occurs')\nplt.xlabel('order size')\nplt.ylabel('number of times');","6a380d80":"min_lenght = 2\norders_apriori = order_sizes[order_sizes >= min_lenght]\nprint(orders_apriori)","9077b327":"transactions_apriori = transactions_apriori[transactions_apriori.order_id.isin(orders_apriori.index)]\nprint(transactions_apriori)","ed85ee22":"transactions_by_order = transactions_apriori.groupby('order_id')['product_id']\nfor order_id, order_list in transactions_by_order:\n  print('Order_id:', order_id, '\\nOrder_list: ', list(order_list))\n  product_combinations = combinations(order_list, 2)\n  print('Product combinations:')\n  print([i for i in product_combinations])\n  print('\\n')","f34e418e":"min(1, 4)","c66b4b60":"def product_combinations(transactions_df, max_length = 5):\n  transactions_by_order = transactions_df.groupby('order_id')['product_id']\n  max_length_reference = max_length\n  for order_id, order_list in transactions_by_order:\n    max_length = min(max_length_reference, len(order_list))\n    order_list = sorted(order_list)\n    for l in range(2, max_length + 1):\n      product_combinations = combinations(order_list, l)\n      for combination in product_combinations:\n        yield combination","2f1e3b0a":"combs = product_combinations(transactions_apriori)","20a7931e":"combs","5a450f31":"next(iter(combs))","071d881d":"next(iter(combs))","232558b1":"for _ in range(100):\n  print(next(iter(combs)))","4819144b":"n_orders","61c59f61":"combs = product_combinations(transactions_apriori)\ncounter = Counter(combs).items()\ncombinations_count = pd.Series([x[1] for x in counter], index = [x[0] for x in counter])\ncombinations_frequency = combinations_count \/ n_orders\nprint(combinations_frequency)","b55a2e2f":"min(combinations_frequency), max(combinations_frequency)","fb71b122":"combinations_apriori = combinations_frequency[combinations_frequency >= min_support]\ncombinations_apriori = combinations_apriori[combinations_apriori.index.map(len) >= min_lenght]\nprint(combinations_apriori, len(combinations_apriori))","d71758ff":"A = []\nB = []\nAB = []\nfor c in combinations_apriori.index:\n  c_length = len(c)\n  for l in range(1, c_length):\n    comb = combinations(c, l)\n    for a in comb:\n      AB.append(c)\n      b = list(c)\n      for e in a:\n        b.remove(e)\n      b = tuple(b)\n      if len(a) == 1:\n        a = a[0]\n      A.append(a)\n      if len(b) == 1:\n        b = b[0]\n      B.append(b)","b5f872ad":"apriori_df = pd.DataFrame({'A': A,\n                           'B': B,\n                           'AB': AB})","887ea12c":"apriori_df.head()","6a3a6a8b":"products_apriori","067f3e31":"combinations_frequency","5fc79f8e":"support = {**{k: v for k, v in products_apriori.items()},\n           **{k: v for k, v in combinations_frequency.items()}}","fc6d7cad":"support","78cfbb0d":"apriori_df[['support_A', 'support_B', 'support_AB']] = apriori_df[['A', 'B', 'AB']].applymap(lambda x: support[x])","d7f8439f":"apriori_df.head()","a2bb50e5":"apriori_df.drop('AB', axis = 1, inplace=True)\napriori_df.head()","39cfd7eb":"apriori_df['confidence'] = apriori_df.support_AB \/ apriori_df.support_A","f68431ed":"apriori_df['lift'] = apriori_df.confidence \/ apriori_df.support_B","8ec6289c":"min_confidence = 0.2\nmin_lift = 1.0\napriori_df = apriori_df[apriori_df.confidence >= min_confidence]\napriori_df = apriori_df[apriori_df.lift >= min_lift]","3414ae22":"apriori_df = apriori_df.sort_values(by = 'lift', ascending=False).reset_index(drop = True)\napriori_df.head()","e671fa92":"products_id_to_name[12341]","a2b8d4f1":"def convert_product_id_to_name(product_ids):\n  if type(product_ids) == int:\n    return products_id_to_name[product_ids]\n  names = []\n  for prod in product_ids:\n    name = products_id_to_name[prod]\n    names.append(name)\n  names = tuple(names)\n  return names","8f06bec6":"apriori_df[['A', 'B']] = apriori_df[['A', 'B']].applymap(convert_product_id_to_name)\napriori_df","ccf9920b":"def association_rules(orders_prior, min_support, min_length = 2, max_length = 5, \n                      min_confidence = 0.2, min_lift = 1.0):\n    \n    print('Loading data...')\n    transactions_df = ordesr_prior[['order_id', 'product_id']]\n\n    print('Calculating product supports...')\n    n_orders = len(set(transactions_df.order_id))\n    product_frequency = transactions_df.product_id.value_counts()\/n_orders\n    products_apriori = product_frequency[product_frequency >= min_support]\n    transactions_apriori = transactions_df[transactions_df.product_id.isin(products_apriori.index)]\n    \n    order_sizes = transactions_apriori.order_id.value_counts()\n    orders_apriori = order_sizes[order_sizes >= min_length]\n    transactions_apriori = transactions_apriori[transactions_apriori.order_id.isin(orders_apriori.index)]\n    \n    print('Calculating product combinations and supports...')","1157c94c":"orders_prior.head()","22937bd3":"start = datetime.now()\nrules = association_rules(orders_prior, min_support = 0.01)\nprint('Execution time: ', datetime.now() - start)","7a958412":"rules","e1791b75":"start = datetime.now()\nrules = association_rules(order_products, min_support = 0.005, max_length=4)\nprint('Execution time: ', datetime.now() - start)","56224bb4":"start = datetime.now()\nrules = association_rules(order_products, min_support = 0.002, max_length=3)\nprint('Execution time: ', datetime.now() - start)","22848c69":"rules.head()","accebff8":"start = datetime.now()\nrules = association_rules(order_products, min_support = 0.001, max_length=2)\nprint('Execution time: ', datetime.now() - start)","2b8927de":"rules.head()","e4f87ca6":"The column days_since_prior_order has NaN values becuase the first order (order_number = 1) obviously has no information on days since prior order, since this is the first order. ","52e8844a":"#### Orders by number","cd640446":"### Best sellers","a91801f6":"# Association rules using Instacart Market Basket Analysis Dataset\n\n### Motivation:\nUnderstand consumer behaviour using a machine learning algorithm. ","e61f4ff7":"Deleting unecessary data for this analysis:","da5391d2":"The dataset aisles contains all the ailes in the supermarket. To each aisle it is assigned an ID. ","07140eb9":"### Purchase behavior","3232afaa":"Let's check how many data points are associated to each label of the eval_set column:","efc99093":"### Creating association rules","d56d82c6":"Now we will merge 2 dataframes: orders (only the information order_id and user_id and orders_prior order_id and add_to_cart_order(renamed to size_of_order)","d8636b9a":"### Creating a new dataframe for the study","55e41f39":"#### Running the rules","6f97a480":"The dataset orders tells to which set (prior, train, test) an order belongs, considering the machine learning model. ","83a99ff3":"#### Hour of the day","62014b87":"> ### Preparing the data","2c499d78":"The dataset departments contains a list of all departments in the supermarket. To each department it is assigned an ID. ","6e290f4c":"#### Orders by day of the week","4d426127":"### Size of basket","94ac6214":"Checking for missing values","a7e9f9f8":"Checking if the files are in the folder 'output'","6723b9cb":"### Reading the datasets\nChecking data types and other information about the Aisles, Departments, Products and Orders Datasets. ","705c3616":"### Products bought again","20d0fccb":"The dataset Products lists all the products there are in the supermarket classified by aisle ID and department ID","f8731e36":"There are no NaN values in this dataframe so we do not need to treat the data. ","7310d27e":"## Association Rules","8eba7929":"There are 21 departments in this supermarket","78c88b6a":"User 1 made 11 orders, user 2 made 15 orders and so forth...","0bf64784":"### Products which were not bought","dcf6038c":"### Associations between products","791689f4":"This dataframe has an important information: the 'reordered' column informs us how many times a client ordered again a product.","cc18d684":"#### Pipeline","5ca2d46d":"## 1 - Importing the libraries and preparing the data","d772fc8c":"Checking minimum and maximum orders by user"}}