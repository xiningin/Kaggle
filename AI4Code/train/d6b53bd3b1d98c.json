{"cell_type":{"51a0b763":"code","3fe7bc82":"code","8aa7b8c9":"code","be5b3125":"code","5619b6c1":"code","d9da73b5":"code","0f3194af":"code","87c9c21b":"code","4bd6712f":"code","79a65d16":"code","40d703e8":"code","542ad90b":"code","7743d2f8":"code","1d195017":"code","bd91a8c4":"code","a06b6a99":"code","c8791010":"code","8e7fba86":"code","737b65fb":"code","91a9bcc8":"code","cca29322":"code","c012d278":"code","ac8c918c":"code","6323dc82":"code","38072ba9":"code","ad478fea":"code","db9c984f":"code","ccdc0a41":"code","0792736d":"code","babb6063":"code","9ac0c683":"code","8fc034ab":"code","478f4c04":"code","34e0dbe9":"code","bfba4b91":"code","3eacb080":"markdown","3fe75212":"markdown","c5a6497c":"markdown","0a1d5e99":"markdown"},"source":{"51a0b763":"website = \"Apple.com\"\nprint(website)\nprint(type(website))\n\n","3fe7bc82":"a = 5\nprint(type(a), a)\na = 5.5\nprint(str( type(a) ) + \" \" + str(a))\n","8aa7b8c9":"a, b, c = 5, 3.2, \"Hello\"\nprint (\"A:\",a,\"B:\",b,\"C:\",c)","be5b3125":"fruits = [\"apple\", \"mango\", \"orange\"] #list\nnumbers = (1, 2, 3) #tuple\nalphabets = {'a':'apple', 'b':'ball', 'c':'cat'} #dictionary\nvowels = {'a', 'e', 'i' , 'o', 'u'} #set\n\nprint(\"fruits: \",fruits, \"\\n\" \"Numbers: \", numbers, \"\\n\" \n      \"Alphabets: \", alphabets, \"\\n\" \"Vowels: \", vowels)\n","5619b6c1":"#both works,\n'''with or without brackets'''\nnum = 3.4\n\nif num > 0 and num > 1:\n    print(\"Positive number\")\nelif (num == 0):\n    print(\"Zero\")\nelif (num==500 or num==600):\n        print(\"just an example\")\nelse:\n    print(\"Negative number\")\n","d9da73b5":"numbers = [6, 5, 3, 8, 4, 2, 5, 4, 11]\nsum = 0\n\n# iterate over the list\nfor val in numbers:\n    sum = sum+val\nprint(\"The sum is\", sum)\n\n# Program to iterate through a list using indexing\ngenre = ['pop', 'rock', 'jazz']\n\n# iterate over the list using index\nfor i in range(len(genre)):\n    print(\"I like\", genre[i])\n","0f3194af":"car = \"toyota\"\nfor i in range(0,5):\n    print(\"car company \"+ str(car))","87c9c21b":"\"\"\" 0\n   012\n  01234\"\"\"","4bd6712f":"row= 3\nc=1\nfor rowCount in range (0,row):\n    for space in range (0, row-rowCount):\n        print(\" \",end=\"\")\n    for col in range (0, c):\n        print(col,end=\"\")\n    print()\n    c=c+2","79a65d16":"lst = [1,2 ]","40d703e8":"type(lst)","542ad90b":"lst.append(3) #adds 3 at the end ","7743d2f8":"lst.insert(2,7) #inserts 7 at index 2 ","1d195017":"lst\n","bd91a8c4":"lst[1]","a06b6a99":"lst[0:2] # slices from index 0 to 1 ","c8791010":"lst[1:]# slices from index 1 to last  ","8e7fba86":"lst[1:3]# slices from index 1 to 2  ","737b65fb":"lst[-1]# takes the last value ","91a9bcc8":"lst[-3:-1]# slices from 3rd last to 2nd last   ","cca29322":"lst","c012d278":"lst= lst[-3:-1]   #slices and updates \nlst","ac8c918c":"import numpy as np\n#1 dimensional array\na = np.array([1,2,3])\nprint(a)\nprint( a[1] ) #second index","6323dc82":"# 2 dimensional array\nb = np.array([[1,2,3], [4,5,6]])\nprint(b)\nprint( b[0][1] )\nprint( b[0][2] )\nprint( b[1][2] )\nprint(b.shape)","38072ba9":"#creates a numpy array with numbers from 'start' to 'end' given a step size\nc = np.arange(0,12,2)\nprint( c )  \nprint(c.shape)","ad478fea":"print( c.reshape(3,2))\nprint( c.reshape(3,-1)) ","db9c984f":"x1 = np.random.randint(10, size=6)\nprint( x1 )","ccdc0a41":"x2 = np.random.randint(10, size=(3,4))  \nprint( x2 )","0792736d":"x3 = np.random.randint(10, size=(3,4,5)) \nprint( x3 )","babb6063":"x=np.arange(10)\nprint( x )\nx[::3]# every other element\n#mentioning the step size","9ac0c683":"print( x[2::2] )# every other element, starting at index 1\nprint( x[-1:-11:-1] )  # all elements, reversed\nprint( x[-1:-5:-2] )\n\n","8fc034ab":"np.zeros((4,3))\n\n","478f4c04":"x=np.array([1,2,3])\ny=np.array([3,2,1])\nnp.concatenate([x,y])\n","34e0dbe9":"x=np.arange(10)\nprint( x )\np = np.where(x >= 4)\nprint(p)\nprint(np.shape(p))\np[0][0]","bfba4b91":"a = np.random.randint(10,size=20)\na[a <= 5] = 0\na[a > 5] = 1\na","3eacb080":"**IF ElSE statements**","3fe75212":"**Assigning value to a Variable in Python**\n* type not required to be specified\n","c5a6497c":"**For loop without else statement**","0a1d5e99":"**Collections of variables\nFour different collections List literals, Tuple literals, Dict literals, and Set literals.**\n"}}