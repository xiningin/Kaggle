{"cell_type":{"36a5832b":"code","e0a62722":"code","8fe15ad0":"code","c228de6f":"code","d78dcceb":"code","0deaedb6":"code","13e8c593":"code","97e6183c":"code","e8ba0dbd":"code","d10fb975":"code","f09c2ca1":"code","37d477e1":"code","108514fd":"code","f60c4362":"markdown"},"source":{"36a5832b":"import gc\nimport os\nimport logging\nimport datetime\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom tqdm import tqdm_notebook\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import roc_auc_score, roc_curve\nfrom sklearn.model_selection import StratifiedKFold, KFold\nwarnings.filterwarnings('ignore')","e0a62722":"train = pd.read_csv('..\/input\/train.csv')\ntest  = pd.read_csv('..\/input\/test.csv')","8fe15ad0":"i = 1\nfor df in [test, train]:\n    idx = df.columns.values[i:i+200]\n    df['sum']  = df[idx].sum(axis=1)  \n    df['min']  = df[idx].min(axis=1)\n    df['max']  = df[idx].max(axis=1)\n    df['mean'] = df[idx].mean(axis=1)\n    df['std']  = df[idx].std(axis=1)\n    df['skew'] = df[idx].skew(axis=1)\n    df['kurt'] = df[idx].kurtosis(axis=1)\n    df['med']  = df[idx].median(axis=1)\n    i = i + 1","c228de6f":"# thank you \n# https:\/\/www.kaggle.com\/jiweiliu\/lgb-2-leaves-augment\n\ndef augment(x,y,t=2):\n    xs,xn = [],[]\n    for i in range(t):\n        mask = y>0\n        x1 = x[mask].copy()\n        ids = np.arange(x1.shape[0])\n        for c in range(x1.shape[1]):\n            np.random.shuffle(ids)\n            x1[:,c] = x1[ids][:,c]\n        xs.append(x1)\n\n    for i in range(t\/\/2):\n        mask = y==0\n        x1 = x[mask].copy()\n        ids = np.arange(x1.shape[0])\n        for c in range(x1.shape[1]):\n            np.random.shuffle(ids)\n            x1[:,c] = x1[ids][:,c]\n        xn.append(x1)\n\n    xs = np.vstack(xs)\n    xn = np.vstack(xn)\n    ys = np.ones(xs.shape[0])\n    yn = np.zeros(xn.shape[0])\n    x = np.vstack([x,xs,xn])\n    y = np.concatenate([y,ys,yn])\n    return x,y","d78dcceb":"#train = santander_data\n#X_test = santander_data_test\n#del santander_data\n#del santander_data_test\n#gc.collect()","0deaedb6":"features = [c for c in train.columns if c not in ['ID_code', 'target']]\ntarget = train['target']","13e8c593":"param = {\n    'bagging_freq': 5,\n    'bagging_fraction': 0.4,\n    'boost_from_average':'false',\n    'boost': 'gbdt',\n    'feature_fraction': 0.05,\n    'learning_rate': 0.01,\n    'max_depth': -1,\n    'metric':'auc',\n    'min_data_in_leaf': 80,\n    'min_sum_hessian_in_leaf': 10.0,\n    'num_leaves': 13,\n    'num_threads': 28,\n    'tree_learner': 'serial',\n    'objective': 'binary',\n    'verbosity': 1}","97e6183c":"folds = StratifiedKFold(n_splits=10, shuffle=True, random_state=31415)\noof = np.zeros(len(train))\npredictions = np.zeros(len(test))\nfeature_importance_df = pd.DataFrame()\n\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(train.values, target.values)):\n    print(\"Fold {}\".format(fold_))\n    trn_data = lgb.Dataset(train.iloc[trn_idx][features], label=target.iloc[trn_idx])\n    val_data = lgb.Dataset(train.iloc[val_idx][features], label=target.iloc[val_idx])\n\n    num_round = 15000\n    clf = lgb.train(param, trn_data, num_round, valid_sets = [trn_data, val_data], verbose_eval=1000, early_stopping_rounds = 200)\n    oof[val_idx] = clf.predict(train.iloc[val_idx][features], num_iteration=clf.best_iteration)\n    \n    fold_importance_df = pd.DataFrame()\n    fold_importance_df[\"Feature\"] = features\n    fold_importance_df[\"importance\"] = clf.feature_importance()\n    fold_importance_df[\"fold\"] = fold_ + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n    \n    predictions += clf.predict(test[features], num_iteration=clf.best_iteration) \/ folds.n_splits\n\nprint(\"CV score: {:<8.5f}\".format(roc_auc_score(target, oof)))","e8ba0dbd":"cols = (feature_importance_df[[\"Feature\", \"importance\"]]\n        .groupby(\"Feature\")\n        .mean()\n        .sort_values(by=\"importance\", ascending=False)[:150].index)\nbest_features = feature_importance_df.loc[feature_importance_df.Feature.isin(cols)]\n\nplt.figure(figsize=(14,28))\nsns.barplot(x=\"importance\", y=\"Feature\", data=best_features.sort_values(by=\"importance\",ascending=False))\nplt.title('Features importance (averaged\/folds)')\nplt.tight_layout()\nplt.savefig('FI.png')","d10fb975":"sub_df = pd.DataFrame({\"ID_code\":test[\"ID_code\"].values})\nsub_df[\"target\"] = predictions\nsub_df.to_csv(\"submission.csv\", index=False)","f09c2ca1":"## Catboost : https:\/\/www.kaggle.com\/wakamezake\/starter-code-catboost-baseline\nfrom catboost import Pool, CatBoostClassifier\nmodel = CatBoostClassifier(loss_function=\"Logloss\", eval_metric=\"AUC\")\nkf = KFold(n_splits=10, random_state=42, shuffle=True)\n\ny_valid_pred = 0 * target\ny_test_pred = 0\n\nfor idx, (train_index, valid_index) in enumerate(kf.split(train)):\n    y_train, y_valid = target.iloc[train_index], target.iloc[valid_index]\n    X_train, X_valid = train[features].iloc[train_index,:], train[features].iloc[valid_index,:]\n    _train = Pool(X_train, label=y_train)\n    _valid = Pool(X_valid, label=y_valid)\n    print( \"\\nFold \", idx)\n    fit_model = model.fit(_train,\n                          eval_set=_valid,\n                          use_best_model=True,\n                          verbose=200\n                         )\n    pred = fit_model.predict_proba(X_valid)[:,1]\n    print( \"  auc = \", roc_auc_score(y_valid, pred) )\n    y_valid_pred.iloc[valid_index] = pred\n    y_test_pred += fit_model.predict_proba(test[features])[:,1]\ny_test_pred \/= 5","37d477e1":"##submission\nsub_df1 = pd.DataFrame({\"ID_code\":test[\"ID_code\"].values})\nsub_df1[\"target\"] = y_test_pred\nsub_df1.to_csv(\"cat_submission.csv\", index=False)","108514fd":"sub_df2 = pd.DataFrame({\"ID_code\":test[\"ID_code\"].values})\nsub_df2[\"target\"] = 0.5*sub_df[\"target\"] + 0.5*sub_df1[\"target\"]\nsub_df2.to_csv(\"lgb_cat_submission.csv\", index=False)","f60c4362":"# Santander Customer Transaction Prediction\n\n![](https:\/\/storage.googleapis.com\/kaggle-media\/competitions\/santander\/atm_image.png)"}}