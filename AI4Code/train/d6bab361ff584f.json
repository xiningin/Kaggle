{"cell_type":{"976d703f":"code","467c5ceb":"code","4dffca86":"code","eef9c53c":"code","d1d8671b":"code","b7425e2e":"code","18d909d4":"code","b49b3354":"code","859372cd":"code","8f9d4d33":"code","426c0244":"code","e43be4e3":"code","9f128740":"code","26456f26":"code","7747ac1c":"code","bf592ce7":"code","f633ef66":"code","9f4a6229":"code","71e8a60a":"code","f9ca6120":"code","87375c2f":"code","78d53743":"code","14eafad8":"code","5bfa0332":"code","621ec166":"code","bc853f0b":"code","13d4d909":"code","b4c403b8":"code","6356c88e":"code","28e77e0d":"code","edff8ba8":"code","e588dd58":"code","58e8f58b":"code","be8a88ed":"markdown","2f1b6cfa":"markdown","95f71a57":"markdown","09fac58b":"markdown","47f5b71a":"markdown","f1af5738":"markdown","03585c40":"markdown","baa9cc8a":"markdown","65d10552":"markdown","7a15273a":"markdown","3a9d6838":"markdown","f03a2124":"markdown","47068664":"markdown","d4110f5a":"markdown"},"source":{"976d703f":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","467c5ceb":"! pip install pandas numpy scikit-learn matplotlib seaborn","4dffca86":"#  import other packages\n\nimport pandas as pd\nimport numpy as np # Linear Algebra","eef9c53c":"# clone the dataset repository\n\n! git clone https:\/\/github.com\/education454\/diabetes_dataset","d1d8671b":"! ls diabetes_dataset","b7425e2e":"# Load Data set\n\npdf = pd.read_csv('\/kaggle\/input\/diabetes-data-set\/diabetes-dataset.csv')","18d909d4":"# Show first five rows from data set\n\npdf.head()","b49b3354":"# pandas info method applied here\npdf.info()","859372cd":"#  show shape\n\npdf.shape","8f9d4d33":"#  show how many patients has diabetes or not ? ? ?\n \nprint(pdf.Outcome.value_counts())\n","426c0244":"#  show summary statastics for all numeric columns\n\npdf.describe()","e43be4e3":"# Column wise na values counts\n\npdf.isna().sum()","9f128740":"# show how many column has 0 values and sum it\n\nfeatureList = ['Glucose', 'BloodPressure',\t'SkinThickness',\t'Insulin',\t'BMI']\nprint(pdf[featureList].isin({0}).sum())","26456f26":"# Set \"0\" to Mean values of perticular columns\n\nfor col in featureList:\n  pdf[col] = pdf[col].replace({ 0 : pdf[col].mean() })","7747ac1c":"# show \"0\" values count\npdf[featureList].isin({0}).sum()","bf592ce7":"# Import visulazation packages\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n","f633ef66":"pdf.head()","9f4a6229":"plt.figure(figsize=(10, 5))\nsns.barplot('Outcome', 'Pregnancies', data=pdf, ) \n\nplt.title(\"Bars of Outcome and Pregnancies\")\nplt.xlabel(\"Outcome\")\nplt.ylabel(\"Pregnancies\")\nplt.show()","71e8a60a":"plt.figure(figsize=(10, 7))\n\nsns.heatmap(pdf.corr(), annot=True, linewidths=0.2, fmt='.1f', cmap='coolwarm') # cmap='RdYlBu'\nplt.show()","f9ca6120":"# select feature colulmn\nfeature_columns = pdf[['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n       'BMI', 'DiabetesPedigreeFunction', 'Age']]\n\nfeature_columns.head()","87375c2f":"# Outcome colummn\noutcome_column = pdf['Outcome']\noutcome_column.head()","78d53743":"# import package\n\nfrom sklearn.model_selection import train_test_split","14eafad8":"# split into training and testing sets\n\nX_train, X_test, y_train, y_test = train_test_split( feature_columns, outcome_column, test_size=0.2, random_state=5) \n","5bfa0332":"# show train data and shapes\n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","621ec166":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix","bc853f0b":"#  create model instance \n\nmodel = LogisticRegression()","13d4d909":"#  Model Fitting\n\nmodel = model.fit(X_train, y_train)","b4c403b8":"# set score\nscore = model.predict(X_train)","6356c88e":"# Model Score\n\n# print(\"Accuracy Score: \", accuracy_score(X_train, y_train))\n\nprint(\"Training Score: \", model.score(X_train, y_train))\nprint(\"Testing Score:  \", model.score(X_test, y_test))\n","28e77e0d":"# Model Accuracy\npred = model.predict(X_test)\nprint(\"Model Accuracy is : \", pred)","edff8ba8":"# Model Intercept\nmodel.intercept_","e588dd58":"# Model Coefficient\n\nmodel.coef_","58e8f58b":"accuracy_score(y_test, pred)","be8a88ed":"# Loading Model For Predictions","2f1b6cfa":"- Now, Device out feature and outcome column into train and test using sklearn train_test_split functions","95f71a57":"There are most of the column has less then 50% of 0 values.\n\n- To minimize this problem, we can replace zeros with mean values \n\n","09fac58b":"# Feature Selection ","47f5b71a":"# Data Collection","f1af5738":"# Model Testing and Evaluation","03585c40":"# Visualizations\n\n","baa9cc8a":"> * listdown dataset here to know what's datasets we have,","65d10552":"# Set up Enviornment Path for installed Java package\n","7a15273a":"# Package Installation\n\n> *It's take a time while installing.*\n","3a9d6838":"> **First of all we need to know how many null values in the dataset.\n**","f03a2124":"- Here we can see no any na values found for all colmns","47068664":"# Data Cleaning","d4110f5a":"*  Let's, check again how many 0 values available in data frame\n"}}