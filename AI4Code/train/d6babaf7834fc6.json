{"cell_type":{"c1858e35":"code","f2f4b95b":"code","602c154c":"code","231d9f78":"code","d03c21a0":"code","5394ae47":"code","183e6fb1":"code","47f6d658":"code","0a0bd6c8":"code","2ed40cb0":"code","8ecc2912":"code","6f3234d2":"code","9b7e288d":"code","be688f7b":"markdown"},"source":{"c1858e35":"# !conda install -c conda-forge gdcm -y\n!tar -xvf ..\/input\/gdcm-conda-install\/gdcm.tar\n!conda install ..\/working\/gdcm\/conda-4.8.4-py37hc8dfbb8_2.tar.bz2\n!conda install ..\/working\/gdcm\/gdcm-2.8.9-py37h71b2a6d_0.tar.bz2\n!conda install ..\/working\/gdcm\/libjpeg-turbo-2.0.3-h516909a_1.tar.bz2","f2f4b95b":"from IPython.display import display_html\n# def restartkernel() :\ndisplay_html(\"<script>Jupyter.notebook.kernel.restart()<\/script>\")\n# restartkernel()\n\n","602c154c":"import numpy as np \nimport pandas as pd \nfrom tqdm import tqdm\nfrom glob import glob\nimport os\nimport matplotlib.pyplot as plt\nimport gdcm\nimport pydicom as dicom\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nimport pydicom\nimport cv2\nfrom PIL import Image","231d9f78":"data_dir = \"..\/input\/siim-covid19-detection\"\nIM_SIZE = 512","d03c21a0":"train_study_level = pd.read_csv(os.path.join(data_dir, \"train_study_level.csv\"))","5394ae47":"train_study_level.head()","183e6fb1":"train_df = train_study_level","47f6d658":"training_paths = []\n\nfor sid in tqdm(train_df['id']):\n    path = glob(os.path.join(data_dir, 'train' , sid.split(\"_\")[0] + \"\/*\/*\" ))[0]\n    training_paths.append(path)\n\ntrain_df['path'] = training_paths","0a0bd6c8":"def dicom2array(path, voi_lut=True, fix_monochrome=True):\n    dicom = pydicom.read_file(path)\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n        \n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n        \n    return data\n\n\nimages = []\nfor filename in tqdm(train_df.path):\n    im = dicom2array(filename)\n    images.append(cv2.resize(im, (IM_SIZE, IM_SIZE)))","2ed40cb0":"os.makedirs(\"train_images\", exist_ok=True)","8ecc2912":"for i, idx in tqdm(enumerate(train_df.id)):\n    Image.fromarray(images[i]).save(os.path.join(\"train_images\", str(idx) + \".jpg\"))","6f3234d2":"!tar -czf train_images.tar.gz train_images\n!du -h train_images.tar.gz","9b7e288d":"from IPython.display import FileLink\nFileLink(r'train_images.tar.gz')","be688f7b":"# Dicom data"}}