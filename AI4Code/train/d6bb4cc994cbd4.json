{"cell_type":{"60ff0a32":"code","cfb01758":"code","81a89069":"code","716a36f5":"code","d401bc00":"code","d245f9f9":"code","c556cd5c":"code","7ab80630":"code","f3df2134":"code","5817d632":"code","bb80dee4":"code","618c5c88":"code","e3abb0bf":"code","657325d5":"code","e95e7ee7":"code","69fdf837":"code","e29f39a8":"code","c2157e24":"markdown","6693684c":"markdown","37a9fb92":"markdown","433db6e5":"markdown","706862da":"markdown","0771eb8f":"markdown","f29b0af4":"markdown","1aea8612":"markdown","14e3a2b1":"markdown"},"source":{"60ff0a32":"import numpy as np\nimport pandas as pd\nimport missingno as msno\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.colors import ListedColormap\nfrom sklearn.metrics import silhouette_samples, silhouette_score\nfrom sklearn.cluster import AgglomerativeClustering\nfrom sklearn.decomposition import PCA","cfb01758":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \npath_diabetes = \"\/kaggle\/input\/diabetes\/diabetic_data.csv\"\npath_IDsMapping = \"\/kaggle\/input\/diabetes\/IDs_mapping.csv\"","81a89069":"from subprocess import check_output\nprint(check_output([\"ls\", \"\/kaggle\/input\/\"]).decode(\"utf8\"))","716a36f5":"df_diabetic = pd.read_csv(path_diabetes)\ndf_id_diabetic = pd.read_csv(path_IDsMapping)\ndf_diabetic.replace('?', np.nan , inplace=True)","d401bc00":"msno.bar(df_diabetic,sort='descending',color='#66a9bc')\nplt.show()","d245f9f9":"columns_diabectic = df_diabetic.columns\nField = [col for col in columns_diabectic]\nMissing = [round(df_diabetic[col].isnull().sum()\/df_diabetic[col].shape[0],4) for col in columns_diabectic]\nConstant = [len(df_diabetic[col].unique()) for col in columns_diabectic]\ndf_description = pd.DataFrame({\n    \"Field\":Field,\n    \"% Missing\":Missing,\n    \"Qty Unique\":Constant\n})\n\ndf_description[\"Suggestion\"] = df_description.apply(lambda x: \"Remove\" if x[\"% Missing\"] > 0.3 or x[\"Qty Unique\"] == 1 else \"Not Remove\", axis=1)\ndf_diabetic.drop(df_description.loc[df_description[\"Suggestion\"].isin([\"Remove\"])][\"Field\"].tolist()+[\"encounter_id\",\"diag_2\", \"diag_3\",\"patient_nbr\"], axis=1, inplace=True)","c556cd5c":"df_description.loc[df_description[\"Suggestion\"].isin([\"Remove\"])]","7ab80630":"columns = ['metformin', 'repaglinide', 'nateglinide', 'chlorpropamide', 'glimepiride', 'glipizide', 'glyburide', 'pioglitazone', 'rosiglitazone', 'acarbose', 'miglitol', 'insulin', 'glyburide-metformin', 'tolazamide', 'metformin-pioglitazone','metformin-rosiglitazone', 'glimepiride-pioglitazone', 'glipizide-metformin', 'troglitazone', 'tolbutamide', 'acetohexamide']\nfor col in columns:\n    df_diabetic[f\"{col}_tmp\"] = df_diabetic[col].apply(lambda x: 0 if x == \"No\" or x == \"Steady\" else 1)\n\ndf_diabetic[\"Qty Changes\"] = df_diabetic[[f\"{col}_tmp\" for col in columns]].apply(lambda x:x.sum(), axis=1)\n\nfor col in columns:\n    df_diabetic.drop([f\"{col}_tmp\"], axis=1, inplace=True)","f3df2134":"df_diabetic[\"admission_type_id\"] = df_diabetic[\"admission_type_id\"].apply(lambda x: 5 if x == 6 or x == 8 \n                                                                                            else ( 1 if x == 2 else x ))\ndf_diabetic[\"discharge_disposition_id\"] = df_diabetic[\"discharge_disposition_id\"].apply(lambda x: 1 if x == 6 or x == 8 or x == 13 or x == 19 \n                                                                                                        else ( 3 if x == 4 \n                                                                                                        else ( 12 if x == 16 or x == 17 \n                                                                                                        else ( 18 if x == 25 or x == 26 \n                                                                                                        else ( 2 if x == 23 or x == 24 or x == 30 or x == 27 or x == 29 or x == 14 or x == 5 or x == 22 \n                                                                                                        else ( 11 if x == 19 or x == 20 or x == 21 else x ))))))\ndf_diabetic[\"admission_source_id\"] = df_diabetic[\"admission_source_id\"].apply(lambda x: 9 if x == 15 or x == 17 or x == 20 or x == 21 \n                                                                                                else ( 4 if x == 5 or x == 6 or x == 10 or x == 18 or x == 22 or x == 25 or x == 26 \n                                                                                                else ( 1 if x == 2 or x == 3 else x )))\ndf_diabetic[\"diag_1\"] = df_diabetic[\"diag_1\"].apply(lambda x: 0 if str(x).__contains__(\"V\") or str(x).__contains__(\"E\") else float(x))                                                                                                \ndf_diabetic.loc[(df_diabetic[\"diag_1\"] >= 390) & (df_diabetic[\"diag_1\"] <= 459) & (df_diabetic[\"diag_1\"].isin([785])), \"diag_1\"] = 1\ndf_diabetic.loc[(df_diabetic[\"diag_1\"] >= 250.00) & (df_diabetic[\"diag_1\"] <= 250.99), \"diag_1\"] = 2\ndf_diabetic.loc[(df_diabetic[\"diag_1\"] >= 460) & (df_diabetic[\"diag_1\"] <= 519) & (df_diabetic[\"diag_1\"].isin([786])), \"diag_1\"] = 3\ndf_diabetic.loc[(df_diabetic[\"diag_1\"] >= 520) & (df_diabetic[\"diag_1\"] <= 579) & (df_diabetic[\"diag_1\"].isin([787])), \"diag_1\"] = 4\ndf_diabetic.loc[(df_diabetic[\"diag_1\"] >= 800) & (df_diabetic[\"diag_1\"] <= 999), \"diag_1\"] = 5\ndf_diabetic.loc[(df_diabetic[\"diag_1\"] >= 710) & (df_diabetic[\"diag_1\"] <= 739), \"diag_1\"] = 6\ndf_diabetic.loc[(df_diabetic[\"diag_1\"] >= 580) & (df_diabetic[\"diag_1\"] <= 629) & (df_diabetic[\"diag_1\"].isin([788])), \"diag_1\"] = 7\ndf_diabetic.loc[(df_diabetic[\"diag_1\"] >= 140) & (df_diabetic[\"diag_1\"] <= 239), \"diag_1\"] = 8\ndf_diabetic.loc[~df_diabetic[\"diag_1\"].isin([1,2,3,4,5,6,7,8]), \"diag_1\"] = 9\ndf_diabetic[\"race\"] = df_diabetic[\"race\"].apply(lambda x: 1 if x == \"Caucasian\" \n                                                                else ( 2 if x == \"AfricanAmerican\" \n                                                                else ( 3 if x == \"Other\" \n                                                                else ( 4 if x == \"Hispanic\" else 5 ))))\ndf_diabetic[\"gender\"] = df_diabetic[\"gender\"].apply(lambda x: 1 if x == \"Female\" \n                                                                    else ( 2 if x == \"Male\" else 3 ))\ndf_diabetic[\"age\"] = df_diabetic[\"age\"].apply(lambda x: 1 if x == \"[0-10)\" or x == \"[10-20)\" or x == \"[20-30)\"\n                                                                else ( 2 if x == \"[30-40)\" or x == \"[40-50)\" or x == \"[50-60)\" else 3 ))\ndf_diabetic[\"max_glu_serum\"] = df_diabetic[\"max_glu_serum\"].apply(lambda x: 1 if x == \">200\" or x == \">300\"\n                                                                                else ( 2 if x == \"Norm\" else 3 ))\ndf_diabetic[\"A1Cresult\"] = df_diabetic[\"A1Cresult\"].apply(lambda x: 1 if x == \">7\" or x == \">8\"\n                                                                                else ( 2 if x == \"Norm\" else 3 ))\ndf_diabetic[\"change\"] = df_diabetic[\"change\"].apply(lambda x: 1 if x == \"Ch\" else 0 )\ndf_diabetic[\"diabetesMed\"] = df_diabetic[\"diabetesMed\"].apply(lambda x: 1 if x == \"Yes\" else 0 )\ndf_diabetic[\"readmitted\"] = df_diabetic[\"readmitted\"].apply(lambda x: 1 if x == \"<30\" else 0 )\n\nfor col in columns:\n    df_diabetic[col] = df_diabetic[col].apply(lambda x: 1 if x == \"Steady\" or x == \"Up\" or x == \"Down\" else 0 )                                                               ","5817d632":"df_numerical = df_diabetic[[\"time_in_hospital\",\"num_lab_procedures\",\"num_procedures\",\"num_medications\",\"number_outpatient\",\"number_emergency\",\"number_inpatient\",\"number_diagnoses\",\"Qty Changes\"]]\ndf_numerical_scaled = np.log1p(df_numerical)\ndf_kurtosis = pd.concat([df_numerical.kurtosis().to_frame().rename(columns={0:\"Kurtosis\"}), df_numerical_scaled.kurtosis().to_frame().rename(columns={0:\"Kurtosis_Transformed\"})],axis=1)\ndf_numerical.drop([\"num_medications\",\"number_outpatient\",\"number_emergency\",\"number_inpatient\"], axis=1, inplace=True)\ndf_numerical = pd.concat([df_numerical,df_numerical_scaled[[\"num_medications\",\"number_outpatient\",\"number_emergency\",\"number_inpatient\"]]], axis=1)","bb80dee4":"df_kurtosis","618c5c88":"df_diabetic.drop(df_numerical.columns.tolist(), axis=1, inplace=True)\ndf_diabetic = pd.concat([df_diabetic, df_numerical], axis=1)","e3abb0bf":"corr_map = ListedColormap(sns.light_palette((250, 100, 50), input=\"husl\", n_colors=50).as_hex())\ncorr_table = df_diabetic.corr(method='pearson')\ncorr_table.style.background_gradient(cmap=corr_map, axis = 0)","657325d5":"pca = PCA(random_state=42).fit(df_diabetic)\n\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\nfig, ax = plt.subplots()\nxi = np.arange(1, 43, step=1)\ny = np.cumsum(pca.explained_variance_ratio_)\n\nplt.ylim(0.0,1.1)\nplt.plot(xi, y, marker='o', linestyle='--', color='b')\n\nplt.xlabel('Number of Components')\nplt.xticks(np.arange(1, 43, step=1)) \nplt.ylabel('Cumulative variance')\nplt.title('The number of components needed to explain variance')\n\nplt.axhline(y=0.95, color='r', linestyle='-')\nplt.text(0.5, 0.85, \"0.95 cut-off threshold\", color = 'red', fontsize=16)\n\nax.grid(axis='x')\nplt.show()","e95e7ee7":"X = df_diabetic.drop([\"readmitted\"], axis=1)\ny = df_diabetic[\"readmitted\"]\npca = PCA(n_components=3, random_state=42).fit(X)\ndf_pca = pd.DataFrame(pca.fit_transform(X, y), columns=[\"FirstComponent\",\"SecondComponent\",\"ThirdComponent\"])\npca.explained_variance_ratio_","69fdf837":"from scipy import stats\ndf_factor_analysis = pd.DataFrame()\nfor col_pca in df_pca:\n    pca_component = []\n    diabetic_factor = []\n    for col_diabetic in X.columns:    \n        pca_component.append(stats.spearmanr(df_pca[col_pca], X[col_diabetic])[0])\n        diabetic_factor.append(col_diabetic)\n    df_temp = pd.DataFrame({\n        f\"{col_pca}\":pca_component,\n        f\"diabetic_col\":diabetic_factor    \n    }).set_index(\"diabetic_col\")\n    df_factor_analysis = pd.concat([df_factor_analysis, df_temp], axis=1)\n","e29f39a8":"df_factor_analysis.loc[df_factor_analysis.index.isin([\"discharge_disposition_id\",\"admission_source_id\",\"time_in_hospital\"])]","c2157e24":"\n\n##  Cristhian Augusto Plazas Ortega\n###  Data Scientist\n###  MSc student on Engineering Information\n###  cristhianplaza.o@gmail.com\n\n\n\n","6693684c":"## Replacing Numerical Transforms Data","37a9fb92":"## Redaction Problem\n\n*   Encounter ID: ID of the encounter\n*   Patient number: ID of the patient\n*   Race Values: Caucasian, Asian, African American, Hispanic, and other\n*   Gender Values: male, female, and unknown\/invalid\n*   Age: 10 years grouped range age\n*   Weight: Weight of patient\n*   Admission type: Type of admission corresponding to 9 distinct values, ie., emergency, urgent, elective, newborn, and not available\n*   Discharge disposition: Discharge disposition corresponding to 29 distinct values.\n*   Admission source: Admission source corresponding to 21 distinct values, ie., physician referral, emergency room, and transfer from a hospital\n*   Time in hospital: Number of days between admission and discharge\n*   Payer code : Type of payer code\n*   Medical specialty: Medical specialty of the admitting corresponding to 84 distinct values\n*   Number of lab procedures: Number of lab tests performed during the encounter\n*   Number of procedures: Number of procedures performed during the encounter different than lab procedures\n*   Number of medications: Number of distinct generic names administered during the encounter\n*   Number of outpatient visits: Number of outpatient visits in the encounter\n*   Number of emergency visits: Number of emergency visits of the patient in the year\n*   Number of inpatient visits: Number of inpatient visits of the patient in the year\n*   Diagnosis 1: The primary diagnosis (coded as first three digits of ICD9); 848 distinct values\n*   Diagnosis 2: Secondary diagnosis (coded as first three digits of ICD9); 923 distinct values\n*   Diagnosis 3: Additional secondary diagnosis (coded as first three digits of ICD9); 954 distinct values\n*   Number of diagnoses : Number of diagnoses\n*   Glucose serum test : Indicates the range of the result, ie., \u201c>200,\u201d \u201c>300,\u201d \u201cnormal,\u201d and \u201cnone\u201d\n*   A1c test result : Indicates the range of the result. Values: \u201c>8\u201d if the result was greater than 8%, \u201c>7\u201d if the result was greater than 7% but less than 8%, \u201cnormal\u201d if the result was less than 7%, and \u201cnone\u201d\n*   Change of medications: Indicates if there was a change in diabetic medications including dosage or generic name.\n*   Diabetes medications : Indicates if there was any diabetic medication prescribed. Values: \u201cyes\u201d and \u201cno\u201d \n*   Readmitted: Days to inpatient readmission. Values: \u201c<30\u201d if the patient was readmitted in less than 30 days, \u201c>30\u201d if the patient was readmitted in more than 30 days, and \u201cNo\u201d for no record of readmission","433db6e5":"## PCA Decomposition to Extract Patterns","706862da":"### admission_type_id\n    (1) Emergency --> 1\n    (1) Emergency --> 2\n    (3) Elective --> 3\n    (4) New Born --> 4\n    (5) Undefined --> 5\n    (5) Undefined --> 6\n    (5) Undefined --> 8\n    (7) Trauma Center --> 7\n\n### discharge_disposition_id\n    (1) Home --> 1\n    (1) Home --> 6\n    (1) Home --> 8\n    (1) Home --> 13\n    (1) Home --> 19\n    (3) HighAttention --> 3\n    (3) HighAttention --> 4    \n    (12) OutpatientServices --> 12\n    (12) OutpatientServices --> 16\n    (12) OutpatientServices --> 17\n    (18) Undefined --> 18\n    (18) Undefined --> 25\n    (18) Undefined --> 26\n    (2) OtherHospital --> 2\n    (2) OtherHospital --> 23\n    (2) OtherHospital --> 24\n    (2) OtherHospital --> 30\n    (2) OtherHospital --> 27\n    (2) OtherHospital --> 29\n    (2) OtherHospital --> 14\n    (2) OtherHospital --> 5\n    (2) OtherHospital --> 22\n    (11) Expired --> 11\n    (11) Expired --> 19\n    (11) Expired --> 20\n    (11) Expired --> 21\n\n### admission_source_id\n    (9) Undefined --> 15\n    (9) Undefined --> 17\n    (9) Undefined --> 20\n    (9) Undefined --> 21\n    (4) Transfers --> 5\n    (4) Transfers --> 6\n    (4) Transfers --> 10\n    (4) Transfers --> 18\n    (4) Transfers --> 22\n    (4) Transfers --> 25\n    (4) Transfers --> 26\n    (1) Referrals --> 1\n    (1) Referrals --> 2\n    (1) Referrals --> 3\n\n### diag_1\n    (1) Circulatory\n    (2) Diabetes\n    (3) Respiratory\n    (4) Digestive\n    (5) Injury and Poisoning\n    (6) Musculoskeletal\n    (7) Genitourinary\n    (8) Neoplasms\n    (9) Other\n\n### race\n    (1) Caucasian\n    (2) AfricanAmerican\n    (3) Other\n    (4) Hispanic\n    (5) Undefined \n","0771eb8f":"## Removing Variables that doesn't gives information","f29b0af4":"## Counting number of changes due to its relation with the readmission","1aea8612":"## Grouping similar values by Column","14e3a2b1":"## Numerical Fields"}}