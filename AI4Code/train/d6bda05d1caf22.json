{"cell_type":{"80763597":"code","ca559054":"code","43e11c63":"code","b5baade6":"code","d942ee58":"code","8e3a528a":"code","71ea86db":"code","48a43b6c":"code","468ad574":"code","65a41d43":"code","a3e78436":"code","daee8cfd":"code","dceb9bd9":"code","b0245cd2":"code","4472a10b":"code","c0adcb2d":"code","9532b9e1":"code","430101e7":"code","c107632d":"code","c8d7ddf0":"code","2fccb82a":"code","f85d92a9":"code","c9d90a33":"code","bd56aab3":"code","eaf9a131":"code","38738cc7":"code","32a1cf5a":"code","2656ee83":"code","1a40b117":"code","f56e3db1":"code","23b728e9":"code","b06c5c56":"markdown","aee85dd8":"markdown","1b229edf":"markdown","0194486f":"markdown","617f5eef":"markdown","70191c63":"markdown","2d3da49a":"markdown"},"source":{"80763597":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ca559054":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","43e11c63":"df=pd.read_csv('..\/input\/banking-dataset-classification\/new_train.csv')\ndf","b5baade6":"df.info()","d942ee58":"df.shape","8e3a528a":"df.isna().sum()","71ea86db":"df.duplicated().sum()","48a43b6c":"df.drop_duplicates(inplace=True)\ndf.duplicated().sum()","468ad574":"l=[0,10,11,12,13]\nfor i in df.iloc[:,l].columns:\n    sns.boxplot(x=df[i],data=df,palette='rainbow')\n    \n    plt.show()","65a41d43":"l=[0,10,11]\ndef Outlier(data):\n    for column in data.iloc[:,l].columns:\n        if data[column].dtype!='str':\n            Q1=np.percentile(data[column],25)\n            Q3=np.percentile(data[column],75)\n            IQR= Q3-Q1\n            lower=Q1-(1.5* IQR)\n            upper=Q3+(1.5* IQR)\n            data.loc[:,column] =np.where(data[column].values>upper,upper,data[column].values)\n            data.loc[:,column] =np.where(data[column].values<lower,lower,data[column].values)\n    return data\n \ndf2=Outlier(df)\ndf2.columns\ndf2.head()","a3e78436":"l=[0,10,11,12,13]\nfor i in df2.iloc[:,l].columns:\n    sns.boxplot(x=df2[i],data=df2,palette='rainbow')\n    \n    plt.show()","daee8cfd":"df2['y']=np.where(df2['y']=='yes',1,0)\ndf2","dceb9bd9":"df2['y'].astype(int)\ndf2.info()","b0245cd2":"df2['y'].value_counts()","4472a10b":"df2= pd.get_dummies(data = df2, columns = ['job', 'marital', 'education', 'default', 'housing', 'loan','poutcome'] , drop_first = True)\ndf2.info()","c0adcb2d":"# heatmap \n\ncorr = df.corr()\nplt.figure(figsize=(14,14))\nsns.heatmap(corr, annot=True, fmt= '.2f',annot_kws={'size': 15}, cmap= 'coolwarm')\nplt.show()\nprint(corr)","9532b9e1":"# Plot a histogram\n\ndf2.y.hist(bins=30, alpha=0.5)\nplt.show()","430101e7":"X = df2.drop(['y','contact', 'month', 'day_of_week'] , axis = 1)\ny = df2['y']","c107632d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.30,\n                                                    random_state=101)","c8d7ddf0":"#Scaling the data\n\nfrom sklearn.preprocessing import  MinMaxScaler\n\nmc = MinMaxScaler()\n\nX_train_mc = mc.fit_transform(X_train)\n\nX_test_mc = mc.transform(X_test)","2fccb82a":"from sklearn.svm import SVC\n\nmodel=SVC()","f85d92a9":"model.fit(X_train_mc,y_train)","c9d90a33":"pred=model.predict(X_test_mc)\npred","bd56aab3":"train_pred=model.predict(X_train_mc)\ntrain_pred","eaf9a131":"from sklearn.metrics import classification_report,confusion_matrix, accuracy_score","38738cc7":"accuracy_score(y_test,pred)","32a1cf5a":"accuracy_score(y_train,train_pred)","2656ee83":"print(classification_report(y_test,pred))","1a40b117":"print(classification_report(y_train,train_pred))","f56e3db1":"print(confusion_matrix(y_test,pred))","23b728e9":"print(confusion_matrix(y_train,train_pred))","b06c5c56":"**Splitting The Data**","aee85dd8":"**Building A Model**","1b229edf":"**Reading Data**","0194486f":"**Converting the Datatypes**","617f5eef":"**Treating Outliers**","70191c63":"**Evaluating The Model**","2d3da49a":"**Importing Libraries**"}}