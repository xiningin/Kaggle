{"cell_type":{"011c32d9":"code","1b7e46b0":"code","8f876210":"code","3a096fe7":"code","ba0f7730":"code","b39defb6":"code","d58f6ea4":"code","d5f58905":"code","e9290929":"code","73a6acb3":"code","b9202024":"code","bf56b50f":"code","1dbc7ec8":"code","2ab9987e":"code","c34c7d6e":"code","22514ac6":"code","bdfc0310":"code","2b76402e":"code","26a03e39":"code","3c9fa96e":"code","4f5d8195":"code","63d4ea8c":"code","acfcdd3e":"code","869bd942":"code","d74e2a0c":"code","c073bba7":"code","887430d9":"code","e23c5694":"code","a2c1c01a":"code","370e252c":"code","90710387":"code","bd6c8cfc":"code","10cb7818":"code","f2c66d2f":"code","a07ffbda":"code","bab8ea24":"code","67a87f44":"code","abc961b8":"code","324b2b9c":"code","ce0da2cd":"code","80aba9bb":"code","4be44e2e":"code","d46e37e1":"code","675c7ee8":"code","1cdc4414":"code","84f0a2ce":"code","f5dcf38d":"code","e29ce72f":"code","e683370f":"code","e2badb9f":"code","d284505c":"code","f2608ef2":"code","afb65a7b":"code","112d1d0d":"code","cd4d1b70":"code","c5ab1c2d":"code","eb78075c":"code","5554cca2":"code","d12b93fa":"code","3e478a7a":"code","14e59cf2":"code","93ea3fff":"markdown","1f292a94":"markdown","142b5aca":"markdown","3023fa28":"markdown","911ca58f":"markdown","aa186cb8":"markdown","c01cb7d9":"markdown","4837369d":"markdown","338fa891":"markdown","212acca6":"markdown","56377aed":"markdown","a82c13c1":"markdown","12f4a173":"markdown","3cdc4c79":"markdown","f2bd2150":"markdown","cf72c282":"markdown","3782d7be":"markdown","794e2f74":"markdown","88cddb1f":"markdown","8b9eb765":"markdown","627f8168":"markdown","0b98d31f":"markdown","b4007ece":"markdown","c1641392":"markdown","d08b4638":"markdown","74f15a1a":"markdown","32dbac2d":"markdown","c8e087f6":"markdown","ff367d6c":"markdown","2604cafe":"markdown","c84c3221":"markdown","d432ec0d":"markdown","f2779076":"markdown","4f2fb3df":"markdown","af1832a9":"markdown","10538709":"markdown","ed01f8ce":"markdown","638de984":"markdown","f14fcc1a":"markdown"},"source":{"011c32d9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","1b7e46b0":"import warnings\nwarnings.filterwarnings(\"ignore\")","8f876210":"df_train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf_train.head()","3a096fe7":"df_train.drop([\"PassengerId\", \"Ticket\"], axis=1, inplace=True)\ndf_train.describe()","ba0f7730":"df_train.isnull().sum()","b39defb6":"import re\ndf_train[\"Salutations\"] = df_train[\"Name\"].str.extract(r'([A-Z]{1}[a-z]+\\.)')","d58f6ea4":"df_train[\"Salutations\"].unique()","d5f58905":"df_train[df_train[\"Salutations\"] == \"Master.\"][\"Age\"].median()","e9290929":"df_train[(df_train[\"Salutations\"] == \"Miss.\") | (df_train[\"Salutations\"] == \"Ms.\") | (df_train[\"Salutations\"] == \"Mlle.\")][\"Age\"].median()","73a6acb3":"df_train[df_train[\"Salutations\"] == \"Mr.\"][\"Age\"].median()","b9202024":"df_train[(df_train[\"Salutations\"] == \"Mrs.\") | (df_train[\"Salutations\"] == \"Mme.\")][\"Age\"].median()","bf56b50f":"master = (df_train[\"Salutations\"] == \"Master.\")\nmiss = (df_train[\"Salutations\"] == \"Miss.\") | (df_train[\"Salutations\"] == \"Ms.\") | (df_train[\"Salutations\"] == \"Mlle.\")\nmister = (df_train[\"Salutations\"] == \"Mr.\")\nmissus = (df_train[\"Salutations\"] == \"Mrs.\") | (df_train[\"Salutations\"] == \"Mme.\")","1dbc7ec8":"df_train[\"Title\"] = \"Others\"\ndf_train[\"Title\"][master] = \"Master\"\ndf_train[\"Title\"][miss] = \"Miss\"\ndf_train[\"Title\"][mister] = \"Mister\"\ndf_train[\"Title\"][missus] = \"Missus\"","2ab9987e":"df_train[\"Age\"] = df_train.groupby(\"Title\")[\"Age\"].apply(lambda x: x.fillna(x.median()))","c34c7d6e":"df_train[\"Cabin\"] = df_train[\"Cabin\"].str.extract(r'([A-Z]{1})').fillna('Z')","22514ac6":"df_train[\"Embarked\"].mode()","bdfc0310":"df_train[\"Embarked\"] = df_train[\"Embarked\"].fillna('S')","2b76402e":"df_train.info()","26a03e39":"df_train.drop([\"Name\", \"Salutations\"], axis=1, inplace=True)\ndf_train.head()","3c9fa96e":"plt.figure(figsize=(8,8))\nsns.countplot(\"Pclass\", data=df_train, hue=\"Survived\")","4f5d8195":"fig, axes = plt.subplots(nrows=1, ncols=2,figsize=(10, 6))\nax=sns.countplot(\"Sex\", data=df_train, hue=\"Survived\", ax = axes[0])\nax1=df_train[\"Sex\"].value_counts().plot.pie(autopct='%1.1f%%', ax = axes[1])","63d4ea8c":"sex = {\"male\": 0, \"female\": 1}\ndf_train[\"Sex\"] = df_train[\"Sex\"].map(sex)","acfcdd3e":"plt.figure(figsize=(8,8))\nsurvived = df_train[df_train[\"Survived\"] == 1]\nnot_survived =  df_train[df_train[\"Survived\"] == 0]\n\nsns.distplot(survived[\"Age\"], kde=False, label='Survived')\nsns.distplot(not_survived[\"Age\"], kde=False, label='Did not survive')\nplt.legend()","869bd942":"fig, axes = plt.subplots(nrows=1, ncols=2,figsize=(12, 8))\nmen = df_train[df_train[\"Sex\"] == 0]\nwomen = df_train[df_train[\"Sex\"] == 1]\n\nax = sns.distplot(women[women['Survived']==1][\"Age\"], label=\"Survived\", ax=axes[0], kde=False, bins=20)\nax1 = sns.distplot(women[women['Survived']==0][\"Age\"], label=\"Did not survive\", ax=axes[0], kde=False, bins=20)\nax.legend()\nax.set_title('Female')\n\nax = sns.distplot(men[men['Survived']==1][\"Age\"], label=\"Survived\", ax=axes[1], kde=False, bins=20)\nax1 = sns.distplot(men[men['Survived']==0][\"Age\"], label=\"Did not survive\", ax=axes[1], kde=False, bins=20)\nax.legend()\nax.set_title('Male')","d74e2a0c":"pd.qcut(df_train[df_train[\"Age\"]>8][\"Age\"], 5)","c073bba7":"age = (df_train[\"Age\"] < 8)\nage1 = (df_train[\"Age\"] >= 9) & (df_train[\"Age\"] < 21)\nage2 = (df_train[\"Age\"] >= 21) & (df_train[\"Age\"] < 28)\nage3 = (df_train[\"Age\"] >= 28) & (df_train[\"Age\"] < 30)\nage4 = (df_train[\"Age\"] >= 28) & (df_train[\"Age\"] < 39)\nage5 = (df_train[\"Age\"] >= 39)","887430d9":"df_train[\"Age\"][age] = 0\ndf_train[\"Age\"][age1] = 1\ndf_train[\"Age\"][age2] = 2\ndf_train[\"Age\"][age3] = 3\ndf_train[\"Age\"][age4] = 4\ndf_train[\"Age\"][age5] = 5","e23c5694":"plt.figure(figsize=(10, 10))\ndf_train[\"Family\"] = df_train[\"SibSp\"] + df_train[\"Parch\"]\nsurvived = df_train[df_train[\"Survived\"] == 1]\nnot_survived =  df_train[df_train[\"Survived\"] == 0]\n\nsns.distplot(survived[\"Family\"], kde=False, label=\"Survived\", bins=50)\nsns.distplot(not_survived[\"Family\"], kde=False, label=\"Did not survive\", bins=50)\nplt.legend()","a2c1c01a":"none = (df_train[\"Family\"] == 0)\nfour = (df_train[\"Family\"] >= 4)\n\ndf_train[\"Fam_Cat\"] = 1\ndf_train[\"Fam_Cat\"][none] = 0\ndf_train[\"Fam_Cat\"][four] = 2","370e252c":"plt.figure(figsize=(10, 10))\nsurvived = df_train[df_train[\"Survived\"] == 1]\nnot_survived =  df_train[df_train[\"Survived\"] == 0]\n\nsns.distplot(survived[\"Fare\"], kde=False, label='Survived', bins=100, color='green')\nsns.distplot(not_survived[\"Fare\"], kde=False, label='Did not survive', bins=100, color='red')\nplt.legend()","90710387":"pd.qcut(df_train[\"Fare\"], 6)","bd6c8cfc":"fare = (df_train[\"Fare\"] < 7.775)\nfare1 = (df_train[\"Fare\"] >= 7.775) & (df_train[\"Fare\"] < 8.662)\nfare2 = (df_train[\"Fare\"] >= 8.662) & (df_train[\"Fare\"] < 14.454)\nfare3 = (df_train[\"Fare\"] >= 14.454) & (df_train[\"Fare\"] < 26)\nfare4 = (df_train[\"Fare\"] >= 26) & (df_train[\"Fare\"] < 52.369)\nfare5 = (df_train[\"Fare\"] >= 52.369)\n\ndf_train[\"Fare\"][fare] = 0\ndf_train[\"Fare\"][fare1] = 1\ndf_train[\"Fare\"][fare2] = 2\ndf_train[\"Fare\"][fare3] = 3\ndf_train[\"Fare\"][fare4] = 4\ndf_train[\"Fare\"][fare5] = 5","10cb7818":"sns.catplot(x='Sex', y='Survived', kind='bar', data=df_train, hue='Embarked', palette='rocket', aspect=1.3)","f2c66d2f":"port = {'S': 1, 'C': 2, 'Q': 3}\ndf_train[\"Embarked\"] = df_train[\"Embarked\"].map(port)","a07ffbda":"df_train[\"Cabin\"].unique()","bab8ea24":"cabin = {\"Z\": 8, \"T\": 7, \"G\": 6, \"F\": 5, \"E\": 4, \"D\": 3, \"C\": 2, \"B\": 1, \"A\": 0}\ndf_train[\"Cabin\"] = df_train[\"Cabin\"].map(cabin)","67a87f44":"df_train.head()","abc961b8":"df = df_train.drop([\"SibSp\", \"Parch\", \"Family\"], axis=1)\ndf.head()","324b2b9c":"title = {\"Master\": 0, \"Miss\": 1, \"Mister\": 3, \"Missus\": 4, \"Others\": 5}\ndf[\"Title\"] = df[\"Title\"].map(title)\n\ndf[\"Age\"] = df[\"Age\"].astype(int)\ndf[\"Fare\"] = df[\"Fare\"].astype(int)\n\ndf[\"Pclass_Sex\"] = df[\"Pclass\"]*df[\"Sex\"]\ndf[\"Pclass_Age\"] = df[\"Pclass\"]*df[\"Age\"]\ndf[\"Pclass_Fare\"] = df[\"Pclass\"]*df[\"Fare\"]\ndf[\"Sex_Age\"] = df[\"Sex\"]*df[\"Age\"]\ndf[\"Sex_Fare\"] = df[\"Sex\"]*df[\"Fare\"]\ndf[\"Age_Fare\"] = df[\"Age\"]*df[\"Fare\"]","ce0da2cd":"df.head()","80aba9bb":"X = df.iloc[:, 1:]\ny = df.iloc[:, 0]","4be44e2e":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.2)","d46e37e1":"from xgboost import XGBClassifier\nclassifier = XGBClassifier(nthread=1, colsample_bytree=0.8, learning_rate=0.03, max_depth=4, min_child_weight=2, n_estimators=1000, subsample=0.8)\nclassifier.fit(X_train, y_train)","675c7ee8":"from sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_val)\ncm = confusion_matrix(y_val, y_pred)\nprint(cm)\naccuracy_score(y_val, y_pred)","1cdc4414":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 5)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))","84f0a2ce":"from xgboost import plot_importance\nfig, ax = plt.subplots(figsize=(20, 10))\nplot_importance(classifier, ax=ax)","f5dcf38d":"params = {\n        'min_child_weight': [1, 2],\n        'learning_rate': [0.2, 0.3, 0.02, 0.03],\n        'subsample': [0.6, 0.8, 1.0],\n        'colsample_bytree': [0.6, 0.8, 1.0],\n        'max_depth': [4, 5, 6],\n        'n_estimators': [100, 500, 750, 1000]\n        }","e29ce72f":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\ngrid = GridSearchCV(estimator=classifier, param_grid=params, scoring='accuracy', n_jobs=4, cv=5, verbose=3)\ngrid.fit(X, y)\nprint('\\n Best estimator:')\nprint(grid.best_estimator_)\nprint('\\n Best score:')\nprint(grid.best_score_)\nprint('\\n Best parameters:')\nprint(grid.best_params_)","e683370f":"df_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ndf_test.head()","e2badb9f":"df_test.isnull().sum()","d284505c":"df_test[\"Salutations\"] = df_test[\"Name\"].str.extract(r'([A-Z]{1}[a-z]+\\.)')\n\nmaster = (df_test[\"Salutations\"] == \"Master.\")\nmiss = (df_test[\"Salutations\"] == \"Miss.\") | (df_test[\"Salutations\"] == \"Ms.\") | (df_test[\"Salutations\"] == \"Mlle.\")\nmister = (df_test[\"Salutations\"] == \"Mr.\")\nmissus = (df_test[\"Salutations\"] == \"Mrs.\") | (df_test[\"Salutations\"] == \"Mme.\")\n\ndf_test[\"Title\"] = \"Others\"\ndf_test[\"Title\"][master] = \"Master\"\ndf_test[\"Title\"][miss] = \"Miss\"\ndf_test[\"Title\"][mister] = \"Mister\"\ndf_test[\"Title\"][missus] = \"Missus\"","f2608ef2":"df_test[\"Age\"] = df_test.groupby(\"Title\")[\"Age\"].apply(lambda x: x.fillna(x.median()))\ndf_test[\"Cabin\"] = df_test[\"Cabin\"].str.extract(r'([A-Z]{1})').fillna('Z')\ndf_test[\"Fare\"].median()","afb65a7b":"df_test[\"Fare\"] = df_test[\"Fare\"].fillna(14.4542)\ndf_test.head()","112d1d0d":"df_test.drop([\"Name\", \"Salutations\", \"Ticket\"], axis=1, inplace=True)\ndf_test.head()","cd4d1b70":"sex = {\"male\": 0, \"female\": 1}\ndf_test[\"Sex\"] = df_test[\"Sex\"].map(sex)\n\n\nage = (df_test[\"Age\"] < 8)\nage1 = (df_test[\"Age\"] >= 9) & (df_test[\"Age\"] < 21)\nage2 = (df_test[\"Age\"] >= 21) & (df_test[\"Age\"] < 28)\nage3 = (df_test[\"Age\"] >= 28) & (df_test[\"Age\"] < 30)\nage4 = (df_test[\"Age\"] >= 28) & (df_test[\"Age\"] < 39)\nage5 = (df_test[\"Age\"] >= 39)\n\ndf_test[\"Age\"][age] = 0\ndf_test[\"Age\"][age1] = 1\ndf_test[\"Age\"][age2] = 2\ndf_test[\"Age\"][age3] = 3\ndf_test[\"Age\"][age4] = 4\ndf_test[\"Age\"][age5] = 5\n\ndf_test[\"Family\"] = df_test[\"SibSp\"] + df_test[\"Parch\"]\nnone = (df_test[\"Family\"] == 0)\nfour = (df_test[\"Family\"] >= 4)\n\ndf_test[\"Fam_Cat\"] = 1\ndf_test[\"Fam_Cat\"][none] = 0\ndf_test[\"Fam_Cat\"][four] = 2\n\nfare = (df_test[\"Fare\"] < 7.775)\nfare1 = (df_test[\"Fare\"] >= 7.775) & (df_test[\"Fare\"] < 8.662)\nfare2 = (df_test[\"Fare\"] >= 8.662) & (df_test[\"Fare\"] < 14.454)\nfare3 = (df_test[\"Fare\"] >= 14.454) & (df_test[\"Fare\"] < 26)\nfare4 = (df_test[\"Fare\"] >= 26) & (df_test[\"Fare\"] < 52.369)\nfare5 = (df_test[\"Fare\"] >= 52.369)\n\ndf_test[\"Fare\"][fare] = 0\ndf_test[\"Fare\"][fare1] = 1\ndf_test[\"Fare\"][fare2] = 2\ndf_test[\"Fare\"][fare3] = 3\ndf_test[\"Fare\"][fare4] = 4\ndf_test[\"Fare\"][fare5] = 5\n\nport = {'S': 1, 'C': 2, 'Q': 3}\ndf_test[\"Embarked\"] = df_test[\"Embarked\"].map(port)\n\ncabin = {\"Z\": 8, \"T\": 7, \"G\": 6, \"F\": 5, \"E\": 4, \"D\": 3, \"C\": 2, \"B\": 1, \"A\": 0}\ndf_test[\"Cabin\"] = df_test[\"Cabin\"].map(cabin)\n\ntitle = {\"Master\": 0, \"Miss\": 1, \"Mister\": 3, \"Missus\": 4, \"Others\": 5}\ndf_test[\"Title\"] = df_test[\"Title\"].map(title)\n\n\ndf_test[\"Age\"] = df_test[\"Age\"].astype(int)\ndf_test[\"Fare\"] = df_test[\"Fare\"].astype(int)\n\ndf_test[\"Pclass_Sex\"] = df_test[\"Pclass\"]*df_test[\"Sex\"]\ndf_test[\"Pclass_Age\"] = df_test[\"Pclass\"]*df_test[\"Age\"]\ndf_test[\"Pclass_Fare\"] = df_test[\"Pclass\"]*df_test[\"Fare\"]\ndf_test[\"Sex_Age\"] = df_test[\"Sex\"]*df_test[\"Age\"]\ndf_test[\"Sex_Fare\"] = df_test[\"Sex\"]*df_test[\"Fare\"]\ndf_test[\"Age_Fare\"] = df_test[\"Age\"]*df_test[\"Fare\"]\n\ndf_test.head()","c5ab1c2d":"df_val = df_test.drop([\"PassengerId\", \"SibSp\", \"Parch\", \"Family\"], axis=1)\ndf_val.head()","eb78075c":"X = df.iloc[:, 1:]\ny = df.iloc[:, 0]\n\nxgb = XGBClassifier(nthread=1, colsample_bytree=1, learning_rate=0.2, max_depth=4, min_child_weight=2, n_estimators=100, subsample=0.8)\nxgb.fit(X, y)","5554cca2":"X_test = df_val\nactual_pred = xgb.predict(X_test)","d12b93fa":"df_actual = pd.DataFrame(df_test[\"PassengerId\"])\ndf_actual[\"Survived\"] = actual_pred","3e478a7a":"df_actual.head()","14e59cf2":"df_actual.to_csv('Final Predictions.csv', index=False)","93ea3fff":"Finally, let's convert Cabin categories to numbers. According to the diagram below, A is nearest to the top, hence we can assume that passengers in Cabin A have the highest chance of survival, followed by B and then C and so on. We won't analyse this as there is too much missing data to draw conclusions about the overall population of passengers.","1f292a94":"Results seem decent, but definitely can be tweaked. Let's try a Grid Search with different parameter values (the grid search algorithm will test all combinations of the parameters we specify and return the best model based on our scoring metric, which is accuracy). ","142b5aca":"Now, let's analyze the port of embarkation.","3023fa28":"![](http:\/\/cdn.britannica.com\/72\/153172-050-EB2F2D95\/Titanic.jpg)","911ca58f":"# The Challenge\n\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nIn this challenge, we ask you to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).\n\n","aa186cb8":"Next, we want to see how age affects chances of survival. This is especially important as we previously identified that there is high variance in age, that 75% of passengers are <39 years old, and there are babies and elderly onboard. We want to see how those factors are related to survival. Let's first plot the distribution of age against survival.","c01cb7d9":"Now, we want to see how each feature contributed to the prediction of our values. From the feature importance graph below, it seems that our engineered features were quite useful.","4837369d":"Now we will look at how Fare paid affects your chances of survival.","338fa891":"# Importing libraries and data","212acca6":"# Data Visualisation & Feature Engineering","56377aed":"Now, let's check our dataset before we start analysing the data.","a82c13c1":"First, we are going to deal with the missing \"Age\" data. There are a few ways to impute the data, most commonly using the mean or the median. However, the mean is easily affected by extreme values and while the median is generally a good representation of our age distribution, we want a value that can represent the different demographics of our passengers. Hence, we will use salutations (Mr, Ms, Mdm etc) as a separator for the different demographics.\n\nLet's first extract the salutations from our dataset.","12f4a173":"It is evident that females have a higher rate of survival as compared to men (65% of passengers were male and most of them did not survive). Let's convert this categorical data to numerical. 1 for female, and 0 for men.","3cdc4c79":"Now, we will manually select parameters based on commonly used values.","f2bd2150":"# Model Building and Training","cf72c282":"Awesome. Now we can see that majority of both genders age <8 has a high survival rate, women have a high survival rate between age 14 - 40, and men aged slightly <30 have the highest risk of dying. Let's translate age into a equal-sized feature column with the help of qcut function from pandas.","3782d7be":"From this, we can draw several quick observations:\n\n1. Roughly 38% of passengers survived\n\n\n2. The average passenger is around 30 years old, but there is high variance as standard deviation is >14.5. There are babies and elderly onboard as the minimum age is <1 and the oldest person onboard is 80 years old. However, most passengers (up to the 75th percentile) are <39 years old.\n\n\n3. Most people only brought 1 spouse\/sibling onboard (up to 75th percentile). However, there are a few who brought a large family (up to 8 spouse + siblings). \n\n\n4. Most people did not bring their parents or children onboard (up to 75th percentile). But again, there are a few who brought a large family (up to 6 parents + children). \n\n\n5. Most people paid a relatively low fare (lower than the mean) for their tickets (75% paid 31 dollars or less while the mean is 32.2 dollars). However, there are a few passengers who paid an exorbitant price for their tickets (up to 512 dollars), possibly indicating the presence of VIPs.","794e2f74":"Finally, we have to deal with 2 missing values in \"Embarked\". Let's just replace them with the most common value.","88cddb1f":"We will split our train data into two different sets of data. 80% of it is for training our model, 20% of it is set aside for validation (to see how our model generalizes to new data).","8b9eb765":"Next, we will combine the number of sibilings\/spouses and parents\/children to get the total number of family members onboard. Then we will take a look at how that relates to survival.","627f8168":"From here, we can see that your chances of survival is lowest when you have no family and have 4 or more family members. Let's reflect that as a feature column.","0b98d31f":"Done! Hope you enjoyed this walkthrough with me!","b4007ece":"Great. We managed to replace all missing values. Let's drop the irrelevant features in our dataset and take a final look at our clean data.","c1641392":"We will take a look at each feature and see how they relate to survival.","d08b4638":"As we can see from their median values, each salutation represents a different age group. It is also reasonable to assume that high-ranking military personnel and nobility are usually older, so we shall group them along with other uncommon titles such as Rev and Dr. Let's now create a new feature column with these categories.","74f15a1a":"Now we have to deal with the missing data for \"Cabin\". A large proportion of it is missing, but the little amount of data that we have is important as the first letter of each cabin represents the deck. 'A' is at the top, 'B' is below 'A' and so on. We will replace all missing values with 'Z' and come back to analyze this later on.","32dbac2d":"In this section, we will be using an algorithm known as eXtreme Gradient Boosting (XGBoost). It is somewhat similar to a Random Forest Classifier, but trains decision trees sequentially (one at a time) and each tree is design to rectify errors made by the previous tree through gradient descent. It is one of the most well known classification algorithms for its performance and speed.","c8e087f6":"Let's map our \"Title\" category and create a few final features for Pclass, Sex, Age and Fare as these seem to be the most important features.","ff367d6c":"From here, we can see that if you paid less, your relative chances of survival decreased. This is especially so when you paid <10, and between 10 - 20. Your chances of survival increased when you paid more than $50. Let's classify this into equal categories (like age).","2604cafe":"# Model Testing and Predictions","c84c3221":"Finally, let's work on the actual test data set and return our predictions.","d432ec0d":"Next, let's take a look at sex and see how it affects survival.","f2779076":"It is difficult to relate survival with age alone as they seem to follow the same distribution. Let's try including sex as a factor as we saw that majority of survivors were female.","4f2fb3df":"Survival rate seems to be highest if embarked from C, and uncertain if embarked from S and Q. Since there are only 3 ports, let's convert this to numeric values.","af1832a9":"# Dealing with missing values","10538709":"Let's drop all irrelevant columns and prep our data for model building.","ed01f8ce":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/8\/84\/Titanic_cutaway_diagram.png)","638de984":"From salutations alone, we managed to glean even more interesting data. It seems that there are nobility (Don, Countess and Jonkheer) and military personnel (Major, Col, Capt) onboard. There are also French equivalent of English salutations (Mme = Mrs, Mlle = Ms) and clergymen present(Rev, possibly Don). Let's further explore the salutations that are age significant (Master, Miss, Mister, Mrs).","f14fcc1a":"We will now fill in the missing values for \"Age\" according to their titles. We will use the median for each demographic as a replacement."}}