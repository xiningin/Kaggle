{"cell_type":{"76d22bf1":"code","87d673fa":"code","057e2134":"code","84696933":"code","e4a1dccc":"code","eb95ca19":"code","78ea621c":"code","5854d7d9":"code","e8132f5c":"code","274344f7":"code","4ec7cec6":"code","e9693169":"code","717c467e":"code","c383a513":"code","3ce40fdf":"code","2db9bb68":"code","b93ed519":"code","1204d1ee":"code","3f04803e":"markdown","1e616121":"markdown","8d51d040":"markdown","5035d858":"markdown","229e579b":"markdown","af16f177":"markdown","dc763816":"markdown","ab277aea":"markdown","d2f7e1d6":"markdown","517a7fe1":"markdown","f29dc97a":"markdown"},"source":{"76d22bf1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.a","87d673fa":"timesData=pd.read_csv(\"..\/input\/timesData.csv\")","057e2134":"timesData.info()","84696933":"timesData.head(10)\n","e4a1dccc":"df=timesData.iloc[0:100,:]\nimport plotly.graph_objs as go\ntrace1=go.Scatter(\n                    x=df.world_rank,\n                    y=df.total_score,\n                    mode=\"lines\",\n                    name=\"world rank\",\n                    marker={\"color\":\"rgba(178,34,34,0.8)\"},\n                    text=df.university_name)\ntrace2=go.Scatter(\n                    x=df.world_rank,\n                    y=df.research,\n                    mode= \"lines+markers\",\n                    name= \"research\",\n                    marker= dict(color=\"rgba(0,191,255,0.8)\"),\n                    text= df.university_name )\n\ndata = [trace1, trace2]\nlayout = dict(title = 'Citation and Teaching vs World Rank of Top 100 Universities',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","eb95ca19":"df2014=timesData[timesData.year==2014].iloc[:100,:]\ndf2015=timesData[timesData.year==2015].iloc[:100,:]\ndf2016=timesData[timesData.year==2016].iloc[:100,:]\n\nimport plotly.graph_objs as go\n\ntrace1=go.Scatter(\n                    x=df2014.world_rank,\n                    y=df2014.research,\n                    mode=\"markers\",name=\"2014\"\n                    ,marker=dict(color=\"rgba(139,125,107,0.8)\"),\n                    text= df2014.university_name)\n\n\ntrace2=go.Scatter(x=df2015.world_rank,\n                  y=df2015.research,\n                  name=\"2015\",\n                  marker=dict(color=\"rgba(73.54,96,1)\"),\n                  mode=\"markers\",\n                  text=df2015.university_name)\n\ntrace3=go.Scatter(x=df2016.world_rank,\n                  y=df2016.research,\n                  name=\"2016\",\n                  marker=dict(color=\"rgba(1.23,10,1)\"),\n                  mode=\"markers\",\n                  text=df2016.university_name)\n\ndata=[trace1,trace2,trace3]\n\nx=dict(title=\"Scatter Plotly\",\n            xaxis=dict(title=\"World Rank\",ticklen=5,zeroline=False),\n            yaxis=dict(title=\"Total Score\",ticklen=5,zeroline=False))\n\nfig=dict(data=data,layout=x)\niplot(fig)\n\n","78ea621c":"df2014_3=df2014[df2014.year==2014].iloc[9:13,:]\ndf2014_3\nimport plotly.graph_objs as go\n\ntrace1=go.Bar(x=df2014_3.university_name,\n              y=df2014_3.research,\n              name=\"Research\",\n              marker = dict(color=\"rgba(32,178,170,0.8)\" , line=dict(color='rgba(0,0,0)',width=1.5)),\n              text=df2014_3.country)\n\n\ntrace2=go.Bar(x=df2014_3.university_name,\n              y=df2014_3.teaching,\n              name=\"Teaching\",\n              marker=dict(color='rgba(165,42,42,0.9)',line=dict(color='rgba(0,0,0)',width=1.5)),\n             text=df2014_3.country)\n\n\ndata=[trace1,trace2]\nlayout=go.Layout(barmode=\"group\")\nfig=go.Figure(data=data,layout=layout)\niplot(fig)","5854d7d9":"df2016_3=df2016[df2016.year==2016].iloc[13:16,:]\n\nimport plotly.graph_objs as go\n\nx = df2016_3.university_name\n\ntrace1 = {\n  'x': x,\n  'y': df2014.citations,\n  'name': 'citation',\n  'type': 'bar'\n}\ntrace2 = {\n  'x': x,\n  'y': df2014.teaching,\n  'name': 'teaching',\n  'type': 'bar'\n}\ndata = [trace1, trace2];\nlayout = {\n  'xaxis': {'title': 'Top 3 universities'},\n  'barmode': 'relative',\n  'title': 'citations and teaching of top 3 universities in 2014'\n}\nfig = dict(data = data, layout = layout)\niplot(fig)","e8132f5c":"df2016 = timesData[timesData.year == 2016].iloc[:7,:]\npie1 = df2016.num_students\ndf2016.num_students= [float(each.replace(',', '.')) for each in df2016.num_students]\nlabels = df2016.university_name\n\nfig={\"data\": [\n    {\n      \"values\": df2016.num_students,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Number Of Students Rates\",\n      \"hoverinfo\":\"label+percent\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Universities Number of Students rates\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Number of Students\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)","274344f7":"df2016 = timesData[timesData.year == 2016].iloc[:20,:]\ndf2016","4ec7cec6":"# data preparation\ndf2016 = timesData[timesData.year == 2016].iloc[:20,:]\nnum_students_size  = [float(each.replace(',', '.')) for each in df2016.num_students]\ninternational_color = [float(each) for each in df2016.international]\ndata = [\n    {\n        'y': df2016.teaching, \n        'x': df2016.world_rank,\n        'mode': 'markers',\n        'marker': {\n            'color': international_color,\n            'size': num_students_size,\n            'showscale': True\n        },\n        \"text\" :  df2016.university_name    \n    }\n]\niplot(data)","e9693169":"# prepare data\nx2011 = timesData.student_staff_ratio[timesData.year == 2011]\nx2012 = timesData.student_staff_ratio[timesData.year == 2012]\n\ntrace1 = go.Histogram(\n    x=x2011,\n    opacity=0.75,\n    name = \"2011\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=x2012,\n    opacity=0.75,\n    name = \"2012\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title=' students-staff ratio in 2011 and 2012',\n                   xaxis=dict(title='students-staff ratio'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","717c467e":"# data prepararion\nx2011 = timesData.country[timesData.year == 2011]\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(x2011))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","c383a513":"# data preparation\nx2015 = timesData[timesData.year == 2015]\n\ntrace0 = go.Box(\n    y=x2015.research    ,\n    name = 'research of universities in 2015',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=x2015.citations                 ,\n    name = 'citations of universities in 2015',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","3ce40fdf":"# import figure factory\nimport plotly.figure_factory as ff\n# prepare data\ndataframe = timesData[timesData.year == 2015]\ndata2015 = dataframe.loc[:,[\"research\",\"international\", \"total_score\"]]\ndata2015[\"index\"] = np.arange(1,len(data2015)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data2015, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","2db9bb68":"trace1 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.teaching,\n    name = \"teaching\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n     mode = \"markers\"\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.income,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"income\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Income and Teaching vs World Rank of Universities'\n\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig)","b93ed519":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=dataframe.world_rank,\n    y=dataframe.research,\n    z=dataframe.citations,\n    mode='markers',\n    marker=dict(\n        size=10,# bunada bir \u015fey diyip 5 boyut yap\u0131labilir \n        color=dataframe.student_staff_ratio\n        #color='rgb(0,128,128)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","1204d1ee":"trace1 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.research,\n    name = \"research\"\n)\ntrace2 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.citations,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"citations\"\n)\ntrace3 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.income,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"income\"\n)\ntrace4 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.total_score,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"total_score\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    \n\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Research, citation, income and total score VS World Rank of Universities'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","3f04803e":"# Bubble Charts","1e616121":"# Scatter Matrix Plots","8d51d040":"# Inset Plots\n<font color='red'>\nInset Matrix = 2 plots are in one frame\n\n","5035d858":"# Scatter\n<font color='red'>\nScatter Example: total score vs world rank of top 100 universities with 2014, 2015 and 2016 years\n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * title = title of layout\n    * x axis = it is dictionary\n        * title = label of x axis\n        * ticklen = length of x axis ticks\n        * zeroline = showing zero line or not\n    * y axis = it is dictionary and same with x axis\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","229e579b":"# Pie Charts\n*************************\n**************************\n*************SES****************\n*******************************************","af16f177":"<font color='red'>\nSecond Bar Charts Example: citations and teaching of top 3 universities in 2014 (style2) \n<p>Actually, if you change only the barmode from group to relative in previous example, you achieve what we did here. However, for diversity I use different syntaxes.\n<font color='black'>\n* Import graph_objs as go\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * name = name of the plots\n    * type = type of plot like bar plot\n*     data = is a list that we add traces into it\n* layout = it is dictionary.\n    * xaxis = label of x axis\n    * barmode = bar mode of bars like grouped( previous example) or relative\n    * title = title of layout\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","dc763816":"# 3D Scatter Plot with Colorscaling\n>3D Scatter: Sometimes 2D is not enough to understand data. \n <p>Therefore adding one more dimension increase the intelligibility of the data. Even we will add color that is actually 4th dimension.\n<font color='black'>\n* go.Scatter3d: create 3d scatter plot\n* x,y,z: axis of plots\n* mode: market that is scatter\n* size: marker size\n* color: axis of colorscale\n* colorscale: actually it is 4th dimension","ab277aea":"# Box","d2f7e1d6":"# Multiple Subplots\n>Multiple Subplots: While comparing more than one features, multiple subplots can be useful.","517a7fe1":"# Bar Charts\n<font color='red'>\nFirst Bar Charts Example: citations and teaching of top 3 universities in 2014 (style1)\n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n        * line = It is dictionary. line between bars\n            * color = line color around bars\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * barmode = bar mode of bars like grouped\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","f29dc97a":"#  Line Chart\n<font color='red'>\nLine Charts Example: Citation and Teaching vs World Rank of Top 100 Universities\n<font color='black'>\n* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * title = title of layout\n    * x axis = it is dictionary\n        * title = label of x axis\n        * ticklen = length of x axis ticks\n        * zeroline = showing zero line or not\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout\n"}}