{"cell_type":{"c3467685":"code","7f730c65":"code","f38d77a6":"code","9c173335":"code","2d72bfab":"code","f8818777":"code","73e90f48":"code","8ab275e5":"code","a88f90b7":"code","25645656":"code","56837a18":"code","a35452e8":"code","0fe36301":"code","5f07f5bc":"code","8fa5b71e":"code","eaa13945":"code","b01788d2":"code","49cc6603":"code","3df5af9b":"code","e38749b0":"code","5578bea1":"code","c21decb5":"code","8e9bfeb5":"code","5bf3cf4e":"code","6a3a5e58":"code","1966da9b":"code","652f8f5b":"code","7ea89f1b":"code","b071f2ea":"code","fbb1566d":"code","48148d39":"code","2a86c2ba":"code","526efa12":"code","5721f2ae":"code","ac106345":"code","898afcb5":"code","d1c5d95b":"code","86d49b55":"code","0255ca4e":"code","b8bff18d":"code","15f1c187":"code","e525574d":"code","234450fc":"code","c2b8320f":"code","2d3ceed4":"code","b29e0c05":"code","b1cfe314":"code","27ec02ba":"code","0116d87a":"code","548fcf83":"code","553bb70d":"code","83a3cd1c":"code","747c5539":"code","1a9e4bca":"code","0ac30158":"code","a308db30":"code","7caba896":"code","e0bb9ce4":"code","d304d5ac":"code","d7c948ef":"code","df8cf86f":"code","733b85e8":"code","c7b39dee":"code","d467df9c":"code","2516628c":"code","31d46dd9":"code","005b36d7":"code","745d85d3":"code","125453a1":"code","b05f5b36":"code","28763ad6":"code","5776ad6b":"code","886fe1b6":"code","3a8a3fa2":"code","8c9ca9b0":"code","482a8fd2":"code","1dd9f93b":"code","bc9a74e0":"code","35de8013":"code","534fd7e0":"code","450f27de":"code","8c4f820b":"code","77266c82":"code","2231e0d1":"code","e4c793f3":"code","b69f4c5b":"code","4d9be396":"code","8defb9df":"code","c3dfce6b":"code","c08d2f7c":"code","82c3eb9e":"code","0e021698":"code","d25fb75a":"code","0d988d1a":"code","b3fc0f53":"code","beabe265":"code","cc13b3d3":"code","fc888929":"code","3dd15d25":"code","6c3c518d":"code","4d6fd7e5":"code","48e93ad0":"code","c5653a4c":"code","e0a66ad1":"code","bae41948":"code","facca32b":"code","f950b2d5":"code","ec49f41c":"code","57d9a3d7":"code","36031cb0":"code","18d7a666":"code","3b2e3293":"code","e4b22c0e":"code","68486b7d":"code","416448d6":"code","70533349":"code","3302b47c":"code","ea9b410d":"code","6a9b0767":"code","0604ee9a":"markdown","2e542e45":"markdown","39470fde":"markdown","08a009b6":"markdown","176924d8":"markdown","2513b5e3":"markdown","3c2fdf48":"markdown","d429133f":"markdown","4c97d0fd":"markdown","fb1db18e":"markdown","d5d31c83":"markdown","e86f17fc":"markdown","ea345baa":"markdown","433ff8a0":"markdown","ddeb6c51":"markdown","de63a1db":"markdown","fabd8231":"markdown","b8a08d69":"markdown","eee1d3f8":"markdown","a5173849":"markdown","e7931e1a":"markdown","33c637a4":"markdown","c1784f12":"markdown","707fc958":"markdown"},"source":{"c3467685":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats","7f730c65":"!ls '\/kaggle\/input\/apartment-rental-offers-in-germany'","f38d77a6":"df = pd.read_csv('\/kaggle\/input\/apartment-rental-offers-in-germany\/immo_data.csv')\ndf.head()","9c173335":"pd.set_option('display.max_columns', None)\ndf = pd.read_csv('\/kaggle\/input\/apartment-rental-offers-in-germany\/immo_data.csv')\ndf.head()","2d72bfab":"df.info()","f8818777":"df.info()","73e90f48":"df.describe()","8ab275e5":"df.isna().sum()\/len(df)","a88f90b7":"# number of null in each columns\ndf.columns[((df.isna().sum()\/len(df)) > 0.50)]","25645656":"df = df.drop(columns=df.columns[((df.isna().sum()\/len(df)) > 0.50)])\ndf.columns","56837a18":"df[df['livingSpace'] == 0.0].shape[0]","a35452e8":"df[df['livingSpace'] == 0.0].index","0fe36301":"df.shape","5f07f5bc":"df = df.drop(df[df['livingSpace'] == 0.0].index)\ndf.shape","8fa5b71e":"df[df['totalRent'] == 0.0].shape[0]","eaa13945":"df.shape","b01788d2":"df = df.drop(df[df['totalRent'] == 0.0].index)\ndf.shape","49cc6603":"df.shape","3df5af9b":"df.head()","e38749b0":"df['date'].value_counts()","5578bea1":"df = df.drop(columns=['facilities','description','livingSpaceRange','scoutId','street','streetPlain','houseNumber','date'])","c21decb5":"df.info()","8e9bfeb5":"df._get_numeric_data().mean()","5bf3cf4e":"df.fillna(df._get_numeric_data().mean(),inplace = True)","6a3a5e58":"df.isna().sum()","1966da9b":"for cols in df.columns:\n    print(df[cols].dtype)","652f8f5b":"print('col mean : ' ,df['serviceCharge'].mean())\nprint('col std : ' ,df['serviceCharge'].std())\n\nupper_range = df['serviceCharge'].mean() + 3 * df['serviceCharge'].std()\nprint('upper range : ',upper_range)\nlower_range = df['serviceCharge'].mean() - 3 * df['serviceCharge'].std()\nprint('lower range : ',lower_range)","7ea89f1b":"df[(df['serviceCharge'] > upper_range) | (df['serviceCharge'] < lower_range)]","b071f2ea":"df.shape","fbb1566d":"for cols in df.columns:\n    if df[cols].dtype == 'int64' or df[cols].dtype == 'float64':\n        upper_range = df[cols].mean() + 3 * df[cols].std()\n        lower_range = df[cols].mean() - 3 * df[cols].std()\n        \n        indexs = df[(df[cols] > upper_range) | (df[cols] < lower_range)].index\n        df = df.drop(indexs)","48148d39":"df.shape","2a86c2ba":"for cols in df.columns:\n    if df[cols].dtype == 'object' or df[cols].dtype == 'bool':\n        print('column : ',cols)\n        print(df[cols].value_counts().head(1))","526efa12":"for cols in df.columns:\n    if df[cols].dtype == 'object' or df[cols].dtype == 'bool':\n        print(df[cols].value_counts().head(1).index[0])","5721f2ae":"for cols in df.columns:\n    if df[cols].dtype == 'object' or df[cols].dtype == 'bool':\n        print('cols : {} , value : {}'.format(cols , df[cols].value_counts().head(1).index[0]))\n        df[cols].fillna(df[cols].value_counts().head(1).index[0],inplace = True)","ac106345":"df.isna().sum()","898afcb5":"for cols in df.columns:\n    if df[cols].dtype == 'object' or df[cols].dtype == 'bool':\n        print('cols : {} , unique values : {}'.format(cols,df[cols].nunique()))","d1c5d95b":"df = df.drop(columns=['firingTypes','geo_krs','regio2','regio3','geo_bln'])\ndf.shape","86d49b55":"df.info()","0255ca4e":"df['regio1'].value_counts()*100\/len(df)","b8bff18d":"def edit_regio1(x):\n    if x in ['Hamburg','Bremen','Saarland']:\n        return 'other'\n    else:\n        return x\n    \ndf['regio1_edit'] = df['regio1'].apply(edit_regio1)\ndf = df.drop(columns = ['regio1'])","15f1c187":"df['regio1_edit'].value_counts()*100\/len(df)","e525574d":"df['heatingType'].value_counts()*100 \/ len(df)","234450fc":"list(df['heatingType'].value_counts().tail(8).index)","c2b8320f":"others = list(df['heatingType'].value_counts().tail(8).index)\ndef edit_heating(x):\n    if x in others:\n        return 'other'\n    else:\n        return x\n\ndf['heatingType_edit'] = df['heatingType'].apply(edit_heating)\ndf = df.drop(columns = ['heatingType'])\ndf['heatingType_edit'].value_counts()*100 \/ len(df)","2d3ceed4":"df['condition'].value_counts()","b29e0c05":"list(df['condition'].value_counts().tail(4).index)","b1cfe314":"others = list(df['condition'].value_counts().tail(4).index)\n\ndef edit_condition(x):\n    if x in others:\n        return 'other'\n    else:\n        return x\n    \ndf['condition_edit'] = df['condition'].apply(edit_condition)\ndf = df.drop(columns=['condition'])\ndf['condition_edit'].value_counts()","27ec02ba":"df['typeOfFlat'].value_counts()","0116d87a":"list(df['typeOfFlat'].value_counts().tail(2).index)","548fcf83":"def edit_typeOfFlat(x):\n    if x in ['half_basement', 'loft']:\n        return 'half_loft'\n    else:\n        return x\n    \ndf['typeOfFlat_edit'] = df['typeOfFlat'].apply(edit_typeOfFlat)\ndf = df.drop(columns=['typeOfFlat'])\ndf['typeOfFlat_edit'].value_counts()","553bb70d":"df.shape","83a3cd1c":"df.columns","747c5539":"df['regio1_edit'].value_counts()","1a9e4bca":"df['regio1_edit'].value_counts().plot(kind='bar')","0ac30158":"sns.set(font_scale=1.4)\ndf['regio1_edit'].value_counts().plot(kind='barh', figsize=(15, 10), rot=0)\nplt.xlabel(\"Count of advertisements\", labelpad=14)\nplt.ylabel(\"Regions\", labelpad=5)\nplt.title(\"Advertisements of differents regions in Germany\", y=1.02);","a308db30":"df.numberOfFloors.value_counts()","7caba896":"sns.set(rc={'figure.figsize':(15,10)})\nsns.distplot(df['livingSpace'],kde_kws={\"label\": 'livingSpace'}, bins=20)","e0bb9ce4":"stats.normaltest(df[\"livingSpace\"])","d304d5ac":"sns.set(rc={'figure.figsize':(15,10)})\nsns.distplot(np.sqrt(df[\"livingSpace\"]),kde_kws={\"label\": 'livingSpace'}, bins=20)","d7c948ef":"stats.normaltest(np.sqrt(df[\"livingSpace\"]))","df8cf86f":"sns.set(rc={'figure.figsize':(15,10)})\nsns.distplot(np.log(df[\"livingSpace\"]),kde_kws={\"label\": 'livingSpace'}, bins=20)","733b85e8":"stats.normaltest(np.log(df[\"livingSpace\"]))","c7b39dee":"stats.normaltest(np.log10(df[\"livingSpace\"]))","d467df9c":"sns.set(rc={'figure.figsize':(15,10)})\nsns.distplot(1\/df[\"livingSpace\"],kde_kws={\"label\": 'livingSpace'}, bins=20)","2516628c":"stats.normaltest(1\/df[\"livingSpace\"])","31d46dd9":"sns.set(rc={'figure.figsize':(15,10)})\nsns.distplot(df[\"livingSpace\"]**2,kde_kws={\"label\": 'livingSpace'}, bins=20)","005b36d7":"stats.normaltest(df[\"livingSpace\"]**2)","745d85d3":"# q1.relation between living Space and totalRent\n\nstats.stats.spearmanr(df['livingSpace'],df['totalRent'])","125453a1":"# q2.relation between region1 and totalRent\n\nfstat, pval = stats.f_oneway(*[df.totalRent[df.regio1_edit == s]\nfor s in df.regio1_edit.unique()])\nprint(\"Oneway Anova totalRent ~ edit region1 F=%.2f, p-value=%E\" % (fstat, pval))","b05f5b36":"plt.figure(figsize=(25,8))\nsns.violinplot(\"regio1_edit\", \"livingSpace\", data=df)","28763ad6":"#q3  independence of having serviceCharge and havingKitchen\n\ndef edit(x):\n    if x == 0.0:\n        return 0\n    else:\n        return 1\n    \ndf['has_serviceCharge'] = df['serviceCharge'].apply(edit)\nstats.chi2_contingency(df[['has_serviceCharge',\"livingSpace\"]])","5776ad6b":"#q4 realation between having serviceCharge and livingSpace\n\nstats.pointbiserialr(df['has_serviceCharge'],df[\"livingSpace\"])","886fe1b6":"del df['has_serviceCharge']","3a8a3fa2":"#q5 in Berlin relation hasKitchen and totalRent\nberlin_df = df[df['regio1_edit'] == 'Berlin']\nberlin_df.head()","8c9ca9b0":"stats.ttest_ind(berlin_df['hasKitchen'],berlin_df['totalRent'])","482a8fd2":"#q6 test is mean of living space is 60\nstats.ttest_1samp(berlin_df['livingSpace'],popmean = 60)","1dd9f93b":"del berlin_df","bc9a74e0":"df.head()","35de8013":"df.describe()","534fd7e0":"df.info()","450f27de":"for cols in df.columns:\n    if df[cols].dtype == 'int64' or df[cols].dtype == 'float64':\n        if cols != 'livingSpace':\n            df[cols] = ((df[cols] - df[cols].mean())\/(df[cols].std()))","8c4f820b":"df.head()","77266c82":"df.describe()","2231e0d1":"corr = df.corr()","e4c793f3":"f, ax = plt.subplots(figsize=(20, 20))\n\nsns.heatmap(corr, square = True,fmt='.2f' ,annot = True)","b69f4c5b":"columns = []\nfor cols in df.columns:\n    if df[cols].dtype == 'object' or df[cols].dtype == 'bool':\n        columns.append(cols)\n        \ncolumns","4d9be396":"dummies_feature = pd.get_dummies(df[columns])\ndummies_feature.head()","8defb9df":"dummies_feature.shape","c3dfce6b":"df = pd.concat([df, dummies_feature], axis=1)\ndf.head()","c08d2f7c":"df = df.drop(columns=columns)\ndf.head()","82c3eb9e":"df.info()","0e021698":"y = df['livingSpace'].values\nx = df.drop(columns = ['livingSpace']).values\n\nprint(x.shape)\nprint(y.shape)","d25fb75a":"train_size = int(0.8 * x.shape[0])\ntrain_size","0d988d1a":"x_train = x[:train_size]\ny_train = y[:train_size]\n\nprint(x_train.shape)\nprint(y_train.shape)\n\nx_test = x[train_size:]\ny_test = y[train_size:]\n\nprint(x_test.shape)\nprint(y_test.shape)","b3fc0f53":"from sklearn.decomposition import PCA\npca = PCA(0.90)\nx_pca = pca.fit_transform(x)\nx_pca.shape","beabe265":"x_pca_train = x_pca[:train_size]\nprint(x_pca_train.shape)\nx_pca_test = x_pca[train_size:]\nprint(x_pca_test.shape)","cc13b3d3":"x_train[:,0].shape","fc888929":"# Initializes parameters \"w\" and \"b\" randomly\nnp.random.seed(42)\nb = np.random.randn(1)\nw = np.random.randn(61)\nn = x_train.shape[0]\n\n# Sets learning rate\nlr = 0.001\n\n# Defines number of epochs\nn_epochs = 500\n\ntest_error =  y_test - np.sum((w * x_test) + b , axis = 1)\ntest_mse = (test_error**2).mean()           \nprint('init MSE : ',test_mse)\n              \nfor epoch in range(n_epochs):\n    error = y_train - np.sum((w * x_train) + b , axis = 1)\n    \n    if epoch % 100 == 0:    \n        print('epoch {} , MSE : {}'.format(epoch,(error**2).mean()))\n    \n    w_grad = [0] * x_train.shape[1]\n    b_grad = 0\n    \n    for i in range(x_train.shape[1]):\n        w_grad[i] = -1 * (x_train[:,i] * error).mean()\n        w[i] = w[i] - (lr * w_grad[i])\n        \n    b_grad = -1 * error.mean()\n    b = b - (lr*b_grad)\n              \n\ntest_error = y_test - np.sum((w * x_test) + b , axis = 1)\ntest_mse = (test_error**2).mean() \nprint('Final MSE : ',test_mse)","3dd15d25":"y_pred = np.sum((w * x_test) + b , axis = 1)\ntemp = pd.DataFrame({'test':y_test,'pred':y_pred})\ntemp.head()","6c3c518d":"temp['upper_range'] = temp['test'] * 1.2\ntemp['lower_range'] = temp['test'] * 0.8\n\ntemp[(temp['upper_range'] >=temp['pred']) & (temp['pred'] >= temp['lower_range'])].shape[0] * 100\/temp.shape[0]","4d6fd7e5":"# Initializes parameters \"w\" and \"b\" randomly\nnp.random.seed(42)\nb = np.random.randn(1)\nw = np.random.randn(61)\nn = x_train.shape[0]\n\n# Sets learning rate\nlr = 0.01\n\n# Defines number of epochs\nn_epochs = 500\n\ntest_error =  y_test - np.sum((w * x_test) + b , axis = 1)\ntest_mse = (test_error**2).mean()           \nprint('init MSE : ',test_mse)\n              \nfor epoch in range(n_epochs):\n    error = y_train - np.sum((w * x_train) + b , axis = 1)\n    \n    if epoch % 100 == 0:    \n        print('epoch {} , MSE : {}'.format(epoch,(error**2).mean()))\n    \n    w_grad = [0] * x_train.shape[1]\n    b_grad = 0\n    \n    for i in range(x_train.shape[1]):\n        w_grad[i] = -1 * (x_train[:,i] * error).mean()\n        w[i] = w[i] - (lr * w_grad[i])\n        \n    b_grad = -1 * error.mean()\n    b = b - (lr*b_grad)\n              \n\ntest_error = y_test - np.sum((w * x_test) + b , axis = 1)\ntest_mse = (test_error**2).mean() \nprint('Final MSE : ',test_mse)","48e93ad0":"y_pred = np.sum((w * x_test) + b , axis = 1)\ntemp = pd.DataFrame({'test':y_test,'pred':y_pred})\ntemp.head()","c5653a4c":"temp['upper_range'] = temp['test'] * 1.2\ntemp['lower_range'] = temp['test'] * 0.8\n\ntemp[(temp['upper_range'] >=temp['pred']) & (temp['pred'] >= temp['lower_range'])].shape[0] * 100\/temp.shape[0]","e0a66ad1":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nLinear = LinearRegression()","bae41948":"Linear.fit(x_train,y_train)\nprint(Linear.coef_)\nprint(Linear.intercept_)","facca32b":"y_pred = Linear.predict(x_test)","f950b2d5":"mean_squared_error(y_pred,y_test)","ec49f41c":"temp = pd.DataFrame({'test':y_test,'pred':y_pred})\ntemp.head()","57d9a3d7":"temp['upper_range'] = temp['test'] * 1.2\ntemp['lower_range'] = temp['test'] * 0.8\n\ntemp[(temp['upper_range'] >=temp['pred']) & (temp['pred'] >= temp['lower_range'])].shape[0] * 100\/temp.shape[0]","36031cb0":"x_pca_train.shape","18d7a666":"# Initializes parameters \"w\" and \"b\" randomly\nnp.random.seed(42)\nb = np.random.randn(1)\nw = np.random.randn(x_pca_train.shape[1])\nn = x_pca_train.shape[0]\n\n# Sets learning rate\nlr = 0.01\n\n# Defines number of epochs\nn_epochs = 500\n\ntest_error =  y_test - np.sum((w * x_pca_test) + b , axis = 1)\ntest_mse = (test_error**2).mean()           \nprint('init MSE : ',test_mse)\n              \nfor epoch in range(n_epochs):\n    error = y_train - np.sum((w * x_pca_train) + b , axis = 1)\n    \n    if epoch % 100 == 0:    \n        print('epoch {} , MSE : {}'.format(epoch,(error**2).mean()))\n    \n    w_grad = [0] * x_pca_train.shape[1]\n    b_grad = 0\n    \n    for i in range(x_pca_train.shape[1]):\n        w_grad[i] = -1 * (x_pca_train[:,i] * error).mean()\n        w[i] = w[i] - (lr * w_grad[i])\n        \n    b_grad = -1 * error.mean()\n    b = b - (lr*b_grad)\n              \n\ntest_error = y_test - np.sum((w * x_pca_test) + b , axis = 1)\ntest_mse = (test_error**2).mean() \nprint('Final MSE : ',test_mse)","3b2e3293":"y_pred = np.sum((w * x_pca_test) + b , axis = 1)\ntemp = pd.DataFrame({'test':y_test,'pred':y_pred})\ntemp.head()","e4b22c0e":"temp['upper_range'] = temp['test'] * 1.2\ntemp['lower_range'] = temp['test'] * 0.8\n\ntemp[(temp['upper_range'] >=temp['pred']) & (temp['pred'] >= temp['lower_range'])].shape[0] * 100\/temp.shape[0]","68486b7d":"df.head()","416448d6":"X = df['noRooms'].values\nX.shape","70533349":"X_train = X[:train_size]\nprint(X_train.shape)\nX_test = X[train_size:]\nprint(X_test.shape)","3302b47c":"# Initializes parameters \"w\" and \"b\" randomly\nnp.random.seed(42)\nb = np.random.randn(1)\nw = np.random.randn(1)\nn = X_train.shape[0]\n\n# Sets learning rate\nlr = 0.1\n\n# Defines number of epochs\nn_epochs = 500\n\ntest_error =  y_test - ((w * X_test) + b)\ntest_mse = (test_error**2).mean()           \nprint('init MSE : ',test_mse)\nprint('init learning rate : ',lr)\n              \nfor epoch in range(n_epochs):\n    error = y_train - ((w * X_train) + b)\n    \n    if epoch % 100 == 0:    \n        print('epoch {} , MSE : {}'.format(epoch,(error**2).mean()))\n     \n    # adoptive learning rate\n    if epoch % 200 == 0:\n        lr = lr * 0.1\n        \n    \n    w_grad = 0 \n    b_grad = 0\n    \n    w_grad = -1 * (X_train * error).mean()\n    w = w - (lr * w_grad)\n        \n    b_grad = -1 * error.mean()\n    b = b - (lr*b_grad)\n              \n\ntest_error = y_test - ((w * X_test) + b)\ntest_mse = (test_error**2).mean() \nprint('Final MSE : ',test_mse)\nprint('Final learning rate : ',lr)","ea9b410d":"y_pred = (w * X_test) + b\ntemp = pd.DataFrame({'test':y_test,'pred':y_pred})\ntemp.head()","6a9b0767":"temp['upper_range'] = temp['test'] * 1.2\ntemp['lower_range'] = temp['test'] * 0.8\n\ntemp[(temp['upper_range'] >=temp['pred']) & (temp['pred'] >= temp['lower_range'])].shape[0] * 100\/temp.shape[0]","0604ee9a":"# delete columns with not appropriate value","2e542e45":"## Spearman\u2019s Rank Correlation","39470fde":"## Chi-Squared Test","08a009b6":"# delete columns without useful information","176924d8":"# Correlation Matrix","2513b5e3":"# delete columns with more than 50% null data","3c2fdf48":"# fillna categorical data","d429133f":"# reduce number of categories","4c97d0fd":"## Analysis of Variance Test (ANOVA)","fb1db18e":"# delete outlier","d5d31c83":"# See DataSet and Visualization (extra)","e86f17fc":"# split features and target","ea345baa":"## use skitlearn linear model","433ff8a0":"## use just noRooms feature","ddeb6c51":"# PCA","de63a1db":"# Regression\n\n## All Features\n\n\\begin{equation}\n\\hat{y} = w_1 * x_1 + w_2 * x_2 + \\cdots + w_{61} * x_{61} + b\n\\end{equation}\n\n\\begin{align}\n&error^{i} = \\frac{1}{2}({y_{train}}^{i} - \\hat{y}^{i})\\\\\n&\\mbox{MSE} = \\frac{1}{N} \\sum_{i = 1}{N} (error^{i})^2\\\\\n&\\mbox{MSE} = \\frac{1}{N} \\big((error^{0})^2 + (error^{1})^2 + \\cdots + (error^{N})^2 \\big)\\\\\n&\\mbox{MSE} = \\frac{1}{N} \\big((y_{train} ^{0} - (w_1 * x_1 ^{0} + \\cdots + w_{61} * x_{61} ^{0} + b))^2 + \\cdots + ((y_{train} ^{N} - (w_1 * x_1 ^{N} + \\cdots + w_{61} * x_{61} ^{N} + b))^2 \\big)\\\\\n\\end{align}\n\n\\begin{align}\n&\\frac{\\partial\\mbox{MSE}}{\\partial w_{1}} = \\frac{-2}{2N}\\big(error^{0}*{x_1}^{0} + error^{1}*{x_1}^{1} + \\cdots + error^{N}*{x_1}^{N}\\big) = \\frac{-2}{2N} \\big( \\sum_{i = 1}^{N} error^{i} * x_{1} ^{i} \\big) \\\\\n&\\frac{\\partial\\mbox{MSE}}{\\partial w_{2}} = \\frac{-2}{2N}\\big(error^{0}*{x_2}^{0} + error^{1}*{x_2}^{1} + \\cdots + error^{N}*{x_2}^{N}\\big) = \\frac{-2}{2N} \\big( \\sum_{i = 1}^{N} error^{i} * x_{2} ^{i} \\big) \\\\\n&\\vdots\\\\\n&\\frac{\\partial\\mbox{MSE}}{\\partial w_{61}} = \\frac{-2}{2N}\\big(error^{0}*{x_{61}}^{0} + error^{1}*{x_{61}}^{1} + \\cdots + error^{N}*{x_{61}}^{N}\\big) = \\frac{-2}{2N} \\big( \\sum_{i = 1}^{N} error^{i} * x_{61} ^{i} \\big) \\\\\n&\\frac{\\partial\\mbox{MSE}}{\\partial b} = \\frac{-2}{2N} \\big( \\sum_{i = 1}^{N} error^{i} \\big)\n\\end{align}\n","fabd8231":"# delete categorical features with lots of states","b8a08d69":"# convert categorical data to dummies variables","eee1d3f8":"## t-test","a5173849":"# normalizing numeric data","e7931e1a":"# Hypothesis Test","33c637a4":"## Use PCA features","c1784f12":"## Point Biserialr test","707fc958":"# fillna numeric data by mean"}}