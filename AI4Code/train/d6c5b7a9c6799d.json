{"cell_type":{"6ea7df9f":"code","12a7b998":"code","c6a80dbf":"code","625cfc5b":"code","02eadced":"code","66c877d7":"code","0917cb49":"code","4b630300":"code","6b71ae8d":"code","a1bc1801":"code","7da009dc":"code","5a932cf1":"code","fb319f59":"code","f01538f6":"code","93253a93":"code","c40a6562":"code","d1a63b3e":"code","3493cd5f":"code","cf97abb6":"code","d3adf230":"code","1c603980":"markdown","b37fa8c1":"markdown"},"source":{"6ea7df9f":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","12a7b998":"import os\nimport sys\nimport zipfile\n\nimport pandas as pd\nimport numpy as np\n\nfrom fastai import *\nfrom fastai.vision import *\n\nfrom tqdm import tqdm\n\nfrom pathlib import Path\nfrom PIL import Image","c6a80dbf":"# hide warnings\nimport warnings\nwarnings.simplefilter('ignore')","625cfc5b":"os.listdir(\"..\/input\")","02eadced":"input_dir = Path(\"..\/input\/recursion-cellular-image-classification-224-jpg\")\ninput_dir1 = Path(\"..\/input\/recursion-cellular-image-classification\")\nprint(os.listdir(input_dir))","66c877d7":"train_dir = input_dir\/\"train\/train\"\ntest_dir = input_dir\/\"test\/test\"\nprint(os.listdir(train_dir)[:3])\nprint(os.listdir(test_dir)[:3])","0917cb49":"train_csv = pd.read_csv(input_dir\/\"new_train.csv\")\ntrain_csv = train_csv[[\"filename\", \"sirna\"]]","4b630300":"test_dataset = ImageList.from_folder(input_dir\/\"test\/test\")\ntfms = get_transforms(do_flip=False)\ndata = ImageDataBunch.from_df(\n    path = input_dir,\n    df = train_csv,\n    folder = \"train\/train\",\n    valid_pct = 0.2,\n    bs = 32,\n    size = 224,\n    ds_tfms = tfms,\n    num_workers = 0\n)\ndata.add_test(test_dataset)\ndata.normalize(imagenet_stats)\nprint(data)\nprint(len(data.classes))\ndata.show_batch(rows=3, figsize=(10,10))","6b71ae8d":"learn = cnn_learner(data, models.resnet101, metrics=accuracy, model_dir=\"\/tmp\/models\")","a1bc1801":"learn.fit_one_cycle(5)","7da009dc":"class_score, y = learn.get_preds(DatasetType.Test)","5a932cf1":"sample_submission = pd.read_csv(input_dir1\/\"sample_submission.csv\")\nsample_submission.head()","fb319f59":"class_score","f01538f6":"sample_submission.id_code.values[0] in os.listdir(test_dir)","93253a93":"all_test_files = [element[:-8] for element in os.listdir(test_dir)]\nall_test_files[:5]","c40a6562":"def get_class_score_both(id_code):\n    index1 = all_test_files.index(id_code)\n    index2 = all_test_files.index(id_code, index1+1)\n    sum_class_score = class_score[index1] + class_score[index2]\n    avg_class_score = sum_class_score \/ 2\n    return(avg_class_score)","d1a63b3e":"def get_class_score_s1(id_code):\n    index1 = all_test_files.index(id_code)\n    index2 = all_test_files.index(id_code, index1+1)\n    sum_class_score = class_score[index1] + class_score[index2]\n    avg_class_score = sum_class_score \/ 2\n    return(avg_class_score)","3493cd5f":"def get_class_score_s2(id_code):\n    index1 = all_test_files.index(id_code)\n    index2 = all_test_files.index(id_code, index1+1)\n    sum_class_score = class_score[index1] + class_score[index2]\n    avg_class_score = sum_class_score \/ 2\n    return(avg_class_score)","cf97abb6":"x = list(map(get_class_score_both, sample_submission.id_code.values))\nx = torch.stack(x)\nx = x.argmax(dim=1)\nx","d3adf230":"submission  = pd.DataFrame({\n    \"id_code\": sample_submission.id_code,\n    \"sirna\": x\n})\nsubmission.to_csv(\"submission.csv\", index=False)\nsubmission[:10]","1c603980":"thanks to [this kernel](https:\/\/www.kaggle.com\/xhlulu\/recursion-2019-load-resize-and-save-images) and [this dataset](https:\/\/www.kaggle.com\/xhlulu\/recursion-cellular-image-classification-224-jpg)","b37fa8c1":"# work in progress"}}