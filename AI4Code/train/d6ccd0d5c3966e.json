{"cell_type":{"667f003e":"code","b02b136b":"code","ae06af2b":"code","dc32b60f":"code","a76a76f5":"code","02113cda":"code","09f7437e":"code","dd7a8127":"code","cf559a4b":"code","1c093088":"code","ecdec72e":"code","46cb3f26":"code","1f1c8d1f":"code","81c57459":"code","f8f0c0aa":"code","a674e442":"code","fbac93b0":"code","b6946d57":"code","f40f6267":"code","abe75a1b":"code","12c44e2f":"code","efd7c1b6":"code","843940e0":"code","008c391c":"code","c843c226":"code","b39ba603":"code","b4b49601":"code","991cd5ed":"code","65d9eea3":"code","0053372e":"code","d4aa16c5":"code","6b4f0cb7":"code","5dd2d552":"code","15516efb":"code","8cac85e5":"code","62b4efcd":"code","faed85cc":"code","b87650a2":"code","df2caf94":"code","2ca4338a":"code","a239a975":"code","09ebd5c3":"code","5eaa1bfb":"code","370c4457":"code","a8dc0813":"code","de796a1d":"code","6669f3b9":"code","3e3ba7b1":"code","c94c50d6":"code","d518c80a":"code","1a6b08bf":"code","ef850ffe":"code","b510c546":"code","9e06366a":"code","8592fd81":"code","42fdec5c":"code","0e5c71be":"code","cc85ec63":"code","358acd91":"code","00a09cb6":"code","0ce5c9bf":"code","e089288d":"code","d05708f2":"code","df28882d":"code","59ad9aa9":"code","d7945056":"code","923041de":"code","45b4d6b4":"markdown","ffdcace1":"markdown","686f26e8":"markdown","a0207fa3":"markdown","a8b10b32":"markdown","cf566b14":"markdown","db94edfe":"markdown","b8b3255d":"markdown","ba64c49a":"markdown","09131fc1":"markdown","c2aad9b2":"markdown","47efd422":"markdown","38539f0a":"markdown","27cc9ef3":"markdown","de69df68":"markdown","ff9ce3df":"markdown","6045186a":"markdown"},"source":{"667f003e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b02b136b":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","ae06af2b":"sns.color_palette('viridis')","dc32b60f":"blue = sns.color_palette('viridis')[1]\ngreen = sns.color_palette('viridis')[4]\nplt.rcParams['figure.figsize'] = (15,4)\nplt.rcParams['figure.dpi'] = 200\nplt.style.use('fivethirtyeight')","a76a76f5":"df = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')","02113cda":"df.head()","09f7437e":"df.dtypes # Default data types assigned to the columns","dd7a8127":"df.info()","cf559a4b":"df.nunique()","1c093088":"df.isnull().sum()","ecdec72e":"df.duplicated(subset='title').sum() # No duplicate records","46cb3f26":"df['date_added'] = pd.to_datetime(df['date_added']) # converting the 'date_added' column to datetype","1f1c8d1f":"df['year_added'] = df['date_added'].dt.year # getting the 'year' from the 'date_added' column\ndf['month_added'] = df['date_added'].dt.month # getting the 'month' from the 'date_added' column","81c57459":"df = df.drop(columns='show_id') # dropping the 'show_id' column","f8f0c0aa":"df.head()","a674e442":"tv_vs_movies_count = df['type'].value_counts()\ntv_vs_movies_count","fbac93b0":"plt.figure(figsize=(4,4), dpi=120)\nplt.pie(tv_vs_movies_count.values, labels=tv_vs_movies_count.index, \n        shadow=True, \n        autopct='%1.1f%%', \n        wedgeprops={'edgecolor':'black'},\n        explode=[0,0.1],\n        colors=[blue, green],\n        startangle=90,\n        textprops={'fontsize': 8}\n       )\nplt.title('Movies vs TV Shows comparison', fontsize=10);","b6946d57":"most_directions = df.loc[df['director'].notnull(), 'director'].value_counts().head(10)\nmost_directions","f40f6267":"sns.barplot(x=most_directions.values, y=most_directions.index, color=blue)\nplt.xticks(np.arange(1,20,1))\nplt.xlabel('# of directions')\nplt.ylabel('Directors')\nplt.tight_layout()\nplt.title('Most number of directions');","abe75a1b":"# For a lot of the records the country column contains multiple values as shown below","12c44e2f":"df.loc[(df['country'].notnull()) & (df['country'].str.contains(','))].head()","efd7c1b6":"# The below function which will count every occurrence of a country to get an accurate result.\n# so for example - let's say a record had 2 countries - India and USA, it will count that record as part of both.","843940e0":"tracker = {} # Dictionary to keep a count of every occurrence of a country\n\n\ndef count_country(country_str):\n    countries = country_str.split(', ')\n    \n    for country in countries:\n        if country in tracker:\n            tracker[country] += 1\n        else:\n            tracker[country] = 1","008c391c":"df.loc[df['country'].notnull(), 'country'].apply(count_country)","c843c226":"tracker # Accurate country count (including both movies and tv shows)","b39ba603":"country_count = pd.DataFrame(data=tracker.values(), index=tracker.keys(), columns=['Count']).reset_index()\ncountry_count.rename(columns={'index': 'country', 'Count': 'count'}, inplace=True)","b4b49601":"country_count_top10 = country_count.sort_values('count', ascending=False).head(10)\ncountry_count_top10","991cd5ed":"sns.barplot(x='country', y='count', data=country_count_top10, color=green)\nplt.title('Most content by country')\nplt.xlabel('Countries')\nplt.ylabel('Count of content')\nplt.tight_layout();","65d9eea3":"tracker = {} # Resetting\n\nmovies = df.loc[(df['type'] == 'Movie') & (df['country'].notnull())] # All movies where country is non null\ntv = df.loc[(df['type'] == 'TV Show') & (df['country'].notnull())]   # All TV shows where country is non null","0053372e":"movies['country'].apply(count_country)","d4aa16c5":"tracker # Count of Movies by country","6b4f0cb7":"# Converting the above dictionary into a dataframe (will later add the column for tv shows count)\n\ncontent_by_country = pd.DataFrame(data=tracker.values(), index=tracker.keys(), columns=['Count']).reset_index()\ncontent_by_country.rename(columns={'index': 'country', 'Count': 'movies'}, inplace=True)\n\ncontent_by_country","5dd2d552":"tracker = {} # Resetting\n\ntv['country'].apply(count_country)","15516efb":"tracker # Count of TV shows per country","8cac85e5":"# Adding the above dictionary to the content_by_country dataframe for a head-to-head comparison\n\ncontent_by_country['tv_shows'] = content_by_country['country'].map(tracker)","62b4efcd":"# For validation purposes, calculating the total count - this should match with the output of cell 26 (which it does)\ncontent_by_country['total_content'] = content_by_country['movies'] + content_by_country['tv_shows']\n\n\ntop_content = content_by_country.sort_values('total_content', ascending=False).head(10)\ntop_content","faed85cc":"# Visualizing the content per country based on the type of content\n\nx_ticks = np.arange(0,10,1)\nwidth=0.25\n\nplt.bar(x_ticks-width, top_content['movies'], label='Movies', width=width, color=blue)\nplt.bar(x_ticks, top_content['tv_shows'], label='TV Shows', width=width, color=green)\n\nplt.xticks(ticks=x_ticks-(width\/2), labels=top_content.country)\nplt.title('Content comparision')\n\nplt.legend();\n","b87650a2":"movies = df.loc[df['type'] == 'Movie'] # All records with type 'movies'","df2caf94":"len(movies) # Total records ","2ca4338a":"movies['duration'].str.contains('min').sum() # All records have time in 'mins'","a239a975":"movies['duration'] = pd.to_numeric(movies['duration'].str.replace(' min', '')) # removing the string 'mins'\n#and converting to int type","09ebd5c3":"movies.head(2)","5eaa1bfb":"sns.histplot(data=movies, x='duration', bins=np.arange(0,300,20), kde=True)\nplt.xticks(ticks=np.arange(0,300,20))\nplt.title('Movie Duration Distribution')\nplt.ylabel('# of Movies')\nplt.xlabel('Duration in minutes')\nplt.tight_layout();","370c4457":"tv_shows = df.loc[df['type'] == 'TV Show'] # All records with type 'TV Show'","a8dc0813":"len(tv_shows['duration']) # Total records with type 'TV Show'","de796a1d":"tv_shows['duration'].str.contains('Season').sum() # Duration for all TV Shows is measured in Seasons","6669f3b9":"tv_shows['duration'].value_counts()","3e3ba7b1":"plt.figure(figsize=(15,6), dpi=200)\n\nsns.countplot(data=tv_shows, x='duration', order=tv_shows['duration'].value_counts().index, color=green);\nplt.xticks(rotation=90);\n\nplt.title(\"TV Shows duration's Distribution\")\nplt.ylabel('# of TV Shows')\nplt.xlabel('Duration in Seasons')\nplt.tight_layout();","c94c50d6":"df['year_added'].value_counts().sort_index(ascending=False)","d518c80a":"past_10_years = df.loc[df['year_added'] >= 2015]\n\nticks = sorted(list(past_10_years['year_added'].value_counts().index))\nlabels = [int(tick) for tick in ticks]\n\nsns.countplot(data=past_10_years, x='year_added', hue='type', palette='viridis')\nplt.xticks(ticks=np.arange(0,7,1), labels=labels)\nplt.xlabel('Content added')\nplt.ylabel('Year added')\nplt.legend(loc=(\"upper left\"), ncol=2)\nplt.title('Content added in past 5 years');\n","1a6b08bf":"ratings = df.loc[df['rating'].notnull()]\nratings.head(2)","ef850ffe":"sns.countplot(data=ratings, x='rating', hue='type', palette='viridis')\nplt.legend(loc='upper right')\nplt.title('Rating categorization for movies\/tv shows')\nplt.xlabel('Rating')\nplt.ylabel('Movies\/TV Shows')\nplt.tight_layout();","b510c546":"movies.head(2)","9e06366a":"genre_bucket = {}\n\ndef count_genres(genres):\n    genres_list = genres.split(', ')\n    \n    for genre in genres_list:\n        if genre in genre_bucket:\n            genre_bucket[genre] += 1\n        else:\n            genre_bucket[genre] = 1\n","8592fd81":"movies['listed_in'].apply(count_genres)","42fdec5c":"genre_bucket","0e5c71be":"most_popular_movie_genres = pd.DataFrame(genre_bucket.values(), index=genre_bucket.keys(), columns=['count'])\nmost_popular_movie_genres = most_popular_movie_genres.reset_index()\n\nmost_popular_movie_genres.rename(columns={'index': 'genre'}, inplace=True)","cc85ec63":"most_popular_movie_genres = most_popular_movie_genres.sort_values('count', ascending=False)\nmost_popular_movie_genres.head()","358acd91":"plt.figure(figsize=(15,8), dpi=150)\nsns.barplot(data=most_popular_movie_genres, y='genre', x='count')\nplt.title('Most popular movie genres')\nplt.ylabel('Movie Genres')\nplt.xlabel('');","00a09cb6":"tv_shows.head(2)","0ce5c9bf":"genre_bucket = {} # Resetting","e089288d":"tv_shows['listed_in'].apply(count_genres)","d05708f2":"genre_bucket","df28882d":"most_popular_tv_genres = pd.DataFrame(genre_bucket.values(), index=genre_bucket.keys(), columns=['count'])\nmost_popular_tv_genres = most_popular_tv_genres.reset_index()\n\nmost_popular_tv_genres.rename(columns={'index': 'genre'}, inplace=True)","59ad9aa9":"most_popular_tv_genres = most_popular_tv_genres.sort_values('count', ascending=False)\nmost_popular_tv_genres.head()","d7945056":"plt.figure(figsize=(15,8), dpi=150)\nsns.barplot(data=most_popular_tv_genres, y='genre', x='count')\nplt.title('Most popular tv show genres')\nplt.ylabel('TV Show Genres')\nplt.xlabel('');","923041de":"# If you have come this far, I would really appreciate if you could leave a constructive feedback in the comments below!","45b4d6b4":"Among the Top 10 countries with the most content on Netflix only Japan and South Korea have more TV shows than Movies.","ffdcace1":"### Most popular genre in Movies and TV Shows","686f26e8":"Raul Campos, Jan Suter are the most popular directors based on the content available on Netflix","a0207fa3":"Most of the Movies and TV Shows belong to the TV-MA category, followed by TV-14 rating.","a8b10b32":"The 'International TV Shows' is by far the most popular genre in TV Shows on Netflix. 'TV Dramas' comes in second place\nfollowed by 'TV Comedies' and 'Crime TV Shows' in third and fourth place.","cf566b14":"69.1% of the content on Netflix are 'Movies' while just 30.9% are 'TV shows'.","db94edfe":"### Distribution of duration for Movies and TV Shows","b8b3255d":"### Most number of directions","ba64c49a":"The Most popular movie genre is 'International Movies' followed by 'Drama' and then 'Comedies'.","09131fc1":"### Trends of TV Shows and Movies added in past 5 years","c2aad9b2":"Most of the movies have duration between 80 and 100 mins followed by 100 to 120 mins.","47efd422":"### Analyzing the 'Rating' field","38539f0a":"Most of the content on Netflix is from USA, followed by India.","27cc9ef3":"#### Breakdown of the above count on 'Movies' and 'TV Shows'","de69df68":"### Most content per country","ff9ce3df":"Most of the TV Shows on Netflix have only lasted a single season","6045186a":"### Count of TV shows vs Movies on Netflix"}}