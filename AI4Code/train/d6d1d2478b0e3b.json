{"cell_type":{"e4047733":"code","fb4c05b8":"code","5f3871ca":"code","4e620cf0":"code","dfc3f40d":"code","e05e96e2":"code","f0aac553":"code","1a2f2426":"code","76ac1312":"code","17cec06b":"code","407d0c0c":"code","bdb381c9":"code","6f841a85":"code","abbbee6a":"code","5994ff44":"code","4c1083e8":"code","eb2dff2a":"code","191ecbab":"code","a442a62b":"code","49c92f6a":"code","d9840e4e":"code","0f904d85":"markdown","e59d2e75":"markdown","b83563c4":"markdown","443ff356":"markdown","f7ace93c":"markdown","e8a125a8":"markdown","18a46b33":"markdown","a0c800f7":"markdown"},"source":{"e4047733":"# import some libaries\nimport numpy as np\nimport pandas as pd\nimport os\nimport time\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\nimport tensorflow as tf\nfrom sklearn import metrics\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom sklearn.model_selection import train_test_split\nfrom nltk.tokenize import word_tokenize\nfrom scikitplot.metrics import plot_confusion_matrix\n\nfrom keras.optimizers import Adam\nfrom keras.models import Model\nfrom keras import backend as K\nfrom keras.engine.topology import Layer\nfrom keras import initializers, regularizers, constraints, optimizers, layers\nfrom keras.layers import Add, Bidirectional, CuDNNLSTM, Dense, Input, Embedding,merge, BatchNormalization, Reshape\nfrom keras.models import Model","fb4c05b8":"# load train and test datasets\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\nprint(\"Train datasets shape:\", train.shape)\nprint(\"Test datasets shape:\", test.shape)","5f3871ca":"# Here I will split the data to train and validation data\ntrain_data, validation_data = train_test_split(train, test_size=.1, random_state=1234)\n\n# Here I will use Tokenizer to extract the keyword vector as baseline\n# I will use train data to fit the Tokenizer, then use this Tokenizer to extract the validation data\nmax_length = 100\nmax_features = 50000\ntoken = Tokenizer(num_words=max_features)\ntoken.fit_on_texts(list(np.asarray(train_data.question_text)))\nxtrain = token.texts_to_sequences(np.asarray(train_data.question_text))\nxvalidate = token.texts_to_sequences(np.asarray(validation_data.question_text))\nxtest = token.texts_to_sequences(np.asarray(test.question_text))\n\n# Because Tokenizer will split the sentence, for some sentence are smaller,\n# so we have to pad the missing position\nxtrain = pad_sequences(xtrain, maxlen=max_length)\nxvalidate = pad_sequences(xvalidate, maxlen=max_length)\nxtest = pad_sequences(xtest, maxlen=max_length)\n\nytrain = train_data.target\nyvaliate = validation_data.target","4e620cf0":"# Here I write a helper function to evaluate model\ndef evaluate(y, pred):\n    f1_list = list()\n    thre_list = np.arange(0.1, 0.501, 0.01)\n    for thresh in thre_list:\n        thresh = np.round(thresh, 2)\n        f1 = metrics.f1_score(y, (pred>thresh).astype(int))\n        f1_list.append(f1)\n        print(\"F1 score at threshold {0} is {1}\".format(thresh, f1))\n    #return f1_list\n    plot_confusion_matrix(y, np.array(pd.Series(pred.reshape(-1,)).map(lambda x:1 if x>thre_list[np.argmax(f1_list)] else 0)))\n    print('Best Threshold: ',thre_list[np.argmax(f1_list)])\n    return thre_list[np.argmax(f1_list)]","dfc3f40d":"class Attention(Layer):\n    def __init__(self, step_dim,\n                 W_regularizer=None, b_regularizer=None,\n                 W_constraint=None, b_constraint=None,\n                 bias=True, **kwargs):\n        self.supports_masking = True\n        self.init = initializers.get('glorot_uniform')\n\n        self.W_regularizer = regularizers.get(W_regularizer)\n        self.b_regularizer = regularizers.get(b_regularizer)\n\n        self.W_constraint = constraints.get(W_constraint)\n        self.b_constraint = constraints.get(b_constraint)\n\n        self.bias = bias\n        self.step_dim = step_dim\n        self.features_dim = 0\n        super(Attention, self).__init__(**kwargs)\n\n    def build(self, input_shape):\n        assert len(input_shape) == 3\n\n        self.W = self.add_weight((input_shape[-1],),\n                                 initializer=self.init,\n                                 name='{}_W'.format(self.name),\n                                 regularizer=self.W_regularizer,\n                                 constraint=self.W_constraint)\n        self.features_dim = input_shape[-1]\n\n        if self.bias:\n            self.b = self.add_weight((input_shape[1],),\n                                     initializer='zero',\n                                     name='{}_b'.format(self.name),\n                                     regularizer=self.b_regularizer,\n                                     constraint=self.b_constraint)\n        else:\n            self.b = None\n\n        self.built = True\n\n    def compute_mask(self, input, input_mask=None):\n        return None\n\n    def call(self, x, mask=None):\n        features_dim = self.features_dim\n        step_dim = self.step_dim\n\n        eij = K.reshape(K.dot(K.reshape(x, (-1, features_dim)),\n                        K.reshape(self.W, (features_dim, 1))), (-1, step_dim))\n\n        if self.bias:\n            eij += self.b\n\n        eij = K.tanh(eij)\n\n        a = K.exp(eij)\n\n        if mask is not None:\n            a *= K.cast(mask, K.floatx())\n\n        a \/= K.cast(K.sum(a, axis=1, keepdims=True) + K.epsilon(), K.floatx())\n\n        a = K.expand_dims(a)\n        weighted_input = x * a\n        return K.sum(weighted_input, axis=1)\n\n    def compute_output_shape(self, input_shape):\n        return input_shape[0],  self.features_dim","e05e96e2":"em_file = '..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt'\ndef get_coefs(word, *arr):\n    return word, np.asarray(arr, dtype='float32')\nembedding_index = dict(get_coefs(*d.split(' ')) for d in open(em_file))\n\nall_embs = np.stack(embedding_index.values())\nem_mean, em_std = all_embs.mean(), all_embs.std()\nem_size = all_embs.shape[1]\n\nword_index = token.word_index\nnb_words = min(max_features, len(word_index))\nem_matrix = np.random.normal(em_mean, em_std, (nb_words, em_size))\n# loop for every word\nfor word, i in word_index.items():\n    if i >= max_features: continue\n    em_v = embedding_index.get(word)\n    if em_v is not None:\n        em_matrix[i] = em_v\n    ","f0aac553":"\"\"\"Here is attention model parameters\"\"\"\n# You can tune attention layers numbers and parallism attention\natten_layers = 1    # How many attention block to be used.\nnum_att = 10        # How many parallism attention layer to be used.\nlstm_units = 128    # How many LSTM units to be used.","1a2f2426":"### Here I will build a Attention model\ndef attention_model(em_matrix, atten_layers=atten_layers, num_att=num_att, lstm_units=lstm_units):\n    inp = Input(shape=(max_length, ))\n    x = Embedding(max_features, em_matrix.shape[1], weights=[em_matrix], trainable=False)(inp)\n    x = Bidirectional(CuDNNLSTM(lstm_units, return_sequences=True))(x)\n\n    # Here I build a bisic Attention block\n    def attention_block(layer, atten_len=max_length, num_multi=num_att, dense_units=lstm_units*2):\n        atten_list = []\n        for _ in range(num_multi):\n            atten_list.append(Attention(atten_len)(layer))\n        add_layer = Add()(atten_list)\n        add_layer = BatchNormalization()(add_layer)\n        dense_layer = Dense(dense_units, activation='relu')(add_layer)\n        return Add()([add_layer, dense_layer])   # Residual add layer\n\n    for j in range(atten_layers):\n        if j ==0:\n            x = attention_block(x)\n        else:\n            x = Reshape((lstm_units*2, 1))(x)\n            x = attention_block(x, atten_len=lstm_units*2)\n    \n    x = Dense(64, activation='relu')(x)\n    out = Dense(1, activation='sigmoid')(x)\n\n    model = Model(inp, out)\n\n    model.summary()\n\n    model.compile(loss='binary_crossentropy', metrics=['accuracy'], optimizer='adam')\n\n    return model","76ac1312":"# I build this model based on wide&deep model structure idea\nfrom keras.layers import concatenate\ndef att_new_model(em_matrix, atten_layers=atten_layers, num_att=num_att, lstm_units=lstm_units):\n    inp = Input(shape=(max_length, ))\n    x = Embedding(max_features, em_matrix.shape[1], weights=[em_matrix], trainable=False)(inp)\n    x = Bidirectional(CuDNNLSTM(lstm_units, return_sequences=True))(x)\n\n    # Here I build a bisic Attention block\n    def attention_block(layer, atten_len=max_length, num_multi=num_att, dense_units=lstm_units*2):\n        add_layer_list = []\n        for j in range(num_att):\n            atten_list = list()\n            for _ in range(num_multi):\n                atten_list.append(Attention(atten_len)(layer))\n            add_layer_list.append(Add()(atten_list))\n        add_layer = concatenate(add_layer_list)\n        add_layer = BatchNormalization()(add_layer)\n        dense_layer = Dense(dense_units, activation='relu')(add_layer)\n        return dense_layer\n        # return Add()([add_layer, dense_layer])   # Residual add layer\n\n#     for j in range(atten_layers):\n#         if j ==0:\n#             x = attention_block(x)\n#         else:\n#             x = Reshape((lstm_units*2, 1))(x)\n#             x = attention_block(x, atten_len=lstm_units*2)\n    x = attention_block(x)\n    x = Dense(64, activation='relu')(x)\n    out = Dense(1, activation='sigmoid')(x)\n\n    model = Model(inp, out)\n\n    model.summary()\n\n    model.compile(loss='binary_crossentropy', metrics=['accuracy'], optimizer='adam')\n\n    return model","17cec06b":"# model = att_new_model(em_matrix=em_matrix, atten_layers=10, lstm_units=64, num_att=10)\n# model.fit(xtrain, ytrain, epochs=2, batch_size=512, validation_data=(xvalidate, yvaliate), verbose=1)\n\n# pred_vali_glove = model.predict(xvalidate, batch_size=1024)\n# best_thre = evaluate(yvaliate, pred_vali_glove)\n\n# pred_test_glove = model.predict(xtest)","407d0c0c":"model = attention_model(em_matrix=em_matrix, atten_layers=1, lstm_units=64, num_att=10)\nmodel.fit(xtrain, ytrain, epochs=2, batch_size=512, validation_data=(xvalidate, yvaliate), verbose=1)\n\npred_vali_glove = model.predict(xvalidate, batch_size=1024)\nbest_thre = evaluate(yvaliate, pred_vali_glove)\n\npred_test_glove = model.predict(xtest)","bdb381c9":"del embedding_index, all_embs, word_index, em_matrix\nimport gc\ngc.collect()\ntime.sleep(10)","6f841a85":"# em_file = '..\/input\/embeddings\/wiki-news-300d-1M\/wiki-news-300d-1M.vec'\n# def get_coefs(word, *arr):\n#     return word, np.asarray(arr, dtype='float32')\n# embedding_index = dict(get_coefs(*o.split(\" \")) for o in open(em_file) if len(o)>100)\n\n# all_embs = np.stack(embedding_index.values())\n# em_mean, em_std = all_embs.mean(), all_embs.std()\n# em_size = all_embs.shape[1]\n\n# word_index = token.word_index\n# nb_words = min(max_features, len(word_index))\n# em_matrix = np.random.normal(em_mean, em_std, (nb_words, em_size))\n# # loop for every word\n# for word, i in word_index.items():\n#     if i >= max_features: continue\n#     em_v = embedding_index.get(word)\n#     if em_v is not None:\n#         em_matrix[i] = em_v","abbbee6a":"# model = attention_model(em_matrix=em_matrix)\n# model.fit(xtrain, ytrain, epochs=2, batch_size=512, validation_data=(xvalidate, yvaliate), verbose=1)\n\n# pred_vali_wiki = model.predict(xvalidate, batch_size=1024)\n# best_thre = evaluate(yvaliate, pred_vali_wiki)\n\n# pred_test_wiki = model.predict(xtest)","5994ff44":"# del embedding_index, all_embs, word_index, em_matrix\n# gc.collect()\n# time.sleep(10)","4c1083e8":"em_file = '..\/input\/embeddings\/paragram_300_sl999\/paragram_300_sl999.txt'\ndef get_coefs(word, *arr):\n    return word, np.asarray(arr, dtype='float32')\nembedding_index = dict(get_coefs(*o.split(\" \")) for o in open(em_file, encoding=\"utf8\", errors='ignore') if len(o)>100)\n\nall_embs = np.stack(embedding_index.values())\nem_mean, em_std = all_embs.mean(), all_embs.std()\nem_size = all_embs.shape[1]\n\nword_index = token.word_index\nnb_words = min(max_features, len(word_index))\nem_matrix = np.random.normal(em_mean, em_std, (nb_words, em_size))\n# loop for every word\nfor word, i in word_index.items():\n    if i >= max_features: continue\n    em_v = embedding_index.get(word)\n    if em_v is not None:\n        em_matrix[i] = em_v\n    \n","eb2dff2a":"model = attention_model(em_matrix=em_matrix)\nmodel.fit(xtrain, ytrain, epochs=2, batch_size=512, validation_data=(xvalidate, yvaliate), verbose=1)\n\npred_vali_para = model.predict(xvalidate, batch_size=1024)\nbest_thre = evaluate(yvaliate, pred_vali_para)\n\npred_test_para = model.predict(xtest)","191ecbab":"del embedding_index, all_embs, word_index, em_matrix\ngc.collect()\ntime.sleep(10)","a442a62b":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\n\nmodel_num = 2\n\npred_data = np.empty([len(pred_vali_para), model_num])\npred_data[:, 0] = pred_vali_glove.reshape(-1, )\n#pred_data[:, 1] = pred_vali_wiki.reshape(-1, )\npred_data[:, 1] = pred_vali_para.reshape(-1, )\n\nlr.fit(pred_data, yvaliate)\n\nweights = lr.coef_\n\nsub_pred_weighted = np.sum([pred_data[:, i]*weights[i] for i in range(model_num)], axis=0)\nbest_thre = evaluate(yvaliate ,sub_pred_weighted)","49c92f6a":"# GET different model prediction result on test datasets\nsub_data = np.empty([len(xtest), model_num])\nsub_data[:, 0] = pred_test_glove.reshape(-1, )\n# sub_data[:, 1] = pred_test_wiki.reshape(-1, )\nsub_data[:, 1] = pred_test_para.reshape(-1, )","d9840e4e":"\n#sub_pred = 0.1 * pred_lstm_glove + 0.2*pred_bidi_lstm_glove + 0.1*pred_lstm_wiki + 0.2*pred_bidi_lstm_wiki+0.1*pred_lstm_para+0.3*pred_lstm_para\n# According to Linear Regression model result with different weights multiply with prediction.\nsub_pred = np.sum([sub_data[:, i]*weights[i] for i in range(model_num)], axis=0)\nsub_pred = (sub_pred > best_thre).astype(int)\n\nsub_df = pd.DataFrame({'qid':test.qid.values})\nsub_df['prediction'] = sub_pred\nsub_df.to_csv('submission.csv', index=False)\n","0f904d85":"#### Wiki-news","e59d2e75":"#### This kernel is based on Google paper \"Attention is all you need\". Original paper dosen't use any LSTM and CNN, but HERE I also add one Bidirectional-LSTM layer, because I find that LSTM is great for this datasets.\nThanks to this kernel for Attention layer implement: https:\/\/www.kaggle.com\/shujian\/different-embeddings-with-attention-fork-fork, you should also need to check it out.\nYou can also check out original paper: https:\/\/arxiv.org\/abs\/1706.03762\n#### Here we go!","b83563c4":"#### Because I find that no matter what deep learning model used, that for this wiki embedding just is bad! Not use this embedding for ensemble model!","443ff356":"#### Paragram","f7ace93c":"#### This is Attention layer implement.","e8a125a8":"#### Submit result.","18a46b33":"#### Here is Glove embeddings.","a0c800f7":"#### Here I use a Linear Regression model to fit on this three model prediction on validation datasets to get a proper weights of different model."}}