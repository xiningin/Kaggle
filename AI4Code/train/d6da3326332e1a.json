{"cell_type":{"6c843e7e":"code","660322b2":"code","b59faa67":"code","de64dd0a":"code","d1f8423d":"code","e0de1ff4":"code","6e6f0e2a":"code","8d80795e":"code","74d1c57b":"code","89ca05dc":"code","b1b8cf54":"code","3a8c88f3":"code","d34d7137":"code","0cd5cbbb":"code","26ae8a22":"code","af27df4b":"code","8513588f":"code","93f9b33a":"code","866456f3":"code","d1f86a43":"code","731ce0c8":"code","20f05ae0":"code","47ad8182":"code","da342226":"code","a1311bd4":"markdown","3063feb2":"markdown","fff10abb":"markdown","ee365dd9":"markdown","71206b61":"markdown","86975bef":"markdown","8c813a11":"markdown"},"source":{"6c843e7e":"import torch\nimport torchvision\nfrom  torchvision.datasets import ImageFolder \nfrom torchvision import transforms as T\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.utils.data import DataLoader \n","660322b2":"std=torch.Tensor([0.4687, 0.4667, 0.4540])\nmean=torch.Tensor([0.2792, 0.2717, 0.2852])\nt_trans=T.Compose([T.Resize((64,64)),\n                 T.RandomCrop((64,64),padding=4,padding_mode='reflect'),\n                 T.RandomHorizontalFlip(p=0.5),\n                 T.RandomRotation(degrees=(0, 180)),\n                 T.ToTensor(),\n                 T.Normalize(mean,std)])\nv_trans=T.Compose([T.Resize((64,64)),\n                   T.ToTensor(),\n                   T.Normalize(mean,std)])\ntrain_set=ImageFolder('..\/input\/sports-classification\/train',transform=t_trans)\nvalid_set=ImageFolder('..\/input\/sports-classification\/valid',transform=v_trans)\ntest_set=ImageFolder(\"..\/input\/sports-classification\/test\",transform=v_trans)","b59faa67":"print(len(valid_set))\nvalid_set=torch.utils.data.ConcatDataset([test_set, valid_set])\nprint(len(valid_set),len(test_set))","de64dd0a":"print(len(train_set),len(valid_set))","d1f8423d":"batch_size=256\ntrain_ld=DataLoader(train_set,batch_size,shuffle=True,num_workers=2,pin_memory=True)\nval_ld=DataLoader(train_set,batch_size*2,num_workers=2,pin_memory=True)","e0de1ff4":"def denorm(img):\n    return img*std[0]+mean[0]","6e6f0e2a":"import matplotlib.pyplot as plt\nfrom torchvision.utils import make_grid\n\ndef show_batch(loader):\n    for img,_ in loader:\n        plt.figure(figsize=(16,16))\n        plt.imshow(denorm(make_grid(img,16)).permute(1,2,0))\n        break\n\nshow_batch(train_ld)","8d80795e":"def get_default_device():\n  if torch.cuda.is_available():\n    return torch.device('cuda')\n  return torch.device('cpu')\n\ndef to_device(data,device):\n  return data.to(device,non_blocking=True)\n\nclass DeviceDataLoader():\n  def __init__(self,data,device):\n    self.data=data\n    self.device=device\n  \n  def __iter__(self):\n    for batch in self.data:\n      x,y=batch\n      yield to_device(x,self.device),to_device(y,self.device)\n  def __len__(self):\n    return len(self.data)","74d1c57b":"device=get_default_device()\ndevice","89ca05dc":"train=DeviceDataLoader(train_ld,device)\nval=DeviceDataLoader(val_ld,device)","b1b8cf54":"print(train.device,val.device)","3a8c88f3":"def acc_cal(preds,y):\n  \n  _,output=torch.max(preds,dim=1)\n  return torch.sum(y==output)\/len(output)\n\nclass ImageClassificationBase(nn.Module):\n  \n  def train_step(self,x,y):\n    preds=self(x)\n    loss=F.cross_entropy(preds,y)\n    return loss\n\n  def val_step(self,x,y):\n    preds=self(x)\n    loss=F.cross_entropy(preds,y)\n    acc=acc_cal(preds,y)\n    return {'val_acc':acc.item(),'val_loss':loss}","d34d7137":"from torchvision import models\n\nclass SportsClassification(ImageClassificationBase):\n    def __init__(self,output_size,pretrained=True):\n        super().__init__()\n        self.model=models.resnet50(pretrained=pretrained)\n        #split\n        self.model.fc=nn.Linear(self.model.fc.in_features,output_size)\n        \n    def forward(self,x):\n        out=self.model(x)\n        return out","0cd5cbbb":"from tqdm.notebook import tqdm\ndef print_get_acc_loss(epoch,acc_list,loss_list):\n  acc=sum(acc_list)\/len(acc_list)\n  loss=sum(loss_list)\/len(loss_list)\n  print(\"Epoch[{}]: vall_acc:{}  val_loss:{}\".format(epoch,acc,loss))\n  return {'val_loss':loss,'val_acc':acc}\n\ndef fit(model,epoch_size,max_lr,train_loader,val_loader,weight_decay=0.01,\n        grad_clip=None,opt_func=torch.optim.SGD):\n  torch.cuda.empty_cache()\n  opt=opt_func(model.parameters(),max_lr,weight_decay=weight_decay)\n  lr_schedule=torch.optim.lr_scheduler.OneCycleLR(opt,max_lr,epochs=epoch_size,\n                                                  steps_per_epoch=len(train_loader))\n  history=[]\n  for epoch  in range(epoch_size):\n    acc_list=[]\n    loss_list=[]\n    #train\n    model.train()\n    for x,y in tqdm(train_loader):\n      loss=model.train_step(x,y)\n      loss.backward()\n      \n      if grad_clip:\n        nn.utils.clip_grad_value_(model.parameters(),grad_clip)\n\n      opt.step()\n      opt.zero_grad()\n      lr_schedule.step()\n    model.eval()\n    for x,y in tqdm(val_loader):\n      with torch.no_grad():\n        values=model.val_step(x,y)\n      acc_list.append(values['val_acc'])\n      loss_list.append(values['val_loss'])\n    history.append(print_get_acc_loss(epoch,acc_list,loss_list))","26ae8a22":"output_size=len(train_set.classes)\nmodel=SportsClassification(output_size)\nto_device(model,device)","af27df4b":"#def fit(model,epoch_size,max_lr,train_loader,val_loader,weight_decay=0.01,\n#        grad_clip=None,opt_func=torch.optim.SGD):\nhistory=[]\nepoch=30\nlr=0.001\nweight_decay=1e-4\ngrad_clip=0.1\nopt=torch.optim.Adam\nhistory=fit(model,epoch,lr,train,val,weight_decay,grad_clip,opt)","8513588f":"lr=0.0001\nepoch=20\nhistory=fit(model,epoch,lr,train,val,weight_decay,grad_clip,opt)","93f9b33a":"test_ld=DataLoader(test_set,batch_size*2,pin_memory=True,num_workers=2)\ntest=DeviceDataLoader(test_ld,device)","866456f3":"len(test_set.classes)","d1f86a43":"#prediction \ndef make_pred(data,i,model):\n  img, label = data[i]\n  img=to_device(img.unsqueeze(0),device)\n  with torch.no_grad():\n    probs=model(img)\n  _,pred=torch.max(probs,dim=1)\n  pred=data.classes[pred.item()]\n  return {'label':data.classes[label],'prediction':pred}\n","731ce0c8":"import random\nimport numpy as np\ndef plot_preds(test_set):\n    rand_list = random.sample(range(1, len(test_set)), 16)\n    fig=plt.figure(figsize=(20,16))\n    axis=1\n    for i in rand_list:\n      pred=make_pred(test_set,i,model)\n      ax = fig.add_subplot(4,4, axis)\n      ax.set_xticks([])\n      ax.set_yticks([])\n      img,_=test_set[i]\n      plt.imshow(denorm(img).permute(1,2,0))\n      axis+=1\n      ax.set_title(\"label: {} \\n pred: {} \".format(pred['label'],pred['prediction']))\n    \nplot_preds(test_set)","20f05ae0":"test_acc_list=[]\nfor x , y in test:\n    test_acc_list.append(acc_cal(model(x),y))\n\n    \ntest_acc=sum(test_acc_list)\/len(test_acc_list)\n","47ad8182":"test_acc","da342226":"torch.save(model.state_dict(),\"model.pth\")","a1311bd4":"# Train","3063feb2":"# Train Loop","fff10abb":"# Data Augmentation and Data Loading","ee365dd9":"# Creating a Model","71206b61":"Final accuracy","86975bef":"# Save model","8c813a11":"# Prediction"}}