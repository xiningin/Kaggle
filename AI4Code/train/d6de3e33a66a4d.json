{"cell_type":{"ff9e9560":"code","109aa611":"code","5f51be92":"code","c64912cc":"code","8dd435d0":"code","0fc1bf6c":"code","525b556e":"code","a4646aa0":"code","0f549f0f":"code","9c1f2d62":"code","601d780c":"code","aa502ec9":"code","0b574244":"code","11c6d0a1":"code","dbb108ff":"code","3304fde9":"code","7a16935d":"code","6b963a4b":"code","d3eb4582":"code","cf2371fe":"code","9df86442":"code","c3899053":"markdown","a02251fb":"markdown","136eebbd":"markdown","e7e7bfe9":"markdown","9219a8de":"markdown","d565aef5":"markdown","422d4fca":"markdown","0bcd29d2":"markdown","9644df55":"markdown","bf00f3e8":"markdown"},"source":{"ff9e9560":"!pip install numerapi==2.3.8\nimport numerapi","109aa611":"!pip install xlrd","5f51be92":"# !pip install git+https:\/\/github.com\/leonhma\/yfinance.git #drop-in replacement yfinance fork for failed downloads, h\/t ceunen\n# !pip install simplejson\n# import yfinance\n# import simplejson","c64912cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport gc\nimport pathlib\nfrom tqdm.auto import tqdm\nimport json\nfrom multiprocessing import Pool, cpu_count\nimport time\nimport requests as re\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta, FR\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n# visualize\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nfrom matplotlib_venn import venn2, venn3\nimport seaborn as sns\nfrom matplotlib import pyplot\nfrom matplotlib.ticker import ScalarFormatter\nsns.set_context(\"talk\")\nstyle.use('seaborn-colorblind')\n\nimport warnings\nwarnings.simplefilter('ignore')\n\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8dd435d0":"today = datetime.now().strftime('%Y-%m-%d')\ntoday","0fc1bf6c":"class CFG:\n    jpx_path = '..\/input\/japanese-stocks-statistics-from-jpx'\n    OUTPUT_DIR = '.\/'","525b556e":"# Logging is always nice for your experiment:)\ndef init_logger(log_file='train.log'):\n    from logging import getLogger, INFO, FileHandler,  Formatter,  StreamHandler\n    logger = getLogger(__name__)\n    logger.setLevel(INFO)\n    handler1 = StreamHandler()\n    handler1.setFormatter(Formatter(\"%(message)s\"))\n    handler2 = FileHandler(filename=log_file)\n    handler2.setFormatter(Formatter(\"%(message)s\"))\n    logger.addHandler(handler1)\n    logger.addHandler(handler2)\n    return logger\n\nlogger = init_logger(log_file=f'{CFG.OUTPUT_DIR}\/{today}.log')\nlogger.info(f'Start Logging...today is {today}')","a4646aa0":"napi = numerapi.SignalsAPI()\nlogger.info('numerai api setup!')","0f549f0f":"# read in list of active Signals tickers which can change slightly era to era\neligible_tickers = pd.Series(napi.ticker_universe(), name='ticker') \nlogger.info(f\"Number of eligible tickers: {len(eligible_tickers)}\")","9c1f2d62":"# read in yahoo to numerai ticker map, still a work in progress, h\/t wsouza and \n# this tickermap is a work in progress and not guaranteed to be 100% correct\nticker_map = pd.read_csv('https:\/\/numerai-signals-public-data.s3-us-west-2.amazonaws.com\/signals_ticker_map_w_bbg.csv')\nticker_map = ticker_map[ticker_map.bloomberg_ticker.isin(eligible_tickers)]\n\nnumerai_tickers = ticker_map['bloomberg_ticker']\nyfinance_tickers = ticker_map['yahoo']\nlogger.info(f\"Number of eligible tickers in map: {len(ticker_map):,}\")","601d780c":"print(ticker_map.shape)\nticker_map.head()","aa502ec9":"all_tickers = ticker_map['ticker'].unique().tolist()\njp_tickers = [t for t in all_tickers if t.endswith('JT') and t[0].isdigit()]\nlogger.info('Among total {:,} tickers of Numerais interest, there are {:,} JP tickers!'.format(\n    len(all_tickers), len(jp_tickers))\n)\n","0b574244":"os.listdir(CFG.jpx_path)","11c6d0a1":"# load name - cd mapper\nmapper = pd.read_excel(f'{CFG.jpx_path}\/data_j.xls')\n\nprint(mapper.shape)\nmapper.head()","dbb108ff":"# map\njp_tickers_cd = [int(c.split(' ')[0]) for c in jp_tickers if c[0].isdigit()]\n\nnumerai_jps = mapper.loc[mapper['\u30b3\u30fc\u30c9'].isin(jp_tickers_cd)]\nprint(numerai_jps.shape)\nnumerai_jps.style.background_gradient(cmap='BuGn')","3304fde9":"# save\nnumerai_jps.to_csv(f'{CFG.OUTPUT_DIR}\/numerai_jp_stocks.csv', index=False, encoding='utf-8-sig')\nlogger.info('saved!')","7a16935d":"numerai_jps.columns.values.tolist()","6b963a4b":"numerai_jps['\u5e02\u5834\u30fb\u5546\u54c1\u533a\u5206'].value_counts()","d3eb4582":"numerai_jps['33\u696d\u7a2e\u533a\u5206'].value_counts()","cf2371fe":"numerai_jps['17\u696d\u7a2e\u533a\u5206'].value_counts()","9df86442":"numerai_jps['\u898f\u6a21\u533a\u5206'].value_counts()","c3899053":"# Get JP tickers from Numerai Signal Traget\nThis is an easy task: just need to get ones which end with 'JT'.","a02251fb":"So let's have fun with investing Japan:D","136eebbd":"# Config","e7e7bfe9":"# Today","9219a8de":"# JP stocks in the Numerai Universe","d565aef5":"# Libraries","422d4fca":"# Get Numerai-Eligible Tickers\nThis is the universe of tickers that Numerai is putting their money on:D","0bcd29d2":"# EDA\nLet's perform a simple EDA (Exploratory Data Analysis).","9644df55":"![](https:\/\/signals.numer.ai\/homepage-signals\/img\/signals-logo.png)\n\nNumerai is a hedge fund, investing stocks nearly all over the world. \n\nAs a Japanese, I am curious to see which Japanese stocks got Numerai's appetite:D","bf00f3e8":"OK, now we map the ticker to each name of the company! To this end, I use data from the JPX (Japan Exchange Group).\n\nThe data are available on their [website](https:\/\/www.jpx.co.jp\/markets\/statistics-equities\/misc\/06.html), or this [kaggle dataset](https:\/\/www.kaggle.com\/code1110\/japanese-stocks-statistics-from-jpx)."}}