{"cell_type":{"01c1c809":"code","5a2d3e83":"code","3cf83fc6":"code","b3cd7f0f":"code","492ad559":"code","c6decf92":"code","9391ba8a":"code","5ef0b37e":"code","b6e3eca7":"code","8ef71f00":"code","575b78a4":"code","097666e3":"code","08e45d50":"code","cc7c5a17":"code","0f5c2018":"code","946b9fb1":"code","259819f9":"code","a7a5adbd":"code","561907c2":"code","faac8a80":"code","8a7cb14a":"code","7be7cc47":"code","661f481e":"code","f0e96380":"code","811b8966":"code","d24ea8f0":"code","5df7a425":"code","c59efe13":"code","055b15ae":"code","5c743a5b":"code","0713e88c":"code","16a4b757":"code","bbb5ccde":"code","132b4837":"code","3471420b":"code","c7b76ca8":"code","8475d7d1":"code","e76a0e7e":"code","cc948cca":"code","6d78fbd6":"code","c8e9c0d8":"code","4acc4154":"code","e03fe064":"code","0b045744":"code","1298afaa":"code","ca0b08e2":"code","f7d2d76b":"code","d3929917":"code","256dcfd1":"code","41cb195e":"code","dce910d3":"markdown","6144f252":"markdown","8f747657":"markdown","e53a2f12":"markdown","a8c0a9a3":"markdown","790d247a":"markdown","ba961e6f":"markdown","5b0f72a1":"markdown","cac51720":"markdown","71f0c2e0":"markdown","c576ddd8":"markdown","62c28b9f":"markdown","4e33a4f4":"markdown","abf946fa":"markdown","2040638a":"markdown","d9d0c411":"markdown","92dad0c7":"markdown","b874b68b":"markdown","0409cd30":"markdown","10b239a0":"markdown","2235f732":"markdown","3d5f66f0":"markdown","a52b66f6":"markdown","683dc5d3":"markdown","dfb97e63":"markdown","1a4ccc75":"markdown","6930a7de":"markdown","316f3bfb":"markdown","c7121011":"markdown","95ba41f4":"markdown"},"source":{"01c1c809":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\nimport os\nimport pickle\nimport numpy as np\nimport pandas as pd\nfrom scipy.sparse import hstack\n# !pip install eli5\nimport eli5\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import TimeSeriesSplit, cross_val_score, GridSearchCV\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.linear_model import LogisticRegression\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom IPython.display import display_html","5a2d3e83":"PATH_TO_DATA = '..\/input\/'\nSEED = 17","3cf83fc6":"def prepare_sparse_features(path_to_train, path_to_test, path_to_site_dict,\n                           vectorizer_params):\n    times = ['time%s' % i for i in range(1, 11)]\n    train_df = pd.read_csv(path_to_train,\n                       index_col='session_id', parse_dates=times)\n    test_df = pd.read_csv(path_to_test,\n                      index_col='session_id', parse_dates=times)\n\n    # \u0421\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438\n    train_df = train_df.sort_values(by='time1')\n    \n    # \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c site -> id \n    with open(path_to_site_dict, 'rb') as f:\n        site2id = pickle.load(f)\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c id > site\n    id2site = {v:k for (k, v) in site2id.items()}\n    # \u041f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0441\u0430\u0439\u0442 \u0441 id 0 \u043a\u0430\u043a \"\u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439\"\n    id2site[0] = 'unknown'\n    \n    # \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u044b\u0439 TfidfVectorizer\n    # \u0412 \u044d\u0442\u043e\u0442 \u0440\u0430\u0437 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c \u0441\u0435\u0441\u0441\u0438\u0438 \u0441 \u0438\u043c\u0435\u043d\u0430\u043c\u0438 \u0441\u0430\u0439\u0442\u043e\u0432, \u0430 \u043d\u0435 \u0441 id \n    # \u042d\u0442\u043e \u043c\u0435\u043d\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e, \u043d\u043e \u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u043e \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0435\u0441\u043e\u0432\n    sites = ['site%s' % i for i in range(1, 11)]\n    train_sessions = train_df[sites].fillna(0).astype('int').apply(lambda row: \n                                                     ' '.join([id2site[i] for i in row]), axis=1).tolist()\n    test_sessions = test_df[sites].fillna(0).astype('int').apply(lambda row: \n                                                     ' '.join([id2site[i] for i in row]), axis=1).tolist()\n    # \u0441\u043e\u043e\u0431\u0449\u0438\u043c TfidVectorizer \u0447\u0442\u043e \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c\n    # \u0427\u0442\u043e\u0431\u044b \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u043b\u0438\u0441\u044c \u043f\u043e \u0442\u043e\u0447\u043a\u0430\u043c (\u0447\u0442\u043e\u0431\u044b 'mail.google.com'\n    # \u043d\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u043b\u0438\u0441\u044c \u043d\u0430  'mail', 'google' and 'com')\n    vectorizer = TfidfVectorizer(**vectorizer_params)\n    X_train = vectorizer.fit_transform(train_sessions)\n    X_test = vectorizer.transform(test_sessions)\n    y_train = train_df['target'].astype('int').values\n    \n    # \u041d\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f \u0441\u0430\u0439\u0442\u043e\u0432 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0444\u0438\u0447\n    train_times, test_times = train_df[times], test_df[times]\n    \n    return X_train, X_test, y_train, vectorizer, train_times, test_times","b3cd7f0f":"%%time\nX_train_sites, X_test_sites, y_train, vectorizer, train_times, test_times = prepare_sparse_features(\n    path_to_train=os.path.join(PATH_TO_DATA, 'train_sessions.csv'),\n    path_to_test=os.path.join(PATH_TO_DATA, 'test_sessions.csv'),\n    path_to_site_dict=os.path.join(PATH_TO_DATA, 'site_dic.pkl'),\n    vectorizer_params={'ngram_range': (1, 5), \n                       'max_features': 50000,\n                       'tokenizer': lambda s: s.split()}\n)","492ad559":"print(X_train_sites.shape, X_test_sites.shape)","c6decf92":"vectorizer.get_feature_names()[:10]","9391ba8a":"vectorizer.get_feature_names()[10000:10010]","5ef0b37e":"time_split = TimeSeriesSplit(n_splits=10)","b6e3eca7":"logit = LogisticRegression(C=1, random_state=SEED, solver='liblinear')","8ef71f00":"%%time\n\ncv_scores1 = cross_val_score(logit, X_train_sites, y_train, cv=time_split, \n                            scoring='roc_auc', n_jobs=4) # hangs with n_jobs > 1, and locally this runs much faster","575b78a4":"cv_scores1, cv_scores1.mean()","097666e3":"logit.fit(X_train_sites, y_train)","08e45d50":"eli5.show_weights(estimator=logit, \n                  feature_names=vectorizer.get_feature_names(), top=30)","cc7c5a17":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0432 \u0444\u0430\u0439\u043b\ndef write_to_submission_file(predicted_labels, out_file,\n                             target='target', index_label=\"session_id\"):\n    predicted_df = pd.DataFrame(predicted_labels,\n                                index = np.arange(1, predicted_labels.shape[0] + 1),\n                                columns=[target])\n    predicted_df.to_csv(out_file, index_label=index_label)","0f5c2018":"logit_test_pred = logit.predict_proba(X_test_sites)[:, 1]\nwrite_to_submission_file(logit_test_pred, 'subm1.csv') # 0.91807","946b9fb1":"def train_and_predict(model, X_train, y_train, X_test, site_feature_names=vectorizer.get_feature_names(), \n                      new_feature_names=None, cv=time_split, scoring='roc_auc',\n                      top_n_features_to_show=30, submission_file_name='submission.csv'):\n    \n    \n    cv_scores = cross_val_score(model, X_train, y_train, cv=cv, \n                            scoring=scoring, n_jobs=4)\n    print('CV scores', cv_scores)\n    print('CV mean: {}, CV std: {}'.format(cv_scores.mean(), cv_scores.std()))\n    model.fit(X_train, y_train)\n    \n    if new_feature_names:\n        all_feature_names = site_feature_names + new_feature_names \n    else: \n        all_feature_names = site_feature_names\n    \n    display_html(eli5.show_weights(estimator=model, \n                  feature_names=all_feature_names, top=top_n_features_to_show))\n    \n    if new_feature_names:\n        print('New feature weights:')\n    \n        print(pd.DataFrame({'feature': new_feature_names, \n                        'coef': model.coef_.flatten()[-len(new_feature_names):]}))\n    \n    test_pred = model.predict_proba(X_test)[:, 1]\n    write_to_submission_file(test_pred, submission_file_name) \n    \n    return cv_scores","259819f9":"cv_scores1 = train_and_predict(model=logit, X_train=X_train_sites, y_train=y_train, \n                  X_test=X_test_sites, site_feature_names=vectorizer.get_feature_names(),              \n                  cv=time_split, submission_file_name='subm1.csv')","a7a5adbd":"session_start_hour = train_times['time1'].apply(lambda ts: ts.hour).values","561907c2":"sns.countplot(session_start_hour);","faac8a80":"plt.subplots(1, 2, figsize = (12, 6)) \n\nplt.subplot(1, 2, 1)\nsns.countplot(session_start_hour[y_train == 1])\nplt.title(\"Alice\")\nplt.xlabel('Session start hour')\n          \nplt.subplot(1, 2, 2)\nsns.countplot(session_start_hour[y_train == 0])\nplt.title('Others')\nplt.xlabel('Session start hour');","8a7cb14a":"morning = ((session_start_hour >= 7) & (session_start_hour <= 11)).astype('int')\nday = ((session_start_hour >= 12) & (session_start_hour <= 18)).astype('int')\nevening = ((session_start_hour >= 19) & (session_start_hour <= 23)).astype('int')\nnight = ((session_start_hour >= 0) & (session_start_hour <= 6)).astype('int')","7be7cc47":"pd.crosstab([morning, day, evening, night], y_train, rownames=['morning', 'day', 'evening', 'night'])","661f481e":"def add_time_features(times, X_sparse, add_hour=True):\n    hour = times['time1'].apply(lambda ts: ts.hour)\n    morning = ((hour >= 7) & (hour <= 11)).astype('int').values.reshape(-1, 1)\n    day = ((hour >= 12) & (hour <= 18)).astype('int').values.reshape(-1, 1)\n    evening = ((hour >= 19) & (hour <= 23)).astype('int').values.reshape(-1, 1)\n    night = ((hour >= 0) & (hour <=6)).astype('int').values.reshape(-1, 1)\n    \n    objects_to_hstack = [X_sparse, morning, day, evening, night]\n    feature_names = ['morning', 'day', 'evening', 'night']\n    \n    if add_hour:\n        # \u0415\u0441\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0444\u0438\u0447\u0443 \"\u0427\u0430\u0441\", \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c \u0435\u0451\n        objects_to_hstack.append(hour.values.reshape(-1, 1) \/ 24)\n        feature_names.append('hour')\n        \n    X = hstack(objects_to_hstack)\n    return X, feature_names","f0e96380":"%%time\nX_train_with_times1, new_feat_names = add_time_features(train_times, X_train_sites)\nX_test_with_times1, _ = add_time_features(test_times, X_test_sites)","811b8966":"X_train_with_times1.shape, X_test_with_times1.shape","d24ea8f0":"cv_scores2 = train_and_predict(model=logit, X_train=X_train_with_times1, y_train=y_train, \n                               X_test=X_test_with_times1, \n                               site_feature_names=vectorizer.get_feature_names(),\n                               new_feature_names=new_feat_names,\n                               cv=time_split, submission_file_name='subm2.csv')","5df7a425":"cv_scores2 > cv_scores1","c59efe13":"%%time\nX_train_with_times2, new_feat_names = add_time_features(train_times, X_train_sites, add_hour=False)\nX_test_with_times2, _ = add_time_features(test_times, X_test_sites, add_hour=False)\n\n\ncv_scores3 = train_and_predict(model=logit, X_train=X_train_with_times2, y_train=y_train, \n                               X_test=X_test_with_times2, \n                               site_feature_names=vectorizer.get_feature_names(),\n                               new_feature_names=new_feat_names,\n                               cv=time_split, submission_file_name='subm3.csv')","055b15ae":"cv_scores3 > cv_scores1","5c743a5b":"cv_scores3 > cv_scores2","0713e88c":"def add_session_duration_incorrect(times, X_sparse):\n    new_feat = (times.max(axis=1) - times.min(axis=1)).astype('timedelta64[ms]').astype(int)\n    return hstack([X_sparse, new_feat.values.reshape(-1, 1)])","16a4b757":"X_train_with_time_incorrect = add_session_duration_incorrect(train_times, X_train_with_times2)\nX_test_with_time_incorrect = add_session_duration_incorrect(test_times, X_test_with_times2)","bbb5ccde":"cv_scores4 = train_and_predict(model=logit, X_train=X_train_with_time_incorrect, y_train=y_train, \n                               X_test=X_test_with_time_incorrect, \n                               site_feature_names=vectorizer.get_feature_names(),\n                               new_feature_names=new_feat_names + ['sess_duration'],\n                               cv=time_split, submission_file_name='subm4.csv')","132b4837":"train_durations = (train_times.max(axis=1) - train_times.min(axis=1)).astype('timedelta64[ms]').astype(int)\ntest_durations = (test_times.max(axis=1) - test_times.min(axis=1)).astype('timedelta64[ms]').astype(int)\n\nscaler = StandardScaler()\ntrain_dur_scaled = scaler.fit_transform(train_durations.values.reshape(-1, 1))\ntest_dur_scaled = scaler.transform(test_durations.values.reshape(-1, 1))","3471420b":"X_train_with_time_correct = hstack([X_train_with_times2, train_dur_scaled])\nX_test_with_time_correct = hstack([X_test_with_times2, test_dur_scaled])","c7b76ca8":"cv_scores5 = train_and_predict(model=logit, X_train=X_train_with_time_correct, y_train=y_train, \n                               X_test=X_test_with_time_correct, \n                               site_feature_names=vectorizer.get_feature_names(),\n                               new_feature_names=new_feat_names + ['sess_duration'],\n                               cv=time_split, submission_file_name='subm5.csv')","8475d7d1":"cv_scores5 > cv_scores3","e76a0e7e":"def add_day_month(times, X_sparse):\n    day_of_week = times['time1'].apply(lambda t: t.weekday()).values.reshape(-1, 1)\n    month = times['time1'].apply(lambda t: t.month).values.reshape(-1, 1) \n    # \u0412\u0440\u0435\u043c\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 YYYYMM, \u043c\u044b \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043d\u0430 1e5 \u0434\u043b\u044f \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u0444\u0438\u0447\u0438 \n    year_month = times['time1'].apply(lambda t: 100 * t.year + t.month).values.reshape(-1, 1) \/ 1e5\n    \n    objects_to_hstack = [X_sparse, day_of_week, month, year_month]\n    feature_names = ['day_of_week', 'month', 'year_month']\n        \n    X = hstack(objects_to_hstack)\n    return X, feature_names","cc948cca":"X_train_final, more_feat_names = add_day_month(train_times, X_train_with_time_correct)\nX_test_final, _ = add_day_month(test_times, X_test_with_time_correct)","6d78fbd6":"cv_scores6 = train_and_predict(model=logit, X_train=X_train_final, y_train=y_train, \n                               X_test=X_test_final, \n                               site_feature_names=vectorizer.get_feature_names(),\n                               new_feature_names=new_feat_names + ['sess_duration'] + more_feat_names,\n                               cv=time_split, submission_file_name='subm6.csv')","c8e9c0d8":"#\u041e\u0431\u044b\u0447\u043d\u043e \u0441\u0442\u043e\u0438\u0442 \u0431\u0440\u0430\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0448\u0438\u0440\u043e\u043a\u0438\u0439 \u0440\u044f\u0434 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\nc_values = np.logspace(-2, 2, 20)\n\nlogit_grid_searcher = GridSearchCV(estimator=logit, param_grid={'C': c_values},\n                                  scoring='roc_auc', n_jobs=4, cv=time_split, verbose=1)","4acc4154":"%%time\nlogit_grid_searcher.fit(X_train_final, y_train); ","e03fe064":"logit_grid_searcher.best_score_, logit_grid_searcher.best_params_","0b045744":"final_model = logit_grid_searcher.best_estimator_#??????????????????????","1298afaa":"type(final_model)","ca0b08e2":"cv_scores7 = train_and_predict(model=final_model, X_train=X_train_final, y_train=y_train, \n                               X_test=X_test_final, \n                               site_feature_names=vectorizer.get_feature_names(),\n                               new_feature_names=new_feat_names + ['sess_duration'] + more_feat_names,\n                               cv=time_split, submission_file_name='subm7.csv')","f7d2d76b":"cv_scores7 > cv_scores6","d3929917":"cv_means = [np.round(cv_scores.mean(), 5) for cv_scores in [cv_scores1, cv_scores2, cv_scores3,\n                                                                 cv_scores4, cv_scores5, cv_scores6, cv_scores7]]\ncv_stds = [np.round(cv_scores.std(), 5) for cv_scores in [cv_scores1, cv_scores2, cv_scores3,\n                                                                 cv_scores4, cv_scores5, cv_scores6, cv_scores7]]\npublic_lb_scores = [0.91807, 0.93135, 0.94526, 0.67016, 0.94620, 0.95061, 0.95055]\n\nsubm_df = pd.DataFrame({'CV_mean': cv_means, 'CV_std': cv_stds, 'LB': public_lb_scores},\n                      index=range(1, len(cv_means) + 1))\nsubm_df","256dcfd1":"subm_df['cv_lb_weighted'] =  0.6 * subm_df['LB'] + (1 - 0.6) * subm_df['CV_mean']\nsubm_df","41cb195e":"# \u041f\u043e\u0445\u043e\u0436\u0435, \u0447\u0442\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f - \u043b\u0443\u0447\u0448\u0430\u044f\n!cp subm7.csv submission.csv","dce910d3":"**\u042d\u0442\u043e \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0444\u0438\u0447\u0438 - \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u043d\u044b\u0435 \u0441\u0430\u0439\u0442\u044b \u0432 \u0431\u0438\u043d\u043e\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0438\u0434\u0435.**","6144f252":"\u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u043e\u0442\u0447\u0435\u0442\u043b\u0438\u0432\u043e \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u042d\u043b\u0438\u0441 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u0451\u0440\u0444\u0438\u0442\u044c \u0432 16-17 \u0447\u0430\u0441\u043e\u0432. \u0442\u0430\u043a \u0447\u0442\u043e \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0438\u0447\u0438 \"\u0423\u0442\u0440\u043e\", \"\u0414\u0435\u043d\u044c\", \u0438 \"\u0412\u0435\u0447\u0435\u0440\" \u0438 \"\u041d\u043e\u0447\u044c\". \u041d\u0430\u0441\u0442\u0440\u043e\u0438\u043c \u0432\u0440\u0435\u043c\u044f, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0434\u0435\u043b\u0438\u043c \u044d\u0442\u0438 \u0444\u0438\u0447\u0438, \u0438\u043d\u0442\u0443\u0438\u0442\u0438\u0432\u043d\u043e.","8f747657":"**\u041d\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0435 \u043d\u0430 9 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0442\u0430\u0445 \u0438\u0437 10 \u0432 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0438 \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u044c\u044e**","e53a2f12":"\u0412\u0438\u0434\u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u043a\u0440\u043e\u0441\u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439 \u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u043e \u043e\u043d\u0430 \u043d\u0435 \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u0430\u044f.\n\n\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043c\u0435\u0436\u0434\u0443 \u043a\u0440\u043e\u0441\u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439 \u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0441 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u0435\u043c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","a8c0a9a3":"## \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f 1: \"Bag of sites\"\n\n**\u041c\u044b \u043d\u0430\u0447\u043d\u0435\u043c \u0441 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a \u0441\u0430\u0439\u0442\u043e\u0432. \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0435\u0441\u0441\u0438\u0438**","790d247a":"**\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c \u043a\u0440\u043e\u0441\u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0441 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u0440\u044f\u0434\u0430\u043c\u0438.**","ba961e6f":"**\u041c\u044b \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u043d\u043e\u0432\u0443\u044e \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439, \u0438 \u0443\u0432\u0438\u0434\u0435\u043b\u0438 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u043d\u0430\u0448\u0435\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438. \u041d\u0430\u0441 \u0434\u043e\u043b\u0436\u043d\u043e  \u043d\u0430\u0441\u0442\u043e\u0440\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \u0444\u0438\u0447\u0430 \"hour\" \u0438\u043c\u0435\u0435\u0442 \u0442\u0430\u043a\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0432\u0435\u0441. \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0442\u0435 \u0436\u0435 \u0441\u0430\u043c\u044b\u0435 \u0444\u0438\u0447\u0438, \u043a\u0440\u043e\u043c\u0435 `hour`**","5b0f72a1":"<center>\n<img src=\"https:\/\/habrastorage.org\/files\/fd4\/502\/43d\/fd450243dd604b81b9713213a247aa20.jpg\" \/>\n<\/center> \n     \n## <center>  [mlcourse.ai](https:\/\/mlcourse.ai) \u2013 Open Machine Learning Course \n\n#### <center> Author: [Yury Kashnitskiy](https:\/\/yorko.github.io) (@yorko) \n\n## <center> \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043a \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0432 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0430  Kaggle\n\n\n\u0412 \u044d\u0442\u043e\u043c \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043e, \u043a\u0430\u043a \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a (\u0444\u0438\u0447) \u0432 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 [Alice](https:\/\/www.kaggle.com\/c\/catch-me-if-you-can-intruder-detection-through-webpage-session-tracking2)  \u041c\u044b \u0441\u043c\u043e\u0434\u0435\u043b\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u044b, \u043f\u043e\u043a\u0430\u0436\u0435\u043c, \u043a\u0430\u043a \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0441\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 [eli5](https:\/\/github.com\/TeamHG-Memex\/eli5), \u0438 \u043e\u0431\u0441\u0443\u0434\u0438\u043c, \u043a\u0430\u043a \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u044c \u043a\u0440\u043e\u0441\u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e. \u041e\u0441\u043d\u043e\u0432\u044b: [Alice - logistic regression baseline](https:\/\/www.kaggle.com\/kashnitsky\/alice-logistic-regression-baseline) \u0438 [Correct time-aware cross-validation scheme](https:\/\/www.kaggle.com\/kashnitsky\/correct-time-aware-cross-validation-scheme).\n","cac51720":"**\u041c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043a\u0440\u043e\u0441\u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 TimeSeriesSplit, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u0443\u0442\u0435\u0447\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445**","71f0c2e0":"\n\n**\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u0443\u044e \u0444\u0438\u0447\u0443: \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u0438. \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e(\u0434\u043b\u044f \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438), \u043f\u043e\u0442\u043e\u043c \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043c**","c576ddd8":"## \u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438\n\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0434\u0432\u0435\u0434\u0435\u043c \u0438\u0442\u043e\u0433 \u043f\u043e \u0432\u0441\u0435\u043c \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439","62c28b9f":"**\u041c\u044b \u0432\u0438\u0434\u0438\u043c \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u043a\u0440\u043e\u0441\u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439,  \u0430 \u0442\u0430\u043a \u0436\u0435 \u0432\u0435\u0441\u0430 \u0443 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043e\u043d\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b.**","4e33a4f4":"**\u041e\u0431\u0443\u0447\u0438\u043c \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e \u043d\u0430 \u0432\u0441\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435**","abf946fa":"**\u0412 \u0447\u0435\u043c \u043f\u0440\u0438\u0447\u0438\u043d\u0430 \u0442\u0430\u043a\u043e\u0433\u043e \u0443\u0445\u0443\u0434\u0448\u0435\u043d\u0438\u044f?**\n\u041d\u043e\u0432\u0430\u044f \u0444\u0438\u0447\u0430 - \u044d\u0442\u043e \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u0438 \u0432 \u043c\u0438\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445. \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u043e\u0439. \u041d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0438\u043b\u0438 \u043e\u0442\u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0444\u0438\u0447\u0443, \u0438\u043b\u0438 \u0438\u0437\u043c\u0435\u0440\u0438\u0442\u044c \u0435\u0451 \u0432 \u043a\u0430\u043a\u0438\u0445 \u0442\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0435\u0434\u0438\u043d\u0438\u0446\u0430\u0445 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f( \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445 \u0438\u043b\u0438 \u043c\u0438\u043d\u0443\u0442\u0430\u0445). \u041d\u043e \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 - \u044d\u0442\u043e \u0431\u043e\u043b\u0435\u0435 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434.\n","2040638a":"**\u041c\u044b \u0435\u0449 \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u043c \u044d\u0442\u0438 \u0448\u0430\u0433\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437. (\u044d\u0442\u043e \u0445\u043e\u0440\u043e\u0448\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 - \u0437\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u043f\u043e\u0444\u0442\u043e\u0440\u044f\u0435\u043c\u044b\u0435 \u0431\u043b\u043e\u043a\u0438 \u043a\u043e\u0434\u0430 \u0432\u044b\u0437\u043e\u0432\u043e\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u0439). \u0422\u0430\u043a \u0447\u0442\u043e \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442 \u043a\u0440\u043e\u0441\u0441- \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e, \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0444\u0438\u0447\u0438, \u0434\u0435\u043b\u0430\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b \u0441 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438**","d9d0c411":"## \u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435:\n - \u0421\u043b\u0435\u0434\u0438\u0442\u0435 \u0437\u0430 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435\u043c \u043d\u0430 \u043a\u0440\u043e\u0441\u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438, \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u043c, \u043d\u043e \u0438 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0431\u043b\u043e\u043a\u0435 \u043a\u0440\u043e\u0441\u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438.\n - \u041e\u0431\u0440\u0430\u0449\u0430\u0439\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043a\u0440\u043e\u0441\u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\n - \u0421\u0442\u0430\u0440\u0430\u0439\u0442\u0435\u0441\u044c \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043a\u0440\u043e\u0441\u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043b\u0430 \u0441 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435\u043c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445(\u044d\u0442\u043e \u0432\u0430\u0436\u043d\u043e)\n - \u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u043a\u043b\u0430\u0434\u0430( \u0432\u0435\u0441\u043e\u0432) \u0444\u0438\u0447 \u043e\u0447\u0435\u043d\u044c \u0432\u0430\u0436\u043d\u043e, \u0437\u0430\u0447\u0430\u0441\u0442\u0443\u044e \u0434\u0430\u0436\u0435 \u0434\u043b\u044f \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\n - \u0422\u0440\u0430\u0442\u044c\u0442\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0438\u0447\n","92dad0c7":"\u0414\u0435\u043b\u0430\u0435\u043c \u043d\u043e\u0432\u0443\u044e \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044e, \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430, **0.94535**\n","b874b68b":"## \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f 3: \u041e\u0431\u0440\u0430\u0437\u0435\u0446 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","0409cd30":"## \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f 2: \u0424\u0438\u0447\u0438 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f \u0441\u0430\u0439\u0442\u043e\u0432, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f EDA\n\u041c\u044b \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0444\u0438. \u041e\u0431\u0440\u0430\u0442\u0438\u043c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u043d\u0430 \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f \u0441\u0430\u0439\u0442\u043e\u0432\n\n[Kernels](https:\/\/www.kaggle.com\/c\/catch-me-if-you-can-intruder-detection-through-webpage-session-tracking2\/kernels?sortBy=voteCount&group=everyone&pageSize=20&competitionId=7173)  \u041f\u0440\u0438\u043c\u0435\u0440: [\"Initial EDA\"](https:\/\/www.kaggle.com\/adityaecdrid\/initial-eda).","10b239a0":"**\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u041a\u0440\u043e\u0441\u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0441 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0435\u0439**","2235f732":"\n\u041b\u043e\u0433\u0438\u0447\u043d\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \u0440\u0430\u0437\u043d\u044b\u0435 \u043b\u044e\u0434\u0438 \u043c\u043e\u0433\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u0435\u0449\u0430\u0442\u044c \u0441\u0430\u0439\u0442\u044b \u0432 *\u0440\u0430\u0437\u043d\u043e\u0435* \u0432\u0440\u0435\u043c\u044f \u0441\u0443\u0442\u043e\u043a. \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043e\u0442\u0440\u0438\u0441\u0443\u0435\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u0441\u0435\u0445 \u0441\u0435\u0441\u0441\u0438\u0439 \u043f\u043e \u0447\u0430\u0441\u0430\u043c ","3d5f66f0":"**\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0435\u0449\u0435 \u043e\u0434\u043d\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u044e , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u0444\u0438\u0447\u0438. \u0427\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0435 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0444\u043b\u0430\u0433, \u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0439 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0438\u0447\u0438 \"\u0427\u0430\u0441\"**\n","a52b66f6":"**\u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u0432\u0438\u0434\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 \u0441\u0430\u0439\u0442\u044b \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u042d\u043b\u0438\u0441. \u0422\u0430\u043a \u0436\u0435 \u043e\u0442\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u042d\u043b\u0438\u0441 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 Gmail \u0438 Google Plus. \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0441\u0435\u0442\u0435, \u0438 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0444\u0430\u0439\u043b\u0441 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\u043c\u0438**","683dc5d3":"## \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f 4 and 5: \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","dfb97e63":"**\u041e\u0442\u043e\u0431\u0440\u0430\u0441\u0438\u043c \u0432\u0435\u0441\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e eli5**","1a4ccc75":"## \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f 6: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0432\u0430 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a (\u0444\u0438\u0447)\n\u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f\u0445 \u043e\u0447\u0435\u043d\u044c \u0432\u0430\u0436\u043d\u043e \u0437\u0430\u0438\u043c\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0445\u043e\u0440\u043e\u0448\u0438\u0435 \u0438\u0434\u0435\u0438 \u0438\u0437 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430, \u043c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c [\u042d\u0442\u0443 \u043c\u043e\u0434\u0435\u043b\u044c](https:\/\/www.kaggle.com\/hakeydotcom\/additional-time-features-and-logit), \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435 \u0444\u0438\u0447\u0438: \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438, \u0438 \u043c\u0435\u0441\u044f\u0446.","6930a7de":"**\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0432 \u044d\u0442\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0443\u044e ( \u0441 \u0431\u0438\u043d\u043e\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432) \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 (`X_train_sites`, `X_test_sites`), \u0432\u0435\u043a\u0442\u043e\u0440 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 `y_train`, `TfidfVectorizer` (\u041d\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u044f\u0442\u0441\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0430\u0439\u0442\u043e\u0432 \u0438\u0437 \u043d\u0435\u0433\u043e), \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f \u0441\u0430\u0439\u0442\u043e\u0432 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430, \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 **","316f3bfb":"## \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f 7: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n\u041c\u044b \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0438 \u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0444\u0438\u0447, \u0438 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043d\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438. \u041e\u0431\u044b\u0447\u043d\u043e \u043d\u0430 \u044d\u0442\u043e\u043c \u044d\u0442\u0430\u043f\u0435 \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043e\u0434 \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u0430, \u0438 \u0434\u043e\u043b\u0433\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b. \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 - `ngram_range`, `max_features`, \u0412\u044b\u0431\u0435\u0440\u0435\u043c \u043c\u0435\u0436\u0434\u0443 `CountVectorizer` \u0438 `TfIdfVectorizer` (\u0432 \u043a\u0430\u043a\u043e\u0439 \u0442\u043e \u043c\u0435\u0440\u0435 \u044d\u0442\u043e \u0442\u043e\u0436\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440). \u0421\u0435\u0439\u0447\u0430\u0441 \u043c\u044b \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438 `C`\n","c7121011":"\u0422\u0435\u043f\u0435\u0440\u044c \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u042d\u043b\u0438\u0441, \u0438 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445","95ba41f4":"**\u0422\u0435\u043f\u0435\u0440\u044c \u043a\u0440\u043e\u0441\u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e(\u043c\u0435\u043d\u044c\u0448\u0435 std).  \u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430 \u043a\u0440\u043e\u0441\u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0442\u0430\u043a \u0436\u0435 \u0432\u044b\u0440\u043e\u0441\u043b\u043e.**"}}