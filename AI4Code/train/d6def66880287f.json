{"cell_type":{"0e7f515c":"code","4cc10c2f":"code","f0b5bc07":"code","d25f5e27":"code","e7e3752c":"code","a4df9d2f":"code","195c53e3":"code","63c04aa5":"code","6bfbabc2":"code","d4bba964":"code","f08e608f":"markdown","e056eead":"markdown","e7d67130":"markdown","72c0e0a0":"markdown","c060c67a":"markdown","516171c4":"markdown","9807d056":"markdown","aa780676":"markdown","84fcf158":"markdown","af541421":"markdown","2284184e":"markdown","96c8994b":"markdown"},"source":{"0e7f515c":"import numpy as np\nimport pandas as pd\nimport hvplot.pandas\nimport geoviews as gv\nimport holoviews as hv\nhv.extension('bokeh')","4cc10c2f":"train = pd.read_csv('\/kaggle\/input\/bigquery-geotab-intersection-congestion\/train.csv', \n                    index_col='RowId')\ntest = pd.read_csv('\/kaggle\/input\/bigquery-geotab-intersection-congestion\/test.csv', \n                    index_col='RowId')\ntarget_cols = [col for col in train.columns.tolist() if\n                    col not in test.columns.tolist()]\ntarget_df = train[(target_cols)]\ntrain = train.drop(target_cols, axis=1)","f0b5bc07":"tt = pd.concat([train,test], keys=['train', 'test'], sort=False)\n\nif tt.columns[-1:][0] == 'City': #Move city column to where it belongs\n    ttcols = tt.columns.tolist() \n    ttcols_moved = ttcols[-1:] + ttcols[:-1] \n    tt = tt[ttcols_moved].reset_index(level=0)\ndisplay(tt.head(), target_df.head())\n#del train, test","d25f5e27":"# Optional function to change column name format from CamelCase to snake_case\ndef snakify(camel_list):\n    snake_list = []\n    for c in camel_list:\n        underscored = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', c)\n        refined = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', underscored).lower()\n        snake_list.append(refined)\n    return snake_list\n\n# tt.columns = snakify(tt.columns)","e7e3752c":"tt_bos = tt[tt.City == 'Boston'].drop_duplicates(['level_0','IntersectionId'])\n\npoints_bos = gv.Points(tt_bos, kdims=['Longitude', 'Latitude'],\n                      vdims=['level_0']).opts(color='level_0', cmap=['dodgerblue', \n                      'darkorange'], width=500, height=450, alpha=0.5)\n\n# points_bos_train = gv.Points(tt_bos[tt_bos.level_0=='train'], kdims=['Longitude', 'Latitude'], \n#                       vdims=['level_0']).opts(color='dodgerblue', width=500, height=450, \n#                       fill_alpha=0.1, line_width=1.5, size=3)\n\n# points_bos_test = gv.Points(tt_bos[tt_bos.level_0=='test'], kdims=['Longitude', 'Latitude'], \n#                       vdims=['level_0']).opts(color='darkorange', width=500, height=450, \n#                       line_alpha=0.1, size=3)\n\ntiles = gv.tile_sources.CartoLight()\ndisplay(points_bos * tiles)","a4df9d2f":"tt_phi = tt[tt.City == 'Philadelphia'].drop_duplicates(['level_0','IntersectionId'])\npoints_phi = gv.Points(tt_phi, kdims=['Longitude', 'Latitude'],\n                      vdims=['level_0']).opts(color='level_0', cmap=['dodgerblue', \n                      'darkorange'], width=500, height=450, alpha=0.5)\ntiles = gv.tile_sources.CartoLight()\ndisplay(tiles*points_phi)","195c53e3":"index_cols = ['EntryStreetName', 'ExitStreetName', 'EntryHeading', 'ExitHeading']\nvalue_cols = ['TimeFromFirstStop_p' + str(i) for i in [20, 40, 50, 60 , 80]]\n\ndef get_times(city, iid, pathlist):\n    intersect = train[(train.City == city) & (train.IntersectionId == iid)]\n    targets = target_df.loc[intersect.index, :]\n    intersect = intersect.join(targets)\n    paths = intersect.groupby(index_cols)[value_cols].agg(['mean', 'std']).fillna(0)\n    paths['Path'] = pathlist\n    paths.columns = paths.columns.swaplevel()\n    return paths.sort_index(axis=1)\n\npathlist_bos = ['E_left', 'E_right', 'NE_left', 'SW_right', 'NE_thru', 'SW_u', 'SW_thru']\nbos = get_times('Boston', 2, pathlist_bos)\n\npathlist_phi = ['N_thru', 'N_right', 'E_left', 'E_thru']\nphi = get_times('Philadelphia', 1824, pathlist_phi)\n\ndisplay(bos, phi)","63c04aa5":"import hvplot.pandas\nopts = {'invert_yaxis': False,\n        'yticks': list(range(0,100,20)),\n        'padding': 0.1,\n        'width':450,\n        'height': 300,\n           }\n\n# df = bos\n# aggfunc='mean'\ndef make_plot(df, aggfunc):\n    assert (aggfunc == 'mean') | (aggfunc == 'std')\n    paths = df.set_index(('', 'Path')).loc[:, aggfunc].reset_index()\n    paths.columns = [paths.columns[0][1]] + [c[-4:] for c in paths.columns[1:]]\n    plot = hvplot.parallel_coordinates(paths, 'Path', **opts)\n    if aggfunc == 'mean':\n        return plot.options(ylabel='Mean Wait Time')\n    else:\n        return plot.options(ylabel='STD of Wait Times', show_legend=False)\n\nland_cambridge = make_plot(bos, 'mean').options(title=\"Land & Cambridgeside\") +\\\n    make_plot(bos, 'std')\nfifth_cambria = make_plot(phi, 'mean').options(title=\"5th & Cambria\") +\\\n    make_plot(phi, 'std')\n\ndisplay(land_cambridge, fifth_cambria)\n","6bfbabc2":"opts = {'cmap': 'Paired',\n        'yticks': list(range(0,300,50)),\n        'colorbar': False,\n       'grid': True,\n         }\n\nland_ne = tt[(tt.IntersectionId == 2) &\n             (tt.EntryStreetName == 'Land Boulevard') &\n             (tt.ExitHeading == 'NE')\n             ].join(target_df)\nlandplot = land_ne.hvplot.scatter('Hour', 'TimeFromFirstStop_p80', \n                                    c='Weekend', **opts)\n\ncambria_e = tt[(tt.IntersectionId == 1824) &\n             (tt.EntryStreetName == 'West Cambria Street') &\n             (tt.ExitHeading == 'E')\n             ].join(target_df)\ncambplot = cambria_e.hvplot.scatter('Hour', 'TimeFromFirstStop_p80', \n                                    c='Weekend', **opts)\n\ndisplay(landplot.options(title='Land_NE_thru'), cambplot.options(title='Cambria_E_thru'))","d4bba964":"# alternate plot with seaborn to trigger viz output on the Notebooks page\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncambria_e.plot(kind='scatter', x='Hour', y='TimeFromFirstStop_p20')","f08e608f":"There appear to be some things that make sense and other things that might depend on interactions with features we don't yet have. Looking at the Land intersection we can see that the left turns take the most time on average. The right turn off Cambridgeside is the quickest and has the lowest variation. We have the direction of turn data which should help a model. Going straight through on Land or u-turning has the highest variation. We'll look at that in a minute. \n\nFor the 5th and Cambria intersection, It looks like going east on Cambria has the highest average times, whether one is going straight or turning left. Let's look at that also to see what's up.","e056eead":"<img src=\"https:\/\/i.imgur.com\/aDVymEW.jpg\" width=\"550\" height=\"350\"\/>\n## Intro\nThis notebook explores the dynamics of single intersections. I like to take this sort of micro-level look to learn about the data and get ideas for feature engineering. The potential features might be derived from the given data or they might require data from other sources. Using such features and\/or ones like them will help improve model performance.\n\nHere's a quick look at the data with the target-like columns separated.","e7d67130":"### P-80 Deep Dive\nHere's a quick look at the p80 data to get more insight into high mean wait times and variations for the through traffic headed NE on Land.","72c0e0a0":"You might come up with ideas for good features after looking at a few intersections. Whether the data is available or not I have no idea - it's more of a wish list at this point. Having met with city traffic managers in my area, I can tell you they have all sorts of helpful data: traffic volumes, lane geometry, signal timings and so on. Wouldn't that be great for us to have?","c060c67a":"#### Example 1- Boston\nLet's first look at Boston from a high-flying drone. Here are the intersections contained in the data. Even without looking at target distributions we can guess that the times and distances are quite spread across a city, especially at the \\_p80 end. EDIT: Train and test geographies are similar, but the points are not evenly distributed. For instance, only test intersections extend north into Somerville.\n\nTechnical note: I used [GeoViews](http:\/\/geoviews.org\/) to make the graph below. It's an easy way to make scalable, interactive geo plots.\n\nStyle note: Sorry about the confusing colors. The darker orange is for intersections seen in both train and test sets.","516171c4":"Let's look at some plots and see if we can spot anything.","9807d056":"#### Example 2 - Philadelphia\nLet's now look at Philadelphia the same way. Here are the intersections contained in the data. \nEDIT: As before, geographies are generally similar. ","aa780676":"Let's pick a single intersection like before. Here's the intersection of North 5th Street and W Cambria. This is Rocky Balboa's neighborhood in North Philly and around the way from Max's steaks, where Adonis Creed likes to take his dates.\n\n<img src=\"https:\/\/i.imgur.com\/1IFmj6p.png\" width=\"350\" height=\"350\"\/>\n<img src=\"https:\/\/i.imgur.com\/fjXWk56.png\" width=\"550\" height=\"350\"\/>\n\nMovie references aside, here are some things to notice.\n  - Intersection of two one-way streets: a 4-way intersection with only 4 paths. Restrictions or potential vs. actual might help.\n  - Three similar intersections in the area: nearest neighbors as a feature.\n  - Both streets are medium capacity and run across neighborhoods: not sure how to use this one...\n  - Streets are longer streets: likely if name contains N\/S\/E\/W.\n  - Urban location: likely if a street is numbered.\n  - It's daytime and sunny: of course this is a picture, but day\/night and weather affect traffic.","84fcf158":"## Area Recon\n\n","af541421":"Let's pick a single intersection and bring the drone in close. I think of intersections as a collection of related traffic paths passing through a common point. In this dataset, the 'Paths' feature lists the unique paths at each intersection. Each traffic path has it's own dynamics and can affect other paths. There may be an advantage to stacking and\/or using the target variables that aren't part of the LB score.\n\nWe'll first look at the intersection of Land Blvd and Cambridgeside Place, not far from where I lived several years ago. This area has intersections from both train and test. I pulled the street view image manually from Google Maps vs. using their wonderful APIs.\n\n<img src=\"https:\/\/i.imgur.com\/buKIbkr.png\" width=\"350\" height=\"350\"\/>\n<img src=\"https:\/\/i.imgur.com\/PIbDbtJ.png\" width=\"550\" height=\"350\"\/>\n\nHere are some things to notice and potential features that might help:\n  - It's a T-intersection: it can have up to 6 paths plus any u-turns.\n  - One street is a major artery connecting two bridges: the road name ends in Boulevard\n  - The other street is a small side street: the road name ends in Place\n  - The intersection is surrounded by businesses that drive evening and weekend traffic: area zoning might be useful (industrial, commercial, retail, residential). \n  - It's in the city of Cambridge, not Boston proper: try density or distance from a common point\n  - There's a stoplight with protected left turns: control mechanism (and rare for Boston - hence the [Boston Left](https:\/\/www.urbandictionary.com\/define.php?term=Boston%20Left).","2284184e":"## Wait Times\n\n### Distribution of Means and Variation\nOK, let's look at something we have right now - the wait times - and see what inferences we might make.  I changed the format of the \"Path\" column in the original data. It reflects how I've seen traffic people label paths, which is based on the direction of entry and the type of turn. Plus it's more intuitive and concise (and leads to more features!). Here's how the data is organized.","96c8994b":"Traffic on Land looks typical for a metro area, peaking at afternoon rush hour and dying down. Cambria on the other hand, has a relatively steady flow at p80 with a peak at around 2pm. We don't have an obvious cause, but time diffs could be useful to include.\n\nI hope the notebook gave some ideas for features to add to your model. Using these features with your own and those in other puclic kernels should get your RMSE down toward 68 if not below. Good luck!"}}