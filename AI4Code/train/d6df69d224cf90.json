{"cell_type":{"378703f8":"code","ec5fc333":"code","ee9c0bc9":"code","8348b33d":"code","6e1bb169":"code","e692e31e":"code","4ff4fde6":"code","83ac073b":"code","94af3f0c":"code","28afe8b5":"code","5cab662a":"code","5f7595d5":"code","fd989f10":"markdown","2875e5a8":"markdown","c38a2880":"markdown"},"source":{"378703f8":"import os\nimport gc\nimport warnings\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\n\nwarnings.filterwarnings(\"ignore\")\nsns.set()\n\n%matplotlib inline","ec5fc333":"DATAPATH = \"..\/input\/petfinder-pawpularity-score\"\nTRAIN_IMGPATH = \"..\/input\/petfinder-pawpularity-score\/train\"\nTEST_IMGPATH = \"..\/input\/petfinder-pawpularity-score\/test\"\ntrain_df = pd.read_csv(os.path.join(DATAPATH, \"train.csv\"))\ntest_df = pd.read_csv(os.path.join(DATAPATH, \"test.csv\"))\nsubission = pd.read_csv(os.path.join(DATAPATH, \"sample_submission.csv\"))\n\nprint(f\"train data shape: {train_df.shape}\")\nprint(f\"test data shape: {test_df.shape}\")","ee9c0bc9":"# shape[9] images -> shape[3, 3] images\ndef concat_tile(im_list_2d):\n    return cv2.resize(cv2.vconcat([cv2.hconcat(im_list_h) for im_list_h in im_list_2d]), (224, 224))","8348b33d":"# Get random index to select random image\ndef random_idx(exc_idx, end_idx):\n    idx_list = np.zeros(9)\n    while (len(idx_list) != len(set(idx_list))) and (exc_idx not in idx_list):\n        idx_list = np.random.randint(0, end_idx, 9)\n\n    return idx_list","6e1bb169":"# Get random index to set target image's position\ndef get_pos():\n    return np.random.randint(0, 9)","e692e31e":"# Get grid images and a target list\ndef make_grid(target_idx):\n    end_idx = train_df.shape[0]\n    pos = get_pos()\n    img_idx_list = random_idx(target_idx, end_idx)\n    img_idx_list[pos] = target_idx\n\n    img_list = np.array([cv2.resize(cv2.imread(os.path.join(TRAIN_IMGPATH, train_df.loc[i, \"Id\"]+\".jpg\")),\n                                    (224, 224)) for i in img_idx_list]).reshape(3, 3, 224, 224, 3)\n    img = concat_tile(img_list)\n    target_list = train_df.loc[img_idx_list, \"Pawpularity\"].values\n\n    return img, target_list, img_idx_list","4ff4fde6":"img, target, idx = make_grid(4)","83ac073b":"plt.imshow(img)\nplt.show()","94af3f0c":"target","28afe8b5":"f, ax = plt.subplots(nrows=3, ncols=3, figsize=(10, 10))\nax = ax.flatten()\nfor i, img_idx in enumerate(idx):\n    sample_train_img = cv2.imread(os.path.join(TRAIN_IMGPATH, train_df.loc[img_idx, \"Id\"]+\".jpg\"))\n    ax[i].imshow(sample_train_img)\n\nplt.tight_layout()\nplt.show()","5cab662a":"train_df.loc[idx, \"Pawpularity\"].values","5f7595d5":"idx","fd989f10":"## Data Load","2875e5a8":"# Petfinder Data Arrange\n\nPetfinder: https:\/\/www.petfinder.my\/\n\nPet images are $3 \\times 3$ gird patterns, but one image is given in the dataset. So I make grid image patterns and target lists.","c38a2880":"## Helper Function  "}}