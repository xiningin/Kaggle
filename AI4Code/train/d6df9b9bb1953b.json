{"cell_type":{"80e33b26":"code","1810475f":"code","783b5543":"code","3a593d46":"code","24907825":"code","7e77fdf9":"code","3e3513bf":"code","4d51ab70":"code","d4e2cfb5":"code","bc85b553":"code","32c98197":"code","4bbebfd9":"markdown","e1fe837e":"markdown","2d8360ef":"markdown","07feef67":"markdown","e9e17878":"markdown","af4cde29":"markdown","36ce68a4":"markdown","9e93bcdb":"markdown","a0557e18":"markdown","aa41a1b9":"markdown","25a830d2":"markdown","e8208459":"markdown","93c127dd":"markdown","4f07071e":"markdown"},"source":{"80e33b26":"import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport sympy","1810475f":"%%bash -e\nif ! [[ -f .\/linkern ]]; then\n  wget http:\/\/www.math.uwaterloo.ca\/tsp\/concorde\/downloads\/codes\/src\/co031219.tgz\n  echo 'c3650a59c8d57e0a00e81c1288b994a99c5aa03e5d96a314834c2d8f9505c724  co031219.tgz' | sha256sum -c\n  tar xf co031219.tgz\n  (cd concorde && CFLAGS='-O3 -march=native -mtune=native -fPIC' .\/configure)\n  (cd concorde\/LINKERN && make -j && cp linkern ..\/..\/)\n  rm -rf concorde co031219.tgz\nfi","783b5543":"cities = pd.read_csv('..\/input\/cities.csv', index_col=['CityId'])","3a593d46":"cities1k = cities * 1000","24907825":"def write_tsp(cities, filename, name='traveling-santa-2018-prime-paths'):\n    with open(filename, 'w') as f:\n        f.write('NAME : %s\\n' % name)\n        f.write('COMMENT : %s\\n' % name)\n        f.write('TYPE : TSP\\n')\n        f.write('DIMENSION : %d\\n' % len(cities))\n        f.write('EDGE_WEIGHT_TYPE : EUC_2D\\n')\n        f.write('NODE_COORD_SECTION\\n')\n        for row in cities.itertuples():\n            f.write('%d %.11f %.11f\\n' % (row.Index+1, row.X, row.Y))\n        f.write('EOF\\n')\n\nwrite_tsp(cities1k, 'cities1k.tsp')","7e77fdf9":"%%bash -e\ntime .\/linkern -s 42 -S linkern.tour -R 1000000000 -t 18000 .\/cities1k.tsp >linkern.log","3e3513bf":"!sed -Ene 's\/([0-9]+) Steps.*Best: ([0-9]+).*\/\\1,\\2\/p' linkern.log >linkern.csv\npd.read_csv('linkern.csv', index_col=0, names=['TSP tour length']).plot();","4d51ab70":"def read_tour(filename):\n    tour = open(filename).read().split()[1:]\n    tour = list(map(int, tour))\n    if tour[-1] == 0: tour.pop()\n    return tour\n\ndef score_tour(tour):\n    df = cities.reindex(tour + [0]).reset_index()\n    primes = list(sympy.primerange(0, len(cities)))\n    df['prime'] = df.CityId.isin(primes).astype(int)\n    df['dist'] = np.hypot(df.X - df.X.shift(-1), df.Y - df.Y.shift(-1))\n    df['penalty'] = df['dist'][9::10] * (1 - df['prime'][9::10]) * 0.1\n    return df.dist.sum() + df.penalty.sum()\n\ndef write_submission(tour, filename):\n    assert set(tour) == set(range(len(tour)))\n    pd.DataFrame({'Path': list(tour) + [0]}).to_csv(filename, index=False)","d4e2cfb5":"tour = read_tour('linkern.tour')\nwrite_submission(tour, 'submission.csv')","bc85b553":"score_tour(tour)","32c98197":"%matplotlib inline\nplt.figure(figsize=(20, 20))\nplt.plot(cities.X[tour], cities.Y[tour], alpha=0.7)\nplt.show()","4bbebfd9":"## Score and submit found tour","e1fe837e":"Lengths of found tours (times scaling factor) during each LK round:","2d8360ef":"This notebook shows how to build and run concorde TSP solver directly, without using a rather underfeatured wrapper like pyconcorde.","07feef67":"Flags that we're using:\n\n  * `-s <seed>` - random seed\n  * `-S <file>` - saving the tour periodically in this file\n  * `-R 999999999` - repeat LK rounds (almost) indefinitely\n  * `-t <seconds>` - bound by time instead","e9e17878":"Write out the problem in TSPLIB format:","af4cde29":"Concorde's EUC_2D norm rounds the distances between cities to the nearest integer ([source](https:\/\/github.com\/matthelb\/concorde\/blob\/master\/UTIL\/edgelen.c#L299)) whereas competition metric doesn't. This significantly hurts quality as we get closer to TSP optimum. Let's scale the coordinates up by a few orders of magnitude to work around this problem:","36ce68a4":"## Plot the tour","9e93bcdb":"Read and format found TSP tour for submission:","a0557e18":"*Note: Internet must be enabled in kernel environment's settings for this step.*\n\nDownload concorde's source code and build LINKERN - the main tour finding component (chained Lin-Kernighan). It comes with a convenient command line utility that we'll copy for later use.","aa41a1b9":"## Run LINKERN","25a830d2":"The rest of concorde code is mostly dedicated to optimizing a lower bound on TSP length and is not of great practical interest for this competition, so we won't built it.","e8208459":"## Prepare input","93c127dd":"Our score is:","4f07071e":"## Build concorde"}}