{"cell_type":{"effa646c":"code","e79ba1d4":"code","512a96e4":"code","9decc090":"code","4a6d3d7d":"code","9c69a45b":"code","5b96dc82":"code","827c8e02":"code","4f11818d":"code","75982ccd":"code","efb70dd4":"code","b9332709":"code","1fc0a53a":"code","a8f9d5c1":"code","b9f6254c":"code","528fd5b4":"code","c7595274":"code","c25a0b6c":"code","7f6818b7":"code","ae26a652":"code","a90dccdb":"code","2d884f89":"code","0e31ac2f":"code","ce7c88a4":"code","9b5bac8e":"code","585191e1":"code","c73b387c":"code","7586851b":"code","93d41a65":"code","e7d32306":"code","6e8f5b27":"code","20279eb1":"code","4c400376":"code","875ad710":"code","0a75129e":"code","5f297e96":"code","ccab912e":"code","23c55a36":"code","f804330f":"code","48a4db66":"code","ef6c847a":"code","38d1d6e9":"code","02be838d":"code","c12cb275":"code","e07f813e":"code","16452c92":"code","8ada1fed":"code","fc359b1d":"code","47799fbb":"code","741c9245":"markdown","0f7b0e21":"markdown"},"source":{"effa646c":"### This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport dask.dataframe as dd\nimport os, time\nimport seaborn as sns","e79ba1d4":"# PANDAS dataframe \n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        start_time = time.time()\n        df  = pd.read_csv( os.path.join(dirname, filename))\n        print(\"---PANDAS TOOK %s seconds ---\" % (time.time() - start_time))\n        \n        start_time = time.time()\n        ddf  = dd.read_csv( os.path.join(dirname, filename))\n        print(\"---DASK TOOK %s seconds ---\" % (time.time() - start_time))\n        #print(os.path.join(dirname, filename))","512a96e4":"df.columns","9decc090":"#RENAME\/TRANSLATE COLUMNS NAMES FROM SPANISH TO ENGLISH\ntranslated = ['case_number', 'sex', 'age', 'age_months_or_years', 'country', 'province',\n              'residence_department', 'province_establishment', 'symptoms_date', 'case_opening_date',\n              'epidemilogical_opening_week', 'hospitalization_date', 'intensive_care_required',\n              'intensive_care_date', 'deceased', 'death_date', 'ventilation_required',\n              'loading_province', 'financing_source', 'class', 'case_class', 'province_code',\n              'diagnosis_date', 'residence_code_dept', 'last_update']\ncolumns = {}\nfor k,v in zip(df.columns, translated): columns[k] = v\ndf = df.rename(columns=columns)","4a6d3d7d":"df.head()","9c69a45b":"#COUNTRY EXPLORATION; PLANNING TO SCOPE THIS FOR ONLY RECORDS WHOSE COUNTRY IS ARGENTINA\ndf['country'].unique()","5b96dc82":"# REMOVING ALL COUNTRIES THAT WERE NOT ARGENTINA RESULTED IN CLOSE TO 5 PERCENT OF DATA \n# -- not insignificant but ok for this exercise\n\noriginal_record_count = df.country.count()\ndf = df[df['country'] == 'Argentina']\nnew_record_count = df.country.count()\nprint(f'Removing all records whose country is NOT Argentina resulted in \\\n        the removal of {original_record_count - new_record_count} records or \\\n        {100 * (1 - (new_record_count\/original_record_count))} percent of the data')","827c8e02":"# NOW THAT I KNOW ALL THE COUNTRY RECORDS IN THIS DATASET ARE OF THE VALUE 'ARGENTINA', I NO LONGER\n# NEED THIS COLUMN\/DATA\ndrop_cols = [] \ndrop_cols.append('country')\n\n#OTHER COLUMNS THAT CAN DROP AT FIRST LOOK FOR PURPOSES OF THIS EXPLORATION\ndrop_cols.append('case_number')\ndrop_cols.append('financing_source')\ndrop_cols.append('loading_province')\ndrop_cols.append('class')\ndrop_cols.append('case_class')\ndrop_cols.append('province_code')\ndrop_cols.append('residence_code_dept')","4f11818d":"#LAST_UPDATE COLUMNS ALSO HAVE HOMOGENEOUS VALUES SO CAN DROP\ndf.last_update.unique()","75982ccd":"drop_cols.append('last_update')","efb70dd4":"#EXPLORING THE age_months_or_years COLUMN\ndf['age_months_or_years'].value_counts()","b9332709":"#APPEARS INDIVIDUALS THAT HAVE A 'MESES' (MONTH) VALUE FOR THIS COLUMN ARE INFANTS\n#SCOPING FURTHER, PLANNING TO EVAL ONLY PEOPLE OLDER THAN A YEAR BUT MIGHT COME BACK AND EVAL INFANTS TOO\ndf[df['age_months_or_years'] == 'Meses'].age.unique()","1fc0a53a":"infants = df[df['age_months_or_years'] == 'Meses']\ndf = df[df['age_months_or_years'] != 'Meses']\n\n#WITH ALL VALUES BEING THE SAME IN COLUMN 'age_months_or_years' CAN NOW DROP\ndrop_cols.append('age_months_or_years')","a8f9d5c1":"#INITIAL DROP OF COLUMNS -- MIGHT DROP MORE LATER\ndf = df.drop(columns=drop_cols)\ndrop_cols = [] #FOR ANY NEW COLS TO DROP ","b9f6254c":"#DTYPES BEFORE\ndf.dtypes","528fd5b4":"df['case_opening_date'] = pd.to_datetime(df['case_opening_date'])\ndf['hospitalization_date'] = pd.to_datetime(df['hospitalization_date'])\ndf['intensive_care_date'] = pd.to_datetime(df['intensive_care_date'])\ndf['diagnosis_date'] = pd.to_datetime(df['diagnosis_date'])\ndf['death_date'] = pd.to_datetime(df['death_date'])\ndf['symptoms_date'] = pd.to_datetime(df['symptoms_date'])","c7595274":"#DTYPES AFTER\ndf.dtypes","c25a0b6c":"#INVESTIGATING BOOL COLUMNS\ndf['intensive_care_required'].unique()","7f6818b7":"df['intensive_care_required'] = df['intensive_care_required'].apply(lambda x: 1 if x == 'SI' else 0)","ae26a652":"df['intensive_care_required'].dtype","a90dccdb":"df['ventilation_required'].unique()","2d884f89":"df['ventilation_required'] = df['ventilation_required'].apply(lambda x: 1 if x == 'SI' else 0)","0e31ac2f":"df['deceased'].unique()","ce7c88a4":"df['deceased'] = df['deceased'].apply(lambda x: 1 if x == 'SI' else 0)","9b5bac8e":"df['sex'] = df['sex'].astype('category')\ndf['province'] = df['province'].astype('category')\ndf['residence_department'] = df['residence_department'].astype('category')\ndf['province_establishment'] = df['province_establishment'].astype('category')","585191e1":"#CHECK DTYPES ONE MORE TIME\ndf.dtypes","c73b387c":"#DATA TRIMMED FROM CLOSE TO 4GBs to 1.5GBs\ndf.info()","7586851b":"#SETTING CASE OPENING DATE AS INDEX\ndf = df.set_index('case_opening_date')","93d41a65":"#THE EXAMPLES BELOW MADE IT CLEAR THAT I NEED TO CLEAN UP THE AGE VALUES \n#--- with some people being over 1000 years old\ndf[df['deceased'] == 1].age.mean()","e7d32306":"df[df['deceased'] == 1].groupby('sex').age.mean()","6e8f5b27":"df[df['deceased'] == 1].groupby('sex').age.max()","20279eb1":"df.age.max()","4c400376":"df[df['deceased'] == 1].age.max()","875ad710":"#SCOPING FOR AGE -- REMOVING ROWS WHERE AGE IS GREATER OR EQUAL TO 105\ndf = df[df['age'] <= 105]","0a75129e":"df.age.max()","5f297e96":"#LOOKS LIKE I NEED TO DO THE SAME FOR NEGATIVE AGES \ndf.age.min()","ccab912e":"df = df[df['age'] >= 1]","23c55a36":"df.age.min()","f804330f":"sns.set_style(\"darkgrid\", {\"axes.facecolor\": \".9\"})\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\nplt.figure(figsize=(25, 12))\nplt.xticks(np.arange(1, 105, step=25))\ndf[df['deceased'] == 1].groupby('sex').age.plot(kind='kde', legend=True)","48a4db66":"sns.set_style(\"darkgrid\", {\"axes.facecolor\": \".9\"})\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\nmales = df.loc[(df['deceased'] == 1) & (df['sex'] == 'M'), ['age']]\nfemales = df.loc[(df['deceased'] == 1) & (df['sex'] == 'F'), ['age']]\nfig, ax = plt.subplots(figsize=(25,12))\n\nmale_deaths, male_age_bin = np.histogram(males['age'])\nfemale_deaths, female_age_bin = np.histogram(females['age'], bins=male_age_bin)\n\nwidth = (male_age_bin[1] - male_age_bin[0])\/3\n\nplt.title(\"Number of Deaths By Age Group - Male vs Female\")\nax.set_xlabel('Age Bins')\nax.set_ylabel('Number of Deaths in Age Bin')\nax.bar(male_age_bin[:-1], male_deaths, width=width, facecolor='red', label='Male')\nax.bar(female_age_bin[:-1] + width, female_deaths, width=width, facecolor='blue', label='Female')\nax.legend()\n\n","ef6c847a":"labels = ['Male', 'Female']\ndeaths = [males.age.count(), females.age.count()]\n\nfig, ax = plt.subplots()\nax.pie(deaths, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.title(\"Percentage of Female vs. Male Deaths\")\nplt.show()","38d1d6e9":"print(df[df['deceased'] == 1].age.mean())\nprint(df[df['deceased'] == 1].age.max())\nprint(df[df['deceased'] == 1].age.min())","02be838d":"sns.set_style(\"darkgrid\", {\"axes.facecolor\": \".9\"})\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\nfig, ax = plt.subplots(figsize=(25,12))\nplt.title('Number of COVID-19 Related Deaths Per Day in Argentina From ' + str(df.death_date.min())[:10] + ' to ' + str(df.death_date.max())[:10])\nax.set_xlabel('Dates')\nax.set_ylabel('Number of Deaths')\ndf.groupby('death_date').deceased.sum().plot()","c12cb275":"df['Rolling_Weekly_Avg'] = df.groupby(df.index).sex.count().rolling(7).mean()\ntemp_df = pd.DataFrame(df.groupby(df.index).Rolling_Weekly_Avg.unique())\ntemp_df['Rolling_Weekly_Avg'] = temp_df['Rolling_Weekly_Avg'].apply(lambda x: x[0])\n\nsns.set_style(\"darkgrid\", {\"axes.facecolor\": \".9\"})\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\nfig, ax = plt.subplots(figsize=(25,12))\nplt.title('Number of COVID-19 Cases Per Day in Argentina From ' + str(df.index.min())[:10] + ' to ' + str(df.index.max())[:10])\nax.set_xlabel('Dates')\nax.set_ylabel('Number of Cases')\nax = df.groupby(df.index).sex.count().plot(label='Total Cases')\ntemp_df.plot(ax=ax)\nax.legend()","e07f813e":"df[df['ventilation_required'] == 1].deceased.value_counts()","16452c92":"total = df[df['ventilation_required'] == 1].deceased.count()\ndied = df[df['ventilation_required'] == 1].deceased.value_counts()[1]\nprint(f'Percentage of people who pass away after being ventilated: {round(100 * died\/total,2)} percent')","8ada1fed":"sns.set_style(\"darkgrid\", {\"axes.facecolor\": \".9\"})\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\nfig, ax = plt.subplots(figsize=(25,12))\nplt.title('Deaths vs Non-Death After Ventilation')\nax.set_xlabel('Count')\nax.set_ylabel('True or False')\nylabels = ['Alive', 'Dead']\nax.set_yticklabels(ylabels)\ndf[df['ventilation_required'] == 1].deceased.value_counts().plot(kind='barh', ax=ax, color='blue')\n","fc359b1d":"mf_df = df.loc[(df['ventilation_required'] == 1) & (df['deceased'] == 1), ['sex']]\nmf_df.value_counts()","47799fbb":"100 * df[df['deceased'] == 1].deceased.count()\/df.deceased.count()","741c9245":"## This notebook aims to scratch the surface in exploring the COVID-19 Argentina data. Toward the end of the notebook, i list a number of questions that i was interested in knowing and answer via simple visualizations","0f7b0e21":"#SOME QUESTIONS THAT I'M CURIOUS ABOUT WITH THIS DATA\n\n1. WHAT IS THE AVERAGE AGE OF SOMEONE THAT DIES?\n2. WHO DIES MORE? FEMALES OR MALES\n3. WHAT IS THE PERCENTAGE OF PEOPLE WHO DIE AFTER BEING VENTILATED\n4. FOR INDIVIDUALS 1 YR OLD OR OLDER, WHO WAS YOUNGEST AND OLDEST PERSON TO DIE\n5. HOW DOES THE NUMBER CASES PER DAY LOOK LIKE; WHAT ABOUT DEATHS PER DAY?"}}