{"cell_type":{"24f042ad":"code","bec4d731":"code","d18a3bf7":"code","cb9060cd":"code","9c4be545":"code","e19f247d":"code","9b0178c8":"code","f6c27b06":"code","3af09c50":"code","3036030f":"code","d37b4de1":"code","599fdee3":"code","fa9adc35":"code","4ef5c018":"code","163b9a5a":"code","06224930":"code","3a83a6a9":"code","6e053d64":"code","0bf80ea6":"code","14bf6280":"code","599317f7":"code","9c6a81ff":"code","c484c448":"code","58c489c3":"code","11438c17":"code","c2207b17":"code","ff56a5b9":"code","f60c3f36":"code","13129144":"code","0f1a9b85":"markdown","f955a26f":"markdown","0e0932cf":"markdown","fb73fc7b":"markdown","6b119db8":"markdown","ff3b765b":"markdown","2aae6603":"markdown"},"source":{"24f042ad":"# IMPORT LIBRARIES\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport plotly.offline as py \npy.init_notebook_mode(connected=True)                  \nimport plotly.graph_objs as go                         \nimport plotly.tools as tls                             \nfrom collections import Counter                        \nimport plotly.figure_factory as ff\nimport matplotlib.pyplot as plt\n\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score, GridSearchCV                                         # to split the data\nfrom sklearn.metrics import mean_squared_error, roc_auc_score, roc_curve, r2_score, accuracy_score, confusion_matrix, classification_report, fbeta_score     # to evaluate our model\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression, LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.pipeline import FeatureUnion\nfrom sklearn.decomposition import PCA\nfrom sklearn.feature_selection import SelectKBest\nfrom catboost import CatBoostClassifier\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Flatten, Dense\n\nimport warnings\nimport missingno as msno\nfrom sklearn.exceptions import ConvergenceWarning\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.simplefilter(\"ignore\", category=ConvergenceWarning)\nwarnings.filterwarnings(\"ignore\")\n\npd.pandas.set_option('display.max_columns', None)\npd.set_option('display.float_format', lambda x: '%.3f' % x)","bec4d731":"# Reading the dataset\ndf = pd.read_csv(\"..\/input\/emergency-service-triage-application\/data.csv\",sep=';')","d18a3bf7":"# The first 5 observation units of the data set were accessed.\ndf.head()","cb9060cd":"#Feature information\ndf.info()","9c4be545":"# The size of the data set\ndf.shape","e19f247d":"# Descriptive statistics of the data set accessed.\ndf.describe([0.10,0.25,0.50,0.75,0.90,0.95,0.99]).T","9b0178c8":"# Are there any null values?\ndf.isnull().values.any()","f6c27b06":"def missing_values_table(dataframe):\n    variables_with_na = [col for col in dataframe.columns if dataframe[col].isnull().sum() > 0]\n    n_miss = dataframe[variables_with_na].isnull().sum().sort_values(ascending=False)\n    ratio = (dataframe[variables_with_na].isnull().sum() \/ dataframe.shape[0] * 100).sort_values(ascending=False)\n    missing_df = pd.concat([n_miss, np.round(ratio, 2)], axis=1, keys=['n_miss', 'ratio'])\n    print(missing_df)\n    return variables_with_na\n\ndf['NRS_pain'] = df[[\"NRS_pain\"]].replace(\"#BO\ufffd!\",np.NaN)\n\nmissing_values_table(df)","3af09c50":"msno.bar(df, color=\"dodgerblue\")","3036030f":"# Fill Missing Value\n\ndf[\"NRS_pain\"] = df.groupby([\"mistriage\", \"KTAS_expert\"])[\"NRS_pain\"].transform(lambda x: x.fillna(x.mode()[0]))\ndf[\"Saturation\"] = df.groupby([\"mistriage\", \"KTAS_expert\"])[\"Saturation\"].transform(lambda x: x.fillna(x.mode()[0]))\ndf[\"Diagnosis in ED\"] = df.groupby([\"mistriage\", \"KTAS_expert\"])[\"Diagnosis in ED\"].transform(lambda x: x.fillna(x.mode()[0]))","d37b4de1":"df.isnull().values.any()","599fdee3":"msno.bar(df, color=\"dodgerblue\")","fa9adc35":"injury_cat = ['No','Yes']\nsex_cat = ['Female','Male']\npain_cat = ['No','Yes']\nmental_cat = ['Alert','Verbose Response','Pain Response','Unresponsive']\ngroup_cat = ['Local ED (3th Degree)', 'Regional ED (4th Degree)']\narrival_mode_cat = ['Walking','Public Ambulance', 'Private Vehicle','Private Ambulance', 'Other','Other','Other']\ndisposition_cat = ['Discharge', 'Admission to Ward', 'Admission to ICU', 'Discharge', 'Transfer', 'Death', 'Surgery']\nKTAS_cat = ['Emergency','Emergency','Emergency', 'Non-Emergency', 'Non-Emergency']\nmistriage_cat = ['Normal Triage','Over Triage','Under Triage']\n\ndf['KTAS duration_min'] = df['KTAS duration_min'].apply(lambda x: int(float(x.replace(',', '.'))))\ndf['NRS_pain'] = df['NRS_pain'].apply(lambda x:int(x))\n\n###############################################################################################################################\n#Categorical data were entered as numerical data. Therefore, it was categorized again categorically to make it more meaningful. \n###############################################################################################################################\ndf.loc[df[\"Sex\"] == 1, \"Sex\"] = sex_cat[0]\ndf.loc[df[\"Sex\"] == 2, \"Sex\"] = sex_cat[1]\n\ndf.loc[df[\"Injury\"] == 1, \"Injury\"] = injury_cat[0]\ndf.loc[df[\"Injury\"] == 2, \"Injury\"] = injury_cat[1]\n\ndf.loc[df[\"Pain\"] == 0, \"Pain\"] = pain_cat[0]\ndf.loc[df[\"Pain\"] == 1, \"Pain\"] = pain_cat[1]\n\ndf.loc[df[\"Mental\"] == 1, \"Mental\"] = mental_cat[0]\ndf.loc[df[\"Mental\"] == 2, \"Mental\"] = mental_cat[1]\ndf.loc[df[\"Mental\"] == 3, \"Mental\"] = mental_cat[2]\ndf.loc[df[\"Mental\"] == 4, \"Mental\"] = mental_cat[3]\n\ndf.loc[df[\"Group\"] == 1, \"Group\"] = group_cat[0]\ndf.loc[df[\"Group\"] == 2, \"Group\"] = group_cat[1]\n\ndf.loc[df[\"Arrival mode\"] == 1, \"Arrival mode\"] = arrival_mode_cat[0]\ndf.loc[df[\"Arrival mode\"] == 2, \"Arrival mode\"] = arrival_mode_cat[1]\ndf.loc[df[\"Arrival mode\"] == 3, \"Arrival mode\"] = arrival_mode_cat[2]\ndf.loc[df[\"Arrival mode\"] == 4, \"Arrival mode\"] = arrival_mode_cat[3]\ndf.loc[df[\"Arrival mode\"] == 5, \"Arrival mode\"] = arrival_mode_cat[4]\ndf.loc[df[\"Arrival mode\"] == 6, \"Arrival mode\"] = arrival_mode_cat[5]\ndf.loc[df[\"Arrival mode\"] == 7, \"Arrival mode\"] = arrival_mode_cat[6]\n\ndf.loc[df[\"Disposition\"] == 1, \"Disposition\"] = disposition_cat[0]\ndf.loc[df[\"Disposition\"] == 2, \"Disposition\"] = disposition_cat[1]\ndf.loc[df[\"Disposition\"] == 3, \"Disposition\"] = disposition_cat[2]\ndf.loc[df[\"Disposition\"] == 4, \"Disposition\"] = disposition_cat[3]\ndf.loc[df[\"Disposition\"] == 5, \"Disposition\"] = disposition_cat[4]\ndf.loc[df[\"Disposition\"] == 6, \"Disposition\"] = disposition_cat[5]\ndf.loc[df[\"Disposition\"] == 7, \"Disposition\"] = disposition_cat[6]\n\ndf.loc[df[\"KTAS_RN\"] == 1, \"KTAS_RN\"] = KTAS_cat[0]\ndf.loc[df[\"KTAS_RN\"] == 2, \"KTAS_RN\"] = KTAS_cat[1]\ndf.loc[df[\"KTAS_RN\"] == 3, \"KTAS_RN\"] = KTAS_cat[2]\ndf.loc[df[\"KTAS_RN\"] == 4, \"KTAS_RN\"] = KTAS_cat[3]\ndf.loc[df[\"KTAS_RN\"] == 5, \"KTAS_RN\"] = KTAS_cat[4]\n\ndf.loc[df[\"KTAS_expert\"] == 1, \"KTAS_expert\"] = KTAS_cat[0]\ndf.loc[df[\"KTAS_expert\"] == 2, \"KTAS_expert\"] = KTAS_cat[1]\ndf.loc[df[\"KTAS_expert\"] == 3, \"KTAS_expert\"] = KTAS_cat[2]\ndf.loc[df[\"KTAS_expert\"] == 4, \"KTAS_expert\"] = KTAS_cat[3]\ndf.loc[df[\"KTAS_expert\"] == 5, \"KTAS_expert\"] = KTAS_cat[4]\n\ndf.loc[df[\"mistriage\"] == 0, \"mistriage\"] = mistriage_cat[0]\ndf.loc[df[\"mistriage\"] == 1, \"mistriage\"] = mistriage_cat[1]\ndf.loc[df[\"mistriage\"] == 2, \"mistriage\"] = mistriage_cat[2]\n###############################################################################################################################\n##############               Nonsense data was encountered in variables containing numerical data.                 ############\n##############                 These values have been replaced by the mode of the variable.                        ############\n###############################################################################################################################\n\ndf[[\"SBP\",\"DBP\",\"HR\",\"RR\",\"BT\",\"Saturation\"]] = df[[\"SBP\",\"DBP\",\"HR\",\"RR\",\"BT\",\"Saturation\"]].replace(\"??\",0).astype(str).astype(float)\ndf['SBP'] = df['SBP'].replace(0,df['SBP'].mode()[0])\ndf['DBP'] = df['DBP'].replace(0,df['DBP'].mode()[0])\n\n###############################################################################################################################\n##############                                        Feature Engineering                                          ############\n###############################################################################################################################\ninterval = (0, 25, 45, 60, 100)\ncats = ['Young', 'Adult', 'Mid_Age', 'Old']\ndf[\"New_Age\"] = pd.cut(df.Age, interval, labels=cats)\n\ndf.loc[df['SBP'] < 80, 'New_SBP'] = 'Low'\ndf.loc[(df[\"SBP\"] >= 80) & (df[\"SBP\"] <= 120), 'New_SBP'] = 'Normal'\ndf.loc[df['SBP'] > 120, 'New_SBP'] = 'High'\n\ndf.loc[df['DBP'] < 60, 'New_DBP'] = 'Low'\ndf.loc[(df[\"DBP\"] >= 60) & (df[\"DBP\"] <= 80), 'New_DBP'] = 'Normal'\ndf.loc[df['DBP'] > 80, 'New_DBP'] = 'High'\n\ndf.loc[df['HR'] < 45, 'New_HR'] = 'Low'\ndf.loc[(df[\"HR\"] >= 45) & (df[\"HR\"] <= 100), 'New_HR'] = 'Normal'\ndf.loc[df['HR'] > 100, 'New_HR'] = 'High'\n\ndf.loc[df['RR'] < 12, 'New_RR'] = 'Low'\ndf.loc[(df[\"RR\"] >= 12) & (df[\"RR\"] <= 25), 'New_RR'] = 'Normal'\ndf.loc[df['RR'] > 25, 'New_RR'] = 'High'\n\ndf.loc[df['BT'] < 36.4, 'New_BT'] = 'Low'\ndf.loc[(df[\"BT\"] >= 36.4) & (df[\"BT\"] <= 37.6), 'New_BT'] = 'Normal'\ndf.loc[df['BT'] > 37.6, 'New_BT'] = 'High'\n\ndf.loc[df['NRS_pain'] < 3, 'New_NRS_pain'] = 'Low Pain'\ndf.loc[(df[\"NRS_pain\"] >= 3) & (df[\"NRS_pain\"] <= 7), 'New_NRS_pain'] = 'Pain'\ndf.loc[df['NRS_pain'] > 7, 'New_NRS_pain'] = 'High Pain'\n\ndf.loc[df['KTAS duration_min'] < 10, 'New_KTAS_duration_min'] = 'Immediate'\ndf.loc[(df[\"KTAS duration_min\"] >= 10) & (df[\"KTAS duration_min\"] <= 60), 'New_KTAS_duration_min'] = 'Very Urgent'\ndf.loc[(df[\"KTAS duration_min\"] >= 61) & (df[\"KTAS duration_min\"] <= 120), 'New_KTAS_duration_min'] = 'Urgent'\ndf.loc[(df[\"KTAS duration_min\"] >= 121) & (df[\"KTAS duration_min\"] <= 240), 'New_KTAS_duration_min'] = 'Standart'\ndf.loc[df['KTAS duration_min'] > 240, 'New_KTAS_duration_min'] = 'Non-Urgent'\n\ndf.loc[df['Length of stay_min'] < 10, 'New_Length_of_stay_min'] = 'Immediate'\ndf.loc[(df[\"Length of stay_min\"] >= 10) & (df[\"Length of stay_min\"] <= 60), 'New_Length_of_stay_min'] = 'Very Urgent'\ndf.loc[(df[\"Length of stay_min\"] >= 61) & (df[\"Length of stay_min\"] <= 120), 'New_Length_of_stay_min'] = 'Urgent'\ndf.loc[(df[\"Length of stay_min\"] >= 121) & (df[\"Length of stay_min\"] <= 240), 'New_Length_of_stay_min'] = 'Standart'\ndf.loc[df['Length of stay_min'] > 240, 'New_Length_of_stay_min'] = 'Non-Urgent'\n\ndf.head()","4ef5c018":"##################################################################################################################\ndef outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.05)\n    quartile3 = dataframe[variable].quantile(0.95)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n##################################################################################################################\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n##################################################################################################################\ndef has_outliers(dataframe, num_col_names, plot=False):\n    variable_names = []\n    for col in num_col_names:\n        low_limit, up_limit = outlier_thresholds(dataframe, col)\n        if dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].any(axis=None):\n            number_of_outliers = dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].shape[0]\n            print(col, \":\", number_of_outliers)\n            variable_names.append(col)\n            if plot:\n                sns.boxplot(x=dataframe[col])\n                plt.show()\n    return variable_names","163b9a5a":"has_outliers(df, [\"Length of stay_min\",\"Saturation\",\"SBP\",\"DBP\",\"HR\",\"RR\",\"BT\"])","06224930":"outlier_column = [\"Length of stay_min\",\"Saturation\",\"RR\",\"BT\"]\nfor i in outlier_column:\n    replace_with_thresholds(df,i)","3a83a6a9":"has_outliers(df, [\"SBP\",\"DBP\",\"HR\",\"RR\",\"BT\"])","6e053d64":"# Histogram and density graphs of all variables were accessed.\nfig, ax = plt.subplots(6,2, figsize=(15,25))\nsns.distplot(df['Age'], bins = 20, ax=ax[0,0]) \nsns.distplot(df['Patients number per hour'], bins = 20, ax=ax[0,1]) \nsns.distplot(df['SBP'], bins = 20, ax=ax[1,0]) \nsns.distplot(df['DBP'], bins = 20, ax=ax[1,1]) \nsns.distplot(df['HR'], bins = 20, ax=ax[2,0])\nsns.distplot(df['RR'], bins = 20, ax=ax[2,1])\nsns.distplot(df['BT'], bins = 20, ax=ax[3,0]) \nsns.distplot(df['Saturation'], bins = 20, ax=ax[3,1]) \nsns.distplot(df['Error_group'], bins = 20, ax=ax[4,0])\nsns.distplot(df['Length of stay_min'], bins = 20, ax=ax[4,1]) \nsns.distplot(df['KTAS duration_min'], bins = 20, ax=ax[5,0])","0bf80ea6":"fig, ax = plt.subplots(10,2, figsize=(15,35))\nsns.countplot('Group',data=df, ax=ax[0,0]);\ndf[\"Age\"].hist(edgecolor = \"black\", ax=ax[0,1]);\nsns.countplot('Sex',data=df, ax=ax[1,0]);\nsns.countplot('Arrival mode',data=df, ax=ax[1,1]);\nsns.countplot('Injury',data=df, ax=ax[2,0]);\nsns.countplot('Mental',data=df, ax=ax[2,1]);\nsns.countplot('Pain',data=df, ax=ax[3,0]);\nsns.countplot('KTAS_RN',data=df, ax=ax[3,1]);\nsns.countplot('Disposition',data=df, ax=ax[4,0]);\nsns.countplot('KTAS_expert',data=df, ax=ax[4,1]);\nsns.countplot('Error_group',data=df, ax=ax[5,0]);\nsns.countplot('New_Age',data=df, ax=ax[5,1]);\nsns.countplot('New_SBP',data=df, ax=ax[6,0]);\nsns.countplot('New_DBP',data=df, ax=ax[6,1]);\nsns.countplot('New_HR',data=df, ax=ax[7,0]);\nsns.countplot('New_RR',data=df, ax=ax[7,1]);\nsns.countplot('New_BT',data=df, ax=ax[8,0]);\nsns.countplot('New_NRS_pain',data=df, ax=ax[8,1]);\nsns.countplot('New_KTAS_duration_min',data=df, ax=ax[9,0]);\nsns.countplot('New_Length_of_stay_min',data=df, ax=ax[9,1]);","14bf6280":"fig, ax = plt.subplots(4,2, figsize=(15,20))\nsns.boxplot(x=df[\"Age\"], ax=ax[0,0]);\nsns.boxplot(x=df[\"SBP\"], ax=ax[0,1]);\nsns.boxplot(x=df[\"DBP\"], ax=ax[1,0]);\nsns.boxplot(x=df[\"HR\"], ax=ax[1,1]);\nsns.boxplot(x=df[\"RR\"], ax=ax[2,0]);\nsns.boxplot(x=df[\"BT\"], ax=ax[2,1]);\nsns.boxplot(x=df[\"Length of stay_min\"], ax=ax[3,0]);\nsns.boxplot(x=df[\"KTAS duration_min\"], ax=ax[3,1]);","599317f7":"def one_hot_encoder(dataframe, categorical_columns, nan_as_category=False):\n    original_columns = list(dataframe.columns)\n    dataframe = pd.get_dummies(dataframe, columns=categorical_columns,\n                               dummy_na=nan_as_category, drop_first=True)\n    new_columns = [col for col in dataframe.columns if col not in original_columns]\n    return dataframe, new_columns\n\ndef robust_scaler(variable):\n    var_median = variable.median()\n    quartile1 = variable.quantile(0.05)\n    quartile3 = variable.quantile(0.95)\n    interquantile_range = quartile3 - quartile1\n    if int(interquantile_range) == 0:\n        quartile1 = variable.quantile(0.05)\n        quartile3 = variable.quantile(0.95)\n        interquantile_range = quartile3 - quartile1\n        z = (variable - var_median) \/ interquantile_range\n        return round(z, 3)\n    else:\n        z = (variable - var_median) \/ interquantile_range\n    return round(z, 3)","9c6a81ff":"new_df = df[[\"Group\", \"Sex\", \"Patients number per hour\", \"Arrival mode\", \"Injury\", \"Mental\", \"Pain\", \"Saturation\", \"KTAS_RN\",\n\"Disposition\", \"KTAS_expert\", \"Length of stay_min\", \"mistriage\", \"New_Age\", \"New_SBP\", \"New_DBP\", \"New_HR\",\n\"New_RR\", \"New_BT\", \"New_NRS_pain\", \"New_KTAS_duration_min\", \"New_Length_of_stay_min\"]]\nnew_df.head()","c484c448":"like_num = [col for col in new_df.columns if new_df[col].dtypes != 'O' and len(new_df[col].value_counts()) > 10]\ncols_need_scale = [col for col in new_df.columns if col not in like_num\n                   and col not in 'mistriage']","58c489c3":"for col in like_num:\n    new_df[col] = robust_scaler(new_df[col])\n\nnew_df, one_hot_encodeds = one_hot_encoder(new_df, cols_need_scale)","11438c17":"X = new_df.drop('mistriage', axis=1)\ny = np.ravel(new_df[['mistriage']])\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state = 357)","c2207b17":"X_train.head()","ff56a5b9":"# Let's set the parameters to find the best parameter to use in our models. These parameters will be chosen as the best to visit with GridSearchCV.\nrf_params = {\"max_depth\": [3, 5, 8],\n             \"max_features\": [8, 15, 25],\n             \"n_estimators\": [200, 500, 1000],\n             \"min_samples_split\": [2, 5, 10]}\n\nlgbm_params = {\"learning_rate\": [0.01, 0.1],\n               \"n_estimators\": [200, 500, 1000],\n               \"max_depth\": [3, 5, 8],\n               \"colsample_bytree\": [1, 0.8, 0.5]}\n\n#xgb_params = {\"learning_rate\": [0.1, 0.01],\n#              \"max_depth\": [3, 5, 8],\n#              \"n_estimators\": [200, 500, 1000],\n#              \"colsample_bytree\": [0.7, 1]}\n\nrf = RandomForestClassifier(random_state=357)\nlgbm = LGBMClassifier(random_state=357)\n#xgb = XGBClassifier(random_state=357)\n\n# Let's try the parameters one by one with the help of GridSearchCV and find the best parameter.\ngs_cv_rf = GridSearchCV(rf, rf_params, cv=10, n_jobs=-1, verbose=2).fit(X_train, y_train)\ngs_cv_lgbm = GridSearchCV(lgbm, lgbm_params, cv=10, n_jobs=-1, verbose=2).fit(X_train, y_train)\n#gs_cv_xgb = GridSearchCV(xgb, xgb_params, cv=10, n_jobs=-1, verbose=2).fit(X_train, y_train)","f60c3f36":"#lgr_tuned = LogisticRegression(random_state=357).fit(X_train, y_train)\nknn_tuned = KNeighborsClassifier().fit(X_train, y_train)\nsvm_tuned = SVC(random_state=357,gamma='auto').fit(X_train, y_train)\ngnb_tuned = GaussianNB().fit(X_train, y_train)\ndtc_tuned = DecisionTreeClassifier(random_state=357).fit(X_train, y_train)\n\n# Let's tune the models with the best parameters found.\nrf_tuned = RandomForestClassifier(**gs_cv_rf.best_params_, random_state=357).fit(X_train, y_train)\nlgbm_tuned = LGBMClassifier(**gs_cv_lgbm.best_params_, random_state=357).fit(X_train, y_train)\n#xgb_tuned = XGBClassifier(**gs_cv_xgb.best_params_, random_state=357).fit(X_train, y_train)","13129144":"# Result\nmodels = [#(\"LGR\", lgr_tuned),\n          (\"KNN\", knn_tuned),\n          (\"SVM\", svm_tuned),\n          (\"GNB\", gnb_tuned),\n          (\"DTC\", dtc_tuned),\n          (\"RF\", rf_tuned),\n          (\"LGBM\", lgbm_tuned),\n          #(\"XGB\", xgb_tuned)\n         ]\n\nfor name, model in models:\n    y_pred = model.predict(X_test)\n    acc = accuracy_score(y_test, y_pred)\n    msg = \"%s: (%f)\" % (name, acc)\n    print(msg)","0f1a9b85":"## 3.3. Outlier Anaysis","f955a26f":"# 1.  Data Acquisition\n\n#### Purpose:\nTo identify emergency department triage accuracy using the Korean Triage and Acuity Scale (KTAS) and evaluate the causes of mistriage.\n#### Variables:\n- <b>Group:<\/b> \n- <b>Sex:<\/b> Sex of the patient \n- <b>Age:<\/b> Age of the patient \n- <b>Patients number per hour:<\/b>\n- <b>Arrival mode:<\/b> Type of transportation to the hospital \n- <b>Injury:<\/b> Whether the patient is injured or not \n- <b>Chief_complain:<\/b> The patient's complaint \n- <b>Mental:<\/b> The mental state of the patient \n- <b>Pain:<\/b> Whether the patient has pain \n- <b>NRS_pain:<\/b> Nurse's assessment of pain for the patient \n- <b>SBP:<\/b> Systolic Blood Pressure.\n- <b>DBP:<\/b> Diastolic Blood Pressure.\n- <b>HR:<\/b> Heat Rate.\n- <b>RR:<\/b> Respiratory rate\n- <b>BT:<\/b> Body Temperature\n- <b>Saturation:<\/b> \n- <b>KTAS_RN:<\/b>\n- <b>Diagnosis in ED:<\/b>\n- <b>Disposition:<\/b> Action to be taken \n- <b>KTAS_expert:<\/b>\n- <b>Error_group:<\/b>\n- <b>Length of stay_min:<\/b> \n- <b>KTAS duration_min:<\/b>\n- <b>mistriage:<\/b>\n\n\n\n\n\n\n\nThe technical document in the project of the data set has been reached. It was seen in this document that some numerical data were actually categorical. These values are as follows. \n\n- Reason Visit : Injury [1 = No, 2= Yes]\n- Gender : Sex [1 = Famale, 2 = Male]\n- Pain : Pain [1 = Yes, 0 = No]\n- Menatal : Mental [1 = Alert, 2 = Verbol Response, 3 = Pain Response, 4 = Unresponse]\n- Type of ED : Group [1 = Local ED 3th Degree, 2 = Regional ED 4tg Degree]\n- Mode of Arrival : Arrival Mode [1 = Walking, 2 = Public Ambulance, 3 = Private Vehicle, 4 = Private Ambulance, 5,6,7 = Other]\n- Disposition : Disposition [1 = Dischange, 2 = Admission to ward, 3 = Admission to ICU, 4 = Disharge, 5 = Transfer, 6 = Death, 7 = Surgery]\n- KTAS : KTAS... [1,2,3 = Emergency, 4,5 = Non-Emergency]","0e0932cf":"## 2. Exploration Data Analysis (EDA)","fb73fc7b":"## 3.2. Feature Engineering","6b119db8":"# 5. Data Segmentetion with Machine Learning Models\n### 5.1. One Hot Encoding and Robust Scaler","ff3b765b":"## 4. DATA VISUALIZATION","2aae6603":"# 3. DATA PREPROCESSING\n# 3.1. Missing Value Analysis"}}