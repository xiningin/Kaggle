{"cell_type":{"c829131a":"code","d4ccaf44":"code","3784ed10":"code","ee07f0d0":"code","983e9f93":"code","81ca959f":"code","cc71944f":"code","7bb0c630":"code","9da76eb7":"code","a442b51c":"code","5722d000":"code","efb9b1e2":"code","a6171d9f":"code","77d5f154":"code","32f958d5":"code","b155bc78":"code","973f71e5":"code","8c805607":"code","3eb92a82":"code","14a16ab7":"code","5e407033":"code","2edd2ffa":"code","d2c3eadc":"code","9a58eb50":"code","13bd1e82":"code","7f33e410":"code","ec82dea8":"code","e7f35d21":"code","546a6ebf":"code","b6101c8a":"code","19ed67dd":"markdown"},"source":{"c829131a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","d4ccaf44":"data=pd.read_csv('..\/input\/charcters_stats.csv')","3784ed10":"series=data['Alignment'] # this is a series definition\nprint(type(series))\ndataFramework=data[['Power']] # this is a Data Framework Definition\nprint(type(dataFramework))","ee07f0d0":"data.info()","983e9f93":"data.corr()\n","81ca959f":"data.head(10)","cc71944f":"data.columns\n","7bb0c630":"#Line Plot\ndata.Strength.plot(kind='line',color='g',label='Strength',linewidth=1,alpha = 0.5,grid =True, linestyle= ':')\ndata.Speed.plot(color='r',label='Speed',linewidth=1,alpha = 0.5,grid =True, linestyle= '-.')\nplt.legend(loc='upper left')\nplt.xlabel('x axis') # name of label x\nplt.ylabel('y axis') # name of label y\nplt.title('Line Plot') # title of plot\nplt.show()","9da76eb7":"# Scater plot \n# x = attack y= Durability\ndata.plot(kind='scatter', x='Strength',y='Durability',alpha=0.5,color='blue')\nplt.xlabel1=('Strength')\nplt.ylabel1=('Durability')\nplt.title('Strength and Durability Plot')\n#Title = Title of plot\n","a442b51c":"# Histogram \n# bins = number of bar in figure \n\ndata.Total.plot(kind = 'hist',bins =100,figsize = (20,20))\nplt.legend(loc='upper center')\nplt.xlabel('x axis')\nplt.show()","5722d000":"#clf() = cleans it up again you can start a fresh\ndata.Speed.plot(kind = 'hist',bins = 100)\nplt.clf()","efb9b1e2":"data[(data['Intelligence']>=100) & (data['Intelligence']<=150)]\n","a6171d9f":"data[(data['Strength']>90)]","77d5f154":"data[np.logical_and(data['Combat']<70, data['Intelligence']>90)]","32f958d5":"# \u0130f \nx = data[(data['Durability']>=60) & (data['Power']<=70) &(data['Alignment'] == \"bad\") & (data['Total']>=360) ]\nnew = list(x['Name'].unique())\nfor each in new:\n    tmp = x[x['Name'] == each]\n    if(tmp['Name'].values[0][0] == 'M'): print(tmp['Name'].values[0])    \n","b155bc78":"type(tmp)","973f71e5":"for index ,value in data[['Strength']][0:5].iterrows():\n    print(index , \" \", value)","8c805607":"\nUSER DEF\u0130NED FUNCTIONS\n\n","3eb92a82":"def function_def():\n    t=(1,2,3)\n    return t\na,b,c = function_def()\nprint(a,b,c)","14a16ab7":"DEFAULT AND FLEX\u0130BLE FUNCTIONS","5e407033":"def merge(name, surname='unnamed'): #surname is already defined ,if it doesnt get paramater for surname, surname use defined paramaters\n    return  name + \" \" + surname \nprint(merge('Aybars'))\nprint(merge('Aybars','Dorman'))","2edd2ffa":"#Scope\n\n# guess print what\nx=2\ndef f():\n    x=3\n    return x\nprint(x)    # x = 2  Global Scope\nprint(f())  # x = 3  Local Scope\n","d2c3eadc":"#Nested function\ndef square():\n    \n    def add():\n        x = 17\n        y = -8\n        z =  3\n        w = x + y + z\n        return w\n    return add()**2\nprint(square())\n","9a58eb50":"#Argument tutorial\ndef f(a, b=19, c=78):\n    y= a+b+c\n    return y\nprint(f(5))\n# what if we want to change default arguments\nprint(f(4,5,6))\n\n","13bd1e82":"#flexible arguments *args\ndef f(*args):\n    for each in args:\n        print(each)\nf(1)\nprint(\" \")\nf(1,2,4,5,6,7)\n\n#flexible arguments **kwargs\ndef f(**kwargs):\n    for key , value in kwargs.items():\n        print(key, \" \", value)\nf(country ='spain',capital = ' madrid',population =1700000)\n","7f33e410":"# LAMBDA FUNCTION Faster way of writting function\n\nsquare = lambda x: x**2 # where x is name of argument\nprint(square(4))\ntot = lambda x,y,z: x+y+z\n\nprint(square(4))\nprint(tot(5,6,7))\n","ec82dea8":"#Anonymous Function\nnumber_list = [1,2,3]\ny =  map(lambda x: x**2,number_list)\nprint(list(y))\n","e7f35d21":"# Example of list comprehension\nnum1 = [1,2,3]\nnum2 = [i+10 for i in num1]\nprint(num2)","546a6ebf":"num1 = [5,10,15]\nnum2 = [i**2 if i == 10 else  i-5 if i < 7 else i+5  for i in num1]\nprint(num2)\n","b6101c8a":"threeshold = sum(data[\"Speed\"]\/len(data[\"Speed\"]))\nprint (threeshold)\ndata[\"Speed_Level\"] = [\"high\" if i > threshold else \"low\" for i in data.Speed]\ndata.loc[1:10,[\"Speed_Level\",\"Speed\",\"Name\"]]","19ed67dd":"**LIST COMPREHENS\u0130ON**"}}