{"cell_type":{"7663003d":"code","e365b5ae":"code","5496e9de":"code","d91851c5":"code","3f25a6ca":"code","54b8042d":"code","d388397d":"code","df3c0b66":"code","58af8c32":"markdown"},"source":{"7663003d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom scipy.optimize import curve_fit\n\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport matplotlib.ticker as mtick\nfrom matplotlib.ticker import FuncFormatter\nimport matplotlib.gridspec as gridspec\n\nimport seaborn as sns\nimport math\nimport datetime\nfrom datetime import timedelta  \n\n\n#formatting functions for charts\ndef millions(x, pos):\n    'The two args are the value and tick position'\n    return '%1.1fM' % (x * 1e-6)\n\n#formatting functions for charts\ndef thousands(x, pos):\n    'The two args are the value and tick position'\n    return '%1.1fT' % (x * 1e-3)\n\n","e365b5ae":"#census populations\n#add entries to this table in order to run simulations\nPopulation = {\n'AL':4908621,\n'AK':734002,\n'AZ':7378494,\n'AR':3038999,\n'CA':39937489,\n'CO':5845526,\n'CT':3563077,\n'DE':982895,\n'FL':21992985,\n'GA':10736059,\n'HI':1412687,\n'ID':1826156,\n'IL':12659682,\n'IN':6745354,\n'IA':3179849,\n'KS':2910357,\n'KY':4499692,\n'LA':4645184,\n'ME':1345790,\n'MD':6083116,\n'MA':6976597,\n'MI':10045029,\n'MN':5700671,\n'MS':2989260,\n'MO':6169270,\n'MT':1086759,\n'NE':1952570,\n'NV':3139658,\n'NH':1371246,\n'NJ':8936574,\n'NM':2096640,\n'NY':19440469,\n'NC':10611862,\n'ND':761723,\n'OH':11747694,\n'OK':3954821,\n'OR':4301089,\n'PA':12820878,\n'RI':1056161,\n'SC':5210095,\n'SD':903027,\n'TN':6897576,\n'TX':29472295,\n'UT':3282115,\n'VT':628061,\n'VA':8626207,\n'WA':7797095,\n'WV':1778070,\n'WI':5851754,\n'WY':567025,\n'DC':720687   \n}\n\nUS_States_codes = {\n'AL':'Alabama',\n'AK':'Alaska',\n'AZ':'Arizona',\n'AR':'Arkansas',\n'CA':'California',\n'CO':'Colorado',\n'CT':'Connecticut',\n'DE':'Delaware',\n'FL':'Florida',\n'GA':'Georgia',\n'HI':'Hawaii',\n'ID':'Idaho',\n'IL':'Illinois',\n'IN':'Indiana',\n'IA':'Iowa',\n'KS':'Kansas',\n'KY':'Kentucky',\n'LA':'Louisiana',\n'ME':'Maine',\n'MD':'Maryland',\n'MA':'Massachusetts',\n'MI':'Michigan',\n'MN':'Minnesota',\n'MS':'Mississippi',\n'MO':'Missouri',\n'MT':'Montana',\n'NE':'Nebraska',\n'NV':'Nevada',\n'NH':'New Hampshire',\n'NJ':'New Jersey',\n'NM':'New Mexico',\n'NY':'New York',\n'NC':'North Carolina',\n'ND':'North Dakota',\n'OH':'Ohio',\n'OK':'Oklahoma',\n'OR':'Oregon',\n'PA':'Pennsylvania',\n'RI':'Rhode Island',\n'SC':'South Carolina',\n'SD':'South Dakota',\n'TN':'Tennessee',\n'TX':'Texas',\n'UT':'Utah',\n'VT':'Vermont',\n'VA':'Virginia',\n'WA':'Washington',\n'WV':'West Virginia',\n'WI':'Wisconsin',\n'WY':'Wyoming',\n'DC':'District of Columbia',\n'AS':'Samoa',\n'GU':'Guam',\n'PR':'Puerto Rico'\n}","5496e9de":"import urllib, json\nurl = 'https:\/\/covidtracking.com\/api\/states\/daily'\n\nimport requests\nr = requests.get(url)\n\ndata = pd.DataFrame(r.json())\ndata['date'] = pd.to_datetime(data['date'], format='%Y%m%d')\n\nd = data[data['state']=='NY']\nfig, axs = plt.subplots(1,3, figsize=(12,4))\n\nax = plt.subplot(131)\nplt.plot(d['date'], d['death'],label='death')\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%B-%d'))\nplt.legend()\nplt.grid()\n\nax = plt.subplot(132)\nplt.plot(d['date'], d['hospitalizedCurrently'],label='hospitalized')\nplt.legend()\nplt.grid()\n\nax = plt.subplot(133)\nplt.plot(d['date'], d['positive'],label='positive')\nplt.legend()\nplt.grid()\n\n\nfig.autofmt_xdate()\nplt.show()\n\ndisplay(d.head())\n\n","d91851c5":"data.columns","3f25a6ca":"#######################################################\n# SIR model with INTERVENTION\n#------------------------------------------------------\n# params:\n#\n# x                    : array of number of days since inception (not used except to size output); in the calibration below, inception starts on the first day reported fatalities reach a CUTOFF threshold\n# i0                   : initial percentage of infected population, for 1 per million: i0 = 1e-6\n# beta                 : initial daily rate of transmission by infected people to susceptible people, for R0=2.7 and gamma=1\/21: beta=R0*gamma=2.7\/21 \n# gamma                : daily rate of recovery or death of infected people, for a 21 day speed of recovery or death: gamma = 1\/21\n# hospitalization_rate : daily rate of infected people needing hospitalization\n# death_rate           : daily death rate of infected people (assuming 1% of infected people die about 3 weeks after infection: death_rate=0.01\/21)\n#\n# intervention_day : number of days after inception for intervention to start to reduce the initial transmission rate (beta)\n# intervention_lag : number of days it takes for intervention to reach full effect (linear interp)\n# intervention_effect : percentage reduction of initial transmission  rate, 0.25 for 25% reduction of initial beta after full intervention takes effect\n########################################################\n\n#-------------------------------------------------------\n#the number returned by this function will be multiplied with the initial beta in order to estimate the transmission rate each day of the simulation\ndef intervention(day, day0, lag=5, effect=0.25):\n    if day>day0+lag:\n        return 1.0 - effect\n    if day>day0:\n        return 1.0 - effect * (day-day0)\/lag\n    return 1.0\n\n'''\ndays = np.arange(300)\neffects = np.zeros(300)\nfor d in days:\n    effects[d] = intervention(d, 200, 3, 0.75)\nplt.plot(days, effects)\nplt.show()\n'''\n\n#-------------------------------------------------------\n#this function worsens the death_rate (higher) and hospitalization_rate (lower) as hospitals fill up\n#inputs:\n#-hospitalized : percentage of population current hospitalized\n#-hospital_capacity : percentage of population at which hospitals would be full\n#-death_rate : percentage of infected people that will die if there is room in hospitals\n#-hospitalization_rate : percentage of infected people that will be admitted to hospitals\n#-worst_case : maximum percentage increase\/decrease of death_rate and hospitalization_rate because of rationing of hospital capacity\n#outputs:\n# (death_rate, hospitalization_rate) : effective rates given the level of hospitalization\ndef rationing(hospitalized,infectious, hospital_capacity, death_rate, hospitalization_rate, detection_rate, detection_capacity):\n    \n    deathr = death_rate + 0.5 * death_rate * (1 - math.exp(-hospitalized \/ hospital_capacity))\n    \n    hr = hospitalization_rate * math.exp(-hospitalized \/ hospital_capacity)   \n    \n    detectr = detection_rate * math.exp(-infectious \/ detection_capacity)   \n    \n    return deathr, hr, detectr\n\n\nhospitalized = []\nres = []\nfor i in range(0,800):\n    h = i * 1e-6\n    hospitalized.append(i)\n    dr, hr, detectr = rationing(hospitalized=h, infectious=h, hospital_capacity=400e-6, death_rate=0.01, hospitalization_rate=0.20, detection_rate=0.3, detection_capacity=400e-6)\n    res.append([dr,hr,detectr])\nplt.plot(hospitalized, res)\nplt.show()\n#display(death_rate)\n\n\n#-------------------------------------------------------\n\n#-------------------------------------------------------\n# basic daily integration of a classic SIR model with a time-variable beta parameter=beta*intervention(day)\n# the function returns a numpy matrix, with a row per day and the following columns (cumulative results since day of inception)\ncS   = 0  #percentage of Susceptible people\ncE   = 1  #percentage of Exposed people who are incubating and not yet infectious\ncI1  = 2  #percentage of Infectious people in the first phase (before hospitalization might be needed)\ncI2  = 3  #percentage of Infectious people in the second phase (hospitalization not needed)\ncH   = 4  #percentage of Hospitalized people\ncR   = 5  #percentage of Recovered people (not including fatalities)\ncF   = 6  #percentage of Fatalities\ncP   = 7  #percentage of Positive cases\ncRe  = 8  #effective rate of transmission\ncNum = 9  #number of parameters\ndef SEIR(x, i0, beta, gamma_i1, gamma_i2, gamma_h, incubation_rate, hospitalization_rate, death_rate, intervention_day, intervention_lag, intervention_effect, detection_rate, hospital_capacity, detection_capacity):\n    \n    #start the simulation earlier than the calibration data to remove the initial oscillation due to the insertion of an intial exposed person\n    early_start = 2 * math.ceil(1\/incubation_rate)  \n    n = early_start + x.size\n    y = np.zeros((n,cNum))\n\n    for i in range(0,n):\n        \n        if i==0:\n            #initial conditions\n            exposed      = i0  #incubating\n            infectious1  = 0   #first phase after incubation: developing symptoms\n            infectious2  = 0   #second phase after incubation: people do not need hospitalization\n            hospitalized = 0   #second phase after incubation: people who are hospitalized\n            positives    = 0   #detected positives\n            fatalities   = 0   #death, from both stay-at-home and hospitalized categories\n            recovered    = 0   #or recover\n            susceptible  = 1.0 - i0 \n            infectious   = 0\n          \n        else:\n            #compute daily variations           \n            \n            infection_rate = beta * intervention(i-early_start, intervention_day, intervention_lag, intervention_effect)\n            \n            infectious = infectious1 + infectious2 + hospitalized\n            \n            dr, hr, detectr = rationing(hospitalized=hospitalized, infectious=infectious, hospital_capacity=hospital_capacity, death_rate=death_rate, \n                               hospitalization_rate=hospitalization_rate, detection_rate=detection_rate, detection_capacity=detection_capacity)\n            \n            newlyexposed = infection_rate * susceptible * infectious\n            \n            newlyinfectious1 = incubation_rate * exposed\n\n            newlyinfectious2 = (1 - hr) * gamma_i1 * infectious1\n\n            newlyhospitalized = hr * gamma_i1 * infectious1\n\n            d_fatalities = dr * (gamma_i2 * infectious2 + gamma_h * hospitalized)\n            \n            d_recovered = (1 - dr) * (gamma_i2 * infectious2 + gamma_h * hospitalized)\n\n            d_exposed = newlyexposed - newlyinfectious1  #these people are incubating, but not yet infectious; population is newly infected people less people finishing incubation\n\n            d_positives = detectr * newlyinfectious1 #assume detection would happen at the end of incubation, when symptoms appear.\n            \n            d_infectious1 = newlyinfectious1 - newlyinfectious2 - newlyhospitalized\n            \n            d_infectious2 = newlyinfectious2 - gamma_i2 * infectious2\n            \n            d_hospitalized = newlyhospitalized - gamma_h * hospitalized   \n            \n            d_susceptible = - newlyexposed\n            \n            \n            #integrate and store in result array\n            susceptible += d_susceptible\n            exposed += d_exposed\n            infectious1 += d_infectious1\n            infectious2 += d_infectious2\n            hospitalized += d_hospitalized\n            recovered += d_recovered\n            fatalities += d_fatalities\n            positives += d_positives\n            \n        y[i,cS]  = susceptible\n        y[i,cE]  = exposed\n        y[i,cI1] = infectious1\n        y[i,cI2] = infectious2\n        y[i,cH]  = hospitalized\n        y[i,cR]  = recovered\n        y[i,cF]  = fatalities\n        y[i,cP]  = positives  #cumul of infected, does not come down on recovery. assuming all newly infected people are immediately detected\n\n        #average number of people infected by an infectious person\n        if infectious>0:\n            y[i,cRe] = newlyexposed \/ infectious\n        \n            \n    return y[early_start:,:]  #do not return the initialization period\n\n\nx = np.arange(100)\n\n#plot number of fatalities \n#in a population on 1 million people, with one person initially infected, \n#assuming 3 weeks recovery rate, intial R0=5=beta\/gamma, 20% of cases require hospitalization, and 1% of infected people die\npopulation = 1e6  \ni0 = 1000e-6\n\ngamma_i1 = 1\/7                         #it takes 7 days for symptoms to reach a point where hospitalization may be needed\ngamma_i2 = 1\/7                         #if hospitalization is not needed, it takes another 7 days to recover while staying at home and stop being infectious, or to die\ngamma_h  = 1\/14                        #if hospitalization is needed, it takes 14 days to recover or die\nbeta = 2.5 * (gamma_i1+gamma_i2)       #beta = R0 * gamma\nincubation_rate = 1\/5                  #it takes 5 days after exposure for people to become infectious\nhospitalization_rate = 0.20            #20% of infected people will require hospitalization\ndeath_rate = 0.01                      #1% of infected people will die, either stay-at-home or hospitalized\nintervention_day = 0        \nintervention_lag = 0\nintervention_effect = 0\ndetection_rate = 1                     #100% of newly infectious cases that are detected as positives\nhospital_capacity = 1000e-6            #hospital capacity as percentage of total population\ndetection_capacity = 1000e-6           #capacity to detect infectious cases, as percentage of total population\n\n#baseline: intervention has no effect in reducing initial transmission rate\ny0 = population * SEIR(x, i0=i0, beta=beta, gamma_i1=gamma_i1, gamma_i2=gamma_i2, gamma_h=gamma_h, incubation_rate=incubation_rate, hospitalization_rate=hospitalization_rate, death_rate=death_rate, \n         intervention_day=intervention_day, intervention_lag=intervention_lag, intervention_effect=intervention_effect,\n         detection_rate=detection_rate,\n         hospital_capacity=hospital_capacity, detection_capacity=detection_capacity)\n\ngamma_i1 = 1\/7                         #it takes 7 days for symptoms to reach a point where hospitalization may be needed\ngamma_i2 = 1\/7                         #if hospitalization is not needed, it takes another 7 days to recover while staying at home and stop being infectious, or to die\ngamma_h  = 1\/14                        #if hospitalization is needed, it takes 14 days to recover or die\nbeta = 2.5 * (gamma_i1+gamma_i2)       #beta = R0 * gamma\nincubation_rate = 1\/5                  #it takes 5 days after exposure for people to become infectious\nhospitalization_rate = 0.20            #20% of infected people will require hospitalization\ndeath_rate = 0.01                      #1% of infected people will die, either stay-at-home or hospitalized\nintervention_day = 0        \nintervention_lag = 0\nintervention_effect = 0\ndetection_rate = 1                     #100% of newly infectious cases that are detected as positives\nhospital_capacity = 500e-6             #hospital capacity as percentage of total population\ndetection_capacity = 5000e-6           #capacity to detect infectious cases, as percentage of total population\n\ny = population * SEIR(x, i0=i0, beta=beta, gamma_i1=gamma_i1, gamma_i2=gamma_i2, gamma_h=gamma_h, incubation_rate=incubation_rate, hospitalization_rate=hospitalization_rate, death_rate=death_rate, \n         intervention_day=intervention_day, intervention_lag=intervention_lag, intervention_effect=intervention_effect,\n         detection_rate=detection_rate,\n         hospital_capacity=hospital_capacity, detection_capacity=detection_capacity)\n\nfig,ax = plt.subplots(figsize=[8,8])\nplt.plot(x,  y[:,cH],'r--',label='')\nplt.plot(x,  y[:,cF],'b-',label='')\nplt.plot(x,  y[:,cP],'g-.',label='')\nplt.legend()\nplt.grid()\nplt.show()\n\n","54b8042d":"###############################################\n####### CALIBRATION TO reported Hospitalization and Fatalities\n####### with intervention\n###############################################\n\n#extract the data for the given region or state and prepare it for the calibration\ndef prep_data(data, state='NY', cutoff_on='death', cutoff=1, truncate=0):\n    \n    #filter the data and keep the given REGION and STATE only\n    c = data[data['state']==state]\n    c = c.sort_values(by='date',ascending=True)  #data pulled from web is sorted the other way...\n    \n    #cutoff_on = 'death'  | 'hospitalized': choose to start simul when hospitalized or death reach the cutoff number\n    minDate = c[c[cutoff_on]>cutoff]['date'].min()\n\n    s1 = c[c['date']>minDate].copy()  #keep only the records after the given number of fatalities have been reached\n    if truncate>0:\n        s1 = s1[:truncate].copy()  #keep only the given number of days\n\n    #calculate the number of days since the first day fatalities exceeded the cutoff\n    s1['Days'] = (s1['date'] - minDate) \/ np.timedelta64(1, 'D')\n  \n    x = s1['Days']\n   \n    #calibrate to hospitalization only, death only or both hospitalization and fatalities counts; these input vectors are appended (see SEIR_calib for processing)\n    #by setting unwanted data to NaN\n    \n    calib_p = s1['positive'].copy()\n    scale_p = calib_p.max()\n    \n    calib_h = s1['hospitalizedCurrently'].copy()\n    scale_h = calib_h.max()\n    \n    calib_d = s1['death'].copy()\n    scale_d = calib_d.max()\n    \n#    if calib_on=='hospitalized':\n#        calib_d[:] = math.nan #blank out death data, it is not going to be used for calibration\n    \n    #normalize positive and hospital counts to the same order of magnitude as death counts to avoid biais in the calibration:\n    \n    scale_p = scale_d \/ scale_p\n    calib_p *= scale_p \n\n    scale_h = scale_d \/ scale_h\n    calib_h *= scale_h \n    \n    z = calib_p.append(calib_h)   #calibration function works on a vector of positive data, followed by hospitalized data followed by death data\n    z = z.append(calib_d)         \n\n    #record where we do not have data, for use by SEIR_calib to ignore these points during the calibration\n    missing_data = np.isnan(z)\n    z = np.nan_to_num(z)\n    \n    \n    return minDate, s1, x, z, missing_data, scale_p, scale_h\n\n\n#Function called by scipy.curve_fit to calibrate the model parameters \n#This function calls the SIR model to simulate on the current guess parameters, and formats the results for use by curve_fit()\n#note: SEIR() returns percentage of population, whereas reported data is absolute number of people, hence the need to use a total population number\n#note: this function calibrates the final hospitaliation and death rates (eg 10% of infected people will be hospitalized people, rather than the instantaneous rates that need to be passed to SIR5() )\n#note: the calibration is meant to be on both hospitalization and fatalities counts, so these two vectors are appended in the return; the x parameter needs to be a single length\ndef SEIR_calib(x, i0, beta, gamma_i1, gamma_i2, gamma_h, incubation_rate, hospitalization_rate, death_rate,\n               intervention_day, intervention_lag, intervention_effect, \n               detection_rate,\n               hospital_capacity,detection_capacity,\n               population, missing_data, scale_p, scale_h):\n    \n    y = SEIR(x, i0=i0, beta=beta, gamma_i1=gamma_i1, gamma_i2=gamma_i2, gamma_h=gamma_h, incubation_rate=incubation_rate, hospitalization_rate=hospitalization_rate, death_rate=death_rate,\n            intervention_day = intervention_day, intervention_lag = intervention_lag, intervention_effect=intervention_effect,\n            detection_rate = detection_rate,\n            hospital_capacity = hospital_capacity, detection_capacity=detection_capacity)\n\n    #set calibration and simulation output to zero when calibration data is NaN. \n    #this is because hospitalization data tends to start later than fatalities data in the published numbers\n    #use x as an array of booleans to indicate where this should be done\n    \n    ret = np.append(y[:,cP] * scale_p, y[:,cH] * scale_h)    #positive and hospitalization counts are rescaled to same order of magnitude as death count for calibration algorithm - see prep_data()\n    ret = np.append(ret, y[:,cF])    \n    ret = np.where(missing_data, 0, ret)\n\n    return ret * population\n\n#--------------------------\n#This function calibrates and shows the results for one State\n#data - DataFrame in the same format as train.csv but with Region and State columns added\n#output - boolean, True to print results and charts\n#\ndef calibrate(data, output=True, state='NY', cutoff_on='death', cutoff=1, incubation_rate=1\/5):\n\n    if output:\n        print('-----------------')\n        print(state)\n        print('-----------------')\n        print('')\n\n    population = Population[state]\n\n    #Bounds and initial guess for calibration algorithm scipy.curve_fit\n    I0_min = 1e-6\n    I0_max = 1000e-6\n    Gamma_i1_min = 1\/7\n    Gamma_i1_max = 1\/5\n    Gamma_i2_min = 1\/7\n    Gamma_i2_max = 1\/5\n    Gamma_h_min = 1\/14\n    Gamma_h_max = 1\/7\n    Beta_min = 1.1 * 1\/21\n    Beta_max = 3 * 1\/7\n    HospitalizationRate_min = 0.10\n    HospitalizationRate_max = 0.30\n    DeathRate_min = 0.001\n    DeathRate_max = 0.02\n    InterventionDay_min = 0   \n    InterventionDay_max = 50   #50 days after report of first death\n    InterventionLag_min = 1\n    InterventionLag_max = 2\n    InterventionEffect_min = 0\n    InterventionEffect_max = 0.99 \n    DetectionRate_min = 0.1           #10% of infectious cases detected as positives\n    DetectionRate_max = 1             #100% detection of infectious case reported as positives \n    HospitalCapacity_min = 100e-6     #1000 bed per million\n    HospitalCapacity_max = 1000e-6    #1000 beds per million\n    DetectionCapacity_min = 1e-6      #capacity to detect 1 per million\n    DetectionCapacity_max = 1         #full detection\n\n    initial_guess = [I0_min, \n                     Beta_min,\n                     Gamma_i1_min,\n                     Gamma_i2_min,\n                     Gamma_h_min,\n                     HospitalizationRate_min,\n                     DeathRate_min,\n                     InterventionDay_min,\n                     InterventionLag_min,\n                     InterventionEffect_max,\n                     DetectionRate_max,\n                     HospitalCapacity_min,\n                     DetectionCapacity_min\n                    ]\n\n    bounds = ((I0_min, Beta_min, Gamma_i1_min, Gamma_i2_min, Gamma_h_min, HospitalizationRate_min, DeathRate_min, InterventionDay_min, InterventionLag_min, InterventionEffect_min, DetectionRate_min, HospitalCapacity_min, DetectionCapacity_min),\n              (I0_max, Beta_max, Gamma_i1_max, Gamma_i2_max, Gamma_h_max, HospitalizationRate_max, DeathRate_max, InterventionDay_max, InterventionLag_max, InterventionEffect_max, DetectionRate_max, HospitalCapacity_max, DetectionCapacity_max))\n\n    #prepare the calibration data\n    #----------------------------\n\n    minDate, s1, x, z, missing_data, scale_p, scale_h = prep_data(data, state=state, cutoff_on=cutoff_on, cutoff=cutoff, truncate=0)\n\n    if output:\n        print(\"Reported {} reached {} on {:%Y-%m-%d}\".format(cutoff_on, cutoff, minDate))\n        print('')\n    \n    \n    \n    #calibrate the model\n    #use a lambda to pass the population, h0 and f0 when running a simulation on guess parametes, as these are not calibrated params but are needed by SIR5_calib()\n    #-------------------\n   \n    popt, pcov = curve_fit(lambda x, i0, beta, gamma_i1, gamma_i2, gamma_h, hospitalization_rate, death_rate, intervention_day, intervention_lag, intervention_effect, detection_rate, hospital_capacity, detection_capacity :\n                               SEIR_calib(x, i0, beta, gamma_i1, gamma_i2, gamma_h, incubation_rate, hospitalization_rate, death_rate, \n                                          intervention_day, intervention_lag, intervention_effect, \n                                          detection_rate = detection_rate,\n                                          hospital_capacity = hospital_capacity,detection_capacity=detection_capacity,\n                                          population = population, missing_data = missing_data, scale_p = scale_p, scale_h = scale_h),\n                           x, z, bounds=bounds, p0=initial_guess)\n\n    calib_I0                  = popt[0]\n    calib_Beta                = popt[1]\n    calib_GammaI1             = popt[2]\n    calib_GammaI2             = popt[3]\n    calib_GammaH              = popt[4]\n    calib_HospitalizationRate = popt[5]\n    calib_DeathRate           = popt[6]\n    calib_InterventionDay     = popt[7]\n    calib_InterventionLag     = popt[8]\n    calib_InterventionEffect  = popt[9]\n    calib_DetectionRate       = popt[10]\n    calib_HospitalCapacity    = popt[11]\n    calib_DetectionCapacity   = popt[12]\n\n    if output:\n        print(\"SIR model fit\")\n        print(\"-------------\")\n        print(\"Simulation starts on {:%Y-%m-%d}\".format(minDate))\n        print(\"{} has a population of {:,.0f}\".format(state, population))\n        print(\"current fatalities are {:,.0f}\".format(s1['death'].iloc[-1]))\n        print(\"Incubation = {:.3f}, or {:.1f} days to recover\".format(incubation_rate, 1\/incubation_rate))\n        print('')\n        print(\"I0 = {:,.0f} per million, or {:,.0f} persons infected as of {:%Y-%m-%d}\".format(calib_I0*(1\/incubation_rate+1)*1e6, calib_I0*population*(1\/incubation_rate+1), minDate))\n        print(\"BETA = {:.3f}\".format(calib_Beta))\n        print(\"GAMMA_I1 = {:.1f} days in first symptomatic phase\".format(1\/calib_GammaI1))\n        print(\"GAMMA_I2 = {:.1f} days in second symptomatic phase\".format(1\/calib_GammaI2))\n        print(\"GAMMA_H = {:.1f} days in hospital\".format(1\/calib_GammaH))\n        print(\"HOSPITALIZATION RATE = {:.1%} cases require hospitalization\".format(calib_HospitalizationRate))\n        print(\"DEATH RATE = {:.1%} infected people will die\".format(calib_DeathRate))\n        print(\"Intervention Day = detected {:.0f} days after the cutoff, on {:%Y-%m-%d}\".format(calib_InterventionDay, minDate+timedelta(days=calib_InterventionDay)))\n        print(\"Intervention Lag = detected {:.0f} days for full intervention effect\".format(calib_InterventionLag))\n        print(\"Intervention Effect = detected {:.0%} reduction of initial transmission rate\".format(calib_InterventionEffect))\n        print(\"Detection Rate = {:.1%} infected are reported as positives\".format(calib_DetectionRate))\n        print(\"Hospital Capacity = {:.0f} beds per million\".format(calib_HospitalCapacity*1e6))\n        print(\"Detection Capacity = {:.0f} infectious cases per million\".format(calib_DetectionCapacity*1e6))\n        #display(popt)\n\n    #compute model numbers for the calibration period\n    #------------------------------------------------\n\n    y = population * SEIR(x,i0=calib_I0, beta=calib_Beta, gamma_i1=calib_GammaI1, gamma_i2=calib_GammaI2, gamma_h=calib_GammaH, incubation_rate = incubation_rate, hospitalization_rate = calib_HospitalizationRate, death_rate=calib_DeathRate,\n                         intervention_day = calib_InterventionDay, intervention_lag=calib_InterventionLag, intervention_effect = calib_InterventionEffect,\n                         detection_rate = calib_DetectionRate,\n                         hospital_capacity = calib_HospitalCapacity, detection_capacity = calib_DetectionCapacity)\n\n    s1['fit Fatalities (SIR)'] = y[:,cF]  #reported stats are about new cases, they do not seem to account for people having recovered\n    s1['fit NewFatalities (SIR)'] = s1['fit Fatalities (SIR)'].diff()\n\n    s1['fit Hospitalized (SIR)'] = y[:,cH]  #reported positive stats are about new cases, they do not seem to account for people having recovered\n    s1['fit NewHospitalized (SIR)'] = s1['fit Hospitalized (SIR)'].diff()\n\n    s1['fit Positive (SIR)'] = y[:,cP]  #reported positive stats are about new cases, they do not seem to account for people having recovered\n    s1['fit NewPositive (SIR)'] = s1['fit Positive (SIR)'].diff()\n\n    s1['fit Infectious (SIR)'] = y[:,cI1]+y[:,cI2]+y[:,cH]  \n    \n    #display(s1.sort_values(by='Date',ascending=False))\n\n    #plot the model in comparison with calibrating data\n    #--------------------------------------------------\n\n    if output:\n        fig,axs = plt.subplots(nrows=3, ncols=2,figsize=[16,16])\n\n        ax = plt.subplot(321)\n        plt.title(state + ' Fatalities')\n        plt.plot(s1['date'], s1['death'],'ko-',label='Actual')\n        plt.plot(s1['date'], s1['fit Fatalities (SIR)'],'r-',label='SIR')\n        ax.xaxis.set_major_formatter(mdates.DateFormatter('%B-%d'))\n        plt.legend()\n        plt.grid()\n        #plt.yscale('log')\n\n        ax = plt.subplot(322)\n        plt.title(state + ' New Fatalities')\n        plt.plot(s1['date'], s1['deathIncrease'],'ko-',label='Actual')\n        plt.plot(s1['date'], s1['fit NewFatalities (SIR)'],'r-',label='SIR')\n        plt.legend()\n        plt.grid()\n        #plt.yscale('log')\n\n        ax = plt.subplot(323)\n        plt.title(state + ' Hospitalized')\n        #plt.plot(x, s1['hospitalized'],'ko-',label='Actual')\n        plt.plot(s1['date'], s1['hospitalizedCurrently'],'ko-',label='Actual')\n        plt.plot(s1['date'], s1['fit Hospitalized (SIR)'],'r-',label='SIR')\n        plt.legend()\n        plt.grid()\n        #plt.yscale('log')\n        ax.yaxis.set_major_formatter(FuncFormatter(thousands))\n\n        ax = plt.subplot(324)\n        plt.title(state + ' New Hospitalized')\n        #plt.plot(x, s1['hospitalizedIncrease'],'ko-',label='Actual')\n        plt.plot(s1['date'], s1['hospitalizedCurrently'].diff(),'ko-',label='Actual')\n        plt.plot(s1['date'], s1['fit NewHospitalized (SIR)'],'r-',label='SIR')\n        plt.legend()\n        plt.grid()\n        #plt.yscale('log')\n        ax.yaxis.set_major_formatter(FuncFormatter(thousands))\n\n        ax = plt.subplot(325)\n        plt.title(state + ' Positives')\n        #plt.plot(x, s1['hospitalized'],'ko-',label='Actual')\n        plt.plot(s1['date'], s1['positive'],'ko-',label='Actual')\n        plt.plot(s1['date'], s1['fit Positive (SIR)'],'r-',label='SIR')\n        plt.legend()\n        plt.grid()\n        #plt.yscale('log')\n        ax.yaxis.set_major_formatter(FuncFormatter(thousands))\n\n        ax = plt.subplot(326)\n        plt.title(state + ' New Positives')\n        #plt.plot(x, s1['hospitalizedIncrease'],'ko-',label='Actual')\n        plt.plot(s1['date'], s1['positiveIncrease'],'ko-',label='Actual')\n        plt.plot(s1['date'], s1['fit NewPositive (SIR)'],'b-',label='SIR')\n        plt.legend()\n        plt.grid()\n        #plt.yscale('log')\n        ax.yaxis.set_major_formatter(FuncFormatter(thousands))\n\n        fig.autofmt_xdate()\n        plt.show()\n        \n        \n    #long range forecast\n    #-------------------\n\n    xx = np.arange(365)\n    y = population * SEIR(xx,i0=calib_I0, beta=calib_Beta, gamma_i1=calib_GammaI1, gamma_i2=calib_GammaI2, gamma_h=calib_GammaH, incubation_rate = incubation_rate, hospitalization_rate = calib_HospitalizationRate, death_rate=calib_DeathRate,\n                         intervention_day = calib_InterventionDay, intervention_lag=calib_InterventionLag, intervention_effect = calib_InterventionEffect,\n                         detection_rate = calib_DetectionRate,\n                         hospital_capacity = calib_HospitalCapacity, detection_capacity = calib_DetectionCapacity)\n\n\n\n    idx = np.argmax( np.diff(y[:,cF])).item()   #peak daily fatalities\n    max_dailyfatalities_day = minDate+timedelta(days=idx)\n    max_dailyfatalities_rate = np.diff(y[:,cF])[idx]\n    total_fatalities = y[-1,cF]\n\n    if output:\n        print(\"\")\n        print(\"SIR long range forecast\")\n        print(\"-----------------------\")\n        print(\"Daily New Fatalities would peak day {:,}, on {:%Y-%m-%d}, at {:,.0f} fatalities per day\".format(idx,max_dailyfatalities_day, max_dailyfatalities_rate))\n        print(\"Cumulative Fatalities would reach {:,.0f} after one year\".format(total_fatalities))\n\n        fig,axs = plt.subplots(nrows=1, ncols=2,figsize=[12,6])\n        \n        ax = plt.subplot(121)\n        plt.title(state + ' Forecast')\n        plt.plot(xx, y[:,cH],'b-',label='Hospitalized')\n        plt.plot(xx[1:], np.diff(y[:,cP]),'m-',label='New Positive')\n        ax.yaxis.set_major_formatter(FuncFormatter(thousands))\n        plt.legend()\n        plt.grid()\n        #plt.yscale('log')\n\n        ax = plt.subplot(122)\n        plt.title(state + ' Forecast')\n        lns2 = plt.plot(xx, y[:,cF],'c-',label='Fatalities (lhs)')\n        ax.yaxis.set_major_formatter(FuncFormatter(thousands))\n\n        ax2 = ax.twinx() #instantiate second y axis, share same x axis\n        lns3 = plt.plot(xx[1:], np.diff(y[:,cF]),'m-',label='Daily Fatalities (rhs)')\n        ax2.yaxis.set_major_formatter(FuncFormatter(thousands))\n\n        lns = lns2+lns3\n        labs = [l.get_label() for l in lns]\n        ax.legend(lns, labs, loc=0)\n        ax.grid()\n        #plt.yscale('log')\n\n        plt.show()\n        \n        #show death and hospitalized on same plot\n        #########################################\n        fig,axs = plt.subplots(nrows=2, ncols=3,figsize=[18,12])      \n\n       \n        deathRateCurve = []\n        hospitalizationRateCurve = []\n        interventionCurve = []\n        detectionCurve = []\n        day=0\n        for idx, row in s1.iterrows():\n            \n            h = row['fit Hospitalized (SIR)'] \/ population\n            infectious = row['fit Infectious (SIR)'] \/ population\n            \n            dr, hr, detectr = rationing(hospitalized=h, infectious=infectious, hospital_capacity=calib_HospitalCapacity, death_rate=calib_DeathRate, \n                               hospitalization_rate=calib_HospitalizationRate, detection_rate=calib_DetectionRate, detection_capacity=calib_DetectionCapacity)\n\n            deathRateCurve.append(dr)\n            hospitalizationRateCurve.append(hr)\n            detectionCurve.append(detectr)\n            \n            \n            e=intervention(day=day, day0=calib_InterventionDay, lag=calib_InterventionLag, effect=calib_InterventionEffect)\n            interventionCurve.append(e)\n            day += 1\n            \n        \n        ax = plt.subplot(231)\n        plt.title('{} - Fatalities'.format(state))\n\n        lns1 = ax.plot(s1['date'], s1['death'],'ro-',label='actual')\n        lns2 = ax.plot(s1['date'], s1['fit Fatalities (SIR)'],'r--',label='model')\n        \n        ax.legend()\n        ax.grid()\n        plt.yscale('log')      \n        bottom, top = plt.ylim()  # return the current ylim to scale the other charts\n\n        ax.yaxis.set_major_formatter(FuncFormatter(lambda x, p: format(int(x), ',')))\n        ax.xaxis.set_major_formatter(mdates.DateFormatter('%B-%d'))\n\n        ax = plt.subplot(234)\n        plt.plot(s1['date'], deathRateCurve, 'k:', label='death rate')\n        ax.yaxis.set_major_formatter(FuncFormatter(lambda x, p: format(x, '.1%')))\n        ax.xaxis.set_major_formatter(mdates.DateFormatter('%B-%d'))\n        plt.grid()\n        plt.legend()\n       \n        \n        ax = plt.subplot(232)\n        plt.title('{} - Hospitalized'.format(state))\n        \n        #ax2 = ax1.twinx() #instantiate second y axis, share same x axis\n        lns3 = plt.plot(s1['date'], s1['hospitalizedCurrently'],'k*-',label='actual)')\n        lns4 = plt.plot(s1['date'], s1['fit Hospitalized (SIR)'],'k--',label='model')\n\n        plt.legend()\n        plt.grid()\n        plt.yscale('log')\n#        plt.ylim((10*bottom, 10*top))   # set the ylim to bottom, top\n\n        ax.yaxis.set_major_formatter(FuncFormatter(lambda x, p: format(int(x), ',')))\n        ax.xaxis.set_major_formatter(mdates.DateFormatter('%B-%d'))\n\n        ax = plt.subplot(235)\n        plt.plot(s1['date'], hospitalizationRateCurve, 'k:',label='hospitalization rate')\n        ax.yaxis.set_major_formatter(FuncFormatter(lambda x, p: format(x, '.1%')))\n        ax.xaxis.set_major_formatter(mdates.DateFormatter('%B-%d'))\n        plt.grid()\n        plt.legend()\n\n        ax = plt.subplot(233)\n        plt.title('{} - Positives'.format(state))\n        \n        lns5 = plt.plot(s1['date'], s1['positive'],'bo-',label='actual')\n        lns6 = plt.plot(s1['date'], s1['fit Positive (SIR)'],'b--',label='model')\n\n        plt.legend()\n        plt.grid()\n        plt.yscale('log')\n#        plt.ylim((100*bottom, 100*top))   # set the ylim to bottom, top\n\n        ax.yaxis.set_major_formatter(FuncFormatter(lambda x, p: format(int(x), ',')))\n        ax.xaxis.set_major_formatter(mdates.DateFormatter('%B-%d'))\n\n        ax = plt.subplot(236)\n        plt.plot(s1['date'], interventionCurve, 'k-.',label='intervention effect')\n        plt.plot(s1['date'], detectionCurve, 'k:', label='detection rate')\n        ax.yaxis.set_major_formatter(FuncFormatter(lambda x, p: format(x, '.1%')))\n        ax.xaxis.set_major_formatter(mdates.DateFormatter('%B-%d'))\n        plt.ylim((0, 1.1))   # set the ylim to 0%-110%\n        plt.grid()\n        plt.legend()\n\n        #lns = lns1+lns2+lns3+lns4+lns5+lns6\n        #labs = [l.get_label() for l in lns]\n        #ax1.legend(lns, labs, loc=0)\n\n        #ax1.yaxis.set_major_formatter(FuncFormatter(thousands))\n        #ax1.yaxis.set_major_formatter(FuncFormatter(lambda x, p: format(int(x), ',')))\n        #ax2.yaxis.set_major_formatter(FuncFormatter(lambda x, p: format(int(x), ',')))\n        \n        #ax1.grid()\n        #plt.show()\n\n        fig.autofmt_xdate()\n        plt.show()\n\n    result = {}\n    result['state'] = state\n    result['curr fatalities'] = s1['death'].iloc[-1]\n    result['population'] = population\n    result['cutoff'] = minDate\n    result['i0\/m'] = calib_I0 * 1e6\n    result['gamma_i1\/d'] = 1\/calib_GammaI1\n    result['gamma_i2\/d'] = 1\/calib_GammaI2\n    result['gamma_h\/d'] = 1\/calib_GammaH\n    result['incubation rate\/d'] = 1\/incubation_rate\n    result['hospitalization rate'] = calib_HospitalizationRate\n    result['death rate'] = calib_DeathRate\n    result['interv'] = calib_InterventionDay\n    result['lag'] = calib_InterventionLag\n    result['effect'] = calib_InterventionEffect\n    result['detection'] = calib_DetectionRate\n    result['hosp capacity'] = calib_HospitalCapacity\n    result['detect capacity'] = calib_DetectionCapacity\n    result['peak day'] = max_dailyfatalities_day\n    result['peak fatalities'] = max_dailyfatalities_rate\n    result['cum fatalities'] = total_fatalities\n\n    #print(result)\n    \n    return result\n    \n    \nstate = 'NY'    #NY CA\n#display(data[data['state']==state])\n\n#NY timeline of intervention\n# March 13th: New Rochelle school closures within 1-mile radius of first case\n# Wednesday March 18: state-wide school closures\n# Sunday March 22: state-wide non-essential workers to stay home, non-essential gatherings prohibited\n# Simulation starts on 2020-03-04\n\nr = calibrate(data, output=True, state=state, cutoff_on='positive', cutoff=1, incubation_rate=1\/5)    \n    ","d388397d":"state='NY'\n\ncutoff_on='death'\ncutoff = 1\n\ncalib_on='both'\n\nIncubationRate = 1\/5 #it takes five days for people to become infectious after exposure. this is not calibrated, the scientific evidence is pretty robust.\n\nr = calibrate(data, output=False, state=state, calib_on=calib_on, incubation_rate=IncubationRate)\ndisplay(r)\n\npopulation = r['population']\ni0 = r['i0\/m']*1e-6\ngamma = 1\/r['gamma\/d']\nbeta = r['R0']*gamma\nincubation_rate = IncubationRate\nhospitalization_rate = r['hospitalization rate']*gamma\ndeath_rate = gamma * r['death rate']\nintervention_day = r['interv']\nintervention_lag = r['lag']\nintervention_effect = r['effect']\ndetection_rate = r['detection']\nhospital_capacity = r['capacity']\nworst_case = r['worst']\n\n\nformat_dict2 = {'population':'{:,.0f}', \n               'curr fatalities': '{:,.0f}',\n               'cutoff':'{:%Y-%m-%d}',\n               'i0\/m': '{:.0f}',\n               'gamma\/d': '{:.0f}',\n               'R0': '{:.1f}',\n               'death rate': '{:.1%}',\n               'interv': '{:.0f}',\n               'lag': '{:.0f}',\n               'effect': '{:.0%}',\n               'detection': '{:.0%}',\n               'capacity': '{:.000%}',\n               'worst': '{:.1%}',\n               'peak day':'{:%Y-%m-%d}',\n               'peak fatalities': '{:,.0f}',\n               'cum fatalities': '{:,.0f}',\n              }\n\nres = []\nres.append(r)\nres = pd.DataFrame(res)\ndisplay(res.style.format(format_dict2).hide_index()) \n#print(beta, gamma)\n\nR0_min = 1.1\nR0_max = 3.5\n\n#Bounds and initial guess for calibration algorithm scipy.curve_fit\nI0_min = 1e-6\nI0_max = 1000e-6\nGamma_min = 1\/14\nGamma_max = 1\/5\nBeta_min = 1.1 * Gamma_min\nBeta_max = 3 * Gamma_max\nHospitalizationRate_min = 0.01\nHospitalizationRate_max = 0.30\nDeathRate_min = 0.001\nDeathRate_max = 0.05\nInterventionDay_min = 0   \nInterventionDay_max = 50   #50 days after report of first death\nInterventionLag_min = 1\nInterventionLag_max = 7\nInterventionEffect_min = 0\nInterventionEffect_max = 0.95 \nDetectionRate_min = 0.1           #10% of infectious cases detected as positives\nDetectionRate_max = 1             #100% detection of infectious case reported as positives \nHospitalCapacity_min = 1e-6       #1 bed per million\nHospitalCapacity_max = 1000e-6    #1000 beds per million\nWorstCase_min = 0                 #no rationing\nWorstCase_max = 10                #10 times increase of death rate because of hospital rationing, 10 000% reduction of hospitalization rate\n\n\nminDate, s1, x, z, missing_data, scale_h = prep_data(data=data, state=state, cutoff_on=cutoff_on, cutoff=cutoff, truncate=0, calib_on=calib_on)\n\nfrom scipy.spatial import distance\n\nN1 = 20\nN2 = 20\n\n#Y = np.linspace(R0_min, R0_max, num=N1)\n#ylabel = 'R0'\nY = np.linspace(InterventionDay_min, InterventionDay_max, num=N1)\nylabel = 'intervention day'\n\nX = np.linspace(Gamma_min, Gamma_max, num=N2)\nX = 1\/X\nxlabel = 'gamma'\n\nres = []\nfor i1 in range(N1):\n    row = []\n    for i2 in range(N2):\n        \n        gamma = Gamma_min + (Gamma_max-Gamma_min)\/N2 * i2\n        intervention_day = InterventionDay_min + (InterventionDay_max-InterventionDay_min)\/N1 * i1\n        #beta = gamma * R0_min + (R0_max-R0_min)\/N1 * i1\n\n        y = SEIR_calib(x, i0=i0, beta=beta, gamma=gamma, incubation_rate=incubation_rate, hospitalization_rate=hospitalization_rate, death_rate=death_rate,\n                            intervention_day=intervention_day, intervention_lag=intervention_lag, intervention_effect=intervention_effect, \n                       detection_rate = detection_rate, hospital_capacity = hospital_capacity, worst_case = worst_case,\n                       population=population, missing_data=missing_data, scale_h=scale_h)\n\n        err = distance.euclidean(y,z)\n        row.append(err)\n    res.append(row)\n        \n#display(res)\nplt.contour(X, Y, res, levels=5, cmap='cividis')#'coolwarm')\nplt.contourf(X, Y, res, levels=100, cmap='cividis')#'coolwarm')\nplt.colorbar()\nplt.xlabel(xlabel)\nplt.ylabel(ylabel)\n#plt.plot(res['gamma'],res['err'])\nplt.show()\n\n","df3c0b66":"state='NY'\n\ncutoff_on='death'\ncutoff = 1\n\ncalib_on='both'\n\nIncubationRate = 1\/5\n\nminDate, s1, x, z, missing_data, scale_h = prep_data(data=data, state=state, cutoff_on=cutoff_on, cutoff=cutoff, truncate=0, calib_on=calib_on)\n\nr = calibrate(data, output=False, state=state, calib_on=calib_on, incubation_rate=IncubationRate)\n#display(r)\n\npopulation = r['population']\ni0 = r['i0\/m']*1e-6\ngamma = 1\/r['gamma\/d']\nR0 = r['R0']\nbeta = R0*gamma\nincubation_rate = IncubationRate\nhospitalization_rate = r['hospitalization rate']\ndeath_rate = r['death rate']\nintervention_day = r['interv']\nintervention_lag = r['lag']\nintervention_effect = r['effect']\nintervention_effect = r['effect']\ndetection_rate = r['detection']\nhospital_capacity = r['capacity']\n\n\nformat_dict2 = {'population':'{:,.0f}', \n               'curr fatalities': '{:,.0f}',\n               'cutoff':'{:%Y-%m-%d}',\n               'i0\/m': '{:.0f}',\n               'gamma\/d': '{:.0f}',\n               'R0': '{:.1f}',\n               'hospitalization rate': '{:.1%}',\n               'death rate': '{:.1%}',\n               'interv': '{:.0f}',\n               'lag': '{:.0f}',\n               'effect': '{:.0%}',\n               'detection': '{:.0%}',\n               'capacity': '{:.000%}',\n               'worst': '{:.1%}',\n               'peak day':'{:%Y-%m-%d}',\n               'peak fatalities': '{:,.0f}',\n               'cum fatalities': '{:,.0f}',\n              }\n\nres = []\nres.append(r)\nres = pd.DataFrame(res)\ndisplay(res.style.format(format_dict2).hide_index()) \n\n\nplt.subplots(nrows=1,ncols=3,figsize=(16,4))\n\nxx = x #np.arange(50)\n\ny = population * SEIR(xx, i0=i0, beta=beta, gamma=gamma, incubation_rate = incubation_rate, hospitalization_rate=gamma*hospitalization_rate, death_rate=gamma*death_rate,\n                      intervention_day = intervention_day, intervention_lag=intervention_lag, intervention_effect = intervention_effect, detection_rate = detection_rate, hospital_capacity = hospital_capacity, worst_case=worst_case)\n\n\nplt.subplot(131)\nplt.title('hospitalized')\nplt.plot(xx, y[:,cH],'ro-', label='calib')\nplt.plot(xx, s1['hospitalizedCurrently'],'k*-', label='actual')\nplt.yscale('log')\nplt.grid()\n\nplt.subplot(132)\nplt.title('fatalities')\nplt.plot(xx, y[:,cF],'ro-', label='calib')\nplt.plot(xx, s1['death'],'k*-', label='actual')\nplt.yscale('log')\nplt.grid()\n\nplt.subplot(133)\nplt.title('positives')\nplt.plot(xx, y[:,cP],'ro-', label='calib')\nplt.plot(xx, s1['positive'],'k*-', label='actual')\nplt.yscale('log')\nplt.grid()\n\nGamma_min = 1\/gamma - 3\nfor i in range(7):\n    \n    g = 1\/(Gamma_min+i)\n    b = g * R0\n    \n    y = population * SEIR(xx, i0=i0, beta=b, gamma=g, incubation_rate = incubation_rate, hospitalization_rate=g*hospitalization_rate, death_rate=g*death_rate,\n                          intervention_day = intervention_day, intervention_lag=intervention_lag, intervention_effect = intervention_effect,\n                          detection_rate = detection_rate, hospital_capacity = hospital_capacity, worst_case=worst_case)\n    \n    plt.subplot(131)\n    plt.plot(xx, y[:,cH],label='gamma={:.1f}'.format(Gamma_min+i))\n\n    plt.subplot(132)\n    plt.plot(xx, y[:,cF],label='gamma={:.1f}'.format(Gamma_min+i))\n\n    plt.subplot(133)\n    plt.plot(xx, y[:,cP],label='gamma={:.1f}'.format(Gamma_min+i))\n    \nplt.legend()\n\n\n","58af8c32":"This notebook can be used to calibrate a SEIR-type model on US covid data reported by https:\/\/covidtracking.com\n\nThe code calibrates the model parameters to the reported curves of for either fatalities or hospitalized people, or both together.\n\nThe model assumes a 4 day incubation period. Transmission rates, recovery rate, hospitalizationa and death rates are calibrated.\nThe model also calibrates the effect and timing of an intervention to reduce the transmission rate; these paratemers are calibrated from the data rather than given as inputs.\n\nresults:\n* not quite debugged yet.\n* not sure there is an improvement on my other notebook\n* sensitive to initial guess; need to do more work to better understand local extrema\n* NY: hospitalized curve is linear while death curve is exponential. this is causing problems.\n* CA: hospitalized curve is still very short and the results do not look credible yet\n* both: calibrated R0 is quite higher than reported in scientific journals. calibrated recovery rate 10 to 14 days, which looks credible.\n\n\n"}}