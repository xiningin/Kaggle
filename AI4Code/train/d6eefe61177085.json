{"cell_type":{"73df0723":"code","f520d62b":"code","0ffdaac8":"code","a6ce36c1":"code","71940c45":"code","c30bdd55":"code","205c79f8":"code","dfd6b8f2":"markdown","9167913c":"markdown","822c5bf7":"markdown","975c55c8":"markdown","39656157":"markdown","670fecdb":"markdown","98cb0bdb":"markdown","632d5368":"markdown","64e49209":"markdown","85aafa09":"markdown"},"source":{"73df0723":"import pandas as pd\nimport os\nimport random\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nf = open(\"..\/input\/english-dictionary\/words.txt\", \"r\")","f520d62b":"x = []\nfor i in f:\n    x.append(i)","0ffdaac8":"print(len(x))\nprint(x[75:100])","a6ce36c1":"stripped_words = []\n\nfor i in x:\n    i = i.lower()\n    i = i.rstrip(\"\\n\")\n    i = i.replace(\"'\", \"\")\n    if len(i) == 9:\n        if 'x' in i:\n            stripped_words.append(i)","71940c45":"print('Original list:')\nprint(len(x))\nprint('New list:')\nprint(len(stripped_words))\n\nprint(stripped_words[75:100])","c30bdd55":"randomlist = random.sample(range(0, 1661), 40)","205c79f8":"for i in randomlist:\n    if len(stripped_words[i]) !=9 or 'x' not in stripped_words[i]:\n        print('error')\n    else:\n        print('success')","dfd6b8f2":"## Next, I'm going to turn that messy txt file into a nice, clean list.","9167913c":"## This iteration will check forty random indices from our stripped_words list. ","822c5bf7":"## Beautiful! But as is good practice, we want to test our code to make sure that it did what it was supposed to.\n\n## I'm going to generate a list of random numbers. Forty of them to be exact. These are going to be random indices of the stripped_words list we created, which I am going to iterate through to check our work. ","975c55c8":"## Let's see what it's looking like now. ","39656157":"## Now, I'm wondering what that list is looking like. Let's get the length, and a sample of the items in that list. ","670fecdb":"## Oof, that's looking kind of messy. Let's have all those words looking uniform. Let's get rid of those extra characters, and make everything lowercase.\n\n## While we're at it, let's also create our conditionals - we'll append a new list with the stripped words, but only if they are exactly 9 letters long, and contain the letter \"x\"","98cb0bdb":"### If you have an constructive feedback, or any ideas on how else this code could have been written, I'd love to hear it. ","632d5368":"## Success! You're welcome, Jeopardy.","64e49209":"I was recently watching Jeopardy and saw an interesting category - every correct answer was nine letters long, and had the letter \"x\" in it.\n\nI was wondering how the people who come up with questions could find words to go along with that description, and realized - it's probably a pretty easy code to write!\n\nSo I thought I'd practice some basic Python skills to help create a nice, clean list of words that are nine letters long, and have the letter \"x\" in them. I wonder how many options there were to choose from...","85aafa09":"## We'll start off with the housekeeping. I'll need Pandas, OS, and random. And I'll be importing a .txt file with all the words in the English dictionary."}}