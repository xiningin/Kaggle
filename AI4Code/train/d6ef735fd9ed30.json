{"cell_type":{"28026f79":"code","646c59db":"code","c79d86bb":"code","cd442e28":"code","1f624e94":"code","1e13edb8":"code","79f3bf62":"code","a2342a68":"code","2352f1fb":"code","b5f6cc01":"code","97679fcd":"code","03814049":"code","5253e1a0":"code","cfcf48c5":"code","a60073f6":"code","d612089f":"code","d304eaa8":"code","c98f49e6":"code","87d1aef8":"code","709457a2":"code","81885f79":"code","4e11a7d3":"code","68d17014":"code","0181e31f":"code","b378e62e":"code","af243086":"code","f13bbaef":"code","91081c56":"code","e63690ca":"code","5c90b801":"code","39d72658":"code","264a5011":"code","a7981804":"code","4d2bdcc7":"code","9678f7fb":"code","00fb75df":"code","7b939280":"markdown","8c676f06":"markdown","28bd3362":"markdown","ed863a47":"markdown","a721d137":"markdown","064d84d2":"markdown","f0b10f57":"markdown","e6a131c0":"markdown","f4e5eea2":"markdown","0bc94c6a":"markdown","e82fdec1":"markdown","9ddaa16d":"markdown","64918f0c":"markdown","93d5dc9f":"markdown","0e013915":"markdown","c6f38557":"markdown","b928d0f2":"markdown","60de5225":"markdown","4bdc562b":"markdown","e27f63d4":"markdown","9d1184c0":"markdown","f6318b05":"markdown","6de73186":"markdown","9be34e57":"markdown","10ac32a7":"markdown","88177cbf":"markdown","f82e1e95":"markdown","d0b27773":"markdown","caa33fb3":"markdown","c55d902b":"markdown","62e1c0b4":"markdown","223e3287":"markdown","4bf32757":"markdown"},"source":{"28026f79":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","646c59db":"data = pd.read_csv('\/kaggle\/input\/uberdrives\/My Uber Drives - 2016.csv')","c79d86bb":"data.head()","cd442e28":"data.shape","1f624e94":"data.info()","1e13edb8":"data.isnull().sum()","79f3bf62":"data[data['END_DATE*'].isnull()]","a2342a68":"data.drop(data.index[1155],inplace=True)","2352f1fb":"data[data.duplicated()]","b5f6cc01":"data.drop_duplicates(inplace=True)","97679fcd":"data.isnull().sum()","03814049":"data[data['START_DATE*'] == data['END_DATE*']]","5253e1a0":"data.drop(data.index[[751, 761, 798, 807]], inplace=True)","cfcf48c5":"data.shape","a60073f6":"data['START_DATE*'] = pd.to_datetime(data['START_DATE*'])\ndata['END_DATE*'] = pd.to_datetime(data['END_DATE*'])","d612089f":"plt.figure(figsize=(8,5))\nsns.countplot(data['CATEGORY*'])\nplt.show()","d304eaa8":"plt.figure(figsize=(15,6))\nsns.countplot(data['PURPOSE*'], order=data['PURPOSE*'].value_counts().index, palette='viridis')\nplt.show()","c98f49e6":"# For this purpose, we need to make a function\nplt.figure(figsize=(8,5))\ndef round(x):\n    if x['START*'] == x['STOP*']:\n        return 'YES'\n    else:\n        return 'NO'\n    \ndata['ROUND_TRIP*'] = data.apply(round, axis=1)\n\nsns.countplot(data['ROUND_TRIP*'], order=data['ROUND_TRIP*'].value_counts().index, palette='viridis')\nplt.show()","87d1aef8":"data['MONTH*'] = pd.DatetimeIndex(data['START_DATE*']).month","709457a2":"dic = {1:'Jan', 2: 'Feb', 3: 'Mar', 4: 'April', 5: 'May', 6: 'June', 7: 'July', 8: 'Aug', 9: 'Sep',\n      10: 'Oct', 11: 'Nov', 12: 'Dec' }\n\ndata['MONTH*'] = data['MONTH*'].map(dic)","81885f79":"plt.figure(figsize=(12,7))\nsns.countplot(data['MONTH*'], order=data['MONTH*'].value_counts().index, palette='magma')\nplt.axhline(data['MONTH*'].value_counts().mean(),linestyle='--', color = 'darkred', label='Mean Trips across Months')\nplt.legend()\nplt.show()","4e11a7d3":"plt.figure(figsize=(12,7))\na=sns.countplot(data['ROUND_TRIP*'],hue=data['MONTH*'])\nplt.legend(bbox_to_anchor=(1.05, 0.95), loc=2)\nplt.show()","68d17014":"plt.figure(figsize=(8,5))\ndata.groupby('CATEGORY*')['MILES*'].mean().plot.bar(color=['maroon','darksalmon'])\nplt.axhline(data['MILES*'].mean(), linestyle='--', color='green', label='Mean distance')\nplt.legend()\nplt.show()","0181e31f":"plt.figure(figsize=(15,8))\nsns.countplot(data['START_DATE*'].dt.hour, palette='cubehelix',\n              order = data['START_DATE*'].dt.hour.value_counts().index)\nplt.show()","b378e62e":"def timings(x):\n    seconds = (x['END_DATE*'] - x['START_DATE*']).seconds\n    return seconds\n\ndata['TRIP_HOURS*'] = (data.apply(timings, axis=1)\/3600).round(decimals=2)","af243086":"def speed(x):\n    if x['START_DATE*'] != x['END_DATE*']:\n        sp = x['MILES*']*1.61 \/ x['TRIP_HOURS*']\n        return sp\ndata['SPEED_KM\/HR*'] = data.apply(speed, axis=1).round(decimals=2)","f13bbaef":"data['SPEED_KM\/HR*']","91081c56":"def day(x):\n    day = x['START_DATE*'].day_name()\n    return day\n\ndata['DAY*'] = data.apply(day, axis=1)","e63690ca":"plt.figure(figsize=(7,5))\nsns.countplot(data['DAY*'], order = data['DAY*'].value_counts().index)\nplt.show()","5c90b801":"plt.figure(figsize=(9,6))\na=sns.countplot(data['DAY*'],hue=data['CATEGORY*'], palette='rocket',\n                order=data['DAY*'].value_counts().index)\nplt.legend(bbox_to_anchor=(1.05, 0.95), loc=2)\nplt.show()","39d72658":"plt.figure(figsize=(9,6))\nsns.countplot(data['MONTH*'],hue=data['CATEGORY*'], palette = 'viridis_r',\n              order=data['MONTH*'].value_counts().index)\nplt.show()","264a5011":"data['TIME*'] = data['START_DATE*'].dt.hour\n\nplt.figure(figsize=(20,10))\nsns.countplot(data=data, x=data['TIME*'], hue=data['DAY*'],\n              palette=\"viridis\", )\nplt.show()","a7981804":"a = pd.to_datetime(['18:00:00']).time\n\ndata['DAY\/NIGHT*'] = data.apply(lambda x : 'Night Ride' if x['START_DATE*'].time() > a else 'Day Ride', axis=1)\n\nsns.countplot(data['DAY\/NIGHT*'], palette='cubehelix' , order = data['DAY\/NIGHT*'].value_counts().index)\nplt.show()","4d2bdcc7":"plt.figure(figsize=(9,7))\nsns.countplot(data['DAY*'], hue=data['DAY\/NIGHT*'], palette='viridis' ,\n              order=data['DAY*'].value_counts().index)\nplt.show()","9678f7fb":"f = {}\n\nfor i in data['MILES*']:\n    for i in data['MILES*']:\n        if i < 10:\n            f.setdefault(i,'0-10 miles')\n        elif i >= 10 and i < 20:\n            f.setdefault(i,'10-20 miles')\n        elif i >= 20 and i < 30:\n            f.setdefault(i,'20-30 miles')\n        elif i >= 30 and i < 40:\n            f.setdefault(i,'30-40 miles')\n        elif i >= 40 and i < 50:\n            f.setdefault(i,'40-50 miles')\n        else:\n            f.setdefault(i,'Above 50 miles')\n            \ndata['MILES_BUCKET*'] = data['MILES*'].map(f)\n\nplt.figure(figsize=(10,6))\nsns.countplot(data['MILES_BUCKET*'], palette='cubehelix' ,\n              order = data['MILES_BUCKET*'].value_counts().index)\nplt.show()","00fb75df":"plt.figure(figsize=(10,7))\nsns.countplot(data['MILES_BUCKET*'], hue=data['DAY\/NIGHT*'], palette='YlOrBr',\n              order = data['MILES_BUCKET*'].value_counts().index)\nplt.show()","7b939280":"### Converting 'START_DATE*' and 'END_DATE*' to Datetime format","8c676f06":"#### Above figure shows that highest trips were made on Friday","28bd3362":"### Category of Trip per Month","ed863a47":"### Need to find the duplicated data and should be removed","a721d137":"### Round Trip against Months","064d84d2":"### Entering Month Name and evaluating Frequency of Trip in each Month ","f0b10f57":"### Checking how many are the ROUND TRIPS i.e. start and stop points are same","e6a131c0":"### Now we want to know how many trips were made on Day time and how many on Night time","f4e5eea2":"### Plotting the Frequency for the Purpose of Trip","0bc94c6a":"### There we have 4 rows having starting and end-time exactly equal i.e. zero trip time, while having non-zero miles (distance) - which cannot be possible.","e82fdec1":"#### Above plot shows that December has highest number of trips","9ddaa16d":"### It is necessary to find which hours of the day highest trips are made","64918f0c":"#### One can see that there are more number of short distanced trips","93d5dc9f":"### Plotting Business vs Personal Trips","0e013915":"#### It can be seen clearly from the above graph that most of the trips made are Business across the month, only few Personal trips were made. Also, highest Business trips were made in the month of December.\n\n#### While highest number of Personal trip were on March\/ July","c6f38557":"### Day\/Night against Days","b928d0f2":"### Mean distance of Trip w.r.t Category","60de5225":"#### From above plot, it can be seen that on Friday 11am - 12pm are peak hours of the trips","4bdc562b":"#### From above data it is clear that there is that one null data which helps in further analysis if it is removed","e27f63d4":"#### From above graph it is found that higest number of trips occur between 12p.m - 3p.m, among which 3pm has highest trips","9d1184c0":"### Converting the continuous Miles into buckets","f6318b05":"#### There are lesser number of round trips","6de73186":"### First need to understand the data","9be34e57":"#### Above info shows the data types","10ac32a7":"### Category wise trip per day","88177cbf":"### Now we need to know which number of hours has highest trips","f82e1e95":"#### For that we will first find the trip duration and then speed","d0b27773":"#### Removing them from our dataset","caa33fb3":"#### Highest number of Day rides were on Friday while Night rides were on Sunday\/Thursday","c55d902b":"### Now we are interested in getting to know which day of week has highest number of trips","62e1c0b4":"### Now we want to determine the speed for each trip","223e3287":"#### Both highest number of Day and Night Rides were below 10miles of a distance","4bf32757":"#### Maximum trips were made during Day Time"}}