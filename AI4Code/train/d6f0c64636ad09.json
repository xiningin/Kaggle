{"cell_type":{"727400a4":"code","3387bd17":"code","b8886d5c":"code","d5b94784":"code","a9215158":"code","e2eacf8a":"code","fd5658a5":"code","23c6be29":"code","732b366e":"code","4f51f53e":"code","8951132f":"code","5928cdac":"code","8eac7726":"code","5f555c01":"code","ab8ebb15":"code","e772c69d":"code","135559d5":"code","6d4a9db8":"markdown","e9585d2e":"markdown","3d7ebcaf":"markdown","f087d4f1":"markdown"},"source":{"727400a4":"import matplotlib.pyplot as plt\nimport numpy as np \nimport seaborn as sns\nimport pandas as pd \nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport os \n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","3387bd17":"#NOTE- aug_test doesn't have target value and it's not a competition so no way to check if output is correct. Hence I'm using aug_train only\n\ndf=pd.read_csv('\/kaggle\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv')\ndf.head()","b8886d5c":"df.isnull().mean()","d5b94784":"df.dropna(inplace=True)","a9215158":"df_raw = df[['training_hours', 'company_type']].groupby('company_type').apply(lambda x: x.mean())\ndf_raw.sort_values('training_hours', inplace=True)\n\n# Draw plot\nfig, ax = plt.subplots(figsize=(10,7), dpi= 80)\nax.vlines(x=df_raw.index, ymin=0, ymax=df_raw.training_hours, color='firebrick', alpha=0.7, linewidth=2)\nax.scatter(x=df_raw.index, y=df_raw.training_hours, s=75, color='firebrick', alpha=0.7)\nax.set_xlabel('Company Type')\nfor row in df_raw.itertuples():\n    ax.text(row.Index, row.training_hours+.5, s=round(row.training_hours, 2), horizontalalignment= 'center', verticalalignment='bottom', fontsize=14)\n\nplt.show()\n","e2eacf8a":"df.replace(to_replace =\"no_enrollment\", value =\"No enrollment\",inplace=True) \ng_count = df['enrolled_university'].value_counts()\n\nfig, ax = plt.subplots(figsize=(8, 8))\n\ndef make_autopct(values):\n    def my_autopct(pct):\n        total = sum(values)\n        val = int(round(pct*total\/100.0))\n        return '{p:.2f}%\\n({v:d})'.format(p=pct,v=val)\n    return my_autopct\n\ngenre_col = ['darkgreen','crimson','orange']\n\ncenter_circle = plt.Circle((0, 0), 0.7, color='white')\nplt.pie(x=g_count.values, labels=g_count.index, autopct=make_autopct(g_count.values), \n           textprops={'size': 15}, pctdistance=0.5, colors=genre_col)\nax.add_artist(center_circle)\n\nfig.suptitle('Distribution of Enrolled University', fontsize=20)\nfig.show()","fd5658a5":"df['experience']=df['experience'].replace({'>20': 21, '<1': 0}).astype(int)\ndf['last_new_job']=df['last_new_job'].replace({'>4': 5, 'never': 0}).astype(int)","23c6be29":"sns.set()\nfig, axes = plt.subplots(1, 2, figsize=(15, 5), sharey=True)\nfig.suptitle('Male\/Female\/others', fontsize=20)\n\nsns.barplot(ax=axes[0], x=df['gender'], y=df['training_hours'],linewidth=2.5, facecolor=(1, 1, 1, 0),errcolor=\".2\", edgecolor=\".2\")\naxes[0].set_title('Training hours')\nsns.barplot(ax=axes[1], x=df['gender'], y=df['experience'],linewidth=2.5, facecolor=(1, 1, 1, 0),errcolor=\".2\", edgecolor=\".2\")\naxes[1].set_title('experience')","732b366e":"from matplotlib import cm\nfrom math import log10\ndf_m=df['company_size'].value_counts().to_dict()\nlabels = list(df_m.keys())\ndata = list(df_m.values())\n\nn = len(data)\nk = 10 ** int(log10(max(data)))\nm = k * (1 + max(data) \/\/ k)\nr = 1.5\nw = r \/ n \ncolors = [cm.terrain(i \/ n) for i in range(n)]\n\nfig, ax = plt.subplots()\nax.axis(\"equal\")\nfig.suptitle('Count of Company', fontsize=10)\n\nfor i in range(n):\n    innerring, _ = ax.pie([m - data[i], data[i]], radius = r - i * w, startangle = 90, labels = [\"\", labels[i]], labeldistance = 1 - 1 \/ (1.5 * (n - i)), textprops = {\"alpha\": 0}, colors = [\"white\", colors[i]])\n    plt.setp(innerring, width = w, edgecolor = \"white\")\n\nplt.legend()\nplt.show()","4f51f53e":"df_pvt=df[['city_development_index','gender','training_hours','experience']]\npd.pivot_table(df_pvt, values=['city_development_index','training_hours','experience'],columns=['gender'], aggfunc='mean')","8951132f":"df_raw = df[['training_hours', 'major_discipline']].groupby('major_discipline').apply(lambda x: x.mean())\ndf_raw.sort_values('training_hours', inplace=True)\n\nfig, ax = plt.subplots(figsize=(10,5), dpi= 80)\nax.hlines(y=df_raw.index, xmin=11, xmax=26, color='gray', alpha=0.7, linewidth=1, linestyles='dashdot')\nax.scatter(y=df_raw.index, x=df_raw.training_hours, s=75, color='firebrick', alpha=0.7)\nfig.suptitle('Training hours', fontsize=20)","5928cdac":"df_dict=dict(sorted(df['last_new_job'].value_counts().to_dict().items()))\ndf_d=pd.DataFrame({'x_axis': df_dict.keys(), 'y_axis': df_dict.values() })\nplt.plot( 'x_axis', 'y_axis', data=df_d, linestyle='dotted', marker='o')\nplt.xlabel(\"Years since Last New Job\")\nplt.ylabel(\"Count of Employees\")\nplt.show()","8eac7726":"# Ordinal values\n\ncompany_size={'50-99':3, '<10':1, '5000-9999':7, '1000-4999':6, '10\/49':2, '100-500':4,'10000+':8, '500-999':5}\ndf['company_size']=df['company_size'].map(company_size)\n\neducation_level={'Graduate':1,'Masters':2,'Phd':3}\ndf['education_level']=df['education_level'].map(education_level)\n\nenrolled_university={'No enrollment':1, 'Part time course':2, 'Full time course':3}\ndf['enrolled_university']=df['enrolled_university'].map(enrolled_university)\n\nrelevent_experience={'No relevent experience':0, 'Has relevent experience':1}\ndf['relevent_experience']=df['relevent_experience'].map(relevent_experience)","5f555c01":"# Replacing with count\n\ndf['company_type']=df['company_type'].map(df['company_type'].value_counts()).astype(int)\ndf['major_discipline']=df['major_discipline'].map(df['major_discipline'].value_counts()).astype(int)\ndf['city']=df['city'].map(df['city'].value_counts()).astype(int)\ndf['gender']=df['gender'].map(df['gender'].value_counts()).astype(int)\n","ab8ebb15":"# Since I'm using XGBoost no standardization is required\n\nfrom sklearn.model_selection import train_test_split\n\nfrom numpy import loadtxt\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report,accuracy_score\nmodel = XGBClassifier(max_depth=3)\n\ndf_y=df['target']\ndf.drop('target',axis=1,inplace=True)\ndf.drop('enrollee_id',axis=1,inplace=True)","e772c69d":"from sklearn.model_selection import train_test_split \nX_train, X_test, y_train, y_test = train_test_split(df, df_y, test_size=0.2, random_state=71) \n\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\n","135559d5":"print('Confusion matrix \\n {}'.format(confusion_matrix(y_test,y_pred)))\nprint('Accuracy score {:.2f}'.format(accuracy_score(y_test,y_pred)*100))\nprint(classification_report(y_test,y_pred))","6d4a9db8":"# Data visualization","e9585d2e":"**Observation 1**\n\n1. Lot's of null values,I'm dropping them.\n2. Company_size has ordinal values.  \n3. Lot's of Unqiue value in features. We will checkthem after we drop the null values.\n","3d7ebcaf":"**Observation 2**\n\n1. Training hours vary with degree\n2. Women has high training hours than Men\n3. Year of experience is also high in men\n4. Training hours in Early stage start up is also high as compare to Public sector","f087d4f1":"# Data preparation for algorithem"}}