{"cell_type":{"c1630889":"code","76823d36":"code","daf09c31":"code","e833f4ef":"code","c68a8c07":"code","88807704":"code","03b5bde7":"code","2a402bb9":"code","5a2e286b":"code","68a3e39b":"code","e7ee8219":"code","1865d408":"code","54553c83":"code","6dc425a1":"code","b3c24dfa":"code","a7e043fb":"code","0bfdfb31":"code","2d26bb03":"code","5658c2a9":"code","af58997a":"code","1219adfe":"code","8c60894c":"code","a8428b38":"code","a8e627af":"code","2fa73192":"code","23ff90bd":"code","88b9dcb0":"code","d06df323":"code","929a23de":"code","13e79f34":"code","b020b589":"code","421ef21b":"code","c5beb668":"code","d3f213b9":"code","e9c7b4e1":"code","f194d322":"code","94f2683f":"code","421d3093":"code","78deff97":"code","d66d472f":"code","2ddab5a5":"code","6bb1e831":"markdown","183f81e9":"markdown","48c1176a":"markdown","4f25f408":"markdown","7698e05f":"markdown","496acb62":"markdown","8b2ea368":"markdown","b896ba28":"markdown","9078d6d1":"markdown","6c5a699c":"markdown","50d30ab1":"markdown","e67ef2fd":"markdown","21fd16ab":"markdown","9a33b681":"markdown","dba47199":"markdown","f6b88527":"markdown","74d73c55":"markdown","7b0b957e":"markdown","bcefed23":"markdown","e271a5cf":"markdown","fa546dd0":"markdown","7042a598":"markdown","7d2d1492":"markdown","d4e7e1e8":"markdown"},"source":{"c1630889":"~0","76823d36":"~1","daf09c31":"~-1","e833f4ef":"~-123","c68a8c07":"0 ^ 0 ","88807704":"0 ^ 1  ","03b5bde7":"1 ^ 0  ","2a402bb9":"1 ^ 1 ","5a2e286b":"0 & 0 ","68a3e39b":"0 & 1 \n","e7ee8219":"1 & 0 \n","1865d408":"1 & 1","54553c83":"bin(60)","6dc425a1":"bin(30)","b3c24dfa":"60 & 30 ","a7e043fb":"bin(60 & 30) ","0bfdfb31":"0 | 0\n","2d26bb03":"0 | 1 \n","5658c2a9":"1 | 0 \n","af58997a":"1 | 1 ","1219adfe":"bin(60)","8c60894c":"bin(30)","a8428b38":"bin(60 & 30) ","a8e627af":"# 2 = 0b10 \n2 << 2 # Out: 8 \n","2fa73192":"bin(2 << 2)","23ff90bd":"# 8 = 0b1000\nbin(8) # Out: 0b1000\n","88b9dcb0":"7 << 1 \n# Out: 14","d06df323":"3 << 4 # Out: 48  ","929a23de":"8 >> 2 ","13e79f34":"bin(8)","b020b589":"bin(8 >> 2) ","421ef21b":"36 >> 1 ","c5beb668":"36 >> 2 ","d3f213b9":"15 >> 1","e9c7b4e1":"48 >> 4","f194d322":"59 >> 3","94f2683f":"a = 0b001 \na &= 0b010 \nbin(a)","421d3093":"a = 0b001 \na |= 0b010 \nbin(a)\n","78deff97":"a = 0b001 \na <<= 2 \nbin(a)\n\n","d66d472f":"a = 0b100 \na >>= 2 \nbin(a)\n","2ddab5a5":"a = 0b101 \na ^= 0b011 \nbin(a)","6bb1e831":"### Inplace Operations\n","183f81e9":"The | operator will perform a binary \"or,\" where a bit is copied if it exists in either operand. That means:\n","48c1176a":"The << operator will perform a bitwise \"left shift,\" where the left operand's value is moved left by the number of bits given by the right operand.\n","4f25f408":"The >> operator will perform a bitwise \"right shift,\" where the left operand's value is moved right by the number of bits given by the right operand.\n","7698e05f":"Performing a left bit shift of 1 is equivalent to multiplication by 2:","496acb62":"### Bitwise Right Shift\n","8b2ea368":"### Bitwise XOR (Exclusive OR)","b896ba28":"In general, though, this means ~n = -n - 1.","9078d6d1":"Note, the overall e\ufb00ect of this operation when applied to positive numbers can be summarized:\n\n    \n    ~n -> -|n+1|\n   ","6c5a699c":" ### Bitwise NOT\n","50d30ab1":"The ^ operator will perform a binary XOR in which a binary 1 is copied if and only if it is the value of exactly one operand. Another way of stating this is that the result is 1 only if the operands are di\ufb00erent. Examples include:\n","e67ef2fd":"All of the Bitwise operators (except ~) have their own in place versions\n","21fd16ab":"Bitwise operations alter binary strings at the bit level. These operations are incredibly basic and are directly supported by the processor. These few operations are necessary in working with device drivers, low-level graphics, cryptography, and network communications. This section provides useful knowledge and examples of Python's bitwise operators.","9a33b681":"###  Bitwise Left Shift\n","dba47199":"### Bitwise AND\n","f6b88527":"### Bitwise OR\n","74d73c55":"# Chapter 10: Bitwise Operators\n","7b0b957e":"Performing a left bit shift of n is equivalent to multiplication by 2**n:","bcefed23":"The ~ operator will \ufb02ip all of the bits in the number. Since computers use signed number representations \u2014 most notably, the two's complement notation to encode negative binary numbers where negative numbers are written with a leading one (1) instead of a leading zero (0).","e271a5cf":"Performing a right bit shift of n is equivalent to integer division by 2**n:\n","fa546dd0":"And then, when applied to negative numbers, the corresponding e\ufb00ect is:\n    \n  ~-n -> |n-1|  ","7042a598":"This means that if you were using 8 bits to represent your two's-complement numbers, you would treat patterns from 0000 0000 to 0111 1111 to represent numbers from 0 to 127 and reserve 1xxx xxxx to represent negative numbers.\n","7d2d1492":"The & operator will perform a binary AND, where a bit is copied if it exists in both operands. That means:","d4e7e1e8":"Performing a right bit shift of 1 is equivalent to integer division by 2:"}}