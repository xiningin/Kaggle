{"cell_type":{"f08f9f91":"code","cc674ab1":"code","13a3a735":"code","751ad985":"code","4c464a56":"code","93bba30e":"code","1da196d4":"code","539e6acd":"code","8cea4fda":"code","4654c778":"code","6e380bda":"code","16151200":"code","49668816":"code","3afea467":"code","c07cd931":"code","f4bad642":"code","afe7f64f":"code","79fe465d":"code","ad3d221d":"code","92fa52d4":"code","e6ab95c5":"code","bd4f8d6a":"code","eda5f159":"markdown","59b67c46":"markdown"},"source":{"f08f9f91":"import pandas as pd\nimport numpy as np\n\nimport tensorflow as tf\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler,LabelEncoder, RobustScaler\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\n\nimport matplotlib.pyplot as plt","cc674ab1":"# Read train and test csv files\ntrain_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\nor_test_df = test_df","13a3a735":"# to have an overlook of data\ntrain_df.head(n=2)","751ad985":"train_df = train_df.drop(['Name', 'PassengerId'], axis=1)\ntest_df = test_df.drop(['Name', 'PassengerId'], axis=1)","4c464a56":"def convert_to_str(df):\n    for col in df.columns:\n        if (df[col].dtype == np.int64 or df[col].dtype == np.float64):\n            df[col] = df[col].fillna(method='ffill')\n        else:\n            df[col] = df[col].fillna(method='ffill')\n    return df\n\ntrain_df = convert_to_str(train_df)\ntest_df = convert_to_str(test_df)","93bba30e":"train_df['relatives'] = train_df['SibSp'] + train_df['Parch']\ntest_df['relatives'] = test_df['SibSp'] + test_df['Parch']\n\ntrain_df = train_df.drop(['SibSp', 'Parch'], axis=1)\ntest_df = test_df.drop(['SibSp', 'Parch'], axis=1)","1da196d4":"train_df['Ticket'] = train_df['Ticket'].astype(str)\ntest_df['Ticket'] = test_df['Ticket'].astype(str)\n\ntrain_df['Cabin'] = train_df['Cabin'].astype(str)\ntest_df['Cabin'] = test_df['Cabin'].astype(str)\n\nfor col in ['Ticket', 'Cabin']:\n    le = LabelEncoder()\n    train_df[col] = le.fit_transform(train_df[col])\n    test_df[col] = le.fit_transform(test_df[col])","539e6acd":"str_columns = ['Sex', 'Embarked']\nnum_columns = ['Pclass', 'Age', 'relatives', 'Fare', 'Ticket', 'Cabin']","8cea4fda":"train_df['type'] = 'train'\ntest_df['type'] = 'test'\n\n# Add a dummy SalePrice column to test dataframe to make number of columns equal \ntest_df['Survived'] = train_df['Survived'].iloc[:418]\n\ndf = train_df.append(test_df, ignore_index=True)","4654c778":"for col in str_columns:\n    one_hot = pd.get_dummies(df[col])\n\n    replace_cols = {}\n    for one_col in one_hot.columns:\n        replace_cols[one_col] = f\"{col}_{one_col}\"\n    one_hot = one_hot.rename(columns=replace_cols)\n\n    df = df.drop(col, axis = 1)\n    df = df.join(one_hot)","6e380bda":"train_df = df[df['type'] == 'train']\ntest_df = df[df['type'] == 'test']\n\ntrain_df = train_df.drop(['type'], axis=1)\ntest_df = test_df.drop(['type'], axis=1)\n\ntest_df = test_df.reset_index(drop=True)","16151200":"scaler = MinMaxScaler()\nscaler.fit(train_df[num_columns])","49668816":"train_df[num_columns] = scaler.transform(train_df[num_columns])\ntest_df[num_columns] = scaler.transform(test_df[num_columns])","3afea467":"test_df = test_df.drop(['Survived'], axis=1)","c07cd931":"train_labels = train_df['Survived']\ntrain_data = train_df.drop(['Survived'], axis=1)","f4bad642":"model = RandomForestClassifier(n_estimators=100, max_depth=3, random_state=2)","afe7f64f":"model.fit(train_data, train_labels)","79fe465d":"predictions = model.predict(test_df)","ad3d221d":"test_df['Survived'] = predictions","92fa52d4":"# Create results dataframe\nresults = pd.DataFrame()\nresults['PassengerId'] = or_test_df['PassengerId']\nresults['Survived'] = test_df['Survived']","e6ab95c5":"results.shape","bd4f8d6a":"results.to_csv('submissions.csv', index=False)","eda5f159":"### Scaling","59b67c46":"### Converting columns with string values to integers"}}