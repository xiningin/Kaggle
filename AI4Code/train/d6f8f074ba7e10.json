{"cell_type":{"d5d50bfb":"code","a5281d9d":"code","87777ae6":"code","f062806c":"code","94b23627":"code","f38dfd55":"code","b4b82b6d":"code","94b00448":"code","78b57074":"code","5a1c33a9":"code","5307d347":"code","96bb47cb":"code","7e2b3d03":"code","8e86f572":"code","991b7764":"code","b7b278fa":"code","62bc54a2":"code","121c905d":"code","86a49d13":"code","52aec1fd":"code","c58b253e":"code","754a9fdf":"code","770d356b":"code","4623bd44":"code","4c1d9866":"code","343b908a":"code","5bd65d7f":"code","4a6d55c0":"code","9d98847a":"code","735387ea":"code","9b36fb94":"code","97c29ac3":"code","08aeca8c":"code","724ecfbf":"code","601ee813":"code","8f4b14ab":"markdown"},"source":{"d5d50bfb":"import pandas as pd, numpy as np, matplotlib.pyplot as plt, seaborn as sns\n%matplotlib inline","a5281d9d":"from sklearn.datasets import load_digits\ndigits = load_digits()\ndigits.keys()\nprint(digits['data'])","87777ae6":"X = digits['data']\ny = digits['target']\nX.shape, y.shape","f062806c":"some_digit = X[750]\nsome_digit_image = some_digit.reshape(8,8)\n\nplt.imshow(some_digit_image,cmap='binary',interpolation='none')\nplt.axis('off')\nplt.show()","94b23627":"X_train, X_test, y_train, y_test = X[:1500], X[1500:], y[:1500], y[1500:]","f38dfd55":"shuffle = np.random.permutation(1500)\nX_train = X_train[shuffle]\ny_train = y_train[shuffle]","b4b82b6d":"from sklearn.ensemble import RandomForestClassifier","94b00448":"rfc = RandomForestClassifier(n_estimators=200)\nrfc.fit(X_train,y_train)","78b57074":"#rfc.predict_proba([some_digit])","5a1c33a9":"from sklearn.model_selection import cross_val_predict, cross_val_score, StratifiedKFold\n\ny_train_pred = cross_val_predict(rfc,X_train,y_train,cv=2)","5307d347":"from sklearn.metrics import f1_score\nf1_score(y_train,y_train_pred,average='weighted')","96bb47cb":"cross_val_score(rfc,X_train,y_train,cv=2,scoring='f1_weighted').mean()","7e2b3d03":"from sklearn.linear_model import Perceptron","8e86f572":"pr = Perceptron()\npr.fit(X_train,y_train)","991b7764":"skf = StratifiedKFold(n_splits=3)\ncross_val_score(pr,X_train,y_train,cv=skf,scoring='f1_weighted').mean()","b7b278fa":"from sklearn.model_selection import ShuffleSplit, train_test_split","62bc54a2":"from sklearn.ensemble import BaggingClassifier, GradientBoostingClassifier\n\nensemble_clf = BaggingClassifier(base_estimator=pr)","121c905d":"ensemble_clf.fit(X_train,y_train)\ncross_val_score(ensemble_clf,X_train,y_train,cv=skf,scoring='f1_weighted').mean()","86a49d13":"# using a multi-layer perceptron\n\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV","52aec1fd":"MLPC = MLPClassifier()\n\nparam = {'alpha': [10,1,0.1,0.01], 'hidden_layer_sizes' :\n[(50,50,50),(50,50,50,50,50)], 'activation': ['relu','logistic'], 'solver' : ['adam']}\n\nCV = RandomizedSearchCV(MLPC,param_distributions=param,cv=skf,n_iter=15).fit(X_train,y_train)\nCV.best_score_","c58b253e":"MLPC = CV.best_estimator_\nMLPC.fit(X_train,y_train)","754a9fdf":"MLPC_pred = MLPC.predict(X_test)","770d356b":"from sklearn.metrics import f1_score, precision_score, recall_score\n\nprint('F1 : ', f1_score(MLPC_pred, y_test,average='weighted'))\nprint('\\n')\nprint('Precision : ', precision_score(MLPC_pred, y_test,average='weighted'))\nprint('\\n')\nprint('Recall : ', recall_score(MLPC_pred, y_test,average='weighted'))","4623bd44":"#Stacking with a neural network\n\n#split the training set into two data sets\n\nX1, X_stack, y1, y_stack = train_test_split(X_train,y_train,test_size=0.33,stratify=y_train)\n\n#train the first base learner: MLP\n\ngrid = GridSearchCV(MLPC,param_grid=param,cv=skf,n_jobs=-1).fit(X1,y1)\ngrid.best_score_","4c1d9866":"nn_best = grid.best_estimator_\n\n#Save estimator with Pickle\n\nimport pickle\n\nf = open('nn_best.save', 'wb')\npickle.dump(nn_best, f, protocol = pickle.HIGHEST_PROTOCOL)\nf.close()","343b908a":"#Train the second base learner: GBC\n\npm = {'learning_rate': [0.1,0.05,0.03,0.01], 'loss': ['deviance'],'max_depth': [5,7,10],'max_features': [0.4,0.6,0.8,1.0],'min_samples_leaf': [2,3,5],'n_estimators': [100],'warm_start': [True], 'random_state':[7]}\n\nboost_gs = RandomizedSearchCV(GradientBoostingClassifier(), param_distributions=pm, n_iter=15, cv= skf,n_jobs=-1).fit(X1,y1)\nboost_gs.best_score_\n\ngrad_boost = boost_gs.best_estimator_","5bd65d7f":"#Save estimator with Pickle\n\ndef pickle_func(filename, saved_object):\n  import pickle\n  f = open(filename, 'wb')\n  pickle.dump(saved_object, f, protocol=pickle.HIGHEST_PROTOCOL)\n  f.close()\n  return None\n\npickle_func('grad_boost.save', 'gbt_inst')","4a6d55c0":"#Train a third base learner: Bag of classifier\n\nparam_dist = {'max_samples': [0.5,1.0],'max_features' : [0.5,1.0],'oob_score' : [True, False],'base_estimator__min_samples_leaf': [4,5],'n_estimators': [20]}\n\nensemble = BaggingClassifier(base_estimator=grad_boost)\n\nbag_gs = RandomizedSearchCV(ensemble, param_distributions=param_dist, n_iter=15, cv= skf,n_jobs=-1).fit(X1,y1)\nbag_gs.best_score_\n\nbag_gs = bag_gs.best_estimator_","9d98847a":"pickle_func('bag_gs.save', bag_gs)","735387ea":"def handle_X_set(X_train_set_in):\n X_train_set = X_train_set_in.copy()\n y_pred_nn = nn_best.predict(X_train_set)\n y_pred_gbt = grad_boost.predict(X_train_set)\n y_pred_bag = bag_gs.predict(X_train_set)\n preds_df = pd.DataFrame(columns = ['nn', 'gbt','bag'])\n preds_df['nn'] = y_pred_nn\n preds_df['gbt'] = y_pred_gbt\n preds_df['bag'] = y_pred_bag\n return preds_df\n\ndef predict_from_X_set(X_train_set_in):\n X_train_set = X_train_set_in.copy()\n return final_etr.predict(handle_X_set(X_train_set))","9b36fb94":"preds_df = handle_X_set(X_stack)","97c29ac3":"from sklearn.ensemble import ExtraTreesClassifier\n\np_dist = {'max_features' : ['sqrt','log2',1.0],'min_samples_leaf' : [1, 2, 3, 7, 11],'n_estimators': [50, 100],'oob_score': [True, False]}\n\nins = RandomizedSearchCV(ExtraTreesClassifier(), param_distributions=p_dist,cv=skf,n_iter=15,n_jobs=-1).fit(preds_df.values,y_stack)\n\n#ins.best_score_\n\nfinal_etr = ins.best_estimator_","08aeca8c":"cross_val_score(final_etr,preds_df.values,y_stack,scoring='precision_weighted',cv=skf).mean()","724ecfbf":"y_pred = predict_from_X_set(X_test)","601ee813":"from sklearn.metrics import precision_score, recall_score, f1_score\n\nprint('Precision: ',precision_score(y_test,y_pred,average='weighted'))\nprint('Recall: ',recall_score(y_test,y_pred,average='weighted'))\nprint('F1 Score: ',f1_score(y_test,y_pred,average='weighted'))","8f4b14ab":"Classification using neural network from sci-kit learn framework"}}