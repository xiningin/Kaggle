{"cell_type":{"9d5278a7":"code","71bac190":"code","c30357a4":"code","44d9060e":"code","1c239b8c":"code","608e4cff":"code","85aa2e96":"code","1b1273cf":"markdown","92846ed8":"markdown","560bdc69":"markdown","cd7ee235":"markdown"},"source":{"9d5278a7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","71bac190":"import sklearn.datasets\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport matplotlib.pyplot as plt","c30357a4":"breast_cancer = sklearn.datasets.load_breast_cancer()\nX = breast_cancer.data\nY = breast_cancer.target\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y)\n\n","44d9060e":"class Perceptron:\n  \n  def __init__ (self):\n    self.w = None\n    self.b = None\n    \n  def model(self, x):\n    return 1 if (np.dot(self.w, x) >= self.b) else 0\n    \n  def predict(self, X):\n    Y = []\n    for x in X:\n      result = self.model(x)\n      Y.append(result)\n    return np.array(Y)\n    \n  def fit(self, X, Y, epochs = 1, lr = 1):\n    \n    self.w = np.ones(X.shape[1])\n    self.b = 0\n    \n    accuracy = {}\n    max_accuracy = 0\n    \n    wt_matrix = []\n    \n    for i in range(epochs):\n      for x, y in zip(X, Y):\n        y_pred = self.model(x)\n        if y == 1 and y_pred == 0:\n          self.w = self.w + lr * x\n          self.b = self.b - lr * 1\n        elif y == 0 and y_pred == 1:\n          self.w = self.w - lr * x\n          self.b = self.b + lr * 1\n          \n      wt_matrix.append(self.w)    \n          \n      accuracy[i] = accuracy_score(self.predict(X), Y)\n      if (accuracy[i] > max_accuracy):\n        max_accuracy = accuracy[i]\n        chkptw = self.w\n        chkptb = self.b\n        \n    self.w = chkptw\n    self.b = chkptb\n        \n    print(max_accuracy)\n    #print(self.w)\n    #print(self.b)\n    #print (accuracy)\n    \n    #plt.plot(accuracy.values())\n    #plt.ylim([0, 1])\n    #plt.show()\n    \n    return np.array(wt_matrix)","1c239b8c":"perceptron = Perceptron()\nwt_matrix = perceptron.fit(X_train, Y_train, 1000, 0.5)","608e4cff":"Y_pred_test = perceptron.predict(X_test)\nprint(accuracy_score(Y_pred_test, Y_test))","85aa2e96":"plt.plot(wt_matrix[-1,:])\nplt.show()","1b1273cf":"The puprose is walkthrough percepton model using breast cancer data from sklearn datasets","92846ed8":"Load Library","560bdc69":"**What is perceptron model?**\n\nThe model can be represented as :\n\ny=1,if \u2211iwixi >= b \n\ny=0,otherwise\n\nxi take all real inputs\nwi take all real input\n\nx is values of all features in one row where as w are the weigtage for each features\n\nwe need to identify value of wi and xi , for which the accuracy is maximum.\n\nThere are two more hyper paramters\n1. Epchos : this tells how many time data has to parsed\n2. Learning rate : we can decrease or smoothen the learning rate.\n\nCheckpoint is a concept which store value of w and b for which accuracy is maximum.\n\nExplain the class:\n\n1. Init function take w and b , which are the paramters to be identified.\n2. Model compare the dotproduct of w and x with b and return 0 or 1. \n3. predict take the entire datasets\/matrix and for each row use model and store the y_predict\n4. Fit takes following inputs\n    self (b,w), inputs, output, epcos, lerning rate\n    it has two loops \n    outer loop goes from 1 to epcos\n         inner loop goes through all rows in the X\n                predict the y for each row\n                compare predicted value and actual value\n                if actual value is 1 and predicted value is 0\n                    increase w by learning rate * x\n                    increase b by learning rate * 1\n                if actual value is 0 and predicted value is 1\n                    decrease w by learning rate * x\n                    decrease b by learning rate * 1\n          store w in a matrix\n             \n    check the accuracy , if accuracy increase over last accuracy\n      store w and b in chkpt varaible\n      \n      \n\n    \n\n","cd7ee235":"Load and split the data in train and test"}}