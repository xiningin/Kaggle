{"cell_type":{"4181ae49":"code","74b62a0b":"code","d5c0069b":"code","559cf682":"code","b4a8ec35":"code","64010c04":"code","6b894bc2":"code","f19fe783":"code","1ac578de":"code","eae6d821":"code","9cf0b0a9":"code","7439dc0b":"code","16d7b76c":"code","772d3a32":"code","359855bf":"code","2b451105":"code","6ff72b5e":"code","ac03ecfe":"code","3a38f120":"code","959c1962":"code","3e3c0772":"code","9e042775":"code","b48c9288":"code","3b56348a":"code","3af08e64":"code","f95ffa62":"code","88647d97":"code","f86bc0cd":"code","148527a1":"code","d2164821":"code","45aff28b":"code","46b0890c":"code","c66d856c":"code","3b38ed5c":"code","d0e4e1f7":"code","c861aff9":"code","247e7df8":"code","ed7eb098":"code","478a0a12":"code","860ac373":"code","851dbf3f":"code","03bbb9d9":"code","d3e25748":"code","bfdb1256":"code","711c34e7":"code","652e0b89":"code","8c949d3f":"code","c682e557":"code","4a9d47a6":"code","91ea75eb":"code","ceda3d82":"code","7bf0d317":"code","fce16720":"code","e3145c59":"code","f36eec77":"code","3561ada9":"code","c2072d22":"code","d06d2bdd":"code","a2b7ff33":"code","a3dd8762":"code","de453422":"code","54b3292e":"code","785085bc":"code","94eb68bb":"code","0672f306":"code","4cbf267c":"code","60b6f680":"code","1d63557b":"code","92da6369":"code","c4ca0cac":"code","8d344db5":"code","220b076d":"code","c1ee4960":"code","ea53560a":"code","ec2d182c":"code","81351ced":"code","51cee7a1":"code","f3f05c4d":"code","fdb00dbb":"code","c5cfc7d3":"code","4c7e5d91":"code","39e84894":"code","2448564a":"code","eaace94a":"code","f379efac":"code","ec6db9a6":"code","18ea24ca":"code","4d28dc9c":"code","93bdeea9":"code","1cc8bcee":"code","c1fe96e6":"code","bb0e0a58":"code","4610eef3":"code","d6c1fcde":"code","882e2efd":"code","ab2ec53e":"code","25aaac20":"code","866cb070":"code","7018b5e1":"code","6cb954a6":"code","8cdc5751":"code","ea90aceb":"code","8e618f05":"code","ea8c7936":"code","0b07581d":"code","421f4685":"code","1d5dea0f":"code","d33f465c":"code","da474220":"code","cea50da4":"code","3ea88f3d":"code","8fcdba47":"code","00c2f1ad":"code","96b2ba96":"code","8b00b4f6":"code","2eb493b2":"code","f84d1792":"code","39ccf37e":"code","e854d603":"code","2cddcc35":"code","b4c5dbff":"code","b5650847":"code","0b71cd57":"code","5d9d71ad":"code","75832b17":"code","41044b54":"code","f4d46e6e":"code","b5fdbe6f":"code","f2117742":"code","69b1f30e":"code","0780da2e":"code","787e6dcf":"code","80cd8fdb":"code","e38c4d8a":"code","6276bc5a":"code","62035ac5":"code","fde5a709":"code","bf222a45":"code","ed928e69":"code","ee030874":"code","cbd1c1d0":"code","d5ead9f6":"code","68298420":"code","74320b88":"code","c97fb638":"code","e4be831a":"code","2e1884b8":"code","84a78768":"code","63c3dae4":"code","ae90b44b":"code","d3378d01":"code","4faf2d0a":"code","f5143730":"code","2738bc79":"code","c8c92da2":"code","22e5eb84":"code","d4f4dd9d":"code","189549eb":"code","e2cd77a9":"code","34f034cf":"code","f2e59582":"code","99e79977":"code","91613439":"code","a017d8ef":"code","f3662477":"code","09b9abc9":"code","aa780867":"code","1f92e552":"code","5483c2b7":"code","76789351":"code","b1764c92":"code","e2584c30":"code","6b8b2a73":"code","b26eff78":"code","d023088f":"code","a8408a71":"code","e292c7a0":"code","e2b3b3e1":"code","89420418":"code","8a40442f":"code","4c145351":"code","3b44b29a":"code","5f770807":"code","42e95db1":"code","c71fdf35":"code","35668c61":"code","e4007b99":"code","ca4a2360":"code","c3757c39":"code","5a3137ca":"code","31bccfe1":"code","4aa82c65":"code","ec5a04fe":"code","9b00697f":"code","123d87ca":"code","bb859fb7":"code","8244f590":"code","2a150ed6":"code","7c030aad":"code","bcc50bbb":"code","965c2ed1":"code","4b861f02":"code","8eaf53a5":"code","7e9062c2":"code","17f32df8":"code","32232528":"code","f2b6945b":"code","082abd2d":"code","7c39c218":"code","a5614fd9":"code","f7e7de19":"code","5640169f":"code","364079ad":"code","03a683d0":"code","ae84829b":"code","c22f2e11":"code","f34e995b":"code","dcbd83c8":"code","c7b702bf":"code","bfbfb40d":"code","b0d58f64":"code","c4dd63eb":"code","f10f7af4":"code","2ab646d1":"code","e7c6f400":"code","ed836ef4":"code","dc2e5be4":"code","cd8a223d":"code","68be5653":"code","f221deae":"code","5794c9d4":"code","680a23dc":"code","27667077":"code","9178594b":"code","de915a1c":"code","eed39ac5":"code","26e09b3a":"code","c50fc3fb":"code","70b5644e":"code","f5b6be75":"code","67967268":"code","b97e960f":"code","2923ee08":"code","3c0257a9":"code","2cd55f21":"code","123a4f5e":"code","2a237c7a":"code","92145645":"code","b36b1223":"code","a437dc87":"code","68e078b2":"code","43c08d73":"code","5c661265":"code","ad247977":"code","feb8b09c":"code","ea1b29b3":"code","db4372e2":"code","8a2d452f":"code","0aa08734":"code","2be58d5a":"code","72cd137b":"code","317d8b05":"code","e485ba2c":"code","dff43be7":"code","bdb9ad93":"code","c33c23d3":"code","25896281":"code","47683b1f":"code","c54a6500":"code","fb6bf3e3":"code","ce3396f2":"code","eeb11fe4":"code","c5ef4e61":"code","0caa51a5":"code","6c14001b":"code","7d3f6690":"code","7874e7d4":"code","c73717ff":"code","72343f56":"code","ebb03c61":"code","465defa5":"code","2f3c22ad":"code","61456d64":"code","5a204e0d":"code","bc6f78df":"code","1427e6e2":"code","73e7948b":"code","4f434bae":"code","a1a480b2":"code","f859d487":"code","7785f381":"code","52827914":"code","eff7d917":"code","0f609d0a":"code","c8151930":"code","145ab29b":"code","910a1de7":"code","69bc7fb6":"code","9d3c10b0":"code","558f3e49":"code","aec9ba6d":"code","2e6780f6":"code","a4ffdd84":"code","fd474405":"code","1444681b":"code","761606d1":"code","d7697c97":"code","73729c90":"code","b70c2c58":"code","ce44190a":"code","99b8a92c":"code","00c04178":"code","fcf30ba0":"code","5562b3b9":"code","a043de13":"code","1dad6709":"code","c2133c16":"code","d7507627":"code","a0e6107a":"code","2be81ef0":"code","633e7cc4":"code","9c1ac82d":"code","779a10f1":"code","16453b21":"code","640716c9":"code","22b4b114":"code","500f42cd":"code","fb685c10":"code","cab92a6b":"code","3914bb7b":"code","26eadf1a":"code","eb3859ec":"code","d1a55a49":"code","b45727c8":"code","86e0ea54":"code","3bb5fdbc":"code","32c444eb":"code","887c9858":"code","0c5cb3cb":"code","22c6c5f1":"code","0cf892c9":"code","9a212152":"code","576e79c4":"code","9b18d0d5":"code","c8074d8e":"code","aa40f0fb":"code","7e8777b5":"code","147a7740":"code","6d1a3661":"code","0c78b292":"code","a8b48b5d":"code","3dcf2cd0":"code","f20e08c9":"code","cf80ab11":"code","eae4b879":"code","05c20575":"code","4bf93c71":"code","c0cc9f9b":"code","281c78a3":"code","897fb20e":"code","cd54f7e0":"code","a54a0017":"code","64f70fa6":"code","85b89487":"code","9a6cbfe0":"code","9626136b":"code","fafd7b78":"code","484ee9f6":"code","9915dcca":"code","267c0d5b":"code","786ffb40":"code","bef5cfec":"code","6e8b52ff":"code","93bdee06":"code","a8948b0a":"code","95f24bc6":"code","ebc83dc9":"code","cb778d0d":"code","f181479a":"code","8f8642cc":"code","cfe78a04":"code","21fd7889":"markdown","0954f958":"markdown","600496a3":"markdown","e4cb2e56":"markdown","199bde4a":"markdown","8f5583f2":"markdown","0b94f6e4":"markdown","938e430a":"markdown","1bc6d628":"markdown","1f25a1a8":"markdown","28b669d4":"markdown","5b8ff382":"markdown","ba3a2df9":"markdown","5b3e4aa2":"markdown","02f2a8fd":"markdown","5ba33e3e":"markdown","73480466":"markdown","1f8e1a04":"markdown","589f82eb":"markdown","4284532f":"markdown","0388295e":"markdown","bfd34368":"markdown","0e9bd200":"markdown","d8ea244e":"markdown","e8710f95":"markdown","fbe26c08":"markdown","08af2ad8":"markdown","36faec5b":"markdown","bea5bbd2":"markdown","5b707437":"markdown","ec247cfd":"markdown","109a6bd9":"markdown","e66fd64e":"markdown","78c9409b":"markdown","b4701990":"markdown","e454e5fd":"markdown","27ef0300":"markdown","b0a61db1":"markdown","c17e1f3f":"markdown","409d8360":"markdown","e2be6e7c":"markdown","a103d9bf":"markdown","4c7f1a0d":"markdown","ea39d4fe":"markdown","63715eb5":"markdown","bb02dd33":"markdown","8e1a5604":"markdown","0bbf9e61":"markdown","23250857":"markdown","7f273e33":"markdown","9b2c8f9e":"markdown","7319c31f":"markdown","1c3b109b":"markdown","9e5f3917":"markdown","5fa256ec":"markdown","fb1334ff":"markdown","f6770f3c":"markdown","db909344":"markdown","3b276ff3":"markdown","a93fb1d5":"markdown","f9ac384a":"markdown","7eabf54e":"markdown","b8dabdb3":"markdown","4645f5ca":"markdown","5c207314":"markdown","017304b9":"markdown","d921c0cb":"markdown","ac69c1de":"markdown","dd4a47ba":"markdown","0fbe17de":"markdown","8625396d":"markdown","5021cb0a":"markdown","edc10477":"markdown","12083a20":"markdown","614f9b30":"markdown","07d5f03b":"markdown","3e2e3a8b":"markdown","254323fe":"markdown","1b3cbcd1":"markdown","c35aec41":"markdown","2b9009da":"markdown","238b8c07":"markdown","2c87ae08":"markdown","a551e101":"markdown","0aa2a9f5":"markdown","69b20421":"markdown","544dd0ef":"markdown","94745262":"markdown","6870b802":"markdown","f919a7a1":"markdown","8153b07a":"markdown","b62f9db5":"markdown","5c40dee8":"markdown","168207a1":"markdown","76a4a0e2":"markdown","a0145381":"markdown","1b30a35a":"markdown","a4d3acf7":"markdown","8204eeac":"markdown","f300658c":"markdown","3f1ebb1e":"markdown"},"source":{"4181ae49":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom scipy import stats\nfrom scipy.stats import norm,skew\nfrom subprocess import check_output\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score, KFold, GridSearchCV\nimport warnings\nwarnings.filterwarnings('ignore')","74b62a0b":"df = pd.read_csv('..\/input\/german-credit-data\/german_credit_data.csv')\ndf.head()","d5c0069b":"columns =['status','duration','credit_history','purpose','amount','savings','employment_duration','installment_rate','personal_status_sex','other_debtors','present_residence','property','age','other_installment_plans','housing','number_credits','job','people_liable','telephone','foreign_worker','credit_risk']","559cf682":"df.columns = columns\ndf.head()","b4a8ec35":"df.info()","64010c04":"df.shape","6b894bc2":"status = {1:'no checking account', 2:'less than 0 DM', 3:'0 to 200 DM', 4:'200 DM or more'}\ndf['status'] = df['status'].map(status)\n\ncredit_history = {0 : 'delay in paying off in the past',       \n 1 : 'critical account\/other credits elsewhere',   \n 2 : 'no credits taken\/all credits paid back duly',\n 3 : 'existing credits paid back duly till now',\n 4 : 'all credits at this bank paid back duly'}\ndf['credit_history'] = df['credit_history'].map(credit_history)\n\npurpose = {0 : 'others', 1 : 'car (new)', 2 : 'car (used)',3 : 'furniture\/equipment', 4 : 'radio\/television', \n           5 : 'domestic appliances', 6 : 'repairs', 7 : 'education', 8 : 'vacation', 9 : 'retraining', 10 : 'business'}\ndf['purpose'] = df['purpose'].map(purpose)\n\nsavings = {1:'unknown\/no savings account', 2 :'less than 100 DM', 3:'100 to 500 DM', 4 :'500 to 1000 DM', 5:'1000 DM or more'}\ndf['savings'] = df['savings'].map(savings)\n\nemployment_duration = {1 : 'unemployed',2 : 'less than 1 year', 3 : '1 to 4 yrs', 4 : '4 to 7 yrs', 5 : '7 yrs or more'}\ndf['employment_duration'] = df['employment_duration'].map(employment_duration)\n\ninstallment_rate = {1 : '35 or more', 2 : '25 to 35', 3 : '20 to 25', 4 : 'less than 20'}\ndf['installment_rate'] = df['installment_rate'].map(installment_rate)\n\npersonal_status_sex = {1 : 'male : divorced\/separated', 2 : 'female : non-single or male : single', 3 : 'male : married\/widowed', 4 : 'female : single'}\ndf['personal_status_sex'] = df['personal_status_sex'].map(personal_status_sex)\n\nother_debtors = {1 : 'none', 2 : 'co-applicant', 3 : 'guarantor'}\ndf['other_debtors'] = df['other_debtors'].map(other_debtors)\n\npresent_residence = {1 : 'less than 1 year', 2 : '1 to 4 yrs', 3 : '4 to 7 yrs', 4 : '7 yrs or more'}\ndf['present_residence'] = df['present_residence'].map(present_residence)\n\nproperty = {1 : 'unknown\/no property', 2 : 'car or other',3 : 'building soc. savings agr.\/life insurance', 4 : 'real estate'}\ndf['property'] = df['property'].map(property)\n\nother_installment_options = {1 : 'bank',2 : 'stores',3 : 'none'}\ndf['other_installment_plans'] = df['other_installment_plans'].map(other_installment_options)\n\nhousing = {1:'for free', 2:'rent', 3:'own'} \ndf['housing'] = df['housing'].map(housing)\n\njob={1 : 'unemployed\/unskilled - non-resident',2 : 'unskilled-resident',3 : 'skilled employee\/official',4 : 'manager\/self-employed\/highly qualified employee'}\ndf['job'] = df['job'].map(job)\n\nnumber_credits = {1 : '1',2 : '2-3', 3 : '4-5',4 : '6 or more'}\ndf['number_credits'] = df['number_credits'].map(number_credits)\n\npeople_liable = {1 : '3 or more', 2 : '0 to 2'}\ndf['people_liable'] = df['people_liable'].map(people_liable)\n\ntelephone = {1 : 'no',2 : 'yes (under customer name)'}\ndf['telephone'] = df['telephone'].map(telephone)\n\nforeign_worker = {1 : 'yes', 2 : 'no'}\ndf['foreign_worker'] = df['foreign_worker'].map(foreign_worker)\n","f19fe783":"df.info()","1ac578de":"df.head()","eae6d821":"# Replacing the good credit risk records with 0 and bad credit risk records with 1\ndf['credit_risk'] = df['credit_risk'].replace({0:1,1:0})","9cf0b0a9":"# Mapping the credit risk records from 0 and 1 to good and bad respectively\ncreditrisk = {0:'good',1:'bad'}\ndf['credit_risk'] = df['credit_risk'].map(creditrisk)","7439dc0b":"sns.countplot(df['credit_risk'])","16d7b76c":"numerical_columns = ['duration','amount','age']","772d3a32":"df[numerical_columns].describe()","359855bf":"sns.distplot(df['duration'])\nprint('Skewness of duration:',df['duration'].skew())","2b451105":"sns.boxplot(df['duration'])","6ff72b5e":"sns.distplot(df['amount'])\nprint('Skewness of duration:',df['amount'].skew())","ac03ecfe":"sns.boxplot(df['amount'])","3a38f120":"sns.distplot(df['age'])\nprint('Skewness of age:',df['age'].skew())","959c1962":"sns.boxplot(df['age'])","3e3c0772":"categorical_columns = ['status','credit_history','purpose','savings','employment_duration','installment_rate','personal_status_sex','other_debtors','present_residence','property','other_installment_plans','housing','number_credits','job','people_liable','telephone','foreign_worker']","9e042775":"# status\nfig_dims = (8,5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='status',data=df, order=df['status'].value_counts().index)","b48c9288":"# credit_history\nfig_dims = (20, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='credit_history', order=df['credit_history'].value_counts().index, data=df)","3b56348a":"# purpose\nfig_dims = (17, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='purpose', order=df['purpose'].value_counts().index, data=df)","3af08e64":"# savings\nfig_dims = (15, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='savings', order=df['savings'].value_counts().index,data=df)","f95ffa62":"# employment_duration\nfig_dims = (10, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='employment_duration', order=df['employment_duration'].value_counts().index,data=df)","88647d97":"# installment_rate\nfig_dims = (8, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='installment_rate', order=df['installment_rate'].value_counts().index, data=df)","f86bc0cd":"# personal_status_sex\nfig_dims = (15, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='personal_status_sex', order=df['personal_status_sex'].value_counts().index, data=df)","148527a1":"# other_debtors\nfig_dims = (10, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='other_debtors', order=df['other_debtors'].value_counts().index, data=df)","d2164821":"df['other_debtors'].value_counts()","45aff28b":"# present_residence\nfig_dims = (10, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='present_residence', order=df['present_residence'].value_counts().index, data=df)","46b0890c":"# property\nfig_dims = (15, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='property', order=df['property'].value_counts().index, data=df)","c66d856c":"# other_installment_plans\nfig_dims = (8,5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='other_installment_plans', order=df['other_installment_plans'].value_counts().index, data=df)","3b38ed5c":"# housing\nfig_dims = (8, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='housing', order=df['housing'].value_counts().index, data=df)","d0e4e1f7":"# number_credits\nfig_dims = (8, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='number_credits', order=df['number_credits'].value_counts().index, data=df)","c861aff9":"# job\nfig_dims = (18, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='job', order=df['job'].value_counts().index, data=df)","247e7df8":"# people_liable\nfig_dims = (8, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='people_liable', order=df['people_liable'].value_counts().index, data=df)","ed7eb098":"# telephone\nfig_dims = (8, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='telephone', order=df['telephone'].value_counts().index, data=df)","478a0a12":"# foreign_worker\nfig_dims = (8, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='foreign_worker', order=df['foreign_worker'].value_counts().index, data=df)","860ac373":"sns.heatmap(df[numerical_columns].corr(), annot=True)","851dbf3f":"from statsmodels.stats.outliers_influence import variance_inflation_factor as vif\n\nvf = [vif(df[numerical_columns].values, i ) for i in range(df[numerical_columns].shape[1])]\npd.DataFrame(vf, index=numerical_columns, columns= [\"vif\"])","03bbb9d9":"sns.scatterplot('age','amount',data=df,hue='credit_risk')","d3e25748":"sns.scatterplot('duration','age',data=df,hue='credit_risk')","bfdb1256":"sns.scatterplot('duration','amount',data=df,hue='credit_risk')","711c34e7":"sns.distplot(df[df['credit_risk']=='good']['amount'])\nsns.distplot(df[df['credit_risk']=='bad']['amount'])\nplt.legend(['Good','Bad'])","652e0b89":"sns.distplot(df[df['credit_risk']=='good']['age'])\nsns.distplot(df[df['credit_risk']=='bad']['age'])\nplt.legend(['Good','Bad'])","8c949d3f":"sns.distplot(df[df['credit_risk']=='good']['duration'])\nsns.distplot(df[df['credit_risk']=='bad']['duration'])\nplt.legend(['Good','Bad'])","c682e557":"sns.boxplot(x='credit_risk',y='amount',data=df)","4a9d47a6":"sns.boxplot(x='credit_risk',y='duration',data=df)","91ea75eb":"sns.boxplot(x='credit_risk',y='age',data=df)","ceda3d82":"categorical_columns = ['status','credit_history','purpose','savings','employment_duration','installment_rate','personal_status_sex','other_debtors','present_residence','property','other_installment_plans','housing','number_credits','job','people_liable','telephone','foreign_worker','credit_risk']","7bf0d317":"# status\nfig_dims = (8, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='status',data=df, order=df['status'].value_counts().index, hue='credit_risk')","fce16720":"df[df['credit_risk'] == 'bad']['status'].value_counts().values[:2].sum()\/300 * 100","e3145c59":"# credit_history\nfig_dims = (20, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='credit_history', order=df['credit_history'].value_counts().index, data=df, hue='credit_risk')","f36eec77":"df[df['credit_risk'] == 'bad']['credit_history'].value_counts().values[0]\/300 * 100","3561ada9":"# purpose\nfig_dims = (17, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='purpose', order=df['purpose'].value_counts().index, data=df, hue='credit_risk')","c2072d22":"df[df['credit_risk'] == 'bad']['purpose'].value_counts().values[:3].sum()\/ 300 * 100","d06d2bdd":"# savings\nfig_dims = (15, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='savings', order=df['savings'].value_counts().index,data=df, hue='credit_risk')","a2b7ff33":"df[df['credit_risk'] == 'bad']['savings'].value_counts().values[0]\/ 300 * 100","a3dd8762":"# employment_duration\nfig_dims = (10, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='employment_duration', order=df['employment_duration'].value_counts().index,data=df, hue='credit_risk')","de453422":"df[df['credit_risk'] == 'bad']['employment_duration'].value_counts().values[:2].sum()\/ 300 * 100","54b3292e":"# installment_rate\nfig_dims = (8, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='installment_rate', order=df['installment_rate'].value_counts().index, data=df, hue='credit_risk')","785085bc":"df[df['credit_risk'] == 'bad']['installment_rate'].value_counts().values[0]\/300 * 100","94eb68bb":"# personal_status_sex\nfig_dims = (15, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='personal_status_sex', order=df['personal_status_sex'].value_counts().index, data=df, hue='credit_risk')","0672f306":"df[df['credit_risk'] == 'bad']['personal_status_sex'].value_counts().values[0] \/ 300 * 100","4cbf267c":"# other_debtors\nfig_dims = (15, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='other_debtors', order=df['other_debtors'].value_counts().index, data=df, hue='credit_risk')","60b6f680":"df[df['credit_risk'] == 'bad']['other_debtors'].value_counts().values[0] \/ 300 * 100","1d63557b":"# present_residence\nfig_dims = (10, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='present_residence', order=df['present_residence'].value_counts().index, data=df, hue='credit_risk')","92da6369":"df[df['credit_risk'] == 'bad']['present_residence'].value_counts().values[:2].sum() \/ 300 * 100","c4ca0cac":"# property\nfig_dims = (15, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='property', order=df['property'].value_counts().index, data=df, hue='credit_risk')","8d344db5":"print(df[df['credit_risk'] == 'bad']['property'].value_counts().values[0] \/300 * 100)\nprint(df[df['credit_risk'] == 'bad']['property'].value_counts().values[1] \/300 * 100)","220b076d":"# other_installment_plans\nfig_dims = (8,5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='other_installment_plans', order=df['other_installment_plans'].value_counts().index, data=df, hue='credit_risk')","c1ee4960":"df[df['credit_risk'] == 'bad']['other_installment_plans'].value_counts().values[0] \/ 300 * 100","ea53560a":"# housing\nfig_dims = (8, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='housing', order=df['housing'].value_counts().index, data=df, hue='credit_risk')","ec2d182c":"df[df['credit_risk'] == 'bad']['housing'].value_counts().values[0] \/ 300 * 100","81351ced":"# number_credits\nfig_dims = (8, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='number_credits', order=df['number_credits'].value_counts().index, data=df, hue='credit_risk')","51cee7a1":"df[df['credit_risk'] == 'bad']['number_credits'].value_counts().values[0] \/ 300 * 100","f3f05c4d":"# job\nfig_dims = (18, 6)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='job', order=df['job'].value_counts().index, data=df, hue='credit_risk')","fdb00dbb":"df[df['credit_risk'] == 'bad']['job'].value_counts().values[0] \/ 300 * 100","c5cfc7d3":"# people_liable\nfig_dims = (8, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='people_liable', order=df['people_liable'].value_counts().index, data=df, hue='credit_risk')","4c7e5d91":"df[df['credit_risk'] == 'bad']['people_liable'].value_counts().values[0] \/300 * 100","39e84894":"# telephone\nfig_dims = (8, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='telephone', order=df['telephone'].value_counts().index, data=df, hue='credit_risk')","2448564a":"df[df['credit_risk'] == 'bad']['telephone'].value_counts()","eaace94a":"# foreign_worker\nfig_dims = (8, 5)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.countplot(x='foreign_worker', order=df['foreign_worker'].value_counts().index, data=df, hue='credit_risk')","f379efac":"df[df['credit_risk'] == 'bad']['foreign_worker'].value_counts()","ec6db9a6":"# number_credits","18ea24ca":"df['number_credits'].value_counts()","4d28dc9c":"df['number_credits'] = df['number_credits'].apply(lambda x: '4 or more' if x=='4-5' or x=='6 or more' else x)","93bdeea9":"df['number_credits'].value_counts()","1cc8bcee":"# purpose","c1fe96e6":"df['purpose'].value_counts()","bb0e0a58":"df['purpose'] = df['purpose'].replace({'domestic appliances':'domestic appliances or radio\/television',\n                                      'radio\/television':'domestic appliances or radio\/television',\n                                      'business':'business or vacation',\n                                      'vacation':'business or vacation',\n                                      'retraining':'retraining or repairs',\n                                      'repairs':'retraining or repairs',\n                                      'car (new)':'car (new) or car (used)',\n                                      'car (used)':'car (new) or car (used)'})","4610eef3":"df['purpose'].value_counts()","d6c1fcde":"# savings","882e2efd":"df['savings'].value_counts()","ab2ec53e":"df['savings'] = df['savings'].apply(lambda x: '100 to 1000 DM' if x=='100 to 500 DM' or x=='500 to 1000 DM' else x)","25aaac20":"df['savings'].value_counts()","866cb070":"# job","7018b5e1":"df['job'].value_counts()","6cb954a6":"df['job'] = df['job'].apply(lambda x: 'unskilled-resident or unemployed\/unskilled non-resident' if x=='unskilled-resident' or x=='unemployed\/unskilled - non-resident' else x)","8cdc5751":"df['job'].value_counts()","ea90aceb":"status = {'no checking account':1, 'less than 0 DM':2, '0 to 200 DM':3, '200 DM or more':4}\ndf['status'] = df['status'].map(status)\n\nsavings = {'unknown\/no savings account':1, 'less than 100 DM':2, '100 to 1000 DM':3, '1000 DM or more':4}\ndf['savings'] = df['savings'].map(savings)\n\nemployment_duration = {'unemployed':1 ,'less than 1 year':2, '1 to 4 yrs':3, '4 to 7 yrs':4, '7 yrs or more':5}\ndf['employment_duration'] = df['employment_duration'].map(employment_duration)\n\ninstallment_rate = {'less than 20':1, '20 to 25':2, '25 to 35':3, '35 or more':4}\ndf['installment_rate'] = df['installment_rate'].map(installment_rate)\n\npresent_residence = {'less than 1 year':1, '1 to 4 yrs':2, '4 to 7 yrs':3, '7 yrs or more':4}\ndf['present_residence'] = df['present_residence'].map(present_residence)\n\nnumber_credits = {'1':1, '2-3':2, '4 or more':3}\ndf['number_credits'] = df['number_credits'].map(number_credits)\n\npeople_liable = {'0 to 2':1, '3 or more':2}\ndf['people_liable'] = df['people_liable'].map(people_liable)","8e618f05":"df.info()","ea8c7936":"from sklearn.preprocessing import PowerTransformer","0b07581d":"df_continuous = df[numerical_columns]\ndf_continuous.head()","421f4685":"pt = PowerTransformer(method='box-cox')\npower_transformed_array = pt.fit_transform(df_continuous)","1d5dea0f":"ptdf_cont = pd.DataFrame(data = power_transformed_array, columns = df_continuous.columns)\nptdf_cont.head()","d33f465c":"for i in ptdf_cont.columns:\n    sns.boxplot(ptdf_cont[i])\n    print(\"skewness of \",i,\":\",ptdf_cont[i].skew())\n    plt.show()  ","da474220":"for i in ptdf_cont.columns:\n    sns.distplot(ptdf_cont[i])\n    print(\"skewness of \",i,\":\",ptdf_cont[i].skew())\n    plt.show()  ","cea50da4":"ptdf = df.copy()\n\nfor col in ptdf_cont.columns:\n    ptdf[col] = ptdf_cont[col]","3ea88f3d":"sns.heatmap(ptdf[numerical_columns].corr(),annot=True)","8fcdba47":"from statsmodels.stats.outliers_influence import variance_inflation_factor as vif\n\nvf = [vif(ptdf[numerical_columns].values, i ) for i in range(ptdf[numerical_columns].shape[1])]\npd.DataFrame(vf, index=numerical_columns, columns= [\"vif\"])","00c2f1ad":"from scipy.stats import chi2_contingency, ttest_ind","96b2ba96":"def contingency_table(feature):\n    p = pd.crosstab(df['credit_risk'],df[feature])\n    return(p)","8b00b4f6":"feature = []\npval = []\nchi2_result = []\n\nfor i in categorical_columns[:-1]:\n    feature.append(i)\n    result = chi2_contingency(contingency_table(i))\n    pval.append(round(float(result[1]),6))\n    \n    if float(result[1]) < 0.05:\n        chi2_result.append(\"Significant\")\n    else:\n        chi2_result.append(\"Insignificant\")\n    ","2eb493b2":"chisquare = pd.DataFrame(data={'PValue':pval,'Result':chi2_result},index=feature)\nchisquare","f84d1792":"def t_test(mydf,columns):    \n    feature = []\n    pval = []\n    ttest_result = []\n    \n    for i in columns:\n        feature.append(i)\n        result = ttest_ind(mydf[mydf[\"credit_risk\"]==\"good\"][i], mydf[mydf[\"credit_risk\"]==\"bad\"][i])\n        pval.append(round(float(result[1]),6))\n        \n        if float(result[1]) < 0.05:\n            ttest_result.append(\"Significant\")\n        else:\n            ttest_result.append(\"Insignificant\")\n    \n    return(pd.DataFrame(index=feature,data={'PValue':pval,'Result':ttest_result}))","39ccf37e":"pt_ttest = t_test(ptdf, numerical_columns)\npt_ttest","e854d603":"ptdf.shape","2cddcc35":"ptdf = ptdf.drop(columns = chisquare[chisquare['Result'] == 'Insignificant'].index, axis=1)","b4c5dbff":"ptdf.shape","b5650847":"ptdf.info()","0b71cd57":"pt_ohe_df = pd.get_dummies(ptdf, columns = ptdf.drop('credit_risk',axis=1).select_dtypes(include='object').columns, drop_first=True)\npt_ohe_df.head()","5d9d71ad":"pt_ohe_df.info()","75832b17":"pt_ohe_df.head()","41044b54":"X = pt_ohe_df.drop('credit_risk',axis=1)\ny = pt_ohe_df['credit_risk'].map({'good':0,'bad':1})","f4d46e6e":"print(\"Before OverSampling, counts of label '1': {}\".format(sum(y == 1))) \nprint(\"Before OverSampling, counts of label '0': {} \\n\".format(sum(y == 0))) ","b5fdbe6f":"from imblearn.over_sampling import SMOTE \nsm = SMOTE(random_state = 2) \nX, y = sm.fit_sample(X, y.ravel()) ","f2117742":"print('After OverSampling, the shape of X_train: {}'.format(X.shape)) \nprint('After OverSampling, the shape of y_train: {} \\n'.format(y.shape)) \n  \nprint(\"After OverSampling, counts of label '1': {}\".format(sum(y == 1))) \nprint(\"After OverSampling, counts of label '0': {}\".format(sum(y == 0))) ","69b1f30e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)","0780da2e":"print(X_train.shape, y_train.shape, X_test.shape, y_test.shape)","787e6dcf":"model_smote = []\nbe_smote = []\nve_smote = []\nprecision0_smote = []\nrecall0_smote = []\nprecision1_smote = []\nrecall1_smote = []\nauc_smote = []","80cd8fdb":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split, cross_val_score, KFold\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, plot_roc_curve","e38c4d8a":"from sklearn.feature_selection import RFE","6276bc5a":"scores=[]\n\nfor n in range(0,28):\n    lr = LogisticRegression(max_iter=1000,random_state=0)\n    rfe = RFE(lr, n_features_to_select = n+1)\n    rfe.fit(X_train, y_train)\n    \n    score = rfe.score(X_test,y_test)\n    scores.append(score)","62035ac5":"num_of_features = np.linspace(1,28,28)\nplt.plot(num_of_features, scores)\nplt.show()","fde5a709":"feature_scores = pd.DataFrame(scores,columns=['score'])\nmax(scores), np.argmax(scores)","bf222a45":"feature_scores","ed928e69":"rfe = RFE(lr , n_features_to_select = 19)\nrfe.fit(X,y)","ee030874":"rfe_features = pd.DataFrame (rfe.ranking_, index = X.columns, columns=[\"selection\"]) \nrfe_features","cbd1c1d0":"features_selected_lr = rfe_features[rfe_features[\"selection\"] == 1].index.copy(deep=True)\nfeatures_selected_lr","d5ead9f6":"X[features_selected_lr].head()","68298420":"X[features_selected_lr].shape","74320b88":"X_train, X_test, y_train, y_test = train_test_split(X[features_selected_lr], y, test_size=0.3, random_state=42, stratify=y)","c97fb638":"lr = LogisticRegression(max_iter=1000,random_state=0)\nlr.fit(X_train, y_train)","e4be831a":"y_test_predicted = lr.predict(X_test)\ny_train_predicted = lr.predict(X_train)","2e1884b8":"accuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","84a78768":"kf= KFold(shuffle=True, n_splits=5, random_state=0)\nscore = cross_val_score(lr, X[features_selected_lr], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof=1))","63c3dae4":"cm = confusion_matrix(y_test, y_test_predicted)\nprint(cm)","ae90b44b":"print(classification_report(y_test,y_test_predicted))","d3378d01":"plot_roc_curve(lr, X_test, y_test)","4faf2d0a":"model_smote.append(\"Logistic Regression\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(78)\nrecall0_smote.append(79)\nprecision1_smote.append(78)\nrecall1_smote.append(78)\nauc_smote.append(86)","f5143730":"from sklearn.naive_bayes import GaussianNB","2738bc79":"from mlxtend.feature_selection import SequentialFeatureSelector as SFS","c8c92da2":"nb = GaussianNB()\nsfs1 = SFS(nb, k_features=28, scoring='roc_auc' ,cv=kf, verbose=0) \nsfs1 = sfs1.fit(X,y)","22e5eb84":"sfs_result = pd.DataFrame(sfs1.subsets_).T\nsfs_result","d4f4dd9d":"plt.plot(sfs_result['avg_score'])","189549eb":"np.max(sfs_result['avg_score']), np.argmax(sfs_result['avg_score'])","e2cd77a9":"sfs2 = SFS(nb, k_features=16, scoring ='roc_auc' ,cv = kf, verbose=0) \nsfs2 = sfs2.fit(X,y)","34f034cf":"features_selected_nb_sfs = sfs2.k_feature_names_\nprint(features_selected_nb_sfs)","f2e59582":"mm = MinMaxScaler()\nX_scaled = mm.fit_transform(X)\nX_scaled = pd.DataFrame(X_scaled,columns = X.columns)\nX_scaled.head()","99e79977":"X_train, X_test, y_train, y_test = train_test_split(X_scaled[list(features_selected_nb_sfs)], y, test_size=0.3, random_state=42, stratify=y)","91613439":"nb = GaussianNB()\nscore = cross_val_score(nb, X_scaled[list(features_selected_nb_sfs)], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof=1))","a017d8ef":"nb.fit(X_train,y_train)","f3662477":"y_train_predicted = nb.predict(X_train)\ny_test_predicted = nb.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","09b9abc9":"print(confusion_matrix(y_test, y_test_predicted))","aa780867":"print(classification_report(y_test, y_test_predicted))","1f92e552":"plot_roc_curve(nb, X_test, y_test)","5483c2b7":"model_smote.append(\"Naive Bayes\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(81)\nrecall0_smote.append(55)\nprecision1_smote.append(66)\nrecall1_smote.append(87)\nauc_smote.append(82)","76789351":"from sklearn.neighbors import KNeighborsClassifier","b1764c92":"knn = KNeighborsClassifier()\nsfs1 = SFS(knn, k_features=28, scoring='roc_auc' ,cv=kf, verbose=0) \nsfs1 = sfs1.fit(X,y)","e2584c30":"sfs_result = pd.DataFrame(sfs1.subsets_).T\nsfs_result","6b8b2a73":"plt.plot(sfs_result['avg_score'])","b26eff78":"np.max(sfs_result['avg_score']), np.argmax(sfs_result['avg_score'])","d023088f":"sfs2 = SFS(knn, k_features=16, scoring ='roc_auc' ,cv = kf, verbose=0) \nsfs2 = sfs2.fit(X,y)","a8408a71":"features_selected_knn_sfs = sfs2.k_feature_names_\nprint(features_selected_knn_sfs)","e292c7a0":"X_scaled = mm.fit_transform(X)\nX_scaled = pd.DataFrame(X_scaled,columns = X.columns)\nX_scaled.head()","e2b3b3e1":"X_train, X_test, y_train, y_test = train_test_split(X_scaled[list(features_selected_knn_sfs)], y, test_size=0.3, random_state=0, stratify=y)","89420418":"knn = KNeighborsClassifier()\nparam = {'n_neighbors':np.arange(1,100), 'weights':['uniform','distance']}\nGS = GridSearchCV(knn, param, cv=kf, scoring='roc_auc')\nGS.fit(X_scaled[list(features_selected_knn_sfs)], y)","8a40442f":"GS.best_params_","4c145351":"knn = KNeighborsClassifier(n_neighbors=11, weights='distance')\nscore = cross_val_score(knn, X_scaled[list(features_selected_knn_sfs)], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof=1))","3b44b29a":"knn.fit(X_train, y_train)","5f770807":"y_train_predicted = knn.predict(X_train)\ny_test_predicted = knn.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","42e95db1":"print(confusion_matrix(y_test, y_test_predicted))","c71fdf35":"print(classification_report(y_test, y_test_predicted))","35668c61":"plot_roc_curve(knn, X_test, y_test)","e4007b99":"model_smote.append(\"K-Nearest Neighbors\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(87)\nrecall0_smote.append(69)\nprecision1_smote.append(74)\nrecall1_smote.append(90)\nauc_smote.append(86)","ca4a2360":"from sklearn.tree import DecisionTreeClassifier","c3757c39":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0, stratify=y)\nscores=[]\n\nfor n in range(0,28):\n    dt = DecisionTreeClassifier(random_state=0)\n    rfe = RFE(dt, n_features_to_select = n+1)\n    rfe.fit(X_train, y_train)\n    \n    score = rfe.score(X_test,y_test)\n    scores.append(score)","5a3137ca":"num_of_features = np.linspace(1,28,28)\nplt.plot(num_of_features, scores)\nplt.show()","31bccfe1":"feature_scores = pd.DataFrame(scores,columns=['score'])\nnp.max(scores), np.argmax(scores)","4aa82c65":"feature_scores","ec5a04fe":"rfe = RFE(dt, n_features_to_select = 11)\nrfe.fit(X,y)","9b00697f":"rfe_features = pd.DataFrame(rfe.ranking_, index = X.columns, columns=[\"selection\"]) \nrfe_features","123d87ca":"features_selected_dt = rfe_features[rfe_features[\"selection\"] == 1].index.copy(deep=True)\nfeatures_selected_dt","bb859fb7":"X_train, X_test, y_train, y_test = train_test_split(X[features_selected_dt], y, test_size=0.3, random_state=42, stratify=y)","8244f590":"param = {'max_depth':np.arange(1,15), 'criterion':['entropy','gini']}\nGS = GridSearchCV(dt, param, cv=kf, scoring='roc_auc')\nGS.fit(X[features_selected_dt],y)\nGS.best_params_","2a150ed6":"dt = DecisionTreeClassifier(max_depth=5,criterion='entropy')\nscore = cross_val_score(dt, X[features_selected_dt], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof=1))","7c030aad":"dt.fit(X_train, y_train)","bcc50bbb":"y_train_predicted = dt.predict(X_train)\ny_test_predicted = dt.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","965c2ed1":"print(confusion_matrix(y_test, y_test_predicted))","4b861f02":"print(classification_report(y_test, y_test_predicted))","8eaf53a5":"plot_roc_curve(dt, X_test, y_test)","7e9062c2":"model_smote.append(\"Decision Tree\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(78)\nrecall0_smote.append(62)\nprecision1_smote.append(69)\nrecall1_smote.append(83)\nauc_smote.append(76)","17f32df8":"from sklearn.ensemble import RandomForestClassifier","32232528":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)\nscores=[]\n\nfor n in range(0,28):\n    RF = RandomForestClassifier(random_state=0)\n    rfe = RFE(RF, n_features_to_select = n+1)\n    rfe.fit(X_train, y_train)\n    score = rfe.score(X_test,y_test)\n    scores.append(score)","f2b6945b":"num_of_features = np.linspace(1,28,28)\nplt.plot(num_of_features, scores)\nplt.show()","082abd2d":"feature_scores = pd.DataFrame(scores,columns=['score'])\nnp.max(scores), np.argmax(scores)","7c39c218":"feature_scores","a5614fd9":"rfe = RFE(RF, n_features_to_select = 24)\nrfe.fit(X,y)","f7e7de19":"rfe_features = pd.DataFrame(rfe.ranking_, index = X.columns, columns=[\"selection\"]) \nrfe_features","5640169f":"features_selected_rf = rfe_features[rfe_features[\"selection\"] == 1].index.copy(deep=True)\nfeatures_selected_rf","364079ad":"X[features_selected_rf]","03a683d0":"X_train, X_test, y_train, y_test = train_test_split(X[features_selected_rf], y, test_size=0.3, random_state=42, stratify=y)","ae84829b":"RF_be = []\nRF_ve = []\n\nfor n in np.arange(1,100):\n    RF = RandomForestClassifier(n_estimators=n,criterion='entropy',random_state=0)\n    score = cross_val_score(RF, X[features_selected_rf], y, cv=kf, scoring='roc_auc')\n    RF_be.append(np.mean(1-score))\n    RF_ve.append(np.std(score,ddof=1))","c22f2e11":"plt.plot(np.arange(len(RF_ve)), RF_ve)","f34e995b":"np.min(RF_ve), np.argmin(RF_ve)","dcbd83c8":"RF_be = []\nRF_ve = []\n\nfor n in np.arange(1,100):\n    RF = RandomForestClassifier(n_estimators=n,criterion='gini',random_state=0)\n    score = cross_val_score(RF, X[features_selected_rf], y, cv=kf, scoring='roc_auc')\n    RF_be.append(np.mean(1-score))\n    RF_ve.append(np.std(score,ddof=1))","c7b702bf":"plt.plot(np.arange(len(RF_ve)), RF_ve)","bfbfb40d":"np.min(RF_ve), np.argmin(RF_ve)","b0d58f64":"RF = RandomForestClassifier(n_estimators=15,criterion='gini')\nscore = cross_val_score(RF, X[features_selected_rf], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof=1))","c4dd63eb":"RF.fit(X_train, y_train)","f10f7af4":"y_train_predicted = RF.predict(X_train)\ny_test_predicted = RF.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","2ab646d1":"print(confusion_matrix(y_test, y_test_predicted))","e7c6f400":"print(classification_report(y_test,y_test_predicted))","ed836ef4":"plot_roc_curve(RF, X_test, y_test)","dc2e5be4":"model_smote.append(\"Random Forest\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(79)\nrecall0_smote.append(80)\nprecision1_smote.append(80)\nrecall1_smote.append(79)\nauc_smote.append(87)","cd8a223d":"from sklearn.ensemble import BaggingClassifier, AdaBoostClassifier","68be5653":"X_train, X_test, y_train, y_test = train_test_split(X[features_selected_lr], y, test_size=0.3, random_state=42, stratify=y)","f221deae":"LR_bagged_be = []\nLR_bagged_ve = []\n\nfor n in np.arange(1,100):\n    LR_bag = BaggingClassifier(base_estimator=lr, n_estimators=n, random_state=0)\n    score = cross_val_score(LR_bag, X[features_selected_lr], y, cv=kf, scoring='roc_auc')\n    LR_bagged_be.append(np.mean(1-score))\n    LR_bagged_ve.append(np.std(score,ddof=1))","5794c9d4":"plt.plot(np.arange(len(LR_bagged_ve)), LR_bagged_ve)","680a23dc":"np.min(LR_bagged_ve), np.argmin(LR_bagged_ve)","27667077":"lr_bag = BaggingClassifier(base_estimator = lr, n_estimators=1, random_state=0)\nscore = cross_val_score(lr_bag, X[features_selected_lr], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof=1))","9178594b":"lr_bag.fit(X_train, y_train)","de915a1c":"y_train_predicted = lr_bag.predict(X_train)\ny_test_predicted = lr_bag.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","eed39ac5":"print(confusion_matrix(y_test, y_test_predicted))","26e09b3a":"print(classification_report(y_test,y_test_predicted))","c50fc3fb":"plot_roc_curve(lr_bag, X_test, y_test)","70b5644e":"model_smote.append(\"Bagged Logistic Regression\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(77)\nrecall0_smote.append(78)\nprecision1_smote.append(78)\nrecall1_smote.append(76)\nauc_smote.append(84)","f5b6be75":"NB_bagged_be = []\nNB_bagged_ve = []\nnb = GaussianNB()\n\nfor n in np.arange(1,100):\n    NB_bag = BaggingClassifier(base_estimator=nb, n_estimators=n, random_state=0)\n    score = cross_val_score(NB_bag, X_scaled[list(features_selected_nb_sfs)], y, cv=kf,scoring='roc_auc')\n    NB_bagged_be.append(np.mean(1-score))\n    NB_bagged_ve.append(np.std(score,ddof = 1))","67967268":"plt.plot(np.arange(len(NB_bagged_be)),NB_bagged_ve)","b97e960f":"min(NB_bagged_ve),np.argmin(NB_bagged_ve)","2923ee08":"NB_bag = BaggingClassifier(base_estimator=nb, n_estimators = 90, random_state=0)\nscore = cross_val_score(NB_bag, X_scaled[list(features_selected_nb_sfs)], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof =1))","3c0257a9":"X_train, X_test, y_train, y_test = train_test_split(X_scaled[list(features_selected_nb_sfs)], y, test_size=0.3, random_state=42, stratify=y)","2cd55f21":"NB_bag.fit(X_train,y_train)","123a4f5e":"y_train_predicted = NB_bag.predict(X_train)\ny_test_predicted = NB_bag.predict(X_test)","2a237c7a":"accuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","92145645":"print(confusion_matrix(y_test, y_test_predicted))","b36b1223":"print(classification_report(y_test,y_test_predicted))","a437dc87":"plot_roc_curve(NB_bag, X_test, y_test)","68e078b2":"model_smote.append(\"Bagged Naive Bayes\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(83)\nrecall0_smote.append(55)\nprecision1_smote.append(66)\nrecall1_smote.append(89)\nauc_smote.append(82)","43c08d73":"KNN_bagged_be = []\nKNN_bagged_ve = []\nknn= KNeighborsClassifier(n_neighbors=11,weights=\"distance\")\n\nfor n in np.arange(1,100):\n    KNN_bag = BaggingClassifier(base_estimator=knn, n_estimators = n, random_state = 0)\n    score = cross_val_score(KNN_bag, X_scaled[list(features_selected_knn_sfs)], y, cv=kf, scoring=\"roc_auc\")\n    KNN_bagged_be.append(np.mean(1-score))\n    KNN_bagged_ve.append(np.std(score,ddof = 1))","5c661265":"plt.plot(np.arange(len(KNN_bagged_ve)),KNN_bagged_ve)","ad247977":"np.min(KNN_bagged_ve),np.argmin(KNN_bagged_ve)","feb8b09c":"KNN_bag = BaggingClassifier(base_estimator=knn, n_estimators=52, random_state = 0)\nscore = cross_val_score(KNN_bag, X_scaled[list(features_selected_knn_sfs)], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof =1))","ea1b29b3":"X_train, X_test, y_train, y_test = train_test_split(X_scaled[list(features_selected_knn_sfs)], y, test_size=0.3, random_state=42, stratify=y)","db4372e2":"KNN_bag.fit(X_train,y_train)","8a2d452f":"y_train_predicted = KNN_bag.predict(X_train)\ny_test_predicted = KNN_bag.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","0aa08734":"print(confusion_matrix(y_test, y_test_predicted))","2be58d5a":"print(classification_report(y_test,y_test_predicted))","72cd137b":"plot_roc_curve(KNN_bag, X_test, y_test)","317d8b05":"model_smote.append(\"Bagged KNN\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(83)\nrecall0_smote.append(78)\nprecision1_smote.append(79)\nrecall1_smote.append(84)\nauc_smote.append(88)","e485ba2c":"AB_LR_be = []\nAB_LR_ve = []\n\nfor n in np.arange(1,300):\n    AB_LR = AdaBoostClassifier(base_estimator = lr ,n_estimators = n, random_state=0)\n    score = cross_val_score(AB_LR, X[features_selected_lr], y, cv=kf, scoring=\"roc_auc\")\n    AB_LR_be.append(np.mean(1-score))\n    AB_LR_ve.append(np.std(score,ddof = 1))","dff43be7":"plt.plot(np.arange(len(AB_LR_be)),AB_LR_be)","bdb9ad93":"np.min(AB_LR_be),np.argmin(AB_LR_be), AB_LR_ve[np.argmin(AB_LR_be)]","c33c23d3":"AB_LR = AdaBoostClassifier(base_estimator = lr, n_estimators =276, random_state=0)\nscore = cross_val_score(AB_LR, X[features_selected_lr], y, cv=kf, scoring = \"roc_auc\")\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof =1))","25896281":"X_train, X_test, y_train, y_test = train_test_split(X[features_selected_lr], y, test_size=0.3, random_state=42, stratify=y)","47683b1f":"AB_LR.fit(X_train,y_train)","c54a6500":"y_train_predicted = AB_LR.predict(X_train)\ny_test_predicted = AB_LR.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","fb6bf3e3":"print(confusion_matrix(y_test, y_test_predicted))","ce3396f2":"print(classification_report(y_test,y_test_predicted))","eeb11fe4":"plot_roc_curve(AB_LR, X_test, y_test)","c5ef4e61":"model_smote.append(\"Boosted Logistic Regression\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(78)\nrecall0_smote.append(76)\nprecision1_smote.append(76)\nrecall1_smote.append(79)\nauc_smote.append(85)","0caa51a5":"AB_NB_be = []\nAB_NB_ve = []\n\nfor n in np.arange(1,100):\n    AB_NB = AdaBoostClassifier(base_estimator = nb, n_estimators = n,random_state=0)\n    score = cross_val_score(AB_NB, X_scaled[list(features_selected_nb_sfs)],y,cv=kf,scoring=\"roc_auc\")\n    AB_NB_be.append(np.mean(1-score))\n    AB_NB_ve.append(np.std(score,ddof = 1))","6c14001b":"plt.plot(np.arange(len(AB_NB_be)),AB_NB_be)","7d3f6690":"np.min(AB_NB_be),np.argmin(AB_NB_be),AB_NB_ve[np.argmin(AB_NB_be)]","7874e7d4":"AB_NB = AdaBoostClassifier(base_estimator = nb,n_estimators = 1,random_state=0)\nscore = cross_val_score(AB_NB, X_scaled[list(features_selected_nb_sfs)], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof =1))","c73717ff":"X_train, X_test, y_train, y_test = train_test_split(X_scaled[list(features_selected_nb_sfs)], y, test_size=0.3, random_state=42, stratify=y)","72343f56":"AB_NB.fit(X_train,y_train)","ebb03c61":"y_train_predicted = AB_NB.predict(X_train)\ny_test_predicted = AB_NB.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","465defa5":"print(confusion_matrix(y_test, y_test_predicted))","2f3c22ad":"print(classification_report(y_test,y_test_predicted))","61456d64":"plot_roc_curve(AB_NB, X_test, y_test)","5a204e0d":"model_smote.append(\"Boosted Naive Bayes\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(81)\nrecall0_smote.append(55)\nprecision1_smote.append(66)\nrecall1_smote.append(87)\nauc_smote.append(82)","bc6f78df":"AB_RF_be = []\nAB_RF_ve = []\n\nRF = RandomForestClassifier(n_estimators=15,criterion='gini')\n\nfor n in np.arange(1,100):\n    AB_RF = AdaBoostClassifier(base_estimator=RF, n_estimators = n, random_state=0)\n    score = cross_val_score(AB_RF, X[features_selected_rf], y, cv=kf, scoring=\"roc_auc\")\n    AB_RF_be.append(np.mean(1-score))\n    AB_RF_ve.append(np.std(score,ddof = 1))","1427e6e2":"plt.plot(np.arange(len(AB_RF_be)),AB_RF_be)","73e7948b":"np.min(AB_RF_be),np.argmin(AB_RF_be),AB_RF_ve[np.argmin(AB_RF_be)]","4f434bae":"AB_RF = AdaBoostClassifier(base_estimator = RF,n_estimators = 31,random_state=0)\nscore = cross_val_score(AB_RF,X[features_selected_rf],y,cv=kf,scoring = \"roc_auc\")\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof =1))","a1a480b2":"X_train, X_test, y_train, y_test = train_test_split(X[features_selected_rf], y, test_size=0.3, random_state=42, stratify=y)","f859d487":"AB_RF.fit(X_train,y_train)","7785f381":"y_train_predicted = AB_RF.predict(X_train)\ny_test_predicted = AB_RF.predict(X_test)","52827914":"accuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","eff7d917":"print(confusion_matrix(y_test, y_test_predicted))","0f609d0a":"print(classification_report(y_test,y_test_predicted))","c8151930":"plot_roc_curve(AB_RF, X_test, y_test)","145ab29b":"model_smote.append(\"Boosted Random Forest\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(83)\nrecall0_smote.append(81)\nprecision1_smote.append(81)\nrecall1_smote.append(83)\nauc_smote.append(89)","910a1de7":"from sklearn.ensemble import GradientBoostingClassifier","69bc7fb6":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)\nscores=[]\n\nfor n in range(0,28):\n    GB = GradientBoostingClassifier(random_state=0)\n    rfe = RFE(GB, n_features_to_select = n+1)\n    rfe.fit(X_train, y_train)\n    score = rfe.score(X_test,y_test)\n    scores.append(score)","9d3c10b0":"num_of_features = np.linspace(1,28,28)\nplt.plot(num_of_features, scores)\nplt.show()","558f3e49":"feature_scores = pd.DataFrame(scores,columns=['score'])\nnp.max(scores), np.argmax(scores)","aec9ba6d":"feature_scores","2e6780f6":"rfe = RFE(GB, n_features_to_select = 15)\nrfe.fit(X,y)","a4ffdd84":"rfe_features = pd.DataFrame(rfe.ranking_, index = X.columns, columns=[\"selection\"]) \nrfe_features","fd474405":"features_selected_gb = rfe_features[rfe_features[\"selection\"] == 1].index.copy(deep=True)\nfeatures_selected_gb","1444681b":"X[features_selected_gb].head()","761606d1":"X_train, X_test, y_train, y_test = train_test_split(X[features_selected_gb], y, test_size=0.3, random_state=42, stratify=y)","d7697c97":"GB = GradientBoostingClassifier(random_state=0)\nparam = {'n_estimators':np.arange(1,100)}\nGS = GridSearchCV(GB, param, cv=kf, scoring='roc_auc')\nGS.fit(X[features_selected_gb], y)\nGS.best_params_","73729c90":"GBoost = GradientBoostingClassifier(n_estimators=96,random_state=0)\nscore = cross_val_score(GBoost, X[features_selected_gb], y, cv=kf, scoring = \"roc_auc\")\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof =1))","b70c2c58":"GBoost.fit(X_train,y_train)","ce44190a":"y_train_predicted = GBoost.predict(X_train)\ny_test_predicted = GBoost.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","99b8a92c":"print(confusion_matrix(y_test, y_test_predicted))","00c04178":"print(classification_report(y_test,y_test_predicted))","fcf30ba0":"plot_roc_curve(GBoost, X_test, y_test)","5562b3b9":"model_smote.append(\"Gradient Boosting\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(80)\nrecall0_smote.append(77)\nprecision1_smote.append(78)\nrecall1_smote.append(80)\nauc_smote.append(87)","a043de13":"from sklearn.ensemble import VotingClassifier","1dad6709":"AB_RF = AdaBoostClassifier(base_estimator=RF,n_estimators=15, random_state=0)\nGBoost = GradientBoostingClassifier(n_estimators=96,random_state=0)","c2133c16":"stacked_gb_boosted_rf = VotingClassifier(estimators = [('Boosted RF',AB_RF),('GBoost',GBoost)],voting='soft')\nscore = cross_val_score(stacked_gb_boosted_rf, X, y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof =1))","d7507627":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)","a0e6107a":"stacked_gb_boosted_rf.fit(X_train, y_train)","2be81ef0":"y_train_predicted = stacked_gb_boosted_rf.predict(X_train)\ny_test_predicted = stacked_gb_boosted_rf.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","633e7cc4":"print(confusion_matrix(y_test, y_test_predicted))","9c1ac82d":"print(classification_report(y_test,y_test_predicted))","779a10f1":"plot_roc_curve(stacked_gb_boosted_rf, X_test, y_test)","16453b21":"model_smote.append(\"Stacked GB + Boosted RF\")\nbe_smote.append(1-np.mean(score))\nve_smote.append(np.std(score,ddof=1))\nprecision0_smote.append(83)\nrecall0_smote.append(80)\nprecision1_smote.append(80)\nrecall1_smote.append(84)\nauc_smote.append(89)","640716c9":"pd.DataFrame({\"Bias error\":be_smote,\"Variance Error\":ve_smote,'AUC':[x\/100 for x in auc_smote],\n              'Precision : Good Risk':[x\/100 for x in precision0_smote],'Recall : Good Risk':[x\/100 for x in recall0_smote],\n              'Precision : Bad Risk':[x\/100 for x in precision1_smote],'Recall : Bad Risk':[x\/100 for x in recall1_smote]}\n             ,index = model_smote)","22b4b114":"from sklearn.metrics import roc_auc_score, recall_score, precision_score, roc_curve, auc","500f42cd":"X_train, X_test, y_train, y_test = train_test_split(X[features_selected_rf], y, test_size=0.3, random_state=42, stratify=y)","fb685c10":"RF = RandomForestClassifier(n_estimators=15,criterion='gini')\nAB_RF = AdaBoostClassifier(base_estimator = RF, n_estimators = 52,random_state=0)\nscore = cross_val_score(AB_RF, X[features_selected_rf], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof =1))","cab92a6b":"AB_RF.fit(X_train,y_train)\n\ny_train_predicted = AB_RF.predict(X_train)\ny_test_predicted = AB_RF.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","3914bb7b":"print(confusion_matrix(y_test, y_test_predicted))","26eadf1a":"print(classification_report(y_test,y_test_predicted))","eb3859ec":"y_pred_prob = AB_RF.predict_proba(X_test)[:,1]","d1a55a49":"fpr,tpr,thresholds = roc_curve(y_test, y_pred_prob)","b45727c8":"len(thresholds)","86e0ea54":"auc(fpr,tpr)","3bb5fdbc":"recall=[]\nprecision=[]\n\nfor i in thresholds:\n    pred1 = np.where(y_pred_prob > i, 1, 0)\n    recall.append(recall_score(y_test,pred1))\n    precision.append(precision_score(y_test,pred1))","32c444eb":"plt.plot(thresholds,precision)\nplt.plot(thresholds,recall)\nplt.legend(['precision','recall'])\nplt.axvline(x=0.51,color='r')","887c9858":"recall=[]\nprecision=[]\nli=np.arange(0.51,1,0.0001)\n\nfor i in li:\n    pred1=np.where(y_pred_prob < i, 0, 1)\n    recall.append(recall_score(y_test,pred1))\n    precision.append(precision_score(y_test,pred1))","0c5cb3cb":"plt.plot(li,recall)\nplt.plot(li,precision)\nplt.xlabel('Threshold')\nplt.legend(['recall','precision'])","22c6c5f1":"print(classification_report(y_test,np.where(AB_RF.predict_proba(X_test)[:,1] < 0.51,0,1)))","0cf892c9":"X_train, X_test, y_train, y_test = train_test_split(X_scaled[list(features_selected_knn_sfs)], y, test_size=0.3, random_state=42, stratify=y)","9a212152":"KNN_bag = BaggingClassifier(base_estimator=knn, n_estimators=52, random_state = 0)\nscore = cross_val_score(KNN_bag, X_scaled[list(features_selected_knn_sfs)], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof=1))","576e79c4":"KNN_bag.fit(X_train, y_train)","9b18d0d5":"y_train_predicted = KNN_bag.predict(X_train)\ny_test_predicted = KNN_bag.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","c8074d8e":"print(confusion_matrix(y_test, y_test_predicted))","aa40f0fb":"print(classification_report(y_test, y_test_predicted))","7e8777b5":"y_pred_prob = KNN_bag.predict_proba(X_test)[:,1]","147a7740":"fpr,tpr,thresholds = roc_curve(y_test, y_pred_prob)","6d1a3661":"len(thresholds)","0c78b292":"auc(fpr,tpr)","a8b48b5d":"recall=[]\nprecision=[]\n\n\nfor i in thresholds:\n    pred1 = np.where(y_pred_prob > i, 1, 0)\n    recall.append(recall_score(y_test,pred1))\n    precision.append(precision_score(y_test,pred1))\n\nplt.plot(thresholds,precision)\nplt.plot(thresholds,recall)\nplt.legend(['precision','recall'])\nplt.axvline(x=0.55,color='r')","3dcf2cd0":"recall=[]\nprecision=[]\nli=np.arange(0.55,1,0.0001)\n\nfor i in li:\n    pred1=np.where(y_pred_prob < i, 0, 1)\n    recall.append(recall_score(y_test,pred1))\n    precision.append(precision_score(y_test,pred1))\n    \nplt.plot(li,recall)\nplt.plot(li,precision)\nplt.xlabel('Threshold')\nplt.legend(['recall','precision'])","f20e08c9":"print(classification_report(y_test,np.where(KNN_bag.predict_proba(X_test)[:,1] < 0.55,0,1)))","cf80ab11":"X_train, X_test, y_train, y_test = train_test_split(X[features_selected_gb], y, test_size=0.3, random_state=42, stratify=y)","eae4b879":"GBoost = GradientBoostingClassifier(n_estimators=96,random_state=0)\nscore = cross_val_score(GBoost, X[features_selected_gb], y, cv=kf, scoring = \"roc_auc\")\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof =1))","05c20575":"GBoost.fit(X_train,y_train)","4bf93c71":"y_train_predicted = GBoost.predict(X_train)\ny_test_predicted = GBoost.predict(X_test)\n\naccuracy_train = accuracy_score(y_train, y_train_predicted)\naccuracy_test = accuracy_score(y_test, y_test_predicted)\n\nprint('Train Set Accuracy for Power Transformed Data:',round(accuracy_train*100,2),'%')\nprint('Test Set Accuracy for Power Transformed Data:',round(accuracy_test*100,2),'%')","c0cc9f9b":"print(confusion_matrix(y_test, y_test_predicted))","281c78a3":"print(classification_report(y_test,y_test_predicted))","897fb20e":"y_pred_prob = GBoost.predict_proba(X_test)[:,1]","cd54f7e0":"fpr,tpr,thresholds = roc_curve(y_test, y_pred_prob)","a54a0017":"len(thresholds)","64f70fa6":"auc(fpr,tpr)","85b89487":"recall=[]\nprecision=[]\n\nfor i in thresholds:\n    pred1 = np.where(y_pred_prob > i, 1, 0)\n    recall.append(recall_score(y_test,pred1))\n    precision.append(precision_score(y_test,pred1))","9a6cbfe0":"plt.plot(thresholds,precision)\nplt.plot(thresholds,recall)\nplt.legend(['precision','recall'])\nplt.axvline(x=0.52,color='r')","9626136b":"recall=[]\nprecision=[]\nli=np.arange(0.52,1,0.0001)\n\nfor i in li:\n    pred1=np.where(y_pred_prob < i, 0, 1)\n    recall.append(recall_score(y_test,pred1))\n    precision.append(precision_score(y_test,pred1))","fafd7b78":"plt.plot(li,recall)\nplt.plot(li,precision)\nplt.xlabel('Threshold')\nplt.legend(['recall','precision'])","484ee9f6":"print(classification_report(y_test,np.where(GBoost.predict_proba(X_test)[:,1] < 0.52,0,1)))","9915dcca":"X_train, X_test, y_train, y_test = train_test_split(X[features_selected_lr], y, test_size=0.3, random_state=42, stratify=y)","267c0d5b":"kf= KFold(shuffle=True, n_splits=5, random_state=0)\nscore = cross_val_score(lr, X[features_selected_lr], y, cv=kf, scoring='roc_auc')\nprint('Bias Error:',1-np.mean(score))\nprint('Variance Error:',np.std(score,ddof=1))","786ffb40":"lr.fit(X_train, y_train)","bef5cfec":"y_test_predicted = lr.predict(X_test)\ny_train_predicted = lr.predict(X_train)","6e8b52ff":"print(classification_report(y_test,y_test_predicted))","93bdee06":"y_pred_prob = lr.predict_proba(X_test)[:,1]","a8948b0a":"fpr,tpr,thresholds = roc_curve(y_test, y_pred_prob)","95f24bc6":"recall=[]\nprecision=[]\n\n\nfor i in thresholds:\n    pred1 = np.where(y_pred_prob > i, 1, 0)\n    recall.append(recall_score(y_test,pred1))\n    precision.append(precision_score(y_test,pred1))","ebc83dc9":"plt.plot(thresholds,precision)\nplt.plot(thresholds,recall)\nplt.legend(['precision','recall'])\nplt.axvline(x=0.51,color='r')","cb778d0d":"recall=[]\nprecision=[]\nli=np.arange(0.51,1,0.0001)\n\nfor i in li:\n    pred1=np.where(y_pred_prob <i, 0, 1)\n    recall.append(recall_score(y_test,pred1))\n    precision.append(precision_score(y_test,pred1))","f181479a":"plt.plot(li,recall)\nplt.plot(li,precision)\nplt.xlabel('Threshold')\nplt.legend(['recall','precision'])","8f8642cc":"print(classification_report(y_test,np.where(lr.predict_proba(X_test)[:,1]< 0.51,0,1)))","cfe78a04":"pd.DataFrame({\"Bias error\":be_smote,\"Variance Error\":ve_smote,'AUC':[x\/100 for x in auc_smote],\n              'Precision : Good Risk':[x\/100 for x in precision0_smote],'Recall : Good Risk':[x\/100 for x in recall0_smote],\n              'Precision : Bad Risk':[x\/100 for x in precision1_smote],'Recall : Bad Risk':[x\/100 for x in recall1_smote]}\n             ,index = model_smote)","21fd7889":"Now, let's see how the data is scattered among different numerical columns","0954f958":"##### Inferences:\n- Some outliers in 'age' column.\n- Data is slightly right skewed. ","600496a3":"#### Inferences:\n- 80% of the bad credit risks happened in case of people having no checking account or having negative balance.","e4cb2e56":"So, number of features which should be selected is 19","199bde4a":"##### Inference:\n- Median age for bad credit risk records is lesser than the median age for good credit risk records.\n- IQR for bad credit risk records is almost same as IQR of good credit risk records.","8f5583f2":"##### 70% of the total records have good credit risk and 30% of records have bad credit risk.","0b94f6e4":"##### Inferences: \n- Only few outliers in 'duration' column.\n- Data is right skewed.","938e430a":"Let's check the box plots of the numerical features for good and bad credit risks","1bc6d628":"So, number of features which should be selected is 24","1f25a1a8":"Let's check the distribution plots of the numerical features for good and bad credit risks","28b669d4":"##### Inferences:\n- 34% of bad credit risk cases have their most valued property as bulding society \/ savings or life insurance.\n- 23.6% of of bad credit risk cases have their most valued property as car or something else.","5b8ff382":"### Bagged KNN","ba3a2df9":"##### Inferences:\n- Lot of outliers in 'amount' column.\n- Data is highly right skewed.","5b3e4aa2":"# Outlier Treatment","02f2a8fd":"##### Applying Chi-Square Contingency Test on categorical features to check their significance","5ba33e3e":"### Gradient Boosting","73480466":"### Stacked Models","1f8e1a04":"#### Random Forest","589f82eb":"Let's first visualize the numerical features of our dataset","4284532f":"### 2. T-Test of Independence","0388295e":"##### Let's see bivariate analysis of categorical columns","bfd34368":"#### Inferences:\n- Furniture\/Equipment accounts for 28% of purpose for which credits are taken.\n- Others account for 23.4% of purpose for credits are taken.\n- Car (Used) and Car (New) accounts for 18.1% and 10.3% respectively.\n- The purpose for each of the remaining categories is less than 10%.","0e9bd200":"##### Now, applying T-Test on Power Transformed data","d8ea244e":"##### Inferences:\n- 58% of bad credit risk cases happened for people having employment duration either less than 1 year or 1 to 4 years. It means most of these are younger people who are in their early career stage.","e8710f95":"##### Inferences:\n- 71.4% of people who are granted credits live in rented houses.\n- 17.9% of people who are granted credits live in houses for free.\n- 10.7% of people who are granted credits live in their own houses.","fbe26c08":"##### Inferences:\n- Around 75% of bad credit risk cases happened in case of people who didn't have any other installment plans going on except this bank. It's also kind of strange.","08af2ad8":"#### Replacing the numerical values with original values in all categorical columns","36faec5b":"### 1. Chi-Square Test","bea5bbd2":"### Adjusting Threshold","5b707437":"##### Inferences:\n- High positive correlation between duration and amount.\n- Low positive correlation between amount and age.\n- Low negative correlation between duration and age.","ec247cfd":"##### Now, let's see the boxplots and distriubution plots of numerical feaatures after PowerTransformation","109a6bd9":"##### Inferences:\n- 47.6% of people have installment rate less than 20% of their disposable (net) income.\n- 23.1% of people have installment rate between 25 to 35% of their disposable income.\n- 15.7% of people have installment rate between 20 to 25% of their disposable income.\n- 13.6% of records have installment rate greater than 35% of their disposable income. It means high loans are taken by only  13.6% of the people.","e66fd64e":"##### Inferences:\n- 53% of bad credit risk cases happened for people having installment rate less than 20% of their net income. It means people who have even lesser installment rate are turning out be a bad credit risk. It's because their net income may be very low that's why they can't repay the loans.","78c9409b":"Now, let's visualize the categorical features of our dataset","b4701990":"### Bagged Naive Bayes","e454e5fd":"##### Inferences:\n- 73.6% of bad credit risk cases happen for people who are living in their present residence for either 1 to 4 years or greater than 7 years. It doesn't indicate anything clearly.","27ef0300":"### Bagged Logistic Regression","b0a61db1":"##### Inference:\n- Age for most of the good and bad credit risks lie in the range of 20 to 60 years.\n- Overlapping is large, so it looks like mean age for good credit risk records and bad credit risk records is almost equal.","c17e1f3f":"##### Inferences:\n- 41.3% of credits were granted to people who were living at their present residence for more than 7 years.\n- 30.8% of credits were granted to people who were living at their present residence between 1 to 4 years.\n- 14.9% of credits were granted to people who were living at their present residence between 4 to 7 years.\n- 13% of credits were granted to people who were living at their present residence for less than 1 year.","409d8360":"##### Clubbing together of categories having very low percentage of values in different categorical columns","e2be6e7c":"## Bivariate Analysis","a103d9bf":"#### Inferences:\n- 72.3% of bad credit risk cases have no savings account or it's unkwown. So, savings account seems to be a crucial feature.","4c7f1a0d":"# Modelling","ea39d4fe":"##### Inferences:\n- 84.6% of total bad credit risk cases have 0 to 2 people dependent on the debtor.","63715eb5":"##### Inferences:\n- 63% of credits are given to debtors who are skilled employees or officials.\n- 20% of credits are granted to debtors who are unskilled - resident. It can be potentially risky.\n- 14.8% of credits are given to debtors who are managers or self employed or highly qualified employees.\n- Only 2.2% of credits are given to debtors who are unemployed\/unskilled and non-resident.","bb02dd33":"#### Inferences:\n- 39.4% of records have 200 DM or more balance in checking account\n- 27.4% of records have no checking account.\n- 26.9% of records have negative balance.\n- Only 6.3% of records have balance greater than 0 and less than 200 DM in checing account","8e1a5604":"##### Let's see the bivariate analyis of numerical features","0bbf9e61":"### Boosted Logstic Regression","23250857":"##### Inference:\n- Duration for most of the good and bad credit risks lie in the range of around 9 to 50 months.\n- Overlapping is very less, so it seems like mean duration for good credit risk records and bad credit risk differs significantly.","7f273e33":"# Conclusion","9b2c8f9e":"##### Inference:\n- Amount for most of the good and bad credit risk records lie between 0 to 5000 DM\n- Overlapping is quite large, but the peak of good credit risk records is higher than the bad ones, so it seems like the mean amount for good credit risk records is greater than that of bad credit risk records.","7319c31f":"So, number of features which should be selected is 11","1c3b109b":"### Boosted Naive Bayes","9e5f3917":"So, number of features which should be selected is 15","5fa256ec":"##### Inferences:\n- 98.67% of bad credit risk cases happened with people who aren't foreign workers.","fb1334ff":"### Logistic Regression","f6770f3c":"#### Gradient Boosting","db909344":"# Statistical Significance","3b276ff3":"## One Hot Encoding","a93fb1d5":"# SMOTE","f9ac384a":"## Univariate Analysis","7eabf54e":"##### Inferences:\n- 66.67% of bad credit risk cases have taken only 1 credit from this bank.","b8dabdb3":"##### Inferences:\n- 62% of bad credit risk cases happened with people who are skilled employees or officials. It's kind of strange that these people turned out to be defaulters.","4645f5ca":"#### Inferences:\n- 75.3% of bad credit risk cases have purpose as car (used or new) or some other reasons.","5c207314":"#### Inferences:\n- 53% of records have either paid back all credits duly or haven't taken any credits.\n- 29.3% of records have paid all credits at this bank duly.\n- 8.8% of records have paid back exisiting credits duly till now.\n- 4.9% of records have critical accounts\/other credits elsewhere.\n- Only 4% of records had delay in paying off the credit in the past.","017304b9":"##### Inference:\n- Most of the bad credit risks have duration of at least 12 months and go upto 60 months.\n- Most of these bad credit risks is between 20 to 60 years of age.","d921c0cb":"##### Inferences:\n- 54.8% of credits are taken by males who are either married or widowed.\n- 31% of credits are taken by females who are married or males who are single.\n- 9.2% of credits are taken by females who are single.\n- 5% of credits are taken by males who are divorced\/separated.","ac69c1de":"### Boosted Random Forest is the best model as it's giving highest recall, precision and roc-auc out of the all the models.","dd4a47ba":"# Exploratory Data Analysis","0fbe17de":"#### Stacked GB + Boosted RF","8625396d":"##### Inferences:\n- 63.3% of records have had only 1 loan at this bank.\n- 33.3% of records have had 2 to 3 loans at this bank.\n- 2.8% of records have had 4 to 5 loans at this bank.\n- Only 0.6% of records have had 6 or more loans at this bank.","5021cb0a":"We observed that after adjusting threshold value for the top performing models, the performance remains almost the same. It's a tradeoff between the recall and precision metrics. In our case, we want both the recall and precision to be higher in order to predict bad credit risk accurately to minimize the losses caused to banks by the defaulters.","edc10477":"### Random Forest","12083a20":"### Boosted Random Forest","614f9b30":"#### Inferences:\n- More than 60% of records have either no savings accounts or it's unknown.\n- 18.3% of records have balance greater than 1000 DM in savings account.\n- 10.3% of people have less than 100 DM balance in savings account.\n- Only 6.3% of people have balance between 100 to 500 DM and 4.8% people have balance between 500 to 1000 DM.","07d5f03b":"##### Inferences:\n- 59.6% of records have a landline telephone registered on debtor's name.\n- 40.4% of records don't have any a landline telephone registered on debtor's name.","3e2e3a8b":"##### Inferences:\n- 34% of credits are taken by people having 1 to 4 years of employment duration.\n- 25.3% of credits are taken by people having employment duration greater than 7 years.\n- 17.4% of credits are taken by people between 4 to 7 years of employment duration.\n- 17.2% are taken by people with less than 1 year of employment duration.\n- Only 6.2% of credits are granted to records who were unemployed.","254323fe":"##### Inferences:\n- 62% of bad credit risk cases have their housing as rent. It means people who live in rented houses are more likely to turn out to be a defaulter.","1b3cbcd1":"##### Inferences:\n- 33.2% of credits are given to people who have building society, savings or life insurance as their most valued property.\n- 28.2% of credits are given to people who either don't have any property or it's unknown. This is critical as it can lead to bad credit risks.\n- 23.2 % of credits are granted to people whose most valued property is car or any other thing.\n- 15.4 % of credits are granted to people whose most valued property is real estate.","c35aec41":"So, number of features to be selected = 16","2b9009da":"##### Inferences:\n- Median duration for bad credit risk records is greater than the median duration for good credit risk records.\n- IQR for bad credit risk records is greater than IQR of good credit risk records.","238b8c07":"#### Logistic Regression","2c87ae08":"##### Inferences:\n- Most of the bad credit risks have duration of at least 12 months and go upto 60 months.\n- As the duration for bad credit risks increases, the amount also increases.","a551e101":"##### Inferences:\n- 96.3% of credits are taken by people who aren't foreign workers.\n- Only 3.7% of credits are taken by foreign workers.","0aa2a9f5":"###  K-Nearest Neighbors","69b20421":"##### Inferences:\n- 84.5% records have 0 to 2 people liable i.e., people who are financially dependent on debtor.\n- 15.5% of records have 3 or more people liable i.e., people who are financially dependent on debtor.","544dd0ef":"##### Now, let's first apply one hot encoding on Power Transformed DataFrame","94745262":"So, number of features to be selected = 16","6870b802":"### Power Transformer","f919a7a1":"##### Inferences:\n- 62.33% of bad credit risk records don't have landline telephone registered on debtor's name while 37.67% records have landline telephone registered on debtor's name. It doesn't indicate anything clearly.","8153b07a":"#### Converting the columns having ordinal values to numerical codes.","b62f9db5":"##### Inferences:\n- 81.4% of records have no other installment plans.\n- 13.9% of records have other installment plans going on from banks other than the credit-giving bank.\n- 4.7% of records have other installment plans from stores.","5c40dee8":"- #### Precision = TruePositives \/ (TruePositives + FalsePositives)\n\n- #### Recall = TruePositives \/ (TruePositives + FalseNegatives)","168207a1":"##### Inferences:\n- 48.6% of bad credit risk cases happened in case of males who are either married or widowed.","76a4a0e2":"##### Inferences:\n- 90.67% of bad credit risk cases happened in case of people who have no other debtor. It means they were the single borrower of the credit.","a0145381":"### Decision Tree","1b30a35a":"#### Inferences:\n- 56.3% of bad credit risk cases happened in case of people who have paid back all previous credits duly or who haven't taken credits from this bank. It's kind of strange.","a4d3acf7":"#### Bagged KNN","8204eeac":"##### Inferences:\n- Median amount for bad credit risk records is almost same as the median amount for good credit risk records.\n- IQR for bad credit risk records is greater than IQR of good credit risk records.","f300658c":"### Naive Bayes","3f1ebb1e":"##### Inference:\n- Most of the bad credit risks lie in the age of 20 to 60 years.\n- The amount for these bad credit risks lie in the range of 0 to 12500 DM."}}