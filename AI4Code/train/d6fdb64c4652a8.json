{"cell_type":{"5c8ea3b7":"code","6ec103b3":"code","26cd38ab":"code","d24bb887":"code","e12e51fb":"code","bef71973":"code","d1980ec0":"code","b07c2eff":"code","9d2d3ad3":"code","2d90353b":"code","9f98ed91":"code","6eeb7f1a":"code","f34fc90a":"code","dcce999f":"code","cf1cbc9d":"code","d4398e3d":"code","afe75897":"code","218fff5c":"code","54b13876":"code","77dd729d":"markdown","73458801":"markdown"},"source":{"5c8ea3b7":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6ec103b3":"# Importing Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# I'm using plotly because it's simple and elegance\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objects as go\ninit_notebook_mode(connected=True)\n\n# So that warning doesn't pop up\nimport warnings\nwarnings.filterwarnings(\"ignore\")","26cd38ab":"team = pd.read_csv('\/kaggle\/input\/top-100-highest-overall-esport-team-earning\/ESPORT Team Dataset\/esport_team.csv')\ncountry = pd.read_csv('\/kaggle\/input\/top-100-highest-overall-esport-team-earning\/ESPORT Team Dataset\/esport_country.csv')\nplayer = pd.read_csv('\/kaggle\/input\/top-100-highest-overall-esport-team-earning\/ESPORT Team Dataset\/esport_player.csv')\ngame = pd.read_csv('\/kaggle\/input\/top-100-highest-overall-esport-team-earning\/ESPORT Team Dataset\/competitive_game.csv')","d24bb887":"# Checking Missing value\nfor df in [team,country,player,game]:\n    print(df.isna().sum())\n    print(\"--\"*20)","e12e51fb":"for df in [team,country,player,game]:\n    print(df.columns.tolist())","bef71973":"# Converting values that is in US dollar into floating point value\n\ndef convertToFloat(string):\n    '''Converting specific string pattern to floating point value'''\n    try:\n        result = float(string.replace(\"$\",\"\").replace(\",\",\"\"))\n    except:\n        result = np.nan\n    return result\n\n# Converting strign percentage value to integer\ndef convertToNum(string):\n    '''Convert percent (string) to integer'''\n    try:\n        result = float(string.replace(\"%\",\"\"))\n    except:\n        result = np.nan\n    return result\n\n# Converting\nteam['Total Prize Won'] = team['Total Prize Won'].apply(lambda s: convertToFloat(s))\ncountry['Total Earning by Player'] = country['Total Earning by Player'].apply(lambda s: convertToFloat(s))\ncountry['Percentage of Country Total Earning'] = country['Percentage of Country Total Earning'].apply(lambda s: convertToNum(s))\nplayer['Total Earning'] = player['Total Earning'].apply(lambda s: convertToFloat(s))\ngame['Total Money Earned'] = game['Total Money Earned'].apply(lambda s: convertToFloat(s))\ngame['Total Money Earned Percentage'] = game['Total Money Earned Percentage'].apply(lambda s: convertToNum(s))","d1980ec0":"# Checking for NaN value after running the convertsion function\ncountry[country['Total Earning by Player'].isna()]","b07c2eff":"# Dropping the NaN value\nfor df in [team,country,player,game]:\n    df.dropna(inplace=True)","9d2d3ad3":"# Checking for the Invalid again after dropping NaN values\ncountry[country['Total Earning by Player'].isna()]","2d90353b":"# Create new column for all dataset that convert Total Prize Won into billion so easier analysis\n\nteam['Total Prize (Million)'] = team['Total Prize Won'].apply(lambda prize: prize \/ 10**6)\ncountry['Total Earning by Player (Million)'] = country['Total Earning by Player'].apply(lambda prize: prize \/ 10**6)","9f98ed91":"# Exploring the Data\n\n# Team with highger price won than the mean\n\n# team[team['Total Prize Won'] >= team['Total Prize Won'].mean()]\n# team[team['Total Prize Won'] > team['Total Prize Won'].quantile(0.75)]\n\nteam.sort_values(by='Total Prize Won',ascending = False).head()","6eeb7f1a":"team.describe().T","f34fc90a":"country.head()","dcce999f":"# Highest Total Prize Won by Country\ncountry.groupby('Country').sum().sort_values(by='Total Earning by Player',ascending = False).head()","cf1cbc9d":"df = country.groupby('Country').sum().sort_values(by='Total Earning by Player',ascending = False)\n\nfig = px.bar(data_frame = df.head(15),\n             x = df.head(15).index,\n             y = 'Total Earning by Player')\n\nfig.update_layout(title = 'Top 10 Countries by Total Player Earning')\n\nfig.update_xaxes(tickangle=45,\n                 title = 'Country')\n\nfig.show()","d4398e3d":"# Highest Total Earning from Tournament Prize by Player\nplayer.sort_values(by='Total Earning',ascending = False).head()","afe75897":"# Highest Cummulative Price given by a game\ndf = game.groupby('Game').sum().sort_values('Total Money Earned',ascending = False).head(10)\n\nfig = px.bar(data_frame = df,\n             x = df.index,\n             y = 'Total Money Earned')\n\nfig.show()","218fff5c":"df = player.groupby('Team').sum().sort_values(by='Total Earning',ascending = False).head(10)\n\nfig = px.bar(data_frame = df,\n             x = df.index,\n             y = 'Total Earning')\n\nfig.update_layout(title = 'Total Earning by Player from different Team')\n\nfig.show()","54b13876":"player.sort_values('Total Earning',ascending = False).head(10)","77dd729d":"<h3 style = \"text-align:center;font-family:optima;font-size:35px\">Thank you for checking out this notebook!<\/h3>","73458801":"<h3 style = \"text-align:center;font-family:optima;font-size:35px\">ESPORT Team Earning \n\ud83c\udfae<\/h3>"}}