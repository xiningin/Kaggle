{"cell_type":{"0256e02c":"code","f3b178c5":"code","bad45ae0":"code","70b8cd03":"code","95fa4e51":"code","ffe109c7":"code","a22383fd":"code","6aa00a15":"code","9f566277":"code","424174ad":"code","a2a93809":"code","64f604a4":"code","066a7265":"code","71cf5a6e":"code","55bfc0fa":"markdown","e4706bcf":"markdown","e4ad0e5c":"markdown","fea99079":"markdown","458c9d0d":"markdown","ed02ecce":"markdown","ec15d6c6":"markdown","be07d7a2":"markdown"},"source":{"0256e02c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport folium\nimport plotly.express as ply\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f3b178c5":"train_dt = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv\")\ntest_dt = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-1\/test.csv\")\nsubmission_dt = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-1\/submission.csv\")\nprint(\"Number of rows in the training dataset:\",len(train_dt))\nprint(\"Number of rows in the test dataset:\",len(test_dt))\nprint(\"Test and Training Dataset Ratio:\",round(len(test_dt)*100\/len(train_dt),2),\"%\")\ntrain_dt.head(5)\n","bad45ae0":"print(\"No of confirmed cases:\",len(train_dt[train_dt[\"ConfirmedCases\"]>=1]),\"\\n\")\nprint(\"Percentage of corfirmed cases in the training dataset:\",round(len(train_dt[train_dt[\"ConfirmedCases\"]>=1])*100\/len(train_dt),2),\"%\")\ntrain_dt_confirmed = train_dt[train_dt[\"ConfirmedCases\"]>=1]\ntrain_dt_confirmed=train_dt_confirmed[[\"Country\/Region\",\"Date\"]]\nprint(\"\\nNumber of Corona Affected Countries:\",train_dt_confirmed[\"Country\/Region\"].nunique(),\"\\n\")\nprint(\"\\nList of Corona Affected Countries....\\n\")\nprint(train_dt_confirmed.head(10))\n","70b8cd03":"df= train_dt_confirmed.groupby([\"Country\/Region\"]).count()\ndf=df.sort_values(\"Date\",ascending=False)\ncountry_name = df.index.get_level_values('Country\/Region')\ncorona_victims=[]\nfor i in range(len(df)):\n    corona_victims.append(df[\"Date\"][i])\ncl = pd.DataFrame(corona_victims,columns=[\"Victim\"]) # Converting List to Dateframe\ndf=df.head(80)\nxlocs=np.arange(len(df))\ndf.plot.barh(color=[np.where(cl[\"Victim\"]>20,\"r\",\"y\")],figsize=(12,16))\nplt.xlabel(\"Number of Corona Affected Patients\",fontsize=12,fontweight=\"bold\")\nplt.ylabel(\"Country\/Region\",fontsize=12,fontweight=\"bold\")\nplt.title(\"Global Effect of Corona\",fontsize=14,fontweight=\"bold\")\nfor i, v in enumerate(df[\"Date\"][:]):\n    plt.text(v+0.01,xlocs[i]-0.25,str(v))\nplt.legend(country_name) # top affected country\nplt.show()\n","95fa4e51":"df_61 = []\nnumber_countries = 0\ntotal_victims=0\nfor i in range(df[\"Date\"].shape[0]):\n    if df[\"Date\"][i] > 55:\n        df_61.append(df[\"Date\"][i])\n        total_victims = total_victims + df[\"Date\"][i]\n        number_countries=number_countries+1\nprint(\"Number of countries where Corona Victims are more than 55 :\", number_countries,\"\\n\")\nprint(\"Total Number of Victims:\",total_victims,\"\\n\")        \n","ffe109c7":"explode=np.zeros(number_countries)\nexplode[0]=0.1\nexplode[1]=0.1\nexplode[2]=0.2\nfig = plt.gcf() # gcf stands for Get Current Figure\nfig.set_size_inches(10,10)\nplt.pie(df_61,explode=explode,autopct='%1.1f%%',shadow=True, labels=country_name[0:number_countries])\ntitle = \"Contribution of Top \"+str(number_countries) +\" Countries\" \nplt.title(title,fontsize=12, fontweight=\"bold\")\nplt.legend(loc=\"lower right\",bbox_to_anchor=(1.1,0),bbox_transform=plt.gcf().transFigure) # bbx required to place legend without overlapping\nplt.show()\n","a22383fd":"train_dt_fatalities = train_dt[train_dt[\"Fatalities\"]>=1]\nprint(\"Number of Countries where Death Toll is more than or equal to 1 is  \",len(train_dt_fatalities),\"\\n\")\nprint(\"Out of \", len(train_dt),\" Countries \",len(train_dt_fatalities),\" Countries got fatalities\\n\")\nprint(\"Percentage of Countries got fatalities \",round(len(train_dt_fatalities)*100\/len(train_dt),2),\"%\")","6aa00a15":"import datetime\nPrevious_Date = datetime.datetime.today() - datetime.timedelta(days=1)\nPrevious_Date=Previous_Date.strftime(\"%Y-%m-%d\")\ntrain_dt_fatalities_sort = train_dt_fatalities.sort_values(\"Fatalities\",ascending=False)\ntrain_dt_fatalities_sort = train_dt_fatalities_sort[train_dt_fatalities_sort[\"Date\"]==Previous_Date]\ntrain_dt_fatalities_sort \nfig=plt.gcf()\nfig.set_size_inches(10,10)\nxlocs=np.arange(len(train_dt_fatalities_sort[\"Country\/Region\"][0:10]))\nplt.bar(train_dt_fatalities_sort[\"Country\/Region\"][0:10],train_dt_fatalities_sort[\"Fatalities\"][0:10],alpha=0.5)\nfor i,v in enumerate(train_dt_fatalities_sort[\"Fatalities\"][0:10]):\n    plt.text(xlocs[i]-0.25,v+1,str(v))\ntitle = \"Number of Fatalities on :\"+str(Previous_Date)\nplt.title(title,fontsize=12,fontweight=\"bold\")\nplt.xlabel(\"Countries\",fontsize=12,fontweight=\"bold\")\nplt.ylabel(\"Number of Death Toll Due To Corona\",fontsize=12,fontweight=\"bold\")\nplt.legend(train_dt_fatalities_sort[\"Country\/Region\"])\nfig.autofmt_xdate() # make space for and rotate the x-axis tick labels","9f566277":"fig,ax1 = plt.subplots()\nax2 = ax1.twinx()\ndf_china = train_dt[train_dt[\"Country\/Region\"]==\"China\"]\ndf_china = df_china.groupby(\"Date\").sum().reset_index()\nax1.plot(df_china[\"Date\"],df_china[\"ConfirmedCases\"],linestyle=\"solid\",linewidth=2,color='b')\nax2.plot(df_china[\"Date\"],df_china[\"Fatalities\"],linestyle=\"solid\",linewidth=2,color='r')\nax1.set_xticklabels(df_china[\"Date\"],rotation=90,fontsize=\"x-small\",fontweight=\"bold\")\nax1.set_ylabel(\"Confirmed Cases\",fontweight=\"bold\")\nax2.set_ylabel(\"Fatalities\",fontweight=\"bold\")\nplt.legend(fontsize=10,fancybox=True, framealpha=1, shadow=True, borderpad=1,loc=\"upper right\")\nplt.title(\"China\")\nplt.show()","424174ad":"fig,ax1 = plt.subplots()\nax2 = ax1.twinx()\ndf_Italy = train_dt[train_dt[\"Country\/Region\"]==\"Italy\"]\ndf_Italy = df_Italy.groupby(\"Date\").sum().reset_index()\nax1.plot(df_Italy[\"Date\"],df_Italy[\"ConfirmedCases\"],linewidth=2,linestyle=\"-\",color='b')\nax2.plot(df_Italy[\"Date\"],df_Italy[\"Fatalities\"],linewidth=2,linestyle=\"-\",color=\"r\")\nax1.set_xticklabels(df_Italy[\"Date\"],rotation=90,fontsize=\"x-small\",fontweight=\"bold\")\nax1.set_ylabel(\"Confirmed Cases\",fontweight=\"bold\")\nax2.set_ylabel(\"Fatalities\",fontweight=\"bold\")\nplt.legend(fontsize=10,fancybox=True, framealpha=1, shadow=True, borderpad=1,loc=\"upper right\")\nplt.title(\"Italy\")\nplt.show()","a2a93809":"fig,ax1=plt.subplots()\nax2 = ax1.twinx()\ndf_Australia = train_dt[train_dt[\"Country\/Region\"]==\"Australia\"]\ndf_Australia = df_Australia.groupby(\"Date\").sum().reset_index()\nax1.plot(df_Australia[\"Date\"],df_Australia[\"ConfirmedCases\"],linewidth=2,linestyle=\"solid\",color='b')\nax2.plot(df_Australia[\"Date\"],df_Australia[\"Fatalities\"],linewidth=2,linestyle=\"solid\",color='r')\nax1.set_xticklabels(df_Australia[\"Date\"],rotation=90,fontsize=\"x-small\",fontweight=\"bold\")\nax1.set_ylabel(\"Confirmed Cases\",fontweight=\"bold\")\nax2.set_ylabel(\"Fatalities\",fontweight=\"bold\")\nplt.legend(fontsize=10,fancybox=True, framealpha=1, shadow=True, borderpad=1,loc=\"upper right\")\nplt.title(\"Australia\")\nplt.show()","64f604a4":"fig,ax1=plt.subplots()\nax2=ax1.twinx()\ndf_US = train_dt[train_dt[\"Country\/Region\"]==\"US\"]\ndf_US = df_US.groupby(\"Date\").sum().reset_index()\nax1.plot(df_US[\"Date\"],df_US[\"ConfirmedCases\"],linewidth=2,linestyle=\"solid\",color='b')\nax2.plot(df_US[\"Date\"],df_US[\"Fatalities\"],linewidth=2,linestyle=\"solid\",color='r')\nax1.set_xticklabels(df_US[\"Date\"],rotation=90,fontsize=\"x-small\",fontweight=\"bold\")\nax1.set_ylabel(\"Confirmed Cases\",fontweight=\"bold\")\nax2.set_ylabel(\"Fatalities\",fontweight=\"bold\")\nplt.legend(fontsize=10,fancybox=True, framealpha=1, shadow=True, borderpad=1,loc=\"upper right\")\nplt.title(\"US\")\nplt.show()","066a7265":"fig,ax1 = plt.subplots()\nax2=ax1.twinx()\ndf_Canada = train_dt[train_dt[\"Country\/Region\"]==\"Canada\"]\ndf_Canada = df_Canada.groupby(\"Date\").sum().reset_index()\nax1.plot(df_Canada[\"Date\"],df_Canada[\"ConfirmedCases\"],linewidth=2,linestyle=\"solid\",color='b')\nax2.plot(df_Canada[\"Date\"],df_Canada[\"Fatalities\"],linewidth=2,linestyle=\"solid\",color='r')\nax1.set_xticklabels(df_Canada[\"Date\"],rotation=90,fontsize=\"x-small\",fontweight=\"bold\")\nax1.set_ylabel(\"Confirmed Cases\",fontweight=\"bold\")\nax2.set_ylabel(\"Fatalities\",fontweight=\"bold\")\nplt.legend(fontsize=10,fancybox=True, framealpha=1, shadow=True, borderpad=1,loc=\"upper right\")\nplt.title(\"Canada\")\nplt.show()","71cf5a6e":"df = train_dt.groupby([\"Date\",\"Country\/Region\"])[\"ConfirmedCases\",\"Fatalities\"].max().reset_index()\nfig= ply.scatter_geo(df,locations=\"Country\/Region\", locationmode='country names', \n                     color=\"ConfirmedCases\", hover_name=\"Country\/Region\", \n                     range_color= [0, 1000], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='Confirmed Cases of Corona Over Time', color_continuous_scale=\"portland\")\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","55bfc0fa":"**China**","e4706bcf":"**Italy**","e4ad0e5c":"**US**","fea99079":"**Australia**","458c9d0d":"**List of Fatalities**","ed02ecce":"**Canada**","ec15d6c6":"**Confirmed Cases of Corona Over Time**","be07d7a2":"**Spread of Corona**"}}