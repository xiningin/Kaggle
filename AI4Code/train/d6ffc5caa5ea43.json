{"cell_type":{"5ecb90c7":"code","2c521f38":"code","ba1aa164":"code","4d45f998":"code","571f6f37":"code","d39556a3":"code","25c52718":"code","a4d76479":"code","62871d82":"code","85341343":"code","0c779377":"code","18a0e387":"code","04f20fac":"code","2eed22eb":"code","37c62478":"code","8f7c2069":"code","5b3ac2e6":"markdown","be85c36f":"markdown","5f13be01":"markdown","2c6478d5":"markdown","89314206":"markdown","b15d7f9d":"markdown","34556ed2":"markdown","66add65c":"markdown","218f6860":"markdown","3da6530c":"markdown","9459a6cb":"markdown","fc26fd81":"markdown","01d0126c":"markdown","aa9f8507":"markdown"},"source":{"5ecb90c7":"# TensorFlow and tf.keras\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Helper libraries\nimport numpy as np #Algebra Lineare\nimport matplotlib.pyplot as plt #grafici\nimport pandas as pd\nimport itertools\n%matplotlib inline\n","2c521f38":"#loading the dataset and labels.......(Train)\ntrain = pd.read_csv(\"..\/input\/intelligenza-artificiale-in-classe-fashion-mnist\/train.csv\")\nprint(train.shape)\n\n#loading the dataset.......(Test)\ntest= pd.read_csv(\"..\/input\/intelligenza-artificiale-in-classe-fashion-mnist\/test.csv\")\nprint(test.shape)","ba1aa164":"class_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","4d45f998":"plt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train.iloc[i,1:].values.reshape((28,28)),cmap=plt.cm.binary)\n    plt.xlabel(class_names[train.iloc[i,0]])\nplt.show()","571f6f37":"train_images = train.iloc[:,1:].values.astype('float32')# only labels i.e targets digits\ntrain_labels = train.iloc[:,0].values.astype('int32')# only labels i.e targets digits\n\nprint(train_images.shape,train_labels.shape)\n\ntest_images = test.values.astype('float32')# only labels i.e targets digits\n\nprint(test_images.shape)","d39556a3":"train_images = train_images \/ 255.0\ntest_images = test_images \/ 255.0","25c52718":"model = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)), #livello degli input\n    keras.layers.Dense(128, activation='relu'), #primo livello interno\n    keras.layers.Dense(10, activation='softmax') #livello degli output\n])","a4d76479":"model.summary()","62871d82":"model.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])","85341343":"model_log = model.fit(train_images,train_labels,\n                      batch_size=32,\n                      epochs =5,\n                      validation_split=0.05,\n                      verbose=1)","0c779377":"# plotting the metrics\nfig = plt.figure(figsize=(15, 5))\nplt.subplot(1,2,1)\nplt.plot(model_log.history['accuracy'])\nplt.plot(model_log.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='lower right')\nplt.subplot(1,2,2)\nplt.plot(model_log.history['loss'])\nplt.plot(model_log.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper right')\nplt.tight_layout()\n\nfig.show()","18a0e387":"predictions = model.predict(test_images)","04f20fac":"predictions[0]","2eed22eb":"np.argmax(predictions[0])","37c62478":"pred = []\n\nfor i in range(0,len(predictions)):\n    pred.append(np.argmax(predictions[i]))","8f7c2069":"#Questa parte serve solo per la competition Digit-Recognizer per generare il file da inviare\nimageid = []\npred = []\n\nfor i in range(0,len(predictions)):\n    pred.append(np.argmax(predictions[i]))\n    imageid.append(i)\n    \npred_df = pd.DataFrame(pred,imageid)\npred_df.index.name='ImageId'\npred_df.head(8)\n\npred_df.columns=['Label']\npred_df.head()\n\npred_df.to_csv('submission.csv')","5b3ac2e6":"Rappresentiamo diverse immagini con le rispettive previsioni. Notiamo che il modello pu\u00f2 sbagliare anche quando \u00e8 molto confidente.","be85c36f":"Infine, usiamo il modello addestrato per generare il sample con la previsione da consegnare.","5f13be01":"## Costruire il modello\n\nLa costruzione della rete neurale richiede di configurare i livelli del modello, quindi la compilazione del modello.","2c6478d5":"Il primo livello in questa rete, `tf.keras.layers.Flatten`, trasforma il formato delle immagini da un array bi-dimensionale (di 28 per 28 pixel) in un array uni-dimensionale (di 28 * 28 = 784 pixel). Pensate a questi livelli come righe non impilate di pixel dell'immagine. Questo livello non ha parametri da imparare; esso si limita a rifirmattare i dati.\n\nhttps:\/\/keras.io\/api\/layers\/activations\/\n\nDopo la normalizzazione dei pixel, la rete consiste di due livelli `tf.keras.layers.Dense`. Questi sono livelli neurali strettamente connessi, o completamente connessi. Il primo livello `Denso` ha 128 nodi (o neuroni). Il secondo (ed ultimo) livello \u00e8 un livello *softmax* a 10 nodi che restituisce un vettore di 10 valori di probabilit\u00e0 la cui somma \u00e8 1. Ogni nodo contiene un valore che indica la probabilit\u00e0 che l'immagine corrente appartenga ad una delle 10 classi.\n\n### Compilare il modello\n\nPrima che il modello sia pronto per l'apprendimento, \u00e8 necessaria qualche impostazione in pi\u00f9. Queste sono aggiunte durante i passi di *compilazione* del modello:\n\n* *Funzione perdita* \u2014Misura quanto \u00e8 accurato il modello durante l'apprendimento. La volont\u00e0 \u00e8 di minimizzare questa funzione per \"dirigere\" il modello nella giusta direzione.\n\n  https:\/\/keras.io\/api\/losses\/\n\n* *Ottimizzatore* \u2014Indica com'\u00e8 aggiornato il modello sulla base dei dati che tratta e della sua funzione perdita.\n\n  https:\/\/keras.io\/api\/optimizers\/adam\/\n\n* *Metriche* \u2014Usate per monitorare i passi di addestramento e verifica. L'esempio seguente usa come *accuratezza*, la frazione delle immagini che sono classificate correttamente.\n\n  https:\/\/keras.io\/api\/metrics\/","89314206":"Questi valori vanno scalati in un intervallo tra 0 e 1 prima di darli in pasto al modello della rete. Per fare ci\u00f2, si dividono i valori per 255. E' importante che l'*insieme di addestramento* e l'*insieme di verifica* siano pre-elaborati nello stesso modo:","b15d7f9d":"## Fare previsioni\n\nUna volta addestrato il modello, puoi usarlo per fare previsioni su altre immagini.","34556ed2":"# Classificazione base con i capi d'abbigliamento","66add65c":"## Pre-elaborare i dati\n\nPrima di allenare la rete, i dati devono essere pre-elaborati. Osservando la prima immagine  dell'insieme di addestramento, si noter\u00e0 che i valori dei pixel cadono nell'intervallo da 0 a 255 (variare il numero 0 contenuto in train_images[0] per vedere come cambia il risultato; plt \u00e8 il nome con cui \u00e8 stato creato un oggetto tipo matplotlib.pyplot):","218f6860":"Qui, il modello ha previsto l'etichetta per ciascuna immagine nell'insieme di test. Diamo un'ochiata alla prima previsione:","3da6530c":"Una prevsione \u00e8 un vettore di 10 numeri. Essi rappresentano la \"confidenza\" del modello che l'immagine corrisponda a ciascuno dei 10 diversi articoli di abbigliamento. E si pu\u00f2 vedere quale etichetta ha il valore pi\u00f9 alto di confidenza:","9459a6cb":"## Addestrare il modello\n\nL'addestramento del modello di rete neurale richiede i seguenti passi:\n\n1. Alimentare il modello con i dati di addestramento. In questo esempio, i dati di addestramento sono nei vettori `train_images` e `train_labels`.\n2. Il modello impara ad associare immagini ed etichette.\nPer iniziare l'addestramento, chiamare il metodo `model.fit`\u2014chiamato cos\u00ec perch\u00e8 \"allena\" il modello sui dati di addestramento:","fc26fd81":"Mentre il modello si allena, vengono visualizzate le metriche di perdita e accuratezza. Questo modello raggiunge un'accuratezza di circa 0.9 (il risultato cambia ogni volta) sui dati di addestramento.","01d0126c":"### Inizializzare i livelli\n\nL'elemento costruttivo di base di una rete neurale \u00e8 il *livello*. I livelli estraggono rappresentazioni dai dati con cui vengono alimentati. Sperabilmente, queste rappresentazioni sono significative per il problema che si sta trattando.\n\nLa maggior parte del deep learning consiste nel collegare tra loro livelli semplici. La maggior parte dei livelli, come `tf.keras.layers.Dense`, hanno parametri che sono imparati durante l'allenamento.","aa9f8507":"## Importare il dataset"}}