{"cell_type":{"c9c31ea1":"code","f39e89b8":"code","5df8a4a0":"code","a07a853d":"code","bcffae42":"code","f5c99eca":"code","b4ec9cc3":"code","67476fa5":"code","83352f8d":"code","ad62b305":"code","558b7281":"code","cfb2ce67":"code","f234b560":"code","4e414e5e":"code","456d5159":"code","88040ac3":"code","6c755069":"code","ab24dd60":"code","d4c0771f":"code","99616c0b":"code","872546c2":"code","b156374d":"code","bf88d346":"code","6445a7be":"code","92227347":"code","bd1a320b":"code","54db7a28":"code","5d5566f7":"code","a2e13f89":"code","096837ae":"code","3d78b393":"code","6b2e6c0a":"code","d33d3132":"code","ce3e1b71":"code","603e6774":"code","59925301":"code","70ee75c6":"code","aa0b1e34":"code","b4bc710c":"code","0d128e0c":"code","80489870":"code","ac05414a":"code","b957053b":"code","b5b45d2c":"code","c4f29f76":"code","af1f5975":"code","5183f236":"code","3ee61468":"code","4c443439":"code","4e3210c8":"code","0e8b3792":"code","5f1f974c":"code","33a84f55":"code","b5795c7d":"code","19541fd2":"code","35228ba4":"markdown","91a9a483":"markdown","67e432a8":"markdown","28eefd94":"markdown","dfed9701":"markdown","e13566fc":"markdown","3c42e98e":"markdown","bfbc3c4d":"markdown","ce85b3f5":"markdown","7472877a":"markdown","9a935341":"markdown","3d949ae4":"markdown","f7fc78d9":"markdown","12b83cab":"markdown","336bbe01":"markdown","5bef9851":"markdown","878b50e8":"markdown","2946e691":"markdown"},"source":{"c9c31ea1":"DEVICE = \"TPU\"\n\nCFG = dict(\n    net_count         =   7,\n    batch_size        =  16,\n    \n    read_size         = 384, \n    crop_size         = 380, \n    net_size          = 384, \n    \n    LR_START          =   0.000005,\n    LR_MAX            =   0.000020,\n    LR_MIN            =   0.000001,\n    LR_RAMPUP_EPOCHS  =   5,\n    LR_SUSTAIN_EPOCHS =   0,\n    LR_EXP_DECAY      =   0.8,\n    epochs            =  15,\n    \n    rot               = 180.0,\n    shr               =   2.0,\n    hzoom             =   8.0,\n    wzoom             =   8.0,\n    hshift            =   8.0,\n    wshift            =   8.0,\n\n    optimizer         = 'adam',\n    label_smooth_fac  =   0.05,\n    \n    tta_steps         =  25    \n)","f39e89b8":"!pip install -q efficientnet","5df8a4a0":"import os, random, re, math, time\nimport torch\nimport numpy as np\nimport pandas as pd\n\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nimport efficientnet.tfkeras as efn\n\nimport PIL\n\nfrom tqdm import tqdm\nfrom sklearn.metrics import roc_auc_score\n\nimport os\nimport keras\nimport efficientnet.tfkeras as efn\nfrom tensorflow.keras.models import Sequential\nimport tensorflow.keras.layers as L\nfrom tensorflow.keras.layers import Dense, GlobalAveragePooling2D\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau , EarlyStopping , ModelCheckpoint , LearningRateScheduler\nfrom tensorflow.keras.applications import ResNet152V2, InceptionResNetV2, InceptionV3, Xception, VGG19,DenseNet201\nfrom kaggle_datasets import KaggleDatasets","a07a853d":"BASEPATH = \"..\/input\/siim-isic-melanoma-classification\"\ndf_train = pd.read_csv(os.path.join(BASEPATH, 'train.csv'))\ndf_test  = pd.read_csv(os.path.join(BASEPATH, 'test.csv'))\ndf_sub   = pd.read_csv(os.path.join(BASEPATH, 'sample_submission.csv'))\n\nGCS_PATH    = KaggleDatasets().get_gcs_path('melanoma-384x384')\nfiles_train = np.sort(np.array(tf.io.gfile.glob(GCS_PATH + '\/train*.tfrec')))\nfiles_test  = np.sort(np.array(tf.io.gfile.glob(GCS_PATH + '\/test*.tfrec')))","bcffae42":"if DEVICE == \"TPU\":\n    print(\"connecting to TPU...\")\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        print('Running on TPU ', tpu.master())\n    except ValueError:\n        print(\"Could not connect to TPU\")\n        tpu = None\n\n    if tpu:\n        try:\n            print(\"initializing  TPU ...\")\n            tf.config.experimental_connect_to_cluster(tpu)\n            tf.tpu.experimental.initialize_tpu_system(tpu)\n            strategy = tf.distribute.experimental.TPUStrategy(tpu)\n            print(\"TPU initialized\")\n        except _:\n            print(\"failed to initialize TPU\")\n    else:\n        DEVICE = \"GPU\"\n\nif DEVICE != \"TPU\":\n    print(\"Using default strategy for CPU and single GPU\")\n    strategy = tf.distribute.get_strategy()\n\nif DEVICE == \"GPU\":\n    print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\n    \n\nAUTO     = tf.data.experimental.AUTOTUNE\nREPLICAS = strategy.num_replicas_in_sync\nprint(f'REPLICAS: {REPLICAS}')","f5c99eca":"def get_mat(rotation, shear, height_zoom, width_zoom, height_shift, width_shift):\n    # returns 3x3 transformmatrix which transforms indicies\n        \n    # CONVERT DEGREES TO RADIANS\n    rotation = math.pi * rotation \/ 180.\n    shear    = math.pi * shear    \/ 180.\n\n    def get_3x3_mat(lst):\n        return tf.reshape(tf.concat([lst],axis=0), [3,3])\n    \n    # ROTATION MATRIX\n    c1   = tf.math.cos(rotation)\n    s1   = tf.math.sin(rotation)\n    one  = tf.constant([1],dtype='float32')\n    zero = tf.constant([0],dtype='float32')\n    \n    rotation_matrix = get_3x3_mat([c1,   s1,   zero, \n                                   -s1,  c1,   zero, \n                                   zero, zero, one])    \n    # SHEAR MATRIX\n    c2 = tf.math.cos(shear)\n    s2 = tf.math.sin(shear)    \n    \n    shear_matrix = get_3x3_mat([one,  s2,   zero, \n                                zero, c2,   zero, \n                                zero, zero, one])        \n    # ZOOM MATRIX\n    zoom_matrix = get_3x3_mat([one\/height_zoom, zero,           zero, \n                               zero,            one\/width_zoom, zero, \n                               zero,            zero,           one])    \n    # SHIFT MATRIX\n    shift_matrix = get_3x3_mat([one,  zero, height_shift, \n                                zero, one,  width_shift, \n                                zero, zero, one])\n    \n    return K.dot(K.dot(rotation_matrix, shear_matrix), \n                 K.dot(zoom_matrix,     shift_matrix))\n\n\ndef transform(image, cfg):    \n    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n    # output - image randomly rotated, sheared, zoomed, and shifted\n    DIM = cfg[\"read_size\"]\n    XDIM = DIM%2 #fix for size 331\n    \n    rot = cfg['rot'] * tf.random.normal([1], dtype='float32')\n    shr = cfg['shr'] * tf.random.normal([1], dtype='float32') \n    h_zoom = 1.0 + tf.random.normal([1], dtype='float32') \/ cfg['hzoom']\n    w_zoom = 1.0 + tf.random.normal([1], dtype='float32') \/ cfg['wzoom']\n    h_shift = cfg['hshift'] * tf.random.normal([1], dtype='float32') \n    w_shift = cfg['wshift'] * tf.random.normal([1], dtype='float32') \n\n    # GET TRANSFORMATION MATRIX\n    m = get_mat(rot,shr,h_zoom,w_zoom,h_shift,w_shift) \n\n    # LIST DESTINATION PIXEL INDICES\n    x   = tf.repeat(tf.range(DIM\/\/2, -DIM\/\/2,-1), DIM)\n    y   = tf.tile(tf.range(-DIM\/\/2, DIM\/\/2), [DIM])\n    z   = tf.ones([DIM*DIM], dtype='int32')\n    idx = tf.stack( [x,y,z] )\n    \n    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n    idx2 = K.dot(m, tf.cast(idx, dtype='float32'))\n    idx2 = K.cast(idx2, dtype='int32')\n    idx2 = K.clip(idx2, -DIM\/\/2+XDIM+1, DIM\/\/2)\n    \n    # FIND ORIGIN PIXEL VALUES           \n    idx3 = tf.stack([DIM\/\/2-idx2[0,], DIM\/\/2-1+idx2[1,]])\n    d    = tf.gather_nd(image, tf.transpose(idx3))\n        \n    return tf.reshape(d,[DIM, DIM,3])","b4ec9cc3":"def read_labeled_tfrecord(example):\n    tfrec_format = {\n        'image'                        : tf.io.FixedLenFeature([], tf.string),\n        'image_name'                   : tf.io.FixedLenFeature([], tf.string),\n        'patient_id'                   : tf.io.FixedLenFeature([], tf.int64),\n        'sex'                          : tf.io.FixedLenFeature([], tf.int64),\n        'age_approx'                   : tf.io.FixedLenFeature([], tf.int64),\n        'anatom_site_general_challenge': tf.io.FixedLenFeature([], tf.int64),\n        'diagnosis'                    : tf.io.FixedLenFeature([], tf.int64),\n        'target'                       : tf.io.FixedLenFeature([], tf.int64)\n    }           \n    example = tf.io.parse_single_example(example, tfrec_format)\n    return example['image'], example['target']\n\n\ndef read_unlabeled_tfrecord(example, return_image_name):\n    tfrec_format = {\n        'image'                        : tf.io.FixedLenFeature([], tf.string),\n        'image_name'                   : tf.io.FixedLenFeature([], tf.string),\n    }\n    example = tf.io.parse_single_example(example, tfrec_format)\n    return example['image'], example['image_name'] if return_image_name else 0\n\n \ndef prepare_image(img, cfg=None, augment=True):    \n    img = tf.image.decode_jpeg(img, channels=3)\n    img = tf.image.resize(img, [cfg['read_size'], cfg['read_size']])\n    img = tf.cast(img, tf.float32) \/ 255.0\n    \n    if augment:\n        img = transform(img, cfg)\n        img = tf.image.random_crop(img, [cfg['crop_size'], cfg['crop_size'], 3])\n        img = tf.image.random_flip_left_right(img)\n        #img = tf.image.random_hue(img, 0.01)\n        img = tf.image.random_saturation(img, 0.7, 1.3)\n        img = tf.image.random_contrast(img, 0.8, 1.2)\n        img = tf.image.random_brightness(img, 0.1)\n\n    else:\n        img = tf.image.central_crop(img, cfg['crop_size'] \/ cfg['read_size'])\n                                   \n    img = tf.image.resize(img, [cfg['net_size'], cfg['net_size']])\n    img = tf.reshape(img, [cfg['net_size'], cfg['net_size'], 3])\n    return img\n\ndef count_data_items(filenames):\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) \n         for filename in filenames]\n    return np.sum(n)","67476fa5":"def get_dataset(files, cfg, augment = False, shuffle = False, repeat = False, \n                labeled=True, return_image_names=True):\n    \n    ds = tf.data.TFRecordDataset(files, num_parallel_reads=AUTO)\n    ds = ds.cache()\n    \n    if repeat:\n        ds = ds.repeat()\n    \n    if shuffle: \n        ds = ds.shuffle(1024*8)\n        opt = tf.data.Options()\n        opt.experimental_deterministic = False\n        ds = ds.with_options(opt)\n        \n    if labeled: \n        ds = ds.map(read_labeled_tfrecord, num_parallel_calls=AUTO)\n    else:\n        ds = ds.map(lambda example: read_unlabeled_tfrecord(example, return_image_names), \n                    num_parallel_calls=AUTO)      \n    \n    ds = ds.map(lambda img, imgname_or_label: (prepare_image(img, augment=augment, cfg=cfg), \n                                               imgname_or_label), \n                num_parallel_calls=AUTO)\n    \n    ds = ds.batch(cfg['batch_size'] * REPLICAS)\n    ds = ds.prefetch(AUTO)\n    return ds","83352f8d":"def show_dataset(thumb_size, cols, rows, ds):\n    mosaic = PIL.Image.new(mode='RGB', size=(thumb_size*cols + (cols-1), \n                                             thumb_size*rows + (rows-1)))\n   \n    for idx, data in enumerate(iter(ds)):\n        img, target_or_imgid = data\n        ix  = idx % cols\n        iy  = idx \/\/ cols\n        img = np.clip(img.numpy() * 255, 0, 255).astype(np.uint8)\n        img = PIL.Image.fromarray(img)\n        img = img.resize((thumb_size, thumb_size), resample=PIL.Image.BILINEAR)\n        mosaic.paste(img, (ix*thumb_size + ix, \n                           iy*thumb_size + iy))\n\n    display(mosaic)\n    \nds = get_dataset(files_train, CFG).unbatch().take(12*5)   \nshow_dataset(64, 12, 5, ds)","ad62b305":"ds = tf.data.TFRecordDataset(files_train, num_parallel_reads=AUTO)\nds = ds.take(1).cache().repeat()\nds = ds.map(read_labeled_tfrecord, num_parallel_calls=AUTO)\nds = ds.map(lambda img, target: (prepare_image(img, cfg=CFG, augment=True), target), \n            num_parallel_calls=AUTO)\nds = ds.take(12*5)\nds = ds.prefetch(AUTO)\n\nshow_dataset(64, 12, 5, ds)","558b7281":"ds = get_dataset(files_test, CFG, labeled=False).unbatch().take(12*5)   \nshow_dataset(64, 12, 5, ds)","cfb2ce67":"def get_lr_callback(cfg):\n    lr_start   = cfg['LR_START']\n    lr_max     = cfg['LR_MAX'] * strategy.num_replicas_in_sync\n    lr_min     = cfg['LR_MIN']\n    lr_ramp_ep = cfg['LR_RAMPUP_EPOCHS']\n    lr_sus_ep  = cfg['LR_SUSTAIN_EPOCHS']\n    lr_decay   = cfg['LR_EXP_DECAY']\n   \n    def lrfn(epoch):\n        if epoch < lr_ramp_ep:\n            lr = (lr_max - lr_start) \/ lr_ramp_ep * epoch + lr_start\n            \n        elif epoch < lr_ramp_ep + lr_sus_ep:\n            lr = lr_max\n            \n        else:\n            lr = (lr_max - lr_min) * lr_decay**(epoch - lr_ramp_ep - lr_sus_ep) + lr_min\n            \n        return lr\n\n    lr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=False)\n    return lr_callback","f234b560":"def get_model(cfg):\n    model_input = tf.keras.Input(shape=(cfg['net_size'], cfg['net_size'], 3), name='imgIn')\n\n    dummy = tf.keras.layers.Lambda(lambda x:x)(model_input)\n    \n    outputs = []    \n    for i in range(4,8):\n        constructor = getattr(efn, f'EfficientNetB{i}')\n        \n        x = constructor(include_top=False, weights='noisy-student', \n                        input_shape=(cfg['net_size'], cfg['net_size'], 3), \n                        pooling='avg')(dummy)\n        \n        x = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n        outputs.append(x)\n        \n    model = tf.keras.Model(model_input, outputs, name='aNetwork')\n    model.summary()\n    return model","4e414e5e":"def compile_new_model(cfg):    \n    with strategy.scope():\n        model = get_model(cfg)\n     \n        losses = [tf.keras.losses.BinaryCrossentropy(label_smoothing = cfg['label_smooth_fac'])\n                  for i in range(4,8)]\n        \n        model.compile(\n            optimizer = cfg['optimizer'],\n            loss      = losses,\n            metrics   = [tf.keras.metrics.AUC(name='auc')])\n        \n    return model","456d5159":"len(files_train)","88040ac3":"mc = ModelCheckpoint('best_model7.h5', monitor = 'train_auc' , mode = 'max', verbose = 1 , save_best_only = True)","6c755069":"\nds_train     = get_dataset(files_train, CFG, augment=True, shuffle=True, repeat=True)\nds_train     = ds_train.map(lambda img, label: (img, tuple([label] * CFG['net_count'])))\n\nsteps_train  = count_data_items(files_train) \/ (CFG['batch_size'] * REPLICAS)\n\nmodel        = compile_new_model(CFG)\nhistory      = model.fit(ds_train, \n                         verbose          = 1,\n                         steps_per_epoch  = steps_train, \n                         epochs           = CFG['epochs'],\n                         callbacks        = [get_lr_callback(CFG), mc])","ab24dd60":"with strategy.scope():\n    model = tf.keras.Sequential([\n        InceptionResNetV2(\n            input_shape=(CFG['net_size'], CFG['net_size'], 3),\n            weights='imagenet',\n            include_top=False\n        ),\n        L.GlobalMaxPooling2D(),\n        L.Dense(1, activation='sigmoid')\n        # SoftProbField()\n    ])\n    losses = tf.keras.losses.BinaryCrossentropy(label_smoothing = CFG['label_smooth_fac'])\n    model.compile(\n            optimizer = CFG['optimizer'],\n            loss      = losses,\n            metrics   = [tf.keras.metrics.AUC(name='auc')])\n        \n    model.summary()","d4c0771f":"mc = ModelCheckpoint('best_model.h5', monitor = 'train_auc' , mode = 'max', verbose = 1 , save_best_only = True)","99616c0b":"ds_train     = get_dataset(files_train, CFG, augment=True, shuffle=True, repeat=True)\nsteps_train  = count_data_items(files_train) \/ (CFG['batch_size'] * REPLICAS)\n\nhistory      = model.fit(ds_train, \n                         verbose          = 1,\n                         steps_per_epoch  = steps_train, \n                         epochs           = CFG['epochs'],\n        \n                         callbacks        = [get_lr_callback(CFG),mc])","872546c2":"model.save_weights('inception.h5')\n","b156374d":"import os\nos.chdir(r'\/kaggle\/working')\nfrom IPython.display import FileLink\nFileLink(r'inception.h5')","bf88d346":"with strategy.scope():\n    model2 = tf.keras.Sequential([\n        efn.EfficientNetB7(\n            input_shape=(CFG['net_size'], CFG['net_size'], 3),\n            weights='noisy-student',\n            include_top=False\n        ),\n         L.GlobalMaxPooling2D(),\n        L.Dense(1, activation='sigmoid')\n    ])\n    losses = tf.keras.losses.BinaryCrossentropy(label_smoothing = CFG['label_smooth_fac'])\n    model2.compile(\n            optimizer = CFG['optimizer'],\n            loss      = losses,\n            metrics   = [tf.keras.metrics.AUC(name='auc')])\n        \n    model2.summary()","6445a7be":"mc = ModelCheckpoint('best_model2.h5', monitor = 'train_auc' , mode = 'max', verbose = 1 , save_best_only = True)","92227347":"ds_train     = get_dataset(files_train, CFG, augment=True, shuffle=True, repeat=True)\n\nsteps_train  = count_data_items(files_train) \/ (CFG['batch_size'] * REPLICAS)\nhistory      = model2.fit(ds_train, \n                         verbose          = 1,\n                         steps_per_epoch  = steps_train, \n                         epochs           = CFG['epochs'],\n                         \n                         callbacks        = [get_lr_callback(CFG),mc])","bd1a320b":"CFG['batch_size'] = 256\n\ncnt_test   = count_data_items(files_test)\nsteps      = cnt_test \/ (CFG['batch_size'] * REPLICAS) * CFG['tta_steps']\nds_testAug = get_dataset(files_test, CFG, augment=True, repeat=True, \n                         labeled=False, return_image_names=False)\n\nprobs = model2.predict(ds_testAug, verbose=1, steps=steps)\n\nprobs = np.stack(probs)\nprobs = probs[:,:cnt_test * CFG['tta_steps']]\nprobs = np.stack(np.split(probs, CFG['tta_steps'], axis=1), axis=1)\nprobs = np.mean(probs, axis=1)","54db7a28":"with strategy.scope():\n    model3 = tf.keras.Sequential([\n        Xception(input_shape=(CFG['net_size'], CFG['net_size'], 3),\n                 weights='imagenet', include_top=False),\n         L.GlobalMaxPooling2D(),\n        L.Dense(1, activation='sigmoid')\n    ])\n    losses = tf.keras.losses.BinaryCrossentropy(label_smoothing = CFG['label_smooth_fac'])\n    model3.compile(\n            optimizer = CFG['optimizer'],\n            loss      = losses,\n            metrics   = [tf.keras.metrics.AUC(name='auc')])\n        \n    model3.summary()","5d5566f7":"mc = ModelCheckpoint('best_model3.h5', monitor = 'val_auc' , mode = 'max', verbose = 1 , save_best_only = True)","a2e13f89":"history      = model3.fit(ds_train, \n                         verbose          = 1,\n                         steps_per_epoch  = steps_train, \n                         epochs           = CFG['epochs'],\n                         validation_data = ds_valid,\n                          validation_steps= validation_step,\n                         callbacks        = [get_lr_callback(CFG),mc])","096837ae":"with strategy.scope():\n    model4 = tf.keras.Sequential([\n        efn.EfficientNetB6(\n            input_shape=(CFG['net_size'], CFG['net_size'], 3),\n            weights='noisy-student',\n            include_top=False\n        ),\n         L.GlobalMaxPooling2D(),\n        L.Dense(1, activation='sigmoid')\n    ])\n    losses = tf.keras.losses.BinaryCrossentropy(label_smoothing = CFG['label_smooth_fac'])\n    model4.compile(\n            optimizer = CFG['optimizer'],\n            loss      = losses,\n            metrics   = [tf.keras.metrics.AUC(name='auc')])\n        \n    model4.summary()","3d78b393":"mc = ModelCheckpoint('best_model4.h5', monitor = 'val_auc' , mode = 'max', verbose = 1 , save_best_only = True)","6b2e6c0a":"history      = model4.fit(ds_train, \n                         verbose          = 1,\n                         steps_per_epoch  = steps_train, \n                         epochs           = CFG['epochs'],\n                         callbacks        = [get_lr_callback(CFG),mc])","d33d3132":"with strategy.scope():\n    model5 = tf.keras.Sequential([\n        ResNet152V2(\n            input_shape=(CFG['net_size'], CFG['net_size'], 3),\n            weights='imagenet',\n            include_top=False\n        ),\n         L.GlobalMaxPooling2D(),\n        L.Dense(1, activation='sigmoid')\n    ])\n    losses = tf.keras.losses.BinaryCrossentropy(label_smoothing = CFG['label_smooth_fac'])\n    model5.compile(\n            optimizer = CFG['optimizer'],\n            loss      = losses,\n            metrics   = [tf.keras.metrics.AUC(name='auc')])\n        \n    model5.summary()\n","ce3e1b71":"rdc = ReduceLROnPlateau(monitor='val_auc', factor=0.3, patience=2, verbose=1, mode='max')\nmc = ModelCheckpoint('best_model6.h5', monitor = 'val_auc' , mode = 'max', verbose = 1 , save_best_only = True)","603e6774":"history      = model5.fit(ds_train, \n                         verbose          = 1,\n                         steps_per_epoch  = steps_train, \n                         epochs           = 5,#CFG['epochs'],\n                         validation_data = ds_valid,\n                          validation_steps= validation_step,\n                         callbacks        = [get_lr_callback(CFG),mc])","59925301":"with strategy.scope():\n    model6 = tf.keras.Sequential([\n        DenseNet201(\n            input_shape=(CFG['net_size'], CFG['net_size'], 3),\n            weights='imagenet',\n            include_top=False\n        ),\n         L.GlobalMaxPooling2D(),\n        L.Dense(1, activation='sigmoid')\n    ])\n    losses = tf.keras.losses.BinaryCrossentropy(label_smoothing = CFG['label_smooth_fac'])\n    model6.compile(\n            optimizer = CFG['optimizer'],\n            loss      = losses,\n            metrics   = [tf.keras.metrics.AUC(name='auc')])\n        \n    model6.summary()\n","70ee75c6":"rdc = ReduceLROnPlateau(monitor='val_auc', factor=0.3, patience=2, verbose=1, mode='max')\nmc = ModelCheckpoint('best_model5.h5', monitor = 'val_auc' , mode = 'max', verbose = 1 , save_best_only = True)","aa0b1e34":"history      = model6.fit(ds_train, \n                         verbose          = 1,\n                         steps_per_epoch  = steps_train, \n                         epochs           = CFG['epochs'],\n                         validation_data = ds_valid,\n                          validation_steps= validation_step,\n                         callbacks        = [get_lr_callback(CFG),mc,rdc])","b4bc710c":"!mv *.h5 '\/content\/drive\/My Drive\/dataset\/'","0d128e0c":"ds = get_dataset(files_valid, CFG, augment=False, repeat=False, \n                 labeled=True, return_image_names=True)\n\nlabel_valid = np.array([img_name.numpy()\n                        for img, img_name in iter(ds.unbatch())])","80489870":"model2.load_weights('\/content\/drive\/My Drive\/dataset\/best_model2.h5')\nmodel6.load_weights('\/content\/drive\/My Drive\/dataset\/best_model5.h5')","ac05414a":"model.load_weights('\/content\/drive\/My Drive\/dataset\/best_model.h5')\nmodel3.load_weights('\/content\/drive\/My Drive\/dataset\/best_model3.h5')\nmodel4.load_weights('\/content\/drive\/My Drive\/dataset\/best_model4.h5')\nmodel5.load_weights('\/content\/drive\/My Drive\/dataset\/best_model6.h5')\n","b957053b":"label =  model.predict(ds, verbose=1,  steps  = validation_step)\nlabel2 = model2.predict(ds, verbose=1, steps  = validation_step)\nlabel3 = model3.predict(ds, verbose=1, steps  = validation_step)\nlabel4 = model4.predict(ds, verbose=1, steps  = validation_step)\nlabel5 = model5.predict(ds, verbose=1, steps  = validation_step)\nlabel6 = model6.predict(ds, verbose=1, steps  = validation_step)","b5b45d2c":"cnt_test   = count_data_items(files_valid)\nprobs = np.concatenate(( label2, label6), axis=1)\nprobs = np.stack(probs)\nprobs = probs[:,:cnt_test * CFG['tta_steps']]\nprobs = np.mean(probs, axis=1)","c4f29f76":"probs.shape","af1f5975":"roc_auc_score( np.array(probs)>0.5, label_valid)","5183f236":"plt.hist(label_valid)","3ee61468":"CFG['batch_size'] = 256\n\ncnt_test   = count_data_items(files_test)\nsteps      = cnt_test \/ (CFG['batch_size'] * REPLICAS) * CFG['tta_steps']\nds_testAug = get_dataset(files_test, CFG, augment=False, repeat=False, \n                         labeled=False, return_image_names=False)\n\n#prob1 = model2.predict(ds_testAug, verbose=1, steps=steps)\nprob2 = model6.predict(ds_testAug, verbose=1, steps=steps)","4c443439":"probs = np.stack(prob2)\n\nprobs = prob2[:,:cnt_test * CFG['tta_steps']]\nprobs = probs.squeeze()\nprobs = np.stack(np.split(probs, CFG['tta_steps']))\nprobs = np.mean(probs, axis=1)","4e3210c8":"prob2.shape, len(image_names), probs.squeeze().shape","0e8b3792":"(276480\/(cnt_test*CFG['tta_steps']))","5f1f974c":"x = np.arange(9.0)\nx.shape\nnp.split(x, 3)","33a84f55":"ds = get_dataset(files_test, CFG, augment=False, repeat=False, \n                 labeled=False, return_image_names=True)\n\nimage_names = np.array([img_name.numpy().decode(\"utf-8\") \n                        for img, img_name in iter(ds.unbatch())])","b5795c7d":"submission = pd.DataFrame(dict(\n    image_name = image_names,\n    target     = prob2))\n\nsubmission = submission.sort_values('image_name') \nsubmission.to_csv('submission_models_blended.csv', index=False)","19541fd2":"np.mean(probs[:,:,0], axis=0)","35228ba4":"# VALIDATION","91a9a483":"## RESNET152V2","67e432a8":"## XCEPTION","28eefd94":"## EFFICIENTNET 4-7","dfed9701":"## Test the input pipeline\nBefore calling any neural net I always test the input pipeline.\nHere are images from the train data.","e13566fc":"## EFFICIENT B7 MODEL","3c42e98e":"# IMPORT LIB","bfbc3c4d":"Fork from Incredible TPUs - finetune EffNetB0-B6 at once. \nThanks @AgentAuers very much!","ce85b3f5":"## Test of image augmentation","7472877a":"# MODEL ARCHITECTURE","9a935341":"### write a submission file using the mean of all submodels","3d949ae4":"# PREDICT TO DATASET","f7fc78d9":"### sort predictions to have the same order as the submission\nThe submission ist sorted by image_name, but the dataset yielded a different order.\nTraverse the test dataset once again and capture the image_names. Then join this list of image_names with the predictions and sort by image_name.","12b83cab":"## Images from the test data","336bbe01":"## DENSENET201\n\n","5bef9851":"## EFICIENTNET B6","878b50e8":"## INCEPTIONRESNETV2","2946e691":"### predict the test set using augmented images"}}