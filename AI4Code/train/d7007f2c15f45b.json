{"cell_type":{"148142f0":"code","c58a64f4":"code","d531d22d":"code","7ddb0706":"code","3a15dbe8":"code","4e6bf110":"code","17d3b0e3":"code","3853c45b":"code","589525d2":"code","865ce8cb":"code","fed4dc7c":"code","78dc601c":"code","748e3cc9":"code","01fb3c29":"code","d1d3a1db":"code","0dd263a7":"markdown","abc6c268":"markdown","fe058d17":"markdown","49437e1b":"markdown","f290e605":"markdown","6ec0a37c":"markdown","c6c82782":"markdown","510e8093":"markdown","334bf7fa":"markdown","a2ab62a7":"markdown","ecd7aee4":"markdown","98fb6d86":"markdown","dc4c3c2a":"markdown","351b5c10":"markdown","35e096d6":"markdown"},"source":{"148142f0":"import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score","c58a64f4":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","d531d22d":"# 1. delete insignificant feature\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)\n\n# 2. check null and fill new data\ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\n# 3.one hot encoding \nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)","7ddb0706":"y = train['Survived']\nX = train.drop(['Survived'], axis=1)\nX_test = test\nRANDOM_SEED = 2021\n\nX_Train, X_Val, Y_Train, Y_Val = train_test_split(X, y, test_size = 0.25,random_state = RANDOM_SEED )","3a15dbe8":"model = RandomForestClassifier(random_state= RANDOM_SEED).fit(X_Train,Y_Train)\nmodel","4e6bf110":"predictionforest = model.predict(X_Val)\npredictionforest","17d3b0e3":"print(confusion_matrix(Y_Val,predictionforest))","3853c45b":"print(classification_report(Y_Val,predictionforest,target_names=['Died', 'Survived']))","589525d2":"acc1 = accuracy_score(Y_Val,predictionforest)\nacc1","865ce8cb":"model = RandomForestClassifier(n_estimators=100, random_state= RANDOM_SEED).fit(X_Train,Y_Train)\n","fed4dc7c":"predictionforest = model.predict(X_Val)","78dc601c":"print(confusion_matrix(Y_Val,predictionforest))\n","748e3cc9":"print(classification_report(Y_Val,predictionforest,target_names=['Died', 'Survived']))","01fb3c29":"acc2 = accuracy_score(Y_Val,predictionforest)\nacc2","d1d3a1db":"submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\nsubmission.Survived = model.predict(X_test)\nsubmission.to_csv(\"submission.csv\",index=False)","0dd263a7":"# import basic libraray ","abc6c268":"# predict and submit","fe058d17":"# confustion matrix ","49437e1b":"# predict validation set ","f290e605":"# preprocessing","6ec0a37c":"# load data","c6c82782":"# #2.Search best model using RandomForestClassifier (add n_estimator param) ","510e8093":"# predict validation set ","334bf7fa":"# #1.Search best model using RandomForestClassifier (Default)","a2ab62a7":"# split train and valid set ","ecd7aee4":"# accuracy score","98fb6d86":"# accuracy score","dc4c3c2a":"# classification report ","351b5c10":"# classification report","35e096d6":"# confustion matrix"}}