{"cell_type":{"5a6bf8cd":"code","e02e229a":"code","eb3a4d37":"code","69db23f9":"code","2faf8476":"code","0a885566":"code","656cb0da":"code","5e00a45d":"code","980cf8ac":"code","9a0f2af8":"code","e5d7b259":"code","7989e19b":"code","3918defc":"code","cedfd370":"code","a3603c23":"code","3f2c3f40":"code","d2af5732":"code","ec0a95ad":"code","2783f28c":"code","c4728ce2":"code","cd9dadd5":"code","4edf3a4c":"code","08d70702":"code","0d2ae2f9":"code","1535db52":"code","64344c7b":"code","881b4041":"code","edcbf452":"code","f229e340":"code","f8ab929e":"markdown","e4759637":"markdown","d52659c8":"markdown","1db55aae":"markdown","c06d1271":"markdown","e99b1c57":"markdown","17272838":"markdown","fe8808e3":"markdown","a24442ea":"markdown","e4566339":"markdown"},"source":{"5a6bf8cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport joblib\nimport numpy as np\nimport pandas as pd\nimport warnings\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker\nimport seaborn as sns\n\n# setting up options\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\nwarnings.filterwarnings('ignore')\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e02e229a":"# Import data\ndf_data = pd.read_csv('\/kaggle\/input\/customer-retention\/data.csv')\ndf_model = df_data.copy()\ndf_model.head()","eb3a4d37":"df_model.describe()","69db23f9":"df_model.describe(include=np.object)","2faf8476":"cat_features = [col for col in df_model.columns if df_model[col].dtype == 'object']\nfor c in cat_features:\n    print('----')\n    print(df_model[c].value_counts())","0a885566":"plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(6, 6), facecolor='#f6f5f5')\ngs = fig.add_gridspec(3, 3)\ngs.update(wspace=0.3, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette(['#99d6e6']*3)\n\nrun_no = 0\nfor row in range(0, 1):\n    for col in range(0, 3):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nax0.text(-0.5, 55, 'Categorical Variable Distribution', fontsize=6, fontweight='bold')\n# ax0.text(-0.5, 60, 'features_25 - features_49', fontsize=6, fontweight='light')        \n\nrun_no = 0\nfor col in cat_features:\n    temp_df = pd.DataFrame(df_model[col].value_counts())\n    temp_df = temp_df.reset_index(drop=False)\n    temp_df.columns = ['Number', 'Count']\n    sns.barplot(ax=locals()[\"ax\"+str(run_no)],x=temp_df['Number'], y=temp_df['Count']\/len(df_model)*100, zorder=2, linewidth=0, alpha=1, saturation=1)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel('')\n    locals()[\"ax\"+str(run_no)].set_xlabel(col, fontsize=4, fontweight='bold')\n    locals()[\"ax\"+str(run_no)].tick_params(labelsize=4, width=0.5, length=1.5)\n    locals()[\"ax\"+str(run_no)].yaxis.set_major_formatter(ticker.PercentFormatter())\n    # data label\n    for p in locals()[\"ax\"+str(run_no)].patches:\n        percentage = f'{p.get_height():.1f}%\\n'\n        x = p.get_x() + p.get_width() \/ 2\n        y = p.get_height()\n        locals()[\"ax\"+str(run_no)].text(x, y, percentage, ha='center', va='center', fontsize=4)\n\n    run_no += 1\n\nplt.show()","656cb0da":"# Rename target column\ndf_model = df_model.rename(columns={'conversion': 'target'})\n# Rename & Label encode treatment column\ndf_model = df_model.rename(columns={'offer': 'treatment'})\ndf_model.treatment = df_model.treatment.map({'No Offer': 0, 'Buy One Get One': -1, 'Discount': 1})","5e00a45d":"df_model.treatment.value_counts()","980cf8ac":"df_model.target.value_counts()","9a0f2af8":"df_model.head()","e5d7b259":"df_model = pd.get_dummies(df_model)\ndf_model.head()","7989e19b":"df_model.mean()","3918defc":"df_model_bogo = df_model[df_model.treatment <= 0] # include no offer, bogo\ndf_model_discount = df_model[df_model.treatment >= 0] # include no offer, discount","cedfd370":"temp_df = df_model_bogo.mean()\ntemp_df = temp_df.reset_index(drop=False)\ntemp_df.columns = ['Features', 'Mean']\ntemp_df = temp_df.iloc[2:,:]\n#temp_df = temp_df.sort_values('Mean', ascending=False)\n\nplt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(5, 1.5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0.4, hspace=0.1)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette(['#ffa600']*11)\n\nax = fig.add_subplot(gs[0, 0])\nfor s in [\"right\", \"top\"]:\n    ax.spines[s].set_visible(False)\nax.set_facecolor(background_color)\nax_sns = sns.barplot(ax=ax, x=temp_df['Features'], \n                      y=temp_df['Mean'], \n                      zorder=2, linewidth=0, alpha=1, saturation=1)\nax_sns.set_xlabel(\"Features\",fontsize=4, weight='bold')\nax_sns.set_ylabel(\"Mean\",fontsize=4, weight='bold')\nax_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax_sns.tick_params(labelsize=2.5, width=0.5, length=1.5)\nax.text(-0.5, 0.9, 'Mean Values - BOGO Treatment', fontsize=6, ha='left', va='top', weight='bold')\nax.text(-0.5, 0.8, 'Each feature get value of 0 (No) and 1 (yes) => Mean is the % of Yes', fontsize=4, ha='left', va='top')\n# data label\nfor p in ax.patches:\n    percentage = f'{p.get_height():.1f}' ##{:. 0%}\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height() + 0.05\n    ax.text(x, y, percentage, ha='center', va='center', fontsize=3,\n           bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\n\nplt.show()","a3603c23":"temp_df = df_model_discount.mean()\ntemp_df = temp_df.reset_index(drop=False)\ntemp_df.columns = ['Features', 'Mean']\ntemp_df = temp_df.iloc[2:,:]\n#temp_df = temp_df.sort_values('Mean', ascending=False)\n\nplt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(5, 1.5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0.4, hspace=0.1)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette(['#ff6361']*11)\n\nax = fig.add_subplot(gs[0, 0])\nfor s in [\"right\", \"top\"]:\n    ax.spines[s].set_visible(False)\nax.set_facecolor(background_color)\nax_sns = sns.barplot(ax=ax, x=temp_df['Features'], \n                      y=temp_df['Mean'], \n                      zorder=2, linewidth=0, alpha=1, saturation=1)\nax_sns.set_xlabel(\"Features\",fontsize=4, weight='bold')\nax_sns.set_ylabel(\"Mean\",fontsize=4, weight='bold')\nax_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax_sns.tick_params(labelsize=2.5, width=0.5, length=1.5)\nax.text(-0.5, 0.8, 'Mean Values - Discount Treatment', fontsize=6, ha='left', va='top', weight='bold')\nax.text(-0.5, 0.7, 'Each feature get value of 0 (No) and 1 (yes) => Mean is the % of Yes', fontsize=4, ha='left', va='top')\n# data label\nfor p in ax.patches:\n    percentage = f'{p.get_height():.1f}' ##{:. 0%}\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_height() + 0.05\n    ax.text(x, y, percentage, ha='center', va='center', fontsize=3,\n           bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\n\nplt.show()","3f2c3f40":"def declare_tc(df:pd.DataFrame):\n    df['target_class'] = 0 # CN\n    df.loc[(df.treatment == 0) & (df.target != 0),'target_class'] = 1 # CR\n    df.loc[(df.treatment != 0) & (df.target == 0),'target_class'] = 2 # TN\n    df.loc[(df.treatment != 0) & (df.target != 0),'target_class'] = 3 # TR\n    return df","d2af5732":"df_model_bogo = declare_tc(df_model_bogo)\ndf_model_discount = declare_tc(df_model_discount)","ec0a95ad":"df_model_bogo['target_class'].value_counts()","2783f28c":"# Functions for Uplift\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\ndef uplift_split(df_model:pd.DataFrame):\n    ## 1 - Train-Test Split\n    X = df_model.drop(['target','target_class'],axis=1)\n    y = df_model.target_class\n    X_train, X_test, y_train, y_test  = train_test_split(X, y,\n                                       test_size=0.3,\n                                       random_state=42,\n                                       stratify=df_model['treatment'])\n    return X_train,X_test, y_train, y_test\n\n\ndef uplift_model(X_train:pd.DataFrame,\n                 X_test:pd.DataFrame,\n                 y_train:pd.DataFrame,\n                 y_test:pd.DataFrame):\n    ## 2 - Using XGB to get the uplift score\n    # Create new dataframe\n    result = pd.DataFrame(X_test).copy()    \n    # Fit the model\n    uplift_model = xgb.XGBClassifier().fit(X_train.drop('treatment', axis=1), y_train)\n    \n    \n    # Predict using test-data\n    uplift_proba = uplift_model.predict_proba(X_test.drop('treatment', axis=1))\n    result['proba_CN'] = uplift_proba[:,0] \n    result['proba_CR'] = uplift_proba[:,1] \n    result['proba_TN'] = uplift_proba[:,2] \n    result['proba_TR'] = uplift_proba[:,3]\n    result['uplift_score'] = result.eval('\\\n    proba_CN\/(proba_CN+proba_CR) \\\n    + proba_TR\/(proba_TN+proba_TR) \\\n    - proba_TN\/(proba_TN+proba_TR) \\\n    - proba_CR\/(proba_CN+proba_CR)')  \n    # Put the result \n    result['target_class'] = y_test\n    return result\n\n\ndef uplift(df_model:pd.DataFrame):\n    # Combine the split and Modeling function\n    X_train, X_test, y_train, y_test = uplift_split(df_model)\n    result = uplift_model(X_train, X_test, y_train, y_test)\n    return result","c4728ce2":"# Run the uplift function\nbogo_uplift = uplift(df_model_bogo)\ndiscount_uplift = uplift(df_model_discount)","cd9dadd5":"bogo_uplift.head()","4edf3a4c":"seg_df = df_data.merge(bogo_uplift.iloc[:,-6:], left_index=True, right_index=True)\nseg_df['target'] = 0\nseg_df['target'][seg_df.offer != 'No Offer'] = 1","08d70702":"seg_df.groupby('zip_code').mean()[['target','uplift_score']]","0d2ae2f9":"seg_df.groupby('channel').mean()[['target','uplift_score']]","1535db52":"seg_df.groupby('used_discount').mean()[['target','uplift_score']]","64344c7b":"seg_df.groupby('used_bogo').mean()[['target','uplift_score']]","881b4041":"# Functions to build the Uplift model and visualize the QINI Curve\ndef qini_rank(uplift:pd.DataFrame):\n    \"\"\"Rank the data by the uplift score\n    \"\"\"\n    # Creat new dataframe\n    ranked = pd.DataFrame({'n':[], 'target_class':[]})\n    ranked['target_class'] = uplift['target_class']\n    ranked['uplift_score'] = uplift['uplift_score']\n    \n    \n    # Add proportion\n    ranked['n'] = ranked.uplift_score.rank(pct=True, ascending=False)\n    # Data Ranking   \n    ranked = ranked.sort_values(by='n').reset_index(drop=True)\n    return ranked\n\n\ndef qini_eval(ranked:pd.DataFrame):\n    \"\"\"Evaluate the uplift value with the QINI criterion\n    \"\"\"\n    uplift_model, random_model = ranked.copy(), ranked.copy()\n    # Using Treatment and Control Group to calculate the uplift (Incremental gain)\n    C, T = sum(ranked['target_class'] <= 1), sum(ranked['target_class'] >= 2)\n    ranked['cr'] = 0\n    ranked['tr'] = 0\n    ranked.loc[ranked.target_class == 1,'cr'] = 1\n    ranked.loc[ranked.target_class == 3,'tr'] = 1\n    ranked['cr\/c'] = ranked.cr.cumsum() \/ C\n    ranked['tr\/t'] = ranked.tr.cumsum() \/ T\n    # Calculate and put the uplift and random value into dataframe\n    uplift_model['uplift'] = round(ranked['tr\/t'] - ranked['cr\/c'],5)\n    random_model['uplift'] = round(ranked['n'] * uplift_model['uplift'].iloc[-1],5)\n    \n    \n    # Add q0\n    q0 = pd.DataFrame({'n':0, 'uplift':0, 'target_class': None}, index =[0])\n    uplift_model = pd.concat([q0, uplift_model]).reset_index(drop = True)\n    random_model = pd.concat([q0, random_model]).reset_index(drop = True)  \n    # Add model name & concat\n    uplift_model['model'] = 'Uplift model'\n    random_model['model'] = 'Random model'\n    merged = pd.concat([uplift_model, random_model]).sort_values(by='n').reset_index(drop = True)\n    return merged\n\n\ndef qini_plot(merged:pd.DataFrame):\n    \"\"\"Plot the QINI\n    \"\"\"\n    # plot the data\n    ax = sns.lineplot(x='n', y='uplift', hue='model', data=merged,\n                      style='model', palette=['red','grey'])\n    \n    \n    # Plot settings\n    sns.set_style('ticks')\n    handles, labels = ax.get_legend_handles_labels()\n    plt.xlabel('Proportion targeted',fontsize=5)\n    plt.ylabel('Uplift',fontsize=5)\n    plt.subplots_adjust(right=1)\n    plt.subplots_adjust(top=1)\n    plt.legend(fontsize=5)\n    ax.tick_params(labelsize=5)\n    ax.legend(handles=handles[1:], labels=labels[1:], loc='upper right')\n    return ax\n\n\ndef qini(uplift:pd.DataFrame):\n    \"\"\"Combine all functions\n    \"\"\"\n    ranked = qini_rank(uplift)\n    merged = qini_eval(ranked)\n    ax = qini_plot(merged)\n    return ax","edcbf452":"# plot the Qini curve for BOGO treatment\nqini(bogo_uplift)\nplt.title('Qini Curve - Buy One Get One',fontsize=5)","f229e340":"# plot the Qini curve for Discount treatment\nqini(discount_uplift)\nplt.title('Qini Curve - Discount',fontsize=20)","f8ab929e":"# Evaluation: Qini Curve\nQini is a generalization of gini curve for Uplift model, introduced by Radcliffe. The QINI (Uplift value) can be calculated as:\n\n> QINI = TR - [(CR*T)\/C]\n\nThus can be normalized in percentage as:\n\n> QINI = (TR\/T) - (CR\/C)","e4759637":"# Data Exploration: X,y","d52659c8":"## Evaluation: Segmentation\n* Let's focus on doing for BOGO first (You can do Discount campaign yourself)","1db55aae":"# Data Processing: X","c06d1271":"# Uplift Modeling: y = f(X)\n* TR = Sure Things + Persuadable (=> Positive effect)\n* TN = Lost Causes + Sleeping Dogs (=> Negative effect)\n* CN = Persuadables + Lost Causes (=> Positive effect)\n* CR = Sure Things + Sleeping Dogs (=> Negative effect)\n\n> Uplift Score = P(CN | C) + P(TR | T) - P(TN | T) - P(CR | C)\n\n*Tips: To keep it easy to under stand*\n* (+) for positive effect\n* (-) for negative effect\n\n> Uplift Score = P(CN)\/P(C) + P(TR)\/P(T) - P(TN)\/P(T) - P(CR)\/P(C)\n\n![image.png](attachment:de528c45-33b6-4450-920d-271e96cabed1.png)","e99b1c57":"# Target Class Declaration (y)\n`{Control x Treatment} x {Responde \/ No Response} = Treament{0, -1 or 1} x Target{0, 1}`\n> **Control Non-Responders** (CN): don't make a purchase without an offer => value = 0\n\n> **Control Responders** (CR): make a purchase without an offer => value = 1\n\n> **Treatment Non-Responders** (TN): don't make a purchase even with an offer => value = 2\n\n> **Treatment Responders** (TR)\n","17272838":"\n![image.png](attachment:05a87a13-5e85-47a6-a6a5-45c5bd08e14b.png)","fe8808e3":"* For users already user the Discount offer before, the uplift effect of BOGO is minimal => Cancel-out effect between 2 approaches\n* For users who are familiar with BOGO before, the uplift effect is stronger","a24442ea":"# Uplift Modeling in Promotion Campaigns\n**Refrences**\n* [1] [Uplift Modeling & QINI Curve with Python](https:\/\/www.kaggle.com\/davinwijaya\/uplift-modeling-qini-curve-with-python#Data-Explorationhttps:\/\/www.kaggle.com\/davinwijaya\/uplift-modeling-qini-curve-with-python#Data-Exploration)\n* [2] [Why Start Using Uplift Models for More Efficient Marketing Campaigns](https:\/\/www.youtube.com\/watch?v=2J9j7peWQgIhttps:\/\/www.youtube.com\/watch?v=2J9j7peWQgI)","e4566339":"* Uplift Effect of BOGO is stronger in Urban area & Web channel (but the difference is not significant)"}}