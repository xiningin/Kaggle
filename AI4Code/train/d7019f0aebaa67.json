{"cell_type":{"a76399e5":"code","a8bb260c":"code","16df0fd2":"code","c2260ee8":"code","aac0eab2":"code","927b91ff":"code","54e3d13c":"code","9d7120e0":"code","887f052b":"code","8d7e680d":"code","67ad247c":"code","7f807a29":"code","caae516e":"code","991de461":"code","8f66cd9d":"code","6d0030bb":"code","b65e8871":"code","8ea05c72":"code","9364d8a0":"code","f748a89a":"code","f7d8ea88":"code","521aef94":"code","d0a4de19":"code","f5d57cd1":"code","b3817258":"code","235a31ce":"code","01b4df02":"code","008b0da6":"code","ba95cce1":"code","bd590c97":"code","01200159":"code","6156f47a":"code","64aae748":"code","57eaadff":"code","ad83ea18":"code","63f524ab":"code","816d62eb":"code","2c9be10d":"code","60f38510":"code","f5d1b2db":"code","2bff4f25":"code","ee17156e":"code","0a8122fb":"code","e64e49c6":"code","e7a9c71c":"code","db7e402e":"code","4d9b172c":"code","a037de36":"markdown","e32396be":"markdown","f4b3dca3":"markdown","bc2d2479":"markdown","003bec00":"markdown","e3cefb92":"markdown"},"source":{"a76399e5":"%matplotlib inline\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_colwidth', None)\n#pd.set_option('display.max_rows', None)\n\nfrom tqdm import tqdm, tqdm_notebook\n\nfrom glob import glob\n\nimport re\nimport gc\n\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.utils import class_weight\nfrom sklearn.metrics import classification_report, roc_auc_score\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n\nfrom sklearn.manifold import TSNE\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import display\n\nimport plotly.express as px #Plotly Express\n\nfrom plotly.offline import iplot\n#to link plotly to pandas\nimport cufflinks as cf\ncf.go_offline()\ncf.set_config_file(offline = False, world_readable = True)\n\nplt.rcParams[\"figure.figsize\"] = (12, 8)\nplt.rcParams['axes.titlesize'] = 16\nplt.style.use('seaborn-whitegrid')\nsns.set_palette('Set3')\n\nimport os\nprint(os.listdir('..\/input\/secondhand-apartment-price-forecasting-2021\/'))\n\nimport warnings\nwarnings.simplefilter('ignore')\n\nfrom time import time, strftime, gmtime\nstart = time()\nimport datetime\nprint(str(datetime.datetime.now()))","a8bb260c":"train_column_names = ['ID', 'Type', 'Region', 'City Code', 'Prefecture Name', 'City Name', 'District Name', \n                'Nearest Station: Name', \"Nearest station: Distance (minutes)\", \"Floor plan\", \"Area (\u33a1)\", \n                \"Land shape\", \"Frontage\", \"Total floor area (\u33a1)\", \"Building year\", \"Building structure\", \"Use\", \n                \"Purpose of future use\", \"Front road: Direction\", \"Front road: Type\", \"Front road: Width (m)\", \n                \"City planning\", \"Building coverage ratio (%)\", 'Floor area ratio (%)',\n                'At the time of transaction', 'Refurbishment', 'Transaction circumstances, etc.', \n                      'Transaction price (total amount) _log']\n\ntest_column_names = ['ID', 'Type', 'Region', 'City Code', 'Prefecture Name', 'City Name', 'District Name', \n                'Nearest Station: Name', \"Nearest station: Distance (minutes)\", \"Floor plan\", \"Area (\u33a1)\", \n                \"Land shape\", \"Frontage\", \"Total floor area (\u33a1)\", \"Building year\", \"Building structure\", \"Use\", \n                \"Purpose of future use\", \"Front road: Direction\", \"Front road: Type\", \"Front road: Width (m)\", \n                \"City planning\", \"Building coverage ratio (%)\", 'Floor area ratio (%)',\n                'At the time of transaction', 'Refurbishment', 'Transaction circumstances, etc.']","16df0fd2":"base_dir = '..\/input\/secondhand-apartment-price-forecasting-2021\/'","c2260ee8":"test = pd.read_csv(base_dir + 'test.csv')\nprint(test.shape)\ntest.columns = test_column_names\ntest = test.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))\ntest.head()","aac0eab2":"sub = pd.read_csv(base_dir + 'sample_submission.csv')\nsub","927b91ff":"train = pd.DataFrame()\nfor path in tqdm_notebook(glob(base_dir + '[0-9][0-9].csv')):\n    temp = pd.read_csv(path)\n    train = train.append(temp, ignore_index = True)\ntrain.columns = train_column_names\ntrain = train.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))\nprint(train.shape)\ntrain.head()","54e3d13c":"train.describe().T","9d7120e0":"train.info(), test.info()","887f052b":"missing = train.isna().sum().reset_index()\nmissing.columns = ['features', 'total_missing']\nmissing['percent'] = (missing['total_missing'] \/ len(train)) * 100\nmissing.index = missing['features']\ndel missing['features']\n\nmissing['total_missing'].iplot(kind = 'bar', \n                               title = 'Missing Values Plot in Trainset',\n                               xTitle = 'Features',\n                               yTitle = 'Count')\nmissing.T","8d7e680d":"test_missing = test.isna().sum().reset_index()\ntest_missing.columns = ['features', 'total_missing']\ntest_missing['percent'] = (test_missing['total_missing'] \/ len(train)) * 100\ntest_missing.index = test_missing['features']\ndel test_missing['features']\n\ntest_missing['total_missing'].iplot(kind = 'bar', \n                               title = 'Missing Values Plot in Testset',\n                               xTitle = 'Features',\n                               yTitle = 'Count')\ntest_missing.T","67ad247c":"drop_cols = missing[missing['percent'] > 95].index.tolist()\nprint(f\"Number of features to drop: {len(drop_cols)}\")\ntrain.drop(drop_cols, axis = 1, inplace = True)\ntest.drop(drop_cols, axis = 1, inplace = True)\ntrain.shape, test.shape","7f807a29":"train.drop('Type', axis = 1, inplace = True)\ntest.drop('Type', axis = 1, inplace = True)\ntrain.shape, test.shape","caae516e":"del missing, test_missing\ngc.collect()","991de461":"sns.distplot(train['Transactionpricetotalamount_log']);","8f66cd9d":"train['Floorplan'].value_counts().sort_values(ascending = True).iplot(kind = 'bar', \n                                                                  orientation = 'h',\n                                                                  yTitle = 'Floors',\n                                                                  title = 'Countplot of Apartment Floor'\n                                                                 )","6d0030bb":"ax = sns.countplot(data = train, x = 'Refurbishment')\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))","b65e8871":"train.columns","8ea05c72":"train['Area'].unique()","9364d8a0":"import re\n\ntrain['Area'] = train['Area'].apply(lambda x: re.sub(r'\\D+', '', str(x)))\ntest['Area'] = test['Area'].apply(lambda x: re.sub(r'\\D+', '', str(x)))\n\ntrain['Area'] = train['Area'].astype('int32')\ntest['Area'] = test['Area'].astype('int32')\n\nsns.boxplot(data = train, x = 'Area');","f748a89a":"plt.scatter(data = train, x = 'Area', y = 'Transactionpricetotalamount_log')\nplt.title('Area vs Transaction Price')\nplt.xlabel('Area')\nplt.ylabel('Transation Price');","f7d8ea88":"train['Floorplan'].unique()","521aef94":"train['Floorplan'] = train['Floorplan'].replace(['\u30aa\u30fc\u30d7\u30f3\u30d5\u30ed\u30a2', '\u30e1\u30be\u30cd\u30c3\u30c8', '\u30b9\u30bf\u30b8\u30aa'], np.nan)","d0a4de19":"train['num_bedrooms'] = train['Floorplan'].apply(lambda x: str(x)[0])\ntrain['num_bedrooms'] = train['num_bedrooms'].apply(lambda x: int(x) if x.isdigit() else np.nan)\ntrain['num_bedrooms'].fillna(train['num_bedrooms'].median(), inplace = True)\n\ntest['num_bedrooms'] = test['Floorplan'].apply(lambda x: str(x)[0])\ntest['num_bedrooms'] = test['num_bedrooms'].apply(lambda x: int(x) if x.isdigit() else np.nan)\ntest['num_bedrooms'].fillna(test['num_bedrooms'].median(), inplace = True)\ntrain['num_bedrooms'].value_counts(dropna = False), test['num_bedrooms'].value_counts(dropna = False)","f5d57cd1":"train['living'] = train['Floorplan'].apply(lambda x: 1 if '\uff2c' in str(x) else 0) \ntrain['dining'] = train['Floorplan'].apply(lambda x: 1 if '\uff24' in str(x) else 0) \ntrain['kitchen'] = train['Floorplan'].apply(lambda x: 1 if '\uff2b' in str(x) else 0) \ntrain['storage'] = train['Floorplan'].apply(lambda x: 1 if '\uff33' in str(x) else 0)\n\ntest['living'] = test['Floorplan'].apply(lambda x: 1 if '\uff2c' in str(x) else 0) \ntest['dining'] = test['Floorplan'].apply(lambda x: 1 if '\uff24' in str(x) else 0) \ntest['kitchen'] = test['Floorplan'].apply(lambda x: 1 if '\uff2b' in str(x) else 0) \ntest['storage'] = test['Floorplan'].apply(lambda x: 1 if '\uff33' in str(x) else 0)\n\ntrain['living'].unique(), train['storage'].unique()","b3817258":"train.drop('Floorplan', axis = 1, inplace = True)\ntest.drop('Floorplan', axis = 1, inplace = True)","235a31ce":"categorical_features = [c for c in train.columns if train[c].dtype == 'object']\nnumerical_features = [c for c in train.columns if c not in categorical_features]\nnumerical_features, categorical_features, len(numerical_features), len(categorical_features)","01b4df02":"df = train.sample(100000)\ndf.shape","008b0da6":"corr = df[numerical_features].corr()\nprint(corr['Transactionpricetotalamount_log'].sort_values(ascending = False))","ba95cce1":"missing = train.isna().sum().reset_index()\nmissing['dtype'] = [train[c].dtype for c in missing['index']]\nmissing = missing[missing[0] > 0]\nmissing","bd590c97":"print('Imputing NaNs of object dtype by most occurances')\nfor c in missing['index'][missing['dtype'] == 'object']:\n    train[c] = train[c].fillna(train[c].value_counts().index[0])\n    test[c] = test[c].fillna(train[c].value_counts().index[0])\n    \nprint('Imputing NaNs of float dtype by mean value')\nfor c in missing['index'][missing['dtype'] == 'float64']:\n    train[c] = train[c].fillna(train[c].mean())\n    test[c] = test[c].fillna(test[c].mean())","01200159":"from scipy.stats import skew\n\nnum_feats = train.dtypes[train.dtypes != 'object'].index\n\n# Check how skewed they are\nskewed_feats = train[num_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending = False)\n\nplt.subplots(figsize = (30, 20))\nskewed_feats.plot(kind = 'bar', rot = 0);","6156f47a":"numerical_features.remove('ID')\nnumerical_features.remove('Transactionpricetotalamount_log')\ntrain.drop(['ID'], axis = 1, inplace = True)\ntest.drop(['ID'], axis = 1, inplace = True)","64aae748":"scl = StandardScaler()\ntrain[numerical_features] = scl.fit_transform(train[numerical_features])\ntest[numerical_features] = scl.transform(test[numerical_features])","57eaadff":"lbl = LabelEncoder()\nfor c in categorical_features:\n    lbl.fit(list(train[c].astype(str).values) + list(test[c].astype(str).values))\n    train[c] = lbl.transform(list(train[c].astype(str).values))\n    test[c] = lbl.transform(list(test[c].astype(str).values))\nprint('Label Encoding Categorical Features done..')","ad83ea18":"repeated = []\nfor c in df.columns:\n    counts = df[c].value_counts()\n    zeros = counts.iloc[0]\n    if zeros \/ len(df) * 100 > 99.94:\n        repeated.append(c)\nrepeated = list(repeated)\nif repeated:\n    print(f\"These are the features with same repeated value: {repeated}\")\n    train = train.drop(repeated, axis = 1)\n    test = test.drop(repeated, axis = 1)\nelse:\n    print('No repeated values in columns')","63f524ab":"target = train['Transactionpricetotalamount_log'].copy()\ntrain.drop(['Transactionpricetotalamount_log'], axis = 1, inplace = True)","816d62eb":"Xtrain, Xvalid, ytrain, yvalid = train_test_split(train, target, test_size = 0.2, random_state = 2021)\nprint(Xtrain.shape, ytrain.shape, Xvalid.shape, yvalid.shape)","2c9be10d":"from sklearn.metrics import mean_absolute_error","60f38510":"from lightgbm import LGBMRegressor\n\nlgbm = LGBMRegressor(\n               objective = 'regression', \n               num_leaves = 4,\n               learning_rate = 0.01, \n               n_estimators = 10000,\n               max_bin = 200, \n               bagging_fraction = 0.75,\n               bagging_freq = 5, \n               bagging_seed = 7,\n               feature_fraction = 0.2,\n               feature_fraction_seed = 7,\n               verbose = 1,\n            )\n\nlgbm_model = lgbm.fit(Xtrain, ytrain)\nlg_vpreds = lgbm_model.predict(Xvalid)\nprint((f\"LGBM MAE: {mean_absolute_error(yvalid, lg_vpreds)}\"))","f5d1b2db":"lg_preds = lgbm_model.predict(test)\nsub['\u53d6\u5f15\u4fa1\u683c\uff08\u7dcf\u984d\uff09_log'] = lg_preds\nsub.to_csv('sub_lgbm.csv', index = False)\nsub.head()","2bff4f25":"from xgboost import XGBRegressor\n\nxgb = XGBRegressor(\n                    learning_rate = 0.01, \n                    n_estimators = 10000,\n                    max_depth = 3, \n                    min_child_weight = 0,\n                    gamma = 0, \n                    subsample = 0.7,\n                    colsample_bytree = 0.7,\n                    objective = 'reg:squarederror', \n                    nthread = 1,\n                    scale_pos_weight = 1, \n                    seed = 27,\n                    reg_alpha = 0.00006\n                    )\nxgb_model = xgb.fit(Xtrain, ytrain)\nxg_vpreds = xgb_model.predict(Xvalid)\nprint((f\"XGBOOST MAE: {mean_absolute_error(yvalid, xg_vpreds)}\"))","ee17156e":"xg_preds = xgb_model.predict(test)\nsub['\u53d6\u5f15\u4fa1\u683c\uff08\u7dcf\u984d\uff09_log'] = xg_preds\nsub.to_csv('sub_xg.csv', index = False)\nsub.head()","0a8122fb":"sub['\u53d6\u5f15\u4fa1\u683c\uff08\u7dcf\u984d\uff09_log'] = (lg_preds + xg_preds) \/ 2\nsub.to_csv('sub_en.csv', index = False)\nsub.head()","e64e49c6":"from catboost import CatBoostRegressor\n\ncat = CatBoostRegressor(\n                iterations = 10000,\n                learning_rate = 0.01,\n                depth = 6,\n                l2_leaf_reg = 3,\n                loss_function = 'MAE',\n                eval_metric = 'MAE',\n                random_seed = 2021)\n\ncat_model = cat.fit(Xtrain, ytrain)\ncat_vpreds = cat_model.predict(Xvalid)","e7a9c71c":"print((f\"CatBoost MAE: {mean_absolute_error(yvalid, cat_vpreds)}\"))\ncat_preds = cat_model.predict(test)\nsub['\u53d6\u5f15\u4fa1\u683c\uff08\u7dcf\u984d\uff09_log'] = cat_preds\nsub.to_csv('sub_cat.csv', index = False)\nsub.head()","db7e402e":"sub['\u53d6\u5f15\u4fa1\u683c\uff08\u7dcf\u984d\uff09_log'] = (lg_preds + xg_preds + cat_preds) \/ 3\nsub.to_csv('sub_en2.csv', index = False)\nsub.head()","4d9b172c":"finish = time()\nprint(strftime(\"%H:%M:%S\", gmtime(finish - start)))","a037de36":"- Check if the most recurrent value of the feature is repeated almost in all the instances. If it does then it drops these features because their values are almost the same for all instances and will not help in the learning process.","e32396be":"__Combine train dataframes into a single train dataframe__","f4b3dca3":"__Standardize Numerical Features and Label Encode Categorical Features__","bc2d2479":"- We should drop 'Type' as well as Type has only one value in train","003bec00":"- LDK is Living, Dining and Kitchen\n- 1 LDK means 1 Bedrooms with Living, Dining rooms and Kitchen\n- S is Storage room","e3cefb92":"__Cleaning the Data__"}}