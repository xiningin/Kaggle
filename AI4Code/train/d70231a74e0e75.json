{"cell_type":{"54b0dff9":"code","17b8354b":"code","89a7489f":"code","d9780ae6":"code","5ecfc6c8":"code","67588a20":"code","742d01f2":"code","6ebda552":"code","aa4b43b3":"code","6b6d79d5":"code","f70076d2":"code","05f92a5f":"code","a8809614":"code","88ab2716":"code","6af8960f":"code","05160a3c":"code","4c02731b":"code","39c109de":"code","f320b297":"code","3e5c71d0":"code","e2d9311c":"code","6ea9ab63":"code","6a48a7df":"code","88c0e6de":"code","d77dd825":"code","5b85d873":"code","17f2914f":"markdown","87a82f66":"markdown","f3d8f2a7":"markdown","46e70fe4":"markdown","1aa447d9":"markdown","0a09e604":"markdown","6a08e0f2":"markdown","6faeed30":"markdown","06403ccc":"markdown","bfbddae9":"markdown","896f3335":"markdown","2d5dfed8":"markdown","74a93a00":"markdown","0f8bff4b":"markdown","52c4ba7a":"markdown","0262ca3d":"markdown","34ba61b0":"markdown","c4997dc9":"markdown","f151b32f":"markdown","00074dcd":"markdown","f7396f19":"markdown","c7c1b2ad":"markdown","412164d5":"markdown"},"source":{"54b0dff9":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom google.cloud import bigquery\nclient = bigquery.Client()","17b8354b":"dataset_ref = client.dataset('ncaa_basketball', project='bigquery-public-data')","89a7489f":"type(dataset_ref)","d9780ae6":"ncaa_dataset = client.get_dataset(dataset_ref)","5ecfc6c8":"type(ncaa_dataset)","67588a20":"[x.table_id for x in client.list_tables(ncaa_dataset)]","742d01f2":"ncaa_team_colors = client.get_table(ncaa_dataset.table('team_colors'))","6ebda552":"type(ncaa_team_colors)","aa4b43b3":"# dir(ncaa_team_colors)","6b6d79d5":"[command for command in dir(ncaa_team_colors) if not command.startswith('_')]","f70076d2":"ncaa_team_colors.schema","05f92a5f":"schema_subset = [col for col in ncaa_team_colors.schema if col.name in ('code_ncaa', 'color')]\nresults = [x for x in client.list_rows(ncaa_team_colors, start_index=100, selected_fields=schema_subset, max_results=10)]","a8809614":"results","88ab2716":"for i in results:\n    print(dict(i))","6af8960f":"BYTES_PER_GB = 2**30\nncaa_team_colors.num_bytes \/ BYTES_PER_GB","05160a3c":"def estimate_gigabytes_scanned(query, bq_client):\n    # see https:\/\/cloud.google.com\/bigquery\/docs\/reference\/rest\/v2\/jobs#configuration.dryRun\n    my_job_config = bigquery.job.QueryJobConfig()\n    my_job_config.dry_run = True\n    my_job = bq_client.query(query, job_config=my_job_config)\n    BYTES_PER_GB = 2**30\n    return my_job.total_bytes_processed \/ BYTES_PER_GB","4c02731b":"estimate_gigabytes_scanned(\"SELECT id FROM `bigquery-public-data.ncaa_basketball.team_colors`\", client)","39c109de":"estimate_gigabytes_scanned(\"SELECT * FROM `bigquery-public-data.ncaa_basketball.team_colors`\", client)\n","f320b297":"ncaa_mbb_teams_games_sr = client.get_table(ncaa_dataset.table('mbb_teams_games_sr'))\nncaa_mbb_pbp_sr = client.get_table(ncaa_dataset.table('mbb_pbp_sr'))","3e5c71d0":"ncaa_mbb_teams_games_sr.schema","e2d9311c":"ncaa_mbb_pbp_sr.schema","6ea9ab63":"#standardSQL\nquery=\"\"\"SELECT\n  event_type,\n  COUNT(*) AS event_count\nFROM `bigquery-public-data.ncaa_basketball.mbb_pbp_sr`\nGROUP BY 1\nORDER BY event_count DESC\"\"\"\n\n# Set up the query\nquery_job = client.query(query)\n# API request - run the query, and return a pandas DataFrame\nevents_type = query_job.to_dataframe()\nevents_type","6a48a7df":"#standardSQL\n#most three points made\nquery=\"\"\"SELECT\n  scheduled_date,\n  name,\n  market,\n  alias,\n  three_points_att,\n  three_points_made,\n  three_points_pct,\n  opp_name,\n  opp_market,\n  opp_alias,\n  opp_three_points_att,\n  opp_three_points_made,\n  opp_three_points_pct,\n  (three_points_made + opp_three_points_made) AS total_threes\nFROM `bigquery-public-data.ncaa_basketball.mbb_teams_games_sr`\nWHERE season > 2010\nORDER BY total_threes DESC\nLIMIT 5\"\"\"\n\n# Set up the query\nquery_job = client.query(query)\n# API request - run the query, and return a pandas DataFrame\nmost_three_points = query_job.to_dataframe()\nmost_three_points","88c0e6de":"#standardSQL\nquery=\"\"\"SELECT\n  venue_name, venue_capacity, venue_city, venue_state\nFROM `bigquery-public-data.ncaa_basketball.mbb_teams_games_sr`\nGROUP BY 1,2,3,4\nORDER BY venue_capacity DESC\nLIMIT 5\"\"\"\n\n\n# Set up the query\nquery_job = client.query(query)\n# API request - run the query, and return a pandas DataFrame\nhighest_seating_cap = query_job.to_dataframe()\nhighest_seating_cap","d77dd825":"#standardSQL\n#highest scoring game of all time\nquery=\"\"\"SELECT\n  scheduled_date,\n  name,\n  market,\n  alias,\n  points_game AS team_points,\n  opp_name,\n  opp_market,\n  opp_alias,\n  opp_points_game AS opposing_team_points,\n  points_game + opp_points_game AS point_total\nFROM `bigquery-public-data.ncaa_basketball.mbb_teams_games_sr`\nWHERE season > 2010\nORDER BY point_total DESC\nLIMIT 5\"\"\"\n\n# Set up the query\nquery_job = client.query(query)\n# API request - run the query, and return a pandas DataFrame\nhighest_scoring_game = query_job.to_dataframe()\nhighest_scoring_game","5b85d873":"#standardSQL\n#biggest point difference in a championship game\nquery=\"\"\"SELECT\n  scheduled_date,\n  name,\n  market,\n  alias,\n  points_game AS team_points,\n  opp_name,\n  opp_market,\n  opp_alias,\n  opp_points_game AS opposing_team_points,\n  ABS(points_game - opp_points_game) AS point_difference\nFROM `bigquery-public-data.ncaa_basketball.mbb_teams_games_sr`\nWHERE season > 2014 AND tournament_type = 'National Championship'\nORDER BY point_difference DESC\nLIMIT 5\"\"\"\n\n\n\n# Set up the query\nquery_job = client.query(query)\n# API request - run the query, and return a pandas DataFrame\nbiggest_diff = query_job.to_dataframe()\nbiggest_diff","17f2914f":"## Which teams played in the highest scoring game since 2010?","87a82f66":"Use [client.list_tables](https:\/\/googleapis.github.io\/google-cloud-python\/latest\/bigquery\/generated\/google.cloud.bigquery.table.Table.html#google.cloud.bigquery.table.Table) to get information about the tables within the dataset.","f3d8f2a7":"## mbb_teams_games_sr\n### Description\nTeam-level box scores from every men's basketball game from the 2013-14 season to the 2017-18 season. Each row shows a single team's stats in one game. This data is identical to mbb_games_sr, but is organized differently to make it easier to calculate a single team's statistics.\n[](http:\/\/)\n## mbb_pbp_sr\n### Description\nPlay-by-play information from men's basketball games, starting with the 2013-14 season. Each row shows a single event in a game.","46e70fe4":"The method [client.dataset](https:\/\/googleapis.github.io\/google-cloud-python\/latest\/bigquery\/reference.html#google.cloud.bigquery.dataset.DatasetReference) is named as if it returns a dataset, but it actually gives us a dataset reference.","1aa447d9":"## Load the NCAA Basketball dataset","0a09e604":"# Exploring NCAA Data with BigQuery","6a08e0f2":"Let's check what resources we would have consumed by doing a full table scan instead of using `list_rows`.","6faeed30":"## Setup","06403ccc":"Run a quick test checking the impact of selecting one column versus an entire table.","bfbddae9":"## What is BigQuery\n`BigQuery` is Google's fully managed, NoOps, low cost analytics database. With `BigQuery` you can query terabytes and terabytes of data without managing infrastructure or needing a database administrator. `BigQuery` uses `SQL` and takes advantage of the pay-as-you-go model. `BigQuery` allows you to focus on analyzing data to find meaningful insights.\n\n`NCAA Basketball` dataset contains  games, teams, and players data. The game data covers play-by-play and box scores back to 2009, as well as final scores back to 1996.","896f3335":"Let's take a closer look at the schema for the `team_colors` table. As with datasets, we'll need to pass a reference to the table to the `client.get_table` method.","2d5dfed8":"## Digging into the table commands.","74a93a00":"Once we have a reference, we can load the real dataset.","0f8bff4b":"## The schema of the table","52c4ba7a":"## Since 2014, what was the biggest difference in final score for a National Championship?","0262ca3d":"`List_rows` returns a slice of a dataset without scanning any other section of the table. If you've ever written a BQ query that included a limit clause, which limits the data returned rather than the data scanned, you probably actually wanted `list_rows` instead.\n\nTo see a subset of the columns, but the `selected_fields` parameter requires a schema object as an input. We'll need to build a subset of the schema first to pass for that parameter.","34ba61b0":"Convert the `google.cloud.bigquery.table.Row` results to dicts to get a version that prints a bit more nicely.","c4997dc9":"## What types of basketball play events are there?","f151b32f":"## Explore mbb_teams_games_sr and mbb_pbp_sr table","00074dcd":"### If you liked my work, please upvote this kernel since it will keep me motivated to perform more in-depth reserach towards this subject.","f7396f19":"## Which 5 basketball venues have the highest seating capacity?","c7c1b2ad":"## Schema","412164d5":"## Which 5 games featured the most three point shots made? How accurate were all the attempts?"}}