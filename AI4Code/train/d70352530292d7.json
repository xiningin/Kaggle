{"cell_type":{"5cc221b1":"code","d35905bf":"code","23abb233":"code","85b1ea4e":"code","7191634e":"code","eef5eefd":"code","849a2de1":"code","8e511a5e":"code","e7554511":"markdown","4e620ba3":"markdown","7ab65abc":"markdown"},"source":{"5cc221b1":"!pip install ..\/input\/ffmpegpython\/ffmpeg_python-0.2.0-py3-none-any.whl","d35905bf":"from IPython.display import HTML\nfrom base64 import b64encode\n\ndef play(filename):\n    html = ''\n    video = open(filename,'rb').read()\n    src = 'data:video\/mp4;base64,' + b64encode(video).decode()\n    html += '<video width=1000 controls autoplay loop><source src=\"%s\" type=\"video\/mp4\"><\/video>' % src \n    return HTML(html)","23abb233":"import numpy as np\nimport matplotlib.pyplot as plt\n\na = 0.5\nv = 0.7\nd2 = 0.07\ndx = 1.0\nlen_x = 100.0\nlen_y = 100.0\nend_time = 150\n\ndt = d2 * (dx**2) \/ v\nd1 = a * dt \/ dx\n\nx = np.arange(0,len_x+dx,dx)\ny = np.arange(0,len_y+dx,dx)\nX,Y = np.meshgrid(x,y)\nu = np.zeros_like(X)\n\nu[30:61,30:51] = 1\nu[30:61,51:61] = 1.8\n\nplt.figure(figsize=(10,10))\nicounter = -1\nfor it in np.arange(0,end_time+dt,dt):\n    icounter = icounter + 1\n    if np.mod(icounter,25)==0:\n        ax = plt.axes(projection='3d')\n        p = ax.scatter(X,Y,u,c=u,cmap='nipy_spectral',vmin=0.0,vmax=2.0)\n        ax.set_xlabel('X')\n        ax.set_ylabel('Y')\n        ax.set_zlim([0.0,2.0])\n        plt.colorbar(p,ax=ax)\n        plt.title('a=%.3f & v=%.3f & Time=%.6f (s)'%(a,v,it))\n        plt.savefig('%06.6d.jpg'%(icounter))\n        plt.cla()\n        plt.clf()\n    u = u - d1 * (2 * u - np.roll(u,1,axis=0) - np.roll(u,1,axis=1)) + d2 * (np.roll(u,-1,axis=0)+np.roll(u,1,axis=0)+np.roll(u,-1,axis=1)+np.roll(u,1,axis=1) - 4.0*u)","85b1ea4e":"import numpy as np\nimport matplotlib.pyplot as plt\n\nv = 0.7\nd2 = 0.07\ndx = 1.0\nlen_x = 100.0\nlen_y = 100.0\nend_time = 150\n\ndt = d2 * (dx**2) \/ v\n\nx = np.arange(0,len_x+dx,dx)\ny = np.arange(0,len_y+dx,dx)\nX,Y = np.meshgrid(x,y)\nu = np.zeros_like(X)\n\nu[30:61,30:51] = 1\nu[30:61,51:61] = 1.8\n\nplt.figure(figsize=(10,10))\nicounter = -1\nfor it in np.arange(0,end_time+dt,dt):\n    icounter = icounter + 1\n    if np.mod(icounter,25)==0:\n        ax = plt.axes(projection='3d')\n        p = ax.scatter(X,Y,u,c=u,cmap='nipy_spectral',vmin=0.0,vmax=2.0)\n        ax.set_xlabel('X')\n        ax.set_ylabel('Y')\n        ax.set_zlim([0.0,2.0])\n        plt.colorbar(p,ax=ax)\n        plt.title('v=%.3f & Time=%.6f (s)'%(v,it))\n        plt.savefig('%06.6d.jpg'%(icounter))\n        plt.cla()\n        plt.clf()    \n    a = u.copy()\n    d1 = a * dt \/ dx\n    u = u - d1 * (2 * u - np.roll(u,1,axis=0) - np.roll(u,1,axis=1)) + d2 * (np.roll(u,-1,axis=0)+np.roll(u,1,axis=0)+np.roll(u,-1,axis=1)+np.roll(u,1,axis=1) - 4.0*u)","7191634e":"import numpy as np\nimport matplotlib.pyplot as plt\n\na = 0.5\nv = 0.7\nd2 = 0.07\ndx = 1.0\nlen_x = 100.0\nlen_y = 100.0\nend_time = 150\n\ndt = d2 * (dx**2) \/ v\nd1 = a * dt \/ dx\n\nG = 0.0\n\nx = np.arange(0,len_x+dx,dx)\ny = np.arange(0,len_y+dx,dx)\nX,Y = np.meshgrid(x,y)\nu = np.zeros_like(X)\n\nu[30:61,30:51] = 1\nu[30:61,51:61] = 1.8\n\nU = u.copy()\nu[-1,:] = U[-1,:] - d1 * (2 * U[-1,:] - U[-2,:] + 2.0*dx*G - np.roll(U[-1,:],1,axis=0)) + d2 * (2*U[-2,:]-2.0*dx*G+np.roll(U[-1,:],-1,axis=0)+np.roll(U[-1,:],1,axis=0) - 4.0*U[-1,:])\nu[0,:] = U[0,:] - d1 * (2 * U[0,:] - U[1,:] + 2.0*dx*G - np.roll(U[0,:],1,axis=0)) + d2 * (2*U[1,:]-2.0*dx*G+np.roll(U[0,:],-1,axis=0)+np.roll(U[0,:],1,axis=0) - 4.0*U[0,:])\n\nplt.figure(figsize=(10,10))\nicounter = -1\nfor it in np.arange(0,end_time+dt,dt):\n    icounter = icounter + 1\n    if np.mod(icounter,25)==0:\n        ax = plt.axes(projection='3d')\n        p = ax.scatter(X,Y,u,c=u,cmap='nipy_spectral',vmin=0.0,vmax=2.0)\n        ax.set_xlabel('X')\n        ax.set_ylabel('Y')\n        ax.set_zlim([0.0,2.0])\n        plt.colorbar(p,ax=ax)\n        plt.title('a=%.3f & v=%.3f & Time=%.6f (s)'%(a,v,it))\n        plt.savefig('%06.6d.jpg'%(icounter))\n        plt.cla()\n        plt.clf()\n    U = u.copy()\n    u[1:-1,:] = U[1:-1,:] - d1 * (2 * U[1:-1,:] - U[0:-2,:] - np.roll(U[1:-1,:],1,axis=1)) + d2 * ( U[2:,:]+ U[0:-2,:]+np.roll(U[1:-1,:],-1,axis=1)+np.roll(U[1:-1,:],1,axis=1) - 4.0*U[1:-1,:])\n    u[-1,:] = U[-1,:] - d1 * (2 * U[-1,:] - U[-2,:] + 2.0*dx*G - np.roll(U[-1,:],1,axis=0)) + d2 * (2*U[-2,:]-2.0*dx*G+np.roll(U[-1,:],-1,axis=0)+np.roll(U[-1,:],1,axis=0) - 4.0*U[-1,:])\n    u[0,:] = U[0,:] - d1 * (2 * U[0,:] - U[1,:] + 2.0*dx*G - np.roll(U[0,:],1,axis=0)) + d2 * (2*U[1,:]-2.0*dx*G+np.roll(U[0,:],-1,axis=0)+np.roll(U[0,:],1,axis=0) - 4.0*U[0,:])","eef5eefd":"!rm *.mp4\n!ffmpeg -r 3 -pattern_type glob -i '\/kaggle\/working\/*.jpg' -vf \"scale=trunc(iw\/2)*2:trunc(ih\/2)*2\" -vcodec libx264 -pix_fmt yuv420p animation.mp4","849a2de1":"!rm *.jpg","8e511a5e":"play('\/kaggle\/working\/animation.mp4')","e7554511":"## non-linear","4e620ba3":"## linear","7ab65abc":"## 3"}}