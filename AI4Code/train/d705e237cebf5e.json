{"cell_type":{"0b8ae5c7":"code","52eaa87e":"code","4a121dd0":"code","be5cf642":"code","133e548b":"code","f1ae8a0b":"code","99ee4990":"code","0dabf2fc":"code","e8fa6861":"code","157ee4a3":"code","397b79b4":"code","a94ba95f":"code","6b8045c3":"code","226cf4a2":"code","1c5c1ec5":"code","03400c42":"code","a6fc9ff6":"code","39f2656e":"code","406bb8b7":"code","8890f1f0":"code","2eec3cc0":"code","91a59a66":"code","96d28d93":"code","2c6921b9":"code","ccc94d09":"code","4609bea5":"code","0225721f":"code","086d7f15":"markdown","73143dea":"markdown","8d5caf02":"markdown","abe8fb67":"markdown","14359607":"markdown","0276e6aa":"markdown","780d99da":"markdown","f002d96e":"markdown","e71f5458":"markdown","a291a1d3":"markdown","8e6d401a":"markdown","fb829f4d":"markdown","3299f525":"markdown","172560af":"markdown","78ee94d7":"markdown","20ef5f29":"markdown","d5c8e49f":"markdown","3c66eb15":"markdown","1ed70b2f":"markdown","a2c433b0":"markdown","df4d8891":"markdown","29cabef8":"markdown","120a9801":"markdown"},"source":{"0b8ae5c7":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.metrics import classification_report, confusion_matrix","52eaa87e":"data = pd.read_csv('..\/input\/used-car-information\/Dataset.csv')","4a121dd0":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaled_features = scaler.fit_transform(data[['distance_travelled(kms)','price']])\ndf_scaled = pd.DataFrame(scaled_features, columns=['std_distance', 'std_price'])\ndata['std_dist'] = np.nan\ndata ['std_price'] = np.nan\nfor i in range(0,1725,1):\n    data['std_dist'][i] = df_scaled['std_distance'][i]\n    data['std_price'][i] = df_scaled['std_price'][i]","be5cf642":"from sklearn.preprocessing import LabelEncoder\nfor i in range(0, len(data['fuel_type']),1):\n    if(data['fuel_type'][i] == 'Petrol + 1'or data['fuel_type'][i] ==  'CNG + 1'):\n        data['fuel_type'][i] = 'CNG'\nle = LabelEncoder()\ndata['fuel_type'] = le.fit_transform(data['fuel_type'])","133e548b":"data.head()","f1ae8a0b":"data.columns","99ee4990":"X = data[['year','fuel_type','inv_brand', 'best_buy1', 'std_price', 'car_age']]\ny = data['distance below 30k km']","0dabf2fc":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)","e8fa6861":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=5)\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nmodel = GaussianProcessClassifier()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\naccuracy = model.score(X_test, y_test)\nprint(accuracy)","157ee4a3":"from sklearn.tree import DecisionTreeClassifier\nclf_gini = DecisionTreeClassifier(criterion='gini', max_depth=3, random_state=0)\nclf_gini.fit(X_train, y_train)\ny_pred_gini = clf_gini.predict(X_test)\nprint('Training set score: {:.4f}'.format(clf_gini.score(X_train, y_train)))\nprint('Test set score: {:.4f}'.format(clf_gini.score(X_test, y_test)))","397b79b4":"from sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_score\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\naccuracies.mean()","a94ba95f":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score","6b8045c3":"classifier=GaussianNB()\nclassifier.fit(X_train,y_train)\ny_pred=classifier.predict(X_test)\nacc=accuracy_score(y_test, y_pred)\nprint(acc)","226cf4a2":"print(classification_report(y_test,y_pred))","1c5c1ec5":"classifier=BernoulliNB()\nclassifier.fit(X_train,y_train)\ny_pred=classifier.predict(X_test)\nacc=accuracy_score(y_test, y_pred)\nprint(acc)","03400c42":"from sklearn.neighbors import KNeighborsClassifier\nclassifier=KNeighborsClassifier(n_neighbors=5,metric='minkowski',p=2)\nclassifier.fit(X_train,y_train)\ny_pred=classifier.predict(X_test)\nacc=accuracy_score(y_test, y_pred)\nprint(acc)","a6fc9ff6":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=100, max_depth=10, random_state=1)\nmodel.fit(X_train, y_train)\nmodel.score(X_test, y_test)","39f2656e":"from sklearn.ensemble import AdaBoostClassifier\nclassifier=AdaBoostClassifier(random_state=0)\nclassifier.fit(X_train,y_train)\ny_pred=classifier.predict(X_test)\nacc=accuracy_score(y_test, y_pred)\nprint(acc)","406bb8b7":"from sklearn.linear_model import PassiveAggressiveClassifier\nclassifier=PassiveAggressiveClassifier(random_state=0)\nclassifier.fit(X_train,y_train)\ny_pred=classifier.predict(X_test)\nacc=accuracy_score(y_test, y_pred)\nprint(acc)","8890f1f0":"from sklearn.ensemble import BaggingClassifier\nclassifier=BaggingClassifier(random_state=0)\nclassifier.fit(X_train,y_train)\ny_pred=classifier.predict(X_test)\nacc=accuracy_score(y_test, y_pred)\nprint(acc)","2eec3cc0":"from sklearn.ensemble import GradientBoostingClassifier\ngbk = GradientBoostingClassifier()\ngbk.fit(X_train, y_train)\npred = gbk.predict(X_test)\nacc=accuracy_score(y_test, y_pred)\nprint(acc)","91a59a66":"import xgboost as xgb\nmodel_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=500,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\nmodel_xgb.fit(X, y)\nr2_score(model_xgb.predict(X), y)","96d28d93":"from catboost import CatBoostRegressor\ncb_model = CatBoostRegressor(iterations=500,\n                             learning_rate=0.05,\n                             depth=10,\n                             random_seed = 42,\n                             bagging_temperature = 0.2,\n                             od_type='Iter',\n                             metric_period = 50,\n                             od_wait=20)\ncb_model.fit(X, y)\nr2_score(cb_model.predict(X), y)","2c6921b9":"from sklearn.linear_model import SGDRegressor\nSGD = SGDRegressor(max_iter = 100)\nSGD.fit(X, y)\nr2_score(SGD.predict(X), y)","ccc94d09":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nlasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))\nlasso.fit(X, y)\nr2_score(lasso.predict(X), y)","4609bea5":"from sklearn.linear_model import RidgeClassifierCV\nrcc = RidgeClassifierCV()\nrcc.fit(X, y)\nr2_score(rcc.predict(X), y)","0225721f":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nModel=LinearDiscriminantAnalysis()\nModel.fit(X_train,y_train)\ny_pred=Model.predict(X_test)\nprint('accuracy is ',accuracy_score(y_pred,y_test))","086d7f15":"# XG Boost","73143dea":"# AdaBoost Classifier","8d5caf02":"# Getting The Data ready","abe8fb67":"# Loading the Dataset","14359607":"# Viewing Data And Columns","0276e6aa":"# Bernoulli","780d99da":"# Declaring Features And Labels","f002d96e":"# Gaussian Process Classifier","e71f5458":"# Lasso","a291a1d3":"# Bagging Classifier","8e6d401a":"# Stochastic Gradient Descent","fb829f4d":"# Train test Split","3299f525":"# Random Forest","172560af":"# Gradient Boosting Classifier","78ee94d7":"# DecisionTree Classifier","20ef5f29":"# Ridge Classifier CV","d5c8e49f":"# Initial Import Statements","3c66eb15":"# Passive Aggressive Classifier","1ed70b2f":"# SVM","a2c433b0":"# LDA","df4d8891":"# KNN","29cabef8":"# Naive Bayes Algorithm","120a9801":"# Catboost"}}