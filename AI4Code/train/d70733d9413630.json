{"cell_type":{"75435b43":"code","6d6cd2f6":"code","a7695d27":"code","71de2349":"code","2339b5ea":"code","47a1ac7d":"code","568b4771":"code","6d062e7f":"code","cc925926":"code","dc6c4e86":"code","d508d777":"code","a9f5e6d8":"code","e49a4886":"code","f630f5e6":"code","2fec847c":"code","3c331b55":"code","17462408":"code","2bf06b86":"code","7a00656a":"code","f5f25a02":"code","53076434":"code","58e82e9a":"code","d35c8980":"code","68629f77":"code","d309d397":"code","680f5919":"code","275c2f97":"code","14066048":"code","e03fd4d6":"code","dcc557fc":"code","54a4d3d9":"code","ee30f48e":"code","aec3f720":"code","3b9c20ad":"code","68de2fe0":"code","e867f025":"code","b726ff7b":"code","ff2d7a89":"code","48ac105a":"code","9a69ce2a":"code","f26dd51a":"code","0ecda275":"code","de732a16":"code","ffc6d926":"code","d0690688":"code","dbca5bf9":"code","0e93a40b":"code","9f75aa64":"code","76477ec8":"code","746e2255":"code","222f8605":"code","597ff618":"code","e973061b":"code","fe7e5d59":"code","d63716e5":"code","a79bed3d":"code","7cf14ca7":"code","a7593010":"code","e3e2d4ad":"code","062ef848":"code","73467127":"code","2455474a":"code","53ec9bf3":"code","37d9d4c3":"code","948d311e":"code","5bfab2c1":"code","551b87b1":"code","0e33f368":"code","c5283d89":"code","10544c58":"code","d398a898":"code","3f9d976f":"code","7089ec77":"code","661efb4b":"code","7ad8713f":"code","9d24e5d7":"code","aef5c5a3":"markdown","126b25bd":"markdown","55683c7e":"markdown","80bdfc8f":"markdown","dc09395a":"markdown","c0597a56":"markdown","c2d68f5a":"markdown","f4a75b90":"markdown","22b501c7":"markdown","80c738ac":"markdown","1d70a869":"markdown","ea41b1b1":"markdown","fb47defa":"markdown","1de18ba3":"markdown","82dd1668":"markdown","02028b89":"markdown","43f6f5a6":"markdown","04572852":"markdown","b1a468c8":"markdown","2690f961":"markdown","bd210a74":"markdown","bc407953":"markdown","4aeb31e8":"markdown","1ab08982":"markdown","5ee5acc1":"markdown","d4b92286":"markdown","644cc4fd":"markdown","0f9eb36c":"markdown","163b8e7c":"markdown","3dca426d":"markdown","e6c1c911":"markdown"},"source":{"75435b43":"import warnings\nwarnings.simplefilter('ignore')","6d6cd2f6":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats","a7695d27":"filepath = '..\/input\/pima-indians-diabetes-database\/diabetes.csv'\ndata = pd.read_csv(filepath)","71de2349":"data.sample(10)","2339b5ea":"data.shape","47a1ac7d":"data.info()","568b4771":"data.describe().T","6d062e7f":"data['Outcome'].value_counts()","cc925926":"plt.figure(figsize=(7, 5))\nsns.countplot(data=data, x='Outcome')\nplt.show()","dc6c4e86":"data.isnull().sum().any()","d508d777":"duplicate_rows = data[data.duplicated()]\nduplicate_rows.shape[0]","a9f5e6d8":"data.hist(figsize=(12, 10))\nplt.show()","e49a4886":"plt.figure(figsize = (10, 8))\ncorr = data.corr(method='spearman')\nmask = np.triu(np.ones_like(corr, dtype=bool))\ncormat = sns.heatmap(corr, mask=mask, linewidths=1, annot=True, fmt=\".2f\")\ncormat.set_title('Correlation Matrix')\nplt.show()","f630f5e6":"sns.set(style=\"ticks\", color_codes=True)\nsns.pairplot(data)\nplt.show()","2fec847c":"def diagnostic_plot(data, col):\n    plt.figure(figsize=(15, 3))\n    \n    plt.subplot(1, 3, 1)\n    sns.distplot(data[col], bins=10)\n    plt.title('Histogram')\n    \n    plt.subplot(1, 3, 2)\n    stats.probplot(data[col], dist='norm', fit=True, plot=plt)\n    plt.title('Q-Q Plot')\n    \n    plt.subplot(1, 3, 3)\n    sns.boxplot(y=data[col])\n    plt.title('Boxplot')\n    \n    plt.show()","3c331b55":"data['Pregnancies'].value_counts()","17462408":"max_threshold = data['Pregnancies'].quantile(0.95)\ndata = data[data['Pregnancies']<=max_threshold]","2bf06b86":"print(\"Maximum Age is: {}\".format(data['Age'].max()))\nprint(\"Minimum Age is: {}\".format(data['Age'].min()))","7a00656a":"diagnostic_plot(data, 'Glucose')","f5f25a02":"data = data[data['Glucose']>=25]","53076434":"diagnostic_plot(data, 'BloodPressure')","58e82e9a":"data = data[data['BloodPressure']!=0]","d35c8980":"diagnostic_plot(data, 'BMI')","68629f77":"data = data[(data['BMI']>10) & (data['BMI']<50)]","d309d397":"data['Insulin'].value_counts().sort_index(ascending=False)","680f5919":"data = data[data['Insulin'].between(15, 600)]","275c2f97":"diagnostic_plot(data, 'SkinThickness')","14066048":"data = data[data['SkinThickness']<60]","e03fd4d6":"diagnostic_plot(data, 'DiabetesPedigreeFunction')","dcc557fc":"data.shape","54a4d3d9":"X = data.drop(['Outcome'], axis=1)\ny = data['Outcome']","ee30f48e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)","aec3f720":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","3b9c20ad":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.pipeline import Pipeline\npipeline_lr = Pipeline([('lr', LogisticRegression())])\npipeline_svc = Pipeline([('svc', SVC())])\npipeline_dt = Pipeline([('dt', DecisionTreeClassifier())])\n\npipelines = [pipeline_lr, pipeline_svc, pipeline_dt]\nbest_acc = 0\nbest_clf = 0\nbest_pipeline=\"\"\npipe_dict = {0: 'Logistic Regression', 1: 'Support Vector Classifier', 2: 'Decision Tree Classifier'}\n\nfor pipe in pipelines:\n    pipe.fit(X_train, y_train)\n    \nfor i, model in enumerate(pipelines):\n    print(\"{} - Test Accuracy: {}\".format(pipe_dict[i], model.score(X_test, y_test)))\n    \nfor i, model in enumerate(pipelines):\n    if model.score(X_test, y_test)>best_acc:\n        best_acc = model.score(X_test, y_test)\n        best_pipeline = model\n        best_clf = i\nprint(\"Classifier with best accuracy is {}\". format(pipe_dict[best_clf]))","68de2fe0":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score, roc_curve, auc","e867f025":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(X_train, y_train)","b726ff7b":"print(\"Train accuracy :{}\".format(accuracy_score(y_train, lr.predict(X_train))))\nprint(\"Test accuracy :{}\".format(accuracy_score(y_test, lr.predict(X_test))))","ff2d7a89":"y_pred_lr = lr.predict(X_test)","48ac105a":"y_pred_proba_lr = lr.predict_proba(X_test)[:, 1]","9a69ce2a":"sns.heatmap(confusion_matrix(y_test, y_pred_lr), annot=True)\nplt.title(\"Confusion Matrix\")\nplt.show()","f26dd51a":"print(\"Classification Report\")\nprint(classification_report(y_test, y_pred_lr))","0ecda275":"print(\"AUC Score: {}\".format(roc_auc_score(y_test, y_pred_proba_lr)))","de732a16":"from sklearn.model_selection import cross_val_score\nlr_acc = np.mean(cross_val_score(lr, X, y, cv=10, scoring='accuracy')) \nprint(\"Cross Validation accuracy: {}\".format(lr_acc))","ffc6d926":"from sklearn.svm import SVC\nsvc = SVC(probability=True)\nsvc.fit(X_train, y_train)","d0690688":"print(\"Train accuracy :{}\".format(accuracy_score(y_train, svc.predict(X_train))))\nprint(\"Test accuracy :{}\".format(accuracy_score(y_test, svc.predict(X_test))))","dbca5bf9":"y_pred_svc = svc.predict(X_test)","0e93a40b":"y_pred_proba_svc = svc.predict_proba(X_test)[:, 1]","9f75aa64":"sns.heatmap(confusion_matrix(y_test, y_pred_svc), annot=True)\nplt.title(\"Confusion Matrix\")\nplt.show()","76477ec8":"print(\"Classification Report\")\nprint(classification_report(y_test, y_pred_svc))","746e2255":"print(\"AUC Score: {}\".format(roc_auc_score(y_test, y_pred_proba_svc)))","222f8605":"from sklearn.model_selection import cross_val_score\nsvc_acc = np.mean(cross_val_score(svc, X, y, cv=10, scoring='accuracy')) \nprint(\"Cross Validation accuracy: {}\".format(svc_acc))","597ff618":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)","e973061b":"print(\"Train accuracy :{}\".format(accuracy_score(y_train, dt.predict(X_train))))\nprint(\"Test accuracy :{}\".format(accuracy_score(y_test, dt.predict(X_test))))","fe7e5d59":"y_pred_dt = dt.predict(X_test)","d63716e5":"y_pred_proba_dt = dt.predict_proba(X_test)[:, 1]","a79bed3d":"sns.heatmap(confusion_matrix(y_test, y_pred_dt), annot=True)\nplt.title(\"Confusion Matrix\")\nplt.show()","7cf14ca7":"print(\"Classification Report\")\nprint(classification_report(y_test, y_pred_dt))","a7593010":"print(\"AUC Score: {}\".format(roc_auc_score(y_test, y_pred_proba_dt)))","e3e2d4ad":"from sklearn.model_selection import cross_val_score\ndt_acc = np.mean(cross_val_score(dt, X, y, cv=10, scoring='accuracy')) \nprint(\"Cross Validation accuracy: {}\".format(dt_acc))","062ef848":"fpr_lr, tpr_lr, threshold_lr = roc_curve(y_test, y_pred_proba_lr)\nfpr_svc, tpr_svc, threshold_svc = roc_curve(y_test, y_pred_proba_svc)\nfpr_dt, tpr_dt, threshold_dt = roc_curve(y_test, y_pred_proba_dt)\n\nplt.style.use('seaborn-whitegrid')\nplt.figure(figsize=(8, 5))\nplt.plot(fpr_lr, tpr_lr, label=\"Logistic Regression\")\nplt.plot(fpr_svc, tpr_svc, label=\"Support Vector Classifier\")\nplt.plot(fpr_dt, tpr_dt, label=\"Decision Tree Classifier\")\n\nplt.legend(loc='lower right', frameon=True)\nplt.title(\"ROC Curve\")\nplt.ylabel(\"TPR\")\nplt.xlabel(\"FPR\")\nplt.show()","73467127":"from sklearn.model_selection import GridSearchCV\n\nparams = {'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}\n\ngrid = GridSearchCV(estimator=lr, param_grid=params, cv=10, scoring='accuracy', n_jobs=-1)\ngrid.fit(X,y)","2455474a":"grid.best_params_","53ec9bf3":"grid.best_score_","37d9d4c3":"from sklearn.model_selection import RandomizedSearchCV\n\nparams = { 'C': [1, 10, 100, 1000],\n           'kernel': ['poly'],\n           'degree': [2, 3, 4],\n         }\n\nrandom = RandomizedSearchCV(svc, param_distributions=params, cv=10, scoring='accuracy', n_jobs=-1)\nrandom.fit(X,y)","948d311e":"random.best_params_","5bfab2c1":"random.best_score_","551b87b1":"from sklearn.model_selection import GridSearchCV\n\nparams = { 'max_depth': [3, 4, 5],\n           'min_samples_split': [2, 3],\n           'min_samples_leaf': [1, 2, 3]}\n\ngrid = GridSearchCV(estimator=dt, param_grid=params, cv=10, scoring='accuracy', n_jobs=-1)\ngrid.fit(X,y)","0e33f368":"grid.best_params_","c5283d89":"grid.best_score_","10544c58":"from sklearn.ensemble import VotingClassifier\nclassifiers = [('Logistic Regression', lr), ('Support Vector Classifier', svc), ('Decision Tree Classifier', dt)]\nvc = VotingClassifier(estimators=classifiers, voting='soft')\nvc.fit(X_train, y_train)","d398a898":"y_pred_vc = vc.predict(X_test)","3f9d976f":"y_pred_proba_vc = vc.predict_proba(X_test)[:, 1]","7089ec77":"sns.heatmap(confusion_matrix(y_test, y_pred_vc), annot=True)\nplt.title(\"Confusion Matrix\")\nplt.show()","661efb4b":"print(\"Classification Report\")\nprint(classification_report(y_test, y_pred_vc))","7ad8713f":"print(\"AUC Score: {}\".format(roc_auc_score(y_test, y_pred_proba_vc)))","9d24e5d7":"from sklearn.model_selection import cross_val_score\nvc_acc = np.mean(cross_val_score(vc, X, y, cv=10, scoring='accuracy')) \nprint(\"Cross Validation accuracy: {}\".format(vc_acc))","aef5c5a3":"### Loading the dataset - ","126b25bd":"### Tuning the Hyperparameters 'C', 'kernel' & 'degree' for Support Vector Classifier -","55683c7e":"### Importing required libraries -","80bdfc8f":"### Checking for null values - ","dc09395a":"### Tuning the Hyperparameter 'C' for Logistic Regression -","c0597a56":"Checking the 'Insulin' column -","c2d68f5a":"### Performing train-test split -","f4a75b90":"### Checking for duplicate rows -","22b501c7":"Checking the 'DiabetesPedigreeFunction' column -","80c738ac":"### Checking the distribution of data -","1d70a869":"### Tuning the Hyperparameters 'max_depth', 'min_samples_split' & 'min_samples_leaf' for Decision Tree -","ea41b1b1":"Checking the 'Pregnancies' column -","fb47defa":"> If you find this notebook useful then please provide your valuble feedback.\n \n> Any kind of suggestions are welcomed. \n \n> Don't forget to upvote if you like my work.","1de18ba3":"Checking the 'SkinThickness' column -","82dd1668":"### Performing EDA -","02028b89":"## Decision Tree Classifier","43f6f5a6":"## Voting Classifier","04572852":"### Scaling the data -","b1a468c8":"### Checking the accuracies for 3 different models -","2690f961":"### Checking Correlation between Dependent & Independent variables -","bd210a74":"### Checking the outcome labels - ","bc407953":"Checking the 'Glucose' column -","4aeb31e8":"### Plotting ROC Curve for all 3 models to compare their accuracies -","1ab08982":"Checking the 'BloodPressure' column -","5ee5acc1":"Checking the 'BMI' column -","d4b92286":"### Outlier Detection & Removal -","644cc4fd":"## Support Vector Classifier","0f9eb36c":"## Logistic Regression","163b8e7c":"Checking the 'Age' column -","3dca426d":"### Seperating Dependent and Independent features - ","e6c1c911":"### Importing Performance Metrics for Classification -"}}