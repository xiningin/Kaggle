{"cell_type":{"72229420":"code","2aed0316":"code","503cd780":"code","28e5e5cc":"code","d5e79bea":"code","1f0c05a3":"code","18a8b28c":"code","a8f805f8":"code","f92cd773":"code","01fad11c":"code","df5cc417":"code","10d028db":"code","292c30a4":"code","2377cb30":"code","da7026a2":"code","ec92f669":"code","6f91a06c":"code","71cfcab8":"code","c967baa5":"code","6215a230":"code","61bb1c4f":"code","05b7b5a0":"code","33e233df":"code","33f1f0ef":"code","0eea96f2":"code","234f012e":"code","afc7692c":"code","a15b39de":"code","00d7d392":"code","5e576873":"markdown","887dd492":"markdown","bbb8ea1d":"markdown","d89720c7":"markdown","331beacd":"markdown"},"source":{"72229420":"import numpy as np\nimport pandas as pd\nfrom PIL import Image\nfrom matplotlib import pyplot as plt\nimport os\nimport math","2aed0316":"'''Pulling the photos from folders with their paths'''\n\npath_0 = []\ntrain_path_0 = \"..\/input\/hand-sign-language-digit-dataset-for-0-5\/0\/\"                #zero\nfor path in os.listdir(train_path_0):\n    if '.JPG' in path:\n        path_0.append(os.path.join(train_path_0, path))\n        \npath_1 = []\ntrain_path_1 = \"..\/input\/hand-sign-language-digit-dataset-for-0-5\/1\/\"                #one\nfor path in os.listdir(train_path_1):\n    if '.JPG' in path:\n        path_1.append(os.path.join(train_path_1, path))\n        \npath_2 = []\ntrain_path_2 = \"..\/input\/hand-sign-language-digit-dataset-for-0-5\/2\/\"                #two\nfor path in os.listdir(train_path_2):\n    if '.JPG' in path:\n        path_2.append(os.path.join(train_path_2, path))\n        \npath_3 = []\ntrain_path_3 = \"..\/input\/hand-sign-language-digit-dataset-for-0-5\/3\/\"                #three\nfor path in os.listdir(train_path_3):\n    if '.JPG' in path:\n        path_3.append(os.path.join(train_path_3, path))\n        \npath_4 = []\ntrain_path_4 = \"..\/input\/hand-sign-language-digit-dataset-for-0-5\/4\/\"                #four\nfor path in os.listdir(train_path_4):\n    if '.JPG' in path:\n        path_4.append(os.path.join(train_path_4, path))\n        \npath_5 = []\ntrain_path_5 = \"..\/input\/hand-sign-language-digit-dataset-for-0-5\/5\/\"                #five\nfor path in os.listdir(train_path_5):\n    if '.JPG' in path:\n        path_5.append(os.path.join(train_path_5, path))\n\nlen(path_0), len(path_1), len(path_2), len(path_3), len(path_4), len(path_5)","503cd780":"'''Load training set'''\n\n'''total pics in training set =  1237\n    training_set = 1110 --- 185 for each digit\n    validation_set = 120 --- 20 for each digit'''\n\ntrain_set_orig = np.zeros((1110, 64, 64, 3), dtype='float32')\nfor i in range(185):                                                                #loading \"zero\"\n    image = Image.open(path_0[i])\n    img_resized = image.resize((64,64))\n    train_set_orig[i] = np.asarray(img_resized)\n\nfor i in range(185, 370):                                                           #loading \"one\"\n    image = Image.open(path_1[i - 185])\n    img_resized = image.resize((64,64))\n    train_set_orig[i] = np.asarray(img_resized)\n        \nfor i in range(370, 555):                                                           #loading \"two\"\n    image = Image.open(path_2[i - 370])\n    img_resized = image.resize((64,64))\n    train_set_orig[i] = np.asarray(img_resized)\n        \nfor i in range(555, 740):                                                           #loading \"three\"\n    image = Image.open(path_3[i - 555])\n    img_resized = image.resize((64,64))\n    train_set_orig[i] = np.asarray(img_resized)\n        \nfor i in range(740, 925):                                                           #loading \"four\"\n    image = Image.open(path_4[i - 740])\n    img_resized = image.resize((64,64))\n    train_set_orig[i] = np.asarray(img_resized)\n        \nfor i in range(925, 1110):                                                          #loading \"five\"\n    image = Image.open(path_5[i - 925])\n    img_resized = image.resize((64,64))\n    train_set_orig[i] = np.asarray(img_resized)\n","28e5e5cc":"'''Load validation set'''\n\nval_set_orig = np.zeros((120, 64, 64, 3), dtype='float32')\nfor i in range(20):                                                                 #loading \"zero\"\n    image = Image.open(path_0[i + 185])\n    img_resized = image.resize((64,64))\n    val_set_orig[i] = np.asarray(img_resized)\n    \nfor i in range(20, 40):                                                             #loading \"one\"\n    image = Image.open(path_1[i + 165])\n    img_resized = image.resize((64,64))\n    val_set_orig[i] = np.asarray(img_resized)\n    \nfor i in range(40, 60):                                                             #loading \"two\"\n    image = Image.open(path_2[i + 145])\n    img_resized = image.resize((64,64))\n    val_set_orig[i] = np.asarray(img_resized)\n    \nfor i in range(60, 80):                                                             #loading \"three\"\n    image = Image.open(path_3[i + 125])\n    img_resized = image.resize((64,64))\n    val_set_orig[i] = np.asarray(img_resized)\n\nfor i in range(80, 100):                                                            #loading \"four\"\n    image = Image.open(path_4[i + 105])\n    img_resized = image.resize((64,64))\n    val_set_orig[i] = np.asarray(img_resized)\n    \nfor i in range(100, 120):                                                           #loading \"five\"\n    image = Image.open(path_5[i + 85])\n    img_resized = image.resize((64,64))\n    val_set_orig[i] = np.asarray(img_resized)","d5e79bea":"'''Labelling the training set having 6-dimensional vector of o's and 1's with 1 where index = digit and zero otherwise'''\n\ntrain_y_ = np.zeros((1110, 6))\nfor i in range(185):                                                               #labelling \"zero\"\n    train_y_[i, 0] = 1\n\nfor i in range(185, 370):                                                          #labelling \"one\"\n    train_y_[i, 1] = 1\n        \nfor i in range(370, 555):                                                          #labelling \"two\"\n    train_y_[i, 2] = 1\n        \nfor i in range(555, 740):                                                          #labelling \"three\"\n    train_y_[i, 3] = 1\n    \nfor i in range(740, 925):                                                          #labelling \"four\"\n    train_y_[i, 4] = 1\n        \nfor i in range(925, 1110):                                                         #labelling \"five\"\n    train_y_[i, 5] = 1\n","1f0c05a3":"'''Labelling the validation set having 6-dimensional vector of o's and 1's with 1 where index = digit and zero otherwise'''\n\nval_y_ = np.zeros((120, 6))\nfor i in range(20):                                                                 #labelling \"zero\"\n    val_y_[i, 0] = 1\n\nfor i in range(20, 40):                                                             #labelling \"one\"\n    val_y_[i, 1] = 1\n        \nfor i in range(40, 60):                                                             #labelling \"two\"\n    val_y_[i, 2] = 1\n        \nfor i in range(60, 80):                                                             #labelling \"three\"\n    val_y_[i, 3] = 1\n        \nfor i in range(80, 100):                                                            #labelling \"four\"\n    val_y_[i, 4] = 1\n        \nfor i in range(100, 120):                                                           #labelling \"five\"\n    val_y_[i, 5] = 1\n","18a8b28c":"''''Suffling training set pics'''\n\nnp.random.seed(0)\nm_train = train_set_orig.shape[0]\npermutation = list(np.random.permutation(m_train))\ntrain_set_x = train_set_orig[permutation, :]\ntrain_y = train_y_[permutation, :].T\n\n''''Suffling validation set pics'''\n\nnp.random.seed(1)\nm_val = val_set_orig.shape[0]\npermutation = list(np.random.permutation(m_val))\nval_set_x = val_set_orig[permutation, :]\nval_y = train_y_[permutation, :].T","a8f805f8":"'''Example of an image'''\n\nindex = 100\nplt.imshow(np.uint8(train_set_x[index]), interpolation='nearest')\nplt.show()\nprint(train_y[:, index])","f92cd773":"m_train = train_set_x.shape[0]\nm_val = val_set_x.shape[0]\nnum_px = train_set_x.shape[1]\n\nprint (\"Number of training examples: m_train = \" + str(m_train))\nprint (\"Number of validation examples: m_val = \" + str(m_val))\nprint (\"Height\/Width of each image: num_px = \" + str(num_px))\nprint (\"Each image is of size: (\" + str(num_px) + \", \" + str(num_px) + \", 3)\")\nprint (\"train_set_x shape: \" + str(train_set_x.shape))\nprint (\"train_set_y shape: \" + str(train_y.shape))\nprint (\"val_set_x shape: \" + str(val_set_x.shape))\nprint (\"val_set_y shape: \" + str(val_y.shape))","01fad11c":"train_x = train_set_x.reshape(1110,-1).T\nval_x = val_set_x.reshape(120,-1).T\n\nprint (\"train_set_x_flatten shape: \" + str(train_x.shape))\nprint (\"train_set_y shape: \" + str(train_y.shape))\nprint (\"val_set_x_flatten shape: \" + str(val_x.shape))\nprint (\"val_set_y shape: \" + str(val_y.shape))","df5cc417":"'''Standardizing dataset'''\n\ntrain_x = train_x \/255\nval_x = val_x\/255","10d028db":"def sigmoid(z):\n    \n    '''Compute the sigmoid of z\n    Arguments:\n    z -- A scalar or numpy array of any size.\n    Return:\n    s -- sigmoid(z)'''\n    \n    s = 1\/(1 + np.exp(-z))\n    \n    return s, z","292c30a4":"def softmax(z):\n    \n    '''Compute the softmax of z\n    Arguments:\n    z -- A scalar or numpy array of any size.\n    Return:\n    s -- softmax(z)'''\n    \n    s = np.exp(z) \/ np.sum(np.exp(z), axis=0)\n    \n    return s, z","2377cb30":"def initialize_parameters(layer_dims):\n    \n    \"\"\"Arguments:\n    layer_dims -- python array (list) containing the dimensions of each layer in our network\n    Returns:\n    parameters -- python dictionary containing your parameters \"W1\", \"b1\", ..., \"WL\",\"bL\":\n    Wl -- weight matrix of shape (layer_dims[l], layer_dims[l-1])\n    bl -- bias vector of shape (layer_dims[l], 1)\"\"\"\n    \n    np.random.seed(3)\n    parameters = {}\n    L = len(layer_dims)                                                                              #number of layers in the network\n    for l in range(1, L):\n        parameters['W' + str(l)] = np.random.randn(layer_dims[l], layer_dims[l-1])*0.01\n        parameters['b' + str(l)] = np.zeros((layer_dims[l], 1))\n        \n    assert(parameters['W' + str(l)].shape == (layer_dims[l], layer_dims[l-1]))\n    assert(parameters['b' + str(l)].shape == (layer_dims[l], 1))\n    \n    return parameters","da7026a2":"def linear_forward(A, W, b):\n    \n    \"\"\"Implement the linear part of a layer's forward propagation.\n    Arguments:\n    A -- activations from previous layer (or input data): (size of previous layer, number of examples)\n    W -- weights matrix: numpy array of shape (size of current layer, size of previouslayer)\n    b -- bias vector, numpy array of shape (size of the current layer, 1)\n    Returns:\n    Z -- the input of the activation function, also called pre-activation parameter\n    cache -- a python tuple containing \"A\", \"W\" and \"b\" ; stored for computing the backward pass efficiently\"\"\"\n    \n    Z = np.dot(W, A) + b\n    \n    assert(Z.shape == (W.shape[0], A.shape[1]))\n    \n    cache = (A, W, b)\n    \n    return Z, cache","ec92f669":"def linear_activation_forward(A_prev, W, b, activation):\n    \n    \"\"\"Implement the forward propagation for the LINEAR->ACTIVATION layer\n    Arguments:\n    A_prev -- activations from previous layer (or input data): (size of previous layer, number of examples)\n    W -- weights matrix: numpy array of shape (size of current layer, size of previous layer)\n    b -- bias vector, numpy array of shape (size of the current layer, 1)\n    activation -- the activation to be used in this layer, stored as a text string: \"sigmoid\" or \"softmax\"\n    Returns:\n    A -- the output of the activation function, also called the post-activation value\n    cache -- a python tuple containing \"linear_cache\" and \"activation_cache\"; stored for computing the backward pass efficiently\"\"\"\n    \n    if activation == \"sigmoid\":\n        Z, linear_cache = linear_forward(A_prev, W, b)\n        A, activation_cache = sigmoid(Z)\n    else:\n        Z, linear_cache = linear_forward(A_prev, W, b)\n        A, activation_cache = softmax(Z)\n        \n    assert (A.shape == (W.shape[0], A_prev.shape[1]))\n    \n    cache = (linear_cache, activation_cache)\n    \n    return A, cache","6f91a06c":"def forward_propagation(X, parameters):\n    \n    \"\"\"Implement forward propagation for the [LINEAR->SIGMOID]*(L-1)->LINEAR->SOFTMAX computation\n    Arguments:\n    X -- data, numpy array of shape (input size, number of examples)\n    parameters -- output of initialize_parameters_deep()\n    Returns:\n    AL -- last post-activation value\n    caches -- list of caches containing: every cache of linear_activation_forward() (there are L-1 of them, indexed from 0 to L-1)\"\"\"\n    \n    caches = []\n    A = X\n    L = len(parameters) \/\/ 2                                                             #number of layers in the neural network\n    \n    #Implement [LINEAR -> SIGMOID]*(L-1). Add \"cache\" to the \"caches\" list.\n    \n    for l in range(1, L):\n        A_prev = A\n        A, cache = linear_activation_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)], activation = \"sigmoid\")\n        caches.append(cache)\n    AL, cache = linear_activation_forward(A, parameters['W' + str(L)], parameters['b' + str(L)], activation = \"softmax\")\n    caches.append(cache)\n    \n    assert(AL.shape == (6,X.shape[1]))\n    \n    return AL, caches","71cfcab8":"def compute_cost(AL, Y):\n    \n    \"\"\"Implement the cost function.\n    Arguments:\n    AL -- probability vector corresponding to your label predictions, shape (6, number of examples)\n    Y -- true \"label\" vector, shape (6, number of examples)\n    Returns:\n    cost -- cross-entropy cost\"\"\"\n    \n    m = Y.shape[1]\n    cost = -np.sum(Y * np.log(AL) + (1 - Y) * np.log(1 - AL))\/m\n    cost = np.squeeze(cost)\n    \n    assert(cost.shape == ())\n    \n    return cost","c967baa5":"def linear_backward(dZ, cache):\n    \n    \"\"\"Implement the linear portion of backward propagation for a single layer (layer l)\n    Arguments:\n    dZ -- Gradient of the cost with respect to the linear output (of current layer l)\n    cache -- tuple of values (A_prev, W, b) coming from the forward propagation in the current layer\n    Returns:\n    dA_prev -- Gradient of the cost with respect to the activation (of the previous layer l-1), same shape as A_prev\n    dW -- Gradient of the cost with respect to W (current layer l), same shape as W\n    db -- Gradient of the cost with respect to b (current layer l), same shape as b\"\"\"\n    \n    A_prev, W, b = cache\n    m = A_prev.shape[1]\n    dW = np.dot(dZ, A_prev.T)\/m\n    db = np.sum(dZ, axis = 1, keepdims = True)\/m\n    dA_prev = np.dot(W.T, dZ)\n    \n    assert (dA_prev.shape == A_prev.shape)\n    assert (dW.shape == W.shape)\n    assert (db.shape == b.shape)\n    \n    return dA_prev, dW, db","6215a230":"def sigmoid_backward(dA, Z):\n    \n    '''Implements the backward propagation for SIGMOID unit. \n    Arguments:\n    dA -- post-activation gradient for current layer l\n    Z -- activation cache for current layer l\n    Returns:\n    dZ -- dA \u2217 g\u2032(Z), g(.) is the sigmoid function'''\n    \n    A, activation_cache = sigmoid(Z)\n    dZ = dA * (A * (1 - A))\n    \n    return dZ","61bb1c4f":"def linear_activation_backward(dA, cache):\n    \n    \"\"\"Implement the backward propagation for the LINEAR->ACTIVATION layer.\n    Arguments:\n    dA -- post-activation gradient for current layer l\n    cache -- tuple of values (linear_cache, activation_cache) we store for computing backward propagation efficiently\n    Returns:\n    dA_prev -- Gradient of the cost with respect to the activation (of the previous layer l-1), same shape as A_prev\n    dW -- Gradient of the cost with respect to W (current layer l), same shape as W\n    db -- Gradient of the cost with respect to b (current layer l), same shape as b\"\"\"\n    \n    linear_cache, activation_cache = cache\n    dZ = sigmoid_backward(dA, activation_cache)\n    dA_prev, dW, db = linear_backward(dZ, linear_cache)\n    \n    return dA_prev, dW, db","05b7b5a0":"def backward_propagation(AL, Y, caches):\n    \n    \"\"\"Implement the backward propagation for the [LINEAR->SIGMOID] * (L-1) -> LINEAR -> SOFTMAX group\n    Arguments:\n    AL -- probability vector, output of the forward propagation (L_model_forward())\n    Y -- true \"label\" vector\n    caches -- list of caches containing: every cache of linear_activation_forward() with \"sigmoid\" (it's caches[l],\n    for l in range(L-1) i.e l = 0...L-2) the cache of linear_activation_forward() with \"softmax\" (it's caches[L-1])\n    Returns:\n    grads -- A dictionary with the gradients\n    grads[\"dA\" + str(l)] = ...\n    grads[\"dW\" + str(l)] = ...\n    grads[\"db\" + str(l)] = ...\"\"\"\n    \n    grads = {}\n    L = len(caches)                                                                        #number of layers\n    m = AL.shape[1]\n    Y = Y.reshape(AL.shape)                                                                #after this line, Y is the same shape as AL\n    \n    #Initializing the backpropagation\n    \n    dZL = AL - Y\n    \n    current_cache = caches[L-1]\n    linear_cache, activation_cache = caches[L - 1]\n    A_prev, W, b = linear_cache\n    grads[\"dW\" + str(L)] = np.dot(dZL, A_prev.T)\/m\n    grads[\"db\" + str(L)] = np.sum(dZL, axis = 1, keepdims = True)\/m\n    grads[\"dA\" + str(L-1)] = np.dot(W.T, dZL)\n    \n    for l in reversed(range(L - 1)):                                                       # lth layer: (SIGMOID -> LINEAR) gradients.\n        current_cache = caches[l]\n        dA_prev_temp, dW_temp, db_temp = linear_activation_backward(grads[\"dA\" + str(l + 1)], current_cache)\n        grads[\"dA\" + str(l)] = dA_prev_temp\n        grads[\"dW\" + str(l + 1)] = dW_temp\n        grads[\"db\" + str(l + 1)] = db_temp\n        \n    return grads","33e233df":"def random_mini_batches(X, Y, mini_batch_size, seed = 0):\n    \n    '''Creates a list of random minibatches from (X, Y)\n    Arguments:\n    X -- input data, of shape (number of examples, input size)\n    Y -- true \"label\" vector (1 for cat \/ 0 for dog), of shape (number of examples, 1)\n    mini_batch_size -- size of the mini-batches, integer\n    Returns:\n    mini_batches -- list of synchronous (mini_batch_X, mini_batch_Y)'''\n    \n    np.random.seed(seed)            \n    m = X.shape[1]                                                          #number of training examples\n    mini_batches = []\n        \n    #Shuffle (X, Y)\n    \n    permutation = list(np.random.permutation(m))\n    shuffled_X = X[:, permutation]\n    shuffled_Y = Y[:, permutation]\n\n    #Partition (shuffled_X, shuffled_Y). Minus the end case.\n    \n    num_complete_minibatches = math.floor(m\/mini_batch_size)                #number of mini batches of size mini_batch_size in your partitionning\n    \n    for k in range(0, num_complete_minibatches):\n        mini_batch_X = shuffled_X[:, k*mini_batch_size:(k+1)*mini_batch_size]\n        mini_batch_Y = shuffled_Y[:, k*mini_batch_size:(k+1)*mini_batch_size]\n        mini_batch = (mini_batch_X, mini_batch_Y)\n        mini_batches.append(mini_batch)\n    \n    #Handling the end case (last mini-batch < mini_batch_size)\n    \n    if m % mini_batch_size != 0:\n        mini_batch_X = shuffled_X[:, mini_batch_size * num_complete_minibatches::]\n        mini_batch_Y = shuffled_Y[:, mini_batch_size * num_complete_minibatches::]\n        mini_batch = (mini_batch_X, mini_batch_Y)\n        mini_batches.append(mini_batch)\n    \n    return mini_batches","33f1f0ef":"def initialize_adam(parameters) :\n    \n    \"\"\"Initializes v and s as two python dictionaries with:\n    - keys: \"dW1\", \"db1\", ..., \"dWL\", \"dbL\" \n    - values: numpy arrays of zeros of the same shape as the corresponding gradients\/parameters.\n    Arguments:\n    parameters -- python dictionary containing your parameters.\n                  parameters[\"W\" + str(l)] = Wl\n                  parameters[\"b\" + str(l)] = bl\n    Returns: \n    v -- python dictionary that will contain the exponentially weighted average of the gradient.\n                    v[\"dW\" + str(l)] = ...\n                    v[\"db\" + str(l)] = ...\n    s -- python dictionary that will contain the exponentially weighted average of the squared gradient.\n                    s[\"dW\" + str(l)] = ...\n                    s[\"db\" + str(l)] = ...\"\"\"\n    \n    L = len(parameters) \/\/ 2                                                  #number of layers in the neural networks\n    v = {}\n    s = {}\n    \n    for l in range(L):\n        v[\"dW\" + str(l+1)] = np.zeros((parameters[\"W\" + str(l+1)].shape))\n        v[\"db\" + str(l+1)] = np.zeros((parameters[\"b\" + str(l+1)].shape))\n        s[\"dW\" + str(l+1)] = np.zeros((parameters[\"W\" + str(l+1)].shape))\n        s[\"db\" + str(l+1)] = np.zeros((parameters[\"b\" + str(l+1)].shape))\n        \n    return v, s","0eea96f2":"def update_parameters_with_adam(parameters, grads, v, s, t, learning_rate = 0, beta1 = 0.9, beta2 = 0.999,  epsilon = 1e-8):\n    \n    \"\"\"Update parameters using Adam\n    Arguments:\n    parameters -- python dictionary containing your parameters:\n                  parameters['W' + str(l)] = Wl\n                  parameters['b' + str(l)] = bl\n    grads -- python dictionary containing your gradients for each parameters:\n             grads['dW' + str(l)] = dWl\n             grads['db' + str(l)] = dbl\n    v -- Adam variable, moving average of the first gradient, python dictionary\n    s -- Adam variable, moving average of the squared gradient, python dictionary\n    learning_rate -- the learning rate, scalar.\n    beta1 -- Exponential decay hyperparameter for the first moment estimates \n    beta2 -- Exponential decay hyperparameter for the second moment estimates \n    epsilon -- hyperparameter preventing division by zero in Adam updates\n    Returns:\n    parameters -- python dictionary containing your updated parameters \n    v -- Adam variable, moving average of the first gradient, python dictionary\n    s -- Adam variable, moving average of the squared gradient, python dictionary\"\"\"\n    \n    L = len(parameters) \/\/ 2                                                          #number of layers in the neural networks\n    v_corrected = {}                                                                  #Initializing first moment estimate, python dictionary\n    s_corrected = {}                                                                  #Initializing second moment estimate, python dictionary\n    \n    for l in range(L):\n        #Moving average of the gradients.\n        \n        v[\"dW\" + str(l+1)] = beta1*v['dW' + str(l+1)] + (1 - beta1)*grads['dW' + str(l+1)]\n        v[\"db\" + str(l+1)] = beta1*v['db' + str(l+1)] + (1 - beta1)*grads['db' + str(l+1)]\n\n        #Compute bias-corrected first moment estimate.\n        \n        v_corrected[\"dW\" + str(l+1)] = v[\"dW\" + str(l+1)]\/(1 - beta1**t)\n        v_corrected[\"db\" + str(l+1)] = v[\"db\" + str(l+1)]\/(1 - beta1**t)\n\n        #Moving average of the squared gradients.\n        \n        s[\"dW\" + str(l+1)] = beta2*s[\"dW\" + str(l+1)] + (1 - beta2)*(grads['dW' + str(l+1)]**2)\n        s[\"db\" + str(l+1)] = beta2*s[\"db\" + str(l+1)] + (1 - beta2)*(grads['db' + str(l+1)]**2)\n\n        #Compute bias-corrected second raw moment estimate.\n        \n        s_corrected[\"dW\" + str(l+1)] = s[\"dW\" + str(l+1)]\/(1 - beta2**t)\n        s_corrected[\"db\" + str(l+1)] = s[\"db\" + str(l+1)]\/(1 - beta2**t)\n\n        #Update parameters.\n        \n        parameters[\"W\" + str(l+1)] = parameters[\"W\" + str(l+1)] - learning_rate*(v_corrected[\"dW\" + str(l+1)])\/(np.sqrt(s_corrected[\"dW\" + str(l+1)]) + epsilon)\n        parameters[\"b\" + str(l+1)] = parameters[\"b\" + str(l+1)] - learning_rate*(v_corrected[\"db\" + str(l+1)])\/(np.sqrt(s_corrected[\"db\" + str(l+1)]) + epsilon)\n\n    return parameters, v, s","234f012e":"def predict(Y):\n    \n    '''Predict whether the labels using learned parameters (w, b)\n    Arguments:\n    Y -- a numpy array (vector) containing true labels\n    Returns:\n    Y_prediction -- a numpy array (vector) containing all predictions'''\n    \n    m = Y.shape[1]\n    Y_prediction = np.zeros(Y.shape)\n\n    for i in range(m):\n        c = np.where(Y[:, i] == np.amax(Y[:, i]))\n        Y_prediction[c[0], i] = 1\n        \n    return Y_prediction","afc7692c":"def model(X, Y, X_val, Y_val, layers_dims, learning_rate = 0.01, mini_batch_size = 32, beta1 = 0.9, beta2 = 0.999, epsilon = 1e-8, num_epochs = 10000, print_cost = True):\n    \n    \"\"\"L-layer neural network model which can be run in adam optimizer modes.\n    Arguments:\n    X -- data, numpy array of shape (input size, number of examples)\n    Y -- true \"label\" vector, of shape (6, number of examples)\n    X_val -- test set represented by a numpy array of shape (m_test, num_px * num_px * 3)\n    Y_val -- test labels represented by a numpy array (vector) of shape (m_test, 6)\n    layers_dims -- python list, containing the size of each layer\n    learning_rate -- the learning rate\n    mini_batch_size -- the size of a mini batch\n    beta1 -- Exponential decay hyperparameter for the past gradients estimates \n    beta2 -- Exponential decay hyperparameter for the past squared gradients estimates \n    epsilon -- hyperparameter preventing division by zero in Adam updates\n    num_epochs -- number of epochs\n    print_cost -- True to print the cost every 50 epochs\n    Returns:\n    d -- dictionary containing information about the model.\"\"\"\n\n    d = {}\n    L = len(layers_dims)                                        #number of layers in the neural networks\n    costs = []                                                  #to keep track of the cost\n    t = 0                                                       #initializing the counter required for Adam update\n    seed = 10                                                   #For grading purposes, so that your \"random\" minibatches are the same as ours\n    \n    #Initialize parameters\n    \n    parameters = initialize_parameters(layers_dims)\n    \n    v, s = initialize_adam(parameters)\n    \n    #Optimization loop\n    \n    for i in range(num_epochs):\n        \n        #Define the random minibatches. We increment the seed to reshuffle differently the dataset after each epoch\n        \n        seed = seed + 1\n        minibatches = random_mini_batches(X, Y, mini_batch_size, seed)\n        m = len(minibatches)\n        cost_total = 0\n        \n        for minibatch in minibatches:\n\n            #Select a minibatch\n            \n            (minibatch_X, minibatch_Y) = minibatch\n\n            #Forward propagation\n            \n            AL, caches = forward_propagation(minibatch_X, parameters)\n\n            #Compute cost and add to the cost total\n            \n            cost_total += compute_cost(AL, minibatch_Y)\n\n            #Backward propagation\n            \n            grads = backward_propagation(AL, minibatch_Y, caches)\n\n            #Update parameters\n            \n            t = t + 1                                                                                  #Adam counter\n            parameters, v, s = update_parameters_with_adam(parameters, grads, v, s, t, learning_rate, beta1, beta2,  epsilon)\n        cost_avg = cost_total \/ m\n        \n        #Print the cost every 100 epoch\n        \n        if print_cost and i % 50 == 0:\n            print (\"Cost after epoch %i: %f\" %(i, cost_avg))\n        if print_cost and i % 50 == 0:\n            costs.append(cost_avg)\n            \n    AL_train, c1 = forward_propagation(X, parameters)\n    AL_val, c2 = forward_propagation(X_val, parameters)\n    Y_prediction_val = predict(AL_val)\n    Y_prediction_train = predict(AL_train)\n    \n    print(\"train set accuracy for model: {} %\".format(100 - np.mean(np.abs(Y_prediction_train - Y)) * 100))\n    print(\"validation set accuracy for model: {} %\".format(100 - np.mean(np.abs(Y_prediction_val - Y_val)) * 100))\n                \n    d = {\"costs\": costs,\n         \"Y_prediction_val\": Y_prediction_val,\n         \"Y_prediction_train\" : Y_prediction_train,\n         \"parameters\": parameters,\n         \"learning_rate\": learning_rate,\n         \"num_epochs\": num_epochs}\n    \n    return d","a15b39de":"layers_dims = [12288, 24, 12, 6]\nd = model(train_x, train_y, val_x, val_y, layers_dims, learning_rate = 0.0001, mini_batch_size = 32, beta1 = 0.9, beta2 = 0.999,  epsilon = 1e-8, num_epochs = 500, print_cost = True)","00d7d392":"plt.plot(d[\"costs\"], c=\"r\", linewidth=1)\nplt.ylabel('cost', fontsize=14)\nplt.xlabel(\"number of epochs (per 50)\", fontsize=14)\nplt.title(\"Learning rate = \" + str(d[\"learning_rate\"]))\nplt.grid()","5e576873":"***Model For Sign language Prediction***","887dd492":"***Summary of Processed data***","bbb8ea1d":"***Pre-Processing the dataset***","d89720c7":"***Flattening the training and validation arrays***","331beacd":"***Learning Curve***"}}