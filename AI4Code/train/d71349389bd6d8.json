{"cell_type":{"1e2a0001":"code","1eaeab32":"code","66a1d9a6":"code","998c0065":"code","6efa382c":"code","f0ad1dc1":"code","3e26cb0e":"code","b5a57d86":"code","6391fcea":"code","f19f36c9":"code","f534e696":"code","f9b075c1":"code","95d45e51":"code","25374d5f":"code","10f7e29a":"code","2aa1b5f4":"code","b16e2c4d":"code","b5927993":"code","89bf6bdc":"code","851c7acd":"code","2b392843":"code","67bd0bda":"code","6b8ad131":"code","5f6e181c":"code","1ded248e":"code","05322189":"code","02145d33":"code","94d6129a":"code","45c65e6a":"code","18f8882a":"code","9e2e5371":"code","b060df98":"code","70ef59fc":"code","f5cf80c6":"code","6f024c86":"code","70c15979":"code","c55f2d48":"code","a6aa3d51":"code","537b46ee":"code","0daf94db":"code","7d4bbbd3":"code","81a7647b":"code","784d4ec8":"code","50ed9b4f":"code","831ae31c":"code","b109590d":"code","b58c95f2":"code","745c7162":"code","fb7cd318":"code","b79cbec6":"code","3284f811":"code","2d747d23":"code","5d014620":"code","de5ba9e9":"code","d57b8214":"code","4af7e030":"code","3163bfec":"code","e7191f05":"code","02321ed9":"code","73ffcf0d":"code","bdcc736a":"code","38f81ebe":"code","cf3a3f35":"code","9316e64c":"code","e51f2a4e":"code","8f1d4a10":"code","8bfc89cf":"code","2faf087d":"code","ec8421b6":"code","3fd063e6":"code","6b1489b6":"code","465b0df0":"code","a6d0410a":"code","8668a911":"code","9a9bc0ee":"code","07de794e":"code","6a33952e":"code","83a97de8":"code","0e1a278e":"code","d3565335":"code","261d9533":"code","84f32fb7":"code","0d119fe5":"code","292d11d6":"code","71fd0b6d":"code","99049033":"code","9be25731":"code","8f4fb9e1":"code","097dbf61":"code","70614567":"code","eca6d1cb":"code","aacd14b1":"code","85d038f5":"code","99a2d9d6":"code","7b59699a":"code","63db3de9":"code","6ce1f640":"markdown","a1e34ec0":"markdown","f4f3bc34":"markdown","58962137":"markdown","1117be13":"markdown","78c36298":"markdown","5515f842":"markdown","85bd55ad":"markdown","89c34c5e":"markdown","785f9b4e":"markdown"},"source":{"1e2a0001":"#Basic\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n#Stat\nfrom scipy import stats\nfrom scipy.special import boxcox, inv_boxcox\nfrom scipy.stats import norm, skew #for some statistics\n\n#Modeling\n\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import Ridge, RidgeCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom xgboost import XGBRegressor\n\n#Test\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import classification_report,confusion_matrix\n\nimport os","1eaeab32":"pwd","66a1d9a6":"df = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","998c0065":"corr=df.corr()","6efa382c":"plt.figure(figsize=(20,10))\nsns.heatmap(corr, vmin=-1, vmax=1, center=0,cmap=\"RdBu_r\",square=True)","f0ad1dc1":"df.info()","3e26cb0e":"sns.scatterplot(x=df['OverallQual'],y=df['SalePrice'])","b5a57d86":"sns.scatterplot(x=df['GrLivArea'],y=df['SalePrice'])","6391fcea":"df = df.drop(df[(df['GrLivArea']>4000) & (df['SalePrice']<300000)].index)","f19f36c9":"sns.distplot(df['SalePrice'])","f534e696":"stats.probplot(df['SalePrice'],plot=plt)\nplt.show()","f9b075c1":"df['SalePrice'],fitted_lambda = stats.boxcox(df['SalePrice'])","95d45e51":"fitted_lambda","25374d5f":"sns.distplot(df['SalePrice'])","10f7e29a":"y = df['SalePrice'].reset_index(drop=True)\ndf_train = df.drop(['SalePrice'], axis=1)\ndf_test = test","2aa1b5f4":"df_all = pd.concat([df_train, df_test]).reset_index(drop=True)\ndf_all.shape","b16e2c4d":"missing_data = df_all.isnull().sum().sort_values(ascending=False)\nn=[ ]\nfor i in range(len(missing_data)):\n    if missing_data[i]==0:\n        n.append(i)","b5927993":"missing_data[0:min(n)]","89bf6bdc":"#'PoolQC'","851c7acd":"df_all['PoolQC'] = df_all['PoolQC'].fillna(\"None\")","2b392843":"#'MiscFeatures'","67bd0bda":"df_all[\"MiscFeature\"] = df_all[\"MiscFeature\"].fillna(\"None\")","6b8ad131":"#'Alley'","5f6e181c":"df_all[\"Alley\"] = df_all[\"Alley\"].fillna(\"None\")","1ded248e":"#'Fence'","05322189":"df_all[\"Fence\"] = df_all[\"Fence\"].fillna(\"None\")","02145d33":"#'FireplaceQu'","94d6129a":"df_all[\"FireplaceQu\"] = df_all[\"FireplaceQu\"].fillna(\"None\")","45c65e6a":"#'LotFrontage'","18f8882a":"df_all['LotFrontage']=df_all.groupby(by=\"Neighborhood\")['LotFrontage'].transform (lambda x: x.fillna(x.median()))","9e2e5371":"#'GarageCond, GarageType, GarageYrBlt, GarageFinish, GarageQual'","b060df98":"for x in ('GarageCond', 'GarageType', 'GarageFinish', 'GarageQual'):\n    df_all[x] = df_all[x].fillna('None')","70ef59fc":"#'GarageYrBlt'","f5cf80c6":"df_all['GarageYrBlt'] = df_all['GarageYrBlt'].fillna(0)","6f024c86":"#'BsmtFinType2, BsmtExposure, BsmtQual, BsmtFinType1, BsmtCond'","70c15979":"for x in ('BsmtFinType2', 'BsmtExposure', 'BsmtQual', 'BsmtFinType1', 'BsmtCond'):\n    df_all[x] = df_all[x].fillna('None')","c55f2d48":"#'MasVnrType','MasVnrArea'","a6aa3d51":"df_all[\"MasVnrType\"] = df_all[\"MasVnrType\"].fillna(\"None\")\ndf_all[\"MasVnrArea\"] = df_all[\"MasVnrArea\"].fillna(0)","537b46ee":"#\"Electrical\"","0daf94db":"df_all[\"Electrical\"]=df_all['Electrical'].fillna(\"SBrkr\")","7d4bbbd3":"#MSZoning","81a7647b":"df_all['MSZoning'] = df_all['MSZoning'].fillna(df_all['MSZoning'].mode()[0])","784d4ec8":"#Functional","50ed9b4f":"df_all[\"Functional\"] = df_all[\"Functional\"].fillna(\"Typ\")","831ae31c":"#Utilities","b109590d":"df_all = df_all.drop('Utilities', axis=1)","b58c95f2":"#'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'","745c7162":"for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    df_all[col] = df_all[col].fillna(0)","fb7cd318":"#SaleType","b79cbec6":"df_all['SaleType']=df_all['SaleType'].fillna(df_all['SaleType'].mode()[0])","3284f811":"#'GarageArea', 'GarageCars'","2d747d23":"for col in ('GarageArea', 'GarageCars'):\n    df_all[col] = df_all[col].fillna(0)","5d014620":"#'Exterior1st','Exterior2nd'","de5ba9e9":"df_all['Exterior1st'] = df_all['Exterior1st'].fillna(df_all['Exterior1st'].mode()[0])\ndf_all['Exterior2nd'] = df_all['Exterior2nd'].fillna(df_all['Exterior2nd'].mode()[0])","d57b8214":"#'KitchenQual'","4af7e030":"df_all['KitchenQual'] = df_all['KitchenQual'].fillna(df_all['KitchenQual'].mode()[0])","3163bfec":"numeric_features = df_all.dtypes[df_all.dtypes != \"object\"].index","e7191f05":"numeric_features","02321ed9":"skewness = pd.DataFrame({'variable':numeric_features,'skew':skew(df_all[numeric_features])})\nskewness.sort_values('skew',ascending=False).head(10) ","73ffcf0d":"feature_skew = skewness[skewness['skew']>1].index\nnumeric_features[feature_skew]","bdcc736a":"for x in numeric_features[feature_skew]:\n    df_all[x]=np.log1p(df_all[x])","38f81ebe":"dummies = df_all.dtypes[df_all.dtypes=='object'].index\ndummies","cf3a3f35":"df_all = pd.get_dummies(df_all,drop_first=True)","9316e64c":"X = df_all.iloc[:len(y),:]\nX_test = df_all.iloc[len(y):,:]","e51f2a4e":"X.shape","8f1d4a10":"X_test.shape","8bfc89cf":"y.shape","2faf087d":"kf = KFold(n_splits=12, random_state=42, shuffle=True)","ec8421b6":"def rmsle(y,y_pred):\n    return np.sqrt(mean_squared_error(y,y_pred))\n\ndef cv_rmse(model, X=X):\n    rmse = np.sqrt(-cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=kf))\n    return (rmse)","3fd063e6":"#Ridge regression","6b1489b6":"ridge_alphas = [0.1, 1.0, 10.0, 100]\nridge = make_pipeline(RobustScaler(), RidgeCV(alphas=ridge_alphas, cv=kf))","465b0df0":"#SVM","a6d0410a":"svr = make_pipeline(RobustScaler(), SVR(C= 20, epsilon= 0.008, gamma=0.0003))","8668a911":"#XGB","9a9bc0ee":"XGB = XGBRegressor(learning_rate=0.01, n_estimators=3460,\n                                     max_depth=3, min_child_weight=0,\n                                     gamma=0, subsample=0.7,\n                                     colsample_bytree=0.7,\n                                     objective='reg:linear', nthread=-1,\n                                     scale_pos_weight=1, seed=27,\n                                     reg_alpha=0.00006)","07de794e":"# Ridge regression","6a33952e":"scores = {}\nscore = cv_rmse(ridge)\nprint(\"ridge: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['ridge'] = (score.mean(), score.std())","83a97de8":"ridge_model = ridge.fit(X,y)","0e1a278e":"# SVM regression","d3565335":"score = cv_rmse(svr)\nprint(\"SVR: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['svr'] = (score.mean(), score.std())","261d9533":"svm_model = svr.fit(X,y)","84f32fb7":"# XGB","0d119fe5":"score = cv_rmse(XGB)\nprint(\"rf: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\nscores['rf'] = (score.mean(), score.std())","292d11d6":"XGB_model = XGB.fit(X,y)","71fd0b6d":"# Blended Model","99049033":"def Blended_Machine(X):\n    return ((0.4 * ridge_model.predict(X)) +(0.3 * svm_model.predict(X)) + (0.3 * XGB_model.predict(X))) ","9be25731":"blended_score = rmsle(y, Blended_Machine(X))\nscores['blended'] = (blended_score, 0)\nprint('RMSLE score on train data:')\nprint(blended_score)","8f4fb9e1":"log_prediction = Blended_Machine(X_test)","097dbf61":"print(log_prediction.shape)","70614567":"prediction = inv_boxcox(log_prediction, -0.07712954824421477)","eca6d1cb":"submission = pd.DataFrame()","aacd14b1":"submission['Id']=X_test['Id']","85d038f5":"submission['SalePrice'] = prediction","99a2d9d6":"prediction","7b59699a":"submission.to_csv('submit1.csv',index=False)","63db3de9":"import pandas as pd\nsample_submission = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")","6ce1f640":"# Submit","a1e34ec0":"# Outlilers","f4f3bc34":"# Modeling","58962137":"# Check features of skewness","1117be13":"# Feature Engineering","78c36298":"# DATA PROCESSING","5515f842":"# Get Dummies","85bd55ad":"# Reponse Variable","89c34c5e":"# Create Train and Test data set","785f9b4e":"# Model Train"}}