{"cell_type":{"70324203":"code","f21b0599":"code","c4ab2d0f":"code","02ce451e":"code","d905a07e":"code","9cdacd23":"code","63195890":"code","73cdc0e7":"code","36b366cd":"code","9b7e73a0":"code","dbc5685b":"code","0d4159f1":"code","2662c1cc":"code","9867bf91":"code","f8e56032":"code","9a094b1f":"code","c0ee291e":"code","751e2b72":"code","1270b220":"code","a9b445fa":"code","b2fe18aa":"code","3f4a28c1":"code","bc8e3008":"code","a5adbb65":"code","6ac76934":"code","9c36c5a1":"markdown","fff70365":"markdown"},"source":{"70324203":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f21b0599":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nimport geopandas as geo\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline","c4ab2d0f":"df=pd.read_csv(\"..\/input\/mineral-ores-around-the-world\/Mineral ores round the world.csv\")\ndf.head()","02ce451e":"from shapely.geometry import Polygon,Point\nimport geoplot\nworld = geo.read_file(geo.datasets.get_path('naturalearth_lowres'))","d905a07e":"world1=df[\"country\"].value_counts().to_frame().reset_index()\nworld1[\"index\"]=world1[\"index\"].replace({\"United States\":'United States of America'})\nworld1=world1.rename(columns={\"index\":\"name\"})\nworld=world[[\"name\",\"geometry\"]].merge(world1,on=\"name\")\nimport mapclassify\nsite_counts = world[\"country\"]\nscheme = mapclassify.MaximumBreaks(site_counts)\n\n# Note: this code sample requires geoplot>=0.4.0.\ngeoplot.choropleth(\n    world, hue=site_counts, scheme=scheme,\n    cmap='Paired', figsize=(16, 8)\n)\nplt.show() #some datas are missing really sorry for that.","9cdacd23":"#Our key focus is India.\nindia_df=df[df[\"country\"]==\"India\"]\nindia_df=india_df.reset_index().drop(columns=[\"index\"])\nindia_df.head() # taking india's ores only.\nindia_df[\"state\"]=india_df['state'].replace({'Orissa': 'Odisha', 'Tamil Nadu [Madras]': 'Tamil Nadu'})","63195890":"shp_gdf = geo.read_file('..\/input\/india-gis-data\/India States\/Indian_states.shp')\ngdf = geo.GeoDataFrame(\n    india_df.iloc[:,:5], geometry=geo.points_from_xy(india_df.iloc[:,:5].longitude, india_df.iloc[:,:5].latitude))","73cdc0e7":"polygon = Polygon([(30, 0), (30, 90), (180, 90), (180, 0), (30,0)])\npoly_gdf = geo.GeoDataFrame([1], geometry=[polygon], crs=world.crs)\nfig, (ax1,ax2) = plt.subplots(1,2,figsize=(20, 10))\nworld.plot(ax=ax1)\npoly_gdf.boundary.plot(ax=ax1, color=\"brown\")\nax1.set_title(\"Asia in World Map\", fontsize=20)\nax1.set_axis_off()\n\nworld.clip(polygon).plot(ax=ax2, color=\"lightpink\")\nworld.boundary.plot(ax=ax2)\nshp_gdf.boundary.plot(ax=ax2, color=\"brown\")\n\nax2.set_title(\"Asia in World(Asia filled in color)\", fontsize=20)\nax2.set_axis_off()\nplt.show()","36b366cd":"world = geo.read_file(geo.datasets.get_path('naturalearth_lowres'))\n\n# Asia.\nax = world[world.continent == 'Asia'].plot(\n    color='white', edgecolor='black')\n\n# We can now plot our ``GeoDataFrame``.\ngdf.plot(ax=ax, color='brown')\n\nplt.title(\"India's mineral ores\")\n\nplt.show()","9b7e73a0":"capitals = geo.read_file(geo.datasets.get_path(\"naturalearth_cities\"))#capitals in World\nclip_caps = capitals.clip(world[world[\"continent\"] == \"Asia\"]) #capitals in Asia \n\n# Plot the clipped data\n# The plot below shows the results of the clip function applied to the capital cities\nfig, ax = plt.subplots(figsize=(12, 8))\nclip_caps.plot(ax=ax, color=\"green\")\ngdf[[\"site_name\",\"geometry\"]].plot(ax=ax,color=\"brown\")\nworld[world[\"continent\"] == \"Asia\"].boundary.plot(ax=ax, color=\"grey\")\nax.set_title(\"Capitals of each country in Asia \\n away from indian mineral ores \", fontsize=20)\nax.set_axis_off()\nax.legend([\"capital city\",\"India's ore present\"],loc=\"lower left\",title=\"Legends\")\nplt.show()","dbc5685b":"indian_1=india_df[\"state\"].value_counts().to_frame()\nindian_1=indian_1.reset_index().rename(columns={\"index\":\"state\",\"state\":\"mineral_ore_present\"})\n\nmerged = shp_gdf.set_index('st_nm').join(indian_1.set_index('state')).fillna(0)\nfig, ax = plt.subplots(1, figsize=(12, 12))\nax.axis('off')\nax.set_title('Mineral ores in India (state wise)',\n             fontdict={'fontsize': '15', 'fontweight' : '3'})\nfig = merged.plot(column='mineral_ore_present', cmap='Accent', linewidth=0.5, ax=ax, edgecolor='0.2',legend=True)","0d4159f1":"import folium\nores_name=india_df.iloc[:,:3].drop_duplicates(subset=[\"site_name\"])\ntitle_html = '''\n             <h3 align=\"left\" style=\"font-size:16px\"><b>{}<\/b><\/h3>\n             '''.format(\"India's mineral ore(by name)\")   \nmerge_df=ores_name.merge(india_df[\"site_name\"].value_counts().to_frame().reset_index().rename(columns={\"site_name\":\"site_present\",\"index\":\"site_name\"}),on=\"site_name\");\nn = folium.Map(location=[22,80], tiles=\"OpenStreetMap\", zoom_start=4,width=1000,height=800)\nfor i in range(0,len(merge_df)):\n    folium.CircleMarker(\n        location=[merge_df.iloc[i]['latitude'], merge_df.iloc[i]['longitude']],\n        popup=merge_df.iloc[i]['site_name'],tooltip=merge_df.iloc[i]['site_name'],\n        radius=float(merge_df.iloc[i]['site_present'])*1,\n        color='#69b3a2',\n        fill=True,\n        fill_color='brown',\n    ).add_to(n)\nn.get_root().html.add_child(folium.Element(title_html))\nn","2662c1cc":"india_=india_df.loc[:,[\"state\",\"commod1\",\"commod2\",\"commod3\"]]\nmelted_df=pd.melt(india_, id_vars =['state'], value_vars =['commod1',\"commod2\",\"commod3\"])\nnew_df=melted_df.drop_duplicates().dropna()[[\"state\",\"value\"]];\nnew_df1=new_df.set_index([\"state\"]).sort_index()\nimport re\nnew_df1[\"Minerals_present\"]=[re.split(r\"[-;,.\\s]\\s*\", i) for i in new_df1[\"value\"]]\nnew_df2=new_df1.reset_index().groupby(\"state\")[\"Minerals_present\"].sum()\nnew_df3=new_df2.to_frame().reset_index()\nnew_df3[\"Minerals_present\"]=[list(set(i)) for i in new_df3[\"Minerals_present\"]]\nnew_df3[\"Count_of_minerals\"]=[len(i) for i in new_df3[\"Minerals_present\"]]\nfrom IPython.display import HTML\nHTML(new_df3.loc[:,[\"state\",\"Minerals_present\"]].to_html(classes='table table-striped'))","9867bf91":"#function to return the value with its percent\ndef make_autopct(values):\n    def my_autopct(pct):\n        total = sum(values)\n        val = int(round(pct*total\/100.0))\n        return '{p:.2f}%  ({v:d})'.format(p=pct,v=val)\n    return my_autopct","f8e56032":"import matplotlib\ncolors=[k for k,v in matplotlib.colors.cnames.items()][30:48]\nnew_geolist=india_df.dep_type.unique().tolist()\nnew_geo=india_df[[\"site_name\",\"latitude\",\"longitude\",\"dep_type\"]].dropna().set_index(\"dep_type\").reset_index() #deposit type.\n# creating a geometry column \ngeometry = [Point(xy) for xy in zip(new_geo['longitude'], new_geo['latitude'])]\n# Coordinate reference system : WGS84\ncrs = {'init': 'epsg:4326'}\n# Creating a Geographic data frame \ngdf = geo.GeoDataFrame(new_geo, crs=crs, geometry=geometry)","9a094b1f":"values=india_df[\"oper_type\"].value_counts().values\nfig3 = plt.figure(constrained_layout=True,figsize=(20,15))\ngs = fig3.add_gridspec(3, 3)\nf3_ax1 = fig3.add_subplot(gs[0, :])\nsns.barplot(x=\"state\",y=\"Count_of_minerals\",data=new_df3,ax=f3_ax1)\nf3_ax1.tick_params(labelrotation=45);f3_ax1.set_title(\"Counts of Minerals present in states\")\nf3_ax2 = fig3.add_subplot(gs[1, :-1])\nf3_ax2.set_title('Where is Mineral Present',)\nindia_df[\"oper_type\"].value_counts().plot.pie(ax=f3_ax2,autopct=make_autopct(values))\nf3_ax3 = fig3.add_subplot(gs[1:, -1])\nf3_ax3.set_title('Map of Different deposit type(excluding not available)')\nshp_gdf.plot(ax=f3_ax3,color=\"grey\",alpha=0.45)\nfor i,j in zip(new_geolist,colors):\n    gdf[gdf[\"dep_type\"]==i].plot(ax=f3_ax3,color=j,marker=\"o\",label=i)\nf3_ax4 = fig3.add_subplot(gs[-1, 0])\nf3_ax4.set_title('Composition type or Formation')\nplt.barh(india_df[\"com_type\"].value_counts().keys(), india_df[\"com_type\"].value_counts().values,color=[\"lightpink\",\"lightgreen\",\"skyblue\"])\nfor index, value in enumerate(india_df[\"com_type\"].value_counts().values):\n    plt.text(value, index,\n             str(value))\nf3_ax5 = fig3.add_subplot(gs[-1, -2])\nf3_ax5.set_title('Different Product Size')\nindia_df.prod_size.value_counts().plot.barh(color=[k for k,v in matplotlib.colors.cnames.items()][30:36],ax=f3_ax5)\nf3_ax5.yaxis.tick_right()\nplt.suptitle(\"Various graphs in One\",fontsize=30,x=0.01)\nplt.show()","c0ee291e":"fig, ax = plt.subplots(figsize=(20, 12))\nshp_gdf.plot(color=\"grey\",alpha=0.35,ax=ax)\nfor i,j in zip(new_geolist,colors):\n    gdf[gdf[\"dep_type\"]==i].plot(color=j,marker=\"o\",label=i,ax=ax)\nax.set_axis_off()\nplt.title(\" Different Deposits in India(Excluding Unknown or NaN) \")\nplt.legend(prop={\"size\":7},loc=\"upper right\")\nplt.show()","751e2b72":"o_gag=india_df[[\"state\",\"gangue\",\"ore\"]]\no_gag=o_gag.groupby(\"state\")[\"gangue\",\"ore\"].sum().reset_index().merge(new_df3,on=\"state\")\no_gag1=o_gag.loc[:,[\"gangue\",\"ore\",\"Minerals_present\"]]\no_gag1=o_gag1[o_gag1[\"ore\"]!=0]","1270b220":"from PIL import Image\nfrom io import BytesIO \nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nstopwords = set(STOPWORDS)\nwordcloud = WordCloud(stopwords=stopwords,max_words=150,background_color=\"white\",collocations=False,mode=\"RGBA\").generate(' '.join(o_gag1[\"ore\"])).to_array()\nplt.figure(figsize=(15,10))\nplt.imshow(wordcloud, interpolation= 'sinc')\nplt.axis(\"off\")\nplt.title(\"Ores Present In India\",fontsize=20)\nplt.show() #Ores are the those from which we get minerals.","a9b445fa":"import requests\nempty_list=[]\nnew_list=o_gag1[\"gangue\"].drop_duplicates().tolist()\nnew_list.pop(1)\nnew_sum=[re.split(r\"[-;,.\\s]\\s*\", i) for i in new_list]\nfor elem1 in new_sum:\n    for elem2 in elem1:\n        empty_list.append(elem2)\n\nstopwords = set(STOPWORDS)\nresponse = requests.get(\"https:\/\/mpng.subpng.com\/20180928\/yt\/kisspng-vector-graphics-states-of-india-map-clip-art-national-labour-market-information-system-nation-5baebd72aeca78.270318021538178418716.jpg\")\nimg = Image.open(BytesIO(response.content))\nmask = np.array(img)\nwordcloud = WordCloud(stopwords=stopwords,max_words=50,background_color=\"white\",mask=mask,repeat=\"None\",collocations=False).generate(' '.join(empty_list)).to_array()\nplt.figure(figsize=(15,10))\nplt.imshow(wordcloud, interpolation= 'sinc')\nplt.axis(\"off\")\nplt.title(\"Gangues Present In Indian ores\",fontsize=20)\nplt.show()#change image as you like image as mask is Indian map.","b2fe18aa":"!pip install upsetplot","3f4a28c1":"from upsetplot import UpSet\nindia_new=india_df.loc[:,[\"dev_stat\",\"state\"]].dropna(subset=[\"state\"]).fillna(\"Unknown\")\nindia_new=india_new.set_index(\"state\")\nindia_new=pd.get_dummies(india_new).reset_index().set_index([\"dev_stat_Occurrence\",\"dev_stat_Past Producer\",\n                                                             \"dev_stat_Plant\",\"dev_stat_Producer\",\"dev_stat_Prospect\",\"dev_stat_Unknown\"])\nupset = UpSet(india_new,\n              intersection_plot_elements=0, orientation=\"vertical\",facecolor=\"black\")  # disable the default bar chart\nupset.add_stacked_bars(by=\"state\", colors=colors,\n                       title=\"Count by states\",elements=50)\nupset.plot()\nfig.legend(fontsize=6, bbox_to_anchor=(0.5, 0.5, 0.1, 0.4),ncol=5)\nplt.suptitle(\"Development status in each state\",fontsize=15)\nplt.show()","bc8e3008":"other_df=pd.read_csv(\"..\/input\/poptable\/poptable.csv\")[[\"State.Name\",\"latitude\",\"longitude\"]]\nother_df=other_df.set_axis(['state', \"latitude\",\"longitude\"], axis=1, inplace=False)\nlistq=[i.rstrip() for i in other_df[\"state\"]]\nother_df[\"state\"] = listq\nother_df.state=other_df.state.replace({\"ORISSA\":'ODISHA'})\ndf2=india_df.loc[:,[\"state\",\"work_type\"]].fillna(\"Unknown\")\nexample=df2.groupby([\"state\",\"work_type\"])[\"work_type\"].count()\nexample1=example.to_frame()\nexample1=example1.rename(columns={\"work_type\":\"count_of_work\"}).reset_index()\nexample1.state=[i.upper() for i in example1.state.tolist()]\nnew_merged=example1.merge(other_df,on=\"state\")\ntemp = []\nfor count, item in enumerate(new_merged.iterrows()):\n    # if count in comp_rows:\n    temp.append( list(item[1]))\n    \ntemp=[['ANDHRA PRADESH','Underground',0,14.750429,78.570026],\n [\"ASSAM\",\"Surface\",0,26.749981,94.216667],\n [\"ASSAM\",\"Underground\",0,26.749981,94.216667],\n [\"GOA\",\"Surface\",0,15.491997,73.818001],\n [\"GOA\",\"Underground\",0,15.491997,73.818001],\n [\"HIMACHAL PRADESH\",\"Surface\",0,31.100025,77.166597],\n [\"HIMACHAL PRADESH\",\"Underground\",0,31.100025,77.166597],\n [\"JAMMU AND KASHMIR\",\"Surface\",0,34.299959,74.466658],\n [\"JAMMU AND KASHMIR\",\"Underground\",0,34.299959,74.466658],\n [\"KERALA\",\"Underground\",0,8.900373,76.569993],\n [\"MAHARASHTRA\",\"Surface\",0,19.250232,73.160175],\n [\"MANIPUR\",\"Underground\",0,24.799971,93.950017],\n [\"MANIPUR\",\"Surface\",0,24.799971,93.950017],\n [\"NAGALAND\",\"Underground\",0,25.666998,94.11657],\n [\"NAGALAND\",\"Surface\",0,25.666998,94.11657],\n [\"ODISHA\",\"Underground\",0,19.82043,85.900017],\n [\"PUNJAB\",\"Surface\",0,31.519974,75.980003],\n [\"PUNJAB\",\"Underground\",0,31.519974,75.980003],\n [\"TAMIL NADU\",\"Surface\",0,12.920386,79.150042],\n [\"TAMIL NADU\",\"Underground\",0,12.920386,79.150042],\n [\"WEST BENGAL\",\"Surface\",0,22.58039,88.329947],\n [\"WEST BENGAL\",\"Underground\",0,22.58039,88.329947],\n [\"UTTAR PRADESH\",\"Surface\",0,27.599981,78.050006]\n]\n\nnew_df_merged=new_merged.append(pd.DataFrame(temp, columns=[\"state\",\"work_type\",\"count_of_work\",\"latitude\",\"longitude\"]))\nnew_df_merged.reset_index().drop(columns=[\"index\"])\nnew_df_merged[\"geometry\"] = [Point(xy) for xy in zip(new_df_merged['longitude'], new_df_merged['latitude'])]\ngdf1 = geo.GeoDataFrame(new_df_merged, crs=crs, geometry=new_df_merged[\"geometry\"]);gdf1","a5adbb65":"from plotnine import *\nimport plotnine as p9\n\n(ggplot(gdf1, aes('state', 'work_type', fill='count_of_work'))\n + geom_tile(aes(width=.95, height=.95))\n +  scale_fill_gradient2(low = \"#075AFF\",\n                       mid = \"#FFFFCC\",\n                       high = \"#FF0000\") +\n  coord_fixed()\n + geom_text(aes(label='count_of_work'), size=12,color=\"black\")\n + labs(title=\"Sites available in states(as per there work requirement) \",fontweight='bold', size=10, color=\"Black\")\n + theme(figure_size=(20, 10), text=element_text(size=14))\n + theme(axis_text_x=element_text(rotation=90, hjust=1))\n)   ","6ac76934":"new_df_merged[\"to_fit_inmap\"]=new_df_merged[\"count_of_work\"]\/50;new_df_merged.sort_values(by=[\"state\",\"work_type\"]).reset_index().drop(columns=[\"index\"])\nfig = plt.figure(figsize=(20,15))\nax_map = fig.add_axes([0, 0, 1, 1])\nshp_gdf.plot(ax=ax_map)\nax_bar1 = fig.add_axes([0.5*(1+-45\/180) , 0.5*(1+50\/90) , 0.05, 0.05])\nax_bar1.bar([1, 2, 3], [0.14,0,0], color=[ 'C3','C1','C2'])\nax_bar1.set_axis_off()\nax_bar1.legend([\"Unknown\",\"Surface\",\"Underground\"], borderpad=2)\nax_bar = fig.add_axes([0.5*(1+-90\/180) , 0.5*(1+-10\/90) , 0.05, 0.05])\nax_bar.bar([1, 2, 3], [0,0,0.36], color=['C1', 'C2', 'C3'])\nax_bar.set_axis_off()\nax_bar = fig.add_axes([0.5*(1+20\/180) , 0.5*(1+10\/90) , 0.05, 0.05])\nax_bar.bar([1, 2, 3], [0.04,0.06,1.58], color=['C1', 'C2', 'C3'])\nax_bar.set_axis_off()\nax_bar = fig.add_axes([0.5*(1+50\/180) , 0.5*(1+25\/90) , 0.05, 0.05])\nax_bar.bar([1, 2, 3], [0,0,0.04], color=['C1', 'C2', 'C3'])\nax_bar.set_axis_off()\nax_bar = fig.add_axes([0.5*(1+-65\/180) , 0.5*(1+-50\/90) , 0.05, 0.05])\nax_bar.bar([1, 2, 3], [0.04,0.02,1.08], color=['C1', 'C2', 'C3'])\nax_bar.set_axis_off()\nax_bar = fig.add_axes([0.5*(1+-20\/180) , 0.5*(1+-30\/90) , 0.05, 0.05])\nax_bar.bar([1, 2, 3], [0.08,0,1.28], color=['C1', 'C2', 'C3'])\nax_bar.set_axis_off()\nax_bar = fig.add_axes([0.5*(1+30\/180) , 0.5*(1+0\/90) , 0.05, 0.05])\nax_bar.bar([1, 2, 3], [0,0,0.20], color=['C1', 'C2', 'C3'])\nax_bar.set_axis_off()\nax_bar = fig.add_axes([0.5*(1+-35\/180) , 0.5*(1+20\/90) , 0.05, 0.05])\nax_bar.bar([1, 2, 3], [0,0.02,0.06], color=['C1', 'C2', 'C3'])\nax_bar.set_axis_off()\nax_bar = fig.add_axes([0.5*(1+-40\/180) , 0.5*(1+-60\/90) , 0.05, 0.05])\nax_bar.bar([1, 2, 3], [0,0.02,0.14], color=['C1', 'C2', 'C3'])\nax_bar.set_axis_off()\nax_bar = fig.add_axes([0.5*(1+5\/180) , 0.5*(1+-15\/90) , 0.05, 0.05])\nax_bar.bar([1, 2, 3], [0.16,0,3.58], color=['C1', 'C2', 'C3'])\nax_bar.set_axis_off()\nax_bar = fig.add_axes([0.5*(1+-70\/180) , 0.5*(1+50\/90) , 0.05, 0.05])\nax_bar.bar([1, 2, 3], [0,0,0.12], color=['C1', 'C2', 'C3'])\nax_bar.set_axis_off()\nax_bar = fig.add_axes([0.5*(1+-80\/180) , 0.5*(1+20\/90) , 0.05, 0.05])\nax_bar.bar([1, 2, 3], [0.04,0.06,0.98], color=['C1', 'C2', 'C3'])\nax_bar.set_axis_off()\nax_bar = fig.add_axes([0.5*(1+80\/180) , 0.5*(1+25\/90) , 0.05, 0.05])\nax_bar.bar([1, 2, 3], [0,0,0.02], color=['C1', 'C2', 'C3'])\nax_bar.set_axis_off()\nax_bar = fig.add_axes([0.5*(1+70\/180) , 0.5*(1+15\/90) , 0.05, 0.05])\nax_bar.bar([1, 2, 3], [0,0,0.06], color=['C1', 'C2', 'C3'])\nax_bar.set_axis_off()\nax_bar2 = fig.add_axes([0.5*(1+-70\/180) , 0.5*(1+-20\/90) , 0.05, 0.05])\nax_bar2.bar([1, 2, 3], [0.08,0.80,0], color=['C2', 'C3' ,'C1'])\nax_bar2.legend([\"Underground\",\"Unknown\",\"Surface\"], borderpad=2)\nax_bar2.set_axis_off()\nax_bar = fig.add_axes([0.5*(1+-50\/180) , 0.5*(1+0\/90) , 0.05, 0.05])\nax_bar.bar([1, 2, 3], [0.08,0.04,1.90], color=['C1', 'C2', 'C3'])\nax_bar.set_axis_off()\nax_bar = fig.add_axes([0.5*(1+-65\/180) , 0.5*(1+-70\/90) , 0.05, 0.05])\nax_bar.bar([1, 2, 3], [0.06,0,1.28], color=['C1', 'C2', 'C3'])\nax_bar.set_axis_off()\nax_bar = fig.add_axes([0.5*(1+-70\/180) , 0.5*(1+70\/90) , 0.05, 0.05])\nax_bar.bar([1, 2, 3], [0,0,0.38], color=['C1', 'C2', 'C3'])\nax_bar.set_axis_off()\nax_bar = fig.add_axes([0.5*(1+-65\/180) , 0.5*(1+-70\/90) , 0.05, 0.05])\nax_bar.bar([1, 2, 3], [0.06,0,.28], color=['C1', 'C2', 'C3'])\nax_bar.set_axis_off()\nplt.suptitle(\"Barplot for Worktype on Map\")\nax_bar.legend([\"Surface\",\"Underground\",\"Unknown\"], borderpad=2)\nax_map.set_axis_off()\nplt.show()","9c36c5a1":"# USA,Mexico,Chile,Peru,Argentina has most number of sites.","fff70365":"# Minerals present in State"}}