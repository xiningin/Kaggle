{"cell_type":{"9d39fa85":"code","46572e31":"code","26506421":"code","d5300657":"code","092db264":"code","c02d70b9":"code","3e17dc35":"code","2920c6c8":"code","a94adef1":"code","5fe33aee":"code","93f88e67":"code","784d87d0":"code","1db63191":"code","026b3ca8":"code","ff9ba123":"code","6b25ef9b":"code","3a392f72":"markdown","22b7659b":"markdown","176151b6":"markdown","60170638":"markdown","53c4087b":"markdown"},"source":{"9d39fa85":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","46572e31":"# importing required libraries\n\n# import numpy as np\n# import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score, mean_absolute_error","26506421":"# loading the dataset\n\ndata = pd.read_csv('\/kaggle\/input\/housesalesprediction\/kc_house_data.csv')\ndata.head()","d5300657":"data.columns","092db264":"dCol = ['id', 'date', 'zipcode']\ndata.drop(dCol, axis=1, inplace=True)\ndata.head()","c02d70b9":"data.shape","3e17dc35":"data.describe()","2920c6c8":"# plotting the relation of various fields\n\nfig, ax = plt.subplots(5,3, sharey=True, figsize=(25,20))\n\nind = 1\nfor i in range(5):\n    ax[i][0].set_ylabel('price')\n    for j in range(3):\n        if ind == 14:\n            ind += 2\n        ax[i][j].scatter(data.iloc[:, ind], data['price'])\n        ax[i][j].set_xlabel(data.columns[ind])\n        ind += 1","a94adef1":"# checking presence of missing data\n\ndata.isnull().sum()","5fe33aee":"# abstraction of features and label\n\nX, y = data.drop('price', axis=1), data['price']\nprint(X.shape, y.shape)","93f88e67":"# cross validation scores\n\ncross_val_score(RandomForestRegressor(n_estimators=100), X, y, cv=5)","784d87d0":"# splitting the dataset into training and testing sets\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\nprint(y_train.shape, y_test.shape)","1db63191":"# scaling the features in order to avoid bias of features\n\nst = StandardScaler()\nX_train = st.fit_transform(X_train)\nX_test = st.transform(X_test)\n\nX_train[:2]","026b3ca8":"# fitting the data into the model\n\nreg = RandomForestRegressor(n_estimators=100).fit(X_train, y_train)\nprint('Training Data Score: {:.2f}'.format(reg.score(X_train, y_train)))\nprint('Testing Data Score: {:.2f}'.format(reg.score(X_test, y_test)))","ff9ba123":"reg.feature_importances_","6b25ef9b":"# R2-Score of the model and mean_absolute_error\n\nprint('R2 Score: {}'.format(r2_score(y_test, reg.predict(X_test))))\nprint('Mean Absolute Error: {}'.format(mean_absolute_error(reg.predict(X_test),y_test)))","3a392f72":"# Data Preprocessing","22b7659b":"# Loading and Analysing the Dataset","176151b6":"# Visualization of Features","60170638":"# Model Evaluation","53c4087b":"# Applying Regression Algorithm"}}