{"cell_type":{"9c33a5cc":"code","3fa24145":"code","85686d2b":"code","1146134c":"code","a63a9df1":"code","97b88b55":"code","53a91829":"code","1e8c5897":"code","e4b805da":"code","c385c13f":"code","2bd97530":"code","02bd51c1":"code","af107456":"code","ae01a954":"code","ec5f20e6":"code","9817cc3a":"code","3dbaae1a":"code","79a0f631":"code","ea8b2b59":"code","78fe84c9":"code","3497d958":"code","922cc766":"code","e1ca8213":"code","6ccfc7af":"code","24fc8558":"code","0e0eec69":"code","8b718062":"code","df48c751":"code","e9ffa606":"code","4e6ef2c5":"code","434297c2":"code","c5e07987":"code","73ddecca":"code","5740394a":"markdown","34a1125a":"markdown","ea2b8644":"markdown","cf9f60c1":"markdown","3932acb8":"markdown","1139f581":"markdown","231bf2ee":"markdown","a77a2ee6":"markdown","db12a674":"markdown","84fe4fc3":"markdown","db98d7f1":"markdown","6ac9c448":"markdown","a1801d74":"markdown","29effc66":"markdown","f5aee4f5":"markdown","42eb7ea4":"markdown","75485402":"markdown"},"source":{"9c33a5cc":"import numpy as np # this is labiary for implement the model there the nump is labiary\nimport pandas as pd \nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport random\nimport os\nprint(os.listdir(\"..\/input\/cat-and-dog\"))","3fa24145":"FAST_RUN = False\nIMAGE_WIDTH=128\nIMAGE_HEIGHT=128\nIMAGE_SIZE=(IMAGE_WIDTH, IMAGE_HEIGHT)\nIMAGE_CHANNELS=3","85686d2b":"filenames = os.listdir(\"..\/input\/cat-and-dog\/training_set\")\ncategories = []\nfor filename in filenames:\n    category = filename.split('.')[0]\n    if category == 'dog':\n        categories.append(1)\n    else:\n        categories.append(0)\n\ndf = pd.DataFrame({\n    'filename': filenames,\n    'category': categories\n})","1146134c":"df.head()","a63a9df1":"df.tail()","97b88b55":"df['category'].value_counts().plot.bar()","53a91829":"sample = random.choice(filenames)\nimage = load_img(\"..\/input\/cat-and-dog\"+sample)\nplt.imshow(image)","1e8c5897":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation, BatchNormalization\n\nmodel = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax')) # 2 because we have cat and dog classes\n\nmodel.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n\nmodel.summary()","e4b805da":"from keras.callbacks import EarlyStopping, ReduceLROnPlateau","c385c13f":"earlystop = EarlyStopping(patience=10)","2bd97530":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\n","02bd51c1":"callbacks = [earlystop, learning_rate_reduction]","af107456":"df[\"category\"] = df[\"category\"].replace({0: 'cat', 1: 'dog'}) ","ae01a954":"train_df, validate_df = train_test_split(df, test_size=0.20, random_state=42)\ntrain_df = train_df.reset_index(drop=True)\nvalidate_df = validate_df.reset_index(drop=True)","ec5f20e6":"train_df['category'].value_counts().plot.bar()","9817cc3a":"validate_df['category'].value_counts().plot.bar()","3dbaae1a":"total_train = train_df.shape[0]\ntotal_validate = validate_df.shape[0]\nbatch_size=15","79a0f631":"train_datagen = ImageDataGenerator(\n    rotation_range=15,\n    rescale=1.\/255,\n    shear_range=0.1,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \"..\/input\/train\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size\n)","ea8b2b59":"validation_datagen = ImageDataGenerator(rescale=1.\/255)\nvalidation_generator = validation_datagen.flow_from_dataframe(\n    validate_df, \n    \"..\/input\/train\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size\n)","78fe84c9":"example_df = train_df.sample(n=1).reset_index(drop=True)\nexample_generator = train_datagen.flow_from_dataframe(\n    example_df, \n    \"..\/input\/train\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical'\n)","3497d958":"plt.figure(figsize=(12, 12))\nfor i in range(0, 15):\n    plt.subplot(5, 3, i+1)\n    for X_batch, Y_batch in example_generator:\n        image = X_batch[0]\n        plt.imshow(image)\n        break\nplt.tight_layout()\nplt.show()","922cc766":"epochs=3 if FAST_RUN else 50\nhistory = model.fit_generator(\n    train_generator, \n    epochs=epochs,\n    validation_data=validation_generator,\n    validation_steps=total_validate\/\/batch_size,\n    steps_per_epoch=total_train\/\/batch_size,\n    callbacks=callbacks\n)","e1ca8213":"model.save_weights(\"model.h5\")","6ccfc7af":"fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12))\nax1.plot(history.history['loss'], color='b', label=\"Training loss\")\nax1.plot(history.history['val_loss'], color='r', label=\"validation loss\")\nax1.set_xticks(np.arange(1, epochs, 1))\nax1.set_yticks(np.arange(0, 1, 0.1))\n\nax2.plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax2.plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nax2.set_xticks(np.arange(1, epochs, 1))\n\nlegend = plt.legend(loc='best', shadow=True)\nplt.tight_layout()\nplt.show()","24fc8558":"test_filenames = os.listdir(\"..\/input\/test1\/test1\")\ntest_df = pd.DataFrame({\n    'filename': test_filenames\n})\nnb_samples = test_df.shape[0]","0e0eec69":"test_gen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_gen.flow_from_dataframe(\n    test_df, \n    \"..\/input\/test1\/test1\/\", \n    x_col='filename',\n    y_col=None,\n    class_mode=None,\n    target_size=IMAGE_SIZE,\n    batch_size=batch_size,\n    shuffle=False\n)","8b718062":"predict = model.predict_generator(test_generator, steps=np.ceil(nb_samples\/batch_size))","df48c751":"test_df['category'] = np.argmax(predict, axis=-1)","e9ffa606":"label_map = dict((v,k) for k,v in train_generator.class_indices.items())\ntest_df['category'] = test_df['category'].replace(label_map)","4e6ef2c5":"test_df['category'] = test_df['category'].replace({ 'dog': 1, 'cat': 0 })","434297c2":"test_df['category'].value_counts().plot.bar()","c5e07987":"sample_test = test_df.head(18)\nsample_test.head()\nplt.figure(figsize=(12, 24))\nfor index, row in sample_test.iterrows():\n    filename = row['filename']\n    category = row['category']\n    img = load_img(\"..\/input\/test1\/test1\/\"+filename, target_size=IMAGE_SIZE)\n    plt.subplot(6, 3, index+1)\n    plt.imshow(img)\n    plt.xlabel(filename + '(' + \"{}\".format(category) + ')' )\nplt.tight_layout()\nplt.show()","73ddecca":"submission_df = test_df.copy()\nsubmission_df['id'] = submission_df['filename'].str.split('.').str[0]\nsubmission_df['label'] = submission_df['category']\nsubmission_df.drop(['filename', 'category'], axis=1, inplace=True)\nsubmission_df.to_csv('submission.csv', index=False)","5740394a":"# Predict","34a1125a":"# Prepare Traning Data","ea2b8644":"# Validation Generato","cf9f60c1":"# Define Constants","3932acb8":"# See predicted result with images","1139f581":"# Prepare Testing Data","231bf2ee":"# Traning Generator","a77a2ee6":"# Virtualize Training","db12a674":"# Create Testing Generator","84fe4fc3":"# Prepare data\nBecause we will use image genaretor with class_mode=\"categorical\". We need to convert column category into string. Then imagenerator will convert it one-hot encoding which is good for our classification.\n\nSo we will convert 1 to dog and 0 to cat","db98d7f1":"I have implement CNN model","6ac9c448":"# Learning Rate Reduction\n\nWe will reduce the learning rate when then accuracy not increase for 2 steps","a1801d74":"# See how our generator work","29effc66":"# Early Stop\n\nTo prevent over fitting we will stop the learning after 10 epochs and val_loss value not decreased","f5aee4f5":"# Fit Model","42eb7ea4":"# Callbacks","75485402":"# Name: Mahwish Riasat\n# Registration no: SP20-RCS-02\n \n# Submitted to: Dr Tehseen Zia"}}