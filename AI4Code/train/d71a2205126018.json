{"cell_type":{"9d3448bb":"code","bf23f453":"code","f54d513a":"code","0f78fc95":"code","0be8fbc3":"code","c90ea908":"code","64b9f62c":"code","566bf89e":"code","fee0959e":"code","21265eac":"code","93519b4b":"code","e4170b38":"code","3aa9ae23":"code","7331cf24":"code","f691858e":"code","39cfa242":"code","4ba54b08":"code","73dfac28":"code","4bb1b6bc":"code","28912532":"code","573e2c71":"code","5a4d4815":"code","3e5e5604":"code","839c15b6":"code","7d0877af":"code","4f42023d":"code","38b865e3":"code","69b68423":"code","d0eab693":"code","54ed536c":"code","bb5d7385":"code","2aae923a":"code","d56b248e":"code","70286585":"code","aea26fb9":"code","86e5c29a":"code","eb430d2f":"code","d2df7d6d":"code","aec97905":"code","a8447fad":"code","ecfb585d":"code","2046d4d6":"code","b852de29":"code","87617b74":"code","ea9df4ff":"code","d8a81b01":"code","69eceb66":"code","14d546a4":"code","3a38ac3b":"code","b0173e3e":"code","6e0cca9e":"code","7a992bf2":"code","3c050859":"code","0b1e2271":"code","523e9176":"code","e6402f68":"code","c544a881":"code","fbfb58bb":"code","066790cf":"code","67dd081d":"code","14bf0c2a":"code","4ddb10a1":"code","3b6d61c9":"code","51c78cf3":"code","b52a7d0d":"code","f19b7f86":"code","c47010c5":"code","a1d2d47d":"code","d8fc1a9a":"code","70011edf":"code","8ba32883":"code","eba8570c":"code","d5f1343c":"code","d5437098":"code","2b17c6d2":"code","c5e6a84b":"code","05570c9a":"code","cdb99098":"code","c6b94d10":"code","b1e32477":"code","48bb0767":"code","de2c4417":"code","ad1ad4db":"code","602c4dbc":"code","c36275e3":"code","e23176ba":"code","94646e81":"code","4ed7af84":"code","b050654a":"code","b6907c32":"code","bbb45d3c":"code","26de39c4":"code","41e700b7":"code","39f56102":"code","74548164":"code","75eb1c6f":"code","ada56c9e":"code","2de37f4c":"code","5568c177":"code","c5a6aa37":"code","25176215":"code","0e392ec2":"code","36547fbc":"code","cefa85c9":"code","3082f400":"code","64292cb8":"code","f372f747":"code","bda87643":"code","8ba2aa16":"code","211991b0":"code","943913f9":"code","1c70961c":"code","5ec0cb19":"code","1321b439":"code","fbe99409":"code","b4c46968":"code","fc70acbf":"code","c7419242":"code","8c9404f5":"code","32a5c4f5":"code","bcff92be":"code","896f1891":"code","269ce45b":"code","8af18daf":"code","77e45ab3":"code","efe924a6":"code","f3e26518":"code","8d56fd2c":"code","6577e7fc":"code","30c7a34d":"code","b173150d":"code","5ba23193":"code","a080a010":"code","6ba9e7da":"code","b0e36e3b":"code","8bc1e4d0":"code","596e83b3":"code","e9cc138d":"code","9d062c55":"code","c9443ee0":"code","de4c7b8f":"code","92adf37d":"code","4d427a83":"code","fc26d069":"code","b606b34c":"code","cc11f00b":"code","727f9019":"code","dc755ffc":"code","c1bfa2f5":"code","ecdc371b":"code","c2976248":"code","81f11c8c":"code","1bd8fd60":"code","8e9a283a":"code","7b865f62":"code","e2d8a59f":"code","c62975db":"code","a53159a5":"code","28f6dd79":"code","66e05e9a":"code","62bb6069":"code","7db1bd63":"code","7edc784a":"code","afbcc810":"code","78e546d3":"code","7452dfbf":"code","667548cf":"code","c3036c02":"code","c18ea219":"code","75764793":"code","8a00df5a":"code","36ee12e5":"code","6e942976":"code","af9dc6ca":"code","2303b5c6":"code","524b352a":"code","11334aa1":"code","d059e9e3":"code","32ff8f1c":"code","9584b873":"code","3165f010":"code","fe444c8f":"code","3d495ed8":"code","2b1d8d20":"code","b0899182":"code","5ba9809d":"code","39a3514a":"code","475dead6":"code","9742ad47":"code","ea6c97c3":"code","ac9b52d2":"code","f56d7c7c":"code","f2fdac5d":"code","04f22f11":"markdown","c53dc70b":"markdown","5e3fcf73":"markdown","d2dfa2a3":"markdown","0394600f":"markdown","860c57d0":"markdown","d4afaa37":"markdown","35f6f5f0":"markdown","717b9282":"markdown","25947f8a":"markdown","cda0c453":"markdown","04036819":"markdown","ecbf0c84":"markdown","b0dd7385":"markdown","4e75df6f":"markdown","20b7216d":"markdown","88792f9b":"markdown","e37dc541":"markdown","d62b012c":"markdown","76e36afa":"markdown","b62298c6":"markdown","820cfdef":"markdown","cfe1ccc7":"markdown","bccd00f2":"markdown","25ec44d4":"markdown","a197c364":"markdown","462f5ade":"markdown","799c5979":"markdown","8f8e8b27":"markdown","81836de9":"markdown","e0c38761":"markdown","6a16df14":"markdown","89c9d54f":"markdown","e0402fcd":"markdown","493ac545":"markdown","6155955a":"markdown","665a567e":"markdown","60754904":"markdown","fccf64e6":"markdown","f3e7ee1d":"markdown","fb4efbfe":"markdown","da218e93":"markdown","7f252c76":"markdown","1bfc5e73":"markdown","488fef9a":"markdown","cfa24e45":"markdown","97fe3347":"markdown","52d5b068":"markdown","af8e6684":"markdown","41fa0e5a":"markdown","f5e84120":"markdown","08c8c26a":"markdown","cfa19a28":"markdown","37508f37":"markdown","7128759a":"markdown","a73d8a11":"markdown","9ddd8e81":"markdown","6b68055f":"markdown","d20f0b4f":"markdown","fca168f6":"markdown","f3d56ee4":"markdown","59809f32":"markdown","8c2173d4":"markdown","45b7c47a":"markdown","8e937312":"markdown","eed7179d":"markdown","a509293b":"markdown","bcd79cde":"markdown","f964db2d":"markdown","abb341d9":"markdown","c2177c21":"markdown","65fa37a5":"markdown","3cccb535":"markdown","a9771d01":"markdown","a7e59366":"markdown","ba523167":"markdown","74de44b7":"markdown","a05be7af":"markdown","6ddac6ec":"markdown","60a63aed":"markdown","6e164d1b":"markdown","7a15008e":"markdown","b238fe34":"markdown","4f29d306":"markdown","81f8356b":"markdown","8a27eed5":"markdown","998fb5c2":"markdown","144eaf80":"markdown","8c76f11c":"markdown","7191cd70":"markdown","4305d418":"markdown","dd5ba244":"markdown","c6cd2aa8":"markdown","6083b059":"markdown","636c299e":"markdown","9750930b":"markdown","ff6a4f78":"markdown","b3f0e703":"markdown","bed03ab4":"markdown","f22a08f6":"markdown","4b15e14a":"markdown","889c7899":"markdown","f90a9a94":"markdown","3c8333bc":"markdown","6b2da6d2":"markdown","21efb335":"markdown"},"source":{"9d3448bb":"# libs to deal with data\nimport pandas as pd\nimport numpy as np\nimport scipy\n\n# libs to display graphics\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# visual options\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline","bf23f453":"# let's load train and test data\ntrain_data=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_data=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest_data['SalePrice']=np.nan\ntest_data['tmpPrice']=np.nan","f54d513a":"print(\"train_data lenght :\",len(train_data))\nprint(\"test_data lenght :\",len(test_data))","0f78fc95":"test_data.head()","0be8fbc3":"train_data.head()","c90ea908":"# correlation between qualitative features\ndef cramers_v(x, y):\n    confusion_matrix = pd.crosstab(x,y)\n    chi2 = scipy.stats.chi2_contingency(confusion_matrix)[0]\n    n = confusion_matrix.sum().sum()\n    phi2 = chi2\/n\n    r,k = confusion_matrix.shape\n    phi2corr = max(0, phi2-((k-1)*(r-1))\/(n-1))\n    rcorr = r-((r-1)**2)\/(n-1)\n    kcorr = k-((k-1)**2)\/(n-1)\n    return np.sqrt(phi2corr\/min((kcorr-1),(rcorr-1)))","64b9f62c":"# correlation between qualitative and quantitative features\ndef eta_squared(x,y):\n    moyenne_y = y.mean()\n    classes = []\n    for classe in x.unique():\n        yi_classe = y[x==classe]\n        classes.append({'ni': len(yi_classe),\n                        'moyenne_classe': yi_classe.mean()})\n    SCT = sum([(yj-moyenne_y)**2 for yj in y])\n    SCE = sum([c['ni']*(c['moyenne_classe']-moyenne_y)**2 for c in classes])\n    return SCE\/SCT","566bf89e":"# this function returns the correlation beween two features, by applying the appropriate correlation\n# .corr() between quantitative\n# cramer between qualitative features\n# eta_squared between qualitative and quantitative features\ndef adaptative_correlation(x,y):\n    x = x.reset_index(drop=True)\n    y = y.reset_index(drop=True)\n    # keep only values that are both non na in x and y\n    non_na = np.logical_and(~x.isna(),~y.isna())\n    x=x[non_na]\n    y=y[non_na]\n    if (x.dtype.name=='object' or x.dtype.name=='category') and (y.dtype.name=='object' or y.dtype.name=='category'):\n        return cramers_v(x,y)\n    elif (x.dtype.name=='object' or x.dtype.name=='category'):\n        return abs(eta_squared(x,y))\n    elif (y.dtype.name=='object' or y.dtype.name=='category'):\n        return abs(eta_squared(y,x))\n    else:\n        return abs(x.corr(y))","fee0959e":"# this function uses the adaptative_correlation function to draw the heatmap between fetures\n# regarless of their dtype\ndef adaptative_heatmap(df):\n    b = range(len(df.columns))\n    correl=[[adaptative_correlation(df.iloc[:,i],df.iloc[:,j]) if i<j else 1.0 if i==j else 0.0 for i in b] for j in b]\n    mask = np.zeros_like(correl, dtype=np.bool)\n    mask[np.triu_indices_from(mask,k=1)] = True\n    fig, ax = plt.subplots(figsize=(13,10)) \n    sns.heatmap(correl,ax=ax,linewidths=.1,mask=mask, annot=True,cmap='coolwarm')\n    ax.set_xticklabels(df.columns)\n    ax.set_yticklabels(df.columns)\n    plt.yticks(rotation=0)\n    plt.xticks(rotation=90)","21265eac":"# a quick and dirty regressions function that we will use to measure the efficiency \n# of our transformations, if a transformation is benefic it should increase the score of the regression\nfrom sklearn.impute import KNNImputer\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import KFold, cross_val_score,cross_val_predict, train_test_split\nfrom sklearn.metrics import mean_squared_error\n\nimputer = KNNImputer(n_neighbors=3)\nn_folds = 5\nmodel = RandomForestRegressor(n_jobs=-1)\n\ndef quick_predict(X,y):\n    X = pd.get_dummies(X)\n    X = pd.DataFrame(imputer.fit_transform(X), columns = X.columns)\n\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(X)\n    rmse= np.sqrt(-cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv = kf))\n    print(\"Quality score: {:.4f} standard deviation ({:.4f})\\n\".format(rmse.mean(), rmse.std()))","93519b4b":"quick_predict(train_data.drop(['SalePrice'],axis=1),train_data.SalePrice)","e4170b38":"# a \"mean encoder\", transforms a categorical feature by a numerical feature, applying for each\n# the mean value of target so that we have a linear correlation between this new feature ant the target value\ndef mean_encoder(df,columns):\n    for col in columns:\n        if col not in df.columns:\n            print(\"Error, \",col,\" not in list of columns\")\n        else:\n            mean_encode = df.groupby(col)['tmpPrice'].mean()\n            mean_encode = (mean_encode - mean_encode.min())\/(mean_encode.max() - mean_encode.min())\n            new_col_name = col + '_enc'\n            df.loc[:,new_col_name] = df[col].map(mean_encode)","3aa9ae23":"sns.set(style=\"whitegrid\", color_codes=True)\nsns.set(rc={'figure.figsize':(15,8)})\n_= sns.distplot(train_data.SalePrice.dropna())","7331cf24":"sns.set(style=\"whitegrid\", color_codes=True)\nsns.set(rc={'figure.figsize':(15,8)})\n_= sns.boxplot(train_data.SalePrice.dropna())","f691858e":"len(train_data[train_data.SalePrice>600000])","39cfa242":"train_data = train_data[train_data.SalePrice<600000]","4ba54b08":"scipy.stats.skew(train_data.SalePrice.dropna())","73dfac28":"scipy.stats.boxcox(train_data.SalePrice,lmbda=None)[-1]","4bb1b6bc":"sns.set(style=\"whitegrid\", color_codes=True)\nsns.set(rc={'figure.figsize':(15,8)})\n_= sns.distplot(np.log1p(train_data.SalePrice.dropna()))","28912532":"train_data['tmpPrice']=np.log1p(train_data.SalePrice)","573e2c71":"# keep tmpPriceMean so that we can reverse at the end of this work\ntmpPriceMean = train_data['tmpPrice'].mean()\ntrain_data['tmpPrice'] = train_data['tmpPrice']","5a4d4815":"sns.set(style=\"whitegrid\", color_codes=True)\nsns.set(rc={'figure.figsize':(15,8)})\n_= sns.distplot(train_data.tmpPrice.dropna())","3e5e5604":"scipy.stats.skew(train_data.tmpPrice)","839c15b6":"quick_predict(train_data.drop(['SalePrice','tmpPrice'],axis=1),train_data.tmpPrice)","7d0877af":"train_data.set_index(train_data.Id,drop=True, inplace=True)\ntrain_data = train_data.drop(['Id'],axis=1)\ntest_data.set_index(test_data.Id,drop=True, inplace=True)\ntest_data = test_data.drop(['Id'],axis=1)","4f42023d":"data=pd.concat([train_data,test_data],keys=['train','test'], join='inner')","38b865e3":"data.tail()","69b68423":"data.head()","d0eab693":"print(\"train data : \",train_data.shape,\"test data : \",test_data.shape)","54ed536c":"data[['Alley','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n      'FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond',\n      'PoolQC','Fence','MiscFeature']]=data[['Alley','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n      'FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond',\n      'PoolQC','Fence','MiscFeature']].fillna(value=\"NA\")","bb5d7385":"data.isna().sum()[lambda x: x>0]","2aae923a":"pd.crosstab(data.MSZoning.fillna('NA'),data.LandContour,dropna=False)","d56b248e":"data[data.MSZoning.isna()]","70286585":"data[data.Neighborhood==\"Mitchel\"].MSZoning.value_counts()","aea26fb9":"data[data.Neighborhood==\"IDOTRR\"].MSZoning.value_counts()","86e5c29a":"data.loc[(data.MSZoning.isna())&(data.Neighborhood==\"Mitchel\"),\"MSZoning\"]=\"RL\"\ndata.loc[(data.MSZoning.isna())&(data.Neighborhood==\"IDOTRR\"),\"MSZoning\"]=\"RM\"","eb430d2f":"data['LotAreaSqr']=np.sqrt(data.LotArea)","d2df7d6d":"data.LotShape.value_counts()","aec97905":"sns.set(style=\"whitegrid\", color_codes=True)\nsns.set(rc={'figure.figsize':(15,8)})\nsns.scatterplot(data.LotFrontage, data.LotAreaSqr,hue=data.LotShape, alpha=0.5)\nplt.xlabel('Lot Frontage')\nplt.ylabel('Square root of lot Area')\nplt.show()","a8447fad":"data['LotFrontage']=data.LotFrontage.fillna(data.LotAreaSqr)","ecfb585d":"data = data.drop(['LotAreaSqr'],axis=1)","2046d4d6":"data = data.drop(['Utilities'],axis=1)","b852de29":"data[data.Exterior1st.isna()]","87617b74":"data[(data.YearBuilt>1935)&(data.YearBuilt<1945)&(data.Neighborhood=='Edwards')].Exterior1st.value_counts()","ea9df4ff":"data['Exterior1st']=data.Exterior1st.fillna('MetalSd')\ndata['Exterior2nd']=data.Exterior2nd.fillna('MetalSd')","d8a81b01":"data[data.BsmtFinSF1.isna()]","69eceb66":"# Fix some errors where house have no basement\ndata.loc[data.BsmtFinSF1.isna(),'BsmtFinSF2' ]=0.0\ndata.loc[data.BsmtFinSF1.isna(),'BsmtUnfSF' ]=0.0\ndata.loc[data.BsmtFinSF1.isna(),'BsmtFullBath' ]=0.0\ndata.loc[data.BsmtFinSF1.isna(),'TotalBsmtSF' ]=0.0\ndata.loc[data.BsmtFinSF1.isna(),'BsmtHalfBath' ]=0.0\ndata.loc[data.BsmtFinSF1.isna(),'BsmtFinSF1' ]=0.0\ndata.loc[data.BsmtQual==\"NA\",'BsmtExposure' ]=\"NA\"\ndata.loc[data.BsmtQual==\"NA\",'BsmtFullBath' ]=0.0\ndata.loc[data.BsmtQual==\"NA\",'BsmtHalfBath' ]=0.0","14d546a4":"data[data.Electrical.isna()]","3a38ac3b":"data.Electrical.value_counts()","b0173e3e":"data[['Electrical']]=data[['Electrical']].fillna(value=\"SBrkr\")","6e0cca9e":"data['KitchenQual']=data['KitchenQual'].fillna(value=\"TA\")","7a992bf2":"data['GarageYrBlt']=data['GarageYrBlt'].fillna(data.YearBuilt)","3c050859":"data[data.GarageCars.isna()]","0b1e2271":"data.loc[data.GarageCars.isna(),data.columns.str.contains('Gar')]","523e9176":"sns.boxplot(data[data.GarageType=='Detchd'].GarageCars,data[data.GarageType=='Detchd'].LotFrontage)","e6402f68":"data[(data.GarageType=='Detchd')&(data.GarageCars==1.0)].GarageArea.describe()","c544a881":"data['GarageArea']=data['GarageArea'].fillna(value=300)\ndata['GarageCars']=data['GarageCars'].fillna(value=1.0)","fbfb58bb":"data.Functional.value_counts()","066790cf":"data['Functional']=data['Functional'].fillna(value=\"Typ\")","67dd081d":"data.SaleType.value_counts()","14bf0c2a":"data['SaleType']=data['SaleType'].fillna(value=\"WD\")","4ddb10a1":"X = data.drop(['SalePrice', 'tmpPrice','MasVnrType','MasVnrArea'],axis=1)\nX = X.reset_index(level=0, drop=True)\nX = pd.get_dummies(X)\n\nY = data[['MasVnrType']]\nY = Y.reset_index(level=0, drop=True)\n\nY_source = Y.dropna()\nX_source = X.loc[Y_source.index,:]\nX_target = X.loc[set(X.index) - set(Y_source.index),:]","3b6d61c9":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nle.fit(Y_source.values)","51c78cf3":"Y_source = le.transform(Y_source)","b52a7d0d":"from sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier(n_estimators=300, max_depth=None,min_samples_split=2, random_state=0)\nscores = cross_val_score(clf, X_source, Y_source, cv=5)\nscores.mean()\n","f19b7f86":"_=clf.fit(X_source, Y_source)","c47010c5":"Y_target = pd.DataFrame(le.inverse_transform(clf.predict(X_target))).set_index(X_target.index)","a1d2d47d":"Y_target.columns = ['MasVnrType']","d8fc1a9a":"data.loc['train'].update(Y_target)\ndata.loc['test'].update(Y_target)","70011edf":"X = data.drop(['SalePrice', 'tmpPrice','MasVnrArea'],axis=1)\nX = X.reset_index(level=0, drop=True)\nX = pd.get_dummies(X)\n\nY = data[['MasVnrArea']]\nY = Y.reset_index(level=0, drop=True)\n\nY_source = Y.dropna()\nX_source = X.loc[Y_source.index,:]\n\nX_target = X.loc[set(X.index) - set(Y_source.index),:]","8ba32883":"from sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor\n\nclf = RandomForestRegressor(n_estimators=100, min_samples_split=3, random_state=0)\nscores = cross_val_score(clf, X_source, Y_source, cv=5, scoring=\"neg_mean_squared_error\",n_jobs=-1)\n\nscores.mean()","eba8570c":"_=clf.fit(X_source, Y_source)\nY_target = pd.DataFrame(clf.predict(X_target)).set_index(X_target.index)\nY_target.columns = ['MasVnrArea']","d5f1343c":"data.loc['train'].update(Y_target)\ndata.loc['test'].update(Y_target)","d5437098":"data.isna().sum()[lambda x: x>0]","2b17c6d2":"quick_predict(data.loc['train'].drop(['SalePrice','tmpPrice'],axis=1),data.loc['train'].tmpPrice)","c5e6a84b":"data.head()","05570c9a":"data.dtypes.value_counts()","cdb99098":"print(list(data.select_dtypes(['object']).columns))","c6b94d10":"data[data.select_dtypes(['object']).columns].head()","b1e32477":"print(list(data.select_dtypes(['int64']).columns))","48bb0767":"pd.set_option('display.max_columns', 100)\ndata[data.select_dtypes(['int64']).columns].head()","de2c4417":"data[['MSSubClass', 'MoSold','OverallQual','OverallCond','YrSold']] = data[['MSSubClass', 'MoSold','OverallQual','OverallCond','YrSold']].astype(str)","ad1ad4db":"data[data.select_dtypes(['float64']).columns].head()","602c4dbc":"data[['LotFrontage', 'MasVnrArea', 'BsmtFinSF1', \n      'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'BsmtFullBath', \n      'BsmtHalfBath', 'GarageYrBlt', 'GarageCars', \n      'GarageArea']] = data[['LotFrontage', 'MasVnrArea', 'BsmtFinSF1',\n                            'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'BsmtFullBath', \n                            'BsmtHalfBath', 'GarageYrBlt', 'GarageCars', 'GarageArea']].astype(int)\n","c36275e3":"quick_predict(data.loc['train'].drop(['SalePrice','tmpPrice'],axis=1),data.loc['train'].tmpPrice)","e23176ba":"env_cols =['MSZoning','Street','Alley','Neighborhood','Condition1','Condition2']","94646e81":"fig, axes = plt.subplots(nrows=3, ncols=2, figsize=(20, 20))\n\nfor idx, feat in enumerate(env_cols): \n    ax = axes[int(idx \/ 2), idx % 2] \n    sns.swarmplot(x=feat, y='tmpPrice', data=data, ax=ax) \n    ax.set_ylabel('')\n    ax.set_xlabel(feat)\n    ax.set_xticks([])\n    ax.set_yticks([])\nfig.show();\n","4ed7af84":"mean_encoder(data,['MSZoning','Street','Alley','Neighborhood'])\n#data = data.drop(['MSZoning','Street','Alley','Neighborhood'],axis=1)","b050654a":"data['ConditionFeedr'] = (data.Condition2==\"Feedr\")*1+(data.Condition1==\"Feedr\")*1\ndata['ConditionArtery'] = (data.Condition2==\"Artery\")*1+(data.Condition1==\"Artery\")*1\ndata['ConditionPosA'] = (data.Condition2==\"PosA\")*1+(data.Condition1==\"PosA\")*1\ndata['ConditionPosN'] = (data.Condition2==\"PosN\")*1+(data.Condition1==\"PosN\")*1\ndata['ConditionRRAn'] = (data.Condition2==\"RRAn\")*1+(data.Condition1==\"RRAn\")*1\ndata['ConditionRRAe'] = (data.Condition2==\"RRAe\")*1+(data.Condition1==\"RRAe\")*1\ndata['ConditionRRNn'] = (data.Condition2==\"RRNn\")*1+(data.Condition1==\"RRNn\")*1\ndata['ConditionRRNe'] = (data.Condition2==\"RRNe\")*1+(data.Condition1==\"RRNe\")*1\ndata = data.drop(['Condition1','Condition2'],axis=1)","b6907c32":"quick_predict(data.loc['train'].drop(['SalePrice','tmpPrice'],axis=1),data.loc['train'].tmpPrice)","bbb45d3c":"data[['LotFrontage','LotArea','LotShape','LandContour','LotConfig','LandSlope','Fence','Fireplaces','FireplaceQu','GarageType','GarageYrBlt','GarageFinish','GarageCars','GarageArea','GarageQual','GarageCond','PoolArea','PoolQC']].head()","26de39c4":"lot_cols =['LotFrontage','LotArea','LotShape','LandContour','LotConfig','LandSlope','Fence','Fireplaces','FireplaceQu','GarageType','GarageYrBlt','GarageFinish','GarageCars','GarageArea','GarageQual','GarageCond','PoolArea','PoolQC']","41e700b7":"data['LotShape'].dtype=='object'","39f56102":"fig, axes = plt.subplots(nrows=4, ncols=3, figsize=(20, 30))\ni=0\n\nfor idx, feat in enumerate(lot_cols): \n    if data[feat].dtype=='object':\n        ax = axes[int(i \/ 3), i % 3] \n        sns.swarmplot(x=feat, y='tmpPrice', data=data, ax=ax)\n        ax.set_ylabel('')\n        ax.set_xlabel(feat)\n        ax.set_xticks([])\n        ax.set_yticks([])\n        i+=1\nfig.show();\n","74548164":"mean_encoder(data,['LotShape','LandContour','LotConfig','LandSlope','Fence','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond'])\n#data = data.drop(['LotShape','LandContour','LotConfig','LandSlope','Fence','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond'],axis=1)","75eb1c6f":"data.PoolQC.isna().sum()","ada56c9e":"data['Pool'] = (data.PoolQC!=\"NA\")*1","2de37f4c":"data = data.drop(['PoolQC'],axis=1)","5568c177":"data[data.Pool==0].PoolArea.value_counts()","c5a6aa37":"# there seems to be a pool, and pool quality is NA, we will change to \"Gd\"\ndata.loc[(data.Pool==0)&(data.PoolArea>0),'Pool']=1","25176215":"fig, axes = plt.subplots(nrows=3, ncols=3, figsize=(20, 20))\ni=0\n\nfor idx, feat in enumerate(lot_cols):\n    if feat not in data.columns:continue\n    if data[feat].dtype!='object':\n        ax = axes[int(i \/ 3), i % 3] \n        sns.scatterplot(x=feat, y='tmpPrice', data=data, ax=ax)\n        ax.set_ylabel('')\n        ax.set_xlabel(feat)\n        ax.set_xticks([])\n        ax.set_yticks([])\n        i+=1\nfig.show();","0e392ec2":"sns.set(style=\"whitegrid\", color_codes=True)\nsns.set(rc={'figure.figsize':(15,8)})\n_= sns.distplot(train_data.LotFrontage.dropna())","36547fbc":"data[data.LotFrontage>300]","cefa85c9":"data = data[data.LotFrontage<300]","3082f400":"scipy.stats.boxcox(data.LotFrontage)[-1]","64292cb8":"data.tmpPrice.corr(data.LotFrontage)","f372f747":"data.tmpPrice.corr(np.power(data.LotFrontage,0.25))","bda87643":"data['LotFrontage']=np.power(data.LotFrontage,0.25)","8ba2aa16":"sns.set(style=\"whitegrid\", color_codes=True)\nsns.set(rc={'figure.figsize':(15,8)})\n_= sns.distplot(data.LotArea.dropna())","211991b0":"data = data[data.LotArea<100000]","943913f9":"data['LotArea'] = np.log1p(data.LotArea)","1c70961c":"data.groupby('Fireplaces')['tmpPrice'].mean()","5ec0cb19":"data.groupby('GarageCars')['tmpPrice'].mean()","1321b439":"data.GarageCars.value_counts()","fbe99409":"data['GarageCars']=data.GarageCars.replace([4,5],3)","b4c46968":"data[data.GarageYrBlt>2010]","fc70acbf":"data.loc[data.GarageYrBlt>2010,'GarageYrBlt']=2007","c7419242":"data['GarageYrBlt']=np.log1p(2011-data.GarageYrBlt)","8c9404f5":"data.groupby('GarageCars')['tmpPrice'].mean()","32a5c4f5":"data = data.drop(['PoolArea'],axis=1)","bcff92be":"quick_predict(data.loc['train'].drop(['SalePrice','tmpPrice'],axis=1),data.loc['train'].tmpPrice)","896f1891":"data.isna().sum()[lambda x: x>0]","269ce45b":"const_cols = ['MSSubClass','BldgType','HouseStyle','OverallQual','OverallCond','YearBuilt','YearRemodAdd','RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','MasVnrArea','ExterQual','ExterCond','Foundation','WoodDeckSF','PavedDrive']","8af18daf":"adaptative_heatmap(data[const_cols])","77e45ab3":"fig, axes = plt.subplots(nrows=5, ncols=3, figsize=(20, 40))\ni=0\n\nfor idx, feat in enumerate(const_cols): \n    if data[feat].dtype=='object':\n        ax = axes[int(i \/ 3), i % 3] \n        sns.swarmplot(x=feat, y='tmpPrice', data=data, ax=ax)\n        ax.set_ylabel('')\n        ax.set_xlabel(feat)\n        ax.set_xticks([])\n        ax.set_yticks([])\n        i+=1\nfig.show();","efe924a6":"sns.set(style=\"whitegrid\", color_codes=True)\nsns.set(rc={'figure.figsize':(15,8)})\nsns.boxplot(data.MSSubClass,data.tmpPrice)","f3e26518":"pd.crosstab(data.index.get_level_values(0),data.MSSubClass)","8d56fd2c":"data['MSSubClass']=data.MSSubClass.replace('150','120').astype(object)","6577e7fc":"pd.crosstab(data.index.get_level_values(0),data.OverallQual.fillna('NA'),dropna=False)","30c7a34d":"sns.set(style=\"whitegrid\", color_codes=True)\nsns.set(rc={'figure.figsize':(15,8)})\nsns.swarmplot(data.OverallQual,data.tmpPrice)","b173150d":"adaptative_correlation(data.OverallQual,data.tmpPrice)","5ba23193":"data['OverallQual'].replace([1, 2], 3, inplace=True)\ndata['OverallQual'].replace([10], 9, inplace=True)","a080a010":"data['OverallQual'] = data.OverallQual.astype('int')","6ba9e7da":"data = data.drop(['RoofMatl'],axis=1)","b0e36e3b":"pd.crosstab(data.index.get_level_values(0),data.OverallCond.fillna('NA'),dropna=False)","8bc1e4d0":"sns.set(style=\"whitegrid\", color_codes=True)\nsns.set(rc={'figure.figsize':(15,8)})\nsns.boxplot(data.OverallCond,data.tmpPrice)","596e83b3":"data.OverallCond.value_counts()","e9cc138d":"data.OverallCond.dtype","9d062c55":"mean_encoder(data,['MSSubClass','BldgType','HouseStyle','OverallCond','RoofStyle','Exterior1st','Exterior2nd','MasVnrType','ExterQual','ExterCond','Foundation','PavedDrive'])\n#data = data.drop(['MSSubClass','BldgType','HouseStyle','OverallCond','RoofStyle','Exterior1st','Exterior2nd','MasVnrType','ExterQual','ExterCond','Foundation','PavedDrive'],axis=1)","c9443ee0":"fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(20, 20))\ni=0\n\nfor feat in ['YearBuilt','YearRemodAdd','MasVnrArea','WoodDeckSF']: \n    if data[feat].dtype!='object':\n        ax = axes[int(i \/ 3), i % 3] \n        sns.scatterplot(x=feat, y='tmpPrice', data=data, ax=ax)\n        ax.set_ylabel('')\n        ax.set_xlabel(feat)\n        ax.set_xticks([])\n        ax.set_yticks([])\n        i+=1\nfig.show();","de4c7b8f":"data.YearRemodAdd.describe()","92adf37d":"data[data.YearBuilt>data.YearRemodAdd]","4d427a83":"data.loc[data.YearBuilt>data.YearRemodAdd,'YearRemodAdd']=2002","fc26d069":"data.YearBuilt.describe()","b606b34c":"sns.scatterplot(data.YearBuilt,data.tmpPrice)","cc11f00b":"sns.scatterplot(np.power(np.abs(85-(2010 - data.YearBuilt)),2),data.tmpPrice)","727f9019":"data['YearBuilt'] = np.power(np.abs(85-(2010 - data.YearBuilt)),2)","dc755ffc":"quick_predict(data.loc['train'].drop(['SalePrice','tmpPrice'],axis=1),data.loc['train'].tmpPrice)","c1bfa2f5":"basement_cols = ['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinSF1','BsmtFinType2','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath']","ecdc371b":"fig, axes = plt.subplots(nrows=4, ncols=3, figsize=(20, 40))\ni=0\n\nfor idx, feat in enumerate(basement_cols): \n    ax = axes[int(i \/ 3), i % 3] \n    if data[feat].dtype=='object':\n        sns.swarmplot(x=feat, y='tmpPrice', data=data, ax=ax)\n    else:\n        sns.scatterplot(x=feat, y='tmpPrice', data=data, ax=ax)\n    ax.set_ylabel('')\n    ax.set_xlabel(feat)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    i+=1\nfig.show();","c2976248":"sns.scatterplot(data.BsmtFinSF1+data.BsmtFinSF2+data.BsmtUnfSF,data.TotalBsmtSF)","81f11c8c":"data.loc[data.TotalBsmtSF==0,['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinSF1','BsmtFinType2','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath']].describe()","1bd8fd60":"adaptative_correlation(data.BsmtFinSF2,data.tmpPrice)","8e9a283a":"data = data.drop(['BsmtFinSF2'],axis=1)","7b865f62":"pd.crosstab(data.index.get_level_values(0),data.BsmtFullBath)","e2d8a59f":"pd.crosstab(data.index.get_level_values(0),data.BsmtHalfBath)","c62975db":"mean_encoder(data,['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2'])\n#data = data.drop(['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2'],axis=1)","a53159a5":"fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(20, 20))\ni=0\n\nfor idx, feat in enumerate(['OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch']): \n    ax = axes[int(i \/ 2), i % 2] \n    sns.scatterplot(x=feat, y='tmpPrice', data=data, ax=ax)\n    ax.set_ylabel('')\n    ax.set_xlabel(feat)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    i+=1\nfig.show();","28f6dd79":"for idx, feat in enumerate(['OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch']): \n    print(feat,\" : \",adaptative_correlation(data[feat],data.tmpPrice))\n","66e05e9a":"floors_cols = ['1stFlrSF','2ndFlrSF','LowQualFinSF','GrLivArea','FullBath','HalfBath','BedroomAbvGr','KitchenAbvGr','KitchenQual','TotRmsAbvGrd']","62bb6069":"fig, axes = plt.subplots(nrows=4, ncols=3, figsize=(20, 40))\ni=0\n\nfor idx, feat in enumerate(floors_cols): \n    ax = axes[int(i \/ 3), i % 3] \n    if data[feat].dtype=='object':\n        sns.swarmplot(x=feat, y='tmpPrice', data=data, ax=ax)\n    else:\n        sns.scatterplot(x=feat, y='tmpPrice', data=data, ax=ax)\n    ax.set_ylabel('')\n    ax.set_xlabel(feat)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    i+=1\nfig.show();","7db1bd63":"adaptative_correlation(data.LowQualFinSF,data.tmpPrice)","7edc784a":"data = data.drop(['LowQualFinSF'],axis=1)","afbcc810":"mean_encoder(data,['KitchenQual'])\n#data = data.drop(['KitchenQual'],axis=1)","78e546d3":"# Total living area\ndata['LivingArea'] = data['TotalBsmtSF'] + data['1stFlrSF']+\\\n    data['2ndFlrSF']+\\\n    data['OpenPorchSF']+\\\n    data['3SsnPorch']\n\ndata['LivingArea'] = np.power(data['LivingArea'],0.35)","7452dfbf":"# Total Bathrooms\nHalfBathfactor = 0.6\ndata['TotalBath'] = data.BsmtFullBath + HalfBathfactor * data.BsmtHalfBath +\\\n                    data.FullBath + HalfBathfactor * data.HalfBath","667548cf":"data['Rooms_Area'] = (data.TotRmsAbvGrd+data.TotalBath) \/ data.GrLivArea","c3036c02":"for feature in ['GrLivArea','BsmtFinSF1','1stFlrSF','2ndFlrSF','BsmtUnfSF','TotalBsmtSF','OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch']:\n    data[feature] = np.power(data[feature],0.35)","c18ea219":"comfort_cols=['Heating','HeatingQC','CentralAir','Electrical','Functional','MiscFeature','MiscVal']","75764793":"fig, axes = plt.subplots(nrows=3, ncols=3, figsize=(20, 30))\ni=0\n\nfor idx, feat in enumerate(comfort_cols): \n    ax = axes[int(i \/ 3), i % 3] \n    if data[feat].dtype=='object':\n        sns.swarmplot(x=feat, y='tmpPrice', data=data, ax=ax)\n    else:\n        sns.scatterplot(x=feat, y='tmpPrice', data=data, ax=ax)\n    ax.set_ylabel('')\n    ax.set_xlabel(feat)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    i+=1\nfig.show();","8a00df5a":"mean_encoder(data,['Heating','HeatingQC','CentralAir','Electrical','Functional','MiscFeature'])\n#data = data.drop(['Heating','HeatingQC','CentralAir','Electrical','Functional','MiscFeature'],axis=1)","36ee12e5":"data['MiscVal'] = np.log1p(data.MiscVal)","6e942976":"sale_cols = ['MoSold','YrSold','SaleType','SaleCondition']","af9dc6ca":"fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(20, 20))\ni=0\n\nfor idx, feat in enumerate(sale_cols): \n    ax = axes[int(i \/ 3), i % 3] \n    if data[feat].dtype=='object':\n        sns.swarmplot(x=feat, y='tmpPrice', data=data, ax=ax)\n    else:\n        sns.scatterplot(x=feat, y='tmpPrice', data=data, ax=ax)\n    ax.set_ylabel('')\n    ax.set_xlabel(feat)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    i+=1\nfig.show();","2303b5c6":"mean_encoder(data,['MoSold','YrSold','SaleType','SaleCondition'])\n#data = data.drop(['MoSold','YrSold','SaleType','SaleCondition'],axis=1)","524b352a":"quick_predict(data.loc['train'].drop(['SalePrice','tmpPrice'],axis=1),data.loc['train'].tmpPrice)","11334aa1":"train_lenght = len(data.loc['train'])","d059e9e3":"y = data.tmpPrice.loc['train']\ny_target = data.tmpPrice.loc['test']","32ff8f1c":"from sklearn.preprocessing import RobustScaler\n\nX = data.drop(['SalePrice', 'tmpPrice'],axis=1)\nX = pd.get_dummies(X)\nX = RobustScaler().fit_transform(X)\n\nX_target = X[train_lenght:,:]\nX = X[:train_lenght,:]","9584b873":"# Using Skicit-learn to split data into training and testing sets\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test  = train_test_split(X, y, test_size=0.2, random_state=0)","3165f010":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score,cross_val_predict, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb","fe444c8f":"#Validation function\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(X)\n    rmse= np.sqrt(-cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","3d495ed8":"from sklearn import linear_model\n\nmodel1 = linear_model.Ridge(alpha=30)\n\nscore = rmsle_cv(model1)\nprint(\"model score: {:.4f} standard deviation ({:.4f})\\n\".format(score.mean(), score.std()))","2b1d8d20":"model2 = linear_model.Lasso(alpha=.00075)\n\nscore = rmsle_cv(model2)\nprint(\"model score: {:.4f} standard deviation ({:.4f})\\n\".format(score.mean(), score.std()))","b0899182":"model3 = RandomForestRegressor(bootstrap=True, ccp_alpha=0.000001, criterion='mse',\n                      max_depth=None, max_features=0.2, max_leaf_nodes=None,\n                      max_samples=None, min_impurity_decrease=0.0,\n                      min_impurity_split=None, min_samples_leaf=1,\n                      min_samples_split=2, min_weight_fraction_leaf=0.0,\n                      n_estimators=1000, n_jobs=-1, oob_score=False,\n                      random_state=None, verbose=0, warm_start=False)\n\nscore = rmsle_cv(model3)\nprint(\"model score: {:.4f} standard deviation ({:.4f})\\n\".format(score.mean(), score.std()))","5ba9809d":"model4 =  GradientBoostingRegressor(n_estimators=500, \n                                   learning_rate=0.027, \n                                   max_features=0.7, \n                                   criterion='mse', \n                                   min_samples_leaf=4, \n                                   min_samples_split=4, \n                                   loss='huber',\n                                   random_state =42)\nscore = rmsle_cv(model4)\nprint(\"gbr score: {:.4f} standard deviation ({:.4f})\\n\".format(score.mean(), score.std()))","39a3514a":"model5 =  xgb.XGBRegressor(learning_rate=0.04,n_estimators=1000,\n                                     max_depth=2, min_child_weight=0,\n                                     gamma=0, subsample=0.75,\n                                     colsample_bytree=0.6,\n                                     objective='reg:linear', nthread=-1,\n                                     scale_pos_weight=1.2, seed=27,\n                                     reg_alpha=0.0006)","475dead6":"score = rmsle_cv(model5)\nprint(\"xgboost score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","9742ad47":"model1.fit(X, y)\nmodel2.fit(X, y)\nmodel3.fit(X, y)\nmodel4.fit(X, y)\nmodel5.fit(X, y)\npredictions1 = model1.predict(X_target)\npredictions2 = model2.predict(X_target)\npredictions3 = model3.predict(X_target)\npredictions4 = model4.predict(X_target)\npredictions5 = model5.predict(X_target)\npredictions = 0.2*predictions1+0.3*predictions2+0.1*predictions3+0.2*predictions4+0.2*predictions5","ea6c97c3":"predictions = np.expm1(predictions)","ac9b52d2":"submission = pd.DataFrame({'Id': data.loc['test'].index, 'SalePrice': predictions})","f56d7c7c":"submission.to_csv(\"submission.csv\", index=False)","f2fdac5d":"submission.head()","04f22f11":"**Electrical**","c53dc70b":"### OverallCond: Overall condition rating","5e3fcf73":"**Numerical features**","d2dfa2a3":"Mean encoding for categorical features :","0394600f":"### Float parameters","860c57d0":"**Porch**","d4afaa37":"## 4.3 Fill empty values\n<a id='4.3' href=\"#4.4\">next<\/a>","35f6f5f0":"There is a perfect linear dependency between OverallQual and price (more exacly the log of the price), OverallQual is a qualitative feature but should be transformed to a quantitative value, so that linear dependency is better understood by our algos.","717b9282":"Lot Area (value that we also have in dataset) is lot frontage multiplicated by lot depth. If the Lot is not too irregular we can estimate that lot fontage is proportional to square root of lot area, let's test that hypothesis :","25947f8a":"We see that we have a lot of features (80) but not so much rows of data. So it seems important to understand data, get rid of toxic features, of outliers, and lelect the most important features. To have a better comprehension of the numerous features, we will split them into different famillies :","cda0c453":"# 4. Data preparation\n<a id='4' href=\"#4.1\">next<\/a>\n## 4.1 Build main data\n<a id='4.1' href=\"#4.2\">next<\/a>","04036819":"**SaleType**","ecbf0c84":"We will fix the garage area to 300","b0dd7385":"**GarageYrBlt** We have a lot of empty data, they correspond to houses with no garage, we can fill with any value, but the most efficient, I think, is to fill this value with the year the house was built","4e75df6f":"BsmtFinSF2 has very low influence","20b7216d":"we will transform Lot Frontage by applying np.Power with a value of 0.35 given by boxcox test","88792f9b":"SalePrice is the target. If we plan to elaborate some linear regression it is better to have a target parameter that has  a normal distribution, centered, normalized, and no skew (symetrical). Let's see if our price hase such a distribution.","e37dc541":"Let's take a look now to quantitative features","d62b012c":"<a id=\"menu\" style='font-size: 20px;' href='#1'>1. Summary of the problem<\/a><br>\n<a style='font-size: 20px;' href='#2'>2. Setup<\/a><br>\n<a style='font-size: 16px;' href='#2.1'>2.1 Load libs<\/a><br>\n<a style='font-size: 16px;' href='#2.2'>2.2 Custom functions<\/a><br>\n<a style='font-size: 20px;' href='#3'>3 Target value : SalePrice<\/a><br>\n<a style='font-size: 16px;' href='#3.1'>3.1 center and un-skew<\/a><br>\n<a style='font-size: 20px;' href='#4'>4. Data preparation<\/a><br>\n<a style='font-size: 16px;' href='#4.1'>4.1 Build main data<\/a><br>\n<a style='font-size: 16px;' href='#4.2'>4.2 Understanding data<\/a><br>\n<a style='font-size: 16px;' href='#4.3'>4.3 Fill empty values<\/a><br>\n<a style='font-size: 16px;' href='#4.4'>4.4 Impute empty values<\/a><br>\n<a style='font-size: 20px;' href='#5'>5 Features engineering<\/a><br>\n<a style='font-size: 16px;' href='#5.1'>5.1 Categorical and quantitative features<\/a><br>\n<a style='font-size: 16px;' href='#5.2'>5.2 Environnement features<\/a><br>\n<a style='font-size: 16px;' href='#5.3'>5.3 Features relative to the Lot<\/a><br>\n<a style='font-size: 16px;' href='#5.4'>5.4 Features relative to the construction<\/a><br>\n<a style='font-size: 16px;' href='#5.5'>5.5 Features relative to the composition of the House<\/a><br>\n","76e36afa":"**Features relative to environnement**<br>\nMSZoning: Identifies the general zoning classification of the sale.<br>\nStreet: Type of road access to property<br>\nAlley: Type of alley access to property<br>\nNeighborhood: Physical locations within Ames city limits<br>\nCondition1: Proximity to various conditions<br>\nCondition2: Proximity to various conditions (if more than one is present)<br>\n<br>\n**Features relative to the Lot**<br>\nLotFrontage: Linear feet of street connected to property<br>\nLotArea: Lot size in square feet<br>\nLotShape: General shape of property<br>\nLandContour: Flatness of the property<br>\nLotConfig: Lot configuration<br>\nLandSlope: Slope of property<br>\nFence: Fence quality<br>\n***Fireplace***<br>\nFireplaces: Number of fireplaces<br>\nFireplaceQu: Fireplace quality<br>\n***Garage***<br>\nGarageType: Garage location<br>\nGarageYrBlt: Year garage was built<br>\nGarageFinish: Interior finish of the garage<br>\nGarageCars: Size of garage in car capacity<br>\nGarageArea: Size of garage in square feet<br>\nGarageQual: Garage quality<br>\nGarageCond: Garage condition<br>\n***Pool***<br>\nPoolArea: Pool area in square feet<br>\nPoolQC: Pool quality<br>\n<br>\n**Features relative to the construction**<br>\nMSSubClass: Identifies the type of dwelling involved in the sale.\t<br>\nBldgType: Type of dwelling<br>\nHouseStyle: Style of dwelling<br>\nOverallQual: Rates the overall material and finish of the house<br>\nOverallCond: Rates the overall condition of the house<br>\nYearBuilt: Original construction date<br>\nYearRemodAdd: Remodel date (same as construction date if no remodeling or additions)<br>\nRoofStyle: Type of roof<br>\nRoofMatl: Roof material<br>\nExterior1st: Exterior covering on house<br>\nExterior2nd: Exterior covering on house (if more than one material)<br>\nMasVnrType: Masonry veneer type<br>\nMasVnrArea: Masonry veneer area in square feet<br>\nExterQual: Evaluates the quality of the material on the exterior <br>\nExterCond: Evaluates the present condition of the material on the exterior<br>\nFoundation: Type of foundation<br>\nWoodDeckSF: Wood deck area in square feet<br>\nPavedDrive: Paved driveway<br>\n<br>\n**Features relative to the composition of the house**<br>\n***basement***<br>\nBsmtQual: Evaluates the height of the basement<br>\nBsmtCond: Evaluates the general condition of the basement<br>\nBsmtExposure: Refers to walkout or garden level walls<br>\nBsmtFinType1: Rating of basement finished area<br>\nBsmtFinSF1: Type 1 finished square feet<br>\nBsmtFinType2: Rating of basement finished area (if multiple types)<br>\nBsmtFinSF2: Type 2 finished square feet<br>\nBsmtUnfSF: Unfinished square feet of basement area<br>\nTotalBsmtSF: Total square feet of basement area<br>\nBsmtFullBath: Basement full bathrooms<br>\nBsmtHalfBath: Basement half bathrooms<br>\n***Porch***<br>\nOpenPorchSF: Open porch area in square feet<br>\nEnclosedPorch: Enclosed porch area in square feet<br>\n3SsnPorch: Three season porch area in square feet<br>\nScreenPorch: Screen porch area in square feet<br>\n<br>\n***Above basement***<br>\n1stFlrSF: First Floor square feet<br>\n2ndFlrSF: Second floor square feet<br>\nLowQualFinSF: Low quality finished square feet (all floors)<br>\nGrLivArea: Above grade (ground) living area square feet<br>\nFullBath: Full bathrooms above grade<br>\nHalfBath: Half baths above grade<br>\nBedroom: Bedrooms above grade (does NOT include basement bedrooms)<br>\nKitchen: Kitchens above grade<br>\nKitchenQual: Kitchen quality<br>\nTotRmsAbvGrd: Total rooms above grade (does not include bathrooms)<br>\n<br>\n**comfort**<br>\nUtilities: Type of utilities available<br>\nHeating: Type of heating<br>\nHeatingQC: Heating quality and condition<br>\nCentralAir: Central air conditioning<br>\nElectrical: Electrical system<br>\nFunctional: Home functionality (Assume typical unless deductions are warranted)<br>\nMiscFeature: Miscellaneous feature not covered in other categories<br>\nMiscVal: $Value of miscellaneous feature<br>\n<br>\n**Condition of sale**<br>\nMoSold: Month Sold (MM)<br>\nYrSold: Year Sold (YYYY)<br>\nSaleType: Type of sale<br>\nSaleCondition: Condition of sale<br>","b62298c6":"Data is skewed, the best transformation to apply is given by the boxcox function (see here : https:\/\/opendatascience.com\/transforming-skewed-data-for-machine-learning\/)","820cfdef":"And we will apply a little transformation so that we have a better linear relation with tmpPrice","cfe1ccc7":"### Object types","bccd00f2":"## 5.5 Features relative to the composition of the house\n<a id='5.5' href=\"#5.6\">next<\/a> - <a href=\"#menu\">top<\/a><br>\nbasement    \nBsmtQual: Evaluates the height of the basement    \nBsmtCond: Evaluates the general condition of the basement    \nBsmtExposure: Refers to walkout or garden level walls    \nBsmtFinType1: Rating of basement finished area    \nBsmtFinSF1: Type 1 finished square feet    \nBsmtFinType2: Rating of basement finished area (if multiple types)    \nBsmtFinSF2: Type 2 finished square feet    \nBsmtUnfSF: Unfinished square feet of basement area    \nTotalBsmtSF: Total square feet of basement area    \nBsmtFullBath: Basement full bathrooms    \nBsmtHalfBath: Basement half bathrooms  \n   \nPorch    \nOpenPorchSF: Open porch area in square feet    \nEnclosedPorch: Enclosed porch area in square feet    \n3SsnPorch: Three season porch area in square feet    \nScreenPorch: Screen porch area in square feet    \n    \nAbove basement    \n1stFlrSF: First Floor square feet    \n2ndFlrSF: Second floor square feet    \nLowQualFinSF: Low quality finished square feet (all floors)    \nGrLivArea: Above grade (ground) living area square feet    \nFullBath: Full bathrooms above grade    \nHalfBath: Half baths above grade    \nBedroom: Bedrooms above grade (does NOT include basement bedrooms)    \nKitchen: Kitchens above grade    \nKitchenQual: Kitchen quality    \nTotRmsAbvGrd: Total rooms above grade (does not include bathrooms)    \n    \ncomfort    \nUtilities: Type of utilities available    \nHeating: Type of heating    \nHeatingQC: Heating quality and condition    \nCentralAir: Central air conditioning    \nElectrical: Electrical system    \nFunctional: Home functionality (Assume typical unless deductions are warranted)    \nMiscFeature: Miscellaneous feature not covered in other categories    \nMiscVal: $Value of miscellaneous feature","25ec44d4":"# 2. Setup<a id='2'><\/a>","a197c364":"### LotArea: Lot size in square feet","462f5ade":"**Utilities** : this feature has no \"Utility\", we have only 1 value different from the 2912 others","799c5979":"All those features are in reality integers :","8f8e8b27":"And for condition1 and condition2, they represent in fact the same type of information, it would be more understandable for ML if we had some dummies features summarizing those two columns","81836de9":"## 2.1 Load libs<a id='2.1'><\/a>","e0c38761":"**Inconsistencies**","6a16df14":"**Above basement**   \n1stFlrSF: First Floor square feet   \n2ndFlrSF: Second floor square feet   \nLowQualFinSF: Low quality finished square feet (all floors)   \nGrLivArea: Above grade (ground) living area square feet   \nFullBath: Full bathrooms above grade   \nHalfBath: Half baths above grade   \nBedroom: Bedrooms above grade (does NOT include basement bedrooms)   \nKitchen: Kitchens above grade   \nKitchenQual: Kitchen quality   \nTotRmsAbvGrd: Total rooms above grade (does not include bathrooms)    ","89c9d54f":"We will merge train and test data, so that we can apply the same transformations to the two data sets and so that we can do some global stats","e0402fcd":"### MSSubClass: The building class","493ac545":"**Other garage features**","6155955a":"We will drop those ouliers","665a567e":"And create new features","60754904":"We have a very small amount of 4 or 5 places garages, we will replace 4 and 5 by 3","fccf64e6":"Remodeling cannot happen before age of the building","f3e7ee1d":"now the skew value :","fb4efbfe":"We will drop prices above 600 000$, they are not significative and may affect our computations","da218e93":"**Fireplaces**","7f252c76":"## 6.1 Prepare X and y\n<a id='6.1' href=\"#6.2\">next<\/a> - <a href=\"#menu\">top<\/a><br>","1bfc5e73":"**Categorical features**","488fef9a":"### comfort###\n\nUtilities: Type of utilities available   \nHeating: Type of heating   \nHeatingQC: Heating quality and condition   \nCentralAir: Central air conditioning   \nElectrical: Electrical system   \nFunctional: Home functionality (Assume typical unless deductions are warranted)   \nMiscFeature: Miscellaneous feature not covered in other categories   \nMiscVal: $Value of miscellaneous feature   ","cfa24e45":"**Exterior1st**","97fe3347":"**RoofMatl** : this feture is too unbalanced, we will get rid of it","52d5b068":"We will apply mean_encoder to the list of categorical features we have reviewed","af8e6684":"And here is a function that draws a heatmap, regardless of dtype of features ","41fa0e5a":"### Stacked regression","f5e84120":"Lot Area can be kept as it is, we have no NA, I will only delete one big outlier that is over 200000 sqr feet","08c8c26a":"And last transformation, we will try to approach normality","cfa19a28":"We see that the training dataset is pretty small in comparison with the test dataset !!","37508f37":"# 6 Predict SalePrice\n<a id='6' href=\"#6\"><\/a>","7128759a":"First let's look if there are some inconsistencies. For pool, if we have no pool whe should have no poll quality and zero for pool Area","a73d8a11":"<p style=\"text-align: center;font-size:64px;margin:50px;font-family:Impact, Charcoal, sans-serif;line-height: 140%;;\">House Prices: Advanced Regression Techniques<\/p>","9ddd8e81":"For the others categorical features there is nothing special to say","6b68055f":"MSZoning : For the 4 NA values, We will apply the most frequent value of MSZoning in the same Neighborhood","d20f0b4f":"And transform MiscVal, because Miscval is value of the MiscFeature, in $ but as we transformed Prices with log of Prices, we need to transform also Miscval","fca168f6":"### int64 values","f3d56ee4":"**Area by room**   \napproximation of mean area by room above grade, gives an idea of the average size of rooms","59809f32":"Some features seem to have no influence on price","8c2173d4":"MSSubClass: Identifies the type of dwelling involved in the sale.\t\n\n        20\t1-STORY 1946 & NEWER ALL STYLES\n        30\t1-STORY 1945 & OLDER\n        40\t1-STORY W\/FINISHED ATTIC ALL AGES\n        45\t1-1\/2 STORY - UNFINISHED ALL AGES\n        50\t1-1\/2 STORY FINISHED ALL AGES\n        60\t2-STORY 1946 & NEWER\n        70\t2-STORY 1945 & OLDER\n        75\t2-1\/2 STORY ALL AGES\n        80\tSPLIT OR MULTI-LEVEL\n        85\tSPLIT FOYER\n        90\tDUPLEX - ALL STYLES AND AGES\n       120\t1-STORY PUD (Planned Unit Development) - 1946 & NEWER\n       150\t1-1\/2 STORY PUD - ALL AGES\n       160\t2-STORY PUD - 1946 & NEWER\n       180\tPUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\n       190\t2 FAMILY CONVERSION - ALL STYLES AND AGES","45b7c47a":"There are very few houses with 3 fullbath and 2 halfbath (in basement) for the moment we keep those values but keep also in mind that we will have to replace those values","8e937312":"We have a better correlation transforming OverallQual to quantitative value, as this feature is ordinal (a higher value represents a higher quality)","eed7179d":"**XGBoost**","a509293b":"We have a little problem, the 150 value is encountered only in test dataset, we will replace this value with the description that seems the closest : 120","bcd79cde":"LotFrontage : We have a lot of missing values for lot frontage, but we can estimate it, what is lot frontage : <br><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/b\/bc\/Lot_map.PNG\">","f964db2d":"The house where garagecars is missing has a small lotfrontage, it is likely that it has a only 1 car detached garage, let us search the most common garage area for those type of garages :","abb341d9":"And some other improvements that I will not detail","c2177c21":"Let's verify the consistency of those features. First, the total basement surface should be the sum of others surfaces","65fa37a5":"'MSSubClass', 'MoSold' are categorical features, in reality Month is a quantitative value (1 to 12) but it's value has no sense in regard to the price, so we will interpret this feature like a qualitative feature","3cccb535":"## 5.2 Environnement features\n<a id='5.2' href=\"#5.3\">next<\/a> - <a href=\"#menu\">top<\/a><br>\n\nFor the different families of features we will apply the same workflow\n* univariate analysis\n    * distribution, mean, max\/min, ....\n    * outliers\n    * Type of distribution (Gaussian, uniform, logarithmic, etc.)\n    * Transform (log ...)\n\n* multivariate analysis\n    * Study the correlations between attributes.\n    * Identify extra data that would be useful\n    * detect inconsistencies\n\nHere are features relatives to the environnement\n* MSZoning: Identifies the general zoning classification of the sale.<br>\n* Street: Type of road access to property<br>\n* Alley: Type of alley access to property<br>\n* Neighborhood: Physical locations within Ames city limits<br>\n* Condition1: Proximity to various conditions<br>\n* Condition2: Proximity to various conditions (if more than one is present)<br>","a9771d01":"***Garage year built***   \nFirst of all we have an outlier","a7e59366":"<img src=\"https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/5407\/media\/housesbanner.png\">","ba523167":"I think this is the best estimation we can get, I will replace missing lot frontage values by the square root of lot area","74de44b7":"There is a big dependency between OverallCond and price, OverallCond is a qualitative feature, and should remain as qualitative because the relation between price and OverallCond is not linear.","a05be7af":"### OverallQual: Overall material and finish quality","6ddac6ec":"In data description, we learn the signification of NA for some data : \nAlley: NA means \tNo alley access<br>\nBsmtQual: NA means\tNo Basement<br>\nBsmtCond: NA means\tNo Basement<br>\nBsmtExposure: NA means\tNo Basement<br>\nBsmtFinType1: NA means\tNo Basement<br>\nBsmtFinType2: NA means\tNo Basement<br>\nFireplaceQu: NA means\tNo Fireplace<br>\nGarageType: NA means\tNo Garage<br>\nGarageFinish: NA means\tNo Garage<br>\nGarageQual: NA means\tNo Garage<br>\nGarageCond: NA means\tNo Garage<br>\nPoolQC: NA means\tNo Pool<br>\nFence: NA means\tNo Fence<br>\nMiscFeature: NA means\tNone<br>","60a63aed":"## 5.4 Features relative to the construction\n<a id='5.4' href=\"#5.5\">next<\/a> - <a href=\"#menu\">top<\/a><br>\nMSSubClass: Identifies the type of dwelling involved in the sale.   \nBldgType: Type of dwelling   \nHouseStyle: Style of dwelling   \nOverallQual: Rates the overall material and finish of the house   \nOverallCond: Rates the overall condition of the house   \nYearBuilt: Original construction date   \nYearRemodAdd: Remodel date (same as construction date if no remodeling or additions)   \nRoofStyle: Type of roof   \nRoofMatl: Roof material   \nExterior1st: Exterior covering on house   \nExterior2nd: Exterior covering on house (if more than one material)   \nMasVnrType: Masonry veneer type   \nMasVnrArea: Masonry veneer area in square feet   \nExterQual: Evaluates the quality of the material on the exterior   \nExterCond: Evaluates the present condition of the material on the exterior   \nFoundation: Type of foundation   \nWoodDeckSF: Wood deck area in square feet   \nPavedDrive: Paved driveway","6e164d1b":"This is primordial, categorical and numerical columns cannot be handled the same way. For example to compute correlation between two parameters, the algorithm to use is not the same.\nSeparating categorical and numerical values is not easy to do, some values are saved as integers (like MSSubClass) but are in reality categorical and should be treated as such. \nSo we have to manually check data types","7a15008e":"**Tranform all areas to have a better skrewed repartition and correlation**","b238fe34":"### LotFrontage: Linear feet of street connected to property","4f29d306":"**KitchenQual**\nWe will attribute \"TA\", the most common value for KitchenQual for the houses whose OverallQual is 5","81f8356b":"## 4.4 Impute empty values\n<a id='4.4' href=\"#5\">next<\/a>","8a27eed5":"# 5 Features engineering\n<a id='5' href=\"#5.1\">next<\/a>","998fb5c2":"**Functional**","144eaf80":"## 5.1 Categorical and quantitative features\n<a id='5.1' href=\"#5.2\">next<\/a> - <a href=\"#menu\">top<\/a>","8c76f11c":"**Goal**\n\nThe job is to predict the sales price for houses given in a dataset. For each Id in the test set, we must predict the value of the SalePrice variable, using the given features. \n\n**Metric**\n\nSubmissions are evaluated on ***Root-Mean-Squared-Error (RMSE)*** between the logarithm of the predicted value and the logarithm of the observed sales price. (Taking logs means that errors in predicting expensive houses and cheap houses will affect the result equally.)\n\n**Submission File Format**\n\nThe file should contain a header and have the following format:\n>Id,SalePrice  \n>1461,169000.1  \n>1462,187724.1233  \n>1463,175221","7191cd70":"Encoding categorical data","4305d418":"# 3 Target value : SalePrice<a id='3'><\/a>\n## 3.1 center and un-skew<a id='3.1'><\/a>","dd5ba244":"**Number of car places in garage**","c6cd2aa8":"And if basement surface is null, all others features should be zero or NA","6083b059":"# 1. Summary of the problem<a id='1'><\/a>","636c299e":"So we have now famillies of features that are related one to another (but perhaps not correlated).","9750930b":"## 2.2 Custom functions<a id='2.2'><\/a>","ff6a4f78":"## 5.6 Features relative to the condition of Sale\n<a id='5.6' href=\"#6\">next<\/a> - <a href=\"#menu\">top<\/a><br>\n\nMoSold: Month Sold (MM)   \nYrSold: Year Sold (YYYY)   \nSaleType: Type of sale   \nSaleCondition: Condition of sale   ","b3f0e703":"**MasVnrType**\n\nThis one is a bit more difficult to impute, there no imediate value to guess, we will have to call a friend : a predicter","bed03ab4":"We will apply the mean encoder for almost all categorical features, the only one we will treat differently is poolQC","f22a08f6":"## 4.2 Understanding data\n<a id='4.2' href=\"#4.3\">next<\/a>\n\nWe could go ahead holus-bolus and try a lot of things with this dataset, but a data scientist should always try to understand data. So let's think as a real-estate agent.\n\nIf we take a look at the shape of the data","4b15e14a":"**Basement Data**","889c7899":"**MasVnrArea**\n\nAnd here we will do the same process to estimate MasVnrArea","f90a9a94":"<img src=\"https:\/\/boobiz.fr\/house.jpg\">","3c8333bc":"First of all there are some outliers, very high sales prices ","6b2da6d2":"## 5.3 Features relative to the Lot\n<a id='5.3' href=\"#5.4\">next<\/a> - <a href=\"#menu\">top<\/a><br>\n\nLotFrontage: Linear feet of street connected to property   \nLotArea: Lot size in square feet   \nLotShape: General shape of property   \nLandContour: Flatness of the property   \nLotConfig: Lot configuration   \nLandSlope: Slope of property   \nFence: Fence quality   \nFireplace   \nFireplaces: Number of fireplaces   \nFireplaceQu: Fireplace quality   \nGarage   \nGarageType: Garage location   \nGarageYrBlt: Year garage was built   \nGarageFinish: Interior finish of the garage   \nGarageCars: Size of garage in car capacity   \nGarageArea: Size of garage in square feet   \nGarageQual: Garage quality   \nGarageCond: Garage condition   \nPool   \nPoolArea: Pool area in square feet   \nPoolQC: Pool quality   ","21efb335":"The value is close to zero, so the best transformation is the log :"}}