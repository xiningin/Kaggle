{"cell_type":{"a61fc1d4":"code","34bdd411":"code","a0f3afe4":"code","90019544":"code","f39e3ff0":"code","5b0e117b":"code","553b403e":"code","107db587":"code","e90e78dc":"code","4f25d9a7":"code","204781d1":"code","610d15bd":"code","8c392070":"code","38e9b618":"code","077f212c":"code","d910ddc1":"code","031c6a18":"code","ba552e6d":"code","c1cc3c3d":"code","03921ead":"code","539c6154":"markdown","76fdbe4e":"markdown","2649e6d8":"markdown","fb21d421":"markdown","839eba82":"markdown","a906f62b":"markdown","52714209":"markdown","64a55be5":"markdown","6008f393":"markdown","e8a15461":"markdown","447222fc":"markdown","de3be61a":"markdown","b6c09718":"markdown","69b9b604":"markdown"},"source":{"a61fc1d4":"#importing necessary library\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport matplotlib.image as mpimg\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import ConfusionMatrixDisplay\nfrom sklearn.metrics import classification_report, confusion_matrix\n\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n#list the directory \nprint(os.listdir('\/kaggle\/input\/'))","34bdd411":"#load the dataset using pandas\ntrain = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')","a0f3afe4":"#the train dataset\ntrain.head()","90019544":"#the test dataset\ntest.head()","f39e3ff0":"#sample submission format\nsample_submission.head()","5b0e117b":"# define X and Y\nX = train.drop(['label'], axis = 1)\nY = train['label']\n\n# normalize the data (features)\nX = X \/ 255.0\ntest = test \/ 255.0\n\n# convert data to np.array\nX = X.values\ntest = test.values\n\n#reshaing the images\nX = X.reshape(-1,28,28,1)\ntest = test.reshape(-1,28,28,1)\n\n# convert features to categorical \nY = to_categorical(Y, num_classes = 10)\n\n# check the shape of the data\nprint(X.shape, Y.shape)","553b403e":"# split the data into train and test\nX_train, X_val, Y_train, Y_val = train_test_split(X, Y, test_size = 0.2, random_state = 42)\n\nprint(X_train.shape, X_val.shape, Y_train.shape, Y_val.shape)","107db587":"#defining deep learning classifier\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)),\n  tf.keras.layers.MaxPooling2D(2, 2),\n  tf.keras.layers.Conv2D(32,(3,3), activation='relu'),\n  tf.keras.layers.MaxPooling2D(2, 2),\n  tf.keras.layers.Flatten(),\n  tf.keras.layers.Dense(512, activation=tf.nn.relu),\n  tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n])\n\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.summary()","e90e78dc":"#defining callback\nclass myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('val_accuracy')>0.9995):\n            print(\"\\nReached 99% accuracy so cancelling training!\")\n            self.model.stop_training = True\ncallbacks = myCallback() ","4f25d9a7":"#sample image\nplt.imshow(X_train[0])","204781d1":"#sample target of above image\nY_train[0]","610d15bd":"#training the data\nhistory = model.fit(X_train,\n                    Y_train,\n                    epochs=100,\n                    verbose=2,\n                    callbacks=[callbacks],\n                    validation_data = (X_val, Y_val)\n                   )","8c392070":"model.save(\"CNN_classifier-2.h5\")","38e9b618":"# plot the validation and training accuracy\nfig, axis = plt.subplots(1, 2, figsize=(16,6))\naxis[0].plot(history.history['val_accuracy'], label='val_acc')\naxis[0].set_title(\"Validation Accuracy\")\naxis[0].set_xlabel(\"Epochs\")\naxis[1].plot(history.history['accuracy'], label='acc')\naxis[1].set_title(\"Training Accuracy\")\naxis[1].set_xlabel(\"Epochs\")\nplt.show()","077f212c":"# predict on validation set\nY_pred= model.predict(X_val)\n\n#predicted and oriinal class\nY_pred_class = np.argmax(Y_pred, axis=1)\nY_test_class = np.argmax(Y_val, axis=1)\n\n# accuracy calculation\nval_acc = np.mean(Y_pred_class == Y_test_class)\n\n# print the accuracy\nprint(\"Validation accuracy: \", val_acc, \"\\n\")","d910ddc1":"# plot the Confusion Matrix\nfig, ax = plt.subplots(figsize=(12, 12))\ncm = confusion_matrix(Y_test_class,Y_pred_class, normalize='true')\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels = [0,1,2,3,4,5,6,7,8,9])\ndisp = disp.plot(ax=ax,cmap=plt.cm.Blues)\nax.set_title(\"Confusion Matrix\")\nplt.show()","031c6a18":"print(classification_report(Y_test_class,Y_pred_class))","ba552e6d":"# prediction on test dataset\ny_pred_test = model.predict(test)\nprediction = np.argmax(y_pred_test, axis = 1)","c1cc3c3d":"# create submission DataFrame\nsubmission = pd.DataFrame({'ImageId' : range(1,28001), 'Label' : list(prediction)})\nsubmission.head()\n","03921ead":"# create CSV file\nsubmission.to_csv(\"submission.csv\",index=False)","539c6154":"**Saving Weights**","76fdbe4e":"**Getting Classification Report**","2649e6d8":"**Defining the Deep Learning Classifier Model**","fb21d421":"**Display the Files**","839eba82":"**Training the Model **","a906f62b":"**Creating Feature and Target Variable**","52714209":"**Load Dataset**\n","64a55be5":"**Splitting the Dataset into Train and Test**","6008f393":"**Settting Callback**","e8a15461":"**Showing the Sample Image and Target Variable used for training the Model**","447222fc":"**Making Submission of Prediction**","de3be61a":"**Visualizing the training and Validation History**","b6c09718":"**Plotting the Confusion Matrix**","69b9b604":"** Calculating the Validation Accuracy**"}}