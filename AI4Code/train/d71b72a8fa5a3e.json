{"cell_type":{"698eb332":"code","702616cb":"code","cb6f3a8a":"code","c92de50c":"code","ef021147":"code","e7de8a00":"code","a909dae9":"code","112dcbc8":"code","5f5edc63":"code","00a395c4":"code","a155bfbc":"code","b81c7da8":"code","19134115":"code","eee96462":"code","8d544e89":"code","c2f8ef1a":"code","84de3ae5":"code","9f8f3c3b":"code","f355daf0":"code","820445a6":"code","d75c14bb":"code","9f91dc90":"code","e08c4ad2":"code","2d9ec02c":"code","880cc865":"code","d2a9a3d9":"code","24b7fe6e":"code","1b50d716":"code","72377eda":"code","42137bd3":"code","c7c27949":"code","61d1c4e9":"code","efdcbd71":"code","77c6609f":"code","721f4fc0":"code","7620c698":"code","6ff75d1e":"code","ed8f4395":"code","164cfbe8":"code","65c37657":"code","aac5e0cd":"code","4683317f":"code","c5f26077":"code","4fd25a5b":"code","c1412643":"code","31e0f961":"code","48e850cb":"code","e8b5fb43":"code","5522f447":"code","836c2eb7":"markdown","d3fd60b3":"markdown","ef074267":"markdown","4a22ed8e":"markdown","94c6dbc5":"markdown","585439ea":"markdown","bde1910f":"markdown","21fa168d":"markdown","22ee5b04":"markdown","35745fcd":"markdown","daae1019":"markdown","0c078230":"markdown","58a5c169":"markdown","1d43978a":"markdown","583f6bd1":"markdown","22407300":"markdown","84f07f5d":"markdown","2701ca2c":"markdown","47f63cf9":"markdown","cd2c4f1e":"markdown","6da7c6a0":"markdown","0627915a":"markdown","15a7c653":"markdown","f679c111":"markdown","4cc088cb":"markdown","458d375d":"markdown","529186a9":"markdown","88f13d28":"markdown","0e59e643":"markdown","895b6a3b":"markdown","318742d9":"markdown","e3acdc13":"markdown","ebd53b5f":"markdown","af8ac4ca":"markdown","663bac3b":"markdown","aa54491d":"markdown","fac37709":"markdown","4ae553cc":"markdown","ae968e03":"markdown","86a587b4":"markdown","3c4b0574":"markdown","f77dde40":"markdown","86900c20":"markdown","a87aad3b":"markdown"},"source":{"698eb332":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","702616cb":"df_train = pd.read_csv(\"\/kaggle\/input\/machine-learning-24-hrs-hackathon\/train_SJC.csv\", header = 1)\ndf_test = pd.read_csv(\"\/kaggle\/input\/machine-learning-24-hrs-hackathon\/Test_SJC.csv\")","cb6f3a8a":"df_train.rename(columns = {'Unnamed: 2':'DateReported', 'Unnamed: 7':'DependentsOther', 'Unnamed: 11':'DaysWorkedPerWeek'}, inplace = True)","c92de50c":"df_train.head()","ef021147":"df_test.head(10)","e7de8a00":"df_train.shape","a909dae9":"df_train.info()","112dcbc8":"df_train.describe()","5f5edc63":"df_train.isnull().sum()","00a395c4":"df_train[\"MaritalStatus\"].mode()","a155bfbc":"df_train[\"WeeklyWages\"].mean()","b81c7da8":"df_train[\"HoursWorkedPerWeek\"].mean()","19134115":"df_train[\"MaritalStatus\"].fillna(\"U\", inplace = True)","eee96462":"df_train[\"WeeklyWages\"].fillna(df_train[\"WeeklyWages\"].mean(), inplace = True)","8d544e89":"df_train[\"HoursWorkedPerWeek\"].fillna(df_train[\"HoursWorkedPerWeek\"].mean(), inplace = True)","c2f8ef1a":"df_train.isnull().sum()","84de3ae5":"sns.countplot(data = df_train, x = \"MaritalStatus\")","9f8f3c3b":"sns.countplot(df_train[\"Gender\"])","f355daf0":"sns.countplot(df_train.PartTimeFullTime)","820445a6":"sns.distplot(df_train[\"Age\"])","d75c14bb":"sns.countplot(df_train[\"DependentChildren\"])","9f91dc90":"sns.countplot(df_train[\"DependentsOther\"])","e08c4ad2":"sns.distplot(df_train.InitialIncurredCalimsCost)","2d9ec02c":"sns.countplot(df_train[\"DaysWorkedPerWeek\"])","880cc865":"df_train.HoursWorkedPerWeek.value_counts().unique()","d2a9a3d9":"sns.distplot(df_train[\"HoursWorkedPerWeek\"])","24b7fe6e":"df_train.WeeklyWages.value_counts()","1b50d716":"sns.distplot(df_train.WeeklyWages)","72377eda":"#sns.histplot(data_train[\"ClaimDescription\"])","42137bd3":"sns.displot(data = df_train, x = 'DaysWorkedPerWeek', y = 'PartTimeFullTime')","c7c27949":"sns.barplot(x = df_train['DaysWorkedPerWeek'], y = df_train['Gender'])","61d1c4e9":"sns.barplot(x = df_train['DaysWorkedPerWeek'], y = df_train['WeeklyWages'])","efdcbd71":"# define numerical features\n#data_features_num <- c('Age','DependentChildren', 'DependentsOther', 'WeeklyWages', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n#                       'InitialIncurredCalimsCost', 'Accident_Year', 'Accident_Month', 'Accident_Day', 'Accident_Hour')\n                       #'Report_Year', 'Report_Month', 'Report_Day', 'Report_Lag')","77c6609f":"df_train['YearOfAccident']  = pd.DatetimeIndex(df_train['DateTimeOfAccident']).year\ndf_train['MonthOfAccident']  = pd.DatetimeIndex(df_train['DateTimeOfAccident']).month\ndf_train['DayOfAccident']  = pd.DatetimeIndex(df_train['DateTimeOfAccident']).day\n\ndf_train['ReportDelayInDays'] = pd.DatetimeIndex(df_train['DateReported']).date - pd.DatetimeIndex(df_train['DateTimeOfAccident']).date\ndf_train['ReportDelayInDays'] = (df_train['ReportDelayInDays']  \/ np.timedelta64(1, 'D')).astype(int)\ndf_train['ReportDelayInWeeks'] = np.floor(df_train['ReportDelayInDays'] \/ 7.).astype(int)\ndf_train['ReportDelayInWeeks'] = np.clip(df_train['ReportDelayInWeeks'], a_max=55, a_min=None)","721f4fc0":"df_test['YearOfAccident']  = pd.DatetimeIndex(df_test['DateTimeOfAccident']).year\ndf_test['MonthOfAccident']  = pd.DatetimeIndex(df_test['DateTimeOfAccident']).month\ndf_test['DayOfAccident']  = pd.DatetimeIndex(df_test['DateTimeOfAccident']).day\n\ndf_test['ReportDelayInDays'] = pd.DatetimeIndex(df_test['DateReported']).date - pd.DatetimeIndex(df_test['DateTimeOfAccident']).date\ndf_test['ReportDelayInDays'] = (df_test['ReportDelayInDays']  \/ np.timedelta64(1, 'D')).astype(int)\ndf_test['ReportDelayInWeeks'] = np.floor(df_test['ReportDelayInDays'] \/ 7.).astype(int)\ndf_test['ReportDelayInWeeks'] = np.clip(df_test['ReportDelayInWeeks'], a_max=55, a_min=None)","7620c698":"df_train.head()","6ff75d1e":"df_test.head()","ed8f4395":"import sklearn.preprocessing as pre\nimport sklearn.model_selection as ms\nimport sklearn.linear_model as lm\nimport numpy as np","164cfbe8":"numerical_features = [c for c in df_train.columns if df_train[c].dtype in ['float64', 'int64'] if c not in ['Acc_Day', 'Acc_Month', 'Acc_Year']]\ncategorical_features = [c for c in df_train.columns if c not in numerical_features]\nnumerical_features, categorical_features","65c37657":"#df_train['InitialIncurredCalimsCost'] = np.log1p(df_train['InitialIncurredCalimsCost'])\n#df_test['InitialIncurredCalimsCost'] = np.log1p(df_test['InitialIncurredCalimsCost'])\n\n#target = np.log1p(df_train['UltimateIncurredClaimCost'])\n\ntarget = df_train['UltimateIncurredClaimCost']\n\ndf_train.drop(['ClaimNumber', 'ClaimDescription', 'UltimateIncurredClaimCost'], axis = 1, inplace = True)\ndf_test.drop(['ClaimNumber', 'ClaimDescription'], axis = 1, inplace = True)\n\nnumerical_features.remove('UltimateIncurredClaimCost')\ncategorical_features.remove('ClaimNumber')\ncategorical_features.remove('ClaimDescription')","aac5e0cd":"lbl = pre.LabelEncoder()\n\nfor c in df_train[categorical_features]:\n    print(f\"Label Encoding Categorical Feature - {c.upper()}\")\n    df_train[c] = lbl.fit_transform(df_train[c].astype(str))\n    df_test[c] = lbl.fit_transform(df_test[c].astype(str))\nprint('Label Encoding done...')\ndf_train[categorical_features].head(2)","4683317f":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score,mean_squared_error\nimport seaborn as sns","c5f26077":"x_train, x_test, y_train, y_test = ms.train_test_split(df_train, target, test_size=0.3, random_state=123456)","4fd25a5b":"model1 = DecisionTreeRegressor()\nmodel1.fit(x_train,y_train)","c1412643":"y_pred=model1.predict(df_test)","31e0f961":"y_pred","48e850cb":"import sklearn.metrics as mt\nprint('Root Mean Squared Error is: ',np.sqrt(mt.mean_squared_error(y_test, y_pred = model1.predict(x_test))))","e8b5fb43":"csv = pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv\")\ncsv[\"UltimateIncurredClaimCost\"] = y_pred","5522f447":"csv.to_csv(\"Sample Submission_new.csv\", index = False)","836c2eb7":"#### 3. Relation between Weekly Wages and Days worked per week                 \n#### The below plot shows that there are more amount of wages for more number of days. The weekly wage increases as the number of working days increases. \n#### We can see that weekly wages for 7 days is more than the other days.","d3fd60b3":"#### Convert Date and Time of accident to individual values - year, month and day of train dataset","ef074267":"# Problem: To predict Workers Compensation claims","4a22ed8e":"#### 2. Comparison between workers Genders and Days Worked Per Week                  \n#### The below plot shows that male workers work for 5 days in a week which is similar to workers with unknown gender. Whereas female workers work for lesser than 5 days. ","94c6dbc5":"#### 2. Dependent Children                         \n#### The below plot taking dependent children on the x axis, describes that there are more number of workers who does not have any dependent children. And some workers have 1, 2, 3 and 4 dependent children. ","585439ea":"## Model Creation","bde1910f":"#### Reading datas","21fa168d":"#### Checking the shape of the train dataset","22ee5b04":"#### Let's see statistical information about train dataset","35745fcd":"#### Convert Date and Time of accident to individual values - year, month and day of test dataset to make it same","daae1019":"#### Missing values - 0","0c078230":"### ------ THE END ------","58a5c169":"### Visualizations of comparison between features","1d43978a":"#### 2. Gender                             \n#### The countplot on the feature \"Gender\" shows that there are more males workers compared to female workers.","583f6bd1":"#### 3. Part Time or Full Time                                                                \n#### The below plot shows that there are many workers who work as full time compared to less number of part time workers.","22407300":"# EDA","84f07f5d":"#### Variables Description  \nIndependent Variables\n* ClaimNumber: Unique policy identifier\n* DateTimeOfAccident: Date and time of accident\n* DateReported: Date that accident was reported\n* Age: Age of worker\n* Gender: Gender of worker\n* MaritalStatus: Martial status of worker. (M)arried, (S)ingle, (U)unknown.\n* DependentChildren: The number of dependent children\n* DependentsOther: The number of dependants excluding children\n* WeeklyWages: Total weekly wage\n* PartTimeFullTime: Binary (P) or (F)\n* HoursWorkedPerWeek: Total hours worked per week\n* DaysWorkedPerWeek: Number of days worked per week\n* ClaimDescription: Free text description of the claim\n* InitialIncurredClaimCost: Initial estimate by the insurer of the claim cost\n\nDependent\/Prediction Variable\n* UltimateIncurredClaimCost: Total claims payments by the insurance company.","2701ca2c":"### Visualizations of categorical features","47f63cf9":"# DATA PROCESSING","cd2c4f1e":"#### Categorizing the training dataset features into numerical and categorical features.","6da7c6a0":"#### 1. Age                                                                \n#### The Age feature tipped on the distplot shows that there are a large number of workers between the age of 20 to 30. And the count decreases as the age decreases. ","0627915a":"#### 3. Dependent Others                                  \n#### The below plot describes that there are more number of workers who does not have any dependents. And some workers have 1 dependent member. None of the workers have more than 1 dependent members. ","15a7c653":"#### Calculating the RMSE ","f679c111":"#### 6. Hours Worked Per Week","4cc088cb":"# Data Loading","458d375d":"#### 1. Marital Status                                       \n#### The below plot describes the value counts on the feature \"Marital Status\". The plot shows that there are more number of single workers followed by married workers and then unmarried workers. ","529186a9":"#### Standardization","88f13d28":"#### 4. Initial Incurred Claims Cost                                   \n#### The plot shows that most of the claims cost lies between the range of 0 to 20000.                                        There are some claims cost which are greater than 20000 as well.","0e59e643":"#### 1. Relation between Days Worked Per Week and Type of employment (part time or full time)                        \n#### The plot shows that most of the full time workers work for 5 days a week. ","895b6a3b":"#### Importing necessary packages which will be used.","318742d9":"#### Fetching the prediction variable values","e3acdc13":"#### 7. Weekly Wages                                          \n#### The plot descibes that weekly wages for majority of the workers lies between the range of 0 to 1000.","ebd53b5f":"#### Finding Missing Values","af8ac4ca":"### Visualizations of numerical features","663bac3b":"##### Splitting the dataset ","aa54491d":"#### Let's the train dataset to some information about it","fac37709":"##### Calculating the prediction variable values from test dataset","4ae553cc":"## Reason to select the algorithm\nModel were created using Linear Regression, Lasso Regression and Decision Tree Regressor.\nThe performances in models of linear regression and lasso regression were low and quite the same. Whereas performance in the model of decision tree regressor was better than the other two. Hence, decision tree regressor algorithm was choosen.  ","ae968e03":"## Feature Engineering","86a587b4":"#### 5. Days Worked Per Week                        \n#### The plot shows that more number of workers work for 5 days in a week. The other number of workers are divided into different number of working days like 3, 4, 6, 7.","3c4b0574":"#### Replacing missing values of all 3 columns with mode, mean and mean","f77dde40":"#### Designing a Decision Tree Regressor Model","86900c20":"##### Hours Worked Per Week                                                              \n##### The plot shows that most workers work around 40-60 hours per week.             \n##### Though there are outliers present in the Hours Worked Per Week data feature.","a87aad3b":"#### Label Encoding"}}