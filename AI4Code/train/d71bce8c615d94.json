{"cell_type":{"e67e8917":"code","adc42cac":"code","ec07a2c4":"code","f406a10b":"code","d2064045":"code","0227a04a":"code","d8048e1d":"code","a04eff74":"code","bd43aca8":"markdown"},"source":{"e67e8917":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","adc42cac":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\n# train_data.head(3)\nprint (train_data.describe())","ec07a2c4":"import re\n\ntrain_df_org = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df_org = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_df_org[\"Survived\"] = 0\n\n# name\ncombine_train_test = train_df_org.append(test_df_org)\nPassengerId = test_df_org['PassengerId']\n\ncombine_train_test['Title'] = combine_train_test[\"Name\"].map(lambda x: re.compile(\",(.*?)\\.\").findall(x)[0])\n\ntitle_Dict = {}\ntitle_Dict.update(dict.fromkeys(['Capt','Col','Major','Dr','Rev'],'Officer'))\ntitle_Dict.update(dict.fromkeys(['Don','Sir','the Countess','Dona','Lady'],'Royalty'))\ntitle_Dict.update(dict.fromkeys(['Mme','Ms','Mrs'],'Mrs'))\ntitle_Dict.update(dict.fromkeys(['Mlle','Miss'],'Miss'))\ntitle_Dict.update(dict.fromkeys(['Mr'],'Mr'))\ntitle_Dict.update(dict.fromkeys(['Master','Jonkheer'],'Master'))\n\ncombine_train_test['Title'] = combine_train_test['Title'].map(title_Dict)\n\n# Sex\ncombine_train_test['Sex'] = pd.factorize(combine_train_test['Sex'])[0]\n\nsex_dummies_df = pd.get_dummies(combine_train_test['Sex'],prefix = combine_train_test[['Sex']].columns[0])\ncombine_train_test = pd.concat([combine_train_test, sex_dummies_df], axis =1)\n\n# Embark\ncombine_train_test['Embarked'].fillna(combine_train_test['Embarked'].mode()).iloc[0]\ncombine_train_test['Embarked'] = pd.factorize(combine_train_test['Embarked'])[0]\n\nemb_dummies_df = pd.get_dummies(combine_train_test['Embarked'],prefix = combine_train_test[[\"Embarked\"]].columns[0])\ncombine_train_test = pd.concat([combine_train_test,emb_dummies_df],axis)\n\n# Fare\ncombine_train_test['Fare'] = combine_train_test[['Fare']].fillna(combine_train_test.groupby('Plcass').transform(np.mean))","f406a10b":"import warnings\nwarnings.filterwarnings('ignore')\n\ntrain_data[\"Age\"] = train_data[\"Age\"].fillna(train_data[\"Age\"].median())\n# print(train_data[\"Age\"])\n\nprint(train_data[\"Sex\"].unique())\n# train_data.loc[train_data[\"Sex\"] == \"male\",\"Sex\"] = 0\n# train_data.loc[train_data[\"Sex\"] == \"female\",\"Sex\"] = 1\n\nprint(train_data[\"Embarked\"].unique())\n# train_data.loc[train_data[\"Embarked\"] == 'S',\"Embarked\"] = 0\n# train_data.loc[train_data[\"Embarked\"] == 'C',\"Embarked\"] = 1\n# train_data.loc[train_data[\"Embarked\"] == 'Q',\"Embarked\"] = 2\n# train_data[\"Embark\"] = train_data[\"Embark\"].fillna(train_data[\"Embark\"].mode().values)\ntrain_data.Embarked[train_data.Embarked.isnull()] = train_data.Embarked.dropna().mode().values\n\n# train_data['Cabin'] = train_data['Cabin'].fillna('N0')","d2064045":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","0227a04a":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\nprint(\"Women's:\",rate_women)","d8048e1d":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_man = sum(men)\/len(men)\nprint(rate_man)","a04eff74":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\",\"Embarked\",\"Age\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators = 100, max_depth = 5, random_state = 1)\nmodel.fit(X,y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId':test_data.PassengerId, 'Survived':predictions})\noutput.to_csv('my_submission.csv', index = False)\n\nprint(\"Success\")","bd43aca8":"\u4ece\u540d\u5b57\u5f53\u4e2d\u63d0\u53d6\u79f0\u547c\u5982Dr,Mr\u7b49"}}