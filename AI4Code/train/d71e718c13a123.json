{"cell_type":{"78e75132":"code","86e4bf54":"code","e156ff15":"code","764247b0":"code","ccda9ad3":"code","9e1adf10":"code","c2b8ea39":"code","7720c642":"code","556ff1a2":"markdown","cd892cd7":"markdown","6df866fd":"markdown","1d55a980":"markdown","3fcc3e20":"markdown","a1848cf8":"markdown"},"source":{"78e75132":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","86e4bf54":"!pip install pytorch_tabnet ","e156ff15":"from pytorch_tabnet.tab_model import TabNetClassifier\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.metrics import roc_auc_score\nnp.random.seed(0)\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import QuantileTransformer,  KBinsDiscretizer\nfrom sklearn.impute import SimpleImputer\n\nimport torch\n\nfrom sklearn.decomposition import PCA\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.pipeline import Pipeline\n\n%matplotlib inline","764247b0":"%%time\ntrain = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv')\n\ntrain['n_missing'] = train.isna().sum(axis=1)\ntest['n_missing'] = test.isna().sum(axis=1)\ntrain['target'] = train['target'].astype(str)\n\nfeatures = [col for col in train.columns if col not in ['target', 'id']]\n\npipe = Pipeline([\n        ('imputer', SimpleImputer(strategy='median',missing_values=np.nan)),\n        (\"scaler\", QuantileTransformer(n_quantiles=200, output_distribution='normal'))\n        ])\nX = pipe.fit_transform(train[features])\nX_test=pipe.transform(test[features])","ccda9ad3":"train.head()","9e1adf10":"tabnet_params = dict(n_steps = 1,\n                   optimizer_fn=torch.optim.Adam,\n                   optimizer_params=dict(lr=1e-2, weight_decay = 5e-4),\n                   scheduler_params={\"step_size\":1, # how to use learning rate scheduler\n                                     \"gamma\":0.9},\n                   scheduler_fn=torch.optim.lr_scheduler.StepLR,\n                   mask_type='entmax',\n                   verbose = 5)","c2b8ea39":"from sklearn.model_selection import KFold\nimport torch\n\nkf = KFold(n_splits=5, random_state = 42, shuffle = True)\npreds = np.zeros((540000,))\nfor  fold , (train_index, test_index) in enumerate(kf.split(X)):\n    print(20*\"*\")\n    print(\"Fold {}:\".format(fold))\n    X_train, X_valid = X[train_index], X[test_index]\n    y_train, y_valid = train.target[train_index].values, train.target[test_index].values\n\n    clf = TabNetClassifier(**tabnet_params)\n    clf.fit(\n        X_train=X_train, y_train=y_train,\n        eval_set=[(X_train, y_train), (X_valid, y_valid)],\n        eval_name=['train', 'valid'],\n        eval_metric=['auc'],\n        max_epochs= 10, patience=5,\n        batch_size=1024*10, virtual_batch_size=128*10,\n        num_workers=0,\n        weights=1,\n        drop_last=False\n    ) \n    preds += clf.predict_proba(X_test)[:,1]\/5\n    print(preds.shape)","7720c642":"sub = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv')\nsub.iloc[:,1]= preds\nsub=sub.set_index('id')\nsub.to_csv('submission.csv')\nsub.head()","556ff1a2":"# Submission","cd892cd7":"# Reference\nThis Notebook uses the code provided by firefliesqn,Link Below\nhttps:\/\/www.kaggle.com\/firefliesqn\/tabnet-cv-0-81\nThanks for providing the code firefliesqn","6df866fd":"# Modeling","1d55a980":"# Data Preparation","3fcc3e20":"# Installing TabNet","a1848cf8":"# Importing Libraries"}}