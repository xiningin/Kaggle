{"cell_type":{"73914c14":"code","6a9c4a91":"code","4877f9e5":"code","a2324694":"code","e90116ac":"code","adb2c6f1":"code","ec8f2373":"code","63cc8f60":"code","07c7305e":"code","c82fed4c":"code","535dcfe8":"code","90ab39f3":"code","17b03d7d":"code","73a1c6ce":"code","fd53abb9":"code","7723121e":"code","f78b85cc":"code","09853c93":"code","6664e476":"code","1a26bba1":"code","74ef42bc":"code","ec7ba6d3":"code","9f8d60dd":"code","389e4896":"code","5a6f3810":"code","f9ee2482":"code","a63a18fa":"code","38e3a23d":"code","b2973ab3":"code","22511e16":"code","27ec23ce":"code","9e21c1dd":"code","e92ce680":"code","efc049a4":"code","13ab2a79":"code","775b267d":"code","c93a9918":"code","66456460":"code","967a316a":"code","359ae152":"code","b07dd434":"code","d45afae6":"code","81a54f63":"code","253d2606":"code","93ccfa12":"code","ef411124":"code","1bb71b5f":"code","f91aba46":"code","727b5fda":"code","11cfb9c4":"code","178add65":"code","91376f85":"code","ca6dd277":"code","d75e2ff8":"code","76b53c3d":"code","64e6851e":"code","f08ff091":"code","38c0c682":"code","d3569a9a":"code","fe2b664e":"code","b63635e1":"markdown"},"source":{"73914c14":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","6a9c4a91":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier","4877f9e5":"train = pd.read_table('..\/input\/train.tsv')\ntest = pd.read_table('..\/input\/test.tsv')\nsubm = pd.read_csv('..\/input\/sampleSubmission.csv')","a2324694":"train.head()","e90116ac":"train.info()","adb2c6f1":"train.describe()","ec8f2373":"test.head()","63cc8f60":"test.info()","07c7305e":"test.describe()","c82fed4c":"subm.head()","535dcfe8":"xtrain, xtest, ytrain, ytest = train_test_split(train.Phrase, train.Sentiment, test_size = 0.2, random_state = 42)","90ab39f3":"cv = CountVectorizer(max_features = None)\ncv.fit(xtrain)","17b03d7d":"xtrain_cv = cv.transform(xtrain)\nxtrain_cv","73a1c6ce":"xtest_cv = cv.transform(xtest)\nxtest_cv","fd53abb9":"test = test.Phrase","7723121e":"test_cv = cv.transform(test)\ntest_cv","f78b85cc":"mnb = MultinomialNB(alpha = 0.5)\nmnb.fit(xtrain_cv, ytrain)\npred = mnb.predict(test_cv)","09853c93":"pred","6664e476":"print('Accuracy of Naive Bayes: ', mnb.score( xtrain_cv , ytrain))","1a26bba1":"subm.Sentiment = pred\nsubm.to_csv(\"mnb_cv.csv\", index = False)\nsubm.tail()","74ef42bc":"tv = TfidfVectorizer(max_features = None)\ntv.fit(xtrain)","ec7ba6d3":"xtrain_tv = tv.transform(xtrain)\nxtrain_tv","9f8d60dd":"xtest_tv = tv.transform(xtest)\nxtest_tv","389e4896":"test_tv = tv.transform(test)\ntest_tv","5a6f3810":"mnb = MultinomialNB()\nmnb.fit(xtrain_tv, ytrain)\npred1 = mnb.predict(test_tv)","f9ee2482":"pred1","a63a18fa":"print('Accuracy of Naive Bayes: ', mnb.score( xtrain_tv , ytrain))","38e3a23d":"subm['Sentiment'] = pred1\nsubm.to_csv(\"mnb_tv.csv\", index = False)\nsubm.tail()","b2973ab3":"clf = LogisticRegression(C = 1)\nclf.fit(xtrain_cv, ytrain)\npred2 = clf.predict(test_cv)","22511e16":"pred2","27ec23ce":"print('Accuracy of Logistic Regression: ', clf.score( xtrain_cv , ytrain))","9e21c1dd":"subm['Sentiment'] = pred2\nsubm.to_csv(\"lr_cv.csv\", index = False)\nsubm.tail()","e92ce680":"clf = LogisticRegression(C = 1)\nclf.fit(xtrain_tv, ytrain)\npred3 = clf.predict(test_tv)","efc049a4":"pred3","13ab2a79":"print('Accuracy of Logistic Regression: ', clf.score( xtrain_tv , ytrain))","775b267d":"subm['Sentiment'] = pred3\nsubm.to_csv(\"lr_tv.csv\", index = False)\nsubm.tail()","c93a9918":"from sklearn.svm import LinearSVC\nsvm = LinearSVC(dual = False)\nsvm.fit(xtrain_cv, ytrain)\npred4 = svm.predict(test_cv)","66456460":"pred4","967a316a":"print('Accuracy of SVM: ', svm.score( xtrain_cv , ytrain))","359ae152":"subm['Sentiment'] = pred4\nsubm.to_csv(\"svm_cv.csv\", index = False)\nsubm.tail()","b07dd434":"svm = LinearSVC(dual = False)\nsvm.fit(xtrain_tv, ytrain)\npred5 = svm.predict(test_tv)","d45afae6":"pred5","81a54f63":"print('Accuracy of SVM: ', svm.score( xtrain_tv , ytrain))","253d2606":"subm['Sentiment'] = pred5\nsubm.to_csv(\"svm_tv.csv\", index = False)\nsubm.tail()","93ccfa12":"etc = ExtraTreesClassifier()\netc.fit(xtrain_cv,ytrain)\npred6 = etc.predict(test_cv)","ef411124":"pred6","1bb71b5f":"print('Accuracy of Extra Tree Classifier: ', etc.score( xtrain_cv , ytrain))","f91aba46":"subm['Sentiment'] = pred6\nsubm.to_csv(\"etc_cv.csv\", index = False)\nsubm.tail()","727b5fda":"etc = ExtraTreesClassifier()\netc.fit(xtrain_tv,ytrain)\npred7 = etc.predict(test_tv)","11cfb9c4":"pred7","178add65":"print('Accuracy of Extra Tree Classifier: ', etc.score( xtrain_tv , ytrain))","91376f85":"subm['Sentiment'] = pred7\nsubm.to_csv(\"etc_tv.csv\", index = False)\nsubm.tail()","ca6dd277":"bc = BaggingClassifier()\nbc.fit(xtrain_cv,ytrain)\npred8 = bc.predict(test_cv)","d75e2ff8":"pred8","76b53c3d":"print('Accuracy of Bagging Classifier: ', bc.score( xtrain_cv , ytrain))","64e6851e":"subm['Sentiment'] = pred8\nsubm.to_csv(\"bc_cv.csv\", index = False)\nsubm.tail()","f08ff091":"bc = BaggingClassifier()\nbc.fit(xtrain_tv,ytrain)\npred9 = bc.predict(test_tv)","38c0c682":"pred9","d3569a9a":"print('Accuracy of Bagging Classifier: ', bc.score( xtrain_tv , ytrain))","fe2b664e":"subm['Sentiment'] = pred9\nsubm.to_csv(\"bc_tv.csv\", index = False)\nsubm.tail()","b63635e1":"Thank you for spending your time in my kernel.\n# If you like it please upvote."}}