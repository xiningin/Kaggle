{"cell_type":{"43d657d5":"code","5979cb65":"code","308e5d4c":"code","aa206de5":"code","0b00ac06":"code","7b2d3000":"code","bfd7d2a2":"code","e62685f9":"code","ac79ef22":"code","1e9d2f4e":"code","f668c1cd":"code","3b621a56":"code","1361f8bf":"code","9c450faf":"code","816c5eb2":"code","6e95e76b":"code","4b96248b":"code","176ce29f":"code","2bb74589":"code","6e23187b":"code","d23868c4":"code","d6c7be4d":"code","901b72ae":"code","778ee5e6":"code","98af4a2f":"code","6ec5a8a4":"code","45343612":"code","01548f1e":"code","f25dd5e8":"markdown","e97d172a":"markdown","0a36c0c7":"markdown","a9bf40dd":"markdown"},"source":{"43d657d5":"import numpy as np\nimport pandas as pd\n#from xgboost import XGBClassifier\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import ShuffleSplit\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score, roc_auc_score, roc_curve, confusion_matrix, auc","5979cb65":"!ls ..\/input\/titanic","308e5d4c":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","aa206de5":"gender_submission.head()","0b00ac06":"data = pd.concat([train, test], sort=False)","7b2d3000":"data.isnull().sum()","bfd7d2a2":"data['Sex'].replace(['male','female'], [0, 1], inplace=True)","e62685f9":"data['Embarked'].fillna(('S'), inplace=True)\ndata['Embarked'] = data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)","ac79ef22":"data['Fare'].fillna(np.mean(data['Fare']), inplace=True)\ndata['fare_value']=data['Fare']\/50","1e9d2f4e":"age_avg = data['Age'].mean()\nage_std = data['Age'].std()\ndata['Age'].fillna(np.random.randint(age_avg - age_std, age_avg + age_std), inplace=True)\ndata['age_value']=data['Age']\/50","f668c1cd":"data['family'] = (data['SibSp'] + data['Parch'])\/5 ","3b621a56":"data['isAlone'] = 0\ndata.loc[data['family'] > 0, 'isAlone'] = 1","1361f8bf":"delete_columns = ['Name','PassengerId','SibSp','Parch','Ticket','Cabin','Age','Fare']\ndata.drop(delete_columns, axis=1, inplace=True)","9c450faf":"train = data[:len(train)]\ntest = data[len(train):]","816c5eb2":"trainY = train['Survived']\ntrainX = train.drop('Survived', axis = 1)\ntestX = test.drop('Survived', axis = 1)","6e95e76b":"X = np.array(trainX)\ny = np.array(trainY)","4b96248b":"clf = XGBRegressor(max_depth=3, n_estimators=1000, learning_rate=0.01)","176ce29f":"ss = ShuffleSplit(n_splits=5,train_size=0.8,test_size =0.2,\n                  random_state=0) \n\nfor train_index, test_index in ss.split(X): \n    X_train, X_test = X[train_index], X[test_index]\n    Y_train, Y_test = y[train_index], y[test_index]\n    clf.fit(X_train, Y_train) \n    \n    print(clf.score(X_test, Y_test))","2bb74589":"train_pred = clf.predict(np.array(trainX))\nprint(train_pred[0:10])","6e23187b":"from sklearn.metrics import roc_curve,roc_auc_score\n\nfpr, tpr, thresholds = roc_curve(trainY, train_pred, drop_intermediate=False)\n\nplt.figure(figsize = (8,6))\nplt.plot(fpr, tpr, marker='o')\nplt.title('ROC curve')\nplt.xlabel('FPR: False positive rate')\nplt.ylabel('TPR: True positive rate')\nplt.grid()\n","d23868c4":"auc=roc_auc_score(trainY, train_pred)\nprint( 'AUC = %0.2f' %auc)","d6c7be4d":"print(len(fpr))\nprint(len(trainY))","901b72ae":"rocdf=pd.DataFrame(columns=['fpr','tpr','thresholds'])\nrocdf['fpr']=fpr\nrocdf['tpr']=tpr\nrocdf['thresholds']=thresholds\nrocdf['dist_from_(0,1)']=rocdf['fpr']**2+(1-rocdf['tpr'])**2\nrocdf","778ee5e6":"thmin=rocdf['thresholds'].min()\nthmax=rocdf['thresholds'].max()\nrocdf['thresholds2']=rocdf['thresholds'].apply(lambda x: (thmax-x)\/(thmax-thmin))\nrocdf","98af4a2f":"rocdf[rocdf['dist_from_(0,1)']==rocdf['dist_from_(0,1)'].min()]\n#cut-off value = thresholds2","6ec5a8a4":"test_pred = clf.predict(np.array(testX))\nprint(test_pred[0:10])","45343612":"# set standard cut-off value as 0.5\n\nsub = gender_submission\nTest_pred=[]\nfor item in test_pred:\n    value=np.where(item<0.5,0,1)\n    Test_pred+=[value]\nsub['Survived'] = Test_pred\nsub.to_csv(\"submission.csv\", index=False)\nprint(sub['Survived'].value_counts())\nsub","01548f1e":"# set cut-off value according to the roc result\n\nsub = gender_submission\nTest_pred=[]\nfor item in test_pred:\n    value=np.where(item<0.801089,0,1)\n    Test_pred+=[value]\nsub['Survived'] = Test_pred\nsub.to_csv(\"submission2.csv\", index=False)\nprint(sub['Survived'].value_counts())\nsub","f25dd5e8":"## Data Processing","e97d172a":"## ROC curve","0a36c0c7":"## Model","a9bf40dd":"## Predict Test Data"}}