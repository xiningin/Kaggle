{"cell_type":{"d5e96ef2":"code","7ff785ca":"code","354eeacc":"code","81f7bf72":"code","213ab213":"code","b04bdaa2":"code","9a1b233a":"code","7158bf13":"code","d23de6da":"code","3d1c52e1":"code","f5074f3a":"code","8019c41d":"code","94e1c23f":"code","1fd3b485":"code","502867f6":"code","61926ec2":"markdown","34749256":"markdown","8ec1fed7":"markdown","4c793619":"markdown"},"source":{"d5e96ef2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom pathlib import Path\n\ndata_dir = Path('..\/input\/digit-recognizer')","7ff785ca":"# Load training data.\ntrain = pd.read_csv(data_dir\/'train.csv')\ntrain","354eeacc":"# Load test data.\ntest = pd.read_csv(data_dir\/'test.csv')\ntest","81f7bf72":"# Split training data for learning and validation\nfrom sklearn.model_selection import train_test_split\n\nX_train = train.drop(columns='label').values\ny_train = train['label'].values\n\nX_learn, X_valid, y_learn, y_valid = train_test_split(X_train, y_train, random_state=0)\n\nX_test = test.values","213ab213":"# Reshape from 784px to (28px, 28px, 1channel).\nX_learn_gray = X_learn.reshape((-1, 28, 28, 1))\nX_valid_gray = X_valid.reshape((-1, 28, 28, 1))\nX_test_gray = X_test.reshape((-1, 28, 28, 1))","b04bdaa2":"# ResNet50 handles 3channels, so convert from gray to rgb.\nimport tensorflow as tf\n\nX_learn_rgb = tf.image.grayscale_to_rgb(tf.constant(X_learn_gray))\nX_valid_rgb = tf.image.grayscale_to_rgb(tf.constant(X_valid_gray))\nX_test_rgb = tf.image.grayscale_to_rgb(tf.constant(X_test_gray))","9a1b233a":"# ResNet50 needs at least (32px, 32px), so resize.\nX_learn_large = tf.image.resize(X_learn_rgb, [32, 32], method='nearest')\nX_valid_large = tf.image.resize(X_valid_rgb, [32, 32], method='nearest')\nX_test_large = tf.image.resize(X_test_rgb, [32, 32], method='nearest')","7158bf13":"# Scale the range of values to [0, 1]\nX_learn_scale = X_learn_large \/ 255\nX_valid_scale = X_valid_large \/ 255\nX_test_scale = X_test_large \/ 255","d23de6da":"# Show the first 16 images of X_learn_scale\nfig, ax = plt.subplots(4, 4, figsize=(15, 15))\nfor row in range(4):\n    for col in range(4):\n        ax[row, col].imshow(X_learn_scale[row*4+col])","3d1c52e1":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nn_classes = 10","f5074f3a":"# Create a new model using ResNet50.\n# Remove the top layer by specifying `include_top=False`.\n# Add a Dense layer on the top to classification.\nmodel = Sequential([\n    ResNet50(input_shape=(32, 32, 3), include_top=False, pooling='avg'),\n    Dense(n_classes, activation='softmax'),\n])\n\nmodel.compile(optimizer='sgd', loss='sparse_categorical_crossentropy', metrics=['accuracy'])","8019c41d":"# Early stopping.\nearly_stop = EarlyStopping(monitor='val_loss', patience=5)\n\n# Train.\n%time history = model.fit(X_learn_scale, y_learn, epochs=20, validation_split=0.2, callbacks=[early_stop])","94e1c23f":"# Show history in table.\nhist = pd.DataFrame(history.history)\nhist['epoch'] = history.epoch\nhist","1fd3b485":"# Show history in graph.\nfig, ax = plt.subplots()\nax.set_xlabel('Epoch')\nax.set_ylabel('Loss')\nax.plot(hist['epoch'], hist['loss'], label='Train Error')\nax.plot(hist['epoch'], hist['val_loss'], label = 'Valid Error')\nax.legend();","502867f6":"# The method `predict` returns likelihood,\n# so use the most likelihood argument for label.\nlikelihood = model.predict(X_test_scale)\npredict = np.argmax(likelihood, axis=1)\n\n# Create subumission file.\nresult = pd.DataFrame({'ImageId': test.index + 1, 'Label': predict}, dtype='int') # ImageId is 1, 2, ...\nresult.to_csv('resnet50_submission.csv', index=False)","61926ec2":"# Train the Model","34749256":"# Create a Model using ResNet50","8ec1fed7":"# Load Dataset","4c793619":"# Predict with the Model"}}