{"cell_type":{"2fd8f899":"code","64136f14":"code","5aace6b5":"code","f066ff51":"code","5efaa841":"code","6b7e5324":"code","0b39233d":"code","39a25054":"code","9619cde6":"code","2e736229":"code","09220d64":"code","4850ea19":"code","d1773ceb":"code","70c4634a":"code","24b4aa1f":"code","799d3b9b":"code","5ba98120":"code","99937d47":"code","b965471c":"code","dc7cb3eb":"code","f3974e4f":"markdown","1ffb5f9f":"markdown","a9a8fa59":"markdown","166262fb":"markdown","90c47a85":"markdown","efedaf83":"markdown","b6d2910b":"markdown","afb5327f":"markdown","4c807d3c":"markdown"},"source":{"2fd8f899":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom scipy.sparse import csr_matrix\nfrom sklearn.neighbors import NearestNeighbors","64136f14":"# MovieLens Dataset\nmovies = pd.read_csv('..\/input\/movielens\/ml-latest-small\/movies.csv')\nratings = pd.read_csv('..\/input\/movielens\/ml-latest-small\/ratings.csv')","5aace6b5":"movies.head(10)","f066ff51":"movies.describe()","5efaa841":"ratings.head()","6b7e5324":"ratings.describe()","0b39233d":"movies = movies.dropna()\n\nratings = ratings.sort_values(\"userId\")\nratings.drop_duplicates(subset=[\"userId\",\"movieId\"], keep='first', inplace=True) \nmovies.drop_duplicates(subset='title', keep='first', inplace=True)","39a25054":"merged_df = pd.merge(movies, ratings, how='left', left_on=['movieId'], right_on=['movieId'])\ndf = merged_df[['movieId','title', 'userId', 'rating']]\n\ndf.head(500)","9619cde6":"df.describe()","2e736229":"ratings_df = df.pivot_table(index='movieId',columns='userId',values='rating').fillna(0)\n\nratings_df.head()","09220d64":"ratings_df.shape","4850ea19":"ratings_matrix = csr_matrix(ratings_df.values)","d1773ceb":"model_knn = NearestNeighbors(metric='cosine', algorithm = 'brute')\nmodel_knn.fit(ratings_matrix)","70c4634a":"def get_movie_id(movie_title):\n    target_df = df.loc[df['title'] == movie_title]\n    return target_df['movieId'].iloc[0]\n\nid_ToyStory1995 = get_movie_id('Toy Story (1995)')\nprint(id_ToyStory1995)","24b4aa1f":"def get_title(movie_id):\n    target_df = df.loc[df['movieId'] == movie_id]\n    return target_df['title'].iloc[0]\n\nprint(get_title(1))","799d3b9b":"def get_recomm(movie_title, num_neighbors=10, display=False): \n    \"\"\"\n    This function returns a list of movie ids to be recommended for the given movie title.\n    \n    Parametres:\n    ==========\n    \n    movie_title: str\n    Title of the movie for which recommendation is to be made.\n    \n    num_neighbors: int\n    Number of movies to be recommended.\n    \n    display: bool, default=False\n    If true, displays the distance of k (num_neighbors) nearest movies to be recommended. \n    \"\"\"\n    movie_ids = []\n    \n    query_index = get_movie_id(movie_title) - 1\n    \n    if num_neighbors > 0:\n        distances, indices = model_knn.kneighbors(ratings_df.iloc[query_index,:].values.reshape(1, -1), n_neighbors = num_neighbors + 1)\n    else:\n        distances, indices = model_knn.kneighbors(ratings_df.iloc[query_index,:].values.reshape(1, -1), n_neighbors = 10 + 1)\n    \n    for i in range(0, len(distances.flatten())):\n        if display is True:\n            if i == 0:\n                print('Recommendations for ', movie_title, '\\n')\n            else:    \n                print('{0}\\t Movie ID: {1}\\t  Distance: {2}:\\n'.format(i, ratings_df.index[indices.flatten()[i]], distances.flatten()[i]))\n        \n        movie_ids.append(ratings_df.index[indices.flatten()[i]])\n    \n    return movie_ids","5ba98120":"recommendations_for_ToyStory1995 = get_recomm('Toy Story (1995)', num_neighbors=10, display=True)","99937d47":"for m in recommendations_for_ToyStory1995[1:]:\n    print('id:', m, '\\t\\tMovie: ', get_title(m))","b965471c":"movie_ids_for_Heat1995 = get_recomm('Heat (1995)', num_neighbors=10)\n# skip the first item\nfor m in movie_ids_for_Heat1995[1:]:\n    print(get_title(m))","dc7cb3eb":"movie_ids_for_DraculaDeadAndLovingIt1995 = get_recomm('Dracula: Dead and Loving It (1995)', num_neighbors=10)\n# skip the first item\nfor m in movie_ids_for_DraculaDeadAndLovingIt1995[1:]:\n    print(get_title(m))","f3974e4f":"### Predictions","1ffb5f9f":"### Read Data","a9a8fa59":"#### Top 10 recommendations for 'Dracula: Dead and Loving It (1995)'","166262fb":"### Clean the data","90c47a85":"#### Top 10 recommendations for 'Toy Story (1995)'","efedaf83":"### Import Libraries","b6d2910b":"#### Top 10 recommendations for 'Heat (1995)'","afb5327f":"# Movie Recommendation System using KNN","4c807d3c":"### Utility Functions"}}