{"cell_type":{"bddcd8d9":"code","22e3b4f4":"code","319d2f79":"code","895da900":"code","c24b1f90":"code","32a8ec28":"code","535921fa":"code","fddcc2f9":"code","aaa3aa83":"code","9374a581":"code","28f478f4":"code","4deb6f81":"code","c27d4a4b":"code","ef5b4de5":"code","77397b4f":"code","6eff4163":"code","c9cbe83c":"code","9eeb4d59":"code","b67a2d39":"code","2341b903":"code","a7b75292":"code","717e632f":"code","6a1c130e":"code","e1ff0f0f":"markdown","4d2f4379":"markdown","201d44bb":"markdown","94f3204c":"markdown","ae19f0d3":"markdown","c96afabb":"markdown","154e388f":"markdown","9dab5c13":"markdown","0a929017":"markdown","22674949":"markdown"},"source":{"bddcd8d9":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import animation,cm\nimport random\nimport operator\nfrom functools import reduce","22e3b4f4":"def michalewicz(x):\n    result = reduce(lambda acc, x: acc + np.sin(x) * np.power(np.sin((0 + 1) * np.power(x, 2) \/ np.pi), 2 * 10), x, 0.)\n    return -1.0*result","319d2f79":"def ackley(x):\n    return -20*np.exp(-0.2*np.sqrt((x[0]**2+x[1]**2)\/2)) - np.exp(0.5*(np.cos(2*np.pi*x[0]) + np.cos(2*np.pi*x[1]))) + 20 + np.exp(1)","895da900":"def dejong(x):\n    ans = 0\n    for i in range(min(len(x),256)):\n        ans+=np.power(x[i],4)\n    return ans","c24b1f90":"def yang(x):\n#     Yang N.2 function\n    temp1 = 0\n    temp2 = 0\n    for i in range(min(len(x),16)):\n        temp2+=np.sin(np.power(x[i],2))\n        temp1+=np.absolute(x[i])\n    ans =  temp1*np.exp(temp2*-1)\n    return ans","32a8ec28":"def rosenbrock(x):\n    ans=0.0\n    for i in range(min(len(x),16)):\n        ans+=(100.0*(x[i]-x[i]**2)**2 + (1-x[i])**2)\n    return ans","535921fa":"def griewank(x):\n    ans = 1.0\n    inner_product = 1.0\n    inner_sum = 0.0\n    i=0\n    while i < (len(x)):#change to while\n        inner_sum += (x[i] ** 2)\n        inner_product *= (np.cos(x[i] \/ np.sqrt(i + 1)))\n        i+=1\n    ans += (inner_sum * (1. \/ 4000.) - inner_product)\n    return ans","fddcc2f9":"def shubert(x):\n        temp1 = 0\n        temp2 = 0\n        i=0\n        while i < (5): #Change to while\n            temp1 += ((i+1)*np.cos((i+1)+(i+2)*x[0]))\n            temp2 += ((i+1)*np.cos((i+1)+(i+2)*x[1]))\n            i+=1\n        return temp1*temp2","aaa3aa83":"def rastrigin(x):\n    ans = 0.0\n    i=0\n    while i< (len(x)):#Change to while\n        ans += (x[i] ** 2 - (10. * np.cos(2 * np.pi * x[i])))\n        i+=1\n    ans += 10. * len(x)\n    return ans","9374a581":"def schwefel(x):\n    ans=418.982887*len(x)\n    for i in range(min(len(x),128)):\n        ans-=x[i]*np.sin(np.sqrt(np.abs(x[i])))\n    return ans","28f478f4":"def easom(x):\n    return -1.0*np.cos(x[0])*np.cos(x[1])*np.exp(-(x[0] - np.pi)**2 - (x[1] - np.pi)**2)","4deb6f81":"class Firefly():\n    def __init__(self, alpha, beta, gamma, upper_boundary, lower_boundary, function_dimension):\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n        self.__intensity = None\n        self.lower_boundary = lower_boundary\n        self.upper_boundary = upper_boundary\n        self.__position = np.array([random.uniform(self.lower_boundary, self.upper_boundary) for x in range(function_dimension)])\n    \n    \n    @property\n    def intensity(self):\n        return self.__intensity\n\n        \n    @property\n    def position(self):\n        return self.__position\n    \n    @position.setter\n    def position(self, value):\n        self.__position = value\n\n    def move_towards(self, better_position):\n        # euclidean distance\n        distance = np.linalg.norm(self.__position - better_position)\n        self.__position = self.__position + self.beta*np.exp(-self.gamma*(distance**2)) * (better_position-self.__position) +  self.alpha*(random.uniform(0, 1)-0.5)\n        self.check_boundaries()\n\n    def random_walk(self, area):\n        self.__position = np.array([random.uniform(cord-area, cord+area) for x, cord in np.ndenumerate(self.__position)])\n    def update_intensity(self, func):\n        self.__intensity = -1*func(self.__position)\n    def check_boundaries(self):\n        for i, cord in np.ndenumerate(self.__position):\n            if cord < self.lower_boundary:\n                self.__position[i] = self.lower_boundary\n            elif cord > self.upper_boundary:\n                self.__position[i] = self.upper_boundary\n            else:\n                self.__position[i] = cord\n","c27d4a4b":"class FireflyProblem():\n    \n    def __init__(self, function, firefly_number, upper_boundary=5.12, lower_boundary=-5.12, alpha=2, beta=2, gamma=0.97, iteration_number=50, interval=500, continuous=False):\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n        self.function_dimension = 2\n        self.upper_boundary = upper_boundary\n        self.lower_boundary = lower_boundary\n        self.iteration_number = iteration_number\n        self.fireflies = [Firefly(self.alpha,self.beta,self.gamma,self.upper_boundary,self.lower_boundary, self.function_dimension) for x in range(firefly_number)]\n        self.function = function\n        self.interval = interval\n        self.best = None\n        self.continuous = continuous\n        self.cost=[]\n        i=0\n        while i<(len(self.fireflies)): #Change to while\n            (self.fireflies)[i].update_intensity(self.function)\n            i+=1\n\n    def run(self):\n        y = np.linspace(self.lower_boundary, self.upper_boundary, 100)\n        x = np.linspace(self.lower_boundary, self.upper_boundary, 100)\n        X, Y = np.meshgrid(x, y)\n        z = self.function([X, Y])        \n        fig = plt.figure()\n        ax = fig.add_subplot(1, 1, 1)\n        cs = ax.contourf(X, Y, z, cmap=cm.PuBu_r)  # pylint: disable=no-member\n        fig.colorbar(cs)\n        x_init = []\n        y_init = []\n        i=0\n        while i<(len(self.fireflies)):#change to while\n            x_init.append((self.fireflies)[i].position[0])\n            y_init.append((self.fireflies)[i].position[1])\n            i+=1\n        particles, = ax.plot(x_init, y_init, 'ro', ms=6)\n        rectangle = plt.Rectangle([self.lower_boundary, self.lower_boundary],self.upper_boundary-self.lower_boundary,self.upper_boundary-self.lower_boundary, ec='none', lw=2, fc='none')\n        ax.add_patch(rectangle)\n#         self.plot()\n\n        def init():\n            particles.set_data([], [])\n            rectangle.set_edgecolor('none')\n            return particles, rectangle\n\n        def animate(i): #Generate animation and visualization\n            x = []\n            y = []\n            ms = int(50. * fig.get_figwidth()\/fig.dpi)\n            rectangle.set_edgecolor('k')\n            fig.canvas.set_window_title('Iteration %s\/%s' % (i, self.iteration_number))\n            if i ==0:\n                print(\"reset the fireflies\")\n                self.best = None\n\n            for idx, firefly in enumerate(self.fireflies):\n                if i == 0:\n                    firefly.__position = np.array([x_init[idx], y_init[idx]])\n                    firefly.update_intensity(self.function)\n                    fig.canvas.set_window_title('Initialization')\n                x.append(firefly.position[0])\n                y.append(firefly.position[1])\n            self.step()\n            particles.set_data(x, y)\n            particles.set_markersize(ms)\n            return particles, rectangle        \n        graph = animation.FuncAnimation(fig, animate, frames=self.iteration_number+1, interval=self.interval, blit=True, init_func=init, repeat=self.continuous)\n        plt.show()\n        if (not self.best or self.fireflies[0].intensity > self.best):\n            self.best = self.fireflies[0].intensity\n        if(self.function==michalewicz):\n            graph.save('firefly_michalewicz.gif')\n        elif(self.function==easom):\n            graph.save('firefly_easom.gif')            \n        elif(self.function==shubert):\n            graph.save('firefly_shubert.gif')            \n        elif(self.function==ackley):\n            graph.save('firefly_ackley.gif')\n        elif(self.function==rosenbrock):\n            graph.save('firefly_rosenbrock.gif')\n        elif(self.function==dejong):\n            graph.save('firefly_dejong.gif')\n        elif(self.function==griewank):\n            graph.save('firefly_griewank.gif')\n        elif(self.function==yang):\n            graph.save('firefly_yang.gif')            \n        elif(self.function==rastrigin):\n            graph.save('firefly_rastrigin.gif')\n    def step(self):\n        (self.fireflies).sort(key=operator.attrgetter('intensity'), reverse=True)\n        for i in self.fireflies:\n            for j in self.fireflies:\n                if j.intensity > i.intensity:\n                    i.move_towards(j.position)\n                    i.update_intensity(self.function)\n     \n        if (not self.best or (self.fireflies[0].intensity > self.best) ):\n            self.best = self.fireflies[0].intensity\n        if(self.function==michalewicz):\n            gmin = -1.8013\n            self.cost.append(abs(self.best - abs(gmin))\/abs(gmin))\n            print(\"Overall best intensity: {}, Overall best Accuracy: {}\".format(self.best,100*abs(1-abs(self.best - gmin)\/abs(gmin))))             \n        elif(self.function==easom):\n            gmin = -1\n            self.cost.append(abs(self.best - abs(gmin))\/abs(gmin))\n            print(\"Overall best intensity: {}, Overall best Accuracy: {}\".format(self.best,100*abs(1-abs(self.best - gmin)\/abs(gmin))))             \n            \n        elif(self.function==shubert):\n            gmin = -186.7309\n            self.cost.append(abs(self.best - abs(gmin))\/abs(gmin))\n            print(\"Overall best intensity: {}, Overall best Accuracy: {}\".format(self.best,100*abs(1-abs(self.best - gmin)\/abs(gmin))))             \n            \n        elif(self.function==ackley):\n            gmin = 0\n            self.cost.append(abs(self.best - gmin))\n            print(\"Overall best intensity: {}, Overall best Accuracy: {}\".format(self.best,100*abs(1-abs(self.best - gmin))))\n        elif(self.function==rosenbrock):\n            gmin = 0\n            self.cost.append(abs(self.best - gmin))\n            print(\"Overall best intensity: {}, Overall best Accuracy: {}\".format(self.best,100*abs(1-abs(self.best - gmin))))\n\n        elif(self.function==dejong):\n            gmin = 0\n            self.cost.append(abs(self.best - gmin))\n            print(\"Overall best intensity: {}, Overall best Accuracy: {}\".format(self.best,100*abs(1-abs(self.best - gmin))))\n        elif(self.function==griewank):\n            gmin = 0\n            self.cost.append(abs(self.best - gmin))\n            print(\"Overall best intensity: {}, Overall best Accuracy: {}\".format(self.best,100*abs(1-abs(self.best - gmin))))\n        elif(self.function==yang):\n            gmin = 0\n            self.cost.append(abs(self.best - gmin))\n            print(\"Overall best intensity: {}, Overall best Accuracy: {}\".format(self.best,100*abs(1-abs(self.best - gmin))))\n        elif(self.function==rastrigin):\n            gmin = 0\n            self.cost.append(abs(self.best - gmin))\n            print(\"Overall best intensity: {}, Overall best Accuracy: {}\".format(self.best,100*abs(1-abs(self.best - gmin))))\n        (self.fireflies)[0].random_walk(0.1)\n        (self.fireflies)[0].update_intensity(self.function)\n    \n    def plot(self):\n        X_Axis=range(1,self.iteration_number+2)\n        plt.plot(X_Axis,self.cost)\n        plt.xlabel('No. of iterations')\n        plt.ylabel('Cost')\n        plt.show()\n        ","ef5b4de5":"def run_firefly_algorithm(optimizer,fireflies_number = 40,upper_boundary=5.12, lower_boundary=-5.12, alpha=2, beta=2, gamma=0.97, iteration_number=10, interval=500):\n    out = FireflyProblem(optimizer, fireflies_number,upper_boundary, lower_boundary, alpha, beta, gamma, iteration_number, interval)\n    out.run()\n    out.plot()","77397b4f":"run_firefly_algorithm(shubert,40,50,-50,2, 2,0.97, 50,100)","6eff4163":"run_firefly_algorithm(ackley,40,20,-20,1,5,0.5,200,50)","c9cbe83c":"run_firefly_algorithm(rosenbrock,40,10,-5,1,5,0.5,200,50)\n","9eeb4d59":"run_firefly_algorithm(dejong,40,5,-5,1,5,0.5,200,50)","b67a2d39":"run_firefly_algorithm(griewank,40,3,-3,1,5,0.5,200,50)","2341b903":"run_firefly_algorithm(yang,40,6,-6,1,5,0.5,200,100)","a7b75292":"run_firefly_algorithm(rastrigin,40,5.12,-5.12,1,5,0.5,150,100)","717e632f":"run_firefly_algorithm(easom,40,13,-7,1,5,0.5,100,100)","6a1c130e":"run_firefly_algorithm(michalewicz,40,4,0,1,5,0.5,150,100)","e1ff0f0f":"**Griewank**","4d2f4379":"**Rosenbrock**","201d44bb":"**Ackley**","94f3204c":"**Yang**","ae19f0d3":"**Michaelwicz**","c96afabb":"**Schwefel**","154e388f":"**Rastrigin**","9dab5c13":"**Easom**","0a929017":"**Shubert**","22674949":"**De Jong**"}}