{"cell_type":{"7601d963":"code","a5c5ad02":"code","a249a03c":"code","22d4f08b":"code","0abf11e2":"code","a8d2b2ae":"code","b007737a":"code","ec0a4f58":"code","ea266058":"code","0ad0aae8":"code","c5afd251":"code","85a9e735":"code","ce457781":"code","bb891d30":"code","2829ca86":"code","931e3d62":"code","b6a5e1b9":"code","0430a2a8":"code","80fa4826":"code","76464855":"code","a264d34b":"code","a7c982a1":"code","ca6f7f04":"code","d167d507":"code","09d5e9cc":"code","4c1496f0":"code","f856d15c":"code","7ff78829":"code","fe913fd3":"code","65626ee8":"code","3977f7bf":"code","a2481442":"code","495d7257":"code","cbd29f23":"code","af9ffc52":"code","18de7384":"code","595b1d99":"code","4404fed4":"code","d74b7944":"code","73112573":"code","c337b805":"code","b0c56499":"code","9341e888":"code","7374727d":"code","38434f61":"code","efeec29a":"code","2f2e216b":"code","a373d213":"code","4bc37e39":"code","494b61ec":"code","fbf54490":"code","ea409727":"code","426afd95":"code","2bb6c20b":"code","5e9b2051":"code","ae60c9d4":"code","3efb7347":"code","b3d41c4a":"code","c17fcdd5":"code","29d5a90b":"code","7b9c88f4":"code","5a04b3d9":"code","d8d5c06f":"code","5f19a7a8":"code","25517444":"code","fa8392a4":"code","0b713016":"code","93c1f27c":"markdown","bfb0b846":"markdown","a7951f18":"markdown","4bd92657":"markdown","8bf07897":"markdown","91fddbd7":"markdown","c308c4fd":"markdown","c31859d1":"markdown","b65d370d":"markdown","46c71689":"markdown","c6de1374":"markdown","fc1f8570":"markdown","77ad16cb":"markdown","a3f8187c":"markdown","2bfd65c9":"markdown","96f0e4aa":"markdown","b08acc27":"markdown","42c67778":"markdown","2685ac06":"markdown","6d3a1bda":"markdown","af2dd157":"markdown","9317a38e":"markdown","17c6d97f":"markdown","92f79e9f":"markdown","78f9ecc5":"markdown"},"source":{"7601d963":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn.preprocessing as skpre \nimport numpy as np\n\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom scipy.special import expit\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import tree\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import RandomizedSearchCV\n","a5c5ad02":"df_titanic = pd.read_csv(\"..\/input\/titanic\/train.csv\")","a249a03c":"df_titanic.isnull().sum()","22d4f08b":"df_titanic.mean()","0abf11e2":"df_titanic.describe()","a8d2b2ae":"df_titanic.mode()","b007737a":"df_titanic = df_titanic.drop(columns = ['Cabin'])","ec0a4f58":"df_titanic","ea266058":"df_titanic.isnull().sum()","0ad0aae8":"df_titanic = df_titanic.dropna(axis = 0, how = 'any').copy()","c5afd251":"df_titanic","85a9e735":"df_titanic.isnull().sum()","ce457781":"df_titanic['is_male'] = df_titanic['Sex'] == 'male'\ndf_titanic['is_female'] = df_titanic['Sex'] == 'female'\ndf_titanic","bb891d30":"df_titanic['Sex-Class'] = df_titanic['Sex'] + df_titanic['Pclass'].astype(str) \ndf_titanic","2829ca86":"df_titanic.mean()","931e3d62":"people_in_firstclass = (df_titanic['Pclass'] == 1).sum()\npeople_in_firstclass","b6a5e1b9":"people_in_secondclass = (df_titanic['Pclass'] == 2).sum()\npeople_in_secondclass","0430a2a8":"people_in_thirdclass = (df_titanic['Pclass'] == 3).sum()\npeople_in_thirdclass","80fa4826":"females_survived = ((df_titanic['is_female']) & (df_titanic['Survived'])).sum()\nfemales_total = (df_titanic['is_female']).sum()\nfemales_survive_percent = (females_survived \/ females_total) * 100\nfemales_survive_percent","76464855":"males_survived = ((df_titanic['is_male']) & (df_titanic['Survived'])).sum()\nmales_total = (df_titanic['is_male']).sum()\nmales_survive_percent = (males_survived \/ males_total) * 100\nmales_survive_percent","a264d34b":"female1_survive = ((df_titanic['Sex-Class'] == 'female1') & (df_titanic['Survived'])).sum()\nfemale1_total = (df_titanic['Sex-Class'] == 'female1').sum()\nfemale1_survive_percent = (female1_survive \/ female1_total) * 100\nfemale1_survive_percent # 96% of the females in first class survived","a7c982a1":"female2_survive = ((df_titanic['Sex-Class'] == 'female2') & (df_titanic['Survived'])).sum()\nfemale2_total = (df_titanic['Sex-Class'] == 'female2').sum()\nfemale2_survive_percent = (female2_survive \/ female2_total) * 100\nfemale2_survive_percent","ca6f7f04":"female3_survive = ((df_titanic['Sex-Class'] == 'female3') & (df_titanic['Survived'])).sum()\nfemale3_total = (df_titanic['Sex-Class'] == 'female3').sum()\nfemale3_survive_percent = (female3_survive \/ female3_total) * 100\nfemale3_survive_percent","d167d507":"male1_survive = ((df_titanic['Sex-Class'] == 'male1') & (df_titanic['Survived'])).sum()\nmale1_total = (df_titanic['Sex-Class'] == 'male1').sum()\nmale1_survive_percent = (male1_survive \/ male1_total) * 100\nmale1_survive_percent","09d5e9cc":"male2_survive = ((df_titanic['Sex-Class'] == 'male2') & (df_titanic['Survived'])).sum()\nmale2_total = (df_titanic['Sex-Class'] == 'male2').sum()\nmale2_survive_percent = (male2_survive \/ male2_total) * 100\nmale2_survive_percent","4c1496f0":"male3_survive = ((df_titanic['Sex-Class'] == 'male3') & (df_titanic['Survived'])).sum()\nmale3_total = (df_titanic['Sex-Class'] == 'male3').sum()\nmale3_survive_percent = (male3_survive \/ male3_total) * 100\nmale3_survive_percent","f856d15c":"sns.catplot(data = df_titanic, x = 'Pclass', y = 'Age', hue = 'Survived')\nfig = plt.gcf()\nfig.suptitle('Titanic Dataset Plot (Class, Age, Survived)', y = 1.02)\nfig.show()","7ff78829":"sns.catplot(data = df_titanic, x = 'Sex', y = 'Age', hue = 'Survived')\nfig = plt.gcf()\nfig.suptitle('Titanic Dataset Plot (Sex, Age, Survived)', y = 1.02)\nfig.show()","fe913fd3":"sns.catplot(data = df_titanic, x = 'Sex-Class', y = 'Age', hue = 'Survived')\nfig = plt.gcf()\nfig.suptitle('Titanic Dataset Plot (Sex-Class, Age, Survived)', y = 1.02)\nfig.show()","65626ee8":"df_titanic2 = df_titanic.copy()\ndf_titanic2 = df_titanic.drop(columns  = ['Name', 'Ticket', 'Sex-Class', 'is_male', 'is_female'])\ndf_titanic2","3977f7bf":"df_titanic2['Sex'] = df_titanic2['Sex'].map({'male':1,'female':0})","a2481442":"df_titanic2['Embarked'] = df_titanic2['Embarked'].map({'S':0,'C':1, 'Q':2})","495d7257":"df_titanic2","cbd29f23":"true_survival = df_titanic2['Survived']\ndf_titanic2 = df_titanic2.drop(columns = ['Survived'])","af9ffc52":"df_titanic2","18de7384":"X_train, X_test, y_train, y_test = train_test_split(df_titanic2, true_survival, test_size = 0.20)","595b1d99":"rf_classifier = RandomForestClassifier(n_estimators = 50, max_depth=1, random_state=5)\nrf_precision_scores = cross_val_score(rf_classifier, df_titanic2, true_survival, scoring = 'precision', cv=5)\nrf_precision_scores.mean()","4404fed4":"rf_recall_scores = cross_val_score(rf_classifier, df_titanic2, true_survival, scoring = 'recall', cv=5)\nrf_recall_scores.mean()","d74b7944":"rf_classifier2 = RandomForestClassifier()\nparam_space = { 'n_estimators' : [3,10,30,50,100], \n               'max_depth' : [5,10,50,100], \n               'min_samples_split' : [2,10,50], \n               'min_samples_leaf' : [1, 10, 100], \n               'max_features' : [2,4,6,8] }\n\nrf_classifier2_cv = RandomizedSearchCV(rf_classifier2, param_space, n_iter=10, scoring = 'neg_root_mean_squared_error', cv = 5 )\nsearch = rf_classifier2_cv.fit(X_train, y_train)","73112573":"search.best_params_","c337b805":"rf_classifier2 = RandomForestClassifier(max_depth=100, max_features=2, min_samples_leaf=1, min_samples_split=10, n_estimators=30)\nrf_classifier2.fit(X_train, y_train)","b0c56499":"rf2_predictions = rf_classifier2.predict(X_test)","9341e888":"mean_squared_error(y_test, rf2_predictions)","7374727d":"rf2_precision_scores = cross_val_score(rf_classifier2, df_titanic2, true_survival, scoring = 'precision', cv=5)\nrf2_precision_scores.mean()","38434f61":"rf2_recall_scores = cross_val_score(rf_classifier2, df_titanic2, true_survival, scoring = 'recall', cv=5)\nrf2_recall_scores.mean()","efeec29a":"accuracy_score(y_test, rf2_predictions)","2f2e216b":"f1score_rf2  = 2 * (( rf2_precision_scores.mean() * rf2_recall_scores.mean()) \/ (rf2_precision_scores.mean() + rf2_recall_scores.mean()))\n# 2*((precision*recall)\/(precision+recall))\nf1score_rf2","a373d213":"logistic_regression_model = linear_model.LogisticRegression(max_iter=800)","4bc37e39":"logistic_regression_model.fit(X = X_train, y = y_train)","494b61ec":"predictions = logistic_regression_model.predict(X = X_test)","fbf54490":"mean_absolute_error(y_test, predictions)","ea409727":"logistic_regression_model.coef_","426afd95":"lr_precision_scores = cross_val_score(logistic_regression_model, df_titanic2, true_survival, scoring = 'precision', cv=5)\nlr_precision_scores.mean()","2bb6c20b":"lr_recall_scores = cross_val_score(logistic_regression_model, df_titanic2, true_survival, scoring = 'recall', cv=5)\nlr_recall_scores.mean()","5e9b2051":"accuracy_score(y_test, predictions)","ae60c9d4":"f1score_lr  = 2 * (( lr_precision_scores.mean() * lr_recall_scores.mean()) \/ (lr_precision_scores.mean() + lr_recall_scores.mean()))\nf1score_lr","3efb7347":"cf_matrix = confusion_matrix(y_test, predictions)","b3d41c4a":"sns.heatmap(cf_matrix\/np.sum(cf_matrix), annot=True, fmt='.2%', cmap='Greens')","c17fcdd5":"tree_model = tree.DecisionTreeClassifier()","29d5a90b":"tree_model.fit(X_train, y_train)\npredictions_tree = tree_model.predict(X_test)\npredictions_tree","7b9c88f4":"mean_absolute_error(y_test, predictions_tree)","5a04b3d9":"tm_precision_scores = cross_val_score(tree_model, df_titanic2, true_survival, scoring = 'precision', cv=5)\ntm_precision_scores.mean()","d8d5c06f":"tm_recall_scores = cross_val_score(tree_model, df_titanic2, true_survival, scoring = 'recall', cv=5)\ntm_recall_scores.mean()","5f19a7a8":"accuracy_score(y_test, predictions_tree)","25517444":"f1score_tm  = 2 * (( tm_precision_scores.mean() * tm_recall_scores.mean()) \/ (tm_precision_scores.mean() + tm_recall_scores.mean()))\nf1score_tm","fa8392a4":"cf_matrix2 = confusion_matrix(y_test, predictions_tree)","0b713016":"sns.heatmap(cf_matrix2\/np.sum(cf_matrix2), annot=True, fmt='.2%', cmap='Reds')","93c1f27c":"Finally, there are no null values","bfb0b846":"Finding out the percent of how many people in each Sex-Class survived\n","a7951f18":"## Visualization","4bd92657":"## Finding X_train, X_test, y_train, y_test","8bf07897":"Removing Survived feature","91fddbd7":"Creating a new feature (Sex-Class) for visualization. Example: a male who is travelling in first class = male1","c308c4fd":"## Imports\n","c31859d1":"## Reading csv\n","b65d370d":"## Removing Null Values\n","46c71689":"Finding out how many people where in each Pclass","c6de1374":"## Decision Tree Classifier\n","fc1f8570":"## Fixing Data for ML Models","77ad16cb":"Finding stats of dataset before manipulation ","a3f8187c":"## Finding Statistical Values","2bfd65c9":"## Random Forest Classifier\n","96f0e4aa":"Dropping columns which will are not going to be used in visualization or model. **df_titanic2** will be used for building models.\n","b08acc27":"Finding which features have null values\n","42c67778":"## Adding features","2685ac06":"Dropping rows that have null values. Not dropping another feature to avoid underfitting","6d3a1bda":"## Logistic Regression","af2dd157":"## Random Forest Classifier with Hyperparameter Optimization\n","9317a38e":"Finding out the percent of males and females who survived","17c6d97f":"We can see the second and third coefficients are the largest. Therefore, they make the biggest impact. The second coefficient represents **Pclass** (the class the person was travelling in, e.g. first, second, or third). The third coefficient represents **Sex**, which is the person's gender.","92f79e9f":"Dropping the cabin feature as it has a lot of null values","78f9ecc5":"Checking null values after cabin feature is dropped"}}