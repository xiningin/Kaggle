{"cell_type":{"99e2d91a":"code","ba7034b3":"code","e2a3c035":"code","b8eb0d16":"code","62836012":"markdown","20549e13":"markdown"},"source":{"99e2d91a":"import sys\n!cp ..\/input\/rapids\/rapids.0.13.0 \/opt\/conda\/envs\/rapids.tar.gz\n!cd \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz > \/dev\/null\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.6\/site-packages\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.6\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\"] + sys.path \n!cp \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/","ba7034b3":"import cudf\nimport cugraph\nfrom cuml.neighbors import NearestNeighbors as cuNearestNeighbors\nimport numpy as np\nimport igraph\nimport time","e2a3c035":"for j in [1e4, 1e5]:\n    n_sample = int(j)\n    dim = 5\n\n    n_neighbors = 2\n    res = []\n    t0 = time.time()\n    for i in range(100):\n        np.random.seed(n_sample + i)\n        X = np.random.rand(n_sample, dim)\n        device_data = cudf.DataFrame.from_gpu_matrix(X)\n        \n        knn_cuml = cuNearestNeighbors(n_neighbors)\n        knn_cuml.fit(device_data)\n        D_cuml, I_cuml = knn_cuml.kneighbors(device_data, n_neighbors)\n        \n        g = igraph.Graph(directed = True)\n        g.add_vertices(range(n_sample))\n        g.add_edges(I_cuml.to_pandas().values)\n        g2 = g.as_undirected(mode = 'collapse')\n        r = g2.clusters()\n        \n        res.append(len(r) \/ n_sample * 100)\n    print(f'n: {int(j)}, mean coef: {np.round(np.mean(res), 3)}, time: {np.round(time.time() - t0, 3)} s')","b8eb0d16":"for j in [1e4, 1e5]:\n    n_sample = int(j)\n    dim = 5\n\n    n_query = n_sample\n    n_neighbors = 2\n    random_state = 0\n    res = []\n    t0 = time.time()\n    for i in range(100):\n        np.random.seed(n_sample + i)\n        X = np.random.rand(n_sample, dim)\n        device_data = cudf.DataFrame.from_gpu_matrix(X)\n        \n        knn_cuml = cuNearestNeighbors(n_neighbors)\n        knn_cuml.fit(device_data)\n        D_cuml, I_cuml = knn_cuml.kneighbors(device_data, n_neighbors)\n        \n        G = cugraph.Graph()\n        I_cuml = cugraph.structure.symmetrize_df(I_cuml, 0, 1)\n        G.from_cudf_edgelist(I_cuml, 0, 1)\n        \n        res.append(len(cugraph.weakly_connected_components(G).labels.unique()) \/ n_sample * 100)\n    print(f'n: {int(j)}, mean coef: {np.round(np.mean(res), 3)}, time: {np.round(time.time() - t0, 3)} s')","62836012":"## cuml KNN + cugraph","20549e13":"## cuml KNN + igraph"}}