{"cell_type":{"f20d0158":"code","7f26799b":"code","40d3372d":"code","85b97e5f":"code","890536bb":"code","6db8631a":"code","d06360f2":"code","27d8b6a9":"code","d17b12d1":"code","7ee23bac":"code","b6abf9fe":"code","bdf609ee":"code","bd34adf5":"code","4383f9ab":"code","e71d6cbc":"code","59ea4efc":"code","e8f0a015":"code","03770c44":"code","cecc5c33":"code","c7f29667":"code","3d9b8403":"code","1470596d":"code","9bdd5434":"code","e3db081f":"code","5e019c27":"code","9cd4a531":"code","57ec2a86":"code","c76373ce":"code","96b9c42b":"code","a7a4ac44":"code","6303c2d4":"code","1f526745":"code","2a5148fb":"code","5a77a38f":"markdown","a25091b3":"markdown"},"source":{"f20d0158":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7f26799b":"import pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom collections import defaultdict\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","40d3372d":"data=pd.read_csv('..\/input\/cab-fare-prediction\/TRAIN.csv')\ndata.head()","85b97e5f":"sns.heatmap(data.corr(), annot = True)","890536bb":"data.drop([\"time_stamp\", \"index\"], axis = 1, inplace = True)","6db8631a":"data.head()","d06360f2":"data[\"cab_provider\"].value_counts()","27d8b6a9":"data[\"destination\"].value_counts()","d17b12d1":"pallete = px.colors.qualitative.Dark24","7ee23bac":"px.pie(names = data[\"cab_provider\"].value_counts().index.tolist(), \n       values = data[\"cab_provider\"].value_counts().values.tolist(),\n       color = data[\"cab_provider\"].value_counts().index.tolist(),\n       title = \"popularity of cab providers\",\n      color_discrete_sequence = pallete)","b6abf9fe":"uber_frame = data[data[\"cab_provider\"] == \"Uber\"]\nuber_frame.head()","bdf609ee":"px.pie(names = uber_frame.cab_type.value_counts().index.tolist(),\n       values = uber_frame.cab_type.value_counts().values.tolist(),\n       color = uber_frame.cab_type.value_counts().index.tolist(),\n       title = \"popular uber cab types (wtf bro!)\",\n       color_discrete_sequence = pallete)","bd34adf5":"def popular_route(df):\n  current_route = [df[\"source\"][1],df[\"destination\"][1]]\n  route_dict = defaultdict(int)\n  dist_dict = defaultdict(int)\n  for source, destination, dist in zip(df['source'],df[\"destination\"],df[\"distance\"]):\n    if source and destination in current_route:\n      route_dict[\"-\".join(current_route)] = route_dict[\"-\".join(current_route)] + 1\n    else:\n      current_route = [source, destination]\n      route_dict[\"-\".join(current_route)] = route_dict[\"-\".join(current_route)] + 1\n      dist_dict[\"-\".join(current_route)] = dist\n  return pd.DataFrame(sorted(route_dict.items(), key = lambda x : x[1], reverse = True)),pd.DataFrame(sorted(dist_dict.items(), key = lambda x : x[1], reverse = True))","4383f9ab":"pop_route, route_dist = popular_route(uber_frame)\nuber_routes_dist = pd.merge(pop_route,route_dist, on = [0])\nuber_routes_dist.columns = [\"route\", \"pop\",\"dist\"]","e71d6cbc":"fig = px.bar(uber_routes_dist.iloc[:10,:], x = \"route\", y = \"pop\",\n       color = \"route\",\n       title = \"TOP 10 popular routes by UBER\", hover_data = [\"dist\"])\nfig.update_layout(showlegend = False,\n                  xaxis_title=\"routes\",\n                  yaxis_title=\"times route is travelled\")","59ea4efc":"uber_frame.surge_multiplier.value_counts()","e8f0a015":"lyft_frame = data[data[\"cab_provider\"] == \"Lyft\"].reset_index()\nlyft_frame.head()","03770c44":"lyft_frame.drop([\"index\"], axis = 1, inplace = True)","cecc5c33":"px.pie(names = lyft_frame.cab_type.value_counts().index.tolist(),\n       values = lyft_frame.cab_type.value_counts().values.tolist(),\n       color = lyft_frame.cab_type.value_counts().index.tolist(),\n       title = \"popular lyft cab types (wtf bro! x2)\",\n       color_discrete_sequence = pallete)","c7f29667":"pop_route, route_dist = popular_route(lyft_frame)\nlyft_routes_dist = pd.merge(pop_route,route_dist, on = [0])\nlyft_routes_dist.columns = [\"route\", \"pop\",\"dist\"]\nfig = px.bar(lyft_routes_dist.iloc[:10,:], x = \"route\", y = \"pop\",\n       color = \"route\",\n       title = \"TOP 10 popular routes by LYFT\", hover_data = [\"dist\"])\nfig.update_layout(showlegend = False,\n                  xaxis_title=\"routes\",\n                  yaxis_title=\"times route is travelled\")","3d9b8403":"px.pie(names = lyft_frame.surge_multiplier.value_counts().index.tolist(),\n       values = lyft_frame.surge_multiplier.value_counts().values.tolist(),\n       color = lyft_frame.surge_multiplier.value_counts().index.tolist(),\n       color_discrete_sequence = pallete,title = \"surge multiplier rates\")","1470596d":"data.drop([\"source\",\"destination\"], axis = 1, inplace = True)","9bdd5434":"data.isnull().sum()","e3db081f":"data.dropna(inplace = True)","5e019c27":"data[\"cab_provider\"].replace(to_replace = data[\"cab_provider\"].unique().tolist(), value = [*range(len(data[\"cab_provider\"].unique().tolist()))],inplace = True)","9cd4a531":"data[\"cab_type\"].replace(to_replace = data[\"cab_type\"].unique().tolist(), value = [*range(len(data[\"cab_type\"].unique().tolist()))],inplace = True)","57ec2a86":"data.head()","c76373ce":"from sklearn.preprocessing import StandardScaler\nscaler_x = StandardScaler()\nscaler_y = StandardScaler() \nx = data.iloc[:,:-1].values\ny = data.iloc[:,-1].values\nx = scaler_x.fit_transform(x)\ny = scaler_y.fit_transform(y.reshape(-1,1))\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x, y, test_size = 0.2, random_state = 177013)","96b9c42b":"from sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error\nXBR = GradientBoostingRegressor(n_estimators = 700)\nXBR.fit(x_train,y_train.ravel())\ny_pred_XBR = XBR.predict(x_test)\nprint(mean_squared_error(y_test,y_pred_XBR))","a7a4ac44":"test_data = pd.read_csv(\"..\/input\/cab-fare-prediction\/TEST.csv\")\ntest_data.head()","6303c2d4":"test_data.drop([\"time_stamp\",\"source\", \"destination\",\"index\"], axis = 1, inplace = True)\ntest_data[\"cab_provider\"].replace(to_replace = test_data[\"cab_provider\"].unique().tolist(), value = [*range(len(test_data[\"cab_provider\"].unique().tolist()))],inplace = True)\ntest_data[\"cab_type\"].replace(to_replace = test_data[\"cab_type\"].unique().tolist(), value = [*range(len(test_data[\"cab_type\"].unique().tolist()))],inplace = True)\ntest_data.head()","1f526745":"test_data_scale = scaler_x.transform(test_data)\ntest_data_scale","2a5148fb":"y_pred_test = XBR.predict(test_data_scale)\nsol = scaler_y.inverse_transform(y_pred_test)\ndict_1 = {\"index\": [*range(len(sol))],\"fare\": sol.tolist()}\nans = pd.DataFrame(dict_1)\nans['index'] = ans['index'].astype('str')\nans.to_csv(\"prediction.csv\",index=False)","5a77a38f":"**Traing Data**","a25091b3":"**Test Data**"}}