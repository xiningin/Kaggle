{"cell_type":{"b2e072f6":"code","0eb44148":"code","8c8056f8":"code","9726823a":"code","949a6103":"code","e380db03":"code","ca2c891c":"code","028ff03d":"code","9d027422":"code","b560a11a":"code","d1c74a97":"code","3a96ac5a":"code","a11ee48f":"code","721856a2":"code","3e472970":"code","aa844db2":"code","dd2d2ce3":"code","9f8c3aed":"code","c81cdc65":"code","9342ad86":"code","49e98fcd":"code","245ba579":"code","ab120e19":"code","043294fb":"markdown","410f1670":"markdown","968049c7":"markdown","41bd73cb":"markdown","11070655":"markdown","a6eca820":"markdown","65823940":"markdown","b9050bb9":"markdown","786f20fd":"markdown","8b31537b":"markdown","543b9e01":"markdown","3dfc9ad0":"markdown","3f868d09":"markdown","c741037d":"markdown","700b0edc":"markdown","3e4dc592":"markdown","ce6729ae":"markdown","b73a1f64":"markdown","bf00af27":"markdown","57d2e14f":"markdown","f75829fa":"markdown"},"source":{"b2e072f6":"!pip install squarify\n!pip install pywaffle","0eb44148":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib as mpl\nimport squarify \nfrom matplotlib.offsetbox import TextArea, DrawingArea, OffsetImage, AnnotationBbox\nimport matplotlib.image as mpimg\nfrom pywaffle import Waffle\n\nfrom matplotlib.cm import ScalarMappable\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nfrom textwrap import wrap\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Set Style\nsns.set_style(\"white\")\nmpl.rcParams['xtick.labelsize'] = 16\nmpl.rcParams['ytick.labelsize'] = 16\nmpl.rcParams['axes.spines.left'] = False\nmpl.rcParams['axes.spines.right'] = False\nmpl.rcParams['axes.spines.top'] = False","8c8056f8":"colors_blue = [\"#132C33\", \"#264D58\", '#17869E', '#51C4D3', '#B4DBE9']\ncolors_dark = [\"#1F1F1F\", \"#313131\", '#636363', '#AEAEAE', '#DADADA']\ncolors_red = [\"#331313\", \"#582626\", '#9E1717', '#D35151', '#E9B4B4']\ncolors_mix = [\"#17869E\", '#264D58', '#179E66', '#D35151', '#E9DAB4', '#E9B4B4', '#D3B651', '#6351D3']\ncolors_div = [\"#132C33\", '#17869E', '#DADADA', '#D35151', '#331313']\n\nsns.palplot(colors_blue)\nsns.palplot(colors_dark)\nsns.palplot(colors_red)\nsns.palplot(colors_mix)\nsns.palplot(colors_div)","9726823a":"df = pd.read_csv(\"\/kaggle\/input\/netflix-original-films-imdb-scores\/NetflixOriginals.csv\")","949a6103":"df.head()","e380db03":"df.isnull().sum()","ca2c891c":"df.info()","028ff03d":"df.describe()","9d027422":"print(\"Number of categories:{}\".format(df[\"Genre\"].nunique()))\nprint(df[\"Genre\"].unique())\nprint(\"*\"*75)\nprint(\"Number of Languages:{}\".format(df[\"Language\"].nunique()))\nprint(df[\"Language\"].unique())","b560a11a":"imr = df.groupby(\"Genre\",as_index=False).mean().sort_values(by=\"Runtime\",ascending=False).reset_index(drop=True)","d1c74a97":"# Values for the x axis\nANGLES = np.linspace(0.05, 2 * np.pi - 0.05, 10 , endpoint=False)\n\n# Cumulative length\nLENGTHS = imr.iloc[0:10,1].values\n\n# Genre label\nGENRE = imr[\"Genre\"].iloc[0:10].values","3a96ac5a":"# Colors\nCOLORS = [\"#6C5B7B\",\"#C06C84\",\"#F67280\",\"#F8B195\"]\n\n# Colormap\ncmap = mpl.colors.LinearSegmentedColormap.from_list(\"my color\", COLORS, N=256)\n\n# Normalizer\nnorm = mpl.colors.Normalize(vmin=LENGTHS.min(), vmax=LENGTHS.max())\n\n# Normalized colors. Each number of tracks is mapped to a color in the \n# color scale 'cmap'\nCOLORS = cmap(norm(LENGTHS))","a11ee48f":"# Some layout stuff ----------------------------------------------\n# Initialize layout in polar coordinates\nfig, ax = plt.subplots(figsize=(9, 12.6), subplot_kw={\"projection\": \"polar\"})\n\n# Set background color to white, both axis and figure.\nfig.patch.set_facecolor(\"white\")\nax.set_facecolor(\"white\")\n\nax.set_theta_offset(1.2 * np.pi \/ 2)\nax.set_ylim(-50, 175)\n\n# Add geometries to the plot -------------------------------------\n# See the zorder to manipulate which geometries are on top\n\n# Add bars to represent the cumulative track lengths\nbars = ax.bar(ANGLES, LENGTHS, color=COLORS, alpha=0.9, width=0.52)\n# ax.bar_label(bars,label_type=\"edge\",fontsize=16)\n\n# Add dashed vertical lines. These are just references\nax.vlines(ANGLES, 0, 170, color=\"black\", ls=(0, (4, 4)))\n\n# Remove lines for polar axis (x)\nax.xaxis.grid(False)\n# ax.yaxis.grid(False)\n\n\n# Add labels for the regions -------------------------------------\n# Note the 'wrap()' function.\n# The '5' means we want at most 5 consecutive letters in a word, \n# but the 'break_long_words' means we don't want to break words \n# longer than 5 characters.\nGENRE = [\"\\n\".join(wrap(r, 5, break_long_words=False)) for r in GENRE]\nGENRE\n\n# Set the labels\nax.set_xticks(ANGLES)\nax.set_xticklabels(GENRE, size=12)\n# Remove unnecesary guides ---------------------------------------\n\n# Remove lines for polar axis (x)\nax.xaxis.grid(False)\n\n# Put grid lines for radial axis (y) at 0, 1000, 2000, and 3000\nax.set_yticklabels([])\nax.set_yticks([0,25, 75, 125, 175])\n\n# Remove spines\nax.spines[\"start\"].set_color(\"none\")\nax.spines[\"polar\"].set_color(\"none\")\n\n\n# Adjust padding of the x axis labels ----------------------------\n# This is going to add extra space around the labels for the \n# ticks of the x axis.\nXTICKS = ax.xaxis.get_major_ticks()\nfor tick in XTICKS:\n    tick.set_pad(10)\n\n\n# Add custom annotations -----------------------------------------\n# The following represent the heights in the values of the y axis\nPAD = 10\nax.text(-0.2 * np.pi \/ 2, 25 + PAD, \"25\", ha=\"center\", size=12)\nax.text(-0.2 * np.pi \/ 2, 75 + PAD, \"75\", ha=\"center\", size=12)\nax.text(-0.2 * np.pi \/ 2, 125 + PAD, \"125\", ha=\"center\", size=12)\nax.text(-0.2 * np.pi \/ 2, 175 + PAD, \"175\", ha=\"center\", size=12)\ntitle = \"Top 10 Longest Content Genre by Average Duration\"\nfig.text(0.1, 0.83, title, fontsize=25, weight=\"bold\", ha=\"left\", va=\"baseline\");","721856a2":"meanx= imr['IMDB Score'].mean()\nmeany= imr['Runtime'].mean()\n\n\nfig, ax = plt.subplots(figsize=(18, 8), dpi=75)\n\nsns.scatterplot(\n    data=imr, \n    x='IMDB Score', \n    y='Runtime', \n    size='IMDB Score', \n    ax=ax, sizes=(5, 1000),\n    alpha=0.9,\n    color=\"darkred\"\n)\nlinex = ax.axvline(meanx, linestyle='dotted', color=colors_dark[1], alpha=0.8, label='Average')\nliney = ax.axhline(meany, linestyle='dotted', color=colors_dark[1], alpha=0.8)\n\nax.legend(bbox_to_anchor=(1.05, 1), ncol=1, borderpad=1, frameon=False, fontsize=12)\nax.grid(alpha=0.3)\nax.set_axisbelow(True)\nax.set_xlabel(\"IMDB Score\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax.set_ylabel(\"Runtime\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nxmin, xmax = ax.get_xlim()\nymin, ymax = ax.get_ylim()\nax.legend().set_visible(False)\n\n\nplt.text(s=\"Is There a Correlation Between\\nDuration and IMDB Score?\", ha='left', x=xmin, y=ymax*1.1, fontsize=24, fontweight='bold', color=colors_dark[0])\nplt.title(\"It doesn't seem like there is a strong relationship between IMDB score and\\nduration of content but it's gonna be better if we check it with correlation map.\", loc='left', fontsize=13, color=colors_dark[2])  \nplt.tight_layout()\nplt.show()","3e472970":"lan = df[\"Language\"].value_counts().iloc[0:10]\nlabels = lan.index\nsizes = lan.values\ncolors = [\"#ce8f5a\", \"#efd199\", \"#80c8bc\", \"#5ec0ca\", \"#6287a2\"]\n\n# Draw Plot\nfig, ax = plt.subplots(figsize=(12, 8), dpi=80)\nsquarify.plot(sizes=sizes, label=labels,color=colors,\n              text_kwargs={'fontsize':10,'weight':'bold',\"color\":\"white\"}, alpha=.8)\n\n# Decorate\nplt.title('Top 10 Content Language',fontsize=20, color=colors_dark[2])\nplt.axis('off');","aa844db2":"# Prepare data\nimdb = df.sort_values(by=\"IMDB Score\",ascending=False).reset_index(drop=True).iloc[0:10][[\"Title\",\"IMDB Score\",\"Runtime\"]]\nimdb.sort_values(by=\"IMDB Score\",ascending=True,inplace=True)\n\n# Draw plot\nfig, ax = plt.subplots(figsize=(9,6), dpi= 80)\nax.vlines(x=imdb[\"Title\"], ymin=0, ymax=imdb[\"IMDB Score\"], color='darkred', alpha=0.7, linewidth=2)\nax.scatter(x=imdb[\"Title\"], y=imdb[\"IMDB Score\"], s=75, color='darkred', alpha=0.7)\nxmin, xmax = ax.get_xlim()\nymin, ymax = ax.get_ylim()\n\n# Title, Label, Ticks and Ylim\nax.set_ylabel('Miles Per Gallon')\nax.set_xticks(imdb[\"Title\"])\nax.set_xticklabels(imdb[\"Title\"].str.upper(), rotation=60, fontdict={'horizontalalignment': 'right', 'size':12})\nax.set_ylim(0, 10)\nax.grid(axis=\"y\",alpha=.3)\nax.set_title('Top 10 Content by IMDB Score', fontdict={'size':24},color=colors_dark[0])\n\n# Annotate - _2 means IMDB score when you conver them to tuple the named changed like that\nfor row in imdb.itertuples():\n    ax.text(row.Title, row._2+.5, s=round(row._2, 2), horizontalalignment= 'center', verticalalignment='bottom', fontsize=14)\n\nplt.show()","dd2d2ce3":"gen_num = df.groupby(\"Genre\").size().sort_values(ascending=False).iloc[0:10]\ngen_num = gen_num.sort_values(ascending=True)\n\ncolors = [\"#661246\", \"#ae1357\", \"#f9247e\", \"#d7509f\", \"#f9897b\"]\n\nfig, ax = plt.subplots(figsize=(12,8))\n\nbars = ax.bar(gen_num.index, gen_num.values, color=colors, edgecolor=colors_dark[0])\n\nax.grid(axis='y', alpha=0.3)\nax.set_axisbelow(True)\nax.set_xlabel(\"Category\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nax.set_ylabel(\"Number of Category\", fontsize=14, labelpad=10, fontweight='bold', color=colors_dark[0])\nplt.xticks(rotation = 25)\nxmin, xmax = ax.get_xlim()\nymin, ymax = ax.get_ylim()\n\nnum = 10\nfor i, bar in enumerate(bars) : \n    x=bar.get_x()\n    y=bar.get_height()\n    ax.text(\n            s=f\"{num}th\",\n            va='center', ha='center', \n            y=y\/2, x=x+0.40,\n            color='white',\n            fontsize=12,\n        )\n    num -= 1\n        \nplt.text(s=\"Top 10 Categories\", ha='left', x=xmin, y=ymax*1.1, fontsize=24, fontweight='bold', color=colors_dark[0])\nplt.tight_layout()\nplt.show()","9f8c3aed":"# Prepare data\ndur = df.sort_values(by=\"Runtime\",ascending=False).iloc[0:10].reset_index(drop=True)\ndur = dur.sort_values(by=\"Runtime\",ascending=True)\n\n# Draw plot\nfig, ax = plt.subplots(figsize=(9,6), dpi= 80)\nax.hlines(y=dur.Title, xmin=145, xmax=215, color='gray', alpha=0.7, linewidth=1, linestyles='dashdot')\nax.scatter(y=dur.Title, x=dur.Runtime, s=75, color='darkred', alpha=0.7)\n\n# Title, Label, Ticks and Ylim\nax.set_title('Top 10 Content by Duration', fontdict={'size':22})\nax.set_xlabel('Duration of Content')\nax.set_yticks(dur.Title)\nax.set_yticklabels(dur.Title, fontdict={'horizontalalignment': 'right'})\nax.set_xlim(145, 215)\nplt.show()\n","c81cdc65":"# Adding new columns to data - Month and Year\n# There were some columns that include \".\" instead of \",\" so I replaced them first.\ndf.Premiere = df.Premiere.str.replace(\".\",\",\",regex=True)\nYears = []\nMonths = []\n\n#Taking years and months\nfor i in range(0,len(df.Premiere)):\n    Months.append(df.Premiere.str.split(\",\")[i][0].split(\" \")[0])\n    Years.append(int(df.Premiere.str.split(\",\")[i][1].strip()))\n\n#Creating new columns\ndf[\"Year\"] = Years\ndf[\"Year\"].astype(\"int64\")\ndf[\"Month\"] = Months\ndf.info()","9342ad86":"# Being sure that we don't have any null value after new columns\ndf.isnull().sum()","49e98fcd":"# Check new data\ndf.head()","245ba579":"# Prepare data\nyr = df[\"Year\"].value_counts()\nyr = yr.sort_index()\n\n# Draw Plot and Decorate\nfig = plt.figure(\n    FigureClass=Waffle,\n    plots={\n        '111': {\n            'values': list(yr.values),\n            'labels': list(yr.index),\n            'legend': {'loc': 'upper left', 'bbox_to_anchor': (1.05, 1), 'fontsize': 12},\n            'title': {'label': 'Number of Content Per Year', 'loc': 'center', 'fontsize':18}\n        },\n    },\n    rows=10,\n    colors=colors_mix[0:8],\n    figsize=(16, 9)\n)","ab120e19":"grouped = df.groupby(\"Month\").size()\n\nfig, ax = plt.subplots(figsize=(14, 8), dpi=75)\n\npie = ax.pie(\n    grouped, \n    colors=colors_mix + [\"#ce8f5a\", \"#efd199\", \"#80c8bc\", \"#5ec0ca\"] ,\n    wedgeprops=dict(width=0.6, alpha=0.9),\n    autopct='%1.0f%%',\n    pctdistance=1.12, \n    textprops={\n        'fontsize': 12, \n        'color': colors_dark[2],\n        'fontweight': 'bold'\n    }, \n)\n\nax.legend(grouped.index, loc='upper center', bbox_to_anchor=(0.5, -0.1), ncol=2, borderpad=1, frameon=False, fontsize=12)\n\nplt.suptitle(t=\"Distribution of Premiere by Month\", fontsize=24, fontweight='bold', color=colors_dark[0])\nplt.title(\"They most prefer to arrange premiere at October, April and November \", fontsize=13, color=colors_dark[2])\nplt.tight_layout()\nplt.show()","043294fb":"- \ud83e\udd81 Did you met with my lion? His name is cimbom \ud83d\ude02 Don't worry he seems a bit wild but he is very friendly. Whatever let's go back to data. ***Documentary*** has the first place with 159 pieces content in Netflix. The documentary is followed by ***drama*** and ***comedy***, respectively.","410f1670":"- \ud83c\udfaf We all know that how English is important. I guess there is no one shocked that the most of content is in ***English language***. Also, ***Indian*** series are quite popular in the world so they are number 2. ***Spanish*** is the most spoken language in the world and they are in the 3rd place.","968049c7":"<center>\n<p style=\"font-size:20pt; font-style:bold; text-align:center\">\n\"THE END! THANKS FOR WATCHING!!\"\n<\/p>\n<\/center>\n<center><img\nsrc=\"https:\/\/i.gifer.com\/H2PC.gif\" style=\"width:100%;height100%;\">\n<\/center>","41bd73cb":"<center>\n<p style=\"font-size:20pt; font-style:bold; text-align:center\">\nROAAARR!!\n<\/p>\n<\/center>\n<center><img\nsrc=\"https:\/\/media1.tenor.com\/images\/b4516e868217ec81a2684c01b751985f\/tenor.gif?itemid=13138350\" style=\"width:100%;height100%;\">\n<\/center>","11070655":"## Importing Data \u2b07\n<hr>","a6eca820":"<center><img\nsrc=\"https:\/\/media.giphy.com\/media\/3oEhmI1Y4GlCPczg1W\/giphy.gif\" style=\"width:100%;height100%;\">\n<\/center>","65823940":"> If you read my notebook until the end, you are ***LORD OF THE RING*** \ud83e\udd23 I really spend super funny time while writing and I hope you had same level of fun while reading it. I'm looking forward to see you all in the next notebook. \ud83d\udc4b","b9050bb9":"- \ud83d\udc22 ***David Attenborough: A Life on Our Planet*** is the content which has the most IMDB score. We all know that high IMDB score sometimes doesn't mean that nice content or worthy for watching but this one is literally masterpiece if you like discovering our hugeee planet.","786f20fd":"## Data Visualizations \ud83d\udcca\n<hr>","8b31537b":"<center>\n<p style=\"font-size:20pt; font-style:bold; text-align:center\">\n\ud83e\udd47 David Attenborough: A Life on Our Planet\n<\/p>\n<\/center>\n<center><img\nsrc=\"https:\/\/media.giphy.com\/media\/fHx1hkveYm8IIO8Rgo\/giphy.gif\" style=\"width:100%;height100%;\">\n<\/center>","543b9e01":"## Colors \ud83c\udfa8\n<hr>","3dfc9ad0":"<center>\n<p style=\"font-size:20pt; font-style:bold; text-align:center\">\n\"THE IRISHMAN\"\n<\/p>\n<\/center>\n<center><img\nsrc=\"https:\/\/galeri14.uludagsozluk.com\/807\/the-irishman_2016920.gif\" style=\"width:100%;height100%;\">\n<\/center>","3f868d09":"- ***Heist Film category*** is the longest by avarage duration. Even thought they are that long, is there anyone says that I'm bored?\ud83e\udd14 I don't think so. Ah also, if you didn't try Money Heist yet, go and watch it immediately. Wait wait, after finished notebook please\ud83d\ude02","c741037d":"## First Look To Data \ud83d\udd75\ufe0f\u200d\u2640\ufe0f\n<hr>","700b0edc":"<center>\n<p style=\"font-size:20pt; font-style:bold; text-align:center\">\n\u201c\ud83c\udf7f ARE POPCORNS READY? WE ARE STARTING...\u201d \n<\/p>\n<\/center>\n\n\n<center><img\nsrc=\"https:\/\/media1.tenor.com\/images\/28c4a816a0d5199a23626390cad097c2\/tenor.gif?itemid=12190256\" style=\"width:100%;height:50%;\">\n<\/center>","3e4dc592":"<center>\n<p style=\"font-size:20pt; font-style:bold; text-align:center\">\n\u201cWELCOME TO NETFLIX! ENJOY WATCHING IT!!\u201d \n<\/p>\n<\/center>\n\n\n<center><img\nsrc=\"https:\/\/media1.tenor.com\/images\/f6b11bd53411d94338117381cf9a9b9b\/tenor.gif?itemid=18131525\" style=\"width:100%;height:100%;\">\n<\/center>\n\n# Introduction\nHello again with my new notebook! I wanted to chose interesting data set for my next notebook so here we are. I will do my best to create awesome visualizations while this notebook. I hope you will like it as you like watching Netflix\ud83d\ude06\n\n\ud83d\ude80Sooo let's goo!\n\n## Libraries \u2b07\n<hr>","ce6729ae":"I wanted to use ***circular barplot*** instead of using ***classic bar plots*** for this time. While checking resources for it, I [found this one](https:\/\/www.python-graph-gallery.com\/web-circular-barplot-with-matplotlib). This is a great source if someone wants to learn more about cicular barplot or any other plots. I learned everything from there, thanks a lot to him!","b73a1f64":"> \ud83d\udccc We all know that Netflix is a huge platform to watching series, movies and many on. As you can see there is ***115*** category and ***38*** language that you can choose. I guess next slogan of Netflix might be ***'We have content for everyone'***.","bf00af27":"- ***The Irishman*** is the content that which has longest duration in Netflix. Even though it's that long, I don't think that you will get bored from it in ***210 min***. You should give it try to The Irishman. One of the best 210 min will be in your life. \ud83d\ude1c","57d2e14f":"<center>\n<p style=\"font-size:20pt; font-style:bold; text-align:center\">\n\u201cTHIS IS A ROBBERY!\u201d \n<\/p>\n<\/center>\n<center><img\nsrc=\"https:\/\/1.bp.blogspot.com\/-cgODERMTBHY\/XrgJGTlSNiI\/AAAAAAAAAE4\/rRVQHLBkWu8pksR1jku5F1YPv6q1LjL9gCLcBGAsYHQ\/s1600\/MoneyHeist.gif\" style=\"width:100%;height:100%;\">\n<\/center>","f75829fa":"## \ud83c\udfac END OF NOTEBOOK\n<hr>"}}