{"cell_type":{"b28b5db5":"code","67e99b3e":"code","0efc17f3":"code","295fcd9d":"code","12b873a1":"code","c6c183e2":"code","f123e4c5":"code","896385d7":"code","16b0c103":"code","ce263b79":"code","f52dfc17":"code","54948de0":"code","a349f73b":"code","26490e40":"code","b9375857":"code","9be7cff0":"code","4c799395":"code","be81fb9f":"code","3fa6b8d6":"code","95ce49fe":"code","bc00af39":"markdown","fac703bb":"markdown"},"source":{"b28b5db5":"!pip uninstall kaggle\n!pip install --upgrade pipg\n!pip install kaggle==1.5.6","67e99b3e":"!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\n!ls -lha kaggle.json\n!chmod 600 ~\/.kaggle\/kaggle.json","0efc17f3":"! kaggle competitions download -c 2020termproject-18011826\n!unzip 2020termproject-18011826.zip","295fcd9d":"import pandas as pd\nimport numpy as np\nimport torch\nimport torchvision.datasets as data\nimport torchvision.transforms as trasforms\nimport random\nfrom sklearn import preprocessing","12b873a1":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(777)","c6c183e2":"learning_rate = 1\ntraining_epochs = 1000\nbatch_size =50\ndrop_prob = 0.3\nScaler = preprocessing.StandardScaler()","f123e4c5":"train_data=pd.read_csv('train_sweetpotato_price.csv')\ntest_data=pd.read_csv('test_sweetpotato_price.csv')","896385d7":"train_data['year']=train_data['year']%10000\/100 \nx_train_data = train_data.loc[:,[i for i in train_data.keys()[:-1]]]\ny_train_data=train_data[train_data.keys()[-1]]","16b0c103":"x_train_data = np.array(x_train_data)\ny_train_data = np.array(y_train_data)\nx_train_data = Scaler.fit_transform(x_train_data)\n\nx_train_data = torch.FloatTensor(x_train_data)\ny_train_data = torch.FloatTensor(y_train_data)","ce263b79":"train_dataset = torch.utils.data.TensorDataset(x_train_data, y_train_data)","f52dfc17":"data_loader = torch.utils.data.DataLoader(dataset=train_dataset,\n                                          batch_size=batch_size,\n                                          shuffle=True,\n                                          drop_last=True)","54948de0":"linear1 = torch.nn.Linear(5,5,bias=True)\nlinear2 = torch.nn.Linear(5,5,bias=True)\nlinear3 = torch.nn.Linear(5,5,bias=True)\nlinear4 = torch.nn.Linear(5,1,bias=True)\nrelu = torch.nn.ReLU()\ndropout = torch.nn.Dropout(p=drop_prob)","a349f73b":"torch.nn.init.xavier_normal_(linear1.weight)\ntorch.nn.init.xavier_normal_(linear2.weight)\ntorch.nn.init.xavier_normal_(linear3.weight)\ntorch.nn.init.xavier_normal_(linear4.weight)\n","26490e40":"model = torch.nn.Sequential(linear1,relu,\n                            linear2,relu,\n                            linear3,relu,\n                            linear4).to(device)","b9375857":"loss = torch.nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)","9be7cff0":"total_batch= len(data_loader)\nmodel.train()\nfor epoch in range(training_epochs):\n  avg_cost = 0\n\n  for X,Y in data_loader:\n    X=X.to(device)\n    Y= Y.to(device)\n    optimizer.zero_grad()\n    hypothesis = model(X)\n    cost = loss(hypothesis, Y)\n    cost.backward()\n    optimizer.step()\n\n    avg_cost += cost\/ total_batch \n  print('Epoch:', '%04d' % (epoch+1), 'cost=', '{:.9f}'.format(avg_cost))\n\nprint('Learning finised')","4c799395":"#\ubaa8\ub378 \ud14c\uc2a4\ud2b8\nwith torch.no_grad():\n  test_data['year']=test_data['year']%10000\/100 \n  x_test_data = test_data.loc[:,[i for i in test_data.keys()[:]]]\n  x_test_data=np.array(x_test_data)\n  x_test_data=Scaler.transform(x_test_data)\n  x_test_data=torch.from_numpy(x_test_data).float().to(device)\n\n  prediction = model(x_test_data)","be81fb9f":"correct_prediction = prediction.cpu().numpy().reshape(-1,1)","3fa6b8d6":"submit=pd.read_csv('submit_sample.csv')\n\nfor i in range(len(correct_prediction)):\n  submit['Expected'][i]=correct_prediction[i].item()\nsubmit","95ce49fe":"submit.to_csv('submit.csv',mode='w',index=False)\n! kaggle competitions submit -c 2020termproject-18011826 -f submit.csv -m \"submit\"","bc00af39":"year\ub370\uc774\ud130 \uac00\uacf5\ud574\uc11c \uc0ac\uc6a9\ud558\uae30","fac703bb":"layer \uae4a\uac8c \uc313\uae30"}}