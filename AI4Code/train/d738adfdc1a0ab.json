{"cell_type":{"4f2e4a27":"code","438042a5":"code","0fcff5e9":"code","4ff58e85":"code","af262c0d":"markdown","c6735fda":"markdown","eb8b01c5":"markdown","3cb85821":"markdown","ff62df12":"markdown","5b4e430e":"markdown","db17231a":"markdown","e1dbd8f4":"markdown","7c5a3a92":"markdown","c9119438":"markdown","7cbb32e5":"markdown","003e3216":"markdown","2cd587e8":"markdown","d3439de1":"markdown","233c419b":"markdown","d2f3f2fa":"markdown"},"source":{"4f2e4a27":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport os\n\ndf_map = {}\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n#         print(\n#             '='*80 \n#             + '\\n' + filename + '(' + os.path.join(dirname, filename) +')' + '\\n' \n#             + '='*80)  \n\n        df_map[filename] = pd.read_csv(os.path.join(dirname, filename))\n        \n#         print(f'| INFO | df_{filename}')\n#         print(df_map[filename].info())\n#         print('\\n')\n        \n#         print(f'| DESCRIPTION | df_{filename}')\n#         print(df_map[filename].describe())\n#         print('\\n')\n        \n        print(f'| SHAPE | df_{filename}')\n        print(df_map[filename].shape)\n#         print('\\n')\n\nprint('='*80)\nprint(f'There are {len(df_map)} dataframe(s) in total.')\nprint('='*80)\n","438042a5":"# Came from Stackoverflow. lost the link\nimport math, itertools\nfrom matplotlib import pyplot as plt\nfrom matplotlib_venn import venn2, venn3\nimport numpy as np\n\n# Generate list index for itertools combinations\ndef gen_index(n):\n    x = -1\n    while True:       \n        while True:\n            x = x + 1\n            if bin(x).count('1') == n:\n                break\n        yield x\n\n# Generate all combinations of intersections\ndef make_intersections(sets):\n    l = [None] * 2**len(sets)\n    for i in range(1, len(sets) + 1):\n        ind = gen_index(i)\n        for subset in itertools.combinations(sets, i):\n            inter = set.intersection(*subset)\n            l[next(ind)] = inter\n    return l\n\n# Get weird reversed binary string id for venn\ndef number2venn_id(x, n_fill):\n    id = bin(x)[2:].zfill(n_fill)\n    id = id[::-1]\n    return id\n\n# Iterate over all combinations and remove duplicates from intersections with\n# more sets\ndef sets2dict(sets):\n    l = make_intersections(sets)\n    d = {}\n    for i in range(1, len(l)):\n        d[number2venn_id(i, len(sets))] = l[i]\n        for j in range(1, len(l)):\n            if bin(j).count('1') < bin(i).count('1'):\n                l[j] = l[j] - l[i]\n                d[number2venn_id(j, len(sets))] = l[j] - l[i]\n    return d","0fcff5e9":"set_train_test_cols = [set(df_map['train.csv'].columns), set(df_map['test.csv'].columns)]\nd = sets2dict(set_train_test_cols)\n\n# Plot it\nplt.figure(figsize=(10,10))\nh = venn2(\n    [set(df_map['train.csv'].columns), set(df_map['test.csv'].columns)],\n    set_labels= (\n        'train_cols',\n        'test_cols'\n    ))\nplt.title('Shared columns between train.csv and test.csv')\n\nfor k, v in d.items():\n   l = h.get_label_by_id(k)\n   if l:\n       l.set_fontsize(12)\n       l.set_text('\\n'.join(sorted(v)))\nplt.show()","4ff58e85":"from matplotlib_venn import venn3, venn3_circles\nset_train_vic_vac_cols = [\n    set(df_map['train.csv'].columns), \n    set(df_map['victoria.csv'].columns), \n    set(df_map['vancouver.csv'].columns)\n]\nd = sets2dict(set_train_vic_vac_cols)\n\n# Plot it\nplt.figure(figsize=(16,16))\nh = venn3(\n    set_train_vic_vac_cols,\n    set_labels= (\n        'train_cols',\n        'victoria_cols',\n        'vancouver_cols'\n    ))\nplt.title('Shared columns between train.csv and victoria.csv and vancouver.csv')\n\nfor k, v in d.items():\n   l = h.get_label_by_id(k)\n   if l:\n       l.set_fontsize(12)\n       l.set_text('\\n'.join(sorted(v)))\nplt.show()","af262c0d":"This code will load the dataframes.","c6735fda":"### Data Dictionary for `vancouver.csv`:\n\n| INDEX | COLUMN_NAME | DATAFRAME_DTYPE | DATATYPE | IS_DEPENDENT | EXAMPLE | DESCRIPTION |\n| --- | --- | ---|\n| 1 | `Date.Time` | int64 | datetime | N |\"2016-08-01 00:00:00\" | datetime of weather conditions. granular to the hour |\n| 2 | `Year` | int64 | int64 | N |\"2016\" | year of weather conditions |\n| 3 | `Month` | int64 | int64 | N |\"4\" | month of the weather conditions (1-based) |\n| 4 | `Day` | int64 | int64 | N |\"4\" | the day of the month [1,31] for the weather conditions (1-based) |\n| 5 | `Hour` | int64 | int64 | N |\"0\" | the hour of the weather conditions (__0-based__!) |\n| 6 | `Time` | object | string | N |\"14:00\" | the hour of the weather conditions in 24H format |\n| 7 | `Temperature.in.Celsius` | float64 | float64 | N |\"-3.2\" | the temp in celsius of the weather |\n| 8 | `Dew.Point.Temperature.in.Celsius` | float64 | float64 | N |\"14.4\" | the atmospheric temperature (varying according to pressure and humidity) below which water droplets begin to condense and dew can form |\n| 9 | `Relative Humidity.in.Percent` | float64 | int64 | N |\"41\" | __NOTE THE MISSING DOT IN THE COLUMN NAME__. \"Humidity\" is the concentration of water vapour present in air. Water vapour, the gaseous state of water, is generally invisible to the human eye. Humidity indicates the likelihood for precipitation, dew, or fog to be present. The amount of water vapour needed to achieve saturation increases as the temperature increases. __\"Relative Humidity\" is the amount of water vapor present in air expressed as a percentage of the amount needed for saturation at the same temperature.__ |\n| 10 | `Humidex.in.Celsius` | float64 | int64 | N |\"34\" | The humidex (short for humidity index) is an index number used by Canadian meteorologists to describe how hot the weather feels to the average person, by combining the effect of heat and humidity. See humidex calculation below*. |\n\n(*) Humidex Calculation\n![humidex calculation](https:\/\/wikimedia.org\/api\/rest_v1\/media\/math\/render\/svg\/a04e139b6dcec41364ee1db1f6151d7e93185534)\n\n> where\n\n> H denotes the Humidex<br>\n> Tair is the air temperature in \u00b0C<br>\n> Tdew is the dewpoint in \u00b0C<br>\n\n> 5417.7530 is a rounded constant based on the molecular weight of water, latent heat of evaporation, and the universal gas constant. The humidity adjustment approximately amounts to one Fahrenheit degree for every millibar by which the partial pressure of water in the atmosphere exceeds 10 millibars (10 hPa).\n\n> At the time the humidex was originally developed in 1965, Canada was still on the Fahrenheit scale, and thus the humidex was originally based on that. The 1979 reformulation, which added the \u200b5\u20449 factor, was largely to address metrication in Canada as the country switched to the Celsius scale.\n","eb8b01c5":"This code establishes the necessary library functions for our visualizations. Set section mutex algo came from StackOverflow - didn't save the link but props to that person.","3cb85821":"---\n## General Notes on the Data\n---","ff62df12":"---\n## Visualizations of Cross Dataset Pivots\n---","5b4e430e":"### Data Dictionary for `train.csv`:\n\n| INDEX | COLUMN_NAME | DATAFRAME_DTYPE | DATATYPE | IS_DEPENDENT | EXAMPLE | DESCRIPTION |\n| --- | --- | ---|\n| 1 | `Vessel.Name` | object | string | N |\"Queen of Coquitlam\" | the name of the vessel transporting the ferry passengers |\n| 2 | `Scheduled.Departure` | object | string | N | \"11:00 AM\" | the time of day which the ferry was scheduled for |\n| 3 | `Trip` | object | string | N | \"Tsawwassen to Swartz Bay\" | departure harbour 1st, arrival harbour 2nd |\n| 4 | `Day` | object | string | N | \"Monday\" | the name of the day which the ferry departs |\n| 5 | `Month` | object | string | N | \"February\" | the name of the month which the ferry departs |\n| 6 | `Day.of.Month` | int64 | int64 | N | \"28\" | the day of the month which the ferry departs (origin at 1) |\n| 7 | `Year` | int64 | int64 | N | \"2016\" | the year which the ferry departs |\n| 8 | `Full.Date` | object | string | N | \"28 August 2016\" | the date which the ferry departs |\n| 8 | `Trip.Duration` | float64 | int64 | Y | \"95\" | the length of sailing in minutes; or \"NA\" when not available |\n| 9 | `Status` | object | string | Y |\"Weather delays\" | \"On Time\" if trip wasn't delayed, otherwise string reason of why trip was delayed |\n| 10 | `Delay.Indicator` | int64 | int64 | Y | \"0\" | __[target]: was the ferry delayed__ |","db17231a":"### Notice the typo in `Relative Humidity.in.Percent` and `Relative.Humidity.in.Percent` in the columns of `vancouver.csv` and `victoria.csv`!","e1dbd8f4":"---\n# DATA DICTIONARY\n#### Competition: [CANSSI NSCS Ferry Delays](https:\/\/www.kaggle.com\/c\/canssi-ncsc-ferry-delays\/overview)\n#### Notebook: 0.0.1-iainwong-datadict-canssi-nscs-ferry-delays\n#### Date: 2019-SEPT-15\n---\n\nMiss the 5:45 p.m. ferry at Tsawwassen<br>\nRegret trying to take a ferry from Tsawwassen<br>\nRealize that the next ferry to Duke Point is at 8:15 p.m.<br>\nMentally debate whether or not it's worth it to stay<br>\nAct through the phone call telling mom you\u2019re not coming this weekend<br>\nBuy the ticket for the 8:15 sailing<br>\nPlay Tetris for two hours (Tetris optional, you could do anything else including: reading, knitting, learn to do a kickflip, solve world crises, eavesdrop on all other passengers, imagine a full happy married life with everyone you\u2019ve ever matched with on Tinder, try to remember all the words to the Remembrance Day song you sang at that assembly in grade four)<br>\nWatch the ferry dock at 7:45 p.m. \u2014 at this point you should have grown fully aware that you are hungry<br>\nIs the Quay market still open? Can you make it? Who will watch your stuff as you weave across 7 lines of cars that are swiftly departing the ferry?<br>\nIt is too late.<br>\nBoard the ferry with the 12 other foot passengers<br>\nRush to the on-board White Spot cafeteria<br>\nStand there weighing your options, consider your financial situation<br>\nAsk the beleaguered ferry worker, nearing the end of a grueling 12 hour shift, for the fries and gravy<br>\nProudly claim your free water and strut with your economical choice to the cash register<br>\nPull out your non-Interac method of payment and smile wide as your purchase comes to $4.65<br>\nGrab any optional condiments and utensils and hunker down for the two-hour ferry ride<br>\n\n![BC Ferries Travel Delays](https:\/\/ubyssey.storage.googleapis.com\/media\/images\/2018\/01\/french_fries_and_a_ferry-medium.jpg)\n\n> From [ubyssey.ca](https:\/\/www.ubyssey.ca\/magazine\/frites-au-bc-ferries\/).\n\nThe goal of this notebook is to create Data Dictionaries for the `CANSSI NCSC Ferry Delays` datasets. End by depicting a raw, non-wrangled, non-cleaned visualization of the pivots between datasets.","7c5a3a92":"### Left out traffic csv from Venns because it's a timeseries that can only share the time columns","c9119438":"### Data Dictionary for `victoria.csv`:\n\n| INDEX | COLUMN_NAME | DATAFRAME_DTYPE | DATATYPE | IS_DEPENDENT | EXAMPLE | DESCRIPTION |\n| --- | --- | ---|\n| 1 | `Date.Time` | int64 | datetime | N |\"2016-08-01 00:00:00\" | datetime of weather conditions. granular to the hour |\n| 2 | `Year` | int64 | int64 | N |\"2016\" | year of weather conditions |\n| 3 | `Month` | int64 | int64 | N |\"4\" | month of the weather conditions (1-based) |\n| 4 | `Day` | int64 | int64 | N |\"4\" | the day of the month [1,31] for the weather conditions (1-based) |\n| 5 | `Hour` | int64 | int64 | N |\"0\" | the hour of the weather conditions (__0-based__!) |\n| 6 | `Time` | object | string | N |\"14:00\" | the hour of the weather conditions in 24H format |\n| 7 | `Temperature.in.Celsius` | float64 | float64 | N |\"-3.2\" | the temp in celsius of the weather |\n| 8 | `Dew.Point.Temperature.in.Celsius` | float64 | float64 | N |\"14.4\" | the atmospheric temperature (varying according to pressure and humidity) below which water droplets begin to condense and dew can form |\n| 9 | `Relative.Humidity.in.Percent` | float64 | int64 | N |\"41\" | \"Humidity\" is the concentration of water vapour present in air. Water vapour, the gaseous state of water, is generally invisible to the human eye. Humidity indicates the likelihood for precipitation, dew, or fog to be present. The amount of water vapour needed to achieve saturation increases as the temperature increases. __\"Relative Humidity\" is the amount of water vapor present in air expressed as a percentage of the amount needed for saturation at the same temperature.__ |\n| 10 | `Wind.Direction.in.Degrees` | float64 | int64 | N |\"330\" | the direction the wind is blowing relative to 360 degrees. or NaN. |\n| 11 | `Wind.Speed.km.per.h` | float64 | int64 | N |\"49\" | the wind speed in km\/hr |\n| 12 | `Visibility.in.km` | float64 | float64 | N |\"0.2\" | the visibile distance in km |\n| 13 | `Station.Pressure.in.kPa` | float64 | float64 | N |\"100.25\" | Station pressure is measured at a station without any adjustment. A station is noted as any location such as a house, airport, or the top of a mountain. Station pressure changes at various altitudes since it's not adjusted. With barometric pressure, it's the station pressure adjusted to the mean sea level... kilopascal (kPa) as a unit of pressure measurement is widely used throughout the world and has largely replaced the pounds per square inch (psi). pascal is one newton per square meter or 1-meter\/m*s^2 or 1-joule\/m^3... Average sea-level pressure is 101.325 kPA |\n| 14 | `Weather` | object | string | N | \"Rain,Moderate Snow Grains\" | string description of the weather conditions |\n","7cbb32e5":"### Data Dictionary for `traffic.csv`:\n\n| INDEX | COLUMN_NAME | DATAFRAME_DTYPE | DATATYPE | IS_DEPENDENT | EXAMPLE | DESCRIPTION |\n| --- | --- | ---|\n| 1 | `Year` | int64 | int64 | N |\"2019\" | the year of the traffic data |\n| 2 | `Month` | int64 | int64 | N |\"1\" | the month of the traffic data (1-based) |\n| 3 | `Day` | int64 | int64 | N |\"1\" | the day of the traffic data (1-based) [1,31] |\n| 4 | `Hour` | float64 | int64 | N |\"0\" | the hour of the traffic data (0-based) |\n| 5 | `Minute` | float64 | int64 | N |\"55\" | the minute of the traffic data (0-based) |\n| 6 | `Second` | float64 | int64 | N |\"55\" | the second of the traffic data (0-based) |\n| 7 | `Traffic.Ordinal` | int64 | int64 | N |\"1\" | [1,5] scale, where a higher number represents more traffic. Presumably a linear scale? Maybe a log-scale? |","003e3216":"In total there are ~60k records of sailings (comprising `train.csv` and `train.csv`) from __[AUG-2016, MAR-2018]__ between the ports: __{Horshoe Bay, Swhartz Bay, Tsawwassen, Departure Bay}__.\n        \n1. `train.csv` and `test.csv` contain sailing data from the BC Ferries operations.\n2. `vancouver.csv` and `victoria.csv` contains time series of temp and humidity of __Vancouver Harbour__.\n3. `traffic.csv` time series of ordinal traffic volume from __Lions Gate bridge__.\n    - bridge connects downtown Vancouver and North Vancouver\n        - used to get to Horseshoe bay Ferry Terminal","2cd587e8":"---\n## Data Dictionaries\n---","d3439de1":"### Data Dictionary for `test.csv`:\n\n| INDEX | COLUMN_NAME | DATAFRAME_DTYPE | DATATYPE | IS_DEPENDENT | EXAMPLE | DESCRIPTION |\n| --- | --- | ---|\n| 1 | `ID` | int64 | int64 | N |\"2\" | index of the sailing in the testing set. used for scoring to index your predictions |\n| 2 | `Vessel.Name` | object | string | N |\"Queen of Coquitlam\" | the name of the vessel transporting the ferry passengers |\n| 3 | `Scheduled.Departure` | object | string | N | \"11:00 AM\" | the time of day which the ferry was scheduled for |\n| 4 | `Trip` | object | string | N | \"Tsawwassen to Swartz Bay\" | departure harbour 1st, arrival harbour 2nd |\n| 5 | `Day` | object | string | N | \"Monday\" | the name of the day which the ferry departs |\n| 6 | `Month` | object | string | N | \"February\" | the name of the month which the ferry departs |\n| 7 | `Day.of.Month` | int64 | int64 | N | \"28\" | the day of the month which the ferry departs (origin at 1) |\n| 8 | `Year` | int64 | int64 | N | \"2016\" | the year which the ferry departs |\n| 9 | `Full.Date` | object | string | N | \"28 August 2016\" | the date which the ferry departs |","233c419b":"### Visualization of Pivots shared by `train.csv`, `victoria.csv`, and `vancouver.csv`","d2f3f2fa":"### Visualization of Pivots shared by `train.csv` and `test.csv`"}}