{"cell_type":{"449a897e":"code","1edc04c9":"code","7c4bfa61":"code","fabaccf2":"code","1106f1f7":"code","5c167060":"markdown","96cd5f29":"markdown"},"source":{"449a897e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn import preprocessing","1edc04c9":"# Conditional statements(Slow)\n# def get_SNAP_for_store(row):\n#     print(row)\n#     if row['state_id'] == 'CA':\n#         return row['snap_CA']\n#     if row['state_id'] == 'TX':\n#         return row['snap_TX']\n#     if row['state_id'] == 'WI':\n#         return row['snap_WI']\n# grid_df['snap'] = grid_df.apply(lambda row: get_SNAP_for_store(row), axis=1)","7c4bfa61":"grid_df = pd.read_pickle('..\/input\/m5-sample50\/grid_df50.pkl')\ngrid_df = grid_df[['snap_CA', 'snap_TX', 'snap_WI', 'state_id']]\ngrid_df.head()","fabaccf2":"enc = preprocessing.OneHotEncoder()\nstate = enc.fit_transform(grid_df[['state_id']]).toarray()\nstate[:5]","1106f1f7":"grid_df['snap'] = np.multiply(grid_df[['snap_CA', 'snap_TX', 'snap_WI']].values,state).sum(axis=1)\ngrid_df","5c167060":"Based on [my previous notebook](https:\/\/www.kaggle.com\/sergioli212\/m5-all-feature-engineering-ready-to-use) for Ready-to-use features. I make correction for SNAP.","96cd5f29":"For each state, the policy for SNAP is different. So just keep the value of the corresponding state for each observation. After I try out the conditional statements which is too slow. Just thinking to do it using One hot encoder plus matrix multiplication."}}