{"cell_type":{"d71a27e0":"code","162fe650":"code","5bedf415":"code","18d37d92":"code","386c34c5":"code","a55e0320":"code","b55eeb57":"code","3f29950d":"code","2be39322":"code","445f60ab":"code","2f2a3947":"code","27f53079":"code","7685f48a":"code","72b01191":"code","4ae1bc6a":"code","d24bdb34":"code","166ec0e2":"code","d1831d2c":"code","d4326c7e":"code","050cc71a":"code","1308d584":"code","74f61ea2":"code","a159ffbb":"code","8afec51d":"code","26ffad56":"code","c96ba323":"code","bcfd2a4b":"code","4b8a6c4c":"code","6d845a06":"code","4c6220cf":"code","06f4475a":"code","8b9042f7":"code","527ca831":"code","defbdb1e":"code","b235748e":"code","861aeaf7":"code","81a9a451":"code","0ae88d44":"code","4da9ac92":"code","69f4214f":"code","ef928110":"code","7c9878a6":"code","973b2690":"code","a847b116":"code","3b27ec24":"code","1be4df89":"code","2c8b0551":"code","2a49dbfc":"code","6376c82a":"code","e8e6f9cb":"code","68cd6d85":"code","be411862":"code","158ce59b":"code","9c550f5a":"code","a740696f":"code","117c5893":"code","73c4c858":"code","26f5bc65":"code","c30bc61f":"code","9213ae77":"code","1d511d86":"code","ac9a0928":"code","ef2352eb":"code","516f17b1":"markdown","be6e482f":"markdown","2ecfe2de":"markdown","ef903744":"markdown","e19ea179":"markdown","bfb6e662":"markdown","2aa7d255":"markdown","85c276be":"markdown","2b159c48":"markdown","d4af682c":"markdown","bcab499a":"markdown","e39a3633":"markdown","85c4186b":"markdown","e2d1a38e":"markdown","20971aa6":"markdown","71853e57":"markdown","ef23b987":"markdown","b94885a3":"markdown","906ac519":"markdown","7eb2c17d":"markdown","6255ce6a":"markdown","5db8e7d4":"markdown","d09e3cee":"markdown","9fb6ec04":"markdown","b36c7872":"markdown","4cf0eb8f":"markdown","6908ebf2":"markdown","cc6ff4f7":"markdown","ccaa8f16":"markdown","2263d478":"markdown","3d83b7f5":"markdown","8d7bc514":"markdown","f6b2904c":"markdown","d0a90827":"markdown","bdb5b2b7":"markdown","188b7a06":"markdown","d82e8b69":"markdown","09479e53":"markdown","61b5188f":"markdown"},"source":{"d71a27e0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file \n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nimport matplotlib.gridspec as gridspec\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport gc\ngc.enable()\n\nimport os\nos.chdir('\/kaggle\/input\/ieeecis-fraud-detection') # Set working directory\nprint(os.listdir('\/kaggle\/input\/ieeecis-fraud-detection'))","162fe650":"%%time\ntrain_transaction = pd.read_csv('train_transaction.csv', index_col='TransactionID')\ntest_transaction = pd.read_csv('test_transaction.csv', index_col='TransactionID')\ntrain_identity = pd.read_csv('train_identity.csv', index_col='TransactionID')\ntest_identity = pd.read_csv('test_identity.csv', index_col='TransactionID')\nprint (\"Data is loaded!\")","5bedf415":"print('train_transaction shape is {}'.format(train_transaction.shape))\nprint('test_transaction shape is {}'.format(test_transaction.shape))\nprint('train_identity shape is {}'.format(train_identity.shape))\nprint('test_identity shape is {}'.format(test_identity.shape))","18d37d92":"train_transaction.head()","386c34c5":"train_identity.head()","a55e0320":"missing_values_count = train_transaction.isnull().sum()\nprint (missing_values_count[0:10])\ntotal_cells = np.product(train_transaction.shape)\ntotal_missing = missing_values_count.sum()\nprint (\"% of missing data = \",(total_missing\/total_cells) * 100)","b55eeb57":"missing_values_count = train_identity.isnull().sum()\nprint (missing_values_count[0:10])\ntotal_cells = np.product(train_identity.shape)\ntotal_missing = missing_values_count.sum()\nprint (\"% of missing data = \",(total_missing\/total_cells) * 100)","3f29950d":"del missing_values_count, total_cells, total_missing\ngc.collect()","2be39322":"ax = sns.countplot(y=\"isFraud\", data=train_transaction)\nplt.title('Distribution of  isFraud')\n\ntotal = len(train_transaction['isFraud'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_width()\/total)\n        x = p.get_x() + p.get_width() + 0.02\n        y = p.get_y() + p.get_height()\/2\n        ax.annotate(percentage, (x, y))\n\nplt.show()","445f60ab":"train_transaction['TransactionDT'].head()","2f2a3947":"train_transaction['TransactionDT'].shape[0] , train_transaction['TransactionDT'].nunique()","27f53079":"train_transaction['TransactionDT'].value_counts().head(10)","7685f48a":"fig, ax = plt.subplots(1, 2, figsize=(18,4))\n\ntime_val = train_transaction['TransactionDT'].values\n\nsns.distplot(time_val, ax=ax[0], color='r')\nax[0].set_title('Distribution of TransactionDT', fontsize=14)\nax[1].set_xlim([min(time_val), max(time_val)])\n\nsns.distplot(np.log(time_val), ax=ax[1], color='b')\nax[1].set_title('Distribution of LOG TransactionDT', fontsize=14)\nax[1].set_xlim([min(np.log(time_val)), max(np.log(time_val))])\n\nplt.show()","72b01191":"fig, ax = plt.subplots(1, 2, figsize=(18,4))\n\ntime_val = train_transaction.loc[train_transaction['isFraud'] == 1]['TransactionDT'].values\n\nsns.distplot(np.log(time_val), ax=ax[0], color='r')\nax[0].set_title('Distribution of LOG TransactionDT, isFraud=1', fontsize=14)\nax[1].set_xlim([min(np.log(time_val)), max(np.log(time_val))])\n\ntime_val = train_transaction.loc[train_transaction['isFraud'] == 0]['TransactionDT'].values\n\nsns.distplot(np.log(time_val), ax=ax[1], color='b')\nax[1].set_title('Distribution of LOG TransactionDT, isFraud=0', fontsize=14)\nax[1].set_xlim([min(np.log(time_val)), max(np.log(time_val))])\n\n\nplt.show()","4ae1bc6a":"train_transaction['TransactionDT'].plot(kind='hist',\n                                        figsize=(15, 5),\n                                        label='train',\n                                        bins=50,\n                                        title='Train vs Test TransactionDT distribution')\ntest_transaction['TransactionDT'].plot(kind='hist',\n                                       label='test',\n                                       bins=50)\nplt.legend()\nplt.show()","d24bdb34":"del fig, ax, time_val\ngc.collect()","166ec0e2":"train_transaction.head()","d1831d2c":"i = 'isFraud'\ncor = np.corrcoef(train_transaction['TransactionDT'], train_transaction[i])[0,1]\ntrain_transaction.loc[train_transaction['isFraud'] == 0].set_index('TransactionDT')[i].plot(style='.', title=i+\" corr= \"+str(round(cor,3)), figsize=(15, 3), label=\"isFraud=0\")\ntrain_transaction.loc[train_transaction['isFraud'] == 1].set_index('TransactionDT')[i].plot(style='.', title=i+\" corr= \"+str(round(cor,3)), figsize=(15, 3), label=\"isFraud=1\")\nplt.legend()\nplt.show()","d4326c7e":"c_features = list(train_transaction.columns[16:30])\nfor i in c_features:\n    cor = np.corrcoef(train_transaction['TransactionDT'], train_transaction[i])[0,1]\n    train_transaction.set_index('TransactionDT')[i].plot(style='.', title=i+\" corr= \"+str(round(cor,3)), figsize=(15, 3))\n    test_transaction.set_index('TransactionDT')[i].plot(style='.', title=i+\" corr= \"+str(round(cor,3)), figsize=(15, 3))\n    plt.show()","050cc71a":"del cor, c_features\ngc.collect()","1308d584":"d_features = list(train_transaction.columns[30:45])\n\nfor i in d_features:\n    cor = np.corrcoef(train_transaction['TransactionDT'], train_transaction[i])[0,1]\n    train_transaction.set_index('TransactionDT')[i].plot(style='.', title=i+\" corr= \"+str(round(cor,3)), figsize=(15, 3))\n    test_transaction.set_index('TransactionDT')[i].plot(style='.', title=i+\" corr= \"+str(round(cor,3)), figsize=(15, 3))\n    plt.show()","74f61ea2":"train_transaction[d_features].head()","a159ffbb":"# Click output to see the number of missing values in each column\nmissing_values_count = train_transaction[d_features].isnull().sum()\nmissing_values_count","8afec51d":"# how many total missing values do we have?\ntotal_cells = np.product(train_transaction[d_features].shape)\ntotal_missing = missing_values_count.sum()\n# percent of data that is missing\n(total_missing\/total_cells) * 100","26ffad56":"for i in d_features:\n    cor_tr = np.corrcoef(train_transaction['TransactionDT'], train_transaction[i].fillna(-1))[0,1]\n    cor_te = np.corrcoef(test_transaction['TransactionDT'], test_transaction[i].fillna(-1))[0,1]\n    train_transaction.set_index('TransactionDT')[i].fillna(-1).plot(style='.', title=i+\" corr_tr= \"+str(round(cor_tr,3))+\" || corr_te= \"+str(round(cor_te,3)), figsize=(15, 3))\n    test_transaction.set_index('TransactionDT')[i].fillna(-1).plot(style='.', title=i+\" corr_tr= \"+str(round(cor_tr,3))+\"  || corr_te= \"+str(round(cor_te,3)), figsize=(15, 3))\n    plt.show()","c96ba323":"del d_features, cor, missing_values_count, total_cells, total_missing\ngc.collect()","bcfd2a4b":"m_features = list(train_transaction.columns[45:54])\ntrain_transaction[m_features].head()","4b8a6c4c":"i = \"V150\"\ncor_tr = np.corrcoef(train_transaction['TransactionDT'], train_transaction[i].fillna(-1))[0,1]\ncor_te = np.corrcoef(test_transaction['TransactionDT'], test_transaction[i].fillna(-1))[0,1]\ntrain_transaction.set_index('TransactionDT')[i].fillna(-1).plot(style='.', title=i+\" corr_tr= \"+str(round(cor_tr,3))+\" || corr_te= \"+str(round(cor_te,3)), figsize=(15, 3))\ntest_transaction.set_index('TransactionDT')[i].fillna(-1).plot(style='.', title=i+\" corr_tr= \"+str(round(cor_tr,3))+\"  || corr_te= \"+str(round(cor_te,3)), figsize=(15, 3))\nplt.show()","6d845a06":"del cor_tr, cor_te\ngc.collect()","4c6220cf":"train_transaction.loc[:,train_transaction.columns[train_transaction.columns.str.startswith('V')]].isnull().sum()","06f4475a":"fig, ax = plt.subplots(1, 2, figsize=(18,4))\n\ntime_val = train_transaction['TransactionAmt'].values\n\nsns.distplot(time_val, ax=ax[0], color='r')\nax[0].set_title('Distribution of TransactionAmt', fontsize=14)\nax[1].set_xlim([min(time_val), max(time_val)])\n\nsns.distplot(np.log(time_val), ax=ax[1], color='b')\nax[1].set_title('Distribution of LOG TransactionAmt', fontsize=14)\nax[1].set_xlim([min(np.log(time_val)), max(np.log(time_val))])\n\nplt.show()","8b9042f7":"fig, ax = plt.subplots(1, 2, figsize=(18,4))\n\ntime_val = train_transaction.loc[train_transaction['isFraud'] == 1]['TransactionAmt'].values\n\nsns.distplot(np.log(time_val), ax=ax[0], color='r')\nax[0].set_title('Distribution of LOG TransactionAmt, isFraud=1', fontsize=14)\nax[1].set_xlim([min(np.log(time_val)), max(np.log(time_val))])\n\ntime_val = train_transaction.loc[train_transaction['isFraud'] == 0]['TransactionAmt'].values\n\nsns.distplot(np.log(time_val), ax=ax[1], color='b')\nax[1].set_title('Distribution of LOG TransactionAmt, isFraud=0', fontsize=14)\nax[1].set_xlim([min(np.log(time_val)), max(np.log(time_val))])\n\n\nplt.show()","527ca831":"del fig, ax, time_val\ngc.collect()","defbdb1e":"plt.figure(figsize=(10, 7))\nd_features = list(train_transaction.columns[30:45])\nuniques = [len(train_transaction[col].unique()) for col in d_features]\nsns.set(font_scale=1.2)\nax = sns.barplot(d_features, uniques, log=True)\nax.set(xlabel='Feature', ylabel='log(unique count)', title='Number of unique values per feature TRAIN')\nfor p, uniq in zip(ax.patches, uniques):\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 10,\n            uniq,\n            ha=\"center\") ","b235748e":"del d_features, uniques\ngc.collect()","861aeaf7":"plt.figure(figsize=(10, 7))\nc_features = list(train_transaction.columns[16:30])\nuniques = [len(train_transaction[col].unique()) for col in c_features]\nsns.set(font_scale=1.2)\nax = sns.barplot(c_features, uniques, log=True)\nax.set(xlabel='Feature', ylabel='log(unique count)', title='Number of unique values per feature TRAIN')\nfor p, uniq in zip(ax.patches, uniques):\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 10,\n            uniq,\n            ha=\"center\")","81a9a451":"del c_features, uniques\ngc.collect()","0ae88d44":"plt.figure(figsize=(35, 8))\nv_features = list(train_transaction.columns[54:120])\nuniques = [len(train_transaction[col].unique()) for col in v_features]\nsns.set(font_scale=1.2)\nax = sns.barplot(v_features, uniques, log=True)\nax.set(xlabel='Feature', ylabel='log(unique count)', title='Number of unique values per feature')\nfor p, uniq in zip(ax.patches, uniques):\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 10,\n            uniq,\n            ha=\"center\") ","4da9ac92":"del v_features, uniques\ngc.collect()","69f4214f":"plt.figure(figsize=(35, 8))\nv_features = list(train_transaction.columns[120:170])\nuniques = [len(train_transaction[col].unique()) for col in v_features]\nsns.set(font_scale=1.2)\nax = sns.barplot(v_features, uniques, log=True)\nax.set(xlabel='Feature', ylabel='log(unique count)', title='Number of unique values per feature')\nfor p, uniq in zip(ax.patches, uniques):\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 10,\n            uniq,\n            ha=\"center\") ","ef928110":"del v_features, uniques\ngc.collect()","7c9878a6":"plt.figure(figsize=(35, 8))\nv_features = list(train_transaction.columns[170:220])\nuniques = [len(train_transaction[col].unique()) for col in v_features]\nsns.set(font_scale=1.2)\nax = sns.barplot(v_features, uniques, log=True)\nax.set(xlabel='Feature', ylabel='log(unique count)', title='Number of unique values per feature')\nfor p, uniq in zip(ax.patches, uniques):\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 10,\n            uniq,\n            ha=\"center\") ","973b2690":"del v_features, uniques\ngc.collect()","a847b116":"plt.figure(figsize=(35, 8))\nv_features = list(train_transaction.columns[220:270])\nuniques = [len(train_transaction[col].unique()) for col in v_features]\nsns.set(font_scale=1.2)\nax = sns.barplot(v_features, uniques, log=True)\nax.set(xlabel='Feature', ylabel='log(unique count)', title='Number of unique values per feature')\nfor p, uniq in zip(ax.patches, uniques):\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 10,\n            uniq,\n            ha=\"center\") ","3b27ec24":"del v_features, uniques\ngc.collect()","1be4df89":"plt.figure(figsize=(35, 8))\nv_features = list(train_transaction.columns[270:320])\nuniques = [len(train_transaction[col].unique()) for col in v_features]\nsns.set(font_scale=1.2)\nax = sns.barplot(v_features, uniques, log=True)\nax.set(xlabel='Feature', ylabel='log(unique count)', title='Number of unique values per feature')\nfor p, uniq in zip(ax.patches, uniques):\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 10,\n            uniq,\n            ha=\"center\") ","2c8b0551":"del v_features, uniques\ngc.collect()","2a49dbfc":"plt.figure(figsize=(38, 8))\nv_features = list(train_transaction.columns[320:390])\nuniques = [len(train_transaction[col].unique()) for col in v_features]\nsns.set(font_scale=1.2)\nax = sns.barplot(v_features, uniques, log=True)\nax.set(xlabel='Feature', ylabel='log(unique count)', title='Number of unique values per feature')\nfor p, uniq in zip(ax.patches, uniques):\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 10,\n            uniq,\n            ha=\"center\") ","6376c82a":"del v_features, uniques\ngc.collect()","e8e6f9cb":"train_identity.head()","68cd6d85":"plt.figure(figsize=(35, 8))\nfeatures = list(train_identity.columns[0:38])\nuniques = [len(train_identity[col].unique()) for col in features]\nsns.set(font_scale=1.2)\nax = sns.barplot(features, uniques, log=True)\nax.set(xlabel='Feature', ylabel='log(unique count)', title='Number of unique values per feature TRAIN')\nfor p, uniq in zip(ax.patches, uniques):\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 10,\n            uniq,\n            ha=\"center\") ","be411862":"del features, uniques\ngc.collect()","158ce59b":"train_transaction.head(6)","9c550f5a":"train_identity.head(6)","a740696f":"fig, ax = plt.subplots(1, 2, figsize=(20,5))\n\nsns.countplot(x=\"ProductCD\", ax=ax[0], hue = \"isFraud\", data=train_transaction)\nax[0].set_title('ProductCD train', fontsize=14)\nsns.countplot(x=\"ProductCD\", ax=ax[1], data=test_transaction)\nax[1].set_title('ProductCD test', fontsize=14)\nplt.show()","117c5893":"ax = sns.countplot(x=\"DeviceType\", data=train_identity)\nax.set_title('DeviceType', fontsize=14)\nplt.show()","73c4c858":"print (\"Unique Devices = \",train_identity['DeviceInfo'].nunique())\ntrain_identity['DeviceInfo'].value_counts().head()","26f5bc65":"cards = ['card1', 'card2', 'card3', 'card4', 'card5', 'card6']\nfor i in cards:\n    print (\"Unique \",i, \" = \",train_transaction[i].nunique())","c30bc61f":"fig, ax = plt.subplots(1, 4, figsize=(25,5))\n\nsns.countplot(x=\"card4\", ax=ax[0], data=train_transaction.loc[train_transaction['isFraud'] == 0])\nax[0].set_title('card4 isFraud=0', fontsize=14)\nsns.countplot(x=\"card4\", ax=ax[1], data=train_transaction.loc[train_transaction['isFraud'] == 1])\nax[1].set_title('card4 isFraud=1', fontsize=14)\nsns.countplot(x=\"card6\", ax=ax[2], data=train_transaction.loc[train_transaction['isFraud'] == 0])\nax[2].set_title('card6 isFraud=0', fontsize=14)\nsns.countplot(x=\"card6\", ax=ax[3], data=train_transaction.loc[train_transaction['isFraud'] == 1])\nax[3].set_title('card6 isFraud=1', fontsize=14)\nplt.show()","9213ae77":"\"emaildomain\" in train_transaction.columns, \"emaildomain\" in train_identity.columns","1d511d86":"fig, ax = plt.subplots(1, 3, figsize=(32,10))\n\nsns.countplot(y=\"P_emaildomain\", ax=ax[0], data=train_transaction)\nax[0].set_title('P_emaildomain', fontsize=14)\nsns.countplot(y=\"P_emaildomain\", ax=ax[1], data=train_transaction.loc[train_transaction['isFraud'] == 1])\nax[1].set_title('P_emaildomain isFraud = 1', fontsize=14)\nsns.countplot(y=\"P_emaildomain\", ax=ax[2], data=train_transaction.loc[train_transaction['isFraud'] == 0])\nax[2].set_title('P_emaildomain isFraud = 0', fontsize=14)\nplt.show()","ac9a0928":"fig, ax = plt.subplots(1, 3, figsize=(32,10))\n\nsns.countplot(y=\"R_emaildomain\", ax=ax[0], data=train_transaction)\nax[0].set_title('R_emaildomain', fontsize=14)\nsns.countplot(y=\"R_emaildomain\", ax=ax[1], data=train_transaction.loc[train_transaction['isFraud'] == 1])\nax[1].set_title('R_emaildomain isFraud = 1', fontsize=14)\nsns.countplot(y=\"R_emaildomain\", ax=ax[2], data=train_transaction.loc[train_transaction['isFraud'] == 0])\nax[2].set_title('R_emaildomain isFraud = 0', fontsize=14)\nplt.show()","ef2352eb":"del fig, ax\ngc.collect()","516f17b1":"#  <a style=\"color:#6699ff\"> Team <\/a>\n- <a style=\"color:#6699ff\">Mohamed NIANG <\/a>\n- <a style=\"color:#6699ff\">Fernanda Tchouacheu <\/a>\n- <a style=\"color:#6699ff\">Sokhna Penda Toure <\/a>\n- <a style=\"color:#6699ff\">Hypolite Chokki <\/a>","be6e482f":"Dans cette partie, nous essayerons de voir, d'une part, ce que r\u00e9pr\u00e9sente r\u00e9ellement certaines variables,\net d'autre part, s'il y a des liens entre les variables et la variable cible.","2ecfe2de":"V\u00e9rifions toute la liste des V qui sont nulles.","ef903744":"**V150**","e19ea179":"Dans cette comp\u00e9tition, nous voulons pr\u00e9dire la probabilit\u00e9 qu'une transaction en ligne soit frauduleuse, comme le montre la cible binaire \"isFraud\".\n\nLes donn\u00e9es sont divis\u00e9es en deux fichiers **identity** et **transaction**, qui sont reli\u00e9s par \"TransactionID\". \n\n> Note : Toutes les transactions n'ont pas d'informations d'identit\u00e9 correspondantes.\n\n**Variables cat\u00e9gorielles - Transaction**\n\n- ProductCD\n- emaildomain\n- card1 - card6\n- addr1, addr2\n- P_emaildomain\n- R_emaildomain\n- M1 - M9\n\n**Variables cat\u00e9gorielles - Identit\u00e9**\n\n- DeviceType\n- DeviceInfo\n- id_12 - id_38\n\n**La variable TransactionDT est le temps d'une date-heure de r\u00e9f\u00e9rence donn\u00e9e (en seconde).**\n\n**Fichiers**\n\n- train_{transaction, identit\u00e9}.csv - l'ensemble d'apprentissage\n- test_{transaction, identit\u00e9}.csv - l'ensemble de test (**nous devons pr\u00e9dire la valeur isFraud pour ces observations**)\n- sample_submission.csv - un exemple de fichier de soumission dans le format correct\n\n> Questions\n\nNous allons commencer \u00e0 explorer les donn\u00e9es en se basant sur les caract\u00e9ristiques cat\u00e9gorielles et les montants des transactions. L'objectif est de r\u00e9pondre \u00e0 des questions comme :\n\n1. Quel type de donn\u00e9es avons-nous ?\n2. Combien de cols, de lignes, de valeurs manquantes avons-nous ?\n3. Quelle est la distribution cible ?\n4. Quelle est la distribution des valeurs des transactions de fraude et des transactions sans fraude ?\n5. Avons nous des produits frauduleux pr\u00e9dominants ?\n6. Quelles sont les caract\u00e9ristiques ou la cible qui pr\u00e9sentent des sch\u00e9mas int\u00e9ressants ?\n\nEt beaucoup d'autres questions qui vont soulever l'exploration.","bfb6e662":"## 2\u00e8me probl\u00e8me : Imbalanced class\n\nNous remarquons que notre jeu de donn\u00e9es (\"isFraud\") est d\u00e9s\u00e9quilibr\u00e9e. La plupart des transactions sont non frauduleuses. Si nous utilisons ce cadre de donn\u00e9es comme base pour nos mod\u00e8les pr\u00e9dictifs et nos analyses, nous pourrions obtenir beaucoup d'erreurs et nos algorithmes seront probablement surdimensionn\u00e9s puisqu'ils \"supposeront\" que la plupart des transactions ne sont pas des fraudes. Mais nous ne voulons pas que notre mod\u00e8le suppose, nous voulons que notre mod\u00e8le d\u00e9tecte des mod\u00e8les qui donnent des signes de fraude !\n\n**D\u00e9s\u00e9quilibr\u00e9e** signifie que le nombre de points de donn\u00e9es disponibles pour les diff\u00e9rentes classes est diff\u00e9rent.","2aa7d255":"# <a style=\"color:#6699ff\">  Table of Contents<\/a> \n\n<a style=\"color:#6699ff\"> I. Introduction<\/a>\n\n<a style=\"color:#6699ff\"> II. Descriptive Statistics & Visualization<\/a>\n\n<a style=\"color:#6699ff\"> III. Preprocessing<\/a>\n\n<a style=\"color:#6699ff\"> IV. Machine Learning Models<\/a>","85c276be":"# <a style=\"color:#6699ff\"> I. Introduction<\/a>","2b159c48":"**V features**","d4af682c":"**Pourquoi la d\u00e9tection de fraude ?**\n> La fraude est un commerce d'un milliard de dollars et elle augmente chaque ann\u00e9e. L'enqu\u00eate mondiale de PwC sur la criminalit\u00e9 \u00e9conomique de 2018 a r\u00e9v\u00e9l\u00e9 que la moiti\u00e9 (49 %) des 7 200 entreprises interrog\u00e9es avaient \u00e9t\u00e9 victimes d'une fraude quelconque. C'est une augmentation par rapport \u00e0 l'\u00e9tude PwC de 2016, dans laquelle un peu plus d'un tiers des organisations interrog\u00e9es (36 %) avaient \u00e9t\u00e9 victimes de la criminalit\u00e9 \u00e9conomique.\n\n\nCette comp\u00e9tition est un probl\u00e8me de **classification binaire** - c'est-\u00e0-dire que notre variable cible est un attribut binaire (l'utilisateur qui fait le clic est-il frauduleux ou non ?) et notre objectif est de classer les utilisateurs en \"frauduleux\" ou \"non frauduleux\" le mieux possible.","bcab499a":"<h1 align=\"center\" style=\"color:#6699ff\"> DataCamp IEEE Fraud Detection <\/h1>","e39a3633":"**Device Type & Device Info**","85c4186b":"**C features**","e2d1a38e":"**Missing Data Problem**","20971aa6":"**ProductCD**","71853e57":"**Card**","ef23b987":"**C features: C1, C2 ... C14**","b94885a3":"# <a style=\"color:#6699ff\"> II. Descriptive Statistics and Visualization<\/a>","906ac519":"**D Features**","7eb2c17d":"**TransactionAmt**","6255ce6a":"**Device information**","5db8e7d4":"## 1er probl\u00e8me : NaN","d09e3cee":"<img src=\"https:\/\/github.com\/DataCampM2DSSAF\/suivi-du-data-camp-equipe-tchouacheu_toure_niang_chokki\/blob\/master\/img\/credit-card-fraud-detection.png?raw=true\" width=\"800\" align=\"right\">","9fb6ec04":"**train_identity**","b36c7872":"On remarque qu'il y a beaucoup de colonnes **NaN** : \n\n- ``` V300 ... V339``` \n- ``` id_01 ... id_34``` ","4cf0eb8f":"Le probl\u00e8me ici est que les caract\u00e9ristiques D sont principalement des NaNs.","6908ebf2":"**Email Domain**","cc6ff4f7":"**Load data**","ccaa8f16":"**D features: D1 ... D15**","2263d478":"**M features: M1 .. M9**","3d83b7f5":"## Distribution Plots","8d7bc514":"Si nous consid\u00e9rons les caract\u00e9ristiques D, 58.15% sont des valeurs manquantes.","f6b2904c":"**Imbalanced Problem**","d0a90827":"**train_transaction**","bdb5b2b7":"## Count Plots","188b7a06":"**Categorical Features**\n\n- ProductCD\n- emaildomain\n- card1 - card6\n- addr1, addr2\n- P_emaildomain\n- R_emaildomain\n- M1 - M9\n- DeviceType\n- DeviceInfo\n- id_12 - id_38","d82e8b69":"**isFraud vs time**","09479e53":"**id_code**","61b5188f":"**Il semble que les criminels pr\u00e9f\u00e8rent le gmail.**"}}