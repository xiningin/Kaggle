{"cell_type":{"e309eca0":"code","321a2300":"code","63f4fb4c":"code","712a5422":"code","3b8a4caa":"code","7e2c4203":"code","c8712a1f":"code","61852904":"code","0e7891a0":"code","d84af575":"code","5be21087":"code","9c75fe1a":"code","d41dc0d4":"code","18caea2f":"code","24c57851":"code","9bfb042a":"code","6145e005":"code","f1742f22":"code","b459f5fd":"code","d05acbe9":"code","7c283f40":"code","49bbb2b3":"code","8b1ce7d3":"code","593fc7e6":"code","d5a7558d":"code","857265fc":"code","ffea0e34":"code","99c53322":"code","f3044e83":"code","0bdcbab4":"code","32eeb1ea":"code","c9a5aa02":"code","2b411fe5":"code","edf86a13":"code","efa0a760":"code","9c3925aa":"code","be0fda5a":"code","1a8fd795":"code","b9cd877d":"code","2894a6af":"code","bea5d098":"markdown","2b19e6bb":"markdown","c827699f":"markdown","e3bff13a":"markdown","64d6630b":"markdown","7492e19e":"markdown","32d9c4ee":"markdown","b945fe5e":"markdown"},"source":{"e309eca0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","321a2300":"#tarih de\u011fi\u015fkenler i\u00e7in datetime\nimport datetime as dt\nimport pandas as pd\n\n#de\u011fi\u015fenlerde maximum s\u00fct\u00fcn\u00fc g\u00f6ster \npd.set_option('display.max_columns', None)\n\n# g\u00f6zlemlerde, sat\u0131rlardan maksimum sat\u0131lar\u0131 g\u00f6ster.\n# pd.set_option('display.max_rows', None)\n\n# \"%.%2f\" noktadan sonra ikibasamak g\u00f6ster\npd.set_option('display.float_format', lambda x: '%.2f' % x)","63f4fb4c":"!pip install openpyxl\n\n# 2009-2010 y\u0131l\u0131 i\u00e7erisindeki veriler\ndf_2009_2010 = pd.read_excel(\"\/kaggle\/input\/uci-online-retail-ii-data-set\/online_retail_II.xlsx\",\n                    sheet_name=\"Year 2009-2010\", engine = \"openpyxl\")\n","712a5422":"# kopyas\u0131n\u0131 olu\u015fturmak\ndf = df_2009_2010.copy()\n#ilk sat\u0131rlar\ndf.head()","3b8a4caa":"#Verinin boyutu, \n# 525k g\u00f6zlem, 8 de\u011fi\u015fken\ndf.shape","7e2c4203":"# Yeni de\u011fi\u015fken tan\u0131mlama\n#Toplam fiyat= adet*\u00fcr\u00fcn fiyat\u0131\n# Her bir faturan\u0131n toplam bedeli\ndf[\"TotalPrice\"] = df[\"Quantity\"] * df[\"Price\"]\ndf[\"TotalPrice\"].head()","c8712a1f":"df.head()","61852904":"#verinin boyutu, yeni de\u011fi\u015fken eklenmi\u015f\ndf.shape","0e7891a0":"#Eksik verilerin toplam\u0131\ndf.isnull().sum()","d84af575":"# eksik verileri kal\u0131c\u0131 olarak silme\ndf.dropna(inplace=True)","5be21087":"# eksik sat\u0131rlar gittikten sonra\n# 407 k g\u00f6zleme d\u00fc\u015ft\u00fc\ndf.shape\n","9c75fe1a":"#Eksik verilerin toplam\u0131\ndf.isnull().sum()","d41dc0d4":"# iadeleri g\u00f6ster, invoce care\ndf[df[\"Invoice\"].str.contains(\"C\", na=False)].head()\n# Total price -eksi olur mu?\n# Quantitiy eksi olur mu?","18caea2f":"# iptal edilen i\u015flemlerin d\u00fc\u015f\u00fcr\u00fclmesi\ndf = df[~df[\"Invoice\"].str.contains(\"C\", na=False)]","24c57851":"# iadelerin \u00e7\u0131km\u0131\u015f hali\ndf.head()","9bfb042a":"df[\"InvoiceDate\"].min() # ilk fatura tarihi\n","6145e005":"#Recency,al\u0131\u015fveri\u015f yap\u0131l\u015fm\u0131\u015f  son faturaarih\ndf[\"InvoiceDate\"].max()","f1742f22":"# analiz tarihi, ne zaman bu analizi yap\u0131yor olacaks\u0131n?\ntoday_date = dt.datetime(2010, 12, 11)\ntoday_date","b459f5fd":"# Her bir m\u00fc\u015fteri i\u00e7in # recency, # frequency ve # monetary de\u011ferlerini nas\u0131l hesaplar\u0131rz?\n# recency, m\u00fc\u015fterinin son al\u0131\u015fveri\u015f tarihinden analiz tarihimizden \u00e7\u0131karaca\u011f\u0131z, burada g\u00fcn cinsinden alm\u0131\u015f\u0131z\n# frequency: customer Id ye g\u00f6re groupby, unique fatura numaras\u0131yla\n# monetary: Customer Id groupby, sonras\u0131nda totalPrice suma alaca\u011f\u0131z\nrfm = df.groupby('Customer ID').agg({'InvoiceDate': lambda InvoiceDate: (today_date - InvoiceDate.min()).days,\n                                     'Invoice': lambda Invoice: Invoice.nunique(),\n                                     'TotalPrice': lambda TotalPrice: TotalPrice.sum()})\n","d05acbe9":"rfm.head()","7c283f40":"# Acaba en \u00e7ok \u00f6deme yapan m\u00fc\u015fteri kim?\nrfm.sort_values(by=['TotalPrice'], ascending=False).head()\n","49bbb2b3":"# yeni de\u011fi\u015fken adlar\u0131n\u0131 atamak\nrfm.columns = ['recency', 'frequency', 'monetary']\nrfm.head()","8b1ce7d3":"# Transpozunu almak,\n# b\u00fct\u00fcn veririn RFM de\u011feri ortaya \u00e7\u0131kt\u0131\n# ortalama ka\u00e7 g\u00fcn \u00f6nce al\u0131\u015fveri\u015f yapt\u0131\u011f\u0131 \n#frequency, de\u011fer \nrfm.describe().T \n# Acaba \u00f6demesi 0 s\u0131f\u0131rdan k\u00fc\u00e7\u00fck olan var m\u0131? \n#Yanl\u0131\u015fl\u0131kla yap\u0131lm\u0131\u015f olabilir?","593fc7e6":"#fatura toplam bedelinin s\u0131f\u0131rdan k\u00fc\u00e7\u00fck olanlar\u0131 \u00e7\u0131kard\u0131\u011f\u0131m\u0131zda\nrfm = rfm[rfm[\"monetary\"] > 0]\nrfm.describe().T ","d5a7558d":"rfm.head()","857265fc":"# Recency\n#k\u00fc\u00e7\u00fc\u011fe 5 puan verece\u011fim\n# qcut, k\u00fc\u00e7\u00fckten b\u00fcy\u00fc\u011fe s\u0131ralar.\nrfm[\"recency_score\"] = pd.qcut(rfm['recency'], 5, \n                               labels=[5, 4, 3, 2, 1])\n# 0,20,40,60,80,100\n# yeni de\u011fi\u015fken tan\u0131mlad\u0131k.\nrfm.head()","ffea0e34":"# rank nedir?\n# 0-20 1 ise 20-40de 1 ise, ilk gelen say\u0131ya bir diyor.\nrfm[\"frequency_score\"] = pd.qcut(rfm['frequency'].rank(method=\"first\"), \n                                 5, labels=[1, 2, 3, 4, 5])\nrfm.head()","99c53322":"\nrfm[\"monetary_score\"] = pd.qcut(rfm['monetary'],\n                                5, labels=[1, 2, 3, 4, 5])\nrfm.head()","f3044e83":"# monetary skor neden yok? \n\nrfm[\"RFM_SCORE\"] = (rfm['recency_score'].astype(str) +\n                    rfm['frequency_score'].astype(str))\nrfm.head(10)\n#Monetory de\u011feri nerede?","0bdcbab4":"# segment isim s\u00f6zl\u00fc\u011f\u00fcn\u00fc tan\u0131mlama\n#R-F, XY\n# regular Expression r'\nseg_map = {\n    r'[1-2][1-2]': 'hibernating',\n    r'[1-2][3-4]': 'at_Risk',\n    r'[1-2]5': 'cant_loose',\n    r'3[1-2]': 'about_to_sleep',\n    r'33': 'need_attention',\n    r'[3-4][4-5]': 'loyal_customers',\n    r'41': 'promising',\n    r'51': 'new_customers',\n    r'[4-5][2-3]': 'potential_loyalists',\n    r'5[4-5]': 'champions'\n}","32eeb1ea":"# Regular Expression\n# Yeni segment tan\u0131mala\nrfm['segment'] = rfm['RFM_SCORE'].replace(seg_map, regex=True)\nrfm.head(12)","c9a5aa02":"rfm[[\"segment\", \"recency\", \"frequency\", \"monetary\"]].groupby(\"segment\").agg([\"mean\", \"count\"])\n\n#monetary \u00f6nemli ama transaction daha \u00f6nemli y\u00fcre\u011fi s\u0131cak olmas\u0131  daha \u00f6nemli\n#i\u015flem yap\u0131yor olmas\u0131 daha \u00f6nemli.","2b411fe5":"#kimlere ilgi gerekiyor?\n\nrfm[rfm[\"segment\"] == \"need_attention\"].head(20)","edf86a13":"# Yeni dataframe olu\u015fturma\nnew_df = pd.DataFrame()\nnew_df","efa0a760":"# bu ki\u015filer kim? bunlara y\u00f6nelik \nnew_df[\"new_customer_id\"] = rfm[rfm[\"segment\"] == \"need_attention\"].index\nnew_df.count()","9c3925aa":"new_df.head(14)","be0fda5a":"#csv olarak kay\u0131t etme, \n# bu ki\u015filere \u00f6zg\u00fc kampanyalar d\u00fczenlebilir.\nnew_df.to_csv(\"need_attention.csv\")  # df'i kaydet","1a8fd795":"def create_rfm(dataframe):\n\n    # VERIYI HAZIRLAMA\n    dataframe[\"TotalPrice\"] = dataframe[\"Quantity\"] * dataframe[\"Price\"]\n    dataframe.dropna(inplace=True)\n    dataframe = dataframe[~dataframe[\"Invoice\"].str.contains(\"C\", na=False)]\n\n    # RFM METRIKLERININ HESAPLANMASI\n    today_date = dt.datetime(2011, 12, 11)\n    rfm = dataframe.groupby('Customer ID').agg({'InvoiceDate': lambda date: (today_date - date.min()).days,\n                                                'Invoice': lambda num: num.nunique(),\n                                                \"TotalPrice\": lambda price: price.sum()})\n    rfm.columns = ['recency', 'frequency', \"monetary\"]\n    rfm = rfm[(rfm['monetary'] > 0)]\n\n    # RFM SKORLARININ HESAPLANMASI\n    rfm[\"recency_score\"] = pd.qcut(rfm['recency'], 5, labels=[5, 4, 3, 2, 1])\n    rfm[\"frequency_score\"] = pd.qcut(rfm[\"frequency\"].rank(method=\"first\"), 5, labels=[1, 2, 3, 4, 5])\n    rfm[\"monetary_score\"] = pd.qcut(rfm['monetary'], 5, labels=[1, 2, 3, 4, 5])\n\n    # cltv_df skorlar\u0131 kategorik de\u011fere d\u00f6n\u00fc\u015ft\u00fcr\u00fcl\u00fcp df'e eklendi\n    rfm[\"RFM_SCORE\"] = (rfm['recency_score'].astype(str) +\n                        rfm['frequency_score'].astype(str))\n\n\n    # SEGMENTLERIN ISIMLENDIRILMESI\n    seg_map = {\n        r'[1-2][1-2]': 'hibernating',\n        r'[1-2][3-4]': 'at_risk',\n        r'[1-2]5': 'cant_loose',\n        r'3[1-2]': 'about_to_sleep',\n        r'33': 'need_attention',\n        r'[3-4][4-5]': 'loyal_customers',\n        r'41': 'promising',\n        r'51': 'new_customers',\n        r'[4-5][2-3]': 'potential_loyalists',\n        r'5[4-5]': 'champions'\n    }\n\n    rfm['segment'] = rfm['RFM_SCORE'].replace(seg_map, regex=True)\n    rfm = rfm[[\"recency\", \"frequency\", \"monetary\", \"segment\"]]\n    return rfm","b9cd877d":"df = df_2009_2010.copy()\ndf.head()","2894a6af":"rfm_new = create_rfm(df)\nrfm_new.head(10)","bea5d098":"###############################################################\n# RFM ile M\u00fc\u015fteri Segmentasyonu (Customer Segmentation with RFM)\n###############################################################\n1. \u0130\u015f Problemi (Business Problem)\n2. Veriyi Anlama (Data Understanding)\n3. Veri Haz\u0131rlama (Data Preparation)\n4. RFM Metriklerinin Hesaplanmas\u0131 (Calculating RFM Metrics)\n5. RFM Skorlar\u0131n\u0131n Hesaplanmas\u0131 (Calculating RFM Scores)\n6. RFM Segmentlerinin Olu\u015fturulmas\u0131 ve Analiz Edilmesi (Creating & Analysing RFM Segments)\n7. T\u00fcm S\u00fcrecin Fonksiyonla\u015ft\u0131r\u0131lmas\u0131","2b19e6bb":"###############################################################\n# 6. RFM Segmentlerinin Olu\u015fturulmas\u0131 ve Analiz Edilmesi (Creating & Analysing RFM Segments)\n###############################################################\n\n![RFM](attachment:b03d7ee1-f7cc-4531-9734-e18fd9226a10.png)","c827699f":"###############################################################\n# 1. \u0130\u015f Problemi (Business Problem)\n###############################################################\n\nBir e-ticaret \u015firketi m\u00fc\u015fterilerini segmentlere ay\u0131r\u0131p bu segmentlere g\u00f6re pazarlama stratejileri belirlemek istiyor.\n\n### Veri Seti Hikayesi\n- https:\/\/archive.ics.uci.edu\/ml\/datasets\/Online+Retail+II\n- https:\/\/www.kaggle.com\/nathaniel\/uci-online-retail-ii-data-set\n\n        - Online Retail II isimli veri seti \u0130ngiltere merkezli online bir sat\u0131\u015f ma\u011fazas\u0131n\u0131n 01\/12\/2009 - 09\/12\/2011 tarihleri aras\u0131ndaki sat\u0131\u015flar\u0131n\u0131 i\u00e7eriyor.\n\n\n### De\u011fi\u015fkenler\n\n- InvoiceNo: Fatura numaras\u0131. Her i\u015fleme yani faturaya ait e\u015fsiz numara. C ile ba\u015fl\u0131yorsa iptal edilen i\u015flem.\n- StockCode: \u00dcr\u00fcn kodu. Her bir \u00fcr\u00fcn i\u00e7in e\u015fsiz numara.\n- Description: \u00dcr\u00fcn ismi\n- Quantity: \u00dcr\u00fcn adedi. Faturalardaki \u00fcr\u00fcnlerden ka\u00e7ar tane sat\u0131ld\u0131\u011f\u0131n\u0131 ifade etmektedir.\n- InvoiceDate: Fatura tarihi ve zaman\u0131.\n- UnitPrice: \u00dcr\u00fcn fiyat\u0131 (Sterlin cinsinden)\n- CustomerID: E\u015fsiz m\u00fc\u015fteri numaras\u0131\n- Country: \u00dclke ismi. M\u00fc\u015fterinin ya\u015fad\u0131\u011f\u0131 \u00fclke.","e3bff13a":"###############################################################\n# 5. RFM Skorlar\u0131n\u0131n Hesaplanmas\u0131 (Calculating RFM Scores)\n###############################################################\n","64d6630b":"###############################################################\n# 3. Veri Haz\u0131rlama (Data Preparation)\n###############################################################","7492e19e":"###############################################################\n# 7. T\u00fcm S\u00fcrecin Fonksiyonla\u015ft\u0131r\u0131lmas\u0131\n###############################################################","32d9c4ee":"###############################################################\n# 2. Veriyi Anlama (Data Understanding)\n###############################################################\n","b945fe5e":"###############################################################\n# 4. RFM Metriklerinin Hesaplanmas\u0131 (Calculating RFM Metrics)\n###############################################################"}}