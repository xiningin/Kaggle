{"cell_type":{"ef528331":"code","684a0866":"code","13e14153":"code","33631287":"code","32ba0b3d":"code","294bcce1":"code","f322ea00":"code","a158feb9":"code","60b63a01":"code","c56f0e50":"code","be80bf02":"code","a6843f25":"code","67f3331f":"code","a091c81d":"code","9a45d33d":"code","c4f84460":"code","75b39c10":"code","e0bfa17f":"code","3cc3df3b":"code","02b35598":"code","e5dc1ee6":"code","f1aad41d":"markdown"},"source":{"ef528331":"#upload the packages\n\nimport pandas as pd\nimport numpy as np\nimport scipy.stats as stats\nfrom scipy.stats import chi2\n\navocado = pd.read_csv('..\/input\/avocado-prices\/avocado.csv')\n\n\n\n","684a0866":"#look at the data\navocado.head()\n#Unnamed: 0 and Date are not imperative - we can drop them ","13e14153":"avocado = avocado.drop(['Unnamed: 0', 'Date'], axis=1)","33631287":"#the downstream variable is the price. Lets look at the distribution for price. \n\nimport matplotlib.pyplot as plt\n\navocado['AveragePrice'].hist()","32ba0b3d":"#there are organic and convential avocados - lets compare the distribution of the other variables \n\navocado.groupby('type').hist(figsize=(20,10))\nplt.show()","294bcce1":"#Check for NA values\navocado.isnull().sum()\n#there are no NA values","f322ea00":"#describe the int64 columns\navocado.describe()","a158feb9":"#results: organic corresponds to a higher price than conventional\n#do a LRT for the different regions","60b63a01":"#distribution of the regions\n\npd.value_counts(avocado['region']).plot(kind=\"bar\")\n#there is an even number of regions","c56f0e50":"#Q: Is there a difference between avocado prices? \n#to answer, we will perform a LRT \n#using mixed models are accounts for potential outliers\n\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\n\nmodel2 = smf.mixedlm(formula=\"AveragePrice ~ region\", groups = avocado['region'], data=avocado).fit()\n\nimport warnings\nwarnings.filterwarnings('ignore') #there is a convergence warning, we ignore this \n\nprint(model2.summary())\n\n\n","be80bf02":"#intercept only model - the null model \n\nmodel1 = smf.ols(formula=\"AveragePrice ~ 1\", groups = avocado['region'], data=avocado).fit()\n\nprint(model1.summary())","a6843f25":"#formulate the LRT \n\ndef lrt(null, alt):\n    return(2*(null-alt))\n\nLR=lrt(-9294,-7776.0681 ) \nprint(\"The p-value for the LRT between the region mixed model and the intercept-only model is \"  + str(stats.chi2.pdf(LR, 1)))\n\n\n\n#there is a statistical difference between the region and non-region models \n#suggesting that region does contribute to the price","67f3331f":"#next - is there a difference between the regions and covariates and region-only model? \n\n#change column names so all are one word\navocado = avocado.rename(columns={'Total Volume': 'Volume','Total Bags': 'TotalBags', 'Small Bags': 'SmallBags', 'Large Bags' : 'LargeBags', 'XLarge Bags' : 'XLargeBags'})\n\nmodel3 = smf.mixedlm(formula=\"AveragePrice ~ region + type + Volume + year + TotalBags + SmallBags + LargeBags + XLargeBags\", groups = avocado['region'], data=avocado).fit()\n\nprint(model3.summary())\n\n","a091c81d":"LR2=lrt( -7776.0681, -2105.8988 ) \nprint(\"The p-value for the LRT between the region mixed model and the region+covariates mixed model is \"  + str(stats.chi2.pdf(LR2, 1)))\n\n\n\n","9a45d33d":"#for a random forest, we need to create dummy variables for strings \n\norganic_conv = pd.get_dummies(avocado['type'])\nregion = pd.get_dummies(avocado['region'])\navocado = avocado.join(organic_conv)\navocado = avocado.join(region)\n#remove the string columns\navocado = avocado.drop('region', axis=1)\navocado = avocado.drop('type', axis=1)\nprint(avocado.shape)\nlist(avocado)","c4f84460":"#now we change the data type to array \ny = np.array(avocado['AveragePrice'])\nx = avocado.drop('AveragePrice', axis=1)\nx_names = list(x.columns)\n#print(x_names)\nx = np.array(x)","75b39c10":"#now we split the data into training and testing sets\n\nfrom sklearn.model_selection import train_test_split\ntrain_features, test_features, train_labels, test_labels = train_test_split(x, y, test_size = 0.25)\n\n#25% of the data is testing data, while we are training on 75%\n\nprint('Training Features Shape:', train_features.shape)\nprint('Training Labels Shape:', train_labels.shape)\nprint('Testing Features Shape:', test_features.shape)\nprint('Testing Labels Shape:', test_labels.shape)","e0bfa17f":"# Import the model we are using\nfrom sklearn.ensemble import RandomForestRegressor\n# Instantiate model with 1000 decision trees\nrf = RandomForestRegressor(n_estimators = 10, random_state = 42)\n# Train the model on training data\nrf.fit(train_features, train_labels);","3cc3df3b":"#predict on the test set\n\npredictions = rf.predict(test_features)\n\n\nerrors = abs(predictions - test_labels)\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(errors), 2) ,'$')\n","02b35598":"mape = 100 * (errors \/ test_labels)\n# Calculate and display accuracy\naccuracy = 100 - np.mean(mape)\nprint('Accuracy:', round(accuracy, 2), '%.')","e5dc1ee6":"#results - Prices for avocado have been predicted with 91.95% accuracy using random forest .","f1aad41d":"\ndef lrt(null, alt):\n    return(2*(null-alt))\n\nLR=lrt(-9294,-7614) \nstats.chi2.pdf(LR, 1)\n"}}