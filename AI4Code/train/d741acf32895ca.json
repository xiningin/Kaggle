{"cell_type":{"c9b3ad16":"code","56956045":"code","a0b9977e":"code","d6ed5357":"code","b627ebcf":"code","d10b03db":"code","25905080":"code","5e0a2411":"code","1f12a018":"code","9977cd01":"markdown","d16780fc":"markdown","c2f32648":"markdown","952e1b66":"markdown","a182b49a":"markdown","f829bf44":"markdown","1fd83134":"markdown","75eebd07":"markdown","073f57f2":"markdown","325f0985":"markdown","ef908d42":"markdown","b319cafe":"markdown","85d7f022":"markdown","e62d4961":"markdown","f6e11887":"markdown"},"source":{"c9b3ad16":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom PIL import Image\n\nfrom tensorflow.keras import models, layers\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score","56956045":"imgs_path = \"..\/input\/gtsrb-german-traffic-sign\/Train\"\ndata_list = []\nlabels_list = []\nclasses_list = 43\nfor i in range(classes_list):\n    i_path = os.path.join(imgs_path, str(i)) #0-42\n    for img in os.listdir(i_path):\n        im = Image.open(i_path +'\/'+ img)\n        im = im.resize((32,32))\n        im = np.array(im)\n        data_list.append(im)\n        labels_list.append(i)\ndata = np.array(data_list)\nlabels = np.array(labels_list)","a0b9977e":"plt.figure(figsize = (12,12))\n\nfor i in range(4) :\n    plt.subplot(1, 4, i+1)\n    plt.imshow(data[i], cmap='gray')\n\nplt.show()","d6ed5357":"def prep_dataset(X,y):\n    X_prep = X.astype('float32')\n    y_prep = to_categorical(np.array(y))\n    return (X_prep, y_prep)\n\nX, y = prep_dataset(data,labels)","b627ebcf":"X_train, X_val, Y_train, Y_val = train_test_split(X,y, test_size=0.2, shuffle=True,stratify=y)\nX_val, X_test, Y_val, Y_test = train_test_split(X_val,Y_val, test_size=0.5, shuffle=True)","d10b03db":"model = models.Sequential() #Sequential Model\n\n#ConvLayer(64 filters) + MaxPooling + BatchNormalization + Dropout\nmodel.add(layers.Conv2D(filters=32,kernel_size=3,activation='relu',padding='same',input_shape=X.shape[1:]))\nmodel.add(layers.MaxPool2D(strides=2))\nmodel.add(layers.BatchNormalization())\nmodel.add(layers.Dropout(0.3))\n\n#ConvLayer(128 filters) + MaxPooling + BatchNormalization + Dropout\nmodel.add(layers.Conv2D(filters=128,kernel_size=3,activation='relu',padding='same'))\nmodel.add(layers.MaxPool2D(strides=2))\nmodel.add(layers.BatchNormalization())\nmodel.add(layers.Dropout(0.3))\n\n#ConvLayer(512 filters) + Dropout + ConvLayer(512 filters) + MaxPooling + BatchNormalization\nmodel.add(layers.Conv2D(filters=512,kernel_size=3,activation='relu',padding='same'))\nmodel.add(layers.Dropout(0.3))\nmodel.add(layers.Conv2D(filters=512,kernel_size=3,activation='relu',padding='same'))\nmodel.add(layers.MaxPool2D(strides=2))\nmodel.add(layers.BatchNormalization())\n\n#Flatten\nmodel.add(layers.Flatten())\n\n#2 Dense layers with 4000 hidden units\nmodel.add(layers.Dense(4000,activation='relu'))\nmodel.add(layers.Dense(4000,activation='relu'))\n\n#Dense layer with 1000 hidden units\nmodel.add(layers.Dense(1000,activation='relu'))\n\n#Softmax layer for output\nmodel.add(layers.Dense(43,activation='softmax'))\n\nmodel.summary()","25905080":"model.compile(optimizer='adam',\n             loss='categorical_crossentropy',\n             metrics=['accuracy'])\n\nhistory= model.fit(X_train,Y_train,\n                 epochs=20,\n                 batch_size=64,\n                 validation_data=(X_val,Y_val))","5e0a2411":"fig, ax=plt.subplots(2,1,figsize=(12,10))\nfig.suptitle('Train evaluation')\n\nsns.lineplot(ax= ax[0],x=np.arange(0,len(history.history['accuracy'])),y=history.history['accuracy'])\nsns.lineplot(ax= ax[0],x=np.arange(0,len(history.history['accuracy'])),y=history.history['val_accuracy'])\n\nax[0].legend(['Train','Validation'])\nax[0].set_title('Accuracy')\n\nsns.lineplot(ax= ax[1],x=np.arange(0,len(history.history['loss'])),y=history.history['loss'])\nsns.lineplot(ax= ax[1],x=np.arange(0,len(history.history['loss'])),y=history.history['val_loss'])\n\nax[1].legend(['Train','Validation'])\nax[1].set_title('Loss')","1f12a018":"Y_test = np.argmax(Y_test,axis=1)\n\nY_pred= model.predict(X_test)\n\nY_pred = np.argmax(Y_pred, axis=1)\n\nprint('-Acuracy achieved: {:.2f}%\\n-Accuracy by model was: {:.2f}%\\n-Accuracy by validation was: {:.2f}%'.\n      format(accuracy_score(Y_test,Y_pred)*100,(history.history['accuracy'][-1])*100,(history.history['val_accuracy'][-1])*100))","9977cd01":"Preparing the Dataset","d16780fc":"Reading the Data","c2f32648":"Importing necessary libraries","952e1b66":"The data seems pretty realistic which is a very good sign","a182b49a":"Data Visualization","f829bf44":"**CNN Model**","1fd83134":"Visualisation of accuracy and loss","75eebd07":"<center><div><img src='attachment:d96168db-19d5-47c5-a81e-14f2b9fbc52f.png'><\/div><\/center>","073f57f2":"# <center> Traffic Sign Detection<\/center>","325f0985":"Traffic signs are important as they help the drivers to follow traffic rules and reduce the number of accidents on road. However, it is often very difficult for a driver to focus on the signs along with the other happenings on the road. In addition to this, traffic sign detection is also very important for the fast growing technology of automated driving and driverless cars.","ef908d42":"Prediction and Evaluation","b319cafe":"Splitting the dataset","85d7f022":"# Thank You","e62d4961":"Fitting the model","f6e11887":"In this notebook we use the [German Traffic Sign Recognition Benchmark](https:\/\/www.kaggle.com\/meowmeowmeowmeowmeow\/gtsrb-german-traffic-sign) Dataset which has lifelike images of traffic signs which a=have been classified into 43 classes. The train and test sets combined consist of more than 50000 images. We use a Convolutional Neural Network(CNN) for this purpose and achieve a **test set accuracy of more than 99%**."}}