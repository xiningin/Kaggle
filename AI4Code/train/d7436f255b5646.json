{"cell_type":{"c973103f":"code","a5c00401":"code","962d4343":"code","948a75b1":"code","8621fd55":"code","b783fba3":"code","2719911d":"code","616072ca":"code","22d59a5b":"code","6ad200df":"code","502b6901":"code","b2a6c27d":"code","c477ba5c":"code","8d8d940e":"code","924a85a9":"code","84e4b4b8":"markdown","6d690a8a":"markdown","17cf42d2":"markdown"},"source":{"c973103f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_absolute_error\nimport tensorflow as tf\nimport keras\n","a5c00401":"print('tf version:',tf.__version__,'\\n' ,'keras version:',keras.__version__,'\\n' ,'numpy version:',np.__version__)","962d4343":"# read the data file\nsolarpower = pd.read_csv(\"..\/input\/solarpanelspower\/PV_Elec_Gas3.csv\",header = None,skiprows=1 ,\n                    names = ['date','cum_power','Elec_kW', 'Gas_mxm'], sep=',',usecols = [0,1,2,3],\n                     parse_dates={'dt' : ['date']}, infer_datetime_format=True,index_col='dt')\nprint(solarpower.head(2))\n","948a75b1":"# make cum_power stationary\n\nsolarpower2 = solarpower.shift(periods=1, freq='D', axis=0)\nsolarpower['cum_power_shift'] = solarpower2.loc[:,'cum_power']\nsolarpower['day_power'] = solarpower['cum_power'].values - solarpower['cum_power_shift']\nsolarpower.iloc[0:1].day_power.value = 0.\nA = solarpower.dropna()\ndel A['cum_power'], A['cum_power_shift']\nsolarpower = A","8621fd55":"# funcion to reverse make stationary\ndef cumulate(series, start=0):\n    '''\n    start is the starting cumulative power, the series is the daily solar power\n    a list with daily cumulative power is the result\n    '''\n    cum = [start]\n    for i in range(len(series)):\n        sum_plus = cum[i] + series[i]\n        cum.append(sum_plus)\n    return cum","b783fba3":"solarpower.head(2), solarpower.tail(2)","2719911d":"# add a feature\nsolarpower['Gas_plus_Elek'] = solarpower.Gas_mxm + solarpower.Elec_kW\nsolarpower['Gas_plus_Elek'] = solarpower.Gas_mxm + solarpower.Elec_kW","616072ca":"X_train = solarpower[:'2019-10-28']\nX_valid = solarpower['2019-10-29':'2020-10-27'] # is 365 days\nX_train.shape, X_valid.shape","22d59a5b":"X_train.tail(2), X_valid.head(2)","6ad200df":"X_valid_start_cum_power = solarpower2['2019-10-28':'2019-10-28'].cum_power.values\nX_valid_start_cum_power # we need this to predict cumulative power on validation","502b6901":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b2a6c27d":"X = np.load('..\/input\/107e-windowed-data\/107E_X_train_windowed_1year.npy')\ny = np.load('..\/input\/107e-windowed-data\/107E_y_train_windowed_1year.npy')","c477ba5c":"X_train.columns","8d8d940e":"# vector output model:\n# model for univariate series input and prediction of  timestep vector\n# we have an input shape = (number of windows, window_in) \n#  and we have a window size of one year (365 days)\n# the output vector is of shape(number of window_out)\nwindow_in = 365\nwindow_out = 365\nn_features = X.shape[2]\nprint('n_features',n_features)\nfeatures = ['day_power', 'Elec_kW', 'Gas_mxm', 'Gas_plus_Elek']\n# define model\ndef multi_step_output_model(window_in, window_out, n_features):\n    model = tf.keras.Sequential()\n    model.add(tf.keras.layers.BatchNormalization())\n    model.add(tf.keras.layers.Conv1D(filters=32, kernel_size=2, activation='relu', \n                                 input_shape=(window_in, n_features)))\n    model.add(tf.keras.layers.MaxPooling1D(pool_size=2))\n    model.add(tf.keras.layers.Flatten())\n    model.add(tf.keras.layers.BatchNormalization())    \n    model.add(tf.keras.layers.Dense(50, activation='relu'))\n    model.add(tf.keras.layers.Dropout(0.2))\n    model.add(tf.keras.layers.Dense(window_out))\n    return model\n\nmodel = multi_step_output_model(window_in, window_out, window_out)\nepochs=10000 # 10000\nrange1 = 4 # 4\ny_hat_dict = {}\nfor steps in range(range1):\n    # compile the model:\n    model.compile(optimizer='adam', loss='mae')\n    # fit model\n    history = model.fit(X, y, epochs=epochs, verbose=0)\n    X_input = np.array(X_train[features][-365:].values)\n    X_input = X_input.reshape(1, window_in, n_features)\n    y_hat = model.predict(X_input, verbose=0)\n    name = '107E_y_hat_10000e' + str(steps)\n    y_hat_dict[name]=y_hat[0]\n    file = name + 'range' + str(range1) + '.npy'\n    np.save(file, y_hat[0])\n    print('step', steps, 'done')","924a85a9":"y_true = X_valid.day_power.values\n\nplt.plot(y_true, label='true_power')\nfor key, value in y_hat_dict.items()  :\n    plt.plot(value, label=key)\n    plt.legend()\n    first_r2_score = r2_score(y_true, value) # Best possible score is 1.0 \n    first_mae = mean_absolute_error(y_true, value)\n    print('r2_score %.5f' % first_r2_score)\n    print('mae %.2f' % first_mae)\nplt.legend()\nplt.show()\n\ny_true_cumulative = cumulate(y_true)\nplt.plot(y_true_cumulative, label='true_power')\nfor key, value in y_hat_dict.items()  :\n    y_predicted_cumulative = cumulate(value)\n    plt.plot(y_predicted_cumulative, label='predicted_power')\n    true_cumulative_power_after_one_year = int(y_true_cumulative[-1])\n    predicted_cumulative_power_after_one_year = int(y_predicted_cumulative[-1])\n    print('true cumulative power after one year:', true_cumulative_power_after_one_year)\n    print('predicted cumulative power after one year:', predicted_cumulative_power_after_one_year)\n    acc_one_year = 1- (true_cumulative_power_after_one_year - predicted_cumulative_power_after_one_year)\/true_cumulative_power_after_one_year\n    acc_one_year = acc_one_year * 100\n    print('accuracy after one year: %.2f' %  acc_one_year,'%')\n    print('r2 score %.2f ' % r2_score(y_true_cumulative, y_predicted_cumulative))\n    print('mae  %.2f' % mean_absolute_error(y_true_cumulative, y_predicted_cumulative))\n    \nplt.legend()\nplt.show()","84e4b4b8":"test 107 : test prediction solarpower with *multivariate multiple input multi-step output cnn* \n","6d690a8a":"These notebooks are based on the excellent articly by Jason Brownlee:\nHow to Develop Convolutional Neural Network Models for Time Series Forecasting.  \nhttps:\/\/machinelearningmastery.com\/how-to-develop-convolutional-neural-network-models-for-time-series-forecasting\/","17cf42d2":"This notbook uses :  \ntf version: 2.0.0-beta1 ;\n keras version: 2.2.4 ; \n numpy version: 1.16.4 "}}