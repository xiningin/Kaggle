{"cell_type":{"38ccd7d0":"code","bfe3fb34":"code","390619ff":"code","73352b6d":"code","31beaaa8":"code","e89b1d3c":"code","7bfd59d2":"code","a8ceda9a":"code","11455975":"code","de5caa17":"code","61345ea7":"code","59a4f5a6":"code","7fe595c8":"code","5241f6ca":"code","09b557f6":"code","f6d783d1":"code","0b26a6d6":"code","887a9b9e":"code","d3d07d90":"code","13aa2d2a":"code","6842653f":"code","441f5746":"code","42b8d762":"code","d3754693":"code","b416a08f":"code","b04a62f2":"code","c0936260":"code","736e2dbc":"code","f55cd8b1":"code","738cbb21":"code","4b8277b2":"code","8c3a765f":"code","6978a565":"code","6ef383ee":"code","0dc8c260":"code","9799406e":"code","910c2965":"code","91b3488e":"code","8e4bf3ca":"code","78a0fbab":"code","080f67d0":"code","ccce825a":"code","c7e9007c":"code","44b493b9":"code","4d2ed879":"code","de25277e":"markdown","81104b15":"markdown","835e56d0":"markdown","f48626f7":"markdown","29707c4b":"markdown","8fdcbf75":"markdown","da0fca59":"markdown","b7f99128":"markdown","050cbbba":"markdown","5ca76772":"markdown","b297da60":"markdown","96b0d692":"markdown","f26e211e":"markdown","ab3d7c66":"markdown","660fdf41":"markdown","e9c0b518":"markdown","c612c23d":"markdown"},"source":{"38ccd7d0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport time\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold, cross_val_score, RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import roc_auc_score, classification_report, roc_curve, confusion_matrix, auc, f1_score\nimport warnings\nwarnings.filterwarnings('ignore')","bfe3fb34":"train = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/test.csv')\nsample = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/sample_submission.csv')","390619ff":"train.head()","73352b6d":"test.head()","31beaaa8":"sample.head()","e89b1d3c":"print(train.info())\nprint('*'*50)\nprint(test.info())","7bfd59d2":"plt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nsns.distplot(train['Annual_Premium'], bins=50)\nplt.title('Annual Premium Distribution')\nplt.subplot(1,2,2)\nsns.distplot(np.log1p(train['Annual_Premium']), bins=50)\nplt.title('Log  Distribution of Annual Premium')","a8ceda9a":"train['Annual_Premium'].sort_values().tail(10)","11455975":"plt.figure(figsize=(10,5))\nsns.distplot(train['Vintage'], bins = 50, color='indigo')\nplt.title('Distribution of Vintage (Days of association between company and customers)')","de5caa17":"plt.figure(figsize=(10,6))\nsns.distplot(train['Age'], bins=50, color='green')\nplt.title('Customer Age distribution')","61345ea7":"fig = px.pie(train, names='Gender', title='Gender distribution', color = 'Gender', color_discrete_map={'Male':'darkgreen','Female':'yellow'})\nfig.show()","59a4f5a6":"fig = px.pie(train, names='Driving_License', title='Driving License distribution')\nfig.show()","7fe595c8":"fig = px.pie(train, names='Previously_Insured', title='Previously Insured distribution')\nfig.show()","5241f6ca":"fig = px.pie(train, names='Vehicle_Damage', title='Vehicle Damage distribution')\nfig.show()","09b557f6":"fig = px.pie(train, names='Vehicle_Age', title='Vehicle Age distribution')\nfig.show()","f6d783d1":"fig = px.pie(train, names='Region_Code', title='Region Code distribution')\nfig.show()","0b26a6d6":"train.head()","887a9b9e":"plt.figure(figsize=(8,8))\ncorr = train.drop(['Region_Code', 'Policy_Sales_Channel'], axis=1).corr()\nsns.heatmap(corr)","d3d07d90":"columns = ['Gender', 'Previously_Insured', 'Vehicle_Age', 'Vehicle_Damage']\nfor col in columns:\n    print(train[col].value_counts(), '\\n')","13aa2d2a":"# One hot encode Gender\ntrain = (train.merge(pd.get_dummies(train.Gender), left_index=True, right_index=True)).drop(['Gender'], axis=1)\ntest = (test.merge(pd.get_dummies(test.Gender), left_index=True, right_index=True)).drop(['Gender'], axis=1)\n\n# One hot encode Vehicle Age\ntrain = (train.merge(pd.get_dummies(train.Vehicle_Age), left_index=True, right_index=True)).drop(['Vehicle_Age'], axis=1)\ntest = (test.merge(pd.get_dummies(test.Vehicle_Age), left_index=True, right_index=True)).drop(['Vehicle_Age'], axis=1)\n\n# One hot encode Vehicle Damage\ntrain = (train.merge(pd.get_dummies(train.Vehicle_Damage, prefix = 'veh_damage'),  left_index=True, right_index=True)).drop(['Vehicle_Damage'], axis=1)\ntest = (test.merge(pd.get_dummies(test.Vehicle_Damage,  prefix = 'veh_damage'), left_index=True, right_index=True)).drop(['Vehicle_Damage'], axis=1)","6842653f":"train.head()","441f5746":"test.head()","42b8d762":"print(train.shape, test.shape)","d3754693":"train['Policy_Sales_Channel'] = pd.Categorical(train['Policy_Sales_Channel'].astype(int))\ntest['Policy_Sales_Channel'] = pd.Categorical(test['Policy_Sales_Channel'].astype(int))\ntrain['Region_Code'] = pd.Categorical(train['Region_Code'].astype(int))\ntest['Region_Code'] = pd.Categorical(test['Region_Code'].astype(int))","b416a08f":"# One hot encode Region Code\ntrain = (train.merge(pd.get_dummies(train.Region_Code, prefix = 'reg_code'),  \\\n                     left_index=True, right_index=True)).drop(['Region_Code'], axis=1)\ntest = (test.merge(pd.get_dummies(test.Region_Code,  prefix = 'reg_code'), \\\n                   left_index=True, right_index=True)).drop(['Region_Code'], axis=1)","b04a62f2":"print(train.shape, test.shape)","c0936260":"train.head()","736e2dbc":"np.random.seed(14321)\n\nX_train, X_valid, X_test = np.split(train.sample(frac=1), [int(.7*len(train)), int(.85*len(train))])\n\nprint(f' Data shape: \\n X_train shape: {X_train.shape} \\n X_valid shape: {X_valid.shape} \\n X_test shape: {X_test.shape}')","f55cd8b1":"y_train = X_train['Response']\nX_train.drop(['id','Response'], axis=1, inplace=True)\ny_valid = X_valid['Response']\nX_valid.drop(['id','Response'], axis=1, inplace=True)\ny_test = X_test['Response']\nX_test.drop(['id','Response'], axis=1, inplace=True)","738cbb21":"print(f' X_train shape: {X_train.shape} \\n y_train shape: {y_train.shape}')","4b8277b2":"scaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_valid = scaler.transform(X_valid)\nX_test = scaler.transform(X_test)","8c3a765f":"lgb = LGBMClassifier()\nlgb.fit(X_train, y_train)\npred_y_train = lgb.predict_proba(X_train)[:, 1]\npred_y_valid = lgb.predict_proba(X_valid)[:, 1]\nprint(f'Train score: {roc_auc_score(y_train, pred_y_train):.4f}')\nprint(f'Val score: {roc_auc_score(y_valid, pred_y_valid):.4f}')","6978a565":"fpr, tpr, _ = roc_curve(y_valid, pred_y_valid)\nplt.figure(figsize=(8,5))\nsns.set('talk', 'whitegrid', 'dark', font_scale=1.2,rc={\"lines.linewidth\": 2, 'grid.linestyle': '--'})\nplt.plot(fpr, tpr)\nplt.plot((0,1), ls = 'dashed', color = 'red', label='ROC Curve (AUC: %.4f)' % auc(fpr, tpr))\nplt.title('LGBMClassifier ROC')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend()","6ef383ee":"rfc = RandomForestClassifier(max_depth = 30, min_samples_split = 100, min_samples_leaf = 50)\nrfc.fit(X_train, y_train)\npred_y_train = rfc.predict_proba(X_train)[:, 1]\npred_y_valid = rfc.predict_proba(X_valid)[:, 1]\nprint(f'Train score: {roc_auc_score(y_train, pred_y_train):.4f}')\nprint(f'Val score: {roc_auc_score(y_valid, pred_y_valid):.4f}')","0dc8c260":"fpr, tpr, _ = roc_curve(y_valid, pred_y_valid)\nplt.figure(figsize=(8,5))\nsns.set('talk', 'whitegrid', 'dark', font_scale=1.2,rc={\"lines.linewidth\": 2, 'grid.linestyle': '--'})\nplt.plot(fpr, tpr)\nplt.plot((0,1), ls = 'dashed', color = 'red', label='ROC Curve (AUC: %.4f)' % auc(fpr, tpr))\nplt.title('RandomForestClassifier ROC')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend()","9799406e":"cbc = CatBoostClassifier(iterations=200, learning_rate=0.1, eval_metric = 'AUC', verbose=0)\ncbc.fit(X_train, y_train)\npred_y_train = cbc.predict_proba(X_train)[:, 1]\npred_y_valid = cbc.predict_proba(X_valid)[:, 1]\nprint(f'Train score: {roc_auc_score(y_train, pred_y_train):.4f}')\nprint(f'Val score: {roc_auc_score(y_valid, pred_y_valid):.4f}')","910c2965":"fpr, tpr, _ = roc_curve(y_valid, pred_y_valid)\nplt.figure(figsize=(8,5))\nsns.set('talk', 'whitegrid', 'dark', font_scale=1.2,rc={\"lines.linewidth\": 2, 'grid.linestyle': '--'})\nplt.plot(fpr, tpr)\nplt.plot((0,1), ls = 'dashed', color = 'red', label='ROC Curve (AUC: %.4f)' % auc(fpr, tpr))\nplt.title('CatBoostClassifier ROC')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend()","91b3488e":"print(f'LightGBM score: {roc_auc_score(y_test, lgb.predict_proba(X_test)[:,1]):.4f}')\nprint(f'Random Forest score: {roc_auc_score(y_test, rfc.predict_proba(X_test)[:,1]):.4f}')\nprint(f'Cat Boost score: {roc_auc_score(y_test, cbc.predict_proba(X_test)[:,1]):.4f}')","8e4bf3ca":"params = dict(boosting = ['dart'], learning_rate = [0.1], num_iterations = [100])\nrs_lgb = RandomizedSearchCV(lgb, param_distributions = params, n_iter = 10, cv = 4, verbose = 0)\nrs_lgb.fit(X_train, y_train)\npred_y_train = rs_lgb.predict_proba(X_train)[:, 1]\npred_y_valid = rs_lgb.predict_proba(X_valid)[:, 1]\nprint(f'Train score: {roc_auc_score(y_train, pred_y_train):.4f}')\nprint(f'Val score: {roc_auc_score(y_valid, pred_y_valid):.4f}')","78a0fbab":"rs_lgb.best_params_","080f67d0":"params = dict(depth = [8, 12], learning_rate = [0.1, 0.01, 0.2], iterations = [100,200])\nrs_cbc = RandomizedSearchCV(cbc, param_distributions = params, n_iter = 10, cv = 4, verbose = 0)\nrs_cbc.fit(X_train, y_train)\npred_y_train = rs_cbc.predict_proba(X_train)[:, 1]\npred_y_valid = rs_cbc.predict_proba(X_valid)[:, 1]\nprint(f'Train score: {roc_auc_score(y_train, pred_y_train):.4f}')\nprint(f'Val score: {roc_auc_score(y_valid, pred_y_valid):.4f}')","ccce825a":"rs_cbc.best_params_","c7e9007c":"test_ids = test['id']\ntest.drop('id', axis=1, inplace=True)\ntest = scaler.transform(test)","44b493b9":"train_y = train['Response']\ntrain_x = train.drop(['id', 'Response'], axis=1)\ntrain_x = scaler.transform(train_x)","4d2ed879":"cbc.fit(train_x, train_y)\npred_train = cbc.predict_proba(train_x)[:, 1]\npred_test = cbc.predict_proba(test)[:, 1]\nprint(f'Train AUC: {roc_auc_score(train_y, pred_train):.4f}')\nsub = pd.DataFrame({'id': test_ids, 'Response' : pred_test})","de25277e":"**Exploratory Data Analysis**","81104b15":"# **Problem Overview**\n\nAn insurance company that has provided Health Insurance to its customers now wants to offer Vehicle insurance also. We are required to develop a model that helps predict whether the policyholders (customers) from past year will also be interested in purchasing Vehicle Insurance provided by the company.\n\nThe following data is given for building the model:\n* id - Unique cust id\n* Gender\n* Cust age\n* Has Driving License - Yes or No\n* Region Code\n* Previously insured - Yes or No\n* Vehicle Age\n* Vehicle Damage - Yes or No\n* Annual Premium\n* Policy Sales Channel\n* Vintage - Days of association between company and customer\n\nTarget variable:\n* Response - Intersted or Not interested\n\nBuilding a model to predict whether a customer would be interested in Vehicle Insurance is extremely helpful for the company because it can then accordingly plan its communication strategy to reach out to those customers and optimise its business model and revenue.\n\n**In this Notebook, I will**\n* Perform EDA\n* Do some data cleaning\n* Prepare features for feeding to the model\n* Evaluate 3 classification algorithms with default parameters first\n* Perform Hyperparameter tuning using RandomizedSearchCV\n* Generate predictions using the best model\n* Make submission","835e56d0":"# Results on Test set","f48626f7":"Most customers are paying annual premium less than Rs.100000. However there are some paying as high as Rs.500000 and above","29707c4b":"Selecting CatBoost Classifier with default params as it has shown the best performance.","8fdcbf75":"# RandomForestClassifier","da0fca59":"**Data Cleaning**","b7f99128":"![Car-Insurance.jpg](attachment:Car-Insurance.jpg)","050cbbba":"print(train.info())\nprint('='*50)\nprint(test.info())","5ca76772":"# Split training data into train \/ valid \/ test sets","b297da60":"Almost all customers have Driving License. This is not a very useful feature to learn from. ","96b0d692":"# LightGBM Classifier","f26e211e":"Interesting to see that even though 99.8% has DL, only 45.8% has Vehicle insurance. ","ab3d7c66":"# Submission","660fdf41":"Significant population of customers are from Region Code 28 (~28%). Approx. 50% of total customers are from only 5 regions.","e9c0b518":"# Cat Boost Classifier","c612c23d":"Half the customers have had a damage to their vehicle in the past. The case for vehicle insurance is strong!"}}