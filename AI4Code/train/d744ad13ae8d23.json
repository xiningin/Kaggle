{"cell_type":{"45699fbc":"code","4e812a38":"code","09f820aa":"code","44c03a2b":"code","9e01a409":"code","1a1e7d8a":"code","da52d1ec":"code","22016642":"code","3bdfdf0a":"code","c5e6e444":"code","b8849a8d":"code","2ce4db75":"code","2939fc1e":"code","eb84bd2c":"code","fb0d540b":"code","9302c810":"code","f0851661":"code","f62af737":"code","fd330ee9":"code","a0d94ec2":"code","3423c590":"code","15b92b5b":"code","a8ba7038":"code","9ef3b066":"code","691742ee":"markdown","a5052959":"markdown","24ef7b3d":"markdown","aa9fd50e":"markdown"},"source":{"45699fbc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.base import TransformerMixin\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler, OrdinalEncoder, MinMaxScaler","4e812a38":"seed=2021\nnp.random.seed(seed)\nsns.set_style(\"darkgrid\")","09f820aa":"data = pd.read_csv(\"\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")","44c03a2b":"data.dropna(inplace = True)","9e01a409":"train_data, test_data = train_test_split(data,test_size=0.2, random_state = seed)","1a1e7d8a":"train_data.info()","da52d1ec":"train_data.describe()","22016642":"train_data[['age','avg_glucose_level','bmi']].hist(bins=50, figsize=(20,15))\nplt.show()","3bdfdf0a":"train_data = train_data[train_data[\"bmi\"] < train_data[\"bmi\"].quantile(0.97)]\ntrain_data = train_data[train_data[\"bmi\"] > train_data[\"bmi\"].quantile(0.01)]\n\ntrain_data = train_data[train_data[\"avg_glucose_level\"] < train_data[\"avg_glucose_level\"].quantile(0.99)]","c5e6e444":"train_data[['bmi','avg_glucose_level']].hist(bins=35, figsize=(20,10))\nplt.show()","b8849a8d":"b1 = sns.catplot(x=\"smoking_status\", kind=\"count\", palette=\"ch:.25\", data=train_data, aspect = 3, order = train_data['smoking_status'].value_counts().index)\nplt.subplots_adjust(top=0.9)\nb1.fig.suptitle('Smoking distibution', fontsize = 17)","2ce4db75":"b1 = sns.catplot(x=\"work_type\", kind=\"count\", palette=\"ch:.25\", data=train_data, aspect = 3, order = train_data['work_type'].value_counts().index)\nplt.subplots_adjust(top=0.9)\nb1.fig.suptitle('Working distibution', fontsize = 17)","2939fc1e":"fig, ax = plt.subplots(figsize=(9,7))\nb5 = sns.heatmap(train_data.corr(), ax=ax)\nplt.subplots_adjust(top=0.9)\nb5.set_title('CORRELATION BETWEEN INPUTS', fontsize = 17)","eb84bd2c":"numerical_pipeline = Pipeline(steps=[\n    ('scaler', MinMaxScaler())\n])","fb0d540b":"binary_pipeline = OrdinalEncoder()","9302c810":"categorical_pipeline = OneHotEncoder(handle_unknown='ignore')","f0851661":"#Check for possible values in each columns \nprint(train_data.apply(lambda col: col.unique()))","f62af737":"numerical_features = [\"age\", \"avg_glucose_level\", \"bmi\"]\nbinary_features = [\"hypertension\", \"heart_disease\", \"ever_married\", \"Residence_type\"]\ncategorical_features = [\"gender\", \"work_type\", \"smoking_status\"]","fd330ee9":"#For adding own feature, it didn't work well \nfrom sklearn.preprocessing import FunctionTransformer\ndef add_extra_features(X):\n    diabetes_feature = [[1,0,0] if x > 200 else [0,1,0] if x < 140 else [0,0,1] for x in X[\"avg_glucose_level\"]]\n    return np.c_[diabetes_feature]\n","a0d94ec2":"preprocess_pipeline = ColumnTransformer([\n    #('attribs_adder', FunctionTransformer(add_extra_features, validate=False), train_data.columns),\n    (\"num\", numerical_pipeline, numerical_features),\n    (\"bin\", binary_pipeline, binary_features),\n    (\"cat\", categorical_pipeline, categorical_features),\n])","3423c590":"X = preprocess_pipeline.fit_transform(train_data.drop([\"stroke\"],axis=1))\ny = train_data[\"stroke\"]","15b92b5b":"X_test = preprocess_pipeline.transform(test_data.drop([\"stroke\"],axis=1))\ny_test = test_data[\"stroke\"]","a8ba7038":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix","9ef3b066":"rf = RandomForestClassifier(max_depth=8,criterion='entropy',class_weight='balanced_subsample',random_state=seed)\nrf.fit(X, y)\npredicted_y = rf.predict(X_test)\nprint(confusion_matrix(predicted_y, y_test))\nprint(classification_report(predicted_y, y_test))","691742ee":"# Data preprocess","a5052959":"Lets delete some outliers","24ef7b3d":"# **Random Forest**","aa9fd50e":"# **Data explore**"}}