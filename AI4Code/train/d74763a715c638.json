{"cell_type":{"4cce85d0":"code","ad51fa9c":"code","163663d3":"code","8764a765":"code","8eec752a":"code","34e7ab9f":"code","e5354699":"code","199b7ccf":"code","3580fd88":"code","13474c6e":"code","c8ca2781":"code","53074f07":"code","0f9311b2":"code","f523f360":"code","163eb5f2":"code","9a1133f6":"markdown"},"source":{"4cce85d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ad51fa9c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelBinarizer\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.models import Model\nfrom keras.layers import Dropout\nfrom keras.layers import Flatten\nfrom keras.callbacks import EarlyStopping\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.utils import np_utils\n\n#from keras import backend as K\n#K.tensorflow_backend._get_available_gpus()","163663d3":"data = pd.read_csv(\"\/kaggle\/input\/devanagari-character-set\/data.csv\")","8764a765":"data.head()","8eec752a":"X = data.iloc[:,:-1]\nYd = data.iloc[:,-1]\n\nnum_pixels = X.shape[1]\nnum_classes = 46\nimg_width = 32\nimg_height = 32\nimg_depth = 1\n\nX_images = X.values.reshape(X.shape[0], img_width, img_height)\n\nfor i in range(1, 9):\n    plt.subplot(240+i)\n    plt.imshow(X_images[i], cmap=plt.get_cmap('gray'))\nplt.show()","34e7ab9f":"# output in binary\/one-hot encoded format\nbinencoder = LabelBinarizer()\nY = binencoder.fit_transform(Yd)\n# data normalization\nX \/= 255\n\nseed = 2\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state=seed)","e5354699":"# Training on Simple Neural Network\ndef nn_model():\n    model = Sequential()\n    model.add(Dense(num_pixels, input_dim=num_pixels, kernel_initializer='normal', activation='relu'))\n    model.add(Dense(num_classes, kernel_initializer='normal', activation='softmax'))\n    # compile model\n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model","199b7ccf":"nn = nn_model()\n\n# each epoch was taking 10-12s to train on CPU\n# each epoch was taking 4-6s to train on GPU\n\nhistory_nn = nn.fit(X_train.values, y_train, validation_split=0.20, epochs=10, batch_size=400, verbose=2)","3580fd88":"scores_nn = nn.evaluate(X_test.values, y_test, verbose=0)\nprint('Accuracy: %.2f%%' % (scores_nn[1]*100))","13474c6e":"X_train, X_test, y_train, y_test = train_test_split(X_images, Y, test_size=0.20, random_state=seed)\n\nX_train = X_train\/255\nX_test = X_test\/255\n\nX_train = X_train.reshape(X_train.shape[0], img_width, img_height, img_depth).astype('float32')\nX_test = X_test.reshape(X_test.shape[0], img_width, img_height, img_depth).astype('float32')","c8ca2781":"# Training on Convolutional Neural Network\ndef cnn_model():\n    model = Sequential()\n    model.add(Conv2D(32, (3, 3), input_shape=(img_width, img_height, img_depth), activation='relu', name='conv_1'))\n    model.add(MaxPooling2D(pool_size=(2,2), name='pool_1'))\n    model.add(Conv2D(64, (3, 3), activation='relu', name='conv_2'))\n    model.add(MaxPooling2D(pool_size=(2,2), name='pool_2'))\n    model.add(Dropout(0.2))\n    model.add(Flatten())\n    model.add(Dense(128, activation='relu', name='dense_1'))\n    model.add(Dense(50, activation='relu', name='dense_2'))\n    model.add(Dense(num_classes, activation='softmax', name='output_layer'))\n    \n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model","53074f07":"cnn = cnn_model()\n\nearly_stopping_monitor = (EarlyStopping(patience=2))\n\n# each epoch was taking 40-42s to train on CPU\n# each epoch was taking 2-6s to train on GPU\n\nhistory_cnn = cnn.fit(X_train, y_train, validation_split=0.2, epochs=10, batch_size=200, callbacks=[early_stopping_monitor], verbose=2)","0f9311b2":"scores_cnn = cnn.evaluate(X_test, y_test, verbose=0)\nprint('Accuracy: %.2f%%' % (scores_cnn[1]*100))","f523f360":"# Summarize history for accuracy\nplt.plot(history_nn.history['accuracy'])\nplt.plot(history_nn.history['val_accuracy'])\nplt.plot(history_cnn.history['accuracy'])\nplt.plot(history_cnn.history['val_accuracy'])\n\nplt.title('Model Accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epochs')\nplt.legend(['train_nn', 'validation_nn', 'train_cnn', 'validation_cnn'], loc='lower right')\nplt.show()","163eb5f2":"# Summarize history for loss\nplt.plot(history_nn.history['loss'])\nplt.plot(history_nn.history['val_loss'])\nplt.plot(history_cnn.history['loss'])\nplt.plot(history_cnn.history['val_loss'])\n\nplt.title('Model Validation')\nplt.ylabel('loss')\nplt.xlabel('epochs')\nplt.legend(['train_nn', 'validation_nn', 'train_cnn', 'validation_cnn'], loc='best')\nplt.show()","9a1133f6":"**Importing Libraries**"}}