{"cell_type":{"05953889":"code","02417ba6":"code","30f01bb1":"code","a37d08d6":"code","d5e82729":"code","1860849b":"code","b9e4edae":"code","34126a51":"code","8cf0aea6":"code","de98865f":"code","36896174":"code","51a5f4bb":"code","cbea7128":"code","60f36f5e":"code","c83fe3bc":"code","cd2a7767":"markdown","d290602b":"markdown","e141901a":"markdown","94956f84":"markdown","7926a6fe":"markdown","9e4d7655":"markdown","39b3625d":"markdown","ea4cd60a":"markdown"},"source":{"05953889":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","02417ba6":"# df\u306e\u5404\u5217\u306e\u578b\u3092\u8a2d\u5b9a\u3057\u30e1\u30e2\u30ea\u8efd\u6e1b\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","30f01bb1":"train = pd.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv')\ntrain.head()","a37d08d6":"train = reduce_mem_usage(train)\ntrain.info()","d5e82729":"# df\u3092pickle\u3067\u4fdd\u5b58\ntrain.to_pickle('\/kaggle\/working\/JSMP_train.pickle')","1860849b":"train = pd.read_pickle('\/kaggle\/working\/JSMP_train.pickle')","b9e4edae":"# \u30c7\u30fc\u30bf\u306e\u5206\u5e03\ntrain['resp'].hist(bins=30)","34126a51":"import matplotlib.pyplot as plt\n%matplotlib inline\n\n# \u30ea\u30bf\u30fc\u30f3\u306e\u7d2f\u7a4d\u548c\ntrain['resp'].cumsum().plot(label='resp')\ntrain['resp_1'].cumsum().plot(label='resp_1')\ntrain['resp_2'].cumsum().plot(label='resp_2')\ntrain['resp_3'].cumsum().plot(label='resp_3')\ntrain['resp_4'].cumsum().plot(label='resp_4')\nplt.legend()","8cf0aea6":"# \u5bfe\u6570\u5909\u63db\nnp.log(train['resp']+1).hist(bins=30, color='lightblue', label='log(y)')\ntrain['resp'].hist(bins=30, histtype='step', color='red', label='y')\nplt.legend()","de98865f":"train['resp'].apply(lambda x:1 if x>0 else -1).value_counts()","36896174":"plt.pie(train['resp'].apply(lambda x:1 if x>0 else -1).value_counts(),\n        labels=['plus', 'minus'], startangle=90, autopct='%1.1f%%')","51a5f4bb":"train['resp'].describe()","cbea7128":"np.log(train['resp']+1).describe()","60f36f5e":"train['resp'].cumsum().plot(label='resp')\ntrain['resp'].rolling(window=50).mean().cumsum().plot(label='MA_50')\ntrain['resp'].rolling(window=50000).mean().cumsum().plot(label='MA_50000')\ntrain['resp'].rolling(window=100000).mean().cumsum().plot(label='MA_100000')\nplt.legend()","c83fe3bc":"plt.figure(figsize=(12, 4))\nplt.subplot(1, 3, 1)\ntrain['resp'].rolling(window=50).mean().hist(bins=30)\nplt.title('window=50')\n\nplt.subplot(1, 3, 2)\ntrain['resp'].rolling(window=50000).mean().hist(bins=30)\nplt.title('window=50000')\n\nplt.subplot(1, 3, 3)\ntrain['resp'].rolling(window=100000).mean().hist(bins=30)\nplt.title('window=100000')","cd2a7767":"\u82e5\u5e72\u3060\u304c\u30d7\u30e9\u30b9\u306e\u30c7\u30fc\u30bf\u306e\u65b9\u304c\u591a\u304b\u3063\u305f\u3002\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u7528\u3044\u308b\u5834\u5408\u306f\u3001\u307b\u307c1:1\u306a\u306e\u3067\u554f\u984c\u306f\u306a\u3055\u305d\u3046\u3002","d290602b":"\u30a6\u30a3\u30f3\u30c9\u30a6\u5e45\u3068\u3057\u3066\u300150, 50000, 100000\u3092\u6307\u5b9a\u3057\u3066\u307f\u305f\u3002\u7d50\u679c\u3068\u3057\u3066\u306f\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u5e45\u306b\u3088\u308b\u5dee\u306f\u307b\u3068\u3093\u3069\u898b\u3089\u308c\u306a\u304b\u3063\u305f\u3002\u307e\u305f\u3001\u79fb\u52d5\u5e73\u5747\u306e\u7d2f\u7a4d\u548c\u306f\u53f3\u4e0a\u304c\u308a\u3068\u306a\u3063\u3066\u3044\u305f\u300250,000~150,000\u306e\u671f\u9593\u306eresp\u3067\u306f\u3001\u6a2a\u3070\u3044\u306e\u50be\u5411\u304c\u898b\u3089\u308c\u305f\u304c\u3001\u79fb\u52d5\u5e73\u5747\u306f\u4e0a\u6607\u50be\u5411\u306b\u3042\u308b\u3002","e141901a":"\u5de6\u53f3\u306f\u307b\u307c\u3067\u5bfe\u79f0\u3001\uff10\u8fd1\u8fba\u306b\u30c7\u30fc\u30bf\u304c\u96c6\u4e2d\u3057\u3066\u3044\u308b\u3002","94956f84":"\u5bfe\u6570\u5909\u63db\u524d\u306b\u6bd4\u3079\u308b\u3068\u3001\u30de\u30a4\u30ca\u30b9\u306e\u3070\u3089\u3064\u304d\u304c\u5e83\u304c\u3063\u305f\u3002\u307e\u305f\u3001\uff10\u8fd1\u8fba\u306e\u30c7\u30fc\u30bf\u304c\u5897\u3048\u3066\u3044\u308b\u3002\u5bfe\u6570\u5909\u63db\u306b\u3088\u308a\u5927\u3057\u3066\u5909\u5316\u306f\u898b\u3089\u308c\u306a\u304b\u3063\u305f\u304c\u3001\u76ee\u7684\u5909\u6570\u306b\u7528\u3044\u3066\u307f\u308b\u306e\u3082\u826f\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u305f\u3060\u3057\u3001\u305d\u306e\u5834\u5408\u306f\u3001\u4e88\u6e2c\u5024\u3092\u9006\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002","7926a6fe":"\u5bfe\u6570\u5909\u63db\u306b\u3088\u308b\u52b9\u679c\u306f\u3042\u307e\u308a\u306a\u3055\u305d\u3046\u3002","9e4d7655":"\u6700\u521d\u306e50,000\u500b\u306e\u30c7\u30fc\u30bf\u3067\u306f\u7740\u3005\u3068\u30ea\u30bf\u30fc\u30f3\u3092\u7a4d\u307f\u4e0a\u3052\u3066\u304a\u308a\u3001\u305d\u306e\u5f8c\u306f\u3057\u3070\u3089\u304f\u6a2a\u3070\u3044\u304c\u7d9a\u304d\u3001\u6700\u5f8c\u306e50,000\u500b\u3067\u30ea\u30bf\u30fc\u30f3\u304c\u7a4d\u307f\u3042\u304c\u3063\u3066\u3044\u308b\u69d8\u5b50\u304c\u898b\u3089\u308c\u308b\u3002\u6700\u521d\u306e\u4e0a\u6607\u304c\u7d99\u7d9a\u3057\u3066\u3044\u308b\u671f\u9593\u306f\u3001\u4e0a\u6607\u30c8\u30ec\u30f3\u30c9\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\u6700\u521d\u306e\u671f\u9593\u306e\u7279\u5fb4\u3092\u3046\u307e\u304f\u62bd\u51fa\u3057\u3066\u3042\u3052\u308b\u3053\u3068\u304c\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u826f\u3044\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3059\u308b\u30ab\u30ae\u3068\u306a\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002","39b3625d":"### \u8aac\u660e\u5909\u6570\u306b\u3064\u3044\u3066","ea4cd60a":"\u4e2d\u5fc3\u6975\u9650\u5b9a\u7406\u306b\u57fa\u3065\u304f\u3068\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u306f\u305a\u3067\u3042\u308b\u3002window=50\u306f\u6b63\u898f\u5206\u5e03\u306b\u8fd1\u3044\u5f62\u3092\u3057\u3066\u3044\u308b\u304c\u3001\u4ed6\u306e\u5206\u5e03\u306b\u95a2\u3057\u3066\u306f\u8907\u6570\u306e\u5206\u5e03\u304b\u3089\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u3002\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5e45\u306f\u95a2\u4fc2\u306a\u3044\u3088\u3046\u306b\u3082\u601d\u3048\u305f\u304c\u3001\u3061\u3083\u3093\u3068\u9078\u3076\u5fc5\u8981\u304c\u3042\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002"}}