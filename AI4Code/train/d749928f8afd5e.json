{"cell_type":{"79ca0bae":"code","c37f0387":"code","afa2349e":"code","370e7dd3":"code","c89b46c4":"code","13cb3604":"code","c224e586":"code","4326fbab":"code","5a3a814a":"code","9f3f5844":"code","65a31148":"code","d418ee44":"code","36fab696":"code","b541c263":"code","b83d61be":"code","d50423db":"code","d63debba":"code","5a70817a":"code","876c5cfe":"code","f9b0d017":"code","22a083f0":"code","2d5d6d67":"code","0971351f":"code","0301c414":"code","37985b1d":"code","18642ee7":"code","7d4a09ce":"code","99bb7c0a":"code","f01d35d1":"code","42ce4360":"code","24b63b0a":"code","8a9f0969":"code","5c4549a2":"code","45d2525d":"code","cd1c6f1c":"code","734a73b3":"code","a9bb9ec3":"code","4ecf2aea":"code","ac01bf39":"code","127f481e":"code","48373621":"code","d0cb15bd":"code","c0459c7a":"code","ad671d76":"code","a13004a3":"code","6b60e524":"code","7669de29":"code","297812fb":"code","7c024702":"code","c5943626":"code","7a94914b":"code","2ea329b4":"code","3412ecba":"code","4e9c35a6":"code","228be5f2":"code","38b30a28":"code","84b5a2c1":"code","0f78a88f":"code","a7e626c8":"code","ad4a9511":"code","b9528645":"code","3ccc9224":"code","62bb50b3":"code","b085acc5":"code","bec7b821":"code","c975d8ee":"markdown","b2d11bb4":"markdown","23c80c19":"markdown","3287714c":"markdown","f58f9253":"markdown","00949231":"markdown","2d98a015":"markdown","e5535e01":"markdown","331520df":"markdown","e7bc1be0":"markdown","a4163919":"markdown","2d460210":"markdown","89626be3":"markdown","29555cee":"markdown","fecbd9fd":"markdown"},"source":{"79ca0bae":"# This Python 3 environment comes with many helpful analytics libraries installed (Hidden Input\/Output)\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c37f0387":"import pandas as pd\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport seaborn as sns\r\n%matplotlib inline","afa2349e":"RAW_df_day = pd.read_csv('..\/input\/rental-bike-sharing\/day.csv')","370e7dd3":"# two years' data\r\nRAW_df_day.head(10)","c89b46c4":"# the original readme file says the temperature is normalized by the max 41 Celsius, but this value is not found\r\n# in this dataset (1.0), so it probably is a subset\r\nRAW_df_day.loc[RAW_df_day['temp'] == RAW_df_day['temp'].max()]","13cb3604":"# dataframe shape\r\nRAW_df_day.shape","c224e586":"# data info\r\nRAW_df_day.info()","4326fbab":"# because there is no phisycal unit associated to the windspeed it will be dropped\r\n# althouth it can be infered, it won't be trusted\r\ndf_day = RAW_df_day.drop(columns=\"windspeed\")\r\ndf_day.head()","5a3a814a":"# NULL or NA\r\ndf_day.isna().sum()","9f3f5844":"# check unique values\r\n\" \\\r\nseasons: {}, \\\r\nyears: {}, \\\r\nmonths: {}, \\\r\nholidays: {}, \\\r\nweekdays: {}, \\\r\nworkingdays: {}, \\\r\nweathersits: {}\" \\\r\n.format(\r\ndf_day['season'].nunique(),\r\ndf_day['yr'].nunique(),\r\ndf_day['mnth'].nunique(),\r\ndf_day['holiday'].nunique(),\r\ndf_day['weekday'].nunique(),\r\ndf_day['workingday'].nunique(),\r\ndf_day['weathersit'].nunique()\r\n)","65a31148":"# unnormalize temp and atem data\r\ndf_day[\"temp\"] = (df_day[\"temp\"] * 41).round(2)\r\ndf_day[\"atemp\"] = (df_day[\"atemp\"] * 50).round(2)\r\ndf_day.head()","d418ee44":"# also round 'hum' to 2 decimals\r\ndf_day[\"hum\"] = df_day[\"hum\"].round(2)\r\ndf_day.head()","36fab696":"# get a sample\r\ndf_day.sample(8)","b541c263":"# temp and hum are max values\r\ndf_day.groupby(['yr','mnth'])['temp','cnt'].describe()","b83d61be":"df_day.groupby(['yr','mnth'])['hum','cnt'].describe()","d50423db":"df_day.groupby('season')['cnt'].sum()","d63debba":"# heatmap; values closer to 1.0 means higher correlation between two parameters\nplt.figure(figsize=(14,10))\nsns.heatmap(df_day.corr(), annot=True, fmt='.2f')\nplt.show()","5a70817a":"plt.figure(figsize=(20,15))\r\ndf_day.plot.bar(y='registered', x='mnth')","876c5cfe":"plt.figure(figsize=(20,15))\r\ndf_day.plot.bar(y='casual', x='mnth')","f9b0d017":"df_day.groupby('yr')['registered'].sum()","22a083f0":"df_day.groupby('yr')['casual'].sum()","2d5d6d67":"# categorical columns\r\ncat_col = [\"season\", \"yr\", \"mnth\", \"holiday\", \"weekday\", \"workingday\", \"weathersit\"]\r\nfor col in cat_col: \r\n  df_day[col] = df_day[col].astype('category')","0971351f":"df_day.info()","0301c414":"df_day.describe()","37985b1d":"# temp variable (highest correlation to 'cnt')\r\nsns.displot(x=\"temp\", data=df_day, kde=True)\r\ndescription = df_day['temp'].describe()\r\nplt.axvline(description[\"25%\"], ls=\"--\", color='r')\r\nplt.axvline(description[\"mean\"], ls=\"--\", color='r')\r\nplt.axvline(description[\"75%\"], ls=\"--\", color='r')","18642ee7":"sns.boxplot(df_day['temp'], showmeans=True, color='lightblue');","7d4a09ce":"# check ouliers, 3sigma method\r\ntemp_upl = df_day['temp'].mean() + 3*df_day['temp'].std()\r\ntemp_lwl = df_day['temp'].mean() - 3*df_day['temp'].std()\r\nprint(\r\n    \"Upper limit\", temp_upl,\r\n    \"\\nLower limit\", temp_lwl\r\n    )","99bb7c0a":"# loc ouliers\r\ndf_day[(df_day['temp'] > temp_upl) | (df_day['temp'] < temp_lwl)]","f01d35d1":"# registered variable\r\nsns.displot(x=\"registered\", data=df_day, kde=True)\r\ndescription = df_day['registered'].describe()\r\nplt.axvline(description[\"25%\"], ls=\"--\", color='r')\r\nplt.axvline(description[\"mean\"], ls=\"--\", color='r')\r\nplt.axvline(description[\"75%\"], ls=\"--\", color='r')","42ce4360":"sns.boxplot(df_day['registered'], showmeans=True, color='lightblue');","24b63b0a":"# check ouliers, 3sigma method\r\nregistered_upl = df_day['registered'].mean() + 3*df_day['registered'].std()\r\nregistered_lwl = df_day['registered'].mean() - 3*df_day['registered'].std()\r\nprint(\r\n    \"Upper limit\", registered_upl,\r\n    \"\\nLower limit\", registered_lwl\r\n    )","8a9f0969":"# loc ouliers\r\ndf_day[(df_day['registered'] > registered_upl) | (df_day['registered'] < registered_lwl)]","5c4549a2":"# casual variable\r\nsns.displot(x=\"casual\", data=df_day, kde=True)\r\ndescription = df_day['casual'].describe()\r\nplt.axvline(description[\"25%\"], ls=\"--\", color='r')\r\nplt.axvline(description[\"mean\"], ls=\"--\", color='r')\r\nplt.axvline(description[\"75%\"], ls=\"--\", color='r')","45d2525d":"sns.boxplot(df_day['casual'], showmeans=True, color='lightblue');","cd1c6f1c":"# check ouliers, 3sigma method\r\ncasual_upl = df_day['casual'].mean() + 3*df_day['casual'].std()\r\ncasual_lwl = df_day['casual'].mean() - 3*df_day['casual'].std()\r\nprint(\r\n    \"Upper limit\", casual_upl,\r\n    \"\\nLower limit\", casual_lwl\r\n    )","734a73b3":"# loc ouliers\r\noutliers = list(df_day[(df_day['casual'] > casual_upl) | (df_day['casual'] < casual_lwl)].index)\r\noutliers","a9bb9ec3":"# output df from univariate analysis\r\ndf_un = df_day.drop(index=outliers)","4ecf2aea":"df_un.shape","ac01bf39":"df_un.skew(numeric_only=True).sort_values(ascending=False)","127f481e":"fig, ax = plt.subplots(2,2, figsize = (14,8))\r\nsns.barplot(x= 'season', y='cnt', data = df_un, ax = ax[0][0])\r\nsns.barplot(x= 'weathersit', y='cnt', data = df_un, ax = ax[0][1])\r\nsns.barplot(x= 'holiday', y='cnt', data = df_un, ax = ax[1][0])\r\nsns.barplot(x= 'workingday', y='cnt', data = df_un, ax = ax[1][1])","48373621":"df_un.plot.scatter('temp','registered')\r\ndf_un.plot.scatter('temp','casual')","d0cb15bd":"df_un.plot.scatter('hum','registered')\r\ndf_un.plot.scatter('hum','casual')","c0459c7a":"# weekday rent histograms\r\nweekday_histReg = df_un.groupby('weekday')['registered'].sum()\r\nweekday_histCas = df_un.groupby('weekday')['casual'].sum()","ad671d76":"print(weekday_histReg)\r\nweekday_histReg.plot.bar(y='registered').legend()","a13004a3":"print(weekday_histCas)\r\nweekday_histCas.plot.bar(y='casual').legend()","6b60e524":"label = list(set(df_un['weekday']))\r\n\r\nfig, ax = plt.subplots()\r\n\r\nax.bar(label, weekday_histReg, label='registered')\r\nax.bar(label, weekday_histCas, label='casual')\r\n\r\nax.set_title('Weekly bike share')\r\nax.set_ylabel('bike share count')\r\nax.legend()","7669de29":"# drop visual outliers\r\ndf_un['hum'].sort_values().head()","297812fb":"# output df from bivariate analysis\r\ndf_bi = df_un.drop(index=[68,49])","7c024702":"df_bi.shape","c5943626":"sns.pairplot(data=df_bi, vars=['temp','hum','registered','casual'], \\\r\n             hue='yr', kind='reg', diag_kind='kde', markers=['^','.'], height=3.3, palette='hls');","7a94914b":"sns.pairplot(data=df_bi, vars=['temp','hum','registered','casual'], \\\r\n             hue='holiday', kind='reg', diag_kind='kde', markers=['^','.'], height=3.3, palette='hls');","2ea329b4":"# output df from multivariate analysis\r\ndf_mult = df_bi","3412ecba":"from sklearn.model_selection import train_test_split\r\nfrom sklearn.metrics import r2_score,mean_squared_error, mean_absolute_error\r\nfrom sklearn.ensemble import RandomForestRegressor","4e9c35a6":"# these features are not relevant for the model\r\ndf = df_mult.drop(columns=['instant','dteday','atemp','cnt'], axis=1)","228be5f2":"df.dtypes","38b30a28":"# dummy enconding method (k-1 dummy variables)\r\n# NOT one-hot-encode method (k dummy variables)\r\n# k-1 dummies: drop_first=True\r\n\r\ncols = ['yr','season','mnth','weekday','weathersit','workingday','holiday']\r\ndf_model = pd.get_dummies(df, columns=cols, drop_first=True)","84b5a2c1":"df_model.shape","0f78a88f":"df_model.head()","a7e626c8":"X = df_model.drop(['registered', 'casual'], axis=1)\r\ny1 = df_model['registered']\r\ny2 = df_model['casual']\r\n\r\nX.shape, y1.shape, y2.shape","ad4a9511":"# REGISTERED target\r\nX_train, X_test, y_train, y_test = train_test_split(X, y1, test_size=0.3)\r\nX_train.shape","b9528645":"regr = RandomForestRegressor(random_state=0)\r\nregr.fit(X_train, y_train)\r\npred_reg = regr.predict(X_test)\r\n\r\nprint(\r\n    'Test R2 SCORE:', r2_score(y_test, pred_reg).round(3),\r\n    '\\nTest RMSE:', np.sqrt(mean_squared_error(y_test, pred_reg)).round(3),\r\n    '\\nTest MAE:', mean_absolute_error(y_test, pred_reg).round(3),\r\n    )","3ccc9224":"# CASUAL target\r\nX_train, X_test, y_train, y_test = train_test_split(X, y2, test_size=0.3)\r\nX_train.shape","62bb50b3":"from sklearn.ensemble import ExtraTreesRegressor\r\n\r\nreg = ExtraTreesRegressor(bootstrap=True, random_state=2).fit(X_train, y_train)\r\nreg.score(X_test, y_test)","b085acc5":"reg.get_params(deep=True)","bec7b821":"regr = RandomForestRegressor(random_state=0)\r\nregr.fit(X_train, y_train)\r\npred_reg = regr.predict(X_test)\r\n\r\nprint(\r\n    'Test R2 SCORE:', r2_score(y_test, pred_reg).round(3),\r\n    '\\nTest RMSE:', np.sqrt(mean_squared_error(y_test, pred_reg)).round(3),\r\n    '\\nTest MAE:', mean_absolute_error(y_test, pred_reg).round(3),\r\n    )","c975d8ee":"# Final thoughts\r\n\r\nIt was possible to achieve a very high prediction score with a straight forward machine learning model.\r\nThe original dataset show a high quality, there is no missing value and just a few outliers to handle.\r\n\r\nOther regressors were tried (eg. GradientBoostingRegressor) but are not presented in this notebook in order to keep it clean.\r\n\r\nThe highest R2 Scores a2e ~0.88 and ~0.85 to the \u2018registered\u2019 and \u2018casual\u2019 targets, respectively. The data suggests a different rent profile between these targets, hence they are let separate on purpose. While the \u2018registered\u2019 rents are majority during the week, the \u2018casual\u2019 rents are majority during the weekends.\r\n\r\nBecause the dataset is unbalanced between years 0 and 1, two possible approaches to improve the general score are:\r\n-\tEnlarge the dataset to additional years.\r\n-\tApply an over-sampling method to year 0 on the \u2018cnt\u2019 feature, like SMOTE (Synthetic Minority Oversampling Technique), prior to fitting the data to the regressor models.\r\nThank you for reading my notebook.\r\nAny comments are welcome.\r\n","b2d11bb4":"The target is splitted in 'casual' and 'registered', separetally, instead of 'cnt'","23c80c19":"**The rent count varies a lot according to the season. Winter is the lowest, fall is the highest**","3287714c":"there are only 3 ocorrencies in weathersits, so one value was not verified in this 2 years period ","f58f9253":"**'instant' and 'registered' are relatively high correlated, which means the total rent increased from year 0 to year 1.\nThis dataset is probably unbalanced**d","00949231":"Again, there is a noticeble variation in registered x temp , by year","2d98a015":"# Multivariate Analysis","e5535e01":"2 'hum' outliers 0 and 20%; must be dropped","331520df":"# Bivariate Analysis","e7bc1be0":"While the \u2018registered\u2019 rents are majority during the week, the \u2018casual\u2019 rents are majority during the weekends\r\nThe data suggests a different rent profile between 'registered' and 'casual', hence they are our individual targets!","a4163919":"there are no outliers concercing temperature","2d460210":"# Model Preparation","89626be3":"# Univariate Analysis","29555cee":"- season (1:springer, 2:summer, 3:fall, 4:winter)\r\n- weathersit: clear weather has the highest cnt; type 4 weather not present in the dataset\r\n        - 1: Clear, Few clouds, Partly cloudy\r\n\t\t- 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\r\n\t\t- 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\r\n\t\t- 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog","fecbd9fd":"# Exploratory Data Analysis"}}