{"cell_type":{"808cd630":"code","a6faf8e7":"code","cc89a443":"code","b8f81ea8":"code","c09b2342":"code","9f485aef":"code","e3d7d91e":"code","2595593d":"code","c43fb05f":"code","fd2b0641":"code","600367f2":"code","ec68072d":"code","510c0bc0":"code","0a14c10d":"code","7e95fbac":"code","f7348dc8":"code","a84a8d8a":"code","1786e0f1":"code","fa0b93c0":"code","24fb3e3e":"code","7cece9c4":"code","4302b7f9":"code","1d5d4011":"code","d2506a4f":"markdown","d4c469a8":"markdown"},"source":{"808cd630":"import pandas as pd\nimport numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split","a6faf8e7":"data_test=pd.read_csv(\"..\/input\/test.csv\")\ndata_test.head()","cc89a443":"data_train=pd.read_csv(\"..\/input\/train.csv\")\ndata_train.head()","b8f81ea8":"data_test.describe()","c09b2342":"data_train.describe()","9f485aef":"y_Train = data_train['class']\nx_Train = data_train.iloc[:,0:9]\nx_Train.head()","e3d7d91e":"x_test=data_test.iloc[:,0:9]\nx_test.head()","2595593d":"print(x_Train.shape)\nprint(y_Train.shape)","c43fb05f":"from sklearn.preprocessing import LabelEncoder\nLEn = LabelEncoder()","fd2b0641":"x_Train['top_left_square'] = LEn.fit_transform(x_Train['top_left_square'])\nx_Train['top_middle_square'] = LEn.fit_transform(x_Train['top_middle_square'])\nx_Train['top_right_square'] = LEn.fit_transform(x_Train['top_right_square'])\nx_Train['middle_left_square'] = LEn.fit_transform(x_Train['middle_left_square'])\nx_Train['middle_middle_square'] = LEn.fit_transform(x_Train['middle_middle_square'])\nx_Train['middle_right_square'] = LEn.fit_transform(x_Train['middle_right_square'])\nx_Train['bottom_left_square'] = LEn.fit_transform(x_Train['bottom_left_square'])\nx_Train['bottom_middle_square'] = LEn.fit_transform(x_Train['bottom_middle_square'])\nx_Train['bottom_right_square'] = LEn.fit_transform(x_Train['bottom_right_square'])","600367f2":"x_test['top_left_square'] = LEn.fit_transform(x_test['top_left_square'])\nx_test['top_middle_square'] = LEn.fit_transform(x_test['top_middle_square'])\nx_test['top_right_square'] = LEn.fit_transform(x_test['top_right_square'])\nx_test['middle_left_square'] = LEn.fit_transform(x_test['middle_left_square'])\nx_test['middle_middle_square'] = LEn.fit_transform(x_test['middle_middle_square'])\nx_test['middle_right_square'] = LEn.fit_transform(x_test['middle_right_square'])\nx_test['bottom_left_square'] = LEn.fit_transform(x_test['bottom_left_square'])\nx_test['bottom_middle_square'] = LEn.fit_transform(x_test['bottom_middle_square'])\nx_test['bottom_right_square'] = LEn.fit_transform(x_test['bottom_right_square'])","ec68072d":"x_Train.head()","510c0bc0":"x_test.head()","0a14c10d":"x_test_pred = x_test.iloc[:, 0:9]\nx_test_pred.head()","7e95fbac":"from sklearn.tree import DecisionTreeClassifier\n\nmodel=DecisionTreeClassifier(criterion='entropy')\n","f7348dc8":"model.fit(x_Train, y_Train)","a84a8d8a":"y_pred = model.predict(x_test_pred)","1786e0f1":"y_pred","fa0b93c0":"id = data_test['Id']","24fb3e3e":"np.random.seed(123)\ne = np.random.normal(size=10)  \npred=pd.DataFrame(y_pred, columns=['prediction']) \nprint (pred)","7cece9c4":"pred = np.vstack((id,y_pred)).T\npred","4302b7f9":"np.savetxt('datathon19.csv', pred, delimiter=',', fmt=\"%i\")","1d5d4011":"import csv\nwith open('datathon19.csv',newline='') as f:\n    r = csv.reader(f)\n    data = [line for line in r]\nwith open('datathon19.csv','w',newline='') as f:\n    w = csv.writer(f)\n    w.writerow(['Id','class'])\n    w.writerows(data)","d2506a4f":"# Load the dataset print top values","d4c469a8":"# Importing Liabraries"}}