{"cell_type":{"186ee4cf":"code","0647d11d":"code","1ece98c5":"code","ab01bb6b":"code","8b6b7310":"code","95fbb1ab":"code","881c37a1":"code","45aee645":"code","c55351d6":"code","936d282b":"code","6378445c":"code","387d53b0":"code","228eb11b":"code","351e144e":"code","ede1f04c":"code","3c61ca58":"code","253cc86d":"code","37306507":"code","f0ff5c64":"code","86c35ed2":"code","801330a1":"code","01a846d9":"code","c5337603":"code","be641315":"markdown","bd985d54":"markdown","7b4f6bed":"markdown","813a80f1":"markdown","997bcbe4":"markdown","f4b93e0a":"markdown","170b9f93":"markdown","6500b4e1":"markdown","7ed24443":"markdown","8655e4b4":"markdown","7850301c":"markdown","5e58c08f":"markdown"},"source":{"186ee4cf":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","0647d11d":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","1ece98c5":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","ab01bb6b":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","8b6b7310":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","95fbb1ab":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# student_scores.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/student_scores.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'student_scores.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","881c37a1":"df1.head(5)","45aee645":"plotPerColumnDistribution(df1, 10, 5)","c55351d6":"plotCorrelationMatrix(df1, 8)","936d282b":"plotScatterMatrix(df1, 6, 15)","6378445c":"df1.plot(x='Hours', y='Scores', style='o')\nplt.title('Hours vs Percentage')\nplt.xlabel('Hours Studied')\nplt.ylabel('Percentage Score')\nplt.show()","387d53b0":"X = df1.iloc[:, :-1].values\ny = df1.iloc[:, 1].values","228eb11b":"X.shape","351e144e":"y.shape","ede1f04c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","3c61ca58":"#check the shape of train dataset\nX_train.shape","253cc86d":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)","37306507":"print(regressor.intercept_)\n","f0ff5c64":"print(regressor.coef_)\n","86c35ed2":"y_pred = regressor.predict(X_test)\n","801330a1":"y_pred","01a846d9":"df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ndf","c5337603":"from sklearn import metrics\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","be641315":"Distribution graphs (histogram\/bar graph) of sampled columns:","bd985d54":"Scatter and density plots:","7b4f6bed":"Correlation matrix:","813a80f1":"### Let's check 1st file: \/kaggle\/input\/student_scores.csv","997bcbe4":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Edit Notebook\" button at the top of the kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","f4b93e0a":"There is 1 csv file in the current version of the dataset:\n","170b9f93":"## Introduction\nThis notebook some how help from kaggle. ","6500b4e1":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","7ed24443":"## Exploratory Analysis\nTo begin this exploratory analysis, first use `matplotlib` to import libraries and define functions for plotting the data. Depending on the data, not all plots will be made. (Hey, I'm just a kerneling bot, not a Kaggle Competitions Grandmaster!)","8655e4b4":"**Calculate Error**","7850301c":"Let's take a quick look at what the data looks like:","5e58c08f":"Now you're ready to read in the data and use the plotting functions to visualize the data."}}