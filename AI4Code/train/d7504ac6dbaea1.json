{"cell_type":{"4a345d89":"code","3c36d91b":"code","ae7ed5ac":"code","f4b79c83":"code","f5165021":"code","0f3bcda1":"code","976db3d9":"code","92be180a":"code","aa8d575a":"code","748af615":"code","7395f036":"code","2e944fd8":"code","61cc6038":"code","d5415e7d":"code","fbf25510":"code","9ee7305a":"code","f021252c":"code","1ea4c426":"code","1ace26a4":"code","9f6ebf97":"code","3e2b28e2":"code","a67e386c":"code","11ddc907":"code","1850fe37":"code","5f89acd3":"code","6bdf3252":"code","2fad19ff":"code","b6d2c181":"code","f3b7e6a3":"code","ee55e254":"code","34f4f98d":"code","34fa2077":"code","29688410":"code","9971fcf3":"code","87683cf0":"code","6ff22efd":"code","689b55f6":"code","490f888a":"code","4fc10bc5":"code","2d64dc85":"code","79384d7c":"code","90e53189":"code","a47daf63":"code","a1ca2469":"code","325ffa54":"code","8ee20dc5":"code","8e666487":"code","2d90af02":"code","df1507ed":"code","c42d34f9":"code","1d4f7fc6":"code","1b94d734":"code","5c6c94ce":"code","eaa71f88":"code","c737bc3d":"code","2a4977c1":"code","4325d06b":"code","14d8941e":"code","20e69a55":"code","15ee1ac6":"code","027def49":"code","4bbfbd7b":"code","c7c593ba":"code","a98abe6e":"code","cf8e1c34":"code","2de170f7":"code","898493df":"code","28fdadda":"code","75925668":"code","17ec6825":"code","7cc8ac76":"code","9997c94c":"markdown","ca976d2b":"markdown","343954e7":"markdown","f4d68dd2":"markdown","e7d8455c":"markdown","d6426284":"markdown","dff37047":"markdown","6b61156b":"markdown","52fc026a":"markdown","c237834b":"markdown","5e431bb4":"markdown","44ac8a96":"markdown","d49faa78":"markdown","ef02a199":"markdown","9d019e04":"markdown","a72bd8a9":"markdown","2e3a115b":"markdown","fcc8fc8f":"markdown","a3a51569":"markdown","e3840f58":"markdown","6ae4b003":"markdown","6d749306":"markdown","77c9a828":"markdown","7abbd232":"markdown","5abed29d":"markdown","77e942db":"markdown","11c0b623":"markdown","9fa949bc":"markdown","3afe2bdf":"markdown","15f61444":"markdown","b81fb2ec":"markdown","4915d1a5":"markdown","493442c2":"markdown","a5dfec55":"markdown","e743eac8":"markdown","fb5a9883":"markdown","830f3ed2":"markdown","c228cbe7":"markdown","b85285ec":"markdown","124880af":"markdown","b334c850":"markdown","717602e9":"markdown","7698bdb6":"markdown","72e3c6a0":"markdown","4792875d":"markdown","6186dd36":"markdown","8234aa4b":"markdown","1127c134":"markdown","9b3bc085":"markdown","74b9d7a9":"markdown","3f03b22e":"markdown","abc34ae2":"markdown","d469590c":"markdown","9d6cc667":"markdown","6dd82e84":"markdown","29cec2a5":"markdown","e1799911":"markdown","b8142549":"markdown","abd78b74":"markdown","0aa45415":"markdown","d3374593":"markdown","4e18fc44":"markdown","d32cb329":"markdown","f61c4bb0":"markdown","497ec65d":"markdown","224575e9":"markdown"},"source":{"4a345d89":"# Importing necessary libraries for all problems:\n\nimport numpy as np\nimport pandas as pd","3c36d91b":"df = pd.DataFrame({'X':[78,85,96,80,86], 'Y':[84,94,89,83,86],'Z':[86,97,96,72,83]})\ndf","ae7ed5ac":"exam_data  = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n\ndf = pd.DataFrame(exam_data, index = labels)\n\nprint(df)","f4b79c83":"exam_data  = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n\ndf = pd.DataFrame(exam_data, index = labels)\n\ndf.info()","f5165021":"# Solution: 1\n\ndf.head(3)","0f3bcda1":"# Solution: 2\n\ndf.iloc[:3, :]","976db3d9":"df[['name', 'score']]","92be180a":"# Solution 1:\n\ndf[['name', 'score']].iloc[[1, 3, 5, 6], :]","aa8d575a":"# Solution 2:\n\ndf.iloc[[1, 3, 5, 6], [0, 1]]","748af615":"df[df['attempts'] > 2][['name', 'score']]","7395f036":"print('Number of rows of DataFrame:', df.shape[0])\nprint('Number of columns of DataFrame:', df.shape[1])","2e944fd8":"print(df[df['score'].isnull()])","61cc6038":"print(df[(df['score'] >= 15) & (df['score'] <= 20)])","d5415e7d":"print(df[(df['attempts'] < 3) & (df['score'] > 15)])","fbf25510":"# Solution 1: \n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\nexam_data  = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n\ndf = pd.DataFrame(exam_data, index = labels)\n\ndf['score'].loc['d'] = 11.5\ndf['score']                  ","9ee7305a":"# Solution 2 (Preferable):\n\nexam_data  = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n\ndf = pd.DataFrame(exam_data, index = labels)\n\ndf.loc['d', 'score'] = 11.5\ndf['score']","f021252c":"print('Sum of the examination attempts by the students:', df['attempts'].sum())","1ea4c426":"exam_data  = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n\ndf = pd.DataFrame(exam_data , index=labels)\nprint(\"\\nMean score for each different student in data frame:\", df['score'].mean())","1ace26a4":"df.loc['k'] = ['Suresh', 15.5, 'yes', 1]     # This line is similar to adding new data in SQL. \nprint('Dataframe after adding new rows: ')\nprint(df)\n\nprint('\\n')\n# df = df.drop('k')      # We need to assign df = df.drop('k'), to perform inplace drop of row. Only df.drop('k') won't work.\ndf.drop('k', inplace = True)\nprint('Dataframe after removing the added rows:')\nprint(df)","9f6ebf97":"df.sort_values(by = ['name', 'score'], ascending = [False, True])","3e2b28e2":"df['qualify'] = df['qualify'].map({'yes': 'True', 'no': 'False'})\ndf","a67e386c":"df['name'].replace('James', 'Suresh', inplace = True)\ndf    # We can see the changed name in index row 'd'.","11ddc907":"exam_data  = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\ndf = pd.DataFrame(exam_data , index=labels)\n\ndf.drop('attempts', axis = 1, inplace = True)\ndf","1850fe37":"exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\ndf = pd.DataFrame(data = exam_data, index = labels)\n\ndf['color'] = ['Red','Blue','Orange','Red','White','White','Blue','Green','Green','Red']\nprint('DataFrame after adding Color column:')\ndf","5f89acd3":"exam_data = [{'name':'Anastasia', 'score':12.5}, {'name':'Dima','score':9}, {'name':'Katherine','score':16.5}]\ndf = pd.DataFrame(data = exam_data)\n\nfor index, row in df.iterrows():\n    print(row['name'], row['score'])","6bdf3252":"exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n\ndf = pd.DataFrame(exam_data, labels)\nprint(df.columns.values)","2fad19ff":"data = {'col1': [1, 2, 3], 'col2': [4, 5, 6], 'col3': [7, 8, 9]}\ndf = pd.DataFrame(data)\n\ndf.rename(columns = {'col1': 'Column1', 'col2': 'Column2', 'col3': 'Column3'})","b6d2c181":"data = {'col1': [1, 4, 3, 4, 5], 'col2': [4, 5, 6, 7, 8], 'col3': [7, 8, 9, 0, 1]}\ndf = pd.DataFrame(data)\n\nprint(df[df['col1'] == 4])","f3b7e6a3":"data = {'col1': [1, 4, 3, 4, 5], 'col2': [4, 5, 6, 7, 8], 'col3': [7, 8, 9, 0, 1]}\ndf = pd.DataFrame(data)\n\nprint('Original DataFrame:\\n')\nprint(df)\n\nprint('\\nDataFrame afer altering columns:')\ndf = df[['col3', 'col2', 'col1']]\nprint(df)","ee55e254":"data = {'col1': [1, 4, 3, 4, 5], 'col2': [4, 5, 6, 7, 8], 'col3': [7, 8, 9, 0, 1]}\ndf = pd.DataFrame(data)\n\ndf2 = {'col1': 11, 'col2': 12, 'col3':13}\ndf = df.append(df2, ignore_index = True)\nprint(df)","34f4f98d":"data = {'col1': [1, 4, 3, 4, 5], 'col2': [4, 5, 6, 7, 8], 'col3': [7, 8, 9, 0, 1]}\ndf = pd.DataFrame(data)\n\ndf.to_csv('new_file.csv', sep = '\\t', index = False)\n\nnew_df = pd.read_csv('new_file.csv')\nprint(new_df)","34fa2077":"df = pd.DataFrame({'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n                   'city': ['California', 'Los Angeles', 'California', 'California', 'California', 'Los Angeles', 'Los Angeles', 'Georgia', 'Georgia', 'Los Angeles']\n                  })\n\nno_of_people_by_city = df.groupby(by = ['city']).count()\nprint(no_of_people_by_city)","29688410":"data = {'col1': [1, 4, 3, 4, 5], 'col2': [4, 5, 6, 7, 8], 'col3': [7, 8, 9, 0, 1]}\ndf = pd.DataFrame(data)\n\nprint(df[df['col2'] != 5])    #df['col2'] != 5 = False only for index=1. So it will show all other rows values.","9971fcf3":"data = {'col1': [1, 4, 3, 4, 5], 'col2': [4, 5, 6, 7, 8], 'col3': [7, 8, 9, 0, 1]}\ndf = pd.DataFrame(data)\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\nprint(df)\n\n# NO changes observed by changing options value. \n# Learned this by taking help from official solution. ","87683cf0":"print(df.iloc[[2]])    # sepcifying index 2 into [] make the result dataframe.\n\nprint('\\n')\n\nprint(df.iloc[2])      # # sepcifying index 2 without [] make the result series.","6ff22efd":"# Solution 1:\n\nexam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\ndf = pd.DataFrame(exam_data)\n\nprint(df)   # Original Dataframe\n\nprint('\\n')\nprint(df.replace(np.nan, 0.0) )  # After replacing NaN with 0.0     ","689b55f6":"# Solution 2:\n\nexam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\ndf = pd.DataFrame(exam_data)\n\nprint(df.fillna(0))","490f888a":"exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\ndf = pd.DataFrame(exam_data)\n\n\nprint('\\nSetting index as a column of dataframe:\\n')\nprint(df.reset_index(level = 0))     \n# level = 0, Only remove the first index levels from the index. Removes all levels by default. This parameter is useful for multilevel index.\n\n\nprint('\\n\\nHiding index from DataFrame: ')\nprint(df.to_string(index= False))","4fc10bc5":"exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\ndf = pd.DataFrame(exam_data)\n\n# df.set_value(index = 8, col = 'score', value = 10.2)  # set_value is deprecated and will be removed in a future release.\n\n# Setting 10.2 for index = 8 and column = 'score':\ndf.at[8, 'score'] = 10.2\n\nprint('Dataframe after setting value for index = 8 and column = score:\\n')\nprint(df)\n\n# Note: \n# DataFrame.at : Access a single value for a row\/column label pair.\n# DataFrame.loc : Access a group of rows and columns by label(s).\n# DataFrame.iloc : Access a group of rows and columns by integer position(s).","2d64dc85":"# Number of null values on one or more columns:\n\ndf.isnull().values.sum()","79384d7c":"data = {'col1': [1, 4, 3, 4, 5], 'col2': [4, 5, 6, 7, 8], 'col3': [7, 8, 9, 0, 1]}\ndf = pd.DataFrame(data)\n\nprint('DataFrame after removing 2nd & 4th rows:')\ndf.drop(index = [2, 4], inplace = True)\nprint(df)","90e53189":"exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\ndf = pd.DataFrame(exam_data)\n\ndf.drop(index = [0, 1], inplace = True)\nprint('Dataframe after droping first two rows:\\n')\nprint(df)\n\nprint('\\n\\nDataframe after reset index:')\ndf.reset_index()","a47daf63":"# Learned new technique form this problem:\n# ----------------------------------------\n\n# randn() returns a sample (or samples) from the \"standard normal\" distribution.\ndf = pd.DataFrame(np.random.randn(10, 2))     # randn(rows, columns)\nprint('Original Dataframe:')\nprint(df)\n\npart_70 = df.sample(frac = 0.7, random_state = 10)    # Return a random sample of items from an axis of object.\nprint('\\n\\n70% of the dataframe:')\nprint(part_70)\n\nprint('\\n\\n30% of the dataframe:')           # Extract rest 30% of the dataframe.\npart_30 = df.drop(part_70.index)          \nprint(part_30)","a1ca2469":"ds1 = pd.Series(['100', '200', 'python', '300.12', '400'])\nds2 = pd.Series(['10', '20', 'php', '30.12', '40'])\n\ndf = pd.concat([ds1, ds2], axis = 1)   # For column wise concatenate we used axis = 1\nprint('Combines result of two series into a Dataframe: ')\nprint(df)","325ffa54":"exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\ndf = pd.DataFrame(exam_data)\n\nsuffled_df = df.sample(frac = 1)         # I think, suffling rows using frac can be useful form cross-validation. \nprint('Dataframe after suffled rows: \\n')\nprint(suffled_df)","8ee20dc5":"date_data = ['3\/11\/2000', '3\/12\/2000', '3\/13\/2000']\nds = pd.Series(date_data)\n\nprint('Original String type column:')\nprint(ds)\n\ndate_s = pd.to_datetime(ds)\nprint('\\nColumn converted into Datetime:')\nprint(date_s)","8e666487":"data = {'col1': [1, 4, 3, 4, 5], 'col2': [4, 5, 6, 7, 8], 'col3': [7, 8, 9, 0, 1]}\ndf = pd.DataFrame(data)\n\nrename_col_2 = df.rename(columns = {'col2': 'column2'})\nprint('Dataframe after renaming second column: \\n')\nprint(rename_col_2)","2d90af02":"df_column_to_list = df['col2'].to_list()\nprint('Converted dataframe column into list: ', df_column_to_list)","df1507ed":"# Learned this technique new, it's a handy way to create dataframe from numpy array manually:\n\ndtype = [('column1', 'int64'), ('column2', 'float64'), ('column3', 'float64')]\nvalues = np.zeros(15, dtype = dtype)      # np.zeros(shape, dtype), dtype is by default float unless we specify. \nindex = ['Index'+str(i) for i in range(1, len(values)+1)]\n\ndf = pd.DataFrame(data = values, index = index)\ndf","c42d34f9":"data = {'col1': [1, 4, 3, 4, 7], 'col2': [4, 5, 6, 9, 5], 'col3': [7, 8, 12, 1, 11]}\ndf = pd.DataFrame(data)\n\nresult = df.idxmax().to_list()\n\n# I know the below lines of codes may be tough for someone, but I think it is the robust solution of this problem. \nfor i in range(1, len(df.columns) + 1):\n    print('For {column} row {index} has maximum value.'.format(column = 'col'+str(i), index = result[i-1]))","1d4f7fc6":"data = {'col1': [1, 2, 3, 4, 7], 'col2': [4, 5, 6, 9, 5], 'col3': [7, 8, 12, 1, 11]}\ndf = pd.DataFrame(data)\n\n# col_check = input('Enter a column name to check:\\n')      # Uncomment this line if you want to take user input.\ncol_check = 'col3'\n\nif col_check in df.columns:\n    print('{} is present in dataframe'.format(col_check))\nelse:\n    print('\\n\\n{} is not present in dataframe'.format(col_check))","1b94d734":"# Uncomment the below line if you want to take user input.\n# index = int(input('Enter a row number to print it\\'s row values: '))\n\nindex = 3    # For index value > 4 it will raise index out of bound error. \n\nprint('\\nValues of row {}'.format(index + 1))\nprint(df.iloc[index])","5c6c94ce":"exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\ndf = pd.DataFrame(exam_data)\n\nprint(df.dtypes)","eaa71f88":"df1 = pd.DataFrame()\ndf2 = pd.DataFrame({'col1': range(3), 'col2': range(3)})\n\ndf1 = df1.append(df2)\nprint('Dataframe afer appending data to original empty dataframe:\\n')\nprint(df1)","c737bc3d":"exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\ndf = pd.DataFrame(exam_data)\n\nprint(df.sort_values(by = ['attempts', 'name']))","2a4977c1":"# We will change the Data type of 'score' column from float to int:\nexam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],\n        'score': [12.5, 9.1, 16.5, 12.77, 9.21, 20.22, 14.5, 11.34, 8.8, 19.13],\n        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],\n        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\ndf = pd.DataFrame(exam_data)\n\nprint('Datatype before:')\nprint(df.dtypes)\n\ndf['score'] = df['score'].astype('int64')    # Selected column can't have null values. If so they will raise an error. \nprint('\\nDatatypes after:')\nprint(df.dtypes)","4325d06b":"df = pd.DataFrame([1000.0, 2000.0, 3000.0, -4000.0, np.inf, -np.inf])\nprint('Original Dataframe:')\nprint(df)\n\nnew_df = df.replace(to_replace = [np.inf, -np.inf], value = np.nan)\nprint('\\n\\nNew dataframe:')\nprint(new_df)","14d8941e":"df = pd.DataFrame({'col2': [4, 5, 6, 9, 5], 'col3': [7, 8, 12, 1, 11]})\nprint('Dataframe before insertion of new column:')\nprint(df)\n\ndf.insert(loc = 0, column = 'col1', value = [1, 2, 3, 4, 7])\nprint('\\nInserting `col1` at the beginning of original dataframe:')\nprint(df)","20e69a55":"df = pd.DataFrame(data = [[2, 4], [1, 3]], columns = ['col1', 'col2'])\nprint(df)","15ee1ac6":"df = pd.DataFrame(\n    {\n        'col1':['C1','C1','C2','C2','C2','C3','C2'], \n        'col2':[1, 2, 3, 3, 4, 6, 5]\n    })\n\nprint('Grouped by `col1` and showing `col2`\\'s values as list:')\ndf.groupby(by = 'col1')['col2'].apply(list)","027def49":"data = {'col1': [1, 2, 3, 4, 7], 'col2': [4, 5, 6, 9, 5], 'col3': [7, 8, 12, 1, 11]}\ndf = pd.DataFrame(data)\n\nprint('Columns index for `col2` is: ')\ndf.columns.get_loc(key = 'col2')","4bbfbd7b":"# Solution 1:\n\ndf.columns.value_counts().sum()","c7c593ba":"# Solution 2: (Preferable)\n\nlen(df.columns)","a98abe6e":"# Solution 1:\n\nprint('All the columns except `col2`:\\n')\nprint(df.drop(columns = ['col2']))","cf8e1c34":"# Solution 2:\n\nprint('All the columns except `col2`:\\n')\nprint(df.iloc[:, df.columns != 'col2'])","2de170f7":"# Solution 1:\n\nprint('First 3 records of the DataFrame:\\n')\nprint(df.iloc[:3, :])","898493df":"# Solution 2:\n\nprint('First 3 records of the DataFrame:\\n')\nprint(df.head(3))","28fdadda":"df = pd.DataFrame({'col1': [1, 2, 3, 4, 7, 11], 'col2': [4, 5, 6, 9, 5, 0], 'col3': [7, 5, 8, 12, 1,11]})\n\nprint('Topmost 3 records by `col1`:')\ndf2 = df.nlargest(n = 3, columns = 'col1', keep = 'all')\nprint(df2)\n\nprint('\\nTopmost 3 records by `col2`:')\ndf2 = df.nlargest(n = 3, columns = 'col2', keep = 'all')    # setting keep = 'all' will give us two rows for duplicate occurance of value 5.\nprint(df2)     # for setting keep = 'all' we are getting 4 topmost rows instead of 3. That means it allows duplicates.\n\nprint('\\nTopmost 3 records by `col3`:')\ndf2 = df.nlargest(n = 3, columns = 'col3', keep = 'all')\nprint(df2)","75925668":"# Solution 2:\n\ndf = pd.DataFrame({'col1': [1, 2, 3, 4, 7, 11], 'col2': [4, 5, 6, 9, 5, 0], 'col3': [7, 5, 8, 12, 1,11]})\nprint('Top 3 records by `col1`:')\nprint(df.sort_values(by = 'col1', ascending = False).head(3))\n\nprint('\\nTop 3 records by `col2`:')\nprint(df.sort_values(by = 'col2', ascending = False).head(3))    # We should get another row in the output as col2 has two rows having value 5.\n\nprint('\\nTop 3 records by `col3`:')\nprint(df.sort_values(by = 'col3', ascending = False).head(3))","17ec6825":"df = pd.DataFrame({'col1': [1, 2, 3, 4, 7, 11], 'col2': [4, 5, 6, 9, 5, 0], 'col3': [7, 5, 8, 12, 1,11]})\n\nprint('Dataframe after first three rows: \\n')\nprint(df.iloc[3:, :])","7cc8ac76":"df = pd.DataFrame({'col1': [1, 2, 3, 4, 7, 11], 'col2': [4, 5, 6, 9, 5, 0], 'col3': [7, 5, 8, 12, 1,11]})\n\nprint('Dataframe without last three rows: \\n')\nprint(df.iloc[:-3, :])","9997c94c":"### 52. Write a Pandas program to remove infinite values from a given DataFrame.","ca976d2b":"### 7. Write a Pandas program to select the rows where the number of attempts in the examination is greater than 2.","343954e7":"### 37. Write a Pandas program to remove the first and second rows and then reset index of a given DataFrame.","f4d68dd2":"### 30. Write a Pandas program to widen output display to see more columns.","e7d8455c":"### 23. Write a Pandas program to rename columns of a given DataFrame.","d6426284":"### 63. Write a Pandas program to remove last n rows of a given DataFrame.","dff37047":"### 47. Write a Pandas program to get the specified row value of a given DataFrame.","6b61156b":"### 32. Write a Pandas program to replace all the NaN values with Zero's in a column of a dataframe.","52fc026a":"### 22. Write a Pandas program to get list from DataFrame column headers.","c237834b":"### 51. Write a Pandas program to convert the datatype of a given column (floats to ints).","5e431bb4":"### 16. Write a Pandas program to sort the DataFrame first by 'name' in descending order, then by 'score' in ascending order.","44ac8a96":"### 28. Write a Pandas program to count city wise number of people from a given of data set (city, name of the person).","d49faa78":"### 39. Write a Pandas program to combining two series into a DataFrame.","ef02a199":"### 18. Write a Pandas program to change the name 'James' to 'Suresh' in name column of the DataFrame.","9d019e04":"### 46. Write a Pandas program to check whether a given column is present in a DataFrame or not.","a72bd8a9":"### 12. Write a Pandas program to change the score in row 'd' to 11.5.","2e3a115b":"### 55. Write a Pandas program to group by the first column and get second column as lists in rows.","fcc8fc8f":"### 24. Write a Pandas program to select rows from a given DataFrame based on values in some columns.","a3a51569":"### 6. Write a Pandas program to select the specified columns and rows from a given data frame.\n\nSelect 'name' and 'score' columns in rows 1, 3, 5, 6 from the following data frame.","e3840f58":"### 35. Write a Pandas program to count the NaN values in one or more columns in DataFrame.","6ae4b003":"### 21. Write a Pandas program to iterate over rows in a DataFrame.","6d749306":"### 3. Write a Pandas program to display a summary of the basic information about a specified DataFrame and its data.\n\nSample Python dictionary data and list labels: <br> <br>\n**exam_data** = *{'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'], <br>\n'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19], <br>\n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1], <br>\n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']} <br>\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']*","77c9a828":"### 57. Write a Pandas program to count number of columns of a DataFrame.","7abbd232":"### 2. Write a Pandas program to create and display a DataFrame from a specified dictionary data which has the index labels. <br>\nSample Python dictionary data and list labels: <br> <br>\n**exam_data** = *{'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'], <br>\n'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19], <br>\n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1], <br>\n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']} <br>\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']*","5abed29d":"### 49. Write a Pandas program to append data to an empty DataFrame.","77e942db":"### 19. Write a Pandas program to delete the 'attempts' column from the DataFrame. ","11c0b623":"### 17. Write a Pandas program to replace the 'qualify' column contains the values 'yes' and 'no' with True and False.","9fa949bc":"### 11. Write a Pandas program to select the rows where number of attempts in the examination is less than 3 and score greater than 15.","3afe2bdf":"### 59. Write a Pandas program to get first n records of a DataFrame.","15f61444":"*Solution 1 will give an warning namely `SettingWithCopyWarning`. I am hiding warnings as I don't like them to show while presenting.*\n#### To know more about SettingWithCopyWarning [Click Here](https:\/\/www.dataquest.io\/blog\/settingwithcopywarning\/)","b81fb2ec":"### 13. Write a Pandas program to calculate the sum of the examination attempts by the students.","4915d1a5":"### 45. Write a Pandas program to find the row for where the value of a given column is maximum.","493442c2":"### 61. Write a Pandas program to get topmost n records within each group of a DataFrame.","a5dfec55":"### 53. Write a Pandas program to insert a given column at a specific column index in a DataFrame.","e743eac8":"### 40. Write a Pandas program to shuffle a given DataFrame rows.","fb5a9883":"### 20. Write a Pandas program to insert a new column in existing DataFrame.","830f3ed2":"### **References:** \n[https:\/\/www.w3resource.com\/python-exercises\/pandas\/index-dataframe.php](https:\/\/www.w3resource.com\/python-exercises\/pandas\/index-dataframe.php)","c228cbe7":"### 33. Write a Pandas program to convert index in a column of the given dataframe.","b85285ec":"### 34. Write a Pandas program to set a given value for particular cell in  DataFrame using index value.","124880af":"### 25. Write a Pandas program to change the order of a DataFrame columns.","b334c850":"### 8. Write a Pandas program to count the number of rows and columns of a DataFrame.","717602e9":"# Manipulate data in 63 ways using Pandas (63 examples with solutions)","7698bdb6":"### 54. Write a Pandas program to convert a given list of lists into a Dataframe. ","72e3c6a0":"### 14. Write a Pandas program to calculate the mean score for each different student in DataFrame.","4792875d":"### 36. Write a Pandas program to drop a list of rows from a specified DataFrame.","6186dd36":"### 26. Write a Pandas program to add one row in an existing DataFrame.","8234aa4b":"### 62. Write a Pandas program to remove first n rows of a given DataFrame. ","1127c134":"### 42. Write a Pandas program to rename a specific column name in a given DataFrame.","9b3bc085":"### 27. Write a Pandas program to write a DataFrame to CSV file using tab separator.","74b9d7a9":"### 1. Write a Pandas program to get the powers of an array values element-wise.\n\nNote: First array elements raised to powers from second array. <br> <br>\nSample data: {'X':[78,85,96,80,86], 'Y':[84,94,89,83,86],'Z':[86,97,96,72,83]} <br> <br>\nExpected Output: <br>\nX Y Z <br>\n0 78 84 86 <br>\n1 85 94 97 <br>\n2 96 89 96 <br>\n3 80 83 72 <br>\n4 86 86 83\n\nN.B: Questions seems unclear to me. Though I checked sample solution and it matched with my below solution. ","3f03b22e":"### 56. Write a Pandas program to get column index from column name of a given DataFrame.","abc34ae2":"### 10. Write a Pandas program to select the rows the score is between 15 and 20 (inclusive).","d469590c":"### 29. Write a Pandas program to delete DataFrame row(s) based on given column value.","9d6cc667":"### 48. Write a Pandas program to get the datatypes of columns of a DataFrame.","6dd82e84":"### 50. Write a Pandas program to sort a given DataFrame by two or more columns.","29cec2a5":"### 41. Write a Pandas program to convert DataFrame column type from string to datetime.","e1799911":"### 5. Write a Pandas program to select the 'name' and 'score' columns from the above (exam_data) DataFrame.","b8142549":"### 58. Write a Pandas program to select all columns, except one given column in a DataFrame.","abd78b74":"### 15. Write a Pandas program to append a new row 'k' to data frame with given values for each column. Now delete the new row and return the original DataFrame.","0aa45415":"### 43. Write a Pandas program to get a list of a specified column of a DataFrame.","d3374593":"### 38. Write a Pandas program to devide a DataFrame in a given ratio.","4e18fc44":"### 4. Write a Pandas program to get the first 3 rows of a given DataFrame.","d32cb329":"Hi. I am using Pandas for data manipulation and cleaning purpose in my Data Analysis & Machine Learning work. But sometimes I feel like I can't manipulate data easily all the times like the way I want. That's why I challenged myself and solved these problems from [w3resource](https:\/\/www.w3resource.com\/python-exercises\/pandas\/index-dataframe.php). \n\nI found this website very helpful for strengthen my pandas skills. I hope sharing this notebook will help pople like me who wants to strengthen their data manipulation skills but not finding a good and organized source. \n\n**These notebook will be helpful for**:\n- Beginners (not absolute beginners) who basic have knowledge about python and pandas. \n- Who want to strengthen their data manipulation skills using pandas dataframe. \n\nThese problems are very basic but I hope these will help you while doing a project or participating a competition. \n\nIf this notebook helps you please **upvote** this. ","f61c4bb0":"### 9. Write a Pandas program to select the rows where the score is missing, i.e. is NaN.","497ec65d":"### 44. Write a Pandas program to create a DataFrame from a Numpy array and specify the index column and column headers.","224575e9":"### 31. Write a Pandas program to select a row of series\/dataframe by given integer index."}}