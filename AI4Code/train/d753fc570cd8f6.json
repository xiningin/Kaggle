{"cell_type":{"d006542f":"code","18c364e3":"code","0b79fed6":"code","34cec583":"code","000882b4":"code","1304edc6":"code","9b26c966":"code","b498155d":"code","25ebaa9a":"code","c1b5fc10":"markdown","9b83444d":"markdown"},"source":{"d006542f":"#<> Go to wals.info and request a combination of two features. \n#   Mark the whole table (with mouse), copy it (ctrl+c), and paste it between the \"\"\" (ctrl-v):\n\nwals = '''\nThe Past Tense \/ The Future Tense\tNumber of languages\n\t\tPresent, no remoteness distinctions \/ No inflectional future\n46\n\t\tPresent, no remoteness distinctions \/ Inflectional future exists\n48\n\t\tPresent, 4 or more remoteness distinctions \/ No inflectional future\n1\n\t\tPresent, 4 or more remoteness distinctions \/ Inflectional future exists\n1\n\t\tPresent, 2-3 remoteness distinctions \/ No inflectional future\n12\n\t\tPresent, 2-3 remoteness distinctions \/ Inflectional future exists\n26\n\t\tNo past tense \/ No inflectional future\n53\n\t\tNo past tense \/ Inflectional future exists\n35\n'''\n\n#<> Set a name of the first feature you want to adress. \n#   And set its values by listing: a category name and a list of values (from WALS) that contribute to it. \n#   Text in \"\" is your choice, text in '' must match walses categories in the respective feature.\n\nfeature1, values1 = \"Past Tenses\", {\n    \"None\" : ['No past tense'], \n    \n    #\"Some\" : ['Present, no remoteness distinctions', 'Present, 2-3 remoteness distinctions', 'Present, 4 or more remoteness distinctions']\n    \n    \"One\"  : ['Present, no remoteness distinctions'],     \n    \"More\" : ['Present, 2-3 remoteness distinctions', 'Present, 4 or more remoteness distinctions'],\n    \n    #* My original evaluation used None, One, Two, Three.\n    #\"One\"  : ['Present, no remoteness distinctions'],\n    #\"Two\"  : ['Present, 2-3 remoteness distinctions'],\n    #\"Three\": ['Present, 4 or more remoteness distinctions'],\n}\n\n#<> Same with the second feature you are interested in.\nfeature2, values2 = \"Future Tenses\", {\n    \"None\" : ['No inflectional future'],\n    \"Some\" : ['Inflectional future exists'],\n}\n\n\n#<> Set a path for where to save stuff (save_path = None if you dont want to save)\nsave_path = feature1.replace(\" \", \"\")+\"_\"+feature2.replace(\" \", \"\")  #? Default is .\/Feature1_Feature2[...].csv","18c364e3":"#? Makes libraries and functions available for usage.\n\nfrom io import StringIO              #* Creates an intermediate representation, so we dont need to save interemediate results to a file\nimport re                            #* fancy manipulation of text\n\nimport pandas as pd                  #* manipulation of tabular data \nfrom pandas import DataFrame as DF   #? This class represents tabular data.\nimport scipy.stats                   \nCHIVERT = scipy.stats.chi2.sf        #? I think this is the same as Excels CHIDIST (CHIVERT)\n\nimport holoviews as hv               #* easy fancy plotting\nhv.extension('bokeh')            \n\n%output size=150                     #<> set the figures size \n\n\n\n#? Transforms the data into an easier machine-readable format. \ncsv = \"\".join(map(lambda r: r[0]+';'+r[1]+';'+r[2]+'\\n', zip(*[filter(lambda s: s, map(str.strip, re.split('[\/\\t\\n]', wals)))]*3)))\ndata = pd.read_csv(StringIO(csv), sep=';')    #? Creates a computerized representation. \n\n#? Saves the data to a file, which can be opened with Excel if you like that more.\nif save_path: data.to_csv(save_path+\"_original.csv\")   \n    \ndata   #? The last value in a cell is shown ","0b79fed6":"#? Performs some rearranging into a more usable format\n\n#? First, by summing the Number of languages for each value of the second feature into their category.\nmeasur = DF({name : sum(data.loc[data.iloc[:,1]==value].set_index(data.columns[0])['Number of languages']                       \n                        for value in values) \n             for name, values in values2.items()}\n           ).astype(int, 0)   #* Treats numbers as numbers.\n\n#? Second, by summing the Number of languages for each value of the first feature into their category.\nmeasur = DF({name1 : sum(measur.loc[value] \n                         for value in values) \n             for name1, values in values1.items()}\n           ).transpose().rename_axis(feature1, axis=0).rename_axis(feature2, axis=1)\n        \n#? Calculates sums of Number of languages for rows and columns.\nmeasur['Total'] = measur.sum(1)\nmeasur.loc['Total'] = measur.sum()\n\nif save_path: measur.to_csv(save_path+\".csv\")   \nmeasur","34cec583":"#? The expected values are the row sum times the column sum divided by the total sum.\nexpect = DF({v2 : ((measur['Total'] * measur.loc['Total'][v2]) \/ measur['Total']['Total'])[values1] \n             for v2 in values2}).rename_axis(feature2, axis=1)\n                \nexpect","000882b4":"                      #<> set this higher, if your x-labels intersect  \u2193\n%opts Curve [xlabel=feature1, ylabel='Number of languages', xrotation=0, title=feature2]\n#* \u2191 Remembers annotations for plots.\n\n#* With the [:-1] we drop the last row or column containing the summations.\nplot_measur = hv.Overlay([hv.Curve(measur[[v2]][:-1], label=v2) for v2 in values2])\nplot_expect = hv.Overlay([hv.Curve(expect[[v2]], label=v2+\" (expected)\") for v2 in values2])\n\nhv.HoloMap({\"hide\" : plot_measur, \"show\" : plot_measur * plot_expect}, \"Expectations\")","1304edc6":"#? Normalizes the numbers of languages of the second feature by the number of the first feature.\n#? -> This eliminates biases in the first feature.\n\nplot_measur = hv.Overlay([hv.Curve(DF((measur[v2]\/measur['Total'])[:-1], columns=[v2]), label=v2) for v2 in values2])\nplot_expect = hv.Overlay([hv.Curve(DF((expect[v2]\/measur['Total'][:-1]), columns=[v2]), label=v2+\" (expected)\") for v2 in values2])\n\nhv.HoloMap({\"hide\" : plot_measur, \"show\" : plot_measur * plot_expect}, \"Expectations\").opts(ylabel='Fraction of languages')","9b26c966":"#? The deviation is just the difference between the measured value and the expected\n                   \ndeviations = measur.iloc[:-1,:-1] - expect  #* with the -1s we drop the summations\ndeviations","b498155d":"#? the usual chi\u00b2 formula\n\nchi2 = (deviations**2 \/ expect).values.sum()\nprint(f'\u03c7\u00b2 = {chi2:.5f}')","25ebaa9a":"#? Calculates the probability of our measured distribution to be statistically random.\n#? The second argument is the number of the degrees of freedom in our data:\n#       The number of categories in feature 1 - 1 multiplied by the number of categories in the second feature -1.\n#*      In this case we account for out table containing an additional row and column for summation (-> -2).\n\nprob = CHIVERT(chi2, (measur.shape[0]-2) * (measur.shape[1]-2))\nprint(f\"p = {prob:.2%}\")","c1b5fc10":"If prob is lower than 5%, we accept the hypothesis that features 1 and 2 correlate somehow.","9b83444d":"# WALS extractor \/ evaluator\n_Benjamin Eckhardt ([benjamin.eckhardt@stud.uni-goettingen.de](mailto:benjamin.eckhardt@stud.uni-goettingen.de)), winter term 2021, Georg-August-Universit\u00e4t G\u00f6ttingen_\n\n### This script can  \n\n- read whole tables from WALS.info by copy paste\n\n- export this tables to excel\n\n- evaluate and plot correlations just by listing the feature values you are interested in\n\n- perform a $\\chi^2$-test to verify a hypothesis\n\n- only combinations of _two_ features are supported\n\n### Usage\n\n- Comments with `#<>` tell you what to do.\n\n- Comments with `#?` tell you what is happening. \n\n- Comments with `#*` explain technical details.\n\n- Information about specific functions is available on the internet."}}