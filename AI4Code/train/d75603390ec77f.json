{"cell_type":{"fa7d1421":"code","bd980291":"code","b84c7927":"code","3fd13ec4":"code","47608fe9":"code","e96a55e0":"code","15f1c588":"code","f4baba0d":"code","d1935a02":"code","6483b40c":"code","b91639b5":"code","437df1f2":"code","c4405424":"code","6a6e42a8":"markdown","1583c53a":"markdown","9ad799c3":"markdown","e56f1cb9":"markdown","e9ccc96b":"markdown","99060bde":"markdown","b8f12da2":"markdown","87191c14":"markdown","7e820a29":"markdown","d522bee4":"markdown"},"source":{"fa7d1421":"from keras.optimizers import Adam\nfrom keras.models import Sequential #untuk bentuk model\nfrom keras.layers import Conv2D,MaxPool2D,Flatten,Dense,Dropout,Input,AveragePooling2D #untuk layer\nfrom keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img #untuk memproses citra\nfrom keras.applications import ResNet50V2\nfrom keras.models import Model\n\n%matplotlib inline\nfrom matplotlib import pyplot as plt #untuk visualisasi data\nfrom matplotlib import image as mpimg\n\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sn \nimport numpy as np #struktur data","bd980291":"import os\ndata_dir = \"\/kaggle\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\"\nprint(os.listdir(data_dir))","b84c7927":"# contoh citra yg terinfeksi\nimg_path=\"\/kaggle\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/Parasitized\/C33P1thinF_IMG_20150619_114756a_cell_179.png\" \ngambar = mpimg.imread(img_path)\nplt.imshow(gambar)","3fd13ec4":"# contoh citra yg tidak terinfeksi\nimg_path2=\"\/kaggle\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/Uninfected\/C1_thinF_IMG_20150604_104722_cell_60.png\" \ngambar2 = mpimg.imread(img_path2)\nplt.imshow(gambar2)","47608fe9":"#total data = 27.558\ndim = 128\nbatch = 32\n\ndatagen = ImageDataGenerator(rescale=1\/255.0, validation_split=0.3,\n    rotation_range=20,\n    zoom_range=0.05,\n    width_shift_range=0.05,\n    height_shift_range=0.05,\n    shear_range=0.05,\n    horizontal_flip=True)\n\ntrain_data = datagen.flow_from_directory(data_dir, target_size=(dim,dim), batch_size=batch, class_mode = 'categorical', subset = 'training')\nvalidation_data = datagen.flow_from_directory(data_dir, target_size=(dim,dim), batch_size=batch, class_mode = 'categorical', subset = 'validation', shuffle=False)","e96a55e0":"baseModel = ResNet50V2(include_top=False, \n                     input_tensor=Input(shape=(dim, dim, 3)))\n\nheadModel = baseModel.output\nheadModel = AveragePooling2D(pool_size=(4, 4))(headModel)\nheadModel = Flatten(name=\"flatten\")(headModel)\nheadModel = Dense(128, activation=\"relu\")(headModel)\nheadModel = Dropout(0.5)(headModel)\nheadModel = Dense(2, activation=\"softmax\")(headModel)\n\nmodel = Model(inputs=baseModel.input, outputs=headModel)\n\nmodel.summary() #menampilkan struktur model","15f1c588":"EP = 30\n\nmodel.compile(optimizer=\"adam\", \n              loss=\"binary_crossentropy\", \n              metrics=[\"accuracy\"])","f4baba0d":"history = model.fit(train_data, validation_data=validation_data, epochs=EP) \nprint(\"*** proses training selesai ***\")","d1935a02":"plt.style.use(\"ggplot\")\nplt.figure()\n\nplt.plot(np.arange(0, EP), history.history[\"loss\"], label=\"train_loss\")\nplt.plot(np.arange(0, EP), history.history[\"val_loss\"], label=\"val_loss\")\nplt.plot(np.arange(0, EP), history.history[\"accuracy\"], label=\"train_acc\")\nplt.plot(np.arange(0, EP), history.history[\"val_accuracy\"], label=\"val_acc\")\n\nplt.title(\"Training Loss and Accuracy\")\nplt.xlabel(\"Epoch #\")\nplt.ylabel(\"Loss\/Accuracy\")\nplt.legend(loc=\"lower left\")","6483b40c":"test_loss, test_acc = model.evaluate(validation_data)","b91639b5":"predictions = model.predict(validation_data) ","437df1f2":"y_pred = np.argmax(predictions, axis=-1)\n#y_pred = [1 * (x[0]>=0.5) for x in predictions]\ncf_matrix = confusion_matrix(validation_data.classes, y_pred)\n\ngroup_names = [\"True Pos\",\"False Pos\",\"False Neg\",\"True Neg\"]\ngroup_counts = [\"{0:0.0f}\".format(value) for value in cf_matrix.flatten()]\ngroup_percentages = [\"{0:.2%}\".format(value) for value in cf_matrix.flatten()\/np.sum(cf_matrix)]\n\nlabels = [f\"{v1}\\n{v2}\\n{v3}\" for v1, v2, v3 in zip(group_names,group_counts,group_percentages)]\nlabels = np.asarray(labels).reshape(2,2)\n\ncategories = [\"Terinfeksi\",\"Normal\"]\nsn.heatmap(cf_matrix, annot=labels, fmt='', xticklabels=categories, yticklabels=categories, cmap='Blues')\nprint(\"Normal = tidak terinfeksi\")\n","c4405424":"model.save('.\/cnn_malaria_biner.h5')","6a6e42a8":"## Hasil dari penelitan sebelumnya\n\n![Screen%20Shot%202020-11-27%20at%2016.41.33.png](attachment:Screen%20Shot%202020-11-27%20at%2016.41.33.png)","1583c53a":"## Visualisasi hasil training\n","9ad799c3":"## Evaluasi model ","e56f1cb9":"## Praproses data","e9ccc96b":"### Menampilkan contoh citra sel yang terinfeksi malaria","99060bde":"## Konfigurasi training","b8f12da2":"# Klasifikasi Sel Darah yang Terinfeksi Malaria dengan ResNet","87191c14":"## Proses pembelajaran ","7e820a29":"### Menampilkan contoh citra sel yang tidak terinfeksi malaria (normal)","d522bee4":"## Prediksi data testing\nSetelah model selesai melakukan traning dan hasil dari model dapat dilihat dari evaluasi diatas.<br>\nPada tahap ini dilakukan prediksi dan menampilkan hasil prediksi dengan confussion matrix."}}