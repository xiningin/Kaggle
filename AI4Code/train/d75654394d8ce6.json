{"cell_type":{"6ceafbea":"code","5e4eeced":"code","3fee4328":"code","c125cf58":"code","0c52671c":"code","6edc2ce9":"code","7218a8ec":"code","a7d08c99":"code","efb55e43":"code","6885acb7":"code","ca8f22e9":"code","d0bda130":"code","16e36921":"code","90b05aa5":"code","6180922e":"code","3d47c4c0":"code","c3b0e79f":"code","8a39db17":"code","c24208bd":"code","cea9a47a":"code","069b3a55":"code","0329ea52":"code","3adea54a":"code","a40b7f3c":"code","e2d5dc2b":"code","26df75af":"code","60023844":"code","f5fe0d3c":"code","7e67d2a0":"code","10a6f6f2":"code","d8b14e2e":"code","f0b24a7d":"code","6fb99cf0":"code","3b91ba21":"code","29b942df":"code","59c7f00b":"code","c831d30b":"code","6de74a1a":"code","ee692dff":"code","e887350b":"code","5f5ba066":"code","5d8af97b":"code","fa11ec52":"code","89c57514":"code","dbfe0235":"code","45ee94c8":"code","24c9b271":"code","01167de0":"code","4f5b43fe":"markdown","f35856f0":"markdown","5920812e":"markdown","4e05752e":"markdown","2782f416":"markdown","c22e5993":"markdown","776ae4ca":"markdown","66e37c8b":"markdown","d51c0be9":"markdown","e0276781":"markdown"},"source":{"6ceafbea":"import pandas as pd\nimport numpy as np\nimport gc,os\nfrom fbprophet import Prophet\nfrom datetime import timedelta\nfrom tqdm import tqdm, tnrange\nfrom multiprocessing import Pool, cpu_count\nimport matplotlib.pyplot as plt\nfrom joblib import Parallel, delayed\npd.set_option('display.max_rows', 10)\npd.plotting.register_matplotlib_converters()\nnp.set_printoptions(precision=6, suppress=True)","5e4eeced":"df = pd.read_csv('..\/input\/fbprophet\/clean_table_latest.csv')\ndf","3fee4328":"# check the end date\nmax(df.Date)","c125cf58":"df['Loc'] = df['Loc'].replace(['Korea, South'],'South Korea')\ndf[df['Loc'].str.contains(\"Korea\")]","0c52671c":"US_overall = df[(df[\"Province_State\"].isna()) & (df.Country_Region=='US')].reset_index(drop=True)\nUS_overall","6edc2ce9":"others_overall = df[(df[\"Province_State\"].notna()) & (df.Country_Region!='US')].reset_index(drop=True)\nothers_overall['Loc'].unique()","7218a8ec":"df_states = df[(df[\"Province_State\"].notna())].reset_index(drop=True)\ndf_states['Country_Region'].unique()","a7d08c99":"df_country = df[~(df[\"Province_State\"].notna())].reset_index(drop=True)","efb55e43":"df_country[df_country['Country_Region']=='US']","6885acb7":"country_list = ['Australia','Canada','China']\n\nfor i in country_list:\n    exec('df_{} = df[df.Country_Region==\"{}\"].reset_index(drop=True)'.format(i, i))\n    exec('temp_sum_df1_{} = df_{}.groupby([\"Date\"])[\"ConfirmedCases\",\"Fatalities\",\"Population\",\"value\",\"med\",\"medres\",\"madm\",\"stdres\"].sum()'.format(i, i))\n    exec('temp_sum_df2_{} = df_{}.groupby([\"Date\"])[\"year\",\"week\",\"day\",\"epiweek\",\"Date\",\"Id\",\"Weight\"].first()'.format(i, i))\n    exec('temp_sum_df_{} = pd.concat([temp_sum_df1_{},temp_sum_df2_{}], axis=1)'.format(i, i, i))\n    exec('df_new_{} = df_{}[df_{}.Province_State==df_{}.Province_State.values[0]].reset_index(drop=True)'.format(i, i, i, i))\n    \n    exec('df_new_{} = df_new_{}.assign(Fatalities= temp_sum_df_{}[\"Fatalities\"].values)'.format(i, i, i))\n    exec('df_new_{} = df_new_{}.assign(ConfirmedCases= temp_sum_df_{}[\"ConfirmedCases\"].values)'.format(i, i, i))\n    exec('df_new_{} = df_new_{}.assign(Population= temp_sum_df_{}[\"Population\"].values)'.format(i, i, i))\n    exec('df_new_{} = df_new_{}.assign(value= temp_sum_df_{}[\"value\"].values)'.format(i, i, i))\n    \n    exec('df_new_{} = df_new_{}.assign(year= temp_sum_df_{}[\"year\"].values)'.format(i, i, i))\n    exec('df_new_{} = df_new_{}.assign(week= temp_sum_df_{}[\"week\"].values)'.format(i, i, i))\n    exec('df_new_{} = df_new_{}.assign(day= temp_sum_df_{}[\"day\"].values)'.format(i, i, i))\n    exec('df_new_{} = df_new_{}.assign(epiweek= temp_sum_df_{}[\"epiweek\"].values)'.format(i, i, i))\n    exec('df_new_{} = df_new_{}.assign(Date= temp_sum_df_{}[\"Date\"].values)'.format(i, i, i))\n    exec('df_new_{} = df_new_{}.assign(Id= temp_sum_df_{}[\"Id\"].values)'.format(i, i, i))\n    exec('df_new_{} = df_new_{}.assign(Weight= temp_sum_df_{}[\"Weight\"].values)'.format(i, i, i))\n    \n    \n    \n    exec('df_new_{} = df_new_{}.assign(med= temp_sum_df_{}[\"med\"].values)'.format(i, i, i))\n    exec('df_new_{} = df_new_{}.assign(medres= temp_sum_df_{}[\"medres\"].values)'.format(i, i, i))\n    exec('df_new_{} = df_new_{}.assign(madm= temp_sum_df_{}[\"madm\"].values)'.format(i, i, i))\n    exec('df_new_{} = df_new_{}.assign(stdres= temp_sum_df_{}[\"stdres\"].values)'.format(i, i, i))\n    \n    exec('df_new_{} = df_new_{}.assign(Country_Region= \"{}\")'.format(i, i, i))\n    exec('df_new_{} = df_new_{}.assign(Province_State= np.nan)'.format(i, i, i))\n    \n    exec('df_new_{} = df_new_{}.assign(Place=\"{}\")'.format(i, i, i))\n    exec('df_new_{} = df_new_{}.assign(Loc= \"{}\")'.format(i, i, i))\n    \n    exec('del temp_sum_df1_{}'.format(i))\n    exec('del temp_sum_df2_{}'.format(i))\n    exec('del temp_sum_df_{}'.format(i))\n    \n    exec('df = df.append(df_new_{})'.format(i))","ca8f22e9":"df[df.Province_State.notna()].reset_index(drop=True)","d0bda130":"df[df.Province_State.isna()].reset_index(drop=True)","16e36921":"df = df.reset_index(drop=True)\ndf.to_csv('all_raw.csv',index=False)","90b05aa5":"df_us = df[(df[\"Province_State\"].notna()) & (df.Country_Region=='US')].reset_index(drop=True)\ndf_us","6180922e":"df_us.to_csv('us_state_raw.csv',index=False)","3d47c4c0":"val=7\n\ndf[f\"cc_rolling_mean_t{val}\"] = df.groupby([\"Loc\"])[\"ConfirmedCases\"].transform(lambda x: x.shift(0).rolling(val).mean())\ndf[f\"f_rolling_mean_t{val}\"] = df.groupby([\"Loc\"])[\"Fatalities\"].transform(lambda x: x.shift(0).rolling(val).mean())\ndf","c3b0e79f":"df.to_csv('all_7ma.csv',index=False)","8a39db17":"df_us[f\"cc_rolling_mean_t{val}\"] = df_us.groupby([\"Loc\"])[\"ConfirmedCases\"].transform(lambda x: x.shift(0).rolling(val).mean())\ndf_us[f\"f_rolling_mean_t{val}\"] = df_us.groupby([\"Loc\"])[\"Fatalities\"].transform(lambda x: x.shift(0).rolling(val).mean())\ndf_us.to_csv('us_state_7ma.csv',index=False)","c24208bd":"vaccine_country_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/owid\/covid-19-data\/master\/public\/data\/vaccinations\/vaccinations.csv')\nvaccine_country_df","cea9a47a":"vaccine_country_df = vaccine_country_df.rename(columns={'date': 'Date','location':'Loc'})\nvaccine_country_df = vaccine_country_df.drop('iso_code', 1)\nvaccine_country_df","069b3a55":"temp_column = vaccine_country_df['Loc']\nvaccine_country_df.drop(labels=['Loc'], axis=1, inplace = True)\nvaccine_country_df.insert(1, 'Loc', temp_column)\nvaccine_country_df","0329ea52":"vaccine_country_df['Loc'] = vaccine_country_df['Loc'].replace(['United States'],'US')","3adea54a":"vaccine_country_df[(vaccine_country_df.Loc=='US') & (vaccine_country_df.people_fully_vaccinated_per_hundred>0)]","a40b7f3c":"df[df['Loc'].str.contains(\"Korea\")]","e2d5dc2b":"vaccine_country_df[vaccine_country_df['Loc'].str.contains(\"Korea\")]","26df75af":"vaccine_country_df.to_csv('vaccine_country_df.csv',index=False)","60023844":"vaccine_state_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/owid\/covid-19-data\/master\/public\/data\/vaccinations\/us_state_vaccinations.csv')\nvaccine_state_df","f5fe0d3c":"vaccine_state_df['location'].unique()","7e67d2a0":"# vaccine_state_df[vaccine_state_df['location'].str.contains(\"New\")]\n\nvaccine_state_df['location'].replace({\"New York State\": \"New York\"}, inplace=True)","10a6f6f2":"vaccine_state_df = vaccine_state_df.rename(columns={'date': 'Date','location': 'Loc'})\nvaccine_state_df","d8b14e2e":"vaccine_state_df['Loc'] = 'US ' + vaccine_state_df['Loc']\nvaccine_state_df","f0b24a7d":"vaccine_state_df.to_csv('vaccine_state_df.csv',index=False)","6fb99cf0":"vaccine_state_df[vaccine_state_df.Loc==\"US New York\"]","3b91ba21":"df","29b942df":"df_us","59c7f00b":"vaccine_country_df","c831d30b":"vaccine_state_df","6de74a1a":"colum_state = vaccine_state_df.columns\nprint(colum_state)\n\ncolum_country = vaccine_country_df.columns\nprint(colum_country)","ee692dff":"vaccine_country_df = vaccine_country_df.rename(columns={'people_fully_vaccinated_per_hundred': 'people_fully_vaccinated_100'})\nvaccine_country_df","e887350b":"us_state_all = pd.merge(df_us, vaccine_state_df,  how='inner', on=['Date','Loc'])\nus_state_all","5f5ba066":"# no missing date, but missing vaccination data\n\nus_state_all_left = pd.merge(df_us, vaccine_state_df,  how='left', on=['Date','Loc'])\nus_state_all_left = us_state_all_left[us_state_all_left.County.isna()]\nus_state_all_left","5d8af97b":"us_state_all_right = pd.merge(df_us, vaccine_state_df,  how='right', on=['Date','Loc'])\nus_state_all_right","fa11ec52":"us_lefover = pd.concat([us_state_all_right,us_state_all_left]).drop_duplicates(keep=False)\nus_lefover[us_lefover.Loc=='US Wyoming']","89c57514":"us_state_all_left.to_csv('us_state_all_left.csv',index=False)","dbfe0235":"df_country = df[df.Province_State.isna()].reset_index(drop=True)\ndf_country","45ee94c8":"country_all = pd.merge(df_country, vaccine_country_df,  how='inner', on=['Date','Loc'])\ncountry_all","24c9b271":"country_all_left = pd.merge(df_country, vaccine_country_df,  how='left', on=['Date','Loc'])\ncountry_all_left","01167de0":"country_all_left.to_csv('country_all_left.csv',index=False)","4f5b43fe":"# Adding vaccination data","f35856f0":"## Country level ALL","5920812e":"# Adding moving average","4e05752e":"## Country level","2782f416":"# Country level cases dataset","c22e5993":"# Merge dataframes","776ae4ca":"## An example of how we calculate our metrics\n\n4 people take part in a vaccination program, to be given a vaccine that requires 2 doses to be effective against the disease.\n\n* Dina has received 2 doses;\n* Joel has received 1 dose;\n* Tommy has received 1 dose;\n* Ellie has not received any dose.\n\nIn our data:\n\n* The total number of doses administered (`total_vaccinations`) will be equal to `4` (2 + 1 + 1);\n* The total number of people vaccinated (`people_vaccinated`) will be equal to `3` (Dina, Joel, Tommy);\n* The total number of people fully vaccinated (`people_fully_vaccinated`) will be equal to `1` (Dina).\n","66e37c8b":"Because the df_country has the total number of cases for most of countries, except 'Australia', 'Canada', 'China'. Their dataset are provided at the state level. Therefore, I will create their values in the df_country dataframe.","d51c0be9":"## State level","e0276781":"## United States vaccination data\n\nStored in [`us_state_vaccinations.csv`](us_state_vaccinations.csv). State-by-state data on United States COVID-19 vaccinations. We rely on the data updated daily by the [United States Centers for Disease Control and Prevention](https:\/\/covid.cdc.gov\/covid-data-tracker\/#vaccinations).\n\n* `location`: name of the state or federal entity.\n* `date`: date of the observation.\n* `total_vaccinations`: total number of doses administered. This is counted as a single dose, and may not equal the total number of people vaccinated, depending on the specific dose regime (e.g. people receive multiple doses). If a person receives one dose of the vaccine, this metric goes up by 1. If they receive a second dose, it goes up by 1 again.\n* `total_vaccinations_per_hundred`: `total_vaccinations` per 100 people in the total population of the state.\n* `daily_vaccinations_raw`: daily change in the total number of doses administered. It is only calculated for consecutive days. This is a raw measure provided for data checks and transparency, but we strongly recommend that any analysis on daily vaccination rates be conducted using `daily_vaccinations` instead.\n* `daily_vaccinations`: new doses administered per day (7-day smoothed). For countries that don't report data on a daily basis, we assume that doses changed equally on a daily basis over any periods in which no data was reported. This produces a complete series of daily figures, which is then averaged over a rolling 7-day window. An example of how we perform this calculation can be found [here](https:\/\/github.com\/owid\/covid-19-data\/issues\/333#issuecomment-763015298).\n* `daily_vaccinations_per_million`: `daily_vaccinations` per 1,000,000 people in the total population of the state.\n* `people_vaccinated`: total number of people who received at least one vaccine dose. If a person receives the first dose of a 2-dose vaccine, this metric goes up by 1. If they receive the second dose, the metric stays the same.\n* `people_vaccinated_per_hundred`: `people_vaccinated` per 100 people in the total population of the state.\n* `people_fully_vaccinated`: total number of people who received all doses prescribed by the vaccination protocol. If a person receives the first dose of a 2-dose vaccine, this metric stays the same. If they receive the second dose, the metric goes up by 1.\n* `people_fully_vaccinated_per_hundred`: `people_fully_vaccinated` per 100 people in the total population of the state.\n\nThe following three variables are optional, and they are dropped in the dataframe.\n* `total_distributed`: cumulative counts of COVID-19 vaccine doses recorded as shipped in CDC's Vaccine Tracking System.\n* `total_distributed_per_hundred`: cumulative counts of COVID-19 vaccine doses recorded as shipped in CDC's Vaccine Tracking System per 100 people in the total population of the state.\n* `share_doses_used`: share of vaccination doses administered among those recorded as shipped in CDC's Vaccine Tracking System."}}