{"cell_type":{"8abd1d7b":"code","72b892e1":"code","14bd53bc":"code","1f7da178":"code","f5149dca":"code","be6ffd47":"code","a3d64c03":"code","a825cca9":"code","d816ce92":"code","f520d804":"code","e34706cd":"code","e4271644":"code","702ec624":"code","82dc631b":"code","327d4c43":"code","c933c2ed":"code","264aefba":"code","72cfbcdb":"code","03f9939f":"code","39310cf7":"code","0feb1cf3":"code","d6474b4e":"code","8c236c06":"code","f23047f2":"code","c85c96e7":"code","95149200":"code","10fc62f2":"markdown","aae93bf1":"markdown","4d81d9f8":"markdown","e0a8f960":"markdown","16f3d610":"markdown","04dbdd71":"markdown","b4d7d18f":"markdown"},"source":{"8abd1d7b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","72b892e1":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV","14bd53bc":"train=pd.read_csv('..\/input\/titanic\/train.csv')\ntest=pd.read_csv('..\/input\/titanic\/test.csv')","1f7da178":"data_list=[train,test]\n\ndef remove_col(data_list):\n    trans_data=[]\n    col_list=['PassengerId','Name','Ticket','Cabin']\n    for data in data_list:\n        Data=data.drop(col_list,axis=1)\n        trans_data.append(Data)\n    Data1=trans_data[0]\n    Data2=trans_data[1]\n    return Data1,Data2\n\nTrain,Test=remove_col(data_list)","f5149dca":"data_list2=[Train,Test]\ndef sex(data_list):\n    trans_data=[]\n    for data in data_list:\n        data['Sex']=data['Sex'].map({'male':0,'female':1})\n        trans_data.append(data)\n    data1=trans_data[0]\n    data2=trans_data[1]\n        \n    return data1,data2\n\nTrain,Test=sex(data_list2)","be6ffd47":"sns.countplot(train['Survived'])","a3d64c03":"sns.countplot(train['Survived'],hue=train['Pclass'])","a825cca9":"sns.countplot(train['Sex'],hue=train['Survived'])","d816ce92":"sns.distplot(train['Age'])","f520d804":"sns.catplot(x='Survived',y='Age',data=train,kind='box',hue='Pclass',col='Sex')","e34706cd":"sns.catplot(x='Survived',kind='count',data=train,height=5,hue='Pclass',col='Sex')","e4271644":"sns.countplot(train['Pclass'])","702ec624":"sns.boxplot(x=train['Pclass'],y=train['Age'])","82dc631b":"a=train.groupby('Pclass')['Age']\nb=train.groupby('Pclass')['Fare']\nprint('Median Age of people in Pclass 1 is : {} years \\t Mean Fare of people in Pclass 1 is : {:.2f} '.format(a.get_group(1).median(),b.get_group(1).mean()))\nprint('Median Age of people in Pclass 2 is : {} years \\t Mean Fare of people in Pclass 2 is : {:.2f} '.format(a.get_group(2).median(),b.get_group(2).mean()))\nprint('Median Age of people in Pclass 3 is : {} years \\t Mean Fare of people in Pclass 3 is : {:.2f} '.format(a.get_group(3).median(),b.get_group(3).mean()))","327d4c43":"def impute(cols):\n    age=cols[0]\n    pclass=cols[1]\n    if pd.isnull(age):\n        if pclass==1:\n            return 37\n        elif pclass==2:\n            return 29\n        else:\n            return 24\n    else:\n        return age\n    \nTrain['Age'] = Train[['Age','Pclass']].apply(impute,axis=1)\nTest['Age'] = Test[['Age','Pclass']].apply(impute,axis=1)","c933c2ed":"sns.countplot(train['Embarked'])","264aefba":"Train['Embarked']= Train['Embarked'].fillna('S')","72cfbcdb":"print(Test[Test['Fare'].isnull()])\nprint('\\nFor Pclass =3 ,The mean fare was 13.68')","03f9939f":"Test['Fare']=Test['Fare'].fillna(13.68)","39310cf7":"train_with_dummies=pd.get_dummies(Train,drop_first=True)\ntest_with_dummies=pd.get_dummies(Test,drop_first=True)","0feb1cf3":"x_train=train_with_dummies.drop('Survived',axis=1)\ny_train=train_with_dummies['Survived']\nx_test=test_with_dummies","d6474b4e":"lda=LDA()\nx_train_lda=lda.fit_transform(x_train,y_train)\nx_test_lda=lda.transform(x_test)","8c236c06":"from sklearn.linear_model import LogisticRegression\nclassifier=LogisticRegression()\nclassifier.fit(x_train_lda,y_train)\nprediction=classifier.predict(x_test_lda)\n","f23047f2":"results=pd.read_csv('..\/input\/titanic\/gender_submission.csv')","c85c96e7":"y_test=results['Survived']","95149200":"from sklearn.metrics import confusion_matrix,accuracy_score\ncm=confusion_matrix(y_test,prediction)\nsns.heatmap(cm,annot=True)\nprint('Accurcay score is : {:.2f}%'.format(accuracy_score(y_test,prediction)*100))","10fc62f2":"**Allocating**","aae93bf1":"**FILLING NULL VALUES**","4d81d9f8":"**Creating Dummies**","e0a8f960":"**Logistic Regression**","16f3d610":"**EDA**","04dbdd71":"**From the data we can say that most of casualty were from 3rd class as more passenger were travelling from 3rd class.\nMost of the casualty suffered were male from 3rd Class. and the age of the males died were 20 - 34yrs.**","b4d7d18f":"**Dimensionality Reduction using LDA**"}}