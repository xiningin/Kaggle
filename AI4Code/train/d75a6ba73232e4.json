{"cell_type":{"f9a6c181":"code","1818f90a":"code","94b49f08":"code","1d0ffe89":"code","35740df2":"code","279d84af":"code","9c89232a":"code","44a180f5":"code","a58a358a":"code","cb7bfa9d":"code","a9801200":"code","5ca1bc43":"code","dc6f4d05":"code","0489bcba":"code","c1911466":"code","dc34786a":"code","bb37fa6b":"code","dcbf4df9":"code","bd64cacc":"code","e3986550":"code","d584b004":"code","fc2c63f0":"code","9507e7be":"code","3a9e61b8":"code","6c30d393":"code","dec3b638":"code","9cfc59b6":"code","94031524":"code","aa794113":"code","9a59225e":"code","1d2ad7d5":"code","06a7bef4":"code","661bf016":"code","a7d3c830":"code","acc4e845":"code","f2f2de14":"code","85b1eade":"code","59e9d72a":"code","5918dbc8":"code","07bc4e9a":"markdown","599da9fb":"markdown","66b0e9be":"markdown","b350fb46":"markdown","909f53db":"markdown"},"source":{"f9a6c181":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1818f90a":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","94b49f08":"from fastai.conv_learner import *","1d0ffe89":"PATH = '..\/input\/fruits-360_dataset\/'","35740df2":"read_path = '..\/input\/fruits-360_dataset\/*'","279d84af":"ls {read_path}","9c89232a":"ls {PATH}","44a180f5":"from fastai.plots import * ","a58a358a":"def get_1st(path, pattern): return glob(f'{path}\/*{pattern}.*')[2]","cb7bfa9d":"list_paths = [f\"{PATH}fruits-360\/Training\/Apple Braeburn\/0_100.jpg\", f\"{PATH}fruits-360\/Training\/Apple Golden 1\/116_100.jpg\"]\ntitles = [\"Apple Braeburn\", \"Apple Golden 1\" ]\nplots_from_files(list_paths,titles=titles,maintitle=\"Multi-label clasification\")","a9801200":"# the planet.py file\n\nfrom fastai.imports import *\nfrom fastai.transforms import *\nfrom fastai.dataset import *\nfrom sklearn.metrics import fbeta_score\nimport warnings\n\ndef f2(preds, targs, start=0.17, end=0.24, step=0.01):\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"ignore\")\n        return max([fbeta_score(targs, (preds>th), 2, average='samples')\n                   for th in np.arange(start,end,step)])","5ca1bc43":"metrics=[f2]\nf_model = resnet34","dc6f4d05":"# import the training dataset\nimport glob \nimport cv2\n\ntraining_fruit_img = []\ntraining_label = []\nfor dir_path in glob.glob(\"..\/input\/*\/fruits-360\/Training\/*\"):\n    img_label = dir_path.split(\"\/\")[-1]\n    for img_path in glob.glob(os.path.join(dir_path, \"*.jpg\")):\n        img = cv2.imread(img_path)\n        training_fruit_img.append(img)\n        training_label.append(img_label)\ntraining_fruit_img = np.array(training_fruit_img)\ntraining_label = np.array(training_label)\nlen(np.unique(training_label))","0489bcba":"label_to_id_dict = {v:i for i,v in enumerate(np.unique(training_label))}\nid_to_label_dict = {v: k for k, v in label_to_id_dict.items()}","c1911466":"id_to_label_dict","dc34786a":"label_ids = np.array([label_to_id_dict[x] for x in training_label])","bb37fa6b":"label_ids.shape,training_label.shape","dcbf4df9":"training_path = f'{PATH}fruits-360\/'\ndef get_data(sz):\n    tfms = tfms_from_model(f_model, sz, aug_tfms=transforms_top_down, max_zoom=1.05)\n    return ImageClassifierData.from_paths(path=training_path,trn_name=\"Training\", val_name=\"Test\", tfms=tfms)","bd64cacc":"data = get_data(256)","e3986550":"y","d584b004":"plt.imshow(data.val_ds.denorm(to_np(x))[54]*1.4)","fc2c63f0":"sz=64\ndata = data.resize(int(sz*1.3), '\/tmp')","9507e7be":"arch = resnet34","3a9e61b8":"learn = ConvLearner.pretrained(arch,data, precompute=True)","6c30d393":"lrf=learn.lr_find()\nlearn.sched.plot()","dec3b638":"\nlearn.fit(lrs=0.01,n_cycle=3)","9cfc59b6":"learn.sched.plot_loss()","94031524":"log_preds = learn.predict()\npreds = np.argmax(log_preds, axis=1)\n","aa794113":"preds","9a59225e":"probs = np.exp(log_preds[:,1])","1d2ad7d5":"def rand_by_mask(mask): return np.random.choice(np.where(mask)[0], 4, replace=False)\ndef rand_by_correct(is_correct): return rand_by_mask((preds == data.val_y)==is_correct)","06a7bef4":"\ndef plot_val_with_title(idxs, title):\n    imgs = np.stack([data.val_ds[x][0] for x in idxs])\n    title_probs = [probs[x] for x in idxs]\n    print(title)\n    return plots(data.val_ds.denorm(imgs), rows=1, titles=title_probs)\n\ndef plots(ims, figsize=(12,6), rows=1, titles=None):\n    f = plt.figure(figsize=figsize)\n    for i in range(len(ims)):\n        sp = f.add_subplot(rows, len(ims)\/\/rows, i+1)\n        sp.axis('Off')\n        if titles is not None: sp.set_title(titles[i], fontsize=16)\n        plt.imshow(ims[i])\n        \ndef load_img_id(ds, idx): return np.array(PIL.Image.open(training_path+ds.fnames[idx]))\n\ndef plot_val_with_title(idxs, title):\n    imgs = [load_img_id(data.val_ds,x) for x in idxs]\n    title_probs = [probs[x] for x in idxs]\n    print(title)\n    return plots(imgs, rows=1, titles=title_probs, figsize=(16,8))","661bf016":"plot_val_with_title(rand_by_correct(True), \"Correct Predictions\")","a7d3c830":"plot_val_with_title(rand_by_correct(False), \"Wrong Predictions\")","acc4e845":"\ndef  most_by_mask(mask, mult):\n    idxs = np.where(mask)[0]\n    return idxs[np.argsort(mult * probs[idxs])[:4]]\n\ndef most_by_correct(y, is_correct): \n    mult = -1 if (y==1)==is_correct else 1\n    return most_by_mask((preds == data.val_y)==is_correct & (data.val_y == y), mult)","f2f2de14":"i = 0\nplot_val_with_title(most_by_correct(i,True), \"Most Correct\" + data.classes[i])","85b1eade":"i = 10\nplot_val_with_title(most_by_correct(i,True), \"Most Correct\" + data.classes[i])","59e9d72a":"i = 15\nplot_val_with_title(most_by_correct(i,True), \"Most Correct\" + data.classes[i])","5918dbc8":"i = 68\nplot_val_with_title(most_by_correct(i, True), \"Most Correct \" + data.classes[i])","07bc4e9a":"# Find Learning Rate","599da9fb":"This is to kept as a reference of the folder structure","66b0e9be":"Import the planet.py \n","b350fb46":"This step is to see the different classes in our dataset","909f53db":"# Lets view our results"}}