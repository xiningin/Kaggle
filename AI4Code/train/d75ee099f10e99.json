{"cell_type":{"43efc651":"code","d405e64e":"code","b84cf68b":"code","e800e7f8":"code","b40f0438":"code","1ba48880":"markdown","c0536a53":"markdown","621a7cf9":"markdown"},"source":{"43efc651":"import pandas as pd\nimport plotly.graph_objects as go\nimport matplotlib.colors as mcolors\nimport string\nimport numpy as np","d405e64e":"np.random.seed(42)\nnodes = np.random.choice([letter for letter in string.ascii_letters], 10, replace=False)\nnode_sizes = [int(size) for size in np.random.choice(np.geomspace(100, 10000, 10), 10, replace=False)]\nnode_dict = dict(zip(nodes, node_sizes))\n\nres_df = pd.DataFrame()\nfor source_node, source_node_size in node_dict.items():\n    num_links = np.random.choice(len(node_dict) - 1)\n    target_nodes = np.random.choice(nodes, num_links, replace=False)\n    weights = np.random.rand(num_links)\n    weights = weights \/ weights.sum()\n    turnover = np.random.rand() * source_node_size\n    link_vals = np.round(weights * turnover)\n    target_nodes = np.append(target_nodes, source_node)\n    link_vals = np.append(link_vals, source_node_size - sum(link_vals))\n    temp_df = (pd.DataFrame({'target_node': target_nodes, 'link_val': link_vals})\n               .assign(source_node=source_node))\n    res_df = pd.concat([res_df, temp_df], axis=0)\nres_df.sort_values('source_node').head(10)","b84cf68b":"color_list = np.random.choice(list(mcolors.CSS4_COLORS.keys()), len(nodes), replace=False)\ncolor_dict = dict(zip(nodes, [f'rgba{mcolors.to_rgb(col) + (.4, )}' for col in color_list]))","e800e7f8":"segments_to_num = dict(zip(nodes, [*range(len(nodes))]))\nres_df = res_df.assign(source_node_num = lambda x: x['source_node'].map(segments_to_num),\n                       target_node_num = lambda x: x['target_node'].map(segments_to_num),\n                       link_col = lambda x: x['source_node'].map(color_dict))\nres_df.head()","b40f0438":"fig = go.Figure(data=[go.Sankey(\n    node = dict(label=nodes, color=color_list),\n    link = dict(\n      source = res_df.source_node_num,\n      target = res_df.target_node_num,\n      value = res_df.link_val,\n      color = res_df.link_col\n  ))])\n\nfig.update_layout(\n    title_text=\"Sankey diagram\",\n    font_size=10, autosize=True)\nfig.show()","1ba48880":"# Map nodes to numeric, add link colors","c0536a53":"# Create synthetic data","621a7cf9":"# Sankey diagram"}}