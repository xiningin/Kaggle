{"cell_type":{"a540ade8":"code","1764ba41":"code","f353aeac":"code","590fd465":"code","338440e4":"code","6e98f60d":"code","7f1f1811":"code","dcb0de98":"code","fb26afa2":"code","cee091ef":"code","934f6ab3":"code","42e1531f":"code","2b732c62":"code","845d464f":"code","b2484577":"code","7dc0b931":"code","d64e6ec5":"code","7fe6929e":"code","7c53b280":"code","4c44cedb":"code","0dc88ba7":"code","51f645d0":"code","3ae8782a":"code","fb8d5228":"code","588c40eb":"code","70e1b74e":"code","3641c805":"code","696626d2":"code","3656e298":"code","e4a112c1":"code","86333d1b":"code","b6f30abe":"code","8eab166a":"code","d722a600":"markdown","68af1763":"markdown","fae12f91":"markdown","36b33b46":"markdown","c86d4db5":"markdown","3b631296":"markdown","8f755570":"markdown"},"source":{"a540ade8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1764ba41":"from warnings import filterwarnings\nfilterwarnings('ignore')\nimport seaborn as sn\nimport matplotlib.pyplot as plt\n","f353aeac":"df= pd.read_csv('..\/input\/water-potability\/water_potability.csv')","590fd465":"df.head()","338440e4":"df.isnull().sum()","6e98f60d":"df.info()","7f1f1811":"df.describe()","dcb0de98":"df_new= df.dropna()","fb26afa2":"df_new.isnull().sum()","cee091ef":"df_new.info()","934f6ab3":"sn.countplot(df_new['Potability'])\nplt.show()","42e1531f":"numeric_columns= list(df.columns)\nfig, axs = plt.subplots(5,2, figsize= (20,30))\nplt.figtext(.5,.9,'Distributions of various features', fontsize=50, ha='center')\naxs=axs.flatten()\nfor n,i in enumerate(numeric_columns):\n    g=sn.histplot(x=df[i],ax=axs[n],kde=True)\n    g.set(xlabel=None)\n    axs[n].set_title('Distribution of column : {}'.format(i))\n","2b732c62":"numeric_columns= list(df.columns)\nfig, axs = plt.subplots(5,2, figsize= (20,30))\nplt.figtext(.5,.9,'Detecting Outliers', fontsize=50, ha='center')\naxs=axs.flatten()\nfor n,i in enumerate(numeric_columns):\n    g= sn.boxplot(x=df[i],ax=axs[n])\n    g.set(xlabel=None)\n    axs[n].set_title('Box Plot : {}'.format(i))\n","845d464f":"G= df_new.groupby('Potability')\nG.describe()","b2484577":"p0=G.get_group(0)\np1=G.get_group(1)","7dc0b931":"numeric_columns= list(p0.columns)\nfig, axs = plt.subplots(5,2, figsize= (20,30))\nplt.figtext(.5,.9,'Features when potability= 0', fontsize=50, ha='center')\naxs=axs.flatten()\nfor n,i in enumerate(numeric_columns):\n    g=sn.histplot(x=p0[i],ax=axs[n],kde=True)\n    g.set(xlabel=None)\n    axs[n].set_title('Distribution of column : {}'.format(i))\n","d64e6ec5":"numeric_columns= list(p1.columns)\nfig, axs = plt.subplots(5,2, figsize= (20,30))\nplt.figtext(.5,.9,'Features when Potability = 1', fontsize=50, ha='center')\naxs=axs.flatten()\nfor n,i in enumerate(numeric_columns):\n    g=sn.histplot(x=p1[i],ax=axs[n],kde=True)\n    g.set(xlabel=None)\n    axs[n].set_title('Distribution of column : {}'.format(i))\n","7fe6929e":"plt.figure(figsize=(20,10))\nsn.heatmap(p0.drop(columns='Potability').corr(),annot=True)\nplt.show()","7c53b280":"plt.figure(figsize=(20,10))\nsn.heatmap(p1.drop(columns='Potability').corr(),annot=True)\nplt.show()","4c44cedb":"from tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, Input , Dropout , Concatenate , BatchNormalization as BN\nfrom tensorflow.keras.utils import to_categorical","0dc88ba7":"input_layer= Input(shape= [len(df.columns)-1])\nfc1= BN()(Dense(64,activation='relu')(input_layer))\ndrop1=Dropout(0.5)(fc1)\nfc2= BN()(Dense(128,activation='relu')(drop1))\nfc3= BN()(Dense(256,activation='relu')(fc2))\n\ndrop2= Dropout(0.5)(fc3)\n\nfc4= BN()(Dense(512,activation= 'relu')(drop2))\n\nfc5= BN()(Dense(1024,activation= 'relu')(fc4))\nfc6= BN()(Dense(2048,activation= 'relu')(fc2))\n\n                                      \nout= Dense(1,activation= 'sigmoid')(fc6)\nmodel = Model(inputs= input_layer, outputs= out)\nmodel.summary()","51f645d0":"data=np.array(df_new.iloc[:,:-1])","3ae8782a":"from sklearn.model_selection import train_test_split as tts\ntrain_data,test_data,train_lab,test_lab= tts(data,df_new.Potability)","fb8d5228":"from sklearn.preprocessing import MinMaxScaler as MMS\nscaler= MMS()\nX=scaler.fit_transform(train_data)","588c40eb":"Y= np.array(list(train_lab))","70e1b74e":"x_test= scaler.transform(test_data)\ny_test=np.array(list(test_lab))","3641c805":"model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])","696626d2":"model.fit(X,Y,epochs= 100, batch_size=64)","3656e298":"model.evaluate(x_test,y_test)","e4a112c1":"from sklearn.ensemble import RandomForestClassifier as RFC\nmodel1= RFC()","86333d1b":"model1.fit(X,Y)","b6f30abe":"model1.score(X,Y)","8eab166a":"model1.score(x_test,y_test)","d722a600":"# ANN : ","68af1763":"**This is something unusual. I expected certain degree of skewness and kurtosis when comparing distributions of features from both the classes seperately. But surpisingly, they follow the same pattern which means, there's not much to distinguish between potable water and unsafe water. For example, we can see the pH value of water labelled as 'Potable' exceeding 10. I observed the same thing going on with other features too. How does that make sense?**\n\n**But still just to see if a neural network or a random forest classifier could catch some underlying patterns in these distributions, I'll proceed with training two models: a Neural Network and an RFC.** ","fae12f91":"# What's wrong with the data?","36b33b46":"**Training score :**","c86d4db5":"# Random Forest Classifier : ","3b631296":"# Training the models: ","8f755570":"**You always expect a neural network to catch complicated correlations between various features and the output but obviously, the validation score just isn't good enough. What do you think about the data?**"}}