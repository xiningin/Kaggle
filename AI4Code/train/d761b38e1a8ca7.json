{"cell_type":{"7db2f347":"code","0e75fc27":"code","654cf1da":"code","c6614027":"code","fbbcd2c4":"code","f0cb3ab7":"code","1c3634cd":"code","d2240021":"code","9bb22d7d":"code","1f138e5b":"code","9d9493a8":"code","8cf0c2df":"code","5df7e740":"code","dce7c841":"code","7676ec31":"code","ee5dffe0":"code","e015c29c":"code","892e86a1":"code","b7762edc":"code","cb98713c":"markdown"},"source":{"7db2f347":"# import libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cv2\nfrom keras.layers import Dense, Flatten, AveragePooling2D, Dropout\nfrom keras.models import Model\nfrom keras.applications.vgg16 import VGG16\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam","0e75fc27":"pwd","654cf1da":"data_path = \"\/kaggle\/input\/pothole-and-plain-rode-images\/My Dataset\/\"","c6614027":"# Check images\nimg = cv2.imread(data_path+\"train\"+'\/'+\"Pothole\"+\"\/\"+\"1.jpg\")","fbbcd2c4":"# pothole \nplt.imshow(img)","f0cb3ab7":"img.shape","1c3634cd":"# Data agumentation on train and test\n\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   zoom_range = 0.2,\n                                   rotation_range=15,\n                                   horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)","d2240021":"# create dataset train\ntraining_set = train_datagen.flow_from_directory(data_path + 'train',\n                                                 target_size = (300, 300),\n                                                 batch_size = 16,\n                                                 class_mode = 'categorical',\n                                                 shuffle=True)","9bb22d7d":"# Create test data set\ntest_set = test_datagen.flow_from_directory(data_path + 'test',\n                                            target_size = (300, 300),\n                                            batch_size = 16,\n                                            class_mode = 'categorical',\n                                            shuffle = False)","1f138e5b":"# Model creation with changes\n\nmodel = VGG16(input_shape=(300,300,3),include_top=False)\n\nfor layer in model.layers:\n    layer.trainable = False\n\nnewModel = model.output\nnewModel = AveragePooling2D()(newModel)\nnewModel = Flatten()(newModel)\nnewModel = Dense(128, activation=\"relu\")(newModel)\nnewModel = Dropout(0.5)(newModel)\nnewModel = Dense(2, activation='softmax')(newModel)\n\nmodel = Model(inputs=model.input, outputs=newModel)","9d9493a8":"model.summary()","8cf0c2df":"opt=Adam(learning_rate=0.0001)\nmodel.compile(optimizer=opt,loss='categorical_crossentropy',metrics=['accuracy'])","5df7e740":"history = model.fit_generator(training_set,\n                              validation_data=test_set,\n                              epochs=10)    ","dce7c841":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs=range(len(acc))","7676ec31":"plt.plot(epochs,acc,label='Trainin_acc',color='blue')\nplt.plot(epochs,val_acc,label='Validation_acc',color='red')\nplt.legend()\nplt.title(\"Training and Validation Accuracy\")","ee5dffe0":"plt.plot(epochs,loss,label='Training_loss',color='blue')\nplt.plot(epochs,val_loss,label='Validation_loss',color='red')\nplt.legend()\nplt.title(\"Training and Validation loss\")","e015c29c":"class_dict = {0:'Plain',\n              1:'Pothole'}","892e86a1":"# New Data for testing \n\nfile_path =  '\/kaggle\/\/input\/test-pothole\/plain3.png'\ntest_image = cv2.imread(file_path)\ntest_image = cv2.resize(test_image, (300,300),interpolation=cv2.INTER_CUBIC)\nplt.imshow(test_image)\ntest_image = np.expand_dims(test_image,axis=0)\nprobs = model.predict(test_image)\npred_class = np.argmax(probs)\n\npred_class = class_dict[pred_class]\n\nprint('prediction class: ',pred_class)","b7762edc":"# New Data for testing \n\nfile_path =  '\/kaggle\/\/input\/test-pothole\/pothole3.jfif'\ntest_image = cv2.imread(file_path)\ntest_image = cv2.resize(test_image, (300,300),interpolation=cv2.INTER_CUBIC)\nplt.imshow(test_image)\ntest_image = np.expand_dims(test_image,axis=0)\nprobs = model.predict(test_image)\npred_class = np.argmax(probs)\n\npred_class = class_dict[pred_class]\n\nprint('prediction class: ',pred_class)","cb98713c":"# Thank You"}}