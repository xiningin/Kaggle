{"cell_type":{"3233ead2":"code","45b8392b":"code","fa37131d":"code","e9ae112e":"code","09085385":"code","a9552b2a":"code","ffc7c475":"code","7a93985f":"code","78b714a8":"code","92a6b066":"code","24472e84":"code","97bac2e6":"markdown","f61c5a2d":"markdown"},"source":{"3233ead2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","45b8392b":"# Import Library\n\nimport numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport cv2\nfrom PIL import Image\n\nfrom keras import layers\nfrom tensorflow.keras import applications \nfrom keras.applications import MobileNetV2\nfrom keras.callbacks import Callback, ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential, load_model\nfrom keras.optimizers import Adam\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import cohen_kappa_score, accuracy_score, confusion_matrix\n\nfrom tqdm import tqdm","fa37131d":"df = pd.read_csv('..\/input\/keep-babies-safe\/dataset\/test.csv')\nprint(df.shape)\ndf.head()","e9ae112e":"max(df['Image'].value_counts())","09085385":"def display_samples(df, columns=4, rows=3):\n    fig=plt.figure(figsize=(5*columns, 4*rows))\n\n    for i in range(columns*rows):\n        image_path = df.loc[i,'Image']\n        img = cv2.imread(f'..\/input\/keep-babies-safe\/dataset\/images\/{image_path}')\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        \n        fig.add_subplot(rows, columns, i+1)\n        plt.imshow(img)\n    \n    plt.tight_layout()\n\ndisplay_samples(df)","a9552b2a":"def preprocess_image(image_path, desired_size=224):\n    im = Image.open(image_path)\n    im = im.resize((desired_size, )*2, resample=Image.BILINEAR)\n    \n    return im\n\nN = df.shape[0]\nx= np.empty((N, 224, 224, 3), dtype=np.float32)\n\nfor i, image_path in enumerate(tqdm(df['Image'])):\n    x[i, :, :, :] = preprocess_image(\n        f'..\/input\/keep-babies-safe\/dataset\/images\/{image_path}'\n    )","ffc7c475":"mobilenet = MobileNetV2(\n    alpha = 1.3,\n    weights='imagenet',\n    include_top=False,\n    input_shape=(224,224,3)\n)\n\ndef build_model():\n    model = Sequential()\n    model.add(mobilenet)\n    model.add(layers.GlobalAveragePooling2D())\n    \n    return model","7a93985f":"model = build_model()\nmodel.summary()","78b714a8":"#from sklearn.model_selection import train_test_split\n\n#y = df['Image']\n#x_train, x_valid, y_train_images, y_valid_images = train_test_split(x, y, test_size=0.2, random_state=42)\n\n#train_features = model.predict(x_train)\n#valid_features = model.predict(x_valid)\n\n#from sklearn.cluster import KMeans\n#kmeans = KMeans(n_clusters=2, random_state=0).fit(train_features)\n#print(kmeans.score(valid_features))","92a6b066":"train_features = model.predict(x)\n\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=2, random_state=0).fit_predict(train_features)","24472e84":"def display_samples(df, columns=4, rows=10):\n    fig=plt.figure(figsize=(5*columns, 4*rows))\n\n    for i in range(columns*rows):\n        image_path = df.loc[i,'Image']\n        img = cv2.imread(f'..\/input\/keep-babies-safe\/dataset\/images\/{image_path}')\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        \n        fig.add_subplot(rows, columns, i+1)\n        plt.title(kmeans[i])\n        plt.imshow(img)\n    \n    plt.tight_layout()\n\ndisplay_samples(df)","97bac2e6":"Versi split","f61c5a2d":"versi fit_predict"}}