{"cell_type":{"f4a5278f":"code","9ced695a":"code","a93c05cf":"code","2b45c0f7":"code","7f52e0a5":"code","a8d11de7":"code","6a915ec8":"code","689b8ace":"code","6a7ed6d6":"code","2a59487a":"code","c745a71c":"code","183078f5":"code","aa679217":"code","8d4162cf":"code","9353d880":"code","720ed309":"code","937c6587":"code","50229387":"code","10df886f":"code","cc69b963":"code","4aa76be9":"code","102d49ed":"code","c33a131e":"code","8ccba6b6":"code","72f3c77a":"code","048a80f3":"code","d56c7dd4":"code","3456e0f9":"code","4b76ce29":"code","00b30d0c":"code","d52e0b1c":"markdown","8c72a5a3":"markdown","63615b44":"markdown"},"source":{"f4a5278f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9ced695a":"train_features=pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_features.csv\")\ntrain_features.head()","a93c05cf":"train_features.shape","2b45c0f7":"test_features=pd.read_csv(\"\/kaggle\/input\/lish-moa\/test_features.csv\")\ntest_features.head()","7f52e0a5":"#The dataset has categorical data, but the model needs something numerical. So let's apply one hot encoding here.\ntrain_features.cp_type.unique()","a8d11de7":"train_features['cp_type'] =train_features.cp_type.map(lambda x:0 if x == 'trt_cp' else 1)\ntest_features['cp_type'] =test_features.cp_type.map(lambda x:0 if x == 'trt_cp' else 1)","6a915ec8":"train_features.cp_dose.unique()","689b8ace":"train_features['cp_dose'] =train_features.cp_dose.map(lambda x:0 if x =='D1' else 1)\ntest_features['cp_dose'] =test_features.cp_dose.map(lambda x:0 if x =='D1' else 1)","6a7ed6d6":"replace_values = {24:1, 48:2, 72: 3}\ntrain_features['cp_time'] =train_features['cp_time'].map(replace_values)\ntest_features['cp_time'] =test_features['cp_time'].map(replace_values)","2a59487a":"#check cleaned table\ntrain_features_new=train_features.iloc[:, 1:]\ntrain_features_new.head()","c745a71c":"test_features.shape","183078f5":"train_targets_scored=pd.read_csv(\"\/kaggle\/input\/lish-moa\/train_targets_scored.csv\")\ntrain_targets_scored.head()","aa679217":"train_targets_scored.shape","8d4162cf":"#remove sig_id for computing in a later stage\ntrain_targets_new=train_targets_scored.iloc[:, 1:]","9353d880":"#calculate sum per column and find the top 100s. (The top 100 most significant factors?)\ntrain_targets_scored = train_targets_scored.set_index('sig_id')\ntrain_targets_scored.sum().nlargest(70)","720ed309":"train_targets_scored.sum().nsmallest(20)","937c6587":"train_targets_scored.sum(axis=1).nsmallest(200)","50229387":"train_targets_scored.sum().nlargest(20).plot.bar(figsize=(18,15))","10df886f":"test_features.head()","cc69b963":"train_features.shape","4aa76be9":"test_features.shape","102d49ed":"train_targets_scored.shape","c33a131e":"test_features_new=test_features.iloc[:, 1:]\ntest_features_new.head()","8ccba6b6":"#normalize dataset ((x-min)\/(max-min))\n\nnormalized_train_features=(train_features_new-train_features_new.min())\/(train_features_new.max()-train_features_new.min())\nnormalized_test_features=(test_features_new-test_features_new.min())\/(test_features_new.max()-test_features_new.min())","72f3c77a":"from sklearn.decomposition import PCA\n#PCA will hold 80% of the variance and the number of components required to capture 80% variance will be used\npca = PCA(0.8)\npca.fit(normalized_train_features)\n\nPCA(copy=True, iterated_power='auto', n_components=0.8, random_state=42,\n  svd_solver='auto', tol=0.0, whiten=False)\nprint(pca.n_components_)\n","048a80f3":"X = pca.transform(normalized_train_features.values)\nX_test = pca.transform(normalized_test_features.values)\ny = train_targets_new.values\n","d56c7dd4":"# Extremely sloooooow!\n\nfrom skmultilearn.model_selection import IterativeStratification\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.linear_model import LogisticRegression\nimport sklearn.metrics as metrics\nfrom sklearn.metrics import precision_score,recall_score, confusion_matrix, classification_report, accuracy_score, f1_score, log_loss\n\n#from sklearn.model_selection import train_test_split\ny = train_targets_new.values\n\ncnt=0\naccu_losses=[]\nk_fold = IterativeStratification(n_splits=5, order=1)\nfor train_index, val_index in k_fold.split(X, y):\n\n    X_train, X_val = X[train_index], X[val_index]\n    y_train, y_val = y[train_index], y[val_index]\n    \n    clf =OneVsRestClassifier(LogisticRegression(solver='lbfgs',penalty='l2'), n_jobs=-1)\n\n    clf.fit(X_train, y_train)  \n \n    # Making a prediction on the test set \n\n    pred_train =clf.predict_proba(X_train)\n    pred_val = clf.predict_proba(X_val)\n    pred_test = clf.predict_proba(X_test)\n  \n   \n    # Evaluating the model\n       \n    # Evaluating the model\n    loss = log_loss(np.ravel(y_val), np.ravel(pred_val))\n    print (\"Fold\", cnt, \"loss value is:\",loss)\n    accu_losses.append(loss)\n    cnt+=1\nprint('mean of loss', np.mean(accu_losses))","3456e0f9":"print('mean of loss', np.mean(accu_losses))","4b76ce29":"samp = pd.read_csv('\/kaggle\/input\/lish-moa\/sample_submission.csv')","00b30d0c":"samp.iloc[:,1:] = pred_test\nsamp.to_csv('submission.csv',index=False)","d52e0b1c":"**One hot encoding**","8c72a5a3":"**PCA**","63615b44":" **Normalization**"}}