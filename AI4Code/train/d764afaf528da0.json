{"cell_type":{"30bf88f0":"code","c21e5564":"code","4a69144e":"code","6f3375d1":"code","9a6cad33":"code","c04413a0":"code","a240ac9a":"code","8c3774b4":"code","90eb6ce6":"code","78406290":"code","893128ea":"code","898d86ba":"code","ae855e34":"code","859c5618":"code","881f980b":"code","11e55dd3":"code","e942b405":"code","650cc1bf":"code","6cda63b4":"code","6cc6b1d7":"code","24b18e90":"code","dc2c94d6":"code","6a65d15e":"code","edbc49ab":"code","9cb9eaf8":"code","00cea659":"code","e552f03f":"code","809e1f11":"code","ca31fd02":"code","dbcbc8a1":"code","434396f1":"code","07844dbb":"code","b1f2d97c":"code","4f513a2a":"markdown","ff1add8e":"markdown","44f19f76":"markdown","3261b71c":"markdown","2f89dfa6":"markdown","1b26dfab":"markdown","56e57fc7":"markdown","5e5f84b9":"markdown","962711ae":"markdown","77825d41":"markdown","a924c193":"markdown","e1ce9013":"markdown","35e55b02":"markdown","a291efe8":"markdown","68984045":"markdown","45a99b33":"markdown","223c7519":"markdown","e98cc7ef":"markdown","c23d3652":"markdown","093cebc0":"markdown","75f3415f":"markdown","5b9edd27":"markdown"},"source":{"30bf88f0":"from keras.models import Model, Sequential\nfrom keras.layers import Activation, Dense, BatchNormalization, Dropout, Conv2D, Conv2DTranspose, MaxPooling2D, UpSampling2D, Input, Reshape\nfrom keras import backend as K\nfrom keras.optimizers import Adam\nfrom tensorflow.metrics import mean_iou\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport glob\nimport PIL\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom keras.preprocessing.image import ImageDataGenerator\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","c21e5564":"import re\nnumbers = re.compile(r'(\\d+)')\ndef numericalSort(value):\n    parts = numbers.split(value)\n    parts[1::2] = map(int, parts[1::2])\n    return parts","4a69144e":"filelist_trainx = sorted(glob.glob('..\/input\/*\/trainx\/*.jpg'), key=numericalSort)\nX_train = np.array([np.array(Image.open(fname)) for fname in filelist_trainx])\n\nfilelist_trainy = sorted(glob.glob('..\/input\/*\/trainy\/*.jpg'), key=numericalSort)\nY_train = np.array([np.array(Image.open(fname)) for fname in filelist_trainy])\n\nfilelist_testx = sorted(glob.glob('..\/input\/*\/testx\/*.jpg'), key=numericalSort)\nX_test = np.array([np.array(Image.open(fname)) for fname in filelist_testx])\n\nfilelist_testy = sorted(glob.glob('..\/input\/*\/testy\/*.jpg'), key=numericalSort)\nY_test = np.array([np.array(Image.open(fname)) for fname in filelist_testy])\n\nfilelist_valx = sorted(glob.glob('..\/input\/*\/validationx\/*.jpg'), key=numericalSort)\nX_val = np.array([np.array(Image.open(fname)) for fname in filelist_valx])\n\nfilelist_valy = sorted(glob.glob('..\/input\/*\/validationy\/*.jpg'), key=numericalSort)\nY_val = np.array([np.array(Image.open(fname)) for fname in filelist_valy])\n","6f3375d1":"img_num = 112\nplt.figure(figsize=(16,4))\nplt.subplot(1,2,1)\nplt.imshow(X_test[img_num])\nplt.title('Original Image')\nplt.subplot(1,2,2)\nplt.imshow(Y_test[img_num], plt.cm.binary_r)\nplt.title('Ground Truth Mask')\nplt.show()","9a6cad33":"def jaccard_distance(y_true, y_pred, smooth=100):\n    intersection = K.sum(K.abs(y_true * y_pred), axis=-1)\n    sum_ = K.sum(K.square(y_true), axis = -1) + K.sum(K.square(y_pred), axis=-1)\n    jac = (intersection + smooth) \/ (sum_ - intersection + smooth)\n    return (1 - jac)","c04413a0":"\ndef iou(y_true, y_pred, smooth = 100):\n    intersection = K.sum(K.abs(y_true * y_pred), axis=-1)\n    sum_ = K.sum(K.square(y_true), axis = -1) + K.sum(K.square(y_pred), axis=-1)\n    jac = (intersection + smooth) \/ (sum_ - intersection + smooth)\n    return jac","a240ac9a":"(x_train, y_train), (x_test, y_test), (x_val, y_val) = (X_train, Y_train), (X_test, Y_test), (X_val, Y_val)","8c3774b4":"def model_seg(epochs_num,save_name):\n\n    # Convolution Layers (BatchNorm after non-linear activation)\n\n    img_input = Input(shape= (192, 256, 3))\n    x = Conv2D(16, (5, 5), padding='same', name='conv1',strides= (1,1))(img_input)\n    x = BatchNormalization(name='bn1')(x)\n    x = Activation('relu')(x)\n    x = Conv2D(32, (3, 3), padding='same', name='conv2')(x)\n    x = BatchNormalization(name='bn2')(x)\n    x = Activation('relu')(x)\n    x = MaxPooling2D()(x)\n    x = Conv2D(64, (4, 4), padding='same', name='conv3')(x)\n    x = BatchNormalization(name='bn3')(x)\n    x = Activation('relu')(x)\n    x = Conv2D(64, (4, 4), padding='same', name='conv4')(x)\n    x = BatchNormalization(name='bn4')(x)\n    x = Activation('relu')(x)\n    x = MaxPooling2D()(x)\n    \n    x = Dropout(0.5)(x)\n    \n    x = Conv2D(512, (3, 3), padding='same', name='conv5')(x)\n    x = BatchNormalization(name='bn5')(x)\n    x = Activation('relu')(x)\n    x = Dense(1024, activation = 'relu', name='fc1')(x)\n    x = Dense(1024, activation = 'relu', name='fc2')(x)\n\n    # Deconvolution Layers (BatchNorm after non-linear activation)\n\n    x = Conv2DTranspose(256, (3, 3), padding='same', name='deconv1')(x)\n    x = BatchNormalization(name='bn6')(x)\n    x = Activation('relu')(x)\n    x = UpSampling2D()(x)\n    x = Conv2DTranspose(256, (3, 3), padding='same', name='deconv2')(x)\n    x = BatchNormalization(name='bn7')(x)\n    x = Activation('relu')(x)\n    x = Conv2DTranspose(128, (3, 3), padding='same', name='deconv3')(x)\n    x = BatchNormalization(name='bn8')(x)\n    x = Activation('relu')(x)\n    x = UpSampling2D()(x)\n    x = Conv2DTranspose(1, (3, 3), padding='same', name='deconv4')(x)\n    x = BatchNormalization(name='bn9')(x)\n    \n    x = Dropout(0.5)(x) # not original\n\n    x = Activation('sigmoid')(x)\n    pred = Reshape((192,256))(x)\n\n    model = Model(inputs=img_input, outputs=pred)\n    model.summary()\n    model.compile(optimizer= Adam(lr = 0.003), loss= [jaccard_distance], metrics=[iou])\n    \n    hist = model.fit(x_train, y_train, epochs= epochs_num, batch_size= 18,validation_data=(X_val, y_val), verbose=1)\n    model.save(save_name)\n\n    accuracy = model.evaluate(x=x_test,y=y_test,batch_size=18)\n    print(\"Accuracy: \",accuracy[1])","90eb6ce6":"model_seg(epochs_num= 1, save_name= \"model_exact_epoch_1.h5\")","78406290":"img_input = Input(shape= (192, 256, 3))\nx = Conv2D(16, (5, 5), padding='same', name='conv1',strides= (1,1))(img_input)\nx = BatchNormalization(name='bn1')(x)\nx = Activation('relu')(x)\nx = Conv2D(32, (3, 3), padding='same', name='conv2')(x)\nx = BatchNormalization(name='bn2')(x)\nx = Activation('relu')(x)\nx = MaxPooling2D()(x)\nx = Conv2D(64, (4, 4), padding='same', name='conv3')(x)\nx = BatchNormalization(name='bn3')(x)\nx = Activation('relu')(x)\nx = Conv2D(64, (4, 4), padding='same', name='conv4')(x)\nx = BatchNormalization(name='bn4')(x)\nx = Activation('relu')(x)\nx = MaxPooling2D()(x)\n\nx = Dropout(0.5)(x)\n\nx = Conv2D(512, (3, 3), padding='same', name='conv5')(x)\nx = BatchNormalization(name='bn5')(x)\nx = Activation('relu')(x)\nx = Dense(1024, activation = 'relu', name='fc1')(x)\nx = Dense(1024, activation = 'relu', name='fc2')(x)\n\n# Deconvolution Layers (BatchNorm after non-linear activation)\n\nx = Conv2DTranspose(256, (3, 3), padding='same', name='deconv1')(x)\nx = BatchNormalization(name='bn6')(x)\nx = Activation('relu')(x)\nx = UpSampling2D()(x)\nx = Conv2DTranspose(256, (3, 3), padding='same', name='deconv2')(x)\nx = BatchNormalization(name='bn7')(x)\nx = Activation('relu')(x)\nx = Conv2DTranspose(128, (3, 3), padding='same', name='deconv3')(x)\nx = BatchNormalization(name='bn8')(x)\nx = Activation('relu')(x)\nx = UpSampling2D()(x)\nx = Conv2DTranspose(1, (3, 3), padding='same', name='deconv4')(x)\nx = BatchNormalization(name='bn9')(x)\n\nx = Dropout(0.5)(x) # not original\n\nx = Activation('sigmoid')(x)\npred = Reshape((192,256))(x)","893128ea":"model = Model(inputs=img_input, outputs=pred)\nmodel.compile(optimizer= Adam(lr = 0.003), loss= [jaccard_distance], metrics=[iou])","898d86ba":"model.load_weights('model_exact_epoch_1.h5')","ae855e34":"img_num = 111\nimg_pred = model.predict(X_test[img_num].reshape(1,192,256,3))\nplt.figure(figsize=(16,16))\nplt.subplot(1,3,1)\nplt.imshow(X_test[img_num])\nplt.subplot(1,3,2)\nplt.imshow(Y_test[img_num], plt.cm.binary_r)\nplt.subplot(1,3,3)\nplt.imshow(img_pred.reshape(192, 256), plt.cm.binary_r)\nplt.show()","859c5618":"img_num = 35\nimg_pred = model.predict(X_test[img_num].reshape(1,192,256,3))\nplt.figure(figsize=(16,16))\nplt.subplot(1,3,1)\nplt.imshow(X_test[img_num])\nplt.subplot(1,3,2)\nplt.imshow(Y_test[img_num], plt.cm.binary_r)\nplt.subplot(1,3,3)\nplt.imshow(img_pred.reshape(192, 256), plt.cm.binary_r)\nplt.show()","881f980b":"img_num = 7\nimg_pred = model.predict(X_test[img_num].reshape(1,192,256,3))\nplt.figure(figsize=(16,16))\nplt.subplot(1,3,1)\nplt.imshow(X_test[img_num])\nplt.subplot(1,3,2)\nplt.imshow(Y_test[img_num], plt.cm.binary_r)\nplt.subplot(1,3,3)\nplt.imshow(img_pred.reshape(192, 256), plt.cm.binary_r)\nplt.show()","11e55dd3":"img_num = 54\nimg_pred = model.predict(X_test[img_num].reshape(1,192,256,3))\nplt.figure(figsize=(16,16))\nplt.subplot(1,3,1)\nplt.imshow(X_test[img_num])\nplt.subplot(1,3,2)\nplt.imshow(Y_test[img_num], plt.cm.binary_r)\nplt.subplot(1,3,3)\nplt.imshow(img_pred.reshape(192, 256), plt.cm.binary_r)\nplt.show()","e942b405":"img_num = 50\nimg_pred = model.predict(X_test[img_num].reshape(1,192,256,3))\nplt.figure(figsize=(16,16))\nplt.subplot(1,3,1)\nplt.imshow(X_test[img_num])\nplt.subplot(1,3,2)\nplt.imshow(Y_test[img_num], plt.cm.binary_r)\nplt.subplot(1,3,3)\nplt.imshow(img_pred.reshape(192, 256), plt.cm.binary_r)\nplt.show()","650cc1bf":"from skimage import data, img_as_float, exposure, io","6cda63b4":"img_num = 50\nplt.figure(figsize=(8,8))\nplt.subplot(1,2,1)\nplt.imshow(X_test[img_num])\nplt.title('Original Image')\nplt.subplot(1,2,2)\nplt.imshow(exposure.equalize_hist(X_test[img_num]))\nplt.title('Equalized Image')\nplt.show()","6cc6b1d7":"x_train = x_train.astype('float')\nfor i in range(2000):\n    x_train[i] = exposure.equalize_hist(x_train[i])\n    \nx_test = x_test.astype('float')\nfor i in range(600):\n    x_test[i] = exposure.equalize_hist(x_test[i])\n    \nx_val = x_val.astype('float')\nfor i in range(150):\n    x_val[i] = exposure.equalize_hist(x_val[i])","24b18e90":"plt.figure(figsize=(20,9))\nplt.subplot(2,4,1)\nplt.imshow(X_test[0])\nplt.title('Original Image')\nplt.subplot(2,4,2)\nplt.imshow(x_test[0])\nplt.title('Equalized Image')\nplt.subplot(2,4,3)\nplt.imshow(X_test[7])\nplt.title('Original Image')\nplt.subplot(2,4,4)\nplt.imshow(x_test[7])\nplt.title('Equalized Image')\nplt.subplot(2,4,5)\nplt.imshow(X_test[16])\nplt.title('Original Image')\nplt.subplot(2,4,6)\nplt.imshow(x_test[16])\nplt.title('Equalized Image')\nplt.subplot(2,4,7)\nplt.imshow(X_test[72])\nplt.title('Original Image')\nplt.subplot(2,4,8)\nplt.imshow(x_test[72])\nplt.title('Equalized Image')\nplt.show()","dc2c94d6":"model_seg(epochs_num= 1, save_name= \"model_exact_equalized_epoch_1.h5\")","6a65d15e":"img_input = Input(shape= (192, 256, 3))\nx = Conv2D(16, (5, 5), padding='same', name='conv1')(img_input)\nx = BatchNormalization(name='bn1')(x)\nx = Activation('relu')(x)\nx = Conv2D(32, (3, 3), padding='same', name='conv2')(x)\nx = BatchNormalization(name='bn2')(x)\nx = Activation('relu')(x)\nx = MaxPooling2D()(x)\nx = Conv2D(64, (4, 4), padding='same', name='conv3')(x)\nx = BatchNormalization(name='bn3')(x)\nx = Activation('relu')(x)\nx = Conv2D(64, (4, 4), padding='same', name='conv4')(x)\nx = BatchNormalization(name='bn4')(x)\nx = Activation('relu')(x)\nx = MaxPooling2D()(x)\nx = Conv2D(512, (3, 3), padding='same', name='conv9')(x)\nx = BatchNormalization(name='bn9')(x)\nx = Activation('relu')(x)\nx = Dense(1024, activation = 'relu', name='fc1')(x)\nx = Dense(1024, activation = 'relu', name='fc2')(x)\n\n# Deconvolution Layers (BatchNorm after non-linear activation)\n\nx = Conv2DTranspose(256, (3, 3), padding='same', name='deconv1')(x)\nx = BatchNormalization(name='bn19')(x)\nx = Activation('relu')(x)\nx = UpSampling2D()(x)\nx = Conv2DTranspose(256, (3, 3), padding='same', name='deconv2')(x)\nx = BatchNormalization(name='bn12')(x)\nx = Activation('relu')(x)\nx = Conv2DTranspose(128, (3, 3), padding='same', name='deconv3')(x)\nx = BatchNormalization(name='bn13')(x)\nx = Activation('relu')(x)\nx = UpSampling2D()(x)\nx = Conv2DTranspose(1, (3, 3), padding='same', name='deconv9')(x)\nx = BatchNormalization(name='bn18')(x)\n\nx = Dropout(0.5)(x) # not original\n\nx = Activation('sigmoid')(x)\npred = Reshape((192,256))(x)\n","edbc49ab":"model_2 = Model(inputs=img_input, outputs=pred)\nmodel_2.compile(optimizer= Adam(lr = 0.003), loss= [jaccard_distance], metrics=[iou])","9cb9eaf8":"model_2.load_weights('model_exact_equalized_epoch_1.h5')","00cea659":"img_num = 111\nimg_pred = model_2.predict(x_test[img_num].reshape(1,192,256,3))\nplt.figure(figsize=(16,16))\nplt.subplot(1,3,1)\nplt.imshow(X_test[img_num])\nplt.subplot(1,3,2)\nplt.imshow(y_test[img_num], plt.cm.binary_r)\nplt.subplot(1,3,3)\nplt.imshow(img_pred.reshape(192, 256), plt.cm.binary_r)\nplt.show()","e552f03f":"img_num = 35\nimg_pred = model_2.predict(x_test[img_num].reshape(1,192,256,3))\nplt.figure(figsize=(16,16))\nplt.subplot(1,3,1)\nplt.imshow(X_test[img_num])\nplt.subplot(1,3,2)\nplt.imshow(y_test[img_num], plt.cm.binary_r)\nplt.subplot(1,3,3)\nplt.imshow(img_pred.reshape(192, 256), plt.cm.binary_r)\nplt.show()","809e1f11":"img_num = 7\nimg_pred = model_2.predict(x_test[img_num].reshape(1,192,256,3))\nplt.figure(figsize=(16,16))\nplt.subplot(1,3,1)\nplt.imshow(X_test[img_num])\nplt.subplot(1,3,2)\nplt.imshow(y_test[img_num], plt.cm.binary_r)\nplt.subplot(1,3,3)\nplt.imshow(img_pred.reshape(192, 256), plt.cm.binary_r)\nplt.show()","ca31fd02":"img_num = 54\nimg_pred = model_2.predict(x_test[img_num].reshape(1,192,256,3))\nplt.figure(figsize=(16,16))\nplt.subplot(1,3,1)\nplt.imshow(X_test[img_num])\nplt.subplot(1,3,2)\nplt.imshow(y_test[img_num], plt.cm.binary_r)\nplt.subplot(1,3,3)\nplt.imshow(img_pred.reshape(192, 256), plt.cm.binary_r)\nplt.show()","dbcbc8a1":"img_num = 50\nimg_pred = model_2.predict(x_test[img_num].reshape(1,192,256,3))\nplt.figure(figsize=(16,16))\nplt.subplot(1,3,1)\nplt.imshow(X_test[img_num])\nplt.subplot(1,3,2)\nplt.imshow(y_test[img_num], plt.cm.binary_r)\nplt.subplot(1,3,3)\nplt.imshow(img_pred.reshape(192, 256), plt.cm.binary_r)\nplt.show()","434396f1":"img_num = 7\nimg_pred = model.predict(X_test[img_num].reshape(1,192,256,3))\nimg_pred_2 = model_2.predict(x_test[img_num].reshape(1,192,256,3))\nplt.figure(figsize=(20,5))\nplt.subplot(1,4,1)\nplt.imshow(X_test[img_num])\nplt.title('Original Image')\nplt.subplot(1,4,2)\nplt.imshow(Y_test[img_num], plt.cm.binary_r)\nplt.title('Ground Truth')\nplt.subplot(1,4,3)\nplt.imshow(img_pred.reshape(192, 256), plt.cm.binary_r)\nplt.title('Model 1')\nplt.subplot(1,4,4)\nplt.imshow(img_pred_2.reshape(192, 256), plt.cm.binary_r)\nplt.title('Model 2')\nplt.show()","07844dbb":"img_num = 77\nimg_pred = model.predict(X_test[img_num].reshape(1,192,256,3))\nimg_pred_2 = model_2.predict(x_test[img_num].reshape(1,192,256,3))\nplt.figure(figsize=(20,5))\nplt.subplot(1,4,1)\nplt.imshow(X_test[img_num])\nplt.title('Original Image')\nplt.subplot(1,4,2)\nplt.imshow(Y_test[img_num], plt.cm.binary_r)\nplt.title('Ground Truth')\nplt.subplot(1,4,3)\nplt.imshow(img_pred.reshape(192, 256), plt.cm.binary_r)\nplt.title('Model 1')\nplt.subplot(1,4,4)\nplt.imshow(img_pred_2.reshape(192, 256), plt.cm.binary_r)\nplt.title('Model 2')\nplt.show()","b1f2d97c":"img_num = 50\nimg_pred = model.predict(X_test[img_num].reshape(1,192,256,3))\nimg_pred_2 = model_2.predict(x_test[img_num].reshape(1,192,256,3))\nplt.figure(figsize=(20,5))\nplt.subplot(1,4,1)\nplt.imshow(X_test[img_num])\nplt.title('Original Image')\nplt.subplot(1,4,2)\nplt.imshow(Y_test[img_num], plt.cm.binary_r)\nplt.title('Ground Truth')\nplt.subplot(1,4,3)\nplt.imshow(img_pred.reshape(192, 256), plt.cm.binary_r)\nplt.title('Model 1')\nplt.subplot(1,4,4)\nplt.imshow(img_pred_2.reshape(192, 256), plt.cm.binary_r)\nplt.title('Model 2')\nplt.show()","4f513a2a":"### Loading the data","ff1add8e":"### Comparing the Models","44f19f76":"Let us see some of the images and their ground truths","3261b71c":"Since we can observe that the performance isn't reliable on low contrast images so we need to improve our model for that.","2f89dfa6":"### Loading the Model","1b26dfab":"### Evaluation Metric for Image Segmentation","56e57fc7":"Now we train the model again","5e5f84b9":"Now let us compare the results of the two models.","962711ae":"We use our defined method as a key to import the images sorted.","77825d41":"## Trying Image Augmentation","a924c193":"## The Model","e1ce9013":"## ***de nada!***","35e55b02":"___","a291efe8":"Now we will convert all the data as equalized before training.  \nAfter this transofrmation **X_train**, **X_test** and **X_val** won't be affected and will contain the original values while,  \n**x_train**, **x_test** and **x_val** will be transformed to the equalized values.","68984045":"Defining a function to sort the image filenames so we can load images in order.","45a99b33":"The model seems to work decent with normal images. Lets test it on low contrast images","223c7519":"# Skin Lesion work done","e98cc7ef":"### Defining the Loss Function","c23d3652":"Again testing for low contrast images","093cebc0":"## Testing the Model","75f3415f":"Now we will compile a model so we could load the weights we have trained above.","5b9edd27":"### Importing the libraries"}}