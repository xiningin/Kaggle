{"cell_type":{"60077650":"code","18f42a1a":"code","d88c040b":"code","919d64f9":"code","d8b94a8f":"code","36ed0833":"code","af0b115d":"code","1530449e":"code","2611fea3":"code","2637c31d":"code","60910831":"code","1b6bcbd7":"code","f98a76a4":"code","d0396097":"code","68c800c4":"code","0e1689ce":"code","13d6977c":"code","a4d81f77":"code","9fa8e96c":"code","a61be95b":"code","e6d7131b":"code","83331b67":"code","e011fd54":"code","c359372f":"code","d8dd6a1d":"code","77739605":"code","163051ba":"code","e237cd6a":"code","10fc6385":"code","c0a3de20":"code","350f4100":"code","5d5d7af0":"code","1f4a54af":"code","be3c6f6b":"code","b80d306b":"code","815389f6":"code","e0791958":"code","b20b89f4":"code","521564b5":"code","3b54d0f1":"code","1efe9ba4":"code","67d91287":"code","6093b796":"code","43f8aada":"code","e58a408d":"markdown","ec79a860":"markdown","adc80b3c":"markdown","4f10c141":"markdown","b9680fc6":"markdown","6f1b7062":"markdown","d75ea12b":"markdown","07d8c491":"markdown","fec69120":"markdown","1b3a0edd":"markdown","81b7eccb":"markdown","fcb448b4":"markdown","c073ec28":"markdown","cf21d01a":"markdown","5fa0d373":"markdown","dfa8e083":"markdown","d63b28c9":"markdown","6e899c06":"markdown","c2087449":"markdown","7c1accc6":"markdown","cf4de7eb":"markdown","d833f1f8":"markdown"},"source":{"60077650":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","18f42a1a":"import matplotlib.pyplot as plt  # This is important library for plotting with our data.","d88c040b":"data= pd.read_csv(\"..\/input\/clinvar-conflicting\/clinvar_conflicting.csv\") # data import","919d64f9":"data.head() # firs five data","d8b94a8f":"data.corr() #correlation","36ed0833":"data.info() # content summary","af0b115d":"data.columns","1530449e":"data.ORIGIN.plot(kind='line',color='red',label='OR',grid=True,linestyle='-.')\nplt.legend() \nplt.xlabel('series number')\nplt.ylabel('value')\nplt.title('origin value plot in data set')\nplt.show()","2611fea3":"data.corr()  # correlation","2637c31d":"data.plot(kind='scatter',x='AF_EXAC',y='AF_TGP',color='green', grid=True)\nplt.xlabel('AF_EXAC')\nplt.ylabel('AF_TGP')\nplt.title('AF_EXAC and AF_TGP scatter plot in data set')\nplt.show()","60910831":"data.AF_EXAC.plot(kind='hist',bins=50)\nplt.xlabel('AF_EXAC number')\nplt.ylabel('AF_EXAC value')\nplt.title('AF_EXAC histogram plot in data set')\n# we can use plt.clf() to display graph\nplt.show()","1b6bcbd7":"dictionary1={'ahmet':35,'ali':48,'salih':13,'hasan':45}\ndictionary1.keys()\n#print(dictionary1.keys())\ndictionary1.values()\ndictionary1['ahmet']\ndictionary1['g\u00fczel']=22\nprint(dictionary1['g\u00fczel'])\ndictionary1\n'g\u00fczel' in dictionary1\n# dictionary1.clear","f98a76a4":"series1=data['ORIGIN']\nprint(type(series1))\ndataframe1=data[['ORIGIN']]\nprint(type(dataframe1))\nprint(dataframe1.head())\nprint(series1.head())\n\n","d0396097":"3>2  # comparison operators\na=data['ORIGIN']>500\ndata[a]\ndata[(data['ORIGIN']>500) & (data['REF']=='A')]","68c800c4":"a=0\nwhile a!=10 :\n    print(a)\n    a+=1   # that is mean i=i+1 \n","0e1689ce":"list2=[1,2,3,4,5,6,7]\nfor a in list2:\n    print(a)\n    a=a+1\n    ","13d6977c":"for ind,val in enumerate(list2):\n    print(ind,\"  \",val)\n    ","a4d81f77":"dc1={'kuzey':1,'g\u00fcney':2,'do\u011fu':3,'bat\u0131':4,'aray\u00f6nler':0}\nfor key,val in dc1.items():\n    print(key,\"-\",val)\nprint(dc1['do\u011fu'])  ","9fa8e96c":"for ind,val in data[['POS']][0:5].iterrows():\n    print(ind,'--',val)","a61be95b":"data1=pd.read_csv('..\/input\/consumer-reviews-of-amazon-products\/1429_1.csv')\ndata1.head()\ndata1.info()","e6d7131b":"def t_tub():\n    tuble_1=('a','b','c')\n    return tuble_1\nx,y,z=t_tub()\nprint(x,y,z)\n    ","83331b67":"a=1\ndef a_call():\n    a=0\n    return a\nprint(a_call())  #local a variable\nprint(a)  # global a variable\n","e011fd54":"k=0\ndef y():\n    k=a*a\n    return k\nprint(y())  # if there is not local scope , be used globally scope","c359372f":"def a1():\n    def a2():\n        a=2*2\n        return a\n    return a2()+2\nprint(a1())","d8dd6a1d":"def d_arg(a,b,c=100):\n    x=a*b*c\n    return x\nprint(d_arg(3,4))  # c variable value is to be default 100\nprint(d_arg(3,4,5))  # c variable value is to be given value 5\n","77739605":"def square_1(*args):\n    for i in args:\n        i*=i\n        print(i)\nsquare_1(3,4,5)    #  number of variables sent is changeable\n","163051ba":"def f(**kwargs):    # key value arguments\n    for k,v in kwargs.items():\n        print(k,' ',v)\nf(ali=35,veli=45,hasan=25,alperdede=75,total='hundred and eighty')\n    ","e237cd6a":"square_2=lambda a:a*2+5\nprint(square_2(5))","10fc6385":"list_1=[1,2,3,4,5,6,7]\nlist_2= map( lambda x:x**3,list_1)\nlist(list_2)\n","c0a3de20":"a='selami'\nb=iter(a)\nprint(*b)","350f4100":"list_1=[1,2,3,4]\nlist_2=['a','b','c','d']\n\nzip_1=zip(list_1,list_2)\n\nzip_list=list(zip_1)\nprint(zip_list)\n\nunzip_1=zip(*zip_list)\nprint(unzip_1)\nk,l=list(unzip_1)\nprint(k,l)","5d5d7af0":"data1.describe()","1f4a54af":"data1.head()\ndata1['reviews.title'].value_counts()  #  column values frequency","be3c6f6b":"VISUAL EXPLORATORY DATA ANALYSIS \nBox plot","b80d306b":"data1.boxplot(column='reviews.rating',by='reviews.doRecommend')\nplt.show()","815389f6":"m_data=data1.head(10)\nm_data.head()\nmelt_data=pd.melt(frame=m_data,id_vars='reviews.username',value_vars=['reviews.title','reviews.rating','reviews.doRecommend'])\nmelt_data","e0791958":"melt_data.pivot(index='reviews.username',columns = 'variable',values='value')\n","b20b89f4":"dat1=data1.head(3)\ndat2=data1.tail(3)\nc_dat=pd.concat([dat1,dat2],axis=0,ignore_index=True)  # axis=0 cancat dataframe vertical\n                                                        #ignore_index=True,  index numbers ranking\nc_dat","521564b5":"dat3=data1['brand'].head()\ndat4=data1['asins'].head()\ncon_dat2=pd.concat([dat3,dat4],axis=1)\nprint(dat3,dat4)\ncon_dat2","3b54d0f1":"data1.dtypes","1efe9ba4":"data1['asins']=data1['asins'].astype('category')\ndata1.dtypes","67d91287":"data1['asins'].value_counts(dropna=False)  # there is two value to be nan","6093b796":"data1['asins'].dropna(inplace=True)\ndata1['asins'].value_counts(dropna=False)  # nan values in asins is deleted","43f8aada":"assert 1==1\nassert 1==2  # if it is not true , code will return error","e58a408d":"**Nested functions****","ec79a860":"Tuble. ","adc80b3c":"**Hi.\nThis is My first kernel. \nThis kernel contents python basic codes and it is for exercise. \nwith the data that Genetic Variant Classifications**","4f10c141":"**Tidy DATA\nmelt()\n**","b9680fc6":"Scope: we mention two important kind of scope. This are global scope and local scope.","6f1b7062":"zip","d75ea12b":"**data sciens tool box***","07d8c491":"**anonymous function: this is like lambda and it can take more one arg**.   map(func,seq)","fec69120":"data describe: this method is give we statistical info about our data.","1b3a0edd":"**ITERATIONS**","81b7eccb":"**Pvoting data: reverse melt data**","fcb448b4":"**Loops**","c073ec28":"**data types change**","cf21d01a":"**take index numbers in list**","5fa0d373":" **take index and values in dataFrame with for loop**","dfa8e083":"**concatenating data**  ","d63b28c9":"**Lambda is a way for faster writing function**","6e899c06":"**Missing data and testing with 'assert'**","c2087449":"**take keys and values in dictionary******","7c1accc6":"* * * * **default and flexible argumants**","cf4de7eb":"Bismillah.","d833f1f8":"**flexible argument**"}}