{"cell_type":{"be1ac89d":"code","bc703fab":"code","d3adc20e":"code","d38f5b78":"code","f217f501":"code","cd0966a4":"code","40a32c2d":"code","74963690":"code","03c78fc6":"code","d45c8dd3":"code","1f26dc3e":"code","51fb5e8b":"code","80976591":"code","0dc9e313":"code","22c66c31":"code","ba927ca1":"code","af2ea964":"code","832c3852":"code","7754c7ec":"code","e4821095":"code","4bac5fec":"code","0e138d2c":"code","a245e163":"code","550f8459":"code","006ca685":"code","7a07a013":"code","b54aa59a":"code","3b513296":"code","cb917814":"code","4eb57d9c":"code","6f190b66":"code","d2a9fbe6":"code","97bf0ecd":"code","2eb6deba":"code","7b0a79a8":"code","d0371001":"code","cbb44e46":"code","fc4d3775":"code","89fe40db":"code","4dffad68":"code","2fa841fd":"code","7ac978f2":"code","8335a3b1":"code","41276b6b":"code","9666b4a9":"code","2d6321ce":"code","52c84899":"code","f3d012b7":"code","cde92224":"code","5799e463":"code","bd0a76a2":"code","66ce3047":"code","09fe1b25":"code","78139318":"code","71484cd8":"code","08da7cf0":"code","70133f08":"code","4733bfab":"code","5897aef1":"code","4c263c31":"code","f5af77b3":"code","dac592e6":"code","6e258b6e":"code","80d6e09a":"code","dc57cc04":"code","e149a054":"code","afb2e01c":"code","83d44467":"code","3c4decf5":"markdown","c6d4f42f":"markdown","2790631e":"markdown","a840e807":"markdown","0ca7a979":"markdown","3f6528d3":"markdown","13629001":"markdown","20b035b0":"markdown","1726c804":"markdown","f24d4a08":"markdown","e8aa9603":"markdown","22aeb19b":"markdown","f253a974":"markdown","5aa629f1":"markdown","6d0c603c":"markdown","9eaaea5c":"markdown","12b454f0":"markdown","7014f62f":"markdown","64e867ce":"markdown","abd11a59":"markdown","7bb6f220":"markdown","8768b9ba":"markdown","d2d929a5":"markdown","d520f57a":"markdown","a620a63f":"markdown","16e58844":"markdown","cb6cc6fc":"markdown","3dc25683":"markdown","2c1aa980":"markdown","2ef927d5":"markdown","b9d0bd50":"markdown","bed57625":"markdown","8b05a818":"markdown","8a5eae2b":"markdown"},"source":{"be1ac89d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","bc703fab":"df_train = pd.read_csv(\"..\/input\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/test.csv\")","d3adc20e":"print (\"Train set shape: \", df_train.shape)\nprint (\"Test set shape: \", df_test.shape)","d38f5b78":"df_train.head()","f217f501":"df_test.head()","cd0966a4":"df_train.isnull().sum()","40a32c2d":"df_test.isnull().sum()","74963690":"cor_mat = df_train.corr()\ncor_mat","03c78fc6":"cor_mat[\"price\"].sort_values(ascending = False)","d45c8dd3":"fig, ax = plt.subplots(figsize=(10,10))\nsns.heatmap(cor_mat, ax = ax, cmap=\"jet\")\nplt.show()","1f26dc3e":"df_train[\"price\"].hist(bins = 100, figsize = (10, 10))\n","51fb5e8b":"np.log(df_train[\"price\"]).hist(bins = 100, figsize = (10, 10))\ndf_train[\"price\"] = np.log(df_train[\"price\"])","80976591":"df_train.plot(kind = \"scatter\", x = \"long\", y = \"lat\", alpha = 0.1, s = df_train[\"sqft_living\"]*0.02, \n             label = \"sqft_living\", figsize = (10, 10), c = \"price\", cmap = plt.get_cmap(\"jet\"), colorbar = True, sharex = False)\n","0dc9e313":"df_train.drop(\"id\", axis = 1).hist(bins = 40, figsize = (20, 20))\nplt.show()","22c66c31":"f = [\"sqft_living\", \"sqft_above\", \"sqft_living15\", \"bathrooms\", \"bedrooms\", \"grade\", \"price\"]\n\nfeature = df_train[f]\n\n#categorical\nplt.figure(figsize = (10, 10))\nsns.boxplot(x=\"grade\", y=\"price\", data=feature)\nplt.show()","ba927ca1":"def grade_outliers(grade, quantile = 0.75):\n    gd = feature.loc[feature[\"grade\"] == grade]\n    quant = gd[\"price\"].quantile(quantile)\n    print (\"{} Grade Outliers, {} Quantile\".format(grade, quantile))\n    \n    return df_train.loc[(df_train[\"price\"]>quant) & (df_train[\"grade\"] == grade)]","af2ea964":"grade_outliers(6, 0.75)[\"price\"].hist(bins =100)\ngrade_outliers(6, 0.9)[\"price\"].hist(bins =100)\nplt.show()","832c3852":"ids = []\ndf_train.loc[(df_train[\"price\"]>13.8) & (df_train[\"grade\"] == 6)]","7754c7ec":"for i in df_train.loc[(df_train[\"price\"]>13.65) & (df_train[\"grade\"] == 6)][\"id\"].values:\n    ids.append(i)","e4821095":"grade_outliers(7, 0.75)[\"price\"].hist(bins =100)\ngrade_outliers(7, 0.9)[\"price\"].hist(bins =100)\nplt.show()","4bac5fec":"df_train.loc[(df_train[\"price\"]>14) & (df_train[\"grade\"] == 7)]","0e138d2c":"for i in df_train.loc[(df_train[\"price\"]>14) & (df_train[\"grade\"] == 7)][\"id\"].values:\n    ids.append(i)","a245e163":"grade_outliers(8, 0.75)[\"price\"].hist(bins =100)\ngrade_outliers(8, 0.9)[\"price\"].hist(bins =100)\nplt.show()","550f8459":"df_train.loc[(df_train[\"price\"]>14.5) & (df_train[\"grade\"] == 8)]","006ca685":"for i in df_train.loc[(df_train[\"price\"]>14.5) & (df_train[\"grade\"] == 8)][\"id\"].values:\n    ids.append(i)","7a07a013":"grade_outliers(9, 0.75)[\"price\"].hist(bins =100)\ngrade_outliers(9, 0.9)[\"price\"].hist(bins =100)\nplt.show()","b54aa59a":"grade_outliers(10, 0.75)[\"price\"].hist(bins =100)\ngrade_outliers(10, 0.9)[\"price\"].hist(bins =100)\nplt.show()","3b513296":"grade_outliers(11, 0.75)[\"price\"].hist(bins =100)\ngrade_outliers(11, 0.9)[\"price\"].hist(bins =100)\nplt.show()","cb917814":"df_train.loc[(df_train[\"price\"]>15.6) & (df_train[\"grade\"] == 11)]","4eb57d9c":"for i in df_train.loc[(df_train[\"price\"]>15.6) & (df_train[\"grade\"] == 11)][\"id\"].values:\n    ids.append(i)","6f190b66":"df_train = df_train.loc[~df_train['id'].isin(ids)]","d2a9fbe6":"from pandas.plotting import scatter_matrix\nscatter_matrix(feature.drop(\"grade\", axis =1), figsize = (20, 20))\nplt.show()","97bf0ecd":"df_train.loc[df_train[\"sqft_living\"]>10000]","2eb6deba":"df_train = df_train.loc[~df_train[\"id\"].isin(df_train.loc[df_train[\"sqft_living\"]>10000][\"id\"].values)]","7b0a79a8":"df_train.head()","d0371001":"label = df_train[\"price\"]\ndf_train.drop(\"price\", axis = 1, inplace = True)\n\ntraindex = len(df_train)\ndf = pd.concat([df_train, df_test])\nprint(df.shape)","cbb44e46":"df[\"sqft_living\"] = np.log(df[\"sqft_living\"])\ndf[\"sqft_living15\"] = np.log(df[\"sqft_living15\"])\ndf[\"sqft_above\"] = np.log(df[\"sqft_above\"])","fc4d3775":"for i in [\"sqft_living\", \"sqft_above\", \"sqft_living15\"]:\n    df[i].hist(bins = 100)\n    plt.show()","89fe40db":"df.loc[df[\"sqft_basement\"]!=0][\"sqft_basement\"].hist(bins = 100)","4dffad68":"df[\"sqft_basement\"] = df[\"sqft_basement\"].apply(lambda x : np.log(x) if x!=0 else 0)","2fa841fd":"np.log(df[\"sqft_lot\"]).hist(bins = 100)","7ac978f2":"df[\"sqft_lot\"] = np.log(df[\"sqft_lot\"])\ndf[\"sqft_lot15\"] = np.log(df[\"sqft_lot15\"])","8335a3b1":"df.head()","41276b6b":"print((sum(df[\"sqft_living\"]==df[\"sqft_living15\"])\/len(df))*100, \"Percent of sqft_living stays the same\")\nprint((sum(df[\"sqft_lot\"]==df[\"sqft_lot15\"])\/len(df))*100, \"Percent of sqft_lot stays the same\")","9666b4a9":"df[\"has_basement\"] = df[\"sqft_basement\"].apply(lambda x: 1 if x !=0 else 0)\ndf[\"renovated\"] = df[\"yr_renovated\"].apply(lambda x: 1 if x !=0 else 0)\ndf[\"sq_changed\"] = np.array((df[\"sqft_living\"]!=df[\"sqft_living15\"]) | (df[\"sqft_lot\"]!=df[\"sqft_lot15\"]))\n\ndf[\"purchase_yr\"] = df[\"date\"].apply(lambda x: int(x[:4]))\ndf[\"yr_renovated\"]=df[\"yr_renovated\"].apply(lambda x: np.nan if x==0 else int(x))\ndf['yr_renovated'] = df['yr_renovated'].fillna(df['yr_built'])\n\ndf[\"time_after_renovation\"] = df[\"purchase_yr\"] - df[\"yr_renovated\"]\ndf[\"sq_changed\"] = df[\"sq_changed\"].apply(lambda x: int(x))\ndf.head()\n","2d6321ce":"for i in [\"has_basement\", \"waterfront\", \"renovated\", \"sq_changed\"]:\n    counts = df[i].value_counts()\n    x = np.arange(len(counts))\n    y = counts\n    plt.bar(x, y)\n    plt.xticks(x, np.array(counts.index))\n    plt.title(i)\n    plt.show()","52c84899":"features = pd.concat([df[:traindex], label], axis = 1)[[\"price\", \"waterfront\", \"renovated\"]]\n\nfor f in [\"waterfront\", \"renovated\"]:\n    print (\"Portion of\", f)\n    for q in [0.25, 0.50, 0.75, 1]:\n        quantile_feats = features.loc[(features[\"price\"].quantile(q-0.25)<=features[\"price\"]) & (features[\"price\"]<features[\"price\"].quantile(q))]\n        print (q, \"Quantile of \", f, \"feature\")\n\n        counts = quantile_feats[f].value_counts()\n        x = np.arange(len(counts))\n        y = counts\n        \n        plt.figure(figsize=(5, 5))\n        plt.bar(x, y)\n        plt.title(\"{}, {} Quantile\".format(f, q))\n        plt.xticks(x, [0, 1])\n        plt.show()","f3d012b7":"waterfront = features[features[\"waterfront\"].apply(lambda x: x==1)]\nnon_waterfront = features[features[\"waterfront\"].apply(lambda x: x==0)]\n\nprint (\"Waterfront houses price mean: \", waterfront[\"price\"].mean())\nprint (\"Non Waterfront houses price mean: \",waterfront[\"price\"].mean())","cde92224":"plt.boxplot(waterfront[\"price\"])\nplt.title(\"Waterfront_price_boxplot\")\nplt.show()\n\nplt.boxplot(non_waterfront[\"price\"])\nplt.title(\"Non-Waterfront_price_boxplot\")\nplt.show()","5799e463":"renovated = features[features[\"renovated\"].apply(lambda x: x==1)]\nnot_renovated = features[features[\"renovated\"].apply(lambda x: x==0)]\n\nprint (\"Renovated houses price mean: \", renovated[\"price\"].mean())\nprint (\"Not renovated houses price mean: \",not_renovated[\"price\"].mean())","bd0a76a2":"plt.boxplot(renovated[\"price\"])\nplt.title(\"Renovated_price_boxplot\")\nplt.show()\n\nplt.boxplot(not_renovated[\"price\"])\nplt.title(\"Non-Renovated_price_boxplot\")\nplt.show()","66ce3047":"df[\"how_old\"] = df[\"purchase_yr\"]-df[\"yr_built\"]\ndf.head()","09fe1b25":"df[\"bedrooms_per_floor\"] = df[\"bedrooms\"]\/df[\"floors\"]\ndf[\"bathrooms_per_floor\"] = df[\"bathrooms\"]*df[\"bedrooms\"]\/df[\"floors\"]\n\ndf[\"bedrooms_per_sqft\"] = df[\"bedrooms\"]\/df[\"sqft_above\"]*100\n\ndf[\"bathrooms_per_floor\"] = df[\"bathrooms\"]*df[\"bedrooms\"]\/df[\"floors\"]\ndf[\"living_per_lot\"] = df[\"sqft_living\"] \/ df[\"sqft_lot\"]\ndf[\"living_per_lot15\"] = df[\"sqft_living15\"] \/ df[\"sqft_lot15\"]\n\ndf.head()","78139318":"df = df.drop([\"date\", \"id\", \"yr_built\", \"yr_renovated\", \"zipcode\", \"purchase_yr\"], axis = 1)\ndf.head()","71484cd8":"cor_mat = df.corr(\"spearman\")\n\nfig, ax = plt.subplots(figsize = (10, 10))\nsns.heatmap(cor_mat, ax = ax, cmap = \"jet\")\nplt.show()","08da7cf0":"df.hist(bins = 100, figsize = (20, 20))\nplt.show()","70133f08":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\nx_train = df[:traindex].values\nx_test = df[traindex:].values\n\ny_train = label.values","4733bfab":"import lightgbm as lgb\nfrom sklearn.linear_model import ElasticNet, Lasso, Ridge\nfrom sklearn.model_selection import KFold\nimport xgboost as xgb\nimport catboost as cb\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import GradientBoostingRegressor\n\nSEED = 0\nNFOLDS = 5\nkf = KFold(n_splits=NFOLDS)","5897aef1":"class SklearnHelper(object):\n    def __init__(self, clf, seed=0, params=None, seed_bool = True):\n        \n        self.clf = clf(**params)\n        \n        \n\n    def train(self, x_train, y_train):\n        self.clf.fit(x_train, y_train)\n\n    def predict(self, x):\n        return self.clf.predict(x)\n    \n    def fit(self,x,y):\n        return self.clf.fit(x,y)\n    \n    def feature_importances(self,x,y):\n        return self.clf.fit(x,y).feature_importances_\n\ndef get_oof(clf, x_train, y, x_test):\n    oof_train = np.zeros((len(x_train,)))\n    oof_test = np.zeros((len(x_test,)))\n    oof_test_skf = np.empty((NFOLDS, len(x_test)))\n\n    for i, (train_index, test_index) in enumerate(kf.split(x_train)):\n        print('\\nFold {}'.format(i))\n        x_tr = x_train[train_index]\n        y_tr = y[train_index]\n        x_te = x_train[test_index]\n\n        clf.train(x_tr, y_tr)\n\n        oof_train[test_index] = clf.predict(x_te)\n        oof_test_skf[i, :] = clf.predict(x_test)\n\n    oof_test[:] = oof_test_skf.mean(axis=0)\n    return oof_train.reshape(-1, 1), oof_test.reshape(-1, 1)","4c263c31":"from functools import wraps\ndef time_decorator(func): \n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        print(\"\\nStartTime: \", datetime.now() + timedelta(hours=9))\n        start_time = time.time()\n        \n        df = func(*args, **kwargs)\n        \n        print(\"EndTime: \", datetime.now() + timedelta(hours=9))  \n        print(\"TotalTime: \", time.time() - start_time)\n        return df\n        \n    return wrapper\n\n\nclass XgbWrapper(object):\n    def __init__(self, params=None, **kwargs):\n        self.param = params\n        self.param['seed'] = kwargs.get('seed', 0)\n        self.num_rounds = kwargs.get('num_rounds', 1000)\n        self.early_stopping = kwargs.get('ealry_stopping', 100)\n\n        self.eval_function = kwargs.get('eval_function', None)\n        self.verbose_eval = kwargs.get('verbose_eval', 100)\n        self.best_round = 0\n    \n    @time_decorator\n    def train(self, x_train, y_train, x_cross=None, y_cross=None):\n        need_cross_validation = True\n       \n        if isinstance(y_train, pd.DataFrame) is True:\n            y_train = y_train[y_train.columns[0]]\n            if y_cross is not None:\n                y_cross = y_cross[y_cross.columns[0]]\n\n        if x_cross is None:\n            dtrain = xgb.DMatrix(x_train, label=y_train, silent= True)\n            train_round = self.best_round\n            if self.best_round == 0:\n                train_round = self.num_rounds\n            \n            print(train_round)\n            self.clf = xgb.train(self.param, dtrain, train_round)\n            del dtrain\n        else:\n            dtrain = xgb.DMatrix(x_train, label=y_train, silent=True)\n            dvalid = xgb.DMatrix(x_cross, label=y_cross, silent=True)\n            watchlist = [(dtrain, 'train'), (dvalid, 'eval')]\n\n            self.clf = xgb.train(self.param, dtrain, self.num_rounds, watchlist, feval=self.eval_function,\n                                 early_stopping_rounds=self.early_stopping,\n                                 verbose_eval=self.verbose_eval)\n            self.best_round = max(self.best_round, self.clf.best_iteration)\n\n    def predict(self, x):\n        return self.clf.predict(xgb.DMatrix(x), ntree_limit=self.best_round)\n\n    def get_params(self):\n        return self.param    \n    \nclass LgbmWrapper(object):\n    def __init__(self, params=None, **kwargs):\n        self.param = params\n        self.param['seed'] = kwargs.get('seed', 0)\n        self.num_rounds = kwargs.get('num_rounds', 1000)\n        self.early_stopping = kwargs.get('ealry_stopping', 100)\n\n        self.eval_function = kwargs.get('eval_function', None)\n        self.verbose_eval = kwargs.get('verbose_eval', 100)\n        self.best_round = 0\n        \n    @time_decorator\n    def train(self, x_train, y_train, x_cross=None, y_cross=None):\n        \"\"\"\n        x_cross or y_cross is None\n        -> model train limted num_rounds\n        \n        x_cross and y_cross is Not None\n        -> model train using validation set\n        \"\"\"\n        if isinstance(y_train, pd.DataFrame) is True:\n            y_train = y_train[y_train.columns[0]]\n            if y_cross is not None:\n                y_cross = y_cross[y_cross.columns[0]]\n\n        if x_cross is None:\n            dtrain = lgb.Dataset(x_train, label=y_train, silent= True)\n            train_round = self.best_round\n            if self.best_round == 0:\n                train_round = self.num_rounds\n                \n            self.clf = lgb.train(self.param, train_set=dtrain, num_boost_round=train_round)\n            del dtrain   \n        else:\n            dtrain = lgb.Dataset(x_train, label=y_train, silent=True)\n            dvalid = lgb.Dataset(x_cross, label=y_cross, silent=True)\n            self.clf = lgb.train(self.param, train_set=dtrain, num_boost_round=self.num_rounds, valid_sets=[dtrain, dvalid],\n                                  feval=self.eval_function, early_stopping_rounds=self.early_stopping,\n                                  verbose_eval=self.verbose_eval)\n            self.best_round = max(self.best_round, self.clf.best_iteration)\n            del dtrain, dvalid\n            \n        gc.collect()\n    \n    def predict(self, x):\n        return self.clf.predict(x, num_iteration=self.clf.best_iteration)\n    \n    def plot_importance(self):\n        lgb.plot_importance(self.clf, max_num_features=50, height=0.7, figsize=(10,30))\n        plt.show()\n        \n    def get_params(self):\n        return self.param\n","f5af77b3":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nridge_params = {'alpha':0.001, 'normalize':True, 'max_iter':1e7, 'random_state':0}\nlasso_params = {'alpha':0.001, 'normalize':True, 'max_iter':1e7, 'random_state':0}\nelastic_params = {'alpha':0.001, 'normalize':True, 'max_iter':1e3, 'random_state':0, 'l1_ratio':0.8}\nsvr_params = {'C':20, 'epsilon':0.001, 'gamma':0.0003}\ngbr_params = {'n_estimators':3000, 'learning_rate':0.05, 'max_depth':4, 'max_features':'sqrt', 'min_samples_leaf':15, 'min_samples_split':10, 'loss':'huber', 'random_state':0 }\n\nlgb_param = {'num_leaves': 31,\n         'min_data_in_leaf': 30, \n         'objective':'regression',\n         'max_depth': -1,\n         'learning_rate': 0.015,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9 ,\n         \"bagging_seed\": 11,\n         \"metric\": 'rmse',\n         \"lambda_l1\": 0.1,\n         \"verbosity\": -1,\n         \"nthread\": 4,\n         \"random_state\": 4950}\n\nxgb_params = {\n    'eval_metric': 'rmse',\n    'seed': 4950,\n    'eta': 0.0123,\n    'gamma':0,\n    'max_depth':3,\n    'reg_alpha':0.00006,\n    'subsample': 0.7,\n    'colsample_bytree': 0.7,\n    'silent': 1,\n}\n\nridge = SklearnHelper(clf=Ridge, seed = SEED, params = ridge_params)\nls = SklearnHelper(clf = Lasso, seed = SEED, params = lasso_params)\nsvr = SklearnHelper(clf = SVR, seed = SEED, params = svr_params)\nel = SklearnHelper(clf = ElasticNet, seed = SEED, params = elastic_params)\ngb = SklearnHelper(clf = GradientBoostingRegressor, seed = SEED, params = gbr_params)\n\nxgb_model = XgbWrapper(params=xgb_params, num_rounds = 10000, ealry_stopping=100,\n                                   verbose_eval=100)\nlgb_model = LgbmWrapper(params=lgb_param, num_rounds = 10000, ealry_stopping=100,\n                                   verbose_eval=100)\n\n\n","dac592e6":"from datetime import datetime\nfrom datetime import timedelta,date\nimport time\nimport gc\n\nprint (\"XGB_5fold\")\nxgb_oof_train, xgb_oof_test = get_oof(xgb_model, x_train, y_train, x_test)\n\nprint (\"LGB_5fold\")\nlgb_oof_train, lgb_oof_test = get_oof(lgb_model, x_train, y_train, x_test)\n\nprint (\"Ridge_5fold\")\nridge_oof_train, ridge_oof_test = get_oof(ridge, x_train, y_train, x_test)\n\nprint (\"Lasso_5fold\")\nls_oof_train, ls_oof_test = get_oof(ls, x_train, y_train, x_test)\n\nprint (\"SVR_5fold\")\nsvr_oof_train, svr_oof_test = get_oof(svr, x_train, y_train, x_test)\n\nprint (\"Elastic_5fold\")\nel_oof_train, el_oof_test = get_oof(el, x_train, y_train, x_test)\n\nprint (\"GB_5fold\")\ngb_oof_train, gb_oof_test = get_oof(gb, x_train, y_train, x_test)\n\nprint (\"Done!\")","6e258b6e":"rms_ridge = sqrt(mean_squared_error(y_train, ridge_oof_train))\nprint('Ridge OOF RMSE: {}'.format(rms_ridge))\n\nrms_ls = sqrt(mean_squared_error(y_train, ls_oof_train))\nprint('LS OOF RMSE: {}'.format(rms_ls))\n\n\nrms_svr = sqrt(mean_squared_error(y_train, svr_oof_train))\nprint('SVR OOF RMSE: {}'.format(rms_svr))\n\n\nrms_el = sqrt(mean_squared_error(y_train, el_oof_train))\nprint('EL OOF RMSE: {}'.format(rms_el))\n\n\nrms_gb = sqrt(mean_squared_error(y_train, gb_oof_train))\nprint('GB OOF RMSE: {}'.format(rms_gb))\n\n\nrms_xgb = sqrt(mean_squared_error(y_train, xgb_oof_train))\nprint('XGB OOF RMSE: {}'.format(rms_xgb))\n\n\nrms_lgb = sqrt(mean_squared_error(y_train, lgb_oof_train))\nprint('LBG OOF RMSE: {}'.format(rms_lgb))","80d6e09a":"#x_train = pd.DataFrame(np.concatenate((x_train, ridge_oof_train, ls_oof_train, svr_oof_train, el_oof_train, gb_oof_train, xgb_oof_train, lgb_oof_train), axis = 1))\n#x_test = pd.DataFrame(np.concatenate((x_test, ridge_oof_test, ls_oof_test, svr_oof_test, el_oof_test, gb_oof_test, xgb_oof_test, lgb_oof_test), axis=1))\n\nx_train = pd.DataFrame(np.concatenate((x_train, ridge_oof_train, svr_oof_train, gb_oof_train, xgb_oof_train, lgb_oof_train), axis = 1))\nx_test = pd.DataFrame(np.concatenate((x_test, ridge_oof_test, svr_oof_test, gb_oof_test, xgb_oof_test, lgb_oof_test), axis=1))","dc57cc04":"y_train = pd.DataFrame(y_train)","e149a054":"print(\"Light Gradient Boosting Regressor\")\nlgbm_params = {'num_leaves': 15,\n         'min_data_in_leaf': 30, \n         'objective':'regression',\n         'max_depth': 5,\n         'learning_rate': 0.01,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9 ,\n         \"bagging_seed\": 11,\n         \"metric\": 'rmse',\n         \"lambda_l1\": 0.1,\n         \"verbosity\": -1,\n         \"nthread\": 4,}\n\n#prepare fit model with cross-validation\nfolds = KFold(n_splits=5, shuffle=True, random_state=42)\noof = np.zeros(len(x_train))\npredictions = np.zeros(len(x_test))\nfeature_importance_df = pd.DataFrame()\n\n#run model\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(x_train)):\n    trn_data = lgb.Dataset(x_train.iloc[trn_idx], label=y_train.iloc[trn_idx])#, categorical_feature=categorical_feats)\n    val_data = lgb.Dataset(x_train.iloc[val_idx], label=y_train.iloc[val_idx])#, categorical_feature=categorical_feats)\n\n    num_round = 10000\n    clf = lgb.train(lgbm_params, trn_data, num_round, valid_sets = [trn_data, val_data], verbose_eval=500, early_stopping_rounds = 100)\n    oof[val_idx] = clf.predict(x_train.iloc[val_idx], num_iteration=clf.best_iteration)\n   \n    #predictions\n    predictions += clf.predict(x_test, num_iteration=clf.best_iteration) \/ folds.n_splits\n    \ncv = np.sqrt(mean_squared_error(oof, y_train))\nprint(cv)","afb2e01c":"np.exp(predictions)","83d44467":"sub = pd.DataFrame({\"id\" : df_test[\"id\"].values, \"price\": np.exp(predictions)})\nsub.to_csv('lgb_stack_OOF_0328_v2.csv', index=False)\nsub","3c4decf5":"# Label\uc778 Price\uc758 \ubd84\ud3ec\ub97c \uc0b4\ud3b4\ubcf4\uae30","c6d4f42f":"# **\uacb0\uce21\uce58 \ud655\uc778\ud558\uae30**","2790631e":"# \uae30\ud0c0 \ubcc0\uc218\n\n\uac00\uc7a5 \uba3c\uc800, \uc9d1\uc744 \uad6c\ub9e4\ud55c \ub0a0\uae4c\uc640 \uc900\uacf5 \ub144\ub3c4\ub97c \ud1b5\ud574, \uc9d1\uc774 \ub9e4\ub9e4\ub41c \uc2dc\uc810\uc5d0\uc11c '\uc5bc\ub9c8\ub098 \uc624\ub798\ub41c \uc9d1\uc778\uc9c0'\ub97c \uc54c \uc218 \uc788\ub2e4. ","a840e807":"# \uc815\ub9ac\ud558\uc790\uba74...\n\n* Waterfront \uc5d0 \ud574\ub2f9\ud558\ub294 \uc9d1\uc758 \uc808\ub300\uc801\uc778 \uc218\uac00 \ud574\ub2f9\ud558\uc9c0 \uc54a\ub294 \uc9d1\uc5d0 \ube44\ud574 \ub9e4\uc6b0 \uc801\ub2e4\n* Renovated \uc5d0 \ud574\ub2f9\ud558\ub294 \uc9d1 \uc5ed\uc2dc \uc808\ub300\uc801\uc778 \uc218\uac00 \ud574\ub2f9\ud558\uc9c0 \uc54a\ub294 \uc9d1\uc5d0 \ube44\ud574 \ub9e4\uc6b0 \uc801\ub2e4\n* \uadf8\ub7ec\ub098, \uac00\uaca9\ub300\ubcc4 quantile\ub85c \ub098\ub204\uc5b4\uc11c \ubd84\ud3ec\ub97c \uc0b4\ud3b4\ubcf4\ub2c8 **\uace0 \uac00\uaca9\ub300 quantile\ub85c \uac08\uc218\ub85d waterfront\uc778 \uc9d1\ub4e4\uacfc renovated\uc778 \uc9d1\ub4e4\uc758 \uc218\uac00 \ub298\uc5b4\ub09c\ub2e4**\n(\ubb3c\ub860 \uc8fc\uc758\ud560 \uc810\uc740 \uc774\uac83\uc744 \uc0c1\uad00\uad00\uacc4\ub85c \uc5f0\uacb0\uc2dc\ud0a4\uae30\ub294 \ubb34\ub9ac\uac00 \uc788\ub2e4.)\n*\ud3c9\uade0\uc744 \uc0b4\ud3b4\ubcf4\uba74 waterfront, renovated \ubaa8\ub450 \ud574\ub2f9\ud558\uc9c0 \uc54a\ub294 \uc9d1\ub4e4\uc5d0 \ube44\ud574 \uac00\uaca9\ub300\uc758 \ud3c9\uade0\uc774 \ub192\ub2e4\n*\ub354 \uc790\uc138\ud788 \ubd84\ud3ec\ub97c \uc0b4\ud3b4\ubcf4\uba74 waterfront\uc778 \uc9d1\ub4e4\uc758 \uacbd\uc6b0 \uadf8\ub807\uc9c0 \uc54a\uc740 \uc9d1\ub4e4\uc5d0 \ube44\ud574 \ub354 \uace0 \uac00\uaca9\ub300\uae4c\uc9c0 \ubd84\ud3ec\uac00 \ud37c\uc838\uc788\ub2e4.\n*\ubc18\uba74 Renovated\ub41c \uc9d1\ub4e4\uc758 \uacbd\uc6b0, **\ub9e4\uc6b0 \ub192\uc740 \uac00\uaca9\uc73c\ub85c \ud615\uc131\ub41c outlier\ub4e4\uc774 \uc874\uc7ac\ud574 \ud3c9\uade0\uc744 \ub192\ud788\ub294 \ubaa8\uc2b5\uc744 \ubcf4\uc774\uc9c0\ub9cc, \uc804\uccb4\uc801\uc778 \uac00\uaca9\ub300 \ubd84\ud3ec\ub294 \ud06c\uac8c \ub2e4\ub974\uc9c0 \uc54a\ub2e4**\n\n> waterfront\ub77c\uace0\ud574\uc11c \uac00\uaca9\uc774 \uaf2d \ub192\uc740 \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc, **waterfront\uc778 \uc9d1\ub4e4 \uc911\uc5d0\ub294 \uac00\uaca9\uc774 \ub0ae\uc740 \uc9d1\ubcf4\ub2e4, \uc0c1\ub300\uc801\uc73c\ub85c \uace0\uac00\uc5d0 \ud615\uc131\ub41c \uc9d1\uc774 \ub354 \ub9ce\ub2e4 **\n> Renovate\ub41c \uc9d1\ub4e4\uc758 \uacbd\uc6b0, \ub9e4\uc6b0 \uac00\uaca9\uc774 \ub192\uc740 outlier\ub4e4\uc774 \uc874\uc7ac\ud558\uc9c0\ub9cc, \uc804\uccb4\uc801\uc778 \uac00\uaca9\ub300 \ubd84\ud3ec\ub294 renovate\ub418\uc9c0 \uc54a\uc740 \uc9d1\ub4e4\uacfc \ud06c\uac8c \ub2e4\ub974\uc9c0 \uc54a\ub2e4\n","0ca7a979":"# \uc815\uaddc\ud654\n\n\uc815\uaddc\ud654\ud560 attribute\ub4e4\uc740:\nsqft_living, sqft_above, sqft_living15\uc774\uace0,\n\nsqft_basement, sqft_lot, sqft_lot15\uc740 0\uc778 \uac12\ub4e4\uc744 \uc81c\uc678\ud588\uc744\ub54c\uc758 \ubd84\ud3ec\ub97c \uc0b4\ud3b4\ubcf4\uace0 \uacb0\uc815\ud558\ub3c4\ub85d \ud558\uaca0\uac00","3f6528d3":"Renovated","13629001":"**sqft_living \uc774\uc0c1\uce58 \ud0d0\uc0c9**","20b035b0":"\uadf8 \ub2e4\uc74c\uc73c\ub85c\ub294 \ud654\uc7a5\uc2e4 \ubc0f \uce68\uc2e4\uc758 \uc218\uac00 \uc788\ub2e4. \n\n\uc77c\ubc18\uc801\uc73c\ub85c \ubc29\uc774 \ub354 \ub9ce\uc740 \uc9d1\uc774 \ub354 \ub192\uc740 \uac00\uaca9\ub300\ub97c \uc774\ub8f0 \uac83\uc774\ub2e4. \uadf8\ub7ec\ub098, **\ubc29\uc774 \ub9ce\uace0 \uc801\uace0\uc758 \uc5ec\ubd80\ub294, \uba87 \uba85\uc774 \uc0b4 \uc218 \uc788\ub294, \uc5bc\ub9c8\ub098 \ub113\uc740 \uc9d1\uc774\ub0d0\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9c4\ub2e4.**\n\ub530\ub77c\uc11c \ubc29\uc758 \uc218\ub97c \uce35 \uc218\ub85c \ub098\ub204\uc5b4 **\ubc29\uc758 \uac2f\uc218 per floor,** \ub610 living space \uc758 \uba74\uc801\uc73c\ub85c \ub098\ub204\uc5b4 **\ub2e8\uc704\uba74\uc801\ub2f9 \ubc29\uc758 \uac2f\uc218\ub77c\ub294 attribute\uc744 \ub9cc\ub4e4\uac83\uc774\ub2e4. **. \ub610, sqft_above\uc758 \ub113\uc774\ub97c floor\uc758 \uac2f\uc218\ub85c \ub098\ub204\uc5b4 \uce35\ubcc4 \ud3c9\uade0 \uba74\uc801\uc744 \uad6c\ud558\uaca0\ub2e4. \n\ubd80\uc9c0\uc5d0 \ube44\ud55c living space\uc758 \ub113\uc774\ub3c4 \ucd94\uac00\ud558\ub3c4\ub85d \ud558\uc790. Bedroom\uacfc bathroom\uc758 \uac2f\uc218\ub294 15\ub144\ub3c4\ub97c \uae30\uc900\uc73c\ub85c \uc791\uc131\ub418\uc5c8\ub2e4\ub294 \ub9d0\uc774 \uc5c6\uc73c\ubbc0\ub85c, \uac74\ucd95 \ub2f9\uc2dc\uc758 \uba74\uc801\uc744 \uae30\uc900\uc73c\ub85c \ubcc0\uc218\ub97c \uc0dd\uc131\ud558\ub3c4\ub85d \ud558\uc790. ","1726c804":"# \ubaa8\ub378\ub9c1\n\nLight GBM\uc0ac\uc6a9\nhttps:\/\/www.kaggle.com\/arthurtok\/introduction-to-ensembling-stacking-in-python \n\uc704\uc758 \ucee4\ub110\uc744 \ucc38\uace0\ud558\uc5ec oof \ub97c\uc0ac\uc6a9\ud558\uc600\uc2b5\ub2c8\ub2e4.","f24d4a08":"# Renovation \uc5ec\ubd80 \ud655\uc778 \ubc0f \uae30\ud0c0 \ubcc0\uc218 \uc0dd\uc131\n\n\uc6b0\uc120, sqft_living\uacfc sqft_living15, sqft_lot\uacfc sqft_lot15\uac00 \uc77c\uce58\ud558\ub294 \uc9d1\uc774 \uc5bc\ub9c8\ub098 \uc788\ub294\uc9c0 \uc0b4\ud3b4\ubcf4\uc790","e8aa9603":"# \ud788\uc2a4\ud1a0\uadf8\ub7a8","22aeb19b":"# *** \uc9c0\ub9ac\uc801\uc73c\ub85c mapping\ud574\ubcf4\uae30***\n\n\uc704\ub3c4\uc640 \uacbd\ub3c4\ub97c \ucd95\uc73c\ub85c \ud558\uba70, \uc9d1\uc758 \ub113\uc774\ub97c spot\uc758 \ud06c\uae30\ub85c \ud558\uba70, price\uac00 \uc0c9\uae54\ub85c \ud45c\ud604\ub418\ub294 scatter plot\uc744 \uadf8\ub824\ubcf4\uc790. ","f253a974":"# **df_train\uc5d0\uc11c \uac00\uaca9\uacfc, \uae30\ud0c0 attribute\ub4e4\uc758 \uc0c1\uad00\uad00\uacc4 \uc0b4\ud53c\uae30**","5aa629f1":"\uc81c\uac70\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub420 \ub4ef \ud558\ub2e4","6d0c603c":"\ube44\uc728\uc744 \ubcf4\uba74 waterfront\uc640 renovated\uc5d0 \ud574\ub2f9\ud558\ub294 \uc9d1\ub4e4\uc774 \uc804\uccb4\uc801\uc73c\ub85c \ub9ce\uc774 \uc5c6\uc74c\uc744 \uc54c \uc218 \uc788\ub2e4. \n\n\uadf8\ub807\uc9c0\ub9cc \uc790\uc138\ud788 \uc0b4\ud3b4\ubcf4\uba74, \ub450 feature \ubaa8\ub450 quantile \uc774 \ub192\uc544\uc9c8\uc218\ub85d (= \uc9d1\uc774 \ube44\uc2f8\uc9c8\uc218\ub85d) \ud574\ub2f9 feature\uc758 \uac12\uc774 1 \uc778 \uc9d1\ub4e4\uc758 \uc218\uac00 \ub298\uc5b4\ub0a8\uc744 \uc54c \uc218 \uc788\ub2e4. \n\uc989, \uc54c \uc218 \uc788\ub294 \uc0ac\uc2e4\uc740:\n\n* \uc804\uccb4\uc801\uc73c\ub85c waterfront, renovated\ub97c \ub9cc\uc871\ud558\ub294 (\ub9ac\ub178\ubca0\uc774\uc158\uc774  \ub41c \uc9d1 \/ \uac15\uc774 \ubcf4\uc774\ub294 \uc9d1)\uc758 \uc218\uac00 \uc808\ub300\uc801\uc73c\ub85c \ub354 \uc801\ub2e4\n* \uadf8\ub807\uc9c0\ub9cc, \uac00\uaca9\ub300\uac00 \ub192\uc740 quatile\ub85c \uac08 \uc218\ub85d\uc5d0 \ub9ac\ub178\ubca0\uc774\uc158\uc774 \ub41c \uc9d1 \/ \uac15\uc774 \ubcf4\uc774\ub294 \uc9d1\uc758 \uc218\uac00 \uc870\uae08\uc529 \uc99d\uac00\ud558\ub294 \uacbd\ud5a5\uc744 \ubcf4\uc778\ub2e4\n\n\uc774 \uacbd\ud5a5\uc744 \uc880\ub354 \ud655\uc2e4\ud788 \ud655\uc778\ud558\uae30\uc704\ud574 waterfrontriverview \/ renovated feature\uac12\uc774 \uac01\uac01 0, 1\uc778 \ub370\uc774\ud130\ub4e4\uc758 price \ubd84\ud3ec\ub97c \uc0b4\ud3b4\ubcf4\uc790","9eaaea5c":"# \ubbf8\uc0ac\uc6a9 \ubcc0\uc218 \uc81c\uac70","12b454f0":"**\ub2e8, \uc5ec\uae30\uc11c \ud55c \uac00\uc9c0 \uc8fc\uc758\ud560 \uc810\uc740, yr_renovated\uac00 0\uc784\uc5d0\ub3c4 15\ub144\uae30\uc900\uc758 \uc815\ubcf4\uc640 \uc900\uacf5\ub144\ub3c4 \uae30\uc900\uc758 \uc815\ubcf4\uac00 \ubd88\uc77c\uce58\ud558\ub294 \ub370\uc774\ud130\uac00 \uc788\ub2e4\ub294 \uc810\uc774\ub2e4. \ub9cc\uc77c sqft_lot\uacfc sqft_lot15, \ub610\ub294 sqft_living\uacfc sqft_living15\uc0ac\uc774\uc5d0 \ubcc0\ud654\uac00 \uc788\ub294\ub370 yr_renovated\uac00 0 \uc774\ub77c\uba74 renovation\uc774 \ub418\uc9c0 \uc54a\uc740\uac8c \uc544\ub2c8\ub77c, \ub370\uc774\ud130\uac00 \uc18c\uc2e4\ub418\uc5c8\ub2e4\uace0 \ubcf4\ub294\uac8c \ub9de\uc744 \uac83\uc774\ub2e4. \ub9cc\uc77c \ubcc0\ud654\uac00 \uc5c6\ub2e4\uba74 renovation\uc774 \uc774\ub8e8\uc5b4\uc9c0\uc9c0 \uc54a\uc558\ub2e4\uace0 \ubcfc \uc218 \uc788\ub2e4. **","7014f62f":"**waterfront**","64e867ce":"Staking \uad00\ub828 \ubd80\ubd84\uc740 https:\/\/www.kaggle.com\/yeonmin\/default-eda-stacking-introduction \uc704\uc758 \ucee4\ub110\uc758 \ud30c\ub77c\ubbf8\ud130 \uc124\uc815\uacfc, \ud559\uc2b5\uae30 \uc120\uc815\uc744 \ucc38\uace0\ud588\uc2b5\ub2c8\ub2e4.","abd11a59":"sqft_living\uc774 10000\uc744 \ub118\uc5b4\uac00\ub294 \uac12\ub4e4\uc744 \uc0b4\ud3b4\ubcf4\uc790","7bb6f220":"Label\uc778 price \uc758 \ubd84\ud3ec\uac00 \uaf2c\ub9ac \ubd80\ubd84\uc774 \uc0c1\ub2f9\ud788 \uae38\uba70, 1000000\uc544\ub798\ucabd\uc5d0 \uc0c1\ub2f9\ud788 \ub9ce\uc740 \uc8fc\uac00 \uacb0\uc9d1\ub418\uc5b4\uc788\uc74c\uc744 \uc54c \uc218 \uc788\ub2e4.\n\n**\ud55c\ubc88 \ub85c\uadf8\uc2a4\ucf00\uc77c\ub9c1\uc744 \ud574\ubcf4\uba74 \uc885 \ubaa8\uc591\uc758 \ubd84\ud3ec\ub97c \uc5bb\uc744 \uc218 \uc788\ub2e4.**","8768b9ba":"\ud30c\ub77c\ubbf8\ud130\ub294  https:\/\/www.kaggle.com\/chocozzz\/house-price-prediction-eda-updated-2019-03-12\n\uc704 \ucee4\ub110\uc758 \ubaa8\ub378\ub9c1\uc744 \ucc38\uace0\ud588\uc2b5\ub2c8\ub2e4","d2d929a5":"# \uc774\uc0c1\uce58 \ud0d0\uc0c9\n\nPrice\ub97c \uae30\uc900\uc73c\ub85c \uc0c1\uad00\uad00\uacc4\ub97c \ub192\uac8c \ubcf4\uc774\ub294 \ubcc0\uc218 \uba87 \uac00\uc9c0\ub97c \uc6b0\uc120\uc801\uc73c\ub85c boxplot\uc744 \uadf8\ub824\ubcf4\uc790","d520f57a":"\uc774 \uad6c\uac04 \uc5ed\uc2dc \ubd84\ud3ec\uac00 \ud37c\uc838\uc788\uc5b4\uc11c \uc81c\uac70\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub420 \uac83 \uac19\ub2e4","a620a63f":"**Grade**","16e58844":"\uc5b4\ub290\uc815\ub3c4 \uc885 \ubaa8\uc591\uc5d0 \uac00\uae4c\uc6cc\uc84c\ub2e4\n\n\ub2e4\uc74c\uc740 sqft_basement, sqft_lot, sqft_lot15\uc744 \uc0b4\ud3b4\ubcf4\uc790","cb6cc6fc":"yr_renovated\uc758 \uac12\uc774 0\uc778 \uac83\uc774 renovation\uc744 \ud558\uc9c0 \uc54a\uc558\uc74c\uc744 \ub098\ud0c0\ub0bc \uc218\ub3c4 \uc788\uc9c0\ub9cc, yr_renovated\uc758 \uac12\uc774 0\uc778\ub370\ub3c4 \ubd88\uad6c\ud558\uace0 \ubd80\uc9c0\ub098, living space\uc758 \uba74\uc801\uc774 \ubc14\ub010 \uc9d1\ub4e4\uc774 \ub300\ub2e4\uc218\uc774\ub2e4.\n**\ub530\ub77c\uc11c \uc77c\ub2e8 renovation \uc774 0\uc778 \uac12\uc744 renovation\uc774 \uc774\ub8e8\uc5b4\uc9c0\uc9c0 \uc54a\uc558\ub2e4\uace0 \ubcfc \uac83\uc774\uba70, \uc774\uc678\uc5d0 \ubd80\uc9c0\ub098 \uc9d1\uc758 \uba74\uc801\uc774 \ubc14\ub00c\uc5c8\ub294\uc9c0 \uc5ec\ubd80\ub97c \ub530\ub85c \ubcc0\uc218\ub85c \ub9cc\ub4e4\uc5b4\ub458 \uac83\uc774\ub2e4. \n\uc774 \uc678\uc5d0\ub3c4, basement\uac00 \uc788\ub294\uc9c0, waterfront \uc5ec\ubd80\ub97c \ubcc0\uc218\ub85c \ub9cc\ub4e4 \uc218 \uc788\ub2e4. **","3dc25683":"\uc5ec\uae30\uc11c \uc8fc\ubaa9\ud560 \uc810\uc774 \uba87 \uac00\uc9c0 \ubcf4\uc778\ub2e4. \uc6b0\uc120, \uae30\ud615\uc801\uc73c\ub85c '0'\uc5d0 \ub9ce\uc740 \uc218\uce58\ub4e4\uc774 \ubd84\ud638\ud558\uace0 \uc788\ub294 feature\ub4e4\uc758 \uacbd\uc6b0, \ud574\ub2f9 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uac12\uc774 \uc5c6\uae30\ub54c\ubb38\uc5d0 0\uc77c \uac83\uc774\ub2e4. \uc608\ub97c\ub4e4\uc5b4, yr_renovated \uc758 \uac12\uc774 0\uc774\ub77c\uba74 renovation\uc774 \ub41c \uc801\uc774 \uc5c6\uc744 \uac83\uc774\uace0, sqft_basement 0\uc774\ub77c\uba74 \uc9c0\ud558\uc2e4\uc774 \uc5c6\ub294 \uac83\uc73c\ub85c \ud574\uc11d\ud560 \uc218 \uc788\ub2e4. \n\n\uc774\ub7f0 \uacbd\uc6b0 \uc9c0\ud558\uc2e4\uc758 \uc720\ubb34 \ub4f1\uc5d0 \ud574\ub2f9\ud558\ub294 attribute\uc744 \ub9cc\ub4e4\uc5b4\ub0bc \uc218 \uc788\ub2e4. \n\n\ub2e4\uc74c\uc758 feature\ub4e4\uc774 \uac01\uac01 0\uc744 \ub098\ud0c0\ub0b8\ub2e4\uba74:\n\n* sqft_basement: \uc9c0\ud558\uc2e4\uc774 \uc5c6\ub2e4\n* waterfront: \ub9ac\ubc84\ubdf0\uac00 \uc544\ub2c8\ub2e4\n* yr_renovated: renovate\ub41c \uc801\uc774 \uc5c6\ub2e4\n* sqft_lot : \uc8fc\ucc28\uacf5\uac04\uc774 \uc5c6\ub2e4\n\nveiw\uc758 \uacbd\uc6b0\uc5d4 1~4\uae4c\uc9c0 \uc815\uc218\ub85c \ub9e4\uae34 \uc810\uc218\uc774\ubbc0\ub85c, 0\uc740 '\ub9e4\uc6b0 \ub098\uc068'\uc744 \ub098\ud0c0\ub0b4\ub294 \ucc99\ub3c4\ub85c \ubcfc \uc218 \uc788\ub2e4.\n\nsqft_above, sqft_living, sqft_living15 \ub4f1\uc758 \uacbd\uc6b0 \ubd84\ud3ec\uac00 \uc0b4\uc9dd \uce58\uc6b0\uccd0\uc788\ub294 \uacbd\ud5a5\uc774 \uc788\ub2e4. ","2c1aa980":"* sqft_living   \n* grade          \n* sqft_above      \n* sqft_living15 \n\uc815\ub3c4\uac00 price\uacfc \uc0c1\uad00\uad00\uacc4\ub97c \uc5b4\ub290\uc815\ub3c4 \uac00\uc9c4\ub2e4\uace0 \ubcfc \uc218 \uc788\uaca0\uc73c\uba70, sqft_living\uc758 \uacbd\uc6b0 \uac15\ud55c \uc0c1\uad00\uad00\uacc4\ub97c \uac00\uc9d0. ","2ef927d5":"\uacb0\uce21\uce58\ub294 \uc5c6\ub294\uac83\uc73c\ub85c \ubcf4\uc784","b9d0bd50":"# waterfront\uc640 Renovation \uc5ec\ubd80 \uc880\ub354 \uc790\uc138\ud788 \uc0b4\ud3b4\ubcf4\uae30\n\nwaterfront\uc640 renovation\uc758 \uacbd\uc6b0 \ud574\ub2f9\ud558\ub294 \ub370\uc774\ud130\ubcf4\ub2e4, \ud574\ub2f9\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\uc758 \ub370\uc774\ud130\uac00 \ud6e8\uc52c \ub9ce\uc74c\uc744 \uc54c \uc218 \uc788\ub2e4. \n\n\uc7a0\uc2dc price \uc758 \ub808\uc774\ube14\uc774 \ubd99\uc740 \ud2b8\ub808\uc774\ub2dd \ub370\uc774\ud130\uc14b\uc5d0 \ud574\ub2f9\ud558\ub294 \ubd80\ubd84\ub9cc\uc744 \ub370\uc5b4\uc11c, Price \uc758 \uad6c\uac04\uc744 \ub098\ub204\uc5b4, \uad6c\uac04\ub300\ubcc4\ub85c waterfront \/ renovation\uc774 \ucc28\uc9c0\ud558\ub294 \ube44\uc728\uc744 \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud558\uaca0\ub2e4. ","bed57625":"sqft_living\uacfc, sqft_lot\ub4f1, \uba74\uc801\uc5d0 \ub300\ud55c \uac12\ub4e4\uc774 \ube44\uc815\uc0c1\uc801\uc73c\ub85c \ud06c\ub2e4. \ubc29\uc758 \uc218\uac00 \ucda9\ubd84\ud788 \ub9ce\uae30 \ub54c\ubb38\uc5d0 \uc2e4\uc81c\ub85c \ub9e4\uc6b0 \ud070 \uc800\ud0dd\uc77c\uc218\ub3c4 \uc788\ub2e4. \uadf8\ub7ec\ub098 \ubd84\ud3ec \uc0c1\uc73c\ub85c \ud754\uce58 \uc54a\uc740 \ub370\uc774\ud130\uc774\ubbc0\ub85c, \uc798\ubabb\ub41c \ub370\uc774\ud130\uac00 \uc544\ub2c8\ub354\ub77c\ub3c4 \uc77c\ubc18\ud654\uc5d0 \uc788\uc5b4 \ud559\uc2b5\uc5d0 \uc545\uc601\ud5a5\uc744 \uc904 \uc5ec\uc9c0\uac00 \uc788\ub2e4. ","8b05a818":"\uc804\uccb4\uc801\uc73c\ub85c grade \uac00 \ub192\uc744\uc218\ub85d price\uac00 \ub192\ub2e4\ub294 \uacbd\ud5a5\uc774 \uc788\ub2e4\ub294 \uc810\uc744 \uace0\ub824\ud55c\ub2e4\uba74:\n11 \uc5d0 \uc788\ub294 outlier\uac00 \ub208\uc5d0 \ub744\uba70, 6~10\uc0ac\uc774\uc5d0 outlier\uac00 \ub208\uc5d0 \ub744\uac8c \ub9ce\ub2e4. \n **\ud2b9\ud788, 7, 8, 11\uc5d0 \uc788\ub294 outlier**\uac00 \ub208\uc5d0 \ub748\ub2e4","8a5eae2b":"sqft_living\uacfc sqft_basement, sqft_above, sqft_living15\uc758 \ubd84\ud3ec\ub294 \ucd94\ud6c4\uc815\uaddc\ud654\ub97c \uc9c4\ud589\ud558\ub3c4\ub85d \ud558\uaca0\ub530.  "}}