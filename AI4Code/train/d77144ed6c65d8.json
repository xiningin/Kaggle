{"cell_type":{"d8a09b86":"code","367d2dce":"code","f21bd03a":"code","6d121036":"code","ad293ae8":"code","6fd91a58":"code","e359d9b2":"code","c5ee8010":"code","3d25e4a1":"code","9e7eb381":"code","3a52fa84":"code","ccad72a5":"code","8a98002d":"code","23acf5a9":"code","86100e50":"code","d6f4f642":"code","856458ec":"code","d2266140":"code","41438959":"code","857574db":"code","81b0af4e":"code","f34f4157":"code","73d90053":"code","f5a8b094":"code","5b382ceb":"code","7fde0f31":"code","8e6d1bf3":"code","02c91ae3":"code","4ac1b1ac":"code","ab80feae":"code","4a99e566":"code","748ed87f":"code","e69ab4e6":"code","2f84f233":"code","5a19402b":"code","1ca5ce21":"code","982e6d06":"code","14ff5247":"code","3e4195b5":"code","1caf4cb3":"code","fa485e94":"code","fc029730":"code","8bd86e34":"code","a4379e41":"code","283b2c3c":"code","26971d4b":"code","3731951c":"code","6c5282ee":"code","13dffce2":"code","734261ab":"code","3d23b8c8":"code","fcea4f7c":"code","65e8a939":"code","34f8fc50":"code","2d465981":"code","4224891d":"code","6b8b7970":"code","b2d64ada":"code","4d4b5d25":"code","045d0720":"code","c13ef4e8":"code","dc94ce64":"code","5e33e8fb":"code","8432710e":"code","4c0098e9":"code","eefa6c25":"code","e548aab7":"code","f4e2b892":"code","4502b49b":"code","df06a079":"code","f5a00f03":"code","93adbde1":"code","0fad6378":"code","f2f921ed":"code","04129cef":"code","15427354":"code","7f7a5172":"code","a7a3590b":"code","5942c669":"code","83057292":"code","d06477f6":"code","da6348be":"code","ce572e27":"code","28466d22":"code","65a44274":"code","7b7fc804":"code","ca150eb8":"markdown","28d9eb1c":"markdown","9d3a0d7c":"markdown","e7465d3f":"markdown","fbf3cce1":"markdown","49fabc5f":"markdown","15c9c8b7":"markdown","0632bb17":"markdown","bc52b99e":"markdown","41a4f648":"markdown","97089be5":"markdown","e878874c":"markdown","82329eb1":"markdown","9f4d083c":"markdown","2a501f7e":"markdown","63846d52":"markdown","59544543":"markdown","d049795f":"markdown","94eec7b5":"markdown","137d5d49":"markdown","b4f89170":"markdown","e1319965":"markdown","d2c20d93":"markdown","a32f1e99":"markdown","45eaeebd":"markdown","3e98241d":"markdown","9cbc4ee2":"markdown","8c4efe9a":"markdown","226644d6":"markdown","fe183ff6":"markdown","6004f4e2":"markdown","af5ae492":"markdown","895ae3ce":"markdown","da52dfdb":"markdown","4a141ba0":"markdown","55873e24":"markdown","0799245e":"markdown"},"source":{"d8a09b86":"import numpy as np\nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt","367d2dce":"df_competition = pd.read_csv('..\/input\/igns-best-game-of-all-time-bracket\/ign_bracket_competition.csv')\ndf_metacritic = pd.read_csv('..\/input\/metacritic-all-time-games-stats\/metacritic_games.csv')\ndf_sales = pd.read_csv('..\/input\/video-games-sales-2019\/vgsales-12-4-2019.csv')","f21bd03a":"lst1 = df_competition['Game'].to_list()\nlst2 = df_competition['Opponent'].to_list()\n\ns_competition = set(lst1+lst2)\n\n#s_competition","6d121036":"s_metacritic = set(df_metacritic[df_metacritic['name'].isin(s_competition)]['name'].to_list())\n\n\nlen(s_metacritic)","ad293ae8":"s_sales = set(df_sales[df_sales['Name'].isin(s_competition)]['Name'].to_list())\n\nlen(s_sales)","6fd91a58":"list(filter(lambda s: s not in s_sales, s_competition))","e359d9b2":"list(filter(lambda s: s not in s_metacritic, s_competition))","c5ee8010":"df_sales[df_sales['Name'].str.contains('Persona 5')].head() # Persona","3d25e4a1":"df_sales[df_sales['Name'].str.contains('Final Fantasy VII')].head() # Final Fantasy VII","9e7eb381":"df_sales[df_sales['Name'].str.contains('Tony Hawk')].head() # Tony Hawk's Pro Skater 2","3a52fa84":"df_sales[df_sales['Name'].str.contains('Pokemon')].head() # Pokemon Red \/ Green \/ Blue Version","ccad72a5":"df_sales[df_sales['Name'].str.contains('Fable')].head() # Fable II","8a98002d":"df_competition['Game'].replace({'Pokemon Yellow': 'Pokemon Red \/ Green \/ Blue Version',\n                                'Persona 5 Royal': 'Persona 5',\n                                'Final Fantasy VII (1997)': 'Final Fantasy VII',\n                                'Tony Hawk Pro Skater 2':\"Tony Hawk's Pro Skater 2\",\n                                'Fable 2':'Fable II'}, inplace=True)\n\ndf_competition['Opponent'].replace({'Pokemon Yellow': 'Pokemon Red \/ Green \/ Blue Version',\n                                'Persona 5 Royal': 'Persona 5',\n                                'Final Fantasy VII (1997)': 'Final Fantasy VII',\n                                'Tony Hawk Pro Skater 2':\"Tony Hawk's Pro Skater 2\",\n                                'Fable 2':'Fable II'}, inplace=True)\n\n\nlst1 = df_competition['Game'].to_list()\nlst2 = df_competition['Opponent'].to_list()\n\ns_competition = set(lst1+lst2)\ns_sales = set(df_sales[df_sales['Name'].isin(s_competition)]['Name'].to_list())\ns_metacritic = set(df_metacritic[df_metacritic['name'].isin(s_metacritic)]['name'].to_list())\n\nlist(filter(lambda s: s not in s_sales, s_competition))","23acf5a9":"df_sales_ = df_sales[df_sales['Name'].isin(s_competition)]","86100e50":"df_sales_.info()","d6f4f642":"df_sales_ = df_sales_.drop(['basename','NA_Sales', 'PAL_Sales', 'JP_Sales', 'url', 'img_url', 'Rank', 'VGChartz_Score', 'Last_Update', 'status'], axis=1)\n\ndf_sales_.head()","856458ec":"list(filter(lambda s: s not in s_metacritic, s_competition))","d2266140":"df_metacritic[df_metacritic['name'].str.contains('Street Fighter II')] # Super Street Fighter II: Turbo Revival, Street Fighter II' Hyper Fighting,\n                                                                       # Super Street Fighter II Turbo HD Remix, Super Street Fighter II Turbo HD Remix,\n                                                                       # Ultra Street Fighter II: The Final Challengers","41438959":"df_metacritic[df_metacritic['name'].str.contains('God of War')].tail() # God of War | PS4","857574db":"df_metacritic[df_metacritic['name'].str.contains('INSIDE')] # Inside the dataset (no pun intended)","81b0af4e":"df_metacritic[df_metacritic['name'].str.contains('Super Mario')] # Not in dataset.","f34f4157":"df_metacritic[df_metacritic['name'].str.contains('Starcraft')] # Starcraft ","73d90053":"df_metacritic[df_metacritic['name'].str.contains('Pokemon')] # Not in the data set","f5a8b094":"df_metacritic[df_metacritic['name'].str.contains('Metroid')] # Not in the data set","5b382ceb":"df_metacritic[df_metacritic['name'].str.contains('Apex')] # Not in the data set.","7fde0f31":"df_metacritic['name'].replace({'Super Street Fighter II: Turbo Revival': 'Street Fighter II',\n                               'Super Street Fighter II Turbo HD Remix': 'Street Fighter II',\n                               \"Street Fighter II' Hyper Fighting\": 'Street Fighter II',\n                               'Ultra Street Fighter II: The Final Challengers': 'Street Fighter II',\n                               'Starcraft':'StarCraft',\n                               'INSIDE': 'Inside'\n                               }, inplace=True)\n\ndf_metacritic.loc[df_metacritic['platform'] == 'PS4', :] = df_metacritic.loc[df_metacritic['platform'] == 'PS4', :].replace({'God of War':'God of War (2018)'})","8e6d1bf3":"df_metacritic_ = df_metacritic[df_metacritic['name'].isin(s_competition)]","02c91ae3":"df_metacritic_.info()","4ac1b1ac":"df_metacritic_ = df_metacritic_.drop(['release_date', 'link',\n                    'critic_positive', 'critic_neutral', 'critic_negative',\n                    'user_positive', 'user_neutral', 'user_negative', 'attribute'], axis=1) \n\ndf_metacritic_","ab80feae":"df_metacritic_.info()","4a99e566":"df_sales_.info()","748ed87f":"no_version = df_sales_['Name'].value_counts().reset_index().rename(columns={'index':'Name', 'Name':'Versions'})\n\ndf_total = pd.DataFrame({'Name': list(s_competition)})\n\ndf_total = pd.merge(df_total, no_version, on='Name', how='left')\n\ndf_total","e69ab4e6":"cat_df = df_sales_[['Name', 'Genre', 'ESRB_Rating', 'Publisher', 'Developer']].drop_duplicates()\ncat_df.info()","2f84f233":"sum(cat_df['Name'].value_counts() > 1)","5a19402b":"cat_df = cat_df.replace({'Unknown': None})\n\ncat_df = cat_df.drop_duplicates(subset=['Developer'])\n\ncat_df","1ca5ce21":"sum(cat_df['Name'].value_counts() > 1)","982e6d06":"ind = cat_df['Name'].value_counts()\n\nind[ind > 1]","14ff5247":"cat_df[cat_df['Name'] == 'Doom']","3e4195b5":"cat_df.loc[cat_df['Name'] == 'Doom', 'ESRB_Rating'] = 'M'\ncat_df.loc[cat_df['Name'] == 'Doom', 'Publisher'] = 'Activision'\ncat_df.loc[cat_df['Name'] == 'Doom', 'Developer'] = 'id Software'","1caf4cb3":"cat_df.loc[cat_df['Name'] == \"Tony Hawk's Pro Skater 2\"]","fa485e94":"cat_df.loc[cat_df['Name'] == \"Tony Hawk's Pro Skater 2\", 'ESRB_Rating'] = 'T'\ncat_df.loc[cat_df['Name'] == \"Tony Hawk's Pro Skater 2\", 'Developer'] = 'Neversoft Entertainment'","fc029730":"cat_df.loc[cat_df['Name'] == 'Minecraft']","8bd86e34":"cat_df.loc[cat_df['Name'] == 'Minecraft', 'ESRB_Rating'] = 'E'\ncat_df.loc[cat_df['Name'] == 'Minecraft', 'Publisher'] = 'Microsoft Game Studios'\ncat_df.loc[cat_df['Name'] == 'Minecraft', 'Developer'] = 'Mojang'","a4379e41":"cat_df.loc[cat_df['Name'] == 'Tetris', 'ESRB_Rating'] = 'E'\ncat_df.loc[cat_df['Name'] == 'Tetris', 'Publisher'] = 'Nintendo'\ncat_df.loc[cat_df['Name'] == 'Tetris', 'Developer'] = 'Nintendo'","283b2c3c":"cat_df.loc[cat_df['Name'] == 'Resident Evil 4']","26971d4b":"cat_df.loc[cat_df['Name'] == 'Resident Evil 4', 'Genre'] = 'Action'\ncat_df.loc[cat_df['Name'] == 'Resident Evil 4', 'ESRB_Rating'] = 'M'\ncat_df.loc[cat_df['Name'] == 'Resident Evil 4', 'Publisher'] = 'Capcom'\ncat_df.loc[cat_df['Name'] == 'Resident Evil 4', 'Developer'] = 'Capcom'","3731951c":"cat_df.loc[cat_df['Name'] == 'BioShock']","6c5282ee":"cat_df.loc[cat_df['Name'] == 'BioShock', 'Developer'] = 'Irrational Games'","13dffce2":"cat_df.loc[cat_df['Name'] == 'Call of Duty 4: Modern Warfare'] ","734261ab":"cat_df.loc[cat_df['Name'] == 'Call of Duty 4: Modern Warfare', 'ESRB_Rating'] = 'M'\ncat_df.loc[cat_df['Name'] == 'Call of Duty 4: Modern Warfare', 'Developer'] = 'Infinity Ward'","3d23b8c8":"cat_df = cat_df.drop_duplicates()\n\nind = cat_df['Name'].value_counts()\n\nlst = list(ind[ind > 1].index)\n\ncat_df[cat_df['Name'].isin(lst)].sort_values('Name')","fcea4f7c":"cat_df.loc[cat_df['Name'] == 'Castlevania: Symphony of the Night', 'Developer'] = 'Konami Computer Entertainment Tokyo'\n\ncat_df.loc[cat_df['Name'] == 'GoldenEye 007', 'Publisher'] = 'Nintendo'\ncat_df.loc[cat_df['Name'] == 'GoldenEye 007', 'Developer'] = 'Rare Ltd.'\n\ncat_df.loc[cat_df['Name'] == 'Shadow of the Colossus', 'Genre'] = 'Adventure'\ncat_df.loc[cat_df['Name'] == 'Shadow of the Colossus', 'Developer'] = 'Team ICO'\ncat_df.loc[cat_df['Name'] == 'Shadow of the Colossus', 'Publisher'] = 'Sony Interactive Entertainment'\n\ncat_df.loc[cat_df['Name'] == 'Halo 2', 'Developer'] = 'Bungie Studios'\n\ncat_df.loc[cat_df['Name'] == 'The Elder Scrolls V: Skyrim', 'Developer'] = 'Bethesda Softworks'\n\ncat_df.loc[cat_df['Name'] == 'The Sims 3', 'Developer'] = 'The Sims Studio'\n\ncat_df = cat_df.drop_duplicates()","65e8a939":"df_total = pd.merge(df_total, cat_df, on='Name', how='left')","34f8fc50":"df_total.loc[df_total['ESRB_Rating'] == 'E10', 'ESRB_Rating'] = 'E'","2d465981":"df_metacritic_ = df_metacritic_.rename(columns={'name':'Name', 'developer': 'Developer', 'publisher':'Publisher', 'rating': 'ESRB_Rating', 'genre(s)':'Genre'})","4224891d":"cat_df = df_metacritic_[['Name', 'Genre', 'ESRB_Rating', 'Publisher', 'Developer']].drop_duplicates(subset='Name').sort_values('Name').reset_index(drop=True)","6b8b7970":"df_total = df_total.sort_values('Name').reset_index(drop=True)\n\ndf_total","b2d64ada":"ind = df_total[df_total['Name'].isin(cat_df['Name'])].index\n\n\ndic = {i:j for i,j in zip(range(63), ind)}\n\n\ncat_df = cat_df.rename(index=dic)\n\ndf_total.update(cat_df, overwrite=False)","4d4b5d25":"df_metacritic_['user_score'] = df_metacritic_['user_score'].astype(float)\ndf_metacritic_['metascore'] \/= 10\ndf_metacritic_.info()","045d0720":"num_df = df_metacritic_.groupby('Name').mean().reset_index().rename(columns={'metascore':'Critic_Score', 'user_score':'User_Score'})\n\nnum_df.head(10)","c13ef4e8":"df_total = pd.merge(df_total, num_df, on='Name', how='left')","dc94ce64":"num_df = df_sales_.groupby('Name').mean().reset_index()[['Name','Critic_Score','User_Score']]\nind = df_total[df_total['Name'].isin(num_df['Name'])].index\n\n\ndic = {i:j for i,j in zip(range(63), ind)}\n\n\nnum_df = num_df.rename(index=dic)\n\ndf_total.update(num_df, overwrite=False)","5e33e8fb":"num_df = df_sales_.groupby('Name').sum().reset_index()[['Name', 'Total_Shipped', 'Global_Sales','Other_Sales']]\n\nnum_df = pd.eval(\"Total_Sold = num_df.Total_Shipped + num_df.Global_Sales + num_df.Other_Sales\", target=num_df)\n\nnum_df = num_df.drop(['Total_Shipped','Global_Sales','Other_Sales'], axis=1)\n\ndf_total = pd.merge(df_total, num_df, on='Name', how='left')","8432710e":"num_df = df_sales_.groupby('Name').apply(lambda x: x.Year.min()).reset_index().rename(columns={0:'Year'})\n\ndf_total = pd.merge(df_total, num_df, on='Name', how='left')\n","4c0098e9":"df_play = df_metacritic_[['Name', 'players']].drop_duplicates()\ndf_play.sort_values('Name')","eefa6c25":"df_play.loc['Doom', 'players'] = '1 Player'\ndf_play = df_play.dropna()\nsingle_ind = df_play['players'].str.contains('No Online') | df_play['players'].str.contains('1 Player')\n\nind = df_play['Name'].value_counts()\n\ndf_play['MultiPlayer'] = ~single_ind\n\ndf_play.drop('players', axis=1, inplace=True)\n\ndf_play.drop_duplicates(inplace=True)","e548aab7":"df_play.sort_values('Name').head(20)","f4e2b892":"df_play = df_play.groupby('Name').sum().reset_index()\n\ndf_play.loc['Uncharted 2: Among Thieves', 'MultiPlayer'] = 1","4502b49b":"df_total = pd.merge(df_total, df_play, on = 'Name', how='left')","df06a079":"ind = df_total.isnull().sum(axis=1).astype(bool)\n\ndf_total[ind]","f5a00f03":"add_ind = df_total[ind].index\nadd_col = df_total[ind].drop(['Name'],axis=1).columns","93adbde1":"add_df = pd.DataFrame([(1, 'Misc', 'E', 'Nintendo', 'Nintendo', 9.0, 5.5, 33.86, 2020, 1),\n                      ('-', 'Shooter', 'T', 'Electronic Arts', 'Respawn Entertainment', 8.9, 6.9, '-', '-', 1),\n                      ('-', '-', '-', '-', '-', '-', '-', '-', '-', 0),\n                      (4, '-', 'T', 'Supergiant Games', '-', 9.3, 9.0, 1.0, 2021, 0),\n                      (1, 'Shooter', 'T', 'Valve Corporation', 'Valve Corporation', 9.3, 9.0, 10.0, 2020, 0),\n                      ('-','-','-','-','-','-',np.nan,'-','-', 0),\n                      ('-','-','-','-','-','-',np.nan,'-','-', 0),\n                      ('-','-','-','-','-','-',np.nan,'-','-', 0),\n                      ('-','-','-','-','-','-',np.nan,'-','-', 0)],columns=add_col,index=add_ind)\n\nadd_df","0fad6378":"df_total.update(add_df, overwrite=False)\n\ndf_total['Free_To_Play'] = 0\n\ndf_total.loc[df_total['Name'].isin(['World of Warcraft', 'Apex Legends', 'League of Legends', 'Fortnite']), 'Free_To_Play'] = 1\n\ndf_total","f2f921ed":"df_total['User_Score'].fillna(df_total['User_Score'].mean(), inplace=True)","04129cef":"df_total.loc[df_total['Name'] == 'Hades', 'Versions'] = 4\ndf_total.loc[df_total['Name'] == 'Street Fighter II', 'Total_Sold'] = 14.3\ndf_total.loc[df_total['Name'] == 'Bloodborne', 'Genre'] = 'Role-Playing'\ndf_total.loc[df_total['Name'] == 'The Last of Us', 'Genre'] = 'Action-Adventure'\ndf_total.loc[df_total['Name'] == 'Overwatch', 'Genre'] = 'Shooter'\n","15427354":"df_total['Genre'].value_counts()","7f7a5172":"df_total.loc[df_total['Genre'] == 'Action-Adventure', 'Genre'] = 'Action\/Adventure'\ndf_total.loc[df_total['Genre'] == 'Action Adventure', 'Genre'] = 'Action\/Adventure'\n\ndf_total['Genre'].value_counts()","a7a3590b":"df_total.loc[df_total['ESRB_Rating'] == 'E10+', 'ESRB_Rating'] = 'E'\n\ndf_total['ESRB_Rating'] = df_total['ESRB_Rating'].replace({'E': 1, 'T': 2, 'M': 3})","5942c669":"df_total['Publisher'].value_counts()","83057292":"df_total.loc[df_total['Publisher'].isin(['Sony Computer Entertainment', 'Sony Interactive Entertainment',\n                                         'SCEA', 'Sony Computer Entertainment America']), 'Publisher'] = 'Sony'\n\ndf_total.loc[df_total['Publisher'].isin(['Blizzard Entertainment']), 'Publisher'] = 'Activision\/Blizzard'\ndf_total.loc[df_total['Publisher'].isin(['Activision']), 'Publisher'] = 'Activision\/Blizzard'\n\ndf_total.loc[df_total['Publisher'].isin(['Valve Corporation']), 'Publisher'] = 'Valve'\ndf_total.loc[df_total['Publisher'].str.contains('Warner'), 'Publisher'] = 'Warner'\n\ndf_total['Publisher'].value_counts()","d06477f6":"df_total['Developer'].value_counts()","da6348be":"df_total.loc[df_total['Developer'].isin(['Nintendo R&D2', 'Nintendo EAD', 'Nintendo EPD']), 'Developer'] = 'Nintendo'\ndf_total.loc[df_total['Developer'].isin(['Blizzard North']), 'Developer'] = 'Blizzard Entertainment'\ndf_total.loc[df_total['Developer'].isin(['Valve Corporation']), 'Developer'] = 'Valve Software'\ndf_total.loc[df_total['Developer'].isin(['Rockstar North', 'Rockstar San Diego']), 'Developer'] = 'Rockstar Games'\n\ndf_total['Developer'].value_counts()","ce572e27":"df_total.info()","28466d22":"df_total['Versions'] = df_total['Versions'].astype(int)\ndf_total['ESRB_Rating'] = df_total['ESRB_Rating'].astype(int)\ndf_total['Critic_Score'] = df_total['Critic_Score'].astype(float)\ndf_total['Total_Sold'] = df_total['Total_Sold'].astype(float)\ndf_total['Year'] = df_total['Year'].astype(int)\ndf_total['MultiPlayer'] = df_total['MultiPlayer'].astype(bool)\ndf_total['Free_To_Play'] = df_total['Free_To_Play'].astype(bool)\n\ndf_total = df_total[['Name', 'Genre', 'Publisher', 'Developer','MultiPlayer', 'Free_To_Play', 'Versions','ESRB_Rating', 'Year', 'Critic_Score', 'User_Score', 'Total_Sold']]\n\ndf_total.info()","65a44274":"df_total","7b7fc804":"df_total.to_csv('ign_contesters.csv', index=False)","ca150eb8":"## 8. Reducing Cardinality","28d9eb1c":"## 4. Adding Sales","9d3a0d7c":"Fable II with Romans Numerals.","e7465d3f":"For the rest, a simple mean imputation to avoid variance with a arbitrally imputation.","fbf3cce1":"## 3. Adding Scores","49fabc5f":"## 2. Removing duplicates","15c9c8b7":"Despite Persona 5 Royal being a 2020 game, Persona 5 is from 2016, we will use this version for analysis.","0632bb17":"## 6. Filling Missing Values","bc52b99e":"Since they are small, will input the correct values manually.","41a4f648":"Changing rating from categorical to numerical will improve model peformance.","97089be5":"Now there's 13 games duplicated. Let's cover one by one.","e878874c":"## 5. Multiplayer Feature","82329eb1":"Now, we will evaluate the values that are missing.","9f4d083c":"We must standardize the dataset to remove duplicates.","2a501f7e":"Now, let's switch the names from the competition dataset.","63846d52":"33 games duplicated! To come around this issue, we will drop the developer's, since is the most specific informal in this categorical data.","59544543":"Gathering all contesters.","d049795f":"With instances semi-resolved, we will start making the complete dataset.","94eec7b5":"Missing a char.","137d5d49":"This step is to evaluate if a game have mulitplayer or not, it does not mean that the game is exclusively multiplayer.","b4f89170":"Covering missing data with sales dataset.","e1319965":"This notebook has the objetive to gather all information about the contesters of the IGN's 2021 bracket competition of Best Game of All Time. Without further a do, let's get to it.","d2c20d93":"The Datasets loaded doesn't seem to have all instances that composes the 64 contesters, only 48 and 57 for scores and sales, respectively. But it might be case that the instances have different names. We must adequate them.","a32f1e99":"This one is going to be a little bit messier, but we will get through it. The difference now is that we are going to adequate the instances from the MetaCritic Dataset, not the Competition one.","45eaeebd":"## 1. Import Datasets","3e98241d":"Final Fantasy Remake was not released yet, therefore, there was only one version avaliable, the 1997 one.","9cbc4ee2":"Animal Crossing: New Horizons, Hades, Half-Life: Alyx. are all games that are from 2020, and the datasets only have information until 2019, we will deal with then later. Let's treat the sales dataset first. ","8c4efe9a":"There still missing information on the categorical data, for that reason, we will cover null values with informations from the other dataset.","226644d6":"In this step, we will reduce the number of classes from the categorical data, for better analysis.","fe183ff6":"SF II is one of the games that have a lot of different versions.","6004f4e2":"Pokemon Red \/ Green \/ Blue Version are similar games to Yellow, making them a good substitute.","af5ae492":"Dropping unecessary features.","895ae3ce":"There are still duplicates, but all of them are multiplayer, so we will sum them. Uncharted 2 had a multiplayer.","da52dfdb":"## 2. Adequating Instances","4a141ba0":"The easiest way to differentiate God of War (2018) from God of War (2005) in the data is to verify their Platform, since God of War (2018) is only for ps4.","55873e24":"Not all duplicates were take off, we must evaluate carefully.","0799245e":"## 7. Correcting information"}}