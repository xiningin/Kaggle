{"cell_type":{"d3c7136d":"code","74a1299b":"code","2984642e":"code","0e586a03":"code","47c126fd":"code","f15b3c0e":"code","a1d36406":"code","3269714d":"code","a71a0bef":"code","353162a3":"code","12f4b7d7":"code","cdf6877f":"code","0866400a":"code","53e56398":"code","d4d58252":"code","7b82b7b7":"code","88e28921":"code","66a44524":"code","ecdcbb03":"code","91595699":"code","87362847":"code","aa8a9198":"code","a303ad5c":"code","47aaf06d":"code","3e6f5e24":"code","ba0e6edb":"markdown","dc07bbd8":"markdown","22495a4c":"markdown","509d5bbd":"markdown","0f272dc6":"markdown","c9f17408":"markdown","efdb778c":"markdown","45339fa8":"markdown","79114ff7":"markdown"},"source":{"d3c7136d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler\nimport string\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nfrom matplotlib.ticker import MaxNLocator\nimport seaborn as sns\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","74a1299b":"def concat_df(train_data, test_data):\n    # Returns a concatenated df of training and test set\n    return pd.concat([train_data, test_data], sort=True).reset_index(drop=True)\n\ndef divide_df(all_data):\n    # Returns divided dfs of training and test set\n    return all_data.loc[:1459], all_data.loc[1460:].drop(['SalePrice'], axis=1)\n","2984642e":"iowa_file_path = '..\/input\/home-data-for-ml-course\/train.csv'\niowa_file_test_path=\"..\/input\/home-data-for-ml-course\/test.csv\"\ndataset_train=pd.read_csv(iowa_file_path)\ndataset_test=pd.read_csv(iowa_file_test_path)\ndf_all = concat_df(dataset_train, dataset_test)","0e586a03":"print('Number of Training Examples = {}'.format(dataset_train.shape[0]))\nprint('Number of Test Examples = {}\\n'.format(dataset_test.shape[0]))\nprint('Training X Shape = {}'.format(dataset_train.shape))\nprint('Training y Shape = {}\\n'.format(dataset_train['SalePrice'].shape[0]))\nprint('Test X Shape = {}'.format(dataset_test.shape))\nprint('Test y Shape = {}\\n'.format(dataset_test.shape[0]))","47c126fd":"dataset_train.describe()\n","f15b3c0e":"dataset_test.describe()","a1d36406":"dataset_train.head(-1)","3269714d":"print(dataset_train.info())","a71a0bef":"print(dataset_test.info())","353162a3":"print(df_all.info())","12f4b7d7":"drop_cols=['Alley','Fence','FireplaceQu','PoolQC','LotFrontage','MiscFeature' ]\ndf_all.drop(columns=drop_cols, inplace=True)","cdf6877f":"\nzero_cols = [\n    'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'BsmtFullBath',\n    'BsmtHalfBath', 'GarageYrBlt', 'GarageArea', 'GarageCars', 'MasVnrArea'\n]\nfor col in zero_cols:\n    df_all[col].replace(np.nan, 0, inplace=True)\n","0866400a":"\ndf_all['MSZoning'] = df_all.groupby('MSSubClass')['MSZoning'].apply(\n    lambda x: x.fillna(x.mode()[0]))","53e56398":"conditn_map = {'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}\ndf_all['ExterQual'] = df_all['ExterQual'].map(conditn_map).astype('int')\ndf_all['ExterCond'] = df_all['ExterCond'].map(conditn_map).astype('int')","d4d58252":"def srt_reg(y, df):\n    fig, axes = plt.subplots(12, 3, figsize=(25, 80))\n    axes = axes.flatten()\n\n    for i, j in zip(df.select_dtypes(include=['number']).columns, axes):\n\n        sns.regplot(x=i,\n                    y=y,\n                    data=df,\n                    ax=j,\n                    order=3,\n                    ci=None,\n                    color='#3ce7e1',\n                    line_kws={'color': 'green'},\n                    scatter_kws={'alpha':0.4})\n        j.tick_params(labelrotation=45)\n        j.yaxis.set_major_locator(MaxNLocator(nbins=10))\n\n        plt.tight_layout()","7b82b7b7":"srt_reg('SalePrice', dataset_train)","88e28921":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor","66a44524":"\n#get correlations of each features in dataset\ncorrmat = df_all.corr()\n\ntop_corr_features = corrmat.index\nplt.figure(figsize=(75,75))\n#plot heat map\ng=sns.heatmap(df_all[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")","ecdcbb03":"corrmat","91595699":"corrmat['SalePrice'].sort_values(ascending=False).head(20)","87362847":"df_train,df_test=divide_df(df_all)","aa8a9198":"df_train.head()","a303ad5c":"features=[\n'OverallQual',     \n'GrLivArea',      \n#'ExterQual',      \n'GarageCars',     \n'GarageArea' ,     \n'TotalBsmtSF',     \n'1stFlrSF' ,       \n'FullBath' ,       \n'TotRmsAbvGrd',    \n'YearBuilt' ,      \n'YearRemodAdd',    \n'MasVnrArea',      \n'Fireplaces',      \n'BsmtFinSF1'  ,    \n'WoodDeckSF'  ,   \n'2ndFlrSF',        \n'OpenPorchSF',    \n'HalfBath',        \n'LotArea']\nX=df_train[features]\ny=df_train.SalePrice\n\n\n\n# Split into validation and training data\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)","47aaf06d":"rf_model = RandomForestRegressor()\nrf_model.fit(X, y)","3e6f5e24":"test_data_path = '..\/input\/home-data-for-ml-course\/test.csv'\ntest_data = pd.read_csv(test_data_path)\ntest_X = test_data[features]\nX_test = test_X.fillna(train_X.mean())\ntest_preds = rf_model.predict(X_test )\nprint(test_preds)\n\noutput = pd.DataFrame({'Id': test_data.Id,\n                       'SalePrice': test_preds})\noutput.to_csv('submission.csv', index=False)","ba0e6edb":"* Training set has 1460 rows and test set has 1459 rows\n* Training set have 81 features and test set have 80 features\n* One extra feature in training set is SalePrice, which is the target variable","dc07bbd8":"# Model_building_tymm","22495a4c":"**Let's find out which features are highly correlated to sale price**\nThese feature contribute most in predicting the sale price","509d5bbd":"* ****head() fn is used to test if your object has the right type of data in it.\n* **info() fn is used to print information about a DataFrame including the index dtype and columns, non-null values and memory usage**.\n","0f272dc6":"# # **LOAD THE DATASET** (As we know without data ,we can't start !!!)","c9f17408":"   Alley,Fence,FireplaceQu,PoolQC,LotFrontage,MiscFeature - have large amount of missing values \n   so it is bad idea to fill them with data therefore we can drop those fields.\n   \n   But always remember that it's not always good idea to drop missing values column .If the column contains ~80% missing values then it should be dropped. But if it is important column then request business to provide new data set. \n   \n   so now lets's try to fill missing data\n \n     \n     ","efdb778c":"As we can see there is missing data in many coloums like MasVnrType ,MasVnrArea etc.","45339fa8":"# **Know your data (EDA)** ","79114ff7":"**(It's very impt to know and study ur data carefully.We should analyze how many categorical data and nominal data is there .It's also necessary to know about missing data as it can effect the accuracy of the model. *So let's begin* )**"}}