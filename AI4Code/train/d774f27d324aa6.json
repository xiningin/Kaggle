{"cell_type":{"81990bd7":"code","d484d2c4":"code","e6740e4e":"code","249f549b":"code","af5d179b":"code","2ca97ad3":"code","a33e497b":"code","6233371e":"code","77357b55":"code","3ee4d498":"code","b9039f41":"code","ce54eb23":"code","627d4725":"code","c6a10151":"code","b41f4c4e":"code","32c61044":"code","1180fc30":"code","b62982f5":"code","19481132":"code","7cae3a3d":"code","4a30a541":"code","ee5fffca":"code","ad7cc262":"code","ccafcb52":"code","cd7cd346":"code","b8b3f251":"code","00f9138c":"code","7650753c":"code","d04e719b":"code","d75b8541":"code","bcaed872":"code","472b7ef9":"code","8b8ad438":"code","2e4da3b1":"code","537fdc51":"code","907ea22f":"code","929ef04b":"code","c93c496c":"markdown","cac71281":"markdown","1e0fb646":"markdown"},"source":{"81990bd7":"# Import general packages \nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","d484d2c4":"# Reading data from the csv files\ntrain_data = pd.read_csv(\"..\/input\/big-mart-sales-prediction\/Train.csv\")\ntest_data = pd.read_csv(\"..\/input\/big-mart-sales-prediction\/Test.csv\")\ntrain_data.head()","e6740e4e":"# Checking the lengths of the available data\nprint(len(train_data))\nprint(len(test_data))","249f549b":"# Understanding the training data\ntrain_data.info()","af5d179b":"# Checking for missing values\ntrain_data.isnull().any()","2ca97ad3":"# Filling the missing values with the median values\ntrain_data.fillna(train_data.median(),inplace=True)","a33e497b":"# Checking to see if missing values still exist. Outlet_Size feature still has missing values\ntrain_data.isnull().any()","6233371e":"plt.scatter(train_data.Item_Visibility, train_data.Item_Outlet_Sales)\nplt.title('Item Visibility vs Item Outlet Sales')\nplt.xlabel('Item Visibility')\nplt.xticks(rotation= 90)\nplt.ylabel('Item Outlet Sales')\nplt.show()","77357b55":"plt.bar(train_data.Outlet_Identifier, train_data.Item_Outlet_Sales)\nplt.title('Outlet_Identifier vs Item Outlet Sales')\nplt.xlabel('OutletIdentifier')\nplt.xticks(rotation= 90)\nplt.ylabel('Item Outlet Sales')\nplt.show()","3ee4d498":"plt.bar(train_data.Item_Type, train_data.Item_Outlet_Sales)\nplt.title('Item Type vs Item Outlet Sales')\nplt.xlabel('Item Type')\nplt.xticks(rotation= 90)\nplt.ylabel('Item Outlet Sales')\nplt.show()","b9039f41":"import seaborn as sns\n\nax = sns.boxplot(x=\"Item_Type\", y=\"Item_MRP\", data=train_data).set_title(\"Item Type vs Item MRP\")\nplt.xticks(rotation= 90)","ce54eb23":"train_data.info()","627d4725":"# Encoding categorical features so that the model can understand\nfrom sklearn.preprocessing import LabelEncoder\nlabelEncoder = LabelEncoder()\n\ntrain_data.Item_Identifier = labelEncoder.fit_transform(train_data.Item_Identifier)\ntrain_data.Item_Fat_Content = labelEncoder.fit_transform(train_data.Item_Fat_Content)\ntrain_data.Item_Type = labelEncoder.fit_transform(train_data.Item_Type)\ntrain_data.Outlet_Identifier = labelEncoder.fit_transform(train_data.Outlet_Identifier)\ntrain_data.Outlet_Location_Type = labelEncoder.fit_transform(train_data.Outlet_Location_Type)\ntrain_data.Outlet_Type = labelEncoder.fit_transform(train_data.Outlet_Type)","c6a10151":"# Checking the values of Outlet_Size. \ntrain_data.Outlet_Size.value_counts()","b41f4c4e":"# How many missing values are there in Outlet_Size. Looks like it has the second heights count. \ntrain_data.Outlet_Size.isna().sum()","32c61044":"# Correlation matrix for feature selection\ncorr = train_data.corr()\ncorr.style.background_gradient(cmap='coolwarm')","1180fc30":"# Separating the target variables from all other features. \n# I have removed OutLet_size feature because it has a lot of missing values.\ny = train_data.Item_Outlet_Sales\nX = train_data.drop([\"Item_Outlet_Sales\", \"Outlet_Size\"], axis=1)\nX.columns.size","b62982f5":"# For confirming feature selection\nfrom sklearn.linear_model import LassoCV\n\nreg = LassoCV()\nreg.fit(X, y)\nprint(\"Best alpha using built-in LassoCV: %f\" % reg.alpha_)\nprint(\"Best score using built-in LassoCV: %f\" %reg.score(X,y))\ncoef = pd.Series(reg.coef_, index = X.columns)","19481132":"# Picks out 5 out of 10 features\nprint(\"Lasso picked \" + str(sum(coef != 0)) + \" variables and eliminated the other \" +  str(sum(coef == 0)) + \" variables\")","7cae3a3d":"# This graph is not showing the negativity correlated features (\"Outlet_Location_Type\",\"Outlet_Type\")\n\nimp_coef = coef.sort_values()\nimport matplotlib\nmatplotlib.rcParams['figure.figsize'] = (8.0, 10.0)\nimp_coef.plot(kind = \"barh\")\nplt.title(\"Feature importance using Lasso Model\")","4a30a541":"# Considering only the features that have some correlation with the target variables\nX = X[[\"Item_Visibility\",\"Item_MRP\",\"Outlet_Identifier\",\"Outlet_Location_Type\",\"Outlet_Type\"]]\nX.Item_Visibility.replace({0 : X.Item_Visibility.median()}, inplace = True)","ee5fffca":"# Spliting the data for the model\nfrom sklearn.model_selection import train_test_split\n\nx_train,x_test, y_train, y_test = train_test_split(X,y, test_size = 0.25, random_state=42)","ad7cc262":"# Random Forest Regression model\n\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Instantiate model with 1000 decision trees\nrandom_forest = RandomForestRegressor(n_estimators = 1000, random_state = 42)\n\n# Train the model on training data\nrandom_forest.fit(x_train, y_train)","ccafcb52":"from sklearn.metrics import mean_squared_error as mse\nfrom math import sqrt\n\n# Use the forest's predict method on the test data\nrf_predictions = random_forest.predict(x_test)\n\n# Print out the root mean square error (RMSE)\nrf_rmse = sqrt(mse(y_test, rf_predictions))\n\nprint('Root Mean Square Error:', rf_rmse)","cd7cd346":"plt.plot(y_test, label='Actual')\nplt.plot(rf_predictions, label='Predicted')\nplt.title(\"Random Forest\")\nplt.legend(frameon=True)\nplt.show()","b8b3f251":"# Linear Regression Model\n\nfrom sklearn import linear_model\n\nlinear_regression = linear_model.LinearRegression()\nlinear_regression.fit(x_train,y_train)","00f9138c":"lr_predictions = linear_regression.predict(x_test)\n\n# Print out the root mean square error (RMSE)\nlr_rmse = sqrt(mse(y_test, lr_predictions))\n\nprint('Root Mean Square Error:', lr_rmse)","7650753c":"plt.plot(y_test, label='Actual')\nplt.plot(lr_predictions, label='Predicted')\nplt.title(\"Linear Regression\")\nplt.legend(frameon=True)\nplt.show()","d04e719b":"# Decision Tree Regression Model\n\nfrom sklearn.tree import DecisionTreeRegressor  \n  \n# create a regressor object \ndecision_tree = DecisionTreeRegressor(random_state = 0)  \n  \n# fit the regressor with X and Y data \ndecision_tree.fit(x_train, y_train)","d75b8541":"dt_predictions = decision_tree.predict(x_test)\n\n# Print out the root mean square error (RMSE)\ndt_rmse = sqrt(mse(y_test, dt_predictions))\n\nprint('Root Mean Square Error:', dt_rmse)","bcaed872":"plt.plot(y_test, label='Actual')\nplt.plot(dt_predictions, label='Predicted')\nplt.title(\"Decision Tree\")\nplt.legend(frameon=True)\nplt.show()","472b7ef9":"print(\"Root Mean Sqaure Error of different Regression models:\")\nprint(\"Random Forest:\", rf_rmse)\nprint(\"Linear Regression:\", lr_rmse)\nprint(\"Decision Tree:\", dt_rmse)","8b8ad438":"# Preparing test dataset\n\ntest_data = test_data[[\"Item_Visibility\",\"Item_MRP\",\"Outlet_Identifier\",\"Outlet_Location_Type\",\"Outlet_Type\"]]\ntest_data.Item_Visibility.replace({0 : test_data.Item_Visibility.median()}, inplace = True)\ntest_data.Outlet_Identifier = labelEncoder.fit_transform(test_data.Outlet_Identifier)\ntest_data.Outlet_Location_Type = labelEncoder.fit_transform(test_data.Outlet_Location_Type)\ntest_data.Outlet_Type = labelEncoder.fit_transform(test_data.Outlet_Type)\ntest_data.head()","2e4da3b1":"# Prediction on test data set\nsol = random_forest.predict(test_data)\nsol[:10]","537fdc51":"solution = pd.read_csv(\"..\/input\/big-mart-sales-prediction\/Submission.csv\")\nsolution.head()","907ea22f":"solution['Item_Outlet_Sales'] = sol","929ef04b":"# Saving in csv file\nsolution.to_csv(\"Submission.csv\")","c93c496c":"# Building models","cac71281":"# Feature Selection","1e0fb646":"# **Exploring Data**"}}