{"cell_type":{"09c97b00":"code","35745ab8":"code","0af76b65":"code","229467db":"code","efa084d6":"code","71ed9de6":"code","eb67c16a":"code","bbc18bb7":"markdown","4897c817":"markdown"},"source":{"09c97b00":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","35745ab8":"def count_sort(numlist, p):\n    n = len(numlist)\n    output = [0] * n\n    count = [0] * 10\n    \n    for i in range(0,n):\n        idx = numlist[i] \/ p \n        count[int(idx % 10)] += 1    # count number occurrences of the last digit\n        \n    \n    for j in range(1,10):    # loop to to add up the counts\n        count[j] += count[j-1]\n    \n    k = n-1\n    while k >= 0:\n        idx = numlist[i] \/ p\n        \n        output_idx = count[int(idx % 10)] - 1\n        output[output_idx] = numlist[k]\n        \n        count[int(idx % 10)] -= 1\n        k -= 1\n    \n    \n        \n    # transfer new sorted values to original array\n    \n    for l in range(0, n):\n        numlist[l] = output[l] \n        \n        ","0af76b65":"def radix(numlist):\n    p=1\n    m = max(numlist)\n    \n    while m\/p >= 1:\n        \n        count_sort(numlist, p)\n        \n        p *= 10    # change to next digit","229467db":"numbers = [170, 45, 75, 90, 802, 24, 2, 66]\n\nradix(numbers)\n\nprint(numbers)","efa084d6":"def sort_and_merge(a,b):\n    \n    print(f\"a: {a}\")\n    print(f\"b: {b}\")\n    output=[]\n    idx1, idx2 = 0,0\n    \n    while idx1 < len(a) and idx2 < len(b):\n        if a[idx1] < b[idx2]:\n            output.append(a[idx1])\n            idx1 = idx1+1\n        else:\n            output.append(b[idx2])\n            idx2 = idx2+1\n            \n    if idx1 == len(a): \n        output.extend(b[idx2:]) \n    else:\n        output.extend(a[idx1:])\n        \n    print(f\"sorted {output}\")\n    \n    return output","71ed9de6":"def merge_sort(a):\n    if len(a) <= 1:\n        return a\n    \n    idx = int(len(a) \/ 2) # middle index\n    p1,p2 = merge_sort(a[:idx]), merge_sort(a[idx:]) # recursive \n    \n    return sort_and_merge(p1,p2)","eb67c16a":"a = [55,8,94,2,5,83,12,623,67,346,7,5,9]\n\nprint(f\"\\n\\nFINAL:{merge_sort(a)}\")","bbc18bb7":"# MergeSort\n","4897c817":"# Radix Sort\n\nHad really tought time with this one.\nUsed a lot of your code to try to understand and go through it line by line.\n\nIt doesn't seem to work yet, so I have to come back and go through it again"}}