{"cell_type":{"82d8d5c2":"code","f71a125e":"code","4ac8e013":"code","6a86a7ff":"code","5c1e42dd":"code","f4193a82":"code","0bef1c45":"code","25ba0c75":"code","d6f012f3":"code","d04dbd40":"code","a6279d82":"code","570edd1a":"code","3b64a53e":"code","1ae20bb5":"code","42c38019":"code","62e38f08":"code","c02d51a0":"code","7845ad87":"code","a2f64b17":"code","8842aa74":"code","97bf2e5c":"code","390fa63e":"code","4e36381a":"code","020505d9":"code","7eefb016":"code","1aaa39eb":"code","abd18005":"code","85312b4d":"code","cddd19bb":"code","374a6579":"code","096775d1":"code","d952b4a4":"code","d964e9dc":"code","14f64ef8":"code","2b1907f2":"code","9514095d":"code","26ae3f64":"code","062b90c6":"code","2b59ec77":"code","481ed113":"code","fca0b1f9":"code","0d635c46":"code","8c64fc64":"code","61eecd36":"code","f8aef461":"code","e29f0d67":"code","d1608e1a":"markdown","08a51bcd":"markdown","40303b3c":"markdown","7325ce72":"markdown","f49bad1c":"markdown","0bd0cd26":"markdown","3aa7596b":"markdown","1e0a16ef":"markdown","10920ec0":"markdown","4ca72256":"markdown","f030a99f":"markdown","db1476ae":"markdown","41b6c9b6":"markdown","39c46eae":"markdown","ef13adbe":"markdown","2ef4026a":"markdown","a4b2172b":"markdown","09ab6686":"markdown","09446511":"markdown","9dadff00":"markdown","ae5f7112":"markdown","a15bdecd":"markdown","4742b430":"markdown","8daf6056":"markdown","645e18bf":"markdown","42c313d0":"markdown","7fafe941":"markdown","2861a3d7":"markdown"},"source":{"82d8d5c2":"# For mathematical operations\nimport numpy as np\n\n# For data analysis\nimport pandas as pd\n\n# For data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# For encoding categorical variables\nfrom sklearn.preprocessing import LabelEncoder\n\n# For splitting the dataset into train and test set\nfrom sklearn.model_selection import train_test_split\n\n# For hyperparameter tuning\nfrom sklearn.model_selection import GridSearchCV\n\n# For calculating metrics of the model\nfrom sklearn.metrics import confusion_matrix, f1_score, classification_report, accuracy_score\n\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.tree import DecisionTreeClassifier\n\n# For plotting the decision tree\nfrom sklearn.tree import plot_tree\n\n# For ensemble modelling\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import VotingClassifier","f71a125e":"df = pd.read_csv('..\/input\/weather-dataset-rattle-package\/weatherAUS.csv')","4ac8e013":"df.head()","6a86a7ff":"# Find the shape of dataset\n\ndf.shape","5c1e42dd":"# Find the datatype of each attribute\n\ndf.info()","f4193a82":"# Convert datatype of date object to datetime\n\ndf['Date'] = pd.to_datetime(df['Date'])","0bef1c45":"# Statistics for numeric attributes\n\ndf.describe()","25ba0c75":"# Statistics for object attributes\n\ndf.describe(include=\"object\")","d6f012f3":"# Check for duplicates\n\nduplicate = df[df.duplicated()]\nduplicate","d04dbd40":"# Check for null values\n\ndf.isnull().sum()","a6279d82":"# Drop Sunshine, Evaporation, Cloud9am and Cloud3pm as most of the values are null\n\ncol = ['Sunshine', 'Evaporation', 'Cloud9am', 'Cloud3pm']\ndf.drop(col, axis=1, inplace=True)","570edd1a":"# Replace numerical columns with median\ndef replace_numerical(df):\n    for col in df.select_dtypes(['int', 'float']):\n        df[col] = df[col].fillna(df[col].median())\n    return df\n\n# Replace object columns with mode\ndef replace_object(df):\n    for col in df.select_dtypes('object'):\n        df[col] = df[col].fillna(method='ffill')\n    return df","3b64a53e":"df = replace_numerical(df)\ndf = replace_object(df)","1ae20bb5":"# Check again if any null values are present\n\ndf.isnull().sum()","42c38019":"# PLot Correlation Matrix\n\ncorr = df.corr()\ncorr.style.background_gradient(cmap='PuBu').set_precision(2)","62e38f08":"plt.style.use('seaborn')\n\n# Distribution of location\n\nplt.figure(figsize=(15, 5))\nsns.countplot(df['Location'])\nplt.xticks(rotation=90)","c02d51a0":"# Distribution of MinTemp and MaxTemp\n\nfig, ax = plt.subplots(1, 2, figsize=(15,5))\n\n# MinTemp\nsns.distplot(df['MinTemp'], ax=ax[0])\nax[0].set_title(\"Minimum Temperature\")\n\n# MaxTemp\nsns.distplot(df['MaxTemp'], ax=ax[1])\nax[1].set_title(\"Maximum Temperature\")","7845ad87":"# MinTemp and MaxTemp of each location\n\na = df.groupby('Location').agg({'MinTemp':'mean'})\nc = df.groupby('Location').agg({'MaxTemp':'mean'})\nplt.rcParams[\"figure.figsize\"] = (20,10)\n\nn = df['Location'].nunique()\nx = np.arange(n)\n\nloc = df['Location'].unique()\n\nfig = plt.figure()\nax = fig.add_axes([0, 0, 1, 1])\n\nw = 0.3\n\nax.bar(x-w\/2, a[:]['MinTemp'], label='Average MinTemp by Location', color='maroon', width=w)\nax.bar(x+w\/2, c[:]['MaxTemp'], label='Average MaxTemp by Location', color='salmon', width=w)\n\nax.set_xticks(x)\nax.set_xticklabels(loc, rotation=90)\n\nplt.xlabel('Locations', fontsize=20)\nplt.ylabel('Average values', fontsize=20)\nplt.title('Average MinTemp and MaxTemp based on Location', fontsize=25)\nplt.legend(fontsize=15)","a2f64b17":"# Rainfall distribution in each month\n\n# Create a new dataframe rain_df\nrainfall =[df['Date'].dt.year, df['Date'].dt.month, df['Rainfall']]\nheaders = ['Year', 'Month', 'Rainfall']\nrain_df = pd.concat(rainfall, axis=1, keys=headers)\n\nplt.figure(figsize=(8,4))\na = rain_df.groupby('Month').agg({'Rainfall':'sum'})\na.plot(kind='bar', color='pink')\nplt.title('Rainfall distribution in each month', fontsize=25)\nplt.xlabel('Month', fontsize=20)\nplt.ylabel('Rainfall (in mm)', fontsize=20)\nplt.xticks(rotation=0)","8842aa74":"# Rainfall distribution in each year\n\nplt.figure(figsize=(8,4))\na = rain_df.groupby('Year').agg({'Rainfall':'sum'})\na.plot(kind='bar', color='purple')\nplt.title('Rainfall distribution in each year', fontsize=25)\nplt.xlabel('Year', fontsize=20)\nplt.ylabel('Rainfall (in mm)', fontsize=20)\nplt.xticks(rotation=0)","97bf2e5c":"# Distribution of WindGustDir, WindDir9am and WindDir3pm\n\nfig, ax = plt.subplots(3, 1, figsize=(15,25))\n\n# WindGustDir\nsns.countplot(df['WindGustDir'], palette='ocean', ax=ax[0])\nax[0].set_title(\"Wind Gust Direction\", fontsize=20)\n\n# WindGustDir\nsns.countplot(df['WindDir9am'], palette='magma_r', ax=ax[1])\nax[1].set_title(\"Wind Direction at 9AM\", fontsize=20)\n\n# WindGustDir\nsns.countplot(df['WindDir3pm'], palette='BuGn_r', ax=ax[2])\nax[2].set_title(\"Wind Direction at 3PM\", fontsize=20)","390fa63e":"# Distribution of WindGustSpeed\n\nplt.figure(figsize=(8,5))\nsns.distplot(df['WindGustSpeed'], hist=True, color='yellow')","4e36381a":"# Distribution of WindSpeed9am, WindSpeed3pm, Humidity9am, Humidity3pm, Pressure9am, Pressure3pm, Temp9am, Temp3pm\n\nfig, ax = plt.subplots(4, 2, figsize=(15,25))\n\n# WindSpeed9am\nsns.distplot(df['WindSpeed9am'], ax=ax[0,0], color='green')\nax[0,0].set_title(\"Wind Speed at 9AM\", fontsize=15)\n\n# WindSpeed3pm\nsns.distplot(df['WindSpeed3pm'], ax=ax[0,1], color='green')\nax[0,1].set_title(\"Wind Speed at 3PM\", fontsize=15)\n\n# Humidity9am\nsns.distplot(df['Humidity9am'], ax=ax[1,0], color='orange')\nax[1,0].set_title(\"Humidity at 9AM\", fontsize=15)\n\n# Humidity3pm\nsns.distplot(df['Humidity3pm'], ax=ax[1,1], color='orange')\nax[1,1].set_title(\"Humidity at 3PM\", fontsize=15)\n\n# Pressure9am\nsns.distplot(df['Pressure9am'], ax=ax[2,0], color='red')\nax[2,0].set_title(\"Pressure at 9AM\", fontsize=15)\n\n# Pressure3pm\nsns.distplot(df['Pressure3pm'], ax=ax[2,1], color='red')\nax[2,1].set_title(\"Pressure at 3PM\", fontsize=15)\n\n# Temp9am\nsns.distplot(df['Temp9am'], ax=ax[3,0], color='brown')\nax[3,0].set_title(\"Temperature at 9AM\", fontsize=15)\n\n# Temp3pm\nsns.distplot(df['Temp3pm'], ax=ax[3,1], color='brown')\nax[3,1].set_title(\"Temperature at 3PM\", fontsize=15)","020505d9":"# Analyzing RainToday and RainTomorrow\n\ntype_plt = pd.crosstab(df['RainToday'], df['RainTomorrow'])\n\nplt.rcParams[\"figure.figsize\"] = (8,5)\n\ntype_plt.plot(kind='bar',stacked=False)\n\nplt.xlabel('Rain Today', fontsize=15)\nplt.ylabel('Count', fontsize=15)\nplt.title('Rain Today - Rain Tomorrow', fontsize=20)\nplt.xticks(rotation=0, fontsize=12)\nplt.yticks(fontsize=12)","7eefb016":"df.head(2)","1aaa39eb":"# Encoding categorical variables\n\ndef label_encoder(x):\n    le = LabelEncoder()\n    df[x] = le.fit_transform(df[x])\n\nlabels = ['Location', 'WindGustDir', 'WindDir9am', 'WindDir3pm', 'RainToday', 'RainTomorrow']\nfor i in labels:\n    label_encoder(i)","abd18005":"# convert datatype of Date in DataFrame\ndf['Date'] = pd.to_datetime(df['Date'],infer_datetime_format=True)\ndf['Date'] = df['Date'].apply(lambda x: x.toordinal())\n\nX = df.iloc[:, :-1]\ny = df.iloc[:, -1]","85312b4d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\nprint(\"X_train:\", X_train.shape)\nprint(\"X_test:\", X_test.shape)\nprint(\"y_train:\", y_train.shape)\nprint(\"y_test:\", y_test.shape)","cddd19bb":"dt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)","374a6579":"print(\"Score of train data:\", dt.score(X_train, y_train))\nprint(\"Score of test data:\", dt.score(X_test, y_test))","096775d1":"y_pred = dt.predict(X_test)\ny_pred","d952b4a4":"# F1 score\n\ndt_f1_score = f1_score(y_test, y_pred, average='weighted')\ndt_f1_score","d964e9dc":"print(classification_report(y_test, y_pred))","14f64ef8":"cm = confusion_matrix(y_test, y_pred)\ncm","2b1907f2":"# Visualising the graph without the use of graphviz\n\n# plt.figure(figsize = (20,10))\n# dec_tree = plot_tree(decision_tree=dt, feature_names=df.columns, filled=True , precision=4, rounded=True)","9514095d":"# BaggingClassifier with decision tree\n\nbag_clf = BaggingClassifier(DecisionTreeClassifier(), n_estimators=500, max_samples=100, bootstrap=True, n_jobs=-1, oob_score=True)\nbag_clf.fit(X_train, y_train)","26ae3f64":"y_pred_bag = bag_clf.predict(X_test)\ny_pred_bag","062b90c6":"# F1 score and accuracy\n\nbag_f1_score = f1_score(y_test, y_pred_bag, average='weighted')\nbag_accuracy = accuracy_score(y_test, y_pred_bag)\n\nprint(\"oob score:\", bag_clf.oob_score_)\nprint(\"F1 Score:\", bag_f1_score)\nprint(\"Accuracy Score:\", bag_accuracy)","2b59ec77":"print(classification_report(y_test, y_pred_bag))","481ed113":"cm = confusion_matrix(y_test, y_pred_bag)\n\nplt.figure(figsize=(5,5))\n\nsns.heatmap(data=cm,linewidths=.5, annot=True,square = True,  cmap = 'Blues')\n\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\n\nall_sample_title = 'Accuracy Score: {0}'.format(bag_clf.score(X_test, y_test))\nplt.title(all_sample_title, size = 15)","fca0b1f9":"log = LogisticRegression()\nrf = RandomForestClassifier()\nsvm = SVC()\n\nvoting_clf = VotingClassifier(estimators=[('lr', log), ('rf', rf), ('svc', svm)], voting='hard')\nvoting_clf.fit(X_train, y_train)","0d635c46":"# Each classifiers accuracy on test set\n\nfor clf in (log, rf, svm, voting_clf):\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    print(clf.__class__.__name__, accuracy_score(y_test, y_pred))","8c64fc64":"y_pred_voting = voting_clf.predict(X_test)\ny_pred_voting","61eecd36":"# F1 score and accuracy\n\nvoting_f1_score = f1_score(y_test, y_pred_voting, average='weighted')\nvoting_accuracy = accuracy_score(y_test, y_pred_voting)\n\nprint(\"F1 Score:\", voting_f1_score)\nprint(\"Accuracy Score:\", voting_accuracy)","f8aef461":"print(classification_report(y_test, y_pred_voting))","e29f0d67":"cm = confusion_matrix(y_test, y_pred_voting)\n\ngroup_names = ['True Neg', 'False Pos', 'False Neg', 'True Pos']\ngroup_counts = [\"{0:0.0f}\".format(value) for value in\n                cm.flatten()]\ngroup_percentages = [\"{0:.2%}\".format(value) for value in\n                     cm.flatten()\/np.sum(cm)]\nlabels = [f\"{v1}\\n{v2}\\n{v3}\" for v1, v2, v3 in\n          zip(group_names,group_counts,group_percentages)]\nlabels = np.asarray(labels).reshape(2,2)\nsns.heatmap(cm, annot=labels, fmt='', cmap='Blues')","d1608e1a":"<b>Observation:-<\/b>\n\n<ul>\n    <li>The average maximum temperature is above 20 degree Celcius for most locations.<\/li>\n    <li>The average minimum temperature is between 5 and 15 degree Celcius for most locations.<\/li>\n<\/ul>","08a51bcd":"<b>Observation:-<\/b>\n\n<ul>\n    <li>Most occured location is Canberra followed by Sydney.<\/li>\n    <li>Most of the locations have a frequency near 3000.<\/li>\n    <li>Nhil, Katherine and Uluru have occured the least.<\/li>\n<\/ul>","40303b3c":"<b> Simple statistics like count, mean, min, max, etc is calculated for attributes having numeric datatype.<br>\nSome of the conclusions drawn from the above table are:<br> <\/b>\n<ol>\n    <li>The average minimum temperature is 12.194 and average maximum temperature is 23.221 degree Celcius.<\/li>\n    <li>The mean rainfall is 2.36 mm.<\/li>\n    <li>The average sunshine recieved is 7.61 hour.<\/li>\n    <li>The average wind gust speed is 40.035 km\/hr.<\/li>\n    <li>The minimum temperature recorded is -8.5 degree Celcius and the maximum recorded temperature is 48.1 degree Celcius.<\/li>\n    <li>The minimum rainfall recorded for a particular day is 0 mm and maximum is 371 mm.<\/li>\n    <li>The median evaporation is 4.8 mm.<\/li>\n<\/ol>","7325ce72":"### Ensemble Learning","f49bad1c":"## Exploratory Data Analysis","0bd0cd26":"<b> The dataset has 16 float and 7 object columns. <\/b>","3aa7596b":"<b>Observation:-<\/b>\n\n<ul>\n    <li>Maximum wind speed at 9AM ranges from 10 to 20 km\/hr whereas at 3PM it ranges from 15 to 22 km\/hr.<\/li>\n    <li>Highest concentration of points for humidity at 9AM is between 60-80% whereas at 3PM it's 40-70%.<\/li>\n    <li>Highest concentration of points for pressure at 9AM is between 1015-1018 hpa and at 3PM it's between 1015-1017 hpa.<\/li>\n    <li>Maximum temperature at 9AM is between 16-18 degree Celcius and at 3PM it's between 21-23 degree Celcius.<\/li>\n<\/ul>","1e0a16ef":"<b>Observation:-<\/b>\n\n<ul>\n    <li>Highest concentration of points for minimum temperature is between 10 to 12 degree Celcius.<\/li>\n    <li>Highest concentration of points for maximum temperature is between 18 to 22 degree Celcius.<\/li>\n<\/ul>","10920ec0":"### Decision Tree Classifier","4ca72256":"<b>Observation:-<\/b>\n\n<ul>\n    <li>Maximum rainfall(greater than 40,000 mm) occured in 2010 followed by 2011 and 2016.<\/li>\n    <li>2009, 2012, 2013, 2014 and 2015 experienced rainfall between 30,000-40,000 mm.<\/li>\n    <li>Least rainfall(less than 200 mm) occured in 2007 followed by 2008 and 2017(greather than 20,000 mm).<\/li>\n<\/ul>","f030a99f":"<b>Observation:-<\/b>\n\n<ul>\n    <li>Maximum rainfall(greater than 35,000 mm) occurs in March.<\/li>\n    <li>January and June also experience high rainfall(nearly 35,000 mm) followed by February.<\/li>\n    <li>Minimum rainfall occurs in October followed by September.<\/li>\n<\/ul>","db1476ae":"### Attribute Description:-\n\n<ol>\n    <li>Date - The date of observation<\/li>\n    <li>Location - The common name of the location of the weather station<\/li>\n    <li>MinTemp - The minimum temperature in degrees celsius<\/li>\n    <li>MaxTemp - The maximum temperature in degrees celsius<\/li>\n    <li>Rainfall - The amount of rainfall recorded for the day in mm<\/li>\n    <li>Evaporation - The so-called Class A pan evaporation (mm) in the 24 hours to 9am<\/li>\n    <li>Sunshine - The number of hours of bright sunshine in the day.<\/li>\n    <li>WindGustDir - The direction of the strongest wind gust in the 24 hours to midnight<\/li>\n    <li>WindGustSpeed - The speed (km\/h) of the strongest wind gust in the 24 hours to midnight<\/li>\n    <li>WindDir9am - Direction of the wind at 9am<\/li>\n    <li>WindDir3pm - Direction of the wind at 3pm<\/li>\n    <li>WindSpeed9am - Wind speed (km\/hr) averaged over 10 minutes prior to 9am<\/li>\n    <li>WindSpeed3pm - Wind speed (km\/hr) averaged over 10 minutes prior to 3pm<\/li>\n    <li>Humidity9am - Humidity (percent) at 9am<\/li>\n    <li>Humidity3pm - Humidity (percent) at 3pm<\/li>\n    <li>Pressure9am - Atmospheric pressure (hpa) reduced to mean sea level at 9am<\/li>\n    <li>Pressure3pm - Atmospheric pressure (hpa) reduced to mean sea level at 3pm<\/li>\n    <li>Cloud9am - Fraction of sky obscured by cloud at 9am. This is measured in \"oktas\", which are a unit of eigths. It records how many eigths of the sky are obscured by cloud. A 0 measure indicates completely clear sky whilst an 8 indicates that it is completely overcast.<\/li>\n    <li>Cloud3pm - Fraction of sky obscured by cloud (in \"oktas\": eighths) at 3pm. See Cload9am for a description of the values<\/li>\n    <li>Temp9am - Temperature (degrees C) at 9am<\/li>\n    <li>Temp3pm - Temperature (degrees C) at 3pm<\/li>\n    <li>RainToday - Boolean: 1 if precipitation (mm) in the 24 hours to 9am exceeds 1mm, otherwise 0<\/li>\n    <li>RainTomorrow - The amount of next day rain in mm. Used to create response variable RainTomorrow. A kind of measure of the \"risk\".<\/li>\n<\/ol>","41b6c9b6":"<b> VotingClassifier gives an accuracy of 77.53%.<\/b>","39c46eae":"<b>Observations:-<\/b>\n<ol>\n    <li>Maximum null values are present in Sunshine column followed by Evaporation.<\/li>\n    <li>More than 55,000 null values are present in Cloud9am and Cloud3pm columns.<\/li>\n    <li>Around 15,000 null values are present in Pressure9am and Pressure3pm columns.<\/li>\n    <li>More than 10,000 null values are present in WindGustDir, WindGustSpeed  and WindDir9am columns<\/li>\n    <li>There are many columns having more than 1000 null records.<\/li>\n<\/ol>","ef13adbe":"<b>Observation:-<\/b>\n\n<ul>\n    <li>MaxTemp and Temp3pm have a strong positive correlation of 0.97.<\/li>\n    <li>Pressure9am and Pressure3pm have a strong positive correlation of 0.96.<\/li>\n    <li>MinTemp and Temp9am have a strong positive correlation of 0.90.<\/li>\n    <li>MaxTemp and Temp9am have a strong positive correlation of 0.88.<\/li>\n    <li>Temp9am and Temp3pm have a strong positive correlation of 0.85.<\/li>\n    <li>Humidity and Temperature attributes have a negative correlation of 0.50.<\/li>\n<\/ul>","2ef4026a":"<b>Observation:-<\/b>\n\n<ul>\n    <li>For maximum records it didn't rain for both days.<\/li>\n    <li>For nearly 20,000 records it didn't rain today but rained tomorrow and rained for both days.<\/li>\n    <li>For nearly 20,000 records it rained today but didn't rain tomorrow.<\/li>\n<\/ul>","a4b2172b":"<b> The statistics displayed for the attributes of 'object' datatype is different from the one displayed for numeric datatypes.<br>\nSome of the conclusions drawn from the above table are:<br> <\/b>\n<ol>\n    <li>There are total 49 unique locations and 16 unique wind directions.<\/li>\n    <li>RainToday and RainTomorrow attribute has 2 unique values.<\/li>\n    <li>The top location is Canberra occuring 3436 times.<\/li>\n<\/ol>","09ab6686":"<b>Bagging increased the accuracy of Decision Tree Classifier.<\/b>","09446511":"<b>Observation:-<\/b>\n\n<ul>\n    <li>Wind Gust Direction for maximum records(nearly 17,500) is West.<\/li>\n    <li>Wind Direction at 9AM for maximum records is North followed by North-West and East.<\/li>\n    <li>Wind Direction at 3PM for maximum records is South East.<\/li>\n<\/ul>","9dadff00":"<b>Hence, all null records are removed from the dataset.<\/b>","ae5f7112":"## Importing libraries","a15bdecd":"<b> The dataset has 1,45,460 records and 23 attributes. <\/b>","4742b430":"<b>Observation:-<\/b>\n\n<ul>\n    <li>Wind Gust Speed ranges from 0 to nearly 140 km\/hr.<\/li>\n    <li>Highest concentration of points for Wind Gust Speed is between 38-40 km\/hr.<\/li>\n<\/ul>","8daf6056":"## Model","645e18bf":"## Loading dataset","42c313d0":"### Split the dataset into training and testing set","7fafe941":"<b> According to this oob evaluation, this BaggingClassifier is likely to achieve about 83.61% accuracy on the test set. The accuracy of the test set is 83.69%, which is close enough. <\/b>","2861a3d7":"<b> No duplicate records are present. <\/b>"}}