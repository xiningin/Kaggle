{"cell_type":{"8a5b3d6e":"code","6651538d":"code","fd6e2f6b":"code","ea9a1000":"code","f68d7bee":"code","8c331722":"code","6a680a0b":"code","ecd02105":"code","8b0f24e0":"code","d5619576":"code","f92d2b0a":"code","01b81659":"code","1b362be3":"code","c1bfc294":"code","6f3c445a":"code","f4d21dd3":"code","09bed441":"markdown","198e0fef":"markdown","f28e0123":"markdown"},"source":{"8a5b3d6e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom tqdm import tqdm_notebook as tqdm\nimport category_encoders as ce\n\nfrom sklearn.preprocessing import StandardScaler\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6651538d":"df_train = pd.read_csv('\/kaggle\/input\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/test.csv')\ndf_country = pd.read_csv('\/kaggle\/input\/country_info.csv')\n\n#submit\u7528\u30c7\u30fc\u30bf\ndf_survey = pd.read_csv('\/kaggle\/input\/survey_dictionary.csv', index_col=0)","fd6e2f6b":"X_train = df_train.loc[:,['Employment','AssessJob1','Age']]\ny_train = df_train['ConvertedSalary']\n\nX_test = df_test.loc[:,['Employment','AssessJob1','Age']]","ea9a1000":"print(df_train['Gender'].value_counts(dropna=False))","f68d7bee":"print(df_train['Country'].value_counts(dropna=False)),print(df_test['Country'].value_counts(dropna=False))","8c331722":"print(df_train['CompanySize'].value_counts(dropna=False)),print(df_test['CompanySize'].value_counts(dropna=False))","6a680a0b":"nu_col = df_train.nunique()\nprint(nu_col)\nprint(type(nu_col))","ecd02105":"nu_col = df_test.nunique()\nprint(nu_col)\nprint(type(nu_col))","8b0f24e0":"X_train.AssessJob1.fillna(-99,inplace=True)\n\n# test data\nX_test.AssessJob1.fillna(-99,inplace=True)\n","d5619576":"# \u6587\u5b57\u5217\u62bd\u51fa\ncats = []\nfor col in X_train.columns:\n        if X_train[col].dtype == 'object':\n            cats.append(col)\n            \n            print(col, X_train[col].nunique())","f92d2b0a":"Employment_map = {'Employed full-time':5,\n                  'Employed part-time':4,\n                  'Independent contractor, freelancer, or self-employed':6,\n                  'Not employed, but looking for work':3,\n                  'Not employed, and not looking for work':2,\n                  'Retired':1\n                  }\n\nX_train['Employment'] = X_train['Employment'].map(Employment_map)\nX_test['Employment'] = X_train['Employment'].map(Employment_map)\n\nAge_map = {'Under 18 years old':1, '18 - 24 years old':2,\n           '25 - 34 years old':3, '35 - 44 years old':4,\n           '45 - 54 years old':5, '55 - 64 years old':6, '65 years or older':7\n           }\n\nX_train['Age'] = X_train['Age'].map(Age_map)\nX_test['Age'] = X_train['Age'].map(Age_map)\n","01b81659":"X_train['train']=1\nX_test['train']=0","1b362be3":"# \u6587\u5b57\u5217\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\nX_all = pd.concat([X_train, X_test])\noe = ce.OrdinalEncoder(cols=cats,handle_unknown='impute',return_df=False)\n\nX_all[cats] = oe.fit_transform(X_all[cats])\n\nX_train = X_all[X_all['train']==1]\nX_test = X_all[X_all['train']==0]","c1bfc294":"X_train = X_train.drop(['train'], axis=1) \nX_test = X_test.drop(['train'], axis=1) ","6f3c445a":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = pd.DataFrame(scaler.transform(X_train), columns=X_train.columns)\nX_test = pd.DataFrame(scaler.transform(X_test), columns=X_test.columns)","f4d21dd3":"import lightgbm as lgb\nfrom lightgbm import LGBMClassifier\nimport matplotlib.pyplot as plt\n\nplt.style.use('ggplot')\n%matplotlib inline\n\nscores = []\n\nskf = StratifiedKFold(n_splits=2, random_state=71, shuffle=True)\n\nfor i, (train_ix, test_ix) in enumerate(tqdm(skf.split(X_train, y_train))):\n    X_train_, y_train_ = X_train.values[train_ix], y_train.values[train_ix]\n    X_val, y_val = X_train.values[test_ix], y_train.values[test_ix]\n    \n    #scikitlearn\u306eLightGBM\n    clf = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.8, #colsample_bytree\uff1a1\u6728\u3042\u305f\u308a\u3067\u4f7f\u3046\u9805\u76ee\u6570\uff08\u5272\u5408\uff09\n                         importance_type='split', learning_rate=0.05, max_depth=-1,\n                         min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                         n_estimators=9999, n_jobs=-1, num_leaves=31, objective=None, #n_estimators\uff08\u6728\u306e\u6570\uff09\u306f\u6700\u5927\u306b\u3057\u3066\u304a\u3044\u3066earlyStopping\u306b\u4efb\u305b\u308b\n                         random_state=71, reg_alpha=1.0, reg_lambda=1.0, silent=True,\n                         subsample=0.9, subsample_for_bin=200000, subsample_freq=0) #lightGBM\u306f\u9023\u7d9a\u5024\u3082binning\u3059\u308b\u3002\n\n    clf.fit(X_train_, y_train_, early_stopping_rounds=100, eval_metric='auc', eval_set=[(X_val, y_val)])\n    y_pred = clf.predict_proba(X_val)[:,1]\n   \n    y_pred_2 = clf.predict_proba(X_test)[:,1]\n    submit['ConvertedSalary'] = y_pred_2\n    submit_lgb =  pd.merge(submit_lgb, submit, left_on=['Respondent'], right_on=['Respondent'], how='left')\n\n    score = roc_auc_score(y_val, y_pred)\n    print(score)\n\n    fig, ax = plt.subplots(figsize=(10, 15))\n    lgb.plot_importance(clf, max_num_features=50, ax=ax, importance_type='gain')","09bed441":"# \u8aac\u660e\u5909\u6570\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u5206\u3051\u308b\nX_train = df_train.drop(['ConvertedSalary','Respondent','Country','MilitaryUS'], axis=1)\ny_train = df_train['ConvertedSalary'] #\u30bf\u30fc\u30b2\u30c3\u30c8\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\nX_test = df_test.drop(['Country','Respondent','MilitaryUS'], axis=1) # x_train\u3068\u540c\u3058\u9805\u76ee\uff08loan_condition\u4ee5\u5916\uff09\u3092\u524a\u9664","198e0fef":"# GradientBoostingClassifier\u3067\u5168\u30c7\u30fc\u30bf\u3067\u518d\u5b66\u7fd2\nclf = GradientBoostingClassifier()\nclf.fit(X_train, y_train)\n\ny_pred = clf.predict_proba(X_test)[:,1] # predict_proba\u3067\u78ba\u7387\u3092\u51fa\u529b\u3059\u308b\nsubmit_gb['ConvertedSalary'] = y_pred # \u4e88\u6e2c\u5024\u3067\u4e0a\u66f8\u304d","f28e0123":"# \u6b20\u640d\u306e\u88dc\u5b8c\n# train data\nX_train.AssessJob1.fillna(-99,inplace=True)\nX_train.AssessJob2.fillna(-99,inplace=True)\nX_train.AssessJob3.fillna(-99,inplace=True)\nX_train.AssessJob4.fillna(-99,inplace=True)\nX_train.AssessJob5.fillna(-99,inplace=True)\nX_train.AssessJob6.fillna(-99,inplace=True)\nX_train.AssessJob7.fillna(-99,inplace=True)\nX_train.AssessJob8.fillna(-99,inplace=True)\nX_train.AssessJob9.fillna(-99,inplace=True)\nX_train.AssessJob10.fillna(-99,inplace=True)\nX_train.AssessBenefits1.fillna(-99,inplace=True)\nX_train.AssessBenefits2.fillna(-99,inplace=True)\nX_train.AssessBenefits3.fillna(-99,inplace=True)\nX_train.AssessBenefits4.fillna(-99,inplace=True)\nX_train.AssessBenefits5.fillna(-99,inplace=True)\nX_train.AssessBenefits6.fillna(-99,inplace=True)\nX_train.AssessBenefits7.fillna(-99,inplace=True)\nX_train.AssessBenefits8.fillna(-99,inplace=True)\nX_train.AssessBenefits9.fillna(-99,inplace=True)\nX_train.AssessBenefits10.fillna(-99,inplace=True)\nX_train.AssessBenefits11.fillna(-99,inplace=True)\nX_train.JobContactPriorities1.fillna(-99,inplace=True)\nX_train.JobContactPriorities2.fillna(-99,inplace=True)\nX_train.JobContactPriorities3.fillna(-99,inplace=True)\nX_train.JobContactPriorities4.fillna(-99,inplace=True)\nX_train.JobContactPriorities5.fillna(-99,inplace=True)\nX_train.JobEmailPriorities1.fillna(-99,inplace=True)\nX_train.JobEmailPriorities2.fillna(-99,inplace=True)\nX_train.JobEmailPriorities3.fillna(-99,inplace=True)\nX_train.JobEmailPriorities4.fillna(-99,inplace=True)\nX_train.JobEmailPriorities5.fillna(-99,inplace=True)\nX_train.JobEmailPriorities6.fillna(-99,inplace=True)\nX_train.JobEmailPriorities7.fillna(-99,inplace=True)\nX_train.AdsPriorities1.fillna(-99,inplace=True)\nX_train.AdsPriorities2.fillna(-99,inplace=True)\nX_train.AdsPriorities3.fillna(-99,inplace=True)\nX_train.AdsPriorities4.fillna(-99,inplace=True)\nX_train.AdsPriorities5.fillna(-99,inplace=True)\nX_train.AdsPriorities6.fillna(-99,inplace=True)\nX_train.AdsPriorities7.fillna(-99,inplace=True)\n\n# test data\nX_test.AssessJob1.fillna(-99,inplace=True)\nX_test.AssessJob2.fillna(-99,inplace=True)\nX_test.AssessJob3.fillna(-99,inplace=True)\nX_test.AssessJob4.fillna(-99,inplace=True)\nX_test.AssessJob5.fillna(-99,inplace=True)\nX_test.AssessJob6.fillna(-99,inplace=True)\nX_test.AssessJob7.fillna(-99,inplace=True)\nX_test.AssessJob8.fillna(-99,inplace=True)\nX_test.AssessJob9.fillna(-99,inplace=True)\nX_test.AssessJob10.fillna(-99,inplace=True)\nX_test.AssessBenefits1.fillna(-99,inplace=True)\nX_test.AssessBenefits2.fillna(-99,inplace=True)\nX_test.AssessBenefits3.fillna(-99,inplace=True)\nX_test.AssessBenefits4.fillna(-99,inplace=True)\nX_test.AssessBenefits5.fillna(-99,inplace=True)\nX_test.AssessBenefits6.fillna(-99,inplace=True)\nX_test.AssessBenefits7.fillna(-99,inplace=True)\nX_test.AssessBenefits8.fillna(-99,inplace=True)\nX_test.AssessBenefits9.fillna(-99,inplace=True)\nX_test.AssessBenefits10.fillna(-99,inplace=True)\nX_test.AssessBenefits11.fillna(-99,inplace=True)\nX_test.JobContactPriorities1.fillna(-99,inplace=True)\nX_test.JobContactPriorities2.fillna(-99,inplace=True)\nX_test.JobContactPriorities3.fillna(-99,inplace=True)\nX_test.JobContactPriorities4.fillna(-99,inplace=True)\nX_test.JobContactPriorities5.fillna(-99,inplace=True)\nX_test.JobEmailPriorities1.fillna(-99,inplace=True)\nX_test.JobEmailPriorities2.fillna(-99,inplace=True)\nX_test.JobEmailPriorities3.fillna(-99,inplace=True)\nX_test.JobEmailPriorities4.fillna(-99,inplace=True)\nX_test.JobEmailPriorities5.fillna(-99,inplace=True)\nX_test.JobEmailPriorities6.fillna(-99,inplace=True)\nX_test.JobEmailPriorities7.fillna(-99,inplace=True)\nX_test.AdsPriorities1.fillna(-99,inplace=True)\nX_test.AdsPriorities2.fillna(-99,inplace=True)\nX_test.AdsPriorities3.fillna(-99,inplace=True)\nX_test.AdsPriorities4.fillna(-99,inplace=True)\nX_test.AdsPriorities5.fillna(-99,inplace=True)\nX_test.AdsPriorities6.fillna(-99,inplace=True)\nX_test.AdsPriorities7.fillna(-99,inplace=True)\n"}}