{"cell_type":{"59b5f996":"code","39bff8eb":"code","5413e019":"code","81f28042":"code","a464c0bf":"code","3c0b7512":"code","637e5370":"code","150c7ca9":"code","04d53c68":"code","769c3e0c":"code","a27f8487":"code","c2132b32":"markdown","d1adc95d":"markdown","5cd30934":"markdown","06149d96":"markdown","2e1e9db6":"markdown","2003510e":"markdown"},"source":{"59b5f996":"import numpy as np \nimport pandas as pd \nimport cv2\nfrom matplotlib import pyplot as plt\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\ndef showImage(img):\n    plt.figure(figsize=(15,15))\n    plt.imshow(img,cmap='gray')\n    plt.xticks([]),plt.yticks([])\n    plt.show()\n","39bff8eb":"#Quantization Arrays\n\ndef selectQMatrix(qName):\n    Q10 = np.array([[80,60,50,80,120,200,255,255],\n                [55,60,70,95,130,255,255,255],\n                [70,65,80,120,200,255,255,255],\n                [70,85,110,145,255,255,255,255],\n                [90,110,185,255,255,255,255,255],\n                [120,175,255,255,255,255,255,255],\n                [245,255,255,255,255,255,255,255],\n                [255,255,255,255,255,255,255,255]])\n\n    Q50 = np.array([[16,11,10,16,24,40,51,61],\n                [12,12,14,19,26,58,60,55],\n                [14,13,16,24,40,57,69,56],\n                [14,17,22,29,51,87,80,62],\n                [18,22,37,56,68,109,103,77],\n                [24,35,55,64,81,104,113,92],\n                [49,64,78,87,103,121,120,101],\n                [72,92,95,98,112,100,130,99]])\n\n    Q90 = np.array([[3,2,2,3,5,8,10,12],\n                    [2,2,3,4,5,12,12,11],\n                    [3,3,3,5,8,11,14,11],\n                    [3,3,4,6,10,17,16,12],\n                    [4,4,7,11,14,22,21,15],\n                    [5,7,11,13,16,12,23,18],\n                    [10,13,16,17,21,24,24,21],\n                    [14,18,19,20,22,20,20,20]])\n    if qName == \"Q10\":\n        return Q10\n    elif qName == \"Q50\":\n        return Q50\n    elif qName == \"Q90\":\n        return Q90\n    else:\n        return np.ones((8,8)) #it suppose to return original image back\n","5413e019":"directory = 'naturepng.png'\nimg = cv2.imread('..\/input\/'+directory,0)\nshowImage(img)","81f28042":"height  = len(img) #one column of image\nwidth = len(img[0]) # one row of image\nsliced = [] # new list for 8x8 sliced image \nblock = 8\nprint(\"The image heigh is \" +str(height)+\", and image width is \"+str(width)+\" pixels\")","a464c0bf":"#dividing 8x8 parts\ncurrY = 0 #current Y index\nfor i in range(block,height+1,block):\n    currX = 0 #current X index\n    for j in range(block,width+1,block):\n        sliced.append(img[currY:i,currX:j]-np.ones((8,8))*128) #Extracting 128 from all pixels\n        currX = j\n    currY = i\n    \nprint(\"Size of the sliced image: \"+str(len(sliced)))\nprint(\"Each elemend of sliced list contains a \"+ str(sliced[0].shape)+ \" element.\")\n","3c0b7512":"imf = [np.float32(img) for img in sliced]","637e5370":"DCToutput = []\nfor part in imf:\n    currDCT = cv2.dct(part)\n    DCToutput.append(currDCT)\nDCToutput[0][0]","150c7ca9":"selectedQMatrix = selectQMatrix(\"Q10\")\nfor ndct in DCToutput:\n    for i in range(block):\n        for j in range(block):\n            ndct[i,j] = np.around(ndct[i,j]\/selectedQMatrix[i,j])\nDCToutput[0][0]","04d53c68":"invList = []\nfor ipart in DCToutput:\n    ipart\n    curriDCT = cv2.idct(ipart)\n    invList.append(curriDCT)\ninvList[0][0]","769c3e0c":"row = 0\nrowNcol = []\nfor j in range(int(width\/block),len(invList)+1,int(width\/block)):\n    rowNcol.append(np.hstack((invList[row:j])))\n    row = j\nres = np.vstack((rowNcol))","a27f8487":"showImage(res)","c2132b32":"**Inverse Discrete Cosine Transform**\n> *cv2.idct()* calculates inverse Discrete Cosine Transform of 1D or 2D array.\n> Parameters of  cv2.idct are same with cv2.dct.","d1adc95d":"# Image Compression using DCT\n# Siddhesh Mukesh Mahajan\n# 2017BEC047","5cd30934":"**Dividing into parts**","06149d96":"As we can see quantization is completed. The size has been recuded. Now reconstruct the image back.","2e1e9db6":"**Discrete Cosine Transform**","2003510e":"**The Original Image**"}}