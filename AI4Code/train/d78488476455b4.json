{"cell_type":{"259fe97d":"code","e8cf4137":"code","8cee28d9":"code","ebac656a":"code","07f0a65b":"code","ed5db2fb":"code","fdc1b794":"code","c538fd11":"code","d76b9b82":"code","d1a3a743":"code","e8484b5c":"code","7ec8b875":"code","2889f220":"code","85edf08c":"code","bd5864c2":"code","74085736":"code","e12c7984":"code","a8485b47":"code","8f35baea":"code","6b9fee8b":"code","62d8fb81":"code","02b1c64e":"code","45451076":"code","950b3b79":"code","164954ad":"code","875531ce":"code","06354fca":"markdown","8a7d702b":"markdown","c9a8bca5":"markdown","f6f2a3e7":"markdown","dc40ccdc":"markdown"},"source":{"259fe97d":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nfrom sklearn import preprocessing","e8cf4137":"train_data=pd.read_csv('..\/input\/titanic\/train.csv')\ntrain_data.set_index('PassengerId',inplace=True)\ntrain_data","8cee28d9":"train_data.info()","ebac656a":"from sklearn.preprocessing import OneHotEncoder, OrdinalEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline","07f0a65b":"ignore=['Name','Survived']","ed5db2fb":"cat_no=['Sex','Ticket','Embarked']\ncatNo_pipe=Pipeline(steps=[\n    ('onehot', OneHotEncoder(handle_unknown=\"ignore\", sparse=False))\n])","fdc1b794":"cat_or=['Pclass']\ncatOr_pipe=Pipeline(steps=[\n    (\"pclass_enc\", OrdinalEncoder(categories=[[1,2,3]]))\n])","c538fd11":"numerical=['Age','SibSp','Parch','Fare']\nnum_pipe=Pipeline(steps=[\n    ('fillna', SimpleImputer(missing_values=np.nan, strategy='mean'))\n])","d76b9b82":"from sklearn.compose import ColumnTransformer","d1a3a743":"preprocess=ColumnTransformer([\n    ('catNo',catNo_pipe,cat_no),\n    ('catOr',catOr_pipe,cat_or),\n    ('num',num_pipe,numerical)\n])","e8484b5c":"from sklearn.base import BaseEstimator, TransformerMixin","7ec8b875":"def WoChil(R):\n    condition=[(R['Age']<=12)|(R['Sex']=='female'),(R['Age']>12)&(R['Sex']=='male')]\n    value=[1,0]\n    return np.select(condition,value)\ndef nanCabin(R):\n    condition=[R['Cabin'].isna(),R['Cabin'].notna()]\n    value=[1,0]\n    return np.select(condition,value)\ndef famMember(R):\n    return R['SibSp']+R['Parch']\nclass feature_engineering(BaseEstimator, TransformerMixin):\n    def __init__(self,columns=None):\n        self.columns=columns\n    def fit(self, X, y=None):\n        return self\n    def transform(self,X):\n        X_copy=X[self.columns]\n        X_copy['nanCabin']=nanCabin(X_copy)\n        #X_copy['family_member']=famMember(X_copy)\n        X_copy['WoChil']=WoChil(X_copy)\n        X_copy.drop(self.columns,axis=True,inplace=True)\n        return X_copy","2889f220":"from sklearn.pipeline import FeatureUnion","85edf08c":"feature_engineer=['Age','Sex','Cabin','SibSp','Parch']\nfeatures=FeatureUnion([\n    ('preprocess',preprocess),\n    ('feature_engineer',feature_engineering(feature_engineer))\n])","bd5864c2":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler","74085736":"pipe=Pipeline(steps=[\n    ('feature_engineer',features),\n    ('scaler', StandardScaler()),\n    ('model',LogisticRegression())\n])","e12c7984":"from sklearn.model_selection import train_test_split","a8485b47":"X_train, X_valid, y_train, y_valid = train_test_split(\n    train_data.drop(columns=[\"Survived\"]), train_data[\"Survived\"], \n    test_size=0.2,random_state=42\n)","8f35baea":"pipe.fit(X_train,y_train)","6b9fee8b":"pipe.score(X_train,y_train)","62d8fb81":"from sklearn.metrics import accuracy_score as accuracy_score","02b1c64e":"y_pred=pipe.predict(X_valid)\naccuracy_score(y_valid, y_pred)","45451076":"test_data=pd.read_csv('..\/input\/titanic\/test.csv')\ntest_data.set_index('PassengerId',inplace=True)\ntest_data","950b3b79":"predictions=pd.DataFrame({\n    'PassengerId': test_data.index,\n    'Survived':pipe.predict(test_data)\n})","164954ad":"predictions","875531ce":"predictions.to_csv('submission.csv',index=False)","06354fca":"# Clean data","8a7d702b":"# Model","c9a8bca5":"# Import libary","f6f2a3e7":"# Pipe line","dc40ccdc":"# Get data train\/test"}}