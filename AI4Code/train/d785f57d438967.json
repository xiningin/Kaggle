{"cell_type":{"ef725577":"code","a9ba997a":"code","c93ccbd2":"code","d152a63c":"code","51dee4b5":"code","1be56ada":"code","55b44c05":"code","06bc9d4f":"code","654a40d5":"code","7fab79ed":"code","e846e62a":"code","5167bd0f":"code","de3a1555":"code","aee0b512":"code","f9ab2862":"code","d4d92f7c":"code","eae97881":"code","1466d543":"code","71e43fd7":"code","aa20bb2f":"code","a6ef0bbd":"code","bfd7a98c":"code","7491136f":"code","41a33b52":"code","5bdecb0d":"code","99855b75":"markdown","bc371a73":"markdown","661c9543":"markdown","40ab142c":"markdown","bec8deb4":"markdown","f38f6a8e":"markdown","a2fa1f5d":"markdown","72410c23":"markdown","510cc12e":"markdown"},"source":{"ef725577":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a9ba997a":"import pandas as pd\nimport datetime as dt\nimport numpy as np\nimport matplotlib.pyplot as plt","c93ccbd2":"df = pd.read_csv('..\/input\/retailtransactiondata\/Retail_Data_Transactions.csv', parse_dates=['trans_date'])","d152a63c":"df.head(3)","51dee4b5":"df.info()","1be56ada":"print(df['trans_date'].min(), df['trans_date'].max())","55b44c05":"sd = dt.datetime(2015,4,1)\ndf['hist']=sd - df['trans_date']\ndf['hist'].astype('timedelta64[D]')\ndf['hist']=df['hist'] \/ np.timedelta64(1, 'D')\ndf.head()","06bc9d4f":"df=df[df['hist'] < 730]\ndf.info()","654a40d5":"rfmTable = df.groupby('customer_id').agg({'hist': lambda x:x.min(), # Recency\n                                        'customer_id': lambda x: len(x),               # Frequency\n                                        'tran_amount': lambda x: x.sum()})          # Monetary Value\n\nrfmTable.rename(columns={'hist': 'recency', \n                         'customer_id': 'frequency', \n                         'tran_amount': 'monetary_value'}, inplace=True)","7fab79ed":"rfmTable.head()\n","e846e62a":"df[df['customer_id']=='CS1112']","5167bd0f":"quartiles = rfmTable.quantile(q=[0.25,0.50,0.75])\nprint(quartiles, type(quartiles))","de3a1555":"quartiles=quartiles.to_dict()\nquartiles","aee0b512":"# for Recency \n\ndef RClass(x,p,d):\n    if x <= d[p][0.25]:\n        return 1\n    elif x <= d[p][0.50]:\n        return 2\n    elif x <= d[p][0.75]: \n        return 3\n    else:\n        return 4\n    \n## for Frequency and Monetary value \n\ndef FMClass(x,p,d):\n    if x <= d[p][0.25]:\n        return 4\n    elif x <= d[p][0.50]:\n        return 3\n    elif x <= d[p][0.75]: \n        return 2\n    else:\n        return 1","f9ab2862":"rfmSeg = rfmTable\nrfmSeg['R_Quartile'] = rfmSeg['recency'].apply(RClass, args=('recency',quartiles,))\nrfmSeg['F_Quartile'] = rfmSeg['frequency'].apply(FMClass, args=('frequency',quartiles,))\nrfmSeg['M_Quartile'] = rfmSeg['monetary_value'].apply(FMClass, args=('monetary_value',quartiles,))","d4d92f7c":"rfmSeg['RFMClass'] = rfmSeg.R_Quartile.map(str) \\\n                            + rfmSeg.F_Quartile.map(str) \\\n                            + rfmSeg.M_Quartile.map(str)","eae97881":"rfmSeg.head()","1466d543":"rfmSeg.sort_values(by=['RFMClass', 'monetary_value'], ascending=[True, False])","71e43fd7":"rfmSeg.groupby('RFMClass').agg('monetary_value').mean()","aa20bb2f":"rfmSeg['Total Score'] = rfmSeg['R_Quartile'] + rfmSeg['F_Quartile'] +rfmSeg['M_Quartile']\nprint(rfmSeg.head(), rfmSeg.info())","a6ef0bbd":"rfmSeg.groupby('Total Score').agg('monetary_value').mean()","bfd7a98c":"res = pd.read_csv('..\/input\/retailtransactiondata\/Retail_Data_Response.csv')\nres.sort_values('customer_id', inplace=True)\n\nprint(res.head(), res.info())","7491136f":"rfmSeg.reset_index(inplace=True)\nrfmSeg.head()","41a33b52":"rfmSeg.sort_values('customer_id', inplace=True)\nrfm2=pd.merge(rfmSeg, res, on='customer_id')","5bdecb0d":"rfm2.info()","99855b75":"Hanya transaksi yang dilakukan dalam 2 tahun terakhir yang dipertimbangkan untuk dianalisis.","bc371a73":"Untuk analisis, sangat penting untuk menggabungkan skor menjadi satu skor. Ada beberapa metode. Salah satu metode adalah dengan hanya menggabungkan pecahan untuk membentuk angka 3 digit antara 111 dan 444. Kerugiannya di sini adalah terlalu banyak kategori (4x4x4). Demikian pula, tidak mudah untuk memprioritaskan skor seperti 421 dan 412.","661c9543":"Kemungkinan lain adalah menggabungkan skor menjadi satu skor (misalnya 4 + 1 + 1). Ini akan membawa skor antara 3 dan 12. Keuntungannya di sini adalah bahwa setiap skor memiliki kepentingan yang sama. Tetapi beberapa skor memiliki komponen sebanyak sgements (misalnya, -413 iklan 431)","40ab142c":"mari kita konversi informasi kuartil ke dalam kamus sehingga cutoff dapat diambil.","bec8deb4":"Analisis RFM melibatkan pengkategorian R, F dan M ke dalam 3 kategori atau lebih. Untuk kenyamanan, mari buat 4 kategori berdasarkan kuartil (kuartil membagi sampel menjadi 4 bagian dengan proporsi yang sama)","f38f6a8e":"Jumlah hari dari tanggal studi dihitung sebagai berikut.","a2fa1f5d":"Data ini berada pada tingkat transaksi. yaitu satu baris untuk setiap transaksi yang dilakukan oleh pelanggan (perhatikan bahwa tidak pada level item).","72410c23":"The data will be summarized at customer level by taking *number of days to the latest transaction*, *sum of all transaction amount* and *total number of transaction*.","510cc12e":"Kami akan memeriksa detail pelanggan 'CS1112'. Tampaknya perhitungannya benar (transaksi terakhir adalah 77 hari yang lalu \/ jumlah total transaksi adalah 6 \/ jumlah totalnya adalah 358."}}