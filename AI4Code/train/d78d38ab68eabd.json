{"cell_type":{"299fb5c2":"code","87f07cb0":"code","37a989b1":"code","efc20e7b":"code","5b05d980":"code","fe9a2e52":"code","e0f5a713":"code","e2b5f68f":"code","0cefff0e":"code","098635bf":"code","1cede39e":"code","7f3051d8":"code","ace40558":"code","4978fee1":"code","aa47b501":"code","3b8875f3":"code","1111b3e9":"code","22565631":"code","8d528cdb":"code","15fdb685":"code","4d16d2d4":"code","0187847f":"code","9b662022":"code","1dded914":"code","3bcd0b03":"code","d758a389":"code","51d17feb":"code","8db4847a":"code","ea90d85e":"code","e321d3cc":"code","b5c592e6":"code","e709855d":"code","30e32592":"code","28d493ae":"code","09374fb1":"code","66ebf993":"code","9065533d":"code","f4ed9325":"markdown","c612e02a":"markdown","0f685667":"markdown","08b0e32d":"markdown","af03065d":"markdown","dbcec223":"markdown","2e4c3474":"markdown","596342e5":"markdown","fe28133d":"markdown","0b66be56":"markdown","b8ae95a0":"markdown","1a331ac6":"markdown","c5eff2dc":"markdown","3c71ec1a":"markdown","7dcb90eb":"markdown","18ed33c3":"markdown","fa840c85":"markdown","558bc87d":"markdown","4f6c802c":"markdown","f4c1a939":"markdown","bf68ac0e":"markdown","f161a929":"markdown","6e530dc7":"markdown","ff726cc2":"markdown","ef224880":"markdown","7594be78":"markdown","7e5fbafa":"markdown","fbc6bf5e":"markdown","5704329e":"markdown"},"source":{"299fb5c2":"import numpy as np\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom itertools import cycle\nfrom sklearn.preprocessing import StandardScaler\nfrom matplotlib import cm\nfrom sklearn.metrics import silhouette_samples\n\nimport os\nprint(os.listdir(\"..\/input\"))","87f07cb0":"df=pd.read_excel(\"..\/input\/Data_bollywood.xlsx\")\nprint(df.head())\nprint(df.info())","37a989b1":"df.head()","efc20e7b":"df1=df.drop('Movie_Name',axis=1)\ndf1.head()","5b05d980":"print(df1['Box_Office_Collection'].describe())\nplt.figure(figsize=(7,6))\nsns.distplot(df1['Box_Office_Collection'])","fe9a2e52":"print(df1['Profit'].describe())\nplt.figure(figsize=(7,6))\nsns.distplot(df1['Profit'])","e0f5a713":"print(df1['Earning_Ratio'].describe())\nplt.figure(figsize=(7,6))\nsns.distplot(df1['Earning_Ratio'])","e2b5f68f":"print(df1['Budget'].describe())\nplt.figure(figsize=(7,6))\nsns.distplot(df1['Budget'])","0cefff0e":"print(df1['Youtube_Views'].describe())\nplt.figure(figsize=(7,6))\nsns.distplot(df1['Youtube_Views'])","098635bf":"print(df1['Youtube_Likes'].describe())\nplt.figure(figsize=(7,6))\nsns.distplot(df1['Youtube_Likes'])","1cede39e":"print(df1['Youtube_Dislikes'].describe())\nplt.figure(figsize=(7,6))\nsns.distplot(df1['Youtube_Dislikes'])","7f3051d8":"sns.pairplot(df1)","ace40558":"df1.hist(figsize=(7,6),bins=50,xlabelsize=8,ylabelsize=8)","4978fee1":"scaler = StandardScaler()\nscaler.fit(df.drop('Movie_Name',axis=1))","aa47b501":"scaled_features = scaler.transform(df.drop('Movie_Name',axis=1))\nprint(\"Type of scaled_feature:\",type(scaled_features))\nprint(scaled_features)","3b8875f3":"df2= pd.DataFrame(scaled_features,columns=df.columns[1:8])\ndf2.head()","1111b3e9":"X=df2.values\nprint(X)\nplt.scatter(X[:,0],X[:,6])\nplt.show()","22565631":"km = KMeans(n_clusters=3, \n            init='random', \n            n_init=10, \n            max_iter=300,\n            tol=1e-04,\n            random_state=0)\ny_km = km.fit_predict(X)\n\nplt.scatter(X[y_km==0,0], \n            X[y_km==0,1], \n            s=50, \n            c='lightgreen', \n            marker='s', \n            label='cluster 1')\nplt.scatter(X[y_km==1,0], \n            X[y_km==1,1], \n            s=50, \n            c='orange', \n            marker='o', \n            label='cluster 2')\nplt.scatter(X[y_km==2,0], \n            X[y_km==2,1], \n            s=50, \n            c='lightblue', \n            marker='v', \n            label='cluster 3')\nplt.scatter(km.cluster_centers_[:,0], \n            km.cluster_centers_[:,1], \n            s=250, \n            marker='*', \n            c='red', \n            label='centroids')\nplt.legend()\nplt.grid()\nplt.tight_layout()\n#plt.savefig('.\/figures\/centroids.png', dpi=300)\nplt.show()","8d528cdb":"print('Distortion: %.2f' % km.inertia_)","15fdb685":"distortions = []\nfor i in range(1, 11):\n    km = KMeans(n_clusters=i, \n                init='k-means++', \n                n_init=10, \n                max_iter=300, \n                random_state=0)\n    km.fit(X)\n    distortions.append(km.inertia_)\nplt.plot(range(1,11), distortions , marker='o')\nplt.xlabel('Number of clusters')\nplt.ylabel('Distortion')\nplt.tight_layout()\n#plt.savefig('.\/figures\/elbow.png', dpi=300)\nplt.show()","4d16d2d4":"import numpy as np\nfrom matplotlib import cm\nfrom sklearn.metrics import silhouette_samples\n\nkm = KMeans(n_clusters=7, \n            init='k-means++', \n            n_init=10, \n            max_iter=300,\n            tol=1e-04,\n            random_state=0)\ny_km = km.fit_predict(X)\n\ncluster_labels = np.unique(y_km)\nn_clusters = cluster_labels.shape[0]\nsilhouette_vals = silhouette_samples(X, y_km, metric='euclidean')\ny_ax_lower, y_ax_upper = 0, 0\nyticks = []\nfor i, c in enumerate(cluster_labels):\n    c_silhouette_vals = silhouette_vals[y_km==c]\n    c_silhouette_vals.sort()\n    y_ax_upper += len(c_silhouette_vals)\n    color = cm.jet(i \/ n_clusters)\n    plt.barh(range(y_ax_lower, y_ax_upper), c_silhouette_vals, height=1.0, \n            edgecolor='none', color=color)\n\n    yticks.append((y_ax_lower + y_ax_upper) \/ 2)\n    y_ax_lower += len(c_silhouette_vals)\n    \nsilhouette_avg = np.mean(silhouette_vals)\nplt.axvline(silhouette_avg, color=\"red\", linestyle=\"--\") \n\nplt.yticks(yticks, cluster_labels + 1)\nplt.ylabel('Cluster')\nplt.xlabel('Silhouette coefficient')\n\nplt.tight_layout()\n# plt.savefig('.\/figures\/silhouette.png', dpi=300)\nplt.show()","0187847f":"import numpy as np\nfrom matplotlib import cm\nfrom sklearn.metrics import silhouette_samples\n\nkm = KMeans(n_clusters=6, \n            init='k-means++', \n            n_init=10, \n            max_iter=300,\n            tol=1e-04,\n            random_state=0)\ny_km = km.fit_predict(X)\n\ncluster_labels = np.unique(y_km)\nn_clusters = cluster_labels.shape[0]\nsilhouette_vals = silhouette_samples(X, y_km, metric='euclidean')\ny_ax_lower, y_ax_upper = 0, 0\nyticks = []\nfor i, c in enumerate(cluster_labels):\n    c_silhouette_vals = silhouette_vals[y_km==c]\n    c_silhouette_vals.sort()\n    y_ax_upper += len(c_silhouette_vals)\n    color = cm.jet(i \/ n_clusters)\n    plt.barh(range(y_ax_lower, y_ax_upper), c_silhouette_vals, height=1.0, \n            edgecolor='none', color=color)\n\n    yticks.append((y_ax_lower + y_ax_upper) \/ 2)\n    y_ax_lower += len(c_silhouette_vals)\n    \nsilhouette_avg = np.mean(silhouette_vals)\nplt.axvline(silhouette_avg, color=\"red\", linestyle=\"--\") \n\nplt.yticks(yticks, cluster_labels + 1)\nplt.ylabel('Cluster')\nplt.xlabel('Silhouette coefficient')\n\nplt.tight_layout()\n# plt.savefig('.\/figures\/silhouette.png', dpi=300)\nplt.show()","9b662022":"import numpy as np\nfrom matplotlib import cm\nfrom sklearn.metrics import silhouette_samples\n\nkm = KMeans(n_clusters=5, \n            init='k-means++', \n            n_init=10, \n            max_iter=300,\n            tol=1e-04,\n            random_state=0)\ny_km = km.fit_predict(X)\n\ncluster_labels = np.unique(y_km)\nn_clusters = cluster_labels.shape[0]\nsilhouette_vals = silhouette_samples(X, y_km, metric='euclidean')\ny_ax_lower, y_ax_upper = 0, 0\nyticks = []\nfor i, c in enumerate(cluster_labels):\n    c_silhouette_vals = silhouette_vals[y_km==c]\n    c_silhouette_vals.sort()\n    y_ax_upper += len(c_silhouette_vals)\n    color = cm.jet(i \/ n_clusters)\n    plt.barh(range(y_ax_lower, y_ax_upper), c_silhouette_vals, height=1.0, \n            edgecolor='none', color=color)\n\n    yticks.append((y_ax_lower + y_ax_upper) \/ 2)\n    y_ax_lower += len(c_silhouette_vals)\n    \nsilhouette_avg = np.mean(silhouette_vals)\nplt.axvline(silhouette_avg, color=\"red\", linestyle=\"--\") \n\nplt.yticks(yticks, cluster_labels + 1)\nplt.ylabel('Cluster')\nplt.xlabel('Silhouette coefficient')\n\nplt.tight_layout()\n# plt.savefig('.\/figures\/silhouette.png', dpi=300)\nplt.show()","1dded914":"import numpy as np\nfrom matplotlib import cm\nfrom sklearn.metrics import silhouette_samples\n\nkm = KMeans(n_clusters=4, \n            init='k-means++', \n            n_init=10, \n            max_iter=300,\n            tol=1e-04,\n            random_state=0)\ny_km = km.fit_predict(X)\n\ncluster_labels = np.unique(y_km)\nn_clusters = cluster_labels.shape[0]\nsilhouette_vals = silhouette_samples(X, y_km, metric='euclidean')\ny_ax_lower, y_ax_upper = 0, 0\nyticks = []\nfor i, c in enumerate(cluster_labels):\n    c_silhouette_vals = silhouette_vals[y_km==c]\n    c_silhouette_vals.sort()\n    y_ax_upper += len(c_silhouette_vals)\n    color = cm.jet(i \/ n_clusters)\n    plt.barh(range(y_ax_lower, y_ax_upper), c_silhouette_vals, height=1.0, \n            edgecolor='none', color=color)\n\n    yticks.append((y_ax_lower + y_ax_upper) \/ 2)\n    y_ax_lower += len(c_silhouette_vals)\n    \nsilhouette_avg = np.mean(silhouette_vals)\nplt.axvline(silhouette_avg, color=\"red\", linestyle=\"--\") \n\nplt.yticks(yticks, cluster_labels + 1)\nplt.ylabel('Cluster')\nplt.xlabel('Silhouette coefficient')\n\nplt.tight_layout()\n# plt.savefig('.\/figures\/silhouette.png', dpi=300)\nplt.show()","3bcd0b03":"import numpy as np\nfrom matplotlib import cm\nfrom sklearn.metrics import silhouette_samples\n\nkm = KMeans(n_clusters=3, \n            init='k-means++', \n            n_init=10, \n            max_iter=300,\n            tol=1e-04,\n            random_state=0)\ny_km = km.fit_predict(X)\n\ncluster_labels = np.unique(y_km)\nn_clusters = cluster_labels.shape[0]\nsilhouette_vals = silhouette_samples(X, y_km, metric='euclidean')\ny_ax_lower, y_ax_upper = 0, 0\nyticks = []\nfor i, c in enumerate(cluster_labels):\n    c_silhouette_vals = silhouette_vals[y_km==c]\n    c_silhouette_vals.sort()\n    y_ax_upper += len(c_silhouette_vals)\n    color = cm.jet(i \/ n_clusters)\n    plt.barh(range(y_ax_lower, y_ax_upper), c_silhouette_vals, height=1.0, \n            edgecolor='none', color=color)\n\n    yticks.append((y_ax_lower + y_ax_upper) \/ 2)\n    y_ax_lower += len(c_silhouette_vals)\n    \nsilhouette_avg = np.mean(silhouette_vals)\nplt.axvline(silhouette_avg, color=\"red\", linestyle=\"--\") \n\nplt.yticks(yticks, cluster_labels + 1)\nplt.ylabel('Cluster')\nplt.xlabel('Silhouette coefficient')\n\nplt.tight_layout()\n# plt.savefig('.\/figures\/silhouette.png', dpi=300)\nplt.show()","d758a389":"km = KMeans(n_clusters=5, \n            init='k-means++', \n            n_init=10, \n            max_iter=300,\n            tol=1e-04,\n            random_state=0)\ny_km = km.fit_predict(X)\n\ncluster_labels = np.unique(y_km)\nn_clusters = cluster_labels.shape[0]\nsilhouette_vals = silhouette_samples(X, y_km, metric='euclidean')\ny_ax_lower, y_ax_upper = 0, 0\nyticks = []\nfor i, c in enumerate(cluster_labels):\n    c_silhouette_vals = silhouette_vals[y_km==c]\n    c_silhouette_vals.sort()\n    y_ax_upper += len(c_silhouette_vals)\n    color = cm.jet(i \/ n_clusters)\n    plt.barh(range(y_ax_lower, y_ax_upper), c_silhouette_vals, height=1.0, \n            edgecolor='none', color=color)\n\n    yticks.append((y_ax_lower + y_ax_upper) \/ 2)\n    y_ax_lower += len(c_silhouette_vals)\n    \nsilhouette_avg = np.mean(silhouette_vals)\nplt.axvline(silhouette_avg, color=\"red\", linestyle=\"--\") \n\nplt.yticks(yticks, cluster_labels + 1)\nplt.ylabel('Cluster')\nplt.xlabel('Silhouette coefficient')\n\nplt.tight_layout()\n# plt.savefig('.\/figures\/silhouette.png', dpi=300)\nplt.show()","51d17feb":"a = km.cluster_centers_[0]\nb = km.cluster_centers_[2]\nd = km.cluster_centers_[4]\nc = np.vstack((a,b,d))\nc","8db4847a":"feat = df2.as_matrix()\n\nplt.scatter(feat[y_km==0,0], \n            feat[y_km==0,3], \n            s=50, \n            c='lightgreen', \n            marker='s', \n            label='cluster 1')\nplt.scatter(feat[y_km==2,0], \n            feat[y_km==2,3], \n            s=50, \n            c='orange', \n            marker='o', \n            label='cluster 3')\nplt.scatter(feat[y_km==4,0], \n            feat[y_km==4,3], \n            s=50, \n            c='blue', \n            marker='v', \n            label='cluster 5')\nplt.scatter(c[:,0], \n            c[:,3], \n            s=250, \n            marker='*', \n            c='red', \n            label='centroids')\nplt.legend()\nplt.grid()\nplt.tight_layout()\nplt.xlabel('Box Office Collections')\nplt.ylabel('Budget')\nplt.suptitle('Box office collections v\/s budget')\n#plt.savefig('.\/figures\/centroids.png', dpi=300)\nplt.show()","ea90d85e":"plt.scatter(feat[y_km==0,0], \n            feat[y_km==0,4], \n            s=50, \n            c='lightgreen', \n            marker='s', \n            label='cluster 1')\nplt.scatter(feat[y_km==2,0], \n            feat[y_km==2,4], \n            s=50, \n            c='orange', \n            marker='o', \n            label='cluster 3')\nplt.scatter(feat[y_km==4,0], \n            feat[y_km==4,4], \n            s=50, \n            c='blue', \n            marker='v', \n            label='cluster 5')\nplt.scatter(c[:,0], \n            c[:,4], \n            s=250, \n            marker='*', \n            c='red', \n            label='centroids')\nplt.legend()\nplt.grid()\nplt.tight_layout()\nplt.xlabel('Box Office Collections')\nplt.ylabel('YouTube Views')\nplt.suptitle('Box office collections v\/s YouTube Views')\n#plt.savefig('.\/figures\/centroids.png', dpi=300)\nplt.show()","e321d3cc":"plt.scatter(feat[y_km==0,1], \n            feat[y_km==0,6], \n            s=50, \n            c='lightgreen', \n            marker='s', \n            label='cluster 1')\nplt.scatter(feat[y_km==2,1], \n            feat[y_km==2,6], \n            s=50, \n            c='orange', \n            marker='o', \n            label='cluster 3')\nplt.scatter(feat[y_km==4,1], \n            feat[y_km==4,6], \n            s=50, \n            c='blue', \n            marker='v', \n            label='cluster 5')\nplt.scatter(c[:,1], \n            c[:,6], \n            s=250, \n            marker='*', \n            c='red', \n            label='centroids')\nplt.legend()\nplt.grid()\nplt.tight_layout()\nplt.xlabel('Profit')\nplt.ylabel('YouTube Dislikes')\nplt.suptitle('Profit v\/s YouTube Dislikes')\n#plt.savefig('.\/figures\/centroids.png', dpi=300)\nplt.show()","b5c592e6":"plt.scatter(feat[y_km==0,1], \n            feat[y_km==0,2], \n            s=50, \n            c='lightgreen', \n            marker='s', \n            label='cluster 1')\nplt.scatter(feat[y_km==2,1], \n            feat[y_km==2,2], \n            s=50, \n            c='orange', \n            marker='o', \n            label='cluster 3')\nplt.scatter(feat[y_km==4,1], \n            feat[y_km==4,2], \n            s=50, \n            c='blue', \n            marker='v', \n            label='cluster 5')\nplt.scatter(c[:,1], \n            c[:,2], \n            s=250, \n            marker='*', \n            c='red', \n            label='centroids')\nplt.legend()\nplt.grid()\nplt.tight_layout()\nplt.xlabel('Profit')\nplt.ylabel('Earning Ratio')\nplt.suptitle('Profit v\/s Earning Ratio')\n#plt.savefig('.\/figures\/centroids.png', dpi=300)\nplt.show()","e709855d":"plt.scatter(feat[y_km==0,4], \n            feat[y_km==0,5], \n            s=50, \n            c='lightgreen', \n            marker='s', \n            label='cluster 1')\nplt.scatter(feat[y_km==2,4], \n            feat[y_km==2,5], \n            s=50, \n            c='orange', \n            marker='o', \n            label='cluster 3')\nplt.scatter(feat[y_km==4,4], \n            feat[y_km==4,5], \n            s=50, \n            c='blue', \n            marker='v', \n            label='cluster 5')\nplt.scatter(c[:,4], \n            c[:,5], \n            s=250, \n            marker='*', \n            c='red', \n            label='centroids')\nplt.legend()\nplt.grid()\nplt.tight_layout()\nplt.xlabel('Youtube_Views')\nplt.ylabel('Youtube_Likes')\nplt.suptitle('Youtube_Likes v\/s Youtube_Views')\n#plt.savefig('.\/figures\/centroids.png', dpi=300)\nplt.show()","30e32592":"feat = df2.as_matrix()\n\nplt.scatter(feat[y_km==0,1], \n            feat[y_km==0,3], \n            s=50, \n            c='lightgreen', \n            marker='s', \n            label='cluster 1')\nplt.scatter(feat[y_km==1,1], \n            feat[y_km==1,3], \n            s=50, \n            c='orange', \n            marker='o', \n            label='cluster 2')\nplt.scatter(feat[y_km==4,1], \n            feat[y_km==4,3], \n            s=50, \n            c='blue', \n            marker='v', \n            label='cluster 5')\nplt.scatter(c[:,1], \n            c[:,3], \n            s=250, \n            marker='*', \n            c='red', \n            label='centroids')\nplt.legend()\nplt.grid()\nplt.tight_layout()\nplt.xlabel('Profit')\nplt.ylabel('Budget')\nplt.suptitle('Profit v\/s budget')\n#plt.savefig('.\/figures\/centroids.png', dpi=300)\nplt.show()","28d493ae":"f1 = df['Box_Office_Collection'].values\nf2 = df['Profit'].values\nf3 = df['Earning_Ratio'].values\nf4 = df['Budget'].values\nf5 = df['Youtube_Views'].values\nf6 = df['Youtube_Likes'].values\nf7 = df['Youtube_Dislikes'].values\n\nX=np.matrix(list(zip(f1,f2,f3,f4,f5,f6,f7)))","09374fb1":"km_1 = KMeans(n_clusters=5).fit(X)","66ebf993":"labels = km_1.labels_\ncluster_centers = km_1.cluster_centers_\n\nlabels_unique = np.unique(labels)\nn_clusters_ = len(labels_unique)\n\nprint(\"number of estimated clusters : %d\" % n_clusters_)","9065533d":"colors = cycle('bgrymckbgrcmykbgrcmykbgrcmyk')\nfor k, col in zip(range(n_clusters_), colors):\n    my_members = labels == k\n    cluster_center = cluster_centers[k]\n    plt.plot(X[my_members, 0], X[my_members, 4], col + '.', label=k+1)\n    plt.plot(cluster_center[0], cluster_center[4], 'o', markerfacecolor=col,\n             markeredgecolor='k', markersize=14)\nplt.title('Estimated number of clusters: %d' % n_clusters_)\nplt.xlabel('Box Office Collections')\nplt.ylabel('YouTube Views')\nplt.legend()\nplt.show()","f4ed9325":"### Plotting the histogran for each column in the dataframe","c612e02a":"<br>","0f685667":"### Standardizing  the variables because of non-uniformity of variable type by creating a StandardScaler() object called scaler.\n","08b0e32d":"### Pairplot ","af03065d":"### Box office collection v\/s Budget","dbcec223":"### Profit v\/s Youtube dislikes","2e4c3474":"## Reading the file into the data frame","596342e5":"### Converting the scaled features to a pandas dataframe ","fe28133d":"<br>","0b66be56":"### Youtube likes v\/s Youtube views","b8ae95a0":"# Analysis of Clusters 1,3&5","1a331ac6":"## After analyzing the silhouette plot, we find that the ideal number of clusters is 5.","c5eff2dc":"## Summary and Distribution plot of each column in the data","3c71ec1a":"### Profit v\/s budget","7dcb90eb":"## Quantifying the quality of clustering  via silhouette plots","18ed33c3":"## Clustering using k=5","fa840c85":"## Importing the libraries required for the analysis","558bc87d":"## Using the elbow method to find the optimal number of clusters ","4f6c802c":"###  Use the .transform() method to transform the features to a scaled version.\n### Scaled feature gives an array containing the standardized values","f4c1a939":"# Importing the Libraries","bf68ac0e":"### Box office collection v\/s Youtube views","f161a929":"### From the elbow curve, we find that the distortions decrease as the value of k increases.\n### After k = 5, the changes in distortion are minimal.\n### Hence, we choose the optimal number of clusters to be 5.\n","6e530dc7":"## Using Kmeans clustering to group the data","ff726cc2":"### From the silhouette plot, we found that only clusters 1,3 and 5 were well defined. We use these for our analysis\n","ef224880":"### Dropping the movie name column ","7594be78":"##  Objective:\n1. To cluster the movies using Kmeans algorithm\n2. To analyse the number of clusters using Elbow Curve and Silhouette analysis\n","7e5fbafa":"From the above analysis we find,\n## Cluster 1 \u2013 Unpopular movies\n1. This cluster has films with the lowest mean budget and the lowest mean box office collections. \n2. For the above reasons this cluster has least earning ratio (box office collection to budget).\n3. These films have incurred losses. Their earnings ratio is less than one implying that their budgets were more than the collections.\n4. The films in this cluster appear to be less popular with the audience. An indication of this is that they have the least number of YouTube views and likes. \n\n## Cluster 3 \u2013 Popular movies\n1. This cluster has films with high mean budget  and the highest mean box office collections . \n2. They also have the highest earning ratio among all the clusters (box office collection to budget).\n3. These films made huge profits in comparison with the other clusters. \n4. The films in this cluster appear to be very popular with the audience a large number of YouTube views and likes. \n\n## Cluster 5 \u2013 Average movies\n1. This cluster has films with high mean budget and the average box office collections.They have an average earning ratio (box office collection to budget).\n2.These films have average profits. \n3. The films in this cluster appear to be popular with people who watch movies online rather than in the theatres. These films have the average number of YouTube views and likes.\n","fbc6bf5e":"## K-means++\n#### Distortion is the sum of the squared distances between each observation and its closest centroid.\n#### K-Means attempts to minimize distortion.\n#### The stopping criterion is the change in distortion, once the change is lower than a pre-established threshold, the algorithm ends\n","5704329e":"### Profit v\/s Earnings ratio"}}