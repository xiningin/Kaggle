{"cell_type":{"6420c086":"code","ad4b7032":"code","dde3c792":"code","c8d17ac2":"code","f820d91d":"code","ad5f46b4":"code","73435ce3":"code","d56e1c48":"code","8b40e820":"code","163f5cb5":"code","8a9a7de7":"code","a378fac5":"code","d9e2625e":"code","4cd8ee14":"code","16f02986":"code","04171d63":"code","81bdb2b1":"code","32f3d7ab":"code","fba69fbc":"code","cb9a4ece":"code","750334bb":"code","8359257a":"code","5194652a":"code","a024bebd":"code","33b4f272":"code","1fd14bb1":"code","68560e05":"code","0a5314dc":"code","404a7fda":"code","97e834a9":"code","1f415e59":"code","bc5e2672":"code","be4104d6":"code","74e1308b":"code","25c97370":"markdown","1cd9a81c":"markdown","21cc6efe":"markdown","a011f426":"markdown","c0fe0af8":"markdown","aefe2144":"markdown","547e13d2":"markdown","1c9283c2":"markdown","e1ab265d":"markdown","e3f3c731":"markdown","44d00488":"markdown","90444a06":"markdown","fd913c95":"markdown","0e581ad4":"markdown","0e7f4b1f":"markdown","5057a2f2":"markdown"},"source":{"6420c086":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# seaborn library\nimport seaborn as sns\n\n# plotly library\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ad4b7032":"data = pd.read_csv('..\/input\/column_2C_weka.csv')\ndata.head()","dde3c792":"data.info()","c8d17ac2":"data['class'].value_counts()","f820d91d":"sns.countplot(x=\"class\", data=data)","ad5f46b4":"#correlation map\nf,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(data.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.2f',ax=ax)\nplt.show()","73435ce3":"data.columns","d56e1c48":"sns.boxplot(x=\"class\", y=\"pelvic_incidence\", data=data, palette=\"PRGn\")\nplt.show()","8b40e820":"sns.boxplot(x=\"class\", y=\"sacral_slope\", data=data, palette=\"PRGn\")\nplt.show()","163f5cb5":"data.head()","8a9a7de7":"data['coloring'] = ['red' if i=='Abnormal' else 'green' for i in data['class']]\ndata.head()","a378fac5":"data.columns","d9e2625e":"sns.swarmplot(x=\"class\", y=\"pelvic_incidence\", data=data)\nplt.show()","4cd8ee14":"sns.swarmplot(x=\"class\", y=\"sacral_slope\", data=data)\nplt.show()","16f02986":"# import figure factory\nimport plotly.figure_factory as ff\n\ndata_matrix = data.loc[:,['pelvic_incidence', 'lumbar_lordosis_angle', 'sacral_slope', 'degree_spondylolisthesis']]\ndata_matrix[\"index\"] = np.arange(1,len(data_matrix)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data_matrix, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","04171d63":"color_list = ['red' if i=='Abnormal' else 'green' for i in data.loc[:,'class']]\npd.plotting.scatter_matrix(data.loc[:, data.columns != 'class'],\n                                       c=color_list,\n                                       figsize= [15,15],\n                                       diagonal='hist',\n                                       alpha=0.5,\n                                       s = 100,\n                                       marker = 'points',\n                                       edgecolor= \"black\")\nplt.show()","81bdb2b1":"data_abnormal = data[data['class']=='Abnormal']\npd.plotting.scatter_matrix(data_abnormal.loc[:, data_abnormal.columns != 'class'],\n                                       figsize= [15,15],\n                                       diagonal='hist',\n                                       alpha=0.5,\n                                       s = 100,\n                                       marker = 'points',\n                                       edgecolor= \"black\")\nplt.show()","32f3d7ab":"data_normal = data[data['class']=='Normal']\npd.plotting.scatter_matrix(data_normal.loc[:, data_normal.columns != 'class'],\n                                       figsize= [15,15],\n                                       diagonal='hist',\n                                       alpha=0.5,\n                                       s = 100,\n                                       marker = '*',\n                                       edgecolor= \"black\")\nplt.show()","fba69fbc":"data.columns","cb9a4ece":"# x and y axis to be used\ndata_abnormal = data[data['class']=='Abnormal']\nx_abnormal = data_abnormal['pelvic_incidence'].values.reshape(-1,1)\ny_abnormal = data_abnormal['sacral_slope'].values.reshape(-1,1)\n\nplt.figure(figsize=(10,10))\nplt.scatter(x_abnormal,y_abnormal)\nplt.xlabel('pelvic_incidence')\nplt.ylabel('sacral_slope')\nplt.show()","750334bb":"from sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()\nlin_reg.fit(x_abnormal, y_abnormal)\n\n# prediction\nx_predict = np.linspace(min(x_abnormal), max(y_abnormal)).reshape(-1,1)\ny_predict = lin_reg.predict(x_predict)\n\n# visualization\nplt.figure(figsize=(10,10))\nplt.plot(x_predict, y_predict, color='red', linewidth=3)\nplt.scatter(x_abnormal,y_abnormal)\nplt.xlabel('pelvic_incidence')\nplt.ylabel('sacral_slope')\nplt.show()","8359257a":"print('r square score: ', lin_reg.score(x_abnormal,y_abnormal))","5194652a":"# R square using different approach\ny_predicted_abnormal = lin_reg.predict(x_abnormal)\n\nfrom sklearn.metrics import r2_score\nprint('r square score: ', r2_score(y_abnormal, y_predicted_abnormal))","a024bebd":"data.columns","33b4f272":"from sklearn.preprocessing import PolynomialFeatures\npol_reg = PolynomialFeatures(degree=2) # 3rd degree polynomial","1fd14bb1":"# let y=b0+b1.x+b2.x^2+b3.x^3\n# the code below returns x^0, x^1, x^2 values\nx_polynomial = pol_reg.fit_transform(x_abnormal) # y=b0+b1.x+b2.x^2+b3.x^3\nx_polynomial","68560e05":"# so that knowing these values we can assume that we have linear regression again\nfrom sklearn.linear_model import LinearRegression\nlin_reg2 = LinearRegression()\nlin_reg2.fit(x_polynomial, y_abnormal)\ny_pol_predict = lin_reg2.predict(x_polynomial)","0a5314dc":"# visualization\nplt.figure(figsize=(10,10))\nplt.plot(x_abnormal, y_pol_predict, color='black', linewidth=3, label='polynomial')\nplt.legend()\nplt.scatter(x_abnormal,y_abnormal)\nplt.xlabel('pelvic_incidence')\nplt.ylabel('sacral_slope')\nplt.show()","404a7fda":"data.columns","97e834a9":"# x and y axis to be used\ndata_normal = data[data['class']=='Normal']\nx_normal = data_normal['pelvic_tilt numeric'].values.reshape(-1,1)\ny_normal = data_normal['sacral_slope'].values.reshape(-1,1)\n\nfrom sklearn.tree import DecisionTreeRegressor\ntree_reg = DecisionTreeRegressor()\ntree_reg.fit(x_normal, y_normal)\n\n# prediction\nx_new = np.linspace(min(x_normal), max(x_normal)).reshape(-1,1)\ny_new_predict = tree_reg.predict(x_new)\n\n# visualization\nplt.figure(figsize=(10,10))\nplt.plot(x_new, y_new_predict, color='red', linewidth=3)\nplt.scatter(x_normal,y_normal)\nplt.xlabel('pelvic_tilt numeric')\nplt.ylabel('sacral_slope')\nplt.show()","1f415e59":"tree_reg.predict(25) # predicted sacral_slope value for pelvic_tilt numeric=25\ntree_reg.predict(250) # predicted sacral_slope value for pelvic_tilt numeric=250","bc5e2672":"# x and y axis to be used\ndata_normal = data[data['class']=='Normal']\nx_normal = data_normal['pelvic_tilt numeric'].values.reshape(-1,1)\ny_normal = data_normal['sacral_slope'].values.reshape(-1,1)\n\nfrom sklearn.ensemble import RandomForestRegressor\nran_for = RandomForestRegressor(n_estimators=100, random_state=42)\nran_for.fit(x_normal, y_normal)\n\n# prediction\nx_rf = np.linspace(min(x_normal), max(x_normal)).reshape(-1,1)\ny_rf_predict = ran_for.predict(x_rf)\n\n# visualization\nplt.figure(figsize=(10,10))\nplt.plot(x_rf, y_rf_predict, color='red', linewidth=3)\nplt.scatter(x_normal,y_normal)\nplt.xlabel('pelvic_tilt numeric')\nplt.ylabel('sacral_slope')\nplt.show()","be4104d6":"print('r square score: ', ran_for.score(x_normal, y_normal))","74e1308b":"y_normal_head = ran_for.predict(x_normal)\nfrom sklearn.metrics import r2_score\nprint('r square score: ', r2_score(y_normal,y_normal_head))","25c97370":"**Calculating R Square using 2 different ways**","1cd9a81c":"****Creating Linear Regression Model****","21cc6efe":"**3. Decision Tree**","a011f426":"**Abnormal Class**","c0fe0af8":"**Normal Class**","aefe2144":"**4. Random Forest**","547e13d2":"**Corrolation Map**","1c9283c2":"**Note: **we see that highest positive correlation is between pelvic_incidence and sacral_slope","e1ab265d":"**Swarm Plot**","e3f3c731":"**2. Linear Regression**","44d00488":"**2. Polinomial Linear Regression**","90444a06":"**Box Plot**","fd913c95":"**R square**","0e581ad4":"**1. EXPLORATORY DATA ANALYSIS (EDA)**","0e7f4b1f":"**Value Counts**","5057a2f2":"**Normal and Abnormal Together**"}}