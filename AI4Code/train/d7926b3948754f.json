{"cell_type":{"9efadbf3":"code","81dc6e99":"code","f67c8a4b":"code","1db9759a":"code","bdcce514":"code","7267eb01":"code","10cc2702":"code","578db376":"code","f32e2896":"code","87abfcd8":"code","82c50cc2":"markdown","8211c250":"markdown","fd75250a":"markdown","83b4b68a":"markdown","e7144da5":"markdown","67f49ea0":"markdown","024d846c":"markdown","4976e68a":"markdown","13b79c56":"markdown","99919fb6":"markdown","8031d0c1":"markdown"},"source":{"9efadbf3":"import torch \ndevice = 'cuda' if torch.cuda.is_available() else 'cpu' # GPU recommended\n\n# Loading custom pre-trained ALBERT model already fine-tuned to SQuAD 2.0\nimport transformers\nfrom transformers import AlbertTokenizer, AlbertForQuestionAnswering\ntokenizer = AlbertTokenizer.from_pretrained('albert-base-v2')\nmodel = AlbertForQuestionAnswering.from_pretrained(\n    '\/kaggle\/input' \\\n    '\/nlp-albert-models-fine-tuned-for-squad-20'\\\n    '\/albert-base-v2-tuned-for-squad-2.0').to(device)\n\n# Loading the CORD-19 dataset and pre-processing\nimport pandas as pd\ndata = pd.read_csv('\/kaggle\/input\/CORD-19-research-challenge\/metadata.csv',\n                   keep_default_na=False)\ndata = data[data['abstract']!=''] \\\n       .reset_index(drop=True) # Remove rows with no abstracts","81dc6e99":"import numpy as np\nfrom tensorflow.keras.utils import Progbar\n\ndef inference_ALBERT(question):\n    \n    spans, scores, token_ids = [], [], []\n    \n    # Iterating over all CORD-19 articles and perform model inference\n    progress_bar = Progbar(len(data))\n    for i in range(len(data)):\n        if i % 500 == 0:\n            progress_bar.update(i)\n        text = data['abstract'][i]\n        input_ids = tokenizer.encode(question, text)\n        \n        # We have token limit of 512, so truncate if needed\n        if len(input_ids) > 512:\n            input_ids, token_type_ids = \\\n                input_ids[:511] + [3], token_type_ids[:512]\n                # [3] is the SEP token\n        \n        token_type_ids = [0 if i <= input_ids.index(3) \n                          else 1 for i in range(len(input_ids))]\n\n        # Preparing the tensors for feeding into model\n        input_ids_tensor = torch.tensor([input_ids]).to(device)\n        token_type_ids_tensor = torch.tensor([token_type_ids]).to(device)\n        \n        # Performing model inference\n        start_scores, end_scores = \\\n            model(input_ids_tensor, \n                  token_type_ids=token_type_ids_tensor)\n        \n        # Releasing GPU memory by moving each tensor back to CPU\n        # If GPU is not used, this step is uncessary but won't give error\n        input_ids_tensor, token_type_ids_tensor, start_scores, end_scores = \\\n            tuple(map(lambda x: x.to('cpu').detach().numpy(), \n                     (input_ids_tensor, token_type_ids_tensor, \\\n                      start_scores, end_scores)))\n        # Let me know if there's an easier way to do this, as I mostly work\n        # with tensorflow and I'm not very familiar with Keras\n\n        # Appending results to the corresponding lists\n        # Spans are the indices of the start and end of the answer\n        spans.append( [start_scores.argmax(), end_scores.argmax()+1] )\n        # Scores are the \"confidence\" level in the start and end\n        scores.append( [start_scores.max(), end_scores.max()] )\n        token_ids.append( input_ids )\n\n    spans = np.array(spans, dtype='int')\n    scores = np.array(scores)\n    \n    return spans, scores, token_ids","f67c8a4b":"# Define a helper function to directly convert token IDs to string\nconvert_to_str = lambda token_ids: \\\n    tokenizer.convert_tokens_to_string(\n    tokenizer.convert_ids_to_tokens(token_ids))\n\nfrom IPython.display import display, HTML\n\ndef display_results(spans, scores, token_ids, first_n_entries=15,\n                    max_disp_len=100):\n    \n    display(HTML(\n        'Model output (<text style=color:red>red font<\/text> '\\\n        'highlights the answer predicted by ALBERT NLP model)'\\\n        ))\n    \n    # We first sort the results based on the confidence in either the \n    # start or end index of the answer, whichever is smaller\n    min_scores = scores.min(axis=1) \n    sorted_idx = (-min_scores).argsort() # Descending order\n    \n    counter = 0    \n    for idx in sorted_idx:\n        \n        # Stop if first_n_entries papers have been displayed\n        if counter >= first_n_entries:\n            break\n        \n        # If the span is empty, the model prdicts no answer exists \n        # from the article. In rare cases, the end is smaller than\n        # the start. Both will be skipped\n        if spans[idx,0] == 0 or spans[idx,1] == 0 or \\\n            spans[idx,1]<=spans[idx,0]:\n            continue\n\n        # Obtaining the start and end token indices of answer\n        start, end = spans[idx, :]\n\n        abstract = data['abstract'][idx]\n        abstract_highlight = convert_to_str(token_ids[idx][start:end])\n        \n        # If we cannot fully convert tokens to original text,\n        # we then use the detokenized text (lower cased)\n        # Otherwise it would be best to have the original text,\n        # because there's lots of formatting especially in bio articles\n        start = abstract.lower().find(abstract_highlight)\n        if start == -1:\n            abstract = convert_to_str(token_ids[idx]\n                                      [token_ids[idx].index(3)+1:])\n            start = abstract.find(abstract_highlight)\n            end = start + len(abstract_highlight)\n            abstract = abstract[:-5] # to remove the [SEP] token in the end\n        else:\n            end = start + len(abstract_highlight)\n            abstract_highlight = abstract[start:end]\n        abstract_before_highlight, abstract_after_highlight = \\\n            abstract[: start], \\\n            abstract[end : ]\n    \n        # Putting information in HTML format\n        html_str = f'<b>({counter+1}) {data[\"title\"][idx]}<\/b><br>' + \\\n                   f'Confidence: {scores[idx].min():.2f} | ' + \\\n                   f'<i>{data[\"journal\"][idx]}<\/i> | ' + \\\n                   f'{data[\"publish_time\"][idx]} | ' + \\\n                   f'<a href={data[\"url\"][idx]}>{data[\"doi\"][idx]}<\/a>' + \\\n                   '<p style=line-height:1.1><font size=2>' + \\\n                   abstract_before_highlight + \\\n                   '<text style=color:red>%s<\/text>'%abstract_highlight + \\\n                   abstract_after_highlight + '<\/font><\/p>'\n        \n        display(HTML(html_str))\n        \n        counter += 1\n\n# Combining the inference function and the display function into one\ndef inference_ALBERT_and_display_results(question, \n                                         first_n_entries=15,\n                                         max_disp_len=100):\n    \n    spans, scores, token_ids = inference_ALBERT(question)\n    display_results(spans, scores, token_ids, \n                    first_n_entries, max_disp_len)","1db9759a":"inference_ALBERT_and_display_results(\n    'Articulation and translation of existing ethical '\n    'principles and standards to salient issues in COVID-2019 ')","bdcce514":"inference_ALBERT_and_display_results(\n    'Embedding ethics across all thematic areas, '\n    'engage with novel ethical issues that arise and '\n    'coordinate to minimize duplication of oversight ')","7267eb01":"inference_ALBERT_and_display_results(\n    'Support for sustained education, access, and '\n    'capacity building in the area of ethics ')","10cc2702":"inference_ALBERT_and_display_results(\n    'Establishment of a team at WHO that will be '\n    'integrated within multidisciplinary research and '\n    'operational platforms and that will connect with '\n    'existing and expanded global networks of social '\n    'sciences')","578db376":"inference_ALBERT_and_display_results(\n    'Development qualitative assessment frameworks '\n    'to systematically collect information related to '\n    'local barriers and enablers for the uptake and '\n    'adherence to public health measures for prevention '\n    'and control, including the rapid identification '\n    'of the secondary impacts of these measures '\n    '(e.g. use of surgical masks, modification of health '\n    'seeking behaviors for SRH, school closures) ')","f32e2896":"inference_ALBERT_and_display_results(\n    'Identification of how the burden of responding '\n    'to the outbreak and implementing public health '\n    'measures affects the physical and psychological '\n    'health of those providing care for Covid-19 '\n    'patients and identify the immediate needs that '\n    'must be addressed ')","87abfcd8":"inference_ALBERT_and_display_results(\n    'Identification the underlying drivers of fear, '\n    'anxiety and stigma that fuel misinformation and \n    'rumor, particularly through social media.')","82c50cc2":"Code for interfencing the ALBERT model.","8211c250":"# **Subtask 1**\n\nOriginal subtask description:\n\nEfforts to articulate and translate existing ethical principles and standards to salient issues in COVID-2019","fd75250a":"This work uses the [**ALBERT**](https:\/\/arxiv.org\/abs\/1909.11942) model (**a light [BERT](https:\/\/en.wikipedia.org\/wiki\/BERT_(language_model) model**) to perform **question answering** tasks on CORD-19 dataset.\n\n**Pros**: Currently, ALBERT outperforms most other BERT variants, including BERT itself, on the popular Q&A benchmark [SQuAD 2.0](https:\/\/rajpurkar.github.io\/SQuAD-explorer\/). As of April 9, 2020, it is ranked 9th in all Q&A models and its accuracy is only marginally lower than the top ones.\n**Cons**: The ALBERT model was not specifically trained on bio- or medical-related database, so output is still sometimes inaccurate. Fine-tuning it on SQuAD-like bio database could help.\n\nALBERT is relatively new (developed around Sep 2019), so it is difficult to find pretrained model specifically fine-tuned to Q&A, unlike BERT model. So I have went ahead and fine-tuned it with SQuAD 2.0 myself, and I simply attached the pretrained model as a Kaggle dataset. This notebook will use the pretrained model. Both pretraining and inference are done thanks to Huggingface's [Transformers](https:\/\/github.com\/huggingface\/transformers) module.","83b4b68a":"# **Subtask 2**\n\nOriginal subtask description:\n\nEfforts to embed ethics across all thematic areas, engage with novel ethical issues that arise and coordinate to minimize duplication of oversight","e7144da5":"Code for formatting and displaying results.","67f49ea0":"# **Subtask 3**\n\nOriginal subtask description:\n\nEfforts to support sustained education, access, and capacity building in the area of ethics","024d846c":"# **Subtask 5**\n\nOriginal subtask description:\n\nEfforts to develop qualitative assessment frameworks to systematically collect information related to local barriers and enablers for the uptake and adherence to public health measures for prevention and control. This includes the rapid identification of the secondary impacts of these measures. (e.g. use of surgical masks, modification of health seeking behaviors for SRH, school closures)","4976e68a":"For brevity, this notebook is focused on the scientific task. For detailed walkthrough of the code, plase refer to the [notebook](https:\/\/www.kaggle.com\/joljol\/covid-19-albert-transformer-for-q-a-on-cord-19) from which this notebook was originally forked.","13b79c56":"# **Subtask 7**\n\nOriginal subtask description:\n\nEfforts to identify the underlying drivers of fear, anxiety and stigma that fuel misinformation and rumor, particularly through social media.","99919fb6":"# **Subtask 4**\n\nOriginal subtask description:\n\nEfforts to establish a team at WHO that will be integrated within multidisciplinary research and operational platforms and that will connect with existing and expanded global networks of social sciences.","8031d0c1":"# **Subtask 6**\n\nOriginal subtask description:\n\nEfforts to identify how the burden of responding to the outbreak and implementing public health measures affects the physical and psychological health of those providing care for Covid-19 patients and identify the immediate needs that must be addressed."}}