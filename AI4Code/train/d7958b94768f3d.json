{"cell_type":{"033e1470":"code","76639cff":"code","3a33e06c":"code","fea73d93":"code","69b7cc9d":"code","618b5fd6":"code","c61ebb4e":"code","5618930a":"code","fe905464":"code","1d0e9626":"code","e2582fbc":"code","b3a37f67":"code","76731148":"code","3dec3335":"code","769b1976":"code","2a8ad975":"code","dae6a6af":"code","781afe8f":"markdown","b849acd2":"markdown","b1baa771":"markdown","dd630312":"markdown","9e4a48b6":"markdown","dbafa5bc":"markdown","1bd1c8a8":"markdown","c5105537":"markdown","417952e1":"markdown","ca79c2d5":"markdown","2eaba88f":"markdown","85aef053":"markdown","d66ee598":"markdown","1137c7cd":"markdown","ca975b20":"markdown","dac14f87":"markdown","8fa76963":"markdown","a7c5b716":"markdown","349eaf49":"markdown","f9acc5ce":"markdown","3bedb253":"markdown","4fe3eb7f":"markdown","925d5430":"markdown","0f1e3334":"markdown","3a8dc775":"markdown","372dea0b":"markdown"},"source":{"033e1470":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","76639cff":"## Importing Libraries\nimport pandas as pd\nimport numpy as np\nimport spacy\nfrom spacy import displacy\nimport matplotlib.pyplot as plt\nimport warnings\nimport os\nwarnings.filterwarnings('ignore')\n%matplotlib inline","3a33e06c":"dictOfFilenames={i : filenames[i] for i in range(0, len(filenames) )}\n","fea73d93":"dict_files=dictOfFilenames.copy()\ndict_files","69b7cc9d":"for i,filename in enumerate(filenames):\n    dictOfFilenames[i] = open(os.path.join(dirname, filename),'r').read()","618b5fd6":"dictOfFilenames[0]","c61ebb4e":"import nltk\nfrom nltk.corpus import words as english_words, stopwords\nimport re\n\n## replacing the newlines and extra spaces\ncorpus = dictOfFilenames[0].replace('\\n', ' ').replace('\\r', '').replace('  ',' ').lower()\n\n## removing everything except alphabets\ncorpus_sans_symbols = re.sub('[^a-zA-Z \\n]', '', corpus)\n\n## removing stopwords\nstop_words = set(w.lower() for w in stopwords.words())\n\ncorpus_sans_symbols_stopwords = ' '.join(filter(lambda x: x.lower() not in stop_words, corpus_sans_symbols.split()))\nprint (corpus_sans_symbols_stopwords)","5618930a":"from nltk.stem import PorterStemmer\nstemmer=nltk.PorterStemmer()\ncorpus_stemmed = ' ' .join (map(lambda str: stemmer.stem(str), corpus_sans_symbols_stopwords.split()))\nprint (corpus_stemmed)","fe905464":"# Plot top 20 frequent words\nfrom collections import Counter\nword_freq = Counter(corpus_stemmed.split(\" \"))\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\ncommon_words = [word[0] for word in word_freq.most_common(20)]\ncommon_counts = [word[1] for word in word_freq.most_common(20)]\n\n\nplt.figure(figsize=(12, 8))\n\nsns_bar = sns.barplot(x=common_words, y=common_counts)\nsns_bar.set_xticklabels(common_words, rotation=45)\nplt.title('Most Common Words in the document')\nplt.show()","1d0e9626":"import spacy\n## Spacy example \nnlp = spacy.load('en')\ndoc = nlp(dictOfFilenames[0])\nfor token in doc:\n    print(\"{0}\\t{1}\\t{2}\\t{3}\\t{4}\\t{5}\".format(\n        token.text,\n        token.idx,\n        token.lemma_,\n        token.is_punct,\n        token.pos_,\n        token.tag_\n    ))","e2582fbc":"## passing our text into spacy\ndoc = nlp(dictOfFilenames[0])\n\n## filtering stopwords, punctuations, checking for alphabets and capturing the lemmatized text\nspacy_tokens = [token.lemma_ for token in doc if token.is_stop != True \\\n                and token.is_punct != True and token.is_alpha ==True]","b3a37f67":"word_freq_spacy = Counter(spacy_tokens)\n\n# Plot top 20 frequent words\n\nsns.set_style(\"whitegrid\")\ncommon_words = [word[0] for word in word_freq_spacy.most_common(20)]\ncommon_counts = [word[1] for word in word_freq_spacy.most_common(20)]\n\n\nplt.figure(figsize=(12, 8))\n\nsns_bar = sns.barplot(x=common_words, y=common_counts)\nsns_bar.set_xticklabels(common_words, rotation=45)\nplt.title('Most Common Words in the document')\nplt.show()","76731148":"text_str = ''.join(dictOfFilenames[0].replace('\\n',' ').replace('\\t',' '))\nsentences_split = text_str.split(\".\")\nsentences_split[67]","3dec3335":"doc = nlp(text_str)\nsentence_list = [s for s in doc.sents]\nsentence_list[67]","769b1976":"spacy.displacy.render(sentence_list[67], style='dep',jupyter=True,options = {'compact':60})\npos_list = [(token, token.pos_) for token in sentence_list[67]]","2a8ad975":"text_ent_example=dictOfFilenames[0]","dae6a6af":"doc = nlp(text_ent_example)\nspacy.displacy.render(doc, style='ent',jupyter=True)","781afe8f":"**Reading the contents of the Folder**","b849acd2":"spaCy uses a statistical model to classify a broad range of entities, including **persons, organisations, dates**.","b1baa771":"### 2. Named Entity Recognition","dd630312":"# Part B: Feature Generation\/Document Representation","9e4a48b6":"Spacy operation in just a single line!","dbafa5bc":"### 2. Removing special characters and stopwords(using NLTK)","1bd1c8a8":"### 1. POS tagging and Dependency Parsing","c5105537":"### 3. Stemming and Lemmatizing(using NLTK)","417952e1":"Part-of-speech tagging is the process of assigning grammatical properties (e.g. noun, verb, adverb, adjective etc.) to words. Words that share the same POS tag tend to follow a similar syntactic structure and are useful in rule-based processes.","ca79c2d5":"### **Introducing Spacy**","2eaba88f":"**Checking the word distribution in the document**","85aef053":"**Stemming**: Stemming is a rudimentary rule-based process of stripping the suffixes (\u201cing\u201d, \u201cly\u201d, \u201ces\u201d, \u201cs\u201d etc) from a word.\n\n**Lemmatization**: Lemmatization, on the other hand, is an organized & step by step procedure of obtaining the root form of the word, it makes use of vocabulary (dictionary importance of words) and morphological analysis (word structure and grammar relations).","d66ee598":"For this exercise we will take some sample documents i,e class action complaints for violations of the securities law. The data files are already in \u2018.txt\u2019 format and thus they dont need conversion.","1137c7cd":"### Plotting top 20 words","ca975b20":"### 1. Text Extraction and Conversion","dac14f87":"## Dataset: [Donald Trump's Rallies](https:\/\/www.kaggle.com\/christianlillelund\/donald-trumps-rallies)","8fa76963":"The object \u201cnlp\u201d is used to create documents, access linguistic annotations and different nlp properties.\n\nThe document is now part of spacy.english model\u2019s class and is associated with a number of features and properties.\n\nWe would take the text for the first document and pass it to the spacy\u2019s nlp object. Now doc contains various linguistic features which can be accesses quite easily.","a7c5b716":"If we notice the above text, there are a lot of unwanted characters such as puncuations, newlines which we need to deal with before heading into further analysis.","349eaf49":"Entity recognition is the process of classifying named entities found in a text into pre-defined categories, such as persons, places, organizations, dates, etc","f9acc5ce":"As an example, we will take the above sentence and feed that into the **pos** and **dependency parser**.","3bedb253":"Spacy sentence segmentation","4fe3eb7f":"### 4. Sentence Segmentation","925d5430":"**Spacy features**\n* **Tokenization:** Segmenting text into words, punctuations marks etc.\n* **Dependency Parsing:** Assigning syntactic dependency labels, describing the relations between individual tokens, like subject or object.\n* **Lemmatization:** Assigning the base forms of words. For example, the lemma of \u201cwas\u201d is \u201cbe\u201d, and the lemma of \u201crats\u201d is \u201crat\u201d.\n* **Sentence Boundary Detection (SBD):** Finding and segmenting individual sentences.\n* **Named Entity Recognition (NER):** Labelling named \u201creal-world\u201d objects, like persons, companies or locations.\n* **Part-of-speech (POS) Tagging:** Assigning word types to tokens, like verb or noun.\n\nWe can download other language models by running a code like below in your shell or terminal","0f1e3334":"### Preprocessing in Spacy","3a8dc775":"Below, we will run the **NER** detection on a subset of the corpus from our text and also check the captured **Names** and **Organisations**\n","372dea0b":"spaCy features a fast and accurate syntactic **dependency parser**, and has a rich API for navigating the tree. The parser also powers the sentence boundary detection, and lets you iterate over base noun phrases, or \u201cchunks\u201d"}}