{"cell_type":{"fe0a0e30":"code","eb9e0055":"code","e9870c9f":"code","deb87086":"code","f9dbbd7e":"code","362f71d5":"code","a0499879":"code","69a727cf":"code","49c11725":"code","d21657b0":"code","ffed27e9":"code","b210f82a":"code","a163cd61":"code","7603f0bd":"code","616db07c":"code","1e31a76e":"code","80449e31":"code","3c46b8b4":"code","28471b97":"code","d2c89077":"code","2e5eb7f6":"code","10bbda10":"code","7da6a019":"code","e220dac3":"code","c383cbc0":"code","5ba1aaf4":"code","92732c6e":"code","832ed11c":"code","7dbf88aa":"code","7480c284":"code","965195c0":"code","9ac46990":"code","b9f5b74e":"code","382f814e":"code","996d493c":"code","8a14de09":"code","6a0a55c4":"code","5e465991":"code","5ef64508":"code","b3e20591":"code","a616396a":"code","4d1136e3":"code","ac8b062a":"code","b677031d":"code","6ea17a0f":"code","b710c4ec":"code","76991f5d":"code","a98477e5":"code","5812f12d":"code","2946c3e3":"code","078760ac":"code","11a905d0":"code","41fdcca8":"code","2bacb2e8":"code","54e7fed7":"code","97b52b35":"code","33670283":"code","926a66f4":"code","a321704a":"code","d4c85719":"code","5fe116f3":"code","8cb8cb8a":"code","d72203ce":"code","22c0d9ad":"code","fe45c1c3":"code","b3343698":"code","702fe5c9":"code","8fc348c4":"code","0881f42b":"code","d202f567":"code","55007dbb":"code","855c60c2":"code","f6e80b8d":"code","e1b9d7dc":"code","33b521d2":"code","8b29159b":"code","f043c6a7":"code","86bc3fa6":"code","d2030fa8":"code","fc594570":"code","b2e8f79b":"code","3ba74516":"code","eeb4cff6":"code","be80632c":"code","baf99fe2":"code","48d89e8b":"code","23fb41f7":"code","e2264920":"code","2f4bb33c":"code","7b9c8c48":"code","4786a68b":"code","8363e5ff":"code","8658b526":"code","c529293f":"code","43bfc460":"markdown","5a0cb282":"markdown","439d4f82":"markdown","198cab78":"markdown","985c5780":"markdown","c4727af6":"markdown","f2cb9f22":"markdown","adc9c466":"markdown","66747ef7":"markdown"},"source":{"fe0a0e30":"### Import OS \n#Import pandas as pd\n#import geopy.distance \n#from geopy.distance import vincenty\n#import seaborn as sns\n#from matplotlib import pyplot as plt\n#from mpl_toolkits.mplot3d import Axes3D : For plotting 3d Graphs \n#import numpy as np\n\n#Features added : \n#1. distance : Distance in miles \n#2. distance_in_kms\n#3. ridetype : solo, double or shared\n#4. pickup_month : month wise distribution of rides\n#5. pickup_year : year wise distribution of rides \n#6. pickup_week : Week wise distribution of rides\n#7. pickup_hour : Hourly distribution of rides\n\n#Graphs \n\n#1. Correlation Graph for distance, passenger & fare.\n#2. Bar plot displaying number for Ride Type: Solo, Double or Shared.\n#3. Pair Grid : for preferred ride type on the basis of distance, passenger & fare.\n#4. 3D Scatter Plot: displaying number of passengers & charges distributed as per the year.\n#5. 3D Scatter Plot: displaying number of passengers & charges distributed as per the month.\n#6. 3D Scatter Plot: displaying year wise charges per ride as per the hour\n#7. barh Plot: Displaying mean charges month wise. \n#8. 3D Scatter Plot: Fare Amount as per Years, Months & Weeks.\n#9. Bar Plot: Total Revenue generated from 2009 to 2015 every year.\n#10. Pie Chart: Total Revenue generated every month from 2009 to 2015.\n#11. barh Plot: Total Day wise revenue generated from 2009 to 2016 \n\n#Test Prediction Models \n#1. Decision Tree \n#2. Random Forest \n#3. Linear Regression \n#4. Linear Support Vector Regression \n#5. KNN \n#6. Gradient Boosting \n#7. XGBoost \n#8. CatBoost Regressor = RMSE\n","eb9e0055":"import os \nos.chdir(\"..\/input\")\nos.listdir()","e9870c9f":"import pandas as pd","deb87086":"df = pd.read_csv(\"train.csv\", nrows = 5000, parse_dates = [\"pickup_datetime\"]) # the whole data takes about 5 minutes\n#Limiting it to 90000 rows, loading takes less than a minute","f9dbbd7e":"#Understanding the stucture of the DF \ndf.columns  #Column names ","362f71d5":"df.shape    #Number of rows & columns ","a0499879":"df.dtypes   #TYPES OF COLUMNS ","69a727cf":"df.info()   #COMPLETE INFORMATION ABOUT THE DF","49c11725":"df.columns.values","d21657b0":"df.head()","ffed27e9":"df.tail()","b210f82a":"df.fare_amount.head()","a163cd61":"df.isnull().sum() #Takes about 1 minute\n#out of 55423855 entries only 376 is null. We can ignore these null values ","7603f0bd":"df.dtypes","616db07c":"df.describe()","1e31a76e":"df.isnull().sum()","80449e31":"#removing outliers for latitude & longitude\ndf = df.drop(((df[df['pickup_latitude']<-90])|(df[df['pickup_latitude']>90])).index, axis=0)","3c46b8b4":"#Adding distance travelled using Vincenty. \n#Installed geopy using \"pip install geopy\" in anaconda terminal\nimport geopy.distance \nfrom geopy.distance import vincenty\n\ndef pandasVincenty(df):\n    '''calculate distance (m) between two lat&long points using the Vincenty formula '''\n\n    return vincenty((df.pickup_latitude, df.pickup_longitude), (df.dropoff_latitude, df.dropoff_longitude)).km\n\n\ndf['distance_in_kms'] =  df.apply(lambda r: pandasVincenty(r), axis=1)","28471b97":"df.describe()","d2c89077":"df.head()","2e5eb7f6":"#Can do reverse geocoding using gmaps. Its paid for more than 1000 records\n#from pygeocoder import Geocoder","10bbda10":"#results = Geocoder.reverse_geocode(df['pickup_latitude'][0], df['pickup_longitude'][0])","7da6a019":"df.distance_in_kms.describe()","e220dac3":"df.distance_in_kms.describe()","c383cbc0":"df.groupby('passenger_count')['fare_amount', 'distance_in_kms'].mean()","5ba1aaf4":"#Fare per Kms\ndf.fare_amount.sum()\/df.distance_in_kms.sum()","92732c6e":"df.head()","832ed11c":"#Categorising ride_type on the basis of number of passengers into : none, solo, share\n\ndf['ridetype'] = pd.cut(df.passenger_count, [0,1,2,6], labels=[\"solo\",\"double\",\"shared\"])\n","7dbf88aa":"df.dtypes","7480c284":"df.head(10)","965195c0":"#Formation of new table with columns: fare_amount, passenger_count, ridetype, distance\n\nn_df = df[['fare_amount','passenger_count','ridetype','distance_in_kms']].copy()","9ac46990":"n_df.head()","b9f5b74e":"corr = n_df.corr()","382f814e":"import seaborn as sns\nfrom matplotlib import pyplot as plt\nplt.figure(figsize = (10,10))\nsns.heatmap(corr, annot = True, annot_kws = {'size':15})","996d493c":"plt.figure(figsize = (10,10))\nsns.countplot(x='ridetype', hue = 'passenger_count', data = n_df)","8a14de09":"g = sns.PairGrid(n_df, hue=\"ridetype\")\ng = g.map_diag(plt.hist)\ng = g.map_offdiag(plt.scatter)\ng = g.add_legend()","6a0a55c4":"#Adding month columns \ndf['pickup_month'] = df['pickup_datetime'].dt.month","5e465991":"df.head()","5ef64508":"#Adding Year Column \ndf['pickup_year'] = df['pickup_datetime'].dt.year","b3e20591":"df.head()","a616396a":"#Adding day column\ndf['pickup_day'] = df['pickup_datetime'].dt.weekday_name","4d1136e3":"df.head()","ac8b062a":"#Adding week column\ndf['pickup_week'] = df['pickup_datetime'].dt.week","b677031d":"df.head()","6ea17a0f":"#Adding Hour Column\ndf['pickup_hour'] = df['pickup_datetime'].dt.hour","b710c4ec":"df.head()","76991f5d":"#Relation between Passenger count, Fare & Year\nfrom mpl_toolkits.mplot3d import Axes3D\n\nthreedee = plt.figure(figsize = (15,10)).gca(projection  = '3d')\nthreedee.scatter(df.index, df['fare_amount'], df['passenger_count'], c = df['pickup_year'])\nthreedee.set_xlabel('Index')\nthreedee.set_ylabel('Charges Per Ride')\nthreedee.set_zlabel('Number Of Passengers')\nplt.show()","a98477e5":"df.head()","5812f12d":"threedee = plt.figure(figsize = (15,10)).gca(projection  = '3d')\nthreedee.scatter(df.index, df['fare_amount'], df['pickup_month'], c =df['pickup_month'])\nthreedee.set_xlabel('Index')\nthreedee.set_ylabel('Charges Per Ride')\nthreedee.set_zlabel('Month')\nplt.show()","2946c3e3":"threedee = plt.figure(figsize = (15,10)).gca(projection  = '3d')\nthreedee.scatter(df['pickup_hour'], df['fare_amount'], df['pickup_year'], c=df['pickup_hour'])\nthreedee.set_xlabel('Pickup Hour')\nthreedee.set_ylabel('Charges Per Ride')\nthreedee.set_zlabel('Years')\nplt.show()","078760ac":"#Mean fare monthwiswe \nplt.figure(figsize = (12,10))\n#plt.barh(df['pickup_month'], df['fare_amount'])\ndf.groupby('pickup_month')['fare_amount'].mean().plot(kind = 'barh')\nplt.xlabel('Mean Fare Amount')\nplt.ylabel('Month wise distribution from 2009 to 2015')","11a905d0":"threedee = plt.figure(figsize = (15,10)).gca(projection  = '3d')\nthreedee.scatter(df['pickup_year'], df['pickup_month'], df['pickup_week'], c = df['pickup_hour'], marker ='+')\nthreedee.set_xlabel('Year')\nthreedee.set_ylabel('Month')\nthreedee.set_zlabel('Week')\nplt.show()","41fdcca8":"#group by year \nplt.figure(figsize = (12,10))\ndf.groupby(['pickup_year'])['fare_amount'].sum().plot(kind = 'bar')\nplt.xlabel('Years from 2009 to 2015')\nplt.ylabel('Total Revenue Generated Per Year')\n","2bacb2e8":"#group by month \nplt.figure(figsize = (12,10))\ndf.groupby(['pickup_month'])['fare_amount'].sum().plot(kind = 'pie')\nplt.xlabel('Pickup Every Month')\nplt.ylabel('Revenue Generated Every Month Over the Years')","54e7fed7":"#Pickup Revenue Generated Day wise to know which day of the week has generaed maximum revenue over the years \nplt.figure(figsize = (12,10))\ndf.groupby(['pickup_day'])['fare_amount'].sum().plot(kind = 'barh')\nplt.xlabel('Revenue Generated')\nplt.ylabel('Day wise distribution of total revenue over the years')","97b52b35":"df.head()","33670283":"df.dtypes","926a66f4":"#one-hot encode the data using pandas get_dummies\n\n#df = pd.get_dummies(df)","a321704a":"df.head()","d4c85719":"#Saving the features to a list  \n#df_list = list(df.columns)\ndf.dtypes","5fe116f3":"#Coverting the df to to an array\n#df = np.array(df)\n\n#Creating Train & Test Data \n\nfactors = df[['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude','passenger_count']]\n\nresponse = df['fare_amount']","8cb8cb8a":"from sklearn.model_selection import train_test_split\n\ntestSize = 0.2\n\ntrainFactors, testFactors, trainResponse, testResponse = train_test_split(factors, response, test_size = testSize, random_state = 42)","d72203ce":"from sklearn import tree\ndtr_model = tree.DecisionTreeRegressor(criterion = 'mse')","22c0d9ad":"#Fitting of Decision Tree \n\ndtr_model.fit(trainFactors, trainResponse)","fe45c1c3":"#DTR Score \ndtrscore = dtr_model.score(trainFactors, trainResponse)\ndtrscore","b3343698":"#make predictions \n\ndtr_prediction = dtr_model.predict(testFactors)\ndtr_prediction[0:10]","702fe5c9":"from sklearn.ensemble import RandomForestRegressor \n\nrf_model = RandomForestRegressor(n_estimators=10, min_samples_split = 2, verbose = True, random_state = 82)","8fc348c4":"#Fitting the Random Forest Model \nrf_model.fit(trainFactors, trainResponse)","0881f42b":"#Score of Random Forest \nrfscore = rf_model.score(trainFactors, trainResponse)\nrfscore","d202f567":"#Random Forest Prediction \nrf_prediction = rf_model.predict(testFactors)\nrf_prediction[0:10]","55007dbb":"from sklearn.linear_model import LinearRegression\nlr_model = LinearRegression()\n\nlr_model.fit(trainFactors, trainResponse)\nlrscore = lr_model.score(trainFactors, trainResponse)\nlrscore","855c60c2":"lr_prediction = lr_model.predict(testFactors)\nlr_prediction[0:10]","f6e80b8d":"from sklearn.svm import LinearSVR\n\nlsvr_model = LinearSVR(random_state = 42)\nlsvr_model.fit(trainFactors, trainResponse)\nlsvrscore = lsvr_model.score(trainFactors, trainResponse)\nprint(\"Linear Support Vector Regression Score is : \", lsvrscore)","e1b9d7dc":"lsvr_prediction = lsvr_model.predict(testFactors)\nlsvr_prediction[0:10]","33b521d2":"from sklearn.neighbors import KNeighborsRegressor\n\nknr_model = KNeighborsRegressor(n_neighbors = 6)\nknr_model.fit(trainFactors, trainResponse)\nknrscore = knr_model.score(trainFactors, trainResponse)\nprint(\"K-nearest Neighbors Regression Score : \",knrscore)\n","8b29159b":"knr_prediction = knr_model.predict(testFactors)\nknr_prediction[0:10]","f043c6a7":"from sklearn.ensemble import GradientBoostingRegressor\n\ngbr_model = GradientBoostingRegressor(n_estimators = 100, learning_rate=1.0, max_depth = 1, random_state = 42)\ngbr_model.fit(trainFactors, trainResponse)\ngbrscore = gbr_model.score(trainFactors, trainResponse)\ngbrscore","86bc3fa6":"gbr_prediction = gbr_model.predict(testFactors)\ngbr_prediction[0:10]","d2030fa8":"from xgboost import XGBRegressor\n\nxgb_model = XGBRegressor(depth = 16, learning_rate = 0.5, loss_function = 'RMSE')\nxgb_model.fit(trainFactors, trainResponse)\nxgbscore = xgb_model.score(trainFactors, trainResponse)\nxgbscore","fc594570":"xgb_prediction = xgb_model.predict(testFactors)\nxgb_prediction[0:10]","b2e8f79b":"#spot Check \n\nspotCheck = 410\nprint(\"Decision Tree Regression: \\n Predicted Fare:  {}  \\n   Actual Fare:  {} \\n Decision Tree Regression Score :  \".format(dtr_prediction[spotCheck], testResponse[spotCheck]),dtrscore)\nprint(\"\\nRandom Forest Regression : \\n Predicted Fare: {} \\n Actual Fare: {} \\n Random Forest Score : \".format(rf_prediction[spotCheck], testResponse[spotCheck]),rfscore)\nprint(\"\\nLinear Regression  : \\n Predicted Fare: {} \\n Actual Fare : {}\\n Linear Regression Score :  \".format(lr_prediction[spotCheck], testResponse[spotCheck]),lrscore)\nprint(\"\\nLinear Support Vector Regression: \\n Predicted Fare : {}  \\n Actual Fare : {} \\n SVR Score : \".format(lsvr_prediction[spotCheck], testResponse[spotCheck]), lsvrscore)\nprint(\"\\nK Nearest Neighnors Regression : \\n Predicted Fare : {} \\n Actual Fare : {} \\n KNN Score : \".format(knr_prediction[spotCheck], testResponse[spotCheck]), knrscore)\nprint(\"\\nGradient Boosting Regression : \\n Predicted Fare : {} \\n Actual Fare : {} \\n Gradient Boosting Score : \".format(gbr_prediction[spotCheck], testResponse[spotCheck]), gbrscore)\nprint(\"\\nXGBoost Regression : \\n Predicted Fare : {}  \\n Actual Fare : {}  \\n XGBoost Score :  \".format(xgb_prediction[spotCheck], testResponse[spotCheck]), xgbscore)","3ba74516":"#import catboost as ctb\n#cbr_model = ctb.CatBoostRegressor(depth = 16, learning_rate = 0.5, loss_function = 'RMSE')","eeb4cff6":"#cbr_model.fit(trainFactors, trainResponse)","be80632c":"#cbr_score = cbr_model.score(trainFactors, trainResponse)\n#cbr_score","baf99fe2":"#cbr_prediction = cbr_model.predict(testFactors)\n#cbr_prediction[0:10]","48d89e8b":"os.listdir()","23fb41f7":"test_df = pd.read_csv(\"test.csv\")","e2264920":"test_df.shape","2f4bb33c":"test_df.info()","7b9c8c48":"#Setting the Best Model \nbestModel = xgb_model","4786a68b":"predictFactors = test_df[['pickup_longitude','pickup_latitude', 'dropoff_longitude','dropoff_latitude','passenger_count']]\npredictFare = bestModel.predict(predictFactors)","8363e5ff":"predictedResults = pd.DataFrame(predictFare)","8658b526":"#predictedResults.to_csv('final_Predictions.csv')","c529293f":"predictedResults.head(10)","43bfc460":"# 1.Decision Tree ","5a0cb282":"# 2. Random Forest ","439d4f82":"# Using test.csv","198cab78":"# 5. KNN \n\n","985c5780":"# 4. Linear Support Vector Regression ","c4727af6":"# 6. Gradient Boosting","f2cb9f22":"# 7. XGBoost ","adc9c466":"# 3. Linear Regression ","66747ef7":"# Using Cat Boost Regressor with loss_function = RMSE"}}