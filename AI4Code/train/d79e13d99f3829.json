{"cell_type":{"58f713e5":"code","3a7aff76":"code","c961abba":"code","7157d6e5":"code","18e9932d":"code","c66b47d4":"code","28cc80ce":"code","a7207a94":"code","b79377a0":"markdown","5b19622b":"markdown","8dbf91be":"markdown","14324548":"markdown","8519689b":"markdown","249d2b49":"markdown","7eab1efb":"markdown","aa2b2ac0":"markdown"},"source":{"58f713e5":"import os\nimport json\n\nimport numpy as np\nimport pandas as pd\nimport keras\nfrom keras import layers\nfrom keras.applications import DenseNet121\nfrom keras.callbacks import Callback, ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.models import Sequential\nfrom keras.utils.vis_utils import plot_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, f1_score, precision_score, recall_score","3a7aff76":"# The data, split between train and test sets:\nx_train = np.load('..\/input\/reducing-image-sizes-to-32x32\/X_train.npy')\nx_test = np.load('..\/input\/reducing-image-sizes-to-32x32\/X_test.npy')\ny_train = np.load('..\/input\/reducing-image-sizes-to-32x32\/y_train.npy')\n\nprint('x_train shape:', x_train.shape)\nprint(x_train.shape[0], 'train samples')\nprint(x_test.shape[0], 'test samples')\n\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train \/= 255.\nx_test \/= 255.","c961abba":"class Metrics(Callback):\n    def on_train_begin(self, logs={}):\n        self.val_f1s = []\n        self.val_recalls = []\n        self.val_precisions = []\n\n    def on_epoch_end(self, epoch, logs={}):\n        X_val, y_val = self.validation_data[:2]\n        y_pred = self.model.predict(X_val)\n\n        y_pred_cat = keras.utils.to_categorical(\n            y_pred.argmax(axis=1),\n            num_classes=14\n        )\n\n        _val_f1 = f1_score(y_val, y_pred_cat, average='macro')\n        _val_recall = recall_score(y_val, y_pred_cat, average='macro')\n        _val_precision = precision_score(y_val, y_pred_cat, average='macro')\n\n        self.val_f1s.append(_val_f1)\n        self.val_recalls.append(_val_recall)\n        self.val_precisions.append(_val_precision)\n\n        print((f\"val_f1: {_val_f1:.4f}\"\n               f\" \u2014 val_precision: {_val_precision:.4f}\"\n               f\" \u2014 val_recall: {_val_recall:.4f}\"))\n\n        return\n\nf1_metrics = Metrics()","7157d6e5":"densenet = DenseNet121(\n    weights='..\/input\/densenet-keras\/DenseNet-BC-121-32-no-top.h5',\n    include_top=False,\n    input_shape=(32,32,3)\n)\n\nmodel = Sequential()\nmodel.add(densenet)\nmodel.add(layers.GlobalAveragePooling2D())\nmodel.add(Dropout(0.5))\nmodel.add(layers.Dense(14, activation='softmax'))\nplot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)\nmodel.summary()","18e9932d":"checkpoint = ModelCheckpoint(\n    'model.h5', \n    monitor='val_acc', \n    verbose=1, \n    save_best_only=True, \n    save_weights_only=False,\n    mode='auto'\n)","c66b47d4":"model.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n\nhistory = model.fit(\n    x=x_train,\n    y=y_train,\n    batch_size=256,\n    epochs=30,\n    callbacks=[checkpoint, f1_metrics],\n    validation_split=0.2\n)","28cc80ce":"with open('history.json', 'w') as f:\n    json.dump(history.history, f)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df['val_f1'] = f1_metrics.val_f1s\nhistory_df['val_precision'] = f1_metrics.val_precisions\nhistory_df['val_recall'] = f1_metrics.val_recalls\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['acc', 'val_acc']].plot()\nhistory_df[['val_f1', 'val_precision', 'val_recall']].plot()","a7207a94":"model.load_weights('model.h5')\ny_test = model.predict(x_test)\n\nsubmission_df = pd.read_csv('..\/input\/iwildcam-2019-fgvc6\/sample_submission.csv')\nsubmission_df['Predicted'] = y_test.argmax(axis=1)\n\nprint(submission_df.shape)\nsubmission_df.head()\n\nsubmission_df.to_csv('submission.csv',index=False)","b79377a0":"## Loading the 32x32 dataset","5b19622b":"# Compile The Model And Train","8dbf91be":"# Here we import all the neccesary libraries","14324548":"## Evaluation","8519689b":"## Create Callback for F1 score","249d2b49":"# Callbacks","7eab1efb":"## Submission","aa2b2ac0":"## Create the Model"}}