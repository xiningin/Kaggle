{"cell_type":{"0027d61c":"code","c2c01496":"code","8bfb4077":"code","a9f896e5":"code","0c458de1":"code","c6e0f6e3":"code","210366a3":"code","bbf72bf7":"code","cc318f96":"code","12660822":"code","ce693aae":"code","bf3a3620":"code","26a68ffa":"code","07207184":"code","62f40b9e":"code","f8964181":"code","2b301511":"code","5b4775c0":"code","de420dd1":"code","407587ab":"code","b3ee4531":"code","73e08b6d":"code","ba4dce7e":"code","7d7fae4c":"code","fd112e5c":"code","9a420399":"code","5bcfc7cc":"code","eec00846":"code","43c0c2eb":"code","71d6b843":"code","95ee5e5b":"code","81c271e6":"code","6398ca10":"code","72e56d8b":"code","62f7d4ea":"code","6ee9c708":"code","0df98bad":"code","f1dc8087":"code","0c584ad0":"code","47488a25":"code","cfe7b4cd":"code","c7004051":"code","ab0a5985":"code","52834c2c":"code","b7b941d8":"code","931e6d9b":"code","971183b9":"code","09696745":"code","136ba7b9":"code","ec96d6c2":"code","3692f308":"code","4c319ed9":"code","68063736":"code","0436b5ca":"code","5f6eaaad":"code","332b7388":"code","dcd847f1":"markdown","ec954c1b":"markdown"},"source":{"0027d61c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c2c01496":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf.head()","8bfb4077":"df.info()","a9f896e5":"from copy import deepcopy","0c458de1":"df_raw = df.copy(deep = True)","c6e0f6e3":"df_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndf_test.head()","210366a3":"df.isnull().sum()","bbf72bf7":"df.describe()","cc318f96":"df = df.drop(['PassengerId', 'Ticket', 'Cabin'], axis = 1)","12660822":"df.isnull().sum()","ce693aae":"df.Age.fillna(df.Age.median(), inplace = True)","bf3a3620":"df.Fare.fillna(df.Fare.median(), inplace = True)","26a68ffa":"df.isnull().sum()","07207184":"df.head()","62f40b9e":"df.Embarked.value_counts()","f8964181":"df.Embarked.fillna(df.Embarked.mode()[0], inplace = True)\ndf.isnull().sum()","2b301511":"df['FamilySize'] = df.SibSp + df.Parch\n\ndf['IsAlone'] = 1 \ndf['IsAlone'].loc[df['FamilySize'] > 1] = 0 \n\ndf['Title'] = df['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]\n\ndf['AgeBin'] = pd.cut(df['Age'].astype(int), 5)\ndf['FareBin'] = pd.qcut(df['Fare'], 4)\n\ndf.head()","5b4775c0":"df.Title.value_counts()","de420dd1":"title_names = (df.Title.value_counts() < 10)\n\ndf['Title'] = df['Title'].apply(lambda x: 'Other' if title_names.loc[x] == True else x)\nprint(df['Title'].value_counts())","407587ab":"df.drop('Name', axis = 1, inplace= True)","b3ee4531":"df.info()","73e08b6d":"df.head()","ba4dce7e":"from sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn import feature_selection\nfrom sklearn import model_selection\nfrom sklearn import metrics\n\nfrom sklearn import svm","7d7fae4c":"target = ['Survived']","fd112e5c":"label = LabelEncoder()\ndf['Sex'] = label.fit_transform(df['Sex'])\ndf['Embarked'] = label.fit_transform(df['Embarked'])\ndf['Title'] = label.fit_transform(df['Title'])\ndf['Age'] = label.fit_transform(df['AgeBin'])\ndf['Fare'] = label.fit_transform(df['FareBin'])\n\ndf.head()","9a420399":"df.drop(['FareBin', 'AgeBin'], axis = 1, inplace = True)","5bcfc7cc":"df.head()","eec00846":"columns_train = [col for col in df.columns.tolist() if col not in target]\ncolumns_train","43c0c2eb":"df = pd.get_dummies(df, columns = columns_train)\ndf.head()","71d6b843":"label = df[\"Survived\"]\ntrain = df.drop(labels = [\"Survived\"], axis = 1)","95ee5e5b":"X_train, X_test, y_train, y_test = model_selection.train_test_split(train, label, test_size = 0.20, random_state = 13)","81c271e6":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","6398ca10":"from sklearn import svm\n\nclf = svm.SVC(kernel='linear') # Linear Kernel\n\nclf.fit(X_train, y_train)\n\ny_pred = clf.predict(X_test)","72e56d8b":"print(\"Accuracy: \", metrics.accuracy_score(y_test, y_pred))","62f7d4ea":"kfold = model_selection.StratifiedKFold(n_splits=10)\n\n\nSVMC = svm.SVC(probability=True)\nsvc_param_grid = {'kernel': ['linear', 'rbf'], \n                  'gamma': [ 0.001, 0.01, 0.1, 1],\n                  'C': [1, 10, 50, 100,200,300, 1000]}\n\ngsSVMC = model_selection.GridSearchCV(SVMC, param_grid = svc_param_grid, cv = kfold, scoring=\"accuracy\", n_jobs= 2, verbose = 4)\n\ngsSVMC.fit(X_train, y_train)\n\nSVMC_best = gsSVMC.best_estimator_\n\n# Best score\ngsSVMC.best_score_","6ee9c708":"# clean and engineer test set\n\ndf_test = df_test.drop(['PassengerId', 'Ticket', 'Cabin'], axis = 1)\ndf_test.Age.fillna(df_test.Age.median(), inplace = True)\ndf_test.Fare.fillna(df_test.Fare.median(), inplace = True)\ndf_test.Embarked.fillna(df_test.Embarked.mode()[0], inplace = True)\n\ndf_test['FamilySize'] = df_test.SibSp + df_test.Parch\n\ndf_test['IsAlone'] = 1 \ndf_test['IsAlone'].loc[df_test['FamilySize'] > 1] = 0 \n\ndf_test['Title'] = df_test['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]\n\ndf_test['AgeBin'] = pd.cut(df_test['Age'].astype(int), 5)\ndf_test['FareBin'] = pd.qcut(df_test['Fare'], 4)\n\ndf_test.head()","0df98bad":"title_names = (df_test.Title.value_counts() < 10)\n\ndf_test['Title'] = df_test['Title'].apply(lambda x: 'Other' if title_names.loc[x] == True else x)\nprint(df_test['Title'].value_counts())","f1dc8087":"df_test.drop('Name', axis = 1, inplace= True)\n\n\nlabel = LabelEncoder()\ndf_test['Sex'] = label.fit_transform(df_test['Sex'])\ndf_test['Embarked'] = label.fit_transform(df_test['Embarked'])\ndf_test['Title'] = label.fit_transform(df_test['Title'])\ndf_test['Age'] = label.fit_transform(df_test['AgeBin'])\ndf_test['Fare'] = label.fit_transform(df_test['FareBin'])\n\ndf_test.head()","0c584ad0":"df_test.drop(['FareBin', 'AgeBin'], axis = 1, inplace = True)\ndf_test = pd.get_dummies(df_test, columns = columns_train)\n\ndf_test.head()","47488a25":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\nIDtest = df_test[\"PassengerId\"]","cfe7b4cd":"data =  pd.concat(objs = [df, df_test], axis = 0).reset_index(drop = True)","c7004051":"data.info()","ab0a5985":"target = ['Survived']","52834c2c":"data = data.drop(['PassengerId', 'Ticket', 'Cabin'], axis = 1)\ndata.Age.fillna(data.Age.median(), inplace = True)\ndata.Fare.fillna(data.Fare.median(), inplace = True)\ndata.Embarked.fillna(data.Embarked.mode()[0], inplace = True)\n\ndata['FamilySize'] = data.SibSp + data.Parch\n\ndata['IsAlone'] = 1 \ndata['IsAlone'].loc[data['FamilySize'] > 1] = 0 \n\ndata['Title'] = data['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]\ntitle_names = (data.Title.value_counts() < 10)\ndata['Title'] = data['Title'].apply(lambda x: 'Other' if title_names.loc[x] == True else x)    \ndata.drop('Name', axis = 1, inplace= True)\n\ndata['AgeBin'] = pd.cut(data['Age'].astype(int), 5)\ndata['FareBin'] = pd.qcut(data['Fare'], 4)\n\nlabel = LabelEncoder()\ndata['Sex'] = label.fit_transform(data['Sex'])\ndata['Embarked'] = label.fit_transform(data['Embarked'])\ndata['Title'] = label.fit_transform(data['Title'])\ndata['Age'] = label.fit_transform(data['AgeBin'])\ndata['Fare'] = label.fit_transform(data['FareBin'])\n\n\ndata.drop(['FareBin', 'AgeBin'], axis = 1, inplace = True)\n\ncolumns_train = [col for col in data.columns.tolist() if col not in target]\ndata = pd.get_dummies(data, columns = columns_train)","b7b941d8":"# to train and validate\ntrain_len = len(df)\ntrain = data[:train_len]\n\n\n# to submit \ntest = data[train_len:]\ntest.drop(labels=[\"Survived\"],axis = 1,inplace=True)","931e6d9b":"train.shape","971183b9":"test.shape","09696745":"train[\"Survived\"] = train[\"Survived\"].astype(int)\n#train.info()","136ba7b9":"# y_train = train[\"Survived\"]\n# X_train = train.drop(labels = [\"Survived\"], axis = 1)\ncolumns_train = [col for col in data.columns.tolist() if col not in target]\nlabel = train['Survived']\ntrain = train[columns_train]\n\nlabel.shape\ntrain.shape","ec96d6c2":"X_train, X_test, y_train, y_test = model_selection.train_test_split(train, label, test_size = 0.20, random_state = 13)","3692f308":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","4c319ed9":"clf = svm.SVC(kernel='linear') # Linear Kernel\n\nclf.fit(X_train, y_train)\n\ny_pred = clf.predict(X_test)\n\nprint(\"Accuracy: \", metrics.accuracy_score(y_test, y_pred))","68063736":"test_Survived = pd.Series(clf.predict(test), name=\"Survived\")","0436b5ca":"results = pd.concat([IDtest, test_Survived], axis=1)","5f6eaaad":"results.shape","332b7388":"results.to_csv(\"submission.csv\",index = False)","dcd847f1":"# Cleaning, Feature Engineering and encoding for both Test and Train Data","ec954c1b":"# Modelling"}}