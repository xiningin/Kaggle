{"cell_type":{"d7d81484":"code","4e2dad27":"code","f8392296":"code","b66b7ad2":"code","99ea7df8":"code","4e8a11cf":"code","f435dcf7":"code","1bbba1e0":"code","c23d8e5c":"code","25e0b5dd":"code","baa5cb22":"code","342a7036":"code","e9d78b34":"code","85c732df":"code","2e9a7877":"code","275ae24b":"code","64918b6d":"code","fd032101":"code","d1ded689":"code","c8b694ff":"code","04792374":"code","05416803":"code","721a3f24":"code","7a9b3653":"code","01667b76":"code","dfee51bb":"code","5facb3ef":"code","e8d2bace":"code","b95e45ad":"code","4f3e3455":"code","01db574e":"code","719beaf5":"code","74a8cdc4":"code","1f20f41a":"code","43a26ed8":"code","561a7949":"code","6e5003d6":"code","eb79bd8b":"code","f3495059":"code","f55b9747":"code","5f4bf911":"code","254f9861":"code","f54c0501":"code","9c4a1090":"code","cb0944af":"code","d05005ba":"code","e2fbf7ad":"code","02805757":"code","600c101f":"code","e37c81f1":"code","9eb3ccb9":"code","1f9623ba":"code","824a1286":"code","d0b61b72":"code","263ec1e2":"code","b5ce464b":"code","aa997dbe":"code","1100a11f":"code","e94a51e6":"code","1d9fc2b1":"code","cb31758d":"code","0a6bd6d7":"code","cfd2ece0":"code","7b2b0c2f":"code","28937451":"code","baa42a5c":"code","3d990207":"code","74cb79f6":"code","adfe2cf0":"markdown","46a78271":"markdown","0e37fc18":"markdown","17349e79":"markdown","c99973ea":"markdown","48a08102":"markdown","bdf94e19":"markdown","42e0107d":"markdown","80217854":"markdown","c05f2af0":"markdown","35791e72":"markdown","2774862c":"markdown","d2a881e1":"markdown","be252b4a":"markdown","e98e37ad":"markdown","5f76126b":"markdown","385d05a0":"markdown","fe6c0282":"markdown","731b0df1":"markdown","4fb9cb76":"markdown","8b7d7161":"markdown","6e84e6f1":"markdown","4e97bfef":"markdown","7f735370":"markdown","2f14b613":"markdown","408122d3":"markdown"},"source":{"d7d81484":"# numpy library must be imported at the begining of code\nimport numpy as np","4e2dad27":"# A Python list is a collection of elements\n# This list can contain elements from different type of values\nmy_list = [1, 2, 3, 4, 5]\nprint(my_list)\nprint(type(my_list))","f8392296":"# The NumPy array type is a collection of elements of a unique type of values\n# type() function returns the type of a given variable\n# dtype returns the type of the elements of a given array\nmy_array = np.array([1, 2, 3, 4, 5])\nprint(my_array)\nprint(type(my_array))  # type of 'my_array' variable\nprint(my_array.dtype)  # tyep of the elements of the array 'my_array'","b66b7ad2":"# If one of the elements is different, the type of all elements will be adapted\n# in order to be compatible\nmy_array = np.array([1, 2, 3, 4, 5, 3.14])\nprint(my_array)\nprint(my_array.dtype)\nmy_array = np.array([1, 2, 3, 4, 5, 3.14, '9'])\nprint(my_array)\nprint(my_array.dtype)","99ea7df8":"# ndim property returns the number of dimensions of a given array\n# shape property returns the shape of a given array\n# size property returns the number of values from a given array\n# len function returns then number of rows from a given array\nmy_array = np.array([1, 2, 3, 4, 5])\nprint(my_array.ndim) # 1 dimension\nprint(my_array.shape) # (5,) = five rows, zero columns\nprint(my_array.size)  # 5 elements\nprint(len(my_array))  # 5 rows","4e8a11cf":"# Same operations with a two dimensional array\nmy_array = np.array([[1, 2, 3, 4, 5],[6, 7, 8, 9, 10]])\nprint(my_array.ndim) # 2 dimensions\nprint(my_array.shape) # (2, 5) = two rows, five columns\nprint(my_array.size)  # 10 elements\nprint(len(my_array))  # 2 rows","f435dcf7":"# We can reshape an array with the reshape() function\n# The new dimension must be compatible with the current array\n# It means, the number of total elements must be the same\na = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nprint(a)\nprint(a.shape)\n\nb = a.reshape(2, 5)  # 2 rows, 5 columns\nprint(b)\nprint(b.shape)","1bbba1e0":"# Transposition is the capacity of \"rotate\" the array towards right\n# The colummns are converted to rows, and rows are converted to columns\n# Transposition is achieved thanks to T property or transpose() function\nc = b.T\nprint(c)\nprint(c.shape)","c23d8e5c":"d = np.transpose(np.array([[1,2,3], [4,5,6], [7,8,9], [10,11,12]]))\nprint(d)\nprint(d.shape)","25e0b5dd":"# Making an array filled with zeros\n# Function zeros((<rows>, <cols>))\nprint('zeros: ', np.zeros((2, 3)))","baa5cb22":"# Making an array filled with ones\n# Function ones((<rows>, <cols>))\nprint('ones: ', np.ones((6, 3)))","342a7036":"# Making an array filled with a given value\n# Function full((<rows>, <cols>), value)\nprint('full: ', np.full((3, 2), 10))","e9d78b34":"# Making an array filled with random numbers between 0.0 and 0.99999999...\n# Function random.random((<rows>, <cols>))\nprint('random: ', np.random.random((4, 2)))","85c732df":"# Making an array filled with random integer numbers between a selected range\n# Function random.randint(<start>, <end>, (<rows>, <cols>))\nprint('randint: ', np.random.randint(10, 40, (5, 3)))","2e9a7877":"# Making an array filled with a given range\n# Function arange(<start>, <end>, <step>)\nprint('arange: ', np.arange(10, 101, 10))","275ae24b":"# Get a given row\n# <array>[<row>]\na = np.array([[1,2,3], [4,5,6], [7,8,9]])\nprint(a[0])  # [1,2,3]","64918b6d":"# Get the value of a give cell\n# <array>[<row>][<col>]\n# <array>[<row>, <col>]\nprint(a[1, 2]) # 6\nprint(a[2, 1]) # 8","fd032101":"# Get a given column\n# <array>[:, <col>]\nprint(a[:,1]) # col 1 [2, 5, 8]","d1ded689":"# You can refer with inverse order, using the negative sign\nprint(a[-1, -1]) # 9 (last row, last column)","c8b694ff":"# You can select several columns, using this syntax\n# <array>[:, <start>:<end>:<step>]\na = np.array([range(1,7), range(7,13), range(13,19), range(19,25), range(25,31)])\nprint(a)\nprint(a[:, 1:3:1])  # Cols 1 and 2\nprint(a[:, 0:6:2])  # Cols 0, 2 and 4","04792374":"# You can specify the number of columns to extract, using a list\nprint(a[:, [1, 2, 3]])  # All rows, columns number 1, 2, and 3","05416803":"# You can specify the number of rows to extract, using a list\nprint(a[[2, 3, 4], ])  # Rows number 2, 3, and 4, all columns","721a3f24":"# Boolean indenxation\n# <array> <contional_op> <valor>\na = np.array([range(1,5), range(5,9), range(9,13), range(13,17)])\nprint(a)\nprint('---')\nprint(a > 10)","7a9b3653":"# funtion where() replaces a value in a boolean indexation if True of False\n# where(<condition>, <value_True>, <value_False>)\nprint(np.where(a > 10, a, 0))  # if True then original value, if not replaces with 0","01667b76":"# The logical 'and' operator can be applied with logical_and() function\n# logical_and(<condition1>, <condition2>)\nprint(np.logical_and(a>4, a<12))\nprint('---')\nprint(np.where(np.logical_and(a>4, a<12), a, 0))","dfee51bb":"# We make 3 arrays, each of one represents a column of the collection\nnames = np.array([\"Rafael\", \"Eduardo\", \"Lucia\", \"Cristina\", \"Alba\"])\nhobbies = np.array([\"Music\", \"Music\", \"Painting\", \"Sport\", \"Music\"])\nages = np.array([33, 36, 35, 18, 18])\n\nprint('ages >= 30', ages >= 30)\nprint('hobbies == \"Music\"', hobbies == 'Music')\nprint('---')\n\n# We can use the condition as indexation. The result will be a filter over results with True values\nprint('Names with age >= 30', names[ages >= 30])\nprint('---')\nprint('Names with ager >= 30 and like Music', names[(hobbies == 'Music') & (ages >= 30)])","5facb3ef":"# Basic math operations between arrays\n#    <array1> + <array2>\n#    <array1> - <array2>\n#    <array1> * <array2>\n#    <array1> \/ <array2>\n#    <array1> % <array2>\n#    <array1> ** <array2>\n# \n# These operations can be executed over two or more arrays\n#\n# The implied arrays must have the same shape (dimensionality)\n#\n# The precedences and rules are the same with Python basic math operations\n#    1) Parentheis (from deepest to most external)\n#    2) Exponentation (**)\n#    3) Division and multiplication (\/ and *)\n#    4) Addition and substration (+ and -)\n#    5) From left to right at the same level\na = np.array([[1,2], [5,6]])\nb = np.array([[3,1], [2,3]])\n\nprint('a + b = ', a + b)\nprint('---')\nprint('a - b = ', a - b)\nprint('---')\nprint('a * b = ', a * b)\nprint('---')\nprint('a \/ b = ', a \/ b)\nprint('---')\nprint('a % b = ', a % b)\nprint('---')\nprint('a ** b = ', a ** b)\nprint('---')","e8d2bace":"# You can also calculate the pow using the pow() function\nprint('pow(a,b) = ', pow(a,b))\nprint('---')\nprint('a ** b = ', a ** b)\nprint('---')","b95e45ad":"a = np.array([[1,2,3], [2,4,6], [8,6,9]])\nb = np.array([[2,6,5]])  # Same number of columns\nc = np.array([[3], [1], [5]])  # Same number of rows\n\nprint('a + b = ', a + b)\nprint('---')\nprint('a + c = ', a + c)","4f3e3455":"# If you execute a simple operation between the array and a number\n# the operations will be executed value per value with the number\n# Example: duplicate all the values of the array\nprint('a * 2 = ', a * 2)","01db574e":"# Sum all elements of the array\na=np.array([[1,2,3],[4,5,6],[7,8,9]])\nprint('sum():', a.sum())   # 45","719beaf5":"# Sum elements by column\nprint(\"sum(axis=0):\", a.sum(axis=0))","74a8cdc4":"# Sum elements by row\nprint(\"sum(axis=1):\", a.sum(axis=1))","1f20f41a":"# Accumulative sum of elements \nprint(\"cumsum():\", a.cumsum())","43a26ed8":"# Multiply all elements of the array\na=np.array([[1,2,3],[4,5,6],[7,8,9]])\nprint('prod():', a.prod())   # 362880","561a7949":"# Multiply elements by column\nprint(\"prod(axis=0):\", a.prod(axis=0))  # [28 80 162]","6e5003d6":"# Multiply elements by row\nprint(\"prod(axis=1):\", a.prod(axis=1))  # [6 120 504]","eb79bd8b":"# Accumulative multiplication of elements \nprint(\"cumprod():\", a.cumprod())","f3495059":"# Maximum value\na=np.array([[1,2,3],[4,5,6],[7,8,9]])\nprint('max():', a.max())   # 9","f55b9747":"# Maximum value by column\nprint(\"max(axis=0):\", a.max(axis=0))  # [7 8 9]","5f4bf911":"# Maximum value by row\nprint(\"max(axis=1):\", a.max(axis=1))  # [3 6 9]","254f9861":"# Minimum value\na=np.array([[1,2,3],[4,5,6],[7,8,9]])\nprint('min():', a.min())   # 1","f54c0501":"# Minimum value by column\nprint(\"min(axis=0):\", a.min(axis=0))  # [1 2 3]","9c4a1090":"# Minimum value by row\nprint(\"min(axis=1):\", a.min(axis=1))  # [1 4 7]","cb0944af":"# Difference between maximum and minimum value\na=np.array([[1,2,3],[4,5,6],[7,8,9]])\nprint('ptp():', a.ptp())   # 8","d05005ba":"# Difference betwwen maximum and minimum value by column\nprint(\"ptp(axis=0):\", a.ptp(axis=0))  # [6 6 6]","e2fbf7ad":"# Difference between maximum and minimum value by row\nprint(\"ptp(axis=1):\", a.ptp(axis=1))  # [2 2 2]","02805757":"# Calculate the mean of all values\na=np.array([[1,2,3],[4,5,6],[7,8,9]])\nprint('mean():', a.mean())   # 5.0","600c101f":"# Calculate the mean of values by column\nprint(\"mean(axis=0):\", a.mean(axis=0))  # [4. 5. 6.]","e37c81f1":"# Calculate the mean of values by row\nprint(\"mean(axis=1):\", a.mean(axis=1))  # [2. 5. 8.]","9eb3ccb9":"# Calculate the median of all values\na=np.array([[1,2,3],[4,5,6],[7,8,9]])\nprint('median():', np.median(a))   # 5.0","1f9623ba":"# Calculate the median of values by column\nprint(\"median(axis=0):\", np.median(a, axis=0))  # [4. 5. 6.]","824a1286":"# Calculate the median of values by row\nprint(\"median(axis=1):\", np.median(a, axis=1))  # [2. 5. 8.]","d0b61b72":"# Calculate the standard deviation of all values\na=np.array([[1,2,3],[4,5,6],[7,8,9]])\nprint('std():', a.std())   # 2.5819","263ec1e2":"# Calculate the standard deviation of values by column\nprint(\"std(axis=0):\", a.std(axis=0))  # [2.449 2.449 2.449]","b5ce464b":"# Calculate the standard deviation of values by row\nprint(\"std(axis=1):\", a.std(axis=1))  # [0.816 8.816 0.816]","aa997dbe":"# Calculate the percentile over all the values of the array\n# percentile(<array>, [<percentile_points>])\nprint('percentil():', np.percentile(a, [25, 50, 75]))","1100a11f":"# Calculate the percentile over values by column\nprint(\"percentile(axis=0):\", np.percentile(a, [25, 50, 75], axis=0))","e94a51e6":"# Calculate the percentile over values by column\nprint(\"percentile(axis=1):\", np.percentile(a, [25, 50, 75], axis=1))","1d9fc2b1":"# nan values are generated when values are missing or not matched (kind of types)\n#\n# If you manage these values with boolean indexation:\n#    <array> == np.nan    # all results are False\n#    <array> != np.nan    # all results are True\n#\n# Better solution is use the isnan() function\na = np.array([[1, 2, 3, np.nan], [3, 3, np.nan, np.nan], [2, np.nan, 1, 3]])\nprint(a)\nprint('---')  \nprint('a == np.nan', a == np.nan)   # All is False\nprint('---')  \nprint('a != np.nan', a != np.nan)   # All is True\nprint('---------')\nprint('isnan()', np.isnan(a))","cb31758d":"# round() function rounds the array values to n decimals\n# round(<array>, decimals=<n_decimals>)\na = np.random.random((4,6))\nprint(a)\nprint('---')\nprint(np.round(a, decimals=2))","0a6bd6d7":"# insert(<arr>, <obj>, <values>, axis=1)\n#    <arr> is the array in which add the new column\n#    <obj> is the number of the column in which insert the new column\n#    <values> is an array containing the values of the new column\na = np.array([[20,3], [np.nan, 12], [7, 23], [np.nan, 23], [np.nan, 11], [6, 22], [3, 14]])\n\n# if col0 == nan then col1 else col0 + col1\nb = np.where(np.isnan(a[:,0]), a[:,1], a[:,0] + a[:,1])\nprint(b)\nprint('---')\n\n# Insert b values into column 2\nc = np.insert(arr=a, obj=2, values=b, axis=1)\nprint(c)","cfd2ece0":"# concatenate((<tuple_arrays>), axis=0\/1)\na = np.array([[1,2,3,np.nan], [4,3,np.nan, np.nan], [2,np.nan,1,3]])\nb = np.array([[3,2,4,4], [6,10,3,np.nan],[0,1,3,2]])\nc = np.concatenate((b,a))  # result = 6 rows and 4 cols\nd = np.concatenate((b,a), axis=1) # result = 3 files and 8 cols\nprint(a)\nprint('---')\nprint(b)\nprint('---')\nprint(c)\nprint('---')\nprint(d)","7b2b0c2f":"# sort(<array>, <axis>, <kind>, <fields_order>)\n#   <kind> Sort method:\n#      - 'quicksort'\n#      - 'heapsort'\n#      - 'mergesort'\n#      - 'timsort'\n#   <fields_order> Array with fields name\na = np.array([[1,2,3,4], [4,3,-5,-7], [2,3,1,3]])\nprint(np.sort(a))  # Sort row by row\nprint('---')\nprint(np.sort(a, axis=None))  # Sort in one dimension\nprint('---')\nprint(np.sort(a, axis=0))  # Sort column by column","28937451":"# We can use structured arrays and order them by a given field\ntypes = [('names', 'S10'), ('hobbies', 'S10'), ('ages', int)]\ndata = [('Rafael', 'Music', 33), ('Eduardo', 'Music', 36), ('Elena', 'Painting', 23), ('Lucia', 'Kitchen', 28)]\na = np.array(data, dtype=types)   # Structured array\nprint('ordered by age:', np.sort(a, order='ages'))\nprint('---')\nprint('ordered by hobbies and names', np.sort(a, order=['hobbies', 'names']))","baa42a5c":"# Inverse order\n# First, sort ascendent\n# Second, inverse the previous sort using [::-1]\nprint('ordered by age:', np.sort(a, order='ages')[::-1])\nprint('---')\nprint('ordered by hobbies and names', np.sort(a, order=['hobbies', 'names'])[::-1])","3d990207":"# unique(<array>)\n# unique(<array>, return_index=True)  # Position of the first ocurrence\na = np.array([1,2,1,2,4,3,2,2,3,1,2,4])\nprint(np.unique(a))  # 1 2 3 4\n\nb = a.reshape((3,4))\nprint(np.unique(b, return_index=True))","74cb79f6":"a = np.random.random((10,6))\na = np.round(a, decimals=2)\nprint(a)\nprint('---')\nnp.save('fichero.npy', a)\n\nb = np.load('fichero.npy')\nprint(b)","adfe2cf0":"### percentile()","46a78271":"### round()","0e37fc18":"# Introduction to NumPy course:\n\nhttps:\/\/docs.google.com\/presentation\/d\/1dvVCww3ERotJYSElc9L3MbSWUzigo_D8JeDyD0mJTHg\/edit?usp=sharing\n\n**The following examples explain the concepts and fundaments of NumPy**","17349e79":"## Basic math using arrays","c99973ea":"### Unique values","48a08102":"> ### Concatenating arrays","bdf94e19":"# Advanced concepts\n\n## nan values","42e0107d":"### prod()","80217854":"### Adding new columns\n\nYou can create new columns based on the values of existing columns, thanks to the insert() function.","c05f2af0":"## Math functions\n\n### sum()","35791e72":"### Broadcasting\n\nBroadcasting is the ability to calculate math operations between arrays with different shape or dimensionality. The rule is: one of the dimensionalities must be the same. It is mean: one of the arrays must have the same number of columns or rows","2774862c":"# Math","d2a881e1":"### max()","be252b4a":"## Indexation and slicing\n**Indexation is the ability to get a given cell o group of cells in the array.\nIndexation allows you to access to the values into the array**\n\n**The rows and the columns starts at 0 position, and ends at the lenght - 1**\n\n**Slicing is the ability to get a portion from the array**","e98e37ad":"### median()","5f76126b":"### std()","385d05a0":"## Practical Boolean indexation example\n\nWe can store a collection of name, hobby and age for several friends. The goal is to query the names of the friends which age is greater than 29 years, or query the names of the friends that like the music and their age is greater than 29 years.","fe6c0282":"# Basic concepts","731b0df1":"## Making arrays by default","4fb9cb76":"### min()","8b7d7161":"### Boolean indexation\n\nGiven an array, we can specify a condition for the values. It will return a new array with the same shape, and the values will be True if the value matches with the condition, or False in other case","6e84e6f1":"### ptp()","4e97bfef":"### mean()","7f735370":"### Complete indexation syntax\n\narray[ start_row:end_row:step_row , start_col:end_col:step_col ]\n","2f14b613":"### Sorting arrays","408122d3":"### Save and load data into file\n\nnp.save('filename.npy', array)  \nnp.savetext('filename', array, delimiter=',')\n\narray = np.load('filename.npy'.npy')\narray = np.load('filename', delimiter=',')\n\nWith save and load a binary file\nWith savetext and loadtext the data of the file is text format separated by a given character"}}