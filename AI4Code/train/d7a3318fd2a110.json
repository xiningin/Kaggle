{"cell_type":{"43f07a3f":"code","12758ea3":"code","4f3fe8a8":"code","4ec2620c":"code","2ebedf0c":"code","97daabbb":"code","76847ad3":"code","eeed3032":"code","2150cdd2":"code","952562e7":"code","d79ff045":"code","cb491974":"code","65930021":"code","f9f11d23":"code","52289a05":"code","7726fadc":"code","16e27d42":"markdown","740a6737":"markdown","f2045fd7":"markdown","944f36a4":"markdown","737c66c5":"markdown","b064cd59":"markdown","568a46bd":"markdown","a6612556":"markdown"},"source":{"43f07a3f":"import numpy as np\nimport pandas as pd\nimport pylab as pl\nimport matplotlib.cm as cm\nfrom keras import backend as K\nfrom keras.utils import np_utils\nfrom keras import Sequential\nfrom tensorflow.keras.models import Model\nfrom keras.layers.core import Dense, Dropout, Activation, Flatten\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\nfrom sklearn.model_selection import train_test_split\nfrom matplotlib import pyplot as plt\nfrom tensorflow.keras import layers\nimport tensorflow as tf","12758ea3":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","4f3fe8a8":"train.head()","4ec2620c":"test.head()","2ebedf0c":"y = (train[\"label\"]).values\nX = (train.loc[:,'pixel0':]).values","97daabbb":"X = X.astype(\"float32\")\nX = X\/255.0\n\ny = y.astype(\"float32\")\ny = y\/255.0\n\nX.shape","76847ad3":"x_train, x_test, y_train, y_test = train_test_split(\nX, y, test_size=0.3, random_state=2)\nx_train.shape, x_test.shape","eeed3032":"y_train = np_utils.to_categorical(y_train, 10)\ny_test = np_utils.to_categorical(y_test, 10)","2150cdd2":"y_train.shape, y_test.shape","952562e7":"x_train = x_train.reshape(29400,28,28)\nx_train = np.expand_dims(x_train, -1)\n\nx_test = x_test.reshape(12600,28,28)\nx_test = np.expand_dims(x_test, -1)","d79ff045":"x_train.shape, x_test.shape","cb491974":"model = tf.keras.Sequential([\n    tf.keras.layers.Conv2D(64,3,activation = 'relu'),\n    tf.keras.layers.Conv2D(64,3,activation = 'relu'),\n    tf.keras.layers.MaxPool2D(pool_size = (2,2)),\n    tf.keras.layers.Conv2D(32,3,activation = 'relu'),\n    tf.keras.layers.Conv2D(32,3,activation = 'relu'),\n    tf.keras.layers.Conv2D(16,3,activation = 'relu'),\n    tf.keras.layers.Conv2D(16,3,activation = 'relu'),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(32, activation = 'relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(64, activation = 'relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(10, activation = 'softmax')\n])\nmodel.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n","65930021":"model.fit(x_train, y_train,\n          batch_size=100,\n          epochs=1,\n          verbose=1,\n          validation_data=(x_test, y_test))","f9f11d23":"score = model.evaluate(x_test,\n                       y_test,\n                       verbose=0)\npd.DataFrame(score, index=[\"test score\", \"acuuracy score\"])","52289a05":"extract = Model(model.inputs, model.layers[-4].output) \nfeatures = extract.predict(x_train)","7726fadc":"pd.DataFrame(features)","16e27d42":"# Training the model","740a6737":"# Importing the libraries","f2045fd7":"# Adding the sequential model from Keras","944f36a4":"# Conclusion","737c66c5":"# Importing the data","b064cd59":"We freeze the model up you a specific layer and extracted the features which could be useful when you want to replace your model instead of the internal layer of the dense layers.","568a46bd":"# Printing the accuracy","a6612556":"# Feature extraction"}}