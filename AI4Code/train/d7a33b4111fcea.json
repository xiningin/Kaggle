{"cell_type":{"021667a0":"code","07d68cd6":"code","d104fd4b":"code","6f0d283a":"code","5799565a":"code","08980fb5":"code","18fc863e":"code","f191a208":"code","189670c9":"code","0c88eb3b":"code","093f1e5b":"code","4d0f30e3":"code","2256a1a5":"code","ea6f04d3":"code","085b0f74":"code","2b53997e":"code","4890d0ae":"code","3c07e2f0":"code","0bbe6db3":"code","6d65e202":"code","4f2fe9ee":"code","33b8c8a7":"code","0e09338c":"code","8debfb54":"code","9e301e2d":"code","cd54e853":"code","55695769":"code","604f8a99":"code","6976373b":"code","bb758bd9":"code","ce1a13ba":"code","f3bec153":"code","8f867e38":"code","4ab6dc1b":"code","e9a03126":"code","8c47c509":"code","71da7e18":"code","cbf0634d":"code","39808db7":"code","a04333e2":"code","46c23312":"code","22da776f":"code","491761aa":"code","996b50f2":"code","f0748420":"code","8c715ef5":"code","0b5b952d":"code","b305f7cd":"code","7ff526ec":"code","200e7b6a":"code","464be817":"markdown","1b41bf90":"markdown","2c77e842":"markdown","f2a41c80":"markdown","79a5fb74":"markdown","41ed8372":"markdown","500a8475":"markdown","00ca614d":"markdown","42a7ab4a":"markdown","1bf53fa0":"markdown","9f2e4175":"markdown","6eaa6186":"markdown","d9250bbc":"markdown","b969373f":"markdown","6af2dda2":"markdown","b83b1ed9":"markdown","e433e3c1":"markdown","63defde7":"markdown","549ef6cd":"markdown","c045547a":"markdown","4f04efb0":"markdown","7b36bf78":"markdown","5171de7f":"markdown","6c0db837":"markdown","77771c55":"markdown","725dcfa4":"markdown","ea08b16b":"markdown","b9e86f2b":"markdown","1cabd381":"markdown","3782c6c7":"markdown","c66d21a0":"markdown","723cf105":"markdown","7c2e3617":"markdown","bead1260":"markdown","ef04d56d":"markdown","70bd1abf":"markdown","ad14c88a":"markdown","220253d7":"markdown","88db8dd6":"markdown","95bed77c":"markdown","68b4dd40":"markdown"},"source":{"021667a0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib inline\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)\nplt.style.use('bmh')\n# mpl.rcParams['axes.labelcolor'] = 'grey'\n# mpl.rcParams['xtick.color'] = 'grey'\nmpl.rcParams['xtick.labelsize'] = 'large'\n# mpl.rcParams['ytick.color'] = 'grey'\n# mpl.rcParams['axes.labelcolor'] = 'grey'\n# mpl.rcParams['text.color'] = 'grey'\nmpl.rcParams[\"legend.loc\"] = 'best'","07d68cd6":"buildings = pd.read_csv('\/kaggle\/input\/ashrae-energy-prediction\/building_metadata.csv')\nweather_train = pd.read_csv(\"\/kaggle\/input\/ashrae-energy-prediction\/weather_train.csv\")\nweather_test = pd.read_csv(\"\/kaggle\/input\/ashrae-energy-prediction\/weather_test.csv\")","d104fd4b":"buildings['age'] = 2016 - buildings['year_built']","6f0d283a":"sns.distplot(buildings.age.dropna());","5799565a":"sns.distplot(buildings.square_feet.dropna());","08980fb5":"def show_counts(df, col, n):\n    cnt = df[col].value_counts().nlargest(n)[::-1]\n    fig, ax = plt.subplots()\n    ax.barh(cnt.index.astype(str), cnt.values)\n    ax.set_xlabel('count')\n    ax.set_title(col, color='white')\n    for i, v in enumerate(cnt):\n        ax.text(v + 3, i, str(int(v\/cnt.sum() * 100)) + \"%\", color='grey', fontweight='bold')","18fc863e":"show_counts(buildings, 'primary_use', 5);","f191a208":"show_counts(buildings, 'floor_count', 7)","189670c9":"def compare_kde(df, col, n):\n    fig, axes = plt.subplots(nrows=n, ncols=1, figsize=(9, 10), sharex=True)\n    most_use_case = buildings.primary_use.value_counts().nlargest(n).index\n    for i, use_case in enumerate(most_use_case):\n        sns.distplot(buildings.loc[buildings.primary_use==use_case, col].dropna(), ax=axes[i]);\n        axes[i].set_title(use_case)\n    plt.tight_layout()","0c88eb3b":"compare_kde(buildings, 'age', 5)","093f1e5b":"compare_kde(buildings, 'floor_count', 5)","4d0f30e3":"compare_kde(buildings, 'square_feet', 5)","2256a1a5":"weather_train.head()","ea6f04d3":"weather_sites = weather_train.site_id.unique()","085b0f74":"calculate_nans = ['site_id', 'air_temperature', 'cloud_coverage', 'dew_temperature',\n                  'precip_depth_1_hr', 'sea_level_pressure', 'wind_direction',\n                  'wind_speed']\nweather_concat = pd.concat([weather_train, weather_test], axis=0)\ncalculate_nans_df = weather_concat[calculate_nans].isna()\ncalculate_nans_df['site_id'] = weather_concat.site_id\ncalculate_nans_df = calculate_nans_df.groupby('site_id').sum() \/ (24 * 365 * 3) * 100","2b53997e":"# add time attribute\n# Only Month, HourofDay have something to do with weather\nweather_train['timestamp'] = pd.to_datetime(weather_train['timestamp'])\nweather_test['timestamp'] = pd.to_datetime(weather_test['timestamp'])\n\nweather_train['hour'] = weather_train.timestamp.dt.hour\nweather_test['hour'] = weather_test.timestamp.dt.hour\n\nweather_train['month'] = weather_train.timestamp.dt.month\nweather_test['month'] = weather_test.timestamp.dt.month\n\nweather_train = weather_train.set_index('timestamp')\nweather_test = weather_test.set_index('timestamp')","4890d0ae":"def plot_weather_attribute(col, rolling_window=60):\n    fig, axes = plt.subplots(nrows=6, ncols=3, sharex=True, sharey=True, figsize=(18, 12))\n    exclude_site = [c for c in weather_train.columns if c != 'site_id']\n    rolling_weather_train = weather_train[exclude_site].rolling(rolling_window).mean()\n    rolling_weather_train['site_id'] = weather_train.site_id\n\n    rolling_weather_test = weather_test[exclude_site].rolling(rolling_window).mean()\n    rolling_weather_test['site_id'] = weather_test.site_id\n\n    for i in range(6):\n        for j in range(3):\n            site_idx = i * 3 + j\n            if (site_idx) > 15:\n                break\n            rolling_weather_train.loc[rolling_weather_train.site_id==(site_idx), col].plot(ax=axes[i, j])\n            rolling_weather_test.loc[rolling_weather_test.site_id==(site_idx), col].plot(ax=axes[i, j], color='green')\n\n            axes[i, j].set_title(f\"Site {site_idx} NULL: {int(calculate_nans_df.loc[site_idx, col])}%\")\n    plt.tight_layout()","3c07e2f0":"plot_weather_attribute('air_temperature', rolling_window=60)","0bbe6db3":"plot_weather_attribute('cloud_coverage', rolling_window=7)","6d65e202":"plot_weather_attribute('dew_temperature', rolling_window=60)","4f2fe9ee":"plot_weather_attribute('precip_depth_1_hr', rolling_window=7)","33b8c8a7":"plot_weather_attribute('sea_level_pressure', rolling_window=7)","0e09338c":"plot_weather_attribute('wind_direction', rolling_window=60)","8debfb54":"plot_weather_attribute('wind_speed', rolling_window=60)","9e301e2d":"train_site_hour_mean = weather_train.groupby(['site_id', 'hour']).mean()\ntest_site_hour_mean = weather_test.groupby(['site_id', 'hour']).mean()","cd54e853":"def plot_weather_by_hour(col):\n    fig, axes = plt.subplots(nrows=6, ncols=3, sharex=True, sharey=True, figsize=(18, 12))\n    for i in range(6):\n        for j in range(3):\n            site_idx = (i * 3 + j)\n            if site_idx > 15:\n                break\n            train_site_data = train_site_hour_mean.loc[(site_idx, slice(None)), col]\n            train_site_data.index = train_site_data.index.droplevel(0)\n\n            test_site_data = test_site_hour_mean.loc[(site_idx, slice(None)), col]\n            test_site_data.index = test_site_data.index.droplevel(0)\n\n            train_site_data.plot(ax=axes[i, j])\n            test_site_data.plot(ax=axes[i, j], color='green')\n\n            axes[i, j].set_title(f\"Site {site_idx} NULL: {int(calculate_nans_df.loc[site_idx, col])}%\")\n    plt.tight_layout()","55695769":"weather_train.columns","604f8a99":"plot_weather_by_hour('air_temperature')","6976373b":"plot_weather_by_hour('cloud_coverage')","bb758bd9":"check_cloud_na = weather_train[['site_id', 'hour', 'cloud_coverage']].copy()\ncheck_cloud_na.loc[:, 'cloud_coverage'] = check_cloud_na['cloud_coverage'].isna()\ncheck_cloud_na.groupby(['site_id', 'hour']).sum().unstack('hour')","ce1a13ba":"plot_weather_by_hour('dew_temperature')","f3bec153":"plot_weather_by_hour('precip_depth_1_hr')","8f867e38":"plot_weather_by_hour('sea_level_pressure')","4ab6dc1b":"plot_weather_by_hour('wind_direction')","e9a03126":"plot_weather_by_hour('wind_speed')","8c47c509":"train_site_month_mean = weather_train.groupby(['site_id', 'month']).mean()\ntest_site_month_mean = weather_test.groupby(['site_id', 'month']).mean()","71da7e18":"def plot_weather_by_month(col):\n    fig, axes = plt.subplots(nrows=6, ncols=3, sharex=True, sharey=True, figsize=(18, 12))\n    for i in range(6):\n        for j in range(3):\n            site_idx = (i * 3 + j)\n            if site_idx > 15:\n                break\n            train_site_data = train_site_month_mean.loc[(site_idx, slice(None)), col]\n            train_site_data.index = train_site_data.index.droplevel(0)\n\n            test_site_data = test_site_month_mean.loc[(site_idx, slice(None)), col]\n            test_site_data.index = test_site_data.index.droplevel(0)\n\n            train_site_data.plot(ax=axes[i, j])\n            test_site_data.plot(ax=axes[i, j], color='green')\n\n            axes[i, j].set_title(f\"Site {site_idx} NULL: {int(calculate_nans_df.loc[site_idx, col])}%\")\n    plt.tight_layout()","cbf0634d":"plot_weather_by_month('air_temperature')","39808db7":"plot_weather_by_month('cloud_coverage')","a04333e2":"plot_weather_by_month('dew_temperature')","46c23312":"plot_weather_by_month('precip_depth_1_hr')","22da776f":"plot_weather_by_month('sea_level_pressure')","491761aa":"plot_weather_by_month('wind_direction')","996b50f2":"plot_weather_by_month('wind_speed')","f0748420":"def plot_weather_correlation(df):\n    fig, axes = plt.subplots(nrows=6, ncols=3, sharex=True, sharey=True, figsize=(18, 24))\n    for i in range(6):\n        for j in range(3):\n            site_idx = (i * 3 + j)\n            if site_idx > 15:\n                for tick in axes[i, j].get_xticklabels():\n                    tick.set_rotation(90)\n                continue\n                \n            sns.heatmap(df.loc[df.site_id==site_idx, \n                                          ['air_temperature', 'cloud_coverage', 'dew_temperature',\n                                          'precip_depth_1_hr', 'sea_level_pressure', 'wind_direction',\n                                          'wind_speed']\n                                         ]\\\n                                         .corr(), ax=axes[i, j], annot=True, fmt ='.1f')\n            axes[i, j].set_title(f\"Site {site_idx}\")\n    plt.tight_layout()","8c715ef5":"sns.heatmap(weather_train[['air_temperature', 'cloud_coverage', 'dew_temperature',\n               'precip_depth_1_hr', 'sea_level_pressure', 'wind_direction',\n               'wind_speed']].corr(), annot=True, fmt ='.2f');","0b5b952d":"sns.heatmap(weather_test[['air_temperature', 'cloud_coverage', 'dew_temperature',\n               'precip_depth_1_hr', 'sea_level_pressure', 'wind_direction',\n               'wind_speed']].corr(), annot=True, fmt ='.2f');","b305f7cd":"plot_weather_correlation(weather_train)","7ff526ec":"# In Test Set by Site","200e7b6a":"plot_weather_correlation(weather_test)","464be817":"# precip_depth_1_hr:","1b41bf90":"# In Test Set","2c77e842":"# Then we do EDA by HOUR OF THE DAY......","f2a41c80":"# dew_temperature:","79a5fb74":"# wind_direction:","41ed8372":"# WEATHER (We'll draw Train set in Blue, and Test Set in Green)","500a8475":"# BUILDING","00ca614d":"# air_temperature:","42a7ab4a":"# precip_depth_1_hr:","1bf53fa0":"# wind_direction:","9f2e4175":"# Only Site 12 has the full data","6eaa6186":"# cloud_coverage:","d9250bbc":"# Conclusions on Buildings:\n# 1. Not sure what's the cause of the NULLs\n# 2. The Top5 most common building type might be important when performing further analysis\n\n# Conclusions on weather:\n# 1. All sites are from Northern Hemisphere\n# 2. Mostly Train and Test data share the same pattern\n# 3. Beware of the NULLs\n# 4. Sites can be identified if correctly identify the temperature, wind direction hourly\/monthly\n\n# **Conclusion:**\n# Thank you for reading. Hope this help.\n# Please let me know if there's any mistake and have a good day!","b969373f":"# age","6af2dda2":"# square feet","b83b1ed9":"# cloud_coverage:","e433e3c1":"# air_temperature:","63defde7":"# precip_depth_1_hr:","549ef6cd":"# dew_temperature:","c045547a":"# Look pretty similar to air_temperature","4f04efb0":"# cloud_coverage:","7b36bf78":"# sea_level_pressure:","5171de7f":"# Site 4 is the most stable","6c0db837":"# sea_level_pressure:","77771c55":"# In Train set","725dcfa4":"# Then Let's see how attributes interact with each other","ea08b16b":"# sea_level_pressure:","b9e86f2b":"# floor count","1cabd381":"# wind_speed:","3782c6c7":"# Site 4 has same pattern with temparature (monsoons?)\n# Should be 0 to 360 degree","c66d21a0":"# wind_speed:","723cf105":"# dew_temperature:","7c2e3617":"# wind_direction:","bead1260":"# Site 2, 4, 15 might be near the ocean\n# as the wind direction is opposite in day and night","ef04d56d":"# air_temperature:","70bd1abf":"# There are some weird spikes...\n# Let's check if it's related to the NULLs","ad14c88a":"# wind_speed:","220253d7":"# --> Yes, the spikes is just because of the Nulls","88db8dd6":"# Though Site 7, 11 look weird\n# It's because there are around 90% null in them\n# ---> It's biased","95bed77c":"# Then we do EDA by Month....","68b4dd40":"# In Train Set by Site"}}