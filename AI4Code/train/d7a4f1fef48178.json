{"cell_type":{"769f4d23":"code","b6623302":"code","5d9fe548":"code","f46a87b6":"code","a2351760":"code","68ab891e":"code","20625beb":"code","25025aae":"code","82460db8":"code","6fa59791":"code","8202864e":"code","f3a75699":"code","2f8fdb49":"markdown","de987951":"markdown","7e7ba53e":"markdown","745b294c":"markdown","bf927ca8":"markdown","694a2d77":"markdown","3d69c703":"markdown","c9e4ab39":"markdown","390d1f44":"markdown","44e8a2c5":"markdown","30e20a5d":"markdown","a9abb908":"markdown","aaeab1e9":"markdown"},"source":{"769f4d23":"import numpy as np\nimport pandas as pd\nfrom numpy.linalg import eig","b6623302":"A = np.array([[4,5,6,7],\n           [6,5,8,7],\n           [1,8,2,3],\n           [4,2,1,2],\n           [6,3,1,2]])\nprint(A)","5d9fe548":"data = pd.DataFrame(A,columns  = ['f1','f2','f3','f4'])\ndata","f46a87b6":"std_data  = (data - data.mean()) \/ (data.std())\nstd_data","a2351760":"V = np.cov(std_data.T , bias = 0)\nprint(V)","68ab891e":"V1 = np.cov(std_data.T , bias = 1)\nprint(V1)","20625beb":"values, vectors = eig(V)\nprint(vectors)","25025aae":"print(values)","82460db8":"P = vectors.T.dot(std_data.T)\nprint(P.T)","6fa59791":"from sklearn.decomposition import PCA\n\npca = PCA(2)\npca.fit_transform(A)\n\nprint(pca.components_)","8202864e":"print(pca.explained_variance_)","f3a75699":"\nB = pca.transform(A)\nprint(B)","2f8fdb49":" transform data","de987951":"First Importing Necessary Libraries","7e7ba53e":"There are 2 methods for this:\n1. Sample Formula\n \n2.Population Formula","745b294c":"Result Using sklearn library","bf927ca8":"**2. Covariance population formula (divide by N)**","694a2d77":"**Now we will Define a Matrix**","3d69c703":"Find the covariance matrix for the given dataset","c9e4ab39":"Project Data","390d1f44":"**1. Covariance sample formula (divide by N-1 )**","44e8a2c5":"# Principle Component Analysis","30e20a5d":"Calculate Eigenvalue and Eigen Vector","a9abb908":"Standardized the dataset","aaeab1e9":"We can use any of the formula"}}