{"cell_type":{"77507044":"code","edb13bc9":"code","1d1df9c8":"code","6cac942a":"code","d0e23dc5":"code","8d0aea20":"code","353cdb76":"code","a1774f36":"code","ea94f8df":"code","4e63bc20":"markdown","06fbaa7b":"markdown"},"source":{"77507044":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nfrom PIL import Image # image library \nimport matplotlib.pyplot as plt # for plotting \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","edb13bc9":"image_path = '..\/input\/image-dataset\/scenery.jpg' #path to our image\nim = Image.open(image_path) #to read the image file \n\n# Our original image\nimage = np.array(im) #converting our image file to numpy array\n#print(type(image))\n\n#showing our original image using matplotlib library\nplt.imshow(image)\nplt.show()","1d1df9c8":"# flipping up and down our original image\nnew_img = np.flipud(image)\n\n\nplt.imshow(new_img)\nplt.show()","6cac942a":"# rotating our original image to counterwise 90 degree \nnew_img = np.rot90(image)\n\n\nplt.imshow(new_img)\nplt.show()\n","d0e23dc5":"# rotating 90 degree and flipping up and down our original image\nnew_img = np.rot90(image)\nnew_img = np.flipud(new_img)\n\n\nplt.imshow(new_img)\nplt.show()","8d0aea20":"# rotating our original image by 180 degree\nnew_img = np.rot90(image, k=2) # Here 180 = 90*2 = 90*k \n\nplt.imshow(new_img)\nplt.show()","353cdb76":"# rotating 180 degree and flipping our original image\nnew_img = np.rot90(image, k=2) # Here 180 = 90*2 = 90*k \nnew_img = np.flipud(new_img)\n\n\nplt.imshow(new_img)\nplt.show()","a1774f36":"# rotating our original image by 270 degree \nnew_img = np.rot90(image, k=3) # Here 270 = 90*3 = 90*k \n\nplt.imshow(new_img)\nplt.show()","ea94f8df":"# rotating 270 degree and flipping our original image\nnew_img = np.rot90(image, k=3) # Here 270 = 90*3 = 90*k \nnew_img = np.flipud(new_img)\n\nplt.imshow(new_img)\nplt.show()","4e63bc20":"This was my `first Notebook`. It is quite simple but handy, especially when you are a beginner to this field just like me.\n\n### I wish you all good luck for your bright future. Keep Coding...Keep Learning...Keep spreading Love and Passion.","06fbaa7b":"# Image Augmentation\nImage augmentation artificially creates training images through different ways of processing or combination of multiple processing, such as random rotation, shifts, shear and flips, etc.\n\nIn this notebook, we have focused on creating artifical images using just two simple commands of `Numpy` library. One is `flipup` and other is `rot90`."}}