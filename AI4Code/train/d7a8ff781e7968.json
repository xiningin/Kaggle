{"cell_type":{"b1ce3ba1":"code","ebf8b686":"code","fc09389f":"code","20a2d672":"code","8707fcc6":"code","0bb69e99":"code","934154ab":"code","0bab07f1":"code","9f15e49b":"code","4ce6cb0e":"code","88b0508f":"code","4a488cd2":"code","9664717e":"markdown","df79fa7d":"markdown","f825fdbf":"markdown","fd3ad0b4":"markdown","85ba485b":"markdown","3b63c8ed":"markdown","5a83e7fc":"markdown","cfb6134d":"markdown","2ccdc0ef":"markdown","a064441b":"markdown","8606f522":"markdown"},"source":{"b1ce3ba1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport matplotlib.pyplot as plt\n\n# implement ChessBoard class\nclass ChessBoard:\n    def __init__(self, row=8, col=8):\n        self.grid = np.ones((row, col, 3))\n        for x in range(row):\n            for y in range(col):\n                if x % 2 == 0 and y % 2 == 0:\n                    self.grid[x, y] = (0, 0, 0)\n                if x % 2 == 1 and y % 2 == 1:\n                    self.grid[x, y] = (0, 0, 0)\n                    \n    def render(self):\n        plt.imshow(self.grid)\n    \n    def add_red(self, row, col):\n        self.grid[row, col] = (1, 0, 0)\n        self.red = (row, col)\n    \n    def add_blue(self, row, col):\n        self.grid[row, col] = (0, 1, 1)\n        self.blue = (row, col)\n    \n    def is_under_attack(self):\n        is_under_attack = False\n        if self.red[0] == self.blue[0]:\n            is_under_attack = True\n        elif self.red[1] == self.blue[1]:\n            is_under_attack = True\n        elif abs(self.red[0] - self.blue[0]) == abs(self.red[1] - self.blue[1]):\n            is_under_attack = True\n        return is_under_attack","ebf8b686":"board = ChessBoard()\nboard.add_red(0, 0)\nboard.add_blue(0, 5)\nboard.render()\nprint(f\"Is Red under attack? {str(board.is_under_attack())}\")\n","fc09389f":"board = ChessBoard()\nboard.add_red(5, 7)\nboard.add_blue(5, 1)\nboard.render()\nprint(f\"Is Red under attack? {str(board.is_under_attack())}\")","20a2d672":"board = ChessBoard()\nboard.add_red(2, 3)\nboard.add_blue(5, 3)\nboard.render()\nprint(f\"Is Red under attack? {str(board.is_under_attack())}\")","8707fcc6":"board = ChessBoard()\nboard.add_red(7, 4)\nboard.add_blue(0, 4)\nboard.render()\nprint(f\"Is Red under attack? {str(board.is_under_attack())}\")","0bb69e99":"board = ChessBoard()\nboard.add_red(3, 3)\nboard.add_blue(5, 5)\nboard.render()\nprint(f\"Is Red under attack? {str(board.is_under_attack())}\")","934154ab":"board = ChessBoard()\nboard.add_red(3, 3)\nboard.add_blue(0, 0)\nboard.render()\nprint(f\"Is Red under attack? {str(board.is_under_attack())}\")","0bab07f1":"board = ChessBoard()\nboard.add_red(3, 3)\nboard.add_blue(1, 5)\nboard.render()\nprint(f\"Is Red under attack? {str(board.is_under_attack())}\")","9f15e49b":"board = ChessBoard()\nboard.add_red(3, 3)\nboard.add_blue(6, 0)\nboard.render()\nprint(f\"Is Red under attack? {str(board.is_under_attack())}\")","4ce6cb0e":"board = ChessBoard()\nboard.add_red(3, 3)\nboard.add_blue(7, 6)\nboard.render()\nprint(f\"Is Red under attack? {str(board.is_under_attack())}\")","88b0508f":"board = ChessBoard()\nboard.add_red(5, 6)\nboard.add_blue(3, 5)\nboard.render()\nprint(f\"Is Red under attack? {str(board.is_under_attack())}\")","4a488cd2":"# test __init__ method\nboard = ChessBoard()\nassert board.grid[1, 0][0] == 1\nassert board.grid[1, 0][1] == 1\nassert board.grid[1, 0][2] == 1\n\n# test add_red method\nboard.add_red(5, 6)\nassert board.grid[5, 6][0] == 1\nassert board.grid[5, 6][1] == 0\nassert board.grid[5, 6][2] == 0\n\n# test add_blue method\nboard.add_blue(3, 2)\nassert board.grid[3, 2][0] == 0\nassert board.grid[3, 2][1] == 1\nassert board.grid[3, 2][2] == 1\n\n# test is_under_attack method\nassert board.is_under_attack() == False\n\nboard.render()","9664717e":"### Diagonal attack #2","df79fa7d":"### No attacks #2","f825fdbf":"### Horizontal attack #1","fd3ad0b4":"### Vertical attack #2","85ba485b":"### Diagonal attack #3","3b63c8ed":"### Diagonal attack #1\n","5a83e7fc":"### Unit tests","cfb6134d":"### No attacks #1","2ccdc0ef":"### Horizontal attack #2","a064441b":"### Diagonal attack #4\n","8606f522":"### Vertical attack #1"}}