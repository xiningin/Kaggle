{"cell_type":{"c251be60":"code","e9867cb7":"code","7b12faba":"code","3068a8ec":"code","4958c27d":"code","35a084fd":"code","48a091f3":"code","3ecc7f8a":"code","c4d2a1d6":"code","678d635a":"code","fe554aba":"code","b81c8180":"code","32ddf83e":"code","4fbfa70a":"code","c4cb88fb":"code","05d50ade":"code","bf82625a":"code","0a112bde":"code","09682153":"code","747478b9":"code","27c2b4c2":"code","d6517f47":"markdown","f4cb2576":"markdown","5f4789ae":"markdown","9a3aa146":"markdown","677817ed":"markdown","d9221f5b":"markdown","f229d086":"markdown","44e9adcb":"markdown","cb8e2da3":"markdown","79a8024f":"markdown","899d5d60":"markdown","11207eaa":"markdown","f53c8c6d":"markdown","fd22a714":"markdown","e8655103":"markdown","b5648ba8":"markdown","f9f3d0e1":"markdown","9aecc7b4":"markdown","79bbd54e":"markdown","76189eb3":"markdown","9a648eca":"markdown","a9492855":"markdown","03ed5a77":"markdown","bf4bc0d3":"markdown"},"source":{"c251be60":"!pip install pycaret==1.0.0\n\nfrom pycaret.classification import *\nimport numpy as np\nimport pandas as pd\nfrom pandas_profiling import ProfileReport \n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nsubmission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")","e9867cb7":"report_train = ProfileReport(train)\nreport_train","7b12faba":"report_train = ProfileReport(train)\nreport_train","3068a8ec":"report_test = ProfileReport(test)\nreport_test","4958c27d":"train_tmp = train.copy()\ntest_tmp = test.copy()\ntrain_tmp['type'] = 'train'\ntrain_tmp.drop('Survived', axis = 1, inplace = True)\ntest_tmp['type'] = 'test'\ndata = pd.concat([train_tmp, test_tmp], ignore_index = True)\n\ndfplot = data.groupby(['type','Pclass']).count()['PassengerId'].to_frame().reset_index()\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]], subplot_titles=['Test', 'Train'])\nfig.add_trace(go.Pie(labels=dfplot[dfplot['type'] == 'test']['Pclass'], values=dfplot[dfplot['type'] == 'test']['PassengerId'], name=\"test\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=dfplot[dfplot['type'] == 'train']['Pclass'], values=dfplot[dfplot['type'] == 'train']['PassengerId'], name=\"train\"),\n              1, 2)\nfig.update_layout(\n    title_text=\"Pclass\")\nfig.show()","35a084fd":"dfplot = data.groupby(['type','Sex']).count()['PassengerId'].to_frame().reset_index()\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]], subplot_titles=['Test', 'Train'])\nfig.add_trace(go.Pie(labels=dfplot[dfplot['type'] == 'test']['Sex'], values=dfplot[dfplot['type'] == 'test']['PassengerId'], name=\"test\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=dfplot[dfplot['type'] == 'train']['Sex'], values=dfplot[dfplot['type'] == 'train']['PassengerId'], name=\"train\"),\n              1, 2)\nfig.update_layout(\n    title_text=\"Sex\")\nfig.show()","48a091f3":"dfplot = data.groupby(['type','SibSp']).count()['PassengerId'].to_frame().reset_index()\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]], subplot_titles=['Test', 'Train'])\nfig.add_trace(go.Pie(labels=dfplot[dfplot['type'] == 'test']['SibSp'], values=dfplot[dfplot['type'] == 'test']['PassengerId'], name=\"test\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=dfplot[dfplot['type'] == 'train']['SibSp'], values=dfplot[dfplot['type'] == 'train']['PassengerId'], name=\"train\"),\n              1, 2)\nfig.update_layout(\n    title_text=\"SibSp\")\nfig.show()","3ecc7f8a":"dfplot = data.groupby(['type','Embarked']).count()['PassengerId'].to_frame().reset_index()\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]], subplot_titles=['Test', 'Train'])\nfig.add_trace(go.Pie(labels=dfplot[dfplot['type'] == 'test']['Embarked'], values=dfplot[dfplot['type'] == 'test']['PassengerId'], name=\"test\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=dfplot[dfplot['type'] == 'train']['Embarked'], values=dfplot[dfplot['type'] == 'train']['PassengerId'], name=\"train\"),\n              1, 2)\nfig.update_layout(\n    title_text=\"Embarked\")\nfig.show()","c4d2a1d6":"fig = px.violin(train, y=\"Age\", x=\"Survived\", color=\"Sex\", box=True, points=\"all\", hover_data=['Age', 'Survived', 'Sex'])\nfig.show()","678d635a":"fig = px.violin(train, y=\"Fare\", x=\"Survived\", color=\"Sex\", box=True, points=\"all\", hover_data=['Fare', 'Survived', 'Sex'])\nfig.show()","fe554aba":"env = setup(data = train, \n             target = 'Survived',\n             numeric_imputation = 'mean',\n             categorical_features = ['Sex','Embarked'], \n             ignore_features = ['Name','Ticket','Cabin'],\n             silent = True,\n            remove_outliers = True,\n            normalize = True)","b81c8180":"compare_models()","32ddf83e":"xgb = create_model('xgboost')","4fbfa70a":"tuned_xgb = tune_model('xgboost')","c4cb88fb":"plot_model(estimator = xgb, plot = 'learning')","05d50ade":"plot_model(estimator = xgb, plot = 'feature')","bf82625a":"plot_model(estimator = xgb, plot = 'auc')","0a112bde":"plot_model(estimator = xgb, plot = 'confusion_matrix')","09682153":"interpret_model(xgb)","747478b9":"predictions = predict_model(xgb, data=test)\npredictions.head()","27c2b4c2":"submission['Survived'] = round(predictions['Score']).astype(int)\nsubmission.to_csv('submission.csv',index=False)\nsubmission.head(10)","d6517f47":"# Setting up Environment <a id=\"10\"><\/a>","f4cb2576":"# Tune Model <a id=\"13\"><\/a>","5f4789ae":"# Test Data Report <a id=\"3\"><\/a>","9a3aa146":"This notebook is a simple introduction to the use of the Pycaret library on tytanic data. First it is graphics to have an intuition on the data and then the modeling part.\n\n![pycaret%20logo.png](attachment:pycaret%20logo.png)\n\nPyCaret is an open source, low-code machine learning library in Python that allows you to go from preparing your data to deploying your model within seconds in your choice of notebook environment.\n\nTo discover more functionality of pycaret I invite you to consult the official site <a href=\"https:\/\/pycaret.org\/\">pycaret<\/a>.","677817ed":"# Pclass <a id=\"4\"><\/a>","d9221f5b":"# Plot Model <a id=\"14\"><\/a>","f229d086":"## Features Importance <a id=\"14.2\"><\/a>","44e9adcb":"## ROC Curve <a id=\"14.3\"><\/a>","cb8e2da3":"## Learning Curve <a id=\"14.1\"><\/a>","79a8024f":"# sibSp <a id=\"6\"><\/a>","899d5d60":"# Sex <a id=\"5\"><\/a>","11207eaa":"# Survived <a id=\"9\"><\/a>","f53c8c6d":"# Embarked <a id=\"7\"><\/a>","fd22a714":"## Confusion Matrix <a id=\"14.4\"><\/a>","e8655103":"<center>\n  <FONT size=\"10\" color = 'red'>Thank you, I hope you enjoyed.<\/FONT>\n<\/center>","b5648ba8":"# Compare Models <a id=\"11\"><\/a>","f9f3d0e1":"# Model Interpretation <a id=\"15\"><\/a>","9aecc7b4":"# Library and Data <a id=\"1\"><\/a>","79bbd54e":"# Create Model <a id=\"12\"><\/a>","76189eb3":"# Make Prediction <a id=\"16\"><\/a>","9a648eca":"# Contents\n\n* [<font size=4>Library and Data<\/font>](#1)\n* [<font size=4>Train Data Report<\/font>](#2)\n* [<font size=4>Test Data Report<\/font>](#3)\n* [<font size=4>Pclass<\/font>](#4)\n* [<font size=4>Sex<\/font>](#5)\n* [<font size=4>SibSp<\/font>](#6)\n* [<font size=4>Embarked<\/font>](#7)\n* [<font size=4>Age<\/font>](#8)\n* [<font size=4>Survived<\/font>](#9)\n* [<font size=4>Setting Up Environment<\/font>](#10)\n* [<font size=4>Compare Models<\/font>](#11)\n* [<font size=4>Create Model<\/font>](#12)\n* [<font size=4>Tune Model<\/font>](#13)\n* [<font size=4>Plot Model<\/font>](#14)\n *     [Learning Curve](#14.1)\n *     [Features Importance](#14.2)\n *     [ROC Curve](#14.3)\n *     [Confusion Matrix](#14.4)\n* [<font size=4>Model Interpretation<\/font>](#15)\n* [<font size=4>Make Prediction<\/font>](#16)\n* [<font size=4>Submit Result<\/font>](#17)","a9492855":"# Submit Result <a id=\"17\"><\/a>","03ed5a77":"# Age <a id=\"8\"><\/a>","bf4bc0d3":"# Train Data Report  <a id=\"2\"><\/a>"}}