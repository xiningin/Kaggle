{"cell_type":{"a1a4e1a7":"code","94b1fb7f":"code","f3d870cd":"code","decab2c5":"code","5b8352a2":"code","3822d2af":"code","e6fc0dc9":"code","cb0b1f9e":"code","ff44bfe7":"code","52d063bc":"code","5ec7e74d":"code","ecc85e61":"code","829d32b3":"code","bddfb3f1":"code","58a91d44":"code","a3074a7f":"code","5027bd4d":"code","8232304f":"code","c3bf25b9":"code","d44ce516":"code","0670263c":"code","58e89e1c":"code","357d2e70":"code","dc8403b9":"code","02e9f56b":"code","56f16da7":"code","e7b5fafe":"code","67cf75f8":"markdown","6723c70a":"markdown"},"source":{"a1a4e1a7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","94b1fb7f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline","f3d870cd":"suicide_df = pd.read_csv('\/kaggle\/input\/suicide-rates-overview-1985-to-2016\/master.csv')","decab2c5":"suicide_df.head()","5b8352a2":"p_null= (len(suicide_df) - suicide_df.count())*100.0\/len(suicide_df)\np_null","3822d2af":"train = suicide_df[['year','suicides_no','sex','population']]\nsuicide_df.isnull().any() ","e6fc0dc9":"train['sex'].fillna('female', inplace = True)\ntrain.isnull().any()","cb0b1f9e":"train['sex'].interpolate(inplace = True)\ntrain.isnull().any()","ff44bfe7":"train['sex'].replace('female', 1, inplace = True)\ntrain['sex'].replace('male', 0, inplace = True)\ntrain.head()","52d063bc":"sns.heatmap(train.corr(),cmap='coolwarm',annot=True)","5ec7e74d":"min_max_scaler = preprocessing.MinMaxScaler()\nscaled = min_max_scaler.fit_transform(train[['sex']])\ntrain[['sex']] = pd.DataFrame(scaled)\n\ntrain.head()","ecc85e61":"X_train, X_test, y_train, y_test = train_test_split(train[['year','suicides_no','population']], train['sex'], test_size = 0.3)","829d32b3":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier","bddfb3f1":"drugTree = DecisionTreeClassifier(criterion=\"gini\")\ndrugTree.fit(X_train,y_train)\npredTree = drugTree.predict(X_test)\n\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)\n\nnbc = GaussianNB()\nnbc.fit(X_train,y_train)\ny_pred = nbc.predict(X_test)\n\nlogmodel = LogisticRegression()\nlogmodel.fit(X_train, y_train)\npredictions = logmodel.predict(X_test)","58a91d44":"from sklearn import metrics\n\nprint(\"DecisionTrees's Accuracy: \", metrics.accuracy_score(y_test, predTree))\nprint(classification_report(y_test, predTree))\npd.DataFrame(\nconfusion_matrix(y_test, predTree),\ncolumns=['Predicted No', 'Predicted Yes'],\nindex=['Actual No', 'Actual Yes']\n)   ","a3074a7f":"print(\"KNN's Accuracy: \", metrics.accuracy_score(y_test, pred))\nprint(classification_report(y_test, pred))\npd.DataFrame(\nconfusion_matrix(y_test, pred),\ncolumns=['Predicted No', 'Predicted Yes'],\nindex=['Actual No', 'Actual Yes']\n)  ","5027bd4d":"print(\"NB's Accuracy: \", metrics.accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred))\npd.DataFrame(\nconfusion_matrix(y_test, y_pred),\ncolumns=['Predicted No', 'Predicted Yes'],\nindex=['Actual No', 'Actual Yes']\n)","8232304f":"print(\"LR's Accuracy: \", metrics.accuracy_score(y_test, predictions ))\nprint(classification_report(y_test, predictions))\npd.DataFrame(\nconfusion_matrix(y_test, predictions),\ncolumns=['Predicted No', 'Predicted Yes'],\nindex=['Actual No', 'Actual Yes']\n)","c3bf25b9":"target=suicide_df['sex']\ntarget_count = target.value_counts()\nprint('Class 0:', target_count[0])\nprint('Class 1:', target_count[1])\nprint('Proportion:', round(target_count[0] \/ target_count[1], 2), ': 1')","d44ce516":"suicide_df.info()\nsuicide_df.describe()","0670263c":"suicide_df.drop(['suicides\/100k pop','HDI for year','gdp_per_capita ($)'],axis=1,inplace=True)\nsuicide_df.head()","58e89e1c":"suicide_df.groupby('age')['suicides_no'].agg('sum').plot(kind='bar',title='\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0441\u0443\u0438\u0446\u0438\u0434\u043e\u0432 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043c')","357d2e70":"suicide_df.groupby('sex')['suicides_no'].agg('sum').sort_values(ascending=False).plot(kind='bar',title='\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0441\u0443\u0438\u0446\u0438\u0434\u043e\u0432 \u0441\u0440\u0435\u0434\u0438 \u043c\u0443\u0436\u0447\u0438\u043d \u0438 \u0436\u0435\u043d\u0449\u0438\u043d')","dc8403b9":"alpha =0.8   #\nplt.figure(figsize=(15,20))\nsns.countplot(y='country', data=suicide_df, alpha=alpha)\nplt.title('\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0441\u0443\u0438\u0446\u0438\u0434\u043e\u0432 \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c')\nplt.show()","02e9f56b":"mask1=suicide_df['country-year']=='Kyrgyzstan2000'\nmask2=suicide_df['country-year']=='Kyrgyzstan2001'\nmask3=suicide_df['country-year']=='Kyrgyzstan2002'\nmask4=suicide_df['country-year']=='Kyrgyzstan2003'\nmask5=suicide_df['country-year']=='Kyrgyzstan2004'\nmask6=suicide_df['country-year']=='Kyrgyzstan2005'\nmask7=suicide_df['country-year']=='Kyrgyzstan2006'\nmask8=suicide_df['country-year']=='Kyrgyzstan2007'\nmask9=suicide_df['country-year']=='Kyrgyzstan2008'\nmask10=suicide_df['country-year']=='Kyrgyzstan2009'\nmask11=suicide_df['country-year']=='Kyrgyzstan2010'\nmask12=suicide_df['country-year']=='Kyrgyzstan2011'\nmask13=suicide_df['country-year']=='Kyrgyzstan2012'\nmask14=suicide_df['country-year']=='Kyrgyzstan2013'\nmask15=suicide_df['country-year']=='Kyrgyzstan2014'\nmask16=suicide_df['country-year']=='Kyrgyzstan2015'\nmask18=suicide_df['country-year']=='Kyrgyzstan1985'\nmask19=suicide_df['country-year']=='Kyrgyzstan1986'\nmask20=suicide_df['country-year']=='Kyrgyzstan1987'\nmask21=suicide_df['country-year']=='Kyrgyzstan1988'\nmask22=suicide_df['country-year']=='Kyrgyzstan1989'\nmask23=suicide_df['country-year']=='Kyrgyzstan1990'\nmask24=suicide_df['country-year']=='Kyrgyzstan1991'\nmask25=suicide_df['country-year']=='Kyrgyzstan1992'\nmask26=suicide_df['country-year']=='Kyrgyzstan1993'\nmask27=suicide_df['country-year']=='Kyrgyzstan1994'\nmask28=suicide_df['country-year']=='Kyrgyzstan1995'\nmask29=suicide_df['country-year']=='Kyrgyzstan1996'\nmask30=suicide_df['country-year']=='Kyrgyzstan1997'\nmask31=suicide_df['country-year']=='Kyrgyzstan1998'\nmask32=suicide_df['country-year']=='Kyrgyzstan1999'\nsuicide_kyrgyzstan=suicide_df[mask1|mask2|mask3|mask4|mask5|mask6|mask7|mask8|mask9|mask10|mask11|mask12|mask13|mask14|mask15|mask16\n                         |mask18|mask19|mask20|mask21|mask22|mask23|mask24|mask25|mask26|mask27|mask28|mask29|mask30|mask31|mask32]\nsuicide_kyrgyzstan.info()\nplt.figure(figsize=(15,6)) \npld=suicide_kyrgyzstan.groupby('age')['suicides_no'].agg('sum').sort_values(ascending=False).plot(kind='bar',title='\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0441\u0443\u0438\u0446\u0438\u0434\u043e\u0432 \u0432 \u041a\u044b\u0440\u0433\u044b\u0437\u0441\u0442\u0430\u043d\u0435 (\u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043c)')","56f16da7":"plt.figure(figsize=(20,5)) \nsuicide_kyrgyzstan.groupby('country-year')['suicides_no'].agg('sum').plot(kind='bar', title='\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0441\u0443\u0438\u0446\u0438\u0434\u043e\u0432 \u0432 \u041a\u044b\u0440\u0433\u044b\u0437\u0441\u0442\u0430\u043d\u0435(\u043f\u043e \u0433\u043e\u0434\u0430\u043c)')","e7b5fafe":"plt.figure(figsize=(15,5))\nsns.barplot(x = 'sex', y = 'suicides_no', hue = 'age',data =suicide_kyrgyzstan)","67cf75f8":"# \u041e\u0431\u0437\u043e\u0440 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439 \u0441\u0430\u043c\u043e\u0443\u0431\u0438\u0439\u0441\u0442\u0432 \u0441 1985 \u043f\u043e 2016****","6723c70a":"# ******\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0443\u0438\u0446\u0438\u0434\u043e\u0432 \u0432 \u043c\u0438\u0440\u0435 \u0438 \u0432 \u041a\u044b\u0440\u0433\u044b\u0437\u0441\u0442\u0430\u043d\u0435**"}}