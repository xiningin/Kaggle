{"cell_type":{"ca6b1362":"code","795162b1":"code","18858bde":"code","e9f51cbb":"code","c943f5a2":"code","cadf30b5":"code","bffb65f2":"code","8c56d7dd":"code","5d559415":"code","946041d6":"code","77a13d23":"code","32eaac52":"code","56fe7113":"code","716e180e":"code","bbaf080b":"code","c0f80ddc":"code","a0610eb8":"code","92b6d93c":"code","9e7083ba":"code","24541d9e":"code","e80afd22":"code","ff037cd3":"code","3a9c3c07":"code","9a272415":"code","d92148af":"code","3c47e889":"code","c8c56a6b":"markdown","e4e51cab":"markdown","283c4c93":"markdown","d233eb9a":"markdown","624283c1":"markdown","a7ba7658":"markdown","6a63abf6":"markdown","d08ccae8":"markdown","1294c5ee":"markdown","fa914673":"markdown","b7272482":"markdown"},"source":{"ca6b1362":"# Bibliotecas necess\u00e1rias\n# Manipula\u00e7\u00e3o de dados\nimport pandas as pd\nimport os\n# Redes Neurais\n# General Libs\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential, load_model\nfrom tensorflow.keras.utils import plot_model\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image\n#from tensorflow.keras.applications.inception_v3 import InceptionV3, preprocess_input\nfrom tensorflow.keras.applications.inception_resnet_v2 import InceptionResNetV2, preprocess_input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\n%matplotlib inline","795162b1":"path = (\"..\/input\/real-life-industrial-dataset-of-casting-product\/casting_data\/casting_data\/\")\ntrain_df = path + \"train\/def_front\/\"\ntrain_ok = path + \"train\/ok_front\/\"\n\ntest_def = path + 'test\/def_front\/'\ntest_ok = path + 'test\/ok_front\/'","18858bde":"fig, axes = plt.subplots(1, 2, figsize=(8,4))\naxes[0].imshow(plt.imread(train_df+os.listdir(train_df)[0]))\naxes[1].imshow(plt.imread(train_ok+os.listdir(train_ok)[0]))\naxes[0].set_title('Pe\u00e7a Defeituosa')\naxes[1].set_title('Pe\u00e7a OK')\nplt.show()","e9f51cbb":"# Using IDG to load images from directory\ntrain_idg = ImageDataGenerator(rescale=1.\/255, validation_split=0.3) # 30 percent validation split for training \ntest_idg = ImageDataGenerator(rescale=1.\/255)\n\n# Specify parameters\/arguments for data generation\nimg_size = (300, 300)\nbatch_size = 64\n\narg_train = {'target_size': img_size,\n             'color_mode': 'grayscale',\n             'class_mode': 'binary',\n             'batch_size': batch_size}\narg_test = {'target_size': img_size,\n            'color_mode': 'grayscale',\n            'class_mode': 'binary',\n            'batch_size': batch_size,\n            'shuffle': False}\n\ntrain = train_idg.flow_from_directory(directory=path+'train\/', subset='training', **arg_train)\n\n# Generator para parte valida\u00e7\u00e3o\nvalidation_generator = train_idg.flow_from_directory(directory=path+'train\/', subset='validation', **arg_train)\n# Generator para dataset de teste\ntest  = test_idg.flow_from_directory(directory=path+'test\/', **arg_test)\n\nnb_train_samples = train.samples\nnb_validation_samples = validation_generator.samples\nclasses = list(train.class_indices.keys())\nprint('Classes: '+str(classes))\nnum_classes  = len(classes)","c943f5a2":"train.class_indices","cadf30b5":"# Visualizando alguns exemplos do dataset por meio do Generator criado\nplt.figure(figsize=(15,15))\nfor i in range(9):\n    #gera subfigures\n    plt.subplot(330 + 1 + i)\n    batch = train.next()[0]*255\n    image = batch[0].astype('uint8')\n    plt.imshow(image)\nplt.show()","bffb65f2":"cnn = Sequential([ \n    Conv2D(32, 3, activation='relu', padding='same', strides=2,input_shape=img_size+(1,)),\n    MaxPooling2D(pool_size=2, strides=2),\n    Conv2D(64, 3, activation='relu', padding='same', strides=2),\n    MaxPooling2D(pool_size=2, strides=2),\n    Flatten(),\n    Dense(128, activation='relu'),\n    Dense(1, activation='sigmoid')  \n])\n\n#compila o  modelo\ncnn.compile(optimizer=Adam(learning_rate=0.001),loss='binary_crossentropy',metrics=['accuracy'])\n\ncnn.summary()\n\n","8c56d7dd":"plot_model(cnn, show_shapes=True, expand_nested=True, dpi=60)","5d559415":"# Treina com os parte dos dados\n#batch_size = 32\nepochs = 30\n\n#Salvar o melhor modelo\ncallbacks_list = [\n    keras.callbacks.ModelCheckpoint(\n        filepath='model.h5',\n        monitor='val_loss', save_best_only=True, verbose=1),\n    keras.callbacks.EarlyStopping(monitor='val_loss', patience=10,verbose=1)\n]\n\nhistory = cnn.fit(train,\n                    batch_size=batch_size,\n                    epochs=epochs,\n                    callbacks = callbacks_list,\n                    verbose=1,\n                    validation_data=test\n                 )","946041d6":"fig, ax = plt.subplots(1,2, figsize=(16,8))\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","77a13d23":"# Testa\nscore = cnn.evaluate(train,verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])\n\n","32eaac52":"y_pred = cnn.predict(test)\ny_pred = (y_pred >= 0.5).reshape(-1,)","56fe7113":"y_actual = test.classes[test.index_array]","716e180e":"from sklearn import metrics\ncm = metrics.confusion_matrix(y_actual, y_pred)\ndisp = metrics.ConfusionMatrixDisplay(confusion_matrix=cm)\ndisp.plot()\nplt.show()","bbaf080b":"from sklearn.metrics import confusion_matrix, classification_report\nprint(classification_report(y_actual, y_pred, digits=4))","c0f80ddc":"data_generator = ImageDataGenerator(\n        validation_split=0.2,\n        rotation_range=20,\n        width_shift_range=0.2,\n        height_shift_range=0.2,\n        preprocessing_function=preprocess_input,\n        shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True,\n        fill_mode='nearest')\nval_data_generator = ImageDataGenerator(preprocessing_function=preprocess_input,validation_split=0.2)","a0610eb8":"seed = 10\n# Generator para parte train\ntrain_generator = data_generator.flow_from_directory(path, target_size=img_size, shuffle=True, seed=seed,\n                                                     class_mode='categorical', batch_size=batch_size, subset=\"training\")\n# Generator para parte valida\u00e7\u00e3o\nvalidation_generator = val_data_generator.flow_from_directory(path, target_size=img_size, shuffle=False, seed=seed,\n                                                     class_mode='categorical', batch_size=batch_size, subset=\"validation\")\n\n# Generator para dataset de teste\ntest_generator = ImageDataGenerator(preprocessing_function=preprocess_input)\ntest_generator = test_generator.flow_from_directory(path, target_size=img_size, shuffle=False, seed=seed,\n                                                     class_mode='categorical', batch_size=batch_size)\n\nnb_train_samples = train_generator.samples\nnb_validation_samples = validation_generator.samples\nnb_test_samples = test_generator.samples\nclasses = list(train_generator.class_indices.keys())\nprint('Classes: '+str(classes))\nnum_classes  = len(classes)","92b6d93c":"# Visualizando alguns exemplos do dataset por meio do Generator criado\nplt.figure(figsize=(15,15))\nfor i in range(9):\n    #gera subfigures\n    plt.subplot(330 + 1 + i)\n    batch = train_generator.next()[0]*255\n    image = batch[0].astype('uint8')\n    plt.imshow(image)\nplt.show()","9e7083ba":"from keras.applications.vgg16 import VGG16\nbase_model = VGG16(include_top=False, input_shape=(300, 300, 3))\n\nx = base_model.output\nx = Flatten()(x)\nx = Dense(64, activation='relu')(x)\npredictions = Dense(num_classes, activation='softmax', kernel_initializer='random_uniform')(x)\n\nmodel = Model(inputs=base_model.input, outputs=predictions)\n\n# Freezing pretrained layers\nfor layer in base_model.layers:\n    layer.trainable=False\n    \noptimizer = Adam()\nmodel.compile(optimizer=optimizer,loss='categorical_crossentropy',metrics=['accuracy'])","24541d9e":"epochs = 30\n\n# Saving the best model\ncallbacks_list = [\n    keras.callbacks.ModelCheckpoint(\n        filepath='model.h5',\n        monitor='val_loss', save_best_only=True, verbose=1),\n    keras.callbacks.EarlyStopping(monitor='val_loss', patience=10,verbose=1)\n]\n\nhistory = model.fit(\n        train_generator,\n        steps_per_epoch=nb_train_samples \/\/ batch_size,\n        epochs=epochs,\n        callbacks = callbacks_list,\n        validation_data=validation_generator,\n        verbose = 1,\n        validation_steps=nb_validation_samples \/\/ batch_size)","e80afd22":"history_dict = history.history\nloss_values = history_dict['loss']\nval_loss_values = history_dict['val_loss']\n\nepochs_x = range(1, len(loss_values) + 1)\nplt.figure(figsize=(10,10))\nplt.subplot(2,1,1)\nplt.plot(epochs_x, loss_values, 'bo', label='Training loss')\nplt.plot(epochs_x, val_loss_values, 'b', label='Validation loss')\nplt.title('Training and validation Loss and Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\n#plt.legend()\nplt.subplot(2,1,2)\nacc_values = history_dict['accuracy']\nval_acc_values = history_dict['val_accuracy']\nplt.plot(epochs_x, acc_values, 'bo', label='Training acc')\nplt.plot(epochs_x, val_acc_values, 'b', label='Validation acc')\n#plt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Acc')\nplt.legend()\nplt.show()","ff037cd3":"from tensorflow.keras.models import load_model\n# Load the best saved model\nmodel = load_model('model.h5')","3a9c3c07":"# Using the validation dataset\nscore = model.evaluate_generator(validation_generator)\nprint('Val loss:', score[0])\nprint('Val accuracy:', score[1])","9a272415":"# Using the test dataset\nscore = model.evaluate_generator(test_generator)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","d92148af":"import itertools\n\n#Plot the confusion matrix. Set Normalize = True\/False\ndef plot_confusion_matrix(cm, classes, normalize=True, title='Confusion matrix', cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.figure(figsize=(10,10))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        cm = np.around(cm, decimals=2)\n        cm[np.isnan(cm)] = 0.0\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","3c47e889":"# Some reports\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport numpy as np\n\n#Confution Matrix and Classification Report\nY_pred = model.predict_generator(test_generator)#, nb_test_samples \/\/ BATCH_SIZE, workers=1)\ny_pred = np.argmax(Y_pred, axis=1)\ntarget_names = classes\n\n#Confution Matrix\ncm = confusion_matrix(test_generator.classes, y_pred)\nplot_confusion_matrix(cm, target_names, normalize=False, title='Confusion Matrix')\nprint('Classification Report')\nprint(classification_report(test_generator.classes, y_pred, target_names=target_names))","c8c56a6b":"**Lendo o Dataset**","e4e51cab":"**Sobre o Dataset:**\n- Este conjunto de dados fornece dados de imagem de impulsores para bombas submers\u00edveis.\n- Os dados da imagem s\u00e3o previamente rotulados com ok (normal) e defeito (defeito \/ anomalia). ","283c4c93":"**Carregamento e pr\u00e9-processamento**","d233eb9a":"**Criando e treinando o Modelo**","624283c1":"**Transfer Learning from a Deep Model**","a7ba7658":"#CNN","6a63abf6":"\nLink do Dataset: https:\/\/www.kaggle.com\/ravirajsinh45\/real-life-industrial-dataset-of-casting-product","d08ccae8":"**Modelo Simples**","1294c5ee":"Treino","fa914673":"**Testando e avaliando**","b7272482":"Transfer Learning with VGG16"}}