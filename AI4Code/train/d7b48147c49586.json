{"cell_type":{"f9f9934a":"code","008b9c4f":"code","6f8253d7":"code","4328108a":"code","dec0639f":"code","b722762d":"code","ae40722e":"code","36103240":"code","cc4537b9":"code","398d5f90":"code","c6efa790":"code","a8327ff9":"code","b9926251":"code","8d9a62f9":"code","f723d2b9":"markdown","31335c9c":"markdown","46743403":"markdown","e3f04c25":"markdown","9dc1c6e6":"markdown","8812a845":"markdown","86da1162":"markdown"},"source":{"f9f9934a":"import pandas as pd\nimport numpy as np\nimport re as re\ndf = pd.read_csv('..\/input\/laptop-specification-and-price-prediction\/laptop_price.csv')\ndf.head()","008b9c4f":"#removing the Unnamed column\ndf.drop(df.columns[df.columns.str.contains('unnamed',case = False)],axis = 1, inplace = True)\ndf.head()","6f8253d7":"# removing the rupee symbol from the price column\ndf['Price'] = df['Price'].str.replace(',', '')\ndf['Price'] = df['Price'].str.replace('\u20b9', '')\ndf.head(10)","4328108a":"# removing the text the from the all rows of the ram column.\n# so that we can treat it as number data.\ndf[\"RAM\"] = df.RAM.str.replace('\\s.*','')\n\ndf.head(10)","dec0639f":"# removing the text the from the all rows of the Warranty column.\n# so that we can treat it as number data.\ndf[\"Warranty\"] = df.Warranty.str.replace('\\s.*','')\ndf.head()","b722762d":"#droping irrelevant column such as operating system. Becuase it is same for every laptop.\n# droping rating becuase it is no where correlated with price.\n\ndf.drop(['rating', 'Operating System'], axis = 1, inplace = True)\ndf.head()","ae40722e":"df[\"Price\"] = df[\"Price\"].astype(str).astype(int)\nprint(df.dtypes)\n","36103240":"df['Storage'] = df['Storage'].replace('1 TB', '1024 GB', regex=True)\ndf","cc4537b9":"column = [Predictor for Predictor in df.columns if df[Predictor].dtype == 'O']\nfor Predictor in column:\n    labels_ordered= df.groupby([Predictor])['Price'].mean().sort_values().index\n    labels_ordered={k:i for i,k in enumerate(labels_ordered,0)}\n    df[Predictor]=df[Predictor].map(labels_ordered)\ndf.head(10)","398d5f90":"#seprating target vraible from features\nTarget = df['Price']\nfeatures = df.drop(columns='Price')","c6efa790":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler() # setting with_mean False, is for a reason !\n\na = scaler.fit_transform(features)\nfeatures = pd.DataFrame(a)","a8327ff9":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(features, Target, test_size=0.3, random_state=42,shuffle = True)\n\n","b9926251":"from sklearn.ensemble import RandomForestRegressor\nRandom_forest_regressor = RandomForestRegressor(random_state=10)\nRandom_forest_regressor.fit(X_train,y_train)","8d9a62f9":"print(\"Training score\")\nprint(Random_forest_regressor.score(X_train,y_train))\nprint('\\r')\nprint(\"Testing score\")\nprint(Random_forest_regressor.score(X_test,y_test))","f723d2b9":"# Checking the Accuracy","31335c9c":"# Standarising","46743403":"# Data cleaning","e3f04c25":"# Spliting the data into training and test set","9dc1c6e6":"# Trainig the model on Random forest regressor","8812a845":"# Loading library and dataset","86da1162":"# **Encoding**\nEncoding is use to deal with the categorical variable. \nwithout encoding it is not feasible to train catogarical data."}}