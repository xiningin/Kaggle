{"cell_type":{"a48aee80":"code","18155fc9":"code","789eb0a3":"code","2ca5aee3":"code","fa357b6d":"code","8496bd1e":"code","161714e7":"code","61c902a1":"code","5d070804":"code","4ef8e61b":"code","cca0abf8":"code","b53185dd":"code","b44cbf57":"code","f612bb41":"code","2bea920d":"code","c713b643":"code","bfc8c684":"code","7225b5fb":"code","e8a50c89":"code","869d2c60":"code","da7c8c4f":"markdown","0d8f3f38":"markdown","86f00f99":"markdown","f81010e8":"markdown","35bf0475":"markdown","2dffbb9b":"markdown","d663ffdb":"markdown","5f33a885":"markdown","fc897aa8":"markdown","5a315321":"markdown","eb11639d":"markdown","ac275184":"markdown","e2c9f578":"markdown","ef5fdcae":"markdown","57c6606c":"markdown","05f4666f":"markdown","2d3f6d0c":"markdown","e45198bd":"markdown"},"source":{"a48aee80":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport tensorflow as tf\n\n\nfrom tensorflow import feature_column\nfrom tensorflow.keras import layers\nfrom sklearn.model_selection import train_test_split\n\nprint(\"TensorFlow version: \",tf.version.VERSION)","18155fc9":"URL = 'https:\/\/storage.googleapis.com\/applied-dl\/heart.csv'\ndataframe = pd.read_csv(URL)\ndataframe.head()","789eb0a3":"dataframe.info()","2ca5aee3":"train, test = train_test_split(dataframe, test_size=0.2)\ntrain, val = train_test_split(train, test_size=0.2)\nprint(len(train), 'train examples')\nprint(len(val), 'validation examples')\nprint(len(test), 'test examples')","fa357b6d":"\n# A utility method to create a tf.data dataset from a Pandas Dataframe\ndef df_to_dataset(dataframe, shuffle=True, batch_size=32):\n  dataframe = dataframe.copy()\n  labels = dataframe.pop('target')\n  ds = tf.data.Dataset.from_tensor_slices((dict(dataframe), labels)) # TODO 2a\n  if shuffle:\n    ds = ds.shuffle(buffer_size=len(dataframe))\n  ds = ds.batch(batch_size)\n  return ds","8496bd1e":"batch_size = 5   #small because of small amount of data\ntrain_ds = df_to_dataset(train, batch_size=batch_size)\nval_ds = df_to_dataset(val, shuffle=False, batch_size=batch_size)\ntest_ds = df_to_dataset(test, shuffle=False, batch_size=batch_size)","161714e7":"# We will use this batch to demonstrate several types of feature columns\nexample_batch = next(iter(train_ds))[0]","61c902a1":"def demo(feature_column):\n  feature_layer = layers.DenseFeatures(feature_column)\n  print(feature_layer(example_batch).numpy())","5d070804":"age = feature_column.numeric_column(\"age\")\ntf.feature_column.numeric_column\nprint(age)","4ef8e61b":"demo(age)","cca0abf8":"age_buckets = tf.feature_column.bucketized_column(age, boundaries=[18, 25, 30, 35, 40, 45, 50, 55, 60, 65])\ndemo(age_buckets)","b53185dd":"thal = tf.feature_column.categorical_column_with_vocabulary_list(\n      'thal', ['fixed', 'normal', 'reversible'])\n\nthal_one_hot = tf.feature_column.indicator_column(thal)\ndemo(thal_one_hot)\nthal_embed = tf.feature_column.embedding_column(thal,dimension=1)\ndemo(thal_embed)","b44cbf57":"thal_hashed = tf.feature_column.categorical_column_with_hash_bucket(\n      'thal', hash_bucket_size=1000)\ndemo(tf.feature_column.indicator_column(thal_hashed))","f612bb41":"crossed_feature = tf.feature_column.crossed_column([age_buckets, thal], hash_bucket_size=1000)\ndemo(tf.feature_column.indicator_column(crossed_feature))","2bea920d":"feature_columns = []\n\n# numeric cols\nfor header in ['age', 'trestbps', 'chol', 'thalach', 'oldpeak', 'slope', 'ca']:\n  feature_columns.append(feature_column.numeric_column(header))\n\n# bucketized cols\nage_buckets = feature_column.bucketized_column(age, boundaries=[18, 25, 30, 35, 40, 45, 50, 55, 60, 65])\nfeature_columns.append(age_buckets)\n\n# indicator cols\nthal = feature_column.categorical_column_with_vocabulary_list(\n      'thal', ['fixed', 'normal', 'reversible'])\nthal_one_hot = feature_column.indicator_column(thal)\nfeature_columns.append(thal_one_hot)\n\n# embedding cols\nthal_embedding = feature_column.embedding_column(thal, dimension=8)\nfeature_columns.append(thal_embedding)\n\n# crossed cols\ncrossed_feature = feature_column.crossed_column([age_buckets, thal], hash_bucket_size=1000)\ncrossed_feature = feature_column.indicator_column(crossed_feature)\nfeature_columns.append(crossed_feature)","c713b643":"feature_layer = tf.keras.layers.DenseFeatures(feature_columns)","bfc8c684":"batch_size = 32\ntrain_ds = df_to_dataset(train, batch_size=batch_size)\nval_ds = df_to_dataset(val, shuffle=False, batch_size=batch_size)\ntest_ds = df_to_dataset(test, shuffle=False, batch_size=batch_size)\n","7225b5fb":"model = tf.keras.Sequential([\n  feature_layer,\n  layers.Dense(128, activation='relu'),\n  layers.Dense(128, activation='relu'),\n  layers.Dense(1)\n])\n\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\nhistory = model.fit(train_ds,\n          validation_data=val_ds,\n          epochs=5)\n","e8a50c89":"loss, accuracy = model.evaluate(test_ds)\nprint(\"Accuracy\", accuracy)","869d2c60":"def plot_curves(history, metrics):\n    nrows = 1\n    ncols = 2\n    fig = plt.figure(figsize=(10, 5))\n\n    for idx, key in enumerate(metrics):  \n        ax = fig.add_subplot(nrows, ncols, idx+1)\n        plt.plot(history.history[key])\n        plt.plot(history.history['val_{}'.format(key)])\n        plt.title('model {}'.format(key))\n        plt.ylabel(key)\n        plt.xlabel('epoch')\n        plt.legend(['train', 'validation'], loc='upper left');    \n    \n    \n\nplot_curves(history, ['loss', 'accuracy'])","da7c8c4f":"That's it for this NoteBook.","0d8f3f38":"# The Dataset\nWe will use a small dataset provided by the Cleveland Clinic Foundation for Heart Disease. There are several hundred rows in the CSV. Each row describes a patient, and each column describes an attribute. We will use this information to predict whether a patient has heart disease, which in this dataset is a binary classification task.\n\nFollowing is a description of this dataset. Notice there are both numeric and categorical columns.","86f00f99":"# Create an input pipeline using tf.data","f81010e8":"## Choose which columns to use\nWe have seen how to use several types of feature columns. Now we will use them to train a model. The goal of this tutorial is to show you the complete code (e.g. mechanics) needed to work with feature columns. We have selected a few columns to train our model below arbitrarily.\n\nKey point: If your aim is to build an accurate model, try a larger dataset of your own, and think carefully about which features are the most meaningful to include, and how they should be represented.","35bf0475":"# Introduction to Feature Columns\nLearning Objectives\n\n* Load a CSV file using Pandas\n* Create an input pipeline using tf.data\n* Create multiple types of feature columns","2dffbb9b":"# Use Pandas to create a dataframe","d663ffdb":"Next, we will wrap the dataframes with tf.data. This will enable us to use feature columns as a bridge to map from the columns in the Pandas dataframe to features used to train a model. If we were working with a very large CSV file (so large that it does not fit into memory), we would use tf.data to read it from disk directly. ","5f33a885":"## to-do","fc897aa8":"# Split the dataframe into train, validation, and test","5a315321":"# Hashed feature columns\nAnother way to represent a categorical column with a large number of values is to use a categorical_column_with_hash_bucket. This feature column calculates a hash value of the input, then selects one of the hash_bucket_size buckets to encode a string. When using this column, you do not need to provide the vocabulary, and you can choose to make the number of hash_buckets significantly smaller than the number of actual categories to save space.\n\nKey point: An important downside of this technique is that there may be collisions in which different strings are mapped to the same bucket. In practice, this can work well for some datasets regardless.","eb11639d":"# Bucketized columns\nOften, you don't want to feed a number directly into the model, but instead split its value into different categories based on numerical ranges. Consider raw data that represents a person's age. Instead of representing age as a numeric column, we could split the age into several buckets using a bucketized column. Notice the one-hot values below describe which age range each row matches.","ac275184":"# Demonstrate several types of feature column\n","e2c9f578":"# Crossed feature columns\nCombining features into a single feature, better known as feature crosses, enables a model to learn separate weights for each combination of features. Here, we will create a new feature that is the cross of age and thal. Note that crossed_column does not build the full table of all possible combinations (which could be very large). Instead, it is backed by a hashed_column, so you can choose how large the table is.","ef5fdcae":"# Categorical columns\nIn this dataset, thal is represented as a string (e.g. 'fixed', 'normal', or 'reversible'). We cannot feed strings directly to a model. Instead, we must first map them to numeric values. The categorical vocabulary columns provide a way to represent strings as a one-hot vector (much like you have seen above with age buckets). The vocabulary can be passed as a list using categorical_column_with_vocabulary_list, or loaded from a file using categorical_column_with_vocabulary_file.","57c6606c":"# Imports","05f4666f":"\n||\n|Age\t  Age in years\tNumerical|\tinteger|\n|Sex       |\t(1 = male; 0 = female)|\tCategorical|\tinteger|\n|CP        |\tChest pain type (0, 1, 2, 3, 4)|\tCategorical\t|integer|\n|Trestbpd  |\tResting blood pressure (in mm Hg on admission to the hospital)|\tNumerical|\tinteger|\n|Chol\t   |Serum cholestoral in mg\/dl|\tNumerical|\tinteger|\n|FBS       |\t(fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)|\tCategorical|\tinteger|\n|RestECG   |\tResting electrocardiographic results (0, 1, 2)|\tCategorical|\tinteger|\n|Thalach   |\tMaximum heart rate achieved|\tNumerical|\tinteger|\n|Exang     |\tExercise |induced angina (1 = yes; 0 = no)|\tCategorical|\tinteger|\n|Oldpeak   |\tST depression induced by exercise relative to rest|\tNumerical|\tfloat|\n|Slope     |\tThe slope of the peak exercise ST segment|\tNumerical\t|integer|\n|CA        |\tNumber of major vessels (0-3) colored by flourosopy|\tNumerical|\tinteger|\n|Thal      |\t3 = normal; 6 = fixed defect; 7 = reversable defect|\tCategorical|\tstring|\n|Target    |\tDiagnosis of heart disease (1 = true; 0 = false)|\tClassification|\tinteger|\n\n\n| Column|Description\t|\tFeatureType\t|Data Type  | \n|---|---|---|---|\n| Age\t| Age in years\tNumerical|\tinteger  | \n| Sex       |\t(1 = male; 0 = female)|\tCategorical|\tinteger| \n| CP        |\tChest pain type (0, 1, 2, 3, 4)|\tCategorical\t|integer|    \n|   |   |   |   |   \n|   |   |   |   |   \n|   |   |   |   |   \n|   |   |   |   |   \n|   |   |   |   |   \n|   |   |   |   |   \n|   |   |   |   |   \n|   |   |   |   |   \n|   |   |   |   |   \n|   |   |   |   |  \n|   |   |   |   |   ","2d3f6d0c":"# Introduction\nIn this notebook, you classify structured data (e.g. tabular data in a CSV file) using feature columns. Feature columns serve as a bridge to map from columns in a CSV file to features used to train a model. In later notebook, we will use Keras to define the model.","e45198bd":"\n## Numeric columns\nThe output of a feature column becomes the input to the model. A numeric column is the simplest type of column. It is used to represent real valued features. When using this column, your model will receive the column value from the dataframe unchanged."}}