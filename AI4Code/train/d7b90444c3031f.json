{"cell_type":{"92099515":"code","4a0a68b7":"code","862f9983":"code","743ff37f":"code","5ca306e2":"code","2d1cdfbb":"code","eb4c1516":"code","74d559ce":"code","9ea91d21":"code","337584e7":"code","f191d377":"code","fcd1f3da":"code","436ef441":"code","e7bc0258":"code","32b215c4":"code","0789c154":"code","12ca3bdb":"code","4e83b27c":"code","133447b3":"code","809a4822":"code","aaf37afe":"code","cecdefe5":"code","c1c9d061":"code","a8b5acef":"code","1c128b8d":"code","28b5ed7d":"code","50dc1a9d":"code","81393caf":"code","7ac96920":"code","92b471ca":"code","03d728db":"code","5ebc3b57":"code","5eb3eb9b":"code","e6eb170c":"code","f1abcb1e":"code","a68ad489":"code","08f925c7":"code","a8062da9":"code","ebe76ff8":"code","4a48669d":"code","f39d3956":"code","ce1bbd91":"code","c83db7dd":"code","60da8153":"code","17c96fde":"code","da01292e":"code","17be574e":"code","036c0018":"code","70d1f7dd":"code","299c8f08":"code","f85fe248":"code","786fee4e":"code","820c54d3":"code","7fe7aaab":"code","de851a95":"code","49b455c6":"code","5bb7d2fe":"code","49273c24":"code","ad2f3c2a":"code","dfe18a79":"code","9a027457":"code","14ac2d23":"code","7eef4064":"code","28632850":"code","834e6455":"code","ea8d1c3a":"code","4b8069cc":"code","6fa1e360":"code","bb47ac58":"code","e3027648":"code","7baa57e3":"code","fb84fc73":"code","368e3618":"code","8ad7a394":"code","9e0077a4":"code","9c7d8cb8":"code","10e079f7":"code","78437c7f":"code","1c8c3995":"code","67f21045":"code","8f2de0c6":"code","77c62a9d":"code","4ca6d33e":"code","941428a2":"code","020c1e7b":"code","4881419d":"code","5511db2a":"code","f5e30c4b":"code","f33b99f0":"code","dac55486":"code","f73cea43":"code","ecc83ef9":"code","fb291b60":"code","526a6b4e":"code","143e7778":"code","60fb635c":"code","b15cf4fe":"code","1d1573e8":"code","f66b49ae":"code","60b4bc6c":"code","9d7c7c1b":"code","7dee854a":"code","911cb50a":"code","d12f5853":"code","d58fea9d":"code","65c2b498":"code","1894a87e":"code","d449a7f5":"code","f8e95660":"code","76f609ea":"code","8be85bc2":"code","469332ad":"code","8e56b5c7":"code","f7663cac":"code","1eca792f":"code","8264749c":"code","dd794132":"code","02ca4dad":"code","5e266388":"code","4bc95cf7":"code","1656058e":"code","2c577063":"code","9904e201":"code","2fe2fdb9":"code","15b3cba8":"code","14bb4c8e":"code","50db8081":"code","c8213949":"code","730e486b":"code","0ea7b344":"code","226cd0d0":"code","bd6ed1ed":"code","fc511286":"code","2cd2506a":"code","62e12112":"code","6f56e01b":"code","606039ce":"code","0ae02679":"code","875cff59":"code","f38ab96a":"code","a508b564":"code","f260f147":"code","272853a8":"code","ce8bb7ad":"code","49dd0224":"code","99201c94":"markdown","0a544bab":"markdown","4c87fb38":"markdown","91bdee82":"markdown","e8294d29":"markdown","b7f42552":"markdown","de7022ba":"markdown","f28cde34":"markdown","5035a0d1":"markdown","be2a00b8":"markdown","1e3b9725":"markdown","96b5eabb":"markdown","1b89deeb":"markdown","8f62db46":"markdown","441e0082":"markdown","69f06850":"markdown","eb2b6393":"markdown","54f9c071":"markdown","5e3d4a3c":"markdown","6751dc29":"markdown","d2416362":"markdown","7282182b":"markdown","ae3babd7":"markdown","e504b425":"markdown","ca155599":"markdown","c4d52011":"markdown","ec1c7f70":"markdown","9c8440bf":"markdown","b1ba2acf":"markdown","3b7526bb":"markdown","7203e33a":"markdown","ae07566e":"markdown","769b603b":"markdown","d1229c17":"markdown","af31fd42":"markdown","4b2a3816":"markdown","9d4a902d":"markdown","55278a49":"markdown","95d17ece":"markdown","b923bed2":"markdown","55413c00":"markdown","bd51b145":"markdown","7f267deb":"markdown","0a424406":"markdown","7fdc91df":"markdown","54ee4298":"markdown","2649a19b":"markdown","458c6fc5":"markdown","e4553f28":"markdown","f2ce52cd":"markdown","a089c043":"markdown","a5a84803":"markdown","6e399119":"markdown","f83c773d":"markdown","9351eb52":"markdown","ed240a2d":"markdown","75cf6542":"markdown","cd02f45d":"markdown","e086cb45":"markdown","578f9705":"markdown","1161bd00":"markdown","8aab0a0b":"markdown","83020e43":"markdown","8fd5268f":"markdown"},"source":{"92099515":"%matplotlib inline\n\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom tqdm import tqdm\nfrom time import time\nimport pandas as pd\nimport numpy as np \nimport warnings; import random; import gensim; import re; import os; import gc\n\nwarnings.simplefilter('ignore')\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel, cosine_similarity\nfrom sklearn import preprocessing \n\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.stem.snowball import SnowballStemmer\nstop = stopwords.words('english')\n\nimport tensorflow as tf\ntf.logging.set_verbosity(tf.logging.ERROR)\nfrom __future__ import absolute_import, division, print_function\nimport tensorflow_hub as hub\n\nos.listdir(\"..\/input\/\")","4a0a68b7":"PATH = '..\/input\/data-science-for-good-careervillage'\n\nquestions = pd.read_csv(PATH + '\/questions.csv')\nanswers = pd.read_csv(PATH + '\/answers.csv')\nmatches = pd.read_csv(PATH + '\/matches.csv')\nemails = pd.read_csv(PATH + '\/emails.csv')\nprofessionals = pd.read_csv(PATH + '\/professionals.csv')\ntags = pd.read_csv(PATH + '\/tags.csv')\nstudents = pd.read_csv(PATH + '\/students.csv')\ntag_questions = pd.read_csv(PATH + '\/tag_questions.csv')\ntag_users = pd.read_csv(PATH + '\/tag_users.csv')\nquestion_scores = pd.read_csv(PATH + '\/question_scores.csv')\nanswer_scores = pd.read_csv(PATH + '\/answer_scores.csv')","862f9983":"#################################\n# Merging, stripping html, \n# get questions_id based on indices\n#################################\n\ndef new_question_answers():\n    try:\n        del questions; gc.collect(); del answers; gc.collect()\n    except:\n        pass\n    # read in questions and answers again\n    questions = pd.read_csv(PATH+'\/questions.csv')\n    answers = pd.read_csv(PATH+'\/answers.csv')\n    \n    return questions, answers\n\ndef merging(df1, df2, left, right):\n    return df1.merge(df2, how=\"inner\", left_on=left, right_on=right)    \n\n# unfathomable pattern\nnoise = re.compile(r'http\\S+|\\d+|[\\n\\r]|www\\S+|&lt;\/span&gt;|&lt;span|style=\"background-color:|transparent;\"&gt;|&nbsp;|&amp|http;')\n\ndef strip_html(s):\n    return re.sub('<[^<]+?>', ' ', str(s))\n\ndef process_text(df, col):\n    s = df[col].copy()\n    s = s.apply(strip_html)\n    s = s.str.replace(noise, ' ') # remove noise\n    s = s.str.replace('[^\\w\\s\\n\\t]',' ') # replace punctuations\n    s = s.str.replace('-',' ') # replace dashes\n    s = s.str.replace('\\\\', '') # remove \\\n    s = s.str.replace('\\d+','') # replacing digits\n    s = s.str.lower().str.split() # convert all str to lowercase\n    s = s.apply(lambda x: [item for item in x if item not in stop]) # remove stopwords\n    s = s.apply(' '.join) # convert list to str\n    return s\n\ndef get_question(q_id):\n    return questions[questions['questions_id'] == q_id]['questions_body'].tolist()[0]\n\ndef similar_questions(q_id, dic, top_n=10):\n    print(\"Current question: \" + get_question(q_id))\n    print('\\n')\n    print(\"Similar questions: \")\n    etc = dic[q_id][1:top_n]\n    for k, v in enumerate(etc):\n        print(get_question(v[1]))\n        print('\\n')\n        \ndef build_question_edges(df, cos_sim):\n    question_edges = {}\n    \n    for idx, row in df.iterrows():\n        similar_indices = cos_sim[idx].argsort()[:-20:-1]\n        similar_items = [(cos_sim[idx][i],\n                          df.iloc[i]['questions_id']) for i in similar_indices]\n        question_edges[row['questions_id']] = similar_items[:20]\n        \n    return question_edges        ","743ff37f":"answers['answers_date_added'] = pd.to_datetime(answers['answers_date_added'])\n\nanswers['day_of_week'] = answers['answers_date_added'].dt.dayofweek\n\ndays_dict = {0: 'Mon', 1: 'Tue', 2: 'Wed',\n             3: 'Thu', 4: 'Fri', 5: 'Sat',\n             6: 'Sun'}\n\ndow_cnt = answers['day_of_week'].apply(lambda x: days_dict[x]).value_counts()\n\n# df = answers.groupby(['answers_author_id', 'day_of_week'])['answers_id'].count().reset_index()\n\n# val_cnt = df['day_of_week'].value_counts()","5ca306e2":"plt.figure(figsize=(8,6))\nsns.barplot(dow_cnt.index,\n            dow_cnt.values)\nplt.title('Answers and Day of the week')\nplt.xlabel('Day of the Week')\nplt.ylabel('Number of Answers')\nplt.show()","2d1cdfbb":"questions['questions_date_added'] = pd.to_datetime(questions['questions_date_added'])\n\nquestions['day_of_week'] = questions['questions_date_added'].dt.dayofweek\n\ndow_cnt = questions['day_of_week'].apply(lambda x: days_dict[x]).value_counts()","eb4c1516":"plt.figure(figsize=(8,6))\nsns.barplot(dow_cnt.index,\n            dow_cnt.values)\nplt.title('Questions and Day of the week')\nplt.xlabel('Day of the Week')\nplt.ylabel('Number of Questions')\nplt.show()","74d559ce":"questions['questions_date_added'] = pd.to_datetime(questions['questions_date_added'])\n\nquestions = questions[questions['questions_date_added'] >= pd.datetime(2018, 1, 1)]\n\nqa = merging(questions, answers, 'questions_id', 'answers_question_id')\n\nqa['answers_date_added'] = pd.to_datetime(qa['answers_date_added'])\n\nqa['resp_time'] = (qa['answers_date_added'] - qa['questions_date_added']).dt.days\n\nqa = qa.sort_values('answers_date_added')\n\nfirst_qa = qa.groupby('questions_id').head(1)\n\nfirst_qa.shape # 7509\n\nunanswered = questions[~questions['questions_id'].isin(answers['answers_question_id'].tolist())][['questions_id', 'questions_title', 'questions_body']]","9ea91d21":"slow = first_qa[first_qa['resp_time'] > 7][['questions_id', 'questions_title', 'questions_body']] # 3542 \n\nslow_unanswered = pd.concat([slow, unanswered]) # 4334\n\nfast = first_qa[first_qa['resp_time'] <= 3][['questions_id', 'questions_title', 'questions_body']] # 3504\n\nmoderate = first_qa[(first_qa['resp_time'] > 3) & (first_qa['resp_time'] <= 7)][['questions_id', 'questions_title', 'questions_body']] # 463\n\nprint('Number of questions that are answered within 3 days: {}'.format(fast.shape[0]))\nprint('Number of questions that are answered between 3 and 7 days: {}'.format(moderate.shape[0]))\nprint('Number of questions that are still unanswered or took more than 7 days to be answered: {}'.format(slow_unanswered.shape[0]))","337584e7":"fast_body = process_text(fast, 'questions_body')\nslow_body = process_text(slow_unanswered, 'questions_body')\n\nfast_dist = fast_body.apply(lambda x: len(x.split(' ')))\nslow_dist = slow_body.apply(lambda x: len(x.split(' ')))","f191d377":"pal = sns.color_palette()\nplt.figure(figsize=(18, 8))\nplt.hist(fast_dist, bins=40, range=[0, 80], color=pal[9], normed=True, label='fast')\nplt.hist(slow_dist, bins=40, range=[0, 80], color=pal[1], normed=True, alpha=0.5, label='slow')\nplt.title('Normalised histogram of word count in question_body', fontsize=15)\nplt.legend()\nplt.xlabel('Number of words', fontsize=15)\nplt.ylabel('Probability', fontsize=15)\nplt.show()","fcd1f3da":"#################################\n# Create a tfidf matrix based on input\n#################################\n\ndef get_tfidf_matrix(s):\n    tfidf = TfidfVectorizer(analyzer='word',\n                     ngram_range=(1,2),\n                     min_df=3,\n                     max_df=0.001,\n                     stop_words='english')\n\n    tfidf_matrix = tfidf.fit_transform(s)\n    \n    vocab = tfidf.get_feature_names()\n\n    cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\n    \n    return cosine_sim, tfidf, vocab, tfidf_matrix\n\n_, _, fast_vocab, fast_matrix = get_tfidf_matrix(fast_body)\n_, _, slow_vocab, slow_matrix = get_tfidf_matrix(slow_body)","436ef441":"def word_score_pair(matrix, vocab, n=10, common=True):\n    mat_to_arr = matrix.toarray() # convert the 2d matrix to a 2d array\n    word_score = list(map(sum,zip(*mat_to_arr))) # fastest way to sum across all columns\n    \n    if common == True:\n        rank_words_idx = np.argsort(word_score)[::-1]\n    else:\n        rank_words_idx = np.argsort(word_score)\n        \n    idx_list = rank_words_idx[:n]\n    \n    for idx in idx_list:\n        print(\"word: {0}, score: {1:.3f}\".format(vocab[idx], word_score[idx]))","e7bc0258":"word_score_pair(fast_matrix, fast_vocab)","32b215c4":"word_score_pair(slow_matrix, slow_vocab)","0789c154":"word_score_pair(slow_matrix, slow_vocab, common=False)","12ca3bdb":"#################################\n# Create a tfidf matrix based on input\n#################################\n\ndef get_tfidf_matrix(s):\n    tfidf = TfidfVectorizer(analyzer='word',\n                     ngram_range=(1,2),\n                     min_df=3,\n                     max_df=0.95,\n                     stop_words='english')\n\n    tfidf_matrix = tfidf.fit_transform(s)\n    \n    vocab = tfidf.get_feature_names()\n\n    cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\n    \n    return cosine_sim, tfidf, vocab, tfidf_matrix","4e83b27c":"#################################\n# Create common functions for embeddings\n#################################\n\ndef generate_doc_vectors(s, embeddings_index, n):\n    words = str(s).split() \n    M = []\n    for w in words:\n        if w in embeddings_index:\n            M.append(embeddings_index[w])\n    v = np.array(M).sum(axis=0)\n    if type(v) != np.ndarray:\n        return np.zeros(n)\n    return v \/ np.sqrt((v ** 2).sum())\n\ndef get_cos_sim(xtrain_embeddings):\n    scl = preprocessing.StandardScaler()\n    xtrain_embeddings = np.array(xtrain_embeddings)\n    xtrain_embeddings = scl.fit_transform(xtrain_embeddings)\n\n    cos_sim = linear_kernel(xtrain_embeddings, xtrain_embeddings)\n    \n    return cos_sim, scl\n\ndef get_emb_mat(s, *args):\n    xtrain_embeddings = [generate_doc_vectors(x, *args) for x in s]\n\n    cos_sim, scl = get_cos_sim(xtrain_embeddings)\n    \n    return cos_sim, scl, xtrain_embeddings","133447b3":"EMBEDDING_FILE = '..\/input\/fasttext-crawl-300d-2m\/crawl-300d-2M.vec'\n\nfembeddings_index = {}\nf = open(EMBEDDING_FILE, encoding=\"utf8\")\ncount = 0\nfor line in f:    \n    count += 1\n    if count == 500000: \n        break\n    values = line.split()\n    word = values[0]\n    coefs = np.asarray(values[1:], dtype='float32')\n    fembeddings_index[word] = coefs\nf.close()","809a4822":"EMBEDDING_FILE = '..\/input\/glove6b50dtxt\/glove.6B.50d.txt'\n\ngembeddings_index = {}\nf = open(EMBEDDING_FILE)\ncount = 0\nfor line in f:\n    count += 1\n    if count == 500000: \n        break\n    values = line.split()\n    word = values[0]\n    coefs = np.asarray(values[1:], dtype='float32')\n    gembeddings_index[word] = coefs\nf.close()","aaf37afe":"hub_embed = hub.Module(\"https:\/\/tfhub.dev\/google\/universal-sentence-encoder\/2\")\n\ndef get_use_matrix(s):\n    embeddings = hub_embed(s)\n\n    with tf.Session() as session:\n        session.run([tf.global_variables_initializer(), tf.tables_initializer()])\n        xtrain_embeddings = session.run(embeddings)\n        \n    cos_sim, scl = get_cos_sim(xtrain_embeddings)\n    \n    return cos_sim, scl, xtrain_embeddings","cecdefe5":"#################################\n# Functions to clean a query\n# and get TF-IDF format\n#################################\n\ndef generate_ngrams(text, N):\n    grams = [text[i:i+N] for i in range(len(text)-N+1)]\n    grams = [\" \".join(b) for b in grams]\n    return grams\n\ndef clean_query(text):\n    text = strip_html(text)\n    text = re.sub(r'[^\\w\\s|\\n\\t]',' ', text) # TODO \\n\n    text = text.lower()\n    text = text.split(' ')\n    text = [word for word in text if word not in stop]\n    text = ' '.join(text)\n    text = ' '.join(text.split()) # strip extra whitespace\n    return text\n\ndef tokenize_clean_query(text):\n    return clean_query(text).split(' ')\n\ndef get_tf_format_input(tokens):\n    return generate_ngrams(tokens, 2) + generate_ngrams(tokens, 1)\n\ndef query_to_tokens(query):\n    query_tokens = tokenize_clean_query(query)\n    res = get_tf_format_input(query_tokens)\n    return res","c1c9d061":"#################################\n# Get indices of questions\n#################################\n\ndef top_idx(query_score, mat):\n    # dot with matrix to find similarity_score with embedding matrix\n    query_cos_sim = cosine_similarity(query_score, mat)\n\n    # get the top 10 scores in indices\n    relevant_q_indices = np.argsort(query_cos_sim.flatten())[::-1][:10]\n    \n    return relevant_q_indices\n\ndef tf_relevant_q_indices(query, tfidf, tfidf_matrix):\n    ngram_tokens = query_to_tokens(query)\n\n    query_tf_score = tfidf.transform(ngram_tokens).toarray()\n\n    query_score = np.mean(query_tf_score, axis=0).reshape(1, -1)\n    \n    return top_idx(query_score, tfidf_matrix)\n\ndef relevant_q_indices(query, embeddings_index, n, scl, emb):\n    # clean the query\n    query = clean_query(query)\n    \n    # get the score from embeddings\n    query_score = generate_doc_vectors(query, embeddings_index, n).reshape(1,-1)\n    \n    # normalize query_score\n    query_score = scl.transform(query_score)\n    \n    return top_idx(query_score, emb)\n\ndef use_relevant_q_indices(query, scl, emb):    \n    query = clean_query(query)\n    query_emb = hub_embed([query])\n\n    with tf.Session() as session:\n        session.run([tf.global_variables_initializer(), tf.tables_initializer()])\n        query_embeddings = session.run(query_emb)\n\n    query_score = scl.transform(query_embeddings)\n    \n    return top_idx(query_score, emb)","a8b5acef":"questions = questions[:1000]\n\nquestions['questions_title_body'] = questions['questions_title'] + \\\n                                    str(' ') + \\\n                                    questions['questions_body']\n\n# clean the text\ns = process_text(questions, 'questions_title_body').values ","1c128b8d":"query = 'i am intereted in data science and machine learning. do you have any tips for me?'","28b5ed7d":"tfidf_cos_sim, tfidf, vocab, tfidf_matrix = get_tfidf_matrix(s)\nt_q_indices = tf_relevant_q_indices(query, tfidf, tfidf_matrix)\n\nfast_cos_sim, fscl, femb = get_emb_mat(s, fembeddings_index, 300)\nf_q_indices = relevant_q_indices(query, fembeddings_index, 300, fscl, femb)\n\nglove_cos_sim, gscl, gemb = get_emb_mat(s, gembeddings_index, 50)\ng_q_indices = relevant_q_indices(query, gembeddings_index, 50, gscl, gemb)\n\nuse_cos_sim, uscl, uemb = get_use_matrix(s)\nu_q_indices = use_relevant_q_indices(query, uscl, uemb)","50dc1a9d":"t_q_indices, f_q_indices, g_q_indices, u_q_indices","81393caf":"def build_q_occ(q_indices):\n    d = {}\n    for _q_indices in q_indices:\n        score_weight = 1\n        for idx in _q_indices:\n            if idx in d:\n                d[idx] += score_weight\n            else:\n                d[idx] = score_weight\n            score_weight -= 0.1 # Borda count\n    return sorted(d.items(), key=lambda kv: kv[1], reverse=True)","7ac96920":"def print_questions(model, questions, q_indices, n=3):\n    print('Recommedation by {} ...'.format(model))\n    top_q_indices = q_indices[:n]\n    cnt = 1\n    for idx in top_q_indices:\n        print(cnt)\n        print(questions.iloc[idx]['questions_title'])\n        print(questions.iloc[idx]['questions_body'][:100])\n        if cnt == 3:\n            break\n        print('\\n')\n        cnt += 1\n    print('-----')","92b471ca":"print_questions('TF-IDF', questions, t_q_indices)\nprint_questions('FastText', questions, f_q_indices)\nprint_questions('GloVe', questions, g_q_indices)\nprint_questions('Universal Sentence Encoder', questions, u_q_indices)","03d728db":"q_indices = (t_q_indices, f_q_indices, g_q_indices, u_q_indices)\ntop_3_q_indices = build_q_occ(q_indices)[:3]\n\nprint('All 4 models\\' recommendation')\nrec_q_indices = top_3_q_indices\nfor idx_score in rec_q_indices:\n    print(questions.iloc[idx_score[0]]['questions_title'])\n    print(questions.iloc[idx_score[0]]['questions_body'][:100])\n    print('\\n')    ","5ebc3b57":"#################################\n# Get indices of professionals and\n# build professionals' profiles\n#################################\n\ndef get_q_id(questions, idx):\n    return questions.iloc[idx]['questions_id']\n\ndef get_p_ids(qa, q_id):\n    # returns a list of professional_ids who\n    # have answered that question\n    return qa[qa['questions_id'] == q_id]['answers_author_id'].tolist()\n\ndef p_profiles(p_ids, qa, mat):\n    all_scores = []\n    for p_id in p_ids:\n        p_avg_score = p_profile(p_id, qa, mat)\n        all_scores.append(p_avg_score)        \n    return all_scores    \n\ndef p_profile(p_id, qa, mat):\n    l = qa[qa['answers_author_id'] == p_id].index\n    scores = []\n    \n    for idx in l:\n        try:\n            scores.append(mat[idx].toarray().flatten())\n        except:\n            scores.append(mat[idx].flatten())\n                        \n    scores = np.asarray(scores)\n    scores = np.mean(scores, axis=0)\n    return scores\n\ndef get_p_relevant_words(scores, ans_vocab, top_n=10):\n    scores_idx = np.argsort(scores)[::-1][:top_n]\n\n    vocab = []\n    score = []\n    \n    for idx in scores_idx:\n        vocab.append(ans_vocab[idx])\n        score.append(scores[idx])\n    \n    vocab_score_df = pd.DataFrame({'vocab': vocab,\n                                   'score': score})\n    \n    return vocab_score_df","5eb3eb9b":"#################################\n# Returns the indices of 10 closest professionals \n# to a query based on professionals' profiles\n#################################\n\ndef t_relevant_p_indices(query, ans_tf, p_scores_matrix):\n    ngram_tokens = query_to_tokens(query)\n\n    query_tf_score = ans_tf.transform(ngram_tokens).toarray()\n\n    query_score = np.mean(query_tf_score, axis=0).reshape(1, -1)\n    \n    return top_idx(query_score, p_scores_matrix)\n\ndef relevant_p_indices(query, embeddings_index, n, scl, p_scores_matrix):\n    # clean the query\n    query = clean_query(query)\n    \n    # get the score from embeddings\n    query_score = generate_doc_vectors(query, embeddings_index, n).reshape(1,-1)\n    \n    # normalize query_score\n    query_score = scl.transform(query_score)\n    \n    return top_idx(query_score, p_scores_matrix)\n\ndef u_relevant_p_indices(query, scl, p_scores_matrix):    \n    query = clean_query(query)\n    query_emb = hub_embed([query])\n\n    with tf.Session() as session:\n        session.run([tf.global_variables_initializer(), tf.tables_initializer()])\n        query_embeddings = session.run(query_emb)\n\n    query_score = scl.transform(query_embeddings)\n    \n    return top_idx(query_score, p_scores_matrix)","e6eb170c":"qa = merging(questions, answers, 'questions_id', 'answers_question_id')\n\n# clean answers_body\nans = process_text(qa, 'answers_body').values\n\n# create a list of professionals_ids\np_ids = qa['answers_author_id'].unique().tolist()","f1abcb1e":"# Building profiles\n_, ans_tf, ans_vocab, ans_tfidf_matrix = get_tfidf_matrix(ans)\nt_p_scores = np.asarray(p_profiles(p_ids, qa, ans_tfidf_matrix))\nt_p_indices = t_relevant_p_indices(query, ans_tf, t_p_scores)\n\n_, fans_scl, fans_emb = get_emb_mat(ans, fembeddings_index, 300)\nf_p_scores = np.asarray(p_profiles(p_ids, qa, fans_emb))\nf_p_indices = relevant_p_indices(query, fembeddings_index, 300, fans_scl, f_p_scores)\n\n_, gans_scl, gans_emb = get_emb_mat(ans, gembeddings_index, 50)\ng_p_scores = np.asarray(p_profiles(p_ids, qa, gans_emb))\ng_p_indices = relevant_p_indices(query, gembeddings_index, 50, gans_scl, g_p_scores)\n\n_, uans_scl, uans_emb = get_use_matrix(ans)\nu_p_scores = np.asarray(p_profiles(p_ids, qa, uans_emb))\nu_p_indices = u_relevant_p_indices(query, uans_scl, u_p_scores)","a68ad489":"def build_p_occ(p_indices):\n    d = {}\n    for _p_indices in p_indices:\n        score_weight = 1   \n        for i in _p_indices:\n            p = p_ids[i]\n            if p in d:\n                d[p] += score_weight\n            else:\n                d[p] = score_weight\n            score_weight -= 0.1\n\n    return sorted(d.items(), key=lambda kv: kv[1], reverse=True)","08f925c7":"p_indices = (t_p_indices, f_p_indices, g_p_indices, u_p_indices)\ntop_3_p_indices = build_p_occ(p_indices)[:3] \n\nfor pid_score in top_3_p_indices:\n    print('professional_id: {}'.format(pid_score[0]))\n    p_headline = professionals[professionals['professionals_id'] == pid_score[0]]\\\n                                ['professionals_headline'].to_string()\n    print('Headline: {}'.format(p_headline))    \n    print('\\n')","a8062da9":"#################################\n# Returns the ranking of professionals\n# from Approach 1 and Approach 2\n#################################\n\ndef p_rank(questions, qa, q_indices, p_indices, n=5):\n    p_counts = {}\n\n    for _q_indices in q_indices:\n        score_weight = 1\n        for i in _q_indices:\n            for p in get_p_ids(qa, get_q_id(questions, i)):\n                if p in p_counts:\n                    p_counts[p] += score_weight\n                else:\n                    p_counts[p] = score_weight\n            score_weight -= 0.1        \n            \n    for _p_indices in p_indices:\n        score_weight = 1   \n        for i in _p_indices:\n            p = p_ids[i]\n            if p in p_counts:\n                p_counts[p] += score_weight\n            else:\n                p_counts[p] = score_weight\n            score_weight -= 0.1\n        \n    p_counts = sorted(p_counts.items(), key=lambda kv: kv[1], reverse=True)[:n]\n    return [p_count[0] for p_count in p_counts]","ebe76ff8":"#################################\n# Recommend top 5 professionals\n# with their vocab_score \n#################################\n\ndef who_to_rec(p_counts, professionals, qa, ans_vocab, ans_tfidf_matrix):        \n    count = 1\n    for p in p_counts[:3]:\n        print('Recommending rank {} professional'.format(count))\n\n        print('Headline: {}'.format(professionals[professionals['professionals_id'] == p]\\\n                                    ['professionals_headline'].tolist()[0]))\n\n        print('Top 3 highest scores words:')\n\n        p_scores = p_profile(p, qa, ans_tfidf_matrix)\n\n        print(get_p_relevant_words(p_scores, ans_vocab, 3))\n\n        print('\\n')\n\n        count += 1","4a48669d":"who_to_rec(p_rank(questions, qa, q_indices, p_indices), professionals, qa, ans_vocab, ans_tfidf_matrix)","f39d3956":"#################################\n# Add a function to \"streamline\" \n# all the functions with just a query\n# returns a list of top 5 professionals\n#################################\n\ndef build_RecSys(s, ans, qa, p_ids):    \n    \n    #################################\n    # questions similarity\n    #################################\n    _, tfidf, vocab, tfidf_matrix = get_tfidf_matrix(s)\n    _, fscl, femb = get_emb_mat(s, fembeddings_index, 300)\n    _, gscl, gemb = get_emb_mat(s, gembeddings_index, 50)\n    # _, uscl, uemb = get_use_matrix(s) \n\n    #################################\n    # professionals' profile\n    #################################\n    _, ans_tf, ans_vocab, ans_tfidf_matrix = get_tfidf_matrix(ans)\n    _, fans_scl, fans_emb = get_emb_mat(ans, fembeddings_index, 300)\n    _, gans_scl, gans_emb = get_emb_mat(ans, gembeddings_index, 50)\n    # _, uans_scl, uans_emb = get_use_matrix(ans)\n    \n    t_p_scores = np.asarray(p_profiles(p_ids, qa, ans_tfidf_matrix))\n    f_p_scores = np.asarray(p_profiles(p_ids, qa, fans_emb))\n    g_p_scores = np.asarray(p_profiles(p_ids, qa, gans_emb))\n    # u_p_scores = np.asarray(p_profiles(p_ids, qa, uans_emb))\n\n    return tfidf, tfidf_matrix, fscl, femb, gscl, gemb, ans_tf, fans_scl, gans_scl, t_p_scores, f_p_scores, g_p_scores, vocab\n\n    \ndef run_RecSys(query, questions, qa, n, tfidf, tfidf_matrix, fscl, femb, gscl, gemb, ans_tf, fans_scl, gans_scl, t_p_scores, f_p_scores, g_p_scores):\n    \n    #################################\n    # questions similarity\n    #################################\n    \n    t_q_indices = tf_relevant_q_indices(query, tfidf, tfidf_matrix)\n    f_q_indices = relevant_q_indices(query, fembeddings_index, 300, fscl, femb)\n    g_q_indices = relevant_q_indices(query, gembeddings_index, 50, gscl, gemb)\n    # u_q_indices = use_relevant_q_indices(query, uscl, uemb)\n    \n    q_indices = (t_q_indices, f_q_indices, g_q_indices)\n    \n    #################################\n    # professionals' profile\n    #################################\n    \n    t_p_indices = t_relevant_p_indices(query, ans_tf, t_p_scores)\n    f_p_indices = relevant_p_indices(query, fembeddings_index, 300, fans_scl, f_p_scores)\n    g_p_indices = relevant_p_indices(query, gembeddings_index, 50, gans_scl, g_p_scores)\n    # u_p_indices = u_relevant_p_indices(query, uans_scl, u_p_scores)\n    \n    p_indices = (t_p_indices, f_p_indices, g_p_indices)\n    \n    combined_p_rank = p_rank(questions, qa, q_indices, p_indices, n)\n    \n    return combined_p_rank","ce1bbd91":"match_email = merging(matches, emails, 'matches_email_id', 'emails_id')\n\np_match_emails = match_email.groupby('emails_recipient_id').count()\n\np_match_emails = pd.DataFrame(p_match_emails['matches_email_id'].copy()).reset_index()\n\n# p_match_emails.head()\n\np_emails = merging(professionals, emails, 'professionals_id', 'emails_recipient_id')\n\n# p_emails.head()\n\np_received_emails = p_emails.groupby('emails_recipient_id').count()\n\np_received_emails = pd.DataFrame(p_received_emails['professionals_id'].copy()).reset_index()\n\n# p_received_emails.head()\n\np_ans = answers.groupby('answers_author_id').count()\n\np_ans_cnt = pd.DataFrame(p_ans['answers_id'].copy()).reset_index()","c83db7dd":"p_received_match = merging(p_match_emails, p_received_emails, 'emails_recipient_id', 'emails_recipient_id')\n\np_received_match_ans = merging(p_received_match, p_ans_cnt, 'emails_recipient_id', 'answers_author_id')\n\np_received_match_ans.drop('answers_author_id', axis=1, inplace=True)\n\np_received_match_ans = p_received_match_ans.rename(columns={\"matches_email_id\": \"emails_received\", \n                                                             \"professionals_id\": \"questions_received\",\n                                                             \"answers_id\": \"questions_answered\"})\n\np_received_match_ans.head()","60da8153":"p_received_match_ans['pct'] = p_received_match_ans['questions_answered'] \/ p_received_match_ans['questions_received'] \n\np_received_match_ans['pct'].describe()","17c96fde":"questions, answers = new_question_answers()\nqa = merging(questions, answers, 'questions_id', 'answers_question_id')","da01292e":"questions, answers = new_question_answers()\nqa = merging(questions, answers, 'questions_id', 'answers_question_id')\n\nqa['answers_date_added'] = pd.to_datetime(qa['answers_date_added'])\nqa['questions_date_added'] = pd.to_datetime(qa['questions_date_added'])\n\nqa['resp_time'] = (qa['answers_date_added'] - qa['questions_date_added']).dt.days","17be574e":"qa['cnt'] = 1\np_cnt = qa.groupby('answers_author_id')['cnt'].sum()\np_cnti = p_cnt[p_cnt > 20].index\np_cnti = p_cnti.tolist()\n\np_resp_time = qa.groupby('answers_author_id')['resp_time'].mean()\np_resp_timei = p_resp_time[p_resp_time < 5].index\np_resp_timei = p_resp_timei.tolist()\n\nits = list(set(p_cnti).intersection(set(p_resp_timei)))\n\nprint('Number of professionals who answered more than 20 questions and have an average response time of less than 5 days: {}'.format(len(its)))","036c0018":"SUCCESS_P_ID = '96bbbdd06a334805a0501034d9df1aa4' \nFAILED_P_ID = '7667c23d26ab409ca3e49758f5367925'","70d1f7dd":"#################################\n# For a given professional,\n# check how many questions have been suggested by CV\n# and how many of them have been answered\n#################################\n\ndef suggest_vs_ans(TEST_P_ID):\n    print('Professional\\'s headline: {}\\n'.format(professionals[professionals['professionals_id'] == TEST_P_ID]\\\n                                                ['professionals_headline'].tolist()[0]))\n    \n    p_emails_TEST = p_emails[p_emails['professionals_id'] == TEST_P_ID] # 27\n\n    df = merging(p_emails_TEST, match_email, 'emails_id', 'matches_email_id')\n\n    q_suggested = df['matches_question_id'].tolist()\n\n    q_suggested_l = questions[questions['questions_id'].isin(q_suggested)]\n\n    q_answered_l = qa[qa['answers_author_id'] == TEST_P_ID]\n\n    print('CareerVillage suggested {} questions'.format(q_suggested_l.shape[0]))\n    print('Professional answered {} questions'.format(q_answered_l.shape[0]))\n\n    overlap = set(q_suggested_l['questions_id'].tolist()).intersection(set(q_answered_l['questions_id'].tolist()))\n\n    print('{} question(s) suggested were answered'.format(len(overlap)))\n    \n    return q_suggested_l, q_answered_l\n\n#################################\n# Create a TEST_qa which includes \n# TEST_P_ID's answers in a period\n# and validate result with VALID_qa\n#################################\n\ndef test_valid_split(TEST_P_ID, dates):\n    \n    TEST_start, TEST_end, VALID_start, VALID_end = dates\n    \n    TEST_qa = qa[(qa['answers_date_added'] >= TEST_start) &\n                 (qa['answers_date_added'] < TEST_end)].reset_index()\n\n    VALID_qa = qa[(qa['answers_date_added'] >= VALID_start) &\n                  (qa['answers_date_added'] < VALID_end)].reset_index()\n    \n\n    TEST_qa_p = TEST_qa[TEST_qa['answers_author_id'] == TEST_P_ID].drop_duplicates(subset=['questions_id'])\n\n    VALID_qa = VALID_qa[VALID_qa['answers_author_id'] == TEST_P_ID].drop_duplicates(subset=['questions_id'])\n    \n    print('TEST_P_ID has {0} out of {1} entries in TEST_qa'.format(TEST_qa_p.shape[0], TEST_qa.shape[0]))\n    print('TEST_P_ID has {0} entries in VALID_qa'.format(VALID_qa.shape[0]))\n    \n    return TEST_qa, VALID_qa\n\n#################################\n# For each question in VALID_qa,\n# check whether will the question\n# be recommended by TF-IDF\n#################################\n\ndef calc_hit_rate(correct_idx, VALID_qa, TEST_ans_tf, TEST_t_p_scores):\n    VALID_qa['questions_title_body'] = VALID_qa['questions_title'] + \\\n                                       str(' ') + \\\n                                       VALID_qa['questions_body']\n    \n    len_VALID_qa = VALID_qa.shape[0]\n    \n    hit_rate = 0\n\n    for k, v in VALID_qa.iterrows():\n        query = v['questions_title_body']\n\n        t_p_indices = list(t_relevant_p_indices(query, TEST_ans_tf, TEST_t_p_scores))\n\n        if correct_idx in t_p_indices:\n            hit_rate += 1\n\n    success_rate = hit_rate \/ len_VALID_qa * 100\n    \n    print('Success rate of RecSys out of {} questions is {:.1f}%.'.format(len_VALID_qa, (success_rate)))\n\n#################################\n# Get examples of questions suggested\n# by CV and questions answered by TEST_P_ID\n#################################\n\ndef print_egs(q_suggested_l, q_answered_l, n=5):\n    print('Examples of questions suggested by CV:')\n    cnt = 1\n    for q_eg in q_suggested_l.sort_values('questions_date_added')['questions_title'].tolist()[:n]:\n        print('{0}. {1}'.format(cnt, q_eg))\n        cnt += 1\n\n    cnt = 1\n    print('\\nExamples of questions answered by TEST_P_ID:')\n    for q_eg in q_answered_l.sort_values('answers_date_added')['questions_title'].tolist()[:n]:\n        print('{0}. {1}'.format(cnt, q_eg))\n        cnt += 1","299c8f08":"q_suggested_l, q_answered_l = suggest_vs_ans(FAILED_P_ID)","f85fe248":"print_egs(q_suggested_l, q_answered_l)","786fee4e":"FAILED_dates = [pd.datetime(2016,5,1), pd.datetime(2016,5,20), pd.datetime(2016,5,20), pd.datetime(2016,5,30)] # failed\nTEST_qa, VALID_qa = test_valid_split(FAILED_P_ID, FAILED_dates)","820c54d3":"# Building profiles for all professionals in the given period\nTEST_p_ids = TEST_qa['answers_author_id'].unique().tolist()\n\nTEST_ans = process_text(TEST_qa, 'answers_body')\n\n_, TEST_ans_tf, TEST_ans_vocab, TEST_ans_tfidf_matrix = get_tfidf_matrix(TEST_ans)\nTEST_t_p_scores = np.asarray(p_profiles(TEST_p_ids, TEST_qa, TEST_ans_tfidf_matrix))","7fe7aaab":"# Get relevant words for TEST_P_ID\nTEST_p_scores = p_profile(FAILED_P_ID, TEST_qa, TEST_ans_tfidf_matrix)\n\nget_p_relevant_words(TEST_p_scores, TEST_ans_vocab)","de851a95":"calc_hit_rate(TEST_p_ids.index(FAILED_P_ID), VALID_qa, TEST_ans_tf, TEST_t_p_scores)","49b455c6":"q_suggested_l, q_answered_l = suggest_vs_ans(SUCCESS_P_ID)","5bb7d2fe":"print_egs(q_suggested_l, q_answered_l, 6)","49273c24":"SUCCESS_dates = [pd.datetime(2016,12,1), pd.datetime(2017,3,7), pd.datetime(2017,3,7), pd.datetime(2017,3,9)] # success\nTEST_qa, VALID_qa = test_valid_split(SUCCESS_P_ID, SUCCESS_dates)","ad2f3c2a":"# Building profiles for all professionals in the given period\nTEST_p_ids = TEST_qa['answers_author_id'].unique().tolist()\n\nTEST_ans = process_text(TEST_qa, 'answers_body')\n\n_, TEST_ans_tf, TEST_ans_vocab, TEST_ans_tfidf_matrix = get_tfidf_matrix(TEST_ans)\nTEST_t_p_scores = np.asarray(p_profiles(TEST_p_ids, TEST_qa, TEST_ans_tfidf_matrix))","dfe18a79":"# Get relevant words for TEST_P_ID\nTEST_p_scores = p_profile(SUCCESS_P_ID, TEST_qa, TEST_ans_tfidf_matrix)\n\nget_p_relevant_words(TEST_p_scores, TEST_ans_vocab)","9a027457":"calc_hit_rate(TEST_p_ids.index(SUCCESS_P_ID), VALID_qa, TEST_ans_tf, TEST_t_p_scores)","14ac2d23":"def vocab_scores_update(scores, vocab_score_df, indices, ans_vocab, top_n=10):\n    new_weight = 0.5 \/ len(indices) \n\n    scores_idx = np.argsort(scores)[::-1][:top_n]\n    \n    total_scores = sum(scores)\n                    \n    for idx in indices: \n        original_weight = scores[scores_idx[idx]] \/ total_scores\n        scores[scores_idx[idx]] = new_weight * scores[scores_idx[idx]] \/ original_weight\n        \n    return scores","7eef4064":"query = 'i am interested in pursuing a career in professional football. i enjoy playing football as a kid and want to be in the nfl'","28632850":"questions, answers = new_question_answers()\n\nquestions = questions[:1000]\nqa = merging(questions, answers, 'questions_id', 'answers_question_id')\n\n# clean answers_body\nans = process_text(qa, 'answers_body').values\n\n# create a list of professionals_ids\np_ids = qa['answers_author_id'].unique().tolist()","834e6455":"_, ans_tf, ans_vocab, ans_tfidf_matrix = get_tfidf_matrix(ans)\nt_p_scores = np.asarray(p_profiles(p_ids, qa, ans_tfidf_matrix))\n\nt_p_indices = t_relevant_p_indices(query, ans_tf, t_p_scores)\n\nps = [p_ids[pid] for pid in t_p_indices][:5]\n\nprint('Top 5 relevant professionals:')\nps","ea8d1c3a":"professionals[professionals['professionals_id'].isin(ps)]","4b8069cc":"TEST_P_ID = '0d134d3f07a2408a88983d9069c625e6'\n\nTEST_P_SCORES = p_profile(TEST_P_ID, qa, ans_tfidf_matrix)    \n\nscore_profile = get_p_relevant_words(TEST_P_SCORES, ans_vocab) \n\nscore_profile","6fa1e360":"update = vocab_scores_update(TEST_P_SCORES, score_profile, [5], ans_vocab)\n\nget_p_relevant_words(update, ans_vocab)","bb47ac58":"t_p_scores[t_p_indices[1]] = update\n\nupdated_t_p_indices = t_relevant_p_indices(query, ans_tf, t_p_scores)\n\nps = [p_ids[pid] for pid in updated_t_p_indices][:5]\n\nprint('Top 5 relevant professionals after update:')\nps","e3027648":"query = 'i am interested in ui ux design. suggestions please'\n\nt_p_indices = t_relevant_p_indices(query, ans_tf, t_p_scores)\n\nprint('Top 5 relevant professionals:')\n[p_ids[pid] for pid in t_p_indices][:5]","7baa57e3":"TEST_P_ID = 'a3fae772a6cf4cb195da37458e937572'\n\nTEST_P_SCORES = p_profile(TEST_P_ID, qa, ans_tfidf_matrix)    \n\nscore_profile = get_p_relevant_words(TEST_P_SCORES, ans_vocab) \n\nscore_profile","fb84fc73":"response = 'hi there. it is awesome to know that you are interested in the field of ui ux design. i work as a ui ux designed and my job involves coming up with design that will attract users or make them stay more engaged with the app.'","368e3618":"def resp_p_profile(p_id, qa, mat, response):\n    \n    resp_tokens = query_to_tokens(response)\n\n    resp_tf_score = ans_tf.transform(resp_tokens).toarray()\n\n    resp_score = np.mean(resp_tf_score, axis=0).reshape(1, -1).flatten()\n    \n    l = qa[qa['answers_author_id'] == p_id].index\n    original_scores = []\n    \n    for idx in l:\n        try:\n            original_scores.append(mat[idx].toarray().flatten())\n        except:\n            original_scores.append(mat[idx].flatten())\n                            \n    final_scores = np.vstack((resp_score, np.asarray(original_scores)))    \n    final_scores = np.mean(final_scores, axis=0)\n    return final_scores","8ad7a394":"t_p_scores[p_ids.index(TEST_P_ID)] = resp_p_profile(TEST_P_ID, qa, ans_tfidf_matrix, response)\n\nscore_profile = get_p_relevant_words(t_p_scores[p_ids.index(TEST_P_ID)], ans_vocab) \n\nscore_profile","9e0077a4":"import datetime\n\nquestions, answers = new_question_answers()\n\nquestions['questions_date_added'] = pd.to_datetime(questions['questions_date_added'])\n\nquestions_d1 = questions[(questions['questions_date_added'] >= pd.datetime(2017, 3, 20)) &\n                         (questions['questions_date_added'] < pd.datetime(2017, 3, 21))]\n\nquestions_d2 = questions[(questions['questions_date_added'] >= pd.datetime(2017, 3, 21)) &\n                         (questions['questions_date_added'] < pd.datetime(2017, 3, 22))]\n\nquestions_d3 = questions[(questions['questions_date_added'] >= pd.datetime(2017, 3, 22)) &\n                         (questions['questions_date_added'] < pd.datetime(2017, 3, 23))]\n\nprint('Number of questions on day 1:', questions_d1.shape[0])\nprint('Number of questions on day 2:', questions_d2.shape[0])\nprint('Number of questions on day 3:', questions_d3.shape[0])","9c7d8cb8":"questions = questions[(questions['questions_date_added'] >= pd.datetime(2017, 2, 20)) &\n                      (questions['questions_date_added'] < pd.datetime(2017, 3, 20))].reset_index()\n\nquestions['questions_title_body'] = questions['questions_title'] + \\\n                                     str(' ') + \\\n                                     questions['questions_body']\n\ns = process_text(questions, 'questions_title_body').values\n\nTRAIN_qa = merging(questions, answers, 'questions_id', 'answers_question_id')","10e079f7":"questions_d1[questions_d1['questions_author_id'] == 'c17fb778ae734737b08f607e75a87460'][['questions_author_id', 'questions_date_added', 'questions_title', 'questions_body']]","78437c7f":"spam = TRAIN_qa[TRAIN_qa['questions_author_id'] == 'c17fb778ae734737b08f607e75a87460']['answers_author_id'].value_counts()[:5].index.tolist()\n\nprint('Top 5 professionals that have answered questions by c17fb778ae734737b08f607e75a87460:')\nspam","1c8c3995":"# clean answers_body\nans = process_text(TRAIN_qa, 'answers_body').values\n\n# create a list of professionals_ids\np_ids = TRAIN_qa['answers_author_id'].unique().tolist()","67f21045":"print('Number of professionals in the period: {}'.format(len(p_ids))) \nprint('Number of questions in the period: {}'.format(s.shape[0])) ","8f2de0c6":"# randomly assign notification settings\nnp.random.seed(seed=42)\n\ndaily_noti = list(np.random.choice([0, 1], len(p_ids), replace=True))\n\nnoti_freq = pd.DataFrame({'professionals_id': p_ids,\n                          'daily_noti': daily_noti})\n\nnoti_freq.head()\n\ndaily_p = noti_freq[noti_freq['daily_noti'] == 1].index.tolist()\nthree_d_p = noti_freq[noti_freq['daily_noti'] == 0].index.tolist()","77c62a9d":"_ = gc.collect()","4ca6d33e":"%%time\ntfidf, tfidf_matrix, fscl, femb, gscl, gemb, ans_tf, fans_scl, gans_scl, t_p_scores, f_p_scores, g_p_scores, VOCAB = build_RecSys(s, ans, TRAIN_qa, p_ids)","941428a2":"#################################\n# Assigns 5 professionals to \n# each question in df\n#################################\n\ndef assign(df, qa, questions, dont_ask):\n    df['questions_title_body'] = df['questions_title'] + \\\n                                 str(' ') + \\\n                                 df['questions_body']\n    \n    pid_qid_match = [[] for i in range(len(p_ids))]\n    \n    skip = []\n    \n    for k, v in df.iterrows():\n        query = v['questions_title_body']\n        qid = v['questions_id']\n        \n        recommended_p = run_RecSys(query, questions, qa, 10, tfidf, tfidf_matrix, fscl, femb, gscl, gemb, ans_tf, fans_scl, gans_scl, t_p_scores, f_p_scores, g_p_scores)\n        \n        cnt = 0\n        for pid in recommended_p:    \n            \n            if cnt >= 5: \n                break\n            \n            # get professional_id's idx\n            p_idx = p_ids.index(pid)\n            \n            if p_idx not in dont_ask:\n                if len(pid_qid_match[p_idx]) < 5:                    \n                    pid_qid_match[p_idx].append(qid)\n                    cnt += 1\n\n            if p_idx in three_d_p and p_idx not in skip:\n                skip.append(p_idx)\n                \n    for p_idx in skip:\n        dont_ask.append(p_idx)\n\n    return pid_qid_match, dont_ask","020c1e7b":"dont_ask = []\nmatch_d1, dont_ask = assign(questions_d1, TRAIN_qa, questions, dont_ask)","4881419d":"for pid in spam:\n    print(\"{} has been targeted with {} questions\".format(pid, len(match_d1[p_ids.index(pid)])))","5511db2a":"match_d2, dont_ask = assign(questions_d2, TRAIN_qa, questions, dont_ask)\nmatch_d3, dont_ask = assign(questions_d3, TRAIN_qa, questions, dont_ask)","f5e30c4b":"noti_freq['d1'] = pd.Series((v for v in match_d1)) \nnoti_freq['d2'] = pd.Series((v for v in match_d2)) \nnoti_freq['d3'] = pd.Series((v for v in match_d3)) ","f33b99f0":"noti_freq[5:10]","dac55486":"TRAIN_qa[TRAIN_qa['answers_author_id'] == 'b8b77df14ad94e7bb64f14eeffb72d9b']['answers_body'].tolist()[0]","f73cea43":"questions_d1[questions_d1['questions_id'] == '42cb4b71d7d54ee78ebab3f04d2e267f']['questions_title_body'].tolist()[0]","ecc83ef9":"questions, answers = new_question_answers()\n\nquestions['questions_date_added'] = pd.to_datetime(questions['questions_date_added']).dt.date\n\nquestions = questions[(questions['questions_date_added'] >= datetime.date(2017, 3, 1)) &\n                      (questions['questions_date_added'] < datetime.date(2017, 4, 1))].reset_index()\n\nquestions['questions_cnt'] = 1\n\nstudents_q_cnt = pd.DataFrame(questions.groupby(['questions_author_id', 'questions_date_added'])['questions_cnt'].\n                              sum()).reset_index()\n\nstudents_q_cnt[students_q_cnt['questions_cnt'] > 5]","fb291b60":"def match_best_q(curr_df, past_df, pid):\n    s = process_text(curr_df, 'questions_title_body')\n\n    # create similarity matrices for all questions\n    _, tfidf, vocab, tfidf_matrix = get_tfidf_matrix(s)\n    _, fscl, femb = get_emb_mat(s, fembeddings_index, 300)\n    _, gscl, gemb = get_emb_mat(s, gembeddings_index, 50)\n    \n    # get historical answers by pid\n    search = process_text(past_df[past_df['answers_author_id'] == pid], 'questions_title_body')\n    \n    # search for closest question\n    t_q_indices = tf_relevant_q_indices(search, tfidf, tfidf_matrix)\n    f_q_indices = relevant_q_indices(search, fembeddings_index, 300, fscl, femb)\n    g_q_indices = relevant_q_indices(search, gembeddings_index, 50, gscl, gemb)\n    \n    q_indices = (t_q_indices, f_q_indices, g_q_indices)\n    \n    return build_q_occ(q_indices)[0][0]","526a6b4e":"NO_MATCH_P = '42deada7c50c4859a34615d70193317e'\n\nbest_q_idx = match_best_q(questions_d3, TRAIN_qa, NO_MATCH_P)\n\nquestions_d3.iloc[best_q_idx]['questions_title_body']","143e7778":"headline = professionals[professionals['professionals_id'] == NO_MATCH_P]['professionals_headline'].tolist()[0]\nprint('NO_MATCH_P is a ', headline)","60fb635c":"no_match_df = noti_freq[(noti_freq['d1'].str.len() == 0) &\n                        (noti_freq['d2'].str.len() == 0) &\n                        (noti_freq['d3'].str.len() == 0)]\n\nno_match_pids = no_match_df.index.tolist()","b15cf4fe":"in_queue = set()\n\nall_matches = (match_d1, match_d2, match_d3)\n\nfor match in all_matches:\n    for i in range(len(match)):\n        if len(match[i]) >= 3:\n            in_queue.add(i)","1d1573e8":"#################################\n# For each curr_p_idx, look for similar\n# professionals who are in in_queue\n# by looking at the similarity of their profiles\n#################################\n\ndef match_best_p(curr_p_idx, in_queue, ans):\n    select = []\n    \n    _, ans_tf, ans_vocab, ans_tfidf_matrix = get_tfidf_matrix(ans)\n    t_p_scores = np.asarray(p_profiles(p_ids, TRAIN_qa, ans_tfidf_matrix))\n    \n    t_neighbors = np.argsort(cosine_similarity(t_p_scores[curr_p_idx].reshape(1,-1),t_p_scores)).flatten()[::-1]\n    \n    for t_neighbor in t_neighbors:\n        if t_neighbor in in_queue:\n            select.append(t_neighbor)\n            break\n\n    _, fans_scl, fans_emb = get_emb_mat(ans, fembeddings_index, 300)\n    f_p_scores = np.asarray(p_profiles(p_ids, TRAIN_qa, fans_emb))\n    \n    f_neighbors = np.argsort(cosine_similarity(f_p_scores[curr_p_idx].reshape(1,-1),f_p_scores)).flatten()[::-1]\n    \n    for f_neighbor in f_neighbors:\n        if f_neighbor in in_queue:\n            select.append(f_neighbor)\n            break\n\n    _, gans_scl, gans_emb = get_emb_mat(ans, gembeddings_index, 50)\n    g_p_scores = np.asarray(p_profiles(p_ids, TRAIN_qa, gans_emb))\n    \n    g_neighbors = np.argsort(cosine_similarity(g_p_scores[curr_p_idx].reshape(1,-1),g_p_scores)).flatten()[::-1]\n    \n    for g_neighbor in g_neighbors:\n        if g_neighbor in in_queue:\n            select.append(g_neighbor)\n            break\n    \n    return select","f66b49ae":"print('First 5 professionals with no match:')\nno_match_pids[:5]","60b4bc6c":"professionals[professionals['professionals_id'] == p_ids[1]]","9d7c7c1b":"best_p_idx = match_best_p(1, in_queue, ans)\n\n# convert the p_idx into professionals_id\nbest_p = []\nfor p_idx in best_p_idx:\n    best_p.append(p_ids[p_idx])\n    \nprint('Professionals closest score to c0a9c84db7bb48dfa9852c67d449bd50:')\nbest_p    ","7dee854a":"professionals[professionals['professionals_id'].isin(best_p)]","911cb50a":"del professionals;\nprofessionals = pd.read_csv(PATH + '\/professionals.csv')\n\ntag_users_name = merging(tag_users, tags, 'tag_users_tag_id', 'tags_tag_id')\n\ntag_users_name.head()\n\ngrouped = tag_users_name.groupby('tag_users_user_id')['tags_tag_name'].apply(lambda x: \"%s\" % ', '.join(x))\np_follow_tags = merging(professionals, pd.DataFrame(grouped), \"professionals_id\", \"tag_users_user_id\")\n\np_follow_tags = p_follow_tags[['professionals_id', 'tags_tag_name']].copy()\np_follow_tags = p_follow_tags.rename(columns={'professionals_id': 'professionals_id',\n                                              'tags_tag_name': 'tags_followed'})","d12f5853":"p_follow_tags.head()","d58fea9d":"def combine_tags(df):\n    grouped = df.groupby('questions_id')['tags_tag_name'].apply(lambda x: \"%s\" % ', '.join(x))\n    df_c = merging(questions, pd.DataFrame(grouped), \"questions_id\", \"questions_id\")\n    return df_c","65c2b498":"ttq = merging(tags, tag_questions, \"tags_tag_id\", \"tag_questions_tag_id\")\n\nqttq = merging(questions, ttq, \"questions_id\", \"tag_questions_question_id\")\n\nqttq.head()\n\nquestions_tags = combine_tags(qttq)\n\nquestions_tags_answers = merging(answers, questions_tags, \"answers_question_id\", \"questions_id\")\n\nprofessionals_tags = questions_tags_answers[['answers_author_id', 'tags_tag_name']]\n\nprofessionals_tags = professionals_tags.drop_duplicates()\n\nprofessionals_tags = professionals_tags.groupby('answers_author_id')['tags_tag_name'].apply(lambda x: \"%s\" % ', '.join(x))\n\nprofessionals_tags = pd.DataFrame(professionals_tags).reset_index()","1894a87e":"professionals_tags.head()","d449a7f5":"all_tags = merging(p_follow_tags, professionals_tags, 'professionals_id', 'answers_author_id')\n\nall_tags.drop('professionals_id', axis=1, inplace=True)\n\nall_tags.head()","f8e95660":"tags_p_ids = all_tags['answers_author_id'].tolist()\n\nall_tags['all_tags'] = all_tags['tags_followed'] + str(' ') + all_tags['tags_tag_name']\n\nclean_tags = process_text(all_tags, 'all_tags').values\n\n# _, tags_scl, tags_emb = get_use_matrix(clean_tags)\n# tags_scores = np.asarray(p_profiles(tags_p_ids, all_tags, tags_emb))\n\n_, tags_tf, tags_vocab, tags_tfidf_matrix = get_tfidf_matrix(clean_tags)\ntags_scores = np.asarray(p_profiles(tags_p_ids, all_tags, tags_tfidf_matrix))","76f609ea":"cold_start_tags = '#animation, #graphics design'\n\n# similar_p_tags_idx = u_relevant_p_indices(cold_start_tags, tags_scl, tags_scores)\n\nsimilar_p_tags_idx = t_relevant_p_indices(cold_start_tags, tags_tf, tags_scores)\n\nsimilar_p_tags_idx","8be85bc2":"most_similar_idx = similar_p_tags_idx[0]\nprofessionals[professionals['professionals_id'] == tags_p_ids[most_similar_idx]]['professionals_headline']","469332ad":"# TODO","8e56b5c7":"usa_states = [\"Alabama\",\"Alaska\",\"Arizona\",\"Arkansas\",\"California\",\"Colorado\",\n              \"Connecticut\",\"Delaware\",\"Florida\",\"Georgia\",\"Hawaii\",\"Idaho\",\"Illinois\",\n              \"Indiana\",\"Iowa\",\"Kansas\",\"Kentucky\",\"Louisiana\",\"Maine\",\"Maryland\",\n              \"Massachusetts\",\"Michigan\",\"Minnesota\",\"Mississippi\",\"Missouri\",\"Montana\",\n              \"Nebraska\",\"Nevada\",\"New Hampshire\",\"New Jersey\",\"New Mexico\",\"New York\",\n              \"North Carolina\",\"North Dakota\",\"Ohio\",\"Oklahoma\",\"Oregon\",\"Pennsylvania\",\n              \"Rhode Island\",\"South Carolina\",\"South Dakota\",\"Tennessee\",\"Texas\",\"Utah\",\n              \"Vermont\",\"Virginia\",\"Washington\",\"West Virginia\",\"Wisconsin\",\"Wyoming\"]","f7663cac":"def location_to_country(df, col, ids):\n    df[col] = df[col].fillna('')\n    \n    # for USA\n    _usa = df[df[col].str.count(',') == 1]\n\n    _usa[col] = _usa[col].str.split(',').str[1]\n    _usa[col] = _usa[col].str.lstrip() \n\n    _usa = _usa[_usa[col].isin(usa_states)][[ids, col]]\n    \n    _usa[col] = 'USA'\n\n    _usa = _usa.rename(columns={ids: ids, \n                                col: 'country'})\n    \n    # for other countries\n    _other = df[df[col].str.count(',') == 2]\n\n    _other[col] = _other[col].str.split(',').str[2]\n    _other[col] = _other[col].str.lstrip() \n\n    _other = _other[[ids, col]]\n\n    _other = _other.rename(columns={ids: ids, \n                                    col: 'country'})\n\n    return _usa, _other","1eca792f":"usa_heros, etc_heros = location_to_country(professionals, 'professionals_location', 'professionals_id')\n\nheros_country = pd.concat([usa_heros, etc_heros])\n\nheros_country.head() ","8264749c":"heros_country_val_cnt = heros_country['country'].value_counts()[1:10]\n\nplt.figure(figsize=(8,6))\nsns.barplot(heros_country_val_cnt.index, \n            heros_country_val_cnt.values)\nplt.title('Professionals and their Countries excluding USA')\nplt.ylabel('Count')\nplt.xlabel('Countries')\nplt.show()","dd794132":"usa_students, etc_students = location_to_country(students, 'students_location', 'students_id')\n\nstudents_country = pd.concat([usa_students, etc_students])\n\nstudents_country.head()","02ca4dad":"students_country_val_cnt = students_country['country'].value_counts()[1:10]\n\nplt.figure(figsize=(8,6))\nsns.barplot(students_country_val_cnt.index, \n            students_country_val_cnt.values)\nplt.title('Students and their Countries excluding USA')\nplt.ylabel('Count')\nplt.xlabel('Countries excluding USA')\nplt.show()","5e266388":"questions, answers = new_question_answers()\n\nqa = merging(questions, answers, 'questions_id', 'answers_question_id')\n\nqa_ans_scores = merging(qa, answer_scores, 'answers_id', 'id')\n\nqa_ans_scores.head().T","4bc95cf7":"p_hearts = pd.DataFrame(qa_ans_scores.groupby('answers_author_id')['score'].sum()).reset_index()\n\np_hearts.sort_values('score', ascending=False).head()","1656058e":"questions, answers = new_question_answers()\n\nmat_ema = merging(matches, emails, 'matches_email_id', 'emails_id')\n\nque_mat_ema = merging(mat_ema, questions, 'matches_question_id', 'questions_id')\n\nans_que_mat_ema = merging(que_mat_ema, answers, 'questions_id', 'answers_question_id')\n\nema_ans_pair = ans_que_mat_ema[ans_que_mat_ema['emails_recipient_id'] == ans_que_mat_ema['answers_author_id']]\n\ndel ans_que_mat_ema; del mat_ema; del que_mat_ema; _ = gc.collect()","2c577063":"ema_ans_pair = ema_ans_pair[['questions_id', 'questions_date_added', \n                             'emails_date_sent', \n                             'answers_date_added', 'answers_author_id']]\n\nema_ans_pair['questions_date_added'] = pd.to_datetime(ema_ans_pair['questions_date_added']).dt.date\nema_ans_pair['emails_date_sent'] = pd.to_datetime(ema_ans_pair['emails_date_sent']).dt.date\nema_ans_pair['answers_date_added'] = pd.to_datetime(ema_ans_pair['answers_date_added']).dt.date\n\nema_ans_pair['resp_time'] = ema_ans_pair['answers_date_added'] - ema_ans_pair['emails_date_sent']\n\nema_ans_pair['resp_time'] = ema_ans_pair['resp_time'].dt.days\n\nema_ans_pair.head()","9904e201":"ema_ans_pair[ema_ans_pair['answers_date_added'] < ema_ans_pair['emails_date_sent']].shape","2fe2fdb9":"ema_ans_pair.loc[ema_ans_pair['resp_time'] < 0, 'resp_time'] = 0\n\nema_ans_pair['resp_score'] = np.exp(-0.1 * ema_ans_pair['resp_time'])\n\nema_ans_pair['cnt'] = 1\n\nema_ans_pair.head()","15b3cba8":"ema_ans_pair['cum'] = ema_ans_pair.groupby('answers_author_id')['cnt'].cumsum()\n\nema_ans_pair['cum'] = ema_ans_pair['cum'] - 1\n\nema_ans_pair['time_score'] = ((2.5 * np.exp(-0.04 * ema_ans_pair['cum']) + 0.5) * ema_ans_pair['resp_score'])\n\nema_ans_pair.head()","14bb4c8e":"p_resp_score = pd.DataFrame(ema_ans_pair.groupby('answers_author_id')['time_score'].sum().sort_values(ascending=False)).reset_index() # 36ff3b3666df400f956f8335cf53e09e\t\n\np_resp_score['time_score'] = np.log1p(p_resp_score['time_score'])","50db8081":"top_5 = p_resp_score.iloc[4]['answers_author_id'] # 00271cc10e0245fba4a35e76e669c281\ntop_701 = p_resp_score.iloc[700]['answers_author_id'] # b0de856bbbfc431794f6f0b4088d4d31","c8213949":"print('average response time: {:.3f} days'.format(ema_ans_pair[ema_ans_pair['answers_author_id'] == top_5]['resp_time'].mean()))\nema_ans_pair[ema_ans_pair['answers_author_id'] == top_5][['emails_date_sent', 'answers_date_added', \n                                                          'resp_time', 'time_score']].copy().head()","730e486b":"print('average response time: {:.3f} days'.format(ema_ans_pair[ema_ans_pair['answers_author_id'] == top_701]['resp_time'].mean()))\nema_ans_pair[ema_ans_pair['answers_author_id'] == top_701][['emails_date_sent', 'answers_date_added', \n                                                          'resp_time', 'time_score']].copy().head()","0ea7b344":"questions, answers = new_question_answers()\n\nquestions['questions_date_added'] = pd.to_datetime(questions['questions_date_added'])\n\nquestions = questions[questions['questions_date_added'] >= pd.datetime(2018,1,1)]\n\nqa = merging(questions, answers, 'questions_id', 'answers_question_id')","226cd0d0":"qa['interact_cnt'] = 1\n\nstudent_p_interact = qa.groupby(['questions_author_id', 'answers_author_id'])['interact_cnt'].sum().reset_index()\n\ninteracted_before = student_p_interact[student_p_interact['interact_cnt'] > 1]\n\nplt.figure(figsize=(8,6))\nplt.title('Interaction Plot of Student and Professional')\nplt.xlabel('Number of Interactions between a Student and a Professional')\nplt.ylabel('Frequency')\nsns.barplot(interacted_before['interact_cnt'].value_counts().index,\n            interacted_before['interact_cnt'].value_counts().values)\nplt.show()\n\ninteracted_before['interact_cnt'].value_counts()","bd6ed1ed":"def time_score(questions, matches, emails, answers, p_ids):    \n    mat_ema = merging(matches, emails, 'matches_email_id', 'emails_id')\n\n    que_mat_ema = merging(mat_ema, questions, 'matches_question_id', 'questions_id')\n\n    ans_que_mat_ema = merging(que_mat_ema, answers, 'questions_id', 'answers_question_id')\n\n    ema_ans_pair = ans_que_mat_ema[ans_que_mat_ema['emails_recipient_id'] == ans_que_mat_ema['answers_author_id']]\n\n    del ans_que_mat_ema; del mat_ema; del que_mat_ema; _ = gc.collect()\n    \n    ema_ans_pair = ema_ans_pair[['questions_id', 'questions_date_added', \n                             'emails_date_sent', \n                             'answers_date_added', 'answers_author_id']].copy()\n    \n    # construct time score only for p_ids\n    ema_ans_pair = ema_ans_pair[ema_ans_pair['answers_author_id'].isin(p_ids)]\n\n    ema_ans_pair['questions_date_added'] = pd.to_datetime(ema_ans_pair['questions_date_added']).dt.date\n    ema_ans_pair['emails_date_sent'] = pd.to_datetime(ema_ans_pair['emails_date_sent']).dt.date\n    ema_ans_pair['answers_date_added'] = pd.to_datetime(ema_ans_pair['answers_date_added']).dt.date\n\n    ema_ans_pair['resp_time'] = ema_ans_pair['answers_date_added'] - ema_ans_pair['emails_date_sent']\n\n    ema_ans_pair['resp_time'] = ema_ans_pair['resp_time'].dt.days\n\n    ema_ans_pair.loc[ema_ans_pair['resp_time'] < 0, 'resp_time'] = 0\n\n    ema_ans_pair['resp_score'] = np.exp(-0.1 * ema_ans_pair['resp_time'])\n\n    ema_ans_pair['cnt'] = 1\n    \n    ema_ans_pair['cum'] = ema_ans_pair.groupby('answers_author_id')['cnt'].cumsum()\n\n    ema_ans_pair['cum'] = ema_ans_pair['cum'] - 1\n\n    ema_ans_pair['time_score'] = ((2.5 * np.exp(-0.04 * ema_ans_pair['cum']) + 0.5) * ema_ans_pair['resp_score'])\n\n    p_resp_score = pd.DataFrame(ema_ans_pair.groupby('answers_author_id')['time_score'].sum().sort_values(ascending=False)).reset_index() # 36ff3b3666df400f956f8335cf53e09e\t\n\n    p_resp_score['time_score'] = np.log1p(p_resp_score['time_score'])\n\n    return p_resp_score","fc511286":"def hearts_score(qa, answer_scores, p_ids):\n    qa_ans_scores = merging(qa, answer_scores, 'answers_id', 'id')\n    \n    qa_ans_scores = qa_ans_scores[qa_ans_scores['answers_author_id'].isin(p_ids)]\n    \n    p_hearts = pd.DataFrame(qa_ans_scores.groupby('answers_author_id')['score'].sum()).reset_index()\n    \n    p_hearts = p_hearts.rename(columns={'score': 'hearts_score'})\n\n    return p_hearts","2cd2506a":"def location_score(student_location, p_ids):\n    select_p = professionals[professionals['professionals_id'].isin(p_ids)]\n    \n    usa_heros, etc_heros = location_to_country(select_p, 'professionals_location', 'professionals_id')\n    \n    heros_country = pd.concat([usa_heros, etc_heros])\n\n    # if student and professionals are from USA, give score of 1\n    # if student is from USA but professionals are not, give score of 0.8    \n    if student_location == 'USA':\n        heros_country.loc[(heros_country['country'] == student_location), 'country_score'] = 1\n        heros_country.loc[(heros_country['country'] != student_location), 'country_score'] = 0.8\n        \n    # if student and professionals are from the same country but not USA, give score of 5\n    # if student is not from USA but professionals are from USA, give score of 0.5\n    else:\n        heros_country.loc[(heros_country['country'] == student_location), 'country_score'] = 5\n        heros_country.loc[(heros_country['country'] != student_location), 'country_score'] = 0.5\n\n    return heros_country","62e12112":"def build_run_RecSys(query, questions, s, ans, qa, p_ids):\n    \n    tfidf, tfidf_matrix, fscl, femb, gscl, gemb, ans_tf, fans_scl, gans_scl, t_p_scores, f_p_scores, g_p_scores, VOCAB = build_RecSys(s, ans, qa, p_ids)\n    \n    recommended_p = run_RecSys(query, questions, qa, 10, \n                               tfidf, tfidf_matrix, \n                               fscl, femb, \n                               gscl, gemb, \n                               ans_tf, fans_scl, gans_scl, \n                               t_p_scores, f_p_scores, g_p_scores)\n    \n    return recommended_p","6f56e01b":"questions, answers = new_question_answers()\n\nquestions['questions_date_added'] = pd.to_datetime(questions['questions_date_added'])\n\nquestions = questions[:1000]\n\nqa = merging(questions, answers, 'questions_id', 'answers_question_id')\n\nquestions['questions_title_body'] = questions['questions_title'] + \\\n                                    str(' ') + \\\n                                    questions['questions_body']\n\ns = process_text(questions, 'questions_title_body').values\n\nans = process_text(qa, 'answers_body').values\n\np_ids = qa['answers_author_id'].unique().tolist()","606039ce":"def meta_RecSys(top_10_ps, time_score_df, answers_score_df, location_score_df, professionals):\n    top_10_ps_df = pd.DataFrame({'professionals_id': top_10_ps,\n                                 'reciprocal_rank': list(np.linspace(10, 1, 10))})\n    \n    professionals = professionals[professionals['professionals_id'].isin(top_10_ps)][['professionals_id',\n                                                                                      'professionals_headline']]\n    \n    final_df = top_10_ps_df.merge(time_score_df, left_on='professionals_id',\n                                  right_on='answers_author_id', how='outer')\n\n    final_df.drop('answers_author_id', axis=1, inplace=True)\n\n    final_df = final_df.merge(answers_score_df, left_on='professionals_id',\n                              right_on='answers_author_id', how='outer')\n\n    final_df.drop('answers_author_id', axis=1, inplace=True)\n    \n    final_df = final_df.merge(location_score_df, left_on='professionals_id',\n                              right_on='professionals_id', how='outer')\n\n    final_df.drop('country', axis=1, inplace=True)\n\n    final_df = final_df.fillna(0)\n    \n    # some hyperparamters to tune\n    RANK_WEIGHT = 2.5\n    TIME_WEIGHT = 2\n    SCORE_WEIGHT = 0.75\n    LOCATION_WEIGHT = 5\n    \n    final_df['meta_score'] = RANK_WEIGHT * final_df['reciprocal_rank'] + \\\n                             TIME_WEIGHT * final_df['time_score'] + \\\n                             SCORE_WEIGHT * final_df['hearts_score'] + \\\n                             LOCATION_WEIGHT * final_df['country_score']\n    \n    final_df = final_df.merge(professionals, left_on='professionals_id',\n                              right_on='professionals_id', how='outer')\n\n    \n    final_df = final_df.sort_values('meta_score', ascending=False)\n    \n    return final_df","0ae02679":"query = 'I am interested in machine learning and want to be a data scientist one day. i heard artificial intelligence is cool'\nquery_country = 'USA'\n\ntop_10_ps = build_run_RecSys(query, questions, s, ans, qa, p_ids)\ntime_score_df = time_score(questions, matches, emails, answers, top_10_ps)\nhearts_score_df = hearts_score(qa, answer_scores, top_10_ps)\nlocation_df = location_score(query_country, top_10_ps)\n\nmeta_RecSys(top_10_ps, time_score_df, hearts_score_df, location_df, professionals)","875cff59":"questions, answers = new_question_answers()\n\nquestions['questions_date_added'] = pd.to_datetime(questions['questions_date_added'])\n\nTRAIN_questions = questions[(questions['questions_date_added'] >= pd.datetime(2018, 3, 1)) &\n                            (questions['questions_date_added'] < pd.datetime(2018, 4, 1))].reset_index()\n\nVAL_questions = questions[(questions['questions_date_added'] >= pd.datetime(2018, 4, 1)) &\n                          (questions['questions_date_added'] < pd.datetime(2018, 4, 3))].reset_index()\n\nquestions_d1 = questions[(questions['questions_date_added'] >= pd.datetime(2018, 4, 1)) &\n                         (questions['questions_date_added'] < pd.datetime(2018, 4, 2))]\n\nquestions_d2 = questions[(questions['questions_date_added'] >= pd.datetime(2018, 4, 2)) &\n                         (questions['questions_date_added'] < pd.datetime(2018, 4, 3))]\n\nquestions_d1.shape , questions_d2.shape\n\nTRAIN_questions['questions_title_body'] = TRAIN_questions['questions_title'] + \\\n                                          str(' ') + \\\n                                          TRAIN_questions['questions_body']\n\ns = process_text(TRAIN_questions, 'questions_title_body').values\n\nTRAIN_qa = merging(TRAIN_questions, answers, 'questions_id', 'answers_question_id')\n\nans = process_text(TRAIN_qa, 'answers_body').values\n\np_ids = TRAIN_qa['answers_author_id'].unique().tolist()\n\n# preprocess students location\nselect_students = students[students['students_id'].isin(VAL_questions['questions_author_id'])]\n\nusa_students, etc_students = location_to_country(select_students, 'students_location', 'students_id')\n\nstudents_country = pd.concat([usa_students, etc_students])","f38ab96a":"print('Number of professionals in the period: {}'.format(len(p_ids))) \nprint('Number of questions in the period: {}'.format(s.shape[0])) \nprint('Number of answers in the period: {}'.format(ans.shape[0])) \nprint('Number of answers in day 1: {}'.format(questions_d1.shape[0])) \nprint('Number of answers in day 2: {}'.format(questions_d2.shape[0])) ","a508b564":"np.random.seed(seed=42)\n\ndaily_noti = list(np.random.choice([0, 1], len(p_ids), replace=True))\n\nnoti_freq = pd.DataFrame({'professionals_id': p_ids,\n                          'daily_noti': daily_noti})\n\nnoti_freq.head()\n\ndaily_p = noti_freq[noti_freq['daily_noti'] == 1].index.tolist()\nthree_d_p = noti_freq[noti_freq['daily_noti'] == 0].index.tolist()","f260f147":"%%time\ntfidf, tfidf_matrix, fscl, femb, gscl, gemb, ans_tf, fans_scl, gans_scl, t_p_scores, f_p_scores, g_p_scores, VOCAB = build_RecSys(s, ans, TRAIN_qa, p_ids)","272853a8":"def updated_assign(df, qa, questions, dont_ask):\n    df['questions_title_body'] = df['questions_title'] + \\\n                                 str(' ') + \\\n                                 df['questions_body']\n    \n    pid_qid_match = [[] for i in range(len(p_ids))]\n    \n    skip = []\n    for k, v in df.iterrows():\n        query = v['questions_title_body']\n        qid = v['questions_id']        \n        query_coutry = (students_country[students_country['students_id'] == v['questions_author_id']]['country']).tolist()[0]\n        \n        # get top 10 professionals\n        top_10_ps = run_RecSys(query, questions, qa, 10, \n                               tfidf, tfidf_matrix, \n                               fscl, femb, \n                               gscl, gemb, \n                               ans_tf, fans_scl, gans_scl, \n                               t_p_scores, f_p_scores, g_p_scores)\n        \n        # calculate their time_score\n        time_score_df = time_score(questions, matches, emails, answers, top_10_ps)\n        \n        # calculate their hearts score\n        hearts_score_df = hearts_score(qa, answer_scores, top_10_ps)\n        \n        # calculate location score\n        location_df = location_score(query_country, top_10_ps)\n\n        # meta_RecSys df\n        recommended_p = meta_RecSys(top_10_ps, time_score_df, hearts_score_df, location_df, professionals)\n        \n        recommended_p_list = recommended_p['professionals_id'].tolist()\n        \n        # start assigning professionals to each question\n        cnt = 0\n        for pid in recommended_p_list:    \n            \n            # if the question has been assigned to 5 professionals, \n            # stop\n            if cnt >= 5: \n                break\n            \n            # get professional_id's idx\n            p_idx = p_ids.index(pid)\n            \n            # if professionals received more than 5 questions,\n            # stop assigning\n            if p_idx not in dont_ask:\n                if len(pid_qid_match[p_idx]) < 5:                    \n                    pid_qid_match[p_idx].append(qid)\n                    cnt += 1\n                    \n            # if professionals signed up for 3-day noti\n            # add them to skip\n            if p_idx in three_d_p and p_idx not in skip:\n                skip.append(p_idx)\n        \n        # add professionals we want to skip\n        # to dont_ask\n        for p_idx in skip:\n            dont_ask.append(p_idx)\n            \n    return pid_qid_match, dont_ask","ce8bb7ad":"dont_ask = []\nmatch_d1, dont_ask = updated_assign(questions_d1, TRAIN_qa, TRAIN_questions, dont_ask)\nmatch_d2, dont_ask = updated_assign(questions_d2, TRAIN_qa, TRAIN_questions, dont_ask)","49dd0224":"noti_freq['d1'] = pd.Series((v for v in match_d1)) \nnoti_freq['d2'] = pd.Series((v for v in match_d2)) \n\nnoti_freq.head()","99201c94":"Observe how `ui` leaped from the 4th position to the 2nd. \n\n## Recommendation #2: Three-day email notification\nMy second recommendation is to add a three-day email notification setting. I will illustrate this experiment over a three-day period. First, I randomly assign an email notification setting of daily and every 3-day (can be extended to weekly or monthly) to all the professionals in `p_ids`. \n\nOn day 1, I look at the questions posted and recommend 5 professionals to each question. If the professionals happen to be in the group of `three_day_noti` we recommend the question to the professionals and mark them in `dont_ask`, which is equivalent to removing them from our suggested pool. If the professionals happen to be in group of `daily_noti` we keep them.\n\nRepeat the same process for day 2 and day 3. \n\nSince there is a considerable amount of questions being asked from 2017-3-20 to 2017-3-23. I will select these 3 days as my validation set. `TRAIN_qa` will then include questions one month before 2017-3-20.","0a544bab":"Perform experiment on a small sample, i.e., first 1000 rows.","4c87fb38":"## 5.3 Timeliness\n\nAs mentioned, timeliness is also an important metric to CareerVillage.","91bdee82":"First, enter a query to see who are the professionals being suggested.","e8294d29":"Apparently, professionals in the 75% percentile and above have a response rate of close to 20%.\n\nBefore I select a professional to conduct a further analysis, I intend to look for some professionals who have good track record, i.e., those who answered more than 20 questions and has an average response time of less than 5 days.","b7f42552":"# Introduction\nThe U.S. has almost 500 students for every guidance counselor. Underserved youth lack the network to find their career role models, making CareerVillage.org the only option for millions of young people in America and around the globe with nowhere else to turn.\n\nOur goal is to develop a method to recommend relevant questions to the professionals who are most likely to answer them.\n\nFirst, Jared shared the following feedback from professionals:\n\n* \"These question don't really feel relevant to me.\"\n* \"I waited around but never got matched to anything.\"\n* \"I used to get the emails, but then they stopped.\"\n* \"This is way too much email. I get something like almost every day!\"\n* \"If the questions were more relevant, I'd be willing to get emailed more often. But if they are not relevant, then I don't want much email at all.\"\n* \"The emails aren't that insightful, and don't show me enough info about the questions without having to click in\" \n\nAll these revolve around two main themes, **relevance of questions** and **frequency of receiving questions**. After looking at CareerVillage's current recommender system, I realize it mainly matches professionals to questions based on tags. Hence, I plan to:\n\n* Introduce a recommender system that takes \"questions\" and \"answers profile\" into account using 4 different models as I will show how professionals have answered questions that not necessarily have `tags` they follow.\n* Introduce a new notification setting. This allows professional to have daily or 3-day (or more) notification setting. The system is able to limit the number of emails sent to professional per day and also keep professionals who have not been receiving questions engaged with the platform.\n\nI will also provide some future recommendations:\n* Option to modify profile\n* Three-day email notification\n* Reducing spam by students\n* \"Shifting\" questions\n* Handling cold start by tags\n* Keeping track of questions that are unanswered","de7022ba":"Notice how all four models recommended different questions but there is still some overlap of indices of questions recommended.\n\nA weight is then assigned to each question based on Borda count. `questions_id`that appears first has a weight of 1 and a decrement of 0.1 is applied to the subsequent `questions_id`, i.e., the second question has a weight of 0.9, third 0.8 and so on.","f28cde34":"Knowing the previous interactions will not be very beneficial in recommending questions given there are many 1-time and 2-time interactions. \n\n# 6. Meta-RecSys\nIn the final section, I demonstrate a meta RecSys that takes into account metadata while recommending questions. In sum, four components (with weights assigned) will be taken into account while recommending questions.\n\n* Ranking: 2.5 \n> Ranking is an important factor as it accounts for similarity between questions and how likely professionals are able to answer.\n* Timeliness: 2\n> Timeliness is the next important metric since we want quetions to be answered ASAP.\n* Heart_score: 0.75\n> Hearts score serves as a proxy for quality of answers.\n* Location: 5\n>As seen in the EDA section, most questions that are unanswered or have slow responses are country-specific, hence, a much higher weight is assigned to the `location` component. ","5035a0d1":"Same goes for students. Many of them come from India and they might be asking questions specific to their country. Let's create a model that takes this into account.","be2a00b8":"I create some handy functions here.","1e3b9725":"As seen above, the questions suggested were in fact, **relevant** to the professional's expertise, which revolves around computer science and IT. But the questions answered by `TEST_P_ID` are somewhat different from his or her expertise, including questions about doctor, radiology, and football.\n\nBelow, I will separate the `qa` into two sections: `TEST_qa`, which includes `qa` before 2016-5-20 and `VALID_qa`, which includes `qa` after 2016-5-20. I will build the `professional_profiles` on the `TEST_qa` and validate the results on `VALID_qa`.","96b5eabb":"I propose a formula to calculate `time_score`, which is \n$$time\\; score = ((2.5 \\times exp\\;(-0.04 \\times number\\; of\\; questions\\; answered\\; so\\; far) + 0.5) \\times response\\; score$$\n\nThis formula accounts for the notion of \"beginner's bonus\" in the score. Hence, I designed a rewarding mechanism that gives high bonuses to professionals when they are freshcomers but lesser as they answer more questions. Eventually, this boils down to their timeliness. This allows for comparison between professionals who answer 100 questions and take 10 days to answer each question and professionals who answer 10 questions and take 1 day to answer each question - the more timely professional.\n\nThe number 2.5 and -0.04 are hyperparameters that can be tuned. They correspond to what the initial bonus is and how quickly the bonus decreases as the user answers more questions.\nThe offset 0.5 is used because the mutlipler should eventually approach the value 0.5 as the number of questions answered by a professional approaches infinity.","1b89deeb":"Say the 3rd suggested professional `a3fae772a6cf4cb195da37458e937572` provided the following response. ","8f62db46":"## FastText embedding","441e0082":"Excluding USA, which has around 14,000 professionals, we observe how the professionals come from other countries too!","69f06850":"Unfortunately, there are only 11 professionals who meet both criteria. Nevertheless, this is sufficient for me to conduct an analysis. In the section below, I will show both successful and failed cases of the RecSys.","eb2b6393":"The approach is working! `0d134d3f07a2408a88983d9069c625e6` is now ranked first. Essentially, this approach furnishes some form of interpretability on how is the `query` recommended to the professionals through their respective `score_profile`. This allows professionals to manually tune questions they are more interested in answering to help our RecSys suggests better questions and build a relevant profile.\n\nOf course, the RecSys will also be able to update the `score_profile` automatically for each professional after he or she answers a query with a given example below. Say a professional has been asked about UI UX and provided a response below.","54f9c071":"# Table of Contents\n1. EDA\n2. Model construction\n3. Evaluation\n4. Future recommendations\n5. Metadata\n6. Meta-RecSys\n7. Final Meta-RecSys\n8. Conclusion\n9. Final Thoughts\n10. Closing remarks","5e3d4a3c":"## Recommendation #6: Keeping track of questions that are unanswered\nI would like to recommend keeping track of questions that are unanswered for 3 days since they are posted. Next, using `professionals`' login session, I would like to determine who are the professionals that are active in the current time period and recommend the unanswered questions to most relevant professionals among them all. Unfortunately, I have no access to login sessions. Hence, this part is left unimplemented.","6751dc29":"## 5.2 Answer scores\nThis could be an approach to determine quality of answers and professional's reputation.","d2416362":"## Evaluation Approach #4\nIt is now time to answer the question: will the RecSys be performing better than CareerVillage's current RecSys? Before diving into the approach, let's explore questions that have been recommended by CareerVillage with some EDA. The `professionals` dataset has a total of 28,152 professionals registered but EDA shows that < 1,000 remain active.\n\nI would like to extend my gratitude to RodH for coming up with the following approach of filtering emails received and questions answered by emails.","7282182b":"Combining profiles built by all four models, the recommended professionals are as follows.","ae3babd7":"## GloVe","e504b425":"Interestingly, there are 36 instances of targeted professionals receiving the emails of questions they have already answered. It would be great if CareerVillage can handle such cases of prevent sending targeted professionals who have answered the question.\n\nFor the sake of analysis and providing a recommendation, I will convert the aforementioned professionals' `resp_time` to 0.\n\nSubsequently, I will apply a negative exponential function to the `resp_time`. Logically, professionals who have a shorter response time should have a higher score.","ca155599":"Let's compare the response time for both the 5th professional and the 701st professional.","c4d52011":"Most questions and answers are added on Wednesday, with weekends having the lowest activity.\n\nIn the next section, I define slow response time as more than 7 days taken for the first answer to be added; fast response as 3 days of less; moderate as between slow and fast.","ec1c7f70":"As seen above, the 5th ranked professional answered almost all emails in the first 2 days while the 701st professional has a response time of more than 12 days out of the 5 entries shown above.\n\nConclusion: The higher the `time_score`, the more the RecSys should \"bump\" the professional into answering an incoming question via email.\n\n## 5.4 Previous interactions","9c8440bf":"As seen above, each professional now has a `meta_score`, we are left with 2 options to recommend a question:\n* Recommend questions to top 5 professionals according to the `meta_score`\n* Select a cutoff for `meta_score` while recommending questions to professionals\n\nI think both approaches will work well and it is left to CareerVillage to do A\/B testing on which is the better approach.\n\n# 7. Final Meta-RecSys\nIn the following, I select a test sample from 2018\/3\/1 to 2018\/3\/31 and validate the effectiveness of the RecSys on 2018\/4\/1 to 2018\/4\/4.\n\nTo recap, here is the final meta-RecSys! ![](https:\/\/imgur.com\/SbUsWSt.png)","b1ba2acf":"Unexpected finding! Professionals do not only answer questions that have tags they follow. By recommending only questions based on tags, we missed out the \"implicit\" question tags professionals have been answering. Let's move on to recommending professionals based on tags.","3b7526bb":"# 8. Conclusion\nI asked Jared what is a good recommender system in his opinion. He mentioned:\n\n`percent of questions which get a 10-quality-point answer within 24 hours, without churning out Pros, and within the bounds of fairness?`\n\nMy solution:\n* `Percent of questions...`\n> The recommender system has been targeting professionals fairly accurately in the Evaluation section above.\n* `...receiving a...`\n> Assuming the recommender system is able to target 5 professionals per question, this should be relatively easy to solve.\n* `...10-quality-point answer...`\n> The recommender system uses `hearts_score` as a proxy of quality answers.\n* `...within 24 hours,...`\n> The recommender system takes into account professionals' timeliness in responding to an answer and also provides a `bonus` to freshcomers (as a way of handling the cold-start problem).\n* `...without churning out Pros...`\n> The recommender system considers professionals' notification setting - limits email to \"superstar\" professionals and sends email regularly to \"marginal\" professionals to keep them engaged.\n* `...and within the bounds of fairness.`\n> The recommender system does not account for the students' background other than their location. The location information is helpful for the international community. \n\n# 9. Final Thoughts\n* Did you decide to predict Pros given a Question, or predict Questions given a Pro? Why?\n> The final meta-RecSys will initially recommend a Pro given a Question but will also recommend Questions given a Pro if the Pro is not matched for 3 days (Recommendation #4). The former approach is more efficient to get high quality matches and the latter approach is to keep Pros engaged within the platform.\n\n* Does your model address the \"cold start\" problem for Professionals who just signed up but have not yet answered any questions? How'd you approach that challenge?\n> I suggested Pros who just signed up to follow some tags. The RecSys will then be able to capture similar Pros who are related to the tags and recommend them to the freshers (Recommendation #5). Additionally, my `time_score` also accounts for freshers by giving them a bonus (Metadata 5.3).\n\n* Did your model have any novel approaches to ensuring that \"no question gets left behind\"?\n> Each questions is targeted with 5 professionals (Final meta-RecSys). I also proposed to keep track of questions that are unanswered and recommend professionals based on login session (Recommendation #6).\n\n* What types of models did you try, and why did you pick the model architecture that you picked?\n> TF-IDF, FastText, GloVe, and Universal Sentence Encoder - 4 models are used to look for similar questions and answers profile. They capture words similarity and semantics differently. I currently use an equal weght for each of them while doing a Borda count (Evalation approach #1).\n\n* Did you engineer any new data features? Which ones worked well for your model?\n> Location score, time score, and hearts score are taken into account for the meta-RecSys (Metadata).\n\n* Is there anything built into your approach to protect certain Professionals from being \"overburdened\" with a disproportionately high share of matches?\n> The meta-RecSys limits recommending a Pro who have more than 5 matches a day. It can be further extended to not match a Pro who has received emails consecutively for few days (Recommendation #2).\n\n* What do you wish you could use in the future (that perhaps we could try out on our own as an extension of your work)?\n> Allowing Pros to update their profiles is my biggest hope! This is crucial as Pros are able to help our RecSys to recommend higher quality content or content they are interested in (Recommendation #1).\n\n# 10. Closing remarks\nI would like to express my gratitude to Kaggle and CareerVillage for presenting such an interesting problem before us. For those have shared their kernel, I learned a tremendous amount from how all of you perform remarkable EDA that I never have of thought. I worked on this out of interest - knowing that I was once in the shoes of all those students, I wanted to help them. I always imagine how nice would if be if I were able to receive career advice on an earlier point in my life. All the best to CareerVillage. I sincerely hope they continue this initiative and more students will benefit from this amazing platform.","7203e33a":"Notice how professionals recommended in Evaluation Approach #2 in `top_3_p_indices` are slightly different compared to Evaluation Approach #3 in `who_to_rec`.\n\nBelow, I added the functions to build and run the RecSys. As mentioned earlier, the Universal Sentence Encoder will be left out to speed up the process.","ae07566e":"The reason some professionals are not recommended with any questions might be the cutoff for recommendation. Since my approach was to look for the top 5 professionals for each question, this fails to account for professionals who are in the 6th position. Solution to this is using a threshold for similarity score to recommend questions.\n\nAlternatively, I look for professionals who are \"spammed\" and close enough to `NO_MATCH_P` in terms of their profiles and recommend the questions from those professionals to `NO_MATCH_P`. I can also potentially remove the questions from professionals who are \"spammed\".\n\nHere, I look for professionals `no_match_pids` who have not received any question in the past 3 days and professionals `in_queue` who have been \"spammed\" for the past 3 days. \n\nNote: I define spam as having 3 or more questions suggested per day.","769b603b":"As previously mentioned, questions that have a longer response time tend to be longer. We can perhaps solve this by targeting a larger audience in the RecSys.","d1229c17":"The above shows `tags` the professionals follow and the below shows `tags` from questions the professionals have been answering.","af31fd42":"Interestingly, the professionals answered 71 questions, none of which has been suggested by CareerVillage. Why is this the case?","4b2a3816":"Combining all four models, we come up with the recommended questions below.","9d4a902d":"# 5. Metadata\n## 5.1 Location\nAfter some EDA, we come to realize that the pool of students is certainly diverse. This led to concerns about how some questions are very much pertained to a certain location. For instance, Priyanka asked about the life in the military in India. How can we handle this?","55278a49":"The question \"Is it acceptable to pursue a STEM major at a liberal arts college?\" has been suggested and answered by `TEST_P_ID`. Overall, suggested questions and questions answered are in line - they relate to `TEST_P_ID`. \n\nBelow, I will separate the `qa` into two sections: `TEST_qa`, which includes `qa` before 2016-3-7 and `VALID_qa`, which includes `qa` after 2016-3-7. I will build the `professional_profiles` on the `TEST_qa` and validate the results on `VALID_qa`.","95d17ece":"## Evaluation Approach #3\nWhen recommending questions to professionals, the final RecSys accounts for \n1. the similarity between query and other questions;\n2. the similarity between query and professionals' profiles (containing `vocab` and `score`) based on their historical answers.\n\nNow, Borda count is applied to the `professionals_id` based on the order they were suggested to construct our final dictionary `p_counts`, which consists of  `professionals_id` and `score_weight`. In order words, the RecSys includes professionals who have answered similar questions in the past and professionals who have profiles (historical answers) similar to the incoming query.","b923bed2":"Interestingly, `c17fb778ae734737b08f607e75a87460` asked 10 questions about accounting on 2017-3-20. Let's see who are the top 5 professionals who have been answering his questions in `TRAIN_qa`. I now expect these professionals to be \"spammed\" with emails.","55413c00":"## Universal Sentence Encoder\nCaveat: Running Universal Sentence Encoder takes a considerable amount of time. I will only run this twice to illustrate its \"power\" and leave out in the latter evaluation sections.","bd51b145":"# 1. EDA\nIn addition to my first public [kernel](https:\/\/www.kaggle.com\/wjshenggggg\/update-5-text-processing) that has some EDA, I perform EDA on questions asked after 1\/1\/2018 - trying to understand when are questions and answers added as well as why some questions take longer response time.","7f267deb":"I then take the sum of the `time_score` for each professional and apply a `log` so it does not skew too much to professionals who have answered many questions.","0a424406":"Now assume that he or she intends to modify the score profile by increasing the weight assigned to `nfl`, I then update the score profile as follows. ","7fdc91df":"As expected, the above professionals have answered most questions asked by `c17fb778ae734737b08f607e75a87460` in `TRAIN_qa`. Hence, they have been \"spammed\" with questions by `c17fb778ae734737b08f607e75a87460` in `match_d1`. Some of them even received 10 or more questions but I cap the number of questions at 5.\n\nRepeat the same process for day 2 and day 3 as described.","54ee4298":"Here I display some parts of the `noti_freq` which shows the question assigned to each professional on `d1`, `d2`, and `d3`. \n\nGiven this proposed solution, each professional who signed up for a 3-day notification setting will not be spammed.\n\nI will perform a cross-checking below to show that questions suggested are in fact, relevant.","2649a19b":"From the recommendation above, observe that 5 professionals have been recommended in that order. Given the option to \"update\" the score, I try to show that if `0d134d3f07a2408a88983d9069c625e6` were to update his or her profile, the RecSys will suggest `0d134d3f07a2408a88983d9069c625e6` as the first choice. Notice that `0d134d3f07a2408a88983d9069c625e6` is from the broadcast media industry but perhaps, is knowledeable about football.\n\nLet's see the `vocab` and `score` for this professional.","458c6fc5":"We relabel every state in the US to USA since `professionals_location` and `students_location` are referring to the state rather than the country. This will help us better handle questions raised from different countries. A problem I encounter is my inability to capture all US states, especially `Greater Los Angeles Area` since I could not split it properly. A suggestion is perhaps to standardize selection options for countries and states.","e4553f28":"# 3. Evaluation\n## Evaluation Approach #1\nThe first approach to test our RecSys is by entering a query to get similar questions. Essentially, our model can be evaluated based on a query (entered manually) and check how similar is it to the questions recommended by the RecSys. I intend to make a note that CareerVillage can use this approach to recommend questions that have been answered in the past without necessarily recommending the query to the professionals.","f2ce52cd":"Let us explore a random professional who has no match.","a089c043":"Our RecSys only recommend 1 question that has been answered by `TEST_P_ID`. \n\nThis might be due to some reasons. I speculate that when professionals log onto careervillage.org, the landing page is not personalized to the professionals' expertise. They end up answering some random questions. I suppose a solution to this issue is to personalize the landing page apart from sending targeted emails. \n\nLet's explore a (partly) successful case of the RecSys.","a5a84803":"I attempt to work with a smaller sample. Furthermore, after performing some EDA, I realize that some students asked their questions in `questions_title` and added some `hashtags` in the `questions_body`. In that case, `questions_body` might not reflect the **question** well. I try to concatenate the `questions_title` and `questions_body` to represent a **question**.","6e399119":"This professional has been doing pretty well, answered 15 out of the 120 questions suggested by CareerVillage! Let's take a look at the some examples of the questions suggested by CareerVillage and answered by `TEST_P_ID`.","f83c773d":"I start with constructing a profile for each professional using four different models.","9351eb52":"## Evaluation Approach #2\nClearly, the RecSys can then recommend professionals based on professionals who have answered the similar questions shown above. But I think the RecSys should be able to further improve its recommendation if each professional has its own `profile`. My motivation of coming with this approach is `questions_body` or `questions_title` might not reflect the essence of the questions but answers can. I attempt to construct a profile for professionals based on what `vocab` best describes them. Given a query, the RecSys can recommend relevant professionals based on their historical answers, again building upon the four models. ","ed240a2d":"Based on the `p_count`, the RecSys now recommends the professionals based on the ranking and show the words most relevant to the professionals. ","75cf6542":"I explore the common and rare words in the `slow` response category. Surprisingly, the common words from `slow` are in fact common - I can tell that there will be relevant professionals who are able to answer those questions. On the other hand, the uncommon words from `slow` seem to be more specific to region as words such as \"australia\", \"europe\", and \"germany\" appear. \n\n# 2. Model construction\nFour models will be deployed to generate the RecSys, namely TF-IDF FastText, GloVe, and Universal Sentence Encoder. The reason is all four approaches are able to capture various subtleties in a question. For instance, TF-IDF captures similarity between bigrams while FastText embedding allows similar semantics to be captured.\n\n## TF-IDF ","cd02f45d":"Some students, 3 of them shown here, have been asking more than 5 questions in a single day. As long as the number of relevant professionals is large amount, the RecSys will be able to handle such situation by assigning questions to other than the top 5 professionals. Otherwise, CareerVillage should setup a system to reduce spam by students by limiting number of questions asked.\n\n## Recommendation #4: \"Shifting\" questions \n\nWe would like to tackle the problems CareerVillage is facing, mainly the feedback from professionals. Some are as follows:\n\n* \"I waited around but never got matched to anything.\"\n* \"This is way too much email. I get something like almost every day!\"\n\nI think churn might originate in two extreme cases: \"superstar\" professionals (a.k.a. professionals who received too many emails) and \"marginal\" professionals (a.k.a. professionals who seldom receive emails) I will approach both professionals differently. I suggest capping the number of questions in the former case and recommending a question to the \"marginal\" professionals who have not received any question in the past 2 days.\n\nIn the later case, I will convert the questions the \"marginal\" professional has answered in the past into what I have been calling `query` to look for similar questions in the `questions_d3`. This is illustrated below.","e086cb45":"The RecSys managed to recommend 1 out of the 6 questions answered by `TEST_P_ID` and the question - \"What do college directors look at?\" was not suggested by CareerVillage but suggested by the RecSys. Even though the `vocab_score` does not give a indication of `TEST_P_ID`'s expertise (due to cold start problem since we only builed the profile on 11 questions), it is still an improvement!\n\n# 4. Future recommendations\n## Recommendation #1: Option to modify profile\nAlthough I am building a RecSys that helps to recommend relevant questions to professionals, I am thinking of having professionals to improve the RecSys. This approach is especially useful when a professional intends to answer questions he or she is interested in. For instance, the IT professional above could be interested in and have some knowledge about \"marketing\" or have experiences in the role in the past.\n\nI suggest adding the option of allowing professionals to \"update\" their profile. After displaying the `vocab_score`, professionals are given the option to weigh certain word that they think describe themselves better or words they are more interested in answering heavier. This recommendation could also help resolve the issue we had in Evaluation Approach #4 when professionals have been answering questions not quite related to their expertise.\n\nI will illustrate this idea with only the TF-IDF model to speed things up.","578f9705":"`c0a9c84db7bb48dfa9852c67d449bd50` is a professional in the Health and Wellness industry and has no match so far. Now, I look for the professionals who have been \"spammed\" and is closest to `c0a9c84db7bb48dfa9852c67d449bd50` in terms of `vocab_score`.","1161bd00":"Great! It seems like the RecSys is able to return the above professionals. This implies that we can \"shift\" the questions from the above professionals (since they have been spammed) to `c0a9c84db7bb48dfa9852c67d449bd50`. This helps in reducing the \"questions traffic\" for the professionals above and keeping `c0a9c84db7bb48dfa9852c67d449bd50` engaged with the platform.\n\n## Recommendation #5: Handling cold start by tags\nTo handle the cold start problem, we suggest our new professional to select some of his or her favorite tags. (It is unlikely we can build a profile immediately for the professional by asking he or her to enter answers to a bunch of relevant and irrelevant questions.) Hence, I figured that TF-IDF is the best candidate to parse the `tags` selected by our new professional. \n\nBefore diving into the approach, I perform some EDA to see if professinals only answer questions that have tags they follow.","8aab0a0b":"I will be running the meta RecSys with questions for 2 days as an illustration.","83020e43":"Apparently, questions recommended to the above professional is quite relevant - volunteering and nonprofits. Great!\n\n## Recommendation #3: Reducing spam by students\nShould we handle spam by students?","8fd5268f":"Unsurprisingly, the `vocab` that describes `TEST_P_ID` is too varied. Let's see the results from RecSys, I start by ignoring the cold start problem first (I will propose a solution to deal with cold start later) and build a `profile` for `TEST_P_ID` based on 48 questions answered. By calling `calc_hit_rate`, it will return how many of the questions answered by `TEST_P_ID` would be suggested by the RecSys."}}