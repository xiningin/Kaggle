{"cell_type":{"f6fd1cfa":"code","4847cd27":"code","23cdaa98":"code","c7411f06":"markdown"},"source":{"f6fd1cfa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4847cd27":"# for reading csv file\nimport pandas as pd\n# for seeing the full columsn\npd.set_option.max_rows = 50\n# for numerical compuataion work on the vector\nimport numpy as np\n\n\ntrain_path = '\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv'\ntest_path = '\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv'\n\n# train set\ndf_train = pd.read_csv(train_path)\n\n# test set\ndf_test = pd.read_csv(test_path)\n\nprint('shape of train set',df_train.shape)\nprint(\"shape of  test set \",df_test.shape)\n\n# know about the features of the datasets\n\n# train set features\nlist_col_train = list(df_train.columns)\nprint(\"Train features : \",list_col_train)\n\n# test set features\nlist_col_test = list(df_test.columns)\nprint(\"test Features :\",list_col_test)\n\n\n# checking Missing values\nmissing_series = df_train.isna().sum()\n\n# missing col names  is  ['LotFrontage',\"Alley\"]\nthreashold = 100 # tolorance of the  mnissing value\nmissing_col = [] # missing col names \n\nfor col_name in list_col_train:\n    \n    if missing_series[col_name] > 400:\n        missing_col.append(col_name)\n\n# missing col values names\nprint(missing_col)\n\n# delete the missing col name from the dataset \n# inplace True for doing action from the orginal datasets\n\ndf_train.drop(columns=missing_col,inplace=True)\n\n# filling the nan value \ndf_train.fillna(method='ffill',inplace=True )\n\n\n\n\n# for visualization\nimport matplotlib.pyplot as plt\n#%matplotlib inline # for draw inner the notebook\n\n\n# now separate the categoricla data and numerical data \/Continueaus data\ndf_train.dtypes \n\n# categorical data\ncate = df_train.select_dtypes(\"object\")\n# numerical = df_train.select_dtypes(\"number\")\n\n\n\n\ncate.head()\n# numerical.head()\n\n# categoricl features names\ncate_features = cate.columns\n\n# Convert all categorical fetures into one hot coding features\ndummies = pd.get_dummies(df_train[cate_features])\ndummies.head() # dummiess head\n\n# now lets concatenate the categorical and numerical features\n\n# frame list\nframe = [dummies,df_train]\ndf = pd.concat(frame ,axis=1)\n\n\n# dropping categorical features becuase i replaced with the one hot coding in dataframe\ndf.drop(columns=cate_features , inplace =True)\n\ndf\n\n\n\n\n\n\n\n","23cdaa98":"\n# import linear Regression model from sklearn lib\nfrom sklearn.linear_model import LinearRegression\n# split the data for model evaluation\nfrom sklearn.model_selection import train_test_split\n\n# sepaate the features and target variables  \ntarget_var = df[\"SalePrice\"]\n\nfeatures = df.drop(columns=['SalePrice'])\nfeatures.head(5)\n\n# train size 80 percent\n# test size 20 percent\nX_train,y_train,X_test,y_test = train_test_split(features,target,train_size=0.8 , test_size=0.2)\n\n# model\nlinear = LinearRegression()\n\n# fitting model\nlinear.fit(features,target_var)\n\n\n\n\n\n\n\n\n","c7411f06":"# Linear Regression Model\n"}}