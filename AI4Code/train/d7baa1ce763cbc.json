{"cell_type":{"7abc75a0":"code","3a60e426":"code","a55a3842":"code","0b17b15b":"code","2a578681":"code","570c8fc5":"code","5d43e6d5":"code","13d14d65":"code","134c29ef":"code","5fd472e8":"code","d570040b":"code","055555ff":"code","6c15aa04":"code","f390d5c3":"code","0c7862d5":"code","d3a3c6e2":"code","80841b23":"code","e08ab1eb":"code","8ac2077a":"code","02121283":"code","00521af7":"code","4c571ac8":"code","9f72af80":"code","8c6a2aa1":"code","c12b76ee":"code","76a93c8a":"code","b431be24":"code","9b1e9d78":"code","27ea3ad4":"code","4eef982a":"code","c5d26156":"code","9450d16d":"code","801e1728":"code","d7bdb220":"code","74b8b62e":"code","987046aa":"code","be4838b5":"code","cd91ed3c":"code","09ff2c53":"code","ef5d64bb":"code","f5408997":"code","833c9d7a":"code","b994f1d7":"code","f38d62b4":"code","9258adff":"code","c2ec03f3":"markdown","d3635fcb":"markdown","802c4b73":"markdown","7e847728":"markdown","f0152b55":"markdown"},"source":{"7abc75a0":"#importing the libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","3a60e426":"import itertools","a55a3842":"# Reading the data \ndata=pd.read_csv(\"..\/input\/diabetes.csv\")","0b17b15b":"#displaying the data\ndata.head()","2a578681":"#describing the data\ndata.describe()","570c8fc5":"# finding the null values in data\ndata.isnull().sum()","5d43e6d5":"# data type used\ndata.info()\n","13d14d65":"#Visualising the Count of Target Variable\nsns.countplot(x='Outcome',data=data)\nplt.show()","134c29ef":"# Count of pregnancies\nsns.countplot(data['Pregnancies'])\nplt.show()\n# we can see the outliers in the data ","5fd472e8":"dat=data.loc[data['Pregnancies']>10]\ndat","d570040b":"sns.countplot(dat['Pregnancies'])","055555ff":"#CLosure look at glucose\nplt.hist(data['Glucose'],bins=10,edgecolor='black')\nplt.xlabel('Range')\nplt.ylabel(\"Glucose Level\")\nplt.title('Closure look at Glucose')\nplt.show()","6c15aa04":"# Outliers in glucose\ndt=data.loc[data['Glucose']<25]\ndt.shape[0]","f390d5c3":"print(\"Before concatenation rows :\" ,dat.shape[0])\ndat=dat.append(dt)\nprint(\"After concatenation rows :\" ,dat.shape[0])","0c7862d5":"# Closure look at BloodPressure\nplt.hist(data['BloodPressure'],bins=10,edgecolor='black')\nplt.xlabel('Range')\nplt.ylabel(\"BloodPressure\")\nplt.title('Closure look at BloodPressure')\nplt.show()","d3a3c6e2":"dt=data.loc[data['BloodPressure']<25]\ndt.shape[0]","80841b23":"print(\"Before concatenation rows :\" ,dat.shape[0])\ndat=dat.append(dt)\nprint(\"After concatenation rows :\" ,dat.shape[0])","e08ab1eb":"# closure look at Skinthicknes\nplt.hist(data['SkinThickness'],bins=10,edgecolor='black')\nplt.xlabel('Range')\nplt.ylabel(\"SkinThickness Level\")\nplt.title('Closure look at Skinthickness')\nplt.show()","8ac2077a":"dt=data.loc[data['SkinThickness']>80]\ndt.shape[0]","02121283":"print(\"Before concatenation rows :\" ,dat.shape[0])\ndat=dat.append(dt)\nprint(\"After concatenation rows :\" ,dat.shape[0])","00521af7":"# closure look at \nplt.hist(data['Insulin'],bins=10,edgecolor='black')\nplt.xlabel('Range')\nplt.ylabel(\"Insulin\")\nplt.title('Closure look at Insulin')\nplt.show()","4c571ac8":"dt=data.loc[data['Insulin']>600]\ndt.shape[0]","9f72af80":"print(\"Before concatenation rows :\" ,dat.shape[0])\ndat=dat.append(dt)\nprint(\"After concatenation rows :\" ,dat.shape[0])","8c6a2aa1":"# closure look at BMI\nplt.hist(data['BMI'],bins=10,edgecolor='black')\nplt.xlabel('Range')\nplt.ylabel(\"BMI Level\")\nplt.title('Closure look at BMI')\nplt.show()","c12b76ee":"dt=data.loc[data['BMI']<10]\ndt.shape[0]","76a93c8a":"print(\"Before concatenation rows :\" ,dat.shape[0])\ndat=dat.append(dt)\nprint(\"After concatenation rows :\" ,dat.shape[0])","b431be24":"# closure look at Age\nplt.hist(data['Age'],bins=10,edgecolor='black')\nplt.xlabel('Range')\nplt.ylabel(\"Age Level\")\nplt.title('Closure look at Age')\nplt.show()","9b1e9d78":"# closure look at only positive cases of Diabetes with Outliers\ndiab1=data[data['Outcome']==1]\ncolumns=data.columns[:8]\nplt.subplots(figsize=(18,15))\nlength=len(columns)\nfor i,j in itertools.zip_longest(columns,range(length)):\n    plt.subplot((length\/2),3,j+1)\n    plt.subplots_adjust(wspace=0.2,hspace=0.5)\n    diab1[i].hist(bins=10,edgecolor='black')\n    plt.title(i)\nplt.show()","27ea3ad4":"data1=data.copy()","4eef982a":"data1=data1.loc[data1['Pregnancies']<=10]\ndata1=data1.loc[data1['Glucose']>=25]\ndata1=data1.loc[data1['BloodPressure']>=25]\ndata1=data1.loc[data1['SkinThickness']<=80]\ndata1=data1.loc[data1['Insulin']<=600]\ndt=data.loc[data['BMI']>10]","c5d26156":"data1.shape[0]","9450d16d":"# closure look at only positive cases of Diabetes without Outliers\ndiab1=data1[data1['Outcome']==1]\ncolumns=data1.columns[:8]\nplt.subplots(figsize=(18,15))\nlength=len(columns)\nfor i,j in itertools.zip_longest(columns,range(length)):\n    plt.subplot((length\/2),3,j+1)\n    plt.subplots_adjust(wspace=0.2,hspace=0.5)\n    diab1[i].hist(bins=10,edgecolor='black',color='lightblue')\n    plt.title(i)\nplt.show()","801e1728":"# Visualising the preprocessed data to check biasing of the class in each attribute\nsns.pairplot(data=data1,hue='Outcome',diag_kind='kde')\nplt.show()","d7bdb220":"# Correlation of the preprocessed data\nsns.heatmap(data1.corr(),annot=True,cmap='RdYlGn')\nfig=plt.gcf()\nfig.set_size_inches(10,8)\nplt.show()","74b8b62e":"#importing models through sklearn\nfrom sklearn import svm\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nfrom sklearn.model_selection import KFold","987046aa":"outcome=data1['Outcome']\ndata=data1[data1.columns[:8]]\ntrain,test=train_test_split(data1,test_size=0.3,random_state=0,stratify=data1['Outcome'])\ntrain_X=train[train.columns[:8]]\ntest_X=test[test.columns[:8]]\ntrain_Y=train['Outcome']\ntest_Y=test['Outcome']","be4838b5":"print(\"Train data :\",train_X.shape,\"\\nTrain Output :\",train_Y.shape,\"\\nTest Data :\",test_X.shape,\"\\nTest Output :\",test_Y.shape)","cd91ed3c":"model = svm.SVC()\nmodel.fit(train_X,train_Y)\nprediction=model.predict(test_X)\nprint('The accuracy of the Logistic Regression is',metrics.accuracy_score(prediction,test_Y)*100)","09ff2c53":"model=DecisionTreeClassifier()\nmodel.fit(train_X,train_Y)\nprediction=model.predict(test_X)\nprint('The accuracy of the Decision Tree is',metrics.accuracy_score(prediction,test_Y)*100)","ef5d64bb":"model = KNeighborsClassifier()\nmodel.fit(train_X,train_Y)\nprediction=model.predict(test_X)\nprint('The accuracy of the Logistic Regression is',metrics.accuracy_score(prediction,test_Y)*100)","f5408997":"dat=data1.copy()\ndel dat['Outcome']","833c9d7a":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(dat,data1['Outcome'],test_size=0.4,random_state=42, stratify=data1['Outcome'])","b994f1d7":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import KFold\n\ntest_scores = []\ntrain_scores = []\nvalidation_scores = []\nX_train_values = X_train.values\ny_train_values = y_train.values\n\n## cross validation with KFold algorithm\nkfold = KFold(5, shuffle=True, random_state=42)\nfor i in range(1,15):\n\n    knn = KNeighborsClassifier(i)\n\n    tr_scores = []\n    ts_scores = []\n    for train_ix, test_ix in kfold.split(X_train_values):\n        # define train\/test X\/y\n        X_train_fold, y_train_fold = X_train_values[train_ix],y_train_values[train_ix]\n        X_test_fold, y_test_fold = X_train_values[test_ix], y_train_values[test_ix]\n        knn.fit(X_train_fold,y_train_fold)\n        ts_scores.append(knn.score(X_test_fold,y_test_fold))\n        tr_scores.append(knn.score(X_train_fold,y_train_fold))\n    validation_scores.append(np.mean(ts_scores))\n    train_scores.append(np.mean(tr_scores))\n    test_scores.append(knn.score(X_test,y_test))","f38d62b4":"plt.figure(figsize=(12,5))\np = sns.lineplot(range(1,15),train_scores,marker='*',label='Train Score')\np = sns.lineplot(range(1,15),test_scores,marker='o',label='Test Score')\np = sns.lineplot(range(1,15),validation_scores,marker='v',label='Validation Score')\n","9258adff":"y_pred = knn.predict(X_test)\nfrom sklearn import metrics\ncnf_matrix = metrics.confusion_matrix(y_test, y_pred)\np = sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","c2ec03f3":"# Data Modelling","d3635fcb":"# Data Visualisation","802c4b73":"# Validating the visualisation\n","7e847728":"# Confusion Matrix","f0152b55":"# Cross validation"}}