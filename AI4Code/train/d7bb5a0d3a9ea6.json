{"cell_type":{"3ef338fa":"code","eb1c8c6a":"code","53a07ed0":"code","c4999356":"code","b9b6feaa":"code","043f55f2":"code","6541a78e":"code","b9c81dad":"code","3a0083f0":"code","c87e00ff":"code","91972971":"code","5cbc3997":"code","390f13ab":"code","537fe8a2":"code","69629f30":"code","d2e25228":"code","0b047de8":"code","3dea0434":"code","6dfbb60c":"code","4cbe0c7b":"code","9e596f7f":"code","c17f39fb":"code","9e4c1fc9":"code","9ab5e321":"code","d433a385":"code","734774f2":"code","28fcbba2":"code","0b896900":"code","31088fb6":"code","12a283e1":"code","cdcf0dba":"code","c22438dc":"code","6d8b1e4e":"code","e8d32780":"code","555ed83f":"code","dea3c229":"code","d420ba31":"code","9da4e4a6":"code","da660644":"code","d26c4a79":"code","b5ce3ddd":"code","50276670":"code","8feebb2b":"code","14e941d2":"code","b87030af":"markdown","ec410931":"markdown","3bf78494":"markdown","4d43e37b":"markdown","b3569327":"markdown","3e05afea":"markdown","81518669":"markdown","b80f3612":"markdown","28174659":"markdown","357f934c":"markdown","ca8df1aa":"markdown","bb7957f5":"markdown","560a3475":"markdown","6e80fdc3":"markdown","f533fce3":"markdown","7eb16990":"markdown","07c05c28":"markdown","1a1805a2":"markdown","f599f83e":"markdown","85d5b7fd":"markdown","86607e20":"markdown","78643538":"markdown","c7205316":"markdown","cd322522":"markdown","efadbf29":"markdown","3c92c656":"markdown","8ad102b0":"markdown","4379b6a4":"markdown","6dfaa75f":"markdown","1dfde108":"markdown","2b49fff6":"markdown","e31bcc19":"markdown","6f36d320":"markdown"},"source":{"3ef338fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eb1c8c6a":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeRegressor as DTRegressor\nfrom sklearn.ensemble import RandomForestRegressor as RFRegressor\nfrom sklearn.ensemble import AdaBoostRegressor as Ada\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\n\n%config InlineBackend.figure_format = 'retina'","53a07ed0":"df = pd.read_csv('..\/input\/wind-turbine-scada-dataset\/T1.csv')\ndf.columns = ['date', 'active_power', 'wind_speed', 'theor_power', 'wind_dir']\n\ndf","c4999356":"# Convert to datetime format\ndf['date'] = pd.to_datetime(df['date'])\n\n# Set date column as index\ndf.set_index('date', inplace=True)\n\ndf","b9b6feaa":"# Resample hourly average power and plot\ndf.resample('H').mean().active_power.plot(figsize=(12,3), ylabel='Active Power (kWh)')","043f55f2":"# Get hours from datetime\ndates = df.index\nhours = [date.hour for date in dates]\ndf['hour'] = hours\n\ndf","6541a78e":"df.groupby('hour').mean().active_power.plot(kind='bar', title='Average of Active Power of each Hours')","b9c81dad":"df.groupby('hour').mean().active_power.plot(title='Average of Active Power of each Hours')\nplt.show()\n\ndf.groupby('hour').mean().wind_speed.plot(title='Average of Wind Speed of each Hours')\nplt.show()\n\ndf.groupby('hour').mean().wind_dir.plot(title='Average of Wind Direction of each Hours')\nplt.show()","3a0083f0":"# Get hours from datetime\ndates = df.index\nmonths = [date.month for date in dates]\ndf['month'] = months\n\ndf","c87e00ff":"color = list(np.full(12, 'grey'))\ncolor[2] = 'orange'\ncolor","91972971":"color = list(np.full(12, 'grey'))\ncolor[2], color[10] = 'orange', 'orange'\n\ndf.groupby('month').mean().active_power.plot(kind='bar', title='Average of Active Power of each Months', color=color, rot=0)\nplt.ylabel('Active Power [kW]')","5cbc3997":"# Resample weekly average power and plot\ndf.resample('W').mean().active_power.plot(figsize=(12,3))","390f13ab":"# Resample monthly average power and plot\ndf.resample('M').mean().active_power.plot(figsize=(12,3))","537fe8a2":"# Calculate power loss\ndf['loss'] = df['theor_power'] - df['active_power']\n\ndf","69629f30":"# Resample weekly average loss and plot\ndf.resample('D').mean().loss.plot(figsize=(12,3))","d2e25228":"ax = df.plot(x='wind_speed', y='active_power', style='o')\ndf.plot(x='wind_speed', y='theor_power', style='.', ax=ax)","0b047de8":"interval = np.arange(0.25,26,0.5)\ndf.groupby(pd.cut(df['wind_speed'], interval)).mean().head(10)","3dea0434":"df.groupby(pd.cut(df['wind_speed'], interval)).mean().plot(y=['active_power', 'theor_power'], rot=45)","6dfbb60c":"# A better look plot. This will display the mean value 0.5, 1, 1.5, etc., instead of the bins\n\ndef mean_power_curve(df):\n    # Group by wind speed\n    groups = df.groupby(pd.cut(df['wind_speed'], interval))\n\n    mean_speed = []\n    for key, item in groups:\n        # Get keys from groupby method\n        c = np.str(key)\n        string = c[1:-1]\n        string = string.split(', ')\n        bounds = [float(i) for i in string]\n        mean = np.mean(bounds)\n        mean_speed.append(mean)\n\n    # Take average of grouped df\n    df_mean_speed = groups.mean()\n\n    # Add mean speed to dataframe\n    df_mean_speed['mean_speed'] = mean_speed\n\n    # Plot\n    df_mean_speed.plot(x='mean_speed', y=['theor_power', 'active_power'], style='.-')","4cbe0c7b":"mean_power_curve(df)\nplt.title('Mean Power Curve')\n# plt.xlim(0,5)","9e596f7f":"# create a function for a categorical column \ndef direction(x):\n    if x > 348.75 or x<11.25: return 'N'\n    if x < 33.75: return 'NNE'\n    if x < 56.25: return 'NE'\n    if x < 78.75: return 'ENE'\n    if x < 101.25: return 'E'\n    if x < 123.75: return 'ESE'\n    if x < 146.25: return 'SE'\n    if x < 168.75: return 'SSE'\n    if x < 191.25: return 'S'\n    if x < 213.75: return 'SSW'\n    if x < 236.25: return 'SW'\n    if x < 258.75: return 'WSW'\n    if x < 281.25: return 'W'\n    if x < 303.75: return 'WNW'\n    if x < 326.25: return 'NW'\n    else: return 'NNW'","c17f39fb":"df['direction'] = df['wind_dir'].apply(direction)\n\ndf","9e4c1fc9":"directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW']\n\nfor d in directions:\n    # Dataframe from one direction\n    df_d = df[df.direction==d]\n    # Plot mean power curve\n    mean_power_curve(df_d)\n    plt.title(f'Mean Power Curve at Direction {d}', size=15)\n#     plt.xlim(0,5)","9ab5e321":"df.groupby('direction').loss.sum().sort_values(ascending=False).plot(kind='bar', title='Total Power Loss (kWh)')","d433a385":"df.groupby('direction').wind_speed.mean().sort_values(ascending=False).plot(kind='bar', title='Wind Speed (m\/s)')","734774f2":"# #function to create x,y component of wind direction \n# def x_y_component(wind_direction, wind_speed):\n#     \"\"\"\n#     Convert degrees to x,y components\n#     \"\"\"\n#     #convert to radians \n#     radians = (wind_direction * np.pi)\/180\n#     # give the x, y compenents \n#     x = wind_speed * np.cos(radians)\n#     y = wind_speed * np.sin(radians)\n    \n#     return x,y","28fcbba2":"# # Calculate wind speed \n# wind_speed_x, wind_speed_y = x_y_component(df.wind_dir.values, df.wind_speed.values)\n\n# df['wind_speed_x'] = wind_speed_x\n# df['wind_speed_y'] = wind_speed_y\n\n# df","0b896900":"df2 = df.copy()\n\n# Remove negative active power\ndf_outlier_removed = df2[df2.active_power>0]\n\ndf_outlier_removed","31088fb6":"# When wind speed is below 3.5, there is still power\ndf_outlier_removed[(df_outlier_removed.wind_speed<=3.5) & (df_outlier_removed.active_power!=0)]","12a283e1":"df_zero_power = df[(df.active_power==0) & (df.theor_power!=0) & (df.wind_speed>3.5)]\n\n# Plot the frequency (counts) of ZERO power of every month\ndf_zero_power.resample('M').count().active_power.plot(kind='bar')","cdcf0dba":"df[(df.active_power>df.theor_power)].resample('M').count().active_power.plot(kind='bar')","c22438dc":"sns.pairplot(df, vars=['wind_speed', 'wind_dir', 'theor_power', 'hour', 'month', 'active_power'], corner=True)","6d8b1e4e":"def corr_heatmap(df):    \n    plt.figure(figsize=(8,8))\n\n    mask = np.triu(np.ones_like(df.corr(), dtype=np.bool))\n    sns.heatmap(df.corr(), mask=mask, vmin=-1, vmax=1, cmap='icefire')\n\ncorr_heatmap(df_outlier_removed[['wind_speed', 'wind_dir', 'hour', 'month', 'active_power']])","e8d32780":"# Features and target: use only wind direction and wind speed\nX = df_outlier_removed[['wind_dir', 'wind_speed']]\ny = df_outlier_removed['active_power']\n\n# Train test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Make pipeline\npipe = make_pipeline(StandardScaler(), SVR())\n\n# 5-fold CV\nr2_cv = cross_val_score(pipe, X_train, y_train, cv=5)\nprint(r2_cv)\nprint(np.mean(r2_cv))","555ed83f":"# Fit SVM model\npipe.fit(X_train, y_train)\n\n# Predict on test set\ny_pred = pipe.predict(X_test)\n\n# Train R2\nprint(f'Train R2: {pipe.score(X_train, y_train)}')\n\n# Test R2, MSE, MAE\nprint(f'Test R2: {pipe.score(X_test, y_test)}')\nprint(f'Test MAE: {mean_absolute_error(y_test, y_pred)}')\nprint(f'Test MSE: {mean_squared_error(y_test, y_pred)}')","dea3c229":"plt.scatter(y_pred, y_test)\nplt.xlabel('True Active Power')\nplt.ylabel('Predicted Active Power')","d420ba31":"# Entire data\ny_pred_all = pipe.predict(X)","9da4e4a6":"# Predicted power into dataframe\ny_pred = pd.DataFrame(y_pred_all, columns=['active_power'])\ny_pred.index = y.index\n\ny_pred","da660644":"# True power (blue) vs. predicted power (orange)\nt = df_outlier_removed.index\nax = y.plot(figsize=(10,4), xlim=(np.datetime64('2018-11-20'), np.datetime64('2018-11-25')))\ny_pred.plot(figsize=(10,4), xlim=(np.datetime64('2018-11-20'), np.datetime64('2018-11-25')), ax=ax)\nplt.title('Predicted vs. True Wind Turbine Power', size=15)\nplt.ylabel('Active Power [kW]')","d26c4a79":"ws = np.linspace(0, 26, 50)\nwd = np.linspace(0, 360, 50)\nws, wd = np.meshgrid(ws, wd)\n\n# Prediction space dataframe\nX_space = pd.DataFrame({'wind_dir': wd.flatten(), 'wind_speed': ws.flatten()})\n\ny_pred_space = pipe.predict(X_space)","b5ce3ddd":"pipe.steps[1][1].get_params()","50276670":"pipe.steps[1][1]._gamma","8feebb2b":"# Creating figure\nfig = plt.figure(figsize = (10, 7))\nax = plt.axes(projection =\"3d\")\n \n# Creating plot\nax.scatter3D(X_space.wind_speed.values, X_space.wind_dir.values, y_pred_space, \n             c=y_pred_space, cmap='jet')\n\n# ax.scatter3D(X.wind_speed.values, X.wind_dir.values, y, \n#              c='b', alpha=0.2)\n\nax.set_xlabel('Wind Speed [m\/s]', size=12)\nax.set_ylabel('Wind Direction [\u00b0]', size=12)\nax.set_zlabel('Active Power [kW]', size=12)\nax.set_title('SVM (C=1, Gamma=0.5)', size=20)","14e941d2":"# Features and target: now include hour and month as temporal features\nX = df_outlier_removed[['wind_dir', 'wind_speed', 'hour', 'month']]\ny = df_outlier_removed['active_power']\n\ntrees = [DTRegressor(), RFRegressor(), XGBRegressor(), Ada(), LGBMRegressor()]\n\nfor tree in trees:\n    # Make pipeline\n    pipe = make_pipeline(StandardScaler(), tree)\n    \n    # 10-fold CV\n    r2_cv = cross_val_score(pipe, X_train, y_train, cv=10)\n    print(f'{pipe.steps[1][1]}: {np.mean(r2_cv)}')","b87030af":"Peak power on March and November, however power drop on July, October, and December.","ec410931":"The 5-fold cross-validation R2 score of our SVM model is 94%.","3bf78494":"Too many values are plotted. We can bin the data by wind speed i.e. wind speed 0.25-0.75, 0.75-1.25, etc., then take average of the active power.","4d43e37b":"## Support Vector Machine","b3569327":"## Monthly and weekly analysis","3e05afea":"# Wind Turbine SCADA Data Analytics and Prediction of Turbine Power ","81518669":"# 4. Directivity analysis (+ power curve, again)","b80f3612":"## 5. Preparation for ML - Data cleansing, EDA","28174659":"## Cleansing","357f934c":"# 2. Time series analysis","ca8df1aa":"## Hourly analysis","bb7957f5":"We made our first model, SVM, that will model the data **without** temporal information as features (hour and month). We would like to investigate \"mathematically\" the turbine power as a function of wind speed and wind direction.","560a3475":"![image](https:\/\/user-images.githubusercontent.com\/51282928\/142767727-dab61a3e-bb06-4fad-925e-aca9319fe870.png)","6e80fdc3":"Let's visualize the non-linear function (our SVM hyperplane) of Active Power as a function of Wind Speed and Wind Direction, $P=f(w_s, w_d)$","f533fce3":"# 6. Power prediction","7eb16990":"## EDA","07c05c28":"We would like to investigate Mean Power Curve plot for all directions. ","1a1805a2":"It is not convenient to see an hourly plot like this. Instead, we can group the dataframe by hours (hour 0 to 24) then take average of active power. ","f599f83e":"Interestingly, we can identify some events when active power exceeds theoretical power. This is very beneficial, but suspicious because active power is often lower than theoretical power.","85d5b7fd":"The true power of wind turbine doesn't follow the theoretical power curve from manufacturer. There is a difference between theoretical and active power, called Loss, the new feature that we created before.\n\nWe also see that below 3.5 m\/s wind speed, there is 0 active power (no production). We will later on use this 3.5 m\/s wind speed as cutoff. ","86607e20":"The second model, we will use tree models to include temporal information as features. We have seen that turbine power also varies with hour and month. We will compare 5 tree models and pick the best using 10-fold CV.","78643538":"# 3. Wind power curve analysis","c7205316":"And we identify some events when there is ZERO power produced although wind speed is above 3 m\/s and theoretical power is expected to be not ZERO. We see these happen most frequently in January and December.","cd322522":"We identify some events when there is power produced by the turbine although wind speed is below threshold 3 m\/s.","efadbf29":"# 1. Read data","3c92c656":"## Tree models","8ad102b0":"Predict on time-series.","4379b6a4":"**Other notebooks attempted to remove records with very low wind speed (<3.5 m\/s) and very high wind speed (> 25 m\/s), or records with no production (0 kWh). However, in this notebook, we keep these records because we would like to include these events in our prediction i.e. when wind speed is 10 m\/s but no production. Therefore, we do not clean remove power production.**","6dfaa75f":"## Outliers","1dfde108":"We find negative active power (< 0 kWh) in the data. In Physics, negative power is normal, means losing power due to friction. Neither we know it is physically true nor it is erroneous records, we do not want to predict negative power. So we will remove it first. ","2b49fff6":"Severe power loss on many days in January, at the end of February, one day in May, and at the end of December. This can be due to maintainance. ","e31bcc19":"# 7. Conclusion\n\nFrom the data analytics part we got these:\n\n1. The average power production is higher in March, August and November. Less production in January and December, beginning and end of the year.\n\n2. The average power production is higher daily between 16:00 and 24:00.\n\n3. The power production is higher when the wind blows from the directions between 000-090 and 180-225 degrees.\n\n4. The wind speed threshold, or the smallest wind speed to produce power, is 3 m\/s\n\n5. The produced power does not follow the theoretical power curve due to losses in power.\n\n6. There are some events when there is ZERO production when wind speed is above threshold 3 m\/s. This can be due to maintanance or shut-down (cause is uncertain).\n\n7. But, there are also some events when turbine produces power when wind speed is below threshold 3 m\/s. Cause uncertain.\n\nBased on these analysis, we made two predictive models. The first model is Support Vector Machine (SVM), which we did not include temporal features e.g. hour and month. With this model, we modeled turbine power as a function of wind speed and wind direction. Through 5-fold CV, the R2 score of our SVM is 94%. \n\nThe second model we tried tree models to include temporal information. We compared the performance of 5 tree models and we found Light Gradient Boosting Machine (LGBM) had the highest R2 score of 96% through 5-fold CV. ","6f36d320":"From the model comparison, Light Gradient Boosting Machine (LGBM) achieves the highest cross-validation R2 score of all tree models (scored 96%). It is also 2% higher than R2 score of our SVM."}}