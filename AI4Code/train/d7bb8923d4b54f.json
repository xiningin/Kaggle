{"cell_type":{"8c562600":"code","a39638db":"code","c7b1fbb5":"code","12b1d513":"code","0d6d069e":"code","63e018d2":"code","cd14b5bd":"code","a6ddfb99":"code","72d8dee7":"code","d5904ba8":"code","98f48421":"code","2d8425b3":"code","b7b8b1a1":"code","233d2568":"code","6f806fec":"code","0a98af67":"code","74454a56":"code","c4aaa2b9":"code","67a31ebd":"code","83629e9f":"code","7a7288ff":"code","46a667fb":"code","8960c4f3":"code","627ed845":"code","2aadfdc6":"code","e96916b3":"code","960f1b03":"code","03630450":"code","fdccbcb8":"code","fb0a649e":"code","781ed869":"code","3874b2a0":"code","84b60c76":"code","803eb750":"code","266799fd":"code","3ecbd4eb":"code","37d94f8f":"code","4c0b2b8c":"code","deb88324":"code","fc78547c":"markdown","e4a740fa":"markdown","0d75758c":"markdown","2f1b0cbe":"markdown","53f968d8":"markdown","c3f3cce6":"markdown","49ea7a0b":"markdown","6600b792":"markdown"},"source":{"8c562600":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a39638db":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c7b1fbb5":"df = pd.read_csv('..\/input\/weather-dataset-rattle-package\/weatherAUS.csv')\ndf","12b1d513":"print(df.shape)\nprint('=' * 50)\nprint(df.info())","0d6d069e":"df.describe(include='all')","63e018d2":"df.isnull().sum()","cd14b5bd":"total = df.isnull().sum().sort_values(ascending=False)\npercent1 = df.isnull().sum() \/ df.isnull().count() * 100\npercent2 = percent1.sort_values(ascending=False)\nmissing_data = pd.concat([total, percent2], axis=1, keys=['Total', 'Percentage Null %'])\nmissing_data","a6ddfb99":"df.duplicated().sum()","72d8dee7":"df_cat = df[['Date', 'Location', 'WindGustDir', 'WindDir9am', 'WindDir3pm', 'RainToday', 'RainTomorrow']]\ndf_num = df.drop(columns=['Date', 'Location', 'WindGustDir', 'WindDir9am', 'WindDir3pm', 'RainToday', 'RainTomorrow'], axis=1)","d5904ba8":"# Visualisasi Korelasi antar kolom\nplt.figure(figsize=(16,8))\nsns.heatmap(df.corr(), annot=True)","98f48421":"df.hist(figsize=(20,10), grid=False)","2d8425b3":"fig, ax = plt.subplots(3, 3, figsize=(15, 15))\n\nfor cat, ax in zip(df_cat, ax.flatten()):\n    sns.countplot(cat, data=df, ax=ax)","b7b8b1a1":"sns.pairplot(df)","233d2568":"# Checking Outliers\nplt.figure(figsize=(20,10))\ndf.boxplot()","6f806fec":"import datetime\n\ndf_rain = df[['Date', 'Rainfall']]\ndf_rain['Year'] = df['Date'].apply(lambda x : datetime.datetime.strptime(x, '%Y-%m-%d').strftime('%Y'))\ndf_rain['Month'] = df['Date'].apply(lambda x : datetime.datetime.strptime(x, '%Y-%m-%d').strftime('%Y-%m'))","0a98af67":"# grafik rata\" curah hujan selama 10 th.\nplt.figure(figsize=(20,10))\ndf_rain.groupby('Year')['Rainfall'].mean().plot(grid=True)\nplt.show()","74454a56":"# grafik rata\" curah hujan perbulan selama 10 th\nplt.figure(figsize=(20,10))\ndf_rain.groupby('Month')['Rainfall'].mean().plot(grid=True)\nplt.show()","c4aaa2b9":"# curah hujan di berbagai wilayah di Australia\nplt.figure(figsize=(20,10))\ndf.groupby('Location')['Rainfall'].mean().sort_values().plot(kind='barh', grid=True)\nplt.show()","67a31ebd":"# Drop kolom dengan Missing Value di atas 35%\ndf = df.drop(['Evaporation', 'Sunshine', 'Cloud9am', 'Cloud3pm'], axis=1)","83629e9f":"# Membuat variabel sesuai dengan tipe data\ndf_cat = df[['WindGustDir','WindDir9am','WindDir3pm','RainToday','RainTomorrow','Date','Location']]\ndf_num = df.drop(['WindGustDir','WindDir9am','WindDir3pm','RainToday','RainTomorrow','Date','Location'], axis=1)","7a7288ff":"# Looping Handling Missig value df_cat\n\nfor col in df_cat.columns.values:\n    if df[col].isnull().sum() == 0:\n        continue\n    df_cat[col] = df.groupby('Location')[col].apply(lambda x: x.fillna(x.mode().max()))","46a667fb":"df_cat.isnull().sum()","8960c4f3":"# Handling missing Value kolom WindGustDir\ndf_cat['WindGustDir'] = df['WindGustDir'].fillna(df['WindGustDir'].mode().max())","627ed845":"# Looping Handling Missing Value df_num\n\nfor col in df_num.columns.values:\n    if df[col].isnull().sum() == 0:\n        continue\n    df_num[col] = df.groupby('Location')[col].apply(lambda x: x.fillna(x.mean()))","2aadfdc6":"# Handling missing value kolom yang masih ada null nya\ndf_num['WindGustSpeed'] = df_num['WindGustSpeed'].fillna(df['WindGustSpeed'].mean())\ndf_num[['Pressure9am', 'Pressure3pm']] = df_num[['Pressure9am', 'Pressure3pm']].fillna(df[['Pressure9am', 'Pressure3pm']].mean())","e96916b3":"df_num.isnull().sum()","960f1b03":"# Me Replace kolom RainToday dan RainTomorrow menjadi numerik 0 dan 1\nd = {'Yes':1, 'No':0}\ndf_cat['RainToday'] = df_cat['RainToday'].map(d)\ndf_cat['RainTomorrow'] = df_cat['RainTomorrow'].map(d)","03630450":"df_cat2 = df_cat[['WindGustDir','WindDir9am','WindDir3pm','Location']]\n\n# Me Replace tipe data kategori menjadi value counts\ndf_cat2['WindGustDir'] = df_cat2['WindGustDir'].map(df_cat2['WindGustDir'].value_counts())\ndf_cat2['WindDir9am'] = df_cat2['WindDir9am'].map(df_cat2['WindDir9am'].value_counts())\ndf_cat2['WindDir3pm'] = df_cat2['WindDir3pm'].map(df_cat2['WindDir3pm'].value_counts())\ndf_cat2['Location'] = df_cat2['Location'].map(df_cat2['Location'].value_counts())","fdccbcb8":"df_new = pd.merge(df_num, df_cat2, left_index=True, right_index=True)\ndf_new","fb0a649e":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(df_new)\ndf_scaler = pd.DataFrame(scaler.fit_transform(df_new), columns=df_new.columns)","781ed869":"df_x = pd.merge(df_scaler, df_cat['RainToday'], left_index=True, right_index=True)","3874b2a0":"df_x.hist(bins=50, figsize=(20,10), grid=False)\nplt.show()","84b60c76":"plt.figure(figsize=(20,10))\nsns.heatmap(df.corr(), annot=True)","803eb750":"df_x.drop('Temp9am', axis=1, inplace=True)\ndf_x.drop('Temp3pm', axis=1, inplace=True)","266799fd":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df_x, df_cat['RainTomorrow'], test_size=0.2, random_state=50)","3ecbd4eb":"# Oversampled\n\nfrom imblearn.over_sampling import SMOTE\nfrom collections import Counter\n\nsm = SMOTE(random_state=37)\nX_train_res, y_train_res = sm.fit_resample(X_train, y_train)\n\nprint('Sebelum {}'.format(Counter(y_train)))\nprint('Sesudah {}'.format(Counter(y_train_res)))","37d94f8f":"from sklearn import datasets, linear_model, metrics\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score","4c0b2b8c":"# Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\n\nmodel_tree = DecisionTreeClassifier(max_depth=3)\nmodel_tree.fit(X_train_res, y_train_res)\n\ny_dt_pred = model_tree.predict(X_test)\n\nmodel_tree.score(X_train_res, y_train_res)","deb88324":"print('Confusion Matrix \\n {}'.format(confusion_matrix(y_test, y_dt_pred)))\nprint('Accuracy Score {:.2f}'.format(accuracy_score(y_test, y_dt_pred) * 100))\nprint(classification_report(y_test, y_dt_pred))","fc78547c":"## Visualisation Data Distribution","e4a740fa":"## Splitting Data","0d75758c":"## Standarisasi","2f1b0cbe":"## checking missing value","53f968d8":"# Data PreProcessing","c3f3cce6":"# Modelling","49ea7a0b":"# Exploratory Data Analysis (EDA)","6600b792":"## Handling missing value"}}