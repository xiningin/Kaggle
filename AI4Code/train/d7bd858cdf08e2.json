{"cell_type":{"081a66e4":"code","93643edf":"code","8ca981a8":"code","a084b91f":"code","f11e3f2c":"code","11e83049":"code","38167ca1":"code","efda25c0":"code","129bd841":"code","73b3e8f2":"code","7ffd0742":"code","c00cf907":"code","06171a2b":"code","41bc25bb":"code","7860f851":"code","d4dbfd4b":"markdown","2f518592":"markdown","77dfdecd":"markdown","6c4fb507":"markdown","2b650165":"markdown","8b787fa3":"markdown","827cbf34":"markdown","f5781ea3":"markdown","ac495290":"markdown","c413a6f5":"markdown","9117d15c":"markdown","ecdd52a7":"markdown","e60e2090":"markdown","504cf4ab":"markdown","2f5c17e5":"markdown","fab0fa8c":"markdown","0e007c82":"markdown","666582b4":"markdown","3f9bd91c":"markdown"},"source":{"081a66e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","93643edf":"import warnings\nwarnings.simplefilter('ignore')\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport random\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV, cross_val_score, RepeatedStratifiedKFold\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier, StackingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import f1_score, recall_score, precision_score, accuracy_score, roc_auc_score, make_scorer, confusion_matrix, classification_report\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.utils.class_weight import compute_class_weight\n\nfrom skopt import BayesSearchCV\n# parameter ranges are specified by one of below\nfrom skopt.space import Real, Categorical, Integer\n\n#classifiers\nfrom sklearn.dummy import DummyClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom catboost import CatBoostClassifier, Pool\nimport xgboost as xgb\nfrom lightgbm import LGBMClassifier\nfrom sklearn.naive_bayes import MultinomialNB\n\npd.set_option('display.max_columns', 300)","8ca981a8":"train_data = pd.read_csv('\/kaggle\/input\/mf-accelerator\/contest_train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/mf-accelerator\/contest_test.csv')\ntrain_data.head()","a084b91f":"train_data = train_data.drop(['FEATURE_189', 'FEATURE_190', 'FEATURE_194', 'FEATURE_191', 'FEATURE_192', 'FEATURE_187', 'FEATURE_193'], axis = 1)\ntest_data = test_data.drop(['FEATURE_189', 'FEATURE_190', 'FEATURE_194', 'FEATURE_191', 'FEATURE_192', 'FEATURE_187', 'FEATURE_193'], axis = 1)","f11e3f2c":"train_data = train_data.interpolate()\ntest_data = test_data.interpolate()\n\ntrain_data = train_data.fillna(method='bfill')\ntest_data = test_data.fillna(method='bfill')","11e83049":"num_rows = len(train_data.index)\nlow_information_cols = [] #\n\nfor col in train_data.columns:\n    cnts = train_data[col].value_counts(dropna=False)\n    top_pct = (cnts\/num_rows).iloc[0]\n    \n    if top_pct > 0.95:\n        low_information_cols.append(col)\nprint(low_information_cols)","38167ca1":"train_data_drop = train_data.drop(low_information_cols, axis = 1)\ntest_data_drop = test_data.drop(low_information_cols, axis = 1)\n\ntrain_data_drop = train_data_drop.drop('ID', axis = 1)\ntest_data_drop = test_data_drop.drop('ID', axis = 1)","efda25c0":"CLASS_WEIGHTS = compute_class_weight(class_weight='balanced', classes=[0,1,2], y=train_data_drop['TARGET'])\nCLASS_WEIGHTS","129bd841":"X = train_data_drop.drop('TARGET', axis=1)\ny = train_data_drop['TARGET']\n\nX_test = test_data_drop\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=12345)\n\nprint('\u0420\u0430\u0437\u043c\u0435\u0440 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438:', X_train.shape)\nprint('\u0420\u0430\u0437\u043c\u0435\u0440 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438:', X_valid.shape)","73b3e8f2":"RND_ST = 42","7ffd0742":"   \ndef final_pred(model, features, target, test):\n   \n    model.fit(features, target)\n    \n    pred_final = pd.DataFrame(model.predict(test), columns=['Predicted'])\n \n    return pred_final\n\n    \ndef val_pred(model, X_train, y_train, X_val, y_val):\n    \n    model.fit(X_train, y_train)\n    \n    pred_train = model.predict(X_train)\n    pred_valid = model.predict(X_val)\n    \n    f1_train = f1_score(y_train, pred_train, average='macro').round(3)\n    f1_test = f1_score(y_val, pred_valid, average='macro').round(3)\n    cl_rep = classification_report(y_val, pred_valid)\n    \n    cf = confusion_matrix(y_val, pred_valid)\n    \n    \n    print()\n    print('train', f1_train)\n    print('test', f1_test)\n    print()\n    print(cf)\n    print()\n    print(cl_rep)","c00cf907":"# \u0411\u0430\u0437\u043e\u0432\u044b\u0439 CATBoost\ncbc = CatBoostClassifier(random_state=RND_ST, verbose = 0, class_weights=CLASS_WEIGHTS)\nval_pred(cbc, X_train, y_train, X_valid, y_valid)\n","06171a2b":"cbc1 = CatBoostClassifier(\n              l2_leaf_reg = 0.1,                        \n              verbose=0, \n              class_weights=CLASS_WEIGHTS,\n              random_seed=RND_ST)\nval_pred(cbc1, X_train, y_train, X_valid, y_valid)","41bc25bb":"vc = VotingClassifier([('clf1', cbc), ('clf2', cbc1)], voting='soft')\nval_pred(vc, X_train, y_train, X_valid, y_valid)","7860f851":"pred_final = final_pred(vc, X_train, y_train, X_test)\nsubmission = pd.DataFrame(test_data['ID'])\nsubmission = submission.join(pred_final)\nsubmission.to_csv('\/kaggle\/working\/mgf_10.csv', index=False)\nsubmission.head()","d4dbfd4b":"\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u043c ffill \u0438 \u0437\u0430\u0442\u0435\u043c bfill. \u0414\u043b\u044f \u041a\u0430\u0442\u0431\u0443\u0441\u0442\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c, \u043d\u043e \u0440\u0435\u0448\u0438\u043b \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.  \n\u0412 \u0438\u0442\u043e\u0433\u0435 \u0434\u0430\u0436\u0435 \u043a\u0430\u0442\u0431\u0443\u0441\u0442 \u0434\u0430\u0432\u0430\u043b \u043b\u0443\u0447\u0448\u0443\u044e \u043c\u0435\u0442\u0440\u0438\u043a\u0443 \u0441 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438.","2f518592":"## \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","77dfdecd":"## \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439","6c4fb507":"## \u0427\u0442\u043e\u0431\u044b \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442\u044b \u0434\u0432\u0443\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043b VotingClassifier","2b650165":"## \u0421\u0430\u0431\u043c\u0438\u0442","8b787fa3":"\u0423\u0434\u0430\u043b\u0438\u043c \u043d\u0435\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","827cbf34":"\u041d\u0430\u0439\u0434\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0431\u043e\u043b\u044c\u0448\u0435 95%","f5781ea3":"***\n## \u041b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n\n\u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 Private 0.53672, \u043d\u0430 Public 0.53012.\n\n\u041c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0430\u0441\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u0430\u044f \u0437\u0430 \u0441\u0447\u0435\u0442 VotingClassifier","ac495290":"\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435","c413a6f5":"\u0412\u0438\u0434\u0438\u043c 7 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432. \u0423\u0447\u0438\u0442\u044b\u0432\u0430\u044f, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443 \u043d\u0430\u0441 \u0430\u043d\u043e\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u044b, \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u043d\u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u043d\u0438 \u043f\u043e\u043d\u044f\u0442\u044c \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430.\n\n\u0423\u0434\u0430\u043b\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 \u043e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432.","9117d15c":"## \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0443\u043f\u0441\u043a\u043e\u0432 \u043c\u0435\u0442\u043e\u0434\u043e\u043c interpolate \u0438 bfill","ecdd52a7":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u0437\u044f\u043b \u043a\u0430\u0442\u0431\u0443\u0441\u0442 \u0441 \u0431\u0430\u0437\u043e\u0432\u044b\u043c\u0438 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0430\u0442\u0440\u0430\u043c\u0438. ","e60e2090":"## \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u044f. \u0412\u0441\u0435 \u043d\u0435 \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u0432\u0448\u0438\u0435 \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u044b \u0443\u0434\u0430\u043b\u0435\u043d\u044b.","504cf4ab":"## \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0442\u0431\u0443\u0441\u0442\u0430","2f5c17e5":"\u0421\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u044b","fab0fa8c":"## \u041f\u043e\u0434\u0431\u043e\u0440 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","0e007c82":"## \u041f\u043e\u0438\u0441\u043a \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0434\u043e\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u0435\u0435 95%","666582b4":"## \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","3f9bd91c":"\u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043a\u0430\u0442\u0431\u0443\u0441\u0442\u0430 \u0437\u0430\u043c\u0435\u0442\u0438\u043b, \u0447\u0442\u043e \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043b\u043e\u0445\u043e \u0438\u0449\u0435\u0442 \u0435\u0434\u0438\u043d\u0438\u0447\u043a\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 l2_leaf_reg.\n\u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0441\u043a\u043e\u0440 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u0442\u0430\u043b \u0447\u0443\u0442\u044c \u0445\u0443\u0436\u0435, \u043d\u043e \u0435\u0434\u0438\u043d\u0438\u0447\u043a\u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u043b\u0438\u0441\u044c \u043b\u0443\u0447\u0448\u0435."}}