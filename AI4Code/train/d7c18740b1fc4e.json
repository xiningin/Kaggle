{"cell_type":{"efc30439":"code","21d4beec":"code","e0e8e083":"code","935b84eb":"code","ed74a9ad":"code","a36b3ecc":"code","0e1c4e73":"code","3078ac4a":"code","7e003b6f":"code","266b3a5e":"code","16289991":"code","0a2b5c27":"code","91d312c1":"code","4d695cb3":"code","388b2058":"code","a2610c0a":"code","a56cbac1":"code","c56809c8":"code","24e07cd2":"code","6fcbfc2b":"code","115f11be":"code","7e59497d":"code","30c88174":"code","73d2d19d":"code","fe2098fa":"code","9144b0cd":"code","dd805ae8":"code","eb59d8b4":"code","33dc83c5":"code","0f5ee7c7":"code","5c1c9105":"markdown","6265ffd1":"markdown","af8ded43":"markdown","858da075":"markdown","d07ac561":"markdown","75136301":"markdown","ac7795e9":"markdown","8df7a741":"markdown","108a3732":"markdown","575e5a39":"markdown","99e0ae99":"markdown","7972969a":"markdown","c796fae6":"markdown","f646d750":"markdown","05894ca3":"markdown","8e002478":"markdown","f18af1f1":"markdown","c88fa54a":"markdown","31104826":"markdown","54e15edc":"markdown","020361f3":"markdown","c61e22e8":"markdown"},"source":{"efc30439":"from mlxtend.plotting import plot_decision_regions\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n#plt.style.use('ggplot')\n#ggplot is R based visualisation package that provides better graphics with higher level of abstraction\n","21d4beec":"#Loading the dataset\ndiabetes_data = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\n\n#Print the first 5 rows of the dataframe.\ndiabetes_data.head()","e0e8e083":"## gives information about the data types,columns, null value counts, memory usage etc\n## function reference : https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.info.html\ndiabetes_data.info(verbose=True)","935b84eb":"## basic statistic details about the data (note only numerical columns would be displayed here unless parameter include=\"all\")\n## for reference: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.describe.html#pandas.DataFrame.describe\ndiabetes_data.describe()\n\n## Also see :\n##to return columns of a specific dtype: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes","ed74a9ad":"diabetes_data.describe().T","a36b3ecc":"diabetes_data_copy = diabetes_data.copy(deep = True)\ndiabetes_data_copy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = diabetes_data_copy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)\n\n## showing the count of Nans\nprint(diabetes_data_copy.isnull().sum())","0e1c4e73":"p = diabetes_data.hist(figsize = (20,20))","3078ac4a":"diabetes_data_copy['Glucose'].fillna(diabetes_data_copy['Glucose'].mean(), inplace = True)\ndiabetes_data_copy['BloodPressure'].fillna(diabetes_data_copy['BloodPressure'].mean(), inplace = True)\ndiabetes_data_copy['SkinThickness'].fillna(diabetes_data_copy['SkinThickness'].median(), inplace = True)\ndiabetes_data_copy['Insulin'].fillna(diabetes_data_copy['Insulin'].median(), inplace = True)\ndiabetes_data_copy['BMI'].fillna(diabetes_data_copy['BMI'].median(), inplace = True)","7e003b6f":"p = diabetes_data_copy.hist(figsize = (20,20))","266b3a5e":"## observing the shape of the data\ndiabetes_data.shape","16289991":"p=sns.pairplot(diabetes_data_copy, hue = 'Outcome')","0a2b5c27":"plt.figure(figsize=(12,10))  # on this line I just set the size of figure to 12 by 10.\np=sns.heatmap(diabetes_data.corr(), annot=True,cmap ='RdYlGn')  # seaborn has very simple solution for heatmap","91d312c1":"plt.figure(figsize=(12,10))  # on this line I just set the size of figure to 12 by 10.\np=sns.heatmap(diabetes_data_copy.corr(), annot=True,cmap ='RdYlGn')  # seaborn has very simple solution for heatmap","4d695cb3":"from sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX =  pd.DataFrame(sc_X.fit_transform(diabetes_data_copy.drop([\"Outcome\"],axis = 1),),\n        columns=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n       'BMI', 'DiabetesPedigreeFunction', 'Age'])","388b2058":"X.head()","a2610c0a":"X.shape","a56cbac1":"#X = diabetes_data.drop(\"Outcome\",axis = 1)\ny = diabetes_data_copy.Outcome","c56809c8":"#importing train_test_split\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=1\/3,random_state=42, stratify=y)","24e07cd2":"from sklearn.neighbors import KNeighborsClassifier\n\n\ntest_scores = []\ntrain_scores = []\n\nfor i in range(1,15):\n\n    knn = KNeighborsClassifier(i)\n    knn.fit(X_train,y_train)\n    \n    train_scores.append(knn.score(X_train,y_train))\n    test_scores.append(knn.score(X_test,y_test))","6fcbfc2b":"## score that comes from testing on the same datapoints that were used for training\nmax_train_score = max(train_scores)\ntrain_scores_ind = [i for i, v in enumerate(train_scores) if v == max_train_score]\nprint('Max train score {} % and k = {}'.format(max_train_score*100,list(map(lambda x: x+1, train_scores_ind))))","115f11be":"## score that comes from testing on the datapoints that were split in the beginning to be used for testing solely\nmax_test_score = max(test_scores)\ntest_scores_ind = [i for i, v in enumerate(test_scores) if v == max_test_score]\nprint('Max test score {} % and k = {}'.format(max_test_score*100,list(map(lambda x: x+1, test_scores_ind))))","7e59497d":"plt.figure(figsize=(12,5))\np = sns.lineplot(range(1,15),train_scores,marker='*',label='Train Score')\np = sns.lineplot(range(1,15),test_scores,marker='o',label='Test Score')","30c88174":"#Setup a knn classifier with k neighbors\nknn = KNeighborsClassifier(11)\n\nknn.fit(X_train,y_train)\nknn.score(X_test,y_test)","73d2d19d":"#import confusion_matrix\nfrom sklearn.metrics import confusion_matrix\n#let us get the predictions using the classifier we had fit above\ny_pred = knn.predict(X_test)\nconfusion_matrix(y_test,y_pred)\npd.crosstab(y_test, y_pred, rownames=['True'], colnames=['Predicted'], margins=True)","fe2098fa":"y_pred = knn.predict(X_test)\nfrom sklearn import metrics\ncnf_matrix = metrics.confusion_matrix(y_test, y_pred)\np = sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","9144b0cd":"#import classification_report\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","dd805ae8":"from sklearn.metrics import roc_curve\ny_pred_proba = knn.predict_proba(X_test)[:,1]\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)","eb59d8b4":"plt.plot([0,1],[0,1],'k--')\nplt.plot(fpr,tpr, label='Knn')\nplt.xlabel('fpr')\nplt.ylabel('tpr')\nplt.title('Knn(n_neighbors=11) ROC curve')\nplt.show()\n","33dc83c5":"#Area under ROC curve\nfrom sklearn.metrics import roc_auc_score\nroc_auc_score(y_test,y_pred_proba)","0f5ee7c7":"#import GridSearchCV\nfrom sklearn.model_selection import GridSearchCV\n#In case of classifier like knn the parameter to be tuned is n_neighbors\nparam_grid = {'n_neighbors':np.arange(1,50)}\nknn = KNeighborsClassifier()\nknn_cv= GridSearchCV(knn,param_grid,cv=5)\nknn_cv.fit(X,y)\n\nprint(\"Best Score:\" + str(knn_cv.best_score_))\nprint(\"Best Parameters: \" + str(knn_cv.best_params_))","5c1c9105":"Aiming to impute nan values for the columns in accordance with their distribution","6265ffd1":"Plotting after Nan removal","af8ded43":"FN-False Negatives\n\nRecall(sensitivity or true positive rate): Fraction of positives that were correctly identified.\nRecall = TP\/(TP+FN)\n","858da075":"To fill these Nan values the data distribution needs to be understood","d07ac561":"Pair plot for clean data","75136301":"    F1 Score (aka F-Score or F-Measure) \u2013 A helpful metric for comparing two classifiers.\n    F1 Score takes into account precision and the recall. \n    It is created by finding the the harmonic mean of precision and recall.\n\n    F1 = 2 x (precision x recall)\/(precision + recall)\n","ac7795e9":"TP =True Positives\nFP= False Positives\nPrecision = Accuracy of positive predictions.\nPrecision = TP\/(TP + FP)","8df7a741":"Recall Score","108a3732":"Heatmap for unclean data","575e5a39":"Grid search is an approach to hyperparameter tuning that will methodically build and evaluate a model for each combination of algorithm parameters specified in a grid.\n\nLet\u2019s consider the following example:\n\nSuppose, a machine learning model X takes hyperparameters a1, a2 and a3. In grid searching, you first define the range of values for each of the hyperparameters a1, a2 and a3. You can think of this as an array of values for each of the hyperparameters. Now the grid search technique will construct many versions of X with all the possible combinations of hyperparameter (a1, a2 and a3) values that you defined in the first place. This range of hyperparameter values is referred to as the grid.\n\nSuppose, you defined the grid as: a1 = [0,1,2,3,4,5] a2 = [10,20,30,40,5,60] a3 = [105,105,110,115,120,125]\n\nNote that, the array of values of that you are defining for the hyperparameters has to be legitimate in a sense that you cannot supply Floating type values to the array if the hyperparameter only takes Integer values.\n\nNow, grid search will begin its process of constructing several versions of X with the grid that you just defined.\n\nIt will start with the combination of [0,10,105], and it will end with [5,60,125]. It will go through all the intermediate combinations between these two which makes grid search computationally very expensive.","99e0ae99":"Precision Score","7972969a":"Heatmap for clean data","c796fae6":"Precision - Precision is the ratio of correctly predicted positive observations to the total predicted positive observations. The question that this metric answer is of all passengers that labeled as survived, how many actually survived? High precision relates to the low false positive rate. We have got 0.788 precision which is pretty good.\n\nPrecision = TP\/TP+FP\n\nRecall (Sensitivity) - Recall is the ratio of correctly predicted positive observations to the all observations in actual class - yes. The question recall answers is: Of all the passengers that truly survived, how many did we label? A recall greater than 0.5 is good.\n\nRecall = TP\/TP+FN\n\nF1 score - F1 Score is the weighted average of Precision and Recall. Therefore, this score takes both false positives and false negatives into account. Intuitively it is not as easy to understand as accuracy, but F1 is usually more useful than accuracy, especially if you have an uneven class distribution. Accuracy works best if false positives and false negatives have similar cost. If the cost of false positives and false negatives are very different, it\u2019s better to look at both Precision and Recall.\n\nF1 Score = 2(Recall Precision) \/ (Recall + Precision)","f646d750":"The best result is captured at k = 11 hence 11 is used for the final model","05894ca3":"A heat map is a two-dimensional representation of information with the help of colors. Heat maps can help the user visualize simple or complex information.","8e002478":"2. Classification Report\nReport which includes Precision, Recall and F1-Score.","f18af1f1":"F1 Score","c88fa54a":"Hyper Parameter optimization","31104826":"ROC - AUC\nROC (Receiver Operating Characteristic) Curve tells us about how good the model can distinguish between two things (e.g If a patient has a disease or no). Better models can accurately distinguish between the two. Whereas, a poor model will have difficulties in distinguishing between the two","54e15edc":"**Test Train Split and Cross Validation methods**\n**Train Test Split** : To have unknown datapoints to test the data rather than testing with the same points with which the model was trained. This helps capture the model performance much better.\n\n**Cross Validation**: When model is split into training and testing it can be possible that specific type of data point may go entirely into either training or testing portion. This would lead the model to perform poorly. Hence over-fitting and underfitting problems can be well avoided with cross validation techniques","020361f3":"Model Performance Analysis","c61e22e8":"1. Confusion Matrix\nThe confusion matrix is a technique used for summarizing the performance of a classification algorithm i.e. it has binary outputs."}}