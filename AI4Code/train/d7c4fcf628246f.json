{"cell_type":{"b25727e4":"code","f8de5519":"code","9a56d60f":"code","4fd07134":"code","cfa89907":"code","5c010318":"code","c913a05d":"code","03608389":"code","7ed998cc":"code","46aa99f8":"code","3b8dd6e7":"code","cb9b97b2":"code","50ab3b0a":"code","fc8a758c":"code","f55eedb1":"code","5d14e6cf":"code","a2f163d8":"code","2c4066e6":"code","2485c004":"code","2b173ac3":"code","567df63a":"code","ec4bc9e6":"code","e6580305":"code","cbd4e473":"code","a33f8333":"code","2a2202dd":"code","5a3e4988":"code","e669c067":"code","4f19bc99":"code","ed456b73":"code","16fd7481":"code","8afa9cf9":"code","f5392989":"code","2196c260":"code","ac078c1e":"code","7c4c3207":"code","c6596d74":"code","180d71e8":"code","56d805cc":"code","867dd552":"code","00c171f7":"code","dcfa4dff":"code","faa97da9":"code","c32690c5":"code","16fa192c":"code","b403a237":"code","365d0ad0":"code","0027cf14":"code","35335f21":"code","bdd312d3":"code","7499eeb0":"code","bf4a4485":"code","9d8a9b5c":"code","6dc93d1a":"code","83bcd781":"code","ff002b37":"code","25ab5f78":"code","8034f09c":"code","368032cb":"code","11707e10":"code","0091b55e":"code","b8ab8a8b":"code","f61e66d6":"code","1f12e2b5":"code","7785f4e7":"code","1b184144":"code","8486a34c":"code","84b99a5c":"code","c824b186":"code","c35e15df":"code","62d5d715":"code","cf47af65":"code","50556c34":"code","2fa8b746":"code","0d82d77f":"code","f50b0dd3":"code","fa6e18f7":"code","d11c3aa4":"code","33a0e82e":"code","2421cc70":"code","2796aa7f":"code","785ab679":"markdown","7e6b8831":"markdown","014ac93e":"markdown","bf0cf4c1":"markdown","e313be2c":"markdown","1f2f3059":"markdown","038a4238":"markdown","2917e955":"markdown","3d6ee676":"markdown","657f2d84":"markdown","eb3c2b5e":"markdown","898ab3f8":"markdown","708b5e0b":"markdown","8e0a8357":"markdown","24f6d321":"markdown","42555743":"markdown","66779968":"markdown","d89750ef":"markdown","33ebd4fa":"markdown","9888a792":"markdown","61ecec86":"markdown","b7ccb8eb":"markdown","6358af79":"markdown","2e7136db":"markdown","e6db7673":"markdown","7be8048a":"markdown","57dd24f9":"markdown","21fc4b52":"markdown","62262a8b":"markdown","ae971e46":"markdown","3acc9a44":"markdown","e9e2956c":"markdown","ca4f5ed8":"markdown","2ccbe43d":"markdown","a7f8e536":"markdown","962923ba":"markdown","ca8ca440":"markdown","15934e87":"markdown","2571b3d5":"markdown","8f13664a":"markdown","b2ac55c8":"markdown","fbaa6d70":"markdown","9c59755e":"markdown","cbc9bdf8":"markdown","1b893e56":"markdown","aafd7aa7":"markdown","40c52786":"markdown","5021fb3f":"markdown","e17d820c":"markdown"},"source":{"b25727e4":"%matplotlib inline\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport datetime\nimport os\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nimport warnings\nwarnings.filterwarnings('ignore')\nprint(os.listdir(\"..\/input\/unisys\/ptsboardingsummary\"))\n# Any results you write to the current directory are saved as output.","f8de5519":"import plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom bubbly.bubbly import bubbleplot\ninit_notebook_mode(connected=True)\n\nfrom bokeh.plotting import figure, save\nfrom bokeh.io import output_file, output_notebook, show\nfrom bokeh.models import ColumnDataSource, GMapOptions,HoverTool\nfrom bokeh.plotting import gmap\n\nimport tensorflow as tf\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Input, Dense, GRU,LSTM, Embedding\nfrom tensorflow.python.keras.optimizers import RMSprop\nfrom tensorflow.python.keras.callbacks import EarlyStopping, ModelCheckpoint, TensorBoard, ReduceLROnPlateau","9a56d60f":"## For Multiple Output in single cell\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","4fd07134":"data = pd.read_csv('..\/input\/unisys\/ptsboardingsummary\/20140711.CSV')","cfa89907":"out_geo = pd.read_csv('..\/input\/outgeo\/output_geo.csv')\nroute = pd.read_csv('..\/input\/trann11\/transit\/routes.csv')","5c010318":"data.shape\ndata.head(2)","c913a05d":"route.head(2)\nout_geo.head(2)","03608389":"from math import sin, cos, sqrt, atan2, radians\ndef calc_dist(lat1,lon1):\n    ## approximate radius of earth in km\n    R = 6373.0\n    dlon = radians(138.604801) - radians(lon1)\n    dlat = radians(-34.921247) - radians(lat1)\n    a = sin(dlat \/ 2)**2 + cos(radians(lat1)) * cos(radians(-34.921247)) * sin(dlon \/ 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    return R * c","7ed998cc":"out_geo['dist_from_centre'] = out_geo[['latitude','longitude']].apply(lambda x: calc_dist(*x), axis=1)","46aa99f8":"##Fill the missing values with mode\nout_geo['type'].fillna('street_address',inplace=True)\nout_geo['type'] = out_geo['type'].apply(lambda x: str(x).split(',')[-1])","3b8dd6e7":"out_geo['type'].unique()","cb9b97b2":"'''Holidays--\n2013-09-01,Father's Day\n2013-10-07,Labour day\n2013-12-25,Christmas day\n2013-12-26,Proclamation Day\n2014-01-01,New Year\n2014-01-27,Australia Day\n2014-03-10,March Public Holiday\n2014-04-18,Good Friday\n2014-04-19,Easter Saturday\n2014-04-21,Easter Monday\n2014-04-25,Anzac Day\n2014-06-09,Queen's Birthday'''","50ab3b0a":"def holiday_label (row):\n    if row == datetime.date(2013, 9, 1) :\n          return '1'\n    if row == datetime.date(2013, 10, 6) :\n          return '1'\n    if row == datetime.date(2013, 12, 22) :\n          return '2'\n    if row == datetime.date(2013, 12, 29):\n          return '1'\n    if row  == datetime.date(2014, 1, 26):\n          return '1'\n    if row == datetime.date(2014, 3, 9):\n          return '1'\n    if row == datetime.date(2014, 4, 13) :\n          return '2'\n    if row == datetime.date(2014, 4, 20):\n          return '2'\n    if row == datetime.date(2014, 6, 8):\n          return '1'\n    return '0'","fc8a758c":"data['WeekBeginning'] = pd.to_datetime(data['WeekBeginning']).dt.date","f55eedb1":"data['holiday_label'] = data['WeekBeginning'].apply (lambda row: holiday_label(row))","5d14e6cf":"data= pd.merge(data,out_geo,how='left',left_on = 'StopName',right_on = 'input_string')","a2f163d8":"data = pd.merge(data, route, how='left', left_on = 'RouteID', right_on = 'route_id')","2c4066e6":"col = ['TripID', 'RouteID', 'StopID', 'StopName', 'WeekBeginning','NumberOfBoardings','formatted_address',\n      'latitude', 'longitude','postcode','type','route_desc','dist_from_centre','holiday_label']","2485c004":"data = data[col]","2b173ac3":"##saving the final dataset\ndata.to_csv('Weekly_Boarding.csv',index=False)","567df63a":"## getting the addresses for geolocation api.\n# Address data['StopName'].unique()\n# sub = pd.DataFrame({'Address': Address})\n# sub=sub.reindex(columns=[\"Address\"])\n# sub.to_csv('addr.csv')","ec4bc9e6":"# st_week_grp1 = pd.DataFrame(data.groupby(['StopName','WeekBeginning','type']).agg({'NumberOfBoardings': ['sum', 'count']})).reset_index()\ngrouped = data.groupby(['StopName','WeekBeginning','type']).agg({'NumberOfBoardings': ['sum', 'count','max']})\ngrouped.columns = [\"_\".join(x) for x in grouped.columns.ravel()]","e6580305":"st_week_grp = pd.DataFrame(grouped).reset_index()\nst_week_grp.shape\nst_week_grp.head()","cbd4e473":"st_week_grp1 = pd.DataFrame(st_week_grp.groupby('StopName')['WeekBeginning'].count()).reset_index()","a33f8333":"aa=list(st_week_grp1[st_week_grp1['WeekBeginning'] == 54]['StopName'])","2a2202dd":"bb = st_week_grp[st_week_grp['StopName'].isin(aa)]","5a3e4988":"## save the aggregate data\nbb.to_csv('st_week_grp.csv', index=False)","e669c067":"data.nunique()","4f19bc99":"data.shape\ndata.columns\ndata.head(3)","ed456b73":"data.isnull().sum()","16fd7481":"data['WeekBeginning'].unique()","8afa9cf9":"##can assign the each chart to one axes at a time\nfig,axrr=plt.subplots(3,2,figsize=(18,18))\n\ndata['NumberOfBoardings'].value_counts().sort_index().head(20).plot.bar(ax=axrr[0][0])\ndata['WeekBeginning'].value_counts().plot.area(ax=axrr[0][1])\ndata['RouteID'].value_counts().head(20).plot.bar(ax=axrr[1][0])\ndata['RouteID'].value_counts().tail(20).plot.bar(ax=axrr[1][1])\ndata['type'].value_counts().head(5).plot.bar(ax=axrr[2][0])\ndata['type'].value_counts().tail(10).plot.bar(ax=axrr[2][1])","f5392989":"data['postcode'].value_counts().head(20).plot.bar()","2196c260":"# data['dist_from_centre'].nunique()\nbb_grp = data.groupby(['dist_from_centre']).agg({'NumberOfBoardings': ['sum']}).reset_index()\nbb_grp.columns = bb_grp.columns.get_level_values(0)\nbb_grp.head()\nbb_grp.columns","ac078c1e":"trace0 = go.Scatter(\n    x = bb_grp['dist_from_centre'],\n    y = bb_grp['NumberOfBoardings'],mode = 'lines+markers',name = 'X2 King William St')\n\ndata1 = [trace0]\nlayout = dict(title = 'Distance Vs Number of boarding',\n              xaxis = dict(title = 'Distance from centre'),\n              yaxis = dict(title = 'Number of Boardings'))\nfig = dict(data=data1, layout=layout)\niplot(fig)","7c4c3207":"lat = out_geo['latitude'].tolist()\nlong = out_geo['longitude'].tolist()\nnam = out_geo['input_string'].tolist()","c6596d74":"map_options = GMapOptions(lat=-34.96, lng=138.592, map_type=\"roadmap\", zoom=9)\nkey = open('..\/input\/geolockey\/api_key.txt').read()\np = gmap(key, map_options, title=\"Adelaide South Australia\")\nsource = ColumnDataSource(data=dict(lat=lat,lon=long,nam=nam))\n\np.circle(x=\"lon\", y=\"lat\", size=5, fill_color=\"blue\", fill_alpha=0.8, source=source)\nTOOLTIPS = [(\"Place\", \"@nam\")]\np.add_tools( HoverTool(tooltips=TOOLTIPS))\noutput_notebook()\nshow(p)","180d71e8":"## for finding highest number of Boarding Bus stops\nbb_grp = bb.groupby(['StopName']).agg({'NumberOfBoardings_sum': ['sum']}).reset_index()['NumberOfBoardings_sum'].sort_values('sum')\nbb_grp[1000:1005]\nbb.groupby(['StopName']).agg({'NumberOfBoardings_sum': ['sum']}).reset_index().iloc[[2325,1528,546,1043,1905]]\n# bb_grp.iloc[[3054]]","56d805cc":"source_1 = bb[bb['StopName'] == 'X2 King William St'].reset_index(drop = True)\nsource_2 = bb[bb['StopName'] == 'E1 Currie St'].reset_index(drop = True)\nsource_3 = bb[bb['StopName'] == 'I2 North Tce'].reset_index(drop = True)\nsource_4 = bb[bb['StopName'] == 'F2 Grenfell St'].reset_index(drop = True)\nsource_5 = bb[bb['StopName'] == 'D1 King William St'].reset_index(drop = True)","867dd552":"trace0 = go.Scatter(\n    x = source_1['WeekBeginning'],\n    y = source_1['NumberOfBoardings_sum'],mode = 'lines+markers',name = 'X2 King William St')\ntrace1 = go.Scatter(\n    x = source_2['WeekBeginning'],\n    y = source_2['NumberOfBoardings_sum'],mode = 'lines+markers',name = 'E1 Currie St')\ntrace2 = go.Scatter(\n    x = source_3['WeekBeginning'],\n    y = source_3['NumberOfBoardings_sum'],mode = 'lines+markers',name = 'I2 North Tce')\ntrace3 = go.Scatter(\n    x = source_4['WeekBeginning'],\n    y = source_4['NumberOfBoardings_sum'],mode = 'lines+markers',name = 'F2 Grenfell St')\ntrace4 = go.Scatter(\n    x = source_5['WeekBeginning'],\n    y = source_5['NumberOfBoardings_sum'],mode = 'lines+markers',name = 'D1 King William St')\n\ndata = [trace0,trace1,trace2,trace3,trace4]\nlayout = dict(title = 'Weekly Boarding Total',\n              xaxis = dict(title = 'Week Number'),\n              yaxis = dict(title = 'Number of Boardings'),\n              shapes = [{# Holidays Record: 2013-09-01\n'type': 'line','x0': '2013-09-01','y0': 0,'x1': '2013-09-02','y1': 18000,'line': {\n        'color': 'rgb(55, 128, 191)','width': 1,'dash': 'dashdot'},},\n              {# 2013-10-07\n'type': 'line','x0': '2013-10-07','y0': 0,'x1': '2013-10-07','y1': 18000,'line': {\n        'color': 'rgb(55, 128, 191)','width': 1,'dash': 'dashdot'},},\n              {# 2013-12-25\n'type': 'line','x0': '2013-12-25','y0': 0,'x1': '2013-12-26','y1': 18000,'line': {\n        'color': 'rgb(55, 128, 191)','width': 3,'dash': 'dashdot'},},\n              {# 2014-01-27\n'type': 'line','x0': '2014-01-27','y0': 0,'x1': '2014-01-28','y1': 18000,'line': {\n        'color': 'rgb(55, 128, 191)','width': 1,'dash': 'dashdot'},},\n              {# 2014-03-10\n'type': 'line','x0': '2014-03-10','y0': 0,'x1': '2014-03-11','y1': 18000,'line': {\n        'color': 'rgb(55, 128, 191)','width': 1,'dash': 'dashdot'},},\n              {# 2014-04-18\n'type': 'line','x0': '2014-04-18','y0': 0,'x1': '2014-04-19','y1': 18000,'line': {\n        'color': 'rgb(55, 128, 191)','width': 3,'dash': 'dashdot'},},\n              {# 2014-06-09\n'type': 'line','x0': '2014-06-09','y0': 0,'x1': '2014-06-10','y1': 18000,'line': {\n        'color': 'rgb(55, 128, 191)','width': 1,'dash': 'dashdot'},},])\nfig = dict(data=data, layout=layout)\niplot(fig)","00c171f7":"source_6 = bb[bb['StopName'] == '57A Hancock Rd'].reset_index(drop = True)\nsource_7 = bb[bb['StopName'] == '37 Muriel Dr'].reset_index(drop = True)\nsource_8 = bb[bb['StopName'] == '18B Springbank Rd'].reset_index(drop = True)\nsource_9 = bb[bb['StopName'] == '27E Sir Ross Smith Av'].reset_index(drop = True)\nsource_10 = bb[bb['StopName'] == '46A Baldock Rd'].reset_index(drop = True)","dcfa4dff":"trace0 = go.Scatter(\n    x = source_6['WeekBeginning'],\n    y = source_6['NumberOfBoardings_sum'],mode = 'lines+markers',name = '57A Hancock Rd')\ntrace1 = go.Scatter(\n    x = source_7['WeekBeginning'],\n    y = source_7['NumberOfBoardings_sum'],mode = 'lines+markers',name = '37 Muriel Dr')\ntrace2 = go.Scatter(\n    x = source_8['WeekBeginning'],\n    y = source_8['NumberOfBoardings_sum'],mode = 'lines+markers',name = '18B Springbank Rd')\ntrace3 = go.Scatter(\n    x = source_9['WeekBeginning'],\n    y = source_9['NumberOfBoardings_sum'],mode = 'lines+markers',name = '27E Sir Ross Smith Av')\ntrace4 = go.Scatter(\n    x = source_10['WeekBeginning'],\n    y = source_10['NumberOfBoardings_sum'],mode = 'lines+markers',name = '46A Baldock Rd')\n\ndata = [trace0,trace1,trace2,trace3,trace4]\nlayout = dict(title = 'Weekly Boarding Total',\n              xaxis = dict(title = 'Week Number'),\n              yaxis = dict(title = 'Number of Boardings'),\n              shapes = [{# Holidays Record: 2013-09-01\n'type': 'line','x0': '2013-09-01','y0': 0,'x1': '2013-09-02','y1': 80,'line': {\n        'color': 'rgb(55, 128, 191)','width': 1,'dash': 'dashdot'},},\n              {# 2013-10-07\n'type': 'line','x0': '2013-10-07','y0': 0,'x1': '2013-10-07','y1': 80,'line': {\n        'color': 'rgb(55, 128, 191)','width': 1,'dash': 'dashdot'},},\n              {# 2013-12-25\n'type': 'line','x0': '2013-12-25','y0': 0,'x1': '2013-12-26','y1': 80,'line': {\n        'color': 'rgb(55, 128, 191)','width': 3,'dash': 'dashdot'},},\n              {# 2014-01-27\n'type': 'line','x0': '2014-01-27','y0': 0,'x1': '2014-01-28','y1': 80,'line': {\n        'color': 'rgb(55, 128, 191)','width': 1,'dash': 'dashdot'},},\n              {# 2014-03-10\n'type': 'line','x0': '2014-03-10','y0': 0,'x1': '2014-03-11','y1': 80,'line': {\n        'color': 'rgb(55, 128, 191)','width': 1,'dash': 'dashdot'},},\n              {# 2014-04-18\n'type': 'line','x0': '2014-04-18','y0': 0,'x1': '2014-04-19','y1': 80,'line': {\n        'color': 'rgb(55, 128, 191)','width': 3,'dash': 'dashdot'},},\n              {# 2014-06-09\n'type': 'line','x0': '2014-06-09','y0': 0,'x1': '2014-06-10','y1': 80,'line': {\n        'color': 'rgb(55, 128, 191)','width': 1,'dash': 'dashdot'},},])\nfig = dict(data=data, layout=layout)\niplot(fig)","faa97da9":"bb1=bb.copy()","c32690c5":"## Label encode the Date type for easy Plotting\nle = LabelEncoder()\nbb1['WeekBeginning'] = le.fit_transform(bb1['WeekBeginning'])","16fa192c":"figure = bubbleplot(dataset=bb1, x_column='NumberOfBoardings_sum', y_column='NumberOfBoardings_count', \n    bubble_column='StopName', time_column='WeekBeginning', size_column='NumberOfBoardings_max',\n    color_column='type', \n    x_title=\"Total Boardings\", y_title=\"Frequency Of Boardings\",show_slider=True,\n    title='Adelaide Weekly Bus Transport Summary 2D',x_logscale=True, scale_bubble=2,height=650)\n\niplot(figure, config={'scrollzoom': True})","b403a237":"figure = bubbleplot(dataset=bb1[bb1['StopName'].isin(bb1['StopName'].unique()[:30])], x_column='NumberOfBoardings_sum', y_column='NumberOfBoardings_count', \n    bubble_column='StopName', time_column='WeekBeginning', size_column='NumberOfBoardings_max',\n    color_column='type', \n    x_title=\"Total Boardings\", y_title=\"Frequency Of Boardings\",show_slider=False,\n    title='Adelaide Weekly Bus Transport Summary 2D',x_logscale=True, scale_bubble=2,height=650)\n\niplot(figure, config={'scrollzoom': True})","365d0ad0":"figure = bubbleplot(dataset=bb1, x_column='NumberOfBoardings_sum', y_column='NumberOfBoardings_count', \n    bubble_column='StopName', time_column='WeekBeginning', z_column='NumberOfBoardings_max',\n    color_column='type',show_slider=False, \n    x_title=\"Total Boardings\", y_title=\"Frequency Of Boardings\", z_title=\"Maximum Boardings\",\n    title='Adelaide Weekly Bus Transport Summary 3D', x_logscale=True, z_logscale=True,y_logscale=True,\n    scale_bubble=0.8, marker_opacity=0.8, height=700)\n\niplot(figure, config={'scrollzoom': True})","0027cf14":"d=[]\nfor i in bb['StopName'].unique():\n    d.append({'StopName': i,'Boarding_sum':np.sum(bb[bb['StopName'] == i]['NumberOfBoardings_sum'].pct_change())\/54,\n             'Boarding_count':np.sum(bb[bb['StopName'] == i]['NumberOfBoardings_count'].pct_change())\/54,\n             'Boarding_max':np.sum(bb[bb['StopName'] == i]['NumberOfBoardings_max'].pct_change())\/54})\npct_chng = pd.DataFrame(d)","35335f21":"#pct_chng.head()\npct_chng['Boarding_sum'].nlargest(5)\npct_chng['Boarding_sum'].nsmallest(5)\npct_chng[pct_chng['Boarding_sum']<0].shape\npct_chng.iloc[[3110,2134,214,1538,1290]]","bdd312d3":"bb1 = pd.merge(bb, out_geo, how='left', left_on = 'StopName', right_on = 'input_string')","7499eeb0":"bb1['holiday_label'] = bb1['WeekBeginning'].apply (lambda row: holiday_label(row))","bf4a4485":"##Final 11 features have been used for the forecastng.\ncols = ['StopName','WeekBeginning','type_x','NumberOfBoardings_sum','NumberOfBoardings_count','NumberOfBoardings_max','latitude','longitude','postcode','dist_from_centre','holiday_label']\nbb1=bb1[cols]\nbb1.shape\nbb1.head()","9d8a9b5c":"##Replace all Nan by Mode\nfor i in bb1.columns:\n    bb1[i].fillna(bb1[i].mode()[0], inplace=True)\nbb1[[\"postcode\", \"holiday_label\"]] = bb1[[\"postcode\", \"holiday_label\"]].apply(pd.to_numeric)","6dc93d1a":"le = LabelEncoder()\nbb1['StopName'] = le.fit_transform(bb1['StopName'])\nbb1['type_x'] = le.fit_transform(bb1['type_x'])","83bcd781":"train = bb1[bb1['WeekBeginning'] < datetime.date(2014, 6, 1)]\ntest = bb1[bb1['WeekBeginning'] >= datetime.date(2014, 6, 1)]\ntrain.shape\ntest.shape","ff002b37":"le = LabelEncoder()\ntrain['WeekBeginning'] = le.fit_transform(train['WeekBeginning'])\ntest['WeekBeginning'] = le.fit_transform(test['WeekBeginning'])","25ab5f78":"# tr_col = ['StopName', 'WeekBeginning', 'type_x', 'latitude',\n#        'longitude', 'postcode', 'dist_from_centre', 'holiday_label']\n# tr_target = ['StopName','NumberOfBoardings_sum','NumberOfBoardings_count','NumberOfBoardings_max']\n# train1 = train[tr_col]\n# test1 = test[tr_col]\n# train_tg = train[tr_target]\n# test_tg = test[tr_target]","8034f09c":"# ## model each StopName Separately\n# train.StopName.nunique()\n# for i in train['StopName']:\n#     col = 'NumberOfBoardings_sum'\n#     train_x = train1[train1['StopName']==i]\n#     test_x = test1[test1['StopName']==i]\n#     tr_target = train_tg[train_tg['StopName'] ==i][col]\n#     ts_target = test_tg[test_tg['StopName'] == i][col]\n#     print(i,train_x.shape,test_x.shape,tr_target.shape,ts_target.shape)\n#     xgb_model = xg.XGBRegressor()\n#     xgb_model.fit(train_x.values,tr_target.values)\n#     preds = xgb_model.predict(test_x.values)\n#     print('original ',ts_target)\n#     print('prediction: ',preds)\n#     break","368032cb":"tr_col = ['StopName', 'WeekBeginning', 'type_x', 'latitude',\n       'longitude', 'postcode', 'dist_from_centre', 'holiday_label']\ntrain_sum_y = train[['StopName','NumberOfBoardings_sum']]\ntrain_count_y = train[['StopName','NumberOfBoardings_count']]\ntrain_max_y = train[['StopName','NumberOfBoardings_max']]\ntrain_x = train[tr_col]\ntest_x = test[tr_col]\n\ntest_sum_y = test[['StopName','NumberOfBoardings_sum']]\ntest_count_y = test[['StopName','NumberOfBoardings_count']]\ntest_max_y = test[['StopName','NumberOfBoardings_max']]","11707e10":"from sklearn.ensemble import RandomForestRegressor\n# model = lgb.LGBMRegressor()\nmodel = RandomForestRegressor(n_estimators=700, min_samples_leaf=3, max_features=0.5,n_jobs=-1)\n# model = lgb.LGBMRegressor(max_depth=10,learning_rate=0.0227,n_estimators=195,num_leaves=11,reg_alpha=1.5764,reg_lambda=0.0478,subsample=0.7776,colsample_bytree=0.7761)\nmodel.fit(train_x.values,train_sum_y['NumberOfBoardings_sum'].values)\npreds = model.predict(test_x.values)","0091b55e":"rms = sqrt(mean_squared_error(test_sum_y['NumberOfBoardings_sum'].values, preds))\nrms","b8ab8a8b":"test_sum_y.values[:15]\npreds[:15]","f61e66d6":"fig, ax = plt.subplots(figsize=(6,10))\nlgb.plot_importance(model, max_num_features=50, height=0.8, ax=ax)\nax.grid(False)\nplt.title(\"LightGBM - Feature Importance\", fontsize=15)\nplt.show()","1f12e2b5":"plt.figure(figsize=(15,5))\nplt.plot(test_sum_y['NumberOfBoardings_sum'].values, label='true')\nplt.plot(preds, label='pred')\nplt.ylabel(\"Total Number of Boarding\")\nplt.xlabel(\"Index\")\nplt.title(\"Comparison Between Prediction & True Values\")\nplt.legend()\nplt.show()","7785f4e7":"bb1['WeekBeginning'] = le.fit_transform(bb1['WeekBeginning'])","1b184144":"df = bb1.sort_values(['WeekBeginning','StopName'])","8486a34c":"##Replace all Nan by Mode\nfor i in df.columns:\n    df[i].fillna(df[i].mode()[0], inplace=True)\ndf[[\"postcode\", \"holiday_label\"]] = df[[\"postcode\", \"holiday_label\"]].apply(pd.to_numeric)","84b99a5c":"target_names = ['NumberOfBoardings_sum', 'NumberOfBoardings_count', 'NumberOfBoardings_max']\ntrain_col = ['StopName','WeekBeginning','type_x','latitude','longitude','postcode','dist_from_centre','holiday_label']\n##want to predict 1 day in future.\nshift_days = 6\nshift_steps = shift_days * 3249","c824b186":"df_targets = df[target_names].shift(-shift_steps)\nx_data = df.iloc[:,1:].values[0:-shift_steps]\ny_data = df_targets.values[:-shift_steps]\nprint(type(y_data))\nprint(\"Shape:\", y_data.shape)","c35e15df":"##data split into 90% training and 10% testing\nnum_data = len(x_data)\ntrain_split = 0.9\nnum_train = int(train_split * num_data)\nx_train = x_data[0:num_train]\nx_test = x_data[num_train:]\nprint(len(x_train) + len(x_test))","62d5d715":"##target values for test and train\ny_train = y_data[0:num_train]\ny_test = y_data[num_train:]\nprint(len(y_train) + len(y_test))\n##input dimension and output dimension\nnum_x_signals = x_data.shape[1]\nprint(num_x_signals)\nnum_y_signals = y_data.shape[1]\nprint(num_y_signals)","cf47af65":"##scale data to get values between 0 to 1.\nprint(\"Min:\", np.min(x_train))\nprint(\"Max:\", np.max(x_train))\nx_scaler = MinMaxScaler()\nx_train_scaled = x_scaler.fit_transform(x_train)\nprint(\"Min:\", np.min(x_train_scaled))\nprint(\"Max:\", np.max(x_train_scaled))\nx_test_scaled = x_scaler.transform(x_test)\ny_scaler = MinMaxScaler()\ny_train_scaled = y_scaler.fit_transform(y_train)\ny_test_scaled = y_scaler.transform(y_test)\nprint(x_train_scaled.shape)\nprint(y_train_scaled.shape)","50556c34":"def batch_generator(batch_size, sequence_length):\n    while True:\n        # Allocate a new array for the batch of input,output signals.\n        x_shape = (batch_size, sequence_length, num_x_signals)\n        x_batch = np.zeros(shape=x_shape, dtype=np.float16)\n        y_shape = (batch_size, sequence_length, num_y_signals)\n        y_batch = np.zeros(shape=y_shape, dtype=np.float16)\n        for i in range(batch_size):\n            idx = np.random.randint(num_train - sequence_length)\n            # Copy the sequences of data starting at this index.\n            x_batch[i] = x_train_scaled[idx:idx+sequence_length]\n            y_batch[i] = y_train_scaled[idx:idx+sequence_length]\n        yield (x_batch, y_batch)","2fa8b746":"batch_size = 256\nsequence_length = 1344\nprint(sequence_length)\ngenerator = batch_generator(batch_size=batch_size,sequence_length=sequence_length)\nx_batch, y_batch = next(generator)\nprint(x_batch.shape)\nprint(y_batch.shape)\nvalidation_data = (np.expand_dims(x_test_scaled, axis=0),\n                   np.expand_dims(y_test_scaled, axis=0))","0d82d77f":"##model\nmodel = Sequential()\nmodel.add(LSTM(units=512,return_sequences=True,input_shape=(None, num_x_signals,)))\nmodel.add(Dense(num_y_signals, activation='sigmoid'))","f50b0dd3":"#loss function define.\nwarmup_steps = 0\ndef loss_mse_warmup(y_true, y_pred):\n    # [batch_size, sequence_length, num_y_signals].\n    y_true_slice = y_true[:, warmup_steps:, :]\n    y_pred_slice = y_pred[:, warmup_steps:, :]\n    # Calculate the MSE loss for each value in these tensors.\n    loss = tf.losses.mean_squared_error(labels=y_true_slice,predictions=y_pred_slice)\n    loss_mean = tf.reduce_mean(loss)\n    return loss_mean","fa6e18f7":"##optimizer and model summary\noptimizer = RMSprop(lr=1e-3)\nmodel.compile(loss=loss_mse_warmup, optimizer=optimizer)\nprint(model.summary())","d11c3aa4":"##early stopping and learning rate decrease callbacks\ncallback_early_stopping = EarlyStopping(monitor='val_loss',patience=5, verbose=1)\ncallbacks = [callback_early_stopping]","33a0e82e":"%%time\n#model.fit(generator=generator,epochs=2,steps_per_epoch=5,validation_data=validation_data,callbacks=callbacks)","2421cc70":"# model.load_weights(path_checkpoint)\n# result = model.evaluate(x=np.expand_dims(x_test_scaled, axis=0),\n#                         y=np.expand_dims(y_test_scaled, axis=0))\n# print(\"loss (test-set):\", result)","2796aa7f":"## Training on Gru Model take more memory than whats available on kaggle.So need to Comment out that part.","785ab679":"## Predictive Modelling <a id=\"12\"><\/a>","7e6b8831":"## Propositions <a id=\"11\"><\/a>","014ac93e":"Total Having 1 Year of Data from date 2013-06-30 till 2014-07-06 in a Weekly interval based.\n\nHaving Total of 4165 Stops in South Australian Metropolitan Area.","bf0cf4c1":"Label Encode the Categorical data","e313be2c":"**Inferences**:\n\n* Total Boardings are directly propotional to the frequency of bus boarding.\n* In 3D Plot we can see the cluster of address type.","1f2f3059":"Combine the Geolocation,Routes and main input file to get final Output File.","038a4238":"> Gathering only the Stop Name which having all 54 weeks of Data","2917e955":"Adding the details regarding the Public holidays from June 2013 to June 2014","3d6ee676":"**Inferences**:\n\n* More than 40 lakhs times only single person board from the bus stop.\n* There are average of 1.8 lakhs people travel every week by bus in adelaide metropolitan area.\n* G10,B10,M44,H30 are the most busiest routes in the city while FX8,FX3,FX10,FX1,FX2 are the least.\n* Most of the Bus stops are Street_Address Type while there are very few which are store or post office.","657f2d84":"....","eb3c2b5e":"Some Important data fields in the given files are\n\n* **Latitude**\tLatitude of the Bus Stop\n* **Longitude**\tLongitude of the Bus Stop\n* **Type**\tTypeof Address\n* **PostCode**\tPost code of the area in which bus stop is present\n* **RouteDesc**\tTell you about route is via which bus stops","898ab3f8":"Modelling using regression models.\n1. lightGbm Regressor\n2. Gru","708b5e0b":"Split into Train Test for Modelling further","8e0a8357":"### Main Data Source <a id=\"2\"><\/a>\n\n[](http:\/\/)https:\/\/data.gov.au\/dataset\/public-transport-services\/resource\/7e0bb3f6-24d4-4f09-88f7-ba9369d1994d","24f6d321":"Get info like RouteID,latitude,longitude,postcode,dist_from_centre & holiday_label 6 features from the main dataset","42555743":"Rate of change in the traffic pattern in all different bus stops.","66779968":"## External Features <a id=\"4\"><\/a>","d89750ef":"2D Plot with 6 different variables\n \n> *** The Count represent the week instead of year in the slidebar","33ebd4fa":"**Inferences**:\n\n* These 5 stops W Grote St,52 Taylors Rd,13 Tutt Av,37A Longwood Rd,32A Frederick Rd having the largest percent increase.\n* There are 27 Bus stops where number of boardings have decreased.\n* The number of busses can be found by taking the number of boarding divided by bus capacity which can take as 50.","9888a792":"**Inferences**:\n\n* Same decreasing affect of Holidays on number of people travelling through bus can be seen in other city bus stops also.\n* The width of vertical blue line shows the number of holidays come within that week period.\n* Two thickest blue lines shows Christmas and New year period while other one was easter & Good friday period.on both the occassion number of public holidays within week period was 3.","61ecec86":"**Inferences**:\n\n* As we move away from centre the number of Boarding decreases\n* There are cluster of bus stops near to the main Adelaide city as oppose to outside.so that's why most of boardings are near to center","b7ccb8eb":"Some Important external data fields calculation\n* **IsHoliday**\tNumber of public holidays within that week\n* **DistanceFromCentre**\tDistance measure from the city centre\n\nFor Calculating Distance between centre with other bus stops by using Longitude and Latitude we have used the Haversine formula","6358af79":"\n![Alt Text](https:\/\/image.ibb.co\/cdfQtV\/Capture.png)","2e7136db":"### Using Gru <a id=\"14\"><\/a>","e6db7673":"### Using Bokeh <a id=\"8\"><\/a>\nPlot the Bus stop on the Google Map using the latitude and longitude of the bus stop address","7be8048a":"In the graph above, the size corresponds to the maximum number of people board at single time and the \nTotal boardings and Frequency of boardings with stop name can be seen by hovering over the cursor on the bubbles.\n\nThe animated bubble charts convey a great deal of information since they can accomodate upto seven variables in total, namely:\n\n* X-axis (Total Boardings per week)\n* Y-axis (Frequency of Bus Boarding)\n* Bubbles (Bus stop name)\n* Time (in week period)\n* Size of bubbles (maximum number of people board at single time)\n* Color of bubbles (Type of Bus stop)","57dd24f9":"## Data Visualization <a id=\"7\"><\/a>","21fc4b52":"### Secondary Data Source <a id=\"3\"><\/a>\n\nGoogle Geolocation Api for getting Longitude,Latitude & type of Address.Output_geo file is the result of using the Google Geolocation Service to get the longitude,lattitude and other location Related data.\n\n[](http:\/\/)https:\/\/developers.google.com\/maps\/documentation\/geolocation\/intro\n\nRoutes Files having information related to different bus routes in adelaide Metropolitan Area.So will used to find the starting and ending stop of the Bus route.\n\nhttps:\/\/adelaidemetro.com.au\/maps\/buses","62262a8b":"3D Bubble Plot with 6 different variables & there Relationship\n\n> *** The Slidebar represent the week instead of year","ae971e46":"Let's see how actual and predicted values compared with each other from first 15 index","3acc9a44":"### Objective of the notebook:\n\nIn this notebook,i have explored how people are travelling from different stops in Adelaide Metropolitan area and the rate at which passengers on each bus route are increasing.finally created a predictive model to find the load of  passengers on public Bus transport system in future.","e9e2956c":"## Future Work <a id=\"15\"><\/a>","ca4f5ed8":"Have Combine Main Data source,Secondary Data source and External Features to get the final dataset for Analysis","2ccbe43d":"* Calculates the number of people commuting within a specific route.\n* Propose the means of commute based upon market information.","a7f8e536":"The data fields in the given file are\n\n* **TripID**\tUnique identity of trip\n* **RouteID**\tValue representing public transport route\n* **StopID**\tUnique identity of stop\n* **StopName**\tName of given stop\n* **WeekBeginning**\tDate representing first day of any week\n* **NumberOfBoarding**\tCount of all boarding\u2019s occurred at this stop for the named trip over the previous week","962923ba":"### Plot using Plotly <a id=\"9\"><\/a>","ca8ca440":"## DataSource <a id=\"1\"><\/a>","15934e87":"### Plot Using Bubbly <a id=\"10\"><\/a>","2571b3d5":"Let's plot for first 30 stops.","8f13664a":"**Inferences**:\n\n* It has Geospatial coverage Area from Lat: 34.3862 to -35.3655 and Lon: 138.4126 to 139.1089. Which is Total 152 KM long Area from Daniel Road to Mosquito Creek Road on one side and Total 162 KM Stretch from Truro to Myponga Beach on the other side.\n* There are cluster of bus stops near to the main Adelaide city as oppose to outside.","b2ac55c8":"### Using LightGbm <a id=\"13\"><\/a>","fbaa6d70":"How Many different type of Unique Data in the dataset","9c59755e":"Columns to keep for further analysis","cbc9bdf8":"### Results\n* we have trained the model for 48 weeks and test on last 6 weeks for all stopping points.\n* High Rmse value came because we didn't scale the values.so we got the actual prediction instead of scaled prediction","1b893e56":"* [Data Source](#1)\n> * [Main Data Source](#2)\n> * [Secondary Data Source](#3)\n* [External Features](#4)\n* [Data Aggregation](#5)\n* [Data Exploration](#6)\n* [Data Visualization](#7)\n> * [Using Bokeh](#8)\n> * [Using Plotly](#9)\n> * [Using Bubbly](#10)\n* [Propositions](#11)\n* [Predictive Modelling](#12)\n> * [Using Lightgbm](#13)\n> * [Using Gru](#14)\n* [Future Work](#15)","aafd7aa7":"**Inferences**:\n\n* X2 King William St and stop near to that are the most busiest stops in the city. which having number of boardings per week more than 10k.\n* Vertical lines are the indicator of holidays which came within that week.\n* Whenever there is any Public holiday that week period have less than average number of people travelled from bus.","40c52786":"Aggregate the Data According to Weeks and Stop names\n* **NumberOfBoardings_sum** Number of Boardings within particular week for each Bus stop\n* **NumberOfBoardings_count** Number of times data is recorded within week\n* **NumberOfBoardings_max** Maximum number of boarding done at single time within week","5021fb3f":"## Data Exploration <a id=\"6\"><\/a>","e17d820c":"## Data Aggregation <a id=\"5\"><\/a>"}}