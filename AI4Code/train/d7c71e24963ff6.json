{"cell_type":{"b3875b7a":"code","bfeeb15b":"code","17f1be36":"code","2f513fbe":"code","fea823b2":"code","9cbb07c1":"code","164540b0":"markdown","a6d26508":"markdown"},"source":{"b3875b7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bfeeb15b":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier","17f1be36":"df_train = pd.read_csv('\/kaggle\/input\/sloan-digital-sky-survey\/Skyserver_SQL2_27_2018 6_51_39 PM.csv') #Importing the dataset\n#Encoding the string values of the class coloumn to integer values 0 = Galaxy, 1= QSO and 2 = Star\nencoder = preprocessing.LabelEncoder()\ndf_train['class'] = encoder.fit_transform(df_train[\"class\"])","2f513fbe":"#Correlation Matrix\ndf_train.drop(['specobjid','fiberid','objid','run','rerun','camcol', 'field','plate','ra'],axis=1,inplace=True) #Droping the irrelevant attribute\nsns.heatmap(df_train.corr(),annot = True)\nplt.show()","fea823b2":"#Seperating the target variable \"class\" from the set of the dataset \nX = df_train.drop('class',axis=1) \ny = df_train['class']\n#Splitting the dataset into the training and test data(20% of the total dataset)\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)","9cbb07c1":"#Using Decision tree classifier because it's very good at multi-class classification \n##Finding the best parameters \nparameters_list = {'max_depth':np.arange(1,15),'min_samples_leaf':np.arange(2,10)}\nall_decision_trees = GridSearchCV(DecisionTreeClassifier(),parameters_list)\nall_decision_trees.fit(X,y)\n\n##Using the best parameters\ny_pred = all_decision_trees.predict(x_test)\nprint(accuracy_score(y_test,y_pred))","164540b0":"**Fiberid**,**objid**,**run**,**rerun**,**camcol**,**field**,**plate** were dropped because they relate more to how the data is orgnazied and unlikely to affect the classification of the object. **Mjd** is kept because it's related to the seasons and that affects which objects are visible in the night sky. During Fall and Spring, extra-galactic objects such as galaxies and QSO are more likely to be imaged and during Summer and Winter intra-galactic objects are more visible such as stars. specobjid was dropped because I was more interested in classifying based on measurable quantities such as the mangitude and location of the object\n\nRight Ascension (**ra**) was dropped because assuming a homogenous univerise, the distribution of the DSO should not be RA dependent.Declination (**dec**) was kept because you there is a higher probability of finding galaxies and QSO outside the Galactic plane (DEC ~-29), so therefore the declination of the object must be considered ","a6d26508":"# **Conclusion**\n\nWe can see that how strong Decesion Tree Classifier is at multivariable classifying problems and with a small optimization we can achieve an accuracy of 99.3%\n\n**Side note:** This is my first attempt at a machine learning problem and proud of using what I've learned from other amazing projects people have posted"}}