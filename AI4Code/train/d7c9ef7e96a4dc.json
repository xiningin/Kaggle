{"cell_type":{"2027818f":"code","ad6b92b0":"code","9b9451d0":"code","c62cd46c":"code","d2ae8f37":"code","319b0ba9":"code","eaaeca26":"code","07f6dcab":"code","85e9ef4c":"code","8cc4d02d":"code","93fa99f9":"code","94c24776":"code","8e09f5f2":"code","03925f3c":"code","ee787f32":"markdown","b5d51754":"markdown","22aa24e6":"markdown","cc49a750":"markdown","33174a86":"markdown","119139ff":"markdown","ca884e78":"markdown"},"source":{"2027818f":"# importing modules\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV","ad6b92b0":"#importing data\nboth = pd.read_csv(\"..\/input\/bluebook-for-bulldozers\/TrainAndValid.csv\", low_memory = False, parse_dates =[\"saledate\"])\nboth.sort_values(by = [\"saledate\"], inplace =True, ascending = True)\n\nboth1 = both.copy()","9b9451d0":"both1[\"saleyear\"] = both1.saledate.dt.year\nboth1[\"salemonth\"] = both1.saledate.dt.month\nboth1[\"saleday\"] = both1.saledate.dt.day\nboth1[\"saledayoftheweek\"] = both1.saledate.dt.dayofweek\nboth1[\"saledayoftheyear\"] = both1.saledate.dt.dayofyear\nboth1.drop(\"saledate\", axis=1, inplace=True)\n","c62cd46c":"# converting strings(object types) to categorical\nfor label, cont in both1.items():\n    if pd.api.types.is_string_dtype(cont):\n        both1[label] = cont.astype(\"category\").cat.as_ordered()\n\n\n# filling numerical missing and adding binary column for the rows missing\nfor label, cont in both1.items():\n    if pd.api.types.is_numeric_dtype(cont):\n        if pd.isnull(cont).sum():\n            \n            both1[label + \"_is_missing\"] = pd.isnull(cont)\n            \n            both1[label] = cont.fillna(cont.median())\n\n            \n# adding binary columns for missing rows in columns and giving codes for categorical types\nfor labels, cont in both1.items():\n    if not pd.api.types.is_numeric_dtype(cont):\n        both1[labels+\"_is_missing\"] = pd.isnull(cont)\n        \n        both1[labels] = pd.Categorical(cont).codes+1\n\n            ","d2ae8f37":"val = both1[both1.saleyear == 2012]\ntrain = both1[both1.saleyear != 2012]\n\n\nX_train, Y_train = train.drop(\"SalePrice\", axis = 1), train.SalePrice\nX_val, Y_val = val.drop(\"SalePrice\", axis = 1), val.SalePrice\n\nX_train.shape, Y_train.shape, X_val.shape, Y_val.shape","319b0ba9":"%%time\nest = RandomForestRegressor(n_jobs = -1, random_state = 17)\nest.fit(X_train, Y_train)\npre = est.predict(X_val)\n\nnp.sqrt(mean_squared_log_error(Y_val, pre))\n","eaaeca26":"%%time\n\nrf_param = {\"n_estimators\": [10,20,30,40,60,80,100],\n            \"max_depth\": [None, 2, 6, 8, 10],\n            \"min_samples_leaf\": [2,6,8,10],\n            \"min_samples_split\": [2,4,6,10],\n            \"max_samples\": [100000]}\n\nrfr_cv = RandomizedSearchCV(RandomForestRegressor(n_jobs = -1,\n                                                  random_state = 17),cv =5,\n                                                  param_distributions = rf_param,\n                                                  n_iter = 5,verbose  = True)\n\nrfr_cv.fit(X_train, Y_train)\n\npr = rfr_cv.predict(X_val)\n\nnp.sqrt(mean_squared_log_error(Y_val, pr)), rfr_cv.best_params_\n","07f6dcab":"%%time\nmodel = RandomForestRegressor(n_jobs = -1,random_state = 17)\n\n\n\nparam_grid = {\"n_estimators\": [40],\n            \"max_depth\": [None],\n            \"min_samples_leaf\": [6],\n            \"min_samples_split\": [2,6],\n            \"max_samples\": [None]}\nRFR = GridSearchCV(model,\n                   cv = 5,\n                   param_grid = param_grid,\n                   verbose =True)\n\nRFR.fit(X_train, Y_train)\n\n\n\n","85e9ef4c":"pred = RFR.predict(X_val);\nnp.sqrt(mean_squared_log_error(Y_val, pred)), RFR.best_params_","8cc4d02d":"# importing test set\ntest = pd.read_csv(\"..\/input\/bluebook-for-bulldozers\/Test.csv\", low_memory = False,parse_dates = [\"saledate\"])\ntest.sort_values(by = [\"saledate\"], inplace =True, ascending = True)\n","93fa99f9":"test[\"saleyear\"] = test.saledate.dt.year\ntest[\"salemonth\"] = test.saledate.dt.month\ntest[\"saleday\"] = test.saledate.dt.day\ntest[\"saledayoftheweek\"] = test.saledate.dt.dayofweek\ntest[\"saledayoftheyear\"] = test.saledate.dt.dayofyear\ntest.drop(\"saledate\", axis=1, inplace=True)\n","94c24776":"for labels, cont in test.items():\n    if pd.api.types.is_string_dtype(cont):\n        test[label] = cont.astype(\"category\").cat.as_ordered()\n\n\nfor labels, cont in test.items():\n    if pd.api.types.is_numeric_dtype(cont):\n        if pd.isnull(cont).sum():\n            test[labels+\"_is_missing\"] = pd.isnull(cont)\n            test[labels] = cont.fillna(cont.median())\n\nfor labels, cont in test.items():\n    if not pd.api.types.is_numeric_dtype(cont):\n        \n        test[labels + \"_is_missing\"] = pd.isnull(cont)\n        \n        test[labels] = pd.Categorical(cont).codes+1\n","8e09f5f2":"predictions = RFR.predict(test)\npredictions\n","03925f3c":"data = {\"SalesID\": test[\"SalesID\"], \"SalePrice\": predictions}\nsubmission = pd.DataFrame(data)\nsubmission.to_csv(\"submission.csv\", index = False)","ee787f32":"## Feature engineering","b5d51754":"## Feature engineering on Test set","22aa24e6":"`Using RandomizedSearchCV for finding best parmeters`\n","cc49a750":"`Predicting the future sale prices of bulldozers`","33174a86":"## Modelling on Training set","119139ff":"`Fitting the above parameters from hyper tuning in a model`","ca884e78":"`Predicting on validation set`"}}