{"cell_type":{"896f411f":"code","10fc123e":"code","469e89b6":"code","327088a5":"code","b80845ab":"code","a482247c":"code","60c78b3e":"code","19709184":"code","4474697b":"code","5c588f39":"code","ba38e5ad":"code","724dd5fc":"code","2fa9543c":"code","8f290cc1":"code","bb953d35":"code","0dc3f93d":"code","d0eccee6":"code","77d9148f":"code","b766abdc":"code","1c8ce967":"code","fa85431c":"code","b889b30c":"code","903195c6":"code","b55f2d61":"markdown","1c66ba68":"markdown","f53c0365":"markdown","4c771a99":"markdown","e1ea90da":"markdown","1bbdd06e":"markdown","5adb229c":"markdown","601f6c71":"markdown","ec68e5bb":"markdown","cbb6e492":"markdown","b62dedd4":"markdown","d3069034":"markdown","fc9e1b28":"markdown","8b49c614":"markdown","6943c340":"markdown","2eb185f3":"markdown","90981589":"markdown","800a2344":"markdown","6039e236":"markdown","6538b4ea":"markdown","1eecd6a0":"markdown","8207f6f0":"markdown","f9a5fbe3":"markdown","f23aeaf3":"markdown","2eae36ce":"markdown","2a7f3f9d":"markdown","a30a8423":"markdown","4386acf6":"markdown"},"source":{"896f411f":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score\n\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\n\npd.set_option('display.float_format', lambda x: '%.3f' % x)","10fc123e":"data = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")","469e89b6":"data.head(6)","327088a5":"data.isnull().values.any()","b80845ab":"data.describe()","a482247c":"data.info()","60c78b3e":"X = data.iloc[ : , 1:30].values\ny = data.iloc[ : , -1].values","19709184":"print(X.shape)\nprint(y.shape)","4474697b":"plt.rcParams['figure.figsize'] = (15,6)\n\ndata_class = pd.value_counts(data['Class'], sort = True)\ndata_class.plot(kind = 'bar', rot = 1)\nplt.xticks(range(2))\nplt.xlabel(\"Class\", size = 18, color = \"Red\", fontname = \"Verdana\")\nplt.ylabel(\"Number of Records\", size = 18, color = \"Red\", fontname = \"Verdana\")\nplt.show()","5c588f39":"len(data[data.Class == 0])","ba38e5ad":"len(data[data.Class == 1])","724dd5fc":"len(data[data.Class == 0]) + len(data[data.Class == 1])","2fa9543c":"plt.rcParams['figure.figsize'] = (20,15)\n\ncorrel = data.corr()\ng=sns.heatmap(correl, square = True, cmap = 'YlOrRd', annot = True, vmax = 0.9, fmt = '.2f')\nplt.show()\n\n#Thus, none of the atrributes are correalted to each other excpet with self.","8f290cc1":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","bb953d35":"stdsc = StandardScaler()\nX_train = stdsc.fit_transform(X_train)\nX_test = stdsc.transform(X_test)","0dc3f93d":"classifier_dt = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier_dt.fit(X_train, y_train)","d0eccee6":"y_pred_dt = classifier_dt.predict(X_test)\ny_pred_dt","77d9148f":"cm1 = confusion_matrix(y_test, y_pred_dt)\ncm1","b766abdc":"print(\"Decision Trees Model Performance Evaluation Meausres \\n\")\n\naccuracy_dt = accuracy_score(y_test,y_pred_dt) * 100\nprint(\"Accuracy (in percent)   :\", np.round(accuracy_dt, 2))\n\nerror_dt = 100 - accuracy_dt\nprint('Error Rate (in percent) :', np.round(error_dt, 2))\n\nprecision_dt = precision_score(y_test,y_pred_dt) * 100\nprint(\"Precision (in percent)  :\", np.round(precision_dt, 2))\n\nrecall_dt = recall_score(y_test, y_pred_dt) * 100\nprint(\"Recall (in percent)     :\", np.round(recall_dt, 2))","1c8ce967":"svc_classifier = SVC(kernel = \"rbf\", random_state = 0)\nsvc_classifier.fit(X_train, y_train)","fa85431c":"y_pred_svm = svc_classifier.predict(X_test)\ny_pred_svm","b889b30c":"cm2 = confusion_matrix(y_test, y_pred_svm)\ncm2","903195c6":"print(\"Support Vector Machine Model Performance Evaluation Meausres \\n\")\n\naccuracy_svm = accuracy_score(y_test,y_pred_svm) * 100\nprint(\"Accuracy (in percent)   :\", np.round(accuracy_svm, 2))\n\nerror_svm = 100 - accuracy_svm\nprint('Error Rate (in percent) :', np.round(error_svm, 2))\n\nprecision_svm = precision_score(y_test,y_pred_svm) * 100\nprint(\"Precision (in percent)  :\", np.round(precision_svm, 2))\n\nrecall_svm = recall_score(y_test, y_pred_svm) * 100\nprint(\"Recall (in percent)     :\", np.round(recall_svm, 2))","b55f2d61":"### Getting number of Normal Transactions","1c66ba68":"### Checking if no records are lost \/\/ Must macth with len(X)","f53c0365":"### Checking if both variables imported correct number of records","4c771a99":"### Building Confusion Matrix for Support Vector Machine model","e1ea90da":"## Improting Librarires","1bbdd06e":"### Visually analyzing the number of Fraud Transactions vs. Normal Transactions","5adb229c":"### Fitting the Support Vector Machine classifier on X_train and y_train ","601f6c71":"## Support Vector Machine","ec68e5bb":"### Getting statistical description of data","cbb6e492":"### Decision Tree Classifier","b62dedd4":"### Checking if dataset has any null or 'Nan' values","d3069034":"**Thus, based on above 2 evaluations of both models, both perfomed equally well with Decision Tree having slightly higher performance.**","fc9e1b28":"### Setting X and y variables for deploying the Machine Learning CLassification Algorithms","8b49c614":"* To check the performance of algorithm, we will use Confusion Matrix\n* It is a matrix having True Positive (TP), True Negative (TN), False Positive (FP), False Negative (FN) values as elements","6943c340":"### Read the Data","2eb185f3":"### Model Performance Evaluation for Support Vector Machine","90981589":"**Credit Card Fraud Detection was the first project I did while I was learning about Machine Learning Algorithms. \nThus the code, insights and evaluation looks incomplete as I was not having enough knowledge back then.\nAnd I dont want to change it either now. I want to keep it the way I created back then.**","800a2344":"### Getting counts of Fraud transactions","6039e236":"### Getting data info","6538b4ea":"### Building Confusion Matrix for Decision Trees model","1eecd6a0":"* Predicting the X_test value with another Classification Algorithm Support Vector Machine\n* This is done to check if SVM produces better Evaluations reuslts or not","8207f6f0":"### Model Performance Evaluation for Support Vector Machine","f9a5fbe3":"### Standardization of X_train and X_test to avoid abnormal behavior of model","f23aeaf3":"### Explore the Data","2eae36ce":"### Predicting results based on classifier being fitted above","2a7f3f9d":"### Finding coorelation between the attributes (columns) by plotting the Seaborn Heatmap","a30a8423":"### Creating train and test set to deploy Machine Learning Algorithms","4386acf6":"### Predicting results based on classifier being fitted above"}}