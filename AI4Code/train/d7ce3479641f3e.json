{"cell_type":{"964e0952":"code","fe234880":"code","eda10b1b":"code","9d4b8de2":"code","529fe8a8":"code","e27b0c28":"code","7f61f86d":"code","19d5c4e8":"code","ae94087c":"markdown","d62843ee":"markdown","cfa89039":"markdown","3e7fd00e":"markdown","b527317c":"markdown","77d08f49":"markdown","3f125753":"markdown","ea37a4d0":"markdown","ad9bc50b":"markdown","78323a43":"markdown"},"source":{"964e0952":"x = 1\nprint(type(x))","fe234880":"def hello():\n    print(\"hello\")\nprint(type(hello))\n#hello is a function","eda10b1b":"string = \"hello\"\nprint(string.upper())\n#upper() is a method usually name.method","9d4b8de2":"class Dog:\n    #2 underscore init two underscore\n    def __init__(self, name,age):\n        #pass #immidiately initiate the class\n        #if we want to take a name immidiately\n        self.name = name #name is attribute\n        #print(name)\n        self.age = age\n        \n    #creating a method, taking parameter self\n    def bark(self):\n        print(\"bark\")\n    #returning sth in method\n    def meow(self):\n        return \"meow\"\n    #passing more than 1 arguement\n    def add_one(self, x):\n        return x + 1\n    def get_name(self):\n        return self.name\n    def get_age(self):\n        return self.age\n    #modifying attributes method\n    def set_age(self, age):\n        self.age = age\n        ","529fe8a8":"d = Dog(\"Tim\", 35)#creating Dog class\n#now it has an attribute you should pass an attribute\nd2 = Dog(\"mim\", 2)\nprint(d2.get_name())#accessing by method\nprint(d2.get_age())\nd2.set_age(40)\nprint(d2.get_age())\nprint(d2.name)#access the attribut by .name method\nprint(type(d))\n\nd.bark()#applying method\nprint(d.add_one(5))","e27b0c28":"c = Dog(None)\n#if i don't want to pass anything","7f61f86d":"class Car:\n    def __init__(self, color, milage):\n        self.color = color\n        self.milage = milage\n    \n    def __str__(self):\n        return 'a {self.color} car' .format(self = self)\n    \nmy_car = Car(\"red\", 37291)\nprint(my_car)\n#__str__ method is called internally, controlling in my own way","19d5c4e8":"class Car:\n    def __init__(self, color, milage):\n        self.color = color\n        self.milage = milage\n    \n    def __str__(self):\n        return 'a {self.color} car' .format(self = self)\n    \nmy_car = Car(\"red\", 37291)\nprint(my_car)\n#__str__ method is called internally, controlling in my own way","ae94087c":"# Method in Python: Daily coding","d62843ee":"## __str__","cfa89039":"__main__ is telling us what module was the class  defined in\nBy default it is main","3e7fd00e":"# Class in Python: Daily coding","b527317c":"__str__ ==> easy to ready, for human consumtion\n\n__repr__ ==> unambiguous","77d08f49":"# __repr__","3f125753":"Ref: https:\/\/www.youtube.com\/watch?v=JeznW_7DlB0\n\nhttps:\/\/realpython.com\/lessons\/how-and-when-use-__str__\/\n\nhttps:\/\/www.youtube.com\/watch?v=aIdzBGzaxUo","ea37a4d0":"We get class int, int is a class actually","ad9bc50b":"# Class template","78323a43":"# Magic method\nSupposed to be core method in python, naming method\n"}}