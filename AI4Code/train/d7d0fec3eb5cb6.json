{"cell_type":{"462702e9":"code","43fa1a3a":"code","c688825e":"code","4dd6c45e":"code","a3f843fa":"code","daec92d9":"code","c78f9ad8":"code","8d3a2773":"code","0602ec3a":"code","2ea4440b":"code","3bed54d2":"code","f949eb64":"code","c1361edf":"code","fa4c6abb":"code","6cb547c3":"code","83ae125c":"markdown","6fe7c651":"markdown","35422687":"markdown"},"source":{"462702e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sea\n\n# import plotly\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n# these two lines are what allow your code to show up in a notebook!\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","43fa1a3a":"df = pd.read_csv(\"..\/input\/crisis-data.csv\", parse_dates=['Reported Date', 'Occurred Date \/ Time'])","c688825e":"df.head()","4dd6c45e":"# how big is the dataset?\nprint(\"Num rows: {0}\".format(df.shape[0]))\n# what range of dates do we have?\nprint(\"Min date: {0} | Max date: {1}\".format(df['Reported Date'].min(), df['Reported Date'].max()))","a3f843fa":"# clean up bogus dates\ndf = df[df['Reported Date'].dt.year > 2000].copy()\nprint(\"Min date: {0} | Max date: {1}\".format(df['Reported Date'].min(), df['Reported Date'].max()))","daec92d9":"dfg = df[['Reported Date','Template ID']].groupby('Reported Date').count()\ndfg.rename({'Template ID':'Incidents'},axis=1,inplace=True)","c78f9ad8":"dfg.plot.line(\n    figsize=(12,5), \n    colormap='tab20',\n    title=\"Incidents per day\",\n    legend=False\n)","8d3a2773":"data = [go.Scatter(x=dfg.index.tolist(), y=dfg['Incidents'])]\n\n# specify the layout of our figure\nlayout = dict(title = \"Number of Incidents Per Day\",\n              xaxis= dict(title= 'Date',ticklen= 5,zeroline= False))\n\n# create and show our figure\nfig = dict(data = data, layout = layout)\niplot(fig)","0602ec3a":"dfp_precinct = pd.pivot_table(\n    data=df[['Reported Date', 'Precinct']],\n    index='Reported Date',\n    columns=['Precinct'],\n    aggfunc=len,\n)\ndfp_precinct.iloc[-30::,:].plot.bar(\n    stacked=True, \n    figsize=(12,5), \n    colormap='tab20',\n    title=\"Incidents per day by precint (last 30 days)\"\n).legend(loc='center left', bbox_to_anchor=(1, 0.5))","2ea4440b":"dfp_precinct.iloc[-30::,:].div(dfp_precinct.iloc[-30::,:].sum(axis=1), axis=0).plot.bar(\n    stacked=True, \n    figsize=(12,5), \n    colormap='tab20',\n    title=\"Incidents per day by precint (last 30 days)\"\n).legend(loc='center left', bbox_to_anchor=(1, 0.5))","3bed54d2":"data = [\n    go.Bar(\n        x=dfp_precinct.index.tolist(), \n        y=dfp_precinct[col],\n        name=col\n    ) for col in dfp_precinct.columns\n]\n\n# updatemenus = list([\n#     dict(active=-1,\n#          buttons=list([   \n#             dict(label = 'High',\n#                  method = 'update',\n#                  args = [{'visible': [True, True, False, False]},\n#                          {'title': 'Yahoo High',\n#                           'annotations': high_annotations}]),\n#             dict(label = 'Low',\n#                  method = 'update',\n#                  args = [{'visible': [False, False, True, True]},\n#                          {'title': 'Yahoo Low',\n#                           'annotations': low_annotations}]),\n#             dict(label = 'Both',\n#                  method = 'update',\n#                  args = [{'visible': [True, True, True, True]},\n#                          {'title': 'Yahoo',\n#                           'annotations': high_annotations+low_annotations}]),\n#             dict(label = 'Reset',\n#                  method = 'update',\n#                  args = [{'visible': [True, False, True, False]},\n#                          {'title': 'Yahoo',\n#                           'annotations': []}])\n#         ]),\n#     )\n# ])\n\n# specify the layout of our figure\nlayout = dict(\n    title = \"Number of Incidents Per Day\",\n    xaxis= dict(\n        title= 'Date',\n        ticklen= 5,\n        zeroline= False,\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                     label='1m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=6,\n                     label='6m',\n                     step='month',\n                     stepmode='backward'),\n                dict(count=1,\n                    label='YTD',\n                    step='year',\n                    stepmode='todate'),\n                dict(count=1,\n                    label='1y',\n                    step='year',\n                    stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(\n            visible = True\n        ),\n        type='date',\n    ),\n    barmode='stack',\n)\n\n# create and show our figure\nfig = dict(data = data, layout = layout)\niplot(fig)\n\n\n","f949eb64":"dfp_sector = pd.pivot_table(\n    data=df[['Reported Date', 'Sector']],\n    index='Reported Date',\n    columns=['Sector'],\n    aggfunc=len,\n)\n\ndfp_sector.iloc[-30::,:].plot.bar(\n    stacked=True, \n    figsize=(12,5), \n    colormap='tab20',\n    title=\"Incidents per day by sector (last 30 days)\"\n).legend(loc='center left', bbox_to_anchor=(1, 0.5))","c1361edf":"dfp_sector.iloc[-30::,:].div(dfp_sector.iloc[-30::,:].sum(axis=1), axis=0).plot.bar(\n    stacked=True, \n    figsize=(12,5), \n    colormap='tab20',\n    title=\"Incidents per day by sector (last 30 days)\"\n).legend(loc='center left', bbox_to_anchor=(1, 0.5))","fa4c6abb":"df_trend = pd.DataFrame(index=df['Sector'].sort_values().unique()).iloc[0:-1,:]\ndf_trend = df_trend.join(\n    pd.Series(data=dfp_sector.iloc[-30::,:].T.mean(axis=1), name='last30')\n)\ndf_trend = df_trend.join(\n    pd.Series(data=dfp_sector.iloc[-3::,:].T.mean(axis=1), name='last3')\n)\ndf_trend['trend'] = df_trend['last3'] - df_trend['last30'] \ndf_trend['trend'].sort_values().plot.bar(title=\"Average daily incidents per sector over last three days vs last month\", figsize=(12,5), colormap='tab20')","6cb547c3":"data = [\n    go.Bar(\n        x=df_trend.index.tolist(), \n        y=df_trend['trend'],\n        marker={\n            'color':['red' if x>0 else 'green' for x in  df_trend['trend']]\n        }\n    )\n]\n\n# specify the layout of our figure\nlayout = dict(title = \"Average daily incidents over last three days vs last month\",\n              xaxis= dict(title= 'Sector',ticklen= 5,zeroline= False))\n\n# create and show our figure\nfig = dict(data = data, layout = layout)\niplot(fig)","83ae125c":"## Precinct Level Trends","6fe7c651":"## Sector Level Trends","35422687":"## How do things look in terms of number of incidents per day broken down by sector?"}}