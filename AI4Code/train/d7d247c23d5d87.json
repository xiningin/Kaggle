{"cell_type":{"7ac5685b":"code","b22d4197":"code","6df01f0b":"code","95de1092":"code","c2795fbe":"code","98095d5c":"code","c1709ac7":"code","6e3936cd":"code","8e9ae089":"code","f82e9a93":"code","1a671d21":"code","132a8b2e":"code","9e7f63c6":"code","036ac2bd":"code","9620bb16":"code","81ae5462":"code","e4fac1d5":"code","18e4ab32":"code","b1720e6b":"code","2c0821c2":"code","dd883a94":"code","88a80f59":"code","2835e46c":"code","c6f56eac":"code","34d089ac":"code","16a47e05":"code","5170daaf":"code","5c369286":"code","0c0d44f4":"code","376704b3":"code","c0abd354":"code","c71436c2":"code","9e7dff42":"code","99fecb80":"code","5d76f8a1":"code","8475d798":"code","0c2c2edf":"markdown","3d754486":"markdown","a6789065":"markdown","523e8058":"markdown","8c6214c8":"markdown","a387e9af":"markdown","6937a11f":"markdown","fb2cd29a":"markdown"},"source":{"7ac5685b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import rcParams\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport warnings\nwarnings.filterwarnings('ignore')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b22d4197":"data = pd.read_csv(\"\/kaggle\/input\/zomato-bangalore-restaurants\/zomato.csv\") # import dataset","6df01f0b":"data.head(3) # first 3 row of dataset","95de1092":"data.shape # shape of data","c2795fbe":"data.info() # some import info of data","98095d5c":"# rename columns\ndata = data.rename(columns={\"approx_cost(for two people)\": \"AvarageCost\", \"listed_in(type)\": \"listed_in_type\", \"listed_in(city)\":\"listed_in_city\"})","c1709ac7":"data.head(1)","6e3936cd":"# drop some unnecessary columns\ndrop_list = [\"address\", \"phone\", \"url\", \"location\"]\ndata.drop(drop_list, axis=1, inplace=True)","8e9ae089":"# Replace New by NaN\ndata[\"rate\"] = data[\"rate\"].replace(\"NEW\", np.nan)\ndata.dropna(how=\"any\", inplace=True)","f82e9a93":"# rate column string to integer convert\nX = data\nX[\"rate\"] = X[\"rate\"].astype(str)\nX[\"rate\"] = X[\"rate\"].apply(lambda x: x.replace('\/5',''))\nX[\"rate\"] = X[\"rate\"].apply(lambda x: float(x))","1a671d21":"X","132a8b2e":"rcParams[\"figure.figsize\"] = 14, 8\nloc = X[\"listed_in_city\"].value_counts()\nsns.set(style=\"whitegrid\")\nsns.barplot(y=loc, x=loc.index, palette=\"Set2\")\nplt.xticks(rotation=90)\nplt.title(\"Different Location and Restaurent Count\", fontweight=\"bold\")","9e7f63c6":"# Count of total online ad ofline order\nsns.countplot(X[\"online_order\"])","036ac2bd":"# Count of table booking \nsns.countplot(X[\"book_table\"])","9620bb16":"rcParams[\"figure.figsize\"] = 14, 8\n\n# Differnt Restaurent Type\nres_type = X[\"rest_type\"].value_counts()\nsns.set(style=\"whitegrid\")\nsns.barplot(y=res_type, x=res_type.index, palette=\"Set2\")\nplt.xticks(rotation=90)\nplt.title(\"Restaurent Type\")","81ae5462":"# Avarage cost replace comma\nX[\"AvarageCost\"] = X[\"AvarageCost\"].apply(lambda x:x.replace(\",\",\"\"))\nX[\"AvarageCost\"] = X[\"AvarageCost\"].astype(\"int\")","e4fac1d5":"sns.distplot(X[\"AvarageCost\"])\nplt.title(\"Cost distribution for all restaurent\")","18e4ab32":"X = X.drop_duplicates(subset=\"name\", keep=\"first\") # drop duplicates restaurent names","b1720e6b":"highRatYes = X[(X[\"rate\"] >= 4.5) & (X[\"online_order\"] == \"Yes\")]\nratOnline = highRatYes.shape[0]\nb = highRatYes.max()\nc = b[\"rate\"]\na = b[\"name\"]\nprint(f\"Name of High Rated Restaurent: {a} and Rate is: {c}\")\nprint(f\"Total {ratOnline} restaurents take online order and their rating above 4.5\")\n\nhighRatNo = X[(X[\"rate\"] >= 4.5) & (X[\"online_order\"] == \"No\")]\nratOffline = highRatNo.shape[0]\nb = highRatNo.max()\nc = b[\"rate\"]\na = b[\"name\"]\nprint(f\"Name of High Rated Restaurent: {a} and Rate is: {c}\")\nprint(f\"Total {ratOffline} restaurents take offline order and their rating above 4.5\")\n\nprint(\"*\" * 50)\n\nmidRatYes = X[(X[\"rate\"] >= 4.0) & (X[\"rate\"] <= 4.4) & (X[\"online_order\"] == \"Yes\")]\nratOnline = midRatYes.shape[0]\nb = midRatYes.max()\nc = b[\"rate\"]\na = b[\"name\"]\nprint(f\"Name of High Rated Restaurent: {a} and Rate is: {c}\")\nprint(f\"Total {ratOnline} restaurents take online order and their rating between 4.0 to 4.4\")\n\nmidRatNo = X[(X[\"rate\"] >= 4.0) & (X[\"rate\"] <= 4.4) & (X[\"online_order\"] == \"No\")]\nratOffline = midRatNo.shape[0]\nb = midRatNo.max()\nc = b[\"rate\"]\na = b[\"name\"]\nprint(f\"Name of High Rated Restaurent: {a} and Rate is: {c}\")\nprint(f\"Total {ratOffline} restaurents take offline order and their rating between 4.0 to 4.4\")\n\nprint(\"*\" * 50)\n\nlowRatYes = X[(X[\"rate\"] < 4.0) & (X[\"online_order\"] == \"Yes\")]\nratOnline = lowRatYes.shape[0]\nb = lowRatYes.max()\nc = b[\"rate\"]\na = b[\"name\"]\nprint(f\"Name of High Rated Restaurent: {a} and Rate is: {c}\")\nprint(f\"Total {ratOnline} restaurents take online order and their rating less 4.0\")\n\nlowRatNo = X[(X[\"rate\"] < 4.0) & (X[\"online_order\"] == \"No\")]\nratOfline = lowRatNo.shape[0]\nb = lowRatNo.max()\nc = b[\"rate\"]\na = b[\"name\"]\nprint(f\"Name of High Rated Restaurent: {a} and Rate is: {c}\")\nprint(f\"Total {ratOfline} restaurents take offline order and their rating less 4.0\")","2c0821c2":"list_loc = ['Banashankari', 'Bannerghatta Road', 'Basavanagudi', 'Bellandur',\n       'Brigade Road', 'Brookefield', 'BTM', 'Church Street',\n       'Electronic City', 'Frazer Town', 'HSR', 'Indiranagar',\n       'Jayanagar', 'JP Nagar', 'Kalyan Nagar', 'Kammanahalli',\n       'Koramangala 4th Block', 'Koramangala 5th Block',\n       'Koramangala 6th Block', 'Koramangala 7th Block', 'Lavelle Road',\n       'Malleshwaram', 'Marathahalli', 'MG Road', 'New BEL Road',\n       'Old Airport Road', 'Rajajinagar', 'Residency Road',\n       'Sarjapur Road', 'Whitefield']\ni = 0\nfor i in range(len(list_loc)):\n    c = X[X[\"listed_in_city\"]==list_loc[i]]\n    i+=1\n    d = c.max()\n    e = d[\"listed_in_city\"]\n    f = d[\"AvarageCost\"]\n    a = c[\"listed_in_type\"].value_counts()\n    g = c.min()\n    h = g[\"AvarageCost\"]\n    print(f\"Location: {e} ----> Avarage Cost between:{h} to {f}\\ntypes of restaurent at {e}\\n{a}\")","dd883a94":"# low budget restaurent\nlow_budget = X.groupby(['name','rest_type','cuisines', 'listed_in_city', 'rate', 'reviews_list', 'dish_liked'])['AvarageCost'].sum().sort_values(ascending=True).reset_index()\nlow_budget = low_budget[low_budget[\"AvarageCost\"] <= 1500]\n\n# mid budget restaurent\nmid_budget = X.groupby(['name','rest_type','cuisines', 'listed_in_city', 'rate', 'reviews_list', 'dish_liked'])['AvarageCost'].sum().sort_values(ascending=True).reset_index()\nmid_budget = mid_budget[(mid_budget[\"AvarageCost\"] > 1500) & (mid_budget[\"AvarageCost\"] <= 3000)]\n\n# High budget restaurent\nhigh_budget = X.groupby(['name','rest_type','cuisines', 'listed_in_city', 'rate', 'reviews_list', 'dish_liked'])['AvarageCost'].sum().sort_values(ascending=True).reset_index()\nhigh_budget = high_budget[(high_budget[\"AvarageCost\"] > 3000) & (high_budget[\"AvarageCost\"] <= 6000)]","88a80f59":"# Lowest Budget restaurent\n\nlow = low_budget[\"listed_in_city\"].value_counts()\ng = sns.barplot(y=low.values, x=low.index, palette=\"Set2\")\nplt.xticks(rotation=90)\nplt.title(\"Lowest budget restaurent from different area\")\nfor p in g.patches:\n    g.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.6, p.get_height()+1.3), ha='center', va='bottom', color= 'black', rotation=90)","2835e46c":"# Mid budget restaurent\n\nmid = mid_budget[\"listed_in_city\"].value_counts()\ng = sns.barplot(y=mid.values, x=mid.index, palette=\"Set2\")\nplt.xticks(rotation=90)\nplt.title(\"Mid budget restaurent from different area\")\nfor p in g.patches:\n    g.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()+1.3), ha='center', va='bottom', color= 'black', rotation=90)","c6f56eac":"# High budget Restaurent\n\n\nhigh = high_budget[\"listed_in_city\"].value_counts()\ng = sns.barplot(x=high.index, y=high.values, palette=\"plasma\")\nplt.xticks(rotation=90)\nplt.title(\"HIghest budget restaurent from different area\")\nfor p in g.patches:\n    g.annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.45, p.get_height()+0.1), ha='center', va='bottom', color= 'black', rotation=90)","34d089ac":"# Lowest Cost, High rated different restaurent\n\nplt.subplots(figsize=(18,9))\nlowbudVsHigrat = low_budget[low_budget[\"rate\"] >= 4.5]\nlowbudVsHigrat.iloc[42,0] =\"Santa Spa Cusinies\"\nsns.barplot(lowbudVsHigrat[\"name\"], lowbudVsHigrat[\"AvarageCost\"], palette=\"Set2\")\nplt.xticks(rotation=90);\nplt.title(\"Lowest budget restaurent name vs avarage cost\")","16a47e05":"# Cusines and mid budgets\nprint(mid_budget[\"cuisines\"].value_counts()[:10])","5170daaf":"# Low budgets and cuisines\nprint(low_budget[\"cuisines\"].value_counts()[:10])","5c369286":"def cloud_word(budget):\n    text = \" \".join(dish for dish in budget[\"cuisines\"])\n    wc = WordCloud(max_font_size=100,colormap=\"summer\", height=300, width=400, random_state=42, background_color='#151515')\n    wc.generate(text)\n    plt.imshow(wc, interpolation=\"bilinear\")\n    plt.axis(\"off\")","0c0d44f4":"# Low Avarage cost and cuisines\ncloud_word(low_budget)","376704b3":"# medium Avarage cost and cuisines\ncloud_word(mid_budget)","c0abd354":"# High Avarage cost and cuisines\ncloud_word(high_budget)","c71436c2":"def dish_like(budget):    \n    dish_liked = \" \".join(f for f in budget[\"dish_liked\"])\n    wc_ = WordCloud(max_font_size=100,colormap=\"Set2\", height=300, width=400, random_state=42, background_color='#151515')\n    wc_.generate(dish_liked)\n    plt.imshow(wc_, interpolation=\"bilinear\")\n    plt.axis(\"off\")","9e7dff42":"# Low avarage Cost and dishes people liked in the restaurant\ndish_like(low_budget)","99fecb80":"# Medium avarage Cost and dishes people liked in the restaurant\ndish_like(mid_budget)","5d76f8a1":"# High avarage Cost and dishes people liked in the restaurant\n\ndish_like(high_budget)","8475d798":"sns.heatmap(data.corr(), annot=True, linewidth=0.5, cmap=\"Blues_r\") # heatmap","0c2c2edf":"# Exploratory Data Analysis -- EDA","3d754486":"# If you like, please upvote","a6789065":"![zomato.jpg](attachment:zomato.jpg)\n\n# Zomato is an Indian restaurant aggregator and food delivery start-up founded by Deepinder Goyal and Pankaj Chaddah in 2008. Zomato provides information, menus and user-reviews of restaurants as well as food delivery options from partner restaurants in select cities. Zomato also began grocery delivery amid the COVID-19 outbreak. As of 2019, the service is available in 24 countries and in more than 10,000 cities.\n\n## If you like, Please upvote","523e8058":"# dishes people liked in the restaurant","8c6214c8":"# Rating Vs Online Order(Yes \/ No)","a387e9af":"# Create Word Cloud","6937a11f":"# Location, Avarage Cost And Types Of Restaurents","fb2cd29a":"# I think there, People have Demand On North Indian Food\n\n# If you want to start a new restaurent, You have remind that, Avarage Cost must be less, you should provide Online service, you must provide delivery.Try to gain reviews, that help you to grow rating. Give Discount on first order. Accept online or cash payment. Try Buy one get one policy. Special occasion, special discount or discount on big deal. Last of all, you always should, maintain your quality."}}