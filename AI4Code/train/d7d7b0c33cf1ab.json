{"cell_type":{"337e1cfd":"code","3c6e4399":"code","65c479a9":"code","43e85b90":"code","f124684c":"code","77061901":"code","57d6da34":"code","602f7cd9":"code","5b223ecc":"code","cd85fa9c":"code","e89f2b9a":"code","1b9a667c":"code","413df44f":"code","a1206a83":"code","8101d565":"code","e8de0026":"code","994af186":"code","c30aec66":"code","d9a8f0e9":"code","80fcab56":"code","1d68593c":"code","90fbd4af":"code","584104ab":"code","6f1e76b4":"code","c0cefc50":"code","3ca565cd":"code","4c4bf01f":"code","76523873":"code","efd7c616":"code","3d37bdcd":"code","5b8d218a":"code","3f40a400":"code","ca5b6e82":"code","24c6a14e":"code","87574b04":"code","5e59363d":"code","e108a54d":"code","ba72814f":"code","9124d4dc":"code","fdb43593":"code","e6a59938":"code","94e829bb":"code","c477e7a8":"code","9c309a64":"code","8d11d309":"code","89c4b734":"code","6473508d":"code","0f0fb295":"code","4aea512e":"code","be4e12f3":"code","ea9c752a":"code","be04c035":"code","2b7aebc6":"code","ee7af488":"code","59162b44":"code","998a2e04":"code","c0382c34":"code","35de2af7":"code","520f7f6a":"code","eb819614":"code","812804eb":"code","d6c95e4f":"code","0164fa02":"code","d9574020":"markdown","fca79571":"markdown","7532d7cb":"markdown","e1304bac":"markdown","3156a46b":"markdown","4af0d855":"markdown","2e45ae05":"markdown","31586e0e":"markdown","28fbea23":"markdown","8167ec6b":"markdown","525bf433":"markdown","72c3d62b":"markdown","8c3344fd":"markdown","e2324349":"markdown"},"source":{"337e1cfd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3c6e4399":"import matplotlib.pyplot as plt\nimport seaborn as sns","65c479a9":"df = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")","43e85b90":"df.head(4)","f124684c":"df.values.shape","77061901":"df.columns","57d6da34":"df.describe()","602f7cd9":"df.info()","5b223ecc":"df.isnull().sum()","cd85fa9c":"sns.countplot(x = 'target', data = df )","e89f2b9a":"sns.pairplot(df)","1b9a667c":"plt.figure(figsize = (16,7))\nsns.heatmap(df.corr(), annot = True)","413df44f":"sns.distplot(df['age'])","a1206a83":"sns.distplot(df['oldpeak'])","8101d565":"sns.distplot(df['thalach'])","e8de0026":"sns.distplot(df['trestbps'])","994af186":"sns.distplot(df['chol'])","c30aec66":"sns.countplot(x = 'target',data = df, hue = 'sex',)","d9a8f0e9":"sns.countplot(x = 'target', data = df, hue = \"cp\")","80fcab56":"plt.figure(figsize = (12,10))\nsns.countplot(x = 'age', data = df, hue = 'sex')","1d68593c":"df['sex'].value_counts()","90fbd4af":"plt.figure(figsize = (10,7))\nsns.boxplot(data = df[['age', 'trestbps','chol','thalach']])","584104ab":"for i in df[['age','trestbps','chol','thalach']]:\n    Q1 = df[i].quantile(0.25)\n    Q3 = df[i].quantile(0.75)\n    iqr = Q3-Q1\n    Upper_limit = Q3+3*iqr\n    df = df[df[i]< Upper_limit]\n    print(df)     ","6f1e76b4":"plt.figure(figsize = (10,7))\nsns.boxplot(data = df[['age', 'trestbps','chol','thalach']])","c0cefc50":"from sklearn.model_selection import train_test_split","3ca565cd":"X = df.drop('target', axis = 1).values\ny = df['target'].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=100)","4c4bf01f":"from sklearn.preprocessing import MinMaxScaler","76523873":"scaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","efd7c616":"print(\"X_train min = {} and max = {}\".format(X_train.min(),X_train.max()))","3d37bdcd":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train,y_train)\n\npredictions = model.predict(X_test)\n","5b8d218a":"from sklearn.metrics import classification_report,confusion_matrix,accuracy_score","3f40a400":"print(classification_report(y_test,predictions))","ca5b6e82":"print(confusion_matrix(y_test,predictions))","24c6a14e":"print(\"Logistic regression accuracy is {}\".format(accuracy_score(y_test,predictions)))","87574b04":"from sklearn.neighbors import KNeighborsClassifier\nKneighbor = KNeighborsClassifier(n_neighbors=6)\nKneighbor.fit(X_train,y_train)\n","5e59363d":"predict_knn = Kneighbor.predict(X_test)","e108a54d":"print(classification_report(y_test,predict_knn))","ba72814f":"print(confusion_matrix(y_test,predict_knn))","9124d4dc":"print('Knn accuracy is {}'.format(accuracy_score(y_test,predict_knn)))","fdb43593":"from sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier()\ntree.fit(X_train,y_train)","e6a59938":"predict_tree = tree.predict(X_test)","94e829bb":"print(classification_report(y_test,predict_tree))","c477e7a8":"print(confusion_matrix(y_test,predict_tree))","9c309a64":"print('Decision tree accuracy is {}'.format(accuracy_score(y_test,predict_tree)))","8d11d309":"from sklearn.ensemble import RandomForestClassifier\nrandom = RandomForestClassifier(n_estimators = 150)\nrandom.fit(X_train,y_train)","89c4b734":"predict_random = random.predict(X_test)","6473508d":"print(classification_report(y_test,predict_random))","0f0fb295":"print(confusion_matrix(y_test,predict_random))","4aea512e":"print('Random forest accuracy is {}'.format(accuracy_score(y_test,predict_random)))","be4e12f3":"from sklearn.svm import SVC\nmodel_svm = SVC()\nmodel_svm.fit(X_train,y_train)","ea9c752a":"predict_svm = model_svm.predict(X_test)","be04c035":"print(classification_report(y_test,predict_svm))","2b7aebc6":"print(confusion_matrix(y_test,predict_svm))","ee7af488":"print(\"SVM accuracy is {}\".format(accuracy_score(y_test,predict_svm)))","59162b44":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping","998a2e04":"model_ai = Sequential()\n\nmodel_ai.add(Dense(13,activation = 'relu'))\nmodel_ai.add(Dropout(0.2))\nmodel_ai.add(Dense(9,activation = 'relu'))\nmodel_ai.add(Dropout(0.2))\n\n#Binary classification\nmodel_ai.add(Dense(1,activation = 'sigmoid'))\n\nmodel_ai.compile(loss = 'binary_crossentropy', optimizer = 'adam')\n","c0382c34":"early_stop = EarlyStopping(monitor = 'val_loss', mode = 'min', verbose =1, patience = 30)","35de2af7":"model_ai.fit(x = X_train,y = y_train, epochs = 600, validation_data=(X_test,y_test),callbacks=[early_stop])","520f7f6a":"losses = pd.DataFrame(model_ai.history.history)\nlosses.plot()","eb819614":"prediction_ai = model_ai.predict_classes(X_test)","812804eb":"print(classification_report(y_test,prediction_ai))","d6c95e4f":"print(confusion_matrix(y_test,prediction_ai))","0164fa02":"print(\"Neural Network accuracy is {}\".format(accuracy_score(y_test,prediction_ai)))","d9574020":"# --Preprocessing--","fca79571":"## Thankyou","7532d7cb":"# Decision Tree","e1304bac":"# **Outlier treatment**","3156a46b":"# Logistic Regression","4af0d855":"* ## Data Visualization","2e45ae05":"* **Loading the csv file**","31586e0e":"# K nearest neighbors","28fbea23":"# Support Vector Machine (SVM)","8167ec6b":"# Train\/Test Split","525bf433":"# Neural Network","72c3d62b":"Importing metrics module from sklearn for **classification_report, confusion matrix, accuracy score**","8c3344fd":"* ## **Simple Exploration of the data**","e2324349":"# Random Forest"}}