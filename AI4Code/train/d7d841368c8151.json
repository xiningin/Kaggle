{"cell_type":{"f33310c7":"code","87824915":"code","d00df396":"code","0b0cc46a":"code","f20ba1d0":"code","9358cd56":"code","0766b824":"code","6e86e9f5":"markdown","a4c05f6a":"markdown","191277a9":"markdown"},"source":{"f33310c7":"import pandas as pd\n\ndef determine_directions(point1, point2, size=21):\n    \"\"\" Given two points determine the closest directions to take to get to the point. \"\"\"\n    x1, y1 = point1.x, point1.y\n    x2, y2 = point2.x, point2.y\n\n    # For both x and y they are two type of paths to take\n    diff_x_1 = abs(x2 - x1)\n    diff_x_2 = abs(size - x2 + x1)\n    diff_y_1 = abs(y2 - y1)\n    diff_y_2 = abs(size - y2 + y1)\n    # Given that x1=x2 or y1=y2 then return None, so we know\n    # no movement was needed in that axis.\n    best_x, best_y = 'None', 'None'\n\n    if diff_x_1 > diff_x_2:\n        if x2 - x1 > 0:\n            best_x = \"W\"\n        elif x2 - x1 < 0:\n            best_x = \"E\"\n    else:\n        if x2 - x1 > 0:\n            best_x = \"E\"\n        elif x2 - x1 < 0:\n            best_x = \"W\"\n\n    if diff_y_1 > diff_y_2:\n        if y2 - y1 > 0:\n            best_y = \"S\"\n        elif y2 - y1 < 0:\n            best_y = \"N\"\n    else:\n        if y2 - y1 > 0:\n            best_y = \"N\"\n        elif y2 - y1 < 0:\n            best_y = \"S\"\n\n    return best_x, best_y\n\n\ndef grid(cell):\n    \"\"\" Returns a dictionary of cells which are in 10 moves distance of the given cell \"\"\"\n    # The directions that are one move away\n    north, south, west, east = cell.north, cell.south, cell.west, cell.east\n    # The directions that are two moves away\n    n2, s2, w2, e2 = north.north, south.south, west.west, east.east\n    n3, s3, w3, e3 = n2.north, s2.south, w2.west, e2.east\n    n4, s4, w4, e4 = n3.north, s3.south, w3.west, e3.east\n    n5, s5, w5, e5 = n4.north, s4.south, w4.west, e4.east\n    n6, s6, w6, e6 = n5.north, s5.south, w5.west, e5.east\n    n7, s7, w7, e7 = n6.north, s6.south, w6.west, e6.east\n    n8, s8, w8, e8 = n7.north, s7.south, w7.west, e7.east\n    n9, s9, w9, e9 = n8.north, s8.south, w8.west, e8.east\n    n10, s10, w10, e10 = n9.north, s9.south, w9.west, e9.east\n\n    return {\n        # 1 move away\n        'N': north, 'S': south, 'W': west, 'E': east,\n        # 2 moves away\n        'NW': north.west, 'NE': north.east, 'SW': south.west, 'SE': south.east, 'WW': w2, 'EE': e2, 'NN': n2, 'SS': s2,\n        # 3 moves away\n        'SSS': s3, 'EEE': e3, 'WWW': w3, 'NNN': n3,\n        'ENN': n2.east, 'WNN': n2.west, 'ESS': s2.east, 'WSS': s2.west,\n        'SEE': e2.south, 'NEE': e2.north, 'SWW': w2.south, 'NWW': w2.north,\n        # 4 moves away\n        'NNNN': n4, 'SSSS': s4, 'WWWW': w4, 'EEEE': e4,\n        'EESS': e2.south.south, 'EENN': e2.north.north, 'WWNN': w2.north.north, 'WWSS': w2.south.south,\n        'WWWS': w3.south, 'EEES': e3.south, 'EEEN': e3.north, 'WWWN': w3.north,\n        'SSSW': s3.west, 'SSSE': s3.east, 'NNNE': n3.east, 'NNNW': n3.west,\n        # 5 moves away\n        'SSSSS': s5, 'NNNNN': n5, 'WWWWW': w5, 'EEEEE': e5,\n        'WWWWN': w4.north, 'WWWWS': w4.south, 'EEEEN': e4.north, 'EEEES': e4.south,\n        'SSSSE': s4.east, 'SSSSW': s4.west, 'NNNNW': n4.west, 'NNNNE': n4.east,\n        'EESSS': s3.east.east, 'WWSSS': s3.west.west, 'EENNN': n3.east.east, 'WWNNN': n3.west.west,\n        'EEESS': e3.south.south, 'EEENN': e3.north.north, 'WWWSS': w3.south.south, 'WWWNN': w3.north.north\n    }","87824915":"class Locator:\n    \"\"\" This module returns dataframes that could be used to analyze the board much faster \"\"\"\n\n    def __init__(self, board, ship):\n        self.board = board\n        self.ship = ship\n        self.ship_position = ship.position\n        # Get the grid\n        self.grid = grid(ship.cell)\n\n    def get_ship_info(self):\n        \"\"\" Returns the info about ships in all of the board. \"\"\"\n        ships_info = {}\n\n        for ship_id, ship in self.board.ships.items():\n            base_info = {\"my_ship\": 0, \"moves\": 0, \"position\": (ship.position.x, ship.position.y),\n                         'cargo': ship.cell.halite,\n                         'dirX': (determine_directions(self.ship_position, ship.position))[0],\n                         'dirY': (determine_directions(self.ship_position, ship.position))[1],\n                         'movesX': min(abs(self.ship_position.x - ship.position.x),\n                                       abs(21 - self.ship_position.x + ship.position.x)),\n                         'movesY': min(abs(self.ship_position.y - ship.position.y),\n                                       abs(21 - self.ship_position.y + ship.position.y))}\n\n            base_info['moves'] = base_info['movesX'] + base_info['movesY']\n\n            if ship_id in self.board.current_player.ship_ids and ship.id != self.ship.id:\n                base_info['my_ship'] = 1\n                ships_info[ship_id] = base_info\n            elif not (ship_id in self.board.current_player.ship_ids):\n                ships_info[ship_id] = base_info\n\n        return pd.DataFrame(ships_info)\n\n    def get_shipyard_info(self):\n        \"\"\" Returns the info about shipyards in all of the board. \"\"\"\n        shipyards_info = {}\n\n        for shipyard_id, shipyard in self.board.shipyards.items():\n            base_info = {\"my_shipyard\": 0, \"position\": (shipyard.position.x, shipyard.position.y),\n                         'dirX': (determine_directions(self.ship_position, shipyard.position))[0],\n                         'dirY': (determine_directions(self.ship_position, shipyard.position))[1],\n                         'player_halite': shipyard.player.halite,\n                         'movesX': min(abs(self.ship_position.x - shipyard.position.x),\n                                       abs(21 - self.ship_position.x + shipyard.position.x)),\n                         'movesY': min(abs(self.ship_position.y - shipyard.position.y),\n                                       abs(21 - self.ship_position.y + shipyard.position.y))}\n\n            base_info['moves'] = base_info['movesX'] + base_info['movesY']\n\n            if shipyard_id in self.board.current_player.shipyard_ids:\n                base_info['my_shipyard'] = 1\n                shipyards_info[shipyard_id] = base_info\n            else:\n                shipyards_info[shipyard_id] = base_info\n\n        return pd.DataFrame(shipyards_info)\n\n    def generate_grid_df(self):\n        \"\"\" Generates a Dataframe describing the information of objects and cells in the grid of the ship. \"\"\"\n        all_dirs = {}\n\n        for direction, cell in self.grid.items():\n\n            base_info = {\n                \"ship_id\": None, \"shipyard_id\": None,\n                \"my_ship\": 0, \"my_shipyard\": 0,\n                \"halite\": 0, \"moves\": 0,\n                \"movesX\": 0, \"movesY\": 0,\n                \"dirY\": 'None', \"dirX\": 'None',\n                'weightX': 0, 'weightY': 0\n            }\n\n            if \"N\" in direction:\n                base_info['dirY'] = 'N'\n                base_info['movesY'] = direction.count(\"N\")\n            elif \"S\" in direction:\n                base_info['dirY'] = 'S'\n                base_info['movesY'] = direction.count(\"S\")\n\n            if \"W\" in direction:\n                base_info['dirX'] = 'W'\n                base_info['movesX'] = direction.count(\"W\")\n            elif \"E\" in direction:\n                base_info['dirX'] = 'E'\n                base_info['movesX'] = direction.count(\"E\")\n\n            if base_info['dirY'] != 'None':\n                base_info['weightY'] = 1 \/ (len(direction) ** 2 * base_info['movesY']) \n\n            if base_info['dirX'] != 'None':\n                base_info['weightX'] = 1 \/ (len(direction) ** 2 * base_info['movesX'])\n\n            if cell.ship is not None:\n                base_info[\"ship_id\"] = cell.ship.id\n                if cell.ship.id in self.ship.player.ship_ids:\n                    base_info[\"my_ship\"] = 1\n\n            if cell.shipyard is not None:\n                base_info[\"shipyard_id\"] = cell.shipyard.id\n                if cell.shipyard.id in self.ship.player.shipyard_ids:\n                    base_info['my_shipyard'] = 1\n\n            base_info['halite'] = cell.halite\n            # The number of letters in the direction would indicate the number of moves needed to get there\n            base_info['moves'] = len(direction)\n\n            all_dirs[direction] = base_info\n\n        return pd.DataFrame(all_dirs)\n","d00df396":"from kaggle_environments import make\nfrom kaggle_environments.envs.halite.helpers import *\n\n# Create a test environment for use later\nboard_size = 21\nenvironment = make(\"halite\", configuration={\"size\": board_size, \"startingHalite\": 30000}, debug=True)\nagent_count = 4\nenvironment.reset(agent_count)\nstate = environment.state[0]","0b0cc46a":"# Change the behviour of my own movement from board.current_player\nboard = Board(state.observation, environment.configuration)\n\nboard.current_player.ships[0].next_action = ShipAction.CONVERT\nboard.ships['0-2'].next_action = ShipAction.CONVERT\nboard.ships['0-3'].next_action = ShipAction.CONVERT\nboard.ships['0-4'].next_action = ShipAction.CONVERT\nboard = board.next()\n\nboard.current_player.shipyards[0].next_action = ShipyardAction.SPAWN\nboard.shipyards['1-2'].next_action = ShipyardAction.SPAWN\nboard.shipyards['1-3'].next_action = ShipyardAction.SPAWN\nboard.shipyards['1-4'].next_action = ShipyardAction.SPAWN\nboard = board.next()\n\n# Current-Player\nboard.current_player.ships[0].next_action  = ShipAction.EAST\nboard.current_player.shipyards[0].next_action = ShipyardAction.SPAWN\n# Opponents\nboard.ships['2-2'].next_action = ShipAction.NORTH\nboard.shipyards['1-2'].next_action = ShipyardAction.SPAWN\nboard.ships['2-3'].next_action = ShipAction.WEST\nboard.shipyards['1-3'].next_action = ShipyardAction.SPAWN\nboard.ships['2-4'].next_action = ShipAction.EAST\nboard.shipyards['1-4'].next_action = ShipyardAction.SPAWN\nboard = board.next()\n\n# Current-Player\nboard.current_player.ships[0].next_action  = ShipAction.NORTH\nboard.current_player.ships[1].next_action  = ShipAction.SOUTH\nboard.current_player.shipyards[0].next_action = ShipyardAction.SPAWN\n# Opponents\nboard.ships['2-2'].next_action = ShipAction.WEST\nboard.shipyards['1-2'].next_action = ShipyardAction.SPAWN\nboard.ships['2-3'].next_action = ShipAction.NORTH\nboard.shipyards['1-3'].next_action = ShipyardAction.SPAWN\nboard.ships['2-4'].next_action = ShipAction.SOUTH\nboard.shipyards['1-4'].next_action = ShipyardAction.SPAWN\nboard = board.next()\n\n# Current-Player\nboard.current_player.ships[0].next_action  = ShipAction.EAST\nboard.current_player.ships[1].next_action  = ShipAction.SOUTH\nboard.current_player.ships[2].next_action  = ShipAction.EAST\n# Opponents\nboard.ships['2-2'].next_action = ShipAction.WEST\nboard.ships['2-3'].next_action = ShipAction.EAST\nboard.ships['2-4'].next_action = ShipAction.SOUTH\nboard = board.next()\n\n# Current-Player\nboard.current_player.ships[0].next_action  = ShipAction.EAST\nboard.current_player.ships[1].next_action  = ShipAction.SOUTH\nboard.current_player.ships[2].next_action  = ShipAction.EAST\n# Opponents\nboard.ships['2-2'].next_action = ShipAction.WEST\nboard.ships['2-3'].next_action = ShipAction.EAST\nboard.ships['2-4'].next_action = ShipAction.SOUTH\nboard = board.next()\n\n# Current-Player\nboard.current_player.ships[0].next_action  = ShipAction.EAST\nboard.current_player.ships[1].next_action  = ShipAction.SOUTH\nboard.current_player.ships[2].next_action  = ShipAction.EAST\n# Opponents\nboard.ships['2-2'].next_action = ShipAction.WEST\nboard.ships['2-3'].next_action = ShipAction.EAST\nboard.ships['2-4'].next_action = ShipAction.SOUTH\nboard = board.next()\n\n# Current-Player\nboard.current_player.ships[0].next_action  = ShipAction.EAST\nboard.current_player.ships[1].next_action  = ShipAction.SOUTH\nboard.current_player.ships[2].next_action  = ShipAction.EAST\n# Opponents\nboard.ships['2-2'].next_action = ShipAction.NORTH\nboard.ships['2-3'].next_action = ShipAction.EAST\nboard.ships['2-4'].next_action = ShipAction.SOUTH\nboard = board.next()\n\nboard.current_player.ships[0].next_action = ShipAction.CONVERT\nboard = board.next()\n\nship = board.current_player.ships[0]","f20ba1d0":"grid = Locator(board, ship).generate_grid_df().T\n# Checking to see if the directions are implemented properly\ngrid.iloc[30:70, :]","9358cd56":"%%writefile \/kaggle\/working\/current.py\n\nfrom kaggle_environments.envs.halite.helpers import Board, ShipAction, ShipyardAction\nimport pandas as pd\nimport numpy as np\n\n\nclass DecisionShip:\n    \"\"\" \n        Decides ship's next move\n        params:\n            board: the board that we will base our decisions on\n            ship: the ship we are deciding for\n            step: the steps into the stimulation\n        returns:\n            determine: returns the next-action that should be taken\n    \"\"\"\n    def __init__(self, board: Board, ship_id, step):\n        self.board = board\n        self.ship = board.ships[ship_id]\n        self.step = step\n\n        # Some usefull properties\n        self.player = self.board.current_player\n        self.ship_cargo = self.ship.halite\n        self.current_cell = self.ship.cell\n        self.current_position = self.ship.position\n        \n        # All moves ship can take\n        self.moves = {\"N\": ShipAction.NORTH, 'S': ShipAction.SOUTH, 'W': ShipAction.WEST,\n                      'E': ShipAction.EAST, 'convert': ShipAction.CONVERT, 'mine': None}\n\n        # The list of moves that should not be taken\n        self.eliminated_moves = ['None']\n\n        # Weights of different moves\n        self.weights = {\"N\": 0, \"E\": 0, \"W\": 0, \"S\": 0, \"mine\": 0, \"convert\": 0, 'None': 0}\n\n        # The object's relative situation to other ship\/shipyards\n        self.locator = Locator(board, self.ship)\n        self.Ships = self.locator.get_ship_info()\n        self.Shipyards = self.locator.get_shipyard_info()\n        self.grid = self.locator.generate_grid_df()\n\n        # Closest shipyard id\n        self.closest_shipyard_id = self.closest_shipyard()\n        # Gets the distance to the closest shipyard\n        if self.closest_shipyard_id != 0:\n            self.closest_shipyard_distance = self.Shipyards[self.closest_shipyard_id]['moves']\n        else:\n            self.closest_shipyard_distance = 1\n\n        # Default move which is set to mining (None)\n        self.next_move = None\n\n        # This variable holds the direction that is being evaluated\n        self.current_direction = \"\"\n\n    def determine(self):\n        \"\"\" Returns next action decided for the ship based on the observations that have been made. \"\"\"\n        self.weight_moves()  # Calculate the weights for main four directions\n        self.round()  # Round the weights\n        self.apply_elimination()  # Apply the eliminations\n\n        # Sort the values\n        sorted_weights = {k: v for k, v in sorted(self.weights.items(), key=lambda item: item[1], reverse=True)}\n\n        # Choose the action with highest value given that it is not eliminated\n        for action in sorted_weights.keys():\n            return self.moves[action], action\n\n        # If none were chosen, then just return the default move which is mining\n        return self.next_move, 'mine'\n\n    def add_accordingly(self, value, title=\"\", loging=False):\n        \"\"\" Adds a value to directions according to their corresponding weights \"\"\"\n        dirX, dirY = self.grid[self.current_direction]['dirX'], self.grid[self.current_direction]['dirY']\n        weightX, weightY = self.grid[self.current_direction]['weightX'], self.grid[self.current_direction]['weightY']\n\n        if weightX != 0: self.weights[dirX] += value * weightX\n        if weightY != 0: self.weights[dirY] += value * weightY\n    # Add the relation with the amount of halite on the cell\n    def weight_convert(self, base_threshold=600):\n        \"\"\" Weights the option for ship conversion. \"\"\"\n        # Calculating the threshhold\n        threshold = base_threshold + 1000 * (len(self.player.shipyards) \/\/ 3)\n        \n        # 1. If they are no shipyards left\n        no_shipyards = len(self.player.shipyards) == 0\n        # 2. There will be a threshold for the amount of cargo any ship could have\n        threshhold_reach = self.ship.halite > threshold\n        # 3. On shipyard already\n        on_shipyard = self.ship.cell.shipyard is not None\n\n        if self.player.halite > 500:\n            if no_shipyards and not on_shipyard:\n                self.weights['convert'] = 1e4\n            elif self.Shipyards[self.closest_shipyard_id]['moves'] < 10 and not on_shipyard:\n                self.weights['convert'] = (self.ship_cargo - threshold) * 60\n            else:\n                self.eliminated_moves.append('convert')\n        else:\n            self.eliminated_moves.append('convert')\n\n    def weight_moves(self):\n        \"\"\"\n            This is the main function and runs other helper functions within the module to to weight the different moves that could be taken.\n\n            The weightings will take numerous considerations into account (halite, closeness to shipyard, etc.) yet there are going to be \n            some values manual multiplications in order to encourage or discourage certain moves. In order to keep things simple, the values \n            will be multiplied by a number between -10 to 10.\n\n            Now some cells are closer to the current cell and in order to put an emphasis on that, we will take into  account the fact that \n            distance would have a indirect correlation in our weighting process.\n\n            When going through the different directions on the ship's grid, they are going to be some scenarios that we should  decide for them accordingly:\n                1. If there is one of my ships: should avoid collision\n                2. If there is an enemy shipyard: depending on variables, could either runaway or attack it\n                3. If there is one of my shipyards: possibly deposit or ignore, also check for protection\n                4. If there is an enemy shipyard: depending on the situation might attack it\n        \"\"\"\n        # Weight the CONVERT option\n        self.weight_convert()\n\n        # See if any of the shipyards need defending\n        self.shipyard_status()\n\n        # Iterate through different directions\n        for direction in list(self.grid.columns):\n            # Set the global direction to the one at hand\n            self.current_direction = direction\n\n            # Get the ids just for the ease of use\n            Ship_id = self.grid[direction]['ship_id']\n            Shipyard_id = self.grid[direction]['shipyard_id']\n\n\n            # 1. Evaluate the moves based on other objects present in the map\n            # 1.1 If there was a ship\n            if not pd.isna(Ship_id):\n                # If it was my ship\n                if self.grid[direction].my_ship == 1:\n                    if self.Ships[Ship_id]['moves'] == 1:\n                        self.eliminated_moves.append(direction)\n                    else:\n                        self.distribute_ships(Ship_id)\n                else:\n                    if self.Ships[Ship_id]['moves'] == 1 and self.Ships[Ship_id]['cargo'] < self.ship_cargo:\n                        self.eliminated_moves.append(direction)\n                        self.eliminated_moves.append('mine')\n                        # Go to the closest shipyard preferably\n                        self.go_to_closest_shipyard(self.ship_cargo ** 3)\n                    else:\n                        self.deal_enemy_ship(Ship_id)\n\n            # 1.2 If there was a shipyard\n            if not pd.isna(Shipyard_id):\n                if self.grid[direction].my_shipyard == 1:\n                    self.deposit()\n                else:\n                    self.attack_enemy_shipyard(Shipyard_id)\n\n            # 2. Trigger movement in the main four direction solely based on the amount of halite each cell has\n            main_dir_encourage = 8 * self.grid[direction].halite ** 1.2\n            self.add_accordingly(main_dir_encourage, title='  main4: ', loging=False)\n\n            # 3. Either encourage mining or discourage it by adding the difference between cells to the mine\n            mining_trigger = 5 * (self.current_cell.halite - self.grid[direction].halite + 10) \/ self.grid[direction].moves\n\n            self.weights['mine'] += mining_trigger\n\n        # The correlation of the mining with cell's halite\n        self.weights['mine'] += self.current_cell.halite ** 2.5\n\n    def distribute_ships(self, ship_id):\n        \"\"\" This function lowers the ships tendency to densely populate an area \"\"\"\n        distribution_encouragement = -10 * abs(self.ship_cargo - self.Ships[ship_id].cargo) \/ self.Ships[ship_id].moves\n\n        self.add_accordingly(distribution_encouragement, title='Distribution', loging=False)\n\n    def deal_enemy_ship(self, ship_id):\n        \"\"\" This function will evaluate to either attack or get_away from an enemy ship based on the \n        simple observation: If my ship had more cargo then I should not attack. \"\"\"\n        # If the ship's cargo was more than enemy's cargo and it was not equal to zero then get away otherwise attack\n        if self.ship_cargo > self.Ships[ship_id].cargo + 0.4 * self.grid[self.current_direction]['halite'] and self.ship_cargo != 0:\n            self.get_away(cargo_diff=abs(self.Ships[ship_id].cargo - self.ship_cargo))\n        else:\n            self.attack_enemy_ship(self.Ships[ship_id].cargo - self.ship_cargo)\n\n    def attack_enemy_ship(self, diff):\n        \"\"\" This function encourages attacking the enemy ship \"\"\"\n        attack_encouragement = 10 * (diff + 1) ** 2 \/ (self.closest_shipyard_distance + 0.1)\n        self.add_accordingly(attack_encouragement, title='Attacking-Enemy-Ship', loging=False)\n\n    def get_away(self, cargo_diff=0):\n        \"\"\" This function is called when my ship needs to get away from a ship which might be following it \"\"\"\n        # 1. Directly discouraging the movement\n        if len(self.current_direction) == 2:\n            # When the enemy ship is two moves away, there should be a strong discouragement\n            direction_discouragement = -10 * (self.ship.halite + 10) ** 5\n        else:\n            direction_discouragement = -10 * cargo_diff\n        self.add_accordingly(direction_discouragement, title='Get-Away', loging=False)\n\n        # 2. Encouraging going to the closest shipyard\n        closest_shipyard_encouragement = cargo_diff \/ self.grid[self.current_direction]['moves']\n        self.go_to_closest_shipyard(closest_shipyard_encouragement)\n\n    def deposit(self):\n        \"\"\" Weights the tendency to deposit and adds to the directions which lead to the given shipyard \"\"\"\n        if self.near_end():\n            deposit_tendency = self.ship_cargo ** 4\n        else:\n            deposit_tendency = 10 * self.ship_cargo ** (1.2 + 2 * self.step \/\/ 390)\n        self.add_accordingly(deposit_tendency, title='Deposit', loging=False)\n\n    def attack_enemy_shipyard(self, shipyard_id):\n        \"\"\" Weights the tendency to attack the enemy shipyard. \"\"\"\n        if len(self.player.ships) >= 2 and self.player.halite > 700 and self.ship_cargo < 30 and self.closest_shipyard_distance < 5:\n            destory_shipyard = 1e4 \/ len(self.current_direction)\n            self.add_accordingly(destory_shipyard, title='Destroy_en_shipyard', loging=False)\n        elif len(self.current_direction) == 1 and self.ship_cargo > 100:\n            self.eliminated_moves.append(self.current_direction)\n\n    def go_to_closest_shipyard(self, value):\n        \"\"\" Encourage movement towards the nearest shipyard \"\"\"\n        if self.closest_shipyard_id != 0:\n            dirX, dirY = self.Shipyards[self.closest_shipyard_id]['dirX'], self.Shipyards[self.closest_shipyard_id]['dirY']\n            \n            self.weights[dirX] += value\n            self.weights[dirY] += value\n\n    def shipyard_status(self):\n        \"\"\" Measures tendency for the shipyards within the map \"\"\"\n        if not self.Shipyards.empty:\n            for shipyard in self.player.shipyards:\n                self.analyze_shipyard_surroundings(shipyard.id)\n\n    def analyze_shipyard_surroundings(self, shipyard_id):\n        \"\"\" Checks to see if a given shipyard needs protection or not? \"\"\"\n        shipyard = self.board.shipyards[shipyard_id]\n        dirX, dirY = self.Shipyards[shipyard_id]['dirX'], self.Shipyards[shipyard_id]['dirY']\n        value = 0\n        shipyard_grid = Locator(self.board, shipyard).generate_grid_df()\n\n        for direction in list(shipyard_grid.columns):\n            ship_id = shipyard_grid[direction].ship_id\n            # If there is a ship on that cell\n            if not pd.isna(ship_id):\n                if shipyard_grid[direction].my_ship == 1:\n                    value += -1e4 \/ shipyard_grid[direction]['moves'] ** 2\n                else:\n                    value += 1e4 \/ shipyard_grid[direction]['moves'] ** 2\n\n        if value > 0:\n            # More concenteration on the closest shipyard\n            if shipyard_id == self.closest_shipyard_id: value *= 2\n            \n            self.weights[dirX] += value\n            self.weights[dirY] += value\n\n            # log('  Shipyard status: ' + str(shipyard.position) + ', adding: ' + str(round(value, 3)) + ' to ' + dirX + ', ' + dirY)\n        \n    def closest_shipyard(self):\n        \"\"\" Returns the closest shipyard's id. \"\"\"\n        shipyard_id = 0  # The default value would be zero meaning that they either no shipyard or I did not have any\n        # First we should check to see if there are any Shipyards at all\n        if not self.Shipyards.empty:\n            # Then we should check to see if I have any shipyards\n            if not self.Shipyards.T[self.Shipyards.T['my_shipyard'] == 1].empty:\n                shipyard_id = self.Shipyards.T[self.Shipyards.T['my_shipyard'] == 1]['moves'].astype('int').idxmin()\n\n        return shipyard_id\n\n    def near_end(self):\n        \"\"\" Determines if the game is about to end so the ships with halite can convert to shipyard and maximum the halite we will end up with. \"\"\"\n        count = 0\n\n        # If the halite was less than 500 and it had no ships\n        for opp in self.board.opponents:\n            if opp.halite < 500 and len(opp.ships) == 0 and self.player.halite > opp.halite: count += 1\n            if opp.halite > 2000 and len(opp.ships) > 1: count -= 1\n\n        # If count was more than 2 return True\n        return count >= 2\n\n    def apply_elimination(self):\n        \"\"\" Eliminates the moves to be eliminated. \"\"\"\n        for move in self.eliminated_moves:\n            if move in self.weights.keys():\n                del self.weights[move]\n\n    def round(self):\n        \"\"\" This functions rounds the  weights so they can be easily printed \"\"\"\n        self.weights['mine'] = round(self.weights['mine'], 1)\n        self.weights['N'] = round(self.weights['N'], 1)\n        self.weights['S'] = round(self.weights['S'], 1)\n        self.weights['E'] = round(self.weights['E'], 1)\n        self.weights['W'] = round(self.weights['W'], 1)\n        self.weights['convert'] = round(self.weights['convert'], 1)\n\n\nclass ShipyardDecisions:\n    def __init__(self, board: Board, player, step):\n        \"\"\"\n            Decides the Shipyard's next action based on the given parameters\n            board: The board that we will be observing\n            step: step of the stimulation\n        \"\"\"\n        self.board = board\n        self.player_halite = player.halite\n        self.step = step\n        self.Shipyards = player.shipyards\n        self.shipyard_tendencies = {}\n\n    def determine(self):\n        \"\"\" Determines which shipyards should SPAWN, returns a dictionary of id: 'SPAWN' \"\"\"\n        self.weight_shipyard_tendencies()\n        sorted_weights = {k: v for k, v in\n                          sorted(self.shipyard_tendencies.items(), key=lambda item: item[1], reverse=True)}\n        \n        shipyard_ids = []\n        for shipyard_id, tendency in sorted_weights.items():\n            if tendency > 0 and self.player_halite >= 500:\n                shipyard_ids.append(shipyard_id)\n\n        return shipyard_ids\n\n    def weight_shipyard_tendencies(self):\n        \"\"\" Iterates through the shipyards and weights their tendencies. \"\"\"\n        for shipyard in self.Shipyards:\n            # Weighting will take place only when there are no ships on the cell\n            if shipyard.cell.ship is None:\n                grid = Locator(self.board, shipyard).generate_grid_df()\n                weight = self.weight(grid)\n\n                self.shipyard_tendencies[shipyard.id] = weight\n\n    def weight(self, grid):\n        \"\"\"\n            Weights shipyard's tendency to spawn solely based on the objects around it\n            The weighting system is rather simple:\n                - If there was an enemy ship add to the weight\n                - If there was one of my own ships, then subtract from the weight\n            Take the distance of the ship into account\n        \"\"\"\n        if len(self.board.current_player.ships) == 0:\n            return 10\n        if self.step < 70 and self.player_halite > 500 + 500 * (self.step \/\/ 50):\n            return 10\n\n        value = 0\n        # Iterating through the grid\n        for direction in grid.columns:\n            if not pd.isna(grid[direction].ship_id):\n                if grid[direction].my_ship == 1:\n                    value -= 100 \/ grid[direction]['moves']\n                else:\n                    value += 100 \/ grid[direction]['moves']\n                    # If there was an enemy ship one move away from my shipyard then spawn\n                    if grid[direction]['moves'] == 1 and self.player_halite > 500: \n                        value += 1e3 \n\n            if not pd.isna(grid[direction].shipyard_id):\n                if grid[direction].my_shipyard == 0:\n                    value += 200 \/ grid[direction]['moves']\n\n        return round(value, 2)\n\n\nclass Locator:\n    \"\"\" This module returns dataframes that could be used to analyze the board much faster \"\"\"\n\n    def __init__(self, board, ship):\n        self.board = board\n        self.ship = ship\n        self.ship_position = ship.position\n        # Get the grid\n        self.grid = grid(ship.cell)\n\n    def get_ship_info(self):\n        \"\"\" Returns the info about ships in all of the board. \"\"\"\n        ships_info = {}\n\n        for ship_id, ship in self.board.ships.items():\n            base_info = {\"my_ship\": 0, \"moves\": 0, \"position\": (ship.position.x, ship.position.y),\n                         'cargo': ship.cell.halite,\n                         'dirX': (determine_directions(self.ship_position, ship.position))[0],\n                         'dirY': (determine_directions(self.ship_position, ship.position))[1],\n                         'movesX': min(abs(self.ship_position.x - ship.position.x),\n                                       abs(21 - self.ship_position.x + ship.position.x)),\n                         'movesY': min(abs(self.ship_position.y - ship.position.y),\n                                       abs(21 - self.ship_position.y + ship.position.y))}\n\n            base_info['moves'] = base_info['movesX'] + base_info['movesY']\n\n            if ship_id in self.board.current_player.ship_ids and ship.id != self.ship.id:\n                base_info['my_ship'] = 1\n                ships_info[ship_id] = base_info\n            elif not (ship_id in self.board.current_player.ship_ids):\n                ships_info[ship_id] = base_info\n\n        return pd.DataFrame(ships_info)\n\n    def get_shipyard_info(self):\n        \"\"\" Returns the info about shipyards in all of the board. \"\"\"\n        shipyards_info = {}\n\n        for shipyard_id, shipyard in self.board.shipyards.items():\n            base_info = {\"my_shipyard\": 0, \"position\": (shipyard.position.x, shipyard.position.y),\n                         'dirX': (determine_directions(self.ship_position, shipyard.position))[0],\n                         'dirY': (determine_directions(self.ship_position, shipyard.position))[1],\n                         'player_halite': shipyard.player.halite,\n                         'movesX': min(abs(self.ship_position.x - shipyard.position.x),\n                                       abs(21 - self.ship_position.x + shipyard.position.x)),\n                         'movesY': min(abs(self.ship_position.y - shipyard.position.y),\n                                       abs(21 - self.ship_position.y + shipyard.position.y))}\n\n            base_info['moves'] = base_info['movesX'] + base_info['movesY']\n\n            if shipyard_id in self.board.current_player.shipyard_ids:\n                base_info['my_shipyard'] = 1\n                shipyards_info[shipyard_id] = base_info\n            else:\n                shipyards_info[shipyard_id] = base_info\n\n        return pd.DataFrame(shipyards_info)\n\n    def generate_grid_df(self):\n        \"\"\" Generates a Dataframe describing the information of objects and cells in the grid of the ship. \"\"\"\n        all_dirs = {}\n\n        for direction, cell in self.grid.items():\n\n            base_info = {\n                \"ship_id\": None, \"shipyard_id\": None,\n                \"my_ship\": 0, \"my_shipyard\": 0,\n                \"halite\": 0, \"moves\": 0,\n                \"movesX\": 0, \"movesY\": 0,\n                \"dirY\": 'None', \"dirX\": 'None',\n                'weightX': 0, 'weightY': 0\n            }\n\n            if \"N\" in direction:\n                base_info['dirY'] = 'N'\n                base_info['movesY'] = direction.count(\"N\")\n            elif \"S\" in direction:\n                base_info['dirY'] = 'S'\n                base_info['movesY'] = direction.count(\"S\")\n\n            if \"W\" in direction:\n                base_info['dirX'] = 'W'\n                base_info['movesX'] = direction.count(\"W\")\n            elif \"E\" in direction:\n                base_info['dirX'] = 'E'\n                base_info['movesX'] = direction.count(\"E\")\n\n            if base_info['dirY'] != 'None':\n                base_info['weightY'] = 1 \/ (len(direction) ** 2 * base_info['movesY']) \n\n            if base_info['dirX'] != 'None':\n                base_info['weightX'] = 1 \/ (len(direction) ** 2 * base_info['movesX']) \n\n            if cell.ship is not None:\n                base_info[\"ship_id\"] = cell.ship.id\n                if cell.ship.id in self.ship.player.ship_ids:\n                    base_info[\"my_ship\"] = 1\n\n            if cell.shipyard is not None:\n                base_info[\"shipyard_id\"] = cell.shipyard.id\n                if cell.shipyard.id in self.ship.player.shipyard_ids:\n                    base_info['my_shipyard'] = 1\n\n            base_info['halite'] = cell.halite\n            # The number of letters in the direction would indicate the number of moves needed to get there\n            base_info['moves'] = len(direction)\n\n            all_dirs[direction] = base_info\n\n        return pd.DataFrame(all_dirs)\n\n\n####################\n# Helper Functions #\n####################\ndef determine_directions(point1, point2, size=21):\n    \"\"\" Given two points determine the closest directions to take to get to the point. \"\"\"\n    x1, y1 = point1.x, point1.y\n    x2, y2 = point2.x, point2.y\n\n    # For both x and y they are two type of paths to take\n    diff_x_1 = abs(x2 - x1)\n    diff_x_2 = abs(size - x2 + x1)\n    diff_y_1 = abs(y2 - y1)\n    diff_y_2 = abs(size - y2 + y1)\n    # Given that x1=x2 or y1=y2 then return None, so we know\n    # no movement was needed in that axis.\n    best_x, best_y = 'None', 'None'\n\n    if diff_x_1 > diff_x_2:\n        if x2 - x1 > 0:\n            best_x = \"W\"\n        elif x2 - x1 < 0:\n            best_x = \"E\"\n    else:\n        if x2 - x1 > 0:\n            best_x = \"E\"\n        elif x2 - x1 < 0:\n            best_x = \"W\"\n\n    if diff_y_1 > diff_y_2:\n        if y2 - y1 > 0:\n            best_y = \"S\"\n        elif y2 - y1 < 0:\n            best_y = \"N\"\n    else:\n        if y2 - y1 > 0:\n            best_y = \"N\"\n        elif y2 - y1 < 0:\n            best_y = \"S\"\n\n    return best_x, best_y\n\n\ndef grid(cell):\n    \"\"\" Returns a dictionary of cells which are in 10 moves distance of the given cell \"\"\"\n    # The directions that are one move away\n    north, south, west, east = cell.north, cell.south, cell.west, cell.east\n    # The directions that are two moves away\n    n2, s2, w2, e2 = north.north, south.south, west.west, east.east\n    n3, s3, w3, e3 = n2.north, s2.south, w2.west, e2.east\n    n4, s4, w4, e4 = n3.north, s3.south, w3.west, e3.east\n    n5, s5, w5, e5 = n4.north, s4.south, w4.west, e4.east\n\n    return {\n        # 1 move away\n        'N': north, 'S': south, 'W': west, 'E': east,\n        # 2 moves away\n        'NW': north.west, 'NE': north.east, 'SW': south.west, 'SE': south.east, 'WW': w2, 'EE': e2, 'NN': n2, 'SS': s2,\n        # 3 moves away\n        'SSS': s3, 'EEE': e3, 'WWW': w3, 'NNN': n3,\n        'ENN': n2.east, 'WNN': n2.west, 'ESS': s2.east, 'WSS': s2.west,\n        'SEE': e2.south, 'NEE': e2.north, 'SWW': w2.south, 'NWW': w2.north,\n        # 4 moves away\n        'NNNN': n4, 'SSSS': s4, 'WWWW': w4, 'EEEE': e4,\n        'EESS': e2.south.south, 'EENN': e2.north.north, 'WWNN': w2.north.north, 'WWSS': w2.south.south,\n        'WWWS': w3.south, 'EEES': e3.south, 'EEEN': e3.north, 'WWWN': w3.north,\n        'SSSW': s3.west, 'SSSE': s3.east, 'NNNE': n3.east, 'NNNW': n3.west,\n        # # 5 moves away\n        'SSSSS': s5, 'NNNNN': n5, 'WWWWW': w5, 'EEEEE': e5,\n        'WWWWN': w4.north, 'WWWWS': w4.south, 'EEEEN': e4.north, 'EEEES': e4.south,\n        'SSSSE': s4.east, 'SSSSW': s4.west, 'NNNNW': n4.west, 'NNNNE': n4.east,\n        'EESSS': s3.east.east, 'WWSSS': s3.west.west, 'EENNN': n3.east.east, 'WWNNN': n3.west.west,\n        'EEESS': e3.south.south, 'EEENN': e3.north.north, 'WWWSS': w3.south.south, 'WWWNN': w3.north.north\n    }\n\nmovement_dictionary = {\"S\": \"SOUTH\", 'N': 'NORTH', 'W': 'WEST', 'E': 'EAST', 'convert': 'CONVERT'}\n\nimport operator\ndef agent(obs, config):\n    # Another for updates\n    board = Board(obs, config)\n\n    # Step of the board\n    step = board.observation['step']\n\n    ships = [ship.id for ship in sorted(board.current_player.ships, key=operator.attrgetter(\"halite\"), reverse=True)]\n    actions = {}\n\n\n    for ship_id in ships:\n        if ship_id in board.current_player.ship_ids:\n                \n            next_action, action_type = DecisionShip(board, ship_id, step).determine()\n                \n            if action_type != 'mine':\n                actions[ship_id] = movement_dictionary[action_type]\n                board.ships[ship_id].next_action = next_action\n                    \n            board = board.next()\n\n    shipyard_ids = ShipyardDecisions(board, board.current_player, step).determine()\n\n    for shipyard_id in board.current_player.shipyard_ids:\n        if shipyard_id in shipyard_ids:\n            actions[shipyard_id] = 'SPAWN'\n            board.shipyards[shipyard_id].next_action = ShipyardAction.SPAWN\n            \n            board = board.next()\n        \n    return actions\n","0766b824":"from kaggle_environments import make\nfrom kaggle_environments.envs.halite.helpers import *\n\nenv = make(\"halite\", debug=True)\nenv.run(['\/kaggle\/input\/mockagents\/agent_c.py', \"\/kaggle\/working\/current.py\", '\/kaggle\/input\/mockagents\/agent_b.py', '\/kaggle\/input\/mockagents\/agent_a.py'])\nenv.render(mode=\"ipython\", width=800, height=600)","6e86e9f5":"#### A mock agent I used for one of my previous submission:","a4c05f6a":"## Helper functions:\n- Determine which directions are closer from point1 to point2\n- The grid function gets the cells in 10 moves from a given cell","191277a9":"## Helper Module\nThis module locates different cell with their corresponding properties which makes it easier to analyze the map for each individual ship."}}