{"cell_type":{"9ff2603a":"code","4c4eeb54":"code","eeff85bd":"code","59db5442":"code","fb73d01a":"code","290774f5":"code","10ddb0d6":"code","924a8bf1":"code","c5cd94a9":"code","b5e71b56":"code","e3ddb4f0":"code","67272403":"code","fa60091e":"code","72f292d9":"code","299ddc1c":"code","af94f5b8":"markdown","f1f3084e":"markdown","39fa7239":"markdown","5b8ac7a4":"markdown","6c5f690c":"markdown","c94fa629":"markdown"},"source":{"9ff2603a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n# Ctrl + Shift + P\nimport os\nprint(os.listdir(\"..\/input\"))\n\ntoy = True\n# Any results you write to the current directory are saved as output.","4c4eeb54":"from kaggle.competitions import twosigmanews\nenv = twosigmanews.make_env()\n\n(market_train_df, news_train_df) = env.get_training_data()\n\n# train_my_model(market_train_df, news_train_df)","eeff85bd":"print(market_train_df.shape, news_train_df.shape)\nprint(market_train_df.columns)\nprint(news_train_df.columns)","59db5442":"# We will reduce the number of samples for memory reasons\ntoy = False\n\nif toy:\n    market_train_df = market_train_df.tail(100)\n    news_train_df = news_train_df.tail(300)\nelse:\n    market_train_df = market_train_df.tail(3_000_000)\n    news_train_df = news_train_df.tail(6_000_000)\n\n","fb73d01a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom itertools import chain\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeClassifier\n\n","290774f5":"\nmarket_train_df['time'] = market_train_df['time'].dt.floor('1D')\nmarket_train_df = market_train_df.reset_index(drop=True)\n","10ddb0d6":"# market_train_df.head(5)\n\nX_pruned = market_train_df[['returnsOpenPrevMktres10', 'returnsOpenPrevMktres1']]\nY_pruned = market_train_df[['returnsOpenNextMktres10']]\n\nstart_test_data = int(0.8 * market_train_df.shape[0])\nX_train = X_pruned.iloc[:start_test_data]\nY_train = Y_pruned.iloc[:start_test_data]\n\nX_test = X_pruned.iloc[start_test_data:].reset_index(drop=True)\nY_test = Y_pruned.iloc[start_test_data:].reset_index(drop=True)\nY_test_metadata = market_train_df.iloc[-start_test_data:][['time', 'universe']].reset_index(drop=True)\n\n","924a8bf1":"#Hyperparameter : threshold\ndef clipY(Y):\n    Y[(Y['returnsOpenNextMktres10'] > 1.0)]  = 1.0\n    Y[(Y['returnsOpenNextMktres10'] < -1.0)]  = -1.0\n    return Y\n\ndef train_model(X, Y, **kwargs):\n    linreg = LinearRegression()\n    X = X.ffill()\n    linreg.fit(X, Y)\n    return linreg\n\ndef overridden_predict(trained_model, X_test):\n    X_test = X_test.ffill()\n    y_pred = trained_model.predict(X_test)\n    y_pred = pd.DataFrame({'confidenceValue':y_pred})\n    return y_pred\n\ndef sigma_score(Y_pred, Y_test):\n    score = Y_pred['confidenceValue'] * Y_test['returnsOpenNextMktres10'] * Y_test_metadata['universe']\n    score = score.to_frame('score')\n    score['time'] = Y_test_metadata['time'].values\n    score_per_day = score.groupby('time').sum()\n    try:\n        sigma_score = score_per_day['score'].mean() \/ score_per_day['score'].std()\n    except:\n        sigma_score = 0.0\n        \n    return sigma_score\n","c5cd94a9":"# positive_threshold = [0.05, 0.075, 0.1]\n# negative_threshold = [0.05, 0.075, 0.1]\n# depth_levels = [3, 5, 9, 15, 19, None]\n# max_sig_score = -100\n# for pthresh in positive_threshold:\n#     for nthresh in negative_threshold:\n#         for max_depth in depth_levels:\n#             Y_train_modified = Y_train.copy()\n#             kwargs = {'max_depth':max_depth}\n#             Y_train_modified = assignConfidence(pthresh, nthresh, Y_train_modified)\n#             trained_model = train_model(X_train, Y_train_modified, **kwargs)\n#             Y_pred = overridden_predict(trained_model, X_test)\n#             sig_score = sigma_score(Y_pred=Y_pred, Y_test=Y_test)\n#             print(\"Sigma score for phresh, nthresh and max depth is \" + '{} {} {} '.format(pthresh, nthresh, max_depth)+\n#                  \"{}\".format(sig_score))\n#             print(trained_model.get_params()['max_depth'])\n#             if sig_score > max_sig_score:\n#                 best_pthresh = pthresh\n#                 best_nthresh = nthresh\n#                 if max_depth:\n#                     best_max_depth = min(max_depth, trained_model.get_params()['max_depth'])\n#                 else:\n#                     best_max_depth = trained_model.get_params()['max_depth']\n#                 max_sig_score = sig_score\n\n# print(\"The best parameters are pthresh, nthresh and max depth are \" + '{} {} {} '.format(best_pthresh, best_nthresh, best_max_depth))\n\n","b5e71b56":"Y = pd.concat([Y_train, Y_test])\nX = pd.concat([X_train, X_test])","e3ddb4f0":"\nY = pd.concat([Y_train, Y_test])\nY_modified = Y.copy()\nclipY(Y_modified)\ntrained_model = train_model(X, Y_modified)\n# sig_score = sigma_score(Y_pred=Y, Y_test=Y_test)","67272403":"def make_predictions(trained_model,predictions_template_df, market_obs_df, news_obs_df):\n    sample = market_obs_df[['returnsOpenPrevMktres10', 'returnsOpenPrevMktres1']]\n    sample = sample.ffill()\n#     y_pred = lm.predict(sample)\n    y_pred = trained_model.predict(sample)\n    predictions_template_df.confidenceValue = y_pred.clip(-1, 1)\n","fa60091e":"days = env.get_prediction_days()\n","72f292d9":"for (market_obs_df, news_obs_df, predictions_template_df) in days:\n    make_predictions(trained_model, predictions_template_df, market_obs_df, news_obs_df)\n    env.predict(predictions_template_df)\n\nprint('Done!')\n\n","299ddc1c":"env.write_submission_file()\nprint(\"Fourth run\")","af94f5b8":"The below cell;\nInput: X test data \nOutput : A dataframe with \"confidence values''","f1f3084e":"We take the best parameters and build our model. We have to join the training and testing set together as we don't want to loose the training on the testing set.","39fa7239":"This marks the end of the part where we get the data and divide into the train and test samples.","5b8ac7a4":"This serves as a boundary between the training and the actual submission.","6c5f690c":"In the below cell, we assign a confidence value +1 for 'returnsOpenNextMktres10' > threshold and -1 for 'returnsOpenNextMktres10' < threshold","c94fa629":"* X_pruned only contains the labels 'returnsOpenPrevMktres10' and 'returnsOpenPrevMktres1'.\n* Y_pruned is the lable containing the forward looking return."}}