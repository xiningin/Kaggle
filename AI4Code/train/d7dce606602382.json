{"cell_type":{"dc6513e8":"code","609c4408":"code","17b687da":"code","c44e994a":"code","ee22c7b4":"code","3e3c02b4":"code","0df6e7ea":"code","1955c33b":"markdown","ee1cf320":"markdown","467b47cb":"markdown","9ec7782a":"markdown","18f3e95b":"markdown","ead1109a":"markdown"},"source":{"dc6513e8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nimport datetime as dt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","609c4408":"df = pd.read_csv(\"\/kaggle\/input\/apple-stock-price-all-time\/Apple.csv\")\ndf.info()\nprint(\"\\n\\n\")\ndf[\"Date\"] = pd.to_datetime(df[\"Date\"])\ndf.info()\nprint(\"\\n\\n\")\ndf.describe()","17b687da":"x = df[\"Date\"].values.reshape(-1, 1)\ny = df[\"Close\"].values.reshape(-1, 1)\nx","c44e994a":"x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.8, test_size=0.2, random_state=100)\nprint(f\"x train date shape: {x_train.shape}\")\nprint(f\"y train date shape: {y_train.shape}\")\nprint(f\"x train date shape: {x_test.shape}\")\nprint(f\"y train date shape: {x_test.shape}\")\nx_test","ee22c7b4":"plt.scatter(x_train, y_train, color=\"green\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Close\")\nplt.title(\"Training Apple stock price data\")\nplt.show()","3e3c02b4":"lm = LinearRegression()\nlm.fit(x_train, y_train)\n# to do: x_test data type cause a problem, will take a look at the issue later\nx_test = x_test.astype(\"object\")\nx_train = x_train.astype(\"object\")\ny_predict = lm.predict(x_test)\n\nlm.score(x_train, y_train)\nprint(f\"Train Accuracy: {round(lm.score(x_train, y_train) * 100, 2)}%\")\nprint(f\"Test Accuracy: {round(lm.score(x_test, y_test) * 100, 2)}%\")","0df6e7ea":"plt.scatter(x_train, y_train, color=\"green\")\nplt.plot(x_test, y_predict)\nplt.xlabel(\"Date\")\nplt.ylabel(\"Close\")\nplt.title(\"Apple Stock Price\")\nplt.show()","1955c33b":"## Split data into train and test portions","ee1cf320":"## Prediction","467b47cb":"## Plot scatter chart","9ec7782a":"## Load the dataset and convert it to Pandas DataFrame; Convert date data type from object to datetime","18f3e95b":"## Fit training split to the regression model and show model score","ead1109a":"## Get \"Date\" for x and \"Close\" for y and reshape x and y for processing data later "}}