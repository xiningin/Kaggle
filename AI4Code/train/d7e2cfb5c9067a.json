{"cell_type":{"afce9b92":"code","260a7454":"code","62eda687":"code","4560ab35":"code","e1edd700":"code","7e5b1d84":"code","ae28a172":"code","33f106c0":"code","a2eae5a4":"code","f1a99f55":"code","6150b03e":"code","1bbabd3b":"code","74e58599":"code","3d7b3c10":"code","b7c5eaf8":"markdown","fe65649a":"markdown","0a9e290e":"markdown","37c12608":"markdown","a96f0bd7":"markdown","5035019a":"markdown"},"source":{"afce9b92":"import matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport plotly.express as px\nimport sqlite3 as sq","260a7454":"df = pd.read_csv(\"..\/input\/2020-conferences-cancelled-due-to-coronavirus\/2020 Conferences Cancelled Due to Coronavirus - Sheet1.csv\")","62eda687":"df.head()","4560ab35":"x = df['Country'].value_counts()\nx = pd.DataFrame(x)\nx.style.background_gradient(cmap='Reds')","e1edd700":"x = df['Venue'].value_counts()\nx = pd.DataFrame(x)\nx.style.background_gradient(cmap='Reds')","7e5b1d84":"x = df['Status'].value_counts()\nx = pd.DataFrame(x)\nx.style.background_gradient(cmap='Greens')","ae28a172":"def highlight_max(s):\n    '''\n    highlight the maximum in a Series yellow.\n    '''\n    is_max = s == s.max()\n    return ['background-color: yellow' if v else '' for v in is_max]","33f106c0":"df.style.apply(highlight_max)","a2eae5a4":"def highlight_min(s):\n    '''\n    highlight the minimum in a series blanched almond (no, I do not know what that is).\n    '''\n    is_max = s == s.min()\n    return ['background-color: blanchedalmond' if v else '' for v in is_max]","f1a99f55":"df.style.apply(highlight_min)","6150b03e":"import pandas as pd\nfrom IPython.display import HTML\n\n# Test series\ntest1 = pd.Series([-100,-60,-30,-20], name='All Negative')\ntest2 = pd.Series([10,20,50,100], name='All Positive')\ntest3 = pd.Series([-10,-5,0,90], name='Both Pos and Neg')\n\nhead = \"\"\"\n<table>\n    <thead>\n        <th>Align<\/th>\n        <th>All Negative<\/th>\n        <th>All Positive<\/th>\n        <th>Both Neg and Pos<\/th>\n    <\/thead>\n    <\/tbody>\n\n\"\"\"\n\naligns = ['left','zero','mid']\nfor align in aligns:\n    row = \"<tr><th>{}<\/th>\".format(align)\n    for serie in [test1,test2,test3]:\n        s = serie.copy()\n        s.name=''\n        row += \"<td>{}<\/td>\".format(s.to_frame().style.bar(align=align,\n                                                           color=['#d65f5f', '#5fba7d'],\n                                                           width=100).render()) #testn['width']\n    row += '<\/tr>'\n    head += row\n\nhead+= \"\"\"\n<\/tbody>\n<\/table>\"\"\"","1bbabd3b":"HTML(head)","74e58599":"# Interactivity\ndef magnify():\n    return [dict(selector=\"th\",\n                 props=[(\"font-size\", \"4pt\")]),\n            dict(selector=\"td\",\n                 props=[('padding', \"0em 0em\")]),\n            dict(selector=\"th:hover\",\n                 props=[(\"font-size\", \"12pt\")]),\n            dict(selector=\"tr:hover td:hover\",\n                 props=[('max-width', '200px'),\n                        ('font-size', '12pt')])\n]","3d7b3c10":"np.random.seed(25)\ncmap = cmap=sns.diverging_palette(5, 250, as_cmap=True)\nbigdf = pd.DataFrame(np.random.randn(20, 25)).cumsum()\n\nbigdf.style.background_gradient(cmap, axis=1)\\\n    .set_properties(**{'max-width': '80px', 'font-size': '1pt'})\\\n    .set_caption(\"Hover to magnify\")\\\n    .set_precision(2)\\\n    .set_table_styles(magnify())","b7c5eaf8":"## Imports and reading in data","fe65649a":"*Credit: pandas.pydata.org*","0a9e290e":"# Part 1: Simple colormaps","37c12608":"# Styling Data Frames: COVID-19 vs Conferences\n\nCredit to @parulpandey for the respective dataset.","a96f0bd7":"# Part 2: More detailed colormaps","5035019a":"# Part 3: More intricate displays"}}