{"cell_type":{"3179ad86":"code","42a5789f":"code","40c5f0e0":"code","c6fe24f8":"code","4d03c256":"code","4ae2c111":"code","f64aa1a1":"code","c6d7cee5":"code","a17040b2":"code","d5554598":"code","ed38820b":"code","e651f368":"markdown","70c5b79e":"markdown","4c42e8f9":"markdown","92f1fd7c":"markdown","b45f238a":"markdown","ca2b7444":"markdown","4ab9a01e":"markdown","3fa25dca":"markdown","6db45b48":"markdown"},"source":{"3179ad86":"#version8.0\n#BumBelBee\n#!pip install imutils","42a5789f":"import numpy as np\nimport cv2\n#import imutils\nimport csv\nimport argparse\nimport glob\nimport math\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport sys\n","40c5f0e0":"#Variables\n#ColorDiscripteur\nbins = (8, 12, 3)\n#Sercher\nindexPath = \"index001.csv\"\nindexTestPath = \"index_test.csv\"\n\ndatabasePath = \"DB2C\"\n\n#colorDiscripteur\ndef describe(image):\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n    features = []\n    (h, w) = image.shape[:2]\n    (cX, cY) = (int(w * 0.5), int(h * 0.5))\n    segments = [(0, cX, 0, cY), (cX, w, 0, cY), (cX, w, cY, h),\n        (0, cX, cY, h)]\n    (axesX, axesY) = (int(w * 0.75) \/\/ 2, int(h * 0.75) \/\/ 2)\n    ellipMask = np.zeros(image.shape[:2], dtype = \"uint8\")\n    cv2.ellipse(ellipMask, (cX, cY), (axesX, axesY), 0, 0, 360, 255, -1)\n\n    for (startX, endX, startY, endY) in segments:\n        cornerMask = np.zeros(image.shape[:2], dtype = \"uint8\")\n        cv2.rectangle(cornerMask, (startX, startY), (endX, endY), 255, -1)\n        cornerMask = cv2.subtract(cornerMask, ellipMask)\n        hist = histogram(image, cornerMask)\n        features.extend(hist)\n    hist = histogram(image, ellipMask)\n    features.extend(hist)\n\n    return features\n\ndef histogram(image, mask):\n    hist = cv2.calcHist([image], [0, 1, 2], mask, bins,\n        [0, 180, 0, 256, 0, 256])\n    if imutils.is_cv2():\n        hist = cv2.normalize(hist).flatten()\n    else:\n        hist = cv2.normalize(hist, hist).flatten()\n\n    return hist\n\n#Sercher\ndef search(queryFeatures, limit = 3):\n    results = {}\n    with open(indexPath) as f:\n        reader = csv.reader(f)\n\n        for row in reader:\n            features = [float(x) for x in row[1:]]\n            d = chi2_distance(features, queryFeatures)\n            results[row[0]] = d\n        f.close()\n    results = sorted([(v, k) for (k, v) in results.items()])\n\n    return results[:limit]\n\ndef chi2_distance(histA, histB, eps = 1e-10):\n    d = 0.5 * np.sum([((a - b) ** 2) \/ (a + b + eps)\n        for (a, b) in zip(histA, histB)])\n\n    return d","c6fe24f8":"#data_Train_Path = \"..\/input\/asl-alphabet\/asl_alphabet_train\"\n\n#output = open(indexPath, \"w\")\n\n#for imagePath in glob.glob(data_Train_Path + \"\/*\/*\/*.jpg\"):\n    #imageID = imagePath[imagePath.rfind(\"\\\\\") + 1:]\n    #target = imagePath[imagePath.rfind(\"train\")+6 :imagePath.rfind(\"train\")+7]\n    #image = cv2.imread(imagePath)\n    #features = describe(image)\n    #features = [str(f) for f in features]\n    #output.write(\"%s,%s\\n\" % (imageID+\",\"+target, \",\".join(features)))\n#output.close()\n","4d03c256":"data = pd.read_csv('..\/input\/alphabet-asl-indexs\/index001.csv', header=None)\ncol_list =['name','target'] + ['s' + str(x) for x in range(0,1440)]\ndata.columns = col_list\ny = data.target\ndata = data.drop('name',1)\nX_train = data.drop('target',1)\ndel data\n\n## transform categorical target to numbers (encoding the target columns)\ny[y=='A']=1\ny[y=='B']=2\ny[y=='C']=3\ny[y=='D']=4\ny[y=='d']=5\ny[y=='E']=6\ny[y=='F']=7\ny[y=='G']=8\ny[y=='H']=9\ny[y=='I']=10\ny[y=='J']=11\ny[y=='K']=12\ny[y=='L']=13\ny[y=='M']=14\ny[y=='N']=15\ny[y=='n']=16\ny[y=='O']=17\ny[y=='P']=18\ny[y=='Q']=19\ny[y=='R']=20\ny[y=='S']=21\ny[y=='s']=22\ny[y=='T']=23\ny[y=='U']=24\ny[y=='V']=25\ny[y=='W']=26\ny[y=='X']=27\ny[y=='Y']=28\ny[y=='Z']=29\n\n\ny=y.astype('int')\ny.unique()","4ae2c111":"#data_Test_Path = \"..\/input\/asl-alphabet\/asl_alphabet_test\"\n\n#output = open(indexTestPath, \"w\")\n#X_test = []\n#for imagePath in glob.glob(data_Test_Path + \"\/*\/*.jpg\"):\n    #imageID = imagePath[imagePath.rfind(\"\\\\\") + 1:imagePath.rfind(\".\")-5 ]\n    #image = cv2.imread(imagePath)\n    #features = describe(image)\n    #features = [str(f) for f in features]\n    #output.write(\"%s,%s\\n\" % (str(imageID), \",\".join(features))) \n\n#output.close()","f64aa1a1":"col_list =['imagePath'] + ['s' + str(x) for x in range(0,1440)]\nX_test = pd.read_csv('..\/input\/alphabet-asl-indexs\/index_test.csv', header=None)\nX_test.columns = col_list\nY_test = X_test['imagePath']\nfor i in range(len(Y_test)):\n    Y_test[i] = Y_test[i][Y_test[i].rfind(\"\/\") + 1:]\nX_test = X_test.drop('imagePath',1)\n\nY_test[Y_test=='A']=1\nY_test[Y_test=='B']=2\nY_test[Y_test=='C']=3\nY_test[Y_test=='D']=4\nY_test[Y_test=='del']=5\nY_test[Y_test=='E']=6\nY_test[Y_test=='F']=7\nY_test[Y_test=='G']=8\nY_test[Y_test=='H']=9\nY_test[Y_test=='I']=10\nY_test[Y_test=='J']=11\nY_test[Y_test=='K']=12\nY_test[Y_test=='L']=13\nY_test[Y_test=='M']=14\nY_test[Y_test=='N']=15\nY_test[Y_test=='nothing']=16\nY_test[Y_test=='O']=17\nY_test[Y_test=='P']=18\nY_test[Y_test=='Q']=19\nY_test[Y_test=='R']=20\nY_test[Y_test=='S']=21\nY_test[Y_test=='space']=22\nY_test[Y_test=='T']=23\nY_test[Y_test=='U']=24\nY_test[Y_test=='V']=25\nY_test[Y_test=='W']=26\nY_test[Y_test=='X']=27\nY_test[Y_test=='Y']=28\nY_test[Y_test=='Z']=29\n\nY_test = Y_test.astype('int')","c6d7cee5":"print(X_train.shape,y.shape)\nprint(X_test.shape,Y_test.shape)\n","a17040b2":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\nscaler = StandardScaler()\npca = PCA(n_components=13)\n\nX_train_transformed = pca.fit_transform(X_train)\nX_test_transformed = pca.transform(X_test)\n\nX_train_transformed = scaler.fit_transform(X_train_transformed)\nX_test_transformed = scaler.transform(X_test_transformed)","d5554598":"from sklearn import svm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.externals import joblib\n\n#model = svm.SVC(kernel='linear')\n#model = svm.SVC(gamma='scale',verbose=True)\nmodel = RandomForestClassifier()\n\nmodel.fit(X_train_transformed,y)\n#joblib_file = \"ASL_Alphabet_Model.pkl\"\n#joblib.dump(model, joblib_file)\n\nY_pred = model.predict(X_test_transformed)\n\n\n#X_train,X_test,Y_train,Y_test=train_test_split(D['data'],D['target'],test_size=0.3,random_state=random.seed())","ed38820b":"print('score of model :',model.score(X_test_transformed,Y_test),'\\n\\n')\nfor i in range(len(Y_test)):\n    print(Y_pred[i],Y_test[i])","e651f368":"## Train and Save The Model SVC","70c5b79e":"## **Define the functions that using to extract the featutrs**\n* this model is based in the <strong>histogram<\/strong> of image to extract our Feature ","4c42e8f9":"## **Feature Engineering**","92f1fd7c":"## **Importing Libray**","b45f238a":"## **<strong>Import <\/strong> and  <strong>Normalize <\/strong>the data X_test and Y_test**\n","ca2b7444":"## **Extract The <strong>Featurs<\/strong> and save it in CSV file to use it in the test**\nUse this cell the First time you want to Extract Feature of testing Data","4ab9a01e":"## **Extract The <strong>Featurs<\/strong> and save it in CSV file to use it in the train**\nUse this cell the First time you want to Extract Feature of Training Data\n","3fa25dca":"**Score of model**","6db45b48":"## **<strong>Import <\/strong> and  <strong>Normalize <\/strong>the data X_train and Y_train**"}}