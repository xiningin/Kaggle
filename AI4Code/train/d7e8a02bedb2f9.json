{"cell_type":{"584a4d1b":"code","0aab212a":"code","520f61bd":"code","c83f4c15":"code","7117f95a":"code","b19bf0d8":"code","25596904":"code","d51f2ee5":"code","d399f65a":"code","41e6cfb1":"code","6334cf1f":"code","370b0830":"code","6e8b0a8a":"code","3788ca76":"code","d0e2bc22":"code","ab3ef0af":"code","2212a17a":"markdown","09a904fb":"markdown","aefdd3c1":"markdown","0f373e3d":"markdown","8a983922":"markdown","4774e946":"markdown","050b12b9":"markdown","e9416091":"markdown","3dc11b83":"markdown","d2ca7b1c":"markdown","57a2cc9a":"markdown","8e2e5168":"markdown","f840c28e":"markdown","25503328":"markdown","7cb1da0d":"markdown","64ae9f7a":"markdown","816b9253":"markdown"},"source":{"584a4d1b":"!pip install adjustText","0aab212a":"from IPython.core.display import HTML\n\n# import Source Code Pro font\nHTML(\"\"\"\n<style>\n@import url('https:\/\/fonts.googleapis.com\/css2?family=Source+Code+Pro&display=swap');\n<\/style>\n\"\"\")\n\ndef css_styling():\n    styles = open(\"..\/input\/sloth-styling-css\/alerts.css\", \"r\").read()\n    return HTML(\"<style>\"+styles+\"<\/style>\")\ncss_styling()","520f61bd":"# required libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.patheffects as path_effects\nfrom matplotlib import rcParams\n\nfrom adjustText import adjust_text\n\nimport requests\nimport PIL, io, sys\nfrom PIL import Image\n\n# read the data\ndata = pd.read_csv(\"..\/input\/prem-data\/prem_data.csv\")\n\n# version used\nprint(f\"\ud83d\udc0d: {sys.version}\")\nprint()\nprint(\"1. Version\ud83d\udd17:\")\nprint()\nprint(f\"   NumPy version: {np.__version__}\")\nprint()\nprint(f\"   Pandas version: {pd.__version__}\")\nprint()\nprint(f\"   Matplotlib version: {mpl.__version__}\")\nprint()\nprint(f\"   requests version: {requests.__version__}\")\nprint()\nprint(f\"   Pillow version: {PIL.__version__}\")\nprint()\n\n\n# summary of the data set\nprint()\nprint(\"2. Summary of the data set\ud83e\uddfe:\")\nprint()\nprint(f\"   Shape: {data.shape}\")\nprint()\nprint(f\"   Column Names: {list(data.columns)}\")\nprint()\nprint(f\"   Total Number of Players: {data['Player'].nunique()}\")\nprint()\nprint(f\"   Shot-Creating Actions Column:\")\nprint(f\"      Minimum Value: {data['Shot-Creating Actions'].min()}\")\nprint()\nprint(f\"      Median Value: {data['Shot-Creating Actions'].median()}\")\nprint()\nprint(f\"      Maximum Value: {data['Shot-Creating Actions'].max()}\")\nprint()\nprint(f\"   Expected Assist Column:\")\nprint(f\"      Minimum Value: {data['Expected Assist'].min()}\")\nprint()\nprint(f\"      Median Value: {data['Expected Assist'].median()}\")\nprint()\nprint(f\"      Maximum Value: {data['Expected Assist'].max()}\")\nprint()","c83f4c15":"# hex-code: a shade of black\nbackground_color = \"#222222\"\n\n# create a subplot\nfig, ax = plt.subplots(\n    facecolor=background_color, figsize=(16, 12), dpi=700\n)\n\n# set the background color for the axes\nax.set_facecolor(background_color)","7117f95a":"# hex-code: a shade of black\nbackground_color = \"#222222\"\n\n# hex-code: a shade of yellow\nscatter_color = \"#FFD700\"\n\n# hex-code: a shade of white\ntext_color = \"#CECECD\"\n\n# scatter the points (or markers)\nax.scatter(\n    x=data[\"Shot-Creating Actions\"], y=data[\"Expected Assist\"],\n    c=scatter_color, s=250, zorder=4\n)\n\n# add x-label\nax.set_xlabel(\n    \"Shot-Creating Actions per90\", color=text_color,\n    fontsize=16, fontfamily=\"serif\"\n)\n\n# add y-label\nax.set_ylabel(\n    \"Expected Assist per90\",color=text_color,\n    fontsize=16, fontfamily=\"serif\"\n)\n\n# to access the figure\nfig","b19bf0d8":"# hex-code: a shade of black\nbackground_color = \"#222222\"\n\n# hex-code: a shade of yellow\nscatter_color = \"#FFD700\"\n\n# hex-code: a shade of white\ntext_color = \"#CECECD\"\n\n# create a subplot\nfig, ax = plt.subplots(\n    facecolor=background_color, figsize=(16, 12), dpi=700\n)\n\n# set the background color for the axes\nax.set_facecolor(background_color)\n\n# scatter the points (or markers)\nax.scatter(\n    x=data[\"Shot-Creating Actions\"], y=data[\"Expected Assist\"], \n    s=250, zorder=4, facecolor=background_color, edgecolor=scatter_color, \n    hatch=5*'\/'\n)\n\n# add x-label and y-label\nax.set_xlabel(\n    \"Shot-Creating Actions per90\", color=text_color,\n    fontsize=20, fontfamily=\"serif\"\n)\nax.set_ylabel(\n    \"Expected Assist per90\",color=text_color,\n    fontsize=20, fontfamily=\"serif\"\n)\n\nplt.show()","25596904":"# players in consideration\nplayers = [\n    \"Jack Grealish\", \"Kevin De Bruyne\", \"Bruno Fernandes\", \"Riyad Mahrez\", \"James Rodr\u00edguez\", \"Jack Harrison\", \"Harry Kane\",\n    \"Che Adams\", \"Son Heung-min\", \"Mohamed Salah\", \"James Maddison\", \n    \"Anthony Martial\", \"Sadio Man\u00e9\", \"Rodrigo\", \"Paul Pogba\"\n]\n\n# hex-code: a shade of black\nbackground_color = \"#222222\"\n\n# hex-code: a shade of yellow\nscatter_color = \"#FFD700\"\n\n# hex-code: a shade of white\ntext_color = \"#CECECD\"\n\n# hex-code: a shade of grey\nsecondary_color = \"#C0C0C0\"\n\n# create a subplot\nfig, ax = plt.subplots(\n    facecolor=background_color, figsize=(16, 12), dpi=700\n)\n\n# set the background color for the axes\nax.set_facecolor(background_color)\n\n# iterate the dataframe\nfor _, row_val in data.iterrows():\n    \n    if row_val[\"Player\"] in players:\n        # specify the values\n        alpha, s, ec = 1, 250, scatter_color\n\n    else:\n        # specify the values\n        alpha, s, ec = 0.2, 100, secondary_color\n        \n    ax.scatter(\n        row_val[\"Shot-Creating Actions\"], row_val[\"Expected Assist\"],\n        s=s, hatch=5*\"\/\", edgecolor=ec, fc=background_color, alpha=alpha, zorder=4\n    )\n    \n# add x-label and y-label\nax.set_xlabel(\n    \"Shot-Creating Actions per90\", color=text_color,\n    fontsize=20, fontfamily=\"serif\"\n)\nax.set_ylabel(\n    \"Expected Assist per90\",color=text_color,\n    fontsize=20, fontfamily=\"serif\"\n)\n\nplt.show()","d51f2ee5":"# a dict containing players and coordinates\nplayers = {\n    \"Jack Grealish\": (7, 0.44), \"Kevin De Bruyne\": (6.2, 0.42), \"Bruno Fernandes\": (5.6, 0.398),\n    \"Riyad Mahrez\": (3.8, 0.34), \"James Rodr\u00edguez\": (5.09, 0.33), \"Jack Harrison\": (4.04, 0.30), \n    \"Harry Kane\": (3.35, 0.281), \"Che Adams\": (2.01, 0.271), \"Son Heung-min\": (3.57, 0.23), \n    \"Mohamed Salah\": (3.51, 0.21), \"James Maddison\": (5.3, 0.19), \"Anthony Martial\": (2.62, 0.191), \n    \"Sadio Man\u00e9\": (3.70, 0.16), \"Rodrigo\": (4.54, 0.148), \"Paul Pogba\": (3.4, 0.08) \n}\n\n# hex-code: a shade of black\nbackground_color = \"#222222\"\n\n# hex-code: a shade of yellow\nscatter_color = \"#FFD700\"\n\n# hex-code: a shade of white\ntext_color = \"#CECECD\"\n\n# hex-code: a shade of grey\nsecondary_color = \"#C0C0C0\"\n\n# create a subplot\nfig, ax = plt.subplots(\n    facecolor=background_color, figsize=(16, 12), dpi=700\n)\n\n# set the background color for the axes\nax.set_facecolor(background_color)\n\n# iterate the dataframe\nfor _, row_val in data.iterrows():\n    \n    if row_val[\"Player\"] in players.keys():\n        # specify the values\n        alpha, s, ec = 1, 250, scatter_color\n        \n        ## add text\n        text = ax.text(\n            players[row_val[\"Player\"]][0], players[row_val[\"Player\"]][1], row_val[\"Player\"],\n            size=12, color=text_color, zorder=6, ha=\"center\", va=\"center\"\n        )\n        text.set_path_effects(\n            [path_effects.withStroke(linewidth=3, foreground=background_color)]\n        )\n\n    else:\n        # specify the values\n        alpha, s, ec = 0.2, 150, secondary_color\n        \n    ax.scatter(\n        row_val[\"Shot-Creating Actions\"], row_val[\"Expected Assist\"],\n        s=s, hatch=5*\"\/\", edgecolor=ec, fc=background_color, alpha=alpha, zorder=4\n    )\n   \n# add x-label and y-label\nax.set_xlabel(\n    \"Shot-Creating Actions per90\", color=text_color,\n    fontsize=20, fontfamily=\"serif\"\n)\nax.set_ylabel(\n    \"Expected Assist per90\",color=text_color,\n    fontsize=20, fontfamily=\"serif\"\n)\n\nplt.show()","d399f65a":"# players in consideration\nplayers = [\n    \"Jack Grealish\", \"Kevin De Bruyne\", \"Bruno Fernandes\", \"Riyad Mahrez\", \n    \"James Rodr\u00edguez\", \"Jack Harrison\", \"Harry Kane\", \"Che Adams\", \n    \"Son Heung-min\", \"Mohamed Salah\", \"James Maddison\", \n    \"Anthony Martial\", \"Sadio Man\u00e9\", \"Rodrigo\", \"Paul Pogba\"\n]\n\n# hex-code: a shade of black\nbackground_color = \"#222222\"\n\n# hex-code: a shade of yellow\nscatter_color = \"#FFD700\"\n\n# hex-code: a shade of black\nsecondary_color = \"#C0C0C0\"\n\n# hex-code: a shade of white\ntext_color = \"#CECECD\"\n\n# create a subplot\nfig, ax = plt.subplots(\n    facecolor=background_color, figsize=(16, 12), dpi=700\n)\n\n# set the background color for the axes\nax.set_facecolor(background_color)\n\n# iterate the dataframe\nfor _, row_val in data.iterrows():\n    \n    if row_val[\"Player\"] in players:\n        # specify the values\n        alpha, s, ec = 1, 250, scatter_color\n\n    else:\n        # specify the values\n        alpha, s, ec = 0.2, 150, secondary_color\n        \n    ax.scatter(\n        row_val[\"Shot-Creating Actions\"], row_val[\"Expected Assist\"],\n        s=s, hatch=5*\"\/\", edgecolor=ec, fc=background_color, alpha=alpha, zorder=4\n    )\n\n# player names with their coordinate locations    \ntext_values = data.loc[\n    data[\"Player\"].isin(players),\n    [\"Shot-Creating Actions\", \"Expected Assist\", \"Player\"]\n].values\n\n# make an array of text\ntexts = [\n    ax.text(\n        val[0], val[1], val[2], \n        size=12, color=text_color, zorder=5, \n        fontfamily=\"serif\"\n    ) for val in text_values\n]\n\n# set path_effects\n[text.set_path_effects([mpl.patheffects.withStroke(linewidth=3, foreground=background_color)]) for text in texts]\n\n# use adjust_text\nadjust_text(\n    texts, autoalign='y', \n    only_move={'points':'y', 'text':'xy'}, \n    force_objects=(0.5, 3), force_text=(0.5, 3), \n    force_points=(0.5, 7)\n)\n    \n# add x-label and y-label\nax.set_xlabel(\n    \"Shot-Creating Actions per90\", color=text_color,\n    fontsize=20, fontfamily=\"serif\"\n)\nax.set_ylabel(\n    \"Expected Assist per90\",color=text_color,\n    fontsize=20, fontfamily=\"serif\"\n)\n\nplt.show()","41e6cfb1":"# compute median for both variables\nmedian_x = data[\"Shot-Creating Actions\"].median()\nmedian_y = data[\"Expected Assist\"].median()\n\n# plot medians\nax.plot([median_x, median_x], [0, data[\"Expected Assist\"].max() + 0.03], color=text_color, ls=\"--\", lw=0.5, alpha=0.7, zorder=1)\nax.plot([0.0, data[\"Shot-Creating Actions\"].max() + 0.5], [median_y, median_y], color=text_color, ls=\"--\", lw=0.5, alpha=0.7, zorder=1)\n\n# annotate the median lines --> list containing dict of values for text method\ntext_values = [\n    {\n        'x': median_x, 'y': 0.35, 's': \"MEDIAN SCA PER-90\", \"color\": text_color, \n        \"ha\": \"center\", \"va\": \"center\", \"rotation\": 90, \"fontsize\": 11, \"zorder\": 2, \"fontfamily\": \"serif\"\n    },\n    {\n        'x': 5.5, 'y': median_y, 's': \"MEDIAN XA PER-90\", \"color\": text_color, \n        \"ha\": \"left\", \"va\": \"center\", \"fontsize\": 11, \"zorder\": 2, \"fontfamily\": \"serif\"\n    }\n]\n\n# plot the texts\ntexts = [ax.text(**txt) for txt in text_values]\n\n# set path_effects\n[txt.set_path_effects([mpl.patheffects.withStroke(linewidth=7, foreground=background_color)]) for txt in texts]\n\n# set axis\nax.set(xlim=(0, data[\"Shot-Creating Actions\"].max() + 0.5), ylim=(0, data[\"Expected Assist\"].max() + 0.03))\n\nfig","6334cf1f":"# turn off the spines\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\n\n# set color and alpha value for spines\nax.spines[\"left\"].set_color(text_color)\nax.spines[\"bottom\"].set_color(text_color)\nax.spines[\"left\"].set_alpha(0.2)\nax.spines[\"bottom\"].set_alpha(0.2)\n    \nfig","370b0830":"# set color for tick-params\nax.tick_params(axis=\"both\", which=\"both\", length=0, colors=text_color)\n\n# set the tick values\nax.set_xticks(np.linspace(0, 7, 8))\nax.set_yticks(np.linspace(0.1, 0.4, 4))\n                                                \nfig","6e8b0a8a":"# set the grid\nax.grid(b=True, alpha=0.05, axis=\"both\")\n\nfig","3788ca76":"# title, sub-title and credits --> list containing dict of values for text method\ntext_values_ = [\n    {\n        'x': 0.15, 'y': 0.955, 's': \"Chance Creating Ability\", \"color\": text_color, \n        \"ha\": \"left\", \"va\": \"center\", \"fontsize\": 30, \"fontfamily\": \"serif\"\n    },\n    {\n        'x': 0.15, 'y': 0.915, 's': \"English Premier League | Season 2020-21\", \"color\": text_color, \n        \"ha\": \"left\", \"va\": \"center\", \"fontsize\": 25, \"fontfamily\": \"serif\"\n    },\n    {\n        'x': 0.91, 'y': 0.05, 's': \"data: Statsbomb via fbref | graphic: @slothfulwave612\", \"color\": text_color, \n        \"ha\": \"right\", \"va\": \"center\", \"fontsize\": 12, \"fontfamily\": \"serif\", \"fontstyle\": \"italic\"\n    },\n    {\n        'x': 0.08, 'y': 0.05, 's': \"*included players who played more than 720 minutes\", \"color\": text_color, \n        \"ha\": \"left\", \"va\": \"center\", \"fontsize\": 12, \"fontfamily\": \"serif\", \"fontstyle\": \"italic\"\n    }\n]\n\n# plot the texts\ntexts_ = [fig.text(**txt) for txt in text_values_]\n\n# set path_effects\n[txt.set_path_effects([mpl.patheffects.withStroke(linewidth=3, foreground=background_color)]) for txt in texts_]\n    \nfig","d0e2bc22":"# url of the image\nurl = \"https:\/\/user-images.githubusercontent.com\/33928040\/104724629-f4c09d80-5756-11eb-946f-ff0d26ae0344.png\"\n\n# get the image\nresponse = requests.get(url)\n\n# read the image (convert to PIL Image)\nimage = Image.open(io.BytesIO(response.content))        \n\n# add image\nax_image = fig.add_axes((0.06, 0.89, 0.1, 0.1))\nax_image.axis('off')  # axis off so no labels\/ ticks\nax_image.imshow(image)\n        \nfig","ab3ef0af":"# use predefined style\nplt.style.use(\"..\/input\/prem-data\/sloth.mplstyle\")\n\n# players in consideration\nplayers = [\n    \"Jack Grealish\", \"Kevin De Bruyne\", \"Bruno Fernandes\", \"Riyad Mahrez\", \n    \"James Rodr\u00edguez\", \"Jack Harrison\", \"Harry Kane\", \"Che Adams\", \n    \"Son Heung-min\", \"Mohamed Salah\", \"James Maddison\", \n    \"Anthony Martial\", \"Sadio Man\u00e9\", \"Rodrigo\", \"Paul Pogba\"\n]\n\n# hex-code: a shade of black\nbackground_color = \"#222222\"\n\n# hex-code: a shade of yellow\nscatter_color = \"#FFD700\"\n\n# hex-code: a shade of black\nsecondary_color = \"#C0C0C0\"\n\n# hex-code: a shade of white\nline_color = \"#CECECD\"\n\n# create a subplot\nfig, ax = plt.subplots()\n\n# iterate the dataframe\nfor _, row_val in data.iterrows():\n    \n    if row_val[\"Player\"] in players:\n        # specify the values\n        alpha, s, ec = 1, 250, scatter_color\n\n    else:\n        # specify the values\n        alpha, s, ec = 0.2, 150, secondary_color\n        \n    ax.scatter(\n        row_val[\"Shot-Creating Actions\"], row_val[\"Expected Assist\"],\n        s=s, hatch=5*\"\/\", edgecolor=ec, facecolor=background_color, alpha=alpha, zorder=4\n    )\n\n# player names with their coordinate locations    \ntext_values = data.loc[\n    data[\"Player\"].isin(players),\n    [\"Shot-Creating Actions\", \"Expected Assist\", \"Player\"]\n].values\n\n# make an array of text\ntexts = [\n    ax.text(\n        val[0], val[1], val[2], \n        size=12, zorder=5\n    ) for val in text_values\n]\n\n# set path_effects\n[text.set_path_effects([mpl.patheffects.withStroke(linewidth=3, foreground=background_color)]) for text in texts]\n\n# use adjust_text\nadjust_text(\n    texts, autoalign='y', \n    only_move={'points':'y', 'text':'xy'}, \n    force_objects=(0.5, 3), force_text=(0.5, 3), \n    force_points=(0.5, 7)\n)\n    \n# add x-label and y-label\nax.set_xlabel(\"Shot-Creating Actions per90\")\nax.set_ylabel(\"Expected Assist per90\")\n\n# compute median for both variables\nmedian_x = data[\"Shot-Creating Actions\"].median()\nmedian_y = data[\"Expected Assist\"].median()\n\n# plot medians\nax.plot([median_x, median_x], [0, data[\"Expected Assist\"].max() + 0.03], color=line_color, alpha=0.7, zorder=1)\nax.plot([0.0, data[\"Shot-Creating Actions\"].max() + 0.5], [median_y, median_y], color=line_color, alpha=0.7, zorder=1)\n\n# annotate the median lines --> list containing dict of values for text method\ntext_values = [\n    {\n        'x': median_x, 'y': 0.35, 's': \"MEDIAN SCA PER-90\",\n        \"ha\": \"center\", \"va\": \"center\", \"rotation\": 90, \"fontsize\": 11, \"zorder\": 2\n    },\n    {\n        'x': 5.5, 'y': median_y, 's': \"MEDIAN XA PER-90\", \n        \"ha\": \"left\", \"va\": \"center\", \"fontsize\": 11, \"zorder\": 2\n    }\n]\n\n# plot the texts\ntexts = [ax.text(**txt) for txt in text_values]\n\n# set path_effects\n[txt.set_path_effects([mpl.patheffects.withStroke(linewidth=7, foreground=background_color)]) for txt in texts]\n\n# set axis\nax.set(xlim=(0, data[\"Shot-Creating Actions\"].max() + 0.5), ylim=(0, data[\"Expected Assist\"].max() + 0.03))\n\n# set color and alpha value for spines\nax.spines[\"left\"].set_color(line_color)\nax.spines[\"bottom\"].set_color(line_color)\nax.spines[\"left\"].set_alpha(0.2)\nax.spines[\"bottom\"].set_alpha(0.2)\n\n# set the tick values\nax.set_xticks(np.linspace(0, 7, 8))\nax.set_yticks(np.linspace(0.1, 0.4, 4))\n\n# title, sub-title and credits --> list containing dict of values for text method\ntext_values_ = [\n    {\n        'x': 0.15, 'y': 0.955, 's': \"Chance Creating Ability\", \n        \"ha\": \"left\", \"va\": \"center\", \"fontsize\": 30\n    },\n    {\n        'x': 0.15, 'y': 0.915, 's': \"English Premier League | Season 2020-21\",\n        \"ha\": \"left\", \"va\": \"center\", \"fontsize\": 25\n    },\n    {\n        'x': 0.91, 'y': 0.05, 's': \"data: Statsbomb via fbref | graphic: @slothfulwave612\",\n        \"ha\": \"right\", \"va\": \"center\", \"fontsize\": 12, \"fontstyle\": \"italic\"\n    },\n    {\n        'x': 0.08, 'y': 0.05, 's': \"*included players who played more than 720 minutes\",\n        \"ha\": \"left\", \"va\": \"center\", \"fontsize\": 12, \"fontstyle\": \"italic\"\n    }\n]\n\n# plot the texts\ntexts_ = [fig.text(**txt) for txt in text_values_]\n\n# set path_effects\n[txt.set_path_effects([mpl.patheffects.withStroke(linewidth=3, foreground=background_color)]) for txt in texts_]\n    \n# url of the image\nurl = \"https:\/\/user-images.githubusercontent.com\/33928040\/104724629-f4c09d80-5756-11eb-946f-ff0d26ae0344.png\"\n\n# get the image\nresponse = requests.get(url)\n\n# read the image (convert to PIL Image)\nimage = Image.open(io.BytesIO(response.content))        \n\n# add image\nax_image = fig.add_axes((0.06, 0.89, 0.1, 0.1))\nax_image.axis('off')  # axis off so no labels\/ ticks\nax_image.imshow(image)\n        \nplt.show()","2212a17a":"<h2><span style=\"background:#F3E9D9; font-weight:normal; color:black; font-family: 'Source Code Pro'; monospace\">Playing With Ticks<\/span>\u2705<\/h2>\n\nNow, we will change the color of the tick-labels and will change the length of ticks using the `tick_params()` method.\n\nWe will also set the tick-label value for both the spines using the `set_xticks()` and `set_yticks()` methods.\n\n**Ticks Are Now Changed** \ud83d\udc47","09a904fb":"<h2><span style=\"background:#F3E9D9; font-weight:normal; color:black; font-family: 'Source Code Pro'; monospace\">What's Wrong?<\/span>\ud83d\udd34<\/h2>\n\nThe above plot is not aesthetically pleasing. It looks like a bunch of yellow markers spread around the axes.\n\nWe will now make use of some more arguments present in `scatter()` method to make the plot a little bit better.\n\nTo control the color of the markers, we can make use of the `facecolor` and `edgecolor` arguments. We will pass `facecolor` as `background_color` and `edgecolor` as our `scatter_color`.\n\nWe will also use of another argument called `hatch`, where we can specify a hatching patterns.\n\n**The New Look** \ud83d\udc47","aefdd3c1":"<h2><span style=\"background:#F3E9D9; font-weight:normal; color:black; font-family: 'Source Code Pro'; monospace\">Let's Have a Look<\/span>\ud83e\uddd0<\/h2>\n\nAll these markers represent a player from the given data set. The x-coordinate value represents *Shot-Creating Actions* value and the y-coordinate value represents *Expected Assist* value for a given player.\n\nOur next step is to *annotate* these markers so that we can know which marker represents which player. But here is a catch, if we annotate every marker, then our plot will look messy.\n\nSo, the solution is to annotate only a few markers. We will only annotate those players of which we want to see the performance throughout this season.\n\nLet's say we have picked these players:\n\n\n<div class=\"alert success-alert\">\n    <p><b>Players\ud83d\udc68:<\/b> Jack Grealish, Kevin De Bruyne, Bruno Fernandes, Riyad Mahrez, James Rodr\u00edguez, <br>Jack Harrison, Harry Kane, Che Adams, Son Heung-min, Mohamed Salah, James Maddison,<br>Anthony Martial, Sadio Man\u00e9, Rodrigo and Paul Pogba<\/p>\n<\/div>\n\n<br>\n\nOne way to annotate these markers is by manually specifying the coordinate values and then annotating each marker based on their coordinate location. But this is a very time-consuming task.\n\nA better way is to use `adjust-text` package. We will see both ways of annotating the markers.\n\nSo, one final question: *What about the rest of the markers (or players)*? *Should we remove them*? *What should we do*?\n\nThe answer is we will not remove these markers. Instead, we will *change their size, color and alpha value*, and the reason is since they are not the players under consideration, they are not the primary target of our visualization. So, picking a subdued color for these markers will help us out.\n\nSo, let's first change the size, color and alpha values, and then we will go ahead and annotate these markers.\n\n**Plot After The Changes** \ud83d\udc47","0f373e3d":"So, we have our markers scattered, and now the plot is looking a little bit better. It's time to annotate these markers.\n\nWe will first see how to annotate by manually passing the coordinates for each of these markers, and then we will see how we can do the same with `adjustText` package.\n\n<h2><span style=\"background:#F3E9D9; font-weight:normal; color:black; font-family: 'Source Code Pro'; monospace\">Manual Process<\/span>\u23f3<\/h2>\n\nTo annotate these markers using the manual process, we will make a *dictionary* where the *keys* will denote *player-name*, and the corresponding *value* will be a *tuple* having *x and y coordinates*.\n\nThese x and y coordinates will be the *final position* of the text to be plotted.\n\n**Manual Potting** \ud83d\udc47","8a983922":"<h2><span style=\"background:#F3E9D9; font-weight:normal; color:black; font-family: 'Source Code Pro'; monospace\">Adding Title and Credit<\/span>\ud83d\udd20<\/h2>\n\nNow its time to add a title to our plot and an end-credit. For this, we will make use of the `text()` method (but will be using `text()` method on our figure).\n\n**Title, Sub-Title, Credits** \ud83d\udc47","4774e946":"<img src=\"https:\/\/user-images.githubusercontent.com\/33928040\/104611447-211ee000-56ab-11eb-8c34-37e4b4983735.jpg\"  width=\"1000\" height=\"200\">\n\n<h1><center>\u21dc Matplotlib: Making Scatter Plots \u21dd<\/center><\/h1>","050b12b9":"# 2. Importing Libraries & Reading Data\ud83d\udcbd\n\nLet us see all the required libraries we are going to use in this notebook:\n\n<div class=\"alert success-alert\">\n  <p>NumPy\ud83e\uddee: for numerical computation.<\/p>\n  <p>Pandas\ud83d\udc3c: for data manipulation and analysis.<\/p>\n  <p>Matplotlib\ud83d\udcca: for creating visualizations.<\/p>\n  <p>adjustText\ud83d\udd24: for text adjustment.<\/p>\n  <p>requests\ud83d\udd04: for making HTTP requests simpler and more human-friendly.<\/p>\n  <p>Pillow\ud83d\udecc: for opening, manipulating, and saving many different image file formats.<\/p>\n  <p>io\ud83d\udcbb: for dealing with various types of I\/O.<\/p>\n<\/div>\n\n<br>\n\nThe data set is in `.csv` format so we are going to use `read_csv()` method from pandas to load our data set.\n\n\u27f9 To access the code you can click the toggle button on the right.\n\n**Version Number and Summary of the Data** \ud83d\udc47 ","e9416091":"The plot now is giving us more information. We can easily spot the median values, can spot the top-performing players, can also compare them to the league's average(median) etc.\n\n<h2><span style=\"background:#F3E9D9; font-weight:normal; color:black; font-family: 'Source Code Pro'; monospace\">Hiding the spines<\/span>\ud83d\ude48<\/h2>\n\nWe will hide the top and the right spines, and to do this will make use of `set_visible()` method. The following line shows how to hide the top spine:\n\n`ax.spines[\"top\"].set_visible(False)`\n\nWe will also set the colors for the remaining spines using `set_color()` and `set_alpha()` methods.\n\n**Only Two Spines Are Now Visible** \ud83d\udc47","3dc11b83":"The texts are looking very much aligned to the markers. The only problem is that the process is very <span style=\"background:#FFA1A1; font-weight:normal; color:black\">time-consuming<\/span>. You need to pick the exact coordinate for your text to get them aligned with their corresponding markers.\n\nTo solve this issue, we have `adjustText` package in Python. Let's see how can we make use of `adjustText` to annotate these markers.\n\n<h2><span style=\"background:#F3E9D9; font-weight:normal; color:black; font-family: 'Source Code Pro'; monospace\">adjustText<\/span>\ud83d\udd24<\/h2>\n\nAll thanks to <span style=\"background:#F2F2F2; font-weight:normal; color:black\"><a href=\"https:\/\/github.com\/Phlya\">Ilya Flyamer<\/a><\/span> for making this package. You can find the official documentation page <span style=\"background:#F2F2F2; font-weight:normal; color:black\"><a href=\"https:\/\/adjusttext.readthedocs.io\/en\/latest\/\">here<\/a><\/span>.\n\nThere are a few steps that we need to perform while using `adjust_text()` method from the`adjustText` package.\n\n<ol>\n\n<li>The first step is to have an array having values for each player and their corresponding coordinates.<\/li>\n\n<li>The second step is to use the <span style=\"background:#F4F3F3; font-weight:normal; color:black\">text()<\/span> method and prepare a list of all the texts. (You can also include path_effects to your text).<\/li>\n\n<li>The third step is to use <span style=\"background:#F4F3F3; font-weight:normal; color:black\">adjust_text()<\/span>.<\/li>\n<\/ol>\n\n**Using adjustText** \ud83d\udc47","d2ca7b1c":"<h2><span style=\"background:#F3E9D9; font-weight:normal; color:black; font-family: 'Source Code Pro'; monospace\">Adding Image<\/span>\ud83c\udd92<\/h2>\n\nIt is very easy if we want to add an image in our plot, we just have to follow these steps:\n\n<ol>\n    <li>Get the url of the image.<\/li>\n    <li>Read the image using <span style=\"background:#F2F2F2; font-weight:normal; color:black\">Pillow<\/span> and <span style=\"background:#F2F2F2; font-weight:normal; color:black\">io<\/span> modules.<\/li>\n    <li>Add the image<\/li>\n<\/ol>\n    \n> **Note\ud83d\udccc**: This is one of the many ways of adding an image to your plot.\n    \n**This Looks Great** \ud83d\udc47","57a2cc9a":"<div class=\"alert simple-alert\">\n    <p><br><b>Tip\ud83d\udccc:<\/b> If you want to save you plot run this command:<center><span style=\"background:#F2F2F2; font-weight:normal; color:black\">fig.savefig(\"name_of_figure.jpg\", dpi=700, bbox_inches=\"tight\")<\/span><\/center><\/p>\n<\/div>\n\n<br>\n\n\n# 5. That's a Wrap\ud83c\udf89\n\nWe have finally finished, and our final plot now looks better than the initial one. \n\nIf you have followed till now, then you now know how to use `rcParams` to make a user-defined theme, how to use the various method in Matplotlib to make your plot look better.\n\nYou can consider the above code as a template. Play around with it, and also try to make your themes using `rcParams`.\n\nSo, that's everything I want to share through this notebook. I hope you have enjoyed and learnt something, and if you like my efforts do give an upvote to this notebook and share it. \n\nThank you for your presence\ud83e\udd17. So Long \ud83d\udc4b.\n\n<h3><span style=\"background:#F3E9D9; font-weight:normal; color:black; font-family: 'Source Code Pro'; monospace\">Footnote<\/span>\ud83d\udccc<\/h3>\n\n<ol>\n    <li>This notebook's theme is inspired by the work of <span style=\"background:#F2F2F2; font-weight:normal; color:black\"><a href=\"https:\/\/www.kaggle.com\/andradaolteanu\">Andrada Olteanu<\/a><\/span>\ud83d\udc51.<\/li>\n    <li>Thanks to <span style=\"background:#F2F2F2; font-weight:normal; color:black\"><a href=\"https:\/\/twitter.com\/NinadB_06\">Ninad Barbadikar's<\/a><\/span> work on <span style=\"background:#F2F2F2; font-weight:normal; color:black\"><a href=\"https:\/\/twitter.com\/NinadB_06\/status\/1348738404989558787\">Tableau tutorials<\/a><\/span>\ud83d\udd1d which inspired me to create this notebook.<\/li>\n    <li>Last but not least, thanks to <span style=\"background:#F2F2F2; font-weight:normal; color:black\"><a href=\"https:\/\/www.google.com\/\">Google<\/a><\/span>\ud83d\udc10 and <span style=\"background:#F2F2F2; font-weight:normal; color:black\"><a href=\"https:\/\/stackoverflow.com\/\">Stackoverflow<\/a><\/span>\ud83d\udc10.<\/li>\n<\/ol>","8e2e5168":"This is just great\ud83e\udd29 using the `adjust_text()` method we have added the text with minimum efforts. \n\n\n<div class=\"alert simple-alert\">\n    <p><b>Note\ud83d\udccc:<\/b> The values of arguments that I have defined inside <span style=\"background:#F4F3F3; font-weight:normal; color:black\">adjust_text()<\/span> method may not work with the scatter plot you are making. One need to tweak the argument values to get the text aligned with the markers. Check out the <span style=\"background:#F2F2F2; font-weight:normal; color:black\"><a href=\"https:\/\/adjusttext.readthedocs.io\/en\/latest\/\">documentation<\/a><\/span> to know more about the arguments.\n    <\/p>\n<\/div>\n\n<br>\n\n<h2><span style=\"background:#F3E9D9; font-weight:normal; color:black; font-family: 'Source Code Pro'; monospace\">What's Next?<\/span>\u23ed\ufe0f<\/h2>\n\nTill now, we have scattered our markers, changed their color, size, the way they look and have annotated the markers.\n\nNow, we are going to change the layout of our plot, so we are going to do the following things:\n\n<ol>\n<li>Plotting the median value lines for both our variables,<\/li>\n<li>Hiding the spines,<\/li>\n<li>Changing tick-params,<\/li>\n<li>Setting tick-labels,<\/li>\n<li>Setting a grid,<\/li>\n<li>Adding the title and credits, and<\/li>\n<li>Adding image<\/li>\n<\/ol>\n\n\n<div class=\"alert simple-alert\">\n    <p><b>Note\ud83d\udccc:<\/b> If you are facing difficulty in understanding what spines are or what tick-params are, go ahead and check out the <span style=\"background:#F2F2F2; font-weight:normal; color:black\">anatomy of a figure<\/span> in the introduction part.\n    <\/p>\n<\/div>\n\n<br>\n\n<h2><span style=\"background:#F3E9D9; font-weight:normal; color:black; font-family: 'Source Code Pro'; monospace\">Adding Median Values<\/span>\ud83d\udd22<\/h2>\n\nFirst, we have to compute the median values for both the variables.\n\nWe can do this easily by using the `median()` method, then we can use the `plot()` method to add a line in our plot and to annotate we will use `text()` method.\n\nWe will also set the axis limit using the `set()` method.\n\n**Median Values** \ud83d\udc47","f840c28e":"# 3. \u2735\u2735 Let's Scatter \u2735\u2735\n\n<h2><span style=\"background:#F3E9D9; font-weight:normal; color:black; font-family: 'Source Code Pro'; monospace\">Basic Matplotlib Figure<\/span>\ud83d\udcc8<\/h2>\n\nWe will start by making a simple Matplotlib figure. To make a figure, we will use Matplotlib's `subplots()` method.\n\nBefore making a Matplotlib figure, we should know some things like *how many subplots are required? What color should we choose for our subplot and also for the figure? What will be the size of the figure?*\n\nSince we are making a single scatter plot, we will need *a single subplot*. The color of the figure and the axes will be the same (though we can have different colors). We can use the `facecolor` argument to specify the background color. Here we are going to make use of a dark background.\n\nTo specify the size of the figure, we can use `figsize` argument. It takes in a tuple where we need to specify width and height in inches respectively.\n\nWe can also specify a `dpi` argument. `dpi` refers to the resolution of the figure in dots-per-inch. Higher the value higher will be the resolution.\n\nThe `subplots()` method returns - a figure object and an axes object. The axes object can be either a single axes object or an array of axes objects (if we create more than one subplot). \n\n<div class=\"alert simple-alert\">\n  <p><b>Tip<\/b>\ud83d\udccc: I use some of the websites that help me choose colors for my visualization. Two of my favourites are <span style=\"background:#F2F2F2; font-weight:normal; color:black\"><a href=\"https:\/\/coolors.co\/\">coolors.co<\/a><\/span> and <span style=\"background:#F2F2F2; font-weight:normal; color:black\"><a href=\"https:\/\/mycolor.space\/\">mycolor.space<\/a><\/span>. One can create palettes and colors easily using these two websites.<\/p>\n<\/div>\n\n<br>\n\n**A Basic Matplotlib Figure** \ud83d\udc47 ","25503328":"<h2><span style=\"background:#F3E9D9; font-weight:normal; color:black; font-family: 'Source Code Pro'; monospace\">Setting The Grid<\/span>\ud83d\udcc9<\/h2>\n\nTo set a grid, we can make use of the `grid()` method.\n\n**A Grid is Added** \ud83d\udc47","7cb1da0d":"# 4. rcParams\ud83d\udcaa\n\nBefore wrapping up everything, let's talk a little bit about `rcParams`.\n\nWith `rcParams` we can specify argument values(like font-family, colors, size etc.) and matplotlib will consider these values as the default values for the entire plot.\n\nAn example why *rcParams* is important: every time we added a text to the plot, we were specifying the font-family, an alternative way is to use `rcParams` and provide a default value for our font-family so that we do not have to specify it again and again.\n\nThere are many things that we can control using `rcParams`. Visit <span style=\"background:#F2F2F2; font-weight:normal; color:black\"><a href=\"https:\/\/matplotlib.org\/3.2.1\/tutorials\/introductory\/customizing.html\">this<\/a><\/span> page to know more.\n\n<div class=\"alert success-alert\">\n    <p>I have created a file named as <span style=\"background:#F2F2F2; font-weight:normal; color:black\"><a href=\"https:\/\/www.kaggle.com\/slothfulwave612\/prem-data?select=sloth.mplstyle\">sloth.mplstyle<\/a><\/span> where I have defined all the values that matplotlib will consider as default. Using matplotlib, I will use these values and will plot the scatter-plot again. You will see that there are a few lines of code that has been reduced, all thanks to rcParams, and the plot remains the same. You can define your own theme using <span style=\"background:#F2F2F2; font-weight:normal; color:black\">rcParams<\/span>.<\/p>\n<\/div>\n\n<br>\n\n<div class=\"alert simple-alert\">\n    <p><b>Tip\ud83d\udccc:<\/b> Also if you want to revert back to the default values that matplotlib uses then run this command: <center><span style=\"background:#F2F2F2; font-weight:normal; color:black\">mpl.rcParams.update(mpl.rcParamsDefault)<\/span><\/center><\/p>\n<\/div>\n\n<br>\n\n**Using rcParams** \ud83d\udc47","64ae9f7a":"# 1. Introduction\ud83c\udf80\n\nHello everyone\ud83d\udc4b in this notebook, I want to share how I make scatter plots using <span style=\"background:#8EEA7D; font-weight:bold; color:black\">Python<\/span>\ud83d\udc0d package <span style=\"background:#FED56F; font-weight:bold; color:black\">Matplotlib<\/span>.\n\nOne can use other Python packages like Seaborn to make a basic scatter plot but are not customizable. With Matplotlib, the plus point is we can easily customize our visualization by accessing various classes and methods Matplotlib offers.\n\nSo without further ado, let's get started. \ud83e\udd29\n\n<h2><span style=\"background:#F3E9D9; font-weight:normal; color:black; font-family: 'Source Code Pro'; monospace\">What is a scatter plot?<\/span>\ud83d\udccf<\/h2>\n\nA **scatter plot** is a type of data display that shows the relationship between two numerical variables.\n\nEach member of the dataset gets plotted as a point whose $(x, y)$ coordinates relates to its values for the two variables.\n\nFor example, the below scatter plot shows a linear relationship between *Variable 1* and *Variable 2*.\n\n<center>\n<img src=\"https:\/\/user-images.githubusercontent.com\/33928040\/104476389-31b95280-55e6-11eb-83fa-423c14ac1f30.jpg\"  width=\"800\" height=\"600\">\n<\/center>\n\n<br>\n\n<h2><span style=\"background:#F3E9D9; font-weight:normal; color:black; font-family: 'Source Code Pro'; monospace\">Prerequisite<\/span>\ud83d\udea8<\/h2>\n\nThe only two prerequisites are:\n\n<ol>\n    <li>You should know how to code in <span style=\"background:#8EEA7D; font-weight:bold; color:black\">Python<\/span>.<\/li>\n    <li>You should know the basics of <span style=\"background:#FED56F; font-weight:bold; color:black\">Matplotlib<\/span>.<\/li>\n<\/ol>\n\n\n The first point is a must, and if you don't know anything about Matplotlib, then that's okay, I will try to explain everything intuitively. Though if you have used Matplotlib, then it will be a plus point for you.\n\n<h2><span style=\"background:#F3E9D9; font-weight:normal; color:black; font-family: 'Source Code Pro'; monospace\">Data<\/span>\ud83d\udca1<\/h2>\n\nWe are going to make use of the **English Premier League** data scrapped from <span style=\"background:#F2F2F2; font-weight:normal; color:black\"><a href=\"https:\/\/fbref.com\/en\/\">Football References\u26bd<\/a><\/span>. The data set contains the player's statistics for **Shot-Creating Actions** and **Expected Assist**. These statistics are normalized using <span style=\"background:#F2F2F2; font-weight:normal; color:black\"><a href=\"https:\/\/statsbomb.com\/2013\/08\/an-introduction-to-the-per-90-metric\/\">per90 metric<\/a><\/span>. The data is from September 12, 2020, to December 31, 2020.\n\nThe data set has the following columns:\n\n<div class=\"alert success-alert\">\n  <p>Player\ud83d\udc68: Name of the player.<\/p>\n  <p>Club\u26bd: Team Name.<\/p>\n  <p>Shot-Creating Actions\ud83e\udd45: The two offensive actions directly leading to a shot, such as passes, dribbles and drawing fouls.<\/p>\n  <p>Expected Assist\u2705: Measures the likelihood that a given pass will become a goal assist.<\/p>\n<\/div>\n\n<br>\n\n<h2><span style=\"background:#F3E9D9; font-weight:normal; color:black; font-family: 'Source Code Pro'; monospace\">Anatomy of a figure<\/span>\ud83d\udcc8<\/h2>\n\nWe now know everything about our data. So, before getting into the coding part, let me introduce here: <span style=\"background:#FED56F; font-weight:normal; color:black\">The Anatomy of Matplotlib Figure<\/span>.\n\nAll thanks to <span style=\"background:#F2F2F2; font-weight:normal; color:black\"><a href=\"https:\/\/matplotlib.org\/3.3.3\/gallery\/showcase\/anatomy.html\">this<\/a><\/span> Matplotlib tutorial.\n\nThe plot summarizes all the things one can observe in a Matplotlib figure, and we are going to use most of these things while making the scatter plot.\n\n<center>\n<img src=\"https:\/\/user-images.githubusercontent.com\/33928040\/104488702-bf03a380-55f4-11eb-8950-ba9a17cb9c14.jpg\"  width=\"600\" height=\"400\">\n<\/center>","816b9253":"<h2><span style=\"background:#F3E9D9; font-weight:normal; color:black; font-family: 'Source Code Pro'; monospace\">Scatter The Points<\/span>\ud83c\udf0c<\/h2>\n\nNow we have our figure and axes ready it's time to scatter the points on the axes.\n\nSo to scatter, we are going to make use of the `scatter()` method.\n\nThe `scatter()` method takes many arguments. We will start by looking at these five arguments: the *x coordinate*, *y coordinate*, *size*, *color* and *zorder*.\n\n<div class=\"alert simple-alert\">\n    <p><b>Zorder\ud83d\udccd:<\/b> The drawing order of artists is determined by their <i>zorder<\/i> attribute, which is a floating point number. Artists with <i>higher zorder<\/i> are drawn on <i>top<\/i>. Here is a zorder <span style=\"background:#F2F2F2; font-weight:normal; color:black\"><a href=\"https:\/\/matplotlib.org\/3.3.3\/gallery\/misc\/zorder_demo.html\">demo<\/a><\/span>.<\/p>\n<\/div>\n\n<br>\n\nWe will now plot *Shot-Creating Actions* on the x-axis and *Expected Assist* on the y-axis.\n\n<br>\n\n**Scatter Scatter** \ud83d\udc47"}}