{"cell_type":{"ba9d8eb1":"code","d1f897b3":"code","3b7d5f1b":"code","c73b99af":"code","13853025":"code","673b98b8":"code","857474ad":"code","9447da6d":"code","96219167":"code","b739762d":"code","9c95b3e2":"code","f959af39":"code","d36bb34f":"code","95d47247":"code","5519c73d":"code","69c2274b":"markdown","00e8df0b":"markdown","e1f3e04c":"markdown","119f35a8":"markdown","9c6a46b2":"markdown","f2f00886":"markdown","f86b81de":"markdown","09994c20":"markdown","5b480c10":"markdown","5eec1e4f":"markdown","8a46efa7":"markdown"},"source":{"ba9d8eb1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\nprint(\"Tensorflow version \" + tf.__version__)","d1f897b3":"# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","3b7d5f1b":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntrain.head()","c73b99af":"Y_train = train['label'].values.astype('float32')\nY_train","13853025":"X_train = train.drop(labels=['label'], axis=1)\nX_train.shape","673b98b8":"X_train = X_train.astype('float32')\nX_train = X_train \/ 255","857474ad":"X_train = X_train.values.reshape(42000,28,28,1)\nX_train.shape","9447da6d":"plt.imshow(X_train[1][:,:,0])","96219167":"def create_model():        \n  model = tf.keras.models.Sequential()\n  model.add(tf.keras.layers.Conv2D(filters = 32, kernel_size = (3,3), input_shape = (28,28,1)))\n  model.add(tf.keras.layers.Flatten())\n  model.add(tf.keras.layers.Dense(10, activation=\"softmax\"))\n  model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"Adam\", metrics=['accuracy'])   \n    \n  return model","b739762d":"%%time\n\nwith strategy.scope():\n  model = create_model()\n\nmodel.fit(\n    X_train, Y_train,\n    epochs=10,\n    steps_per_epoch=40,\n    verbose = 2\n)","9c95b3e2":"test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","f959af39":"test = test.astype('float32')\ntest = test \/ 255\ntest = test.values.reshape(len(test),28,28,1)\ntest.shape","d36bb34f":"%%time\n\ntest_predictions = model.predict(test)","95d47247":"# select the index with the maximum probability\n\nresults = np.argmax(test_predictions,axis = 1)\nresults = pd.Series(results,name=\"Label\")","5519c73d":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"submission.csv\",index=False)\n\nsubmission.head()","69c2274b":"### Load test data","00e8df0b":"#### Normalize data","e1f3e04c":"#### Reshape data","119f35a8":"#### Show some image","9c6a46b2":"### Submit","f2f00886":"### Train","f86b81de":"### Enable TPU","09994c20":"### This kernel shows how to easy use TPU (tensor processing unit)","5b480c10":"### Model","5eec1e4f":"### Prediction","8a46efa7":"### Load train data"}}