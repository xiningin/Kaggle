{"cell_type":{"f621699f":"code","8059cd0b":"code","185f5ce3":"code","31df2ba3":"code","ad9d32c1":"code","86fc43d1":"code","5b262272":"code","3f6c4e8f":"code","4121517a":"code","1ce59b0a":"code","1a70d8e0":"code","1280de62":"markdown","27291cee":"markdown","927c4668":"markdown","543ab814":"markdown","1b97668f":"markdown","43e87dad":"markdown","27201435":"markdown","3159e545":"markdown","6970c057":"markdown","1b10b81d":"markdown","dacc6b65":"markdown","7129a501":"markdown","f9ffb713":"markdown"},"source":{"f621699f":"# Here we import standard libraries and our environment\n# You must first add the data for the task in the settings column\nimport random\nimport numpy as np\nfrom kaggle_environments import make, evaluate\n\n# Create the game environment\nenv = make(\"connectx\", debug=True)\n\n# List the available agents\nprint(list(env.agents))","8059cd0b":"env.run([\"random\", \"random\"])\n\n# To render using iPython, we have to use a notebook as the Kaggle editor can't show HTML objects\nenv.render(mode=\"ipython\")","185f5ce3":"# Agent 1: Random\ndef agent_random(obs, config):\n    import random\n    valid_moves = [col for col in range(config.columns) if obs.board[col]==0]\n    return random.choice(valid_moves)\n\n# Agent 2: Middle\ndef agent_middle(obs, config):\n    return config.columns\/\/2\n\n# Agent 3: Leftmost\ndef agent_leftmost(obs, config):\n    valid_moves = [col for col in range(config.columns) if obs.board[col]==0]\n    return valid_moves[0]","31df2ba3":"# Choosing the random and leftmost agents\nenv.run([agent_random, agent_leftmost])\nenv.render(mode=\"ipython\")","ad9d32c1":"def get_win_percentages(agent1, agent2, n_rounds=100):\n    # Use default Connect Four setup\n    config = {'rows': 6, 'columns': 7, 'inarow': 4}\n    # Agent 1 goes first (roughly) half the time          \n    outcomes = evaluate(\"connectx\", [agent1, agent2], config, [], n_rounds\/\/2)\n    # Agent 2 goes first (roughly) half the time      \n    outcomes += [[b,a] for [a,b] in evaluate(\"connectx\", [agent2, agent1], config, [], n_rounds-n_rounds\/\/2)]\n    print(\"Agent 1 Win Percentage:\", np.round(outcomes.count([1,-1])\/len(outcomes), 2))\n    print(\"Agent 2 Win Percentage:\", np.round(outcomes.count([-1,1])\/len(outcomes), 2))\n    print(\"Number of Invalid Plays by Agent 1:\", outcomes.count([None, 0]))\n    print(\"Number of Invalid Plays by Agent 2:\", outcomes.count([0, None]))","86fc43d1":"# Compute the winning percentages\n# Commented out as it takes a while\n# get_win_percentages(agent1=agent_random, agent2=agent_random)","5b262272":"# Gets board at next step if agent drops piece in selected column\ndef drop_piece(grid, col, piece, config):\n    next_grid = grid.copy()\n    for row in range(config.rows-1, -1, -1):\n        if next_grid[row][col] == 0:\n            break\n    next_grid[row][col] = piece\n    return next_grid\n\n# Returns True if dropping piece in column results in game win\ndef check_winning_move(obs, config, col, piece):\n    import numpy as np\n    \n    # Convert the board to a 2D grid\n    grid = np.asarray(obs.board).reshape(config.rows, config.columns)\n    next_grid = drop_piece(grid, col, piece, config)\n    # horizontal\n    for row in range(config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(next_grid[row,col:col+config.inarow])\n            if window.count(piece) == config.inarow:\n                return True\n    # vertical\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns):\n            window = list(next_grid[row:row+config.inarow,col])\n            if window.count(piece) == config.inarow:\n                return True\n    # positive diagonal\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(next_grid[range(row, row+config.inarow), range(col, col+config.inarow)])\n            if window.count(piece) == config.inarow:\n                return True\n    # negative diagonal\n    for row in range(config.inarow-1, config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(next_grid[range(row, row-config.inarow, -1), range(col, col+config.inarow)])\n            if window.count(piece) == config.inarow:\n                return True\n    return False","3f6c4e8f":"def agent_blocker(obs, config):\n    # This function will be our submission so must be self-contained\n    import random\n    \n    # Produce a list of valid moves\n    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]\n    \n    # If we have a winning move, take it\n    for col in valid_moves:\n        if check_winning_move(obs, config, col, obs.mark):\n            return col \n    \n    # Else if the opponent has a winning move, block it\n    opponent = (obs.mark%2)+1\n    for col in valid_moves:\n        if check_winning_move(obs, config, col, opponent):\n            return col\n    \n    # Else return a random move\n    return random.choice(valid_moves)","4121517a":"# Run once to observe the procedure is implemented correctly\nenv.run([agent_blocker, agent_random])\nenv.render(mode=\"ipython\")\n\n# Determine the winning percentages with\nget_win_percentages(agent1=agent_blocker, agent2=agent_random)","1ce59b0a":"import inspect\nimport os\n\nf = open(\"submission.py\", \"w\")\nf.write(inspect.getsource(agent_leftmost))\nf.close()\n\nprint(\"agent_leftmost\", \"written to\", \"submission.py\")","1a70d8e0":"import inspect\nimport os\n\nf = open(\"submission.py\", \"w\")\nf.write(inspect.getsource(drop_piece))\nf.write(inspect.getsource(check_winning_move))\nf.write(inspect.getsource(agent_blocker))\nf.close()\n\nprint(\"agent_blocker\", \"written to\", \"submission.py\")","1280de62":"If, instead, we wish to submit our blocker agent, we would have to submit all functions associated with that agent. Notice that we must include our imports within the function so they are also written to the \"submission.py\" file.","27291cee":"# A smarter agent\nLet's create an agent that will always take the winning move if available. The agent (called blocker) will also observe if the other opponent can win of the next move and block accordingly.","927c4668":"To check this has worked, look in the tab to the right. Under data, find the \"output\" folder. Find your \"submission.py\" file and download it to observe the contents. We should have a self-contained script with all necessary functions for our agent. Now, we are ready to submit this solution!","543ab814":"# Winning Percentages\nWe have some hidden code to determine the percentage of wins from 100 rounds of the game","1b97668f":"# Implement the game environment\nWe want to do two things in this notebook:\n1. Test and edit our agents\n2. Submit our solution\n\nTo test and edit our agents, we have to set up the test environment as shown in the Reinforcement Learning course.","43e87dad":"# Making Our First Agents\nThe next few sections will closely follow the structure of the Reinforcement Learning course and can be skipped at your convenience.\n\nLet's create three basic agents:\n1. An agent who chooses to place his piece randomly\n2. An agent who always chooses the middle column (whether or not it's valid)\n3. An agent who always chooses the leftmost column\n\nThe competition will accept any function name so you do not need to use \"my_agent\" as in the course.","27201435":"# Check for a winning move\nDirectly copied from the course, here we write a function that determines whether a winning move is possible. If we can win of the next move, our agent makes that move.","3159e545":"# A Beginner's Guide to ConnectX\nTaking part in your first Kaggle competition is hard. Often we have a solution on our computer that works perfectly yet our submission is marked as having \"failed\". This guide should help any new Kagglers to make their first submission for the ConnectX challenge. Feel free to copy and edit this workbook to obtain an average score in the current leaderboard :)","6970c057":"# The First Step\nFirst, we have to decide to make a script or notebook in Kaggle. Submissions can be made in both but we can only observe HTML elements in notebooks. This means that to render games, we need to use a notebook.\n\nNext, we need to link this notebook to the competition dataset. Open the right-hand panel on your screen and find the data tab. Click add data and search for your competition under the competition tab. Here, we want \"ConnectX\". Add the data and we are set-up!","1b10b81d":"Let's check this works by running two random agents against each other and rendering to watch the game.","dacc6b65":"# Let's Play\nWe can now run two of these agents against each other and observe the match within our notebook.","7129a501":"# Submit to the competition\nYou may notice the following script is different to that in the course. Hopefully this is more intuitive.\n\nFirst, we open our file \"submission.py\". Then, we search through our notebook and one-by-one add the functions needed for our agent. Finally we close our file.\n\nSuppose we wanted to add our leftmost agent, we would use the following script.","f9ffb713":"# Submitting to the Competition\nI want to refer back to the course here as it offers a very good explanation of how to make our final submission.\n\n1. Begin by clicking on the blue Save Version button in the top right corner of the window. This will generate a pop-up window.\n2. Ensure that the Save and Run All option is selected, and then click on the blue Save button.\n3. This generates a window in the bottom left corner of the notebook. After it has finished running, click on the number to the right of the Save Version button. This pulls up a list of versions on the right of the screen. Click on the ellipsis (...) to the right of the most recent version, and select Open in Viewer. This brings you into view mode of the same page. You will need to scroll down to get back to these instructions.\n4. Click on the Output tab on the right of the screen. Then, click on the blue Submit button to submit your results to the leaderboard.\n\nAnd you've submitted!!! :)\n\nI hope you all found success with this notebook. If you're still having difficulties submitting, feel free to comment on this notebook and I'll reply as soon as I can."}}