{"cell_type":{"d673d3be":"code","ca5f32f3":"code","ac1a38f8":"code","85fc39fd":"code","91d87757":"code","58e55344":"code","4a2174fb":"code","58addc5c":"code","7ae0fb42":"code","96ad0c91":"code","bd4ba7d7":"code","3ed1f849":"code","0d56054d":"code","7b63f9da":"code","1a9e0132":"code","574025ce":"code","24430b6a":"code","844a5e83":"code","be96de07":"code","199cc297":"code","deaa2daa":"code","c11c7341":"code","e3b8161a":"code","2f5cd922":"code","14326420":"code","ce7cffd3":"code","47e7e020":"code","4a863fd1":"code","df50f8bf":"code","ef7e5be9":"code","5bf6f554":"code","37b9d460":"code","6c98662b":"code","432d0489":"code","e29a5720":"code","92f0ed1c":"code","58b4b394":"code","25539217":"code","60bd386f":"code","c03c3eb3":"code","cbd120af":"code","c7865984":"code","71cc2ced":"code","525c5e4c":"code","1af4a9f3":"code","7301d6e3":"code","fcf71a86":"code","35596563":"code","18b459e6":"markdown","bd32c9fe":"markdown","f935626f":"markdown","9ebbc661":"markdown","da46964d":"markdown","58fcddcb":"markdown","ff212a0b":"markdown","5f475a3e":"markdown","54c6188a":"markdown","238b8e16":"markdown","e1a0b1a8":"markdown","eb819001":"markdown","6b281a2c":"markdown","a8816b3d":"markdown","39d955ac":"markdown","2018a5ab":"markdown","7175cd65":"markdown","1f0bab35":"markdown","f598f5d6":"markdown","874c00b6":"markdown","37ac7dae":"markdown","df394709":"markdown","6c1842a1":"markdown","dee3ac19":"markdown"},"source":{"d673d3be":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Machine Learning\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\n\nsns.set_style(\"darkgrid\")","ca5f32f3":"df = pd.read_csv(\"..\/input\/train.csv\")\ndf.sample(5)","ac1a38f8":"df.shape","85fc39fd":"df.info()","91d87757":"df_test = pd.read_csv(\"..\/input\/test.csv\")\ndf_test.sample(5)","58e55344":"df_test.shape","4a2174fb":"df_test.info()","58addc5c":"example = pd.read_csv(\"..\/input\/gender_submission.csv\")\nexample.head(5)","7ae0fb42":"example.shape","96ad0c91":"df['PassengerId'].nunique() == df.shape[0]","bd4ba7d7":"print(\"Class frequency:\")\nfor index,value in zip(df['Pclass'].value_counts().index,df['Pclass'].value_counts().values):\n    print(\"Class {} => {} ({:.2f}%)\".format(index,value,(value\/df.shape[0])*100))","3ed1f849":"sns.countplot(x=\"Pclass\",hue=\"Survived\",data=df,palette=\"YlGnBu\")","0d56054d":"df['Name'].apply(lambda x: x.split(\".\")[0].split(\",\")[1]).value_counts()","7b63f9da":"print(\"Frequency:\")\nfor index,value in zip(df['Sex'].value_counts().index,df['Sex'].value_counts().values):\n    print(\"{} => {} ({:.2f}%)\".format(index.capitalize(),value,(value\/df.shape[0])*100))","1a9e0132":"sns.countplot(x=\"Sex\",hue=\"Survived\",data=df,palette=\"YlGnBu\")","574025ce":"print(\"Age:\\nMin: {} | Max: {} | Mean: {} | Std: {}\".format(df.Age.min(),df.Age.max(),df.Age.mean(),df.Age.std()))","24430b6a":"sns.distplot(df['Age'].dropna())","844a5e83":"sns.boxplot(hue=\"Sex\",y=\"Age\",x=\"Survived\",data=df)","be96de07":"sns.countplot(df['SibSp'])","199cc297":"sns.countplot(x=\"SibSp\",hue=\"Survived\",data=df)","deaa2daa":"sns.countplot(df['Parch'])","c11c7341":"sns.countplot(x=\"Parch\",hue=\"Survived\",data=df)","e3b8161a":"df['Ticket'].value_counts().head()","2f5cd922":"df[df['Ticket']=='CA. 2343']","14326420":"print(\"Age:\\nMin: {} | Max: {} | Mean: {} | Std: {}\".format(df.Fare.min(),df.Fare.max(),df.Fare.mean(),df.Fare.std()))","ce7cffd3":"df[~df.Cabin.isna()].sample(10)","47e7e020":"sns.countplot(x=\"Embarked\",hue=\"Survived\",data=df,palette=\"YlGnBu\")","4a863fd1":"def extractFeatures(df,type=\"train\"):\n    df['Sex'] = df['Sex'].apply(lambda x: np.where(x=='male',1,0))\n    df['Age'].fillna((int(df['Age'].mean())+1),inplace=True)\n    df['Cabin_letter'] = df['Cabin'].str[0]\n    df['Cabin_num'] = df['Cabin'].apply(lambda x: x.split(\" \")[0][1:] if isinstance(x, str) else \"X\")\n    df = pd.concat([df,pd.get_dummies(df['Cabin_letter'],prefix=\"Cabin\")],axis=1)\n    df = pd.concat([df,pd.get_dummies(df['Embarked'],prefix=\"Embarked\")],axis=1)\n    if type==\"train\":\n        return df[['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked_C','Embarked_S','Cabin_A','Cabin_B','Cabin_C','Cabin_D','Cabin_E','Cabin_F','Cabin_G','Cabin_num','Survived']]\n    else:\n        return df[['PassengerId','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked_C','Embarked_S','Cabin_A','Cabin_B','Cabin_C','Cabin_D','Cabin_E','Cabin_F','Cabin_G','Cabin_num']]","df50f8bf":"df = extractFeatures(df)","ef7e5be9":"df_test = extractFeatures(df_test,type=\"test\")","5bf6f554":"df.corr()","37b9d460":"df2 = df[(df['Cabin_num']!='X')&(df['Cabin_num']!='')]\ndf2_test = df_test[(df_test['Cabin_num']!='X')&(df_test['Cabin_num']!='')]\ndf2['Cabin_num'] = df2['Cabin_num'].astype(int)\ndf2_test['Cabin_num'] = df2_test['Cabin_num'].astype(int)","6c98662b":"df = df[['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked_C','Embarked_S','Survived']]\ndf_test = df_test[['PassengerId','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked_C','Embarked_S']]","432d0489":"X_train,y_train = df.iloc[:,:-1],df.iloc[:,-1]\nX_train2,y_train2 = df2.iloc[:,:-1],df2.iloc[:,-1]","e29a5720":"model = XGBClassifier()\nmodel.fit(X_train,y_train)","92f0ed1c":"y_pred = model.predict(df_test.drop(['PassengerId'],axis=1))","58b4b394":"df_test['Survived'] = y_pred\nsub = df_test[['PassengerId','Survived']]","25539217":"#sub = pd.read_csv(\"..\/output\/submission1.csv\")","60bd386f":"model.fit(X_train2,y_train2)\ny_pred = model.predict(df2_test.drop(['PassengerId'],axis=1))\ndf2_test['Survived'] = y_pred\nsub2 = df2_test[['PassengerId','Survived']]","c03c3eb3":"#sub.to_csv('submission1.csv',index=False)","cbd120af":"sub2","c7865984":"sub = sub.merge(sub2,on=\"PassengerId\",how=\"left\")","71cc2ced":"sub['Survived_y'] = sub['Survived_y'].fillna(-1)","525c5e4c":"sub['Survived'] = sub.apply(lambda x: x['Survived_y'] if ((x['Survived_y']!=-1)and(x['Survived_x']!=x['Survived_y'])) else x['Survived_x'],axis=1)","1af4a9f3":"sub['Survived'] = sub['Survived'].astype(int)","7301d6e3":"sub[['PassengerId','Survived']].to_csv(\"submission2.csv\",index=False)","fcf71a86":"#sns.countplot(x=\"Cabin_letter\",hue=\"Survived\",data=df,palette=\"YlGnBu\")","35596563":"#df[df['Cabin_letter']=='E']","18b459e6":"Apparently exists a correlation between `Pclass` and `Survived`","bd32c9fe":"#### Pclass","f935626f":"#### Embarked","9ebbc661":"#### Name","da46964d":"#### Sex","58fcddcb":"#### Cabin","ff212a0b":"* It's possible to see an imbalance in the sex distribution too","5f475a3e":"It's possible to see an imbalance in the classes frequency","54c6188a":"#### PassengerId","238b8e16":"There is no need to do any grouping or cleanup, since the submission example has the same size as the test dataset.","e1a0b1a8":"### Feature Engineering","eb819001":"### Modeling","6b281a2c":"#### Test","a8816b3d":"#### Fare","39d955ac":"### Importing data","2018a5ab":"#### Parch","7175cd65":"#### Train","1f0bab35":"#### Submission example","f598f5d6":"Each row is a unique passenger","874c00b6":"#### Age","37ac7dae":"#### Ticket","df394709":"#### Sibsp","6c1842a1":"Apparently exists a correlation between `Sex` and `Survived`","dee3ac19":"### Exploratory Data Analysis"}}