{"cell_type":{"259512e1":"code","d729de6f":"code","421b8022":"code","ed78eca0":"code","7f30c153":"code","696b5659":"code","2aa7b8eb":"code","0e21cee5":"code","570cb34a":"markdown","70d1da21":"markdown","5fb821ca":"markdown","8fbf9bf2":"markdown","420bafea":"markdown","277fe0a7":"markdown","0cba7ab1":"markdown","c5dc405f":"markdown","e563fe63":"markdown"},"source":{"259512e1":"#misc.\nimport warnings\n\n#libraries for analysis.\nimport numpy as np\nimport pandas as pd\n\n#libraries for visualization.\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\n#libraries for machine learning.\nfrom sklearn import linear_model\nfrom sklearn import svm\nimport lightgbm as lgb\n\n#reading train.csv and test.csv with pandas\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\nwarnings.filterwarnings(\"ignore\")","d729de6f":"train.info()\ntrain.head()\ntrain.count()\ntrain.describe()","421b8022":"solos = train[train['numGroups']>50]\nduos = train[(train['numGroups']>25) & (train['numGroups']<=50)]\nsquads = train[train['numGroups']<=25]\nprint(\"There are {} ({:.2f}%) solo games, {} ({:.2f}%) duo games and {} ({:.2f}%) squad games.\".format(len(solos), 100*len(solos)\/len(train), len(duos), 100*len(duos)\/len(train), len(squads), 100*len(squads)\/len(train),))","ed78eca0":"f,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(train.corr(), annot=True, linewidths=.5, fmt= '.1f', ax=ax)\n#sns.heatmap(solos.corr(), annot=True, linewidths=.5, fmt= '.1f', ax=ax)\n#sns.heatmap(duos.corr(), annot=True, linewidths=.5, fmt= '.1f', ax=ax)\n#sns.heatmap(squads.corr(), annot=True, linewidths=.5, fmt= '.1f', ax=ax)\nplt.show()","7f30c153":"train03 = train.drop([\n    'Id', 'groupId', 'matchId', 'killPoints', 'maxPlace', 'roadKills', \n    'swimDistance', 'teamKills', 'vehicleDestroys', 'winPoints', 'numGroups'\n], axis=1).copy()\n\ntrain04 = train.drop([\n    'Id', 'groupId', 'matchId', 'killPoints', 'maxPlace', 'roadKills', \n    'swimDistance', 'teamKills', 'vehicleDestroys', 'winPoints', 'numGroups', \n    'assists', 'DBNOs', 'headshotKills', 'revives', 'rideDistance'\n], axis=1).copy()\n\ntrain05 = train.drop([\n    'Id', 'groupId', 'matchId', 'killPoints', 'maxPlace', 'roadKills', \n    'swimDistance', 'teamKills', 'vehicleDestroys', 'winPoints', 'numGroups', \n    'assists', 'DBNOs', 'headshotKills', 'revives', 'rideDistance', 'killPlace'\n], axis=1).copy()\n\nX_test = test.drop([\n    'Id', 'groupId', 'matchId', 'killPoints', 'maxPlace', 'roadKills', \n    'swimDistance', 'teamKills', 'vehicleDestroys', 'winPoints', 'numGroups'\n], axis=1).copy()","696b5659":"X_train03 = train03.drop(\"winPlacePerc\", axis=1)\nX_train04 = train04.drop(\"winPlacePerc\", axis=1)\nX_train05 = train05.drop(\"winPlacePerc\", axis=1)\n\nY_train03 = train03[\"winPlacePerc\"]\nY_train04 = train04[\"winPlacePerc\"]\nY_train05 = train05[\"winPlacePerc\"]","2aa7b8eb":"models = [\n    #linear_model.BayesianRidge(),           # train03=79.71 | train04=79.48 | train05=70.56\n    #linear_model.LinearRegression(),        # train03=79.71 | train04=79.48 | train05=70.56\n    lgb.LGBMRegressor(n_estimators=550, num_leaves=55)                     # train03=87.17 | train04=86.69 | train05=78.66\n]\n\nfor model in models:\n    print(model)\n    model.fit(X_train03, Y_train03)\n    print(round(model.score(X_train03, Y_train03) * 100, 2), '\\n')\n    \n#for model in models:\n#    print(model)\n#    model.fit(X_train04, Y_train04)\n#    print(round(model.score(X_train04, Y_train04) * 100, 2), '\\n')\n    \n#for model in models:\n#    print(model)\n#    model.fit(X_train05, Y_train05)\n#    print(round(model.score(X_train05, Y_train05) * 100, 2), '\\n')\n    \nprediction = model.predict(X_test)","0e21cee5":"submission = pd.DataFrame({\n        \"Id\": test[\"Id\"],\n        \"winPlacePerc\": prediction\n})\n\nsubmission.to_csv('submission.csv', index=False)","570cb34a":"**Predicting with several models and scoring them.**","70d1da21":"**Preparing our datasets to prediction.**","5fb821ca":"**Correlation heatmap for solos, duos and squad.** Review","8fbf9bf2":"**Still working on it...**","420bafea":"**Sending prediction.**","277fe0a7":"**Removing features that not going to influence in prediction, like id's and others identified througt correlation heatmap.** Test","0cba7ab1":"**Identifiyng solos, duos and squads by \"numGroups\" attribute.** Review","c5dc405f":"**Getting some basic info about the train dataset.**","e563fe63":"## PUBG analisys\n**Lets make some data magic!**"}}