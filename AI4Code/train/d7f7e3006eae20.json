{"cell_type":{"51193177":"code","66814679":"code","2f84b112":"code","5c0040ff":"code","ac8f6647":"code","e2a2996e":"code","1b0abee0":"code","03284a7d":"code","c7cd94c9":"code","c2141aaa":"code","71226ec1":"code","2483cdf8":"code","da2a63e9":"code","b5593e1d":"code","eeea81c2":"code","5efd6530":"markdown","b78b3c52":"markdown","ad0d709d":"markdown","7d5b3f46":"markdown","7a5b912b":"markdown","46b167a4":"markdown","b2c9839c":"markdown","92a6cf47":"markdown","eda8eabe":"markdown","69054f35":"markdown"},"source":{"51193177":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport os\nimport glob\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nimport cv2 as cv\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import Conv2D,Flatten,Dropout,Dense\nfrom tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Model","66814679":"train_path='..\/input\/tire-texture-image-recognition\/Tire Textures\/training_data'\ntest_path='..\/input\/tire-texture-image-recognition\/Tire Textures\/testing_data'\nEPOCHS=10\nBATCH_SIZE=32\nRANDOM_SEED=42","2f84b112":"labels=os.listdir(train_path)\nlabels","5c0040ff":"train_cracked=train_path+\"\/cracked\/\"\ntrain_normal=train_path+\"\/normal\/\"\nlen(os.listdir(train_cracked))\nrandom_num=np.random.randint(0,len(os.listdir(train_cracked)))\npic_path=os.listdir(train_cracked)[random_num]\n\nimg_path=train_cracked + pic_path\nplt.imshow(plt.imread(img_path))","ac8f6647":"train_normal=train_path+\"\/normal\/\"\nlen(os.listdir(train_normal))\nrandom_num=np.random.randint(0,len(os.listdir(train_normal)))\npic_path=os.listdir(train_normal)[random_num]\n\nimg_path=train_normal + pic_path\nplt.imshow(plt.imread(img_path))","e2a2996e":"def process(data):\n    path=Path(data)#converting the string to path\n    filepaths=list(path.glob(r\"*\/*.jpg\"))#Going through all the subpaths \n    labels=list(map(lambda x: os.path.split(os.path.split(x)[0])[1],filepaths))#Separating the label from filepath and storing it\n    df1=pd.Series(filepaths,name='filepaths').astype(str)\n    df2=pd.Series(labels,name='labels')\n    df=pd.concat([df1,df2],axis=1)#Making the dataframe\n    return df","1b0abee0":"df_train=process(train_path)\ndf_test=process(test_path)","03284a7d":"train_generator=ImageDataGenerator( preprocessing_function=preprocess_input)\ntest_generator=ImageDataGenerator( preprocessing_function=preprocess_input)","c7cd94c9":"train_image=train_generator.flow_from_dataframe(dataframe=df_train,\n                                                x_col='filepaths',\n                                                y_col='labels',\n                                                target_size=(224,224),\n                                                batch_size=BATCH_SIZE,\n                                                subset='training',\n                                                random_seed=RANDOM_SEED)\n\ntest_image = test_generator.flow_from_dataframe(\n    dataframe=df_test,\n    x_col='filepaths',\n    y_col='labels',\n    target_size=(224,224),\n    batch_size=BATCH_SIZE,\n    random_seed=RANDOM_SEED\n)","c2141aaa":"pretrained_model = ResNet50(\n    input_shape=(224,224, 3),\n    include_top=False,\n    weights='imagenet',\n    pooling='max'\n)\npretrained_model.trainable = False#We don't want to train again the resnet","71226ec1":"inputs = pretrained_model.input\n\nx = Dense(120, activation='relu')(pretrained_model.output)\nx = Dense(120, activation='relu')(x)#adding some custom layers of our coice\n\noutputs = Dense(2, activation='sigmoid')(x)\n#output choice\nmodel = Model(inputs=inputs, outputs=outputs)","2483cdf8":"model.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=['accuracy']\n)","da2a63e9":"mo_fit=model.fit(train_image,epochs=EPOCHS)","b5593e1d":"pd.DataFrame(mo_fit.history)[['accuracy']].plot()\nplt.title(\"Accuracy\")\nplt.show()\npd.DataFrame(mo_fit.history)[['loss']].plot()\nplt.title(\"Loss\")\nplt.show()","eeea81c2":"model.evaluate(test_image)","5efd6530":"# If u find this notebook helpful them please give it a upvote","b78b3c52":"# Performance plots","ad0d709d":"# Preparing our dataset","7d5b3f46":"# Training","7a5b912b":"# Config","46b167a4":"# Thank you and Don't foget to upvote","b2c9839c":"# Model building","92a6cf47":"# Data visualization","eda8eabe":"# Evaluation on test set","69054f35":"## Importing libraries and dependencies"}}