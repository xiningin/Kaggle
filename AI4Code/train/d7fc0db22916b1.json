{"cell_type":{"1f65f598":"code","194bdb9c":"code","adcf936b":"code","fe709bee":"code","c99f5a90":"code","33e39851":"code","fd20bdbf":"code","fab65de8":"code","32fcbb36":"code","66e5d696":"code","f01d73f4":"code","13f67cfe":"code","b6d202a6":"code","1de7b991":"code","b12c9935":"code","4cff2d5f":"code","94a204ee":"code","8db10b07":"code","563ed344":"code","5528dba0":"code","df5110e4":"code","911c5f00":"code","a2ea4fca":"code","b2faf6b5":"code","c26eec48":"code","f2bbfaf1":"code","45b1b08f":"code","82f4590e":"markdown","e44563f6":"markdown","d578cdb4":"markdown","f3c07437":"markdown","8ff4592c":"markdown","3407a565":"markdown"},"source":{"1f65f598":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","194bdb9c":"%ls \"..\/input\"","adcf936b":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib import pyplot\nimport plotly.express as px","fe709bee":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","c99f5a90":"train_data.hist(figsize=(10,10))\npyplot.show()","33e39851":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","fd20bdbf":"test_data.hist(figsize=(10,10))\npyplot.show()","fab65de8":"train_data.plot(kind='box', subplots=True, layout = (4,4), figsize=(15,15), sharex=False, sharey=False)\npyplot.show()","32fcbb36":"corrmat = train_data.corr()\nsns.clustermap(corrmat)","66e5d696":"px.scatter_matrix(train_data, height=900 )","f01d73f4":"pd.plotting.scatter_matrix(train_data, figsize=(10, 10) )\npyplot.show()","13f67cfe":"train_data.info()\ntest_data.info()","b6d202a6":"train_data.describe()","1de7b991":"na_values =train_data.isna().sum()\nna_values","b12c9935":"train_data.isnull().sum()\/len(train_data)*100","4cff2d5f":"sns.barplot(x='Survived', data=train_data)","94a204ee":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","8db10b07":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","563ed344":"sns.barplot(x=\"Sex\", y=\"Survived\",data=train_data)","5528dba0":"print(train_data.shape)","df5110e4":"print(train_data[train_data[\"Pclass\"]==1]['Name'].sort_values())","911c5f00":"train_data.describe","a2ea4fca":"sns.barplot(x='Embarked', y='Survived', hue='Sex', data=train_data)","b2faf6b5":"sns.pointplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data=train_data,\n                 palette={\"male\": \"blue\", \"female\": \"pink\"},\n                  markers=[\"*\", \"o\"], linestyles=[\"-\", \"--\"])","c26eec48":"sns.barplot(x=\"Age\", y=\"Survived\", hue=\"Sex\", data=train_data)","f2bbfaf1":"sns.barplot(x=\"Cabin\", y=\"Survived\", hue=\"Sex\", data=train_data)","45b1b08f":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","82f4590e":"# Univariate Plots","e44563f6":"# De esta forma, vemos los sobrevivientes seg\u00fan su edad.","d578cdb4":"# Muestra los nombres de las personas que iban en primera clase ordenadas alfab\u00e9ticamente.","f3c07437":"# Podemos obtener informaci\u00f3n de los principales indicadores estad\u00edsticos sobre nuestro dataset en una sola l\u00ednea ","8ff4592c":"# Multivariate Plots","3407a565":"# Para saber cu\u00e1ntos registros tengo"}}