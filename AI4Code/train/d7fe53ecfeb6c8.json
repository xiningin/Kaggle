{"cell_type":{"7d215813":"code","b9a935b9":"code","8541a637":"code","9128e11c":"code","d7fc3a4e":"code","be514841":"code","a4746819":"code","5bf6908a":"code","8ae93e5d":"code","804542c0":"code","5df63666":"code","9882157c":"code","c4e66ea2":"code","4630baa0":"code","d5ac4218":"code","8a8c28c6":"code","5be52fbf":"code","1c894f52":"code","e8df6f17":"code","bbde72cc":"code","966c08d8":"code","3c16e663":"code","5d1dd806":"code","3f4fe529":"code","63c2b40e":"code","13eb9cf2":"code","c0a459fb":"code","87eeae54":"code","8565833d":"code","24aaf1d6":"code","bd8858a8":"code","5347c7fa":"code","035571c6":"code","1eb768d8":"code","36fe2cbb":"code","d7db469d":"code","12482305":"code","8dd73491":"code","bd13396a":"code","040a3e96":"code","683293d1":"code","928881e2":"code","26c5124b":"code","012b40d7":"code","c8a5855c":"code","a08d18c8":"code","4955f5c6":"code","85100562":"code","ea902a3d":"code","7f219f0a":"code","0d16a272":"code","2cb5d5a4":"code","808eaae4":"code","787058cc":"code","1bf47952":"code","bb4abd9f":"code","2df0c1a7":"code","2fe705e8":"code","b76d1f48":"code","47e8f09d":"code","ecdf9825":"code","d9805ddf":"code","82106d79":"code","7316206c":"code","43c10bb2":"code","89e2f460":"code","36c74974":"code","bdf8624e":"code","995c1c7c":"code","712b452f":"code","afab3752":"code","2c92a258":"code","79db7cc8":"code","2349c736":"code","6efd5a71":"code","ab120730":"code","4466e11c":"code","5eb775ec":"code","6716cc3f":"code","48d93c87":"code","002046f0":"code","5e6ec0c5":"code","99f901a3":"code","c11b1245":"code","b02a02ea":"code","4fb9cfbe":"code","eefb5439":"code","e43ab779":"code","ee0cdab7":"code","b438734b":"code","9e825969":"code","d1bc077e":"code","92e7653f":"code","1a788d66":"code","64818fe5":"code","a4ee87d8":"code","2380cec8":"code","118eb07c":"code","883d76b0":"code","4bd1aacc":"code","65f21747":"code","f9a908e5":"code","5defc42a":"code","463e585e":"code","ebc5e225":"code","9a3ea5b2":"code","cd44dc0a":"code","e88f8153":"code","10def817":"code","fc6c80ac":"code","5faaee1e":"code","150fe98c":"code","c6023b93":"code","a9d2302d":"code","ce777a1f":"code","06fc9fc6":"code","f639d192":"code","fcc33747":"code","0a7bb41b":"code","5f8f0a82":"code","ae0b320f":"code","9e17da80":"code","f24aab6a":"code","bc3e2d59":"code","576c1259":"code","14d4c570":"code","8a6a2330":"code","bdea612e":"code","c0729f68":"code","44d1b6b7":"code","996e7524":"code","8925bf46":"code","d9d7877b":"code","28981f2d":"code","208d61d1":"code","820a23a3":"code","3618aa84":"code","b8d37ad6":"code","85a85bb7":"code","cd2793c1":"code","e664e804":"code","d6ebd27a":"code","f2414eec":"code","42c95a04":"code","1ccebb29":"code","12e3deae":"code","d540b1e7":"code","0eae989a":"code","0d922d4f":"code","08f98695":"code","d4fea747":"code","29d4ffcf":"code","683534cc":"code","4b86bccc":"code","08027981":"code","00106886":"code","cf38dab0":"code","82db90b9":"code","cfd3b473":"code","ead2092a":"code","6022141c":"code","46d6447f":"code","7ea4669e":"code","d54be211":"code","23bd1fb7":"code","bf9368d7":"code","61bbfed6":"code","41a2fc2c":"code","640b1f10":"code","0c9d8938":"code","9fa89870":"code","a29c4007":"code","046f8ccd":"code","d5a2b171":"code","1ff5799d":"code","c3106c6d":"code","9e64e116":"code","7a2ed6cf":"code","2ab3f79e":"code","bbdb3d95":"code","0b03b214":"code","7a3e14c7":"code","07f4fe0e":"code","e99126e7":"code","e3d2271a":"code","c784d7e1":"code","8138285f":"code","a50f8d24":"code","d4d9823f":"code","77eb48de":"code","810a9af1":"code","04368e2e":"code","812ada7d":"code","a9cfe4fe":"code","d2731644":"code","ffb3f67f":"code","5b0b927d":"code","da619536":"code","883ad5e2":"code","a796e625":"code","c76ec0c0":"code","461bc5f8":"code","7c9efec4":"code","4b5bd6ab":"code","d2a1f9b2":"code","440108b2":"code","1311c071":"code","2049ff5c":"code","c97b82fa":"code","db788ddf":"code","c94b6bfb":"code","c6c1bd03":"markdown","202ef627":"markdown","3097b6de":"markdown","a255e286":"markdown","07a6dff6":"markdown","1ba0cb54":"markdown","7b6e1747":"markdown","0fe9be73":"markdown","e9fd1b90":"markdown","b3f697f9":"markdown","1ee82c56":"markdown","6a862597":"markdown","7658c275":"markdown","a07a8d98":"markdown","a68ead69":"markdown","03c2b2cb":"markdown","77ed253e":"markdown","9d12deac":"markdown","e7fe41e6":"markdown","021f8ca1":"markdown","aae9c35a":"markdown","baa6af32":"markdown","b6cb9f10":"markdown","acc6fb83":"markdown","3dd63567":"markdown","22234431":"markdown","cd7932db":"markdown","2f3be3ee":"markdown","0bcb0e94":"markdown","7bb526ed":"markdown","a3fdfb0f":"markdown","9bbde157":"markdown","2aee9c66":"markdown"},"source":{"7d215813":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b9a935b9":"import random\nimport glob\nimport cv2\nimport os\n\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\nfrom pandas import DataFrame, Series\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\n\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import StratifiedKFold, GridSearchCV, RandomizedSearchCV, train_test_split, KFold\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.preprocessing import StandardScaler\nfrom category_encoders import OrdinalEncoder, OneHotEncoder, TargetEncoder\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nimport nltk\nfrom nltk.stem.porter import *\nfrom nltk.tokenize import word_tokenize, sent_tokenize\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction import stop_words\nimport string\n\nfrom lightgbm import LGBMRegressor\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.utils import plot_model\nfrom tensorflow.keras.layers import Flatten, Conv2D, MaxPooling2D, GlobalAveragePooling2D\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, Callback, ReduceLROnPlateau\nfrom tensorflow.keras.applications import VGG16\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport warnings \nwarnings.filterwarnings('ignore')","8541a637":"pd.set_option('display.max_rows', 100)","9128e11c":"df_train = pd.read_csv('..\/input\/sales-prediction-of-clothes-in-e-commerce\/train.csv')\ndf_test = pd.read_csv('..\/input\/sales-prediction-of-clothes-in-e-commerce\/test.csv')","d7fc3a4e":"df_train.shape, df_test.shape","be514841":"df_train.head()","a4746819":"df_test.head()","5bf6908a":"df_train.isnull().sum()","8ae93e5d":"df_test.isnull().sum()","804542c0":"df_train.dtypes","5df63666":"df_train.nunique()","9882157c":"df_test.nunique()","c4e66ea2":"df_train.columns","4630baa0":"df_train['num_null'] = df_train.isnull().sum(axis=1)\ndf_test['num_null'] = df_train.isnull().sum(axis=1)","d5ac4218":"def clipping(val):\n    global min_cap,max_cap\n    if val<min_cap:\n        return min_cap\n    if val>max_cap:\n        return max_cap\n    return val","8a8c28c6":"col = 'price'","5be52fbf":"df_train[col].isnull().sum(), df_test[col].isnull().sum()","1c894f52":"df_train[col].describe()","e8df6f17":"df_test[col].describe()","bbde72cc":"plt.figure(figsize=[10,5])\ndf_train[col].hist(density=True, alpha=0.5, bins=20)\ndf_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","966c08d8":"col = 'retail_price'","3c16e663":"df_train[col].isnull().sum(), df_test[col].isnull().sum()","5d1dd806":"df_train[col].describe()","3f4fe529":"df_test[col].describe()","63c2b40e":"plt.figure(figsize=[10,5])\ndf_train[col].hist(density=True, alpha=0.5, bins=20)\ndf_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","13eb9cf2":"col = 'profit'","c0a459fb":"df_train[col] = df_train['retail_price'] - df_train['price']\ndf_test[col] = df_test['retail_price'] - df_test['price']","87eeae54":"df_train[col].describe()","8565833d":"df_test[col].describe()","24aaf1d6":"plt.figure(figsize=[10,5])\ndf_train[col].hist(density=True, alpha=0.5, bins=20)\ndf_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel('delta')\nplt.ylabel('density')\nplt.show()","bd8858a8":"col = 'price_ratio'","5347c7fa":"df_train[col] = df_train['retail_price'] \/ df_train['price']\ndf_test[col] = df_test['retail_price'] \/ df_test['price']","035571c6":"df_train[col].describe()","1eb768d8":"df_test[col].describe()","36fe2cbb":"plt.figure(figsize=[10,5])\ndf_train[col].hist(density=True, alpha=0.5, bins=20)\ndf_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel('delta')\nplt.ylabel('density')\nplt.show()","d7db469d":"col = 'profit_ratio'","12482305":"df_train[col] = (df_train['retail_price'] - df_train['price']) \/ df_train['price']\ndf_test[col] = (df_test['retail_price'] - df_test['price']) \/ df_test['price']","8dd73491":"df_train[col].describe()","bd13396a":"df_test[col].describe()","040a3e96":"plt.figure(figsize=[10,5])\ndf_train[col].hist(density=True, alpha=0.5, bins=20)\ndf_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel('ratio2')\nplt.ylabel('density')\nplt.show()","683293d1":"cols = ['retail_price']","928881e2":"for col in cols:\n    min_cap=0; max_cap=1000\n    df_train[col] = df_train[col].apply(clipping)\n    df_test[col] = df_test[col].apply(clipping)\n    df_train[col] = df_train[col].apply(np.log1p)\n    df_test[col] = df_test[col].apply(np.log1p)\n    plt.figure(figsize=[10,5])\n    df_train[col].hist(density=True, alpha=0.5, bins=20)\n    df_test[col].hist(density=True, alpha=0.5, bins=20)\n    plt.xlabel(col)\n    plt.ylabel('density')\n    plt.show()","26c5124b":"col = 'uses_ad_boosts'","012b40d7":"df_train[col].isnull().sum(), df_test[col].isnull().sum()","c8a5855c":"df_train[col].value_counts()","a08d18c8":"df_test[col].value_counts()","4955f5c6":"col = 'rating_five_count'","85100562":"df_train[col].isnull().sum(), df_test[col].isnull().sum()","ea902a3d":"# \u6b20\u640d\u5024\u57cb\u3081\ndf_train[col].fillna(df_train[col].median(), inplace=True)\ndf_test[col].fillna(df_test[col].median(), inplace=True)","7f219f0a":"df_train[col].describe()","0d16a272":"df_test[col].describe()","2cb5d5a4":"plt.figure(figsize=[10,5])\ndf_train[col].hist(density=True, alpha=0.5, bins=20)\ndf_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","808eaae4":"col = 'rating_four_count'","787058cc":"df_train[col].isnull().sum(), df_test[col].isnull().sum()","1bf47952":"# \u6b20\u640d\u5024\u57cb\u3081\ndf_train[col].fillna(df_train[col].median(), inplace=True)\ndf_test[col].fillna(df_test[col].median(), inplace=True)","bb4abd9f":"df_train[col].describe()","2df0c1a7":"df_test[col].describe()","2fe705e8":"plt.figure(figsize=[10,5])\ndf_train[col].hist(density=True, alpha=0.5, bins=20)\ndf_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","b76d1f48":"col = 'rating_three_count'","47e8f09d":"df_train[col].isnull().sum(), df_test[col].isnull().sum()","ecdf9825":"# \u6b20\u640d\u5024\u57cb\u3081\ndf_train[col].fillna(df_train[col].median(), inplace=True)\ndf_test[col].fillna(df_test[col].median(), inplace=True)","d9805ddf":"df_train[col].describe()","82106d79":"df_test[col].describe()","7316206c":"plt.figure(figsize=[10,5])\ndf_train[col].hist(density=True, alpha=0.5, bins=20)\ndf_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","43c10bb2":"col = 'rating_two_count'","89e2f460":"df_train[col].isnull().sum(), df_test[col].isnull().sum()","36c74974":"# \u6b20\u640d\u5024\u57cb\u3081\ndf_train[col].fillna(df_train[col].median(), inplace=True)\ndf_test[col].fillna(df_test[col].median(), inplace=True)","bdf8624e":"df_train[col].describe()","995c1c7c":"df_test[col].describe()","712b452f":"plt.figure(figsize=[10,5])\ndf_train[col].hist(density=True, alpha=0.5, bins=20)\ndf_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","afab3752":"col = 'rating_one_count'","2c92a258":"df_train[col].isnull().sum(), df_test[col].isnull().sum()","79db7cc8":"# \u6b20\u640d\u5024\u57cb\u3081\ndf_train[col].fillna(df_train[col].median(), inplace=True)\ndf_test[col].fillna(df_test[col].median(), inplace=True)","2349c736":"df_train[col].describe()","6efd5a71":"df_test[col].describe()","ab120730":"plt.figure(figsize=[10,5])\ndf_train[col].hist(density=True, alpha=0.5, bins=20)\ndf_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","4466e11c":"col = 'rating'","5eb775ec":"df_train[col] = (df_train['rating_five_count']*5 + df_train['rating_four_count']*4 +\\\n                df_train['rating_three_count']*3 + df_train['rating_two_count']*2 +\\\n                df_train['rating_one_count']) \/ (df_train['rating_five_count'] +\\\n                df_train['rating_four_count'] + df_train['rating_three_count'] +\\\n                df_train['rating_two_count'] + df_train['rating_one_count'])","6716cc3f":"df_test[col] = (df_test['rating_five_count']*5 + df_test['rating_four_count']*4 +\\\n                df_test['rating_three_count']*3 + df_test['rating_two_count']*2 +\\\n                df_test['rating_one_count']) \/ (df_test['rating_five_count'] +\\\n                df_test['rating_four_count'] + df_test['rating_three_count'] +\\\n                df_test['rating_two_count'] + df_test['rating_one_count'])","48d93c87":"df_train[col].describe()","002046f0":"df_test[col].describe()","5e6ec0c5":"plt.figure(figsize=[10,5])\ndf_train[col].hist(density=True, alpha=0.5, bins=20)\ndf_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","99f901a3":"col = 'shipping_option_price'","c11b1245":"df_train[col].isnull().sum(), df_test[col].isnull().sum()","b02a02ea":"df_train[col].describe()","4fb9cfbe":"df_test[col].describe()","eefb5439":"plt.figure(figsize=[10,5])\ndf_train[col].hist(density=True, alpha=0.5, bins=20)\ndf_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","e43ab779":"col = 'countries_shipped_to'","ee0cdab7":"df_train[col].isnull().sum(), df_test[col].isnull().sum()","b438734b":"df_train[col].describe()","9e825969":"df_test[col].describe()","d1bc077e":"plt.figure(figsize=[10,5])\ndf_train[col].hist(density=True, alpha=0.5, bins=20)\ndf_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","92e7653f":"col = 'merchant_rating'","1a788d66":"df_train[col].isnull().sum(), df_test[col].isnull().sum()","64818fe5":"df_train[col].describe()","a4ee87d8":"df_test[col].describe()","2380cec8":"plt.figure(figsize=[10,5])\ndf_train[col].hist(density=True, alpha=0.5, bins=20)\ndf_test[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","118eb07c":"col = 'merchant_has_profile_picture'","883d76b0":"df_train[col].isnull().sum(), df_test[col].isnull().sum()","4bd1aacc":"df_train[col].value_counts()","65f21747":"df_test[col].value_counts()","f9a908e5":"col = 'units_sold'","5defc42a":"df_train[col].describe()","463e585e":"plt.figure(figsize=[10,5])\ndf_train[col].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(col)\nplt.ylabel('density')\nplt.show()","ebc5e225":"col = 'product_color'","9a3ea5b2":"df_train[col].isnull().sum(), df_test[col].isnull().sum()","cd44dc0a":"len(set(df_train[col])), len(set(df_test[col]))","e88f8153":"df_train[col].value_counts()","10def817":"df_test[col].value_counts()","fc6c80ac":"color_dict = {'lightkhaki': 'khaki', 'navy blue': 'navy', 'navyblue': 'navy', 'lightgray': 'gray', 'denimblue': 'blue',\n              'offblack': 'black', 'navy': 'blue', 'RED': 'red', 'lightpurple': 'purple', 'blackwhite': 'black & white',\n              'white & black': 'black & white', 'offwhite': 'white', 'lightpink': 'pink', 'army green': 'army',\n              'Army green': 'army', 'armygreen': 'army', 'tan': 'brown', 'camel': 'brown', 'dustypink': 'pink',\n              'coolblack': 'black', 'Pink': 'pink', 'lightyellow': 'yellow', 'Blue': 'blue', 'lightgrey': 'gray',\n              'rosered': 'rose', 'Rose red': 'rose', 'prussianblue': 'blue', 'Black': 'black', 'jasper': 'red',\n              'violet': 'purple', 'winered': 'wine', 'claret': 'wine',\n              'grey': 'gray', 'skyblue': 'lightblue', 'orange-red': 'orange', 'watermelonred': 'red'}","5faaee1e":"df_train[col] = df_train[col].replace(color_dict)\ndf_test[col] = df_test[col].replace(color_dict)","150fe98c":"# \u6b20\u640d\u5024\u57cb\u3081\ndf_train[col].fillna('others', inplace=True)\ndf_test[col].fillna('others', inplace=True)","c6023b93":"multi_dict = {}\nfor color in set(df_train[col]):\n    if '&' in color:\n        multi_dict[color] = 'multicolor'\nfor color in set(df_test[col]):\n    if '&' in color:\n        multi_dict[color] = 'multicolor'","a9d2302d":"df_train[col] = df_train[col].replace(multi_dict)\ndf_test[col] = df_test[col].replace(multi_dict)","ce777a1f":"df_train[col].value_counts()","06fc9fc6":"df_test[col].value_counts()","f639d192":"print(set(df_test[col]) - set(df_train[col]))","fcc33747":"print(set(df_train[col]) - set(df_test[col]))","0a7bb41b":"other_dict = {}\nfor color in set(df_test[col]) - set(df_train[col]):\n    other_dict[color] = 'others'\nfor color in set(df_train[col]) - set(df_test[col]):\n    other_dict[color] = 'others'","5f8f0a82":"df_train[col] = df_train[col].replace(other_dict)\ndf_test[col] = df_test[col].replace(other_dict)","ae0b320f":"df_train[col].value_counts()","9e17da80":"df_test[col].value_counts()","f24aab6a":"col = 'product_variation_size_id'","bc3e2d59":"df_train[col].isnull().sum(), df_test[col].isnull().sum()","576c1259":"len(set(df_train[col])), len(set(df_test[col]))","14d4c570":"df_train[col].value_counts()","8a6a2330":"df_test[col].value_counts()","bdea612e":"size_dict = {'S': 'S', 'S.': 'S', 's': 'S', 'Size S': 'S', 'Size-S': 'S', 'Size\/S': 'S', 'Suit-S': 'S',\n             '25-S': 'S', 'US-S': 'S', 'Size S.': 'S', 'pants-S': 'S', 'SIZE S': 'S', 'S Pink': 'S',\n             'size S': 'S', 'S..': 'S', 'Size--S': 'S', 's': 'S', 's': 'S',\n             'M': 'M', 'M.': 'M', 'Size M': 'M', 'L': 'L', 'Size-L': 'L', 'SizeL': 'L', 'L.': 'L', '32\/L': 'L',\n             'XL': 'XL', '1 PC - XL': 'XL', 'X   L': 'XL', 'XXL': 'XXL', '2XL': 'XXL', 'XXL': 'XXL', 'XXXL': 'XXXL',\n             '3XL': 'XXXL', '04-3XL': 'XXXL', 'XXXXL': 'XXXXL', '4XL': 'XXXXL', 'Size4XL': 'XXXXL',\n             'SIZE-4XL': 'XXXXL', 'Size4XL': 'XXXXL', 'Size4XL': 'XXXXL',\n             'XS': 'XS', 'SIZE XS': 'XS', 'XS.': 'XS', 'Size-XS': 'XS', 'XXS': 'XXS', 'SIZE-XXS': 'XXS',\n             'Size-XXS': 'XXS', 'Size -XXS': 'XXS', 'SIZE XXS': 'XXS', 'Size XXS': 'XXS', 'XXXS': 'XXXS',\n             'S(Pink & Black)': 'S', 'S (waist58-62cm)': 'S'}","c0729f68":"df_train[col] = df_train[col].map(size_dict)\ndf_test[col] = df_test[col].map(size_dict)","44d1b6b7":"df_train[col].isnull().sum(), df_test[col].isnull().sum()","996e7524":"# \u6b20\u640d\u5024\u57cb\u3081\ndf_train[col].fillna('others', inplace=True)\ndf_test[col].fillna('others', inplace=True)","8925bf46":"df_train[col].value_counts()","d9d7877b":"df_test[col].value_counts()","28981f2d":"nltk.download('stopwords')","208d61d1":"stop = set(stopwords.words('english'))","820a23a3":"def tokenize(text):\n    '''\n    sent_tokenize(): segment text into sentences\n    word_tokenize(): break sentences into words\n    '''\n    \n    try:\n        regex = re.compile('[' + re.escape(string.punctuation) + '0-9\\\\r\\\\t\\\\n]')\n        txt = regex.sub(' ', text) # remove punctuation\n        \n        tokens_ = [word_tokenize(s) for s in sent_tokenize(text)]\n        tokens = []\n        for token_by_sent in tokens_:\n            tokens += token_by_sent\n        tokens = list(filter(lambda t: t.lower() not in stop, tokens))\n        filtered_tokens = [w for w in tokens if re.search('[a-zA-Z]', w)]\n        filtered_tokens = [w.lower() for w in filtered_tokens if len(w)>=3]\n        \n        return filtered_tokens\n    except TypeError as e: print(text, e)","3618aa84":"def tfidf_encoding(df, col):\n    tfidf = TfidfVectorizer(max_features=10, ngram_range=(1, 1), tokenizer=tokenize,)\n    \n    # \u6b20\u640d\u5024\u51e6\u7406\n    df[col] = df[col].fillna('')\n    \n    # \u30c6\u30ad\u30b9\u30c8\u306e\u533a\u5207\u308a\u6587\u5b57\u51e6\u7406\n    df[col] = df[col].replace(\";\", \" \")\n    \n    # df\u5185\u306e\u30c6\u30ad\u30b9\u30c8\u3092 tfidf\u306b\u5909\u63db\n    tfidf_mat = tfidf.fit_transform(df[col])\n    \n    \n    tfidf_mat = pd.DataFrame(tfidf_mat.todense())\n    tfidf_mat = tfidf_mat.add_prefix(f'{col}_TF-IDF_')\n    df.drop([col], axis=1, inplace=True)\n    df.reset_index(drop=True, inplace=True)\n    df = pd.concat([df, tfidf_mat], axis=1)\n    del tfidf_mat\n    \n    return df","b8d37ad6":"nltk.download('punkt')","85a85bb7":"col = 'title'","cd2793c1":"df_train.title.value_counts()","e664e804":"df_test.title.value_counts()","d6ebd27a":"print(len(set(df_train[col])), len(set(df_test[col])))","f2414eec":"df_train = tfidf_encoding(df_train, col)\ndf_test = tfidf_encoding(df_test, col)","42c95a04":"col = 'tags'","1ccebb29":"df_train.tags.value_counts()","12e3deae":"df_test.tags.value_counts()","d540b1e7":"print(len(set(df_train[col])), len(set(df_test[col])))","0eae989a":"df_train = tfidf_encoding(df_train, col)\ndf_test = tfidf_encoding(df_test, col)","0d922d4f":"df_train.head()","08f98695":"df_test.head()","d4fea747":"df_train.isnull().sum()","29d4ffcf":"df_test.isnull().sum()","683534cc":"drop_cols = ['merchant_title', 'merchant_id']","4b86bccc":"df_train.drop(drop_cols, axis=1, inplace=True)\ndf_test.drop(drop_cols, axis=1, inplace=True)","08027981":"df_train.dtypes","00106886":"X_train_nn = df_train.drop(['row_id', 'units_sold'], axis=1)\ny_train = df_train['units_sold']\nX_test_nn = df_test.drop(['row_id'], axis=1)","cf38dab0":"cat_cols = ['product_color', 'product_variation_size_id']","82db90b9":"encoder = OneHotEncoder(cols=cat_cols)\nX_train_nn = encoder.fit_transform(X_train_nn)\nX_test_nn = encoder.transform(X_test_nn)","cfd3b473":"X_train_nn.columns","ead2092a":"X_train_nn.head()","6022141c":"X_test_nn.head()","46d6447f":"y_train.head()","7ea4669e":"def seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)","d54be211":"def calc_mape(true, pred):\n    return np.mean(np.abs((pred - true) \/ true)) * 100","23bd1fb7":"def mlp(num_cols):\n    model = Sequential()\n    model.add(Dense(units=512, input_shape = (len(num_cols),), \n                    kernel_initializer='he_normal',activation='relu'))    \n    model.add(Dropout(0.4))\n    model.add(Dense(units=256,  kernel_initializer='he_normal',activation='relu'))\n    model.add(Dropout(0.4))\n    model.add(Dense(units=32, kernel_initializer='he_normal', activation='relu'))     \n    model.add(Dropout(0.4))\n    model.add(Dense(1, activation='linear'))\n    model.compile(loss='mape', optimizer='adam', metrics=['mape']) \n    return model","bf9368d7":"seed_everything(71)","61bbfed6":"train_x, valid_x, train_y, valid_y, train_id, valid_id = train_test_split(X_train_nn, y_train, df_train[['row_id']], test_size=0.2)","41a2fc2c":"filepath = \"mlp_best_model.hdf5\" \n\nes = EarlyStopping(patience=20, mode='min', verbose=1) \n\ncheckpoint = ModelCheckpoint(monitor='val_loss',filepath=filepath, save_best_only=True, mode='auto') \n\nreduce_lr_loss = ReduceLROnPlateau(monitor='val_loss', patience=10, factor=0.1, verbose=1, mode='min')\n\nmodel = mlp(X_train_nn.columns)\n\nhistory = model.fit(train_x, train_y, batch_size=16, epochs=1000, validation_data=(valid_x, valid_y), \n                    callbacks=[es, checkpoint, reduce_lr_loss], verbose=1)","640b1f10":"# predict valid data\nvalid_pred = model.predict(valid_x, batch_size=32).reshape((-1,1))\nvalid_score = calc_mape(valid_y.ravel(), valid_pred.ravel())\nprint ('valid mape:', valid_score)  # 33.59157628117051","0c9d8938":"loss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(loss))\nplt.plot(epochs, loss, 'bo' ,label = 'training loss')\nplt.plot(epochs, val_loss, 'b' , label= 'validation loss')\nplt.title('Training and Validation loss')\nplt.legend()\nplt.show()","9fa89870":"y_pred_71 = model.predict(X_test_nn, batch_size=32).reshape((-1,1)).ravel()","a29c4007":"seed_everything(59)","046f8ccd":"train_x, valid_x, train_y, valid_y, train_id, valid_id = train_test_split(X_train_nn, y_train, df_train[['row_id']], test_size=0.2)","d5a2b171":"filepath = \"mlp_best_model.hdf5\" \n\nes = EarlyStopping(patience=20, mode='min', verbose=1) \n\ncheckpoint = ModelCheckpoint(monitor='val_loss',filepath=filepath, save_best_only=True, mode='auto') \n\nreduce_lr_loss = ReduceLROnPlateau(monitor='val_loss', patience=10, factor=0.1, verbose=1, mode='min')\n\nmodel = mlp(X_train_nn.columns)\n\nhistory = model.fit(train_x, train_y, batch_size=16, epochs=1000, validation_data=(valid_x, valid_y), \n                    callbacks=[es, checkpoint, reduce_lr_loss], verbose=1)","1ff5799d":"# predict valid data\nvalid_pred = model.predict(valid_x, batch_size=32).reshape((-1,1))\nvalid_score = calc_mape(valid_y.ravel(), valid_pred.ravel())\nprint ('valid mape:', valid_score)  # 33.59157628117051","c3106c6d":"loss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(loss))\nplt.plot(epochs, loss, 'bo' ,label = 'training loss')\nplt.plot(epochs, val_loss, 'b' , label= 'validation loss')\nplt.title('Training and Validation loss')\nplt.legend()\nplt.show()","9e64e116":"y_pred_59 = model.predict(X_test_nn, batch_size=32).reshape((-1,1)).ravel()","7a2ed6cf":"seed_everything(28)","2ab3f79e":"train_x, valid_x, train_y, valid_y, train_id, valid_id = train_test_split(X_train_nn, y_train, df_train[['row_id']], test_size=0.2)","bbdb3d95":"filepath = \"mlp_best_model.hdf5\" \n\nes = EarlyStopping(patience=20, mode='min', verbose=1) \n\ncheckpoint = ModelCheckpoint(monitor='val_loss',filepath=filepath, save_best_only=True, mode='auto') \n\nreduce_lr_loss = ReduceLROnPlateau(monitor='val_loss', patience=10, factor=0.1, verbose=1, mode='min')\n\nmodel = mlp(X_train_nn.columns)\n\nhistory = model.fit(train_x, train_y, batch_size=16, epochs=1000, validation_data=(valid_x, valid_y), \n                    callbacks=[es, checkpoint, reduce_lr_loss], verbose=1)","0b03b214":"# predict valid data\nvalid_pred = model.predict(valid_x, batch_size=32).reshape((-1,1))\nvalid_score = calc_mape(valid_y.ravel(), valid_pred.ravel())\nprint ('valid mape:', valid_score)  # 33.59157628117051","7a3e14c7":"loss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(loss))\nplt.plot(epochs, loss, 'bo' ,label = 'training loss')\nplt.plot(epochs, val_loss, 'b' , label= 'validation loss')\nplt.title('Training and Validation loss')\nplt.legend()\nplt.show()","07f4fe0e":"y_pred_28 = model.predict(X_test_nn, batch_size=32).reshape((-1,1)).ravel()","e99126e7":"submission_nn = pd.read_csv('..\/input\/sales-prediction-of-clothes-in-e-commerce\/sample_submission.csv', index_col=0)\nsubmission_nn.units_sold = (y_pred_71 + y_pred_59 + y_pred_28) \/ 3","e3d2271a":"submission_nn.head()","c784d7e1":"X_train_lgb = df_train.drop(['row_id', 'units_sold'], axis=1)\ny_train = df_train['units_sold']\nX_test_lgb = df_test.drop(['row_id'], axis=1)","8138285f":"col = 'product_color'","a50f8d24":"X_train_lgb[col].isnull().sum(),X_test_lgb[col].isnull().sum()","d4d9823f":"# target encoding\ntarget = 'units_sold'\nX_temp = pd.concat([X_train_lgb, y_train], axis=1)\n\nsummary = X_temp.groupby([col])[target].mean()\nX_test_lgb[col] = X_test_lgb[col].map(summary) \n\n\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\nenc_train = Series(np.zeros(len(X_train_lgb)), index=X_train_lgb.index)\n\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train_lgb, y_train))):\n    X_train_lgb_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_lgb_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)\n\nX_train_lgb[col]  = enc_train","77eb48de":"col = 'product_variation_size_id'","810a9af1":"X_train_lgb[col].isnull().sum(),X_test_lgb[col].isnull().sum()","04368e2e":"# target encoding\ntarget = 'units_sold'\nX_temp = pd.concat([X_train_lgb, y_train], axis=1)\n\nsummary = X_temp.groupby([col])[target].mean()\nX_test_lgb[col] = X_test_lgb[col].map(summary) \n\n\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\nenc_train = Series(np.zeros(len(X_train_lgb)), index=X_train_lgb.index)\n\nfor i, (train_ix, val_ix) in enumerate((skf.split(X_train_lgb, y_train))):\n    X_train_lgb_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n    summary = X_train_lgb_.groupby([col])[target].mean()\n    enc_train.iloc[val_ix] = X_val[col].map(summary)\n\nX_train_lgb[col]  = enc_train","812ada7d":"X_train_lgb.head()","a9cfe4fe":"X_test_lgb.head()","d2731644":"def calc_mape(true, pred):\n    return np.mean(np.abs((pred - true) \/ true)) * 100","ffb3f67f":"clf_lgb = LGBMRegressor()","5b0b927d":"%%time\nscores = []\nlgb_cv_pred_71 = pd.DataFrame()\ny_pred_test_71 = np.zeros(len(X_test_lgb))\nfeature_importance_df = pd.DataFrame()\n\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n\nfor i, (train_ix, test_ix) in enumerate(skf.split(X_train_lgb, y_train)):\n    X_train_lgb_, y_train_ = X_train_lgb.values[train_ix], y_train.values[train_ix]\n    X_val, y_val = X_train_lgb.values[test_ix], y_train.values[test_ix]\n    \n    clf_lgb.fit(X_train_lgb_, y_train_)\n    y_pred = clf_lgb.predict(X_val)\n    y_pred_test_71 += clf_lgb.predict(X_test_lgb)\n    \n    fold_pred = pd.DataFrame()\n    fold_pred['ID'] = test_ix\n    fold_pred['price'] = y_val\n    fold_pred['pred_lgb'] = y_pred\n    lgb_cv_pred_71 = pd.concat([lgb_cv_pred_71, fold_pred], axis=0)\n    \n    fold_importance_df = pd.DataFrame()\n    fold_importance_df['feature'] = X_train_lgb.columns\n    fold_importance_df['importance'] = clf_lgb.feature_importances_\n    fold_importance_df['importance_gain'] = clf_lgb.booster_.feature_importance(importance_type='gain')\n    fold_importance_df['fold'] = i + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n    \n    score = calc_mape(y_val, y_pred)\n    scores .append(score)\n    print('CV Score of Fold_%d is %f' % (i, score))\n\ny_pred_test_71 \/= 5","da619536":"scores","883ad5e2":"np.array(scores).mean()","a796e625":"clf_lgb = LGBMRegressor()","c76ec0c0":"%%time\nscores = []\nlgb_cv_pred_59 = pd.DataFrame()\ny_pred_test_59 = np.zeros(len(X_test_lgb))\nfeature_importance_df = pd.DataFrame()\n\nskf = StratifiedKFold(n_splits=5, random_state=59, shuffle=True)\n\nfor i, (train_ix, test_ix) in enumerate(skf.split(X_train_lgb, y_train)):\n    X_train_lgb_, y_train_ = X_train_lgb.values[train_ix], y_train.values[train_ix]\n    X_val, y_val = X_train_lgb.values[test_ix], y_train.values[test_ix]\n    \n    clf_lgb.fit(X_train_lgb_, y_train_)\n    y_pred = clf_lgb.predict(X_val)\n    y_pred_test_59 += clf_lgb.predict(X_test_lgb)\n    \n    fold_pred = pd.DataFrame()\n    fold_pred['ID'] = test_ix\n    fold_pred['price'] = y_val\n    fold_pred['pred_lgb'] = y_pred\n    lgb_cv_pred_59 = pd.concat([lgb_cv_pred_59, fold_pred], axis=0)\n    \n    fold_importance_df = pd.DataFrame()\n    fold_importance_df['feature'] = X_train_lgb.columns\n    fold_importance_df['importance'] = clf_lgb.feature_importances_\n    fold_importance_df['importance_gain'] = clf_lgb.booster_.feature_importance(importance_type='gain')\n    fold_importance_df['fold'] = i + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n    \n    score = calc_mape(y_val, y_pred)\n    scores .append(score)\n    print('CV Score of Fold_%d is %f' % (i, score))\n\ny_pred_test_59 \/= 5","461bc5f8":"scores","7c9efec4":"np.array(scores).mean()","4b5bd6ab":"clf_lgb = LGBMRegressor()","d2a1f9b2":"%%time\nscores = []\nlgb_cv_pred_28 = pd.DataFrame()\ny_pred_test_28 = np.zeros(len(X_test_lgb))\nfeature_importance_df = pd.DataFrame()\n\nskf = StratifiedKFold(n_splits=5, random_state=28, shuffle=True)\n\nfor i, (train_ix, test_ix) in enumerate(skf.split(X_train_lgb, y_train)):\n    X_train_lgb_, y_train_ = X_train_lgb.values[train_ix], y_train.values[train_ix]\n    X_val, y_val = X_train_lgb.values[test_ix], y_train.values[test_ix]\n    \n    clf_lgb.fit(X_train_lgb_, y_train_)\n    y_pred = clf_lgb.predict(X_val)\n    y_pred_test_28 += clf_lgb.predict(X_test_lgb)\n    \n    fold_pred = pd.DataFrame()\n    fold_pred['ID'] = test_ix\n    fold_pred['price'] = y_val\n    fold_pred['pred_lgb'] = y_pred\n    lgb_cv_pred_28 = pd.concat([lgb_cv_pred_28, fold_pred], axis=0)\n    \n    fold_importance_df = pd.DataFrame()\n    fold_importance_df['feature'] = X_train_lgb.columns\n    fold_importance_df['importance'] = clf_lgb.feature_importances_\n    fold_importance_df['importance_gain'] = clf_lgb.booster_.feature_importance(importance_type='gain')\n    fold_importance_df['fold'] = i + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n    \n    score = calc_mape(y_val, y_pred)\n    scores .append(score)\n    print('CV Score of Fold_%d is %f' % (i, score))\n\ny_pred_test_28 \/= 5","440108b2":"scores","1311c071":"np.array(scores).mean()","2049ff5c":"submission_lgb = pd.read_csv('..\/input\/sales-prediction-of-clothes-in-e-commerce\/sample_submission.csv', index_col=0)\n\nsubmission_lgb.units_sold = (y_pred_test_71 + y_pred_test_59 + y_pred_test_28) \/ 3\nsubmission_lgb.head()","c97b82fa":"submission = pd.read_csv('..\/input\/sales-prediction-of-clothes-in-e-commerce\/sample_submission.csv', index_col=0)\n\nsubmission.units_sold = submission_nn['units_sold']*0.9 + submission_lgb['units_sold']*0.1\nsubmission.head()","db788ddf":"submission['units_sold'] = submission['units_sold'].round(-2)\nsubmission.head()","c94b6bfb":"submission.to_csv('submission_e_ensemble.csv')","c6c1bd03":"### seed: 71","202ef627":"## shipping_option_price","3097b6de":"## product_color","a255e286":"## title","07a6dff6":"# \u8a13\u7df4\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4f5c\u6210","1ba0cb54":"## rating_two_count","7b6e1747":"## profit","0fe9be73":"## profit_ratio","e9fd1b90":"## retail_price","b3f697f9":"# \u30c6\u30ad\u30b9\u30c8\u7279\u5fb4\u91cf\u306e\u53ef\u8996\u5316\u3001\u524d\u51e6\u7406","1ee82c56":"### \u5909\u63db\u51e6\u7406\uff08\u6700\u5c0f\u5024\u3001\u6700\u5927\u5024\u3067\u30ad\u30e3\u30c3\u30d4\u30f3\u30b0\uff09","6a862597":"# \u6570\u5024\u7279\u5fb4\u91cf\u53ef\u8996\u5316\u3001\u524d\u51e6\u7406","7658c275":"## rating","a07a8d98":"## rating_four_count","a68ead69":"## rating_three_count","03c2b2cb":"### \u5bfe\u6570\u5909\u63db","77ed253e":"## \u30e2\u30c7\u30ea\u30f3\u30b0","9d12deac":"## merchant_has_profile_picture","e7fe41e6":"## units_sold","021f8ca1":"## merchant_rating","aae9c35a":"## countries_shipped_to","baa6af32":"## rating_five_count","b6cb9f10":"### seed: 59","acc6fb83":"## CV Averaging","3dd63567":"### seed: 28","22234431":"### TF-IDF","cd7932db":"## product_variation_size_id","2f3be3ee":"## price_ratio","0bcb0e94":"## tags","7bb526ed":"## uses_ad_boosts","a3fdfb0f":"# \u30ab\u30c6\u30b4\u30ea\u7279\u5fb4\u91cf\u306e\u53ef\u8996\u5316\u3001\u524d\u51e6\u7406","9bbde157":"## price","2aee9c66":"## rating_one_count"}}