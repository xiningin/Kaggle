{"cell_type":{"33fca6d8":"code","b04f49bd":"code","5a585c42":"code","4f57c753":"code","e13c6938":"code","27b2f4d5":"code","b6e0855d":"code","57d61393":"code","f207a5a2":"code","8de88c5c":"code","55c3be08":"code","32e6b38a":"code","626b921d":"code","39f19e4e":"code","349936c4":"code","feb2a610":"code","e50df892":"code","8093a683":"code","886a59b1":"code","a31ba2fa":"code","8a9357ea":"code","722583c4":"code","441f77e0":"code","8842037b":"code","dede355c":"code","05109129":"code","0c64e96b":"code","060e2d8f":"code","b71796aa":"code","d900b473":"markdown","a8c7742a":"markdown","4018e454":"markdown","64b6001b":"markdown","e86fd82d":"markdown","8dbcce6c":"markdown","a5acd31d":"markdown","7eba6846":"markdown"},"source":{"33fca6d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b04f49bd":"pip install openpyxl","5a585c42":"import matplotlib.pyplot as plt\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import balanced_accuracy_score,roc_auc_score,make_scorer\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.model_selection import GridSearchCV","4f57c753":"data=pd.read_excel('..\/input\/customer-churn\/Telco_customer_churn.csv.xlsx')\ndata.sample(6)","e13c6938":"data.info()","27b2f4d5":"data.describe()","b6e0855d":"data.drop(['Churn Label','Churn Score', 'CLTV', 'Churn Reason'],axis=1,inplace=True)\ndata.sample(6)","57d61393":"print('Single value',data['Count'].unique())\nprint('Single value',data['Country'].unique())\nprint('Single value',data['State'].unique())","f207a5a2":"data.columns","8de88c5c":"data.drop(['CustomerID', 'Count', 'Country', 'State','Lat Long'],axis=1,inplace=True)","55c3be08":"# there must be white space when drawing tree\ndata['City'].replace(\" \",\"_\",regex=True,inplace=True)\ndata.columns=data.columns.str.replace(\" \",'_')","32e6b38a":"data.isnull().sum()","626b921d":"len(data[data['Total_Charges']==\" \"])","39f19e4e":"# replacing white space with zero(0)\ndata.loc[(data['Total_Charges']==\" \"),'Total_Charges']=0","349936c4":"# xgboost doesn't take in object data type\n# convert from object to float\ndata['Total_Charges']=pd.to_numeric(data['Total_Charges'])","feb2a610":"#  Total_Charges  is now float data type \ndata.info()","e50df892":"# replace all white space with underscore\ndata.replace(\" \",\"_\",regex=True,inplace=True)","8093a683":"data.head()","886a59b1":"y=data[\"Churn_Value\"]\ny","a31ba2fa":"X=data.drop(\"Churn_Value\",axis=1)","8a9357ea":"X.info()","722583c4":"# get dummies for all the object data type\nX_dummies=pd.get_dummies(X,columns=['City', 'Gender', 'Senior_Citizen',\n       'Partner', 'Dependents',  'Phone_Service',\n       'Multiple_Lines', 'Internet_Service', 'Online_Security',\n       'Online_Backup', 'Device_Protection', 'Tech_Support', 'Streaming_TV',\n       'Streaming_Movies', 'Contract', 'Paperless_Billing', 'Payment_Method'\n       ])\nX_dummies.head()","441f77e0":"sum(y)\/len(y)","8842037b":"X_train,X_test,y_train,y_test=train_test_split(X_dummies,y,random_state=42,stratify=y)","dede355c":"clf_xgb=xgb.XGBClassifier(objective=\"binary:logistic\",missing=None,seed=42)\nclf_xgb.fit(X_train,\n            y_train,\n            verbose=True,\n            early_stopping_rounds=10,\n            eval_metric='aucpr',\n            eval_set=[(X_test,y_test)])","05109129":"plot_confusion_matrix(clf_xgb,\n                      X_test,y_test)\nplt.show() ","0c64e96b":"clf_xgb=xgb.XGBClassifier(gamma=0.25,\n                          learn_rate=0.1,\n                          max_depth=4,\n                          reg_lambda=10,\n                          scale_pos_weight=3,\n                          subsample=0.9,\n                          objective=\"binary:logistic\",\n                          colsample_bytree=0.5,\n                          missing=None,seed=42)\nclf_xgb.fit(X_train,\n            y_train,\n            verbose=True,\n            early_stopping_rounds=10,\n            eval_metric='aucpr',\n            eval_set=[(X_test,y_test)])","060e2d8f":"clf_xgb=xgb.XGBClassifier(gamma=0.25,\n                          learn_rate=0.1,\n                          max_depth=4,\n                          reg_lambda=10,\n                          scale_pos_weight=3,\n                          subsample=0.9,\n                          objective=\"binary:logistic\",\n                          colsample_bytree=0.5,\n                          missing=None,seed=42,\n                         n_estimators=1)\nclf_xgb.fit(X_train,\n            y_train,\n            verbose=True,\n            early_stopping_rounds=10,\n            eval_metric='aucpr',\n            eval_set=[(X_test,y_test)])","b71796aa":"bst=clf_xgb.get_booster()\nfor importance_type in ('weight','gain','cover','total_gain','total_cover'):\n    print(\"%s:\"% importance_type,bst.get_score(importance_type=importance_type))\nnode_params={'shape':\"box\",\n            'style':'filled,rounded',\n            \"fillcolor\":\"#78cbe\"}\nleaf_params={'shape':\"box\",\n            'style':'filled',\n            \"fillcolor\":\"#48038\"}\nxgb.to_graphviz(clf_xgb,\n                num_trees=0,\n               size=\"10,10\",\n               condition_node_params=node_params,\n               leaf_node_params=leaf_params)","d900b473":"**There are some columns containing single values which will not be profitable to our prediction**","a8c7742a":"# **Modeling**","4018e454":"**Dealing with Missing Data**","64b6001b":"**27% of customer left the company**","e86fd82d":"**Removing columns that will not add to our prediction**","8dbcce6c":"**Checking for Null value**","a5acd31d":"**Removing white space**","7eba6846":"# **Splitting Data**"}}