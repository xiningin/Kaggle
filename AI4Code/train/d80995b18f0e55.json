{"cell_type":{"720d8415":"code","86bef28c":"code","0760d5d7":"code","83a9cf1c":"code","264f0f8f":"code","1e4a3fb4":"code","c8d7b078":"code","0454d23e":"code","9f310139":"code","16434ac6":"code","66cc6aa0":"code","d48115d3":"code","507bf9c4":"code","64ed9238":"markdown","c33ed3ca":"markdown"},"source":{"720d8415":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler","86bef28c":"soil_df = pd.read_csv(\"..\/input\/us-drought-meteorological-data\/soil_data.csv\")\nsoil_df","0760d5d7":"# Check if data of the same fips exists\n(soil_df.groupby('fips').size() > 1).values.any()","83a9cf1c":"test_X = pd.read_csv(\"..\/input\/us-drought-meteorological-data\/test_timeseries\/test_timeseries.csv\")\ntrain_X = pd.read_csv(\"..\/input\/us-drought-meteorological-data\/train_timeseries\/train_timeseries.csv\")\nvalid_X = pd.read_csv(\"..\/input\/us-drought-meteorological-data\/validation_timeseries\/validation_timeseries.csv\")\ntest_X","264f0f8f":"# Eliminate NaN\ntest_X = test_X[test_X['score'].notnull()].reset_index(drop=True)\ntrain_X = train_X[train_X['score'].notnull()].reset_index(drop=True)\nvalid_X = valid_X[valid_X['score'].notnull()].reset_index(drop=True)\ntest_X","1e4a3fb4":"# Y\ntest_Y = test_X[['fips', 'score']]\ntrain_Y = train_X[['fips', 'score']]\nvalid_Y = valid_X[['fips', 'score']]\ntest_Y","c8d7b078":"def convert_float_score_into_int_score(input_Y):\n    input_Y.loc[(input_Y['score'] > 0) & (input_Y['score'] <= 1), 'score'] = 1\n    input_Y.loc[(input_Y['score'] > 1) & (input_Y['score'] <= 2), 'score'] = 2\n    input_Y.loc[(input_Y['score'] > 2) & (input_Y['score'] <= 3), 'score'] = 3\n    input_Y.loc[(input_Y['score'] > 3) & (input_Y['score'] <= 4), 'score'] = 4\n    input_Y.loc[(input_Y['score'] > 4), 'score'] = 5\n    input_Y['score'] = input_Y['score'].astype('int')\n    return input_Y\ntest_Y = convert_float_score_into_int_score(test_Y)\ntrain_Y = convert_float_score_into_int_score(train_Y)\nvalid_Y = convert_float_score_into_int_score(valid_Y)\ntest_Y['score'].hist(bins=[0, 1, 2, 3, 4, 5, 6])","0454d23e":"# Drop score column\ntest_X = test_X.iloc[:, :20]\ntrain_X = train_X.iloc[:, :20]\nvalid_X = valid_X.iloc[:, :20]\ntest_X","9f310139":"# Null check\nprint(\"test_X has any null?: \" + str(test_X.isnull().values.any()))\nprint(\"train_X has any null?: \" + str(train_X.isnull().values.any()))\nprint(\"valid_X has any null?: \" + str(valid_X.isnull().values.any()))\nprint(\"soil_df has any null?: \" + str(soil_df.isnull().values.any()))","16434ac6":"# Merge soil and X meteo\ntest_X = test_X.merge(soil_df, left_on='fips', right_on='fips')\ntrain_X = train_X.merge(soil_df, left_on='fips', right_on='fips')\nvalid_X = valid_X.merge(soil_df, left_on='fips', right_on='fips')\ntest_X","66cc6aa0":"train_X","d48115d3":"# Standardize features by removing the mean and scaling to unit variance\nscaler = MinMaxScaler()\ntrain_X = pd.DataFrame(np.append(train_X.iloc[:, :2].values, scaler.fit_transform(train_X.iloc[:, 2:]), axis=1), columns=train_X.columns)\nvalid_X = pd.DataFrame(np.append(valid_X.iloc[:, :2].values, scaler.transform(valid_X.iloc[:, 2:]), axis=1), columns=valid_X.columns)\ntest_X = pd.DataFrame(np.append(test_X.iloc[:, :2].values, scaler.transform(test_X.iloc[:, 2:]), axis=1), columns=test_X.columns)\ntrain_X","507bf9c4":"test_X","64ed9238":"This is a notebook for preprocessing for the task of predicting drought level only with soil_data and meteological data.\nSpecifically, it includes:\n1. Merge soil_data and meteological data\n2. Apply min_max normalization to X data\n3. Convert the float type score to an integer for use in classification problems\n4. Note that, for the sake of simplicity, we only use data from the date the drought level score was observed.","c33ed3ca":"# Use train_X, train_Y, valid_X, valid_Y, test_X, test_Y :)"}}