{"cell_type":{"88d47e86":"code","fe4b677b":"code","895bd030":"code","cb135456":"code","8b1fff6d":"code","5e9c45ad":"code","e6a9a3c5":"code","50cd43e0":"code","b7197b31":"code","ee669c34":"code","4fe2b486":"code","4fc88d74":"code","79f38b50":"code","6d29fc09":"code","867c43fa":"code","4ea0a8e1":"code","4e288f65":"code","9fa8c6bd":"code","bf074235":"code","2f73cd95":"code","868149c6":"code","d9977ce9":"code","15b33e31":"code","d1157403":"code","0054a0c6":"code","deaaf8cd":"code","eb86d86b":"code","229d16fa":"code","641305ba":"code","7e2a048d":"code","19b7847a":"code","e5eeb627":"code","aca7d7d6":"code","f61817fc":"code","3a409694":"code","5bc05f25":"markdown","40898acf":"markdown","46393119":"markdown","ef707958":"markdown","316fe122":"markdown","c4ecc6a2":"markdown","16c62b89":"markdown","6030b229":"markdown","8f6868e2":"markdown"},"source":{"88d47e86":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom xgboost import XGBClassifier\nfrom sklearn import preprocessing\npd.set_option('display.max_columns', 200)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fe4b677b":"gender_sub = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","895bd030":"gender_sub.head()","cb135456":"test.head()","8b1fff6d":"train.head()","5e9c45ad":"train_pclass = pd.get_dummies(train.Pclass)\ntest_pclass = pd.get_dummies(test.Pclass)\ntrain_pclass.head()","e6a9a3c5":"train_sex = pd.get_dummies(train.Sex)\ntest_sex = pd.get_dummies(test.Sex)\ntest_sex.head()","50cd43e0":"allages = pd.concat((train.Age,test.Age),axis=0)\nminage = min(allages)\nmaxage = max(allages)\n\ntrain_age = (train.Age - minage)\/(maxage-minage)\ntest_age = (test.Age - minage)\/(maxage-minage)","b7197b31":"train_age.head()","ee669c34":"test_age.head()","4fe2b486":"train_sibsp = pd.get_dummies(train.SibSp)\ntest_sibsp = pd.get_dummies(test.SibSp)\ntrain_parch = pd.get_dummies(train.Parch)\ntest_parch = pd.get_dummies(test.Parch)","4fc88d74":"train_sibsp.head()","79f38b50":"test_sibsp.head()","6d29fc09":"train_parch.head()","867c43fa":"test_parch.head()","4ea0a8e1":"#train_parch.head()\n#test_parch.head()\ntest_parch = test_parch.drop(columns=9)\ntest_parch.head()","4e288f65":"train_ticket = train.Ticket\ntest_ticket = test.Ticket\ntridx = train_ticket[train_ticket.str.contains('[A-Za-z]')].index\nteidx = test_ticket[test_ticket.str.contains('[A-Za-z]')].index\n\ntrt_nums = pd.DataFrame(np.zeros(train_ticket.shape))\ntet_nums = pd.DataFrame(np.zeros(test_ticket.shape))\ntr_above = pd.DataFrame(np.zeros(train_ticket.shape))\nte_above = pd.DataFrame(np.zeros(test_ticket.shape))\n\ntrt_nums.iloc[tridx]=1\ntet_nums.iloc[teidx]=1\ntrt_nums = trt_nums.astype(int)\ntet_nums = tet_nums.astype(int)\n\ntest_ticket = test_ticket.str.extract('(\\d+)', expand=False)\ntrain_ticket = train_ticket.str.extract('(\\d+)', expand=False)\ntest_ticket = test_ticket.fillna(0).astype(int)\ntrain_ticket = train_ticket.fillna(0).astype(int)\ntemp_train = train_ticket>1000000\ntemp_test = test_ticket>1000000\nprint(temp_train[temp_train==True].size)\n#print(temp)\ntrain_ticket[temp_train==True]=-100\ntest_ticket[temp_test==True]= -100\ntrain_ticket[tridx]=-50\ntest_ticket[teidx]=-50\n\nminx = min(train_ticket)\nmaxx = max(train_ticket)\n\ntrain_ticket = (train_ticket - minx)\/(maxx-minx)\ntest_ticket = (test_ticket - minx)\/(maxx-minx)\n\nprint(train_ticket[tridx])\n\ntr_above[temp_train==True]=1\nte_above[temp_test==True]=1\n\n\n#test_ticket.loc[,:]=0\n#train_ticket.loc[train_ticket>1000000,:]=0\nplt.plot(test_ticket)\nplt.plot(train_ticket)","9fa8c6bd":"allfare = pd.concat((train.Fare,test.Fare),axis=0)\nminfare = min(allfare)\nmaxfare = max(allfare)\n\ntrain_fare = (train.Fare - minfare)\/(maxfare - minfare)\ntest_fare = (test.Fare - minfare)\/(maxfare - minfare)","bf074235":"train_fare.head()","2f73cd95":"print(train.Ticket)","868149c6":"temp = train['Cabin'].astype(str).str[0]\ntrain_cabin = pd.get_dummies(temp)\ntemp = test['Cabin'].astype(str).str[0]\ntest_cabin = pd.get_dummies(temp)\ntrain_cabin = train_cabin.drop(columns=['T'])\nprint(train_cabin.head())","d9977ce9":"print(test_cabin.head())","15b33e31":"train['train']=1\ntest['train']=0\ncombined = pd.concat([train.train,test.train])\ncombined.head()\ncombined_cabin = pd.concat([train.Cabin,test.Cabin])\ncabins = pd.get_dummies(combined_cabin)\ntrain_cabins = cabins.loc[combined[:]==1,:]\ntest_cabins = cabins.loc[combined[:]==0,:]","d1157403":"train_cabin.head()","0054a0c6":"test_cabin.head()","deaaf8cd":"train_embarked = pd.get_dummies(train.Embarked)\ntest_embarked = pd.get_dummies(test.Embarked)","eb86d86b":"train_embarked.head()","229d16fa":"test_embarked.head()","641305ba":"train_all = pd.concat((train_embarked,train_fare,train_parch,train_sibsp,train_age,train_sex,train_pclass,train_cabin,trt_nums,tr_above),axis=1)\ntest_all = pd.concat((test_embarked,test_fare,test_parch,test_sibsp,test_age,test_sex,test_pclass,test_cabin,tet_nums,te_above),axis=1)","7e2a048d":"train_all.head()","19b7847a":"param = {'max_depth':2, 'eta':2, 'objective':'binary:hinge'}\nmodel = XGBClassifier()\ny_train = train.Survived\nmodel.fit(train_all.to_numpy(),y_train)\nprint(model)","e5eeb627":"print(train_all.shape)\nprint(test_all.shape)","aca7d7d6":"y_pred = model.predict(test_all.to_numpy())","f61817fc":"print(y_pred.shape)\nSurvived = pd.DataFrame(y_pred)\npredictions = pd.concat((test.PassengerId,Survived),axis=1)\npredictions = predictions.rename(columns={0:'Survived'})\nprint(predictions)","3a409694":"predictions.to_csv('FridayTitanic.csv',index=False)","5bc05f25":"test_parch has an extra column for features not found in the training dataset, so we will drop that column.","40898acf":"Cabin","46393119":"**Ticket**","ef707958":"**Pclass**","316fe122":"**SibSP & Parch**","c4ecc6a2":"Fare","16c62b89":"**Sex**","6030b229":"**Age**","8f6868e2":"Embarked"}}