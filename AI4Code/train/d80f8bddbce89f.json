{"cell_type":{"14987936":"code","36229827":"code","7e174589":"code","1deec06e":"code","8c902bbf":"code","053dac53":"code","27f67c6a":"code","9e7d580d":"code","d5553d14":"code","67a7c786":"code","dc67d95c":"code","54d6918e":"code","163baf32":"code","cd50ff26":"code","4e081401":"code","e47ce302":"code","14d4852d":"code","8869bf2e":"code","adaf9738":"code","3cc57a77":"code","7fda8757":"code","336f85f2":"code","f6074ff2":"code","c7fad7e6":"code","18ab8c90":"code","3f9e5c25":"code","df49a65d":"code","a67069d3":"code","5455065e":"code","5d13c8ae":"code","a99fe830":"code","67eef899":"code","1bdb4843":"markdown","88dbedde":"markdown","52073794":"markdown","60ed89b8":"markdown","84ad23a4":"markdown","15f742e5":"markdown","f6b9a150":"markdown","81e0de22":"markdown","03b8b0c0":"markdown","9da57db7":"markdown","5488ed6a":"markdown"},"source":{"14987936":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno","36229827":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')","7e174589":"train_data.drop('Cabin',axis=1,inplace=True)","1deec06e":"test_data.drop('Cabin',axis=1,inplace=True)","8c902bbf":"train_data.head()","053dac53":"msno.matrix(train_data)\n","27f67c6a":"msno.matrix(test_data)\n","9e7d580d":"median_age=train_data['Age'].median()\ntrain_data['Age'].replace(np.nan,median_age,inplace=True)\n\nmedian_age=test_data['Age'].median()\ntest_data['Age'].replace(np.nan,median_age,inplace=True)","d5553d14":"freq_port = train_data.Embarked.dropna().mode()[0]\ntrain_data['Embarked'] = train_data['Embarked'].fillna(freq_port)","67a7c786":"train_data.isnull().any().any()","dc67d95c":"test_data.isnull().any()","54d6918e":"for i in range(0,3):\n    \n    clas=train_data.loc[train_data.Pclass==i+1]['Survived']\n    rate_class=sum(clas)\/len(clas) * 100\n    print(' % of {} class survivers : {:.2f}% '.format(i+1, rate_class))","163baf32":"grid = sns.FacetGrid(train_data, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","cd50ff26":"grid = sns.FacetGrid(train_data, row='Embarked', size=2.2, aspect=1.6)\ngrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\ngrid.add_legend()","4e081401":"grid = sns.FacetGrid(train_data, row='Embarked', col='Survived', size=2.2, aspect=1.6)\ngrid.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)\ngrid.add_legend()","e47ce302":"women=train_data.loc[train_data.Sex=='female']['Survived']\nrate_women=sum(women)\/len(women) * 100\nprint(' % of women survivers : ', rate_women)","14d4852d":"men=train_data.loc[train_data.Sex=='male']['Survived']\nrate_men=sum(men)\/len(men) * 100\nprint(' % of men survivers : ', rate_men)","8869bf2e":"grid = sns.FacetGrid(train_data, col='Survived', row='Sex', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","adaf9738":"train_data['Sex']=train_data['Sex'].map({'female' : 1,'male' : 0}).astype(int)\ntest_data['Sex']=test_data['Sex'].map({'female' : 1,'male' : 0}).astype(int)","3cc57a77":"emb_dummy = pd.get_dummies(train_data['Embarked'])\ntrain_data=pd.concat([train_data,emb_dummy],axis=1)\n\nemb_dummy2 = pd.get_dummies(test_data['Embarked'])\ntest_data=pd.concat([test_data,emb_dummy2],axis=1)","7fda8757":"drop_cols=['Name','Ticket','Fare','Embarked']\n\ntrain_data=train_data.drop(drop_cols,axis=1)\ntrain_data=train_data.drop(['PassengerId'],axis=1)\n\ntest_data=test_data.drop(drop_cols,axis=1)","336f85f2":"train_data.loc[ train_data['Age'] <= 16, 'Age'] = 0\ntrain_data.loc[(train_data['Age'] > 16) & (train_data['Age'] <= 36), 'Age'] = 1\ntrain_data.loc[(train_data['Age'] > 36) & (train_data['Age'] <= 50), 'Age'] = 2\ntrain_data.loc[(train_data['Age'] > 50) & (train_data['Age'] <= 64), 'Age'] = 3\ntrain_data.loc[ train_data['Age'] > 64, 'Age'] = 4","f6074ff2":"train_data.loc[ train_data['Age'] <= 16, 'Age'] = 0\ntrain_data.loc[(train_data['Age'] > 16) & (train_data['Age'] <= 36), 'Age'] = 1\ntrain_data.loc[(train_data['Age'] > 36) & (train_data['Age'] <= 50), 'Age'] = 2\ntrain_data.loc[(train_data['Age'] > 50) & (train_data['Age'] <= 64), 'Age'] = 3\ntrain_data.loc[ train_data['Age'] > 64, 'Age'] = 4","c7fad7e6":"X_train=train_data.drop(['Survived'],axis=1).values\nY_train=train_data['Survived'].values","18ab8c90":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X_train,Y_train,test_size=0.25)\n","3f9e5c25":"from sklearn.linear_model import LogisticRegression\nregressor=LogisticRegression()\nregressor.fit(x_train,y_train)\ny_pred=regressor.predict(x_test)","df49a65d":"from sklearn.metrics import accuracy_score,confusion_matrix\nacc=accuracy_score(y_test,y_pred)\ncm=confusion_matrix(y_test,y_pred)\nprint('Confusion Matrix = {} Accuaracy Score = {}'.format(acc,cm))\n","a67069d3":"from sklearn.tree import DecisionTreeClassifier\ndt=DecisionTreeClassifier()\ndt.fit(x_train,y_train)\ny_pred1=dt.predict(x_test)\naccDT=accuracy_score(y_test,y_pred1)\nprint('Accuaracy Score = ',accDT)","5455065e":"from sklearn.ensemble import RandomForestClassifier\nrc=RandomForestClassifier(max_depth=9, random_state=0)\nrc.fit(x_train,y_train)\ny_pred2=rc.predict(x_test)\naccRF=accuracy_score(y_test,y_pred2)\nprint('Accuaracy Score = ',accRF)\n","5d13c8ae":"d = {'Results': ['Logistic Regression', 'Decision Tree', 'Random Forest'], \n    'Accuaracy': [acc, accDT, accRF] \n    }\n\nresults_df = pd.DataFrame(data=d)\nresults_df = results_df.sort_values(by=['Accuaracy'], ascending=False)\n\nresults_df.set_index('Results')\nresults_df","a99fe830":"test=test_data.drop(['PassengerId'],axis=1)\nfinal_pred=dt.predict(test)\n\ntest_data['Survived'] = final_pred\ntest_data.drop(['Pclass','Age','Sex','SibSp','Parch','C','Q','S'],inplace=True,axis=1)\ntest_data.to_csv('Submission.csv', index = False)","67eef899":"test_data.head()","1bdb4843":"## **Building Submission**","88dbedde":"# **Random Forest**","52073794":"# Logistic Regression","60ed89b8":"# EDA ","84ad23a4":"# **MODEL EVALUATION**","15f742e5":"### Gender ","f6b9a150":"## Feature Enginering ","81e0de22":"# Model Comparison ","03b8b0c0":"### Fare","9da57db7":"# **Decision Tree**","5488ed6a":"### Classes"}}