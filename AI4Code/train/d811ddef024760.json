{"cell_type":{"a8221fd4":"code","43ee0295":"code","b6ebeab5":"code","c164828f":"code","5d653ede":"code","16665be5":"code","4cba5d7c":"code","96b7d64e":"code","c3151da8":"code","4d74ac4e":"code","d7e37a85":"code","b6f53b83":"code","5959fa44":"code","c3b44c01":"code","f12c9526":"code","7091002d":"code","b3543d86":"code","f41a9dc1":"markdown","f3a955bc":"markdown","558dc68f":"markdown","a7c68f13":"markdown"},"source":{"a8221fd4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom keras import layers \nfrom keras import models\nfrom keras import optimizers\nfrom keras.utils import to_categorical\n\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\n\nfrom skimage import img_as_ubyte\nfrom skimage.transform import resize\n\nfrom scipy.ndimage.interpolation import rotate","43ee0295":"# train data\ntrain_data = pd.read_csv('\/kaggle\/input\/train.csv')\n\n# test data\ntest_data = pd.read_csv('\/kaggle\/input\/test.csv')","b6ebeab5":"# split dataset train data and test data for ML\n\nX_model = train_data.drop('label', axis=1)\ny_model = train_data['label'].copy()\n\nY_finish = test_data\n\nprint('size train data:', X_model.shape)\nprint('size train labels:', y_model.shape)\nprint('size finish test data:', Y_finish.shape)","c164828f":"# frequency occurrence train labels\nplt.subplots(figsize=(11,4))\ny_model.value_counts().sort_index().plot('bar', color='grey')\nplt.title(\"Frequency Histogram of Numbers in Training Data\")\nplt.xlabel(\"Number Value\")\nplt.ylabel(\"Frequency\")\nplt.grid(True, alpha=0.6)","5d653ede":"# functions add modify train data\n\ndef img_rotate(df_x, angle):\n    \"\"\" function rotate image by angle \"\"\"\n    change_img = np.empty([df_x.shape[0], df_x.shape[1]])\n    for i, image in enumerate(df_x.values):\n        img = rotate(image.reshape(28, 28), angle, cval=0, reshape=False, order=0)\n        change_img[i] = img.ravel()\n    return pd.DataFrame(data=change_img, columns=df_x.columns)\n\ndef img_zoom(df_x, scale):\n    \"\"\" function zoom image by scale \"\"\"\n    if (scale > 0.9) or (scale < -0.9):\n        raise Exception('scale values must be between -0.9 and 0.9')\n    if scale < 0:\n        change_img = np.empty([df_x.shape[0], df_x.shape[1]])\n        for i, image in enumerate(df_x.values):\n            number_around = round(28*abs(scale)\/2)\n            img = image.reshape(28, 28).astype('float32').copy()\n            img = np.pad(img, number_around, mode='constant') \n            img = resize(img, (28,28), anti_aliasing=False, mode='constant', cval=0, order=0)\n            change_img[i] = img.ravel().astype('int64')\n        return pd.DataFrame(data=change_img, columns=df_x.columns)\n    elif scale >= 0:\n        change_img = np.empty([df_x.shape[0], df_x.shape[1]])\n        for i, image in enumerate(df_x.values):\n            number_slice = round(28*abs(scale)\/2)\n            img = image.reshape(28, 28).astype('float32').copy()\n            img = img[number_slice:28-number_slice, number_slice:28-number_slice]\n            img = resize(img, (28,28), anti_aliasing=False, mode='constant', cval=0, order=0)\n            change_img[i] = img.ravel().astype('int64')\n        return pd.DataFrame(data=change_img, columns=df_x.columns)   \n","16665be5":"# split data train and test and convert to Keras model\nX_train, X_test, y_train, y_test = train_test_split(X_model, y_model, test_size=0.2)","4cba5d7c":"# add modified images training\nX_train_add = X_train.append(img_zoom(X_train, 0.2))\nX_train_add = X_train_add.append(img_zoom(X_train, -0.3))\n\nX_train_add = X_train_add.append(img_rotate(X_train, 11))\nX_train_add = X_train_add.append(img_rotate(X_train, -11))\n\n# add modified images labels\ny_train_add = y_train.append(y_train)\ny_train_add = y_train_add.append(y_train)\n\ny_train_add = y_train_add.append(y_train)\ny_train_add = y_train_add.append(y_train)\n\n# set train and test with add images\nX_train = X_train_add.copy()\ny_train = y_train_add.copy()\n\n# shuffle full training data\nX_train, y_train = shuffle(X_train, y_train)","96b7d64e":"# convert train data to Keras model\nX_train = X_train.values.reshape(X_train.shape[0], 28, 28 ,1)\nX_train = X_train.astype('float32') \/ 255\n\nX_test = X_test.values.reshape(X_test.shape[0], 28, 28, 1)\nX_test = X_test.astype('float32') \/ 255\n\nY_finish = Y_finish.values.reshape(Y_finish.shape[0], 28, 28 ,1)\nY_finish = Y_finish.astype('float32') \/ 255","c3151da8":"# show few images\nplt.figure(figsize=(18,8))\nfor i in range(75):  \n    plt.subplot(5, 15, i+1)\n    plt.imshow(X_train[i].reshape((28,28)),cmap=plt.cm.binary)\n    plt.axis('off')\nplt.subplots_adjust(wspace=-0.1, hspace=-0.1)\nplt.show()","4d74ac4e":"# function build model Keras\ndef build_model():\n    # add dropout between layers\n    model = models.Sequential()\n    model.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)))\n    model.add(layers.MaxPooling2D((2,2)))\n    model.add(layers.Dropout(0.12))\n    model.add(layers.Conv2D(64, (3,3), activation='relu'))\n    model.add(layers.MaxPooling2D((2,2)))\n    model.add(layers.Dropout(0.12))\n    model.add(layers.Conv2D(64,(3,3), activation='relu'))\n    model.add(layers.Flatten())\n    model.add(layers.Dropout(0.12))\n    model.add(layers.Dense(64, activation='relu'))\n    model.add(layers.Dense(10, activation='softmax'))\n    \n    opt = optimizers.Adam(lr=0.0015, beta_1=0.9, beta_2=0.99, epsilon=None, decay=0.0, amsgrad=False)\n#     opt = optimizers.RMSprop(lr=0.0012, rho=0.9, epsilon=None, decay=0.0)\n    \n    model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\n    \n    return model","d7e37a85":"# convert train labels to categorical Keras\ny_train = to_categorical(y_train, 10)\ny_test = to_categorical(y_test, 10)\n\ncnn = build_model()\ncnn.fit(X_train,\n        y_train,\n        epochs=4,\n        batch_size=64)","b6f53b83":"# get score test model\ntest_loss, test_acc = cnn.evaluate(X_test, y_test)\ntest_acc","5959fa44":"# predict test data\npredict_test = cnn.predict_classes(X_test)\ny_correct = np.argmax(y_test, axis=1)\n\n# get correct and incorrect idx from test data\ncorrect_idx = np.nonzero(predict_test==y_correct)\nincorrect_idx = np.nonzero(predict_test!=y_correct)","c3b44c01":"# show report test data\ntarget_names = [\"Class {}\".format(i) for i in range(10)]\nprint(classification_report(y_correct, predict_test, target_names=target_names))","f12c9526":"# predict finish test data\npredict = cnn.predict_classes(Y_finish)","7091002d":"# create DataFrame predict finish data\ndf_out = pd.DataFrame({'ImageId': range(1, len(predict)+1),\n                       'Label': predict})","b3543d86":"# create answers for Kaggle csv\ndf_out.to_csv('mnist_cnn.csv', index=False, header=True)","f41a9dc1":"## <b><font color='3C89F9'>Deep Learning<\/font><\/b><b> by Keras<\/b>","f3a955bc":"## <b><font color='3C89F9'>Save results<\/font>","558dc68f":"## <b><font color='3C89F9'>Data load<\/font><\/b>","a7c68f13":"## <b><font color='3C89F9'>Data preparation<\/font><\/b>"}}