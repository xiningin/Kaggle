{"cell_type":{"88525f0b":"code","f36ceff2":"code","4f235df9":"code","3d7446e6":"code","1b4e83cd":"code","4b013a76":"code","0185bfd7":"code","3ef3fef4":"code","d81d0a6a":"code","e88aedb3":"code","1f5aa4e5":"markdown","2a91fd20":"markdown"},"source":{"88525f0b":"import numpy as np, numpy.random\nimport pandas as pd\nfrom scipy.spatial import distance\n\nk = 3\np = 2","f36ceff2":"Xasli = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\") #iris data\nXasli = Xasli.drop(['Id'], axis=1)","4f235df9":"print(Xasli)","3d7446e6":"\ncolumns = list(Xasli.columns)\nfeatures = columns[:len(columns)-1]\nclass_labels = list(Xasli[columns[-1]])\nX = Xasli[features]\n\nprint(X)\n","1b4e83cd":"# Print the number of data and dimension \nn = len(X)\nd = len(X.columns)\naddZeros = np.zeros((n, 1))\nX = np.append(X, addZeros, axis=1)\nprint(\"The FCM algorithm: \\n\")\nprint(\"The training data: \\n\", X)\nprint(\"\\nTotal number of data: \",n)\nprint(\"Total number of features: \",d)\nprint(\"Total number of Clusters: \",k)\n","4b013a76":"# Create an empty array of centers\nC = np.zeros((k,d+1))\nprint(C)\n\n","0185bfd7":"# Randomly initialize the weight matrix\nweight = np.random.dirichlet(np.ones(k),size=n)\nprint(\"\\nThe initial weight: \\n\", np.round(weight,2))\n","3ef3fef4":"\nfor it in range(10): # Total number of iterations\n    \n    # Compute centroid\n    for j in range(k):\n        denoSum = sum(np.power(weight[:,j],2))\n        \n        sumMM =0\n        for i in range(n):\n            mm = np.multiply(np.power(weight[i,j],p),X[i,:])\n            sumMM +=mm\n        cc = sumMM\/denoSum\n        C[j] = np.reshape(cc,d+1)\n \n    #print(\"\\nUpdating the fuzzy pseudo partition\")\n    for i in range(n):\n        denoSumNext = 0\n        for j in range(k):\n             denoSumNext += np.power(1\/distance.euclidean(C[j,0:d], X[i,0:d]),1\/(p-1))\n        for j in range(k):\n            w = np.power((1\/distance.euclidean(C[j,0:d], X[i,0:d])),1\/(p-1))\/denoSumNext\n            weight[i,j] = w  \n            \nprint(\"\\nThe final weights: \\n\", np.round(weight,2))\n    \n    \n\n","d81d0a6a":"for i in range(n):    \n    cNumber = np.where(weight[i] == np.amax(weight[i]))\n    X[i,d] = cNumber[0]\n    \nprint(\"\\nThe data with cluster number: \\n\", X)\n","e88aedb3":"# Sum squared error calculation\nSSE = 0\nfor j in range(k):\n    for i in range(n):\n        SSE += np.power(weight[i,j],p)*distance.euclidean(C[j,0:d], X[i,0:d])\n\nprint(\"\\nSSE: \",np.round(SSE,4))","1f5aa4e5":"# Fuzzy C-means ","2a91fd20":"Sumbernya dari yutub https:\/\/www.youtube.com\/watch?v=FA-hJBu5Bkc dan kodingannya http:\/\/www.cleartheconcepts.com\/fuzzy-c-means\/"}}