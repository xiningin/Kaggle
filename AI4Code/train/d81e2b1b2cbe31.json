{"cell_type":{"18bfdb9d":"code","ad602a5c":"code","e7e3a1e3":"code","ee4ba451":"code","f92f931e":"code","46430484":"code","87b7e530":"code","43fc97d2":"markdown","9e5b94ab":"markdown","99f5b720":"markdown","687c88fc":"markdown","ea74a32c":"markdown","a63000ba":"markdown","abadf883":"markdown","366e5da3":"markdown","5646bca4":"markdown","f48de4e1":"markdown","6ce138d9":"markdown"},"source":{"18bfdb9d":"import pandas as pd\nimport numpy as np\nimport kmapper as km\nimport sklearn\nfrom plotly.offline import init_notebook_mode, iplot\nimport igraph as ig\n\nnp.random.seed(1234)\ninit_notebook_mode(connected=True)","ad602a5c":"df=pd.read_csv(\"..\/input\/PlayerAverages_utf8.csv\")\ndf.columns","e7e3a1e3":"%%capture\n# Drop fantasy related columns - we only want to cluster players based on their in-game performance\nX = df[[col for col in df.columns if col not in ['Points', 'Bonus']]]\n\n# Extract the list of player names and then drop from the data\nnames = X['Identifier'].values\nX.drop('Identifier', axis=1, inplace=True)\n\n# Get the overall averages for each stat for comparison later\nmeans = np.mean(X.values, axis=0)\nstd_dev = np.std(X.values, axis=0)","ee4ba451":"# Initialise mapper and create lens using TSNE\nmapper = km.KeplerMapper(verbose=0)\nlens = mapper.fit_transform(X.values, projection=sklearn.manifold.TSNE(random_state=1234), scaler=None)\n\n# Create the graph of the nerve of the corresponding pullback\ngraph = mapper.map(lens, X.values, clusterer=sklearn.cluster.KMeans(n_clusters=2, random_state=1234),\n                   nr_cubes=20, overlap_perc=0.5)","f92f931e":"def get_cluster_summary(player_list, average_mean, average_std, dataset, columns):\n    # Compare players against the average and list the attributes that are above and below the average\n\n    cluster_mean = np.mean(dataset.iloc[player_list].values, axis=0)\n    diff = cluster_mean - average_mean\n    std_m = np.sqrt((cluster_mean - average_mean) ** 2) \/ average_std\n\n    stats = sorted(zip(columns, cluster_mean, average_mean, diff, std_m), key=lambda x: x[4], reverse=True)\n    above_stats = [a[0] + ': ' + f'{a[1]:.2f}' for a in stats if a[3] > 0]\n    below_stats = [a[0] + ': ' + f'{a[1]:.2f}' for a in stats if a[3] < 0]\n    below_stats.reverse()\n\n    # Create a string summary for the tooltips\n    cluster_summary = 'Above Mean:<br>' + '<br>'.join(above_stats[:5]) + \\\n                      '<br><br>Below Mean:<br>' + '<br>'.join(below_stats[-5:])\n\n    return cluster_summary\n\ndef make_igraph_plot(graph, data, X, player_names, layout, mean_list, std_dev_list, title, line_color='rgb(200,200,200)'):\n    # Extract node information for the plot\n    div = '<br>-------<br>'\n    node_list = []\n    cluster_sizes = []\n    avg_points = []\n    tooltip = []\n    for node in graph['nodes']:\n        node_list.append(node)\n        players = graph['nodes'][node]\n        cluster_sizes.append(2 * int(np.log(len(players) + 1) + 1))\n        avg_points.append(np.average([data.iloc[i]['Points'] for i in players]))\n        node_info = node + div + '<br>'.join([player_names[i] for i in players]) + div + \\\n                    get_cluster_summary(players, mean_list, std_dev_list, X, X.columns)\n        tooltip += tuple([node_info])\n\n    # Add the edges to a list for passing into iGraph:\n    edge_list = []\n    for node in graph['links']:\n        for nbr in graph['links'][node]:\n            # Need to base everything on indices for igraph\n            edge_list.append((node_list.index(node), node_list.index(nbr)))\n\n    # Make the igraph plot\n    g = ig.Graph(len(node_list))\n    g.add_edges(edge_list)\n\n    links = g.get_edgelist()\n    plot_layout = g.layout(layout)\n\n    n = len(plot_layout)\n    x_nodes = [plot_layout[k][0] for k in range(n)]  # x-coordinates of nodes\n    y_nodes = [plot_layout[k][1] for k in range(n)]  # y-coordinates of nodes\n\n    x_edges = []\n    y_edges = []\n    for e in links:\n        x_edges.extend([plot_layout[e[0]][0], plot_layout[e[1]][0], None])\n        y_edges.extend([plot_layout[e[0]][1], plot_layout[e[1]][1], None])\n\n    edges_trace = dict(type='scatter', x=x_edges, y=y_edges, mode='lines', line=dict(color=line_color, width=0.3),\n                       hoverinfo='none')\n\n    nodes_trace = dict(type='scatter', x=x_nodes, y=y_nodes, mode='markers', opacity=0.8,\n                       marker=dict(symbol='circle-dot', colorscale='Viridis', showscale=True, reversescale=False,\n                                   color=avg_points, size=cluster_sizes,\n                                   line=dict(color=line_color, width=0.3),\n                                   colorbar=dict(thickness=20, ticklen=4)),\n                       text=tooltip, hoverinfo='text')\n\n    axis = dict(showline=False, zeroline=False, showgrid=False, showticklabels=False, title='')\n\n    layout = dict(title=title, font=dict(size=12), showlegend=False, autosize=False, width=700, height=700,\n                  xaxis=dict(axis), yaxis=dict(axis), hovermode='closest', plot_bgcolor='rgba(20,20,20, 0.8)')\n\n    iplot(dict(data=[edges_trace, nodes_trace], layout=layout))","46430484":"make_igraph_plot(graph, df, X, names, 'kk', means, std_dev, 'Player data - resolution=20')","87b7e530":"graph = mapper.map(lens, X.values, clusterer=sklearn.cluster.KMeans(n_clusters=2, random_state=1234),\n                   nr_cubes=30, overlap_perc=0.7)\n\nmake_igraph_plot(graph, df, X, names, 'kk', means, std_dev, 'Player data - resolution=30')","43fc97d2":"Each node represents a group of players with some characteristics in common. It's possible for a single player to appear in multiple nodes and this is the criteria for linking two nodes with an edge.\n\nNote that it's possible to zoom and pan on the above plot. Hovering over any node will show a tooltip with the list of players in the node along with which of their stats are significantly above and below the average. In other words the characteristics that these players share and the reason they're grouped together.\n\nSo, what exactly is being conveyed in this plot? Let's start with the top middle where there is a block of 3 linked diamond shapes. The clusters in here represent the \"pass masters\" - looking at each node we can see that the averages for completed passes and pass accuracy are above the average. We can also see a nice transition though across the spectrum of high-passing players. To the right we have clusters representing 'ball-winning passers' - we have a mixture of defenders who can pass well (Like Robertson and Mertesacker), high pressing creators like Erikson or destroyer midfielders like Wanyama and Kant\u00e9. They recycle possession regularly so the combination of high passing and high recovery fits their role well.\n\nAs we move more to the left of that cluster we have the pure creators. These are the players whose high passing is for the purpose of making goal-scoring chances. Right at the top we have the players who embody this the most - De Bruyne, Ozil and Fabregas. Looking at the colours of the node we can also see a slight transition from darker to lighter - these creators are the ones who score the most points from a fantasy football perspective.\n\nSpeaking of nodes with a high points score, three linked nodes right at the bottom have a bright green indicating a high points average. Hazard and Sanchez stand out alone as being high chance creators but through individual skill (i.e. dribbling) rather than incisive passing. There is a similar group at the top that also contains chance creating dribblers (Lingard, Willian, Sterling). They have a similar playing style to Sanchez and Hazard but are far less effective at it.\n\nIt's worth moving across the largest cluster to see how the nodes change as you move across the graph. The bottom left of the big cluster has the high-tacking, high blocking defenders and transitions to goal-scorers to the left of centre (This is the brightest area of the graph contain high scorers like Aguero and Salah). The link between these two spokes are the hard working forwards, who combine a goal threat with a more combative nature (Firmino, Giroud and Jesus for example). The Y shape at the top of that section has creative players in the centre, which provide the link between high-crossing defenders (Mainly wing-backs) and strikers who make up the top left part.","9e5b94ab":"Kepler Mapper allows for plotting in html using the D3 JavaScript library and generates a nice interactive webpage. In order to allow for interactive plots within this notebook I'll use plotly instead (There is an update in progress to allow this natively within kepler mapper but as of writing it's not finished yet). Let's first define some functions that will be used for extracting information about each node and then replicating the network plot using igraph and plotly.\n\nThis is pretty lengthy for a notebook code block but will make it easy later on to regenerate the plots with different parameters.","99f5b720":"One of the really useful things about mapper is the ability to customise the scale at which you're looking at the data. Intuitively this is like zooming in on the data - by looking at it with a higher resolution some of those larger clusters could be teased apart into distinct groups.\n\nTechnical this will be done by increasing the number of cubes that are used to partition the projected points. I'll increase this to 30 and see what impact it has on the graph","687c88fc":"Now that the data is ready I'm going to apply the mapper algorithm and create a network graph. The first step will be to use t-SNE to project the dataset into 2 dimensions, then look at a covering of the pullback to generate the graph. \n\nFor a nice overview of what the mapper algorithm is doing, one of the kepler mapper contributors has a clear explanation [here](https:\/\/sauln.github.io\/blog\/mapper-intro\/). For anyone looking to really get into the maths behind this, Gunnar Carlssons [paper](http:\/\/www.ayasdi.com\/wp-content\/uploads\/2015\/02\/Topology_and_Data.pdf) is the ideal place to start.","ea74a32c":"There's still one large cluster and two other large clusters that have remained largely intact. There are far more small clusters now though, dominating the outside of the graph.\n\nLet's take goalkeepers for example. At the bottom right of the graph there is a cluster containing a lot of goalkeepers. Looking at each node, one thing they have in common is that their pass accuracy is below the mean in each case - it's at about 50% for most of them. Considering keepers tend to boot the ball down the pitch when they get it, this seems pretty fair. Those goalkeepers who are hitting average with their pass accuracy (Which is probably high for a goalkeeper) are now in their own cluster, just left of centre on the bottom. Naturally this contains the keepers from teams who like to pass out rather than play long - Lloris, Vorm, Ederson, Mignolet and Karius. The fact that both Vorm and Lloris and Karius and Mignolet are grouped closely show that this is more an artefact of the teams play-style rather than something purely individual.\n\nIt's interesting to take a look at the typical high-scoring players (From a  fantasy football point of view) and see who is similar. Let's look close to the centre of the main block where Aguero and Salah sit,  whose playstyle seems all about taking risks. They both dribble a lot yet get tackled a lot, they miss a lot of big chances and yet still create and score plenty. What's also interesting is the other players who are grouped with them -  Ibe and Bojan - players whose talent and potential have been touted before but who would not normally be associated with a Salah or Aguero. It really highlights how fine the margins are at the top - start missing a few more chances and player of the year Salah could have been Jordan Ibe... ","a63000ba":"### Increasing the resolution","abadf883":"Looking at the above list we have a wide range of stats that we can use for grouping each player. Since the data was taken from the fantasy football game we also have the average points that each player received per game. This will serve as a proxy for how effective that player is but, for grouping the players together I'd rather focus just on their in-game performance, so we'll drop it out for now. \n\nAdmittedly this isn't perfect - defenders should be judged on, well, defence, however goalscoring defenders will have higher points scores than others. Still, it will give a useful, high-level way to compare the different clusters that mapper will generate.","366e5da3":"Now that the functions we need are in place we're finally in a position to do some analysis. Let's use the above functions now to produce the graph output from mapper","5646bca4":"One of the more frequent use cases for topological analysis is to identify related clusters and subgroups within a complex, high dimensional dataset. Taking inspiration from [this paper](https:\/\/www.nature.com\/articles\/srep01236) I'll make use of the mapper algorithm to try and identify different archetypes of premier league players.\n\nThe dataset has been pulled from the Fantasy Premierleague website and contains averages per 90 minutes for each player across a number of measures for last season. Some pre-processing and cleaning has already been performed on this data, in particular matches were only included if the players was involved for more than 25 minutes.\n\nI'm going to use the [kepler mapper](https:\/\/kepler-mapper.scikit-tda.org\/) library for performing the analysis, along with [plotly](https:\/\/plot.ly\/python\/) to keep the network plots interactive. So, let's get started and import all the packages needed and load in the data set","f48de4e1":"### Player clustering using mapper","6ce138d9":"### Data and code setup"}}