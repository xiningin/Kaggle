{"cell_type":{"e5bb4758":"code","4a23cd0c":"code","39227db6":"code","ee00ad8e":"code","81e1f441":"code","ba98f62f":"code","0d1ad613":"code","a914ea76":"code","7797939b":"code","31fa7216":"code","92241863":"code","2560cf4b":"markdown","973db013":"markdown","187fc10b":"markdown","33dfd44e":"markdown","25601860":"markdown"},"source":{"e5bb4758":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport folium # plot map\nfrom folium.plugins import MarkerCluster\n\nimport matplotlib.pyplot as plt # plot\n%matplotlib inline\n\nfrom sklearn.cluster import KMeans # model\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4a23cd0c":"# read data\ndata = pd.read_csv('\/kaggle\/input\/taxi-routes-for-mexico-city-and-quito\/mex_clean.csv')\ndata.head()","39227db6":"# calculate vendor and how much pickup activities\ndata['vendor_id'].value_counts()","ee00ad8e":"# chose one vendor and plot it\ntaxi_libre = data[data['vendor_id'] == 'M\u00e9xico DF Taxi Libre']\n\nplt.figure(figsize=(12, 6))\nplt.scatter(taxi_libre['pickup_latitude'], taxi_libre['pickup_longitude'])\nplt.show()","81e1f441":"# use kmeans with centeroid random to get ceteroid of found cluster\nkmeans = KMeans(n_clusters=3, random_state=10)\n\ntaxi_libre['cluster'] = kmeans.fit_predict(taxi_libre[['pickup_latitude', 'pickup_longitude']])","ba98f62f":"# plot initial cluster\nplt.figure(figsize=(12, 6))\nplt.scatter(taxi_libre['pickup_latitude'][taxi_libre['cluster'] == 0], taxi_libre['pickup_longitude'][taxi_libre['cluster'] == 0], c='r', label='c0')\nplt.scatter(taxi_libre['pickup_latitude'][taxi_libre['cluster'] == 1], taxi_libre['pickup_longitude'][taxi_libre['cluster'] == 1], c='y', label='c1')\nplt.scatter(taxi_libre['pickup_latitude'][taxi_libre['cluster'] == 2], taxi_libre['pickup_longitude'][taxi_libre['cluster'] == 2], c='g', label='c2')\nplt.legend()\nplt.show()","0d1ad613":"c0_count = taxi_libre[taxi_libre['cluster'] == 0].shape[0]\nc1_count = taxi_libre[taxi_libre['cluster'] == 1].shape[0]\nc2_count = taxi_libre[taxi_libre['cluster'] == 2].shape[0]\nprint('cluster0: {}\\ncluster1: {}\\ncluster2: {}'.format(c0_count, c1_count, c2_count))","a914ea76":"# drop cluster 1 and 2\ntaxi_libre0 = taxi_libre[taxi_libre['cluster'] == 0]\ntaxi_libre0.drop(['cluster'], axis=1, inplace=True)\ntaxi_libre0.head()","7797939b":"taxi_libre0['cluster'] = kmeans.fit_predict(taxi_libre0[['pickup_latitude', 'pickup_longitude']])\ntaxi_libre0.head()","31fa7216":"# where centeroid of cluster\ncenteroid = kmeans.cluster_centers_\nplt.figure(figsize=(12, 6))\nplt.scatter(taxi_libre0['pickup_latitude'][taxi_libre0['cluster'] == 0], taxi_libre0['pickup_longitude'][taxi_libre0['cluster'] == 0], c='r', label='c0')\nplt.scatter(taxi_libre0['pickup_latitude'][taxi_libre0['cluster'] == 1], taxi_libre0['pickup_longitude'][taxi_libre0['cluster'] == 1], c='y', label='c1')\nplt.scatter(taxi_libre0['pickup_latitude'][taxi_libre0['cluster'] == 2], taxi_libre0['pickup_longitude'][taxi_libre0['cluster'] == 2], c='g', label='c2')\nplt.scatter(centeroid[:,0], centeroid[:,1], c='b', marker='d', label='centeroid')\nplt.legend()\nplt.show()","92241863":"# show port location in map\nm = folium.Map(\n    location=[centeroid[0][0], centeroid[0][1]],\n    set_zoom=17,\n)\n\nfor i in range(centeroid.shape[0]):\n    folium.Marker([centeroid[i][0], centeroid[i][1]], poop=str(i)).add_to(m)\n\nm","2560cf4b":"## Cluster pickup port\n- For this work I will try find place to build port one of taxi vendor.\n- Model use is KMeans and centeroid set to 3.\n- For reason choose 3 centeroid I don't have particular reason.","973db013":"- Found cluster1 and cluster2 count litle, and I need to cluster again in cluster0.\n- For now I will drop cluster1 and cluster2","187fc10b":"- This plot wil show were is port need to build","33dfd44e":"- where location in map","25601860":"## Ther lot ting that need to fix like\n- In final cluster ther lot pickup area that can be cluster again\n- How much centeroid needed? For this aproach I use 3 centeroid pickup by random\n- For next time I will try use DBSCAN model\n\n> For advice and opinion in comment for this work I really appreciate."}}