{"cell_type":{"543f3419":"code","48016c84":"code","fc68db1a":"code","4fcec284":"code","410df179":"code","a7b10c45":"code","7aa6941e":"code","bb2fd53f":"code","9473439d":"code","f0274d20":"code","789a1ce5":"code","c52b7bba":"markdown","da10f9f5":"markdown","94fd7134":"markdown","01e98404":"markdown","b64aeed4":"markdown","52fdbf45":"markdown","38fba421":"markdown"},"source":{"543f3419":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","48016c84":"dataset = pd.read_csv('\/kaggle\/input\/covid19-confirmed-cases-kerala\/Confirmed Covid 19 Cases Kerala.csv')\n\nX = [] # Create X as a list\nfor i in range(0, len(dataset['Date'])): #Loop through the date column \n  X.append(i) # Append the number i as the number of days\nX = np.asarray(X) # Change X to numpy array\nX = X.reshape(-1,1) # Reshape X \ny = dataset.iloc[:,-1].values","fc68db1a":"dataset.head()","4fcec284":"dataset.tail()","410df179":"dataset.describe().transpose()","a7b10c45":"dataset.isnull().any()","7aa6941e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1\/3, random_state = 0)","bb2fd53f":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 15, random_state = 0)\nregressor.fit(X, y)","9473439d":"from sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\npoly_reg = PolynomialFeatures(degree = 6)\nX_poly = poly_reg.fit_transform(X)\nlin_reg = LinearRegression()\nlin_reg.fit(X_poly, y)","f0274d20":"from matplotlib.pyplot import figure\nX_grid = np.arange(min(X), max(X), 0.01)\nX_grid = X_grid.reshape((len(X_grid), 1))\npred = regressor.predict(X_grid)\n\nfigure(figsize=(20, 10), dpi=80)\n\nfig, ax = plt.subplots(2,1 ,figsize=(15,15))\n\nax[0].plot(X, y, color = 'tomato', label = 'Real')\nax[0].plot(X_grid, pred, color = 'navy' , label = 'Prediction')\nax[0].set_title('Covid-19 Cases')\nax[0].set_xlabel('Days')\nax[0].set_ylabel('Cases')\nax[0].legend(loc = 'upper left')\n\n\nax[1].scatter(X, y, color = 'red', label = 'Real')\nax[1].plot(X_grid, pred, color = 'navy', label = 'Prediction')\nax[1].set_title('Covid-19 Cases')\nax[1].set_xlabel('Days')\nax[1].set_ylabel('Cases')\nax[1].legend(loc = 'upper left')\n\nplt.show()\n","789a1ce5":"from matplotlib.pyplot import figure\n\nfigure(figsize=(13, 8), dpi=80)\n\nX_grid = np.arange(min(X), max(X), 0.1)\nX_grid = X_grid.reshape((len(X_grid), 1))\nplt.scatter(X, y, color = 'tomato', label = 'Real')\nplt.plot(X_grid, lin_reg.predict(poly_reg.fit_transform(X_grid)), color = 'navy', label = 'Prediction')\nplt.title('Covid-19 Cases')\nplt.xlabel('Days')\nplt.ylabel('Cases')\nplt.legend(loc = 'upper left')\nplt.show()","c52b7bba":"Create data frame\n\nChanging dates to numerical values","da10f9f5":"Training using Random Forest Regression","94fd7134":"Visualizing Random Forest Regression","01e98404":"Traning using polynomial regression","b64aeed4":"Visualizing Polynomial Regression","52fdbf45":"Splitting","38fba421":"Checking for any missing data"}}