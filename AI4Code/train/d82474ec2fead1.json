{"cell_type":{"1ac08ff4":"code","15205d9c":"code","5b48e3d7":"code","c6047c7b":"code","5da77733":"code","641b2e4e":"code","167ad51d":"code","e048197e":"code","936f08b1":"code","9eb430c0":"code","bc15854e":"code","de4e33f7":"code","ab58e542":"markdown","e94644b7":"markdown","adf40718":"markdown","dd09c201":"markdown","9d04544b":"markdown","06b8eb7b":"markdown","0426ef47":"markdown","802aea41":"markdown","dfccf40a":"markdown","95f28d48":"markdown","f5b73ee1":"markdown"},"source":{"1ac08ff4":"import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns ","15205d9c":"# matplotlib setting\nmpl.rcParams['figure.dpi'] = 200\nmpl.rcParams['axes.spines.top'] = False\nmpl.rcParams['axes.spines.right'] = False\n\n# pandas setting\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)","5b48e3d7":"train = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/test.csv')\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv')","c6047c7b":"print(train.shape)\nprint(test.shape)\n\ntrain.head()","5da77733":"for col in train.columns:\n    if 'int' in str(train[col].dtype):\n        print(col, end=' ')","641b2e4e":"train.loc[:, 'f0':'f284'].describe().T.style.bar(subset=['mean'], color='#205ff2')\\\n                            .background_gradient(subset=['std'], cmap='Reds')\\\n                            .background_gradient(subset=['50%'], cmap='coolwarm')","167ad51d":"train['target'].value_counts()","e048197e":"np.random.seed(2110)\ntrain = train.sample(10000)\ntest = test.sample(10000)","936f08b1":"features = \"f2 f10 f23 f44 f68 f70  f73 f98 f104 f105 f120 f138 f139 f141 f142 f143 f146 f157 f158 f175 f187 f188 f200 f222 f239\".split()","9eb430c0":"fig, axes = plt.subplots(11,11,figsize=(14, 14))\naxes = axes.flatten()\n\nfor idx, ax in enumerate(axes):\n    if idx in [22, 43]:\n        ax.axis(\"off\")\n        continue\n    sns.kdeplot(data=train, x=f'f{idx}', \n                fill=True, \n                ax=ax)\n    sns.kdeplot(data=test, x=f'f{idx}', \n                fill=True, \n                ax=ax)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_xlabel('')\n    ax.set_ylabel('')\n    ax.spines['left'].set_visible(False)\n    if f'f{idx}' in features:\n        ax.spines[:].set_visible(True)\n        ax.spines[:].set_color('red')\n    ax.set_title(f'f{idx}', loc='right', weight='bold', fontsize=10)\n\nfig.supxlabel('Feature Distribution (by feature f0-f120)', ha='center', fontweight='bold')\n\nfig.tight_layout()\nplt.show()","bc15854e":"fig, axes = plt.subplots(11,11,figsize=(14, 14))\naxes = axes.flatten()\n\nfor idx, ax in enumerate(axes, 121):\n    if idx in [22, 43]:\n        ax.axis(\"off\")\n        continue\n    sns.kdeplot(data=train, x=f'f{idx}', \n                fill=True, \n                ax=ax)\n    sns.kdeplot(data=test, x=f'f{idx}', \n                fill=True, \n                ax=ax)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_xlabel('')\n    ax.set_ylabel('')\n    ax.spines['left'].set_visible(False)\n    if f'f{idx}' in features:\n        ax.spines[:].set_visible(True)\n        ax.spines[:].set_color('red')\n    ax.set_title(f'f{idx}', loc='right', weight='bold', fontsize=10)\n\nfig.supxlabel('Feature Distribution (by feature f121-f241)', ha='center', fontweight='bold')\n\nfig.tight_layout()\nplt.show()","de4e33f7":"binary_mean = train.loc[:,['f22', 'f43']+[f'f{i}' for i in range(242, 285)]].mean()\n\nfig, ax = plt.subplots(1, 1, figsize=(15, 6))\n\nax.bar(binary_mean.index, binary_mean, linewidth=0.2, edgecolor='black', alpha=1, color='#244747')\n\nax.set_ylim(0, 1)\nax.set_xticks(range(0, 44, 4))\nax.margins(0.01)\nax.grid(axis='y', linestyle='--', linewidth=0.2, zorder=5)\nax.set_title('Mean of binary features', loc='center', fontweight='bold')\nax.legend()\nplt.show()","ab58e542":"## [TPS-Oct] Simple EDA\n\nIt's surprising that 2021 is already only 3 months away.\n\nI hope I can enjoy it with all the Kaglers this time too.\n\n---\n\n### Summary\n\n- There are no missing values in both train ans test dataset.\n- The train consists of 1000000 data, and the test consists of 500000 data.\n- almost of `f0`~`f241` : continuous feature (240)\n- **`f22`, `f43`**, `f242` ~ `f284` : binary feature (45)\n- The value of target is 0 or 1.\n- The value of target is almost half-and-half. ","e94644b7":"## Feature Distribution\n\nIf you have too much data, it's a good idea to sample and visualize the approximate distribution first.","adf40718":"Since there are many columns, you need to configure it for EDA to be convenient.","dd09c201":"## Feature Statistics","9d04544b":"## Import Library","06b8eb7b":"Since there is too much data, it would be better to minimize the time for file input\/output by using a library such as `datable`.\n\n- [datable](https:\/\/github.com\/h2oai\/datatable)\n    - example notebook : [@SRK : Getting started with Python datatable](https:\/\/www.kaggle.com\/sudalairajkumar\/getting-started-with-python-datatable)","0426ef47":"## Binary Feature\n\n","802aea41":"Some features are continuous real numbers, others are binary. Let's take a look.","dfccf40a":"- The distribution of train and test is similar.\n- There are various types of data distribution. Think about what the reason might be.","95f28d48":"The value of target is almost half-and-half.","f5b73ee1":"> Some unusual features are highlighted in red."}}