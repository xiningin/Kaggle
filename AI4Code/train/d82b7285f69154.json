{"cell_type":{"3fbcf1e8":"code","faf2ada2":"code","71ac7583":"code","f2244e1e":"code","e45e94ff":"code","0b719c21":"code","e661d6e7":"code","95d656dc":"code","4c150b6d":"code","56711da1":"code","2a6980c5":"code","ea565f63":"code","c2c5c241":"code","af7c2bf4":"code","4be2c91f":"code","a92bf351":"code","cb84aa13":"code","42821b54":"code","92a69156":"code","75644453":"code","f37ff610":"code","0c32a590":"code","11450084":"code","2817a81f":"code","77980d6a":"code","9439d58f":"code","a10ecef5":"code","b429ad68":"code","47604c51":"code","9edcfca4":"code","0f86e0fe":"code","d4d66dc1":"code","4085e7d9":"code","4485c243":"code","7d498489":"code","febfaf70":"code","786d2eac":"code","3c21c223":"code","8e0f79f2":"code","c99775d9":"code","c44b0176":"code","d7c092b0":"code","94733034":"code","cbec6904":"code","a1857ef7":"code","7aaf8f20":"code","cde70469":"code","7501c2d6":"code","5389f25c":"code","06373d3f":"code","363d85da":"code","e84f4c97":"code","ade661ae":"code","dc1e79b3":"code","b7226861":"code","efb7fa26":"code","f523fdc5":"code","dd6ad686":"code","e8ce9a96":"code","66a10bc5":"code","7f675097":"code","ab6d56b9":"code","b6db5ea0":"code","2ff2434c":"code","fb545b6e":"code","f07348d0":"code","3406df4f":"markdown","45871df5":"markdown","5ae99e0c":"markdown","89fbeb41":"markdown","82f69243":"markdown","84e763a6":"markdown","d853b8d2":"markdown","9ff9aa3f":"markdown","8fbbd535":"markdown","e8c44022":"markdown","c6ca002a":"markdown","20b09a77":"markdown","3f351e78":"markdown","87b31dc2":"markdown","792fb12d":"markdown","b6dcd490":"markdown","4abd648b":"markdown","2240afc5":"markdown","f2740a74":"markdown","d2d92e79":"markdown","9ee58ace":"markdown","7d5ca6e0":"markdown","a6f22a60":"markdown","eab8c0cf":"markdown","9a1d1b22":"markdown","a2903e76":"markdown","1d658709":"markdown","2d998337":"markdown","d92de7ee":"markdown","6103b3d4":"markdown","44b48c06":"markdown","4c89424d":"markdown","ba91c9ef":"markdown","2bfb76b6":"markdown","071deb85":"markdown","bba21693":"markdown","b328af45":"markdown","e9a6f29e":"markdown","dacf3261":"markdown","3635f694":"markdown","45e2fbb2":"markdown","e9c7ad87":"markdown","cfcbebd7":"markdown","cd6a5a8e":"markdown","381355ee":"markdown","cffb5f6b":"markdown","adb1588e":"markdown","5f7bfede":"markdown","70ea16fa":"markdown","bf09a9d5":"markdown","ef221634":"markdown","adfaec6d":"markdown","9c062177":"markdown"},"source":{"3fbcf1e8":"# importing packages and libraries and matplotlib for visualization\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\n\n%matplotlib inline","faf2ada2":"#importing CSV into data frame.\ndf = pd.read_csv(\"\/kaggle\/input\/noshowappointments\/KaggleV2-May-2016.csv\")\nrows, columns = df.shape\nprint(\"The data frame has \"+ str(rows) +\" rows and \" + str(columns) + \" columns\")","71ac7583":"#browse sample of data values and formats of each feature. \ndf.head()","f2244e1e":"#browse data frame columns data types\ndf.info()","e45e94ff":"#print out statistical details of the numeric data.\ndf.describe()","0b719c21":"#check number of not showing up patinets to an appointment on scale of 100\n#group by no-show column\nno_show_percentage = pd.DataFrame(df.groupby([\"No-show\"])[\"PatientId\"].count())\n#calculate percentage of show up and no show and store it in column No-Show\nno_show_percentage[\"No-show\"] = no_show_percentage[\"PatientId\"] \/ sum(no_show_percentage[\"PatientId\"]) * 100\nno_show_percentage.drop(columns=\"PatientId\", inplace=True)\n#plot the dataframe \nno_show_percentage.plot.bar(figsize=(10,5))\nplt.ylim(top=100)\nplt.title(\"Medical Appointments\",{'fontsize': 20},pad=20)\nplt.xlabel(\"Appointment Status\")\nplt.xticks(np.arange(2), ('Show-Up', 'No-Show'), rotation=0)\nplt.legend([\"Appointment Status Rate\"])\n","e661d6e7":"#checking the age distripution\ndf[\"Age\"].describe()","95d656dc":"#Check number of duplicated records in the data frame. \nprint(\"Number of duplicate recrods: \" + str(sum(df.duplicated())))","4c150b6d":"#assure gender has only two unique values\ndf[\"Gender\"].unique()","56711da1":"#check neighbourhood unique list\ndf[\"Neighbourhood\"].unique()","2a6980c5":"#check number of wrong values of handcap that exceeds a value of 1\nprint(\"Number of wrong handicap values: \" + str(df.query(\"Handcap > 1\")[\"Handcap\"].count()))","ea565f63":"#check scheduled Day and Appointment Day description\ndf[[\"ScheduledDay\",\"AppointmentDay\"]].describe()","c2c5c241":"#new column names for columns requires word seperation with underscore or spelling mistakes\ncolumnNames = {\n            \"PatientId\":\"patient_id\", \n            \"AppointmentID\":\"appointment_id\",\n            \"ScheduledDay\":\"scheduled_day\",\n            \"AppointmentDay\":\"appointment_day\",\n            \"Hipertension\":\"hypertension\",\n            \"Handcap\":\"handicap\",\n            \"No-show\":\"no_show\"\n            }\ndf = pd.read_csv(\"\/kaggle\/input\/noshowappointments\/KaggleV2-May-2016.csv\")\n#rename columns\ndf.rename(columns=columnNames, inplace=True)\n#lower case all columns names\ndf.columns = df.columns.str.lower()\ndf.dtypes","af7c2bf4":"#converting columns scheduled_day and appointment_day to datetime64\ndf['scheduled_day'] = pd.to_datetime(df['scheduled_day'], format=\"%Y-%m-%d %H:%M:%S\")\ndf['appointment_day'] = pd.to_datetime(df['appointment_day'], format=\"%Y-%m-%d %H:%M:%S\")\n#confirm new data types, as well check no null values was generated because of the transition.\ndf[[\"scheduled_day\",\"appointment_day\"]].info()","4be2c91f":"#look at the description of the date time columns\ndf[[\"scheduled_day\",\"appointment_day\"]].describe()","a92bf351":"df['appointment_day'].dt.time.describe()","cb84aa13":"#schedule_days = appointment_day - scheduled_day\ndf[\"schedule_days\"] = (df[\"appointment_day\"] - df[\"scheduled_day\"]).dt.days\n\ndf[\"schedule_days\"].describe()","42821b54":"#check ditribuption of the data for schedule_days with negative values\nax1 = plt.subplot(1,2,1)\ndf.query(\"schedule_days < 0\")[\"schedule_days\"].hist(bins=30,figsize=(13,4))\nax1.set_title(\"Days of Scheduling Before Appointment (All Negative)\")\nax1.set_xlabel(\"Delta Days (Appointment - Schedule)\")\nax1.legend([\"Number of Appointments\"])\n#check ditribuption of the data for schedule_days below that -1\nax2 = plt.subplot(1,2,2)\ndf.query(\"schedule_days < -1\")[\"schedule_days\"].hist(bins=30, figsize=(13,4))\nax2.set_title(\"Days of Scheduling Before Appointment (Below -1)\")\nax2.set_xlabel(\"Delta Days (Appointment - Schedule)\")\nax2.legend([\"Number of Appointments\"])\nplt.tight_layout()\n","92a69156":"#show the appointment date and schedule dates of appointments was scheulded 1 day after\ndf.query(\"schedule_days  == -1\")[[\"schedule_days\",\"scheduled_day\", \"appointment_day\"]].head(10)","75644453":"#apply the difference between scheduled day and appointment day with date only without time.\ndf[\"schedule_days\"] = (df[\"appointment_day\"].dt.date - df[\"scheduled_day\"].dt.date).dt.days\n#plot histogram of the negative schedule_days to confirm our results\ndf.query(\"schedule_days < 0\")[\"schedule_days\"].hist(bins=30,figsize=(10,5))\nplt.title(\"Days of Scheduling Before Appointment (All Negative)\")\nplt.xlabel(\"Delta Days (Appointment - Schedule)\")\nplt.legend([\"Number of Appointments\"])","f37ff610":"#filter our appointments which was scheduled after its day.\ndf = df.query(\"schedule_days >= 0\")\n#look at schedule days description\ndf[\"schedule_days\"].describe()","0c32a590":"#classifier function that returns the schedule_days group\ndef schedule_days_classifier(schedule_days):\n    if schedule_days == 0:\n        return \"0 Days\"\n    elif schedule_days >= 1 and schedule_days < 5:\n        return \"1-4 Days\"\n    elif schedule_days >= 5 and schedule_days < 16:\n        return \"5-15 Days\"\n    else:\n        return \"16+ Days\"\n#apply classifier and store it in schedule_days    \ndf[\"schedule_days\"] = df[\"schedule_days\"].apply(schedule_days_classifier)","11450084":"#static order of the schedule_days group\nschedule_days_order = [\"0 Days\", \"1-4 Days\", \"5-15 Days\", \"16+ Days\"]\n#group and plot\ndf.groupby([\"schedule_days\"]).count()[[\"no_show\"]].loc[schedule_days_order].plot.bar()","2817a81f":"#drop scheduled_day column\ndf.drop(columns=[\"scheduled_day\"], inplace=True)\ndf.columns","77980d6a":"#print appointment unique years\nprint(\"Appointments occured in years of: \" + np.array2string(df['appointment_day'].dt.year.unique()))\n#print appointment unique months\nprint(\"Appointments occured in months of: \" + np.array2string(df['appointment_day'].dt.month.unique()))","9439d58f":"#list of week_days\nweek_day_list = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n#week day classifier get day and returns the day name.\ndef week_day_classifier(day):\n    return week_day_list[day];\n#apply classifier and store it in week_day\ndf[\"week_day\"] = df[\"appointment_day\"].dt.weekday.apply(week_day_classifier)\n#print out week day sample data\ndf[[ \"appointment_id\", \"week_day\"]].head()","a10ecef5":"#drop appointment_day column\ndf.drop(columns=[\"appointment_day\"], inplace=True)\ndf.columns","b429ad68":"# get patient id for patients has negative age\ndf.query(\"age < 0\")[\"patient_id\"].astype(str).str[:-2]","47604c51":"#find other records for patient id =465943158731293\ndf.query(\"patient_id == '465943158731293'\")","9edcfca4":"#filter our records with negative age.\ndf = df.query(\"age >= 0\")","0f86e0fe":"#let us see the age distribution\ndf[\"age\"].describe()","d4d66dc1":"#age classifier function\ndef age_classifier(age):\n    if age >= 0 and age <18:\n        return \"Kids\"\n    elif age >= 18 and age < 37:\n        return \"Adults\"\n    elif age >= 37 and age < 55:\n        return \"Matures\"\n    else:\n        return \"Elders\"\n#apply age classifier and store into age_group    \ndf[\"age_group\"] = df[\"age\"].apply(age_classifier)\n#drop age column\ndf.drop(columns=[\"age\"], inplace=True)\n#print out patinet information smaple data\ndf[[\"patient_id\", \"gender\", \"age_group\"]].head()","4085e7d9":"#make handicap value above 1 to be equal to 1\ndf.loc[df.handicap >1 , 'handicap'] =1\ndf[[\"handicap\"]].describe()","4485c243":"#convert scholarship, hypertension, diabetes, alcoholism, handicap, sms_received to boolean\ndf[\"scholarship\"] = df[\"scholarship\"].astype(bool)\ndf[\"hypertension\"] = df[\"hypertension\"].astype(bool)\ndf[\"diabetes\"] = df[\"diabetes\"].astype(bool)\ndf[\"alcoholism\"] = df[\"alcoholism\"].astype(bool)\ndf[\"handicap\"] = df[\"handicap\"].astype(bool)\ndf[\"sms_received\"] = df[\"sms_received\"].astype(bool)\ndf[[\"scholarship\",\"hypertension\", \"diabetes\", \"alcoholism\", \"handicap\", \"sms_received\"]].dtypes","7d498489":"#Convert no_show column from Yes\/No into True\/False\ndef noshow_to_boolean(status):\n    if status == 'No':\n        return False\n    else:\n        return True\n    \ndf[\"no_show\"] = df[\"no_show\"].apply(noshow_to_boolean)\ndf[[\"no_show\"]].dtypes","febfaf70":"#dropping patient_id and appointment_id\ndf.drop(columns=['patient_id', 'appointment_id'], inplace=True)\ndf.columns","786d2eac":"#order data set columns\ndf = df[['gender', 'age_group', 'neighbourhood','scholarship','hypertension', 'diabetes',\n       'alcoholism', 'handicap', 'week_day', 'schedule_days', 'sms_received','no_show']]\n#store data frame into cleaned csv\ndf.to_csv('no_show_cleaned.csv', index=False)","3c21c223":"#load cleaned Data Frame\ndf_clean = pd.read_csv('no_show_cleaned.csv')","8e0f79f2":"#group by gender\ngender_all = df_clean.groupby([\"gender\"])[[\"gender\"]].count()\n#Calculate percentage of appointments per gender\ngender_all.columns = [\"Gender Rate\"]\ngender_all[\"Gender Rate\"] = gender_all[\"Gender Rate\"] \/ sum(gender_all[\"Gender Rate\"]) * 100\ngender_all.reset_index(inplace=True)","c99775d9":"#group by gender and no_show\ngender_by_no_show = df_clean.groupby([\"gender\", \"no_show\"])[[\"gender\"]].count()\n#calculate percentage of appointment per gender per appointment show up status\ngender_by_no_show.columns = [\"no_show_count\"]\ngender_by_no_show.reset_index(inplace=True)\ngender_by_no_show.columns = [\"Gender\", \"No Show Status\", \"No Show Count\"]\ngender_by_no_show =  pd.DataFrame(gender_by_no_show.groupby([\"Gender\",\"No Show Status\"])[\"No Show Count\"].sum() \/ gender_by_no_show.groupby([\"Gender\"])[\"No Show Count\"].sum() * 100)\ngender_by_no_show = gender_by_no_show.unstack()","c44b0176":"fig, axs = plt.subplots(1,2,figsize=(15,5))\nfig.suptitle('Appointment per Gender', fontsize=16)\n\n#plot percentage of appointments per gender\ngender_all.plot.bar(ax=axs[0])\naxs[0].set_xticklabels((\"Female\",\"Male\"), rotation=0)\naxs[0].set_ylim(top=100)\naxs[0].set_xlabel(\"Gender\")\naxs[0].legend([\"% of Appointments per Gender\"])\n\n#plot percentage of appointment per gender per appointment show up status\ngender_by_no_show.plot.bar(ax=axs[1], stacked=True)\naxs[1].set_xticklabels((\"Female\",\"Male\"), rotation=0)\naxs[1].set_ylim(top=100)\naxs[1].set_xlabel(\"Gender\")\naxs[1].legend([\"Show Up\", \"No Show\"])","d7c092b0":"#group by age group\nage_group_all = df_clean.groupby([\"age_group\"])[[\"age_group\"]].count()\n#calculate percentage of appointments per age group \nage_group_all.columns = [\"Age Group Rate\"]\nage_group_all[\"Age Group Rate\"] = age_group_all[\"Age Group Rate\"] \/ sum(age_group_all[\"Age Group Rate\"]) * 100\nage_group_all.reset_index(inplace=True)","94733034":"#group by age group per appointment show up status\nage_group_no_show = df_clean.groupby([\"age_group\", \"no_show\"])[[\"age_group\"]].count()\n#calculate percentage of appointments per age group per appointment show up status\nage_group_no_show.columns = [\"age_group_count\"]\nage_group_no_show.reset_index(inplace=True)\nage_group_no_show.columns = [\"Age Group\", \"No Show Status\", \"No Show Count\"]\nage_group_no_show = pd.DataFrame(age_group_no_show.groupby([\"Age Group\",\"No Show Status\"])[\"No Show Count\"].sum() \/ age_group_no_show.groupby([\"Age Group\"])[\"No Show Count\"].sum() * 100)\nage_group_no_show = age_group_no_show.unstack()","cbec6904":"fig, axs = plt.subplots(1,2,figsize=(15,5))\nfig.suptitle('Appointment per Age Group', fontsize=16)\n\n#plot percentage of appointments per age group \nage_group_all.plot.bar(ax=axs[0])\naxs[0].set_xticklabels((\"Under 18\",\"19 to 37\", \"38 to 55\", \"Above 55\"), rotation=0)\naxs[0].set_ylim(top=30)\naxs[0].set_xlabel(\"Age Group\")\naxs[0].legend([\"% of Appointments per Age Group\"])\n#plot percentage of appointments per age group per appointment show up status\nage_group_no_show.plot.bar(ax=axs[1], stacked=True)\naxs[1].set_xticklabels((\"Under 18\",\"19 to 37\", \"38 to 55\", \"Above 55\"), rotation=0)\naxs[1].set_ylim(top=100)\naxs[1].set_xlabel(\"Age Group\")\naxs[1].legend([\"Show Up\", \"No Show\"])","a1857ef7":"#group by schedule days group\nschedule_days_all = df_clean.groupby([\"schedule_days\"])[[\"schedule_days\"]].count().loc[schedule_days_order]\n#calculate percentage of appointments per schedule day groups\nschedule_days_all.columns = [\"Schedule Days Rate\"]\nschedule_days_all[\"Schedule Days Rate\"] = schedule_days_all[\"Schedule Days Rate\"] \/ sum(schedule_days_all[\"Schedule Days Rate\"]) * 100\nschedule_days_all.reset_index(inplace=True)","7aaf8f20":"#group by schedule days group and appointment show up status\nschedule_days_no_show = df_clean.groupby([\"schedule_days\", \"no_show\"])[[\"schedule_days\"]].count()\n#calcualte percentage of appointments per schedule day group per appointment show up status\nschedule_days_no_show.columns = [\"schedule_days_count\"]\nschedule_days_no_show.reset_index(inplace=True)\nschedule_days_no_show.columns = [\"Schedule Days\", \"No Show Status\", \"No Show Count\"]\nschedule_days_no_show = pd.DataFrame(schedule_days_no_show.groupby([\"Schedule Days\",\"No Show Status\"])[\"No Show Count\"].sum() \/ schedule_days_no_show.groupby([\"Schedule Days\"])[\"No Show Count\"].sum() * 100)\nschedule_days_no_show = schedule_days_no_show.unstack().loc[schedule_days_order]","cde70469":"fig, axs = plt.subplots(1,2,figsize=(15,5))\nfig.suptitle('Appointment per Schedule Days', fontsize=16)\n\n#plot percentage of appointments per schedule day groups\nschedule_days_all.plot.bar(ax=axs[0])\naxs[0].set_xticklabels(schedule_days_order, rotation=0)\naxs[0].set_ylim(top=30)\naxs[0].set_xlabel(\"Schedule Days\")\naxs[0].legend([\"% of Appointments per Schedule Days\"])\n\n#plot percentage of appointments per schedule day group per appointment show up status\nschedule_days_no_show.plot.bar(ax=axs[1], stacked=True)\naxs[1].set_xticklabels(schedule_days_order, rotation=0)\naxs[1].set_ylim(top=100)\naxs[1].set_xlabel(\"Schedule Days\")\naxs[1].legend([\"Show Up\", \"No Show\"])","7501c2d6":"#get only show up appointments and group by schedule days per sms_received per appointment show up status\nschedule_days_sms_showed_up = df_clean.query(\"no_show == False\").groupby([\"schedule_days\", \"sms_received\", \"no_show\"])[[\"schedule_days\"]].count()\n#calcualte the percentage of scheudle days per sms received per appointment show up status\nschedule_days_sms_showed_up.columns = [\"schedule_days_count\"]\nschedule_days_sms_showed_up.reset_index(inplace=True)\nschedule_days_sms_showed_up.columns = [\"Schedule Days\",\"SMS Recieved\", \"No Show Status\", \"No Show Count\"]\nschedule_days_sms_showed_up = pd.DataFrame(schedule_days_sms_showed_up.groupby([\"Schedule Days\",\"SMS Recieved\",\"No Show Status\"])[\"No Show Count\"].sum() \/ schedule_days_sms_showed_up.groupby([\"Schedule Days\"])[\"No Show Count\"].sum() * 100)\n#unstack twice the data\nschedule_days_sms_showed_up = schedule_days_sms_showed_up.unstack().unstack().loc[schedule_days_order]","5389f25c":"#get only no-show appointments and group by schedule days per sms_received per appointment show up status\nschedule_days_sms_no_show = df_clean.query(\"no_show == True\").groupby([\"schedule_days\", \"sms_received\", \"no_show\"])[[\"schedule_days\"]].count()\n#calcualte the percentage of scheudle days per sms received per appointment show up status\nschedule_days_sms_no_show.columns = [\"schedule_days_count\"]\nschedule_days_sms_no_show.reset_index(inplace=True)\nschedule_days_sms_no_show.columns = [\"Schedule Days\",\"SMS Recieved\", \"No Show Status\", \"No Show Count\"]\nschedule_days_sms_no_show = pd.DataFrame(schedule_days_sms_no_show.groupby([\"Schedule Days\",\"SMS Recieved\",\"No Show Status\"])[\"No Show Count\"].sum() \/ schedule_days_sms_no_show.groupby([\"Schedule Days\"])[\"No Show Count\"].sum() * 100)\n#unstack twice the data\nschedule_days_sms_no_show = schedule_days_sms_no_show.unstack().unstack().loc[schedule_days_order]","06373d3f":"fig, axs = plt.subplots(1,2,figsize=(15,5))\nfig.suptitle('SMS Reminder Affect on Early Scheduling', fontsize=16)\n\nschedule_days_sms_showed_up.plot.bar(ax=axs[0],stacked=True);\naxs[0].set_xticklabels(schedule_days_order, rotation=0)\naxs[0].set_ylim(top=100)\naxs[0].set_title(\"Show-Up Appointment\")\naxs[0].set_xlabel(\"Schedule Days\")\naxs[0].legend([\"SMS Recieved\", \"SMS Not Recieved\"])\n\nschedule_days_sms_no_show.plot.bar(ax=axs[1], stacked=True)\naxs[1].set_xticklabels(schedule_days_order, rotation=0)\naxs[1].set_ylim(top=100)\naxs[1].set_title(\"No-Show APpointment\")\naxs[1].set_xlabel(\"Schedule Days\")\naxs[1].legend([\"SMS Recieved\", \"SMS Not Recieved\"])","363d85da":"#group by week days\nweekday_all = df_clean.groupby([\"week_day\"])[[\"week_day\"]].count()\n#calculate percentage of appointment per week day\nweekday_all.columns = [\"Week Day Rate\"]\nweekday_all[\"Week Day Rate\"] = weekday_all[\"Week Day Rate\"] \/ sum(weekday_all[\"Week Day Rate\"]) * 100\n#order index column by weekday order\nweekday_all = weekday_all.reindex(week_day_list)","e84f4c97":"#group by week days per appointment show up status\nweek_day_no_show = df_clean.groupby([\"week_day\", \"no_show\"])[[\"week_day\"]].count()\n#calculate percentage of appointment per week day per appointment show up status\nweek_day_no_show.columns = [\"week_day_count\"]\nweek_day_no_show.reset_index(inplace=True)\nweek_day_no_show.columns = [\"Week Day\", \"No Show Status\", \"No Show Count\"]\nweek_day_no_show = pd.DataFrame(week_day_no_show.groupby([\"Week Day\",\"No Show Status\"])[\"No Show Count\"].sum() \/ week_day_no_show.groupby([\"Week Day\"])[\"No Show Count\"].sum() * 100)\nweek_day_no_show = week_day_no_show.unstack()\n#order index by weekday order\nweek_day_no_show = week_day_no_show.reindex(week_day_list)","ade661ae":"fig, axs = plt.subplots(1,2,figsize=(15,5))\nfig.suptitle('Appointments per Weekday', fontsize=16)\n\n#plot of percentage of appointment per week day\nweekday_all.plot.bar(ax=axs[0],stacked=True);\naxs[0].set_xticklabels(week_day_list, rotation=0)\naxs[0].set_ylim(top=30)\naxs[0].set_xlabel(\"Week Days\")\naxs[0].legend([\"% of Appointments per Week Days\"])\n\n#plot of percentage of appointment per week day per appointment show up status\nweek_day_no_show.plot.bar(ax=axs[1], stacked=True)\naxs[1].set_xticklabels(week_day_list, rotation=0)\naxs[1].set_ylim(top=100)\naxs[1].set_xlabel(\"Week Days\")\naxs[1].legend([\"Show Up\", \"No Show\"])","dc1e79b3":"#group by hypertenstion per appointment show up status\nhipertension_no_show = df_clean.groupby([\"hypertension\", \"no_show\"])[[\"no_show\"]].count()\n#calculate the percentage appointments of hypertentation  per appointment show up status\nhipertension_no_show.columns = [\"hypertension_count\"]\nhipertension_no_show.reset_index(inplace=True)\nhipertension_no_show.columns = [\"Hypertension\", \"No Show Status\", \"No Show Count\"]\nhipertension_no_show = pd.DataFrame(hipertension_no_show.groupby([\"Hypertension\",\"No Show Status\"])[\"No Show Count\"].sum() \/ hipertension_no_show.groupby([\"Hypertension\"])[\"No Show Count\"].sum() * 100)\nhipertension_no_show = hipertension_no_show.unstack()","b7226861":"#group by diabetes per appointment show up status\ndiabetes_no_show = df_clean.groupby([\"diabetes\", \"no_show\"])[[\"no_show\"]].count()\n#calculate the percentage appointments of diabetes per appointment show up status\ndiabetes_no_show.columns = [\"diabetes_count\"]\ndiabetes_no_show.reset_index(inplace=True)\ndiabetes_no_show.columns = [\"Diabetes\", \"No Show Status\", \"No Show Count\"]\ndiabetes_no_show = pd.DataFrame(diabetes_no_show.groupby([\"Diabetes\",\"No Show Status\"])[\"No Show Count\"].sum() \/ diabetes_no_show.groupby([\"Diabetes\"])[\"No Show Count\"].sum() * 100)\ndiabetes_no_show = diabetes_no_show.unstack()","efb7fa26":"#group by diabetes per appointment show up status\nalcoholism_no_show = df_clean.groupby([\"alcoholism\", \"no_show\"])[[\"no_show\"]].count()\n#calculate the percentage appointments of alcoholism per appointment show up status\nalcoholism_no_show.columns = [\"alcoholism_count\"]\nalcoholism_no_show.reset_index(inplace=True)\nalcoholism_no_show.columns = [\"Alcoholism\", \"No Show Status\", \"No Show Count\"]\nalcoholism_no_show = pd.DataFrame(alcoholism_no_show.groupby([\"Alcoholism\",\"No Show Status\"])[\"No Show Count\"].sum() \/ alcoholism_no_show.groupby([\"Alcoholism\"])[\"No Show Count\"].sum() * 100)\nalcoholism_no_show = alcoholism_no_show.unstack()","f523fdc5":"#group by handicap per appointment show up status\nhandcap_no_show = df_clean.groupby([\"handicap\", \"no_show\"])[[\"no_show\"]].count()\n#calculate the percentage appointments of handicap per appointment show up status\nhandcap_no_show.columns = [\"handicap_count\"]\nhandcap_no_show.reset_index(inplace=True)\nhandcap_no_show.columns = [\"Handicap\", \"No Show Status\", \"No Show Count\"]\nhandcap_no_show = pd.DataFrame(handcap_no_show.groupby([\"Handicap\",\"No Show Status\"])[\"No Show Count\"].sum() \/ handcap_no_show.groupby([\"Handicap\"])[\"No Show Count\"].sum() * 100)\nhandcap_no_show = handcap_no_show.unstack()","dd6ad686":"fig, axs = plt.subplots(1,4,figsize=(20,5))\nfig.suptitle('Halth Status VS No Show', fontsize=16)\n#plot hypertenstion per appointment show up status\nhipertension_no_show.plot.bar(ax=axs[0],stacked=True);\naxs[0].set_xticklabels((\"False\", \"True\"),rotation=0)\naxs[0].set_ylim(top=100)\naxs[0].set_title(\"Hipertension VS No Show\")\naxs[0].set_xlabel(\"Hipertension\")\naxs[0].legend([\"Show Up\", \"No Show\"])\n\n#plot diabetes per appointment show up status\ndiabetes_no_show.plot.bar(ax=axs[1], stacked=True)\naxs[1].set_xticklabels((\"False\", \"True\"),rotation=0)\naxs[1].set_ylim(top=100)\naxs[1].set_title(\"Diabetes VS No Show\")\naxs[1].set_xlabel(\"Diabetes\")\naxs[1].legend([\"Show Up\", \"No Show\"])\n\n#plot alcoholism per appointment show up status\nalcoholism_no_show.plot.bar(ax=axs[2],stacked=True);\naxs[2].set_xticklabels((\"False\", \"True\"),rotation=0)\naxs[2].set_ylim(top=100)\naxs[2].set_title(\"Alcoholism VS No Show\")\naxs[2].set_xlabel(\"Alcoholism\")\naxs[2].legend([\"Show Up\", \"No Show\"])\n\n#plot handicaped per appointment show up status\nhandcap_no_show.plot.bar(ax=axs[3], stacked=True)\naxs[3].set_xticklabels((\"False\", \"True\"), rotation=0)\naxs[3].set_ylim(top=100)\naxs[3].set_title(\"Handcap VS No Show\")\naxs[3].set_xlabel(\"Handcap\")\naxs[3].legend([\"Show Up\", \"No Show\"])\n\n","e8ce9a96":"#group by neighbourhood per appointment show up status.\nneighbourhood_all = df_clean.groupby([\"neighbourhood\", \"no_show\"])[[\"no_show\"]].count()\nneighbourhood_all.columns = [\"no_show_count\"]\nneighbourhood_all.reset_index(inplace=True)\n#Calculate percentage appointments per neighborhood per appointment show up status\nneighbourhood_all[\"no_show_rate\"] = pd.DataFrame(neighbourhood_all.groupby([\"neighbourhood\",\"no_show\"])[\"no_show_count\"].sum() \/ neighbourhood_all.groupby([\"neighbourhood\"])[\"no_show_count\"].sum() * 100).reset_index()[[\"no_show_count\"]]\nneighbourhood_all = neighbourhood_all.groupby([\"neighbourhood\",\"no_show\"])[[\"no_show_count\", \"no_show_rate\"]].sum()\nneighbourhood_all = neighbourhood_all.unstack()\n#for neighbours has all patients showed up or all patients not showed to their appointment, substitute by 0\nneighbourhood_all = neighbourhood_all.fillna(0)","66a10bc5":"#plot hypertenstion per appointment show up status\naxs = neighbourhood_all[\"no_show_count\"].sort_values(by=False).plot.bar(stacked=True, figsize=(20,5));\naxs.set_xlabel(\"neighbourhood\")\naxs.legend([\"Show Up\", \"No Show\"])\naxs.set_title(\"Appointment Per All Neigbourhoods\", fontsize=16)\n","7f675097":"#excluding all neigbourhoods which has less than 1000 appointments\nneighbourhood_above_1000_visits = neighbourhood_all[neighbourhood_all[\"no_show_count\"][False] + neighbourhood_all[\"no_show_count\"][True] > 1000]","ab6d56b9":"# plot percentage of appointments per neighbourhood per appointment show up status.\naxs = neighbourhood_above_1000_visits[\"no_show_rate\"].sort_values(by=False).plot.bar(stacked=True, figsize=(20,5));\naxs.set_xlabel(\"neighbourhood\")\naxs.legend([\"Show Up\", \"No Show\"])\naxs.set_title(\"Appointment Per Neigbourhoods (1000+ Appointments)\", fontsize=16)","b6db5ea0":"#group by negibourhoods per scholarships, for only neigbourhoods has more than 1000 appointments. \nneighbourhood_scholarship = df_clean.query(f\"neighbourhood in {neighbourhood_above_1000_visits.index.tolist()}\").groupby([\"neighbourhood\", \"scholarship\"])[[\"scholarship\"]].count()\nneighbourhood_scholarship.columns = [\"scholarship_count\"]\nneighbourhood_scholarship.reset_index(inplace=True)\n#caclualte scholraship rate per neighbourhoods\nneighbourhood_scholarship[\"scholarship_rate\"] = pd.DataFrame(neighbourhood_scholarship.groupby([\"neighbourhood\",\"scholarship\"])[\"scholarship_count\"].sum() \/ neighbourhood_scholarship.groupby([\"neighbourhood\"])[\"scholarship_count\"].sum() * 100).reset_index()[[\"scholarship_count\"]]\nneighbourhood_scholarship = neighbourhood_scholarship.groupby([\"neighbourhood\", \"scholarship\"])[[\"scholarship_rate\"]].sum()\nneighbourhood_scholarship.reset_index(inplace=True)\n#find neigbourhood scholarships distribution\nneighbourhood_scholarship.query(\"scholarship == True\").describe()","2ff2434c":"#function to classify negbourhood by the scholraship rate.\ndef neighbourhood_social_classifier(row):\n    x = row[\"scholarship_rate\"]\n    if(row[\"scholarship\"] == False):\n        x = 100 - x\n    if x >= 0.283725 and x < 8.913911:\n        return \"Class A\"\n    elif x >= 8.913911 and x < 11.761120:\n        return \"Class B\"\n    elif x >= 11.761120 and x < 14.424395:\n        return \"Class C\"\n    else:\n        return \"Class D\"\n    \n#apply classigication of neighbourhoods\nneighbourhood_scholarship[\"neighbourhood_class\"] = neighbourhood_scholarship.apply(neighbourhood_social_classifier,axis=1)\nneighbourhood_scholarship_class = neighbourhood_scholarship.loc[:,[\"neighbourhood\", \"neighbourhood_class\"]]\n#drop dublicate records\nneighbourhood_scholarship_class.drop_duplicates(inplace=True)\n","fb545b6e":"#function to get neigbourhood class\ndef get_neighbourhood_class(value):\n    return neighbourhood_scholarship_class.query(f\"neighbourhood == '{value}'\")[\"neighbourhood_class\"].values[0]\n\nneighbourhood_above_1000_visits_classed = neighbourhood_above_1000_visits.reset_index()\n#Apply classification of neighbourhood\nneighbourhood_above_1000_visits_classed[\"neighbourhood_class\"] = neighbourhood_above_1000_visits_classed[\"neighbourhood\"].apply(get_neighbourhood_class)\n#group by neigbourhood class\nneighbourhood_above_1000_visits_classed.drop(columns=['neighbourhood'], inplace=True, level=0)\nneighbourhood_above_1000_visits_classed = neighbourhood_above_1000_visits_classed.groupby([\"neighbourhood_class\"]).sum().stack()\nneighbourhood_above_1000_visits_classed = neighbourhood_above_1000_visits_classed[[\"no_show_count\"]]\n#caclulate percentage of appointments per neigbourhood class\nneighbourhood_above_1000_visits_classed[\"no_show_rate\"] = pd.DataFrame(neighbourhood_above_1000_visits_classed[\"no_show_count\"] \/ neighbourhood_above_1000_visits_classed.groupby([\"neighbourhood_class\"])[\"no_show_count\"].sum() * 100)[[\"no_show_count\"]].values\nneighbourhood_above_1000_visits_classed = neighbourhood_above_1000_visits_classed.unstack()","f07348d0":"fig, axs = plt.subplots(1,2,figsize=(20,7))\nfig.suptitle('Appointments per Neighbourhood Class', fontsize=16)\n\n#plot neighbourhood class per appointment show up status.\nneighbourhood_above_1000_visits_classed[\"no_show_count\"].plot.bar(ax=axs[0],stacked=True);\naxs[0].set_xlabel(\"Neighbourhood Class\")\naxs[0].legend([\"Show Up\", \"No Show\"])\n# plot percentage of appointments class per neighbourhood per appointment show up status.\nneighbourhood_above_1000_visits_classed[\"no_show_rate\"].plot.bar(ax=axs[1],stacked=True);\naxs[1].set_ylim(top=100)\naxs[1].set_xlabel(\"Neighbourhood Class\")\naxs[1].legend([\"Show Up\", \"No Show\"])","3406df4f":"***Observation 2***: Ages between 19 to 37 has greatest number of appointments, as well it has the lowest rate of not showing up to their appointments. All age groups has a change of not showing up to their appointments within range of 15 to 25%.","45871df5":"In <i>neighbourhood_scholarship_class<\/i>, it contains neighbourhood scholarship dictionary table.","5ae99e0c":"***Observation 8***: Neighbourhoods of class A, has least patients with scholarships, has the most medical appointments. But appointments show-up rate are equals for neighbourhoods classes.","89fbeb41":"Now let us look how SMS reminders to the patients might affect the appointment show up status rate.","82f69243":"### Which genders and age groups, patients are most likely not to show up to their appointments?","84e763a6":"***Observation 1***: Appointments of femalre patients are higher than male patients, BUT, the rate of not showing up to the appointments are closely the same.\n\nNow, let us compare number of appointments per age groups.","d853b8d2":"let us execlude neighbourhoods which has less than 1000 appointments. The reason behind this execluding is that they dont have enough appointments to study their no show rate. As well, those neighbourhoods cannot be classified based on their patients scholarships as we are going to see in the following steps.","9ff9aa3f":"Let us compare Number of Males to Number of Females and then Number of show-up and no-show-up for each gender","8fbbd535":"### Is early scheduling could be a reason for not showing to appointments? How SMS reminder may help?","e8c44022":"### Which neighborhood has the most no-show rate? are neighborhoods with more scholarship patients are most likely not to show?","c6ca002a":"<b>Step 3:<\/b> Extract appointment time and classify it into 4-day parts (Morning, Afternoon, Evening, Night)","20b09a77":"***Notice***: it is only one record of patients that has negative age with patient ID : 465943158731293. Before we drop out this record, let us try to find if the patient has other records we can get his correct age from.","3f351e78":"<b>Step 9:<\/b> Drop unwanted colmuns for data set.","87b31dc2":"<b>Step 5:<\/b> Extract appointment year, month and weekday for appointment day.","792fb12d":"<b>Step 4:<\/b> Calculating how early, by days, the appointment was scheduled","b6dcd490":"***Observation 3***: most of the patients schedule their appointments in the same day, and those patients are most likely to show up in a percentage around 95%. as early as the patient schedule their appointments are most likely not going to show up to their appointments.","4abd648b":"***Notice***: the time of the appointment was not registered. There is no way we could no at which part of the day the appointment took place.","2240afc5":"<b>Step 8:<\/b> Apply column data types corrections.","f2740a74":"***Notice***: now we are having only 5 records of appointments was scheduled after its day. let us drop them.","d2d92e79":"### Is there any correlation between patients positive records in hypertension, diabetes, alcoholism or \/ and handicap and them not showing up to their appointments?","9ee58ace":"Let us compare Number of appointments per groups of early scheduling days ","7d5ca6e0":"### At which day of the week patients are most likely to skip their scheduled appointments?How is that changing over the years and months?","a6f22a60":"***Observation 4***: SMS reminders has small affect on the appointments was scheduled before 5+ days in an amount of 10%.","eab8c0cf":"***Observation 7***: all neigbourshood has no-show up appointments are around the 20%.\n\nLet us find out the affect of the scholarships on the neighbourhoods. to do this, i am going to classify the neighbourhoods into social classes based on the rate of the patients has medical scholarships.","9a1d1b22":"***Notice***: most of the invalid records states that appointment was schedule 1 day after. and only 5 records was scheduled for 2 and 7 days after. let us look closer into 1-day invalid schedule dates. ","a2903e76":"<b>Step 2:<\/b> Convert scheduled day and appointment day data types from string to datetime","1d658709":"<b> Step 6:<\/b> Clean and classify age into age groups\n\nlet us first query patients with negative age records.","2d998337":"<a id='wrangling'><\/a>\n## Data Wrangling\n\n### General Properties","d92de7ee":"Let us compare Number of appointments per weekdays","6103b3d4":"#### From above, we learn the following:\n<ul>\n    <li>No-Show appointment rate represented 20% of the data included in the study, and the considered to be reasonable reflection of reality. <\/li>\n    <li>Data does not have any null values or duplicates. <\/li>\n    <li>Age includes some wrong data. some records have '-1' value. <\/li>\n    <li>Handicap has 199 records which has invalid values of (2,3,4), and that does not match column type as Boolean. <\/li>\n<\/ul>\n\n#### Data requires the below cleaning, transformation and conversions, to help us answering our goal questions:\n<ol>\n    <li>Fix column names spelling mistakes and apply lowercase letter and underscore word separation.<\/li>\n    <li>Convert scheduled day and appointment day data types from string to datetime.<\/li>\n    <li>Extract appointment time and classify it into 4-day parts (Morning, Afternoon, Evening, Night).<\/li>\n    <li>Calculating how early, by days, the appointment was scheduled.<\/li>\n    <li>Extract appointment year, month and weekday for appointment day.<\/li>\n    <li>Clean and classify age into age groups.<\/li>\n    <li>Correction of handicap invalid values.<\/li>\n    <li>Apply column data types corrections.<\/li>\n    <li>Drop unwanted colmuns for data set.<\/li>\n    <li>Order columns and store data set into new CSV.<\/li>\n<\/ol>\n","44b48c06":"the patient has only 1 recod, let us drop it.","4c89424d":"### Data Cleaning, Transformation and conversions.\n\n<b> Step 1:<\/b> Fix column names spelling mistakes and apply lowercase letter and underscore word separation","ba91c9ef":"***Notice***: alot of patients takes their appointments in the same day.\n\nfor now let us drop schedule day column","2bfb76b6":"***Notice***: `25%+` of the records the schedule date happened after the appointment. that is a huge number to ignore as it will affect the dataset validity, let us look closer to the problem.","071deb85":"As the appointment time was not recorded, this question will be skipped. ","bba21693":"<a id='eda'><\/a>\n## Exploratory Data Analysis\n\n","b328af45":"Let us drop appointment day column","e9a6f29e":"***Notice*** : all the appointments occurred between `2016-04-29` and `2016-06-08`. Hence, the data we are having is only for 2016 and for April, May and June of that year.","dacf3261":"<a id='conclusions'><\/a>\n## Conclusions\n\nFrom the observations above, I can state the main cause of patients not showing up to their appointments is early scheduling. In observation 3, it shows that as early as the scheduling happened, the patients are most likely not going to show up to their appointment. That is reasonable cause for many reasons. The patients might forget, or gets busy with other things on the date of the appointment. Also, from observation 4, it shows how sms reminder make a small changes on the no-show rate.\n\nAppointment time was not registered in the data, and that could be a very useful infomration to know which part of the day the patients are most likely to skip their appointments. As well, I wanted to have longer interval of time than 3 months. Longer period of time will give us an indication on how seasons and holidays may affect the appointment show-up status.","3635f694":"From the age distribution above, let us classify age into 4 age groups:\n<ul>\n    <li>[0-18) => Kids<\/li>\n<li>[18-37) => Adults<\/li>\n<li>[37-55) => Matures<\/li>\n<li>[55-115) => Elders<\/li>\n    <\/ul>","45e2fbb2":"### At which part of the day patients are most likely to skip their scheduled appointments? Morning, Afternoon, Evening or Night?","e9c7ad87":"***Observation 5***: Patients scheudle their appointments to be on the weekdays not in the weekends. And all of the weekdays has almost equal rate of patients no-show to their appointments. \n\nWe are unable to study the changing of no-show rate over the months and the years, as the data is only representing short interval of time. ","cfcbebd7":"# Project: Investigate a Dataset (No-Show Appointments)\n\n<div class=\"alert alert-warning\" role=\"alert\">\n  **NOTE:** if you are facing any issues in rendering the complete kernel, Please change the browser, change browser zoom, or clear cache.\n<\/div>\n\n\n## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n<li><a href=\"#eda\">Exploratory Data Analysis<\/a><\/li>\n<li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n<\/ul>","cd6a5a8e":"<b>Step 10<\/b> Order columns and store data set into new CSV.","381355ee":"As handicap describes is the patient is handicapped or not, then i am going to consider any value 1 or above states the patient is handicapped, and 0 state the patient is not.","cffb5f6b":"let us compare each health feature with rate of appointment show up status.","adb1588e":"***Notice***: It is not confirmed that the appointments took place in 2016 only and in April, May and June. I dont think this extraction for those features will be helpful to us. let us concentrate on the weekday.","5f7bfede":"let us compare number of appointments per neighborhoods.","70ea16fa":"<a id='intro'><\/a>\n## Introduction\n\nOver 110 thousand of medical appointments took place in brazil, some patients did not show up for their appointments. the dataset contains 14 features including the present of the patient or not on his appointment date. The features can be classified into 4 groups, patient information (id, gender, age), appointment information (appointment id, appointment date, scheduled date, no show, sms received), health information (hypertension, diabetes, alcoholism, handicap) and social information (Neighborhood, Scholarship). by investigating the dataset, I am trying to answer the following questions:\n\n<ul>\n    <li><b>Which genders and age groups, patients are most likely not to show up to their appointments?<\/b><\/li>\n    <li><b>Is early scheduling could be a reason for not showing to appointments? How SMS reminder may help?<\/b><\/li>\n    <li><b>At which part of the day patients are most likely to skip their scheduled appointments? Morning, Afternoon, Evening or Night?<\/b><\/li>\n    <li><b>At which day of the week patients are most likely to skip their scheduled appointments?How is that changing over the years and months?<\/b><\/li>\n    <li><b>Is there any correlation between patients positive records in hypertension, diabetes, alcoholism or \/ and handicap and them not showing up to their appointments?<\/b><\/li>\n    <li><b>Which neighborhood has the most no-show rate? are neighborhoods with more scholarship patients are most likely not to show?<\/b><\/li>\n<\/ul>","bf09a9d5":"***Observation 6***: from above, all health statuses show no affect on the patient not showing to their appointments or not.","ef221634":"<b>Step 7:<\/b> Correction of handicap invalid values. ","adfaec6d":"let us group our schedule days into 4 groups based on the description of the data above:\n<ul>\n    <li>0 Days<\/li>\n    <li>1 to 4 Days<\/li>\n    <li>5 to 15 Days<\/li>\n    <li>Above 16 Days<\/li>\n<\/ul>","9c062177":"***Notice***: as expected, the issue of time was not registered in the appointment made the conflict. its clearly that those appointment was scheduled in the same day.\n\nlet us fix our calculation by taking the difference of the date only without time."}}