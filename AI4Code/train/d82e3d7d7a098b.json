{"cell_type":{"8381e15f":"code","11382be1":"code","6861fc3b":"code","7b4fb5fc":"code","9d425de0":"code","e1494307":"code","774d74ff":"code","8d52ca6a":"code","498e5ad5":"code","0545a48c":"code","a94731f2":"code","081240f3":"code","d051bc4a":"code","25c769b4":"code","b60a5a6e":"code","10fce854":"code","86d0df02":"code","41000e01":"code","0c390c71":"code","9626bfa1":"code","871ddab8":"code","d9e321c1":"code","c9563b96":"code","01437116":"code","e71efcfe":"code","0ec71b01":"code","317638bb":"code","9130d3d3":"code","c21ae167":"code","22f82724":"code","e6955c30":"code","f1467323":"code","e6d1f745":"code","0e29c4f2":"markdown","58723ae1":"markdown","1c09bd34":"markdown","0c29de18":"markdown","c7a1fd6d":"markdown","5f757748":"markdown","c886bdd7":"markdown","a844f7c7":"markdown","1ccc94dc":"markdown","9e8b369b":"markdown","87461a98":"markdown"},"source":{"8381e15f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","11382be1":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")","6861fc3b":"%%HTML\n<style type=\"text\/css\">\ntable.dataframe td, table.dataframe th {\n    border: 1px  black solid !important;\n  color: black !important;\n}\n<\/style>","7b4fb5fc":"#Reading the data\ndat = pd.read_csv('\/kaggle\/input\/tmdb-top-10000-popular-movies-dataset\/TMDb_updated.CSV')","9d425de0":"#Glimpse of the dataset\ndat.head(10)","e1494307":"dat.drop('Unnamed: 0',axis=1,inplace=True)","774d74ff":"dat.head()","8d52ca6a":"#Checking the columns and info of the data\ncol = dat.columns\nprint(\"The columns are\",col)\ninf = dat.info()\ndesc = dat.describe()\ninf, desc","498e5ad5":"#CHECKING FOR NULL VALUES\ndat.isnull().sum()","0545a48c":"#Replacing with an empty string\ndat['overview'] = dat.overview.replace(np.NaN,'')","a94731f2":"dat.isnull().sum()","081240f3":"from matplotlib import rcParams\n\n# figure size in inches\n#plt.figure(figsize=(8,4)) # this creates a figure 8 inch wide, 4 inch high\n\nrcParams['figure.figsize'] = 11.7,11.27","d051bc4a":"#Analysing which language has the most number of movies, according to the dataset\nsns.countplot(y='original_language',data=dat, order = dat['original_language'].value_counts().index)","25c769b4":"#Distplot on average voting\nsns.distplot(dat['vote_average'],kde=False)","b60a5a6e":"#Plotting a graph for the top 10 movies which has the most number of votes\nsns.barplot(y=dat[dat.vote_count > 100].sort_values(by='vote_count',ascending=False)['title'].head(10),x='vote_count',data=dat)","10fce854":"#Moving on to the Machine learning part.\n#Calculating the weighted average.\n# Calculate mean of vote average column\nC = dat['vote_average'].mean()\nprint(C)","86d0df02":"# Calculate the minimum number of votes required to be in the chart, m\n#We take 80th percentile\nm = dat['vote_count'].quantile(0.80)\nprint(m)","41000e01":"#Making a new DF so we dont make any changes to the existing one\nnew_movies = dat.copy().loc[dat['vote_count'] >= m]\nnew_movies.shape","0c390c71":"new_movies.head()","9626bfa1":"def rating(x, m=m, C=C):\n    v = x['vote_count']\n    R = x['vote_average']\n    # Calculation based on the IMDB formula\n    return (v\/(v+m) * R) + (m\/(m+v) * C)","871ddab8":"#applying this to our new dataset:\nnew_movies['w_rating'] = new_movies.apply(rating, axis=1)","d9e321c1":"#Sorting the new dataframe according the highest rating\nnew_movies = new_movies.sort_values('w_rating',ascending=False)\nnew_movies.head(10)","c9563b96":"#Making a content based recommender through a tutorial: by making use of the overview .\n","01437116":"overv = dat['overview'].head(10)\noverv","e71efcfe":"from sklearn.feature_extraction.text import TfidfVectorizer\n#Define a TF-IDF Vectorizer Object. Remove all english stop words such as 'the', 'a'\ntfidf = TfidfVectorizer(stop_words='english')\n#Construct the required TF-IDF matrix by fitting and transforming the data\ntfidf_matrix = tfidf.fit_transform(dat['overview'])","0ec71b01":"tfidf_matrix.shape\n","317638bb":"tfidf.get_feature_names()[5000:5010]","9130d3d3":"from sklearn.metrics.pairwise import linear_kernel\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\ncosine_sim.shape\n","c21ae167":"cosine_sim[1]","22f82724":"#define a function that takes in a movie title as an input and outputs a list of the 10 most similar movies\nindices = pd.Series(dat.index, index=dat['title']).drop_duplicates()\nindices[:10]","e6955c30":"#Function for getting similar movies to the given input movie.\ndef get_recommendations(title, cosine_sim=cosine_sim):\n    # Get the index of the movie that matches the title\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return dat['title'].iloc[movie_indices]","f1467323":"rec_movies = pd.DataFrame(get_recommendations('Bad Boys'))\nrec_movies","e6d1f745":"rec_movies = pd.DataFrame(get_recommendations('Fight Club'))\nrec_movies","0e29c4f2":"* There are few missing values in the overview column, since we can't be searching and replacing each and everything, we will replace it with an empty string.\n","58723ae1":"* So, the average voting is somewhere between 4 and 8.","1c09bd34":"* All  IMDB users can cast vote for any movie.\n* They don't use mean or average for the average rating. Instead, they use the weighted average rating.\n> WeightedRating(WR)=(vv+m\u22c5R)+(mv+m\u22c5C)![wag.PNG](attachment:wag.PNG)\n","0c29de18":"# BUILDING A SIMPLE RECOMMENDER SYSTEM \nIf you go for a simple collaborative filtering recommender system, it can be as simple as keeping a user-user similarity matrix and recommending items which the user hasn't seen but has been liked by other users very similar to your current user.\n\n![image.png](attachment:image.png)","c7a1fd6d":"* Perfect, no Null\/Missing value","5f757748":"# EXPLORATORY DATA ANALYSIS","c886bdd7":"* We select movies with atleast 1219 votes.","a844f7c7":"* Movies similar to Bad Boys","1ccc94dc":"*Looks like the most number of movies is in English, followed by French  ","9e8b369b":"**** calculate the weighted rating for each qualified movie.****","87461a98":"* List of movies similar to Fight Club"}}