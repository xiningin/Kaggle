{"cell_type":{"409860a1":"code","20368f71":"code","8474c835":"code","562febd7":"code","e140bc4a":"code","8d30e784":"code","eca90d12":"code","233431c1":"code","fa41a4ac":"code","af6b0ccf":"code","7e472c73":"code","1af2ecb4":"code","8780421e":"code","50f92b68":"code","8883ab09":"markdown","32080062":"markdown","2ef472be":"markdown","c2e4260b":"markdown","369d77bf":"markdown","91960099":"markdown","bef6a951":"markdown","7fb79fb0":"markdown","76cc86fc":"markdown","155231a8":"markdown","5c834a31":"markdown","51673c93":"markdown","229b6d20":"markdown","387db311":"markdown","1d94d325":"markdown"},"source":{"409860a1":"#imports\nimport os, pickle\nimport numpy as np\nimport pandas as pd\nimport sklearn\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\nfrom matplotlib import pyplot as plt","20368f71":"data_path = '..\/input\/url-dataset-for-phishing\/urlset (1).csv'\n\nheaders = [*pd.read_csv(data_path, nrows=1)]\n\ndata = pd.read_csv(data_path, engine='c', usecols=list(set(headers)-{'Unnamed: 0'}))\n\ndata.head(10)","8474c835":"data.describe()","562febd7":"data.isna().sum()","e140bc4a":"data = data.fillna(method='ffill').fillna(method='bfill')\n\ndata.isna().sum()","8d30e784":"data['domain_length'] = [len(i) for i in data['domain']]\n\ndata.columns","eca90d12":"fig, axs = plt.subplots(5, 2, figsize = (16, 26))\n\nfor idx, col in enumerate(data.columns):\n    if col=='label' or col=='domain':\n        continue\n    axs[int(idx\/2), (idx+1)%2].set_title(f'{col} vs label')\n    axs[int(idx\/2), (idx+1)%2].set_ylabel(col)\n    axs[int(idx\/2), (idx+1)%2].set_xlabel('label')\n    axs[int(idx\/2), (idx+1)%2].scatter(data['label'], data[col])","233431c1":"unwanted_cols = ['domain', 'label']\n\nfeature_columns = [i for i in data.columns if i not in unwanted_cols]\n\ntarget_column = 'label'\n\ndata[target_column] = data[target_column]\n\nfeatures, targets = data[feature_columns], data[target_column]\n\nfeatures.columns","fa41a4ac":"class Scaler():\n    \n    def __init__(self, scaler, feature_range=None):\n        self.columns = None\n        self.index = None\n        self.feature_range = feature_range\n        self.scaler = scaler()\n        if (isinstance(self.scaler, sklearn.preprocessing._data.MinMaxScaler)\n            and isinstance(self.feature_range, tuple)):\n            self.scaler = scaler(feature_range = self.feature_range)\n        \n    def fit(self, X):\n        self.scaler = self.scaler.fit(X)\n        return self\n                \n    def transform(self, X):\n        scaled_X = self.scaler.transform(X)\n        \n        if isinstance(X, pd.core.frame.DataFrame):\n            self.columns = X.columns\n            self.index = X.index\n            scaled_X = pd.DataFrame(scaled_X, index=self.index, columns=self.columns)\n        return scaled_X\n    \n    def inverse_transform(self, X):\n        inversed_X = self.scaler.inverse_transform(X)\n        \n        if isinstance(X, pd.core.frame.DataFrame):\n            self.columns = X.columns\n            self.index = X.index\n            inversed_X = pd.DataFrame(inversed_X, index=self.index, columns=self.columns)\n        return inversed_X        ","af6b0ccf":"#split data\n\ntrain_size = 0.85\nX_train, X_test, y_train, y_test = train_test_split(\n    features, targets, shuffle=True, train_size=train_size,\n    random_state=42)\n\nX_train","7e472c73":"#scale training data\n\nscaler = Scaler(StandardScaler)\nscaler = scaler.fit(X_train)\nX_train = scaler.transform(X_train)\n\nX_train","1af2ecb4":"#training\nnaive_bayes = GaussianNB()\nnaive_bayes = naive_bayes.fit(X_train, y_train)\npred = naive_bayes.predict(X_train)\n\nprint('confusion matrix plot for training data:')\ncm = confusion_matrix(y_train, pred)\ndisplay_cm = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=naive_bayes.classes_)\ndisplay_cm.plot()\nplt.show()\n\nprint(f'\\n\\ntraining accuracy of model: {round(accuracy_score(y_train, pred)*100, 4)}%')","8780421e":"#testing\nX_test = scaler.transform(X_test)\npred = naive_bayes.predict(X_test)\n\ncm = confusion_matrix(y_test, pred)\ndisplay_cm = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=naive_bayes.classes_)\ndisplay_cm.plot()\nplt.show()\n\nprint(f'testing accuracy of model: {round(accuracy_score(y_test, pred)*100, 4)}%')","50f92b68":"working_dir = '.\/Models'\n\nif not os.path.isdir(working_dir):\n    os.mkdir(working_dir)\n\npickle.dump(scaler, open(os.path.join(working_dir, 'scaler_model.sav'), 'wb'))\npickle.dump(naive_bayes, open(os.path.join(working_dir, 'GNB_model.sav'), 'wb'))\n\nprint('models saved successfully.')","8883ab09":"After training, it is obvserbed that the training accuracy is within the range of 70% to 80%\n\nSimilarly, the details of the testing phase is visualized and printed.","32080062":"NA values in the dataset correspond to missing data and their are quite a few in each column besides the 'domain' column as seen in the ouput of the previous cell\n\nHere, the missing  values are replaced with the closest previous or next value in the dataset","2ef472be":"The density of each feature per class is being visualized in a 'feature vs label' plot.","c2e4260b":"<h3>Data Preperation and Processing<\/h3>","369d77bf":"The scaler class is responsible for scaling the dataset to a set of range of distribution.\n\nThe 'fit' method fits on the data to compute scaling attributes and returns an instance of the class.<br>\nThe 'transform' method transforms the data into a normalized version based on what was fitted.<br>\nThe 'inverse' transform returns the data back to it's orginal form, it is an inverse of the transform method.<br>\n\nThe scaler algorithm being used explained later on.","91960099":"<h3>Training and Evaluation<\/h3>","bef6a951":"<h5>Checking for missing values<\/h5>","7fb79fb0":"The data is seperated into features and targets('label' column).","76cc86fc":"<h1>Phishing Site Detection With Naive Bayes Classifyer<\/h1>\n\nIn this project a Gaussian Naive Bayes classfiyer is used to model a dataset containing numerical features of a URL.","155231a8":"<h3>Data Loading, Cleaning and Visualizing<\/h3>","5c834a31":"The data is scaled with a standard scaler algorithm provided by the sklearn API\n\nIt normalizes the data by subtracting each point in a column by the mean and dividing by the variance of that column.","51673c93":"<h3>Saving The Model<\/h3>\n\nThe data scaler model and the naive bayes model are serialized into a pickle file and saved for future use.","229b6d20":"An instance of the Gaussian Naive Bayes classifyer is used to model the dataset.<br>\nThis variant of Naive Bayes classifyer was chosen at it models continuous numerical data as opposed to other variants that model on categorical features<br>\n\nAfter training, a confusion matrix is plotted to visualized the performance of the model and the training accuracy is printed out","387db311":"An extra numerical column corresponding to length of the domain names is added to the dataframe holding the loaded data.","1d94d325":"The data is futher split into training and testing set for model training and evaluation with unseen data respectively."}}