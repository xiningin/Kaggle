{"cell_type":{"270ed19f":"code","98e0ca6b":"code","9a1a21cc":"code","c147b237":"code","bb67f4e7":"code","8ddcd08a":"code","0bf256d6":"code","fa0638b4":"code","f9d1bb75":"code","b63c7167":"code","06c7b31e":"code","f6a5a835":"code","136c0ce1":"code","c33a6abe":"code","8a36cabe":"code","8af482e5":"code","e9470ac2":"code","ee0d731c":"code","ef1a779f":"code","6e0cab9a":"code","60a1ecd4":"code","49c218f2":"code","cb8b2a20":"code","c637db64":"code","3eac524d":"code","2a24586d":"code","6dfd5eb7":"code","f11f95f6":"code","b0953ca1":"code","ec7d5f7e":"code","3dc0ce8f":"code","247b95ab":"code","9d08b65e":"code","20d4833d":"code","263a9000":"code","f0a4f3f2":"code","569bafa5":"markdown"},"source":{"270ed19f":"import pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import OrdinalEncoder","98e0ca6b":"Dados = pd.read_csv (r'..\/input\/creditcardfraud\/creditcard.csv', delimiter=',', encoding = \"ISO-8859-1\")   \nDados","9a1a21cc":"round(100 * (Dados.isnull().sum()\/len(Dados)),2)","c147b237":"Dados.describe()","bb67f4e7":"Dados['Class'].sum()","8ddcd08a":"fig, axes = plt.subplots(8, 4, figsize=(20, 40))\ni = 0\nj = 0\nfor vars in Dados.columns :\n    sns.histplot(data = Dados, x = vars, bins = 20, ax = axes[i,j])\n    j = j + 1\n    if j == 4 :\n        i = i + 1\n        j = 0","0bf256d6":"# Dataset has too many oultliers","fa0638b4":"Dados.columns","f9d1bb75":"# Removing Outliers\nDados2 = Dados[(np.abs(stats.zscore(Dados.iloc[:,1:29])) < 3).all(axis=1)]\nDados2","b63c7167":"# Plotting Histograms without Outliers\nfig, axes = plt.subplots(8, 4, figsize=(20, 40))\ni = 0\nj = 0\nfor vars in Dados2.columns :\n    sns.histplot(data = Dados2, x = vars, bins = 20, ax = axes[i,j])\n    j = j + 1\n    if j == 4 :\n        i = i + 1\n        j = 0","06c7b31e":"Dados2['Class'].sum()","f6a5a835":"# Correlation Matrix\nplt.figure(figsize=(18, 8))\nsns.heatmap(Dados.corr(), vmin=-1, vmax=1, annot=True, cmap='vlag') # cmap='BrBG'\nplt.title('Correlation Map', fontdict={'fontsize':12}, pad=12);\n","136c0ce1":"sns.pairplot(data = Dados, vars = ['V2','V5','V6','V7','V14','V17','V20','V23','V25','Amount'])","c33a6abe":"sns.jointplot(data=Dados, x='Amount', y='V20', hue = 'Class')","8a36cabe":"sns.jointplot(data=Dados, x='Amount', y='V2', hue = 'Class')","8af482e5":"sns.jointplot(data=Dados, x='V7', y='V2', hue = 'Class')","e9470ac2":"# Balancing Dataset\nDados3Y = Dados[Dados['Class'] == 1]\nDados3X = Dados[Dados['Class'] == 0].sample(n=len(Dados3Y), random_state=1)","ee0d731c":"print(len(Dados3Y))\nprint(len(Dados3X))","ef1a779f":"Dados3 = pd.concat([Dados3X,Dados3Y])\nDados3","6e0cab9a":"Dados3.describe()","60a1ecd4":"DadosX = Dados3.iloc[:,1:30]\nDadosY = Dados3.iloc[:,30]","49c218f2":"DadosX","cb8b2a20":"DadosY","c637db64":"# Splitting data\n\nX_train, X_test, Y_train, Y_test = train_test_split(DadosX, DadosY,random_state=101, test_size=0.3)","3eac524d":"# Multi MLP Generator\ntraining_accuracy = []\ntesting_accuracy = []\nLayer1 = range(10,90,20)\nLayer2 = range(10,90,20)\nLayersComb = len(Layer1)*len(Layer2)\nStep=0\nscore=0\n\nfor i in Layer1 :\n  for j in Layer2 :\n    mlp = MLPRegressor(hidden_layer_sizes=(i,j),activation=\"logistic\" ,random_state=1, max_iter=2000).fit(X_train, Y_train)\n    Y_pred_train = mlp.predict(X_train).round()\n    training_accuracy.append(accuracy_score(Y_train, Y_pred_train))\n    Y_pred_test = mlp.predict(X_test).round()\n    acc_score = accuracy_score(Y_test,Y_pred_test)\n    testing_accuracy.append(acc_score)\n    Step = Step + 1\n    if score < acc_score:\n        score = acc_score\n        best_Layer1 = i\n        best_Layer2 = j\n        best_Step = Step\n    \n    print('Step ', Step, ' of ', LayersComb, ' Layer1: ', i, ' Layer2: ', j, ' Accuracy', acc_score.round(4))    \n    print('Best Accuracy Score', score.round(4), ' Best Layer1: ', best_Layer1, ' Best Layer2: ', best_Layer2, ' do Step:', best_Step)","2a24586d":"# 2 Layers\nsns.lineplot(data=[training_accuracy,testing_accuracy])","6dfd5eb7":"# Selected Model - 2 Layers\nmlp_selected = MLPRegressor(hidden_layer_sizes=(30,70),activation=\"logistic\" ,random_state=1, max_iter=2000)\nmlp_selected.fit(X_train, Y_train)","f11f95f6":"Y_pred_train = mlp_selected.predict(X_train).round()\ntraining_accuracy.append(accuracy_score(Y_train, Y_pred_train))\nY_pred_test = mlp_selected.predict(X_test).round()\nacc_score = accuracy_score(Y_test,Y_pred_test)\ntesting_accuracy.append(acc_score)","b0953ca1":"# Confusion Matrix for Selected Model - 2 Layers\ncm=confusion_matrix(Y_test,Y_pred_test)\nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\nplt.figure(figsize = (8,5))\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\");","ec7d5f7e":"# 2 Layers\nprint(classification_report(Y_test,Y_pred_test))","3dc0ce8f":"# Multi MLP Generator - 3 Hidden Layers\ntraining_accuracy = []\ntesting_accuracy = []\nLayer1 = range(10,90,20)\nLayer2 = range(10,90,20)\nLayer3 = range(10,50,10)\nLayersComb = len(Layer1)*len(Layer2)*len(Layer3)\nStep=0\nscore=0\n\nfor i in Layer1 :\n  for j in Layer2 :\n    for k in Layer3 :\n        mlp = MLPRegressor(hidden_layer_sizes=(i,j,k),activation=\"logistic\" ,random_state=1, max_iter=2000).fit(X_train, Y_train)\n        Y_pred_train = mlp.predict(X_train).round()\n        training_accuracy.append(accuracy_score(Y_train, Y_pred_train))\n        Y_pred_test = mlp.predict(X_test).round()\n        acc_score = accuracy_score(Y_test,Y_pred_test)\n        testing_accuracy.append(acc_score)\n        Step = Step + 1\n        if score < acc_score :\n            score = acc_score\n            best_Layer1 = i\n            best_Layer2 = j\n            best_Layer3 = k\n            best_Step = Step\n    \n        print('Step ', Step, ' of ', LayersComb, ' Layer1: ', i, ' Layer2: ', j, ' Layer3: ', k, ' Accuracy', acc_score.round(4))    \n        print('Best Accuracy Score', score.round(4), ' Best Layer1: ', best_Layer1, ' Best Layer2: ', best_Layer2, ' Best Layer3: ', best_Layer3, ' of Step:', best_Step)","247b95ab":"# 3 Layers\nplt.figure(figsize=(20,10))\nsns.lineplot(data=[training_accuracy,testing_accuracy])","9d08b65e":"# Selected Model - 3 Hidden Layers\nmlp_selected = MLPRegressor(hidden_layer_sizes=(50,70,20),activation=\"logistic\" ,random_state=1, max_iter=2000)\nmlp_selected.fit(X_train, Y_train)","20d4833d":"Y_pred_train = mlp_selected.predict(X_train).round()\ntraining_accuracy.append(accuracy_score(Y_train, Y_pred_train))\nY_pred_test = mlp_selected.predict(X_test).round()\nacc_score = accuracy_score(Y_test,Y_pred_test)\ntesting_accuracy.append(acc_score)","263a9000":"# Confusion Matrix for Selected Model - 3 Layers\ncm=confusion_matrix(Y_test,Y_pred_test)\nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\nplt.figure(figsize = (8,5))\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\");","f0a4f3f2":"# 3 Layers\nprint(classification_report(Y_test,Y_pred_test))","569bafa5":"# Credit Card Fraud Detection Neural Network - Multilayer Perceptron"}}