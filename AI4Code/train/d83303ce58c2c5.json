{"cell_type":{"000211e6":"code","118feb88":"code","0deab226":"code","7310e6b8":"code","71b81194":"code","9fccc79d":"code","5237077d":"code","9444b1b6":"code","385c8169":"code","88ac9798":"code","b9847a9c":"code","284a8b49":"code","6440f176":"code","f09554ec":"code","8784d263":"code","0230a2aa":"code","656a9e91":"code","d9413c14":"code","24ca7af2":"code","20f84779":"code","5c24cdb4":"code","c05f8855":"code","6f115e81":"code","ad24d8ff":"code","422f3425":"code","73c462d8":"code","eb28fce6":"code","07e3ba9e":"code","75c3e113":"code","f2ce8fe5":"code","ee4a4039":"code","901fefe9":"code","020df576":"code","538fa80e":"code","32d3dd56":"code","162c6d73":"code","592f1a91":"code","3a257afd":"code","688ffdc9":"code","0462b2da":"code","948c41d1":"code","8ee78eb0":"code","45efa318":"code","cb6a1819":"code","f86c7935":"code","044738bd":"code","0e214125":"code","330d060e":"code","3de3c4b2":"code","a33d9f31":"code","f1587d39":"code","fb95dc94":"code","959681a8":"code","799c3da9":"code","ad5c1f72":"code","b2e651f1":"code","98050092":"code","673c6a3b":"code","87b29042":"code","9880a2a1":"code","e5a7c4ea":"code","b8137024":"code","4580842a":"code","5f2edec5":"code","ed748a19":"code","114a043c":"code","ac60175e":"code","75e28c21":"code","7d5fc3ce":"code","05f59520":"code","b2de2737":"markdown","1a76eb3c":"markdown","dfacd5ab":"markdown","300f560a":"markdown","3b922d6b":"markdown","d51520ef":"markdown","16d81cc2":"markdown","bb503ae1":"markdown","d52ae003":"markdown","a560b4e5":"markdown","05c7a9d8":"markdown","3d7d8ffd":"markdown","505b2f9c":"markdown","a3904ce5":"markdown","c0f6d073":"markdown","617e8f47":"markdown","88126dd7":"markdown","21261044":"markdown","b7da407d":"markdown","7b7ac6d0":"markdown","32b06679":"markdown","c5aab71b":"markdown","64663d4d":"markdown","11cacbe9":"markdown","889e27de":"markdown","05d7665f":"markdown","93554a0d":"markdown","fa985617":"markdown"},"source":{"000211e6":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np","118feb88":"df = pd.read_csv(r'..\/input\/loan-data-train\/loan_data_train.csv')\ndf.head()","0deab226":"df.describe()","7310e6b8":"print(\"Size of data: \", df.size)\nprint(\"Shape of data: \", df.shape)\nprint(\"There are {} rows and {} columns\".format(df.shape[0],df.shape[1]))","71b81194":"df.dtypes","9fccc79d":"df.info()","5237077d":"df.dtypes","9444b1b6":"df.head()","385c8169":"df['Amount.Requested'] = pd.to_numeric(df['Amount.Requested'],errors='coerce')\ndf['Amount.Funded.By.Investors'] = pd.to_numeric(df['Amount.Funded.By.Investors'],errors='coerce')","88ac9798":"df['Interest.Rate'] = df['Interest.Rate'].str.rstrip('%').astype('float') \/ 100.0","b9847a9c":"df['Loan.Length'] = df['Loan.Length'].str.rstrip(' months')\ndf['Loan.Length'] = pd.to_numeric(df['Loan.Length'],errors='coerce')","284a8b49":"df['Open.CREDIT.Lines'] = pd.to_numeric(df['Open.CREDIT.Lines'],errors='coerce')\ndf['Revolving.CREDIT.Balance'] = pd.to_numeric(df['Revolving.CREDIT.Balance'],errors='coerce')\ndf['Inquiries.in.the.Last.6.Months'] = pd.to_numeric(df['Inquiries.in.the.Last.6.Months'],errors='coerce')","6440f176":"df['Debt.To.Income.Ratio'] = df['Debt.To.Income.Ratio'].astype('str')\ndf['Debt.To.Income.Ratio'] = df['Debt.To.Income.Ratio'].str.rstrip('%').astype('float')\/100","f09554ec":"df['Employment.Length'] = df['Employment.Length'].str.rstrip(' years')\ndf['Employment.Length'] = df['Employment.Length'].str.rstrip(' year')\ndf['Employment.Length'] = df['Employment.Length'].str.extract(r'(\\d+)', expand=False)\ndf['Employment.Length'] = pd.to_numeric(df['Employment.Length'],errors='coerce')","8784d263":"df.isnull().sum()","0230a2aa":"df.head(5)","656a9e91":"df.shape","d9413c14":"df.dtypes","24ca7af2":"df.columns","20f84779":"#Numerical variables\n\nnumericals = [var for var in df.columns if df[var].dtype!='O']\nprint(\"The numerical variables are {}\".format(numericals))\nprint(\"There are {} numerical variables\".format(len(numericals)))","5c24cdb4":"categoricals=[var for var in df.columns if df[var].dtype=='O']\nprint(\"The categorical variables are {}\".format(categoricals))\nprint(\"There are {} categorical variables\".format(len(categoricals)))","c05f8855":"df.isna().sum()","6f115e81":"df['Monthly.Income'].median()","ad24d8ff":"df.median()","422f3425":"df['Monthly.Income']=df['Monthly.Income'].fillna(df['Monthly.Income'].median())\ndf['Monthly.Income'].head()","73c462d8":"for var in numericals:\n    df[var] = df[var].fillna(df[var].median())","eb28fce6":"df.isna().sum()","07e3ba9e":"df.shape","75c3e113":"import matplotlib.pyplot as plt\n\nplt.hist(df['Revolving.CREDIT.Balance'])\nplt.show()","f2ce8fe5":"import matplotlib.pyplot as plt\ndf_foat_cols=df[['ID', 'Amount.Requested', 'Amount.Funded.By.Investors', 'Interest.Rate',\n       'Loan.Length', 'Debt.To.Income.Ratio', 'Monthly.Income', 'Open.CREDIT.Lines',\n       'Revolving.CREDIT.Balance', 'Inquiries.in.the.Last.6.Months']]\nfor i,col in enumerate(df_foat_cols.columns):\n    plt.figure(i)\n    plt.hist(df_foat_cols[col])\n    plt.title(col)","ee4a4039":"import matplotlib.pyplot as plt\nplt.figure(figsize=(15,5))\nplt.scatter(df['Revolving.CREDIT.Balance'],df['Monthly.Income'])\nplt.xlabel(\"Revolving.CREDIT.Balance\")\nplt.ylabel(\"Monthly.Income\")\nplt.title('Revolving.CREDIT.Balance')\nplt.show()","901fefe9":"correlation_matrix = df.corr()\ncorrelation_matrix","020df576":"import seaborn as sns\nplt.figure(figsize=(15,15))\nsns.heatmap(correlation_matrix, annot=True, cmap=plt.cm.Reds)\nplt.show()","538fa80e":"df['Debt.To.Income.Ratio'].describe()","32d3dd56":"pd.qcut(df['Debt.To.Income.Ratio'], q=10)","162c6d73":"pd.qcut(df['Debt.To.Income.Ratio'], q=10).value_counts()","592f1a91":"df['quantile_10'] = pd.qcut(df['Debt.To.Income.Ratio'], q=10, precision=0)","3a257afd":"\nbin_labels_5 = ['Bin 1', 'Bin 2', 'Bin 3', 'Bin 4', 'Bin 5', 'Bin 6','Bin 7','Bin 8','Bin 9','Bin 10']\ndf['quantile_10_bin_no']= pd.qcut(df['Debt.To.Income.Ratio'], q=10, precision=0,\n                              labels=bin_labels_5)\ndf.head()","688ffdc9":"df['quantile_10_bin_no'].value_counts()","0462b2da":"#using MinMaxScaler\nfrom sklearn.preprocessing import MinMaxScaler\n\ndf_scaled = df[['ID', 'Amount.Requested', 'Amount.Funded.By.Investors', 'Interest.Rate',\n       'Loan.Length', 'Debt.To.Income.Ratio', 'Monthly.Income', 'Open.CREDIT.Lines',\n       'Revolving.CREDIT.Balance', 'Inquiries.in.the.Last.6.Months']]","948c41d1":"def Scale(df):\n    result = df.copy()\n    for feature_name in df.columns:\n        max_value = df[feature_name].max()\n        min_value = df[feature_name].min()\n        result[feature_name] = (df[feature_name] - min_value) \/ (max_value - min_value)\n    return result","8ee78eb0":"df_test = Scale(df_scaled)\ndf_test","45efa318":"#mean\nfor col in numericals:\n    print(\"%s : %f\" % (col,df[col].mean()))","cb6a1819":"#median\nfor col in numericals:\n    print(\"%s : %f\" % (col,df[col].median()))","f86c7935":"#mode\nfor col in numericals:\n    print(\"%s : %f\" % (col,df[col].mode()))","044738bd":"from scipy.stats import iqr\nfor col in numericals:\n    print(\"%s : %f\" % (col,iqr(df[col])))","0e214125":"#Skewness of each column in data frame\n\nfor col in numericals:\n    #print(\"%s : %f\" % (col,df[col].skew()))\n    if df[col].skew() > 0.5:\n        print(\"%s : %f -> %s\" % (col,df[col].skew(),\"positively skewed or right-skewed\"))\n    elif df[col].skew() < -0.5:\n        print(\"%s : %f -> %s\" % (col,df[col].skew(),\"negatively skewed or left-skewed\"))\n    else:\n        print(\"%s : %f -> %s\" % (col,df[col].skew(),\"approximately symmetric\"))\n    ","330d060e":"#Kurtosis of each column in data frame\n\nfor col in numericals:\n    #print(\"%s : %f\" % (col,df[col].skew()))\n    if df[col].kurt() > 0:\n        print(\"%s : %f -> %s\" % (col,df[col].kurt(),\"Platykurtic Distribution\"))\n    elif df[col].kurt() < 0:\n        print(\"%s : %f -> %s\" % (col,df[col].kurt(),\"Leptokurtic Distribution\"))\n    else:\n        print(\"%s : %f -> %s\" % (col,df[col].kurt(),\"Mesokurtic distribution\"))","3de3c4b2":"facet = None\nfor col in numericals:\n    sns.boxplot(facet, col ,data = df)\n    plt.show()","a33d9f31":"numericals","f1587d39":"df.head()","fb95dc94":"facet = None\nsns.boxplot(facet, 'Amount.Requested',data = df)","959681a8":"plt.hist(df['Amount.Requested'], color='blue')\nplt.show()","799c3da9":"sns.distplot(df['Amount.Requested']);\nprint(\"Skewness: %f\" % df['Amount.Requested'].skew())\nprint(\"Kurtosis: %f\" % df['Amount.Requested'].kurt())","ad5c1f72":"df['Amount.Requested'] = np.log(df['Amount.Requested'])","b2e651f1":"sns.distplot(df['Amount.Requested']);\nprint(\"Skewness: %f\" % df['Amount.Requested'].skew())\nprint(\"Kurtosis: %f\" % df['Amount.Requested'].kurt())","98050092":"df.isna().sum()","673c6a3b":"Q1 = df.quantile(0.25)\nQ3 = df.quantile(0.75)\nIQR = Q3 - Q1\nprint(IQR)","87b29042":"#Checking Outliers for Amount.Requested column \nfacet = None\nsns.boxplot(facet, 'Amount.Requested',data = df)","9880a2a1":"#Identifying how to handle outliers for Amount.Requested column\nprint(sum(df['Amount.Requested'] < df['Amount.Requested'].quantile(0.10)))\nprint(sum(df['Amount.Requested'] > df['Amount.Requested'].quantile(0.95)))\nprint(df['Amount.Requested'].min())\nprint(df['Amount.Requested'].max())\nprint(df['Amount.Requested'].quantile(0.10))\nprint(df['Amount.Requested'].quantile(0.95))","e5a7c4ea":"#replace Outlier using IQR InterQuartile range\nfor col in numericals:\n    df[col] = np.where(df[col] < df[col].quantile(0.10), df[col].quantile(0.10),df[col]) # replacing <10% of the lower whisker \n    df[col] = np.where(df[col] > df[col].quantile(0.95), df[col].quantile(0.95),df[col]) #replacing >95% of the uppwe whisker\n    print(\"%s skew() -> %d\" % (col,df[col].skew()))","b8137024":"facet = None\nfor i in range(0,len(numericals),2):\n    if len(numericals) > i+1:\n        plt.figure(figsize=(10,4))\n        plt.subplot(121)\n        sns.boxplot(facet, numericals[i],data = df)\n        plt.subplot(122)\n        sns.boxplot(facet, numericals[i+1],data = df)\n        plt.tight_layout()\n        plt.show()\n    else:\n        sns.boxplot(facet, numericals[i],data = df)","4580842a":"# Create correlation matrix\ncorrMatrix = df.corr()","5f2edec5":"plt.figure(figsize=(15,15))\nsns.heatmap(corrMatrix, annot=True, cmap=plt.cm.Reds)\nplt.show()","ed748a19":"top_features = corrMatrix.abs().unstack().sort_values().drop_duplicates() # remove duplicates\ntop_features = top_features[top_features < 1] # remove self correlation\ndisplay(top_features[top_features > 0.5]) #identify features with correlation above 0.5","114a043c":"print(top_features.min())\nprint(top_features.max())\ndisplay(top_features[top_features < 0.015]) #identify features with correlation less than 1%","ac60175e":"print(top_features.median())\ndisplay(top_features[top_features==top_features.median()]) #identify features with median correlation","75e28c21":"print(\"maximum correlation is %f\" % top_features.max())\n\nprint(\"minimum correlation is %f\" % top_features.min())","7d5fc3ce":"#scatter plot for maximum corr() features\nsns.lmplot(x=\"Amount.Requested\",y=\"Amount.Funded.By.Investors\",data=df )","05f59520":"#scatter plot for min corr() features\nsns.lmplot(x=\"Revolving.CREDIT.Balance\", y=\"Inquiries.in.the.Last.6.Months\", data=df);","b2de2737":"Kurtosis\n\nIf the Kurtosis value is close to Zero, we call such types of distributions as Mesokurtic distribution. Normal Distribution have this.\n\nIf the Kurtosis value is less than zero, we call such types of distributions as Leptokurtic Distribution. Here, Tail will be fatter and will have longer distribution\/Peak. This shows there are extreme values present in the data,\n\nIf the Kurtosis value is greater than zero, we call such types of distributions as Platykurtic Distribution. It will have a thinner tail and a shorter distribution.","1a76eb3c":"## 5.Plot bar charts for all columns (histograms)","dfacd5ab":"Use the attached data set to accomplish the following steps of Exploratory Data Analysis \n\n1. Load data, check column data type\n2. Identify categorical and numerical variables\n3. Identify Missing variables - count blank\/nan\/null values\n4. Impute Missing variables - with median for numerical variables..\n5. Plot bar charts for all columns (histograms)\n6. Plot scatter plot Monthly.Income vs Revolving.CREDIT.Balance\n7. Plot correlation matrix\n8. Bining column values Debt.To.Income.Ratio to 10 bins\n9. Categorical column to numerical representation\n10. Scale all columns to 0 - 1 range","300f560a":"## 1.Compute mean, mode, median and IQR: Inter-Quartile Range for numerical (continuous) columns","3b922d6b":"Date: 8-Nov-2021","d51520ef":"## 7. Plot correlation matrix","16d81cc2":"Skewness:\n\nIf the value is less than -0.5, we consider the distribution to be negatively skewed or left-skewed\n\nIf the value is greater than 0.5, we consider the distribution to be positively skewed or right-skewed\n\nIf the value is between -0.5 and 0.5, we consider the distribution to be approximately symmetric","bb503ae1":"Based on the correction matrix 2 columns \"Amount.Requested\" and \"Amount.Funded.By.Investors\" has highest correlation of 0.967595","d52ae003":"# Assignment 3","a560b4e5":"## 4.Identify outliers and remove them","05c7a9d8":"## 3. Identify Missing variables - count blank\/nan\/null values","3d7d8ffd":"## 10. Scale all columns to 0 - 1 range","505b2f9c":"Date:11-Nov-2021","a3904ce5":"## 9. Categorical column to numerical representation","c0f6d073":"## 3.Box plot for all numerical columns","617e8f47":"## 2.Skewness and kurtosis of numerical columns","88126dd7":"## 1. Load data, check column data type","21261044":"Maximum correlated features are \"Amount.Requested\" and \"Amount.Funded.By.Investors\"\n\nMinimum correlated features are \"Revolving.CREDIT.Balance\" and \"Inquiries.in.the.Last.6.Months\"","b7da407d":"#### Plotting highly correlated features","7b7ac6d0":"# Assignment 2","32b06679":"## 5.Identify highly correlated variables and plot scatter plots for same","c5aab71b":"## 8. Bining column values Debt.To.Income.Ratio to 10 bins","64663d4d":"# **EDA Assignments - Barclays ML Training**","11cacbe9":"1.Compute mean, mode, median and IQR: Inter-Quartile Range for numerical (continuous) columns\n\n2.Skewness and kurtosis of numerical columns\n\n3.Box plot for all numerical\u00a0columns\n\n4.Identify outliers and remove them\n\n5.Identify highly correlated variables and plot scatter plots for\u00a0same\n\n\nIn addition to the above, please complete the following quiz(shared in the word document) and add it towards the end of your Kaggle Notebook:\n\nAssignment - 3 (Quiz).docx - attached in the input data section.Kindly refer to it.\n[..\/input\/assignment3quiz\/Assignment - 3 (Quiz).docx]\n(..\/input\/assignment3quiz\/Assignment - 3 (Quiz).docx)\n[..\/input\/assignment3quiz\/Assignment - 3 (Quiz).docx]","889e27de":"## 4. Impute Missing variables - with median for numerical variables.","05d7665f":"## 6. Plot scatter plot Monthly.Income vs Revolving.CREDIT.Balance","93554a0d":"## 2. Identify categorical and numerical variables","fa985617":"checking outliers for 'Amount.Requested' column and identifying how to handle them"}}