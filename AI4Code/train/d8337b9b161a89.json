{"cell_type":{"540f7469":"code","b23d7995":"code","9648adee":"code","45365df4":"code","bc111288":"code","e0861c64":"code","24aeae39":"code","6845a37c":"code","d707d1d9":"code","63da02e7":"code","f8d1b76c":"code","5fc3a304":"code","776fbb68":"code","d323b75f":"code","efa47d54":"code","55a5ffb6":"code","7c10c073":"code","59a2981c":"code","8cf8b6d1":"code","bd0ad52c":"code","5533ca47":"code","79018d35":"code","7d4df3a7":"code","82bfe74c":"code","c505dccc":"code","efbdd48c":"code","129836c6":"code","4111f7b1":"code","4c4cd9f3":"code","1c4ec1ec":"code","a928d707":"code","b9d0f9e7":"code","6b865274":"code","be6851f9":"code","d1013b06":"code","c56e9584":"code","73a69ac0":"code","43b86dd9":"markdown","8abd8ddc":"markdown","6fbb12bd":"markdown","bd24c19f":"markdown","16b27206":"markdown","e5219316":"markdown","99df4809":"markdown","cfa135e8":"markdown","665a38fd":"markdown"},"source":{"540f7469":"!pip install py7zr","b23d7995":"import numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom nltk.corpus import stopwords\nfrom sklearn.model_selection import train_test_split\nfrom nltk.tokenize import word_tokenize\nfrom sklearn.decomposition import TruncatedSVD\nimport xgboost\n\nimport string\nimport py7zr\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","9648adee":"df_train = pd.read_csv('..\/input\/msk-redefining-cancer-treatment\/training_text.zip', engine='python', sep='\\|\\|', skiprows=1, names=[\"ID\", \"Text\"]).set_index('ID')\ndf_train2 = pd.read_csv('..\/input\/msk-redefining-cancer-treatment\/training_variants.zip').set_index('ID')\n\ndf_test = pd.read_csv('..\/input\/msk-redefining-cancer-treatment\/test_text.zip', engine='python', sep='\\|\\|', header=None, skiprows=1, names=[\"ID\", \"Text\"]).set_index('ID')\ndf_test2 = pd.read_csv('..\/input\/msk-redefining-cancer-treatment\/test_variants.zip').set_index('ID')\n\ndf_train.head()","45365df4":"df_train2.head()","bc111288":"train = pd.merge(df_train2, df_train, how='inner', on='ID').fillna('')\ntest = pd.merge(df_test2, df_test, how='inner', on='ID').fillna('')\ntrain.head()","e0861c64":"train.shape","24aeae39":"test.head()","6845a37c":"with py7zr.SevenZipFile('..\/input\/msk-redefining-cancer-treatment\/stage2_test_text.csv.7z', mode='r') as z:\n    z.extractall()\n    \nwith py7zr.SevenZipFile('..\/input\/msk-redefining-cancer-treatment\/stage2_test_variants.csv.7z', mode='r') as z:\n    z.extractall()","d707d1d9":"df_test = pd.read_csv('.\/stage2_test_text.csv', engine='python', sep='\\|\\|', header=None, skiprows=1, names=[\"ID\", \"Text\"]).set_index('ID')\ndf_test2 = pd.read_csv('.\/stage2_test_variants.csv').set_index('ID')\ntest = pd.merge(df_test2, df_test, how='inner', on='ID').fillna('')\ntest.head()","63da02e7":"test.shape","f8d1b76c":"(train['Class'].value_counts(sort=False) \/ train.shape[0]).plot(kind='bar')\nplt.plot()","5fc3a304":"string.punctuation","776fbb68":"np.array(stopwords.words('english'))","d323b75f":"stop_words = set(stopwords.words('english')) ","efa47d54":"def preprocessing(text):\n    global stop_words\n    text = text.lower()\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    \n#     word_tokens = word_tokenize(text)\n    \n#     return ' '.join([w for w in word_tokens if not w in stop_words])\n    return text","55a5ffb6":"train['Text'].loc[0][:1000]","7c10c073":"preprocessing(train['Text'].loc[0])[:1000]","59a2981c":"tfidf = TfidfVectorizer(min_df=1, ngram_range=(1, 2), max_features=500)","8cf8b6d1":"text_train = tfidf.fit_transform(train['Text'].values).toarray()\ntext_test = tfidf.transform(test['Text'].values).toarray()","bd0ad52c":"text_train.shape","5533ca47":"train2 = pd.DataFrame(text_train, index=train.index)  \ntest2 = pd.DataFrame(text_test, index=test.index)","79018d35":"n_components = 70\n\nsvd_truncated = TruncatedSVD(n_components=n_components, n_iter=40, random_state=42)\ntruncated_train = pd.DataFrame(svd_truncated.fit_transform(train2))\ntruncated_test = pd.DataFrame(svd_truncated.transform(test2))\n\ntruncated_train.columns = truncated_test.columns = [f'component \u2116{i}' for i in range(1, n_components + 1)]\n\n# truncated_train.index = train.index\n# truncated_test.index = test.index\n\ntruncated_train.head()","7d4df3a7":"truncated_test.head()","82bfe74c":"all_data = pd.concat([train, test]).reset_index(drop=True)\nall_data = pd.get_dummies(all_data, columns=['Gene', 'Variation'], drop_first=True)\nall_data.drop('Text', axis=1, inplace=True)\nall_data.head()","c505dccc":"train = all_data.loc[train.index]\n\nind = sorted(set(all_data.index) - set(train.index))\ntest = all_data.loc[ind]\n\ntruncated_test.index = ind\n\ntrain = train.join(truncated_train)\ntest = test.join(truncated_test)\n\ntrain.shape, test.shape","efbdd48c":"train.head()","129836c6":"test.head()","4111f7b1":"X = train.drop('Class', axis=1)\n# predict -> (0, 8) => -1\nY = train['Class'].values - 1\n\nX_test = test.drop('Class', axis=1)","4c4cd9f3":"# X_train, X_valid, Y_train, Y_valid = train_test_split(X, Y, test_size=0.2, random_state=42)\nX_train, Y_train = X.copy(), Y.copy()","1c4ec1ec":"params = {\n    'objective': 'multi:softprob',\n    'eval_metric': 'mlogloss',\n    'learning_rate': 1e-1,\n    'max_depth': 5,\n    'num_class': 9,\n    'nthread': 4,\n    'seed': 42\n}","a928d707":"matrix = xgboost.DMatrix(X_train, label=Y_train)\n\nxgb_grid = xgboost.cv(\n    params, \n    matrix, \n    num_boost_round=400, \n    nfold=3,\n    stratified=True,\n    early_stopping_rounds=50,\n    verbose_eval=100,\n    show_stdv=True\n)","b9d0f9e7":"len(xgb_grid['test-mlogloss-mean'])","6b865274":"xgb_classifier = xgboost.train(params, matrix, num_boost_round=len(xgb_grid['test-mlogloss-mean']))","be6851f9":"matrix_test = xgboost.DMatrix(X_test)","d1013b06":"pred = xgb_classifier.predict(matrix_test)","c56e9584":"submit = pd.DataFrame(pred, columns=[f'class{i}' for i in range(1, 10)])\nsubmit.insert(loc=0, column='ID', value=pd.merge(df_test2, df_test, how='inner', on='ID').fillna('').index)\nsubmit","73a69ac0":"submit.to_csv('submission.csv', index=False)","43b86dd9":"## TFIDF","8abd8ddc":"## Train and Test","6fbb12bd":"## One hot encoding","bd24c19f":"## Loading data","16b27206":"## Xgboost","e5219316":"## Preprocessing","99df4809":"## Import Libraries","cfa135e8":"## Add features from SVD","665a38fd":"## SVD and dimensionality reduction"}}