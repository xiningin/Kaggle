{"cell_type":{"ea45a3ca":"code","979c2010":"code","0eedb6c1":"code","89ed1d5e":"code","7fb6128f":"code","ebb5cf37":"code","543038c1":"code","2dac4caf":"code","16efc07d":"markdown","c40a79f4":"markdown","26c5fbfd":"markdown","47577a30":"markdown","d529a49f":"markdown"},"source":{"ea45a3ca":"import numpy as np\nimport pandas as pd\nimport glob\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib import colors\nfig = plt.figure(figsize=(8., 6.))","979c2010":"def mask_match(task):\n    result = True\n    for i in range(len(task)):\n        if not np.array_equal(np.clip(np.array(task[i]['input']), 0, 1), np.clip(np.array(task[i]['output']), 0, 1)):\n            result = False\n            break\n    return result\n\ndef shape_match(task): \n    result = True\n    for i in range(len(task)):\n        if not np.array_equal(np.array(task[i]['input']).shape, np.array(task[i]['output']).shape):\n            result = False\n            break\n    return result\n\ndef rotation_match(task): \n    r_ = {r:0 for r in range(1,4)}\n    result = 0\n    for i in range(len(task)):\n        for r in range(3):\n            rot = np.rot90(np.array(task[i]['input']), r+1)\n            rot = np.flip(rot, axis=1)\n            if np.array_equal(np.array(task[i]['output']), rot):\n                r_[r + 1] += 1\n    for r in r_:\n        if r_[r]==len(task):\n            result = r\n    return result\n\ndef color_match(task): #should validate task group not individual task\n    result = True\n    for i in range(len(task)):\n        if not np.array_equal(np.unique(np.array(task[i]['input'])), np.unique(np.array(task[i]['output']))):\n            result = False\n            break\n    return result","0eedb6c1":"path = '\/kaggle\/input\/abstraction-and-reasoning-challenge\/'\ntasks = pd.DataFrame(glob.glob(path + '**\/**'), columns=['path'])\ntasks['tte'] = tasks['path'].map(lambda x: x.split('\/')[-2])\ntasks['output_id'] = tasks['path'].map(lambda x: x.split('\/')[-1].split('.')[0])\ntasks['file'] = tasks['path'].map(lambda x: eval(open(x).read()))\ntasks['train'] = tasks['file'].map(lambda x: x['train'])\ntasks['test'] = tasks['file'].map(lambda x: x['test'])\ntasks.drop(columns=['file'], inplace=True)\ntasks['l'] = tasks.apply(lambda r: (len(r['train']), len(r['test'])), axis=1)\ntasks.tte.value_counts()","89ed1d5e":"tasks['mask_match'] = tasks['train'].map(lambda x: mask_match(x))\ntasks['shape_match'] = tasks['train'].map(lambda x: shape_match(x))\ntasks['rotation_match'] = tasks['train'].map(lambda x: rotation_match(x))\ntasks['color_match'] = tasks['train'].map(lambda x: color_match(x))\n\ntasks.head()","7fb6128f":"#https:\/\/www.kaggle.com\/nagiss\/manual-coding-for-the-first-10-tasks\ncmap = colors.ListedColormap(['#000000','#0074D9','#FF4136','#2ECC40','#FFDC00','#AAAAAA','#F012BE','#FF851B','#7FDBFF','#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\n\ndef viz(path):\n    f = eval(open(path, 'r').read())\n    train = f['train']\n    test = f['test']\n    f, ar = plt.subplots(3,len(train))\n    for i in range(len(train)):\n        ar[0,i].imshow(np.array(train[i]['input']), cmap=cmap, norm=norm)\n        ar[1,i].imshow(np.array(train[i]['output']), cmap=cmap, norm=norm)\n        if i < len(test):\n            ar[2,i].imshow(np.array(test[i]['input']), cmap=cmap, norm=norm)\n        else:\n            ar[2,i].imshow(np.zeros(np.array(test[0]['input']).shape), cmap=cmap, norm=norm)\n    plt.show()\n    \ndf = tasks.drop_duplicates(subset=['mask_match', 'shape_match', 'rotation_match', 'color_match'])\nfor i in range(len(df)):\n    print('mask_match:', df['mask_match'].iloc[i], \n          'shape_match:', df['shape_match'].iloc[i], \n          'rotation_match:', df['rotation_match'].iloc[i], \n          'color_match:', df['color_match'].iloc[i])\n    viz(df['path'].iloc[i])","ebb5cf37":"def flattener(pred):\n    str_pred = '|'+ '|'.join([''.join([str(v) for v in row]) for row in pred])+'|'\n    str_pred = ' '.join([str_pred for i in range(2)]) #simulating 2 predictions\n    #Adding a blank prediction similar to the sample submission\n    str_pred += ' |'+ '|'.join([''.join([str(0) for v in row]) for row in pred])+'|'\n    return str_pred ","543038c1":"evaluation = tasks[tasks['tte']=='evaluation'].reset_index(drop=True)\nscore = 0.\ndenom = 0.\nfor i in range(len(evaluation)):\n    for j in range(len(evaluation['test'][i])):\n        denom += 1\n        #Add your predictions here - just taking the first train ouput here for shape\n        if evaluation['rotation_match'][i] > 0:\n            rot = np.array(evaluation['test'][i][j]['input'])\n            rot = np.flip(np.rot90(rot, evaluation['rotation_match'][i]), axis=1)\n            if not np.array_equal(np.array(evaluation['test'][i][j]['output']), rot):\n                score += 1\n        elif evaluation['shape_match'][i] == True:\n            if not np.array_equal(np.array(evaluation['test'][i][j]['output']), np.array(evaluation['test'][i][j]['input'])): score += 1\n        else:\n            if not np.array_equal(np.array(evaluation['test'][i][j]['output']), np.array(evaluation['train'][i][0]['output'])): score += 1\n\nprint(score\/denom)","2dac4caf":"test = tasks[tasks['tte']=='test'].reset_index(drop=True)\nsub = open('submission.csv','w')\nsub.write('output_id,output\\n')\nfor i in range(len(test)):\n    for j in range(len(test['test'][i])):\n        #Add your predictions here - just taking the first train ouput here for shape\n        if test['rotation_match'][i] > 0:\n            rot = np.array(test['test'][i][j]['input'])\n            pred = np.flip(np.rot90(rot, test['rotation_match'][i]), axis=1)\n        elif test['shape_match'][i] == True:\n            pred = np.array(test['test'][i][j]['input'])\n        else:\n            pred = np.array(test['train'][i][0]['output'])\n        sub.write(test['output_id'][i]+ '_' + str(j) + ',' + flattener(pred)+' \\n')\nsub.close()","16efc07d":"Submission\n=============","c40a79f4":"Evaluation\n==============","26c5fbfd":"Dataframe for Train, Evaluate and Test files\n==================","47577a30":"[The Abstraction and Reasoning Corpus (ARC)](https:\/\/github.com\/fchollet\/ARC)\n* Download and use the testing_interface.html file to try a few yourself then pass it on to your neural network\n* You get up to 3 predictions per test task","d529a49f":"Quick Visualization Function\n============"}}