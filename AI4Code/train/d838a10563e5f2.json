{"cell_type":{"981b77f1":"code","1238bcd1":"code","524b98ea":"code","4acc0d97":"code","f1e4bc84":"code","a553c5ee":"code","51c51455":"code","e89aac27":"code","2f13e0ca":"code","1ca89591":"code","082a1634":"code","22175ea6":"code","88a3689e":"code","aa4333d9":"code","0188b225":"code","061d9dc3":"code","8cc458dd":"code","a59e7eb4":"code","a71017b2":"code","102ae637":"code","a256c338":"code","75a1784b":"code","2bf183db":"code","d525c45b":"code","6acc507d":"code","9aea280b":"code","cba1c5af":"code","1cb0dd70":"markdown"},"source":{"981b77f1":"# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport json\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom xgboost import plot_importance\nfrom catboost import CatBoostRegressor\nfrom matplotlib import pyplot\nimport shap\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nfrom time import time\nfrom tqdm import tqdm_notebook as tqdm\nfrom collections import Counter\nfrom scipy import stats\nimport lightgbm as lgb\nfrom sklearn.metrics import cohen_kappa_score, mean_squared_error\nfrom sklearn.model_selection import KFold, StratifiedKFold\nimport json\npd.set_option('display.max_columns', 1000)\n\nimport datetime\n\nimport random\nrandom.seed(1029)\nnp.random.seed(1029)\n\nimport copy\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom tqdm import tqdm_notebook\nfrom tqdm import tqdm\n\nimport gc\nfrom collections import Counter\n\nfrom typing import Dict","1238bcd1":"%%time\nLOCAL = False\n\ndef read_data(LOCAL):\n    if LOCAL:\n        PATH  = 'data\/'\n    else:\n        PATH = '\/kaggle\/input\/data-science-bowl-2019\/'\n\n    print('Reading train.csv file....')\n    train = pd.read_csv(PATH + 'train.csv')\n    print('Training.csv file have {} rows and {} columns'.format(train.shape[0], train.shape[1]))\n\n    print('Reading test.csv file....')\n    test = pd.read_csv(PATH + 'test.csv')\n    print('Test.csv file have {} rows and {} columns'.format(test.shape[0], test.shape[1]))\n\n    print('Reading train_labels.csv file....')\n    train_labels = pd.read_csv(PATH + 'train_labels.csv')\n    print('Train_labels.csv file have {} rows and {} columns'.format(train_labels.shape[0], train_labels.shape[1]))\n\n    print('Reading specs.csv file....')\n    specs = pd.read_csv(PATH + 'specs.csv')\n    print('Specs.csv file have {} rows and {} columns'.format(specs.shape[0], specs.shape[1]))\n\n    print('Reading sample_submission.csv file....')\n    sample_submission = pd.read_csv(PATH + 'sample_submission.csv')\n    print('Sample_submission.csv file have {} rows and {} columns'.format(sample_submission.shape[0], sample_submission.shape[1]))\n    return train, test, train_labels, specs, sample_submission\n\n# read data\ntrain, test, train_labels, specs, sample_submission = read_data(LOCAL)","524b98ea":"def encode_title(train, test, train_labels):\n    # encode title\n    train['title_event_code'] = sorted(list(map(lambda x, y: str(x) + '_' + str(y), train['title'], train['event_code'])))\n    test['title_event_code'] = sorted(list(map(lambda x, y: str(x) + '_' + str(y), test['title'], test['event_code'])))\n    all_title_event_code = sorted(list(set(train[\"title_event_code\"].unique()).union(test[\"title_event_code\"].unique())))\n    # make a list with all the unique 'titles' from the train and test set\n    list_of_user_activities = sorted(list(set(train['title'].unique()).union(set(test['title'].unique()))))\n    # make a list with all the unique 'event_code' from the train and test set\n    list_of_event_code = sorted(list(set(train['event_code'].unique()).union(set(test['event_code'].unique()))))\n    list_of_event_id = sorted(list(set(train['event_id'].unique()).union(set(test['event_id'].unique()))))\n    # make a list with all the unique worlds from the train and test set\n    list_of_worlds = sorted(list(set(train['world'].unique()).union(set(test['world'].unique()))))\n    # create a dictionary numerating the titles\n    activities_map = dict(zip(list_of_user_activities, np.arange(len(list_of_user_activities))))\n    activities_labels = dict(zip(np.arange(len(list_of_user_activities)), list_of_user_activities))\n    activities_world = dict(zip(list_of_worlds, np.arange(len(list_of_worlds))))\n    assess_titles = sorted(list(set(train[train['type'] == 'Assessment']['title'].value_counts().index).union(set(test[test['type'] == 'Assessment']['title'].value_counts().index))))\n    # replace the text titles with the number titles from the dict\n    train['title'] = train['title'].map(activities_map)\n    test['title'] = test['title'].map(activities_map)\n    train['world'] = train['world'].map(activities_world)\n    test['world'] = test['world'].map(activities_world)\n    train_labels['title'] = train_labels['title'].map(activities_map)\n    win_code = dict(zip(activities_map.values(), (4100*np.ones(len(activities_map))).astype('int')))\n    # then, it set one element, the 'Bird Measurer (Assessment)' as 4110, 10 more than the rest\n    win_code[activities_map['Bird Measurer (Assessment)']] = 4110\n    # convert text into datetime\n    train['timestamp'] = pd.to_datetime(train['timestamp'])\n    test['timestamp'] = pd.to_datetime(test['timestamp'])\n    \n    \n    return train, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code\n# get usefull dict with maping encode\ntrain, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code = encode_title(train, test, train_labels)","4acc0d97":"def get_data(user_sample, test_set=False):\n\n\n    users_sample_features = []\n    users_sample_featureNames = []\n    all_assessments = []\n    games_activities = [23,12,26,32,6,18,19,36,1,2,17]\n    ass_activities = [8,10,9,4,30]\n    activity_activities = [20,5,7,11,21,22,35,42]\n    world_activity = {0: [12, 23, 8, 26, 32, 10],\n     1: [36, 19, 6, 5, 18, 9], \n     3: [2, 30, 1, 17, 4]}\n    all_name = {36: 15,\n         19: 3,2: 3,\n         30: 1,\n         1: 3,\n         17: 9, 6: 2,\n         5: 8,\n         4: 2,\n         12: 3,18: 4,9: 2,\n         23: 3,8: 1,\n         26: 3,32: 8,10: 1}\n    cliptitles = ['Balancing Act','Crystal Caves - Level 1', 'Crystal Caves - Level 2', 'Crystal Caves - Level 3','Honey Cake' ,'Lifting Heavy Things',\n             'Heavy, Heavier, Heaviest', 'Magma Peak - Level 1', 'Magma Peak - Level 2','Slop Problem','Welcome to Lost Lagoon!',\n             'Rulers','Costume Box', '12 Monkeys','Ordering Spheres',\"Pirate's Tale\",'Treasure Map',\n              'Tree Top City - Level 1', 'Tree Top City - Level 2', 'Tree Top City - Level 3']\n    eventid_D = ['9c5ef70c',\n                 '2ec694de', '86c924c4', 'abc5811c', 'c6971acf', '3bf1cf26', '5be391b5', '3ddc79c3', '30df3273', '90d848e0', '28ed704e', 'd06f75b5', '26fd2d99',\n                 '2b9272f4', '6088b756', '45d01abe', 'a8a78786', 'e5c9df6f', '5859dfb6', '9b23e8ee', '9d29771f', 'ecc36b7f', '67aa2ada', 'b7dc8128', \n                 '13f56524', 'e4f1efe6', 'c2baf0bd', '1beb320a', '3a4be871', '5b49460a', 'ec138c1c', '88d4a5be', 'f54238ee', 'e080a381', '5a848010',\n                 'a8876db3', 'e5734469', '6f4bd64e', '9ed8f6da', '9e6b7fb5', 'd38c2fd7', 'cb1178ad', '7961e599', '6f4adc4b', 'eb2c19cd', 'c74f40cd', \n                 '0ce40006', '857f21c0', '3edf6747', '1c178d24', 'fbaf3456', '29a42aea', '1375ccb7', '731c0cbe', 'cf7638f3', '0d18d96c', '99ea62f3',\n                 '38074c54', 'e57dd7af', '3b2048ee', 'c7fe2a55', '16dffff1', 'd2278a3b', '92687c59', 'a1192f43', '15eb4a7d', '37937459', '3afde5dd',\n                 '3bb91dda', '7423acbc', '4b5efe37', '65abac75', '3bb91ced', 'c7f7f0e1', '8d748b58', '6f8106d9', 'a8cc6fec', '46cd75b4', '90ea0bac', \n                 '71e712d8', 'f56e0afc', '4e5fc6f5', '1cf54632', '9b01374f', '83c6c409', '53c6e11a', 'f6947f54', '29bdd9ba', '14de4c5d', '070a5291', \n                 'c1cac9a2', '8ac7cce4', '08fd73f3', 'd3268efa', '9b4001e4', '8f094001', 'f5b8c21a', '15f99afc', '0086365d', 'e4d32835', '19967db1', \n                 '5de79a6a', 'd3640339', '6077cc36', '895865f3', '7d5c30a2', 'd2659ab4', '3afb49e6', 'bfc77bd6', '2c4e6db0', '2a512369', '85d1b0de', \n                 '0413e89d', '99abe2bb', '1575e76c', 'db02c830', 'a76029ee', '46b50ba8', 'ad148f58', '55115cbd', 'd9c005dd', 'a592d54e', 'e04fb33d', \n                 '392e14df', '9de5e594', 'c51d8688', '08ff79ad', '31973d56', '26a5a3dd', '47f43a44', '44cb4907', 'e720d930', 'ecaab346', '6aeafed4', \n                 'dcb1663e', '47efca07', '48349b14', 'c277e121', '17113b36', '04df9b66', '51311d7a', '9554a50b', '763fc34e', 'ab4ec3a4', 'c54cf6c5',\n                 '7525289a', '9ce586dd', 'e7561dd2', 'b5053438', 'b74258a0', '4a09ace1', 'df4fe8b6', 'd88ca108', '86ba578b', 'b2e5b0f1', '28a4eb9a',\n                 '16667cc5', '63f13dd7', 'b012cd7f', '7040c096', '87d743c1', 'd45ed6a1', '1996c610', '01ca3a3c', '58a0de5c', '85de926c', '7d093bf9', \n                 'a5e9da97', '119b5b02', '93edfe2e', '29f54413', 'e3ff61fb', '5f5b2617', 'dcaede90', 'ac92046e', '05ad839b', '6cf7d25c', 'cc5087a3', \n                 '06372577', '1af8be29', 'daac11b0', '5dc079d8', '73757a5e', '3bfd1a65', '003cd2ee', 'fd20ea40', '5290eab1', 'ad2fc29c', '804ee27f', \n                 '7fd1ac25', '8d84fa81', '1b54d27f', 'f32856e4', '37c53127', '6c930e6e', '6043a2b4', '3dfd4aa4', 'ca11f653', '6f445b57', '7cf1bc53', \n                 '250513af', '1340b8d7', '47026d5f', '611485c5', 'c189aaf2', '56817e2b', '33505eae', 'c7128948', '15ba1109', '17ca3959', '89aace00', \n                 '36fa3ebe', '222660ff', '4074bac2', 'f93fc684', '6d90d394', 'e7e44842', 'b120f2ac', 'dcb55a27', 'd88e8f25', '77c76bc5', 'a6d66e51', \n                 'ecc6157f', '155f62a4', 'ea296733', 'd51b1749', '160654fd', 'cb6010f8', '3393b68b', '1f19558b', '2b058fe3', '25fa8af4', '3323d7e9', \n                 'e64e2cfd', 'e37a2b78', '756e5507', '28520915', '2a444e03', '4d911100', 'f71c4741', '4901243f', '77ead60d']\n    eventcode_D = [4050,2050,4235, 4230]\n    list_of_event_idD = list(set(list_of_event_id) - set(eventid_D))\n    list_of_event_codeD = list(set(list_of_event_code) - set(eventcode_D))\n    for idx , (i, session) in enumerate(user_sample.groupby('game_session', sort=False)):\n        features = {}\n        session_features = []\n        user_activities_count = {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n        event_code_count: Dict[str, int] = {ev: 0 for ev in list_of_event_code}\n        corincorids = []\n        event_id_count: Dict[str, int] = {eve: 0 for eve in list_of_event_id}\n        title_count: Dict[str, int] = {eve: 0 for eve in activities_labels.values()} \n        last_accuracy_title = {'acc_' + title: -1 for title in assess_titles}\n        all_name_dict_features = {}\n        for x in all_name.items():\n            all_name_dict_features['activity_' + str(x[0])] = np.nan\n        session_type = session['type'].iloc[0]\n        session_title = session['title'].iloc[0]\n        session_title_text = activities_labels[session_title]\n        session_hour = session.timestamp.iloc[0].time().hour\n        session_weekday = session.timestamp.iloc[0].weekday()\n        session_world = session['world'].iloc[0]\n        timestamp = session['timestamp'].iloc[0].timestamp()\n        installation_id = session['installation_id'].iloc[0]\n        true_attempts = 0\n        false_attempts = 0\n        misses_stats = {}\n        for tA in games_activities:\n            misses_stats[str(tA) + '_num_of_misses'] = 0\n        for tA in ass_activities:\n            misses_stats[str(tA) + '_num_of_misses'] = 0\n        for tA in activity_activities:\n            misses_stats[str(tA) + '_num_of_misses'] = 0\n        duration_stats = {}\n        for tA in games_activities:\n            duration_stats[str(tA) + '_duration'] = np.nan\n        for tA in ass_activities:\n            duration_stats[str(tA) + '_duration'] = np.nan\n        for tA in activity_activities:\n            duration_stats[str(tA) + '_duration'] = np.nan\n        ass_accuracy = {}\n        for tA in ass_activities:\n            ass_accuracy[str(tA) + '_true_attempts'] = 0\n            ass_accuracy[str(tA) + '_false_attempts'] = 0\n            ass_accuracy[str(tA) + '_accuracy_in_Ass'] = np.nan\n            ass_accuracy[str(tA) + '_true_attempts_dur'] = np.nan\n            ass_accuracy[str(tA) + '_false_attempts_dur'] = np.nan\n        avg_good_round_stats = {}\n        for tA in games_activities:\n            avg_good_round_stats[str(tA) + '_num_goodrounds'] = 0\n            avg_good_round_stats[str(tA) + '_duration_goodrounds_mean'] = np.nan\n            avg_good_round_stats[str(tA) + '_duration_goodrounds_median'] = np.nan\n            avg_good_round_stats[str(tA) + '_misses_goodrounds_sum'] = np.nan\n            avg_good_round_stats[str(tA) + '_misses_goodrounds_median'] = np.nan\n            avg_good_round_stats[str(tA) + '_max_round'] = np.nan\n        for tA in ass_activities:\n            avg_good_round_stats[str(tA) + '_num_goodrounds'] = 0\n            avg_good_round_stats[str(tA) + '_duration_goodrounds_mean'] = np.nan\n            avg_good_round_stats[str(tA) + '_duration_goodrounds_median'] = np.nan\n            avg_good_round_stats[str(tA) + '_misses_goodrounds_sum'] = np.nan\n            avg_good_round_stats[str(tA) + '_misses_goodrounds_median'] = np.nan\n            avg_good_round_stats[str(tA) + '_max_round'] = np.nan\n        for tA in activity_activities:\n            avg_good_round_stats[str(tA) + '_num_goodrounds'] = 0\n            avg_good_round_stats[str(tA) + '_duration_goodrounds_mean'] = np.nan\n            avg_good_round_stats[str(tA) + '_duration_goodrounds_median'] = np.nan\n            avg_good_round_stats[str(tA) + '_misses_goodrounds_sum'] = np.nan\n            avg_good_round_stats[str(tA) + '_misses_goodrounds_median'] = np.nan\n            avg_good_round_stats[str(tA) + '_max_round'] = np.nan\n        cor_incor_stats = {}\n        for tA in games_activities:\n            cor_incor_stats[str(tA) + '_num_attempts'] = np.nan\n            cor_incor_stats[str(tA) + '_share_cor'] = np.nan\n            cor_incor_stats[str(tA) + '_first_goodattemp_'] = np.nan\n        for tA in ass_activities:\n            cor_incor_stats[str(tA) + '_num_attempts'] = np.nan\n            cor_incor_stats[str(tA) + '_share_cor'] = np.nan\n            cor_incor_stats[str(tA) + '_first_goodattemp_'] = np.nan\n        if idx == 0:\n            users_sample_featureNames.append('timestamp')\n            users_sample_featureNames.extend(list(user_activities_count.keys()))\n            users_sample_featureNames.extend(list(event_code_count.keys()))\n            users_sample_featureNames.extend(list(event_id_count.keys()))\n            users_sample_featureNames.extend(list(title_count.keys()))\n            users_sample_featureNames.extend(list(last_accuracy_title.keys()))\n            users_sample_featureNames.append('true_attempts')\n            users_sample_featureNames.append('false_attempts')\n            users_sample_featureNames.append('session_worlds')\n            users_sample_featureNames.append('session_hour')\n            users_sample_featureNames.append('session_weekday')\n            users_sample_featureNames.extend(list(duration_stats.keys())) \n            users_sample_featureNames.extend(list(avg_good_round_stats.keys())) \n            users_sample_featureNames.extend(list(cor_incor_stats.keys()))\n            users_sample_featureNames.extend(list(misses_stats.keys()))\n            users_sample_featureNames.extend(list(ass_accuracy.keys()))\n            users_sample_featureNames.extend(list(all_name_dict_features.keys()))\n            users_sample_featureNamesD = {k:idx for idx,k in enumerate(users_sample_featureNames)}\n        if (session_type == 'Assessment'):\n            all_attempts = session[session.event_code == win_code[session_title]]\n            true_attempts = all_attempts['event_data'].str.contains('true').sum()\n            false_attempts = all_attempts['event_data'].str.contains('false').sum()\n            accuracy = true_attempts\/(true_attempts+false_attempts) if (true_attempts+false_attempts) != 0 else 0\n            if accuracy == 0:\n                accuracy_group = 0\n            elif accuracy == 1:\n                accuracy_group = 3\n            elif accuracy == 0.5:\n                accuracy_group = 2\n            else:\n                accuracy_group = 1\n            features['accuracy_group'] = accuracy_group\n            features['session_world'] = session_world\n            features['installation_id'] = installation_id\n            features['session_title'] = session_title\n            \n            #\u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c c \u0438\u0441\u0442\u043e\u0440\u0438\u0435\u0439 \n            prev_time_periods_min = [60*60*24*3, 60*60*24*100]\n            start_assessment_time =  session['timestamp'].iloc[0].timestamp()\n            for t in prev_time_periods_min:\n                start_of_df = start_assessment_time - t\n                df_ = np.array([])\n                for idx2, T in enumerate(users_sample_features):\n                    if T[0] >= start_of_df:\n                        df_ = np.array(users_sample_features[idx2:])\n                        break\n                got_history = 1 if df_.shape[0] > 0 else 0\n                features['got_history_' + str(t)] = got_history        \n\n                if got_history:\n                    previous_time_duration = (session['timestamp'].iloc[0].timestamp() - df_[0][0])\n\n                if t in [60*60*24*100]:\n                    if got_history:\n#                         features['hour_of_first_session_start'] = df_[:,users_sample_featureNamesD['session_hour']][0]\n#                         features['weekday_of_first_session_start'] = df_[:,users_sample_featureNamesD['session_weekday']][0]\n                        features['time_passed_from_session_started'] = (session['timestamp'].iloc[0].timestamp() - users_sample_features[0][0])\/60\n\n                    else:\n#                         features['hour_of_first_session_start'] = -100\n#                         features['weekday_of_first_session_start'] = -100\n                        features['time_passed_from_session_started'] = 0\n                if got_history:\n                    features['median_hour_session_start_' + str(t)] = np.nanmedian(df_[:,users_sample_featureNamesD['session_hour']])\n                    features['std_hour_session_start_' + str(t)] = np.nanstd(df_[:,users_sample_featureNamesD['session_hour']])\n                    features['DIFF_median_hour_session_start_' + str(t)] = features['median_hour_session_start_' + str(t)] - session_hour\n                    features['ABS_DIFF_median_hour_session_start_' + str(t)] = np.abs(features['median_hour_session_start_' + str(t)] - session_hour)\n                else:        \n                    features['median_hour_session_start_' + str(t)] = -100\n                    features['std_hour_session_start_' + str(t)] = -100\n                    features['DIFF_median_hour_session_start_' + str(t)] = -100\n                    features['ABS_DIFF_median_hour_session_start_' + str(t)] = -100\n                if got_history:\n                    features['clip_count_' + str(t)] = df_[:,users_sample_featureNamesD['Clip']].sum() \n                    features['activity_count_' + str(t)] = df_[:,users_sample_featureNamesD['Activity']].sum() \n                    features['ass_count_' + str(t)] = df_[:,users_sample_featureNamesD['Assessment']].sum() \n                    features['game_count_' + str(t)] = df_[:,users_sample_featureNamesD['Game']].sum() \n\n                    features['FR_clip_count_' + str(t)] = df_[:,users_sample_featureNamesD['Clip']].sum() \/previous_time_duration\n                    features['FR_activity_count_' + str(t)] = df_[:,users_sample_featureNamesD['Activity']].sum()\/previous_time_duration \n                    features['FR_ass_count_' + str(t)] = df_[:,users_sample_featureNamesD['Assessment']].sum() \/previous_time_duration\n                    features['FR_game_count_' + str(t)] = df_[:,users_sample_featureNamesD['Game']].sum() \/previous_time_duration\n\n                    \n\n                    features['share_of_games_' + str(t)] = features['game_count_' + str(t)]\/ (features['game_count_' + str(t)] + features['ass_count_' + str(t)] +\\\n                                                features['activity_count_' + str(t)] +  features['clip_count_' + str(t)])\n                    features['share_of_activities_' + str(t)] = features['activity_count_' + str(t)]\/ (features['game_count_' + str(t)] + features['ass_count_' + str(t)] +\\\n                                                features['activity_count_' + str(t)] +  features['clip_count_' + str(t)]) \n                    features['share_of_clips_' + str(t)] = features['clip_count_' + str(t)]\/ (features['game_count_' + str(t)] + features['ass_count_' + str(t)] +\\\n                                                features['activity_count_' + str(t)] +  features['clip_count_' + str(t)]) \n                else:\n                    features['clip_count_' + str(t)] = 0\n                    features['activity_count_' + str(t)] =  0\n                    features['ass_count_' + str(t)] = 0\n                    features['game_count_' + str(t)] = 0\n                    features['FR_clip_count_' + str(t)] = -100\n                    features['FR_activity_count_' + str(t)] = -100\n                    features['FR_ass_count_' + str(t)] = -100\n                    features['FR_game_count_' + str(t)] = -100\n\n                    features['share_of_games_' + str(t)] = -1\n                    features['share_of_activities_' + str(t)] = -1\n                    features['share_of_clips_' + str(t)] = -1\n                if got_history:\n                    for f in last_accuracy_title.keys():\n                        temp_D = df_[:,users_sample_featureNamesD[f]]\n                        if len(temp_D[temp_D >= 0]) > 0:\n                            temp_ = temp_D[temp_D >= 0][-1]\n                        else:\n                            temp_ = -100\n                        features[str(f) + '_' + str(t)] = temp_\n                else:\n                    for f in last_accuracy_title.keys():\n                        features[str(f) + '_' + str(t)] = -100\n                #################################################################################\n                if t in [60*60*24*3,60*60*24*100]:            \n                    #\u0421\u0447\u0435\u0442\u0447\u0438\u043a\u0438 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u043e\u0432\n                    for f in event_code_count.keys():\n                        if f in eventcode_D:\n                            continue\n                        temp_ = df_[:,users_sample_featureNamesD[f]].sum() if got_history else 0\n                        features[str(f) + '_' + str(t)] = temp_\n                    for f in event_id_count.keys():\n                        if f in eventid_D:\n                            continue\n                        # \u0443\u0434\u0430\u044f\u043b\u0435\u043c \u0438\u0437\u043b\u0438\u0448\u043d\u0438\u0435 \u043a\u043e\u0434\u044b                    \n                        temp_ = df_[:,users_sample_featureNamesD[f]].sum() if got_history else 0\n                        features[str(f) + '_' + str(t)] = temp_\n                    for f in title_count.keys():\n                        if f in cliptitles:\n                            continue\n                        else:\n                            temp_ = df_[:,users_sample_featureNamesD[f]].sum() if got_history else 0\n                            features[str(f) + '_' + str(t)] = temp_\n                #################################################################################\n                features['accumulated_correct_attempts_' + str(t)] = df_[:,users_sample_featureNamesD['true_attempts']].sum() if got_history else 0\n                features['accumulated_uncorrect_attempts_' + str(t)] = df_[:,users_sample_featureNamesD['false_attempts']].sum() if got_history else 0\n                features['accumulated_share_coruncor_attempts_' + str(t)] = features['accumulated_correct_attempts_' + str(t)]\/\\\n                (features['accumulated_uncorrect_attempts_' + str(t)] + features['accumulated_correct_attempts_' + str(t)]) if\\\n                (features['accumulated_uncorrect_attempts_' + str(t)] + features['accumulated_correct_attempts_' + str(t)]) > 0 else -1\n                features['accumulated_accuracy_' + str(t)] = features['accumulated_correct_attempts_' + str(t)]\/\\\n                (features['accumulated_correct_attempts_' + str(t)] + features['accumulated_uncorrect_attempts_' + str(t)]) if \\\n                features['accumulated_correct_attempts_' + str(t)] + features['accumulated_uncorrect_attempts_' + str(t)] > 0 else -1\n                for f in ass_accuracy.keys():\n                    features[str(f) + '_mean_' + str(t)] = np.nanmean(df_[:,users_sample_featureNamesD[f]]) if got_history else -1\n                    features[str(f) + '_median_' + str(t)] = np.nanmedian(df_[:,users_sample_featureNamesD[f]]) if got_history else -1\n                    if f in ['8_true_attempts', '8_false_attempts',  '10_true_attempts', '10_false_attempts',\\\n                              '9_true_attempts', '9_false_attempts', '4_true_attempts',\\\n                             '4_false_attempts', '30_true_attempts', '30_false_attempts']:\n                        features[str(f) + '_sum_' + str(t)] = np.nansum(df_[:,users_sample_featureNamesD[f]]) if got_history else 0\n                true_list = ['8_true_attempts', '10_true_attempts', '9_true_attempts', '4_true_attempts','30_true_attempts']\n                false_list = ['8_false_attempts', '10_false_attempts', '9_false_attempts', '4_false_attempts','30_false_attempts']\n                for nL in range(5):\n                    true_list_f = features[true_list[nL] + '_sum_' + str(t)]\n                    false_list_f = features[false_list[nL] + '_sum_' + str(t)]\n                    if (true_list_f+false_list_f) != 0:\n                        features['accumulated_quality_by_ass_' + true_list[nL]+ '_'+ str(t)] = true_list_f\/(true_list_f+false_list_f)\n                    else:\n                        features['accumulated_quality_by_ass_' + true_list[nL]+ '_'+ str(t)]  = np.nan\n                for f in avg_good_round_stats.keys():\n                    features[str(f) + '_mean_' + str(t)] = np.nanmean(df_[:,users_sample_featureNamesD[f]]) if got_history else -1\n                    features[str(f) + '_median_' + str(t)] = np.nanmedian(df_[:,users_sample_featureNamesD[f]]) if got_history else -1\n                    features[str(f) + '_sum_' + str(t)] = np.nansum(df_[:,users_sample_featureNamesD[f]]) if got_history else -1\n                    features[str(f) + '_max_' + str(t)] = np.nanmax(df_[:,users_sample_featureNamesD[f]]) if got_history else -1\n                for f in cor_incor_stats.keys():\n                    features[str(f) + '_mean_' + str(t)] = np.nanmean(df_[:,users_sample_featureNamesD[f]]) if got_history else -1\n                    features[str(f) + '_median_' + str(t)] = np.nanmedian(df_[:,users_sample_featureNamesD[f]]) if got_history else -1\n                    features[str(f) + '_sum_' + str(t)] = np.nansum(df_[:,users_sample_featureNamesD[f]])  if got_history else -1\n                for f in misses_stats.keys():\n                    features[str(f) + '_total_misses_'  +str(t)] = np.nansum(list(df_[:,users_sample_featureNamesD[f]])) if got_history else -1\n                for f in duration_stats.keys():\n                    features[str(f) + '_mean_'  +str(t)] = np.nanmean(list(df_[:,users_sample_featureNamesD[f]])) if got_history else -1\n                    features[str(f) + '_sum_'  +str(t)] = np.nansum(list(df_[:,users_sample_featureNamesD[f]])) if got_history else -1\n                    features[str(f) + '_median_'  +str(t)] = np.nanmedian(list(df_[:,users_sample_featureNamesD[f]])) if got_history else -1\n                    features[str(f) + '_90p_'  +str(t)] = np.nanpercentile(list(df_[:,users_sample_featureNamesD[f]]),90) if got_history else -1\n                if got_history:\n                    G_W = df_[(df_[:,users_sample_featureNamesD['Game']] == 1) & (df_[:,users_sample_featureNamesD['session_worlds']] == session_world)]\n                    features['num_of_games_in_world_' + str(t)] = len(G_W) if len(G_W)>0 else 0\n                else:\n                    features['num_of_games_in_world_' + str(t)] = 0\n                for f in all_name_dict_features.keys():\n                    features[str(f) + '_median_' + str(t)] = np.nanmedian(df_[:,users_sample_featureNamesD[f]]) if got_history else -1\n                    features[str(f) + '_max_' + str(t)] = np.nanmax(df_[:,users_sample_featureNamesD[f]])  if got_history else -1\n            last_accuracy_title['acc_' + session_title_text] = accuracy\n            if test_set:\n                all_assessments.append(features)\n            elif true_attempts+false_attempts > 0:\n                all_assessments.append(features)\n            del features\n        #################################################################################################################\n        #################################################################################################################\n        #################################################################################################################\n        def update_counters(counter: dict, col: str):\n                num_of_session_count = Counter(session[col])\n                for k in num_of_session_count.keys():\n                    x = k\n                    if col == 'title':\n                        x = activities_labels[k]\n                    counter[x] += num_of_session_count[k]\n                return counter\n        #\u041d\u0430\u0447\u0430\u043b\u043e \u0441\u0431\u043e\u0440\u0430 \u0444\u0438\u0447\u0435\u0439 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0435\u0441\u0441\u0438\u0438\n        #\u0421\u0447\u0451\u0442\u0447\u0438\u043a\u0438\n        user_activities_count[session_type] = 1\n        event_code_count = update_counters(event_code_count, \"event_code\")\n        event_id_count = update_counters(event_id_count, \"event_id\")\n        title_count = update_counters(title_count, 'title')\n        duration_D = (session.iloc[-1, 2] - session.iloc[0, 2]).seconds + 1 \n    #     2030 - \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b \u0440\u0430\u0443\u043d\u0434\n    #     3020 - \u043e\u0448\u0438\u0431\u043a\u0430 \u0432 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438\n    #     3021 - \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435\n        #\u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0432 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u044b\u0445 \u0438\u0433\u0440\u0430\u0445, \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044f\u0445 \u0438 \u0430\u0441\u0441\u0435\u0441\u043c\u0435\u043d\u0442\u0430\u0445\n        good_end_of_round = session[session.event_code == 2030]\n        cors = session[session.event_code == 3021]\n        incors = session[session.event_code == 3020]\n        misses = session[session.event_code == 4070]\n        if (session_title in ass_activities):\n            tA = session_title\n            all_attempts = session[session.event_code == win_code[session_title]]\n            true_attempts = all_attempts['event_data'].str.contains('true').sum()\n            false_attempts = all_attempts['event_data'].str.contains('false').sum()\n            accuracy = true_attempts\/(true_attempts+false_attempts) if (true_attempts+false_attempts) != 0 else np.nan\n            ass_accuracy[str(tA) + '_true_attempts'] = true_attempts\n            ass_accuracy[str(tA) + '_false_attempts'] = false_attempts\n            ass_accuracy[str(tA) + '_accuracy_in_Ass'] = accuracy\n            ass_accuracy[str(tA) + '_true_attempts_dur'] = true_attempts\/duration_D\n            ass_accuracy[str(tA) + '_false_attempts_dur'] = false_attempts\/duration_D\n        if misses.shape[0] > 0:\n            if session_title in games_activities:\n                tA = session_title\n                misses_stats[str(tA) + '_num_of_misses'] = misses.shape[0]\n        if session_title in ass_activities:\n                tA = session_title\n                misses_stats[str(tA) + '_num_of_misses'] = misses.shape[0]\n        if session_title in activity_activities:\n                tA = session_title\n                misses_stats[str(tA) + '_num_of_misses'] = misses.shape[0]\n        if good_end_of_round.shape[0] > 0:\n            duration_of_good_rounds = good_end_of_round['event_data'].apply(lambda x: json.loads(x)['duration'])\n            if (session_title in ass_activities) or (session_title in games_activities) or  (session_title in activity_activities):\n                tA = session_title\n                avg_good_round_stats[str(tA) + '_num_goodrounds'] = good_end_of_round.shape[0]\n                avg_good_round_stats[str(tA) + '_duration_goodrounds_mean'] = np.mean(duration_of_good_rounds)\n                avg_good_round_stats[str(tA) + '_duration_goodrounds_median'] = np.median(duration_of_good_rounds)\n                try:\n                    num_of_round = good_end_of_round['event_data'].apply(lambda x: json.loads(x)['round'])\n                    avg_good_round_stats[str(tA) + '_max_round'] = np.max(num_of_round)\n                except:\n                    try:\n                        num_of_round = good_end_of_round['event_data'].apply(lambda x: json.loads(x)['round_number'])\n                        avg_good_round_stats[str(tA) + '_max_round'] = np.max(num_of_round)\n                    except:\n                        avg_good_round_stats[str(tA) + '_max_round'] = np.nan\n                try:            \n                    misses_of_good_rounds = good_end_of_round['event_data'].apply(lambda x: json.loads(x)['misses'])\n                    avg_good_round_stats[str(tA) + '_misses_goodrounds_sum'] = np.sum(misses_of_good_rounds)\n                    avg_good_round_stats[str(tA) + '_misses_goodrounds_median'] = np.median(misses_of_good_rounds)\n                except:\n                    avg_good_round_stats[str(tA) + '_misses_goodrounds_sum'] = np.nan\n                    avg_good_round_stats[str(tA) + '_misses_goodrounds_median'] = np.nan\n        #\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u043e \u043f\u0440\u0430\u0432\u043b\u044c\u043d\u044b\u043c \u0438 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c \u0434\u0435\u0439\u0442\u0441\u0432\u0438\u044f\u043c\n        if cors.shape[0] + incors.shape[0] > 0:\n            if (session_title in ass_activities) or (session_title in games_activities):\n                tA = session_title\n                cor_incor_stats[str(tA) + '_num_attempts'] = cors.shape[0] + incors.shape[0]\n                cor_incor_stats[str(tA) + '_share_cor'] = cors.shape[0]\/(cor_incor_stats[str(tA) + '_num_attempts'])\n                if (incors.shape[0] == 0) :\n                    cor_incor_stats[str(tA) + '_first_goodattemp_'] = 1\n                elif (cors.shape[0] > 0) and (cors['timestamp'].iloc[0] < incors['timestamp'].iloc[0]):\n                    cor_incor_stats[str(tA) + '_first_goodattemp_'] = 1\n                else:\n                    cor_incor_stats[str(tA) + '_first_goodattemp_'] = 0\n        if session_title in games_activities:\n            tA = session_title\n            duration_stats[str(tA) + '_duration'] = duration_D\n        if session_title in ass_activities:\n            tA = session_title\n            duration_stats[str(tA) + '_duration'] = duration_D\n        if session_title in activity_activities:\n            tA = session_title\n            duration_stats[str(tA) + '_duration'] = duration_D\n        #\u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0433\u0440\u043e\u043a \u0441 \u0438\u0433\u0440\u0430\u043c\u0438, \u043f\u043e\u0440\u0445\u043e\u0434\u0438\u0442, \u0438\u0433\u0440\u0430\u0435\u0442\n        if (session_title in ass_activities) or (session_title in games_activities):\n            tA = session_title\n            all_name_dict_features['activity_' + str(tA)] = 0\n            if good_end_of_round.shape[0] > 0 :\n                try:\n                    rounds_ = good_end_of_round['event_data'].apply(lambda x: json.loads(x)['round'])\n                    max_round = np.max(rounds_)\n                    all_name_dict_features['activity_' + str(tA)] = max_round\/all_name[tA]\n                except:\n                    try:\n                        rounds_ = good_end_of_round['event_data'].apply(lambda x: json.loads(x)['round_number'])\n                        max_round = np.max(rounds_)\n                        all_name_dict_features['activity_' + str(tA)] = max_round\/all_name[tA]\n                    except:\n                        all_name_dict_features['activity_' + str(tA)] = np.nan\n        session_features.append(timestamp)\n        session_features.extend(list(user_activities_count.values()))\n        session_features.extend(list(event_code_count.values()))\n        session_features.extend(list(event_id_count.values()))\n        session_features.extend(list(title_count.values()))\n        session_features.extend(list(last_accuracy_title.values()))\n        session_features.append(true_attempts)\n        session_features.append(false_attempts)\n        session_features.append(session_world)\n        session_features.append(session_hour)\n        session_features.append(session_weekday)\n        session_features.extend(list(duration_stats.values()))\n        session_features.extend(list(avg_good_round_stats.values()))\n        session_features.extend(list(cor_incor_stats.values()))  \n        session_features.extend(list(misses_stats.values()))\n        session_features.extend(list(ass_accuracy.values()))\n        session_features.extend(list(all_name_dict_features.values()))\n        users_sample_features.append(session_features)   \n        del session_features\n    \n                            \n    # if it't the test_set, only the last assessment must be predicted, the previous are scraped\n    if test_set:\n        return all_assessments[-1]\n    # in the train_set, all assessments goes to the dataset\n    return all_assessments","f1e4bc84":"asessment_activity_dict = {\n    \n    # 'Mushroom Sorter (Assessment)'\n    30: {'game' : [2],\n         'activity': [ 22]},\n    \n    # 'Bird Measurer (Assessment)'\n    4: {'game': [17],\n        'activity': [7]},\n    \n    # 'Cauldron Filler (Assessment)'\n    9: {'game': [19],\n        'activity': [42]},\n    \n    # 'Cart Balancer (Assessment)'\n    8: {'game': [23],\n        'activity': [11]},\n    \n    # 'Chest Sorter (Assessment)'\n    10: {'game': [32],\n        'activity': [20]},\n}\n\ndef calculate_features_per_row(row):\n    \n    ass = int(row['session_title'])\n    \n    ## asessments\n    row['relevant_asessment_share_cor_median_8640000'] = row[str(ass) + '_share_cor_median_8640000']\n    row['relevant_asessment_accuracy_in_Ass_median_8640000'] = row[str(ass) + '_accuracy_in_Ass_median_8640000']\n    \n    # num_goodrounds\n    features_game = [str(game) + '_num_goodrounds_mean_8640000'  for game in asessment_activity_dict[ass]['game']]\n    features_act = [str(act) + '_num_goodrounds_mean_8640000'  for act in asessment_activity_dict[ass]['activity']]\n    row['relevant_game_num_goodrounds_8640000__sum'] = np.sum(row[features_game])\n    row['relevant_activity_num_goodrounds_8640000__sum'] = np.sum(row[features_act])\n    \n    features_game = [str(game) + '_num_goodrounds_mean_259200'  for game in asessment_activity_dict[ass]['game']]\n    row['relevant_game_num_goodrounds_259200__sum'] = np.sum(row[features_game])\n    \n    # duration_goodrounds_median\n    features_game = [str(game) + '_duration_goodrounds_median_mean_8640000'  for game in asessment_activity_dict[ass]['game']]\n    features_act = [str(act) + '_duration_goodrounds_median_mean_8640000'  for act in asessment_activity_dict[ass]['activity']]\n    row['relevant_game_duration_goodrounds_median_8640000__mean'] = np.mean(row[features_game])\n    row['relevant_activity_duration_goodrounds_median_8640000__mean'] = np.mean(row[features_act])\n    \n    # misses_goodrounds_median\n    features_game = [str(game) + '_misses_goodrounds_median_mean_8640000'  for game in asessment_activity_dict[ass]['game']]\n    features_act = [str(act) + '_misses_goodrounds_median_mean_8640000'  for act in asessment_activity_dict[ass]['activity']]\n    row['relevant_game_misses_goodrounds_median_8640000__mean'] = np.mean(row[features_game])\n    row['relevant_activity_misses_goodrounds_median_8640000__mean'] = np.mean(row[features_act])\n    \n    # max_round\n    features_game = [str(game) + '_max_round_mean_8640000'  for game in asessment_activity_dict[ass]['game']]\n    features_act = [str(act) + '_max_round_mean_8640000'  for act in asessment_activity_dict[ass]['activity']]\n    row['relevant_game_max_round_8640000__mean'] = np.mean(row[features_game])\n    row['relevant_activity_max_round_8640000__mean'] = np.mean(row[features_act])\n\n    # share_cor\n    features_game = [str(game) + '_share_cor_mean_8640000'  for game in asessment_activity_dict[ass]['game']]\n    row['relevant_game_share_cor_8640000__mean'] = np.mean(row[features_game])\n    \n    features_game = [str(game) + '_share_cor_mean_259200'  for game in asessment_activity_dict[ass]['game']]\n    row['relevant_game_share_cor_259200__mean'] = np.mean(row[features_game])\n    \n    # num_attempts\n    features_game = [str(game) + '_num_attempts_mean_8640000'  for game in asessment_activity_dict[ass]['game']]\n    row['relevant_game_num_attempts_8640000__mean'] = np.mean(row[features_game])\n    row['relevant_game_num_attempts_8640000__sum'] = np.sum(row[features_game])\n    \n    features_game = [str(game) + '_num_attempts_mean_259200'  for game in asessment_activity_dict[ass]['game']]\n    row['relevant_game_num_attempts_259200__sum'] = np.sum(row[features_game])\n    \n    return row\n\ndef add_features(df):\n    \n    df['relevant_asessment_share_cor_median_8640000'] = -100\n    df['relevant_asessment_accuracy_in_Ass_median_8640000'] = -100\n    \n    df['relevant_game_num_goodrounds_8640000__sum'] = -100\n    df['relevant_activity_num_goodrounds_8640000__sum'] = -100\n    \n    df['relevant_game_duration_goodrounds_median_8640000__mean'] = -100\n    df['relevant_activity_duration_goodrounds_median_8640000__mean'] = -100\n    df['relevant_game_misses_goodrounds_median_8640000__mean'] = -100\n    df['relevant_activity_misses_goodrounds_median_8640000__mean'] = -100\n    df['relevant_activity_max_round_8640000__mean'] = -100\n    df['relevant_game_share_cor_8640000__mean'] = -100\n    df['relevant_game_num_attempts_8640000__mean'] = -100\n    df['relevant_game_num_attempts_8640000__sum'] = -100\n    \n    \n    df['relevant_game_num_attempts_259200__sum'] = -100\n    df['relevant_game_num_goodrounds_259200__sum'] = -100\n    df['relevant_game_share_cor_259200__mean'] = -100\n\n    df = df.apply(lambda row: calculate_features_per_row(row), axis=1)\n    \n    return df","a553c5ee":"# categoricals = ['session_title','hour','weekday']\ncategoricals = ['session_title','session_world']\ndef get_train(train):\n    compiled_train = []\n    for i, (ins_id, user_sample) in tqdm(enumerate(train.groupby('installation_id', sort = False)), total = 17000):\n        compiled_train += get_data(user_sample)\n    reduce_train = pd.DataFrame(compiled_train)\n    return reduce_train\n\ndef get_test(test):\n    compiled_test = []\n    for ins_id, user_sample in tqdm(test.groupby('installation_id', sort = False), total = 1000):\n        test_data = get_data(user_sample, test_set = True)\n        compiled_test.append(test_data)\n    reduce_test = pd.DataFrame(compiled_test)\n    return reduce_test","51c51455":"reduce_test = get_test(test)\ndel test\ngc.collect()","e89aac27":"reduce_test = add_features(reduce_test)\ngc.collect()","2f13e0ca":"reduce_train = get_train(train)\ndel train\ngc.collect()","1ca89591":"reduce_train = add_features(reduce_train)\ngc.collect()","082a1634":"# counts = [list_of_event_code, list_of_event_id, activities_labels]\n# time_periods = [60*60*24*3, 60*60*24*100]\n# columns_to_clip = []\n# for t in time_periods:\n#     columns_to_clip.extend(list(map(lambda x: str(x) + '_' + str(t), counts[0])))\n#     columns_to_clip.extend(list(map(lambda x: str(x) + '_' + str(t), counts[1])))\n#     columns_to_clip.extend(list(map(lambda x: str(x) + '_' + str(t), counts[2].values())))\n# columns_to_clip = [col for col in columns_to_clip if col in reduce_train.columns] + [col for col in reduce_train.columns if 'count' in col]\n# values_to_clip_to = reduce_train[columns_to_clip].quantile(0.75)\n# reduce_train[columns_to_clip] = reduce_train[columns_to_clip].clip(upper=values_to_clip_to, axis=1)\n# reduce_test[columns_to_clip] = reduce_test[columns_to_clip].clip(upper=values_to_clip_to, axis=1)","22175ea6":"import pickle\nwith open('reduce_train.pickle', 'wb') as f:\n    pickle.dump(reduce_train, f)\nwith open('reduce_test.pickle', 'wb') as f:\n    pickle.dump(reduce_test, f)","88a3689e":"features = reduce_train.loc[(reduce_train.sum(axis=1) != 0), (reduce_train.sum(axis=0) != 0)].columns # delete useless columns\nfeatures = [x for x in features if x not in ['accuracy_group', 'installation_id']] + ['acc_' + title for title in assess_titles]","aa4333d9":"to_exclude = ['10_duration_goodrounds_mean_sum_259200',\n'10_duration_goodrounds_median_mean_259200',\n'10_duration_goodrounds_median_median_259200',\n'10_duration_goodrounds_median_sum_259200',\n'10_false_attempts_median_259200',\n'10_false_attempts_median_8640000',\n'10_false_attempts_sum_259200',\n'10_first_goodattemp__median_259200',\n'10_first_goodattemp__median_8640000',\n'10_first_goodattemp__sum_259200',\n'10_first_goodattemp__sum_8640000',\n'10_max_round_max_259200',\n'10_max_round_max_8640000',\n'10_max_round_mean_259200',\n'10_max_round_mean_8640000',\n'10_max_round_median_259200',\n'10_max_round_median_8640000',\n'10_max_round_sum_259200',\n'10_max_round_sum_8640000',\n'10_misses_goodrounds_median_max_259200',\n'10_misses_goodrounds_median_mean_259200',\n'10_misses_goodrounds_median_median_259200',\n'10_misses_goodrounds_median_median_8640000',\n'10_misses_goodrounds_median_sum_259200',\n'10_misses_goodrounds_median_sum_8640000',\n'10_misses_goodrounds_sum_median_259200',\n'10_misses_goodrounds_sum_sum_259200',\n'10_misses_goodrounds_sum_sum_8640000',\n'10_num_goodrounds_max_259200',\n'10_num_goodrounds_max_8640000',\n'10_num_goodrounds_median_259200',\n'10_num_goodrounds_median_8640000',\n'10_num_goodrounds_sum_259200',\n'10_num_goodrounds_sum_8640000',\n'10_true_attempts_median_259200',\n'10_true_attempts_median_8640000',\n'10_true_attempts_sum_259200',\n'10_true_attempts_sum_8640000',\n'11_duration_goodrounds_mean_max_259200',\n'11_duration_goodrounds_mean_max_8640000',\n'11_duration_goodrounds_mean_mean_259200',\n'11_duration_goodrounds_mean_mean_8640000',\n'11_duration_goodrounds_mean_median_259200',\n'11_duration_goodrounds_mean_median_8640000',\n'11_duration_goodrounds_mean_sum_259200',\n'11_duration_goodrounds_mean_sum_8640000',\n'11_duration_goodrounds_median_max_259200',\n'11_duration_goodrounds_median_max_8640000',\n'11_duration_goodrounds_median_mean_259200',\n'11_duration_goodrounds_median_mean_8640000',\n'11_duration_goodrounds_median_median_259200',\n'11_duration_goodrounds_median_median_8640000',\n'11_duration_goodrounds_median_sum_259200',\n'11_duration_goodrounds_median_sum_8640000',\n'11_max_round_max_259200',\n'11_max_round_max_8640000',\n'11_max_round_mean_259200',\n'11_max_round_mean_8640000',\n'11_max_round_median_259200',\n'11_max_round_median_8640000',\n'11_max_round_sum_259200',\n'11_max_round_sum_8640000',\n'11_misses_goodrounds_median_max_259200',\n'11_misses_goodrounds_median_max_8640000',\n'11_misses_goodrounds_median_mean_259200',\n'11_misses_goodrounds_median_mean_8640000',\n'11_misses_goodrounds_median_median_259200',\n'11_misses_goodrounds_median_median_8640000',\n'11_misses_goodrounds_median_sum_259200',\n'11_misses_goodrounds_median_sum_8640000',\n'11_misses_goodrounds_sum_max_259200',\n'11_misses_goodrounds_sum_max_8640000',\n'11_misses_goodrounds_sum_mean_259200',\n'11_misses_goodrounds_sum_mean_8640000',\n'11_misses_goodrounds_sum_median_259200',\n'11_misses_goodrounds_sum_median_8640000',\n'11_misses_goodrounds_sum_sum_259200',\n'11_misses_goodrounds_sum_sum_8640000',\n'11_num_goodrounds_max_259200',\n'11_num_goodrounds_max_8640000',\n'11_num_goodrounds_mean_259200',\n'11_num_goodrounds_mean_8640000',\n'11_num_goodrounds_median_259200',\n'11_num_goodrounds_median_8640000',\n'11_num_goodrounds_sum_259200',\n'11_num_goodrounds_sum_8640000',\n'12_first_goodattemp__sum_259200',\n'12_max_round_sum_259200',\n'12_num_goodrounds_median_259200',\n'12_num_goodrounds_median_8640000',\n'17_first_goodattemp__median_259200',\n'17_first_goodattemp__median_8640000',\n'17_first_goodattemp__sum_259200',\n'17_first_goodattemp__sum_8640000',\n'17_max_round_median_259200',\n'17_max_round_sum_259200',\n'17_max_round_sum_8640000',\n'17_misses_goodrounds_median_median_259200',\n'17_misses_goodrounds_median_median_8640000',\n'17_misses_goodrounds_median_sum_259200',\n'17_misses_goodrounds_median_sum_8640000',\n'17_misses_goodrounds_sum_sum_259200',\n'17_num_goodrounds_max_259200',\n'17_num_goodrounds_median_259200',\n'17_num_goodrounds_median_8640000',\n'17_num_goodrounds_sum_259200',\n'17_num_goodrounds_sum_8640000',\n'18_first_goodattemp__mean_259200',\n'18_first_goodattemp__mean_8640000',\n'18_first_goodattemp__median_259200',\n'18_first_goodattemp__median_8640000',\n'18_first_goodattemp__sum_259200',\n'18_first_goodattemp__sum_8640000',\n'18_max_round_sum_259200',\n'18_max_round_sum_8640000',\n'18_misses_goodrounds_median_max_259200',\n'18_misses_goodrounds_median_sum_259200',\n'18_misses_goodrounds_median_sum_8640000',\n'18_misses_goodrounds_sum_sum_259200',\n'18_num_goodrounds_median_259200',\n'18_num_goodrounds_median_8640000',\n'18_num_goodrounds_sum_259200',\n'19_first_goodattemp__median_259200',\n'19_first_goodattemp__sum_259200',\n'19_first_goodattemp__sum_8640000',\n'19_max_round_sum_259200',\n'19_misses_goodrounds_median_max_259200',\n'19_misses_goodrounds_median_median_259200',\n'19_misses_goodrounds_median_sum_259200',\n'19_misses_goodrounds_median_sum_8640000',\n'19_misses_goodrounds_sum_median_259200',\n'19_misses_goodrounds_sum_sum_259200',\n'19_num_goodrounds_median_259200',\n'19_num_goodrounds_median_8640000',\n'19_num_goodrounds_sum_259200',\n'1_duration_goodrounds_mean_sum_259200',\n'1_duration_goodrounds_median_sum_259200',\n'1_first_goodattemp__mean_259200',\n'1_first_goodattemp__median_259200',\n'1_first_goodattemp__sum_259200',\n'1_first_goodattemp__sum_8640000',\n'1_max_round_sum_259200',\n'1_max_round_sum_8640000',\n'1_misses_goodrounds_median_mean_259200',\n'1_misses_goodrounds_median_median_259200',\n'1_misses_goodrounds_median_median_8640000',\n'1_misses_goodrounds_median_sum_259200',\n'1_misses_goodrounds_median_sum_8640000',\n'1_misses_goodrounds_sum_sum_259200',\n'1_misses_goodrounds_sum_sum_8640000',\n'1_num_attempts_median_259200',\n'1_num_attempts_sum_259200',\n'1_num_goodrounds_max_259200',\n'1_num_goodrounds_max_8640000',\n'1_num_goodrounds_median_259200',\n'1_num_goodrounds_median_8640000',\n'1_num_goodrounds_sum_259200',\n'1_num_goodrounds_sum_8640000',\n'20_duration_goodrounds_mean_max_259200',\n'20_duration_goodrounds_mean_max_8640000',\n'20_duration_goodrounds_mean_mean_259200',\n'20_duration_goodrounds_mean_mean_8640000',\n'20_duration_goodrounds_mean_median_259200',\n'20_duration_goodrounds_mean_median_8640000',\n'20_duration_goodrounds_mean_sum_259200',\n'20_duration_goodrounds_mean_sum_8640000',\n'20_duration_goodrounds_median_max_259200',\n'20_duration_goodrounds_median_max_8640000',\n'20_duration_goodrounds_median_mean_259200',\n'20_duration_goodrounds_median_mean_8640000',\n'20_duration_goodrounds_median_median_259200',\n'20_duration_goodrounds_median_median_8640000',\n'20_duration_goodrounds_median_sum_259200',\n'20_duration_goodrounds_median_sum_8640000',\n'20_max_round_max_259200',\n'20_max_round_max_8640000',\n'20_max_round_mean_259200',\n'20_max_round_mean_8640000',\n'20_max_round_median_259200',\n'20_max_round_median_8640000',\n'20_max_round_sum_259200',\n'20_max_round_sum_8640000',\n'20_misses_goodrounds_median_max_259200',\n'20_misses_goodrounds_median_max_8640000',\n'20_misses_goodrounds_median_mean_259200',\n'20_misses_goodrounds_median_mean_8640000',\n'20_misses_goodrounds_median_median_259200',\n'20_misses_goodrounds_median_median_8640000',\n'20_misses_goodrounds_median_sum_259200',\n'20_misses_goodrounds_median_sum_8640000',\n'20_misses_goodrounds_sum_max_259200',\n'20_misses_goodrounds_sum_max_8640000',\n'20_misses_goodrounds_sum_mean_259200',\n'20_misses_goodrounds_sum_mean_8640000',\n'20_misses_goodrounds_sum_median_259200',\n'20_misses_goodrounds_sum_median_8640000',\n'20_misses_goodrounds_sum_sum_259200',\n'20_misses_goodrounds_sum_sum_8640000',\n'20_num_goodrounds_max_259200',\n'20_num_goodrounds_max_8640000',\n'20_num_goodrounds_mean_259200',\n'20_num_goodrounds_mean_8640000',\n'20_num_goodrounds_median_259200',\n'20_num_goodrounds_median_8640000',\n'20_num_goodrounds_sum_259200',\n'20_num_goodrounds_sum_8640000',\n'21_duration_goodrounds_mean_max_259200',\n'21_duration_goodrounds_mean_max_8640000',\n'21_duration_goodrounds_mean_mean_259200',\n'21_duration_goodrounds_mean_mean_8640000',\n'21_duration_goodrounds_mean_median_259200',\n'21_duration_goodrounds_mean_median_8640000',\n'21_duration_goodrounds_mean_sum_259200',\n'21_duration_goodrounds_mean_sum_8640000',\n'21_duration_goodrounds_median_max_259200',\n'21_duration_goodrounds_median_max_8640000',\n'21_duration_goodrounds_median_mean_259200',\n'21_duration_goodrounds_median_mean_8640000',\n'21_duration_goodrounds_median_median_259200',\n'21_duration_goodrounds_median_median_8640000',\n'21_duration_goodrounds_median_sum_259200',\n'21_duration_goodrounds_median_sum_8640000',\n'21_max_round_max_259200',\n'21_max_round_max_8640000',\n'21_max_round_mean_259200',\n'21_max_round_mean_8640000',\n'21_max_round_median_259200',\n'21_max_round_median_8640000',\n'21_max_round_sum_259200',\n'21_max_round_sum_8640000',\n'21_misses_goodrounds_median_max_259200',\n'21_misses_goodrounds_median_max_8640000',\n'21_misses_goodrounds_median_mean_259200',\n'21_misses_goodrounds_median_mean_8640000',\n'21_misses_goodrounds_median_median_259200',\n'21_misses_goodrounds_median_median_8640000',\n'21_misses_goodrounds_median_sum_259200',\n'21_misses_goodrounds_median_sum_8640000',\n'21_misses_goodrounds_sum_max_259200',\n'21_misses_goodrounds_sum_max_8640000',\n'21_misses_goodrounds_sum_mean_259200',\n'21_misses_goodrounds_sum_mean_8640000',\n'21_misses_goodrounds_sum_median_259200',\n'21_misses_goodrounds_sum_median_8640000',\n'21_misses_goodrounds_sum_sum_259200',\n'21_misses_goodrounds_sum_sum_8640000',\n'21_num_goodrounds_max_259200',\n'21_num_goodrounds_max_8640000',\n'21_num_goodrounds_mean_259200',\n'21_num_goodrounds_mean_8640000',\n'21_num_goodrounds_median_259200',\n'21_num_goodrounds_median_8640000',\n'21_num_goodrounds_sum_259200',\n'21_num_goodrounds_sum_8640000',\n'22_duration_goodrounds_mean_max_259200',\n'22_duration_goodrounds_mean_max_8640000',\n'22_duration_goodrounds_mean_mean_259200',\n'22_duration_goodrounds_mean_mean_8640000',\n'22_duration_goodrounds_mean_median_259200',\n'22_duration_goodrounds_mean_median_8640000',\n'22_duration_goodrounds_mean_sum_259200',\n'22_duration_goodrounds_mean_sum_8640000',\n'22_duration_goodrounds_median_max_259200',\n'22_duration_goodrounds_median_max_8640000',\n'22_duration_goodrounds_median_mean_259200',\n'22_duration_goodrounds_median_mean_8640000',\n'22_duration_goodrounds_median_median_259200',\n'22_duration_goodrounds_median_median_8640000',\n'22_duration_goodrounds_median_sum_259200',\n'22_duration_goodrounds_median_sum_8640000',\n'22_max_round_max_259200',\n'22_max_round_max_8640000',\n'22_max_round_mean_259200',\n'22_max_round_mean_8640000',\n'22_max_round_median_259200',\n'22_max_round_median_8640000',\n'22_max_round_sum_259200',\n'22_max_round_sum_8640000',\n'22_misses_goodrounds_median_max_259200',\n'22_misses_goodrounds_median_max_8640000',\n'22_misses_goodrounds_median_mean_259200',\n'22_misses_goodrounds_median_mean_8640000',\n'22_misses_goodrounds_median_median_259200',\n'22_misses_goodrounds_median_median_8640000',\n'22_misses_goodrounds_median_sum_259200',\n'22_misses_goodrounds_median_sum_8640000',\n'22_misses_goodrounds_sum_max_259200',\n'22_misses_goodrounds_sum_max_8640000',\n'22_misses_goodrounds_sum_mean_259200',\n'22_misses_goodrounds_sum_mean_8640000',\n'22_misses_goodrounds_sum_median_259200',\n'22_misses_goodrounds_sum_median_8640000',\n'22_misses_goodrounds_sum_sum_259200',\n'22_misses_goodrounds_sum_sum_8640000',\n'22_num_goodrounds_max_259200',\n'22_num_goodrounds_max_8640000',\n'22_num_goodrounds_mean_259200',\n'22_num_goodrounds_mean_8640000',\n'22_num_goodrounds_median_259200',\n'22_num_goodrounds_median_8640000',\n'22_num_goodrounds_sum_259200',\n'22_num_goodrounds_sum_8640000',\n'23_first_goodattemp__median_259200',\n'23_first_goodattemp__median_8640000',\n'23_first_goodattemp__sum_259200',\n'23_first_goodattemp__sum_8640000',\n'23_max_round_sum_259200',\n'23_max_round_sum_8640000',\n'23_misses_goodrounds_median_sum_259200',\n'23_num_goodrounds_max_259200',\n'23_num_goodrounds_median_259200',\n'23_num_goodrounds_median_8640000',\n'23_num_goodrounds_sum_259200',\n'26_first_goodattemp__median_259200',\n'26_first_goodattemp__sum_259200',\n'26_first_goodattemp__sum_8640000',\n'26_max_round_max_259200',\n'26_max_round_sum_259200',\n'26_max_round_sum_8640000',\n'26_misses_goodrounds_median_max_259200',\n'26_misses_goodrounds_median_median_259200',\n'26_misses_goodrounds_median_sum_259200',\n'26_misses_goodrounds_median_sum_8640000',\n'26_misses_goodrounds_sum_sum_259200',\n'26_num_attempts_sum_259200',\n'26_num_goodrounds_median_259200',\n'26_num_goodrounds_median_8640000',\n'26_num_goodrounds_sum_259200',\n'2_first_goodattemp__median_259200',\n'2_first_goodattemp__sum_259200',\n'2_first_goodattemp__sum_8640000',\n'2_max_round_sum_259200',\n'2_misses_goodrounds_median_sum_259200',\n'2_num_goodrounds_median_259200',\n'2_num_goodrounds_median_8640000',\n'2_num_goodrounds_sum_259200',\n'30_false_attempts_median_259200',\n'30_false_attempts_median_8640000',\n'30_false_attempts_sum_259200',\n'30_first_goodattemp__mean_259200',\n'30_first_goodattemp__median_259200',\n'30_first_goodattemp__median_8640000',\n'30_first_goodattemp__sum_259200',\n'30_first_goodattemp__sum_8640000',\n'30_max_round_max_259200',\n'30_max_round_max_8640000',\n'30_max_round_mean_259200',\n'30_max_round_mean_8640000',\n'30_max_round_median_259200',\n'30_max_round_median_8640000',\n'30_max_round_sum_259200',\n'30_max_round_sum_8640000',\n'30_misses_goodrounds_median_max_259200',\n'30_misses_goodrounds_median_sum_259200',\n'30_misses_goodrounds_median_sum_8640000',\n'30_misses_goodrounds_sum_sum_259200',\n'30_misses_goodrounds_sum_sum_8640000',\n'30_num_goodrounds_max_259200',\n'30_num_goodrounds_max_8640000',\n'30_num_goodrounds_median_259200',\n'30_num_goodrounds_median_8640000',\n'30_num_goodrounds_sum_259200',\n'30_num_goodrounds_sum_8640000',\n'30_true_attempts_median_259200',\n'30_true_attempts_median_8640000',\n'30_true_attempts_sum_259200',\n'30_true_attempts_sum_8640000',\n'32_first_goodattemp__median_259200',\n'32_first_goodattemp__sum_259200',\n'32_first_goodattemp__sum_8640000',\n'32_max_round_max_259200',\n'32_max_round_sum_259200',\n'32_max_round_sum_8640000',\n'32_misses_goodrounds_median_max_259200',\n'32_misses_goodrounds_median_sum_259200',\n'32_misses_goodrounds_median_sum_8640000',\n'32_misses_goodrounds_sum_sum_259200',\n'32_num_goodrounds_max_259200',\n'32_num_goodrounds_median_259200',\n'32_num_goodrounds_median_8640000',\n'35_duration_goodrounds_mean_max_259200',\n'35_duration_goodrounds_mean_max_8640000',\n'35_duration_goodrounds_mean_mean_259200',\n'35_duration_goodrounds_mean_mean_8640000',\n'35_duration_goodrounds_mean_median_259200',\n'35_duration_goodrounds_mean_median_8640000',\n'35_duration_goodrounds_mean_sum_259200',\n'35_duration_goodrounds_mean_sum_8640000',\n'35_duration_goodrounds_median_max_259200',\n'35_duration_goodrounds_median_max_8640000',\n'35_duration_goodrounds_median_mean_259200',\n'35_duration_goodrounds_median_mean_8640000',\n'35_duration_goodrounds_median_median_259200',\n'35_duration_goodrounds_median_median_8640000',\n'35_duration_goodrounds_median_sum_259200',\n'35_duration_goodrounds_median_sum_8640000',\n'35_max_round_max_259200',\n'35_max_round_max_8640000',\n'35_max_round_mean_259200',\n'35_max_round_mean_8640000',\n'35_max_round_median_259200',\n'35_max_round_median_8640000',\n'35_max_round_sum_259200',\n'35_max_round_sum_8640000',\n'35_misses_goodrounds_median_max_259200',\n'35_misses_goodrounds_median_max_8640000',\n'35_misses_goodrounds_median_mean_259200',\n'35_misses_goodrounds_median_mean_8640000',\n'35_misses_goodrounds_median_median_259200',\n'35_misses_goodrounds_median_median_8640000',\n'35_misses_goodrounds_median_sum_259200',\n'35_misses_goodrounds_median_sum_8640000',\n'35_misses_goodrounds_sum_max_259200',\n'35_misses_goodrounds_sum_max_8640000',\n'35_misses_goodrounds_sum_mean_259200',\n'35_misses_goodrounds_sum_mean_8640000',\n'35_misses_goodrounds_sum_median_259200',\n'35_misses_goodrounds_sum_median_8640000',\n'35_misses_goodrounds_sum_sum_259200',\n'35_misses_goodrounds_sum_sum_8640000',\n'35_num_goodrounds_max_259200',\n'35_num_goodrounds_max_8640000',\n'35_num_goodrounds_mean_259200',\n'35_num_goodrounds_mean_8640000',\n'35_num_goodrounds_median_259200',\n'35_num_goodrounds_median_8640000',\n'35_num_goodrounds_sum_259200',\n'35_num_goodrounds_sum_8640000',\n'36_first_goodattemp__sum_259200',\n'36_max_round_sum_259200',\n'36_misses_goodrounds_median_max_259200',\n'36_misses_goodrounds_median_max_8640000',\n'36_misses_goodrounds_median_mean_259200',\n'36_misses_goodrounds_median_median_259200',\n'36_misses_goodrounds_median_median_8640000',\n'36_misses_goodrounds_median_sum_259200',\n'36_misses_goodrounds_median_sum_8640000',\n'36_misses_goodrounds_sum_sum_259200',\n'36_num_goodrounds_median_259200',\n'36_num_goodrounds_median_8640000',\n'4080_259200',\n'4080_8640000',\n'42_duration_goodrounds_mean_max_259200',\n'42_duration_goodrounds_mean_max_8640000',\n'42_duration_goodrounds_mean_mean_259200',\n'42_duration_goodrounds_mean_mean_8640000',\n'42_duration_goodrounds_mean_median_259200',\n'42_duration_goodrounds_mean_median_8640000',\n'42_duration_goodrounds_mean_sum_259200',\n'42_duration_goodrounds_mean_sum_8640000',\n'42_duration_goodrounds_median_max_259200',\n'42_duration_goodrounds_median_max_8640000',\n'42_duration_goodrounds_median_mean_259200',\n'42_duration_goodrounds_median_mean_8640000',\n'42_duration_goodrounds_median_median_259200',\n'42_duration_goodrounds_median_median_8640000',\n'42_duration_goodrounds_median_sum_259200',\n'42_duration_goodrounds_median_sum_8640000',\n'42_max_round_max_259200',\n'42_max_round_max_8640000',\n'42_max_round_mean_259200',\n'42_max_round_mean_8640000',\n'42_max_round_median_259200',\n'42_max_round_median_8640000',\n'42_max_round_sum_259200',\n'42_max_round_sum_8640000',\n'42_misses_goodrounds_median_max_259200',\n'42_misses_goodrounds_median_max_8640000',\n'42_misses_goodrounds_median_mean_259200',\n'42_misses_goodrounds_median_mean_8640000',\n'42_misses_goodrounds_median_median_259200',\n'42_misses_goodrounds_median_median_8640000',\n'42_misses_goodrounds_median_sum_259200',\n'42_misses_goodrounds_median_sum_8640000',\n'42_misses_goodrounds_sum_max_259200',\n'42_misses_goodrounds_sum_max_8640000',\n'42_misses_goodrounds_sum_mean_259200',\n'42_misses_goodrounds_sum_mean_8640000',\n'42_misses_goodrounds_sum_median_259200',\n'42_misses_goodrounds_sum_median_8640000',\n'42_misses_goodrounds_sum_sum_259200',\n'42_misses_goodrounds_sum_sum_8640000',\n'42_num_goodrounds_max_259200',\n'42_num_goodrounds_max_8640000',\n'42_num_goodrounds_mean_259200',\n'42_num_goodrounds_mean_8640000',\n'42_num_goodrounds_median_259200',\n'42_num_goodrounds_median_8640000',\n'42_num_goodrounds_sum_259200',\n'42_num_goodrounds_sum_8640000',\n'4_false_attempts_median_259200',\n'4_false_attempts_median_8640000',\n'4_false_attempts_sum_259200',\n'4_first_goodattemp__mean_259200',\n'4_first_goodattemp__median_259200',\n'4_first_goodattemp__median_8640000',\n'4_first_goodattemp__sum_259200',\n'4_first_goodattemp__sum_8640000',\n'4_max_round_max_259200',\n'4_max_round_max_8640000',\n'4_max_round_mean_259200',\n'4_max_round_mean_8640000',\n'4_max_round_median_259200',\n'4_max_round_median_8640000',\n'4_max_round_sum_259200',\n'4_max_round_sum_8640000',\n'4_misses_goodrounds_median_sum_259200',\n'4_misses_goodrounds_median_sum_8640000',\n'4_misses_goodrounds_sum_median_259200',\n'4_misses_goodrounds_sum_sum_8640000',\n'4_num_goodrounds_max_259200',\n'4_num_goodrounds_max_8640000',\n'4_num_goodrounds_median_259200',\n'4_num_goodrounds_median_8640000',\n'4_true_attempts_median_259200',\n'4_true_attempts_median_8640000',\n'4_true_attempts_sum_259200',\n'4_true_attempts_sum_8640000',\n'5_max_round_sum_259200',\n'5_misses_goodrounds_median_max_259200',\n'5_misses_goodrounds_median_max_8640000',\n'5_misses_goodrounds_median_mean_259200',\n'5_misses_goodrounds_median_mean_8640000',\n'5_misses_goodrounds_median_median_259200',\n'5_misses_goodrounds_median_median_8640000',\n'5_misses_goodrounds_median_sum_259200',\n'5_misses_goodrounds_median_sum_8640000',\n'5_misses_goodrounds_sum_max_259200',\n'5_misses_goodrounds_sum_max_8640000',\n'5_misses_goodrounds_sum_mean_259200',\n'5_misses_goodrounds_sum_mean_8640000',\n'5_misses_goodrounds_sum_median_259200',\n'5_misses_goodrounds_sum_median_8640000',\n'5_misses_goodrounds_sum_sum_259200',\n'5_misses_goodrounds_sum_sum_8640000',\n'5_num_goodrounds_median_259200',\n'5_num_goodrounds_median_8640000',\n'5_num_goodrounds_sum_259200',\n'6_first_goodattemp__median_259200',\n'6_first_goodattemp__median_8640000',\n'6_first_goodattemp__sum_259200',\n'6_first_goodattemp__sum_8640000',\n'6_max_round_median_259200',\n'6_max_round_sum_259200',\n'6_max_round_sum_8640000',\n'6_misses_goodrounds_median_max_259200',\n'6_misses_goodrounds_median_median_259200',\n'6_misses_goodrounds_median_sum_259200',\n'6_misses_goodrounds_sum_max_259200',\n'6_misses_goodrounds_sum_median_259200',\n'6_misses_goodrounds_sum_sum_259200',\n'6_num_goodrounds_max_259200',\n'6_num_goodrounds_max_8640000',\n'6_num_goodrounds_median_259200',\n'6_num_goodrounds_median_8640000',\n'6_num_goodrounds_sum_259200',\n'7_duration_goodrounds_mean_max_259200',\n'7_duration_goodrounds_mean_max_8640000',\n'7_duration_goodrounds_mean_mean_259200',\n'7_duration_goodrounds_mean_mean_8640000',\n'7_duration_goodrounds_mean_median_259200',\n'7_duration_goodrounds_mean_median_8640000',\n'7_duration_goodrounds_mean_sum_259200',\n'7_duration_goodrounds_mean_sum_8640000',\n'7_duration_goodrounds_median_max_259200',\n'7_duration_goodrounds_median_max_8640000',\n'7_duration_goodrounds_median_mean_259200',\n'7_duration_goodrounds_median_mean_8640000',\n'7_duration_goodrounds_median_median_259200',\n'7_duration_goodrounds_median_median_8640000',\n'7_duration_goodrounds_median_sum_259200',\n'7_duration_goodrounds_median_sum_8640000',\n'7_max_round_max_259200',\n'7_max_round_max_8640000',\n'7_max_round_mean_259200',\n'7_max_round_mean_8640000',\n'7_max_round_median_259200',\n'7_max_round_median_8640000',\n'7_max_round_sum_259200',\n'7_max_round_sum_8640000',\n'7_misses_goodrounds_median_max_259200',\n'7_misses_goodrounds_median_max_8640000',\n'7_misses_goodrounds_median_mean_259200',\n'7_misses_goodrounds_median_mean_8640000',\n'7_misses_goodrounds_median_median_259200',\n'7_misses_goodrounds_median_median_8640000',\n'7_misses_goodrounds_median_sum_259200',\n'7_misses_goodrounds_median_sum_8640000',\n'7_misses_goodrounds_sum_max_259200',\n'7_misses_goodrounds_sum_max_8640000',\n'7_misses_goodrounds_sum_mean_259200',\n'7_misses_goodrounds_sum_mean_8640000',\n'7_misses_goodrounds_sum_median_259200',\n'7_misses_goodrounds_sum_median_8640000',\n'7_misses_goodrounds_sum_sum_259200',\n'7_misses_goodrounds_sum_sum_8640000',\n'7_num_goodrounds_max_259200',\n'7_num_goodrounds_max_8640000',\n'7_num_goodrounds_mean_259200',\n'7_num_goodrounds_mean_8640000',\n'7_num_goodrounds_median_259200',\n'7_num_goodrounds_median_8640000',\n'7_num_goodrounds_sum_259200',\n'7_num_goodrounds_sum_8640000',\n'7ad3efc6_259200',\n'8_false_attempts_median_259200',\n'8_false_attempts_median_8640000',\n'8_false_attempts_sum_259200',\n'8_first_goodattemp__median_259200',\n'8_first_goodattemp__median_8640000',\n'8_first_goodattemp__sum_259200',\n'8_max_round_max_259200',\n'8_max_round_max_8640000',\n'8_max_round_mean_259200',\n'8_max_round_mean_8640000',\n'8_max_round_median_259200',\n'8_max_round_median_8640000',\n'8_max_round_sum_259200',\n'8_max_round_sum_8640000',\n'8_misses_goodrounds_median_max_259200',\n'8_misses_goodrounds_median_sum_259200',\n'8_misses_goodrounds_median_sum_8640000',\n'8_misses_goodrounds_sum_sum_259200',\n'8_misses_goodrounds_sum_sum_8640000',\n'8_num_goodrounds_max_259200',\n'8_num_goodrounds_max_8640000',\n'8_num_goodrounds_median_259200',\n'8_num_goodrounds_median_8640000',\n'8_num_goodrounds_sum_259200',\n'8_true_attempts_median_259200',\n'8_true_attempts_median_8640000',\n'8_true_attempts_sum_259200',\n'9_false_attempts_median_259200',\n'9_false_attempts_median_8640000',\n'9_false_attempts_sum_259200',\n'9_first_goodattemp__median_259200',\n'9_first_goodattemp__sum_259200',\n'9_max_round_max_259200',\n'9_max_round_max_8640000',\n'9_max_round_median_259200',\n'9_misses_goodrounds_median_sum_259200',\n'9_misses_goodrounds_sum_sum_259200',\n'9_num_goodrounds_max_259200',\n'9_num_goodrounds_max_8640000',\n'9_num_goodrounds_median_259200',\n'9_num_goodrounds_median_8640000',\n'9_true_attempts_median_259200',\n'9_true_attempts_median_8640000',\n'9_true_attempts_sum_8640000',\n'activity_10_max_259200',\n'activity_10_median_259200',\n'activity_30_max_259200',\n'activity_4_max_8640000',\n'activity_5_max_259200',\n'activity_5_max_8640000',\n'activity_5_median_259200',\n'activity_5_median_8640000',\n'got_history_259200',\n'got_history_8640000',\n'relevant_activity_misses_goodrounds_median_8640000__mean',\n'2_num_goodrounds_max_259200',\n'4_num_of_misses_total_misses_259200',\n'6_misses_goodrounds_sum_sum_8640000',\n'12_first_goodattemp__median_259200',\n'6_max_round_max_259200',\n'9_max_round_median_8640000',\n'12_num_goodrounds_max_259200',\n'32_num_attempts_sum_259200',\n'8_num_goodrounds_sum_8640000',\n'17_misses_goodrounds_median_max_259200',\n'2_misses_goodrounds_median_median_259200',\n'5_max_round_sum_8640000',\n'1_num_attempts_sum_8640000',\n'36_num_goodrounds_max_259200',\n'19_max_round_sum_8640000',\n'8_misses_goodrounds_median_mean_259200',\n'36_first_goodattemp__median_259200',\n'6_num_attempts_sum_259200',\n'17_misses_goodrounds_median_max_8640000',\n'18_misses_goodrounds_median_median_259200',\n'32_num_goodrounds_sum_259200',\n'4_num_goodrounds_sum_8640000',\n'4_duration_goodrounds_median_sum_259200',\n'23_max_round_max_259200',\n'2_num_attempts_sum_259200',\n'9_max_round_sum_259200',\n'10_duration_goodrounds_median_max_259200',\n'26_misses_goodrounds_sum_sum_8640000',\n'19_num_goodrounds_max_8640000',\n'19_misses_goodrounds_median_mean_259200',\n'7ad3efc6_8640000',\n'8_misses_goodrounds_median_max_8640000',\n'4_num_attempts_sum_259200',\n'4_misses_goodrounds_sum_max_259200',\n'19_max_round_max_259200',\n'36_num_goodrounds_sum_259200',\n'23_num_attempts_sum_259200',\n'9_first_goodattemp__median_8640000',\n'10_share_cor_sum_259200',\n'9_first_goodattemp__sum_8640000',\n'9_true_attempts_sum_259200',\n'1_first_goodattemp__median_8640000',\n'32_max_round_median_259200',\n'10_num_goodrounds_mean_259200',\n'4_duration_goodrounds_median_sum_8640000',\n'17_num_goodrounds_max_8640000',\n'2_max_round_sum_8640000',\n'26_duration_goodrounds_median_sum_259200',\n'6_first_goodattemp__mean_259200',\n'12_misses_goodrounds_median_sum_259200',\n'1_share_cor_sum_8640000',\n'32_misses_goodrounds_sum_median_259200',\n'26_misses_goodrounds_sum_max_259200',\n'8_first_goodattemp__sum_8640000',\n'1_misses_goodrounds_sum_median_8640000',\n'2_max_round_median_259200',\n'32_misses_goodrounds_sum_max_259200',\n'19_duration_goodrounds_median_sum_259200',\n'8_true_attempts_sum_8640000',\n'1_max_round_max_8640000',\n'6_num_goodrounds_sum_8640000',\n'4_misses_goodrounds_sum_sum_259200',\n'2_misses_goodrounds_sum_sum_259200',\n'19_num_goodrounds_max_259200',\n'9_accuracy_in_Ass_median_259200',\n'10_first_goodattemp__mean_259200',\n'19_share_cor_sum_259200',\n'10_misses_goodrounds_sum_mean_259200',\n'18_num_goodrounds_sum_8640000',\n'17_first_goodattemp__mean_259200',\n'17_max_round_mean_259200',\n'30_misses_goodrounds_median_max_8640000',\n'19_duration_goodrounds_mean_sum_259200',\n'32_num_goodrounds_max_8640000',\n'36_num_attempts_sum_259200',\n'6_misses_goodrounds_median_sum_8640000',\n'activity_4_median_8640000',\n'8_misses_goodrounds_median_median_259200',\n'10_misses_goodrounds_sum_median_8640000',\n'1_max_round_max_259200',\n'532a2afb_259200',\n'26_num_goodrounds_sum_8640000',\n'2_max_round_max_259200',\n'12_num_goodrounds_sum_259200',\n'9_max_round_sum_8640000',\n'10_misses_goodrounds_median_max_8640000',\n'32_misses_goodrounds_median_max_8640000',\n'19_max_round_median_259200',\n'10_misses_goodrounds_sum_max_259200',\n'3ccd3f02_259200',\n'a1bbe385_259200',\n'acc_Chest_Sorter__Assessment__259200',\n'6_max_round_mean_259200',\n'26_num_goodrounds_max_259200',\n'19_misses_goodrounds_sum_max_259200',\n'4_duration_goodrounds_median_max_259200',\n'10_misses_goodrounds_median_mean_8640000',\n'17_max_round_max_259200',\n'17_share_cor_sum_259200',\n'23_max_round_median_259200',\n'26_misses_goodrounds_median_mean_259200',\n'30_misses_goodrounds_median_median_259200',\n'19_num_goodrounds_sum_8640000',\n'32_num_of_misses_total_misses_259200',\n'10_duration_goodrounds_mean_median_259200',\n'26_first_goodattemp__median_8640000',\n'6_max_round_max_8640000',\n'23_misses_goodrounds_sum_sum_259200',\n'2040_259200',\n'17_duration_goodrounds_median_sum_259200',\n'2_first_goodattemp__median_8640000',\n'Crystals_Rule_259200',\n'f806dc10_259200',\n'8_misses_goodrounds_median_median_8640000',\n'1_share_cor_sum_259200',\n'8_misses_goodrounds_sum_max_259200',\n'9_num_attempts_sum_259200',\n'26_num_goodrounds_max_8640000',\n'26_duration_goodrounds_mean_sum_259200',\n'10_share_cor_median_259200',\n'36_max_round_sum_8640000',\n'18_misses_goodrounds_sum_sum_8640000',\n'36_first_goodattemp__median_8640000',\n'3dcdda7f_259200',\n'4_duration_goodrounds_mean_sum_259200',\n'10_duration_goodrounds_mean_mean_259200',\n'30_duration_goodrounds_median_sum_259200',\n'4_num_goodrounds_sum_259200',\n'b1d5101d_259200',\n'17_misses_goodrounds_sum_sum_8640000',\n'activity_30_median_259200',\n'4d6737eb_259200',\n'30_misses_goodrounds_sum_max_259200',\n'12_max_round_sum_8640000',\n'1_misses_goodrounds_median_max_259200',\n'18_misses_goodrounds_median_mean_259200',\n'8_share_cor_median_259200',\n'6_duration_goodrounds_median_sum_259200',\n'26_max_round_max_8640000',\n'23_num_goodrounds_max_8640000',\n'10_num_of_misses_total_misses_259200',\n'activity_4_max_259200',\n'4_false_attempts_sum_8640000',\n'26_misses_goodrounds_sum_median_259200',\n'36_first_goodattemp__sum_8640000',\n'23_first_goodattemp__mean_259200',\n'36_num_goodrounds_max_8640000',\n'26_misses_goodrounds_median_max_8640000',\n'8_misses_goodrounds_median_mean_8640000',\n'9_max_round_mean_259200',\n'36_misses_goodrounds_median_mean_8640000',\n'26_misses_goodrounds_median_median_8640000',\n'18_misses_goodrounds_sum_max_259200',\n'1_misses_goodrounds_sum_median_259200',\n'26_num_attempts_median_259200',\n'4_misses_goodrounds_sum_mean_259200',\n'bdf49a58_259200',\n'6_duration_goodrounds_mean_sum_259200',\n'f7e47413_259200',\n'23_num_goodrounds_sum_8640000',\n'26_first_goodattemp__mean_259200',\n'32_misses_goodrounds_median_median_8640000',\n'26_duration_goodrounds_mean_mean_259200',\n'30_misses_goodrounds_median_median_8640000',\n'8_num_attempts_sum_259200',\n'activity_4_median_259200',\n'18_num_attempts_sum_259200',\n'6_misses_goodrounds_median_mean_259200',\n'a29c5338_259200',\n'5c3d2b2f_259200',\n'30_num_attempts_sum_259200',\n'17_num_of_misses_total_misses_259200',\n'1_num_attempts_mean_259200',\n'8_accuracy_in_Ass_median_259200',\n'709b1251_259200',\n'17_max_round_median_8640000',\n'32_first_goodattemp__median_8640000',\n'ab3136ba_259200',\n'9_duration_goodrounds_median_sum_259200',\n'6_num_attempts_median_259200',\n'8_misses_goodrounds_sum_max_8640000',\n'32_num_attempts_median_259200',\n'f28c589a_259200',\n'4_duration_goodrounds_median_median_259200',\n'36_misses_goodrounds_sum_median_259200',\n'4_misses_goodrounds_median_median_259200',\n'12_misses_goodrounds_median_sum_8640000',\n'18_duration_goodrounds_mean_sum_259200',\n'activity_8_max_259200',\n'e9c52111_259200',\n'17_num_attempts_sum_259200',\n'262136f4_259200',\n'2_misses_goodrounds_median_max_259200',\n'26_duration_goodrounds_median_mean_259200',\n'10_duration_goodrounds_median_sum_8640000',\n'17_max_round_max_8640000',\n'19_misses_goodrounds_median_max_8640000',\n'2_num_goodrounds_max_8640000',\n'30_misses_goodrounds_median_mean_259200',\n'8af75982_259200',\n'c0415e5c_259200',\n'30_first_goodattemp__mean_8640000',\n'4d6737eb_8640000',\n'12_num_goodrounds_max_8640000',\n'17_duration_goodrounds_mean_sum_259200',\n'26_num_attempts_sum_8640000',\n'2_num_goodrounds_sum_8640000',\n'4_share_cor_sum_8640000',\n'26_misses_goodrounds_sum_mean_259200',\n'b7530680_259200',\n'32_misses_goodrounds_median_median_259200',\n'1_num_attempts_median_8640000',\n'5010_259200',\n'1_misses_goodrounds_sum_mean_8640000',\n'30_false_attempts_sum_8640000',\n'12_misses_goodrounds_median_max_259200',\n'4_accuracy_in_Ass_median_259200',\n'32_misses_goodrounds_sum_mean_259200',\n'4_share_cor_sum_259200',\n'23_num_attempts_sum_8640000',\n'2_misses_goodrounds_sum_median_259200',\n'9d4e7b25_259200',\n'6_share_cor_sum_259200',\n'923afab1_259200',\n'2_share_cor_sum_259200',\n'1_share_cor_median_259200',\n'2_first_goodattemp__mean_259200',\n'6_num_of_misses_total_misses_259200',\n'1_duration_goodrounds_mean_median_259200',\n'18_misses_goodrounds_sum_median_259200',\n'8_first_goodattemp__mean_259200',\n'19_misses_goodrounds_sum_sum_8640000',\n'36_max_round_max_259200',\n'17_num_goodrounds_mean_259200',\n'8_num_attempts_sum_8640000',\n'3babcb9b_259200',\n'4_duration_goodrounds_mean_sum_8640000',\n'6_misses_goodrounds_sum_median_8640000',\n'4220_259200',\n'1_num_of_misses_total_misses_259200',\n'f806dc10_8640000',\n'a2df0760_259200',\n'709b1251_8640000',\n'6_num_goodrounds_mean_259200',\n'4_false_attempts_mean_259200',\n'2dc29e21_259200',\n'd122731b_259200',\n'19_misses_goodrounds_sum_mean_259200',\n'8_share_cor_sum_259200',\n'23_max_round_max_8640000',\n'10_num_attempts_sum_259200',\n'5154fc30_259200',\n'9_share_cor_median_259200',\n'36_max_round_median_259200',\n'18_misses_goodrounds_sum_mean_259200',\n'acc_Cauldron_Filler__Assessment__259200',\n'Bubble_Bath_259200',\n'10_duration_goodrounds_median_median_8640000',\n'2_num_attempts_median_259200',\n'3d0b9317_259200',\n'9_num_goodrounds_sum_259200',\n'23_duration_goodrounds_mean_sum_259200',\n'18_duration_goodrounds_median_sum_259200',\n'6_max_round_median_8640000',\n'7f0836bf_259200',\n'6_misses_goodrounds_sum_max_8640000',\n'a52b92d5_259200',\n'19_first_goodattemp__median_8640000',\n'5f0eb72c_259200',\n'18_misses_goodrounds_median_max_8640000',\n'Leaf_Leader_259200',\n'10_misses_goodrounds_sum_max_8640000',\n'11_num_of_misses_total_misses_259200',\n'19_duration_goodrounds_median_max_259200',\n'32_max_round_mean_259200',\n'17_num_attempts_median_259200',\n'6_duration_goodrounds_mean_sum_8640000',\n'19_max_round_mean_259200',\n'1_max_round_median_8640000',\n'26_duration_goodrounds_median_median_259200',\n'1_duration_goodrounds_mean_mean_259200',\n'9_first_goodattemp__mean_259200',\n'10_accuracy_in_Ass_median_259200',\n'4110_259200',\n'532a2afb_8640000',\n'23_misses_goodrounds_median_sum_8640000',\n'84b0e0c8_259200',\n'36_num_attempts_sum_8640000',\n'2_share_cor_median_259200',\n'23_duration_goodrounds_median_sum_259200',\n'8d7e386c_259200',\n'19_first_goodattemp__mean_259200',\n'4_num_attempts_median_259200',\n'5_num_goodrounds_sum_8640000',\n'795e4a37_259200',\n'18_duration_goodrounds_median_median_259200',\n'91561152_259200',\n'5000_259200',\n'4_share_cor_median_259200',\n'a5be6304_8640000',\n'19_misses_goodrounds_median_median_8640000',\n'4_accuracy_in_Ass_mean_259200',\n'9_num_attempts_median_259200',\n'12_first_goodattemp__median_8640000',\n'8_duration_goodrounds_median_sum_259200',\n'10_duration_goodrounds_mean_max_259200',\n'8_misses_goodrounds_sum_median_8640000',\n'26_misses_goodrounds_median_mean_8640000',\n'26_duration_goodrounds_mean_median_259200',\n'32_num_attempts_sum_8640000',\n'1_max_round_median_259200',\n'907a054b_259200',\n'36_num_of_misses_total_misses_259200',\n'3d63345e_259200',\n'19_share_cor_median_259200',\n'22_num_of_misses_total_misses_259200',\n'832735e1_259200',\n'19_duration_goodrounds_mean_max_259200',\n'6_misses_goodrounds_sum_mean_259200',\n'26_share_cor_sum_259200',\n'18_num_of_misses_total_misses_259200',\n'36_misses_goodrounds_sum_mean_259200',\n'93b353f2_259200',\n'4_misses_goodrounds_sum_max_8640000',\n'9_num_goodrounds_sum_8640000',\n'activity_9_max_259200',\n'bc8f2793_259200',\n'activity_10_max_8640000',\n'77261ab5_259200',\n'10_num_of_misses_total_misses_8640000',\n'32_first_goodattemp__mean_259200',\n'4_duration_goodrounds_median_mean_259200',\n'00c73085_8640000',\n'32_num_goodrounds_sum_8640000',\n'a16a373e_259200',\n'1_misses_goodrounds_median_mean_8640000',\n'2_max_round_mean_259200',\n'activity_19_max_259200',\n'2230fab4_259200',\n'6_num_attempts_mean_259200',\n'736f9581_8640000',\n'6_duration_goodrounds_median_sum_8640000',\n'a2df0760_8640000',\n'17_misses_goodrounds_median_mean_259200',\n'19_duration_goodrounds_mean_mean_259200',\n'Pan_Balance_259200',\n'19_duration_goodrounds_mean_median_259200',\n'32_misses_goodrounds_sum_sum_8640000',\n'5c3d2b2f_8640000',\n'30_misses_goodrounds_median_mean_8640000',\n'Air_Show_259200',\n'17_duration_goodrounds_mean_mean_259200',\n'activity_6_max_259200',\n'17_duration_goodrounds_mean_sum_8640000',\n'23_max_round_median_8640000',\n'69fdac0a_259200',\n'Dino_Dive_259200',\n'28f975ea_8640000',\n'18_duration_goodrounds_mean_max_259200',\n'1_duration_goodrounds_median_median_259200',\n'18_misses_goodrounds_median_median_8640000',\n'9_misses_goodrounds_sum_max_259200',\n'19_num_attempts_sum_259200',\n'8_false_attempts_sum_8640000',\n'9_num_of_misses_total_misses_259200',\n'1_duration_goodrounds_mean_sum_8640000',\n'32_duration_goodrounds_mean_median_259200',\n'1cc7cfca_259200',\n'30_false_attempts_mean_259200',\n'19_duration_goodrounds_median_sum_8640000',\n'4ef8cdd3_259200',\n'17_num_attempts_sum_8640000',\n'8b757ab8_259200',\n'26_duration_goodrounds_mean_sum_8640000',\n'Bottle_Filler__Activity__259200',\n'2_num_attempts_sum_8640000',\n'36_share_cor_sum_259200',\n'19_duration_goodrounds_median_median_259200',\n'4c2ec19f_259200',\n'activity_8_max_8640000',\n'4_num_attempts_sum_8640000',\n'df4940d3_259200',\n'4_first_goodattemp__mean_8640000',\n'2dcad279_259200',\n'12_misses_goodrounds_sum_sum_259200',\n'9e4c8c7b_259200',\n'8_share_cor_sum_8640000',\n'923afab1_8640000',\n'2081_259200',\n'b1d5101d_8640000',\n'18_duration_goodrounds_mean_mean_259200',\n'17_duration_goodrounds_mean_median_259200',\n'32_duration_goodrounds_median_sum_259200',\n'19_max_round_median_8640000',\n'36_num_goodrounds_sum_8640000',\n'10_duration_goodrounds_median_mean_8640000',\n'4_num_of_misses_total_misses_8640000',\n'4_num_attempts_mean_259200',\n'10_false_attempts_sum_8640000',\n'1_duration_goodrounds_mean_max_259200',\n'30_share_cor_median_259200',\n'6_max_round_mean_8640000',\n'9_share_cor_sum_259200',\n'6_duration_goodrounds_median_max_259200',\n'32_num_of_misses_total_misses_8640000',\n'8_duration_goodrounds_median_sum_8640000',\n'5348fd84_259200',\n'36_misses_goodrounds_sum_sum_8640000',\n'1_misses_goodrounds_sum_mean_259200',\n'18_num_attempts_median_259200',\n'18_num_attempts_sum_8640000',\n'795e4a37_8640000',\n'23_misses_goodrounds_median_median_259200',\n'Chicken_Balancer__Activity__259200',\n'10_true_attempts_mean_259200',\n'2_num_of_misses_total_misses_259200',\n'23_max_round_mean_259200',\n'18_duration_goodrounds_median_max_259200',\n'6_duration_goodrounds_mean_max_259200',\n'32_duration_goodrounds_median_median_259200',\n'26_num_attempts_mean_259200',\n'74e5f8a7_259200',\n'36_duration_goodrounds_mean_sum_259200',\n'30_duration_goodrounds_mean_sum_259200',\n'1_duration_goodrounds_median_sum_8640000',\n'18_share_cor_sum_259200',\n'9_misses_goodrounds_median_median_259200',\n'26_misses_goodrounds_sum_max_8640000',\n'32_duration_goodrounds_mean_sum_259200',\n'6_misses_goodrounds_median_max_8640000',\n'8_duration_goodrounds_median_mean_259200',\n'36_duration_goodrounds_median_sum_259200',\n'5010_8640000',\n'00c73085_259200',\n             \n            \n'relevant_activity_max_round_8640000__mean',\n'relevant_activity_num_goodrounds_8640000__sum',\n'activity_30_max_8640000',\n'32_duration_sum_259200',\n'Crystals_Rule_259200',\n'acc_Cauldron_Filler__Assessment__259200',\n'828e68f9_259200',\n'6_duration_sum_259200',\n'736f9581_259200',\n'1_duration_sum_259200',\n'Bubble_Bath_259200',\n'8b757ab8_8640000',\n'17_duration_sum_259200',\n'36_duration_sum_259200',\n'acc_Chest_Sorter__Assessment__259200',\n'0d1da71f_259200',\n'30_misses_goodrounds_sum_max_8640000',\n'30_duration_goodrounds_median_sum_8640000',\n'bd701df8_259200',\n'8_num_attempts_median_259200',\n'17_num_of_misses_total_misses_8640000',\n'Pan_Balance_259200',\n'23_num_attempts_median_259200',\n'Air_Show_259200',\n'Chicken_Balancer__Activity__259200',\n'3d0b9317_8640000',\n'3babcb9b_8640000',\n'23_misses_goodrounds_median_max_259200',\n'11_num_of_misses_total_misses_8640000',\n'17_misses_goodrounds_sum_median_259200',\n'Leaf_Leader_259200',\n'65a38bf7_8640000',\n'acc_Mushroom_Sorter__Assessment__259200',\n'18_duration_sum_259200',\n'Bottle_Filler__Activity__259200',\n'26_duration_sum_259200',\n'30_num_attempts_median_259200',\n'ab3136ba_8640000',\n'30_misses_goodrounds_sum_median_8640000',\n'17_duration_sum_8640000',\n'6_num_of_misses_total_misses_8640000',\n'30_duration_goodrounds_median_mean_259200',\n'0330ab6a_259200',\n'5_num_goodrounds_max_259200',\n'11_duration_sum_259200',\n'd2e9262e_259200',\n'30_duration_goodrounds_median_median_259200',\n'12_misses_goodrounds_median_median_259200',\n'6_num_attempts_sum_8640000',\n'28f975ea_259200',\n'f3cd5473_259200',\n'a5be6304_259200',\n'19_duration_sum_259200',\n'12_max_round_median_259200',\n'2_duration_goodrounds_mean_sum_259200',\n'acc_Bird_Measurer__Assessment__259200',\n'Crystals_Rule_8640000',\n'bdf49a58_8640000',\n'5154fc30_8640000',\n'71fe8f75_8640000',\n'bd612267_259200',\n'18_duration_goodrounds_mean_sum_8640000',\n'26_num_of_misses_total_misses_259200',\n'a52b92d5_8640000',\n'17_duration_goodrounds_median_sum_8640000',\n'3dcdda7f_8640000',\n'19_duration_goodrounds_mean_sum_8640000',\n'cdd22e43_259200',\n'6_first_goodattemp__mean_8640000',\n'7ec0c298_259200',\n'18_num_goodrounds_max_8640000',\n# '12_num_attempts_sum_259200',\n# '8af75982_8640000',\n# '36_first_goodattemp__mean_259200',\n# 'a1e4395d_8640000',\n# '2_misses_goodrounds_median_mean_259200',\n# '26_num_of_misses_total_misses_8640000',\n# 'Bird_Measurer__Assessment__259200',\n# '1_duration_sum_8640000',\n# '20_num_of_misses_total_misses_8640000',\n# '12_num_goodrounds_sum_8640000',\n# '30_share_cor_sum_259200',\n# '30_num_attempts_sum_8640000',\n# '9_duration_goodrounds_median_sum_8640000',\n# '9_duration_goodrounds_median_mean_259200',\n# '32_duration_goodrounds_median_sum_8640000',\n# '12_first_goodattemp__mean_259200',\n# '65a38bf7_259200',\n# '19_num_attempts_sum_8640000',\n# '23_misses_goodrounds_sum_sum_8640000',\n# 'cfbd47c8_259200',\n# '2230fab4_8640000',\n# '23_misses_goodrounds_sum_max_259200',\n# '9_duration_goodrounds_median_median_259200',\n# 'a1e4395d_259200',\n# '32_misses_goodrounds_median_mean_259200',\n# '9_duration_goodrounds_median_max_259200',\n# 'activity_6_median_259200',\n# '1_num_of_misses_total_misses_8640000',\n# '23_num_of_misses_total_misses_8640000',\n# '4_misses_goodrounds_median_max_259200',\n# '9_misses_goodrounds_sum_median_259200',\n# '8_num_attempts_median_8640000',\n# '19_num_attempts_median_259200',\n# '90efca10_259200',\n# 'f28c589a_8640000',\n# '26_max_round_median_8640000',\n# '17_max_round_mean_8640000',\n# '4_misses_goodrounds_sum_median_8640000',\n# '74e5f8a7_8640000',\n# '26_share_cor_sum_8640000',\n# '6_duration_sum_8640000',\n# 'Scrub_A_Dub_259200',\n# '23_num_of_misses_total_misses_259200',\n# '23_duration_sum_259200',\n# '8_duration_goodrounds_median_max_259200',\n# '828e68f9_8640000',\n# '17_share_cor_sum_8640000',\n# '7f0836bf_8640000',\n# 'Happy_Camel_259200',\n# '4_duration_goodrounds_mean_max_259200',\n# '26_misses_goodrounds_sum_mean_8640000',\n# '832735e1_8640000',\n# '19_share_cor_sum_8640000',\n# '23_share_cor_sum_259200',\n# '18_duration_goodrounds_median_sum_8640000',\n# '23_duration_goodrounds_median_sum_8640000',\n# '49ed92e9_259200',\n# '2_misses_goodrounds_sum_sum_8640000',\n# '2075_259200',\n# '2fb91ec1_259200',\n# '42_num_of_misses_total_misses_259200',\n# 'Bubble_Bath_8640000',\n# '6_misses_goodrounds_median_median_8640000',\n# '12_max_round_max_259200',\n# '18_max_round_median_259200',\n# '30_num_of_misses_total_misses_259200',\n# '3d8c61b0_8640000',\n# '32_num_goodrounds_mean_259200',\n# '5_duration_sum_259200',\n# '67439901_259200',\n# '36_num_attempts_median_259200',\n# 'Egg_Dropper__Activity__259200',\n# 'df4940d3_8640000',\n# 'ea321fb1_259200',\n# '26_duration_goodrounds_median_sum_8640000',\n# '9_share_cor_sum_8640000',\n# 'Flower_Waterer__Activity__259200',\n# '26_misses_goodrounds_sum_median_8640000',\n# '4a4c3d21_259200',\n# '19_max_round_max_8640000',\n# '77261ab5_8640000',\n# '4ef8cdd3_8640000',\n# '18_duration_sum_8640000',\n# '8_share_cor_mean_259200',\n# '23_duration_goodrounds_mean_sum_8640000',\n# '12_num_attempts_sum_8640000',\n# '3d63345e_8640000',\n# '9_misses_goodrounds_median_max_259200',\n# '17_duration_goodrounds_median_mean_259200',\n# '18_misses_goodrounds_sum_max_8640000',\n# '4031_259200',\n# '8d7e386c_8640000',\n# '1_max_round_mean_8640000',\n# '10_duration_goodrounds_median_max_8640000',\n# '2_max_round_median_8640000',\n# '18_max_round_max_259200',\n# '2040_8640000',\n# '17_first_goodattemp__mean_8640000',\n# 'e9c52111_8640000',\n# 'Happy_Camel_8640000',\n# '6_share_cor_sum_8640000',\n# '4_duration_sum_259200',\n# 'activity_30_median_8640000',\n# '23_duration_sum_8640000',\n# '2035_259200',\n# '262136f4_8640000',\n# 'Bottle_Filler__Activity__8640000',\n# '18_num_of_misses_total_misses_8640000',\n# 'b80e5e84_8640000',\n# '51102b85_259200',\n# '8_misses_goodrounds_sum_median_259200',\n# '12_first_goodattemp__sum_8640000',\n# '17_duration_goodrounds_median_max_259200',\n# 'Dino_Dive_259200',\n# '56cd3b43_259200',\n# '598f4598_259200',\n# 'Air_Show_8640000',\n# '23_num_attempts_median_8640000',\n# '36_misses_goodrounds_sum_max_259200',\n# '18_max_round_max_8640000',\n# 'b7530680_8640000',\n# 'Bird_Measurer__Assessment__8640000',\n# 'e79f3763_259200',\n# '8_false_attempts_mean_259200',\n# 'bbfe0445_259200',\n# '30_num_attempts_median_8640000',\n# '30614231_259200',\n# '3d8c61b0_259200',\n# '32_duration_goodrounds_mean_sum_8640000',\n# '5000_8640000',\n# 'bb3e370b_259200',\n# 'bc8f2793_8640000',\n# 'c0415e5c_8640000',\n# '1_first_goodattemp__mean_8640000',\n# 'b80e5e84_259200',\n# '9_duration_goodrounds_mean_sum_259200',\n# '0330ab6a_8640000',\n# '56bcd38d_259200',\n# '19_share_cor_mean_259200',\n# '10_share_cor_mean_259200',\n# '4_misses_goodrounds_sum_mean_8640000',\n# 'activity_32_max_259200',\n# 'activity_2_max_259200',\n# 'a29c5338_8640000',\n# '8_duration_goodrounds_median_median_259200',\n# '6_share_cor_median_259200',\n# '9_misses_goodrounds_sum_sum_8640000',\n# 'a1bbe385_8640000',\n# 'f7e47413_8640000',\n# '84b0e0c8_8640000',\n# '4_accuracy_in_Ass_median_8640000',\n# '2070_259200',\n# '12_misses_goodrounds_sum_sum_8640000',\n# '90efca10_8640000',\n# '9_duration_sum_259200',\n# '17_misses_goodrounds_median_mean_8640000',\n# '23_misses_goodrounds_sum_median_259200',\n# 'ea321fb1_8640000',\n# '3ccd3f02_8640000',\n# '0d1da71f_8640000',\n# 'activity_6_max_8640000',\n# '35_num_of_misses_total_misses_259200',\n# '69fdac0a_8640000',\n# '32_duration_goodrounds_median_max_259200',\n# '19_num_of_misses_total_misses_259200',\n# 'cf82af56_259200',\n# '10_false_attempts_mean_259200',\n# '2_share_cor_sum_8640000',\n# '17_misses_goodrounds_sum_median_8640000',\n# 'activity_9_median_259200',\n# 'a0faea5d_259200',\n# 'Leaf_Leader_8640000',\n# 'cfbd47c8_8640000',\n# '30_misses_goodrounds_sum_median_259200',\n# '12_duration_goodrounds_mean_sum_259200',\n# '19_num_of_misses_total_misses_8640000',\n# '21_num_of_misses_total_misses_259200',\n# '5e3ea25a_259200',\n# '26_duration_sum_8640000',\n# '42_duration_sum_259200',\n# 'activity_9_max_8640000',\n# 'de26c3a6_259200',\n# '8fee50e2_8640000',\n# '8_num_attempts_mean_259200',\n# 'd122731b_8640000',\n# '4_duration_sum_8640000',\n# '23_num_attempts_mean_259200',\n# '23_duration_goodrounds_median_median_259200',\n# '30_share_cor_sum_8640000',\n# '2_max_round_max_8640000',\n# '32_misses_goodrounds_median_mean_8640000',\n# '6_duration_goodrounds_median_median_259200',\n# '17_num_attempts_mean_259200',\n# '7ec0c298_8640000',\n# '32_duration_sum_8640000',\n# '2dcad279_8640000',\n# '23_duration_goodrounds_mean_median_259200',\n# '8_misses_goodrounds_sum_mean_259200',\n# '18_misses_goodrounds_sum_median_8640000',\n# '8_num_of_misses_total_misses_259200',\n# '8fee50e2_259200',\n# '6_duration_goodrounds_median_mean_259200',\n# 'activity_19_median_259200',\n# 'activity_12_max_259200',\n# '23_duration_goodrounds_mean_max_259200',\n# 'bd701df8_8640000',\n# '7ab78247_8640000',\n# '5f0eb72c_8640000',\n# '17_misses_goodrounds_sum_mean_259200',\n# '32_num_attempts_mean_259200',\n# '2060_259200',\n# '2_misses_goodrounds_sum_max_259200',\n# '4_duration_goodrounds_median_median_8640000',\n# '907a054b_8640000',\n# '4095_259200',\n# '23_first_goodattemp__mean_8640000',\n# '5_duration_goodrounds_median_sum_259200',\n# 'bcceccc6_259200',\n# '12_duration_goodrounds_median_sum_259200',\n# '4031_8640000',\n# 'acc_Cauldron_Filler__Assessment__8640000',\n# '9e4c8c7b_8640000',\n# '30_misses_goodrounds_sum_mean_259200',\n# '2_misses_goodrounds_sum_mean_259200',\n# '71fe8f75_259200',\n# '2_num_attempts_mean_259200',\n# 'activity_2_median_259200',\n# '4110_8640000',\n# '23_duration_goodrounds_mean_mean_259200',\n# '9_num_attempts_sum_8640000',\n# '37db1c2f_259200',\n# 'activity_17_max_8640000',\n# 'Egg_Dropper__Activity__8640000',\n# '36_max_round_mean_259200',\n# '6_duration_goodrounds_mean_median_259200',\n# '19_max_round_mean_8640000',\n# '4_duration_goodrounds_mean_median_259200',\n# 'accumulated_quality_by_ass_9_true_attempts_259200',\n# 'All_Star_Sorting_259200',\n# 'Cauldron_Filler__Assessment__259200',\n# '32_misses_goodrounds_sum_median_8640000',\n# '17_duration_goodrounds_mean_max_259200',\n# '7_num_of_misses_total_misses_259200',\n# '36_num_of_misses_total_misses_8640000',\n# '23_duration_goodrounds_median_max_259200',\n# 'Chicken_Balancer__Activity__8640000',\n# 'd02b7a8e_259200',\n# '17_duration_goodrounds_median_median_259200',\n# '7_duration_sum_259200',\n# '1_duration_goodrounds_mean_mean_8640000',\n# '2_duration_goodrounds_median_sum_259200',\n# '7ab78247_259200',\n# 'Pan_Balance_8640000',\n# 'Bug_Measurer__Activity__8640000',\n# '23_misses_goodrounds_median_mean_259200',\n# '18_share_cor_sum_8640000',\n# '4a4c3d21_8640000',\n# '2dc29e21_8640000',\n# '93b353f2_8640000',\n# '42_num_of_misses_total_misses_8640000',\n# 'activity_32_median_259200',\n# 'Scrub_A_Dub_8640000',\n# '17_num_attempts_median_8640000',\n# 'acc_Cart_Balancer__Assessment__259200',\n# '17_num_goodrounds_mean_8640000',\n# '4_true_attempts_mean_259200',\n# '22_num_of_misses_total_misses_8640000',\n# '4c2ec19f_8640000',\n# 'Mushroom_Sorter__Assessment__259200',\n# '23_duration_goodrounds_median_mean_259200',\n# '5d042115_8640000',\n# '5d042115_259200',\n# '20_duration_sum_259200',\n# '9_share_cor_mean_259200',\n# '22_duration_sum_259200',\n# 'd2e9262e_8640000',\n# '6_num_attempts_median_8640000',\n# '5_num_of_misses_total_misses_259200',\n# '10_misses_goodrounds_sum_mean_8640000',\n# 'Chow_Time_8640000',\n# '23_share_cor_sum_8640000',\n# '26_duration_goodrounds_mean_max_259200',\n# '18_num_attempts_mean_259200',\n# '12_max_round_mean_259200',\n# 'd3f1e122_259200',\n# '1_duration_goodrounds_median_median_8640000',\n# 'acc_Bird_Measurer__Assessment__8640000',\n# '67439901_8640000',\n# 'acc_Cart_Balancer__Assessment__8640000',\n# '792530f8_8640000',\n# 'activity_36_max_259200',\n# '36_duration_sum_8640000',\n# '36_share_cor_median_259200',\n# 'bb3e370b_8640000',\n# '2081_8640000',\n# '36_num_attempts_mean_259200',\n# '91561152_8640000',\n# '8_duration_goodrounds_mean_sum_259200',\n# '1_max_round_mean_259200',\n# 'activity_8_median_8640000',\n# '32_duration_goodrounds_median_mean_259200',\n# '36_duration_goodrounds_median_max_259200',\n# 'Dino_Drink_259200',\n# '1_num_attempts_mean_8640000',\n# '12_max_round_max_8640000',\n# '12_share_cor_sum_259200',\n# '2_num_goodrounds_mean_259200',\n# '2_misses_goodrounds_median_median_8640000',\n# '10_first_goodattemp__mean_8640000',\n# '8_duration_goodrounds_median_mean_8640000',\n# '9_num_goodrounds_mean_259200',\n# '4_misses_goodrounds_median_mean_259200',\n# '19_misses_goodrounds_median_mean_8640000',\n# '23_misses_goodrounds_median_median_8640000',\n# '51102b85_8640000',\n# '11_duration_sum_8640000',\n# '4bb2f698_259200',\n# '30_share_cor_median_8640000',\n# '19_duration_goodrounds_median_mean_259200',\n# '20_duration_sum_8640000',\n# '30614231_8640000',\n# '26_num_goodrounds_mean_259200',\n# '18_num_goodrounds_mean_259200',\n# '36_share_cor_mean_259200',\n# '17_misses_goodrounds_sum_max_8640000',\n# 'Watering_Hole__Activity__259200',\n# '18_num_goodrounds_max_259200',\n# '32_duration_goodrounds_mean_mean_259200',\n# '2_num_of_misses_total_misses_8640000',\n# '1_misses_goodrounds_median_max_8640000',\n# '2083_259200',\n# '32_first_goodattemp__mean_8640000',\n# '9_true_attempts_mean_259200',\n# '1_duration_goodrounds_mean_median_8640000',\n# '7_num_of_misses_total_misses_8640000' ,\n'relevant_activity_duration_goodrounds_median_8640000__mean'\n             ]\n\n# to_exclude = []\n# ajusted_test = reduce_test.copy()\n# for feature in ajusted_test.columns:\n#     if feature not in ['accuracy_group', 'installation_id', 'accuracy_group', 'session_title','hour','month','weekday']:\n#         data = reduce_train[feature]\n#         train_mean = data.mean()\n#         data = ajusted_test[feature] \n#         test_mean = data.mean()\n#         try:\n#             ajust_factor = train_mean \/ test_mean\n#             if ajust_factor > 100 or ajust_factor < 0.01:\n#                 to_exclude.append(feature)\n#                 print(feature, train_mean, test_mean)\n# #             else:\n# #                 ajusted_test[feature] *= ajust_factor\n#         except:\n#             to_exclude.append(feature)\n#             print(feature, train_mean, test_mean)","0188b225":"from collections import Counter, defaultdict\nfrom sklearn.utils import check_random_state\n\nclass RepeatedStratifiedGroupKFold():\n\n    def __init__(self, n_splits=5, n_repeats=1, random_state=None):\n        self.n_splits = n_splits\n        self.n_repeats = n_repeats\n        self.random_state = random_state\n        \n    # Implementation based on this kaggle kernel:\n    #    https:\/\/www.kaggle.com\/jakubwasikowski\/stratified-group-k-fold-cross-validation\n    def split(self, X, y=None, groups=None):\n        k = self.n_splits\n        def eval_y_counts_per_fold(y_counts, fold):\n            y_counts_per_fold[fold] += y_counts\n            std_per_label = []\n            for label in range(labels_num):\n                label_std = np.std(\n                    [y_counts_per_fold[i][label] \/ y_distr[label] for i in range(k)]\n                )\n                std_per_label.append(label_std)\n            y_counts_per_fold[fold] -= y_counts\n            return np.mean(std_per_label)\n            \n        rnd = check_random_state(self.random_state)\n        for repeat in range(self.n_repeats):\n            labels_num = np.max(y) + 1\n            y_counts_per_group = defaultdict(lambda: np.zeros(labels_num))\n            y_distr = Counter()\n            for label, g in zip(y, groups):\n                y_counts_per_group[g][label] += 1\n                y_distr[label] += 1\n\n            y_counts_per_fold = defaultdict(lambda: np.zeros(labels_num))\n            groups_per_fold = defaultdict(set)\n        \n            groups_and_y_counts = list(y_counts_per_group.items())\n            rnd.shuffle(groups_and_y_counts)\n\n            for g, y_counts in sorted(groups_and_y_counts, key=lambda x: -np.std(x[1])):\n                best_fold = None\n                min_eval = None\n                for i in range(k):\n                    fold_eval = eval_y_counts_per_fold(y_counts, i)\n                    if min_eval is None or fold_eval < min_eval:\n                        min_eval = fold_eval\n                        best_fold = i\n                y_counts_per_fold[best_fold] += y_counts\n                groups_per_fold[best_fold].add(g)\n\n            all_groups = set(groups)\n            for i in range(k):\n                train_groups = all_groups - groups_per_fold[i]\n                test_groups = groups_per_fold[i]\n\n                train_indices = [i for i, g in enumerate(groups) if g in train_groups]\n                test_indices = [i for i, g in enumerate(groups) if g in test_groups]\n\n                yield train_indices, test_indices","061d9dc3":"y = reduce_train['accuracy_group']\n\ncols_to_drop = [ 'installation_id', 'accuracy_group']\ncols_to_drop.extend(to_exclude)\nn_fold = 5\nn_repeats= 5\nfolds = RepeatedStratifiedGroupKFold(n_splits=n_fold, n_repeats=n_repeats, random_state = 5)\n\nsplits = list(folds.split(np.empty_like(y), y,reduce_train['installation_id'] ))\n\n#TRUNCATED SPLITS\nfor idx, s in enumerate(splits):\n    val = reduce_train[['installation_id']].iloc[s[1]]\n    val = val.sample(frac=1, random_state = 14)\n    splits[idx] = (s[0], list(val.groupby('installation_id').tail(1).index))","8cc458dd":"reduce_train.drop(list(set(reduce_train.columns) & set(cols_to_drop)),axis = 1,inplace = True)\nreduce_test.drop(list(set(reduce_test.columns) & set(cols_to_drop)),axis = 1,inplace = True)","a59e7eb4":"reduce_train.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in reduce_train.columns]\nreduce_test.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in reduce_test.columns]\ncategoricals = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in categoricals]","a71017b2":"params = {\n#         'n_estimators':2000,\n        'boosting_type': 'gbdt',\n        'metric': 'rmse',\n        'objective': 'regression',\n        'eval_metric': 'cappa',\n    \n#         'n_jobs': -1,\n        'seed': 42,\n\n        'num_leaves': 130,\n        'feature_fraction_bynode' : 0.6,\n        'learning_rate': 0.01,\n        'bagging_fraction': 0.6951448659512921,\n        'bagging_freq': 3,\n        'feature_fraction': 0.6867901263802068,\n        'verbosity': 100,\n        'early_stop': 150,\n        'verbose_eval': 1000,\n        'num_rounds': 10000,\n        'raw_seed': 1234,\n        'max_bin': 150,\n        'min_child_samples': 150,\n        'lambda_l1': 0.42651295024341174,\n        'lambda_l2': 0.15395842517107572,\n        'max_depth': -1,\n        'min_split_gain': 0.023658591149106636\n}","102ae637":"def run_lightgbm(x_train, y_train, x_valid, y_valid, x_test, index):\n    params['seed'] = params['raw_seed'] + index\n    num_rounds = params['num_rounds']\n    verbose_eval = params['verbose_eval']\n    early_stop = params['early_stop']\n\n    x_train_proc, x_valid_proc, x_test_proc = x_train, x_valid, x_test\n\n    dtrain = lgb.Dataset(x_train_proc, y_train, \n                         categorical_feature=categoricals)\n    dvalid = lgb.Dataset(x_valid_proc, y_valid,\n                         categorical_feature=categoricals)\n\n    model = lgb.train(params,\n                      train_set=dtrain,\n                      valid_sets=(dtrain, dvalid),\n                      num_boost_round=num_rounds,\n                      verbose_eval=verbose_eval,\n                      early_stopping_rounds=early_stop)\n    \n    feature_importance = pd.DataFrame(list(zip(list(x_train.columns), model.feature_importance(importance_type='gain'))),\n                                           columns=['feature', 'importance'])\n\n    return  model.predict(x_valid_proc), model.predict(x_test_proc), feature_importance","a256c338":"%%time\nFE = pd.DataFrame(columns=['feature', 'importance'])\n\ntrain_preds_lgb = np.ones((n_repeats, len(reduce_train))) * -1\ntest_preds_lgb = np.zeros((n_repeats, len(reduce_test), n_fold))\n\nfor i, (train_index, val_index) in enumerate(splits):\n    train_preds_lgb[i \/\/ n_fold, val_index], test_preds_lgb[i \/\/ n_fold, :, i % n_fold], fe = run_lightgbm(reduce_train.iloc[train_index], y.values[train_index],\n                                                                                                             reduce_train.iloc[val_index], y.values[val_index], reduce_test, i)\n    \n    FE = FE.append(fe)","75a1784b":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfe_aggr = FE.groupby('feature')['importance'].median().reset_index()\nfe_aggr.to_csv('fe_aggr.csv',index = False)\n\n\nplt.figure(figsize = (8, 50))\nsns.barplot(data = fe_aggr.sort_values(by = \"importance\", ascending = False).head(150), x = \"importance\", y = \"feature\")\nplt.show()","2bf183db":"y_train  = y","d525c45b":"from sklearn.metrics import cohen_kappa_score, mean_squared_error, roc_auc_score\ndef fix_distribution(y_train, pred):\n    base = pd.Series([0, 0, 0, 0, 0], index=np.arange(0, 5))\n    thresholds = (base + pd.Series(y_train).value_counts()).fillna(0).cumsum()\n    thresholds = thresholds \/ len(y_train) * len(pred)\n    \n    pred_ranks = pd.Series(pred).rank()\n    ranked_scores = np.zeros(len(pred))\n\n    for j, threshold in list(enumerate(thresholds))[::-1]:\n        ranked_scores[pred_ranks <= threshold] = j\n    return ranked_scores\n\nSCORES = []\nfor r in range(n_repeats):\n    idx = train_preds_lgb[r] != -1\n    score = cohen_kappa_score(y_train[idx], fix_distribution(y_train[idx], train_preds_lgb[r, idx]), weights='quadratic')\n    SCORES.append(score)\n\nprint(SCORES)\nprint('MEAN_CAPPA_', np.mean(SCORES))\nprint('MEDIAN_CAPPA_', np.median(SCORES))\nprint('STD_CAPPA_', np.std(SCORES))","6acc507d":"all_preds = test_preds_lgb.mean(axis = 0).mean(axis = 1)\nfixed_scores = fix_distribution(y_train, np.array(all_preds))","9aea280b":"sample_submission['accuracy_group'] = fixed_scores.astype(int)\nsample_submission.to_csv('submission.csv', index=False)","cba1c5af":"sample_submission['accuracy_group'].value_counts(normalize=True)","1cb0dd70":"### features"}}