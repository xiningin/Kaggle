{"cell_type":{"ac4ffe6d":"code","e15ea0d9":"code","0f185ba9":"code","ac884707":"code","7f30ae6e":"code","721504d7":"code","d16019fd":"code","effea813":"code","02843cb1":"code","29c5da3a":"code","0232510e":"code","f7238284":"code","fa4197a7":"markdown","54ab99db":"markdown","6c6038be":"markdown","994ba2d9":"markdown","e2df97b1":"markdown","795939c2":"markdown","eed0cb33":"markdown"},"source":{"ac4ffe6d":"import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split","e15ea0d9":"aug_data = pd.read_csv('..\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv', index_col='enrollee_id')\naug_data = aug_data.sort_index()\naug_data","0f185ba9":"aug_data.isnull().sum()","ac884707":"print(\"gender\uff1a\", aug_data.gender.unique(), '\\n')\nprint(\"enrolled_university\uff1a\", aug_data.enrolled_university.unique(), '\\n')\nprint(\"education_level\uff1a\", aug_data.education_level.unique(), '\\n')\nprint(\"major_discipline\uff1a\", aug_data.major_discipline.unique(), '\\n')\nprint(\"experience\uff1a\", aug_data.experience.unique(), '\\n')\nprint(\"company_size\uff1a\", aug_data.company_size.unique(), '\\n')\nprint(\"company_type\uff1a\", aug_data.company_type.unique(), '\\n')\nprint(\"last_new_job\uff1a\", aug_data.last_new_job.unique(), '\\n')","7f30ae6e":"def fill_null_data(df):\n    df.gender = df.gender.fillna('Other')\n    df.enrolled_university = df.enrolled_university.fillna('Unknown')\n    df.education_level = df.education_level.fillna('Unknown')\n    df.major_discipline = df.major_discipline.fillna('Unknown')\n    df.experience = df.experience.fillna('Unknown')\n    df.company_size = df.company_size.fillna('Unknown')\n    df.company_type = df.company_type.fillna('Unknown')\n    df.last_new_job = df.last_new_job.fillna('Unknown')\n    \nfill_null_data(aug_data)","721504d7":"aug_data.isnull().sum()","d16019fd":"y = aug_data.target.astype('int')\nX = aug_data.drop('target', axis=1)\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1)\n\nprint('X_train: ', X_train.shape, 'y_train: ', y_train.shape, '\\nX_val: ', X_val.shape,  'y_val: ', y_val.shape)","effea813":"from sklearn.preprocessing import OneHotEncoder\nimport category_encoders as ce\n\n# catboost-encoder\ncatboost_encoder = ce.CatBoostEncoder(cols=X.columns)\ncatboost_encoder.fit(X_train, y_train)\n    \ndef catboost_encode_x_data(x_data):\n    encoder_x_data = x_data.copy()\n    encoder_x_data = catboost_encoder.transform(x_data)\n    encoder_x_data.index = x_data.index\n    return encoder_x_data\n\nencoder_X_train = catboost_encode_x_data(X_train)\nencoder_X_val = catboost_encode_x_data(X_val)","02843cb1":"from sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\nfrom sklearn import svm\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\n\ndef calc_score(model):\n    scores = -1 * cross_val_score(model, encoder_X_train, y_train, cv=5, scoring='neg_mean_squared_error')\n    print(\"MSE score:\", scores.mean())\n\nprint(\"SVR ->\")\ncalc_score(svm.SVR())\nprint(\"XGBRegressor ->\")\ncalc_score(XGBRegressor())\nprint(\"SGDRegressor ->\")\ncalc_score(SGDRegressor())\nprint(\"GradientBoostingRegressor ->\")\ncalc_score(GradientBoostingRegressor())\nprint(\"KNeighborsRegressor ->\")\ncalc_score(KNeighborsRegressor())\nprint(\"MLPRegressor ->\")\ncalc_score(MLPRegressor())","29c5da3a":"model = GradientBoostingRegressor()\nmodel.fit(encoder_X_train, y_train)\ny_val_predict = model.predict(encoder_X_val)\nerror = mean_squared_error(y_val, y_val_predict)\nprint(\"MSE: \", error)","0232510e":"X_test = pd.read_csv('..\/input\/hr-analytics-job-change-of-data-scientists\/aug_test.csv', index_col='enrollee_id')\n\nfill_null_data(X_test)\n\nX_test","f7238284":"encoder_X_test = catboost_encode_x_data(X_test)\ny_test_predict = model.predict(encoder_X_test)\n\nsubmit_data = pd.DataFrame({'label': y_test_predict}, index=X_test.index)\nsubmit_data.to_csv('submission.csv')\n\n!head submission.csv","fa4197a7":"# \u5b9a\u4e49\u6a21\u578b","54ab99db":"# \u9884\u6d4b\u6a21\u578b","6c6038be":"# \u8bfb\u53d6\u6570\u636e","994ba2d9":"# \u6570\u636e\u7f3a\u5931\u60c5\u51b5","e2df97b1":"# \u8bad\u7ec3\u6a21\u578b","795939c2":"# \u5904\u7406\u6570\u636e","eed0cb33":"# \u586b\u5145\u7f3a\u5931\u6570\u636e"}}