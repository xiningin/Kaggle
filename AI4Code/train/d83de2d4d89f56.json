{"cell_type":{"592c032a":"code","6a1b47d8":"code","f98b19bc":"code","e3948f55":"code","3e337e83":"code","f7864e17":"code","77e4ab0b":"code","3aef5b22":"code","accfd15b":"code","ccd3248c":"code","fe464724":"code","a2ca4493":"code","ebed7193":"code","595d29c1":"code","59505f1d":"code","8a26343d":"code","1bb933fb":"code","3b5a3cbf":"code","20650399":"code","4fea1d7d":"code","194a767b":"code","868bcdf9":"code","73022f14":"code","b0fb6db0":"code","e9dd4c22":"code","5ff30110":"code","4c673c2c":"code","e73e91b7":"code","d2ccc011":"code","8fd3db80":"code","8a16ff69":"markdown","5cc9cbc2":"markdown","c9fe4aa6":"markdown","3beac28a":"markdown","38cfc2e7":"markdown","da29a6f9":"markdown","ad524f74":"markdown","ba656cd8":"markdown","30dda3a4":"markdown","556aad2f":"markdown","badfcd5c":"markdown","45990228":"markdown","852d1c80":"markdown","55e5635b":"markdown","cf9772bf":"markdown","4828c275":"markdown","238fcfac":"markdown","cf0d785a":"markdown","f6a70704":"markdown","dbd1bce2":"markdown","724a38ad":"markdown","fe034b00":"markdown","30b57bda":"markdown","51e62b06":"markdown","0d75f8fb":"markdown","563b62e7":"markdown","942ae77a":"markdown","1ece5e9a":"markdown","9ec77432":"markdown","c72572b9":"markdown","cbdea241":"markdown","507b3d07":"markdown","bb4be49e":"markdown","44edc4fb":"markdown","4d461dc5":"markdown","13c0a956":"markdown","a76093d9":"markdown"},"source":{"592c032a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport warnings\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6a1b47d8":"dataset = pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")","f98b19bc":"dataset.info()","e3948f55":"dataset.head()","3e337e83":"dataset = dataset.drop([\"id\"], axis = 1)","f7864e17":"dataset.head()","77e4ab0b":"dataset = dataset.drop([\"Unnamed: 32\"], axis = 1)","3aef5b22":"dataset.head()","accfd15b":"dataset.diagnosis = [1 if i == \"M\" else 0 for i in dataset.diagnosis]","ccd3248c":"dataset.head(2)","fe464724":"x = dataset.drop([\"diagnosis\"], axis = 1)\ny = dataset.diagnosis.values","a2ca4493":"x.head()","ebed7193":"x = (x - np.min(x))\/(np.max(x) - np.min(x)).values\n# (x - min(x))\/ (max(x) - min(x))","595d29c1":"x.head()","59505f1d":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.15, random_state=42)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n\n","8a26343d":"print(\"x train after taking transpose: \",x_train.shape)\nprint(\"x test after taking transpose: \",x_test.shape)\nprint(\"y train after taking transpose: \",y_train.shape)\nprint(\"y test after taking transpose: \",y_test.shape)","1bb933fb":"# dimension = 30\ndef initialize_weights_and_bias(dimension):\n    weights = np.full((dimension,1),0.01)\n    bias = 0.0\n    return weights, bias","3b5a3cbf":"weights, bias = initialize_weights_and_bias(30)","20650399":"weights","4fea1d7d":"bias","194a767b":"def sigmoid(z):\n    y_head = 1 \/ ( 1 + np.exp(-z)) \n    return y_head","868bcdf9":"sigmoid(0)","73022f14":"def forward_backward_propagation(w,b,x_train,y_train):\n    \n    # forward propagation\n    \n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]      # x_train.shape[1] = 455 -> for scaling\n    \n    # backward propagation\n    \n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] # x_train.shape[1]  is for scaling\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]                 # x_train.shape[1]  is for scaling\n    gradients = {\"derivative_weight\": derivative_weight,\"derivative_bias\": derivative_bias}\n    return cost,gradients","b0fb6db0":"def update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    # updating(learning) parameters is number_of_iterarion times\n    \n    for i in range(number_of_iterarion):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        \n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 25 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","e9dd4c22":"def predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction","5ff30110":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]  # that is 4096\n    w,b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    y_prediction_train = predict(parameters[\"weight\"],parameters[\"bias\"],x_train)\n\n    # Print train\/test Errors\n    print(\"train accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_train - y_train)) * 100))\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 10, num_iterations = 500)   \n","4c673c2c":"from sklearn.linear_model import LogisticRegression","e73e91b7":"x_train.shape","d2ccc011":"lr = LogisticRegression()\nlr.fit(x_train.T, y_train.T)","8fd3db80":"print(\"Test accuracy: \", lr.score(x_test.T, y_test.T))","8a16ff69":"In the dataset, we have different features and numerical variables. We can detect if a person is cancer or not by looking at this data.","5cc9cbc2":"<a id = \"6\"><\/a>\n## Forward and Backward Propagation:","c9fe4aa6":"<a id = \"2\"><\/a>\n# 2. Overview the Data Set","3beac28a":"Gradients are dictionaries, parameters are stored inside it.","38cfc2e7":"Our y_head will be a probabilistic value.","da29a6f9":"It's okay now.","ad524f74":"Now, I am going to Convert diagnosis variables into numerical variables.(0s and 1s)","ba656cd8":"Logistic regression:","30dda3a4":"Also we know(you can check from the graph) if sigmoid function takes 0, it gives 0.5 as an output.","556aad2f":"<a id = \"1\"><\/a>\n# 1. Introduction","badfcd5c":"### Prediction:","45990228":"![](https:\/\/www.cs.iusb.edu\/~danav\/teach\/c463\/neuron.gif)","852d1c80":"## Content:\n\n1. [Introduction](#1)\n1. [Overview the Data Set](#2)\n1. [Code Part](#3)\n    * [Logistic Regression](#4)\n        * [Initializing parameters](#5)\n        * [Forward and Barckward Propagation](#6)\n        * [Updating parameters](#7)\n    * [Logistic Regression with Sklearn](#8)","55e5635b":"* We use pandas for reading the dataset\n* Numpy is used for numerical data handling\n* Matplotlib is used for plotting the data","cf9772bf":"<a id = \"7\"><\/a>\n## Update Part:","4828c275":"Column names and meanings:\n* id: ID number\n* diagnosis: The diagnosis of breast tissues (M = malignant, B = benign)\n* radius_mean: mean of distances from center to points on the perimeter\n* texture_mean: standard deviation of gray-scale values\n* perimeter_mean: mean size of the core tumor\n* area_mean: area of the tumor\n* smoothness_mean: mean of local variation in radius lengths\n* compactness_mean: mean of perimeter^2 \/ area - 1.0\n* concavity_mean: mean of severity of concave portions of the contour\n* concave_points_mean: mean for number of concave portions of the contour\n* symmetry_mean\n* fractal_dimension_mean: mean for \"coastline approximation\" - 1\n* radius_se: standard error for the mean of distances from center to points on the perimeter\n* texture_se: standard error for standard deviation of gray-scale values\n* perimeter_se\n* area_se\n* smoothness_se: standard error for local variation in radius lengths\n* compactness_se: standard error for perimeter^2 \/ area - 1.0\n* concavity_se: standard error for severity of concave portions of the contour\n* concave_points_se: standard error for number of concave portions of the contour\n* symmetry_se\n* fractal_dimension_se: standard error for \"coastline approximation\" - 1\n* radius_worst: \"worst\" or largest mean value for mean of distances from center to points on the perimeter\n* texture_worst: \"worst\" or largest mean value for standard deviation of gray-scale values\n* perimeter_worst\n* area_worst\n* smoothness_worst: \"worst\" or largest mean value for local variation in radius lengths\n* compactness_worst: \"worst\" or largest mean value for perimeter^2 \/ area - 1.0\n* concavity_worst: \"worst\" or largest mean value for severity of concave portions of the contour\n* concave_points_worst: \"worst\" or largest mean value for number of concave portions of the contour\n* symmetry_worst\n* fractal_dimension_worst: \"worst\" or largest mean value for \"coastline approximation\" - 1","238fcfac":"Dataset information:\n\n* Dataset Characteristics: Multivariate\n* Attribute Characteristics: Real\n* Attribute Characteristics: Classification\n* Number of Instances: 569\n* Number of Attributes: 32\n* Missing Values: No","cf0d785a":"![](https:\/\/cdn-images-1.medium.com\/max\/800\/1*EJPT0utTkQ2qrHfjDID5RA.png)","f6a70704":"## Train-Test-Split","dbd1bce2":"So, our method works.","724a38ad":"![](https:\/\/static.independent.co.uk\/s3fs-public\/thumbnails\/image\/2020\/02\/04\/09\/cancer.jpg)","fe034b00":"Reading csv file:","30b57bda":"* learning rate: How fast we learn.\n* number_of_iteration: How many times we are gonne do forward and backward propagation.\n* cost_list is used for containing cost values.\n* cost_list2 is used for containing cost values after every 25 steps.","51e62b06":"<a id = \"8\"><\/a>\n# Sklearn with Logistic Regression","0d75f8fb":"* While diagnosing whether a person has cancer or not, we don't need to use \"id\" and \"Unnamed32\" columns.  ","563b62e7":"<a id = \"3\"><\/a>\n# 3. Code Part","942ae77a":"I am going to normalize my variables in order to study with them.( I am going to scale them between 0 and 1)","1ece5e9a":"In this tutorial, I am going to work on Cancer Dataset and implement some ML techniques for training and testing data.","9ec77432":"We use \"score()\" function. It preans, predict my values and then find the accuracy.","c72572b9":"* Dimension of x_train: (30*455)\n* Dimension of weights: (30*1) \n* In order to do a matrix multiplication, we need to take transpose of weights(or you can also take transpose of x_train instead of weights.)","cbdea241":"Let's check if we can drop our \"id\" column.","507b3d07":"Let's check if we can drop our \"Unnamed: 32\" column.","bb4be49e":"<a id = \"4\"><\/a>\n## Logistic Regression","44edc4fb":"For getting general information about our data, we use \"info()\" function.","4d461dc5":"Sigmoid function formula:\n![](https:\/\/www.aliozcan.org\/wp-content\/uploads\/2019\/11\/sigmoid-Fonksiyonu.png)","13c0a956":"![](https:\/\/miro.medium.com\/max\/2124\/1*WGHn1L4NveQ85nn3o7Dd2g.png)","a76093d9":"<a id = \"5\"><\/a>\n## Parameter Initialize and Sigmoid Function"}}