{"cell_type":{"b9c4195f":"code","ae8c85c9":"code","87e1ea5b":"code","f30c7a1f":"code","b9bbc4a0":"code","afad4b4e":"code","764d1117":"code","41dee635":"code","baedd0be":"code","7ea28f98":"code","5488c1b6":"code","1ed0200a":"code","d01f0045":"code","3872cd30":"code","b6c88bb6":"code","57c6efc5":"code","567fd7b6":"code","1628fe03":"code","197a8a0c":"code","5b6b6303":"code","6bbf267f":"code","d51489f7":"code","41525f19":"code","d8925f88":"code","1dd77562":"code","5e170728":"code","65ff8b3c":"code","cc8171fb":"code","0b9d06a2":"code","8658b785":"code","79bbbec3":"code","acd42228":"code","f9222469":"code","ba8b4da2":"code","d7001532":"code","ff83e71a":"code","f10cab51":"code","cde47e46":"code","99adeeae":"code","d8319a0e":"code","51579795":"code","bf51ec91":"code","cc900c13":"code","a0a3504b":"code","965940b6":"code","26d4edbe":"code","84a6f3ad":"code","375098ab":"code","ec62f95f":"code","0e570166":"code","7b82eea6":"code","f6dc6aee":"code","82644308":"code","f1223b58":"code","07314830":"code","839686b0":"markdown","6c01ccf5":"markdown","d37fb43d":"markdown","cf5834b9":"markdown","f4e06a07":"markdown","e2ddc58d":"markdown","26ebfc17":"markdown","0493deb3":"markdown","175800d7":"markdown","2f62e311":"markdown","b03ed9f8":"markdown","4e40aae6":"markdown","976df7ca":"markdown","e9a3332b":"markdown","717f6529":"markdown","a9b2ccd3":"markdown","faca38d8":"markdown"},"source":{"b9c4195f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ae8c85c9":"import numpy as np\nimport pandas as pd\nfrom os import path\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport matplotlib.pyplot as plt\nfrom textblob import TextBlob\nfrom sklearn import model_selection, preprocessing, linear_model, naive_bayes, metrics\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn import decomposition, ensemble\n\nimport pandas, xgboost, numpy, textblob, string\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, mean_squared_error, r2_score, roc_auc_score, roc_curve, classification_report\nfrom sklearn.model_selection import train_test_split\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","87e1ea5b":"\ntrain  =pd.read_csv(\"..\/input\/nlp-getting-started\/train.csv\")","f30c7a1f":"train.head()","b9bbc4a0":"train.isnull().sum()","afad4b4e":"#Dropping unncessary columns\ntrain.drop([\"keyword\",\"location\"],axis = 1,inplace = True)\n","764d1117":"train[\"text\"] = train[\"text\"].apply(lambda x : \" \".join(x.lower() for x in x.split()))","41dee635":"train.head()","baedd0be":"train[\"text\"] = train[\"text\"].str.replace(\"\\d\",\"\")","7ea28f98":"train.head()","5488c1b6":"train[\"text\"] = train[\"text\"].str.replace(\"[^\\w\\s]\",\"\")","1ed0200a":"train.head()","d01f0045":"import nltk ","3872cd30":"nltk.download(\"stopwords\")","b6c88bb6":"from nltk.corpus import stopwords\nsw = stopwords.words(\"english\")","57c6efc5":"sw.append(\"u\")\nsw.append(\"im\")","567fd7b6":"train[\"text\"] = train[\"text\"].apply(lambda x: \" \".join(x for x in x.split() if x not in sw))","1628fe03":"from textblob import Word\nnltk.download(\"wordnet\")","197a8a0c":"train[\"text\"] = train[\"text\"].apply(lambda x: \" \".join([Word(word).lemmatize() for word in x.split()]))","5b6b6303":"train.head()","6bbf267f":"#regex\ntrain[\"text\"] = train[\"text\"].str.replace('http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+',\"\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"We're\", \"We are\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"That's\", \"That is\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"won't\", \"will not\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"they're\", \"they are\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"Can't\", \"Cannot\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"wasn't\", \"was not\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"don\\x89\u00db\u00aat\", \"do not\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"aren't\", \"are not\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"isn't\", \"is not\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"You're\", \"You are\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"I'M\", \"I am\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"shouldn't\", \"should not\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"wouldn't\", \"would not\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"i'm\", \"I am\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"We've\", \"We have\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"Didn't\", \"Did not\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"it's\", \"it is\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"can't\", \"cannot\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"don't\", \"do not\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"you're\", \"you are\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"I've\", \"I have\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"Don't\", \"do not\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"I'll\", \"I will\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"Let's\", \"Let us\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"Could've\", \"Could have\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"youve\", \"you have\")\ntrain[\"text\"] = train[\"text\"].str.replace(r\"It's\", \"It is\")","d51489f7":"from sklearn.model_selection import train_test_split","41525f19":"freq = (train[\"text\"][0:1000]).apply(lambda x: pd.value_counts(x.split(\" \"))).sum(axis = 0).reset_index()","d8925f88":"freq.columns = [\"words\",\"tf\"]","1dd77562":"x = freq[freq[\"tf\"] > 30].sort_values(by = \"tf\" ,ascending = False)","5e170728":"x.plot.bar(x = \"words\", y = \"tf\",color = \"pink\");","65ff8b3c":"#WordCloud for the first 5 row\nfor i in range (0,5):\n    text = train[\"text\"][i]\n    wordcloud = WordCloud().generate(text)\n    plt.imshow(wordcloud, interpolation = \"bilinear\")\n    plt.axis(\"off\")\n    plt.show()\n    print(\"***********************************************\")","cc8171fb":"from nltk.tokenize import sent_tokenize, word_tokenize \nimport warnings \n  \nwarnings.filterwarnings(action = 'ignore') \n  \nimport gensim \nfrom gensim.models import Word2Vec ","0b9d06a2":"import numpy as np\nimport pandas as pd\nfrom os import path\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport matplotlib.pyplot as plt","8658b785":"x_train, x_test, y_train, y_test = train_test_split(train[\"text\"], train[\"target\"],\n                                                    test_size = 0.3,\n                                                    random_state = 18)","79bbbec3":"vectorizer = CountVectorizer()\nvectorizer.fit(x_train)","acd42228":"x_train_count = vectorizer.transform(x_train)\nx_test_count = vectorizer.transform(x_test)","f9222469":"loj = linear_model.LogisticRegression()\nloj_model = loj.fit(x_train_count, y_train)\ny_pred = loj_model.predict(x_test_count)\n\n\naccuracy_score(y_test,y_pred)","ba8b4da2":"x_train_count","d7001532":"nb = naive_bayes.MultinomialNB()\nnb_model = nb.fit(x_train_count,y_train)\ny_pred = nb_model.predict(x_test_count)\naccuracy_score(y_test,y_pred)","ff83e71a":"rf = ensemble.RandomForestClassifier()\nrf_model = rf.fit(x_train_count,y_train)\ny_pred = rf_model.predict(x_test_count)\naccuracy_score(y_test,y_pred)","f10cab51":"xgb = xgboost.XGBClassifier()\nxgb_model = xgb.fit(x_train_count,y_train)\ny_pred = xgb_model.predict(x_test_count)\naccuracy_score(y_test,y_pred)","cde47e46":"tf_idf_word_vectorizer = TfidfVectorizer()\n\ntf_idf_word_vectorizer.fit(x_train)","99adeeae":"x_train_tf_idf_word = tf_idf_word_vectorizer.transform(x_train)\nx_test_tf_idf_word = tf_idf_word_vectorizer.transform(x_test)","d8319a0e":"loj = linear_model.LogisticRegression()\nloj_model = loj.fit(x_train_tf_idf_word, y_train)\ny_pred = loj_model.predict(x_test_tf_idf_word)\naccuracy_score(y_test,y_pred)","51579795":"nb = naive_bayes.MultinomialNB()\nnb_model = nb.fit(x_train_tf_idf_word,y_train)\ny_pred = nb.predict(x_test_tf_idf_word)\naccuracy_score(y_test,y_pred)","bf51ec91":"from sklearn import svm\nfrom sklearn.multiclass import OneVsRestClassifier\nclf = OneVsRestClassifier(svm.SVC(gamma=0.01, C=100., probability=True, class_weight='balanced', kernel='linear'))\nclf_output = clf.fit(x_train_tf_idf_word,y_train)\ny_pred = clf.predict(x_test_tf_idf_word)","cc900c13":"accuracy_score(y_test,y_pred)","a0a3504b":"test = pd.read_csv(\"..\/input\/nlp-getting-started\/test.csv\")\ntest.drop([\"keyword\",\"location\"],axis = 1,inplace = True)","965940b6":"def prep(test):\n    \n    \n    test[\"text\"] = test[\"text\"].apply(lambda x : \" \".join(x.lower() for x in x.split()))\n    \n    test[\"text\"] = test[\"text\"].str.replace(\"\\d\",\"\")\n    \n    test[\"text\"] = test[\"text\"].str.replace(\"[^\\w\\s]\",\"\")\n    \n    test[\"text\"] = test[\"text\"].apply(lambda x: \" \".join(x for x in x.split() if x not in sw))\n    \n    test[\"text\"] = test[\"text\"].apply(lambda x: \" \".join([Word(word).lemmatize() for word in x.split()]))\n    \n    test[\"text\"] = test[\"text\"].str.replace('http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+',\"\")\n    \n    test[\"text\"] = test[\"text\"].str.replace(r'(((http)(s)?|www(.)?)(:\/\/)?\\S+)',\"\")\n    \n    test[\"text\"] = test[\"text\"].str.replace(r\"\\x89\u00db\u00d3\", \"\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"he's\", \"he is\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"there's\", \"there is\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"We're\", \"We are\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"That's\", \"That is\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"won't\", \"will not\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"they're\", \"they are\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"Can't\", \"Cannot\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"wasn't\", \"was not\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"don\\x89\u00db\u00aat\", \"do not\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"aren't\", \"are not\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"isn't\", \"is not\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"You're\", \"You are\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"I'M\", \"I am\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"shouldn't\", \"should not\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"wouldn't\", \"would not\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"i'm\", \"I am\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"We've\", \"We have\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"Didn't\", \"Did not\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"it's\", \"it is\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"can't\", \"cannot\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"don't\", \"do not\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"you're\", \"you are\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"I've\", \"I have\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"Don't\", \"do not\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"I'll\", \"I will\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"Let's\", \"Let us\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"Could've\", \"Could have\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"youve\", \"you have\")\n    test[\"text\"] = test[\"text\"].str.replace(r\"It's\", \"It is\")\n    \n\n    \n    return test\n  \n\n","26d4edbe":"df = prep(test)\n","84a6f3ad":"test_x = df[\"text\"]","375098ab":"vectorizer = CountVectorizer()\nvectorizer.fit(test_x)\nvectorizer.transform(test_x)","ec62f95f":" vectorizer.transform(test_x)","0e570166":"x_test_co= vectorizer.transform(test_x)","7b82eea6":"x_train_count = vectorizer.transform(x_train)","f6dc6aee":"nb = naive_bayes.MultinomialNB()\nnb_model = nb.fit(x_train_count,y_train)\ny_pred = nb_model.predict(x_test_co)\ny_pred","82644308":"dictt = {}\ndictt['id'] = test.id\ndictt['target'] = y_pred\nsubmission = pd.DataFrame(dictt)","f1223b58":"submission","07314830":"#submission.to_csv(\"submission3.csv\" , index = None)","839686b0":"## Naive Bayes","6c01ccf5":"## Logistic Regression","d37fb43d":"## Lemmatization\n\n**Lemmatization :** In linguistics, it is the process of grouping together the different inflected forms of a word so they can be analyzed as a single item. Putting an example to the definition, \u201ccomputers\u201d is an inflected form of \u201ccomputer\u201d, the same logic as \u201cdogs\u201d being an inflected form of \u201cdog\u201d.","cf5834b9":"## Count Vector\n\n\n![count%20vector.png](attachment:count%20vector.png)\n\nBy word frequency we indicate the number of times each token occurs in a text. When talking about word frequency, we distinguish between types and tokens. Types are the distinct words in a corpus, whereas tokens are the words, including repeats. Let's see how this works in practice.","f4e06a07":"## Logistic Regression","e2ddc58d":"## Dropping punctuation marks","26ebfc17":"## Visualisation","0493deb3":"## RF","175800d7":"## For the test\n","2f62e311":"# Prediction","b03ed9f8":"## Stopwords\n\n**Stopwords** : Words that are filtered out by Web search engines and other enterprise searching and indexing platforms. Stop words are natural language words which have very little meaning, such as \"and\", \"the\", \"a\", \"an\", and similar words.","4e40aae6":"## Naive Bayes","976df7ca":"## Dropping Numbers","e9a3332b":"## XGBOOST","717f6529":"# Cleaning  & Preprocessing","a9b2ccd3":"## TF-IDF Word Level\n\n![tf%20idf.png](attachment:tf%20idf.png)\n\n\n\n**Term-frequency-inverse document frequency (TF-IDF)** is another way to judge the topic of an article by the words it contains. With TF-IDF, words are given weight \u2013 TF-IDF measures relevance, not frequency. That is, wordcounts are replaced with TF-IDF scores across the whole dataset.\n\n\n","faca38d8":"# Credits\n\n\nhttps:\/\/www.webopedia.com\/TERM\/S\/stop_words.html\n\nhttps:\/\/www.twinword.com\/blog\/what-is-lemmatization\/\n\nhttps:\/\/port.sas.ac.uk\/mod\/book\/view.php?id=583&chapterid=381#:~:text=2.3%20Word%20count,-After%20tokenising%20a&text=By%20word%20frequency%20we%20indicate,how%20this%20works%20in%20practice.\n\nhttps:\/\/wiki.pathmind.com\/bagofwords-tf-idf\n\nhttps:\/\/medium.com\/deep-math-machine-learning-ai\/chapter-9-1-nlp-word-vectors-d51bff9628c1"}}