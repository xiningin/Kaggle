{"cell_type":{"e699c0cf":"code","9fe38038":"code","e178507f":"code","aad9398e":"code","3d8e42a3":"code","7c326020":"code","50daf13f":"code","dd4599cb":"code","25557dcb":"code","d031ce16":"code","5f7d9515":"code","c6d05eeb":"code","a36a3d17":"code","7566aeae":"code","d4f15644":"code","b09836a7":"code","9997fb2f":"code","245e1908":"code","1ed1254e":"code","5e64da80":"code","79547021":"code","0bac03ee":"code","63308a8d":"code","2ee5ab9e":"code","30e413a8":"code","ab0bcb34":"code","fd933aa0":"code","adc60aa0":"code","fc929c52":"code","618e29b3":"code","b830ba23":"code","d59eca1d":"code","1b027d1d":"code","c4b36cf0":"code","74e76728":"code","e784a125":"code","68a7ea2c":"code","5d9408d2":"code","49fdc7a4":"code","0e2978e0":"code","af4edc8a":"code","d31f9c7b":"code","39ef70da":"code","e630ed7d":"code","3f236974":"code","63687d25":"code","a33e8a23":"code","dc73a5b9":"code","6b7c09ea":"code","ecf7bfa6":"code","79ee6263":"code","bd1a9cdf":"code","6cb77151":"code","c0c2c5e6":"code","0117efdc":"code","67e32033":"code","ba39e1fe":"code","cbc1deb7":"code","5cc5e89e":"code","37866578":"code","d4ae4383":"code","95359c33":"code","48210a94":"code","ae6559f3":"code","001362d7":"code","fad0db0c":"code","dde8f5be":"code","ad96a49b":"code","4d7974cb":"code","e029017e":"code","55361b1f":"code","39849b4c":"code","0a4ec700":"code","3b343375":"code","ceea3518":"code","e3745b87":"code","81624703":"code","38c4a8e7":"code","92ec1c53":"code","158f203e":"code","4b4a7260":"code","f3881d88":"code","9aabfa9e":"code","13ad3542":"code","d81066f4":"code","8acc7c7f":"code","d1313129":"code","efa44528":"code","09aa20c9":"code","cdbe12b6":"code","a18734b6":"code","8f52b3fa":"code","679649cf":"code","c26fe903":"code","446289ca":"code","a4403505":"code","6258be52":"code","282e9b76":"code","006daa25":"code","32a2dc5c":"code","35b2160b":"code","795e6ec1":"code","c7f24ae0":"code","0b8588a5":"code","c981603b":"code","c1a414a8":"code","d3feadcc":"code","52b89ae9":"code","6c3d0aec":"code","32adab3b":"code","5bcdf61e":"markdown","94d43ff9":"markdown","463fb45c":"markdown"},"source":{"e699c0cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\nimport matplotlib.pyplot as plt\nfrom math import sqrt \nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import validation_curve\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_predict, validation_curve,GridSearchCV, RandomizedSearchCV\nfrom sklearn.preprocessing import minmax_scale\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.ensemble import  VotingClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nimport sklearn.ensemble as ens ","9fe38038":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nsub = pd.read_csv('..\/input\/gender_submission.csv')","e178507f":"train.head()","aad9398e":"train.describe()","3d8e42a3":"train.info()","7c326020":"train.isna().sum()","50daf13f":"train.Age.hist()","dd4599cb":"train.Age.fillna(train.Age.median(), inplace= True)","25557dcb":"train.Fare.hist()","d031ce16":"train.Fare.fillna(train.Fare.median(), inplace= True)","5f7d9515":"train.Embarked.value_counts()","c6d05eeb":"train.Embarked.fillna('S', inplace= True)","a36a3d17":"train.isna().sum()","7566aeae":"cabin_tr  = train.Cabin\ncabin_te = test.Cabin","d4f15644":"#cab = train[train.Cabin.notnull()]","b09836a7":"#cab['cc'] = cab.Cabin.str.slice(start=0, stop=1)","9997fb2f":"#cab.cc.unique()","245e1908":"#cab['sum'] = cab.Parch + cab.SibSp\n#cab['With Someone or Not'] = cab['sum'].apply(with_someone)","1ed1254e":"#cab.drop(columns=['SibSp', 'Parch', 'sum'], axis = 1, inplace= True)","5e64da80":"#cab.Age.fillna(cab.Age.median(), inplace= True)\n#cab.Fare.fillna(cab.Fare.median(), inplace= True)\n#cab.Embarked.fillna('S', inplace= True)","79547021":"#cab = pd.get_dummies(data = cab, columns = ['Pclass', 'Sex', 'Embarked'])\n#cab.head()","0bac03ee":"#cab.drop(['Name', 'Ticket', 'PassengerId', 'Cabin'], axis=1, inplace=True)\n#cab.head()","63308a8d":"#le = preprocessing.LabelEncoder()\n#cab['ccl'] =le.fit_transform(cab.cc)\n#cab.drop(['cc'], axis=1, inplace=True)\n#cab.head()","2ee5ab9e":"#xcab = cab[['Survived','Age','Fare','With Someone or Not','Pclass_1','Pclass_2',\n #           'Pclass_3','Sex_female','Sex_male','Embarked_C','Embarked_Q','Embarked_S']]\n#ycab = cab['ccl']","30e413a8":"#random_forest_cab = RandomForestClassifier(n_estimators=100)\n#random_forest_cab.fit(xcab, ycab)\n#y_pred_cab = random_forest.predict(xcab)\n#accuracy_score(ycab, y_pred_cab)","ab0bcb34":"train.drop('Cabin', axis=1, inplace= True)","fd933aa0":"train.head()","adc60aa0":"sns.barplot('Pclass', 'Survived', data=train, color = 'darkturquoise')\nplt.show()","fc929c52":"sns.barplot('Embarked', 'Survived', data=train, color = 'darkturquoise')\nplt.show()","618e29b3":"sns.barplot('SibSp', 'Survived', data=train, color='mediumturquoise')\nplt.show()","b830ba23":"sns.barplot('Parch', 'Survived', data=train, color='mediumturquoise')\nplt.show()","d59eca1d":"\nsns.barplot('Sex', 'Survived', data=train, color='mediumturquoise')\nplt.show()","1b027d1d":"train = pd.get_dummies(data = train, columns = ['Pclass', 'Sex', 'Embarked'])","c4b36cf0":"train.head()","74e76728":"train.drop(columns=['Ticket', 'PassengerId'], axis=1, inplace=True)","e784a125":"train.head()","68a7ea2c":"def with_someone(x):\n    if x > 0:\n        return 1\n    else:\n        return 0\n    return x","5d9408d2":"train['sum'] = train.Parch + train.SibSp\ntrain['With Someone or Not'] = train['sum'].apply(with_someone)","49fdc7a4":"test['sum'] = test.Parch + test.SibSp\ntest['With Someone or Not'] = test['sum'].apply(with_someone)","0e2978e0":"train.drop(columns=['SibSp', 'Parch', 'sum'], axis = 1, inplace= True)","af4edc8a":"test.drop(columns=['SibSp', 'Parch', 'sum'], axis = 1, inplace= True)","d31f9c7b":"train.isnull().sum()","39ef70da":"test.Age.fillna(train.Age.median(), inplace= True)","e630ed7d":"test.Fare.fillna(train.Fare.median(), inplace= True)","3f236974":"test.Embarked.fillna('S', inplace= True)","63687d25":"test.drop('Cabin', axis=1, inplace= True)","a33e8a23":"passID = test.PassengerId\n","dc73a5b9":"test.drop(columns=['Ticket', 'PassengerId'], axis=1, inplace=True)","6b7c09ea":"test = pd.get_dummies(data = test, columns = ['Pclass', 'Sex', 'Embarked'])","ecf7bfa6":"test.head()","79ee6263":"train.head()","bd1a9cdf":"#train.Age = train.Age.apply(lambda x: 1 if x >= 18 else 0)\n#test.Age = test.Age.apply(lambda x: 1 if x >= 18 else 0)","6cb77151":"def age(x):\n    if x < 5:\n        return 'enfant'\n    elif x < 21:\n        return 'teen'\n    elif x < 41:\n        return 'adult'\n    else:\n        return 'old'\n    return x\n    \n    \n    ","c0c2c5e6":"train['Age Stage'] = train['Age'].apply(age)","0117efdc":"train.head()","67e32033":"test['Age Stage'] = test['Age'].apply(age)","ba39e1fe":"test.head()","cbc1deb7":"train = pd.get_dummies(data=train, columns=['Age Stage'])\ntest = pd.get_dummies(data=test, columns=['Age Stage'])","5cc5e89e":"train.head()","37866578":"X = train[['Name', 'Age', 'Fare', 'With Someone or Not', 'Pclass_1', 'Pclass_2', 'Pclass_3',\n       'Sex_female', 'Sex_male', 'Embarked_C', 'Embarked_Q', 'Embarked_S', 'Age Stage_adult', 'Age Stage_enfant', \n          'Age Stage_old', 'Age Stage_teen']]\nY = train['Survived']","d4ae4383":"X.head()","95359c33":"test.head()","48210a94":"train_test_data = [X, test] # combining train and test dataset\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\nX['Title'].value_counts()","ae6559f3":"test['Title'].value_counts()","001362d7":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","fad0db0c":"X.drop(columns=['Name'], axis=1, inplace=True)\ntest.drop(columns=['Name'], axis=1, inplace=True)","dde8f5be":"#X['Fare'] = minmax_scale(X['Fare'])\n#test['Fare'] = minmax_scale(test['Fare'])\n#X['Age'] = minmax_scale(X['Age'])\n#test['Age'] = minmax_scale(test['Age'])\n\nsc_X = MinMaxScaler()\nX = sc_X.fit_transform(X)\ntest = sc_X.transform(test)\nX = pd.DataFrame(X)\ntest = pd.DataFrame(test)","ad96a49b":"X.head()","4d7974cb":"test.head()","e029017e":"#X_train, X_test, y_train, y_test = train_test_split(X, Y, random_state = 0, test_size = 0.2)","55361b1f":"log = LogisticRegression()\nparam_name = 'random_state'\nparam_range = [0]\ntrain_scores, valid_scores = validation_curve(log, X, Y,\n                                              param_name,param_range,cv=10)","39849b4c":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X, Y)\ny_pred = random_forest.predict(X)\naccuracy_score(Y, y_pred)","0a4ec700":"param_grid = {'max_depth': np.arange(1, 10),\n              'criterion': ['gini', 'entropy']}\n\ntree = GridSearchCV(DecisionTreeClassifier(random_state =0), param_grid, scoring='accuracy')\n\ntree.fit(X, Y)","3b343375":"tree.best_params_\n","ceea3518":"dtree=DecisionTreeClassifier(random_state =0, criterion= 'entropy', max_depth= 6)\ndtree.fit(X, Y)","e3745b87":"tree_acc = accuracy_score(Y, dtree.predict(X))\ntree_acc","81624703":"X.head()","38c4a8e7":"test.columns","92ec1c53":"X.head()","158f203e":"test.head()","4b4a7260":"svm_clf = SVC(random_state=0)\nsvm_parm = {'kernel': ['rbf', 'poly'], 'C': [0.1, 0.5, 1, 5, 10, 50, 100, 500, 1000], 'degree': [3, 5, 7], \n            'gamma': ['auto', 'scale']}\n\n\nclf = GridSearchCV(svm_clf, svm_parm, cv=5)\nclf.fit(X, Y)","f3881d88":"#pred = clf.predict(test)\n#clf.best_params_","9aabfa9e":"#cols = ['PassengerId', 'Survived']\n#submit_df = pd.DataFrame(np.hstack((passID.values.reshape(-1,1),pred.reshape(-1,1))), \n#                        columns=cols)","13ad3542":"#submit_df.to_csv('submission.csv', index=False)","d81066f4":"#submit_df.head()","8acc7c7f":"\nclf1 = RandomForestClassifier(max_depth=7, n_estimators=100)\nclf1.fit(X, Y)\nclf2 = GradientBoostingClassifier(n_estimators= 100, learning_rate=1.0, max_depth=1, random_state=0)\nclf2.fit(X, Y)\nclf3 = SVC(C=10, degree=3, gamma='auto', kernel='rbf', probability=True)\nclf3.fit(X, Y)\n","d1313129":"eclf = VotingClassifier(estimators=[('RandF', clf1), ('Grad', clf2), ('SVC', clf3)], voting='soft', weights=(2.0, 2.5, 2.5))","efa44528":"eclf.fit(X, Y)","09aa20c9":"predf = eclf.predict(test)","cdbe12b6":"cols = ['PassengerId', 'Survived']\nsubmit_df = pd.DataFrame(np.hstack((passID.values.reshape(-1,1),predf.reshape(-1,1))), \n                         columns=cols)","a18734b6":"#submit_df.to_csv('submission.csv', index=False)","8f52b3fa":"cabin_tr = pd.DataFrame(cabin_tr)\nX = pd.DataFrame(X)\ncab_null = pd.concat([X, cabin_tr], axis = 1)\ncab_null.head()","679649cf":"cab_notnull = cab_null[cab_null.Cabin.notnull()]\ncab_notnull.head()","c26fe903":"cab_notnull['cc'] = cab_notnull.Cabin.str.slice(start=0, stop=1)","446289ca":"le = preprocessing.LabelEncoder()#\ncab_notnull['ccl'] =le.fit_transform(cab_notnull.cc)\ncab_notnull.drop(['cc', 'Cabin'], axis=1, inplace=True)\ncab_notnull.head()","a4403505":"x_cab = cab_notnull.iloc[:, 0:16]","6258be52":"y_cab = cab_notnull.iloc[:, -1]","282e9b76":"\nclf_cab = RandomForestClassifier(max_depth=7, n_estimators=100)\nclf_cab.fit(x_cab, y_cab)","006daa25":"cab_null = cab_null.drop(columns='Cabin')","32a2dc5c":"cab_new = clf_cab.predict(cab_null)","35b2160b":"cab_new = pd.DataFrame(cab_new)\ncabfinal = pd.concat([cab_null, cab_new], axis=1)\ncabfinal.head()","795e6ec1":"cab_new_test = clf_cab.predict(test)","c7f24ae0":"cab_new_test = pd.DataFrame(cab_new_test)\ncabfinaltest = pd.concat([test, cab_new_test], axis=1)\ncabfinaltest.head()","0b8588a5":"\nclf1 = RandomForestClassifier(max_depth=7, n_estimators=100)\nclf1.fit(cabfinal, Y)\nclf2 = GradientBoostingClassifier(n_estimators= 100, learning_rate=1.0, max_depth=1, random_state=0)\nclf2.fit(cabfinal, Y)\nclf3 = SVC(C=10, degree=3, gamma='auto', kernel='rbf', probability=True)\nclf3.fit(cabfinal, Y)\n","c981603b":"eclf = VotingClassifier(estimators=[('RandF', clf1), ('Grad', clf2), ('SVC', clf3)], voting='soft', weights=(2.0, 2.5, 2.5))","c1a414a8":"eclf.fit(cabfinal, Y)","d3feadcc":"predf = eclf.predict(cabfinaltest)","52b89ae9":"cols = ['PassengerId', 'Survived']\nsubmit_df = pd.DataFrame(np.hstack((passID.values.reshape(-1,1),predf.reshape(-1,1))), \n                         columns=cols)","6c3d0aec":"submit_df.to_csv('submission_cabin.csv', index=False)","32adab3b":"submit_df","5bcdf61e":"# Bagging","94d43ff9":"[](http:\/\/)# Cabin","463fb45c":"# cabin **"}}