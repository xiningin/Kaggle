{"cell_type":{"6acfa320":"code","171a0072":"code","e58b269a":"code","1590a7b4":"code","e371f9ce":"code","67362bc2":"code","fcee3a34":"code","d3419660":"code","44ac65de":"code","a851981a":"code","7e3edd41":"code","ca3240e6":"code","d9c0efcd":"code","2498cc03":"code","97948313":"code","6edba520":"code","249c4d5c":"code","42a0700c":"code","58a3a662":"code","4b142c1a":"code","c15d7fe3":"code","f0cc08ee":"code","402fe37e":"code","3c58d2c2":"code","1ec672be":"code","997077cf":"code","ef7bcfca":"code","12fc94b3":"code","407f09d5":"code","e5425716":"code","60646c97":"code","ff0bd5da":"code","d153fd27":"code","ec450d26":"code","a8c59b0d":"code","7f183dca":"code","8bcbdf60":"code","e5dbf2a0":"code","bfbe0f38":"code","d2e3222b":"code","069fe30b":"code","c817ed11":"code","d5f85c4a":"code","631f92d2":"code","86744677":"code","8137194e":"code","74a44d4e":"code","f82480d8":"code","b9faf08d":"code","046be924":"code","cc63edd6":"code","6ee106f1":"markdown","435e52d0":"markdown","b2131de6":"markdown","2a46c575":"markdown","fdea7458":"markdown"},"source":{"6acfa320":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","171a0072":"training_data=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n","e58b269a":"#number of rows and columns\ntraining_data.shape","1590a7b4":"#columns in data\ntraining_data.columns","e371f9ce":"training_data.head(10)","67362bc2":"#passengers with 0 Fare\ntraining_data[training_data['Fare']==0]","fcee3a34":"training_data.info()","d3419660":"#number of missing values in each column\ntraining_data.isna().sum()","44ac65de":"#percentage of missing values\nNullValues=training_data.isnull().sum()\/len(training_data)\nNullValues*100\n","a851981a":"#look at numerical and categorical data\ndf_num=training_data[['Age','SibSp','Parch','Fare']]\ndf_cat=training_data[['Survived','Pclass','Sex','Embarked','Ticket','Cabin']]","7e3edd41":"df_num.describe()","ca3240e6":"#number of rows with 0 fare value\ndf_num['Fare'].isin([0]).sum()","d9c0efcd":"import matplotlib.pyplot as plt\n\ndf_num.hist(figsize=(15,10))\nplt.show()","2498cc03":"# corelation between numerical data columns\nprint(df_num.corr())","97948313":"import seaborn as sns\nsns.heatmap(df_num.corr(),annot=True)","6edba520":"pd.pivot_table(training_data,index='Survived',values=['Age','SibSp','Parch','Fare'])","249c4d5c":"for i in df_cat.columns:\n    \n    sns.barplot(x = df_cat[i].value_counts().index,y = df_cat[i].value_counts()).set_title(i)\n    plt.show()","42a0700c":"#number of survived base on column Sex\npd.pivot_table(training_data,index='Survived', columns='Sex',values='Ticket',aggfunc='count')","58a3a662":"g = sns.catplot(x=\"Sex\", hue=\"Sex\", col=\"Survived\",\n                data=training_data, kind=\"count\",\n                height=4, aspect=.7);\nplt.show()","4b142c1a":"g = sns.catplot(x=\"Pclass\", hue=\"Sex\", col=\"Survived\",\n                data=training_data, kind=\"count\",\n                height=4, aspect=.7);\nplt.show()","c15d7fe3":"pd.pivot_table(training_data,index='Survived', columns='Pclass',values='Ticket',aggfunc='count')","f0cc08ee":"pd.pivot_table(training_data,index='Survived', columns='Embarked',values='Ticket',aggfunc='count')","402fe37e":"g = sns.catplot(x=\"Embarked\", col=\"Survived\",\n                data=training_data, kind=\"count\",\n                height=4, aspect=.7);\nplt.show()","3c58d2c2":"g = sns.catplot(x=\"Embarked\", hue=\"Sex\", col=\"Survived\",\n                data=training_data, kind=\"count\",\n                height=4, aspect=.7);\nplt.show()","1ec672be":"groups=training_data.groupby(['Embarked', 'Pclass','Survived','Sex'],as_index=False)['PassengerId'].count()\ngroups.set_index('Embarked')","997077cf":"import plotly.express as px\nimport plotly.graph_objs as go\n\nfig = px.bar(groups, x='Embarked', y='Survived')\nfig.show()","ef7bcfca":"sns.catplot(x=\"Embarked\",y='Survived', hue=\"Sex\",\n               data=groups , kind='bar')","12fc94b3":"\nclassdata=pd.DataFrame(training_data.groupby('Embarked')['Pclass'].value_counts())\nclassdata","407f09d5":"training_data['Name_title']=training_data.Name.apply(lambda x:x.split(',')[1].split('.')[0].strip())\ntraining_data['Name_title'].value_counts()","e5425716":"training_data['Name_title'] = np.where(training_data['Name_title'].isin(['Mr','Miss','Mrs','Master']), training_data['Name_title'], 'Others')\ntraining_data['Name_title'].value_counts()","60646c97":"pd.pivot_table(training_data,index='Survived', columns='Name_title',values='Ticket',aggfunc='count')","ff0bd5da":"def plot_bar(dataframe,colname):\n    survived = dataframe[dataframe['Survived']==1][colname].value_counts()\n    dead = dataframe[dataframe['Survived']==0][colname].value_counts()\n    result = pd.DataFrame([survived,dead], index=['Survived','Dead'])\n    return result\n\nplt.figure(figsize=(7,6))\nplot_bar(training_data,'Name_title').plot(kind='bar')\nplt.show()","d153fd27":"training_data['Age'].max()","ec450d26":"bins = [0, 14,18, 24, 45, 65, 81]  # binning\nbin_names = ['child','young','young adult','adult','middle','senior'] # label tagging\ntraining_data['Age_title'] = pd.cut(training_data['Age'],\n                          bins = bins,\n                          labels=bin_names,\n                          include_lowest = True)\ntraining_data['Age_title'].value_counts()","a8c59b0d":"pd.pivot_table(training_data,index='Survived', columns='Age_title',values='Ticket',aggfunc='count')","7f183dca":"def plot_bar(dataframe,colname):\n    survived = dataframe[dataframe['Survived']==1][colname].value_counts()\n    dead = dataframe[dataframe['Survived']==0][colname].value_counts()\n    result = pd.DataFrame([survived,dead], index=['Survived','Dead'])\n    return result\n\nplt.figure(figsize=(7,6))\nplot_bar(training_data,'Age_title').plot(kind='bar')\nplt.show()","8bcbdf60":"#drop the cabin column\ntraining_data = training_data.drop('Cabin', axis=1)","e5dbf2a0":"cols=['Age_title','Pclass','Sex','Embarked','Parch','SibSp']\nn_rows=2\nn_columns=3\nfig,axs=plt.subplots(n_rows,n_columns,figsize=(n_columns*4.2,n_rows*4.2))\nfor r in range(0,n_rows):\n    for c in range(0,n_columns):\n        i=r*n_columns+c\n        ax=axs[r][c]\n        sns.countplot(x=training_data[cols[i]],hue=training_data['Survived'],ax=ax)\n        ax.set_title(cols[i])\n        ax.legend(title='Survived',loc='upper right')\nplt.tight_layout()\n                      \n","bfbe0f38":"test_data.columns","d2e3222b":"test_data.info()","069fe30b":"#set value for Sex column (0 =male  1 =female)\n\ntraining_data['Sex'] = training_data['Sex'].map({\"male\":0 , \"female\":1})\n\ntraining_data.head()","c817ed11":"training_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')","d5f85c4a":"test_data['Survived']=np.NaN\n","631f92d2":"training_data['train_test']=1\ntest_data['train_test']=0\n#combine the train and test data\ndata=pd.concat([training_data,test_data])\ndata.head(5)","86744677":"#set value for Sex column (0 =male  1 =female)\n\ndata['Sex'] = data['Sex'].map({\"male\":0 , \"female\":1})\ndata.head(5)","8137194e":"# drop passenger id and Cabin Ticket columns \ndata.drop(columns=['PassengerId', 'Ticket', 'Cabin'], inplace=True)\ndata.head()","74a44d4e":"#null column\ndata.isna().sum()","f82480d8":"# fill  the age column with \ndata.Age.fillna(data.Age.median(), inplace=True)\ndata.Fare.fillna(data.Fare.median(),inplace=True)\ndata.Embarked.fillna(data.Embarked.value_counts()[0],inplace=True)","b9faf08d":"#null column\ndata.isna().sum()","046be924":"# dummies variables for Embarked\n#embarked_dummies = pd.get_dummies(data.Embarked, prefix='Embarked')\n\n#data = pd.concat([data, embarked_dummies], axis=1)\ndata['Embarked'] = data['Embarked'].map({\"S\":0 , \"C\":1,\"Q\":2})\ndata.head(5)","cc63edd6":"data = pd.get_dummies(data, columns = [\"Embarked\"], prefix=\"Em\")\ndata.head(5)","6ee106f1":"# Prepare the Data","435e52d0":"## Exploratory data analysis(EDA)","b2131de6":"- **PassengerId:** index <br>\n- **Name:** Name of Passenger<br>\n- **Ticket:** Ticket number<br>\n- **Pclass:** Class (1\/2\/3) status.<br>\n- **Sex**: Sex (male,female)<br>\n- **Age:** Age<br>\n- **SibSp:** Number of family members(Siblings or Spouse) on board<br>\n- **Parch:** Number of Parents or Children on board<br>\n- **Fare:** Fare<br>\n- **Cabin:** Cabin Number<br>\n- **Embarked:** Port of Embarkation (C\/Q\/S)<br>\n","2a46c575":"## Load the data","fdea7458":"there are 687 missing values in cabin column 177 in Age column and 2 in embarked"}}