{"cell_type":{"0083f500":"code","4f1f34b1":"code","63cf1895":"code","eb39eb99":"code","5c894b60":"code","98450eca":"code","4c3b9a81":"code","26af6f1c":"code","5be70067":"code","3c4e0904":"code","1640da1f":"code","40468b81":"code","d4ce10d3":"code","11b8c22d":"code","09dd26c6":"code","ca2bea6b":"code","71a208db":"code","24d7f62c":"code","ccfbef72":"markdown","1eeb9238":"markdown","3ba72a8c":"markdown","a67403cb":"markdown","b9a62787":"markdown","90b31146":"markdown","c40ca8eb":"markdown","2afdd665":"markdown","b071c099":"markdown","2c7f2264":"markdown","e0d0856c":"markdown","24ce20ce":"markdown","9bc06fe5":"markdown","30401bfb":"markdown","b90d42c4":"markdown","53e71add":"markdown"},"source":{"0083f500":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\nsns.set()","4f1f34b1":"df=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntestdf=pd.read_csv(\"..\/input\/titanic\/test.csv\")\ndf.head()  #viewing data set ","63cf1895":"df.shape","eb39eb99":"df.describe()","5c894b60":"combine = [df, testdf] #  making a list to ease our data wrangling \ndf.info()               #returns information about the data set ","98450eca":"mean=df[\"Age\"].mean()\nfor dataset in combine:\n dataset[\"Age\"].replace(np.nan,mean,inplace=True)     #inplace = true makes changes in your orignal dataset\ndf.info()\n","4c3b9a81":"testdf.info()","26af6f1c":"#Getting frequent Value of Emabark \nfreq_port =df.Embarked.dropna().mode()[0]\nfreq_port                             ","5be70067":"#Replacing NULL values by frequent \ndf['Embarked'].fillna(freq_port,inplace=True)         \nfor dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)","3c4e0904":"#Changing Categorical values to Integer \nfor dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ndf.head()  #display top 5 entries ","1640da1f":"for dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\ndf.head()","40468b81":"#Replacing Null by Median \ndf['Fare'].fillna(df['Fare'].dropna().median(), inplace=True)\ntestdf['Fare'].fillna(testdf['Fare'].dropna().median(), inplace=True)\n","d4ce10d3":"corr_matrix=df.corr()      #function of pandas dataframe\ncorr_matrix['Survived'].sort_values(ascending=False)","11b8c22d":"Ytest=df[\"Survived\"].copy()\nXtest=testdf.drop([\"Name\",\"PassengerId\",\"Cabin\",\"Ticket\"],axis=1)\nXtrain=df.drop([\"Name\",\"PassengerId\",\"Survived\",\"Cabin\",\"Ticket\"],axis=1)\nYtrain=df[\"Survived\"].copy()","09dd26c6":"Xtest.info()","ca2bea6b":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlogreg.fit(Xtrain, Ytrain)\nY_pred = logreg.predict(Xtest)\nacc_log = round(logreg.score(Xtrain, Ytrain) * 100, 2)\nacc_log","71a208db":"\n# Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(Xtrain, Ytrain)\nY_pred = random_forest.predict(Xtest)\nrandom_forest.score(Xtrain, Ytrain)\nacc_random_forest = round(random_forest.score(Xtrain, Ytrain) * 100, 2)\nacc_random_forest","24d7f62c":"submission = pd.DataFrame({\n        \"PassengerId\": testdf[\"PassengerId\"],\n        \"Survived\": Y_pred\n        })\nsubmission.head()\n#To save file - \nsubmission.to_csv('submission5.csv', index=False) \n\n    ","ccfbef72":"# **Fill Null value of Embark and changing Categorical to Integer Value**","1eeb9238":"We Can See Random Forest is Giving us Good result ","3ba72a8c":"## *NOTE -*\n**While working on this dataset which I downloaded , I made changes when I was coding so you may find it error less . The              changes made were -**\n*  Embark column changed to int from object(char)\n*  Missing vales of age were replaced \n*  Sex data type was changed to int from object \n\n### **If You Like This Notebook Please Share and upvote it**","a67403cb":"**Now you will observe that Age has no null values**","b9a62787":"**Below is a brief information about each columns of the dataset:**\n1. PassengerId: An unique index for passenger rows. It starts from 1 for first row and increments by 1 for every new rows.\n \n1. Survived: Shows if the passenger survived or not. 1 stands for survived and 0 stands for not survived.\n \n1. Pclass: Ticket class. 1 stands for First class ticket. 2 stands for Second class ticket. 3 stands for Third class ticket.\n \n1. Name: Passenger's name. Name also contain title. \"Mr\" for man. \"Mrs\" for woman. \"Miss\" for girl. \"Master\" for boy.\n \n1. Sex: Passenger's sex. It's either Male or Female.\n \n1. Age: Passenger's age. \"NaN\" values in this column indicates that the age of that particular passenger has not been recorded.\n \n1. SibSp: Number of siblings or spouses travelling with each passenger.\n \n1. Parch: Number of parents of children travelling with each passenger.\n \n1. Ticket: Ticket number.\n \n1. Fare: How much money the passenger has paid for the travel journey.\n \n1. Cabin: Cabin number of the passenger. \"NaN\" values in this column indicates that the cabin number of that particular passenger has not been recorded.\n \n1. Embarked: Port from where the particular passenger was embarked\/boarded.","90b31146":"**You can see some values are missing in Age, So we will fill it with mean age** ","c40ca8eb":"***Droping Unwanted Fields and preparing train test set***","2afdd665":"# **Preparing DataSet For Training**","b071c099":"# **Titanic: Machine Learning from Disaster Prediction:**","2c7f2264":"# **Finding Correleation**","e0d0856c":"# **Getting data set**","24ce20ce":"We can see that there are 891 rows and 12 columns in our training dataset.","9bc06fe5":"### Important Links:\n* Competition: https:\/\/www.kaggle.com\/c\/titanic\n* Submission: https:\/\/www.kaggle.com\/c\/titanic\/submit\n* Notebook: https:\/\/www.kaggle.com\/rahulrajpandey31\/titanic-survival-complete-guide","30401bfb":"**You can See now that Embark is of int data type\nDoing same for SEX**","b90d42c4":"### Describing data","53e71add":"### Finding Shape of data"}}