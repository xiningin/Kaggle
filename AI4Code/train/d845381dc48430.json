{"cell_type":{"45f70e07":"code","fe62dfb3":"code","646d5e37":"code","a9d26ed8":"code","6c6acb88":"code","e4a7b25f":"code","5bfda3cd":"code","c41c7c1d":"code","991466c4":"code","d494bfe1":"code","ced4f286":"code","a9e40367":"code","54a64205":"code","f9b95b73":"code","bfe5330b":"code","5bbba88e":"code","3065b345":"code","71133063":"code","9b14d78b":"code","2ea21591":"code","1f9a924c":"code","d14d7b73":"code","bb2d6200":"code","6669e5ec":"code","53eb3290":"code","3e74bfbf":"code","973f2f4b":"code","784044b8":"code","e3a8beb3":"code","1c4fa9ba":"code","59e2b948":"code","bdf1321a":"code","bfbf0ae3":"code","ae44c105":"code","287498c4":"code","065e6865":"code","7e0a0c7f":"code","deb1058e":"code","e1001f88":"code","86f00453":"code","33d88360":"markdown","808b9338":"markdown","ce434cfc":"markdown","fa29cc58":"markdown","5d498eda":"markdown","2e907d29":"markdown","aee81129":"markdown","17b06ee9":"markdown","86c30ec7":"markdown","3979da99":"markdown","45238f5b":"markdown","ad0aad39":"markdown","6dfa06a5":"markdown","72d86e1d":"markdown","4aba129e":"markdown","d699747b":"markdown"},"source":{"45f70e07":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","fe62dfb3":"from sklearn.model_selection import train_test_split","646d5e37":"from sklearn.linear_model import LogisticRegression","a9d26ed8":"from sklearn.metrics import confusion_matrix, accuracy_score","6c6acb88":"from sklearn.neighbors import KNeighborsClassifier","e4a7b25f":"import warnings\nwarnings.filterwarnings(\"ignore\")","5bfda3cd":"from sklearn.datasets import load_iris","c41c7c1d":"from sklearn.model_selection import GridSearchCV","991466c4":"dataset = load_iris()","d494bfe1":"dataset.feature_names","ced4f286":"features = pd.DataFrame(dataset.data, columns = dataset.feature_names)\nfeatures","a9e40367":"labels = pd.DataFrame(dataset.target, columns = [\"Species\"])\nlabels","54a64205":"dataset.target_names","f9b95b73":"features.shape","bfe5330b":"labels.shape","5bbba88e":"df = pd.concat((features, labels), axis = 1)\ndf","3065b345":"df.info()","71133063":"df.describe()","9b14d78b":"df.isna().sum()","2ea21591":"featuresTraining, featuresTesting, labelsTraining, labelsTesting = train_test_split(features, labels, test_size = 0.2, random_state = 99)","1f9a924c":"logisticRegressor = LogisticRegression()\nlogisticRegressor.fit(featuresTraining, labelsTraining)","d14d7b73":"predictions = logisticRegressor.predict(featuresTesting)","bb2d6200":"# confusion_matrix(labelsTesting, predictions)\nconfusion_matrix(predictions, labelsTesting)","6669e5ec":"accuracy_score(labelsTesting, predictions)","53eb3290":"accuracy_score(predictions, labelsTesting)","3e74bfbf":"knnClassifier = KNeighborsClassifier()\nknnClassifier.fit(featuresTraining, labelsTraining)","973f2f4b":"knnPredictions = knnClassifier.predict(featuresTesting)","784044b8":"confusion_matrix(knnPredictions, labelsTesting)","e3a8beb3":"accuracy_score(knnPredictions, labelsTesting)","1c4fa9ba":"solvers = ['newton-cg', 'lbfgs', 'liblinear']\npenalty = ['l2', '9', '15']\nc_values = [100, 10, 1.0, 0.1, 0.01]\ngrid = dict(solver=solvers,penalty=penalty,C=c_values)\nclassifier = GridSearchCV(LogisticRegression(), grid, cv = 10)\ngrid_result = classifier.fit(featuresTraining, labelsTraining)","59e2b948":"grid_result.best_params_","bdf1321a":"classifier = LogisticRegression(C = 100, penalty = 'l2', solver = 'newton-cg')\nclassifier.fit(featuresTraining, labelsTraining)","bfbf0ae3":"predictions = classifier.predict(featuresTesting)","ae44c105":"confusion_matrix(predictions, labelsTesting)","287498c4":"accuracy_score(predictions, labelsTesting)","065e6865":"grid = [{'n_neighbors': list(range(2, 10)), 'weights': ['uniform','distance']}]\nclassifier = GridSearchCV(KNeighborsClassifier(), grid, cv = 10)\ngrid_result = classifier.fit(featuresTraining, labelsTraining)","7e0a0c7f":"grid_result.best_params_","deb1058e":"knnClassifier = KNeighborsClassifier(n_neighbors = 8, weights = 'uniform')\nknnClassifier.fit(featuresTraining, labelsTraining)","e1001f88":"predictions = knnClassifier.predict(featuresTesting)","86f00453":"accuracy_score(predictions, labelsTesting)","33d88360":"### Hyperparameter Tuning","808b9338":"###### Accuracy Score - KNN","ce434cfc":"## Logistic Regression Model","fa29cc58":"#### KNN Algorithm","5d498eda":"###### Confusion Matrix - KNN","2e907d29":"#### Splitting the dataset into Training and Testing datasets","aee81129":"#### Loading Iris Dataset from sklearn.datasets","17b06ee9":"The accuracy of Logistic Regression Algorithm has been increased from 0.93 to 0.96 after tuning the hyperparameters","86c30ec7":"#### Exploring the dataset","3979da99":"The accuracy of KNN Algorithm has also been increased from 0.93 to 0.96 after the tuning of hyperparameters","45238f5b":"## Iris Flowers Classification","ad0aad39":"## KNN Algorithm","6dfa06a5":"#### Importing the necessary libraries","72d86e1d":"###### Confusion Matrix - Logistic Regression","4aba129e":"#### Logistic Regression","d699747b":"###### Accuracy Score - Logistic Regression"}}