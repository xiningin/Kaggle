{"cell_type":{"f7c8e8e0":"code","d58ce1bb":"code","b2053142":"code","c79ef34d":"code","3c269baa":"code","d6f2f03b":"code","73ac6f12":"code","b9c303eb":"code","aa8158c4":"code","fb470618":"code","8be3a127":"code","1be51d72":"code","1d8244f9":"code","58d46965":"code","e2bd5193":"code","523af4c1":"code","ea8fcccd":"code","7c1f4b56":"code","e8605481":"code","2f3a4ac4":"code","cf652a39":"code","e9343ea0":"code","f22989b9":"code","426185ab":"markdown","1dd5734d":"markdown","1769e236":"markdown","77a23c87":"markdown","7bdcae61":"markdown","9c5a92fe":"markdown","8cb45f8c":"markdown","a7c82884":"markdown","376a35a9":"markdown","00edaadf":"markdown","8018be24":"markdown","5dde9bbd":"markdown"},"source":{"f7c8e8e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d58ce1bb":"data = pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\n\n#We see that we're working with a DataFrame\nprint(type(data))\n\n#first we check how many datapoints and features we have\nprint(data.shape)\nprint(data.columns)\n\n#we use head(10) to check how the data roughly looks like with the first 10 samples\ndisplay(data.head(10))\n\n#display column data types \nprint(data.columns.to_series().groupby(data.dtypes).groups)\n","b2053142":"float_cats = data[['age', 'avg_glucose_level', 'bmi']]\ndisplay(float_cats.describe())","c79ef34d":"#Duplicates\nduplicates= data.duplicated('id', keep =False)\nduplicated_strokes= data[duplicates].sort_values('id')\nprint(duplicated_strokes)","3c269baa":"#Missing values\nimport missingno as msno\nnull_values= data.isnull().value_counts()\nprint(null_values)\nmsno.matrix(data)","d6f2f03b":"#Sort by age\nage_sorted= data.sort_values(by= \"age\")\ndisplay(age_sorted.head(10))\nmsno.matrix(age_sorted)\n\n#Sort by avg glucose level\ngluc_sorted= data.sort_values(by= 'avg_glucose_level')\nmsno.matrix(gluc_sorted)","73ac6f12":"#Number of males and females\nprint(data['gender'].value_counts())\n\n#Categorize data according to gender and check that gender only has one of the two categories\ndata_female= data[data['gender']=='Female']\nprint(data_female['gender'].unique())\ndata_male= data[data['gender']=='Male']\nprint(data_male['gender'].unique())\n\n\n#For female- number of null values in bmi\nf_null_values= data_female['bmi'].isna().sum()\nprint(\"Rate of missing bmi values for females: \" + str(round(((f_null_values\/2994)*100),2))+ \"%\")\n\n#For male\nm_null_values= data_male['bmi'].isna().sum()\nprint(\"Rate of missing bmi values for males: \" + str(round(((m_null_values\/2115)*100),2)) + \"%\")","b9c303eb":"#Isolate data points with missing bmi values\n\nmissing_bmi= data[data['bmi'].isna()]\ncomplete_bmi= data[~data['bmi'].isna()]\nprint(missing_bmi.head(5))\n\nimport matplotlib as plt\n\nmissing_bmi['age'].plot(kind= 'hist', bins= 40, color= 'blue', alpha= 0.5)\ncomplete_bmi['age'].plot(kind= 'hist', bins= 40, color= 'red', alpha= 0.1)","aa8158c4":"missing_bmi['age'].plot(kind= 'hist', bins= 40, color= 'blue')","fb470618":"missing_bmi['hypertension'].plot(kind= 'hist')","8be3a127":"complete_bmi['hypertension'].plot(kind= 'hist')","1be51d72":"missing_bmi['heart_disease'].plot(kind= 'hist')","1d8244f9":"complete_bmi['heart_disease'].plot(kind= 'hist')","58d46965":"missing_bmi['ever_married'].value_counts().plot(kind= 'bar')","e2bd5193":"complete_bmi['ever_married'].value_counts().plot(kind= 'bar')","523af4c1":"missing_bmi['work_type'].value_counts().plot(kind= 'bar')","ea8fcccd":"complete_bmi['work_type'].value_counts().plot(kind= 'bar')","7c1f4b56":"missing_bmi['Residence_type'].value_counts().plot(kind= 'bar')","e8605481":"complete_bmi['Residence_type'].value_counts().plot(kind= 'bar')","2f3a4ac4":"missing_bmi['smoking_status'].value_counts().plot(kind= 'bar')","cf652a39":"complete_bmi['smoking_status'].value_counts().plot(kind= 'bar')","e9343ea0":"missing_bmi['stroke'].value_counts().plot(kind= 'bar')","f22989b9":"complete_bmi['stroke'].value_counts().plot(kind= 'bar')","426185ab":"The difference isn't that obvious but let's do some more digging. Maybe plotting it would be more efficient.\n\n","1dd5734d":"* We can check the statistics for float columns such as age, avg_glucose_level, and bmi.\n* We also note that we have missing values in bmi and possibly in other features as well.    \n  \nOur next steps will be to check for duplicates and missing values then we proceed to get the statistics of our data.\n","1769e236":"* Participant age ranges from 29 days old to 82 years\n* minimum bmi is 10.3 while maximum is 97.6","77a23c87":"We first look at our data to see what we're dealing with.  \n\nSome of the steps we can take to understand our data:  \n* Get the mean, median, mode\n* Check for outliers and missing data\n* Form boxplots to view our distribution\n  \nFormally, the steps we'll take to carry out our prediction are as below:  \n1. Understanding the data\n2. Cleaning the data\n3. Create our prediction models\n4. Test and validate our prediction models\n5. Conclude with insights","7bdcae61":"From our plots we gather a few things:\n* A higher number of stroke patients are made up of those with missing bmi data.\n* Those with missing bmi values tend to have hypertension, history of heart disease, and are older people. \n* There's a noticeable number of them who are self-employed as well.\n\nSince missing bmi values seem to have some significant correlation with the other values that are heavily correlated with the occurence of stroke. It would be wiser to input a value that is closer to those who are older, with hypertension, history of heart disease, and self-employed.\n","9c5a92fe":"It seems as though older participants and those with higher average glucose levels tend to have missing bmi values.","8cb45f8c":"## Age","a7c82884":"## Hypertension","376a35a9":"## Ever married","00edaadf":"So we see that this data set doesn't have duplicated data since the 'extraction' is an empty DataFrame.","8018be24":"When it comes to null values we see that bmi has 201 missing values and it's the only column that has missing values.\nRather than erasing 200+ data points, let's try and understand why some bmi values are missing.","5dde9bbd":"## Heart disease"}}