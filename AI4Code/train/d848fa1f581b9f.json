{"cell_type":{"e37e7f0e":"code","dac13165":"code","72189d75":"code","dde1b271":"code","defc95df":"code","d68d728b":"code","af0cb6bf":"code","b7b3aedb":"code","44732695":"code","88160c1b":"code","aec1c56e":"code","5b067537":"code","098ea7d6":"code","c6e2222c":"code","6beecf9e":"code","e09b8b2f":"code","68bbd2c8":"code","938efa87":"code","1aa5b8fc":"code","8805e543":"code","4ae9c296":"code","499a65d3":"code","ef73a8c7":"code","9fe1dd15":"code","85b8d03d":"code","e185be47":"code","b46672c2":"code","8cd79e01":"code","af082a00":"code","82c425a4":"code","617973c9":"code","1ef63df2":"code","ba9a079c":"code","ac528784":"code","367a0c49":"code","9157b726":"code","b044936f":"code","f6266235":"code","daeec496":"code","9010d789":"code","c9b896f6":"code","d756a823":"code","dd5e9bec":"code","200b2ffd":"code","00df9815":"code","6d60d1e5":"code","e5dd12e3":"code","836d5397":"code","e85665df":"code","638a6310":"code","8da8bdeb":"code","726c231f":"code","ed4c8346":"code","f00f9aa8":"code","08805640":"code","ce322ab2":"code","5ebafb5f":"code","1a8a2bc1":"code","cfd46ab6":"code","646a7127":"code","4c7aac0e":"code","83ffcd6e":"code","befacbb9":"code","919b8ee8":"markdown","e7b3cfe8":"markdown","b75e597e":"markdown","6e690b5f":"markdown","4775a17a":"markdown","1879b549":"markdown","b48ccad6":"markdown","7c8b3b2c":"markdown","d02cedc9":"markdown","0cb4cdf1":"markdown","42ca38ec":"markdown","6672c7eb":"markdown","cf8af619":"markdown","56b6a59b":"markdown"},"source":{"e37e7f0e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dac13165":"#import required libraries.\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport numpy as np\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nimport seaborn as sns\nimport plotly.express as px\nfrom datetime import datetime as dt\nfrom datetime import timedelta\n#from pytrends.request import TrendReq\nfrom fbprophet import Prophet","72189d75":"# get data\ndata = pd.read_csv(r'\/kaggle\/input\/covid19-visualization-and-analysis\/covid.csv', error_bad_lines = False)\n\nrecovered = pd.read_csv(r'\/kaggle\/input\/covid19-visualization-and-analysis\/recovered.csv', error_bad_lines = False)\nrecovered.columns = ['date', 'Recovered']\nrecovered.index = pd.to_datetime(recovered['date'])\nrecovered = recovered['Recovered'].astype('int64')\nrecovered","dde1b271":"# clean dataframes \ndata.drop('Unnamed: 0',axis = 1, inplace = True)","defc95df":"\ncases = data[['date', 'state', 'cases', 'deaths']]","d68d728b":"us_states = {\n        'Alaska': 'AK',\n        'Alabama': 'AL',\n        'Arkansas': 'AR',\n        'American Somoa': 'AS',\n        'Arizona': 'AZ',\n        'California': 'CA',\n        'Colorado': 'CO',\n        'Connecticut': 'CT',\n        'District of Colombia': 'DC',\n        'Delaware': 'DE',\n        'Florida': 'FL',\n        'Georgia': 'GA',\n        'Hawaii': 'HI',\n        'Iowa': 'IA',\n        'Idaho': 'ID',\n        'Illinois': 'IL',\n        'Indiana': 'IN',\n        'Kansas': 'KS',\n        'Kentucky': 'KY',\n        'Louisiana': 'LA',\n        'Massachusetts': 'MA',\n        'Maryland': 'MD',\n        'Maine': 'ME',\n        'Michigan': 'MI',\n        'Minnesota': 'MN',\n        'Missouri': 'MO',\n        'Mississippi': 'MS',\n        'Montana': 'MT',\n        'National': 'NA',\n        'North Carolina': 'NC',\n        'North Dakota': 'ND',\n        'Nebraska': 'NE',\n        'New Hampshire': 'NH',\n        'New Jersey': 'NJ',\n        'New Mexico': 'NM',\n        'Nevada': 'NV',\n        'New York': 'NY',\n        'Ohio': 'OH',\n        'Oklahoma': 'OK',\n        'Oregon': 'OR',\n        'Pennsylvania': 'PA',\n        'Puerto Rico': 'PR',\n        'Rhode Island': 'RI',\n        'South Carolina': 'SC',\n        'South Dakota': 'SD',\n        'Tennessee': 'TN',\n        'Texas': 'TX',\n        'Utah': 'UT',\n        'Virginia': 'VA',\n        'Virgin Islands': 'VI',\n        'Vermont': 'VT',\n        'Washington': 'WA',\n        'Wisconsin': 'WI',\n        'West Virginia': 'WV',\n        'Wyoming': 'WY'\n}","af0cb6bf":"cases['abbrev'] = cases['state'].map(us_states).fillna(cases['state'])\ncases","b7b3aedb":"\nfig = px.choropleth(cases,\n                   locations='abbrev',\n                   color='cases',\n                   hover_name = 'abbrev',\n                   locationmode = 'USA-states',\n                   animation_frame = 'date')\n\nfig.update_layout(\ntitle_text = 'Spread of Covid-19 in the United States',\ntitle_x = 0.5,\ngeo_scope = 'usa',\ngeo=dict(\nshowframe = False,\nshowcoastlines = False))\n\nfig.show()","44732695":"pop_data = pd.read_csv(r'\/kaggle\/input\/covid19-visualization-and-analysis\/pop_data.csv')","88160c1b":"#merge population to dataframe.\ncases = cases.merge(pop_data,\n          how = 'left',\n          left_on = 'state',\n          right_on = 'state')\ncases","aec1c56e":"#creating percentage column in dataframe.\ncases['percent'] = cases['cases'] \/ cases['population'] * 100","5b067537":"fig = px.choropleth(cases,\n                   locations='abbrev',\n                   color='percent',\n                   hover_name = 'abbrev',\n                   locationmode = 'USA-states',\n                   animation_frame = 'date')\n\nfig.update_layout(\ntitle_text = 'Spread of Covid-19 in the United States (%)',\ntitle_x = 0.5,\ngeo_scope = 'usa',\ngeo=dict(\nshowframe = False,\nshowcoastlines = False))\n\nfig.show()","098ea7d6":"sorted_cases = cases.sort_values('cases', ascending=False)\nstate_max_cases = sorted_cases.drop_duplicates('state')\nstate_max_cases.drop('abbrev', axis=1, inplace=True)","c6e2222c":"#top 10 states with most cases.\ncases_top10 = state_max_cases.nlargest(10, 'cases')\n\n#top 10 states with highest severity of cases.\npercent_top10 = state_max_cases.nlargest(10, 'percent')","6beecf9e":"\nfig, axes = plt.subplots(1, 2, sharex = False, sharey = False, figsize = (20,6))\nfig.suptitle(\"Covid-19 Case Statistics\", fontsize = 20)\naxes[0].set_title('Top 10 States with Most Cases', fontsize = 14)\naxes[0].set_xlabel('cases', fontsize = 12)\naxes[0].set_ylabel('state', fontsize = 12)\naxes[1].set_title('Top 10 States with Highest Severity', fontsize = 14)\naxes[1].set_xlabel('percent', fontsize = 12)\naxes[1].set_ylabel('state', fontsize = 12)\n\nsns.barplot(ax = axes[0], data = cases_top10, \n            y = 'state', \n            x = 'cases')\n\nsns.barplot(ax = axes[1], data = percent_top10, \n            y = 'state', \n            x = 'percent')","e09b8b2f":"#add countplot.\nfig, ax = plt.subplots(ncols=1, sharey = False, figsize = (10,20))\nplt.xticks(rotation=90)\nsns.barplot(y = state_max_cases['state'], x = state_max_cases['cases']).set_title('Statewide Covid-19 Cases')","68bbd2c8":"#death rate.\npercent_deaths = cases['deaths'] \/ cases['population'] * 100\ncases['death rate'] = percent_deaths","938efa87":"#choro map\nfig = px.choropleth(cases,\n                   locations='abbrev',\n                   color='deaths',\n                   hover_name = 'abbrev',\n                   locationmode = 'USA-states',\n                   animation_frame = 'date')\n\nfig.update_layout(\ntitle_text = 'Covid-19 Deaths in the United States',\ntitle_x = 0.5,\ngeo_scope = 'usa',\ngeo=dict(\nshowframe = False,\nshowcoastlines = False))\n\nfig.show()","1aa5b8fc":"fig = px.choropleth(cases,\n                   locations='abbrev',\n                   color='death rate',\n                   hover_name = 'abbrev',\n                   locationmode = 'USA-states',\n                   animation_frame = 'date')\n\nfig.update_layout(\ntitle_text = 'Covid-19 Death Rate in the United States',\ntitle_x = 0.5,\ngeo_scope = 'usa',\ngeo=dict(\nshowframe = False,\nshowcoastlines = False))\n\nfig.show()","8805e543":"sorted_deaths = cases.sort_values('deaths', ascending = False)\nstate_max_deaths = sorted_deaths.drop_duplicates('state')\nstate_max_deaths.drop('abbrev', axis=1, inplace=True)","4ae9c296":"#top 10 states with most deaths.\ndeaths_top10 = state_max_deaths.nlargest(10, 'deaths')\n\n#top 10 states with highest death rate.\ndeath_ratetop10 = state_max_deaths.nlargest(10, 'death rate')","499a65d3":"fig, axes = plt.subplots(1, 2, sharex = False, sharey = False, figsize = (20,6))\nfig.suptitle(\"Covid-19 Death Statistics\", fontsize = 20)\naxes[0].set_title('Top 10 States with Most Deaths', fontsize = 14)\naxes[0].set_xlabel('cases', fontsize = 12)\naxes[0].set_ylabel('state', fontsize = 12)\naxes[1].set_title('Top 10 States with Highest Severity', fontsize = 14)\naxes[1].set_xlabel('percent', fontsize = 12)\naxes[1].set_ylabel('state', fontsize = 12)\n\nsns.barplot(ax = axes[0], data = deaths_top10, \n            y = 'state', \n            x = 'deaths')\n\nsns.barplot(ax = axes[1], data = death_ratetop10, \n            y = 'state', \n            x = 'death rate')","ef73a8c7":"#add countplot. \nfig, ax = plt.subplots(ncols=1, sharey = False, figsize = (10,20))\nplt.xticks(rotation=90)\nsortedDeaths = state_max_cases.sort_values(by = ['deaths'], ascending = False)\nsns.barplot(y = sortedDeaths['state'], x = sortedDeaths['deaths']).set_title('Statewide Covid-19 Deaths')","9fe1dd15":"\ndate_deaths = data[['date', 'deaths']]\ndeaths_by_date = date_deaths.groupby('date')['deaths'].sum()\n\ndate_cases = data[['date', 'cases']]\ncases_by_date = date_cases.groupby('date')['cases'].sum()","85b8d03d":"\ndeaths_by_date.index = pd.to_datetime(deaths_by_date.index)\nmonths = mdates.MonthLocator()\n\n#plot deaths over time.\nfig, ax = plt.subplots(figsize = (16,8))\nmarker_style = dict(linewidth=2.5, linestyle = '-', marker = 'o', markersize = 3)\nax.plot(deaths_by_date, **marker_style)\nplt.ylabel(\"Deaths\", fontsize = 12)\nplt.title('Covid-19 Deaths in the United States', fontsize = 14)\n\n#format ticks\nax.xaxis.set_major_locator(months)\nax.grid(True)\n\nplt.show()","e185be47":"\ncases_by_date.index = pd.to_datetime(cases_by_date.index)\n\n#plot cases over time.\nfig, ax = plt.subplots(figsize = (16,8))\nmarker_style = dict(linewidth=2.5, linestyle = '-', marker = 'o', markersize = 3)\nax.plot(cases_by_date, **marker_style)\nplt.ylabel('Cases', fontsize = 12)\nplt.title('Covid-19 Cases in the United States', fontsize = 14)\n\n#formatting \nax.xaxis.set_major_locator(months)\nax.format_xdata = mdates.DateFormatter('%Y-%m-%d')\nax.format_ydata = lambda x: '$%1.2f' % x  \nax.grid(True)\n\nplt.show()","b46672c2":"recovered_by_date = pd.DataFrame(recovered)\nrecovered_by_date.index = pd.to_datetime(recovered_by_date.index)\n\n#plot cases over time.\nfig, ax = plt.subplots(figsize = (16,8))\nmarker_style = dict(linewidth=2.5, linestyle = '-', marker = 'o', markersize = 3)\nax.plot(recovered_by_date, **marker_style)\nplt.ylabel('Recovered', fontsize = 12)\nplt.xlabel('Date', fontsize = 12)\nplt.title('Covid-19 Recovered in the United States', fontsize = 14)\n\n#formatting \nax.xaxis.set_major_locator(months)\nax.format_xdata = mdates.DateFormatter('%Y-%m-%d')\nax.format_ydata = lambda x: '$%1.2f' % x  \nax.grid(True)\n\nplt.show()","8cd79e01":"#create cleaned dataframe for plot.\nrecovered.index = pd.to_datetime(recovered.index)\nplot_df = pd.DataFrame(cases_by_date)\n\n\nlabels = ['deaths', 'recovered']\ndfs = [deaths_by_date, recovered]\ni=0\nfor label in labels:\n    plot_df[label] = pd.DataFrame(dfs[i])\n    i+=1\nplot_df","af082a00":"#plot.\nfig, ax = plt.subplots(1, figsize = (16,8))\n\nplt.plot(plot_df['cases'], label = 'cases', color = 'blue', linewidth = 2.5, marker = 'o', markersize = 2)\nplt.plot(plot_df['recovered'], label = 'recovered', color = 'green', linewidth = 2.5, marker = 'o', markersize = 2)\nplt.plot(plot_df['deaths'], label = 'deaths', color = 'red', linewidth = 2.5, marker = 'o', markersize = 2, alpha = 0.8)\n\n\n#labels\nplt.xlabel('Date', fontsize = 14)\nplt.ylabel('Cases', fontsize = 14)\nplt.title('Covid-19 United States Cases - Confirmed, Deaths, Recovered', fontsize = 20)\nplt.legend()\n\n#formatting\nax.xaxis.set_major_locator(months)\nax.format_xdata = mdates.DateFormatter('%Y-%m-%d')\nax.format_ydata = lambda x: '$%1.2f' % x  \nax.grid(True)\nax.patch.set_facecolor('grey') #chance background color if needed. \nax.patch.set_alpha(0.2)","82c425a4":"\n#states affected over time. \nstates_affected = []\ncases_date = cases[['cases', 'date','state']]\nfor i, row in cases_date.iterrows():\n    if row['cases'] != 0:\n        states_affected.append(row)\nstates_affected = pd.DataFrame(states_affected)","617973c9":"#first 10 States to contract covid-19. \nsorted_dates = states_affected.sort_values('date', ascending = True)\nsorted_uniq_dates = sorted_dates.drop_duplicates('state')\nsorted_uniq_dates.head(10)","1ef63df2":"#spread of Covid-19 to New States.\nstate_counts = []\nfor i in range(0, len(sorted_uniq_dates)):\n    state_counts.append(i)\n\nsorted_uniq_dates['count'] = state_counts\n\nplt.figure(figsize = (16,8))\nplt.scatter(x = sorted_uniq_dates['date'], y = sorted_uniq_dates['count'])\nplt.plot(sorted_uniq_dates['date'], sorted_uniq_dates['count'], 'o--')\nplt.xticks(rotation=90)\nplt.title('Covid-19 Spread to New States', fontsize = 14)\nplt.ylabel('States Afflicted', fontsize = 12)\nplt.grid(True)","ba9a079c":"cases_by_date.index = pd.to_datetime(cases_by_date.index)\n\n#covid-19 daily new confirmed cases.\ndifference = cases_by_date.diff()\ndifference = difference.fillna(0)\nfig, ax = plt.subplots(figsize = (16,8))\n\nmarker_style = dict(linewidth=2.5, linestyle = '-', marker = 'o', markersize = 5)\nax.plot(difference, **marker_style)\n\n#labels\nplt.xlabel('Date', fontsize = 12)\nplt.ylabel('Cases', fontsize = 12)\nplt.title('Covid-19 Daily New Confirmed Cases')\n\n#formatting\nax.xaxis.set_major_locator(months)\nax.format_xdata = mdates.DateFormatter('%Y-%m-%d')\nax.format_ydata = lambda x: '$%1.2f' % x  \nax.grid(True)","ac528784":"difference = deaths_by_date.diff()\ndifference = difference.fillna(0)\nfig, ax = plt.subplots(figsize = (16,8))\n\n\nmarker_style = dict(linewidth=2.5, linestyle = '-', marker = 'o', markersize = 5)\nax.plot(difference, **marker_style)\n\n#labels\nplt.xlabel('Date', fontsize = 12)\nplt.ylabel('Cases', fontsize = 12)\nplt.title('Covid-19 Daily New Death Reports')\n\n#formatting\nax.xaxis.set_major_locator(months)\nax.format_xdata = mdates.DateFormatter('%Y-%m-%d')\nax.format_ydata = lambda x: '$%1.2f' % x  \nax.grid(True)","367a0c49":"#prepare data.\ndata = data.merge(pop_data,\n          how = 'left',\n          left_on = 'state',\n          right_on = 'state')","9157b726":"democratic = ['Washington', 'Oregon', 'Nevada', 'California', 'Colorado', 'New Mexico', 'Illinois', 'Minnesota', 'Virginia',\n             'Maine', 'New York', 'New Hampshire', 'Vermont', 'Massachusetts', 'Rhode Island', 'Connecticut', 'New Jersey',\n             'Deleware', 'Maryland', 'Washington D.C.', 'Hawaii']\n\nrepublican = ['Idaho', 'Montana', 'Utah', 'Arizona', 'Wyoming' ,'Texas', 'North Dakota', 'South Dakota', 'Nebraska',\n             'Kansas', 'Oklahoma', 'Iowa', 'Missouri', 'Arkansas', 'Lousiana', 'Wisconsin' ,'Michigan', 'Indiana', 'Kentucky',\n             'Tennessee', 'Alabama', 'Georgia', 'Florida', 'South Carolina', 'North Carolina', 'Ohio', 'West Virgina',\n             'Pennsylvania', 'Alaska']\n\n#initialize empty column.\ndata['political status'] = np.nan\n\n#create dummy variables.\nfor i, state in enumerate(data['state']):\n    if state in democratic:\n        data.at[i,'political status'] = 0\n    else:\n        data.at[i, 'political status'] = 1","b044936f":"#percents\ndemocratic_cases = data[data['political status'] == 0]['cases'].sum() \nrepublican_cases = data[data['political status'] == 1]['cases'].sum()\n\ndemocratic_pop = data[data['political status'] == 0]['population'].sum()\nrepublican_pop = data[data['political status'] == 1]['population'].sum()\n\ndemocratic_case_percent = democratic_cases \/ democratic_pop * 100\nrepublican_case_percent = republican_cases \/ republican_pop * 100\n\npolitical_affiliation = pd.DataFrame({'Democratic': [democratic_case_percent],\n                                     'Republican': [republican_case_percent]})\npolitical_affiliation","f6266235":"#coronavirus testing. \ndata_owid = pd.read_csv(r'\/kaggle\/input\/covid19-visualization-and-analysis\/owid-covid-data.csv')\nunited_states = data_owid['location'] == 'United States'\nus_df = data_owid[united_states]\ntesting = us_df[['date', 'new_tests', 'total_tests', 'total_tests_per_thousand', 'new_tests_per_thousand', 'positive_rate', 'tests_per_case']]\ntesting = testing.fillna(0)","daeec496":"testing['date'] = pd.to_datetime(testing['date'])\n\nfig, ax = plt.subplots(figsize = (16,8))\n\n\nmarker_style = dict(linewidth=2.5, linestyle = '-', marker = 'o', markersize = 5)\nax.plot(testing['date'], testing['total_tests'], **marker_style)\n\n#Labels\nplt.xlabel('Date', fontsize = 12)\nplt.ylabel('Tests', fontsize = 12)\nplt.title('Covid-19 Total Tests')\n\n#Formatting\nax.xaxis.set_major_locator(months)\nax.format_xdata = mdates.DateFormatter('%Y-%m-%d')\nax.format_ydata = lambda x: '$%1.2f' % x  \nax.grid(True)","9010d789":"fig, ax = plt.subplots(figsize = (16,8))\n\n\nmarker_style = dict(linewidth=2.5, linestyle = '-', marker = 'o', markersize = 5)\nax.plot(testing['date'], testing['new_tests'], **marker_style)\n\n#labels\nplt.xlabel('Date', fontsize = 12)\nplt.ylabel('Tests', fontsize = 12)\nplt.title('Covid-19 Daily Tests')\n\n#formatting\nax.xaxis.set_major_locator(months)\nax.format_xdata = mdates.DateFormatter('%Y-%m-%d')\nax.format_ydata = lambda x: '$%1.2f' % x  \nax.grid(True)","c9b896f6":"fig, ax = plt.subplots(figsize = (16,8))\n\n\nmarker_style = dict(linewidth=2.5, linestyle = '-', marker = 'o', markersize = 5)\nax.plot(testing['date'], testing['positive_rate'], **marker_style)\n\n#labels\nplt.xlabel('Date', fontsize = 12)\nplt.ylabel('Positivity Rate', fontsize = 12)\nplt.title('Covid-19 Positivity Rate')\n\n#formatting\nax.xaxis.set_major_locator(months)\nax.format_xdata = mdates.DateFormatter('%Y-%m-%d')\nax.format_ydata = lambda x: '$%1.2f' % x  \nax.grid(True)","d756a823":"fig, ax = plt.subplots(figsize = (16,8))\n\n\nmarker_style = dict(linewidth=2.5, linestyle = '-', marker = 'o', markersize = 5)\nax.plot(testing['date'], testing['tests_per_case'], **marker_style)\n\n#labels\nplt.xlabel('Date', fontsize = 12)\nplt.ylabel('Tests', fontsize = 12)\nplt.title('Covid-19 Tests Per Case')\n\n#formatting\nax.xaxis.set_major_locator(months)\nax.format_xdata = mdates.DateFormatter('%Y-%m-%d')\nax.format_ydata = lambda x: '$%1.2f' % x  \nax.grid(True)","dd5e9bec":"fig, ax = plt.subplots(figsize = (16,8))\n\n\nmarker_style = dict(linewidth=2.5, linestyle = '-', marker = 'o', markersize = 5)\nax.plot(testing['date'], testing['total_tests_per_thousand'], **marker_style)\n\n#labels\nplt.xlabel('Date', fontsize = 12)\nplt.ylabel('Tests (Per Thousand)', fontsize = 12)\nplt.title('Covid-19 Total Tests (Per Thousand)')\n\n#formatting\nax.xaxis.set_major_locator(months)\nax.format_xdata = mdates.DateFormatter('%Y-%m-%d')\nax.format_ydata = lambda x: '$%1.2f' % x  \nax.grid(True)","200b2ffd":"fig, ax = plt.subplots(figsize = (16,8))\n\n\nmarker_style = dict(linewidth=2.5, linestyle = '-', marker = 'o', markersize = 5)\nax.plot(testing['date'], testing['new_tests_per_thousand'], **marker_style)\n\n#labels\nplt.xlabel('Date', fontsize = 12)\nplt.ylabel('Tests (Per Thousand)', fontsize = 12)\nplt.title('Covid-19 New Tests (Per Thousand)')\n\n#formatting\nax.xaxis.set_major_locator(months)\nax.format_xdata = mdates.DateFormatter('%Y-%m-%d')\nax.format_ydata = lambda x: '$%1.2f' % x  \nax.grid(True)","00df9815":"confirmed = pd.DataFrame(cases_by_date)\n\nconfirmed.tail()","6d60d1e5":"#clean dataframe for usability with prophet.\nconfirmed.reset_index(level=0, inplace=True)\nconfirmed.columns = ['ds', 'y']","e5dd12e3":"#setting up the model to predict 10 days ahead.\nmodel = Prophet(interval_width = 0.95)\nmodel.fit(confirmed)\nfuture = model.make_future_dataframe(periods=10)","836d5397":"#predicting future forecast with date.\nforecast = model.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(10)","e85665df":"pred_cases = forecast[['ds', 'yhat']]\n#pred_cases['ds'] = pd.to_datetime(pred_cases['ds'])\npred_cases.set_index('ds', inplace=True)","638a6310":"#Prediction plot (cases) + 10 days. \n\nfig, ax = plt.subplots(figsize = (16,8))\nmarker_style = dict(linewidth=2.5, marker = 'o', markersize = 3)\nax.plot(cases_by_date, **marker_style, linestyle = '-', label = 'Actual')\nax.plot(pred_cases, **marker_style, linestyle = '-', label = 'Predicted', color = 'r', alpha =0.2)\nplt.ylabel(\"Cases\", fontsize = 12)\nplt.xlabel('Date', fontsize = 12)\nplt.title('Covid-19 Cases - Predicted vs. Actual', fontsize = 14)\nax.legend(loc='upper left')\n\n#ax.patch.set_facecolor('grey')\n#ax.patch.set_alpha(0.2)\n\n#Format ticks\nax.xaxis.set_major_locator(months)\nax.grid(True)\n\nplt.show()","8da8bdeb":"conf_comp_plot = model.plot_components(forecast)","726c231f":"deaths = pd.DataFrame(deaths_by_date)\ndeaths.reset_index(level=0, inplace=True)\ndeaths.columns = ['ds', 'y']","ed4c8346":"model = Prophet(interval_width = 0.95)\nmodel.fit(deaths)\nfuture = model.make_future_dataframe(periods=10)","f00f9aa8":"forecast = model.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(10)","08805640":"pred_deaths = forecast[['ds', 'yhat']]\n#pred_cases['ds'] = pd.to_datetime(pred_cases['ds'])\npred_deaths.set_index('ds', inplace=True)","ce322ab2":"#Prediction plot (deaths) + 10 days. \n\nfig, ax = plt.subplots(figsize = (16,8))\nmarker_style = dict(linewidth=2.5, marker = 'o', markersize = 3)\nax.plot(deaths_by_date, **marker_style, linestyle = '-', label = 'Actual')\nax.plot(pred_deaths, **marker_style, linestyle = '-', label = 'Predicted', color = 'r', alpha =0.2)\nplt.ylabel(\"Deaths\", fontsize = 12)\nplt.xlabel('Date', fontsize = 12)\nplt.title('Covid-19 Deaths - Predicted vs. Actual', fontsize = 14)\nax.legend(loc='upper left')\n\n#ax.patch.set_facecolor('grey')\n#ax.patch.set_alpha(0.2)\n\n#Format ticks\nax.xaxis.set_major_locator(months)\nax.grid(True)\n\nplt.show()","5ebafb5f":"deaths_comp_plot = model.plot_components(forecast)","1a8a2bc1":"recovered = pd.DataFrame(recovered)\nrecovered.reset_index(level=0, inplace=True)\nrecovered.columns = ['ds', 'y']","cfd46ab6":"model = Prophet(interval_width = 0.95)\nmodel.fit(recovered)\nfuture = model.make_future_dataframe(periods=10)","646a7127":"forecast = model.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(10)","4c7aac0e":"pred_recovered = forecast[['ds', 'yhat']]\n#pred_cases['ds'] = pd.to_datetime(pred_cases['ds'])\npred_recovered.set_index('ds', inplace=True)","83ffcd6e":"#Prediction plot (deaths) + 10 days. \n\nfig, ax = plt.subplots(figsize = (16,8))\nmarker_style = dict(linewidth=2.5, marker = 'o', markersize = 3)\nax.plot(recovered_by_date, **marker_style, linestyle = '-', label = 'Actual')\nax.plot(pred_recovered, **marker_style, linestyle = '-', label = 'Predicted', color = 'r', alpha =0.2)\nplt.ylabel(\"Recovered\", fontsize = 12)\nplt.xlabel('Date', fontsize = 12)\nplt.title('Covid-19 Recovered - Predicted vs. Actual', fontsize = 14)\nax.legend(loc='upper left')\n\n#ax.patch.set_facecolor('grey')\n#ax.patch.set_alpha(0.2)\n\n#Format ticks\nax.xaxis.set_major_locator(months)\nax.grid(True)\n\nplt.show()","befacbb9":"recovered_comp_plot = model.plot_components(forecast)","919b8ee8":"In the table above, yhat signifies the predicted value while both lower and upper columns refer to the bounds. This is treated as a 95% confidence interval and thus there is 95% certainty that the given value will be between these upper and lower bounds.","e7b3cfe8":"## Testing in the United States","b75e597e":"In recent months, the percent of population with the virus has increased dramatically. Some states now have over the 2.5% threshold. Yet, New York has managed to minimize the amount of cases despite having a surge of cases early on in the virus.","6e690b5f":"Now that we have a more complete dataframe we will create another visual to account for the severity of cases in each state. To do this we will use the same as above for simplicity. First, we must determine a rolling percentage of cases in each state so that we can determine the severity of the virus.","4775a17a":"There has been a lot of critisicm over the claims that democratic states are not handling Covid-19 as well as Republican. In this section we will examine statistics looking at case rate by political affiliation.","1879b549":"On average, a Democratic state will have 0.6% of the state population infected with Covid-19 while Republican states have slightly lower at 0.44%. Keep in mind that this statistic has a lot of variance and therefore no conclusions can be made, yet it is interesting to look at. I suggest that this variance is due to the disparity of urbanized vs ruralized areas.","b48ccad6":"We will be using the open source software Prophet to forecast future Covid-19 cases. It provides reliable predictions as it is robust to shifts in the data and handles outliers. Our model for forecasting confirmed cases, deaths and recovered patients will be relatively straightforward as the data follows a polynomial trend.","7c8b3b2c":"# Covid-19: An in-depth approach using Analytics and Predictive Modeling","d02cedc9":"### Cases","0cb4cdf1":"### Prophet","42ca38ec":"\nGreat, we have added abbreviations to the dataframe. We will keep the state name for ease of use when merging another dataframe. Now we can plot a geographical visual that tells us the prevalence of cases in each state over a certain time period.","6672c7eb":"## Claim: Covid-19 hitting largely Democratic States harder than Republican","cf8af619":"## Predictive Modeling","56b6a59b":"We can see the severity of cases as the virus spreads across the United States with the above visual. However, a more helpful statistic will be to measure the virus spread versus the population for each state. Then we can get a more accurate estimate of the significance it holds in each state."}}