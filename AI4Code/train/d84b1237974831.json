{"cell_type":{"750a2d84":"code","f85b04a5":"code","112c4eaa":"code","22039cd8":"code","2250f0a8":"code","aeeb7ed4":"code","84801de8":"code","fb81c463":"code","a4a478db":"code","61974b43":"code","72740a9f":"code","910121a7":"code","f1e4ed27":"code","12479829":"code","e2aaf216":"code","defefbd6":"code","ef0facfa":"code","1c328384":"markdown","4d5667b7":"markdown","9fc6a59a":"markdown","b3a9b418":"markdown","b4f98269":"markdown","51e01fab":"markdown","24021a37":"markdown","1f856762":"markdown"},"source":{"750a2d84":"from fastai.vision import *","f85b04a5":"path = Path('..\/input\/geekhub-ds-2019-challenge')\nlabels = pd.read_csv('..\/input\/geekhub-ds-2019-challenge\/train_labels.csv').set_index('Id')\ndisplay(labels.transpose())","112c4eaa":"np.random.seed(42)\ntorch.manual_seed(42) \n# Get the data\ndata = (ImageList.from_folder(path\/'train\/train')  # Where to find the data? \n    .split_by_rand_pct(valid_pct=0.10)              # How to split in train\/valid?\n    .label_from_func(lambda o: labels.loc[int(o.name.split('.')[0])].values[0]) #How to label?\n    .add_test(ImageList.from_folder(path\/'test\/test'))  # Add test data (no labels)\n    .transform(tfms=get_transforms(), size=224)    # Data augmentation?\n    .databunch(bs=16)                              # Databunch?\n    .normalize(imagenet_stats))                    # Normalize?","22039cd8":"data","2250f0a8":"working_dir = Path('\/kaggle\/working')\nlearn = cnn_learner(data, models.resnet152, metrics=accuracy, model_dir=working_dir).to_fp16()","aeeb7ed4":"learn.lr_find();\nlearn.recorder.plot()","84801de8":"learn.fit_one_cycle(10, max_lr=1e-3)","fb81c463":"learn.save('stage-1')","a4a478db":"learn.recorder.plot_losses()","61974b43":"learn.recorder.plot_lr(show_moms=True)","72740a9f":"learn.unfreeze()\nlearn.lr_find(stop_div=False, num_it=100)\nlearn.recorder.plot()","910121a7":"learn.load('stage-1')\nlearn.unfreeze()\nlearn.fit_one_cycle(4, max_lr=slice(1e-5,1e-4))","f1e4ed27":"learn.to_fp32().save('stage-2')","12479829":"interp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()","e2aaf216":"interp.plot_top_losses(16, figsize=(15,18))","defefbd6":"preds = learn.get_preds(ds_type=DatasetType.Test)","ef0facfa":"ids_test = [int(o.parts[-1].split('.')[-2]) for o in data.test_ds.items]\npred_sub_test = pd.DataFrame({'Id':ids_test, 'Category': preds[0].argmax(axis=1)})\npred_sub_test['Category'] = pred_sub_test.Category.map({0: 'daisy', 1: 'dandelion', 2: 'rose', 3: 'sunflower', 4: 'tulip'})\n# Save output\npred_sub_test.to_csv('csv_test.csv', index=False)","1c328384":"### 4.2 Submission","4d5667b7":"## 4. Predictions","9fc6a59a":"### 4.1 Predict on Test","b3a9b418":"## 3. Evaluation","b4f98269":"### 2.2 Fitting all the layers","51e01fab":"## 1. The Data","24021a37":"### 2.1 Fitting only the top layer","1f856762":"## 2. Training"}}