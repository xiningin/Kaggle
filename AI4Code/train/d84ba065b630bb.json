{"cell_type":{"b11343f2":"code","0e517a63":"code","d142ce07":"code","8f6709ba":"code","05e4da82":"code","d4917c6f":"code","3355f1ac":"code","d4b7297f":"code","094378ad":"code","5cf66722":"code","566ecd7e":"code","cad5a9e2":"code","6d838714":"code","3d5bdd1b":"code","ef12fe52":"code","1ae27e3d":"code","881a838f":"code","a60f9f2e":"code","1400da80":"code","be4f02d1":"code","ac906c76":"code","8910ef74":"code","82c8324b":"code","bb4d79cf":"code","b8c54bfa":"code","1079de7e":"code","ef91114e":"code","9b553f35":"code","635e3c8d":"code","1756fb95":"code","9fb3ec18":"code","8f727f0e":"code","4cc31500":"code","137b60db":"code","c57f54ae":"code","4a44f06a":"code","f012043c":"code","7b7890ff":"code","01a64b07":"markdown","306ed167":"markdown","a5841020":"markdown"},"source":{"b11343f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(dirname)\n    for filename in filenames:\n        pass\n        #print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0e517a63":"from PIL import Image","d142ce07":"import matplotlib.pyplot as plt","8f6709ba":"image1 = Image.open(\"\/kaggle\/input\/sign-language-for-numbers\/Sign Language for Numbers\/0\/zero_1.jpg\")\nimage1","05e4da82":"size = 32\nfilt = \"1\"\nr_filt = Image.BICUBIC","d4917c6f":"resized_image = image1.resize((size,size) , r_filt)\nresized_image","3355f1ac":"resized_image.convert(filt)","d4b7297f":"arrayImage = np.asarray(resized_image.convert(filt))\narrayImage","094378ad":"arrayImage = arrayImage.reshape([1, size**2])\narrayImage","5cf66722":"arrayImage.shape","566ecd7e":"arrayImages = arrayImage","cad5a9e2":"y = [0]","6d838714":"def getImagePixels(path, value):\n    global arrayImages\n    img = Image.open(path).resize((size,size) , r_filt)\n    arr = np.array(img.convert(filt)).reshape([1,size**2])\n    arrayImages = np.concatenate((arrayImages, arr), axis = 0)\n    y.append(value)\n    ","3d5bdd1b":"for dirname, _, filenames in os.walk('\/kaggle\/input\/sign-language-for-numbers\/Sign Language for Numbers\/1'):\n    for filename in filenames:\n        path = os.path.join(dirname, filename)\n        if(path.endswith(\".jpg\")):\n            getImagePixels(path, 1)","ef12fe52":"for dirname, _, filenames in os.walk('\/kaggle\/input\/sign-language-for-numbers\/Sign Language for Numbers\/0'):\n    for filename in filenames:\n        path = os.path.join(dirname, filename)\n        if(path.endswith(\".jpg\")):\n            getImagePixels(path, 0)            ","1ae27e3d":"arrayImages.shape","881a838f":"y = pd.DataFrame(y).values.reshape(-1, )","a60f9f2e":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(arrayImages, y, test_size=0.2, random_state=42)","1400da80":"from sklearn.linear_model import LogisticRegression\nreg = LogisticRegression(max_iter=5000)","be4f02d1":"reg.fit(x_train, y_train)","ac906c76":"arrayImages[25].reshape(-1,1).transpose().shape","8910ef74":"prediction = (reg.predict(x_train) == y_train)\nnp.unique(prediction, return_counts=True)","82c8324b":"prediction = (reg.predict(x_test) == y_test)\narr = np.unique(prediction, return_counts=True)[1]\nprint(arr[1] \/ (arr[0] + arr[1]) )","bb4d79cf":"def initialize_weight_bias(dimension):\n    w = np.full((dimension, 1) , .01)\n    return w, 0.0","b8c54bfa":"def sigmoid(x):\n    return 1 \/ (1 + np.exp(x * -1) )","1079de7e":"initialize_weight_bias(30)[0].T.shape","ef91114e":"costs = []\ndef f_propagation(w,b,x_train, y_train):\n    z = np.dot(w.T, x_train) + b\n    errors = sigmoid(z)\n    loss = -1 * y_train * np.log(errors) - (1-y_train) * np.log(1-errors)\n    cost = np.sum(loss) \/ x_train.shape[1]\n    costs.append(cost)\n    \n    derivative_weight = np.dot(x_train, (errors - y_train).T) \/ x_train.shape[1]\n    derivative_bias = np.sum(errors - y_train) \/ x_train.shape[1]\n    \n    return cost, derivative_weight, derivative_bias","9b553f35":"def learning(w,b,x_train,y_train, learning_rate, iter_num):\n    for i in range(iter_num):\n        cost, d_w, d_b = f_propagation(w,b,x_train,y_train)\n        w -= learning_rate * d_w\n        b -= learning_rate * d_b\n    return w, b","635e3c8d":"def predict(w,b,x_test):\n    prediction = []\n    z = sigmoid(np.dot(w.T, x_test) + b)\n    for i in range(z.shape[1]):\n        if z[0,i] > 0.5:\n            prediction.append(1)\n        else:\n            prediction.append(0)\n    return np.array(prediction)","1756fb95":"def my_logistic_regression(x_test, y_test, x_train, y_train, learning_rate, iter_num):\n    global costs\n    costs = []\n    w, b = initialize_weight_bias(x_test.shape[0])\n    w, b = learning(w, b, x_train, y_train, learning_rate, iter_num)\n    \n    prediction = (predict(w,b,x_test) == y_test)\n    print(predict(w,b,x_train))\n    print(y_train)\n    arr = np.unique(prediction, return_counts=True)[1]\n    print(arr[1] \/ (arr[0] + arr[1]) )\n    ","9fb3ec18":"my_logistic_regression(x_test.T, y_test.T, x_train.T, y_train.T, .1, 1000)","8f727f0e":"plt.plot(range(1,len(costs), 10) , costs[1::10])","4cc31500":"my_logistic_regression(x_test.T, y_test.T, x_train.T, y_train.T, .1, 700)","137b60db":"plt.plot(range(1,len(costs), 10) , costs[1::10])","c57f54ae":"my_logistic_regression(x_test.T, y_test.T, x_train.T, y_train.T, .3, 300)","4a44f06a":"plt.plot(range(1,len(costs), 10) , costs[1::10])","f012043c":"my_logistic_regression(x_test.T, y_test.T, x_train.T, y_train.T, .3, 250)","7b7890ff":"plt.plot(range(1,len(costs), 10) , costs[1::10])","01a64b07":"700 Iterations optimal when learning rate is .1","306ed167":"Our Logistic Regression Algorithm","a5841020":"250 operations optimal when learning rate is .3"}}