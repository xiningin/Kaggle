{"cell_type":{"bcbd7b05":"code","495a5a4a":"code","b9679bd0":"code","2128572f":"code","7c91647b":"code","175c387e":"code","f3d73f06":"code","df49c24f":"code","8ac887fa":"code","ecc898ed":"code","7b3956f0":"code","78e31e01":"code","fb26e7fe":"code","9c50da94":"code","d9622d84":"code","a2421de3":"code","9d77a476":"code","cf102487":"code","2c0226cc":"code","21a9ab24":"code","d2dcc1c7":"code","debfc5cd":"code","3d56c027":"code","8cfec1ae":"code","ac49812c":"code","fd090793":"code","4436faf7":"code","b195bc39":"code","5b67d222":"code","ff538f4f":"markdown","9b2e9ed3":"markdown","df7fb3d6":"markdown","c044bb4a":"markdown","b17ceb3f":"markdown","aeb2477c":"markdown","2798e8dd":"markdown","10f7de1f":"markdown","eddc78f3":"markdown"},"source":{"bcbd7b05":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib as mpb\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import skew\nimport category_encoders as ce\nfrom sklearn.preprocessing import OrdinalEncoder, OneHotEncoder, LabelEncoder, StandardScaler, FunctionTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\n%matplotlib inline\nsns.set_theme()","495a5a4a":"# Loading datasets\n\ntrain_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","b9679bd0":"# looking at dimensions of Data\n\nprint(train_data.shape)\ntest_data.shape","2128572f":"# Finding missing values.\n\ntrain_data.head()","7c91647b":"train_data.isnull().sum()","175c387e":"fig, ax = plt.subplots(figsize=(10,8))\nsns.heatmap(train_data.isnull(), ax=ax)","f3d73f06":"train_data.isnull().sum()","df49c24f":"train_data.info()","8ac887fa":"# look at train data\ntrain_data","ecc898ed":"fig, ax = plt.subplots(figsize=(8,6))\nmissing = train_data.isnull().sum()\nmissing = missing[missing > 0]\nmissing.sort_values(inplace=True)\nmissing.plot.bar(ax=ax)","7b3956f0":"## Handling missing values on train data\n\ntrain_data['LotFrontage']= train_data['LotFrontage'].fillna(train_data['LotFrontage'].mean())\n\ntrain_data['BsmtCond']= train_data['BsmtCond'].fillna(train_data['BsmtCond'].mode()[0])\n\ntrain_data['BsmtQual']= train_data['BsmtQual'].fillna(train_data['BsmtQual'].mode()[0])\n\ntrain_data['FireplaceQu']= train_data['FireplaceQu'].fillna(train_data['FireplaceQu'].mode()[0])\n\ntrain_data['GarageType']= train_data['GarageType'].fillna(train_data['GarageType'].mode()[0])\n\ntrain_data['GarageFinish']=train_data['GarageFinish'].fillna(train_data['GarageFinish'].mode()[0])\n\ntrain_data['GarageQual']=train_data['GarageQual'].fillna(train_data['GarageQual'].mode()[0])\n\ntrain_data['GarageCond']=train_data['GarageCond'].fillna(train_data['GarageCond'].mode()[0])\n\ntrain_data['MasVnrType']=train_data['MasVnrType'].fillna(train_data['MasVnrType'].mode()[0])\n\ntrain_data['MasVnrArea']=train_data['MasVnrArea'].fillna(train_data['MasVnrArea'].mean())\n\ntrain_data['BsmtFinType1']=train_data['BsmtFinType1'].fillna(train_data['BsmtFinType1'].mode()[0])\n\ntrain_data['BsmtFinType2']=train_data['BsmtFinType2'].fillna(train_data['BsmtFinType2'].mode()[0])\n\ntrain_data['BsmtExposure']=train_data['BsmtExposure'].fillna(train_data['BsmtExposure'].mode()[0])\n\ntrain_data['GarageYrBlt']=train_data['GarageYrBlt'].fillna(train_data['GarageYrBlt'].mean())\n\n#BsmtExposure   \n","78e31e01":"## Handling missing values on test data\n\ntest_data['LotFrontage']= test_data['LotFrontage'].fillna(test_data['LotFrontage'].mean())\n\ntest_data['BsmtCond']= test_data['BsmtCond'].fillna(test_data['BsmtCond'].mode()[0])\n\ntest_data['BsmtQual']= test_data['BsmtQual'].fillna(test_data['BsmtQual'].mode()[0])\n\ntest_data['FireplaceQu']= test_data['FireplaceQu'].fillna(test_data['FireplaceQu'].mode()[0])\n\ntest_data['GarageType']= test_data['GarageType'].fillna(test_data['GarageType'].mode()[0])\n\ntest_data['GarageFinish']= test_data['GarageFinish'].fillna(test_data['GarageFinish'].mode()[0])\n\ntest_data['GarageQual']= test_data['GarageQual'].fillna(test_data['GarageQual'].mode()[0])\n\ntest_data['GarageCond']= test_data['GarageCond'].fillna(test_data['GarageCond'].mode()[0])\n\ntest_data['MasVnrType']= test_data['MasVnrType'].fillna(test_data['MasVnrType'].mode()[0])\n\ntest_data['MasVnrArea']= test_data['MasVnrArea'].fillna(test_data['MasVnrArea'].mean())\n\ntest_data['BsmtFinType2']= test_data['BsmtFinType2'].fillna(test_data['BsmtFinType2'].mode()[0])\n\ntest_data['BsmtFinType1']= test_data['BsmtFinType1'].fillna(test_data['BsmtFinType1'].mode()[0])\n\ntest_data['BsmtExposure']= test_data['BsmtExposure'].fillna(test_data['BsmtExposure'].mode()[0])\n\ntest_data['GarageYrBlt']= test_data['GarageYrBlt'].fillna(test_data['GarageYrBlt'].mean())\n","fb26e7fe":"train_data.drop([ 'Alley',  'PoolQC', 'Fence', 'MiscFeature'], inplace=True, axis=1)\ntest_data.drop([ 'Alley',  'PoolQC', 'Fence', 'MiscFeature'], inplace=True, axis=1)","9c50da94":"train_data.isnull().sum()\n\n# Again have a look at missing values \n\nfig, ax = plt.subplots(figsize=(8,6))\nmissing = train_data.isnull().sum()\nmissing = missing[missing > 0]\nmissing.sort_values(inplace=True)\nmissing.plot.bar(ax=ax)","d9622d84":"fig, ax = plt.subplots(figsize=(10,8))\nsns.heatmap(train_data.isnull(), ax=ax)","a2421de3":"# relationship between features\ncorr = train_data.corr()\nfig, ax = plt.subplots(figsize=(18,12))\nsns.heatmap(corr)","9d77a476":"target = ['SalePrice']\ncat_features = train_data.drop(columns=['Id', 'SalePrice']).select_dtypes(include='object').columns.tolist()\nnum_features = train_data.drop(columns=['Id', 'SalePrice']).select_dtypes(include=np.number).columns.tolist()\nall_features = cat_features + num_features\n","cf102487":"mpb.rcParams['figure.figsize'] = (15.0, 6.0)\nprices = pd.DataFrame({\"price\":train_data[\"SalePrice\"], \"log(price + 1)\":np.log1p(train_data['SalePrice'])})\nprices.hist()","2c0226cc":"train_data.SalePrice = np.log(train_data.SalePrice)","21a9ab24":"# Pipeline for categorical features\ncat_tfms = Pipeline(steps=[\n    ('cat_ordenc', ce.OrdinalEncoder(return_df=True, handle_unknown='value', handle_missing='value'))\n])\n\n# Pipeline for numerical features\nnum_tfms = Pipeline(steps=[\n    ('num_imputer',  SimpleImputer(missing_values=np.nan, strategy='median'))\n])\n\nfeatures = ColumnTransformer(transformers=[\n    ('cat_tfms', cat_tfms, cat_features),\n    ('num_tfms', num_tfms, num_features)\n], remainder='passthrough')","d2dcc1c7":"X = train_data[all_features]\ny = train_data.SalePrice\nX_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True,random_state=42)\nX_train_tf = pd.DataFrame(features.fit_transform(X_train), columns=all_features)\nX_test_tf = pd.DataFrame(features.fit_transform(X_test), columns=all_features)\ntest_tf = test_data[all_features]\ntest_tf = pd.DataFrame(features.transform(test_tf), columns=all_features)\nenc_map = dict()\nfor feat in cat_features: enc_map[feat] = dict(zip(X_train[feat], X_train_tf[feat]))","debfc5cd":"print(\"X_train shape: \", X_train_tf.shape)\nprint(\"test shape:\", test_tf.shape)","3d56c027":"rf = RandomForestRegressor(\n    n_estimators=50, max_depth=None, min_samples_leaf=1, min_samples_split=2,\n    max_features=.7, max_samples=None, n_jobs=-1, random_state=42)","8cfec1ae":"rf.fit(X_train_tf, y_train)","ac49812c":"y_preds = rf.predict(X_test_tf)","fd090793":"rmse = mean_squared_error(y_test, y_preds, squared=False)\nrmse","4436faf7":"preds = rf.predict(test_tf)","b195bc39":"output = pd.DataFrame({'Id': test_data.Id, 'SalePrice': preds})\noutput.to_csv('my_submission.csv', index=False)\n\nprint(\"Your submission was successfully saved.\")\n","5b67d222":"print(output.head())","ff538f4f":"## Target Feature seprateing ","9b2e9ed3":"#### Only one missing value left so leave it. We will deal with it further","df7fb3d6":"## using Random forest model","c044bb4a":"## label Encoding ","b17ceb3f":"### Data Preprocessing","aeb2477c":"## Handle missing values","2798e8dd":"## Root mean Squared Error","10f7de1f":"## Log use to transform the data\n","eddc78f3":"## Corelation Matrix "}}