{"cell_type":{"317e90bb":"code","dcdfd432":"code","47011e35":"code","3cf0fae3":"code","8d15d9e0":"code","0bf2293b":"code","db67b220":"code","3d1f1a03":"code","c808b0f3":"code","cda6d33e":"code","f1e56223":"code","e89e2cd8":"code","15f92c06":"code","63fa7462":"code","87b0472e":"code","c7662087":"code","d9d6a339":"code","0ef8ad19":"code","9f5b1ada":"code","329c3063":"code","d72a8963":"code","457ec32c":"code","4ee21fb9":"code","fae0bd8f":"code","60b6305d":"code","36e93403":"code","df59222b":"markdown","08f25706":"markdown","5b4e7237":"markdown","992eddaf":"markdown","9070f234":"markdown","48013378":"markdown","2764b165":"markdown","6f19ee45":"markdown","b498db7e":"markdown","408d372f":"markdown","07e8c66b":"markdown","d5248e3d":"markdown","2acd15a9":"markdown","c6bd9580":"markdown","864d28d2":"markdown","6a8ba29c":"markdown","49fe72f6":"markdown","1c22755c":"markdown","d753df06":"markdown","ccb48009":"markdown","4e32cc58":"markdown","1972ebdd":"markdown","e5095a0d":"markdown","a5b16a61":"markdown","9ac2751e":"markdown","1a90651d":"markdown","4d397d9b":"markdown","ef88a187":"markdown","e9b91fa9":"markdown","3fc61f43":"markdown","15c58885":"markdown","033ec273":"markdown","e1257209":"markdown","0507dcda":"markdown","888d615f":"markdown","f18838c1":"markdown","1554edef":"markdown","f430ccd0":"markdown","3c4df089":"markdown","defded03":"markdown"},"source":{"317e90bb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Scaler\nfrom sklearn.preprocessing import RobustScaler\n\n# Train Test Split\nfrom sklearn.model_selection import train_test_split\n\n#Models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nimport xgboost as xgb\n\n#Metrics\nfrom sklearn.metrics import accuracy_score, classification_report\n\n# Cross Validation\nfrom sklearn.model_selection import GridSearchCV\n\nprint(\"Packages imported successfully...\")","dcdfd432":"df = pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\nprint(\"Data successfully imported...\")","47011e35":"print(df.shape)\ndf.sample(5)","3cf0fae3":"df.info()","8d15d9e0":"a = list(df[\"quality\"].unique())\na.sort()\nprint(a)","0bf2293b":"def helper(row):\n    if row.quality < 4.5:\n        return 0\n    elif row.quality < 6.5:\n        return 1\n    else:\n        return 2\ndf[\"quality\"] = df.apply(helper,axis=1)\ndf['quality'].value_counts()","db67b220":"X = df.drop('quality',axis=1)\ny = df[['quality']]\n\nprint(X.columns)\nprint(y.columns)","3d1f1a03":"X.describe().transpose()","c808b0f3":"ax = sns.countplot(data=df, x='quality', palette=['#FA5458','#FDD563','#5F63F1'])\nax.set(xticklabels=['0','1','2'], title=\"Quality Distribution\")\nax.tick_params(bottom=False)","cda6d33e":"\nfig = plt.figure(figsize=(18,35))\ngs = fig.add_gridspec(6,2)\ngs.update(wspace=1, hspace=0.5)\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\nax2 = fig.add_subplot(gs[1,0])\nax3 = fig.add_subplot(gs[1,1])\nax4 = fig.add_subplot(gs[2,0])\nax5 = fig.add_subplot(gs[2,1])\nax6 = fig.add_subplot(gs[3,0])\nax7 = fig.add_subplot(gs[3,1])\nax8 = fig.add_subplot(gs[4,0])\nax9 = fig.add_subplot(gs[4,1])\nax10 = fig.add_subplot(gs[5,0])\nax11 = fig.add_subplot(gs[5,1])\n\nbackground_color = \"#f6f5f5\"\ncolor_palette = [\"#FA5458\",\"#FDD563\",\"#5F63F1\"]\n\nfig.patch.set_facecolor(background_color) \nax0.set_facecolor(background_color) \nax1.set_facecolor(background_color) \nax2.set_facecolor(background_color) \nax3.set_facecolor(background_color) \nax4.set_facecolor(background_color) \nax5.set_facecolor(background_color) \nax6.set_facecolor(background_color) \nax7.set_facecolor(background_color) \nax8.set_facecolor(background_color) \nax9.set_facecolor(background_color) \nax10.set_facecolor(background_color) \nax11.set_facecolor(background_color) \n\n\n# Title of the plot\nax0.spines[\"bottom\"].set_visible(False)\nax0.spines[\"left\"].set_visible(False)\nax0.spines[\"top\"].set_visible(False)\nax0.spines[\"right\"].set_visible(False)\nax0.tick_params(left=False, bottom=False)\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.text(0.5,0.5,\n         'Distribution plot\\n__________',\n         horizontalalignment='center',\n         verticalalignment='center',\n         fontsize=18, fontweight='bold',\n         fontfamily='serif',\n         color=\"#000000\")\n\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.histplot(ax=ax1,x=df['fixed acidity'],color= \"#3339FF\", kde=True)\nXstart, Xend = ax1.get_xlim()\nYstart, Yend = ax1.get_ylim()\nax1.text(Xstart, Yend+(Yend*0.15), 'fixed acidity', fontsize=14, fontweight='bold', fontfamily='serif')\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\n\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.histplot(ax=ax2,x=df['volatile acidity'],color= \"#3339FF\", kde=True)\nXstart, Xend = ax2.get_xlim()\nYstart, Yend = ax2.get_ylim()\nax2.text(Xstart, Yend+(Yend*0.15), 'volatile acidity', fontsize=14, fontweight='bold', fontfamily='serif')\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\n\nax3.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.histplot(ax=ax3,x=df['citric acid'],color= \"#3339FF\", kde=True)\nXstart, Xend = ax3.get_xlim()\nYstart, Yend = ax3.get_ylim()\nax3.text(Xstart, Yend+(Yend*0.15), 'citric acid', fontsize=14, fontweight='bold', fontfamily='serif')\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\n\nax4.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.histplot(ax=ax4,x=df['residual sugar'],color= \"#3339FF\", kde=True)\nXstart, Xend = ax4.get_xlim()\nYstart, Yend = ax4.get_ylim()\nax4.text(Xstart, Yend+(Yend*0.15), 'residual sugar', fontsize=14, fontweight='bold', fontfamily='serif')\nax4.set_xlabel(\"\")\nax4.set_ylabel(\"\")\n\nax5.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.histplot(ax=ax5,x=df['chlorides'],color= \"#3339FF\", kde=True)\nXstart, Xend = ax5.get_xlim()\nYstart, Yend = ax5.get_ylim()\nax5.text(Xstart, Yend+(Yend*0.15), 'chlorides', fontsize=14, fontweight='bold', fontfamily='serif')\nax5.set_xlabel(\"\")\nax5.set_ylabel(\"\")\n\nax6.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.histplot(ax=ax6,x=df['free sulfur dioxide'],color= \"#3339FF\", kde=True)\nXstart, Xend = ax6.get_xlim()\nYstart, Yend = ax6.get_ylim()\nax6.text(Xstart, Yend+(Yend*0.15), 'free sulfur dioxide', fontsize=14, fontweight='bold', fontfamily='serif')\nax6.set_xlabel(\"\")\nax6.set_ylabel(\"\")\n\nax7.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.histplot(ax=ax7,x=df['total sulfur dioxide'],color= \"#3339FF\", kde=True)\nXstart, Xend = ax7.get_xlim()\nYstart, Yend = ax7.get_ylim()\nax7.text(Xstart, Yend+(Yend*0.15), 'total sulfur dioxide', fontsize=14, fontweight='bold', fontfamily='serif')\nax7.set_xlabel(\"\")\nax7.set_ylabel(\"\")\n\nax8.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.histplot(ax=ax8,x=df['density'],color= \"#3339FF\", kde=True)\nXstart, Xend = ax8.get_xlim()\nYstart, Yend = ax8.get_ylim()\nax8.text(Xstart, Yend+(Yend*0.15), 'density', fontsize=14, fontweight='bold', fontfamily='serif')\nax8.set_xlabel(\"\")\nax8.set_ylabel(\"\")\n\nax9.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.histplot(ax=ax9,x=df['pH'],color= \"#3339FF\", kde=True)\nXstart, Xend = ax9.get_xlim()\nYstart, Yend = ax9.get_ylim()\nax9.text(Xstart, Yend+(Yend*0.15), 'pH', fontsize=14, fontweight='bold', fontfamily='serif')\nax9.set_xlabel(\"\")\nax9.set_ylabel(\"\")\n\nax10.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.histplot(ax=ax10,x=df['sulphates'],color= \"#3339FF\", kde=True)\nXstart, Xend = ax10.get_xlim()\nYstart, Yend = ax10.get_ylim()\nax10.text(Xstart, Yend+(Yend*0.15), 'sulphates', fontsize=14, fontweight='bold', fontfamily='serif')\nax10.set_xlabel(\"\")\nax10.set_ylabel(\"\")\n\nax11.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.histplot(ax=ax11,x=df['alcohol'],color= \"#3339FF\", kde=True)\nXstart, Xend = ax11.get_xlim()\nYstart, Yend = ax11.get_ylim()\nax11.text(Xstart, Yend+(Yend*0.15), 'alcohol', fontsize=14, fontweight='bold', fontfamily='serif')\nax11.set_xlabel(\"\")\nax11.set_ylabel(\"\")","f1e56223":"fig = plt.figure(figsize=(18,35))\ngs = fig.add_gridspec(6,2)\ngs.update(wspace=1, hspace=0.5)\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\nax2 = fig.add_subplot(gs[1,0])\nax3 = fig.add_subplot(gs[1,1])\nax4 = fig.add_subplot(gs[2,0])\nax5 = fig.add_subplot(gs[2,1])\nax6 = fig.add_subplot(gs[3,0])\nax7 = fig.add_subplot(gs[3,1])\nax8 = fig.add_subplot(gs[4,0])\nax9 = fig.add_subplot(gs[4,1])\nax10 = fig.add_subplot(gs[5,0])\nax11 = fig.add_subplot(gs[5,1])\n\nbackground_color = \"#f6f5f5\"\ncolor_palette = [\"#FA5458\",\"#FDD563\",\"#5F63F1\"]\n\nfig.patch.set_facecolor(background_color) \nax0.set_facecolor(background_color) \nax1.set_facecolor(background_color) \nax2.set_facecolor(background_color) \nax3.set_facecolor(background_color) \nax4.set_facecolor(background_color) \nax5.set_facecolor(background_color) \nax6.set_facecolor(background_color) \nax7.set_facecolor(background_color) \nax8.set_facecolor(background_color) \nax9.set_facecolor(background_color) \nax10.set_facecolor(background_color) \nax11.set_facecolor(background_color) \n\n\n# Title of the plot\nax0.spines[\"bottom\"].set_visible(False)\nax0.spines[\"left\"].set_visible(False)\nax0.spines[\"top\"].set_visible(False)\nax0.spines[\"right\"].set_visible(False)\nax0.tick_params(left=False, bottom=False)\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.text(0.5,0.5,\n         'Boxenplot plot\\n__________',\n         horizontalalignment='center',\n         verticalalignment='center',\n         fontsize=18, fontweight='bold',\n         fontfamily='serif',\n         color=\"#000000\")\n\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax1,x=df['fixed acidity'],color= \"#FA5458\")\nXstart, Xend = ax1.get_xlim()\nYstart, Yend = ax1.get_ylim()\nax1.text(Xstart, Yend+(Yend*0.15), 'fixed acidity', fontsize=14, fontweight='bold', fontfamily='serif')\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\n\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax2,x=df['volatile acidity'],color= \"#FA5458\")\nXstart, Xend = ax2.get_xlim()\nYstart, Yend = ax2.get_ylim()\nax2.text(Xstart, Yend+(Yend*0.15), 'volatile acidity', fontsize=14, fontweight='bold', fontfamily='serif')\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\n\nax3.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax3,x=df['citric acid'],color= \"#FA5458\")\nXstart, Xend = ax3.get_xlim()\nYstart, Yend = ax3.get_ylim()\nax3.text(Xstart, Yend+(Yend*0.15), 'citric acid', fontsize=14, fontweight='bold', fontfamily='serif')\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\n\nax4.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax4,x=df['residual sugar'],color= \"#FA5458\")\nXstart, Xend = ax4.get_xlim()\nYstart, Yend = ax4.get_ylim()\nax4.text(Xstart, Yend+(Yend*0.15), 'residual sugar', fontsize=14, fontweight='bold', fontfamily='serif')\nax4.set_xlabel(\"\")\nax4.set_ylabel(\"\")\n\nax5.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax5,x=df['chlorides'],color= \"#FA5458\")\nXstart, Xend = ax5.get_xlim()\nYstart, Yend = ax5.get_ylim()\nax5.text(Xstart, Yend+(Yend*0.15), 'chlorides', fontsize=14, fontweight='bold', fontfamily='serif')\nax5.set_xlabel(\"\")\nax5.set_ylabel(\"\")\n\nax6.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax6,x=df['free sulfur dioxide'],color= \"#FA5458\")\nXstart, Xend = ax6.get_xlim()\nYstart, Yend = ax6.get_ylim()\nax6.text(Xstart, Yend+(Yend*0.15), 'free sulfur dioxide', fontsize=14, fontweight='bold', fontfamily='serif')\nax6.set_xlabel(\"\")\nax6.set_ylabel(\"\")\n\nax7.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax7,x=df['total sulfur dioxide'],color= \"#FA5458\")\nXstart, Xend = ax7.get_xlim()\nYstart, Yend = ax7.get_ylim()\nax7.text(Xstart, Yend+(Yend*0.15), 'total sulfur dioxide', fontsize=14, fontweight='bold', fontfamily='serif')\nax7.set_xlabel(\"\")\nax7.set_ylabel(\"\")\n\nax8.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax8,x=df['density'],color= \"#FA5458\")\nXstart, Xend = ax8.get_xlim()\nYstart, Yend = ax8.get_ylim()\nax8.text(Xstart, Yend+(Yend*0.15), 'density', fontsize=14, fontweight='bold', fontfamily='serif')\nax8.set_xlabel(\"\")\nax8.set_ylabel(\"\")\n\nax9.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax9,x=df['pH'],color= \"#FA5458\")\nXstart, Xend = ax9.get_xlim()\nYstart, Yend = ax9.get_ylim()\nax9.text(Xstart, Yend+(Yend*0.15), 'pH', fontsize=14, fontweight='bold', fontfamily='serif')\nax9.set_xlabel(\"\")\nax9.set_ylabel(\"\")\n\nax10.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax10,x=df['sulphates'],color= \"#FA5458\")\nXstart, Xend = ax10.get_xlim()\nYstart, Yend = ax10.get_ylim()\nax10.text(Xstart, Yend+(Yend*0.15), 'sulphates', fontsize=14, fontweight='bold', fontfamily='serif')\nax10.set_xlabel(\"\")\nax10.set_ylabel(\"\")\n\nax11.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.boxenplot(ax=ax11,x=df['alcohol'],color= \"#FA5458\")\nXstart, Xend = ax11.get_xlim()\nYstart, Yend = ax11.get_ylim()\nax11.text(Xstart, Yend+(Yend*0.15), 'alcohol', fontsize=14, fontweight='bold', fontfamily='serif')\nax11.set_xlabel(\"\")\nax11.set_ylabel(\"\")","e89e2cd8":"\nfig = plt.figure(figsize=(10,10))\ngs = fig.add_gridspec(1,1)\ngs.update(wspace=0.3, hspace=0.15)\nax0 = fig.add_subplot(gs[0,0])\nfig.patch.set_facecolor(background_color) \nax0.set_facecolor(background_color) \n\ndf_corr = X.corr().transpose()\nmask = np.triu(np.ones_like(df_corr))\nax0.text(2,-0.1,\"Correlation Matrix\",fontsize=22, fontweight='bold', fontfamily='serif', color=\"#000000\")\nsns.heatmap(df_corr,mask=mask,fmt=\".1f\",annot=True,cmap=\"coolwarm\")\nplt.show()","15f92c06":"corr = df.corr()\ncorr.transpose().loc[:, [\"quality\"]].sort_values(by=\"quality\",ascending=False)","63fa7462":"fig = plt.figure(figsize=(18,35))\ngs = fig.add_gridspec(6,2)\ngs.update(wspace=1, hspace=0.5)\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\nax2 = fig.add_subplot(gs[1,0])\nax3 = fig.add_subplot(gs[1,1])\nax4 = fig.add_subplot(gs[2,0])\nax5 = fig.add_subplot(gs[2,1])\nax6 = fig.add_subplot(gs[3,0])\nax7 = fig.add_subplot(gs[3,1])\nax8 = fig.add_subplot(gs[4,0])\nax9 = fig.add_subplot(gs[4,1])\nax10 = fig.add_subplot(gs[5,0])\nax11 = fig.add_subplot(gs[5,1])\n\nbackground_color = \"#f6f5f5\"\ncolor_palette = [\"#FA5458\",\"#FDD563\",\"#5F63F1\"]\n\nfig.patch.set_facecolor(background_color) \nax0.set_facecolor(background_color) \nax1.set_facecolor(background_color) \nax2.set_facecolor(background_color) \nax3.set_facecolor(background_color) \nax4.set_facecolor(background_color) \nax5.set_facecolor(background_color) \nax6.set_facecolor(background_color) \nax7.set_facecolor(background_color) \nax8.set_facecolor(background_color) \nax9.set_facecolor(background_color) \nax10.set_facecolor(background_color) \nax11.set_facecolor(background_color) \n\n\n# Title of the plot\nax0.spines[\"bottom\"].set_visible(False)\nax0.spines[\"left\"].set_visible(False)\nax0.spines[\"top\"].set_visible(False)\nax0.spines[\"right\"].set_visible(False)\nax0.tick_params(left=False, bottom=False)\nax0.set_xticklabels([])\nax0.set_yticklabels([])\nax0.text(0.5,0.5,\n         'Scatter plot\\n__________',\n         horizontalalignment='center',\n         verticalalignment='center',\n         fontsize=18, fontweight='bold',\n         fontfamily='serif',\n         color=\"#000000\")\n\nax1.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.scatterplot(ax=ax1,x='fixed acidity',y='quality',data=df,color= \"#ff8811\")\nXstart, Xend = ax1.get_xlim()\nYstart, Yend = ax1.get_ylim()\nax1.text(Xstart, Yend+(Yend*0.15), 'fixed acidity', fontsize=14, fontweight='bold', fontfamily='serif')\nax1.set_xlabel(\"\")\nax1.set_ylabel(\"\")\n\nax2.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.scatterplot(ax=ax2,x='volatile acidity',y='quality',data=df,color= \"#ff8811\")\nXstart, Xend = ax2.get_xlim()\nYstart, Yend = ax2.get_ylim()\nax2.text(Xstart, Yend+(Yend*0.15), 'volatile acidity', fontsize=14, fontweight='bold', fontfamily='serif')\nax2.set_xlabel(\"\")\nax2.set_ylabel(\"\")\n\nax3.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.scatterplot(ax=ax3,x='citric acid',y='quality',data=df,color= \"#ff8811\")\nXstart, Xend = ax3.get_xlim()\nYstart, Yend = ax3.get_ylim()\nax3.text(Xstart, Yend+(Yend*0.15), 'citric acid', fontsize=14, fontweight='bold', fontfamily='serif')\nax3.set_xlabel(\"\")\nax3.set_ylabel(\"\")\n\nax4.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.scatterplot(ax=ax4,x='residual sugar',y='quality',data=df,color= \"#ff8811\")\nXstart, Xend = ax4.get_xlim()\nYstart, Yend = ax4.get_ylim()\nax4.text(Xstart, Yend+(Yend*0.15), 'residual sugar', fontsize=14, fontweight='bold', fontfamily='serif')\nax4.set_xlabel(\"\")\nax4.set_ylabel(\"\")\n\nax5.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.scatterplot(ax=ax5,x='chlorides',y='quality',data=df,color= \"#ff8811\")\nXstart, Xend = ax5.get_xlim()\nYstart, Yend = ax5.get_ylim()\nax5.text(Xstart, Yend+(Yend*0.15), 'chlorides', fontsize=14, fontweight='bold', fontfamily='serif')\nax5.set_xlabel(\"\")\nax5.set_ylabel(\"\")\n\nax6.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.scatterplot(ax=ax6,x='free sulfur dioxide',y='quality',data=df,color= \"#ff8811\")\nXstart, Xend = ax6.get_xlim()\nYstart, Yend = ax6.get_ylim()\nax6.text(Xstart, Yend+(Yend*0.15), 'free sulfur dioxide', fontsize=14, fontweight='bold', fontfamily='serif')\nax6.set_xlabel(\"\")\nax6.set_ylabel(\"\")\n\nax7.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.scatterplot(ax=ax7,x='total sulfur dioxide',y='quality',data=df,color= \"#ff8811\")\nXstart, Xend = ax7.get_xlim()\nYstart, Yend = ax7.get_ylim()\nax7.text(Xstart, Yend+(Yend*0.15), 'total sulfur dioxide', fontsize=14, fontweight='bold', fontfamily='serif')\nax7.set_xlabel(\"\")\nax7.set_ylabel(\"\")\n\nax8.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.scatterplot(ax=ax8,x='density',y='quality',data=df,color= \"#ff8811\")\nXstart, Xend = ax8.get_xlim()\nYstart, Yend = ax8.get_ylim()\nax8.text(Xstart, Yend+(Yend*0.15), 'density', fontsize=14, fontweight='bold', fontfamily='serif')\nax8.set_xlabel(\"\")\nax8.set_ylabel(\"\")\n\nax9.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.scatterplot(ax=ax9,x='pH',y='quality',data=df,color= \"#ff8811\")\nXstart, Xend = ax9.get_xlim()\nYstart, Yend = ax9.get_ylim()\nax9.text(Xstart, Yend+(Yend*0.15), 'pH', fontsize=14, fontweight='bold', fontfamily='serif')\nax9.set_xlabel(\"\")\nax9.set_ylabel(\"\")\n\nax10.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.scatterplot(ax=ax10,x='sulphates',y='quality',data=df,color= \"#ff8811\")\nXstart, Xend = ax10.get_xlim()\nYstart, Yend = ax10.get_ylim()\nax10.text(Xstart, Yend+(Yend*0.15), 'sulphates', fontsize=14, fontweight='bold', fontfamily='serif')\nax10.set_xlabel(\"\")\nax10.set_ylabel(\"\")\n\nax11.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\nsns.scatterplot(ax=ax11,x='alcohol',y='quality',data=df,color= \"#ff8811\")\nXstart, Xend = ax11.get_xlim()\nYstart, Yend = ax11.get_ylim()\nax11.text(Xstart, Yend+(Yend*0.15), 'alcohol', fontsize=14, fontweight='bold', fontfamily='serif')\nax11.set_xlabel(\"\")\nax11.set_ylabel(\"\")","87b0472e":"print(df.shape)\nprint(X.shape)\nprint(y.shape)","c7662087":"df = df.drop(df[df[\"fixed acidity\"] > 14].index)\ndf = df.drop(df[df[\"volatile acidity\"] > 1.2].index)\ndf = df.drop(df[df[\"citric acid\"] > 0.9].index)\ndf = df.drop(df[df[\"residual sugar\"] > 10].index)\ndf = df.drop(df[df[\"chlorides\"] > 0.3].index)\ndf = df.drop(df[df[\"free sulfur dioxide\"] > 50].index)\ndf = df.drop(df[df[\"total sulfur dioxide\"] > 200].index)\n\ncond_den_1 = df[\"density\"] > 1.003\ncond_den_2 = df[\"density\"] < 0.991\ndf = df.drop(df[cond_den_1 | cond_den_2].index)\n\ncond_ph_1 = df[\"pH\"] > 3.8\ncond_ph_2 = df[\"pH\"] < 2.8\ndf = df.drop(df[cond_ph_1 | cond_ph_2].index)\n\ndf = df.drop(df[df[\"sulphates\"] > 1.25].index)\ndf = df.drop(df[df[\"alcohol\"] > 14].index)\n\nprint(\"Shape after removing the outliers...\")\ndf.shape","d9d6a339":"scaler = RobustScaler()\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.1, random_state = 42)\nprint(\"The shape after train\/test split and scaling...\")\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","0ef8ad19":"models_accuracy = dict() # initialising an empty dictionary to add all the models' accuracy scores\nprint(models_accuracy)","9f5b1ada":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\ny_pred_proba = logreg.predict_proba(X_test)\ny_pred = np.argmax(y_pred_proba,axis=1)\nmodels_accuracy[\"Logistic Regression\"] = accuracy_score(y_pred,y_test)\nprint(classification_report(y_pred,y_test))","329c3063":"param_grid = {'n_neighbors':np.arange(1,50), 'weights':['uniform','distance'], 'leaf_size':np.arange(1,10)}\nknn = KNeighborsClassifier()\nknn_cv = GridSearchCV(knn,param_grid,cv=5)\nknn_cv.fit(X_train, y_train)\ny_pred = knn_cv.predict(X_test)\nprint(knn_cv.best_params_)\nprint(knn_cv.best_score_)\nmodels_accuracy[\"KNN\"] = accuracy_score(y_pred,y_test)\nprint(classification_report(y_pred,y_test))","d72a8963":"param_grid  = {\"max_depth\":np.arange(2,10), \"min_samples_leaf\":np.arange(0.02, 0.1), \"max_features\":[0.2,0.4,0.6,0.8]}\ndt = DecisionTreeClassifier()\ngrid_dt = GridSearchCV(estimator = dt,\n                      param_grid = param_grid,\n                      scoring=\"accuracy\",\n                      cv=10,\n                      n_jobs=-1)\ngrid_dt.fit(X_train, y_train)\ny_pred = grid_dt.predict(X_test)\nprint(grid_dt.best_params_)\nprint(grid_dt.best_score_)\nmodels_accuracy[\"Decision Trees\"] = accuracy_score(y_pred,y_test)\nprint(classification_report(y_pred,y_test))","457ec32c":"params_rf = {'n_estimators':[100,200,300,400,500],\n            'max_depth':[4,6,8,10,12,14],\n            'max_features':['log2','sqrt']}\nrf = RandomForestClassifier()\ngrid_rf = GridSearchCV(estimator = rf,\n                      param_grid = params_rf,\n                      cv=3,\n                      scoring = 'neg_mean_squared_error',\n                      verbose = 1,\n                      n_jobs = -1)\ngrid_rf.fit(X_train, y_train)\ny_pred = grid_rf.predict(X_test)\nprint(grid_rf.best_params_)\nprint(grid_rf.best_score_)\nmodels_accuracy[\"Random Forest\"] = accuracy_score(y_pred,y_test)\nprint(classification_report(y_pred,y_test))","4ee21fb9":"classifiers = [('Logistic Regression',logreg),\n              ('K Nearest Neighbors', knn),\n              ('Classification Tree', dt)]\nfor clf_name,clf in classifiers:\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    print(clf_name, accuracy_score(y_test,y_pred))\nvc = VotingClassifier(estimators = classifiers)\nvc.fit(X_train, y_train)\ny_pred = vc.predict(X_test)\nmodels_accuracy[\"Voting Classifier\"] = accuracy_score(y_pred,y_test)\nprint(accuracy_score(y_test, y_pred))","fae0bd8f":"models_accuracy","60b6305d":"model = []\naccuracy = []\nfor index,col in enumerate(models_accuracy):\n    model.append(col)\n    accuracy.append(models_accuracy[col])\nprint(model)\nprint(accuracy)","36e93403":"acc = pd.DataFrame({\"Models\":model, \"Accuracy\":accuracy})\nplt.figure(figsize=(8,6))\nsns.scatterplot(x = 'Models', y='Accuracy', data=acc, color='#3339FF',cmap=True)\nplt.show()","df59222b":"#### 3.2 Bivariate Analysis","08f25706":"Almost all the features consists of outliers. But among (1599) tuples present in the dataset, removing the outliers will lead to a loss of training data. The accuracy of the model can be checked in both of the cases. Before and after removal of tha outliers.","5b4e7237":"##### 3.2.2 Logistic Regression","992eddaf":"#### 2.5 Helper function to bin the target variable\nBinning the `quality` column into 0, 1 and 2.","9070f234":"None of the features seems to be skewed. `Residual sugar` and `Chlorides` seems to be a little bit right skewed, but not much-can be ignored.","48013378":"Outliers - I'm removing the outliers, but they can be kept as removing them will reduce the training data. ","2764b165":"##### 3.1.1 Separating feautures and labels","6f19ee45":"##### 3.2.3 KNeighbors Classifier\nI've set an extensive grid just in KNN. For all other models, just the basic parametes have been set.","b498db7e":"### 4. Modelling <a id=4><\/a>\n[back to top](#100)","408d372f":"#### 3.2 Modelling","07e8c66b":"##### 3.2.3 Shape","d5248e3d":"##### 3.1.3 Quality Distribution","2acd15a9":"#### 2.4 Target variable - `quality`\nThe target value `quality` can be treated both as numerical or categorical. I've considered it as categorical.","c6bd9580":"There are no null values in the dataset. No need for imputation.","864d28d2":"#### 2.2 Shape of the data","6a8ba29c":"Most of the data lies in the average quality. This gives an idea about the predicted values. A high number of predicted values will be 1.","49fe72f6":"##### 3.2.7 Model performances","1c22755c":"Table of Contents:- <a id=100><\/a>\n1. [Packages](#1)\n2. [Understanding Data](#2)\n3. [Exploratory Data Analysis](#3)\n4. [Modelling](#4)","d753df06":"##### 3.2.4 Decision Tree","ccb48009":"There's neither any correlation between different features nor any visibe relationship between features and *quality* target.","4e32cc58":"##### 3.1.5 Boxenplot of features","1972ebdd":"A mask of 0.7 has been added which shows there's hardly any correlation between the features. ","e5095a0d":"#### 2.1 Importing the data","a5b16a61":"##### 3.2.1 Correlation matrix","9ac2751e":"#### 3.1 Scaling the data","1a90651d":"### 1. Packages <a id=1><\/a>\n[back to top](#100)","4d397d9b":"##### 3.2.6 Voting Classifier","ef88a187":"##### 3.1.4 Distribution of features","e9b91fa9":"#### 3.1 Univariate Analysis","3fc61f43":"##### 3.2.5 Random Forest","15c58885":"##### 3.2.3 Handling the outliers","033ec273":"### 2. Understanding Data <a id=2><\/a>\n[back to top](#100)","e1257209":"#### 2.3 Data Info","0507dcda":"Since an extensive Grid Search was set for KNN, it is clearly outperforming all other models according to the Scatterplot.","888d615f":"#### If you like the notebook, consider giving an upvote.","f18838c1":"##### 3.1.2 Data stats","1554edef":"##### 3.2.2 Correlation values","f430ccd0":"<h2><center>Red Wine EDA and Classification<\/center><\/h2>","3c4df089":"##### 3.2.1 Dictionary for accuracy","defded03":"### 3. Exploratory Data Analysis <a id=3><\/a>\n[back to top](#100)"}}