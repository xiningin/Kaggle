{"cell_type":{"aebb6d42":"code","b3b24ba6":"code","473963d2":"code","3a05e770":"code","94ebd679":"code","ed2218e3":"code","1eda32d9":"code","0e53b49b":"code","730797b6":"code","2aa5ea68":"code","a08fe03e":"code","a6cb5bc4":"code","77fe112f":"code","a07c7257":"code","90bd304a":"code","a86eff81":"code","3d6aa7b6":"code","89a67014":"code","e33adb8a":"code","9ecd609a":"code","6fadc3a7":"code","9368a1c8":"code","ce76686a":"code","8f1297f5":"code","21d68eb2":"code","71f5d1e9":"code","60a1f088":"code","19186e12":"code","f90c9b5c":"code","b082aa1b":"code","fff99065":"code","54e17cf9":"code","3bda5e63":"code","ca3bce7e":"code","26c9a614":"code","cd9b67cd":"code","7b9d6306":"code","3a026272":"code","13cb63a2":"code","1e11152b":"code","f983c261":"code","4dec164e":"code","d608478b":"code","e9be5469":"code","d98c465f":"code","1b300436":"code","0d9f05b7":"code","2b343c7e":"code","6fcbf6f6":"markdown","1e0c7cba":"markdown"},"source":{"aebb6d42":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b3b24ba6":"df=pd.read_csv('\/kaggle\/input\/engineering-placements-prediction\/collegePlace.csv')\ndf.head()","473963d2":"df.shape","3a05e770":"df.info()","94ebd679":"df['Stream'].value_counts().plot(kind='pie')","ed2218e3":"print(np.sum(df.isnull()))","1eda32d9":"df['Gender'].value_counts()","0e53b49b":"data_M=df[df['Gender']=='Male']\ndata_F=df[df['Gender']=='Female']\nprint(data_M.shape,data_F.shape)\n","730797b6":"male_placement_passed=data_M[data_M['PlacedOrNot']== 1].shape[0]\nfemale_placement_passed=data_F[data_F['PlacedOrNot']==1 ].shape[0]\nprint(male_placement_passed,female_placement_passed)\n","2aa5ea68":"male_placed_precentage=male_placement_passed\/data_M.shape[0]\nfemale_placed_precentage=female_placement_passed\/data_F.shape[0]\n\n","a08fe03e":"Information= {\n\n    'Total Male students': data_M.shape[0],\n    'Total Female Students': data_F.shape[0],\n    '% of male student Placed': np.round(male_placed_precentage*100),\n    '% of female student placed':np.round(female_placed_precentage*100)\n}","a6cb5bc4":"Information","77fe112f":"low_cgpa=df[df['CGPA']<df['CGPA'].mean()]","a07c7257":"low_cgpa.shape[0]","90bd304a":"low_cgpa_placed=low_cgpa[low_cgpa['PlacedOrNot']==1]\nlow_cgpa_placed.shape[0]","a86eff81":"percentage_low_cgpa_placed=(low_cgpa_placed.shape[0]*100)\/low_cgpa.shape[0]\nprint(np.round(percentage_low_cgpa_placed))","3d6aa7b6":"import plotly.express as px\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)","89a67014":"fig=px.histogram(data_frame=df,x='Stream',color='PlacedOrNot',template='plotly_dark')\nfig.show()","e33adb8a":"fig=px.histogram(data_frame=low_cgpa,x='CGPA',color='PlacedOrNot',barmode='group')\nfig.update_layout(bargap=0.2)\nfig.show()","9ecd609a":"fig=px.histogram(df,'Age')\nfig.add_vline(x=df['Age'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()\n","6fadc3a7":"fig = px.pie(df, names = \"Gender\",\n             title = \"<b>Counts in Gender<\/b>\",\n             hole = 0.5, template = \"plotly_dark\")\n\nfig.update_traces(textposition='inside',\n                  textinfo='percent+label',\n                  marker=dict(line=dict(color='#000000', width = 1.5)))\n\n\nfig.show()","9368a1c8":"no_internship=df[df['Internships']==0]\nno_internship.shape","ce76686a":"fig=px.histogram(no_internship,x='PlacedOrNot',color='PlacedOrNot')\nfig.update_layout(bargap=0.3)\nfig.show()\n","8f1297f5":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ndf['Stream']=le.fit_transform(df['Stream'])\ndf['Gender']=le.fit_transform(df['Gender'])","21d68eb2":"df.head(n=20)","71f5d1e9":"x=df.iloc[:,:-1]\ny=df.iloc[:,-1]\nprint(x.shape,y.shape)","60a1f088":"print(type(x))","19186e12":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nx=sc.fit_transform(x)","f90c9b5c":"x","b082aa1b":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=1,stratify=y)\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","fff99065":"x_train","54e17cf9":"from sklearn.tree import DecisionTreeClassifier","3bda5e63":"dt=DecisionTreeClassifier()\ndt.fit(x_train,y_train)","ca3bce7e":"dt.score(x_train,y_train)","26c9a614":"dt.score(x_test,y_test)","cd9b67cd":"from sklearn.model_selection import GridSearchCV","7b9d6306":"params={\n    \n     'max_depth': [2, 3, 5, 10, 20],\n     'min_samples_leaf': [5, 10, 20, 50, 100],\n     'criterion': [\"gini\", \"entropy\"]\n}","3a026272":"grid_search = GridSearchCV(estimator=dt, \n                           param_grid=params, \n                           cv=4, n_jobs=-1, verbose=1, scoring = \"accuracy\")","13cb63a2":"grid_search.fit(x_train,y_train)","1e11152b":"grid_search.best_estimator_","f983c261":"d_new=DecisionTreeClassifier(max_depth=20, min_samples_leaf=10)","4dec164e":"d_new.fit(x_train,y_train)","d608478b":"d_new.score(x_train,y_train)","e9be5469":"d_new.score(x_test,y_test)","d98c465f":"from sklearn.ensemble import StackingClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.linear_model import LogisticRegressionCV\nfrom sklearn.ensemble import RandomForestClassifier\n\nbase_models=[('dt',DecisionTreeClassifier(max_depth=20, min_samples_leaf=10,criterion='gini')),('RF',RandomForestClassifier(n_estimators=800)),('lr',LogisticRegressionCV())]\nmeta_model = LogisticRegressionCV()","1b300436":"stacking_model = StackingClassifier(estimators=base_models, final_estimator=meta_model, passthrough=True, cv=3)\n","0d9f05b7":"stacking_model.fit(x_train, y_train)","2b343c7e":"stacking_model.score(x_test,y_test)","6fcbf6f6":"**LOW CGPA VS PLACEMENTS***** ","1e0c7cba":"STREAMS"}}