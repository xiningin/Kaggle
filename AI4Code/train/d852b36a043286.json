{"cell_type":{"e5115562":"code","07babd4d":"code","12dc0ee5":"code","50d37692":"code","2dbfa76d":"code","727110b7":"code","82c9bb85":"code","a32e99a3":"code","6fb64e31":"code","b58e4985":"code","6458b24c":"code","30fc752a":"code","4e898e1c":"code","2020a041":"code","c34a75e3":"code","7a4cc35b":"code","9071f31d":"code","ae558818":"code","bff353d9":"code","70032690":"code","a686faf9":"code","3d539b5a":"code","5388493a":"code","f8b9abac":"code","5ceea030":"code","19fc2c95":"code","7be1ac2b":"code","37afc9e8":"code","8af48753":"code","a82d67c6":"code","78320a72":"code","8f64f943":"code","988dbd41":"code","6bc0bb13":"code","9bde6904":"code","11db38ef":"code","e059deff":"code","68a8648a":"code","1a6468d7":"code","ea5c1e7c":"code","bb02fcc4":"code","5ef05ae0":"code","35e8d55e":"code","2fa3381d":"code","25f884b3":"code","d3352005":"code","346b01ca":"code","01949e4d":"code","c8041a60":"code","7e618b94":"code","bcb6f578":"code","74afcbf6":"code","7c054e73":"code","b28efaf1":"code","7da3466f":"code","792b0dcd":"code","094ef293":"code","a87bfd9d":"code","75ea2509":"code","45bf49f7":"code","bbef3aa3":"code","946d2466":"code","b8362e71":"code","328e376f":"code","9310cfaa":"code","60c935d4":"code","de7a7a16":"code","f7740694":"code","ea5f024a":"code","4280d771":"code","f7d670c1":"code","5a8e2eaa":"code","3f02eec1":"code","c465b709":"code","70e29026":"code","5672425a":"code","8f200954":"code","dd3413d6":"code","9b2fc57e":"code","b941a457":"code","4e831de6":"code","59a81f7d":"code","29d3884d":"code","afd30783":"code","6b1d137d":"code","80b326ac":"code","629578d5":"code","3a9918fe":"code","1b78741f":"code","61384834":"code","63c4a8f7":"code","b574a9cb":"code","3566f7b6":"code","44432fef":"code","daf13806":"code","d05fc309":"code","bd844abd":"code","a248c870":"code","d368278b":"code","7ece7ff2":"code","8c6087c5":"code","79452200":"code","5592766f":"code","97db20c3":"markdown","9c7eefb2":"markdown","1eca5f42":"markdown","eaa463ca":"markdown","2f4aa18e":"markdown","787aa982":"markdown","f8e19f32":"markdown","97a320c0":"markdown","4237c0bb":"markdown","aa004ace":"markdown","266c55e8":"markdown","5f601765":"markdown","c90661ea":"markdown","2c4bf062":"markdown","7a67fd9d":"markdown","d993f29b":"markdown","351c257b":"markdown","824e672c":"markdown","e36630e0":"markdown","6011ad71":"markdown","c49af06b":"markdown","4a192879":"markdown","e2385ba8":"markdown","40410ce3":"markdown","c46ed694":"markdown","5035e3fb":"markdown","e952fd44":"markdown","7b47ec53":"markdown","c09e84ca":"markdown","1819f058":"markdown","e1dabd6a":"markdown"},"source":{"e5115562":"#import Libraries\nimport numpy as np\nimport pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sys\nimport warnings\nimport sys\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")    ","07babd4d":"df = pd.read_excel(\"..\/input\/dataset.xlsx\")","12dc0ee5":"df.head() ","50d37692":"df.info()","2dbfa76d":"df.columns","727110b7":"df.columns = ['DateOfTest','Signal','Speed','DistanceFromSite','CallTestDuration','CallTestResult','CallTestTechnology','CallTestSetupTime','MOS']","82c9bb85":"df.head()","a32e99a3":"df.MOS.nunique()","6fb64e31":"df.MOS.unique()","b58e4985":"df.shape","6458b24c":"df.MOS.value_counts()","30fc752a":"df.MOS.value_counts(bins=5)","4e898e1c":"df.MOS.value_counts(bins=4)","2020a041":"df.MOS.value_counts(bins=3)","c34a75e3":"sns.countplot(x=df.MOS)","7a4cc35b":"df.loc[(df['MOS']>=1 )&(df['MOS']<=2.6),'MOS'].shape","9071f31d":"df.loc[(df['MOS']>2.6 )&(df['MOS']<=3.6),'MOS'].shape","ae558818":"df.loc[(df['MOS']>3.6 )&(df['MOS']<=4.4),'MOS'].shape","bff353d9":"### transforming 35 values into 3 classess\ndf.loc[(df['MOS']>=1 )&(df['MOS']<=2.6),'MOS'] = 2\ndf.loc[(df['MOS']>2.6 )&(df['MOS']<=3.6),'MOS'] = 3\ndf.loc[(df['MOS']>3.6 )&(df['MOS']<=4.4),'MOS'] = 4        ","70032690":"df['MOS'].value_counts().plot(kind= 'barh', color = 'orange', title = 'MOS')\nplt.show()","a686faf9":"##descibe the data for better understanding`\ndf.describe()","3d539b5a":"df.describe(include= 'all')","5388493a":"#Non Numeric features\nobject_columns_df = df.select_dtypes(include=[\"object\"])\nprint (object_columns_df.iloc[0])","f8b9abac":"##transforming categorical features","5ceea030":"df.CallTestResult.value_counts()","19fc2c95":"df.groupby('CallTestResult')['MOS'].value_counts()","7be1ac2b":"import numpy as np\nimport pandas as pd\nimport pandas_profiling\nprofile = pandas_profiling.ProfileReport(df)\n#generate html\n#profile.to_file(outputfile=\"output.html\")","37afc9e8":"profile","8af48753":"result_replace = {\n    \"CallTestResult\" : {\n        \"SUCCESS\": 1,\n        \"FAILURE - SETUP FAIL\": 0,\n        \"FAILURE - DROP CALL\" : 0,\n    }\n}\ndf = df.replace(result_replace)","a82d67c6":"df.groupby('CallTestResult')['MOS'].value_counts()","78320a72":"df['CallTestTechnology'].value_counts()","8f64f943":"df.groupby('CallTestTechnology')['MOS'].value_counts()","988dbd41":"df.groupby('CallTestTechnology')['CallTestResult'].value_counts()","6bc0bb13":"df.groupby('CallTestResult')['MOS'].value_counts()","9bde6904":"df.info()","11db38ef":"#OneHotEncoder\ndummy_df = pd.get_dummies(df['CallTestTechnology'])\ndf = pd.concat([df, dummy_df], axis=1)\ndf = df.drop(['CallTestTechnology'], axis=1)","e059deff":"df.head()","68a8648a":"#DateTime\ndf[\"DateOfTest\"]=pd.to_datetime(df['DateOfTest']) #convert an object to a datetime type","1a6468d7":"df.head()","ea5c1e7c":"import calendar\ndf['minute']=df['DateOfTest'].apply(lambda x:x.minute)\ndf['second']=df['DateOfTest'].apply(lambda x:x.second)\ndf['day']=df['DateOfTest'].apply(lambda x:x.day)\ndf['hour']=df['DateOfTest'].apply(lambda x:x.hour)\ndf['weekday']=df['DateOfTest'].apply(lambda x:calendar.day_name[x.weekday()])\ndf['month']=df['DateOfTest'].apply(lambda x:x.month)\ndf['year']=df['DateOfTest'].apply(lambda x:x.year)","bb02fcc4":"#df['minute'].nunique() # 60\n#df['second'].nunique() # 60\n#df['hour'].nunique() # 24 \n#df['day'].nunique() # 31\n#df['weekday'].nunique() #7\ndf['month'].nunique() #4\n#df['year'].nunique() #1","5ef05ae0":"##dropping month and year columns and dateoftest\ndf = df.drop(['year','month','DateOfTest'],axis=1)","35e8d55e":"df.shape","2fa3381d":"df.head()","25f884b3":"df['weekday'].unique()","d3352005":"##transforming weekday column\n#df.weekday = df.weekday.map({'Monday':0,'Tuesday':1,'Wednesday':2,'Thursday':3,'Friday':4,'Saturday':5,'Sunday':6})","346b01ca":"#OneHotEncoder\ndummy_df = pd.get_dummies(df['weekday'])\ndf = pd.concat([df, dummy_df], axis=1)\ndf = df.drop(['weekday'], axis=1)","01949e4d":"df.info()","c8041a60":"plt.hist(df['MOS'])\nplt.show()","7e618b94":"#from sklearn.preprocessing import OneHotEncoder\n#onehotencoder = OneHotEncoder(categorical_features = [5])\n#df = onehotencoder.fit_transform(df).toarray()\n","bcb6f578":"df.describe()","74afcbf6":"object_columns_df = df.select_dtypes(include=[\"object\"])\nprint (object_columns_df.iloc[0])","7c054e73":"##missing value\ndf.isna().sum()","b28efaf1":"##correation between the features\ncorrelations = df.corr()\nsns.heatmap(data= correlations,square =True , cmap = \"bwr\")\nplt.yticks(rotation= 0)\nplt.xticks(rotation= 90)","7da3466f":"df[[\"UMTS\",\"Signal\"]].corr()","792b0dcd":"df.describe()","094ef293":"Q1 = df['DistanceFromSite'].quantile(0.25)\nQ3 = df['DistanceFromSite'].quantile(0.75)\nprint('Q1 :' + str(Q1))\nprint('Q3 :' + str(Q3))\nIQR = Q3 - Q1\nprint('IQR :' + str(IQR))\nprint(Q1 - IQR)\nprint(Q3 + IQR)","a87bfd9d":"print('max value : ' + str(df['DistanceFromSite'].max()))\nprint('min value :' + str(df['DistanceFromSite'].min()))\nprint('mean value: '+ str(df['DistanceFromSite'].mean()))\nprint('mode value:'+ str(df['DistanceFromSite'].mode()))","75ea2509":"print('No. of records with distance > 100km : ' + str(df[((df['DistanceFromSite'] > 100000))].shape))\nprint('No. of records with distance > 1343 meter : ' + str(df[((df['DistanceFromSite'] > 1343))].shape))\nprint('No. of records with distance > 35km : ' + str(df[((df['DistanceFromSite'] > 35000))].shape))\n#df[((df['DistanceFromSite'] > 100000) & (df['MOS'] > 3))].shape\n#df[((df['DistanceFromSite'] > 1343))].shape  # IQR","45bf49f7":"df.DistanceFromSite.isna().sum()","bbef3aa3":"import seaborn as sns\nsns.boxplot(df.DistanceFromSite)\n###can not consider outlier","946d2466":"fig, ax = plt.subplots(figsize=(16,8))\nax.scatter(df['DistanceFromSite'], df['MOS'])\nax.set_xlabel('DistanceFromSite')\nax.set_ylabel('MOS')\nplt.show()","b8362e71":"import seaborn as sns\nsns.boxplot(x = 'MOS' , y = 'DistanceFromSite' , data = df)","328e376f":"df[\"Signal\"].fillna(df['Signal'].mean(), inplace = True)","9310cfaa":"##missing value\ndf.isna().sum()","60c935d4":"##decision to replace the missing records from distancefromsite feature\ndf[[\"DistanceFromSite\",\"LTE\"]].corr()","de7a7a16":"df['DistanceFromSite'].isna().sum()","f7740694":"df[((df['DistanceFromSite'] > 400000) & (df['MOS'] > 3))].shape #& (df['MOS'] > 3)","ea5f024a":"df[((df['DistanceFromSite'] > 1300))].shape","4280d771":"sns.distplot(df.Signal)","f7d670c1":"df['DistanceFromSite'].shape","5a8e2eaa":"fig, ax = plt.subplots(figsize=(16,8))\nax.scatter(df['DistanceFromSite'], df['MOS'])\nax.set_xlabel('DistanceFromSite')\nax.set_ylabel('MOS')\nplt.show()","3f02eec1":"#df[(df['DistanceFromSite'] > 20000)].shape  #(3143, 15)\n#df[(df['DistanceFromSite'] < 1343)].shape  #(82685, 15)\n#df[(df['DistanceFromSite'] > 1343)].shape  #(12784, 15)\ndf[(df['DistanceFromSite'] > 20000) & (df['MOS'] == 4)].shape  #(1365, 15)\n#df[(df['DistanceFromSite'] < 35000)].shape  #(12784, 15)","c465b709":"df[(df['DistanceFromSite'] < 150000) & (df['DistanceFromSite'] > 35000)].shape ","70e29026":"df[(df['DistanceFromSite'] > 1343) & (df['DistanceFromSite'] < 35000)].shape ","5672425a":"import seaborn as sns\nsns.boxplot(df.CallTestDuration)","8f200954":"Q1 = df['CallTestDuration'].quantile(0.25)\nQ3 = df['CallTestDuration'].quantile(0.75)\nprint('Q1 :' + str(Q1))\nprint('Q3 :' + str(Q3))\nIQR = Q3 - Q1\nprint('IQR :' + str(IQR))\nprint(Q1 - IQR)\nprint(Q3 + IQR)","dd3413d6":"df['CallTestDuration'].min()","9b2fc57e":"df[(df['CallTestDuration'] > 120 )].shape","b941a457":"df[(df['CallTestDuration'] < 30 )].shape","4e831de6":"df.describe()","59a81f7d":"##removing outliers from DistanceFromSite\ndf = df[(df['DistanceFromSite'] < 35000) | df['DistanceFromSite'].isna()]","29d3884d":"print(df.shape)\ndf['DistanceFromSite'].mean()","afd30783":"df[\"DistanceFromSite\"].fillna(df['DistanceFromSite'].mean(), inplace = True) ","6b1d137d":"#find null values\n\nfor _ in df.columns:\n    print(\"The number of null values in:{} == {}\".format(_, df[_].isnull().sum()))","80b326ac":"df.MOS.value_counts()","629578d5":"x=df.drop(\"MOS\",axis=1)   #  feature \ny=df[\"MOS\"]    # Target","3a9918fe":"from sklearn.model_selection import train_test_split","1b78741f":"x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.3, random_state=101)","61384834":"#regressiom algorithm give RMSE value 0.8688302922677146 for RandomForestRegressor\n#from sklearn.ensemble import RandomForestRegressor\n#rfrmodel = RandomForestRegressor(n_estimators=10000, random_state=101)\n#rfrmodel.fit(x_train,y_train)\n#rfrmodel_pred= rfrmodel.predict(x_test)\n#rfrmodel_rmse=np.sqrt(mean_squared_error(rfrmodel_pred, y_test))\n#print(\"RMSE value for Random forest regression is \",rfrmodel_rmse)","63c4a8f7":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\n#from sklearn.metrics import multilabel_confusion_matrix\nmodel = LogisticRegression()\nmodel.fit(x_train, y_train)\npredictedvalues=model.predict(x_test)\nprint(accuracy_score(y_test,predictedvalues))\nprint(confusion_matrix(y_test, predictedvalues))\nprint(classification_report(y_test,predictedvalues))\n#print('multilabel CM')  #new version of sklearn - scikit-learn\n#print(multilabel_confusion_matrix(y_true, y_pred))","b574a9cb":"d = [0.01, 0.05, 0.25, 0.5, 1]\nval_acc = []\nfor c in d:\n    \n    lr = LogisticRegression(C=c)\n    #pipe = Pipeline([('cnt',X),('LR',lr)])\n    lr.fit(x_train, y_train)\n    acc= accuracy_score(y_test, lr.predict(x_test))\n    print (\"Accuracy for C=%s: %s\" \n           % (c, acc))\n    val_acc.append(acc)","3566f7b6":"#Lets try random forest classifier.\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(x_train, y_train)\npredictedvalues=model.predict(x_test)\nprint(accuracy_score(y_test,predictedvalues))\nprint(confusion_matrix(y_test, predictedvalues))\nprint(classification_report(y_test,predictedvalues))","44432fef":"model = AdaBoostClassifier()\nmodel.fit(x_train, y_train)\npredictedvalues=model.predict(x_test)\nprint(accuracy_score(y_test,predictedvalues))\nprint(confusion_matrix(y_test, predictedvalues))\nprint(classification_report(y_test,predictedvalues))","daf13806":"gbclassfier = GradientBoostingClassifier(n_estimators=100)\ngbclassfier.fit(x_train, y_train)\npredictedvalues=gbclassfier.predict(x_test)\nprint(accuracy_score(y_test,predictedvalues))\nprint(confusion_matrix(y_test, predictedvalues))\nprint(classification_report(y_test,predictedvalues))","d05fc309":"from xgboost import XGBClassifier \nclf = XGBClassifier() \nclf.fit(x_train, y_train) \ny_pred2 = clf.predict(x_test) \nprint(accuracy_score(y_test,y_pred2))\n","bd844abd":"from xgboost import XGBClassifier \nclf = XGBClassifier(learning_rate=0.01,n_estimators=899,max_depth=15,min_child_weight=1,gamma=0.3,subsample=0.8,colsample_bytree=0.8,objective='binary:logistic',nthread=4,scale_pos_weight=1,seed=3217) \nclf.fit(x_train, y_train) \ny_pred = clf.predict(x_test) \nprint(accuracy_score(y_test,y_pred))\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test,y_pred))","a248c870":"#Lets try random forest classifier.\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import SelectPercentile\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tpot.builtins import ZeroCount\nmodel = RandomForestClassifier(bootstrap=True, criterion=\"entropy\", max_features=0.2, min_samples_leaf=5, min_samples_split=20, n_estimators=100)\nmodel.fit(x_train, y_train)\npredictedvalues=model.predict(x_test)\nprint(accuracy_score(y_test,predictedvalues))\nprint(confusion_matrix(y_test, predictedvalues))\nprint(classification_report(y_test,predictedvalues))","d368278b":"import pickle\nfilename = 'MosClassifier'\npickle.dump(model, open(filename, 'wb'))","7ece7ff2":"#feature scaling did not improve the accuracy\n#from sklearn.preprocessing import StandardScaler\n#sc = StandardScaler()\n#X_train = sc.fit_transform(x_train)\n#X_test = sc.transform(x_test)","8c6087c5":"print(df[10:11:])","79452200":"rfclassifier = pickle.load(open(filename, 'rb'))","5592766f":"predictedvalues=rfclassifier.predict([[-105.0,0.82,256.07,60.0,1,3.26,0,0,1,23,37,1,0,0,0,1,0,0,0,0]])\npredictedvalues[0]","97db20c3":"#### Renaming feature columns","9c7eefb2":"## from the above metrics LogisticRegression Classifier gives accuracy which is 0.6699 % , lets try fine tuning and other algorithms","1eca5f42":"# mos research & domain knowledge\nhttps:\/\/en.wikipedia.org\/wiki\/Timing_advance  - range of GSM 35km <br>\nhttps:\/\/en.wikipedia.org\/wiki\/Cell_site<br>\nhttps:\/\/en.wikipedia.org\/wiki\/Mean_opinion_score  - information about MOS range <br>\nhttps:\/\/www.voipmechanic.com\/mos-mean-opinion-score.htm <br>\nhttps:\/\/www.voip-info.org\/call-quality-metrics\/ <br>\nhttps:\/\/www.twilio.com\/docs\/glossary\/what-is-mean-opinion-score-mos <br>\n","eaa463ca":"# Outlier Detection","2f4aa18e":"### Context\nCall Test Measurements for Mobile Network Monitoring and Optimization.\n### Content\nThe measurements were performed with smartphones and collected on proprietary databases.\nhttps:\/\/www.kaggle.com\/valeriol93\/predict-qoe","787aa982":"#Converting DateTime Feature because this MOS is depend on Datetime aswell","f8e19f32":"Using OneHotEncoder instead of LabelEncoder will increase the Accuracy by 1% \nI tried it on the other notenook","97a320c0":"# Minimum opinion score \n\nVery satisfied\t         4.3-5.0\n\nSatisfied\t             4.0-4.3\n\nSome users satisfied\t 3.6-4.0\n\nMany users dissatisfied\t 3.1-3.6\n\nall users dissatisfied   2.6-3.1\n\nNot recommended\t         1.0-2.6","4237c0bb":"#########in the next training will go with 35km distance instead of 1343","aa004ace":"for 2 classes RFClassifier gave 87% accuracy in other notebook","266c55e8":"## Looking at the output class it will be hard to classify in 35 categories,from the domain research we can classify this values into a particular Range","5f601765":"#Satisfied\t4.0-4.4\n#Some users satisfied\t3.6-4.0\n#Many users dissatisfied\t3.1-3.6\n#Nearly all users dissatisfied\t2.6-3.1\n#Not recommended\t1.0-2.6","c90661ea":"### Lets serialize this classifier to deploy on heroku ","2c4bf062":"#for DistanceFromSite\n\ndata missing : 10359\n\nmean using all data : 7797 meter distance\n\ndata less than outlier 1343 : 12784","7a67fd9d":"# Model Training","d993f29b":"Signal and DistanceFromSite features has missing value, \nWe can replace missing value from Signal with mean \nbut since DistanceFromSite feature has outliers which are responsible for increasing the mean\nthis data is 10 % off the total records so it will impact the prediction","351c257b":"# Pandas-Profiling\n##lets look the data in more detail using pandas profiling\n#using pandas profiling we can look more into the data in shorter time","824e672c":"We can categorize this 35 output categories (Continious values)  into 3 categories which will be <br>\n1) Poor MOS (1 to 2.6) <br>\n2) Average MOS Range 2.6 - 3.6 <br>\n3) Good MOS Range 3.6 - 4.4 <br>","e36630e0":"## lets check our serialized model for prediction","6011ad71":"using Pandas profile output we can analyse the data,like missing values,feature's description , min max mean IQR Q1, Q3 values etc","c49af06b":"#dataloss will be 10% if we choose 1343\n\n#we will exclude the records which are more than 35km","4a192879":"#distancefromSite has variation in data  \nmin and max value has bi difference\n#Domain knowledge\nmaximum coverage of network can be of 35 km","e2385ba8":"#accuracy is higher for c = 1","40410ce3":"Importing Dataset","c46ed694":"### From the description we can see DistanceFromSite feature has very high varience in the records , there may be outliers since the max distance is 700km which is not possible as the maximum coverage of antenna can be of 35km ","5035e3fb":"this data is of year 2017 and records are for 4 months","e952fd44":"##Our model has predicted correctly","7b47ec53":"### Model deployed on : https:\/\/mosclassifier.herokuapp.com\/","c09e84ca":"## I tried to solve this problem using regression as well which gave me RMSE score of 0.86 using RFR , but here requirement is to use classification algorithm","1819f058":"##output of AUTOML from another notebook\nGeneration 1 - Current best internal CV score: 0.7184866084873001\nGeneration 2 - Current best internal CV score: 0.7198832011843657\nGeneration 3 - Current best internal CV score: 0.7198832011843657\nGeneration 4 - Current best internal CV score: 0.7198832011843657\nGeneration 5 - Current best internal CV score: 0.7205685337488389\n\nBest pipeline: RandomForestClassifier(ZeroCount(MinMaxScaler(SelectPercentile(input_matrix, percentile=97))), bootstrap=True, criterion=entropy, max_features=0.2, min_samples_leaf=5, min_samples_split=20, n_estimators=100)\n0.7240282411358523","e1dabd6a":"# RandomForestClassifier with the above hyperparameter is giving 72.26 %  accuracy as compare to other model RFC is best classifier"}}