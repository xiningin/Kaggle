{"cell_type":{"7c6c1e9e":"code","a557006d":"code","de80bcc6":"code","35c07140":"code","868b5220":"code","57bda045":"code","62645719":"code","8b6819a6":"code","0e51fb30":"code","78bab12f":"code","2550432b":"code","1079efcf":"code","a326b7b9":"code","d8c06f2d":"code","ea019811":"code","177ef17e":"code","d341ee0e":"code","ab218242":"code","188250e1":"code","a6be2317":"code","3fde4d09":"code","ce7b8510":"code","ed049e71":"code","63bc6072":"code","70332719":"code","eb0ef78d":"code","382106a4":"code","175ff32b":"code","9c0bde2a":"code","bad05f2f":"code","1d2e2f6a":"markdown","c3066174":"markdown"},"source":{"7c6c1e9e":"import pandas as pd # data processing, CSV file I\/O.\nimport numpy as np # linear algebra.\nimport re #regular expression (check if a string contains the specified search pattern).\nimport nltk #Natural Language ToolKit(language processing).\nnltk.download('stopwords') # filter out useless word.\nfrom nltk.corpus import stopwords #word that can be ignore in programming language.\nimport matplotlib.pyplot as plt #Basic visualization.\nfrom wordcloud import WordCloud #Visual word frequency\nfrom textblob import TextBlob #To get polarize and sentiment from dataset\nfrom nltk.stem import PorterStemmer #To completely cleaned texts\npd.set_option('display.max_colwidth', None) #Set display to show all text in columns","a557006d":"#Open data in csv format using Pandas.\ndata = pd.read_csv('\/kaggle\/input\/reddit-vaccine-myths\/reddit_vm.csv')","de80bcc6":"data.head() #Print the 5th head dataset.","35c07140":"data.info() #Print basic information from the dataset, that is range index, data columns including type of columns, and memory usage of the dataset.","868b5220":"data.isnull().sum() #Print total of every non-values in a dataset. Non values are in url and body columns but latter, I just choose title and body so I just thinking about thosw columns later.","57bda045":"#Making dataframe that not contain comment values in a title column. This is because comment values haven't any text so it better to delete them.\ndata_title = data[~data.title.str.contains(\"Comment\")] #","62645719":"#Delete commonly used word that prevent machine to ignore them.\nstop = stopwords.words('english')\ndata_title['title'].apply(lambda x: [item for item in x if item not in stop])","8b6819a6":"#Making cleaning function to remove any punctuations.\ndef review_cleaning(text):\n    \n    # Removing unuseful character.\n    text = re.sub(r'([!\u201d#$%&\u2019()*+,-.\/:;<=>?[\\]^_`{|}~])', ' ', text)\n    # Removing link of the message.\n    text = re.sub(r'http\\S+', ' ', text)\n    text = re.sub(r'https\\S+', ' ', text)\n    # Removing a string of whitespace characters.\n    text = re.sub(r'\\s+', ' ', text)\n    # Removing numbers.\n    text = re.sub(r'\\d+', ' ', text)\n    # Removing special characters.\n    text = re.sub(r'[^a-zA-Z0-9]+', ' ', text)\n    return text","0e51fb30":"#Apply remove punctuations function.\ndata_title['title'] = data_title['title'].apply(review_cleaning) # Apply cleanser.","78bab12f":"#Process for removing the commoner morphological and inflexional endings from words in English.\nps = PorterStemmer()\ndata_title['title'] = [ps.stem(w) for w in data_title['title']]","2550432b":"#Getting sentiment analysis based on polarity from texts. First, making funtion, and then apply it.\ndef getpolarity(text): \n    return TextBlob(text).sentiment.polarity\ndef getsentiment(score):\n    if score < 0:\n        return \"Negative\"\n    if score == 0:\n        return \"Neutral\"\n    if score > 0:\n        return \"Positive\"\ndata_title['Polarity'] = data_title['title'].apply(getpolarity)\ndata_title['Sentiment'] = data_title['Polarity'].apply(getsentiment)","1079efcf":"#Plot sentiment analysis based on title.\nplt.figure(figsize=(7,7))\nax = data_title['Sentiment'].value_counts().plot(kind = 'bar')\nfor p in ax.patches:\n    ax.annotate(np.round(p.get_height(),decimals=2),(p.get_x()+p.get_width()\/2., p.get_height()),ha='center',va='center',xytext=(0, 10),textcoords='offset points')\nplt.title('Sentiment based on Title', size = '15')\nplt.xlabel('Sentiment')\nplt.ylabel('Count')\nplt.show()","a326b7b9":"#Plot positive texts from a title column.\ndata_pos = data_title[(data_title['Sentiment'] == 'Positive') & (data_title['title'] != \"Comment\")]\ntitle_pos = list(set(data_pos['title'])) #remove duplicates\ntitle_pos = \" \".join(title_pos)\nplt.rcParams['figure.figsize'] = (15,15)\nwordcloud = WordCloud(max_font_size = 50, max_words = 100, background_color = 'white').generate(str(title_pos))\n\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.title('Positive Vaccine Myths Title', size = 23, color = 'darkblue')\nplt.show()","d8c06f2d":"#Show 10 example titles that have positive sentiment. \ncheck_pos = pd.DataFrame(data_pos)\nsortedDF = check_pos.sort_values(by=['Polarity'])\nsortedDF['title'].head(10)","ea019811":"#Plot neutral sentiment texts from a title column.\ndata_neut = data_title[(data_title['Sentiment'] == 'Neutral') & (data_title['title'] != \"Comment\")]\ntitle_neut = list(set(data_neut['title'])) #remove duplicates\ntitle_neut = \" \".join(title_neut)\nplt.rcParams['figure.figsize'] = (15,15)\nwordcloud = WordCloud(max_font_size = 50, max_words = 100, background_color = 'white').generate(str(title_neut))\n\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.title('Neutral Vaccine Myths Title', size = 23, color = 'darkblue')\nplt.show()","177ef17e":"#Show 10 example titles that have neutral sentiment. \ncheck_neut = pd.DataFrame(data_neut)\nsortedDF = check_neut.sort_values(by=['Polarity'])\nsortedDF['title'].head(10)","d341ee0e":"#Plot negative texts from a title column.\ndata_neg = data_title[(data_title['Sentiment'] == 'Negative') & (data_title['title'] != \"Comment\")]\ntitle_neg = list(set(data_neg['title'])) #remove duplicates\ntitle_neg = \" \".join(title_neg)\nplt.rcParams['figure.figsize'] = (15,15)\nwordcloud = WordCloud(max_font_size = 50, max_words = 100, background_color = 'white').generate(str(title_neg))\n\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.title('Negative Vaccine Myths Title', size = 23, color = 'darkblue')\nplt.show()","ab218242":"#Show 10 example titles that have negative sentiment. \ncheck_neg = pd.DataFrame(data_neg)\nsortedDF = check_neg.sort_values(by=['Polarity'])\nsortedDF['title'].head(10)","188250e1":"#Taking content texts that haven't non values and \ndata_content = data.dropna(axis=0, subset=['body'])","a6be2317":"#Delete commonly used word that prevent machine to ignore them.\ndata_content['body'].apply(lambda x: [item for item in x if item not in stop])","3fde4d09":"#Apply remove punctuations function.\ndata_content['body'] = data_content['body'].apply(review_cleaning) # Apply cleanser.","ce7b8510":"#Process for removing the commoner morphological and inflexional endings from words in English.\ndata_content['body'] = [ps.stem(w) for w in data_content['body']]","ed049e71":"#Getting sentiment analysis based on polarity from texts.\ndata_content['Polarity'] = data_content['body'].apply(getpolarity)\ndata_content['Sentiment'] = data_content['Polarity'].apply(getsentiment)","63bc6072":"#Plot sentiment analysis based on content.\nplt.figure(figsize=(7,7))\nax = data_content['Sentiment'].value_counts().plot(kind = 'bar')\nfor p in ax.patches:\n    ax.annotate(np.round(p.get_height(),decimals=2),(p.get_x()+p.get_width()\/2., p.get_height()),ha='center',va='center',xytext=(0, 10),textcoords='offset points')\nplt.title('Sentiment based on Title', size = '15')\nplt.xlabel('Sentiment')\nplt.ylabel('Count')\nplt.show()","70332719":"#Plot positive texts from a content column.\ndata_pos = data_content[(data_content['Sentiment'] == 'Positive') & (~data_content.body.str.contains(\"https\")) & (~data_content.body.str.contains(\"http\"))]\ntitle_pos = list(set(data_pos['body'])) #remove duplicates\ntitle_pos = \" \".join(title_pos)\n\n# Plot genres.\nplt.rcParams['figure.figsize'] = (15,15)\nwordcloud = WordCloud(max_font_size = 50, max_words = 100, background_color = 'white').generate(str(title_pos))\n\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.title('Positive Vaccine Myths Content', size = 23, color = 'darkblue')\nplt.show()","eb0ef78d":"#Show 10 example titles that have positive sentiment. \ncheck_pos = pd.DataFrame(data_pos)\nsortedDF = check_pos.sort_values(by=['Polarity'])\nsortedDF['body'].head(10)","382106a4":"#Plot neural texts from a content column.\ndata_neut = data_content[(data_content['Sentiment'] == 'Neutral') & (~data_content.body.str.contains(\"https\")) & (~data_content.body.str.contains(\"http\"))]\ntitle_neut = list(set(data_neut['body'])) #remove duplicates\ntitle_neut = \" \".join(title_neut)\n\n# Plot genres.\nplt.rcParams['figure.figsize'] = (15,15)\nwordcloud = WordCloud(max_font_size = 50, max_words = 100, background_color = 'white').generate(str(title_neut))\n\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.title('Neutral Vaccine Myths Content', size = 23, color = 'darkblue')\nplt.show()","175ff32b":"#Show 10 example titles that have neutral sentiment. \ncheck_neut = pd.DataFrame(data_neut)\nsortedDF = check_neut.sort_values(by=['Polarity'])\nsortedDF['body'].head(10)","9c0bde2a":"#Plot neutral texts from a content column.\ndata_neg = data_content[(data_content['Sentiment'] == 'Negative') & (~data_content.body.str.contains(\"https\")) & (~data_content.body.str.contains(\"http\"))]\ntitle_neg = list(set(data_neg['body'])) #remove duplicates\ntitle_neg = \" \".join(title_neg)\n\n# Plot genres.\nplt.rcParams['figure.figsize'] = (15,15)\nwordcloud = WordCloud(max_font_size = 50, max_words = 100, background_color = 'white').generate(str(title_neg))\n\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.title('Negative Vaccine Myths Content', size = 23, color = 'darkblue')\nplt.show()","bad05f2f":"#Show 10 example titles that have negative sentiment. \ncheck_neg = pd.DataFrame(data_neg)\nsortedDF = check_neg.sort_values(by=['Polarity'])\nsortedDF['body'].head(10)","1d2e2f6a":"# **Sentiment Based on Content**","c3066174":"# **Sentiment Based on Title**"}}