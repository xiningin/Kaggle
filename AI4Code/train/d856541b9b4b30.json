{"cell_type":{"784f47ba":"code","dd9a4587":"code","e49b7ee7":"code","34ab7b8b":"code","60430fef":"code","2951cc94":"code","be36279d":"code","2e0203c8":"code","a188fc61":"code","c76d59a8":"code","5face15b":"code","6c749040":"code","cc86c8be":"code","629fadcb":"code","bd18e8b4":"code","5639fe1e":"code","52b6c9d9":"code","18836885":"code","5c00958a":"code","68ee6815":"code","5a9e8394":"code","b1e16350":"code","e8476463":"code","5c685a93":"code","d522004c":"code","bc91784e":"code","77374668":"code","e662bfa6":"code","9decad8e":"code","ac51b045":"code","569cd57f":"code","986e7d3f":"code","f32a9a12":"code","e9af7897":"code","257133e7":"code","e79eeb9d":"code","ef6f2561":"code","89763b6c":"code","78eabb1d":"code","8492a0fd":"code","325b798d":"code","44330d7d":"code","01c39dae":"code","219515f7":"code","462ed4d1":"markdown","9604f234":"markdown","9af4c80c":"markdown","5e567706":"markdown","caca65d4":"markdown","d5898a0c":"markdown","c7a68f9c":"markdown","441f7c16":"markdown","27503652":"markdown","65d2963b":"markdown","4c833695":"markdown","db1abe6d":"markdown","93826189":"markdown","5a00c489":"markdown","aa83f2ad":"markdown","3eed61ac":"markdown","975c8ea3":"markdown","9534390b":"markdown","524049be":"markdown","29803b2e":"markdown","1a238d05":"markdown","b363da1b":"markdown","faf29b7a":"markdown","bf46e4ef":"markdown","cd3a39e9":"markdown","6e78ccfa":"markdown","2cb7b951":"markdown"},"source":{"784f47ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dd9a4587":"# import all packages and set plots to be embedded inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n\n%matplotlib inline\n\n\ndf = pd.read_csv('..\/input\/yugioh-trading-cards-dataset\/card_data.csv')\ndf.head()","e49b7ee7":"df.duplicated().sum()","34ab7b8b":"df.drop_duplicates(inplace = True)","60430fef":"df.info()","2951cc94":"df.shape","be36279d":"df.head()","2e0203c8":"df.columns","a188fc61":"#changing columns names for easier graphing\ndf.columns=[ 'name', 'card_type', 'level', 'race', 'attribute', 'attack', 'defense']\ndf.head()","c76d59a8":"df.level.value_counts()  #not including the nulls ","5face15b":"# basic function to make count plots a lil easier.\ndef my_count_plot(df, x = None, y =None, order = None, title=''):\n    ''' seaborn count plot for faster grpahing with all the basics assigned for faster grpahing \n        and consistancy '''\n    base_color = sb.color_palette()[0]\n    sb.countplot(data = df , x=x , y=y, order= order, color = base_color)\n    plt.title(title.title(), weight = 'bold')\n    \n# another basic func for faster axis renaming.\ndef my_axis(x = '', y='', title= ''):\n    \"\"\" faster axis renaming and titles\"\"\"\n    plt.xlabel(x.title(), weight = 'bold')\n    plt.ylabel(y.title(), weight = 'bold')\n    plt.title(title.title(), weight = 'bold')\n\n    \ndef my_fig():\n    '''adjusting fig size'''\n    plt.figure(figsize=[14.70, 8.27]);\n","6c749040":"my_fig()\nmy_count_plot(df, x='level')\nmy_axis(x='level', y ='count',title='Count of cards based on level')\n","cc86c8be":"my_fig()\ndf['modulation'] = df.level.fillna(0) # cards with no level changed to lvl 0\nmy_count_plot(df=df , x = 'modulation')\nmy_axis(x='modulated levels', y='count', title='Count of cards based on level including cards with no assigned level as 0')\n","629fadcb":"#Finding cards with no Level assiociated with them\nno_level = df.query(\"modulation == 0\")['card_type']\nno_level.unique()","bd18e8b4":"total_cards = df.shape[0]\nlvl_count = df['modulation'].value_counts()\nlvl_order = lvl_count.index\nlvl_count","5639fe1e":"# makinf the same graph with relative proportion for better Visualization\nlvl_count = lvl_count[0]\nmax_percent = lvl_count \/ total_cards","52b6c9d9":"my_ticks = np.arange(0, max_percent+0.05, 0.05)\nticks_names = ['{:0.2f}'.format(x) for x in my_ticks]","18836885":"my_fig()\nmy_count_plot(df=df,x='modulation')\nplt.yticks(my_ticks* total_cards, ticks_names)\nmy_axis(y = 'Proportion',x = 'modulated level', \n        title = \"relative proportions of levels including cards with no assigned level as 0\");","5c00958a":"# making sure none of the three types have value within attack\ndf.query(\"card_type == 'Trap Card'\")['attack'].max()","68ee6815":"df.query(\"card_type == 'Spell Card'\")['attack'].max()","5a9e8394":"df.query(\"card_type == 'Token'\")['attack'].max()","b1e16350":"my_fig()\ntype_count = df.card_type.value_counts()\ntype_order = type_count.index\nmy_count_plot(df=df, y='card_type',order= type_order)\nmy_axis(y='card type', x = 'count', title='distribution of card Types')","e8476463":"my_fig()\nrace_count = df.race.value_counts()\nrace_order = race_count.index\nmy_count_plot(df=df, y='race', order= race_order)\nmy_axis(x= 'count', y = 'race', title='distribution of card races')","5c685a93":"my_fig()\nattribute_count = df.attribute.value_counts()\nattribute_order = attribute_count.index\nmy_count_plot(df=df, y='attribute', order= attribute_order)\nmy_axis(y='attribute', x='count' ,title='distribution of card attributes')","d522004c":"attribute_atk_def_mean = df.groupby('attribute')[['attack','defense']].mean()\nattribute_atk_def_mean","bc91784e":"attribute_atk_def_mean.plot.bar(figsize=(14.70, 8.27));\nmy_axis(x='card attribute', y='attack & defense averages', title=\"Atributes averages\")","77374668":"#droping cards with Nan values in the dataset \"trap, spell and token\"\nno_level.index\ndf2 = df.drop(no_level.index)\ndf2.head()","e662bfa6":"df2.info()","9decad8e":"# To the reviewer, Kindly point me out why the mode have the 0 even when i removed them\nlvl_mode = df2.level.mode() \nlvl_mode","ac51b045":"sorted(df2.level.unique())   #confirming that there is no lvl 0","569cd57f":"# getting the mean and median \nlvl_mean = df2.level.mean()\nlvl_median = df2.level.median()\nlvl_mean, lvl_median","986e7d3f":"def my_scatter_plot(df=df,x=None, y= None, title='', marker=None):\n    my_fig()\n    plt.scatter(data= df2, x=x, y =y ,alpha=0.5, marker= marker);\n    plt.title(title.title(), weight='bold')\n   \nmy_scatter_plot(df=df2, x = 'attack', y='defense')\nmy_axis(x= 'Attack', y = 'defense',title = 'Relation Between Attack and Defense')\n","f32a9a12":"#using the median to split the dataset into high and low level cards \nno_level_cards = df.query(\"modulation == 0\").count()[0]\nhigh_cards = df2.query(\"level > 4\")\nlow_cards = df2.query(\"level <= 4\")\nhigh_cards_count = high_cards.count()[0]\nlow_cards_count = low_cards.count()[0]","e9af7897":"# percent of Low, high lvl cards and the ones with no level associated \ntotal_cards = df.shape[0]\nhigh_cards_count\/total_cards, low_cards_count\/total_cards, no_level_cards\/total_cards","257133e7":"# plotting high and low level cards againest each other to check the difference of distribution \norder = high_cards.index\nmy_fig()\nplt.hist(data = high_cards, x='card_type',density=True,alpha=0.7,label='High Level Cards');\nplt.xticks(rotation=90);\nplt.hist(data= low_cards, x='card_type', density=True,alpha =0.7, label= 'Low Level Cards');\nplt.legend();\nmy_axis(x= 'card Type', y= 'frequency', title=\"Distribution of High and Low Level Cards\");","e79eeb9d":"#high_lvl_effect = high_cards.query(\"Type == 'Effect Monster'\")\n#low_lvl_effect = low_cards.query(\"Type == 'Effect Monster'\")","ef6f2561":"my_fig()\nplt.scatter(data= low_cards, x='attack', y = 'defense',alpha=0.5 );\nplt.scatter(data= high_cards, x='attack', y = 'defense',alpha=0.5,marker='s',color='green');\nmy_axis(x='attack', y= 'defense',title= 'Distribution of Attack and Defense for High and Low Level cards')\n","89763b6c":"level_atk_def_mean = df.groupby('level')[['attack','defense']].mean()\nlevel_atk_def_mean","78eabb1d":"level_atk_def_mean.plot.bar(figsize=(14.7,8.27));\nmy_axis(x='level',y='attack & defence averages', title=\"Level averages\")","8492a0fd":"g = sb.FacetGrid(data = df2, col='level',col_wrap=4,margin_titles=True);\ng.map(plt.scatter, 'attack', 'defense',alpha=0.5 );","325b798d":"my_fig()\nsb.boxplot(data= df2 , x= 'level', y = 'defense', hue='attribute' );\nmy_axis(x= 'Level', y = 'defense', title='distribution of defense per attribute')","44330d7d":"my_fig()\nsb.boxplot(data= df2 , x= 'level', y = 'attack', hue='attribute' );\nmy_axis(x= 'Level', y = 'attack', title='distribution of attack per attribute')","01c39dae":"df.query(\"level == (5,6,7,8,9,10,11,12)\").count()[0] ,df.query(\"level == (1,2,3,4)\").count()[0]","219515f7":"df.loc[df['name'].str.contains(\"forbidden one\", case=False)]","462ed4d1":"Low lvl cards almost 42.6% of the cards while high lvl cards are almost half that 22.9%","9604f234":"## Univariate Exploration\n","9af4c80c":"### Discuss the distribution(s) of your variable(s) of interest. Were there any unusual points? Did you need to perform any transformations?\n\nLevel is going from 1 to 12 with Lvl 4 having the maximum number of cards and the three Types with no lvl assigned.\nneed to remove them.\n\n### Of the features you investigated, were there any unusual distributions? Did you perform any operations on the data to tidy, adjust, or change the form of the data? If so, why did you do this?\n\ninvestigated the Level, lvl 4 have the highest number of cards skewing the distribution to the right\nchanged the Nans to Lvl 0 for better representation  of the data.","5e567706":"Conclusion:\n\nThe attack and defense increase with level but it doesnt ensure victory due to the fact that lower level cards are more than the higher level ones. effect cards effect, trap cards and spell cards were excluded from the analysis.\n\nEffect monsters : are the majority of cards in both high and low level cards, so it depends of how u use the cards.\n\nTrap cards and spell cards : also flavors the game with unexpected out comes.\n\nThis analysis is limited to this dataset because alot of factors werent taken into account.\n\ncards with attribute Divine have the lowest count but having the highest average for attack and defense\n","caca65d4":"as we we can see, only few cards > (2000,200) and even high atk doesnt mean high def\nwhile the majority are between (0,2000\n\nAlot of high level cards ' green squares ' have 0 on attack and defense ","d5898a0c":"Side Note : \n\neven though \"Exodia the Forbidden One\" is one of the powerful cards in the game its only level 3 with (1000,1000)\nonly summoned if u have its 4 parts within ur hand and The Summoner wins immidiately. \n\n\u201cMy Grandfather\u2019s Deck Has No Pathetic Cards, Kaiba. But It Does Contain\u2026 The Unstoppable Exodia!\u201d\n\nhttps:\/\/www.cbr.com\/yugioh-best-yami-yugi-quotes-joey-wheeler-seto-kaiba\/","c7a68f9c":"## Bivariate Exploration\n\n","441f7c16":"### What is the structure of your dataset?\n\nThis is a 6534 rows with 7 columns Dataset about Yugi-oh Cards game\n\n### What is\/are the main feature(s) of interest in your dataset?\n\nType of the card, its Attack and Defense and its level\n\n### What features in the dataset do you think will help support your investigation into your feature(s) of interest?\nLevel, Attack and Defense also going to check Type and race\n\n","27503652":"Trap Cards, Spell Cards, Tokens don't have a Level assigned to them but contribute heavily to the game play and I'm going to analyze the data without them since the description of what they do isn't available in the dataset.","65d2963b":"Divine cards have the lowest count.","4c833695":"almost all the attributes have the same average attack and defense except for the Divine cards regarding the fact they have the lowest count.","db1abe6d":"# (Yugi-Oh cards Dataset)\n## by (Mustafa Mahmoud Nadeem)\n\n## Preliminary Wrangling\nThis is a dataset containing all cards in Yugi-Oh card game.\ngame board is 4 * 5, 2 * 5 for each player 1 row for attacking monsters and back row for trap and spell cards and  3 extra places for fusion cards, cemetery and board effect cards.\ngame has 5 phases:\n1- standby phase : some effect cards can take action in this phase, skipping draw phase for example\n\n2- draw phase: draw a card from your deck, some cards can take action here, draw extra card for example\n\n3- main phase 1: put a card on the board in attack or defense position. only one card in attack row and unlimited cards in back row\n\n4- battle phase: attack ur opponent.\n\n5- main phase 2: put a card or change position if not used on main phase 1\n\n6- end turn\n\n### Its Time to Duel ###","93826189":"lvls 5 to 12 only 1492 card with almost half the  probability compared to 2783 of the other lvls.\nhigh lvl cards doesnt ensure wining of the game. \n\ngiving the fact i removed the lvl 0 cards ","5a00c489":"There is no such thing called level 4.5 so mean is useless here, \n\nmean should be 6 but since this a right skewed graph the median would be a better choice.","aa83f2ad":"Since lvl 0 has no atk or defense its better to remove them.","3eed61ac":"Going to plot the data with and without the Null values ","975c8ea3":"outliers is viable heavily within each level except for level 7 and the interesting part level 11 and 12 contains 'dark' and 'light' only. and we can also notice that Divine are only Level 10. ","9534390b":"## Multivariate Exploration\n\n","524049be":"Now adding the cards with no Level assigned, They are a lot so lets check their Types\n","29803b2e":"Looking at the relation between ATK and DEF most of the ranging between (0,0) to (3000,3000) with few cards higher than that.\nwith few cards with 5000 ATK and DEF , (0,5000) and (4000,0)\n\nsplitting the same graph for a better visualization.","1a238d05":"### Talk about some of the relationships you observed in this part of the investigation. How did the feature(s) of interest vary with other features in the dataset?\n\nthe relation between att and def seems linear.\n\n### Did you observe any interesting relationships between the other features (not the main feature(s) of interest)?\n\nI have to plot ATK and DEF against Level first.","b363da1b":"outliers is viable heavily within each level except for level 7 in defense and the interesting part level 11 and 12 contains 'dark' and 'light' only. and we can also notice that Divine are only Level 10 and arent available at any other level.","faf29b7a":"effect monsters have a high share in both high and low cards\n\n35% of the high lvl cards and 31% of low lvl cards","bf46e4ef":"Trap Cards, Spell Cards, Tokens are more than 30% of the cards and they dont have ATK or DEF","cd3a39e9":"as expected the higher the level the higher the average attack and defense.","6e78ccfa":"As we can see here, Level 4 have the highest number of cards.","2cb7b951":"I enjoyed Doing this project for Udacity and i wanted to share it in here. since i downloaded it from here."}}