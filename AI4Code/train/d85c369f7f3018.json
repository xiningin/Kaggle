{"cell_type":{"f616bbc8":"code","0f881e59":"code","7627ca5f":"code","1018762f":"code","e3d22090":"code","0e166108":"code","222b6484":"code","4c204e17":"code","a764cce3":"code","5988f602":"code","f34f3533":"code","0de97cc5":"code","020ea862":"code","1013ee6e":"code","507111e9":"code","0e698f09":"code","8bba6fe7":"code","d6dcc1f5":"code","41cf8546":"code","394c6cf8":"code","8696d966":"code","7fb550a3":"code","c730cdc5":"code","04501bee":"code","a1712279":"code","667363cf":"code","0513d833":"code","3502e108":"code","245f3c54":"code","be31beab":"code","c5ca107e":"code","7d336132":"code","ecdcca73":"code","2b641379":"code","cd3655fa":"code","eb9b5f55":"code","d1914562":"markdown","b568ea96":"markdown","729d5cd4":"markdown","c098cff2":"markdown"},"source":{"f616bbc8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0f881e59":"# Reading our data\ndf = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")","7627ca5f":"df.head()","1018762f":"df.shape","e3d22090":"df.info()","0e166108":"df.isnull().sum()","222b6484":"#Checking for unique values\ndf.nunique()","4c204e17":"import seaborn as sns\nimport matplotlib.pyplot as plt","a764cce3":"# Helps to visualize missing values in each columns\nimport missingno as msno","5988f602":"# Showing NaN values by using heatmap\nmsno.heatmap(df)","f34f3533":"#There is only seven NaN values in rating, so I'll just put values.\ndf[df['rating'].isna()]","0de97cc5":"df.isnull().sum()","020ea862":"changing_nan = {\n    67: 'TV-PG',\n    2359: 'TV-14',\n    3660: 'TV-MA',\n    3736: 'TV-MA',\n    3737: 'NR',\n    3738: 'TV-MA',\n    4323: 'TV-MA '\n}\n\nfor id, rate in changing_nan.items():\n    df.iloc[id, 6] = rate\n    \ndf.isnull().sum()","1013ee6e":"#Now we will be dropping Null values from Cast!\ndf = df[df['cast'].notna()]\ndf['cast'].isna().sum()","507111e9":"import collections","0e698f09":"#Now in country column, ill be replacing null value with the ost common country name which exist in our dataset!\ncollections.Counter(df['country']).most_common(1)","8bba6fe7":"#We can see that United States has maximum number of records!\ndf['country'] = df['country'].fillna('United States')\ndf['country'].isna().sum()","d6dcc1f5":"df.isnull().sum()","41cf8546":"df.head()","394c6cf8":"df.shape","8696d966":"pip install xlrd","7fb550a3":"import pandas as pd\n!pip install AutoViz\nfrom autoviz.AutoViz_Class import AutoViz_Class","c730cdc5":"from autoviz.AutoViz_Class import AutoViz_Class","04501bee":"#EDA using Autoviz\nautoviz = AutoViz_Class().AutoViz(\"..\/input\/netflix-shows\/netflix_titles.csv\")","a1712279":"#Which are the top oldest movies on Nextflix!??\nold = df.sort_values(\"release_year\", ascending = True)\nold = old[old['duration'] != \"\"]\nold = old[old['type'] !=\"TV Show\"]\nold[['title', \"release_year\",\"country\",\"duration\"]][:15]","667363cf":"#Which are the top Newest movies on Nextflix!??\nold = df.sort_values(\"release_year\", ascending = False)\nold = old[old['duration'] != \"\"]\nold = old[old['type'] !=\"TV Show\"]\nold[['title', \"release_year\",\"country\",\"duration\"]][:15]","0513d833":"import plotly.express as px","3502e108":"#Country wise representation of all Movies!\ncountry  = df['country'].value_counts()\ncountry = country[:15,]\nfig = px.bar(x=country.index, y=country.values, color=country.values,\n             hover_data=[country.index, country.values],labels={'country':'Frequency'}, height=400)\nfig.show()","245f3c54":"from sklearn.feature_extraction.text import TfidfVectorizer\ntfv = TfidfVectorizer(min_df = 3,max_features = None,analyzer = 'word',token_pattern = 'r\\w{1,}', ngram_range = (1,3), stop_words = 'english')","be31beab":"df.head()","c5ca107e":"df['combined'] = df['description']+df['cast']+df['director']\ndf.head(5)","7d336132":"df['combined'] = df['combined'].fillna(\"\")","ecdcca73":"tfv_matrix = tfv.fit_transform(df['combined'])\nfrom sklearn.metrics.pairwise import sigmoid_kernel\nsig = sigmoid_kernel(tfv_matrix,tfv_matrix)\nsig[0]\nindices = pd.Series(df.index,index = df['title']).drop_duplicates()\nindices","2b641379":"def recommend(title,sig=sig):\n    idx = indices[title]\n    sig_scores = list(enumerate(sig[idx]))\n    sig_scores = sorted(sig_scores,key = lambda x:x[1], reverse = True)\n    sig_scores = sig_scores[1:11]\n    movies_indices = [i[0] for i in sig_scores]\n    return df['title'].iloc[movies_indices]","cd3655fa":"recommend(\"Payday\")","eb9b5f55":"recommend('Inside Man: Most Wanted')","d1914562":"# Cleaning of data","b568ea96":"# Visualizaing our data!","729d5cd4":"# Your suggestion will be highly appreicated.Please upvote if you like it.","c098cff2":"# Recommender System:"}}