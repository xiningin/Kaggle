{"cell_type":{"db18f02b":"code","80ca9a35":"code","6ba88781":"code","e288ddbc":"code","035c6252":"code","b657e878":"code","7f7a1d86":"code","b82f5fb7":"code","4d3df985":"code","d81c17ba":"code","f67ce191":"code","abe1be3f":"code","e699e135":"code","bba518ff":"code","1cbb2161":"code","72cc3b19":"code","032ccb01":"code","6709f949":"code","46c5f381":"code","fc5abc97":"code","452ca35a":"code","6e0380cb":"code","741e43bb":"code","8d197c68":"code","fc4a4a5f":"code","3406bf51":"code","f4bde479":"code","98e29211":"code","f267d3d6":"code","78f694fd":"code","61347418":"code","309a2125":"code","e0f12edb":"code","72d6ccc7":"code","c3a0e37f":"code","142380ef":"code","138b87ec":"code","6b72a610":"code","ab12b6d4":"code","cc5d9e41":"code","2c3b05d0":"code","85699719":"code","3dcdf685":"code","d249f9f5":"code","78d27ace":"markdown","4644ff13":"markdown","c44364a9":"markdown","8d623bde":"markdown","b1f1772e":"markdown","16dea6c0":"markdown","3cb513d7":"markdown","1cdd979c":"markdown","65549ee6":"markdown","0fe5ff93":"markdown","918bf728":"markdown","5b6bd054":"markdown","7baf30a9":"markdown","a044ec40":"markdown"},"source":{"db18f02b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport math\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport plotly.offline as pyo\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.validators.scatter.marker import SymbolValidator\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","80ca9a35":"vacc_manufact = pd.read_csv(\"\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations_by_manufacturer.csv\")\nvacc = pd.read_csv(\"\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations.csv\")","6ba88781":"vacc_manufact.head()","e288ddbc":"vacc_manufact[\"vaccine\"].unique()","035c6252":"vacc_manufact.isnull().sum()","b657e878":"len(vacc_manufact)","7f7a1d86":"vacc.head()","b82f5fb7":"vacc.isnull().sum()","4d3df985":"vacc[vacc[\"total_vaccinations\"] > 0]","d81c17ba":"vacc[vacc[\"people_fully_vaccinated\"] > 0]","f67ce191":"len(vacc)","abe1be3f":"vacc[\"country\"].value_counts()","e699e135":"vacc.drop([\"total_vaccinations_per_hundred\", \"people_fully_vaccinated_per_hundred\", \"source_name\", \"source_website\"], axis=1, inplace=True)","bba518ff":"vacc.isnull().sum()","1cbb2161":"vacc = vacc.dropna(subset=[\"total_vaccinations\", \"people_vaccinated\", \"people_fully_vaccinated\", \"daily_vaccinations_raw\", \"daily_vaccinations_per_million\"])","72cc3b19":"vacc.isnull().sum()","032ccb01":"len(vacc)","6709f949":"vacc[\"date\"] = pd.to_datetime(vacc[\"date\"])","46c5f381":"vacc_high_country = vacc[[\"country\", \"people_vaccinated\", \"date\"]]\nvacc_high_country = vacc_high_country.sort_values(by=\"people_vaccinated\", ascending=False, ignore_index=True)\ncountry = vacc_high_country[\"country\"].unique()\ntop_10_countries =  country[:10]\ntop_3_countries = country[:3]\nindex_vacc_high_country = vacc_high_country\nindex_vacc_high_country.set_index(\"country\", inplace=True)","fc5abc97":"num_ppl_vaccinated = []\nfor i in range(10):\n    a = top_10_countries[i]\n    b = index_vacc_high_country.loc[a][\"people_vaccinated\"][0]\n    num_ppl_vaccinated.append(b)\n\nnum_ppl_vaccinated","452ca35a":"fig = px.bar(vacc_high_country, x=top_10_countries, y=num_ppl_vaccinated, color=top_10_countries, title= \"Top 10 countries with vaccinated population\",text=num_ppl_vaccinated)\nfig.update_traces(textposition='outside')\nfig.show()","6e0380cb":"vacc_high_num_top_3_country = vacc_high_country[ (vacc_high_country.index == top_3_countries[0]) | (vacc_high_country.index == top_3_countries[1]) | (vacc_high_country.index == top_3_countries[2])]\nvacc_high_num_top_3_country = vacc_high_num_top_3_country.reset_index()\nvacc_high_num_top_3_country","741e43bb":"fig = px.scatter(vacc_high_num_top_3_country, x=\"date\", y=\"people_vaccinated\", color=\"country\", trendline='ols',facet_col=\"country\",title=\"Top 3 countries with the highest number of vaccinated population trend line\")\nfig.show()","8d197c68":"vacc_high_rate_country = vacc[[\"country\", \"people_vaccinated_per_hundred\", \"date\"]]\nvacc_high_rate_country = vacc_high_rate_country.sort_values(by=\"people_vaccinated_per_hundred\", ascending=False, ignore_index=True)\ncountry = vacc_high_rate_country[\"country\"].unique()\ntop_10_countries =  country[:10]\nindex_vacc_high_rate_country = vacc_high_rate_country\nindex_vacc_high_rate_country.set_index(\"country\", inplace=True)","fc4a4a5f":"rate_ppl_vaccinated = []\nfor i in range(10):\n    a = top_10_countries[i]\n    b = index_vacc_high_rate_country.loc[a][\"people_vaccinated_per_hundred\"][0]\n    rate_ppl_vaccinated.append(b)\n    \nrate_ppl_vaccinated","3406bf51":"fig = px.bar(vacc_high_rate_country, x=top_10_countries, y=rate_ppl_vaccinated, color=top_10_countries, title= \"Top 10 countries with vaccination rates\",text=rate_ppl_vaccinated)\nfig.update_traces(textposition='outside')\nfig.show()","f4bde479":"vacc_high_rate_country_trend = pd.DataFrame({ \"country\" : top_10_countries, \"vaccination rate\" : rate_ppl_vaccinated})\nvacc_high_rate_country_top_3 = vacc_high_rate_country_trend.iloc[:3][\"country\"]","98e29211":"vacc_high_rate_country_trend_top_3 = vacc_high_rate_country[(vacc_high_rate_country.index== vacc_high_rate_country_top_3[0]) | (vacc_high_rate_country.index == vacc_high_rate_country_top_3[1]) | (vacc_high_rate_country.index == vacc_high_rate_country_top_3[2]) ]\nvacc_high_rate_country_trend_top_3 = vacc_high_rate_country_trend_top_3.reset_index()","f267d3d6":"fig = px.scatter(vacc_high_rate_country_trend_top_3, x=\"date\", y=\"people_vaccinated_per_hundred\", color=\"country\", trendline='ols',facet_col=\"country\",title=\"Top 3 vaccination rate country trend line\")\nfig.show()","78f694fd":"fig = px.choropleth(vacc, locations=\"iso_code\",\n                    color=\"people_vaccinated_per_hundred\",\n                    hover_name=\"country\",\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                    title= \"People_vaccinated_per_hundred\")\n\nfig.show()","61347418":"vacc[\"vaccines\"]","309a2125":"vacc_astra_zeneca = vacc[vacc[\"vaccines\"].str.contains(\"Oxford\/AstraZeneca\")]","e0f12edb":"fig = px.choropleth(vacc_astra_zeneca, locations=\"iso_code\",\n                    color=\"vaccines\",\n                    hover_name=\"country\", # column to add to hover information\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                   title= \"Vaccines\")\nfig.update_layout(showlegend=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","72d6ccc7":"vacc_pfizer = vacc[vacc[\"vaccines\"].str.contains(\"Pfizer\/BioNTech\")]","c3a0e37f":"fig = px.choropleth(vacc_pfizer, locations=\"iso_code\",\n                    color=\"vaccines\",\n                    hover_name=\"country\", # column to add to hover information\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                   title= \"Vaccines\")\nfig.update_layout(showlegend=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","142380ef":"vacc_sinovac = vacc[vacc[\"vaccines\"].str.contains(\"Sinovac\")]","138b87ec":"fig = px.choropleth(vacc_sinovac, locations=\"iso_code\",\n                    color=\"vaccines\",\n                    hover_name=\"country\", # column to add to hover information\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                   title= \"Vaccines\")\nfig.update_layout(showlegend=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","6b72a610":"vacc_moderna = vacc[vacc[\"vaccines\"].str.contains(\"Moderna\")] ","ab12b6d4":"fig = px.choropleth(vacc_moderna, locations=\"iso_code\",\n                    color=\"vaccines\",\n                    hover_name=\"country\", # column to add to hover information\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                   title= \"Vaccines\")\nfig.update_layout(showlegend=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","cc5d9e41":"vacc_johnson = vacc[vacc[\"vaccines\"].str.contains(\"Johnson&Johnson\")] ","2c3b05d0":"fig = px.choropleth(vacc_johnson, locations=\"iso_code\",\n                    color=\"vaccines\",\n                    hover_name=\"country\", # column to add to hover information\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                   title= \"Vaccines\")\nfig.update_layout(showlegend=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","85699719":"vacc_manufact[\"location\"].unique()","3dcdf685":"vacc_manufact_subset = vacc_manufact[[\"vaccine\",\"total_vaccinations\"]]\n\nvaccine_type = vacc_manufact[\"vaccine\"].unique()\nrecord_dict={}\nfor vaccine in vaccine_type:\n    vaccine_df = vacc_manufact_subset[vacc_manufact_subset[\"vaccine\"] == vaccine]\n    total_records = len(vaccine_df)\n    num = 0\n    for i in range(total_records):\n        num += vaccine_df[\"total_vaccinations\"].iloc[i]\n    record_dict[vaccine] = num\n\nvaccine_col = []\ntotal_col = []\nfor key,value in record_dict.items():\n    vaccine_col.append(key)\n    total_col.append(value)\n    \nvaccine_pie = pd.DataFrame({ \"vaccine\" :vaccine_col , \"total vaccination records\": total_col})","d249f9f5":"fig = px.pie(vaccine_pie, values='total vaccination records', names='vaccine', title='Percentage of vaccines that are used in Europe and Latin America according to manufacturer (Chile, Czechia, France, Germany, Iceland, Italy, Latvia, Lithuania, Romania, United States)')\nfig.update_traces(textposition='inside', textinfo='percent+label',hole=0.3,)\nfig.show()","78d27ace":"> We can see that Pfizer\/BioNTech (more than 50%) is widely used in these countries : Chile, Czechia, France, Germany, Iceland, Italy, Latvia, Lithuania, Romania, United States. Pfizer\/BioNTech & Moderna are the first vaccines to be approved by the US Food and Drug Administration (FDA).","4644ff13":"We can see that the vaccines that are mostly used wordwide are *Oxford\/AstraZeneca, Pfizer\/BioNTech, Sinovac, Moderna*. Based on the information, we can observe the vaccines distribution through pyplot.","c44364a9":"**Moderna vaccine distribution around the world**","8d623bde":"The data below is the country vaccinations provided by manufacturer, with the following information:\n\n* Location - country;\n* Date - date;\n* Vaccine - vaccine type;\n* Total number of vaccinations - total number of vaccinations \/ current time and vaccine type.","b1f1772e":"**All the world status**","16dea6c0":"**Vaccines manufacturing data**","3cb513d7":"**Countries that have higher vaccination populations**","1cdd979c":"**Overview of the data**","65549ee6":"**Pfizer\/BioNTech vaccine distribution around the world**","0fe5ff93":"**Johnson&Johnson vaccine distribution around the world**","918bf728":"**AstraZeneca vaccine distribution around the world**","5b6bd054":"**Sinovac vaccine distribution around the world**","7baf30a9":"**Countries that have higher vaccination rate**","a044ec40":"The data (country vaccinations) contains the following information:\n\n* Country- this is the country for which the vaccination information is provided;\n* Country ISO Code - ISO code for the country;\n* Date - date for the data entry; for some of the dates we have only the daily vaccinations, for others, only the (cumulative) total;\n* Total number of vaccinations - this is the absolute number of total immunizations in the country;\n* Total number of people vaccinated - a person, depending on the immunization scheme, will receive one or more (typically 2) vaccines; at a certain moment, the number of vaccination might be larger than the number of people;\n* Total number of people fully vaccinated - this is the number of people that received the entire set of immunization according to the immunization scheme (typically 2); at a certain moment in time, there might be a certain number of people that received one vaccine and another number (smaller) of people that received all vaccines in the scheme;\n* Daily vaccinations (raw) - for a certain data entry, the number of vaccination for that date\/country;\n* Daily vaccinations - for a certain data entry, the number of vaccination for that date\/country;\n* Total vaccinations per hundred - ratio (in percent) between vaccination number and total population up to the date in the country;\n* Total number of people vaccinated per hundred - ratio (in percent) between population immunized and total population up to the date in the country;\n* Total number of people fully vaccinated per hundred - ratio (in percent) between population fully immunized and total population up to the date in the country;\n* Number of vaccinations per day - number of daily vaccination for that day and country;\n* Daily vaccinations per million - ratio (in ppm) between vaccination number and total population for the current date in the country;\n* Vaccines used in the country - total number of vaccines used in the country (up to date);\n* Source name - source of the information (national authority, international organization, local organization etc.);\n* Source website - website of the source of information;"}}