{"cell_type":{"1425f1e6":"code","3665451d":"code","f24e9a3e":"code","ec78dc43":"code","7e44c61b":"code","ecfc805b":"code","081401ba":"code","4d9b72e3":"code","2825fec9":"code","ff0a388c":"code","12bd7dc6":"code","e803bf06":"code","c3c2d27c":"code","bdbc8ef1":"code","630261ae":"code","56383b95":"code","fc00bf59":"code","f2f69ffd":"code","f1bbe3a1":"code","ff6611df":"code","679fcf36":"code","91e2af60":"code","90e5ce05":"code","dc896531":"code","90b2478c":"code","f1a6e712":"code","24b9cc44":"code","dc591834":"code","f4ec7efb":"code","9e3fb91f":"code","f01716ee":"code","f5e728b9":"code","922c8eb8":"code","6775cb08":"code","772480dd":"code","57a681d1":"code","89d56643":"code","aaba4138":"code","6801fd61":"code","e82e289c":"code","a76884dc":"code","ab751bb5":"code","feacb811":"code","cef57515":"code","4118d566":"code","e988d65d":"code","dda6bef7":"code","58876e5e":"code","4bf55fa4":"code","56a0fa8b":"code","875e64d7":"code","ee9b1421":"code","775f8767":"code","737f0169":"code","6d1b5004":"markdown","13793175":"markdown","f6117781":"markdown","66ae079c":"markdown","daf657d2":"markdown","b477f9ac":"markdown","7fadd728":"markdown","63c42d54":"markdown","542b327a":"markdown","f93226ff":"markdown","141fe017":"markdown","941947c3":"markdown","245aec77":"markdown","8b32a225":"markdown"},"source":{"1425f1e6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom collections import Counter\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3665451d":"#Let's read data\n\nmedian_house_hold_in_come = pd.read_csv('..\/input\/MedianHouseholdIncome2015.csv', encoding=\"windows-1252\")\npercentage_people_below_poverty_level = pd.read_csv('..\/input\/PercentagePeopleBelowPovertyLevel.csv', encoding=\"windows-1252\")\npercent_over_25_completed_highSchool = pd.read_csv('..\/input\/PercentOver25CompletedHighSchool.csv', encoding=\"windows-1252\")\nshare_race_city = pd.read_csv('..\/input\/ShareRaceByCity.csv', encoding=\"windows-1252\")\nkill = pd.read_csv('..\/input\/PoliceKillingsUS.csv', encoding=\"windows-1252\")","f24e9a3e":"percentage_people_below_poverty_level.head()","ec78dc43":"percentage_people_below_poverty_level.info()","7e44c61b":"# percentage_people_below_poverty_level.poverty_rate.value_counts()\n\n# If you write this line, you will see \"-\" and \"0\". ","ecfc805b":"percentage_people_below_poverty_level[\"Geographic Area\"].unique()","081401ba":"len(percentage_people_below_poverty_level[\"Geographic Area\"].unique())\n#general knowledge : 51 states ","4d9b72e3":"# Our purpose poverty rate of each state\npercentage_people_below_poverty_level.poverty_rate.replace(['-'],0.0,inplace = True)\n# inplace : true : Also save it.\npercentage_people_below_poverty_level.poverty_rate = percentage_people_below_poverty_level.poverty_rate.astype(float)\n# Look at info. poverty_rate has objects.\narea_list = list(percentage_people_below_poverty_level['Geographic Area'].unique())\narea_poverty_ratio = []\nfor i in area_list:\n     x = percentage_people_below_poverty_level[percentage_people_below_poverty_level['Geographic Area']==i]\n     area_poverty_rate = sum(x.poverty_rate)\/len(x)\n     area_poverty_ratio.append(area_poverty_rate)\ndata = pd.DataFrame({'area_list': area_list,'area_poverty_ratio':area_poverty_ratio})\nnew_index = (data['area_poverty_ratio'].sort_values(ascending=False)).index.values\nsorted_data = data.reindex(new_index)\n\n# visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data['area_list'], y=sorted_data['area_poverty_ratio'])\nplt.xticks(rotation= 45)\nplt.xlabel('States')\nplt.ylabel('Poverty Rate')\nplt.title('Poverty Rate in States')","2825fec9":"kill.head()","ff0a388c":"kill.name.value_counts()","12bd7dc6":"# Let's find most common 15 name or surname of killed people\nseparate = kill.name[kill.name != \"TK TK\"].str.split()\na,b = zip(*separate)\nname_list = a + b\nname_count = Counter(name_list)\nmost_common_names = name_count.most_common(15)\nx,y = zip(*most_common_names)\nx,y = list(x),list(y)\n\n# Visualization\nplt.figure(figsize = (18,12))\nfx = sns.barplot(x = x, y = y, palette = sns.cubehelix_palette(len(x)))\nplt.xlabel('Name or Surname of killed people')\nplt.ylabel('Frequency')\nplt.title('Most common 15 Name or Surname of killed people')\n","e803bf06":"percent_over_25_completed_highSchool.head()\n","c3c2d27c":"percent_over_25_completed_highSchool.info()","bdbc8ef1":"percent_over_25_completed_highSchool.percent_completed_hs.value_counts()","630261ae":"# High school graduation rate of the population that is older than 25 in states\npercent_over_25_completed_highSchool.percent_completed_hs.replace([\"-\"],0,inplace = True)\npercent_over_25_completed_highSchool.percent_completed_hs = percent_over_25_completed_highSchool.percent_completed_hs.astype(float)\nstate_list = list(percent_over_25_completed_highSchool[\"Geographic Area\"].unique())\narea_highschool_ratio = []\n\nfor i in state_list : \n    x = percent_over_25_completed_highSchool[percent_over_25_completed_highSchool[\"Geographic Area\"] == i]\n    state_rate = sum(x.percent_completed_hs) \/ len(x)\n    area_highschool_ratio.append(state_rate)\n# Sorting\ndata = pd.DataFrame({\"State_list\" : state_list, \"Area_highschool_ratio\" : area_highschool_ratio})\nnew_index = (data[\"Area_highschool_ratio\"].sort_values(ascending = True)).index.values\nsorted_data_2 = data.reindex(new_index)\n# Visualization\nplt.figure(figsize=(18,12))\nsns.barplot(x = sorted_data_2[\"State_list\"], y = sorted_data_2[\"Area_highschool_ratio\"])\nplt.xticks(rotation = 90)\nplt.xlabel = (\"State_list\")\nplt.ylabel = (\"Area_highschool_ratio\")\nplt.title(\"Percentage of Given State's Population Above 25 that Has Graduated High School\")","56383b95":"share_race_city.head()","fc00bf59":"share_race_city.info()","f2f69ffd":"# Percentage of state's population according to races that are black,white,native american, asian and hispanic\nshare_race_city.replace([\"-\"],0,inplace = True)\nshare_race_city.replace([\"(X)\"],0,inplace = True)\nshare_race_city[\"share_white\"] = share_race_city.share_white.astype(float)\nshare_race_city[\"share_black\"] = share_race_city.share_black.astype(float)\nshare_race_city[\"share_native_american\"] = share_race_city.share_native_american.astype(float)\nshare_race_city[\"share_asian\"] = share_race_city.share_asian.astype(float)\nshare_race_city[\"share_hispanic\"] = share_race_city.share_hispanic.astype(float)\nshare_white = []\nshare_black = []\nshare_native_american = []\nshare_asian = []\nshare_hispanic = []\nstate_list = list(share_race_city[\"Geographic area\"].unique())\n\nfor i in state_list:\n    x = share_race_city[share_race_city[\"Geographic area\"] == i]\n    share_white.append(sum(x.share_white) \/ len(x))\n    share_black.append(sum(x.share_black) \/ len(x))\n    share_native_american.append(sum(x.share_native_american) \/ len(x))\n    share_asian.append(sum(x.share_asian) \/ len(x))\n    share_hispanic.append(sum(x.share_hispanic) \/ len(x))\n\n# Visualization\nf,ax = plt.subplots(figsize = (12,18)) # This is horizontal\nsns.barplot(x = share_white, y = area_list, color = 'green', alpha = 0.5, label = \"White\")\nsns.barplot(x = share_black, y = area_list, color = 'blue', alpha = 0.7, label = \"African American\")\nsns.barplot(x = share_native_american, y = state_list, color = 'cyan',alpha = 0.6, label = \"Native American\")\nsns.barplot(x = share_asian, y = state_list, color = 'yellow',alpha = 0.6, label = \"Asian\")\nsns.barplot(x = share_hispanic, y = state_list, color = 'red',alpha = 0.6, label = \"Hispanic\")\nax.legend(loc = \"lower right\",frameon = True) # frameon = True\/False : The legend is liquid or non-liquid\nax.set(xlabel = \"Percentage of Races\", ylabel = \"States\", title = \"Percentage of State's Population According to Races\")\n ","f1bbe3a1":"# High school graduation rate vs Poverty rate of each state\n# Normalization : These rates are multivariate as numerical. We need compress to a narrow area.\n# Example : If we compare these lists, we can compress like this. ([1,2,3,4,5] \/ 5 , [600,700,800,900,1000] \/ 1000)\nsorted_data[\"area_poverty_ratio\"] = sorted_data[\"area_poverty_ratio\"] \/ max(sorted_data[\"area_poverty_ratio\"])\nsorted_data_2[\"Area_highschool_ratio\"] = sorted_data_2[\"Area_highschool_ratio\"] \/ max(sorted_data_2[\"Area_highschool_ratio\"])\n\ndata = pd.concat([sorted_data,sorted_data_2[\"Area_highschool_ratio\"]], axis=1)\ndata.sort_values(\"area_poverty_ratio\",inplace = True)\n\n# Visualization\nf,ax = plt.subplots(figsize = (15,10))\nsns.pointplot(x = \"area_list\", y = \"area_poverty_ratio\", data = data, color= \"lime\", alpha = 0.8)\nsns.pointplot(x = \"area_list\", y = \"Area_highschool_ratio\", data = data, color = \"red\", alpha = 0.7)\nplt.text(35, 0.6, \"high school graduate ratio\", color = \"red\", fontsize = 17, style = \"italic\")\nplt.text(35, 0.55, \"poverty ratio\", color = \"lime\", fontsize = 17, style = \"italic\")\nplt.xlabel(\"states\", fontsize = 15, color = \"blue\")\nplt.ylabel(\"values\", fontsize = 15, color = \"blue\")\nplt.title(\"High School Graduate  VS  Poverty Rate\", fontsize = 20, color = \"blue\")\nplt.grid()","ff6611df":"data.head()","679fcf36":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# Joint Kernel Density\n# pearsonr = if it is 1, there is positive correlation and if it is, -1 there is negative correlation.\n# If it is zero, there is no correlation between variables\n# Show the joint distribution using kernel density estimation\ng = sns.jointplot(data.area_poverty_ratio, data.Area_highschool_ratio, kind = \"kde\", size = 7)\nplt.show()\n","91e2af60":"# You can change parameters of joint plot.\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\n# Different usage of parameters but same plot with previous one\ng = sns.jointplot(\"area_poverty_ratio\", \"Area_highschool_ratio\", data=data,size=5, ratio=3, color=\"r\")","90e5ce05":"kill.race.head(15)","dc896531":"kill.race.value_counts()","90b2478c":"# Race rates according in kill data\nkill.race.dropna(inplace = True)\ncolors = [\"yellow\",\"red\",\"blue\",\"green\",\"pink\",\"purple\"]\nexplode = [0,0,0,0,0,0]\nlabels = kill.race.value_counts().index\nsizes = kill.race.value_counts().values\n\n# Visualisation\nplt.figure(figsize = (7,7))\nplt.pie(sizes, explode = explode, labels = labels, colors = colors, autopct = \"%1.1f%%\")\nplt.title('Killed People According to Races',color = 'blue',fontsize = 15)","f1a6e712":"data.head()","24b9cc44":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# Lmplot \n# Show the results of a linear regression within each dataset\nsns.lmplot(x = \"area_poverty_ratio\", y = \"Area_highschool_ratio\",data = data)\nplt.show()","dc591834":"data.head()","f4ec7efb":"# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\n# Cubehelix Plot\nsns.kdeplot(data.area_poverty_ratio, data.Area_highschool_ratio, shade = True, cut = 3) # cut: size\nplt.show()","9e3fb91f":"data.head()","f01716ee":"# Show each distribution with both violins and points\n# Use cubehelix to get a custom sequential palette\npal = sns.cubehelix_palette(2, rot=-0.4, dark=0.3)\nsns.violinplot(data = data, palette = pal, inner = \"points\")\nplt.show()","f5e728b9":"data.corr()","922c8eb8":"# Correlation Map\n# Visualization of high school graduation rate vs Poverty rate of each state with different style of seaborn code\nf,ax = plt.subplots(figsize=(5, 5))\nsns.heatmap(data.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.show()","6775cb08":"kill.head()","772480dd":"kill.manner_of_death.unique()","57a681d1":"# manner of death\n# gender\n# age\n# Plot the orbital period with horizontal boxes\n# Other points are outliers.\nsns.boxplot(x = \"gender\", y = \"age\", hue = \"manner_of_death\", data = kill, palette = \"PRGn\")\nplt.show()","89d56643":"kill.head()","aaba4138":"# manner of death\n# gender\n# age\n# There is a disadvantage about swarm plot. If you have too many datas, it's drawing is impossible.\n# Your memory will work exactly.\nsns.swarmplot(x = \"gender\", y = \"age\", hue = \"manner_of_death\", data = kill)\nplt.show()","6801fd61":"data.head()","e82e289c":"sns.pairplot(data)\nplt.show()","a76884dc":"kill.gender.value_counts()","ab751bb5":"kill.head()","feacb811":"# kill properties\nsns.countplot(kill.gender)\nplt.title(\"gender\",color = 'blue',fontsize=15)","cef57515":"# Kill weapon\narmed = kill.armed.value_counts()\nprint(armed)","4118d566":"plt.figure(figsize = (15,15))\nsns.barplot(x = armed[:7].index, y = armed[:7].values)\nplt.title(\"Kill Weapon\", size = 15, color = \"blue\")","e988d65d":"# Age of killed people\nabove25 = [\"above25\" if i >= 25 else \"below25\" for i in kill.age]\ndf = pd.DataFrame({\"age\" : above25})\nsns.countplot(x = df.age)\nplt.title(\"Age of killed people\",color = \"blue\",fontsize=15)","dda6bef7":"# Race of killed people \nsns.countplot(data = kill, x =kill.race)\nplt.title(\"Race of Killed People\", color =\"blue\", size = 15)","58876e5e":"# Most dangerous cities\ncity = kill.city.value_counts()\nplt.figure(figsize = (10,7))\nsns.barplot(x = city[:12].index, y = city[:12].values)\nplt.xticks(rotation = 45)\nplt.title(\"Most dangerous cities\",color = \"blue\",fontsize = 15)","4bf55fa4":"# Most dangerous states\nstate = kill.state.value_counts()\nplt.figure(figsize = (10,7))\nsns.barplot(x = state[:20].index, y = state[:20].values)\nplt.title(\"Most dangerous state\", color = \"blue\", fontsize = 15)","56a0fa8b":"# Having mental ilness or not for killed people\nsns.countplot(kill.signs_of_mental_illness)\nplt.title(\"Having mental illness or not\", color = \"blue\", size = 15)","875e64d7":"# Threat types\nsns.countplot(kill.threat_level)\nplt.title(\"Threat Types\",color = \"blue\", size = 15)","ee9b1421":"# Flee types\nsns.countplot(kill.flee)\nplt.title(\"Flee types\",color = \"blue\", size = 15)","775f8767":"# Having body cameras or not for police\nsns.countplot(kill.body_camera)\nplt.title(\"Having body cameras or not on Police\",color = \"blue\", size = 15)","737f0169":"# Kill numbers from states in kill data\nsta_te = kill.state.value_counts().index[:10]\nsns.barplot(x = sta_te, y = kill.state.value_counts().values[:10])\nplt.title(\"Kill Numbers from States\",color = \"blue\", size = 15)","6d1b5004":"<a id=\"9\"><\/a>\n## Box Plot\n","13793175":"<a id=\"10\"><\/a>\n## Swarm Plot","f6117781":"## CONCLUSION\n### If you have any question, I will be happy to hear it! See you later...","66ae079c":"# Plot Contents:\n*    [Bar Plot](#1)\n*    [Point Plot](#2) \n*    [Joint Plot](#3)\n*    [Pie Plot](#4)\n*    [Lm Plot](#5)\n*    [Kde Plot](#6)\n*    [Violin Plot](#7)\n*    [Heatmap](#8)\n*    [Box Plot](#9)\n*    [Swarm Plot](#10)\n*    [Pair Plot](#11)\n*    [Count Plot](#12)\n","daf657d2":"<a id=\"6\"><\/a>\n## Kde Plot","b477f9ac":"<a id=\"7\"><\/a>\n## Violin Plot\n","7fadd728":"<a id=\"4\"><\/a>\n## Pie Chart","63c42d54":"<a id=\"1\"><\/a> \n## Bar Plot","542b327a":"<a id=\"2\"> <\/a> \n## Point Plot\n","f93226ff":"<a id=\"3\"> <\/a> \n## Joint Plot","141fe017":"<a id=\"5\"><\/a>\n### Lm Chart","941947c3":"<a id=\"8\"><\/a>\n## Heatmap\n","245aec77":"<a id=\"12\"><\/a>\n## Count Plot","8b32a225":"<a id=\"11\"><\/a>\n## Pair Plot"}}