{"cell_type":{"af8dfc88":"code","2a0735e6":"code","e83f34f7":"code","4dcca955":"code","bcd3431b":"code","83f6a1a8":"code","bf22b188":"code","1eb90b6b":"code","28792808":"code","866dcad0":"code","9667915d":"code","907a803a":"code","aff140d2":"code","2b9fa333":"code","6eb684bf":"code","c86a0e22":"code","66a2e280":"code","c29811b8":"code","bdbc541f":"code","1a188e6f":"code","8c29ad65":"code","64f3e5e3":"code","d43c1073":"code","0403918b":"code","5570db93":"code","8980c6c9":"code","6fad07e2":"code","b417b30a":"code","9d91b868":"code","c8079ba4":"code","0c29e846":"code","75f3791e":"code","402faff1":"code","8ba0e75e":"code","7aeb674b":"code","2c752b58":"markdown","ffdfd94b":"markdown","1ad13632":"markdown","f7850ac6":"markdown","6e40d0f7":"markdown","d85c8159":"markdown","c8648295":"markdown","710ad660":"markdown","6b4ab2ca":"markdown","50f74987":"markdown","6ebeae6e":"markdown","8515a9ba":"markdown","a9ebef9b":"markdown","aef2c0f6":"markdown","c476d8df":"markdown","7250b76b":"markdown","989d4527":"markdown","cf819129":"markdown"},"source":{"af8dfc88":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2a0735e6":"airQuality = pd.read_excel('..\/input\/AirQuality.xlsx')","e83f34f7":"airQuality.head()","4dcca955":"airQuality.info()","bcd3431b":"airQuality.describe()","83f6a1a8":"airQuality.columns","bf22b188":"#List of Countries\nprint('Num of Unique Countries : ',airQuality['Country'].nunique())\nairQuality['Country'].unique()","1eb90b6b":"airQuality.drop(['Country', 'lastupdate'], axis = 1, inplace = True)\nairQuality.head()","28792808":"#List of States\nairQuality['State'].unique()","866dcad0":"plt.figure(figsize=(17,7), dpi = 100)\nsns.countplot(x='State',data=airQuality)\nplt.xlabel('State')\nplt.tight_layout()","9667915d":"# Grouping by States\nby_state = airQuality.groupby('State')","907a803a":"# Mean Pollution\nby_state.mean()","aff140d2":"plt.figure(figsize=(17,7), dpi = 100)\n#by_state.mean().plot()\nplt.plot(by_state.mean())\nplt.tight_layout()\nplt.legend(['Avg', 'Max', 'Min'])\nplt.xlabel('State')\nplt.title('Avg Pollution by State')","2b9fa333":"by_state.max()","6eb684bf":"plt.figure(figsize=(17,7), dpi = 100)\n#by_state.mean().plot()\nplt.plot(by_state.max()['Avg'])\nplt.plot(by_state.max()['Max'])\nplt.plot(by_state.max()['Min'])\nplt.tight_layout()\nplt.legend(['Avg', 'Max', 'Min'])\nplt.xlabel('State')\nplt.title('Max Pollution by State')","c86a0e22":"print('List of Cities by State with Max Pollution')\nby_state.max()['city']","66a2e280":"by_state.min()","c29811b8":"plt.figure(figsize=(17,7), dpi = 100)\n#by_state.mean().plot()\nplt.plot(by_state.max()['Avg'])\nplt.plot(by_state.max()['Max'])\nplt.plot(by_state.max()['Min'])\nplt.tight_layout()\nplt.legend(['Avg', 'Max', 'Min'])\nplt.xlabel('State')\nplt.title('Min Pollution by State')","bdbc541f":"print('List of Cities by State with Min Pollution')\nby_state.min()['city']","1a188e6f":"sns.countplot(x='Pollutants', data = airQuality)\nairQuality['Pollutants'].value_counts()","8c29ad65":"airQuality['State'].nunique()","64f3e5e3":"state = list(airQuality['State'].unique())\nfig, axes = plt.subplots(nrows=5,ncols=4,figsize=(17,20))\ni = 0\nfor st in state:\n    airQualityState = airQuality[airQuality['State'] == st]\n    plot = sns.countplot(x='Pollutants', data = airQualityState, ax=axes.flatten()[i])\n    plot.set_title(st)\n    plt.tight_layout()\n    i = i + 1","d43c1073":"state = list(airQuality['State'].unique())\nfig, axes = plt.subplots(nrows=5,ncols=4,figsize=(17,20))\ni = 0\nfor st in state:\n    airQualityState = airQuality[airQuality['State'] == st]\n    plot = sns.countplot(x='city', data = airQualityState, ax=axes.flatten()[i])\n    plot.set_title(st)\n    plot.set_xticklabels(plot.get_xticklabels(), rotation = 45)\n    plt.tight_layout()\n    i = i + 1","0403918b":"list(airQuality['Pollutants'].unique())","5570db93":"pollutant = list(airQuality['Pollutants'].unique())\nfor poll in pollutant:\n    plt.figure(figsize=(17,7), dpi = 100)\n    sns.countplot(airQuality[airQuality['Pollutants'] == poll]['State'], data = airQuality)\n    plt.tight_layout()\n    plt.title(poll)","8980c6c9":"max_value = list()\navg_value = list()\nmin_value = list()\npollutant = list(airQuality['Pollutants'].unique())\nfor poll in pollutant:\n    max_value.append(airQuality[airQuality['Pollutants'] == poll]['Max'].max())\n    avg_value.append(airQuality[airQuality['Pollutants'] == poll]['Avg'].mean())\n    min_value.append(airQuality[airQuality['Pollutants'] == poll]['Min'].min())\nfig, axes = plt.subplots(nrows=1,ncols=3,figsize=(17,7))\naxes[0].set_ylabel('Max Value')\naxes[0].bar(pollutant, max_value)\naxes[1].set_ylabel('Avg Value')\naxes[1].bar(pollutant, avg_value)\naxes[2].set_ylabel('Min Value')\naxes[2].bar(pollutant, min_value)","6fad07e2":"airQuality.columns","b417b30a":"airQuality['city'].unique()","9d91b868":"from mpl_toolkits.basemap import Basemap\nfrom matplotlib.patches import Polygon\nfrom matplotlib.collections import PatchCollection\nfrom matplotlib.colors import Normalize\nimport matplotlib.cm","c8079ba4":"#data = {'City': ['Delhi', 'Ahmedabad', 'Bengaluru', 'Aurangabad', 'Mumbai', 'Nagpur', 'Nashik', 'Pune', 'Amritsar', 'Jaipur', 'Chennai', 'Hyderabad', 'Agra', 'Kanpur', 'Lucknow', 'Kolkata'],\n#        'Lat':  [28.70, 23.02, 12.58, 19.87, 18.59, 21.08, 19.99, 18.52, 31.63, 26.91, 13.08, 17.38, 27.17, 26.44, 26.84, 22.57],\n#        'Long': [77.10, 72.35, 77.34, 75.34, 72.50, 79.05, 73.78, 73.85, 74.87, 75.78, 80.27, 78.48, 78.00, 80.33, 80.94, 88.36]}\ndata = {\n        'City': ['Delhi',  \n                 'Amaravati', 'Rajamahendravaram', 'Tirupati', 'Vijayawada', 'Visakhapatnam', 'Gaya', 'Muzaffarpur', 'Patna', \n                 'Ahmedabad', 'Faridabad', 'Gurugram', 'Manesar', 'Panchkula', 'Rohtak', 'Jorapokhar', 'Bengaluru', \n                 'Chikkaballapur', 'Hubballi', 'Thiruvananthapuram', 'Dewas', 'Mandideep', 'Pithampur', 'Satna', 'Singrauli', \n                 'Ujjain', 'Aurangabad', 'Chandrapur', 'Mumbai', 'Nagpur', 'Nashik', 'Pune', 'Solapur', 'Thane', 'Brajrajnagar',\n                 'Talcher', 'Amritsar', 'Bathinda', 'Jalandhar', 'Khanna', 'Ludhiana', 'Mandi Gobindgarh', 'Patiala', 'Rupnagar', \n                 'Ajmer', 'Alwar', 'Bhiwadi', 'Jaipur', 'Jodhpur', 'Kota', 'Pali', 'Udaipur', 'Chennai', 'Hyderabad', 'Agra', \n                 'Baghpat', 'Bulandshahr', 'Ghaziabad', 'Greater_Noida', 'Kanpur', 'Lucknow', 'Moradabad', 'Muzaffarnagar', \n                 'Noida', 'Varanasi', 'Asanol', 'Durgapur', 'Haldia', 'Howrah', 'Kolkata', 'Siliguri'],\n        'Lat' : [28.70, \n                 20.93, 17.00, 13.62, 16.50, 17.68, 24.79, 26.12, 25.59,\n                 23.02, 28.40, 28.45, 28.35, 30.69, 28.89, 23.70, 12.97,\n                 13.43, 15.36, 8.52,  22.96, 23.09, 22.61, 24.60, 24.19,\n                 23.17, 19.87, 19.97, 19.07, 21.14, 19.99, 18.52, 17.65, 19.21, 21.82,\n                 20.95, 31.63, 30.21, 31.32, 30.70, 30.90, 30.66, 30.33, 30.96,\n                 26.44, 27.55, 28.20, 26.91, 26.23, 25.21, 25.77, 24.58, 13.08, 17.38, 27.17,\n                 28.94, 28.40, 28.66, 28.47, 26.44, 26.84, 28.83, 29.47,\n                 28.53, 25.31, 23.67, 23.52, 22.06, 22.59, 22.57, 26.72],\n        'Long': [77.10, \n                 77.77, 81.80, 79.41, 80.64, 83.21, 85.00, 85.36, 85.13,\n                 72.57, 77.31, 77.02, 76.93, 76.86, 76.60, 86.41, 77.59,\n                 77.72, 75.12, 76.93, 76.05, 77.50, 75.67, 80.83, 82.66,\n                 75.78, 75.34, 79.30, 72.87, 79.08, 73.78, 73.85, 75.90, 72.97, 83.92,\n                 85.21, 74.87, 74.94, 75.57, 76.21, 75.85, 76.30, 76.38, 76.52,\n                 74.63, 76.63, 76.84, 75.78, 73.02, 75.86, 73.32, 73.71, 80.27, 78.48, 78.00,\n                 77.22, 77.84, 77.45, 77.50, 80.33, 80.94, 78.77, 77.70,\n                 77.39, 82.97, 86.95, 87.31, 88.06, 88.26, 88.36, 88.39]\n       }\ndfr = pd.DataFrame(data, columns = ['City', 'Lat', 'Long'])\nprint(data['City'])","0c29e846":"airQuality.Pollutants.unique()","75f3791e":"for c in list(airQuality['city'].unique()):\n    dfr.loc[dfr['City'] == c,'PM2.5'] = len(airQuality[(airQuality['city'] == c) & (airQuality['Pollutants'] == 'PM2.5')])\n    dfr.loc[dfr['City'] == c,'PM10']  = len(airQuality[(airQuality['city'] == c) & (airQuality['Pollutants'] == 'PM10')])\n    dfr.loc[dfr['City'] == c,'NO2']   = len(airQuality[(airQuality['city'] == c) & (airQuality['Pollutants'] == 'NO2')])\n    dfr.loc[dfr['City'] == c,'NH3']   = len(airQuality[(airQuality['city'] == c) & (airQuality['Pollutants'] == 'NH3')])\n    dfr.loc[dfr['City'] == c,'SO2']   = len(airQuality[(airQuality['city'] == c) & (airQuality['Pollutants'] == 'SO2')])\n    dfr.loc[dfr['City'] == c,'CO']    = len(airQuality[(airQuality['city'] == c) & (airQuality['Pollutants'] == 'CO')])\n    dfr.loc[dfr['City'] == c,'OZONE'] = len(airQuality[(airQuality['city'] == c) & (airQuality['Pollutants'] == 'OZONE')])\n    dfr.loc[dfr['City'] == c,'Avg']   = airQuality[(airQuality['city'] == c)]['Avg'].mean()\n    dfr.loc[dfr['City'] == c,'Max']   = airQuality[(airQuality['city'] == c)]['Max'].mean()\n    dfr.loc[dfr['City'] == c,'Min']   = airQuality[(airQuality['city'] == c)]['Min'].mean()\ndfr.head()","402faff1":"plt.figure(figsize=(20,20))\nmap = Basemap(projection='aeqd', lat_0 = 20.7, lon_0 = 82.71, width = 5000000, height = 4000000, resolution='l') # set res=h\nmap.drawmapboundary(fill_color='cyan')\nmap.etopo()\nmap.drawcoastlines()\nmap.drawcountries()\nmap.fillcontinents(color='#f2f2f2',lake_color='#46bcec')\nscale = 1\n#for c in list(newDf['City'].unique()):\n    ##print(c, \":\", newDf[newDf['City'] == c]['Number of Reviews'].sum())\n    #dfr.loc[dfr['City'] == c, 'Total Num of Reviews'] = newDf[newDf['City'] == c]['Number of Reviews'].sum()\nfor i in range(0,len(dfr)):\n    x, y = map(dfr.ix[i,'Long'], dfr.ix[i,'Lat'])\n    map.plot(x,y,marker='o', color='Red', markersize=5)\nplt.title('List of cities')\nplt.show()","8ba0e75e":"for p in list(airQuality.Pollutants.unique()):\n    plt.figure(figsize=(20,20))\n    map = Basemap(projection='aeqd', lat_0 = 20.7, lon_0 = 82.71, width = 5000000, height = 4000000, resolution='l') # set res=h\n    map.drawmapboundary(fill_color='cyan')\n    map.etopo()\n    map.drawcoastlines()\n    map.drawcountries()\n    map.fillcontinents(color='#f2f2f2',lake_color='#46bcec')\n    scale = 2\n#for c in list(newDf['City'].unique()):\n    ##print(c, \":\", newDf[newDf['City'] == c]['Number of Reviews'].sum())\n    #dfr.loc[dfr['City'] == c, 'Total Num of Reviews'] = newDf[newDf['City'] == c]['Number of Reviews'].sum()\n    for i in range(0,len(dfr)):\n        x, y = map(dfr.ix[i,'Long'], dfr.ix[i,'Lat'])\n        map.plot(x,y,marker='o', color='Red', alpha = 0.5, markersize=int(dfr.ix[i,p]*scale))\n    plt.title('{} Emission Spread'.format(p))\n    plt.show()","7aeb674b":"for p in ['Avg', 'Max', 'Min']:\n    plt.figure(figsize=(20,20))\n    map = Basemap(projection='aeqd', lat_0 = 20.7, lon_0 = 82.71, width = 5000000, height = 4000000, resolution='l') # set res=h\n    map.drawmapboundary(fill_color='cyan')\n    map.etopo()\n    map.drawcoastlines()\n    map.drawcountries()\n    map.fillcontinents(color='#f2f2f2',lake_color='#46bcec')\n    scale = 0.1\n#for c in list(newDf['City'].unique()):\n    ##print(c, \":\", newDf[newDf['City'] == c]['Number of Reviews'].sum())\n    #dfr.loc[dfr['City'] == c, 'Total Num of Reviews'] = newDf[newDf['City'] == c]['Number of Reviews'].sum()\n    for i in range(0,len(dfr)):\n        x, y = map(dfr.ix[i,'Long'], dfr.ix[i,'Lat'])\n        map.plot(x,y,marker='o', color='Red', alpha = 0.5, markersize=int(dfr.ix[i,p]*scale))\n    plt.title('{} Pollutant Spread'.format(p))\n    plt.show()","2c752b58":"### Head of the dataFrame","ffdfd94b":"## Takeaway - Northern part of India seems to be more polluted than the rest!! (This might be due to the data we have at hand)","1ad13632":"import plotly.plotly as py\nimport plotly.graph_objs as go \nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot","f7850ac6":"## Delhi clearly has the highest amount of pollutants!!!! Next highest polluted cities are Bengaluru, Hyderabad","6e40d0f7":"## **Lets go by Pollutant**","d85c8159":"# Lets look more into Pollutants","c8648295":"## Lets plot the different emissions across various cities ","710ad660":"## Lets plot the avg, min, max pollutants across various cities ","6b4ab2ca":"## Max Pollution by State","50f74987":"### Read the data","6ebeae6e":"## By the looks, NH3 seems to be the least dangerous pollutant (It has the least min, max, avg value), \n## PM2.5, PM10 seem to be the most dangerous pollutants!!","8515a9ba":"## We can delete Country, lastupdate columns","a9ebef9b":"## Cities mapped on the Indian Map","aef2c0f6":"## Min Pollution by State","c476d8df":"data = dict(type='choropleth',\n            colorscale = 'Viridis',\n            reversescale = True,\n            locations = airQuality['State'],\n            z = airQuality['Avg'],\n            locationmode = 'India-states',\n            text = airQuality['State'],\n            marker = dict(line = dict(color = 'rgb(255,255,255)',width = 1)),\n            colorbar = {'title':\"Voting-Age Population (VAP)\"}\n            ) \nlayout = dict(title = '2012 General Election Voting Data',\n              geo = dict(scope='india',\n                         showlakes = False)\n             )\nchoromap = go.Figure(data = [data],layout = layout)\n#plot(choromap,validate=False)","7250b76b":"## Lets check min, max, avg per pollutant","989d4527":"## Delhi seems to be most polluted !!!\n## Gujurat, Jkarkand, Kerala, Odisha seem to be least polluted","cf819129":"#### Lets do this for everyState"}}