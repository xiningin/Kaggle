{"cell_type":{"fa2b06f5":"code","e6eee24c":"code","064e67e4":"code","438b1f39":"code","6b31ce81":"code","2a79aa62":"code","3ca66da2":"code","20260f3d":"code","e4c2f542":"code","c519ab4e":"code","05682287":"code","cf38916a":"code","ef212863":"code","1eb604d3":"code","c55eeca3":"code","46d36031":"code","7e00951c":"code","b8fc199f":"code","15e47ee7":"code","d15fe438":"code","3cc8526b":"code","2035eb27":"code","80e6090c":"markdown","74c46cdc":"markdown","db50f038":"markdown","d0363781":"markdown","69cd54d5":"markdown","7918b602":"markdown","3c016d38":"markdown","b6a59c25":"markdown","4bf5b96b":"markdown","d8b3af14":"markdown","228d2675":"markdown","29acfa7b":"markdown","7495b8a8":"markdown"},"source":{"fa2b06f5":"#### IMPORT LIBARIES\n\n# Ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Handle tabular data and matricies\nimport numpy as np\nimport pandas as pd\n\n# Visualization\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.pylab as pylab\nimport seaborn as sns\n","e6eee24c":"#### IMPORT DATA\ntrain = pd.read_csv('..\/input\/equipfailstest\/equip_failures_training_set.csv', na_values='na')\ntest = pd.read_csv('..\/input\/equipfailstest\/equip_failures_test_set.csv', na_values='na')\n\n# Add a new column 'data' to identify which data frame it came from\ntrain['dataset'] = 'train'\ntest['dataset'] = 'test'\n\n# Combine both train and test data sets\ndata = pd.concat([train, test], copy=False)","064e67e4":"data.shape","438b1f39":"#### EXPLORE DATA SET\ndata.head()","6b31ce81":"data.info()","2a79aa62":"data.describe(include='all')","3ca66da2":"data.isna().sum()","20260f3d":"# Remove columns that have more than 70% of its data missing.\ndata = data.dropna(thresh=0.7*len(data), axis=1)\ndata.shape","e4c2f542":"# Don't fill dataset, id, or target columns\nfor col in data.columns:\n    if col != ('dataset' or 'id' or 'target'):\n        data[col]=data[col].fillna(data[col].median())","c519ab4e":"# Check if still missing data\ndata.isna().sum()","05682287":"from sklearn import model_selection","cf38916a":"# Split data set into X and y for training \/ testing purposes.\nX = data[data.dataset=='train'].drop(['dataset', 'id', 'target'], axis=1)\ny = data[data.dataset=='train']['target']\n\n# X submit test is for submission file\nX_submit_test = data[data.dataset=='test'].drop(['dataset', 'id', 'target'], axis=1)","ef212863":"# Splitting the final dataset into training and testing datasets\nX_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, random_state=0)","1eb604d3":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import accuracy_score","c55eeca3":"# Step 1) Define Model.\nDTC_model = DecisionTreeClassifier(random_state=1)\n\n# Step 2) Fit Model.\nDTC_model.fit(X_train, y_train)","46d36031":"# Step 3) Model Predictions\nDTC_model_pred = DTC_model.predict(X_test)\n\n# Step 4) Evaulate\nprint('Decision Tree Classifier accuracy: {}'.format(accuracy_score(y_test, DTC_model_pred)))","7e00951c":"### DTC Model\n# output = DTC_model.predict(X_submit_test).astype(int)\n# df_output = pd.DataFrame()\n# df_output['id'] = test['id']\n# df_output['target'] = output\n# df_output.to_csv('submission.csv', index=False)","b8fc199f":"fig, axes = plt.subplots(1, 1, sharex=\"all\", figsize=(15,15))\nname = \"DTC_Model\"\nclassifier = DTC_model\nindices = np.argsort(classifier.feature_importances_)[::-1][:40]\ng = sns.barplot(y=X_train.columns[indices][:40],x = classifier.feature_importances_[indices][:40] , orient='h',ax=axes)\ng.set_xlabel(\"Relative importance\",fontsize=12)\ng.set_ylabel(\"Features\",fontsize=12)\ng.tick_params(labelsize=9)\ng.set_title(name + \" feature importance\")\n","15e47ee7":"# Import libraries\nfrom collections import Counter\n\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve","d15fe438":"# Step 1) Define Model.\nDTC = DecisionTreeClassifier()\nadaDTC = AdaBoostClassifier(DTC, random_state=7)\n\n# Step 2) Fit Model.\nadaDTC.fit(X_train, y_train)\n\n# Step 3) Model Predictions\nadaDTC_pred = adaDTC.predict(X_test)\n\n# Step 4) Evaulate\nprint('AdaBoost Classifier accuracy: {}'.format(accuracy_score(y_test, adaDTC_pred)))","3cc8526b":"RFC = RandomForestClassifier()\nRFC.fit(X_train, y_train)\nRFC_pred = RFC.predict(X_test)\nprint('RFC accuracy: {}'.format(accuracy_score(y_test, RFC_pred)))","2035eb27":"### RFC Model\noutput = RFC.predict(X_submit_test).astype(int)\ndf_output = pd.DataFrame()\ndf_output['id'] = test['id']\ndf_output['target'] = output\ndf_output.to_csv('rfc_submission.csv', index=False)","80e6090c":"### 2) Exploratory Data Analysis\nAnalyze the data set.","74c46cdc":"From the chart above we can see that the 'sensor35_measure' feature had the most importance by a significant margin!\n\n","db50f038":"Submit RFC","d0363781":"10 Columns were removed!","69cd54d5":"#### DTC Model\nSubmission Code","7918b602":"#### A Simple Model: Decision Tree Classifier","3c016d38":"### Modeling\n* Define\n* Fit\n* Predict\n* Evaluate\n\nWill import libraries as they become necessary.","b6a59c25":"#### Lets investigate the importance of each feature for determining its output with the DTC Model.","4bf5b96b":"### 3) Data Preparation\nNotes from exploring data:\n\nThere are several NaN values that need to be addressed. Will handle missing values with either of the following:\n* Dropping the columns\n* Imputation\n* Extension to Imputation\n\n\nAs the variables are numerical the missing values will be handled with imputation using median values of the column.\n\nBefore applying imputation it was very evident there were some columns with an excessive amount of data missing. For example, 'sensor2_measure' was missing nearly 77% of its data.","d8b3af14":"The training data is now processed.","228d2675":"#### Table of Contents:\n1) Problem Description\n\n2) Exploratory Data Analysis\n\n3) Data Preparation\n\n4) Modeling","29acfa7b":"### 1) Problem Description\nPredict stripper well failures that occur both on the surface and below the ground using the data set provided.\n\nAs the submission requires a target variable which can be predicted by a set of features I will use a supervised learning algorithm to solve this problem.","7495b8a8":"#### Testing other simple models:"}}