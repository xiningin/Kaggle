{"cell_type":{"5a5fe77b":"code","690b9408":"code","fd27c2a0":"code","3cac6952":"code","3f3113d0":"code","f84bdc9e":"code","8af24fe1":"code","be4bce5f":"code","75ec9585":"code","77707357":"code","9e563484":"code","346b6fd1":"code","4297c552":"code","470e91bb":"code","e4cb8e1c":"code","19232387":"code","f5af7f8c":"code","c5abead7":"code","d5f81870":"code","1b0e6b21":"code","ec4586a4":"code","c3aaedd3":"code","c8944715":"code","bf1a19ce":"code","11ce769f":"code","4a83f3ac":"code","49347d5a":"code","636300fb":"code","d28aa19a":"code","d76e25c8":"code","95cde31d":"code","0327df49":"code","9df7147c":"code","2f937b94":"code","f7f2df83":"code","477a217b":"code","02a0bb13":"code","81a39824":"code","e81009eb":"code","69d6c576":"code","3f9c1f30":"code","fb6d2707":"code","6cc91471":"code","6aa548e9":"code","87f31243":"code","a4563153":"code","03896160":"code","53f20561":"code","ce0a5923":"code","f2c0bddc":"code","325c4add":"code","2e2882be":"code","6118093d":"code","5b22fd5a":"code","b696e2b8":"code","89794a16":"code","e34a5805":"code","7f5ceec9":"code","571819d1":"code","bf1fbe4f":"code","53f18c26":"code","fdff4d3d":"code","02c296fb":"code","6d4d5114":"code","b37f5b31":"code","ef650960":"code","2c5241e2":"markdown","ec863dd6":"markdown","32976825":"markdown","a2be1bdf":"markdown","3d367f66":"markdown","7f727425":"markdown","20442028":"markdown","5a2c96e6":"markdown","7383ff9e":"markdown","26c23699":"markdown","69c4c71c":"markdown","5173fb0d":"markdown","336ad421":"markdown","b0cbc010":"markdown","ef4b5b57":"markdown","f9378811":"markdown","3d88b624":"markdown","74b27e47":"markdown","a8c6c50e":"markdown","d5edf064":"markdown","bb19db48":"markdown","42612989":"markdown","8358139f":"markdown","cb911130":"markdown","b4478bbc":"markdown","330edb84":"markdown","6418e38e":"markdown","9f85730d":"markdown","e116fd41":"markdown"},"source":{"5a5fe77b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","690b9408":"import re\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings(action='ignore', category=UserWarning)","fd27c2a0":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","3cac6952":"train_df.head()","3f3113d0":"target = 'Survived'","f84bdc9e":"sns.countplot(x=target, data=train_df)","8af24fe1":"train_df.info()","be4bce5f":"train_df.isnull().sum() \/ len(train_df) * 100","75ec9585":"cat_vars = ['Pclass', 'Sex', 'SibSp', 'Parch', 'Embarked']","77707357":"for _, var in enumerate(cat_vars):\n    sns.countplot(x=var, hue=target, data=train_df)\n    plt.show()","9e563484":"sns.countplot(x='Embarked', hue='Sex', data=train_df)","346b6fd1":"sns.countplot(x='Embarked', hue='Pclass', data=train_df)","4297c552":"fg = sns.FacetGrid(train_df, row='Embarked', aspect=2, height=4)\nfg.map(sns.pointplot, 'Pclass', target, 'Sex', order=None, hue_order=None)  ","470e91bb":"# Age Column (stats)\nprint(train_df['Age'].max(), train_df['Age'].min(), train_df['Age'].mean())","e4cb8e1c":"sns.displot(train_df['Age'], bins=80)","19232387":"def kde_plot(var, df):\n    plt.figure(figsize=(10, 4))\n    sns.kdeplot(x=var, data=df, hue=target, legend=True, fill=True)\n    plt.show()\n    \ndef hist_plot(var, df):\n    plt.figure(figsize=(10, 4))\n    sns.histplot(x=var, data=df, bins=100, hue=target, multiple='stack')\n    plt.show()","f5af7f8c":"kde_plot('Age', train_df)","c5abead7":"kde_plot('Fare', train_df)","d5f81870":"hist_plot('Fare', train_df)","1b0e6b21":"hist_plot('Age', train_df)","ec4586a4":"male_df = train_df[train_df.Sex == 'male']\nhist_plot('Age', male_df)","c3aaedd3":"female_df = train_df[train_df.Sex == 'female']\nhist_plot('Age', female_df)","c8944715":"# Fare, Survived, and Pclass \ntrain_df.groupby(['Pclass', target]).describe()['Fare']","bf1a19ce":"sns.scatterplot(x='Age', y='Fare', data=train_df, hue=target)","11ce769f":"# For ease in analysis, we will join both train and test frame\n\ndf = pd.concat([train_df, test_df], sort=False).reset_index(drop=True)\n\ntrain_shape = train_df.shape\ntest_shape = test_df.shape","4a83f3ac":"df['Sex'] = df['Sex'].map({'female':0, 'male':1})","49347d5a":"df['Title'] = df['Name'].apply(lambda x: re.search(' ([A-Z][a-z]+)\\.', x).group(1))","636300fb":"df['Title'].value_counts().plot(kind='bar')","d28aa19a":"title_map = {\n            \"Capt\":       \"Officer\",\n            \"Col\":        \"Officer\",\n            \"Major\":      \"Officer\",\n            \"Jonkheer\":   \"Royalty\",\n            \"Don\":        \"Royalty\",\n            \"Sir\" :       \"Royalty\",\n            \"Dr\":         \"Officer\",\n            \"Rev\":        \"Officer\",\n            \"Countess\":   \"Royalty\",\n            \"Dona\":       \"Royalty\",\n            \"Mme\":        \"Mrs\",\n            \"Mlle\":       \"Miss\",\n            \"Ms\":         \"Mrs\",\n            \"Mr\" :        \"Mr\",\n            \"Mrs\" :       \"Mrs\",\n            \"Miss\" :      \"Miss\",\n            \"Master\" :    \"Master\",\n            \"Lady\" :      \"Royalty\"\n}\ndf['Title'] = df['Title'].map(title_map)","d76e25c8":"df.groupby('Title')[target].mean().plot(kind='bar')","95cde31d":"df['NameLength'] = df['Name'].apply(lambda x: len(x))","0327df49":"df.groupby(pd.cut(df['NameLength'], bins=10)).mean()['Survived'].plot(kind='bar')","9df7147c":"# We can drop the Name column since additional features are engineered from them\ndf.drop('Name', axis=1, inplace=True)","2f937b94":"title_age_grp = df.groupby('Title')['Age'].median()\n\ndef fill_Age(title, age):\n    if pd.isna(age):\n        return title_age_grp[title]\n    else:\n        return age\n\ndf['Age'] = df.apply(lambda x: fill_Age(x['Title'], x['Age']), axis=1)","f7f2df83":"hist_plot('Age', df)","477a217b":"interval = [0, 5, 12, 18, 25, 35, 60, 120]\n\ncats = ['Babies', 'Children', 'Teen', 'Student', 'Young', 'Adult', 'Senior']\n\ndf[\"Age_cat\"] = pd.cut(df.Age, interval, labels=cats)","02a0bb13":"df['FamilySize'] = df['SibSp'] + df['Parch'] + 1\n\n# New feature : Family_size\n\ndf['FamilySize'] = df['FamilySize'].apply(lambda x: 'Alone' if x==1 else ('Small' if x<5 else 'Big'))","81a39824":"df.groupby('FamilySize').mean()[target].plot(kind='bar')","e81009eb":"df.drop(columns=['SibSp', 'Parch'], axis=1, inplace=True)","69d6c576":"# Derive a new Column Child\n\ndf['Child'] = df['Age'].apply(lambda x: 1 if x < 12 else 0)","3f9c1f30":"df.groupby('Child').mean()[target].plot(kind='bar')","fb6d2707":"miss = df.isnull().sum()\nmiss[miss>0]","6cc91471":"df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])","6aa548e9":"df[df['Fare'].isna()]","87f31243":"df[df.Pclass == 3].groupby('Pclass')['Fare'].median()[3]","a4563153":"df['Fare'] = df['Fare'].fillna(8.05)","03896160":"df.head()","53f20561":"df['Fare_Stages'] = pd.cut(df['Fare'], bins=[0, 7.895, 14.454, 31.275, np.inf], labels=['low', 'middle', 'high', 'very_high'])","ce0a5923":"df.head()","f2c0bddc":"alldf = df[['Pclass', 'Sex',  'Embarked', 'Title', 'NameLength', 'Age_cat', 'FamilySize', 'Child', 'Fare_Stages']]","325c4add":"alldf = pd.get_dummies(alldf, drop_first=True)","2e2882be":"alldf.tail()","6118093d":"x_train = alldf[:train_shape[0]].values\ny_targets = train_df[target].values\n\nx_sub = alldf[train_shape[0]:].values","5b22fd5a":"x_train.shape, x_sub.shape","b696e2b8":"from xgboost import XGBClassifier\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report","89794a16":"X_train, X_test, y_train, y_test = train_test_split(x_train, y_targets, test_size=0.2, random_state=42)\nX_train.shape","e34a5805":"param_grid = { \n    \"criterion\" : [\"gini\", \"entropy\"],\n    \"min_samples_leaf\" : [n for n in range(1, 5)], \n    \"min_samples_split\" : [n for n in range(2, 11)], \n    \"n_estimators\": [30, 40, 50, 60, 75, 100]\n }\nmodel_base = RandomForestClassifier(max_features='auto', oob_score=True)\ngrid = GridSearchCV(estimator = model_base, param_grid = param_grid)\ngrid.fit(X_train,y_train)","7f5ceec9":"grid.best_params_","571819d1":"model = RandomForestClassifier(criterion='entropy', n_estimators=50, min_samples_split=2,\n                               min_samples_leaf=4, max_features='auto', oob_score=True)\n\nmodel.fit(X_train, y_train)","bf1fbe4f":"model.feature_importances_","53f18c26":"print(model.score(X_train, y_train))\nprint(model.score(X_test, y_test))","fdff4d3d":"modelxg = XGBClassifier(use_label_encoder=False)\nmodelxg.fit(X_train, y_train)","02c296fb":"print(modelxg.score(X_train, y_train))\nprint(modelxg.score(X_test, y_test))","6d4d5114":"y_grad_predicted = modelxg.predict(x_sub)","b37f5b31":"s = pd.DataFrame()\ns['PassengerId'] = test_df['PassengerId']\ns['Survived'] = y_grad_predicted","ef650960":"s.to_csv('submission_xgboost.csv', index=False)","2c5241e2":"### Time For Numerical Columns","ec863dd6":"### Split the overall dataframe to train and test","32976825":"## Map Sex column\n\n- Convert female and male to 0, 1 repectively","a2be1bdf":"### Group age into each category","3d367f66":"For Ports `S and Q` more survival chance is for females, while in C it's males\n\nSo it's a good predictor (But we will rethink once)","7f727425":"## Embarked we can replace by mode since it is just 2 values missing","20442028":"### Age Null Handling\n### We can fill the age group by the median of Title group","5a2c96e6":"Few variables are not that frequent, while some are just repetitive of other, we will group them and apply map","7383ff9e":"Cabin: From the below link it is clear that cabin is having a relationship with Pclass, so we can drop them\n\nhttps:\/\/www.encyclopedia-titanica.org\/cabins.html","26c23699":"## Titanic DataSet Meta Information\n\nSurvival : 0 = No, 1 = Yes\n\nPclass : Socio-economic status (SES) 1st = Upper 2nd = Middle 3rd = Lower\n\nsibsp : No of siblings \/ spouses\n\nparch : The no of parents \/ children aboard the Titanic\n\nTicket : Ticket number\n\nFare : Passenger fare\n\nCabin : Cabin number embarked\n\nPort of Embarkation: C = Cherbourg, Q = Queenstown, S = Southampton\n    \nName, Sex , Age are self-explanatory","69c4c71c":"There are few missing values, and we will take care of it lately","5173fb0d":"## Categorical Variables","336ad421":"First, let's plot a countplot of target","b0cbc010":"## Data Analysis\n\nIn this step, we will analyze the importance of each variable with target","ef4b5b57":"## Null Handling","f9378811":"### Random Forest Grid Search","3d88b624":"## Derive a new feature from the siblings and parents column","74b27e47":"Inferences from the above countplot,\n1. Passengers in the `higher classes` have a more chance to survive, (you know the villain right)\n1. More female Passengers had survived **(Ladies First)**\n1. Passengers with no bondings didn't survived a lot, may be they were engaging in rescue operation.\n1. Embarked, from figure it's related with the target, but is it really?\n\n### Let's drill down Embarked Column","a8c6c50e":"Yeah its a good predictor variable","d5edf064":"## Data Preprocessing and Further Exploration\n\nWe can drop the PassengerId, and Ticket without any doubt\n\nAge we can categorize into various groups\n\nSibSp and Parch can be combined as a single column and categorize them\n\nFare has some relationship with the Pclass, higher the class more the fare\n\nName, Cabin, and Embarked we will further investigate","bb19db48":"### XG Boost","42612989":"### Here for the Fare I'm replacing the null with the median of that missing class","8358139f":"So, `Survived` is the predictor variable and remaining are the features","cb911130":"### From the above graph it's clear that NameLength is having an influence in the target","b4478bbc":"### Random Forest Model","330edb84":"### Now we can submit the results","6418e38e":"Clearly thr age group of survival is different for each gender, children have a very good survival chance","9f85730d":"### Obtain Dummies for categorical columns","e116fd41":"## Name Column\n\n1. From name column we will derive the `title`, (Title is showing some good prediction abilty as per refs)\n1. From name column we will derive the `length feature`,."}}