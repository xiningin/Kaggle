{"cell_type":{"efb2898d":"code","e93599d7":"code","097a9abe":"code","c613f8f9":"code","a853d6b5":"code","6f61a5ed":"code","6035d6cf":"code","3ffce997":"code","a412f859":"code","f34328fe":"code","d3204a46":"code","1ab1871a":"code","44828ea3":"code","30c514eb":"code","9497d5fc":"code","bf49fd71":"code","23ea97cd":"code","1db49771":"code","d91fca71":"code","522d2c26":"code","59c1f058":"code","27ef8d54":"code","00a24c26":"code","d11173ca":"code","2d0e138c":"code","99832ca7":"code","9775d5d9":"code","ed6c8fa8":"code","0996ec4a":"code","1dbb7a6d":"code","73befacf":"code","79a03048":"code","5bc343f5":"code","cbf72211":"code","f0fe07b9":"code","e8fc6093":"code","5383bb14":"code","67729fbc":"code","92c374d7":"code","eb4be569":"code","0b5d758d":"code","d4e88bfe":"code","a49c79c6":"code","91dcedbf":"code","27956f9b":"code","793f3a92":"code","7b49f496":"code","a5d1a1f1":"code","05149b69":"code","34af6e45":"code","f68ee8a2":"code","93d24cd6":"code","3b805449":"code","3abd59e5":"code","503b86e1":"code","454ea9f7":"code","ebd92ccf":"code","8dd6ca31":"code","b9b742ac":"code","0d7174f5":"code","76fc0236":"code","9b5ddb74":"code","78fef433":"code","3f4728ac":"code","c3b3135d":"code","78c24b68":"code","84cb2994":"code","fc744cb0":"code","beed6235":"code","0cdd12ee":"code","b948ef22":"code","45960bb5":"code","f8904324":"code","4331fb53":"code","f7370741":"code","0a5a7c3e":"code","e625ddaa":"code","ad53cb5c":"code","d70e3bd4":"code","7e7f4418":"code","df34ddba":"code","b3962336":"code","2868c976":"code","a7b13ac5":"code","0ca65d84":"code","b97e334b":"code","4a3bb931":"code","b48ecf6a":"code","7c1a2ca0":"code","12550ceb":"code","66df272f":"code","e97ad7ca":"code","10cc665e":"code","e7f2794a":"code","805ebd38":"code","3d83244c":"code","e614bb7c":"code","b2841d72":"code","3cc823d3":"code","2d252dbc":"code","95530333":"code","ae8d886f":"code","a184144e":"code","f3c1a424":"code","28218f9f":"code","ef20b30e":"code","952bbf28":"code","82911aef":"code","51825c72":"code","a20e6ae1":"code","b84bcd52":"code","28f077b6":"code","23b72f3a":"code","59817c99":"code","243eba54":"code","a4025c2d":"code","97748b7c":"code","d5612976":"code","8c61f825":"code","2e7f417b":"code","9bcc3c81":"code","874ea967":"code","06678d07":"code","ae6f4ed7":"code","a2bbc09f":"code","6e0dff2c":"code","99efe94a":"code","2d776fa6":"code","2a826d51":"code","699a54a3":"code","ab79c19f":"code","52bc289e":"code","a02c3c65":"code","44b387a7":"code","63afbb00":"code","047ca81c":"markdown","08cec2c4":"markdown","aaefcd9a":"markdown","f4b7ec6f":"markdown","62a50d80":"markdown","93b3dd0e":"markdown","0811a5b6":"markdown","5d8de37c":"markdown","b40bca3d":"markdown","9fd04cf9":"markdown","5c17998f":"markdown","6fa63bd7":"markdown","e802a290":"markdown","f5041e29":"markdown","dae51e17":"markdown","ae3aba6a":"markdown","79c71bc5":"markdown","16dbf8a8":"markdown","8e612b2f":"markdown","bfc2d495":"markdown","598c0597":"markdown","b4cff3c7":"markdown","12016f22":"markdown","f137063a":"markdown","ceee173e":"markdown","f07ba64d":"markdown","14b31be4":"markdown","02acf9c5":"markdown","7c2735a8":"markdown","8d375704":"markdown","6cb95e36":"markdown","8f63c4e9":"markdown","59c1d82b":"markdown","36c71ad5":"markdown","8b77647c":"markdown","b1eb6c95":"markdown","c0b4eb17":"markdown","5682f0db":"markdown","795eb3f1":"markdown","d2e1dc9a":"markdown","46e0bdd1":"markdown","4cd2266e":"markdown"},"source":{"efb2898d":"!pip install seaborn\nimport seaborn","e93599d7":"# Import libraries \nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\n!pip install missingno\nimport missingno \n\n# Machine learning models \nfrom sklearn.linear_model import LogisticRegression, Perceptron, SGDClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\n!pip install catboost\nfrom catboost import CatBoostClassifier\n\n# Model evaluation\nfrom sklearn.model_selection import cross_val_score\n\n# Hyperparameter tuning\nfrom sklearn.model_selection import GridSearchCV\n\n# Remove warnings\nimport warnings \nwarnings.filterwarnings('ignore')","097a9abe":"# Read cvs files - mainly train and the test\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ngs = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","c613f8f9":"train.head()","a853d6b5":"test.head() # this doesn't have 'Survived' while train has ","6f61a5ed":"print(train.shape)\nprint(test.shape)","6035d6cf":"gs.head() #This prediction assumes only female passengers survival #.","3ffce997":"# non-null counts for train.csv\ntrain.info()\n### Age, Cabin and Embarked columns are missing information - while others have all 891 non-null ","a412f859":"test.info() #also 'Age', 'Cabin', and 'Fare'(only one) are missing in test.csv","f34328fe":"# Missing data in training set by columns\n\ntrain.isnull().sum().sort_values(ascending=False)\n# Cabin and Ages are missing many data, while Embarked is missing 2 items. ","d3204a46":"test.isnull().sum().sort_values(ascending=False)\n# as well as the test data,,,cabin and age have many missing data","1ab1871a":"# Showing missing data by using `missingno.matrix` in train set\nmissingno.matrix(train)","44828ea3":"# Missing data in test set\nmissingno.matrix(test)","30c514eb":"# Summary statistics for training set\ntrain.describe()","9497d5fc":"test.describe() #For Test set","bf49fd71":"# Find out missing `Embarked -2 items`\ntrain[['Embarked']] = train[['Embarked']].fillna('Unknown')\ntrain[train['Embarked'] == 'Unknown']\n# So both of these ladies stayed at the same Cabin. They both survived. \n# Where they could Embarked? It is likely we can find the answer by looking up the Cabin? ","23ea97cd":"# Fill out missing `Age` as 99 years \ntrain[['Age']] = train[['Age']].fillna(99)\ntrain[train['Age'] == 99]#Show the missing age ones as 99 years old for now. ","1db49771":"# Fill NaN in Cabin Column\ntrain[['Cabin']] = train[['Cabin']].fillna('Unknown')\ntrain[train['Cabin'] == 'Unknown']","d91fca71":"# Fill NaN in Cabin Column\ntest[['Cabin']] = test[['Cabin']].fillna('Unknown')\ntest[test['Cabin'] == 'Unknown']","522d2c26":"# Fill out missing `Age` as 99 years \ntest[['Age']] = test[['Age']].fillna(99)\ntest[test['Age'] == 99]#Show the missing age ones as 99 years old for now. ","59c1f058":"nan_fare = test[pd.isnull(test).any(axis=1)]\ntest[['Fare']] = test[['Fare']].fillna(35) # pick the mean of the test Fare $\ntest[test['Fare'] == 35]","27ef8d54":"#train.csv\ntrain[pd.isnull(train).any(axis=1)]","00a24c26":"#test.csv\ntest[pd.isnull(test).any(axis=1)]","d11173ca":"#Find out first 2 letters of Cabin information in train. If it says 'Un', it means it is unknown\ntrain['Cabin'] = train['Cabin'].str[0:2]\ntrain['Cabin']","2d0e138c":"#Find out first 2 letters of Cabin information in test. If it says 'Un', it means it is unknown\ntest['Cabin'] = test['Cabin'].str[0:2]\ntest['Cabin']","99832ca7":"# Combine Cabin, Pclass and Sex and get the survived average number by these three columns \ncabin_survived = pd.DataFrame(train.groupby(['Cabin', 'Pclass','Sex']).agg({'Survived': 'mean'}, inplace=True, index=False))\ncabin_survived","9775d5d9":"cabin_survived.columns # What type of column cabin_survived? ","ed6c8fa8":"# Added the above `cabin_survived` columns to the train to show how cabin # affected to the survival #s\ntrain=train.merge(cabin_survived, on=['Cabin', 'Pclass', 'Sex'], how='left')\ntrain #It shows as \"Survived_y\"","0996ec4a":"# Rename 'Survived_x' and 'Survived_y' to 'Survived' and 'Cabin IND(Indicator)' -based on ticket information \ntrain.rename(columns={'Survived_x': 'Survived', 'Survived_y': 'Cabin IND'}, inplace=True)\ntrain.head()","1dbb7a6d":"# Take a look at test.csv\ntest.head()","73befacf":"#Add Cabin IND to test data also - since it doesn't include 'Survived' originally\ntest=test.merge(cabin_survived, on=['Cabin', 'Pclass', 'Sex'], how='left')\ntest.head()","79a03048":"#Rename 'Survived' to 'Cabin IND'-based on ticket information \ntest.rename(columns={'Survived': 'Cabin IND'}, inplace=True)\ntest.head()","5bc343f5":"# Drop the douplicated column - Survived (Cabin IND) from the test  & Cabin as well since we don't need it anymore \ntest.drop(['Cabin'], axis=1, inplace=True)\ntest.head()","cbf72211":"nines= train[train['Age']==99]\nnines","f0fe07b9":"# To see if class and embarked are related- if you got on the certain embarked area, that means you are rich or poor?\n# Find out there two ladies - where they embarked from?\nclasses = train.groupby(['Ticket']).agg({'Survived':['mean','min','max'],'Age':'nunique'}, inplace=True, index=True)\nclasses.head()","e8fc6093":"train['Ticket_kind'] = train['Ticket'].str[0:1]\ntrain['Ticket_kind']","5383bb14":"test['Ticket_kind'] = test['Ticket'].str[0:1]\ntest['Ticket_kind']","67729fbc":"# Find out if ticket class affected on the passenger survival or not.\nticket_survived = pd.DataFrame(train.groupby(['Ticket_kind','Pclass']).agg({'Ticket': 'nunique','Survived': 'mean'}, inplace=True, index=False))\nticket_survived","92c374d7":"# Added the above `ticket_survived` columns to the train to show how ticket # affected to the survival #s\ntrain=train.merge(ticket_survived, on=['Ticket_kind', 'Pclass'], how='left')\ntrain","eb4be569":"# Added the above `ticket_survived` columns to the test to show how ticket # affected to the survival #s\ntest=test.merge(ticket_survived, on=['Ticket_kind', 'Pclass'], how='left')\ntest","0b5d758d":"train.columns #See the total column names so far. ","d4e88bfe":"train.drop(['Ticket_x','Ticket_y','Ticket_kind'],axis=1, inplace=True)\ntrain # Now get rid of repeated columns that added to the original csv.","a49c79c6":"# Rename 'Survived' -based on ticket information \ntrain.rename(columns={'Survived_x': 'Survived', 'Survived_y': 'Ticket IND'}, inplace=True)\ntrain.head()","91dcedbf":"# Drop Cabin column since we created Cabin_IND\ntrain.drop(['Cabin'], axis=1, inplace=True)\ntrain.head()","27956f9b":"test.head()","793f3a92":"test.drop(['Ticket_kind', 'Ticket_x', 'Ticket_y'], axis=1, inplace=True)","7b49f496":"test['Ticket IND'] = test['Survived'] # rename 'Survived' to 'Ticket IND'","a5d1a1f1":"test.head()","05149b69":"test.drop('Survived', axis=1, inplace=True)","34af6e45":"test.head()","f68ee8a2":"#find out age range who are younger than 19\n# Make a chart to see the survival rate\nchildren = train[train['Age'] < 19]\nchildren","93d24cd6":"sns.countplot(data=children, x='Pclass', hue='Survived')\n# About a half of children on the passenger class 3 didn't survived. ","3b805449":"sns.countplot(data=children,x='Sex', hue='Survived')\n# girls survived compared to boys ","3abd59e5":"# Value counts of the sex column\n\ntrain['Sex'].value_counts(dropna=False) #dropna - groups all the outcome together\n","503b86e1":"# Mean of survival by sex \n\ntrain[['Sex','Survived']].groupby('Sex', as_index=False).mean().sort_values(by='Survived', ascending=False)","454ea9f7":"sns.barplot(x='Sex', y ='Survived', data=train)\nplt.ylabel('Survival Probability')\nplt.title('Survival Probablity by Gender')","ebd92ccf":"# Value counts of the Pcalss column\n\ntrain['Pclass'].value_counts(dropna=False)\n\n","8dd6ca31":"# Mean of survival by passenger class\n\ntrain[['Pclass', 'Survived']].groupby(['Pclass'], as_index = False).mean().sort_values(by='Survived', ascending=False)","b9b742ac":"test['Pclass'].value_counts(dropna=False)","0d7174f5":"sns.barplot(x='Pclass', y='Survived', data=train)\nplt.ylabel('Survival Probability')\nplt.title('Survival Probability by Passenger Class')","76fc0236":"# Survival by genger and passenger class \n\ng= sns.factorplot(x='Pclass', y='Survived', hue='Sex', data=train, kind = 'bar')\ng.despine(left=True)\nplt.ylabel('Survival Probability')\nplt.title('Survival Probability by Passenger Class')","9b5ddb74":"# Value counts of the Embarked column\n\ntrain['Embarked'].value_counts(dropna=False)","78fef433":"# Mean of survival by point of embarkation\n\ntrain[['Embarked','Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)\n# Seems Unknown could be incluided to 'C' - Embarked","3f4728ac":"sns.barplot(x='Embarked', y='Survived', data=train)\nplt.ylabel('Survival Probability')\nplt.title('Survival Probability by Point of Embarkation')","c3b3135d":"# Get title from names\n\ntrain['Title'] = [name.split(',')[1].split('.')[0].strip() for name in train['Name']]\ntrain[['Name', 'Title']].head()\ntrain.head()","78c24b68":"# since we now have 'Title' column in the train table, get rid of Name \ntrain.drop('Name', axis=1, inplace=True)\ntrain.head()","84cb2994":"train['Title'].value_counts()\n# See how many different titles are","fc744cb0":"# Combine titles that aren't more than 3 or less\ntrain['Title'] = train['Title'].replace(['Dr', 'Rev', 'Col','Major','Lady','Jonkheer','Don','Capt','the Countess','Sir','Dona'], 'Others')\ntrain['Title'] = train['Title'].replace(['Mlle', 'Mme', 'Ms'], 'Miss')\ntrain.head()","beed6235":"sns.countplot(data=train, x = 'Title')","0cdd12ee":"title_survived = train[['Title', 'Survived']].groupby(['Title'], as_index = False).mean().sort_values(by='Survived', ascending=False)\ntitle_survived\n\n#train[['Embarked','Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)","b948ef22":"train=train.merge(title_survived, on='Title',how='left')\ntrain","45960bb5":"train['Survived'] = train['Survived_x'] # Change the column names to Survived and Title Indicator.\ntrain['Title IND'] = train['Survived_y']","f8904324":"train.head()","4331fb53":"train.drop(['Survived_x','Title','Survived_y'], axis=1, inplace=True) \n# We can get rid of 'Survived_x', 'Title', and 'Survived_y' now.","f7370741":"train.head() # train.csv is so much cleaner! ","0a5a7c3e":"# Get title from names for test\n\ntest['Title'] = [name.split(',')[1].split('.')[0].strip() for name in test['Name']]\ntest[['Name', 'Title']].head()\ntest.head()","e625ddaa":"# since we now have 'Title' column in the train table, get rid of Name \ntest.drop('Name', axis=1, inplace=True)\ntest.head()","ad53cb5c":"test['Title'].value_counts()\n# See how many different titles are","d70e3bd4":"# Combine titles that aren't more than 3 or less\ntest['Title'] = test['Title'].replace(['Dr', 'Rev', 'Col','Major','Lady','Jonkheer','Don','Capt','the Countess','Sir','Dona'], 'Others')\ntest['Title'] = test['Title'].replace(['Mlle', 'Mme', 'Ms'], 'Miss')\ntest.head()","7e7f4418":"test=test.merge(title_survived, on=['Title'], how='left')\ntest","df34ddba":"# Drop title and rename survived to Title IND\ntest.drop('Title', axis=1, inplace=True)\ntest.head()","b3962336":"test['Title IND'] = test['Survived']\ntest.head()","2868c976":"test.drop('Survived', axis=1, inplace=True)","a7b13ac5":"test.head()","0ca65d84":"train.head()","b97e334b":"test.loc[test['Age'] <= 16.0, 'Age'] = 1\ntest.loc[(test['Age'] > 16.0) & (test['Age'] <= 35.0), 'Age'] = 2\ntest.loc[(test['Age'] >35.0) & (test['Age'] <= 50.0), 'Age']= 3\ntest.loc[(test['Age'] > 50.0) & (test['Age'] <=70.0), 'Age']= 4\ntest.loc[(test['Age'] > 70.0) & (test['Age'] <= 98.0), 'Age']= 5\ntest.loc[test['Age'] == 99.0, 'Age'] = 6","4a3bb931":"sns.countplot(data=train, x='Age')","b48ecf6a":"# Group by sex. age. and survived \nage_sex = train[['Sex','Age', 'Survived']].groupby(['Sex', 'Age'], as_index = False).mean().sort_values(by ='Survived', ascending=False)\nage_sex","7c1a2ca0":"# Added the above `age_sex` columns to the train to show how Sex and Age affected to the survival #s\ntrain=train.merge(age_sex, on=['Sex','Age'], how='left')\ntrain","12550ceb":"test=test.merge(age_sex, on=['Sex','Age'], how='left')\ntest","66df272f":"# Rename Survvied_y from sex_age combination\n\ntrain['Sex Age IND'] = train['Survived_y'] \ntrain['Survived'] = train['Survived_x']\n\ntrain.head()","e97ad7ca":"# Drop columns that we no longer needed\ntrain.drop(['Survived_y', 'Sex', 'Age', 'Survived_x'], axis=1, inplace=True)\ntrain.head()","10cc665e":"# Would it be any relations for survived #s for Embarked? Let's focus on the column\nsns.countplot(x='Embarked', data=train, hue='Survived')","e7f2794a":"sns.countplot(x='Embarked', data=train, hue='Pclass')","805ebd38":"# Group by embarked, pclass. and survived \nclass_port = train[['Embarked','Pclass', 'Survived']].groupby(['Embarked', 'Pclass'], as_index = False).mean().sort_values(by ='Survived', ascending=False)\nclass_port","3d83244c":"# Added the above `emberked` and 'pclass' columns to the train to show how embarked and plcass affected to the survival #s\ntrain=train.merge(class_port, on=['Embarked','Pclass'], how='left')\ntrain","e614bb7c":"# Rename Survvied_y from Embarked and Pclass combination\n\ntrain['Embarked Pclass IND'] = train['Survived_y'] \ntrain['Survived'] = train['Survived_x']\n\ntrain.head()","b2841d72":"# Drop columns that we no longer needed\ntrain.drop(['Survived_y', 'Embarked', 'Survived_x'], axis=1, inplace=True)\ntrain.head()","3cc823d3":"# Group by SibSp and Parch and survived \nSib_Parch = train[['SibSp', 'Parch', 'Survived']].groupby(['SibSp','Parch'], as_index = False).mean().sort_values(by='Survived', ascending=False)\nSib_Parch","2d252dbc":"# Added the above `` and '' columns to the train to show how embarked and plcass affected to the survival #s\ntrain=train.merge(Sib_Parch, on=['SibSp','Parch'], how='left')\ntrain","95530333":"train.columns","ae8d886f":"# Rename Survvied_y column to 'Family IND'\n\ntrain['Family IND'] = train[\"Survived_y\"] \ntrain.head()","a184144e":"# Change Survived_x to Survived\ntrain['Survived'] = train['Survived_x']\ntrain.head()","f3c1a424":"# Drop Survived_y & Survived_x\ntrain.drop(['Survived_x', 'Survived_y'], axis=1, inplace=True)\ntrain.head()","28218f9f":"# Since Family IND has SibSp and Parch mean information, drop SibSp and Parch columns. \ntrain.drop(['SibSp', 'Parch'], axis=1, inplace=True)","ef20b30e":"train.head()","952bbf28":"# Make Sex Age IND for test\n\ntest['Sex Age IND'] = test['Survived'] \n\ntest.head()","82911aef":"# Remove 'Sex', 'Age', and 'Survived' columns\ntest.drop(['Sex','Age'], inplace=True, axis=1)\ntest.head()","51825c72":"# Group by embarked, pclass. and survived \nclass_port = test[['Embarked','Pclass', 'Survived']].groupby(['Embarked', 'Pclass'], as_index = False).mean().sort_values(by ='Survived', ascending=False)\nclass_port","a20e6ae1":"# Added the above `emberked` and 'pclass' columns to the test to show how embarked and plcass affected to the survival #s\ntest=test.merge(class_port, on=['Embarked','Pclass'], how='left')\ntest","b84bcd52":"# Rename Survvied_y from Embarked and Pclass combination\n\ntest['Embarked Pclass IND'] = test['Survived_y'] \ntest['Survived'] = test['Survived_x']\n\ntest.head()","28f077b6":"# Drop columns that we no longer needed\ntest.drop(['Survived_y', 'Embarked', 'Survived_x'], axis=1, inplace=True)\ntest.head()","23b72f3a":"# Group by SibSp and Parch and survived \nSib_Parch_Test = test[['SibSp', 'Parch', 'Survived']].groupby(['SibSp','Parch'], as_index = False).mean().sort_values(by='Survived', ascending=False)\nSib_Parch_Test","59817c99":"# Added the above `` and '' columns to the test to show how embarked and plcass affected to the survival #s\ntest=test.merge(Sib_Parch, on=['SibSp','Parch'], how='left')\ntest","243eba54":"test.columns","a4025c2d":"# Rename Survvied_y column to 'Family IND'\ntest['Family IND'] = test[\"Survived_y\"] \ntest.head()","97748b7c":"# Change Survived_x to Survived\ntest['Survived'] = test['Survived_x']\ntest.head()","d5612976":"# Drop Survived_y & Survived_x\ntest.drop(['Survived_x', 'Survived_y'], axis=1, inplace=True)\ntest.head()","8c61f825":"# Since Family IND has SibSp and Parch mean information, drop SibSp and Parch columns. \ntest.drop(['SibSp', 'Parch'], axis=1, inplace=True)","2e7f417b":"test[test['Cabin IND'].isna()]=test['Cabin IND'].mean()\n\ntest[test['Cabin IND'].isna()]\n\n","9bcc3c81":"test[test['Family IND'].isna()]=test['Family IND'].mean()\n\ntest[test['Family IND'].isna()]\n","874ea967":"test.info()\ntrain.info()","06678d07":"test.head()","ae6f4ed7":"X_train = train.drop('Survived', axis=1)\nY_train = train['Survived']\nX_test = test.drop('Survived', axis=1)\nprint('X_train shape:', X_train.shape)\nprint('Y_train shape:', Y_train.shape)\nprint('X_test shape:', X_test.shape)","a2bbc09f":"X_test.head()","6e0dff2c":"logreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log","99efe94a":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","2d776fa6":"random_forest = RandomForestClassifier(n_estimators = 100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","2a826d51":"knn = KNeighborsClassifier(n_neighbors = 5)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","699a54a3":"\ngaussian = GaussianNB()\ngaussian.fit(X_train, Y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\nacc_gaussian","ab79c19f":"models = pd.DataFrame({\n    'Model':['Logistic Regression', 'Decision Tree','Random Forest',\n             'K-Nearest Neighbors','Gaussian Naive Bayers'],\n    'Score':[acc_log, acc_decision_tree, acc_random_forest, acc_knn, acc_gaussian]})\n\nmodels.sort_values(by='Score', ascending=False)","52bc289e":"submission = pd.DataFrame({\n    \"PassengerId\":test[\"PassengerId\"], \n    \"Survived\":Y_pred})\n\nsubmission.head()\nsubmission.info()","a02c3c65":"# Convert DataFrame to a csv file that can be uploaded\nfilename = 'Stuppy Titanic Prediction 21.csv'\n\nsubmission.to_csv(filename, index=False)\n\nprint('Saved file: ' + filename)","44b387a7":"#final_export= X_test.merge(submission, how='left', on='PassengerId')\n#final_export","63afbb00":"# Convert DataFrame to a csv file that can be uploaded\n#filename = 'Final_results.csv'\n\n#final_export.to_csv(filename, index=False)\n\n#print('Saved file: ' + filename)","047ca81c":"# Titanic Survival Prediction by the Southern Stuppy Family\n*Import necessary libraries before reading cvs files*","08cec2c4":"* Seems like older ladies survived more than any other aged folks- males had no chance compared to women.... ","aaefcd9a":"## Move on to test.csv to do the same as above. ","f4b7ec6f":"# Finding Missing information for train and test.csv","62a50d80":"## K-Nearest Neighbors","93b3dd0e":"* Identify age ranges and then concatenate sex and age range \n* Find mean survival of each combination\n* Drop the original age and sex \n\n# Let's do the same for test.csv to clean up for the document.","0811a5b6":"## Focusing on missing `Embarked` column for train.csv","5d8de37c":"## Focusing on missing `Fare` column for test.csv - only one but just in case...","b40bca3d":"* So if you got in S port, that means you died more than any other ports. (600 total - 400 died from S port)\n* What about Pclass relation of Embarked? Let's put hue= plcass\n* Seems like Q port has more third class folks, although more people died from S-port.","9fd04cf9":"# Run with different testing models \n## Logistic Regression","5c17998f":"## Let's see if the port is something to do with survival rates. Focus on- `Embarked`","6fa63bd7":"## Focusing on missing `Age` column for test.csv","e802a290":"# Let's only focus on `Sex` category- not numerical values","f5041e29":"## Focusing on missing `Cabin` column for train.csv","dae51e17":"## We need to get rid of `Survived` from the test that we added so that we can start testing!","ae3aba6a":"### Now, train.csv is so much cleaner! Although, but the below are other items we need to do...","79c71bc5":"# Let's go back to the train.csv to focus on `Age` column. What types of age groups survived? Boys or Girls? ","16dbf8a8":"### Check to make sure we filled out all the missing information for both Train and Test.csv","8e612b2f":"## Move on to `Test.csv` to fill in missing information","bfc2d495":"### Passenger Class 1 survived all the way! \n\n## Let's combine gender and passenger together to see if there are any differences","598c0597":"### Wow! You rather not to get in the Titanic if you are male!!","b4cff3c7":"### Train.csv is missing below information. \n- Cabin 687\n- Age   177\n- Embarked  2\n### Test.csv is missing below information.\n- Cabin 327\n- Age    86 \n- Fare    1\n\nWe don't want to drop them, but fill information to uterlize...","12016f22":"### Focusing on Age now \nFill missing information for Test Age column -  83 are missing","f137063a":"## Decision tree","ceee173e":"# ![image.png](attachment:eaed0610-cfaf-4df8-9080-8bcad66958aa.png)\n# This is our first machine learning model. Our results for decision and random forrest are pretty high to the point that we are concerned we made an error somehow.\n# Our prediction with these models was 100.00%\n","f07ba64d":"## Focusing on missing `Cabin` column for test.csv","14b31be4":"* Age 1 = 16 and younger\n* Age 2 = 17 and 35 years old \n* Age 3 = 36 and 50 years old\n* Age 4 = 51 and 70 years old\n* Age 5 = 71 and 98 years old\n* Age 6 = missing information, we put them as 99 years old ","02acf9c5":"## If you embarked at C port, then you survived the most....\n\n## Clean up `Name` by getting rid of their actual names, and pull their `Title` from it. Add the column as `Title`","7c2735a8":"## Checking Train and Test.csv","8d375704":"# Out come & Model Evaluation\n","6cb95e36":"\n# Find out missing information - NA information","8f63c4e9":"## Random forest","59c1d82b":"## Gaussian naive bayes","36c71ad5":"## Focusing on missing `Age` column for train.csv","8b77647c":"### We know `Cabin IND` and `Family IND` columns are missing some info. Let's fill out them with their average numbers. ","b1eb6c95":"### It does! If you have the smaller ticket # and if the Pclass is 1, you would likely be survived compared to bigger ticket numbers. ","c0b4eb17":"## Create CSV to upload to Kaggle","5682f0db":"## Move on to test.csv to do the same as the train.csv","795eb3f1":"## Good. So we filled out everything in the columns and there aren't any empty spots. \n\n## Now, clean up the columns and rows for both Train and Test.csv. This will help to read these documents later! ","d2e1dc9a":"## If you got in Passenger 1 and female, you were likely to be survived! ","46e0bdd1":"## By filling missing na as 99, you can move on to the next question. \n- Do they have parents or child(ren) ? Any siblings? \n- How much did they pay for the fare? \n- Which class were they in ? \n\n## Let's go back and forth on train and test.csv to see you can find out age, ticket, and class situations. ","4cd2266e":"## Let's focus on `Pclass` only.  "}}