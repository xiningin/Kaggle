{"cell_type":{"841a25a7":"code","0f6d422c":"code","da8c48e0":"code","f0b94a0f":"code","925243ef":"code","b5db10c2":"code","3a241fb2":"code","30b44a67":"code","bde9cc94":"code","f9e7fffb":"code","7b3b9ff2":"code","9dc9e146":"code","de9659f8":"code","edb6463a":"code","0220d47a":"code","ad41024c":"code","7e17dbe1":"code","1f8505db":"code","c5620d2d":"code","76029456":"code","aa9f4ad4":"code","d089e5f9":"code","cf3aadfb":"code","79b8c7cc":"code","5efc33a6":"code","2b137585":"code","6fd81ae2":"code","2343943c":"markdown","58e8b8e7":"markdown","e12d3f07":"markdown","a040ca55":"markdown","c884a2c8":"markdown","52205eba":"markdown","078d2bc2":"markdown","17f828ee":"markdown","f0591dd7":"markdown","96a0a327":"markdown","0b178919":"markdown","203bf53a":"markdown"},"source":{"841a25a7":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0f6d422c":"diabetes_df=pd.read_csv(\"\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv\")","da8c48e0":"diabetes_df.head()","f0b94a0f":"diabetes_df.info()","925243ef":"diabetes_df.describe().T","b5db10c2":"print(\"Number of Zeros for BMI: \",\"%\", round(len(diabetes_df[diabetes_df[\"BMI\"]==0])\/len(diabetes_df)*100,3))\nprint(\"Number of Zeros for Insulin: \",\"%\", round(len(diabetes_df[diabetes_df[\"Insulin\"]==0])\/len(diabetes_df)*100,3))\nprint(\"Number of Zeros for SkinThickness: \",\"%\", round(len(diabetes_df[diabetes_df[\"SkinThickness\"]==0])\/len(diabetes_df)*100,3))\nprint(\"Number of Zeros for BloodPressure: \",\"%\", round(len(diabetes_df[diabetes_df[\"BloodPressure\"]==0])\/len(diabetes_df)*100,3))\nprint(\"Number of Zeros for Glucose: \",\"%\", round(len(diabetes_df[diabetes_df[\"Glucose\"]==0])\/len(diabetes_df)*100,3))","3a241fb2":"diabetes_df2=diabetes_df.copy()\ndiabetes_df2[[\"Glucose\",\"BloodPressure\",\"BMI\",\"Insulin\",\"SkinThickness\"]] = diabetes_df2[[\"Glucose\",\"BloodPressure\",\n                                                                                          \"BMI\",\"Insulin\",\"SkinThickness\"]].replace(0,np.NaN)\ndiabetes_df2.isnull().sum()","30b44a67":"diabetes_df2.dropna(subset=[\"Glucose\",\"BloodPressure\",\"BMI\"],inplace=True)\ndiabetes_df2.isnull().sum()","bde9cc94":"diabetes_df2.hist(color='blue',figsize = (14,8));","f9e7fffb":"sns.countplot(\"Outcome\",data=diabetes_df2);","7b3b9ff2":"fig, axes = plt.subplots(nrows = 2,ncols = 4,figsize = (20,6))\nax = sns.boxplot(y=\"Pregnancies\",data=diabetes_df2,ax=axes[0,0])\nax = sns.boxplot(y=\"Glucose\",data=diabetes_df2,ax=axes[0,1])\nax = sns.boxplot(y=\"BloodPressure\",data=diabetes_df2,ax=axes[0,2])\nax = sns.boxplot(y=\"SkinThickness\",data=diabetes_df2,ax=axes[0,3])\nax = sns.boxplot(y=\"Insulin\",data=diabetes_df2,ax=axes[1,0])\nax = sns.boxplot(y=\"BMI\",data=diabetes_df2,ax=axes[1,1])\nax = sns.boxplot(y=\"DiabetesPedigreeFunction\",data=diabetes_df2,ax=axes[1,2])\nax = sns.boxplot(y=\"Age\",data=diabetes_df2,ax=axes[1,3])","9dc9e146":"def kdeplot_Diabetes(col,ax=None):\n\n    ax = sns.kdeplot(diabetes_df2[col][(diabetes_df2[\"Outcome\"] == 1) ],color=\"Red\",ax=ax)\n    ax = sns.kdeplot(diabetes_df2[col][(diabetes_df2[\"Outcome\"] == 0) ],color=\"Blue\",ax=ax)\n    ax.legend([\"Diabetes\",\"Not Diabetes\"],loc='upper right')\n    ax.set_ylabel('Density')\n    ax.set_xlabel(col)\n    ax.set_title(\"Distribution of \"+ col +\" by Diabetes\")","de9659f8":"fig, axes = plt.subplots(nrows = 2,ncols = 4,figsize = (22,12))\nkdeplot_Diabetes(\"Pregnancies\",ax=axes[0,0])\nkdeplot_Diabetes(\"Glucose\",ax=axes[0,1])\nkdeplot_Diabetes(\"BloodPressure\",ax=axes[0,2])\nkdeplot_Diabetes(\"SkinThickness\",ax=axes[0,3])\nkdeplot_Diabetes(\"Insulin\",ax=axes[1,0])\nkdeplot_Diabetes(\"BMI\",ax=axes[1,1])\nkdeplot_Diabetes(\"DiabetesPedigreeFunction\",ax=axes[1,2])\nkdeplot_Diabetes(\"Age\",ax=axes[1,3])","edb6463a":"def remove_outliers (data,col):\n    \n    outliers_val = data[data[col].notnull()][col].values\n    q25, q75 = np.percentile(outliers_val, 25), np.percentile(outliers_val, 75)\n    outliers_iqr = q75 - q25\n\n    outliers_cut_off = outliers_iqr * 1.5\n    outliers_lower, outliers_upper = q25 - outliers_cut_off, q75 + outliers_cut_off\n\n    outliers = [x for x in outliers_val if x < outliers_lower or x > outliers_upper]\n\n    data_new = data.drop(data[(data[col] > outliers_upper) | (data[col] < outliers_lower)].index)\n    return data_new","0220d47a":"diabetes_df3=diabetes_df2.copy()\ndiabetes_df3=remove_outliers(diabetes_df3,\"Pregnancies\")\ndiabetes_df3=remove_outliers(diabetes_df3,\"SkinThickness\")\ndiabetes_df3=remove_outliers(diabetes_df3,\"BloodPressure\")\ndiabetes_df3.shape","ad41024c":"diabetes_df3[\"Age_cat\"]=pd.qcut(diabetes_df3[\"Age\"],4)","7e17dbe1":"diabetes_df3[\"BMI_cat\"]=1\ndiabetes_df3.loc[:,'BMI_cat'] = np.where((diabetes_df3[\"BMI\"] <= 18.5),0,\n                                         np.where((diabetes_df3[\"BMI\"] <=25)& (diabetes_df3[\"BMI\"]> 18.5),1,\n                                                  np.where((diabetes_df3[\"BMI\"] <= 30)& (diabetes_df3[\"BMI\"]> 25),2,\n                                                           np.where((diabetes_df3[\"BMI\"] > 30),3,9))))","1f8505db":"diabetes_df3.drop([\"Age\",\"BMI\"],axis=1,inplace=True)","c5620d2d":"diabetes_df3_d= pd.get_dummies(diabetes_df3)\ndiabetes_df3_d.head()","76029456":"fig, ax = plt.subplots(figsize=(8,8))\nfig.suptitle('Correlation between Diabetes and features',fontsize=20)\nax=sns.heatmap(diabetes_df3_d.corr()[[\"Outcome\"]].sort_values(\"Outcome\"),vmax=1, vmin=-1, cmap=\"YlGnBu\", annot=True, ax=ax);\nax.invert_yaxis()","aa9f4ad4":"diabetes_df3_d.info()","d089e5f9":"from sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import classification_report\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import roc_auc_score,roc_curve","cf3aadfb":"X=diabetes_df3_d.drop(\"Outcome\",axis=1)\ny=diabetes_df3_d[\"Outcome\"]","79b8c7cc":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42,shuffle=True, stratify = y)","5efc33a6":"linsvc_pipe = Pipeline([\n    (\"imp\", IterativeImputer(estimator= KNeighborsRegressor())),\n    (\"scaler\", StandardScaler()),\n    (\"linsvc\", LinearSVC(random_state=42,class_weight=\"balanced\"))\n])\n\nparams={\n    \"linsvc__C\":[3,4,5,6],\n    \"linsvc__loss\": [\"hinge\",\"squared_hinge\"],\n    \"linsvc__penalty\":[\"l1\",\"l2\"]\n    \n}\n\nlinsvc_grid = GridSearchCV(linsvc_pipe, params, cv=3,n_jobs=-1)\nlinsvc_grid.fit(X_train, y_train)\nprint(\"Best Parameters for Model:  \",linsvc_grid.best_params_)\ny_pred=linsvc_grid.predict(X_train)\nprint(\"\\n\")\nprint(classification_report(y_train, y_pred))","2b137585":"fpr, tpr, thresholds =roc_curve(y_train, y_pred, pos_label=1)\nroc_auc=roc_auc_score(y_train, y_pred)\nplt.figure( figsize=(14,6))\nplt.plot(fpr, tpr, color='darkorange', label='ROC curve (AUC = %0.2f)' % roc_auc)\nplt.plot([0, 1], [0, 1], color='navy',linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC curve')\nplt.legend(loc=\"lower right\")\nplt.show()","6fd81ae2":"linsvc_pipe = Pipeline([\n    (\"imp\", IterativeImputer(estimator=KNeighborsRegressor())),\n    (\"scaler\", StandardScaler()),\n    (\"linsvc\", LinearSVC(random_state=42,class_weight=\"balanced\",\n                         C= 5,loss=\"squared_hinge\",penalty=\"l2\"))\n])\n\n\nlinsvc_pipe.fit(X_train, y_train)\ny_pred=linsvc_pipe.predict(X_test)\nprint(classification_report(y_test, y_pred))","2343943c":"# Exploratory Data Analysis","58e8b8e7":"# Feature Engineering","e12d3f07":"# Remove Outliers","a040ca55":"SkinThickness and Insulin have right skew distribution so we can use median for missing imputation or predict missing values using complex  models such as KNN or tree based algorithms.","c884a2c8":"# Parameter Tuning","52205eba":"Zero values look like uncommon.If we search about these features on the internet, We can learn that these features can't be zero so we can think them as missing values.","078d2bc2":"# Support Vector Machine Algorithm","17f828ee":"I changed zero values with NAN values.","f0591dd7":"Removed Nan values where missing ratio less than %5. SkinThickness and Insulin still have lots of missing values. I will handle them during model creation section. I dont want any data leakage.","96a0a327":"There seems to be a slight imbalance in target values.","0b178919":"Age and BMI were converted numeric to categorical variables.","203bf53a":"# Test Score"}}