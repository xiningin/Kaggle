{"cell_type":{"4b3b0ca9":"code","3a28bda2":"code","4849c1d4":"code","33607636":"code","7aecf539":"code","8d4081b9":"code","3aa57d79":"code","65ca7005":"code","f2fe03ce":"code","7a66245a":"code","d7fa8001":"code","8c03564c":"code","3241c73b":"code","408a526f":"code","13f1229f":"code","7b48286f":"code","5f3435ca":"code","9146ca06":"code","f0959b9f":"code","74a5e9ba":"code","6bf05a66":"code","8f340d13":"code","776498f7":"markdown","93290343":"markdown","03b6b8f2":"markdown","9a48049a":"markdown","6431b602":"markdown","227237e4":"markdown","0e8caa00":"markdown","5099f905":"markdown"},"source":{"4b3b0ca9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3a28bda2":"import pickle","4849c1d4":"x_train = pickle.load(open(\"\/kaggle\/input\/heberhackathon\/images_array_train.pkl\",\"rb\"))\n\ny_train = pickle.load(open(\"\/kaggle\/input\/heberhackathon\/target_train.pkl\",\"rb\"))\n\nx_test = pickle.load(open(\"\/kaggle\/input\/heberhackathon\/images_array_test.pkl\",\"rb\"))","33607636":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.layers import MaxPooling2D,Conv2D,Flatten,Dense,Activation\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model,Sequential\n","7aecf539":"num_classes = 10\nbatch_size = 25\nepochs = 20","8d4081b9":"train=np.array(x_train)\ntest=np.array(x_test)","3aa57d79":"x_train = train.astype('float32')\nx_test = test.astype('float32')\n\n# Normalize to 0 to 1 range\nx_train \/= 255\nx_test \/= 255","65ca7005":"x_train.dtype","f2fe03ce":"x_train.shape","7a66245a":"x_test.shape","d7fa8001":"y_test = to_categorical(y_train, num_classes)","8c03564c":"y_test.dtype","3241c73b":"y_test.shape","408a526f":"model = Sequential()\nmodel.add(Conv2D(32, kernel_size=(5, 5), activation='relu',  padding='same', input_shape=(28, 28, 3)))\nmodel.add(Conv2D(128, kernel_size=(5, 5), activation='relu'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='tanh'))\nmodel.add(Dense(num_classes, activation='softmax'))\n          \nmodel.summary()\n","13f1229f":"model.compile( loss='categorical_crossentropy',optimizer=\"adam\", metrics=['accuracy'])","7b48286f":"model.fit(x_train, y_test, batch_size=batch_size, epochs=epochs)","5f3435ca":"y_pred = model.predict(x_test)\nprint(\"Test loss  :\", y_pred[0])\nprint(\"Test accuracy  :\", y_pred[1])","9146ca06":"y_pred","f0959b9f":"a = []\nfor i in range(0, len(y_pred)):\n    a.append(np.argmax((y_pred[i]>0.5)*1))\ny_prediction =  np.array(a)\ny_prediction","74a5e9ba":"N =[item for item in range(0, 3000)]","6bf05a66":"s = pd.DataFrame()\ns[\"id\"] = N\ns[\"class\"] = y_prediction\ns.to_csv(\"submission17.csv\", index=False)","8f340d13":"s =pd.read_csv('submission17.csv')\ns.head()","776498f7":"**TRAIN MODEL**","93290343":"**CONVERT INTO y_test INTO CATEGORICAL VALUES**","03b6b8f2":"**IMPORT LIBRARIES**","9a48049a":"**CONVERT TRAIN DATA INTO FLOAT and SCALE**","6431b602":"**PREDICT MODEL**","227237e4":"**IMPORT DATA**","0e8caa00":"**COMPILE MODEL**","5099f905":"**MODEL**"}}