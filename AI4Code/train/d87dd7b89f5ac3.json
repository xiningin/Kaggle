{"cell_type":{"67c76897":"code","b0ab8de2":"code","d8d63c67":"code","fc185f18":"code","fa7e12d4":"code","ccee713a":"code","3e35efc7":"code","81ccbd1e":"code","a0309452":"code","a96c4f14":"code","7470bb3f":"code","3e88eb39":"code","54ff0681":"code","a32159c9":"code","ff1edf8c":"code","c7af454a":"code","ca34666a":"code","0c298a21":"code","9384aceb":"code","2d89cddb":"code","251c39bb":"code","b5f7b993":"code","bddcce74":"code","b1d255ce":"code","bbf5a871":"code","f18b13ce":"code","2f199d6e":"code","8ee356f8":"code","e5943ae2":"code","07d40cee":"code","3a6c9bac":"code","fc64080d":"code","de21df66":"code","608b6e7d":"code","36e43366":"code","a808da1d":"code","be49a583":"code","6a33ff47":"code","a1f56eb9":"code","90b56521":"code","2fcd0490":"code","b65c38de":"code","c22f3357":"code","c4bcbf13":"code","0eba8fdc":"code","b7699d9d":"code","229c6015":"code","adf49b6d":"code","186be4ae":"code","4d73adc3":"code","a7cff0da":"code","2107cc63":"code","a54e8727":"code","5977c874":"code","d60ece00":"code","fe91da05":"code","f24149d2":"code","1df939ad":"code","f9de1c5e":"code","fec0774c":"code","7ff09db1":"code","431fa0ce":"code","fdf638cc":"code","0405684e":"code","8aa2c7df":"code","4c6dafbb":"code","e0002323":"code","13200d7b":"code","ae4b92fc":"code","dc8217a6":"code","c07c234e":"code","26d81978":"code","5a8c532f":"code","ad12787c":"code","08f8bdac":"markdown","bcc0ac5a":"markdown","bbfc4bd3":"markdown","a1e26432":"markdown"},"source":{"67c76897":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b0ab8de2":"train_ = pd.read_csv('..\/input\/train.csv', index_col = \"id\")","d8d63c67":"test_ = pd.read_csv('..\/input\/test.csv', index_col = \"id\")","fc185f18":"train_.head()","fa7e12d4":"train_.dtypes","ccee713a":"train_.shape","3e35efc7":"train_['atom_index_0'] = train_.atom_index_0.astype('category')\ntrain_['atom_index_1'] = train_.atom_index_1.astype('category')","81ccbd1e":"test_['atom_index_0'] = test_.atom_index_0.astype('category')\ntest_['atom_index_1'] = test_.atom_index_1.astype('category')","a0309452":"train_.describe(include = 'all')","a96c4f14":"dipole_ = pd.read_csv('..\/input\/dipole_moments.csv')\n# magnetic_ = pd.read_csv('..\/input\/mag')\npotential_ = pd.read_csv('..\/input\/potential_energy.csv')\nscalar_ = pd.read_csv('..\/input\/scalar_coupling_contributions.csv')","7470bb3f":"scalar_['atom_index_0'] = scalar_.atom_index_0.astype('category')\nscalar_['atom_index_1'] = scalar_.atom_index_1.astype('category')","3e88eb39":"scalar_.dtypes","54ff0681":"potential_.head()","a32159c9":"train_dm_ = pd.merge(train_, dipole_, how = 'inner', on = 'molecule_name')\ntrain_dm_pe = pd.merge(train_dm_, potential_, how = 'inner', on = 'molecule_name')\ntrain_dm_pe_s = pd.merge(train_dm_pe, scalar_, how = 'inner', on = ['molecule_name', 'atom_index_0', 'atom_index_1', 'type'])","ff1edf8c":"train_dm_pe_s.head()","c7af454a":"train_dm_pe_s.shape","ca34666a":"import seaborn as sns\nsns.set(rc={'figure.figsize':(15,12)})","0c298a21":"sns.heatmap(train_dm_pe_s.corr(), annot=True, fmt=\"f\")","9384aceb":"sns.regplot(x = \"fc\", y = \"scalar_coupling_constant\", data = train_dm_pe_s)","2d89cddb":"sns.lmplot(x = \"fc\", y = \"scalar_coupling_constant\", data = train_dm_pe_s)","251c39bb":"sns.lmplot(x = \"dso\", y = \"scalar_coupling_constant\", data = train_dm_pe_s)","b5f7b993":"sns.lmplot(x = \"fc\", y = \"scalar_coupling_constant\", col = \"type\", col_wrap = 3, data = train_dm_pe_s)","bddcce74":"sns.lmplot(x = \"fc\", y = \"scalar_coupling_constant\", col = \"atom_index_0\", col_wrap = 2, data = train_dm_pe_s)","b1d255ce":"sns.lmplot(x = \"fc\", y = \"scalar_coupling_constant\", col = \"atom_index_1\", col_wrap = 2, data = train_dm_pe_s)","bbf5a871":"test_.describe(include = 'all')","f18b13ce":"train_['scalar_coupling_constant'].describe().apply(lambda x: format(x, 'f'))","2f199d6e":"train_mol = train_.loc[train_['molecule_name'] == 'dsgdb9nsd_042139']","8ee356f8":"train_mol.shape","e5943ae2":"ax = sns.heatmap(pd.crosstab(train_.atom_index_0, train_.type), annot = True, fmt = \"d\")","07d40cee":"ax = sns.heatmap(pd.crosstab(test_.atom_index_0, test_.type), annot = True, fmt = \"d\")","3a6c9bac":"ay = sns.heatmap(pd.crosstab(train_.atom_index_1, train_.type), annot = True, fmt = \"d\")","fc64080d":"ay = sns.heatmap(pd.crosstab(test_.atom_index_1, test_.type), annot = True, fmt = \"d\")","de21df66":"sns.set(rc={'figure.figsize':(25,15)})\naz = sns.heatmap(pd.crosstab(train_.atom_index_1, train_.atom_index_0), annot = True, fmt = \"d\")","608b6e7d":"az = sns.heatmap(pd.crosstab(test_.atom_index_1, test_.atom_index_0), annot = True, fmt = \"d\")","36e43366":"train_.tail()","a808da1d":"test_.head()","be49a583":"# library\nimport matplotlib.pyplot as plt\nfrom matplotlib_venn import venn2","6a33ff47":"venn2([set(train_.atom_index_0), set(test_.atom_index_0)])","a1f56eb9":"set(train_.atom_index_0).symmetric_difference(set(test_.atom_index_0))\n# set(train_.atom_index_0).intersection(set(test_.atom_index_0))","90b56521":"venn2([set(train_.atom_index_1), set(test_.atom_index_1)])\n# set(train_.atom_index_1).intersection(set(test_.atom_index_1))","2fcd0490":"venn2([set(train_.type), set(test_.type)])","b65c38de":"train_grp_all = pd.DataFrame(train_.groupby(['molecule_name', 'atom_index_0', 'atom_index_1', 'type'])['scalar_coupling_constant'].mean())\ntrain_grp_mn = pd.DataFrame(train_.groupby(['molecule_name'])['scalar_coupling_constant'].mean())\ntrain_grp_ai0 = pd.DataFrame(train_.groupby(['atom_index_0'])['scalar_coupling_constant'].mean())\ntrain_grp_ai1 = pd.DataFrame(train_.groupby(['atom_index_1'])['scalar_coupling_constant'].mean())\ntrain_grp_t = pd.DataFrame(train_.groupby(['type'])['scalar_coupling_constant'].mean())","c22f3357":"train_grp_ai0.reset_index(level = 0, inplace = True)\ntrain_grp_ai0.head()\ntrain_grp_t.reset_index(level = 0, inplace = True)\ntrain_grp_t.head()","c4bcbf13":"ai0_0 = train_.loc[train_['atom_index_0'] == 0]","0eba8fdc":"ai0_0","b7699d9d":"# sns.set_style(\"whitegrid\")\nsns.distplot(train_grp_t.scalar_coupling_constant, rug = True)\nplt.style.use(\"dark_background\")","229c6015":"sns.set_palette('colorblind')\nsns.kdeplot(train_grp_t.scalar_coupling_constant, shade=True, color = \"yellow\", alpha = 0.9)","adf49b6d":"sns.kdeplot(train_grp_ai0.scalar_coupling_constant)","186be4ae":"sns.kdeplot(train_grp_ai1.scalar_coupling_constant)","4d73adc3":"sns.boxplot(x = train_.type, y = train_.scalar_coupling_constant)","a7cff0da":"sns.boxplot(x = train_.atom_index_0, y = train_.scalar_coupling_constant)","2107cc63":"sns.boxplot(x = train_.atom_index_1, y = train_.scalar_coupling_constant)","a54e8727":"h = sns.jointplot(x = train_grp_ai0.scalar_coupling_constant, y = train_grp_ai1.scalar_coupling_constant, kind = \"kde\")\nh.set_axis_labels('train_grp_ai0.scalar_coupling_constant', 'train_grp_ai1.scalar_coupling_constant', fontsize=16)","5977c874":"train_.loc[train_['molecule_name'] == 'dsgdb9nsd_042139']","d60ece00":"structure_ = pd.read_csv('..\/input\/structures.csv')","fe91da05":"structure_.loc[structure_['molecule_name'] == 'dsgdb9nsd_042139']","f24149d2":"import numpy as np\nimport pandas\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder\nfrom sklearn import preprocessing\n\nimport graphviz\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ntry:\n    # To enable interactive mode you should install ipywidgets\n    # https:\/\/github.com\/jupyter-widgets\/ipywidgets\n    from ipywidgets import interact, SelectMultiple\n    INTERACTIVE = True\nexcept ImportError:\n    INTERACTIVE = False","1df939ad":"def get_train_data():\n    # load dataset\n    dataset_train = pandas.read_csv(\"..\/input\/train.csv\")\n    dataset_test = pandas.read_csv(\"..\/input\/test.csv\")\n    #['id' 'molecule_name' 'atom_index_0' 'atom_index_1' 'type' 'scalar_coupling_constant']\n    cat_columns =['molecule_name', 'type']\n    label_encoders = {}\n    for col in cat_columns:\n        new_le = LabelEncoder()\n        dataset_train[col] = new_le.fit_transform(dataset_train[col])\n        dataset_test[col] = new_le.fit_transform(dataset_test[col])\n    X_train = pandas.DataFrame(dataset_train, columns=['molecule_name','atom_index_0','atom_index_1','type'])\n    X_test = pandas.DataFrame(dataset_test, columns=['id','molecule_name','atom_index_0','atom_index_1','type'])\n    Y_train = dataset_train['scalar_coupling_constant']\n    return X_train,X_test,Y_train","f9de1c5e":"min_max_scaler = preprocessing.MinMaxScaler()\nX_train,X_test_with_id,Y_train = get_train_data()","fec0774c":"X_train.head()","7ff09db1":"X_test_with_id.head()","431fa0ce":"Y_train.head()","fdf638cc":"X_train = min_max_scaler.fit_transform(X_train)\n# 0\t1\t0\t0 the first row in the pandas dataframe becomes scaled numpy array \n# [0.        , 0.03571429, 0.        , 0.        ],\nX_test = pandas.DataFrame(X_test_with_id, columns=['molecule_name','atom_index_0','atom_index_1','type'])\nX_test = min_max_scaler.fit_transform(X_test)","0405684e":"X_train.shape","8aa2c7df":"X_train[:10]","4c6dafbb":"x_train, x_test, y_train, y_test = train_test_split(X_train, Y_train, test_size=0.1, random_state=42)\nprint(x_train[0:5])\nprint(x_test[0:5])","e0002323":"evals_result = {}\n#Parameters for LightGBM Model\nparams_lgb = {'num_leaves': 5,\n          'min_child_samples': 79,\n          'objective': 'regression',\n          'max_depth': 9,\n          'learning_rate': 0.1,\n          \"boosting_type\": \"gbdt\",\n          \"subsample_freq\": 1,\n          \"subsample\": 0.9,\n          \"bagging_seed\": 47,\n          \"metric\": ['mae'],\n          \"verbosity\": -1,\n          'reg_alpha': 0.1302650970728192,\n          'reg_lambda': 0.3603427518866501,\n          'colsample_bytree': 1.0,\n          'n_estimators':1500}\n\n\nimport lightgbm as lgb\nlgtrain = lgb.Dataset(x_train, label=y_train)\nlgval = lgb.Dataset(x_test, label=y_test)\nmodel_lgb = lgb.train(params_lgb, \n                      lgtrain, 10000, \n                      valid_sets=[lgtrain, lgval], \n                      verbose_eval=500,\n                      evals_result=evals_result)\ny_out = model_lgb.predict(X_test)","13200d7b":"def render_metric(metric_name):\n    ax = lgb.plot_metric(evals_result, metric=metric_name, figsize=(15, 10))\n    plt.show()","ae4b92fc":"if INTERACTIVE:\n    # create widget to switch between metrics\n    interact(render_metric, metric_name=params_lgb['metric'])\nelse:\n    render_metric(params['metric'][0])","dc8217a6":"def render_plot_importance(importance_type, max_features=10,\n                           ignore_zero=True, precision=4):\n    ax = lgb.plot_importance(model_lgb, importance_type=importance_type,\n                             max_num_features=max_features,\n                             ignore_zero=ignore_zero, figsize=(12, 8),\n                             precision=precision)\n    plt.show()","c07c234e":"if INTERACTIVE:\n    # create widget for interactive feature importance plot\n    interact(render_plot_importance,\n             importance_type=['split', 'gain'],\n             max_features=(1, X_train.shape[-1]),\n             precision=(0, 10))\nelse:\n    render_plot_importance(importance_type='split')","26d81978":"def render_tree(tree_index, show_info, precision=4):\n    show_info = None if 'None' in show_info else show_info\n    return lgb.create_tree_digraph(model_lgb, tree_index=tree_index,\n                                   show_info=show_info, precision=precision)","5a8c532f":"if INTERACTIVE:\n    # create widget to switch between trees and control info in nodes\n    interact(render_tree,\n             tree_index=(0, model_lgb.num_trees() - 1),\n             show_info=SelectMultiple(  # allow multiple values to be selected\n                 options=['None',\n                          'split_gain',\n                          'internal_value',\n                          'internal_count',\n                          'leaf_count'],\n                 value=['None']),\n             precision=(0, 10))\n    tree = None\nelse:\n    tree = render_tree(84, ['None'])\ntree","ad12787c":"my_submission = pandas.DataFrame({'id': X_test_with_id.id, 'scalar_coupling_constant': y_out})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission.csv', index=False)","08f8bdac":"Refer here\nhttps:\/\/www.kaggle.com\/joydeb28\/ml-models","bcc0ac5a":"![](https:\/\/deelyee.files.wordpress.com\/2011\/01\/i_hate_organic_chemistry_by_laughingwarlock.jpg?w=880&h=312&crop=1)","bbfc4bd3":"This is a **Work in progress** I will write the narrative and develop it further soon. Stay tuned....","a1e26432":"**This is a disjoint set.**"}}