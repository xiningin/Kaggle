{"cell_type":{"337927d7":"code","153bb296":"code","2dd0ff51":"code","0f790eaa":"code","03d16531":"code","ca36cbde":"code","452dea17":"code","ca137d8a":"code","b1755b5b":"code","e7de2b95":"code","c5601822":"code","a43bba6d":"code","76dc8d2d":"code","413370d2":"code","42130ee9":"markdown","c2ad3412":"markdown","1be10ae3":"markdown","f7f2fad6":"markdown","3d358f2c":"markdown","87b70310":"markdown","dbc93d89":"markdown","cbb7cb7b":"markdown","4ac9ca47":"markdown","ae12b871":"markdown"},"source":{"337927d7":"from numpy import array\nfrom keras.models import Sequential\nfrom keras.layers import Flatten, Dense\nfrom keras.layers.convolutional import Conv1D, MaxPooling1D","153bb296":"x = array([[10, 20, 30], [20, 30, 40], [30, 40, 50], [40, 50, 60]])\ny = array([40,50,60,70])","2dd0ff51":"x = x.reshape((x.shape[0], x.shape[1], 1))","0f790eaa":"model = Sequential()\nmodel.add(Conv1D(filters=64, kernel_size=2, activation='relu', input_shape=(3, 1)))\nmodel.add(MaxPooling1D(pool_size=2))\nmodel.add(Flatten())\nmodel.add(Dense(50, activation='relu'))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')\nmodel.fit(x, y, epochs=1000, verbose=1)","03d16531":"ip = array([50, 60, 70])\nip =ip.reshape((1, 3, 1))\ny_pred = model.predict(ip, verbose=1)\nprint(y_pred)","ca36cbde":"x = array([[5,10,15], [10,15,20], [20,25,30], [35,40,45]])\ny = array([20,25,35,50])","452dea17":"x = x.reshape((x.shape[0], x.shape[1], 1))","ca137d8a":"model = Sequential()\nmodel.add(Conv1D(filters=64, kernel_size=2, activation='relu', input_shape=(3,1)))\nmodel.add(MaxPooling1D(pool_size=2))\nmodel.add(Flatten())\nmodel.add(Dense(50, activation='relu'))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')\nmodel.fit(x, y, epochs=1000, verbose=2)","b1755b5b":"ip = array([75,80,85])\nip =ip.reshape((1, 3, 1))\ny_pred = model.predict(ip, verbose=1)\nprint(y_pred)","e7de2b95":"from keras.layers import LSTM\nfrom sklearn.metrics import mean_squared_error","c5601822":"model = Sequential()\nmodel.add(LSTM(4, input_shape=(3,1)))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error',optimizer='adam')\nmodel.fit(x,y,epochs=1000,batch_size=1,verbose=2)","a43bba6d":"ip = array([50,55,60])\nip =ip.reshape((1, 3, 1))\ny_pred = model.predict(ip, verbose=1)\nprint(y_pred)","76dc8d2d":"X = array([[10, 20, 30], [20, 30, 40], [30, 40, 50], [40, 50, 60]])\ny = array([40, 50, 60, 70])\n# reshape from [samples, timesteps] into [samples, timesteps, features]\nX = X.reshape((X.shape[0], X.shape[1], 1))\n# define model\nmodel = Sequential()\nmodel.add(LSTM(4, input_shape=(3,1)))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error',optimizer='adam')\nmodel.fit(X,y,epochs=1000,batch_size=1,verbose=2)","413370d2":"# demonstrate prediction\nx_input = array([40,50,60])\nx_input = x_input.reshape((1, 3, 1))\nyhat = model.predict(x_input, verbose=0)\nprint(yhat)","42130ee9":"This is really shocking as i heard and learn that RNNs work well for sequential data and helps to predicT the next value in a sequence. But this is not the case here! Suggest your opinions guys and do UPVOTE!","c2ad3412":"CASE_2","1be10ae3":"# Build a CNN model with 1 Convolutional and MaxPooling layer","f7f2fad6":"Let's try with 5s table now!","3d358f2c":"# First, we will go with CNN(Convolutional Neural Netoworks) by creating a sample dataset of sequences.","87b70310":"# Recurrent Neural Networks were overpowered by a simple CNN model! So, i guess that for predicting next digits in a set of numbers, it is best to go with CNNs. ","dbc93d89":"# Let's go into the world of RNNs and LSTMs","cbb7cb7b":"Note: Reshape from [samples, timesteps] into [samples, timesteps, features]","4ac9ca47":"Test_Data or Driver code to test your model","ae12b871":"# Let's check for different types of Numerical Sequences!"}}