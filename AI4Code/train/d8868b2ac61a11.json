{"cell_type":{"47791414":"code","065696aa":"code","fc528176":"code","723070e3":"code","b17ad2f7":"code","ad3a6698":"code","b94199d2":"code","fad1035c":"code","201c5cab":"code","4464d778":"code","f40e9fd6":"code","b3fbe32c":"code","b9919deb":"code","7e4fc76e":"code","7c2de38c":"code","0ad0d1f8":"code","cc3c3dd0":"code","87827aa8":"code","2b131cdb":"code","187fad35":"code","6f30e09d":"code","d3e044f7":"code","9ca640cf":"code","f1f1c9c5":"code","d20a2b4c":"markdown","b3cb252f":"markdown","6cde24e0":"markdown","fa850b64":"markdown","9e103c3f":"markdown","888a6862":"markdown","67d05c1c":"markdown","0652a9f4":"markdown","78392a16":"markdown","a2ca1375":"markdown","10bc2423":"markdown","b5449945":"markdown","67cb32f5":"markdown","91116b4d":"markdown","925ba336":"markdown","dbd3d6cf":"markdown","cc65b1c0":"markdown","dc1e03cc":"markdown","19fb58f6":"markdown","0711ee1f":"markdown","b2e56e89":"markdown","3b76c455":"markdown","9afba530":"markdown","0cd76f3d":"markdown","904e5fc4":"markdown","4bdb0a65":"markdown"},"source":{"47791414":"#import all required libraries and more\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","065696aa":"#read the calendar.csv file to pandas dataframe named 'df_calendar'\ndf_calendar = pd.read_csv('..\/input\/seattle\/calendar.csv')\n\n#read the listings.csv file to pandas dataframe named 'df_listings'\ndf_listings = pd.read_csv('..\/input\/seattle\/listings.csv')\n\n#read the reviews.csv file to pandas dataframe named 'df_reviews'\ndf_reviews = pd.read_csv('..\/input\/seattle\/reviews.csv')","fc528176":"#check out the first five rows of the recently defined datasets to gauge what is inside each file and what can be useful\ndf_calendar.head()","723070e3":"df_listings.head()","b17ad2f7":"df_reviews.head()","ad3a6698":"#find the metadata of the 'df_calendar' dataset\ndf_calendar.info()","b94199d2":"#find the which of columns that have null values and how many and how many of them. \ndf_calendar.isnull().sum()","fad1035c":"df_calendar['listing_id'] = df_calendar['listing_id'].astype(str)","201c5cab":"df_calendar['price'].fillna(0, inplace=True)\n\n#defining this function here is useful since it will be used again for the same purpose, i.e. to clean listings.csv\ndef remove_symbol(price):\n    \"\"\"remove the symbols ['$', ','] in price\"\"\"\n    if type(price) is str:\n        return re.sub(\"[\\$,]\",'',price)\n    return price\n\ndf_calendar['price'] = df_calendar.price.apply(remove_symbol)\ndf_calendar['price'] = df_calendar['price'].astype(float)","4464d778":"df_calendar.info()","f40e9fd6":"df_listings.info()","b3fbe32c":"df_listings_new = df_listings[['id','accommodates','bathrooms','bedrooms','beds','price','extra_people','minimum_nights','review_scores_rating','instant_bookable']]","b9919deb":"df_listings_new.info()","7e4fc76e":"df_listings_new.isnull().sum()","7c2de38c":"df_listings_new['id'] = df_listings_new['id'].astype(str)\n\ndf_listings_new['price'].fillna(0, inplace=True)\n\ndf_listings_new['price'] = df_listings_new.price.apply(remove_symbol)\n\ndf_listings_new['price'] = df_listings_new['price'].astype(float)\n\ndf_listings_new['review_scores_rating'].fillna(0, inplace=True)\ndf_listings_new['bathrooms'].fillna(0, inplace=True)\ndf_listings_new['beds'].fillna(0, inplace=True)\ndf_listings_new['price'].fillna(0, inplace=True)\ndf_listings_new['bedrooms'].fillna(0, inplace=True)","0ad0d1f8":"df_listings_new.info()","cc3c3dd0":"from sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nimport matplotlib.pyplot as plt\nfrom math import sqrt\nfrom sklearn.metrics import mean_squared_error","87827aa8":"X = df_listings_new[['accommodates','bathrooms','bedrooms','beds','minimum_nights','review_scores_rating']]\ny = df_listings_new[['price']]","2b131cdb":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=40)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","187fad35":"#creating a sequential model\nmodel = Sequential()\n\n#add a dense layer of 128 neurons, with relu as the activation function, along with that, the input_dim wil be set to 6, since there are 6 inital parameters as outputed in by the previous block of code.\nmodel.add(Dense(128, activation='relu', input_dim=6))\n\n#add 2 more hidden dense layers, first with 64 neurons and the next with 32 neurons, using relu activation\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(32, activation='relu'))\n          \n#add the output layer with 1 neuron, since our output is only the 'price'\nmodel.add(Dense(1))\n\nmodel.summary()","6f30e09d":"#compile the model using the mean squared error as a loss because we are making a regression model\nmodel.compile(optimizer='adam', loss='mse', metrics=['mse'])\n\n#store the trained model (model.fit) inside a history for callbacks in the future or references and further training to make it more accurate\nhistory = model.fit(X_train, y_train, epochs = 50)\n\n#get predictions from the trained and the test datasets\npreds_train = model.predict(X_train)\npreds = model.predict(X_test)\n\n#round these predictions sice they are the price of renting the specific airbnb location, and price cannot go deeper than cents (hence, round to 2 places)\npreds_round = np.round(preds,2)\npreds_train_round = np.round(preds_train,2)\n\n#Output the predictions made by the model\nprint('Here are the predictions of the prices: \\n', preds_round)\n\n#The two lines of code below give the RMSE (root mean squared error) of the trained data and the predicted data. The closer the two values are means that the better the neural network\/keras model is working.\nprint(np.sqrt(mean_squared_error(y_train, preds_train_round)))\nprint(np.sqrt(mean_squared_error(y_test, preds_round)))","d3e044f7":"#Assign the actual and predicted values of the price of the listings to a new dataframe, called 'price'. This can be output showing the difference between the actual and the predicted list of prices so that the user can gauge the accuracy of the neural network.\nprice = np.concatenate([y_test, preds_round], axis=1)\nprint ('This array contains the actual, price vs the predicted price based on the keras model.\\n', price)","9ca640cf":"plt.figure(figsize=(10,10))\nplt.plot(price, marker = '.', linestyle = '' )","f1f1c9c5":"plt.figure(figsize=(10,10))\nplt.plot(y_test - preds_round, marker='1', linestyle='')","d20a2b4c":"* Difference between actual values and predicted values. The trend almost sits flat at 0, with a few variations here and there which can be further reduced by strengthening the keras deep learning model and further cleaning the raw data properly.","b3cb252f":"Make 2 new datasets out of the 'df_listings_new' dataset. These will now finally be used by the keras model.\n\n'X' will contain the fields used to make the prediction, and 'y' will contain the target, i.e. the price of the listing.","6cde24e0":"Import the datasets into relative pandas variables.","fa850b64":"Import all the required libraries for building the keras model and any future, additional work that needs to be done.","9e103c3f":"Compile the model.","888a6862":"Remove the null values, along with changing the relative dattypes to either floats or integers, which can be easily used by the keras deep learning model.","67d05c1c":"Split the dataset into train and test, using the 'sklearn' library.\n\nThe train dataset would be used to train the model on how to predict the price, whereas the test dataset will be used to test this model.\n\n*The 70-30 split is suggested for sample data like this by most experts and fellow deep learning coders, since it is a powerful way with ample of data to train the model, as well as enough to test it out wiht no new data.*","0652a9f4":"-----------------------------------------------------------------------------------------------------------------------------------------------------","78392a16":"Charts showing successful price prediction on test data, using the keras-based model.","a2ca1375":"-----------------------------------------------------------------------------------------------------------------------------------------------------","10bc2423":"-----------------------------------------------------------------------------------------------------------------------------------------------------","b5449945":"* Direct reference between actual values ('y_test') in orange, and predicted values ('preds_round') in blue. This plot clearly shows that the trend line of the 2 datasets is almost the same, which implies that the predictive model was successful and works correctly.","67cb32f5":"# Clean Datasets","91116b4d":"Check the updated data types.","925ba336":"Check updated info.","dbd3d6cf":"Check the updated data types again.","cc65b1c0":"Choose the useful columns only, and store them in separate dataset.\n\n*Here, only a few columns are required which will be used in the prediction model. Therefore, these columns are copied onto a new dataframe, which will be worked upon rather than 'df_listings'.*","dc1e03cc":"# Deep Learning","19fb58f6":"Convert the relevant column data to their proper data types.\n\n*This needs to do this since the keras deep learning model that is going to be used later, will only be looking at non-null values which are either integers or floats, since these values have to be entered through a set hidden layers which will perform mathematical operations on them. There will be multiple layers having multiple neurons.*","0711ee1f":"**calendar.csv Cleansing**","b2e56e89":"*Basically repeating the same steps as cleaning 'df_calendar.*","3b76c455":"**listings.csv Cleansing**","9afba530":"# Charts","0cd76f3d":"# Import Datasets","904e5fc4":"Import required pandas and numpy libraries.","4bdb0a65":"While creating the model, activation function - 'relu' is used. This is done because, relu, gives out the output of 0 if the input is negative and there is no change if its not negative. Thus, it is the perfect activation function for the purpose of predicting the price of something. The price of a service like airbnb's room rental cannot be negative and if we use most other functions like 'sigmoid', 'tanh, etc because they all give of output of somewhere between -1 to 1. This doesn't make sense in the case of prices."}}