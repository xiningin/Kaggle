{"cell_type":{"32900e20":"code","48c8833a":"code","85714d47":"code","27e1aa54":"code","7716290b":"code","38dd9ff1":"code","e0a73189":"code","562f09f2":"code","78170fe2":"code","af1b470c":"code","c42b7141":"code","0c7c5dc4":"code","70547835":"code","cf250552":"code","0191b9f2":"code","de356a82":"code","2c34d095":"code","63b3f20e":"code","106e9ae1":"code","dc416bb4":"code","24978dbd":"markdown","7d28648b":"markdown","ca2128bd":"markdown","fc3fc46f":"markdown","3ba98149":"markdown","9686a9cb":"markdown","c1d3da1e":"markdown","737839ff":"markdown","fb08993e":"markdown","43f73d2a":"markdown","e49d2a62":"markdown","e6d5e2c5":"markdown"},"source":{"32900e20":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","48c8833a":"import tensorflow as tf\nprint(tf.__version__)","85714d47":"import pandas as pd\nreader = pd.read_csv(\"\/kaggle\/input\/sunspots\/Sunspots.csv\")\nreader.head()","27e1aa54":"reader.describe()","7716290b":"cols = [\"Time\",\"Date\", \"MMTSN\"]\nreader.columns = cols\n\nreader.columns","38dd9ff1":"time_step = []\nsunspots = []\n\nfor item in reader[\"MMTSN\"]:\n    sunspots.append(item)\n\nfor item in reader[\"Time\"]:\n    time_step.append(item)\n    \nseries = np.array(sunspots)\ntime = np.array(time_step)\n\nprint(series[:5],time[:5], sep=\"\\n\\n\")","e0a73189":"import numpy as np\nimport matplotlib.pyplot as plt\ndef plot_series(time, series, format=\"-\", start=0, end=None):\n    plt.plot(time[start:end], series[start:end], format)\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Value\")\n    plt.grid(True)\n\nplt.figure(figsize=(10, 6))\nplot_series(time, series)","562f09f2":"split_time = 3000\ntime_train = time[:split_time]\nx_train = series[:split_time]\ntime_valid = time[split_time:]\nx_valid = series[split_time:]\n\nwindow_size = 30\nbatch_size = 32\nshuffle_buffer_size = 1000","78170fe2":"#x_train","af1b470c":"def windowed_dataset(series, windoe_size, batch_size, shuffle_size):\n    series = tf.expand_dims(series,axis=-1)\n    ds = tf.data.Dataset.from_tensor_slices(series)\n    ds = ds.window(window_size+1, shift = 1, drop_remainder=True)\n    ds = ds.flat_map(lambda w:w.batch(window_size + 1))\n    ds = ds.shuffle(shuffle_size)\n    ds = ds.map(lambda w: (w[:-1], w[1:]))\n    return ds.batch(batch_size).prefetch(1)","c42b7141":"def model_forecast(model, series, window_size):\n    ds = tf.data.Dataset.from_tensor_slices(series)\n    ds = ds.window(window_size, shift=1, drop_remainder=True)\n    ds = ds.flat_map(lambda w: w.batch(window_size))\n    ds = ds.batch(32).prefetch(1)\n    forecast = model.predict(ds)\n    return forecast","0c7c5dc4":"tf.keras.backend.clear_session()\ntf.random.set_seed(51)\nnp.random.seed(51)\nwindow_size = 64\nbatch_size = 256\n\ntrain_set = windowed_dataset(x_train, window_size, batch_size, shuffle_buffer_size)\nprint(train_set)\nprint(x_train.shape)\n\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv1D(filters=32, kernel_size=5,strides=1, padding=\"causal\", activation=\"relu\",input_shape=[None, 1]),\n    tf.keras.layers.LSTM(64, return_sequences=True),\n    tf.keras.layers.LSTM(64, return_sequences=True),\n    tf.keras.layers.Dense(30, activation=\"relu\"),\n    tf.keras.layers.Dense(10, activation=\"relu\"),\n    tf.keras.layers.Dense(1),\n    tf.keras.layers.Lambda(lambda x: x * 400)\n])","70547835":"lr_schedule = tf.keras.callbacks.LearningRateScheduler(lambda epoch: 1e-8 * 10**(epoch \/ 20))\noptimizer = tf.keras.optimizers.SGD(learning_rate=1e-8, momentum=0.9)\nmodel.compile(loss=tf.keras.losses.Huber(),\n              optimizer=optimizer,\n              metrics=[\"mae\"])\nhistory = model.fit(train_set, epochs=100, callbacks=[lr_schedule])","cf250552":"plt.semilogx(history.history[\"lr\"], history.history[\"loss\"])\nplt.axis([1e-8, 1e-4, 0, 60])","0191b9f2":"tf.keras.backend.clear_session()\ntf.random.set_seed(51)\nnp.random.seed(51)\n\nwindow_size=60\nbatch_size=100\n\ntrain_set = windowed_dataset(x_train, window_size, batch_size, shuffle_buffer_size)\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Conv1D(filters=60, kernel_size=5,strides=1, padding=\"causal\",activation=\"relu\",input_shape=[None, 1]),\n  tf.keras.layers.LSTM(60, return_sequences=True),\n  tf.keras.layers.LSTM(60, return_sequences=True),\n  tf.keras.layers.Dense(30, activation=\"relu\"),\n  tf.keras.layers.Dense(10, activation=\"relu\"),\n  tf.keras.layers.Dense(1),\n  tf.keras.layers.Lambda(lambda x: x * 400)\n])\n\n\noptimizer = tf.keras.optimizers.SGD(learning_rate=1e-5, momentum=0.9)\nmodel.compile(loss=tf.keras.losses.Huber(),\n              optimizer=optimizer,\n              metrics=[\"mae\"])\nhistory = model.fit(train_set,epochs=500)","de356a82":"rnn_forecast = model_forecast(model, series[..., np.newaxis], window_size)\nrnn_forecast = rnn_forecast[split_time - window_size:-1, -1, 0]","2c34d095":"plt.figure(figsize=(10, 6))\nplot_series(time_valid, x_valid)\nplot_series(time_valid, rnn_forecast)","63b3f20e":"tf.keras.metrics.mean_absolute_error(x_valid, rnn_forecast).numpy()","106e9ae1":"import matplotlib.image  as mpimg\nimport matplotlib.pyplot as plt\n\nloss=history.history['loss']\n\nepochs=range(len(loss)) # Get number of epochs\n\n# Plot training and validation loss per epoch\nplt.plot(epochs, loss, 'r')\nplt.title('Training loss')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend([\"Loss\"])\n\nplt.figure()\n\nzoomed_loss = loss[200:]\nzoomed_epochs = range(200,500)\n\n\n# Plot training and validation loss per epoch\nplt.plot(zoomed_epochs, zoomed_loss, 'r')\nplt.title('Training loss')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend([\"Loss\"])\n\nplt.figure()","dc416bb4":"print(rnn_forecast)","24978dbd":"## Let's plot learning rate","7d28648b":"## Now forecast the model","ca2128bd":"## Now split the data","fc3fc46f":"create a model and use sequential layers to the model. The lambda layers will help performing arbitary operations on the model.\nwe've used two LSTM layers with both return_sequences = True so that they can be fed into the Dense layers next, feel free to play with neurons in Dense layers but for now I've set 30,10,1","3ba98149":"**Let's retrain with the least learning rate that can be seen from the graph. check the lowest trough**","9686a9cb":"## Let's Plot them","c1d3da1e":"## for now, I'll just train with 100 epochs to find the perfect learning rate instead of just setting it as anything default","737839ff":"The mean absolute error is not very close to 0 but we can see it's better than with just LSTM or just Convolutions which would be over 20","fb08993e":"make a function for windowed data set","43f73d2a":"**first check that tensorflow version is abover 2.0.0**","e49d2a62":"### Now let's check Mean Absolute Error","e6d5e2c5":"### Download the data and have a look at it"}}