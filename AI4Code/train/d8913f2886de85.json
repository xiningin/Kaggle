{"cell_type":{"eca9e29e":"code","effa79c6":"code","38474397":"code","2eb30844":"code","f5fdcd9a":"code","3d95fec9":"code","ccfb9a5a":"code","654f930c":"code","65947317":"code","82359f35":"markdown","d92dacba":"markdown","6a1192cf":"markdown","ee2989bc":"markdown","8d53992d":"markdown","91239500":"markdown","a8cc6594":"markdown","2762e990":"markdown"},"source":{"eca9e29e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","effa79c6":"# Train DataFrame\ntrain_df = pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_train.csv')\n# Test DataFrame\ntest_df = pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_test.csv')\n# Check shape of each\nprint('Train Shape: ', train_df.shape)\nprint('Test Shape: ', test_df.shape)","38474397":"# X_train, normalized\nX_train = train_df.iloc[:,1:].values\/255.0\n# y_train, labels\ny_train = train_df.iloc[:,0]\n# X_test, normalized\nX_test= test_df.iloc[:,1:].values\/255.0\n# X_test, labels\ny_test= test_df.iloc[:,0]\n","2eb30844":"# X_train\nX_train = X_train.reshape(-1, 28*28)\n# X_test\nX_test = X_test.reshape(-1, 28*28)","f5fdcd9a":"# Import TensorFlow \nimport tensorflow as tf\n# Define model type, Sequential\nmodel = tf.keras.models.Sequential(name = 'Fashion_MNIST')\n# Define input fully connected layer\nmodel.add(tf.keras.layers.Dense(units=128, activation='relu', input_shape=(X_train.shape[1], )))\n# Add dropout layer\nmodel.add(tf.keras.layers.Dropout(0.2))\n# Fully connected layer\nmodel.add(tf.keras.layers.Dense(units=265, activation='tanh' ))\n# Output layer\nmodel.add(tf.keras.layers.Dense(units = 10, activation = 'softmax'))\n\n","3d95fec9":"# Model Compiling\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['sparse_categorical_accuracy'])","ccfb9a5a":"model.summary()","654f930c":"# Train the model\nmodel.fit(X_train, y_train, epochs=20)","65947317":"test_loss, test_accuracy = model.evaluate(X_test, y_test)\n# Model Accuracy\nprint(\"Test accuracy: {}\".format(test_accuracy))","82359f35":"\n# **Split into Predictors and Target**\n","d92dacba":"# **Model Compiling**\n\n\u2022 Optimizer: Adam\n\n\u2022 Loss: Sparse softmax (categorical) crossentropy","6a1192cf":"# **Reshaping data**\n","ee2989bc":"# **Reading the data **\n","8d53992d":"# **Model Building**\n","91239500":"# **Fitting Model**\n","a8cc6594":"# **Model Summary**\n","2762e990":"# **Evaluate the Model**\n\n\n"}}