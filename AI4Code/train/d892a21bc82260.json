{"cell_type":{"ce855388":"code","fdf296d7":"code","b3f93c53":"code","c1c79b5e":"code","9068881b":"code","31a454ec":"code","c32f3446":"code","8eae718c":"code","ffa57c76":"code","857f9c54":"code","f6853943":"code","302d9f02":"code","203b1b8b":"code","b7b13e92":"code","b7784e0f":"code","f9d7b237":"code","bca959b2":"code","a7df2f05":"code","e3a0cbb8":"code","3028f59f":"code","24353740":"code","60951b11":"code","06810d69":"code","f9105711":"code","dd25702e":"code","52f12907":"code","956c47dc":"code","deb85f8a":"code","14c4dfb2":"code","02395219":"code","68f8c8b4":"code","4570b9c7":"code","5447674b":"code","d29cf541":"markdown","29b55dd7":"markdown","f2bd0aff":"markdown"},"source":{"ce855388":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fdf296d7":"#import the datasets\nimport pandas as pd\ntrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","b3f93c53":"# randomly display 10 lines.\n\ntrain.sample(10)","c1c79b5e":"#display the 5 first lines.\ntrain.head()","9068881b":"#number of houses in the train dataset.\nlen(train)","31a454ec":"#the price of houses.\ntrain.SalePrice \n# or we use train['SalePrice']","c32f3446":"# draw a histogram.(SKEW)\ntrain.SalePrice.plot.hist(bins=100)","8eae718c":"#to show the correlation between two features\ncorr_mat = train.corr()\ncorr_mat","ffa57c76":"import seaborn as sns\n#To view the correlation matrix\nsns.heatmap(corr_mat)","857f9c54":"#we will take an interest only for the SalePrice.\nprice_corr = corr_mat['SalePrice']\nprice_corr","f6853943":"# we will take only the correlation > 0,4 with the SalePrice.\nprice_corr = train.corr()['SalePrice']\ntop_corr_features = price_corr[price_corr.abs() > 0.4].index\ntop_corr_features","302d9f02":"sns.heatmap(corr_mat.loc[top_corr_features,top_corr_features])","203b1b8b":"#sorting out features\nprice_corr[price_corr.abs() > 0.4].sort_values(ascending=False)","b7b13e92":"import matplotlib as plt\nplt.rcParams['figure.figsize'] = (12,8)\nsns.violinplot(x=\"OverallQual\",y=\"SalePrice\",data=train)\n#correlation is not causation !","b7784e0f":"train.GrLivArea.plot.hist(bins=100)","f9d7b237":"train.plot.scatter(x='GrLivArea',y='SalePrice')","bca959b2":"#other visualization\nimport seaborn as sns\nsns.jointplot(train.GrLivArea,train.SalePrice)","a7df2f05":"#to view the correlation density\nsns.jointplot(train.GrLivArea,train.SalePrice,kind='hex')","e3a0cbb8":"#to view the price of houses that have a 10\/10  in quality.\ntrain[train.OverallQual == 10].GrLivArea.plot.hist()","3028f59f":"#to avoid the problem of distant values.\nimport numpy as np\ntrain['SalePriceLog'] =np.log(train.SalePrice)\ntrain.SalePriceLog.plot.hist(bins=100)","24353740":"#for categorical features.\ntrain.Heating.value_counts()","60951b11":"cat_variables = train.select_dtypes(include=['object']).columns\ncat_train = pd.get_dummies(train[cat_variables])\ncat_train.head()","06810d69":"num_train = train[[c for c in train if c not in cat_variables]]\nnum_train.head()","f9105711":"joined_train = pd.concat([cat_train,num_train],axis=1)\njoined_train.head(5).T","dd25702e":"#for missing values\ntrain.isna().sum(axis=0).sort_values(ascending=False)\n#we ignore them.","52f12907":"joined_train.sample(5)","956c47dc":"features_train = joined_train[['OverallQual','GrLivArea']]\ntarget = joined_train.SalePriceLog\nfeatures_train.sample(5)","deb85f8a":"from sklearn.model_selection import train_test_split\nx_train , x_test, y_train , y_test = train_test_split(features_train,target,test_size=0.25)","14c4dfb2":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression(normalize=True)\nmodel.fit(x_train,y_train)","02395219":"y_predict = model.predict(x_test)","68f8c8b4":"from sklearn.dummy import DummyRegressor\nbaseline = DummyRegressor('mean')\nbaseline.fit(x_train,y_train)\nmean_squared_error(y_test,baseline.predict(x_test))","4570b9c7":"from sklearn.metrics import mean_squared_error\nnp.sqrt(mean_squared_error(y_test,y_predict))","5447674b":"import matplotlib.pyplot as plt\n\nplt.scatter(y_test,y_predict)","d29cf541":"# Analyzing","29b55dd7":"# Pre-processing","f2bd0aff":"# Modeling."}}