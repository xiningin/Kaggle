{"cell_type":{"977720ca":"code","96143809":"code","8a8967b4":"code","7fd28c17":"code","de0d5a13":"code","eca2fb21":"code","20743ed8":"code","e0c6bf39":"code","c4a8f079":"markdown","242c8844":"markdown","78c8b385":"markdown","d8697ec0":"markdown","054c0ec6":"markdown"},"source":{"977720ca":"# Bu Notebook, Alt\u0131nba\u015f \u00dcniversitesi Veri Analiti\u011fi Y\u00fcksek Lisans Program\u0131n\u0131n, Yapay Zeka dersi \u00f6devi #kapsam\u0131nda olu\u015fturulmu\u015ftur.","96143809":"!pip install editdistance\n!pip install textdistance\n!pip install fuzzywuzzy\n!pip install transformers\n!pip install sentence-transformers","8a8967b4":"import pandas as pd\nimport numpy as np\nimport editdistance\nimport textdistance\nfrom fuzzywuzzy import fuzz\nfrom fuzzywuzzy import process\nfrom sentence_transformers import SentenceTransformer, util\nimport torch","7fd28c17":"class SimilarityT:\n    def JaccardSim(text1,text2):\n        result=textdistance.jaccard.normalized_similarity(text1,text2)\n        return round(result,2)\n    def CosineSim(text1, text2):\n        result=textdistance.cosine.normalized_similarity(text1,text2)\n        return round(result,2)\n    def LevenshteinD(text1,text2):\n        result=textdistance.levenshtein.normalized_similarity(text1,text2)\n        return round(result,2)\n    def HammingD(text1,text2):\n        result=textdistance.hamming.normalized_similarity(text1,text2)\n        return round(result,2)\n    def JaroWinklerSim(text1,text2):\n        result=textdistance.jaro_winkler.normalized_distance(text1,text2)\n        return round(result,2)\n    def JaroSim(text1,text2):\n        result=textdistance.jaro.normalized_similarity(text1,text2)\n        return round(result,2)\n    def NeedlemanWunschSim(text1,text2):\n        result=textdistance.needleman_wunsch.normalized_similarity(text1,text2)\n        return round(result,2)\n    def GotohSim(text1,text2):\n        result=textdistance.gotoh.normalized_similarity(text1,text2)\n        return round(result,2)\n    def SmithWatermanSim(text1,text2):\n        result=textdistance.smith_waterman.normalized_similarity(text1,text2)\n        return round(result,2)\n    def SorensenDiceSim(text1,text2):\n        result=textdistance.sorensen_dice.normalized_similarity(text1,text2)\n        return round(result,2)\n    def TverskySim(text1,text2):\n        result=textdistance.tversky.normalized_similarity(text1,text2)\n        return round(result,2)\n    def OverlapSim(text1,text2):\n        result=textdistance.overlap.normalized_similarity(text1,text2)\n        return round(result,2)\n    def MongeElkanSim(text1,text2):\n        result=textdistance.monge_elkan.normalized_similarity(text1,text2)\n        return round(result,2)\n    def BagSim(text1,text2):\n        result=textdistance.bag.normalized_similarity(text1,text2)\n        return round(result,2)\n    def Lcsseq(text1,text2):\n        result=textdistance.lcsseq.normalized_similarity(text1,text2)\n        return round(result,2)\n    def RatcliffObershelp(text1,text2):\n        result=textdistance.ratcliff_obershelp.normalized_similarity(text1,text2)\n        return round(result,2)\n    def GetResults(text1,text2):\n        print(\"Bag Sim\",str(SimilarityT.BagSim(text1,text2)))\n        print(\"Cosine Sim\",str(SimilarityT.CosineSim(text1,text2)))\n        print(\"Gotoh Sim\",str(SimilarityT.GotohSim(text1,text2)))\n        print(\"Hamming Distance\",str(SimilarityT.HammingD(text1,text2)))\n        print(\"Jaccard Sim\",str(SimilarityT.JaccardSim(text1,text2)))\n        print(\"Jaro Sim\",str(SimilarityT.JaroSim(text1,text2)))\n        print(\"Jaro Winkler Sim\",str(SimilarityT.JaroWinklerSim(text1,text2)))\n        print(\"LcsSeq\",str(SimilarityT.Lcsseq(text1,text2)))\n        print(\"Levenshtein Distance\",str(SimilarityT.LevenshteinD(text1,text2)))\n        print(\"Monge Elkan Sim\",str(SimilarityT.MongeElkanSim(text1,text2)))\n        print(\"Needleman Sim\",str(SimilarityT.NeedlemanWunschSim(text1,text2)))\n        print(\"Overlap Sim\",str(SimilarityT.OverlapSim(text1,text2)))\n        print(\"RatcliffObershelp\",str(SimilarityT.RatcliffObershelp(text1,text2)))\n        print(\"SmithWaterman Sim\",str(SimilarityT.SmithWatermanSim(text1,text2)))\n        print(\"SorensenDice Sim\",str(SimilarityT.SorensenDiceSim(text1,text2)))\n        print(\"Tversky Sim\",str(SimilarityT.TverskySim(text1,text2)))\n        ","de0d5a13":"class ChoicesList:\n    def ChooseSimilarity(query,Clist,limit):\n        \"\"\"\n        query: sorgulanacak text\n        Clist: sorgulanacak textin aranacap\u0131 liste \u00f6rnek otel isimleri listesi\n        limit: benzer ka\u00e7 adet isim getirsin ?\n        Sonu\u00e7 bir dict olarak d\u00f6ner.\n        \"\"\"\n        Liste1=process.extract(query, Clist, limit=limit)\n        liste2={}\n        for i in Liste1:\n            liste2[i[0]]=i[1]\n        return liste2\n    def ReduceList(i,name_lst,treshold):\n        \"\"\"\n        Aranacak hedef listeden e\u015fle\u015fenleri d\u00fc\u015f\u00fcren silen kod par\u00e7ac\u0131\u011f\u0131\n        \"\"\"\n        DictL=ChoicesList.ChooseSimilarity(i,name_lst,10)\n        groups={}\n        grlist=[]\n        newlist=name_lst.copy()\n        for t in DictL:\n            if DictL[t]>=treshold:\n                newlist.remove(t)\n                grlist.append(t)\n        groups[i]=grlist\n        return newlist,groups\n    def SearchSimilarityNames(queryList,searhList,treshold):\n        \"\"\"\n        2 Liste al\u0131r, queryList= Hotel isimlerinin oldu\u011fu sorgu listesi\n        searchList ise havuz \n        treshold : benzerlik oran\u0131 0-100 aras\u0131\n        \"\"\"\n        GroupList={}\n        for i in queryList:\n            neame,gro=ChoicesList.ReduceList(i,searhList,treshold)\n            searhList=neame\n            if gro[i]:\n                GroupList.update(gro)\n        Groups=GroupList.copy()\n        for k in GroupList:\n            if not GroupList[k]:\n                 del Groups[k]\n        return GroupList","eca2fb21":"text1=\"Hotel Coriennes by Deluxe Belek Antalya\"\ntext2=\"Coriennes\"\nSimilarityT.GetResults(text1,text2)","20743ed8":"hotels=[\"Hotel Coriennes by Deluxe Belek Antalya\",\"Hotel Cori\",\"Morinem by Deluxe Belek Antalya\"]\nqueryText=\"Coriennes\"\nChoicesList.ChooseSimilarity(queryText,hotels,1)","e0c6bf39":"embedder = SentenceTransformer('distilbert-base-nli-stsb-mean-tokens')\n\n# Corpus with example sentences\ncorpus = ['A man is eating food.',\n          'A man is eating a piece of bread.',\n          'The girl is carrying a baby.',\n          'A man is riding a horse.',\n          'A woman is playing violin.',\n          'Two men pushed carts through the woods.',\n          'A man is riding a white horse on an enclosed ground.',\n          'A monkey is playing drums.',\n          'A cheetah is running behind its prey.'\n          ]\ncorpus_embeddings = embedder.encode(corpus, convert_to_tensor=True)\n\n# Query sentences:\nqueries = ['A man is eating pasta.', 'Someone in a gorilla costume is playing a set of drums.', 'A cheetah chases prey on across a field.']\n\n\n# Find the closest 5 sentences of the corpus for each query sentence based on cosine similarity\ntop_k = 5\nfor query in queries:\n    query_embedding = embedder.encode(query, convert_to_tensor=True)\n    cos_scores = util.pytorch_cos_sim(query_embedding, corpus_embeddings)[0]\n    cos_scores = cos_scores.cpu()\n\n    #We use torch.topk to find the highest 5 scores\n    top_results = torch.topk(cos_scores, k=top_k)\n\n    print(\"\\n\\n======================\\n\\n\")\n    print(\"Query:\", query)\n    print(\"\\nTop 5 most similar sentences in corpus:\")\n\n    for score, idx in zip(top_results[0], top_results[1]):\n        print(corpus[idx], \"(Score: %.4f)\" % (score))","c4a8f079":"# Examples - Lexical Similarity","242c8844":"# Create Classes","78c8b385":"# Examples - Semantic Similarity","d8697ec0":"# Import Libs","054c0ec6":"#https:\/\/githubhelp.com\/leventdem\/sentence-transformers"}}