{"cell_type":{"eed5a8d5":"code","da8ba67e":"code","37e1bedf":"code","bc5b3712":"code","9bd9001d":"code","db67cc92":"code","b677476c":"code","1507be95":"code","fc5f429d":"code","6dd700cf":"code","02fdf92f":"code","d7395f77":"code","2fc96a9d":"code","d581ba33":"code","d53d2d6b":"code","fa6f279d":"code","48ee4e04":"code","86cbf9d3":"code","c6904812":"markdown","80acca9f":"markdown","f6e3e050":"markdown"},"source":{"eed5a8d5":"import numpy as np \nimport pandas as pd \n\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.compose import make_column_transformer\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import KBinsDiscretizer, OneHotEncoder, StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import cross_val_score","da8ba67e":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","37e1bedf":"train = pd.read_csv('\/kaggle\/input\/DontGetKicked\/training.csv')\ntest = pd.read_csv('\/kaggle\/input\/DontGetKicked\/test.csv')","bc5b3712":"train.head()","9bd9001d":"train.info()","db67cc92":"y = train['IsBadBuy']\nX = train.drop(['IsBadBuy','RefId'], axis = 1)","b677476c":"numerical_features = [c for c, dtype in zip(X.columns, X.dtypes)\n                     if dtype.kind in ['i','f']]\ncategorical_features = [c for c, dtype in zip(X.columns, X.dtypes)\n                     if dtype.kind not in ['i','f']]","1507be95":"print('Numerical : ' + str(numerical_features))\nprint('Categorical : ' + str(categorical_features))","fc5f429d":"#import train_test_split library\nfrom sklearn.model_selection import train_test_split\n\n# create train test split\nX_train, X_test, y_train, y_test = train_test_split( X,  y, test_size=0.3, random_state=0, stratify = y)","6dd700cf":"preprocessor = make_column_transformer(\n    \n    (make_pipeline(\n    SimpleImputer(strategy = 'median'),\n        StandardScaler(),\n    KBinsDiscretizer(n_bins=3)), numerical_features),\n    \n    (make_pipeline(\n    SimpleImputer(strategy = 'constant', fill_value = 'missing'),\n    OneHotEncoder(categories = 'auto', handle_unknown = 'ignore')), categorical_features),\n    \n)","02fdf92f":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import RandomizedSearchCV","d7395f77":"grid_param =   {\"randomforestclassifier__n_estimators\": [10, 100, 200, 300, 400, 500, 600, 700],\n                 \"randomforestclassifier__max_depth\":[5,8,15,25,30,None],\n                 \"randomforestclassifier__min_samples_leaf\":[1,2,5,10,15,100],\n                 \"randomforestclassifier__max_leaf_nodes\": [2, 5,10]}","2fc96a9d":"RF_Model = make_pipeline(preprocessor, RandomForestClassifier())\nrandonSearch = RandomizedSearchCV(RF_Model, grid_param, cv=5, verbose=0,n_jobs=-1, scoring=\"accuracy\") # Fit grid search\nbest_model = randonSearch.fit(X_train,y_train)","d581ba33":"best_model","d53d2d6b":"print(f'Train : {best_model.score(X_train, y_train):.3f}')\nprint(f'Test : {best_model.score(X_test, y_test):.3f}')","fa6f279d":"sub_test = test.drop(['RefId'], axis = 1)","48ee4e04":"sub_test_pred = best_model.predict(sub_test).astype(int)","86cbf9d3":"AllSub = pd.DataFrame({ 'RefId': test['RefId'],\n                       'IsBadBuy' : sub_test_pred\n    \n})\n\nAllSub.to_csv(\"DGK_Pipeline_RF_RGS.csv\", index = False)","c6904812":"# Import Data","80acca9f":"# Import Libraries","f6e3e050":"## Check Data"}}