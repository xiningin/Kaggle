{"cell_type":{"0f4dfba2":"code","5d1a05f6":"code","99e77226":"code","55037ccb":"code","cc0d5e1d":"code","8c144b60":"code","2d67b4fb":"code","a73b5af5":"code","bf7fa374":"code","4562170c":"code","1cafd5f5":"code","f2e66b83":"code","4eda760e":"code","8f4bf315":"code","68264cb6":"code","cb7b45e1":"code","740b5b6d":"code","b9b6f14f":"code","ae230535":"code","0df45627":"code","5a0d8dc4":"code","fa283aff":"code","ab2f3b3e":"code","2002ee9a":"code","c3cd1fd4":"code","9b30eeb1":"code","f2240572":"code","dcb2164a":"code","ac54589d":"code","ce199fa6":"code","b4ee4824":"code","e8bcec68":"code","b733ee20":"code","bb51ea9b":"code","0e9dc11f":"code","0847a516":"code","55a0d7e3":"code","d04691ac":"code","9f9c0189":"code","a5ecaa05":"code","05b66b17":"code","fb2db014":"code","c76fe9e3":"code","b97028d6":"code","1288d485":"code","da3b3ab1":"markdown","637942db":"markdown","bab8450d":"markdown","b283cf3e":"markdown","5aac3105":"markdown","cee6ef39":"markdown","61305a77":"markdown","706d9f1d":"markdown","09ddd586":"markdown","792d229f":"markdown","1cf29b43":"markdown","78ab68dc":"markdown","2d861605":"markdown","a06401eb":"markdown","1ed8333a":"markdown","c992e594":"markdown","eff35f22":"markdown","49a8b975":"markdown","5d265188":"markdown","69263893":"markdown","5f9407fe":"markdown","b1805b60":"markdown","62f7dda3":"markdown","ad41e243":"markdown","8a48c3f3":"markdown","5048cf2b":"markdown","96a8ca18":"markdown","52407b50":"markdown","1acdcfbc":"markdown","bfe5aba9":"markdown","942e3768":"markdown","83199526":"markdown","3c661ce7":"markdown","36c19a42":"markdown","c6f7451f":"markdown","2f2bbde1":"markdown","236971bb":"markdown","12d834eb":"markdown","c7117737":"markdown","c8a5856b":"markdown","0e92847c":"markdown","07a58d21":"markdown"},"source":{"0f4dfba2":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split","5d1a05f6":"#import the csv file\nbike_df=pd.read_csv(\"train.csv\")","99e77226":"# bike_df['Date'] = pd.to_datetime(bike_df['Date'])\n# bike_df['Date']=pd.to_datetime(bike_df.datetime)\n# a=bike_df['Date'] + ' ' + bike_df['Time']\n# x=pd.to_datetime(bike_df['Date'] + ' ' + bike_df['Time'])","55037ccb":"#Shape of the dataset\nbike_df.shape","cc0d5e1d":"#Data types\nbike_df.dtypes","8c144b60":"#Read the data\nbike_df.head(5)","2d67b4fb":"#Summary of the dataset\nbike_df.describe()","a73b5af5":"#Missing values in dataset\nbike_df.isnull().sum()","bf7fa374":"#load the required libraries\nfrom sklearn import preprocessing,metrics,linear_model\nfrom sklearn.model_selection import cross_val_score,cross_val_predict,train_test_split","4562170c":"#Split the dataset into the train and test data\nfrom sklearn.model_selection import train_test_split\nX_train,y_val=train_test_split(bike_df,test_size=0.2, random_state=0)\n\nX_train = bike_df.drop(columns=['ID', 'y','Seasons','Holiday','Functioning Day','Date','Hour'])\ny_train = bike_df['y']\n\n\n\n\nprint(X_train.shape,y_train.shape)\nprint(y_train.head())\n","1cafd5f5":"X_train.head()","f2e66b83":"# #Create a new dataset for train attributes\n# train_attributes=X_train[['Date','Hour', 'Temperature(\ufffdC)', 'Humidity(%)', 'Wind speed (m\/s)', 'Visibility (10m)','Dew point temperature(\ufffdC)', 'Solar Radiation (MJ\/m2)','Rainfall(mm)', 'Snowfall (cm)','Seasons','Holiday','Functioning Day']]\n# #categorical attributes\n# cat_attributes=['Seasons','Holiday','Functioning Day','Date','Hour']\n# #numerical attributes\n# num_attributes=[ 'Temperature(\ufffdC)', 'Humidity(%)', 'Wind speed (m\/s)', 'Visibility (10m)','Dew point temperature(\ufffdC)', 'Solar Radiation (MJ\/m2)','Rainfall(mm)', 'Snowfall (cm)']","4eda760e":"# #To get dummy variables to encode the categorical features to numeric\n# train_encoded_attributes=pd.get_dummies(train_attributes,columns=cat_attributes)\n# print('Shape of transfomed dataframe::',train_encoded_attributes.shape)\n# train_encoded_attributes.head(5)","8f4bf315":"#Training dataset for modelling\n# X_train=train_encoded_attributes\ny_train=bike_df['y']\nX_train.shape","68264cb6":"#training model\nlr_model=linear_model.LinearRegression()\nlr_model","cb7b45e1":"#fit the trained model\nlr_model.fit(X_train,y_train)","740b5b6d":"#Accuracy of the model\nlr=lr_model.score(X_train,y_train)\nprint('Accuracy of the model :',lr)\n","b9b6f14f":"# from sklearn.ensemble import RandomForestRegressor\n\n# # Create an instance of the classifier\n# Regressor = RandomForestRegressor(max_depth=2, random_state=0)\n\n# # Train the classifier\n# Regressor = Regressor.fit(X_train, y_train)","ae230535":"# print(\"The accuracy of the Regressor on the validation set is \", (Regressor.score(X_train, y_train)))","0df45627":"#Cross validation prediction\npredict=cross_val_predict(lr_model,X_train,y_train,cv=3)\npredict","5a0d8dc4":"#R-squared scores\nr2_scores = cross_val_score(lr_model, X_train, y_train, cv=3)\nprint('R-squared scores :',np.average(r2_scores))","fa283aff":"test_df = pd.read_csv(\"test.csv\")\n\nprint(test_df.shape)\n\nX_test = test_df.drop(columns=['ID','Seasons','Holiday','Functioning Day','Date','Hour'])\n\nX_test.head()\n\n","ab2f3b3e":"X_test.shape","2002ee9a":"# #Create a new dataset for train attributes\n# test_attributes=X_test[['Date','Hour', 'Temperature(\ufffdC)', 'Humidity(%)', 'Wind speed (m\/s)', 'Visibility (10m)','Dew point temperature(\ufffdC)', 'Solar Radiation (MJ\/m2)','Rainfall(mm)', 'Snowfall (cm)','Seasons','Holiday','Functioning Day']]\n# #categorical attributes\n# cat_attributes=['Seasons','Holiday','Functioning Day','Date','Hour']\n# #numerical attributes\n# num_attributes=[ 'Temperature(\ufffdC)', 'Humidity(%)', 'Wind speed (m\/s)', 'Visibility (10m)','Dew point temperature(\ufffdC)', 'Solar Radiation (MJ\/m2)','Rainfall(mm)', 'Snowfall (cm)']","c3cd1fd4":"# #To get dummy variables to encode the categorical features to numeric\n# test_encoded_attributes=pd.get_dummies(test_attributes,columns=cat_attributes)\n# print('Shape of transformed dataframe :',test_encoded_attributes.shape)\n# test_encoded_attributes.head(5)","9b30eeb1":"# #Test dataset for prediction\n# X_test=test_encoded_attributes\n# # y_test=y_test.total_count.values\n\n\nX_test.shape\n","f2240572":"lr_pred=lr_model.predict(X_test)\n","dcb2164a":"#predict the model\nlr_pred=lr_model.predict(X_test)\nlr_pred\n\ntest_df['y'] = lr_pred.astype(int)","ac54589d":"test_df[['ID', 'y']].to_csv('submission1.csv', index=False)","ce199fa6":"# import math\n# #Root mean square error \n# rmse=math.sqrt(metrics.mean_squared_error(y_train,lr_pred))\n# #Mean absolute error\n# mae=metrics.mean_absolute_error(y_test,lr_pred)\n# print('Root mean square error :',rmse)\n# print('Mean absolute error :',mae)","b4ee4824":"#training the model\nfrom sklearn.tree import DecisionTreeRegressor\ndtr=DecisionTreeRegressor(min_samples_split=2,max_leaf_nodes=10)","e8bcec68":"#Fit the trained model\ndtr.fit(X_train,y_train)","b733ee20":"#Accuracy score of the model\ndtr_score=dtr.score(X_train,y_train)\nprint('Accuracy of model :',dtr_score)","bb51ea9b":"#R-squared scores\nr2_scores = cross_val_score(dtr, X_train, y_train, cv=3)\nprint('R-squared scores :',np.average(r2_scores))","0e9dc11f":"#predict the model\ndtr_pred=dtr.predict(X_test)\ndtr_pred","0847a516":"# #Root mean square error\n# rmse=math.sqrt(metrics.mean_squared_error(y_test,dtr_pred))\n# #Mean absolute error\n# mae=metrics.mean_absolute_error(y_test,dtr_pred)\n# print('Root mean square error :',rmse)\n# print('Mean absolute error :',mae)","55a0d7e3":"#Training the model\nfrom sklearn.ensemble import RandomForestRegressor\nX_train\nrf=RandomForestRegressor(n_estimators=200)","d04691ac":"#Fit the trained model\nrf.fit(X_train,y_train)","9f9c0189":"#accuracy of the model\nrf_score =rf.score(X_train,y_train)\nprint('Accuracy of the model :',rf_score)","a5ecaa05":"#R-squared scores\nr2_scores = cross_val_score(rf, X_train, y_train, cv=3)\nprint('R-squared scores :',np.average(r2_scores))\n","05b66b17":"#predict the model\nX_test\nrf_pred=rf.predict(X_test)\nrf_pred","fb2db014":"test_df['y'] = rf_pred.astype(int)","c76fe9e3":"test_df[['ID', 'y']].to_csv('submissionz.csv', index=False)","b97028d6":"# #Root mean square error\n# rmse = math.sqrt(metrics.mean_squared_error(y_train,rf_pred))\n# print('Root mean square error :',rmse)\n# #Mean absolute error\n# mae=metrics.mean_absolute_error(y_train,rf_pred)\n# print('Mean absolute error :',mae)","1288d485":"# Bike_df1=pd.DataFrame(rf_pred,columns=['y_test'])\n# Bike_df2=pd.DataFrame(rf_pred,columns=['rf_pred'])\n# Bike_predictions=pd.merge(Bike_df1,Bike_df2,left_index=True,right_index=True)\n# Bike_predictions.to_csv('Bike_Renting_Python.csv')\n# Bike_predictions","da3b3ab1":"**Read the training data**","637942db":"**Missing value analysis**","bab8450d":"**Model performance on test dataset**","b283cf3e":"**Model performance on test dataset**","5aac3105":"**Root mean squared error and mean absolute error**","cee6ef39":"**Random Forest**","61305a77":"**Model performance on test dataset**","706d9f1d":"The R-squared or coefficient of determination is 0.80 on average for 3-fold cross validation , it means that predictor is only able to predict 80% of the variance in the target variable which is contributed by independent variables.","09ddd586":"**Model evalution metrics**","792d229f":"**Split the features into categorical and numerical features**","1cf29b43":"The objective of this Case is to Predication of bike rental count on daily based on the environmental and seasonal settings.","78ab68dc":"Split the dataset into train and test in the ratio of 70:30","2d861605":"**Decision tree regressor**","a06401eb":"**Training dataset**","1ed8333a":"When we compare the root mean squared error and mean absolute error of all 3 models, the random forest model has less root mean squared error and mean absolute error. So, finally random forest model is bset for predicting the bike rental count on daily basis.","c992e594":"**Predict the model**","eff35f22":"**R-squared and mean squared error score**","49a8b975":"**Decoding the training attributes**","5d265188":"**Accuracy of model**","69263893":"**Final model for predicting the bike rental count on daily basis**","5f9407fe":"No missing values present in training dataset.","b1805b60":"**R-squared and mean squared error scores**","62f7dda3":"**Shape of the dataset**","ad41e243":"**Problem statement :-**","8a48c3f3":"**Model evalution metrics**","5048cf2b":"**Exploratory Data Analysis**","96a8ca18":"**Import the required libraries**","52407b50":"**Decoding the test attributes**","1acdcfbc":"**fit the training model**","bfe5aba9":"**Project title :- Bike Renting using Python**","942e3768":"**R-squared and mean squared error scores**","83199526":"The dataset contains 5760 observations and 15 attributes.","3c661ce7":"**Modelling the dataset**","36c19a42":"**Linear Regression Model**","c6f7451f":"**Root mean squared error and mean absolute error**","2f2bbde1":"**Decision tree regression accuracy score**","236971bb":"**Data types**","12d834eb":"**Contents :-**\n             \n        1. Exploratory Data Analysis\n           * Loading the dataset and libraries\n           * Data cleaning\n           * Typecasting the attributes\n           * Missing value analysis\n        2. Attributes distributions and trends\n           * Monthly distribution of counts\n           * Yearly distribution of counts\n           * Outliers analysis\n        3. Normality test\n        4. Correlation matrix \n        5. Split the dataset into train and test dataset\n        6. Encoding the categorical features\n        7. Modelling the training dataset\n           * Linear Regression Model\n           * Decision Tree Regressor Model\n           * Random Forest Model\n        8. Cross Validation Prediction\n           * Linear Regression CV Prediction\n           * Decision Tree Regressor CV Prediction\n           * Random Forest CV Prediction\n        9. Model performance on test dataset\n           * Linear Regression Prediction\n           * Decision Tree Regressor Prediction\n           * Random Forest Prediction\n        10. Model Evaluation Metrics\n           * R-squared score\n           * Root mean square error\n           * Mean absolute error\n        11.Choosing best model for predicting bike rental count","c7117737":"**Random forest accuracy score**","c8a5856b":"**Fit the model**","0e92847c":"**Root mean square error and mean absolute error scores**","07a58d21":"**Fit the model**"}}