{"cell_type":{"14af6135":"code","37e12236":"code","6590bfd5":"code","fa445d20":"code","cc067047":"code","fa38f22f":"code","b42bf092":"code","da79c8ee":"code","1721b60c":"code","75946db4":"code","f8946963":"code","bcb76e95":"code","b4761a78":"code","478e6148":"code","d7a2c788":"code","1acf4845":"code","c6c134ea":"code","3b66f312":"code","cc668e1a":"code","71510588":"code","310377ac":"code","85ef6c6b":"code","54ffb8cc":"code","31d098f6":"code","15f26498":"code","a2298da5":"code","86df578b":"code","2b0afdcc":"code","f7ba8129":"code","54947151":"markdown","aee0f7b4":"markdown","67b0b5e0":"markdown","2ff34979":"markdown","91864acb":"markdown","8c32dd17":"markdown","4720f5fd":"markdown","2c954f79":"markdown","2733d5bb":"markdown","d0fc2a4b":"markdown","2661e3ea":"markdown","f91ab898":"markdown","76be2e56":"markdown","289e3079":"markdown","c9de28fb":"markdown","d455d36d":"markdown","7dd8c233":"markdown","90e0cba4":"markdown","905c7e9e":"markdown","ca75eb4b":"markdown","2c85e757":"markdown","b1fcc966":"markdown","a7dfa377":"markdown","45eff94f":"markdown","a15e5ece":"markdown","08be06ef":"markdown","efb115e3":"markdown","88aa6e11":"markdown","1303d803":"markdown","40dd2bc3":"markdown"},"source":{"14af6135":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","37e12236":"x = np.array([1,2,3,4,5,6,7])\ny = x\n\nplt.figure()\nplt.scatter(x,y);","6590bfd5":"colors = ['green']*(len(x))\ncolors[-1] = 'red'\n\nplt.figure()\nplt.scatter(x,y,c=colors,s=100)","fa445d20":"colors = ['green']*(len(x))\ncolors[-1] = 'red'\n\nplt.figure()\nplt.scatter(x,y,c=colors,s=100)\nplt.xlabel('X Label')\nplt.ylabel('Y Label')\nplt.legend()\nplt.title('Sample Scatter Plot');","cc067047":"plt.figure()\nplt.scatter(x[:-1], y[:-1], c='green', s=100, label='Positive')\nplt.scatter(x[-1], y[-1], c='red', s=100, label='Negative')\nplt.xlabel('X Label')\nplt.ylabel('Y Label')\nplt.legend(loc = \"upper left\", fontsize = 13)\nplt.title('Sample Scatter Plot');","fa38f22f":"df1 = pd.read_csv('..\/input\/youtube-video-likes-by-corey-schafer-github\/vidlikes.csv')\nprint(df1.head())\n\nview_count = df1['view_count']\nlikes = df1['likes']\nratio = df1['ratio']","b42bf092":"plt.figure()\nplt.scatter(view_count, likes, c=ratio, cmap='summer', edgecolor='black', linewidth=1, alpha=0.75)\nplt.title('Trending YouTube Videos')\nplt.xlabel('View Count')\nplt.ylabel('Total Likes');","da79c8ee":"plt.figure(figsize=(7,5))\nplt.scatter(view_count, likes, c=ratio, cmap='summer', edgecolor='black', linewidth=1, alpha=0.75)\n\nplt.xscale('log')\nplt.yscale('log')\n\ncbar = plt.colorbar()\ncbar.set_label('Like Dislike Ratio')\n\nplt.title('Trending YouTube Videos')\nplt.xlabel('View Count')\nplt.ylabel('Total Likes');","1721b60c":"linear_data = np.array([1,2,3,4,5,6,7,8])\nexponential_data = linear_data**2\n\n# plot the linear data and the exponential data\nplt.plot(linear_data, '-o', exponential_data, '-o')","75946db4":"plt.plot(linear_data, '-o', exponential_data, '-o')\n\nplt.xlabel('X-axis')\nplt.ylabel('y-axis')\nplt.title('Linear vs Exponential')\n# add a legend with legend entries (because we didn't have labels when we plotted the data series)\nplt.legend(['Linear', 'Exponential'])\n\nplt.fill_between(range(len(linear_data)), \n                       linear_data, exponential_data, \n                       facecolor='blue', \n                       alpha=0.25);","f8946963":"ages_x = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]\npython = [45372, 48876, 53850, 57287, 63016, 65998, 70003, 70000, 71496, 75370, 83640]\njava = [37810, 43515, 46823, 49293, 53437, 56373, 62375, 66674, 68745, 68746, 74583]\nOthers = [38496, 42000, 46752, 49320, 53200, 56000, 62316, 64928, 67317, 68748, 73752]\n\nplt.plot(ages_x, python, 'b', linewidth=3, label='Python')   \nplt.plot(ages_x, java, color='#adad3b', linewidth=3, label='Java')\nplt.plot(ages_x, Others, color='black', linestyle='--', label='All Devs')\n\nplt.title('Median Salary by Age')\nplt.xlabel('Ages')\nplt.ylabel('Median Salary')\nplt.legend(fontsize=12);   #necessary to give labels to the line\/ You can also pass label as argument inside legend","bcb76e95":"linear_data = np.array([1,2,3,4,5,6,7,8])\nexponential_data = linear_data**2\nxvals = range(len(linear_data))\nxvals1 = []\nfor item in xvals:\n    xvals1.append(item+0.3) #Because width of first bar is 0.3\n    \nplt.bar(xvals, linear_data, width = 0.3, color='red', label='Linear')\nplt.bar(xvals1, exponential_data, width=0.3, color='blue', label='Exponential')\nplt.title('Linear vs Exponential')\nplt.legend(fontsize=13);","b4761a78":"plt.bar(xvals, linear_data, width = 0.3, color='b', label='Linear')\nplt.bar(xvals, exponential_data, width = 0.3, bottom=linear_data, color='r', label='Exponential')\nplt.title('Linear vs Exponential')\nplt.legend(fontsize=13);","478e6148":"languages =['Python', 'SQL', 'Java', 'C++', 'JavaScript']\npos = np.arange(len(languages))\npopularity = [56, 39, 34, 34, 29]\n\nplt.bar(pos, popularity, align='center')\nplt.title('Top 5 Languages for Math & Data \\nby % popularity on Stack Overflow', alpha=0.8);","d7a2c788":"# change the bar colors to be less bright blue\nbars = plt.bar(pos, popularity, align='center', linewidth=0, color='lightslategrey')\n# make one bar, the python bar, a contrasting color\nbars[0].set_color('#1F77B4')\n\n# soften all labels by turning grey\nplt.xticks(pos, languages, alpha=0.8)\nplt.title('Top 5 Languages for Math & Data \\nby % popularity on Stack Overflow', alpha=0.8)\n\n#remove ytick labels\nplt.tick_params(top=False, bottom=False, left=False, right=False, labelleft=False, labelbottom=True)\n\n# remove the frame of the chart\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\n\n# direct label each bar with Y axis values\nfor bar in bars:\n    plt.gca().text(bar.get_x() + bar.get_width()\/2, bar.get_height() - 5, str(int(bar.get_height())) + '%', \n                 ha='center', color='w', fontsize=11)","1acf4845":"plt.figure(figsize=(8,4))\n\nplt.subplot(1,2,1) #number of rows, number of columns, current position\nplt.bar(pos, popularity, align='center')\nplt.title('Top 5 Languages for Math & Data \\nby % popularity on Stack Overflow', alpha=0.8)\n\nplt.subplot(1,2,2) #number of rows, number of columns, current position\nbars = plt.bar(pos, popularity, align='center', linewidth=0, color='lightslategrey')\nbars[0].set_color('#1F77B4')\nplt.xticks(pos, languages, alpha=0.8)\nplt.title('Top 5 Languages for Math & Data \\nby % popularity on Stack Overflow', alpha=0.8)\nplt.tick_params(top=False, bottom=False, left=False, right=False, labelleft=False, labelbottom=True)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nfor bar in bars:\n    plt.gca().text(bar.get_x() + bar.get_width()\/2, bar.get_height() - 5, str(int(bar.get_height())) + '%', \n                 ha='center', color='w', fontsize=11)\n    \nplt.tight_layout(pad=3)","c6c134ea":"from sklearn.datasets import load_iris\n\niris = load_iris()\ndf = pd.DataFrame(data= np.c_[iris['data'], iris['target']],\n                     columns= iris['feature_names'] + ['target'])\ndf.head()","3b66f312":"plt.figure(figsize=(11,7))\n\nfor i in range(1, len(df.columns)):\n    plt.subplot(2, 2, i)\n    plt.scatter(df.iloc[:,i-1], df['target'])\n    plt.title(df.columns[i-1])\n    plt.ylabel('Target')\n    \nplt.tight_layout(pad=3)","cc668e1a":"import seaborn as sns\n\nsns.pairplot(data=df, x_vars='sepal length (cm)', y_vars='sepal width (cm)', hue='target');","71510588":"g = sns.pairplot(data=df, x_vars=df.columns[:-1], y_vars=df.columns[:-1], hue='target')\ng.fig.suptitle('Relationship Among Features', y=1.08, fontsize=20);","310377ac":"sns.boxplot(data=df.drop(columns='target'), orient=\"h\", palette=\"Set2\")","85ef6c6b":"sns.swarmplot(data=df.drop(columns='target'), orient=\"h\", palette=\"Set2\")","54ffb8cc":"sns.violinplot(data=df.drop(columns='target'), orient=\"h\", palette=\"Set2\")","31d098f6":"plt.figure(figsize=(10,5))\n\nplt.subplot(1,2,1)\nsns.regplot(df['petal length (cm)'], df['petal width (cm)'])\n\nplt.subplot(1,2,2)\nsns.regplot(df['sepal length (cm)'], df['sepal width (cm)'])\n\nplt.tight_layout(pad=3)","15f26498":"sns.countplot(x='target', data=df);","a2298da5":"list1 = np.random.randint(2, size=50)\ntest = pd.DataFrame(list1, columns=['int'])\n\nsns.countplot(x='int', data=test);","86df578b":"speed = [0.1, 17.5, 40, 48, 52, 69, 88]\nlifespan = [2, 8, 70, 1.5, 25, 12, 28]\nindex = ['snail', 'pig', 'elephant', 'rabbit', 'giraffe', 'coyote', 'horse']\ndf1 = pd.DataFrame({'speed': speed, 'lifespan': lifespan}, index=index)\nax = df1.plot.bar(rot=0)","2b0afdcc":"sns.heatmap(df.corr(), annot=True);","f7ba8129":"sns.heatmap(df1.isnull(), yticklabels=False, cmap='plasma')","54947151":"<center><h1 style=\"color:green\">Don't forget to upvote if you like it! It's free! :)<\/h1><\/center>\n<center><h1 style=\"color:green\">Thanks and be safe!<\/h1><\/center>","aee0f7b4":"# Line Plots","67b0b5e0":"# Bar Plots","2ff34979":"<h1 style=\"color:blue\">Contents:<\/h1>\n\n<b><ul>\n<li> Scatter Plots\n<li> Line Plots\n<li> Bar Plots\n<li> Sub Plots\n<li> Pair Plots\n<li> Box Plots\n<li> Swarm Plots\n<li> Violin Plots\n<li> Regression Plots\n<li> Count Plots\n<li> HeatMap\n<\/ul>\n    \n-> Bonus: 10 Simple Rules for better plotting.\n","91864acb":"# Count Plots","8c32dd17":"**The yellow lines indicate the null values**","4720f5fd":"# Pair Plots","2c954f79":"# Regression Plots","2733d5bb":"**Data from stackoverflow developing survey**","d0fc2a4b":"# Box Plots","2661e3ea":"**We aren't able to add legend so let's use different technique**","f91ab898":"**Let's represent this data with Scatter plots**","76be2e56":"**Not effective because numbers are comparatively very large!, Apply log to avoid that.**","289e3079":"**Let's compare two figure we just created above with Subplot**","c9de28fb":"**Stackoverflow developing survey**","d455d36d":"<center><h1> 10 Simple Rules for Better Plotting<\/h1><\/center>\n\n* Rule 1: Know Your Audience.\n> You plot has to be designed with your audience in mind. It's not the same to communicate with professional scientist, upper managment or with general public.\n> Remmember that when you are thinking about the plot.\n* Rule 2: Identify Your Message\n> Your figure must containg a message in order to be succeful. Take your time to think about the message you want to send, and once it's clear for you\n> starts developing the figure.\n* Rule 3: Adapt the Figure to the Support Medium\n> This is a more practical rule. Know where your figures will be presented and adapt the figure accordingly.\n> It's not the same if the figure will be in a powerpoing, journal or an email.\n> If it's part of a bigger presentatio, make the lines bolder, the plot simpler so that the viewer can instantly\n> understand it.\n* Rule 4: Captions Are Not Optional\n> Provide additional information or data for facilitate the comprehension of the plot.\n> In a bar chart, if it's relevant, add the numbers to facilitate the comparison.\n> If needed, add an example about how to read the plot.\n* Rule 5: Do Not Trust the Defaults\n> The defaults of any plotting library are good enough for any plot but they are best for none.\n> Adjust the color palletes, the fontsize, title, spines, axies and so on for the figure.\n> To make it more readable and more nicer to look at.\n* Rule 6: Use Color Effectively\n> We have associated feelings with specific colors so use them accordingly. There are 3 colorsmaps, use the most relevant for your data:\n> 1. Sequential: one variation of a unique color, used for quantitative data varying from low to high.\n> 2. Diverging: variation from one color to another, used to highlight deviation from a median value.\n> 2. Qualitative: rapid variation of colors, used mainly for discrete or categorical data.\n* Rule 7: Do Not Mislead the Reader\n> Try to show the data as objectively as possible. Some tools are very bad by nature: like pie charts or 3D charts when comparing quantities.\n> As a rule of thumb, make sure to always use the simplest type of plots that can convey your message and make sure to use labels, ticks, title, and the full range of values when relevant.\n* Rule 8: Avoid \u201cChartjunk\u201d\n> Chartjunk refers to all the unnecessary or confusing visual elements found in a figure that do not improve the message (in the best case) or add confusion (in the worst case). \n> For example, chartjunk may include the use of too many colors, too many labels, gratuitously colored backgrounds, useless grid lines, etc.\n* Rule 9: Message Trumps Beauty\n> In science, message and readability of the figure is the most important aspect while beauty is only an option.\n* Rule 10: Get the Right Tool\n> There are a lot of libraries that you can use to make plots and figures. You have plenty of libraries in Python, R, Javascript, Matlab, Excel, Tableau and others.\n> Use the right tool for each plot.","7dd8c233":"**Subplots for iris_datasets**","90e0cba4":"**Can also be used to analyze null values**","905c7e9e":"## - This Notebook contains all kind of plots that are listed below and contains basic example to the advnace real world problem \n\n## - You will learn how and when to use plots and effecient plot techniques.","ca75eb4b":"# Scatter Plots","2c85e757":"# Swarm Plots","b1fcc966":"# Sub Plots","a7dfa377":"# HeatMap\n\n**Generally used to describe correlation among data**","45eff94f":"# Violin Plots","a15e5ece":"<center><b>Planning for second notebook if i get enough upvote in this notebook<\/b><\/center>","08be06ef":"**The above plot Contains lots of junk, such as:**\n\n- No X-labels\n- Graph is about % popularity so need of Y-labels\n- Same color bars\n- Plot looks heavier\n\n**Let's dejunkify the plot**","efb115e3":"**This indicates data is in equal proportion**","88aa6e11":"<center><h1 style=\"color:red\">Plotting Techniques in Python<\/h1><\/center>","1303d803":"**Example of a youtube video data**","40dd2bc3":"# Count plot to comapre two feature"}}