{"cell_type":{"ff28f1f1":"code","58edeada":"code","3b8c10d4":"code","03558ec9":"code","d081694f":"code","3afcef98":"code","d2067f5f":"code","0bc04b38":"code","c9f65d25":"code","a585a547":"code","94bbc59f":"code","c7a6000b":"code","31824d99":"code","11876002":"code","5b564473":"code","8077b621":"code","2f77150f":"code","85271bf3":"code","82b76df3":"code","f8562cae":"code","7f609116":"code","3ac4a330":"code","70cf3e83":"code","95fd2d1d":"code","7f73df97":"code","9259ced3":"code","aeba9106":"code","5d24c784":"markdown","fb66033d":"markdown","b61add9b":"markdown","048b9cc1":"markdown","ab5ed10e":"markdown","4efd29a5":"markdown","8fd9696c":"markdown","d83b4d3f":"markdown","692f7c4b":"markdown","1da827c4":"markdown","7df3f554":"markdown","55a546de":"markdown","b028b6aa":"markdown","b21edb50":"markdown","d0cd66e7":"markdown","223a2246":"markdown","3f5efa99":"markdown","c4d2d568":"markdown","01affe7a":"markdown","3af811a3":"markdown","ab366214":"markdown","30484981":"markdown"},"source":{"ff28f1f1":"# run this cell to import nltk\nimport nltk\nfrom os import getcwd","58edeada":"# add folder, tmp2, from our local workspace containing pre-downloaded corpora files to nltk's data path\n# this enables importing of these files without downloading it again when we refresh our workspace\n\nfilePath = f\"{getcwd()}\/..\/tmp2\/\"\nnltk.data.path.append(filePath)","3b8c10d4":"import numpy as np\nimport pandas as pd\nfrom nltk.corpus import twitter_samples \n\n","03558ec9":"import re\nimport string\nimport numpy as np\n\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.tokenize import TweetTokenizer\n\n\ndef process_tweet(tweet):\n    \"\"\"Process tweet function.\n    Input:\n        tweet: a string containing a tweet\n    Output:\n        tweets_clean: a list of words containing the processed tweet\n    \"\"\"\n    stemmer = PorterStemmer()\n    stopwords_english = stopwords.words('english')\n    # remove stock market tickers like $GE\n    tweet = re.sub(r'\\$\\w*', '', tweet)\n    # remove old style retweet text \"RT\"\n    tweet = re.sub(r'^RT[\\s]+', '', tweet)\n    # remove hyperlinks\n    tweet = re.sub(r'https?:\\\/\\\/.*[\\r\\n]*', '', tweet)\n    # remove hashtags\n    # only removing the hash # sign from the word\n    tweet = re.sub(r'#', '', tweet)\n    # tokenize tweets\n    tokenizer = TweetTokenizer(preserve_case=False, strip_handles=True,\n                               reduce_len=True)\n    tweet_tokens = tokenizer.tokenize(tweet)\n\n    tweets_clean = []\n    for word in tweet_tokens:\n        if (word not in stopwords_english and  # remove stopwords\n                word not in string.punctuation):  # remove punctuation\n            # tweets_clean.append(word)\n            stem_word = stemmer.stem(word)  # stemming word\n            tweets_clean.append(stem_word)\n\n    return tweets_clean\n\n\ndef build_freqs(tweets, ys):\n    \"\"\"Build frequencies.\n    Input:\n        tweets: a list of tweets\n        ys: an m x 1 array with the sentiment label of each tweet\n            (either 0 or 1)\n    Output:\n        freqs: a dictionary mapping each (word, sentiment) pair to its\n        frequency\n    \"\"\"\n    # Convert np array to list since zip needs an iterable.\n    # The squeeze is necessary or the list ends up with one element.\n    # Also note that this is just a NOP if ys is already a list.\n    yslist = np.squeeze(ys).tolist()\n\n    # Start with an empty dictionary and populate it by looping over all tweets\n    # and over all processed words in each tweet.\n    freqs = {}\n    for y, tweet in zip(yslist, tweets):\n        for word in process_tweet(tweet):\n            pair = (word, y)\n            if pair in freqs:\n                freqs[pair] += 1\n            else:\n                freqs[pair] = 1\n\n    return freqs","d081694f":"# select the set of positive and negative tweets\nall_positive_tweets = twitter_samples.strings('positive_tweets.json')\nall_negative_tweets = twitter_samples.strings('negative_tweets.json')","3afcef98":"# split the data into two pieces, one for training and one for testing (validation set) \ntest_pos = all_positive_tweets[4000:]\ntrain_pos = all_positive_tweets[:4000]\ntest_neg = all_negative_tweets[4000:]\ntrain_neg = all_negative_tweets[:4000]\n\ntrain_x = train_pos + train_neg \ntest_x = test_pos + test_neg","d2067f5f":"# combine positive and negative labels\ntrain_y = np.append(np.ones((len(train_pos), 1)), np.zeros((len(train_neg), 1)), axis=0)\ntest_y = np.append(np.ones((len(test_pos), 1)), np.zeros((len(test_neg), 1)), axis=0)","0bc04b38":"# Print the shape train and test sets\nprint(\"train_y.shape = \" + str(train_y.shape))\nprint(\"test_y.shape = \" + str(test_y.shape))","c9f65d25":"# create frequency dictionary\nfreqs = build_freqs(train_x, train_y)\n\n# check the output\nprint(\"type(freqs) = \" + str(type(freqs)))\nprint(\"len(freqs) = \" + str(len(freqs.keys())))","a585a547":"# test the function below\nprint('This is an example of a positive tweet: \\n', train_x[0])\nprint('\\nThis is an example of the processed version of the tweet: \\n', process_tweet(train_x[0]))","94bbc59f":"# UNQ_C1 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef sigmoid(z): \n    '''\n    Input:\n        z: is the input (can be a scalar or an array)\n    Output:\n        h: the sigmoid of z\n    '''\n    \n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    # calculate the sigmoid of z\n    h = 1\/(1+np.exp(-z))\n    ### END CODE HERE ###\n    \n    return h","c7a6000b":"# Testing your function \nif (sigmoid(0) == 0.5):\n    print('SUCCESS!')\nelse:\n    print('Oops!')\n\nif (sigmoid(4.92) == 0.9927537604041685):\n    print('CORRECT!')\nelse:\n    print('Oops again!')","31824d99":"# verify that when the model predicts close to 1, but the actual label is 0, the loss is a large positive value\n-1 * (1 - 0) * np.log(1 - 0.9999) # loss is about 9.2","11876002":"# verify that when the model predicts close to 0 but the actual label is 1, the loss is a large positive value\n-1 * np.log(0.0001) # loss is about 9.2","5b564473":"# UNQ_C2 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef gradientDescent(x, y, theta, alpha, num_iters):\n    '''\n    Input:\n        x: matrix of features which is (m,n+1)\n        y: corresponding labels of the input matrix x, dimensions (m,1)\n        theta: weight vector of dimension (n+1,1)\n        alpha: learning rate\n        num_iters: number of iterations you want to train your model for\n    Output:\n        J: the final cost\n        theta: your final weight vector\n    Hint: you might want to print the cost to make sure that it is going down.\n    '''\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    # get 'm', the number of rows in matrix x\n    m = x.shape[0]\n    \n    for i in range(0, num_iters):\n        \n        # get z, the dot product of x and theta\n        z = np.dot(x,theta)\n        \n        # get the sigmoid of z\n        h = sigmoid(z)\n        \n        # calculate the cost function\n        J = -1.\/m * (np.dot(y.transpose(), np.log(h)) + np.dot((1-y).transpose(),np.log(1-h)))\n\n        # update the weights theta\n        theta = theta - (alpha\/m) * np.dot(x.transpose(),(h-y))\n        \n    ### END CODE HERE ###\n    J = float(J)\n    return J, theta","8077b621":"# Check the function\n# Construct a synthetic test case using numpy PRNG functions\nnp.random.seed(1)\n# X input is 10 x 3 with ones for the bias terms\ntmp_X = np.append(np.ones((10, 1)), np.random.rand(10, 2) * 2000, axis=1)\n# Y Labels are 10 x 1\ntmp_Y = (np.random.rand(10, 1) > 0.35).astype(float)\n\n# Apply gradient descent\ntmp_J, tmp_theta = gradientDescent(tmp_X, tmp_Y, np.zeros((3, 1)), 1e-8, 700)\nprint(f\"The cost after training is {tmp_J:.8f}.\")\nprint(f\"The resulting vector of weights is {[round(t, 8) for t in np.squeeze(tmp_theta)]}\")","2f77150f":"# UNQ_C3 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef extract_features(tweet, freqs):\n    '''\n    Input: \n        tweet: a list of words for one tweet\n        freqs: a dictionary corresponding to the frequencies of each tuple (word, label)\n    Output: \n        x: a feature vector of dimension (1,3)\n    '''\n    # process_tweet tokenizes, stems, and removes stopwords\n    word_l = process_tweet(tweet)\n    \n    # 3 elements in the form of a 1 x 3 vector\n    x = np.zeros((1, 3)) \n    \n    #bias term is set to 1\n    x[0,0] = 1 \n    \n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    \n    # loop through each word in the list of words\n    for word in word_l:\n        \n        # increment the word count for the positive label 1\n        x[0,1] += freqs.get((word, 1.0),0)\n        \n        # increment the word count for the negative label 0\n        x[0,2] += freqs.get((word, 0.0),0)\n        \n    ### END CODE HERE ###\n    assert(x.shape == (1, 3))\n    return x","85271bf3":"# Check your function\n\n# test 1\n# test on training data\ntmp1 = extract_features(train_x[0], freqs)\nprint(tmp1)","82b76df3":"# test 2:\n# check for when the words are not in the freqs dictionary\ntmp2 = extract_features('blorb bleeeeb bloooob', freqs)\nprint(tmp2)","f8562cae":"# collect the features 'x' and stack them into a matrix 'X'\nX = np.zeros((len(train_x), 3))\nfor i in range(len(train_x)):\n    X[i, :]= extract_features(train_x[i], freqs)\n\n# training labels corresponding to X\nY = train_y\n\n# Apply gradient descent\nJ, theta = gradientDescent(X, Y, np.zeros((3, 1)), 1e-9, 1500)\nprint(f\"The cost after training is {J:.8f}.\")\nprint(f\"The resulting vector of weights is {[round(t, 8) for t in np.squeeze(theta)]}\")","7f609116":"# UNQ_C4 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef predict_tweet(tweet, freqs, theta):\n    '''\n    Input: \n        tweet: a string\n        freqs: a dictionary corresponding to the frequencies of each tuple (word, label)\n        theta: (3,1) vector of weights\n    Output: \n        y_pred: the probability of a tweet being positive or negative\n    '''\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    \n    # extract the features of the tweet and store it into x\n    x = extract_features(tweet,freqs)\n    \n    # make the prediction using x and theta\n    y_pred =sigmoid(np.dot(x,theta))\n    \n    ### END CODE HERE ###\n    \n    return y_pred","3ac4a330":"# Run this cell to test your function\nfor tweet in ['I am happy', 'I am bad', 'this movie should have been great.', 'great', 'great great', 'great great great', 'great great great great']:\n    print( '%s -> %f' % (tweet, predict_tweet(tweet, freqs, theta)))","70cf3e83":"# Feel free to check the sentiment of your own tweet below\nmy_tweet = 'I am learning :)'\npredict_tweet(my_tweet, freqs, theta)","95fd2d1d":"# UNQ_C5 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef test_logistic_regression(test_x, test_y, freqs, theta):\n    \"\"\"\n    Input: \n        test_x: a list of tweets\n        test_y: (m, 1) vector with the corresponding labels for the list of tweets\n        freqs: a dictionary with the frequency of each pair (or tuple)\n        theta: weight vector of dimension (3, 1)\n    Output: \n        accuracy: (# of tweets classified correctly) \/ (total # of tweets)\n    \"\"\"\n    \n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    \n    # the list for storing predictions\n    y_hat = []\n    \n    for tweet in test_x:\n        # get the label prediction for the tweet\n        y_pred = predict_tweet(tweet, freqs, theta)\n        \n        if y_pred > 0.5:\n            # append 1.0 to the list\n            y_hat.append(1)\n        else:\n            # append 0 to the list\n            y_hat.append(0)\n\n    # With the above implementation, y_hat is a list, but test_y is (m,1) array\n    # convert both to one-dimensional arrays in order to compare them using the '==' operator\n    accuracy = (y_hat==np.squeeze(test_y)).sum()\/len(test_x)\n\n    ### END CODE HERE ###\n    \n    return accuracy","7f73df97":"tmp_accuracy = test_logistic_regression(test_x, test_y, freqs, theta)\nprint(f\"Logistic regression model's accuracy = {tmp_accuracy:.4f}\")","9259ced3":"# Some error analysis\nprint('Label Predicted Tweet')\nfor x,y in zip(test_x,test_y):\n    y_hat = predict_tweet(x, freqs, theta)\n\n    if np.abs(y - (y_hat > 0.5)) > 0:\n        print('THE TWEET IS:', x)\n        print('THE PROCESSED TWEET IS:', process_tweet(x))\n        print('%d\\t%0.8f\\t%s' % (y, y_hat, ' '.join(process_tweet(x)).encode('ascii', 'ignore')))","aeba9106":"# Feel free to change the tweet below\nmy_tweet = 'This is a ridiculously bright movie. The plot was terrible and I was sad until the ending!'\nprint(process_tweet(my_tweet))\ny_hat = predict_tweet(my_tweet, freqs, theta)\nprint(y_hat)\nif y_hat > 0.5:\n    print('Positive sentiment')\nelse: \n    print('Negative sentiment')","5d24c784":"### Prepare the data\n* The `twitter_samples` contains subsets of 5,000 positive tweets, 5,000 negative tweets, and the full set of 10,000 tweets.  \n    * If you used all three datasets, we would introduce duplicates of the positive tweets and negative tweets.  \n    * You will select just the five thousand positive tweets and five thousand negative tweets.","fb66033d":"# Part 4: Test your logistic regression\n\nIt is time for you to test your logistic regression function on some new input that your model has not seen before. \n\n#### Instructions: Write `predict_tweet`\nPredict whether a tweet is positive or negative.\n\n* Given a tweet, process it, then extract the features.\n* Apply the model's learned weights on the features to get the logits.\n* Apply the sigmoid to the logits to get the prediction (a value between 0 and 1).\n\n$$y_{pred} = sigmoid(\\mathbf{x} \\cdot \\theta)$$","b61add9b":"#### Update the weights\n\nTo update your weight vector $\\theta$, you will apply gradient descent to iteratively improve your model's predictions.  \nThe gradient of the cost function $J$ with respect to one of the weights $\\theta_j$ is:\n\n$$\\nabla_{\\theta_j}J(\\theta) = \\frac{1}{m} \\sum_{i=1}^m(h^{(i)}-y^{(i)})x_j \\tag{5}$$\n* 'i' is the index across all 'm' training examples.\n* 'j' is the index of the weight $\\theta_j$, so $x_j$ is the feature associated with weight $\\theta_j$\n\n* To update the weight $\\theta_j$, we adjust it by subtracting a fraction of the gradient determined by $\\alpha$:\n$$\\theta_j = \\theta_j - \\alpha \\times \\nabla_{\\theta_j}J(\\theta) $$\n* The learning rate $\\alpha$ is a value that we choose to control how big a single update will be.\n","048b9cc1":"## Check performance using the test set\nAfter training your model using the training set above, check how your model might perform on real, unseen data, by testing it against the test set.\n\n#### Instructions: Implement `test_logistic_regression` \n* Given the test data and the weights of your trained model, calculate the accuracy of your logistic regression model. \n* Use your `predict_tweet()` function to make predictions on each tweet in the test set.\n* If the prediction is > 0.5, set the model's classification `y_hat` to 1, otherwise set the model's classification `y_hat` to 0.\n* A prediction is accurate when `y_hat` equals `test_y`.  Sum up all the instances when they are equal and divide by `m`.\n","ab5ed10e":"**Expected Output**: \n```\nI am happy -> 0.518580\nI am bad -> 0.494339\nthis movie should have been great. -> 0.515331\ngreat -> 0.515464\ngreat great -> 0.530898\ngreat great great -> 0.546273\ngreat great great great -> 0.561561\n```","4efd29a5":"# Part 1: Logistic regression \n\n\n### Part 1.1: Sigmoid\nYou will learn to use logistic regression for text classification. \n* The sigmoid function is defined as: \n\n$$ h(z) = \\frac{1}{1+\\exp^{-z}} \\tag{1}$$\n\nIt maps the input 'z' to a value that ranges between 0 and 1, and so it can be treated as a probability. \n\n<div style=\"width:image width px; font-size:100%; text-align:center;\"><img src='..\/tmp2\/sigmoid_plot.jpg' alt=\"alternate text\" width=\"width\" height=\"height\" style=\"width:300px;height:200px;\" \/> Figure 1 <\/div>","8fd9696c":"* Create the numpy array of positive labels and negative labels.","d83b4d3f":"## Part 3: Training Your Model\n\nTo train the model:\n* Stack the features for all training examples into a matrix `X`. \n* Call `gradientDescent`, which you've implemented above.\n\nThis section is given to you.  Please read it for understanding and run the cell.","692f7c4b":"### Imported functions\n\nDownload the data needed for this assignment. Check out the [documentation for the twitter_samples dataset](http:\/\/www.nltk.org\/howto\/twitter.html).\n\n* twitter_samples: if you're running this notebook on your local computer, you will need to download it using:\n```Python\nnltk.download('twitter_samples')\n```\n\n* stopwords: if you're running this notebook on your local computer, you will need to download it using:\n```python\nnltk.download('stopwords')\n```\n\n#### Import some helper functions that we provided in the utils.py file:\n* `process_tweet()`: cleans the text, tokenizes it into separate words, removes stopwords, and converts words to stems.\n* `build_freqs()`: this counts how often a word in the 'corpus' (the entire set of tweets) was associated with a positive label '1' or a negative label '0', then builds the `freqs` dictionary, where each key is a (word,label) tuple, and the value is the count of its frequency within the corpus of tweets.","1da827c4":"* Create the frequency dictionary using the imported `build_freqs()` function.  \n    * We highly recommend that you open `utils.py` and read the `build_freqs()` function to understand what it is doing.\n    * To view the file directory, go to the menu and click File->Open.\n\n```Python\n    for y,tweet in zip(ys, tweets):\n        for word in process_tweet(tweet):\n            pair = (word, y)\n            if pair in freqs:\n                freqs[pair] += 1\n            else:\n                freqs[pair] = 1\n```\n* Notice how the outer for loop goes through each tweet, and the inner for loop steps through each word in a tweet.\n* The `freqs` dictionary is the frequency dictionary that's being built. \n* The key is the tuple (word, label), such as (\"happy\",1) or (\"happy\",0).  The value stored for each key is the count of how many times the word \"happy\" was associated with a positive label, or how many times \"happy\" was associated with a negative label.","7df3f554":"## Instructions: Implement gradient descent function\n* The number of iterations `num_iters` is the number of times that you'll use the entire training set.\n* For each iteration, you'll calculate the cost function using all training examples (there are `m` training examples), and for all features.\n* Instead of updating a single weight $\\theta_i$ at a time, we can update all the weights in the column vector:  \n$$\\mathbf{\\theta} = \\begin{pmatrix}\n\\theta_0\n\\\\\n\\theta_1\n\\\\ \n\\theta_2 \n\\\\ \n\\vdots\n\\\\ \n\\theta_n\n\\end{pmatrix}$$\n* $\\mathbf{\\theta}$ has dimensions (n+1, 1), where 'n' is the number of features, and there is one more element for the bias term $\\theta_0$ (note that the corresponding feature value $\\mathbf{x_0}$ is 1).\n* The 'logits', 'z', are calculated by multiplying the feature matrix 'x' with the weight vector 'theta'.  $z = \\mathbf{x}\\mathbf{\\theta}$\n    * $\\mathbf{x}$ has dimensions (m, n+1) \n    * $\\mathbf{\\theta}$: has dimensions (n+1, 1)\n    * $\\mathbf{z}$: has dimensions (m, 1)\n* The prediction 'h', is calculated by applying the sigmoid to each element in 'z': $h(z) = sigmoid(z)$, and has dimensions (m,1).\n* The cost function $J$ is calculated by taking the dot product of the vectors 'y' and 'log(h)'.  Since both 'y' and 'h' are column vectors (m,1), transpose the vector to the left, so that matrix multiplication of a row vector with column vector performs the dot product.\n$$J = \\frac{-1}{m} \\times \\left(\\mathbf{y}^T \\cdot log(\\mathbf{h}) + \\mathbf{(1-y)}^T \\cdot log(\\mathbf{1-h}) \\right)$$\n* The update of theta is also vectorized.  Because the dimensions of $\\mathbf{x}$ are (m, n+1), and both $\\mathbf{h}$ and $\\mathbf{y}$ are (m, 1), we need to transpose the $\\mathbf{x}$ and place it on the left in order to perform matrix multiplication, which then yields the (n+1, 1) answer we need:\n$$\\mathbf{\\theta} = \\mathbf{\\theta} - \\frac{\\alpha}{m} \\times \\left( \\mathbf{x}^T \\cdot \\left( \\mathbf{h-y} \\right) \\right)$$","55a546de":"* Train test split: 20% will be in the test set, and 80% in the training set.\n","b028b6aa":"# Twitter Sentiment Analysis(Logistic Regression)\n","b21edb50":"## Part 2: Extracting the features\n\n* Given a list of tweets, extract the features and store them in a matrix. You will extract two features.\n    * The first feature is the number of positive words in a tweet.\n    * The second feature is the number of negative words in a tweet. \n* Then train your logistic regression classifier on these features.\n* Test the classifier on a validation set. \n\n### Instructions: Implement the extract_features function. \n* This function takes in a single tweet.\n* Process the tweet using the imported `process_tweet()` function and save the list of tweet words.\n* Loop through each word in the list of processed words\n    * For each word, check the `freqs` dictionary for the count when that word has a positive '1' label. (Check for the key (word, 1.0)\n    * Do the same for the count for when the word is associated with the negative label '0'. (Check for the key (word, 0.0).)\n","d0cd66e7":"### Part 1.2 Cost function and Gradient\n\nThe cost function used for logistic regression is the average of the log loss across all training examples:\n\n$$J(\\theta) = -\\frac{1}{m} \\sum_{i=1}^m y^{(i)}\\log (h(z(\\theta)^{(i)})) + (1-y^{(i)})\\log (1-h(z(\\theta)^{(i)}))\\tag{5} $$\n* $m$ is the number of training examples\n* $y^{(i)}$ is the actual label of the i-th training example.\n* $h(z(\\theta)^{(i)})$ is the model's prediction for the i-th training example.\n\nThe loss function for a single training example is\n$$ Loss = -1 \\times \\left( y^{(i)}\\log (h(z(\\theta)^{(i)})) + (1-y^{(i)})\\log (1-h(z(\\theta)^{(i)})) \\right)$$\n\n* All the $h$ values are between 0 and 1, so the logs will be negative. That is the reason for the factor of -1 applied to the sum of the two loss terms.\n* Note that when the model predicts 1 ($h(z(\\theta)) = 1$) and the label $y$ is also 1, the loss for that training example is 0. \n* Similarly, when the model predicts 0 ($h(z(\\theta)) = 0$) and the actual label is also 0, the loss for that training example is 0. \n* However, when the model prediction is close to 1 ($h(z(\\theta)) = 0.9999$) and the label is 0, the second term of the log loss becomes a large negative number, which is then multiplied by the overall factor of -1 to convert it to a positive loss value. $-1 \\times (1 - 0) \\times log(1 - 0.9999) \\approx 9.2$ The closer the model prediction gets to 1, the larger the loss.","223a2246":"### Logistic regression: regression and a sigmoid\n\nLogistic regression takes a regular linear regression, and applies a sigmoid to the output of the linear regression.\n\nRegression:\n$$z = \\theta_0 x_0 + \\theta_1 x_1 + \\theta_2 x_2 + ... \\theta_N x_N$$\nNote that the $\\theta$ values are \"weights\". If you took the Deep Learning Specialization, we referred to the weights with the `w` vector.  In this course, we're using a different variable $\\theta$ to refer to the weights.\n\nLogistic regression\n$$ h(z) = \\frac{1}{1+\\exp^{-z}}$$\n$$z = \\theta_0 x_0 + \\theta_1 x_1 + \\theta_2 x_2 + ... \\theta_N x_N$$\nWe will refer to 'z' as the 'logits'.","3f5efa99":"## Import functions and data","c4d2d568":"# Part 6: Predict with your own tweet","01affe7a":"* Likewise, if the model predicts close to 0 ($h(z) = 0.0001$) but the actual label is 1, the first term in the loss function becomes a large number: $-1 \\times log(0.0001) \\approx 9.2$.  The closer the prediction is to zero, the larger the loss.","3af811a3":"#### Instructions: Implement the sigmoid function\n* You will want this function to work if z is a scalar as well as if it is an array.","ab366214":"### Process tweet\nThe given function `process_tweet()` tokenizes the tweet into individual words, removes stop words and applies stemming.","30484981":"# Part 5: Error Analysis\n\nIn this part you will see some tweets that your model misclassified. Why do you think the misclassifications happened? Specifically what kind of tweets does your model misclassify?"}}