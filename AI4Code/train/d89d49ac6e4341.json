{"cell_type":{"b2bc6d47":"code","7378da8e":"code","21f1b1a0":"code","dcb7bded":"code","f84734e9":"code","a2beeab7":"code","1595384f":"code","a7eedf73":"code","f114da60":"markdown","95b90cbb":"markdown","19ef3193":"markdown","59b9e274":"markdown","dd633074":"markdown","006a32fd":"markdown","f1305d10":"markdown","34a47cb2":"markdown"},"source":{"b2bc6d47":"#importar bibliotecas\nimport math\nfrom sympy import *\nimport numpy as np\n\n#definir vetor das 17 vari\u00e1veis vari\u00e1veis \nvariaveis = symbols('o0, o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, o16')\n\n#definir variavel x\nx=Symbol('x')\n\n#definir vetor dos X.\nvetor_x = np.array([-10,-9,-8,-6,-5,-3,-2,0,2,3,4,5,6,8,9,10])\n\n#definir vetor dos Y\nvetor_y = np.array([13.6,9.76,7.03,8.84,9.87,4.57,1.27,2,2.7,-0.57,-4.27,-5.87,-4.84,-3,-5.76,-9.63])\n\n#montar matriz do sistema\nmatriz=np.zeros((17,17)) #'declarar' matriz\nfor i in range(17):\n    for j in range(17):\n        matriz[i][j]=np.dot(vetor_x**j,vetor_x**i)#preencher matriz\n\n#montar vetor que vem depois da igualdade\n\nvetor_dps_igualdade=np.zeros((17))\nfor i in range(len(vetor_dps_igualdade)):\n    vetor_dps_igualdade[i]=np.dot(vetor_y,vetor_x**i)\nvetor_dps_igualdade=np.transpose(vetor_dps_igualdade)\n\n#montar matriz aumentada:\n\nmatriz_aumentada=np.column_stack((matriz,vetor_dps_igualdade))\n\n#resolver sistema com a matriz aumentada\n\nvetor_solucao= next(iter(linsolve(Matrix(matriz_aumentada),variaveis))) \n\n#com os coeficientes calculados, encontrar funcao\nfuncao=0\nfor i in range(len(vetor_solucao)):\n    funcao+=vetor_solucao[i]*x**i\nfuncao\n\n    ","7378da8e":"#texto da funcao para tacar no geogebra\n\ntexto_funcao=str(funcao).replace('**','^').replace('e','*10^')\ntexto_funcao\n","21f1b1a0":"#importar bibliotecas\nimport math\nfrom sympy import *\nimport numpy as np\n\n#definir vetor das 3 vari\u00e1veis vari\u00e1veis alpha\nvariaveis = symbols('o0, o1, o2')\n\n#definir variavel x\nx=Symbol('x')\n\n#definir vetor dos X.\nvetor_x = np.array([-10,-9,-8,-6,-5,-3,-2,0,2,3,4,5,6,8,9,10])\n\n#definir vetor dos Y\nvetor_y = np.array([13.6,9.76,7.03,8.84,9.87,4.57,1.27,2,2.7,-0.57,-4.27,-5.87,-4.84,-3,-5.76,-9.63])\n\n#montar matriz do sistema\nmatriz=np.zeros((3,3)) #'declarar' matriz\nfor i in range(3):\n    for j in range(3):\n        matriz[i][j]=np.dot(vetor_x**j,vetor_x**i)#preencher matriz\n\n#montar vetor que vem depois da igualdade\n\nvetor_dps_igualdade=np.zeros((3))\nfor i in range(len(vetor_dps_igualdade)):\n    vetor_dps_igualdade[i]=np.dot(vetor_y,vetor_x**i)\nvetor_dps_igualdade=np.transpose(vetor_dps_igualdade)\n\n#montar matriz aumentada:\n\nmatriz_aumentada=np.column_stack((matriz,vetor_dps_igualdade))\n\n#resolver sistema com a matriz aumentada\n\nvetor_solucao= next(iter(linsolve(Matrix(matriz_aumentada),variaveis))) \n\n#com os coeficientes calculados, encontrar funcao\nfuncao=0\nfor i in range(len(vetor_solucao)):\n    funcao+=vetor_solucao[i]*x**i\nfuncao","dcb7bded":"#texto da funcao para tacar no geogebra\n\ntexto_funcao=str(funcao).replace('**','^').replace('e','*10^')\ntexto_funcao","f84734e9":"#importar bibliotecas\nimport math\nfrom sympy import *\nimport numpy as np\n\n#definir passo, a, b, y(a) e y(b)\nh=float(input('insira o passo: '))\na=3\nb=-1\ny_b=2\ny_a=4\n#definir vari\u00e1veis\n\nquantidade_de_variaveis=(a-b)\/h\nstring_variaveis=''\nfor i in range(1,int(quantidade_de_variaveis)):\n    string_variaveis+='y'+str(i)+', '\nY=symbols(string_variaveis)\n\n#montar lista com os x\nvetor_x=[]\nfor i in range(int(quantidade_de_variaveis)+1): \n    vetor_x.append(b+i*h)\n\n#montar o sistema de equa\u00e7\u00f5es\nsistema=[]\n\nfor i in range(1,len(vetor_x)-1):\n    if i==1:\n        eq=Y[i]*(h-2)+2*Y[i-1]*(2-h**2)-y_b*(h+2)\n    elif i==len(vetor_x)-2:\n        eq=y_a*(h-2)+2*Y[i-1]*(2-h**2)-Y[i-2]*(h+2)\n    else:\n        eq=Y[i]*(h-2)+2*Y[i-1]*(2-h**2)-Y[i-2]*(h+2)\n    sistema.append(eq)\nvetor_solucao= next(iter(linsolve(sistema,Y))) \n\n\n#printar resultados\n\nfor i in range(len(Y)):\n    print(Y[i],\"=\", vetor_solucao[i])","a2beeab7":"#plotar os pares ordenados para verificar na calculadora grafica se estao corretos\n\nfor i in range(len(Y)):\n    print('(',round(vetor_x[i+1],2), ',',vetor_solucao[i],\")\")\n","1595384f":"#importar bibliotecas\nimport math\nfrom sympy import *\nimport numpy as np\n\n#definir passo, a, b\nh=float(input('insira o passo: '))\na=3\nb=-1\n\n#definir vari\u00e1veis\n\nquantidade_de_variaveis=(a-b)\/h\nstring_variaveis=''\nfor i in range(1,int(quantidade_de_variaveis)):\n    string_variaveis+='y'+str(i)+', '\nY=symbols(string_variaveis)\n\n#definir y(a) e y(b)\ny_b=2\ny_a=(4*h+Y[-1])\/(h+1)\n\n#montar lista com os x\nvetor_x=[]\nfor i in range(int(quantidade_de_variaveis)+1): \n    vetor_x.append(b+i*h)\n\n#montar o sistema de equa\u00e7\u00f5es\nsistema=[]\n\nfor i in range(1,len(vetor_x)-1):\n    if i==1:\n        eq=Y[i]*(h-2)+2*Y[i-1]*(2-h**2)-y_b*(h+2)\n    elif i==len(vetor_x)-2:\n        eq=y_a*(h-2)+2*Y[i-1]*(2-h**2)-Y[i-2]*(h+2)\n    else:\n        eq=Y[i]*(h-2)+2*Y[i-1]*(2-h**2)-Y[i-2]*(h+2)\n    sistema.append(eq)\nvetor_solucao= next(iter(linsolve(sistema,Y))) \n\n\n#printar resultados\n\nfor i in range(len(Y)):\n    print(Y[i],\"=\", vetor_solucao[i])","a7eedf73":"#plotar os pares ordenados para verificar na calculadora grafica se estao corretos\n\nfor i in range(len(Y)):\n    print('(',round(vetor_x[i+1],2), ',',vetor_solucao[i],\")\")","f114da60":"# Encontrar a melhor fun\u00e7\u00e3o pelo m\u00e9todo do quadrados m\u00ednimos","95b90cbb":"# EX 1","19ef3193":"**ATIVIDADE A**","59b9e274":"Aqui vamos conseguir a funcao com 3 coeficientes que multiplicam x^0, x^1 e x^2. ","dd633074":"**ATIVIDADE B**","006a32fd":"Abaixo conseguimos a fun\u00e7\u00e3o na forma de texto para copiar e colar em uma calculadora gr\u00e1fica","f1305d10":"Pegamos a funcao na forma de texto para poder copiar e colar","34a47cb2":"Aqui vamos encontrar a fun\u00e7\u00e3o com os 17 coeficientes que multiplicam x^0 at\u00e9 x^16"}}