{"cell_type":{"4fbb59f2":"code","50d43d29":"code","88099a5a":"code","128a9a9b":"code","47b4d5f8":"code","4b8c8f07":"code","44a18e0a":"code","22e7ce44":"code","f9aead28":"code","ebb0046d":"code","7fb7b852":"code","93374807":"code","d1d0f715":"code","58e877d6":"code","57b229fa":"code","f5de3d0b":"code","990cd748":"code","e793f9ec":"code","7e0a3ec7":"code","b99098ef":"markdown"},"source":{"4fbb59f2":"import os\nimport time\nimport numpy as np\nimport pandas as pd\n%matplotlib inline\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nfrom tqdm import tqdm_notebook\nfrom sklearn.tree import _tree, export_graphviz\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder","50d43d29":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","88099a5a":"def read_data(file_path):\n    print('Loading datasets...')\n    X_train = pd.read_csv(file_path + 'train.csv', sep=',')\n    print('Datasets loaded')\n    return X_train\nPATH = '..\/input\/cat-in-the-dat-ii\/'\nX_train = read_data(PATH)","128a9a9b":"X_train.head(25)","47b4d5f8":"X_train.shape","4b8c8f07":"X_train.columns","44a18e0a":"X_train = X_train.sample(n=50000, replace=False, random_state=42, axis=0)","22e7ce44":"y_train = X_train['target']\ndel X_train['target']\ndel X_train['id']","f9aead28":"#Missing Value Approaches\nprint('Missing Value Approaches')\ncolumns = X_train.columns\nfor cc in tqdm_notebook(columns):\n    X_train[cc] = X_train[cc].fillna(X_train[cc].mode()[0])\n\n#Label Encoding\nprint('Label Encoding')\nfor cc in tqdm_notebook(columns):\n    le = LabelEncoder()\n    le.fit(X_train[cc].values)\n    X_train[cc] = le.transform(X_train[cc].values)\n\n#OneHotEncoding\nprint('OneHotEncoding')\nOHE = OneHotEncoder(dtype='uint16', handle_unknown=\"ignore\")\nOHE.fit(X_train)\nX_train = OHE.transform(X_train)","ebb0046d":"X_train","7fb7b852":"X_train.shape","93374807":"def leaf__depths(estimator, nodeid = 0):\n     left__child = estimator.children_left[nodeid]\n     right__child = estimator.children_right[nodeid]\n     \n     if left__child == _tree.TREE_LEAF:\n         depths = np.array([0])\n     else:\n         left__depths = leaf__depths(estimator, left__child) + 1\n         right__depths = leaf__depths(estimator, right__child) + 1\n         depths = np.append(left__depths, right__depths)\n \n     return depths\n\ndef leaf__samples(estimator, nodeid = 0):  \n     left__child = estimator.children_left[nodeid]\n     right__child = estimator.children_right[nodeid]\n\n     if left__child == _tree.TREE_LEAF: \n         samples = np.array([estimator.n_node_samples[nodeid]])\n     else:\n         left__samples = leaf__samples(estimator, left__child)\n         right__samples = leaf__samples(estimator, right__child)\n         samples = np.append(left__samples, right__samples)\n\n     return samples\n\ndef visualization__estimator(ensemble, tree_id=0):\n\n     plt.figure(figsize=(20,20))\n     plt.subplot(211)\n\n     estimator = ensemble.estimators_[tree_id].tree_\n     depths = leaf__depths(estimator)\n     \n     plt.hist(depths, histtype='step', color='blue', bins=range(min(depths), max(depths)+1))\n     plt.grid(color='black', linestyle='dotted')\n     plt.xlabel(\"Depth of leaf nodes (tree %s)\" % tree_id)\n     plt.show()\n\ndef visualization__forest(ensemble):\n\n     plt.figure(figsize=(20,20))\n     plt.subplot(211)\n\n     depths__all = np.array([], dtype=int)\n\n     for x in ensemble.estimators_:\n         estimator = x.tree_\n         depths = leaf__depths(estimator)\n         depths__all = np.append(depths__all, depths)\n         plt.hist(depths, histtype='step', color='blue', \n                  bins=range(min(depths), max(depths)+1))\n\n     plt.hist(depths__all, histtype='step', color='blue', \n              bins=range(min(depths__all), max(depths__all)+1), \n              weights=np.ones(len(depths__all))\/len(ensemble.estimators_), \n              linewidth=2)\n     plt.grid(color='black', linestyle='dotted')\n     plt.xlabel(\"Depth of leaf nodes\")\n    \n     plt.show()","d1d0f715":"seed = 2020","58e877d6":"start_time = time.clock()\n\nmodel = RandomForestClassifier(n_jobs=-1,n_estimators=100, max_features=5, random_state=seed)\nmodel.fit(X_train, y_train)\n\nvisualization__estimator(model)\n\nend_time = time.clock()\nprint(\"\")\nprint(\"Total Estimation Running Time:\")\nprint(end_time - start_time, \"Seconds\")","57b229fa":"start_time = time.clock()\n\nmodel = RandomForestClassifier(n_jobs=-1,n_estimators=100, max_features=5, random_state=seed)\nmodel.fit(X_train, y_train)\n\nvisualization__forest(model)\n\nend_time = time.clock()\nprint(\"\")\nprint(\"Total Estimation Running Time:\")\nprint(end_time - start_time, \"Seconds\")","f5de3d0b":"start_time = time.clock()\n\nmodel = RandomForestClassifier(n_jobs=-1,n_estimators=100, max_features=5, max_depth=12, random_state=seed)\nmodel.fit(X_train, y_train)\n\nvisualization__forest(model)\n\nend_time = time.clock()\nprint(\"\")\nprint(\"Total Estimation Running Time:\")\nprint(end_time - start_time, \"Seconds\")","990cd748":"start_time = time.clock()\n\nmodel = RandomForestClassifier(n_jobs=-1,n_estimators=100, max_features=5, min_samples_leaf=3, random_state=seed)\nmodel.fit(X_train, y_train)\n\nvisualization__forest(model)\n\nend_time = time.clock()\nprint(\"\")\nprint(\"Total Estimation Running Time:\")\nprint(end_time - start_time, \"Seconds\")","e793f9ec":"start_time = time.clock()\n\nmodel = RandomForestClassifier(n_jobs=-1,n_estimators=100, max_features=3, min_samples_leaf=2, random_state=seed)\nmodel.fit(X_train, y_train)\n\nvisualization__forest(model)\n\nend_time = time.clock()\nprint(\"\")\nprint(\"Total Estimation Running Time:\")\nprint(end_time - start_time, \"Seconds\")","7e0a3ec7":"start_time = time.clock()\n\nmodel = RandomForestClassifier(n_jobs=-1,n_estimators=100, max_features=5, bootstrap=False, random_state=seed)\nmodel.fit(X_train, y_train)\n\nvisualization__forest(model)\n\nend_time = time.clock()\nprint(\"\")\nprint(\"Total Estimation Running Time:\")\nprint(end_time - start_time, \"Seconds\")","b99098ef":"# Visualize the Level of Randomness in the Random Forest Algo\n### A case study with the Categorical Feature Encoding Challenge II Dataset\n\n\n\n\n"}}