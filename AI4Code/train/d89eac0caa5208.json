{"cell_type":{"6dc628e2":"code","e3281cff":"code","db509c29":"code","4f06522d":"code","b2ce76fa":"code","2a0964a2":"code","b22ba5c9":"code","4f7f5659":"code","a7d34f3d":"code","f43533e2":"code","ac9da205":"code","e8ee5416":"code","c6bd89d7":"code","b4671f25":"code","0e64f1f2":"code","6e3df1c1":"code","3bea5298":"code","5bfe2500":"code","4fa82a15":"code","ff6485df":"code","5b68f2f0":"code","25b42889":"code","269cb90d":"code","fcf6d6ca":"markdown","e3879c0b":"markdown","68107182":"markdown"},"source":{"6dc628e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e3281cff":"#Preprocessing\nfrom sklearn import preprocessing\n#Train Test Split\nfrom sklearn.model_selection import train_test_split\n#KNeighborsClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n#For Pltotting and Visualisation\nimport matplotlib.pyplot as plt\nimport seaborn as sns","db509c29":"#Reading data\niris_data = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')\n","4f06522d":"#Drop ID Column\niris_data.drop('Id',axis=1,inplace=True)","b2ce76fa":"# get the number of rows and columns\niris_data.shape","2a0964a2":"#Few Records\niris_data.head(5)","b22ba5c9":"#get to know about number of species (classes)\niris_data['Species'].unique()","4f7f5659":"#if there is any NAN value\niris_data.isnull().values.any()","a7d34f3d":"# check the distribution of the class \niris_data['Species'].value_counts()","f43533e2":"#One Hot Enconding For Different Species \/\/ Convert categorical label to numerical\niris_data['Species'] = iris_data['Species'].map({'Iris-setosa' :0, 'Iris-versicolor' :1, 'Iris-virginica' :2}).astype(int)","ac9da205":"#Displaying above 10 values\niris_data.head(10)","e8ee5416":"#2--D Plot with colour-coding for each flower type\nsns.set_style(\"whitegrid\");\nsns.FacetGrid(iris_data, hue='Species', size=5) \\\n    .map(plt.scatter, \"SepalLengthCm\", \"SepalWidthCm\") \\\n    .add_legend();\nplt.show()","c6bd89d7":"#Pairwise scattter plot: Pair-Plot\nplt.close();\nsns.set_style(\"whitegrid\");\nsns.pairplot(iris_data, hue=\"Species\", size=3);\nplt.show()","b4671f25":"#seperating Features\nx_data = iris_data.drop(['Species'],axis=1)\ny_data = iris_data['Species']","0e64f1f2":"y_data.shape","6e3df1c1":"MinMaxScaler = preprocessing.MinMaxScaler()\nX_data_minmax = MinMaxScaler.fit_transform(x_data)","3bea5298":"#To DataFrame\ndata = pd.DataFrame(X_data_minmax,columns=['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm'])","5bfe2500":"data.head()","4fa82a15":"#Splitting Dataset into test and train\nX_train, X_test, y_train, y_test = train_test_split(data, y_data,\n                                                    test_size=0.2, random_state = 1)","ff6485df":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","5b68f2f0":"#Selecting different Ks in range [1,10] and choose the one with high accuracy\nfrom sklearn import metrics\nK_range = list(range(1,26))\nacc = [] \nfor i in K_range:\n    \n    #Train Model and Predict  \n    knn = KNeighborsClassifier(n_neighbors = i).fit(X_train,y_train)\n    y_pred=knn.predict(X_test)\n    acc.append(metrics.accuracy_score(y_test, y_pred))\n    \n    \n\nacc","25b42889":"knn_model = KNeighborsClassifier(n_neighbors = 1).fit(X_train,y_train)\nypred=knn_model.predict(X_test)","269cb90d":"metrics.accuracy_score(y_test, ypred)","fcf6d6ca":" 1. petal_length and petal_width are the most useful features to identify various flower types.\n 2. While Setosa can be easily identified (linearly seperable), Virnica and Versicolor have some overlap (almost linearly           seperable).","e3879c0b":"#We can see that with K = 1,2,3,4,6,7,8 we are getting 100 % accuracy, so we are going to select K=1","68107182":"We can separate setosa with other flower using SepalLengthCm ,  SepalWidthCm"}}