{"cell_type":{"d4271ce1":"code","5bc814c4":"code","9b5a7af1":"code","e1b720d1":"code","0628c8a0":"code","dbaae4b6":"code","8979b5bb":"code","97120edb":"code","b38a6f6f":"code","1fbaa5ed":"code","e911e6fc":"code","c7d8976a":"code","b1471be0":"code","4ba73bd9":"code","75aeb4d3":"code","e09f2d76":"code","2e8ae422":"code","e42c02a4":"code","f5c59f23":"code","df56b35f":"code","002d4a79":"code","f67c46a8":"code","48b6023e":"code","d01046ec":"code","8e01c673":"code","c8ceedab":"code","84c7979c":"code","31dde451":"code","9a83d50e":"code","54e8cc6d":"code","d04236c3":"code","c1a9ec83":"code","e320c4a1":"code","8322c211":"code","4bed6c44":"code","0c78d625":"code","eb20c07a":"code","ee2dd94d":"code","4fde58f0":"code","29b77a1b":"markdown","dace1e87":"markdown","bfffca22":"markdown","3b564e89":"markdown","b3e78305":"markdown","f8b97ad5":"markdown","8dbd982a":"markdown","bafeb689":"markdown","338fbbe9":"markdown","86213bfc":"markdown","48add60d":"markdown","cc5418bd":"markdown","76e09888":"markdown","56ac1a24":"markdown","127cab89":"markdown","b9d43b55":"markdown","8a251714":"markdown","611043cb":"markdown","8a27b4ef":"markdown","ad3a576b":"markdown","b72b9c4f":"markdown","85e85e22":"markdown"},"source":{"d4271ce1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport Geohash\n\nimport time\n\nimport xgboost as xgb\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import mean_squared_error\n\n\nimport seaborn as sns","5bc814c4":"df = pd.read_csv('..\/input\/training.csv')","9b5a7af1":"df = df.sample(10000)","e1b720d1":"def round3(x):\n    return round(float(x)*10000)\/10000","0628c8a0":"df['lat'] = df.apply(lambda x: round3(Geohash.decode_exactly(x['geohash6'])[0]), axis=1)\n\ndf['lng'] = df.apply(lambda x: round3(Geohash.decode_exactly(x['geohash6'])[1]), axis=1)","dbaae4b6":"df['hour'] = df.apply(lambda x: float(x['timestamp'].split(':')[0]), axis=1)\n\ndf['minute'] = df.apply(lambda x: float(x['timestamp'].split(':')[1]), axis= 1)","8979b5bb":"df['dow'] =  df.apply(lambda x: x['day']%7, axis =1)","97120edb":"df.info()","b38a6f6f":"df.corr()['demand']","1fbaa5ed":"sns.lineplot(data=df, x='hour', y='demand')","e911e6fc":"sns.lineplot(data=df, x='dow', y='demand')","c7d8976a":"sns.lineplot(data=df, x='lat', y='demand')","b1471be0":"sns.lineplot(data=df, x='lng', y='demand')","4ba73bd9":"sns.scatterplot(data=df, x='lng', y='lat', hue='demand')","75aeb4d3":"sns.lineplot(data=df, x='minute', y='demand')","e09f2d76":"selectedColumn = ['lat','lng','hour','dow']","2e8ae422":"clf = RandomForestRegressor(max_depth=25,  n_estimators=240)","e42c02a4":"dfTrain, dfTest = train_test_split(df,test_size=0.2)","f5c59f23":"clf.fit(X=dfTrain[selectedColumn],y=dfTrain['demand'])","df56b35f":"dfTest['predict'] = clf.predict(X=dfTest[selectedColumn])","002d4a79":"mean_squared_error(dfTest['demand'], dfTest['predict'])","f67c46a8":"xgb_reg = xgb.XGBRegressor(learning_rate=0.01,max_depth=25,n_estimators=240, tree_method='hist')","48b6023e":"xgb_reg.fit(X=dfTrain[selectedColumn],y=dfTrain['demand'])","d01046ec":"dfTest['predict_xgb'] = xgb_reg.predict(data=dfTest[selectedColumn])","8e01c673":"mean_squared_error(dfTest['demand'], dfTest['predict_xgb'])","c8ceedab":"xgb.plot_importance(xgb_reg)","84c7979c":"xgb.plot_importance(xgb_reg, importance_type='cover')","31dde451":"df = pd.read_csv('..\/input\/training.csv')","9a83d50e":"df['lat'] = df.apply(lambda x: round3(Geohash.decode_exactly(x['geohash6'])[0]), axis=1)\n\ndf['lng'] = df.apply(lambda x: round3(Geohash.decode_exactly(x['geohash6'])[1]), axis=1)","54e8cc6d":"df['hour'] = df.apply(lambda x: float(x['timestamp'].split(':')[0]), axis=1)\n\ndf['minute'] = df.apply(lambda x: float(x['timestamp'].split(':')[1]), axis= 1)","d04236c3":"df['dow'] =  df.apply(lambda x: x['day']%7, axis =1)","c1a9ec83":"dfTrain, dfTest = train_test_split(df,test_size=0.2)","e320c4a1":"xgb_reg = xgb.XGBRegressor(learning_rate=0.01,max_depth=25,n_estimators=240, tree_method='gpu_hist')","8322c211":"starttime = time.time()\nxgb_reg.fit(X=dfTrain[selectedColumn],y=dfTrain['demand'])\nprint('Training Time (s): ', time.time() - starttime)","4bed6c44":"dfTest['predict_xgb'] = xgb_reg.predict(data=dfTest[selectedColumn])","0c78d625":"mean_squared_error(dfTest['demand'], dfTest['predict_xgb'])","eb20c07a":"xgb_reg.save_model('xgbReg.model')","ee2dd94d":"def predictDemand(savedModel, geohash6='qp03wc', day=100, timestamp='00:00'):\n    \n    import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n    import Geohash\n    \n    def round3(x):\n        return round(float(x)*10000)\/10000\n    \n    \n    lat = round3(Geohash.decode_exactly(geohash6)[0])\n    lng = round3(Geohash.decode_exactly(geohash6)[1])\n    \n    hour = float(timestamp.split(':')[0])\n    \n    dow = day%7\n    \n    dataX = pd.DataFrame({'lat': [lat], 'lng': [lng], 'hour': [hour], 'dow': [dow] })\n    \n    output = savedModel.predict(dataX)\n    \n    return output[0]\n                 \n                 ","4fde58f0":"import xgboost as xgb\n\n# load model\nsavedModel = xgb.XGBRegressor()\nsavedModel.load_model('xgbReg.model')\n\npredictDemand(savedModel,geohash6='qp09sy', day=39, timestamp='3:0' )","29b77a1b":"Sample some of data; for exploration and earlier iteration","dace1e87":"Function to round the latitude\/longitude decimals points to match the geohash6 floating error and addressing dimensional overfitting.","bfffca22":"Convert geohash6 to lat,lng. Represent spatial features","3b564e89":"Get the data into the dataframe","b3e78305":"#XGBRegressor","f8b97ad5":"Predict Demand Function, consume \n1. Saved Model\n2. geohash6\n3. day\n4. timestamp","8dbd982a":"Import libraries\npandas, numpy, xgboost, randomforest and sklearn tools","bafeb689":"Now, we repeat the above steps with full data","338fbbe9":"Usage Example","86213bfc":"Compute day of week, as the users behavior are affected by the day factor eg:weekeends, weekdays.","48add60d":"Below is the function to do prediction with the saved model.","cc5418bd":"#Random Forest","76e09888":"In conclusion, both random forest and xgboost regressor work well on the dataset and the use cases. \n\nHowever, there are some variables like weather, calendar(holidays) that may help to further ","56ac1a24":"# XGBRegressor on GPU\n\nwe choose xgboost regressor over the sklearn random forest for full dataset, as xgb boost support GPU, and we need to do on GPU as our data is quite big.","127cab89":"Save the model","b9d43b55":"Select only high correlation features, from the analysis we can see the minute features doest not vary much thus we remove it","8a251714":"Features correlation to the target variable 'demand'","611043cb":"we can see some high demand areas are clustered, thus we can say the demands are spatio dependant","8a27b4ef":"Some simple Analysis","ad3a576b":"Get the dataset basic info","b72b9c4f":"Split timestamp into hour and minute\n","85e85e22":"Conclusion: XGBoost Regressor run well with whole data (80% training, 20% testing) and the MSE is very good 0.0039.\n\nFor future plan, we can add more data such as weather, local calendar etc."}}