{"cell_type":{"b1ad170e":"code","fd2eb774":"code","11297d50":"code","f228cfc3":"code","de48ecc6":"code","81533e93":"code","cad0b6c9":"code","89727e36":"code","8e9dd68c":"code","6af7b6d0":"code","8435b2ae":"code","4299318d":"code","59e5c031":"code","5cc0991c":"code","e737c885":"code","6bd7f872":"code","89f46bed":"code","db3d1dc0":"code","bf28c642":"code","5cf68869":"code","c07b5747":"code","32c75fd6":"code","8358736d":"code","2552329c":"code","38aad9d8":"code","f4ffd479":"code","a308eae5":"code","d02d1031":"code","c9095f7c":"code","ea0009e3":"code","a6ef80e3":"code","8e52f871":"code","e59bf017":"code","0ed0e396":"code","a2e0fc83":"code","58ee6cc7":"code","2eced3be":"code","93e47544":"code","15ed44e7":"code","f3219abd":"code","9f7f076a":"code","00293b19":"code","5be79919":"markdown","07adf2bb":"markdown"},"source":{"b1ad170e":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.datasets.mnist import load_data\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.layers import Conv2D, Dense, AveragePooling2D, AvgPool2D, MaxPool2D, Activation, MaxPooling2D, Flatten, Input\n\n","fd2eb774":"(x_train, y_train), (x_test, y_test) = load_data(path=\"mnist.npz\")\nnum_classes = 10\n#!find ~ -name mnist.npz\nx_test_org = x_test\n!ls -l ~\/.keras\/datasets\n\nprint (f'Shape of \"x_train\" - {x_train.shape}')\nprint (f'Shape of \"y_train\" - {y_train.shape}')\nprint (f'Shape of \"x_test\" - {x_test.shape}')\nprint (f'Shape of \"y_test\" - {y_test.shape}')","11297d50":"import imageio\n\n\nimages = []\nfor i in range(100):\n    images.append(x_train[i,:,:])\nkargs = { 'duration': 0.4 }    \nimageio.mimsave('.\/movie.gif', images, **kargs)\nfrom IPython.display import HTML\nHTML('<img src=\".\/movie.gif\" alt=\"Digits\"  width=\"20%\" \/>')","f228cfc3":"import imageio\nfrom IPython.display import HTML\ndef images_arr_2_html_gif(images_arr, n=0, duration=0.4):\n    images = []\n    if n==0:\n        n=images_arr.shape[0]\n    print (n)\n    for i in range(n):\n        images.append(images_arr[i,:,:])\n    kargs = { 'duration': duration }    \n    imageio.mimsave('.\/movie.gif', images, **kargs)\n    \n\n\nimages_arr_2_html_gif(x_train, 100)\nHTML('<img src=\".\/movie.gif\" alt=\"Digits\"  width=\"20%\" \/>')","de48ecc6":"import cv2\nimport matplotlib.pyplot as plt\nfrom skimage import measure\nimg = x_train[16,:,:]\n\n\nimg_th = cv2.threshold(img, 0.5, 1, cv2.THRESH_BINARY)[1]\nimg_lbl = measure.label(img_th)\nbg_lbl = measure.label(1-img_th)\n\nprint (type(img_th))\n\n#print (img_th)\nplt.figure(figsize=(3,3))\nplt.imshow(bg_lbl)","81533e93":"import numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nfrom skimage import measure\n\nimg = x_train[16,:,:]\n\nMIN_SIZE = 16\n\ndef get_mun_of_lebels(img, min_size):\n    \n    i_lbl, l_n = measure.label(img, return_numbool=True)\n    c = 0\n    for i in range(l_n):\n        n = np.count_nozero(i_lbl == i)\n        if n >= min_size:\n            c += 1\n    return c, i_lbl    \n    \n\n\ndef get_num_of_labels_digit_bg(img):\n\n    img_th = cv2.threshold(img, 0.5, 1, cv2.THRESH_BINARY)[1]\n\n    img_lbl = measure.label(img_th)\n    bg_lbl = measure.label(1-img_th)\n    \n    f_img_lbl = 0 if np.amax(img_lbl)<2 else 1\n    f_bg_lbl = 0 if np.amax(bg_lbl)<2 else 1\n    \n    return [f_img_lbl, f_bg_lbl]\n    \ndef get_featurs(x_imgs):\n    N_tr = x_imgs.shape[0]\n    yf_imgs = np.zeros((N_tr, 2))\n\n    for x, yf in zip(x_imgs, yf_imgs):\n        f_img_lbl , f_bg_lbl = get_num_of_labels_digit_bg(x)\n        yf[0] = f_img_lbl\n        yf[1] = f_bg_lbl\n    return yf_imgs\n\nyf_test = get_featurs(x_test)\nyf_train = get_featurs(x_train)\n\n    \n\n\n","cad0b6c9":"train_f0_n, train_f1_n = sum(yf_train.astype(int))\ntest_f0_n, test_f1_n = sum(yf_test.astype(int))\n\n#print (yf_train)    \nprint(f'Train feature 0 - {train_f0_n}, feature 1 - {train_f1_n} from {yf_train.shape[0]}\\n')  \nprint(f'Test feature 0 - {test_f0_n}, feature 1 - {test_f1_n} from {yf_test.shape[0]}')   \n\n","89727e36":"x_train_f0 = x_train[yf_train[:,0]==1,:,:]\nx_train_f1 = x_train[yf_train[:,1]==1,:,:]","8e9dd68c":"images_arr_2_html_gif(x_train_f0, 100)\nHTML('<img src=\".\/movie.gif\" alt=\"Digits\"  width=\"20%\" \/>')","6af7b6d0":"images_arr_2_html_gif(x_train_f1, 100)\nHTML('<img src=\".\/movie.gif\" alt=\"Digits\"  width=\"20%\" \/>')","8435b2ae":"x_train = x_train.astype(\"float32\") \/ 255\nx_test = x_test.astype(\"float32\") \/ 255\nx_train = np.expand_dims(x_train, -1)\nx_test = np.expand_dims(x_test, -1)\n\n# convert class vectors to binary class matrices\ny_train_ = to_categorical(y_train, num_classes)\n\ny_train_cf = np.concatenate((y_train_, yf_train), axis=1)\n\n\n#y_test = to_categorical(y_test, num_classes)\nprint (f'Shape of \"x_train\" - {x_train.shape}')\nprint (f'Shape of \"y_train\" - {y_train_cf.shape}')\nprint (f'Shape of \"x_test\" - {x_test.shape}')\nprint (f'Shape of \"y_test\" - {y_test.shape}')\n","4299318d":"from tensorflow.python.keras import layers\nfrom tensorflow.python.keras.engine import training\ndef GetModel():\n\n    img_input = layers.Input(shape=(28,28,1))\n    x = layers.Conv2D(filters=8, kernel_size=(3, 3), strides=1, padding='same', activation='relu')(img_input)\n    x = layers.MaxPool2D(pool_size=(2, 2))(x)\n\n    x = layers.Conv2D(filters=16, kernel_size=(3, 3), strides=1, padding='same', activation='relu')(x)\n    x = layers.MaxPool2D(pool_size=(2, 2))(x)\n    \n    x = layers.Conv2D(filters=32, kernel_size=(3, 3), strides=1, padding='same', activation='relu')(x)\n    x = layers.MaxPool2D(pool_size=(2, 2))(x)\n    x = layers.Conv2D(filters=64, kernel_size=(3, 3), strides=1, padding='same', activation='relu')(x)\n\n    x = layers.AveragePooling2D()(x)\n    \n    fm = layers.Flatten()(x)\n    x1 = layers.Dense(128, activation='relu')(fm)\n    x1 = layers.Dense(64, activation='relu')(x1)\n   # x2 = layers.Dense(32, activation='relu')(fm)\n\n    predictions_1 = layers.Dense(10, activation='softmax')(x1)\n    #predictions_2 = layers.Dense(2, activation='linear')(x1)\n    predictions_2 = layers.Dense(2, activation='sigmoid')(x1)\n    predictions = layers.Concatenate()([predictions_1, predictions_2])\n    model = training.Model(inputs=img_input, outputs=predictions)\n    return model\n\n\nmodel = GetModel()\nmodel.summary()","59e5c031":"import keras.backend as K\nimport tensorflow as tf\n\n\ndef custom_loss(y_true, y_pred):\n    \n    c_y_true = y_true[:, :10]    \n    c_y_pred = y_pred[:, :10]\n    f_y_true = y_true[:, 10:]    \n    f_y_pred = y_pred[:, 10:]\n\n    class_error = K.categorical_crossentropy(c_y_true, c_y_pred)\n    \n    feature_error = (K.sum(K.square(f_y_true - f_y_pred), axis=1))\n\n    loss = class_error + feature_error\n    \n    return loss\n\ny_true_ = [[0, 1.0, 0,0,0,0,0,0,0,0,1,0], [0, 1.0, 0,0,0,0,0,0,0,0,-1,1]]\ny_pred_ = [[1, 0.0, 0,0,0,0,0,0,0,0,1,0], [0, 1.0, 0,0,0,0,0,0,0,0,1,0]]\n\ny_true = tf.convert_to_tensor(y_true_)\ny_pred = tf.convert_to_tensor(y_pred_)\n#    y_true, dtype=None, dtype_hint=None, name=None)\n\nloss = custom_loss(y_true , y_pred)\nprint (loss)","5cc0991c":"print (x_train.shape)\nprint (y_train_cf.shape)\n","e737c885":"print (y_train_cf[:10,:])\n\nf0 = y_train_cf[y_train_cf[:,10]>0.5,:]\nprint (f0)","6bd7f872":"pred_test_cf = model.predict(x_train[:10,:])\nprint (np.round(pred_test_cf,2))\n\n","89f46bed":"from tensorflow.keras.optimizers import Adam, SGD\nfrom tensorflow.keras.models import save_model, load_model\n\n\nx_t = x_train[0:10000,...]\ny_y = y_train_cf[0:10000,...]\nsgd = SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)\nopt = Adam(lr=1e-3,clipnorm=100)\n#model.compile(optimizer=opt, loss='mse', metrics=['accuracy'])\nmodel.compile(optimizer=sgd, loss=custom_loss, metrics=['accuracy'])","db3d1dc0":"model.fit(x=x_t, y=y_y, batch_size=256, epochs=100)\nmodel.save_weights('model_weights.h5')","bf28c642":"from tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import save_model, load_model\nif false:\n    t_callback = tf.keras.callbacks.TensorBoard(log_dir = '\/kaggle\/working', histogram_freq = 1)\n\n    #model = load_model('..\/input\/ex-00-mnist-digits-v2\/model.h5')\n    opt = Adam(lr=1e-2)\n    #model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\n    #model.compile(optimizer=opt, loss=custom_loss, metrics=['accuracy'])\n    model.compile(optimizer=opt, loss='mean_squared_error', metrics=['accuracy'])\n    for epoc in range(1):\n        model.fit(x=x_train, y=y_train_cf, batch_size=256, epochs=10, callbacks = [t_callback,])\n    #save_model(model, '.\/model.h5') \n","5cf68869":"pred_test_cf = model.predict(x_test)\n\npred_test = pred_test_cf[:,:10]\npred_test_index = np.argmax(pred_test, axis=1)\n\npred_test_f = pred_test_cf[:,10:]","c07b5747":"print (pred_test_index)\nprint (y_test)\nn = len(y_test)\npred_err = pred_test_index[pred_test_index != y_test]\n\nerr_precent = 100 * len(pred_err)\/n\naccuracy = 100 - err_precent\n\nprint (f'Accuracy on test = {accuracy}%')","32c75fd6":"print (pred_test_f)","8358736d":"#x_train_f0 = x_train[yf_train[:,0]==1,:,:]\n#x_train_f1 = x_train[yf_train[:,1]==1,:,:]\n\nx_test_f0 = x_test[pred_test_f[:,0]>0.5,:,:]\nx_test_f1 = x_test[pred_test_f[:,1]>0.5,:,:]\nprint (x_test.shape)\nprint(x_test_f0.shape)\nprint(x_test_f1.shape)\n\n","2552329c":"images_arr_2_html_gif(x_test_f0, 88, duration=1)\nHTML('<img src=\".\/movie.gif\" alt=\"Digits\"  width=\"20%\" \/>')","38aad9d8":"images_arr_2_html_gif(x_test_f1, 100, duration=1)\nHTML('<img src=\".\/movie.gif\" alt=\"Digits\"  width=\"20%\" \/>')","f4ffd479":"pred_test_f","a308eae5":"err = (np.round(yf_test) - np.round(pred_test_f)).astype(int)\nf0_err = err[:,0]\nf1_err = err[:,1]","d02d1031":"print (f0_err)","c9095f7c":"x_test_f0_fp = x_test[f0_err==-1, :, :]\nx_test_f0_fn = x_test[f0_err==1, :, :]\nx_test_f1_fp = x_test[f1_err==-1, :, :]\nx_test_f1_fn = x_test[f1_err==1, :, :]\nx_test_f0_t = x_test[f0_err==0, :, :]\nx_test_f1_t = x_test[f1_err==0, :, :]\nprint (x_test_f0_fp.shape)\n\nprint (x_test.shape[0])\nprint (x_test_f0_fn.shape)\nprint (x_test_f1_fp.shape)\nprint (x_test_f1_fn.shape)\nprint (x_test_f0_t.shape)\nprint (x_test_f1_t.shape)\n","ea0009e3":"images_arr_2_html_gif(x_test_f0_fp, 0, 1)\nHTML('<img src=\".\/movie.gif\" alt=\"Digits\"  width=\"20%\" \/>')","a6ef80e3":"images_arr_2_html_gif(x_test_f0_fn, 0, 1)\nHTML('<img src=\".\/movie.gif\" alt=\"Digits\"  width=\"20%\" \/>')","8e52f871":"images_arr_2_html_gif(x_test_f1_fn, 0, 1)\nHTML('<img src=\".\/movie.gif\" alt=\"Digits\"  width=\"20%\" \/>')","e59bf017":"images_arr_2_html_gif(x_test_f1_fp, 0, 1)\nHTML('<img src=\".\/movie.gif\" alt=\"Digits\"  width=\"20%\" \/>')","0ed0e396":"y_test_c = to_categorical(y_test, num_classes)\nloss, accuracy = model.evaluate(x=x_test, y=y_test_c, batch_size=500)\nprint (f'Accuracy on test = {accuracy}%')","a2e0fc83":"import glob\nimport os \n\nfiles = glob.glob('.\/*.gif')\nfor f in files:\n   os.remove(f)","58ee6cc7":"for i in range(10):\n    images =[]\n    x_test_sub = x_test_org[pred_test_index == i ,:,:]\n    y_test_sub =  y_test[pred_test_index == i]\n\n    for j in range(10):\n        if i==j: \n            continue\n       # pritn()\n        x_test_sub_sub = x_test_sub[y_test_sub == j,:,:]\n        for img in x_test_sub_sub:\n            images.append(img)\n    if len(images) ==0:\n        continue\n    kargs = { 'duration': 1 }    \n    imageio.mimsave(f'.\/{i}.gif', images, **kargs)            ","2eced3be":"from IPython.display import HTML\n\n\nhtml = r'<table border=\"1\" cellspacing=\"1\" cellpadding=\"1\"  width=\"80%\"><tr>'\n\n\nfor i in range(10):\n    html += f'<td align=\"center\"><img src=\".\/{i}.gif\"  width=\"100%\" \/><br \/><p style=\"text-align:center;\">{i}<\/td>'\nhtml += '<\/p><\/tr>'\nHTML(html)\n","93e47544":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix\nimport pylab as pl\n\ncm = confusion_matrix(y_test, pred_test_index)\n#plot_confusion_matrix(cm)\n\nprint (cm)","15ed44e7":"import matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\ncmd = ConfusionMatrixDisplay(cm, display_labels=[str(i) for i in range(10)])\nfig, ax = plt.subplots(figsize=(10,10))\ncmd.plot(ax=ax)\nax.set_xlabel('Predicted', fontsize = 18)\nax.set_ylabel('True', fontsize = 18)\n\n#cmd.ax_.set(xlabel='Predicted', ylabel='True', fontsize=18)","f3219abd":"import requests\nlike_url = 'https:\/\/tipsmate.com\/fireuikit\/images\/like.gif'\n\nresponse = requests.get(like_url)\nlike_gif_data = response.content\nopen(f'.\/__TEST__.gif', \"wb\").write(like_gif_data)\n","9f7f076a":"import requests\nlike_url = 'https:\/\/thegamblingcommunity.com\/forum\/uploads\/reactions\/thumbsup.gif'\n\nresponse = requests.get(like_url)\nlike_gif_data = response.content\n\nkargs = { 'duration': 1 }  \n\n\n\nfor i in range(10):\n    \n    x_test_sub = x_test_org[pred_test_index == i ,:,:]\n    y_test_sub =  y_test[pred_test_index == i]\n\n    for j in range(10):\n        images =[]\n\n        if i==j: \n            continue\n        x_test_sub_sub = x_test_sub[y_test_sub == j,:,:]\n        for img in x_test_sub_sub:\n            images.append(img)\n        if len(images) ==0:\n            open(f'.\/{i}-{j}.gif', \"wb\").write(like_gif_data)\n        else:\n            imageio.mimsave(f'.\/{i}-{j}.gif', images, **kargs)    ","00293b19":"from IPython.display import HTML\n\n\nhtml = r'<table border=\"1\" cellspacing=\"1\" cellpadding=\"1\"  width=\"50%\">'\n\nfor j in range(10):\n    html += '<tr>'\n    for i in range(10):\n        if i==j:\n            html += f'<td align=\"center\"><br \/><p style=\"text-align:center;font-size:300%;\">{i}<\/p><\/td>'\n        else:\n            html += f'<td align=\"center\"><img src=\".\/{i}-{j}.gif\"  width=\"100%\" \/><br \/><p style=\"text-align:center;\">{i}<\/p><\/td>'\n    html += '<\/tr>'\nHTML(html)\n","5be79919":"## Dounload mnist.npz into \/root\/.keras\/datasets\/ ","07adf2bb":"# Exercise 00 - MNIST digits "}}