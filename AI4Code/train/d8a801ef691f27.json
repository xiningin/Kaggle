{"cell_type":{"1ead95c4":"code","31fc0520":"code","b52f5468":"code","16b17e0d":"code","0c95a4e2":"code","200abf9d":"code","b393ef26":"code","8896466b":"code","d8f63866":"code","469e753a":"code","c6c04a23":"code","e329dd9e":"code","0d0e5a75":"code","f69a7760":"code","42f0bb4a":"code","29c38868":"code","ef0c70d7":"code","a446d89b":"code","aa4d58a4":"code","1fd9dc5a":"code","c68e6bdd":"code","54d4ee6e":"code","88629312":"code","f0a1895f":"code","57f47c32":"code","61f746e9":"code","03b92b3a":"code","66a7c51d":"code","e3f0fba6":"code","bebbf9d6":"code","54bbf662":"code","0310353d":"code","37c6fe8c":"code","713cb1d4":"code","8bf2393e":"code","038325bd":"code","787e1c36":"code","5824052e":"code","00c05cc8":"code","e6fd5180":"code","9534c059":"code","2b61b6a2":"code","0afa74d3":"code","e1459ef7":"code","2a4a7e89":"code","90fb5997":"code","a4122f7c":"code","82f87269":"code","a78f8556":"code","f608155e":"code","16911363":"code","b17be1b9":"code","36da85fc":"code","887f5d50":"code","d652d598":"code","6254a7f2":"markdown","6074d362":"markdown","1dd518ec":"markdown","53b17717":"markdown","467059dc":"markdown","f1298bc2":"markdown","90f5555e":"markdown","03581225":"markdown"},"source":{"1ead95c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport folium\nfrom geopy.distance import distance\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\nplt.style.use('seaborn-whitegrid')\n%matplotlib inline","31fc0520":"df = pd.read_csv(\"..\/input\/mahadir_driving_data.csv\")","b52f5468":"df.info()","16b17e0d":"df.head()","0c95a4e2":"df.groupby(['Data Source','Data'], as_index=False).agg({'Timestamp':'count'})","200abf9d":"df['timestamp'] = pd.to_datetime(df['Timestamp'])\ndf['gp'] = df['Data Source'] + \" (\" + df['Data'] + \")\"","b393ef26":"df = df.drop(columns=['Timestamp'])","8896466b":"df.head()","d8f63866":"df = df.pivot_table(index='timestamp', columns='gp', values=['Raw Value'], aggfunc='first')","469e753a":"df.columns = df.columns.droplevel()","c6c04a23":"df = df.reset_index()","e329dd9e":"df.columns","0d0e5a75":"len(df)","f69a7760":"df = df.dropna(subset=['GPS (Latitude)', 'GPS (Longitude)'])","42f0bb4a":"len(df)","29c38868":"df[['timestamp','GPS (Latitude)','GPS (Longitude)','GPS (Speed (estimated))']].head()","ef0c70d7":"df['GPS (Speed (estimated))'] = df['GPS (Speed (estimated))'].astype('float64')\ndf['Altimeter (Barometer) (Relative Altitude)'] = df['Altimeter (Barometer) (Relative Altitude)'].astype('float64')\ndf['GPS (Latitude)'] = df['GPS (Latitude)'].astype('float64')\ndf['GPS (Longitude)'] = df['GPS (Longitude)'].astype('float64')\n\ndf['Gyrometer (raw) (x)'] = df['Gyrometer (raw) (x)'].astype('float64')\ndf['Gyrometer (raw) (y)'] = df['Gyrometer (raw) (y)'].astype('float64')\ndf['Gyrometer (raw) (z)'] = df['Gyrometer (raw) (z)'].astype('float64')\n\ndf['Acceleration (total) (x)'] = df['Acceleration (total) (x)'].astype('float64')\ndf['Acceleration (total) (y)'] = df['Acceleration (total) (y)'].astype('float64')\ndf['Acceleration (total) (z)'] = df['Acceleration (total) (z)'].astype('float64')","a446d89b":"print(df['GPS (Latitude)'].min(),df['GPS (Latitude)'].max())\nprint(df['GPS (Longitude)'].min(),df['GPS (Longitude)'].max())","aa4d58a4":"# convert ms\/s to km\/h\ndf['km\/h'] = df['GPS (Speed (estimated))'] * 3.6","1fd9dc5a":"# our plotting utilities\ndef plot(vals, title=\"\", xlabel=\"\", ylabel='', colorbar=None):\n    fig = plt.figure(figsize=(14,3))\n    ax = plt.subplot(111)\n    for val in vals:\n        label = ''\n        c = 'b'\n        if 'label' in val:\n            label = val['label']\n        if 'c' in val:\n            c = val['c']\n        if 'x' in val:\n            x = val['x']\n        else:\n            x = [x for x in range(len(val['y']))]\n        ax.plot(x,val['y'], label=label,c=c)\n\n    # Shrink current axis by 20%\n    box = ax.get_position()\n    ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])\n\n    # Put a legend to the right of the current axis\n    ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n    plt.xlabel(xlabel)\n    plt.ylabel(ylabel)\n    plt.title(title)\n    if colorbar is not None:\n        cax, _ = matplotlib.colorbar.make_axes(ax)\n        cbar = matplotlib.colorbar.ColorbarBase(cax, cmap=colorbar['cmap'], norm=colorbar['norm'])\n    plt.show()","c68e6bdd":"vals = [\n        {'x':df['timestamp'].values,'y':df['Gyrometer (raw) (x)'].values, 'label':'x', 'c':'r'},\n        {'x':df['timestamp'].values,'y':df['Gyrometer (raw) (y)'].values, 'label':'y', 'c':'y'},\n        {'x':df['timestamp'].values,'y':df['Gyrometer (raw) (z)'].values, 'label':'z', 'c':'b'},\n       ]\nplot(vals, title='Gyro', xlabel='timestamp', ylabel='rad\/s')","54d4ee6e":"vals = [\n        {'x':df['timestamp'].values,'y':df['Acceleration (total) (x)'].values, 'label':'x', 'c':'r'},\n        {'x':df['timestamp'].values,'y':df['Acceleration (total) (y)'].values, 'label':'y', 'c':'y'},\n        {'x':df['timestamp'].values,'y':df['Acceleration (total) (z)'].values, 'label':'z', 'c':'b'},\n       ]\nplot(vals, title='Accelerometer (total)', xlabel='timestamp', ylabel='m\/s2')","88629312":"vals = [\n        {'x':df['timestamp'].values,'y':df['Altimeter (Barometer) (Relative Altitude)'].values, 'label':'x', 'c':'r'}\n       ]\nplot(vals, title='Altimeter (Barometer) (Relative Altitude)', xlabel='timestamp', ylabel='meter')","f0a1895f":"df['Altimeter (Barometer) (Relative Altitude)'].describe()","57f47c32":"#3.99950996507332,101.152279800398 \n#4.50031313114287,101.310494793673\nnorm = matplotlib.colors.Normalize(vmin=df['Altimeter (Barometer) (Relative Altitude)'].min(), vmax=df['Altimeter (Barometer) (Relative Altitude)'].max())\ncmap = matplotlib.cm.get_cmap('jet')\nm = folium.Map(location=[4.50031313114287,101.310494793673],\n    zoom_start=10, width=1200, height=480,  tiles='Stamen Terrain')\n\n# Plot coordinates\ni = 0\nfor i in range(len(df)):\n    rgba = cmap(norm(df.iloc[i]['Altimeter (Barometer) (Relative Altitude)']))\n    color = matplotlib.colors.rgb2hex(rgba)\n    # mark only every 5 point\n    if i%5==0:\n        _ = folium.CircleMarker(location=[df.iloc[i]['GPS (Latitude)'], df.iloc[i]['GPS (Longitude)']], radius=1,color=color, fill_color=color).add_to(m)\n    i += 1","61f746e9":"m","03b92b3a":"vals = [\n        {'x':df['timestamp'].values,'y':df['km\/h'].values, 'label':'x', 'c':'g'}\n       ]\nplot(vals, title='Speed', xlabel='timestamp', ylabel='km\/h')","66a7c51d":"df_temp = df[['GPS (Latitude)','GPS (Longitude)','km\/h']].copy()\ndf_temp = df_temp.rename(columns={'GPS (Latitude)':'lat','GPS (Longitude)':'long'})","e3f0fba6":"%%time\n# find nearest lat long from the Point of Interest\npoi = (4.3429785,101.2341151)\nnearest = 100000 # just randomly huge number\nposition = 0 # the index position\ncoord = None\nfor i in range(len(df_temp)):\n    if np.isnan(df_temp.iloc[i]['lat']):\n        continue\n    latlong = (df_temp.iloc[i]['lat'],df_temp.iloc[i]['long'])\n    d = distance(poi, latlong).m\n    if d < nearest:\n        nearest = d\n        position = i\n        coord = latlong\nprint(nearest,position, coord)","bebbf9d6":"# since the POI KM is > than AES coordinate we'll need to work backward\ndf_temp['lat_shift'] = df_temp['lat'].shift(-1)\ndf_temp['long_shift'] = df_temp['long'].shift(-1)","54bbf662":"%%time\ndf_temp['km'] = 0\ncurrent = 312\ndf_temp.loc[position,'km']=current\nfor i in range((position-1)):\n    x = (position-1)-i\n    data = df_temp.iloc[i]\n    # lat long of next\n    latlong1 = (data['lat_shift'],data['long_shift'])\n    # lat long of current\n    latlong2 = (data['lat'],data['long'])\n    # distance in meter\n    d = distance(latlong2, latlong1).m\n    #print(latlong1,latlong2)\n    current = current - (d\/1000)\n    df_temp.loc[x,'km']=current","0310353d":"# 98 km\/h is under the limit of 110km\/h \ndf_temp[(df_temp['km']>299) & (df_temp['km']<300)]['km\/h'].max()","37c6fe8c":"# summary statistics of the speed\ndf['km\/h'].describe()\n","713cb1d4":"df['acceleration'] = (df['GPS (Speed (estimated))']-df['GPS (Speed (estimated))'].shift())\/\\\n(df['timestamp']-df['timestamp'].shift()).dt.seconds","8bf2393e":"df['acceleration'].describe()","038325bd":"print(\"Percentage of acceleration > 2:\", len(df[np.abs(df['acceleration']) > 2])\/len(df) * 100)","787e1c36":"print(\"Percentage of acceleration > 3:\", len(df[np.abs(df['acceleration']) > 3])\/len(df) * 100)","5824052e":"df['seconds'] = (df['timestamp']-df['timestamp'].shift()).dt.seconds\ndf['seconds'] = df['seconds'].cumsum()\ndf.loc[0,'seconds'] = 0","00c05cc8":"%%time\nnorm = matplotlib.colors.Normalize(vmin=df['acceleration'].min(), vmax=df['acceleration'].max())\ncmap = matplotlib.cm.get_cmap('jet')\nz = []\nfor i in range(len(df)):\n    rgba = cmap(norm(df.iloc[i]['acceleration']))\n    z.append(matplotlib.colors.rgb2hex(rgba))\nfig = plt.figure(figsize=(15,5))\nax = plt.subplot(111)\nax.scatter(df['seconds'].values, df['GPS (Speed (estimated))'].values, c=z)\nplt.title(\"Speed and Acceleration\")\nplt.ylabel(\"m\/s\")\nplt.xlabel(\"seconds\")\ncax, _ = matplotlib.colorbar.make_axes(ax)\ncbar = matplotlib.colorbar.ColorbarBase(cax, cmap=cmap, norm=norm)\nplt.show()","e6fd5180":"%%time\n# model acceleration, constant and deceleration\nacc = df[df['acceleration']>0]\nconst = df[df['acceleration']==0]\ndecc = df[df['acceleration']<0]\nfig = plt.figure(figsize=(15,5))\nax = plt.subplot(111)\nax.plot(\n    acc['seconds'].values, acc['GPS (Speed (estimated))'].values, 'ro',\n    const['seconds'].values, const['GPS (Speed (estimated))'].values, 'go',\n    decc['seconds'].values, decc['GPS (Speed (estimated))'].values, 'bo',\n)\nplt.title(\"Speed and Acceleration\")\nplt.ylabel(\"m\/s\")\nplt.xlabel(\"seconds\")\nplt.legend(['Accelerate','Constant', 'Decelerate'])\nplt.show()","9534c059":"# how many stops?\nindex = []\nstart = None\nend = None\nfor k,v in df[df['GPS (Speed (estimated))']<=0].iterrows():\n    if k-1 == end:\n        #replace end\n        end = k\n    elif len(index) > 0:\n        # no longer continuous\n        index[-1]['end'] = end\n        start = None\n        end = None\n        \n    if start is None:\n        start = k\n        end = k\n        index.append({'start':start, 'end':end})\n","2b61b6a2":"# a prolong continuous stop and moving can indicate in a bad traffic\nindex","0afa74d3":"print(\"Total stops\", len(index))","e1459ef7":"%%time\ndata = df[(df['seconds']>2110) & (df['seconds']<2190)]\nz = []\nfor k,v in data.iterrows():\n    if v['acceleration'] > 0:\n        z.append(True)\n    else:\n        z.append(False)\n    \nfig = plt.figure(figsize=(15,5))\nax = plt.subplot(111)\n#ax.scatter(data['seconds'].values, data['GPS (Speed (estimated))'].values, c=z)\nax.plot(\n    data[np.array(z)]['seconds'], data[np.array(z)]['GPS (Speed (estimated))'], 'ro',\n    data[~np.array(z)]['seconds'], data[~np.array(z)]['GPS (Speed (estimated))'], 'bo',\n)\nplt.title(\"Speed and Acceleration\")\nplt.ylabel(\"m\/s\")\nplt.xlabel(\"seconds\")\nplt.legend(['Accelerate', 'Decelerate'])\nplt.show()","2a4a7e89":"# at index 2179 is at Bidor plaza toll\npos = 2179\nstart = 0\nfor i in range(pos):\n    backward = pos - (i+1) \n    # find the first positive acceleration\n    if df.iloc[backward]['acceleration'] > 0:\n        start = backward+1 \n        print(start)\n        break","90fb5997":"progressive_df = pd.DataFrame(\n    [\n        {'speed_mph':10,'second_to_stop':8, 'feet_to_stop':86},\n        {'speed_mph':20,'second_to_stop':11, 'feet_to_stop':207},\n        {'speed_mph':30,'second_to_stop':14, 'feet_to_stop':372},\n        {'speed_mph':40,'second_to_stop':17, 'feet_to_stop':581},\n        {'speed_mph':50,'second_to_stop':20, 'feet_to_stop':851},\n        {'speed_mph':60,'second_to_stop':24, 'feet_to_stop':1262},\n    ]\n)\nprogressive_df['speed_m\/s'] = progressive_df['speed_mph']\/2.237\nprogressive_df['km\/h'] = progressive_df['speed_mph']*1.609\nprogressive_df['metre_to_stop'] = progressive_df['feet_to_stop']\/3.281","a4122f7c":"progressive_df","82f87269":"# do some extrapolation\np = np.polyfit(progressive_df['speed_m\/s'],progressive_df['second_to_stop'],2) ","a78f8556":"f = np.poly1d(p)\nfig = plt.figure()\nax  = fig.add_subplot(111)\nplt.plot(progressive_df['speed_m\/s'], progressive_df['second_to_stop'], 'ro', label=\"Data\")\nplt.plot(progressive_df['speed_m\/s'],f(progressive_df['speed_m\/s']), 'b-',label=\"Polyfit\")\nplt.show()","f608155e":"latlong1 = (df.iloc[start]['GPS (Latitude)'],df.iloc[start]['GPS (Longitude)'])\nlatlong2 = (df.iloc[pos]['GPS (Latitude)'],df.iloc[pos]['GPS (Longitude)'])\nd = distance(latlong2, latlong1).m","16911363":"print(\"Starting speed at braking event\",df.iloc[start]['km\/h'],\"km\/h\")\nprint(\"Time taken to complete stop\",df.iloc[pos]['seconds'] - df.iloc[start]['seconds'], \"seconds\")\nprint(\"Distance taken to complete stop is\", d, \"metre\")\nprint(\"According to Progressive on average this should be approximately\", f(df.iloc[start]['GPS (Speed (estimated))']),'seconds')","b17be1b9":"len(df)","36da85fc":"#3.99950996507332,101.152279800398 \n#4.50031313114287,101.310494793673\nnorm = matplotlib.colors.Normalize(vmin=df['km\/h'].min(), vmax=df['km\/h'].max())\ncmap = matplotlib.cm.get_cmap('jet')\nm = folium.Map(location=[4.50031313114287,101.310494793673],\n    zoom_start=10, width=1200, height=480,  tiles='Cartodb dark_matter')\n\n# Plot coordinates\ni = 0\nfor i in range(len(df)):\n    rgba = cmap(norm(df.iloc[i]['km\/h']))\n    color = matplotlib.colors.rgb2hex(rgba)\n    # mark only every 5 point\n    if i%5==0:\n        _ = folium.CircleMarker(location=[df.iloc[i]['GPS (Latitude)'], df.iloc[i]['GPS (Longitude)']], radius=1,color=color, fill_color=color).add_to(m)\n    i += 1","887f5d50":"%%time\nm","d652d598":"ls","6254a7f2":"# Visualize the speed into folium","6074d362":"# Raw Accelerometer\nAccording to ios [docs](https:\/\/developer.apple.com\/documentation\/coremotion\/getting_raw_accelerometer_events) \n> An accelerometer measures changes in velocity along one axis. All iOS devices have a three-axis accelerometer, which delivers acceleration values in each of the three axes shown in Figure 1. The values reported by the accelerometers are measured in increments of the gravitational acceleration, with the value 1.0 representing an acceleration of 9.8 meters per second (per second) in the given direction. Acceleration values may be positive or negative depending on the direction of the acceleration.\n\n<img src=\"https:\/\/docs-assets.developer.apple.com\/published\/96e9d46b41\/c9b606b2-9a52-487e-8385-e710ffa1ce5f.png\" width=\"200\">","1dd518ec":"# Raw Gyroscope\nAccording to ios [docs](https:\/\/developer.apple.com\/documentation\/coremotion\/getting_raw_gyroscope_events) \n> A gyroscope measures the rate at which a device rotates around a spatial axis. Many iOS devices have a three-axis gyroscope, which delivers rotation values in each of the three axes shown in Figure 1. Rotation values are measured in radians per second around the given axis. Rotation values may be positive or negative depending on the direction of rotation.\n\n<img src=\"https:\/\/docs-assets.developer.apple.com\/published\/96e9d46b41\/ab00c9d5-4f3d-475b-8020-95066068a18d.png\" width=\"200\">","53b17717":"# Speed","467059dc":"### Check my speed at A.E.S\n* After checking for location of AES cameras [here](https:\/\/bigpocket17.com\/malaysia-plus-highway-speed-trap-location-2018-part-i\/) I concluded that I should've encountered only one in KM 299.9 \n* We need to create this KM and I can't seem to find online method to convert this KM thingy into coordinate in easiest way.\n* So I randomly pick from list of GPS points and went through google map to locate any of this KM on the roadside\n* I found one at coordinate 4.3429785,101.2341151 and a small signboard showing km 312\n* We'll use this coordinate to locate KM 299.9\n* After run this through, another landmark that has painted this KM thingy can be found [here](https:\/\/www.google.com\/maps\/@4.4388608,101.1825274,3a,60y,207.16h,62.47t\/data=!3m6!1e1!3m4!1sm9IQDrtJdJqLCQV5elxP5Q!2e0!7i13312!8i6656)","f1298bc2":"# Altitude","90f5555e":"### Acceleration\n* We'll use [Progressive Report](https:\/\/progressive.mediaroom.com\/2015-05-14-Lead-Foot-Report-from-Progressive-R-Insurance-Busts-Industry-Braking-Standards) to analyze braking event.\n* ","03581225":"### Time taken for braking to stop\n* We going use again the same scatter plot to dissect what happen for speed and acceleration during the braking before the vehicle stops\n* It's clear that we can use negative acceleration to find the tipping point for when braking event begins\n* We can apply this same idea to find all braking event and compute the average."}}