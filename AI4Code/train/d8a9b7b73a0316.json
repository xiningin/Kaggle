{"cell_type":{"09f5a4f2":"code","d1614c7b":"code","e67b751e":"code","df75e9ef":"code","1605f160":"markdown"},"source":{"09f5a4f2":"%%capture\n# Install:\n# Kaggle environments.\n!git clone https:\/\/github.com\/Kaggle\/kaggle-environments.git\n!cd kaggle-environments && pip install .\n\n# GFootball environment.\n!apt-get update -y\n!apt-get install -y libsdl2-gfx-dev libsdl2-ttf-dev\n\n# Make sure that the Branch in git clone and in wget call matches !!\n!git clone -b v2.8 https:\/\/github.com\/google-research\/football.git\n!mkdir -p football\/third_party\/gfootball_engine\/lib\n\n!wget https:\/\/storage.googleapis.com\/gfootball\/prebuilt_gameplayfootball_v2.8.so -O football\/third_party\/gfootball_engine\/lib\/prebuilt_gameplayfootball.so\n!cd football && GFOOTBALL_USE_PREBUILT_SO=1 pip3 install .","d1614c7b":"%%writefile submission.py\nfrom kaggle_environments.envs.football.helpers import *\nfrom random import randint\n\n\n# Function to calculate distance \ndef get_distance(pos1,pos2):\n    return (((pos1[0]-pos2[0])**2)+((pos1[1]-pos2[1])**2))**0.5\n\n# Function to cross ball from wing\ndef cross_ball():\n    pass\n\n# Movement directions\ndirections = [\n[Action.TopLeft, Action.Top, Action.TopRight],\n[Action.Left, Action.Idle, Action.Right],\n[Action.BottomLeft, Action.Bottom, Action.BottomRight]]\n\ndirsign = lambda x: 1 if abs(x) < 0.01 else (0 if x < 0 else 2)\n\n# Set game plan parameters\ngoalRange = 0.65\nwingRange = 0.21\n\n@human_readable_agent\ndef agent(obs):\n    \n    # Add direction to action\n    def sticky_check(action, direction):\n        if direction in obs['sticky_actions']:\n            return action\n        else:\n            return direction\n    \n    controlled_player_pos = obs['left_team'][obs['active']]\n    \n    \n    # Pass when KickOff or ThrowIn\n    if obs['game_mode'] == GameMode.KickOff or obs['game_mode'] == GameMode.ThrowIn:\n        return sticky_check(Action.ShortPass, Action.Right) \n    \n    # Shoot when freekick in goal range; If on wing then cross; Otherwise just pass\n    if obs['game_mode'] == GameMode.FreeKick:\n        # Shoot if in range\n        if controlled_player_pos[0] > goalRange and controlled_player_pos[1] < wingRange and controlled_player_pos[1] > -(wingRange):\n            ydir = randint(0,2)\n            return sticky_check(Action.Shot, directions[ydir][2]) \n        # Cross from right\n        if controlled_player_pos[0] > goalRange and controlled_player_pos[1] > wingRange:\n            return sticky_check(Action.HighPass, Action.TopRight)\n        \n        # Cross from left\n        if controlled_player_pos[0] > goalRange and controlled_player_pos[1] < -(wingRange):\n            return sticky_check(Action.HighPass, Action.BottomRight)\n    \n    # Cross in for corner\n    if obs['game_mode'] == GameMode.Corner and obs['ball'][1] < 0:\n        return sticky_check(Action.HighPass, Action.Bottom)\n    elif obs['game_mode'] == GameMode.Corner and obs['ball'][1] > 0:\n        return sticky_check(Action.HighPass, Action.Top)\n        \n    # High pass when GoalKick \n    if obs['game_mode'] == GameMode.GoalKick:\n        ydir = randint(0,2)\n        return sticky_check(Action.HighPass, directions[ydir][2])\n    \n    # Shoot when Penalty\n    if obs['game_mode'] == GameMode.Penalty:\n        xdir = randint(0,2)\n        ydir = randint(0,2)\n        return sticky_check(Action.Shot, directions[ydir][xdir])\n    \n    # Make sure player is running.\n    if Action.Sprint not in obs['sticky_actions']:\n        return Action.Sprint\n    # We always control left team (observations and actions\n    # are mirrored appropriately by the environment).\n    controlled_player_pos = obs['left_team'][obs['active']]\n    \n    # Check if we are in possession\n    if obs['ball_owned_player'] == obs['active'] and obs['ball_owned_team'] == 0:\n        \n        # Clear if we are near our goal\n        if controlled_player_pos[0] < -(goalRange):\n            return sticky_check(Action.HighPass, Action.Right)\n        \n        # Shoot if we are in the final third and not at an acute angle\n        if controlled_player_pos[0] > goalRange and controlled_player_pos[1] < wingRange and controlled_player_pos[1] > -(wingRange):\n            ydir = randint(0,2)\n            return sticky_check(Action.Shot, directions[ydir][2])\n        #if the goalie is coming out on player near goal shoot\n        elif obs['right_team'][0][0] < 0.8 or abs(obs['right_team'][0][1]) > 0.05:\n            return Action.Shot\n        \n        # Cross from right\n        if controlled_player_pos[0] > goalRange and controlled_player_pos[1] > wingRange:\n            return sticky_check(Action.HighPass, Action.TopRight)\n        \n        # Cross from left\n        if controlled_player_pos[0] > goalRange and controlled_player_pos[1] < -(wingRange):\n            return sticky_check(Action.HighPass, Action.BottomRight)\n        \n        # Run towards the goal otherwise.\n        return Action.Right\n    else:\n        #where ball is going we add the direction xy to ball current location\n        ball_targetx=obs['ball'][0]+(1.5 * obs['ball_direction'][0])\n        ball_targety=obs['ball'][1]+(1.5 * obs['ball_direction'][1])\n\n        # Euclidian distance to ball\n        e_dist=get_distance(obs['left_team'][obs['active']],obs['ball'])\n\n        if e_dist >.005:\n            # Run where ball will be\n            xdir = dirsign(ball_targetx - controlled_player_pos[0])\n            ydir = dirsign(ball_targety - controlled_player_pos[1])\n            return directions[ydir][xdir]\n        else:\n            prob = randint(0,100)\n            if prob > 70 and controlled_player_pos[0] < obs['right_team'][obs['active']][0]:\n                return Action.Slide\n            # Run towards the ball.\n            xdir = dirsign(obs['ball'][0] - controlled_player_pos[0])\n            ydir = dirsign(obs['ball'][1] - controlled_player_pos[1])\n            return directions[ydir][xdir]\n","e67b751e":"# Set up the Environment.\nfrom kaggle_environments import make\nenv = make(\"football\", debug=True, configuration={\"save_video\": True, \"scenario_name\": \"11_vs_11_kaggle\", \"running_in_notebook\": True})\noutput = env.run([\"\/kaggle\/working\/submission.py\", \"do_nothing\"])[-1]\nprint('Left player: reward = %s, status = %s, info = %s' % (output[0]['reward'], output[0]['status'], output[0]['info']))\nprint('Right player: reward = %s, status = %s, info = %s' % (output[1]['reward'], output[1]['status'], output[1]['info']))\nenv.render(mode=\"human\", width=800, height=600)","df75e9ef":"# Dont slide from behind\n# Find player density on pitch to pass to open space \/ run into open space\n# Dribbling\n# Shoot if goalie off the line","1605f160":"# Rule based bot - Marauding wingers\n\nJust a simple rule based bot that I was able to put together. I started with the sample submission, then tried to build out a rule based game strategy. I drew from my experience playing FIFA and this strategy is inspired by those I've played against who just run down the wing mindlessly and put in crosses. I find the cross-heavy gameplay particularly annoying. Not because it is particularly effective, but it just leads to a lot of throw ins and stoppages in play since the ball is concentrated close to the byline. Not fun to have a lot of stoppages and interruptions when you're playing FIFA\nAnyway, back to the bot. It is built to run down the wing and bang in crosses. One thing I haven't been able to figure out is how to code in first-time shots. I started a discussion on that [here](https:\/\/www.kaggle.com\/c\/google-football\/discussion\/196035). \n\nThis bot does pretty well for being so simple. It reached a score of 1105 at one point, and now **stands at 1041.1 as of 11\/09.** I wanted to add this write up so you might see the score different on this notebook when I put this out there.\n\nThere are still many other rule-based strategies that I had in mind. Like not to be sprinting all the time like this bot does, or have a better approach at finding open teammates for passing etc. But I want to move on to building out some algorithmic solutions and learn some new techniques. I don't have much experience with Reinforcement Learning and my aim is to build an RL solution that beats this benchmark I have set for myself before the competitions ends. \n\nLeave me any feedback\/ questions in the comments and feel free to share some good resources! \n\nHere are some useful resources for ideas on the rule-based approach. If you see your ideas on this notebook and I haven't mentioned your notebook, let me know!\n\n1. https:\/\/github.com\/google-research\/football\/blob\/master\/gfootball\/doc\/observation.md#raw-observations\n2. https:\/\/github.com\/Kaggle\/kaggle-environments\/blob\/28e75806001c51f1fecbd5d3d8fe7b0aa83f33e5\/kaggle_environments\/envs\/football\/helpers.py\n3. https:\/\/www.kaggle.com\/c\/google-football\/discussion\/191804\n4. https:\/\/www.kaggle.com\/piotrstanczyk\/gfootball-template-bot\n5. https:\/\/www.kaggle.com\/mlconsult\/best-open-rules-bot-score-1020-7"}}