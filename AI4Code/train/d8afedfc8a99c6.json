{"cell_type":{"9469014a":"code","ba02368c":"code","498504aa":"code","123aa5df":"code","a0d2670f":"code","3c69685c":"code","775c2433":"code","451862a4":"code","affb111e":"code","f44e0bcd":"code","b45b5044":"code","280de8fd":"code","ede48f81":"code","c23faeb9":"code","107812af":"code","c2b836df":"code","8c49bd4f":"code","0823e39c":"code","f4dc8351":"code","a031c445":"code","f0686ba2":"code","44f4cd09":"code","d925cf85":"code","bebb8228":"code","ecec1f5b":"code","3e45bc9a":"code","461aaff2":"code","937e9553":"code","7e591530":"code","4fe3b8bd":"code","ca17d41a":"markdown","b94d4c6a":"markdown","27476999":"markdown","f76b5a6a":"markdown","e340dc16":"markdown","fe619498":"markdown","62191c6f":"markdown","44fc38d1":"markdown"},"source":{"9469014a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ba02368c":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","498504aa":"train.describe","123aa5df":"corrmat = train.corr()\ncorrmat","a0d2670f":"# \u7b97\u51fa\u3057\u305f\u76f8\u95a2\u4fc2\u6570\u3092\u76f8\u95a2\u304c\u9ad8\u3044\u9806\u306b\u4e0a\u4f4d10\u500b\u306e\u30c7\u30fc\u30bf\u3092\u8868\u793a\n\n# \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u306b\u8868\u793a\u3055\u305b\u308b\u30ab\u30e9\u30e0\u306e\u6570\nk = 10\n\n# SalesPrice\u3068\u306e\u76f8\u95a2\u304c\u5927\u304d\u3044\u4e0a\u4f4d10\u500b\u306e\u30ab\u30e9\u30e0\u540d\u3092\u53d6\u5f97\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index","3c69685c":"# SalesPrice\u3068\u306e\u76f8\u95a2\u304c\u5927\u304d\u3044\u4e0a\u4f4d10\u500b\u306e\u30ab\u30e9\u30e0\u3092\u5bfe\u8c61\u306b\u76f8\u95a2\u3092\u7b97\u51fa\n# .T(Trancepose[\u8ee2\u7f6e\u884c\u5217])\u3092\u884c\u3046\u7406\u7531\u306f\u3001corrcoef\u3067\u76f8\u95a2\u3092\u7b97\u51fa\u3059\u308b\u969b\u306b\u3001\u5404\u30ab\u30e9\u30e0\u306e\u5024\u3092\u884c\u6bce\u306b\u307e\u3068\u3081\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u70ba\ncm = np.corrcoef(train[cols].values.T)","775c2433":"import seaborn as sns\n# \u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\nsns.set(font_scale=1.25)\n\n# \u7b97\u51fa\u3057\u305f\u76f8\u95a2\u30c7\u30fc\u30bf\u3092\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3067\u8868\u793a\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)","451862a4":"# \u6563\u5e03\u56f3\u306e\u8868\u793a\nsns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea']\nsns.pairplot(train[cols], size = 2.5)","affb111e":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u72b6\u6cc1\n# \u6b20\u640d\u5024\u3092\u542b\u3080\u30ab\u30e9\u30e0\u306b\u3064\u3044\u3066\u6b20\u640d\u5024\u306e\u6570\u3092\u6570\u304c\u591a\u3044\u9806\u306b\u8868\u793a\ntrain.isnull().sum()[train.isnull().sum()>0].sort_values(ascending=False)","f44e0bcd":"# \u6b20\u640d\u3092\u542b\u3080\u30ab\u30e9\u30e0\u306e\u30c7\u30fc\u30bf\u578b\u3092\u78ba\u8a8d\nna_col_list = train.isnull().sum()[train.isnull().sum()>0].index.tolist()\ntrain[na_col_list].dtypes.sort_values()","b45b5044":"# \u30c7\u30fc\u30bf\u578b\u306b\u5fdc\u3058\u3066\u6b20\u640d\u5024\u3092\u88dc\u5b8c\n# float\u306e\u5834\u5408\u306f0\n# object\u306e\u5834\u5408\u306f'NA'\nna_float_cols = train[na_col_list].dtypes[train[na_col_list].dtypes=='float64'].index.tolist()\nna_obj_cols = train[na_col_list].dtypes[train[na_col_list].dtypes=='object'].index.tolist()\n\n# float64\u578b\u3067\u6b20\u640d\u3057\u3066\u3044\u308b\u5834\u5408\u306f0\u3092\u4ee3\u5165\nfor na_float_col in na_float_cols:\n    train.loc[train[na_float_col].isnull(),na_float_col] = 0.0\n    \n# object\u578b\u3067\u6b20\u640d\u3057\u3066\u3044\u308b\u5834\u5408\u306f'NA'\u3092\u4ee3\u5165\nfor na_obj_col in na_obj_cols:\n    train.loc[train[na_obj_col].isnull(),na_obj_col] = 'NA'","280de8fd":"# \u30de\u30fc\u30b8\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u72b6\u6cc1\ntrain.isnull().sum()[train.isnull().sum()>0].sort_values(ascending=False)","ede48f81":"train = train.drop(train[(train['OverallQual']>=10) & (train['SalePrice']<250000)].index)","c23faeb9":"train = train.drop(train[(train['YearBuilt']>=2000) & (train['SalePrice']<100000)].index)\ntrain = train.drop(train[(train['YearBuilt']<=1900) & (train['SalePrice']>400000)].index)","107812af":"train = train.drop(train[(train[\"GrLivArea\"]>=3000) & (train['SalePrice']<300000)].index)","c2b836df":"# \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u7279\u5fb4\u91cf\u3092\u30ea\u30b9\u30c8\u5316\ncat_cols = train.dtypes[train.dtypes=='object'].index.tolist()\n# \u6570\u5024\u5909\u6570\u306e\u7279\u5fb4\u91cf\u3092\u30ea\u30b9\u30c8\u5316\nnum_cols = train.dtypes[train.dtypes!='object'].index.tolist()\n# \u30c7\u30fc\u30bf\u5206\u5272\u304a\u3088\u3073\u63d0\u51fa\u6642\u306b\u5fc5\u8981\u306a\u30ab\u30e9\u30e0\u3092\u30ea\u30b9\u30c8\u5316\nother_cols = ['Id']\n# \u4f59\u8a08\u306a\u8981\u7d20\u3092\u30ea\u30b9\u30c8\u304b\u3089\u524a\u9664\nnum_cols.remove('Id') #Id\u524a\u9664\n# \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u3092\u30c0\u30df\u30fc\u5316\ntrain_cat = pd.get_dummies(train[cat_cols])\n# \u30c7\u30fc\u30bf\u7d71\u5408\ntrain = pd.concat([train[other_cols],train[num_cols],train_cat],axis=1)","8c49bd4f":"import statsmodels.api as smf","0823e39c":"# \u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u306b\u5206\u3051\u308b\n# \u8aac\u660e\u5909\u6570\u306b\u306fSalePrice\u3068\u9ad8\u3044\u76f8\u95a2\u304c\u898b\u3089\u308c\u305f\u3082\u306e\u306e\u307f\u3092\u63a1\u7528\naiu = ['OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nx_train = train[aiu]\ny_train = train['SalePrice']","f4dc8351":"model = smf.OLS(y_train, x_train)   # \u30e2\u30c7\u30eb\u306e\u8a2d\u5b9a\nresult = model.fit()   # \u56de\u5e30\u5206\u6790\u306e\u5b9f\u884c","a031c445":"# \u7d50\u679c\u3092\u8868\u793a\n# Adj. R-squared (uncentered) \u306e\u5024\u304c\uff11\u306b\u8fd1\u3044\u307b\u3069\u5206\u6790\u306e\u7cbe\u5ea6\u304c\u9ad8\u3044\nprint(result.summary())","f0686ba2":"test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","44f4cd09":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u72b6\u6cc1\n# \u6b20\u640d\u5024\u3092\u542b\u3080\u30ab\u30e9\u30e0\u306b\u3064\u3044\u3066\u6b20\u640d\u5024\u306e\u6570\u3092\u6570\u304c\u591a\u3044\u9806\u306b\u8868\u793a\ntest.isnull().sum()[test.isnull().sum()>0].sort_values(ascending=False)","d925cf85":"# \u6b20\u640d\u3092\u542b\u3080\u30ab\u30e9\u30e0\u306e\u30c7\u30fc\u30bf\u578b\u3092\u78ba\u8a8d\nna_col_list = test.isnull().sum()[test.isnull().sum()>0].index.tolist()\ntest[na_col_list].dtypes.sort_values()","bebb8228":"# \u30c7\u30fc\u30bf\u578b\u306b\u5fdc\u3058\u3066\u6b20\u640d\u5024\u3092\u88dc\u5b8c\n# float\u306e\u5834\u5408\u306f0\n# object\u306e\u5834\u5408\u306f'NA'\nna_float_cols = test[na_col_list].dtypes[test[na_col_list].dtypes=='float64'].index.tolist()\nna_obj_cols = test[na_col_list].dtypes[test[na_col_list].dtypes=='object'].index.tolist()\n\n# float64\u578b\u3067\u6b20\u640d\u3057\u3066\u3044\u308b\u5834\u5408\u306f0\u3092\u4ee3\u5165\nfor na_float_col in na_float_cols:\n    test.loc[test[na_float_col].isnull(),na_float_col] = 0.0\n    \n# object\u578b\u3067\u6b20\u640d\u3057\u3066\u3044\u308b\u5834\u5408\u306f'NA'\u3092\u4ee3\u5165\nfor na_obj_col in na_obj_cols:\n    test.loc[test[na_obj_col].isnull(),na_obj_col] = 'NA'","ecec1f5b":"# \u30de\u30fc\u30b8\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u72b6\u6cc1\ntest.isnull().sum()[test.isnull().sum()>0].sort_values(ascending=False)","3e45bc9a":"# \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u7279\u5fb4\u91cf\u3092\u30ea\u30b9\u30c8\u5316\ncat_cols = test.dtypes[test.dtypes=='object'].index.tolist()\n# \u6570\u5024\u5909\u6570\u306e\u7279\u5fb4\u91cf\u3092\u30ea\u30b9\u30c8\u5316\nnum_cols = test.dtypes[test.dtypes!='object'].index.tolist()\n# \u30c7\u30fc\u30bf\u5206\u5272\u304a\u3088\u3073\u63d0\u51fa\u6642\u306b\u5fc5\u8981\u306a\u30ab\u30e9\u30e0\u3092\u30ea\u30b9\u30c8\u5316\nother_cols = ['Id']\n# \u4f59\u8a08\u306a\u8981\u7d20\u3092\u30ea\u30b9\u30c8\u304b\u3089\u524a\u9664\nnum_cols.remove('Id') #Id\u524a\u9664\n# \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u3092\u30c0\u30df\u30fc\u5316\ntest_cat = pd.get_dummies(test[cat_cols])\n# \u30c7\u30fc\u30bf\u7d71\u5408\ntest = pd.concat([test[other_cols],test[num_cols],test_cat],axis=1)","461aaff2":"# \u8aac\u660e\u5909\u6570\u3092\u9078\u629e\naiu = ['OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nx_test = test[aiu]\n\npredictions = result.predict(x_test)\nprint(predictions)","937e9553":"test[\"SalePrice\"] = predictions","7e591530":"test[[\"Id\",\"SalePrice\"]].head()","4fe3b8bd":"# Id, SalePrice\u306e2\u5217\u3060\u3051\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u5909\u63db\ntest[[\"Id\",\"SalePrice\"]].to_csv(\"submission.csv\",index=False)","ca17d41a":"## \u6b20\u640d\u5024\u306e\u51e6\u7406","b94d4c6a":"## \u7279\u5fb4\u91cf\u78ba\u8a8d","27476999":"## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4e88\u6e2c","f76b5a6a":"## \u6b20\u640d\u5024\u306e\u51e6\u7406","e340dc16":"## \u76f8\u95a2\u95a2\u4fc2","fe619498":"## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u8aad\u3080","62191c6f":"## \u30e2\u30c7\u30eb\u306e\u4f5c\u6210\uff08\u91cd\u56de\u5e30\u5206\u6790\uff09","44fc38d1":"test\u306b SalePrice \u30ab\u30e9\u30e0\u3092\u8ffd\u52a0\u3057\u3001\u5b66\u7fd2\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u304b\u3089\u4e88\u6e2c\u3057\u305f\u7d50\u679c\u3092\u30bb\u30c3\u30c8"}}