{"cell_type":{"d5cd238f":"code","48bd2941":"code","356e39f2":"code","8382c30a":"code","a75817f3":"code","fefd899e":"code","84413c01":"code","4cd6cd1b":"code","bc9da47a":"code","3d3df211":"code","987e3fe7":"code","c4d9dec5":"code","6e5210ac":"code","01cac6dc":"code","290b6c63":"code","25c104bf":"code","4c49d21b":"code","346f4ed9":"code","4bafe890":"code","8c7ab0b8":"code","7f5f1484":"code","a4f22c1b":"code","852b2a95":"code","763037ff":"code","eae04585":"code","5c1e2d60":"code","88f5de76":"code","1cbaec98":"code","991fff61":"code","37ef1151":"code","509c8611":"code","474a72fb":"code","c85a8cf5":"code","98383f96":"code","8df206c5":"code","257070e1":"code","c92050ba":"code","0cd739d9":"code","5b302f44":"code","57225f74":"code","b09cc50b":"code","d0bf6025":"code","111c489b":"code","68a54f69":"code","6c461e20":"code","fed780ae":"code","5fec1c8d":"code","c3206df6":"code","5b173478":"code","211fb331":"code","8e10a97c":"code","fce7b67a":"code","5256d82d":"code","d6185b7a":"code","e278799e":"code","5087448f":"code","d6d60543":"code","1f3f3ff7":"code","18dca4f3":"code","b486f7e1":"code","b578c978":"code","79dff7be":"code","b23c2daf":"code","5a9f23a6":"code","2615cdfb":"code","6f14798d":"code","debf7f68":"code","0df56734":"code","27e4cdbd":"code","04511b8d":"code","b662833b":"code","39c76274":"code","0f77c095":"code","8484d66a":"code","fbdef8d8":"code","3efa6b96":"code","cb567dfb":"code","ba31e66c":"code","ebadf8d1":"code","e81f2b4c":"code","812f1ad7":"code","c637e728":"code","561ee26c":"code","9cc20cf4":"code","03e8b1d1":"code","09e05d1f":"code","7a399245":"code","036fc059":"code","dccf6d73":"code","0ffc7ff5":"code","246e346f":"code","38004608":"code","dc534baf":"code","1b73267d":"code","c0b6ec60":"code","9e3f9262":"code","66a4b5d0":"code","437bc746":"code","b42f51a1":"code","78897dd7":"code","05e42e91":"code","69b8669f":"code","2f0ed71f":"code","ab0bdf23":"code","a0994b56":"code","df03a491":"code","9a69dd10":"code","c6c6222e":"code","8fe8ce96":"code","c6578b31":"code","07dd50c5":"code","4fd79c21":"code","6bf55f1b":"code","98fdc1d9":"code","08080348":"code","6f2a1f5b":"code","ffe615fa":"markdown","837dad21":"markdown","b830bb31":"markdown","82c40f12":"markdown","11d9c945":"markdown","f3724f97":"markdown","e2b46182":"markdown","c015363e":"markdown","701096b6":"markdown","53b0d509":"markdown","8ad54977":"markdown","8865fe72":"markdown","a9b4c0e2":"markdown","da1913b7":"markdown","bd6a6e99":"markdown","03d2750f":"markdown","4959c886":"markdown","bf40321a":"markdown","25463ff6":"markdown","0f75917f":"markdown","1d906696":"markdown","eaaf597c":"markdown","b364155c":"markdown","f9aa4748":"markdown","5c33dcc7":"markdown","e2271245":"markdown","b9c8568f":"markdown","8635dfa4":"markdown","a053a9cd":"markdown","474d4787":"markdown","18ceb7a8":"markdown","f3ce6d5b":"markdown","0e91916f":"markdown","c79ac2d0":"markdown","1b48a7eb":"markdown","1dfac41e":"markdown","003a001e":"markdown","b20b896a":"markdown","4fddfdeb":"markdown","c3899234":"markdown","4f21f080":"markdown","1866b398":"markdown","b73da148":"markdown","aa04b5b1":"markdown","7ccafd8a":"markdown","69925a2d":"markdown","9a6703ca":"markdown","87746c6b":"markdown","6a5bf7b1":"markdown","80e5557e":"markdown","fa5921e2":"markdown","f15d3345":"markdown","00e7cceb":"markdown","97ace4d9":"markdown","61098772":"markdown","f84f4804":"markdown","d837d2ae":"markdown","4c4ed119":"markdown","d72dce49":"markdown","e1ed91bf":"markdown","e9eb143a":"markdown","17d17c45":"markdown","3a28b41e":"markdown","85abb75f":"markdown","3e6a047f":"markdown","9569770c":"markdown","70604d33":"markdown","3bc38f4f":"markdown","46b5ed8d":"markdown","0800946c":"markdown","8e55f300":"markdown","036638c6":"markdown","98933691":"markdown","9c410901":"markdown","43e54dc1":"markdown","433a6189":"markdown","f659e107":"markdown","4b2d44c0":"markdown","45d43fb9":"markdown","ba366320":"markdown","8175bd3f":"markdown","b3d5521d":"markdown","565351a9":"markdown","57450a62":"markdown","b0d9d3fc":"markdown","450b2e87":"markdown","5e2e06f8":"markdown","8570286b":"markdown","234ccdbf":"markdown","761ba0d0":"markdown","ff459959":"markdown","afb0a2e4":"markdown","63f99d60":"markdown","cfeec024":"markdown","badcc899":"markdown","87d75ac4":"markdown"},"source":{"d5cd238f":"from numpy import pi\nimport pandas as pd\n\nimport numpy as np\n#  \u8bfb\u5165\u6570\u636e\u96c6  \nsales_train =pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ntest = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')\n","48bd2941":"# \u8bad\u7ec3\u6570\u636e\u7684\u5c55\u793a\nsales_train.head()","356e39f2":"# \u6d4b\u8bd5\u6570\u636e\u7684\u5c55\u793a\ntest.head()","8382c30a":"print('how many lines in train set:', sales_train.shape)\nprint('unique items in train set:', sales_train['item_id'].nunique())\nprint('unique shops in train set:', sales_train['shop_id'].nunique())\nprint('how many lines in test set:', test.shape)\nprint('unique items in test set:', test['item_id'].nunique())\nprint('unique shops in test set:', test['shop_id'].nunique())","a75817f3":"print('----------head---------')\nprint(sales_train.head(5))\nprint('------information------')\nprint(sales_train.info())\nprint('-----missing value-----')\nprint(sales_train.isnull().sum())\nprint('--------nan value------')\nprint(sales_train.isna().sum())","fefd899e":"# \u57fa\u7ebf\u6a21\u578b\u9884\u6d4b\nsales_train_subset = sales_train[sales_train['date_block_num'] == 33]\nsales_train_subset.head()","84413c01":"# groupby\u662f\u7c7b\u4f3c\u5206\u7ec4\u64cd\u4f5c\uff0c\u4ee5['shop_id','item_id'] \u6765\u8fdb\u884c\u5206\u7c7b\n# \u8fd9\u5c31\u662f ['shop_id','item_id','item_cnt_day'] \u62bd\u53d6\u51fa\u6765\uff0c\u5176\u4e2d\u4ee5 ['shop_id','item_id'] \u4e3a\u5143\u7ec4\u5bf9 'item_cnt_day' \u8fdb\u884c\u6c42\u548c\n# \u7136\u540e\u5c06 'item_cnt_day' \u6539\u540d\u4e3a 'item_cnt_month'\ngrouped = sales_train_subset[['shop_id','item_id','item_cnt_day']].groupby(['shop_id','item_id']).agg({'item_cnt_day':'sum'}).reset_index() # eset_indexs\u662f\u91cd\u65b0\u8bbe\u7f6e\u7d22\u5f15\ngrouped = grouped.rename(columns={'item_cnt_day' : 'item_cnt_month'})\ngrouped.head()","4cd6cd1b":"# \u8fd9\u5c31\u662f\u7b80\u5355\u7684\u8bb2 \u8bad\u7ec3\u96c6\u6700\u540e\u4e00\u4e2a\u6708\u7684\u6570\u636e\u5bf9\u5e94 \u5728 test.csv \u4e2d \u5f97\u5230\u7136\u540e\u4fdd\u5b58\ntest = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')\ntest = pd.merge(test,grouped, on = ['shop_id','item_id'], how = 'left')\nprint(test.head())\ntest['item_cnt_month'] = test['item_cnt_month'].fillna(0).clip(0,20)\nprint(test.head())\ntest = test[['ID','item_cnt_month']]\nsubmission = test.set_index('ID')\nsubmission.to_csv('submission_baseline.csv')","bc9da47a":"def downcast_dtypes(df):\n    cols_float64 = [c for c in df if df[c].dtype == 'float64']\n    cols_int64_32 = [c for c in df if df[c].dtype in ['int64', 'int32']]\n    df[cols_float64] = df[cols_float64].astype(np.float32)\n    df[cols_int64_32] = df[cols_int64_32].astype(np.int16)\n    return df\nsales_train = downcast_dtypes(sales_train)\ntest = downcast_dtypes(test)\nprint(sales_train.info())","3d3df211":"# \u67e5\u770b\u6bcf\u4ef6\u5546\u54c1\u6bcf\u4e2a\u6708\u7684\u9500\u91cf\nsales_by_item_id = sales_train.pivot_table(index=['item_id'],values=['item_cnt_day'], \n                                        columns='date_block_num', aggfunc=np.sum, fill_value=0).reset_index()\nsales_by_item_id.columns = sales_by_item_id.columns.droplevel().map(str)\nsales_by_item_id = sales_by_item_id.reset_index(drop=True).rename_axis(None, axis=1)\nsales_by_item_id.columns.values[0] = 'item_id'\n","987e3fe7":"sales_by_item_id.tail()","c4d9dec5":"sales_by_item_id.shape","6e5210ac":"# \u6ce8\u91ca\u4e3a \u81ea\u5df1\u6d4b\u8bd5\u7528\n# sales_by_item_id['0'].sum()\n# sales_by_item_id.sum()[1:]\nsales_by_item_id.sum()[1:].plot(legend=True, label=\"Monthly sum\")","01cac6dc":"outdated_items = sales_by_item_id[sales_by_item_id.loc[:,'27':].sum(axis=1)==0]\nprint('Outdated items:', len(outdated_items))\ntest = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')\nprint('unique items in test set:', test['item_id'].nunique())\nprint('Outdated items in test set:', test[test['item_id'].isin(outdated_items['item_id'])]['item_id'].nunique())\n","290b6c63":"# duplicated() \u662f\u4e24\u884c\u6240\u6709\u5143\u7d20\u90fd\u662f\u91cd\u590d\u7684\u624d\u662f\u91cd\u590d\u7684\nprint(\"duplicated lines in sales_train is\", len(sales_train[sales_train.duplicated()]))","25c104bf":"# \u5982\u679c\u4f60\u60f3\u5220\u9664\u7684\u8bdd\nsales_train_alter = sales_train.drop_duplicates()             #\u4fdd\u7559\u7b2c\u4e00\u4e2a\u503c\uff0c\u8fd4\u56de\u526f\u672c\nprint(sales_train.shape)\nprint(sales_train_alter.shape)","4c49d21b":"sales_by_shop_id = sales_train.pivot_table(index=['shop_id'],values=['item_cnt_day'], \n                                        columns='date_block_num', aggfunc=np.sum, fill_value=0).reset_index()\nsales_by_shop_id.columns = sales_by_shop_id.columns.droplevel().map(str)\nsales_by_shop_id = sales_by_shop_id.reset_index(drop=True).rename_axis(None, axis=1)\nsales_by_shop_id.columns.values[0] = 'shop_id'\n\nfor i in range(27,34):\n    print('Not exists in month',i,sales_by_shop_id['shop_id'][sales_by_shop_id.loc[:,'0':str(i)].sum(axis=1)==0].unique())\n\nfor i in range(27,34):\n    print('Shop is outdated for month',i,sales_by_shop_id['shop_id'][sales_by_shop_id.loc[:,str(i):].sum(axis=1)==0].unique())","346f4ed9":"item_categories = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\nitem_categories = item_categories[['item_id','item_category_id']]","4bafe890":"item_categories.head()","8c7ab0b8":"sales_train_merge_cat = pd.merge(sales_train,item_categories, on = 'item_id', how = 'left')\nsales_train_merge_cat.head()","7f5f1484":"\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.figure(figsize=(10,4))\nplt.xlim(-100,3000)\nsns.boxplot(x = sales_train['item_cnt_day'])\nprint('Sale volume outliers:',sales_train['item_cnt_day'][sales_train['item_cnt_day']>1001].unique())\nplt.figure(figsize=(10,4))\nplt.xlim(-10000,320000)\nsns.boxplot(x = sales_train['item_price'])\nprint('Sale price outliers:',sales_train['item_price'][sales_train['item_price']>300000].unique())\n","a4f22c1b":"# \u5220\u6389\u5f02\u5e38\u503c\nsales_train = sales_train[sales_train['item_cnt_day'] <1001]\nsales_train = sales_train[sales_train['item_price'] < 300000]\nplt.figure(figsize=(10,4))\nplt.xlim(-100,3000)\nsns.boxplot(x = sales_train['item_cnt_day'])\n\nplt.figure(figsize=(10,4))\nplt.xlim(-10000,320000)\nsns.boxplot(x = sales_train['item_price'])\n","852b2a95":"sales_train[sales_train['item_price']<0]","763037ff":"median = sales_train[(sales_train['date_block_num'] == 4) & (sales_train['shop_id'] == 32)\\\n                     & (sales_train['item_id'] == 2973) & (sales_train['item_price']>0)].item_price.median()\nsales_train.loc[sales_train['item_price']<0,'item_price'] = median\nprint(median)","eae04585":"test = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')\ngood_sales = test.merge(sales_train, on=['item_id','shop_id'], how='left').dropna()\ngood_pairs = test[test['ID'].isin(good_sales['ID'])]\nno_data_items = test[~(test['item_id'].isin(sales_train['item_id']))]\n\nprint('1. Number of good pairs:', len(good_pairs))\nprint('2. No Data Items:', len(no_data_items))\nprint('3. Only Item_id Info:', len(test)-len(no_data_items)-len(good_pairs))\n","5c1e2d60":"no_data_items.head()","88f5de76":"good_sales.head()","1cbaec98":"shops = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv')\nshops.head()","991fff61":"# \u6ca1\u6709\u88ab\u5229\u7528\nsales12 = np.array(sales_by_shop_id.loc[sales_by_shop_id['shop_id'] == 12 ].values)\nsales12 = sales12[:,1:].reshape(-1)\nsales55 = np.array(sales_by_shop_id.loc[sales_by_shop_id['shop_id'] == 55 ].values)\nsales55 = sales55[:,1:].reshape(-1)\nmonths = np.array(sales_by_shop_id.loc[sales_by_shop_id['shop_id'] == 12 ].columns[1:])\nnp.corrcoef(sales12,sales55)","37ef1151":"# \u7ed9\u8bad\u7ec3\u96c6\u4e2d\u6362\u540d\u5b57\uff0c\u6d4b\u8bd5\u96c6\u4e0d\u8981\u6362\u7684\u539f\u56e0\u662f\u6d4b\u8bd5\u96c6\u4e2d\u672c\u8eab\u5c31\u6ca1\u6709\u8fd9\u4e2a ID\nsales_train.loc[sales_train['shop_id'] == 0,'shop_id'] = 57\nsales_train.loc[sales_train['shop_id'] == 1,'shop_id'] = 58\nsales_train.loc[sales_train['shop_id'] == 11,'shop_id'] = 10\nsales_train.loc[sales_train['shop_id'] == 40,'shop_id'] = 39","509c8611":"\nshops['shop_name'] = shops['shop_name'].apply(lambda x: x.lower()).str.replace('[^\\w\\s]', '').str.replace('\\d+','').str.strip()\nshops['shop_city'] = shops['shop_name'].str.partition(' ')[0]\nshops['shop_type'] = shops['shop_name'].apply(lambda x: '\u043c\u0442\u0440\u0446' if '\u043c\u0442\u0440\u0446' in x else '\u0442\u0440\u0446' if '\u0442\u0440\u0446' in x else '\u0442\u0440\u043a' if '\u0442\u0440\u043a' in x else '\u0442\u0446' if '\u0442\u0446' in x else '\u0442\u043a' if '\u0442\u043a' in x else 'NO_DATA')\nshops.head()","474a72fb":"from sklearn.preprocessing import LabelEncoder\nshops['shop_city_code'] = LabelEncoder().fit_transform(shops['shop_city'])\nshops['shop_type_code'] = LabelEncoder().fit_transform(shops['shop_type'])\nshops.head()\n","c85a8cf5":"categories = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')","98383f96":"lines1 = [26,27,28,29,30,31]\nlines2 = [81,82]\nfor index in lines1:\n    category_name = categories.loc[index,'item_category_name']\n#    print(category_name)\n    category_name = category_name.replace('\u0418\u0433\u0440\u044b','\u0418\u0433\u0440\u044b -')\n#    print(category_name)\n    categories.loc[index,'item_category_name'] = category_name\nfor index in lines2:\n    category_name = categories.loc[index,'item_category_name']\n#    print(category_name)\n    category_name = category_name.replace('\u0427\u0438\u0441\u0442\u044b\u0435','\u0427\u0438\u0441\u0442\u044b\u0435 -')\n#    print(category_name)\n    categories.loc[index,'item_category_name'] = category_name\ncategory_name = categories.loc[32,'item_category_name']\n#print(category_name)\ncategory_name = category_name.replace('\u041a\u0430\u0440\u0442\u044b \u043e\u043f\u043b\u0430\u0442\u044b','\u041a\u0430\u0440\u0442\u044b \u043e\u043f\u043b\u0430\u0442\u044b -')\n#print(category_name)\ncategories.loc[32,'item_category_name'] = category_name","8df206c5":"categories.head()","257070e1":"categories['split'] = categories['item_category_name'].str.split('-')\ncategories['type'] = categories['split'].map(lambda x:x[0].strip())\ncategories['subtype'] = categories['split'].map(lambda x:x[1].strip() if len(x)>1 else x[0].strip())\ncategories = categories[['item_category_id','type','subtype']]\ncategories.head()","c92050ba":"categories['cat_type_code'] = LabelEncoder().fit_transform(categories['type'])\ncategories['cat_subtype_code'] = LabelEncoder().fit_transform(categories['subtype'])\ncategories.head()","0cd739d9":"from itertools import product\nimport time\nts = time.time()\nmatrix = []\ncols = ['date_block_num','shop_id','item_id'] # \u5217\u540d\n\nfor i in range(34):\n    sales = sales_train[sales_train.date_block_num==i]\n    matrix.append(np.array(list(product([i], sales.shop_id.unique(), sales.item_id.unique())), dtype='int16'))\n    \nmatrix = pd.DataFrame(np.vstack(matrix), columns=cols)\n# \u51cf\u5c11\u6570\u636e\u5185\u5b58\u4f7f\u7528\uff0c\u52a0\u5feb\u8fd0\u7b97\nmatrix['date_block_num'] = matrix['date_block_num'].astype(np.int8)\nmatrix['shop_id'] = matrix['shop_id'].astype(np.int8)\nmatrix['item_id'] = matrix['item_id'].astype(np.int16)\nmatrix.sort_values(cols,inplace=True)\ntime.time() - ts\n\nsales_train['revenue'] = sales_train['item_price'] *  sales_train['item_cnt_day']  # \u5f53\u524d\u8be5\u5546\u54c1\u7684\u603b\u6536\u5165\n\ngroupby = sales_train.groupby(['item_id','shop_id','date_block_num']).agg({'item_cnt_day':'sum'})\ngroupby.columns = ['item_cnt_month']   # \u5c06\u6bcf\u4e2a\u5546\u54c1\u8fd9\u4e2a\u6708\u7684\u603b\u9500\u552e\u91cf\u6c42\u548c\ngroupby.reset_index(inplace=True)\nmatrix = matrix.merge(groupby, on = ['item_id','shop_id','date_block_num'], how = 'left')\nmatrix['item_cnt_month'] = matrix['item_cnt_month'].fillna(0).clip(0,20).astype(np.float16)  # \u586b\u5145 0\nmatrix.head()\n\ntest['date_block_num'] = 34  # \u5c06\u6d4b\u8bd5\u96c6\u4f5c\u4e3a\u7b2c35 \u4e2a\u6708\u653e\u5165\u8bad\u7ec3\u96c6\u4e2d   \ntest['date_block_num'] = test['date_block_num'].astype(np.int8)  # \u6539\u53d8\u6570\u636e\u5185\u5b58\ntest['shop_id'] = test['shop_id'].astype(np.int8)\ntest['item_id'] = test['item_id'].astype(np.int16)\ntest.shape\n\ncols = ['date_block_num','shop_id','item_id']\nmatrix = pd.concat([matrix, test[['item_id','shop_id','date_block_num']]], ignore_index=True, sort=False, keys=cols)\nmatrix.fillna(0, inplace=True) # \u7b2c 35 month  \u4e2d\u6bcf\u4e2a\u5546\u54c1\u5bf9\u7684\u6708\u9500\u552e\u91cf\u4e3a0\n","5b302f44":"matrix[matrix['date_block_num']==34]   # \u8fd9\u4e2a\u6708\u7684","57225f74":"print(matrix['item_cnt_month'].isna().sum())\nprint(matrix['item_cnt_month'].isnull().sum())","b09cc50b":"import time\nts = time.time()\nitems = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\nmatrix = matrix.merge(items[['item_id','item_category_id']], on = ['item_id'], how = 'left')\n# \u8fd9\u662f\u5bf9\u5546\u54c1\u79cd\u7c7b\u505a\u4e00\u4e2a\u5212\u5206\nmatrix = matrix.merge(categories[['item_category_id','cat_type_code','cat_subtype_code']], on = ['item_category_id'], how = 'left')\n# \u8fd9\u662f\u5bf9\u5546\u5e97\u505a\u4e00\u4e2a\u5212\u5206\nmatrix = matrix.merge(shops[['shop_id','shop_city_code','shop_type_code']], on = ['shop_id'], how = 'left')\nmatrix['shop_city_code'] = matrix['shop_city_code'].astype(np.int8)\nmatrix['shop_type_code'] = matrix['shop_type_code'].astype(np.int8)\nmatrix['item_category_id'] = matrix['item_category_id'].astype(np.int8)\nmatrix['cat_type_code'] = matrix['cat_type_code'].astype(np.int8)\nmatrix['cat_subtype_code'] = matrix['cat_subtype_code'].astype(np.int8)\ntime.time() - ts","d0bf6025":"matrix.head()","111c489b":"matrix.info()","68a54f69":"def lag_feature(df, lags, col):\n    tmp = df[['date_block_num','shop_id','item_id',col]]\n    for i in lags:\n        shifted = tmp.copy()\n        shifted.columns = ['date_block_num','shop_id','item_id', col+'_lag_'+str(i)]\n        shifted['date_block_num'] += i\n        df = pd.merge(df, shifted, on=['date_block_num','shop_id','item_id'], how='left')\n    return df","6c461e20":"ts = time.time()\nmatrix = lag_feature(matrix, [1,2,3,6,12], 'item_cnt_month')\ntime.time() - ts","fed780ae":"ts = time.time()\ngroup = matrix.groupby(['date_block_num']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num'], how='left')\nmatrix['date_avg_item_cnt'] = matrix['date_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1,2,3,6,12], 'date_avg_item_cnt')\nmatrix.drop(['date_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts\n","5fec1c8d":"matrix.head() # date_avg_item_cnt\u7684\u76f8\u5173\u4fe1\u606f","c3206df6":"ts = time.time()\ngroup = matrix.groupby(['date_block_num', 'item_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_item_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','item_id'], how='left')\nmatrix['date_item_avg_item_cnt'] = matrix['date_item_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1,2,3,6,12], 'date_item_avg_item_cnt')\nmatrix.drop(['date_item_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts","5b173478":"matrix.head() # ","211fb331":"ts = time.time()\ngroup = matrix.groupby(['date_block_num', 'shop_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_shop_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','shop_id'], how='left')\nmatrix['date_shop_avg_item_cnt'] = matrix['date_shop_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1,2,3,6,12], 'date_shop_avg_item_cnt')\nmatrix.drop(['date_shop_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts","8e10a97c":"ts = time.time()\ngroup = matrix.groupby(['date_block_num', 'item_category_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_cat_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','item_category_id'], how='left')\nmatrix['date_cat_avg_item_cnt'] = matrix['date_cat_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1,2,3,6,12], 'date_cat_avg_item_cnt')\nmatrix.drop(['date_cat_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts","fce7b67a":"matrix.head()","5256d82d":"ts = time.time()\ngroup = matrix.groupby(['date_block_num', 'item_category_id','shop_id']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_cat_shop_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'item_category_id','shop_id'], how='left')\nmatrix['date_cat_shop_avg_item_cnt'] = matrix['date_cat_shop_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1,2,3,6,12], 'date_cat_shop_avg_item_cnt')\nmatrix.drop(['date_cat_shop_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts","d6185b7a":"matrix.head()","e278799e":"ts = time.time()\ngroup = matrix.groupby(['date_block_num', 'cat_type_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_type_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','cat_type_code'], how='left')\nmatrix['date_type_avg_item_cnt'] = matrix['date_type_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1,2,3,6,12], 'date_type_avg_item_cnt')\nmatrix.drop(['date_type_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts\n","5087448f":"matrix.head()","d6d60543":"ts = time.time()\ngroup = matrix.groupby(['date_block_num', 'item_id','cat_type_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = [ 'date_item_type_avg_item_cnt' ]\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','item_id','cat_type_code'], how='left')\nmatrix['date_item_type_avg_item_cnt'] = matrix['date_item_type_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1,2,3,6,12], 'date_item_type_avg_item_cnt')\nmatrix.drop(['date_item_type_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts","1f3f3ff7":"matrix.head()","18dca4f3":"ts = time.time()\ngroup = matrix.groupby(['date_block_num', 'shop_city_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = ['date_city_avg_item_cnt']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num',  'shop_city_code'], how='left')\nmatrix['date_city_avg_item_cnt'] = matrix['date_city_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1,2,3,6,12], 'date_city_avg_item_cnt')\nmatrix.drop(['date_city_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts\n","b486f7e1":"matrix.head()","b578c978":"ts = time.time()\ngroup = matrix.groupby(['date_block_num','item_id', 'shop_city_code']).agg({'item_cnt_month': ['mean']})\ngroup.columns = ['date_item_city_avg_item_cnt']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num', 'item_id', 'shop_city_code'], how='left')\nmatrix['date_item_city_avg_item_cnt'] = matrix['date_item_city_avg_item_cnt'].astype(np.float16)\nmatrix = lag_feature(matrix, [1,2,3,6,12], 'date_item_city_avg_item_cnt')\nmatrix.drop(['date_item_city_avg_item_cnt'], axis=1, inplace=True)\ntime.time() - ts","79dff7be":"ts = time.time()\ngroup = sales_train.groupby(['item_id']).agg({'item_price': ['mean']})\ngroup.columns = ['item_avg_item_price']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['item_id'], how='left')\nmatrix['item_avg_item_price'] = matrix['item_avg_item_price'].astype(np.float16)\n\ngroup = sales_train.groupby(['date_block_num','item_id']).agg({'item_price': ['mean']})\ngroup.columns = ['date_item_avg_item_price']\ngroup.reset_index(inplace=True)\n\nmatrix = pd.merge(matrix, group, on=['date_block_num','item_id'], how='left')\nmatrix['date_item_avg_item_price'] = matrix['date_item_avg_item_price'].astype(np.float16)\n\nlags = [1,2,3,4,5,6,12]\nmatrix = lag_feature(matrix, lags, 'date_item_avg_item_price')\n\nfor i in lags:\n    matrix['delta_price_lag_'+str(i)] = \\\n        (matrix['date_item_avg_item_price_lag_'+str(i)] - matrix['item_avg_item_price']) \/ matrix['item_avg_item_price']\n\ndef select_trend(row):\n    for i in lags:\n        if row['delta_price_lag_'+str(i)]:\n            return row['delta_price_lag_'+str(i)]\n    return 0\n    \nmatrix['delta_price_lag'] = matrix.apply(select_trend, axis=1)\nmatrix['delta_price_lag'] = matrix['delta_price_lag'].astype(np.float16)\nmatrix['delta_price_lag'].fillna(0, inplace=True)\n\n# https:\/\/stackoverflow.com\/questions\/31828240\/first-non-null-value-per-row-from-a-list-of-pandas-columns\/31828559\n# matrix['price_trend'] = matrix[['delta_price_lag_1','delta_price_lag_2','delta_price_lag_3']].bfill(axis=1).iloc[:, 0]\n# Invalid dtype for backfill_2d [float16]\n\nfetures_to_drop = ['item_avg_item_price', 'date_item_avg_item_price']\nfor i in lags:\n    fetures_to_drop += ['date_item_avg_item_price_lag_'+str(i)]\n    fetures_to_drop += ['delta_price_lag_'+str(i)]\n\nmatrix.drop(fetures_to_drop, axis=1, inplace=True)\n\ntime.time() - ts\n","b23c2daf":"matrix.head()","5a9f23a6":"matrix['month'] = matrix['date_block_num'] % 12\ndays = pd.Series([31,28,31,30,31,30,31,31,30,31,30,31])\nmatrix['days'] = matrix['month'].map(days).astype(np.int8)","2615cdfb":"matrix.head()","6f14798d":"ts = time.time()\ncache = {}\nmatrix['item_shop_last_sale'] = -1\nmatrix['item_shop_last_sale'] = matrix['item_shop_last_sale'].astype(np.int8)\nfor idx, row in matrix.iterrows():    \n    key = str(row.item_id)+' '+str(row.shop_id)\n    if key not in cache:\n        if row.item_cnt_month!=0:\n            cache[key] = row.date_block_num\n    else:\n        last_date_block_num = cache[key]\n        matrix.at[idx, 'item_shop_last_sale'] = row.date_block_num - last_date_block_num\n        cache[key] = row.date_block_num         \ntime.time() - ts\n","debf7f68":"matrix.head()","0df56734":"ts = time.time()\nmatrix['item_shop_first_sale'] = matrix['date_block_num'] - matrix.groupby(['item_id','shop_id'])['date_block_num'].transform('min')\nmatrix['item_first_sale'] = matrix['date_block_num'] - matrix.groupby('item_id')['date_block_num'].transform('min')\ntime.time() - ts","27e4cdbd":"ts = time.time()\nmatrix = matrix[matrix.date_block_num > 11]\ntime.time() - ts","04511b8d":"ts = time.time()\ndef fill_na(df):\n    for col in df.columns:\n        if ('_lag_' in col) & (df[col].isnull().any()):\n            if ('item_cnt' in col):\n                df[col].fillna(0, inplace=True)         \n    return df\n\nmatrix = fill_na(matrix)\ntime.time() - ts","b662833b":"matrix.head()","39c76274":"#Save dataset  # \u770b\u770b\u9700\u8981\u5220\u9664\u54ea\u4e9b\u6570\u636e\n# df.drop(['ID'], axis=1, inplace=True, errors='ignore')\nmatrix.to_pickle('version2.pkl')","0f77c095":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport time\nimport gc\nimport pickle\nfrom itertools import product\nfrom sklearn.preprocessing import LabelEncoder\n\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 100)\n\n","8484d66a":"def plot_features(booster, figsize):    \n    fig, ax = plt.subplots(1,1,figsize=figsize)\n    return plot_importance(booster=booster, ax=ax)","fbdef8d8":"data = pd.read_pickle('version2.pkl')","3efa6b96":"X_train = data[data.date_block_num < 33].drop(['item_cnt_month'], axis=1)\nY_train = data[data.date_block_num < 33]['item_cnt_month']\nX_valid = data[data.date_block_num == 33].drop(['item_cnt_month'], axis=1)\nY_valid = data[data.date_block_num == 33]['item_cnt_month']\nX_test = data[data.date_block_num == 34].drop(['item_cnt_month'], axis=1)\n","cb567dfb":"del data\ngc.collect();","ba31e66c":"X_test.tail()","ebadf8d1":"import lightgbm as lgb\n\nts = time.time()\ntrain_data = lgb.Dataset(data=X_train, label=Y_train)\nvalid_data = lgb.Dataset(data=X_valid, label=Y_valid)\n\ntime.time() - ts\n    \nparams = {\"objective\" : \"regression\", \"metric\" : \"rmse\", 'n_estimators':10000, 'early_stopping_rounds':50,\n              \"num_leaves\" : 200, \"learning_rate\" : 0.01, \"bagging_fraction\" : 0.9,\n              \"feature_fraction\" : 0.3, \"bagging_seed\" : 0}\n    \nlgb_model = lgb.train(params, train_data, valid_sets=[train_data, valid_data], verbose_eval=1000) \nY_test = lgb_model.predict(X_test).clip(0, 20)\n","e81f2b4c":"\n\nsubmission = pd.DataFrame({\n    \"ID\": test.index, \n    \"item_cnt_month\": X_test\n})\nsubmission.to_csv('gbm_submission.csv', index=False)","812f1ad7":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom itertools import product\nfrom xgboost import XGBRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nimport lightgbm as lgb\nimport calendar\nfrom datetime import datetime\n%matplotlib inline","c637e728":"test = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')\nsales = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\nshops = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv')\nitems = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\nitem_cats = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')","561ee26c":"sales.head()","9cc20cf4":"train = sales[(sales.item_price<10000)&(sales.item_price>0)]\ntrain = train[sales.item_cnt_day<1001]","03e8b1d1":"# 0, 57 \u7684\u503c\u8f93\u51fa\nprint(shops[shops.shop_id.isin([0, 57])]['shop_name'])\nprint(shops[shops.shop_id.isin([1, 58])]['shop_name'])\nprint(shops[shops.shop_id.isin([40, 39])]['shop_name'])\n# \u662f \u8fd9\u4e24\u4e2a\u53ef\u80fd\u662f\u4e00\u4e2a\u5e97\u540d\uff0c\u7136\u540e\u53ef\u4ee5\u6539\u4e3a\u4e00\u4e2a\ntrain.loc[train.shop_id == 0, 'shop_id'] = 57\ntest.loc[test.shop_id == 0, 'shop_id'] = 57\ntrain.loc[train.shop_id == 1, 'shop_id'] = 58\ntest.loc[test.shop_id == 1, 'shop_id'] = 58\ntrain.loc[train.shop_id == 40, 'shop_id'] = 39\ntest.loc[test.shop_id == 40, 'shop_id'] = 39","09e05d1f":"index_cols = ['shop_id', 'item_id', 'date_block_num']\ndf = [] \nfor block_num in train['date_block_num'].unique():\n    # \u5bf9\u5e94\u6708\u4efd\u7684 \u5546\u54c1\u548c\u5546\u5e97 \u8fdb\u884c\u7b1b\u5361\u5c14\u96c6\n    # \u6ce8\u610f\u90fd\u662f\u5728\u5f53\u524d\u6708\u4efd\u4e0b\u9762\u7684\u5546\u5e97id\u548c\u4ea7\u54c1id\u7684\u7ec4\u5408\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u7ec4\u5408\u624d\u6709\u610f\u4e49\u3002\n    cur_shops = train.loc[sales['date_block_num'] == block_num, 'shop_id'].unique()\n    cur_items = train.loc[sales['date_block_num'] == block_num, 'item_id'].unique()\n    df.append(np.array(list(product(*[cur_shops, cur_items, [block_num]])),dtype='int32'))\n# \u5c06\u4e24\u4e2a\u7ef4\u5ea6\u76f8\u540c\u7684numpy\u6570\u7ec4\u7ad6\u5411\u62fc\u63a5\u3002\u8fd9\u4e2a\u5c31\u662f\u4e00\u4e2a\u5168\u65b0\u7684 dataframe\ndf = pd.DataFrame(np.vstack(df), columns = index_cols,dtype=np.int32)","7a399245":"df.head()","036fc059":"# \u5c06 \u5bf9\u6bcf\u4e2a\u6708\u4e0b\uff0c\u6bcf\u4e00\u4e2a\u5143\u7ec4\u7684\u5f53\u5929\u9500\u552e\u91cf\u4e5f\u5c31\u662fitem-cnt-day\u5b57\u6bb5\u8fdb\u884csum\u64cd\u4f5c\ngroup = train.groupby(['date_block_num','shop_id','item_id']).agg({'item_cnt_day': ['sum']})\ngroup.columns = ['item_cnt_month']\ngroup.reset_index(inplace=True)","dccf6d73":"group.head()","0ffc7ff5":"# \u7ed3\u679cmerge\u5230df\u4e2d\uff0c\u7f3a\u5931\u6570\u636e\u8fdb\u884c0\u586b\u5145\ndf = pd.merge(df, group, on=index_cols, how='left')\n\ndf['item_cnt_month'] = (df['item_cnt_month']\n                                .fillna(0)\n                                .clip(0,20)\n                                .astype(np.float16))","246e346f":"df.head()","38004608":"test['date_block_num'] = 34\ntest['date_block_num'] = test['date_block_num'].astype(np.int8)\ntest['shop_id'] = test['shop_id'].astype(np.int8)\ntest['item_id'] = test['item_id'].astype(np.int16)\n# test \u770b\u4f5c\u7b2c35\u4e2a\u6708\u7684\ndf = pd.concat([df, test], ignore_index=True, sort=False, keys=index_cols)\ndf.fillna(0,inplace=True)","dc534baf":"df    # \u8fd9\u4e2a ID \u8be5\u5b57\u6bb5\u6bd4\u8f83\u7279\u6b8a\uff0c\u4ed6\u8868\u793a\u7684\u662f\uff08shop_id\uff0citem-id\uff09\u7ec4\u6210\u7684\u5143\u7ec4\uff08tuple\uff09\u7684\u6807\u8bc6ID","1b73267d":"\n# \u7279\u5f81\u4e2d\u53c8\u5305\u542b\u4e86\u5546\u5e97\u7684\u4f4d\u7f6e\u4fe1\u606f\u3002 \u7ecf\u7eac\u5ea6\uff0c\u5730\u533a\u7801\nshops['city'] = shops['shop_name'].apply(lambda x: x.split()[0].lower())\nshops.loc[shops.city == '!\u044f\u043a\u0443\u0442\u0441\u043a', 'city'] = '\u044f\u043a\u0443\u0442\u0441\u043a'\nshops['city_code'] = LabelEncoder().fit_transform(shops['city'])\n\ncoords = dict()\ncoords['\u044f\u043a\u0443\u0442\u0441\u043a'] = (62.028098, 129.732555, 4)\ncoords['\u0430\u0434\u044b\u0433\u0435\u044f'] = (44.609764, 40.100516, 3)\ncoords['\u0431\u0430\u043b\u0430\u0448\u0438\u0445\u0430'] = (55.8094500, 37.9580600, 1)\ncoords['\u0432\u043e\u043b\u0436\u0441\u043a\u0438\u0439'] = (53.4305800, 50.1190000, 3)\ncoords['\u0432\u043e\u043b\u043e\u0433\u0434\u0430'] = (59.2239000, 39.8839800, 2)\ncoords['\u0432\u043e\u0440\u043e\u043d\u0435\u0436'] = (51.6720400, 39.1843000, 3)\ncoords['\u0432\u044b\u0435\u0437\u0434\u043d\u0430\u044f'] = (0, 0, 0)\ncoords['\u0436\u0443\u043a\u043e\u0432\u0441\u043a\u0438\u0439'] = (55.5952800, 38.1202800, 1)\ncoords['\u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d'] = (0, 0, 0)\ncoords['\u043a\u0430\u0437\u0430\u043d\u044c'] = (55.7887400, 49.1221400, 4)\ncoords['\u043a\u0430\u043b\u0443\u0433\u0430'] = (54.5293000, 36.2754200, 4)\ncoords['\u043a\u043e\u043b\u043e\u043c\u043d\u0430'] = (55.0794400, 38.7783300, 4)\ncoords['\u043a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a'] = (56.0183900, 92.8671700, 4)\ncoords['\u043a\u0443\u0440\u0441\u043a'] = (51.7373300, 36.1873500, 3)\ncoords['\u043c\u043e\u0441\u043a\u0432\u0430'] = (55.7522200, 37.6155600, 1)\ncoords['\u043c\u044b\u0442\u0438\u0449\u0438'] = (55.9116300, 37.7307600, 1)\ncoords['\u043d.\u043d\u043e\u0432\u0433\u043e\u0440\u043e\u0434'] = (56.3286700, 44.0020500, 4)\ncoords['\u043d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a'] = (55.0415000, 82.9346000, 4)\ncoords['\u043e\u043c\u0441\u043a'] = (54.9924400, 73.3685900, 4)\ncoords['\u0440\u043e\u0441\u0442\u043e\u0432\u043d\u0430\u0434\u043e\u043d\u0443'] = (47.2313500, 39.7232800, 3)\ncoords['\u0441\u043f\u0431'] = (59.9386300, 30.3141300, 2)\ncoords['\u0441\u0430\u043c\u0430\u0440\u0430'] = (53.2000700, 50.1500000, 4)\ncoords['\u0441\u0435\u0440\u0433\u0438\u0435\u0432'] = (56.3000000, 38.1333300, 4)\ncoords['\u0441\u0443\u0440\u0433\u0443\u0442'] = (61.2500000, 73.4166700, 4)\ncoords['\u0442\u043e\u043c\u0441\u043a'] = (56.4977100, 84.9743700, 4)\ncoords['\u0442\u044e\u043c\u0435\u043d\u044c'] = (57.1522200, 65.5272200, 4)\ncoords['\u0443\u0444\u0430'] = (54.7430600, 55.9677900, 4)\ncoords['\u0445\u0438\u043c\u043a\u0438'] = (55.8970400, 37.4296900, 1)\ncoords['\u0446\u0438\u0444\u0440\u043e\u0432\u043e\u0439'] = (0, 0, 0)\ncoords['\u0447\u0435\u0445\u043e\u0432'] = (55.1477000, 37.4772800, 4)\ncoords['\u044f\u0440\u043e\u0441\u043b\u0430\u0432\u043b\u044c'] = (57.6298700, 39.8736800, 2) \n\nshops['city_coord_1'] = shops['city'].apply(lambda x: coords[x][0])\nshops['city_coord_2'] = shops['city'].apply(lambda x: coords[x][1])\nshops['country_part'] = shops['city'].apply(lambda x: coords[x][2])\nshops = shops[['shop_id', 'city_code', 'city_coord_1', 'city_coord_2', 'country_part']]\ndf = pd.merge(df, shops, on=['shop_id'], how='left')\n","c0b6ec60":"df","9e3f9262":"# \u8fd9\u91cc\u5b57\u5178\u7684\u610f\u601d\u4e0d\u592a\u4e86\u89e3\nmap_dict = {\n            '\u0427\u0438\u0441\u0442\u044b\u0435 \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u0438 (\u0448\u0442\u0443\u0447\u043d\u044b\u0435)': '\u0427\u0438\u0441\u0442\u044b\u0435 \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u0438',\n            '\u0427\u0438\u0441\u0442\u044b\u0435 \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u0438 (\u0448\u043f\u0438\u043b\u044c)' : '\u0427\u0438\u0441\u0442\u044b\u0435 \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u0438',\n            'PC ': '\u0410\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u044b',\n            '\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435': '\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435 '\n            }\n\nitems = pd.merge(items, item_cats, on='item_category_id')\n\nitems['item_category'] = items['item_category_name'].apply(lambda x: x.split('-')[0])\nitems['item_category'] = items['item_category'].apply(lambda x: map_dict[x] if x in map_dict.keys() else x)\nitems['item_category_common'] = LabelEncoder().fit_transform(items['item_category'])\n\nitems['item_category_code'] = LabelEncoder().fit_transform(items['item_category_name'])\nitems = items[['item_id', 'item_category_common', 'item_category_code']]\ndf = pd.merge(df, items, on=['item_id'], how='left')","66a4b5d0":"df","437bc746":"# \u5e38\u89c4\u624b\u6bb5\uff1f\uff1f\ndef count_days(date_block_num):\n    year = 2013 + date_block_num \/\/ 12\n    month = 1 + date_block_num % 12\n    weeknd_count = len([1 for i in calendar.monthcalendar(year, month) if i[6] != 0])\n    days_in_month = calendar.monthrange(year, month)[1]\n    return weeknd_count, days_in_month, month\n\nmap_dict = {i: count_days(i) for i in range(35)}\n\ndf['weeknd_count'] = df['date_block_num'].apply(lambda x: map_dict[x][0])\ndf['days_in_month'] = df['date_block_num'].apply(lambda x: map_dict[x][1])","b42f51a1":"df","78897dd7":"# \u6807\u8bb0\u51fa\u54ea\u4e9b\u5546\u54c1\u662f\u7b2c\u4e00\u6b21\u4e0a\u5e02\uff0c\u54ea\u4e9b\u4e0d\u662f\nfirst_item_block = df.groupby(['item_id'])['date_block_num'].min().reset_index()\nfirst_item_block['item_first_interaction'] = 1\n# \u6807\u8bb0\u51fa\u54ea\u4e9b\u5546\u54c1\u662f\u7b2c\u4e00\u6b21\u5356\u51fa\u7684\uff0c\u90a3\u4e9b\u4e0d\u662f\nfirst_shop_item_buy_block = df[df['item_cnt_month'] > 0].groupby(['shop_id', 'item_id'])['date_block_num'].min().reset_index()\nfirst_shop_item_buy_block['first_date_block_num'] = first_shop_item_buy_block['date_block_num']","05e42e91":"df = pd.merge(df, first_item_block[['item_id', 'date_block_num', 'item_first_interaction']], on=['item_id', 'date_block_num'], how='left')\ndf = pd.merge(df, first_shop_item_buy_block[['item_id', 'shop_id', 'first_date_block_num']], on=['item_id', 'shop_id'], how='left')\n\ndf['first_date_block_num'].fillna(100, inplace=True)\ndf['shop_item_sold_before'] = (df['first_date_block_num'] < df['date_block_num']).astype('int8')\ndf.drop(['first_date_block_num'], axis=1, inplace=True)\n\ndf['item_first_interaction'].fillna(0, inplace=True)\ndf['shop_item_sold_before'].fillna(0, inplace=True)\n \ndf['item_first_interaction'] = df['item_first_interaction'].astype('int8')  \ndf['shop_item_sold_before'] = df['shop_item_sold_before'].astype('int8')","69b8669f":"df","2f0ed71f":"def lag_feature(df, lags, col):\n    tmp = df[['date_block_num','shop_id','item_id',col]]\n    for i in lags:\n        shifted = tmp.copy()\n        shifted.columns = ['date_block_num','shop_id','item_id', col+'_lag_'+str(i)]\n        shifted['date_block_num'] += i\n        df = pd.merge(df, shifted, on=['date_block_num','shop_id','item_id'], how='left')\n        df[col+'_lag_'+str(i)] = df[col+'_lag_'+str(i)].astype('float16')\n    return df","ab0bdf23":"df = lag_feature(df, [1, 2, 3], 'item_cnt_month')","a0994b56":"#Add avg shop\/item price\n\nindex_cols = ['shop_id', 'item_id', 'date_block_num']\ngroup = train.groupby(index_cols)['item_price'].mean().reset_index().rename(columns={\"item_price\": \"avg_shop_price\"}, errors=\"raise\")\ndf = pd.merge(df, group, on=index_cols, how='left')\n\ndf['avg_shop_price'] = (df['avg_shop_price']\n                                .fillna(0)\n                                .astype(np.float16))\n\nindex_cols = ['item_id', 'date_block_num']\ngroup = train.groupby(['date_block_num','item_id'])['item_price'].mean().reset_index().rename(columns={\"item_price\": \"avg_item_price\"}, errors=\"raise\")\n\n\ndf = pd.merge(df, group, on=index_cols, how='left')\ndf['avg_item_price'] = (df['avg_item_price']\n                                .fillna(0)\n                                .astype(np.float16))\n\ndf['item_shop_price_avg'] = (df['avg_shop_price'] - df['avg_item_price']) \/ df['avg_item_price']\ndf['item_shop_price_avg'].fillna(0, inplace=True)\n\ndf = lag_feature(df, [1, 2, 3], 'item_shop_price_avg')\ndf.drop(['avg_shop_price', 'avg_item_price', 'item_shop_price_avg'], axis=1, inplace=True)","df03a491":"#Add target encoding for items for last 3 months \nitem_id_target_mean = df.groupby(['date_block_num','item_id'])['item_cnt_month'].mean().reset_index().rename(columns={\"item_cnt_month\": \"item_target_enc\"}, errors=\"raise\")\ndf = pd.merge(df, item_id_target_mean, on=['date_block_num','item_id'], how='left')\n\ndf['item_target_enc'] = (df['item_target_enc']\n                                .fillna(0)\n                                .astype(np.float16))\n\ndf = lag_feature(df, [1, 2, 3], 'item_target_enc')\ndf.drop(['item_target_enc'], axis=1, inplace=True)\n\n#Add target encoding for item\/city for last 3 months \nitem_id_target_mean = df.groupby(['date_block_num','item_id', 'city_code'])['item_cnt_month'].mean().reset_index().rename(columns={\n    \"item_cnt_month\": \"item_loc_target_enc\"}, errors=\"raise\")\ndf = pd.merge(df, item_id_target_mean, on=['date_block_num','item_id', 'city_code'], how='left')\n\ndf['item_loc_target_enc'] = (df['item_loc_target_enc']\n                                .fillna(0)\n                                .astype(np.float16))\n\ndf = lag_feature(df, [1, 2, 3], 'item_loc_target_enc')\ndf.drop(['item_loc_target_enc'], axis=1, inplace=True)","9a69dd10":"#For new items add avg category sales for last 3 months\nitem_id_target_mean = df[df['item_first_interaction'] == 1].groupby(['date_block_num','item_category_code'])['item_cnt_month'].mean().reset_index().rename(columns={\n    \"item_cnt_month\": \"new_item_cat_avg\"}, errors=\"raise\")\n\ndf = pd.merge(df, item_id_target_mean, on=['date_block_num','item_category_code'], how='left')\n\ndf['new_item_cat_avg'] = (df['new_item_cat_avg']\n                                .fillna(0)\n                                .astype(np.float16))\n\ndf = lag_feature(df, [1, 2, 3], 'new_item_cat_avg')\ndf.drop(['new_item_cat_avg'], axis=1, inplace=True)","c6c6222e":"def lag_feature_adv(df, lags, col):\n    tmp = df[['date_block_num','shop_id','item_id',col]]\n    for i in lags:\n        shifted = tmp.copy()\n        shifted.columns = ['date_block_num','shop_id','item_id', col+'_lag_'+str(i)+'_adv']\n        shifted['date_block_num'] += i\n        shifted['item_id'] -= 1\n        df = pd.merge(df, shifted, on=['date_block_num','shop_id','item_id'], how='left')\n        df[col+'_lag_'+str(i)+'_adv'] = df[col+'_lag_'+str(i)+'_adv'].astype('float16')\n    return df\n\ndf = lag_feature_adv(df, [1, 2, 3], 'item_cnt_month')","8fe8ce96":"df.fillna(0, inplace=True)\ndf = df[(df['date_block_num'] > 2)]\ndf.head()","c6578b31":"#Save dataset\ndf.drop(['ID'], axis=1, inplace=True, errors='ignore')\ndf.to_pickle('df.pkl')","07dd50c5":"df = pd.read_pickle('df.pkl') #  version2.pkl df.pkl\ndf.info()\nX_train = df[df.date_block_num < 33].drop(['item_cnt_month'], axis=1)\nY_train = df[df.date_block_num < 33]['item_cnt_month']\nX_valid = df[df.date_block_num == 33].drop(['item_cnt_month'], axis=1)\nY_valid = df[df.date_block_num == 33]['item_cnt_month']\nX_test = df[df.date_block_num == 34].drop(['item_cnt_month'], axis=1)\n","4fd79c21":"X_test.tail()","6bf55f1b":"del df","98fdc1d9":"feature_name = X_train.columns.tolist()\n# \u8d85\u53c2\u6570\nparams = {\n    'objective': 'mse',  # \u76ee\u6807\u51fd\u6570  mse\u662f\u56de\u5f52\u7684\u4e00\u79cd\n    'metric': 'rmse',    # \u8bc4\u4f30\u51fd\u6570  \n    'num_leaves': 2 ** 7 - 1,  # \u53f6\u5b50\u8282\u70b9\u6570   \u5e94\u8be5\u662f\u5947\u6570\n    'learning_rate': 0.005,    # \u5b66\u4e60\u901f\u7387\n    'feature_fraction': 0.75,  # \u5efa\u6811\u7684\u7279\u5f81\u9009\u62e9\u6bd4\u4f8b\n    'bagging_fraction': 0.75,  #  \u5efa\u6811\u7684\u6837\u672c\u91c7\u6837\u6bd4\u4f8b\n    'bagging_freq': 5, # k \u610f\u5473\u7740\u6bcf k \u6b21\u8fed\u4ee3\u6267\u884cbagging  \u9ed8\u8ba45 \n    'seed': 1,\n    'verbose': 1  # <0 \u663e\u793a\u81f4\u547d\u7684, =0 \u663e\u793a\u9519\u8bef (\u8b66\u544a), >0 \u663e\u793a\u4fe1\u606f  \u9ed8\u8ba41\n}\n\nfeature_name_indexes = [ \n                        'country_part', \n                        'item_category_common',\n                        'item_category_code', \n                        'city_code',\n]\n\nlgb_train = lgb.Dataset(X_train[feature_name], Y_train)\nlgb_eval = lgb.Dataset(X_valid[feature_name], Y_valid, reference=lgb_train)\n\nevals_result = {}\ngbm = lgb.train(\n        params, \n        lgb_train,\n        num_boost_round=3000,\n        valid_sets=(lgb_train, lgb_eval), \n        feature_name = feature_name,\n        categorical_feature = feature_name_indexes,\n        verbose_eval=5, \n        evals_result = evals_result,\n        early_stopping_rounds = 100)   # \u5982\u679c\u4e00\u4e2a\u9a8c\u8bc1\u96c6\u7684\u5ea6\u91cf\u5728 early_stopping_round \u5faa\u73af\u4e2d\u6ca1\u6709\u63d0\u5347, \u5c06\u505c\u6b62\u8bad\u7ec3","08080348":"lgb.plot_importance(\n    gbm, \n    max_num_features=50, \n    importance_type='gain', \n    figsize=(12,8));","6f2a1f5b":"test = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')\nY_test = gbm.predict(X_test[feature_name]).clip(0, 20)\n\nsubmission = pd.DataFrame({\n    \"ID\": test.index, \n    \"item_cnt_month\": Y_test\n})\nsubmission.to_csv('gbm_submission1.csv', index=False)","ffe615fa":"\u4ece\u4e0a\u8868\u4e2d\u53ef\u4ee5\u770b\u51fa\u4e00\u5171\u670921807\u4ef6\u5546\u54c1\u3002\u4f7f\u7528sum()\u53ef\u4ee5\u770b\u5230\u6240\u6709\u5546\u54c1\u7684\u603b\u9500\u91cf\u6839\u636e\u65f6\u95f4\u7684\u53d8\u5316\u5173\u7cfb\u3002","837dad21":"\u5bf9\u4e0a\u9762\u7684\u7c7b\u578b\u505a\u4e00\u4e2a\u989d\u5916\u7684\u8865\u5145item_category_id\tcat_type_code\tcat_subtype_code\tshop_city_code\tshop_type_code    \n- item_category_id \uff1a\u8fd9\u662f\u5546\u54c1\u79cd\u7c7b\u7684 ID  \n- cat_type_code \uff1a\u540d\u79f0  \u8fd9\u548c\u4e0b\u9762\u4e24\u4e2a\u662f\u5546\u54c1\u7c7b\u522b\u540d\u5b57\u505a\u4e00\u4e2a\u62c6\u5206\u5206\u4e3a\u4e24\u90e8\u5206\n- cat_subtype_code \uff1a \u5b50\u540d\u79f0  \n- shop_city_code \uff1a\u5546\u5e97\u57ce\u5e02  \n- shop_type_code \uff1a\u5546\u5e97\u7c7b\u578b  \n\u4e0a\u9762\u56db\u4e2a\u662f\u7528one-hot\u7f16\u7801\u5212\u5206\u7c7b\u522b\u7684\u7684\u7f16\u7801\uff0c\u5177\u4f53\u53ef\u4ee5\u5361\u770b\u4e0a\u4e00\u4e2a\u7ae0\u8282\n","b830bb31":"\u7edf\u8ba1\u6bcf\u4e2a\u5546\u54c1\u7c7b\u522b_\u5927\u7c7b\u5728\u6bcf\u4e2a\u6708\u7684\u9500\u91cf\uff0c\u8fd9\u91cc\u7684\u9500\u91cf\u662f\u5305\u62ec\u4e86\u8be5\u6708\u8be5\u5546\u54c1\u7c7b\u522b_\u5927\u7c7b\u7684\u6240\u6709\u9500\u91cf\uff0c\u6240\u4ee5\u9700\u8981\u6c42\u5e73\u5747\u3002\u540c\u6c42\u5386\u53f2\u4fe1\u606f\u3002","82c40f12":"2.1.3 \u6bcf\u7c7b\u5546\u54c1\u7684\u9500\u91cf","11d9c945":"\u7ecf\u8fc7\u5206\u6790\uff0c\u53d1\u73b0\u4ee5\u4e0b\u5546\u5e97\u540d\u4e3a\u540c\u4e00\u4e2a\u5546\u5e97\uff0c\u53ef\u4ee5\u5408\u5e76shop_id.\n* 11 => 10\n* 1 => 58\n* 0 => 57\n* 40 => 39  \n\u6bd4\u5982  \n![image.png](attachment:image.png)\n\u67e5\u770b\u6d4b\u8bd5\u96c6\uff0c\u53d1\u73b0 shop id [0,1,11,40] \u90fd\u4e0d\u5b58\u5728\u3002\n","f3724f97":"3.2.7 \u6708\u9500\u91cf\uff08\u5546\u54c1\u7c7b\u522b-\u5546\u5e97\uff09\u5747\u503c\u548c\u5386\u53f2\u7279\u5f81","e2b46182":"&#8195;&#8195;\u56e0\u4e3a\u540e\u7eed\u4f1a\u505a\u5927\u91cf\u7684\u7279\u5f81\u63d0\u53d6\uff0c\u5bf9\u5b58\u50a8\u7a7a\u95f4\u7684\u6d88\u8017\u8f83\u5927\uff0c\u800c\u4e14\u8f83\u5927\u7684\u7279\u5f81\u96c6\u5bf9\u4e8e\u6a21\u578b\u8bad\u7ec3\u6765\u8bf4\u4e5f\u662f\u4e2a\u8d1f\u62c5\u3002\u5728\u8bad\u7ec3\u96c6\u4e2d\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f88\u591a\u6570\u636e\u7684\u52a8\u6001\u8303\u56f4\u5f88\u5c0f\uff0c\u6bd4\u5982date_block_num,shop_id,item_id,\u7528int16\u5b58\u50a8\u5c31\u8db3\u591f\u4e86\u3002\u800cItem_price, item_cnt_day \u7528float32 \u5b58\u50a8\u4e5f\u662f\u8db3\u591f\u7684\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u4e0d\u635f\u5931\u4fe1\u606f\u7684\u524d\u63d0\u4e0b\uff0c\u51cf\u5c11\u4e00\u822c\u7684\u5b58\u50a8\u7a7a\u95f4\u6d88\u8017\u3002\u7ed3\u679c\u6765\u770b\u4ece134.4+ MB,\u51cf\u5c11\u5230\u4e86 61.6+ MB\u3002  \n&#8195;&#8195;\u4fee\u6539\u524d\uff1a  \n![image.png](attachment:image.png)","c015363e":"- \u8bad\u7ec3\u96c6\u4e2d\u7684\u6570\u636e\u662f \u5546\u54c1-\u5546\u5e97-\u6bcf\u5929\u7684\u9500\u552e\u3002\u800c\u8981\u6c42\u9884\u6d4b\u7684\u662f\u5546\u54c1-\u5546\u5e97-\u6bcf\u6708\u7684\u9500\u552e\uff0c\u56e0\u6b64\u9700\u8981\u5408\u7406\u4f7f\u7528groupby()\u548cagg()\u51fd\u6570\u3002\n- \u8bad\u7ec3\u96c6\u6ca1\u6709\u51fa\u73b0\u8fc7\u7684 \u5546\u54c1-\u5546\u5e97\u7ec4\u5408\uff0c\u4e00\u5f8b\u586b\u96f6\uff0c\u6700\u7ec8\u7684\u7ed3\u679c\u9700\u8981\u9650\u5e45\u5728 [0,20]\u533a\u95f4\u3002","701096b6":"\u5bf9\u5546\u54c1\u7684\u4ef7\u683c\u4e5f\u505a\u6ed1\u7a97\u64cd\u4f5c\uff1a","53b0d509":"\u8fd9\u4e2a\u5730\u65b9\u6211\u89c9\u5f97\u8fd8\u9700\u8981\u518d\u8003\u8651\u4e00\u4e0b\n\u5bf9 sales \u8868\u8fdb\u884c\u4e00\u4e9b\u6570\u503c\u5904\u7406","8ad54977":"\u9996\u5148\u5c06\u8bad\u7ec3\u96c6\u4e2d\u7684\u6570\u636e\u7edf\u8ba1\u597d\u6708\u9500\u91cf","8865fe72":"2.1.3 \u9500\u91cf\u548c\u4ef7\u683c\u7684\u79bb\u7fa4\u503c","a9b4c0e2":"\u9996\u5148\u5c1d\u8bd5\u590d\u73b0\u57fa\u7ebf\u6a21\u578b\u3002\u672c\u6b21\u6bd4\u8d5b\u4e2d\uff0c\u57fa\u7ebf\u6a21\u578b\u5c31\u662f\u7528\u7b2c34\u4e2a\u6708\u7684\u9500\u552e\u5f53\u4f5c\u7b2c35\u4e2a\u6708\u7684\u9500\u552e  0-33 \n\u5373\u5c062015\u5e7410\u6708\u7684\u7ed3\u679c\u5f53\u4f5c2015\u5e7411\u6708\u7684\u9884\u6d4b\u3002\u8bc4\u4f30\u7ed3\u679c\u5e94\u8be5\u662f1.16777.","da1913b7":"2.2 \u6d4b\u8bd5\u96c6\u5206\u6790","bd6a6e99":"3.2.10 \u6708\u9500\u91cf\uff08\u5546\u5e97_\u57ce\u5e02\uff09\u5747\u503c\u548c\u5386\u53f2\u7279\u5f81","03d2750f":"\u4ecesales_train\u4e2d\u627e\u5230\u9500\u91cf\u548c\u4ef7\u683c\u7684\u79bb\u7fa4\u503c\uff0c\u7136\u540e\u5220\u6389\u3002","4959c886":"\u5546\u54c1\u7c7b\u522b\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e0d\u597d\u786e\u5b9a\uff0c\u4f7f\u7528one hot\u7f16\u7801\u66f4\u52a0\u5408\u9002\u3002","bf40321a":"\u7edf\u8ba1\u6bcf\u4e2a\u6708\u7684\u9500\u91cf\uff0c\u8fd9\u91cc\u7684\u9500\u91cf\u662f\u5305\u62ec\u4e86\u8be5\u6708\u7684\u6240\u6709\u5546\u54c1-\u5546\u5e97\u7ec4\u5408\uff0c\u6240\u4ee5\u9700\u8981\u6c42\u5e73\u5747\u3002\u540c\u6c42\u5386\u53f2\u4fe1\u606f\u3002","25463ff6":"\u9884\u6d4b\u672a\u6765\u9500\u552e\u8be5\u9879\u76ee\u6765\u6e90\u4e8ekaggle\u4e2d\u7684\u4e00\u573a\u6bd4\u8d5b\u7684\u8d5b\u9898\uff0c\u6570\u636e\u662f\u7531\u65e5\u5e38\u9500\u552e\u6570\u636e\u7ec4\u6210\u7684\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u96c6\uff0c\u8be5\u6570\u636e\u96c6\u7531\u4fc4\u7f57\u65af\u6700\u5927\u7684\u8f6f\u4ef6\u516c\u53f8\u4e4b\u4e00 - 1C\u516c\u53f8\u63d0\u4f9b\u3002\u63d0\u4f9b\u4e86\u5305\u62ec\u5546\u5e97\uff0c\u5546\u54c1\uff0c\u4ef7\u683c\uff0c\u65e5\u9500\u91cf\u7b49\u8fde\u7eed34\u4e2a\u6708\u5185\u7684\u6570\u636e\uff0c\u8981\u6c42\u9884\u6d4b\u7b2c35\u4e2a\u6708\u7684\u5404\u5546\u5e97\u5404\u5546\u54c1\u7684\u9500\u91cf\u3002\u8bc4\u4ef7\u6307\u6807\u4e3aRMSE\uff0c\u6211\u7684\u6210\u7ee9\u662f0.86964\uff0c\u76ee\u524d\u6392\u540d736\/12764\u3002","0f75917f":"3.2.9 \u6708\u9500\u91cf\uff08\u5546\u54c1-\u5546\u54c1\u7c7b\u522b_\u5927\u7c7b\uff09\u5747\u503c\u548c\u5386\u53f2\u7279\u5f81","1d906696":"3.2.4 \u6708\u9500\u91cf\uff08\u6bcf\u4ef6\u5546\u54c1\uff09\u5747\u503c\u548c\u5386\u53f2\u7279\u5f81","eaaf597c":"\u5c06\u4ea7\u751f\u7684\u4fe1\u606f\u505a\u4e86\u878d\u5408\u3002\u9700\u8981\u901a\u8fc7\u5ef6\u8fdf\u64cd\u4f5c\u6765\u4ea7\u751f\u4e00\u4e9b\u5386\u53f2\u4fe1\u606f\u3002\u6bd4\u5982\u53ef\u4ee5\u5c06\u7b2c0-33\u4e2a\u6708\u7684\u9500\u91cf\u4f5c\u4e3a\u7b2c1-34\u4e2a\u6708\u7684\u5386\u53f2\u7279\u5f81\uff08\u5ef6\u8fdf\u4e00\u4e2a\u6708\uff09\u3002\u6309\u7167\u4ee5\u4e0b\u8bf4\u660e\uff0c\u4e00\u5171\u4ea7\u751f\u4e8615\u79cd\u7279\u5f81\u3002\n  - \u6bcf\u4e2a\u5546\u54c1-\u5546\u5e97\u7ec4\u5408\u6bcf\u4e2a\u6708\u9500\u91cf\u7684\u5386\u53f2\u4fe1\u606f\uff0c\u5206\u522b\u5ef6\u8fdf[1,2,3,6,12]\u4e2a\u6708\u3002\u8fd9\u5e94\u8be5\u662f\u6700\u7b26\u5408\u76f4\u89c9\u7684\u4e00\u79cd\u64cd\u4f5c\u3002\n  - \u6240\u6709\u5546\u54c1-\u5546\u5e97\u7ec4\u5408\u6bcf\u4e2a\u6708\u9500\u91cf\u5747\u503c\u7684\u5386\u53f2\u4fe1\u606f\uff0c\u5206\u522b\u5ef6\u8fdf[1,2,3,6,12]\u4e2a\u6708\u3002\n  - \u6bcf\u4ef6\u5546\u54c1\u6bcf\u4e2a\u6708\u9500\u91cf\u5747\u503c\u7684\u5386\u53f2\u4fe1\u606f\uff0c\u5206\u522b\u5ef6\u8fdf[1,2,3,6,12]\u4e2a\u6708\u3002\n  - \u6bcf\u4e2a\u5546\u5e97\u6bcf\u4e2a\u6708\u9500\u91cf\u5747\u503c\u7684\u5386\u53f2\u4fe1\u606f\uff0c\u5206\u522b\u5ef6\u8fdf[1,2,3,6,12]\u4e2a\u6708\u3002\n  - \u6bcf\u4e2a\u5546\u54c1\u7c7b\u522b\u6bcf\u4e2a\u6708\u9500\u91cf\u5747\u503c\u7684\u5386\u53f2\u4fe1\u606f\uff0c\u5206\u522b\u5ef6\u8fdf[1,2,3,6,12]\u4e2a\u6708\u3002\n  - \u6bcf\u4e2a\u5546\u54c1\u7c7b\u522b-\u5546\u5e97\u6bcf\u4e2a\u6708\u9500\u91cf\u5747\u503c\u7684\u5386\u53f2\u4fe1\u606f\uff0c\u5206\u522b\u5ef6\u8fdf[1,2,3,6,12]\u4e2a\u6708  \n  \n\u4ee5\u4e0a\u516d\u79cd\u5ef6\u8fdf\u90fd\u6bd4\u8f83\u76f4\u89c2\uff0c\u76f4\u63a5\u9488\u5bf9\u5546\u54c1\uff0c\u5546\u5e97\uff0c\u5546\u54c1\u7c7b\u522b\u3002\u4f46\u662f\u9500\u91cf\u7684\u53d8\u5316\u8d8b\u52bf\u8fd8\u53ef\u80fd\u4e0e\u5546\u54c1\u7c7b\u522b_\u5927\u7c7b\uff0c\u5546\u5e97_\u57ce\u5e02\uff0c\u5546\u54c1\u4ef7\u683c\uff0c\u6bcf\u4e2a\u6708\u7684\u5929\u6570\u6709\u5173\uff0c\u8fd8\u9700\u8981\u505a\u4ee5\u4e0b\u7edf\u8ba1\u548c\u5ef6\u8fdf\u3002\u53ef\u4ee5\u6839\u636e\u6a21\u578b\u8f93\u51fa\u7684feature importance\u6765\u9009\u62e9\u548c\u8c03\u6574\u8fd9\u4e9b\u7279\u5f81\u3002\n\n  - \u6bcf\u4e2a\u5546\u54c1\u7c7b\u522b_\u5927\u7c7b\u6bcf\u4e2a\u6708\u9500\u91cf\u5747\u503c\u7684\u5386\u53f2\u4fe1\u606f\uff0c\u5206\u522b\u5ef6\u8fdf[1,2,3,6,12]\u4e2a\u6708\u3002\n  - \u6bcf\u4e2a\u5546\u5e97_\u57ce\u5e02\u6bcf\u4e2a\u6708\u9500\u91cf\u5747\u503c\u7684\u5386\u53f2\u4fe1\u606f\uff0c\u5206\u522b\u5ef6\u8fdf[1,2,3,6,12]\u4e2a\u6708\u3002\n  - \u6bcf\u4e2a\u5546\u54c1-\u5546\u5e97_\u57ce\u5e02\u7ec4\u5408\u6bcf\u4e2a\u6708\u9500\u91cf\u5747\u503c\u7684\u5386\u53f2\u4fe1\u606f\uff0c\u5206\u522b\u5ef6\u8fdf[1,2,3,6,12]\u4e2a\u6708\u3002  \n  \n\u9664\u4e86\u4ee5\u4e0a\u7ec4\u5408\u4e4b\u5916\uff0c\u8fd8\u6709\u4ee5\u4e0b\u7279\u5f81\u53ef\u80fd\u6709\u7528\n\n  - \u6bcf\u4e2a\u5546\u54c1\u7b2c\u4e00\u6b21\u7684\u9500\u91cf\n  - \u6bcf\u4e2a\u5546\u54c1\u6700\u540e\u4e00\u6b21\u7684\u9500\u91cf\n  - \u6bcf\u4e2a\u5546\u54c1_\u5546\u5e97\u7ec4\u5408\u7b2c\u4e00\u6b21\u7684\u9500\u91cf\n  - \u6bcf\u4e2a\u5546\u54c1_\u5546\u5e97\u7ec4\u5408\u6700\u540e\u4e00\u6b21\u7684\u9500\u91cf\n  - \u6bcf\u4e2a\u5546\u54c1\u7684\u4ef7\u683c\u53d8\u5316\n  - \u6bcf\u4e2a\u6708\u7684\u5929\u6570","b364155c":"\u7279\u5f81\u5de5\u7a0b","f9aa4748":"\u7279\u5f81\u91cd\u8981\u5ea6\u9884\u6d4b","5c33dcc7":"\u6211\u4eec\u4f7f\u7528pivot_table\u6765\u67e5\u770b\u6bcf\u4ef6\u5546\u54c1\u6bcf\u4e2a\u6708\u7684\u9500\u91cf\u3002pivot_table()\u548cgroupby()\u7684\u7528\u9014\u7c7b\u4f3c\uff0c\u4f46\u66f4\u52a0\u7075\u6d3b\uff0c\u53ef\u4ee5\u5bf9columns\u505a\u66f4\u591a\u5904\u7406\u3002","e2271245":"Months since the last sale for each shop\/item pair and for item only. I use programing approach.\n\nCreate HashTable with key equals to {shop_id,item_id} and value equals to date_block_num. Iterate data from the top. Foreach row if {row.shop_id,row.item_id} is not present in the table, then add it to the table and set its value to row.date_block_num. if HashTable contains key, then calculate the difference beteween cached value and row.date_block_num.","b9c8568f":"\u5220\u9664\u63890 1 2 \u6708\u7684\u6570\u636e","8635dfa4":"3.1 \u7edf\u8ba1\u6708\u9500\u91cf","a053a9cd":"\u7edf\u8ba1\u6bcf\u4e2a\u5546\u54c1-\u5546\u5e97_\u57ce\u5e02\u5728\u6bcf\u4e2a\u6708\u7684\u9500\u91cf\uff0c\u8fd9\u91cc\u7684\u9500\u91cf\u662f\u5305\u62ec\u4e86\u8be5\u6708\u8be5\u5546\u54c1-\u5546\u5e97_\u57ce\u5e02\u7684\u6240\u6709\u9500\u91cf\uff0c\u6240\u4ee5\u9700\u8981\u6c42\u5e73\u5747\u3002\u540c\u6c42\u5386\u53f2\u4fe1\u606f\u3002","474d4787":"3.2.14 \u5f00\u59cb\u548c\u7ed3\u675f\u7684\u9500\u91cf","18ceb7a8":"\u9996\u6b21\u51fa\u73b0\u7684\u4ea7\u54c1\u5982\u4f55\u7edf\u8ba1\u5386\u53f2\u4fe1\u606f?  \n\u5bf9\u4e8e\u5f53\u524d\u6708\u65b0\u4e0a\u5e02\u7684\u4ea7\u54c1\uff0c\u53bb\u7edf\u8ba1\u5f53\u524d\u6708\u548c\u8be5\u4ea7\u54c1\u7c7b\u522b\u4e00\u81f4\u7684\u5176\u4ed6\u4ea7\u54c1\u7684\u5e73\u5747\u9500\u552e\u989d\uff0c\u5e76\u8fdb\u884c\u4e86\u5e73\u6ed1\u5904\u7406\uff01","f3ce6d5b":"3.2 \u76f8\u5173\u4fe1\u606f\u878d\u5408","0e91916f":"1.1 \u6570\u636e\u57fa\u672c\u5904\u7406","c79ac2d0":"1.3 \u8282\u7701\u5b58\u50a8\u7a7a\u95f4 ","1b48a7eb":"3.2.2 \u6708\u9500\u91cf\uff08\u6bcf\u4e2a\u5546\u54c1-\u5546\u5e97\uff09\u7684\u5386\u53f2\u4fe1\u606f","1dfac41e":"\u8fd9\u91cc\u8981\u786e\u4fdd\u77e9\u9635\u91cc\u9762\u6ca1\u6709 NA\u548cNULL","003a001e":"\u7edf\u8ba1\u6bcf\u4e2a\u5546\u5e97\u5728\u6bcf\u4e2a\u6708\u7684\u9500\u91cf\uff0c\u8fd9\u91cc\u7684\u9500\u91cf\u662f\u5305\u62ec\u4e86\u8be5\u6708\u8be5\u5546\u5e97\u7684\u6240\u6709\u5546\u54c1\u7684\u9500\u91cf\uff0c\u6240\u4ee5\u9700\u8981\u6c42\u5e73\u5747\u3002\u540c\u6c42\u5386\u53f2\u4fe1\u606f\u3002","b20b896a":"## \u4e00.  \u6570\u636e\u5206\u6790","4fddfdeb":"\u5206\u6790\u6709\u591a\u5c11\u5546\u54c1\u5728\u6700\u8fd1\u7684\u8fde\u7eed\u516d\u4e2a\u6708\u5185\uff0c\u6ca1\u6709\u9500\u91cf\u3002\u8fd9\u4e9b\u5546\u54c1\u6709\u591a\u5c11\u51fa\u73b0\u5728\u6d4b\u8bd5\u96c6\u4e2d\u3002\n- \u8bad\u7ec3\u96c6\u4e00\u517121807\u79cd\u5546\u54c1\uff0c\u5176\u4e2d\u670912391\u79cd\u5728\u6700\u8fd1\u7684\u516d\u4e2a\u6708\u6ca1\u6709\u9500\u91cf\u3002\n- \u6d4b\u8bd5\u96c6\u4e00\u51715100\u79cd\u5546\u54c1\uff0c\u5176\u4e2d\u6709164\u79cd\u5728\u8bad\u7ec3\u4e2d\u6700\u8fd1\u516d\u4e2a\u6708\u6ca1\u6709\u9500\u91cf\uff0c\u5171\u51fa\u73b0\u4e86164 * 42 = 6888\u6b21\u3002\n- Tips\uff1a\u5728\u6700\u7ec8\u7684\u9884\u6d4b\u7ed3\u679c\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u5546\u54c1\u7684\u9500\u91cf\u5927\u80c6\u5730\u8bbe\u7f6e\u4e3a\u96f6\u3002","c3899234":"- \u8bad\u7ec3\u96c6\uff0c\u670921807\u79cd\u5546\u54c1\uff0c60\u4e2a\u5546\u5e97\u3002\u4e00\u51712935849 \u79cd\u5546\u54c1-\u5546\u5e97\u7ec4\u5408\u3002\n- \u6d4b\u8bd5\u96c6\uff0c\u67095100 \u79cd\u5546\u54c1\uff0c42\u4e2a\u5546\u5e97\u3002\u521a\u597d\u5c31\u662f5100 * 42 = 214200\u79cd \u5546\u54c1-\u5546\u5e97\u7ec4\u5408","4f21f080":"2.1.1 \u6bcf\u4ef6\u5546\u54c1\u7684\u9500\u91cf","1866b398":"3.2.3 \u6708\u9500\u91cf\uff08\u6240\u6709\u5546\u54c1-\u5546\u5e97\uff09\u5747\u503c\u7684\u5386\u53f2\u4fe1\u606f","b73da148":"\u5546\u54c1\u7684\u7279\u5f81\n\n\u524d\u9762\u63d0\u5230\u4e86\u5546\u54c1\u7684\u4fe1\u606f\u4e3b\u8981\u5728item\u548citem_categories\u4e24\u4e2a\u6587\u4ef6\u4e2d\u3002\u90a3\u4e48baseline\u4e2d\u4e3b\u8981\u505a\u7684\u5c31\u662f\u63d0\u53d6\u7c7b\u522b\u7279\u5f81\uff0c\u5e76\u8fdb\u884c\u7c7b\u522b\u7f16\u7801\u3002","aa04b5b1":"\u4ece\u4e0a\u8ff0\u56fe\u7247\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u8d5b\u9898\u63d0\u4f9b\u7684\u6570\u636e\u6587\u4ef6\u51716\u4e2a\uff0c\u5176\u4e2d\u5206\u4e3a\u8bad\u7ec3\u6570\u636e\u3001\u6d4b\u8bd5\u6570\u636e\u548c\u63d0\u4ea4\u6837\u4f8b\u4e09\u90e8\u5206\u3002\n\n## \u8bad\u7ec3\u90e8\u5206\uff1a\n\nsales_train.csv \uff1a\u8bb0\u5f55\u4e86\u4ece2013\u5e74\u52302015\u5e74\u7684\u5386\u53f2\u9500\u552e\u6570\u636e\nitems.csv \uff1a\u8bb0\u5f55\u4e86\u4ea7\u54c1\u7684\u8865\u5145\u4fe1\u606f\nitems_categories.csv \uff1a\u8bb0\u5f55\u4e86\u4ea7\u54c1\u7c7b\u522b\u7684\u8865\u5145\u4fe1\u606f\nshops.csv \uff1a\u5bf9\u4e8e\u5546\u5e97\u7684\u8865\u5145\u4fe1\u606f\n## \u6d4b\u8bd5\u90e8\u5206\uff1a\n\ntest.csv\uff1a\u6d4b\u8bd5\u6570\u636e\n## \u63d0\u4ea4\u6837\u4f8b\uff1a\n\nsample.csv \uff1a\u63d0\u4ea4\u6837\u4f8b\n\n## \u5b57\u6bb5\u603b\u89c8\uff1a\n\n\u5728\u4e0a\u9762\u5bf9\u6570\u636e\u6765\u6e90\u548c\u6570\u636e\u79cd\u7c7b\u6709\u4e86\u603b\u4f53\u7684\u4e86\u89e3\u4e4b\u540e\uff0c\u6211\u4eec\u518d\u6765\u770b\u4e00\u4e0b\u6570\u636e\u4e2d\u7684\u5b57\u6bb5\u542b\u4e49\u3002\n\n\u6211\u4eec\u4ee5csv\u6587\u4ef6\u4e3a\u5355\u4f4d\uff0c\u4f9d\u6b21\u8bb2\u89e3\u3002\n\n### sales_train.csv\uff08\u552e\u5356\u6570\u636e\uff09\n\ndate\uff1a\u552e\u5356\u65f6\u95f4\uff0c\u683c\u5f0f\u4e3add\/mm\/yyyy  \ndate-block-num\uff1a\u8be5\u5b57\u6bb5\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u6574\u578b\u6570\u503c\uff0c\u4e5f\u5c31\u662f\u5c06\u6708\u4efd\u5bf9\u5e94\u7684\u8fdb\u884c\u4e86\u7f16\u7801\u30020\uff1a2013\u5e741\u6708\u30011\uff1a2013\u5e742\u6708\u3001......\u300133:2015\u5e7410\u6708  \nshop_id\uff1a\u4ee3\u8868\u6bcf\u4e00\u4e2a\u5546\u5e97\u7684\u6807\u8bc6ID  \nitem_id\uff1a\u6bcf\u4e00\u4e2a\u4ea7\u54c1\u7684\u6807\u8bc6ID  \nitem_price\uff1a\u4ea7\u54c1\u7684\u4ef7\u683c  \nitem-cnt-day\uff1a\u4ea7\u54c1\u5f53\u5929\u5356\u51fa\u7684\u6570\u91cf\uff0c\u6211\u4eec\u6700\u7ec8\u5c06\u8981\u9884\u6d4b\u7684\u662f\u8be5\u4ea7\u54c1\u8fd9\u4e00\u4e2a\u6708\u7684\u9500\u552e\u91cf  \n### items.csv\uff08\u4ea7\u54c1\u6570\u636e\uff09\n\nitem_id - \u4ea7\u54c1\u7684\u6807\u8bc6ID\nitem_category_id - \u4ea7\u54c1\u7684\u7c7b\u522b\u6807\u8bc6ID\nitem_name - \u4ea7\u54c1\u7684\u540d\u5b57\n###  items_categories.csv\uff08\u4ea7\u54c1\u7c7b\u522b\u6570\u636e\uff09\n\nitem-category-name\uff1a\u4ea7\u54c1\u7c7b\u522b\u540d\u5b57\nitem-category-id\uff1a\u4ea7\u54c1\u7684\u7c7b\u522bID\uff0c\u6b64\u5b57\u6bb5\u53ef\u4ee5\u548citems\u4e2d\u7684\u540c\u540d\u5b57\u6bb5\u505a\u8fde\u63a5\n###  shops.csv\uff08\u5546\u5e97\u6570\u636e\uff09\n\nshop_name\uff1a\u5546\u5e97\u540d\u5b57\nshop_id\uff1a\u5546\u5e97\u7684\u6807\u8bc6ID\uff0c\u6b64\u5b57\u6bb5\u4e5f\u53ef\u4ee5\u548csales-train.csv\u4e2d\u7684\u540c\u540d\u5b57\u6bb5\u505a\u8fde\u63a5\n###  test.csv\uff08\u6d4b\u8bd5\u6570\u636e\uff09\n\nID \uff1a\u8be5\u5b57\u6bb5\u6bd4\u8f83\u7279\u6b8a\uff0c\u4ed6\u8868\u793a\u7684\u662f\uff08shop_id\uff0citem-id\uff09\u7ec4\u6210\u7684\u5143\u7ec4\uff08tuple\uff09\u7684\u6807\u8bc6ID\nshop_id\uff1a\u5546\u5e97\u7684\u6807\u8bc6ID\nitem_id\uff1a\u4ea7\u54c1\u7684\u6807\u8bc6ID\n###  sample.csv\uff08\u63d0\u4ea4\u6837\u4f8b\uff09\n\nID\uff1a\u4e0e\u6d4b\u8bd5\u4e2d\u7684\u5b57\u6bb5ID\u610f\u4e49\u4e00\u81f4\nitem-cnt-month\uff1a\u9700\u8981\u9884\u6d4b\u7684\u8be5\u5546\u54c1\u8fd9\u4e2a\u6708\u7684\u9500\u552e\u989d\n","7ccafd8a":"\u6d4b\u8bd5\u96c6\u67095100 \u79cd\u5546\u54c1\uff0c42\u4e2a\u5546\u5e97\u3002\u521a\u597d\u5c31\u662f5100 * 42 = 214200\u79cd \u5546\u54c1-\u5546\u5e97\u7ec4\u5408\u3002\u53ef\u4ee5\u5206\u4e3a\u4e09\u5927\u7c7b\n\n- 363\u79cd\u5546\u54c1\u5728\u8bad\u7ec3\u96c6\u6ca1\u6709\u51fa\u73b0\uff0c363*42=15,246\u79cd\u5546\u54c1-\u5546\u5e97\u6ca1\u6709\u6570\u636e\uff0c\u7ea6\u53607%\u3002\n- 87550\u79cd\u5546\u54c1-\u5546\u5e97\u7ec4\u5408\u662f\u53ea\u51fa\u73b0\u8fc7\u5546\u54c1\uff0c\u6ca1\u51fa\u73b0\u8fc7\u7ec4\u5408\u3002\u7ea6\u536042%\u3002\n- 111404\u79cd\u5546\u54c1-\u5546\u5e97\u7ec4\u5408\u662f\u5728\u8bad\u7ec3\u96c6\u4e2d\u5b8c\u6574\u51fa\u73b0\u8fc7\u7684\u3002\u7ea6\u536051%\u3002\n","69925a2d":"3.2.11 \u6708\u9500\u91cf\uff08\u5546\u54c1-\u5546\u5e97_\u57ce\u5e02\uff09\u5747\u503c\u548c\u5386\u53f2\u7279\u5f81","9a6703ca":"- \u8bad\u7ec3\u96c6\u6709\u516d\u5217\uff0c\u5206\u522b\u4ecb\u7ecd\u65e5\u671f\uff0c\u6708\u4efd\uff0c\u5546\u5e97\uff0c\u5546\u54c1\uff0c\u4ef7\u683c\u548c\u65e5\u9500\u91cf\n - date,date_block_num,shop_id,item_id,item_price,item_cnt_day\n- \u6d4b\u8bd5\u96c6\u6709\u4e09\u5217\uff0c\u5206\u522b\u662fID\uff0c\u5546\u5e97\uff0c\u548c\u5546\u54c1\u3002\n - ID,shop_id,item_id","87746c6b":"\u4fdd\u5b58\u7ed3\u679c","6a5bf7b1":"\u4f7f\u7528\u524d32\u4e2a\u6708\u4f5c\u4e3a\u8bad\u7ec3\u96c6\uff0c\u7b2c33\u4e2a\u6708\u4f5c\u4e3a\u9a8c\u8bc1\u96c6\uff0c\u7136\u540e\u6211\u4eec\u8981\u9884\u6d4b\u7b2c34\u4e2a\u6708\u7684\u6570\u636e\u3002","80e5557e":"1.2 \u57fa\u7ebf\u6a21\u578b\u9884\u6d4b","fa5921e2":"\u7edf\u8ba1\u6bcf\u4ef6\u5546\u54c1\u5728\u6bcf\u4e2a\u6708\u7684\u9500\u91cf\uff0c\u8fd9\u91cc\u7684\u9500\u91cf\u662f\u5305\u62ec\u4e86\u8be5\u6708\u8be5\u5546\u54c1\u5728\u6240\u6709\u5546\u5e97\u7684\u9500\u91cf\uff0c\u6240\u4ee5\u9700\u8981\u6c42\u5e73\u5747\u3002\u540c\u6c42\u5386\u53f2\u4fe1\u606f\u3002","f15d3345":"3.2.12 \u8d8b\u52bf\u7279\u5f81\uff0c\u534a\u5e74\u6765\u4ef7\u683c\u7684\u53d8\u5316","00e7cceb":"\u67e5\u770b\u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f\u4ee5\u53ca\u662f\u5426\u6709\u6570\u636e\u7f3a\u5931NAN  \n\u6570\u636e\u5f62\u72b6\u4e3a(2935849, 6)\uff0csales_train\u4e2d\u6ca1\u6709missing values\uff0c\u6ca1\u6709nan\uff0c","97ace4d9":"\u6570\u636e\u589e\u5f3a","61098772":"## \u5efa\u6a21\u8bad\u7ec3","f84f4804":"2.1.2 \u6bcf\u4e2a\u5546\u54c1\u7684\u9500\u91cf","d837d2ae":"\u65f6\u95f4\u7279\u5f81\n\n\u6b64\u5904\u7684\u65f6\u95f4\u7279\u5f81\u5c31\u662f\u5c31\u662f\u63d0\u53d6\u5468\u6570\u3001\u5305\u62ec\u8fd9\u4e2a\u6708\u7684\u7b2c\u51e0\u5929","4c4ed119":"\u7edf\u8ba1\u6bcf\u4e2a\u5546\u54c1\u7c7b\u522b-\u5546\u5e97\u5728\u6bcf\u4e2a\u6708\u7684\u9500\u91cf\uff0c\u8fd9\u91cc\u7684\u9500\u91cf\u662f\u5305\u62ec\u4e86\u8be5\u6708\u8be5\u5546\u54c1\u5546\u5e97_\u57ce\u5e02\u7684\u6240\u6709\u9500\u91cf\uff0c\u6240\u4ee5\u9700\u8981\u6c42\u5e73\u5747\u3002\u540c\u6c42\u5386\u53f2\u4fe1\u606f\u3002","d72dce49":"3.2.1 lag operation\u4ea7\u751f\u5ef6\u8fdf\u4fe1\u606f\uff0c\u53ef\u4ee5\u9009\u62e9\u5ef6\u8fdf\u7684\u6708\u6570\u3002","e1ed91bf":"\u5728\u8bad\u7ec3\u96c6\u79cd\u67096\u884c\uff0c\u662f\u91cd\u590d\u51fa\u73b0\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5220\u9664\u6216\u8005\u4fdd\u7559\uff0c\u8fd9\u79cd\u6570\u636e\u5bf9\u7ed3\u679c\u5f71\u54cd\u4e0d\u5927\u3002","e9eb143a":"2.1 \u8bad\u7ec3\u96c6\u5206\u6790 sales_train","17d17c45":"\u56e0\u4e3a\u4f7f\u7528\u4e8612\u4e2a\u6708\u4f5c\u4e3a\u5ef6\u8fdf\u7279\u5f81\uff0c\u5fc5\u7136\u7531\u5927\u91cf\u7684\u6570\u636e\u662fNA\u503c\uff0c\u5c06\u6700\u5f00\u59cb11\u4e2a\u6708\u7684\u539f\u59cb\u7279\u5f81\u5220\u9664\uff0c\u5e76\u4e14\u5bf9\u4e8eNA\u503c\u6211\u4eec\u9700\u8981\u628a\u5b83\u586b\u5145\u4e3a0\u3002","3a28b41e":"3.2.5 \u6708\u9500\u91cf\uff08\u6bcf\u4e2a\u5546\u5e97\uff09\u5747\u503c\u548c\u5386\u53f2\u7279\u5f81","85abb75f":"\u7edf\u8ba1\u6bcf\u4e2a\u5546\u5e97_\u57ce\u5e02\u5728\u6bcf\u4e2a\u6708\u7684\u9500\u91cf\uff0c\u8fd9\u91cc\u7684\u9500\u91cf\u662f\u5305\u62ec\u4e86\u8be5\u6708\u8be5\u5546\u5e97_\u57ce\u5e02\u7684\u6240\u6709\u9500\u91cf\uff0c\u6240\u4ee5\u9700\u8981\u6c42\u5e73\u5747\u3002\u540c\u6c42\u5386\u53f2\u4fe1\u606f\u3002","3e6a047f":"\u57ce\u5e02 | \u7c7b\u578b | \u540d\u79f0","9569770c":"\u7edf\u8ba1\u8fc7\u53bb\u4e09\u4e2a\u6708\u76f8\u4f3c\u7684\u4ea7\u54c1\u7684\u9500\u552e\u989d","70604d33":"\u5904\u7406\u597d\u7684\u7279\u5f81\u6570\u636e\u4fdd\u5b58\u6210pkl","3bc38f4f":"3.2 \u5386\u53f2\u4fe1\u606f","46b5ed8d":"2.4 \u5546\u54c1\u5206\u7c7b\u7279\u5f81","0800946c":"\u5c06\u4e0a\u9762\u5f97\u5230\u7684\u5546\u5e97\uff0c\u5546\u54c1\u7c7b\u522b\u7b49\u4fe1\u606f\u4e0e\u77e9\u9635\u878d\u5408\u8d77\u6765\u3002","8e55f300":"\u4e3a\u4e86\u80fd\u4f7f\u7528\u5546\u54c1\u7684\u7c7b\u522b\uff0c\u9700\u8981\u5148\u8bfb\u53d6item_categories\u7684\u4fe1\u606f\uff0c\u7136\u540e\u6dfb\u52a0\u5230sales_train\u91cc\u9762","036638c6":"\u5904\u7406\u6d4b\u8bd5\u96c6","98933691":"3.2.8 \u6708\u9500\u91cf\uff08\u5546\u54c1\u7c7b\u522b_\u5927\u7c7b\uff09\u5747\u503c\u548c\u5386\u53f2\u7279\u5f81","9c410901":"\u9488\u5bf9\u6bcf\u4e2a\u6708\u7684\u5546\u54c1-\u5546\u5e97\u7ec4\u5408\u7684\u9500\u91cf\u6c42\u4e00\u4e2a\u5386\u53f2\u4fe1\u606f\uff0c\u5206\u522b\u662f1\u4e2a\u6708\u30012\u4e2a\u6708\u30013\u4e2a\u6708\u30016\u4e2a\u6708\u300112\u4e2a\u6708\u524d\u7684\u9500\u91cf\u3002\u8fd9\u4e2a\u503c\u548c\u6211\u4eec\u8981\u9884\u6d4b\u7684\u503c\u662f\u540c\u4e00\u4e2a\u6570\u91cf\u7ea7\uff0c\u4e0d\u9700\u8981\u6c42\u5e73\u5747\u3002\u800c\u4e14\u4f1a\u6709\u5f88\u591a\u503c\u4f1a\u662fNAN\uff0c\u56e0\u4e3a\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u5386\u53f2\u4fe1\u606f\uff0c\u5177\u4f53\u539f\u56e0\u524d\u9762\u5df2\u7ecf\u5206\u6790\u8fc7","43e54dc1":"\u6211\u4eec\u5c06\u6bcf\u4e2a\u6708\u6bcf\u4e2a\u5546\u5e97\u5bf9\u5e94\u6bcf\u4e2a\u4ea7\u54c1\u7684\u524d\u4e09\u4e2a\u6708\u7684\u9500\u552e\u6570\u636e\u6ed1\u7a97\u51fa\u6765\uff1a","433a6189":"\u5386\u53f2\u552e\u5356\u60c5\u51b5\u7279\u5f81\u4fe1\u606f  \u540e\u9762\u518d\u770b\u4e00\u4e0b\n\n\u4e3b\u8981\u5f97\u601d\u60f3\u5982\u4e0b\uff1a\n\n1. \u6807\u8bb0\u51fa\u54ea\u4e9b\u5546\u54c1\u662f\u7b2c\u4e00\u6b21\u4e0a\u5e02\uff0c\u54ea\u4e9b\u4e0d\u662f\n2. \u6807\u8bb0\u51fa\u54ea\u4e9b\u5546\u54c1\u662f\u7b2c\u4e00\u6b21\u5356\u51fa\u7684\uff0c\u90a3\u4e9b\u4e0d\u662f\n","f659e107":"\u4e00\u5171\u6709 60 \u4e2a\u5546\u5e97\uff0c\u5750\u843d\u572831\u4e2a\u57ce\u5e02,\u57ce\u5e02\u7684\u4fe1\u606f\u53ef\u4ee5\u4f5c\u4e3a\u5546\u5e97\u7684\u4e00\u4e2a\u7279\u5f81\u3002\n\u8fd9\u91cc\u5148\u5206\u6790\u4e0b\u54ea\u4e9b\u5546\u5e97\u662f\u6700\u8fd1\u624d\u5f00\u7684\uff0c\u54ea\u4e9b\u662f\u5df2\u7ecf\u5173\u95ed\u4e86\u7684\uff0c\u540c\u6837\u5206\u6790\u6700\u540e\u516d\u4e2a\u6708\u7684\u6570\u636e\u3002\n- shop_id = 36 \u662f\u65b0\u5546\u5e97\n- shop_id = [0 1 8 11 13 17 23 29 30 32 33 40 43 54] \u53ef\u4ee5\u8ba4\u4e3a\u662f\u5df2\u7ecf\u5173\u95ed\u4e86\u3002\n- Tips\uff1a\u65b0\u5546\u5e97\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528\u7b2c33\u4e2a\u6708\u6765\u9884\u6d4b34\u4e2a\u6708\u7684\u9500\u91cf\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u4efb\u4f55\u5386\u53f2\u6570\u636e\u3002\u800c\u5df2\u7ecf\u5173\u95ed\u7684\u5546\u5e97\uff0c\u9500\u91cf\u53ef\u4ee5\u76f4\u63a5\u7f6e\u96f6","4b2d44c0":"3.2.6 \u6708\u9500\u91cf\uff08\u6bcf\u4e2a\u5546\u54c1\u7c7b\u522b\uff09\u5747\u503c\u548c\u5386\u53f2\u7279\u5f81","45d43fb9":"2.3 \u5546\u54c1\u7279\u5f81","ba366320":"\u642d\u5efa\u6a21\u578b","8175bd3f":"## \u6587\u7ae0\u76ee\u5f55\n1. \u6570\u636e\u5206\u6790\n2. \u6570\u636e\u63a2\u7d22\n3. \u7279\u5f81\u878d\u5408\n4. \u5efa\u6a21\u8bad\u7ec3\n5. \u7ed3\u679c\u5c55\u793a  \n\n\u53c2\u8003\uff1ahttps:\/\/blog.csdn.net\/s09094031\/article\/details\/90347191\n\n\n \n","b3d5521d":"\u76ee\u6807\u7f16\u7801\u5904\u7406","565351a9":"2.3.2 \u5546\u5e97\u4fe1\u606f\u7f16\u7801","57450a62":"## 3\uff1a\u7279\u5f81\u878d\u5408","b0d9d3fc":"2.3.1 \u5546\u54c1\u4fe1\u606f\u6e05\u6d17","450b2e87":"## \u7248\u672c\u4e8c\n\u53c2\u8003\u94fe\u63a5\uff1ahttps:\/\/zhuanlan.zhihu.com\/p\/356427156","5e2e06f8":"\u6709\u4e00\u4e2a\u5546\u54c1\u7684\u4ef7\u683c\u662f\u8d1f\u503c\uff0c\u5c06\u5176\u586b\u5145\u4e3amedian\u3002","8570286b":"# \u6570\u636e\u5206\u6790\n\u6bd4\u8d5b\u94fe\u63a5\uff1a https:\/\/www.kaggle.com\/c\/competitive-data-science-predict-future-sales\/overview  \n\u76ee\u7684\u6bd4\u8f83\u6e05\u6670\uff0c\u5c31\u662f\u7ed9\u51fa\u524dN\u4e2a\u6708\u5546\u54c1\u7684\u9500\u552e\u4fe1\u606f\uff0c\u6211\u4eec\u901a\u8fc7\u5efa\u6a21\u8bad\u7ec3\uff0c\u62df\u5408\u9884\u6d4b\u51fa\u7b2cN+1\u4e2a\u6708\u5546\u54c1\u7684\u9500\u552e\u989d\u3002\n![image.png](attachment:image.png)","234ccdbf":"\u7edf\u8ba1\u6bcf\u4e2a\u5546\u54c1\u7c7b\u522b\u5728\u6bcf\u4e2a\u6708\u7684\u9500\u91cf\uff0c\u8fd9\u91cc\u7684\u9500\u91cf\u662f\u5305\u62ec\u4e86\u8be5\u6708\u8be5\u5546\u54c1\u7c7b\u522b\u7684\u6240\u6709\u9500\u91cf\uff0c\u6240\u4ee5\u9700\u8981\u6c42\u5e73\u5747\u3002\u540c\u6c42\u5386\u53f2\u4fe1\u606f\u3002","761ba0d0":"\u65f6\u95f4\u6ed1\u7a97\u7279\u5f81\n\n\u672cbaseline\u4e2d\u6700\u5927\u7684\u63d0\u5206\u70b9\u3001\u6216\u8005\u8bf4\u81ea\u5df1\u773c\u524d\u4e00\u4eae\u7684\u70b9\u5c31\u662f\u5386\u53f2\u4fe1\u606f\u548c\u65f6\u95f4\u6ed1\u7a97\u7279\u5f81\u5904\u7406\u3002\u90a3\u6211\u4eec\u4e00\u8d77\u770b\u770b\u539f\u4f5c\u8005\u662f\u600e\u4e48\u5904\u7406\u7684\uff01","ff459959":"## \u4e8c\uff1a\u6570\u636e\u63a2\u7d22","afb0a2e4":"## \u4f7f\u7528 XGBoost","63f99d60":"3.2.13 \u6bcf\u4e2a\u6708\u5929\u6570\u00b6","cfeec024":"\u8bfb\u53d6CSV\u8868\u683c","badcc899":"- shop_id = 0, 1 \u4ec5\u4ec5\u5b58\u5728\u4e86\u4e24\u4e2a\u6708\uff0c\u800c shop_id = 57,58 \u770b\u8d77\u6765\u5c31\u50cf\u662f\u7ee7\u4efb\u8005\u3002\n- shop_id = 11 \u4ec5\u4ec5\u5b58\u5728\u4e8e date_block = 25,\u800c shop_id = 10 \u53ea\u5728\u90a3\u4e2a\u6708\u6ca1\u6709\u6570\u636e\u3002\n- shop_id = 40 \u4ec5\u4ec5\u5b58\u5728\u4e8e date_block = [14,25] \u800c shop_id = 39 \u5728 date_block = 14 \u4e4b\u540e\u4e00\u76f4\u5b58\u5728\u3002\n- shop_id = 46,\u5546\u5e97\u540d\u4e2d\u95f4\u591a\u4e86\u4e00\u4e2a\u7a7a\u683c\uff0c\u4f1a\u5f71\u54cd\u5230\u7f16\u7801\uff0c\u8981\u53bb\u6389\u3002 \u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \u201c7\u042f\u201d\n- \u901a\u8fc7\u5546\u5e97\u547d\u540d\uff0c\u6211\u53d1\u73b0shop 12 and 55\u90fd\u662f\u7f51\u5e97\uff0c\u5e76\u4e14\u53d1\u73b0\u4ed6\u4eec\u7684\u9500\u91cf\u7684\u76f8\u5173\u5ea6\u5f88\u9ad8\uff0c\u53ea\u662f\u4e0d\u77e5\u9053\u600e\u4e48\u7528\u8fd9\u4e2a\u4fe1\u606f\u3002","87d75ac4":"\u5546\u5e97\u540d\u91cc\u5df2\u7ecf\u5305\u542b\u4e86\u5f88\u591a\u7279\u5f81\uff0c\u53ef\u4ee5\u6309\u4ee5\u4e0b\u7ed3\u6784\u5206\u89e3\u3002"}}