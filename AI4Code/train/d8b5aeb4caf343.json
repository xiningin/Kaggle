{"cell_type":{"8d7662ed":"code","73449448":"code","aecb1dc6":"code","1498ebf9":"code","d66ab155":"markdown","3b4f7460":"markdown","713c7ba5":"markdown","c044c814":"markdown"},"source":{"8d7662ed":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n#file copy library\nfrom shutil import copyfile\n\n# copy our file into the working directory \ncopyfile(src = \"..\/input\/fncspy\/fncs.py\", dst = \"..\/working\/fncspy.py\") \n\n# import all of our custom functions\nfrom fncspy import *\n\n","73449448":"# Loading training, validation and test data\ndfTrain = pd.read_csv('..\/input\/hyperparameterselection\/Data_Train.csv')\ndfVal = pd.read_csv('..\/input\/hyperparameterselection\/Data_Val.csv')\ndfTest = pd.read_csv('..\/input\/hyperparameterselection\/Data_Test.csv')\n\n############ TRAINING A MODEL\n\n# Fitting model\ndeg = 5\nX = create_X(dfTrain.x,deg)\nbeta = fit_beta(dfTrain,deg)\n\n# Computing training error\nyPredTrain = predict_y(dfTrain.x,beta)\nerr = rmse(dfTrain.y,yPredTrain)\nprint('Training Error = {:2.3}'.format(err))\n\n# Computing test error\nyPredTest = predict_y(dfTest.x,beta)\nerr = rmse(dfTest.y,yPredTest)\nprint('Test Error = {:2.3}'.format(err))\n\n# Plotting fitted model\nx = np.linspace(0,1,100)\ny = predict_y(x,beta)\nplt.plot(x,y,'b-',dfTrain.x,dfTrain.y,'rs')\nplt.legend(['Prediction','Training'])\nplt.show()","aecb1dc6":"# Computing error\nmaxDegree = 5\nerr = computeError(maxDegree,dfTrain,dfVal)\n\n# Plotting error\nplotError(err)\n\n# Selecting optimal degree\ndegOpt = err['deg'][np.argmin(err['errVal'])]\nprint('Optimal Degree = {:1}'.format(degOpt))","1498ebf9":"# Fitting model with training data only\nbeta = fit_beta(dfTrain,degOpt)\nerrTest = rmse(dfTest.y,predict_y(dfTest.x,beta))\nprint('Test Error using only training data = {:2.3}'.format(errTest))\n\n# Fitting model with training and val data\ndf = pandas.concat([dfTrain, dfVal])\nbeta = fit_beta(df,degOpt)\nerrTest = rmse(dfTest.y,predict_y(dfTest.x,beta))\nprint('Test Error using train. & val. data = {:2.3}'.format(errTest))\n\n# Plotting prediction\nx = np.linspace(0,1,100)\ny = predict_y(x,beta)\nplt.plot(x,y,'b-',df.x,df.y,'rs',dfTest.x,dfTest.y,'k.')\nplt.legend(['Prediction','Train+Val','Test'])\nplt.show()","d66ab155":"### Polynomial Fitting\n\nWe load the data and use it for fitting the model. \n\n**Change deg to train the model ","3b4f7460":"# Hyper-Parameter Selection using Polynomial Fitting\n\nThis script illustrates how to perform hyper-parameter selection for the degree of a polynomial fitting algorithm.","713c7ba5":"### Hyper-Parameter Tuning\n\nWe perform a search for the optimal degree of the polynomial fit. The training error should show a decreasing pattern. The validation error should decrease and then increase.","c044c814":"### Performance of Optimal Model\n\nWe demonstrate the performance of the model by comparing the error when training with only the training data, and with the training and validation data after the hyper-parameter has already been selected."}}