{"cell_type":{"41734023":"code","9a81502c":"code","fe4f5509":"code","baaf735c":"code","1f7a9bb9":"code","09df9de2":"code","a5a9b54c":"code","8e120ee3":"code","dd92a978":"code","b50b9cee":"code","16bd8dcb":"code","742b9f0d":"code","ab48dd6e":"code","844e2deb":"code","bee644bf":"code","06e4dbf9":"code","cc29c124":"code","db94551b":"code","f893523f":"code","b7b2af77":"code","0f20783c":"code","c892dbdb":"code","098e265b":"code","a922899b":"code","26ea7d59":"code","511067ab":"code","94a70330":"code","72a73643":"code","78a23812":"code","0a2a9fe0":"code","011a1f93":"code","655cdf27":"code","87836a37":"code","0c605d78":"code","b5158078":"code","ac04f5f7":"markdown","ac4eb474":"markdown","7a8f3da4":"markdown","ec223e3a":"markdown","19ed8282":"markdown","3e34356a":"markdown","5db76fb1":"markdown","7a1f3cb8":"markdown","803e52e5":"markdown","5f1a91cd":"markdown","c4e22dd4":"markdown","e392d112":"markdown","33964c15":"markdown","f8ae6b7b":"markdown"},"source":{"41734023":"import matplotlib.pyplot as graph\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\ngraph.style.use('dark_background')\n\ndataset = pd.read_csv('..\/input\/titanic\/train.csv')\n\ndataset.head(6)","9a81502c":"def getAxisConfig():\n    fig = graph.figure(figsize=(10, 10))\n    axis = fig.add_subplot(111)\n\n    return axis","fe4f5509":"dataset.describe(include='all')","baaf735c":"dataset.info()","1f7a9bb9":"ax = getAxisConfig()\n\nrandomSamples = dataset['Age'].dropna().sample(dataset['Age'].isna().sum())\nmissingIndices = dataset[dataset['Age'].isna()].index\nrandomSamples.index = missingIndices\ndataset['Age'].plot(kind='kde', ax = ax)\ndataset.loc[missingIndices, 'Age'] = randomSamples\ndataset['Age'].plot(kind='kde', ax = ax)\nlines, labels = ax.get_legend_handles_labels()\nax.legend(lines, ['Before Imputation', 'After Imputation'])","09df9de2":"dataset.isna().mean() * 100","a5a9b54c":"dataset['Embarked'] = dataset['Embarked'].fillna(dataset['Embarked'].mode()[0])","8e120ee3":"dataset.isna().mean() * 100","dd92a978":"dataset = dataset.drop('Cabin', axis=1)","b50b9cee":"dataset.isna().sum()","16bd8dcb":"dataset.info()","742b9f0d":"def checkCorrelativity(dataset, threshold):\n    arr = []\n    for index in dataset.corr().index:\n        for value in dataset.corr().loc[index]:\n            if ((abs(value * 100) > threshold) and (abs(value * 100) != 100)):\n                    arr.append([index, value])\n        \n    sns.heatmap(dataset.corr(), ax=getAxisConfig(), annot = True)\n    return arr\n\ncheckCorrelativity(dataset, 85)","ab48dd6e":"print (dataset.info(), '\\n \\n')\n\nfor col in dataset.columns:\n    if (dataset[col].dtype == object):\n        if (col != 'Name' and col != 'Ticket'):\n            print (col, ' : ', dataset[col].unique())\n        else:\n            print (col, ' : ', len(dataset[col].unique()))","844e2deb":"from sklearn.preprocessing import LabelEncoder\n\ndef labelEncoder (dataset, col):\n    encoder = LabelEncoder()\n    encoder.fit(dataset[col])\n    return encoder.transform(dataset[col])","bee644bf":"dataset['Sex'] = labelEncoder(dataset, 'Sex')\ndataset['Embarked'] = labelEncoder(dataset, 'Embarked')\n\ndataset[['Sex', 'Embarked']].head(10)","06e4dbf9":"dataset.describe(include='all')","cc29c124":"dataset = dataset.drop(['Name', 'Ticket'], axis=1)","db94551b":"# sns.pairplot(dataset, kind='scatter')","f893523f":"dataset = dataset.drop(['PassengerId', \"Pclass\", \"SibSp\", \"Parch\", \"Fare\"], axis=1)","b7b2af77":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split","0f20783c":"dataset.head()","c892dbdb":"x_train, x_test, y_train, y_test = train_test_split(dataset.iloc[:,1:], dataset.iloc[:,0], test_size=0.50)\n\nx_train.shape, x_test.shape # 80 % 20 %","098e265b":"regression = LogisticRegression()\nregression.fit(x_train, y_train)","a922899b":"y_pred = regression.predict(x_test)","26ea7d59":"def test(dataset, y_test, y_pred):\n    axis = getAxisConfig()\n    graph.scatter([value for value in range(0, 30)], y_pred[70:100], color='blue')\n    graph.scatter([value for value in range(0, 30)], y_test[70:100], color='green')\n    graph.legend(['Predicted', 'Actual'])","511067ab":"test(dataset, y_test, y_pred)","94a70330":"from sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\n\nscore = classification_report(y_test, y_pred)\n\nprint (score)\n\nconfusion = confusion_matrix(y_test, y_pred)\n\nprint ('\\n Total : ', x_test.shape[0], '\\n Truth : ', confusion[0, 0] + confusion[1, 1], '\\n Error : ', confusion[0, 1] + confusion[1, 0])","72a73643":"dataset.describe(include='all')","78a23812":"from sklearn.svm import SVC\n\nsupport_vector_machine = SVC()\n\nsupport_vector_machine.fit(x_train, y_train)","0a2a9fe0":"y_test_pred = support_vector_machine.predict(x_test)","011a1f93":"score = classification_report(y_test, y_test_pred)\n\nprint (score)","655cdf27":"test(dataset, y_test, y_test_pred)","87836a37":"from sklearn import tree\n\ndecisionTree = tree.DecisionTreeClassifier()\n\ndecisionTree.fit(x_train, y_train)","0c605d78":"y_pred = decisionTree.predict(x_test)","b5158078":"score = classification_report(y_test, y_pred)\n\ntest(dataset, y_test, y_pred)\n\nprint (score)","ac04f5f7":"# Checking Correlation Between Feature.","ac4eb474":"# Handling Missing Values","7a8f3da4":"Handling Cabin Feature And Cabin Has Missing Value Of More Than 77 % So Column Dropped.","ec223e3a":"**Label Encoder.**","19ed8282":"**Label Encoding.**","3e34356a":"# Feature Engineering","5db76fb1":"**Since Name and Ticket Has Many Category, Dropping The Feature.**","7a1f3cb8":"Handling Emabarked Feature With Mode Imputation.\n","803e52e5":"Importing Files and packages.","5f1a91cd":"# Survival Prediction","c4e22dd4":"# Train, Test Split And Model Creation.","e392d112":"# Handling Categorical Features","33964c15":"# Cross Validation","f8ae6b7b":"Handling Age Feature with Random Sample Imputation."}}