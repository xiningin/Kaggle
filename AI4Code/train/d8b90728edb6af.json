{"cell_type":{"afe96e15":"code","87bc4c2d":"code","e500bc1d":"code","bab4892c":"code","7081609f":"code","92618f9d":"code","a4b04f6f":"code","382dcf25":"code","1e8f7d5a":"code","bd43e3a1":"code","4b4570c7":"code","1ac1ae2e":"code","60c60d71":"code","6a2020c2":"code","cc16d239":"code","3cff887c":"code","7dd44883":"code","76991d17":"code","3b088a2d":"code","f6cc4140":"code","1b584c51":"code","42e9c9c9":"code","7e561a23":"code","06433cd4":"code","646cf231":"code","96073456":"code","342206c9":"code","d1788529":"code","2e5be7b4":"code","b405a119":"code","4671973b":"code","d340389d":"code","139d31a3":"code","ae0a8103":"code","f74dcb1a":"code","cc0940f0":"code","1c98604d":"code","525d1a3e":"code","46277f02":"code","9f33e0f4":"code","7014d0fe":"code","c99f6347":"code","ada15699":"code","c88e9a4b":"code","60654c36":"code","b70966fd":"code","f6f75787":"code","8ea3e931":"code","3fd9f1e8":"code","a4634343":"code","6f3bc1f7":"code","7a26cbb6":"code","e27672a9":"code","f72729dd":"code","42fce203":"code","b268ef58":"code","27bfff9c":"code","77166b58":"code","24b21aad":"code","6f9522c0":"code","e9d3acf5":"code","4587f1b1":"code","ce537491":"code","3b4d1d63":"code","88ee2b1b":"code","98d54b65":"code","a5bc0184":"code","e4e3c50e":"code","ec36d806":"code","b31f6f9c":"code","833991dd":"code","77f88af5":"code","6e0ad928":"code","1b7fff2f":"code","9d2901a3":"code","790033c9":"code","650a64c0":"code","c13db0b4":"code","4a24bba0":"code","1b6bd647":"code","41d5d3d4":"code","c02cc78b":"code","39e81f3b":"code","1f2c745e":"code","0f190c9d":"code","e9ba2037":"code","955f81fe":"code","ccbc1d2b":"code","f995fa34":"code","008b6ff7":"code","762e002c":"code","355d6a67":"code","d9ba662c":"code","40c252f5":"code","49d9e5bd":"code","04199d5a":"code","f93f1ff3":"code","a6127544":"code","00f6002e":"code","5fc60ad6":"code","3857f9a9":"code","dbbdef6c":"code","783293fb":"code","60eda4ed":"code","71e00823":"code","84eeaa2a":"code","df3f7a57":"code","37c1fdb3":"code","6b388e69":"code","7994e5e2":"code","03c1e46d":"code","b5205ad0":"code","72bfe272":"code","033fee44":"code","430683c8":"code","20c3b803":"code","5055fcca":"code","ad4c4c4a":"code","3d4b8a2a":"code","bd400d34":"code","f3b20ab7":"code","8833cebb":"code","5d7e8543":"markdown","c8f3f90b":"markdown","f639af7a":"markdown","097f06cd":"markdown","27eea27f":"markdown","432ed12d":"markdown","cb2dd255":"markdown","c84141fa":"markdown","31623e96":"markdown","81dc48b2":"markdown","1e9af87b":"markdown","ff6f49ca":"markdown","c6a82d7d":"markdown","d6684ba0":"markdown","7521e094":"markdown","01b6ecb7":"markdown","0576d581":"markdown"},"source":{"afe96e15":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","87bc4c2d":"wine=pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')","e500bc1d":"\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nfrom sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.metrics import confusion_matrix,accuracy_score\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import export_graphviz \nfrom IPython.display import Image  \nimport graphviz\nfrom sklearn import metrics\nfrom sklearn import model_selection\nfrom mlxtend.classifier import StackingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler","bab4892c":"wine.shape","7081609f":"wine.info()","92618f9d":"wine.isnull().values.any()","a4b04f6f":"wine.head(10)","382dcf25":"wine.tail(10)","1e8f7d5a":"wine.describe()","bd43e3a1":"fig=px.histogram(wine,x=\"fixed acidity\",template=\"presentation\",title=\"fixed acidity in the wine\")\nfig.show()","4b4570c7":"fig=px.histogram(wine,x=\"volatile acidity\",template=\"presentation\",title=\"volatile acidity in the wine\")\nfig.show()","1ac1ae2e":"fig=px.histogram(wine,x=\"citric acid\",template=\"presentation\",title=\"citric acid in the wine\")\nfig.show()","60c60d71":"fig=px.histogram(wine,x=\"residual sugar\",template=\"presentation\",title=\"residual sugar in the wine\")\nfig.show()","6a2020c2":"fig=px.histogram(wine,x=\"chlorides\",template=\"presentation\",title=\"chlorides in the wine\")\nfig.show()","cc16d239":"fig=px.histogram(wine,x=\"free sulfur dioxide\",template=\"presentation\",title=\"free sulfur dioxide in the wine\")\nfig.show()","3cff887c":"fig=px.histogram(wine,x=\"total sulfur dioxide\",template=\"presentation\",title=\"total sulfur dioxide in the wine\")\nfig.show()","7dd44883":"fig=px.histogram(wine,x=\"density\",template=\"presentation\",title=\"density of the wine\")\nfig.show()","76991d17":"fig=px.histogram(wine,x=\"pH\",template=\"presentation\",title=\"pH of the wine\")\nfig.show()","3b088a2d":"fig=px.histogram(wine,x=\"sulphates\",template=\"presentation\",title=\"sulphates in the wine\")\nfig.show()","f6cc4140":"fig=px.histogram(wine,x=\"alcohol\",template=\"presentation\",title=\"alcohol in the wine\")\nfig.show()","1b584c51":"fig=px.histogram(wine,x=\"quality\",template=\"presentation\",title=\"quality of the wine\")\nfig.show()","42e9c9c9":"fig = px.density_heatmap(wine, x=\"fixed acidity\", y=\"quality\",template=\"ggplot2\",title=\"fixed acidity vs quality\",color_continuous_scale=\"edge\")\nfig.show()","7e561a23":"fig = px.density_heatmap(wine, x=\"volatile acidity\", y=\"quality\",template=\"ggplot2\",title=\"volatile acidity vs quality\",color_continuous_scale=\"edge\")\nfig.show()","06433cd4":"fig = px.density_heatmap(wine, x=\"citric acid\", y=\"quality\",template=\"ggplot2\",title=\"citric acid vs quality\",color_continuous_scale=\"edge\")\nfig.show()","646cf231":"fig = px.density_heatmap(wine, x=\"residual sugar\", y=\"quality\",template=\"ggplot2\",title=\"residual sugar vs quality\",color_continuous_scale=\"edge\")\nfig.show()","96073456":"fig = px.density_heatmap(wine, x=\"chlorides\", y=\"quality\",template=\"ggplot2\",title=\"chlorides vs quality\",color_continuous_scale=\"edge\")\nfig.show()","342206c9":"fig = px.density_heatmap(wine, x=\"free sulfur dioxide\", y=\"quality\",template=\"ggplot2\",title=\"free sulfur dioxide vs quality\",color_continuous_scale=\"edge\")\nfig.show()","d1788529":"fig = px.density_heatmap(wine, x=\"total sulfur dioxide\", y=\"quality\",template=\"ggplot2\",title=\"total sulfur dioxide vs quality\",color_continuous_scale=\"edge\")\nfig.show()","2e5be7b4":"fig = px.density_heatmap(wine, x=\"density\", y=\"quality\",template=\"ggplot2\",title=\"density vs quality\",color_continuous_scale=\"edge\")\nfig.show()","b405a119":"fig = px.density_heatmap(wine, x=\"pH\", y=\"quality\",template=\"ggplot2\",title=\"pH vs quality\",color_continuous_scale=\"edge\")\nfig.show()","4671973b":"fig = px.density_heatmap(wine, x=\"sulphates\", y=\"quality\",template=\"ggplot2\",title=\"sulphates vs quality\",color_continuous_scale=\"edge\")\nfig.show()","d340389d":"fig = px.density_heatmap(wine, x=\"alcohol\", y=\"quality\",template=\"ggplot2\",title=\"alcohol vs quality\",color_continuous_scale=\"edge\")\nfig.show()","139d31a3":"fig = px.density_heatmap(wine, x=\"residual sugar\", y=\"alcohol\",template=\"ggplot2\",title=\"residual sugar vs alcohol\",color_continuous_scale=\"edge\")\nfig.show()","ae0a8103":"fig = px.density_heatmap(wine, x=\"free sulfur dioxide\", y=\"total sulfur dioxide\",template=\"plotly_dark\",title=\"free sulfur vs total sulfur\",color_continuous_scale=\"edge\")\nfig.show()","f74dcb1a":"corre=wine.corr()\nwine.corr()","cc0940f0":"plt.figure(figsize=(30,10))\nsns.heatmap(corre,annot=True)","1c98604d":"bins = (2, 5.6, 8)\nlabels = ['bad', 'good']\nwine['quality'] = pd.cut(x = wine['quality'], bins = bins, labels = labels)","525d1a3e":"wine['quality'].value_counts()","46277f02":"\nlabelencoder_y = LabelEncoder()\nwine['quality'] = labelencoder_y.fit_transform(wine['quality'])","9f33e0f4":"x=wine.drop('quality',axis=1)","7014d0fe":"x.head()","c99f6347":"y = wine['quality']","ada15699":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)","c88e9a4b":"print(\"shape of x_train = \",x_train.shape)\nprint(\"shape of y_train = \",y_train.shape)\nprint(\"shape of x_test = \",x_test.shape)\nprint(\"shape of y_test = \",y_test.shape)","60654c36":"\nsc = StandardScaler()\nx_train_scaled = sc.fit_transform(x_train)\nx_test_scaled = sc.transform(x_test)","b70966fd":"table=pd.DataFrame(columns = [\"classifier\", \"accuracy\"])","f6f75787":"\nmodel = LogisticRegression(solver=\"liblinear\")\nmodel.fit(x_train_scaled, y_train)\nlog_wine_predict = model.predict(x_test_scaled)\ncoef_df = pd.DataFrame(model.coef_)\ncoef_df['intercept'] = model.intercept_\nprint(coef_df)\n","8ea3e931":"print(\"Model Accuracy: \",(metrics.accuracy_score(y_test, log_wine_predict)))\nprint()\nlog_acc=metrics.accuracy_score(y_test, log_wine_predict)\ntable= table.append({'classifier': 'Logistic Regression','accuracy': log_acc}, ignore_index=True)","3fd9f1e8":"lrm=metrics.confusion_matrix(y_test, log_wine_predict)\nlr_m = pd.DataFrame(lrm, index = [i for i in [\"1\",\"0\"]],columns = [i for i in [\"Predict 1\",\"Predict0\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(lr_m,annot=True)\n","a4634343":"print(\"Classification Report\")\nprint(metrics.classification_report(y_test,log_wine_predict, labels=[1, 0]))","6f3bc1f7":"wine.groupby([\"quality\"]).count()","7a26cbb6":"from sklearn.metrics import roc_curve, auc, precision_recall_curve\ndef roc_plot(y_score,y_test):\n  fpr, tpr, thresholds = roc_curve(y_test, y_score)\n\n  fig = px.area(\n      x=fpr, y=tpr,\n      title=f'ROC Curve (AUC={auc(fpr, tpr):.4f})',\n      labels=dict(x='False Positive Rate', y='True Positive Rate'),\n      width=700, height=500\n  )\n  fig.add_shape(\n      type='line', line=dict(dash='dash'),\n      x0=0, x1=1, y0=0, y1=1\n  )\n\n  fig.update_yaxes(scaleanchor=\"x\", scaleratio=1)\n  fig.update_xaxes(constrain='domain')\n  fig.show()\n\n  precision, recall, thresholds = precision_recall_curve(y_test, y_score)\n\n  fig = px.area(\n      x=recall, y=precision,\n      title=f'Precision-Recall Curve (AUC={auc(fpr, tpr):.4f})',\n      labels=dict(x='Recall', y='Precision'),\n      width=700, height=500\n  )\n  fig.add_shape(\n      type='line', line=dict(dash='dash'),\n      x0=0, x1=1, y0=1, y1=0\n  )\n  fig.update_yaxes(scaleanchor=\"x\", scaleratio=1)\n  fig.update_xaxes(constrain='domain')\n  fig.show()\n  return","e27672a9":"y_score = model.predict_proba(x_test)  \ny_score = y_score[:, 1]   \nroc_plot(y_score,y_test)","f72729dd":"from scipy.stats import zscore\n\nXScaled = x.apply(zscore)\nXScaled.describe()\n","42fce203":"x_train, x_test, y_train, y_test = train_test_split(XScaled, y, test_size=0.30, random_state=42)\n","b268ef58":"NNH = KNeighborsClassifier(n_neighbors= 5 , weights = 'distance' )","27bfff9c":"NNH.fit(x_train, y_train)\n","77166b58":"KNN_wine_predict = NNH.predict(x_test)\nprint(\"Model Accuracy: \",(metrics.accuracy_score(y_test,KNN_wine_predict )))\nprint()\nKNN_acc=metrics.accuracy_score(y_test, KNN_wine_predict)\ntable= table.append({'classifier': 'KNN','accuracy': KNN_acc}, ignore_index=True)","24b21aad":"knnm=metrics.confusion_matrix(y_test, KNN_wine_predict)\nknn_m = pd.DataFrame(knnm, index = [i for i in [\"1\",\"0\"]],columns = [i for i in [\"Predict1\",\"Predict 0\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(knn_m, annot=True)","6f9522c0":"print(\"Classification Report\")\nprint(metrics.classification_report(y_test,KNN_wine_predict, labels=[1, 0]))","e9d3acf5":"y_score = NNH.predict_proba(x_test)  \ny_score = y_score[:, 1]   \nroc_plot(y_score,y_test)","4587f1b1":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)","ce537491":"NB = GaussianNB()\nNB.fit(x_train, y_train.ravel())","3b4d1d63":"NB_wine_predict = NB.predict(x_test)\nprint(\"Model Accuracy:\",(metrics.accuracy_score(y_test,NB_wine_predict)))\nprint()\nNB_acc=metrics.accuracy_score(y_test, NB_wine_predict)\ntable= table.append({'classifier': 'Naive Bayes','accuracy': NB_acc}, ignore_index=True)","88ee2b1b":"print(\"Confusion Matrix\")\nnbtm=metrics.confusion_matrix(y_test,NB_wine_predict, labels=[1,0])\nnbt_m = pd.DataFrame(nbtm, index = [i for i in [\"1\",\"0\"]],\ncolumns = [i for i in [\"Predict 1\",\"Predict 0\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(nbt_m, annot=True)","98d54b65":"print(\"Classification Report\")\nprint(metrics.classification_report(y_test,NB_wine_predict, labels=[1, 0]))","a5bc0184":"y_score = NB.predict_proba(x_test)  \ny_score = y_score[:, 1]   \nroc_plot(y_score,y_test)","e4e3c50e":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)","ec36d806":"svc_model = SVC(C= .1, kernel='linear', gamma= 1)\nsvc_model.fit(x_train, y_train)\n\nSVC_wine_predict= svc_model .predict(x_test)","b31f6f9c":"print(\"Model Accuracy: \",(metrics.accuracy_score(y_test, SVC_wine_predict)))\nprint()\nSVC_acc=metrics.accuracy_score(y_test, SVC_wine_predict)\ntable= table.append({'classifier': 'SVM (Linear)','accuracy': SVC_acc}, ignore_index=True)","833991dd":"print(\"Confusion Matrix:\\n\",confusion_matrix(y_test,SVC_wine_predict))","77f88af5":"svcm=metrics.confusion_matrix(y_test,SVC_wine_predict)\nsvc_m = pd.DataFrame(knnm, index = [i for i in [\"1\",\"0\"]],columns = [i for i in [\"Predict 1\",\"Predict 0\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(knn_m, annot=True)","6e0ad928":"print(\"Classification Report\")\nprint(metrics.classification_report(y_test,SVC_wine_predict, labels=[1, 0]))","1b7fff2f":"svc_model = SVC(kernel='rbf')\nsvc_model.fit(x_train, y_train)\nSVC1_wine_predict = svc_model.predict(x_test)\n","9d2901a3":"print(\"Model Accuracy: \",(metrics.accuracy_score(y_test, SVC1_wine_predict)))\nprint()\nSVC1_acc=metrics.accuracy_score(y_test, SVC1_wine_predict)\ntable= table.append({'classifier': 'SVM(rbf)','accuracy': SVC1_acc}, ignore_index=True)","790033c9":"print(\"Confusion Matrix:\\n\",confusion_matrix(y_test,SVC1_wine_predict))","650a64c0":"svc1m=metrics.confusion_matrix(y_test,SVC1_wine_predict)\nsvc1_m = pd.DataFrame(knnm, index = [i for i in [\"1\",\"0\"]],columns = [i for i in [\"Predict 1\",\"Predict 0\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(knn_m, annot=True)","c13db0b4":"print(\"Classification Report\")\nprint(metrics.classification_report(y_test,SVC1_wine_predict, labels=[1, 0]))","4a24bba0":"svc_model  = SVC(kernel='poly')\nsvc_model.fit(x_train, y_train)\n\nSVC2_wine_predict= svc_model.predict(x_test)","1b6bd647":"print(\"Model Accuracy: \",(metrics.accuracy_score(y_test, SVC2_wine_predict)))\nprint()\nSVC2_acc=metrics.accuracy_score(y_test, SVC2_wine_predict)\ntable= table.append({'classifier': 'SVM(Polynomial Kernel)','accuracy': SVC2_acc}, ignore_index=True)","41d5d3d4":"print(\"Confusion Matrix:\\n\",confusion_matrix(y_test,SVC2_wine_predict))","c02cc78b":"SVC2m=metrics.confusion_matrix(y_test,SVC2_wine_predict)\nSVC2_m = pd.DataFrame(knnm, index = [i for i in [\"1\",\"0\"]],columns = [i for i in [\"Predict 1\",\"Predict 0\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(knn_m, annot=True)","39e81f3b":"svc_model = SVC(kernel='sigmoid')\nsvc_model.fit(x_train, y_train)\nSVC3_wine_predict = svc_model.predict(x_test)","1f2c745e":"print(\"Model Accuracy: \",(metrics.accuracy_score(y_test,SVC3_wine_predict)))\nprint()\nSVC3_acc=metrics.accuracy_score(y_test, SVC3_wine_predict)\ntable= table.append({'classifier': 'SVM(Sigmoid)','accuracy': SVC3_acc}, ignore_index=True)","0f190c9d":"print(\"Confusion Matrix:\\n\",confusion_matrix(y_test,SVC3_wine_predict))","e9ba2037":"svc3m=metrics.confusion_matrix(y_test,SVC3_wine_predict)\nsvc3_m = pd.DataFrame(knnm, index = [i for i in [\"1\",\"0\"]],columns = [i for i in [\"Predict 1\",\"Predict 0\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(knn_m, annot=True)","955f81fe":"feature_cols = ['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']\nclf = DecisionTreeClassifier()\n\nclf=clf.fit(x_train,y_train)\n\nclf_wine_predict = clf.predict(x_test)","ccbc1d2b":"print(\"Model Accuracy: \",(metrics.accuracy_score(y_test, clf_wine_predict)))\nprint()\nclf_acc=metrics.accuracy_score(y_test, clf_wine_predict)\ntable= table.append({'classifier': 'Decision Tree','accuracy': clf_acc}, ignore_index=True)","f995fa34":"print(\"Confusion Matrix:\\n\",confusion_matrix(y_test,clf_wine_predict))","008b6ff7":"tree=metrics.confusion_matrix(y_test,clf_wine_predict)\ntree_m = pd.DataFrame(tree, index = [i for i in [\"1\",\"0\"]],columns = [i for i in [\"Predict 1\",\"Predict 0\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(tree_m, annot=True)","762e002c":"print(\"Classification Report\")\nprint(metrics.classification_report(y_test,clf_wine_predict, labels=[1, 0]))","355d6a67":"from sklearn import tree\nfig = plt.figure(figsize=(25,20))\n_ = tree.plot_tree(clf, \n                   feature_names=feature_cols,  \n                   class_names=['0','1'],\n                   filled=True)\n","d9ba662c":"y_score = clf.predict_proba(x_test)  \ny_score = y_score[:, 1]   \nroc_plot(y_score,y_test)","40c252f5":"clf = DecisionTreeClassifier(criterion=\"entropy\", max_depth=3)\nclf = clf.fit(x_train,y_train)\nclf1_wine_predict = clf.predict(x_test)\nprint(\"Model Accuracy: \",(metrics.accuracy_score(y_test, clf1_wine_predict)))\nprint()\nclf1_acc=metrics.accuracy_score(y_test, clf1_wine_predict)\ntable= table.append({'classifier': 'Pruned decision tree','accuracy': clf1_acc}, ignore_index=True)","49d9e5bd":"from sklearn import tree\nfig = plt.figure(figsize=(25,20))\n_ = tree.plot_tree(clf, \n                   feature_names=feature_cols,  \n                   class_names=['0','1'],\n                   filled=True)\n\n","04199d5a":"y_score = clf.predict_proba(x_test)  \ny_score = y_score[:, 1]   \nroc_plot(y_score,y_test)","f93f1ff3":"rf = RandomForestClassifier(n_estimators = 70,criterion=\"entropy\")\nrf = rf.fit(x_train, y_train)","a6127544":"rf_wine_predict= rf.predict(x_test)","00f6002e":"print(\"Model Accuracy: \",(metrics.accuracy_score(y_test, rf_wine_predict)))\nprint()\nrf_acc=metrics.accuracy_score(y_test, rf_wine_predict)\ntable= table.append({'classifier': 'Random forest','accuracy': rf_acc}, ignore_index=True)","5fc60ad6":"print(\"Confusion Matrix:\\n\",confusion_matrix(y_test,rf_wine_predict))","3857f9a9":"rf1=metrics.confusion_matrix(y_test,rf_wine_predict)\nrf1_m = pd.DataFrame(rf1, index = [i for i in [\"1\",\"0\"]],columns = [i for i in [\"Predict 1\",\"Predict 0\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(rf1_m, annot=True)","dbbdef6c":"\nprint(\"Classification Report\")\nprint(metrics.classification_report(y_test,rf_wine_predict, labels=[1, 0]))","783293fb":"y_score = rf.predict_proba(x_test)  \ny_score = y_score[:, 1]   \nroc_plot(y_score,y_test)","60eda4ed":"abc = AdaBoostClassifier(n_estimators=100,learning_rate=1)\nmodel = abc.fit(x_train, y_train)\nab_wine_predict = model.predict(x_test)\n","71e00823":"print(\"Model Accuracy: \",(metrics.accuracy_score(y_test, ab_wine_predict)))\nprint()\nab_acc=metrics.accuracy_score(y_test, ab_wine_predict)\ntable= table.append({'classifier': 'AdaBoost','accuracy': ab_acc}, ignore_index=True)","84eeaa2a":"print(\"Confusion Matrix:\\n\",confusion_matrix(y_test,ab_wine_predict))","df3f7a57":"ab=metrics.confusion_matrix(y_test,ab_wine_predict)\nab_m = pd.DataFrame(ab, index = [i for i in [\"1\",\"0\"]],columns = [i for i in [\"Predict 1\",\"Predict 0\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(ab_m, annot=True)","37c1fdb3":"print(\"Classification Report\")\nprint(metrics.classification_report(y_test,ab_wine_predict, labels=[1, 0]))","6b388e69":"y_score = abc.predict_proba(x_test)  \ny_score = y_score[:, 1]   \nroc_plot(y_score,y_test)","7994e5e2":"bag = BaggingClassifier(n_estimators=100, max_samples= .7, bootstrap=True, oob_score=True, random_state=22)\nbag= bag.fit(x_train, y_train)","03c1e46d":"bag_wine_predict =bag.predict(x_test)","b5205ad0":"print(\"Model Accuracy: \",(metrics.accuracy_score(y_test, bag_wine_predict)))\nprint()\nbag_acc=metrics.accuracy_score(y_test, bag_wine_predict)\ntable= table.append({'classifier': 'Bagging','accuracy': bag_acc}, ignore_index=True)","72bfe272":"print(\"Confusion Matrix:\\n\",confusion_matrix(y_test,bag_wine_predict))","033fee44":"bag=metrics.confusion_matrix(y_test,bag_wine_predict)\nbag_m = pd.DataFrame(bag, index = [i for i in [\"1\",\"0\"]],columns = [i for i in [\"Predict 1\",\"Predict 0\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(bag_m, annot=True)","430683c8":"print(\"Classification Report\")\nprint(metrics.classification_report(y_test,bag_wine_predict, labels=[1, 0]))","20c3b803":"grad = GradientBoostingClassifier(n_estimators = 100, learning_rate = 0.1, random_state=42)\ngrad = grad.fit(x_train, y_train)","5055fcca":"grad_wine_predict =grad.predict(x_test)\nprint(\"Model Accuracy: \",(metrics.accuracy_score(y_test, grad_wine_predict)))\nprint()\ngrad_acc=metrics.accuracy_score(y_test, grad_wine_predict)\ntable= table.append({'classifier': 'Gradient Boosting','accuracy': grad_acc}, ignore_index=True)","ad4c4c4a":"print(\"Confusion Matrix:\\n\",confusion_matrix(y_test,grad_wine_predict))","3d4b8a2a":"grad=metrics.confusion_matrix(y_test,grad_wine_predict)\ngrad_m = pd.DataFrame(grad, index = [i for i in [\"1\",\"0\"]],columns = [i for i in [\"Predict 1\",\"Predict 0\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(grad_m, annot=True)","bd400d34":"print(\"Classification Report\")\nprint(metrics.classification_report(y_test,grad_wine_predict, labels=[1, 0]))","f3b20ab7":"clf1 = KNeighborsClassifier(n_neighbors=1)\nclf2 = RandomForestClassifier(random_state=1)\nclf3 =SVC(C= .1, kernel='linear', gamma= 1)\nlr=LogisticRegression()\nsclf = StackingClassifier(classifiers=[clf1, clf2, clf3], meta_classifier=lr)\nprint('3-fold cross validation:\\n')\nfor clf, label in zip([clf1, clf2, clf3, sclf], \n                      ['KNN', \n                       'Random Forest', \n                       'Naive Bayes',\n                       'StackingClassifier']):\n\n    scores = model_selection.cross_val_score(clf, x, y, \n                                              cv=3, scoring='accuracy')\n    print(\"Accuracy: %0.2f (+\/- %0.2f) [%s]\" \n          % (scores.mean(), scores.std(), label))","8833cebb":"print(table)","5d7e8543":"### SVM(sigmoid kernel)","c8f3f90b":"# Bivariate analysis","f639af7a":"## Decision Tree","097f06cd":"## Logistic regression","27eea27f":"## SVM classifier","432ed12d":"## Pruned Decision Tree","cb2dd255":"### SVM(rbf kernel)","c84141fa":"## AdaBoost Classifier","31623e96":"## Bagging","81dc48b2":"## Gradient Boosting","1e9af87b":"##Naive Bayes","ff6f49ca":"### SVM(Polynomial kernel)","c6a82d7d":"## Stacking","d6684ba0":"# EDA","7521e094":"## Random forest classifier","01b6ecb7":"## KNN Classifier","0576d581":"#Univariate analysis"}}