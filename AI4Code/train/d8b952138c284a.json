{"cell_type":{"3cd78e07":"code","f7e75aee":"code","1d72c556":"code","accf93e0":"code","b98a2178":"code","36d2df38":"code","82638566":"markdown","1ed6a077":"markdown","9efacbff":"markdown"},"source":{"3cd78e07":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n #   for filename in filenames:\n  #      print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f7e75aee":"data0 = pd.read_csv(\"\/kaggle\/input\/emg-4\/0.csv\", header=None) # For rock[0]\ndata1 = pd.read_csv(\"\/kaggle\/input\/emg-4\/1.csv\", header=None) # For scissors[1]\ndata2 = pd.read_csv(\"\/kaggle\/input\/emg-4\/2.csv\", header=None) # For paper[2]\ndata3 = pd.read_csv(\"\/kaggle\/input\/emg-4\/3.csv\", header=None) # For ok[3]\ndata = pd.concat([data0,data1,data2,data3], axis=0)\ndata.iloc[:5]","1d72c556":"from sklearn.model_selection import train_test_split\nY = data.iloc[:,64]\nX = data.drop(data.columns[64], axis=1)\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size=0.8, random_state=1, stratify=Y)","accf93e0":"print(X_train.shape)\nprint(X_test.shape)\nprint(np.mean(X_train, axis=0))","b98a2178":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = pd.DataFrame(sc.fit_transform(X_train))\nX_test = pd.DataFrame(sc.transform(X_test))","36d2df38":"from sklearn.svm import SVC\nfrom sklearn.metrics import classification_report, accuracy_score, f1_score\nmodel = SVC(kernel = 'rbf')\nmodel.fit(X_train, Y_train)\npredictions = model.predict(X_test)\nprint(accuracy_score(Y_test, predictions))\nprint(classification_report(Y_test, predictions))","82638566":"# Gesture recognition using EMG\n## Dataset\n 1. Sensor readings of dimension 64 would predict a gesture class (0-3).\n    Gesture classes were : rock - 0, scissors - 1, paper - 2, ok - 3.  \n    Structure of data : \n    [8sensors][8sensors][8sensors][8sensors][8sensors][8sensors][8sensors][8sensors][GESTURE_CLASS]","1ed6a077":"### Classification","9efacbff":"### Data normalization"}}