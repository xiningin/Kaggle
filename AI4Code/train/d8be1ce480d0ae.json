{"cell_type":{"2443605a":"code","9517bdb1":"code","c0506a75":"code","852c3dea":"code","0fa90866":"code","edf786bd":"code","73b0d929":"code","3d77a0e0":"code","5800896f":"code","b361eecd":"code","931d2f09":"code","b07e4562":"code","b9c6d940":"code","a8211cf0":"code","024a944e":"code","b78b2327":"code","ab66812f":"code","f5a21a2f":"code","abbfb9ee":"code","5a12355f":"code","976afabc":"code","b5abf1b9":"code","1ca45667":"code","bcf0fdcd":"code","c13aa5f1":"code","91441579":"code","542b717c":"code","f344ed71":"code","ffc478c1":"code","cf53e8aa":"code","e92354ea":"code","dbd9d1fb":"code","b49a9a31":"code","fc53a5f0":"code","fa94a688":"markdown","3ebe8f0a":"markdown","e7c372cb":"markdown"},"source":{"2443605a":"import numpy as np\nimport pandas as pd\nimport pyodbc \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px","9517bdb1":"df1 = pd.read_csv('..\/input\/covid19-coronavirus\/2019_nCoV_data.csv')\nCovid_Confirmed = pd.read_csv(\"..\/input\/covid19-coronavirus\/time_series_19-covid-Confirmed.csv\")\nCovid_Deaths = pd.read_csv(\"..\/input\/covid19-coronavirus\/time_series_19-covid-Deaths.csv\")\nCovid_Recovered = pd.read_csv('..\/input\/covid19-coronavirus\/time_series_19-covid-Recovered.csv')\ndf1.head()","c0506a75":"df1 = df1.astype({\"Confirmed\": int, \"Deaths\": int, \"Recovered\" : int})\ndf1 = df1.filter([\"Date\", \"Province\/State\", \"Country\", \"Last Update\", \"Confirmed\", \"Deaths\", \"Recovered\"])\ndf1.head()","852c3dea":"#Convert the date (remove time stamp)\n\ndf1['Date1'] = pd.to_datetime(df1['Date'])\ndf1['Date'] = df1['Date1'].dt.date\ndf1['Last Update1'] = pd.to_datetime(df1['Last Update'])\ndf1['Last Update'] = df1['Last Update1'].dt.date\ndf1 = df1.filter([\"Date\", \"Province\/State\", \"Country\", \"Last Update\", \"Confirmed\", \"Deaths\", \"Recovered\"])\ndf1.head()","0fa90866":"#Combine country and province to location and sum values pertaining to it\n\ndf1['Location'] = df1['Country'] + ', ' + df1['Province\/State'].fillna('N\/A')\n\ndaily = pd.DataFrame(columns=df1.columns)\n\nfor item in df1['Location'].unique():\n    a = df1[df1['Location']==item].set_index('Date')\n    a = a.rename_axis('Date').reset_index()\n    daily = daily.append(a, sort=False, ignore_index=True)\n\ndf1_daily = daily.sort_values(['Date','Country','Province\/State'])\ndf1_daily = df1_daily.reset_index()\ndf1_daily = df1_daily.filter([\"Date\", \"Province\/State\", \"Country\", \"Last Update\", \"Confirmed\", \"Deaths\", \"Recovered\", \"Location\"])\ndf1_daily.head()","edf786bd":"#For graph - Comparing the confirmed, deaths and recovered:\n\ndf1_date = df1_daily.filter([\"Date\",  \"Confirmed\", \"Deaths\", \"Recovered\"])\ndf1_date = df1_date.groupby(df1_date[\"Date\"]).sum()\ndf1_date.head()","73b0d929":"plt.figure(figsize=(11,6))\nplt.plot(df1_date, marker='o')\nplt.title('Total Number of Coronavirus Cases by Date')\nplt.legend(df1_date.columns)\nplt.xticks(rotation=75)\nplt.show()","3d77a0e0":"#For graph - Confirmed cases by country:\n\nfig = px.scatter(df1_daily, x='Date', y='Confirmed', hover_data=['Province\/State', 'Deaths', 'Recovered'], color='Country')\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05, xanchor='left', yanchor='bottom',\n                              text='Confirmed cases by Country',\n                              font=dict(family='Calibri', size=20, color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations = annotations)\nfig.show()","5800896f":"#For graph - Confirmed cases by Mainland China:\n\nfig = px.line(df1_daily.loc[df1_daily[\"Country\"] == \"Mainland China\"], x='Date', y='Confirmed', hover_data=['Province\/State', 'Deaths', 'Recovered'], color='Country')\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=1.0, y=1.05, xanchor='left', yanchor='bottom',\n                              text='Confirmed cases by Mainland China',\n                              font=dict(family='Calibri', size=20, color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations = annotations)\nfig.show()","b361eecd":"#For graph - Confirmed cases by Provinces in Mainland China:\n\nfig = px.line(df1_daily.loc[df1_daily[\"Country\"] == \"Mainland China\"], x='Date', y='Confirmed', hover_data=['Province\/State', 'Deaths', 'Recovered'], color='Province\/State')\nannotations = []\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05, xanchor='left', yanchor='bottom',\n                              text='Confirmed cases by Provinces in China',\n                              font=dict(family='Calibri', size=20, color='rgb(37,37,37)'),\n                              showarrow=False))\nfig.update_layout(annotations = annotations)\nfig.show()","931d2f09":"Confirmed_china = Covid_Confirmed.loc[Covid_Confirmed [\"Country\/Region\"] == \"Mainland China\"]\nConfirmed_china = Confirmed_china.rename(columns = {\"Province\/State\" : \"Province\", \"Country\/Region\":\"Country\"})\nConfirmed_china = Confirmed_china.filter([\"Province\" , \"Country\", \"Lat\", \"Long\", \"1\/22\/20\",\"1\/28\/20\", \"2\/4\/20\", \"2\/11\/20\", \"2\/17\/20\"])\nConfirmed_china.head()","b07e4562":"#combi_day1 = pd.merge(Confirmed_china_hubei, Confirmed_china, on = \"Country\", how = 'outer')\ncombi_day1 = Confirmed_china.astype({\"1\/22\/20\" : int, \"1\/28\/20\" : int, \"2\/4\/20\" : int, \"2\/11\/20\" : int, \"2\/17\/20\" : int })\ncombi_day1 = combi_day1.rename(columns = {\"1\/22\/20\" : \"firstday\", \"1\/28\/20\" : \"firstweek\", \"2\/4\/20\" : \"secweek\", \"2\/11\/20\" : \"thirdweek\", \"2\/17\/20\" : \"fourthweek\"})\ncombi_day1.head()","b9c6d940":"##### Using gmplot the following polygon has been obtained ######\n# combi_day1 = combi_day1.loc[combi_day1[\"firstday\"] >= 1]\n# latitude_list = combi_day1[\"Lat\"]\n# longitude_list = combi_day1[\"Long\"] \n\n# gmap5 = gmplot.GoogleMapPlotter(30.97564, 112.2707, 5) \n# gmap5.scatter( latitude_list, longitude_list, '# FF0000', size = 35, marker = True) \n# #polygon method Draw a polygon with the help of coordinates\n# gmap5.polygon(latitude_list, longitude_list,  color = 'cornflowerblue') \n# gmap5.draw(\"C:\\\\Users\\\\vigne\\\\Desktop\\\\day1.html\" ) ","a8211cf0":"df1_date = df1_date.reset_index()\ndf1_date","024a944e":"#setting index as date\ndf1_date['Date'] = pd.to_datetime(df1_date.Date,format='%Y-%m-%d')\ndf1_date.index = df1_date['Date']\n\n#plot\nplt.figure(figsize=(16,8))\nplt.plot(df1_date['Confirmed'], label='Confirmed cases')","b78b2327":"#setting index as date values\ndf1_date['Date'] = pd.to_datetime(df1_date.Date,format='%Y-%m-%d')\ndf1_date.index = df1_date['Date']\n\n#sorting\ndata = df1_date.sort_index(ascending=True, axis=0)\n\n#creating a separate dataset\nnew_data = pd.DataFrame(index=range(0,len(df1_date)),columns=['Date', 'Confirmed'])\n\nfor i in range(0,len(data)):\n    new_data['Date'][i] = data['Date'][i]\n    new_data['Confirmed'][i] = data['Confirmed'][i]\nnew_data","ab66812f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(new_data['Date'], new_data['Confirmed'], random_state = 0)\nX_train = pd.DataFrame(X_train)\nX_test = pd.DataFrame(X_test)\n","f5a21a2f":"#create features\nfrom fastai.tabular import add_datepart\nadd_datepart(X_train, 'Date')\nX_train.drop('Elapsed', axis=1, inplace=True)  #elapsed will be the time stamp\nX_train = X_train.filter([ \"Year\", \"Month\", \"Day\"])\nX_train\n\nadd_datepart(X_test, 'Date')\nX_test.drop('Elapsed', axis=1, inplace=True)  #elapsed will be the time stamp\nX_test = X_test.filter([ \"Year\", \"Month\", \"Day\"])\nX_test","abbfb9ee":"#implement linear regression\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train,y_train)","5a12355f":"#make predictions and find the rmse\npreds = model.predict(X_test)\nrms=np.sqrt(np.mean(np.power((np.array(y_test)-np.array(preds)),2)))\nrms","976afabc":"preds","b5abf1b9":"new_data","1ca45667":"\n\nfrom statsmodels.tsa.stattools import adfuller\nfrom numpy import log\nresult = adfuller(new_data.Confirmed.dropna())\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])","bcf0fdcd":"import numpy as np, pandas as pd\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'figure.figsize':(9,7), 'figure.dpi':120})\n\n# Import data\ndf =new_data\n\n# Original Series\nfig, axes = plt.subplots(3, 2, sharex=True)\naxes[0, 0].plot(new_data.Confirmed); axes[0, 0].set_title('Original Series')\nplot_acf(new_data.Confirmed, ax=axes[0, 1])\n\n# 1st Differencing\naxes[1, 0].plot(new_data.Confirmed.diff()); axes[1, 0].set_title('1st Order Differencing')\nplot_acf(new_data.Confirmed.diff().dropna(), ax=axes[1, 1])\n\n# 2nd Differencing\naxes[2, 0].plot(new_data.Confirmed.diff().diff()); axes[2, 0].set_title('2nd Order Differencing')\nplot_acf(new_data.Confirmed.diff().diff().dropna(), ax=axes[2, 1])\n\nplt.show()","c13aa5f1":"from pmdarima.arima.utils import ndiffs\ndf = new_data\ny = df.Confirmed\n\n## Adf Test\nndiffs(y, test='adf')  # 2\n\n# KPSS test\nndiffs(y, test='kpss')  # 0\n\n# PP test:\nndiffs(y, test='pp')  # 2","91441579":"# PACF plot of 1st differenced series\nplt.rcParams.update({'figure.figsize':(9,3), 'figure.dpi':120})\n\nfig, axes = plt.subplots(1, 2, sharex=True)\naxes[0].plot(new_data.Confirmed.diff()); axes[0].set_title('1st Differencing')\naxes[1].set(ylim=(0,5))\nplot_pacf(new_data.Confirmed.diff().dropna(), ax=axes[1])\n\nplt.show()","542b717c":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'figure.figsize':(9,3), 'figure.dpi':120})\n\n# Import data\ndf = new_data\n\nfig, axes = plt.subplots(1, 2, sharex=True)\naxes[0].plot(new_data.Confirmed.diff()); axes[0].set_title('1st Differencing')\naxes[1].set(ylim=(0,1.2))\nplot_acf(new_data.Confirmed.diff().dropna(), ax=axes[1])\n\nplt.show()","f344ed71":"from statsmodels.tsa.arima_model import ARIMA\n\n# 1,1,2 ARIMA Model\nmodel = ARIMA(new_data.Confirmed.astype(float), order=(1,1,2))\nmodel_fit = model.fit(disp=0)\nprint(model_fit.summary())\n","ffc478c1":"# 1,1,1 ARIMA Model\nmodel = ARIMA(new_data.Confirmed.astype(float), order=(1,1,1))\nmodel_fit = model.fit(disp=0)\nprint(model_fit.summary())","cf53e8aa":"# Plot residual errors\nresiduals = pd.DataFrame(model_fit.resid)\nfig, ax = plt.subplots(1,2)\nresiduals.plot(title=\"Residuals\", ax=ax[0])\nresiduals.plot(kind='kde', title='Density', ax=ax[1])\nplt.show()","e92354ea":"# Actual vs Fitted\nmodel_fit.plot_predict(dynamic=False)\nplt.show()","dbd9d1fb":"from statsmodels.tsa.stattools import acf\n\n# Create Training and Test\ntrain = new_data.Confirmed[:20]\ntest = new_data.Confirmed[21:]","b49a9a31":"# Build Model\n# model = ARIMA(train, order=(3,2,1))  \nmodel = ARIMA(train.astype(float), order=(1, 1, 1))  \nfitted = model.fit(disp=-1)  \n\n# Forecast\nfc, se, conf = fitted.forecast(12, alpha=0.05)  # 95% conf\n\n# Make as pandas series\nfc_series = pd.Series(fc, index=test.index)\nlower_series = pd.Series(conf[:, 0], index=test.index)\nupper_series = pd.Series(conf[:, 1], index=test.index)\n\n# Plot\nplt.figure(figsize=(12,5), dpi=100)\nplt.plot(train, label='training')\nplt.plot(test, label='actual')\nplt.plot(fc_series, label='forecast')\nplt.fill_between(lower_series.index, lower_series, upper_series, \n                 color='k', alpha=.15)\nplt.title('Forecast vs Actuals')\nplt.legend(loc='upper left', fontsize=8)\nplt.show()","fc53a5f0":"# # Build Model\n# model = ARIMA(train.astype(float), order=(3, 2, 1))  \n# fitted = model.fit(disp=-1)  \n# print(fitted.summary())\n\n# # Forecast\n# fc, se, conf = fitted.forecast(15, alpha=0.05)  # 95% conf\n\n# # Make as pandas series\n# fc_series = pd.Series(fc, index=test.index)\n# lower_series = pd.Series(conf[:, 0], index=test.index)\n# upper_series = pd.Series(conf[:, 1], index=test.index)\n\n# # Plot\n# plt.figure(figsize=(12,5), dpi=100)\n# plt.plot(train, label='training')\n# plt.plot(test, label='actual')\n# plt.plot(fc_series, label='forecast')\n# plt.fill_between(lower_series.index, lower_series, upper_series, \n#                  color='k', alpha=.15)\n# plt.title('Forecast vs Actuals')\n# plt.legend(loc='upper left', fontsize=8)\n# plt.show()","fa94a688":"OUTBREAK","3ebe8f0a":"![op.jpg](attachment:op.jpg)","e7c372cb":"### LINEAR REGRESSION"}}