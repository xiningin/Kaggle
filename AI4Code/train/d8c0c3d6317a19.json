{"cell_type":{"9446057d":"code","dd198229":"code","b0e9f591":"code","82328aba":"code","615094e9":"code","028ea43a":"code","a6f97003":"code","8a3e265f":"code","ebcfc07b":"code","df5da0f9":"code","ab544a52":"code","b8809353":"code","5593a963":"code","ab278ae4":"code","7dde125e":"code","4b685dba":"code","059c4e3e":"code","65b95e7f":"code","e8b05a17":"code","ed24befc":"code","0cdd7ca7":"code","536af168":"code","8178bf3a":"code","45894ff5":"code","4e62d428":"code","29ba02ec":"code","1dbfed1c":"code","178b3505":"code","cd8b7c65":"code","7622def5":"code","cccbfc82":"code","d5a2546e":"code","5a4cde6f":"code","638e50f3":"code","bd0a4f3a":"code","def9c45a":"code","872fc24d":"code","b8c3dcd4":"code","f404c9fb":"code","c4a1f389":"code","633f50a0":"markdown","e71ef6a8":"markdown","6e210b27":"markdown","1db244eb":"markdown","743f1341":"markdown","6e7dd0df":"markdown","7844712b":"markdown","10a2b772":"markdown","b1ffac0e":"markdown","54ddf650":"markdown","f8742c20":"markdown"},"source":{"9446057d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats\nimport plotly.plotly as py # visualization library\nfrom plotly.offline import init_notebook_mode, iplot # plotly offline mode\ninit_notebook_mode(connected=True) \nimport plotly.graph_objs as go # plotly graphical object\nimport warnings\nwarnings.filterwarnings('ignore')\n%pylab inline\n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","dd198229":"data2015 = pd.read_csv(\"..\/input\/world-happiness\/2015.csv\")\nlocation = pd.read_csv(\"..\/input\/world-capitals-gps\/concap.csv\")\ndata2015.head()","b0e9f591":"data2015.tail()","82328aba":"data2015.describe()","615094e9":"#columns of data\ndata2015.columns","028ea43a":"data2015.shape","a6f97003":"#information about data\ndata2015.info()","8a3e265f":"f,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(data2015.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","ebcfc07b":"data_plot = data2015.loc[:,[\"Health (Life Expectancy)\",\"Family\", \"Economy (GDP per Capita)\",\"Happiness Score\" ]]\ndata_plot.plot()","df5da0f9":"data_plot.plot(subplots = True)","ab544a52":"data_plot.plot(kind = \"scatter\", x = \"Economy (GDP per Capita)\", y = \"Happiness Score\")\n","b8809353":"data2015.Region.unique()","5593a963":"region_list = list(data2015.Region.unique())\nregion_happiness_score_ratio = []\nfor i in region_list:\n    x = data2015[data2015.Region == i]\n    region_happiness_score_rate = sum(x[\"Happiness Score\"])\/len(x)\n    region_happiness_score_ratio.append(region_happiness_score_rate)\n#I want to sort my new data \ndata_bar = pd.DataFrame({'region_list':region_list, 'region_happiness_score_ratio':region_happiness_score_ratio})\nnew_index = (data_bar['region_happiness_score_ratio'].sort_values(ascending = False)).index.values\nsorted_data = data_bar.reindex(new_index)\n\n#visualisation\nplt.figure(figsize=(10,7))\nsns.barplot(x=sorted_data['region_list'], y=sorted_data['region_happiness_score_ratio'])\nplt.xticks(rotation= 90)\nplt.xlabel('Regions')\nplt.ylabel('Happiness Score')\nplt.title('Happiness Score Ratio by Regions')\n\n    \n","ab278ae4":"region_economy_ratio = []\nfor i in region_list:\n    y = data2015[data2015.Region == i]\n    region_economy_rate = sum(y['Economy (GDP per Capita)'])\/len(y)\n    region_economy_ratio.append(region_economy_rate)\n    \ndata_bar2 = pd.DataFrame({'region_list':region_list,'region_economy_ratio':region_economy_ratio})\nnew_index2=(data_bar2['region_economy_ratio'].sort_values(ascending = False)).index.values\nsorted_data2 = data_bar2.reindex(new_index2)\n\nplt.figure(figsize=(10,7))\nsns.barplot(x=sorted_data2['region_list'], y=sorted_data2['region_economy_ratio'], palette = sns.color_palette(\"BuGn_r\",15) )\nplt.xticks(rotation= 60)\nplt.xlabel('Regions')\nplt.ylabel('Economy')\nplt.title('Economy Ratio by Regions')","7dde125e":"sorted_data.region_happiness_score_ratio = sorted_data.region_happiness_score_ratio\/max(sorted_data.region_happiness_score_ratio)\nsorted_data2.region_economy_ratio = sorted_data2.region_economy_ratio\/max(sorted_data2.region_economy_ratio)\ndata = pd.concat([sorted_data,sorted_data2.region_economy_ratio],axis = 1)\ndata.sort_values(\"region_happiness_score_ratio\",inplace = True)\n\n#visualisation\nf,ax1 = plt.subplots(figsize = (12,8))\nsns.pointplot(x = \"region_list\",y = \"region_economy_ratio\",data = data,color = 'purple',alpha = 0.7)\nsns.pointplot(x = \"region_list\",y = \"region_happiness_score_ratio\", data = data,color = 'lime',alpha = 0.7)\nplt.text(7,0.6, \"Happiness Score Ratio of Given Regions\",color = 'lime',fontsize = 13,style = 'italic' )\nplt.text(7,0.55, \"Economy Ratio of Given Regions\",color = 'purple',fontsize = 13,style = 'italic')\nplt.xlabel('Regions', fontsize = 15, color = 'blue')\nplt.ylabel('Values', fontsize = 15, color ='blue')\nplt.xticks(rotation = 60)\nplt.title('Happines Score vs. Economy Score', fontsize = 20, color = 'blue')\nplt.grid()\n\n\n","4b685dba":"g = sns.jointplot(data.region_economy_ratio, data.region_happiness_score_ratio, kind = \"kde\", height = 7)\ng.annotate(stats.pearsonr)\nplt.show()","059c4e3e":"g = (sns.jointplot('region_economy_ratio', 'region_happiness_score_ratio',data = data, color = 'lime', ratio = 3))","65b95e7f":"sns.lmplot('region_economy_ratio', 'region_happiness_score_ratio',data = data)\nplt.show()","e8b05a17":"sns.kdeplot(data.region_economy_ratio, data.region_happiness_score_ratio, shade = True, cut = 3, color ='green')\nplt.show()","ed24befc":"f,ax1 = plt.subplots(figsize = (15,8))\nsns.violinplot(x = data2015.Region, y = data2015['Economy (GDP per Capita)'])\nplt.xticks(rotation = 90)\nplt.show()","0cdd7ca7":"sns.pairplot(data2015.iloc[:,[0,5,6,7,8]])\nplt.show()","536af168":"data_new = pd.merge(location[['CountryName', 'CapitalName', 'CapitalLatitude', 'CapitalLongitude']],\\\ndata2015,left_on='CountryName',right_on='Country')\ndata_new.shape","8178bf3a":"filter1 = data_new['Happiness Score']>=6.5\nhappy_countries = data_new[filter1]\nhappy_countries.Region.unique()","45894ff5":"happy_countries.Region.value_counts()","4e62d428":"\nlabels = happy_countries.Region.value_counts().index\ncolors = ['purple','blue','red','yellow','green','orange','lightcoral']\nexplode = [0,0,0,0,0,0,0]\nsizes = happy_countries.Region.value_counts().values\n\n# visual\nplt.figure(figsize = (10,10))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Disstribution of the Happiest Countries by Region',color = 'blue',fontsize = 15)\n","29ba02ec":"filter2 = data_new['Happiness Score']<4.5\nunhappy_countries = data_new[filter2]\nunhappy_countries.Region.value_counts()","1dbfed1c":"labels = unhappy_countries.Region.value_counts().index\ncolors = ['blue','purple','red','yellow','green']\nexplode = [0,0,0,0,0]\nsizes = unhappy_countries.Region.value_counts().values\n\n# visual\nplt.figure(figsize = (10,10))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%')\nplt.title('Disstribution of the Least Happy Countries by Region',color = 'red',fontsize = 15)","178b3505":"happiness_score = data_new['Happiness Score'].astype(float)","cd8b7c65":"data = [dict(\n        type='choropleth',\n        colorscale = 'Rainbow',\n        locations = data_new['CountryName'],\n        z = happiness_score,\n        locationmode = 'country names',\n        text = data_new['Country'],\n        colorbar = dict(\n        title = 'Happiness Score', \n        titlefont=dict(size=25),\n        tickfont=dict(size=18))\n)]\nlayout = dict(\n    title = 'Happiness Score',\n    titlefont = dict(size=40),\n    geo = dict(\n        showframe = True,\n        showcoastlines = True,\n        projection = dict(type = 'equirectangular')\n        )\n)\nchoromap = go.Figure(data = data, layout = layout)\niplot(choromap, validate=False)\n\n        \n\n","7622def5":"import sklearn","cccbfc82":"#Linear Regression\nfrom sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()\nx = data2015['Economy (GDP per Capita)'].values.reshape(-1,1)\ny = data2015['Happiness Score'].values.reshape(-1,1)\n\n\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.33, random_state=0)\n\nlin_reg.fit(x_train,y_train)\ny_pred = lin_reg.predict(x_test)\nplt.plot(x_test,y_pred)\n\n","d5a2546e":"b0 = lin_reg.intercept_\nb1 = lin_reg.coef_\nprint('equation of the line is: ',b1,'x +',b0)","5a4cde6f":"xtest = pd.DataFrame(x_test)\nypred = pd.DataFrame(y_pred)\nprediction = pd.concat([xtest,ypred],axis=1)\nprediction.columns = ['xtest','ypred']\nprediction.sort_values(by='xtest', ascending=False, axis = 0, inplace = True)\nprediction.head()\n\n\n","638e50f3":"xtest = pd.DataFrame(x_test)\nytest = pd.DataFrame(y_test)\ntest = pd.concat([xtest,ytest],axis=1)\ntest.columns = ['xtest','ytest']\ntest.sort_values(by='xtest', ascending=False, axis = 0, inplace = True)\ntest.head()","bd0a4f3a":"data2015.head()","def9c45a":"#Multiple linear regression\nx1 = data2015[['Economy (GDP per Capita)','Health (Life Expectancy)','Family','Freedom']].values\ny1 = data2015['Happiness Score'].values.reshape(-1,1)\nfrom sklearn.model_selection import train_test_split\nx1_train, x1_test, y1_train, y1_test = train_test_split(x1,y1, test_size = 0.33, random_state=0)\nmlp = LinearRegression()\nmlp.fit(x1_train,y1_train)\ny1_predict = pd.DataFrame(mlp.predict(x1_test))\ny1_test = pd.DataFrame(y1_test)\n\n","872fc24d":"#comparing of test and prediction\ncomp  = pd.concat([y1_predict,y1_test],axis=1)\ncomp.columns = ['y1_predict','y1_test']\ncomp.sort_values(by='y1_test', ascending=False, axis = 0, inplace = True)\ncomp.sample(10)","b8c3dcd4":"data2015.head()","f404c9fb":"data2015.plot(kind = \"scatter\", x = \"Economy (GDP per Capita)\", y = \"Happiness Score\")","c4a1f389":"#Polynomial Regression\nfrom sklearn.preprocessing import PolynomialFeatures\npol_reg = PolynomialFeatures(degree = 2)\nx_poly = pol_reg.fit_transform(x)\nx.shape\n","633f50a0":"Here I compound World Happiness Report and World Capitals Gps datas","e71ef6a8":"This violinplot shows us the distribution of countries in each region by economy","6e210b27":"This lmplot shows us the relationship between hapiness score and economy.","1db244eb":"Acoording to data the happiest country in 2015 is Switzerland and least happy country is Togo.","743f1341":"By using describe method we can learn some statistical informations about data.","6e7dd0df":"'Hello World:)'\nThis is my first data analysis and visualisation. First I want to thank to DATAI team( [https:\/\/www.kaggle.com\/kanncaa1](http:\/\/)) for their excellent udemy course. \n\nI install all the libraries I need for reading the data and visualisation.","7844712b":"I load world happiness report 2015 and world capital gps. I think maybe I can use location information later.","10a2b772":"According to the correlation map there is a strong positive relationship between Happiness Score, Economy, Family and Health. ","b1ffac0e":"**Please upvote if you like my very first Kernel**","54ddf650":"Australia and New Zeland region is have highest happiness score ratio. North America and Western Europe are 2. and 3. happiest regions respectively.","f8742c20":"We can see this positive relationship between happiness score and economy from scatterplot."}}