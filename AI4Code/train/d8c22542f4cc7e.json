{"cell_type":{"c73c72db":"code","b53cc9e0":"code","44aacceb":"code","3c7f4627":"code","ff9e3a5b":"code","5fa805cd":"code","8b2385b5":"code","cab05c7b":"code","a47c039c":"code","62b79e04":"code","0296f06c":"code","0f20533c":"code","6e6dcc33":"code","01a8a73b":"code","d38d8eb1":"code","f3e16768":"code","d3277ca9":"code","d244f95d":"code","f6a39017":"code","1a27cb84":"code","3cb43fa1":"code","541454c0":"code","484a527a":"code","89e848c5":"code","041d087f":"code","d82ebfeb":"code","487c0ac6":"markdown","4e2b8edc":"markdown","71f8995b":"markdown","2fc76ea9":"markdown","c5f8aa56":"markdown","2cefef86":"markdown","5538bf1c":"markdown"},"source":{"c73c72db":"import pandas as pd\nimport numpy as np\nfrom glob import glob\nimport cv2\nfrom skimage import io\nfrom tqdm import tqdm\nimport seaborn as sns\nimport os","b53cc9e0":"!mkdir '224x224-dataset-melanoma'\n!mkdir '224x224-test'","44aacceb":"df_train = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/train.csv')","3c7f4627":"df_gt = pd.read_csv('..\/input\/isic-2019\/ISIC_2019_Training_GroundTruth.csv')\nimage_id = df_gt.iloc[25]['image']\nimage = cv2.imread(f'..\/input\/isic-2019\/ISIC_2019_Training_Input\/ISIC_2019_Training_Input\/{image_id}.jpg', cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nio.imshow(image);","ff9e3a5b":"print('[ALL]:', df_gt.shape[0])\nprint('[\u2229 isic2020]:', len(set(df_train['image_name'].values).intersection(df_gt['image'].values)))","5fa805cd":"paths = glob('..\/input\/skin-lesion-analysis-toward-melanoma-detection\/skin-lesions\/*\/*\/*.jpg')\nprint(len(paths))\nimage = cv2.imread(paths[2], cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nio.imshow(image);","8b2385b5":"image_ids = [path.split('\/')[-1][:-4] for path in paths]\nprint('[ALL]:', len(image_ids))\nprint('[\u2229 isic2020]:', len(set(image_ids).intersection(df_train['image_name'].values)))\nprint('[\u2229 isic2019]:', len(set(image_ids).intersection(df_gt['image'].values)))","cab05c7b":"df_meta = pd.read_csv('..\/input\/skin-cancer-mnist-ham10000\/HAM10000_metadata.csv')","a47c039c":"image_id = df_meta.iloc[777]['image_id']\nimage = cv2.imread(f'..\/input\/skin-cancer-mnist-ham10000\/HAM10000_images_part_1\/{image_id}.jpg', cv2.IMREAD_COLOR)\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nio.imshow(image);","62b79e04":"print('[ALL]:', df_meta.shape[0])\nprint('[\u2229 isic2020]:', len(set(df_meta['image_id'].values).intersection(df_train['image_name'].values)))\nprint('[\u2229 isic2019]:', len(set(df_meta['image_id'].values).intersection(df_gt['image'].values)))\nprint('[\u2229 slatmd]:', len(set(df_meta['image_id'].values).intersection(image_ids)))","0296f06c":"NEED_IMAGE_SAVE = True","0f20533c":"if not os.path.exists('.\/224x224-dataset-melanoma\/melanoma'):\n    os.makedirs('.\/224x224-dataset-melanoma\/melanoma')\n    \nif not os.path.exists('.\/224x224-dataset-melanoma\/other'):\n    os.makedirs('.\/224x224-dataset-melanoma\/other')","6e6dcc33":"dataset = {\n    'patient_id' : [],\n    'image_id': [],\n    'target': [],\n    'source': [],\n    'sex': [],\n    'age_approx': [],\n    'anatom_site_general_challenge': [],\n}\n\n\n# isic2020\ndf_train = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/train.csv', index_col='image_name')\nfor image_id, row in tqdm(df_train.iterrows(), total=df_train.shape[0]):\n    if image_id in dataset['image_id']:\n        continue\n    dataset['patient_id'].append(row['patient_id'])\n    dataset['image_id'].append(image_id)\n    dataset['target'].append(row['target'])\n    dataset['source'].append('ISIC20')\n    dataset['sex'].append(row['sex'])\n    dataset['age_approx'].append(row['age_approx'])\n    dataset['anatom_site_general_challenge'].append(row['anatom_site_general_challenge'])\n\n    if NEED_IMAGE_SAVE:\n        image = cv2.imread(f'..\/input\/siim-isic-melanoma-classification\/jpeg\/train\/{image_id}.jpg', cv2.IMREAD_COLOR)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        image = cv2.resize(image, (224,224), cv2.INTER_AREA)\n        dest = f'.\/224x224-dataset-melanoma\/other\/{image_id}.jpg'\n        if row['target']==1:\n            dest = f'.\/224x224-dataset-melanoma\/melanoma\/{image_id}.jpg'\n        cv2.imwrite(dest, image)\n\n# isic2019\ndf_gt = pd.read_csv('..\/input\/isic-2019\/ISIC_2019_Training_GroundTruth.csv', index_col='image')\ndf_meta = pd.read_csv('..\/input\/isic-2019\/ISIC_2019_Training_Metadata.csv', index_col='image')\nfor image_id, row in tqdm(df_meta.iterrows(), total=df_meta.shape[0]):\n    if image_id in dataset['image_id']:\n        continue\n    dataset['patient_id'].append(row['lesion_id'])\n    dataset['image_id'].append(image_id)\n    dataset['target'].append(int(df_gt.loc[image_id]['MEL']))\n    dataset['source'].append('ISIC19')\n    dataset['sex'].append(row['sex'])\n    dataset['age_approx'].append(row['age_approx'])\n    dataset['anatom_site_general_challenge'].append(\n        {'anterior torso': 'torso', 'posterior torso': 'torso'}.get(row['anatom_site_general'], row['anatom_site_general'])\n    )\n    \n    if NEED_IMAGE_SAVE:\n        image = cv2.imread(f'..\/input\/isic-2019\/ISIC_2019_Training_Input\/ISIC_2019_Training_Input\/{image_id}.jpg', cv2.IMREAD_COLOR)\n        image = cv2.resize(image, (224,224), cv2.INTER_AREA)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        dest = f'.\/224x224-dataset-melanoma\/other\/{image_id}.jpg'\n        if int(df_gt.loc[image_id]['MEL'])==1:\n            dest = f'.\/224x224-dataset-melanoma\/melanoma\/{image_id}.jpg'\n        cv2.imwrite(dest, image)\n\n\n# skin-lesion-analysis-toward-melanoma-detection\npaths = glob('..\/input\/skin-lesion-analysis-toward-melanoma-detection\/skin-lesions\/*\/*\/*.jpg')\nfor path in tqdm(paths, total=len(paths)):\n    diagnosis, image_id = path.split('\/')[-2:]\n    image_id = image_id[:-4]\n    \n    if image_id in dataset['image_id']:\n        continue\n    \n    target = int(diagnosis == 'melanoma')\n    dataset['patient_id'].append(np.nan)\n    dataset['image_id'].append(image_id)\n    dataset['target'].append(target)\n    dataset['source'].append('SLATMD')\n    dataset['sex'].append(np.nan)\n    dataset['age_approx'].append(np.nan)\n    dataset['anatom_site_general_challenge'].append(np.nan)\n    \n    if NEED_IMAGE_SAVE:\n        image = cv2.imread(path, cv2.IMREAD_COLOR)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        image = cv2.resize(image, (224,224), cv2.INTER_AREA)\n        dest = f'.\/224x224-dataset-melanoma\/other\/{image_id}.jpg'\n        if target==1:\n            dest = f'.\/224x224-dataset-melanoma\/melanoma\/{image_id}.jpg'\n        cv2.imwrite(dest, image)\n    \ndataset = pd.DataFrame(dataset)    ","01a8a73b":"dataset.head()","d38d8eb1":"dataset.to_csv('merged_data.csv', index=False)","f3e16768":"import numpy as np\nimport random\nimport pandas as pd\nfrom collections import Counter, defaultdict\n\ndef stratified_group_k_fold(X, y, groups, k, seed=None):\n    \"\"\" https:\/\/www.kaggle.com\/jakubwasikowski\/stratified-group-k-fold-cross-validation \"\"\"\n    labels_num = np.max(y) + 1\n    y_counts_per_group = defaultdict(lambda: np.zeros(labels_num))\n    y_distr = Counter()\n    for label, g in zip(y, groups):\n        y_counts_per_group[g][label] += 1\n        y_distr[label] += 1\n\n    y_counts_per_fold = defaultdict(lambda: np.zeros(labels_num))\n    groups_per_fold = defaultdict(set)\n\n    def eval_y_counts_per_fold(y_counts, fold):\n        y_counts_per_fold[fold] += y_counts\n        std_per_label = []\n        for label in range(labels_num):\n            label_std = np.std([y_counts_per_fold[i][label] \/ y_distr[label] for i in range(k)])\n            std_per_label.append(label_std)\n        y_counts_per_fold[fold] -= y_counts\n        return np.mean(std_per_label)\n    \n    groups_and_y_counts = list(y_counts_per_group.items())\n    random.Random(seed).shuffle(groups_and_y_counts)\n\n    for g, y_counts in tqdm(sorted(groups_and_y_counts, key=lambda x: -np.std(x[1])), total=len(groups_and_y_counts)):\n        best_fold = None\n        min_eval = None\n        for i in range(k):\n            fold_eval = eval_y_counts_per_fold(y_counts, i)\n            if min_eval is None or fold_eval < min_eval:\n                min_eval = fold_eval\n                best_fold = i\n        y_counts_per_fold[best_fold] += y_counts\n        groups_per_fold[best_fold].add(g)\n\n    all_groups = set(groups)\n    for i in range(k):\n        train_groups = all_groups - groups_per_fold[i]\n        test_groups = groups_per_fold[i]\n\n        train_indices = [i for i, g in enumerate(groups) if g in train_groups]\n        test_indices = [i for i, g in enumerate(groups) if g in test_groups]\n\n        yield train_indices, test_indices","d3277ca9":"%%time\n\ndf_folds = pd.read_csv(f'merged_data.csv')\ndf_folds['patient_id'] = df_folds['patient_id'].fillna(df_folds['image_id'])\ndf_folds['sex'] = df_folds['sex'].fillna('unknown')\ndf_folds['anatom_site_general_challenge'] = df_folds['anatom_site_general_challenge'].fillna('unknown')\ndf_folds['age_approx'] = df_folds['age_approx'].fillna(round(df_folds['age_approx'].mean()))\ndf_folds = df_folds.set_index('image_id')\n\ndef get_stratify_group(row):\n    stratify_group = row['sex']\n    stratify_group += f'_{row[\"anatom_site_general_challenge\"]}'\n    stratify_group += f'_{row[\"source\"]}'\n    stratify_group += f'_{row[\"target\"]}'\n    return stratify_group\n\ndf_folds['stratify_group'] = df_folds.apply(get_stratify_group, axis=1)\ndf_folds['stratify_group'] = df_folds['stratify_group'].astype('category').cat.codes","d244f95d":"%%time\n\ndf_folds.loc[:, 'fold'] = 0\n\nskf = stratified_group_k_fold(X=df_folds.index, y=df_folds['stratify_group'], groups=df_folds['patient_id'], k=5, seed=42)\n\nfor fold_number, (train_index, val_index) in enumerate(skf):\n    df_folds.loc[df_folds.iloc[val_index].index, 'fold'] = fold_number","f6a39017":"set(df_folds[df_folds['fold'] == 0]['patient_id'].values).intersection(df_folds[df_folds['fold'] == 1]['patient_id'].values)","1a27cb84":"df_folds[df_folds['fold'] == 0]['target'].hist();","3cb43fa1":"df_folds[df_folds['fold'] == 1]['target'].hist();","541454c0":"df_folds.to_csv('folds.csv')","484a527a":"# test isic2020\ndf_test = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/test.csv', index_col='image_name')\n\nfor image_id, row in tqdm(df_test.iterrows(), total=df_test.shape[0]):   \n    if NEED_IMAGE_SAVE:\n        image = cv2.imread(f'..\/input\/siim-isic-melanoma-classification\/jpeg\/test\/{image_id}.jpg', cv2.IMREAD_COLOR)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        image = cv2.resize(image, (224,224), cv2.INTER_AREA)\n        cv2.imwrite(f'kaggle\/working\/224x224-test\/{image_id}.jpg', image)","89e848c5":"import zipfile","041d087f":"def zipdir(path, ziph):\n    # ziph is zipfile handle\n    for root, dirs, files in os.walk(path):\n        for file in files:\n            if not file == 'all_data.zip':\n                ziph.write(os.path.join(root, file))","d82ebfeb":"zipf = zipfile.ZipFile('all_data.zip', 'w', zipfile.ZIP_DEFLATED)\nzipdir('\/kaggle\/working', zipf)\nzipf.close()","487c0ac6":"# Main Idea\n\nLets merge these datasets from [topic](https:\/\/www.kaggle.com\/c\/siim-isic-melanoma-classification\/discussion\/154296#864656) by [@andrewmvd](https:\/\/www.kaggle.com\/andrewmvd):\n\n---\n- [Melanoma Detection Dataset](https:\/\/www.kaggle.com\/wanderdust\/skin-lesion-analysis-toward-melanoma-detection)\n- [Skin Lesion Images for Melanoma Classification](https:\/\/www.kaggle.com\/andrewmvd\/isic-2019)\n- [Skin Cancer MNIST: HAM10000](https:\/\/www.kaggle.com\/kmader\/skin-cancer-mnist-ham10000)\n---\n\n- [SIIM-ISIC Melanoma Classification](https:\/\/www.kaggle.com\/c\/siim-isic-melanoma-classification\/data)\n","4e2b8edc":"## Test","71f8995b":"# SLATMD","2fc76ea9":"# Merge datasets & metadata","c5f8aa56":"# Skin Cancer MNIST: HAM10000 [Repeated]","2cefef86":"# isic 2019","5538bf1c":"# Stratify GroupKFold Splitting\n\nhttps:\/\/www.kaggle.com\/jakubwasikowski\/stratified-group-k-fold-cross-validation"}}