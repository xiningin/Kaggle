{"cell_type":{"52dab8f8":"code","f01b80a9":"code","b082cc03":"code","fe97b362":"code","ebc6dd81":"code","c45f2d62":"code","d30a2518":"code","d4d83879":"code","ffc22115":"code","ee51d5b9":"code","603e9992":"code","b5ed953b":"code","a8e64fcd":"code","067f5d40":"code","d08ace04":"code","2e7ddc9a":"code","1530997b":"code","68860c46":"code","29967467":"code","1216b1ba":"code","f7d0a79f":"code","c2fb3271":"code","b86f69dd":"code","403523fe":"code","61387c09":"code","0b7cac74":"markdown"},"source":{"52dab8f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f01b80a9":"# movies = pd.read_csv(\"..\/input\/movielens\/movies.csv\")\n# ratings = pd.read_csv(\"..\/input\/movielens\/ratings.csv\")","b082cc03":"movies = pd.read_csv(\"..\/input\/moviesbyresidents\/Movies  Ratings Dataset - Movies.csv\")\nratings = pd.read_csv(\"..\/input\/movies-residents-part-2\/Movies  Ratings Dataset - Ratings (1).csv\")","fe97b362":"ratings.drop('timestamp', axis=1, inplace=True)","ebc6dd81":"movies.head()","c45f2d62":"ratings.head()","d30a2518":"ratings['userId'].nunique(), ratings['movieId'].nunique()","d4d83879":"ratings.tail(20)","ffc22115":"ratings.columns","ee51d5b9":"mini_df = pd.DataFrame([[248, 19, 1],\n                       [248, 141, 1],\n                       [248, 223, 1]], columns=ratings.columns)\n\nratings = ratings.append(mini_df)","603e9992":"ratings.tail(10)","b5ed953b":"dict_userID = {}\ni = 0\nfor new_id, old_id in enumerate(set(ratings['userId'])):\n    dict_userID[old_id] = new_id","a8e64fcd":"ratings['new_userId'] = ratings['userId'].map(dict_userID)\nratings.tail(10)","067f5d40":"ratings[ratings['userId']==666]","d08ace04":"R_df = ratings.pivot(index='new_userId', columns='movieId', values='rating').fillna(0)\nR_df.head()","2e7ddc9a":"R = R_df.values\nuser_ratings_mean = np.mean(R, axis = 1)\nR_demeaned = R - user_ratings_mean.reshape(-1, 1)","1530997b":"from scipy.sparse.linalg import svds\nU, sigma, Vt = svds(R_demeaned, k = 50)","68860c46":"sigma = np.diag(sigma)","29967467":"all_user_predicted_ratings = np.dot(np.dot(U, sigma), Vt) + user_ratings_mean.reshape(-1, 1)\npreds_df = pd.DataFrame(all_user_predicted_ratings, columns = R_df.columns)","1216b1ba":"preds_df.head(10)","f7d0a79f":"preds_df.shape","c2fb3271":"def recommend_movies(predictions_df, userID, movies_df, original_ratings_df, num_recommendations=5):\n    \n    # Get and sort the user's predictions\n    user_row_number = userID # UserID starts at 1, not 0\n    sorted_user_predictions = predictions_df.iloc[user_row_number].sort_values(ascending=False)\n    \n    # Get the user's data and merge in the movie information.\n    user_data = original_ratings_df[original_ratings_df['new_userId'] == (userID)]\n    user_full = (user_data.merge(movies_df, how = 'left', left_on = 'movieId', right_on = 'movieId').\n                     sort_values(['rating'], ascending=False)\n                 )\n\n    print('User {0} has already rated {1} movies.'.format(userID, user_full.shape[0]))\n    print('Recommending the highest {0} predicted ratings movies not already rated.'.format(num_recommendations))\n    \n    # Recommend the highest predicted rating movies that the user hasn't seen yet.\n    recommendations = (movies_df[~movies_df['movieId'].isin(user_full['movieId'])].\n         merge(pd.DataFrame(sorted_user_predictions).reset_index(), how = 'left',\n               left_on = 'movieId',\n               right_on = 'movieId').\n         rename(columns = {user_row_number: 'Predictions'}).\n         sort_values('Predictions', ascending = False).\n                       iloc[:num_recommendations, :-1]\n                      )\n\n    return user_full, recommendations","b86f69dd":"already_rated, predictions = recommend_movies(preds_df, dict_userID[248], movies, ratings, 10)","403523fe":"already_rated.head(10)","61387c09":"predictions","0b7cac74":"# \u0420\u0443\u0447\u043d\u043e\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043e\u0446\u0435\u043d\u043e\u043a"}}