{"cell_type":{"9496d481":"code","f55a6c28":"code","7aa28500":"code","899c3d19":"code","2a07ba97":"code","da502282":"code","203c92c6":"code","76bdaab0":"code","f0a39eaf":"code","a5000ba9":"code","323614d3":"code","e3facdbe":"code","254d0ac7":"code","b86ea503":"code","6f92f265":"code","a1a7a274":"code","13bf4c6e":"code","25932e32":"code","28506585":"code","b71edba9":"code","c281c1a8":"code","1631cc25":"code","ed7f2021":"code","a43f872a":"code","4219a85a":"code","be05c711":"code","6c2aab07":"code","7819edc8":"code","9c3d71f9":"code","83e30d91":"code","2b19e004":"code","d351482e":"code","8a529a8c":"code","245fac2a":"code","5789857d":"code","6d9eb055":"code","90181076":"code","914dc519":"code","42af2706":"code","b9221df1":"code","9daa738a":"code","39523820":"code","871d7ca5":"code","80aa3dbb":"code","1c934ff1":"code","57c9f05e":"code","3c1d9778":"code","61b06f56":"code","38cf26b4":"code","990bae22":"code","7ef6f745":"code","c8cc5d41":"code","4a3609cd":"code","ebb28096":"code","cc34a08b":"code","16326bdf":"code","9863e4bd":"code","e5b71b4d":"code","11426d8b":"code","673aba82":"code","739ff22a":"code","eb8f2184":"code","a6748e46":"code","b6e04a44":"code","9a6b7549":"code","c0eb1acf":"code","f650d4ee":"code","8366402f":"code","054fac7b":"code","2a6d96bc":"code","dddf1744":"code","08ccc37a":"code","81977986":"code","c844ce7b":"code","ff53cbb1":"code","184a77bf":"code","14c065f8":"code","71489d49":"code","fa12281f":"code","4bf1aaaa":"markdown","4f07c63e":"markdown","496e9d67":"markdown","763141f4":"markdown","eeb339de":"markdown","376c81d6":"markdown","1d34328e":"markdown","9972e842":"markdown","70c756df":"markdown","78c51bce":"markdown","7c4d6457":"markdown","14f88c56":"markdown","c6a046ce":"markdown","e3fb5cf1":"markdown","5de1ebac":"markdown","3103e9d3":"markdown","4969e84d":"markdown","01405ea3":"markdown","53eefd7c":"markdown","e29e282f":"markdown","a73047f3":"markdown","f24b972c":"markdown","e74d297d":"markdown","c5c054af":"markdown","8e30997e":"markdown","8d45167b":"markdown","37086773":"markdown","100f9cf5":"markdown","7679443f":"markdown","444453ab":"markdown","2e524b4f":"markdown","24cf1217":"markdown","3b897d44":"markdown","80ea1113":"markdown","984208f5":"markdown","a0d6c038":"markdown","8cb1f05b":"markdown","949fd3e8":"markdown","31dd827f":"markdown","3f2ad8f9":"markdown","15d2a06b":"markdown","0c2af84e":"markdown","a5f1f76d":"markdown","f4cb48d3":"markdown","068b48dc":"markdown","bbd60555":"markdown","1417cb53":"markdown","42d40a6d":"markdown","7b4e999c":"markdown","dd10680b":"markdown","0854e2b9":"markdown","d707febb":"markdown","cc11d9f0":"markdown","6e8dc361":"markdown","9920b8df":"markdown","2872c92b":"markdown","16278975":"markdown","370de2ed":"markdown","e8c8a0fb":"markdown","b7d8fc1f":"markdown","6dd724b2":"markdown","ef1d0b08":"markdown","af3c2c64":"markdown","bf37305b":"markdown","a1cc9022":"markdown"},"source":{"9496d481":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","f55a6c28":"df=pd.read_csv('..\/input\/car-price-prediction\/CarPrice_Assignment.csv')\ndf.head()","7aa28500":"df.shape","899c3d19":"df.info()","2a07ba97":"df.describe()","da502282":"\ndf.drop('car_ID',axis=1,inplace=True)\ndf.head()","203c92c6":"print(df.isnull().values.any())","76bdaab0":"df.dtypes","f0a39eaf":"df['CarName']=df['CarName'].str.split(' ',expand=True)\ndf['CarName'].head()","a5000ba9":"df['CarName'].unique()","323614d3":"\ndf['CarName']=df['CarName'].replace({'maxda':'mazda',\n                                     'nissan':'Nissan',\n                                     'toyouta':'toyota',\n                                     'porcshce':'porsche',\n                                     'vokswagen':'volkswagen',\n                                     'vw':'volkswagen'\n                                     })","e3facdbe":"df['symboling']=df['symboling'].astype(str)\ndf['symboling'].head()","254d0ac7":"df.loc[df.duplicated()]","b86ea503":"cat_col=df.select_dtypes(include='object').columns\nnum_col=df.select_dtypes(exclude='object').columns\ndf_cat=df[cat_col]\ndf_num=df[num_col]","6f92f265":"df_cat.head(2)","a1a7a274":"df_num.head(2)","13bf4c6e":"df['CarName'].value_counts()","25932e32":"plt.figure(figsize=(10, 10))\nax=df['CarName'].value_counts().plot(kind='bar')\nplt.title(label='CarName')\nplt.xlabel(\"Names of the Car\",fontweight = 'bold')\nplt.ylabel(\"Count of Cars\",fontweight = 'bold')\nplt.show()","28506585":"ax=sns.pairplot(df[num_col])\nplt.show()","b71edba9":"plt.figure(figsize=(20, 15))\nplt.subplot(3,3,1)\nsns.boxplot(x = 'doornumber', y = 'price', data = df)\nplt.subplot(3,3,2)\nsns.boxplot(x = 'fueltype', y = 'price', data = df)\nplt.subplot(3,3,3)\nsns.boxplot(x = 'carbody', y = 'price', data = df)\nplt.subplot(3,3,4)\nsns.boxplot(x = 'drivewheel', y = 'price', data = df)\nplt.subplot(3,3,5)\nsns.boxplot(x = 'enginelocation', y = 'price', data = df)\nplt.subplot(3,3,6)\nsns.boxplot(x = 'cylindernumber', y = 'price', data = df)\nplt.subplot(3,3,7)\nsns.boxplot(x = 'enginetype', y = 'price', data = df)\nplt.subplot(3,3,8)\nsns.boxplot(x = 'fuelsystem', y = 'price', data = df)\nplt.subplot(3,3,9)\nsns.boxplot(x = 'aspiration', y = 'price', data = df)\nplt.show()","c281c1a8":"ax=df.groupby(['CarName'])['price'].mean().sort_values(ascending=False)\n\nplt.figure(figsize=(10, 10))\nax.plot.bar()\nplt.title('Car Company Name vs Average Price')\nplt.show()","1631cc25":"ax=df.groupby(['carbody'])['price'].mean().sort_values(ascending=False)\n\nplt.figure(figsize=(10, 10))\nax.plot.bar()\nplt.title('Car Body Name vs Average Price')\nplt.show()","ed7f2021":"df['price'] = df['price'].astype('int')\ndf_auto_temp = df.copy()\ngrouped = df_auto_temp.groupby(['CarName'])['price'].mean()\nprint(grouped)\ndf_auto_temp = df_auto_temp.merge(grouped.reset_index(), how='left', on='CarName')\nbins = [0,10000,20000,40000]\nlabel =['Budget_Friendly','Medium_Range','TopNotch_Cars']\ndf['Cars_Category'] = pd.cut(df_auto_temp['price_y'], bins, right=False, labels=label)\ndf.head()","a43f872a":"sig_col = ['price','Cars_Category','enginetype','fueltype', 'aspiration','carbody','cylindernumber', 'drivewheel',\n            'wheelbase','curbweight', 'enginesize', 'boreratio','horsepower', \n                    'citympg','highwaympg', 'carlength','carwidth']","4219a85a":"df=df[sig_col]","be05c711":"sig_cat_col=['Cars_Category','enginetype','fueltype','aspiration','carbody','cylindernumber','drivewheel']","6c2aab07":"dummies=pd.get_dummies(df[sig_cat_col])\nprint(dummies.shape)\ndummies.head()","7819edc8":"dummies=pd.get_dummies(df[sig_cat_col],drop_first=True)\nprint(dummies.shape)\ndummies.head()","9c3d71f9":"df=pd.concat([df,dummies],axis=1)","83e30d91":"df.drop(sig_cat_col,axis=1,inplace=True)\ndf.shape","2b19e004":"df","d351482e":"np.random.seed(0) \n\nfrom sklearn.model_selection import train_test_split\ndf_train, df_test = train_test_split(df, train_size=0.7, test_size = 0.3, random_state = 100)","8a529a8c":"df_train.head()","245fac2a":"from sklearn.preprocessing import StandardScaler \nscaler=StandardScaler()","5789857d":"sig_num_col = ['wheelbase','carlength','carwidth','curbweight','enginesize','boreratio','horsepower','citympg','highwaympg','price']","6d9eb055":"df_train[sig_num_col]=scaler.fit_transform(df_train[sig_num_col])","90181076":"df_train.head()","914dc519":"plt.figure(figsize=(20,20))\nsns.heatmap(df_train.corr(), cmap= 'RdYlGn')\nplt.show()","42af2706":"y_train=df_train.pop('price')","b9221df1":"x_train=df_train","9daa738a":"import statsmodels.api as sm\n\nx_train_copy = x_train","39523820":"x_train_copy1=sm.add_constant(x_train_copy['horsepower'])\n\n#1st model\nlr1=sm.OLS(y_train,x_train_copy1).fit()","871d7ca5":"lr1.params","80aa3dbb":"print(lr1.summary())","1c934ff1":"from sklearn.linear_model import LinearRegression\n\nlm = LinearRegression()\nlm.fit(x_train, y_train)","57c9f05e":"from sklearn.feature_selection import RFE\n\nrfe=RFE(lm,15)\nrfe=rfe.fit(x_train,y_train)","3c1d9778":"list(zip(x_train.columns,rfe.support_,rfe.ranking_))","61b06f56":"col_sup=x_train.columns[rfe.support_]\ncol_sup","38cf26b4":"x_train_rfe=x_train[col_sup]\nx_train_rfe","990bae22":"import statsmodels.api as sm\n\nx_train_rfec = sm.add_constant(x_train_rfe)\nlm_rfe = sm.OLS(y_train,x_train_rfec).fit()\n\n#Summary of linear model\nprint(lm_rfe.summary())","7ef6f745":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\nvif = pd.DataFrame()\nvif['Features'] = x_train_rfe.columns\nvif['VIF'] = [variance_inflation_factor(x_train_rfe.values, i) for i in range(x_train_rfe.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","c8cc5d41":"x_train_rfe1=x_train_rfe.drop('cylindernumber_twelve',axis=1)\n\nx_train_rfe1c=sm.add_constant(x_train_rfe1)\nlm_rfe1=sm.OLS(y_train,x_train_rfe1c).fit()\n\nprint(lm_rfe1.summary())","4a3609cd":"vif = pd.DataFrame()\nvif['Features'] = x_train_rfe1.columns\nvif['VIF'] = [variance_inflation_factor(x_train_rfe1.values, i) for i in range(x_train_rfe1.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","ebb28096":"x_train_rfe2=x_train_rfe1.drop('cylindernumber_six',axis=1)\n\nx_train_rfe2c=sm.add_constant(x_train_rfe2)\nlm_rfe2=sm.OLS(y_train,x_train_rfe2c).fit()\n\nprint(lm_rfe2.summary())","cc34a08b":"vif = pd.DataFrame()\nvif['Features'] = x_train_rfe2.columns\nvif['VIF'] = [variance_inflation_factor(x_train_rfe2.values, i) for i in range(x_train_rfe2.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","16326bdf":"x_train_rfe3=x_train_rfe2.drop('carbody_hardtop',axis=1)\n\nx_train_rfe3c=sm.add_constant(x_train_rfe3)\nlm_rfe3=sm.OLS(y_train,x_train_rfe3c).fit()\n\nprint(lm_rfe3.summary())","9863e4bd":"vif = pd.DataFrame()\nvif['Features'] = x_train_rfe3.columns\nvif['VIF'] = [variance_inflation_factor(x_train_rfe3.values, i) for i in range(x_train_rfe3.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","e5b71b4d":"x_train_rfe4=x_train_rfe3.drop('enginetype_ohc',axis=1)\n\nx_train_rfe4c=sm.add_constant(x_train_rfe4)\nlm_rfe4=sm.OLS(y_train,x_train_rfe4c).fit()\n\nprint(lm_rfe4.summary())","11426d8b":"vif = pd.DataFrame()\nvif['Features'] = x_train_rfe4.columns\nvif['VIF'] = [variance_inflation_factor(x_train_rfe4.values, i) for i in range(x_train_rfe4.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","673aba82":"x_train_rfe5=x_train_rfe4.drop('cylindernumber_five',axis=1)\n\nx_train_rfe5c=sm.add_constant(x_train_rfe5)\nlm_rfe5=sm.OLS(y_train,x_train_rfe5c).fit()\n\nprint(lm_rfe5.summary())","739ff22a":"vif = pd.DataFrame()\nvif['Features'] = x_train_rfe5.columns\nvif['VIF'] = [variance_inflation_factor(x_train_rfe5.values, i) for i in range(x_train_rfe5.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","eb8f2184":"x_train_rfe6=x_train_rfe5.drop('enginetype_ohcv',axis=1)\n\nx_train_rfe6c=sm.add_constant(x_train_rfe6)\nlm_rfe6=sm.OLS(y_train,x_train_rfe6c).fit()\n\nprint(lm_rfe6.summary())","a6748e46":"vif = pd.DataFrame()\nvif['Features'] = x_train_rfe6.columns\nvif['VIF'] = [variance_inflation_factor(x_train_rfe6.values, i) for i in range(x_train_rfe6.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","b6e04a44":"x_train_rfe7=x_train_rfe6.drop('curbweight',axis=1)\n\nx_train_rfe7c=sm.add_constant(x_train_rfe7)\nlm_rfe7=sm.OLS(y_train,x_train_rfe7c).fit()\n\nprint(lm_rfe7.summary())","9a6b7549":"vif = pd.DataFrame()\nvif['Features'] = x_train_rfe7.columns\nvif['VIF'] = [variance_inflation_factor(x_train_rfe7.values, i) for i in range(x_train_rfe7.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","c0eb1acf":"x_train_rfe8=x_train_rfe7.drop('cylindernumber_four',axis=1)\n\nx_train_rfe8c=sm.add_constant(x_train_rfe8)\nlm_rfe8=sm.OLS(y_train,x_train_rfe8c).fit()\n\nprint(lm_rfe8.summary())","f650d4ee":"vif = pd.DataFrame()\nvif['Features'] = x_train_rfe8.columns\nvif['VIF'] = [variance_inflation_factor(x_train_rfe8.values, i) for i in range(x_train_rfe8.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","8366402f":"x_train_rfe9=x_train_rfe8.drop('carbody_sedan',axis=1)\n\nx_train_rfe9c=sm.add_constant(x_train_rfe9)\nlm_rfe9=sm.OLS(y_train,x_train_rfe9c).fit()\n\nprint(lm_rfe9.summary())","054fac7b":"vif = pd.DataFrame()\nvif['Features'] = x_train_rfe9.columns\nvif['VIF'] = [variance_inflation_factor(x_train_rfe9.values, i) for i in range(x_train_rfe9.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","2a6d96bc":"x_train_rfe10=x_train_rfe9.drop('carbody_wagon',axis=1)\n\nx_train_rfe10c=sm.add_constant(x_train_rfe10)\nlm_rfe10=sm.OLS(y_train,x_train_rfe10c).fit()\n\nprint(lm_rfe10.summary())","dddf1744":"vif = pd.DataFrame()\nvif['Features'] = x_train_rfe10.columns\nvif['VIF'] = [variance_inflation_factor(x_train_rfe10.values, i) for i in range(x_train_rfe10.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","08ccc37a":"y_train_pred=lm_rfe10.predict(x_train_rfe10c)","81977986":"sns.distplot((y_train-y_train_pred),bins=20)\nplt.title('Error Term Analysis')\nplt.xlabel('Errors')\nplt.show()","c844ce7b":"df_test[sig_num_col]=scaler.transform(df_test[sig_num_col])\ndf_test.shape","ff53cbb1":"y_test=df_test.pop('price')\nx_test=df_test","184a77bf":"x_test_1=sm.add_constant(x_test)\n\nx_test_new=x_test_1[x_train_rfe10c.columns]","14c065f8":"y_pred=lm_rfe10.predict(x_test_new)","71489d49":"y_pred","fa12281f":"from sklearn.metrics import r2_score\n\nr2_score(y_test,y_pred)","4bf1aaaa":"checking if the dataframe has any missing values","4f07c63e":"significant columns from visualised date:\n*   symboling\n*   fueltype\n*   aspiration\n*   carbody\n*   drivewheel\n*   enginelocation\n*   wheelbase\n*   carlength\n*   carwidth\n*   curbweight\n*   enginetype\n*   boreratio\n*   horsepower\n*   peakrpm\n*   citympg\n*   highwaympg  \n*   enginesize\n*   cylindernumber\n*   Cars_Category\n\n","496e9d67":"splitting test set into x_test and ","763141f4":"# Data Preparation","eeb339de":"car name grouped with respect to their average prices","376c81d6":"thus, \n*   positive correlation with price : wheelbase, carlength, carwidth, curbweight, enginesize, horsepower, \n*   negative correlation with price : citympg, highwaympg\n\n\n","1d34328e":"adding constant","9972e842":"plotting histogram of the error terms","70c756df":"visualizing the different car names available","78c51bce":"understanding the dataframe","7c4d6457":"binning the car companies based on their average prices","14f88c56":"# Residual Analysis of train data","c6a046ce":"thus, we see jaguar has the highest average price","e3fb5cf1":"#Splitting train dataset into x_train and y_train","5de1ebac":"dropping the significant categorial columns as we have already made and added the dummy variables for the same in the dataframe","3103e9d3":"checking the correlation co-efficients to see which variables are highly correlated","4969e84d":"thus, we see that there are no duplicate values in the dataframe","01405ea3":"renaming the typing errors in Car Company Names\n\nsyntax : 'wrong one' : 'correct one'","53eefd7c":"car body grouped with respect to their average prices","e29e282f":"# Visualising the Data","a73047f3":"datafram columns and their respective datatypes","f24b972c":"checking which variables support RFE","e74d297d":"applying scaler() to all the columns except the 'dummy' variables","c5c054af":"Dropping curbweight beacuse its VIF is 8.1 and we want VIF less than 5 and hence rebuilding the model","8e30997e":"Dropping cylindernumber_five beacuse its p-value is 0.104 and we want p-value less than 0.05 and hence rebuilding the model","8d45167b":"Dropping enginetype_ohcv beacuse its p-value is 0.180 and we want p-value less than 0.05 and hence rebuilding the model","37086773":"dropping the car_ID as it is not affecting the car price","100f9cf5":"setting file path","7679443f":"Segregation of Numerical and Categorical Variables\/Columns","444453ab":"we can see that the R-squared value did not change significantly, thus we can go ahead and drop carbody_sedan","2e524b4f":"#Rescaling the features\nRescaling the data using Standardisation Scaling.\nScaling needs to be done on the significant num columns.\nThe significant categorical columns have already been converted into dummies ","24cf1217":"# Splitting the dataset into training and test sets","3b897d44":"pairplot, equivalent to correlation graph","80ea1113":"concatenating the dataframe with the dummy variables","984208f5":"checking for duplicated values","a0d6c038":"changing symboling to a string datatype from integer as it is mentioned in the dictionary excel file","8cb1f05b":"With the seed reset (every time), the same set of numbers will appear every time. We specify this so that the train and test data set always have the same rows, respectively\n\nWe divide the df into 70\/30 ratio","949fd3e8":"checking the unique car companies","31dd827f":"#Recursive Feature Elimination (RFE)\nas there are too many independent variabls, we will use RFE","3f2ad8f9":"# RMSE Score","15d2a06b":"# Reading and Understanding the Data","0c2af84e":"Dropping cylindernumber_twelve beacuse its p-value is 0.393 and we want p-value less than 0.05 and hence rebuilding the model","a5f1f76d":"dropping variables having:\n*   high p-value, high vif\n*   high p-value, low vif or low p-value, high vif\n*   low p-value, low vif\n\n\n\n","f4cb48d3":"selecting the variables which support RFE","068b48dc":"putting all subcategories into a single category","bbd60555":"thus, car body with hardtop has the highest average price","1417cb53":"# Conclusions\n*   R-squared and Adjusted R-squared - 0.912 and 0.909\n* p - values for all coefficients seems to be less than the significance level of 0.05 i.e all the predictors are statistically significant\n*   90% variance explained\n\n# Closing Statement : \nthus, we can say that the model is good enough to predict the car prices which explains the variance of data upto 90% and the model is significant.\n\n\n\n ","42d40a6d":"# Making Predictions Using the Model","7b4e999c":"predicting price of the training set","dd10680b":"Dropping carbody_hardtop beacuse its p-value is 0.238 and we want p-value less than 0.05 and hence rebuilding the model","0854e2b9":"making prediction","d707febb":"Dropping cylindernumber_six beacuse its p-value is 0.493 and we want p-value less than 0.05 and hence rebuilding the model","cc11d9f0":"# Cleaning the Data","6e8dc361":"checking both vif and p-value\n<br>\nDropping highly correlated variables and insignificant variables","9920b8df":"Dropping cylindernumber_four beacuse its VIF is 5.66 and we want VIF less than 5 and hence rebuilding the model","2872c92b":"avoiding dummy trap by removing the first column of each dummy variable","16278975":"creating dummy variables for sig_cat_col,\n<br>\nsig_cat_col -> significant categorical columns","370de2ed":"sig_num_col -> significant num columns","e8c8a0fb":"visualising the categorical data","b7d8fc1f":"Dropping enginetype_ohc beacuse its p-value is 0.110 and we want p-value less than 0.05 and hence rebuilding the model","6dd724b2":"updating the dataframe, including only the significant columns","ef1d0b08":"Dropping carbody_wagon beacuse its p-value is 0.315 and we want p-value less than 0.05 and hence rebuilding the model","af3c2c64":"creating x_train dataframe with RFE selected variables","bf37305b":"#Variance Inflation Factor (VIF)\nit gives a basic quantitative idea about how much the feature variables are correlated with each other. It is an extremely important parameter to test our linear model.\n\nvif values of variables should be less than 5 to be accepted","a1cc9022":"# Building Linear Model"}}