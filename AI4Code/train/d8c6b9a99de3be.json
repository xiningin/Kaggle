{"cell_type":{"584624f3":"code","76d255f0":"code","c15a8457":"code","2c40810b":"code","29da638a":"code","c97f2281":"code","be907ed6":"code","69b1457b":"code","a9ea008d":"code","d20a80d0":"code","91e220a3":"code","dc1d554e":"code","815056bb":"code","55f2baa9":"code","2bf97fbc":"code","1262a35d":"code","93f99bdc":"code","e9af3225":"code","e13554df":"code","1a448b49":"code","01f43f63":"code","c502dc5f":"markdown","fad18724":"markdown","1d873dba":"markdown","8873edde":"markdown","7b1e31ab":"markdown","5e643086":"markdown","434563d5":"markdown","394dcc23":"markdown","daa00026":"markdown","3c6be49d":"markdown"},"source":{"584624f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","76d255f0":"import time\nt0start = time.time()\n\nimport pandas as pd\nimport numpy as np\nimport os\nimport sys\n\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nmpl.rcParams['figure.dpi'] = 70\nplt.style.use('dark_background')\n\nimport seaborn as sns\n\nfrom sklearn.decomposition import PCA","c15a8457":"!pip install scanpy\nimport scanpy as sc\nimport anndata\n\n!pip install loompy # scanpy needs it to load loom files ","2c40810b":"str_data_inf = ' SCC9 ' # Cell type u2os\n","29da638a":"#fn = '\/kaggle\/input\/single-cell-rnaseq-data-related-to-cell-cycle\/u2os.loom'\nfn = '\/kaggle\/input\/single-cell-rna-sequencing-data-scc9-cell-line\/SCC9_UPPER_AERODIGESTIVE_TRACT_proc.h5ad'\n#fn = '\/kaggle\/input\/single-cell-rna-sequencing-data-scc9-cell-line\/SCC9_UPPER_AERODIGESTIVE_TRACT_raw.h5ad'\n\nimport time\nt0 = time.time()\nadata = sc.read_h5ad(fn)\nadata.obs['n.umi'] = np.asarray(adata.X.sum(axis = 1)).ravel()\nadata_orig = adata.copy()\nprint(np.round(time.time() - t0,1), 'seconds')\nadata","c97f2281":"import scipy\nif scipy.sparse.issparse(adata.X):\n    print(adata.X[:5,:5].toarra())\nelse:\n    print(adata.X[:5,:5])","be907ed6":"adata.obs['n.umi'] = np.asarray(adata.X.sum(axis = 1)).ravel()\n\nfig = plt.figure(figsize = (20,6)); c = 0\nc+=1; fig.add_subplot(1,2,c);\nplt.plot(np.sort(adata.obs['n.umi'])) \nplt.title('Expression per cell')\nplt.xlabel('cells sorted')\nplt.ylabel('Counts')\n\nc+=1; fig.add_subplot(1,2,c);\nplt.hist(np.sort(adata.obs['n.umi']), bins = 100) \nplt.title('Expression per cell')\n\nplt.show()\n\nadata.obs['n.umi'].describe()","69b1457b":"v = np.asarray(adata.X.sum(axis = 0)).ravel()\ndisplay(pd.Series(v).describe())\nv = np.log10(1+v)\nfig = plt.figure(figsize = (20,6)); c = 0\nc+=1; fig.add_subplot(1,2,c);\nplt.plot(np.sort(v)) \nplt.title('LOG10 Expression per gene')\nplt.xlabel('genes sorted')\nplt.ylabel('Log10 (1+Counts) ')\n\nc+=1; fig.add_subplot(1,2,c);\nplt.hist(np.sort(v), bins = 30) \nplt.title('LOG10 Expression per gene')\n\nplt.show()\n\npd.Series(v).describe()","a9ea008d":"v = np.asarray(adata.X.sum(axis = 0)).ravel()\nadata.var['counts'] = v\nadata.var.sort_values('counts',ascending = False ).head(50) # ['counts']","d20a80d0":"import scipy\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.decomposition import PCA\nimport time\nt0 = time.time()\nif scipy.sparse.issparse(adata.X):\n    reducer = TruncatedSVD(n_components=2, n_iter=7, random_state=42)\nelse:\n    reducer = PCA(n_components=2)\n    \nr = reducer.fit_transform(adata.X)\n\nfig = plt.figure(figsize = (25,12))\nplt.title(str_data_inf + ' PCA  n_cells: ' + str(adata.X.shape[0]) +\\\n            ' n_genes: ' + str(adata.X.shape[1])  + ' '  , fontsize = 20   )#' \nif 'n.umi' not in adata.obs.columns: \n    ax = sns.scatterplot(x=v1, y = v2)#,  hue= color_by)#, palette = color_palette )#, palette = \"viridis\")# sns.color_palette(\"viridis\", as_cmap=True),\n                        #)# ,   alpha = 0.8, marker = '.')#, )#, legend=None)\nelse:\n    color_by = adata.obs['n.umi'].values\n    ax = sns.scatterplot(x=r[:,0], y = r[:,1],  hue= color_by)#, palette = color_palette )#, palette = \"viridis\")# sns.color_palette(\"viridis\", as_cmap=True),\n                        #)# ,   alpha = 0.8, marker = '.')#, )#, legend=None)\n    plt.setp(ax.get_legend().get_texts(), fontsize='20') # for legend text\n    plt.setp(ax.get_legend().get_title(), fontsize='20') # for legend title\nplt.xlabel('PCA1' , fontsize = 20 )\nplt.ylabel('PCA2' , fontsize = 20 )\nplt.show()\nprint( np.round( time.time() - t0,1) , ' seconds passed ' ) ","91e220a3":"import scipy\nimport umap \nt0 = time.time()\nreducer = umap.UMAP()\nr = reducer.fit_transform(adata.X)\n\nfig = plt.figure(figsize = (25,12))\nplt.title(str_data_inf + ' UMAP n_cells: ' + str(adata.X.shape[0]) +\\\n            ' n_genes: ' + str(adata.X.shape[1])  + ' '  , fontsize = 20   )#' \nif 'n.umi' not in adata.obs.columns: \n    ax = sns.scatterplot(x=v1, y = v2)#,  hue= color_by)#, palette = color_palette )#, palette = \"viridis\")# sns.color_palette(\"viridis\", as_cmap=True),\n                        #)# ,   alpha = 0.8, marker = '.')#, )#, legend=None)\nelse:\n    color_by = adata.obs['n.umi'].values\n    ax = sns.scatterplot(x=r[:,0], y = r[:,1],  hue= color_by)#, palette = color_palette )#, palette = \"viridis\")# sns.color_palette(\"viridis\", as_cmap=True),\n                        #)# ,   alpha = 0.8, marker = '.')#, )#, legend=None)\n    plt.setp(ax.get_legend().get_texts(), fontsize='20') # for legend text\n    plt.setp(ax.get_legend().get_title(), fontsize='20') # for legend title\n\nplt.xlabel('UMAP1' , fontsize = 20 )\nplt.ylabel('UMAP2' , fontsize = 20 )\nplt.show()\nprint( np.round( time.time() - t0,1) , ' seconds passed ' ) ","dc1d554e":"import scipy\nimport umap \nt0 = time.time()\n#reducer = umap.UMAP()\nreducer = umap.UMAP(n_neighbors = 50,min_dist = 0.6)\n\nr = reducer.fit_transform(adata.X)\n\nfig = plt.figure(figsize = (25,12))\nplt.title(str_data_inf + ' UMAP(50,0.6) n_cells: ' + str(adata.X.shape[0]) +\\\n            ' n_genes: ' + str(adata.X.shape[1])  + ' '  , fontsize = 20   )#' \nax = sns.scatterplot(x=r[:,0],y=r[:,1])# ,   hue= color_by)#, alpha = 0.7, marker = '.', legend = None)\nplt.xlabel('UMAP1' , fontsize = 20 )\nplt.ylabel('UMAP2' , fontsize = 20 )\nplt.show()\nprint( np.round( time.time() - t0,1) , ' seconds passed ' ) ","815056bb":"plot_mode = 'PCA'# 'Phase_plot':\nn_x_subplots = 3\ngenes_processing_mode = 'discretize_3bins_'# 'median_binarize_'\n\nmask = np.ones( adata.X.shape[0]).astype(bool) # \n\nimport scipy\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.decomposition import PCA\nimport time\nt0 = time.time()\nif scipy.sparse.issparse(adata.X):\n    reducer = TruncatedSVD(n_components=2, n_iter=7, random_state=42)\nelse:\n    reducer = PCA(n_components=2)\n    \nr = reducer.fit_transform(adata.X)\n\nc = 0\nfor color_by_mode in  ['n.umi',#'cell_cycle_phase', #  'PCA1ALL', 'n.umi', 'threshold_binarize_5_PCA1ALL',\n    'E2F1','FOXM1']:#,'PCNA','TOP2A', 'CCNE1', 'CCNE2', 'CDK2', 'CCNB1','CCNB2','CCNB3','CCNA2',  ]: # , 'pct_counts_mt']:\n    if c % n_x_subplots == 0:\n        fig = plt.figure(figsize = (20,5) ); c = 0\n        plt.suptitle(str_data_inf + ' PCA  n_cells: ' + str(adata.X.shape[0]) +\\\n            ' n_genes: ' + str(adata.X.shape[1])  + ' '  , fontsize = 20   )#' \n        c = 0\n    c += 1; fig.add_subplot(1,n_x_subplots ,c)\n    plt.title(str(color_by_mode), fontsize = 20)\n    \n    color_by_field_name = color_by_mode\n    if color_by_mode in adata.obs:\n        color_by = (adata[mask].obs[color_by_field_name])\n    elif color_by_mode in adata.var.index:\n        I_gene = np.where(adata.var.index == color_by_mode)[0]\n        v = adata[mask].X[:,I_gene]\n        if scipy.sparse.issparse(adata.X):\n            v = np.asarray(v.toarray()).ravel()\n        if genes_processing_mode == 'median_binarize_':\n            median_loc = np.median( v  )\n            color_by = np.asarray (v  > median_loc ).ravel()\n        elif genes_processing_mode == 'discretize_3bins_':\n            t1 = np.percentile(v,33)    \n            t2 = np.percentile(v,66)\n            color_by = np.asarray (v  > t1 ).ravel().astype(int) + np.asarray (v  > t2 ).ravel().astype(int)\n        else:\n            color_by = v\n    elif 'median_binarize_' in color_by_mode:\n        color_by_field_name = color_by_mode[16:]\n        if color_by_field_name in adata.obs:\n            color_by = (adata[mask].obs[color_by_field_name]) > np.median( (adata.obs[color_by_field_name]) )\n        else: color_by_mode = None\n    elif 'threshold_binarize_' in color_by_mode:\n        color_by_field_name = color_by_mode.split('_')[3]\n        threshold_binarize = float( color_by_mode.split('_')[2] )\n        if color_by_field_name in adata.obs:\n            color_by = (adata[mask].obs[color_by_field_name]) > threshold_binarize\n        else: color_by_mode = None\n    else:\n        color_by_mode = None\n\n    v1 = r[:,0]\n    v2 = r[:,1]\n    if color_by_mode is None:\n        ax = sns.scatterplot(x=v1, y = v2)# ,  hue= color_by,   alpha = 0.8, marker = '.')#, legend=None)\n    else:\n        if color_by_field_name == 'cell_cycle_phase':\n            if len(np.unique(color_by)) == 3:\n                color_palette = ['red', 'green','blue' ]\n            else:\n                color_palette = \"viridis\"# sns.color_palette(\"tab10\")\n        else:\n            color_palette = \"viridis\"# sns.color_palette(\"tab10\")        #color_by = (adata.obs[color_by_field_name]) > np.median( adata.obs[color_by_field_name].values ) \n        ax = sns.scatterplot(x=v1, y = v2,  hue= color_by, palette = color_palette )#, palette = \"viridis\")# sns.color_palette(\"viridis\", as_cmap=True),\n                            #)# ,   alpha = 0.8, marker = '.')#, )#, legend=None)\n        plt.setp(ax.get_legend().get_texts(), fontsize='20') # for legend text\n        plt.setp(ax.get_legend().get_title(), fontsize='20') # for legend title\n\n        \nplt.show()\nprint( np.round( time.time() - t0,1) , ' seconds passed ' ) ","55f2baa9":"plot_mode = 'PCA'# 'Phase_plot':\nn_x_subplots = 3\ngenes_processing_mode = 'discretize_3bins_'# 'median_binarize_'\n\nmask = np.ones( adata.X.shape[0]).astype(bool) # \n\nimport scipy\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.decomposition import PCA\nimport time\nt0 = time.time()\nif scipy.sparse.issparse(adata.X):\n    reducer = TruncatedSVD(n_components=10, n_iter=7, random_state=42)\nelse:\n    reducer = PCA(n_components=10)\n    \nr = reducer.fit_transform(adata.X)\n\nc = 0\nfor i,j in [(0,1),(2,3),(3,4),(5,6)]:#,(1,3),(2,3),(3,4)]:\n    for color_by_mode in  ['n.umi',#'cell_cycle_phase', #  'PCA1ALL', 'n.umi', 'threshold_binarize_5_PCA1ALL',\n        'E2F1','FOXM1']:#,'PCNA','TOP2A', 'CCNE1', 'CCNE2', 'CDK2', 'CCNB1','CCNB2','CCNB3','CCNA2',  ]: # , 'pct_counts_mt']:\n        if c % n_x_subplots == 0:\n            fig = plt.figure(figsize = (20,5) ); c = 0\n            plt.suptitle(str_data_inf + ' PCA  n_cells: ' + str(adata.X.shape[0]) +\\\n                ' n_genes: ' + str(adata.X.shape[1])  + ' '  , fontsize = 20   )#' \n            c = 0\n        c += 1; fig.add_subplot(1,n_x_subplots ,c)\n        plt.title(str(color_by_mode) + ' PCA '+str(i)+','+str(j), fontsize = 20)\n\n        color_by_field_name = color_by_mode\n        if color_by_mode in adata.obs:\n            color_by = (adata[mask].obs[color_by_field_name])\n        elif color_by_mode in adata.var.index:\n            I_gene = np.where(adata.var.index == color_by_mode)[0]\n            v = adata[mask].X[:,I_gene]\n            if scipy.sparse.issparse(adata.X):\n                v = np.asarray(v.toarray()).ravel()\n            if genes_processing_mode == 'median_binarize_':\n                median_loc = np.median( v  )\n                color_by = np.asarray (v  > median_loc ).ravel()\n            elif genes_processing_mode == 'discretize_3bins_':\n                t1 = np.percentile(v,33)    \n                t2 = np.percentile(v,66)\n                color_by = np.asarray (v  > t1 ).ravel().astype(int) + np.asarray (v  > t2 ).ravel().astype(int)\n            else:\n                color_by = v\n        elif 'median_binarize_' in color_by_mode:\n            color_by_field_name = color_by_mode[16:]\n            if color_by_field_name in adata.obs:\n                color_by = (adata[mask].obs[color_by_field_name]) > np.median( (adata.obs[color_by_field_name]) )\n            else: color_by_mode = None\n        elif 'threshold_binarize_' in color_by_mode:\n            color_by_field_name = color_by_mode.split('_')[3]\n            threshold_binarize = float( color_by_mode.split('_')[2] )\n            if color_by_field_name in adata.obs:\n                color_by = (adata[mask].obs[color_by_field_name]) > threshold_binarize\n            else: color_by_mode = None\n        else:\n            color_by_mode = None\n\n        v1 = r[:,i]\n        v2 = r[:,j]\n        if color_by_mode is None:\n            ax = sns.scatterplot(x=v1, y = v2)# ,  hue= color_by,   alpha = 0.8, marker = '.')#, legend=None)\n        else:\n            if color_by_field_name == 'cell_cycle_phase':\n                if len(np.unique(color_by)) == 3:\n                    color_palette = ['red', 'green','blue' ]\n                else:\n                    color_palette = \"viridis\"# sns.color_palette(\"tab10\")\n            else:\n                color_palette = \"viridis\"# sns.color_palette(\"tab10\")        #color_by = (adata.obs[color_by_field_name]) > np.median( adata.obs[color_by_field_name].values ) \n            ax = sns.scatterplot(x=v1, y = v2,  hue= color_by, palette = color_palette )#, palette = \"viridis\")# sns.color_palette(\"viridis\", as_cmap=True),\n                                #)# ,   alpha = 0.8, marker = '.')#, )#, legend=None)\n            plt.setp(ax.get_legend().get_texts(), fontsize='20') # for legend text\n            plt.setp(ax.get_legend().get_title(), fontsize='20') # for legend title\n\n        \nplt.show()\nprint( np.round( time.time() - t0,1) , ' seconds passed ' ) ","2bf97fbc":"mask = np.ones( adata.X.shape[0]).astype(bool) # \n\ngene1 = 'E2F1' \ngene2 = 'FOXM1'\n\ncolor_by_mode = 'n.umi' # ,#'cell_cycle_phase', #  'PCA1ALL', 'n.umi', 'threshold_binarize_5_PCA1ALL',\nif color_by_mode in adata.obs:\n    color_by_field_name = color_by_mode\n    color_by = (adata[mask].obs[color_by_field_name].values)\nelse:\n    color_by_mode = None\n\n\n\nI_gene = np.where(adata.var.index == gene1)[0]\nv = adata[mask].X[:,I_gene]\nif scipy.sparse.issparse(adata.X):\n    v = np.asarray(v.toarray()).ravel()\nelse:\n    v = np.asarray(v).ravel()\n    \nv1 = v\nI_gene = np.where(adata.var.index == gene2)[0]\nv = adata[mask].X[:,I_gene]\nif scipy.sparse.issparse(adata.X):\n    v = np.asarray(v.toarray()).ravel()\nelse:\n    v = np.asarray(v).ravel()\nv2 = v\n\nfig = plt.figure(figsize = (20,10) ); c = 0\nplt.title(str_data_inf + ' Genes axes   n_cells: ' + str(adata.X.shape[0]) +\\\n    ' n_genes: ' + str(adata.X.shape[1])  + ' '  , fontsize = 20   )#' \n\nif color_by_mode is None:\n    ax = sns.scatterplot(x=v1,y=v2)# ,   hue= color_by)#, alpha = 0.7, marker = '.', legend = None)\nelse:\n    ax = sns.scatterplot(x=v1,y=v2,   hue= color_by)#, alpha = 0.7, marker = '.', legend = None)\n    plt.setp(ax.get_legend().get_texts(), fontsize='15') # for legend text\n    plt.setp(ax.get_legend().get_title(), fontsize='15') # for legend title    plt.xlabel('PCA1' , fontsize = 20 )\n    \nplt.xlabel(gene1,  fontsize = 20)\nplt.ylabel(gene2,  fontsize = 20)\nplt.show()   ","1262a35d":"mask = np.ones( adata.X.shape[0]).astype(bool) # \n\ngene1 = 'E2F1' \ngene2 = 'FOXM1'\nn_x_subplots = 4\n\nc = 0 \nfor gene1,gene2 in [ ('E2F1','FOXM1'), ('PCNA','TOP2A'), ('CCNB1', 'CCNB2'), ('CCNE1', 'CCNB1'),\n                   ('E2F1','PCNA'),('FOXM1','PCNA'), ('E2F1','TOP2A'),('FOXM1','TOP2A'), ]: \n    #,'PCNA','TOP2A', 'CCNE1', 'CCNE2', 'CDK2', 'CCNB1','CCNB2','CCNB3','CCNA2',  ]: # , 'pct_counts_mt']:\n    if gene1 not in adata.var.index : continue\n    if gene2 not in adata.var.index : continue\n        \n    color_by_mode = 'n.umi' # ,#'cell_cycle_phase', #  'PCA1ALL', 'n.umi', 'threshold_binarize_5_PCA1ALL',\n    if color_by_mode in adata.obs:\n        color_by_field_name = color_by_mode\n        color_by = (adata[mask].obs[color_by_field_name])\n    else:\n        color_by_mode = None\n    \n    if c % n_x_subplots == 0:\n        fig = plt.figure(figsize = (20,6) ); c = 0\n        plt.suptitle(str_data_inf + ' Genes axes   n_cells: ' + str(adata.X.shape[0]) +\\\n            ' n_genes: ' + str(adata.X.shape[1])  + ' color by '+ str(color_by_mode) , fontsize = 20   )#' \n        c = 0\n        \n    c += 1; fig.add_subplot(1,n_x_subplots ,c)\n    plt.title(gene1 + ' ' + gene2) # str(color_by_mode) + ' PCA '+str(i)+','+str(j))\n\n    plt.legend()\n    I_gene = np.where(adata.var.index == gene1)[0]\n    v = adata[mask].X[:,I_gene]\n    if scipy.sparse.issparse(adata.X):\n        v = np.asarray(v.toarray()).ravel()\n    else:\n        v = np.asarray(v).ravel()\n        \n    v1 = v\n    I_gene = np.where(adata.var.index == gene2)[0]\n    v = adata[mask].X[:,I_gene]\n    if scipy.sparse.issparse(adata.X):\n        v = np.asarray(v.toarray()).ravel()\n    else:\n        v = np.asarray(v).ravel()\n    v2 = v\n\n\n    if color_by_mode is None:\n        ax = sns.scatterplot(x=v1,y=v2)# ,   hue= color_by)#, alpha = 0.7, marker = '.', legend = None)\n    else:\n        ax = sns.scatterplot(x=v1,y=v2,   hue= color_by)#, alpha = 0.7, marker = '.', legend = None)\n        plt.setp(ax.get_legend().get_texts(), fontsize='15') # for legend text\n        plt.setp(ax.get_legend().get_title(), fontsize='15') # for legend title    plt.xlabel('PCA1' , fontsize = 20 )\n        ax.legend().set_visible(False)\n\n    plt.xlabel(gene1,  fontsize = 20)\n    plt.ylabel(gene2,  fontsize = 20)\nplt.show()  ","93f99bdc":"mask = np.ones( adata.X.shape[0]).astype(bool) \nt0 = time.time()\ncorr_matr = np.corrcoef(adata[mask].X.T) # Hint - use numpy , pandas is MUCH SLOWER   (df.corr() )\nprint('Calculated correlation matrix. Shape: ',corr_matr.shape,'  seconds passed:' , np.round( time.time() - t0,1) )\nprint(np.min(corr_matr ), 'minimal correlation' )\ncorr_matr_abs = np.abs( corr_matr )\nprint(np.mean(corr_matr_abs ), 'average absolute correlation' )\nprint(np.median(corr_matr_abs), 'median absolute correlation' )\nprint(np.min(corr_matr_abs ), 'min absolute correlation' )\nprint(np.std(corr_matr_abs ), 'std absolute correlation' )","e9af3225":"v = corr_matr.flatten()\nplt.figure(figsize=(14,8))\nt0 = time.time()\nplt.hist(v, bins = 50)\nplt.title('correlation coefficients distribution')\nplt.show()\nprint(time.time() - t0, 'seconds passed')\n\nprint(np.min(corr_matr ), 'minimal correlation' )\nprint(np.mean(corr_matr_abs ), 'average absolute correlation' )\nprint(np.median(corr_matr_abs), 'median absolute correlation' )\nprint(np.min(corr_matr_abs ), 'min absolute correlation' )\nprint(np.std(corr_matr_abs ), 'std absolute correlation' )\nfor t in [0.5,0.6, 0.7,0.8,0.9,0.95,0.97,0.98,.99]:\n    print( ((np.abs(v) < 0.99999999) & (np.abs(v) > t)).sum()\/2 , 'number of pairs correlated more than', t  )\nv.shape","e13554df":"t0=time.time()\nw,v = np.linalg.eig(corr_matr[:2000,:2000])\nprint(time.time()-t0, 'seconds passed')\nw = np.real(w.ravel())\nw = np.sort(w)[::-1]\nplt.plot(w,'*-')\nplt.title('Eigenvalues of correlation matrix ')\nplt.show()","1a448b49":"a,b = np.where( np.triu(np.abs(corr_matr),1) > 0.9 )\n\nd = pd.DataFrame()\nfor i in range(len(a)):\n    d.loc[i,'Gene1'] = adata.var.index[a[i]] \n    d.loc[i,'Gene2'] = adata.var.index[b[i]] \n    d.loc[i,'Correlation'] = corr_matr[a[i],b[i]]\n    d.loc[i,'Correlation Abs'] = np.abs( corr_matr[a[i],b[i]] )\n    \nd.sort_values('Correlation Abs',ascending = False).head(30)","01f43f63":"print(np.round(time.time()-t0start,1),  np.round( (time.time()-t0start)\/60,1),  np.round( (time.time()-t0start)\/3600,1), \n      'seconds, munutes, hours  passed')","c502dc5f":"## PCA colored by genes","fad18724":"# Correlation analysis","1d873dba":"## UMAP","8873edde":"# Visualizations","7b1e31ab":"## Expression per gene","5e643086":"# EDA","434563d5":"## PCA","394dcc23":"## Different axes PCA colored by genes","daa00026":"## Plots in genes axes","3c6be49d":"## Expressions per cells"}}