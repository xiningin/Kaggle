{"cell_type":{"73258260":"code","0f0fa7bd":"code","75a556f0":"code","b6ee4bd1":"code","b9535979":"code","68425960":"code","ea4cf734":"code","cc06cb1c":"code","38a5910f":"code","48eac151":"code","e4c127ce":"code","6cd4cb20":"code","8c9037c6":"code","fc8f710e":"code","1e5c1704":"code","ba717062":"code","abdfb09e":"code","c0fd13d6":"code","7b310e57":"code","4f0716c7":"code","82da4739":"code","1e54a131":"code","aa577ccc":"code","e5757a59":"code","7ae4f0c1":"code","b68a8483":"code","3e42aa35":"code","6e97d8f1":"code","2b8cc784":"code","c7b9836b":"code","cf22a8bb":"code","4d02d857":"code","75b34137":"code","4b62d1d0":"code","810a2abb":"code","c071df37":"code","8191e918":"markdown","7c995844":"markdown","3e10feef":"markdown","93eb798d":"markdown","fb3f7635":"markdown","503d57c5":"markdown","f57a00eb":"markdown","c6df65fc":"markdown","f3d87dbf":"markdown","ca639551":"markdown","2788e6ab":"markdown","4b54ea5c":"markdown","185d9ec1":"markdown","ba2f75fb":"markdown","d5b9759a":"markdown","7ace32c6":"markdown","bb7a6561":"markdown","987bd9fb":"markdown","04e55470":"markdown","0c163dfa":"markdown","6d29b870":"markdown","7309647a":"markdown","c890a076":"markdown","8701f3f6":"markdown","10728bcd":"markdown","4356f521":"markdown","ea27e98a":"markdown","4e633048":"markdown"},"source":{"73258260":"import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import NullFormatter\nimport pandas as pd\nimport numpy as np\nimport matplotlib.ticker as ticker\nfrom sklearn import preprocessing\n%matplotlib inline","0f0fa7bd":"df = pd.read_csv('..\/input\/loan-defaulter-prediction-dataset\/loan_train.csv')\ndf.head()","75a556f0":"df.shape","b6ee4bd1":"df['due_date'] = pd.to_datetime(df['due_date'])\ndf['effective_date'] = pd.to_datetime(df['effective_date'])\ndf.head()","b9535979":"df['loan_status'].value_counts()","68425960":"import seaborn as sns\n\nbins = np.linspace(df.Principal.min(), df.Principal.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'Principal', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","ea4cf734":"bins = np.linspace(df.age.min(), df.age.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'age', bins=bins, ec=\"k\")\n\ng.axes[-1].legend()\nplt.show()","cc06cb1c":"df['dayofweek'] = df['effective_date'].dt.dayofweek\nbins = np.linspace(df.dayofweek.min(), df.dayofweek.max(), 10)\ng = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\ng.map(plt.hist, 'dayofweek', bins=bins, ec=\"k\")\ng.axes[-1].legend()\nplt.show()\n","38a5910f":"df['weekend'] = df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\ndf.head()","48eac151":"df.groupby(['Gender'])['loan_status'].value_counts(normalize=True)","e4c127ce":"df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\ndf.head()","6cd4cb20":"df.groupby(['education'])['loan_status'].value_counts(normalize=True)","8c9037c6":"df[['Principal','terms','age','Gender','education']].head()","fc8f710e":"Feature = df[['Principal','terms','age','Gender','weekend']]\n\n#Important feature of pandas - get dummies\nFeature = pd.concat([Feature,pd.get_dummies(df['education'])], axis=1)\nFeature.drop(['Master or Above'], axis = 1,inplace=True)\nFeature.head()\n","1e5c1704":"X = Feature\nX[0:5]","ba717062":"y = df['loan_status'].values\ny[0:5]","abdfb09e":"X= preprocessing.StandardScaler().fit(X).transform(X)\nX[0:5]","c0fd13d6":"# We split the X into train and test to find k using scikit-learn\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","7b310e57":"# Model\nfrom sklearn.neighbors import KNeighborsClassifier\nk = 3\n#To train the model and predict the outcome  \nkNN_model = KNeighborsClassifier(n_neighbors=k).fit(X_train,y_train)\nkNN_model","4f0716c7":"# Check\nyhat = kNN_model.predict(X_test)\nyhat[0:5]","82da4739":"# Best k\nKs=15\nmean_acc=np.zeros((Ks-1))\nstd_acc=np.zeros((Ks-1))\nConfustionMx=[];\nfor n in range(1,Ks):\n    \n#Train Model and Predict  \n    kNN_model = KNeighborsClassifier(n_neighbors=n).fit(X_train,y_train)\n    yhat = kNN_model.predict(X_test)\n    \n    \n    mean_acc[n-1]=np.mean(yhat==y_test);\n    \n    std_acc[n-1]=np.std(yhat==y_test)\/np.sqrt(yhat.shape[0])\nmean_acc","1e54a131":"# Building the model again, using k=7\nfrom sklearn.neighbors import KNeighborsClassifier\nk = 7\n#Train Model and Predict  \nkNN_model = KNeighborsClassifier(n_neighbors=k).fit(X_train,y_train)\nkNN_model","aa577ccc":"from sklearn.tree import DecisionTreeClassifier\nDT_model = DecisionTreeClassifier(criterion=\"entropy\", max_depth = 4)\nDT_model.fit(X_train,y_train)\nDT_model","e5757a59":"yhat = DT_model.predict(X_test)\nyhat","7ae4f0c1":"from sklearn import svm\nSVM_model = svm.SVC()\nSVM_model.fit(X_train, y_train)","b68a8483":"\nyhat = SVM_model.predict(X_test)\nyhat","3e42aa35":"from sklearn.linear_model import LogisticRegression\nLR_model = LogisticRegression(C=0.01).fit(X_train,y_train)\nLR_model","6e97d8f1":"yhat = LR_model.predict(X_test)\nyhat","2b8cc784":"from sklearn.metrics import jaccard_similarity_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import log_loss","c7b9836b":"test_df = pd.read_csv('..\/input\/loan-defaulter-prediction-dataset\/loan_train.csv')\ntest_df.head()","cf22a8bb":"## Preprocessing\ntest_df['due_date'] = pd.to_datetime(test_df['due_date'])\ntest_df['effective_date'] = pd.to_datetime(test_df['effective_date'])\ntest_df['dayofweek'] = test_df['effective_date'].dt.dayofweek\ntest_df['weekend'] = test_df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\ntest_df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\ntest_Feature = test_df[['Principal','terms','age','Gender','weekend']]\ntest_Feature = pd.concat([test_Feature,pd.get_dummies(test_df['education'])], axis=1)\ntest_Feature.drop(['Master or Above'], axis = 1,inplace=True)\ntest_X = preprocessing.StandardScaler().fit(test_Feature).transform(test_Feature)\ntest_X[0:5]","4d02d857":"test_y = test_df['loan_status'].values\ntest_y[0:5]","75b34137":"knn_yhat = kNN_model.predict(test_X)\nprint(\"KNN Jaccard index: %.2f\" % jaccard_similarity_score(test_y, knn_yhat))\nprint(\"KNN F1-score: %.2f\" % f1_score(test_y, knn_yhat, average='weighted') )","4b62d1d0":"DT_yhat = DT_model.predict(test_X)\nprint(\"DT Jaccard index: %.2f\" % jaccard_similarity_score(test_y, DT_yhat))\nprint(\"DT F1-score: %.2f\" % f1_score(test_y, DT_yhat, average='weighted') )","810a2abb":"SVM_yhat = SVM_model.predict(test_X)\nprint(\"SVM Jaccard index: %.2f\" % jaccard_similarity_score(test_y, SVM_yhat))\nprint(\"SVM F1-score: %.2f\" % f1_score(test_y, SVM_yhat, average='weighted') )","c071df37":"LR_yhat = LR_model.predict(test_X)\nLR_yhat_prob = LR_model.predict_proba(test_X)\nprint(\"LR Jaccard index: %.2f\" % jaccard_similarity_score(test_y, LR_yhat))\nprint(\"LR F1-score: %.2f\" % f1_score(test_y, LR_yhat, average='weighted') )\nprint(\"LR LogLoss: %.2f\" % log_loss(test_y, LR_yhat_prob))","8191e918":"## Data visualization and pre-processing","7c995844":"Normalizing data based on standardscalar model - with mean = 0 and SD = 1","3e10feef":"86 % of female pay there loans while only 73 % of males pay there loan\n\nConverting male to 0 and female to 1:","93eb798d":"### Support Vector Machine","fb3f7635":"## Classification","503d57c5":"We load a dataset using Pandas library, and apply the following algorithms, and find the best one for this specific dataset by accuracy evaluation methods. The algorithms are:\n\n* KNN\n* Decision Tree\n* SVM\n* Logistic Regression","f57a00eb":"## Model Evaluation using Test set","c6df65fc":"Gender:","f3d87dbf":"What are our lables?","ca639551":"### K Nearest Neighbor(KNN)","2788e6ab":"### Load test set for evaluation","4b54ea5c":"Notice: We should find the best k to build the model with the best accuracy.","185d9ec1":"### Decision Tree","ba2f75fb":"| Algorithm          | Jaccard | F1-score | LogLoss |\n|--------------------|---------|----------|---------|\n| KNN                | 0.67    | 0.63     | NA      |\n| Decision Tree      | 0.72    | 0.74     | NA      |\n| SVM                | 0.80    | 0.76     | NA      |\n| LogisticRegression | 0.74    | 0.66     | 0.57    |","d5b9759a":"### After complete evaluation of the models using the 4 above said algorithms, the SVM - Support Vector Machine holds the highest accuracy rate of 80% and 76% in both the evaluation models say Jaccard Index and F1-Score.","7ace32c6":"## Feature selection","bb7a6561":"We see that people who get the loan at the end of the week dont pay it off, so lets use Feature binarization to set a threshold values less then day 4","987bd9fb":"## Pre-processing: Feature selection\/extraction","04e55470":"### Lets look at the day of the week people get the loan","0c163dfa":"## Converting Categorical features to numerical values","6d29b870":"## Report\nYou should be able to report the accuracy of the built model using different evaluation metrics:](http:\/\/)","7309647a":"## Normalize Data","c890a076":"### Converting categorical varables to binary variables and append them to the feature Data Frame","8701f3f6":"### Convert to date time object","10728bcd":"This dataset is about loans. The __Loan_train.csv__ data set includes details of 346 customers whose loan are already paid off or defaulted. It includes following fields:\n\n| Field          | Description                                                                           |\n|----------------|---------------------------------------------------------------------------------------|\n| Loan_status    | Whether a loan is paid off on in collection                                           |\n| Principal      | Basic principal loan amount at the                                                    |\n| Terms          | Origination terms which can be weekly (7 days), biweekly, and monthly payoff schedule |\n| Effective_date | When the loan got originated and took effects                                         |\n| Due_date       | Since it\u2019s one-time payoff schedule, each loan has one single due date                |\n| Age            | Age of applicant                                                                      |\n| Education      | Education of applicant                                                                |\n| Gender         | The gender of applicant                                                               |\n","4356f521":"### Loan status is grouped based on levels of education","ea27e98a":"### Logistic Regression","4e633048":"Lets define feature sets, X:"}}