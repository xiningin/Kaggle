{"cell_type":{"fa3c45aa":"code","14cf4442":"code","cb49b5e2":"code","2afb7830":"code","50e3957a":"code","4117774c":"code","84d62d09":"code","d3d6096e":"code","a7014b8c":"code","01aa81fe":"code","857478ca":"code","0816d3c7":"code","0c459156":"code","c6d154a6":"code","e55cd53a":"code","0defb202":"code","e90bb89f":"code","1eed665f":"code","4e62d3a6":"code","09baa3ec":"code","1a64ac67":"code","329319bb":"code","83c99698":"code","247233ff":"code","0988d739":"code","46733349":"code","05f725ba":"code","edca6660":"code","bc2a981a":"code","510eb895":"code","40fb5575":"code","c702189d":"code","1b4384a3":"code","c91618a0":"code","a3a2a081":"code","765b16cb":"code","a2a073f4":"code","49796051":"code","a346370c":"code","68180f09":"code","95ed6104":"code","2ce5ce62":"code","3e103682":"code","e28a2dc5":"code","63b9bbe7":"code","e2314d8a":"code","97ca9727":"code","ef7e5d58":"code","af09feba":"markdown","0e8da864":"markdown","f836df27":"markdown","2074a9eb":"markdown","7ebbd88e":"markdown","56f7d23d":"markdown","440dcc2d":"markdown","9e8a5618":"markdown","bae91ab1":"markdown","2dc81715":"markdown","821f9a03":"markdown","d4a1b0af":"markdown","d7706dd9":"markdown","487f81a0":"markdown","42a9dbb3":"markdown","2052d894":"markdown","35a6d580":"markdown","8f65acc7":"markdown","9f805d6c":"markdown","44b5a261":"markdown","0de55e5e":"markdown","674680e2":"markdown","9ae2080b":"markdown","9ccd9195":"markdown","b6c15594":"markdown","34664113":"markdown","22e07f99":"markdown","0248444c":"markdown","11992ddc":"markdown","8a4d04ac":"markdown","521c2452":"markdown","3a8448fb":"markdown","4250dc75":"markdown"},"source":{"fa3c45aa":"# Change this to True for full dataset and learning\nCOMPLETE_RUN = False","14cf4442":"import numpy as np\nnp.random.seed(1001)\n\nimport os\nimport shutil\nimport warnings\n\nimport IPython\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom tqdm import tqdm_notebook\nfrom sklearn.model_selection import StratifiedKFold\n\n%matplotlib inline\nmatplotlib.style.use('ggplot')\nwarnings.filterwarnings(\"ignore\", category=FutureWarning) ","cb49b5e2":"os.listdir('..\/input\/')","2afb7830":"train = pd.read_csv(\"..\/input\/train_curated.csv\")\ntest = pd.read_csv(\"..\/input\/sample_submission.csv\")","50e3957a":"train.sample(10)","4117774c":"test.sample(5)","84d62d09":"print(\"Number of train examples=\", train.shape[0], \"  Number of classes=\", len(set(train.labels)))\nprint(\"Number of test examples=\", test.shape[0], \"  Number of classes=\", len(set(test.columns[1:])))","d3d6096e":"train = train[train.labels.isin(test.columns[1:])]\nprint(len(train))","a7014b8c":"category_group = train.groupby(['labels']).count()\ncategory_group.columns = ['counts']\nprint(len(category_group))","01aa81fe":"plot = category_group.sort_values(ascending=True, by='counts').plot(\n    kind='barh', \n    title=\"Number of Audio Samples per Category\", \n    color='deeppink', \n    figsize=(15,20))\nplot.set_xlabel(\"Category\")\nplot.set_ylabel(\"Number of Samples\");","857478ca":"print('Minimum samples per category = ', min(train.labels.value_counts()))\nprint('Maximum samples per category = ', max(train.labels.value_counts()))","0816d3c7":"import IPython.display as ipd  # To play sound in the notebook\nfname = '..\/input\/train_curated\/0019ef41.wav'   # Raindrop\nipd.Audio(fname)","0c459156":"# Using wave library\nimport wave\nwav = wave.open(fname)\nprint(\"Sampling (frame) rate = \", wav.getframerate())\nprint(\"Total samples (frames) = \", wav.getnframes())\nprint(\"Duration = \", wav.getnframes()\/wav.getframerate())","c6d154a6":"# Using scipy\nfrom scipy.io import wavfile\nrate, data = wavfile.read(fname)\nprint(\"Sampling (frame) rate = \", rate)\nprint(\"Total samples (frames) = \", data.shape)\nprint(data)","e55cd53a":"plt.plot(data, '-', );","0defb202":"plt.figure(figsize=(16, 4))\nplt.plot(data[:500], '.'); plt.plot(data[:500], '-');","e90bb89f":"train['nframes'] = train['fname'].apply(lambda f: wave.open('..\/input\/train_curated\/' + f).getnframes())\ntest['nframes'] = test['fname'].apply(lambda f: wave.open('..\/input\/test\/' + f).getnframes())","1eed665f":"train.head()","4e62d3a6":"idx_sel = category_group.sort_values(ascending=True, by='counts').index[-25:]\n_, ax = plt.subplots(figsize=(20, 4))\nsns.violinplot(ax=ax, x=\"labels\", y=\"nframes\", data=train[(train.labels.isin(idx_sel).values)])\nplt.xticks(rotation=90)\nplt.title('Distribution of audio frames, per label', fontsize=16)\nplt.show()","09baa3ec":"fig, ax = plt.subplots(2, 1, figsize=(16,8))\ntrain.nframes.hist(bins=100, grid=True, rwidth=0.5, ax=ax[0], color='deeppink')\ntest.nframes.hist(bins=100, grid=True, rwidth=0.5, ax=ax[1], color='darkslateblue')\nax[0].set_xlim(0, 2700000)\nax[1].set_xlim(0, 2700000)\nplt.suptitle('Frame Length Distribution in train and test', ha='center', fontsize='large');","1a64ac67":"train.query(\"nframes > 2500000\")","329319bb":"abnormal_length = 2538889\n\nabnormal_fnames = train.loc[train.nframes == abnormal_length, 'fname'].values[0]\nipd.Audio( '..\/input\/train_curated\/' + abnormal_fnames)","83c99698":"import librosa\nimport numpy as np\nimport scipy\nfrom keras import losses, models, optimizers\nfrom keras.activations import relu, softmax\nfrom keras.callbacks import (EarlyStopping, LearningRateScheduler,\n                             ModelCheckpoint, TensorBoard, ReduceLROnPlateau)\nfrom keras.layers import (Convolution1D, Dense, Dropout, GlobalAveragePooling1D, \n                          GlobalMaxPool1D, Input, MaxPool1D, concatenate)\nfrom keras.utils import Sequence, to_categorical","247233ff":"class Config(object):\n    def __init__(self,\n                 sampling_rate=16000, audio_duration=2, \n                 n_classes=len(category_group),\n                 use_mfcc=False, n_folds=10, learning_rate=0.0001, \n                 max_epochs=50, n_mfcc=20):\n        self.sampling_rate = sampling_rate\n        self.audio_duration = audio_duration\n        self.n_classes = n_classes\n        self.use_mfcc = use_mfcc\n        self.n_mfcc = n_mfcc\n        self.n_folds = n_folds\n        self.learning_rate = learning_rate\n        self.max_epochs = max_epochs\n\n        self.audio_length = self.sampling_rate * self.audio_duration\n        if self.use_mfcc:\n            self.dim = (self.n_mfcc, 1 + int(np.floor(self.audio_length\/512)), 1)\n        else:\n            self.dim = (self.audio_length, 1)","0988d739":"class DataGenerator(Sequence):\n    def __init__(self, config, data_dir, list_IDs, labels=None, \n                 batch_size=64, preprocessing_fn=lambda x: x):\n        self.config = config\n        self.data_dir = data_dir\n        self.list_IDs = list_IDs\n        self.labels = labels\n        self.batch_size = batch_size\n        self.preprocessing_fn = preprocessing_fn\n        self.on_epoch_end()\n        self.dim = self.config.dim\n\n    def __len__(self):\n        return int(np.ceil(len(self.list_IDs) \/ self.batch_size))\n\n    def __getitem__(self, index):\n        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n        list_IDs_temp = [self.list_IDs[k] for k in indexes]\n        return self.__data_generation(list_IDs_temp)\n\n    def on_epoch_end(self):\n        self.indexes = np.arange(len(self.list_IDs))\n\n    def __data_generation(self, list_IDs_temp):\n        cur_batch_size = len(list_IDs_temp)\n        X = np.empty((cur_batch_size, *self.dim))\n\n        input_length = self.config.audio_length\n        for i, ID in enumerate(list_IDs_temp):\n            file_path = self.data_dir + ID\n            \n            # Read and Resample the audio\n            data, _ = librosa.core.load(file_path, sr=self.config.sampling_rate,\n                                        res_type='kaiser_fast')\n\n            # Random offset \/ Padding\n            if len(data) > input_length:\n                max_offset = len(data) - input_length\n                offset = np.random.randint(max_offset)\n                data = data[offset:(input_length+offset)]\n            else:\n                if input_length > len(data):\n                    max_offset = input_length - len(data)\n                    offset = np.random.randint(max_offset)\n                else:\n                    offset = 0\n                data = np.pad(data, (offset, input_length - len(data) - offset), \"constant\")\n                \n            # Normalization + Other Preprocessing\n            if self.config.use_mfcc:\n                data = librosa.feature.mfcc(data, sr=self.config.sampling_rate,\n                                                   n_mfcc=self.config.n_mfcc)\n                data = np.expand_dims(data, axis=-1)\n            else:\n                data = self.preprocessing_fn(data)[:, np.newaxis]\n            X[i,] = data\n\n        if self.labels is not None:\n            y = np.empty(cur_batch_size, dtype=int)\n            for i, ID in enumerate(list_IDs_temp):\n                y[i] = self.labels[ID]\n            return X, to_categorical(y, num_classes=self.config.n_classes)\n        else:\n            return X","46733349":"def audio_norm(data):\n    max_data = np.max(data)\n    min_data = np.min(data)\n    data = (data-min_data)\/(max_data-min_data+1e-6)\n    return data - 0.5","05f725ba":"def get_1d_dummy_model(config):\n    \n    nclass = config.n_classes\n    input_length = config.audio_length\n    \n    inp = Input(shape=(input_length,1))\n    x = GlobalMaxPool1D()(inp)\n    out = Dense(nclass, activation=softmax)(x)\n\n    model = models.Model(inputs=inp, outputs=out)\n    opt = optimizers.Adam(config.learning_rate)\n\n    model.compile(optimizer=opt, loss=losses.categorical_crossentropy, metrics=['acc'])\n    return model\n\ndef get_1d_conv_model(config):\n    \n    nclass = config.n_classes\n    input_length = config.audio_length\n    \n    inp = Input(shape=(input_length,1))\n    x = Convolution1D(16, 9, activation=relu, padding=\"valid\")(inp)\n    x = Convolution1D(16, 9, activation=relu, padding=\"valid\")(x)\n    x = MaxPool1D(16)(x)\n    x = Dropout(rate=0.1)(x)\n    \n    x = Convolution1D(32, 3, activation=relu, padding=\"valid\")(x)\n    x = Convolution1D(32, 3, activation=relu, padding=\"valid\")(x)\n    x = MaxPool1D(4)(x)\n    x = Dropout(rate=0.1)(x)\n    \n    x = Convolution1D(32, 3, activation=relu, padding=\"valid\")(x)\n    x = Convolution1D(32, 3, activation=relu, padding=\"valid\")(x)\n    x = MaxPool1D(4)(x)\n    x = Dropout(rate=0.1)(x)\n    \n    x = Convolution1D(256, 3, activation=relu, padding=\"valid\")(x)\n    x = Convolution1D(256, 3, activation=relu, padding=\"valid\")(x)\n    x = GlobalMaxPool1D()(x)\n    x = Dropout(rate=0.2)(x)\n\n    x = Dense(64, activation=relu)(x)\n    x = Dense(1028, activation=relu)(x)\n    out = Dense(nclass, activation=softmax)(x)\n\n    model = models.Model(inputs=inp, outputs=out)\n    opt = optimizers.Adam(config.learning_rate)\n\n    model.compile(optimizer=opt, loss=losses.categorical_crossentropy, metrics=['acc'])\n    return model","edca6660":"train.head()","bc2a981a":"LABELS = list(train.labels.unique())\nlabel_idx = {label: i for i, label in enumerate(LABELS)}\ntrain.set_index(\"fname\", inplace=True)\ntest.set_index(\"fname\", inplace=True)\ntrain[\"label_idx\"] = train.labels.apply(lambda x: label_idx[x])\nif not COMPLETE_RUN:\n    train = train[:2000]\n    test = test[:2000]","510eb895":"train.head()","40fb5575":"config = Config(sampling_rate=16000, audio_duration=2, n_folds=10, learning_rate=0.001)\nif not COMPLETE_RUN:\n    config = Config(sampling_rate=100, audio_duration=1, n_folds=2, max_epochs=1)","c702189d":"PREDICTION_FOLDER = \"predictions_1d_conv\"\nif not os.path.exists(PREDICTION_FOLDER):\n    os.mkdir(PREDICTION_FOLDER)\nif os.path.exists('logs\/' + PREDICTION_FOLDER):\n    shutil.rmtree('logs\/' + PREDICTION_FOLDER)\n\nskf = StratifiedKFold(n_splits=config.n_folds)\n\nfor i, (train_split, val_split) in enumerate(skf.split(train.index, train.label_idx)):\n    train_set = train.iloc[train_split]\n    val_set = train.iloc[val_split]\n    checkpoint = ModelCheckpoint('best_%d.h5'%i, monitor='val_loss', verbose=1, save_best_only=True)\n    early = EarlyStopping(monitor=\"val_loss\", mode=\"min\", patience=5)\n    tb = TensorBoard(log_dir='.\/logs\/' + PREDICTION_FOLDER + '\/fold_%d'%i, write_graph=True)\n\n    callbacks_list = [checkpoint, early, tb]\n    print(\"\\nFold: \", i)\n    if COMPLETE_RUN:\n        model = get_1d_conv_model(config)\n    else:\n        model = get_1d_dummy_model(config)\n\n    train_generator = DataGenerator(config, '..\/input\/train_curated\/', train_set.index, \n                                    train_set.label_idx, batch_size=64,\n                                    preprocessing_fn=audio_norm)\n    val_generator = DataGenerator(config, '..\/input\/train_curated\/', val_set.index, \n                                  val_set.label_idx, batch_size=64,\n                                  preprocessing_fn=audio_norm)\n    \n    history = model.fit_generator(train_generator, callbacks=callbacks_list, validation_data=val_generator,\n                                  epochs=config.max_epochs, use_multiprocessing=True, max_queue_size=20)\n    \n#     model.load_weights('..\/working\/best_%d.h5'%i)\n    \n    # Save train predictions\n    train_generator = DataGenerator(config, '..\/input\/train_curated\/', train.index, batch_size=128,\n                                    preprocessing_fn=audio_norm)\n    predictions = model.predict_generator(train_generator, use_multiprocessing=True, \n                                          max_queue_size=20, verbose=1)\n    np.save(PREDICTION_FOLDER + \"\/train_predictions_%d.npy\"%i, predictions)\n    \n    # Save test predictions\n    test_generator = DataGenerator(config, '..\/input\/test\/', test.index, batch_size=128,\n                                    preprocessing_fn=audio_norm)\n    predictions = model.predict_generator(test_generator, use_multiprocessing=True, \n                                          max_queue_size=20, verbose=1)\n    np.save(PREDICTION_FOLDER + \"\/test_predictions_%d.npy\"%i, predictions)\n    \n    # Make a submission file\n    top_3 = np.array(LABELS)[np.argsort(-predictions, axis=1)[:, :3]]\n    predicted_labels = [' '.join(list(x)) for x in top_3]\n    test['label'] = predicted_labels\n    test[['label']].to_csv(PREDICTION_FOLDER + \"\/predictions_%d.csv\"%i)\n    ","1b4384a3":"os.listdir('..\/working\/predictions_1d_conv\/')","c91618a0":"pred_list = []\nfor i in range(config.n_folds):\n    pred_list.append(np.load(\"..\/working\/predictions_1d_conv\/test_predictions_%d.npy\"%i))\nprediction = np.ones_like(pred_list[0])\nfor pred in pred_list:\n    prediction = prediction*pred\nprediction = prediction**(1.\/len(pred_list))\n# Make a submission file\ntop_3 = np.array(LABELS)[np.argsort(-prediction, axis=1)[:, :3]]\npredicted_labels = [' '.join(list(x)) for x in top_3]\ntest = pd.read_csv('..\/input\/sample_submission.csv')\ntest['label'] = predicted_labels\ntest[['fname', 'label']].to_csv(\"1d_conv_ensembled_submission.csv\", index=False)","a3a2a081":"import librosa\nSAMPLE_RATE = 44100\nfname = '..\/input\/train_curated\/0019ef41.wav'  # Raindrop\nwav, _ = librosa.core.load(fname, sr=SAMPLE_RATE)\nwav = wav[:2*44100]","765b16cb":"mfcc = librosa.feature.mfcc(wav, sr = SAMPLE_RATE, n_mfcc=40)\nmfcc.shape","a2a073f4":"fig, ax = plt.subplots(figsize=(15, 5))\nax.imshow(mfcc, cmap='Spectral', interpolation='nearest');","49796051":"from keras.layers import (Convolution2D, GlobalAveragePooling2D, BatchNormalization, Flatten,\n                          GlobalMaxPool2D, MaxPool2D, concatenate, Activation)\nfrom keras.utils import Sequence, to_categorical\nfrom keras import backend as K","a346370c":"def get_2d_dummy_model(config):\n    \n    nclass = config.n_classes\n    \n    inp = Input(shape=(config.dim[0],config.dim[1],1))\n    x = GlobalMaxPool2D()(inp)\n    out = Dense(nclass, activation=softmax)(x)\n\n    model = models.Model(inputs=inp, outputs=out)\n    opt = optimizers.Adam(config.learning_rate)\n\n    model.compile(optimizer=opt, loss=losses.categorical_crossentropy, metrics=['acc'])\n    return model\n\n\ndef get_2d_conv_model(config):\n    \n    nclass = config.n_classes\n    \n    inp = Input(shape=(config.dim[0],config.dim[1],1))\n    x = Convolution2D(32, (4,10), padding=\"same\")(inp)\n    x = BatchNormalization()(x)\n    x = Activation(\"relu\")(x)\n    x = MaxPool2D()(x)\n    \n    x = Convolution2D(32, (4,10), padding=\"same\")(x)\n    x = BatchNormalization()(x)\n    x = Activation(\"relu\")(x)\n    x = MaxPool2D()(x)\n    \n    x = Convolution2D(32, (4,10), padding=\"same\")(x)\n    x = BatchNormalization()(x)\n    x = Activation(\"relu\")(x)\n    x = MaxPool2D()(x)\n    \n    x = Convolution2D(32, (4,10), padding=\"same\")(x)\n    x = BatchNormalization()(x)\n    x = Activation(\"relu\")(x)\n    x = MaxPool2D()(x)\n\n    x = Flatten()(x)\n    x = Dense(64)(x)\n    x = BatchNormalization()(x)\n    x = Activation(\"relu\")(x)\n    out = Dense(nclass, activation=softmax)(x)\n\n    model = models.Model(inputs=inp, outputs=out)\n    opt = optimizers.Adam(config.learning_rate)\n\n    model.compile(optimizer=opt, loss=losses.categorical_crossentropy, metrics=['acc'])\n    return model","68180f09":"config = Config(sampling_rate=44100, audio_duration=2, n_folds=10, \n                learning_rate=0.001, use_mfcc=True, n_mfcc=40)\nif not COMPLETE_RUN:\n    config = Config(sampling_rate=44100, audio_duration=2, n_folds=2, \n                    max_epochs=1, use_mfcc=True, n_mfcc=40)","95ed6104":"def prepare_data(df, config, data_dir):\n    X = np.empty(shape=(df.shape[0], config.dim[0], config.dim[1], 1))\n    input_length = config.audio_length\n    for i, fname in enumerate(df.index):\n#         print(fname)\n        file_path = data_dir + fname\n        data, _ = librosa.core.load(file_path, sr=config.sampling_rate, res_type=\"kaiser_fast\")\n\n        # Random offset \/ Padding\n        if len(data) > input_length:\n            max_offset = len(data) - input_length\n            offset = np.random.randint(max_offset)\n            data = data[offset:(input_length+offset)]\n        else:\n            if input_length > len(data):\n                max_offset = input_length - len(data)\n                offset = np.random.randint(max_offset)\n            else:\n                offset = 0\n            data = np.pad(data, (offset, input_length - len(data) - offset), \"constant\")\n\n        data = librosa.feature.mfcc(data, sr=config.sampling_rate, n_mfcc=config.n_mfcc)\n        data = np.expand_dims(data, axis=-1)\n        X[i,] = data\n    return X","2ce5ce62":"test.index = test.fname","3e103682":"%time\nX_train = prepare_data(train, config, '..\/input\/train_curated\/')\nX_test = prepare_data(test, config, '..\/input\/test\/')\ny_train = to_categorical(train.label_idx.astype('str'), num_classes=config.n_classes)","e28a2dc5":"mean = np.mean(X_train, axis=0)\nstd = np.std(X_train, axis=0)\n\nX_train = (X_train - mean)\/std\nX_test = (X_test - mean)\/std","63b9bbe7":"PREDICTION_FOLDER = \"predictions_2d_conv\"\nif not os.path.exists(PREDICTION_FOLDER):\n    os.mkdir(PREDICTION_FOLDER)\nif os.path.exists('logs\/' + PREDICTION_FOLDER):\n    shutil.rmtree('logs\/' + PREDICTION_FOLDER)\n\nskf = StratifiedKFold(n_splits=config.n_folds)\n\nfor i, (train_split, val_split) in enumerate(skf.split(train.index, train.label_idx)):\n    K.clear_session()\n    X, y, X_val, y_val = X_train[train_split], y_train[train_split], X_train[val_split], y_train[val_split]\n    checkpoint = ModelCheckpoint('best_%d.h5'%i, monitor='val_loss', verbose=1, save_best_only=True)\n    early = EarlyStopping(monitor=\"val_loss\", mode=\"min\", patience=5)\n    tb = TensorBoard(log_dir='.\/logs\/' + PREDICTION_FOLDER + '\/fold_%i'%i, write_graph=True)\n    callbacks_list = [checkpoint, early, tb]\n    print(\"#\"*50)\n    print(\"Fold: \", i)\n    model = get_2d_conv_model(config)\n    history = model.fit(X, y, validation_data=(X_val, y_val), callbacks=callbacks_list, \n                        batch_size=64, epochs=config.max_epochs)\n    model.load_weights('best_%d.h5'%i)\n\n    # Save train predictions\n    predictions = model.predict(X_train, batch_size=64, verbose=1)\n    np.save(PREDICTION_FOLDER + \"\/train_predictions_%d.npy\"%i, predictions)\n\n    # Save test predictions\n    predictions = model.predict(X_test, batch_size=64, verbose=1)\n    np.save(PREDICTION_FOLDER + \"\/test_predictions_%d.npy\"%i, predictions)\n\n    # Make a submission file\n    top_3 = np.array(LABELS)[np.argsort(-predictions, axis=1)[:, :3]]\n    predicted_labels = [' '.join(list(x)) for x in top_3]\n    test['label'] = predicted_labels\n    test[['label']].to_csv(PREDICTION_FOLDER + \"\/predictions_%d.csv\"%i)","e2314d8a":"pred_list = []\nfor i in range(config.n_folds):\n    pred_list.append(np.load(\"..\/working\/predictions_2d_conv\/test_predictions_%d.npy\"%i))\nprediction = np.ones_like(pred_list[0])\nfor pred in pred_list:\n    prediction = prediction*pred\nprediction = prediction**(1.\/len(pred_list))\n# Make a submission file\ntop_3 = np.array(LABELS)[np.argsort(-prediction, axis=1)[:, :3]]\npredicted_labels = [' '.join(list(x)) for x in top_3]\ntest = pd.read_csv('..\/input\/sample_submission.csv')\ntest['label'] = predicted_labels\ntest[['fname', 'label']].to_csv(\"2d_conv_ensembled_submission.csv\", index=False)","97ca9727":"pred_list = []\nfor i in range(config.n_folds):\n    pred_list.append(np.load(\"..\/working\/predictions_1d_conv\/test_predictions_%d.npy\"%i))\nfor i in range(config.n_folds):\n    pred_list.append(np.load(\"..\/working\/predictions_2d_conv\/test_predictions_%d.npy\"%i))\nprediction = np.ones_like(pred_list[0])\nfor pred in pred_list:\n    prediction = prediction*pred\nprediction = prediction**(1.\/len(pred_list))","ef7e5d58":"prediction.shape","af09feba":"It is important to convert raw labels to integer indices","0e8da864":"We observe:  \nThe distribution of audio length across labels is non-uniform and has high variance as the previous competition.  \n\nLet's now analyze the frame length distribution in train and test.","f836df27":"predictions are saved as following.","2074a9eb":"The Configuration object stores those learning parameters that are shared between data generators, models, and training functions. Anything that is `global` as far as the training is concerned can become the part of Configuration object.","7ebbd88e":"<a id=\"2d_ensembling\"><\/a>\n#### Ensembling 2D Conv Predictions","56f7d23d":"The number of categories is large, so let's check the frame distributions of top 25 categories.","440dcc2d":"Let's plot the audio frames","9e8a5618":"<a id=\"2d_training\"><\/a>\n#### Training 2D Conv on MFCC","bae91ab1":"**For simplicity, we excluded multi-labeled records in train, so the number of unique label is 74 ( < 80 ).**  \n**When bulid a valid model, we must consider this.**","2dc81715":"<a id=\"1d_training\"><\/a>\n#### Training 1D Conv","821f9a03":"<a id=\"2d_model_building\"><\/a>\n## <center>4. Building a Model using MFCC\n\nWe will build a 2D Convolutional model using MFCC. ","d4a1b0af":"# <font color='gray' size=7> Freesound Audio Tagging 2019 <\/font>\n\nupdated May.02\n\n![Logo](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/10700\/logos\/header.png)\n\n@fizzbuzz's awesome kernel from previous competition would be a great introduction for beginners, including me :)  \n( https:\/\/www.kaggle.com\/fizzbuzz\/beginner-s-guide-to-audio-data )  \nHere I posted the modified kernel for this competition ( though not perfect ).  \n  \n---\n\nAlso some top solutions in previous competition will help us.  \n\n* 1st solution :  \nhttps:\/\/storage.googleapis.com\/kaggle-forum-message-attachments\/365414\/9991\/Jeong_COCAI_task2.pdf  \n* 4th solution :  \nhttps:\/\/www.kaggle.com\/c\/freesound-audio-tagging\/discussion\/62634#latest-367166  \n* 8th solution :  \nhttps:\/\/www.kaggle.com\/c\/freesound-audio-tagging\/discussion\/64262#latest-376395  \n* 11th solution :  \nhttp:\/\/dcase.community\/documents\/workshop2018\/proceedings\/DCASE2018Workshop_Wei_100.pdf  \n\n\n* DCASE_2018 proceedings :  \nhttp:\/\/dcase.community\/workshop2018\/proceedings\n\n---\n\nAnd more...  \n\nPlanet Understanding the Amazon from Space was a multi-labeled image classification competition.\nhttps:\/\/www.kaggle.com\/c\/planet-understanding-the-amazon-from-space\n\n1st place solution had been written in Kaggle blog by @bestfitting.  \nhttp:\/\/blog.kaggle.com\/2017\/10\/17\/planet-understanding-the-amazon-from-space-1st-place-winners-interview\/  \nMost interesting part for me is the way to consider co-occurence.  \nIn this solution, Ridge regression was used to do it (please read the above material for more detail).  \n\n---\n\n**NOTE :  \nThis notebook used only curated wav files,  \nand did not consider multi-labeled records in train.  \nFor supplement, I have also posted the kernel to explore multi-label audio data.\nhttps:\/\/www.kaggle.com\/maxwell110\/explore-multi-labeled-data\n**  \n\n\n### Contents\n1. [Exploratory Data Analysis](#eda)\n    * [Loading data](#loading_data)\n    * [Distribution of Categories](#distribution)\n    * [Reading Audio Files](#audio_files)\n    * [Audio Length](#audio_length)\n2. [Building a Model using Raw Wave](#1d_model_building)\n    * [Model Discription](#1d_discription)\n    * [Configuration](#configuration)\n    * [DataGenerator class](#data_generator)\n    * [Normalization](#1d_normalization)\n    * [Training 1D Conv](#1d_training)\n    * [Ensembling 1D Conv Predictions](#1d_ensembling)\n3. [Introduction to MFCC](#intro_mfcc)\n    * [Generating MFCC using Librosa](#librosa_mfcc)\n4. [Building a Model using MFCC](#2d_model_building)\n    * [Preparing Data](#2d_data)\n    * [Normalization](#2d_normalization)\n    * [Training 2D Conv on MFCC](#2d_training)\n    * [Ensembling 2D Conv Predictions](#2d_ensembling)\n5. [Ensembling 1D Conv and 2D Conv Predictions](#1d_2d_ensembling)\n\n<a id=\"eda\"><\/a>\n## <center>1. Exploratory Data Analysis<\/center>","d7706dd9":"<a id=\"intro_mfcc\"><\/a>\n## <center> 3. Introuction to MFCC\n\nAs we have seen in the previous section, our Deep Learning models are powerful enough to classify sounds from the raw audio. We do not require any complex feature engineering. But before the Deep Learning era, people developed techniques to extract features from audio signals. It turns out that these techniques are still useful. One such technique is computing the MFCC (Mel Frquency Cepstral Coefficients) from the raw audio. Before we jump to MFCC, let's talk about extracting features from the sound.\n\nIf we just want to classify some sound, we should build features that are **speaker independent**. Any feature that only gives information about the speaker (like the pitch of their voice) will not be helpful for classification. In other words, we should extract features that depend on the \"content\" of the audio rather than the nature of the speaker. Also, a good feature extraction technique should mimic the human speech perception. We don't hear loudness on a linear scale. If we want to double the perceived loudness of a sound, we have to put 8 times as much energy into it. Instead of a linear scale, our perception system uses a log scale. \n\nTaking these things into account, Davis and Mermelstein came up with MFCC in the 1980's. MFCC mimics the logarithmic perception of loudness and pitch of human auditory system and tries to eliminate speaker dependent characteristics by excluding the fundamental frequency and their harmonics. The underlying mathematics is quite complicated and we will skip that. For those interested, here is the [detailed explanation](http:\/\/practicalcryptography.com\/miscellaneous\/machine-learning\/guide-mel-frequency-cepstral-coefficients-mfccs\/).\n\n<a id=\"librosa_mfcc\"><\/a>\n#### Generating MFCC using Librosa\nThe library librosa has a function to calculate MFCC. Let's compute the MFCC of an audio file and visualize it.","487f81a0":"<a id=\"audio_length\"><\/a>\n### Audio Length\n\nWe shall now analyze the lengths of the audio files in our dataset","42a9dbb3":"The DataGenerator class inherits from **`keras.utils.Sequence`** . It is useful for preprocessing and feeding the data to a Keras model. \n* Once initialized with a batch_size, it computes the number of batches in an epoch. The **`__len__`** method tells Keras how many batches to draw in each epoch. \n* The **`__getitem__`** method takes an index (which is the batch number) and returns a batch of the data (both X and y) after calculating the offset. During test time, only `X` is returned.\n* If we want to perform some action after each epoch (like shuffle the data, or increase the proportion of augmented data), we can use the **`on_epoch_end`** method.\n\nNote:\n**`Sequence`** are a safer way to do multiprocessing. This structure guarantees that the network will only train once on each sample per epoch which is not the case with generators.","2052d894":"<a id=\"1d_normalization\"><\/a>\n#### Normalization\n\nNormalization is a crucial preprocessing step. The simplest method is rescaling the range of features to scale the range in [0, 1]. ","35a6d580":"<a id=\"data_generator\"><\/a>\n#### DataGenerator Class","8f65acc7":"<a id=\"1d_model_building\"><\/a>\n## <center>2. Building a Model using Raw Wave<\/center>\nWe will build two models:\n1. The first model will take the raw audio (1D array) as input and the primary operation will be Conv1D\n2. The second model will take the MFCCs as input. (We will explain MFCC later)\n\n<a id=\"1d_discription\"><\/a>\n### Keras Model using raw wave\n\nOur model has the architecture as follows:\n![raw](https:\/\/raw.githubusercontent.com\/zaffnet\/images\/master\/images\/raw_model.jpg)\n\n**Important:**\nDue to the time limit on Kaggle Kernels, it is not possible to perform 10-fold training of a large model. I have trained the model locally and uploaded its output files as a dataset. If you wish to train the bigger model, change `COMPLETE_RUN = True` at the beginning of the kernel.","9f805d6c":"Let's zoom in on first 1000 frames","44b5a261":"Here is the code for 10-fold training:\n* We use **`from sklearn.model_selection.StratifiedKFold`** for splitting the trainig data into 10 folds.\n* We use some Keras callbacks to monitor the training.\n    * **`ModelCheckpoint`** saves the best weight of our model (using validation data). We use this weight to make test predictions.\n    * **`EarlyStopping`** stops the training once validation loss ceases to decrease\n    * **`TensorBoard`** helps us visualize training and validation loss and accuracy.\n* We fit the model using **`DataGenerator`** for training and validation splits. \n* We get both training and test predictions and save them as .npy format. We also generate a submission file. For 10-fold CV, the number of prediction files should be 10. We will ensemble these predictions later.","0de55e5e":"### Reading Audio Files\n\nThe audios are [Pulse-code modulated](https:\/\/en.wikipedia.org\/wiki\/Audio_bit_depth) with a [bit depth](https:\/\/en.wikipedia.org\/wiki\/Audio_bit_depth) of 16 and a [sampling rate](https:\/\/en.wikipedia.org\/wiki\/Sampling_%28signal_processing%29) of 44.1 kHz\n\n![16-bit PCM](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/b\/bf\/Pcm.svg\/500px-Pcm.svg.png)\n\n* **Bit-depth = 16**: The amplitude of each sample in the audio is one of 2^16 (=65536) possible values. \n* **Samplig rate = 44.1 kHz**: Each second in the audio consists of 44100 samples. So, if the duration of the audio file is 3.2 seconds, the audio will consist of 44100\\*3.2 = 141120 values.\n\nLet's listen to an audio file in our dataset and load it to a numpy array","674680e2":"<a id=\"1d_ensembling\"><\/a>\n#### Ensembling 1D Conv Predictions\nNow that we have trained our model, it is time average the predictions of X-folds.  \nWe will try **Geometric Mean averaging**.","9ae2080b":"* The dummy model is just for debugging purpose.\n* Our 1D Conv model is fairly deep and is trained using Adam Optimizer with a learning rate of 0.0001","9ccd9195":"<a id=\"configuration\"><\/a>\n#### Configuration","b6c15594":"**Be careful :  **  \n**Because we exclude multi-labeled records, prediction shape became invalid.**","34664113":"<a id=\"1d_2d_ensembling\"><\/a>\n## <center>5. Ensembling 1D Conv and 2D Conv Predictions<\/center>","22e07f99":"#### Some sssential imports","0248444c":"<a id=\"2d_data\"><\/a>\n### Preparing data","11992ddc":"<a id=\"loading_data\"><\/a>\n### Loading data","8a4d04ac":"<a id=\"distribution\"><\/a>\n### Distribution of Categories","521c2452":"<a id=\"2d_normalization\"><\/a>\n#### Normalization\n","3a8448fb":"Due to multi-labeld records in train, the number of unique classes is 213 ( > 80 ).","4250dc75":"We observe:\n- Majority of the audio files are short.\n- There are an `abnormal` length in the train histogram. Let's analyze them."}}