{"cell_type":{"e6288521":"code","6e599dc8":"code","a7b8fe5b":"code","16e40fe1":"code","b118e2f9":"code","bc8c0ba5":"code","85f0fbe0":"code","c4276a3d":"code","afbed310":"code","d6aa7699":"code","52e67e8a":"code","34f42141":"code","be9f42d8":"code","9d38e9cd":"markdown","132c5edc":"markdown","5f7e8a28":"markdown","c24c1b87":"markdown","1957e195":"markdown","21d45e40":"markdown","a6b412d4":"markdown"},"source":{"e6288521":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport torch, torch.nn as nn\nfrom torchvision import models, transforms, datasets\nimport matplotlib.pyplot as plt\nimport torch.nn.functional as F\nimport math\nimport pydicom\nfrom collections import Counter\nimport tqdm\nos.listdir('\/kaggle\/input\/rsna-intracranial-hemorrhage-detection')\n\n# Any results you write to the current directory are saved as output.","6e599dc8":"input_path = '\/kaggle\/input\/rsna-intracranial-hemorrhage-detection\/'\ndf_train = pd.read_csv(input_path + 'stage_1_train.csv')\nprint(len(df_train))\ndf_train.head(10)","a7b8fe5b":"df_test = pd.read_csv(input_path + 'stage_1_sample_submission.csv')\nprint(len(df_test))\ndf_test.head(10)","16e40fe1":"ds_columns = ['ID',\n              'PatientID',\n              'Modality',\n              'StudyInstance',\n              'SeriesInstance',\n                'PhotoInterpretation',\n              'Position0', 'Position1', 'Position2',\n              'Orientation0', 'Orientation1', 'Orientation2', 'Orientation3', 'Orientation4', 'Orientation5',\n              'PixelSpacing0', 'PixelSpacing1']\ndef extract_dicom_features(ds):\n    \n    ds_items = [ds.SOPInstanceUID,\n                ds.PatientID,\n                ds.Modality,\n                ds.StudyInstanceUID,\n                ds.SeriesInstanceUID,\n                ds.PhotometricInterpretation,\n                ds.ImagePositionPatient,\n                ds.ImageOrientationPatient,\n                ds.PixelSpacing]\n\n    line = []\n    for item in ds_items:\n        if type(item) is pydicom.multival.MultiValue:\n            line += [float(x) for x in item]\n        else:\n            line.append(item)\n\n    return line","b118e2f9":"list_img = os.listdir(input_path + 'stage_1_test_images')\nprint(len(list_img))\ndf_features = []\nfor img in tqdm.tqdm(list_img):\n    img_path = input_path + 'stage_1_test_images\/' + img\n    ds = pydicom.read_file(img_path)\n    df_features.append(extract_dicom_features(ds))\ndf_features_test = pd.DataFrame(df_features, columns=ds_columns)","bc8c0ba5":"list_img = os.listdir(input_path + 'stage_1_train_images')\nprint(len(list_img))\ndf_features = []\nfor img in tqdm.tqdm(list_img):\n    img_path = input_path + 'stage_1_train_images\/' + img\n    ds = pydicom.read_file(img_path)\n    df_features.append(extract_dicom_features(ds))\ndf_features_train = pd.DataFrame(df_features, columns=ds_columns)","85f0fbe0":"df_train[['ID', 'Subtype']] = df_train['ID'].str.rsplit(pat='_', n=1, expand=True)\ndf_train_new = df_train.pivot_table(index='ID', columns='Subtype').reset_index()\ndf_train_new.columns=['ID','any','epidural','intraparenchymal','intraventricular','subarachnoid','subdural']\ndf_train_merged = df_train_new.merge(df_features_train, how='right')","c4276a3d":"df_test[['ID', 'Subtype']] = df_test['ID'].str.rsplit(pat='_', n=1, expand=True)\ndf_test_new = df_test.pivot_table(index='ID', columns='Subtype').reset_index()\ndf_test_new.columns=['ID','any','epidural','intraparenchymal','intraventricular','subarachnoid','subdural']\ndf_test_merged = df_test_new.merge(df_features_test, how='right')","afbed310":"df_train_merged.to_csv('df_train_merged.csv', index=False)\ndf_test_merged.to_csv('df_test_merged.csv', index=False)","d6aa7699":"for df in [df_train_merged, df_test_merged]:\n    df['max_Position2']=0\n    df['min_Position2']=0\n    df['relative_Position2']=0\n    \n    for SeriesInstance in tqdm.tqdm(df[\"SeriesInstance\"].unique()):\n        sub_df=df[df['SeriesInstance']==SeriesInstance]\n        df.loc[df['SeriesInstance']==SeriesInstance, 'max_Position2'] = max(sub_df['Position2'])\n        df.loc[df['SeriesInstance']==SeriesInstance, 'min_Position2'] = min(sub_df['Position2'])\n\n    df['relative_Position2'] = (df['Position2']-df['min_Position2'])\/(df['max_Position2']-df['min_Position2'])","52e67e8a":"df_train_merged=df_train_merged.sort_values(by=[\"PatientID\",\"SeriesInstance\",'Position2'])\ndf_train_merged.to_csv('df_train_merged.csv', index=False)\ndf_test_merged=df_test_merged.sort_values(by=[\"PatientID\",\"SeriesInstance\",'Position2'])\ndf_test_merged.to_csv('df_test_merged.csv', index=False)","34f42141":"z_normal = df_train_merged[df_train_merged[\"any\"] != 1]['relative_Position2']\nz_epidural = df_train_merged[df_train_merged[\"epidural\"] == 1]['relative_Position2']\nz_subdural = df_train_merged[df_train_merged[\"subdural\"] == 1]['relative_Position2']\nz_intraventricular = df_train_merged[df_train_merged[\"intraventricular\"] == 1]['relative_Position2']\nz_intraparenchymal = df_train_merged[df_train_merged[\"intraparenchymal\"] == 1]['relative_Position2']\nz_subarachnoid = df_train_merged[df_train_merged[\"subarachnoid\"] == 1]['relative_Position2']\nz_any = df_train_merged[df_train_merged[\"any\"] == 1]['relative_Position2']\n\nz_describe=pd.DataFrame({'normal': z_normal.describe(),\n                   'epidural': z_epidural.describe(),\n                   'subdural': z_subdural.describe(),\n                   'intraventricular': z_intraventricular.describe(),\n                   'intraparenchymal': z_intraparenchymal.describe(),\n                   'subarachnoid': z_subarachnoid.describe(),\n                   'any': z_any.describe()})\nprint(z_describe)\nbin_width=0.05\nkwargs = dict(histtype='stepfilled', normed=False, bins=np.arange(0, 1+bin_width, bin_width))\nfig, axes = plt.subplots(4, 2, figsize=(8, 16))\naxes[0, 0].hist(z_normal, **kwargs)\naxes[0, 0].set_title('normal')\naxes[0, 1].hist(z_epidural, **kwargs) \naxes[0, 1].set_title('epidural')\naxes[1, 0].hist(z_subdural, **kwargs) \naxes[1, 0].set_title('subdural')\naxes[1, 1].hist(z_intraventricular, **kwargs) \naxes[1, 1].set_title('intraventricular')\naxes[2, 0].hist(z_intraparenchymal, **kwargs) \naxes[2, 0].set_title('intraparenchymal')\naxes[2, 1].hist(z_subarachnoid, **kwargs) \naxes[2, 1].set_title('subarachnoid')\naxes[3, 0].hist(z_any, **kwargs) \naxes[3, 0].set_title('any')\nplt.show()","be9f42d8":" print(df_train_merged[df_train_merged[\"SeriesInstance\"] == 'ID_2f48a87008'])","9d38e9cd":"From these distributions, I can see..\n* Hemohages are NOT unifomly distributed, they often exist at the center (Z = 0.5) of each volume.\n* Uppermost (Z = 1.0) and lowermost (Z = 0) slices are likely to be normal.\n* Unfortunately, the difference among the distributions of each type of hemorhage is not so clear\n* Intraventricular hemorhage showed smaller variance, it occured more frequently in the center of the head.\n\nI am not medical doctor\/radiotechnologist, but I guess the reason for these results are...\n* When doctors or radiotechnologists scan patients, they would postion the patients in a scanner so that the suspicious hemorhage point is at the center of field of view.\n* Intraventricular hemorhage exist only in the ventricule (ofcourse), and the ventricule exist in the center of the head.","132c5edc":"Sort and save as csv","5f7e8a28":"I also noticed that  the slice is more likely to be abnormal if its adjacent slices are not normal.\nI don't know how to formulate such phenomenon (autoregression?), but I can show example.\nI can see slices with hemorhage in 'ID_2f48a87008' are aggregated in the center of the head.","c24c1b87":"This is my first experience in kaggle, and I am not native speaker of English (and python).\nI examined whether 'image position' in DICOM file has any information or predictive value for hemorhage detection. \nI thoght specific type of hemohage may occour more frequently in spcific Z position (hight) of the head.\nCode is heavily borrowed from https:\/\/www.kaggle.com\/braquino\/correct-images-sequece\n","1957e195":"Maybe, 2.5D deep learning (a slice and adjacent ones as input) or 3D deeplearning can utilize such characteristics.\n\nAny comments are welcome","21d45e40":"Show distribution of each type of hemorhage relative to Z position of slice","a6b412d4":"Script to get z position relative to entire volume."}}