{"cell_type":{"40dddb28":"code","be027a8c":"code","f6ad2159":"code","a50d1f6a":"code","d62a0020":"code","f41ed117":"code","15cd3e9c":"code","1d311b85":"code","8b32fec1":"code","ac250f6f":"code","5a75bb48":"code","7459296a":"code","093fc35f":"code","9d284c85":"code","71cd5813":"code","1311e853":"code","fb048f8e":"markdown","b12d8e72":"markdown","7d89f2ca":"markdown","ccaae95d":"markdown","958f5b87":"markdown","604f50ff":"markdown","cabd03c1":"markdown","b3a8c931":"markdown"},"source":{"40dddb28":"import os\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.metrics import log_loss\nfrom tqdm import tqdm\nimport warnings","be027a8c":"config = {\n    \"mode\": {\n        \"stage\": 1\n    },\n    \"const\": {\n        \"score_diff\": 5,\n        \"this_season\": 2020,\n        \"total_season\": 10,\n        \"seed_num\": 16,\n        \"clip_min\": 0.01,\n        \"clip_max\": 0.99,\n    },\n    \"path\": {\n        \"prefix\": \"\/kaggle\/input\/google-cloud-ncaa-march-madness-2020-division-1-mens-tournament\",\n        \"stage1_prefix\": f\"\/kaggle\/input\/google-cloud-ncaa-march-madness-2020-division-1-mens-tournament\/MDataFiles_Stage1\",\n    },\n    \"plot\": {\n        \"palette\": \"viridis_r\"\n    }\n}","f6ad2159":"%matplotlib inline\nsns.set()\nwarnings.filterwarnings(\"ignore\")\n\npath_prefix = config[\"path\"][\"prefix\"]\nstage1_prefix = config[\"path\"][\"stage1_prefix\"]\nprint(os.listdir(f\"{path_prefix}\"))\nprint(os.listdir(f\"{stage1_prefix}\"))","a50d1f6a":"display(pd.read_csv(f\"{path_prefix}\/MSampleSubmissionStage1_2020.csv\").shape)\ndisplay(pd.read_csv(f\"{path_prefix}\/MSampleSubmissionStage1_2020.csv\").head())\ndisplay(pd.read_csv(f\"{path_prefix}\/MSampleSubmissionStage1_2020.csv\").tail())","d62a0020":"def load_data():\n    df_seed = pd.read_csv(os.path.join(stage1_prefix, \"MNCAATourneySeeds.csv\"))\n    df_result = pd.read_csv(\n        os.path.join(stage1_prefix, \"MNCAATourneyCompactResults.csv\")\n    )\n    return df_seed, df_result\n\n\ndef _seed_to_int(seed):\n    s_int = int(seed[1:3])\n    return s_int\n\n\ndef clean_df(df_seed, df_result):\n    df_seed[\"seed_int\"] = df_seed[\"Seed\"].apply(_seed_to_int)\n    df_seed.drop([\"Seed\"], axis=1, inplace=True)\n    df_result.drop([\"DayNum\", \"WLoc\", \"NumOT\"], axis=1, inplace=True)\n    return df_seed, df_result\n\n\n# Merge seed for each team\ndef merge_seed_result(df_seed, df_result):\n    df_win_seed = df_seed.rename(columns={\"TeamID\": \"WTeamID\", \"seed_int\": \"WSeed\"})\n    df_loss_seed = df_seed.rename(columns={\"TeamID\": \"LTeamID\", \"seed_int\": \"LSeed\"})\n    df_result = df_result.merge(df_win_seed, how=\"left\", on=[\"Season\", \"WTeamID\"])\n    df_result = df_result.merge(df_loss_seed, how=\"left\", on=[\"Season\", \"LTeamID\"])\n    df_result[\"SeedDiff\"] = np.abs(df_result[\"WSeed\"] - df_result[\"LSeed\"])\n    df_result[\"ScoreDiff\"] = np.abs(df_result[\"WScore\"] - df_result[\"LScore\"])\n    return df_result","f41ed117":"df_seed, df_result = load_data()\ndf_seed, df_result = clean_df(df_seed, df_result)\ndf_result = merge_seed_result(df_seed, df_result)\ndf_result[\"upset\"] = [\n    1 if ws > ls else 0 for ws, ls, in zip(df_result[\"WSeed\"], df_result[\"LSeed\"])\n]\n\n# Remove the games that end within 3 points difference, which are likely to be the other results\ndf_result = df_result[df_result[\"ScoreDiff\"] > config[\"const\"][\"score_diff\"]]\ndf_result.head()","15cd3e9c":"def check_target(df_result):\n    upset_proba = df_result['upset'].value_counts() \/ len(df_result) * 100\n    print(f\"upset probability:\\n{upset_proba}\")\n\ncheck_target(df_result)","1d311b85":"# Use only last 10 seasons, since some trends are likely to be changed\nthis_season = 2015\ntotal_season = config[\"const\"][\"total_season\"]\nseed_num = config[\"const\"][\"seed_num\"]","8b32fec1":"\"\"\"\nThe probability of the occurrence of the upset is likely to be different between\na game 1st seed vs. 6th seed and a game 11th seed vs. 16th seed, \nso I want to include the information\n\"\"\"\ndef aggregation(df_result, plot=True):\n    df_result[\"Seed_combi\"] = [\n        str(ws) + \"_\" + str(ls) if ws < ls else str(ls) + \"_\" + str(ws)\n        for ws, ls in zip(df_result[\"WSeed\"], df_result[\"LSeed\"])\n    ]\n\n    df_result_aggs = pd.DataFrame()\n    df_result_filter_aggs = pd.DataFrame()\n    df_result_season = df_result[\n        (df_result[\"Season\"] >= (this_season - total_season))\n        & (df_result[\"Season\"] < (this_season - 1))\n    ]\n    for s_num in range(seed_num):\n        df_result_agg = (\n            df_result_season[df_result_season[\"SeedDiff\"] == s_num]\n            .groupby(\"SeedDiff\")\n            .agg({\"upset\": [\"mean\", \"count\"]})\n        )\n        df_result_agg.columns = [\n            f\"{col[0]}_{col[1]}_all\" for col in df_result_agg.columns\n        ]\n        df_result_filter_agg = (\n            df_result_season[df_result_season[\"SeedDiff\"] == s_num]\n            .groupby(\"Seed_combi\")\n            .agg({\"upset\": [\"mean\", \"count\"]})\n        )\n        df_result_filter_agg.columns = [\n            f\"{col[0]}_{col[1]}\" for col in df_result_filter_agg.columns\n        ]\n        if s_num == 0:\n            df_result_agg[\"upset_mean_all\"] = 0.5\n            df_result_filter_agg[\"upset_mean\"] = 0.5\n        df_result_aggs = pd.concat([df_result_aggs, df_result_agg])\n        df_result_filter_aggs = pd.concat([df_result_filter_aggs, df_result_filter_agg])\n\n    if plot:\n        sns.barplot(df_result_aggs.index, df_result_aggs.upset_mean_all, palette=config[\"plot\"][\"palette\"])\n        plt.title(\"probability of upset based on past result aggretation\")\n        plt.tight_layout()\n        plt.show()\n\n    return df_result_aggs, df_result_filter_aggs\n\n\n# Merge upset probability\ndef merge(df_result, df_result_aggs, df_result_filter_aggs):\n    df_result = df_result.join(df_result_aggs, how=\"left\", on=\"SeedDiff\").join(\n        df_result_filter_aggs, how=\"left\", on=\"Seed_combi\"\n    )\n    df_result[\"upset_prob\"] = [\n        m if c > 20 else a\n        for a, m, c in zip(\n            df_result[\"upset_mean_all\"],\n            df_result[\"upset_mean\"],\n            df_result[\"upset_count\"],\n        )\n    ]\n    valid = df_result[(df_result[\"Season\"] == (this_season - 1))]\n    return valid\n\n\n# heuristic smoothing\ndef smoothing(df_result_aggs, plot=True):\n    for i in range(config[\"const\"][\"seed_num\"]):\n        if i == 0:\n            df_result_aggs.loc[i, \"upset_mean_all\"] = 0.5\n        else:\n            try:\n                df_result_aggs.loc[i, \"upset_mean_all\"]\n                if df_result_aggs.loc[i, \"upset_mean_all\"] == 0:\n                    raise Exception\n                elif df_result_aggs.loc[i, \"upset_mean_all\"] > 0.5:\n                    df_result_aggs.loc[i, \"upset_mean_all\"] = 0.5\n            except Exception:\n                df_result_aggs.loc[i, \"upset_mean_all\"] = (\n                    df_result_aggs.loc[(i - 1), \"upset_mean_all\"] \/ 4\n                    + df_result_aggs.loc[(i - 2), \"upset_mean_all\"] \/ 4\n                )\n\n    if plot:\n        sns.barplot(df_result_aggs.index, df_result_aggs.upset_mean_all, palette=config[\"plot\"][\"palette\"])\n        plt.title(\"probability of upset based on past result aggretation\")\n        plt.tight_layout()\n        plt.show()\n\n    return df_result_aggs\n\n\ndef merge_smooting(df_result, df_result_aggs_smooth, df_result_filter_aggs):\n    df_result = df_result.join(df_result_aggs_smooth, how=\"left\", on=\"SeedDiff\").join(\n        df_result_filter_aggs, how=\"left\", on=\"Seed_combi\"\n    )\n    df_result[\"upset_prob\"] = [\n        m if c > 20 else a\n        for a, m, c in zip(\n            df_result[\"upset_mean_all\"],\n            df_result[\"upset_mean\"],\n            df_result[\"upset_count\"],\n        )\n    ]\n\n    valid = df_result[(df_result[\"Season\"] == (this_season - 1))]\n    return valid\n\n\ndef clipping(array, a_min=config[\"const\"][\"clip_min\"], a_max=config[\"const\"][\"clip_max\"]):\n    return np.clip(array, a_min, a_max)\n\n\ndef scoring(valid, clip=False):\n    if clip:\n        return log_loss(valid[\"upset\"], clipping(valid[\"upset_prob\"]))\n    else:\n        return log_loss(valid[\"upset\"], valid[\"upset_prob\"])","ac250f6f":"# df_result_aggs, df_result_filter_aggs = aggregation(df_result, plot=True)\n# valid = merge(df_result, df_result_aggs, df_result_filter_aggs)\n# print(scoring(valid))","5a75bb48":"df_result_aggs, df_result_filter_aggs = aggregation(df_result, plot=True)\ndf_result_aggs_smooth = smoothing(df_result_aggs, plot=True)\nvalid = merge_smooting(df_result, df_result_aggs_smooth, df_result_filter_aggs)\nprint(scoring(valid))","7459296a":"df_result_aggs, df_result_filter_aggs = aggregation(df_result, plot=True)\ndf_result_aggs_smooth = smoothing(df_result_aggs, plot=True)\nvalid = merge_smooting(df_result, df_result_aggs_smooth, df_result_filter_aggs)\nprint(scoring(valid, clip=True))","093fc35f":"df_seed_test = df_seed[df_seed[\"Season\"]==this_season]\ndf_result_aggs, df_result_filter_aggs = aggregation(df_result, plot=True)\ndf_result_aggs_smooth = smoothing(df_result_aggs)","9d284c85":"def load_test(df_seed_this_season, df_result_aggs, df_result_filter_aggs):\n    test = pd.read_csv(os.path.join(path_prefix, \"MSampleSubmissionStage1_2020.csv\"))\n    test = pd.DataFrame(\n        np.array([ID.split(\"_\") for ID in test[\"ID\"]]),\n        columns=[\"Season\", \"TeamA\", \"TeamB\"],\n        dtype=int,\n    )\n\n    test = test.merge(\n        df_seed_this_season,\n        how=\"left\",\n        left_on=[\"Season\", \"TeamA\"],\n        right_on=[\"Season\", \"TeamID\"],\n    )\n    test = test.rename(columns={\"seed_int\": \"TeamA_seed\"}).drop(\"TeamID\", axis=1)\n\n    test = test.merge(\n        df_seed_this_season,\n        how=\"left\",\n        left_on=[\"Season\", \"TeamB\"],\n        right_on=[\"Season\", \"TeamID\"],\n    )\n    test = test.rename(columns={\"seed_int\": \"TeamB_seed\"}).drop(\"TeamID\", axis=1)\n\n    test[\"SeedDiff\"] = np.abs(test.TeamA_seed - test.TeamB_seed)\n    test[\"Seed_combi\"] = [\n        str(a) + \"_\" + str(b) if a < b else str(b) + \"_\" + str(a)\n        for a, b in zip(test[\"TeamA_seed\"], test[\"TeamB_seed\"])\n    ]\n\n    test = (\n        test.join(df_result_aggs, how=\"left\", on=\"SeedDiff\")\n        .join(df_result_filter_aggs, how=\"left\", on=\"Seed_combi\")\n        .fillna(-1)\n    )\n    test[\"upset_prob\"] = [\n        m if c > 20 else a\n        for a, m, c in zip(\n            test[\"upset_mean_all\"], test[\"upset_mean\"], test[\"upset_count\"]\n        )\n    ]\n\n    # convert upset_prob to win_prob\n    test[\"win_prob\"] = [\n        (1 - upset_prob) if teamA < teamB else upset_prob if teamA > teamB else 0.5\n        for teamA, teamB, upset_prob in zip(\n            test[\"TeamA_seed\"], test[\"TeamB_seed\"], test[\"upset_prob\"]\n        )\n    ]\n\n    return test\n\n\ndef make_submit(test, clip):\n    if clip:\n        sub = clipping(test[\"win_prob\"].values)\n    else:\n        sub = test[\"win_prob\"].values\n    submit = pd.read_csv(os.path.join(path_prefix, \"MSampleSubmissionStage1_2020.csv\"))\n    submit[\"Pred\"] = sub\n    start_index = int((len(submit) \/ 5) * (this_season - 2015))\n    end_index = int((len(submit) \/ 5) * (this_season - 2015 + 1))\n    submit_this_season = submit.iloc[start_index:end_index, :]\n    return submit_this_season","71cd5813":"test = load_test(df_seed_test, df_result_aggs_smooth, df_result_filter_aggs)\nmake_submit(test, clip=False)\nmake_submit(test, clip=True)","1311e853":"seasons = [2015, 2016, 2017, 2018, 2019]\nscores = []\nscores_clip = []\nsubmits = []\nsubmits_clip = []\nfor this_season in tqdm(seasons):\n    df_seed, df_result = load_data()\n    df_seed, df_result = clean_df(df_seed, df_result)\n    df_result = merge_seed_result(df_seed, df_result)\n    df_result['upset'] = [1 if ws > ls else 0 for ws, ls, in zip(df_result[\"WSeed\"], df_result[\"LSeed\"])]\n    df_result = df_result[df_result['ScoreDiff'] > config[\"const\"][\"score_diff\"]]\n\n    df_result_aggs, df_result_filter_aggs = aggregation(df_result, plot=False)\n    df_result_aggs_smooth = smoothing(df_result_aggs, plot=False)\n    valid = merge_smooting(df_result, df_result_aggs_smooth, df_result_filter_aggs)\n    score = scoring(valid, clip=False)\n    scores.append(score)\n    print(f\"{this_season}: {score} without clipping\")\n    score_clip = scoring(valid, clip=True)\n    scores_clip.append(score_clip)\n    print(f\"{this_season}: {score_clip} with clipping\")\n    \n    df_seed_test = df_seed[df_seed[\"Season\"]==this_season]\n    df_result_aggs, df_result_filter_aggs = aggregation(df_result, plot=False)\n    df_result_aggs_smooth = smoothing(df_result_aggs, plot=False)\n    test = load_test(df_seed_test, df_result_aggs_smooth, df_result_filter_aggs)\n    submit_this_season = make_submit(test, clip=False)\n    submits.append(submit_this_season)\n    submit_this_season = make_submit(test, clip=True)\n    submits_clip.append(submit_this_season)\n\nprint(f\"cv all without clipping: {round(np.mean(scores), 6)}\")\nprint(f\"cv all with clipping: {round(np.mean(scores_clip), 6)}\")\n\nsubmit = pd.concat(submits, axis=0)\nfilename = \"submission_agg_all_manually_nocliped.csv\"\nsubmit.to_csv(filename, index=False)\n\nsubmit_clip = pd.concat(submits_clip, axis=0)\nfilename = \"submission_agg_all_manually_cliped.csv\"\nsubmit_clip.to_csv(filename, index=False)","fb048f8e":"### Test","b12d8e72":"## Model","7d89f2ca":"## Preprocess","ccaae95d":"### Validation","958f5b87":"**https:\/\/www.kaggle.com\/takaishikawa\/no-ml-modeling**","604f50ff":"**Upset is more likely to happen in men's tournament than [women's](https:\/\/www.kaggle.com\/takaishikawa\/no-ml-modeling-ncaaw2020)**","cabd03c1":"### Loop","b3a8c931":"**This notebook predicts the probability of the occurrence of the upset, which means that the low seed rank team beats the high seed rank team, aggregating past game results**"}}