{"cell_type":{"174e13a5":"code","cb1fa461":"code","c82b3956":"code","ba2497ea":"code","37b14cb2":"code","358a075c":"code","aa01e01e":"code","2b1af572":"code","61d795bc":"code","3d023040":"code","310af460":"code","ad38ac1e":"code","8697d2db":"code","e166fafa":"code","3435871f":"code","7fd9e33a":"code","6ed3e73d":"code","aca5e49d":"code","a7069b28":"code","50d58f41":"code","3337d3ab":"code","0bf36c22":"markdown","21bf0e66":"markdown","35864270":"markdown","6f76801e":"markdown","d02f4093":"markdown","d5cfa336":"markdown","0884fc1b":"markdown","d201b1d2":"markdown","a055b947":"markdown","a537320c":"markdown","2d2c0aab":"markdown","fbd68434":"markdown","47f69b60":"markdown","fb8f3d25":"markdown","1acc78e2":"markdown","ff80b556":"markdown","f4e93b76":"markdown","fe1aa413":"markdown","3ff9d800":"markdown","64b46238":"markdown","b77d8454":"markdown","9b117098":"markdown","a210a54f":"markdown","ee36f443":"markdown","be1b0f5e":"markdown","652786d3":"markdown","70a256e5":"markdown","54cf1458":"markdown","aa1c8cab":"markdown","2c953979":"markdown","9ed54769":"markdown","52bea630":"markdown","deecf4bf":"markdown","3f9a5a57":"markdown","72e8d662":"markdown","507ad795":"markdown","7f982fdc":"markdown","7d4e47e7":"markdown","edebaec2":"markdown","dcd9c185":"markdown","a4d40147":"markdown","dbe06dd9":"markdown","1441e923":"markdown","5f7c27f3":"markdown","2b2d738f":"markdown","bf750938":"markdown","cdf29a8d":"markdown","03d78dca":"markdown","5592a35e":"markdown","606e174f":"markdown","a74a7bb4":"markdown","8a0f22e6":"markdown","d77aa2af":"markdown"},"source":{"174e13a5":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n%matplotlib inline","cb1fa461":"x = np.random.randint(1,10,(5,1))\ny = x**2\nplt.plot(x,y)\nplt.title('Random Functional Plot')\nplt.xlabel('X Values')\nplt.ylabel(\"X Squared Values\")\n#As we can see, a plot is created","c82b3956":"plt.subplot(2,2,1)\nplt.plot(x,y,'r') #At position 1, a red colored plot\nplt.title('Position 1')\nplt.subplot(2,2,2)\nplt.title('Position 2')\nplt.plot(x,y,'k') #At position 2, a black colored plot\nplt.subplot(2,2,3)\nplt.title('Position 3')\nplt.plot(x,y,'b') #At position 3, a blue colored plot\nplt.subplot(2,2,4)\nplt.title('Position 4')\nplt.plot(x,y) #At position 4, the default colored plot\n\nplt.tight_layout()","ba2497ea":"x = np.linspace(0,5,10)\ny = x**2\nprint(x,y)","37b14cb2":"fig1 = plt.figure(figsize=(5,5))\naxes1 = fig1.add_axes([0.1,0.1,0.9,0.9]) #Left,bottom,width,height of axes\naxes1.set_xlabel('Days')\naxes1.set_ylabel('Days Squared')\naxes1.set_title('Chart')\naxes1.plot(x,y,label='x|x*x')\naxes1.plot(y,x,label='x*x|x')\naxes1.legend(loc=0) #1 upper right, 2 upper left, 3 lower left, 4 lower right\n\naxes2 = fig1.add_axes([0.5,0.5,0.3,0.3])\naxes2.set_xlabel('Days')\naxes2.set_ylabel('Days Squared')\naxes2.set_title('Chart')\naxes2.plot(x,y)\naxes2.text(0,35,'Message')","358a075c":"fig2,ax = plt.subplots(figsize=(8,4),nrows=1,ncols=3)\nplt.tight_layout()\nax[1].set_title('Plot 2')\nax[1].set_xlabel('X Values')\nax[1].set_ylabel('X Squared Values')\nax[1].plot(x,y,label='x|x*x')\nax[1].legend(loc=0)\n","aa01e01e":"fig3 = plt.figure(figsize=(6,3))\naxiss = fig3.add_axes([0,0,1,1]) #Using the full canvas\naxiss.plot(x, y, color='navy', alpha=0.75, lw=1,marker='o',ls='-.',markersize=7,markerfacecolor='y',markeredgecolor='y')\n\naxiss.grid(True,color='0.6',dashes=(5,2,1,4))\naxiss.set_facecolor('#FAEBD7')","2b1af572":"fig3.savefig('PlotSimple.jpg')","61d795bc":"df = pd.read_csv('https:\/\/raw.githubusercontent.com\/derekbanas\/matplotlib\/master\/icecreamsales.csv')\ndf.sort_values('Temperature',inplace=True)\ndf","3d023040":"figg = plt.figure(figsize=(5,5))\naxisi = figg.add_axes([0,0,1,1])\naxisi.set_xlabel('Temperature')\naxisi.set_ylabel('Ice Cream Sales')\naxisi.set_title('Ice Cream Sales vs Temperature')\naxisi.plot(df['Temperature'],df['Sales'],color='navy', alpha=0.75, lw=1,marker='*',ls='dotted')\n\n","310af460":"fig_5 = plt.figure(figsize=(10,4),dpi=100)\naxes_5 = fig_5.add_axes([0.1,0.1,0.9,0.9])\n\n# All listed plus kappa, iota, zeta, nu, rho, eta, xi, omicron, gamma, tau, phi, \n# chi, psi, delta (Capitalize the first letter for uppercase)\naxes_5.text(0, 23, \n            r'$\\alpha \\beta \\sigma \\omega \\epsilon \\mu \\pi \\theta \\lambda$', fontsize=18)\n# Subscripts, multiletter superscript, sum, fractions, binomial\naxes_5.text(0, 18, \n            r'$\\delta_i \\gamma^{ij} \\sum_{i=0}^\\infty x_i \\frac{3}{4} \\binom{3}{4}$', \n            fontsize=18)\n# Another fraction, sqrt, cbrt, trig functions : \naxes_5.text(0, 13, \n            r'$\\frac{8 - \\frac{x}{5}}{8} \\sqrt{9} \\sin(\\pi) \\sqrt[3]{8} \\acute a \\div$', \n            fontsize=18)\naxes_5.text(0, 8, \n            r'$\\bar a \\hat a \\tilde a \\vec a \\overline {a} \\lim_{x \\to 2} f(x) = 5$', \n            fontsize=18)\naxes_5.text(0, 3, \n            r'$\\geq \\leq \\ne$', \n            fontsize=18)\naxes_5.plot(x,y)\n","ad38ac1e":"# Roll 2 6 sided dies get the sum and plot the histogram\n\narr_1 = np.random.randint(1,7,7000)\narr_2 = np.random.randint(1,7,7000)\n\narr_3 = arr_1 + arr_2","8697d2db":"plt.hist(arr_3,density=True,stacked=True)","e166fafa":"x = ['Nuclear', 'Hydro', 'Coal', 'Gas', 'Solar', 'Wind', 'Other']\npercen = [71, 10, 3, 7, 2, 4, 3]\n\nplt.bar(x, percen, color='orange')","3435871f":"m_eng = (76, 85, 86, 88, 93)\nf_eng = (24, 15, 14, 12, 7)\n\n# Get evenly spaced values for each interval\n\nspc = np.arange(5)\n\n# Plot bars for men & women\n# Can also add yerr, xerr, \n\nplt.bar(spc, m_eng, width=0.45, label='Male', edgecolor='k')\nplt.bar(spc + 0.45, f_eng, width=0.45, label='Female', edgecolor='k')\n\n# Define x tick names and place in middle of bars\n\nplt.xticks(spc + 0.45 \/ 2, ('Aero', 'Chem', 'Civil', 'Elec', 'Mech'))\n","7fd9e33a":"t_type = ['Kind', 'Elem', 'Sec', 'Spec']\nm_teach = np.array([2, 20, 44, 14])\nf_teach = np.array([98, 80, 56, 86])\n\nind = [x for x in range(len(t_type))]\n\n# Plot stacked bars for men and then women under\n\nplt.bar(t_type, m_teach, width=0.45, label='Male',bottom=f_teach)\nplt.bar(t_type, f_teach, width=0.45, label='Female')\n\nplt.legend(loc='lower right')","6ed3e73d":"import random\n\nfig_6 = plt.figure(figsize=(8,5),dpi=100)\naxes_6 = fig_6.add_axes([0.1,0.1,0.9,0.9])\n\n# Create a pie chart of the number of Pokemon by type\n\ntypes = ['Water', 'Normal', 'Flying', 'Grass', 'Psychic', 'Bug', 'Fire', 'Poison',\n'Ground', 'Rock', 'Fighting', 'Dark', 'Steel', 'Electric', 'Dragon', 'Fairy',\n'Ghost', 'Ice']\n\npoke_num = [133, 109, 101, 98, 85, 77, 68, 66, 65, 60, 57, 54, 53, 51, 50, 50, 46, 40]\n\nexplode = [0] * 18\nexplode[0],explode[1] = 0.4,0.3\n\ncolors = []\n\nfor i in range(18):\n    colors.append((random.uniform(0,1),random.uniform(0,1),random.uniform(0,1)))\n\nplt.pie(poke_num,colors=colors,labels=types,explode=explode,autopct='%.0f%%')","aca5e49d":"# Country array\ncnt_arr = np.array(['Australia','Brazil','Canada','Chile','France','Germany','Greece',\n                   'Iceland','India','Iran','Italy','Mexico','New Zealand','Nigeria',\n                   'Norway','Pakistan','Peru','Russia','Saudi Arabia','Singapore',\n                   'South Africa','Spain','Sweden','Turkey','UK','US'])\n# Death rate per 100k Coronavirus\ndr_arr = np.array([1.8,53,24.5,56.5,45.4,11.2,2.2,\n                   2.8,4,24.6,58.6,46.3,.5,.5,\n                   4.9,2.9,83.3,11,10.4,.5,\n                   21.5,61.6,56.9,7.3,62.4,52.9])\n# Daily confirmed cases (Tests)\ntest_arr = np.array([110,7197,600,1862,1636,1103,35,\n                   10,295,1658,1226,2490,8,243,\n                   48,1395,1101,4447,1443,280,\n                   2830,1602,447,1205,1546,24988])\n# Dot size Confirmed cases\ncc_arr = np.array([24236,3456652,125408,390037,256534,229706,7684,\n                   2035,2836925,350279,255278,537031,1654,50488,\n                   10162,290445,549321,935066,302686,56031,\n                   596060,370867,85411,253108,323008,5529824])\n\ncolor_arr = np.random.rand(26)\n\nplt.title('Death Rate per 100k vs. Confirmed Cases')\nplt.xlabel('Death Rate per 100k')\nplt.ylabel('Confirmed Cases')\nplt.scatter(dr_arr,test_arr,c=color_arr,s=cc_arr\/1000,alpha=0.5)","a7069b28":"# Needed for creating 3D axes\nfrom mpl_toolkits import mplot3d\n\nfig_9 = plt.figure(figsize=(8,5),dpi=100)\naxes_9 = fig_9.add_axes([0.1,0.1,0.9,0.9], projection='3d')\n\nz_3 = 15 * np.random.random(100)\nx_3 = np.sin(z_3) * np.random.randn(100)\ny_3 = np.cos(z_3) * np.random.randn(100)\n\naxes_9.scatter3D(x_3, y_3, z_3, c=z_3, cmap='Blues')\n\n\n\n#The darker plots are supposed to be closer and lighter ones are farther away","50d58f41":"fig_9 = plt.figure(figsize=(8,5),dpi=100)\naxes_9 = fig_9.add_axes([0.1,0.1,0.9,0.9], projection='3d')\n\ndef get_z(x, y):\n    return np.sin(np.sqrt(x**2 + y**2))\n\nx_4 = np.linspace(-6, 6, 30)\ny_4 = np.linspace(-6, 6, 30)\n\n# Creates a rectangular grid out of 2 given 1D arrays\nx_4, y_4 = np.meshgrid(x_4, y_4)\nz_4 = get_z(x_4,y_4)\n\n# Change viewing angle to reorient camera 60 degrees and rotate 55\naxes_9.view_init(45,55)\n\n# Provide x, y, z, contours and color map\naxes_9.contour3D(x_4,y_4,z_4,80,cmap='Blues')\naxes_9.set_xlabel('x')\naxes_9.set_ylabel('y')\naxes_9.set_zlabel('z')","3337d3ab":"symptoms = [\"Coronavirus\",\"Influenza\",\"Pneumonia\",\"Dyspnea\"]\ndates = [\"Jun28\",\"Jul05\",\"Jul12\",\"Jul19\",\"Jul26\",\"Aug02\",\"Aug09\",\"Aug16\",\"Aug21\"]\nsymp_per = np.array([[5.2, 5.5, 5.7, 5.6, 5.3, 5.1, 5.0, 4.9, 5.3],\n                    [3.5, 4.0, 4.3, 3.9, 3.5, 3.2, 2.7, 2.2, 2.0],\n                    [1.8, 2.2, 2.3, 2.2, 2.1, 1.9, 1.7, 1.4, 1.3],\n                    [1.0, 1.1, 1.1, 1.0, 0.9, 0.8, 0.8, 0.8, 0.7]])\n\nfig_10, axes_10 = plt.subplots()\n# Dfine data to use and color map\nim = axes_10.imshow(symp_per, cmap=\"Wistia\")\n\n# Add ticks at data points and labels\naxes_10.set_xticks(np.arange(len(dates)))\naxes_10.set_yticks(np.arange(len(symptoms)))\naxes_10.set_xticklabels(dates)\naxes_10.set_yticklabels(symptoms)\n\n# Rotate labels on the bottom so they don't overlap\nplt.setp(axes_10.get_xticklabels(), rotation=45, ha=\"right\",\n         rotation_mode=\"anchor\")\n\n# Loop over data dimensions and create text annotations.\nfor i in range(len(symptoms)):\n    for j in range(len(dates)):\n        text = axes_10.text(j, i, symp_per[i, j],\n                     ha=\"center\", va=\"center\", color=\"k\",fontweight=\"bold\")\n","0bf36c22":"Now, that we have created our three canvas, we  filled the second one. We can access the plots by specifying the position number along with the axes object like axes[position]","21bf0e66":"Here, we used the plt.tight_layout() to remove the spacing between plots and distinguish them from overlapping","35864270":"Now, we will look at how we can multiple plots in Matplotlib.\n\nInorder to plot multiple plots, we have a very useful function called \"plt.subplot()\".\n\nplt.subplot(r,c,po) takes in 3 arguments and they are:\n\n1. r:- Number of rows\n2. c:- Number of columns\n3. po:-position of the particular plot\n\nBy specifying the r,c values, we divide the entire space into a matrix form of rows and columns. Then by specifying the position we can plot a particular plot in that place.\n\nIn the example below, I will be taking 4 different plots and plot them in 2*2 matrix","6f76801e":"## Using Figure Objects","d02f4093":"## TeX Markup","d5cfa336":"## Functional Plot","0884fc1b":"## Subplots","d201b1d2":"# Matplotlib Tutorial","a055b947":"## Print Multiple Plots","a537320c":"Bins reprsent the number of options available 2 thru 12 = 11\n\nDensity returns the frequency of each bin\n\nRange gets tuple with bin range interested in\n\ncumulative=True use a cumulative distribution\n\nhisttype='step' genrates a line plot\n\norientation='horizontal' \n\ncolor='orange' change bar color","2d2c0aab":"In this tutorial, we are gonna have a brief overview on one of the most common and oldest visualization library, Matplotlib.\n\nMatplotlib is a visualization library upon which the more refined libraries like Seaborn are built upon but its importance stays the same.\n\nWe can use Matplotlib to create visually appealing plots like Barplots,pie charts,scatter plots etc which help us convey the insights in a decorative way such that viewers can interpret easily","fbd68434":"And for the final example, let us also see how we can stack the two bar plots one upon other.\n\n3. Plot the teachers by sex in various stages of the teaching life","47f69b60":"## Save Visualization to a file","fb8f3d25":"## Import","1acc78e2":"Now let us look at the next problem\n\n2. Show percentages of males & females in engineering","ff80b556":" Default colors (b: blue, g: green, r: red, c: cyan, m: magenta,\n\n1. y: yellow, k: black, w: white)\n2. color=\"0.75\" creates a 75% gray\n3. You can use hexcodes color=\"#eeefff\"\n4. You can use color names found next like this color=\"burlywood\"\n5. https:\/\/en.wikipedia.org\/wiki\/Web_colors\n6. alpha defines the percentage of opacity\n7. The default line width is 1, so to double it put in 2 and so forth\n\n8. There are many line styles \n9. matplotlib.org\/3.1.0\/gallery\/lines_bars_and_markers\/linestyles.html\n10. You can also provide a sample like '-.'\n\n11. Markers can mark your provided points on the graph\n12. https:\/\/matplotlib.org\/3.3.0\/api\/markers_api.html\n13. You can change the markersize as well\n\n14. markerfacecolor changes the marker fill color\n15. markeredgecolor changes the marker stroke color\n16. markeredgewidth changes the markers stroke size","f4e93b76":"## 3D Surfaces","fe1aa413":"We can even create contour plots by defining a function for z based on x & y","3ff9d800":"So, the data that we are gonna work with is the \"COVID Effect\" data which contains:-\n1. List of Country Names\n2. Death Rate per 100k \n3. Daily Confirmed Cases\n4. Dot Size of Confirmed Cases (Optional) (This refers to the intensity of cases in different countries)\n\nWe are gonna plot a scatter plot on \"Death Rate per 100k vs Daily Confirmed Cases\" and try to take in the intensity as well\n","64b46238":"1. Analyze the various sources from which the electricity of France comes from","b77d8454":"## Bar Charts","9b117098":"Now that we have the sorted dataframe, let us plot the columns of \"Temperature\" and \"Sales\" and see the results","a210a54f":"For plotting stacked bar plots, we use the parameter \"bottom\" and use it to place the upcoming plot. \n\nFor 2 bar plots, bottom=second_col while specifying the first one","ee36f443":"Till now, we have seen the usage of plt.subplot(r,c,pos) and now let us look at another plotting function which is \"plt.subplots()\"\n\nplt.subplots() is used to create subplots but in this case, the code readability increases and so do does the distinguishing. \n\nplt.subplots() takes in the argument of \"figsize\" and \"nrows\" used to define number of rows and \"ncols\" for number of columns","be1b0f5e":"Let us now see how we can plot the values in a simple DataFrame and see the results.\n\nThe dataframe that I'm gonna use is called the 'Icecream dataset\" which has two columns named \"Temperature\" and \"Sales\" which denotes the sales of icecream based on temperature\n\nHere's the link to the Dataframe:- https:\/\/raw.githubusercontent.com\/derekbanas\/matplotlib\/master\/icecreamsales.csv\n\n","652786d3":"Now, let us use the knowledge of these figure objects and combine them with our subplots to easily create and manage multiple plots by using subplots","70a256e5":"Let us now look at how we can do various kinds of scatter plots with the data we  can posess","54cf1458":"Now, let us understand the code in detail.\n\nFirst, we created a figure object called fig1 by using \"plt.figure()\" and specifying the \"figsize=(5,5)\" \n\nNow that the canvas is created, the next step is to specify the location of the axes.\n\nWe did this by using fig1.set_axes([left,bottom,width,height]). These values range from 0 to 1 and are used to determine how much space is our plot occupying in the canvas of figure 1 and assigned it to \"axes1\".\n\nSo, after setting the axes size, we then specified the \"xlabel\" and \"ylabel\" by using axes1.set_xlabel() and axes1.set_ylabel()\n\nOnce the labels and title is done, the next step is to plot the plot.\n\nWe can do this by using axes1.plot(x,y,label='label')\n\nFinally we created a legend to diffrenciate the two plots.\n\n\nAfter finishing the plot1, we created another axes object in the same canvas and plotted these two plots in the same canvas","aa1c8cab":"Now, let us create two variables containing the 5000 observation values of rolling a fair dice and get the sum to plot the histogram.\n\nA Histogram can be defined as a diagram consisting of rectangles whose area is proportional to the frequency of a variable and whose width is equal to the class interval.\n\nWe can use the randint() function in numpy to create the values","2c953979":"As we can see from above, we can further more use \"plt.title()\" , \"plt.xlabel()\" and \"plt.ylabel()\" to give a title to the plot and specify the names of X and Y axis","9ed54769":"So, the default syntax for creating a figure element is:-  \"plt.figure(figsize=(width,inches))\".\n\nAfter creating one and assigning it to a variable,we can operate it just like we use \"plt\" functions","52bea630":"## Heatmaps","deecf4bf":"## Appearance Options","3f9a5a57":"So, what we did here was that, we created an index by using np.arange() and used it to first plot both the barcharts.\n\nThen, we passed on the values of the columns in the \"plt.xticks()\" function and located them at the middle of each chart","72e8d662":"## Working with Pandas DataFrames","507ad795":"We need to know a bunch of things before setting off to plot the data in a pie chart. Let us know what they are\n\n1. Colors:- For pie charts, the most distinguished feature is its color. Although there are numerous ways in which we can create colors in pie chart, we will be looking at one of the way.\n\nColors in Matplotlib must be passed as an array in pie chart which makes it harder for us to type them as a list for huge number of columns.\n\nSo instead, we are gonna use the \"random\" module in python to import 3 random numbers which will define a color as rgb(x,y,z). Then we can iterate these by using a loop and append to a \"colors\" variable as a list\n\n2. explode:- \"explode\" defines which single data that we want to explode after creating the pie chart. Usually we use explode to explode the most important or the highest feature. explodemust contain the list of sizes of all elements that must be exploded.\n\nFor 18 elements, if we want to explode two elements, explode = [0.2,0,4,0,........,0]\n\n\n3. labels :- Defines the names of the various entries we are gonna create a pie chart for\n\n\n4. autopct :- We use this to specify the percentage of all the values in pie chart","7f982fdc":"## Scatter Plots","7d4e47e7":"Now, lets move on and see how we can plot pie charts","edebaec2":"# End","dcd9c185":"The last in the above code refers to the plotting in this Jupyter Notebook. By specifying the matplotlib to inline, we are making to sure make the plots by using Matplotlib to appear in this notebook","a4d40147":"Here, we used the \"plt.scatter()\" function to plot a scatter plot along with its various parameters.\n\n1. c :- Refers to the color array which we created using rand function in Numpy.\n\n2. s :- Refers to the size of each bubble and here it reperesents the intensity of COVID in different countries. Higher the size, higher the intensity\n\n3. alpha :- Refers to the opaqueness of the scatter points which scales from 0(transparent) to 1(opaque)","dbe06dd9":"To begin with, let us create a simple plot between two random range of values by using numpy.\n\nTo create a simple plot, we can use \"plt.plot()\" function of matplotlib as shown below","1441e923":"Now, let us look at how we can create heatmaps by taking in the data\n\nA heatmap is a color coded representation of data from a 2D list.\n\nFor this heatmap, we are gonna use a sample data consisting:\n\n1. Symptoms :- A list of symptoms\n2. dates :- A list of dates\n3. sym_per :- List of list of symptom percentages on the dates","5f7c27f3":"We can use TeX Markup to display various mathematical and statistical symbols within our plot which will be shown below.\n\nYou can use a subset of TeX markup by placing text between $ and using raw strings which comes under r''.\n\nMore details can be found in :- https:\/\/matplotlib.org\/stable\/tutorials\/text\/mathtext.html","2b2d738f":"Now, let us take various examples to see how we can create some barcharts out of the information that we have","bf750938":"So, a figure in Matplotlib is an object which can contain all the plot elements, axes, labels, legend etc. \n\nWe mainly use figure objects to plot our own custom plots within plots, display messages and whole bunch of things.\n\nLet us now create two random lists x and y where x is just a list containing 10 equally spaced values from 0 to 5 and y is the squaree of them","cdf29a8d":"## Histograms","03d78dca":"Here, we use \"plt.bar()\" function inorder to plot Bar Charts which takes in the parameters of x and y as usual along with optional parameters. Let us look at a few of them below\n\nFor using the variance of the data or the \"Error Possibility Range\", we use the \"yerr\" parameter and set it to a list of error ranges\n\n* barh makes horizontal chart\n\nAlso for \"yerr\", we can change error color with ecolor","5592a35e":"## Pie Charts","606e174f":"Now, let us look at how we can create and plot 3D surfaces in Matplotlib","a74a7bb4":"So, let us understand what is happening here.\n\nWhen we used the \"plt.hist()\" function which creates a histogram, we specified \"bins=11\".\n\nBins here refer to the total number of possible outcomes that are possible when we add the values in two dice. We get a total possible outcomes of 11 which are sum=[2,3,4,5,6,7,8,9,10,11,12]\n\n\"density\" refers to the probability of occurance of the sum in the array 3 while stacked returns the values","8a0f22e6":"Now, let us quickly run through some of the appearance options avaliable to us. This topic isnt hugely code-centric as appearance can easily be adjusted by the beginners by just googling the stuff","d77aa2af":"Inorder to save the visualizations in our local system, we can use the \"savefig()\" function in Matplotlib\n\nThe savefig() function takes in the name of the pic to be kept when saved followed by its extension."}}