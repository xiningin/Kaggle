{"cell_type":{"27415147":"code","8cf3d19d":"code","7b705884":"code","92094957":"code","f35fd627":"code","201e01b9":"code","90ef1906":"code","49ad2d2f":"code","0aa26300":"code","935b00c5":"code","3ab6cf83":"code","33b57ed1":"code","7c3bf543":"code","2092c58e":"code","4c492abd":"code","59d175cd":"code","8d09c13d":"code","270bd070":"code","3282f8b6":"code","835e871c":"code","5865e880":"code","c439e1f9":"code","beaf6c85":"code","e8626891":"code","74690a62":"code","59e564d2":"code","f0dc9dd3":"code","139d792c":"code","0a889139":"code","32542ef7":"code","bf2194d6":"code","ea26f5fe":"code","c70bece8":"code","ea43b1aa":"code","7f6e50f0":"code","b420ef20":"code","55b580ee":"code","51eb65e2":"code","b993cb6e":"code","b7a674a8":"code","742eb0c3":"code","fa0163d7":"code","5a1aaceb":"code","f5d5f3a3":"code","532a20f2":"code","a8fb1c19":"code","345fe661":"code","ebe34b9a":"code","cec59038":"code","2bb95cc5":"markdown","cdee88d7":"markdown","b2543bf3":"markdown","09b0ea21":"markdown","47b9d173":"markdown","ddcce62a":"markdown","3758a5a6":"markdown","536f38f1":"markdown","43386c4d":"markdown","b3c587f5":"markdown","36711997":"markdown","14e8982c":"markdown","9f17b3fd":"markdown","dac7371d":"markdown","29f90dbd":"markdown","d663d496":"markdown","1a879b24":"markdown","5eb8524e":"markdown","2823edc0":"markdown","4e880935":"markdown","6ba767f9":"markdown","f115dde2":"markdown","f3c7e1f8":"markdown","a620bfc8":"markdown","e0d707fb":"markdown","170c8715":"markdown","179b1c94":"markdown","fe119224":"markdown","d8d97366":"markdown","bcf0d565":"markdown","95a17af1":"markdown","c7d21f3f":"markdown","dc61a95e":"markdown","c34e392d":"markdown","7d77f63a":"markdown","2851da86":"markdown","2aa255c9":"markdown","63a9f2b3":"markdown","35a380f8":"markdown","3e0b8171":"markdown","93815004":"markdown","ad2ed068":"markdown","4ecea11c":"markdown","097fa750":"markdown","98b5e433":"markdown","f8955745":"markdown","08462085":"markdown","b6b271c4":"markdown","637e5956":"markdown","66cfa80f":"markdown","6e1a69ce":"markdown","8b9db2a1":"markdown","7a7b58ec":"markdown","06ee48fe":"markdown","3efcb2b0":"markdown","a008e856":"markdown","e2c561c4":"markdown","e6cb0510":"markdown","e6db31cb":"markdown","4339dd2b":"markdown","ea237768":"markdown"},"source":{"27415147":"import pandas as pd\nimport numpy as np\nimport matplotlib as plt\nimport plotly.plotly as py\nimport geopandas\nfrom shapely.geometry import Point\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","8cf3d19d":"df=pd.read_csv(\"..\/input\/911.csv\")","7b705884":"# total entries , Data types , Memory Usage...\ndf.info()","92094957":"# Stastical describtion about \ndf.describe()","f35fd627":"#prints the head of dataframe- top 5 values by default\ndf.head()","201e01b9":"# Dropping the dummy column 'e' which can done in below 2 ways.\n#df.drop('e', axis=1, inplace=True)\ndel df['e']","90ef1906":"df['timeStamp'] = pd.to_datetime(df['timeStamp'])","49ad2d2f":"#Splitting the Title\ndf['reason']=df['title'].apply(lambda i:i.split(':')[0])","0aa26300":"df['Detail reason']=df['title'].apply(lambda i:i.split(':')[1])","935b00c5":"df['Hour'] = df['timeStamp'].apply(lambda time: time.hour)\ndf['Month'] = df['timeStamp'].apply(lambda time: time.month)\ndf['Day of Week'] = df['timeStamp'].apply(lambda time: time.dayofweek)\ndf['Year'] = df['timeStamp'].apply(lambda t: t.year)\ndf['Date'] = df['timeStamp'].apply(lambda t: t.day)","3ab6cf83":"dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\ndf['Day of Week'] = df['Day of Week'].map(dmap)","33b57ed1":"#getting details of station \ndf['Station'] = df['desc'].str.extract('(Station.+?);',expand=False).str.strip()","7c3bf543":"df[\"day\/night\"] = df[\"timeStamp\"].apply(lambda x : \"night\" if int(x.strftime(\"%H\")) > 18 else \"day\")","2092c58e":"df.head()","4c492abd":"sns.countplot(x='day\/night',data=df)\nsns.set_style(\"darkgrid\")","59d175cd":"df.Station.value_counts().head(10)","8d09c13d":"plt.figure(figsize=(20,10))\nsns.set_context(\"paper\", font_scale = 2)\nsns.countplot(y='Station', data=df, palette=\"bright\", order=df['Station'].value_counts().index[:20])\nplt.title(\"Top 10 Station with highest call\")\nsns.set_style(\"darkgrid\")\nplt.show()\n","270bd070":"sns.countplot(x='reason',data=df,palette='magma')\nsns.set_style(\"darkgrid\")","3282f8b6":"plt.figure(figsize=(10,8))\nsns.countplot(x='Day of Week',data=df,hue='reason',palette='cividis')\nplt.title(\"Calls on each days of the week\")\nsns.set_style(\"darkgrid\")\nplt.show()","835e871c":"plt.figure(figsize=(15,8))\nsns.countplot(x='Month',data=df,hue='reason',palette='hot')\nplt.title(\"Calls Count during each Month \")\nsns.set_style(\"darkgrid\")\nplt.show()","5865e880":"# Plot for calls recieved monthly combined of all years:\nplt.figure(figsize=(12,6))\nsns.countplot(x='Month',data=df,palette='spring')\nplt.title(\"Total Calls recieved Monthly For all Years\")\nsns.set_style(\"darkgrid\")\nplt.show()","c439e1f9":"# Plot for calls recieved yearly:\nsns.countplot(x= \"Year\", data= df,palette='RdYlGn_r')\nplt.title(\"calls recieved on yearly basis\")\nsns.set_style(\"darkgrid\")\nplt.show()","beaf6c85":"plt.figure(figsize=(14,7))\nsns.set_context(\"paper\", font_scale = 2)\nsns.countplot(x= \"reason\", data= df, palette=\"bright\" ,hue= \"Year\")\nplt.title(\" Calls Reason Yearly\")\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nsns.set_style(\"darkgrid\")\nplt.show()","e8626891":"plt.figure(figsize=(14,7))\nsns.set_context(\"paper\", font_scale = 2)\nsns.countplot(x= \"Year\", data= df, palette=\"Paired\", hue = \"reason\")\nplt.title(\" Calls Reason Yearly having the hue of reasons\")\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nsns.set_style(\"ticks\")\nplt.show()","74690a62":"plt.figure(figsize=(14,7))\nsns.set_context(\"paper\", font_scale = 2)\nsns.countplot(x= \"Day of Week\", data= df, palette=\"cubehelix\", hue= \"Year\" )     \nplt.title(\" Daily Calls By Year \")\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nsns.set_style(\"white\")\nplt.show()","59e564d2":"plt.figure(figsize=(14,7))\nsns.set_context(\"paper\", font_scale = 2)\nsns.countplot(x= \"Day of Week\", data= df, palette=\"autumn\", hue= (\"reason\") )     \nplt.title(\" Day Calls By Reason \")\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nsns.set_style(\"darkgrid\")\nplt.show()","f0dc9dd3":"plt.figure(figsize = (14,7))\n\nsns.set_context(\"paper\", font_scale=2)\nsns.countplot(data= df, x= \"Month\", hue= \"Year\", palette=\"gist_earth\")\n\nplt.title(\" Monthly Calls Yearly\")\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nsns.set_style(\"ticks\")\nplt.show()","139d792c":"plt.figure(figsize=(14,7))\nsns.set_context(\"paper\", font_scale = 2)\nsns.countplot(x= \"Month\", data= df, palette=\"copper\", hue= \"reason\")\nplt.title(\" Monthly Calls Category Combined All Years\")\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nsns.set_style(\"darkgrid\")\nplt.show()","0a889139":"df['Detail reason'].value_counts().head(20)","32542ef7":"plt.figure(figsize=(25,10))\nsns.set_context(\"paper\", font_scale = 2)\nsns.countplot(y='Detail reason', data=df, palette=\"bright\", order=df['Detail reason'].value_counts().index[:20])\nplt.title(\"Top 10 Cases registered\")\nsns.set_style(\"darkgrid\")\nplt.show()","bf2194d6":"#df.groupby(['zip']).nunique()\ndf.zip.value_counts().head(5)","ea26f5fe":"plt.figure(figsize=(25,10))\nsns.set_context(\"paper\", font_scale = 2)\nsns.countplot(x='zip', data=df, palette=\"seismic_r\", order=df['zip'].value_counts().index[:20])\nplt.title(\"top 5 zipcodes for 911 calls\")\nsns.set_style(\"darkgrid\")\nplt.show()","c70bece8":"plt.figure(figsize=(25,10))\nsns.set_context(\"paper\", font_scale = 2)\nsns.countplot(x='zip', data=df, palette=\"seismic_r\", order=df['zip'].value_counts().index[:20],hue='reason')\nplt.title(\"top 5 zipcodes for 911 calls\")\nsns.set_style(\"darkgrid\")\nplt.show()","ea43b1aa":"df.twp.value_counts().head(10)","7f6e50f0":"plt.figure(figsize=(25,10))\nsns.set_context(\"paper\", font_scale = 2)\nsns.countplot(y='twp', data=df, palette=\"spring\", order=df['twp'].value_counts().index[:20])\nplt.title(\"top 20 township for 911 calls\")\nsns.set_style(\"darkgrid\")\nplt.show()","b420ef20":"plt.figure(figsize=(25,20))\nsns.set_context(\"paper\", font_scale = 2)\nsns.countplot(y='twp', data=df, palette=\"gist_heat\", order=df['twp'].value_counts().index[:10],hue='reason')\nplt.title(\"top 20 township for 911 calls with Hue Reason\")\nsns.set_style(\"darkgrid\")\nplt.show()","55b580ee":"plt.figure(figsize=(25,100))\nsns.set_context(\"paper\", font_scale = 2)\nsns.countplot(y='twp', data=df, palette=\"bright\", order=df['twp'].value_counts().index[:5],hue='Detail reason')\nplt.title(\"Top 10 Cases registered\")\nsns.set_style(\"darkgrid\")\nplt.show()","51eb65e2":"df['Coordinates'] = list(zip(df.lng, df.lat))","b993cb6e":"df['Coordinates'] = df['Coordinates'].apply(Point)","b7a674a8":"gdf = geopandas.GeoDataFrame(df, geometry='Coordinates')","742eb0c3":"gdf.head()","fa0163d7":"world = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))\n\n# We restrict to South America.\nax = world[world.continent == 'North America'].plot(\n    color='white', edgecolor='black')\n\n# We can now plot our GeoDataFrame.\ngdf.plot(ax=ax, color='red')\nplt.show()","5a1aaceb":"import pandas as pd\nfrom  plotly.offline import plot\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n\nscl = [ [0,\"rgb(5, 10, 172)\"],[0.35,\"rgb(40, 60, 190)\"],[0.5,\"rgb(70, 100, 245)\"],\\\n    [0.6,\"rgb(90, 120, 245)\"],[0.7,\"rgb(106, 137, 247)\"],[1,\"rgb(220, 220, 220)\"] ]\n\ndata = [ dict(\n        type = 'scattergeo',\n        locationmode = 'USA-states',\n        lon = df['lng'].head(500),\n        lat = df['lat'].head(500),\n        mode = 'markers',\n        marker = dict(\n            size = 8,\n            opacity = 0.8,\n            reversescale = True,\n            autocolorscale = False,\n            symbol = 'square',\n            line = dict(\n                width=1,\n                color='rgba(102, 102, 102)'\n            ),\n            colorscale = scl,\n            cmin = 0,\n            colorbar=dict(\n                title=\"Coordinates points \"\n            )\n        ))]\n\nlayout = dict(\n        title = '911 calls Location <br>(Hover for co ordinate names)',\n        colorbar = True,\n        geo = dict(\n            scope='usa',\n            projection=dict( type='albers usa' ),\n            showland = True,\n            landcolor = \"rgb(250, 250, 250)\",\n            subunitcolor = \"rgb(217, 217, 217)\",\n            countrycolor = \"rgb(217, 217, 217)\",\n            countrywidth = 0.5,\n            subunitwidth = 0.5\n        ),\n    )\n\nfig = dict( data=data, layout=layout )\n\niplot( fig, validate=False, filename='d3-airports' )","f5d5f3a3":"dayHour = df.groupby(by=['Day of Week','Hour']).count()['reason'].unstack()\ndayHour.head()","532a20f2":"plt.figure(figsize=(8,4))\nsns.heatmap(dayHour,cmap='inferno')\nplt.show()","a8fb1c19":"plt.figure(figsize=(8,8))\nsns.clustermap(dayHour,cmap='inferno_r')\nplt.show()","345fe661":"dayMonth = df.groupby(by=['Day of Week','Month']).count()['reason'].unstack()\ndayMonth.head()","ebe34b9a":"sns.heatmap(dayMonth,cmap='Oranges')","cec59038":"sns.clustermap(dayMonth,cmap='Purples')","2bb95cc5":"#### 12 ) Daily calls on every days of the week with Reason basis.","cdee88d7":"#### 1 ) Total Number of calls during \" Day \" time and \" Night \" Time","b2543bf3":"# Heat Maps:","09b0ea21":"#### 4. Printing the sample dataframe values","47b9d173":"### 24 ) A GeoDataFrame needs a shapely object, so we create a new column Coordinates as a tuple of Longitude and Latitude :","ddcce62a":"#### 3 ) Countplot for Top 10 station with highest calls","3758a5a6":"#### 10 ) Calls Reason Yearly having the hue of reasons","536f38f1":"#### 6 ) countplot of the Month column with the hue based off of the Reason colum","43386c4d":"### 911 Calls : Dataset ","b3c587f5":"Now, we can create the GeoDataFrame by setting geometry with the coordinates created previously.","36711997":"#### 16 ) Count plot for Cases registered. \/ Top 10 Cases registered.","14e8982c":"#### 7 ) Plot for calls recieved monthly combined of all years:","9f17b3fd":"#### 4 ) Top reasons to call 911","dac7371d":"#### 4 ) Creating the Year and Month from the timestemp column to Visualization based on time and months","29f90dbd":"#### 14 ) Monthly calls category combined all years ","d663d496":"#### 5. Data cleaning","1a879b24":"#####    1 ) Removing the dummy Column \"e\" which has all entires equals 1.","5eb8524e":"#### 28 ) Creating Heat hap with months and days of week","2823edc0":"#### 19 ) Count plot for Top 20 zip code in 911 emergnecy with hue as reason","4e880935":"#### 13 ) Monthly call rates in each year","6ba767f9":"### 5.a) Cleaning of given dataset:","f115dde2":"#### 5 ) Notice how the Day of Week is an integer 0-6. Use the .map() with this dictionary to map the actual string names to the day of the week:\n\ndmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","f3c7e1f8":"####  2 ) Converting of timeStamp object (99492,non-null,object) to DateTime objects","a620bfc8":"Finally, we plot the coordinates over a country-level map.","e0d707fb":"#### 2 ) Calculating top 10 Station with highest number of calls.","170c8715":"- plotly maps are interactive based map, where you can zoom at the given co-ordinates\n- here we are using only top 500 values, since data is not spreaded apart","179b1c94":"#### 3 ) to extract more valuable information from dataset,we Create type and subtype based on the title column","fe119224":"#### 20 ) Count plot for Top 20 township in 911 emergnecy .","d8d97366":"#### 2. Reading the dataset and storing it in dataframe(df)","bcf0d565":"#### 22 ) top 20 township for 911 calls with Hue Reason","95a17af1":"#### 1. Importing all the required library for Visualization","c7d21f3f":"#### 9 )  Count for all Calls Reason  Yearly","dc61a95e":"# Emergency - 911 Calls : Data Visualization using Python","c34e392d":"#### 27 ) Creating Clustermap with the given data","7d77f63a":"#### 11 ) Daily calls every year on days of week basis.","2851da86":"# Data Visualizing and Analysing","2aa255c9":"#### 27 ) same plots and operations, for a DataFrame that shows the Month as the column","63a9f2b3":"#### 5 ) countplot of the Day of Week column with the hue based off of the Reason column","35a380f8":"#### 21 ) visulization plot top 20 township for 911 calls","3e0b8171":"### 6 ) Extraction more details from Desc column, here using matching function i am extraction Station Number as below. ","93815004":"- visualizations really helps make things clearer and easier to understand, especially with larger, high dimensional datasets.\n- Matplotlib,seaborn,plotly is a popular Python library that can be used to create your Data Visualizations quite easily.\n- Here you learn about plots and how to create them with Matplotlib, histograms,bar charts,pie charts,box plots,scatter plots and bubble plots etc","ad2ed068":"#### In the given 911 dataset","4ecea11c":"now we have a new column called Co-ordinate, with all points","097fa750":"# Creating a GeoDataFrame from a DataFrame with coordinates","98b5e433":"### About 911 Emergency :","f8955745":"In this project we will be analyzing 911 call data from [Kaggle](https:\/\/www.kaggle.com\/mchirico\/montcoalert). The data-  contains the following fields:\n\n- lat : String variable, Latitude\n- lng: String variable, Longitude\n- desc: String variable, Description of the Emergency Call\n- zip: String variable, Zipcode\n- title: String variable, Title\n- timeStamp: String variable, YYYY-MM-DD HH:MM:SS\n- twp: String variable, Township\n- addr: String variable, Address\n- e: String variable, Dummy variable (always 1)","08462085":"#### 3. Some more details & describtion about Dataset ( total entries,data type )","b6b271c4":"- creating heatmaps with seaborn and 911 data.\n- first need to restructure the dataframe so that the columns become the Hours and the Index becomes the Day of the Week.\n- combine groupby with an unstack method.","637e5956":"#### After creating all new columns for analysis, our dataframe looks as below","66cfa80f":"#### 18 ) Count plot for Top 20 zip code in 911 emergnecy .","6e1a69ce":"Then, we transform tuples to Point :","8b9db2a1":"Data cleaning is the process of identifying and removing (or correcting) inaccurate records from a dataset, table, or database and refers to recognising unfinished, unreliable, inaccurate or non-relevant parts of the data and then restoring, remodelling, or removing the dirty or crude data.\nexamples:\n- Get Rid of Extra Spaces\n- Select and Treat All Blank Cells\n- Convert Numbers Stored as Text into Numbers\n- Remove Duplicates\n- Highlight Errors\n- Change Text to Lower\/Upper\/Proper Case\n- Spell Check\n- Delete all Formatting","7a7b58ec":"### 5.b ) Creating new variables:","06ee48fe":"#### 8) Plot for calls recieved on yearly basis:","3efcb2b0":"#### 23 ) Top 5 township and with count of Cases registered","a008e856":"#### 26 ) Creating Heat hap","e2c561c4":"# Data Visualization using Python","e6cb0510":"#### 15 ) top Cases registered in detail reasons..","e6db31cb":"A 911 emergency is when someone needs help right away because of an injury or an immediate danger. For example, call 911 if:\n- there's a fire\n- someone has passed out\n- someone suddenly seems very sick and is having a hard time speaking or breathing or turns blue\n- someone is choking\n- you see a crime happening, like a break-in\n- you are in or see a serious car accident","4339dd2b":"### 25 ) Plotting the same graph using Plotly library. ","ea237768":"#### 17 ) top 5 zipcodes for 911 calls"}}