{"cell_type":{"ebd20be7":"code","deb9c199":"code","c80c7e3c":"code","e6e1092b":"code","f9ac1f49":"code","d2b24c72":"code","f01ac07e":"code","8b5b5bb2":"code","537886f4":"code","b826e2a1":"code","79db80d5":"code","ecc2ed18":"code","5fe99523":"code","5caf31fe":"code","d2aa0ac9":"code","9a6a210e":"code","c2477aed":"code","e9868eeb":"markdown"},"source":{"ebd20be7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","deb9c199":"%%time\nbgm = pd.read_csv('\/kaggle\/input\/trans-preprocessing-2021\/BGMOPEN.csv')","c80c7e3c":"%%time\ntrans = pd.read_csv('\/kaggle\/input\/trans-preprocessing-2021\/Trans.csv')","e6e1092b":"%%time\nsubmission = pd.read_csv('\/kaggle\/input\/trans-preprocessing-2021\/CHT_JengHung_submission.csv')","f9ac1f49":"print(bgm.shape)\nprint(trans.shape)\nprint(submission.shape)","d2b24c72":"bgm.head()","f01ac07e":"trans.head()","8b5b5bb2":"submission","537886f4":"bgm.columns = ['address', 'ban', 'head_ban', 'name', 'capital', 'create_date', 'alias_name', \n              'use_invoice', 'idcode', 'idcode_name', 'idcode1', 'idcode1_name',\n              'idcode2', 'idcode2_name', 'idcode3', 'idcode3_name']","b826e2a1":"bgm.head()","79db80d5":"trans.columns = [c.lower() for c in trans.columns]","ecc2ed18":"trans.head()","5fe99523":"bgm.info()","5caf31fe":"trans.info()","d2aa0ac9":"# \u6e1b\u5c11 DataFrame \u7684\u8a18\u61b6\u9ad4\u4f7f\u7528\u91cf\nfor c in trans.columns:\n    trans[c] = trans[c].astype(np.int32) ","9a6a210e":"trans.info()","c2477aed":"###################################################################","e9868eeb":"## \u8f49\u63db\u6b04\u4f4d\u6210\u82f1\u6587\u5c0f\u5beb"}}