{"cell_type":{"ddc8ba24":"code","136ba985":"code","51b86785":"code","ffd95391":"code","c258ced7":"code","cb3d836a":"code","080efed6":"code","42b82eda":"code","21b74b67":"code","479dd9a8":"code","e53073f2":"code","cc58db69":"code","00a37e97":"code","4667b2d8":"code","c3f4b588":"code","20d6bce8":"code","9a84a26c":"code","a7e54782":"code","06c58fa6":"code","d863882c":"code","1e60a492":"code","17607510":"code","ff1535dc":"code","fc7b0a08":"code","23053059":"code","ce0d211c":"code","46c7914f":"code","6e489d16":"code","6afc3788":"code","974a4440":"code","4815d38a":"markdown","3058cc9c":"markdown"},"source":{"ddc8ba24":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","136ba985":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\n","51b86785":"train_df.head()","ffd95391":"structures = pd.read_csv('..\/input\/structures.csv')\n\ndef map_atom_info(df, atom_idx):\n    df = pd.merge(df, structures, how = 'left',\n                  left_on  = ['molecule_name', f'atom_index_{atom_idx}'],\n                  right_on = ['molecule_name',  'atom_index'])\n    \n    df = df.drop('atom_index', axis=1)\n    df = df.rename(columns={'atom': f'atom_{atom_idx}',\n                            'x': f'x_{atom_idx}',\n                            'y': f'y_{atom_idx}',\n                            'z': f'z_{atom_idx}'})\n    return df\n\ntrain_df = map_atom_info(train_df, 0)\ntrain_df = map_atom_info(train_df, 1)\n\ntest_df = map_atom_info(test_df, 0)\ntest_df = map_atom_info(test_df, 1)","c258ced7":"train_df.tail()","cb3d836a":"scalar_df = pd.read_csv('..\/input\/scalar_coupling_contributions.csv')\nscalar_df.tail()","080efed6":"test_df.tail()","42b82eda":"train_df.head()","21b74b67":"train_df['atom_1'].unique()","479dd9a8":"train_df['atom_0'].unique()","e53073f2":"test_df['atom_0'].unique()","cc58db69":"test_df['atom_1'].unique()","00a37e97":"train_df['type'].unique()","4667b2d8":"test_df['type'].unique()","c3f4b588":"#replace atom_0 and atom_1 \n#C:0,H:1,N:2\n\ntrain_df=train_df.replace({'atom_0': {'H': 0, 'C': 1,'N':2}})\ntrain_df=train_df.replace({'atom_1': {'H': 0, 'C': 1,'N':2}})\n\n#test set\n\ntest_df=test_df.replace({'atom_0': {'H': 0, 'C': 1,'N':2}})\ntest_df=test_df.replace({'atom_1': {'H': 0, 'C': 1,'N':2}})\n\n\n\n#replace type with \n# '2JHC':0, '1JHC':1, '3JHH':2, '3JHC':3, '2JHH':4, '1JHN':5, '3JHN:6', '2JHN':7\n\ntrain_df=train_df.replace({'type': {'2JHC':0, '1JHC':1, '3JHH':2, '3JHC':3, '2JHH':4, '1JHN':5, '3JHN':6, '2JHN':7}})\ntest_df=test_df.replace({'type': {'2JHC':0, '1JHC':1, '3JHH':2, '3JHC':3, '2JHH':4, '1JHN':5, '3JHN':6, '2JHN':7}})\n","20d6bce8":"#molecules to be test names are store in separate file\nmolecules_list = test_df['molecule_name']\nmolecules_list.head(2)","9a84a26c":"train_df = train_df.drop('molecule_name',axis=1)\ntrain_df = train_df.drop('id',axis=1)\n\ntest_df =  test_df.drop('molecule_name',axis=1)\ntest_df = test_df.drop('id',axis=1)\n\ntrain_df.head()","a7e54782":"test_df.head()","06c58fa6":"train_df.shape","d863882c":"test_df.shape","1e60a492":"#taking y value out from train dataframes\ny_df = train_df['scalar_coupling_constant']\n\n#removing scalar_coupling_constant from train dataframes\ntrain_df= train_df.drop('scalar_coupling_constant',axis=1)","17607510":"train_df.shape,test_df.shape,y_df.shape","ff1535dc":"#convert into numpy array\nx_train = np.array(train_df,dtype='float32')\ny_train = np.array(y_df,dtype='float32')\nx_test = np.array(test_df,dtype='float32')\n\nx_train.shape,y_train.shape,x_test.shape","fc7b0a08":"#spilit data for validation and cross check only for 20%\n\nfrom sklearn.model_selection import train_test_split\n(x_train,x_validate,y_train,y_validate) = train_test_split(\n    x_train,y_train,test_size=0.2,random_state=12345\n)","23053059":"x_train.shape,x_validate.shape","ce0d211c":"#normalise the data\n\nfrom sklearn import preprocessing\n\nx_train = preprocessing.scale(x_train)\nx_validate = preprocessing.scale(x_validate)\nx_test = preprocessing.scale(x_test)\n\n\n\n","46c7914f":"x_train.shape,x_validate.shape,x_test.shape,y_train.shape,y_validate.shape","6e489d16":"#models\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\n","6afc3788":"#error occured Unknown label type: 'continous'\n#solution found from https:\/\/www.kaggle.com\/pratsiuk\/valueerror-unknown-label-type-continuous\nfrom sklearn import utils\n\nlab_enc = preprocessing.LabelEncoder()\ny_train_encoded = lab_enc.fit_transform(y_train)\ny_validate_encoded = lab_enc.fit_transform(y_validate)\nprint(y_train_encoded)\nprint(utils.multiclass.type_of_target(y_train))\nprint(utils.multiclass.type_of_target(y_train.astype('int')))\nprint(utils.multiclass.type_of_target(y_train_encoded))","974a4440":"#1 model logistic regression\nlogreg = LogisticRegression()\nlogreg.fit(x_train, y_train_encoded)\ny_pred_lr = logreg.predict(x_test)\nprint('Training Accuracy for logistic regression is : { } '.format(logreg.score(x_train, y_train_encoded)))\nprint('Testing Accuracy for logistic regression is : { } '.format(logreg.score(x_validate, y_validate_encoded)))\n","4815d38a":"\n#arranging and merging the scalar coupling coefficient using same method\n\ndef map_scalar_atom_info(df):\n    df = pd.merge(df, scalar_df, how = 'left',\n                  left_on  = ['molecule_name', 'atom_index_0','atom_index_1','type'],\n                  right_on = ['molecule_name',  'atom_index_0','atom_index_1','type'])\n    \n\n    return df\n\ntrain_df = map_scalar_atom_info(train_df)\n\ntest_df = map_scalar_atom_info(test_df)","3058cc9c":"#arrange data merge\n#from fastai tabular Starter fork kernel"}}