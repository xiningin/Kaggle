{"cell_type":{"6f62ec2a":"code","fd3751e4":"code","43bd7196":"code","a02075ac":"code","9c27faea":"code","ef8f4ac5":"code","8c009aaa":"code","7c1a06f8":"code","3f038913":"code","56cbb5a0":"code","74145f08":"code","14da3db7":"code","cf8a75bb":"code","4cb43e52":"code","57af3ded":"code","3c1b1b51":"code","960c117d":"code","07246dfc":"code","475895a6":"code","5a952b58":"code","ad5757a6":"code","45bf47e8":"code","8faefc4f":"code","f947d1c2":"code","0752ba63":"code","0c4f6123":"code","2c44da87":"code","bc6862e4":"code","b6e9e089":"code","77bba972":"code","0b16cbba":"code","e630666f":"code","d9dbdfee":"code","800cfffa":"code","144c9c6e":"code","ce65d233":"code","fb2bc7aa":"code","35571fbd":"markdown","223f22d2":"markdown","ef341ba6":"markdown","f38a7a13":"markdown","961e4d79":"markdown","b7d91064":"markdown","6253b7ec":"markdown","438975f6":"markdown","324177b2":"markdown","239c78eb":"markdown","5fa28c18":"markdown","0a85e834":"markdown","9cf8e685":"markdown","d97a75e7":"markdown","0fc0db9b":"markdown","ea671f30":"markdown","ff265bd5":"markdown","f6131de8":"markdown","5cbd101e":"markdown","7476bdcd":"markdown"},"source":{"6f62ec2a":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nprint('Dependencies Imported')","fd3751e4":"data = pd.read_csv(\"..\/input\/coursera-courses-dataset-2021\/Coursera.csv\")\ndata.head(5)","43bd7196":"data.shape #3522 courses and 7 columns with different attributes","a02075ac":"data.info()","9c27faea":"data.isnull().sum() #no value is missing","ef8f4ac5":"data['Difficulty Level'].value_counts()","8c009aaa":"data['Course Rating'].value_counts()","7c1a06f8":"data['University'].value_counts()","3f038913":"data['Course Name']","56cbb5a0":"data = data[['Course Name','Difficulty Level','Course Description','Skills']]","74145f08":"data.head(5)","14da3db7":"# Removing spaces between the words (Lambda funtions can be used as well)\n\ndata['Course Name'] = data['Course Name'].str.replace(' ',',')\ndata['Course Name'] = data['Course Name'].str.replace(',,',',')\ndata['Course Name'] = data['Course Name'].str.replace(':','')\ndata['Course Description'] = data['Course Description'].str.replace(' ',',')\ndata['Course Description'] = data['Course Description'].str.replace(',,',',')\ndata['Course Description'] = data['Course Description'].str.replace('_','')\ndata['Course Description'] = data['Course Description'].str.replace(':','')\ndata['Course Description'] = data['Course Description'].str.replace('(','')\ndata['Course Description'] = data['Course Description'].str.replace(')','')\n\n#removing paranthesis from skills columns \ndata['Skills'] = data['Skills'].str.replace('(','')\ndata['Skills'] = data['Skills'].str.replace(')','')","cf8a75bb":"data.head(5)","4cb43e52":"data['tags'] = data['Course Name'] + data['Difficulty Level'] + data['Course Description'] + data['Skills']","57af3ded":"data.head(5)","3c1b1b51":"data['tags'].iloc[1]","960c117d":"new_df = data[['Course Name','tags']]","07246dfc":"new_df.head(5)","475895a6":"new_df['tags'] = data['tags'].str.replace(',',' ')","5a952b58":"new_df['Course Name'] = data['Course Name'].str.replace(',',' ')","ad5757a6":"new_df.rename(columns = {'Course Name':'course_name'}, inplace = True)","45bf47e8":"new_df['tags'] = new_df['tags'].apply(lambda x:x.lower()) #lower casing the tags column","8faefc4f":"new_df.head(5)","f947d1c2":"new_df.shape #3522 courses with tags and 2 columns (course_name and tags)","0752ba63":"from sklearn.feature_extraction.text import CountVectorizer","0c4f6123":"cv = CountVectorizer(max_features=5000,stop_words='english')","2c44da87":"vectors = cv.fit_transform(new_df['tags']).toarray()","bc6862e4":"import nltk #for stemming process","b6e9e089":"from nltk.stem.porter import PorterStemmer\nps = PorterStemmer()","77bba972":"#defining the stemming function\ndef stem(text):\n    y=[]\n    \n    for i in text.split():\n        y.append(ps.stem(i))\n    \n    return \" \".join(y)","0b16cbba":"new_df['tags'] = new_df['tags'].apply(stem) #applying stemming on the tags column","e630666f":"from sklearn.metrics.pairwise import cosine_similarity","d9dbdfee":"similarity = cosine_similarity(vectors)","800cfffa":"def recommend(course):\n    course_index = new_df[new_df['course_name'] == course].index[0]\n    distances = similarity[course_index]\n    course_list = sorted(list(enumerate(distances)),reverse=True, key=lambda x:x[1])[1:7]\n    \n    for i in course_list:\n        print(new_df.iloc[i[0]].course_name)","144c9c6e":"recommend('Business Strategy Business Model Canvas Analysis with Miro') ","ce65d233":"import pickle","fb2bc7aa":"# pickle.dump(similarity,open('similarity.pkl','wb'))\n# pickle.dump(new_df.to_dict(),open('course_list.pkl','wb')) #contains the dataframe in dict \n# pickle.dump(new_df,open('courses.pkl','wb'))","35571fbd":"# Required Columns for System","223f22d2":"# Stemming Process","ef341ba6":"# Data Pre-Processing\n\nAn important part of the process is to pre-process the data into usable format for the recommendation system","f38a7a13":"# Recommendation Function","961e4d79":"# Exporting the Model","b7d91064":"# Recommendation System\n\n![download.png](attachment:cc5901e4-9b8c-48da-8dc1-e1c6df0011c9.png)\n\nA recommendation system is a system that seeks to predict or filter preferences according to the user's choices. The created Web-App using Python is a similar system, which suggests courses based on the user's liked or searched courses.","6253b7ec":"# Similarity Measure ","438975f6":"# System Working\n\n**\ud83d\udc49 View the Web app in action [here](https:\/\/youtu.be\/9hQPhsIZsoA)**","324177b2":"# System Overview\n\n- In this course recommendation system, content-based similarity filtering based on the course tags which the users either watch or search is being used. \n\n- The dataset used is of the [Coursera Courses Dataset](https:\/\/www.kaggle.com\/khusheekapoor\/coursera-courses-dataset-2021) which contains over 3,000 courses!\n\nAnother approach can be collabrative filtering, which is not used in this notebook. An advance approach can be using both these approach in a hybrid mode.,","239c78eb":"#### Important columns to be used in recommendation system : \n\n- Course Name : Names of the courses\n- Course Description : Similar courses may have similar course description\n- Skills : Users may want to see courses based on same skills\n- Difficulty Level : Similar courses as per difficulty level \n\n#### Columns not used for the recommendation system :\n\n- Course Ratings : Numerical Column; Ratings can sometimes become a biased factor and distribution is not even\n- University : Same university might offer multiple courses in different domains which the user might not want to see\n- Course URL : No significance in the recommendation system","5fa28c18":"# Importing Dependencies","0a85e834":"# Tags Column\n\nThe tags column is the combination of the following columns : **Course Name** + **Difficulty Level** + **Course Description** + **Skills**","9cf8e685":"# \u26a1 Interesting? \n\n**If you found this notebook useful & interesting, kindly *upvote* and *comment your views :)***","d97a75e7":"# Web App","0fc0db9b":"**\ud83d\udc49 Find the code to web app on my github [here](https:\/\/github.com\/SagarBapodara\/Coursera-Course-Recommendation-System)**","ea671f30":"# Text Vectorization","ff265bd5":"# Basic Data Analysis","f6131de8":"# Demo of Web App\n\n![Course_demo-min.png](attachment:40e665ca-2254-4ce7-b8b8-9d0af067497c.png)\n\n**\ud83d\udc49 View the Web app in action [here](https:\/\/youtu.be\/9hQPhsIZsoA)**","5cbd101e":"**So these are the 6 courses which are recommended based on our search in the recommendation function**","7476bdcd":"# Dataframe to be used"}}