{"cell_type":{"906ee928":"code","8d8d6503":"code","1de6d755":"code","2ef29a5e":"code","5bb1a32d":"code","7383cc74":"code","839fd7bb":"code","4f4f0bd6":"code","3555e3f4":"code","23072dbd":"code","c7473552":"code","8d5fd195":"markdown","9029d43b":"markdown","fb536867":"markdown","e91e3c1c":"markdown","93a3d6f5":"markdown","a1acda5d":"markdown","6feee9af":"markdown","cb1b3332":"markdown","211b8bf0":"markdown","a045066d":"markdown","47c79b6f":"markdown","2528c14f":"markdown","61973812":"markdown","c93fb029":"markdown"},"source":{"906ee928":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/ecdc-covid-data\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8d8d6503":"# load ECDC current worldwide COVID-19 statistics (file saved from above link)\ndf = pd.read_excel('\/kaggle\/input\/geodist\/COVID-19-geographic-disbtribution-worldwide-2020-03-20.xlsx')\n\n# View the first five rows\ndf.head(5)","1de6d755":"country = df['Countries and territories'].unique()\n\nprint(\"Number of countries Impacted: \",len(country))\nprint(\"Worldwide Cases Reported (as of March 20, 2020): \", df['Cases'].sum())\nprint(\"Worldwide Deaths Reported (as of March 20, 2020): \", df['Deaths'].sum())\nprint(\"Fatality Rate: \"+\"{:.2%}\".format((df['Deaths'].sum()\/df['Cases'].sum())))","2ef29a5e":"df[df['Countries and territories']=='China']","5bb1a32d":"#df2 = df[['Countries and territories','GeoId','DateRep','Cases']]\ndf2 = df[['Countries and territories','DateRep','Cases']]\ndf2.rename(columns={'Countries and territories': 'Country','DateRep': 'DateRp'}, inplace=True)\ndf2.head()","7383cc74":"df2 = df2.drop_duplicates(subset=['Country','DateRp'])\ndf_pivot = df2.pivot(index='Country',columns='DateRp')\n#df_pivot\n#df2.pivot_table(df2, index=['Country','GeoId'],columns='DateRp')\ndf_pivot.columns = df_pivot.columns.to_flat_index()\ndf_pivot.columns = ['{}'.format(x[1]) for x in df_pivot.columns if x!= 'Country']\n#from datetime import datetime\ndf_pivot.columns = [col.replace('00:00:00', '') for col in df_pivot.columns]\n#df_pivot.rename(columns = lambda x: x.strip('00:00:00'))\n#df.columns = [col[:-2] for col in df.columns if col[-2:]=='_x' else col]\ndf_pivot.fillna(0, inplace=True)\ndf_pivot.head()","839fd7bb":"geocodes = df[['Countries and territories','GeoId']]\ngeocodes.drop_duplicates(subset=None, keep=\"first\", inplace=True)\ngeocodes.head()\nmerged_left = pd.merge(left=df_pivot, right=geocodes, how='left', left_on='Country', right_on='Countries and territories')\nmerged_left.head()","4f4f0bd6":"merged_left['url'] = 'https:\/\/www.countryflags.io\/'+ merged_left.GeoId +'\/flat\/64.png'\nmerged_left['url']\n#merged_left.head()\nmerged_left.shape\nfor i in range(0,len(merged_left)):\n    for c in range(1,merged_left.shape[1]-3): \n        merged_left.iat[i, c] = merged_left.iat[i, c] + merged_left.iat[i, c-1]\n        #print(df_tot.iat[i, c])\n        #df_tot.set_value(i,c,val)","3555e3f4":"merged_left[merged_left['Countries and territories'] == 'China']","23072dbd":"merged_left.to_excel('cleandata.xlsx')","c7473552":"import IPython\nurl = \"https:\/\/public.flourish.studio\/visualisation\/1631776\/\"\niframe = '<iframe src=' + url + ' width=700 height=350><\/iframe>'\nIPython.display.HTML(iframe)","8d5fd195":"**Merge above dataset with corresponding country ID codes.** _(This will be used to get the country image icon for display purposes)_","9029d43b":"Update cases for each date as a running cumulative total for each country","fb536867":"### Review final dataset for China:\nWe are now getting the cumulative total for each day as expected. Let's now run some visualizations!","e91e3c1c":"## Saving modified dataset for visualization","93a3d6f5":"## Reported Cases Data Visualization Preprocessing:\nBefore we can look into visualizations of this dataset, we need to re-format the dataset to show dates as columns.","a1acda5d":"## **Analyzing Data for China to validate accuracy:**","6feee9af":"Use pivot table to display dates reported as separate columns with value as current date's new cases identified for a particular country.","cb1b3332":"It appears that the data recorded by ECDC is based on daily new cases recorded by country. It may be useful to track the cumulative totals by country as well to see the overall impact of this pandemic worldwide.","211b8bf0":"# Overall Analysis:","a045066d":"![display image](https:\/\/raw.githubusercontent.com\/rsyed1\/kaggle\/master\/Cases2020.gif)","47c79b6f":"# COVID-19 Cases Reported - A History:\nUsing [Flourish](https:\/\/public.flourish.studio\/visualisation\/1631776\/), let us see the race bar chart for cases over time as below.","2528c14f":"# COVID-19 Deaths Reported - A History:\n## TBD","61973812":"We can see that the Corona Virus (COVID-19) has over 240K cases as of March 20th with a high overall fatality rate of around 4%.","c93fb029":"# ** The focus of this notebook is to explore the worldwide COVID-19 geographic distribution.** \n## Note: I am using external data from [ECDC](https:\/\/www.ecdc.europa.eu\/en\/publications-data\/download-todays-data-geographic-distribution-covid-19-cases-worldwide) (Thanks to [salmanhiro](https:\/\/www.kaggle.com\/salmanhiro))"}}