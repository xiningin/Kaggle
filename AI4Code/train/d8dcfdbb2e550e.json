{"cell_type":{"999df734":"code","547d8843":"code","b45ab287":"code","30df52d7":"code","6838be53":"code","c083980a":"code","88fe6af3":"code","58bffdd0":"code","b298388e":"code","671e932c":"code","a9b56641":"code","24e0c53f":"code","6e97a7b3":"code","c82e699f":"code","ecd91c48":"code","e014d663":"code","52aec5fa":"code","3be10c0d":"code","bd5a7068":"code","c3a6a74a":"code","1edf2df4":"code","78853b71":"code","de287c6d":"code","72dac09d":"code","7c38245f":"code","85515b96":"code","732279c1":"code","9c31e201":"code","64ddf17f":"code","a8be017e":"code","9f2974ee":"code","d45ad910":"code","75bac95b":"code","c039697c":"code","11510d61":"code","a6307aa8":"code","18839140":"code","452fc37b":"code","dfd6ea8a":"code","feaee06d":"code","30cccbd2":"code","67383432":"code","0d3e419a":"code","6008558f":"code","659f0be9":"code","b0bd25b2":"code","36324968":"code","c94cfa4f":"code","62d2e0ea":"code","7f27c94e":"code","6313c510":"code","d5d115fe":"code","c13b02b5":"code","ce8f65f6":"code","0ddd091d":"code","17b7743d":"markdown","9f158f4c":"markdown","b52301f5":"markdown","6fa5dca9":"markdown","ec813bde":"markdown","411d1276":"markdown","bbea665b":"markdown","20344e21":"markdown","e5dde36b":"markdown"},"source":{"999df734":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","547d8843":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b45ab287":"data = pd.read_csv(\"..\/input\/titanic\/train.csv\")","30df52d7":"data.head()","6838be53":"data.shape","c083980a":"data.info()","88fe6af3":"data.isnull().sum()","58bffdd0":"data = data.drop('PassengerId',axis=1)","b298388e":"import missingno as msno","671e932c":"msno.bar(data)\nplt.show()","a9b56641":"data.isnull().mean() * 100 # Check in percentages of missing values.","24e0c53f":"df = data.copy()","6e97a7b3":"data = data.drop('Cabin',axis=1)","c82e699f":"msno.bar(data)\nplt.show()","ecd91c48":"data.dtypes","e014d663":"data.nunique()","52aec5fa":"fig, axes = plt.subplots(3, 2, sharex=True, figsize=(24,10))\nfig.suptitle('Count of all categorical variables')\nsns.countplot(ax=axes[0, 0], data=data, x='Survived',hue = 'Pclass',palette='crest')\nsns.countplot(ax=axes[0, 1], data=data, x='Survived',hue='Sex',palette='RdPu')\nsns.countplot(ax=axes[1, 0], data=data, x='Survived',hue = 'SibSp',palette='magma')\nsns.countplot(ax=axes[1, 1], data=data, x='Survived',hue = 'Parch',palette=\"ch:s=-.2,r=.6\")\nsns.countplot(ax=axes[2,0],data = data, x ='Survived' ,hue = 'Embarked',palette=\"dark:salmon_r\")\nsns.countplot(ax=axes[2,1],data = data, x ='Survived',palette='RdPu' )\nplt.show()","3be10c0d":"sns.distplot(data['Age'])","bd5a7068":"figure=data.boxplot(column=\"Age\") #check for the outliers","c3a6a74a":"mean_value = data['Age'].mean()\ndata['Age'].fillna(value = mean_value,inplace = True)","1edf2df4":"data = data.dropna()","78853b71":"data.isnull().sum()","de287c6d":"sns.distplot(data['Age'])","72dac09d":"data['Age'].describe()","7c38245f":"uppper_boundary=data['Age'].mean() + 3* data['Age'].std()\nlower_boundary=data['Age'].mean() - 3* data['Age'].std()\nprint(\"Lower_boundary is: \",lower_boundary)\nprint(\"Upper_boundary is: \",uppper_boundary)\nprint(\"mean of Age is: \",data['Age'].mean())","85515b96":"data.loc[data['Age']>=68,'Age']=68","732279c1":"data.head()","9c31e201":"data = data.drop(['Name','Ticket'],axis=1)","64ddf17f":"data.head()","a8be017e":"def LABEL_ENCODING(c1):\n    from sklearn import preprocessing\n    label_encoder = preprocessing.LabelEncoder()\n    data[c1]= label_encoder.fit_transform(data[c1])\n    data[c1].unique()","9f2974ee":"LABEL_ENCODING(\"Sex\")\nLABEL_ENCODING(\"Embarked\")\ndata","d45ad910":"x = data.drop('Survived',axis=1)\ny = data['Survived']","75bac95b":"print(x.shape)\nprint(y.shape)","c039697c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)","11510d61":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","a6307aa8":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","18839140":"X_train","452fc37b":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)","dfd6ea8a":"y_pred = classifier.predict(X_test)\ny_pred","feaee06d":"from sklearn.metrics import accuracy_score\nacc1 = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy score: {acc1}\")","30cccbd2":"from sklearn.svm import SVC\nclassifier = SVC(kernel = 'linear', random_state = 0)\nclassifier.fit(X_train, y_train)\nSVC(kernel='linear', random_state=0)","67383432":"\ny_pred = classifier.predict(X_test)\n","0d3e419a":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","6008558f":"acc2 = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy score: {acc2}\")","659f0be9":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)","b0bd25b2":"acc3 = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy score: {acc3}\")","36324968":"from sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)\nGaussianNB()","c94cfa4f":"y_pred = classifier.predict(X_test)\nacc4 = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy score : {acc4}\")","62d2e0ea":"from sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)\nDecisionTreeClassifier(criterion='entropy', random_state=0)","7f27c94e":"y_pred = classifier.predict(X_test)\nacc5 = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy score: {acc5}\")","6313c510":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)","d5d115fe":"y_pred = classifier.predict(X_test)\nprint(y_pred)","c13b02b5":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nacc6 = accuracy_score(y_test, y_pred)","ce8f65f6":"print(acc6)","0ddd091d":"mylist=[]\nmylist2=[]\nmylist.append(acc1)\nmylist2.append(\"Logistic Regression\")\nmylist.append(acc2)\nmylist2.append(\"SVM\")\nmylist.append(acc3)\nmylist2.append(\"KNN\")\nmylist.append(acc4)\nmylist2.append(\"Naive Bayes\")\nmylist.append(acc5)\nmylist2.append(\"DTR\")\nmylist.append(acc6)\nmylist2.append(\"Random Forest Classifer\")\nplt.rcParams['figure.figsize']=8,6\nsns.set_style(\"darkgrid\")\nax = sns.barplot(x=mylist2, y=mylist, palette = \"ch:s=-.2,r=.6\", saturation =1.5)\nplt.xlabel(\"Classification Models\", fontsize = 20 )\nplt.ylabel(\"Accuracy\", fontsize = 20)\nplt.title(\"Accuracy of different Classification Models\", fontsize = 20)\nplt.xticks(fontsize = 11, horizontalalignment = 'center', rotation = 8)\nplt.yticks(fontsize = 13)\nfor p in ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    ax.annotate(f'{height:.2%}', (x + width\/2, y + height*1.02), ha='center', fontsize = 'x-large')\nplt.show()","17b7743d":"# SVM","9f158f4c":"# Training the Naive Bayes on the Training set","b52301f5":"# Training the K-NN model on the Training set","6fa5dca9":"# Logistic Regression","ec813bde":"**If The Data Is Normally Distributed We use this\nAssuming Age follows A Gaussian Distribution we will calculate the boundaries which differentiates the outliers**","411d1276":"# Feature Scaling","bbea665b":"# Training Decision Tree Classification on Train set","20344e21":"First we need the mean, because in normal distribution most important point, basically from the mean we are going to consider 3rd standard deviation to the right and 3rd standard deviation to the left. Here is upper_boundary is for 3rd standard deviation to the right and lower_boundary is -3 standard deviation to the left. We replace the all the outliers with upper boundary value.","e5dde36b":"# Predict the tset set result"}}