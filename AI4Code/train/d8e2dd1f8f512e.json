{"cell_type":{"7bf69b41":"code","1b697925":"code","ef1b1254":"code","7898329a":"code","c881dad5":"code","58461c35":"code","a9777298":"code","1440cac4":"code","89f48c90":"code","9b7b52f2":"code","4106cf99":"code","c3fd3734":"code","c7a29411":"code","0b965ed5":"code","5b2cf0a5":"code","43cf8529":"code","37d1f1eb":"markdown"},"source":{"7bf69b41":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\ndata_folder = '\/kaggle\/input\/optiver-realized-volatility-prediction'\nimport os\nos.listdir(data_folder)\ntrain = pd.read_csv(data_folder+r'\/train.csv')\ntrain.head()","1b697925":"try:\n    os.mkdir('\/kaggle\/working\/processed_data')\nexcept:\n    pass\ntry:\n    os.mkdir('\/kaggle\/working\/processed_data\/trade_price')\nexcept:\n    pass","ef1b1254":"os.listdir('\/kaggle\/working')","7898329a":"def avg_price(df):\n    ''' Calculate avg traded price for a dataframe'''\n    \n    df['pricexsize'] = df['price']*df['size']\n    return df['pricexsize'].sum()\/df['size'].sum()","c881dad5":"\ndef get_trade(stock_id, time_id=''):\n    ''' Get trade data for a stock'''\n    trade_example =  pd.read_parquet(data_folder+r'\/trade_train.parquet\/stock_id='+str(stock_id))\n    if time_id:\n        trade_example = trade_example[trade_example['time_id']==time_id]\n        \n    return trade_example","58461c35":"# This cell takes around 45 mins to run\n# We can use dask to make this computation faster leveraging multiple cores\n\nfrom tqdm import tqdm\n\n# Read data for each stock and write the avg traded price for each 100 second bin\nbins=np.arange(0,600,100)\nfor sid in tqdm(train.stock_id.unique()):\n    test_df = get_trade(stock_id=sid)\n    idx = np.digitize(test_df['seconds_in_bucket'], bins)\n    full_timeseries = test_df.groupby(['time_id',idx]).apply(avg_price).reset_index()\n    full_timeseries.to_csv('\/kaggle\/working\/processed_data\/trade_price'+'\/'+str(sid)+'.csv')","a9777298":"os.listdir('\/kaggle\/working\/processed_data\/trade_price')","1440cac4":"# Create final dataframe with all timeseries in columns\n\ntfolder='\/kaggle\/working\/processed_data\/trade_price'\n\nfinaldf = pd.DataFrame()\n\nfor filen in os.listdir(tfolder):\n    print(tfolder+'\/'+filen)\n    \n    tmpdf = pd.read_csv(tfolder+'\/'+filen)\n    tcol = filen[:-4]\n    finaldf[tcol] = tmpdf['0']\n\n\ndata = finaldf\ndata","89f48c90":"correlations = finaldf.corr()\ncorrelations","9b7b52f2":"# Minimum correlation\ncorrelations.min().min()","4106cf99":"import seaborn as sns\nimport matplotlib.pyplot as plt","c3fd3734":"sns.heatmap(round(correlations,2), cmap='RdBu', vmin=-1, vmax=1)","c7a29411":"# Hierarchical clustering on correlations data\nfrom scipy.cluster.hierarchy import linkage, dendrogram, fcluster\nfrom scipy.spatial.distance import squareform\n\nplt.figure(figsize=(12,5))\ndissimilarity = 1 - abs(correlations)\nZ = linkage(squareform(dissimilarity), 'complete')\n\ndendrogram(Z, labels=finaldf.columns, orientation='top', \n           leaf_rotation=90);\n\n","0b965ed5":"# Clusterize the data\nthreshold = 0.8\nlabels = fcluster(Z, threshold, criterion='distance')\n\n# Show the cluster\nlabels","5b2cf0a5":"import numpy as np\n\n# Keep the indices to sort labels\nlabels_order = np.argsort(labels)\n\n# Build a new dataframe with the sorted columns\nfor idx, i in enumerate(finaldf.columns[labels_order]):\n    if idx == 0:\n        clustered = pd.DataFrame(finaldf[i])\n    else:\n        df_to_append = pd.DataFrame(finaldf[i])\n        clustered = pd.concat([clustered, df_to_append], axis=1)","43cf8529":"plt.figure(figsize=(15,10))\ncorrelations = clustered.corr()\nsns.heatmap(round(correlations,2), cmap='RdBu',vmin=-0.15, vmax=1);","37d1f1eb":"# This script tries to study correlations between stocks based on their trade price movements\n# Shows around 20 stocks have high positive correlation"}}