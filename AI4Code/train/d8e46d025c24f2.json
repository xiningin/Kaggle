{"cell_type":{"62cdfeb2":"code","ba4843a5":"code","02266dcf":"code","746dfba1":"code","704279a9":"code","7434da24":"code","e8b90803":"code","c586a461":"code","17dbf9b0":"code","c192951f":"code","3ae71b33":"code","d0669655":"code","e561008d":"code","bac8fa10":"code","3cd70fd3":"code","cc9ebe6f":"code","29f61401":"code","1f4b1591":"markdown","ba5bcf8d":"markdown"},"source":{"62cdfeb2":"%config Completer.use_jedi = False","ba4843a5":"import os\nimport shutil\n\nimport numpy as np\nimport pandas as pd\n\nfrom tqdm.notebook import tqdm\ntqdm.pandas()","02266dcf":"files_train = os.listdir('\/kaggle\/input\/feedback-prize-2021\/train')\nfiles_test = os.listdir('\/kaggle\/input\/feedback-prize-2021\/test')","746dfba1":"df = pd.read_csv('\/kaggle\/input\/feedback-prize-2021\/train.csv')","704279a9":"label_ordered_list = df['discourse_type'].value_counts().index.tolist()[::-1]","7434da24":"df['char_len'] = (df['discourse_end'] - df['discourse_start']).astype(int)\ndf['word_len'] = df['predictionstring'].str.split().apply(len)","e8b90803":"label_ratio = []\nfor i, txt in tqdm(df.groupby('id')): \n    \n    txt_id = txt['id'].values[0]\n    txt_file = f\"\/kaggle\/input\/feedback-prize-2021\/train\/{txt_id}.txt\"\n    \n    with open(txt_file, 'r') as file:\n        txt_data = file.read()\n        \n    len_lbls = txt['char_len'].sum()\n    len_txt = len(txt_data)\n    ratio = len_lbls\/len_txt\n\n    label_ratio.append(pd.DataFrame({'id': [txt_id], 'ratio':[ratio]}))\n    \nlabel_ratio = pd.concat(label_ratio).reset_index(drop = True)","c586a461":"files_to_keep = label_ratio['id'][label_ratio['ratio'] > 0.80]\ndf_clean = df.set_index('id').loc[files_to_keep].reset_index().copy()","17dbf9b0":"df_clean = df_clean.set_index('id')\nfor idx, group in tqdm(df_clean.groupby(df_clean.index)):\n    txt_file_path = f'\/kaggle\/input\/feedback-prize-2021\/train\/{idx}.txt'\n    with open(txt_file_path, 'r') as file:\n        text_data = file.read()\n    txt_len = len(text_data.split())\n    df_clean.loc[idx, 'txt_len'] = int(txt_len)\ndf_clean = df_clean.reset_index()","c192951f":"df_clean['predictionarray'] = df_clean.progress_apply(lambda x: np.array(x['predictionstring'].split(), dtype = int) \/ x['txt_len'], axis = 1)","3ae71b33":"df_clean = df_clean[['predictionarray', 'discourse_type']].explode('predictionarray')\ndf_clean['discourse_type'] = df_clean['discourse_type'].astype('category')","d0669655":"X = df_clean[['predictionarray']]\ny = df_clean['discourse_type']","e561008d":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression(multi_class='multinomial', solver='lbfgs', verbose = 1, n_jobs = 4)","bac8fa10":"model.fit(X, y)","3cd70fd3":"import matplotlib.pyplot as plt\n\nX_test = np.expand_dims(np.linspace(0, 1, num = 1001), axis = 1)\ny_test = model.predict_proba(X_test).argmax(axis = -1)\n\nlabels = y.cat.categories\nplt.plot(X_test, y_test)\nplt.yticks(range(len(labels)), labels);","cc9ebe6f":"sub = []\nfor txt_file in files_test:\n    \n    txt_file_path = f'\/kaggle\/input\/feedback-prize-2021\/test\/{txt_file}'\n    with open(txt_file_path, 'r') as file:\n        text_data = file.read()\n    txt_len = len(text_data.split())\n    \n    X_test = np.expand_dims((np.arange(txt_len) + 1) \/ txt_len, axis = 1)\n    y_test = model.predict_proba(X_test).argmax(axis = -1)\n\n    predictions = {label: ' '.join(np.where(y_test == i)[0].astype(str)) for i, label in enumerate(labels)}\n\n    sub.append(pd.DataFrame({\n        'id': txt_file.split('.')[0],\n        'class': predictions.keys(),\n        'predictionstring': predictions.values()\n    }))\n    \n    \nsubmission = pd.concat(sub).reset_index(drop = True)\nsubmission = submission[submission['predictionstring'] != '']","29f61401":"submission.to_csv('submission.csv', index = False)\nsubmission","1f4b1591":"<h1><center>Logistic Regression Baseline based on Stats only<\/center><\/h1>\n                           \n                           \n<center><img src = \"https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/31779\/logos\/header.png\" width = \"1000\" height = \"400\"\/><\/center>    \n\n\n<h3 style='background:orange; color:black'><center>Consider upvoting this notebook if you found it helpful.<\/center><\/h3>","ba5bcf8d":"<h3 style='background:orange; color:black'><center>WORK IN PROGRESS!! Come back for more later...<\/center><\/h3>"}}