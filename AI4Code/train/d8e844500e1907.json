{"cell_type":{"5c8c446d":"code","1e9bfb16":"code","aee2ac89":"code","f75fb779":"code","b06e6de2":"code","5304f1c7":"code","16b7aea1":"code","8d5aadae":"code","a8569a6f":"code","46975bf4":"code","b9a8a0df":"code","379489b8":"code","00b5e25d":"code","144b651a":"code","cd9bafe8":"code","4e90f92c":"code","ffae2ed5":"markdown","ff493619":"markdown","a5427643":"markdown","dd529df6":"markdown","a1fa7214":"markdown","2066dfe1":"markdown","4358d93a":"markdown","9c8a0379":"markdown","ed763c39":"markdown","c370f9ba":"markdown","43d5c44e":"markdown"},"source":{"5c8c446d":"%matplotlib inline\nimport os\nimport pandas as pd\nimport datetime as dt\nimport numpy as np\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler","1e9bfb16":"plt.rcParams['figure.figsize'] = [16, 10]\nplt.rcParams['font.size'] = 14\npd.set_option('display.max_columns', 99)\nstart = dt.datetime.now()","aee2ac89":"validation_splits = pd.DataFrame([\n    ['Atlanta', 33.791, 33.835],\n    ['Boston', 42.361, 42.383],\n    ['Chicago', 41.921, 41.974],\n    ['Philadelphia', 39.999, 40.046],\n], columns=['City', 'l1', 'l2'])\n\ndirection_encoding = {\n    'N': 0,\n    'NE': 1 \/ 4,\n    'E': 1 \/ 2,\n    'SE': 3 \/ 4,\n    'S': 1,\n    'SW': 5 \/ 4,\n    'W': 3 \/ 2,\n    'NW': 7 \/ 4\n}\n\nroad_encoding = {\n    'Road': 1,\n    'Street': 2,\n    'Avenue': 2,\n    'Drive': 3,\n    'Broad': 3,\n    'Boulevard': 4\n}\nmonthly_rainfall = {\n    'Atlanta1': 5.02, 'Atlanta5': 3.95, 'Atlanta6': 3.63, 'Atlanta7': 5.12,\n    'Atlanta8': 3.67, 'Atlanta9': 4.09, 'Atlanta10': 3.11, 'Atlanta11': 4.10,\n    'Atlanta12': 3.82, 'Boston1': 3.92, 'Boston5': 3.24, 'Boston6': 3.22,\n    'Boston7': 3.06, 'Boston8': 3.37, 'Boston9': 3.47, 'Boston10': 3.79,\n    'Boston11': 3.98, 'Boston12': 3.73, 'Chicago1': 1.75, 'Chicago5': 3.38,\n    'Chicago6': 3.63, 'Chicago7': 3.51, 'Chicago8': 4.62, 'Chicago9': 3.27,\n    'Chicago10': 2.71, 'Chicago11': 3.01, 'Chicago12': 2.43,\n    'Philadelphia1': 3.52, 'Philadelphia5': 3.88, 'Philadelphia6': 3.29,\n    'Philadelphia7': 4.39, 'Philadelphia8': 3.82, 'Philadelphia9': 3.88,\n    'Philadelphia10': 2.75, 'Philadelphia11': 3.16, 'Philadelphia12': 3.31\n}\nmonthly_temperature = {\n    'Atlanta1': 43, 'Atlanta5': 69, 'Atlanta6': 76, 'Atlanta7': 79,\n    'Atlanta8': 78, 'Atlanta9': 73, 'Atlanta10': 62, 'Atlanta11': 53,\n    'Atlanta12': 45, 'Boston1': 30, 'Boston5': 59, 'Boston6': 68, 'Boston7': 74,\n    'Boston8': 73, 'Boston9': 66, 'Boston10': 55, 'Boston11': 45,\n    'Boston12': 35, 'Chicago1': 27, 'Chicago5': 60, 'Chicago6': 70,\n    'Chicago7': 76, 'Chicago8': 76, 'Chicago9': 68, 'Chicago10': 56,\n    'Chicago11': 45, 'Chicago12': 32, 'Philadelphia1': 35, 'Philadelphia5': 66,\n    'Philadelphia6': 76, 'Philadelphia7': 81, 'Philadelphia8': 79,\n    'Philadelphia9': 72, 'Philadelphia10': 60, 'Philadelphia11': 49,\n    'Philadelphia12': 40}","f75fb779":"train = pd.read_csv(\n    '..\/input\/bigquery-geotab-intersection-congestion\/train.csv')\ntest = pd.read_csv('..\/input\/bigquery-geotab-intersection-congestion\/test.csv')\ntrain.shape, test.shape\n\ntrain['IsTrain'] = 1\ntest['IsTrain'] = 0\nfull = pd.concat([train, test], sort=True)","b06e6de2":"# Validation Groups\nfull = full.merge(validation_splits, on='City')\nfull['ValidationGroup'] = 1\nfull.loc[full.Latitude <= full.l1, 'ValidationGroup'] = 0\nfull.loc[full.Latitude > full.l2, 'ValidationGroup'] = 2\nfull.drop(['l1', 'l2'], axis=1, inplace=True)","5304f1c7":"cols = [c for c in test.columns if c not in ['Path']]\ntrain.loc[train.DistanceToFirstStop_p80 > 0, cols + ['DistanceToFirstStop_p80']].head()\ntest[cols].head()","16b7aea1":"full['Latitude3'] = full.Latitude.round(3)\nfull['Longitude3'] = full.Longitude.round(3)\nfull['EntryStreetMissing'] = 1 * full.EntryStreetName.isna()\nfull['ExitStreetMissing'] = 1 * full.ExitStreetName.isna()\n\nfull['CMWH'] = full.City + '_' \\\n               + full.Month.astype(str) + '_' \\\n               + full.Weekend.astype(str) + '_' \\\n               + full.Hour.astype(str)\n\nfull.EntryHeading = full.EntryHeading.replace(direction_encoding)\nfull.ExitHeading = full.ExitHeading.replace(direction_encoding)\nfull['DiffHeading'] = full['EntryHeading'] - full['ExitHeading']","8d5aadae":"full['city_month'] = full[\"City\"] + full[\"Month\"].astype(str)\nfull[\"Rainfall\"] = full['city_month'].replace(monthly_rainfall)\nfull[\"Temperature\"] = full['city_month'].replace(monthly_temperature)\nfull.drop('city_month', axis=1, inplace=True)","a8569a6f":"def road_encode(x):\n    for road in road_encoding.keys():\n        if road in x:\n            return road_encoding[road]\n    return 0\n\nfull = full.fillna(dict(EntryStreetName='Unknown Something',\n                        ExitStreetName='Unknown Something'))\n\nfull['EntryType'] = full['EntryStreetName'].apply(road_encode)\nfull['ExitType'] = full['ExitStreetName'].apply(road_encode)","46975bf4":"full.EntryStreetName = full.City + ' ' + full.EntryStreetName\nfull.ExitStreetName = full.City + ' ' + full.ExitStreetName\nfull['Intersection'] = full.City + ' ' + full.IntersectionId.astype(str)\n\nfull['SameStreet'] = 1 * (full.EntryStreetName == full.ExitStreetName)","b9a8a0df":"# Geolocation\nfor col in ['Latitude', 'Longitude']:\n    scaler = StandardScaler()\n    full[col] = scaler.fit_transform(full[col].values.reshape(-1, 1))\n\n# Distance from CityCenter\nfull = full.merge(\n    full.groupby('City')[['Latitude', 'Longitude']].mean(),\n    left_on='City', right_index=True, suffixes=['', 'Dist']\n)\nfull.LatitudeDist = (5 * np.abs(full.Latitude - full.LatitudeDist)).round(3)\nfull.LongitudeDist = (5 * np.abs(full.Longitude - full.LongitudeDist)).round(3)\nfull['CenterDistL1'] = (5 * (full.LatitudeDist + full.LongitudeDist)).round(3)\nfull['CenterDistL2'] = (3 * np.sqrt(\n    (full.LatitudeDist ** 2 + full.LongitudeDist ** 2))).round(3)","379489b8":"def add_frequency(df, column):\n    cnt = df.groupby(column)[['RowId']].count()\n    cnt.loc[cnt.RowId > 10, 'RowId'] = 10 * (\n            cnt.loc[cnt.RowId > 10, 'RowId'] \/\/ 10)\n    cnt.columns = [f'{column}Count']\n    return df.merge(cnt, left_on=column, right_index=True)\n\nfull = add_frequency(full, 'Longitude3')\nfull = add_frequency(full, 'Latitude3')\nfull = add_frequency(full, 'ExitStreetName')\nfull = add_frequency(full, 'EntryStreetName')\nfull = add_frequency(full, 'Intersection')\nfull = add_frequency(full, 'Path')\n\n# Frequency Encoding with unique intersections\ndef add_unique_intersections(df, column):\n    cnt = df.groupby(column)[['Intersection']].nunique()\n    cnt.loc[cnt.Intersection > 10, 'Intersection'] = 5 * (\n            cnt.loc[cnt.Intersection > 10, 'Intersection'] \/\/ 5)\n    cnt.columns = [f'{column}UniqueIntersections']\n    return df.merge(cnt, left_on=column, right_index=True)\n\nfull = add_unique_intersections(full, 'Longitude3')\nfull = add_unique_intersections(full, 'Latitude3')\nfull = add_unique_intersections(full, 'ExitStreetName')\nfull = add_unique_intersections(full, 'EntryStreetName')","00b5e25d":"columns_to_encode = [\n    'City',\n    'EntryStreetName',\n    'ExitStreetName',\n    'Intersection',\n    'CMWH'\n]\nfor c in columns_to_encode:\n    encoder = LabelEncoder()\n    full[c] = encoder.fit_transform(full[c])","144b651a":"full.to_csv('features_v3.csv.gz', compression='gzip', index=False)","cd9bafe8":"train = full[full.IsTrain == 1].copy()\ntest = full[full.IsTrain == 0].copy()\n\ncolumn_stats = pd.concat([\n    pd.DataFrame(full.count()).rename(columns={0: 'cnt'}),\n    pd.DataFrame(train.count()).rename(columns={0: 'train_cnt'}),\n    pd.DataFrame(test.count()).rename(columns={0: 'test_cnt'}),\n    pd.DataFrame(full.nunique()).rename(columns={0: 'unique'}),\n    pd.DataFrame(train.nunique()).rename(columns={0: 'train_unique'}),\n    pd.DataFrame(test.nunique()).rename(columns={0: 'test_unique'}),\n], sort=True, axis=1)\ncolumn_stats['seen_in_train%'] = (\n            100 * column_stats.train_unique \/ column_stats.unique).round(1)\ncolumn_stats = column_stats.sort_values(by='unique')\ncolumn_stats.to_csv('col_stats.csv')\ncolumn_stats","4e90f92c":"end = dt.datetime.now()\nprint('Latest run {}.\\nTotal time {}s'.format(end, (end - start).seconds))","ffae2ed5":"### Road encoding","ff493619":"### Add weather features","a5427643":"### Read and combine train and test\n\nThis way we can make sure to apply the same transformations to train and test.","dd529df6":"### Use frequency encoding","a1fa7214":"### Apply LabelEncoder on categorical features","2066dfe1":"### Save results","4358d93a":"### Standardize Lat\/Lon asnc calculate distance from city center","9c8a0379":"\n### Acknowledgements\n\n * **D C Aichara**:  https:\/\/www.kaggle.com\/dcaichara\/feature-engineering-and-lightgbm\n * **Dan Ofer**: https:\/\/www.kaggle.com\/danofer\/baseline-feature-engineering-geotab-69-5-lb\n * **Fatih Bilgin**: https:\/\/www.kaggle.com\/fatihbilgin\/data-visualization-and-eda-for-geotab-bigquery\n * **Leonardo Ferreira**: https:\/\/www.kaggle.com\/kabure\/insightful-eda-modeling-lgbm-hyperopt\n * **John Miller**: https:\/\/www.kaggle.com\/jpmiller\/eda-to-break-through-rmse-68\n * **Bojan Tunguz**: https:\/\/www.kaggle.com\/tunguz\/adversarial-geotab\n * **Bruno Gorresen Mello**: https:\/\/www.kaggle.com\/bgmello\/how-one-percentile-affect-the-others\n","ed763c39":"### Add a few features\n* Add areas\n* Flag missing values\n* Encode direction\n* Add City-Month-Weekend-Hour group","c370f9ba":"### Combine city with street and intersection","43d5c44e":"### Check feature stats"}}