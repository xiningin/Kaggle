{"cell_type":{"5b523641":"code","88e55898":"code","648387f3":"code","180d031a":"code","206bf6fa":"code","3f3eb0c0":"code","17b4baa7":"code","94da2976":"code","df0a7f24":"code","2fb654ea":"code","7eb80415":"code","4727b7f8":"code","b357675c":"code","cd87e5cc":"code","e46f083b":"code","380315dd":"code","b386ae14":"code","bef1acd6":"code","d142922a":"code","75f7d729":"code","d149d7f3":"code","675e950f":"code","98126ce1":"code","b6eaed40":"code","a2a5e691":"code","d45a637e":"code","6d79bcbd":"code","c5dcf9a1":"code","8a3da792":"code","2e31ee20":"code","fa41fb17":"code","16a11aab":"code","8d5e01a3":"code","1c17d546":"code","1baeae2b":"code","a9788ad5":"code","2471f37b":"code","38613b02":"code","baca9920":"code","e092606d":"code","c7b8db32":"code","25879f0f":"code","fb07cac5":"code","9f208659":"code","6aed4bd5":"code","21b6d377":"code","efd880f9":"code","15cce68f":"code","6c1678ff":"code","d3a3526e":"code","6b8aab08":"code","317c6194":"code","78911e29":"code","b7eb83ef":"code","0d07cf7e":"code","51c30949":"code","07ac31ce":"code","8307a852":"code","fff49724":"markdown"},"source":{"5b523641":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","88e55898":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","648387f3":"train = pd.read_csv(os.path.join('..\/input\/titanic\/train.csv'))\ntest = pd.read_csv(os.path.join('..\/input\/titanic\/test.csv'))","180d031a":"train.info()","206bf6fa":"train.head()","3f3eb0c0":"train['Survived'].value_counts(normalize=True)","17b4baa7":"sns.countplot(train['Survived'])","94da2976":"train['Survived'].groupby(train['Pclass']).mean()","df0a7f24":"sns.countplot(train['Pclass'], hue=train['Survived'])","2fb654ea":"train['Name'].head()","7eb80415":"train['Name_Title'] = train['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])\ntrain['Name_Title'].value_counts()","4727b7f8":"train['Survived'].groupby(train['Name_Title']).mean()","b357675c":"train['Name_Len'] = train['Name'].apply(lambda x: len(x))\ntrain['Survived'].groupby(pd.qcut(train['Name_Len'],5)).mean()","cd87e5cc":"pd.qcut(train['Name_Len'],5).value_counts()","e46f083b":"train['Sex'].value_counts(normalize=True)","380315dd":"train['Survived'].groupby(train['Sex']).mean()","b386ae14":"train['Survived'].groupby(train['Age'].isnull()).mean()","bef1acd6":"train['Survived'].groupby(pd.qcut(train['Age'],5)).mean()","d142922a":"pd.qcut(train['Age'],5).value_counts()","75f7d729":"train['Survived'].groupby(train['SibSp']).mean()","d149d7f3":"train['SibSp'].value_counts()","675e950f":"train['Survived'].groupby(train['Parch']).mean()","98126ce1":"train['Parch'].value_counts()","b6eaed40":"train['Ticket'].head(n=10)","a2a5e691":"train['Ticket_Len'] = train['Ticket'].apply(lambda x: len(x))","d45a637e":"train['Ticket_Len'].value_counts()","6d79bcbd":"train['Ticket_Lett'] = train['Ticket'].apply(lambda x: str(x)[0])","c5dcf9a1":"train['Ticket_Lett'].value_counts()","8a3da792":"train.groupby(['Ticket_Lett'])['Survived'].mean()","2e31ee20":"pd.qcut(train['Fare'], 3).value_counts()","fa41fb17":"train['Survived'].groupby(pd.qcut(train['Fare'], 3)).mean()","16a11aab":"pd.crosstab(pd.qcut(train['Fare'], 5), columns=train['Pclass'])","8d5e01a3":"train['Cabin_Letter'] = train['Cabin'].apply(lambda x: str(x)[0])","1c17d546":"train['Cabin_Letter'].value_counts()","1baeae2b":"train['Survived'].groupby(train['Cabin_Letter']).mean()","a9788ad5":"train['Cabin_num'] = train['Cabin'].apply(lambda x: str(x).split(' ')[-1][1:])\ntrain['Cabin_num'].replace('an', np.NaN, inplace = True)\ntrain['Cabin_num'] = train['Cabin_num'].apply(lambda x: int(x) if not pd.isnull(x) and x != '' else np.NaN)","2471f37b":"pd.qcut(train['Cabin_num'],3).value_counts()","38613b02":"train['Survived'].groupby(pd.qcut(train['Cabin_num'], 3)).mean()","baca9920":"train['Survived'].corr(train['Cabin_num'])","e092606d":"train['Embarked'].value_counts()","c7b8db32":"train['Embarked'].value_counts(normalize=True)","25879f0f":"train['Survived'].groupby(train['Embarked']).mean()","fb07cac5":"sns.countplot(train['Embarked'], hue=train['Pclass'])","9f208659":"def names(train, test):\n    for i in [train, test]:\n        i['Name_Len'] = i['Name'].apply(lambda x: len(x))\n        i['Name_Title'] = i['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])\n        del i['Name']\n    return train, test","6aed4bd5":"def age_impute(train, test):\n    for i in [train, test]:\n        i['Age_Null_Flag'] = i['Age'].apply(lambda x: 1 if pd.isnull(x) else 0)\n        data = train.groupby(['Name_Title', 'Pclass'])['Age']\n        i['Age'] = data.transform(lambda x: x.fillna(x.mean()))\n    return train, test","21b6d377":"def fam_size(train, test):\n    for i in [train, test]:\n        i['Fam_Size'] = np.where((i['SibSp']+i['Parch']) == 0 , 'Solo',\n                           np.where((i['SibSp']+i['Parch']) <= 3,'Nuclear', 'Big'))\n        del i['SibSp']\n        del i['Parch']\n    return train, test","efd880f9":"def ticket_grouped(train, test):\n    for i in [train, test]:\n        i['Ticket_Lett'] = i['Ticket'].apply(lambda x: str(x)[0])\n        i['Ticket_Lett'] = i['Ticket_Lett'].apply(lambda x: str(x))\n        i['Ticket_Lett'] = np.where((i['Ticket_Lett']).isin(['1', '2', '3', 'S', 'P', 'C', 'A']), i['Ticket_Lett'],\n                                   np.where((i['Ticket_Lett']).isin(['W', '4', '7', '6', 'L', '5', '8']),\n                                            'Low_ticket', 'Other_ticket'))\n        i['Ticket_Len'] = i['Ticket'].apply(lambda x: len(x))\n        del i['Ticket']\n    return train, test","15cce68f":"def cabin(train, test):\n    for i in [train, test]:\n        i['Cabin_Letter'] = i['Cabin'].apply(lambda x: str(x)[0])\n        del i['Cabin']\n    return train, test","6c1678ff":"def cabin_num(train, test):\n    for i in [train, test]:\n        i['Cabin_num1'] = i['Cabin'].apply(lambda x: str(x).split(' ')[-1][1:])\n        i['Cabin_num1'].replace('an', np.NaN, inplace = True)\n        i['Cabin_num1'] = i['Cabin_num1'].apply(lambda x: int(x) if not pd.isnull(x) and x != '' else np.NaN)\n        i['Cabin_num'] = pd.qcut(train['Cabin_num1'],3)\n    train = pd.concat((train, pd.get_dummies(train['Cabin_num'], prefix = 'Cabin_num')), axis = 1)\n    test = pd.concat((test, pd.get_dummies(test['Cabin_num'], prefix = 'Cabin_num')), axis = 1)\n    del train['Cabin_num']\n    del test['Cabin_num']\n    del train['Cabin_num1']\n    del test['Cabin_num1']\n    return train, test","d3a3526e":"def embarked_impute(train, test):\n    for i in [train, test]:\n        i['Embarked'] = i['Embarked'].fillna('S')\n    return train, test","6b8aab08":"test['Fare'].fillna(train['Fare'].mean(), inplace = True)","317c6194":"def dummies(train, test, columns = ['Pclass', 'Sex', 'Embarked', 'Ticket_Lett', 'Cabin_Letter', 'Name_Title', 'Fam_Size']):\n    for column in columns:\n        train[column] = train[column].apply(lambda x: str(x))\n        test[column] = test[column].apply(lambda x: str(x))\n        good_cols = [column+'_'+i for i in train[column].unique() if i in test[column].unique()]\n        train = pd.concat((train, pd.get_dummies(train[column], prefix = column)[good_cols]), axis = 1)\n        test = pd.concat((test, pd.get_dummies(test[column], prefix = column)[good_cols]), axis = 1)\n        del train[column]\n        del test[column]\n    return train, test","78911e29":"def drop(train, test, bye = ['PassengerId']):\n    for i in [train, test]:\n        for z in bye:\n            del i[z]\n    return train, test","b7eb83ef":"train = pd.read_csv(os.path.join('..\/input\/titanic\/train.csv'))\ntest = pd.read_csv(os.path.join('..\/input\/titanic\/test.csv'))\ntrain, test = names(train, test)\ntrain, test = age_impute(train, test)\ntrain, test = cabin_num(train, test)\ntrain, test = cabin(train, test)\ntrain, test = embarked_impute(train, test)\ntrain, test = fam_size(train, test)\ntest['Fare'].fillna(train['Fare'].mean(), inplace = True)\ntrain, test = ticket_grouped(train, test)\ntrain, test = dummies(train, test, columns = ['Pclass', 'Sex', 'Embarked', 'Ticket_Lett',\n                                                                     'Cabin_Letter', 'Name_Title', 'Fam_Size'])\ntrain, test = drop(train, test)","0d07cf7e":"print(len(train.columns))","51c30949":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(criterion='gini', \n                             n_estimators=700,\n                             min_samples_split=10,\n                             min_samples_leaf=1,\n                             max_features='auto',\n                             oob_score=True,\n                             random_state=1,\n                             n_jobs=-1)\nrf.fit(train.iloc[:, 1:], train.iloc[:, 0])\nprint(\"%.4f\" % rf.oob_score_)","07ac31ce":"pd.concat((pd.DataFrame(train.iloc[:, 1:].columns, columns = ['variable']), \n           pd.DataFrame(rf.feature_importances_, columns = ['importance'])), \n          axis = 1).sort_values(by='importance', ascending = False)[:20]","8307a852":"predictions = rf.predict(test)\npredictions = pd.DataFrame(predictions, columns=['Survived'])\ntest = pd.read_csv(os.path.join('..\/input\/titanic\/test.csv'))\npredictions = pd.concat((test.iloc[:, 0], predictions), axis = 1)\npredictions.to_csv('y_test15.csv', sep=\",\", index = False)","fff49724":"### \u203b 2. Pclass - \uc0ac\ud68c\uc801 \uc9c0\uc704\n### \u203b 6. SibSp - \uc790\ub9e4 \ubc0f \ubc30\uc6b0\uc790\uc640 \ud568\uaed8 \uc2b9\uc120\ud55c \uc0ac\ub78c \uc218\n### \u203b 7. Parch - \ubd80\ubaa8 \ubc0f \uc544\uc774\ub4e4\uc758 \uc218"}}