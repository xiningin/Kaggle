{"cell_type":{"64a560e7":"code","90d2fd97":"code","bb372e60":"code","b2fd7f9b":"code","19a7308d":"code","1ac04949":"code","62e2da05":"code","5097e555":"code","7c61bf02":"code","f3c3235b":"code","f23c9d35":"code","cc334853":"code","89886eda":"code","45b26d5e":"code","2a667747":"code","f5f42c3e":"code","5e3c9953":"code","ada25c08":"code","984da5eb":"code","45fb5c1e":"code","c73f6709":"code","e952207f":"code","2dbd831f":"code","fc680e83":"code","540c300b":"code","d74f0d6c":"code","4b208510":"code","179808b7":"code","5317c505":"code","bd739ab6":"code","82a9523b":"code","f2c83f97":"markdown","9a13b932":"markdown","785ca064":"markdown","c81fddad":"markdown","959c518a":"markdown","beb17572":"markdown","8be6e8fc":"markdown","808a09bb":"markdown","71cb0ed3":"markdown","8455f3f1":"markdown","eeb5e9e0":"markdown","9493248a":"markdown","54318669":"markdown","0e889cd7":"markdown","98298bdf":"markdown","35b109c5":"markdown","03605541":"markdown","d3196074":"markdown","0af5b0ca":"markdown","7eb1878e":"markdown","47afc998":"markdown","95a96eff":"markdown","c4562d9d":"markdown","0750cb13":"markdown"},"source":{"64a560e7":"import numpy as np\nimport pandas as pd\nfrom bokeh.io import show, output_file\nfrom bokeh.plotting import figure\nimport matplotlib.pyplot as plt\n%matplotlib inline","90d2fd97":"df_gtd = pd.read_csv(\"..\/input\/gtd\/globalterrorismdb_0718dist.csv\",encoding='ISO-8859-1') \ndf_gtd.shape","bb372e60":"df_gtd.head()","b2fd7f9b":"columns =df_gtd.columns\ncolumns\nnames =[ x for x in columns]\nprint (names)","19a7308d":"df_gtd.rename(columns={'iyear':'Year','imonth':'Month','iday':'Day','country_txt':'Country','region_txt':'Region','attacktype1_txt':'AttackType','target1':'Target','nkill':'Killed','nwound':'Wounded','summary':'Summary','gname':'Group','targtype1_txt':'Target_type','weaptype1_txt':'Weapon_type','motive':'Motive'},inplace=True)","1ac04949":"#removing unnecessary columns and creating new column\ndf_gtd=df_gtd[['Year','Month','Day','Country','Region','city','latitude','longitude','AttackType','Killed','Wounded','Target','Summary','Group','Target_type','Weapon_type','Motive']]\ndf_gtd['casualities']=df_gtd['Killed']+df_gtd['Wounded']\ndf_gtd.head()","62e2da05":"\n#df_death = df_gtd.groupby(by=[\"Country\",'Region']).sum()\ndf_region_wise = df_gtd[['Region','Killed','Wounded','casualities']].copy()\ndf_region_wise = df_region_wise.groupby(by=['Region']).sum()\ndf_region_wise","5097e555":"from bokeh.models import NumeralTickFormatter\nfrom bokeh.layouts import gridplot\nfrom bokeh.models import ColumnDataSource\nfrom math import pi\nfrom bokeh.io import output_notebook\nfrom bokeh.io import export_png\nfrom bokeh.io import curdoc, output_notebook\nfrom bokeh.models import HoverTool\n#from bokeh.layouts import widgetbox, row, column\nfrom bokeh.palettes import brewer\nfrom bokeh.models import FixedTicker,NumeralTickFormatter\n\noutput_notebook()\n","7c61bf02":"def set_stype(figure,  xlabel=\"\", ylabel=\"\"):\n    #figure.title = \n    figure.title.align ='center'\n    \n    figure.xaxis.axis_label=xlabel\n    figure.yaxis.axis_label =ylabel\n    figure.xaxis.axis_label_text_font=\"times\"\n    \n    figure.yaxis.axis_label_text_font=\"times\"\n    figure.xaxis.axis_label_text_font_style =\"bold\"\n    figure.yaxis.axis_label_text_font_style =\"bold\"\n    \n    figure.title.text_font = \"times\"\n    figure.title.text_font_style = \"bold\"\n\n    \n    ","f3c3235b":"\nsource = ColumnDataSource(df_region_wise)\nprint(df_region_wise.columns)\noptions = dict(plot_width=450, plot_height=450,\n               tools=\"pan,wheel_zoom,box_zoom,box_select,lasso_select\")\n#plot for death toll\np1 = figure(x_range= df_region_wise.index.tolist(), title=\"Death By Region\", **options )\np1.vbar(x= 'Region', top= 'Killed' , width=5,  fill_alpha=1,source=source) #, legend=\"MPG 1 stddev\")\np1.xaxis.major_label_orientation = pi\/2\np1.x_range.factor_padding = 5\np1.yaxis.formatter=NumeralTickFormatter(format=\"00\")\nset_stype(p1,  xlabel=\"Region\", ylabel =\"Killed\")\n\np2 = figure(x_range= df_region_wise.index.tolist(),title=\"Wounded By Regions\", **options)\np2.vbar(x= 'Region', top='Wounded' , width=5, fill_alpha=1, color='green',source =source)  #, legend=\"MPG 1 stddev\")\np2.xaxis.major_label_orientation = pi\/2\np2.x_range.factor_padding = 5\np2.yaxis.formatter=NumeralTickFormatter(format=\"00\")\nset_stype(p2,  xlabel=\"Region\", ylabel =\"Wounded\")\n\n\np3 = figure(x_range= df_region_wise.index.tolist(),title=\"Casualties By Region\", **options)\np3.vbar(x= 'Region', top='casualities' , width=5, fill_alpha=1, color='firebrick',source=source) #, legend=\"MPG 1 stddev\")\np3.xaxis.major_label_orientation = pi\/2\np3.x_range.factor_padding = 5\np3.yaxis.formatter=NumeralTickFormatter(format=\"00\")\nset_stype(p3,  xlabel=\"Region\", ylabel =\"Casualities\")\n\n\np = gridplot([[ p1, p2, p3]], toolbar_location=\"left\")\n\n\nshow(p)\n#export_png(p, filename=\".\/death_wounded_casualties_by_Region.png\")","f23c9d35":"#get number of attacks by years and regions\n\ndf_trend = df_gtd.groupby(['Region','Year']).size().reset_index().rename(columns={0:'count'})\n\nregions =df_trend.Region.unique() \nregions\n\nyears= df_trend.Year.unique()\nyears\n\ndf_trend.head()","cc334853":"from bokeh.plotting import figure,  show\n# select a palette\nfrom bokeh.palettes import Category20 as palette\n# itertools handles the cycling\nimport itertools  \nimport random\nfrom random import randint\n#output_file(\"patch.html\")\n\np = figure(plot_width=800, plot_height=800, title ='Attack Counts By Region')\n#colors = colorsk(len(regions))#list(np.random.choice(range(256), size=len(regions)))\n\ncolors = ['#440154', '#404387', '#29788E', '#22A784', '#79D151', '#FD0724','#37AB65', '#7C60A8', '#CF95D7', '#F6CC1D','#3DF735', '#AD6D70']\ncolor_id =0\nfor reg in regions:\n    \n    years = df_trend.loc[df_trend.Region == reg ,'Year']\n    counts = df_trend.loc[df_trend.Region == reg ,'count']\n    p.line( years,counts ,color= colors[color_id] , alpha=0.8, line_width=4,legend=reg ) \n    \n    color_id = color_id + 1\n\np.legend.location = \"top_left\"\np.legend.click_policy=\"hide\"\n#set_stype(p3,  xlabel=\"Region\", ylabel =\"Casualities\")\n\nset_stype(p,  xlabel=\"Year\", ylabel =\"Attack Counts\")\n#export_png(p, filename=\".\/Attack Counts By Region.png\")\nshow(p)\n\n","89886eda":"#creating geopanda dataframe from shape file\nimport geopandas as gpd\nshapefile = '..\/input\/shapes\/ne_110m_admin_0_countries.shp'\n#Read shapefile using Geopandas\ngdf = gpd.read_file(shapefile)[['ADMIN', 'ADM0_A3', 'geometry']]\n#Rename columns.\ngdf.columns = ['Country', 'country_code', 'geometry']\n#sorting dataframe \ngdf.sort_values(by=['Country'], inplace=True)\n#reseting index\ngdf.reset_index(drop=True, inplace=True)\n#print(np.array(gdf.Country))\n\n\n","45b26d5e":"#creating new dataframe for choropleth\ndf= df_gtd[['Country', 'Killed', 'Wounded' ]].groupby(by=\"Country\").sum()\ndf.reset_index(inplace=True)\ndf['Casulties'] = df.Killed + df.Wounded  \n#sorting by country name\ndf.sort_values(by=['Country'],  inplace=True)\n#reset index\ndf.reset_index(drop=True, inplace=True)\n#print(np.array(df.Country))","2a667747":"#country names in shape file dataframe(gdf) and csv dataframe df must match to show countries on map choropleth  \ndef get_countries_with_space(df):\n    #returns -1 whnen character is not found\n    #getting indexes of name containing spaces\n    result_df= np.core.defchararray.find(df.astype(str), ' ')\n    #print(result_df)\n    indexes = np.where(result_df != -1)\n    #print(indexes)\n    return indexes,df[indexes]\n\n\ndf_countries= np.array(df.Country)\n\nindex_df, countries_df = get_countries_with_space(df_countries)\n#print(countries_df)\n\n\n#preparing array of countries to changenames\nreplacement_df= ['Antigua and Barbuda', 'Burkina Faso', 'Central African Republic',\n 'Costa Rica', 'Czechia', 'Republic of the Congo',\n 'Dominican Republic', 'Germany' ,'East Timor' ,'El Salvador',\n 'Equatorial Guinea' ,'Falkland Islands' ,'Guyana', 'French Polynesia',\n 'Hong Kong', 'Ivory Coast', 'New Caledonia', 'New Hebrides', 'New Zealand',\n 'North Korea', 'Yemen', 'Papua New Guinea',\n \"Democratic Republic of the Congo\", 'Republic of the Congo', 'Saudi Arabia',\n 'Sierra Leone', 'Slovak Republic', 'Solomon Islands', 'South Africa',\n 'South Korea', 'South Sudan', 'Vietnam', 'Yemen', 'Russia',\n 'Sri Lanka', 'St. Kitts and Nevis', 'St. Lucia', 'Trinidad and Tobago',\n 'United Arab Emirates', 'United Kingdom', 'United States of America', 'Vatican City',\n 'Wallis and Futuna', 'West Bank and Gaza Strip', 'Germany','Western Sahara']\n\n#print(\"replacement indexes: \", index_df)\n\ndf_countries[index_df] = replacement_df\n\ndf.Country= df_countries\n#countries names in shape file\n# 'Afghanistan' 'Albania' 'Algeria' 'Angola' 'Antarctica' 'Argentina'\n#  'Armenia' 'Australia' 'Austria' 'Azerbaijan' 'Bangladesh' 'Belarus'\n#  'Belgium' 'Belize' 'Benin' 'Bhutan' 'Bolivia' 'Bosnia and Herzegovina'\n#  'Botswana' 'Brazil' 'Brunei' 'Bulgaria' 'Burkina Faso' 'Burundi'\n#  'Cambodia' 'Cameroon' 'Canada' 'Central African Republic' 'Chad' 'Chile'\n#  'China' 'Colombia' 'Costa Rica' 'Croatia' 'Cuba' 'Cyprus' 'Czechia'\n#  'Democratic Republic of the Congo' 'Denmark' 'Djibouti'\n#  'Dominican Republic' 'East Timor' 'Ecuador' 'Egypt' 'El Salvador'\n#  'Equatorial Guinea' 'Eritrea' 'Estonia' 'Ethiopia' 'Falkland Islands'\n#  'Fiji' 'Finland' 'France' 'French Southern and Antarctic Lands' 'Gabon'\n#  'Gambia' 'Georgia' 'Germany' 'Ghana' 'Greece' 'Greenland' 'Guatemala'\n#  'Guinea' 'Guinea-Bissau' 'Guyana' 'Haiti' 'Honduras' 'Hungary' 'Iceland'\n#  'India' 'Indonesia' 'Iran' 'Iraq' 'Ireland' 'Israel' 'Italy'\n#  'Ivory Coast' 'Jamaica' 'Japan' 'Jordan' 'Kazakhstan' 'Kenya' 'Kosovo'\n#  'Kuwait' 'Kyrgyzstan' 'Laos' 'Latvia' 'Lebanon' 'Lesotho' 'Liberia'\n#  'Libya' 'Lithuania' 'Luxembourg' 'Macedonia' 'Madagascar' 'Malawi'\n#  'Malaysia' 'Mali' 'Mauritania' 'Mexico' 'Moldova' 'Mongolia' 'Montenegro'\n#  'Morocco' 'Mozambique' 'Myanmar' 'Namibia' 'Nepal' 'Netherlands'\n#  'New Caledonia' 'New Zealand' 'Nicaragua' 'Niger' 'Nigeria' 'North Korea'\n#  'Northern Cyprus' 'Norway' 'Oman' 'Pakistan' 'Palestine' 'Panama'\n#  'Papua New Guinea' 'Paraguay' 'Peru' 'Philippines' 'Poland' 'Portugal'\n#  'Puerto Rico' 'Qatar' 'Republic of Serbia' 'Republic of the Congo'\n#  'Romania' 'Russia' 'Rwanda' 'Saudi Arabia' 'Senegal' 'Sierra Leone'\n\n\n#  'Slovakia' 'Slovenia' 'Solomon Islands' 'Somalia' 'Somaliland'\n#  'South Africa' 'South Korea' 'South Sudan' 'Spain' 'Sri Lanka' 'Sudan'\n#  'Suriname' 'Sweden' 'Switzerland' 'Syria' 'Taiwan' 'Tajikistan'\n#  'Thailand' 'The Bahamas' 'Togo' 'Trinidad and Tobago' 'Tunisia' 'Turkey'\n#  'Turkmenistan' 'Uganda' 'Ukraine' 'United Arab Emirates' 'United Kingdom'\n#  'United Republic of Tanzania' 'United States of America' 'Uruguay'\n#  'Uzbekistan' 'Vanuatu' 'Venezuela' 'Vietnam' 'Western Sahara' 'Yemen'\n#  'Zambia' 'Zimbabwe' 'eSwatini'\n","f5f42c3e":"#checking for gdf countrinames to match with df countries names\n\n\ngdf_countries = np.array(gdf.Country)\ndf_countries = np.array(df.Country)\n\n#getting nonnmatching values from gdf \nnonmached_gdf=[]\nfor i in gdf_countries:\n    if i not in df_countries:\n        nonmached_gdf.append(i)\n\n\n\n#print(nonmached_gdf)\n\n\n#getting nonnmatching values from df\nnonmached_df=[]\nindexes = []\ncount=0\nfor i in df_countries:\n    if i not in gdf_countries:\n        nonmached_df.append(i)\n        indexes.append(count)\n    count = count +1    \n\nreplacement= ['Andorra', 'Antigua and Barbuda', 'The Bahamas', 'Bahrain', 'Barbados', 'Bosnia and Herzegovina', 'Comoros', 'Czechia', \n              'Dominica', 'French Polynesia', 'Grenada', 'Guadeloupe', 'Hong Kong', 'International', 'Macau', 'Maldives', 'Malta', \n              'Martinique', 'Mauritius', 'New Hebrides', 'Rhodesia', 'Republic of Serbia', 'Republic of Serbia', 'Seychelles', 'Singapore', \n              'Slovakia', 'St. Kitts and Nevis', 'St. Lucia','Swaziland', 'United Republic of Tanzania', 'Vatican City', 'Wallis and Futuna',\n              'West Bank and Gaza Strip', 'Yugoslavia', 'Zaire']\n\n#replacing non matching values \ndf_countries[indexes] = replacement\n#replacing dataframe\ndf.Country = df_countries\n\n#here we have replaced all countries names in dataframe which is now matching with shape file names\n\n","5e3c9953":"# sum  duplicate countries attributes\ndf= df.groupby(by='Country').sum()\ndf.reset_index(inplace= True)\ndf.loc[df.Country == 'Russia']","ada25c08":"#merging both the dataframme with common column country\nmerged_df = gdf.merge(df, left_on = 'Country', right_on = 'Country',  how = 'left')\nmerged_df= merged_df.sort_values(by='Casulties', ascending= False )\nmerged_df.dropna( inplace = True)\nmerged_df.head()\n","984da5eb":"import json\n#merged_df= merged_df.loc[merged_df.Casulties>0,]\n#Read data to json.\nmerged_json = json.loads(merged_df.to_json())\n#Convert to String like object.\njson_data = json.dumps(merged_json)","45fb5c1e":"from bokeh.io import output_notebook, show, output_file\nfrom bokeh.plotting import figure\nfrom bokeh.models import GeoJSONDataSource, LinearColorMapper, ColorBar\nfrom bokeh.palettes import brewer\n#Input GeoJSON source that contains features for plotting.\ngeosource = GeoJSONDataSource(geojson = json_data)\n","c73f6709":"\npalette = brewer[\"Spectral\"][8]\n#palette = palette[::-1]\n\ncolor_mapper = LinearColorMapper (palette = palette, low=0 ,high=max(merged_df.Casulties))#merged_df.Casulties.max())#LogColorMapper(palette=palette , lo )\n\n#getting the maximum casualties\nmax_toll = merged_df.Casulties.max()\n\nticker = FixedTicker(ticks=[0,(max_toll*0.20),(max_toll*0.40),(max_toll*0.60),(max_toll*0.80),\n                            (max_toll)])\ncolor_bar = ColorBar(color_mapper=color_mapper,width = 800, height = 20,ticker = ticker, formatter = NumeralTickFormatter(format=\",\"),\nborder_line_color=None, orientation = 'horizontal', location=(0, 0) )#major_label_overrides = tick_labels)\n\nhover = HoverTool(tooltips = [ ('Country','@Country'),('Casualties', '@Casulties')])\n#Create figure object.\np = figure(title = 'Worldwide Casualties', plot_height = 600 , plot_width = 950, \n           tools = [hover,\"pan,wheel_zoom,box_zoom,reset\" ], \n           toolbar_location = \"left\")\n\np.xgrid.grid_line_color = None\np.ygrid.grid_line_color = None\n\n#Add patch renderer to figure. \np.patches('xs','ys', source = geosource,fill_color = {'field' :'Casulties', 'transform' : color_mapper},\n          line_color = 'white', line_width = 1, fill_alpha = 0.7)\n#Specify figure layout.\np.add_layout(color_bar, 'below')\n\n#Display figure inline in Jupyter Notebook.\n#output_notebook()\n#Display figure.\nset_stype(p)\n\nshow(p)\n#export_png(p, filename=\".\/worldwide_attack_map.png\")","e952207f":"#Pointing to observed terror attack location \/ city on maps\n#getting latitude and longitudes for markers\ndf= df_gtd.copy()\ndf=df.dropna()\ndf.drop_duplicates(['city'], inplace=True)\nsource_city = ColumnDataSource(\n    data=dict(lat=np.array(df.latitude),\n              lon=np.array(df.longitude))\n             \n)\np.circle(x=\"lon\", y=\"lat\", size=3, fill_color=\"red\", source=source_city)\nset_stype(p)\n#export_png(p, filename=\".\/worldwide_casualties_targed_location.png\")\nshow(p)","2dbd831f":"import folium \nfrom folium import plugins\nfrom folium.plugins import HeatMap\n\ndf= df_gtd.city.value_counts()\n#print(df)\n#remove row with unknwon index\ndf.drop(axis=1, index='Unknown', inplace=True)\n#convert index to column\ndf =df.reset_index()\ndf.rename(columns={'index':'city','city':'attackcount'}, inplace= True)\ndf.sort_values(by=['attackcount'],ascending=False,  inplace= True)\ntop_target_cities = df.head(100)\ntop_target_cities\n\nindex =0;\n\n#get lat long\ndf_city = df_gtd[['latitude','longitude','city','Country']]\nprint(df_city.shape)\ndf_city.drop_duplicates(inplace= True)\nprint(df_city.shape)\n\n\n#merge df\n\ntop_100 = top_target_cities.merge(df_city, left_on = 'city', right_on = 'city',  how = 'left')\ntop_100.drop_duplicates(subset=['city'],inplace=True)\ntop_100.sort_values(by='attackcount', ascending= False )\ntop_100.dropna( inplace = True)\ntop_100.reset_index(inplace=True) #to reset index from 0\ntop_100.drop(columns=['index'],inplace=True) #remove index deopped column\ntop_100\n\n\n\n","fc680e83":"m = folium.Map(location=[top_100.iloc[0]['latitude'], top_100.iloc[0]['longitude']], tiles=\"Mapbox Bright\", zoom_start=3)\n\n\nfor i in range(0,top_100.shape[0]):\n    row = top_100.iloc[i]\n    folium.Circle(\n      location=[row['latitude'], row['longitude']],\n      popup= row['city']+', '+row['Country']+' \\n Attack Counts: '+str(row['attackcount']),\n      radius=(int(row['attackcount']))*125,\n      color='steelblue',\n      fill=True,\n      fill_color='red'\n   ).add_to(m)\nm","540c300b":"#get attack by year\nfrom bokeh.palettes import Cividis256\n#from bokeh.charts import Area, show\ndf= df_gtd.copy()\ncounts = df_gtd.Year.value_counts()\ncounts.sort_index(ascending=False, inplace=True)\n\ndf = df_gtd.groupby(by='Year' ).sum()\ndf.sort_index(ascending= False, inplace=True)\ndf['AttackCount'] = counts\ndf.reset_index(inplace=True)\n\ncols = np.empty(shape=(df.Year.shape)  , dtype=\"object\")\n\n\n\nfor i in range(0,len(cols)):\n    attackCOunts = df.AttackCount.iloc[i]\n    year = df.Year.iloc[i]\n    color= 'mediumvioletred'\n    if (attackCOunts > 10000):\n        cols[i] = 'red'\n    else:\n        cols[i] = 'mediumvioletred'\ndf['Colors'] = cols\n\nsource = ColumnDataSource(df)\nhover = HoverTool(tooltips = [ ('Attack Counts','@AttackCount'), ('Year','@Year'), ('Casualities','@casualities')])\noptions = dict(plot_width=450, plot_height=500,\n               tools=[\"pan,wheel_zoom,box_zoom,box_select,lasso_select\", hover])\n\n\np = figure(**options, title=\"Attack Counts by Year\" )\np.line( 'Year','AttackCount' ,color= 'mediumvioletred', alpha=0.8, line_width=4, source = source )\n\np.circle('Year','AttackCount',  size=10, fill_color= 'Colors' , source = source, line_color = 'white')    \nset_stype(p,   xlabel=\"Year\", ylabel=\"Count Attacks\")\n\n\n#hover1 = HoverTool(tooltips = [ ('Casualities','@casualities'), ('Year','@Year')])\np3 = figure(**options, title=\"Casualties by Year\") # \n#p3.line( 'Year','casualities' ,color= 'red', alpha=0.8, line_width=4, source = source )\np3.circle(x='Year',y='casualities',  fill_color= 'Colors' , size=10, source = source, line_color = 'white')    \n#p3.vbar(x='Year',top='casualities',  fill_color= 'Colors' , width=2, source = source, line_color = 'white')    \np3.xaxis.major_label_orientation = pi\/2\nset_stype(p3,  xlabel=\"Year\", ylabel= \"Casualties\" )\n\np_grid = gridplot([[ p,  p3]], toolbar_location=\"left\")\n\nshow(p_grid)\n#export_png(p_grid, filename=\".\/attack counts and casualties by year  .png\")\n\n#df.head()","d74f0d6c":"from bokeh.palettes import OrRd9\nfrom bokeh.models import BoxSelectTool\n#count attacks by terrorist groups\ncounts = df_gtd.Group.value_counts()\n\n#getting top 20 active terror group\ncounts = counts[1:20]\ngroups = counts.index\nattackcounts = counts.values\n\nsource = ColumnDataSource(\n    data=dict(\n        group=groups,\n        attackcounts=attackcounts,\n        color = OrRd9\n    )\n             )\n\n#creating bar plot\nhover = HoverTool(tooltips = [ ('group','@group'), ('attackcounts','@attackcounts')])\np1 = figure(x_range= groups.tolist(), plot_width=900, plot_height=800,  title=\"Top 20 Terrorist Groups and attaks \",tools =[hover, 'box_select'],)\np1.vbar(x= 'group', top= 'attackcounts' , width=4,  fill_alpha=1, color = 'color', source = source , line_color =\"red\") \np1.xaxis.major_label_orientation = pi\/2\np1.x_range.factor_padding = 5\np1.yaxis.formatter=NumeralTickFormatter(format=\"00\")\nset_stype(p1, xlabel=\"Terror Group\", ylabel=\"Attack Counts\",)\n\nshow(p1)\n#export_png(p1, filename=\".\/Top 20 Terrorist Groups by attaks .png\")","4b208510":"#displaying type of attacks\nfrom bokeh.palettes import BuGn9\nfrom bokeh.models import BoxSelectTool\n#count attacks by terrorist groups\ncounts = df_gtd.AttackType.value_counts()\n\n\n\ngroups = counts.index\nAttackTypeCOunts = counts.values\n\nsource = ColumnDataSource(\n    data=dict(\n        group=groups,\n        AttackTypeCOunts=AttackTypeCOunts,\n        color = BuGn9\n    )\n             )\n\n#creating bar plot\nhover = HoverTool(tooltips = [ ('group','@group'), ('attackcounts','@AttackTypeCOunts')])\np1 = figure(x_range= groups.tolist(), title=\"Counts of different AttackTypes  \", tools =[hover, 'box_select'], width=800)\np1.vbar(x= 'group', top= 'AttackTypeCOunts' , width=4,  fill_alpha=1, color = 'color', source = source, line_color = 'cyan' ) \np1.xaxis.major_label_orientation = pi\/2\np1.x_range.factor_padding = 5\np1.x_range.range_padding = 0.1\np1.min_border_left=5\np1.yaxis.formatter=NumeralTickFormatter(format=\"00\")\n\n\n\nset_stype(p1, xlabel=\"AttackType\", ylabel=\"Attack Counts\")\n\nshow(p1)\n\n#export_png(p1, filename=\".\/Attack Type and counts .png\")\n","179808b7":"#get weapon details\ndf= df_gtd.copy()\ndf.dropna(inplace= True)\ndf = df.loc[df.Weapon_type != 'Unknown',]\ndf = df.Weapon_type.value_counts()\ndf\n\n#displaying type of attacks\nfrom bokeh.palettes import Cividis9\nfrom bokeh.models import BoxSelectTool\n#count attacks by terrorist groups\nweapons = df.index\n\n#getting top 20 active used weapons\n\ncounts = df.values\n\nsource = ColumnDataSource(\n    data=dict(\n        weapons=weapons,\n        counts=counts,\n        color = Cividis9\n    )\n             )\n\n#creating bar plot\nhover = HoverTool(tooltips = [ ('weapons','@weapons'), ('counts','@counts')])\np1 = figure(x_range= weapons.tolist(), title=\"Weapons Used in Attacks \", tools =[hover, 'box_select'], width=800, height = 700)\np1.vbar(x= 'weapons', top= 'counts' , width=4,  fill_alpha=1, color = 'color', source = source, line_color = 'cyan' ) \np1.xaxis.major_label_orientation = pi\/2\np1.x_range.factor_padding = 5\np1.x_range.range_padding = 0.1\np1.min_border_left=5\np1.yaxis.formatter=NumeralTickFormatter(format=\"00\")\n\nset_stype(p1, xlabel=\"Weapons\", ylabel=\"Counts\")\n\nshow(p1)\n\n#export_png(p1, filename=\".\/Counts Weapons in Attacks.png\")\n","5317c505":"\ntext = df_gtd.Target.dropna()\nprint(text.isna().sum())\ntext = \" \".join(str(motive) for motive in df_gtd.Motive)\nprint (\"There are {} words in the combination of all motives.\".format(len(text)))\n\ndf_gtd.Target.head()\n","bd739ab6":"from PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\n# Create stopword list:\nstopwords = set(STOPWORDS)\n#add additional stopwords\nstopwords.update([\"say\",\"NaN\",\"specific\" ,\"carried\",\"incident\",\"responsibility\",\"claimed\",\"noted\",\"United States\",\"minority\",\n                  \"party\",\"Party\",\"noted\",\"attack\",\"motive\",\"source\",\"sources\",\"stated\",\"part\",\"new\", \"us\",\n                  \"larger\",\"trend\",\"may\",\"target\",\"says\",\"call\",\"unknown\",\"nan\",\"NAN\",\"majority\",\"communities\",\"people\"])\n\n","82a9523b":"mask = np.array(Image.open(\"..\/input\/wordcloud\/terror.png\"))\n\nfont='..\/input\/wordcloud\/commando.ttf'\nwordcloud_usa = WordCloud(stopwords=stopwords,font_path= font, background_color=\"white\", mode=\"RGBA\", max_words=100000000, mask=mask).generate(text)\n\n# create coloring from image\nimage_colors = ImageColorGenerator(mask)\nplt.figure(figsize=[15,15])\nplt.imshow(wordcloud_usa.recolor(color_func=image_colors), interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.title(\"Wordcloud Motive\")\n# store to file \nplt.savefig(\"motive_word.png\", format=\"png\")\n\nplt.show()","f2c83f97":"# 1.Death, Wounded and Casualties by Region \nCasualties are calculated as sum of both death toll and wounded counts. ALl three plots are connected to each other and effect of interaction on any plot will be reflected to remaining plots. This work os achieved by availing Bokeh library.","9a13b932":"From the graph it is clear that in Middle East and North Africa counts of death ,wounded and casualties all are the highest. That is almost 14000, 200,000 and more than 300000 respectively. Middle East and North Africa is followed by South Asia and Sub-Sahran Africa. Interestingly, Central Asia , East Asia and Australia & Oceania have almost 0 or below 100 casualties. In other words, seems like nations in these regions like Australia and Israel have the most active counter-terror units to protect their citizens","785ca064":"# Add targeted cities on map ","c81fddad":"# 3.Bokeh with Maps , Geojson, Geopandas , Shapefile  \nFirst we load shape file of the world map which contains country names, country codes and their location. ","959c518a":"# 9.WordCloud visualization for Motives","beb17572":"# Create choropleth","8be6e8fc":"Using the word cloud visualization on the textual data we can detect most frequent words. As we can see violence is the the largest word. It means violence is the most frequent word in motive column of the dataset. Hence, violence is the most common motive behind all terror activities. Other motives behind terror attacks includes \u201cSunni\u201d,\u201dunited states\u201d,\u201dIslamic states\u201d .These are the most common motive as per the dataset.","808a09bb":"According to data Taliban (Afghanistan) is the most active group in the world with 7478 attacks till 2017. It is followed by ISIL(middle east, 5613 attacks) at second rank. Shining path (4555 attacks) at 3rd rank, FMLN(3351 attacks) 4th, Al Shabab (3288 attacks) 5th then NPA(2772 attacks) and Irish Republican Army-2671 attacks (active in Ireland, Europe) at 6th Rank.","71cb0ed3":"The interactive choropleth map above shows the worldwide casualties. Each country is colored according to the shade the casualties counts in terror attacks. The color palette below shows the casualties with respect to color. As we can see Iraq holds the rightmost color of the palette , hence with the highest casualties (213279 casualties ). That is followed by afghanisthan(>85000), Pakistan (>65000)and India(>48000). These countries have the highest casualties in terror attacks in the history. Countries with blue colors like Australia (136 only), Brazil (363),Jordan(393), Canada(511) have the lowest casualties in terror attacks.","8455f3f1":"The most prevalent type of weapons[](http:\/\/) in all attacks are bombing\/ explosion. According to data, so far more than 88 thousand bomb attacks are observed. Armed assault stands at 2nd rank with 42669 records. Assassination carried out by terror groups counts for 19312 records. Hostage taking, Facility attack , unnamed assult, hostage taking (barricade) , hijacking are other kind of terror styles. However, attacks types of 7276 records are still unknown.","eeb5e9e0":"From , above graph , it is clear that terror activities East Asia, Central Asia, Australia & Ocenia remain almost negligible throughout the time period (1970 \u2013 2017). In remaining regions, it remained at average 0f 50 from 1970 to 2000. However, sudden hike is observed in the duration of 2000 to 2017. What should be the reason behind it? Especially, in Middle East - North Africa and South Asia terror activities have drastically increased.","9493248a":"# 4.Top 100 Targeted cities in history  ","54318669":"# 8.Top 20 Weapons Used n Attack","0e889cd7":"# 6.Top 20 Terror Groups by attack counts ","98298bdf":"# 5.Attack Counts and Casualties By Year","35b109c5":"\nlets create a methode to set few features on plots","03605541":"Country names in the shape file must mach with the same in our dataframe. For example  country name \"Republic of Ireland\" \nis \"Ireland\" in df_gtd dataframe. To locate county and data on map it is vital to have same country names in geopanda dataframe \nand excel derived dataframe. The following code is to change our country names in df_gtd to be same as shapefile country names.\nIn other words after the process both data frame(gtd and geopanda-gdf) will have same name-'Republic of Ireland'.","d3196074":"The most prevalent type of attacks in all attacks are bombing\/ explosion. According to data, so far more than 88 thousand bomb attacks are observed. Armed assault stands at 2nd rank with 42669 records. Assassination carried out by terror groups counts for 19312 records. Hostage taking, Facility attack , unnamed assult, hostage taking (barricade) , hijacking are other kind of terror styles. However, attacks types of 7276 records are still unknown.","0af5b0ca":"# 2.Attack counts By regions and  year. \nWSe can observe that all regions are categorized by 12 Different regions as shown in the map. COunt attacks are displayed against the regions. By and large the highets attack counts are observed in \"North Africa and Middle East\" region that is more than 7000. Followed by South Asia region at the second rank. overall, it is good to know that  minimum terror attacks are observed in North and SOuth America Continents.  ","7eb1878e":"> Providing a shape to the wordcloud.","47afc998":"Adding cities on maps","95a96eff":"# INTERACTIVE DATA VISUALIZATION ON GLOBAL TERRORISM \n(9 Interactive Visualizations)\n\nMSc. Data Analytics\n\nDublin Business School\n\n**Dataset**\nThis dataset contains 100 variables on location, tactics, perpetrators, targets, and outcomes records of 180,000 records . Data can be found on https:\/\/www.kaggle.com\/START-UMD\/gtd\n\n**TOOLS FOR VISUALIZATION: PYTHON , JUPYTER **\n**LIBRARIES : PANDAS, NUMPY, MATPLOTLIB , BOKEH (FOR INTERACTIVE VISUALIZATIONS) , FOLIUM **\n\n**Initial Analysis Questions \/ visualizations **:------------------------------------------------------------------------------------------------------\n\n1. How many distinct regions exist in the dataset? What are the regions containing the highest and the lowest casualties?.Compare casualties, death toll and counts wounded in each region.\n\n2. Compare the terror attack trend in each regions.\n\n3. Use the geographic information from the dataset to create a map. And visualize the top countries affected by the terror attacks. Identify the top 5 countries with the highest casualties . And also mention countries with the least casualties and terror attacks?\n\n4. Highlite the top 100 terror targeted cities on map.\n\n5. Which are the 5 years with the highest terror attacks? What are the total casualties in the same years?\n\n6. What are the top 20 active terror groups ?\n\n7. Discuss the counts of terror attack by its type.\n\n8. What kinds of weapons are used in terror attacks?\n\n9. What is the most common motive behind the terror attacks?\n","c4562d9d":"# 7.Attack Types and Counts","0750cb13":"The line graph articulates the attack counts by year and scatter plot represents the casualties by year. We can observe the rise in terror activity with the time in 20th century. Attacks were highest in 2014(16903attacks and more than 68000 casualties). 2012, 2013,2014,2015,2016,2017 holds the highest terror attacks across the globe, This points are red colored in the graph."}}