{"cell_type":{"1ef520de":"code","b0f93316":"code","933a8bfb":"code","13a0c40c":"code","772d8696":"code","d2ae5573":"code","c549a7dc":"code","e51655f6":"code","9ec536bc":"code","28027cdd":"code","2238de30":"code","8b83c4ab":"code","0bcbf890":"code","e1f3735d":"code","2ecfffb5":"code","baea0c66":"code","a8c72b26":"code","3bf5c4e4":"code","ee94bfef":"code","416a4cee":"code","a8674c77":"code","0351b703":"code","2f7c0740":"code","69576e22":"code","2d1a28fc":"code","b0f8274c":"code","ac14f32c":"code","b2fc269c":"code","2136f013":"code","830bce0e":"code","d2439d79":"code","57b76091":"code","ea484142":"code","b3b25a15":"markdown","1e4aebe9":"markdown"},"source":{"1ef520de":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport cufflinks as cf\ncf.go_offline()","b0f93316":"raw_data = pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")\nraw_data.head()","933a8bfb":"raw_data.describe(include = \"all\")","13a0c40c":"sns.heatmap(raw_data.isnull(),yticklabels = False ,cbar = False,cmap = 'viridis');","772d8696":"print(f\"Percentage of missing value in BIM is  {(raw_data['bmi'].isnull().sum()\/raw_data.shape[0])*100:0.2f}\")","d2ae5573":"raw_data.dropna(axis = 0, inplace = True)\nraw_data.head()","c549a7dc":"raw_data['stroke']=raw_data['stroke'].astype(str)\nfig = px.scatter(raw_data,x='age',y='bmi',color = 'stroke')\nfig.show()","e51655f6":"fig = px.histogram(raw_data,x='age',color = 'stroke',marginal=\"box\")\nfig.show()","9ec536bc":"sns.countplot(x='work_type',data = raw_data);","28027cdd":"raw_data['gender'].value_counts()","2238de30":"raw_data['gender'].replace(to_replace = 'Other',value ='Female',inplace = True)","8b83c4ab":"sns.countplot(x='gender',data = raw_data,hue = 'stroke');","0bcbf890":"sns.displot(raw_data['age'],kde= True)\nplt.show()","e1f3735d":"sns.displot(raw_data['avg_glucose_level'],kde= True,color = 'green')\nplt.show()","2ecfffb5":"sns.countplot(x='Residence_type',data = raw_data,hue = 'stroke');","baea0c66":"smoke_group = ['never smoked','Unknown','smokes','formerly smoked']\nsmoke_dict = {}\n\nfor i in smoke_group:\n    \n    per = (len(raw_data[raw_data[\"smoking_status\"] == i])\/len(raw_data))*100\n    \n    smoke_dict.update({i:round(per)})\n\nprint(smoke_dict)","a8c72b26":"sizes = smoke_dict.values()\n\nlabels = smoke_dict.keys()\n\nexplode = (0.1, 0, 0, 0.1) \n\nfig1, ax = plt.subplots(figsize=(12,5))\nax.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90)\n\nax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.title(\"Smoking Status Percentage \")\nplt.show()","3bf5c4e4":"sns.countplot(x='smoking_status',data = raw_data,hue = 'stroke');","ee94bfef":"raw_data['bmi'].iplot(kind = 'hist')","416a4cee":"raw_data['smoking_status'].value_counts()\/raw_data['smoking_status'].value_counts().sum()\n# unknown will replace with never smoked","a8674c77":"raw_data['work_type'].value_counts()\/raw_data['work_type'].value_counts().sum()","0351b703":"data = raw_data.copy()\n\ndata['gender']= data['gender'].map({'Female':1,\"Male\":0})\ndata['ever_married'] = data['ever_married'].map({'Yes':1,\"No\":0})\ndata['Residence_type'] = data['Residence_type'].map({'Urban':0,'Rural':1})\ndata['smoking_status'] = data['smoking_status'].map({'never smoked':0,'Unknown':0,'smokes':1,'formerly smoked':2})\ndata['work_type'] = data['work_type'].map({'Private':1,'Self-employed':2,'children':3,'Govt_job':4,'Never_worked':5})","2f7c0740":"data.head()","69576e22":"y= data['stroke']\nX = data.drop(columns = ['stroke','id'],axis = 1)","2d1a28fc":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nX_scale = scaler.fit_transform(X)","b0f8274c":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test = train_test_split(X_scale,y,test_size = 0.30,random_state = 42)","ac14f32c":"from sklearn.linear_model import LogisticRegression\n\nlogmodel = LogisticRegression()\n\nlogmodel.fit(X_train,y_train)","b2fc269c":"predictions = logmodel.predict(X_test)","2136f013":"from sklearn.metrics import classification_report","830bce0e":"import warnings\nwarnings.filterwarnings('ignore')\n\nprint(classification_report(y_test,predictions))","d2439d79":"from sklearn.metrics import confusion_matrix","57b76091":"confusion_matrix(y_test,predictions)","ea484142":"logmodel.score(X_test,y_test)","b3b25a15":"### The graph shows there is an inverse relationship between Smoking and Stroke","1e4aebe9":"# Converting categorical data to numerical"}}