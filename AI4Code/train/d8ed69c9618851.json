{"cell_type":{"49cb8ada":"code","3e87c0d0":"code","8c8f67f8":"code","88543559":"code","24ffc5d9":"code","5a6c9e09":"code","fc71a9db":"code","7ee3f8e5":"code","af8ff13e":"code","52c24c0e":"code","e4562fd3":"code","da7131b0":"code","093e4838":"code","bfa82b7f":"code","9b417ed3":"code","72ea0a47":"code","b29756aa":"code","ed09951c":"code","da64f1a0":"code","4dd4bdc0":"code","7e821581":"code","c1e2a17d":"code","d43100b0":"code","3defe95d":"code","30863274":"code","3998ca99":"code","92dd9054":"code","3cc24cb4":"code","2ac1ba74":"code","24c8af70":"code","132fbe09":"code","aa356b54":"code","c65dcadc":"code","56ecdaf5":"code","a27924f1":"code","d8b3735d":"code","282a2c51":"code","90409df8":"code","1f1b8bd6":"code","e5434056":"code","32858a5f":"code","9ed27df2":"code","89ce5dce":"code","6757488e":"code","3d13fbcf":"code","be557146":"code","f4cf1354":"code","8baf1a4b":"markdown","38cb44a2":"markdown","687e1e49":"markdown","49fa17df":"markdown","4d7d5fa2":"markdown","fa076a24":"markdown","8c49dc4f":"markdown","a1a078c1":"markdown","b7ce690c":"markdown","c36dc1ba":"markdown","466974f3":"markdown","d0e5fffa":"markdown","a7379f07":"markdown","136f2b27":"markdown","0baad961":"markdown","28649d60":"markdown","ac28380e":"markdown","fc7828fe":"markdown","8a7b8460":"markdown","6dd56e88":"markdown"},"source":{"49cb8ada":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nwarnings.simplefilter(\"ignore\")","3e87c0d0":"df = pd.read_csv(\"..\/input\/travel-insurance-prediction-data\/TravelInsurancePrediction.csv\")\ndf.head()","8c8f67f8":"# Looking for missing values in the dataset\ndf.isna().sum()","88543559":"# Dropping few columns from the dataset\ndf.drop([\"Unnamed: 0\", \"GraduateOrNot\"], axis=1, inplace=True)","24ffc5d9":"df.head()","5a6c9e09":"df.describe()","fc71a9db":"# Having a look at the correlation matrix\n\nfig, ax = plt.subplots(figsize=(8,6))\nsns.heatmap(df.corr(), annot=True, fmt='.1g', cmap=\"viridis\", cbar=True);","7ee3f8e5":"plt.style.use(\"classic\")\nfig, ax = plt.subplots(figsize=(8,6))\nsns.countplot(df[\"Age\"]);","af8ff13e":"plt.style.use(\"classic\")\nfig, ax = plt.subplots(figsize=(8,6))\nsns.countplot(df[\"FamilyMembers\"]);","52c24c0e":"plt.style.use(\"classic\")\nfig, ax = plt.subplots(figsize=(8,6))\nsns.distplot(df[\"AnnualIncome\"], color=\"g\")\nplt.title(f\"Annual Income Distribution [ \\u03BC: {df['AnnualIncome'].mean():.2f} ]\")\nplt.show()","e4562fd3":"plt.style.use(\"seaborn\")\nfig, ax = plt.subplots(figsize=(8,6))\nplt.pie(x=df[\"ChronicDiseases\"].value_counts(), \n        colors=[\"crimson\",\"firebrick\"], \n        labels=[\"Non-Chronic\",\"Chronic\"], \n        shadow = True, \n        explode = (0, 0.1)\n        )\nplt.show()","da7131b0":"plt.style.use(\"classic\")\nfig, ax = plt.subplots(figsize=(8,6))\nsns.countplot(x=df[\"FrequentFlyer\"], palette=\"crest\");","093e4838":"plt.style.use(\"seaborn\")\nfig, ax = plt.subplots(figsize=(8,6))\nplt.pie(x=df[\"EverTravelledAbroad\"].value_counts(), \n        colors=[\"mediumorchid\",\"darkorchid\"], \n        labels=[\"Non Abroad Travellers\",\"Abroad Travellers\"], \n        shadow = True, \n        explode = (0, 0.1)\n        )\nplt.show()","bfa82b7f":"fig, ax = plt.subplots(figsize=(8,6))\nplt.pie(x=df[\"TravelInsurance\"].value_counts(), \n        colors=[\"darkorange\",\"orange\"], \n        labels=[\"Don't have Travel Insurance\",\"Have Travel Insurance\"], \n        shadow = True, \n        explode = (0, 0.07)\n        )\nplt.show()","9b417ed3":"# Yes : 1 , No : 0\ndf['FrequentFlyer'] = df['FrequentFlyer'].map({'Yes': 1, 'No': 0})\ndf['EverTravelledAbroad'] = df['EverTravelledAbroad'].map({'Yes': 1, 'No': 0})\n\n# Government Sector : 1, Private Sector\/Self Employed : 0\ndf[\"Employment Type\"] = df[\"Employment Type\"].map({\"Government Sector\" : 1, \"Private Sector\/Self Employed\" : 0})","72ea0a47":"# Having a look at the dataset after the numerical transformation\ndf.head()","b29756aa":"# X data\nX = df.drop(\"TravelInsurance\", axis=1)","ed09951c":"X.head()","da64f1a0":"# y data\ny = df[\"TravelInsurance\"]\ny.head()","4dd4bdc0":"# Splitting the data into X train, X test and y train, y test\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=42)","7e821581":"len(X_train), len(X_test)","c1e2a17d":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()","d43100b0":"rf.fit(X_train, y_train)","3defe95d":"RandomForestClassifierScore = rf.score(X_test,y_test)\nRandomForestClassifierScore","30863274":"print(\"Accuracy obtained by RandomForestClassifier model:\", RandomForestClassifierScore*100)","3998ca99":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()","92dd9054":"lr.fit(X_train, y_train)","3cc24cb4":"LogisticRegressionScore = lr.score(X_test,y_test)\nLogisticRegressionScore","2ac1ba74":"print(\"Accuracy obtained by Logistic Regression model:\",LogisticRegressionScore*100)","24c8af70":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(4)","132fbe09":"knn.fit(X_train, y_train)","aa356b54":"KNeighborsClassifierScore = knn.score(X_test,y_test)\nKNeighborsClassifierScore","c65dcadc":"print(\"Accuracy obtained by KNeighborsClassifier model:\",KNeighborsClassifierScore*100)","56ecdaf5":"from catboost import CatBoostClassifier\ncat = CatBoostClassifier(iterations=10)\ncat.fit(X_train, y_train);","a27924f1":"CatBoostClassifierScore = cat.score(X_test,y_test)\nprint(\"Accuracy obtained by CatBoost Classifier model:\",CatBoostClassifierScore*100)","d8b3735d":"from sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier()\ntree.fit(X_train,y_train)","282a2c51":"DecisionTreeClassifierScore = tree.score(X_test,y_test)\nprint(\"Accuracy obtained by Decision Tree Classifier model:\",DecisionTreeClassifierScore*100)","90409df8":"from sklearn.ensemble import GradientBoostingClassifier\n\ngb = GradientBoostingClassifier()\ngb.fit(X_train, y_train)","1f1b8bd6":"GradientBoostingClassifierScore = gb.score(X_test,y_test)\nprint(\"Accuracy obtained by Gradient Boosting Classifier model:\",GradientBoostingClassifierScore*100)","e5434056":"plt.style.use(\"classic\")\nx = [\"LogisticRegression\", \n     \"Decision Tree Classifier\", \n     \"RandomForestClassifier\", \n     \"KNeighborsClassifier\", \n     \"CatBoost Classifier\", \n     \"Gradient Boosting Classifier\"]\n\ny = [LogisticRegressionScore, \n     DecisionTreeClassifierScore, \n     RandomForestClassifierScore, \n     KNeighborsClassifierScore, \n     CatBoostClassifierScore, \n     GradientBoostingClassifierScore]\n\nfig, ax = plt.subplots(figsize=(8,6))\nsns.barplot(x=x,y=y, palette=\"crest\");\nplt.xlabel(\"Models\")\nplt.ylabel(\"Model Accuracy\")\nplt.xticks(rotation=40)\nplt.title(\"Model Comparison - Model Accuracy\");","32858a5f":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = {\n    'bootstrap': [True],\n    'max_depth': [80, 90, 100, 110, 120],\n    'max_features': [2, 3],\n    'min_samples_leaf': [3, 4, 5],\n    'min_samples_split': [8, 10, 12],\n    'criterion' : ['gini', 'entropy'],\n    'n_estimators': [100, 200, 300, 1000]\n}\n\ngrid_search_rf = GridSearchCV(estimator = rf, \n                              param_grid = param_grid, \n                              cv = 3, n_jobs = -1, verbose = 2)","9ed27df2":"grid_search_rf.fit(X_train, y_train)","89ce5dce":"grid_search_rf.best_params_","6757488e":"grid_search_rf.best_score_","3d13fbcf":"grid_search_rf_predict = grid_search_rf.predict(X_test)","be557146":"print('Improvement in Random Forest Classifier after GridSearchCV: {:0.2f}%.'.format(100 * (grid_search_rf.best_score_ - RandomForestClassifierScore) \/ RandomForestClassifierScore))","f4cf1354":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test, grid_search_rf_predict))","8baf1a4b":"## Training the Model","38cb44a2":"## Comparing performance of the models","687e1e49":"Most of the family members count to 4 with lowest being 8 and 9.","49fa17df":"Most of the applicants are `Non Frequent Flyers`","4d7d5fa2":"## CatBoost Classifier","fa076a24":"## Logistic Regression","8c49dc4f":"# Travel Insurance Predictions \u2708 \ud83d\udcc3","a1a078c1":"## Decision Tree Classifier","b7ce690c":"## Gradient Boosting Classifier","c36dc1ba":"## Splitting the data into training and test datasets\nHere, we are trying to predict whether the traveller has a Travel Insurance or not using the given data. Hence, the `TravelInsurance` will be the y label and rest of the data will be the X or the input data.","466974f3":"## KNeighbors Classifier","d0e5fffa":"## Random Forest Classifier ","a7379f07":"Most of the applications are from the people aged 28 and lowest from age 35.\nMaximum age of the applicant is 35 and the minimum is 25 years.","136f2b27":"## Importing Libraries","0baad961":"Most of the flyers `don't have a Travel Insurance`","28649d60":"## Loading up the data","ac28380e":"## Hyperparamter Tuning on Random Forest Classifier","fc7828fe":"#### If you like my work, It will be really great of you to upvote this notebook!\n#### If not then you leaving a comment on what do I need to work on and improve will be really helpful!","8a7b8460":"Most of the applicants are `Non Abroad Travellers`","6dd56e88":"## Making the dataset all numerical"}}