{"cell_type":{"613d6b22":"code","8963b2e6":"code","78afa737":"code","9cc1a4be":"code","5550495e":"code","2a89b654":"code","2c5aa6c9":"code","2c1a2d80":"code","05c5a34f":"code","bad258a0":"code","89c87a05":"code","00afcd18":"markdown","d01af08e":"markdown","a79e062a":"markdown","ab15a0ba":"markdown","2ce94bf8":"markdown"},"source":{"613d6b22":"# Ideas\n## binning age\n## split names, check families\n## investigate if 'SibSp' and 'Parch' have some relationship? binning?\n## verify if tickets have some pattern\n## Try some relationship test for Children age < XX and 'SibSp', 'Parch'\n## imputation for NANs\n## Family size = SibSp + Parch + 1\n## Is Cabin? Wich type A, B, C or D etc\n## No Ticket?\n\n\n## Skewed variables\n### 'SibSp', 'Parch', 'Fare'","8963b2e6":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)\n\nimport seaborn as sns\nimport sklearn\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport missingno as msno\nimport re\n\n\nprint(\"seaborn\", sns.__version__)\nprint(\"pandas\", pd.__version__)\n\nfrom pathlib import Path\n\nPATH = Path.cwd().parent\nDATA_PATH = \"..\/input\/tabular-playground-series-apr-2021\/\"\nSEED = 42","78afa737":"train = pd.read_csv(DATA_PATH + \"train.csv\")\nprint(train.info())","9cc1a4be":"train.head()","5550495e":"test = pd.read_csv(DATA_PATH + \"test.csv\")\nprint(test.info())","2a89b654":"test.head()","2c5aa6c9":"# Imputation\n# Skewed variables \/ for linear models should be transformed\n## 'SibSp', 'Parch', 'Fare'\n\nfrom sklearn.preprocessing import KBinsDiscretizer\n\ndef impute(df, col, by, agg_func=\"mean\"):\n    df.loc[df[col].isna(), \"flag_na\"] = 1\n    global_agg = df[df[col].notna()][col].agg(agg_func)\n    group_agg = df[df[col].notna()].groupby(by, as_index=False)[col].agg(agg_func)\n#     print(group_agg)\n    df_imp = df.merge(group_agg, on=by, how=\"left\", suffixes=(\"\", \"_imp\"))\n    df.loc[df[col].isna(), col] = df_imp.loc[df_imp[col].isna(), col+\"_imp\"]\n    df[col].fillna(global_agg, inplace=True)\n    return df\n\ndef preprocess(df):\n    # imputation\n    df[\"flag_na\"] = 0\n    df[\"Embarked\"].fillna(\"-999\", inplace=True)\n    df = impute(df, \"Age\", [\"Pclass\", \"Sex\"])\n    df = impute(df, \"Fare\", [\"Pclass\", \"Sex\", \"Embarked\"])    \n    return df","2c1a2d80":"def ord_discretize(df, col, n_bins=10, sufix=\"_disc\"):\n    discretizer = KBinsDiscretizer(n_bins=n_bins, encode=\"ordinal\")\n    discrete_values = discretizer.fit_transform(df[col].values.reshape(-1, 1))\n    df[col+sufix] = pd.Series(discrete_values.reshape(-1))\n    return df\n\ndef get_ticket_letters(x):\n    z = \"\".join(re.findall(\"[a-zA-Z]+\", x))\n    if z == \"\":\n        z=\"-999\"\n    return z\n\ndef feature_engineering(df):\n    # first and last names\n    names = df[\"Name\"].str.split(\",\", expand=True)\n    names.columns = [\"LastName\", \"FirstName\"]\n    df = pd.concat([df, names], axis=1)\n    \n    # Family Size\n    df[\"FamilySize\"] = df.SibSp + df.Parch + 1\n    \n    # Age Features\n    df[\"IsChild\"] = df.Age.apply(lambda x: 1 if x <=12 else 0)   \n    df[\"IsOld\"] = df.Age.apply(lambda x: 1 if x >=65 else 0)\n    df = ord_discretize(df, \"Age\")\n\n    # Cabin Type\n    df[\"CabinType\"] = df.Cabin.apply(lambda x: str(x)[0])\n    \n    # Tickets Information\n    df[\"NoTicket\"] = df.Ticket.apply(lambda x: 1 if x == None else 0)\n    df[\"Ticket\"] = df.Ticket.fillna(\"0\")\n    df[\"TicketInfo\"] = df.Ticket.apply(get_ticket_letters)\n    \n    return df","05c5a34f":"train = train \\\n    .pipe(preprocess) \\\n    .pipe(feature_engineering)\n\ntrain.info()\ntrain.head()","bad258a0":"test = test \\\n    .pipe(preprocess) \\\n    .pipe(feature_engineering)\n\ntest.info()\ntest.head()","89c87a05":"train.to_csv(\"train_processed.csv\")\ntest.to_csv(\"test_processed.csv\")","00afcd18":"## Preprocess","d01af08e":"## Libraries and Settings","a79e062a":"## Load the data","ab15a0ba":"## Feature Engineering","2ce94bf8":"# Tabular Playground Series - Apr-2021\nhttps:\/\/www.kaggle.com\/c\/tabular-playground-series-apr-2021"}}