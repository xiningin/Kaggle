{"cell_type":{"4a7f3ce8":"code","0108f616":"code","c5290e13":"code","094f2b6f":"code","f61a7776":"code","cf979d2d":"code","67594e48":"code","5aab6eb8":"code","8da37a9c":"code","db742a7c":"code","3380e867":"code","866106eb":"code","03208219":"code","bc96dee3":"code","87f80c5e":"code","f85f1ef4":"code","6c7c8731":"code","11e19235":"code","aaf50cfb":"code","26849a6b":"code","2ca2e57c":"code","326a1b18":"code","85f08231":"code","6938d8f6":"markdown","bd10cd29":"markdown","50b6db35":"markdown","31ddc2e6":"markdown"},"source":{"4a7f3ce8":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, BatchNormalization, GlobalAveragePooling2D, Flatten, Dropout\nfrom keras import models\nfrom tensorflow.python.keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing.image import load_img, img_to_array\n","0108f616":"PATH = '..\/input\/yelp-photos\/photos\/'","c5290e13":"nbPictures = 10000\nchunks = pd.read_json('..\/input\/yelp-photos\/photos.json', lines=True, chunksize = nbPictures)","094f2b6f":"df = pd.DataFrame(columns=['photo_id', 'label'])\nx = 0\nfor chunk in chunks:\n    if(x == 0):\n        if ((chunk.iloc[0].label == 'drink') & len(chunk.label.value_counts()) == 1):\n            df = pd.concat([df, chunk])   \n            x = x + 1\n    if(x == 1):    \n        if ((chunk.iloc[0].label == 'food') & len(chunk.label.value_counts()) == 1):\n            df = pd.concat([df, chunk])  \n            x = x + 1\n    if(x == 2):    \n        if ((chunk.iloc[0].label == 'interior') & len(chunk.label.value_counts()) == 1):\n            df = pd.concat([df, chunk])  \n            x = x + 1\n    if(x == 3):    \n        if ((chunk.iloc[0].label == 'outside') & len(chunk.label.value_counts()) == 1):\n            df = pd.concat([df, chunk])  \n            x = x + 1\n    if(x == 4):    \n        if ((chunk.iloc[0].label == 'menu') & len(chunk.label.value_counts()) == 1):\n            df = pd.concat([df, chunk])  \n            x = x + 1\n    if(x == 5):\n        break\ndf","f61a7776":"df = df.assign(photo_id=lambda x: x + '.jpg')","cf979d2d":"df_train = df.sample(round(5*nbPictures*(4\/5)),random_state=42)","67594e48":"df_test = df.merge(df_train, how = 'outer' ,indicator=True).loc[lambda x : x['_merge']=='left_only']","5aab6eb8":"custom_model= models.Sequential()\n#first layer\ncustom_model.add(Conv2D(16, (3, 3), activation='relu', padding='same', input_shape=(150,150,3)))\ncustom_model.add(MaxPooling2D((2, 2), padding='same'))\n# second layer\ncustom_model.add(Conv2D(32, (3, 3), activation='relu', padding='same'))\ncustom_model.add(MaxPooling2D((2, 2), padding='same'))\n# third layer\ncustom_model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))\ncustom_model.add(MaxPooling2D((2, 2), padding='same'))\n# 4 layer\ncustom_model.add(Conv2D(128, (3, 3), activation='relu', padding='same'))\ncustom_model.add(MaxPooling2D((2, 2), padding='same'))\n\n#Top\ncustom_model.add(Flatten())\n\ncustom_model.add(Dropout(0.25))\ncustom_model.add(Dense(5, activation='softmax'))","8da37a9c":"custom_model.summary()","db742a7c":"custom_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","3380e867":"es=EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=5)\nmc= ModelCheckpoint('\/kaggle\/working\/custom_cnn.h5', monitor='val_loss', mode='min', verbose=1, save_best_only=True)\ncallbacks=[es,mc]","866106eb":"train_datagen = ImageDataGenerator(\n        rescale=1 \/ 255.0,\n        rotation_range=20,\n        zoom_range=0.05,\n        width_shift_range=0.05,\n        height_shift_range=0.05,\n        shear_range=0.05,\n        horizontal_flip=True,\n        fill_mode=\"nearest\",\n        validation_split=0.20)\n\nvalid_datagen = ImageDataGenerator(\n        rescale=1 \/ 255.0,\n        validation_split=0.20)","03208219":"batch_size=20","bc96dee3":"train_generator = train_datagen.flow_from_dataframe(\n    dataframe=df_train,\n    directory=PATH,\n    x_col='photo_id',\n    y_col='label',\n    target_size=(150, 150),\n    batch_size=batch_size,\n    class_mode=\"categorical\",\n    subset='training',\n    shuffle=True,\n    seed=42\n)\nvalid_generator  = train_datagen.flow_from_dataframe(\n    dataframe=df_train,\n    directory=PATH,\n    x_col='photo_id',\n    y_col='label',\n    target_size=(150, 150),\n    batch_size=batch_size,\n    class_mode=\"categorical\",\n    subset='validation',\n    shuffle=True,\n    seed=42\n)","87f80c5e":"epochs = 30\n \nhistory = custom_model.fit(\n    train_generator,\n    validation_data = train_generator,\n    steps_per_epoch = train_generator.n\/\/train_generator.batch_size,\n    validation_steps = valid_generator.n\/\/valid_generator.batch_size,\n    epochs=epochs,\n    callbacks=callbacks\n)","f85f1ef4":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Validation'], loc='upper left')","6c7c8731":"result = [(0, 'drink'),(1, 'food'),(2, 'interior'), (3, 'menu'), (4, 'outside')]\nresult = pd.DataFrame(columns=['id', 'label'], data=result)\n\nresult","11e19235":"test_result = df_test[['photo_id', 'label']]\ntest_result['predicted'] = ''\ntest_result = test_result.reset_index(drop=True)","aaf50cfb":"def predictLabel(url, model):\n    img = load_img(PATH + url, target_size=(150, 150))\n    \n    #Rescale 1\/255\n    img = np.asarray(img)\n    img = img.astype('float32')\n    img \/= 255.0\n    \n    img = img.reshape((1, img.shape[0], img.shape[1], img.shape[2]))\n  \n    y_label = model.predict(img)\n    y_argmax = np.argmax(y_label)\n    y = result.loc[result.id == y_argmax].label.values[0]\n    return y","26849a6b":"%%time\nfor i, val in test_result.iterrows():\n    test_result.loc[i].predicted = predictLabel(val.photo_id, custom_model)","2ca2e57c":"test_result['score'] = ''\nfor i, val in test_result.iterrows():\n    if(val.label == val.predicted):\n        test_result.loc[i].score = 1\n    else:\n        test_result.loc[i].score = 0","326a1b18":"test_result.score.value_counts(normalize=True)","85f08231":"for label in result.label:\n    print(test_result[test_result.label == label].score.mean())","6938d8f6":"## Generators","bd10cd29":"## Preparing Data","50b6db35":"## Testing set","31ddc2e6":"## Creating CNN"}}