{"cell_type":{"1f68dcf3":"code","df1f2c44":"code","76e17e51":"code","13e45fca":"code","d93153f3":"code","341e0d5f":"code","d67cbe9e":"code","4bf8cee8":"code","e778664a":"code","9c036733":"code","a1437707":"code","f0f9d5a9":"code","ecd4009c":"markdown","4034a3ad":"markdown","ca8dc920":"markdown","1bfdb041":"markdown","6c8e4e06":"markdown","95ab9354":"markdown","4585b8e7":"markdown","ab7b5106":"markdown","7e2b9da8":"markdown","4067e752":"markdown","891deb2e":"markdown","652974a9":"markdown","b8e090b1":"markdown","4b8f8a5d":"markdown","697be2aa":"markdown","426d6569":"markdown"},"source":{"1f68dcf3":"from IPython.display import clear_output\nimport warnings\nwarnings.filterwarnings('ignore')\n#! pip install datasets transformers[sentencepiece]","df1f2c44":"from transformers import pipeline\n\nclassifier = pipeline(\"sentiment-analysis\"); clear_output()\nclassifier(\"I've been waiting for a HuggingFace course my whole life.\")","76e17e51":"classifier([\n    \"I've been waiting for a HuggingFace course my whole life.\", \n    \"I hate this so much!\"\n])","13e45fca":"from transformers import pipeline\n\nclassifier = pipeline(\"zero-shot-classification\"); clear_output()\n\nclassifier(\n    \"This is a course about the Transformers library\",\n    candidate_labels=[\"education\", \"politics\", \"business\"],\n)","d93153f3":"from transformers import pipeline\n\ngenerator = pipeline(\"text-generation\"); clear_output()\n\ngenerator(\"In this course, we will teach you how to\",\n          num_return_sequences=2, max_length=30)","341e0d5f":"from transformers import pipeline\n\ngenerator = pipeline(\"text-generation\", model=\"openai-gpt\"); clear_output()\n\ngenerator(\n    \"In this course, we will teach you how to\",\n    max_length=30,\n    num_return_sequences=1,\n)","d67cbe9e":"from transformers import pipeline\n\nunmasker = pipeline(\"fill-mask\"); clear_output()\nunmasker(\"The capital <mask> of Japan is Tokyo\", top_k=2)","4bf8cee8":"unmasker = pipeline(\"fill-mask\", model=\"bert-base-cased\"); clear_output()\nunmasker(\"The capital [MASK] of Japan is Tokyo\", top_k=2)","e778664a":"from transformers import pipeline\n\nner = pipeline(\"ner\", grouped_entities=True); clear_output()\nner(\"My name is Sylvain and I work at Hugging Face in Brooklyn.\")","9c036733":"from transformers import pipeline\n\nquestion_answerer = pipeline(\"question-answering\"); clear_output()\nquestion_answerer(\n    question=\"Where do I work?\",\n    context=\"My name is Sylvain and I work at Hugging Face in Brooklyn\"\n)","a1437707":"from transformers import pipeline\n\nsummarizer = pipeline(\"summarization\"); clear_output()\nsummarizer(\"\"\"\n    America has changed dramatically during recent years. Not only has the number of \n    graduates in traditional engineering disciplines such as mechanical, civil, \n    electrical, chemical, and aeronautical engineering declined, but in most of \n    the premier American universities engineering curricula now concentrate on \n    and encourage largely the study of engineering science. As a result, there \n    are declining offerings in engineering subjects dealing with infrastructure, \n    the environment, and related issues, and greater concentration on high \n    technology subjects, largely supporting increasingly complex scientific \n    developments. While the latter is important, it should not be at the expense \n    of more traditional engineering.\n\n    Rapidly developing economies such as China and India, as well as other \n    industrial countries in Europe and Asia, continue to encourage and advance \n    the teaching of engineering. Both China and India, respectively, graduate \n    six and eight times as many traditional engineers as does the United States. \n    Other industrial countries at minimum maintain their output, while America \n    suffers an increasingly serious decline in the number of engineering graduates \n    and a lack of well-educated engineers.\n\"\"\", max_length=100)","f0f9d5a9":"from transformers import pipeline\n\ntranslator = pipeline(\"translation\", model=\"t5-small\"); clear_output()\ntranslator(\"My name is Wolfgang and I live in Berlin.\")","ecd4009c":"## 6. Summarization\n---\nSummarization is the task of reducing a text into a shorter text while keeping all (or most) of the important aspects referenced in the text. Like with text generation, you can specify a `max_length` or a `min_length` for the result.","4034a3ad":"The most basic object in the \ud83e\udd17 Transformers library is the pipeline. It connects a model with its necessary preprocessing and postprocessing steps, allowing us to directly input any text and get an intelligible answer:","ca8dc920":"By default, this pipeline selects a particular pretrained model that has been fine-tuned for sentiment analysis in English. The model is downloaded and cached when you create the classifier object. If you rerun the command, the cached model will be used instead and there is no need to download the model again.\n\nThere are three main steps involved when you pass some text to a pipeline:\n\n1. The **text is preprocessed** into a format the model can understand.\n2. The preprocessed inputs are **passed to the model**.\n3. The predictions of the model are **post-processed**, so you can make sense of them.\n\nSome of the currently available pipelines are:\n\n- feature-extraction (get the vector representation of a text)\n- fill-mask\n- ner (named entity recognition)\n- question-answering\n- sentiment-analysis\n- summarization\n- text-generation\n- translation\n- zero-shot-classification\n\nLet\u2019s have a look at a few of these!","1bfdb041":"<div class=\"alert alert-info\">\n  <strong>Using any model from the Hub in a pipeline<\/strong><br>\n  The previous examples used the default model for the task at hand, but you can also choose a particular model from the Hub to use in a pipeline for a specific task \u2014 say, text generation. Go to the <a href=\"https:\/\/huggingface.co\/models\" class=\"alert-link\">Model Hub<\/a> and click on the corresponding tag on the left to display only the supported models for that task.\n<\/div>","6c8e4e06":"## 7. Translation\n---\nthe easiest way is to pick the model you want to use on the [Model Hub](https:\/\/huggingface.co\/models). Here we\u2019ll try translating from English to German.","95ab9354":"You can refine your search for a model by clicking on the language tags, and pick a model that will generate text in another language. The Model Hub even contains checkpoints for multilingual models that support several languages.\n\nOnce you select a model by clicking on it, you\u2019ll see that there is a widget enabling you to try it directly online. This way you can quickly test the model\u2019s capabilities before downloading it.","4585b8e7":"In this section, we will look at what Transformer models can do and use our first tool from the \ud83e\udd17 Transformers library: **the pipeline**.\n\n","ab7b5106":"## 3. Mask filling\n---\nThe idea of this task is to fill in the blanks in a given text\n\nThe `top_k` argument controls how many possibilities you want to be displayed. \n\nNote that here the model fills in the special **\\<mask\\>** word, which is often referred to as a mask token. **Other mask-filling models might have different mask tokens**, so it\u2019s always good to verify the proper mask word when exploring other models. One way to check it is by looking at the mask word used in the widget.","7e2b9da8":"## 5. Question answering\n---\nThe question-answering pipeline **answers questions using information from a given context**. The pipeline works by extracting information from the provided context; it does not generate the answer.","4067e752":"## 1. Zero-shot classification\n---\n the zero-shot-classification pipeline is very powerful: **it allows you to specify which labels to use for the classification**, so you don\u2019t have to rely on the labels of the pretrained model.","891deb2e":"# Transformers, what can they do?","652974a9":"This pipeline is called zero-shot because you don\u2019t need to fine-tune the model on your data to use it. It can directly return probability scores for any list of labels you want!","b8e090b1":"## 2. Text generation\n---\nThe main idea here is that you **provide a prompt and the model will auto-complete** it by generating the remaining text. Text generation involves randomness, so it\u2019s normal if you don\u2019t get the same results each time.\n\nYou can control how many different sequences are generated with the argument `num_return_sequences` and the total length of the output text with the argument `max_length`.","4b8f8a5d":"Full original tutorial at https:\/\/huggingface.co\/course\/chapter1\n___","697be2aa":"Here the model correctly identified that Sylvain is a person (PER), Hugging Face an organization (ORG), and Brooklyn a location (LOC).\n\nOption `grouped_entities=True` in the pipeline creation function tells the pipeline to **regroup together the parts of the sentence that correspond to the same entity**: here the model correctly grouped \u201cHugging\u201d and \u201cFace\u201d as a single organization, even though the name consists of multiple words. \n\nIn fact, the preprocessing even splits some words into smaller parts. For instance, Sylvain is split into four pieces: S, ##yl, ##va, and ##in. In the post-processing step, the pipeline successfully regrouped those pieces.","426d6569":"## 4. Named entity recognition\n---\nNamed entity recognition (NER) is a task where the model has to **find which parts of the input text correspond to entities** such as persons, locations, or organizations. "}}