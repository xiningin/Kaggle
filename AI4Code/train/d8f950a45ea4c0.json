{"cell_type":{"af2e3ac1":"code","2996da10":"code","83d4f32a":"code","63b72a6e":"code","1233ea95":"code","272edef1":"code","72639512":"code","f37f1b50":"code","b616d425":"code","f8ef2054":"code","69e82ff1":"code","7f477017":"code","0572c9a3":"code","a97c7a57":"code","dd678e08":"code","cc648db4":"code","472af398":"code","94aca256":"code","e32e2944":"code","c40d17e0":"code","7cde7297":"code","6dc9a348":"code","8315423e":"code","55361a50":"code","148c87e8":"markdown","e5771ade":"markdown","8d20bfb1":"markdown","07b0e943":"markdown","ef32d765":"markdown","d796aa1d":"markdown","b0e6f2f7":"markdown","5541441e":"markdown","c1cac7bf":"markdown"},"source":{"af2e3ac1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2996da10":"import sklearn\nimport scipy\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.metrics import classification_report,accuracy_score\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.svm import OneClassSVM\n\n","83d4f32a":"from pylab import rcParams\nrcParams['figure.figsize'] =14,8\nRANDOM_SEED = 36\nLABELS =['Normal','Fraud']\n","63b72a6e":"data = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\ndata.head()","1233ea95":"data.info()","272edef1":"data.isnull().values.any()","72639512":"cp = sns.countplot(x ='Class',data = data)\nplt.xticks(np.arange(2),LABELS)\nplt.xlabel('Class')\nplt.ylabel('Count')\nplt.title('Normal vs Fraud Transaction Count')\nplt.legend(loc ='best')\nplt.show()","f37f1b50":"normal =data[data['Class'] ==0]\nfraud =data[data['Class'] ==1]","b616d425":"print(normal.shape,fraud.shape)","f8ef2054":"fraud.Amount.describe()","69e82ff1":"normal.Amount.describe()","7f477017":"f, (ax1,ax2) = plt.subplots(2,1, sharex = True)\nf.suptitle('Amount of transaction by class')\nbins = 50\nax1.hist(fraud.Amount,bins = bins)\nax1.set_title('Fraud')\nax2.hist(normal.Amount,bins = bins)\nax2.set_title('Normal')\nplt.xlabel('Amount in $')\nplt.ylabel('Number of Transactions')\nplt.xlim((0,20000))\nplt.yscale('log') # for viewing the data well in histogram","0572c9a3":"f, (ax1,ax2) = plt.subplots(2,1,sharex = True)\nf.suptitle('Time of transaction vs amount by class')\nax1.scatter(fraud.Time,fraud.Amount)\nax1.set_title('Fraud')\nax1.set_xlabel('Time ( in seconds)')\nax1.set_ylabel('Amount')\nax2.scatter(normal.Time,normal.Amount)\nax2.set_title('Normal')\nax2.set_xlabel('Time ( in seconds)')\nax2.set_ylabel('Amount')","a97c7a57":"data1 = data.sample(frac = 0.1, random_state = 1)\ndata1.shape","dd678e08":"data.shape","cc648db4":"normal1 = data1[data1['Class'] ==0]\nfraud1 = data1[data1['Class'] ==1]\n\nprint(normal1.shape,fraud1.shape)","472af398":"fraud_fraction = len(fraud1)\/float(len(normal1))\nprint(fraud_fraction)","94aca256":"print('Number of Fraud cases : {}'.format(len(fraud1)))\nprint('Number of Normal cases: {}'.format(len(normal1)))\nprint('Fraud percentage : {} %'.format(round(fraud_fraction*100,3)))","e32e2944":"core = data1.corr()\ntop_features = core.index\nplt.figure(figsize =(20,20))\n\nh = sns.heatmap(data[top_features].corr(),annot = True, cmap = 'coolwarm')","c40d17e0":"columns =data1.columns.tolist()\ncolumns = [c for c in columns if c not in ['Class']]\n\ntarget = 'Class'\n\nstate = np.random.RandomState(36)\n\nX = data1[columns]\ny = data1[target]\n\nprint(X.shape)\nprint(y.shape)\n","7cde7297":"n_outliers = len(fraud)\nn_outliers","6dc9a348":"#Using Isolation Forest\nIF =IsolationForest(n_estimators=100, max_samples=len(X), \n                                       contamination=fraud_fraction,random_state=state, verbose=0) \nclf = IF.fit(X)\nscores_prediction = clf.decision_function(X)\ny_pred = clf.predict(X)\ny_pred[y_pred == 1] = 0\ny_pred[y_pred == -1] = 1\nn_errors = (y_pred != y).sum()\n\nprint(\"Isolation Forest: {}\".format(n_errors))\nprint(\"Accuracy Score :\")\nprint(accuracy_score(y,y_pred))\nprint(\"Classification Report :\")\nprint(classification_report(y,y_pred))","8315423e":"#Using Local Outlier Factor algorithm\n\nLOF = LocalOutlierFactor(n_neighbors=20, algorithm='auto', \n                                              leaf_size=30, metric='minkowski',\n                                              p=2, metric_params=None, contamination=fraud_fraction)\ny_pred =LOF.fit_predict(X)\n\n\ny_pred[y_pred == 1] = 0\ny_pred[y_pred == -1] = 1\nn_errors = (y_pred != y).sum()\n\nprint(\"LocalOutlierFactor: {}\".format(n_errors))\nprint(\"Accuracy Score :\")\nprint(accuracy_score(y,y_pred))\nprint(\"Classification Report :\")\nprint(classification_report(y,y_pred))","55361a50":"#Using Support Vector machine\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.svm import SVC\n\nn_estimators = 10\n\nORC = OneVsRestClassifier(SVC(kernel='linear', probability=True, class_weight='balanced'))\n\nclf2 = ORC.fit(X,y)\n\ny_pred = clf2.predict(X)\n\ny_pred[y_pred == 1] = 0\ny_pred[y_pred == -1] = 1\nn_errors = (y_pred != y).sum()\n\nprint(\"OneVsRestClassifier: {}\".format(n_errors))\nprint(\"Accuracy Score :\")\nprint(accuracy_score(y,y_pred))\nprint(\"Classification Report :\")\nprint(classification_report(y,y_pred))","148c87e8":"**Lets see whether fraudelent transactions are happening in a certain time frame**","e5771ade":"**OneVsRestClassifier have the most accuracy with 99.8 % Accuracy !!! Wow**","8d20bfb1":"**Taking sample of data**","07b0e943":"****Isolation Forest Algorithm : ****\n\nOne of the newest techniques to detect anomalies is called Isolation Forests. The algorithm is based on the fact that anomalies are data points that are few and different. As a result of these properties, anomalies are susceptible to a mechanism called isolation.\n\nThis method is highly useful and is fundamentally different from all existing methods. It introduces the use of isolation as a more effective and efficient means to detect anomalies than the commonly used basic distance and density measures. Moreover, this method is an algorithm with a low linear time complexity and a small memory requirement. It builds a good performing model with a small number of trees using small sub-samples of fixed size, regardless of the size of a data set.\n\nTypical machine learning methods tend to work better when the patterns they try to learn are balanced, meaning the same amount of good and bad behaviors are present in the dataset.\n\nHow Isolation Forests Work The Isolation Forest algorithm isolates observations by randomly selecting a feature and then randomly selecting a split value between the maximum and minimum values of the selected feature. The logic argument goes: isolating anomaly observations is easier because only a few conditions are needed to separate those cases from the normal observations. On the other hand, isolating normal observations require more conditions. Therefore, an anomaly score can be calculated as the number of conditions required to separate a given observation.\n\nThe way that the algorithm constructs the separation is by first creating isolation trees, or random decision trees. Then, the score is calculated as the path length to isolate the observation.","ef32d765":"**Exploratory Data Analysis**","d796aa1d":"**The number of fraud cases are much lesser than normal cases**","b0e6f2f7":"**Model Prediction**","5541441e":"**Creating independent and dependent features**","c1cac7bf":"**Local Outlier Factor(LOF) Algorithm**\nThe LOF algorithm is an unsupervised outlier detection method which computes the local density deviation of a given data point with respect to its neighbors. It considers as outlier samples that have a substantially lower density than their neighbors.\n\nThe number of neighbors considered, (parameter n_neighbors) is typically chosen 1) greater than the minimum number of objects a cluster has to contain, so that other objects can be local outliers relative to this cluster, and 2) smaller than the maximum number of close by objects that can potentially be local outliers. In practice, such informations are generally not available, and taking n_neighbors=20 appears to work well in general."}}