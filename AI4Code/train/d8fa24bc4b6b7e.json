{"cell_type":{"2e7cc4b9":"code","dcb50633":"code","ca61720c":"code","f3e43c96":"code","e21c83b4":"code","96cb1b82":"code","9d4f87bc":"code","9822283a":"code","b1024041":"code","2df97581":"code","4bed6a02":"code","ace4ce73":"code","bea66e6d":"markdown","d6832082":"markdown","2f79415e":"markdown","57aca5db":"markdown","7fa66038":"markdown"},"source":{"2e7cc4b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dcb50633":"# for numerical analyiss\nimport numpy as np\n\n# to store and process data in dataframe\nimport pandas as pd\n\n# to interface with operating system\nimport os\n\n# for offline ploting\nimport matplotlib.pyplot as plt\n\n# interactive visualization\nimport plotly.express as px\nimport seaborn as sns\n\nsns.set()\n\nfrom plotly.offline import plot, iplot, init_notebook_mode\n\ninit_notebook_mode(connected=True)\n\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\n# for trendlines\nimport statsmodels","ca61720c":"!pip install yfinance --upgrade --no-cache-dir\n# https:\/\/pypi.org\/project\/fix-yahoo-finance\/","f3e43c96":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport datetime as dt\nimport yfinance as yf\n\n# find the symbol (i.e., google the instrument + 'yahoo finance') to any data series you are interested at \n# e.g., market\/sector index ETF for your chosen country and various asset classes (e.g., Comex Gold's symbol is 'GC=F')\n# e.g., SPY (https:\/\/finance.yahoo.com\/quote\/SPY\/)\n\nsymbols_list = ['SPY', 'ETH-USD','BTC-USD','XRP-USD','ADA-USD']\nstart = dt.datetime(2016,7,15)\nend = dt.datetime(2021,7,15)\ndata = yf.download(symbols_list, start=start, end=end)","e21c83b4":"data.tail()","96cb1b82":"# filter column adjusted close\ndf = data['Adj Close']\ndf.tail()","9d4f87bc":"# pct_change for returns\n# first element is NaN, so we remove\ndf['ada_ret'] =df['ADA-USD'].pct_change()[1:]\ndf['spy_ret'] =df['SPY'].pct_change()[1:]\ndf['eth_ret'] =df['ETH-USD'].pct_change()[1:]\ndf['xrp_ret'] =df['XRP-USD'].pct_change()[1:]\ndf['btc_ret'] =df['BTC-USD'].pct_change()[1:]\ndf.tail()","9822283a":"df['spy_volatility_1y'] = (df['spy_ret'].rolling(252).std())*(252)**(1\/2) # 252 trading days per year\ndf['eth_volatility_1y'] = (df['eth_ret'].rolling(252).std())*(252)**(1\/2) # 252 trading days per year\ndf['ada_volatility_1y'] = (df['ada_ret'].rolling(252).std())*(252)**(1\/2) # 252 trading days per year\ndf['xrp_volatility_1y'] = (df['xrp_ret'].rolling(252).std())*(252)**(1\/2) # 252 trading days per year\ndf['btc_volatility_1y'] = (df['eth_ret'].rolling(252).std())*(252)**(1\/2) # 252 trading days per year\ndf.tail()","b1024041":"df['eth_ret'].describe()","2df97581":"df['btc_ret'].plot()\ndf['spy_ret'].plot()\n#df['SPY'].plot()\ndf['eth_ret'].plot()\ndf['ada_ret'].plot()\ndf['xrp_ret'].plot()\nplt.ylabel('returns of BTC-USD and ETH-USD')\nplt.show()","4bed6a02":"sns.displot(df[\"btc_ret\"])\nprint(\"BTC Skewness: %f\" % df[\"btc_ret\"].skew())\nsns.displot(df[\"spy_ret\"])\nprint(\"SPY Skewness: %f\" % df[\"spy_ret\"].skew())\nsns.displot(df[\"ada_ret\"])\nprint(\"ADA Skewness: %f\" % df[\"ada_ret\"].skew())\nsns.displot(df[\"eth_ret\"])\nprint(\"ETH Skewness: %f\" % df[\"eth_ret\"].skew())\nsns.displot(df[\"xrp_ret\"])\nprint(\"XRP Skewness: %f\" % df[\"xrp_ret\"].skew())\n","ace4ce73":"baseline_corr = df[['ada_ret', 'ada_volatility_1y', 'btc_ret', 'btc_volatility_1y',\n                         'spy_ret', 'spy_volatility_1y', 'eth_ret','eth_volatility_1y','xrp_ret','xrp_volatility_1y']].dropna().corr()\n\nfig, ax = plt.subplots(figsize=(20,10)) \nsns.heatmap(baseline_corr, annot=True, ax = ax)","bea66e6d":"### 3. Are the crypto assets good additions to a S&P 500 portfolio? Why?","d6832082":"All the 4 crypto assets return seem to have a minor positive correlation with SPY returns, however the volatility of ADA and XRP are slightly negatively correlated with SPY. This could signify that these two \"alt coins\" could be used as a hedge during market down turns. On a side not, ETH and BTC and heavily correlated with each other in terms of both their returns and volatility","2f79415e":"\n### 2. Calculate the skewness (Hint: check out Panda method skew()). Compare and contrast the skewness across the five assets.\n","57aca5db":"### 1. Compare and contrast the risk and return profile of BTC-USD, ETH-USD, XRP-USD, ADA-USD, and SPY. The first four are crypto assets. Feel free to explore other crypto assets!","7fa66038":"### SET UP USED "}}