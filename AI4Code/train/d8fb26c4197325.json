{"cell_type":{"678ff11d":"code","dfab0d9d":"code","bed5c4d4":"code","ea074f6f":"code","a81873be":"code","75d561c4":"code","4ac56087":"code","803d5000":"code","8bcdd125":"code","c14da8e8":"code","509d11d1":"code","b6b61dae":"code","f4b1aee1":"code","a602c477":"code","b4155131":"code","1366e778":"code","23978e05":"code","ba43ac1a":"code","7f6ddbe7":"code","ef37546d":"code","03a8be7c":"code","645a5305":"code","a9dfea61":"code","97fb65c4":"code","30557aef":"code","2cde2d85":"code","bca96cf3":"code","0af386f3":"code","be99c72d":"code","5c45483c":"code","ade3b9da":"code","81dfbde8":"code","e0284b20":"code","20c19e61":"code","ebe68eeb":"code","d3fa4e59":"code","3df30957":"code","22842833":"code","d25f8b07":"code","5c477e70":"code","0b5d62a8":"code","4bd4903c":"code","1fca010a":"code","a21f68ee":"code","b04a1188":"code","f1762d95":"code","3964ba82":"code","197a0f1f":"code","632f3243":"code","73bb68ee":"code","982a63e0":"code","7b7d4f33":"markdown","5a96208f":"markdown","92b2e74b":"markdown","0b874714":"markdown","cfec27ab":"markdown","7ca2ad7e":"markdown"},"source":{"678ff11d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dfab0d9d":"from sklearn.feature_selection import SelectFromModel\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, RandomizedSearchCV\nfrom sklearn.metrics import confusion_matrix, accuracy_score, f1_score, classification_report\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n\nimport xgboost as xgb","bed5c4d4":"import matplotlib.pyplot as plt\nplt.style.use('classic')","ea074f6f":"df = pd.read_csv('..\/input\/costa-rican-household-poverty-prediction\/train.csv', index_col='Id')\ndf.info()","a81873be":"df_nans = df.isna().sum()[df.isna().sum() >0]\ndf_nans","75d561c4":"df[df_nans.index].info()","4ac56087":"df[df_nans.index].describe()","803d5000":"fig, axs = plt.subplots(1,5,figsize=(24,8))\n\nfor idx, col in enumerate(df_nans.index):\n    axs[idx].set_title(col)\n    axs[idx].boxplot(df[col].dropna(axis=0))\n\nplt.show()","8bcdd125":"def fill_nas(df):\n    df['v2a1'] = df['v2a1'].fillna(df['v2a1'].median())\n    df['meaneduc'] = df['meaneduc'].fillna(df['meaneduc'].median())\n    df['SQBmeaned'] = df['SQBmeaned'].fillna(df['SQBmeaned'].median())\n    df['v18q1'] = df['v18q1'].fillna(-1)\n    df['rez_esc'] = df['rez_esc'].fillna(-1)\n    return df","c14da8e8":"df = fill_nas(df)","509d11d1":"df.isna().sum()[df.isna().sum() >0]","b6b61dae":"df.select_dtypes(include=['object'])","f4b1aee1":"df['edjefe'].unique()","a602c477":"df['edjefa'].unique()","b4155131":"df['dependency'].unique()","1366e778":"def replace_yes_no(df, column):\n    df['{}_yes'.format(column)] = df[column].apply(lambda row: 1 if row=='yes' else 0)\n    df['{}_no'.format(column)] = df[column].apply(lambda row: 1 if row=='no' else 0)\n    df[column] = df[column].apply(lambda row: row if row not in ['yes', 'no'] else -1)\n    df[column] = pd.to_numeric(df[column])\n    return df","23978e05":"def replace_yes_no_all(df):\n    df = replace_yes_no(df, 'edjefe')\n    df = replace_yes_no(df, 'edjefa')\n    df = replace_yes_no(df, 'dependency')\n    return df","ba43ac1a":"df = replace_yes_no_all(df)","7f6ddbe7":"fig, axs = plt.subplots(1,3,figsize=(24,8))\n\naxs[0].hist(df['dependency'])\naxs[1].hist(df['edjefe'])\naxs[2].hist(df['edjefa'])\n\nplt.show()\n","ef37546d":"df.select_dtypes(include=['float64'])","03a8be7c":"df['Target']","645a5305":"# add the number of people over 18 in each household\ndef add_over_18(df):\n    df['num_over_18'] = 0\n    df['num_over_18'] = df[df.age >= 18].groupby('idhogar').transform(\"count\")\n    df['num_over_18'] = df.groupby(\"idhogar\")[\"num_over_18\"].transform(\"max\")\n    df['num_over_18'] = df['num_over_18'].fillna(0)\n    return df\n\ndf = add_over_18(df)\n# add some extra features, these were taken from another kernel\ndef extract_features(df):\n    df['bedrooms_to_rooms'] = df['bedrooms']\/df['rooms']\n    df['rent_to_rooms'] = df['v2a1']\/df['rooms']\n    df['tamhog_to_rooms'] = df['tamhog']\/df['rooms'] # tamhog - size of the household\n    df['r4t3_to_tamhog'] = df['r4t3']\/df['tamhog'] # r4t3 - Total persons in the household\n    df['r4t3_to_rooms'] = df['r4t3']\/df['rooms'] # r4t3 - Total persons in the household\n    df['v2a1_to_r4t3'] = df['v2a1']\/df['r4t3'] # rent to people in household\n    df['v2a1_to_r4t3'] = df['v2a1']\/(df['r4t3'] - df['r4t1']) # rent to people under age 12\n    df['hhsize_to_rooms'] = df['hhsize']\/df['rooms'] # rooms per person\n    df['rent_to_hhsize'] = df['v2a1']\/df['hhsize'] # rent to household size\n    df['rent_to_over_18'] = df['v2a1']\/df['num_over_18']\n    # some households have no one over 18, use the total rent for those\n    df.loc[df.num_over_18 == 0, \"rent_to_over_18\"] = df[df.num_over_18 == 0].v2a1\n    return df\n    \ndf = extract_features(df) ","a9dfea61":"X = df.drop(['Target', 'idhogar'], axis=1)\ny = df['Target']","97fb65c4":"y = y.apply(lambda row: row-1)","30557aef":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","2cde2d85":"fit_params={\"eval_metric\" : 'merror', \n            \"eval_set\" : [(X_train,y_train), (X_test, y_test)],\n           }","bca96cf3":"xgb_model = xgb.XGBClassifier(n_jobs=4)\nxgb_model.fit(X_train, y_train, **fit_params)","0af386f3":"y_pred = xgb_model.predict(X_test)","be99c72d":"y_pred","5c45483c":"confusion_matrix(y_test, y_pred)","ade3b9da":"accuracy_score(y_test, y_pred)","81dfbde8":"f1_score(y_test, y_pred, average='macro')","e0284b20":"rf_model = RandomForestClassifier(n_jobs=-1, n_estimators=200, random_state=42)\nrf_model.fit(X_train, y_train)","20c19e61":"y_rf_pred = rf_model.predict(X_test)\nconfusion_matrix(y_test, y_rf_pred)","ebe68eeb":"accuracy_score(y_test, y_rf_pred)","d3fa4e59":"f1_score(y_test, y_rf_pred, average='macro')","3df30957":"gb_model = GradientBoostingClassifier(random_state=42)\ngb_model.fit(X_train, y_train)","22842833":"y_gb_pred = gb_model.predict(X_test)\nconfusion_matrix(y_test, y_gb_pred)","d25f8b07":"accuracy_score(y_test, y_gb_pred)","5c477e70":"f1_score(y_test, y_gb_pred, average='macro')","0b5d62a8":"df_submit = pd.read_csv('..\/input\/costa-rican-household-poverty-prediction\/test.csv', index_col='Id')","4bd4903c":"df_submit.isna().sum()[df_submit.isna().sum() >0]","1fca010a":"df_submit_cleaned = df_submit","a21f68ee":"df_submit_cleaned = replace_yes_no_all(df_submit_cleaned)\ndf_submit_cleaned = fill_nas(df_submit_cleaned)\ndf_submit_cleaned = add_over_18(df_submit_cleaned)\ndf_submit_cleaned = extract_features(df_submit_cleaned)","b04a1188":"df_submit_cleaned = df_submit.drop(['idhogar'], axis=1)","f1762d95":"x_submit = df_submit_cleaned","3964ba82":"y_submit_raw = xgb_model.predict(x_submit)","197a0f1f":"y_submit = pd.DataFrame(y_submit_raw, index=df_submit_cleaned.index, columns=['Target'])","632f3243":"y_submit['Target'].unique()","73bb68ee":"y_submit['Target'] = y_submit['Target'].apply(lambda row: row+1)\ny_submit['Target'].unique()","982a63e0":"y_submit.to_csv('submission.csv')","7b7d4f33":"# Feature Engineering\nfonte: https:\/\/www.kaggle.com\/skooch\/xgboost","5a96208f":"# Finish","92b2e74b":"# Gradient Boosting","0b874714":"## Categorical","cfec27ab":"# Random forest","7ca2ad7e":"# xgboost"}}