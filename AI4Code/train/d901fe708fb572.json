{"cell_type":{"0c46478e":"code","ae9552b3":"code","87697172":"code","01a63955":"code","a7eb10b2":"code","596314ab":"code","586aab3f":"code","3b1afd98":"code","f43cc897":"code","a746d52b":"code","4c22527e":"code","30b4bfde":"code","d66689b7":"code","4dfccedd":"code","e1f379cc":"code","0ba0428d":"code","20a8836e":"code","de876021":"code","c58dd648":"code","70d6c93f":"code","c266de3b":"code","7d3e5248":"code","7a26a46a":"code","854ac523":"code","57a87b77":"code","46f012fd":"markdown","dfea7fe8":"markdown","44c78065":"markdown","243cc81f":"markdown","7859d1e3":"markdown","d5708124":"markdown"},"source":{"0c46478e":"\n#### Importing Libraries ####\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sn\nimport keras\n\nnp.random.seed(2)\n%matplotlib inline","ae9552b3":"data = pd.read_csv('..\/input\/creditcard.csv')","87697172":"data.head()","01a63955":"data.info()","a7eb10b2":"data.corrwith(data.Class).plot.bar(\n        figsize = (20, 10), title = \"Correlation with class\", fontsize = 15,\n        rot = 45, grid = True)","596314ab":"\n## Correlation Matrix\nsn.set(style=\"white\")\n\n# Compute the correlation matrix\ncorr = data.corr()\ncorr.head()","586aab3f":"# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(18, 15))\n\n# Generate a custom diverging colormap\ncmap = sn.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsn.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","3b1afd98":"data.isna().any()","f43cc897":"from sklearn.preprocessing import StandardScaler\ndata['normalizedAmount'] = StandardScaler().fit_transform(data['Amount'].values.reshape(-1,1))\ndata = data.drop(['Amount'],axis=1)","a746d52b":"data = data.drop(['Time'],axis=1)\ndata.head()","4c22527e":"X = data.iloc[:, data.columns != 'Class']\ny = data.iloc[:, data.columns == 'Class']","30b4bfde":"X.info()","d66689b7":"y.head()","4dfccedd":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state=0)","e1f379cc":"## Decison Tree\nfrom sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(random_state = 0,\n                                    criterion = 'gini',  splitter='best', min_samples_leaf=1, min_samples_split=2)\nclassifier.fit(X_train, y_train)\n\n          \n\n# Predicting Test Set\ny_pred = classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprec = precision_score(y_test, y_pred)\nrec = recall_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\n\n\nresults = pd.DataFrame([['Decision tree', acc, prec, rec, f1]],\n               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])","0ba0428d":"results","20a8836e":"## Randomforest\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score, f1_score, precision_score, recall_score\nclassifier = RandomForestClassifier(random_state = 0, n_estimators = 100,\n                                    criterion = 'entropy')\nclassifier.fit(X_train, y_train)\n\n# Predicting Test Set\ny_pred = classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)\nprec = precision_score(y_test, y_pred)\nrec = recall_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\n\n\n\nmodel_results = pd.DataFrame([['Random Forest (n=100)', acc, prec, rec, f1]],\n               columns = ['Model', 'Accuracy', 'Precision', 'Recall', 'F1 Score'])\n\nresults = results.append(model_results, ignore_index = True)","de876021":"results","c58dd648":"\n# Importing the Keras libraries and packages\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Initialising the ANN\nclassifier = Sequential()\n\n# Adding the input layer and the first hidden layer\nclassifier.add(Dense(units =15 , kernel_initializer = 'uniform', activation = 'relu', input_dim = 29))\n\n# Adding the second hidden layer\nclassifier.add(Dense(units = 15, kernel_initializer = 'uniform', activation = 'relu'))\n\n# Adding the output layer\nclassifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n\n# Compiling the ANN\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n\n# Fitting the ANN to the Training set\nclassifier.fit(X_train, y_train, batch_size = 32, epochs = 100)","70d6c93f":"# Predicting the Test set results\ny_pred = classifier.predict(X_test)\ny_pred = (y_pred > 0.5)\n","c266de3b":"score = classifier.evaluate(X_test, y_test)\nscore","7d3e5248":"\n# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\n\n\n","7a26a46a":"cm","854ac523":"#Let's see how our model performed\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","57a87b77":"## EXTRA: Confusion Matrix\ncm = confusion_matrix(y_test, y_pred) # rows = truth, cols = prediction\ndf_cm = pd.DataFrame(cm, index = (0, 1), columns = (0, 1))\nplt.figure(figsize = (10,7))\nsn.set(font_scale=1.4)\nsn.heatmap(df_cm, annot=True, fmt='g')\nprint(\"Test Data Accuracy: %0.4f\" % accuracy_score(y_test, y_pred))","46f012fd":"# Artifial Neural Network Model","dfea7fe8":"# EDA","44c78065":"# Credit card fraud detection ","243cc81f":"# Feature Scaling","7859d1e3":"# Model Training","d5708124":"Context\nIt is important that credit card companies are able to recognize fraudulent credit card transactions so that customers are not charged for items that they did not purchase.\n\nContent\nThe datasets contains transactions made by credit cards in September 2013 by european cardholders. This dataset presents transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions. The dataset is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions.\n\nIt contains only numerical input variables which are the result of a PCA transformation. Unfortunately, due to confidentiality issues, we cannot provide the original features and more background information about the data. Features V1, V2, ... V28 are the principal components obtained with PCA, the only features which have not been transformed with PCA are 'Time' and 'Amount'. Feature 'Time' contains the seconds elapsed between each transaction and the first transaction in the dataset. The feature 'Amount' is the transaction Amount, this feature can be used for example-dependant cost-senstive learning. Feature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise.\n\nInspiration\nIdentify fraudulent credit card transactions.\n\nGiven the class imbalance ratio, we recommend measuring the accuracy using the Area Under the Precision-Recall Curve (AUPRC). Confusion matrix accuracy is not meaningful for unbalanced classification."}}