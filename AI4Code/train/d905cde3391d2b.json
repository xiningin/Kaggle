{"cell_type":{"fe6d1db9":"code","b8fd3eec":"code","e3a65f02":"code","ea3f45ab":"code","244cab93":"code","6bfea686":"code","e11f20af":"code","076ba4a7":"code","747fc5dd":"code","156b59bb":"code","e573b2b9":"code","8a81136c":"code","2a0d2347":"code","92a31a6e":"code","46c1b7bf":"code","307ddecd":"code","111daa2e":"code","5088b369":"code","17bd841e":"code","d4df0f64":"code","1c61e3a1":"code","b6076a19":"markdown","9d2c44fb":"markdown","af8753e1":"markdown","d2a0aa1a":"markdown","9340cebe":"markdown","cd5fe181":"markdown","0414f0b4":"markdown","9409eb4c":"markdown","473040ab":"markdown","5772c690":"markdown","59dea569":"markdown","e6c2bad3":"markdown","90658c0c":"markdown","522d7933":"markdown","3d7a3bab":"markdown","f1a1c78e":"markdown","d6ede43b":"markdown","1e9967d1":"markdown","cc6e3cd7":"markdown","b8097ffd":"markdown","0877d616":"markdown","f3823799":"markdown","a0ab52a3":"markdown","4c8aac7d":"markdown"},"source":{"fe6d1db9":"import math\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\nimport os\n\nmatches    = pd.read_csv('..\/input\/matches.csv')\ndeliveries = pd.read_csv('..\/input\/deliveries.csv')","b8fd3eec":"print(f'Number of rows    = {len(matches)}')\nprint(f'Number of columns = {len(matches.columns)}')\nmatches.head()","e3a65f02":"win_by_runs_data = matches[matches['win_by_runs'] > 0].win_by_runs\nprint(f'Number of rows = {len(win_by_runs_data)}')\nwin_by_runs_data.head()","ea3f45ab":"win_by_runs_rows = len(win_by_runs_data) # No. of values in the set (n)\nwin_by_runs_sum = sum(win_by_runs_data) # Sum of all numbers\n\nprint(f'Sum of all numbers = {win_by_runs_sum}, No. of values in the set = {win_by_runs_rows}')\n\nwin_by_runs_arithmetic_mean = win_by_runs_sum \/ win_by_runs_rows # Calculating arithmetic mean\nprint(f'Arithmetic mean = {win_by_runs_arithmetic_mean}')","244cab93":"win_by_runs_arithmetic_mean_verify = win_by_runs_data.mean()\nprint(f'Arithmetic mean (verify) = {win_by_runs_arithmetic_mean_verify}')","6bfea686":"win_by_runs_geo_mean = stats.mstats.gmean(win_by_runs_data)\nprint(f'Geometric mean = {win_by_runs_geo_mean}')","e11f20af":"win_by_runs_10 = list(win_by_runs_data[:10])\nprint(win_by_runs_10)\nprint(sorted(win_by_runs_10))","076ba4a7":"win_by_runs_10_median = win_by_runs_data[:10].median()\nprint(f'Median (first 10) = {win_by_runs_10_median}')\n\nwin_by_runs_median = win_by_runs_data.median()\nprint(f'Median = {win_by_runs_median}')","747fc5dd":"# Retrieve frequency (sorted, descending order)\nwin_by_runs_data.value_counts(sort=True, ascending=False).head()","156b59bb":"win_by_runs_data_mode = win_by_runs_data.mode()\nprint(f'Mode = {list(win_by_runs_data_mode)}')","e573b2b9":"win_by_runs_max = win_by_runs_data.max()\nwin_by_runs_min = win_by_runs_data.min()\nwin_by_runs_range = win_by_runs_max - win_by_runs_min\n\nprint(f'Largest = {win_by_runs_max}, Smallest = {win_by_runs_min}, Range = {win_by_runs_range}')","8a81136c":"win_by_runs_25_perc = stats.scoreatpercentile(win_by_runs_data, 25)\nwin_by_runs_75_perc = stats.scoreatpercentile(win_by_runs_data, 75)\n\nwin_by_runs_iqr = stats.iqr(win_by_runs_data)\nprint(f'Q1 (25th percentile) = {win_by_runs_25_perc}')\nprint(f'Q3 (75th percentile) = {win_by_runs_75_perc}')\nprint(f'IQR = Q3 - Q1 = {win_by_runs_75_perc} - {win_by_runs_25_perc} = {win_by_runs_iqr}')","2a0d2347":"win_by_runs_95_perc = stats.scoreatpercentile(win_by_runs_data, 95)\nprint(f'95th percentile = {win_by_runs_95_perc}')","92a31a6e":"win_by_wickets_data = matches[matches.win_by_wickets > 0].win_by_wickets\nprint(f'Number of rows = {len(win_by_wickets_data)}')\nwin_by_wickets_data.head()","46c1b7bf":"# Step 1: calculate mean(\u03bc)\nwin_by_wickets_mean = win_by_wickets_data.mean()\nprint(f'Mean = {win_by_wickets_mean}')\n\n# Step 2: calculate numerator part - sum of (x - mean)\nwin_by_wickets_var_numerator = sum([(x - win_by_wickets_mean) ** 2 for x in win_by_wickets_data])\n\n# Step 3: calculate variane\nwin_by_wickets_variance = win_by_wickets_var_numerator \/ len(win_by_wickets_data)\nprint(f'Variance = {win_by_wickets_variance}')\n\n# Step 4: calculate standard deviation\nwin_by_wickets_standard_deviation = math.sqrt(win_by_wickets_variance)\nprint(f'Standard deviation = {win_by_wickets_standard_deviation}')","307ddecd":"win_by_wickets_standard_deviation_verify = win_by_wickets_data.std(ddof = 0)\nprint(f'Standard deviation = {win_by_wickets_standard_deviation_verify}')","111daa2e":"win_by_runs_std = win_by_runs_data.std(ddof = 0)\nprint(f'| Mean               = {win_by_runs_arithmetic_mean} | Median  = {win_by_runs_median} |')\nprint(f'| Standard deviation = {win_by_runs_std} | IQR     = {win_by_runs_iqr} |')","5088b369":"win_by_wickets_dist = win_by_wickets_data.value_counts(sort=False)\nplt = win_by_wickets_dist.plot.bar(color='lightblue')\nplt.axvline(x = win_by_wickets_mean - 1, color='blue', linewidth=2.0)\nplt.axvline(x = win_by_wickets_mean - win_by_wickets_standard_deviation - 1, color='red', linewidth=2.0, linestyle='dashed')\nplt.axvline(x = win_by_wickets_mean + win_by_wickets_standard_deviation - 1, color='red', linewidth=2.0, linestyle='dashed')","17bd841e":"win_by_runs_mad = win_by_runs_data.mad()\nprint(f'Mean absolute deviation = {win_by_runs_mad}')","d4df0f64":"plt = win_by_runs_data.to_frame().boxplot(whis='range', vert=False)\nplt.set_xlim([0, 200])\nplt.set_xlabel('Win by runs')","1c61e3a1":"win_by_runs_data.to_frame().boxplot(vert=False)","b6076a19":"We can verify the number with the help of `mean()` method in `pandas`","9d2c44fb":"## Mean\n\n**Mean** (usuallly refered to **Arithmetic Mean**, also called **Average**) is calculated as **sum** of all numbers in the dataset and dividing by the **total** number of values\n\n### Arithmetic Mean\n\n$$\n\\begin{align}\nArithmetic\\,mean = {Sum\\,of\\,all\\,numbers \\over No.\\,of\\,values\\,in\\,the \\,set}\\,\\,\\,\\,or\\, \n\\end{align}\n$$\n\n$$\n\\begin{align}\n\\bar{x} = {\\sum_{i=i}^{n} x_{i} \\over n}\n\\end{align}\n$$\n\nArithmetic mean of our data is calculated as,\n\n`mean = (35 + 15 + 97 + 17 + ...) \/ 315`\n\nLet's do that in code.","af8753e1":"Let's inspect the `matches` data before stepping into the concepts","d2a0aa1a":"### Percentiles\n\n**Percentile** is a number where certain percentage of numbers fall below that number.\n\nTaking the above example,\n* 25th percentile = 11 &rarr; 25% of the matches are won by less thant 11 runs.\n* 75th percentile = 38 &rarr; 75% of the matches are won by less than 38 runs.\n\nPercentile can be calculated using `scipy.stats.scoreatpercentile`\n\nTo calculate 95th percentile,","9340cebe":"## Mode\n\n**Mode** is the number occurring most often in the dataset.\n* It is only meaningful if we have many repeated values in our dataset\n* If no value is repeated, there is **no mode**\n* A dataset can have ***one mode***, ***multiple modes*** or ***no mode***.\n\nLet's try to retrieve mode for our dataset.","cd5fe181":"We'll discuss about 3 methods of measuring center - ***Mean***, ***Median*** and ***Mode***","0414f0b4":"Let's verify the result using `pandas.DataFrame.std` (Note: We're passing `ddof = 0` for population)","9409eb4c":"## Variance and Standard deviation\n\nStandard deviation and variance measures the spread of a dataset. If the data is spread out largely, standard deviation (and variance) is greater. \n\nIn other terms, \n* if more data points are closer to the mean, standard deviation is less\n* if the data points are further from the mean, standard deviation is more\n\nFormula for variance for **population** is given as,\n\n$$\n\\begin{align}\nVariance\\,=\\sigma^2 = {\\sum_{i=i}^{n}{(x_i - \\mu)}^2 \\over n}\n\\end{align}\n$$\n\nwhere, $\\mu$ is the **mean** of the dataset\n\nStandard deviation is just the square root of variance\n\n$$\n\\begin{align}\nStandard\\,deviation\\,=\\sigma = \\sqrt{\\sum_{i=i}^{n}{(x_i - \\mu)}^2 \\over n}\n\\end{align}\n$$\n\n> **Note**:\n>\n> For **Sample**, we use `n - 1` instead of `n`,  $\\bar{x}$ - mean of sample\n\n$$\n\\begin{align}\nStandard\\,deviation\\,=S_{sample} = \\sqrt{\\sum_{i=i}^{n}{(x_i - \\bar{x})}^2 \\over n - > 1}\n\\end{align}\n$$\n\nLet's take `win_by_wickets` dataset.","473040ab":"* Blue line = Mean\n* Red line = Mean $\\pm$ std.dev","5772c690":"## Box and whisker plots\n\n**Box and whisker plots** (or box plots) represents five-number summary of the dataset. The five-number values are,\n1. Minimum\n2. First quartile (25th percentile)\n3. Median (50th percentile)\n4. Third quartile (75th percentile)\n5. Maximum\n\nThe following is a representation of box-and-whisker plot\n\n![Box-whisker plot](https:\/\/raw.githubusercontent.com\/nowke\/nowke.github.io\/gh-pages\/src\/pages\/stats\/images\/box-whisker-plot.png)","59dea569":"For this particular data, standard deviation and IQR are pretty close by, although it won't be the scenario always.\n\n## Distribution graph\n\nLet's plot the frequency distribution graph for `win_by_wickets` data since we can have values from 1 - 10.","e6c2bad3":"# Measuring spread (variability)\n\nBy just measuring the center of the data, one wouldn't get much idea about the dataset. There are various ways of measuring how the data is spread.\n\n## Range\n\n**Range** is the simplest form of measuring variability. It is the difference between largest number and smallest number.","90658c0c":"Originally published in [Kaggle](https:\/\/www.kaggle.com\/nowke9\/statistics-1-summarizing-quantitative-data)\n\n# Table of contents\n\n* Introduction\n* Measuring center\n    * Mean\n        * Arithmetic Mean\n        * Geometric Mean\n    * Median\n    * Mode\n* Measuring spread (variability)\n    * Range\n    * Interquartile Range (IQR)\n        * Percentiles\n    * Variance and Standard deviation\n        * Comparison with IQR\n    * Distribution graph\n    * Mean Absolute Deviation (MAD)\n    * Box and whisker plots","522d7933":"As we can observe, `[4, 14]` occurs **11 times** in the dataset. \n\nHence, **Mode = [4, 14]**,\n\nWe can verify using `pandas.DataFrame.mode` method","3d7a3bab":"To find median,\n* Sort the data from smallest to largest (ascending order)\n* If there are **odd** number of data points, median is the *middle* data point.\n* If there are **even** number of data points, median is the *average of two* middle data points\n\n```\n[5, 14, 15, 15, 17, 21, 27, 35, 51, 97]\n                ^^  ^^  \n           (middle numbers)\n                                  \nMedian = (17 + 21)\/2 = 19\n```\n\nLet's verify,","f1a1c78e":"## Median\n\n**Median** is the middle value, when the data is sorted in ascending order. Half of the data points are smaller and half of data points are larger than the median.\n\nFor example purpose, let's take first 10 entries of the data.","d6ede43b":"There's one problem with this graph. We have outliers to the right of the graphs. Instead of showing **min** and **max** as the two ends of the whisker, we calculate the following.\n\n* Lower fence = $Q_1 - 1.5 \\times IQR$,\n* Upper fence = $Q_3 + 1.5 \\times IQR$\n\nNote the `whis` parameter in the above code set to `range`. By default `whis` is set to `1.5`.","1e9967d1":"## Interquartile Range (IQR)\n\n**Interquartile range** or **IQR** is the amount spread in middle 50% of the dataset or the distance between *first Quartile* (Q\u2081) and *third Quartile* (Q\u2083)\n\n* First Quartile (Q\u2081) = Median of data points to left of the median in ordered list (25th percentile)\n* Second Quartile (Q\u2082) = Median of data (50th percentile)\n* Third Quartile (Q\u2083) = Median of data points to right of the median in ordered list (75th percentile)\n* IQR = Q\u2083 - Q\u2081\n\n![Interquartile range](https:\/\/raw.githubusercontent.com\/nowke\/nowke.github.io\/gh-pages\/src\/pages\/stats\/images\/iqr.png)\n\n```\n[41, 48, 58, 60, 60, 67, 69, 71, 75, 78, 81, 83, 89, 89, 91, 92, 94, 94, 96, 98]\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n             first half                              second half\n        median = (60 + 67) \/ 2 = 63.5        median = (91 + 92) \/ 2 = 91.5\n\nQ\u2081 = 63.5\nQ\u2083 = 91.5\nIQR = Q\u2083 - Q\u2081 = 91.5 - 63.5 = 28\n```\n\nLet's calculate IQR for `win_by_runs`","cc6e3cd7":"# Introduction\n**Quantitative data** is information that can be measured in real numbers. Examples include,\n* Height of a person\n* Speed of Tesla cars\n* Runs scored by a batsman\n* Wickets taken by a bowler\n\nIn this notebook, we'll explore various statistical concepts involved in **summarizing quantitative data** with the help of **Indian Premier League (IPL)** dataset.\n\nThe data consists of two CSV files for all IPL matches played from  **2008 - 2018** (11 seasons)\n* **`matches.csv`** - match-by-match data\n* **`deliveries.csv`** - ball-by-ball data\n\nLet's setup `pandas` dataframes for the above files and import necessary libraries.","b8097ffd":"Let's calculate the standard deviation by formula","0877d616":"### Geometric Mean\n\nAnother type of mean is **geometric mean**. It is calculated as **Nth root** of **product** of all the numbers, where N is the total number of values in the dataset\n\n$$\n\\begin{align}\nGeometric\\,mean = \\sqrt[n]{product\\,of\\,all\\,numbers}\n\\end{align}\n$$\n\n$$\n\\begin{align}\n\\bar{x}_{geom} = \\sqrt[n]{\\prod_{i=1}^n x_i}\n\\end{align}\n$$\n\nGeometric mean of our data is calculated as,\n\n`geometric_mean = 315thRoot(35 x 15 x 97 x 17 x ...)`","f3823799":"## Mean Absolute Deviation (MAD)\n\n**Mena absolute deviation** is the average distance between mean and each data point.\n\n$$\n\\begin{align}\nMean\\,absolute\\,deviation\\,(MAD) = {\\sum{\\lvert x_i - \\bar{x} \\rvert} \\over n}\n\\end{align}\n$$\n\nLet's calculate mean absolute deviation for `win_by_runs`","a0ab52a3":"i.e. matches are won by an average of 6.28 wickets with standard deviation of 1.83 (spread = 6.28 $\\pm$ 1.83)\n\n### Comparison with IQR\n\nIQR is calculated with respect to **median**, Standard deviation is calculated with respect to **mean**.\n\nLet's compare those for `win_by_runs` data","4c8aac7d":"# Measuring center\n\nFirst step often learnt in [descriptive statistics](https:\/\/en.wikipedia.org\/wiki\/Descriptive_statistics) is to measure the center of given data. There are various ways to measure the center. We'll go through some of them.\n\nLet's get the data ready for our experiments. \n* **`win_by_runs`** columns represents the margin in which a team has won against the opponent, if the team batting first has won.\n* i.e. If **`team1`** scores **200** runs and **`team2`** scores **150** runs, **`team1`** won the match by **50 runs** - If **`team1`** bats first\n\nHence, we have to exclude all instances of **`win_by_wickets`** cases, i.e. **`win_by_runs = 0`**"}}