{"cell_type":{"b14b1619":"code","6bce1751":"code","15e0b66f":"code","61be6cda":"code","aab5e826":"code","b843e386":"code","90b19226":"code","28a94704":"code","d7c416d8":"code","8b5fa047":"code","aa57d2ed":"code","239a13e1":"code","363a4b6e":"code","63e1c546":"code","350e3ac6":"markdown"},"source":{"b14b1619":"import numpy as np \nimport operator\nimport pandas as pd \nimport os\nfrom tqdm import tqdm_notebook as tqdm","6bce1751":"import pandas as pd\npd.set_option('display.max_colwidth', -1)\nimport numpy as np\nfrom nltk import pos_tag\nimport gensim\nfrom gensim.models import KeyedVectors\nimport re\nfrom nltk.corpus import wordnet as wn\nimport os","15e0b66f":"TEXT_COL = 'comment_text'\nEMB_PATH = '..\/input\/fasttext-crawl-300d-2m\/crawl-300d-2M.vec'\ntrain = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/train.csv', index_col='id')\ntest = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/test.csv', index_col='id')","61be6cda":"word2vec = KeyedVectors.load_word2vec_format(EMB_PATH)","aab5e826":"# Inspired from https:\/\/towardsdatascience.com\/data-augmentation-for-natural-language-processing-6ae928313a3f\ndef get_similar_words(word_list, word_index, threshold=0.8):\n    word_tags = pos_tag(word_list)\n    similar_words = {}\n    for idx, word in tqdm(enumerate(word_list)):\n        if word in word2vec.wv.vocab:\n            #get words with highest cosine similarity\n            replacements = word2vec.wv.most_similar(positive=word, topn=5)\n            #keep only words that pass the threshold\n            replacements = [replacements[i][0] for i in range(5) if replacements[i][1] > threshold]\n            #check for POS tag equality, dismiss if unequal\n            replacements = [elem for elem in replacements if pos_tag([elem.lower()])[0][1] == word_tags[idx][1]]\n            # Dismiss upper-case similar replacements and OOV words.\n            replacements = [elem for elem in replacements if elem.lower() != word.lower() and elem in word_index and elem in word2vec.wv]\n            if len(replacements) > 0:\n                similar_words[word] = replacements\n            if idx % 500 == 0:\n                print(word, replacements)\n    # One could also reverse the dictionary or postprocess it further\n    return similar_words","b843e386":"from keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\n\ntokenizer = Tokenizer(num_words=None, lower=True) #filters = ''\n#tokenizer = text.Tokenizer(num_words=max_features)\nprint('fitting tokenizer')\ntokenizer.fit_on_texts(list(train[TEXT_COL]) + list(test[TEXT_COL]))\nword_index = tokenizer.word_index","90b19226":"sorted(word_index.items(), key=operator.itemgetter(1))[:100]","28a94704":"sample = list(word_index.keys())[:20]\nprint(sample)\nfor i in range(10):\n    print(get_similar_words(sample, word_index, threshold=i * 0.1))\n    print(f'threshold at: {i*0.1}')\n    print('*'*50)","d7c416d8":"similar_words_dict = get_similar_words(list(word_index.keys())[:50_000], word_index, threshold=0.3)\nlen(similar_words_dict)","8b5fa047":" for word,synonyms in list(similar_words_dict.items())[:20]:\n    print(word,synonyms)","aa57d2ed":"np.random.seed(0)\n\ndef get_synonym_list(word, dictionary):\n    if word in dictionary.keys():\n        return dictionary[word]\n    return [word]\n\ndef replace_text(text):\n    return ' '.join([np.random.choice(get_synonym_list(word, similar_words_dict)) for word in text.split(' ')])    ","239a13e1":"replace_text('anyone likes 1 apple and 2 oranges ?')","363a4b6e":"train['comment_text_augmented'] = train['comment_text'].apply(lambda x: replace_text(x))\ntest['comment_text_augmented'] = test['comment_text'].apply(lambda x: replace_text(x))\ntrain[['comment_text', 'comment_text_augmented']].head(50)","63e1c546":"train.to_csv('augmented_train.csv', index=False)\ntest.to_csv('augmented_test.csv', index=False)","350e3ac6":"### Text augmentation with word2vec\n\nThe following script can be used for text augmentation.\nBasically, for each word in the corpus, a candidate list of synonyms is created by considering nearby words (as defined by the word2vec distance). This list is then filtered, only keeping those synonyms for which the POS tag is the same as the original word. \n\nThe idea described above is adapted from the nicely written article https:\/\/towardsdatascience.com\/data-augmentation-for-natural-language-processing-6ae928313a3f\n\n"}}