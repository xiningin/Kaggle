{"cell_type":{"b70d827c":"code","a2d37c4d":"code","109bc8d4":"code","bda55e17":"code","691a1d6c":"code","130fb03a":"code","8a1ce969":"code","7c9a6cb7":"code","07564d3c":"code","68fabab0":"code","784b1eb0":"markdown","cd8f212a":"markdown"},"source":{"b70d827c":"import math","a2d37c4d":"def bear (x1, y1, x2, y2):\n    dx = x2 - x1\n    dy = y2 - y1\n    \n    if dy == 0:        # when both y-coordiantes are equal and dx is greater than zero, the angle will be 90 \n        if dx > 0:\n            a = 90\n        elif dx < 0:   # when both y-coordiantes are equal and dx is less than zero, the angle will 270\n            a = 270\n            \n    if dx == 0:\n        if dy > 0:     # when both x-coordiantes are equal and dy is greater than zero, the angle will be 180\n            a = 180\n        elif dy < 0:   # when both x-coordiantes are equal and dy is less than zero, the angle will be 360\n            a = 360\n            \n   \n    else:\n        \n        a = math.degrees(math.atan(dy\/dx))  # inverse tangent equation to find the angle \n        \n        if dx < 0 and dy > 0:         # when value of dx is negative and dy is positve, add 360 to the angle\n            a = a + 360\n        elif dx > 0 and dy < 0:       # when value of dx is positive and dy is negative, add 180 to the angle\n            a = a + 180\n        elif dx < 0 and dy < 0:       # when value of dx is negative and dy is negative, add 180 to the angle\n            a = a + 180\n        elif dx > 0 and dy > 0:       # when value of dx is positive and dy is positive, add 0 to the angle\n            a = a + 0\n        elif dx == 0 and dy == 0:     # when value of dx and dy is zero then None will be printed\n            a = None\n    # code above calculates all angle in four different quadrant        \n    \n            \n        print (a)\n        a = a + 180       # calculate back bearing\n        if a > 360:\n            a = a - 360   # when angle exceeds 360, 360 will be deducted away from the angle\n            \n    return a\n        ","109bc8d4":"# test 1 (dx > 0 and dy < 0)\nprint (bear (2, 9, 7, 3))","bda55e17":"# test 2 (dx < 0 and dy > 0)\nprint (bear (5, 7, 2, 9))","691a1d6c":"# test 3 (dx < 0 and dy < 0)\nprint (bear (5, 10, 1, 5))","130fb03a":"# test 4 (dx > 0 and dy > 0)\nprint (bear (2, 2, 9, 9))","8a1ce969":"# test 5 (dx > 0 and dy = 0)\nprint (bear (1, 1, 5, 1))","7c9a6cb7":"# test 6 (dx < 0 and dy = 0) \nprint (bear (5, 1, 1, 1))","07564d3c":"# test 7 (dx = 0 and dy > 0)\nprint (bear (5, 5, 5, 11))","68fabab0":"# test 8 (dx = 0 and dy < 0)\nprint (bear (5, 11, 5, 5))","784b1eb0":"# Coursework 1\nThis notebook provides the code to calculate and return the function for whole circle bearings in degrees using two coordinates dx which is the change in the x-axis and dy which is the change in the y-axis. The function uses basic trigonometric functions to fine the angle. Python code of **math.atan(dx\/dy)** is used to calculate the bearings. This is basically a formula of **inverse tangent dx divided by dy**.\n\n![fig134.jpg](attachment:67aa04be-769d-4c56-9d13-d88694ebd054.jpg)\n\nThe figure above shows the whole circle bearing. There are 4 different quadrants in it, starting from the north going clockwise which will be 0\u00b0 then east being 90\u00b0, south being 180\u00b0, west being 270\u00b0 and lastly going a full circle back to north being 360\u00b0. The code below will show how does this function works along with some tests that proves the code is functioning properly.","cd8f212a":"# Code Testing\n\nCodes below tests the function code above. The image below shows an exmaple of how I calculate test 1:\n![photo_2021-11-11_14-23-20.jpg](attachment:98b51f6d-0377-4b92-a7c7-c2386dc143fc.jpg)"}}