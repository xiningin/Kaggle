{"cell_type":{"a931eded":"code","2677f5f3":"code","1c004e0e":"code","a92e21be":"code","7cd0092c":"code","f1c7d057":"code","38afa703":"code","45c56108":"code","8115cb1f":"code","c9c9b441":"code","92a4e0e6":"code","2a571061":"code","49b0480e":"code","45bfb0d6":"code","d1442826":"code","a10895bc":"code","0f0a107c":"code","8e0fa0d6":"code","9515198e":"code","8de98c48":"code","e3113c40":"code","ec11c5d9":"markdown","43b4dfb3":"markdown","a0f59c43":"markdown"},"source":{"a931eded":"import pandas as pd\nimport numpy as np\nfrom datetime import datetime\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom ipywidgets import interact, widgets\n\nfrom scipy.interpolate import interp1d","2677f5f3":"# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1c004e0e":"# load the dataset \n\ndeath_df = pd.read_csv('\/kaggle\/input\/covid19jhu\/death.csv')\nconfirmed_df = pd.read_csv('\/kaggle\/input\/covid19jhu\/confirmed.csv')\nrecovered_df = pd.read_csv('\/kaggle\/input\/covid19jhu\/recovered.csv')\ncountry_df = pd.read_csv('\/kaggle\/input\/covid19jhu\/country.csv')","a92e21be":"# saving the data in my local as a csv\n\ndeath_df.to_csv('death.csv', index=False)\nconfirmed_df.to_csv('confirmed.csv', index=False)\nrecovered_df.to_csv('recovered.csv', index=False)\ncountry_df.to_csv('country.csv', index=False)","7cd0092c":"# printing the shape of each dataframe\n\nprint(\"The Shape of death_df is: \", death_df.shape)\nprint(\"The Shape of confirmed_df is: \", confirmed_df.shape)\nprint(\"The Shape of recovered_df is: \", recovered_df.shape)\nprint(\"The Shape of country_df is: \", country_df.shape)","f1c7d057":"# checking for null values\n\nprint(death_df.isnull().sum().head(2))\nprint(country_df.isnull().sum())\n\n# column Province\/State   contaim 185 null values, hence we will drop this columns","38afa703":"# droping the 'Province\/State' columns as it containd null values\n\ndeath_df.drop('Province\/State', axis=1, inplace=True)\nconfirmed_df.drop('Province\/State', axis=1, inplace=True)\nrecovered_df.drop('Province\/State', axis=1, inplace=True)\ncountry_df.drop(['People_Tested', 'People_Hospitalized'], axis=1, inplace=True)","45c56108":"# renaming column\n\ndeath_df.rename(columns={'Country\/Region': 'Country'}, inplace=True)\nconfirmed_df.rename(columns={'Country\/Region': 'Country'}, inplace=True)\nrecovered_df.rename(columns={'Country\/Region': 'Country'}, inplace=True)\ncountry_df.rename(columns={'Country_Region': 'Country', 'Long_': 'Long'}, inplace=True)\n\ndeath_df.head(3)","8115cb1f":"# un-pivot the dataframe\n\ndeath_df2 = pd.melt(death_df, id_vars=['Country', 'Lat', 'Long', ], var_name='Date', value_name='Death_no')\nconfirmed_df2 = pd.melt(confirmed_df, id_vars=['Country', 'Lat', 'Long', ], var_name='Date', value_name='Confirmed_no')\nrecovered_df2 = pd.melt(recovered_df, id_vars=['Country', 'Lat', 'Long', ], var_name='Date', value_name='Recovered_no')","c9c9b441":"confirmed_df2.head()","92a4e0e6":"# change the date to datetype\n\ndeath_df2['Date'] = pd.to_datetime(death_df2['Date'])\nconfirmed_df2['Date'] = pd.to_datetime(confirmed_df2['Date'])\nrecovered_df2['Date'] = pd.to_datetime(confirmed_df2['Date'])","2a571061":"# sorting country_df with highest confirm rate\n\ncountry_df.sort_values('Confirmed', ascending=False, inplace=True)","49b0480e":"# checking for missing values\n\ndeath_df2.isna().sum()","45bfb0d6":"# checking the first five rows of the columns\n\ndeath_df2.head()","d1442826":"# group by country and show data\n\ndef country_wise(country_name,df_type, number):\n    # on select of category copy the dataframe to group by country\n    if df_type == 'Confirmed cases':\n        df_type = confirmed_df.copy(deep=True)\n        category = 'COVID-19 confirmed cases'\n        \n    elif df_type == 'Death rate':\n        df_type = death_df.copy(deep=True)\n        category = 'COVID-19 Death rate'\n        \n    else:\n        df_type = recovered_df.copy(deep=True)\n        category = 'COVID-19 recovered cases'\n        \n    \n    # group by country name\n    country = df_type.groupby('Country')\n    \n    # select the given country\n    country = country.get_group(country_name)\n    \n    # store daily death rate along with the date\n    daily_cases = []\n    case_date = []\n    \n    # iterate over each row\n    for i, cols in enumerate(country):\n        if i > 3:\n            # take the sum of each column if there are multiple columns\n            daily_cases.append(country[cols].sum())\n            case_date.append(cols)\n            zip_all_list = zip(case_date, daily_cases)\n            \n            # creata a data frame\n            new_df = pd.DataFrame(data = zip_all_list, columns=['Date','coronavirus'])\n\n    # append the country to the data frame\n    new_df['Country'] = country['Country'].values[0]\n    \n    # get the daily death rate\n    new_df = get_daily_date(new_df)\n      \n    # ploting the graph\n    fig = px.line(new_df.iloc[-number:] ,\n                  x='Date', y='coronavirus',\n                  title='Daily ' + category +'  in ' + new_df['Country'].values[0])\n    fig.update_layout(title_font_size=26,height=450)\n    fig.show()\n\n    return","a10895bc":"# give the daily recovered case, death no, comfired cases\n\ndef get_daily_date(new_df):\n    # calculation to get the no of death,recoverd, comfirmed cases for each day,\n    # because each day new cases are added with the previous day cases in the csv\n    \n    new_df2 = new_df.copy(deep=True)\n    for i in range(len(new_df) -1):\n        new_df.iloc[i+1, 1] = new_df.iloc[1+i, 1] - new_df2.iloc[i, 1]\n        if new_df.iloc[i+1, 1] < 0:\n            new_df.iloc[i+1, 1] = 0\n            \n    return new_df","0f0a107c":"# select the country from the dropdown \n\nmy_df_type = ['Confirmed cases', 'Death rate', 'Recovered cases']\ndrop_down = widgets.Dropdown(options=confirmed_df['Country'].unique().tolist(),\n                                value='India',\n                                description='Country',\n                                disabled=False)\n\n\n# slider to choose the number of days data to show\n\nslider = widgets.IntSlider(value=40,\n                              min=10,\n                              max=len(death_df.columns[3:]),\n                              step=1,\n                              description='Select Days:',\n                              disabled=False,\n                              continuous_update=False,\n                              orientation='horizontal',\n                              readout=True,\n                              readout_format='d')\n\n# select the category \n\ncategory_drop_down = widgets.Dropdown(options=my_df_type,\n                                value='Confirmed cases',\n                                description='Category',\n                                disabled=False)\n\n# call the method on select or slide occour\n\ninteract(country_wise, country_name=drop_down, df_type=category_drop_down, number=slider);","8e0fa0d6":"# method to get the top 10 countries\n\ndef top_ten(number, sort_by):\n    # sorting the columns with top death rate\n    \n    country_df.sort_values(by=sort_by, ascending=False, inplace=True)\n\n    # sort country with highest number of cases\n    \n    fig = px.bar(country_df.head(number),\n        x = \"Country\",\n        y = sort_by,\n        title= 'Top ' + str(number) +' Country - ' + sort_by + ' case',\n        color=\"Country\",\n        height=500\n    )\n    \n    fig.update_layout(title_font_size=26, height=550)\n    \n    return fig","9515198e":"# dropdown to select no of country and category\n\ndrop_down = widgets.Dropdown(options=list(range(1,31)),\n                                value=10,\n                                description='No Country',\n                                disabled=False)\n\ndesc = widgets.Dropdown(options=country_df.loc[0:, ['Confirmed', 'Active', 'Deaths', 'Recovered', 'Mortality_Rate']].columns.tolist(),\n                        value='Confirmed',\n                        description='Category',\n                        disabled=False)\n\n\ninteract(top_ten, number=drop_down, sort_by=desc);","8de98c48":"# fixing the size of circle\n\nmargin = country_df['Confirmed'].values.tolist()\ncircel_range = interp1d([1, max(margin)], [0.2,12])\ncircle_radius = circel_range(margin)\n\n# ploting the map\n\nfig = px.scatter_mapbox(country_df, lat=\"Lat\", lon=\"Long\", hover_name=\"Country\", hover_data=[\"Confirmed\", \"Deaths\", 'Recovered'],\n                        color_discrete_sequence=[\"#e60039\"], zoom=1.5, height=500, size_max=50, size=circle_radius)\nfig.update_layout(mapbox_style=\"open-street-map\", margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0}, height=450)\nfig.show()","e3113c40":"# confirmed and recovred cases\n\ntop_country = country_df.head(10)\ntop_country_name = list(top_country['Country'].values)\n\nfig = go.Figure(data=[\n    go.Bar(name='Confirmed',marker_color='rgb(100,20,205)', x=top_country_name, y=list(top_country['Confirmed'])),\n    go.Bar(name='Recovered', marker_color='red',x=top_country_name, y=list(top_country['Recovered'])),\n])\n\n# Change the bar mode\n\nfig.update_layout(barmode='group', height=600, title_text=\"Top 10 countires with Confirmed and Recovered case\")\nfig.show()","ec11c5d9":"# Daily COVID-19 case report ","43b4dfb3":"# Top 10 Effected countries with COVID-19","a0f59c43":"# Confirmed vs recovered"}}