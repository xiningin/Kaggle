{"cell_type":{"be5559a1":"code","11d822bd":"code","99efefd0":"code","654a652b":"code","26a7c1c8":"code","0134fdc2":"code","588e6a9e":"code","e64951f0":"code","15257488":"code","981aaaa5":"code","782d9bbd":"code","99b2c1d7":"code","793695fd":"markdown","8921ea49":"markdown","b619a15d":"markdown","4765eecd":"markdown","ac2914e8":"markdown","368f4e62":"markdown","421aea3e":"markdown","0c7b9b90":"markdown","7e79c348":"markdown","592e6540":"markdown","49846846":"markdown","e5e848fd":"markdown","cbc98acb":"markdown","12b81d51":"markdown","148fc01c":"markdown","9fcc44f1":"markdown"},"source":{"be5559a1":"from datetime import datetime, timedelta\nimport gc\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","11d822bd":"train_transaction = pd.read_csv('..\/input\/ieee-fraud-detection\/train_transaction.csv', index_col='TransactionID')\ntest_transaction = pd.read_csv('..\/input\/ieee-fraud-detection\/test_transaction.csv', index_col='TransactionID')\ntrain_identity = pd.read_csv('..\/input\/ieee-fraud-detection\/train_identity.csv', index_col='TransactionID')\ntest_identity = pd.read_csv('..\/input\/ieee-fraud-detection\/test_identity.csv', index_col='TransactionID')\ntrain = train_transaction.merge(train_identity, how='left', left_index=True, right_index=True)\ntest = test_transaction.merge(test_identity, how='left', left_index=True, right_index=True)\ndf = pd.concat([train, test], sort=True)\ndel train_transaction, test_transaction, train_identity, test_identity, train, test\ngc.collect();","99efefd0":"x = df.groupby('id_31').id_31.count().sort_values(ascending=False).head(30)\nplt.figure(figsize=(16, 10))\nplt.title('Most frequent browsers in dataset')\nsns.barplot(x=x, y=x.index);","654a652b":"x = [x for x in df.id_31.unique().astype(str) if 'chrome' in x]\nx = df[df.id_31.isin(x)].groupby('id_31').id_31.count().sort_values(ascending=False)\nplt.figure(figsize=(16, 16))\nplt.title('All chrome version present in dataset')\nsns.barplot(x=x, y=x.index);","26a7c1c8":"df['day'] = df.TransactionDT \/\/ (3600*24)","0134fdc2":"def chrome_frequency(platform):\n    plt.figure(figsize=(16, 10))\n    for i in range(39, 72):\n        browser = f'chrome {i}.0{platform}'\n        if browser in df.id_31.unique().tolist():\n            z = df[df.id_31==browser].groupby('day').day.count().rename('y').reset_index()\n            plt.title(f'Chrome{platform}: Count of transactions per version and per day')\n            sns.lineplot(x='day', y='y', data=z, label=browser)\n    plt.show()","588e6a9e":"chrome_frequency('')","e64951f0":"chrome_frequency(' for android')","15257488":"chrome_frequency(' for ios')","981aaaa5":"# version, desktop, android, ios\nrelease = pd.DataFrame([\n    [39, '2014-11-18', '2014-11-12', '2014-11-24'],\n    [40, '2015-01-21', '2015-01-21', '2015-01-20'],\n    [41, '2015-03-03', '2015-03-11', '2015-03-16'],\n    [42, '2015-04-14', '2015-04-15', '2015-04-16'],\n    [43, '2015-05-19', '2015-05-27', '2015-06-01'],\n    [44, '2015-07-21', '2015-07-29', '2015-07-22'],\n    [45, '2015-09-01', '2015-09-01', '2015-09-02'],\n    [46, '2015-10-13', '2015-10-14', '2015-10-22'],\n    [47, '2015-12-01', '2015-12-02', '2015-12-02'],\n    [48, '2016-01-20', '2016-01-27', '2016-01-27'],\n    [49, '2016-03-02', '2016-03-09', '2016-03-09'],\n    [50, '2016-04-13', '2016-04-26', '2016-04-20'],\n    [51, '2016-05-25', '2016-06-01', '2016-06-01'],\n    [52, '2016-07-20', '2016-07-27', '2016-07-27'],\n    [53, '2016-08-31', '2016-09-07', '2016-09-07'],\n    [54, '2016-10-12', '2016-10-19', '2016-10-19'],\n    [55, '2016-12-01', '2016-12-06', '2016-12-05'],\n    [56, '2017-01-25', '2017-02-01', '2017-02-01'],\n    [57, '2017-03-09', '2017-03-16', '2017-03-14'],\n    [58, '2017-04-19', '2017-04-20', '2017-04-25'],\n    [59, '2017-06-05', '2017-06-06', '2017-06-06'],\n    [60, '2017-07-25', '2017-07-31', '2017-07-25'],\n    [61, '2017-09-05', '2017-09-05', '2017-09-05'],\n    [62, '2017-10-17', '2017-10-19', '2017-10-18'],\n    [63, '2017-12-06', '2017-12-05', '2017-12-05'],\n    [64, '2018-01-24', '2018-01-23', '2018-01-24'],\n    [65, '2018-03-06', '2018-03-06', '2018-03-06'],\n    [66, '2018-04-17', '2018-04-17', '2018-04-17'],\n    [67, '2018-05-29', '2018-05-31', '2018-05-29'],\n    [68, '2018-07-24', '2018-07-24', '2018-07-24'],\n    [69, '2018-09-04', '2018-09-04', '2018-09-04'],\n    [70, '2018-10-16', '2018-10-17', '2018-10-16'],\n    [71, '2018-12-04', '2018-12-04', '2018-12-04'],\n    [72, '2019-01-29', '2019-01-29', '2019-01-29'],],\n    columns=['version', 'desktop', 'android', 'ios'])","782d9bbd":"result = pd.DataFrame(columns=['browser', 'first_day'])\nfor col, platform in enumerate(['', ' for android', ' for ios']):\n    for i in range(63, 72):\n        browser = f'chrome {i}.0{platform}'\n        if browser in df.id_31.unique().tolist():\n            shift = df[df.id_31 == browser].TransactionDT.min() \/\/ (3600*24)\n            release_date = release.iloc[i-39][col+1]\n            result = result.append({\n                'browser': browser,\n                'first_day': datetime.strptime(release_date, '%Y-%m-%d') - timedelta(days=shift),\n                'version': i\n            }, ignore_index=True)\n\nresult","99b2c1d7":"result.first_day.quantile(.5)","793695fd":"### Estimate dataset start point for each chrome version\n\nWe can now estimate the `TransactionDT` associated with the release date of chrome 63 to 71 by taking the smallest `TransactionDT` for each of these versions in the dataset.","8921ea49":"###\u00a0Import libraries","b619a15d":"From these graphs, we easily guess when a new chrome browser is relased by looking the rapid increase of the version count for each platform. Apparently this dataset covers the release date of chrome 63 to 71 for all the 3 platforms.","4765eecd":"There are several versions of **chrome** browser in our top of the most used browsers in this dataset. It seems a good candidate for further analysis.\n\n###\u00a0Chrome versions\n\nList of chrome version in this dataset is a good starting point:","ac2914e8":"### Conclusion","368f4e62":"We were supposing in our analysis that all users were using the [\"stable\" channel](https:\/\/www.chromium.org\/getting-involved\/dev-channel) of chrome browser to determine this dataset's starting date. But if a single user is using a \"beta\", \"dev\" or \"canary\" channel version of chrome our estimation is biased. These non-\"stable\" channel versions are generally released before the \"stable\" version, then our estimate will be biased to an earlier date than the right one.\n\nThis date is close to what other kagglers found (30th november) by considering days with highest peaks as christmas or cybermonday.\n\n\nI hope you enjoyed reading this notebook as much as I am while writing it. I let the reader do the same analysis with other browsers like **safari** or **firefox** as an exercice.\n\nTake care and Happy kaggling! \ud83d\udc4d","421aea3e":"We have a large set of different chrome releases ranging from version **39 to 71** and for **3 different platforms** (Desktop, Android and iOS).\n\n### Chrome daily usage\n\nWhat is the life cycle of chrome versions?","0c7b9b90":"### Browsers available\n\n`id_31` contains browser in use during a card-not-present transaction (CNP). What are the most used browsers?","7e79c348":"### Load data","592e6540":"What are the **Desktop** version of chrome used?","49846846":"**Apple** users are the small portion of users, but they are keeping their browser up-to-date as they have the smallest number of different chrome versions in the field.","e5e848fd":"# Dating Dataset Creation with a Browser\n\nIn this kernel I do some basic exploratory data analysis on the IEEE Fraud Detection dataset. The purpose of this simple notebook is to estimate the starting date of this dataset.\n\nFor that, we will analyze the timestamp `TransactionDT` provided for each transaction. `TransactionDT` is the time elapsed in second since dataset's starting date and the transaction date. We will combine this piece of data with the browser used to perform the transaction (`id_31`) to discover the dataset's starting date.\n\n![adam-tinworth-OJWivczp3aY-unsplash-resized.jpg](attachment:adam-tinworth-OJWivczp3aY-unsplash-resized.jpg)","cbc98acb":"We can clearly see that the **Desktop version** of Chrome is regurlarly updated by Google and users are mostly up-to date thanks to the automatic chrome updater.\n\nI also notice that versions are not deployed immediately to all users. When a new version is relased, there is first a linear ramp-up of the number of updated users and then it is deployed to all users. This can be seen for versions 68, 69, 70 and 71. Probably Google is monitoring first updated installations to detect problems before to make a versionglobally available.\n\nWhat about **Android** version?","12b81d51":"### Chrome release dates\n\nA quick search on Internet and [wikipedia](https:\/\/en.wikipedia.org\/wiki\/Google_Chrome_version_history) in peculiar gives us the following release dates for the different versions of chrome. It is ranging from 2014 to 2019.","148fc01c":"**Android** users have mostly up-to-date chrome version on their devices. But old versions of chrome looks more frequent and older than on desktop (version 39 still in use compared to 49 on desktop).\n\nLastly, the second most frequent mobile system: **Apple iOS**","9fcc44f1":"### And the origin is...\n\nTo reduce outliners influence, we'll take the median of estimated dates. Therefore we estimate *the beginning of time* for this dataset is around **28th november 2017**:"}}