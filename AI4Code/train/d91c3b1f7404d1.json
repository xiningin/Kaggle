{"cell_type":{"a38603cf":"code","85c8895a":"code","12edc4ef":"code","e744c37a":"code","5eb717f6":"code","f509e339":"code","5cc04d61":"code","d53870f6":"code","61c6d443":"code","6083c2c0":"code","dc065987":"code","9ac547e1":"code","c47f8585":"code","57cbead5":"code","965b2fc9":"code","85da2672":"code","827bdc64":"code","b2548d07":"code","5be11e5a":"code","e5c6e8c0":"code","355eb309":"code","268b2f8b":"code","fc4e5d5e":"code","b6a5b093":"code","3640e385":"code","9f76ba42":"code","b3bcf8ab":"code","914b31f3":"code","76d817ac":"code","790721fd":"code","261715b4":"code","469458f9":"code","0f9d0e81":"code","980feb01":"code","f527f83a":"code","e3ec3d76":"code","52b41475":"code","bf5fff28":"code","5cd03e92":"code","d79bc523":"code","b480d678":"code","8947a03e":"code","cf95d554":"code","01087dd9":"code","bd21d007":"code","d1947219":"code","8a308514":"code","aade0c3a":"code","a6af0ebc":"code","48a2d1e7":"code","9d7a3791":"code","83c99b0d":"markdown","45f1c210":"markdown","588fb7f4":"markdown","093f8e40":"markdown","097c9454":"markdown","6e0a820a":"markdown","511a354f":"markdown","0491d5c8":"markdown","4a3cd8e4":"markdown","27ed17de":"markdown","2e4e1dca":"markdown","9cfcde8c":"markdown"},"source":{"a38603cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","85c8895a":"import matplotlib.pyplot as plt\nimport seaborn as sns","12edc4ef":"df = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv')","e744c37a":"df.head()","5eb717f6":"df.shape #Printing the shape of the dataset","f509e339":"df.dtypes #The datatypes of all the columns present in the dataset","5cc04d61":"df.info()","d53870f6":"df.isnull().sum() #Count of Null values in each column","61c6d443":"#includes correcting the datatypes of the columns, dealing with Null and duplicate data etc.","6083c2c0":"df.dtypes #Before Type Conversion","dc065987":"def convert_size_to_bytes(size):\n    if size == 'Varies with device': return np.nan\n    unit = size[-1]\n    \n    if unit == 'M':\n        return float(size[:-1]) * 1024 * 1024\n    \n    elif unit == 'K':\n        return float(size[:-1]) * 1024","9ac547e1":"# Converting the columns to the most suitable data types. errors='coerce' converts any unsupported value to NAN and proceeds to next value.\n# errors='ignore' stops the conversion and restores the original type for the already converted values.\ndf['Reviews'] = pd.to_numeric(df['Reviews'], errors='coerce') \ndf['Installs'] = pd.to_numeric(df['Installs'].str.replace('+', '').str.replace(',', ''), errors='coerce')\ndf['Last Updated'] = pd.to_datetime(df['Last Updated'], format=\"%B %d, %Y\", errors='coerce')\ndf['Price'] = pd.to_numeric(df['Price'].apply(lambda x: x.replace('$', '') if '$' in x else x), errors='coerce')\ndf['Size'] = pd.to_numeric(df['Size'].apply(convert_size_to_bytes), errors='coerce')","c47f8585":"df.dtypes # After Type Conversion","57cbead5":"df.head()","965b2fc9":"# Categorical Columns can be filled with the Mode values, Quantitative columns can be filled with Mean (if no outliers) or Median (if data is skewed)","85da2672":"df.isnull().sum() # Null values before","827bdc64":"df.describe()","b2548d07":"# Analysing the Rating Column - From the above output it can be seen that there is an 'outlier' in the data with Rating of 19 (Max should be 5)","5be11e5a":"plt.figure(figsize=(15,3), dpi=130)\n# sns.set_style('darkgrid')\nsns.boxplot(data=df, x='Rating')\nplt.show();","e5c6e8c0":"plt.figure(figsize=(15,3), dpi=130)\nsns.histplot(df['Rating'], kde=True, bins=20)\nplt.show();","355eb309":"# To fill the NAN values in 'Rating' column - \n\n# 1. We can either remove the outlier first and then take the mean of the column and set it to replace the NAN values\n# 2. We can take the Median and set it to replace the NAN values and deal with the outlier later\n\n# I am taking the first approach here.","268b2f8b":"df.loc[df['Rating'] == 19]","fc4e5d5e":"df = df.drop(index=df.loc[df['Rating'] == 19].index)","b6a5b093":"df.iloc[10470:10475] # The Outlier has been dropped","3640e385":"# Filling the NAN values in the Rating column with the Mean of the column","9f76ba42":"df['Rating'] = df['Rating'].fillna(df['Rating'].mean())","b3bcf8ab":"df.isnull().sum() # All the NAN values in the 'Rating' column have been filled with the median value - 4.3. Also, the above record \n# with Rating = 19 had NAN values for alot of columns which have been fixed now that it's deleted. ","914b31f3":"plt.figure(figsize=(15,3), dpi=150)\nsns.set_style('darkgrid')\nsns.boxplot(data=df, x='Rating')\nplt.show();","76d817ac":"df['Rating'].describe() # The above box plots matches the data below. \n\n# The Median of the data is 4.3, The first Quartile is 4.1 while the third Quartile is 4.5 which means the IQR is 0.4. The Whiskers are 1.5 * IQR \n# which is 3.5 and 5.1 and anything beyond these points are the outliers.","790721fd":"plt.figure(figsize=(15,3), dpi=130)\nsns.histplot(df['Rating'], kde=True, bins=25)\nplt.xticks(np.arange(1,5,0.2))\nplt.show();","261715b4":"# Removing Null from the 'Type', 'Current Ver' and the 'Android Ver' column","469458f9":"df.loc[df['Type'].isnull()]","0f9d0e81":"df['Type'] = df.apply(lambda x: 'Free' if x['Price'] == 0 else 'Paid', axis=1) #Specifying the Type based on the value of the Price column","980feb01":"df['Type'].isnull().sum()","f527f83a":"# 'Current Ver' and 'Android Ver' both are categorical columns with object type data so we can use the mode of the 2 columns to fill their NAN values","e3ec3d76":"print(df['Current Ver'].mode())\nprint(df['Android Ver'].mode())","52b41475":"print(df['Current Ver'].isnull().sum())\nprint(df['Android Ver'].isnull().sum())","bf5fff28":"df['Current Ver'] = df['Current Ver'].fillna(df['Current Ver'].mode().iloc[0])\ndf['Android Ver'] = df['Android Ver'].fillna(df['Android Ver'].mode().iloc[0])","5cd03e92":"df.isnull().sum()","d79bc523":"df.loc[df.duplicated(subset=['App'], keep='first')]","b480d678":"df = df.drop_duplicates(keep='first', subset='App')","8947a03e":"df.head()","cf95d554":"top10_reviews = df.sort_values('Reviews', ascending=False).head(10)\ntop10_reviews","01087dd9":"plt.figure(figsize=(15,3), dpi=150)\nsns.barplot(data=top10_reviews, x='Reviews', y='App', palette='Set2')\nplt.xlabel('Reviews -->', fontsize=14)\nplt.ylabel('App -->', fontsize=14)\nplt.yticks(fontsize=8)\nplt.title('Most Popular Apps based on Reviews', fontsize=14)\nplt.show();\n","bd21d007":"plt.figure(figsize=(15,3), dpi=150)\nsns.countplot(data=df, x='Category')\nplt.xticks(rotation=90, fontsize=6)\nplt.yticks(fontsize=6)\nplt.xlabel('App Category -->', fontsize=10)\nplt.ylabel('# of Apps -->', fontsize=10)\nplt.title('Number of Apps per Category')\nplt.show()","d1947219":"df.loc[df['Reviews'] > 1000000].sort_values('Rating', ascending=False).head()","8a308514":"#Plotting the amount of free vs paid apps on the playstore  by the Content Rating\nplt.figure(figsize=(15, 4), dpi=150)\nsns.countplot(data=df, x='Type', hue='Content Rating', palette='Dark2')\nplt.xlabel('Type of App -->', fontsize=12)\nplt.ylabel('Count -->', fontsize=12)\nplt.title('Number of Free vs Paid Apps', fontsize=12)\nplt.legend(loc='upper right', fontsize=8)\nplt.show();","aade0c3a":"top10_genres = df['Genres'].value_counts().head(10)\ntop10_genres","a6af0ebc":"plt.figure(figsize=(15,4), dpi=200)\nsns.barplot(x=top10_genres.values, y=top10_genres.index, palette='Dark2')\nplt.xlabel('# of Apps -->')\nplt.ylabel('Genres -->')\nplt.title('Number of Apps per genre')\nplt.show();","48a2d1e7":"df.sort_values('Last Updated').head(10)","9d7a3791":"df.loc[(~(df['App'].str.lower().str.contains('rich'))) & (df['Type'] == 'Paid')].sort_values('Price', ascending=False).head()","83c99b0d":"#### Most Popular App based on the number of Reviews","45f1c210":"#### Number of Apps per category","588fb7f4":"#### Type of App distributed by Content Rating","093f8e40":"#### Top 5 costliest apps not containing the word 'Rich'","097c9454":"#### Apps not updated for the longest time","6e0a820a":"#### Dealing with Null data","511a354f":"#### Deleting duplicate data (if any)","0491d5c8":"### Data Cleaning ","4a3cd8e4":"### Data Analysis and Visualization","27ed17de":"#### Top 5 highest rated apps with more than a million reviews","2e4e1dca":"#### Correcting the column datatypes","9cfcde8c":"#### Top 10 most popular genres"}}