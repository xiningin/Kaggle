{"cell_type":{"59bd379a":"code","010c35c8":"code","cfe0e8ef":"code","5c8f7793":"code","4a9a610c":"code","5b32a954":"code","6a926b30":"code","af3d1ade":"code","d3fb1baf":"code","f261f8dd":"code","147019c1":"code","33d7c272":"code","e023b444":"code","6368a355":"code","04046d04":"code","8819adc3":"code","6913b89c":"code","d2f3f370":"code","b0e9bdc5":"code","e0b87111":"markdown","0870be08":"markdown","89557c90":"markdown","25bbff7d":"markdown","46f0a7da":"markdown","92efc7ab":"markdown","180e0c27":"markdown","a26786fa":"markdown","3f352362":"markdown","c351e291":"markdown","c76190a7":"markdown","03ad399c":"markdown","537a4e89":"markdown","66adaa83":"markdown","773cf90f":"markdown","4d5122a0":"markdown"},"source":{"59bd379a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","010c35c8":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport seaborn as sns\nimport matplotlib.pyplot as plt","cfe0e8ef":"dataset = pd.read_csv(\"\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv\")","5c8f7793":"dataset.head(10)","4a9a610c":"dataset.describe()","5b32a954":"dataset.info()","6a926b30":"dataset.shape","af3d1ade":"dataset.isnull().sum()","d3fb1baf":"dataset['reviews_per_month'].fillna(value = 0 , inplace = True)\ndataset.drop(['id' , 'host_id' , 'host_name' ,'last_review'] , axis = 1 , inplace = True)\ndataset.head()","f261f8dd":"sns.catplot(x=\"neighbourhood_group\", kind = \"count\", palette = \"Set2\", data = dataset)\nplt.show()","147019c1":"neighbourhood_top10 = dataset[\"neighbourhood\"].value_counts().head(10)\ndf_neighbourhood_top10 = pd.DataFrame(neighbourhood_top10)\ndf_neighbourhood_top10 = df_neighbourhood_top10.reset_index()\nf, ax = plt.subplots(figsize = (15,5))\nsns.barplot(x =\"index\", y = \"neighbourhood\", palette = \"Set2\", data = df_neighbourhood_top10)\nplt.show()","33d7c272":"dataset_price = dataset.groupby([\"room_type\"])[\"price\"].median()\ndf_dataset_price = pd.DataFrame(dataset_price)\ndf_dataset_price = df_dataset_price.reset_index()\n\nsns.catplot(x=\"room_type\", y=\"price\", kind = \"bar\", palette = \"Accent\",  data = df_dataset_price)\nplt.title(\"Room_type price by it's median\")\nplt.show()","e023b444":"dataset_reviews = dataset.groupby([\"neighbourhood_group\"])[\"number_of_reviews\"].sum()\ndf_dataset_reviews = pd.DataFrame(dataset_reviews)\ndf_dataset_reviews = df_dataset_reviews.reset_index()\n\nsns.barplot(x=\"neighbourhood_group\", y=\"number_of_reviews\", data = df_dataset_reviews)\nplt.title(\"Total Reviews by neighbourhood_group\")\nplt.show()","6368a355":"dataset_night = dataset.groupby([\"neighbourhood_group\"])[\"minimum_nights\"].mean().round(2)\ndf_dataset_night = pd.DataFrame(dataset_night)\ndf_dataset_night = df_dataset_night.reset_index()\n\nsns.catplot(x=\"minimum_nights\", y = \"neighbourhood_group\", kind = \"bar\", data = df_dataset_night)\nplt.title(\"Minimum_nights mean by neighbourhood_group\")\nplt.show()","04046d04":"dataset_proportion = dataset.groupby([\"neighbourhood_group\"])[\"room_type\"].value_counts()\ndf_dataset_proportion = pd.DataFrame(dataset_proportion)\ndf_dataset_proportion.rename(columns={\"room_type\":\"Total of values\"}, inplace = True)\n\n\ndataset_count = dataset.groupby([\"neighbourhood_group\"])[\"room_type\"].count()\ndf_dataset_count = pd.DataFrame(dataset_count)\n\n\ndf_dataset_proportion[\"Total\"] = 0\n\ndf_dataset_proportion.loc[\"Bronx\"][\"Total\"]= df_dataset_count.room_type.loc[\"Bronx\"]\ndf_dataset_proportion.loc[\"Brooklyn\"][\"Total\"]= df_dataset_count.room_type.loc[\"Brooklyn\"]\ndf_dataset_proportion.loc[\"Manhattan\"][\"Total\"]= df_dataset_count.room_type.loc[\"Manhattan\"]\ndf_dataset_proportion.loc[\"Queens\"][\"Total\"]= df_dataset_count.room_type.loc[\"Queens\"]\ndf_dataset_proportion.loc[\"Staten Island\"][\"Total\"]= df_dataset_count.room_type.loc[\"Staten Island\"]\n\ndf_dataset_proportion = df_dataset_proportion.reset_index()\n\ndf_dataset_proportion[\"Proportion\"] = (df_dataset_proportion[\"Total of values\"]\/df_dataset_proportion[\"Total\"]).round(2)\n\nsns.catplot(x=\"neighbourhood_group\",\n            y = \"Proportion\",\n            kind = \"bar\",\n            hue = \"room_type\",\n            data = df_dataset_proportion)\nplt.title(\"Room_type proportion for each neighbourhood_group\")\nplt.show()","8819adc3":"sns.relplot(x=\"latitude\", y=\"longitude\", palette = \"Set2\", hue = \"neighbourhood_group\", data = dataset)\nplt.show()","6913b89c":"corr = dataset.corr()\nsns.heatmap(corr, annot=True, cmap='coolwarm')","d2f3f370":"plt.figure(figsize = (15, 15))\nplt.style.use('seaborn-white')\nplt.subplot(221)\nsns.scatterplot(x=\"latitude\", y=\"longitude\",hue=\"neighbourhood_group\", data=dataset)\nplt.subplot(222)\nsns.scatterplot(x=\"latitude\", y=\"longitude\",hue=\"room_type\", data=dataset)\nplt.subplot(223)\nsns.scatterplot(x=\"latitude\", y=\"longitude\",hue=\"price\", data=dataset)\nplt.subplot(224)\nsns.scatterplot(x=\"latitude\", y=\"longitude\",hue=\"availability_365\", data=dataset)\nplt.show()","b0e9bdc5":"import pandas as pd\nimport geopandas as gpd\nimport math\nimport folium\nfrom folium import Choropleth, Circle, Marker\nfrom folium.plugins import HeatMap, MarkerCluster\nm_1 = folium.Map(location=[40.7128,-74.0060], tiles='cartodbpositron', zoom_start=12)\n\n# Adding a heatmap to the base map\nHeatMap(data=dataset[['latitude', 'longitude']], radius=10).add_to(m_1)\n\n# Displaying the map\nm_1","e0b87111":"**Checking the number of reviews for each neighbourhood group**","0870be08":"# **EXPLORING THE DATASET**","89557c90":"**Checking the minimum night mean for each neighbourhood group**","25bbff7d":"**Checking the most expensive room type by it's median**","46f0a7da":"So the most frequent neighbourhood is Williamsburg, followed by Bedford-Stuyvesant.","92efc7ab":"# **IMPORTING REQUIRED LIBRARIES**","180e0c27":"**Geographical Visualization**","a26786fa":"**Plotting the latitude and longitude on a relplot to help us visualize the neighbourhood group distribuition**","3f352362":"**The most present neighbourhood group**","c351e291":"# **EDA**","c76190a7":"# **INTRODUCTION**","03ad399c":"**Checking the proportion of \"private_room\", \"entire apt\" and \"shared room\" for each \"neighbourhood_group\"**","537a4e89":"Manhattan has the highest mean of the neighbourhood groups.","66adaa83":"From the graph, Manhattan is the most frequent group in this dataset.","773cf90f":"As we can see the Entire Home is the most expensive room type, followed by Private Room, and Shared room.","4d5122a0":"Hello all!!!\n\nHope y'all are doing good ;)\n\nHere, I've done exploratory data analysis for the AirBnb Dataset from Kaggle.\n\nI've included histograms and interective maps also!. Hope y'all like this notebook. \n\nIf you like this notebook, feel free to upvote this ;)\n\nHappy Learning <3"}}