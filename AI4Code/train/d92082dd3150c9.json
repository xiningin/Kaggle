{"cell_type":{"2892cb7b":"code","7184fd0a":"code","f1388f1c":"code","d691ed1e":"code","b82a59d8":"code","c5da1af1":"code","af469659":"code","9284c072":"code","823efd6e":"code","507670b5":"code","9497800b":"code","63b3311e":"code","460a8aba":"code","3e1c6890":"code","1a88693e":"code","3902f355":"code","4dbbfc42":"code","54f4ac7d":"code","cfefe248":"code","3983248a":"code","43af7140":"code","c127ca8f":"code","06066503":"code","51328144":"code","80d4a70f":"code","ebca1476":"code","f7f17ebe":"code","2651bffa":"code","42200548":"code","a4daa5dc":"code","64e67449":"code","8d3614d4":"code","8297a8af":"code","fe528b50":"code","49ffd54c":"code","7ab687f6":"code","11697d9d":"code","19b19b7b":"code","6c9dd256":"code","4b492d71":"code","a4b01eeb":"code","11beaad9":"code","15a0fae1":"code","05ad5076":"code","02299efa":"code","8f9c8554":"code","87c25cfe":"code","303c869c":"code","74dc6786":"code","4fcbc8ea":"code","59027bb2":"code","3deee6ad":"code","a13a8ea4":"code","1afbb769":"code","635cc778":"code","de286893":"code","a6b94c71":"code","8c6be712":"code","cb92860d":"code","85881933":"code","258f54b9":"code","05cac61c":"code","dce4a171":"code","4aa13525":"code","84489c33":"code","93006a2b":"code","9c755f4c":"code","0d65327d":"code","1a73d692":"code","01821bf0":"code","4eb718df":"code","dd2d087c":"code","19ce7f59":"code","afab901a":"code","cb6b1a0f":"code","f4b81830":"code","ab3812ba":"code","bf263492":"markdown","4b1353df":"markdown","7f29396a":"markdown","63b7a243":"markdown","6f5a4525":"markdown","e20ecc79":"markdown","45d0dd17":"markdown","033b454a":"markdown","1d39672f":"markdown","3036cff5":"markdown","197d6a77":"markdown","04bb1cfc":"markdown","fede0caa":"markdown","15ddfa7a":"markdown","90448836":"markdown","d1629ec3":"markdown","58b76fa3":"markdown","fa6a5282":"markdown","0455b042":"markdown","b54d90ee":"markdown","8153c5d0":"markdown"},"source":{"2892cb7b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7184fd0a":"import numpy as np # linear algebra\nimport pandas as pd\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf\nfrom statsmodels.tsa.seasonal import STL\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom statsmodels.tsa.forecasting.stl import STLForecast\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nimport re #to extract model name","f1388f1c":"#list of models\n#list of models params\n\nstlforecast_list_model = []\nstlforecast_list_model_params = []\n\n#tsa_SARIMAX\nlist_Sarimax_models = []\nPARAMETERS_SARIMAX \n\n#df\nkats_prophet_df\nkats_Sarima_df\ntsa_SARIMAX_df\n","d691ed1e":"#reading the dataset\nair_passengers_df = pd.read_csv(\"..\/input\/air-passengers\/AirPassengers.csv\")\nair_passengers_df['Month'] = pd.to_datetime(air_passengers_df['Month'], infer_datetime_format=True)\nair_passengers_df_time_indexed = air_passengers_df.set_index('Month')\n","b82a59d8":"#visualizing the dataset\nplt.plot(air_passengers_df_time_indexed)\nplt.xlabel('Year')\nplt.ylabel('# of air passengers')\nplt.show()","c5da1af1":"plot_acf(air_passengers_df_time_indexed)\nplt.show()","af469659":"plot_pacf(air_passengers_df_time_indexed)\nplt.show()","9284c072":"from statsmodels.tsa.seasonal import seasonal_decompose\n\ndecomposed_df_add = seasonal_decompose(air_passengers_df_time_indexed, model = 'additive')\ndecomposed_df_add.plot()\nplt.show()","823efd6e":"decomposed_df_mult = seasonal_decompose(air_passengers_df_time_indexed, model = 'multiplicative')\ndecomposed_df_mult.plot()\nplt.show()","507670b5":"#Naive, Seasonal Naive , Mean\n\n#Naive y(t+h\/t) = y(t)\n\nfuture_dates = pd.date_range(start = '1961-01-01',end = '1963-12-01',freq='MS')\n\nlast_value = air_passengers_df_time_indexed.iloc[-1,:]\nlist_last_value = [int(last_value)]*len(future_dates)\n\nlist_mean_value = [int(air_passengers_df_time_indexed['#Passengers'].mean())]*len(future_dates)\n\nlist_snaive_Df = air_passengers_df[\"#Passengers\"][-12:]\nlist_snaive = [x for x in list_snaive_Df]*3\n\nNaive_forecast = pd.DataFrame(data=list_last_value,columns=['#Passengers'])\nNaive_forecast.set_index(future_dates,inplace=True)\n\nSNaive_forecast = pd.DataFrame(data=list_snaive,columns=['#Passengers'])\nSNaive_forecast.set_index(future_dates,inplace=True)\n\nMean_forecast = pd.DataFrame(data=list_mean_value,columns=['#Passengers'])\nMean_forecast.set_index(future_dates,inplace=True)\n\n","9497800b":"fig,axes = plt.subplots()\naxes.plot(Naive_forecast, label = 'Naive forecast')\naxes.plot(SNaive_forecast, label = 'SNaive forecast')\naxes.plot(Mean_forecast, label = 'Mean forecast')\naxes.plot(air_passengers_df_time_indexed)\nplt.legend(loc = 'best')\nplt.show()\n\n","63b3311e":"stl = STL(air_passengers_df_time_indexed,seasonal = 11)\nres = stl.fit()\nfig = res.plot()","460a8aba":"plot_acf(res.resid)\nplt.show()","3e1c6890":"plot_pacf(res.resid)\nplt.show()","1a88693e":"#create train and test data\n# a 70-30 train test split is generated\n\n\ntrain_df = air_passengers_df_time_indexed[:int(0.7*(len(air_passengers_df_time_indexed)))]\ntest_df = air_passengers_df_time_indexed[int(0.7*len(air_passengers_df_time_indexed)):]\n","3902f355":"stlforecast_list_model = []\nstlforecast_list_model_params = []\n\nfor p in range(1,4):\n    for d in range(0,2):\n        for q in range(0,2):\n            stlf = STLForecast(train_df, ARIMA, model_kwargs=dict(order=(p, d, q), trend=\"t\"))\n            stlf_res = stlf.fit()\n            stlforecast_list_model.append(stlf_res)\n            stlforecast_list_model_params.append(f'({p}{d}{q})')\n            \n\n#forecast = stlf_res.forecast(44)\n#plt.plot(train_df, label = 'train')\n#plt.plot(test_df, label = 'test')\n#plt.plot(forecast, label = 'forecasts')\n#plt.legend(loc = 'best')\n#plt.show()","4dbbfc42":"mae_STL_ARIMA = mean_absolute_error(test_df,forecast)\nrmse_STL_ARIMA = np.sqrt(mean_squared_error(test_df,forecast))\nprint(f\"rmse of STL_ARIMA based model is {rmse_STL_ARIMA}\")\nprint(f\"mae of STL_ARIMA based model is {mae_STL_ARIMA}\")\n\n","54f4ac7d":"#from statsmodels.tsa.arima.model import ARIMA\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\n\n\n","cfefe248":"#generating SARIMAX models and appending it to the list\n\n\nlist_Sarimax_models = []\n\nfor p in range(11,15):\n    for q in range (0,2):\n        for d in range (0,2):\n            for P in range(0,2):\n                for D in range(0,2):\n                    for Q in range(0,2):\n                        model3 = SARIMAX(train_df,order = (p,d,q), seasonal_order=(P,D,Q,12),trend='t')\n                        fitted3 = model3.fit()\n                        list_Sarimax_models.append(fitted3)\n\n","3983248a":"PARAMETERS_SARIMAX = []\n\nfor p in range(11,15):\n    for q in range (0,2):\n        for d in range (0,2):\n            for P in range(0,2):\n                for D in range(0,2):\n                    for Q in range(0,2):\n                        PARAMETERS_SARIMAX.append(f'({p},{d},{q})({P},{D},{Q},12)')\n    \n    \nPARAMETERS_SARIMAX  \n    ","43af7140":"import numpy as np\ntsa_SARIMAX_df = tabulated_scores(list_Sarimax_models,test_df)\n#tsa_SARIMAX_df['Parameters'] = PARAMETERS_SARIMAX\ntsa_SARIMAX_df","c127ca8f":"#print(fitted3.summary())\n\n# Forecast\nfc = list_model[-1].forecast(44) \n\n# Make as pandas series\nfc_series = pd.Series(fc, index=test_df.index)\n\n# Plot\nplt.plot(train_df, label='training')\nplt.plot(test_df, label='actual')\nplt.plot(fc_series, label='forecast')\nplt.title('Forecast vs Actuals')\nplt.legend(loc='best')\nplt.show()\n    \n    ","06066503":"#function to calculate mape\n\ndef mean_absolute_percentage_error(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\n\n\n#function to calulate all scores\ndef score_generator(fitted_model,forecast,actual):\n                               \n    try:\n        AIC = fitted_model.aic\n        BIC = fitted_model.bic\n    except:\n        AIC = 'not defined'\n        BIC = 'not defined'\n     \n    try:\n        mae = mean_absolute_error(actual,forecast)                      #since tsa.ARIMA return a single series with forecasts\n    except:\n        mae = mean_absolute_error(actual,forecast['fcst'])    #since kats.prophet returns a dataframe where the forecasts are in column name 'fcst'\n        \n    try:    \n        rmse= np.sqrt(mean_squared_error(actual,forecast))\n    except:\n        rmse= np.sqrt(mean_squared_error(actual,forecast['fcst']))\n                               \n    try:\n        mape = mean_absolute_percentage_error(actual,forecast)\n    except:\n        mape = mean_absolute_percentage_error(actual,forecast['fcst'])\n                               \n    \n                    \n    return AIC,BIC,mae,rmse,mape\n    \n #function to generate a dataframe for a list of models\ndef tabulated_scores(list_models,actual):\n    \n    AIC = []\n    BIC = []\n    MAE = []\n    RMSE = []\n    MAPE = []                         \n    NAME = []\n    \n    \n    for model in list_models:\n        \n        #code to get model name\n        model_name = str(type(model))\n        name = re.findall(r\"'(.*?)'\", model_name, re.DOTALL)\n        \n        if name[0].split('.')[0] == 'merlion':\n            test_df_merlion = TimeSeries.from_pd(test_df)\n            test_pred, test_err = model.forecast(len(test_df))\n             \n            rmse = ForecastMetric.RMSE.value(ground_truth=test_df_merlion, predict=test_pred)\n            mae = ForecastMetric.MAE.value(ground_truth=test_df_merlion, predict=test_pred)\n            aic = 'not defined'\n            bic = 'not defined'\n            mape = mean_absolute_percentage_error(test_df,[i[0] for i in pd.DataFrame(test_pred)[1]]) #calculating mape as tuple is formed on making preds a DataFrame\n         \n        elif ( name[0].split('.')[0] == 'kats' or name[0].split('.')[0] == 'pmdarima') :\n            \n            if name[0].split('.')[2] == 'ensemble':\n                model.predict(len(actual))\n                res = model.aggregate()\n                aic, bic, mae,rmse ,mape = score_generator(model,res,actual)\n                \n            else:\n                forecast = model.predict(len(actual)) #for kats.prophet, pmdarima autoarima\n                aic, bic, mae,rmse ,mape = score_generator(model,forecast,actual)\n                \n            \n            \n        \n        else:\n            forecast = model.forecast(len(actual)) #for tsa.ARIMA and STLforecast\n            aic, bic, mae,rmse ,mape = score_generator(model,forecast,actual)\n        \n        AIC.append(aic)\n        BIC.append(bic)\n        MAE.append(mae)\n        RMSE.append(rmse)\n        MAPE.append(mape)\n        NAME.append(name)\n                               \n        \n           \n    table = pd.DataFrame(data = list(zip(NAME,AIC,BIC,MAE,RMSE,MAPE)), columns = ['NAME','AIC','BIC','MAE','RMSE','MAPE'])\n    \n    \n    return table\n    \n    \n\n\n\n","51328144":"model_name = str(type(ensemble_kats_m))\nname = re.findall(r\"'(.*?)'\", model_name, re.DOTALL)\nname[0].split('.')[2]","80d4a70f":"pip install kats","ebca1476":"from kats.consts import TimeSeriesData\n\nair_pax_renamed = air_passengers_df.rename(columns={\"Month\": \"time\"})\nair_passengers_ts_train = TimeSeriesData(air_pax_renamed[:int(0.7*len(air_pax_renamed))])\nair_passengers_ts_train.plot(cols=['#Passengers'])\nplt.show()","f7f17ebe":"from kats.models.prophet import ProphetModel, ProphetParams","2651bffa":"# import the param and model classes for Prophet model\nfrom kats.models.prophet import ProphetModel, ProphetParams\n\nseasonality_mode = ['multiplicative','additive']\ngrowth = ['linear']\nyearly_seasonality = [True,False]\n#uncertainty_samples = False\n\nlist_katsprophet_models = []\nlist_katsprophet_models_params = []\n\nfor s in seasonality_mode:\n    for g in growth:\n        for ys in yearly_seasonality:\n            params = ProphetParams(seasonality_mode= s, yearly_seasonality=ys, growth= g)\n            prophet_m = ProphetModel(air_passengers_ts_train, params)\n            prophet_m.fit()\n            list_katsprophet_models.append(prophet_m)\n            list_katsprophet_models_params.append(f'{s},{ys},{g}')\n            ","42200548":"kats_prophet_df = tabulated_scores(list_katsprophet_models,test_df)\nkats_prophet_df['Parameters'] = list_katsprophet_models_params\nkats_prophet_df","a4daa5dc":"from kats.models.sarima import SARIMAModel, SARIMAParams\n\n\nlist_kats_Sarimax_models = []\n\nfor p in range(11,15):\n    for q in range (0,2):\n        for d in range (0,2):\n            params = SARIMAParams(p,d,q, trend='t',seasonal_order=(0,d,q,12))\n            kats_sarima_model = SARIMAModel(data=air_passengers_ts_train, params=params)\n            kats_sarima_model.fit()\n            list_kats_Sarimax_models.append(kats_sarima_model)\n            \nPARAMETERS_kats_SARIMA = []\n            \nfor p in range(11,15):\n    for q in range (0,2):\n        for d in range (0,2):\n            PARAMETERS_kats_SARIMA.append(f'({p},{d},{q})(0,{d},{q},12)')\n    \n    \nPARAMETERS_kats_SARIMA\n    \n\n\n\n","64e67449":"\nkats_Sarima_df = tabulated_scores(list_kats_Sarimax_models,test_df)\nkats_Sarima_df['Parameters'] = PARAMETERS_kats_SARIMA\nkats_Sarima_df","8d3614d4":"list_kats_Sarimax_models[0]","8297a8af":"\"\"\"Ensemble techniques for forecasting\n\nThis implements a set of ensemble techniques including weighted averaging, median ensemble\nand STL-based ensembling method. This is the parent class for all ensemble models.\n\"\"\"","fe528b50":"from kats.models.ensemble.ensemble import EnsembleParams, BaseModelParams\nfrom kats.models.ensemble.kats_ensemble import KatsEnsemble\nfrom kats.models.ensemble.median_ensemble import MedianEnsembleModel\n\nfrom kats.models import (\n    arima,\n    holtwinters,\n    linear_model,\n    prophet,  # requires fbprophet be installed\n    quadratic_model,\n    sarima,\n    theta,\n)\n\n# we need define params for each individual forecasting model in `EnsembleParams` class\n# here we include 6 different models\nmodel1_params = EnsembleParams(\n            [\n                BaseModelParams(\"arima\", arima.ARIMAParams(p=11, d=1, q=0)),\n                BaseModelParams(\n                    \"sarima\",\n                    sarima.SARIMAParams(\n                        p=11,\n                        d=1,\n                        q=0,\n                        trend=\"t\",\n                        seasonal_order=(0, 1, 0, 12),\n                        enforce_invertibility=False,\n                        enforce_stationarity=False,\n                    ),\n                ),\n                BaseModelParams(\"prophet\", prophet.ProphetParams(seasonality_mode='multiplicative')),  # requires fbprophet be installed\n                BaseModelParams(\"linear\", linear_model.LinearModelParams()),\n                BaseModelParams(\"quadratic\", quadratic_model.QuadraticModelParams()),\n                BaseModelParams(\"theta\", theta.ThetaParams(m=12)),\n            ]\n        )\n\nmodel2_params = EnsembleParams(\n            [\n                BaseModelParams(\"arima\", arima.ARIMAParams(p=11, d=1, q=0)),\n                BaseModelParams(\n                    \"sarima\",\n                    sarima.SARIMAParams(\n                        p=11,\n                        d=1,\n                        q=0,\n                        trend=\"t\",\n                        seasonal_order=(0, 1, 0, 12),\n                        enforce_invertibility=False,\n                        enforce_stationarity=False,\n                    ),\n                ),\n                BaseModelParams(\"prophet\", prophet.ProphetParams(seasonality_mode='multiplicative')),  # requires fbprophet be installed\n               \n            ]\n        )\n\n\nmodel3_params = EnsembleParams(\n            [\n                BaseModelParams(\"linear\", linear_model.LinearModelParams()),\n                BaseModelParams(\"quadratic\", quadratic_model.QuadraticModelParams()),\n                BaseModelParams(\"theta\", theta.ThetaParams(m=12)),\n            ]\n        )\n\n# create `KatsEnsembleParam` with detailed configurations \nKatsEnsembleParam1 = {\n    \"models\": model1_params,\n    \"aggregation\": \"median\",\n    \"seasonality_length\": 12,\n    \"decomposition_method\": \"multiplicative\",\n}\n\nKatsEnsembleParam2 = {\n    \"models\": model2_params,\n    \"aggregation\": \"median\",\n    \"seasonality_length\": 12,\n    \"decomposition_method\": \"multiplicative\",\n}\n\nKatsEnsembleParam3 = {\n    \"models\": model3_params,\n    \"aggregation\": \"median\",\n    \"seasonality_length\": 12,\n    \"decomposition_method\": \"multiplicative\",\n}\n\n\n# create `KatsEnsemble` model\nensemble_kats_m1 = KatsEnsemble(\n    data=air_passengers_ts_train, \n    params=KatsEnsembleParam1\n    )\n\nensemble_kats_m2 = KatsEnsemble(\n    data=air_passengers_ts_train, \n    params=KatsEnsembleParam2\n    )\n\nensemble_kats_m3 = KatsEnsemble(\n    data=air_passengers_ts_train, \n    params=KatsEnsembleParam3\n    )\n\n\n# fit and predict\nem1 = ensemble_kats_m1.fit()\nem2 = ensemble_kats_m2.fit()\nem3 = ensemble_kats_m3.fit()\n#res1 = ensemble_kats_m.predict(44)\n\n# aggregate individual model results\n#res = ensemble_kats_m.aggregate()\n\n# plot to visualize\n#ensemble_kats_m.plot()\n\nlist_katsensemble_median_models = [em1,em2,em3]\nlist_katsensemble_median_params = [ \"arima,sarima,prophet,theta,linear,quadratic\", \"arima,sarima,prophet\", 'theta,linear,quadratic']\n\nkatsensemble_median_df = tabulated_scores(list_katsensemble_median_models,test_df)\nkatsensemble_median_df['Parameters'] = list_katsensemble_median_params\nkatsensemble_median_df","49ffd54c":"'''\nImplementation of theta model which is basically a simple\nexponential smoothing model with drift.\n","7ab687f6":"#equivalent to simple exponential smoothing with drift\n\n# import param and model from `kats.models.theta`\nfrom kats.models.theta import ThetaModel, ThetaParams\n\nlist_theta_param\n\n# create ThetaParam with specifying seasonality param value\nparams = ThetaParams(m=12)\n\n# create ThetaModel with given data and parameter class\nTheta_m = ThetaModel(data=air_passengers_ts_train, params=params)\n\n# call fit method to fit model\nTheta_m.fit()\n\n# call predict method to predict the next 44 steps\nres = Theta_m.predict(steps=44, alpha=0.2)\n\n# visualize the results\nTheta_m.plot()\n","11697d9d":"PARAMETERS.append('m = 12')","19b19b7b":"list_model.append(Theta_m)\n#tabulated_scores(list_model,test_df)","6c9dd256":"list_model","4b492d71":"# Forecasting with simple linear regression model\n#\n# In the simplest case, the regression model explores a linear relationship\n# between the forecast variable `y` (observed time series) and a single\n# predictor variable `x` (time).","a4b01eeb":"from kats.models.linear_model import LinearModelParams, LinearModel\n#warnings.simplefilter(action='ignore')\nparams = LinearModelParams(alpha = 0.05)\nLinearmodel_m = LinearModel(\n    data=air_passengers_ts_train, \n    params=params)\n\nLinearmodel_m.fit()\nfcst_LM = Linearmodel_m.predict(steps=44, alpha = 0.1)\n\n","11beaad9":"#list_model.pop()\nPARAMETERS.append('alpha = 0.05')\nlist_model.append(Linearmodel_m)\n#tabulated_scores(list_model,test_df)","15a0fae1":"Linearmodel_m.plot()","05ad5076":"# Forecasting with quadratic model\n#\n# The quadratic (non-linear) regression model explores a linear relationship\n# between the forecast variable `y` (observed time series) and predictor\n# variables `x` and `x^2`, where `x` is the time\n","02299efa":"from kats.models.quadratic_model import QuadraticModelParams, QuadraticModel\n#warnings.simplefilter(action='ignore')\nparams = QuadraticModelParams(alpha = 0.05)\nQuadraticmodel_m =  QuadraticModel(\n    data=air_passengers_ts_train, \n    params=params)\n\nQuadraticmodel_m.fit()\nfcst_QM =  Quadraticmodel_m.predict(steps=44, alpha = 0.1)","8f9c8554":"PARAMETERS.append('alpha = 0.05')","87c25cfe":"list_model.append(Quadraticmodel_m)","303c869c":"#list_model.append(Quadraticmodel_m)\nresult_df = tabulated_scores(list_model,test_df)\nresult_df['Parameters'] = PARAMETERS\nresult_df","74dc6786":"pip install salesforce-merlion","4fcbc8ea":"from merlion.utils import TimeSeries\nfrom merlion.utils.time_series import TimeSeries\nfrom merlion.evaluate.forecast import ForecastMetric\nfrom merlion.models.automl.autosarima import AutoSarima, AutoSarimaConfig\nfrom merlion.models.automl.seasonality_mixin import SeasonalityLayer\nfrom merlion.models.forecast.sarima import Sarima\n\n","59027bb2":"#Generating TimeSeries object from Dataframes\ntrain_df_merlion = TimeSeries.from_pd(train_df)\ntest_df_merlion = TimeSeries.from_pd(test_df)","3deee6ad":"from merlion.models.defaults import DefaultForecasterConfig, DefaultForecaster\ndefault_merlion_model = DefaultForecaster(DefaultForecasterConfig())\ndefault_merlion_model.train(train_data=train_df_merlion)\ntest_pred, test_err = default_merlion_model.forecast(time_stamps=test_df_merlion.time_stamps)","a13a8ea4":"import matplotlib.pyplot as plt\nfig, ax = default_merlion_model.plot_forecast(time_series=test_df_merlion, plot_forecast_uncertainty=True)\nplt.show()","1afbb769":"# Evaluate the model's predictions quantitatively\n\nfrom merlion.evaluate.forecast import ForecastScoreAccumulator\n\nAll_metrics = ForecastScoreAccumulator(ground_truth=test_df_merlion, predict=test_pred)","635cc778":"list_model.append(default_merlion_model)\nPARAMETERS.append('Default forecaster')\nres_df2 = tabulated_scores(list_model,test_df)\nres_df2['Parameters'] = PARAMETERS\n\n","de286893":"pip install openpyxl","a6b94c71":"#res_df2.to_excel('.\/df_results.xlsx')","8c6be712":"from merlion.models.forecast.smoother import MSESConfig,MSES","cb92860d":"MSES_model = MSES(MSESConfig(max_forecast_steps=44))\nMSES_model.train(train_data=train_df_merlion)\ntest_pred_MSES, test_err_MSES = MSES_model.forecast(time_stamps=test_df_merlion.time_stamps)","85881933":"test_pred_","258f54b9":"import matplotlib.pyplot as plt\nfig, ax = MSES_model.plot_forecast(time_series=test_df_merlion, plot_forecast_uncertainty=True)\nplt.show()","05cac61c":"All_scores_MSES = ForecastScoreAccumulator(ground_truth=test_df_merlion, predict=test_pred_MSES)\nprint(f'RMSE:{All_scores_MSES.rmse()}, MAE:{All_scores_MSES.mae()}')","dce4a171":"list_model.append(MSES_model)\nPARAMETERS.append('MSES default config')\ntabulated_scores(list_model,test_df)","4aa13525":"res_df3 = tabulated_scores(list_model,test_df)\nres_df3['Parameters'] = PARAMETERS\n#res_df3.to_excel('.\/df_results_MSES_included')","84489c33":"res_df3","93006a2b":"#res_df3.to_excel('.\/df_MSES_default_included.xlsx')","9c755f4c":"# **full auto sarima with approximation**\nmax_iter = [10,20,50,100,200,400,1000]\n# Specify the configuration of AutoSarima with approximation\nlist_autosarima_merlion_models = []\nparameters_autosarima_merlion_models = []\n\nfor mi in max_iter:\n    config1 = AutoSarimaConfig(max_forecast_steps=len(test_df), order=(\"auto\", \"auto\", \"auto\"),\n                           seasonal_order=(\"auto\", \"auto\", \"auto\", 12), approximation=True, maxiter=mi)\n    #model1  = SeasonalityLayer(model = AutoSarima(model = Sarima(config1)))\n    model1  = AutoSarima(model = Sarima(config1))\n    train_pred, train_err = model1.train(train_df_merlion, train_config={\"enforce_stationarity\": True,\"enforce_invertibility\": True})\n    list_autosarima_merlion_models.append(model1)\n    parameters_autosarima_merlion_models.append(f'{mi} maximum iterations')\n    \n    \nautosarima_df_result = tabulated_scores(list_autosarima_merlion_models,test_df)\nautosarima_df_result['Parameters'] = parameters_autosarima_merlion_models\n#auto_sarima_df_result\n\n\n","0d65327d":"autosarima_df_result","1a73d692":" #pip install pyramid-arima\n#for auto arima gives error unable to build wheel","01821bf0":"#All_models_params_df.to_excel('.\/All_models_params.xlsx')","4eb718df":"pip install pmdarima","dd2d087c":"import pmdarima as pm\nmodel = pm.auto_arima(train_df, seasonal=True, m=12) #takes approx 10 min to train\n\nforecast = model.predict(len(test_df))","19ce7f59":"pmd_autoarima_df = tabulated_scores([model],test_df)\npmd_autoarima_df['Parameters'] = 'seasonal=True, m = 12'\npmd_autoarima_df","afab901a":"All_models_params_df = pd.concat([tsa_SARIMAX_df,\nkats_prophet_df,\nkats_Sarima_df,\nkatsensemble_median_df,\nautosarima_df_result,pmd_autoarima_df], ignore_index=True)\n\nAll_models_params_df","cb6b1a0f":"from merlion.models.forecast.prophet import ProphetConfig, Prophet\n\nconfig2 = ProphetConfig(max_forecast_steps=len(test_df), yearly_seasonality='auto')\nmodel2  = Prophet(config2)\ntrain_pred2, train_err2 = model2.train(train_df_merlion)\n#list_autosarima_merlion_models.append(model1)\n#parameters_autosarima_merlion_models.append(f'{mi} maximum iterations')\nresult_prophet = model2.forecast(test_df_merlion.time_stamps)\n#result_prophet\ntabulated_scores([model2],test_df)","f4b81830":"train_pred2","ab3812ba":"#tabulated_scores([model],test_df)\n\nmodel_name = str(type(model))\nname = re.findall(r\"'(.*?)'\", model_name, re.DOTALL)\nname[0].split('.')[0]","bf263492":"# **QUADRATIC FORECASTING**","4b1353df":"# # ** Kats.SARIMA **","7f29396a":"# **Forecasting methods**","63b7a243":"# **Merlion**","6f5a4525":"# **Multi-Scale Exponential Smoother(MSES) for univariate time series forecasting.**","e20ecc79":"# **pmd ARIMA auto arima method**","45d0dd17":"# **Decomposition into trend, seasonality and residuals**","033b454a":"# **Forecasting using Prophet**","1d39672f":"# **Linear Model**","3036cff5":"# **Auto ML models**","197d6a77":"# **STL decomposition**","04bb1cfc":"# **Forecast using tsa.ARIMA models**","fede0caa":"# **function to generate predictive accuracy\/complexity scores of the model**","15ddfa7a":"# **Merlion DefaultForecaster predictions**","90448836":"# **KATS package**","d1629ec3":"# ****","58b76fa3":"# **Merlion Prophet**","fa6a5282":"# **KATS Ensemble model**","0455b042":"# **Train Test splitting of dataset**","b54d90ee":"# **Theta model**","8153c5d0":"#  **Forecasting using STL**"}}