{"cell_type":{"70e2900b":"code","cd44f6e4":"code","2172c0c5":"code","9ae39310":"code","1a49ca72":"code","2c0cc22f":"code","aa4eaeea":"code","f6e7df93":"code","21e165ad":"code","10eda92b":"code","0f1037bf":"code","9fff180c":"code","e1a56be6":"code","9ff0dd6a":"code","3d528af6":"code","226aae63":"code","47da86c5":"code","63bba1b4":"code","9055f6b5":"code","be6c82b2":"code","6b228582":"code","9c789e47":"code","f3314766":"code","0060d5cb":"code","a930625d":"markdown","5b03826a":"markdown","4fb08a0b":"markdown","9285d1ae":"markdown","5d15fc9c":"markdown","7a0c01f1":"markdown","68b49f79":"markdown","fa9d1716":"markdown","3312b614":"markdown","eeb4ca1e":"markdown","ca08132e":"markdown","44fde31b":"markdown"},"source":{"70e2900b":"!pip install dataprep\n%%hide output","cd44f6e4":"import pandas as pd\nimport numpy as np\nimport math\n\nfrom dataprep.eda import create_report\n\nfrom sklearn.cluster import KMeans,DBSCAN\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.metrics import silhouette_samples, silhouette_score\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm","2172c0c5":"def countnull(data):\n    count = data.isnull().sum(axis=0)\n    count = pd.DataFrame(count).T\n    print(count)","9ae39310":"df = pd.read_csv('..\/input\/ccdata\/CC GENERAL.csv')\nprint(df.head(5))\nprint(df.shape)","1a49ca72":"create_report(df)","2c0cc22f":"create_report(df).save('.\/EDA')","aa4eaeea":"countnull(df)","f6e7df93":"df.drop(['CUST_ID', 'MINIMUM_PAYMENTS'], axis='columns', inplace=True)","21e165ad":"df.dropna(axis='rows', inplace=True)","10eda92b":"# sc = StandardScaler()\n# df_sc = sc.fit_transform(df_sc)\n\nmc = MinMaxScaler()\ndf_mc = mc.fit_transform(df)","0f1037bf":"pca = PCA(n_components=11)\ndf_mc_pca = pca.fit_transform(df_mc)","9fff180c":"print('singular value : ', pca.singular_values_)\nprint('singular vector :\\n ', pca.components_.T)\nprint('eigen_value : ',pca.explained_variance_)\nprint('explained variance ratio : ',pca.explained_variance_ratio_)","e1a56be6":"cumsum = np.cumsum(pca.explained_variance_ratio_)\nprint(cumsum)\nd = np.argmax(cumsum >= 0.95) + 1\nprint(\"dimension : \", d)","9ff0dd6a":"pca = PCA(n_components=d)\ndf_mc_pca = pca.fit_transform(df_mc)","3d528af6":"# find the optimal number of clusters using elbow method\n\nWCSS = []\n\nfor i in range(1,11):\n    model = KMeans(n_clusters=i, init='k-means++')\n    model.fit(df_mc_pca)\n    WCSS.append(model.inertia_)\n\nfig = plt.figure(figsize = (14,7))\nplt.plot(range(1,11), WCSS, linewidth=4, markersize=12, marker='o', color = 'green')\nplt.xticks(np.arange(11))\nplt.xlabel(\"Number of clusters\")\nplt.ylabel(\"WCSS\")\nplt.show()","226aae63":"def visualize_silhouette(cluster_lists, X_features): \n\n    n_cols = len(cluster_lists)\n    fig, axs = plt.subplots(figsize=(4*n_cols, 4), nrows=1, ncols=n_cols)\n\n    for ind, n_cluster in enumerate(cluster_lists):\n        clusterer = KMeans(n_clusters = n_cluster, max_iter=500, random_state=0, init = 'k-means++')\n        cluster_labels = clusterer.fit_predict(X_features)\n\n        sil_avg = silhouette_score(X_features, cluster_labels)\n        sil_values = silhouette_samples(X_features, cluster_labels)\n\n        y_lower = 10\n        axs[ind].set_title('Number of Cluster : '+ str(n_cluster)+'\\n' \\\n                          'Silhouette Score :' + str(round(sil_avg,3)) )\n        axs[ind].set_xlabel(\"The silhouette coefficient values\")\n        axs[ind].set_ylabel(\"Cluster label\")\n        axs[ind].set_xlim([-0.1, 1])\n        axs[ind].set_ylim([0, len(X_features) + (n_cluster + 1) * 10])\n        axs[ind].set_yticks([])  # Clear the yaxis labels \/ ticks\n        axs[ind].set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1])\n   \n        for i in range(n_cluster):\n            ith_cluster_sil_values = sil_values[cluster_labels==i]\n            ith_cluster_sil_values.sort()\n\n            size_cluster_i = ith_cluster_sil_values.shape[0]\n            y_upper = y_lower + size_cluster_i\n\n            color = cm.nipy_spectral(float(i) \/ n_cluster)\n            axs[ind].fill_betweenx(np.arange(y_lower, y_upper), 0, ith_cluster_sil_values, \\\n                                facecolor=color, edgecolor=color, alpha=0.7)\n            axs[ind].text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n            y_lower = y_upper + 10\n\n        axs[ind].axvline(x=sil_avg, color=\"red\", linestyle=\"--\")","47da86c5":"visualize_silhouette([2, 3, 4, 5, 6, 7, 8, 9, 10], df_mc_pca)","63bba1b4":"model = KMeans(n_clusters = 3, init = 'k-means++', random_state=123)\nmodel.fit(df_mc_pca)","9055f6b5":"df['cluster'] = model.labels_.astype(object)","be6c82b2":"fig = px.scatter(df, x=\"ONEOFF_PURCHASES\", y=\"PURCHASES\", color=\"cluster\")\nfig.show()","6b228582":"fig = px.scatter(df, x='CREDIT_LIMIT', y='PURCHASES', color=\"cluster\")\nfig.show()","9c789e47":"fig = px.scatter(df, x=\"BALANCE\", y=\"PURCHASES\", color=\"cluster\")\nfig.show()","f3314766":"model_db = DBSCAN(eps=0.6, min_samples=10, metric='euclidean')\nmodel_db.fit(df_mc_pca)\ndf['cluster_DB'] = model_db.labels_.astype(object)+1","0060d5cb":"fig = px.scatter(df, x=\"ONEOFF_PURCHASES\", y=\"PURCHASES\", color=\"cluster_DB\")\nfig.show()","a930625d":"> Save EDA result (format : HTML)","5b03826a":"# 8. Visualization (Plotly)","4fb08a0b":"# 2. EDA tool install(dataprep)","9285d1ae":"# 4. Check dataframe and EDA","5d15fc9c":"Work in progress....\n\nPlease upvote if you like this.","7a0c01f1":"# 5. Preprocessing (Remove Nan value, StandardScaler)","68b49f79":"> How to select n_components of PCA function","fa9d1716":"# 3. Load library","3312b614":"# 6. Optimize number of cluster (Elbow method)","eeb4ca1e":"# 7. Optimize number of cluster (Silhouette_score)","ca08132e":"# 9. DBScan","44fde31b":"# 1. Data Description\n* CUSTID : Identification of Credit Card holder (Categorical)\n* BALANCE : Balance amount left in their account to make purchases\n* BALANCEFREQUENCY : How frequently the Balance is updated, score between 0 and 1 (1 = frequently updated, 0 = not frequently updated)\n* PURCHASES : Amount of purchases made from account\n* ONEOFFPURCHASES : Maximum purchase amount done in one-go\n* INSTALLMENTSPURCHASES : Amount of purchase done in installment\n* CASHADVANCE : Cash in advance given by the user\n* PURCHASESFREQUENCY : How frequently the Purchases are being made, score between 0 and 1 (1 = frequently purchased, 0 = not frequently purchased)\n* ONEOFFPURCHASESFREQUENCY : How frequently Purchases are happening in one-go (1 = frequently purchased, 0 = not frequently purchased)\n* PURCHASESINSTALLMENTSFREQUENCY : How frequently purchases in installments are being done (1 = frequently done, 0 = not frequently done)\n* CASHADVANCEFREQUENCY : How frequently the cash in advance being paid\n* CASHADVANCETRX : Number of Transactions made with \"Cash in Advanced\"\n* PURCHASESTRX : Numbe of purchase transactions made\n* CREDITLIMIT : Limit of Credit Card for user\n* PAYMENTS : Amount of Payment done by user\n* MINIMUM_PAYMENTS : Minimum amount of payments made by user\n* PRCFULLPAYMENT : Percent of full payment paid by user\n* TENURE : Tenure of credit card service for user"}}