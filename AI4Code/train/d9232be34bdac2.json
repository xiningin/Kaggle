{"cell_type":{"58516584":"code","3ff582f4":"code","b536217f":"code","ef15a2ab":"code","92cddb73":"code","7dccd599":"code","9c76bd38":"code","d7f80461":"code","6fefc0ec":"markdown","55e93a8c":"markdown","ef0bae07":"markdown"},"source":{"58516584":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.utils import to_categorical\nfrom keras.preprocessing import image\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils import to_categorical\nfrom tqdm import tqdm\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Conv2D, MaxPool2D, Flatten\nfrom keras.utils import np_utils\nfrom sklearn.metrics import accuracy_score\n\ndf = pd.read_csv(\"..\/input\/breakhis\/Folds.csv\")\ndf = df.sample(frac=1)\npath = \"..\/input\/breakhis\/BreaKHis_v1\/\" ","3ff582f4":"train_image = []\ny = []\n\nfor i in tqdm(range(df.shape[0])):\n    img = image.load_img(path + df['filename'].iloc[i], target_size=(28,28,1), grayscale=False)\n    img = image.img_to_array(img)\n    img = img\/255\n    train_image.append(img)\n    \n    if (df['filename'].iloc[i].find('benign') != -1): \n        y.append(0) \n    else:\n        y.append(1)\n        \nX = np.array(train_image)\ny = np.array(y)\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=0.2)\nX_test, X_val, y_test, y_val = train_test_split(X_test, y_test, random_state=42, test_size=0.2 , shuffle=True)\n\nY_train = np_utils.to_categorical(y_train, 2)\nY_test = np_utils.to_categorical(y_test, 2)\nY_val = np_utils.to_categorical(y_val, 2)\n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(X_val.shape)","b536217f":"print(sum(y==0))\nprint(sum(y==1))\nprint(sum(y==0) + sum(y==1) )\nprint(X.shape)","ef15a2ab":"i=0 #benign\nimage.load_img(path + df['filename'].iloc[i], target_size=(120,120,1), grayscale=False)\n    ","92cddb73":"i=1 #malignant\nimage.load_img(path + df['filename'].iloc[i], target_size=(120,120,1), grayscale=False)\n    ","7dccd599":"model = Sequential()\n#convlouton layer with the number of filters, filter size, strides steps, padding or no, activation type and the input shape.\nmodel.add(Conv2D(30, kernel_size = (3,3), strides=(1,1), padding='valid', activation='relu', input_shape=(28,28,3)))\n#pooling layer to reduce the volume of input image after convolution,\nmodel.add(MaxPool2D(pool_size=(1,1)))\n#flatten layer to flatten the output\nmodel.add(Flatten())   # flatten output of conv\nmodel.add(Dense(150, activation='relu'))  # hidden layer of 150 neuron\nmodel.add(Dense(2, activation='softmax'))  # output layer\nmodel.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='adam')\n\nhistory = model.fit(X_train, Y_train, batch_size=10, epochs = 5, validation_data=(X_test, Y_test))\n","9c76bd38":"history_df = pd.DataFrame(history.history)\nhistory_df.plot()","d7f80461":"y_pred = model.predict_classes(X_val)\nacc_test = 0\n\nfor i in range(X_val.shape[0]):\n    if(y_pred[i] == y_val[i]):\n        acc_test= acc_test+1\nprint(\"Accuracy test : \"  , acc_test\/X_val.shape[0]*100)","6fefc0ec":"# Import","55e93a8c":"# Fit","ef0bae07":"# Classify"}}