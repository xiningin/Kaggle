{"cell_type":{"3450d32b":"code","c05f7a0a":"code","21c77d78":"code","bc7b036d":"code","9f948662":"code","510b4100":"code","1a45d1e9":"code","c9b0b875":"code","ad51d7fa":"code","8a7d3e87":"code","ad1f26a7":"code","ad0e5694":"markdown","40a90b98":"markdown","9996192e":"markdown"},"source":{"3450d32b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c05f7a0a":"df = pd.read_csv(\"\/kaggle\/input\/homesite-quote-conversion\/train.csv.zip\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/homesite-quote-conversion\/test.csv.zip\")\n","21c77d78":"df = df.drop(\"Original_Quote_Date\", axis = 1)\ndf = df.drop(\"QuoteNumber\", axis = 1)\ndf_test = df_test.drop(\"Original_Quote_Date\", axis = 1)\ndf_test = df_test.drop(\"QuoteNumber\", axis = 1)\n\ndf = df.dropna()\n\nprint (df.shape)\nprint (df_test.shape)","bc7b036d":"#dropping categorical columns with nunique > 2\n\ndef drop_cols_from_list(df,cols_to_delete):\n    df.drop(cols_to_delete,axis=1,inplace=True)\n    return df\n\ncols_to_drop = []\n\nfor i in set(df.columns) - set(df._get_numeric_data().columns):\n    if (df.loc[:,i].nunique() >= 3):\n        cols_to_drop.append(i)\n        \ndf = drop_cols_from_list(df,cols_to_drop)\ndf_test = drop_cols_from_list(df_test,cols_to_drop)\n\n#one hot encoding:\ncls_to_encode = set(df.columns) - set(df._get_numeric_data().columns)\n\ndef ohe(df,cls_to_encode):\n    df = pd.get_dummies(df,columns=cls_to_encode,drop_first=True)\n    return df\n\ndf = ohe(df,cls_to_encode)\ndf_test = ohe(df_test,cls_to_encode)\n\n#dropping any extra columns in test set that are not present in train set\ndf_test.drop(list(set(df_test.columns) - set(df.columns)),axis=1,inplace=True)","9f948662":"import matplotlib.pyplot as plt\n\ncol = \"PersonalField82\"\n\nax = df[['QuoteConversion_Flag', col]].boxplot(by='QuoteConversion_Flag', showfliers=True, figsize=(10, 7))\n\nax.set_xlabel('Conversion')\nax.set_ylabel(col)\nax.set_title(col + \" Distributions by Conversion\")\n\nplt.suptitle(\"\")\nplt.show()","510b4100":"# Conversion rate by ..\n\n\n\nconversions_by_col = df.groupby(col)['QuoteConversion_Flag'].sum() \/ df.groupby(col)['QuoteConversion_Flag'].count() * 100.0\n\nax = conversions_by_col.plot(\n    kind='bar',\n    figsize=(10, 8),\n    title= \"Conversion Rates by \" + col,\n    grid=True,\n    color='coral'\n)\n\nax.set_xlabel(col)\nax.set_ylabel('Conversion Rate (%)')\n\nplt.show()","1a45d1e9":"Y_train = df['QuoteConversion_Flag']\nX_train = df.drop(labels = [\"QuoteConversion_Flag\"], axis = 1)\n\ncolumns_to_drop = [\"PersonalField82\"]\n\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\n\ndec_tree_model = tree.DecisionTreeClassifier(max_depth=8)\nX_train = X_train.drop(columns_to_drop, axis = 1)\ndec_tree_model.fit(X_train, Y_train)\n\nrfc = RandomForestClassifier(n_jobs=-1, n_estimators=10)\nrfc.fit(X_train,Y_train)\n\n# Extract single tree\nestimator = rfc.estimators_[1]\n\nfeatures = list(X_train.columns)\nresponse_var = 'QuoteConversion_Flag'","c9b0b875":"X_train.columns[109]","ad51d7fa":"tree.plot_tree(dec_tree_model)","8a7d3e87":"import graphviz\n\ndot_data = tree.export_graphviz(estimator, feature_names=features, class_names=['0', '1'],\n                                filled=True, rounded=True, special_characters=True) \n\n# Create a visual graph of our tree\ngraph = graphviz.Source(dot_data)","ad1f26a7":"# Display our tree below\nfrom IPython.core.display import display, HTML\ndisplay(HTML(\"<style>text {font-size: 10px;}<\/style>\"))\n\ngraph","ad0e5694":"#### Decision Tree Model","40a90b98":"#### changing the name of the column we can investigare the effect of the feature against the target\n\n* we can use the decision tree below to select main feature and then delete the feature from the training to select a new feature to explore.","9996192e":"#### Tree Visualisation"}}