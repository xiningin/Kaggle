{"cell_type":{"c8325115":"code","b0cc8463":"code","70151d5d":"code","6fb7ef0f":"code","4611a861":"code","c0011a86":"code","f8fdf53c":"code","9e8c557d":"code","fa93bb59":"code","846f9cf8":"code","fe224f2c":"code","cf76862c":"code","1db4675c":"code","56ec3e6a":"code","b4487550":"code","aaf5ced5":"code","08a81c49":"code","45641964":"markdown","f3febc49":"markdown","1322323c":"markdown","5fe658c9":"markdown","e4782c08":"markdown","ca4928b4":"markdown","60e5c201":"markdown","2f8c99da":"markdown","946184b5":"markdown","1ffaea43":"markdown","e421415a":"markdown","5f5a17a5":"markdown","8a1f9720":"markdown","6596c539":"markdown","87a0a4e5":"markdown","6c8c2a16":"markdown"},"source":{"c8325115":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b0cc8463":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\n\nimport re\nfrom keras.preprocessing.text import text_to_word_sequence\nimport nltk\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize \nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n\n#For ignoring warning\nimport warnings\nwarnings.filterwarnings('ignore', category = DeprecationWarning)","70151d5d":"IMDB = pd.read_csv(\"\/kaggle\/input\/imdb-dataset-of-50k-movie-reviews\/IMDB Dataset.csv\")","6fb7ef0f":"# viewing data\nIMDB.head()","4611a861":"print(IMDB.shape)                 \nprint(IMDB.columns)","c0011a86":"IMDB.dtypes","f8fdf53c":"IMDB.isnull().sum()","9e8c557d":"IMDB.describe(include = 'all')","fa93bb59":"sns.countplot(x='sentiment', data= IMDB)\nprint(IMDB.sentiment.value_counts())","846f9cf8":"print(IMDB[\"review\"][3])\nprint(IMDB[\"review\"][1000])","fe224f2c":"# remove \"(<.*?>)\" markup\nIMDB['review'] = IMDB['review'].apply(lambda x: re.sub('(<.*?>)', ' ', x))\n\n# remove punctuation marks \nIMDB['review'] = IMDB['review'].apply(lambda x: re.sub('[,\\.!?:()\"]', '', x))\n    \n# remove whitespace\nIMDB['review'] = IMDB['review'].apply(lambda x: x.strip())\n\n# remove all strings that contain a non-letter\nIMDB['review'] = IMDB['review'].apply(lambda x: re.sub('[^a-zA-Z\"]',' ',x))\n    \n# convert to lower\nIMDB['review'] = IMDB['review'].apply(lambda x: x.lower())\n","cf76862c":"words = IMDB['review'].apply(lambda x: text_to_word_sequence(x))","1db4675c":"stop_words = set(stopwords.words('english'))\nfiltered_words = words.apply(lambda x: [w for w in x if not w in stop_words])\nIMDB['review'] = filtered_words.apply(lambda x: \" \".join(x))","56ec3e6a":"from nltk.stem import WordNetLemmatizer\n  \nlemmatizer = WordNetLemmatizer()\n  \nIMDB['review']=IMDB['review'].apply(lambda x: lemmatizer.lemmatize(x))\n\n","b4487550":"print(IMDB[\"review\"][3])","aaf5ced5":"IMDB.sentiment = IMDB.sentiment.apply(lambda x: 1 if x=='positive' else 0)\n","08a81c49":"from sklearn.pipeline import make_pipeline\nclf = make_pipeline(TfidfVectorizer(), SVC(kernel='linear'))\n\nscores = cross_validate(clf, IMDB[\"review\"], IMDB[\"sentiment\"], scoring=['accuracy'], cv=5)","45641964":"**Lemmatization**","f3febc49":"Lets convert sentiment values to numeric values","1322323c":"**Tokenization**","5fe658c9":"# Training model","e4782c08":"**Pipeline:**\n\nScikit-learn Pipelines are simple yet very useful tool for managing machine learning workflows.\n\n***advantages:***\n\n* clean code\n* few bugs","ca4928b4":"# Data Overview","60e5c201":"# Load Dataset","2f8c99da":"The number of positive and negative sentiment is equal (25000 each) ","946184b5":"The IMDB dataset has 50000 rows and 2 columns.","1ffaea43":"Lets clean the data","e421415a":"**Basic cleaning**","5f5a17a5":"Lets see how the reviews are written. We can imagine it may have lot of punctuations, hyperlinks etc. ","8a1f9720":"**Stop word removal**","6596c539":"# Importing Libraries","87a0a4e5":"**Data Description**:\n\nreview:    review of the movie\n\nsentiment: sentiment for the review, positive or negative","6c8c2a16":"# Data Preprocessing"}}