{"cell_type":{"02581340":"code","c57b290e":"code","88fb0e4a":"code","213a4c66":"code","d54258ea":"code","ebb2d959":"code","6bee3045":"code","3c11f30f":"code","53d3ba2d":"code","7f7e725e":"code","276bbdd8":"code","b7545f2b":"code","f8309206":"code","0dee8ef9":"code","914cfd13":"code","29b91504":"code","4b616c0c":"code","af0de324":"code","94798757":"code","485aa2b5":"code","a86fd13e":"code","d605be50":"code","ad69fdd8":"code","c18f1497":"code","bd7570ac":"code","81e169ed":"markdown","a897dedf":"markdown","b71c64c6":"markdown","7f765c2e":"markdown","76fb5807":"markdown","09e2a4d3":"markdown","aaf9c415":"markdown","ad104e4b":"markdown","3a9684e2":"markdown","48894d9e":"markdown","2947d7fb":"markdown"},"source":{"02581340":"import matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\npokedex = pd.read_csv('..\/input\/complete-pokemon-dataset-updated-090420\/pokedex_(Update_05.20).csv')\npokedex = pokedex.drop(['Unnamed: 0'], axis=1)\npokedex.info()","c57b290e":"pokedex.head()","88fb0e4a":"genCount=pokedex.groupby(\"generation\").size().to_numpy()\nplt.plot(np.arange(1,9),genCount)\nplt.xlabel('Generation')\nplt.ylabel('Count')\nprint('Raw:',genCount)\nprint('Mean:',genCount.mean())\n      ","213a4c66":"ax = sns.countplot(x=\"type_1\", data=pokedex);\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"right\")\nax.set(xlabel='Type 1', ylabel='Count', title='First type');","d54258ea":"null_type_2=pokedex.type_2.isnull().sum()\nnotnull_type_2=pokedex.type_2.size-null_type_2\nplt.pie([null_type_2,notnull_type_2],labels=['Have type 2','Does not have type 2'],autopct='%1.1f%%')","ebb2d959":"bx = sns.countplot(x=\"type_2\", data=pokedex);\nbx.set_xticklabels(bx.get_xticklabels(), rotation=90, ha=\"right\")\nbx.set(xlabel='Type 2', ylabel='Count', title='Second type');","6bee3045":"\nsns.heatmap(pd.crosstab(pokedex.type_1,pokedex.type_2),annot=True)\n","3c11f30f":"sns.distplot(pokedex['height_m'])\nprint('Max height:',pokedex.loc[pokedex['height_m'].idxmax()]['name'])\nprint('Min height:',pokedex.loc[pokedex['height_m'].idxmin()]['name'])","53d3ba2d":"sns.distplot(pokedex['weight_kg'])\nprint('Max weight:',pokedex.loc[pokedex['weight_kg'].idxmax()]['name'])\nprint('Min weight:',pokedex.loc[pokedex['weight_kg'].idxmin()]['name'])","7f7e725e":"data=pokedex[['weight_kg','height_m']].dropna()\nweight=np.log(data['weight_kg'].to_numpy())\nheight=np.log(data['height_m'].to_numpy())\nsns.kdeplot(weight,height)\nplt.xlabel('Log of weight')\nplt.ylabel('Log of height')","276bbdd8":"sx = sns.countplot(x=\"status\", data=pokedex);\nsx.set_xticklabels(sx.get_xticklabels(), rotation=90, ha=\"right\")\nsx.set(xlabel='Status', ylabel='Count', title='Status');\nprint('Raw:',pokedex.groupby('status').size())","b7545f2b":"STATS_CATEGORIES = [\"hp\", \"attack\", \"defense\", \"sp_attack\", \"sp_defense\", \"speed\"]\npokedex[STATS_CATEGORIES].describe()\n","f8309206":"\nfor each in STATS_CATEGORIES:\n    sns.distplot(pokedex[each])\nplt.legend(STATS_CATEGORIES)\nplt.xlabel('Refer Legend')","0dee8ef9":"sns.distplot(pokedex['total_points'])","914cfd13":"for colm in STATS_CATEGORIES:\n    print('Max',colm,':',pokedex.loc[pokedex[colm].idxmax()]['name'])\n    print('Min',colm,':',pokedex.loc[pokedex[colm].idxmin()]['name'])","29b91504":"for each in STATS_CATEGORIES:\n    print('----',each,'----')\n    print(pokedex.groupby('status')[each].mean())\n\nprint('---- Total Points ----')\nprint(pokedex.groupby('status')['total_points'].mean())","4b616c0c":"sns.heatmap(pd.pivot_table(pokedex,values=STATS_CATEGORIES,columns='status'),annot=True,fmt='.1f')","af0de324":"sns.heatmap(pokedex.groupby('type_1')[STATS_CATEGORIES].mean(),annot=True)\n","94798757":"null_type_2=pokedex.percentage_male.isnull().sum()\nnotnull_type_2=pokedex.percentage_male.size-null_type_2\nplt.pie([notnull_type_2,null_type_2],labels=['Have gender','Does not have gender'],autopct='%1.1f%%')","485aa2b5":"pokedex.groupby('status').percentage_male.count().plot.bar()\nplt.ylabel('Has gender')","a86fd13e":"plt.bar(['Normal','Sub Legendary'],[pokedex[pokedex['status'].isin(['Normal'])].percentage_male.mean(),pokedex[pokedex['status'].isin(['Sub Legendary'])].percentage_male.mean()])\nplt.xlabel('Status')\nplt.ylabel('Percentage Male')","d605be50":"pokedex.groupby('status').catch_rate.describe()","ad69fdd8":"pokedex.groupby('status').catch_rate.mean().plot.bar()\nplt.ylabel('Mean Catch Rate')","c18f1497":"pokedex.groupby(['status','growth_rate']).pokedex_number.count()","bd7570ac":"sns.heatmap(pd.crosstab(pokedex.status,pokedex.growth_rate).apply(lambda r: r\/r.sum()*100, axis=1),annot=True)","81e169ed":"Sources:\n\nhttps:\/\/en.wikipedia.org\/wiki\/Pok%C3%A9mon\n\nhttps:\/\/www.kaggle.com\/mariotormo\/complete-pokemon-dataset-updated-090420","a897dedf":"Genders","b71c64c6":"Analysing height and weight of pokemons","7f765c2e":"Checking pokemon status (normal,legendary,mythical,semi-legendary)","76fb5807":"Stats","09e2a4d3":"Analysing generations","aaf9c415":"Analysing types","ad104e4b":"**CASE STUDY: ANALYSIS OF POKEMON DATASET**\n\nBy:\n\nIU1841230056 - Ved Suthar\n\nIU1841230037 - Jiten Parmar\n\n---\n\nIntroduction:\n\nPok\u00e9mon,also known as Pocket Monsters in Japan, is a Japanese media franchise managed by the Pok\u00e9mon Company, a company founded by Nintendo, Game Freak, and Creatures.\n\nIn this franchise, there are Pokemon or mons for short, which have different abilities.\n\n\n---\n**Analysis starts from here**","3a9684e2":"Analysing growth rate","48894d9e":"Analysing catch rate","2947d7fb":"Importing libraries and setting data into variable"}}