{"cell_type":{"400d1e30":"code","f40f872e":"code","030dd17e":"code","141dadeb":"code","2aedd287":"code","6762a4fc":"code","f1058f60":"code","1a5754cd":"code","2c164370":"code","4b9349c1":"code","d0050898":"code","ab31f804":"code","4251edd7":"code","44b809ba":"code","df5b5391":"code","de70970b":"code","1762c440":"code","dd5b00c8":"code","23cc17c6":"code","709da207":"code","70f3da80":"code","3fa4c218":"code","155b66d1":"code","5fd5fd2b":"code","58abfebf":"code","4e64b30a":"code","2282ab77":"code","4e546a3e":"code","24c24394":"code","93c424ef":"code","78e0954e":"code","0c85ad3b":"markdown","54a351ec":"markdown","868d23ae":"markdown","8722e942":"markdown","80453a92":"markdown","e85515e9":"markdown"},"source":{"400d1e30":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom kerastuner.tuners import RandomSearch\nfrom tensorflow.keras.models import Sequential,Model\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import MaxPool2D\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport matplotlib.pyplot as plt","f40f872e":"!pip install tensorflow","030dd17e":"!pip install -U keras-tuner","141dadeb":"print(tf.__version__)\nif tf.test.gpu_device_name():\n    print('Default GPU Device: {}'.format(tf.test.gpu_device_name()))\nelse:\n    print(\"Please install GPU version of TF\")","2aedd287":"train_datagenerator = ImageDataGenerator(rescale = 1.0\/255,\n                                        shear_range = 0.2,\n                                        zoom_range = 0.5,\n                                        horizontal_flip = True,\n                                        rotation_range=10,\n                                        width_shift_range=0.2,\n                                        brightness_range=[0.2,1.2]\n                                        )\ntest_datagenerator = ImageDataGenerator(rescale = 1.0\/255)","6762a4fc":"train_data = train_datagenerator.flow_from_directory('..\/input\/cotton-disease-dataset\/Cotton Disease\/train',\n                                                    target_size = (256,256),\n                                                    batch_size = 32,\n                                                    class_mode = 'categorical')","f1058f60":"test_data = test_datagenerator.flow_from_directory('..\/input\/cotton-disease-dataset\/Cotton Disease\/val',\n                                                  target_size = (256,256),\n                                                    batch_size = 32,\n                                                    class_mode = 'categorical')","1a5754cd":"\"\"\"\nCreating CNN model from Scratch.\n\"\"\"\ncnn = tf.keras.models.Sequential()\n# Convolution \ncnn.add(tf.keras.layers.Conv2D(filters=64,padding = \"same\",kernel_size=3,activation='relu',input_shape=[256,256,3]))\ncnn.add(tf.keras.layers.Conv2D(filters=32,padding = \"same\",kernel_size=3,activation='relu'))\n# pooling\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2,strides=2))\n# Convolution\ncnn.add(tf.keras.layers.Conv2D(filters=16,padding = \"same\",kernel_size=3,activation='relu'))\ncnn.add(tf.keras.layers.Conv2D(filters=16,padding = \"same\",kernel_size=3,activation='relu'))\n#pooling\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2,strides=2))\n\n#flaterning\ncnn.add(tf.keras.layers.Flatten())\ncnn.add(tf.keras.layers.Dense(units=128,activation='relu'))\ncnn.add(tf.keras.layers.Dense(units=128,activation='relu'))\n# Output layer\ncnn.add(tf.keras.layers.Dense(units=4,activation='softmax'))","2c164370":"cnn.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","4b9349c1":"history = cnn.fit(x = train_data, validation_data = test_data, epochs = 20)","d0050898":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","ab31f804":"from tensorflow.keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.applications.vgg16 import preprocess_input\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.layers import Dense\nfrom glob import glob","4251edd7":"Image_size = [224,224]\n\ntrain_path = '..\/input\/cotton-disease-dataset\/Cotton Disease\/train'\ntest_path = '..\/input\/cotton-disease-dataset\/Cotton Disease\/test'","44b809ba":"vgg16 = VGG16(input_shape = Image_size + [3], weights = 'imagenet', include_top = False)","df5b5391":"vgg16.summary()","de70970b":"# freez the pretrained structure\nfor layer in vgg16.layers:\n    layer.trainable = False","1762c440":"number_of_classes = glob('..\/input\/cotton-disease-dataset\/Cotton Disease\/train\/*')\nnumber_of_classes","dd5b00c8":"flatten_layer = Flatten()(vgg16.output)","23cc17c6":"output_layer = Dense(len(number_of_classes),activation = 'softmax')(flatten_layer)","709da207":"vgg16_model = Model(inputs = vgg16.input,outputs = output_layer)","70f3da80":"vgg16_model.summary()","3fa4c218":"vgg16_model.compile(loss= 'categorical_crossentropy',\n                   optimizer = 'adam',\n                   metrics = ['accuracy'])","155b66d1":"\ntrain_data = train_datagenerator.flow_from_directory('..\/input\/cotton-disease-dataset\/Cotton Disease\/train',\n                                                    target_size = (224,224),\n                                                    batch_size = 32,\n                                                    class_mode = 'categorical')\ntest_data = test_datagenerator.flow_from_directory('..\/input\/cotton-disease-dataset\/Cotton Disease\/test',\n                                                    target_size = (224,224),\n                                                    batch_size = 32,\n                                                    class_mode = 'categorical')","5fd5fd2b":"history = vgg16_model.fit_generator(train_data,validation_data= test_data,epochs = 6,\n                                   steps_per_epoch=len(train_data),validation_steps=len(test_data))","58abfebf":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","4e64b30a":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout, Flatten,\\\n Conv2D, MaxPooling2D\nfrom keras.layers.normalization import BatchNormalization\nimport numpy as np","2282ab77":"\"\"\"\nBuilding AlexNet Model.\n\"\"\"\nmodel = Sequential()\n# Block 1\nmodel.add(Conv2D(filters=96, input_shape=(224,224,3), kernel_size=(11,11),strides=(4,4), padding='valid'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2), padding='valid'))\nmodel.add(BatchNormalization())\n# Block 2\nmodel.add(Conv2D(filters=256, kernel_size=(11,11), strides=(1,1), padding='valid'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2), padding='valid'))\nmodel.add(BatchNormalization())\n# Block 3\nmodel.add(Conv2D(filters=384, kernel_size=(3,3), strides=(1,1), padding='valid'))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\n# Block 4\nmodel.add(Conv2D(filters=384, kernel_size=(3,3), strides=(1,1), padding='valid'))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\n# Block 5\nmodel.add(Conv2D(filters=256, kernel_size=(3,3), strides=(1,1), padding='valid'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2), padding='valid'))\nmodel.add(BatchNormalization())\n# Flattening\nmodel.add(Flatten())\n# Dense Layer block 1\nmodel.add(Dense(4096, input_shape=(224*224*3,)))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.4)) # Add Dropout to prevent overfitting\nmodel.add(BatchNormalization())\n# Dense Layer block 2\nmodel.add(Dense(4096))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.4))\nmodel.add(BatchNormalization())\n# Dense Layer block 3\nmodel.add(Dense(1000))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.4))\nmodel.add(BatchNormalization())\n# Additional dense\nmodel.add(Dense(128))\nmodel.add(Activation('relu'))\n# Output Layer\nmodel.add(Dense(4))\nmodel.add(Activation('softmax'))","4e546a3e":"model.summary()","24c24394":"model.compile(loss='categorical_crossentropy', optimizer='adam',metrics=['accuracy'])\n\nhistory = model.fit_generator(train_data,validation_data=test_data,epochs = 10,\n                                   steps_per_epoch=len(train_data),validation_steps=len(test_data))","93c424ef":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","78e0954e":"import numpy as np\nfrom tensorflow.keras.preprocessing import image\npredictions = [\"diseased cotton leaf\",\"diseased cotton plant\",\"fresh cotton leaf\",\"fresh cotton plant\"]\ntest_image = image.load_img('..\/input\/cotton-disease-dataset\/Cotton Disease\/val\/fresh cotton leaf\/d (26)_iaip.jpg', target_size = (224,224))\ntest_image = image.img_to_array(test_image)\ntest_image=test_image\/255\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = model.predict(test_image)\npredictions[result.argmax()]","0c85ad3b":"## AlexNet","54a351ec":"I have used the three classic Convolution neural network models:\n\n1) CNN from Stratch ( with accuracy 91.3%)\n\n2) VGG16 ( with accuracy 95.28%)\n\n3) AlexNet ( Not showing that much good accuracy)\n\nThough these accuracies can be modified by tweaking up the architecture.\n\n### More modifications to come:\n\nAdding ResNet & InceptionNet aswell.","868d23ae":"  ## VGG16","8722e942":"* ## Please upvote if you like the notebook and comment your suggestion which models should be added.","80453a92":"## Generating Data","e85515e9":"## CNN Implementation"}}