{"cell_type":{"36a10b34":"code","f74464b9":"code","a95d5a1e":"code","18b93d4b":"code","5b43d673":"code","7819d46a":"code","21aaf18c":"code","16c47010":"code","1fc6dd09":"code","c1886cb6":"code","09f1b443":"code","a682671a":"code","b740e909":"code","dea7080a":"code","dc9020ba":"code","632dfe89":"code","28da2ff8":"code","de0c1040":"code","81c4a8ec":"code","43abd729":"code","f808520f":"code","10ed4fd4":"code","fe0081ae":"code","c44e21cd":"code","058b107c":"markdown","cdd95655":"markdown","15361b46":"markdown","bf64922b":"markdown","c1d64247":"markdown","7f9d65aa":"markdown","ff8cc34b":"markdown","9359eedb":"markdown"},"source":{"36a10b34":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport numpy as np \nimport pandas as pd \nfrom sklearn import model_selection\nfrom sklearn.metrics import accuracy_score\nfrom collections import Counter\nimport keras\nfrom keras.models import Sequential \nfrom keras.layers import Activation, MaxPooling1D, Dropout, Flatten, Reshape, Dense, Conv1D, LSTM,SpatialDropout1D\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers import Dense\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import cross_val_score\nimport seaborn as sns\nimport os\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom sklearn.metrics import precision_score, recall_score, accuracy_score, balanced_accuracy_score, f1_score\nfrom sklearn.model_selection import train_test_split\nfrom random import randrange\nfrom random import seed\nfrom random import random\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sklearn.metrics as metrics\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.utils.multiclass import unique_labels\nimport seaborn as sns\nimport pickle\nfrom sklearn.metrics import precision_score, recall_score, accuracy_score, balanced_accuracy_score, f1_score\nimport os\nimport sys\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f74464b9":"def convert_to_array(arr):\n    print(type(arr))\n    arr = arr.replace('[', '') #.replace(']', '').split()\n    #arr = np.reshape(np.array(arr.replace('[', '').replace(']', '').split()).astype(float), (64,64))\n    return arr","a95d5a1e":"np.set_printoptions(threshold=sys.maxsize)\nimport pandas as pd\ndf = pd.read_csv(\"\/kaggle\/input\/labeled-frames-2d\/labeled_frames.csv\", error_bad_lines=False)\nprint(df.shape)\ndf.head()\n","18b93d4b":"#print(df['Image'][0])","5b43d673":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\ndf['Phoneme'] = labelencoder.fit_transform(df['Phoneme'])\nlabels = np.asarray(df[['Phoneme']].copy())\ndf = df.drop(df.columns[0], axis = 1)\ndf.head()","7819d46a":"print(type(df[\"Image\"][0]))","21aaf18c":"def convert_to_array(arr):\n    print(type(arr))\n    arr = arr.replace('[', '') #.replace(']', '').split()\n    #arr = np.reshape(np.array(arr.replace('[', '').replace(']', '').split()).astype(float), (64,64))\n    return arr\n","16c47010":"for index, row in df.iterrows():\n    #row[0] = row[0].replace('[', '') .replace(']', '')\n    #print(index)\n    row[0] = np.reshape(np.stack(row[0].replace('[', '').replace(']', '').split()).astype(float), (64,64))","1fc6dd09":"df.head()","c1886cb6":"df.shape","09f1b443":"#df['Image'] = df['Image'].apply(convert_to_array)\n#df.head","a682671a":"print(df['Image'][0].shape)\n\nprint(type(df['Image'][0]))","b740e909":"d = {}\nfor index, row in df.iterrows():\n    d[index] = np.array(row[0])\n\n","dea7080a":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(d.values(), labels, random_state = 42, test_size = 0.2, stratify = labels)\nprint(X_train.shape)\n","dc9020ba":"X_train, y_train = train_test_split(d.values(), random_state = 42, test_size = 0.2, stratify = labels)\n","632dfe89":"X_train = tf.reshape(X_train, (8113, 64, 64, 1))\nX_test = tf.reshape(X_test, (2029, 64, 64, 1))","28da2ff8":"model = Sequential()\nmodel.add(Conv2D(filters= 128, kernel_size=(3,3), activation ='relu',strides = (2,2), padding = 'valid', input_shape= (8113, 64,64,1)))\nmodel.add(MaxPooling2D(pool_size=(2,2))\n\nmodel.add(Dropout(0.5))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(39)) \nmodel.add(Activation('softmax'))\n\noptimizer = keras.optimizers.Adam(lr=0.01)\n\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n\nhistory = model.fit(X_train,y_train, epochs = 1000, batch_size = 32, validation_data = (X_test, y_test), shuffle = True)","de0c1040":"#df.head()\n#we have removed the labels column and all that remains is the image arrays","81c4a8ec":"#print(X_train[\"Image\"][0].shape)\n#this is the first array as an example\n#the dataframe currently stores numpy arrays with 64 by 64 dimension\n","43abd729":"#X_train = tf.reshape(X_train, (8113, 64, 64, 1))\n#X_test = tf.reshape(X_test, (2029, 64, 64, 1))\n#print(X_train.shape)\n#print(\"done\")\n","f808520f":"def plot_acc(h):\n\n    plt.plot(h.history['accuracy'])\n    plt.plot(h.history['val_accuracy'])\n\n    plt.title('model accuracy')\n    plt.ylabel('accuracy and loss')\n    plt.xlabel('epoch')\n\n    plt.legend(['acc', 'val acc' ], loc='upper left')\n    plt.show()\n\ndef plot_loss(h):\n    plt.plot(h.history['loss'][5:])\n    plt.plot(h.history['val_loss'][5:])\n    plt.title('model loss')\n    plt.ylabel('accuracy and loss')\n    plt.xlabel('epoch')\n\n    plt.legend(['loss', 'val loss' ], loc='upper left')\n    plt.show()","10ed4fd4":"plot_acc(history)\nplot_loss(history)","fe0081ae":"preds = model.predict_classes(X_test)\nprint(\"Accuracy = {}\".format(accuracy_score(y_test, preds)))\nprint(\"Balanced Accuracy = {}\".format(balanced_accuracy_score(y_test, preds)))\nprint(\"Precision = {}\".format(precision_score(y_test, preds, average='macro')))\nprint(\"Recall = {}\".format(recall_score(y_test, preds, average='macro')))\nprint(\"F1 = {}\".format(f1_score(y_test, preds, average='weighted')))","c44e21cd":"model_json = model.to_json()\nwith open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)\nmodel.save_weights(\"model.h5\")","058b107c":"Extracting the labels and encoding them","cdd95655":"our data in a csv file: each phoneme corresponds to an image that is represented by an array","15361b46":"Our CNN architecture","bf64922b":"train_split_test data:","c1d64247":"converting the arrays inside the dataframe to numpy arrays","7f9d65aa":"> > * **Here is our problem: we want our data to have a shape of (8113, 64, 64) but due to the dataframe it stays as (8113)**","ff8cc34b":"model = Sequential()\nmodel.add(Conv2D(filters= 128, kernel_size=(3,3), activation ='relu',strides = (2,2), padding = 'valid', input_shape= (8113, 64,64,1)))\nmodel.add(MaxPooling2D(pool_size=(2,2))\n\nmodel.add(Dropout(0.5))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(39)) \nmodel.add(Activation('softmax'))\n\noptimizer = keras.optimizers.Adam(lr=0.01)\n\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n\nhistory = model.fit(X_train,y_train, epochs = 1000, batch_size = 32, validation_data = (X_test, y_test), shuffle = True)","9359eedb":"X_train, X_test, y_train, y_test = train_test_split(df, labels, random_state = 42, test_size = 0.2, stratify = labels)\nprint(X_train.shape)\nprint(X_test.shape)"}}