{"cell_type":{"327fd98a":"code","6b0fed5e":"code","b4257149":"code","603af3ae":"code","2bbea531":"code","0571c2c3":"code","a5ecc688":"code","d93d20b0":"code","bdd59ad3":"code","5d9b1ca4":"code","66e42e5b":"code","022348fc":"code","e76206de":"code","9097c3ca":"code","e8cbb863":"markdown","cf16e240":"markdown","d6fbb8f3":"markdown","62c4ceb2":"markdown","06920ec4":"markdown","6a8b790c":"markdown","9fdc45ed":"markdown","92cf32b2":"markdown","4e914cf3":"markdown","7c04ab58":"markdown","56f487af":"markdown","116dddca":"markdown"},"source":{"327fd98a":"import os\nimport shutil\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.layers import Dense, Activation,Dropout, MaxPooling2D,BatchNormalization\nfrom tensorflow.keras.optimizers import Adam, Adamax\nfrom tensorflow.keras.metrics import categorical_crossentropy\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Model, load_model\nimport numpy as np\nimport time\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'\nimport logging\nlogging.getLogger(\"tensorflow\").setLevel(logging.ERROR)\nprint ('modules loaded')","6b0fed5e":"img_path=r'..\/input\/iris-of-eye-dataset\/our_data\/Ahmed Amr\/0.jpg'\nimg=plt.imread(img_path)\nprint ('Image shape is: ', img.shape)\nplt.axis('off')\nplt.imshow(img)","b4257149":"sdir=r'..\/input\/iris-of-eye-dataset\/our_data'\nclasslist=os.listdir(sdir)\nlabels=[]\nfilepaths=[]\nfor klass in classlist:\n    classpath=os.path.join(sdir, klass)\n    flist=os.listdir(classpath)\n    for f in flist:\n        fpath=os.path.join(classpath,f)\n        filepaths.append(fpath)\n        labels.append(klass)\nFseries=pd.Series(filepaths, name='filepaths')\nLseries = pd.Series(labels, name='labels')\ndf=pd.concat([Fseries, Lseries], axis=1)\nclass_count=len(list(df['labels'].unique()))\nprint('Number of classes in dataset is ', class_count)","603af3ae":"train_df, dummy_df =train_test_split(df, train_size=.9, shuffle=True, random_state=123, stratify= df['labels'])\nvalid_df, test_df = train_test_split(dummy_df, train_size=.5, shuffle=True, random_state=123, stratify =dummy_df['labels'])\nprint('train_df length: ', len(train_df), '  test_df length: ',len(test_df), '  valid_df length: ', len(valid_df))\nprint (train_df['labels'].value_counts())","2bbea531":"img_size = (50,50)\nworking_dir = sdir","0571c2c3":"\nbatch_size= 40\n# calculate test_batch_size and test_step so we go through test files exactly once\nlength=len(test_df)\ntest_batch_size=sorted([int(length\/n) for n in range(1,length+1) if length % n ==0 and length\/n<=80],reverse=True)[0]  \ntest_steps=int(length\/test_batch_size)\nprint ('test batch size= ', test_batch_size, '  test steps= ', test_steps)\ntrgen=ImageDataGenerator(horizontal_flip=True)\ntvgen=ImageDataGenerator()\ntrain_gen=trgen.flow_from_dataframe(train_df, x_col='filepaths', y_col='labels', target_size=img_size, class_mode='categorical',\n                                    color_mode='rgb', shuffle=True, batch_size=batch_size)\nvalid_gen=tvgen.flow_from_dataframe(valid_df, x_col='filepaths', y_col='labels', target_size=img_size, class_mode='categorical',\n                                    color_mode='rgb', shuffle=True, batch_size=batch_size)\ntest_gen=tvgen.flow_from_dataframe(test_df, x_col='filepaths', y_col='labels', target_size=img_size, class_mode='categorical',\n                                    color_mode='rgb', shuffle=False, batch_size=test_batch_size)\n","a5ecc688":"img_shape=(img_size[0], img_size[1], 3)\nmodel_name='EfficientNetB3'\nbase_model=tf.keras.applications.efficientnet.EfficientNetB3(include_top=False, weights=\"imagenet\",input_shape=img_shape, pooling='max') \nx=base_model.output\nx=keras.layers.BatchNormalization(axis=-1, momentum=0.99, epsilon=0.001 )(x)\nx = Dense(256, kernel_regularizer = regularizers.l2(l = 0.016),activity_regularizer=regularizers.l1(0.006),\n                bias_regularizer=regularizers.l1(0.006) ,activation='relu')(x)\nx=Dropout(rate=.45, seed=123)(x)        \noutput=Dense(class_count, activation='softmax')(x)\nmodel=Model(inputs=base_model.input, outputs=output)\nmodel.compile(Adamax(learning_rate=.001), loss='categorical_crossentropy', metrics=['accuracy']) ","d93d20b0":"class SOMT(keras.callbacks.Callback):\n    def __init__(self, model,  train_thold, valid_thold):\n        super(SOMT, self).__init__()\n        self.model=model        \n        self.train_thold=train_thold\n        self.valid_thold=valid_thold\n        \n    def on_train_begin(self, logs=None):\n        print('Starting Training - training will halt if training accuracy achieves or exceeds ', self.train_thold)\n        print ('and validation accuracy meets or exceeds ', self.valid_thold) \n            \n    def on_train_batch_end(self, batch, logs=None):\n        acc=logs.get('accuracy')* 100  # get training accuracy \n        loss=logs.get('loss')\n        msg='{0:1s}processed batch {1:4s}  training accuracy= {2:8.3f}  loss: {3:8.5f}'.format(' ', str(batch),  acc, loss)\n        print(msg, '\\r', end='') # prints over on the same line to show running batch count       \n        \n    def on_epoch_end(self,epoch, logs=None):             \n        tacc=logs.get('accuracy')           \n        vacc=logs.get('val_accuracy')\n        print(f'for epoch {epoch+1} training accuracy = {tacc:6.4f} and validation accuracy = {vacc:6.3f}')\n        if tacc>= self.train_thold and vacc>= self.valid_thold:\n            print( f'\\ntraining accuracy and validation accuracy both reached their thresholds on epoch {epoch + 1}' )\n            self.model.stop_training = True # stop training","bdd59ad3":"rlronp=tf.keras.callbacks.ReduceLROnPlateau( monitor=\"val_loss\", factor=0.5,   patience=1,  verbose=1)\nestop=tf.keras.callbacks.EarlyStopping( monitor=\"val_loss\",   patience=4,  verbose=1,   restore_best_weights=True)\nepochs=40\ntrain_thold=.95\nvalid_thold=.99\ncallbacks=[rlronp, estop, SOMT( model,train_thold, valid_thold)]   \n","5d9b1ca4":"history=model.fit(x=train_gen,  epochs=epochs, verbose=0, callbacks=callbacks,  validation_data=valid_gen,\n               validation_steps=None,  shuffle=False,  initial_epoch=0)","66e42e5b":" acc= model.evaluate(test_gen, verbose= 1,  steps=test_steps)[1]  *100 \n print(f'Model accuracy on test set is {acc:6.2f}')","022348fc":"working_dir=r'.\/'\nsave_path=os.path.join(working_dir, 'EfficientNetB3.h5')\nmodel.save(save_path, overwrite=True, include_optimizer=True, save_format='h5')","e76206de":"from sklearn.metrics import confusion_matrix, classification_report\nimport seaborn as sns\nsns.set_style('darkgrid')\nclasses=list(train_gen.class_indices.keys())\nclass_count=len(classes)\nlabels=test_gen.labels\nfiles=test_gen.filenames\nerror_file_list=[]\nindexes=[]\nerrors=0\npreds=model.predict(test_gen, steps=test_steps, verbose=1)\ntests=len(preds)\nfor i, p in enumerate (preds):\n    index=np.argmax(p) \n    indexes.append(index)\n    if index != labels[i]:\n        errors +=1\n        error_file_list.append(files[i])\nacc=( tests-errors)\/tests * 100\nprint(f'There were {errors}, errors in {tests} tests for an accuracy of {acc:6.2f} %' )\nif errors > 0:\n    print ('A list of files that were incorrectly predicted is shown below')\n    for i in range (len(error_file_list)):\n        print (error_file_list[i])\n\nclr = classification_report(labels, indexes, target_names=classes, digits= 4)\nprint(\"Classification Report:\\n----------------------\\n\", clr)\ncm = confusion_matrix(labels, indexes )        \nlength=len(classes)\nif length<8:\n    fig_width=8\n    fig_height=8\nelse:\n    fig_width= int(length * .5)\n    fig_height= int(length * .5)\nplt.figure(figsize=(fig_width, fig_height))\nsns.heatmap(cm, annot=True, vmin=0, fmt='g', cmap='Blues', cbar=False)       \nplt.xticks(np.arange(length)+.5, classes, rotation= 90)\nplt.yticks(np.arange(length)+.5, classes, rotation=0)\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.title(\"Confusion Matrix\")\nplt.show()\n","9097c3ca":"import cv2\nimg=plt.imread(img_path) # read in the image shown earlier\nprint ('Input image shape is ', img.shape)\n# resize the image so it is the same size as the images the model was trained on\nimg=cv2.resize(img, img_size) # in earlier code img_size=(150,150) was used for training the model\nprint ('the resized image has shape ', img.shape)\n### show the resized image\nplt.axis('off')\nplt.imshow(img)\n# Normally the next line of code rescales the images. However the EfficientNet model expects images in the range 0 to 255\n# img= img\/255\n# plt.imread returns a numpy array so it is not necessary to convert the image to a numpy array\n# since we have only one image we have to expand the dimensions of img so it is off the form (1,150,150,3)\n# where the first dimension 1 is the batch size used by model.predict\nimg=np.expand_dims(img, axis=0)\nprint ('image shape after expanding dimensions is ',img.shape)\n# now predict the image\npred=model.predict(img)\nprint ('the shape of prediction is ', pred.shape)\n# this dataset has 15 classes so model.predict will return a list of 15 probability values\n# we want to find the index of the column that has the highest probability\nindex=np.argmax(pred[0])\n# to get the actual Name of the class earlier Imade a list of the class names called classes\nklass=classes[index]\n# lets get the value of the highest probability\nprobability=pred[0][index]*100\n# print out the class, and the probability \nprint(f'the image is predicted as being {klass} with a probability of {probability:6.2f} %')","e8cbb863":"## Define an early stop callback and a reduce learning rate callback and instantiate the ASK callback","cf16e240":"## save the model","d6fbb8f3":"## evaluate model on the test set","62c4ceb2":"## input an image and get the shape","06920ec4":"## train_df is  balanced ","6a8b790c":"## create a dataframe of the form filepaths(path to the image file), labels (label of the file)","9fdc45ed":"## do predictions on the test set and generate classification report","92cf32b2":"## Use transfer learning with EfficientNetB3 model","4e914cf3":"## How to do predictions on a single image file","7c04ab58":"## train the model ","56f487af":"# split df into a train_df, a test_df and a valid df","116dddca":"The SOMT callback is useful to end training based on the value of the training accuracy or the validation loss or both.\nSOMT stands for stop on metrics threshold. The form of use is\ncallbacks=[SOMT(model, train_thold, valid_thold)] where\n* model is the name of your complied model\n* train_thold is a float. It is the value of accuracy (in Percent) that must be achieved by the model in order to conditionally\n  stop training\n* valid_threshold is a float. It is the value of validation accuracy (in Percent) that must be achieved by the model in order to conditionally\n  stop training\n  \n  Note to stop training both the train_thold and valid_thold must BOTH be exceeded in the SAME epoch. If you want to stop training based\n  soley on the training accuracy set the valid_thold to 0.0. Similarly if you want to stop training on just validation accuracy set\n  train_thold= 0.0. Note if both thresholds are not achieved in the same epoch training will continue until the value of epochs set in\n  model.fit is reached. \n  For example lets take the case that you want to stop training when the training accuracy has reached or exceeded 95 % and the validation\n  accuracy has achieved at least 85% then the code would be\n  callbacks=[SOMT(my_model, 95, 85)]"}}