{"cell_type":{"3206467f":"code","f4dd393e":"code","98c913b5":"code","7484b9bc":"code","86719558":"code","bca96fe7":"code","f607c27a":"code","8ceaf232":"code","baf9318c":"code","05535b91":"code","e4e5b13e":"code","d9ad2c7a":"code","221a84be":"code","1f6c2521":"code","76164d96":"code","2237ae65":"code","0ee6da85":"code","c7fabd7f":"code","4f08869c":"code","7402aea4":"code","cb643a6c":"code","d9653fa5":"code","31492aaf":"code","a4b74759":"markdown","7bb983f2":"markdown","9f40fb11":"markdown","2c88ca25":"markdown","8366622e":"markdown","b47c30cd":"markdown","ea853aeb":"markdown","c3427f0c":"markdown","5778fa53":"markdown","4a57d989":"markdown","75280f1e":"markdown","630dac8f":"markdown","beb4382f":"markdown","7e48e35c":"markdown","abccaa5f":"markdown"},"source":{"3206467f":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","f4dd393e":"# Too slow.  Need optimize dtypes first\n# chunksize = 100000\n# chunks = []\n# for chunk in pd.read_csv('..\/input\/train.csv', chunksize=chunksize, low_memory=False):\n#     chunks.append(chunk)\n# df = pd.concat(chunks, axis=0)","98c913b5":"subset = pd.read_csv('..\/input\/train.csv', chunksize=10000)","7484b9bc":"type(subset)","86719558":"subset_df= pd.DataFrame(subset.get_chunk(10000))","bca96fe7":"subset_df.head()","f607c27a":"subset_df.info(memory_usage='deep')","8ceaf232":"for dtype in ['float64', 'int64', 'object']:\n    print('Average memory usage for {}: {} MB'.format(dtype, format(subset_df.select_dtypes([dtype]).memory_usage(deep = True).mean()\/1024**2,'.2f')))","baf9318c":"def get_memoryUsage(df):\n    dtype_lst = list(df.get_dtype_counts().index)\n    for dtype in dtype_lst:\n        print('Total memory usage for {}: {} MB'.format(dtype, format(df.select_dtypes([dtype]).memory_usage(deep = True).sum()\/1024**2,'.5f')))\n    \n    print('\\n' + 'Total Memory Usage: {} MB'.format(format(df.memory_usage(deep=True).sum()\/1024**2, '.2f')))","05535b91":"get_memoryUsage(subset_df)","e4e5b13e":"def downcast_Numeric(df):\n    for col in df.select_dtypes(['int64']):\n        df[col] = pd.to_numeric(df[col], downcast = 'unsigned')\n    for col in df.select_dtypes(['float64']):\n        df[col] = pd.to_numeric(df[col], downcast = 'float')","d9ad2c7a":"downcast_Numeric(subset_df)","221a84be":"get_memoryUsage(subset_df)","1f6c2521":"subset_df.select_dtypes(['object']).describe()","76164d96":"def downcast_Obj(df):\n    for col in df.select_dtypes(['object']):\n        if df[col].nunique() < len(df[col])\/2:\n            df[col] = df[col].astype('category')","2237ae65":"downcast_Obj(subset_df)","0ee6da85":"subset_df.info(memory_usage='deep')","c7fabd7f":"get_memoryUsage(subset_df)","4f08869c":"dtype_dict = {}\nfor col in subset_df.columns:\n    dtype_dict[col] = subset_df[col].dtypes\n    \ndtype_dict['GeoNameIdentifier']= np.dtype(np.float32)","7402aea4":"train_df = pd.read_csv('..\/input\/train.csv', dtype=dtype_dict)","cb643a6c":"get_memoryUsage(train_df)","d9653fa5":"test_df = pd.read_csv('..\/input\/test.csv', dtype = dtype_dict)","31492aaf":"get_memoryUsage(test_df)","a4b74759":"### 2 - Optimizing Memory Usage\nSince we'll be looking at memory usage a lot, I wrote a function to get a detailed list memory usage for each data type as well as total memory usage.","7bb983f2":"We see that all but one of the object features got converted to a category, the one hold out being the MachineIdentifier.  In addition, the total memory usage has decreased to 2.98 MB, about an 85% decrease in memory usage.  ","9f40fb11":"### 3 - Loading the Whole Data Set\nNow that we have a good idea what data type each feature should be for optimal memory efficiency, we can use this knowledge to load in the full data set.  Panda's read_csv() function has takes an argument, dtype, where you input a dictionary of feature name and the associated data type you want to convert to.  For whatever reason, if I don't set GeoNameIdentifier to a float, I get the error 'pandas Integer column has NA values'.  Integers can't handle null values, but floats can (it gets converted to np.nan).  After loading the whole data set, I can dive into that deeper and hopefully convert it to a more appropriate data type.","2c88ca25":"When using the chunksize argument in the read_csv function, pandas spits out something called TextFileReader.  The simplest way to get this chunk into a dataframe is to use the get_chunk() function and pass it into pd.DataFrame().  The number inside get_chunk indicates how many rows from the chunksize you want to convert into a dataframe.","8366622e":"#### 1.2 - Quick Peak at Memory Usage\nNormally at this point, I'd look at the column names and see if the competition has identified any key columns.  However, in this post, I'd like to stick with just loading the dataset and optimizing the memory usage.\n\nAccording to Josh, the info() function only gives an approximate memory usage number.  To get a more accurate number, set the argument memory_usage='deep'.  In this case, it is a difference between pandas displaying 6.3 MB+ and 22.4 MB.  In addition, there are 53 numeric columns (float and int) and 30 object columns, for a total of 83 columns and 10,000 rows.\n","b47c30cd":"As you can see, the floats turned into float 32 and there are two types of unsigned ints.  In addition, the memory usage for numeric features decreased by a whopping 90+%, but the total memory usage only decreased by ~11%.","ea853aeb":"### 1 - Loading a Large Dataset\nThis is the first time I've tried loading a decently sized dataset.  For reference, uncompressed, the training dataset is 4.08 GB, while the test set is 3.53 GB.  As such, when I tried to load the data with a conventional pd.read_csv() function, I don't think I even got a memory error; my computer froze.  I did a Google search and found a quick fix on [github from user lsilva6851](https:\/\/github.com\/pandas-dev\/pandas\/issues\/16537).  While I managed to finally load the whole dataset, everything was noticably slower, so I decided to only load part of the dataset to see if I could optimize the memory usage.  Thanks to [Shurti_Iyyer's Kaggle kernel](https:\/\/www.kaggle.com\/shrutimechlearn\/large-data-loading-trick-with-ms-malware-data) and [Josh Devlin's post on dataquest](https:\/\/www.dataquest.io\/blog\/pandas-big-data\/) for the guidance.","c3427f0c":"Josh has a great visual and explanation on how each datatype is stored, which I won't get into.  But its the basis of why we should examine how much memory each data type is using.  First, find the mean value of memory usage for each data type.","5778fa53":"Right away, you should notice that objects are on average ~8 times more memory heavy than floats and ints.  Also, floats and ints have the similar average memory usages, but floats have almost double the columns as ints.  ","4a57d989":"After loading the training and test sets, the total memory usage is 2442.11 and 2142.24 MB respectively, which convert to 2.44 and 2.14 GB.  Compare these numbers to the original size of 4.08 and 3.53 GB.  This translates to about a 40% reduction in memory usage. ","75280f1e":"Josh suggests only converting columns that have 50% or less nunique values.  ","630dac8f":"#### 2.2 - Downcasting Objects\nPandas seems to have already optimized a way to downcast objects, by converting to categorial values.  The caveat is, if there are too many unique values in a feature, converting to categorial could actually increase memory usage.  A quote from the [documentation](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/categorical.html#gotchas): \"If the number of categories approaches the length of the data, the Categorical will use nearly the same or more memory than an equivalent object dtype representation.\".   \n\nUsing the describe function on all object features, we can see a snapshot of how many unique values there are in each column.  The first column, MachineIdentifier, would be a terrible column to change into a categorial type, as every row is a unique value.  However, the next few, ProductName, EngineVersion, and AppVersion, are great examples to convert, having only 2, 36, and 58 unique values out of 10,000 rows.  ","beb4382f":"#### 1.1 - Loading Libraries and Data","7e48e35c":"Now that we have a baseline memory usage, we can start trying to optimize memory usage by changing each column's data type to the smallest possible.  For example, if a column is int64 but all the data in that column could be converted to int8, then convert the column to int8.","abccaa5f":"#### 2.1 - Downcasting Numeric Features\nDowncasting is the term used in python to change data types; I believe it means something else in other programming languages.  I've written a function to downcast numeric features to unsigned ints and floats.  Unsigned ints and signed ints use up the same amount of memory, but the difference is that unsigned ints only include positive values (and zero).  Thus, if everything in a feature are all positive, then this could save memory.  In the case that the feature has negative values, the data type for that feature does not change."}}