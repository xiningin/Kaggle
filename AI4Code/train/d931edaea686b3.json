{"cell_type":{"6e0a58b4":"code","0d3563a4":"code","6c34cf93":"code","b1b816ad":"code","422f2799":"code","156bfa21":"code","e1ad2f8c":"code","b332c95d":"code","a6995fe3":"code","2dd0e5a0":"code","9b3cc158":"code","5c235474":"code","89f03ea8":"code","409dfd02":"code","7e0ad347":"code","3f282684":"code","f1491913":"code","ead33634":"code","714c8798":"code","b96f65d2":"code","225e98f7":"code","fcdb810c":"code","cf7efa47":"code","fba12578":"code","bdbf84d2":"code","8abf94b9":"code","5b2dd849":"code","ca777d9a":"code","c9d40ae0":"code","ba50b7fb":"code","79ddc64c":"code","3e5e82c3":"code","2471461a":"code","5b1633bb":"code","779c3820":"code","f38a9faf":"code","28bd5232":"code","246a3de9":"code","0f2acc3b":"code","f8e673bd":"code","9c5e052c":"code","71aeb756":"code","66f852b4":"code","46c437be":"code","cf75cb1b":"code","4b830d0e":"code","c2d8f288":"code","bee76222":"code","2293bd82":"code","a23f80a1":"code","f20ea6ea":"code","af8c3827":"code","d1772071":"code","2f45e446":"code","a6ea6e74":"code","a31d5ca0":"code","7482f76b":"code","39c167fe":"code","df2de8b2":"code","2e66f880":"code","f2d82e14":"code","59be7501":"code","a80932a1":"code","c3736593":"code","e4475b46":"code","834621ba":"code","60c5fe25":"code","f7f95770":"code","8d2551c4":"code","0abc26c2":"code","76ef4323":"code","30354efe":"code","ce88ec03":"code","2b38a0b5":"code","3433c08d":"code","1eac2ecb":"code","6efe4596":"code","383b98c6":"code","64a2330f":"code","0c93d43f":"code","9d3116a1":"code","59415f4e":"code","5bc85143":"code","5bbe7b7b":"code","2116989f":"code","d93d4206":"markdown","ce910ede":"markdown","2d46c8cd":"markdown","f733f52f":"markdown","4547fe92":"markdown","807b1236":"markdown","b08e231a":"markdown","0fd9cd26":"markdown","f9b2cbd5":"markdown","b9ab4cc5":"markdown","3d044613":"markdown","e446f107":"markdown","2d21fbaf":"markdown","79206600":"markdown","4147133b":"markdown","b1359913":"markdown","e73ddbcd":"markdown","201871b6":"markdown","b56f71aa":"markdown","9893b9e5":"markdown","4014dc1e":"markdown","9e49cbd2":"markdown","b79be26d":"markdown","24ddb09c":"markdown","c3548180":"markdown","6cf02b62":"markdown","a07465d8":"markdown","e7ffc15b":"markdown","c8e6a7e4":"markdown","d33f9785":"markdown","7686a73d":"markdown","06d5c066":"markdown","8dba89f4":"markdown","901e1e9d":"markdown","93938372":"markdown","9348a848":"markdown","046d50e9":"markdown","d74772fc":"markdown"},"source":{"6e0a58b4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d3563a4":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', 11000)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","6c34cf93":"brand_data_org = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/toyota.csv')","b1b816ad":"# Using a copy to play on the safe side, making sure the inital Dataframe won't be modified","422f2799":"brand_data = brand_data_org.copy()","156bfa21":"brand_data.info()","e1ad2f8c":"# no nulls with appropriate data types","b332c95d":"brand_data.describe(include='all')","a6995fe3":"fig, axes = plt.subplots(figsize=(15,8),nrows=2, ncols=3)\nsns.histplot(brand_data['year'],ax=axes[0,0])\nsns.histplot(brand_data['mileage'],ax=axes[0,1])\nsns.histplot(brand_data['tax'],ax=axes[0,2])\nsns.histplot(brand_data['mpg'],ax=axes[1,0])\nsns.histplot(brand_data['engineSize'],ax=axes[1,1])\nsns.histplot(brand_data['price'],ax=axes[1,2])","2dd0e5a0":"fields_correlation = sns.heatmap(brand_data.corr(), cmap=\"YlGnBu\", annot=True)","9b3cc158":"sns.pairplot(brand_data, kind=\"reg\",plot_kws={'line_kws':{'color':'red'}, 'scatter_kws': {'alpha': 0.1}},diag_kind=\"hist\")","5c235474":"year_mile_avgprice=pd.DataFrame\nyear_mile_avgprice=year_mile_avgprice({'mean_price' : brand_data.groupby( [\"year\",'mileage'] ).mean()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)","89f03ea8":"import itertools\nmarker = itertools.cycle((',', '+', '.', 'o', '*','s','p','X','d','h','v','^','<','>','1','2','3','4','8','|','_','x')) \nyear_set=sorted(set(year_mile_avgprice['year']), reverse=True)\nplt.figure(figsize=(17,8))\nfor year in year_set:\n     selected_data = year_mile_avgprice.loc[year_mile_avgprice['year'] == year]\n     plt.scatter(selected_data['mileage'], selected_data['mean_price'],marker = next(marker), label=year)\nplt.xlabel('mileage')\nplt.ylabel('mean price')\nplt.legend()","409dfd02":"brand_data.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","7e0ad347":"brand_data.boxplot(column=['mileage'], by=['fuelType'],figsize=(15,5),vert=0)","3f282684":"brand_data.boxplot(column=['mpg'], by=['fuelType'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","f1491913":"brand_data.boxplot(column=['mpg'], by=['transmission'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","ead33634":"brand_data.boxplot(column=['mpg'], by=['engineSize'],figsize=(15,5))","714c8798":"fig, axes = plt.subplots(figsize=(20,12),nrows=2, ncols=2)\nvis_models = brand_data.groupby(['model']).count()['price'].sort_values(ascending=False)\nvis_ftyp = brand_data.groupby(['fuelType']).count()['price'].sort_values(ascending=False)\nvis_trans = brand_data.groupby(['transmission']).count()['price'].sort_values(ascending=False)\nvis_engS = brand_data.groupby(['engineSize']).count()['price']\nvis_models.plot(ax=axes[0,0],kind='bar',title = 'Count')\nvis_ftyp.plot(ax=axes[0,1],kind='bar',title = 'Count')\nvis_engS.plot(ax=axes[1,0],kind='bar',title = 'Count')\nvis_trans.plot(ax=axes[1,1],kind='bar',rot=360,title = 'Count')","b96f65d2":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Automatic']\ndf=df[df['fuelType']!='Other']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","225e98f7":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Semi-Auto']\ndf=df[df['fuelType']!='Other']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","fcdb810c":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Manual']\ndf=df[df['fuelType']!='Other']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","cf7efa47":"brand_data.boxplot(column=['price'], by=['year'],figsize=(15,5))","fba12578":"brand_data.boxplot(column=['price'], by=['model'],figsize=(15,5),rot=45)","bdbf84d2":"fig, axes = plt.subplots(figsize=(15,12),nrows=2, ncols=2)\nvis_models = brand_data.groupby(['model']).mean()['price'].sort_values(ascending=False)\nvis_trans = brand_data.groupby(['transmission']).mean()['price'].sort_values(ascending=False)\nvis_ftyp = brand_data.groupby(['fuelType']).mean()['price'].sort_values(ascending=False)\nvis_engS = brand_data.groupby(['engineSize']).mean()['price'].sort_values(ascending=False)\nvis_models.plot(ax=axes[0,0],kind='bar',title = 'mean price')\nvis_engS.plot(ax=axes[0,1],kind='bar',title = 'mean price')\nvis_trans.plot(ax=axes[1,0],kind='bar',rot=360,title = 'mean price')\nvis_ftyp.plot(ax=axes[1,1],kind='bar',rot=360,title = 'mean price')","8abf94b9":"# As concluded above that tax and mpg has no correlation with price or any other feature\n# Tax and mpg columns will be dropped","5b2dd849":"brand_notax=brand_data.drop(['tax'], axis=1)","ca777d9a":"brand_notaxmpg=brand_notax.drop(['mpg'], axis=1)","c9d40ae0":"brand_notaxmpg.head()","ba50b7fb":"## there are some zero entries in the mileage. We are concerned with used cars\n## Accordingly we will delete any car below 50 mileage records","79ddc64c":"mile_min = 50\nbrand_mile = brand_notaxmpg[brand_notaxmpg['mileage']>=mile_min]","3e5e82c3":"sns.histplot(brand_mile['mileage'])","2471461a":"## we will try to remove the mileage outliers by keeping the records upto 99% quartile","5b1633bb":"mile_skewness=brand_mile['mileage'].skew(axis = 0, skipna = True)","779c3820":"if mile_skewness>1:\n    q = brand_mile['mileage'].quantile(0.99)\n    brand_mile= brand_mile[brand_mile['mileage']<q]\nelif mile_skewness<-1:\n    q = brand_mile['mileage'].quantile(0.01)\n    brand_mile= brand_mile[brand_data_mile['mileage']>q]","f38a9faf":"sns.histplot(brand_mile['mileage'])","28bd5232":"sns.histplot(brand_mile['year'])","246a3de9":"## we will try to remove the year outliers by keeping the records above 1% quartile","0f2acc3b":"brand_year=brand_mile.copy()\nyear_skewness=brand_year['year'].skew(axis = 0, skipna = True)","f8e673bd":"if year_skewness>1:\n    q = brand_year['year'].quantile(0.99)\n    brand_year= brand_year[brand_year['year']<q]\nelif year_skewness<-1:\n    q = brand_year['year'].quantile(0.01)\n    brand_year= brand_year[brand_year['year']>q]","9c5e052c":"sns.histplot(brand_year['year'])","71aeb756":"sns.distplot(brand_year['engineSize'])","66f852b4":"brand_engsZ=brand_year.copy()","46c437be":"brand_engsZ = brand_engsZ[brand_engsZ.engineSize != 0]\nbrand_engsZ = brand_engsZ[brand_engsZ.engineSize < 3.55]","cf75cb1b":"sns.distplot(brand_engsZ['engineSize'])","4b830d0e":"brand_fuel=brand_engsZ.copy()\nbrand_fuel = brand_fuel[brand_fuel.fuelType != 'Other']","c2d8f288":"vis_ftyp = brand_fuel.groupby(['fuelType']).count()['price'].sort_values(ascending=False)","bee76222":"vis_ftyp.plot(kind='bar')\nplt.show()","2293bd82":"brand_Trans=brand_fuel.copy()\nbrand_Trans = brand_Trans[brand_Trans.transmission != 'Other']","a23f80a1":"vis_trans = brand_Trans.groupby(['transmission']).count()['price'].sort_values(ascending=False)","f20ea6ea":"vis_trans.plot(kind='bar')\nplt.show()","af8c3827":"brand_models=brand_Trans.copy()","d1772071":"vis_models = brand_models.groupby(['model']).count()['price'].sort_values(ascending=False)","2f45e446":"vis_models.plot(kind='bar')\nplt.show()","a6ea6e74":"# there are still some models with very few records\n# I will filter those model with only 1 record for now","a31d5ca0":"brand_model_count=pd.DataFrame\n\nbrand_model_count=brand_model_count({'counts' : brand_models.groupby( [ \"model\"] ).size()}).reset_index()\n\nmin_count=1\n\ncounts_sum=brand_model_count['counts'].sum(axis=0)\nbrand_model_count.drop(brand_model_count[brand_model_count.counts >= min_count].index, inplace=True)\n\na=brand_model_count['model'].tolist()\n\nfor i in range (0,len(a)):\n    brand_models.drop(brand_models[brand_models.model == a[i]].index,inplace=True)\n\nvis_audi_models = brand_models.groupby(['model']).count()['price'].sort_values(ascending=False)\n\nvis_audi_models.plot(kind='bar')\nplt.show()","7482f76b":"sns.histplot(brand_models['price'])","39c167fe":"brand_models.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch ='True',vert=0)","df2de8b2":"# After these processing no remarkable effect is noticed on the price boxplot compared to the pervious one","2e66f880":"price_skewness=brand_models['price'].skew(axis = 0, skipna = True)\nprice_skewness","f2d82e14":"# price is still highly skewed, we will try to visualize price with model and year for more better spotting of outliers","59be7501":"brand_models.boxplot(column=['price'], by=['model','year'],figsize=(15,5),rot=90)","a80932a1":"# we need to remove price outliers based on model type and year (Assuming that those are the most effective features).\n# we are going to calculate filter between 90% & 95% of each model_year price distribution \n# and exclude the rest in case the price variation is high (coefficient of varitaion >0.7)","c3736593":"model_cstat=pd.DataFrame\nmodel_mstat=pd.DataFrame\nmodel_sdstat=pd.DataFrame\nmodel_cstat=model_cstat({'cnt_price' : brand_models.groupby( [ \"model\",\"year\"] ).count()[\"price\"]}).reset_index()\nmodel_mstat=model_mstat({'mean_price' : brand_models.groupby( [ \"model\",\"year\"] ).mean()[\"price\"]}).reset_index()\nmodel_sdstat=model_sdstat({'std_price' : brand_models.groupby( [ \"model\",\"year\"] ).std()[\"price\"]}).reset_index()\nmodel_stats1 = pd.merge(model_cstat, model_mstat, on=[\"model\", \"year\"])\nmodel_stats2 = pd.merge(model_stats1, model_sdstat, on=[\"model\", \"year\"])\n\nmodel_stats2['std_price'] = model_stats2['std_price'].fillna(0)\n\nmodels_prices=brand_models.copy()\n\nmodels_prices = models_prices.merge(model_stats2, how='inner', left_on=[\"model\", \"year\"], right_on=[\"model\",\"year\"])\nx=1.5\ny=0.7\nmodels_prices['var_coeff']=models_prices['std_price']\/models_prices['mean_price']\nmodels_prices['price_L95']=models_prices['mean_price']-x*models_prices['std_price']\nmodels_prices['price_R95']=models_prices['mean_price']+x*models_prices['std_price']\nmodels_prices['price_L95'] =models_prices['price_L95'].astype(int)\nmodels_prices['price_R95'] =models_prices['price_R95'].astype(int)\n\ndef drop_price(models_prices):\n\n    if (models_prices['var_coeff']>y) and (models_prices['cnt_price'] <4):\n        return 'drop'\n    elif (models_prices['price'] > models_prices['price_R95']) or (models_prices['price'] < models_prices['price_L95']):\n        return 'drop'\n    else:\n        return 'keep'\nmodels_prices['drop_price'] = models_prices.apply(drop_price, axis = 1)\nmodels_prices = models_prices[models_prices.drop_price !='drop']","e4475b46":"models_prices.boxplot(column=['price'], by=['model','year'],figsize=(15,5),rot=90)","834621ba":"price_skewness=models_prices['price'].skew(axis = 0, skipna = True)\nprice_skewness","60c5fe25":"# Let us calculate the percentage of records removed out of the original dataset","f7f95770":"data_removed_perct=100*(len(brand_data)-len(models_prices))\/len(brand_data)\ndata_removed_perct","8d2551c4":"# Data removed is a high but accepted","0abc26c2":"Brand_preprocessed=models_prices.copy()","76ef4323":"Brand_preprocessed=Brand_preprocessed.reset_index(drop=True)","30354efe":"Brand_preprocessed.info()","ce88ec03":"Brand_preprocessed.columns.values","2b38a0b5":"cols=['price','model', 'year', 'transmission', 'mileage', 'fuelType',\n      'engineSize', 'cnt_price', 'mean_price', 'std_price',\n      'var_coeff', 'price_L95', 'price_R95', 'drop_price']","3433c08d":"brand_arranged=Brand_preprocessed.copy()\nbrand_arranged=Brand_preprocessed[cols]","1eac2ecb":"brand_arranged=brand_arranged.drop(['cnt_price', 'mean_price', 'std_price',\n       'var_coeff', 'price_L95', 'price_R95', 'drop_price'], axis=1)","6efe4596":"brand_arranged.describe(include='all')","383b98c6":"year_model_mmile=pd.DataFrame\nyear_model_mmile=year_model_mmile({'mean_mileage' : brand_arranged.groupby( [\"year\",'model'] ).mean()[\"mileage\"]}).reset_index().sort_values(by='year',ascending=True)","64a2330f":"model_set=sorted(set(year_model_mmile['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mmile.loc[year_model_mmile['model'] == model]\n     plt.plot(selected_data['year'], selected_data['mean_mileage'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('mean mileage')\nplt.legend()","0c93d43f":"## Generally, mileage is higher for older cars","9d3116a1":"year_model_mprice=pd.DataFrame\nyear_model_mprice=year_model_mprice({'mean_price' : brand_arranged.groupby( [\"year\",'model'] ).mean()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mprice.loc[year_model_mprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['mean_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('mean price')\nplt.legend()\nplt.show()","59415f4e":"year_model_mnprice=pd.DataFrame\nyear_model_mnprice=year_model_mnprice({'min_price' : brand_arranged.groupby( [\"year\",'model'] ).min()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mnprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mnprice.loc[year_model_mnprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['min_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('min price')\nplt.legend()\nplt.show()","5bc85143":"year_model_mxprice=pd.DataFrame\nyear_model_mxprice=year_model_mxprice({'max_price' : brand_arranged.groupby( [\"year\",'model'] ).max()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mxprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mxprice.loc[year_model_mxprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['max_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('max price')\nplt.legend()\nplt.show()","5bbe7b7b":"brand_final=brand_arranged.drop(['year'], axis=1)","2116989f":"# The remaining brands has been explored and preproceesed in the same manner and saved as csv\n\n  # https:\/\/www.kaggle.com\/enginsights\/vw-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/vauxhall-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/bmw-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/audi-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/mercedes-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/skoda-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/hyundai-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/ford-preprocessing-and-exploration\n\n# All CSVs of processed data of all brands will be imported to separate notebook where a regression model is applied\n\n# Please refer to 100K UK Used Cars Model\n\n  # https:\/\/www.kaggle.com\/enginsights\/100k-uk-used-cars-model","d93d4206":"## Finding Correlations","ce910ede":"# Exploring Dataset","2d46c8cd":"## Brand","f733f52f":"## Data Exploration","4547fe92":"### Price","807b1236":"### Count of Features","b08e231a":"### Year Feature","0fd9cd26":"### Price","f9b2cbd5":"### mpg and transmission","b9ab4cc5":"## Copying Datasets","3d044613":"### Correlogram for additional visulatization of the relation between each two features ","e446f107":"# Loading Data","2d21fbaf":"## Further Exploration of Data (Categorical Features and Outliers Visulaization)","79206600":"### Year-Model vs Mean Price","4147133b":"### Tax feature","b1359913":"## Preprocessing","e73ddbcd":"### Mileage feature","201871b6":"### Transmission","b56f71aa":"### Mean Price vs Other Features","9893b9e5":"## Additional Graphs after Processing Data","4014dc1e":"## Re-arranging Columns","9e49cbd2":"# Packages","b79be26d":"### Fuel Type and mpg","24ddb09c":"### Price and model","c3548180":"### Year-Model vs Min Price","6cf02b62":"### Preocessing Checkpoint","a07465d8":"### mileage vs mean price [grouped by year]","e7ffc15b":"### Year-Model Vs Mean Mileage","c8e6a7e4":"### Fuel Type and Mileage","d33f9785":"### Year-Model vs Max Price","7686a73d":"### price and year ","06d5c066":"### Fuel Type","8dba89f4":"## Dropping Unwanted Fields","901e1e9d":"### Data Fields Distribution Graphs","93938372":"### Engine Size feature","9348a848":"### Model","046d50e9":"### mpg and engine size","d74772fc":"### mpg, fuel type and transmission"}}