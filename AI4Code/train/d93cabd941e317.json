{"cell_type":{"24ddd167":"code","080a4745":"code","09b020c4":"code","33301567":"code","afc09172":"code","7ec3517b":"code","f3c5510c":"code","8d852729":"code","f4d3ffff":"code","d8ab5e9a":"code","e124c7be":"code","0d5ef65a":"code","7d2c3e8e":"code","8ba70643":"code","0e35e260":"code","c7e24b60":"code","db30572f":"code","ff35ae19":"code","f21d89ee":"code","df973b87":"markdown","54a0ddc7":"markdown","f951b9ab":"markdown","4d8bef7d":"markdown","5c2cafdd":"markdown","7ce95197":"markdown","955e583b":"markdown","cd9a2c75":"markdown","8f121b3b":"markdown","f9e26355":"markdown","0066da93":"markdown","8fd9fced":"markdown"},"source":{"24ddd167":"#importing the required libraries\nimport pandas as pd\nimport numpy as np\n%matplotlib inline\nimport matplotlib.pyplot as plt","080a4745":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","09b020c4":"#imported and displayed the first few rows of the data\ndata = pd.read_csv(\"\/kaggle\/input\/random-linear-regression\/train.csv\")\ndata.head()","33301567":"#checking the data\ndata.info()","afc09172":"data.dropna(inplace=True)","7ec3517b":"data.info()","f3c5510c":"#visualizin the data\nplt.scatter(data[\"x\"],data[\"y\"],s=10)","8d852729":"X = data[\"x\"].values.reshape(-1,1)\nY = data[\"y\"].values.reshape(-1,1)","f4d3ffff":"from sklearn.model_selection import train_test_split\n\nX_train,X_cv, y_train, y_cv = train_test_split(X,Y,test_size=0.3, random_state=143)\n","d8ab5e9a":"#fitting a linear regression model using the training data\nfrom sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression()\nlin_reg.fit(X_train,y_train)","e124c7be":"some_data = X_train[:5]\nsome_labels = y_train[:5]\nprint(\"Predictions: \" ,lin_reg.predict(some_data))\nprint(\"Labels:\",some_labels)","0d5ef65a":"from sklearn.metrics import mean_squared_error\npredictions = lin_reg.predict(X_train)\nmse = mean_squared_error(y_train, predictions)\nrmse = np.sqrt(mse)\nrmse","7d2c3e8e":"plt.scatter(X_train, y_train,s=10)\nplt.plot(X_train, predictions, color='red')\nplt.show()","8ba70643":"cv_predictions = lin_reg.predict(X_cv)\ncv_mse = mean_squared_error(y_cv, cv_predictions)\ncv_rmse = np.sqrt(cv_mse)\ncv_rmse","0e35e260":"#importing the data\ndata_test = pd.read_csv(\"\/kaggle\/input\/random-linear-regression\/test.csv\")\nX_test = data[\"x\"].values.reshape(-1,1)\ny_test = data[\"y\"].values.reshape(-1,1)","c7e24b60":"final_predictions = lin_reg.predict(X_test)\nfinal_mse = mean_squared_error(y_test, final_predictions)\nfinal_rmse = np.sqrt(final_mse)\nfinal_rmse","db30572f":"#checking the r2 score \nfrom sklearn.metrics import r2_score\nscore=r2_score(y_test, final_predictions)\nscore","ff35ae19":"plt.figure(figsize=(10.66,6))\nplt.scatter(data[\"x\"],data[\"y\"],s=10)\nplt.savefig(\"raw_data.jpg\")","f21d89ee":"plt.figure(figsize=(10.66,6))\nplt.scatter(data[\"x\"],data[\"y\"],s=10)\nplt.plot(X_train, predictions, color='red')\nplt.savefig(\"final_graph.jpg\")","df973b87":"Just to check the progress, we check the predictions using the first five values. We observe that the predicted values are almost matching with the actual labels ","54a0ddc7":"### Importing the training data","f951b9ab":"# Linear Regression","4d8bef7d":"### Importing the test data ","5c2cafdd":"Here, we are checking the root mean squared error","7ce95197":"Now we will import the test data file and check for the root mean squared error using out trained model","955e583b":"This is a simple linear regression model and also my first ever project. The notebook explains how I imported the data, cleaned it (not much in this case), split the train file into train and cross validation (there is a seperate file for test data), and fit the model. Also along the way i wrote code to check the root mean squared error and finally founud the r2 score too. I have plotted the graph as well for the predictions.","cd9a2c75":"The red line here is the fitted line on our data. The scattered data is the cross validation data. ","8f121b3b":"The data now will have 699 non-null values.","f9e26355":"The train data is split into train data and cross validation data ","0066da93":"We find the root mean squared error using the cross validation data","8fd9fced":"Here we used data.info() to see the details about the data. We observe that \"x\" has 700 non-null values but \"y\" has only 699 non-null values. We need to clean the data by deleting the instance that has null values using the dropna() function. In the dropna() function, the inplace=True command means that the changes should be reflected the original file premanentaly"}}