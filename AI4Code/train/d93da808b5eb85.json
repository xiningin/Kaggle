{"cell_type":{"c5843012":"code","006e1c96":"code","805328c1":"code","f29b0d23":"code","fabdae5d":"code","48c1afef":"code","8a455c52":"code","1deba4d8":"code","45476a89":"code","34c37742":"code","144e3dc5":"code","20f384d8":"code","e025a3cf":"code","e99ef5ac":"code","31d655c6":"code","bb371d49":"code","79e212a6":"code","0d58c9bd":"code","9748fc85":"code","b8d59476":"code","5810c259":"code","8e959f3b":"code","a6271bf1":"code","d70700a7":"code","cdfd88e8":"markdown","5d845904":"markdown","b9dcdd9d":"markdown","40feddb1":"markdown","68d56206":"markdown","50e9c583":"markdown","270da267":"markdown","0a8eba37":"markdown"},"source":{"c5843012":"import numpy as np\nfrom numpy import linalg as la\nimport pandas as pd\nimport matplotlib.pyplot as  plt\nfrom matplotlib import image\nimport seaborn as sns\nimport imageio\nimport random\nimport datetime\nimport os\n\nsns.set()\n%matplotlib inline","006e1c96":"# Draw a square with a quadrant of radius within it\nfigure, axes = plt.subplots()\ncircle = plt.Circle((0,0), 1, fill = False, color='k')\naxes.set_aspect(1)\naxes.add_patch(circle)\nplt.show()","805328c1":"filenames = []\nsize = [1, 10, 100, 1000, 10000, 100000]\n\nfor i, n in enumerate(size):\n    print(f'Calculating for n = {n}...')\n    points = np.random.rand(n, 2)\n    col = list(np.where(la.norm(points, axis=1) <= 1, 'r', 'b'))\n    \n    figure, axes = plt.subplots()\n    figure.set_size_inches(4, 4)\n    axes.set_aspect(1)\n    axes.set_ylim(ymin=0)\n    axes.set_xlim(xmin=0)\n    \n    circle = plt.Circle((0,0), 1, fill = False, color='k')\n    axes.add_patch(circle)\n    plt.scatter(points[:, 0], points[:, 1], c=col, marker='.', s=0.5)\n    \n    pi = 4 * (np.sum(np.where(la.norm(points, axis=1) <= 1, 1, 0)))\/n\n    \n    plt.title(f'n = {n}, \u03c0 \u2248 {pi:.4f}')\n    \n    filename = f'{i}.png'\n    filenames.append(filename)\n    plt.savefig(filename, dpi=100)\n    plt.close()","f29b0d23":"# Build gif\nwith imageio.get_writer('pi.gif', mode='I', duration = 1) as writer:\n    for filename in filenames:\n        image = imageio.imread(filename)\n        writer.append_data(image)\n\n# Remove files\nfor filename in set(filenames):\n    os.remove(filename)","fabdae5d":"n = 10000\ndice = [1, 2, 3, 4, 5, 6]","48c1afef":"# When you choose even\nfinal_reward_even = 0\neven_rewards = []\n\nfor i in range(n):\n    roll = random.choice(dice)\n    if roll % 2:\n        final_reward_even -= roll\n    else:\n        final_reward_even += roll\n    even_rewards.append(final_reward_even)\n\nplt.plot(even_rewards)\nplt.title(f'Final reward when choosing even: {final_reward_even}')\nplt.show()","8a455c52":"# When you choose odd\nfinal_reward_odd = 0\nodd_rewards = []\n\nfor i in range(n):\n    roll = random.choice(dice)\n    if roll % 2:\n        final_reward_odd += roll\n    else:\n        final_reward_odd -= roll\n    odd_rewards.append(final_reward_odd)\n\nplt.plot(odd_rewards)\nplt.title(f'Final reward when choosing odd: {final_reward_odd}')\nplt.show()","1deba4d8":"left_limit = -10\nright_limit = 10\n\nx = np.arange(left_limit, right_limit, 0.001)\ny = np.e**(-(x)**2)\n\nplt.plot(x, y, 'k')\n\nplt.show()","45476a89":"filenames = []\nsize = [1, 10, 100, 1000, 10000, 100000]\n\nfor i, n in enumerate(size):\n    print(f'Calculating for n = {n}...')\n    points_x = np.random.uniform(low=-10, high=10, size=n)\n    points_y = np.random.uniform(low=0, high=1, size=n)\n    col = list(np.where(points_y <= np.e**(-(points_x)**2), 'r', 'b'))\n    \n    figure, axes = plt.subplots()\n    figure.set_size_inches(10, 4)\n    \n    left_limit = -10\n    right_limit = 10\n\n    x = np.arange(left_limit, right_limit, 0.001)\n    y = np.e**(-(x)**2)\n\n    plt.plot(x, y, 'k')\n    \n    plt.scatter(points_x, points_y, c=col, marker='.', s=0.5)\n    \n    val = (right_limit - left_limit)*(np.sum(np.where(points_y <= np.e**(-(points_x)**2), 1, 0)))\/n\n    \n    plt.title(f'n = {n}, val \u2248 {val:.4f}, real val = {np.sqrt(np.pi):.4f}')\n    \n    filename = f'{i}.png'\n    filenames.append(filename)\n    plt.savefig(filename, dpi=100)\n    plt.close()","34c37742":"# Build gif\nwith imageio.get_writer('gauss.gif', mode='I', duration = 1) as writer:\n    for filename in filenames:\n        image = imageio.imread(filename)\n        writer.append_data(image)\n\n# Remove files\nfor filename in set(filenames):\n    os.remove(filename)","144e3dc5":"# Reading the dataset using pandas and storing it in a dictionary\n\nraw_data = {}\nraw_data['RELIANCE'] = pd.read_csv('..\/input\/nifty50-stock-market-data\/RELIANCE.csv')\nraw_data['HDFCBank'] = pd.read_csv('..\/input\/nifty50-stock-market-data\/HDFCBANK.csv')\nraw_data['INFY'] = pd.read_csv('..\/input\/nifty50-stock-market-data\/INFY.csv')\nraw_data['TCS'] = pd.read_csv('..\/input\/nifty50-stock-market-data\/TCS.csv')\nraw_data['HINDUNILVR'] = pd.read_csv('..\/input\/nifty50-stock-market-data\/HINDUNILVR.csv')","20f384d8":"# Checking the dataset\n\nraw_data['RELIANCE']","e025a3cf":"# Extracting the data fo last 365 days into a dataframe called datas\n\ndatas = {}\n\nfor name, data in raw_data.items():\n    datas[name] = raw_data[name].iloc[-365:].reset_index()\n\ndatas['RELIANCE']","e99ef5ac":"#  Extracting the closing price of the coins in a dataframe called CP_dict\n\ncp_dict = {}\n\nfor name, data in datas.items():\n    cp_dict[name] = datas[name]['Close']\n    \ncp_df = pd.DataFrame(cp_dict)\n\ncp_df","31d655c6":"# The log daily returns and removing the first empty column of each stock\ndaily_return = np.log(cp_df.pct_change() + 1).dropna()\n\n# Calculating the mean of those daily return\ndaily_return_mean = np.array(daily_return.mean())\n\n# Assigning weights. Since there are five stocks, each will have a weight of 0.2 (1\/5)\nweights = np.array([0.2,0.2,0.2,0.2,0.2])","bb371d49":"# Calculating Portfolio Return\nport_return = np.sum(weights * daily_return_mean) * 365\n\nprint(f'The Annual Return of Portfolio is {port_return * 100:.2f}')","79e212a6":"# Calculating Portfolio Volatility\ncov = daily_return.cov()\nport_vol = np.sqrt(np.dot(weights.T, np.dot(cov, weights))) * np.sqrt(365)\n\nprint(f'The Annual Volatility of Portfolio is {port_vol * 100:.2f}%')","0d58c9bd":"equal_proportion = [port_return, port_vol]","9748fc85":"# The number of Portfolios to be generated\nnum_portfolio = 30000\n\n# Creating an empty list for storing returns, volatility, sharpe_ratio (return\/volatility) and weightage of each stock in portfolio\nresults = np.zeros((3 + len(daily_return.columns), num_portfolio))\n\n# Monte Carlo Simulation\nfor i in range(num_portfolio):\n    \n    # Declaring random weights\n    weight = np.random.rand(len(daily_return.columns))\n    # Ensuring the sum of all weight to be equal to 1\n    weight = weight\/np.sum(weight)\n\n    # Annual Return\n    p_annual_return = np.sum(weight * daily_return_mean) * 365\n    # Annual Volatility\n    p_annual_volatility = np.sqrt(np.dot(weight.T, np.dot(cov, weight))) * np.sqrt(365)\n    \n    # Storing the values in results list\n    results[0, i] = p_annual_return\n    results[1, i] = p_annual_volatility\n    results[2, i] = results[0,i] \/ results[1,i]\n\n    for j in range(len(weight)):\n        results[j+3,i] = weight[j]\n        \n        \n# Making a dataframe for results list of all generated Portfolio\ncols = ['ann_ret', 'ann_vol', 'sharpe_ratio']\nfor num in range(len(list(daily_return.columns))):\n    cols.append(list(daily_return.columns)[num])\n\nresult_df = pd.DataFrame(results.T, columns=cols)","b8d59476":"# Visulising the result dataframe\nresult_df","5810c259":"# Portfolio 1 - Sharpe ratio is the highest (Return\/Volatility)\nmax_sharpe_ratio = result_df.iloc[result_df['sharpe_ratio'].idxmax()]\n\n\n# Portfolio 2 - Volatility is the lowest\nvolatility_lowest = result_df.iloc[result_df['ann_vol'].idxmin()]","8e959f3b":"# Plotting the simulation\nplt.figure(figsize=(15,8))\nplt.scatter(result_df['ann_vol'],result_df['ann_ret'],c =result_df['sharpe_ratio'], cmap='rocket_r', label='_nolegend_')\nplt.colorbar()\n\n# Red - Portfolio 1\nplt.scatter(max_sharpe_ratio[1], max_sharpe_ratio[0], marker='*',color='red', s=300)\n\n# Green - Portfolio 2\nplt.scatter(volatility_lowest[1], volatility_lowest[0], marker='*',color='green', s=300)\n\n# Blue - Portfoliio 3\nplt.scatter(equal_proportion[1], equal_proportion[0], marker='*',color='blue', s=300)\n\nplt.xlabel('Volatility',fontsize = 15)\nplt.ylabel('Returns',fontsize = 15)\nplt.legend(['Max. Sharpe Ratio', 'Min. Volatility', 'Equal Proportion'])\nplt.show()","a6271bf1":"##### print('The Portfolio with maximum return (Sharpe Ratio) is:')\nprint('All values in percentage')\nprint(round(max_sharpe_ratio * 100, 2))","d70700a7":"print('The Portfolio with least Volatility is:')\nprint('All values in percentage')\nprint(round(volatility_lowest * 100, 2))","cdfd88e8":"# NOTE\nThis is an accompanying notebook for the post [Wealth, Games and Monte Carlo](https:\/\/theperceptron.substack.com\/p\/monte-carlo).\nCheck it out on [The Perceptron](https:\/\/theperceptron.substack.com\/welcome).","5d845904":"# Dice game","b9dcdd9d":"# Imports","40feddb1":"<img src=\"pi.gif\" width=\"300\" align=\"center\">","68d56206":"# Gaussian Integral","50e9c583":"<img src=\"gauss.gif\" width=\"600\" align=\"center\">","270da267":"# Estimation of \u03c0","0a8eba37":"# Portfolio Optimization\n\nImplemented from: https:\/\/www.kaggle.com\/ethanhunt1080\/effective-portfolio-using-monte-carlo-simulation\n\nDataset: https:\/\/www.kaggle.com\/rohanrao\/nifty50-stock-market-data\/metadata"}}