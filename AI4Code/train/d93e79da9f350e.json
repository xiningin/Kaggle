{"cell_type":{"0d82889c":"code","0819d846":"code","0d564ba8":"code","66173ca9":"code","99ee9b2d":"code","b207ba7a":"code","ac584d43":"code","fe4f7423":"code","dd28e7ee":"code","2ffd67aa":"code","b64d1008":"code","c22a35f3":"code","cc82e880":"code","854ed0f1":"code","d6584181":"code","25a2b047":"code","625b900e":"code","5401e4a7":"code","b304a9e0":"code","53bc1f02":"code","4a1b1a0b":"code","62cb8946":"markdown","892a21fa":"markdown","4ccbacac":"markdown","74a1bb82":"markdown","ca405faa":"markdown","959a4b61":"markdown","9d880af9":"markdown","a7d6e9a1":"markdown","cfcc174c":"markdown"},"source":{"0d82889c":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pydicom\nimport pandas as pd\nfrom glob import glob\nimport os\nfrom matplotlib.patches import Rectangle","0819d846":"det_class_path = '..\/input\/rsna-pneumonia-detection-challenge\/stage_1_detailed_class_info.csv'\nbbox_path = '..\/input\/rsna-pneumonia-detection-challenge\/stage_1_train_labels.csv'\ndicom_dir = '..\/input\/rsna-pneumonia-detection-challenge\/stage_1_train_images\/'\ntest_dicom_dir = '..\/input\/rsna-pneumonia-detection-challenge\/stage_1_test_images\/'","0d564ba8":"image_df = pd.DataFrame({'path': glob(os.path.join(dicom_dir, '*.dcm'))+\n                         glob(os.path.join(test_dicom_dir, '*.dcm'))\n                        })\nimage_df['patientId'] = image_df['path'].map(lambda x: os.path.splitext(os.path.basename(x))[0])\nimage_df['data_split'] = image_df['path'].map(lambda x: x.split('\/')[-2].split('_')[-2])\nprint(image_df.shape[0], 'images found')\nimage_df.sample(3)","66173ca9":"DCM_TAG_LIST = ['PatientAge', 'BodyPartExamined', 'ViewPosition', 'PatientSex']\ndef get_tags(in_path):\n    c_dicom = pydicom.read_file(in_path, stop_before_pixels=True)\n    tag_dict = {c_tag: getattr(c_dicom, c_tag, '') \n         for c_tag in DCM_TAG_LIST}\n    tag_dict['path'] = in_path\n    return pd.Series(tag_dict)\nimage_meta_df = image_df.apply(lambda x: get_tags(x['path']), 1)\n# show the summary\nimage_meta_df['PatientAge'] = image_meta_df['PatientAge'].map(int)\nimage_meta_df['PatientAge'].hist()\nimage_meta_df.drop('path',1).describe(exclude=np.number)","99ee9b2d":"rsna_df = pd.merge(image_meta_df, image_df, on='path')\nprint('Overlapping meta and name data', rsna_df.shape[0])\nrsna_df.drop('path',1).describe(exclude=np.number)","b207ba7a":"nih_data_df = pd.read_csv('..\/input\/data\/Data_Entry_2017.csv')\nnih_bbox_df = pd.read_csv('..\/input\/data\/BBox_List_2017.csv')\nnih_path_map = {os.path.basename(x): x for x in glob('..\/input\/data\/*\/images\/*.png')}\nprint('Number of images', len(nih_path_map))\nprint('Number of cases', nih_data_df.shape[0])\nprint('Number of bounding boxes', nih_bbox_df.shape[0])\nnih_data_df.sample(3)","ac584d43":"simple_nih_df = nih_data_df.rename(columns={'Patient Age': 'PatientAge', \n                         'View Position': 'ViewPosition',\n                         'Patient Gender': 'PatientSex'})[['Image Index', 'PatientAge', 'PatientSex', 'ViewPosition', 'Finding Labels']]\nsimple_nih_df['path'] = simple_nih_df['Image Index'].map(nih_path_map.get)\nsimple_nih_df.sample(5)","fe4f7423":"join_nih_fcn = lambda x: pd.merge(x, simple_nih_df, \n                         on=['PatientAge', 'PatientSex', 'ViewPosition'], \n                         suffixes=['_rsna', '_nih'])\ntest_merge_df = join_nih_fcn(rsna_df.sample(1))\nprint(test_merge_df.shape[0], 'matches for a single entry in the RSNA dataset')","dd28e7ee":"from skimage.io import imread\nfrom functools import lru_cache\ndef read_png(in_path):\n    return imread(in_path, as_gray=True)\ndef read_dicom(in_path):\n    return pydicom.read_file(in_path).pixel_array\nread_dicom_cached = lru_cache(1)(read_dicom) # we have lots of double counting\ntest_merge_df['rsna_data'] = test_merge_df['path_rsna'].map(read_dicom_cached)\ntest_merge_df['nih_data'] = test_merge_df['path_nih'].map(read_png)","2ffd67aa":"mean_rsna = test_merge_df['rsna_data'].map(np.mean)\nmean_nih = test_merge_df['nih_data'].map(np.mean)\nfig, (ax1) = plt.subplots(1, 1, figsize = (8, 4))\nax1.hist(mean_rsna, np.linspace(0, 255, 30), label='RSNA Data')\nax1.hist(mean_nih, np.linspace(0, 255, 30), label='NIH Data', alpha = 0.5)\nax1.legend();","b64d1008":"norm_func = lambda x: (x-1.0*np.mean(x)).astype(np.float32)\/np.std(x)\nmean_rsna = test_merge_df['rsna_data'].map(lambda x: np.max(norm_func(x)))\nmean_nih = test_merge_df['nih_data'].map(lambda x: np.max(norm_func(x)))\nfig, (ax1) = plt.subplots(1, 1, figsize = (8, 4))\nax1.hist(mean_rsna, np.linspace(0, 3, 30), label='RSNA Data')\nax1.hist(mean_nih, np.linspace(0, 3, 30), label='NIH Data', alpha = 0.5)\nax1.legend();","c22a35f3":"test_merge_df['img_diff'] = test_merge_df.apply(lambda c_row: np.mean(np.abs(norm_func(c_row['rsna_data'])-norm_func(c_row['nih_data']))),1)\ntest_merge_df['img_corr'] = test_merge_df.apply(lambda c_row: np.corrcoef(c_row['rsna_data'].ravel(), \n                                                                          c_row['nih_data'].ravel())[0, 1],1)","cc82e880":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize = (21, 7))\nax1.hist(test_merge_df['img_diff'])\nax1.set_title('MAE')\nax2.hist(test_merge_df['img_corr'])\nax2.set_title('Correlation')\nax3.plot(test_merge_df['img_diff'], test_merge_df['img_corr'], '.')\nax3.set_title('MAE vs Correlation')","854ed0f1":"fig, m_axs = plt.subplots(2, 3, figsize = (25, 10))\n[c_ax.axis('off') for c_ax in m_axs.flatten()]\nfor (i, (ax1, ax2)), (_, c_row) in zip(enumerate(m_axs.T, 1),\n                                  test_merge_df.sort_values('img_corr', ascending=False).iterrows()\n                                 ):\n    ax1.imshow(c_row['rsna_data'], cmap='gray')\n    ax1.set_title('RSNA Data')\n    ax2.imshow(c_row['nih_data'], cmap='gray')\n    ax2.set_title('NIH Data Rank:{}\\nCorrelation: {:2.1f}%, MAE: {:2.2f}'.format(i, 100*c_row['img_corr'], c_row['img_diff']))","d6584181":"full_merge_df = join_nih_fcn(rsna_df)\nprint(full_merge_df.shape[0], 'total number of overlapping entires')","25a2b047":"matched_groups = rsna_df.groupby(['PatientAge', 'PatientSex', 'ViewPosition'])\nprint('Number of unique patient age, sex and view combinations:', len(matched_groups))","625b900e":"DS_FACTOR = 4\n@lru_cache(maxsize=None)\ndef read_png_cached(in_path):\n    return imread(in_path, as_gray=True)[::DS_FACTOR, ::DS_FACTOR]\n@lru_cache(maxsize=None)\ndef read_dicom_cached(in_path):\n    return pydicom.read_file(in_path).pixel_array[::DS_FACTOR, ::DS_FACTOR]","5401e4a7":"out_matches_list = []\nfrom tqdm import tqdm_notebook\nimport gc\ngc.enable()\ngc.collect()\ndef calc_match_dist(in_row):\n    nih_img = read_png_cached(in_row['path_nih'])\n    rsna_img = read_dicom_cached(in_row['path_rsna'])\n    return np.corrcoef(nih_img.ravel(), rsna_img.ravel())[0, 1]\n\nfor _, rsna_grp_rows_df in tqdm_notebook(matched_groups):\n    # reset the caches\n    gc.collect()\n    gr_combo_df = join_nih_fcn(rsna_grp_rows_df)\n    gr_combo_df['img_corr'] = gr_combo_df.apply(calc_match_dist,1)\n    # add the top match for each group to the list\n    out_matches_list += [gr_combo_df.groupby('patientId').\\\n                             apply(lambda x: x.sort_values('img_corr', ascending=False).head(1)).\\\n                             reset_index(drop=True)]\n    read_dicom_cached.cache_clear()\n    read_png_cached.cache_clear()","b304a9e0":"matches_df = pd.concat(out_matches_list)\nmatches_df.to_csv('matched_images.csv', index=False)\nmatches_df.sample(3)","53bc1f02":"matches_df['img_corr'].plot.hist()","4a1b1a0b":"matches_df['Finding Labels'].value_counts()","62cb8946":"## Normalization\n","892a21fa":"# Read Metadata from RSNA Pneumonia Images\nHere we read and load all the metadata from the RSNA images","4ccbacac":"## Show the top 3 matches","74a1bb82":"# Read NIH Image Data\nThe NIH data has already been extracted and so should be much easier to get to","ca405faa":"## One Group at a time\nWe see there are too many (13million load operations is a lot) to try a brute force match and so we can load the images one group at a time and see which ones match best","959a4b61":"## Scaling\nThe images have clearly been scaled to different values and so we need to correct for the scaling before subtracting","9d880af9":"# Matching Overview\nSince we know the images came from the NIH dataset, let's try to match them back and maybe even use some of the predictions as another baseline submission.\n\n## Process\n- Get metadata from all the dicoms in the RSNA competition\n- Get the metadata from the NIH images\n- Match using age, gender, scan type, and even pixel data if needed.","a7d6e9a1":"### Seems to be a reasonable match\n0.01 might be a good cut-off for matching datasets well","cfcc174c":"# Joining RSNA and NIH data\nWe join the data based on the similar columns and then compare the images to find an exact match"}}