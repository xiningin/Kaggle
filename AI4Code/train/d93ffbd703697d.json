{"cell_type":{"fca0c8bd":"code","8d4bcec3":"code","64cb9f54":"code","59377aee":"code","bdb49e08":"code","9fb8ef59":"code","16815e76":"code","1c065880":"code","7e1999cb":"code","928136c2":"code","4d113321":"code","d925cdcc":"code","0304e7eb":"code","3cd48ea3":"code","183c6964":"code","1910222f":"code","a8beebf0":"code","19b5c53d":"code","3847dd21":"code","8bfc2d62":"code","edcbb6c0":"code","c3e6ee94":"code","04b3088a":"code","88381e2a":"code","1d036d85":"code","b21f985b":"code","1452431d":"code","8d73253a":"code","e0ebb58f":"code","1bdb83b9":"code","71541312":"code","5e106537":"code","60564e83":"code","fba150ed":"code","3f6810bc":"code","732a0472":"code","6199641c":"code","206611e7":"code","d7e09729":"code","b6594732":"code","087d4f76":"code","6e87fa05":"code","e863ee3d":"code","2b07fdc0":"code","dc5a033e":"code","075d264d":"code","1f370a70":"code","bb2b3a1b":"code","eeef2db4":"code","0d42dd5f":"code","44d56fd5":"code","66fd45db":"code","61211035":"code","da71853d":"markdown","44e36041":"markdown","e4957907":"markdown","2fc7e017":"markdown","990a731a":"markdown","a4f43b36":"markdown","53795bf5":"markdown","ba1ee612":"markdown","a17da8bf":"markdown","a02407dc":"markdown"},"source":{"fca0c8bd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","8d4bcec3":"df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf.head()","64cb9f54":"df.drop(['PassengerId','Cabin','Name','Ticket'],axis=1,inplace=True)\ndf.head()","59377aee":"sns.countplot(df[\"Survived\"],hue=df[\"Sex\"])","bdb49e08":"sns.countplot(df[\"Survived\"],hue=df[\"Embarked\"])","9fb8ef59":"sns.countplot(df[\"Survived\"],hue=df[\"Pclass\"])","16815e76":"df.isnull().sum()","1c065880":"df = df[df[\"Embarked\"].notna()]\ndf.isnull().sum()","7e1999cb":"sns.boxplot(x=\"Pclass\",y=\"Age\",data=df)","928136c2":"def find_age(col):\n    age = col[0]\n    Pclass = col[1]\n    if pd.isnull(age):\n        if Pclass == 1:\n            return 37\n        elif Pclass == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return age","4d113321":"df[\"Age\"] = df[[\"Age\",\"Pclass\"]].apply(find_age,axis=1)\ndf.head()","d925cdcc":"plt.hist(df[\"Age\"])","0304e7eb":"df.isnull().sum()","3cd48ea3":"sns.heatmap(df.corr(),annot=True)","183c6964":"bins= [0,10,20,30,40,50,60,70,80,90]\nlabels = ['0','1','2','3','4','5','6','7','8']\ndf['Agegroup'] = pd.cut(df['Age'], bins=bins, labels=labels, right=False)\ndf.head()","1910222f":"df[\"Embarked\"].value_counts()","a8beebf0":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit([\"S\",\"C\",\"Q\"])\ndf[\"Embarked\"] = le.fit_transform(df[\"Embarked\"])","19b5c53d":"from sklearn.preprocessing import StandardScaler","3847dd21":"scaler = StandardScaler()","8bfc2d62":"s = scaler.fit(df[[\"Fare\"]])","edcbb6c0":"df[\"Fare\"] = s.transform(df[[\"Fare\"]])\ndf.head()","c3e6ee94":"df[\"Male\"] = pd.get_dummies(df[\"Sex\"],drop_first=True)","04b3088a":"df.drop(\"Sex\",inplace=True,axis=1)","88381e2a":"df.columns","1d036d85":"x = df[['Male','Agegroup','SibSp','Pclass', 'Parch', 'Fare', 'Embarked']].values\ny = df[\"Survived\"].values","b21f985b":"from sklearn.model_selection import train_test_split","1452431d":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.35)","8d73253a":"from sklearn.tree import DecisionTreeClassifier","e0ebb58f":"tree = DecisionTreeClassifier(max_depth=4,random_state=10)","1bdb83b9":"tree.fit(x_train,y_train)","71541312":"predict = tree.predict(x_test)","5e106537":"from sklearn.metrics import accuracy_score","60564e83":"accuracy_score(y_test,predict)","fba150ed":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","3f6810bc":"test.drop(['Cabin','Name','Ticket'],axis=1,inplace=True)","732a0472":"test.isnull().sum()","6199641c":"def find_age(col):\n    age = col[0]\n    Pclass = col[1]\n    if pd.isnull(age):\n        if Pclass == 1:\n            return 37\n        elif Pclass == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return age","206611e7":"test[\"Age\"] = test[[\"Age\",\"Pclass\"]].apply(find_age,axis=1)\ndf.head()","d7e09729":"test = test.fillna(df.mean())\ntest.isnull().sum()","b6594732":"test.shape","087d4f76":"test.columns","6e87fa05":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit([\"S\",\"C\",\"Q\"])\ntest[\"Embarked\"] = le.fit_transform(test[\"Embarked\"])","e863ee3d":"le.fit([\"male\",\"female\"])\ntest[\"Sex\"] = le.fit_transform(test[\"Sex\"])\ntest[\"Male\"] = pd.get_dummies(test[\"Sex\"],drop_first=True)\ntest.head()","2b07fdc0":"scaler = StandardScaler()","dc5a033e":"s = scaler.fit(test[[\"Fare\"]])","075d264d":"test[\"Fare\"] = s.transform(test[[\"Fare\"]])\ntest.head()","1f370a70":"bins= [0,10,20,30,40,50,60,70,80,90]\nlabels = ['0','1','2','3','4','5','6','7','8']\ntest['Agegroup'] = pd.cut(test['Age'], bins=bins, labels=labels, right=False)\ntest.head()","bb2b3a1b":"x = test[['Male', 'Agegroup', 'SibSp','Pclass', 'Parch', 'Fare', 'Embarked']].values","eeef2db4":"ypredict = tree.predict(x)\nypredict","0d42dd5f":"submission = pd.DataFrame({'PassengerId':test['PassengerId'],'Survived':ypredict})","44d56fd5":"submission.head()","66fd45db":"filename = 'Titanic1.csv'\nsubmission.to_csv(filename,index=False)\nprint('Saved file: ' + filename)","61211035":"submission.shape","da71853d":"Drop the columns which are probably not so important(May be included by extracting useful information and patterns from that).","44e36041":"Try to understand relationship between Pclass and Age to fill Null values.","e4957907":"Data Preprocessing.","2fc7e017":"Import all required Libraries.","990a731a":"Understand relationship between features.","a4f43b36":"Try to analyse data.","53795bf5":"Get data from dataset.","ba1ee612":"Testing","a17da8bf":"**Titanic survival prediction using Simple Decision Tree Classifier.**","a02407dc":"As there are only 2 null values in embarked, we can just drop them. But for Age we need to replace null values with some suitable values."}}