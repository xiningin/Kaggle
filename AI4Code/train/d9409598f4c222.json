{"cell_type":{"58bb5adb":"code","72de93a5":"code","dd298cbc":"code","270fc601":"code","b83c49a7":"code","c9735126":"code","fa1ba211":"code","a8ac4f0c":"code","158ad924":"code","8b49d6f9":"code","26f48c2a":"code","94b0d0ec":"code","84edfec4":"code","be97dece":"code","347248b8":"code","0134ecc2":"code","40c4c020":"code","45c75f28":"code","2fc7435d":"code","969a91c0":"code","75872d3c":"code","2f33995c":"code","53a7d040":"code","229273ce":"code","4e6bc0e3":"code","6c829ea2":"code","37dbd0cf":"code","2d261e04":"code","3bfe6b41":"code","3d3e3001":"code","96bed71f":"code","12a8aecd":"code","7519589c":"code","e342b9cd":"code","014f1b83":"code","048bce02":"code","76b7e6c4":"code","8f285509":"code","28c21b83":"markdown","8f0ae9a2":"markdown","66cc41f6":"markdown","d3e447e8":"markdown","87f6c532":"markdown","8f1b9b49":"markdown","aae035fe":"markdown","00042e4a":"markdown","7f16cce5":"markdown","7b90073f":"markdown","dddc0d28":"markdown","506be212":"markdown","b8a3a2b9":"markdown","3bf816ea":"markdown","5fbb639c":"markdown","783690b9":"markdown","b0f578b4":"markdown","2036ccb8":"markdown","ed5ddb29":"markdown","6af497f0":"markdown","44bd364f":"markdown","b9f0fec5":"markdown","be1eb4f5":"markdown","b721b36d":"markdown","8668a7a9":"markdown","1977772e":"markdown","87f3aae7":"markdown","e73f6a2b":"markdown","6127e4da":"markdown","724641b3":"markdown","d8033d60":"markdown","af0bf41f":"markdown","4ee4afe6":"markdown","d14e42f5":"markdown"},"source":{"58bb5adb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","72de93a5":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","dd298cbc":"covid_impact = pd.read_csv('..\/input\/impact-of-covid19-pandemic-on-the-global-economy\/raw_data.csv', parse_dates=['date'])\ncovid_impact.head()","270fc601":"covid_impact.columns","b83c49a7":"# Drop unnamed columns\ncovid_impact = covid_impact[covid_impact.columns.drop(list(covid_impact.filter(regex='Unnamed')))]\ncovid_impact.columns","c9735126":"# Check date range\nmin(covid_impact['date']), max(covid_impact['date'])","fa1ba211":"covid_impact.info()","a8ac4f0c":"# Set top 5 as colored, the rest as grey\ntotal_cases_sorted = covid_impact.sort_values(['total_cases'], ascending = False)\ncolorlist = ['red','orange','green','blue','purple']\npalette = {c:colorlist[i] for i, c in enumerate(total_cases_sorted['location'].unique()[:5])}\nprint(palette)\nother_palette = {c:'lightgrey' for c in total_cases_sorted['location'].unique()[5:]}\npalette = {**palette, **other_palette}\n\nplt.figure(figsize = [10,5])\nsns.set(style=\"darkgrid\")\n\nax = sns.lineplot(x='date', y='total_cases', hue='location', palette = palette, data = total_cases_sorted)\nax.get_legend().remove()\nplt.xticks(rotation=45)\nplt.show()","158ad924":"covid_impact['total_cases_pop'] = covid_impact['total_cases'] \/ covid_impact['population']\n\n# Set top 5 as colored, the rest as grey\ntotal_cases_sorted = covid_impact.sort_values(['total_cases_pop'], ascending = False)\ncolorlist = ['red','orange','green','blue','purple']\npalette = {c:colorlist[i] for i, c in enumerate(total_cases_sorted['location'].unique()[:5])}\nprint(palette)\nother_palette = {c:'lightgrey' for c in total_cases_sorted['location'].unique()[5:]}\npalette = {**palette, **other_palette}\n\nplt.figure(figsize = [10,5])\nsns.set(style=\"darkgrid\")\n\nax = sns.lineplot(x='date', y='total_cases_pop', hue='location', palette = palette, data = total_cases_sorted)\nax.get_legend().remove()\nplt.xticks(rotation=45)\nplt.show()","8b49d6f9":"# Set top 5 as colored, the rest as grey\ntotal_cases_sorted = covid_impact.sort_values(['total_deaths'], ascending = False)\n# print(total_cases_sorted['location'].unique()[:5]) \ncolorlist = ['red','orange','green','blue','purple']\npalette = {c:colorlist[i] for i, c in enumerate(total_cases_sorted['location'].unique()[:5])}\nprint(palette)\nother_palette = {c:'lightgrey' for c in total_cases_sorted['location'].unique()[5:]}\npalette = {**palette, **other_palette}\n\nplt.figure(figsize = [10,5])\nsns.set(style=\"darkgrid\")\n\nax = sns.lineplot(x='date', y='total_deaths', hue='location', palette = palette, data = total_cases_sorted)\nax.get_legend().remove()\nplt.xticks(rotation=45)\nplt.show()","26f48c2a":"covid_impact['total_deaths_pop'] = covid_impact['total_deaths'] \/ covid_impact['population']\n\n# Set top 5 as colored, the rest as grey\ntotal_cases_sorted = covid_impact.sort_values(['total_deaths_pop'], ascending = False)\n# print(total_cases_sorted['location'].unique()[:5]) \ncolorlist = ['red','orange','green','blue','purple']\npalette = {c:colorlist[i] for i, c in enumerate(total_cases_sorted['location'].unique()[:5])}\nprint(palette)\nother_palette = {c:'lightgrey' for c in total_cases_sorted['location'].unique()[5:]}\npalette = {**palette, **other_palette}\n\nplt.figure(figsize = [10,5])\nsns.set(style=\"darkgrid\")\n\nax = sns.lineplot(x='date', y='total_deaths_pop', hue='location', palette = palette, data = total_cases_sorted)\nax.get_legend().remove()\nplt.xticks(rotation=45)\nplt.show()","94b0d0ec":"covid_impact['death_rate'] = covid_impact['total_deaths'] \/ covid_impact['total_cases']\n\n# Set top 5 as colored, the rest as grey\ntotal_cases_sorted = covid_impact.sort_values(['death_rate'], ascending = False)\n# print(total_cases_sorted['location'].unique()[:5]) \ncolorlist = ['red','orange','green','blue','purple']\npalette = {c:colorlist[i] for i, c in enumerate(total_cases_sorted['location'].unique()[:5])}\nprint(palette)\nother_palette = {c:'lightgrey' for c in total_cases_sorted['location'].unique()[5:]}\npalette = {**palette, **other_palette}\n\nplt.figure(figsize = [10,5])\nsns.set(style=\"darkgrid\")\n\nax = sns.lineplot(x='date', y='death_rate', hue='location', palette = palette, data = total_cases_sorted)\nax.get_legend().remove()\nplt.xticks(rotation=45)\nplt.show()","84edfec4":"covid_impact['death_rate'].describe()","be97dece":"covid_impact['stringency_index'].describe()","347248b8":"from ipywidgets import interact, interactive, fixed, interact_manual\nimport ipywidgets as widgets\n\ndef plot_func(country_name):    \n    fig, ax = plt.subplots(figsize=(10,5))        \n    sns.lineplot(x='date', y='total_cases', data = covid_impact[covid_impact['location'] == country_name], ax=ax, color='red')\n    plt.xticks(rotation=45)\n    ax2 = plt.twinx()\n    sns.lineplot(x='date', y='stringency_index', data = covid_impact[covid_impact['location'] == country_name], ax=ax2, color='blue')\n    plt.show()\n\ninteract(plot_func, country_name = covid_impact['location'].unique().tolist())","0134ecc2":"from ipywidgets import interact, interactive, fixed, interact_manual\nimport ipywidgets as widgets\n\ndef plot_func(country_name):    \n    fig, ax = plt.subplots(figsize=(10,5))        \n    sns.lineplot(x='date', y='total_deaths', data = covid_impact[covid_impact['location'] == country_name], ax=ax, color='red')\n    plt.xticks(rotation=45)\n    ax2 = plt.twinx()\n    sns.lineplot(x='date', y='stringency_index', data = covid_impact[covid_impact['location'] == country_name], ax=ax2, color='blue')\n    plt.show()\n\ninteract(plot_func, country_name = covid_impact['location'].unique().tolist())","40c4c020":"pd.set_option('display.max_rows',None)","45c75f28":"# Aggregate by country - max total cases, max total deaths, GDP\ncovid_agg = covid_impact[['location', 'total_cases','total_deaths','gdp_per_capita','human_development_index','population']].copy()\ncovid_agg = covid_agg.groupby('location').agg(\n            max_cases=(\"total_cases\", \"max\"),\n            max_deaths=(\"total_deaths\", \"max\"),            \n            gdp_per_capita = (\"gdp_per_capita\", 'first'),\n            human_development_index = (\"human_development_index\", 'first'),\n            population = (\"population\", \"first\")\n            ).reset_index()","2fc7435d":"# Quick check if each country has only 1 gdp_per_capita value\ngdp_checking = covid_agg.groupby('location').agg(gdp_per_capita = (\"gdp_per_capita\", 'unique'))\nprint([i for i in gdp_checking['gdp_per_capita'] if len(i)>1])","969a91c0":"# Quick check if each country has only 1 human_development_index value\nhdi_checking = covid_agg.groupby('location').agg(human_development_index = (\"human_development_index\", 'unique'))\nprint([i for i in hdi_checking['human_development_index'] if len(i)>1])","75872d3c":"covid_agg['gdp_per_capita'].describe()","2f33995c":"# Set top 5 as colored, the rest as grey\ntotal_cases_sorted = covid_agg.dropna(subset = ['gdp_per_capita']).sort_values(['max_cases'], ascending = False)\ncolorlist = ['red','orange','green','blue','purple']\npalette = {c:colorlist[i] for i, c in enumerate(total_cases_sorted['location'].unique()[:5])}\nprint(palette)\nother_palette = {c:'lightgrey' for c in total_cases_sorted['location'].unique()[5:]}\npalette = {**palette, **other_palette}\n\nplt.figure(figsize = [10,5])\nsns.set(style=\"darkgrid\")\n\nax = sns.scatterplot(x='gdp_per_capita', y='max_cases', hue='location', palette = palette, data = total_cases_sorted)\nax.get_legend().remove()\nplt.xticks(rotation=45)\nplt.show()","53a7d040":"# Set top 5 as colored, the rest as grey\ntotal_cases_sorted = covid_agg.dropna(subset = ['gdp_per_capita']).sort_values(['max_deaths'], ascending = False)\ncolorlist = ['red','orange','green','blue','purple']\npalette = {c:colorlist[i] for i, c in enumerate(total_cases_sorted['location'].unique()[:5])}\nprint(palette)\nother_palette = {c:'lightgrey' for c in total_cases_sorted['location'].unique()[5:]}\npalette = {**palette, **other_palette}\n\nplt.figure(figsize = [10,5])\nsns.set(style=\"darkgrid\")\n\nax = sns.scatterplot(x='gdp_per_capita', y='max_deaths', hue='location', palette = palette, data = total_cases_sorted)\nax.get_legend().remove()\nplt.xticks(rotation=45)\nplt.show()","229273ce":"covid_agg['human_development_index'].describe()","4e6bc0e3":"# Set top 5 as colored, the rest as grey\ntotal_cases_sorted = covid_agg.dropna(subset = ['human_development_index']).sort_values(['max_cases'], ascending = False)\ncolorlist = ['red','orange','green','blue','purple']\npalette = {c:colorlist[i] for i, c in enumerate(total_cases_sorted['location'].unique()[:5])}\nprint(palette)\nother_palette = {c:'lightgrey' for c in total_cases_sorted['location'].unique()[5:]}\npalette = {**palette, **other_palette}\n\nplt.figure(figsize = [10,5])\nsns.set(style=\"darkgrid\")\n\nax = sns.scatterplot(x='human_development_index', y='max_cases', hue='location', palette = palette, data = total_cases_sorted)\nax.get_legend().remove()\nplt.xticks(rotation=45)\nplt.show()","6c829ea2":"# Set top 5 as colored, the rest as grey\ntotal_cases_sorted = covid_agg.dropna(subset = ['human_development_index']).sort_values(['max_deaths'], ascending = False)\ncolorlist = ['red','orange','green','blue','purple']\npalette = {c:colorlist[i] for i, c in enumerate(total_cases_sorted['location'].unique()[:5])}\nprint(palette)\nother_palette = {c:'lightgrey' for c in total_cases_sorted['location'].unique()[5:]}\npalette = {**palette, **other_palette}\n\nplt.figure(figsize = [10,5])\nsns.set(style=\"darkgrid\")\n\nax = sns.scatterplot(x='human_development_index', y='max_deaths', hue='location', palette = palette, data = total_cases_sorted)\nax.get_legend().remove()\nplt.xticks(rotation=45)\nplt.show()","37dbd0cf":"# Set top 5 as colored, the rest as grey\ntotal_cases_sorted = covid_agg.dropna(subset = ['population']).sort_values(['max_cases'], ascending = False)\ncolorlist = ['red','orange','green','blue','purple']\npalette = {c:colorlist[i] for i, c in enumerate(total_cases_sorted['location'].unique()[:5])}\nprint(palette)\nother_palette = {c:'lightgrey' for c in total_cases_sorted['location'].unique()[5:]}\npalette = {**palette, **other_palette}\n\nplt.figure(figsize = [10,5])\nsns.set(style=\"darkgrid\")\n\nax = sns.scatterplot(x='population', y='max_cases', hue='location', palette = palette, data = total_cases_sorted)\nax.get_legend().remove()\nplt.xticks(rotation=45)\nplt.show()","2d261e04":"# Set top 5 as colored, the rest as grey\ntotal_cases_sorted = covid_agg.dropna(subset = ['population']).sort_values(['max_deaths'], ascending = False)\ncolorlist = ['red','orange','green','blue','purple']\npalette = {c:colorlist[i] for i, c in enumerate(total_cases_sorted['location'].unique()[:5])}\nprint(palette)\nother_palette = {c:'lightgrey' for c in total_cases_sorted['location'].unique()[5:]}\npalette = {**palette, **other_palette}\n\nplt.figure(figsize = [10,5])\nsns.set(style=\"darkgrid\")\n\nax = sns.scatterplot(x='population', y='max_deaths', hue='location', palette = palette, data = total_cases_sorted)\nax.get_legend().remove()\nplt.xticks(rotation=45)\nplt.show()","3bfe6b41":"covid_agg['lnpopulation'] = np.log(covid_agg['population'])","3d3e3001":"# Set top 5 as colored, the rest as grey\ntotal_cases_sorted = covid_agg.dropna(subset = ['lnpopulation']).sort_values(['max_cases'], ascending = False)\ncolorlist = ['red','orange','green','blue','purple']\npalette = {c:colorlist[i] for i, c in enumerate(total_cases_sorted['location'].unique()[:5])}\nprint(palette)\nother_palette = {c:'lightgrey' for c in total_cases_sorted['location'].unique()[5:]}\npalette = {**palette, **other_palette}\n\nplt.figure(figsize = [10,5])\nsns.set(style=\"darkgrid\")\n\nax = sns.scatterplot(x='lnpopulation', y='max_cases', hue='location', palette = palette, data = total_cases_sorted)\nax.get_legend().remove()\nplt.xticks(rotation=45)\nplt.show()","96bed71f":"# Set top 5 as colored, the rest as grey\ntotal_cases_sorted = covid_agg.dropna(subset = ['lnpopulation']).sort_values(['max_deaths'], ascending = False)\ncolorlist = ['red','orange','green','blue','purple']\npalette = {c:colorlist[i] for i, c in enumerate(total_cases_sorted['location'].unique()[:5])}\nprint(palette)\nother_palette = {c:'lightgrey' for c in total_cases_sorted['location'].unique()[5:]}\npalette = {**palette, **other_palette}\n\nplt.figure(figsize = [10,5])\nsns.set(style=\"darkgrid\")\n\nax = sns.scatterplot(x='lnpopulation', y='max_deaths', hue='location', palette = palette, data = total_cases_sorted)\nax.get_legend().remove()\nplt.xticks(rotation=45)\nplt.show()","12a8aecd":"covid_agg.info()","7519589c":"# If we drop all NA\ncovid_agg.dropna().info()","e342b9cd":"# Still have 165 countries, not too bad\ncovid_agg_cleaned = covid_agg.dropna()","014f1b83":"# Check relationship among factors\n\nsns.pairplot(covid_agg_cleaned)","048bce02":"# Use VIF to check for multicollinearity\n\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\nY = covid_agg_cleaned['max_cases']\nX = covid_agg_cleaned[['gdp_per_capita', 'human_development_index', 'lnpopulation']]\n\n# VIF dataframe \nvif_data = pd.DataFrame() \nvif_data[\"feature\"] = X.columns \n  \n# calculating VIF for each feature \nvif_data[\"VIF\"] = [variance_inflation_factor(X.values, i) \n                          for i in range(len(X.columns))] \n  \nprint(vif_data)","76b7e6c4":"# The figures didn't show a linear relationship between the variables, but let's try linear regression first\n\nimport statsmodels.api as sm\n\nY = covid_agg_cleaned['max_cases']\nX = covid_agg_cleaned[['human_development_index', 'lnpopulation']]\n\nresult = sm.OLS( Y, X ).fit()\nresult.summary()","8f285509":"Y = covid_agg_cleaned['max_deaths']\nX = covid_agg_cleaned[['human_development_index', 'lnpopulation']]\n\nresult = sm.OLS( Y, X ).fit()\nresult.summary()","28c21b83":"Comment: USA had the highest deaths, followed by Brazil and India","8f0ae9a2":"Comment: The \"top 5\" countries had low to middle GDP per capita and high human_development_index","66cc41f6":"### Total cases","d3e447e8":"### Total deaths","87f6c532":"# Explore data","8f1b9b49":"## Overlay stringency_index with total_cases (1 country)\nRed = total cases, blue = stringent index","aae035fe":"## Log the population for more normal distribution","00042e4a":"# Statistical modeling\nAfter adjusted for population, do GDP per capita and human_development_index affect maximum number of total cases and deaths?","7f16cce5":"Comment: taking natural log makes the gap between extremes smaller","7b90073f":"## Clean-up data\nData cannot contain NA","dddc0d28":"### Raw numbers","506be212":"### Raw numbers","b8a3a2b9":"Comment: Again, countries with low population showed higher deaths per capita even when the deaths were low","3bf816ea":"Comment: As reported in the news, USA was the highest, followed by India and Brazil","5fbb639c":"## Total_deaths","783690b9":"## GDP per capita","b0f578b4":"# Conclusion\n1. Some countries managed to curb the cases and deaths with increased stringent index\n2. Higher human development index does not translate to lower cases and deaths","2036ccb8":"## Population\nWhat is the relationship between population and cases (deaths)","ed5ddb29":"Comment: When checking statistics, the average death rate was at 3.7%, with the 75th percentile at 4.6%","6af497f0":"# Economy","44bd364f":"The \"top 5\" were hit hardest in the beginning and the death rate dropped down in a month. Either they had figured out how to give better treatment or the new patients were younger and more likely to recover","b9f0fec5":"# By Country","be1eb4f5":"## Total_cases","b721b36d":"Comment: Even with higher stringent index, the total cases and total deaths still increased. Maybe people were not following rules? Maybe need to take at least 2 months to see the effect?","8668a7a9":"## Death rate (total_death \/ total_cases)\nThe value is the maximum since the day with COVID-19. It will decrease if there are more cases but less death","1977772e":"Comment: \n* gdp_per_capita and human_development_index had high VIF, indicating that these two variables are highly correlated. Only input one factor into the model.\n* In this case, gdp_per_capita is affected by number of population. Hence if we want to adjust for population, we should use human_development_index","87f3aae7":"**Comment:** Adj. R-squared for both cases and deaths are very low, indicating that the model is not good. Possible fix is to add more factors, which we do not have here.","e73f6a2b":"Comment: With lower population, low number of cases will turn out to be high in percentage","6127e4da":"## human_development_index","724641b3":"### Normalized by population","d8033d60":"# Stringency index\n\nWhat is Stringency Index?\n\n*     It is among the metrics being used by the Oxford COVID-19 Government Response Tracker.\n*     The Tracker involves a team of 100 Oxford community members who have continuously updated a database of 17 indicators of government response.\n*     These indicators examine containment policies such as school and workplace closings, public events, public transport, stay-at-home policies.\n*     The Stringency Index is a number from 0 to 100 that reflects these indicators. A higher index score indicates a higher level of stringency.\n\n(Source: https:\/\/www.civilsdaily.com\/news\/what-is-stringency-index\/)","af0bf41f":"### Normalized by population","4ee4afe6":"# Check data","d14e42f5":"## Overlay stringency_index with total_deaths (1 country)\nRed = total deaths, blue = stringent index"}}