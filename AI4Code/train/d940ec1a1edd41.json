{"cell_type":{"c7ca40b7":"code","80b5c592":"code","6af7e5f6":"code","8ea42308":"code","e71d4f01":"code","c1e6b216":"code","e1c35031":"code","8a0a4b66":"code","ea741b6c":"code","2c1b0668":"code","71137b21":"code","3bae35e1":"code","9f7e553b":"code","b58a386d":"code","fdd08c99":"code","7f29dc25":"code","435f68f8":"code","ad8981f7":"code","bc8b97c8":"code","f69cf55e":"code","e107c792":"code","29c8f4d9":"markdown","f1eb9e8e":"markdown","59e96f71":"markdown","c4724e3c":"markdown","b9703dbf":"markdown","b8d51084":"markdown","0731c340":"markdown","5f633f31":"markdown"},"source":{"c7ca40b7":"# Set up working environment\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","80b5c592":"df = pd.read_csv('..\/input\/knn-project\/KNN_Project_Data')","6af7e5f6":"# Pre-view Dataset\ndf.head()","8ea42308":"df.info()","e71d4f01":"sns.pairplot(df,hue='TARGET CLASS')","c1e6b216":"# set up environment\nfrom sklearn.preprocessing import StandardScaler","e1c35031":"# Drop the 'TARGET CLASS' column as it doesnt need to be standardized\nscaler = StandardScaler()\nscaler.fit(df.drop('TARGET CLASS',axis = 1))","8a0a4b66":"# Transform the features to a scaled version\nscaled_features = scaler.transform(df.drop('TARGET CLASS',axis = 1))\n\n# Convert the scaled features to a dataframe\ndf_feat = pd.DataFrame(scaled_features,columns = df.columns[:-1] )","ea741b6c":"# Check the head of this dataframe to make sure the scaling worked.\ndf_feat.head()","2c1b0668":"# Set up the lovely workplace\nfrom sklearn.model_selection import train_test_split","71137b21":"# Training set and Testing set are formed\nX_train, X_test, y_train, y_test = train_test_split(df_feat,df['TARGET CLASS'], test_size=0.33, random_state=42)","3bae35e1":"from sklearn.neighbors import KNeighborsClassifier","9f7e553b":"# Apply n_neighbers = 1 for the initial training.\nknn = KNeighborsClassifier(n_neighbors=1)","b58a386d":"# Fit the KNN model to the training data\nknn.fit(X_train,y_train)","fdd08c99":"# Set up prediction variable and apply the model to Testing data\npred = knn.predict(X_test)","7f29dc25":"from sklearn.metrics import classification_report,confusion_matrix","435f68f8":"print(confusion_matrix(y_test,pred))","ad8981f7":"# Let's have a look  the report\nprint(classification_report(y_test,pred))","bc8b97c8":"# Use for loop to test different n_neighbors values\/ K value\nerror_rate = []\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pre_i = knn.predict(X_test)\n    error_rate.append(np.mean(pre_i != y_test))","f69cf55e":"sns.set_style('whitegrid')\nplt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color = 'blue',ls = 'dashed',marker = 'o',markerfacecolor='red',markersize = 10)\nplt.title(\"Error Rate vs. K value\")\nplt.xlabel('K')\nplt.ylabel('Error Rate')","e107c792":"knn = KNeighborsClassifier(n_neighbors=34)\nknn.fit(X_train,y_train)\npred = knn.predict(X_test)\nprint('WITH K = 34')\nprint('\\n')\nprint(confusion_matrix(y_test,pred))\nprint('\\n')\nprint(classification_report(y_test,pred))","29c8f4d9":"# Step 1: Standardize the variables","f1eb9e8e":"It seems when K value = 34. the prediction performance is the best.","59e96f71":"# Applying KNN","c4724e3c":"Well, precision rate = 0.72, not quite good, let's find out a better *n_neighbors* value","b9703dbf":"# Train Test Split\nUse train_test_split to split the data into a training set and a testing set.","b8d51084":"Now the Precision rate increases from 0.72 to 0.83. \nWe get a better prediction model after optimization!","0731c340":"# Introduction\n\nAnalysis conducted by Lion SHI\n\nThis notebook is going to conduct machine learning on a anonymous dataset with K Nearest Neighbors method. \nIn order to build up a prediction model to predict the \"TARGET CLASS\"  of the anonymous, we are going to go through 4 steps, they are:\n\n1) Standardize the data\n\n2) Divide the data into 2 parts, one for modeling , another one for testing the model\n\n3) After getting the initial results, we will improve the prediction model \n\n4) Retest the data with modified model\n\n","5f633f31":"# Predictions and Evlauations\n"}}