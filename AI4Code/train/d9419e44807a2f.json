{"cell_type":{"4f9a856b":"code","1e3e0901":"code","fe5bf152":"code","4780bc99":"code","b26ed8b3":"code","a772d0db":"code","103570f1":"code","d2d5c447":"code","9832e674":"code","03fa3753":"code","3b3c338b":"code","7c1a974a":"code","2a6e7e3a":"markdown"},"source":{"4f9a856b":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport plotly.express as px\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","1e3e0901":"dataset = pd.read_csv('..\/input\/iris-flower-dataset\/IRIS.csv')","fe5bf152":"print(dataset.head())\nprint(dataset.info())\nprint(dataset.describe())\nprint(dataset.shape)\nprint(dataset.groupby('species').size())\n#View data. Good to see everything together to compare. ","4780bc99":"fig = px.strip(dataset, x = list(dataset.columns)[:-1], title='Iris dataset boxplot', color = dataset.species)\nfig.show()","b26ed8b3":"fig = px.scatter(dataset, x=\"sepal_width\", y=\"sepal_length\", color=\"species\")\nfig.show()\n\nfig = px.scatter(dataset, x=\"petal_width\", y=\"petal_length\", color=\"species\")\nfig.show()","a772d0db":"X = dataset.drop('species', axis=1)\nY = dataset.species","103570f1":"X_train, X_val, Y_train, Y_val = train_test_split(X,Y, test_size=0.25, random_state=99)","d2d5c447":"models = []\nmodels.append(('LR', LogisticRegression(solver='liblinear',multi_class='ovr')))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC(gamma='auto')))\n\nresults = []\nnames = []\nScore_df = pd.DataFrame()\n\nfor name, model in models:\n    kfold = StratifiedKFold(n_splits=10, random_state=99, shuffle=True)\n    cv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='accuracy')\n    Score_df[name] = cv_results\n    print('%s: mean - %f std - %f' % (name, cv_results.mean(), cv_results.std()))\n    #print(confusion_matrix(Y_val, predictions))\n    #print(classification_report(Y_val, predictions))","9832e674":"fig = px.box(Score_df, title='Cross Validation Results')\nfig.show()","03fa3753":"model = SVC(gamma='auto')\nmodel.fit(X_train, Y_train)\npredictions = model.predict(X_val)\nprint(accuracy_score(Y_val, predictions))\nprint(confusion_matrix(Y_val, predictions))\nprint(classification_report(Y_val, predictions))","3b3c338b":"model2 = KNeighborsClassifier()\nmodel2.fit(X_train, Y_train)\npredictions2 = model2.predict(X_val)\nprint(accuracy_score(Y_val, predictions2))\nprint(confusion_matrix(Y_val, predictions2))\nprint(classification_report(Y_val, predictions2))","7c1a974a":"model3 = LinearDiscriminantAnalysis()\nmodel3.fit(X_train, Y_train)\npredictions3 = model3.predict(X_val)\nprint(accuracy_score(Y_val, predictions3))\nprint(confusion_matrix(Y_val, predictions3))\nprint(classification_report(Y_val, predictions3))","2a6e7e3a":"KNN, SVM and LDA have the best scores. "}}