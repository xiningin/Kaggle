{"cell_type":{"42848fa2":"code","880ac044":"code","f2edb9b0":"code","c2d3357c":"code","a83cbfbe":"code","fbd2a4a0":"code","16771722":"code","879f406d":"code","bd129024":"code","274d7a67":"code","4e23b6bc":"code","c6bde876":"code","adb8cc0a":"code","ec061946":"code","79e0b28e":"code","624e5ee5":"code","cd17d5c0":"code","794e7c64":"code","3a8a7304":"code","70b7ddcf":"code","52a489d7":"code","0e08eb56":"code","548b9b49":"code","ab1b260e":"code","698b0790":"code","57b4025e":"code","daaf829e":"code","4176a789":"code","09675836":"code","1c22bdf6":"code","ae8e8222":"code","d5af6c3a":"code","f1a01644":"code","1ff9c268":"code","d03f0c67":"code","173202eb":"code","ed416246":"code","d3c6eda0":"code","719567e2":"code","946ba5ec":"code","82b1a14c":"code","aa813903":"code","fb5356fc":"code","03f43951":"code","7b16ac9c":"code","6cc0e4af":"code","7b8656c4":"code","e41763d2":"code","22f5fa86":"code","c683d582":"code","fb402e74":"code","b13490c8":"code","c86c6e66":"code","c9c71644":"code","6b157ee1":"code","46d056ae":"code","d61d1fc6":"code","6e63b23e":"code","0cc1ed04":"code","c5794faa":"code","25fa3b08":"code","1b18b093":"code","6b0448b6":"code","06f9be14":"code","19db907f":"code","8d2eeb64":"code","b950edcc":"code","fa9f22bb":"code","06a03092":"code","8b85d6c5":"code","8285d0ff":"code","d2eda5d9":"markdown","1ff9a4d8":"markdown","4da57dce":"markdown","6e77c916":"markdown","9e3e6f85":"markdown","6ae2e903":"markdown","fce4bf7b":"markdown","b2677a4c":"markdown","b79934c7":"markdown","339e224d":"markdown","b6ecc4c1":"markdown","69992ce7":"markdown","dafc45c8":"markdown","462d1215":"markdown"},"source":{"42848fa2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","880ac044":"import warnings\nwarnings.filterwarnings('ignore')","f2edb9b0":"train_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')","c2d3357c":"test_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","a83cbfbe":"train_data.head()","fbd2a4a0":"test_data.head()","16771722":"train_data.shape","879f406d":"del train_data['PoolQC']","bd129024":"del test_data['PoolQC']","274d7a67":"del train_data['Id']","4e23b6bc":"list_of_categorical = []\nlist_of_numerical = []\nfor i in train_data.columns:\n    if train_data[i].dtypes == 'object':\n        list_of_categorical.append(i)\n    else:\n        if i == 'SalePrice':\n            pass\n        else:\n            list_of_numerical.append(i)","c6bde876":"len(list_of_categorical)","adb8cc0a":"len(list_of_numerical)","ec061946":"from sklearn.feature_extraction import DictVectorizer","79e0b28e":"from sklearn_pandas import DataFrameMapper, CategoricalImputer","624e5ee5":"from sklearn.pipeline import Pipeline, FeatureUnion","cd17d5c0":"import xgboost as xgb","794e7c64":"from sklearn.preprocessing import Imputer, FunctionTransformer","3a8a7304":"from sklearn.impute import SimpleImputer","70b7ddcf":"# idea taken from https:\/\/stackoverflow.com\/a\/52090830\/7886239\n\ntransformers = []\n\ntransformers.extend([([num_feat],SimpleImputer(strategy='median')) for num_feat in list_of_numerical])\ntransformers.extend([(cat_feat,CategoricalImputer()) for cat_feat in list_of_categorical])\n\ncombined_pipeline = DataFrameMapper(transformers,\n                                   input_df=True,\n                                   df_out=True)","52a489d7":"def return_dict(blob):\n    return blob.to_dict(\"records\")","0e08eb56":"pipeline = Pipeline([\n    ('featureunion',combined_pipeline),\n    ('dictifier',FunctionTransformer(func=return_dict,validate=False)),\n    ('vectorizer',DictVectorizer(sort=False)),\n    ('reg',xgb.XGBRegressor(objective=\"reg:squarederror\"))\n])","548b9b49":"from sklearn.model_selection import train_test_split","ab1b260e":"X_train, X_test, y_train, y_test = train_test_split(\n...     train_data.drop(['SalePrice'],axis=1), train_data['SalePrice'], test_size=0.15, random_state=42)","698b0790":"pipeline.fit(X_train,y_train)","57b4025e":"predictions = pipeline.predict(X_test)","daaf829e":"from sklearn.metrics import mean_squared_log_error","4176a789":"print(np.sqrt(mean_squared_log_error(y_test,predictions)))","09675836":"from sklearn.model_selection import RandomizedSearchCV","1c22bdf6":"params = {\n    'reg__max_depth' : [5,10,15,20],\n    'reg__gamma' : [.1,.2,.3,.4,.5,.6],\n    'reg__colsample_bytree' : [.1,.2,.3,.4,.5,.6,.7],\n    'reg__reg_alpha' : np.arange(0,0.6,0.1)\n}","ae8e8222":"grid_pipe = RandomizedSearchCV(estimator=pipeline,param_distributions=params,cv=4,\n                               scoring=\"neg_mean_squared_log_error\",n_iter=15)","d5af6c3a":"%%time\ngrid_pipe.fit(X_train,y_train)","f1a01644":"grid_pipe.best_params_","1ff9c268":"grid_pipe.best_score_","d03f0c67":"pipe_predict = grid_pipe.predict(X_test)","173202eb":"print(np.sqrt(mean_squared_log_error(y_test,pipe_predict)))","ed416246":"import lightgbm as lgb","d3c6eda0":"pipeline_lgm = Pipeline([\n    ('featureunion',combined_pipeline),\n    ('dictifier',FunctionTransformer(func=return_dict,validate=False)),\n    ('vectorizer',DictVectorizer(sort=False)),\n    ('reg_lgb',lgb.LGBMRegressor())\n])","719567e2":"pipeline_lgm.fit(X_train,y_train)","946ba5ec":"pipeline_lgm_predict = pipeline_lgm.predict(X_test)","82b1a14c":"print(np.sqrt(mean_squared_log_error(y_test,pipeline_lgm_predict)))","aa813903":"params_lgb = {\n    'reg_lgb__learning_rate' : [.1,.2,.3,.4,.5,.6],\n    'reg_lgb__n_estimators' : [50,100,200],\n    'reg_lgb__colsample_bytree' : [.1,.2,.3,.4,.5,.6,.7],\n    'reg_lgb__reg_lambda' : np.arange(0,0.6,0.1)\n}","fb5356fc":"grid_pipe_lgm = RandomizedSearchCV(estimator=pipeline_lgm,param_distributions=params_lgb,cv=4,\n                               scoring=\"neg_mean_squared_log_error\",n_iter=15)","03f43951":"%%time\ngrid_pipe_lgm.fit(X_train,y_train)","7b16ac9c":"grid_pipe_lgm.best_params_","6cc0e4af":"grid_pipe_lgm.best_score_","7b8656c4":"lgm_pipe_predict = grid_pipe_lgm.predict(X_test)","e41763d2":"print(np.sqrt(mean_squared_log_error(y_test,lgm_pipe_predict)))","22f5fa86":"from sklearn.linear_model import ElasticNet","c683d582":"pipeline_elasticnet = Pipeline([\n    ('featureunion',combined_pipeline),\n    ('dictifier',FunctionTransformer(func=return_dict,validate=False)),\n    ('vectorizer',DictVectorizer(sort=False)),\n    ('reg_en',ElasticNet())\n])","fb402e74":"pipeline_elasticnet.fit(X_train,y_train)","b13490c8":"predicted_base_elastic_net = pipeline_elasticnet.predict(X_test)","c86c6e66":"print(np.sqrt(mean_squared_log_error(y_test,predicted_base_elastic_net)))","c9c71644":"params_elasticnet = {\n    'reg_en__l1_ratio' : [0.2,0.4,0.6,0.8],\n    'reg_en__alpha' : [0.5,1,1.5,2],\n}","6b157ee1":"grid_pipe_elastic = RandomizedSearchCV(estimator=pipeline_elasticnet,param_distributions=params_elasticnet,cv=4,\n                               scoring=\"neg_mean_squared_error\")","46d056ae":"%%time\ngrid_pipe_elastic.fit(X_train,y_train)","d61d1fc6":"grid_pipe_elastic.best_params_","6e63b23e":"grid_pipe_elastic.best_score_","0cc1ed04":"print(np.sqrt(mean_squared_log_error(y_test,grid_pipe_elastic.predict(X_test))))","c5794faa":"from sklearn.ensemble import VotingRegressor","25fa3b08":"xgb_final = xgb.XGBRegressor(objective=\"reg:squarederror\",\n                        reg_alpha = 0.1,\n                        reg__max_depth =  5,\n                        reg__gamma =  0.6,\n                        reg__colsample_bytree =  0.4)","1b18b093":"lgm_final = lgb.LGBMRegressor(reg_lambda = 0.2,\n                             n_estimators = 200,\n                             learning_rate = 0.1,\n                             colsample_bytree = 0.3)","6b0448b6":"elastic_final = ElasticNet(alpha=.5,l1_ratio=.6)","06f9be14":"final_regressor = VotingRegressor(estimators=[\n    ('xgb',xgb_final),\n    ('lgm',lgm_final),\n    ('elastic',elastic_final)\n])","19db907f":"pipeline_final = Pipeline([\n    ('featureunion',combined_pipeline),\n    ('dictifier',FunctionTransformer(func=return_dict,validate=False)),\n    ('vectorizer',DictVectorizer(sort=False)),\n    ('regressor',final_regressor)\n])","8d2eeb64":"X = train_data.drop(['SalePrice'],axis=1)\ny = train_data['SalePrice']","b950edcc":"Id = test_data['Id']","fa9f22bb":"test_final = test_data.drop(['Id'],axis=1)","06a03092":"pipeline_final.fit(X,y)","8b85d6c5":"final_preds = pipeline_final.predict(test_final)","8285d0ff":"submission = pd.DataFrame({ 'Id': Id,\n                            'SalePrice': final_preds })\nsubmission.to_csv(path_or_buf =\"Housing_Regression.csv\", index=False)","d2eda5d9":"**Lets use lgbm to predict prices**","1ff9a4d8":"Fine tuning elastic net","4da57dce":"Building a pipeline for lgbm","6e77c916":"**using xgboost to predict prices**","9e3e6f85":"# Submission","6ae2e903":"# Model","fce4bf7b":"**Building final model with best parameters and calculating on full train data with voting regressor**","b2677a4c":"# Ensemble of regressors","b79934c7":"Deleting 'PoolQC' feature since its fully null","339e224d":"Extracting text cols","b6ecc4c1":"**Our base model is working great so lets use RandomizedSearchCv to furthur improve it**","69992ce7":"Lets fine tune this regressor too","dafc45c8":"# Pipeline building","462d1215":"**Now predicting prices with ElasticNet Regressor**"}}