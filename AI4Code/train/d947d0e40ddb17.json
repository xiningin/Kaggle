{"cell_type":{"4e58b3f0":"code","4f31ab7f":"code","216c69c8":"code","93f54c7d":"code","c5eebed6":"code","806129a3":"code","8457aa40":"code","7e3e1635":"code","89f00aab":"code","c8187375":"code","ce9e9627":"code","1727eeaa":"code","1dcc7a15":"code","ca435728":"markdown","e33c69f0":"markdown","b73cc938":"markdown","d5ed9da4":"markdown","5a9fb359":"markdown"},"source":{"4e58b3f0":"!pip install vit_keras -q ","4f31ab7f":"import os\nimport cv2\nimport sys\nimport random\nimport warnings\nimport numpy as np \nimport pandas as pd\nfrom time import time\nfrom itertools import chain\nfrom tqdm.notebook import tqdm\nimport matplotlib.pyplot as plt \nfrom skimage.transform import resize\nfrom skimage.morphology import label\nfrom skimage.io import imread, imshow, imread_collection, concatenate_images\n\nimport tensorflow as tf\nfrom vit_keras import  vit, utils \nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.regularizers import l2\nfrom tensorflow.keras.models import load_model, Model\nfrom tensorflow.keras.optimizers import RMSprop, Adam\nfrom tensorflow.keras.losses import binary_crossentropy\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\nfrom tensorflow.keras.layers import (\n    Dense, Input, Dropout, Lambda, Conv2D, Conv2DTranspose, MaxPooling2D, Concatenate, \n    Activation, Add, multiply, add, concatenate, LeakyReLU, ZeroPadding2D, UpSampling2D, \n    BatchNormalization, SeparableConv2D, Flatten )\n\nfrom sklearn.metrics import classification_report\n%matplotlib inline","216c69c8":"MAIN_PATH = '..\/input\/chest-xray-pneumonia\/chest_xray\/'","93f54c7d":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(rescale=1.\/255,\n                             validation_split=0.25,\n                             zoom_range=0.1,\n                             rotation_range=0.2,\n                             horizontal_flip=True,\n                             vertical_flip=True,\n                             fill_mode='nearest')\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ndef get_transforms(data):\n    \n    if data == 'train':\n        IMG_TRAIN = MAIN_PATH +'train\/'\n        train_generator = datagen.flow_from_directory(\n            # dataframe = train,\n            directory = IMG_TRAIN,\n            # x_col = 'filename',\n            # y_col = 'label',\n            batch_size  = 8,\n            shuffle=True,\n            class_mode = 'categorical',\n            target_size = (224, 224)\n        )\n\n        return train_generator\n\n    elif data == 'valid':\n        IMG_VAL = MAIN_PATH + 'val\/'\n        valid_generator = datagen.flow_from_directory(\n            # dataframe = valid,\n            directory = IMG_VAL,\n            # x_col = 'filename',\n            # y_col = 'label',\n            batch_size = 8,\n            shuffle = True,\n            class_mode = 'categorical',\n            target_size = (224, 224)\n        )\n\n        return valid_generator\n\n    else :\n        IMG_TEST = MAIN_PATH + 'test\/'\n        test_generator = test_datagen.flow_from_directory(\n            # dataframe = test,\n            directory = IMG_TEST,\n            # x_col = 'filename',\n            # y_col = None,\n            batch_size = 8,\n            shuffle = False,\n            class_mode = None,\n            target_size = (224, 224)\n        )\n\n        return test_generator","c5eebed6":"train = get_transforms('train')\nvalid = get_transforms('valid')\ntest = get_transforms('test')","806129a3":"from keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint\n\nreduce_learning_rate = ReduceLROnPlateau(\n    monitor='val_loss', factor=0.25, patience=5, verbose=1, mode='auto',\n    min_delta=1e-10, cooldown=0, min_lr=0\n)\n\nearly_stopping = EarlyStopping(\n    monitor='val_loss', min_delta=0, patience=9, verbose=1, mode='auto',\n    baseline=None, restore_best_weights=True\n)\n\nckpt = ModelCheckpoint(\n    filepath = '.\/saved_model\/checkpoint\/',\n    save_weights_only = True,\n    monitor = 'val_loss',\n    mode = 'min',\n    save_best_only = True\n)\n\ncallbacks = [reduce_learning_rate, early_stopping, ckpt]","8457aa40":"image_size = 224\nmodel = vit.vit_b16(\n    image_size = image_size,\n    activation = 'softmax',\n    pretrained = True,\n    include_top = True,\n    pretrained_top = False,\n    classes = 2\n)","7e3e1635":"model.compile(optimizer=Adam(lr=0.0001, decay=1e-6), loss='binary_crossentropy', metrics=['accuracy'])","89f00aab":"history = model.fit(train, epochs=50, validation_data=valid, callbacks=callbacks, verbose=1)","c8187375":"model.evaluate(valid, verbose=1)","ce9e9627":"y_pred = model.predict(test, verbose=1)\ny_pred = np.argmax(y_pred, axis = 1)","1727eeaa":"def create_df (dataset, label):\n    filenames = []  \n    labels = []\n    for file in os.listdir(MAIN_PATH + f'{dataset}\/{label}'):\n        filenames.append(file)\n        labels.append(label)\n    return pd.DataFrame({'filename':filenames, 'label':labels})\n\ntest_NORMAL = create_df('test', 'NORMAL')\ntest_PNEUMONIA = create_df('test', 'PNEUMONIA')\ntest_ori = test_NORMAL.append(test_PNEUMONIA, ignore_index=True)\ntest_ori['label'] = test_ori['label'].apply(lambda x: 0 if x=='NORMAL' else 1)\ny_true = test_ori['label'].values","1dcc7a15":"print(classification_report(y_true, y_pred))","ca435728":"## Callbacks","e33c69f0":"## Model","b73cc938":"## Setup","d5ed9da4":"## Train","5a9fb359":"## Data Augmentation"}}