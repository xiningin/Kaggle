{"cell_type":{"cdd57e37":"code","29f385a9":"code","a8b92d16":"code","0062c24e":"code","15fe65bb":"code","0378c7f3":"code","d613e656":"code","f8374162":"code","3c4a04a0":"code","37831bbc":"code","eb573072":"code","a3c427b2":"code","2801cecd":"code","cdeb464b":"markdown","19348f24":"markdown","100b4f65":"markdown","0336699d":"markdown","9027d29c":"markdown","50926aab":"markdown","7e520330":"markdown"},"source":{"cdd57e37":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import metrics\n\nfrom sklearn import preprocessing\n\nfrom yellowbrick.classifier import ConfusionMatrix\nfrom yellowbrick.classifier import ClassificationReport\nplt.style.use('ggplot')","29f385a9":"dataset = pd.read_csv('..\/input\/train.csv')\ndataset.head()","a8b92d16":"dataset.describe(include = \"all\")","0062c24e":"dataset.shape","15fe65bb":"dataset.isnull().sum(axis=0)","0378c7f3":"sns.countplot(dataset['Embarked'])","d613e656":"# File missing values in embarked with S which is the most frequent item.\ndataset = dataset.fillna({\"Embarked\": \"S\"})","f8374162":"# Sex feature\nle_sex = preprocessing.LabelEncoder()\nle_sex.fit([\"male\", \"female\"])\ndataset['Sex'] = le_sex.transform(dataset['Sex'])","3c4a04a0":"# Embark feature\nle_embark = preprocessing.LabelEncoder()\nle_embark.fit([\"S\", \"C\", \"Q\"])\ndataset['Embarked'] = le_embark.transform(dataset['Embarked'])","37831bbc":"train_class = dataset[['Survived']]\ntrain_feature = dataset[['Pclass', 'Sex', 'Embarked', 'Parch', 'SibSp', 'Fare']]\ntrain_feature.head()","eb573072":"clf = GaussianNB()\n\nscoring = {'acc': 'accuracy',\n           'prec_macro': 'precision_macro',\n           'rec_macro': 'recall_macro',\n           'f1_macro': 'f1_macro'}\nscores = cross_validate(clf, train_feature, train_class.values.ravel(), cv=10, scoring=scoring)\n\nprint(scores.keys())\n\nprint ('Accuracy score : %.3f' % scores['test_acc'].mean())\nprint ('Precisoin score : %.3f' % scores['test_prec_macro'].mean())\nprint ('Recall score : %.3f' % scores['test_rec_macro'].mean())\nprint ('F1 score : %.3f' % scores['test_f1_macro'].mean())","a3c427b2":"# Loading test dataset\ntest = pd.read_csv('..\/input\/test.csv')\n\n# Fit the model\nclf.fit(train_feature, train_class.values.ravel())\n\n# Replace missing Fare values with mean\nmeanFare = dataset['Fare'].mean()\ntest = test.fillna({\"Fare\": meanFare})\n\n# Categorical -> numerical conversion\ntest['Sex'] = le_sex.transform(test['Sex'])\ntest['Embarked'] = le_embark.transform(test['Embarked'])\n\n#set ids as PassengerId and predict survival\nids = test['PassengerId']\ntest_feature = test[['Pclass', 'Sex', 'Embarked', 'Parch', 'SibSp', 'Fare']]\npredictions = clf.predict(test_feature)\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'PassengerId' : ids, 'Survived': predictions })\noutput.head()","2801cecd":"output.to_csv('submission.csv', index=False)","cdeb464b":"**Missing value identification\/ handling**","19348f24":"**Applying model**","100b4f65":"**Creating submission file**","0336699d":"**Handling categorical variables**","9027d29c":"**Workspace preparation**","50926aab":"> Rerefences: https:\/\/pypi.org\/project\/yellowbrick\/","7e520330":"**Loading data file**"}}