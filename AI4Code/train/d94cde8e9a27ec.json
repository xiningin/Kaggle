{"cell_type":{"242ac529":"code","9b0ffd33":"code","b4da0158":"code","c80db898":"code","35f84c4d":"code","b60b3b2e":"code","14fd3298":"code","94e2e163":"code","74fce363":"code","a31cb324":"code","7b39b636":"code","5a45ac1c":"code","863bb344":"code","e7598f38":"code","ff7d0d9a":"code","c894fa4d":"code","31b24ec1":"code","302c24f9":"code","2f6bdce8":"code","e7d501c1":"code","28a89ec6":"code","be20692f":"code","cc2c00c5":"code","cfbfe61a":"code","05bdbc57":"code","4d5df604":"code","73c2d975":"code","8f7097e4":"code","d517cf30":"code","9437208e":"code","1dc83bc7":"code","6a52a5e5":"code","f150344d":"code","14121032":"code","62106925":"code","c905cf2d":"code","3029acbc":"code","c2e0c3e1":"code","6c3a16ea":"code","bbc57d99":"code","49ad8512":"code","9fb2c296":"code","bfc39524":"code","c6762941":"code","32d2d15a":"code","4652fd69":"code","91989b91":"code","8f664171":"code","b7654253":"code","d7287329":"code","55d64817":"code","5028c4c5":"code","b4d54440":"code","0d63a795":"code","fc21cef4":"code","05c2e01e":"code","5acf2e62":"code","cebbf30b":"code","b564e607":"code","06cd4bdb":"code","7c66eeb7":"code","03056a0a":"code","3c173df7":"code","7ab48e82":"code","720af2af":"code","816acce0":"code","d76c72c2":"code","d665b261":"code","ea7be73c":"code","177f116e":"code","ea1d42c6":"code","9887254d":"code","ab8de39b":"code","10d1ba77":"code","adb3dc01":"code","747b85dd":"code","eaef2915":"code","0f3cb703":"code","384d8ef9":"code","1bbef8f3":"code","9d246348":"code","491f8885":"code","e217bac4":"code","8ee78835":"code","b5b636eb":"code","d5be3534":"code","e3bd6864":"code","4dc3042f":"code","b3d72e52":"code","53d28e10":"code","354cd5e8":"code","40fcc9e3":"code","ea39c797":"code","8deee01b":"code","09f4841f":"code","ae1dfae6":"code","098f8de8":"code","fb0f2fa7":"code","05bab5f6":"code","ae05d02d":"code","1a689b9c":"code","bf464aeb":"code","18cacec3":"code","f0ac6d21":"code","75c87891":"code","5e8a78dd":"code","ff683489":"code","cc25cb9f":"code","6349ffaf":"markdown","2b331159":"markdown","504a4cba":"markdown","ab3df4e3":"markdown","aab1105f":"markdown","172debcd":"markdown","c82be02c":"markdown","b6bb0d13":"markdown","4e13c6fa":"markdown","6212ff0f":"markdown","7654f328":"markdown","5eabf894":"markdown","cba6ad5b":"markdown","ac8345be":"markdown","5afd19b4":"markdown","2a9a89e2":"markdown","354edf3a":"markdown","7fdde46c":"markdown"},"source":{"242ac529":"# Nativos\nimport random as rn\nimport os\nimport sys\nimport gc\n\n#calculo\nimport numpy as np\nimport pandas as pd\nimport scipy\n\n#grafico\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import display\n%matplotlib inline\nsns.set(style=\"whitegrid\")\n\n#warning ignore future\nimport warnings\n# warnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.filterwarnings(\"ignore\")\ngc.collect()\n\nBASE_DIR = os.path.dirname(os.getcwd())\nif BASE_DIR not in sys.path: sys.path.append(BASE_DIR)\n\nSEED = 29082013\nos.environ['PYTHONHASHSEED'] = str(SEED)\nnp.random.seed(SEED)\nrn.seed(SEED)\n\nfrom google.colab import drive\ndrive.mount('\/content\/drive')\n\nsubfolder = 'drive\/My Drive\/Datathon_Belcorp_2019_Fase I\/data\/'\n!ls 'drive\/My Drive\/Datathon_Belcorp_2019_Fase I\/data'","9b0ffd33":"!pwd","b4da0158":"campana_consultora = pd.read_csv(\n    \"{}\/campana_consultora.csv\".format(subfolder)\n).iloc[:, 1:]\n\ncampana_consultora.head(3)","c80db898":"campana_consultora.shape, len(campana_consultora)","35f84c4d":"def null_verificator(data):        \n    if data.isnull().any().any():\n        view_info = pd.DataFrame(\n            pd.concat(\n                [data.isnull().any(), \n                 data.isnull().sum(),\n                 data.dtypes], \n                axis=1)\n        )\n        view_info.columns = ['Nulos', 'Cantidad', 'Tipo Col']\n        size = data.shape[0]\n        view_info['Porcentaje'] = view_info['Cantidad'].apply(\n            lambda x: np.round(0 if not x else x*100 \/ size, 2))\n        return view_info\n    else:\n        return pd.DataFrame.from_dict({'msje':\"DATA LIMPIA DE NULOS\"}, orient='index')","b60b3b2e":"null_verificator(campana_consultora)","14fd3298":"# Se eliminan los 4 campos con mas del 5% de data nula\ndel campana_consultora['codigofactura']\ndel campana_consultora['codigocanalorigen']\ndel campana_consultora['cantidadlogueos']\ndel campana_consultora['flagdigital']","94e2e163":"for col in campana_consultora.columns:\n    print(col, campana_consultora[col].unique().shape[0])","74fce363":"\ncampana_consultora['evaluacion_nuevas'].value_counts(dropna=False)","a31cb324":"campana_consultora[campana_consultora['evaluacion_nuevas'].isnull()]","7b39b636":"campana_consultora[campana_consultora['IdConsultora'].isin(\n    [715152, 718457, 671088, 738278]\n)].sort_values(\n    by=['campana', 'IdConsultora']\n).groupby(\n    by=['IdConsultora']\n).agg({\n    'campana': list, 'Flagpasopedido': list, 'flagactiva': list, \n    'evaluacion_nuevas': list, 'segmentacion': list, 'geografia': list\n})","5a45ac1c":"campana_consultora['evaluacion_nuevas'].fillna('reingreso_sin_venta', inplace=True)","863bb344":"\nnull_verificator(campana_consultora)","e7598f38":"sub = pd.read_csv(\n    \"{}\/predict_submission.csv\".format(subfolder)\n)\nsub.head(3)","ff7d0d9a":"list_user_sub = list(sub['idconsultora'].unique())\nlen(list_user_sub)","c894fa4d":"# Seleccionamos los usuarios que no tienen actividad en la campana 201907\nno_continuos = campana_consultora[\n    ~campana_consultora['IdConsultora'].isin(list_user_sub)\n].sort_values(\n    by=['campana', 'IdConsultora']\n)\nno_continuos.shape","31b24ec1":"# Observamos su comportamiento\npd.set_option('display.max_colwidth', 150)\n\ncampana = pd.DataFrame(\n    no_continuos.groupby(\n        by=['IdConsultora']\n    ).agg(\n        {'campana': list, 'Flagpasopedido': list, 'flagactiva': list, \n         'evaluacion_nuevas': list, 'segmentacion': list, 'geografia': list}\n    )\n).reset_index()\n\ncampana['len'] = campana['campana'].apply(lambda _: len(_))\ncampana['summ'] = campana['Flagpasopedido'].apply(lambda _: sum(_))\ncampana['last_sale'] = campana['campana'].apply(lambda _: _[-1])\ncampana['first_sale'] = campana['campana'].apply(lambda _: _[0])\ncampana['evaluacion_first_sale'] = campana['evaluacion_nuevas'].apply(lambda _: _[0])\ncampana['pedido_last_sale'] = campana['Flagpasopedido'].apply(lambda _: _[-1])\ncampana['pedido_first_sale'] = campana['Flagpasopedido'].apply(lambda _: _[0])\n\ncampana","302c24f9":"# Analizamos el numero de campanas registradas con actividad\ncampana['len'].value_counts().sort_index()","2f6bdce8":"# Analizamos si durante su permanencia registraron pedidos\ncampana['summ'].value_counts().sort_index()","e7d501c1":"# Damos un vistazoa los dos unicos que al menos hicieron un pedido segun la data\ncampana[campana['summ'] == 1]","28a89ec6":"# Analizamos su fecha maxima de registro este grupo\ncampana['last_sale'].max()","be20692f":"campana_consultora = campana_consultora[\n    campana_consultora['IdConsultora'].isin(list_user_sub)\n].sort_values(\n    by=['campana', 'IdConsultora']\n)\n\ncampana_consultora.shape","cc2c00c5":"# DAMOS FORMATO A LOS DATOS PARA SU ANALISIS\npd.set_option('display.max_colwidth', 150)\n\ncampana = pd.DataFrame(\n    campana_consultora.groupby(\n        by=['IdConsultora']\n    ).agg(\n        {'campana': list, 'Flagpasopedido': list, 'flagactiva': list, \n         'evaluacion_nuevas': list, 'segmentacion': list, 'geografia': list}\n    )\n).reset_index()\n\ncampana['len'] = campana['campana'].apply(lambda _: len(_))\ncampana['summ'] = campana['Flagpasopedido'].apply(lambda _: sum(_))\ncampana['last_sale'] = campana['campana'].apply(lambda _: _[-1])\ncampana['first_sale'] = campana['campana'].apply(lambda _: _[0])\ncampana['evaluacion_first_sale'] = campana['evaluacion_nuevas'].apply(lambda _: _[0])\ncampana['pedido_last_sale'] = campana['Flagpasopedido'].apply(lambda _: _[-1])\ncampana['pedido_first_sale'] = campana['Flagpasopedido'].apply(lambda _: _[0])\n\ncampana","cfbfe61a":"campana[campana['evaluacion_first_sale'] == 'C_1d1']['pedido_first_sale'].value_counts(dropna=False)","05bdbc57":"def get_target_2(list_campana, list_pedidos, campana_search):\n    if campana_search not in list_campana:\n        return 0\n    else:\n        index_searched = list_campana.index(campana_search)\n        return list_pedidos[index_searched]\n\ncampana['target_201905'] = campana[['campana', 'Flagpasopedido']].apply(\n    lambda _: get_target_2(\n        _['campana'], \n        _['Flagpasopedido'], \n        201906\n    ), axis=1\n)\ncampana['target_201904'] = campana[['campana', 'Flagpasopedido']].apply(\n    lambda _: get_target_2(\n        _['campana'], \n        _['Flagpasopedido'], \n        201905\n    ), axis=1 \n)\ncampana['target_201903'] = campana[['campana', 'Flagpasopedido']].apply(\n    lambda _: get_target_2(\n        _['campana'], \n        _['Flagpasopedido'], \n        201904\n    ), axis=1 \n)","4d5df604":"display(\n    campana['target_201905'].value_counts(dropna=False, normalize=True),\n    campana['target_201904'].value_counts(dropna=False, normalize=True),\n    campana['target_201903'].value_counts(dropna=False, normalize=True)\n)","73c2d975":"campana[\n    ['campana', 'Flagpasopedido', 'last_sale', 'pedido_last_sale',\n     'target_201905', 'target_201904', 'target_201903'\n    ]\n].iloc[65:75]","8f7097e4":"campana[campana['len'] == 1].shape, \\\ncampana[(campana['len'] == 1) & (campana['last_sale'] == 201906)].shape, \\\ncampana[(campana['len'] == 1) & (campana['last_sale'] == 201906) & (campana['pedido_last_sale'] == 1)].shape, \\","d517cf30":"campana[campana['len'] == 2].shape, \\\ncampana[(campana['len'] == 2) & (campana['last_sale'] == 201906)].shape, \\\ncampana[(campana['len'] == 2) & (campana['last_sale'] == 201906) & (campana['pedido_last_sale'] == 1)].shape, \\","9437208e":"campana[campana['len'] == 3].shape, \\\ncampana[(campana['len'] == 3) & (campana['last_sale'] == 201906)].shape, \\\ncampana[(campana['len'] == 3) & (campana['last_sale'] == 201906) & (campana['pedido_last_sale'] == 1)].shape, \\","1dc83bc7":"campana[campana['len'] == 4].shape, \\\ncampana[(campana['len'] == 4) & (campana['last_sale'] == 201906)].shape, \\\ncampana[(campana['len'] == 4) & (campana['last_sale'] == 201906) & (campana['pedido_last_sale'] == 1)].shape, \\","6a52a5e5":"campana[campana['len'] == 5].shape, \\\ncampana[(campana['len'] == 5) & (campana['last_sale'] == 201906)].shape, \\\ncampana[(campana['len'] == 5) & (campana['last_sale'] == 201906) & (campana['pedido_last_sale'] == 1)].shape, \\","f150344d":"campana[campana['len'] == 6].shape, \\\ncampana[(campana['len'] == 6) & (campana['last_sale'] == 201906)].shape, \\\ncampana[(campana['len'] == 6) & (campana['last_sale'] == 201906) & (campana['pedido_last_sale'] == 1)].shape, \\","14121032":"campana[campana['len'] <= 5].shape, \\\ncampana[(campana['len'] <= 5) & (campana['last_sale'] == 201906)].shape, \\\ncampana[(campana['len'] <= 5) & (campana['last_sale'] == 201906) & (campana['pedido_last_sale'] == 1)].shape, \\\ncampana[(campana['len'] <= 5) & (campana['last_sale'] == 201906) & (campana['pedido_last_sale'] == 0)].shape, \\","62106925":"def get_format_data(data, col_id_usuario, cols_for_cross):\n    X_data = []\n    \n    for col in cols_for_cross:\n        if col in data.columns:\n            print(\"-----> \", col)\n\n            temp = pd.crosstab(\n                data[col_id_usuario], data[col]\n            )\n            temp.columns = [col + \"_\" + str(v) for v in temp.columns]\n            X_data.append(\n                temp.apply(lambda x: x \/ x.sum(), axis=1)\n            )\n\n    return pd.concat(X_data, axis=1)","c905cf2d":"def get_extra_data(consultora_hasta, hasta):\n    \n    list_cols_to_list = ['campana', 'Flagpasopedido', 'flagactiva',\n                         'evaluacion_nuevas', 'segmentacion', 'geografia']\n    \n    campana_hasta = pd.DataFrame(\n        consultora_hasta.groupby(\n            by=['IdConsultora']\n        ).agg({\n            col: list for col in list_cols_to_list\n        })\n    ).reset_index()\n    \n    campana_hasta['size_campanas'] = campana_hasta['campana'].apply(lambda _: len(_))\n    campana_hasta['cant_pedidos'] = campana_hasta['Flagpasopedido'].apply(lambda _: sum(_))\n    campana_hasta['cant_pedidos'] = campana_hasta['Flagpasopedido'].apply(lambda _: sum(_))\n    \n    campana_hasta['last_pedido'] = campana_hasta['Flagpasopedido'].apply(lambda _: _[-1])\n    campana_hasta['last_activa'] = campana_hasta['flagactiva'].apply(lambda _: _[-1])\n    campana_hasta['num_campanas_sin_venta'] = campana_hasta['campana'].apply(lambda _: hasta - _[-1])\n    \n    campana_hasta['consultora_mas_de_un_anio'] = campana_hasta['campana'].apply(lambda _: int(_[0] <= 201807))\n    campana_hasta['no_paso_pedido_2_meses'] = campana_hasta['flagactiva'].apply(lambda _: _.count(0))\n    campana_hasta['size_evaluacion_nuevas'] = campana_hasta['evaluacion_nuevas'].apply(lambda _: len(set(_)))\n    campana_hasta['size_segmentacion'] = campana_hasta['segmentacion'].apply(lambda _: len(set(_)))\n    campana_hasta['size_geografia'] = campana_hasta['geografia'].apply(lambda _: len(set(_)))\n    display(campana_hasta.head())\n        \n    for col in list_cols_to_list:\n        del campana_hasta[col]\n    \n    return campana_hasta\n","3029acbc":"cols_cross = ['Flagpasopedido', 'flagactiva', 'flagpasopedidocuidadopersonal', 'flagpasopedidomaquillaje', \n              'flagpasopedidotratamientocorporal', 'flagpasopedidotratamientofacial', 'flagpedidoanulado',\n              'flagpasopedidofragancias', 'evaluacion_nuevas', 'segmentacion', 'flagpasopedidoweb',\n              'flagdispositivo', 'flagofertadigital', 'flagsuscripcion', 'geografia']\n\nid_user = 'IdConsultora'","c2e0c3e1":"test = campana_consultora.copy()\n\ntest = get_format_data(\n    test, id_user, cols_cross\n).reset_index().merge(\n    get_extra_data(test, 201906),\n    on=id_user, how='left'\n)\n\ntest.to_csv(\"{}test.csv\".format(subfolder), index=False)  \ntest.shape","6c3a16ea":"consultoras_hasta_201905 = campana_consultora[campana_consultora['campana'] <= 201905]\n\nconsultoras_hasta_201905 = get_format_data(\n    consultoras_hasta_201905, id_user, cols_cross\n).reset_index().merge(\n    get_extra_data(consultoras_hasta_201905, 201905),\n    on=id_user, how='left'\n)\n\nconsultoras_hasta_201905.shape","bbc57d99":"consultoras_hasta_201904 = campana_consultora[campana_consultora['campana'] <= 201904]\n\nconsultoras_hasta_201904 = get_format_data(\n    consultoras_hasta_201904, id_user, cols_cross\n).reset_index().merge(\n    get_extra_data(consultoras_hasta_201904, 201904),\n    on=id_user, how='left'\n)\n\nconsultoras_hasta_201904.shape","49ad8512":"consultoras_hasta_201903 = campana_consultora[campana_consultora['campana'] <= 201903]\n\nconsultoras_hasta_201903 = get_format_data(\n    consultoras_hasta_201903, id_user, cols_cross\n).reset_index().merge(\n    get_extra_data(consultoras_hasta_201903, 201903),\n    on=id_user, how='left'\n)\n\nconsultoras_hasta_201903.head()","9fb2c296":"consultoras_hasta_201905.shape, consultoras_hasta_201904.shape, consultoras_hasta_201903.shape","bfc39524":"display(\n    consultoras_hasta_201905['size_campanas'].value_counts(dropna=False).sort_index(),\n    consultoras_hasta_201904['size_campanas'].value_counts(dropna=False).sort_index(),\n    consultoras_hasta_201903['size_campanas'].value_counts(dropna=False).sort_index()\n)","c6762941":"campana.columns","32d2d15a":"consultoras_hasta_201905 = consultoras_hasta_201905.merge(\n    campana[['IdConsultora', 'target_201905']].rename(\n        columns={'target_201905': 'target'}\n    ),\n    on='IdConsultora',\n    how='left'\n)\ndisplay(consultoras_hasta_201905.head(3))\n\nconsultoras_hasta_201904 = consultoras_hasta_201904.merge(\n    campana[['IdConsultora', 'target_201904']].rename(\n        columns={'target_201904': 'target'}\n    ),\n    on='IdConsultora',\n    how='left'\n)\ndisplay(consultoras_hasta_201904.head(3))\n\nconsultoras_hasta_201903 = consultoras_hasta_201903.merge(\n    campana[['IdConsultora', 'target_201903']].rename(\n        columns={'target_201903': 'target'}\n    ),\n    on='IdConsultora',\n    how='left'\n)\ndisplay(consultoras_hasta_201903.head(3))","4652fd69":"consultoras_hasta_201905.shape, consultoras_hasta_201904.shape, consultoras_hasta_201903.shape","91989b91":"consultoras_hasta_201905.columns","8f664171":"consultoras_hasta_201905.to_csv(\"{}consultoras_hasta_201905.csv\".format(subfolder), index=False)\nconsultoras_hasta_201904.to_csv(\"{}consultoras_hasta_201904.csv\".format(subfolder), index=False)\nconsultoras_hasta_201903.to_csv(\"{}consultoras_hasta_201903.csv\".format(subfolder), index=False)","b7654253":"maestro_consultora = pd.read_csv(\n    \"{}\/maestro_consultora.csv\".format(subfolder)\n).iloc[:, 1:]\n\nmaestro_consultora.head(3)","d7287329":"null_verificator(maestro_consultora)","55d64817":"# Se elimina la columna por poseer el 70.92% de data nula\ncol_del  = 'flagcorreovalidad'\n\nif col_del in maestro_consultora.columns:\n    del maestro_consultora[col_del]","5028c4c5":"for col in maestro_consultora.columns:\n    print(col, maestro_consultora[col].unique().shape)","b4d54440":"# Se elimina por solo poseer un solo valor (no aporta al modelo)\ncol_del  = 'flagconsultoradigital'\n\nif col_del in maestro_consultora.columns:\n    del maestro_consultora[col_del]","0d63a795":"## VALIDACION DE INICIO Y FIN DE FECHAS:\n\nprint(\">> campanaingreso: \",\n      maestro_consultora.campanaingreso.min(), maestro_consultora.campanaingreso.max())\nprint(\">> campanaprimerpedido: \",\n      maestro_consultora.campanaprimerpedido.min(), maestro_consultora.campanaprimerpedido.max())\nprint(\">> campanaultimopedido: \",\n      maestro_consultora.campanaultimopedido.min(), maestro_consultora.campanaultimopedido.max())","fc21cef4":"display(\n    maestro_consultora.groupby(by=['estadocivil'])[['campanaprimerpedido']].agg(\n        ['mean', 'median', 'min', 'max']\n    )\n)","05c2e01e":"maestro_consultora[maestro_consultora['campanaprimerpedido'].isnull()]","5acf2e62":"maestro_consultora['campanaprimerpedido'].fillna(201806, inplace=True)","cebbf30b":"display(\n    maestro_consultora.groupby(by=['estadocivil'])[['campanaprimerpedido', 'edad']].agg(\n        ['mean', 'median', 'min', 'max']\n    )\n)","b564e607":"maestro_consultora[maestro_consultora['estadocivil'].isnull()][['campanaprimerpedido', 'edad']]","06cd4bdb":"maestro_consultora['estadocivil'].fillna('Divorciado(a)', inplace=True)","7c66eeb7":"def behavior_for_date(df, campana_date, col='campanaultimopedido'):\n    df['ultimo_pedido_menor_a_{}'.format(campana_date)] = df[col].apply(\n        lambda _: int(_ < campana_date)\n    )\n    df['ultimo_pedido_mayor_a_{}'.format(campana_date)] = df[col].apply(\n        lambda _: int(_ > campana_date)\n    )\n    df['ultimo_pedido_igual_a_{}'.format(campana_date)] = df[col].apply(\n        lambda _: int(_ == campana_date)\n    )\n    return df","03056a0a":"\nmaestro_consultora = behavior_for_date(maestro_consultora, 201906)\nmaestro_consultora = behavior_for_date(maestro_consultora, 201905)\nmaestro_consultora = behavior_for_date(maestro_consultora, 201904)\nmaestro_consultora = behavior_for_date(maestro_consultora, 201903)\n\nmaestro_consultora['campanaultimoped_diff_201906'] = maestro_consultora['campanaultimopedido'].apply(lambda _: 201906 - _)\nmaestro_consultora['campanaultimoped_diff_201905'] = maestro_consultora['campanaultimopedido'].apply(lambda _: 201905 - _)\nmaestro_consultora['campanaultimoped_diff_201904'] = maestro_consultora['campanaultimopedido'].apply(lambda _: 201904 - _)\nmaestro_consultora['campanaultimoped_diff_201903'] = maestro_consultora['campanaultimopedido'].apply(lambda _: 201903 - _)","3c173df7":"display(\nmaestro_consultora[\n    ['ultimo_pedido_menor_a_201906', 'ultimo_pedido_mayor_a_201906', 'ultimo_pedido_igual_a_201906', 'campanaultimopedido']\n].tail(5))\n\ndisplay(\nmaestro_consultora[\n    ['ultimo_pedido_menor_a_201905', 'ultimo_pedido_mayor_a_201905', 'ultimo_pedido_igual_a_201905', 'campanaultimopedido']\n].tail(5))\n\ndisplay(\nmaestro_consultora[\n    ['ultimo_pedido_menor_a_201904', 'ultimo_pedido_mayor_a_201904', 'ultimo_pedido_igual_a_201904', 'campanaultimopedido']\n].tail(5))","7ab48e82":"for col in ['flagsupervisor', 'flagcelularvalidado']:\n    #maestro_consultora[col] = maestro_consultora[col].astype(str)\n    display(maestro_consultora[col].value_counts(dropna=False))","720af2af":"maestro_consultora.describe(include=[object, bool]).T","816acce0":"maestro_consultora.estadocivil.value_counts(dropna=False)","d76c72c2":"null_verificator(maestro_consultora)","d665b261":"maestro_consultora = pd.get_dummies(\n    maestro_consultora, drop_first=False, columns=['estadocivil']\n)","ea7be73c":"maestro_consultora.to_csv(\"consultora.csv\", index=False)\nmaestro_consultora.shape","177f116e":"list_base = ['IdConsultora','flagsupervisor', 'edad', 'flagcelularvalidado',\n             'estadocivil_Casado(a)', 'estadocivil_Conviviente',\n             'estadocivil_Divorciado(a)', 'estadocivil_Otros',\n             'estadocivil_Soltero(a)', 'estadocivil_Viudo(a)']\n\ncols_ultimo_201906 = ['ultimo_pedido_menor_a_201906', 'ultimo_pedido_mayor_a_201906',\n                      'ultimo_pedido_igual_a_201906', 'campanaultimoped_diff_201906']\ncols_ultimo_201905 = ['ultimo_pedido_menor_a_201905', 'ultimo_pedido_mayor_a_201905',\n                      'ultimo_pedido_igual_a_201905', 'campanaultimoped_diff_201905']\ncols_ultimo_201904 = ['ultimo_pedido_menor_a_201904', 'ultimo_pedido_mayor_a_201904',\n                      'ultimo_pedido_igual_a_201904', 'campanaultimoped_diff_201904']\ncols_ultimo_201903 = ['ultimo_pedido_menor_a_201903', 'ultimo_pedido_mayor_a_201903',\n                      'ultimo_pedido_igual_a_201903', 'campanaultimoped_diff_201903']","ea1d42c6":"cols_ultimo_201905[2][:21]","9887254d":"test = test.merge(\n    maestro_consultora[list_base + cols_ultimo_201906].rename(\n        columns={_: _[:21] for _ in cols_ultimo_201906}),\n    on='IdConsultora',\n    how='left'\n)\nconsultoras_hasta_201905 = consultoras_hasta_201905.merge(\n    maestro_consultora[list_base + cols_ultimo_201905].rename(\n        columns={_: _[:21] for _ in cols_ultimo_201905}),\n    on='IdConsultora',\n    how='left'\n)\n\nconsultoras_hasta_201904 = consultoras_hasta_201904.merge(\n    maestro_consultora[list_base + cols_ultimo_201904].rename(\n        columns={_: _[:21] for _ in cols_ultimo_201904}),\n    on='IdConsultora',\n    how='left'\n)\n\nconsultoras_hasta_201903 = consultoras_hasta_201903.merge(\n    maestro_consultora[list_base + cols_ultimo_201903].rename(\n        columns={_: _[:21] for _ in cols_ultimo_201903}),\n    on='IdConsultora',\n    how='left'\n)","ab8de39b":"consultoras_hasta_201903.shape","10d1ba77":"maestro_producto = pd.read_csv(\n    \"{}\/maestro_producto.csv\".format(subfolder)\n).iloc[:, 1:]\n\nmaestro_producto.head(10)","adb3dc01":"null_verificator(maestro_producto)","747b85dd":"maestro_producto['idproducto'].unique().shape[0] == maestro_producto.shape[0]","eaef2915":"maestro_producto.shape","0f3cb703":"display(maestro_producto['unidadnegocio'].value_counts(dropna=False))\nprint(\"\/\"*100)\ndisplay(maestro_producto['marca'].value_counts(dropna=False))\nprint(\"\/\"*100)\ndisplay(maestro_producto['categoria'].value_counts(dropna=False))","384d8ef9":"maestro_producto['tipo'].fillna('XX', inplace=True)\nnull_verificator(maestro_producto)","1bbef8f3":"cols_producto = ['idproducto', 'unidadnegocio', 'marca', 'categoria']\nmaestro_producto = maestro_producto[cols_producto]\n\nmaestro_producto.head()","9d246348":"venta = pd.read_csv(\n    \"{}\/dtt_fvta_cl.csv\".format(subfolder)\n)\nventa.head(15)","491f8885":"venta.shape","e217bac4":"null_verificator(venta)","8ee78835":"del venta['grupooferta']\ndel venta['palancapersonalizacion']\ndel venta['codigopalancapersonalizacion']\ndel venta['canalingresoproducto']","b5b636eb":"venta.describe().T","d5be3534":"venta = venta.merge(maestro_producto, on='idproducto', how='left')\ndel maestro_producto\n\nventa.head()","e3bd6864":"lambda_mode = lambda x: x.value_counts().index[0]\n\nventa = venta.groupby(by=['idconsultora', 'campana']).agg({\n    'descuento': sum, 'ahorro': sum, 'preciocatalogo': sum,\n    'categoria': lambda_mode, 'marca': lambda_mode, 'unidadnegocio': lambda_mode,\n    'realanulmnneto': sum, 'realanulmnneto': sum, 'realdevmnneto': sum,\n    'realuuanuladas': sum,  'realuudevueltas': sum, 'realuufaltantes': sum, 'realuuvendidas': sum,\n    'realvtamnfaltneto': sum,  'realvtamnneto': sum, 'realvtamncatalogo': sum, 'realvtamnfaltcatalogo': sum\n}).reset_index()\n\ndisplay(null_verificator(venta))\nventa.head()","4dc3042f":"for col in venta.columns:\n    print(col, venta[col].unique().shape[0], venta[col].dtype)","b3d72e52":"venta.shape","53d28e10":"venta['campana'].min(), venta['campana'].max()","354cd5e8":"(consultoras_hasta_201905.drop(['target'], axis=1).columns == test.columns).any()","40fcc9e3":"venta_201905 = venta[venta['campana'] <= 201905]\nventa_201904 = venta[venta['campana'] <= 201904]\nventa_201903 = venta[venta['campana'] <= 201903]\n\nventa_201905.shape, venta_201904.shape, venta_201903.shape","ea39c797":"cols_cross = ['categoria', 'marca', 'unidadnegocio']\n\ncols_numeric = ['descuento', 'ahorro', 'preciocatalogo', 'realanulmnneto', 'realvtamnfaltcatalogo',\n                'realdevmnneto', 'realuuanuladas', 'realuudevueltas', 'realuufaltantes',\n                'realuuvendidas', 'realvtamnfaltneto', 'realvtamnneto','realvtamncatalogo']\n\ndef get_format_data(data, col_id_usuario, cols_for_cross):\n    X_data = []\n    \n    for col in cols_for_cross:\n        if col in data.columns:\n            print(\"-----> \", col)\n\n            temp = pd.crosstab(\n                data[col_id_usuario], data[col]\n            )\n            temp.columns = [col + \"_\" + str(v) for v in temp.columns]\n            X_data.append(\n                temp.apply(lambda x: x \/ x.sum(), axis=1)\n            )\n\n    return pd.concat(X_data, axis=1).reset_index().rename(\n        columns={col_id_usuario: 'IdConsultora'}\n    )\n\ndef get_group_numeric(data, col_id_usuario, cols_num):\n    _group = data[cols_num + [col_id_usuario]].groupby(\n        by=[col_id_usuario]\n    ).agg(\n        ['mean', 'median', 'min', 'max']\n    )\n    cols = [\"_\".join(list(v)) for v in _group.columns]\n    print(cols)\n    _group.columns = cols\n    \n    return _group.reset_index().rename(\n        columns={col_id_usuario: 'IdConsultora'}\n    )","8deee01b":"venta_201905 = get_format_data(venta_201905.copy(), 'idconsultora', cols_cross).merge(\n    get_group_numeric(venta_201905.copy(), 'idconsultora', cols_numeric),\n    on='IdConsultora',\n    how='inner'\n)\nventa_201905.shape","09f4841f":"venta_201904 = get_format_data(venta_201904.copy(), 'idconsultora', cols_cross).merge(\n    get_group_numeric(venta_201904.copy(), 'idconsultora', cols_numeric),\n    on='IdConsultora',\n    how='inner'\n)\nventa_201904.shape","ae1dfae6":"venta_201903 = get_format_data(venta_201903.copy(), 'idconsultora', cols_cross).merge(\n    get_group_numeric(venta_201903.copy(), 'idconsultora', cols_numeric),\n    on='IdConsultora',\n    how='inner'\n)\nventa_201903.shape","098f8de8":"venta = get_format_data(venta.copy(), 'idconsultora', cols_cross).merge(\n    get_group_numeric(venta.copy(), 'idconsultora', cols_numeric),\n    on='IdConsultora',\n    how='inner'\n)\nventa.head()","fb0f2fa7":"consultoras_hasta_201905 = consultoras_hasta_201905.merge(venta_201905, on='IdConsultora', how='left')\ndel venta_201905\n\nconsultoras_hasta_201904 = consultoras_hasta_201904.merge(venta_201904, on='IdConsultora', how='left')\ndel venta_201904\n\nconsultoras_hasta_201903 = consultoras_hasta_201903.merge(venta_201903, on='IdConsultora', how='left')\ndel venta_201903\n\ntest = test.merge(venta, on='IdConsultora', how='left')\ndel venta","05bab5f6":"consultoras_hasta_201905.shape, consultoras_hasta_201904.shape, consultoras_hasta_201903.shape, test.shape","ae05d02d":"consultoras_hasta_201905.to_csv(\"{}consultoras_hasta_201905.csv\".format(subfolder), index=False)\nconsultoras_hasta_201904.to_csv(\"{}consultoras_hasta_201904.csv\".format(subfolder), index=False)\nconsultoras_hasta_201903.to_csv(\"{}consultoras_hasta_201903.csv\".format(subfolder), index=False)\n\ntest.to_csv(\"{}test.csv\".format(subfolder), index=False)","1a689b9c":"consultoras_hasta_all = pd.concat([\n    consultoras_hasta_201903,\n    consultoras_hasta_201904,\n    consultoras_hasta_201905\n], axis=0).reset_index(drop=True)\n\ndel consultoras_hasta_201905\ndel consultoras_hasta_201904\ndel consultoras_hasta_201903\n\nconsultoras_hasta_all.shape","bf464aeb":"def reduce_size_data(df):\n    print(\"INITIAL SIZE : DEEP\", get_memory_usage(df), \"REAL\", get_memory_usage(df, deep=False))\n    \n    for col in df.select_dtypes(include=['int']).columns:\n        try:\n            df[col] = pd.to_numeric(arg=df[col], downcast='integer')\n        except Exception as e:\n            print(\"-\", col, str(e))\n    \n    for col in df.select_dtypes(include=['float']).columns:\n        try:\n            df[col] = pd.to_numeric(arg=df[col], downcast='float')\n        except Exception as e:\n            print(\"-\", col, str(e))\n                \n    print(\"FINAL SIZE : DEPP\", get_memory_usage(df), \"REAL\", get_memory_usage(df, deep=False))               \n    return df","18cacec3":"consultoras_hasta_all = reduce_size_data(consultoras_hasta_all)","f0ac6d21":"from lightgbm import LGBMClassifier\nfrom sklearn import model_selection\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedShuffleSplit, StratifiedKFold, TimeSeriesSplit\nfrom sklearn.model_selection import GridSearchCV","75c87891":"!pip install scorecardpy","5e8a78dd":"import scorecardpy as sc\n\nfilter_all = sc.var_filter(consultoras_hasta_all, y=\"target\")","ff683489":"filter_all.shape","cc25cb9f":"score_","6349ffaf":"\n\n### OBTENCION DE USUARIOS REGISTRADOS LA CAMPA\u00d1A 2019 07","2b331159":"### LOAD MAESTRO CONSULTORA","504a4cba":"### IMPUTACION ESTADO CIVIL","ab3df4e3":"## SE CONCLUYE\n### que los usuarios no registrados en la campa\u00f1na 2017 .... no poseen ventas en un 99% desde la campa\u00f1a 201807\n### y no estan activos este a\u00f1o para la data provista\n### POR LO CUAL SE PROCEDEN A RETIRAR DE LA DATA DE ENTRENAMIENTO, solo tomando los registrados en 201907","aab1105f":"### IMPUTACION PRIMER PEDIDO","172debcd":"#### Verificacion : \"TODOS LOS PRIMEROS PERIODOS MARCAN VENTA\"","c82be02c":"### INFORMACION DE CONSULTORAS POR CAMPA\u00d1A REGISTRADA","b6bb0d13":"#### ARMANDO TARGET","4e13c6fa":"# SE DECIDE CREAR 3 TRAIN","6212ff0f":"### AGREGANDO TARGETS","7654f328":"## 1ERO : hasta 201905 con target en 201906","5eabf894":"### A\u00d1ADIENDO PRODUCTO","cba6ad5b":"### CARGANDO INFORMACION DE VENTAS","ac8345be":"!","5afd19b4":"### Del an\u00e0lisis de nuevos se concluye que de la data con el registro de las consultoras activas en la campaan 201907,\n### las que tienen 5 o menos participaciones son nuevas","2a9a89e2":"### ANALISIS ULTIMO PEDIDO","354edf3a":"### ANALISIS DE VENDEDORES NUEVOS","7fdde46c":"### AGREGAMOS EL TARGET CORRESPONDIENTE Y LOS DOS PREVIOS"}}