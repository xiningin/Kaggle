{"cell_type":{"6e0e0442":"code","df207adb":"code","8013e43f":"code","25570579":"code","deb33c96":"code","9dd99284":"markdown","6d006dd1":"markdown","08e9562d":"markdown","15a920fb":"markdown","05cc4f40":"markdown","efa5e7bf":"markdown","a0b2958d":"markdown","fc438800":"markdown","667fcc93":"markdown"},"source":{"6e0e0442":"import numpy as np\nfrom sklearn.datasets import make_regression\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nx, y = make_regression(n_samples=10**4, n_features=1, noise=20.0, random_state=1234)\nx = x.flatten()\n\n# \u30bb\u30f3\u30bf\u30ea\u30f3\u30b0\nx = x - x.mean()\ny = y - y.mean()\n\n# \u8a55\u4fa1\u95a2\u6570\u3092\u30b0\u30e9\u30d5\u306b\u3059\u308b\ndef mse(x, y, a):\n  result = 0\n  for i, v in enumerate(x):\n    result += (y[i] - a*x[i])**2 \/ len(x)\n  return result\n  \na_range = np.arange(38,96)\nerrors = [mse(x,y,a_d) for a_d in a_range]\nfig = plt.figure(figsize=(4, 4))\nplt.plot(a_range, errors)\nplt.show()","df207adb":"class GradientDescent():\n  diff_result = []\n  parameter_result = [40]\n  # initial parameter\n  parameter = 40\n\n  def __init__(self, x, y, learning_rate=0.9):\n    self.learning_rate = learning_rate\n    self.x = x\n    self.y = y\n\n  def sigma(self, f):\n    result = 0\n    for i, v in enumerate(self.x):\n      result += f(i)\n    return result\n\n  def c1f(self, i):\n    return self.x[i]*self.y[i]\n\n  def c2f(self, i):\n    return (self.x[i]**2)*self.parameter\n\n  def gradient_descent(self, epochs):\n    for epoch in range(epochs):\n      diff = (-1*self.sigma(self.c1f) + self.sigma(self.c2f)) * 2 \/ len(self.x)\n      self.diff_result.append(diff)\n      self.parameter = self.parameter - self.learning_rate*diff\n      self.parameter_result.append(self.parameter)\n    return self.parameter","8013e43f":"gd = GradientDescent(x, y)\nprint(gd.gradient_descent(40))","25570579":"from IPython import display\nfrom matplotlib import animation as ani\n# plt.ioff()\n\nfig = plt.figure(figsize=(6, 6))\nims = []\na_range = np.arange(38,96)\nerrors = [mse(x,y,a_d) for a_d in a_range]\ndef error_plot(nFrame):\n  plt.cla()\n  diff = gd.diff_result[nFrame]\n  parameter = gd.parameter_result[nFrame]\n  parameter_range = np.arange(parameter-2,parameter+2)\n  error = mse(x,y,parameter)\n  b = error - diff*parameter\n  # \u30b0\u30e9\u30d5\u63cf\u5199\n  plt.plot(a_range, errors)\n  parameter_range_plot = parameter_range-0.5 if diff < 0 else parameter_range+0.5\n  plt.plot(parameter_range_plot, parameter_range*diff+b)\n  plt.scatter(parameter, error, color='orange')\n  # plt.show()\n\nanim = ani.FuncAnimation(fig, error_plot, frames=len(gd.diff_result), interval=600)\nvideo = anim.to_html5_video()\nhtml = display.HTML(video)\ndisplay.display(html)\nplt.close()  ","deb33c96":"fig = plt.figure(figsize=(6, 6))\nims = []\na_range = np.arange(38,96)\nerrors = [mse(x,y,a_d) for a_d in a_range]\ndef line_plot(nFrame):\n  plt.cla()\n  plt.xlim(-5, 4)\n  plt.ylim(-300,300)\n  parameter = gd.parameter_result[nFrame]\n  # \u30b0\u30e9\u30d5\u63cf\u5199\n  plt.scatter(x, y)\n  plt.plot(x, parameter*x, color='orange')\n  # plt.show()\n\nanim = ani.FuncAnimation(fig, line_plot, frames=len(gd.parameter_result), interval=600)\nvideo = anim.to_html5_video()\nhtml = display.HTML(video)\ndisplay.display(html)\nplt.close()  ","9dd99284":"## \u5358\u56de\u5e30\u5206\u6790\n\u4f8b\u3068\u3057\u3066\u5358\u56de\u5e30\u5206\u6790\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\u3092\u6700\u6025\u964d\u4e0b\u6cd5\u3067\u884c\u3046\u3002\n\n## \u5358\u56de\u5e30\u5206\u6790\u306e\u5f0f\n$$\n\\hat{y} = ax\n$$\n  \n\u30c7\u30fc\u30bf\u3092\u30bb\u30f3\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u306e\u3067\u5207\u7247\u306f\u7701\u7565\u3059\u308b\u3002\n\n## \u8aa4\u5dee\u95a2\u6570\n\u4f7f\u7528\u3059\u308b\u8aa4\u5dee\u95a2\u6570\u306f\u5e73\u5747\u4e8c\u4e57\u8aa4\u5dee\u3002  \n  \n$$\n\\begin{eqnarray}\nL&=\\frac{1}{N}\\sum_{i=1}^{N}(y_i - \\hat{y_i})^2 \\\\\n&=\\frac{1}{N}\\sum_{i=1}^{N}(y_i - ax_i)^2\n\\end{eqnarray}\n$$  \n\n\u8aa4\u5dee\u95a2\u6570\u3092\u5c55\u958b\u3059\u308b\u3002  \n  \n$$\n\\begin{align}\nf(a) &= \\frac{1}{N}\\sum_{i=1}^{n}(y_i - ax_i)^2 \\\\\n&= \\frac{1}{N}\\sum_{i=1}^{n}y_i^2 - 2\\frac{1}{N}\\sum_{i=1}^{n}y_iax_i + \\frac{1}{N}\\sum_{i=1}^{n}a^2x_i^2 \\\\\n\\end{align}\n$$\n\n## \u8aa4\u5dee\u95a2\u6570\u3092\u5fae\u5206  \n  \n$$\n\\begin{align}\nf'(a) &= \\{\\frac{1}{N}\\sum_{i=1}^{n}y_i^2\\}' +\\{- 2\\frac{1}{N}\\sum_{i=1}^{n}y_iax_i\\}' + \\{\\frac{1}{N}\\sum_{i=1}^{n}a^2x_i^2\\}' \\\\\n&= -2\\frac{1}{N}\\sum_{i=1}^{n}y_ix_i + 2\\frac{1}{N}\\sum_{i=1}^{n}x_i^2a \\\\\n&= 2\\frac{1}{N}(-\\sum_{i=1}^{n}y_ix_i + \\sum_{i=1}^{n}x_i^2a)\n\\end{align}\n$$  \n  \n## \u6700\u6025\u964d\u4e0b\u6cd5\u3092\u9069\u7528\n  \n$$\n\\begin{align}\na_{(k+1)}&= a_k - \\eta\\bigl(2\\frac{1}{N}(-\\sum_{i=1}^{n}y_ix_i + \\sum_{i=1}^{n}x_i^2a_k)\\bigl)\n\\end{align}\n$$","6d006dd1":"## \u6700\u6025\u964d\u4e0b\u6cd5\n\u6700\u6025\u964d\u4e0b\u6cd5\u306f\u3001\u9069\u5f53\u306a\u521d\u671f\u5024(\u521d\u671f\u30d1\u30e9\u30e1\u30fc\u30bf)\u3092\u8a2d\u5b9a\u3057\u3001\u8a55\u4fa1\u95a2\u6570\u3092\u5fae\u5206\u3057\u305f\u5024\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u66f4\u65b0\u3057\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3092\u6c42\u3081\u308b\u65b9\u6cd5\n\n## \u6700\u6025\u964d\u4e0b\u6cd5\u306e\u5f0f\n  \n$$\n\\begin{align}\na_{(k+1)} = a_k - \\eta\\frac{\\partial f(a_k)}{\\partial a_k}\n\\end{align}\n$$","08e9562d":"# \u307e\u3068\u3081\n***","15a920fb":"\u30b0\u30e9\u30d5\u3067\u53ef\u8996\u5316\u3057\u305f\u3053\u3068\u306b\u3088\u308a\u3001\u6700\u6025\u964d\u4e0b\u6cd5\u3067\u8aa4\u5dee\u304c\u6700\u5c0f\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u305f\u3002","05cc4f40":"# \u5b9f\u88c5\n***","efa5e7bf":"# \u89e3\u8aac\n***","a0b2958d":"\u6700\u6025\u964d\u4e0b\u6cd5\u306e\u89e3\u8aac\u3068\u53ef\u8996\u5316\u3092\u3059\u308b\u3002","fc438800":"## \u30b0\u30e9\u30d5\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4fee\u6b63\u3092\u53ef\u8996\u5316\u3059\u308b","667fcc93":"# \u6982\u8981\n***"}}