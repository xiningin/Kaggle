{"cell_type":{"523f60bc":"code","3e753ba3":"code","2d48b2b1":"code","5941a6f2":"code","bc0be9c6":"code","12558aa6":"code","a174fe27":"code","fd5eb7e5":"code","40175b9d":"code","21a51adc":"code","070f0894":"code","c4ce30c5":"code","4edf1873":"code","9e7f4685":"code","de6f2376":"markdown"},"source":{"523f60bc":"import os\nimport time\nimport tensorflow as tf\nimport numpy as np\nfrom glob import glob\nimport datetime\nimport random\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n%matplotlib inline","3e753ba3":"def generator(z, output_channel_dim, training):\n    with tf.variable_scope(\"generator\", reuse= not training):\n        \n        # 8x8x1024\n        fully_connected = tf.layers.dense(z, 8*8*1024)\n        fully_connected = tf.reshape(fully_connected, (-1, 8, 8, 1024))\n        fully_connected = tf.nn.leaky_relu(fully_connected)\n\n        # 8x8x1024 -> 16x16x512\n        trans_conv1 = tf.layers.conv2d_transpose(inputs=fully_connected,\n                                                 filters=512,\n                                                 kernel_size=[5,5],\n                                                 strides=[2,2],\n                                                 padding=\"SAME\",\n                                                 kernel_initializer=tf.truncated_normal_initializer(stddev=WEIGHT_INIT_STDDEV),\n                                                 name=\"trans_conv1\")\n        batch_trans_conv1 = tf.layers.batch_normalization(inputs = trans_conv1,\n                                                          training=training,\n                                                          epsilon=EPSILON,\n                                                          name=\"batch_trans_conv1\")\n        trans_conv1_out = tf.nn.leaky_relu(batch_trans_conv1,\n                                           name=\"trans_conv1_out\")\n        \n        # 16x16x512 -> 32x32x256\n        trans_conv2 = tf.layers.conv2d_transpose(inputs=trans_conv1_out,\n                                                 filters=256,\n                                                 kernel_size=[5,5],\n                                                 strides=[2,2],\n                                                 padding=\"SAME\",\n                                                 kernel_initializer=tf.truncated_normal_initializer(stddev=WEIGHT_INIT_STDDEV),\n                                                 name=\"trans_conv2\")\n        batch_trans_conv2 = tf.layers.batch_normalization(inputs = trans_conv2,\n                                                          training=training,\n                                                          epsilon=EPSILON,\n                                                          name=\"batch_trans_conv2\")\n        trans_conv2_out = tf.nn.leaky_relu(batch_trans_conv2,\n                                           name=\"trans_conv2_out\")\n        \n        # 32x32x256 -> 64x64x128\n        trans_conv3 = tf.layers.conv2d_transpose(inputs=trans_conv2_out,\n                                                 filters=128,\n                                                 kernel_size=[5,5],\n                                                 strides=[2,2],\n                                                 padding=\"SAME\",\n                                                 kernel_initializer=tf.truncated_normal_initializer(stddev=WEIGHT_INIT_STDDEV),\n                                                 name=\"trans_conv3\")\n        batch_trans_conv3 = tf.layers.batch_normalization(inputs = trans_conv3,\n                                                          training=training,\n                                                          epsilon=EPSILON,\n                                                          name=\"batch_trans_conv3\")\n        trans_conv3_out = tf.nn.leaky_relu(batch_trans_conv3,\n                                           name=\"trans_conv3_out\")\n        \n        # 64x64x128 -> 128x128x64\n        trans_conv4 = tf.layers.conv2d_transpose(inputs=trans_conv3_out,\n                                                 filters=64,\n                                                 kernel_size=[5,5],\n                                                 strides=[2,2],\n                                                 padding=\"SAME\",\n                                                 kernel_initializer=tf.truncated_normal_initializer(stddev=WEIGHT_INIT_STDDEV),\n                                                 name=\"trans_conv4\")\n        batch_trans_conv4 = tf.layers.batch_normalization(inputs = trans_conv4,\n                                                          training=training,\n                                                          epsilon=EPSILON,\n                                                          name=\"batch_trans_conv4\")\n        trans_conv4_out = tf.nn.leaky_relu(batch_trans_conv4,\n                                           name=\"trans_conv4_out\")\n        \n        # 128x128x64 -> 128x128x3\n        logits = tf.layers.conv2d_transpose(inputs=trans_conv4_out,\n                                            filters=3,\n                                            kernel_size=[5,5],\n                                            strides=[1,1],\n                                            padding=\"SAME\",\n                                            kernel_initializer=tf.truncated_normal_initializer(stddev=WEIGHT_INIT_STDDEV),\n                                            name=\"logits\")\n        out = tf.tanh(logits, name=\"out\")\n        return out","2d48b2b1":"def discriminator(x, reuse):\n    with tf.variable_scope(\"discriminator\", reuse=reuse): \n        \n        # 128*128*3 -> 64x64x64 \n        conv1 = tf.layers.conv2d(inputs=x,\n                                 filters=64,\n                                 kernel_size=[5,5],\n                                 strides=[2,2],\n                                 padding=\"SAME\",\n                                 kernel_initializer=tf.truncated_normal_initializer(stddev=WEIGHT_INIT_STDDEV),\n                                 name='conv1')\n        batch_norm1 = tf.layers.batch_normalization(conv1,\n                                                    training=True,\n                                                    epsilon=EPSILON,\n                                                    name='batch_norm1')\n        conv1_out = tf.nn.leaky_relu(batch_norm1,\n                                     name=\"conv1_out\")\n        \n        # 64x64x64-> 32x32x128 \n        conv2 = tf.layers.conv2d(inputs=conv1_out,\n                                 filters=128,\n                                 kernel_size=[5, 5],\n                                 strides=[2, 2],\n                                 padding=\"SAME\",\n                                 kernel_initializer=tf.truncated_normal_initializer(stddev=WEIGHT_INIT_STDDEV),\n                                 name='conv2')\n        batch_norm2 = tf.layers.batch_normalization(conv2,\n                                                    training=True,\n                                                    epsilon=EPSILON,\n                                                    name='batch_norm2')\n        conv2_out = tf.nn.leaky_relu(batch_norm2,\n                                     name=\"conv2_out\")\n        \n        # 32x32x128 -> 16x16x256  \n        conv3 = tf.layers.conv2d(inputs=conv2_out,\n                                 filters=256,\n                                 kernel_size=[5, 5],\n                                 strides=[2, 2],\n                                 padding=\"SAME\",\n                                 kernel_initializer=tf.truncated_normal_initializer(stddev=WEIGHT_INIT_STDDEV),\n                                 name='conv3')\n        batch_norm3 = tf.layers.batch_normalization(conv3,\n                                                    training=True,\n                                                    epsilon=EPSILON,\n                                                    name='batch_norm3')\n        conv3_out = tf.nn.leaky_relu(batch_norm3,\n                                     name=\"conv3_out\")\n        \n        # 16x16x256 -> 16x16x512\n        conv4 = tf.layers.conv2d(inputs=conv3_out,\n                                 filters=512,\n                                 kernel_size=[5, 5],\n                                 strides=[1, 1],\n                                 padding=\"SAME\",\n                                 kernel_initializer=tf.truncated_normal_initializer(stddev=WEIGHT_INIT_STDDEV),\n                                 name='conv4')\n        batch_norm4 = tf.layers.batch_normalization(conv4,\n                                                    training=True,\n                                                    epsilon=EPSILON,\n                                                    name='batch_norm4')\n        conv4_out = tf.nn.leaky_relu(batch_norm4,\n                                     name=\"conv4_out\")\n        \n        # 16x16x512 -> 8x8x1024\n        conv5 = tf.layers.conv2d(inputs=conv4_out,\n                                filters=1024,\n                                kernel_size=[5, 5],\n                                strides=[2, 2],\n                                padding=\"SAME\",\n                                kernel_initializer=tf.truncated_normal_initializer(stddev=WEIGHT_INIT_STDDEV),\n                                name='conv5')\n        batch_norm5 = tf.layers.batch_normalization(conv5,\n                                                    training=True,\n                                                    epsilon=EPSILON,\n                                                    name='batch_norm5')\n        conv5_out = tf.nn.leaky_relu(batch_norm5,\n                                     name=\"conv5_out\")\n\n        flatten = tf.reshape(conv5_out, (-1, 8*8*1024))\n        logits = tf.layers.dense(inputs=flatten,\n                                 units=1,\n                                 activation=None)\n        out = tf.sigmoid(logits)\n        return out, logits","5941a6f2":"def model_loss(input_real, input_z, output_channel_dim):\n    g_model = generator(input_z, output_channel_dim, True)\n\n    noisy_input_real = input_real + tf.random_normal(shape=tf.shape(input_real),\n                                                     mean=0.0,\n                                                     stddev=random.uniform(0.0, 0.1),\n                                                     dtype=tf.float32)\n    \n    d_model_real, d_logits_real = discriminator(noisy_input_real, reuse=False)\n    d_model_fake, d_logits_fake = discriminator(g_model, reuse=True)\n    \n    d_loss_real = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=d_logits_real,\n                                                                         labels=tf.ones_like(d_model_real)*random.uniform(0.9, 1.0)))\n    d_loss_fake = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=d_logits_fake,\n                                                                         labels=tf.zeros_like(d_model_fake)))\n    d_loss = tf.reduce_mean(0.5 * (d_loss_real + d_loss_fake))\n    g_loss = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=d_logits_fake,\n                                                                    labels=tf.ones_like(d_model_fake)))\n    return d_loss, g_loss","bc0be9c6":"def model_optimizers(d_loss, g_loss):\n    t_vars = tf.trainable_variables()\n    g_vars = [var for var in t_vars if var.name.startswith(\"generator\")]\n    d_vars = [var for var in t_vars if var.name.startswith(\"discriminator\")]\n    \n    update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)\n    gen_updates = [op for op in update_ops if op.name.startswith('generator') or op.name.startswith('discriminator')]\n    \n    with tf.control_dependencies(gen_updates):\n        d_train_opt = tf.train.AdamOptimizer(learning_rate=LR_D, beta1=BETA1).minimize(d_loss, var_list=d_vars)\n        g_train_opt = tf.train.AdamOptimizer(learning_rate=LR_G, beta1=BETA1).minimize(g_loss, var_list=g_vars)  \n    return d_train_opt, g_train_opt","12558aa6":"def model_inputs(real_dim, z_dim):\n    inputs_real = tf.placeholder(tf.float32, (None, *real_dim), name='inputs_real')\n    inputs_z = tf.placeholder(tf.float32, (None, z_dim), name=\"input_z\")\n    learning_rate_G = tf.placeholder(tf.float32, name=\"lr_g\")\n    learning_rate_D = tf.placeholder(tf.float32, name=\"lr_d\")\n    return inputs_real, inputs_z, learning_rate_G, learning_rate_D","a174fe27":"def show_samples(sample_images, name, epoch):\n    figure, axes = plt.subplots(1, len(sample_images), figsize = (IMAGE_SIZE, IMAGE_SIZE))\n    for index, axis in enumerate(axes):\n        axis.axis('off')\n        image_array = sample_images[index]\n        axis.imshow(image_array)\n        image = Image.fromarray(image_array)\n        image.save(name+\"_\"+str(epoch)+\"_\"+str(index)+\".png\") \n    plt.savefig(name+\"_\"+str(epoch)+\".png\", bbox_inches='tight', pad_inches=0)\n    plt.show()\n    plt.close()","fd5eb7e5":"def test(sess, input_z, out_channel_dim, epoch):\n    example_z = np.random.uniform(-1, 1, size=[SAMPLES_TO_SHOW, input_z.get_shape().as_list()[-1]])\n    samples = sess.run(generator(input_z, out_channel_dim, False), feed_dict={input_z: example_z})\n    sample_images = [((sample + 1.0) * 127.5).astype(np.uint8) for sample in samples]\n    show_samples(sample_images, OUTPUT_DIR + \"samples\", epoch)","40175b9d":"def summarize_epoch(epoch, sess, d_losses, g_losses, input_z, data_shape, saver):\n    print(\"\\nEpoch {}\/{}\".format(epoch, EPOCHS),\n          \"\\nD Loss: {:.5f}\".format(np.mean(d_losses[-MINIBATCH_SIZE:])),\n          \"\\nG Loss: {:.5f}\".format(np.mean(g_losses[-MINIBATCH_SIZE:])))\n    fig, ax = plt.subplots()\n    plt.plot(d_losses, label='Discriminator', alpha=0.6)\n    plt.plot(g_losses, label='Generator', alpha=0.6)\n    plt.title(\"Losses\")\n    plt.legend()\n    plt.savefig(OUTPUT_DIR + \"losses_\" + str(epoch) + \".png\")\n    plt.show()\n    plt.close()\n    saver.save(sess, OUTPUT_DIR + \"model_\" + str(epoch) + \".ckpt\")\n    test(sess, input_z, data_shape[3], epoch)","21a51adc":"def get_batch(dataset):\n    files = random.sample(dataset, BATCH_SIZE)\n    batch = []\n    for file in files:\n        if random.choice([True, False]):\n            batch.append(np.asarray(Image.open(file).transpose(Image.FLIP_LEFT_RIGHT)))\n        else:\n            batch.append(np.asarray(Image.open(file)))                     \n    batch = np.asarray(batch)\n    normalized_batch = (batch \/ 127.5) - 1.0\n    return normalized_batch, files","070f0894":"def train(data_shape, epoch, checkpoint_path):\n    input_images, input_z, lr_G, lr_D = model_inputs(data_shape[1:], NOISE_SIZE)\n    d_loss, g_loss = model_loss(input_images, input_z, data_shape[3])\n    d_opt, g_opt = model_optimizers(d_loss, g_loss)\n    \n    with tf.Session() as sess:\n        sess.run(tf.global_variables_initializer())\n        saver = tf.train.Saver()\n        if checkpoint_path is not None:\n            saver.restore(sess, checkpoint_path)\n            \n        iteration = 0\n        d_losses = []\n        g_losses = []\n        \n        for epoch in range(EPOCH, EPOCHS):        \n            epoch_dataset = DATASET.copy()\n            \n            for i in range(MINIBATCH_SIZE):\n                iteration_start_time = time.time()\n                iteration += 1\n                batch_images, used_files = get_batch(epoch_dataset)\n                [epoch_dataset.remove(file) for file in used_files]\n                \n                batch_z = np.random.uniform(-1, 1, size=(BATCH_SIZE, NOISE_SIZE))\n                _ = sess.run(d_opt, feed_dict={input_images: batch_images, input_z: batch_z, lr_D: LR_D})\n                d_losses.append(d_loss.eval({input_z: batch_z, input_images: batch_images}))\n                \n                _ = sess.run(g_opt, feed_dict={input_images: batch_images, input_z: batch_z, lr_G: LR_G})\n                g_losses.append(g_loss.eval({input_z: batch_z}))\n                \n                elapsed_time = round(time.time()-iteration_start_time, 3)\n                remaining_files = len(epoch_dataset)\n                print(\"\\rEpoch: \" + str(epoch) +\n                      \", iteration: \" + str(iteration) + \n                      \", d_loss: \" + str(round(d_losses[-1], 3)) +\n                      \", g_loss: \" + str(round(g_losses[-1], 3)) +\n                      \", duration: \" + str(elapsed_time) + \n                      \", minutes remaining: \" + str(round(remaining_files\/BATCH_SIZE*elapsed_time\/60, 1)) +\n                      \", remaining files in batch: \" + str(remaining_files)\n                      , sep=' ', end=' ', flush=True)\n            summarize_epoch(epoch, sess, d_losses, g_losses, input_z, data_shape, saver)","c4ce30c5":"# Hyperparameters\nIMAGE_SIZE = 128\nNOISE_SIZE = 100\nLR_D = 0.00002\nLR_G = 0.0002\nBATCH_SIZE = 64\nEPOCH = 0 #Non-zero only if we are loading a checkpoint\nEPOCHS = 30\nBETA1 = 0.5\nWEIGHT_INIT_STDDEV = 0.02\nEPSILON = 0.005\nSAMPLES_TO_SHOW = 5","4edf1873":"# Data\nBASE_PATH = \"..\/input\/\"\nDATASET_LIST_PATH = BASE_PATH + \"100k.txt\"\nINPUT_DATA_DIR = BASE_PATH + \"100k\/100k\/\"\nOUTPUT_DIR = \".\/\"\n#MODEL_PATH = BASE_PATH + \"models\/\" + \"model_\" + str(EPOCH) + \".ckpt\"\nDATASET = [INPUT_DATA_DIR + str(line).rstrip() for line in open(DATASET_LIST_PATH,\"r\")]\nDATASET_SIZE = len(DATASET) \nMINIBATCH_SIZE = DATASET_SIZE \/\/ BATCH_SIZE","9e7f4685":"# Training\nwith tf.Graph().as_default():\n    train(data_shape=(DATASET_SIZE, IMAGE_SIZE, IMAGE_SIZE, 3),\n          epoch=EPOCH,\n          checkpoint_path=None)","de6f2376":"Check out corresponding Medium article:\n\n[Face Generator - Generating Artificial Faces with Machine Learning \ud83e\uddd1](https:\/\/towardsdatascience.com\/face-generator-generating-artificial-faces-with-machine-learning-9e8c3d6c1ead)"}}