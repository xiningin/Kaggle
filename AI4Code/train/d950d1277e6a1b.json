{"cell_type":{"b8e4c223":"code","8ea7f82a":"code","d2176625":"code","b6ab3052":"code","9bb3a8fd":"code","4dcdb15d":"code","0ffb5e21":"code","e7724fa8":"code","377eeacc":"code","e6b5f8b7":"code","a715ab21":"code","61e8a05a":"code","662d1cf6":"code","ba3fb32f":"code","90cf4b2d":"code","d84df0c8":"code","7e27619e":"code","1919178d":"code","058c7684":"code","1392e434":"code","a10edf6f":"code","0fbb7dad":"code","895c82ba":"code","fdd03132":"code","9e5b1cea":"code","aaff15db":"code","2c0bce66":"code","a13eef44":"markdown","e799453a":"markdown","a5840e89":"markdown","54baf9b7":"markdown","f3f5949e":"markdown","075e587c":"markdown","7c74bf8c":"markdown","0c44b41d":"markdown","e34a9aa5":"markdown","8e7b0bbf":"markdown","6373e2a8":"markdown","931280d6":"markdown","9269cf02":"markdown","8f7c3ac3":"markdown","5bb00e54":"markdown","214f29d0":"markdown","c95f62c6":"markdown","1d259e1c":"markdown","b15deea5":"markdown","fd900be5":"markdown","ccc7c05c":"markdown","2654c5e6":"markdown","065c1a19":"markdown"},"source":{"b8e4c223":"# Thanks @Lavanya Gupta whose kernel inspired me!\n# Please check https:\/\/www.kaggle.com\/lava18\/all-that-you-need-to-know-about-the-android-market\n\n\n# import required packages\n\n\n\nfrom matplotlib import pyplot as plt\nimport plotly\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport tensorflow as tf\nfrom scipy import stats\nplt.style.use(\"ggplot\")\ncolor = sns.color_palette()\nsns.set(rc={'figure.figsize':(25,15)})\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom pylab import rcParams","8ea7f82a":"df = pd.read_csv('..\/input\/googleplaystore.csv') # read the data","d2176625":"df.shape\ndf.head()","b6ab3052":"df['Rating'].describe()","9bb3a8fd":"# rating distibution \nrcParams['figure.figsize'] = 16.7,8.27\ng = sns.kdeplot(df.Rating, color=\"Red\", shade = True)\ng.set_xlabel(\"Rating\")\ng.set_ylabel(\"Frequency\")\nplt.title('Distribution of Rating',size = 20)","4dcdb15d":"print( len(df['Category'].unique()) , \"categories\")\n\nprint(\"\\n\", df['Category'].unique())\n","0ffb5e21":"g = sns.countplot(x=\"Category\",data=df, palette = \"Set1\")\ng.set_xticklabels(g.get_xticklabels(), rotation=90, ha=\"right\")\ng \nplt.title('Count of app in each category',size = 20)","e7724fa8":"df['Type'].value_counts().plot.bar(width=0.6,rot=0) \nplt.xlabel('Applications')\nplt.ylabel('nombre d\"applications')\nplt.show()","377eeacc":"BlueOrangeWapang = ['#fc910d','#ff0040','#239cd3','#1674b1','#8000ff']\nplt.figure(figsize=(10,10))\nlabel_names=df['Content Rating'].value_counts().sort_index().index\nsize = df['Content Rating'].value_counts().sort_index().tolist()\nmy_circle=plt.Circle( (0,0), 0.5, color='white')\nplt.pie(size, labels=label_names, colors=BlueOrangeWapang)\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","e6b5f8b7":"# data cleanning\n\ndf[\"Size\"] = df[\"Size\"].apply(lambda x: str(x).replace('Varies with device', 'NaN') \n                              if \"Varies with device\" in str(x) else x)\ndf[\"Size\"] = df[\"Size\"].apply(lambda x: str(x).replace('M','') \n                              if 'M' in str(x) else x)\ndf[\"Size\"] = df[\"Size\"].apply(lambda x: str(x).replace(',','') \n                              if ',' in str(x) else x)\ndf['Size'] = df['Size'].apply(lambda x: str(x).replace('+', '') \n                              if '+' in str(x) else x)\ndf['Size'] = df[\"Size\"].apply(lambda x: float(str(x).replace('k',''))\/1024 \n                              if 'k' in str(x) else x)","a715ab21":"df['Installs'] = df['Installs'].apply(lambda x: x.replace('+', '') if '+' in x else x)\ndf['Installs'] = df['Installs'].apply(lambda x: x.replace(',', '') if ',' in x else x)\ndf['Installs'] = df['Installs'].apply(lambda x: x.replace('Free', 'NaN') if 'Free' in x else x)\ndf['Installs'] = df['Installs'].apply(lambda x: x.replace('Paid', 'NaN') if 'Paid' in x else x)","61e8a05a":"df[\"Price\"] = df[\"Price\"].apply(lambda x: str(x).replace('$','') if '$' in x else x)","662d1cf6":"df = df.dropna()","ba3fb32f":"df['Size'] = df['Size'].apply(lambda x:float(x))\ndf['Installs'] = df['Installs'].apply(lambda x:int(x))\ndf['Reviews'] = df['Reviews'].apply(lambda x:int(x))\ndf['Price'] = df['Price'].apply(lambda x:float(x))\ndf = df.dropna()","90cf4b2d":"data = df[['Rating', 'Size', 'Installs', 'Reviews', 'Price']]","d84df0c8":"def mean_norm(x):\n    x = np.array(x)\n    x = (x - np.mean(x))\/np.std(x)\n    return x","7e27619e":"data['Rating'] = mean_norm(data['Rating'])\ndata['Size'] = mean_norm(data['Size'])\ndata['Installs'] = mean_norm(data['Installs'])\ndata['Reviews'] = mean_norm(data['Reviews'])\ndata['Price'] = mean_norm(data['Price'])\nresult = data","1919178d":"data = np.array(data)\nprint(data[0:5])","058c7684":"def input_fn():\n    return tf.data.Dataset.from_tensors(tf.convert_to_tensor(data, dtype=tf.float32)).repeat(1)","1392e434":"x = input_fn()\nprint(x)","a10edf6f":"num_clusters = 3\nkmeans = tf.contrib.factorization.KMeansClustering(\n    num_clusters=num_clusters, use_mini_batch=False)","0fbb7dad":"num_iterations = 30\nprevious_centers = None\nfor _ in range(num_iterations):\n    kmeans.train(input_fn)\n    cluster_centers = kmeans.cluster_centers()\n    if previous_centers is not None:\n        dis = previous_centers - cluster_centers\n        print('dleta' + str(dis))\n    previous_centers = cluster_centers\n    print(\"socre:\" + str(kmeans.score(input_fn)))\nprint(\"the centers are: \" + str(previous_centers))\ncenter = previous_centers","895c82ba":"cluster_indices = list(kmeans.predict_cluster_index(input_fn))","fdd03132":"result['Group'] = cluster_indices","9e5b1cea":"result['Group'] = result['Group'].apply(lambda x: str(x))\nresult['Group'] = result['Group'].apply(lambda x: x.replace('0', 'Group1') if '0' == x else x)\nresult['Group'] = result['Group'].apply(lambda x: x.replace('1', 'Group2') if '1' == x else x)\nresult['Group'] = result['Group'].apply(lambda x: x.replace('2', 'Group3') if '2' == x else x)","aaff15db":"ra = df['Rating']\ns = df['Size']\ni = df['Installs']\nre = df['Reviews']\nc = result['Group']\np = df['Price']\n\nsns.pairplot(pd.DataFrame(list(zip(ra, s, np.log(i), np.log(re), c, p)), \n                        columns=['Rating','Size', 'Installs', 'Reviews', 'Group', 'Price']),hue='Group', palette=\"Set2\")","2c0bce66":"num_of_app_in_group = result['Group'].value_counts().sort_values(ascending=True)\ndata1 = [go.Pie(\n        labels = num_of_app_in_group.index,\n        values = num_of_app_in_group.values\n)]\nplotly.offline.iplot(data1, filename='apps_per_group')","a13eef44":"## 4. K-Means:\n\n","e799453a":"# Conclusion","a5840e89":"### 2.2 Importing data & Libraries ","54baf9b7":"###  2.3 Data analysing ","f3f5949e":"Average of rating of application in store is around 4 which is very high","075e587c":"Through the analysis and exploration of this data, we come to the obvious, in order to finally establish an effective strategy for the development of mobile applications.","7c74bf8c":"Google Play store, formerly Android Market, is a digital distribution service operated and developed by Google. It serves as the official app store for the Android operating system, allowing users to browse and download applications developed with the Android studio, unity 3D.... and published through Google. Google Play store also serves as a digital media store, offering music, books, movies, and television programs","0c44b41d":"\n1. Convert app size to MB\n2. Remove '+' from 'Number of Installs'\n3. Remove 'NaN'\n4. Remove '$' from 'Price'\n5. Convert 'String' to 'int' or 'float'","e34a9aa5":"### 2.4 Classification according to user ratings","8e7b0bbf":"Free application category are the most appearances for application in store","6373e2a8":"### 2.1 Collect initial data","931280d6":"### 2.5 Classification of applications according to their categories","9269cf02":"## 2. Data exploring","8f7c3ac3":"###  2.7 Classification of applications by age","5bb00e54":"### 2.6  Classification of android applications (Free \/ Paid):\n","214f29d0":"\n1. Saving the attributs we want to use to 'data'\n2. Using mean normilization to normilize the raw data\n3. Use TensorFlow K-means to classify the apps into 3 groups (num_iterations = 20)","c95f62c6":"https:\/\/www.kaggle.com\/lava18\/google-play-store-apps","1d259e1c":"k-means clustering aims to partition n observations into k clusters in which each observation belongs to the cluster with the nearest mean, serving as a prototype of the cluster. This results in a partitioning of the data space into Voronoi cells.","b15deea5":"# Exploring, Visualizing and Cleaning Google Play Store Apps DATA","fd900be5":"## 3. Data Cleaning ","ccc7c05c":"### 4.1 Data Visualization","2654c5e6":"## 1. Business understanding","065c1a19":"Game and Family category are the most appearances for application in store\n"}}