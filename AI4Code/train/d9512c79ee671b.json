{"cell_type":{"978cad5e":"code","05f15254":"code","ada75663":"code","88b2c03a":"code","3b374480":"code","73c6580c":"code","6a0d1c38":"code","eca690fe":"code","9b5147f1":"code","f26f2633":"code","7f8f4b70":"code","6251f67b":"code","2e8ccbe5":"markdown","ef08d3c2":"markdown","ed73b50f":"markdown","195d3abf":"markdown","d9fdea68":"markdown","b1e6e3fb":"markdown"},"source":{"978cad5e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","05f15254":"import os\nimport json\nimport pandas\nimport librosa\nimport librosa.display\nimport IPython.display as ipd\nimport matplotlib.pyplot as plt\nimport sklearn","ada75663":"directory = r\"..\/input\/covid19-cough-audio-classification\/\"\n\ndef retrive_data():\n    json_files = []\n    audio_files = []\n    \n    file_list = os.listdir(directory)\n    json_file = [file for file in file_list if \".json\" in str(file)]\n    audio_file = [file for file in file_list if \".webm\" in str(file)]\n    audio_file2 = [file for file in file_list if \".ogg\" in str(file)]\n    return json_file, audio_file, audio_file2\n    \njson_files, audio_files, audio_files2 = retrive_data()","88b2c03a":"print(\"total files in directory: \", len([name for name in os.listdir(directory)]))\nprint(\"json file count: \", len(json_files))\nprint(\"webm file count: \", len(audio_files))\nprint(\"ogg file count: \", len(audio_files2))","3b374480":"def load_json_info():\n    json_data = []\n    columns = []\n    audio_file_name = []\n    \n    for filename in json_files:\n        json_path = os.path.join(directory, filename)\n        \n        with open(json_path, mode='r') as recurse:\n            json_contents = json.load(recurse)\n\n            for key in json_contents.keys():\n                columns.append(key)\n    \n    columns = set(columns)\n    for filename in json_files:\n        name = filename.replace(\".json\", \"\")\n        is_present = 1 if name + \".webm\" in audio_files else 0\n        json_path = os.path.join(directory, filename)\n        \n        with open(json_path, mode='r') as recurse:\n            json_contents = json.load(recurse)\n            \n            row_data = []\n            for key in columns:\n                row_data.append(json_contents.get(key))\n            \n            audio_file_name.append(is_present)\n            json_data.append(row_data)\n    \n    dataframe = pd.DataFrame(json_data, columns=columns) \n    dataframe['audio_clip_present'] = audio_file_name\n    return dataframe, columns\n        \ndataframe, columns = load_json_info()","73c6580c":"dataframe.loc[0:5, :]","6a0d1c38":"dataframe.isnull().sum()","eca690fe":"dataframe.age.fillna(0, inplace=True)\n\ndataframe['age'] = dataframe['age'].astype(float)\ndataframe['date_time'] = pd.to_datetime(dataframe.datetime)","9b5147f1":"x , sr = librosa.load(directory + audio_files[0])\nipd.Audio(directory + audio_files[0])","f26f2633":"%matplotlib inline\nplt.figure(figsize=(14, 5))\nlibrosa.display.waveplot(x, sr=sr)","7f8f4b70":"X = librosa.stft(x)\nXdb = librosa.amplitude_to_db(abs(X))\nplt.figure(figsize=(14, 5))\nlibrosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='hz')\nplt.colorbar()","6251f67b":"spectral_centroids = librosa.feature.spectral_centroid(x, sr=sr)[0]\n\n# Computing the time variable for visualization\nplt.figure(figsize=(14, 5))\nframes = range(len(spectral_centroids))\nt = librosa.frames_to_time(frames)\n\n# Normalising the spectral centroid for visualisation\ndef normalize(x, axis=0):\n    return sklearn.preprocessing.minmax_scale(x, axis=axis)\n\n#Plotting the Spectral Centroid along the waveform\nlibrosa.display.waveplot(x, sr=sr, alpha=0.4)\nplt.plot(t, normalize(spectral_centroids), color='r')","2e8ccbe5":"# Print total input data count","ef08d3c2":"# Read the input data, group them based on datatype","ed73b50f":"# Process json data and create Pandas dataframe for better analysis and understanding","195d3abf":"# Listen to Sample audio and its graph visualization ","d9fdea68":"# Dataframe formatting","b1e6e3fb":"# List down the missing fields in the input dataframe"}}