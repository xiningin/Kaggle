{"cell_type":{"4a7801cb":"code","ba9b63ec":"code","b5c6d681":"code","88f177e7":"code","f1cbae13":"code","1decd599":"code","7cbe29da":"code","2fb988de":"code","43eb75f9":"code","27d73d94":"code","40425bb2":"code","7fb3de05":"code","3d180743":"code","572bdad5":"code","384cb5fc":"code","0ede7011":"code","b5b1272b":"code","3e1de3af":"code","c5ec6106":"code","d0ad89cc":"code","74b09ffb":"code","4b52123f":"code","d05553b7":"code","43af7d7a":"code","ce9f3357":"code","6eb953d6":"code","ba333ad7":"code","46fb01f9":"code","a9a7df2c":"code","ed379a75":"code","4ad56595":"code","6f641952":"code","ab828094":"code","71bc0f2f":"code","2cd6a6ee":"code","0b3d96c7":"code","2da61337":"code","b5c75115":"code","fe8f7fa2":"code","4ad0c3a0":"code","4fa56a03":"code","460f9003":"code","14ebbd12":"code","52a3ab5e":"code","1289c0f5":"code","6acc2e86":"code","7f395f67":"code","b0e4f9f4":"code","70458fc6":"code","36f8c031":"code","c577778a":"code","da5d3762":"code","47ee9c63":"code","6da11bfc":"code","5644498a":"code","7f69a538":"code","cbcc550a":"code","2ddf3e69":"code","a4534c4b":"code","aad5705c":"code","8f0cc8a0":"code","cf4317bc":"code","e58e5882":"code","f711b7f7":"code","4dcedf4b":"code","de518e5f":"code","cf16a3c9":"markdown","9c62f6a1":"markdown","bfc10798":"markdown","3fd77fb1":"markdown","e534afd0":"markdown","e9018374":"markdown","2268d640":"markdown","2a9a7f65":"markdown","7c9052f0":"markdown","d05e16ce":"markdown","2261e420":"markdown","3ef2943b":"markdown","8a0d4424":"markdown","1e6096c9":"markdown","0aafa6d8":"markdown","cd496177":"markdown","c0cff276":"markdown","a1282a6c":"markdown"},"source":{"4a7801cb":"import warnings\nwarnings.filterwarnings('ignore')","ba9b63ec":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n","b5c6d681":"train_df = pd.read_csv('..\/input\/loan-eligible-dataset\/loan-train.csv')\ntest_df = pd.read_csv('..\/input\/loan-eligible-dataset\/loan-test.csv')","88f177e7":"train_df.head(10)","f1cbae13":"test_df.head(10)","1decd599":"train_df.shape","7cbe29da":"train_df.info()","2fb988de":"train_df.describe()","43eb75f9":"100*train_df.isnull().sum()\/len(train_df)","27d73d94":"train_df['Gender'].value_counts()","40425bb2":"train_df['Married'].value_counts()","7fb3de05":"train_df['Dependents'].value_counts()","3d180743":"train_df['Self_Employed'].value_counts()","572bdad5":"train_df['Married'] = train_df['Married'].replace(np.nan,'Yes')\ntrain_df['Dependents'] = train_df['Dependents'].replace(np.nan,'0')\ntrain_df['Self_Employed'] = train_df['Self_Employed'].replace(np.nan,'No')","384cb5fc":"train_df['Gender'].value_counts()","0ede7011":"train_df['Gender'] = train_df['Gender'].replace(np.nan,'Male')","b5b1272b":"100*train_df.isnull().sum()\/len(train_df)","3e1de3af":"train_df['LoanAmount'] = train_df['LoanAmount'].fillna(train_df['LoanAmount'].median())\ntrain_df['Loan_Amount_Term'] = train_df['Loan_Amount_Term'].fillna(train_df['Loan_Amount_Term'].median())\ntrain_df['Credit_History'] = train_df['Credit_History'].fillna(train_df['Credit_History'].median())","c5ec6106":"100*train_df.isnull().sum()\/len(train_df)","d0ad89cc":"train_df.info()","74b09ffb":"train_df.columns","4b52123f":"def plot_count(var_list):\n    plt.figure(figsize=(30,30))\n    for var in var_list:\n        plt.subplot(4,4,var_list.index(var)+1)\n        ax=sns.countplot(train_df[var], data = train_df)   \n    plt.show()","d05553b7":"plot_count(['Gender', 'Married', 'Dependents', 'Education',\n       'Self_Employed','Property_Area', 'Loan_Status'])","43af7d7a":"plt.figure(figsize = (10,10))\nsns.heatmap(train_df.corr(), annot = True)","ce9f3357":"sns.pairplot(train_df)","6eb953d6":"sns.countplot('Gender', data = train_df, hue = 'Married')","ba333ad7":"def plot_count1(var_list):\n    plt.figure(figsize=(30,30))\n    for var in var_list:\n        plt.subplot(3,2,var_list.index(var)+1)\n        ax=sns.countplot(train_df[var], data = train_df, hue = 'Loan_Status')   \n    plt.show()","46fb01f9":"plot_count1(['Gender', 'Married', 'Dependents', 'Education',\n       'Self_Employed','Property_Area'])","a9a7df2c":"train_df.Loan_Status.replace(['N', 'Y'], [0, 1], inplace =True)","ed379a75":"train_df.head()","4ad56595":"plt.figure(figsize = (10,10))\nsns.heatmap(train_df.corr(), annot = True)","6f641952":"train_df.columns","ab828094":"df_cat = train_df[['Gender', 'Married', 'Dependents', 'Education',\n       'Self_Employed','Property_Area']]","71bc0f2f":"df_cat.info()","2cd6a6ee":"df_cat_dummies = pd.get_dummies(df_cat)","0b3d96c7":"df_cat_dummies","2da61337":"train_df = pd.concat([train_df, df_cat_dummies], axis = 1)\ntrain_df.head()","b5c75115":"train_df.drop(['Loan_ID','Gender', 'Married', 'Dependents', 'Education','Self_Employed','Property_Area'], axis = 1, inplace  =True)","fe8f7fa2":"train_df","4ad0c3a0":"plt.figure(figsize = (20,10))\nsns.heatmap(train_df.corr(), annot = True)","4fa56a03":"X = train_df.drop(['Loan_Status'], axis =1)\ny = train_df['Loan_Status']","460f9003":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, random_state = 142)","14ebbd12":"from sklearn.preprocessing import StandardScaler, MinMaxScaler\n\n\nscaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","52a3ab5e":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom sklearn.metrics import  mean_squared_error, r2_score,plot_roc_curve\nfrom sklearn.metrics import accuracy_score,confusion_matrix, classification_report\n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\n\nlr_pred = logreg.predict(X_test)\nprint(\"Accuracy {}\".format(metrics.accuracy_score(y_test, lr_pred)))\nprint(\"Recall\/Sensitivity {}\".format(metrics.recall_score(y_test, lr_pred)))\nprint(confusion_matrix(y_test, lr_pred))\nprint(classification_report(y_test, lr_pred))","1289c0f5":"from sklearn.ensemble import RandomForestClassifier\n\nrf_model = RandomForestClassifier()\n\nrf_model.fit(X_train, y_train)\n\nrf_pred = rf_model.predict(X_test)\nprint(\"Accuracy {}\".format(metrics.accuracy_score(y_test, rf_pred)))\nprint(\"Recall\/Sensitivity {}\".format(metrics.recall_score(y_test, rf_pred)))\nprint(confusion_matrix(y_test,rf_pred))\nprint(classification_report(y_test, rf_pred))","6acc2e86":"from sklearn.svm import SVC\n\nsvm=SVC()\nsvm.fit(X_train,y_train)\nsvm_pred=svm.predict(X_test)\n\nprint(\"Accuracy {}\".format(metrics.accuracy_score(y_test, svm_pred)))\nprint(\"Recall\/Sensitivity {}\".format(metrics.recall_score(y_test, svm_pred)))\nprint(confusion_matrix(y_test,svm_pred))\nprint(classification_report(y_test, svm_pred))","7f395f67":"from sklearn.tree import DecisionTreeClassifier\n\ndt_clf = DecisionTreeClassifier(max_leaf_nodes=10, random_state=30, criterion='entropy')\ndt_clf.fit(X_train, y_train)\ndt_pred = dt_clf.predict(X_test)\n\nprint(\"Accuracy {}\".format(metrics.accuracy_score(y_test, dt_pred)))\nprint(\"Recall\/Sensitivity {}\".format(metrics.recall_score(y_test, dt_pred)))\nprint(confusion_matrix(y_test, dt_pred))\nprint(classification_report(y_test, dt_pred))","b0e4f9f4":"from sklearn.ensemble import GradientBoostingClassifier\n\ngbc = GradientBoostingClassifier()\ngbc.fit(X_train, y_train)\ngbc_pred = gbc.predict(X_test)\n\nprint(\"Accuracy {}\".format(metrics.accuracy_score(y_test, gbc_pred)))\nprint(\"Recall\/Sensitivity {}\".format(metrics.recall_score(y_test, gbc_pred)))\nprint(confusion_matrix(y_test, gbc_pred))\nprint(classification_report(y_test, gbc_pred))","70458fc6":"pd.concat([pd.DataFrame(X.columns, columns = ['variable']),\n           pd.DataFrame(rf_model.feature_importances_, columns = ['importance'])],\n          axis = 1).sort_values(by = 'importance', ascending = False)","36f8c031":"test_df.head()","c577778a":"100*test_df.isnull().sum()\/len(test_df)","da5d3762":"test_df['Gender'].value_counts()","47ee9c63":"test_df['Gender'] = test_df['Gender'].replace(np.nan,'Male')\ntest_df['Dependents'] = test_df['Dependents'].replace(np.nan,'0')\ntest_df['Self_Employed'] = test_df['Self_Employed'].replace(np.nan,'No')","6da11bfc":"test_df['LoanAmount'] = test_df['LoanAmount'].fillna(test_df['LoanAmount'].median())\ntest_df['Loan_Amount_Term'] = test_df['Loan_Amount_Term'].fillna(test_df['Loan_Amount_Term'].median())\ntest_df['Credit_History'] = test_df['Credit_History'].fillna(test_df['Credit_History'].median())","5644498a":"100*test_df.isnull().sum()\/len(test_df)","7f69a538":"test_df.columns","cbcc550a":"test_df.info()","2ddf3e69":"test_cat = test_df[['Gender', 'Married', 'Dependents', 'Education',\n       'Self_Employed','Property_Area']]","a4534c4b":"test_cat_dummies = pd.get_dummies(test_cat)","aad5705c":"test_df = pd.concat([test_df, test_cat_dummies], axis = 1)\ntest_df.head()","8f0cc8a0":"test_df.drop(['Loan_ID','Gender', 'Married', 'Dependents', 'Education','Self_Employed','Property_Area'], axis = 1, inplace  =True)","cf4317bc":"test_lr_predict = logreg.predict(test_df)\ntest_lr_predict","e58e5882":"test_rf_predict = rf_model.predict(test_df)\ntest_rf_predict","f711b7f7":"test_sv_predict = svm.predict(test_df)\ntest_sv_predict","4dcedf4b":"test_dt_predict = dt_clf.predict(test_df)\ntest_dt_predict","de518e5f":"test_gbc_predict = gbc.predict(test_df)\ntest_gbc_predict","cf16a3c9":"#### Gradient Boosting Classifier","9c62f6a1":"Null value columns:\n1. LoanAmount, Loan_amount_term, Credit History: Float\n2. Gender, Married, Dependents, SelfEmployed: Object","bfc10798":"#### Decision Tree","3fd77fb1":"## Null value Treatment and Imputation","e534afd0":"### Categorical Column Plot and Visualization","e9018374":"#### Logistic Regression","2268d640":"### Gradient Boosting Classifier","2a9a7f65":"### SVM","7c9052f0":"#### Random Forest","d05e16ce":"### Logistic Regression","2261e420":"## Exploratory Data Analysis and Data Visualization","3ef2943b":"### Random Forest","8a0d4424":"## Data Preprocessing and Modelling","1e6096c9":"#CoApplicantIncome and ApplicantIncome\n#LoanAmount and ApplicantIncome\n#CoApplicantIncome and LoanAmount\n#Credit_History and Loan_Status","0aafa6d8":"### Let's work on test_csv","cd496177":"Accuracy Scores:\n- Logistic Regression: 81.62%\n- Random Forest: 81.08%\n- Decision Tree Classifier: 80.54%\n- SVM(Support Vector Machine): 81.62%\n- Gradient Boosting: 77.83%","c0cff276":"### Decision Tree Classfifier","a1282a6c":"#### SVM"}}