{"cell_type":{"25d0e630":"code","bf551edb":"code","f507460a":"code","105fac99":"code","ea400808":"code","bd2f2e57":"code","3ec4b947":"code","8aef5430":"code","f604f1c1":"code","0fbd7a42":"code","a890d769":"code","224508ec":"code","fcec9229":"code","005fa372":"code","b651b09e":"code","2ca528b9":"code","eaeea498":"code","20ee61df":"code","337325fe":"code","8e2bfae4":"code","f9d41953":"code","fe509a8e":"code","920c775b":"code","e5921abe":"code","312d00ba":"code","a0ffc84f":"code","1e724eef":"code","504fb861":"code","fffe4fae":"code","9d92381a":"code","0853aac3":"code","35c432c4":"code","09d683e3":"code","b904fbd0":"code","b9163308":"code","70c157e7":"code","d4a083c5":"code","dd500367":"code","0a8e3ca5":"code","0e91d59b":"code","b9fa312f":"code","00189f11":"code","b78a1f1c":"code","9ff114c7":"code","daa2c1b8":"code","ac3c3a73":"code","bd8d2e07":"code","236d5e8e":"code","cd8f5d59":"code","9c07f81e":"code","35d84d56":"code","e95cf1df":"code","7c1b5706":"code","ba9e3fc6":"code","afeea28e":"code","17358f7f":"code","ac0dbaaa":"code","29a5ce61":"code","28331df1":"code","60f6a889":"code","fbd12c98":"code","2e2454d0":"code","2b9a3635":"code","bd0c9fd8":"code","ce41f496":"code","da77d42b":"code","ec8a1b3b":"code","a23357ab":"code","7d43fe73":"code","c70e3292":"code","90264043":"code","55a1ec5d":"code","1b2c2e28":"code","c16d10fe":"code","f8f7147e":"code","f3fc76b1":"code","2a8788ec":"code","5c10429a":"code","a0c3ea7a":"code","3ab922ad":"code","c13ec8c3":"code","b908ab00":"code","d9049e29":"code","4511d8ca":"code","cfc16ac2":"code","94dca331":"code","83597a58":"code","070f458e":"code","e7773b99":"code","5705fcc8":"code","7b052c91":"code","5bbdbf87":"code","d250782f":"code","bbae4126":"code","991ff4de":"code","9da0463d":"code","77d79e36":"code","ba4f1f93":"code","5f312f8e":"code","3a0e16e5":"code","602d26cb":"code","b623944a":"code","d9ff99ab":"code","942b2d5e":"code","5699673c":"code","1c558888":"code","ce8f7d5b":"code","d17e6898":"code","46a1a4b7":"code","27700d3d":"code","d6a7246d":"code","00c73e39":"code","489d6ba9":"code","57b5fe2a":"code","a98a0420":"code","b24fc2bc":"code","4a4335a0":"code","8ef5bd75":"code","b86bdc1c":"code","f3f6d935":"code","96deb1d5":"code","209d724c":"code","e7ce82e5":"code","4d00056b":"code","9d14851b":"code","a319b6a9":"code","b86366c4":"code","273c712d":"code","dc2c750a":"code","59266456":"code","744fe1df":"code","98445d9a":"code","989ec919":"code","420e012c":"code","410edd71":"code","3f337712":"code","a3351b5e":"code","4912953b":"code","e2c7f372":"code","e1f2d631":"code","120531a6":"code","156bc37b":"code","22766272":"code","8b0e2404":"code","0ca5a2e0":"code","e17ef0bb":"code","0474cc1d":"code","535c0eaa":"code","c17fe988":"code","37d39a75":"code","b1b7e1ad":"code","cef631dd":"code","4c7d1c0d":"code","ec6bb983":"code","8a34379f":"code","553d8b7f":"code","301eca7d":"code","d75e4fe1":"code","c5eb8efe":"code","73f5ca0d":"code","95d7172e":"code","6a016069":"code","a7582b34":"code","017b4110":"code","8a05f6d9":"code","4d211ee7":"code","2a400e8e":"code","e58edc64":"code","f7313634":"code","bc6da7f9":"code","bac55a4b":"code","6bb4c677":"code","72428a07":"code","7ce0eacb":"code","758888d7":"code","b0a721e8":"code","05cf10d3":"code","ecac395f":"code","cfaac839":"code","3c79ed94":"code","0f327f8c":"code","ac6ee2b5":"code","36cab4ac":"code","bed30940":"code","8c7df00a":"code","e2bbac25":"code","41807a8a":"code","f147a61b":"code","9474e6f0":"code","e984169e":"code","43023a89":"code","d80f330e":"code","1bfe6c4f":"code","61951b12":"code","00a599cc":"code","e00e1d3a":"code","54a5ff1b":"code","b9debfec":"code","8ef0f2de":"code","1693c399":"code","96b5097d":"code","dc1df4be":"code","33fa6bd1":"code","a9cc5f3a":"code","2e8dd018":"code","544f7bb6":"code","aa9c33bb":"code","102e3050":"code","6278c061":"code","faf3e51b":"code","0babd110":"code","f736abcd":"code","07923ec7":"code","fc9afa22":"code","c1c6867e":"code","2ab25b99":"code","52452e54":"code","f97976a1":"code","6ced1cbe":"code","fe8edc2a":"code","b4c912b7":"code","0587f86a":"code","70d73fae":"code","e606ceab":"code","d18a2f9e":"code","29ae4239":"code","ebff8b1f":"code","7ddd2304":"code","8ebce5c2":"code","7a07b6a6":"code","eec1d5d1":"code","ca4ac580":"code","18ae438c":"code","30a30fab":"code","75b91cb0":"code","41001530":"code","a8ca656f":"code","f4a0a40a":"code","b8d3c3a3":"markdown","0b4b25c9":"markdown","683f34c1":"markdown","ce40124b":"markdown","dc7c65af":"markdown","9827f94e":"markdown","45950f5b":"markdown","72b4a727":"markdown","9e42d829":"markdown","39577ddd":"markdown","2272e08c":"markdown","f7071d24":"markdown","7fabf587":"markdown","1ca3ea0e":"markdown","eb7ea2e0":"markdown","3897c00f":"markdown","fad57d25":"markdown","c5ea8b6a":"markdown","6e609904":"markdown","b580ee2a":"markdown","48b6ff74":"markdown","bada14ad":"markdown","5fed8105":"markdown","33f55e46":"markdown","cfa761ab":"markdown","c4eaa27d":"markdown","f2f20330":"markdown","7292df7b":"markdown","9ac50cd6":"markdown","d7d8180f":"markdown","96f04f3e":"markdown","7bab12d1":"markdown"},"source":{"25d0e630":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bf551edb":"import seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import preprocessing\nscaler = StandardScaler()\nnormalizer = preprocessing.Normalizer()","f507460a":"hitters_data = pd.read_csv('..\/input\/hitters\/Hitters.csv')\ndf = hitters_data.copy()\ndf.head()","105fac99":"df.describe().T","ea400808":"df.shape","bd2f2e57":"df.isnull().sum()","3ec4b947":"df[df['Salary'].isnull()].head()","8aef5430":"# Let`s erase the missing values.\ndf.dropna(inplace = True)\ndf.shape","f604f1c1":"#In the data set, we only select to use the CHits variable.\nX = df[['CHits']]\ny = df[['Salary']]\nX = scaler.fit_transform(X)\nreg_model = LinearRegression()\nreg_model.fit(X,y)","0fbd7a42":"print(\"Formula: \"+str(reg_model.intercept_)+\" \"+str(reg_model.coef_)+\"x1\")","a890d769":"y_pred = reg_model.predict(X)","224508ec":"from sklearn.metrics import mean_squared_error\nsonuc_tum_veri_slr = np.sqrt(mean_squared_error(y, y_pred))\nsonuc_tum_veri_slr","fcec9229":"sonuc_tum_veri_cv_slr=np.sqrt(np.mean(-cross_val_score(reg_model, X,y,cv = 10, scoring = 'neg_mean_squared_error')))\nsonuc_tum_veri_cv_slr","005fa372":"X = df[['CHits']]\ny = df[['Salary']]\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X,y,\n                                                   test_size=0.20,\n                                                   random_state=46)","b651b09e":"reg_model = LinearRegression()\nreg_model.fit(X_train,y_train)","2ca528b9":"print(\"Formula: \"+str(reg_model.intercept_)+\" \"+str(reg_model.coef_)+\"x1\")","eaeea498":"y_pred = reg_model.predict(X_train)","20ee61df":"sonuc_train_veri_slr = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_slr","337325fe":"y_pred = reg_model.predict(X_test)","8e2bfae4":"sonuc_test_veri_slr=np.sqrt(mean_squared_error(y_pred,y_test))\nsonuc_test_veri_slr","f9d41953":"sonuc_tt_veri_cv_slr = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_slr","fe509a8e":"#Kategorik de\u011fi\u015fkenleri 1-0 \u015feklinde ifade ederiz\ndf = pd.get_dummies(df, columns = ['League', 'Division', 'NewLeague'], drop_first = True)","920c775b":"y = df['Salary']\nX = df.drop('Salary', axis=1)\nX = scaler.fit_transform(X)","e5921abe":"reg_model = LinearRegression()\nreg_model.fit(X,y)","312d00ba":"print(reg_model.intercept_)","a0ffc84f":"print(reg_model.coef_)","1e724eef":"y_pred = reg_model.predict(X)","504fb861":"sonuc_tum_veri_clr=np.sqrt(mean_squared_error(y,y_pred))\nsonuc_tum_veri_clr","fffe4fae":"sonuc_tum_veri_cv_clr = np.sqrt(np.mean(-cross_val_score(reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tum_veri_cv_clr","9d92381a":"y = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","0853aac3":"reg_model = LinearRegression()\nreg_model.fit(X_train, y_train)","35c432c4":"print(reg_model.intercept_)","09d683e3":"print(reg_model.coef_)","b904fbd0":"y_pred = reg_model.predict(X_train)","b9163308":"sonuc_train_veri_clr = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_clr","70c157e7":"y_pred = reg_model.predict(X_test)","d4a083c5":"sonuc_test_veri_clr = np.sqrt(mean_squared_error(y_test, y_pred))\nsonuc_test_veri_clr","dd500367":"sonuc_tt_veri_cv_clr = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_clr","0a8e3ca5":"y = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX = scaler.fit_transform(X)","0e91d59b":"reg_model = Ridge()\nreg_model.fit(X, y)","b9fa312f":"print(reg_model.intercept_)","00189f11":"print(reg_model.coef_)","b78a1f1c":"y_pred = reg_model.predict(X)","9ff114c7":"sonuc_tum_veri_ridge = np.sqrt(mean_squared_error(y, y_pred))\nsonuc_tum_veri_ridge","daa2c1b8":"sonuc_tum_veri_cv_ridge = np.sqrt(np.mean(-cross_val_score(reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tum_veri_cv_ridge","ac3c3a73":"y = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","bd8d2e07":"reg_model = Ridge()\nreg_model.fit(X_train, y_train)","236d5e8e":"print(reg_model.intercept_)","cd8f5d59":"print(reg_model.coef_)","9c07f81e":"y_pred = reg_model.predict(X_train)","35d84d56":"sonuc_train_veri_ridge = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_ridge","e95cf1df":"y_pred = reg_model.predict(X_test)","7c1b5706":"sonuc_test_veri_ridge = np.sqrt(mean_squared_error(y_test, y_pred))\nsonuc_test_veri_ridge","ba9e3fc6":"sonuc_tt_veri_cv_ridge = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_ridge","afeea28e":"y = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX = scaler.fit_transform(X)","17358f7f":"reg_model =Lasso()\nreg_model.fit(X, y)","ac0dbaaa":"print(reg_model.intercept_)","29a5ce61":"print(reg_model.coef_)","28331df1":"y_pred = reg_model.predict(X)","60f6a889":"sonuc_tum_veri_lasso = np.sqrt(mean_squared_error(y, y_pred))\nsonuc_tum_veri_lasso","fbd12c98":"sonuc_tum_veri_cv_lasso = np.sqrt(np.mean(-cross_val_score(reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tum_veri_cv_lasso","2e2454d0":"y = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","2b9a3635":"reg_model =Lasso()\nreg_model.fit(X_train, y_train)","bd0c9fd8":"print(reg_model.intercept_)","ce41f496":"print(reg_model.coef_)","da77d42b":"y_pred = reg_model.predict(X_train)","ec8a1b3b":"sonuc_train_veri_lasso = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_lasso","a23357ab":"y_pred = reg_model.predict(X_test)","7d43fe73":"sonuc_test_veri_lasso = np.sqrt(mean_squared_error(y_test, y_pred))\nsonuc_test_veri_lasso","c70e3292":"sonuc_tt_veri_cv_lasso = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_lasso","90264043":"y = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX = scaler.fit_transform(X)","55a1ec5d":"reg_model =ElasticNet()\nreg_model.fit(X, y)","1b2c2e28":"print(reg_model.intercept_)","c16d10fe":"print(reg_model.coef_)","f8f7147e":"y_pred = reg_model.predict(X)","f3fc76b1":"sonuc_tum_veri_enet = np.sqrt(mean_squared_error(y, y_pred))\nsonuc_tum_veri_enet","2a8788ec":"sonuc_tum_veri_cv_enet = np.sqrt(np.mean(-cross_val_score(reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tum_veri_cv_enet","5c10429a":"y = df[\"Salary\"]\nX = df.drop('Salary', axis=1)\nX = scaler.fit_transform(X)\nfor i in range(len(X)):\n    if X[i][13]<0:\n        X[i][13]=0\n    else:\n        X[i][13]>0\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","a0c3ea7a":"reg_model =ElasticNet()\nreg_model.fit(X_train, y_train)","3ab922ad":"print(reg_model.intercept_)","c13ec8c3":"print(reg_model.coef_)","b908ab00":"y_pred = reg_model.predict(X_train)","d9049e29":"sonuc_train_veri_enet = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_enet","4511d8ca":"y_pred = reg_model.predict(X_test)","cfc16ac2":"sonuc_test_veri_enet = np.sqrt(mean_squared_error(y_test, y_pred))\nsonuc_test_veri_enet","94dca331":"sonuc_tt_veri_cv_enet = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_enet","83597a58":"# The output of the first results\nbasicsonuc_df = pd.DataFrame({\"All Data Error\":[sonuc_tum_veri_slr,sonuc_tum_veri_clr,sonuc_tum_veri_ridge,sonuc_tum_veri_lasso,sonuc_tum_veri_enet],\n                              \"All Data cvScore(K-Fold)\":[sonuc_tum_veri_cv_slr,sonuc_tum_veri_cv_clr,sonuc_tum_veri_cv_ridge,sonuc_tum_veri_cv_lasso,sonuc_tum_veri_cv_enet],\n                              \"Train Error\":[sonuc_train_veri_slr,sonuc_train_veri_clr,sonuc_train_veri_ridge,sonuc_train_veri_lasso,sonuc_train_veri_enet],\n                              \"Test Error\":[sonuc_test_veri_slr,sonuc_test_veri_clr,sonuc_test_veri_ridge,sonuc_test_veri_lasso,sonuc_test_veri_enet],                \n                              \"Train cvScore(K-Fold)\":[sonuc_tt_veri_cv_slr,sonuc_tt_veri_cv_clr,sonuc_tt_veri_cv_ridge,sonuc_tt_veri_cv_lasso,sonuc_tt_veri_cv_enet]})\nbasicsonuc_df.index= [\"SLR\", \"CLR\",\"RID\",\"LAS\",\"ENE\"]\nbasicsonuc_df","070f458e":"df = hitters_data.copy()\ndf.head()","e7773b99":"##We create new variables\ncatbat=df[\"CAtBat\"]\/df[\"Years\"]\nchits=df[\"CHits\"]\/df[\"Years\"]\nchmrun=df[\"CHmRun\"]\/df[\"Years\"]\ncruns=df[\"CRuns\"]\/df[\"Years\"]\ncrbi=df[\"CRBI\"]\/df[\"Years\"]\ncwalks=df[\"CWalks\"]\/df[\"Years\"]\ndf_seckin = pd.DataFrame({\"ortAtBat\":catbat,\"ortHits\":chits,\"ortHmRun\":chmrun,\"ortRuns\":cruns,\"ortRBI\":crbi,\"ortWalks\":cwalks})\ndf = pd.concat([df, df_seckin], axis=1)\ndf.head()","5705fcc8":"df.corr()","7b052c91":"df = df.drop(['AtBat','Hits','HmRun','Runs','RBI','Walks','Assists','Errors',\"PutOuts\",'League','NewLeague'],axis=1)","5bbdbf87":"df = pd.get_dummies(df, columns =[\"Division\"], drop_first = True)","d250782f":"df.head()","bbae4126":"df.isnull().sum()","991ff4de":"from sklearn.impute import KNNImputer\nimputer = KNNImputer(n_neighbors = 5)\ndf_filled = imputer.fit_transform(df)","9da0463d":"df = pd.DataFrame(df_filled,columns = df.columns)","77d79e36":"Q1 = df.Salary.quantile(0.25)\nQ3 = df.Salary.quantile(0.75)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\ndf.loc[df[\"Salary\"] > upper,\"Salary\"] = upper","ba4f1f93":"from sklearn.neighbors import LocalOutlierFactor\nlof =LocalOutlierFactor(n_neighbors= 20)\nlof.fit_predict(df)","5f312f8e":"df_scores = lof.negative_outlier_factor_","3a0e16e5":"np.sort(df_scores)[0:30]","602d26cb":"th = np.sort(df_scores)[9]\nth","b623944a":"outlier = df_scores > th","d9ff99ab":"df = df[df_scores > th]","942b2d5e":"df.shape","5699673c":"from sklearn.linear_model import LinearRegression\nX = df[[\"ortHits\"]]\ny = df[[\"Salary\"]]\nX = scaler.fit_transform(X)\nreg_model = LinearRegression()\nreg_model.fit(X, y)","1c558888":"print(\"Formula: \"+str(reg_model.intercept_)+\" \"+str(reg_model.coef_)+\"x1\")","ce8f7d5b":"y_pred = reg_model.predict(X)","d17e6898":"from sklearn.metrics import mean_squared_error\nsonuc_tum_veri_detay_slr = np.sqrt(mean_squared_error(y, y_pred))\nsonuc_tum_veri_detay_slr","46a1a4b7":"sonuc_tum_veri_cv_detay_slr = np.sqrt(np.mean(-cross_val_score(reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tum_veri_cv_detay_slr","27700d3d":"X = df[[\"ortHits\"]]\ny = df[[\"Salary\"]]\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","d6a7246d":"reg_model = LinearRegression()\nreg_model.fit(X_train, y_train)","00c73e39":"print(\"Formula: \"+str(reg_model.intercept_)+\" \"+str(reg_model.coef_)+\"x1\")","489d6ba9":"y_pred = reg_model.predict(X_train)","57b5fe2a":"sonuc_train_veri_detay_slr = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_detay_slr","a98a0420":"y_pred = reg_model.predict(X_test)","b24fc2bc":"sonuc_test_veri_detay_slr = np.sqrt(mean_squared_error(y_test, y_pred))\nsonuc_test_veri_detay_slr","4a4335a0":"sonuc_tt_veri_cv_detay_slr = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_detay_slr","8ef5bd75":"#We will use this X, y, X_train and y_train in all remaining models.\ny = df[\"Salary\"]\nX = df.drop(\"Salary\",axis=1)\nX = scaler.fit_transform(X)\nfor i in range(len(X)):\n    if X[i][13]<0:\n        X[i][13]=0\n    else:\n        X[i][13]=1  \nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","b86bdc1c":"reg_model = LinearRegression()\nreg_model.fit(X, y)","f3f6d935":"reg_model.intercept_","96deb1d5":"reg_model.coef_","209d724c":"y_pred = reg_model.predict(X)","e7ce82e5":"sonuc_tum_veri_detay_clr = np.sqrt(mean_squared_error(y, y_pred))\nsonuc_tum_veri_detay_clr","4d00056b":"sonuc_tum_veri_cv_detay_clr = np.sqrt(np.mean(-cross_val_score(reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tum_veri_cv_detay_clr","9d14851b":"reg_model = LinearRegression()\nreg_model.fit(X_train, y_train)","a319b6a9":"reg_model.intercept_","b86366c4":"reg_model.coef_","273c712d":"y_pred = reg_model.predict(X_train)","dc2c750a":"sonuc_train_veri_detay_clr = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_detay_clr","59266456":"y_pred = reg_model.predict(X_test)","744fe1df":"sonuc_test_veri_detay_clr = np.sqrt(mean_squared_error(y_test, y_pred))\nsonuc_test_veri_detay_clr","98445d9a":"sonuc_tt_veri_cv_detay_clr = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_detay_clr","989ec919":"reg_model = Ridge()\nreg_model.fit(X, y)","420e012c":"reg_model.intercept_","410edd71":"reg_model.coef_","3f337712":"y_pred = reg_model.predict(X)","a3351b5e":"sonuc_tum_veri_detay_ridge = np.sqrt(mean_squared_error(y, y_pred))\nsonuc_tum_veri_detay_ridge","4912953b":"sonuc_tum_veri_cv_detay_ridge = np.sqrt(np.mean(-cross_val_score(reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tum_veri_cv_detay_ridge","e2c7f372":"reg_model = Ridge()\nreg_model.fit(X_train, y_train)","e1f2d631":"reg_model.intercept_","120531a6":"reg_model.coef_","156bc37b":"y_pred = reg_model.predict(X_train)","22766272":"sonuc_train_veri_detay_ridge = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_detay_ridge","8b0e2404":"y_pred = reg_model.predict(X_test)","0ca5a2e0":"sonuc_test_veri_detay_ridge = np.sqrt(mean_squared_error(y_test, y_pred))\nsonuc_test_veri_detay_ridge","e17ef0bb":"sonuc_tt_veri_cv_detay_ridge = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_detay_ridge","0474cc1d":"reg_model = Lasso()\nreg_model.fit(X, y)","535c0eaa":"reg_model.intercept_","c17fe988":"reg_model.coef_","37d39a75":"y_pred = reg_model.predict(X)","b1b7e1ad":"sonuc_tum_veri_detay_lasso = np.sqrt(mean_squared_error(y, y_pred))\nsonuc_tum_veri_detay_lasso","cef631dd":"sonuc_tum_veri_cv_detay_lasso = np.sqrt(np.mean(-cross_val_score(reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tum_veri_cv_detay_lasso","4c7d1c0d":"reg_model = Lasso()\nreg_model.fit(X_train, y_train)","ec6bb983":"reg_model.intercept_","8a34379f":"reg_model.coef_","553d8b7f":"y_pred = reg_model.predict(X_train)","301eca7d":"sonuc_train_veri_detay_lasso = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_detay_lasso","d75e4fe1":"y_pred = reg_model.predict(X_test)","c5eb8efe":"sonuc_test_veri_detay_lasso = np.sqrt(mean_squared_error(y_test, y_pred))\nsonuc_test_veri_detay_lasso","73f5ca0d":"sonuc_tt_veri_cv_detay_lasso = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_detay_lasso","95d7172e":"reg_model = ElasticNet()\nreg_model.fit(X, y)","6a016069":"reg_model.intercept_","a7582b34":"reg_model.coef_","017b4110":"y_pred = reg_model.predict(X)","8a05f6d9":"sonuc_tum_veri_detay_enet = np.sqrt(mean_squared_error(y, y_pred))\nsonuc_tum_veri_detay_enet","4d211ee7":"sonuc_tum_veri_cv_detay_enet = np.sqrt(np.mean(-cross_val_score(reg_model, X, y, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tum_veri_cv_detay_enet","2a400e8e":"reg_model = ElasticNet()\nreg_model.fit(X_train, y_train)","e58edc64":"reg_model.intercept_","f7313634":"reg_model.coef_","bc6da7f9":"y_pred = reg_model.predict(X_train)","bac55a4b":"sonuc_train_veri_detay_enet = np.sqrt(mean_squared_error(y_train, y_pred))\nsonuc_train_veri_detay_enet","6bb4c677":"y_pred = reg_model.predict(X_test)","72428a07":"sonuc_test_veri_detay_enet = np.sqrt(mean_squared_error(y_test, y_pred))\nsonuc_test_veri_detay_enet","7ce0eacb":"sonuc_tt_veri_cv_detay_enet = np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))\nsonuc_tt_veri_cv_detay_enet","758888d7":"# Output of detailed results\ndetaysonuc_df = pd.DataFrame({\"T\u00fcm Veri Score\":[sonuc_tum_veri_detay_slr,sonuc_tum_veri_detay_clr,sonuc_tum_veri_detay_ridge,sonuc_tum_veri_detay_lasso,sonuc_tum_veri_detay_enet],\n                              \"T\u00fcm Veri CVScore\":[sonuc_tum_veri_cv_detay_slr,sonuc_tum_veri_cv_detay_clr,sonuc_tum_veri_cv_detay_ridge,sonuc_tum_veri_cv_detay_lasso,sonuc_tum_veri_cv_detay_enet],\n                              \"Train Veri Sonuc\":[sonuc_train_veri_detay_slr,sonuc_train_veri_detay_clr,sonuc_train_veri_detay_ridge,sonuc_train_veri_detay_lasso,sonuc_train_veri_detay_enet],\n                              \"Test Veri Sonuc\":[sonuc_test_veri_detay_slr,sonuc_test_veri_detay_clr,sonuc_test_veri_detay_ridge,sonuc_test_veri_detay_lasso,sonuc_test_veri_detay_enet],                              \n                              \"TrainTest CVScore\":[sonuc_tt_veri_cv_detay_slr,sonuc_tt_veri_cv_detay_clr,sonuc_tt_veri_cv_detay_ridge,sonuc_tt_veri_cv_detay_lasso,sonuc_tt_veri_cv_detay_enet]})\ndetaysonuc_df.index= [\"SLR_DETAY\", \"CLR_DETAY\",\"RID_DETAY\",\"LAS_DETAY\",\"ENE_DETAY\"]\ndetaysonuc_df","b0a721e8":"from sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNetCV","05cf10d3":"alphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)","ecac395f":"ridge_cv = RidgeCV(alphas = alphas1, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)","cfaac839":"ridge_cv.fit(X, y)","3c79ed94":"tum_alpha_ridge1 = ridge_cv.alpha_\ntum_alpha_ridge1","0f327f8c":"ridge_cv.fit(X_train, y_train)","ac6ee2b5":"tt_alpha_ridge1 = ridge_cv.alpha_\ntt_alpha_ridge1 ","36cab4ac":"ridge_tuned = Ridge(alpha = tum_alpha_ridge1).fit(X, y)\ny_pred = ridge_tuned.predict(X)\ntum_tuned_ridge1 = np.sqrt(mean_squared_error(y, y_pred))\ntum_tuned_ridge1","bed30940":"ridge_tuned = Ridge(alpha = tt_alpha_ridge1 ).fit(X_train, y_train)\ny_pred = ridge_tuned.predict(X_test)\ntt_tuned_ridge1 = np.sqrt(mean_squared_error(y_test, y_pred))\ntt_tuned_ridge1","8c7df00a":"ridge_cv = RidgeCV(alphas = alphas2, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)","e2bbac25":"ridge_cv.fit(X, y)","41807a8a":"tum_alpha_ridge2 = ridge_cv.alpha_\ntum_alpha_ridge2","f147a61b":"ridge_cv.fit(X_train, y_train)","9474e6f0":"tt_alpha_ridge2 = ridge_cv.alpha_\ntt_alpha_ridge2","e984169e":"ridge_tuned = Ridge(alpha = tum_alpha_ridge2).fit(X, y)\ny_pred = ridge_tuned.predict(X)\ntum_tuned_ridge2 = np.sqrt(mean_squared_error(y, y_pred))\ntum_tuned_ridge2","43023a89":"ridge_tuned = Ridge(alpha = tt_alpha_ridge2).fit(X_train, y_train)\ny_pred = ridge_tuned.predict(X_test)\ntt_tuned_ridge2 = np.sqrt(mean_squared_error(y_test, y_pred))\ntt_tuned_ridge2","d80f330e":"ridge_cv = RidgeCV(alphas = alphas3, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)","1bfe6c4f":"ridge_cv.fit(X, y)","61951b12":"tum_alpha_ridge3 = ridge_cv.alpha_\ntum_alpha_ridge3","00a599cc":"ridge_cv.fit(X_train, y_train)","e00e1d3a":"tt_alpha_ridge3 = ridge_cv.alpha_\ntt_alpha_ridge3","54a5ff1b":"ridge_tuned = Ridge(alpha = tum_alpha_ridge3).fit(X, y)\ny_pred = ridge_tuned.predict(X)\ntum_tuned_ridge3 = np.sqrt(mean_squared_error(y, y_pred))\ntum_tuned_ridge3","b9debfec":"ridge_tuned = Ridge(alpha = tt_alpha_ridge3).fit(X_train, y_train)\ny_pred = ridge_tuned.predict(X_test)\ntt_tuned_ridge3 = np.sqrt(mean_squared_error(y_test, y_pred))\ntt_tuned_ridge3","8ef0f2de":"if (tum_tuned_ridge1 < tum_tuned_ridge2) & (tum_tuned_ridge1 < tum_tuned_ridge3):\n    tum_tuned_ridge = tum_tuned_ridge1\n    tum_alpha_ridge = tum_alpha_ridge1\nelif tum_tuned_ridge2 < tum_tuned_ridge3:\n    tum_tuned_ridge = tum_tuned_ridge2\n    tum_alpha_ridge = tum_alpha_ridge2\nelse:\n    tum_tuned_ridge = tum_tuned_ridge3\n    tum_alpha_ridge = tum_alpha_ridge3\nprint(\"RMSE:\"+str(tum_tuned_ridge)+\"  Alpha:\"+str(tum_alpha_ridge))","1693c399":"if (tt_tuned_ridge1 < tt_tuned_ridge2) & (tt_tuned_ridge1 < tt_tuned_ridge3):\n    tt_tuned_ridge = tt_tuned_ridge1\n    tt_alpha_ridge = tt_alpha_ridge1\nelif tum_tuned_ridge2 < tum_tuned_ridge3:\n    tt_tuned_ridge = tt_tuned_ridge2\n    tt_alpha_ridge = tt_alpha_ridge2\nelse:\n    tt_tuned_ridge = tt_tuned_ridge3\n    tt_alpha_ridge = tt_alpha_ridge3\nprint(\"RMSE:\"+str(tt_tuned_ridge)+\"  Alpha:\"+str(tt_alpha_ridge))","96b5097d":"alphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)","dc1df4be":"lasso_cv = LassoCV(alphas = alphas1, cv = 10)","33fa6bd1":"lasso_cv.fit(X, y)","a9cc5f3a":"tum_alpha_lasso1 = lasso_cv.alpha_\ntum_alpha_lasso1","2e8dd018":"lasso_cv.fit(X_train, y_train)","544f7bb6":"tt_alpha_lasso1 = lasso_cv.alpha_\ntt_alpha_lasso1","aa9c33bb":"lasso_tuned = Lasso(alpha = tum_alpha_lasso1).fit(X, y)\ny_pred = lasso_tuned.predict(X)\ntum_tuned_lasso1 = np.sqrt(mean_squared_error(y, y_pred))\ntum_tuned_lasso1","102e3050":"lasso_tuned = Lasso(alpha = tt_alpha_lasso1).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\ntt_tuned_lasso1 = np.sqrt(mean_squared_error(y_test, y_pred))\ntt_tuned_lasso1","6278c061":"lasso_cv = LassoCV(alphas = alphas2, cv = 10)","faf3e51b":"lasso_cv.fit(X, y)","0babd110":"tum_alpha_lasso2 = lasso_cv.alpha_\ntum_alpha_lasso2","f736abcd":"lasso_cv.fit(X_train, y_train)","07923ec7":"tt_alpha_lasso2 = lasso_cv.alpha_\ntt_alpha_lasso2","fc9afa22":"lasso_tuned = Lasso(alpha = tum_alpha_lasso2).fit(X, y)\ny_pred = lasso_tuned.predict(X)\ntum_tuned_lasso2 = np.sqrt(mean_squared_error(y, y_pred))\ntum_tuned_lasso2","c1c6867e":"lasso_tuned = Lasso(alpha = tt_alpha_lasso2).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\ntt_tuned_lasso2 = np.sqrt(mean_squared_error(y_test, y_pred))\ntt_tuned_lasso2","2ab25b99":"lasso_cv = LassoCV(alphas = alphas3, cv = 10)","52452e54":"lasso_cv.fit(X, y)","f97976a1":"tum_alpha_lasso3 = lasso_cv.alpha_\ntum_alpha_lasso3","6ced1cbe":"lasso_cv.fit(X_train, y_train)","fe8edc2a":"tt_alpha_lasso3 = lasso_cv.alpha_\ntt_alpha_lasso3","b4c912b7":"lasso_tuned = Lasso(alpha = tt_alpha_lasso3).fit(X, y)\ny_pred = lasso_tuned.predict(X)\ntum_tuned_lasso3 = np.sqrt(mean_squared_error(y, y_pred))\ntum_tuned_lasso3","0587f86a":"lasso_tuned = Lasso(alpha = tt_alpha_lasso3).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\ntt_tuned_lasso3 = np.sqrt(mean_squared_error(y_test, y_pred))\ntt_tuned_lasso3","70d73fae":"if (tum_tuned_lasso1 < tum_tuned_lasso2) & (tum_tuned_lasso1 < tum_tuned_lasso3):\n    tum_tuned_lasso = tum_tuned_lasso1\n    tum_alpha_lasso = tum_alpha_lasso1\nelif tum_tuned_lasso2 < tum_tuned_lasso3:\n    tum_tuned_lasso = tum_tuned_lasso2\n    tum_alpha_lasso = tum_alpha_lasso2\nelse:\n    tum_tuned_lasso = tum_tuned_lasso3\n    tum_alpha_lasso = tum_alpha_lasso3\nprint(\"RMSE:\"+str(tum_tuned_lasso)+\"  Alpha:\"+str(tum_alpha_lasso))","e606ceab":"if (tt_tuned_lasso1 < tt_tuned_lasso2) & (tt_tuned_lasso1 < tt_tuned_lasso3):\n    tt_tuned_lasso = tt_tuned_lasso1\n    tt_alpha_lasso = tt_alpha_lasso1\nelif tt_tuned_lasso2 < tt_tuned_lasso3:\n    tt_tuned_lasso = tt_tuned_lasso2\n    tt_alpha_lasso = tt_alpha_lasso2\nelse:\n    tt_tuned_lasso = tt_tuned_lasso3\n    tt_alpha_lasso = tt_alpha_lasso3\nprint(\"RMSE:\"+str(tt_tuned_lasso)+\"  Alpha:\"+str(tt_alpha_lasso))","d18a2f9e":"from sklearn.model_selection import GridSearchCV\nenet_params = {\"l1_ratio\": [0.1,0.2,0.4,0.5,0.6,0.8,1],\n              \"alpha\":[0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1]}\nenet_model = ElasticNet()","29ae4239":"gs_cv_enet = GridSearchCV(enet_model, enet_params, cv = 10).fit(X, y)","ebff8b1f":"gs_cv_enet.best_params_","7ddd2304":"tum_tuned_enet_a = gs_cv_enet.best_params_[\"alpha\"]\ntum_tuned_enet_a","8ebce5c2":"tum_tuned_enet_l = gs_cv_enet.best_params_[\"l1_ratio\"]\ntum_tuned_enet_l","7a07b6a6":"enet_tuned = ElasticNet(**gs_cv_enet.best_params_).fit(X, y)\ny_pred = enet_tuned.predict(X)\ntum_tuned_enet = np.sqrt(mean_squared_error(y, y_pred))\ntum_tuned_enet","eec1d5d1":"gs_cv_enet = GridSearchCV(enet_model, enet_params, cv = 10).fit(X_train, y_train)","ca4ac580":"gs_cv_enet.best_params_","18ae438c":"tt_tuned_enet_a = gs_cv_enet.best_params_[\"alpha\"]\ntt_tuned_enet_a","30a30fab":"tt_tuned_enet_l = gs_cv_enet.best_params_[\"l1_ratio\"]\ntt_tuned_enet_l","75b91cb0":"enet_tuned = ElasticNet(**gs_cv_enet.best_params_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\ntt_tuned_enet = np.sqrt(mean_squared_error(y_test, y_pred))\ntt_tuned_enet","41001530":"#Detayl\u0131 sonu\u00e7lar\u0131n \u00e7\u0131kt\u0131s\u0131\ndetaysonuc_df = pd.DataFrame({\"All Data Error\":[sonuc_tum_veri_detay_slr,sonuc_tum_veri_detay_clr,sonuc_tum_veri_detay_ridge,sonuc_tum_veri_detay_lasso,sonuc_tum_veri_detay_enet],\n                              \"All Data cvScore(K-Fold)\":[sonuc_tum_veri_cv_detay_slr,sonuc_tum_veri_cv_detay_clr,sonuc_tum_veri_cv_detay_ridge,sonuc_tum_veri_cv_detay_lasso,sonuc_tum_veri_cv_detay_enet],\n                              \"All Data Tuned Error\":[np.nan,np.nan,tum_tuned_ridge,tum_tuned_lasso,tum_tuned_enet],\n                              \"Train Error\":[sonuc_train_veri_detay_slr,sonuc_train_veri_detay_clr,sonuc_train_veri_detay_ridge,sonuc_train_veri_detay_lasso,sonuc_train_veri_detay_enet],\n                              \"Test Error\":[sonuc_test_veri_detay_slr,sonuc_test_veri_detay_clr,sonuc_test_veri_detay_ridge,sonuc_test_veri_detay_lasso,sonuc_test_veri_detay_enet],                              \n                              \"Train cvScore(K-Fold)\":[sonuc_tt_veri_cv_detay_slr,sonuc_tt_veri_cv_detay_clr,sonuc_tt_veri_cv_detay_ridge,sonuc_tt_veri_cv_detay_lasso,sonuc_tt_veri_cv_detay_enet],\n                              \"Test Tuned Error\":[np.nan,np.nan,tt_tuned_ridge,tt_tuned_lasso,tt_tuned_enet],\n                              \"Alphas\":[np.nan,np.nan,tt_alpha_ridge,tt_alpha_lasso,tt_tuned_enet_a]})\ndetaysonuc_df.index= [\"SLR_DETAY\", \"CLR_DETAY\",\"RID_DETAY\",\"LAS_DETAY\",\"ENE_DETAY\"]","a8ca656f":"detaysonuc_df","f4a0a40a":"basicsonuc_df","b8d3c3a3":"# 2.4.1 Lasso Regression with full data set","0b4b25c9":"# 4.5.1 T\u00fcm veri ile ElasticNet Regresyon","683f34c1":"# # 4. Results after data preprocessing","ce40124b":"# SHAPE OF THE DATA","dc7c65af":"# 4.1.2 Simple linear regression by separating train and test","9827f94e":"# 4.4.2 Lasso Regression by separating train and test","45950f5b":"# 4.2.1 Multiple linear regression with all data","72b4a727":"# 2.3.2 Train ve test ay\u0131rarak Ridge Regresyon","9e42d829":"# READING THE DATASET","39577ddd":"# ## 2.1.2 Simple linear regression, taken as a train and test","2272e08c":"# ## 2.5.1 T\u00fcm veri seti ile ElasticNet Regresyon","f7071d24":"# 4.3.1 Ridge Regression with all data","7fabf587":"# 1.INSTALLATIONS OF NECESSARY LIBRARIES AND THE UNDERSTANDING OF THE DATASET","1ca3ea0e":"# 5.3 EnetCV","eb7ea2e0":"# 4.2.2 Multiple linear regression by separating train and test","3897c00f":"# 4.4.1 T\u00fcm veri ile Lasso Regresyon","fad57d25":"# 4.5.2 Train ve test ay\u0131rarak ElasticNet Regresyon","c5ea8b6a":"# 2.3.1 Ridge Regression with all data","6e609904":"# # How many missing values are there?","b580ee2a":"# 2.Results to be obtained by deleting missing data and without any further analysis\n# 2.11 Simple Linear REGRESSION with complete Dataset\n","48b6ff74":"# ## 2.4.2 Lasso Regression by separating train and test","bada14ad":"# 5.2 LassoCv","5fed8105":"# 5.1 RidgeCV","33f55e46":"# 5. CV operations Ridge, Lasso, Enet","cfa761ab":"# ## 2.5.2 Train ve test ay\u0131rarak ElasticNet Regresyon","c4eaa27d":"# ## 4.1.1 Simple linear regression with all data","f2f20330":"# 3. Data Pre-processing steps (Missing data, outliers)","7292df7b":"# 4.3.2 Ridge Regression by separating train and test","9ac50cd6":"# # 2.2.1 Multiple linear regression with the whole data set","d7d8180f":"# SHORT INFORMATIONS","96f04f3e":"# Overview of the missing values...","7bab12d1":"# 2.2.2 Multiple linear regression separated as train and test"}}