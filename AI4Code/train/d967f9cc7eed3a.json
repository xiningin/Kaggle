{"cell_type":{"a5841848":"code","ef68d33d":"code","5d979acb":"code","73fa7631":"code","b305bae4":"code","c720f3b7":"code","700b6c62":"code","89a6c98a":"code","db54c22e":"code","2a7c8da7":"code","a442ccdd":"code","35f5e0ea":"code","f01e1a04":"code","1457ecc2":"code","84aea22b":"code","3ca0e4ee":"markdown","67dacb7f":"markdown","3ceff90b":"markdown","3c370254":"markdown"},"source":{"a5841848":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n!pip install swifter\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom ipywidgets import interact, fixed\nfrom scipy import spatial\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport matplotlib.patches as patches\nfrom matplotlib import animation\nfrom matplotlib.animation import FFMpegWriter\npd.set_option('max_columns', 100)\nimport swifter\nimport dateutil\nfrom math import radians\nfrom IPython.display import Video\nimport types \n\nimport warnings\nwarnings.filterwarnings('ignore')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nweeks = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        if 'week' in filename: \n            weeks.append(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ef68d33d":"weeks.sort()\ndf = pd.read_csv(weeks[0])\ndf.head()","5d979acb":"week = df.query('gameId == 2018090600')\nweek.head()","73fa7631":"weekArray = np.array(week)\nweekMod = pd.DataFrame(weekArray, columns=week.columns)\ngroupedWeek =weekMod.groupby(['gameId', 'playId', 'frameId'])\nplayerXY = {}\nfor name, group in groupedWeek:\n    playerXY[name] = []\n    for row in group.iterrows():\n        data = [row[1]['nflId'], row[1]['team'], row[1]['x'], row[1]['y'], row[1]['dir']]\n        playerXY[name].append(data)","b305bae4":"features = list(weekMod.columns)\nweekArray = np.array(weekMod)\nminOppDist = []","c720f3b7":"for player in weekArray:        \n    if player[features.index('team')] != 'football':\n        opponentPositions = playerXY[(player[features.index('gameId')], player[features.index('playId')], player[features.index('frameId')])]\n        distances = []\n        directions = []\n        opponents = []\n        xs = []\n        ys = []\n        ball_dist = None\n        for oppPos in opponentPositions: \n            if player[features.index('team')] != oppPos[1] and player[features.index('team')] != 'football' and oppPos[1] != 'football':\n                dx = (player[features.index('x')] - oppPos[2])**2\n                dy = (player[features.index('y')] - oppPos[3])**2\n                dist = np.sqrt(dx+dy)\n                distances.append(dist)\n                directions.append(oppPos[4])\n                opponents.append(oppPos[0])\n                xs.append(oppPos[2])\n                ys.append(oppPos[3])\n            if oppPos[1] == 'football':\n                dx = (player[features.index('x')] - oppPos[2])**2\n                dy = (player[features.index('y')] - oppPos[3])**2\n                ball_dist = np.sqrt(dx+dy)\n        minDist = min(distances)\n        closestOpponent = opponents[np.argmin(distances)]\n        opponentDir = directions[np.argmin(distances)]\n        opponentX = xs[np.argmin(distances)]\n        opponentY = ys[np.argmin(distances)]\n        summary = [player[features.index('gameId')], player[features.index('playId')], player[features.index('frameId')], player[features.index('nflId')], minDist, closestOpponent, opponentDir, opponentX, opponentY, ball_dist]\n        minOppDist.append(summary)\n             \nminOppDist = pd.DataFrame(minOppDist, columns=['gameId', 'playId', 'frameId', 'nflId', 'oppMinDist', 'closestOpp(nflId)', 'oppDir', 'oppX', 'oppY', 'ball_dist'])\nweekMod = pd.merge(weekMod, minOppDist, how='left', on=['gameId', 'frameId', 'playId', 'nflId'])","700b6c62":"def compute_speed(data):\n    data['v_x'] = np.sin(data['dir']*np.pi\/180) * data['s']\n    data['v_y'] = np.cos(data['dir']*np.pi\/180) * data['s']\n    data['v_theta'] = np.arctan(data['v_x']\/data['v_y']) if data['v_y'] != 0 else 0 \n    return data\ndef speed_ratio(data):\n    data['s_ratio'] = data['s']\/13\n    return data\ndef next_loc(data):\n    delta_t= 0.2\n    data['x_next'] = data.x + data['v_x']*delta_t\n    data['y_next'] = data.y + data['v_y']*delta_t\n    return data\n\ndef radiusOfInfluence(data):\n    min_radius = 2.00\n    max_radius = 10.00\n    max_distance_from_ball = 20.00\n    data['radius_of_influence'] = min_radius + data['ball_dist']**3 * (max_radius-min_radius) \/ max_distance_from_ball if min_radius + data['ball_dist']**3 * (max_radius-min_radius) \/ max_distance_from_ball<max_radius else max_radius\n    return data","89a6c98a":"weekMod = weekMod.swifter.set_npartitions(10).apply(compute_speed, axis=1)\nweekMod = weekMod.swifter.set_npartitions(10).apply(speed_ratio, axis=1)\nweekMod = weekMod.swifter.set_npartitions(10).apply(next_loc, axis=1)\nweekMod = weekMod.swifter.set_npartitions(10).apply(radiusOfInfluence,axis=1)","db54c22e":"def rotMat(theta):\n    c, s = np.cos(theta), np.sin(theta)\n    return np.array(((c, -s), (s, c)))\ndef scalingMat(rad_of_influence, s_ratio):\n    return np.array([[rad_of_influence*(1+s_ratio),0], [0, rad_of_influence*(1-s_ratio)]])\ndef covMat(theta, rad_of_influence, s_ratio):\n    R = rotMat(theta)\n    S = scalingMat(rad_of_influence, s_ratio)\n    return R @S @S @ np.linalg.inv(R)\n\ndef multi_var_gaussian(pos, mu, sigma):\n    n = mu.shape[0]\n    sigma_det = np.linalg.det(sigma)\n    sigma_inv = np.linalg.inv(sigma)\n    N = np.sqrt((2*np.pi)**n *sigma_det)\n    fac = np.einsum('...k,kl,...l->...', pos-mu, sigma_inv, pos-mu)\n    return np.exp(-fac \/ 2) \/ N\n\ndef player_influence(theta, rad_of_influence, s_ratio, data):\n    \"\"\"\n    grid should have a size of 120 and with of 53\n    all other parameters come from influence stuff\n    \n    \"\"\"\n    x = np.linspace(0,120, 120)\n    y = np.linspace(0,53,53)\n    X,Y = np.meshgrid(x,y)\n    \n    pos = np.empty(X.shape + (2,))\n    pos[:, :, 0] = X\n    pos[:, :, 1] = Y\n    sigma = covMat(theta, rad_of_influence, s_ratio)\n    mu = np.array((data['x'], data['y']))\n    Z = multi_var_gaussian(pos, mu,sigma)\n    return Z \ndef field_control(home, away):\n    home_sum = np.zeros((53,120))\n    away_sum = np.zeros((53,120))\n    for i in home: \n        home_sum += i\/np.sum(i)\n    for i in away: \n        away_sum += i\/np.sum(i)\n    mapping = home_sum - away_sum\n    return mapping, home_sum, away_sum\n\ndef timeframe(frame):\n    home = []\n    away = []\n    for key, row in frame.iterrows():\n        if row['team'] == 'home':\n            home.append(player_influence(row['v_theta'], row['radius_of_influence'], row['s_ratio'], row))\n        elif row['team'] == 'away':\n            away.append(player_influence(row['v_theta'], row['radius_of_influence'], row['s_ratio'], row))\n        else:\n            pass\n    mapping, home_sum, away_sum = field_control(home, away)\n    return mapping, home_sum, away_sum\n","2a7c8da7":"play = weekMod.query('gameId== 2018090600 and playId==75')\nprint(max(play['frameId']))\nplay.head()","a442ccdd":"#### adapted from ar2017 -> Identifying coverage schemes among defensive backs\n\ndef create_football_field(linenumbers=True,\n                          endzones=True,\n                          highlight_line=False,\n                          highlight_line_number=55,\n                          highlight_first_down_line=False,\n                          yards_to_go=10,\n                          highlighted_name='Line of Scrimmage',\n                          fifty_is_los=False,\n                          figsize=(12, 6.33)):\n    \"\"\"\n    Function that plots the football field for viewing plays.\n    Allows for showing or hiding endzones.\n    \"\"\"\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1,\n                             edgecolor='r', facecolor='darkgreen', zorder=0)\n\n    fig, ax = plt.subplots(1, figsize=figsize)\n    ax.add_patch(rect)\n\n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             color='white')\n    if fifty_is_los:\n        plt.plot([60, 60], [0, 53.3], color='gold')\n        plt.text(62, 50, '<- Player Yardline at Snap', color='gold')\n    # Endzones\n    if endzones:\n        ez1 = patches.Rectangle((0, 0), 10, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ez2 = patches.Rectangle((110, 0), 120, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ax.add_patch(ez1)\n        ax.add_patch(ez2)\n    plt.xlim(0, 120)\n    plt.ylim(-5, 58.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n            plt.text(x, 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white')\n            plt.text(x - 0.95, 53.3 - 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white', rotation=180)\n    if endzones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n\n    for x in hash_range:\n        ax.plot([x, x], [0.4, 0.7], color='white')\n        ax.plot([x, x], [53.0, 52.5], color='white')\n        ax.plot([x, x], [22.91, 23.57], color='white')\n        ax.plot([x, x], [29.73, 30.39], color='white')\n\n    if highlight_line:\n        hl = highlight_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='yellow')\n        #plt.text(hl + 2, 50, '<- {}'.format(highlighted_name),\n        #         color='yellow')\n        \n    if highlight_first_down_line:\n        fl = hl + yards_to_go\n        plt.plot([fl, fl], [0, 53.3], color='yellow')\n        #plt.text(fl + 2, 50, '<- {}'.format(highlighted_name),\n        #         color='yellow')\n    return fig, ax\n\ndef calculate_dx_dy_arrow(x, y, angle, speed, multiplier):\n    if angle <= 90:\n        angle = angle\n        dx = np.sin(radians(angle)) * multiplier * speed\n        dy = np.cos(radians(angle)) * multiplier * speed\n        return dx, dy\n    if angle > 90 and angle <= 180:\n        angle = angle - 90\n        dx = np.sin(radians(angle)) * multiplier * speed\n        dy = -np.cos(radians(angle)) * multiplier * speed\n        return dx, dy\n    if angle > 180 and angle <= 270:\n        angle = angle - 180\n        dx = -(np.sin(radians(angle)) * multiplier * speed)\n        dy = -(np.cos(radians(angle)) * multiplier * speed)\n        return dx, dy\n    if angle > 270 and angle <= 360:\n        angle = 360 - angle\n        dx = -np.sin(radians(angle)) * multiplier * speed\n        dy = np.cos(radians(angle)) * multiplier * speed\n        return dx, dy\n\ndef animate_player_movement(weekData, playId, gameId):\n    playData = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/plays.csv')\n    play = weekMod.query('gameId== '+str(gameId)+' and playId=='+ str(playId))\n    playHome = weekData.query('gameId==' + str(gameId) + ' and playId==' + str(playId) + ' and team == \"home\"')\n    playAway = weekData.query('gameId==' + str(gameId) + ' and playId==' + str(playId) + ' and team == \"away\"')\n    playFootball = weekData.query('gameId==' + str(gameId) + ' and playId==' + str(playId) + ' and team == \"football\"')\n    \n    playHome['time'] = playHome['time'].apply(lambda x: dateutil.parser.parse(x).timestamp()).rank(method='dense')\n    playAway['time'] = playAway['time'].apply(lambda x: dateutil.parser.parse(x).timestamp()).rank(method='dense')\n    playFootball['time'] = playFootball['time'].apply(lambda x: dateutil.parser.parse(x).timestamp()).rank(method='dense')\n    \n    maxTime = int(playAway['time'].unique().max())\n    minTime = int(playAway['time'].unique().min())\n    \n    yardlineNumber = playData.query('gameId==' + str(gameId) + ' and playId==' + str(playId))['yardlineNumber'].item()\n    yardsToGo = playData.query('gameId==' + str(gameId) + ' and playId==' + str(playId))['yardsToGo'].item()\n    absoluteYardlineNumber = playData.query('gameId==' + str(gameId) + ' and playId==' + str(playId))['absoluteYardlineNumber'].item() - 10\n    playDir = playHome.sample(1)['playDirection'].item()\n    \n    if (absoluteYardlineNumber > 50):\n        yardlineNumber = 100 - yardlineNumber\n    if (absoluteYardlineNumber <= 50):\n        yardlineNumber = yardlineNumber\n        \n    if (playDir == 'left'):\n        yardsToGo = -yardsToGo\n    else:\n        yardsToGo = yardsToGo\n    \n    fig, ax = create_football_field(highlight_line=True, highlight_line_number=yardlineNumber, highlight_first_down_line=True, yards_to_go=yardsToGo)\n    playDesc = playData.query('gameId==' + str(gameId) + ' and playId==' + str(playId))['playDescription'].item()\n    plt.title(f'Game # {gameId} Play # {playId} \\n {playDesc}')\n    \n    def update_animation(time):\n        patch = []\n        \n        homeX = playHome.query('time == ' + str(time))['x']\n        homeY = playHome.query('time == ' + str(time))['y']\n        homeNum = playHome.query('time == ' + str(time))['jerseyNumber']\n        homeOrient = playHome.query('time == ' + str(time))['o']\n        homeDir = playHome.query('time == ' + str(time))['dir']\n        homeSpeed = playHome.query('time == ' + str(time))['s']\n        homePosition = playHome.query('time == ' + str(time))['position']\n        patch.extend(plt.plot(homeX, homeY, 'o',c='gold', ms=20, mec='white', zorder=3))\n        \n        \n        # Home players' jersey number \n        for x, y, num in zip(homeX, homeY, homeNum):\n            patch.append(plt.text(x, y, int(num), va='center', ha='center', color='black', size='medium'))\n            \n        # Home players' orientation\n        for x, y, orient in zip(homeX, homeY, homeOrient):\n            dx, dy = calculate_dx_dy_arrow(x, y, orient, 1, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color='gold', width=0.5, shape='full'))\n            \n        # Home players' direction\n        for x, y, direction, speed in zip(homeX, homeY, homeDir, homeSpeed):\n            dx, dy = calculate_dx_dy_arrow(x, y, direction, speed, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color='black', width=0.25, shape='full'))\n        \n        \n        awayX = playAway.query('time == ' + str(time))['x']\n        awayY = playAway.query('time == ' + str(time))['y']\n        awayNum = playAway.query('time == ' + str(time))['jerseyNumber']\n        awayOrient = playAway.query('time == ' + str(time))['o']\n        awayDir = playAway.query('time == ' + str(time))['dir']\n        awaySpeed = playAway.query('time == ' + str(time))['s']\n        awayPosition = playAway.query('time == ' + str(time))['position']\n        patch.extend(plt.plot(awayX, awayY, 'o',c='orangered', ms=20, mec='white', zorder=3))\n        \n        # Away players' jersey number \n        for x, y, num in zip(awayX, awayY, awayNum):\n            patch.append(plt.text(x, y, int(num), va='center', ha='center', color='white', size='medium'))\n            \n        # Away players' orientation\n        for x, y, orient in zip(awayX, awayY, awayOrient):\n            dx, dy = calculate_dx_dy_arrow(x, y, orient, 1, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color='orangered', width=0.5, shape='full'))\n        \n        # Away players' direction\n        for x, y, direction, speed in zip(awayX, awayY, awayDir, awaySpeed):\n            dx, dy = calculate_dx_dy_arrow(x, y, direction, speed, 1)\n            patch.append(plt.arrow(x, y, dx, dy, color='black', width=0.25, shape='full'))\n        \n        \n        # Football location\n        footballX = playFootball.query('time == ' + str(time))['x']\n        footballY = playFootball.query('time == ' + str(time))['y']\n        patch.extend(plt.plot(footballX, footballY, 'o', c='black', ms=10, mec='white', zorder=3, data=playFootball.query('time == ' + str(time))['team']))\n        # Field control of the different teams \n        x = np.linspace(0,120, 120)\n        y = np.linspace(0,53.3,53)\n        X,Y = np.meshgrid(x,y)\n        \n        mapping, home_, away_ = timeframe(play.query('frameId== ' + str(time)))\n        \n        patch.extend(plt.contourf(X, Y, mapping, cmap=cm.viridis_r, alpha=0.5).collections)\n        \n        return patch\n    \n    ims = [[]]\n    for time in np.arange(minTime, maxTime+1):\n        patch = update_animation(time)\n        ims.append(patch)\n        \n    anim = animation.ArtistAnimation(fig, ims, repeat=False, blit=False)\n    \n    return anim","35f5e0ea":"anim = animate_player_movement(weekMod, 75, 2018090600)\nwriter = FFMpegWriter(fps=10)\nanim.save('animation_notrail.mp4', writer=writer)\nVideo(\"animation_notrail.mp4\")","f01e1a04":"# Field control of the different teams \nx = np.linspace(0,120, 120)\ny = np.linspace(0,53.3,53)\nX,Y = np.meshgrid(x,y)\ntime = 45\nmapping, home_, away_ = timeframe(play.query('frameId == ' + str(time)))\n\na = plt.contourf(X, Y, mapping, cmap=cm.viridis_r).collections","1457ecc2":"def animate_field_control(weekdata, playId, gameId):\n    play = weekMod.query('gameId== '+str(gameId)+' and playId=='+ str(playId))\n    def update_animation(time):\n        # Field control of the different teams \n        x = np.linspace(0,120, 120)\n        y = np.linspace(0,53.3,53)\n        X,Y = np.meshgrid(x,y)\n        \n        mapping, home_, away_ = timeframe(weekdata.query('frameId== ' + str(time)))\n        \n        patch=plt.contourf(X, Y, mapping, cmap=cm.viridis_r).collections\n        return patch \n    \n    ims = []\n    for time in np.arange(minTime, maxTime+1):\n        patch = update_animation(time)\n        ims.append(patch)\n        \n    anim = animation.ArtistAnimation(fig, ims, repeat=False, blit=False)\n    \n    return anim","84aea22b":"anim = animate_player_movement(weekMod, 75, 2018090600)\nwriter = FFMpegWriter(fps=10)\nanim.save('animation_field_control.mp4', writer=writer)\nVideo(\"animation_field_control.mp4\")","3ca0e4ee":"# Computing distances","67dacb7f":"## Compute Speed\n","3ceff90b":"## Here you can play\n\nVisualization not completely done select play above and timefroame below.\n\nPaper: [Wide Open Space](https:\/\/www.researchgate.net\/publication\/324942294_Wide_Open_Spaces_A_statistical_technique_for_measuring_space_creation_in_professional_soccer)","3c370254":"## Additional variables\n\nFrom basic field theory we need aditional variables \n* distance to ball\n* speed of specific players\n"}}