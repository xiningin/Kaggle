{"cell_type":{"9ca9698b":"code","3342f3dd":"code","cbfa352b":"code","62ebf0e2":"code","8e913b44":"code","a7aa2477":"code","9a81b9af":"code","eb46f4bd":"code","287c95b8":"code","822fc3f2":"code","bc44dd64":"code","c1467620":"code","4f3b423d":"code","ccc7df07":"code","2c49647a":"code","e7001c06":"code","443f3be8":"code","16054852":"code","5f725905":"code","37e4c861":"code","e404e370":"code","bae7282e":"markdown","fca28007":"markdown","1c672374":"markdown","f5674a69":"markdown","cf39d055":"markdown","ee33de52":"markdown","02930800":"markdown"},"source":{"9ca9698b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom datetime import datetime, timedelta","3342f3dd":"df_patient = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/patient.csv')\ndf_route = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/\/route.csv')\ndf_time = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/\/time.csv')","cbfa352b":"df_patient.head()","62ebf0e2":"df_patient.isna().sum()","8e913b44":"df_patient['birth_year'] = df_patient.birth_year.fillna(0.0).astype(int)\ndf_patient['birth_year'] = df_patient['birth_year'].map(lambda x: x if x > 0 else np.nan)","a7aa2477":"df_patient.confirmed_date = pd.to_datetime(df_patient.confirmed_date)","9a81b9af":"explode = (0, 0.1)  \nfig1, ax1 = plt.subplots()\nax1.pie(df_patient.sex.value_counts().values, explode=explode, \n        labels=df_patient.sex.value_counts().index, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  \nplt.tight_layout()\nplt.show()","eb46f4bd":"df_patient['age'] = datetime.now().year - df_patient.birth_year ","287c95b8":"plt.figure(figsize=(15, 5))\nplt.title('age')\ndf_patient.age.hist();","822fc3f2":"df_patient.infection_reason = df_patient.infection_reason.map(lambda x : str(x).strip())","bc44dd64":"plt.figure(figsize=(15,5))\nplt.title('Infection reason')\ndf_patient[df_patient.infection_reason != 'nan'].infection_reason.value_counts().plot.bar();","c1467620":"plt.figure(figsize=(15,5))\nplt.title('Region')\ndf_patient.region.value_counts().plot.bar();","4f3b423d":"plt.figure(figsize=(15,5))\nplt.title('Number patients in city')\ndf_route.city.value_counts().plot.bar();","ccc7df07":"plt.figure(figsize=(15,5))\nplt.title('Visit')\ndf_route.visit.value_counts().plot.bar();","2c49647a":"patient_trend_df = df_patient.groupby('confirmed_date').count().iloc[:,[0]]\npatient_trend_df.columns = ['confirmed']\npatient_cumsum = patient_trend_df.iloc[:,[0]].cumsum()\npatient_cumsum.columns = ['confirmed']\nplt.figure(figsize=(14,5))\nax = sns.lineplot(x=patient_trend_df.index,y='confirmed', \n             data=patient_trend_df, label='daily patient')\nax.set_ylabel('Daily Count')\nax2 = ax.twinx()\nsns.lineplot(x=patient_cumsum.index, y='confirmed', \n             data=patient_cumsum, ax=ax2, color='red', label='Accumulated Patients')\nax.figure.legend()\nax2.set_ylabel('Accumulated Count')\nplt.show()","e7001c06":"patient_trend_release_df = df_patient.groupby('released_date').count()\npatient_release_cumsum = patient_trend_release_df.iloc[:,[0]].cumsum()\n\npatient_trend_decease_df = df_patient.groupby('deceased_date').count()\npatient_decease_cumsum = patient_trend_decease_df.iloc[:,[0]].cumsum()","443f3be8":"patient_release_cumsum.columns = ['cured']\npatient_decease_cumsum.columns = ['death']\npatient_accum = pd.merge(patient_release_cumsum,patient_decease_cumsum, left_index=True, right_index=True, how='outer').fillna(method='ffill')","16054852":"plt.figure(figsize=(14,5))\nsns.lineplot(x=patient_accum.index,y='cured', \n            data=patient_accum, label='Accumulated Cured')\n\nsns.lineplot(x=patient_accum.index, y='death', \n             data=patient_accum, color='red', label='Accumulated Death')\nplt.xticks(rotation=30)\nplt.show()","5f725905":"model = ARIMA(patient_cumsum, order=(1,1,2))\nresults = model.fit()\n\nresults.plot_predict(1, 50)\nplt.show()","37e4c861":"model = ARIMA(patient_release_cumsum, order=(1,1,0))\nresults = model.fit()\n\nresults.plot_predict(1, 50)\nplt.show()","e404e370":"model = ARIMA(patient_decease_cumsum, order=(1,1,0))\nresults = model.fit()\n\nresults.plot_predict(2, 30)\nplt.show()","bae7282e":"Due to too many NA values in patient data, Only available as a rough reference. Regional data are too huge gap for known facts.","fca28007":"## Time Series Prediction","1c672374":"### Age Distribution","f5674a69":"## Patient Distribution","cf39d055":"### Region","ee33de52":"### Infection Reason","02930800":"### Gender Distribution"}}