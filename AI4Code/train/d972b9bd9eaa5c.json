{"cell_type":{"67e24851":"code","55e0f1a9":"code","d6627853":"code","73fd2b33":"code","74fa3b34":"code","844929c9":"code","1529d084":"code","893f1acc":"code","e731c24f":"code","abde88bf":"code","ba754cc9":"code","b718ef5f":"markdown","538e6a71":"markdown","c1d50600":"markdown","fbc00bca":"markdown","a5a1ca04":"markdown","1a8378ea":"markdown","a7d72dc6":"markdown","03fa9e66":"markdown"},"source":{"67e24851":"!conda install '\/kaggle\/input\/pydicom-conda-helper\/libjpeg-turbo-2.1.0-h7f98852_0.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/libgcc-ng-9.3.0-h2828fa1_19.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/gdcm-2.8.9-py37h500ead1_1.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/conda-4.10.1-py37h89c1867_0.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/certifi-2020.12.5-py37h89c1867_1.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/openssl-1.1.1k-h7f98852_0.tar.bz2' -c conda-forge -y","55e0f1a9":"import pandas as pd\nfrom pathlib import Path\nimport os\nfrom tqdm import tqdm\nimport numpy as np\n\nfrom PIL import Image\n\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\n# for .dcm file\nimport pydicom\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut","d6627853":"submission = pd.read_csv(\"..\/input\/siim-covid19-detection\/sample_submission.csv\")\nif submission.shape[0] == 2477:\n    fast_sub = True\nelse:\n    fast_sub = False","73fd2b33":"# extract image pixel data from .dcm\ndef read_xray(path):\n    dicom = pydicom.read_file(path)\n    data = apply_voi_lut(dicom.pixel_array, dicom)\n    \n    if dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n    \n    return data","74fa3b34":"# convert .dcm to .jpg\nos.makedirs('\/kaggle\/tmp\/siim\/images\/test', exist_ok=True)\nfor path in tqdm(Path(\"..\/input\/siim-covid19-detection\/test\").rglob('*.dcm')):\n    xray = read_xray(str(path))\n    im = Image.fromarray(xray)\n    im.save(os.path.join('\/kaggle\/tmp\/siim\/images\/test', path.name.replace('.dcm', '.jpg')))\n    if fast_sub: break","844929c9":"# Copy YOLOv5 directory to working directory\n!cp -r \/kaggle\/input\/yolov5\/yolov5 yolov5","1529d084":"os.chdir('\/kaggle\/working\/yolov5')\n!rm -rf runs\/detect\/\n!rm -rf runs\/test\/\n!python3 detect.py \\\n        --weights runs\/train\/exp2\/weights\/best.pt \\\n        --source \/kaggle\/tmp\/siim\/images\/test \\\n        --iou-thres 0.5 \\\n        --save-txt \\\n        --save-conf \\\n        --device 0\nos.chdir('\/kaggle\/working')","893f1acc":"label_path = 'yolov5\/runs\/detect\/exp\/labels\/'\nimage_path = '\/kaggle\/tmp\/siim\/images\/test\/'","e731c24f":"if fast_sub:\n    sample_id = \"a29c5a68b07b\"\n    fig, ax = plt.subplots()\n\n    im = Image.open(os.path.join(image_path, f'{sample_id}.jpg'))\n    ax.imshow(im, cmap='gray')\n\n    with open(os.path.join(label_path, f'{sample_id}.txt'), 'r') as f:\n        labels = f.read().split('\\n')\n\n    for label in labels[:-1]:\n        _, x_center, y_center, width, height, _ = list(map(lambda x: float(x), label.split(' ')))\n        rect = patches.Rectangle(((x_center - width\/2)*im.size[0], (y_center-height\/2)*im.size[1]),\n                                 width*im.size[0], height*im.size[1], linewidth=1, edgecolor='r', facecolor='none')\n        ax.add_patch(rect)\n    plt.show()","abde88bf":"if not fast_sub:\n    for idx in tqdm(submission.index):\n        data_id = submission.loc[idx]['id']\n        if data_id.endswith('_image'):\n            if os.path.exists(os.path.join(label_path, data_id.replace(\"_image\", \".txt\"))):\n                im = Image.open(os.path.join(image_path, data_id.replace(\"_image\", \".jpg\")))\n\n                with open(os.path.join(label_path, data_id.replace(\"_image\", \".txt\")), 'r') as f:\n                    labels = f.read().split('\\n')\n\n                ans = \"\"\n                for label in labels[:-1]:\n                    _, x_center, y_center, width, height, confidence = list(map(lambda x: float(x), label.split(' ')))\n                    xmin = int((x_center - width \/ 2) * im.size[0])\n                    xmax = int((x_center + width \/ 2) * im.size[0])\n                    ymin = int((y_center - height \/ 2) * im.size[1])\n                    ymax = int((y_center + height \/ 2) * im.size[1])\n                    ans += f\"opacity {confidence} {xmin} {ymin} {xmax} {ymax} \"\n                submission.loc[idx, 'PredictionString'] = ans\nelse:\n    for idx in tqdm(submission.index):\n        data_id = submission.loc[idx]['id']\n        if data_id == \"a29c5a68b07b_image\":\n            if os.path.exists(os.path.join(label_path, data_id.replace(\"_image\", \".txt\"))):\n                im = Image.open(os.path.join(image_path, data_id.replace(\"_image\", \".jpg\")))\n\n                with open(os.path.join(label_path, data_id.replace(\"_image\", \".txt\")), 'r') as f:\n                    labels = f.read().split('\\n')\n\n                ans = \"\"\n                for label in labels[:-1]:\n                    _, x_center, y_center, width, height, confidence = list(map(lambda x: float(x), label.split(' ')))\n                    xmin = int((x_center - width \/ 2) * im.size[0])\n                    xmax = int((x_center + width \/ 2) * im.size[0])\n                    ymin = int((y_center - height \/ 2) * im.size[1])\n                    ymax = int((y_center + height \/ 2) * im.size[1])\n                    ans += f\"opacity {confidence} {xmin} {ymin} {xmax} {ymax} \"\n                submission.loc[idx, 'PredictionString'] = ans","ba754cc9":"# !rm -rf \/kaggle\/working\/yolov5\nsubmission.to_csv('\/kaggle\/working\/submission.csv', index=False)  ","b718ef5f":"## Import","538e6a71":"## Inference YOLOv5","c1d50600":"## Load submission file","fbc00bca":"## Write submission file","a5a1ca04":"## .dcm to .jpg","1a8378ea":"If submission file is public, just submit fast!","a7d72dc6":"### Now, submit!","03fa9e66":"### Did YOLOv5 detect well?"}}