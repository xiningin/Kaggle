{"cell_type":{"34c2afad":"code","efa3f98c":"code","28327bc2":"code","af6fb84f":"code","2d8563e6":"code","af1e5b19":"code","7c5c2ceb":"code","5cf68b6a":"code","23950ac2":"code","22766c32":"code","6cbe4e25":"code","18e19d4f":"code","050dbdfe":"code","602700f1":"code","6cd8a309":"code","626e8dd3":"code","f0e22740":"code","9f981c5a":"code","15f23dbc":"code","bb0cd256":"code","6f33fd3d":"code","5303aa94":"code","f8adfece":"code","efd2cc63":"code","c739478d":"code","5ba8fc45":"code","62619bb1":"code","a448356d":"code","3ff07874":"code","3766b9f6":"code","88164678":"code","f71a7786":"code","5beb187c":"code","c259ec82":"code","00b0593d":"code","d90754b5":"code","c515b4f0":"code","0eb0b6d4":"code","416967bb":"code","660855ec":"code","c011a9a5":"code","5c69edcf":"code","9fcc31e0":"code","2208349c":"code","e223963d":"code","5ad6d0e8":"code","e003960f":"code","891bbd59":"code","edcad933":"code","d3488b7f":"code","372fe59f":"code","787878ea":"code","27f4688b":"markdown","315cad30":"markdown","036ff524":"markdown","c972d6da":"markdown","f120f90b":"markdown","a3af52d9":"markdown","0fc5dba0":"markdown","498f05ab":"markdown","1f3fc071":"markdown","7a69775c":"markdown","db82d9c6":"markdown","2dc3b040":"markdown","e49ff791":"markdown","6bc69c84":"markdown","e56c28a1":"markdown","45b2cb9c":"markdown","43e7eb7b":"markdown","9f3827ff":"markdown","e8c3c67e":"markdown","3374cdea":"markdown","aef0c855":"markdown","2b6081be":"markdown","88ac063d":"markdown"},"source":{"34c2afad":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import RandomizedSearchCV, KFold\nfrom sklearn.metrics import r2_score, make_scorer, mean_absolute_error\nfrom sklearn.linear_model import SGDRegressor, LinearRegression,Lasso, Ridge\nfrom xgboost import XGBRegressor","efa3f98c":"data= pd.read_csv(\"..\/input\/CarPrice\/CarPrice.csv\")","28327bc2":"data.head()","af6fb84f":"data.shape","2d8563e6":"data.describe()","af1e5b19":"data.info()","7c5c2ceb":"Company= data[\"CarName\"].apply(lambda x : x.split(\" \")[0])\ndata.insert(3, \"Company\", Company)\ndata.drop([\"CarName\"], axis=1, inplace=True)\ndata.head()","5cf68b6a":"data.Company.unique()","23950ac2":"#Fixing Companies's names\ndata.Company = data.Company.str.lower()\n\ndef fix_Company_name(x,y):\n    data.Company.replace(x,y,inplace=True)\n    \nfix_Company_name(\"maxda\",\"mazda\")\nfix_Company_name(\"porcshce\",\"porsche\")\nfix_Company_name(\"vokswagen\",\"volkswagen\")\nfix_Company_name(\"vw\",\"volkswagen\")","22766c32":"data.Company.unique()","6cbe4e25":"data.duplicated().sum()","18e19d4f":"data.columns","050dbdfe":"plt.figure(figsize=(22,10))\nsns.set(style=\"dark\") \n\nplt.subplot(1,2,1)\nplt.title(\"Distribution plot\")\nsns.distplot(data.price)\n\nplt.subplot(1,2,2)\nplt.title(\"Box plot\")\nsns.boxplot(y=data.price);","602700f1":"print(data.price.describe(percentiles= [0.25,0.50,0.75,0.9,1]))","6cd8a309":"plt.figure(figsize= (40,10))\n\ncolors = np.random.rand(len(data.Company.value_counts().unique()),3)\nplt.subplot(1,3,1)\nplt1 = data.Company.value_counts().plot(kind=\"bar\", color=colors)\nplt.title(\"Company histogram\")\nplt1.set(xlabel= \"Car company\", ylabel= \"Frequency of company\")\n\ncolors = np.random.rand(2,3)\nplt.subplot(1,3,2)\nplt2= data.fueltype.value_counts().plot(kind=\"bar\", color=colors)\nplt.title(\"Fuel type histogram\")\nplt2.set(xlabel=\"Fuel type\", ylabel=\"Frequency of fuel type\")\n\ncolors = np.random.rand(5,3)\nplt.subplot(1,3,3)\nplt3= data.carbody.value_counts().plot(kind=\"bar\", color=colors)\nplt.title(\"Car type histogram\")\nplt3.set(xlabel =\"Car type\", ylabel=\"Frequency of car type\");","626e8dd3":"plt.figure(figsize=(22,10))\n\nplt.subplot(1,2,1)\nplt.title(\"Symboling histogram\")\nsns.countplot(data.symboling, palette=(\"cubehelix\"))\n\nplt.subplot(1,2,2)\nplt.title(\"Symboling vs price\")\nsns.boxplot(x=data.symboling, y=data.price, palette=(\"cubehelix\"));","f0e22740":"plt.figure(figsize=(22,10))\n\nplt.subplot(1,2,1)\nplt.title(\"Engine type histogram\")\nsns.countplot(data.enginetype, palette=\"Blues_d\")\n\nplt.subplot(1,2,2)\nplt.title(\"Engine vs Price\")\nsns.boxplot(x=data.enginetype, y= data.price, palette=\"Blues_d\")\n\ndf= pd.DataFrame(data.groupby([\"enginetype\"])[\"price\"].mean().sort_values(ascending=False))\ndf.plot.bar(figsize=(18,8))\nplt.title(\"Engine type vs Price\");","9f981c5a":"plt.figure(figsize=(30,10))\n\ndf= pd.DataFrame(data.groupby([\"Company\"])[\"price\"].mean().sort_values(ascending=False))\ndf.plot.bar()\nplt.title(\"Company name vs Average price\")\n\ndf= pd.DataFrame(data.groupby([\"fueltype\"])[\"price\"].mean().sort_values(ascending=False))\ndf.plot.bar()\nplt.title(\"Fueltype vs Average price\")\n\ndf= pd.DataFrame(data.groupby([\"carbody\"])[\"price\"].mean().sort_values(ascending=False))\ndf.plot.bar()\nplt.title(\"Car type vs Average price\");","15f23dbc":"plt.figure(figsize=(22,10))\n\nplt.subplot(2,2,1)\nplt.title(\"Door numbers histogram\")\nsns.countplot(data.doornumber, palette=(\"plasma\"))\n\nplt.subplot(2,2,2)\nplt.title(\"Door number vs price\")\nsns.boxplot(x=data.doornumber, y=data.price, palette=(\"plasma\"))\n\nplt.subplot(2,2,3)\nplt.title(\"Aspiration histogram\")\nsns.countplot(data.aspiration, palette=(\"plasma\"))\n\nplt.subplot(2,2,4)\nplt.title(\"Aspiration vs price\")\nsns.boxplot(x=data.aspiration, y=data.price, palette=(\"plasma\"));","bb0cd256":"def plot_count (x,fig):\n    plt.subplot(4,2,fig)\n    plt.title(x+ \"Histogram\")\n    sns.countplot(x=data[x], palette=(\"magma\"))\n    plt.subplot(4,2,fig+1)\n    plt.title(x+ \"vs price\")\n    sns.boxplot(x=data[x], y=data[\"price\"], palette=(\"magma\"))\n    \nplt.figure(figsize=(30,20))\nplot_count(\"enginelocation\",1)\nplot_count(\"cylindernumber\",3)\nplot_count(\"fuelsystem\",5)\nplot_count(\"drivewheel\",7);","6f33fd3d":"def scatter (x,fig):\n    plt.subplot(5,2,fig)\n    plt.scatter(data[x], data[\"price\"])\n    plt.title(x+ \"vs price\")\n    plt.ylabel(\"Price\")\n    plt.xlabel(x)\n\nplt.figure(figsize=(10,30))\n\nscatter(\"carlength\",1)\nscatter(\"carwidth\",2)\nscatter(\"carheight\",3)\nscatter(\"curbweight\",4);","5303aa94":"def scatter (x,fig):\n    plt.subplot(3,3,fig)\n    plt.scatter(data[x], data[\"price\"])\n    plt.xlabel(x)\n\nplt.figure(figsize=(20,20))\n\nscatter(\"enginesize\",1)\nscatter(\"boreratio\",2)\nscatter(\"stroke\",3)\nscatter(\"compressionratio\",4)\nscatter(\"horsepower\",5)\nscatter(\"peakrpm\",6)\nscatter(\"wheelbase\",7)\nscatter(\"citympg\",8)\nscatter(\"highwaympg\",9);","f8adfece":"data[\"fueleconomy\"]= (0.55*data[\"citympg\"]) +(0.45*data[\"highwaympg\"]) ","efd2cc63":"#Binning the companies based of avr price\ndata[\"price\"]=data[\"price\"].astype(\"int\")\ntemp=data.copy()\ntable=temp.groupby([\"Company\"])[\"price\"].mean()\ntemp= temp.merge(table.reset_index(), how=\"left\", on=\"Company\")\nbins= [0,10000,20000,40000]\ncars_bins= [\"Budget\",\"Medium\",\"Highend\"]\ndata[\"Carsrange\"]= pd.cut(temp[\"price_y\"],bins,right=False, labels=cars_bins)\ndata.head()","c739478d":"plt.figure(figsize=(15,10))\nplt.title(\"Fuel economy vs Price\")\nsns.scatterplot(x=data[\"fueleconomy\"],y=data[\"price\"], hue=data[\"drivewheel\"])\nplt.xlabel(\"Fuel economy\")\nplt.ylabel(\"Price\");","5ba8fc45":"plt.figure(figsize=(22,20))\ndf = pd.DataFrame(data.groupby([\"fuelsystem\",\"drivewheel\",\"Carsrange\"])[\"price\"].mean().unstack(fill_value=0))\ndf.plot.bar()\nplt.title(\"Car range vs Avg price\");","62619bb1":"data_sv = data[['price','fueltype', 'aspiration','carbody', 'drivewheel','wheelbase',\n                  'curbweight', 'enginetype', 'cylindernumber', 'enginesize', 'boreratio','horsepower', \n                    'fueleconomy', 'carlength','carwidth', 'Carsrange']]\ndata_sv.head()","a448356d":"sns.pairplot(data_sv);","3ff07874":"#Dummies Variables\ndef dummies (x,df):\n    temp=pd.get_dummies(df[x], drop_first=True)\n    df= pd.concat([df, temp], axis=1)\n    df.drop([x], axis=1, inplace=True)\n    return df\n\ndata_sv = dummies('fueltype',data_sv)\ndata_sv = dummies('aspiration',data_sv)\ndata_sv = dummies('carbody',data_sv)\ndata_sv = dummies('drivewheel',data_sv)\ndata_sv = dummies('enginetype',data_sv)\ndata_sv = dummies('cylindernumber',data_sv)\ndata_sv = dummies('Carsrange',data_sv)","3766b9f6":"data_sv.head()","88164678":"data_sv.shape","f71a7786":"data_sv.info()","5beb187c":"plt.figure(figsize=(25,25))\nsns.heatmap(data_sv.corr(), annot=True);","c259ec82":"from sklearn.preprocessing import MinMaxScaler\nscaler= MinMaxScaler()\nnum_var = ['wheelbase', 'curbweight', 'enginesize', 'boreratio', 'horsepower','fueleconomy','carlength','carwidth']\ndata_sv[num_var]= scaler.fit_transform(data_sv[num_var])\npd.set_option('display.max_columns', None)\ndata_sv.head()","00b0593d":"y= data_sv[\"price\"]","d90754b5":"X= data_sv.drop([\"price\"], axis=1) ","c515b4f0":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, test_size=0.20, random_state=1)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape\n","0eb0b6d4":"models={}","416967bb":"score_fnc= r2_score\nparam_grid= {\"n_estimators\": np.arange(10,200,10), \"max_features\": np.arange(1,29), \"bootstrap\":[True,False]}\nrf = RandomForestRegressor(random_state=24)\nval_cv = KFold(shuffle=True, random_state=24)\nmodel_selection= RandomizedSearchCV(estimator=rf, param_distributions=param_grid, n_iter=200, cv=val_cv,\n                                    scoring=make_scorer(score_fnc), n_jobs=-1, verbose=1)\nmodel_selection.fit(X_train, y_train)\nbest_RF=model_selection.best_estimator_","660855ec":"model_selection.best_params_ , model_selection.best_score_","c011a9a5":"RandomF= best_RF\nRandomF.fit(X_train,y_train)\nprediction=RandomF.predict(X_test)\nresult=r2_score(prediction,y_test)\nprint(result)\nRandom_Forest={'Random_Forest':result}\nmodels.update(Random_Forest)","5c69edcf":"Rid = Ridge(random_state=24)\nparam_grid = {'alpha': (np.logspace(-8, 8, 100)),\"fit_intercept\": [True, False],\n              \"solver\": ['svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga']}\nval_cv = KFold(shuffle=True, random_state=24)\nmodel_selection= RandomizedSearchCV(estimator=Rid, param_distributions=param_grid, n_iter=200, cv=val_cv,\n                                    scoring=make_scorer(score_fnc), n_jobs=-1, verbose=1)\nmodel_selection.fit(X_train, y_train)\nbest_RR=model_selection.best_estimator_","9fcc31e0":"model_selection.best_params_ , model_selection.best_score_","2208349c":"Ridg= best_RR\nRidg.fit(X_train,y_train)\nprediction=Ridg.predict(X_test)\nresult=r2_score(prediction,y_test)\nprint(result)\nRidge_Regressor={'Ridge_Regressor':result}\nmodels.update(Ridge_Regressor)","e223963d":"La = Lasso(random_state=24)\nparam_grid = {'alpha': (np.logspace(-8, 8, 100))}\nval_cv = KFold(shuffle=True, random_state=24)\nmodel_selection= RandomizedSearchCV(estimator=La, param_distributions=param_grid, n_iter=200, cv=val_cv,\n                                    scoring=make_scorer(score_fnc), n_jobs=-1, verbose=1)\nmodel_selection.fit(X_train, y_train)\nbest_LR=model_selection.best_estimator_","5ad6d0e8":"model_selection.best_params_ , model_selection.best_score_","e003960f":"Lasso= best_LR\nLasso.fit(X_train,y_train)\nprediction=Lasso.predict(X_test)\nresult=r2_score(prediction,y_test)\nprint(result)\nLasso_Regressor={'Lasso_Regressor':result}\nmodels.update(Lasso_Regressor)","891bbd59":"Lr= LinearRegression()\nLr.fit(X_train,y_train)\nprediction=Lr.predict(X_test)\nresult=r2_score(prediction,y_test)\nprint(result)\nLinear_Regressor={'Linear_Regressor':result}\nmodels.update(Linear_Regressor)","edcad933":"XGBoost = XGBRegressor(random_state=9)\nparam_grid = {'learning_rate': [.2, .1, .06, .03, .01],\n        'max_depth': [2, 3, 5, 7, 10],\n        'min_child_weight': [1, 3, 5, 7],\n        'subsample': [0.3, 0.5, 0.7],\n        'colsample_bytree': [0.3, 0.5, 0.7],\n        'n_estimators' : np.arange(80,140,20)}\nval_cv = KFold(shuffle=True, random_state=11)\nmodel_selection= RandomizedSearchCV(estimator=XGBoost, param_distributions=param_grid, n_iter=100, cv=val_cv,\n                                    scoring=make_scorer(score_fnc), n_jobs=-1, verbose=1)\nmodel_selection.fit(X_train, y_train)\nbest_XGB=model_selection.best_estimator_","d3488b7f":"model_selection.best_params_ , model_selection.best_score_","372fe59f":"XGBR= best_XGB\nXGBR.fit(X_train,y_train)\nprediction=XGBR.predict(X_test)\nresult=r2_score(prediction,y_test)\nprint(result)\nXGBRegressor={'XGBRegressor':result}\nmodels.update(XGBRegressor)","787878ea":"for key, value in models.items():\n    print(key,' : ', round(value,4))","27f4688b":"## :)","315cad30":"## <font color=red> The purpose of this notebook is to predict car price through different regression algorithms <\/font>","036ff524":"#### XGBRegressor","c972d6da":"#### RandomForestRegressor","f120f90b":"- Symboling with 0 and 1 values are the most numerous\n- The cars with -1 symboling seems to be high priced (insurance risk -1 in quite good)","a3af52d9":"- Fuel economy has a negative significant correlation with price ","0fc5dba0":"- ohc Engine type seems to be the most favored\n- ohcv has the highest price range, ohc and ohcf have the below price range","498f05ab":"### Data cleaning","1f3fc071":"- Very few datapoints for enginelocation to make an inference\n- Most common number of cylinders are four, five, six. Thought eight cylinders are the most expensive\n- mpfi and 2bbl are most common type of fuel system. mpfi and idi having the highest price range\n- Significant difference in driverwheel category. Most hi ranged cars prefer rwd drivewheel","7a69775c":"#### Ridge Regression","db82d9c6":"- enginesize, boreratio, horsepower, wheelbase - seem to have a significant positive correlation with price.\n- citympg, highwaympg - seem to have a significant negative correlation with price.","2dc3b040":"- Jaguar and Buick have the highest avrage price\n- Diesel has higher average price than gas\n- Hardtop and Convertible have higher average price\n","e49ff791":"### Data visualization and Analysis","6bc69c84":"- High ranged cars prefer rwd drivewheel with idi or mpfi fuelsystem","e56c28a1":"### Significant variables after visual analysis\n- Cars Range \n- Engine Type \n- Fuel type \n- Car Body \n- Aspiration \n- Cylinder Number \n- Drivewheel \n- Curbweight \n- Car Length\n- Car width\n- Engine Size \n- Boreratio \n- Horse Power \n- Wheel base \n- Fuel Economy ","45b2cb9c":"- The most prices in dataset are low (below 15000)\n- Significant difference between the mean and the median of price distribtion\n- High variance in the car price (15% of the price are between 18500 and 45400)","43e7eb7b":"### Regression Models","9f3827ff":"#### Linear Regression","e8c3c67e":"#### Lasso Regression","3374cdea":"- Carlength, curbweight, carwidth seems to have a positive correlation with price\n- Carheight doesn't show any type of correlation with price","aef0c855":"- Doornumber does not affect price so much\n- Aspiration with turbo have higher price range than std","2b6081be":"- Toyota is the most frequent company\n- Number of gas fueled cars are more than diesel\n- Sedan is the top car prefered","88ac063d":"### Importing and reading data"}}