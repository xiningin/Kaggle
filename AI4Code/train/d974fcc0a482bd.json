{"cell_type":{"4c2f5e8e":"code","a3825eea":"code","eb904a97":"code","d1a6c00b":"code","78f6890f":"code","ea0d9e2e":"code","83dd1aed":"code","2648e285":"code","e23defb8":"code","c1227a6c":"code","9be8bb99":"code","57cf58f2":"code","da5ba383":"code","c81b1eb3":"code","a1589a63":"code","4c864cba":"code","33f5d5d4":"code","d735e711":"code","3a4ae50e":"code","8cbf0e37":"markdown","3b01663e":"markdown","1694625a":"markdown","5d6da1a8":"markdown","ca39c7e4":"markdown","77d5017c":"markdown","ba6bf74c":"markdown","7715e101":"markdown","098e5f3f":"markdown","b3faff72":"markdown","d18179e3":"markdown"},"source":{"4c2f5e8e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a3825eea":"df=pd.read_csv(\"\/kaggle\/input\/churn-modelling\/Churn_Modelling.csv\")\ndf","eb904a97":"X=df.loc[:,'CreditScore':\"EstimatedSalary\"]\ny=df['Exited']","d1a6c00b":"from sklearn.preprocessing import StandardScaler,LabelEncoder\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score","78f6890f":"X.head()","ea0d9e2e":"encoded=['Geography','Gender']\nfor encode in encoded:\n    label=LabelEncoder()\n    X[encode]=label.fit_transform(X[encode])\nX.head()","83dd1aed":"X[['CreditScore','Balance','EstimatedSalary']]=scaler.fit_transform(X[['CreditScore','Balance','EstimatedSalary']])","2648e285":"X.head()","e23defb8":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)","c1227a6c":"perceptron=Perceptron()","9be8bb99":"perceptron.fit(X_train,y_train)","57cf58f2":"y_pred_train=perceptron.predict(X_train)\ny_pred_test=perceptron.predict(X_test)","da5ba383":"print(\"Training Accuracy: \",accuracy_score(y_pred_train,y_train))\nprint(\"Testing Accuracy: \",accuracy_score(y_pred_test,y_test))","c81b1eb3":"param_grid={'eta0': [1.0,0.5,1e-5], 'max_iter': [50,100]}","a1589a63":"grid=GridSearchCV(perceptron, param_grid, cv=100)","4c864cba":"%time grid.fit(X_train,y_train)","33f5d5d4":"grid.best_score_","d735e711":"grid.best_params_","3a4ae50e":"perceptron=grid.best_estimator_\ny_pred_train=perceptron.predict(X_train)\ny_pred_test=perceptron.predict(X_test)\nprint(\"Training Accuracy: \",accuracy_score(y_pred_train,y_train))\nprint(\"Testing Accuracy: \",accuracy_score(y_pred_test,y_test))","8cbf0e37":"### Best Score","3b01663e":"### Label Encoding the Geography and Gender columns","1694625a":"## Best Accuracies","5d6da1a8":"## Applying GridSearchCV","ca39c7e4":"### Accuracies of Plain Perceptron","77d5017c":"## Applying Plain Perceptron","ba6bf74c":"### Extracting features and labels","7715e101":"### Scaling the CreditScore, Balance and EstimatedSalary columns","098e5f3f":"\n## Let's see how our data looks","b3faff72":"### Applying Train Test Split","d18179e3":"### Best Parameters"}}