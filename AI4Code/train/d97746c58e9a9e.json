{"cell_type":{"e62854e7":"code","9dd6baaf":"code","07075cfc":"code","517c169f":"code","0e2b1db3":"code","a6acd5fc":"code","b2f7273c":"code","ee665ed6":"code","82fbf15f":"code","f298e747":"code","37e3db2b":"code","2f9cedf3":"code","0e8f99f9":"code","8fe101b3":"code","44dda5bb":"code","72d10766":"code","9298aba1":"code","547ff874":"code","a9f227dc":"code","fe5523f8":"code","ce0cb63e":"code","306862f0":"code","e5df24fa":"code","280e2e80":"code","c257d3ba":"code","58b4bfe2":"code","0050df44":"code","c706414a":"code","a4856150":"code","8b4bb821":"code","7b396f57":"code","bcc28cec":"code","bb669d98":"code","44a47b60":"code","9e34aa90":"code","80d1bc4f":"code","e61aea41":"code","69f9bf27":"code","e5d135e7":"code","61743f4a":"code","21c22d0e":"code","31dc3a2b":"code","3358062a":"code","ab58be41":"code","fe58393b":"code","7e5bdf1c":"code","dd4d306d":"code","2fcdae3d":"code","d4474492":"code","8aa7e338":"code","e7509f9d":"code","c5ff64b0":"code","7fe2f5a5":"code","027b2543":"code","aacf706b":"code","fea5ad71":"code","de46db25":"code","c36d9847":"code","bb07e2d3":"code","1d38cbf7":"code","e4ff663c":"code","58335192":"code","b0b5ceb1":"code","35c3d801":"code","f248c392":"markdown","9844320c":"markdown","1c085c3f":"markdown","a8b9511c":"markdown","f0099aa1":"markdown"},"source":{"e62854e7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport plotly.express as px\n#input\ndata = pd.read_csv('..\/input\/apartment-rental-offers-in-germany\/immo_data.csv')","9dd6baaf":"data.head(10)","07075cfc":"data.info()","517c169f":"data.describe()","0e2b1db3":"#Deleting  Outliers\ndata = data[data.baseRent.between(50,10000, inclusive=True)]\ndata = data[data.noRooms.between(0,15, inclusive=True)]\ndata = data[data.livingSpace.between(50,30000, inclusive=True)]\ndata.shape","a6acd5fc":"#plot the data against base_rent(target_variable)\nplt.figure(figsize=(20,10))\n\nsns.barplot(x=data.regio1, y=data.baseRent)\nplt.show()","b2f7273c":"g = sns.FacetGrid(data, col='heatingType', col_wrap=4)\ng = g.map(plt.hist, 'baseRent', bins=20, range=(100,4000))","ee665ed6":"plt.figure(figsize=(10,5))\nplt.scatter(x='yearConstructed', y='baseRent', data=data)\nplt.title('Price by Year of Construction')\nplt.xlabel('Year of Construction')\nplt.ylabel('Price')\nplt.show()","82fbf15f":"sns.histplot(data = data, x=\"baseRent\",bins=30)","f298e747":"sns.set(rc={'figure.figsize':(15,10)})\nsns.displot(np.log(data[\"baseRent\"]),kde_kws={\"label\": 'livingSpace'}, bins=20)","37e3db2b":"sns.set(rc={'figure.figsize':(15,10)})\nsns.displot(np.log(data[\"livingSpace\"]),kde_kws={\"label\": 'livingSpace'}, bins=20)","2f9cedf3":"plt.figure(figsize=(20,10))\n\nsns.barplot(x=data.condition, y=data.baseRent)\nplt.show()","0e8f99f9":"plt.figure(figsize=(5,5))\n\nsns.barplot(x=data.interiorQual, y=data.baseRent)\nplt.show()","8fe101b3":"plt.figure(figsize=(15,5))\n\nsns.barplot(x=data.typeOfFlat, y=data.baseRent)\nplt.show()","44dda5bb":"grdsp = data.groupby([\"typeOfFlat\"])[[\"baseRent\"]].mean().reset_index()\n\nfig = px.pie(grdsp,\n             values=\"baseRent\",\n             names=\"typeOfFlat\",\n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","72d10766":"sns.set(rc={'figure.figsize':(15,10)})\nsns.regplot(x='noRooms', y='baseRent', data=data)\n","9298aba1":"#Checking the percentage of Null values in each column\ndata.isnull().sum()\/218354 * 100","547ff874":"#dropping columns containing more than 60 percent missing values\nfor column in data:\n    if (data[column].isnull().sum()\/218354 * 100) > 60:\n        data.drop(column,axis=1,inplace = True)","a9f227dc":"data.info()","fe5523f8":"#dropping columns that dont contribute to prediction of Price\ndata.drop(['baseRentRange','yearConstructedRange','houseNumber','noRoomsRange','livingSpaceRange','street','streetPlain','firingTypes'\n          ,'thermalChar','geo_krs','geo_bln','regio2','regio3'],axis=1,inplace = True)","ce0cb63e":"data.info()","306862f0":"data.drop(['picturecount','scoutId','pricetrend'],axis=1,inplace = True)","e5df24fa":"data.info()","280e2e80":"data.drop(['serviceCharge','telekomTvOffer','description','facilities','date','totalRent','petsAllowed','numberOfFloors','telekomUploadSpeed'],axis=1,inplace = True)","c257d3ba":"data.info()","58b4bfe2":"#creating a new feature:zip code[which will be 1 for rich cities and 0 for poor cities]\ndata['geo_plz'].value_counts().tail(3002)\nothers = list(data['geo_plz'].value_counts().tail(3002).index)\ndef edit_zip(x):\n    if x in others:\n        return 0\n    else:\n        return x\n\ndata['zipcode'] = data['geo_plz'].apply(edit_zip)","0050df44":"zipcode = data.groupby('geo_plz')['baseRent'].mean()\n\ncities = list(zipcode.sort_values(ascending = False).head(2200).index)\n","c706414a":"def city(x):\n    if x in cities:\n        return 1\n    else:\n        return 0\n\ndata['zipcode'] = data['geo_plz'].apply(city)","a4856150":"data['zipcode'].value_counts()","8b4bb821":"#filling the missing value for 'heatingType'\ndata['heatingType'].value_counts()","7b396f57":"data['heatingType'].fillna(\"central_heating\",inplace=True)","bcc28cec":"data['condition'].value_counts()","bb669d98":"data['condition'].fillna(\"null\",inplace=True)\ndata.groupby('condition')['baseRent'].mean()","44a47b60":"for index, row in data.iterrows():\n    if ((row[\"newlyConst\"] == True) & (row[\"condition\"]==\"null\")):\n        data.loc[index,['condition']] = \"first_time_use\"\n    elif ((row[\"newlyConst\"] == False) & (row[\"condition\"]==\"null\") & (row[\"baseRent\"]>=800)):\n        data.loc[index,['condition']] = \"fully_renovated\"\n    elif ((row[\"zipcode\"] == 1) & (row[\"condition\"]==\"null\") & (row[\"baseRent\"]< 500)):\n        data.loc[index,['condition']] = \"need_of_renovation\"\n    elif (row[\"condition\"]==\"null\"):\n        data.loc[index,['condition']] = \"well_kept\"","9e34aa90":"data['condition'].value_counts()","80d1bc4f":"#filling the missing value for 'floor'\nfloor_mean = data['floor'].mean()\ndata['floor'].fillna(floor_mean,inplace=True)","e61aea41":"data.isnull().sum()","69f9bf27":"#filling the missing value for 'interiorQual'\ndata['interiorQual'].value_counts()","e5d135e7":"data.groupby('interiorQual')['baseRent'].mean()\n","61743f4a":"data['interiorQual'].fillna(\"null\",inplace=True)\ndata['interiorQual'].value_counts()","21c22d0e":"data[(data['interiorQual']==\"luxury\") & (data['zipcode']==0)]['baseRent'].mean()\n","31dc3a2b":"data[(data['interiorQual']==\"sophisticated\") & (data['zipcode']==0)]['baseRent'].mean()\n","3358062a":"data[(data['interiorQual']==\"normal\") & (data['zipcode']==0)]['baseRent'].mean()\n","ab58be41":"data[(data['interiorQual']==\"simple\") & (data['zipcode']==0)]['baseRent'].mean()\n","fe58393b":"data[(data['interiorQual']==\"luxury\") & (data['zipcode']==1)]['baseRent'].mean()\n","7e5bdf1c":"data[(data['interiorQual']==\"sophisticated\") & (data['zipcode']==1)]['baseRent'].mean()","dd4d306d":"data[(data['interiorQual']==\"normal\") & (data['zipcode']==1)]['baseRent'].mean()","2fcdae3d":"data[(data['interiorQual']==\"simple\") & (data['zipcode']==1)]['baseRent'].mean()","d4474492":"for index, row in data.iterrows():\n    if ((row[\"zipcode\"] == 1) & (row[\"interiorQual\"]==\"null\")& (row[\"baseRent\"]>= 1700)):\n        data.loc[index,['interiorQual']] = \"luxury\"\n    elif ((row[\"zipcode\"] == 1) & (row[\"interiorQual\"]==\"null\")& ( 1700 < row[\"baseRent\"] <= 1000)):\n        data.loc[index,['interiorQual']] = \"sophisticated\"\n    elif ((row[\"zipcode\"] == 0) & (row[\"interiorQual\"]==\"null\")& (row[\"baseRent\"]>= 800)):\n        data.loc[index,['interiorQual']] = \"luxury\"\n    elif ((row[\"zipcode\"] == 0) & (row[\"interiorQual\"]==\"null\")& ( 500 < row[\"baseRent\"] <= 800)):\n        data.loc[index,['interiorQual']] = \"sophisticated\"\n    elif (row[\"interiorQual\"]==\"null\"):\n        data.loc[index,['interiorQual']] = \"normal\"","8aa7e338":"data['interiorQual'].value_counts()\n","e7509f9d":"#filling the missing value for 'typeOfFlat'\ndata['typeOfFlat'].value_counts()","c5ff64b0":"data.groupby('typeOfFlat')['baseRent'].mean()\n","7fe2f5a5":"data['typeOfFlat'].fillna(\"apartment\",inplace=True)\n","027b2543":"data.drop(['yearConstructed','geo_plz'],axis=1,inplace = True)\n","aacf706b":"data.head()\n","fea5ad71":"#converting categorical values\ncolumns = []\nfor cols in data.columns:\n    if data[cols].dtype == 'object':\n        columns.append(cols)\n        \ncolumns","de46db25":"dummies_feature = pd.get_dummies(data[columns])\ndummies_feature.head()\n","c36d9847":"data = pd.concat([data, dummies_feature], axis=1)\ndata.head()","bb07e2d3":"data.drop(['regio1','heatingType','condition','interiorQual','typeOfFlat'],axis=1,inplace = True)","1d38cbf7":"y = np.log(data['baseRent'])\nx=data.copy()\nx.drop(['baseRent'],axis=1,inplace = True)","e4ff663c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.30, \n                                                    random_state=1)","58335192":"from sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nimport math\nimport pickle\n\nprediction = []\ndef linearregression(xtrain, ytrain, xtest, ytest):\n    linreg = LinearRegression()\n    linreg.fit(xtrain, ytrain)\n    y_pred = linreg.predict(xtest)\n    \n    #Saving the model\n    Pkl_Filename = \"LR_Model.pkl\"  \n    with open(Pkl_Filename, 'wb') as file:  \n        pickle.dump(linreg, file)\n        \n    print('MAE:', metrics.mean_absolute_error(ytest, y_pred))\n    print('MSE:', metrics.mean_squared_error(ytest, y_pred))\n    print('R2_score:', metrics.r2_score(ytest, y_pred))\n    plt.scatter(y_pred,ytest)\n    plt.xlabel('predicted value of y')\n    plt.ylabel('y')\n    plt.figure()\nlinearregression(X_train, y_train, X_test, y_test)","b0b5ceb1":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics\ndef RandomForest(xtrain, ytrain, xtest, ytest):\n    randomForest = RandomForestRegressor()\n    randomForest.fit(xtrain, ytrain)\n    y_pred = randomForest.predict(xtest)\n    \n     #Saving the model\n    Pkl_Filename = \"RF_Model.pkl\"  \n    with open(Pkl_Filename, 'wb') as file:  \n        pickle.dump(randomForest, file)\n        \n    print('MAE:', metrics.mean_absolute_error(ytest, y_pred))\n    print('MSE:', metrics.mean_squared_error(ytest, y_pred))\n    print('R2_score:', metrics.r2_score(ytest, y_pred))\n\n    plt.scatter(y_pred,ytest)\n    plt.xlabel('predicted value of y')\n    plt.ylabel('y')\n    plt.figure()\n\nRandomForest(X_train, y_train, X_test, y_test)","35c3d801":"from sklearn.ensemble import GradientBoostingRegressor\n\n#Best hyperparameters from Random Search:\n#maxdepth: 16, minsamleaf: 117, n: 73, maxfeat: 10, lr: 0.07\ndef gradientboostingmachine(md, msl, n, mf, lr, xtrain, ytrain, xtest, ytest):\n    gbm_best = GradientBoostingRegressor(n_estimators=n, random_state=1111,\n                                         max_depth=md, max_features=mf, \n                                         min_samples_leaf=msl, learning_rate=lr\n                                         )\n    gbm_best.fit(xtrain, ytrain)\n    y_pred_gbm = gbm_best.predict(xtest)\n    \n        \n    #Saving the model\n    Pkl_Filename = \"GB_Model.pkl\"  \n    with open(Pkl_Filename, 'wb') as file:  \n        pickle.dump(gbm_best, file)\n        \n    print('MAE:', metrics.mean_absolute_error(ytest, y_pred_gbm))\n    print('MSE:', metrics.mean_squared_error(ytest, y_pred_gbm))\n    print('R2_score:', metrics.r2_score(ytest, y_pred_gbm))\n\n    plt.scatter(y_pred_gbm,ytest)\n    plt.xlabel('predicted value of y')\n    plt.ylabel('y')\n    plt.figure()\ngradientboostingmachine(16, 117, 73, 10, 0.07, X_train, y_train, X_test, y_test) ","f248c392":"Among the three models, R2_score is the highest for GradientBoosting.","9844320c":"Training three models: Linear Regression, RandomForestRegressor, GradientBoostingRegressor\n\n","1c085c3f":"**In order to build the model and to find appropriate hyperparameters for GBM, we conducted Random Search on an IDE.**","a8b9511c":"**Data PreProcessing**","f0099aa1":"Viewing the data in the data frame"}}