{"cell_type":{"e266c87f":"code","b8a0444b":"code","33303eaf":"code","758e2d60":"code","4d634ce3":"code","d7a1742c":"code","1a8ab39d":"code","a1e52595":"markdown"},"source":{"e266c87f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b8a0444b":"cryptoData=pd.read_csv(\"..\/input\/crypto-markets.csv\")\ncryptoData.info()\ncryptoData.describe()","33303eaf":"cryptoData.head(10)","758e2d60":"# Function with *args\n# Symbol: the crypto currency symbol, Args: columns \n# Filter data according to the symbol and select columns\ndef GetCryptoCurrencyData(symbol,*args):\n    filteredData=cryptoData[cryptoData.symbol==symbol]\n    colList=[]\n    if len(args)>0:\n        for i in args:\n            colList.append(i)\n        filteredData=filteredData[colList]\n    return filteredData\n\nsimpleData=GetCryptoCurrencyData('BTC','name','symbol','open','close','date','spread')\nsimpleData.head(10)","4d634ce3":"# Nested function\n# Calculate daily change rate within a nested function\n\ndef CalculateExchangeRate(row):\n    def Calculate(opn,close):\n        return (close-opn)\/opn*100\n    return Calculate(row[\"open\"],row[\"close\"])\n\nsimpleData[\"changerate\"]=simpleData.apply(CalculateExchangeRate, axis=1)\nsimpleData.head(10)","d7a1742c":"#  List Comprehension\n#Spread is the $USD difference between the high and low values for the day.\navgSpread=sum(simpleData.spread)\/len(simpleData.spread)\nprint(\"Average Spread: {0}\".format(avgSpread))\nsimpleData[\"spreadstatus\"]=[\"above\" if sp>avgSpread else \"below\" if sp<avgSpread else \"equal\"for sp in simpleData.spread]\nsimpleData.head(10)","1a8ab39d":"# Function with **kwargs\n# Kwargs contains filter conditions\ndef GetCryptoCurrencyData(**kwargs):\n    filteredData=cryptoData\n    for key,value in kwargs.items():\n        filteredData=filteredData[filteredData[key]==value]\n    return filteredData\n\nsimpleData=GetCryptoCurrencyData(symbol='BTC',date='2018-05-30')\nsimpleData.head(5)","a1e52595":"**Homework 2** : **Python Data Science Tool Box**\n\nSubject:  Analyse of Crypto Currency Dataset"}}