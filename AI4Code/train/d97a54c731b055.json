{"cell_type":{"77d5dff1":"code","e2e24a9a":"code","c22859f6":"code","106dc60d":"code","ca2714cc":"code","43813cf0":"code","ee9bb1d1":"code","333826a1":"code","3ae96b4d":"code","89d04855":"code","7d5be282":"code","57c1e9ac":"code","eaf35246":"code","104178e7":"code","da5889d9":"code","c557c8be":"code","9163b19d":"code","b9137af6":"code","2dcfffed":"code","397fc85c":"code","9c657caf":"code","427e3107":"code","fe3c4b3d":"code","36612fc1":"markdown","b316c385":"markdown","0ca67f1c":"markdown","71faf563":"markdown","ce1d137e":"markdown","e6e67e67":"markdown","221ceb7b":"markdown","7ce457ba":"markdown","d98f7387":"markdown","975b7f6e":"markdown","4bb6ed31":"markdown","f5d333f3":"markdown","16b212f8":"markdown"},"source":{"77d5dff1":"import json\nimport math\nimport os\nimport numpy\nimport cv2\nfrom PIL import Image\nimport numpy as np\nfrom keras import layers\nfrom keras.applications import DenseNet121\nfrom keras.callbacks import Callback, ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import cohen_kappa_score, accuracy_score\nimport scipy\nimport tensorflow as tf\nfrom tqdm import tqdm\n\n%matplotlib inline","e2e24a9a":"np.random.seed(420)\ntf.set_random_seed(420)","c22859f6":"train_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/train.csv')\nprint(train_df.shape)\ntrain_df.head()","106dc60d":"train_df['diagnosis'].hist()","ca2714cc":"new_train_df = train_df[train_df['diagnosis'] == 3]\ncat_size = len(new_train_df)\nnew_train_df = new_train_df.append(train_df[train_df['diagnosis'] == 0].sample(n = cat_size), ignore_index=True)\nnew_train_df = new_train_df.append(train_df[train_df['diagnosis'] == 1].sample(n = cat_size), ignore_index=True)\nnew_train_df = new_train_df.append(train_df[train_df['diagnosis'] == 2].sample(n = cat_size), ignore_index=True)\nnew_train_df = new_train_df.append(train_df[train_df['diagnosis'] == 4].sample(n = cat_size), ignore_index=True)\n\n#construct a dataframe containing all the rows NOT included in the train_df...\ntest_df = train_df.copy()\ntest_df = test_df.loc[~test_df['id_code'].isin(new_train_df['id_code'])].reset_index(drop=True)\n\ntrain_df = new_train_df\n\ntrain_df['diagnosis'].hist()\n\ntrain_df = train_df.sample(frac = 1).reset_index(drop=True)","43813cf0":"def display_samples(df, columns=4, rows=3):\n    fig=plt.figure(figsize=(5*columns, 4*rows))\n\n    for i in range(columns*rows):\n        image_path = df.loc[i,'id_code']\n        image_id = df.loc[i,'diagnosis']\n        img = cv2.imread(f'..\/input\/aptos2019-blindness-detection\/train_images\/{image_path}.png')\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        \n        fig.add_subplot(rows, columns, i+1)\n        plt.title(image_id)\n        plt.imshow(img)\n        plt.axis('off')\n    \n    plt.tight_layout()\n\ndisplay_samples(train_df)","ee9bb1d1":"def preprocess_image(image_path, desired_size=224):\n    sigmaX = 10\n    im = Image.open(image_path)\n    im = im.resize((desired_size, )*2, resample=Image.LANCZOS)\n    opencv_image = numpy.array(im) \n    opencv_image = cv2.addWeighted(opencv_image, 4, cv2.GaussianBlur(opencv_image, (0, 0), sigmaX), -4, 128)\n    \n    return opencv_image[:, :, ::-1].copy() ","333826a1":"def display_samples(df, columns=4, rows=3):\n    fig=plt.figure(figsize=(5*columns, 4*rows))\n\n    for i in range(columns*rows):\n        image_path = df.loc[i,'id_code']\n        image_id = df.loc[i,'diagnosis']\n        fig.add_subplot(rows, columns, i+1)\n        plt.title(image_id)\n        plt.imshow(preprocess_image(f'..\/input\/aptos2019-blindness-detection\/train_images\/{image_path}.png'))\n        plt.axis('off')\n    \n    plt.tight_layout()\n\ndisplay_samples(train_df)","3ae96b4d":"N = train_df.shape[0]\nx_train = np.empty((N, 224, 224, 3), dtype=np.uint8)\n\nfor i, image_id in enumerate(tqdm(train_df['id_code'])):\n    x_train[i, :, :, :] = preprocess_image(\n        f'..\/input\/aptos2019-blindness-detection\/train_images\/{image_id}.png'\n    )","89d04855":"N = test_df.shape[0]\nx_test = np.empty((N, 224, 224, 3), dtype=np.uint8)\n\nfor i, image_id in enumerate(tqdm(test_df['id_code'])):\n    x_test[i, :, :, :] = preprocess_image(\n        f'..\/input\/aptos2019-blindness-detection\/train_images\/{image_id}.png'\n    )","7d5be282":"y_train = pd.get_dummies(train_df['diagnosis']).values\n\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)","57c1e9ac":"y_train_multi = np.empty(y_train.shape, dtype=y_train.dtype)\ny_train_multi[:, 4] = y_train[:, 4]\nfor i in range(3, -1, -1):\n    y_train_multi[:, i] = np.logical_or(y_train[:, i], y_train_multi[:, i+1])\n\nprint(\"Original y_train:\", y_train.sum(axis=0))\nprint(\"Multilabel version:\", y_train_multi.sum(axis=0))","eaf35246":"x_train, x_val, y_train, y_val = train_test_split(\n    x_train, y_train_multi, \n    test_size=0.15, \n    random_state=420\n)","104178e7":"BATCH_SIZE = 32\n\ndef create_datagen():\n    return ImageDataGenerator(\n        zoom_range=0.15,  # set range for random zoom\n        # set mode for filling points outside the input boundaries\n        fill_mode='constant',\n        cval=0.,  # value used for fill_mode = \"constant\"\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=True,  # randomly flip images\n    )\n\ndata_generator = create_datagen().flow(x_train, y_train, batch_size=BATCH_SIZE, seed=420)","da5889d9":"class Metrics(Callback):\n    def on_train_begin(self, logs={}):\n        self.val_kappas = []\n\n    def on_epoch_end(self, epoch, logs={}):\n        X_val, y_val = self.validation_data[:2]\n        y_val = y_val.sum(axis=1) - 1\n        \n        y_pred = self.model.predict(X_val) > 0.5\n        y_pred = y_pred.astype(int).sum(axis=1) - 1\n\n        _val_kappa = cohen_kappa_score(\n            y_val,\n            y_pred, \n            weights='quadratic'\n        )\n\n        self.val_kappas.append(_val_kappa)\n\n        print(f\"val_kappa: {_val_kappa:.4f}\")\n        \n        if _val_kappa == max(self.val_kappas):\n            print(\"Validation Kappa has improved. Saving model.\")\n            self.model.save('model.h5')\n\n        return","c557c8be":"densenet = DenseNet121(\n    weights='..\/input\/densenet-keras\/DenseNet-BC-121-32-no-top.h5',\n    include_top=False,\n    input_shape=(224,224,3)\n)","9163b19d":"def build_model():\n    model = Sequential()\n    model.add(densenet)\n    model.add(layers.GlobalAveragePooling2D())\n    model.add(layers.Dropout(0.5))\n    model.add(layers.Dense(5, activation='sigmoid'))\n    \n    model.compile(\n        loss='binary_crossentropy',\n        optimizer=Adam(lr=0.00005),\n        metrics=['accuracy']\n    )\n    \n    return model","b9137af6":"model = build_model()\nmodel.summary()","2dcfffed":"kappa_metrics = Metrics()\n\nhistory = model.fit_generator(\n    data_generator,\n    steps_per_epoch=x_train.shape[0] \/ BATCH_SIZE,\n    epochs=15,\n    validation_data=(x_val, y_val),\n    callbacks=[kappa_metrics]\n)","397fc85c":"with open('history.json', 'w') as f:\n    json.dump(history.history, f)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['acc', 'val_acc']].plot()","9c657caf":"plt.plot(kappa_metrics.val_kappas)","427e3107":"model.load_weights('model.h5')\ny_val_pred = model.predict(x_val)\n\ndef compute_score_inv(threshold):\n    y1 = y_val_pred > threshold\n    y1 = y1.astype(int).sum(axis=1) - 1\n    y2 = y_val.sum(axis=1) - 1\n    score = cohen_kappa_score(y1, y2, weights='quadratic')\n    \n    return 1 - score\n\nsimplex = scipy.optimize.minimize(\n    compute_score_inv, 0.5, method='nelder-mead'\n)\n\nbest_threshold = simplex['x'][0]","fe3c4b3d":"y_test = model.predict(x_test) > 0.5\ny_test = y_test.astype(int).sum(axis=1) - 1\noutput_df = test_df.copy()\noutput_df['prediction'] = y_test\nprint(accuracy_score(output_df['diagnosis'].tolist(), output_df['prediction'].tolist()))\noutput_df.to_csv('output.csv',index=False)","36612fc1":"# Resize Images\n\nWe will resize the images to 224x224, then create a single numpy array to hold the data.","b316c385":"Now we can split it into a training and validation set.","0ca67f1c":"# Training & Evaluation","71faf563":"Set random seed for reproducibility.","ce1d137e":"## Creating multilabels\n\nInstead of predicting a single label, we will change our target to be a multilabel problem; i.e., if the target is a certain class, then it encompasses all the classes before it. E.g. encoding a class 4 retinopathy would usually be `[0, 0, 0, 1]`, but in our case we will predict `[1, 1, 1, 1]`. For more details, please check out [Lex's kernel](https:\/\/www.kaggle.com\/lextoumbourou\/blindness-detection-resnet34-ordinal-targets).","e6e67e67":"### Displaying some Sample Images","221ceb7b":"## Find best threshold\n\nPlease Note: Although I show how to construct a threshold optimizer, **it is currently unused**. Please see notice at the top of the kernel.","7ce457ba":"Let's balance the samples to remove any bias in the end result.\n\nBecause diagnosis: 3 has the least samples, we'll create a new dataframe with a random sampling for each diagnosis category with the same number of samples in category 3.","d98f7387":"### Creating keras callback for QWK","975b7f6e":"# Model: DenseNet-121","4bb6ed31":"Load the data and take a look at the format","f5d333f3":"## Submit","16b212f8":"> # **Great**"}}