{"cell_type":{"c9ef723e":"code","9f502a33":"code","5118bb33":"code","aba94a2a":"code","31abc624":"code","2ed392a6":"code","c34cfb11":"code","6dd7c62a":"code","0b814302":"code","d49ce1d3":"code","1df8f4e2":"code","3c2ce6ce":"code","0e00e30d":"code","0dad679f":"code","908c45c6":"code","c07f9609":"code","b3cd897d":"code","81fd55bb":"code","136df1d8":"code","cfd36461":"code","44d16733":"code","7517a774":"code","c6513671":"code","dc87e90f":"code","fdca9ff2":"code","13db2ab0":"code","d9471824":"code","7a559e1a":"code","26566121":"code","22303dfd":"code","168d80c8":"code","2d030077":"code","6393e6d1":"code","a3006336":"code","db159278":"markdown","ddf3b4cd":"markdown","fd134f1b":"markdown","b0d15cf3":"markdown","d7ab93e8":"markdown","ef402399":"markdown","a436a6f5":"markdown","bccec4ee":"markdown","84376a84":"markdown","21a0f013":"markdown","44170560":"markdown","bca2f70f":"markdown","7eae3701":"markdown","b8879ad0":"markdown","175a9652":"markdown","fbbca360":"markdown"},"source":{"c9ef723e":"#Gerekli K\u00fct\u00fcphaneler Y\u00fckleniyor\n\nimport numpy as np # linear algebra\nimport pandas as pd # Veri i\u015fleme\n\nimport matplotlib.pyplot as plt\n\n#G\u00f6r\u00fcnt\u00fc i\u015fleme\nimport cv2\n\n#Makine \u00d6\u011frenmesi\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.metrics import accuracy_score, confusion_matrix,classification_report\nfrom sklearn.feature_selection import SelectKBest\n\nfrom sklearn.pipeline import FeatureUnion\nfrom sklearn.pipeline import Pipeline\n\n#Sistem K\u00fct\u00fcphaneleri\nimport os\nimport warnings\nprint(os.listdir(\"..\/input\"))\n#Uyar\u0131lar\u0131 kapat\u0131l\u0131yor\nwarnings.filterwarnings('ignore')\n","9f502a33":"#E\u011fitim veri seti y\u00fckleniyor\ntrain=pd.read_csv(\"..\/input\/train.csv\",dtype=\"uint8\")\ntrain.head()","5118bb33":"#\u00c7\u0131kt\u0131 s\u00fct\u00fcn vekt\u00f6r\u00fc elde ediliyor\ny=train['label']\n\n#Veri matrisi elde ediliyor\ndata=train.drop('label',axis=1).values\n\n#Veri matrisinden sadece de\u011ferler al\u0131n\u0131yor\nX=data[:,0:]","aba94a2a":"print(\"\u00e7\u0131kt\u0131 y.shape:\",y.shape)\nprint(\"veri X.shape :\",X.shape)","31abc624":"#E\u011fitim i\u00e7in veri setinin hepsini almak yerine istedi\u011fimiz k\u0131sm\u0131n\u0131 al\u0131yoruz\n#Son olarak veri setinin hepsini al\u0131yoruz.\n#Son durum itibariyle veri setinin hepsi al\u0131nm\u0131\u015ft\u0131r.\n#Kendiniz \u00e7al\u0131\u015f\u0131rken n_samples de\u011ferini de\u011fitirip sonu\u00e7lar\u0131 g\u00f6zlemleyebilirsiniz.\n\nn_samples=y.shape[0]#Veri setinin hepsi al\u0131n\u0131yor\ny=y[:n_samples]\nX=X[:n_samples]\nprint(\"\u00e7\u0131kt\u0131 y.shape:{}\".format(y.shape))\nprint(\"veri X.shape:{}\".format(X.shape))","2ed392a6":"def show_digit_matrix(digit, n=10):\n    v_images=[]\n    n=n\n    count=0\n    for i in range(0,n):\n        h_images=list()\n        for j in range(0,n):\n            h_images.append(digit[count].reshape(28,28))\n            count+=1\n        h=np.hstack((h_images))\n        v_images.append(h)\n    image_matrix=np.vstack((v_images))\n    \n    fig, axarr = plt.subplots(1, 1, figsize=(12, 12))\n    plt.imshow(image_matrix,cmap='gray')\n","c34cfb11":"show_digit_matrix(digit=X, n=20)","6dd7c62a":"pca=PCA(n_components=2, whiten=True)\npca.fit(X)\nX_pca=pca.transform(X)","0b814302":"\nplt.figure(1, figsize=(12,8))\nplt.scatter(X_pca[:,0], X_pca[:,1], c=y, s=10,cmap=plt.get_cmap('jet',10))\nplt.colorbar()","d49ce1d3":"pca=PCA()\npca.fit(X)","1df8f4e2":"plt.figure(1,figsize=(12,8))\nplt.xticks(np.arange(0, 800, 30.0))\nplt.plot(pca.explained_variance_,linewidth=2)\n","3c2ce6ce":"X_train, X_test, y_train, y_test=train_test_split(X, #Veri matrisi\n                                                  y, #\u00c7\u0131kt\u0131 vekt\u00f6r\u00fc\n                                                  stratify=y, #Her s\u0131n\u0131ftan e\u015fit oranda ayr\u0131\u015ft\u0131rma i\u00e7in\n                                                  test_size=0.3, #%30 test ve %70 e\u011fitim i\u00e7in ayr\u0131\u015ft\u0131r\n                                                  random_state=42 #rasgele say\u0131 \u00e7ekirde\u011fi\n                                                 )\nprint(\"Veri seti e\u011fitim ve test olarak ayr\u0131\u015ft\u0131r\u0131ld\u0131\")","0e00e30d":"#Kullan\u0131lacak temel bile\u015fen say\u0131s\u0131\nn_components=35","0dad679f":"pca=PCA(n_components=n_components, whiten=True)\npca.fit(X_train)\nX_train_pca=pd.DataFrame(pca.transform(X_train))\nX_test_pca=pd.DataFrame(pca.transform(X_test))\nprint(\"E\u011fitim veri seti i\u00e7in PCA d\u00f6n\u00fc\u015f\u00fcm\u00fc ger\u00e7ekle\u015ftirildi\")","908c45c6":"params=[{'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.01, 0.1, 1.0, 10.0], 'kernel': ['rbf']}\n       ]\n#\u00c7ok uzun s\u00fcrd\u00fc\u011f\u00fc i\u00e7in GridSearchCV k\u0131sm\u0131n\u0131 pasif hale getirdim.\n#Siz isterseniz \u00e7al\u0131\u015fmay\u0131 \u00e7atallay\u0131p(Fork) deneyebilirsiniz. \n#En iyi sonu\u00e7 veren parametreler: {'C': 10, 'gamma': 0.01, 'kernel': 'rbf'}\n#clf=GridSearchCV(SVC(), params, cv=5)\n\nclf=SVC(C=10, gamma=0.01, kernel=\"rbf\")\nclf.fit(X_train_pca, y_train)\ny_pred1=clf.predict(X_test_pca)\nprint(\"S\u0131n\u0131fland\u0131r\u0131c\u0131:{}\".format(clf.__class__.__name__))\n\nprint(\"Ba\u015far\u0131 oran\u0131:{}\".format(accuracy_score(y_pred1, y_test)))\nprint(\"Kar\u0131\u015f\u0131kl\u0131k Matrisi:\\n{}\".format(confusion_matrix(y_pred1, y_test)))\nprint(\"S\u0131n\u0131fland\u0131rma Raporu:\\n{}\".format(classification_report(y_pred1, y_test)))","c07f9609":"competion_dataset=pd.read_csv(\"..\/input\/test.csv\",dtype=\"uint8\")\ncompetion_dataset=competion_dataset.values\ncompetion_dataset=competion_dataset[:,0:]\nprint(\"Yar\u0131\u015fma competion_dataset.shape :\",competion_dataset.shape)","b3cd897d":"pca=PCA(n_components=n_components, whiten=True)\npca.fit(X)\nprint(\"PCA e\u011fitimi i\u00e7in 'e\u011fitim'  veri setinin hepsi kullan\u0131ld\u0131\")","81fd55bb":"X_pca=pca.transform(X)\nprint(\"E\u011fitim veri setinin t\u00fcm\u00fcn\u00fcn PCA d\u00f6n\u00fc\u015f\u00fcm\u00fc ger\u00e7ekle\u015ftirildi\")","136df1d8":"competion_dataset_pca=pca.transform(competion_dataset)\nprint(\"Yar\u0131\u015fma veri seti i\u00e7in PCA d\u00f6n\u00fc\u015f\u00fcm\u00fc ger\u00e7ekle\u015ftirildi\")","cfd36461":"clf.fit(X_pca,y)\nprint(\"T\u00fcm e\u011fitim veri seti kullan\u0131larak s\u0131n\u0131fland\u0131r\u0131c\u0131 e\u011fitildi\")","44d16733":"print(\"Yar\u0131\u015fma g\u00f6nderisi haz\u0131rlan\u0131yor...\")\ny_pred2=clf.predict(competion_dataset_pca)\nprint(\"Yar\u0131\u015fma g\u00f6nderisi haz\u0131r.\")","7517a774":"file_name=\"x_pca_{}_svc_mnist.csv\".format(n_components)\nprint(file_name)","c6513671":"results = pd.Series(y_pred2,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(file_name,index=False)\nprint(\"Yar\u0131\u015fma g\u00f6nderisi kaydedildi.\")","dc87e90f":"work_flows=list()\nwork_flows.append(('pca', PCA(n_components=n_components, whiten=True)))\nwork_flows.append(('svm',SVC(C=10, gamma=0.01, kernel=\"rbf\")))\nclf=Pipeline(work_flows)\nprint(\"\u0130\u015f ak\u0131\u015f\u0131 olu\u015fturuldu\")","fdca9ff2":"clf.fit(X_train,y_train)\ny_pred=clf.predict(X_test)\nprint(\"\u0130\u015f ak\u0131\u015f\u0131 e\u011fitildi\")","13db2ab0":"print(\"S\u0131n\u0131fland\u0131r\u0131c\u0131:{}\".format(clf.__class__.__name__))\n\nprint(\"Ba\u015far\u0131 oran\u0131:{}\".format(accuracy_score(y_test, y_pred)))\nprint(\"Kar\u0131\u015f\u0131kl\u0131k Matrisi:\\n{}\".format(confusion_matrix(y_test, y_pred)))\nprint(\"S\u0131n\u0131fland\u0131rma Raporu:\\n{}\".format(classification_report(y_test, y_pred)))","d9471824":"from sklearn.linear_model import LogisticRegression","7a559e1a":"features = []\nfeatures.append(('pca', PCA(n_components=n_components)))\nfeatures.append(('select_best', SelectKBest(k=300)))\nfeature_union = FeatureUnion(features)\n#FeatureUnion iyi sonu\u00e7 vermedi; daha sonra tekrar denenecek \n# create pipeline\nwork_flows = []\nwork_flows.append(('pca', PCA(n_components=n_components, whiten=True)))\nwork_flows.append(('LogReg', LogisticRegression()))\nclf = Pipeline(work_flows)\nprint(\"\u0130\u015f ak\u0131\u015f\u0131 olu\u015fturuldu\")","26566121":"clf.fit(X_train, y_train)\ny_pred=clf.predict(X_test)\nprint(\"\u0130\u015f ak\u0131\u015f\u0131 e\u011fitildi\")","22303dfd":"print(\"S\u0131n\u0131fland\u0131r\u0131c\u0131:{}\".format(clf.__class__.__name__))\n\nprint(\"Ba\u015far\u0131 oran\u0131:{}\".format(accuracy_score(y_test, y_pred)))\nprint(\"Kar\u0131\u015f\u0131kl\u0131k Matrisi:\\n{}\".format(confusion_matrix(y_test, y_pred)))\nprint(\"S\u0131n\u0131fland\u0131rma Raporu:\\n{}\".format(classification_report(y_test, y_pred)))","168d80c8":"clf.fit(X, y)\nprint(\"model e\u011fitildi\")","2d030077":"y_pred2=clf.predict(competion_dataset)\nprint(\"Yar\u0131\u015fma veri setinde tahmin ger\u00e7ekle\u015ftirildi.\")","6393e6d1":"file_name=\"pipeline_pca_{}_lr_mnist.csv\".format(n_components)\nprint(file_name)","a3006336":"results = pd.Series(y_pred2,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(file_name,index=False)\nprint(\"\u0130kinci yar\u0131\u015fma g\u00f6nderisi kaydedildi.\")","db159278":"[\u0130\u00e7indekiler Men\u00fcs\u00fcne Git](#0.)\n \n# <a class=\"anchor\" id=\"1.\"><\/a> **1.\u00c7al\u0131\u015fman\u0131n \u00d6zeti**\n\nBu \u00e7al\u0131\u015fmada bilgisayarl\u0131 g\u00f6rme problemleri i\u00e7in giri\u015f seviyesinde bir veri seti olan MNIST el yazmas\u0131 veri seti \u00fczerinde PCA ve SVC ile s\u0131n\u0131fland\u0131rma i\u015flemi yap\u0131lm\u0131\u015ft\u0131r. Ayr\u0131c\u0131, Kaggle yar\u0131\u015fmas\u0131 i\u00e7in ayr\u0131lan veri seti \u00fczerinde yap\u0131lan s\u0131n\u0131fland\u0131rma sonu\u00e7lar\u0131 yar\u0131\u015fma g\u00f6nderisi olarak kaydedilmi\u015ftir.. ","ddf3b4cd":"**\u00c7al\u0131\u015fmay\u0131 be\u011fenirseniz oylamay\u0131 unutmay\u0131n^_____^!**\n\n\n\n**\u00d6nemli Not:** Farkl\u0131 Temel Bile\u015fen say\u0131lar\u0131na g\u00f6re elde etti\u011fim ba\u015far\u0131 oranlar\u0131n\u0131 buraya not etmek istiyorum. Temel Bile\u015fen say\u0131lar\u0131na nas\u0131l karar derdi\u011fimi [Uygun Say\u0131da Temel Bile\u015fenin Bulunmas\u0131](#4e2.) b\u00f6l\u00fcm\u00fcnde anlatm\u0131\u015ft\u0131m. Bile\u015fen say\u0131s\u0131 art\u0131rmak ba\u015far\u0131 oran\u0131na katk\u0131da bulunmuyor; aksine g\u00fcr\u00fclt\u00fcye sebep oldu\u011fu i\u00e7in ba\u015far\u0131 oran\u0131n\u0131 d\u00fc\u015f\u00fcr\u00fcyor olabilir. Yar\u0131\u015fma veri setinde, farkl\u0131 Temel Bile\u015fen say\u0131s\u0131na g\u00f6re elde etti\u011fim sonu\u00e7lar \u015f\u00f6yledir:\n\n* Temel Bile\u015fen say\u0131s\u0131: 150, yar\u0131\u015fma veri seti \u00fczerinde ba\u015far\u0131 oran\u0131:0.96714\n* Temel Bile\u015fen say\u0131s\u0131: yine 150, yar\u0131\u015fma veri seti \u00fczerinde ba\u015far\u0131 oran\u0131:0.96928\n* Temel Bile\u015fen say\u0131s\u0131: 200, yar\u0131\u015fma veri seti \u00fczerinde ba\u015far\u0131 oran\u0131:0.95157\n* Temel Bile\u015fen say\u0131s\u0131: 40, yar\u0131\u015fma veri seti \u00fczerinde ba\u015far\u0131 oran\u0131:0.97700\n* Temel Bile\u015fen say\u0131s\u0131: 35, yar\u0131\u015fma veri seti \u00fczerinde ba\u015far\u0131 oran\u0131: 0.97471\n* PCA projeksiyonunu b\u00fct\u00fcn veri setinde e\u011fitip 35 Temel Bile\u015fen kullan\u0131nca ba\u015far\u0131 oran\u0131:0.98014","fd134f1b":"Yukar\u0131daki grafikte 30 Temel Bile\u015fen kadar, veriyi \u00e7ok y\u00fcksek d\u00fczeyde temelsil etme yetene\u011fine sahip oldu\u011fu g\u00f6r\u00fcl\u00fcyor. 150 ve daha fazla bile\u015fenin, veriyi temsil etme yeteneklerinin ayn\u0131 oldu\u011fu g\u00f6r\u00fcl\u00fcyor. ","b0d15cf3":"# <a class=\"anchor\" id=\"0.\"><\/a>**\u0130\u00e7indekiler**\n\n1. [\u00c7al\u0131\u015fman\u0131n \u00d6zeti](#1.)\n1. [Veri Setinin Y\u00fcklenmesi](#2.)\n1. [Yard\u0131mc\u0131 Fonksiyon: show_digit_matrix()](#3.)\n1. [Veri Setinde Yer Alan El Yaz\u0131s\u0131 Rakamlar\u0131ndan Baz\u0131lar\u0131n\u0131n G\u00f6sterimi](#4.)\n1. [Temel Bile\u015fen Analizi-Principle Component Analiysis(PCA)](#4e1.)\n1. * [Uygun Say\u0131da Temel Bile\u015fenin Bulunmas\u0131](#4e2.)\n1. [E\u011fitim Veri Setinde PCA+SVC Kullan\u0131lmas\u0131](#5.)\n1. [Yar\u0131\u015fma Veri Setinde PCA+SVC Kullan\u0131lmas\u0131](#6.)\n1. [Yar\u0131\u015fma G\u00f6nderisinin Kaydedilmesi](#7.)\n1. [Pipelines \u0130le \u0130\u015f Ak\u0131\u015f\u0131n\u0131n Otomatikle\u015ftirilmesi](#8.)\n1. [Pipeline \u0130le PCA ve LogisticRegression](#9.)\n* * [Pipeline \u0130le Yar\u0131\u015fma Verisi Kaydediliyor](#10.)\n","d7ab93e8":"\u00c7al\u0131\u015fma hakk\u0131ndaki yorumlar\u0131n\u0131z\u0131 bekliyorum.  Be\u011fendiyseniz oy vermeyi unutmay\u0131n ::))","ef402399":"[\u0130\u00e7indekiler Men\u00fcs\u00fcne Git](#0.)\n\n# <a class=\"anchor\" id=\"10.\"><\/a>**11. Pipeline \u0130le Yar\u0131\u015fma Verisi Kaydediliyor**  ","a436a6f5":"[\u0130\u00e7indekiler Men\u00fcs\u00fcne Git](#0.)\n\n# <a class=\"anchor\" id=\"4e2.\"><\/a>**5.1. Uygun Say\u0131da Temel Bile\u015fenin Bulunmas\u0131** ","bccec4ee":"[\u0130\u00e7indekiler Men\u00fcs\u00fcne Git](#0.)\n\n# <a class=\"anchor\" id=\"3.\"><\/a>**3. Yard\u0131mc\u0131 Fonksiyon: show_digit_matrix()** ","84376a84":"[\u0130\u00e7indekiler Men\u00fcs\u00fcne Git](#0.)\n\n# <a class=\"anchor\" id=\"2.\"><\/a> **2. Veri Setinin Y\u00fcklenmesi** ","21a0f013":"[\u0130\u00e7indekiler Men\u00fcs\u00fcne Git](#0.)\n \n<a class=\"anchor\" id=\"5.\"><\/a>**6. E\u011fitim Veri Setinde PCA+SVC Kullan\u0131lmas\u0131**","44170560":"[\u0130\u00e7indekiler Men\u00fcs\u00fcne Git](#0.)\n\n# <a class=\"anchor\" id=\"7.\"><\/a>**8. Yar\u0131\u015fma G\u00f6nderisinin Kaydedilmesi**  ","bca2f70f":"<[\u00d6nceki](#3.) | [\u0130\u00e7indekiler Men\u00fcs\u00fcne Git](#0.) | [Sonraki](#4e1.)>\n\n# <a class=\"anchor\" id=\"4.\"><\/a>**4. Veri Setinde Yer Alan El Yaz\u0131s\u0131 Rakamlar\u0131ndan Baz\u0131lar\u0131n\u0131n G\u00f6sterimi** ","7eae3701":"[\u0130\u00e7indekiler Men\u00fcs\u00fcne Git](#0.)\n# <a class=\"anchor\" id=\"9.\"><\/a>**10. Pipeline \u0130le PCA ve LogisticRegression**  ","b8879ad0":"[\u0130\u00e7indekiler Men\u00fcs\u00fcne Git](#0.)\n\n# <a class=\"anchor\" id=\"4e1.\"><\/a>**5. Temel Bile\u015fen Analizi-Principle Component Analiysis(PCA)**\n","175a9652":"[\u0130\u00e7indekiler Men\u00fcs\u00fcne Git](#0.)\n\n# <a class=\"anchor\" id=\"6.\"><\/a>**7. Yar\u0131\u015fma Veri Setinde PCA+SVC  Kullan\u0131lmas\u0131**","fbbca360":"[\u0130\u00e7indekiler Men\u00fcs\u00fcne Git](#0.)\n# <a class=\"anchor\" id=\"8.\"><\/a>**9. Pipeline \u0130le \u0130\u015f Ak\u0131\u015f\u0131n\u0131n Otomatikle\u015ftirilmesi**  \n\nMakine \u00f6\u011frenmesinin veri setleri \u00fczerinde uygulamas\u0131n\u0131n standart i\u015f ak\u0131\u015f\u0131 vard\u0131r. Bu i\u015f ak\u0131\u015f\u0131n\u0131 otomatikle\u015ftirmek i\u00e7in sklearn Pipeline(boru hatt\u0131) nesnesini sunmaktad\u0131r. Pipeline, makine \u00f6\u011fremesi i\u00e7in yap\u0131lmas\u0131 gerekli olan \u00f6l\u00e7eklendirme, \u00f6zellik \u00e7\u0131karma ve modelleme gibi i\u015flemleri s\u0131ras\u0131yla yapmaya olanak sa\u011flar. Pipeline, t\u00fcm veri setinde ayn\u0131 i\u015flemin yap\u0131lmas\u0131n\u0131 garanti ederek e\u011fitim ve test verilerinin tutarl\u0131 olmas\u0131n\u0131 garanti eder."}}