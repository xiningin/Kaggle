{"cell_type":{"28e32857":"code","1c991136":"code","44414003":"code","c3f6c934":"code","d99c74d8":"code","8a03a9b4":"code","e61ac016":"code","1357dd4c":"code","28be6316":"code","879a5dad":"code","1f0bae58":"code","a8f067a8":"code","3c0f6833":"code","c333d0d5":"code","66dedcaf":"code","1efb080d":"code","d525ff3e":"code","242a1cb6":"code","94070b49":"code","6b9465bc":"code","76c5136f":"code","945aa079":"code","d63a5428":"code","d0d67908":"code","9c549cb0":"code","5502dc60":"code","50b33ecc":"code","3a526cc7":"code","a0f2eb91":"code","bb068c12":"code","149a63cc":"code","871e4907":"code","cf466ac6":"code","9e26830e":"code","cd23214b":"code","e239186e":"code","45b32553":"code","2774c4f1":"markdown","a6ce5f2c":"markdown","a9a561cc":"markdown","7792c309":"markdown","2222dbb2":"markdown","92fc39b6":"markdown"},"source":{"28e32857":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1c991136":"data = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ndata_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ndata_train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndata.head()","44414003":"data_test.head()","c3f6c934":"data_train.head()","d99c74d8":"data_train.info()","8a03a9b4":"data_train.Ticket.value_counts()","e61ac016":"data_train.head(5)","1357dd4c":"data_test.info()","28be6316":"data_test.head(5)","879a5dad":"data_train.drop(['Name','Ticket','Cabin'],inplace=True,axis=1)\ndata_train.head()","1f0bae58":"data_test.drop(['Name','Ticket','Cabin'],inplace=True,axis=1)\ndata_test.head()","a8f067a8":"data_train.info()","3c0f6833":"data = [data_train,data_test]\nfor dataset in data:\n    dataset.Embarked = dataset.Embarked.fillna('S')","c333d0d5":"data_test.info()","66dedcaf":"data_train.isnull().sum()","1efb080d":"data_test.isnull().sum()","d525ff3e":"data_train.Embarked.value_counts()","242a1cb6":"# data = [data_train,data_test]\n# for dataset in data:\n#     dataset.Embarked = dataset.Embarked.fillna('S')","94070b49":"genderMap = {'male':0,'female':1}\ndata = [data_train,data_test]\nfor dataset in data:\n    dataset.Sex = dataset.Sex.map(genderMap)","6b9465bc":"embarkedMap = {'S':0,'C':1,'Q':2}\ndata = [data_train,data_test]\nfor dataset in data:\n    dataset.Embarked = dataset.Embarked.map(embarkedMap)","76c5136f":"data = [data_train,data_test]\nfor dataset in data:\n    dataset.Age = dataset.Age.fillna(dataset.Age.mean())\n    dataset.Fare = dataset.Fare.fillna(dataset.Fare.mean())","945aa079":"data_train.isnull().sum()","d63a5428":"data_test.isnull().sum()","d0d67908":"print(data_train.info(), data_test.info())","9c549cb0":"Fare = data_train.Fare\nFare = pd.qcut(Fare,5)\nFare.value_counts()","5502dc60":"data = [data_train,data_test]\nfor dataset in data:\n    dataset.loc[(dataset['Fare'] <= 7.854),'Fare']=0\n    dataset.loc[(dataset['Fare'] >= 7.854) & (dataset['Fare']<= 10.5),'Fare' ]=1\n    dataset.loc[(dataset['Fare'] >= 10.5) &(dataset['Fare'] <= 21.679),'Fare' ]=2\n    dataset.loc[(dataset['Fare'] >= 21.679)& (dataset['Fare']<= 39.688),'Fare' ]=3\n    dataset.loc[(dataset['Fare'] >= 39.688),'Fare']=4\n    dataset.Fare= dataset['Fare'].astype(int)\n    \ndata_train.Fare.value_counts()","50b33ecc":"data_train.Fare.value_counts()","3a526cc7":"Age = data_train.Age\nAge = pd.qcut(Age,5)\nAge.value_counts()","a0f2eb91":"data = [data_train,data_test]\nfor dataset in data:\n    dataset.loc[(dataset['Age'] <= 20.0),'Age']=0\n    dataset.loc[(dataset['Age'] >= 20.0) & (dataset['Age']<= 28.0),'Age' ]=1\n    dataset.loc[(dataset['Age'] >= 28.0) &(dataset['Age'] <= 29.699),'Age' ]=2\n    dataset.loc[(dataset['Age'] >= 29.699)& (dataset['Age']<= 38.0),'Age' ]=3\n    dataset.loc[(dataset['Age'] >= 38.0),'Age']=4\n    dataset.Age= dataset['Age'].astype(int)\n    \ndata_train.Age.value_counts()","bb068c12":"data_train[['Age','Survived']].groupby(['Age'],as_index=False).mean().sort_values(by = \"Survived\", ascending = False)","149a63cc":"print(data_train.info(), data_test.info())","871e4907":"X_test = data_test.drop(['PassengerId'],axis=1)","cf466ac6":"# from sklearn.linear_model import LogisticRegression\n\n# clf = LogisticRegression(random_state = 0)\n# clf.fit(X_train,Y_train)\n\n# Y_pred = clf.predict(X_test)","9e26830e":"# accuracy = round(clf.score(X_train,Y_train)*100,2)\n# print(\"Accurecy is : \" + str(accuracy) + \"%\")","cd23214b":"# from sklearn.svm import SVC\n\n# clf = SVC()\n# clf.fit(X_train,Y_train)\n\n# Y_pred = clf.predict(X_test)\n\n# accuracy = round(clf.score(X_train,Y_train)*100,2)\n# print(\"Accurecy is : \" + str(accuracy) + \"%\")","e239186e":"from sklearn.neighbors import KNeighborsClassifier\nclf = KNeighborsClassifier()\nclf.fit(X_train,Y_train)\n\nY_pred = clf.predict(X_test)\n\naccuracy = round(clf.score(X_train,Y_train)*100,2)\nprint(\"Accurecy is : \" + str(accuracy) + \"%\")","45b32553":"output = pd.DataFrame({'PassengerId':data_test.PassengerId,'Survived':Y_pred})\noutput.to_csv('my_submission.csv',index=False)\nprint('Complete')","2774c4f1":"# Filled missing values with MODE","a6ce5f2c":"# ****SVM","a9a561cc":"X_train = data_train.drop(['PassengerId','Survived'],axis=1)\nY_train = data_train.Survived","7792c309":"# ****Groupping","2222dbb2":"# Fill missing values with mean****","92fc39b6":"# KNN****"}}