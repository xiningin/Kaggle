{"cell_type":{"9a79df5f":"code","7b4057e1":"code","c6249309":"code","79414ad8":"code","4e970639":"code","fc1a04f6":"code","8df5fa8e":"code","d4286f9c":"code","07d056aa":"code","c1b31b2a":"code","8455bc05":"code","a2ff60f4":"code","0dcead30":"code","9dd53528":"code","acc098cb":"code","c9809317":"code","9b839a8f":"code","99af930a":"code","4fe762b6":"code","34da7e0b":"code","d5d0c5f2":"code","5fc27099":"code","2f03449c":"code","43e0b47a":"code","d7c6e760":"code","1062e502":"code","17e2c5e7":"markdown"},"source":{"9a79df5f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.dates import DateFormatter\nimport matplotlib.dates as mdates\nfrom scipy import interpolate, integrate\nfrom scipy import optimize","7b4057e1":"#df = pd.read_csv('..\/input\/covid19saopaulosp\/covidsp.csv',sep=',',index_col=0, parse_dates=True)\ndf = pd.read_csv('..\/input\/covid19saopaulosp\/covidsp.csv',sep=',')\ndf['Date'] = pd.to_datetime(df['Date'])  # Converts date strings to timestamp\ndf.set_index('Date', inplace = True)","c6249309":"print(df.info(verbose=True) ,\"\\n\")\n\nprint (\"Dados dos \u00faltimos 7 dias absolutos\" , \"\\n\")\ndf.tail(15)","79414ad8":"daily_data = pd.DataFrame()\ndaily_data['DeathPerDay']=df['DeathsSivep'].diff()\ndaily_data['DeathTotal']=df['DeathsSivep']\ndaily_data['ConfirmedTotal']=df['ConfirmedCases']\ndaily_data['ConfirmedPerDay']=df['ConfirmedCases'].diff()\ndaily_data['SuspectedPerDay']=df['Suspects'].diff()\ndaily_data['DeathPerDayAvg']=df['DeathsSivep'].diff(periods=7)\/7\ndaily_data['ConfirmedPerDayAvg']=df['ConfirmedCases'].diff(periods=7)\/7\ndaily_data['CtiUsage']=df['CtiUsage']\ndaily_data['Letality'] = 100.0*(df['DeathsSivep']\/df['ConfirmedCases'])\ndaily_data['LetalityLast30days'] = 100.0*(df['DeathsSivep'].diff(periods=30)\/df['ConfirmedCases'].diff(periods=30))\ndaily_data['LetalityShiftConfirmed'] = 100.0*(df['DeathsSivep']\/df['ConfirmedCases'].shift(13))\ndaily_data['ReceoveredEstimated'] = df['Recovered']\ndaily_data['Active'] = daily_data['ConfirmedTotal'] - daily_data['DeathTotal'] - daily_data['ReceoveredEstimated']  # Active Cases\ndaily_data['ActiveEstOnConfirmed'] = daily_data['ConfirmedTotal'] - daily_data['ConfirmedTotal'].shift(13)\n\n\ndeath_rate = 0.5 #taxa de morte do coronavirus em porcentagem\npopulation_sao_paulo = 12252023\ndaily_data['EstimatedPercentPopulation'] = 100*(df['DeathsSivep']\/(death_rate\/100.0))\/(population_sao_paulo)\n","4e970639":"print (\"Dados dos \u00faltimos dias\")\nprint(daily_data.info(verbose=True))\ndaily_data.tail(10)","fc1a04f6":"def logistic_model(x, a, b, c):\n    \"\"\"Uses Logistic Model (https:\/\/en.wikipedia.org\/wiki\/Logistic_regression) to fit the curve of infected\n        individuals to a Logistic Curve f(x, a, b, c) = c \/ (1 + exp(-(x-b)\/a))\n\n        Args:\n        - x : (float) Time to evaluate the infected curve\n        - a, b, c : (float) Logistic Curve paramters\n    \"\"\"\n    return c \/ (1 + np.exp(-(x - b) \/ a))","8df5fa8e":"def fit(time_series, model, lbounds, gbounds, guess=None):\n    \"\"\"Fit the real data to a model. Lower and greater bounds must be provided\n       in order to fit a problem with many free parameters. An initial guess\n       should be provided in order to improve the accuracy of the model.\n\n       Args:\n       - values : panda series\n       - model : (models.model) A function from models.py library\n       - lbounds : (list) List of floats for lower bounds of each free parameter of the model\n       - gounds : (list) List of floats for greater bounds of each free parameter of the model\n       - guess : (list) List of floats for an initial guess between bounds (default None)\n    \"\"\"\n\n    xdata = time_series.index.values.astype(float)\n    xdata = np.arange(0, len(time_series)).astype(float)\n    ydata = time_series.to_numpy().astype(float)\n    sol = optimize.curve_fit(model, xdata, ydata, p0=guess, bounds=(lbounds, gbounds))[0]  # Fit the curve\n    return sol","d4286f9c":"def format_axis(ax, values, days_range, tmax=None):\n\n    \"\"\" Given an matplotlib.pyplot.axis object, it returns the same object formatting the date values on the x-axis\n\n        Parameters:\n        - ax (matplotlib.pyplot.axis) The axis to format\n        - values (pandas.DataFrame or pandas.Series) The data which appears on the plot\n        - days_range (int) Days between x-label ticks\n        - tmax (int) Maximum number of days to show, default chooses the lenght of values (Default None)\"\"\"\n\n    initial_date = values.index.values[0]  # Select the initial date\n\n    if tmax:\n        days_ticks = range(tmax)  # Expand or truncate to tmax if necesary\n    else:\n        days_ticks = range(len(values))  # Automatically chooses the lenght of values\n\n    # Format the labels to day \/ month strings\n    days_labels = [str(pd.to_datetime(initial_date + np.timedelta64(i, 'D')).day).zfill(2) + '\/' +\n                   str(pd.to_datetime(initial_date + np.timedelta64(i, 'D')).month).zfill(2) for i in days_ticks]\n\n    ax.set_xticks(days_ticks[::days_range])  # Define the matplotlib xticks\n    ax.set_xticklabels(days_labels[::days_range])  # Define the matplotlib xlabels\n    return ax\n\ndef plot_chart_model(time_series, model,model_parameters,number_days_future,title):\n    \n    values = time_series.to_numpy().astype(float)\n    sol = model_parameters\n        \n    days = np.arange(0, len(values))  # Defines the days array for the real data plot\n    tmin=0\n    tmax=len(values)+ number_days_future\n    scale=1\n    days_range = 14\n      \n    t = np.arange(tmin, tmax)  # Defines the time array for the model plot\n\n    fig, ax = plt.subplots(figsize=(12, 8), ncols=1)  # Creates the Figure\n\n    ax.plot(days, values \/ scale, 'k', alpha=0.5, lw=2, marker='x', label='Dados Reais')  # Plot the real data\n    ax.plot(t, model(t, *sol) \/ scale, 'r', alpha=0.5, lw=3, label='Modelo')  # Plot the model data\n\n    ax.legend().get_frame().set_alpha(0.5)  # Style the legend\n    ax.grid(b=True, which='major', c='k', lw=0.25, ls='-')  # Style the grid\n\n    ax.set_xlabel('Data')  # Set the x-axis label\n    ax.set_ylabel('Numero (' + str(scale) + ')')  # Set the y-axis label\n\n    ax.yaxis.set_tick_params(length=0)  # Style the y-axis labels\n    ax.xaxis.set_tick_params(length=0)  # Style the x-axis labels\n\n    ax.set_xlim([tmin, tmax])\n\n    ax = format_axis(ax, time_series, days_range, tmax)\n\n    ax.set_title(title)  # Set the title\n\n    for spine in ('top', 'right', 'bottom', 'left'):\n        ax.spines[spine].set_visible(False)  # Style the figure box\n    plt.tight_layout()\n    # Rotate tick marks on x-axis\n    plt.setp(ax.get_xticklabels(), rotation=90)\n    plt.show()\n    ","07d056aa":"def sir_model(x, initial_infected, beta, gamma, population, t0, initial_recovered=0, tmax=365, n=1000):\n\n    \"\"\"\"Uses SIR Model (https:\/\/en.wikipedia.org\/wiki\/Compartmental_models_in_epidemiology#The_SIR_model)\n        to return the value of the Infected Curve at time x, given the SIR Model parameters.\n\n        Parameters:\n        - x : (float) Time to evaluate the infected curve\n        - initial_infected : (float) SIR Model I0 parameter. Initial infected subjects\n        - beta : (float) Transmission rate\n        - gamma : (float) Typical time between contacts\n        - population : (float) Susceptible population\n        - t0 : (float) Initial time to fix origin\n        - initial_recovered : (float) Initial recovered individuals (Default 0)\n        - tmax : (float) Time for integrating the differential equations, in days (Default 365)\n        - n : (int) Number of time points for integrating the differential equations (Default 1000)\"\"\"\n\n    gamma = 1 \/ gamma\n    initial_susceptible = population - initial_infected - initial_recovered  # Everyone who is susceptible to infection\n    t = np.linspace(t0, tmax, n)  # Time vector for integrating\n\n    def derivatives(y, _):\n\n        \"\"\"SIR Model Differential Equations\n\n            Parameters:\n            - y : (np.ndarray) Array containing [Susceptible, Infected, Recovered] points\n            - _ : (None) Empty parameter for consistency with scipy.integrate.odeint method\"\"\"\n\n        s, i, _ = y\n        derivative_a = -beta * s * i \/ population  # dS\/dt\n        derivative_b = beta * s * i \/ population - gamma * i  # dI\/dt\n        derivative_c = gamma * i  # dR \/ dt\n        return derivative_a, derivative_b, derivative_c\n\n    y0 = initial_susceptible, initial_infected, initial_recovered  # Initial conditions vector\n    sol = integrate.odeint(derivatives, y0, t)  # Integrate the SIR equations over the time grid, total_time\n    infected = sol[:, 1]  # Infected individuals for each day\n    interp = interpolate.interp1d(t, infected, fill_value='extrapolate')  # Creates an interpolator with the vectors\n    resp =  interp(x)\n    #print('sir model x=',x , 'infected=',resp)\n    return resp","c1b31b2a":"lbounds = [0, 0, 0]\ngbounds = [np.inf, np.inf, np.inf]\nguess = [1, 1, 1]\ndata_series = daily_data['DeathTotal']\nmodel_param = fit(data_series,  logistic_model, lbounds, gbounds, guess)\na=model_param[0]\nb=model_param[1]\nc=model_param[2]\nprint('Par\u00e2metros Modelo Logistico Mortos','a=',a ,'b=',b,'c=',c)\n\nnumber_days_future = 90\nplot_chart_model(data_series,logistic_model,model_param,number_days_future,'Estimativa de N\u00famero de Mortos Modelo Logistico')\n","8455bc05":"lbounds = [0, 0, 0]\ngbounds = [np.inf, np.inf, np.inf]\nguess = [1, 1, 1]\ndata_series = daily_data['ConfirmedTotal']\nmodel_param = fit(data_series,  logistic_model, lbounds, gbounds, guess)\na=model_param[0]\nb=model_param[1]\nc=model_param[2]\nprint('Par\u00e2metros Modelo Logistico Confirmados','a=',a ,'b=',b,'c=',c)\nnumber_days_future = 90\nplot_chart_model(data_series,logistic_model,model_param,number_days_future,'Estimativa de N\u00famero de Casos Modelo Logistico')","a2ff60f4":"# Fit the SIR Model\n\"\"\"\n        - initial_infected : (float) SIR Model I0 parameter. Initial infected subjects\n        - beta : (float) Transmission rate\n        - gamma : (float) Typical time between contacts\n        - population : (float) Susceptible population\n        - t0 : (float) Initial time to fix origin\n\"\"\"\n\nlbounds = [0, 0, 1, 0, -np.inf]\ngbounds = [np.inf, np.inf, np.inf, np.inf, np.inf]\nguess = [1, 1, 50, 3.5e6, 0]\ndata_series = daily_data['Active']\nmodel_param = fit(data_series,  sir_model, lbounds, gbounds, guess)\ninitial_infected=model_param[0]\nbeta=model_param[1]\ngamma=model_param[2]\npopulation=model_param[3]\nt0=model_param[4]\nprint('Par\u00e2metros Modelo SIR','initial_infected=',initial_infected ,'beta=',beta,'gamma=',gamma,'population=',population, 't0=',t0)\nnumber_days_future = 90\nplot_chart_model(data_series,sir_model,model_param,number_days_future,'Estimativa de casos com Covid Ativa no Modelo SIR')","0dcead30":"def sir_model_confirmed(x, initial_infected, beta, gamma, population, t0, initial_recovered=0, tmax=365, n=500):\n\n    \"\"\"\"Uses SIR Model (https:\/\/en.wikipedia.org\/wiki\/Compartmental_models_in_epidemiology#The_SIR_model)\n        to return the value of the Infected plus recovered Curve at time x, given the SIR Model parameters.\n\n        Parameters:\n        - x : (float) Time to evaluate the infected curve\n        - initial_infected : (float) SIR Model I0 parameter. Initial infected subjects\n        - beta : (float)   infection (or contact) rate \n        - gamma : (float)  recovery rate\n        - population : (float) Susceptible population\n        - t0 : (float) Initial time to fix origin\n        - initial_recovered : (float) Initial recovered individuals (Default 0)\n        - tmax : (float) Time for integrating the differential equations, in days (Default 365)\n        - n : (int) Number of time points for integrating the differential equations (Default 1000)\"\"\"\n\n    \n    initial_susceptible = population - initial_infected - initial_recovered  # Everyone who is susceptible to infection\n    t = np.linspace(t0, tmax, n)  # Time vector for integrating\n\n    def derivatives(y, _):\n\n        \"\"\"SIR Model Differential Equations\n\n            Parameters:\n            - y : (np.ndarray) Array containing [Susceptible, Infected, Recovered] points\n            - _ : (None) Empty parameter for consistency with scipy.integrate.odeint method\"\"\"\n\n        s, i, _ = y\n        derivative_a = -beta * s * i \/ population  # dS\/dt\n        derivative_b = beta * s * i \/ population - gamma * i  # dI\/dt\n        derivative_c = gamma * i  # dR \/ dt\n        return derivative_a, derivative_b, derivative_c\n\n    y0 = initial_susceptible, initial_infected, initial_recovered  # Initial conditions vector\n    sol = integrate.odeint(derivatives, y0, t)  # Integrate the SIR equations over the time grid, total_time\n    \n    infected = sol[:, 1]  # Infected individuals for each day\n    interp = interpolate.interp1d(t, infected, fill_value='extrapolate')  # Creates an interpolator with the vectors\n    infected_interpolated =  interp(x)\n    \n    recovered = sol[:, 2]  # recoverd individuals\n    interp = interpolate.interp1d(t, recovered, fill_value='extrapolate')  # Creates an interpolator with the vectors\n    recovered_interpolated =  interp(x)\n    \n    infected_plus_recovered = infected_interpolated + recovered_interpolated\n    #print('sir model','initial_infected=',initial_infected, 'beta=',beta , 'gamma=',gamma , 'population=',population,)\n    #raise Exception(\"Stop Script\") \n    #%debug\n    return infected_plus_recovered","9dd53528":"# Fit the SIR Model based on deaths\n\"\"\"\n        - initial_infected : (float) SIR Model I0 parameter. Initial infected subjects\n        - beta : (float)   infection (or contact) rate \n        - gamma : (float)  recovery rate\n        - population : (float) Susceptible population\n        - t0 : (float) Initial time to fix origin\n\"\"\"\n\nlbounds = [0, 0, 0, 0, -100]\ngbounds = [np.inf, np.inf, np.inf, 13e6, np.inf]\nguess = [1, 1, 1, 7.0e6, -20]\ndata_series = daily_data['DeathTotal']\/(0.005)\nmodel_param = fit(data_series,  sir_model_confirmed, lbounds, gbounds, guess)\ninitial_infected=model_param[0]\nbeta=model_param[1]\ngamma=model_param[2]\npopulation=model_param[3]\nt0=model_param[4]\nr_0=beta\/gamma\nprint('Par\u00e2metros Modelo SIR','initial_infected=',initial_infected ,'beta=',beta,'gamma=',gamma, 'r_0=', r_0, 'population=',population, 't0=',t0)\nnumber_days_future = 90\nplot_chart_model(data_series,sir_model_confirmed,model_param,number_days_future,'Estimativa de casos no Modelo SIR baseado n\u00famero de mortos e mortalidade de 0.5%')","acc098cb":"def plot_chart(df, column_name, chart_title):\n  \"\"\"Mostra gr\u00e1fico de barras \n  Args:\n        df (Dataframe): Dados do Dataframe do arquivo CSV.\n        column_name (str): nome da coluna do dataframe com os dados.\n        chart_title (str): T\u00edtulo do Gr\u00e1fico.\n  \"\"\"\n    \n  \n  #https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.plot.html#pandas.DataFrame.plot\n  #ax = df[column_name].plot(kind='bar', figsize=(10,5), title=chart_title, grid=True);\n  #https:\/\/matplotlib.org\/api\/axes_api.html#matplotlib.axes.Axes\n  #ax.set_xticklabels([temp.strftime(\"%m-%d\") for temp in df.index]);\n    \n  #https:\/\/www.earthdatascience.org\/courses\/use-data-open-source-python\/use-time-series-data-in-python\/date-time-types-in-pandas-python\/  \n  fig, ax = plt.subplots(figsize=(14, 8));\n    \n    \n  ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%m (%U)'))\n  ax.xaxis.set_major_locator(mdates.DayLocator(interval=7))\n  fig.autofmt_xdate()  \n    \n  ax.grid(zorder=0)\n  # Add x-axis and y-axis\n  ax.bar(df.index.values,\n        df[column_name],\n        color='blue');\n  # Set title and labels for axes\n  ax.set(xlabel=\"Data\",\n       title=chart_title);\n  # Rotate tick marks on x-axis\n  plt.setp(ax.get_xticklabels(), rotation=90)\n  plt.show()","c9809317":"plot_chart(daily_data,'ConfirmedTotal','Confirmados Total')","9b839a8f":"plot_chart(daily_data,'ConfirmedPerDay','Confirmados\/dia')","99af930a":"plot_chart(daily_data,'ConfirmedPerDayAvg','Confirmados\/dia  M\u00e9dia 7 dias anteriores')","4fe762b6":"plot_chart(daily_data,'DeathTotal','Mortes Total')","34da7e0b":"plot_chart(daily_data,'DeathPerDay','Mortes\/dia')","d5d0c5f2":"plot_chart(daily_data,'DeathPerDayAvg','Mortes\/dia M\u00e9dia 7 dias anteriores')","5fc27099":"plot_chart(daily_data,'EstimatedPercentPopulation','Estimativa % popula\u00e7\u00e3o contagiada supondo 0.5% letalidade e popula\u00e7\u00e3o de ' + str(population_sao_paulo))","2f03449c":"plot_chart(daily_data,'CtiUsage','Uso de UTI em %')","43e0b47a":"plot_chart(daily_data,'Letality','Letalidade em %')","d7c6e760":"plot_chart(daily_data,'LetalityShiftConfirmed','Letalidade em % comparando confirmados 13 dias atr\u00e1s')","1062e502":"plot_chart(daily_data,'ReceoveredEstimated','Estimativa recuperados comparando mortes com casos de 13 dias atr\u00e1s')","17e2c5e7":"C\u00f3digos baseado no projeto no link [Fit COVID-19 real data to SIR or Logistic models ](https:\/\/github.com\/AndresRuizCh\/fit-data-covid19)"}}