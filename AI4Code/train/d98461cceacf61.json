{"cell_type":{"5fb015a7":"code","17b25842":"code","7aec1592":"code","73b70581":"code","7bada840":"code","71473075":"code","b1e425cb":"code","4f5dd01d":"code","60faadef":"code","29ea4768":"code","e87c9a0c":"code","31b3ba21":"code","7f3275f7":"code","16bb54fe":"code","6335e0c3":"code","cfa4b343":"code","575acd1e":"code","c6a51c74":"code","8f793d7c":"code","123e303c":"code","5b2695cd":"code","5869ee8f":"code","a5fdb9e2":"code","92420b75":"markdown","f2b87a3e":"markdown","2ffb6db2":"markdown","6e633850":"markdown","508c8da8":"markdown","442f7c2a":"markdown","12ef6d5f":"markdown","ab76f0ca":"markdown","1661e194":"markdown","3e6ae395":"markdown","60d1ea91":"markdown","53399ace":"markdown","a9bcb5b2":"markdown"},"source":{"5fb015a7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib\nfrom textwrap import wrap\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import svm\nfrom sklearn import tree\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom IPython.display import Image, clear_output\nimport scipy.sparse\nimport math\nnp.random.seed(7)\n\n# Load sequence data for each protein\nall_seqs_df = pd.read_csv('..\/input\/protein-data-set\/pdb_data_seq.csv')\n# Load characteristic data for each protein\nall_charcs_df = pd.read_csv('..\/input\/protein-data-set\/pdb_data_no_dups.csv')","17b25842":"protein_charcs = all_charcs_df[all_charcs_df.macromoleculeType == 'Protein'].reset_index(drop=True)\nprotein_seqs = all_seqs_df[all_seqs_df.macromoleculeType == 'Protein'].reset_index(drop=True)\n\nprint(protein_charcs.head())\n# print(protein_seqs.head())\n# protein_df.isna().sum()\n# protein_df.columns\n","7aec1592":"protein_charcs = protein_charcs[['structureId','classification', 'residueCount', 'structureMolecularWeight',\\\n                         'crystallizationTempK', 'densityMatthews', 'densityPercentSol','phValue']]\nprotein_seqs = protein_seqs[['structureId','sequence']]\n\n# combine protein characteristics df with their sequences using structureId\nprotein_all = protein_charcs.set_index('structureId').join(protein_seqs.set_index('structureId'))\nprotein_all = protein_all.dropna()\n\n# capitalize all classification values to avoid missing any values in the next step\nprotein_all.classification = protein_all.classification.str.upper()\n\n# drop all proteins with an unknown function; note -- the tilde returns the inverse of a filter\nprotein_all = protein_all[~protein_all.classification.str.contains(\"UNKNOWN FUNCTION\")]\n\nprint(protein_all.head())","73b70581":"class_count = protein_all.classification.value_counts()\nfunctions = np.asarray(class_count[(class_count > 800)].index)\ndata = protein_all[protein_all.classification.isin(functions)]\ndata = data.drop_duplicates(subset=[\"classification\",\"sequence\"])  # leaving more rows results in duplciates \/ index related?\ndata.head()","7bada840":"data.loc[~data['classification'].str.contains('ASE'), 'classification'] = 'OTHER'\ndata = data.loc[~data['classification'].str.contains(\"OTHER\")]\ndata.loc[data['classification'].str.contains('TRANSFERASE\/TRANSFERASE INHIBITOR'), 'classification'] = 'TRANSFERASE'\ndata.loc[data['classification'].str.contains('OXIDOREDUCTASE\/OXIDOREDUCTASE INHIBITOR'), 'classification'] = 'OXIDOREDUCTASE'\ndata.loc[data['classification'].str.contains('HYDROLASE\/HYDROLASE INHIBITOR'), 'classification'] = 'HYDROLASE'\n\nprint(data.classification.value_counts())\ngroups = np.asarray(data.classification.value_counts().index)","71473075":"data","b1e425cb":"aac_data = data.drop(columns=['residueCount','structureMolecularWeight','classification','crystallizationTempK','densityMatthews','densityPercentSol','phValue'])\naac_data","4f5dd01d":"aa_list = ['A','R','N','D','C','Q','E','G','H','I','L','K','M','F','P','S','T','W','Y','V']\n\ndef AAC(seq):\n    aac = []\n    for i in aa_list:\n        aac.append(seq.count(i)\/len(seq))\n    return aac","60faadef":"aac_data['AAC'] = aac_data.sequence.apply(AAC)\naac_data.drop(columns='sequence',inplace=True)\naac_data.head(10)","29ea4768":"def dictionary_inator(list):\n    return dict(zip(aa_list,list))","e87c9a0c":"aac_data['dictAAC'] = aac_data.AAC.apply(dictionary_inator)\naac_data = aac_data.dictAAC.apply(pd.Series)\naac_data.head(10)","31b3ba21":"seq_data = data\nseq_data['dipeptides'] = seq_data.sequence.apply(lambda string: wrap(string, 2))\nseq_data['dipeptides'] = seq_data['dipeptides'].str.join(' ')","7f3275f7":"seq_data.head()","16bb54fe":"X = aac_data\ny = data['classification']\naacX_train, aacX_test, aacy_train, aacy_test = train_test_split(X,y, train_size=0.85)","6335e0c3":"svm_aac = svm.SVC()\n\nsvm_aac.fit(aacX_train, aacy_train)\n\ns_a_predictions = svm_aac.predict(aacX_test)\ns_a_score = accuracy_score(aacy_test, s_a_predictions)\nprint(s_a_score)","cfa4b343":"knn_aac = KNeighborsClassifier(n_neighbors = 1)\n\nknn_aac.fit(aacX_train, aacy_train)\n\nk_a_predictions = knn_aac.predict(aacX_test)\nk_a_score = accuracy_score(aacy_test, k_a_predictions)\nprint(k_a_score)","575acd1e":"bdt_aac = tree.DecisionTreeClassifier()\n\nbdt_aac.fit(aacX_train, aacy_train)\n\nb_a_predictions = bdt_aac.predict(aacX_test)\nb_a_score = accuracy_score(aacy_test, b_a_predictions)\nprint(b_a_score)","c6a51c74":"X = seq_data['dipeptides']\ny = data['classification']\nseqX_train, seqX_test, seqy_train, seqy_test = train_test_split(X,y, train_size=0.85)\nvectorizer = TfidfVectorizer(ngram_range = (1,1))\nseqX_train_tfidf = vectorizer.fit_transform(seqX_train)","8f793d7c":"svm_seq = svm.LinearSVC()\n\nsvm_seq.fit(seqX_train_tfidf, seqy_train)\n\ns_s_predictions = svm_seq.predict(vectorizer.transform(seqX_test))\ns_s_score = accuracy_score(seqy_test, s_s_predictions)\nprint(s_s_score)","123e303c":"knn_seq = KNeighborsClassifier(n_neighbors = 1)\n\nknn_seq.fit(seqX_train_tfidf, seqy_train)\n\nk_s_predictions = knn_seq.predict(vectorizer.transform(seqX_test))\nk_s_score = accuracy_score(seqy_test, k_s_predictions)\nprint(k_s_score)","5b2695cd":"bdt_seq = tree.DecisionTreeClassifier()\n\nbdt_seq.fit(seqX_train_tfidf, seqy_train)\n\nb_s_predictions = bdt_seq.predict(vectorizer.transform(seqX_test))\nb_s_score = accuracy_score(seqy_test, b_s_predictions)\nprint(b_s_score)","5869ee8f":"accuracy_dictionary = {'kNN, AAC':k_a_score,'kNN, Seq':k_s_score,'SVM, AAC':s_a_score,'SVM, Seq':s_s_score, 'BDT, AAC': b_a_score, 'BDT, Seq': b_s_score}\nkeys = accuracy_dictionary.keys()\nvalues = accuracy_dictionary.values()\nplt.bar(keys, values, color=['#848d96','#96c0f2','#848d96','#96c0f2','#848d96','#96c0f2'])\nplt.show()","a5fdb9e2":"for k,v in accuracy_dictionary.items():\n    print(f'Accuracy of {k} is ~{round(v,5)}')","92420b75":"#### Binary Decision Tree - AAC","f2b87a3e":"### Sequences; n-gram","2ffb6db2":"### Seq","6e633850":"#### SVM - AAC","508c8da8":"#### Binary Decision Tree - Seq","442f7c2a":"#### SVM - Seq","12ef6d5f":"#### KNN - Seq","ab76f0ca":"## Feature Creation","1661e194":"#### KNN - AAC","3e6ae395":"![](http:\/\/)![](http:\/\/)We can see above that the Amino Acid Composition serves as a better feature for protein classification in a k-Nearest Neighbors classifier, a Linear Support Vector Machine, and a binary decision tree.","60d1ea91":"## Classification","53399ace":"### AAC","a9bcb5b2":"### AAC"}}