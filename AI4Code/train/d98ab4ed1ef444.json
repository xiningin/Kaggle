{"cell_type":{"0b9d5b5b":"code","2d8f2bec":"code","1acc003e":"code","6a97eccf":"code","0305d0be":"code","e8d9e89b":"code","bf6ede52":"code","045dd4b0":"code","24dbd930":"code","bf6b7b54":"code","8f0a513d":"code","1f02073a":"code","1ac06f1a":"code","76e6b853":"code","7afe56c2":"code","6e18cf96":"code","387063a1":"code","8c8e3585":"code","725dcc51":"code","24eba9b1":"code","68457131":"code","6bf84cd9":"code","34ac3c19":"code","5b4a6c4f":"code","057071c3":"code","0689e17d":"code","50905e1d":"code","f859dee3":"code","cb84673c":"code","b735440d":"code","017470d1":"code","0bdbf56b":"code","093b2768":"code","6d7f4885":"code","917f4595":"code","3060a815":"code","ea4f63ea":"code","9908dd2d":"code","d03c3f22":"code","9983f38d":"markdown","0246f1ea":"markdown","30bad165":"markdown","99315576":"markdown","6fec3c68":"markdown","9f83e36f":"markdown","279ece21":"markdown","447dc811":"markdown","f60f64cc":"markdown","31bc47e1":"markdown","bf88494e":"markdown","9ea3af59":"markdown","cc44b6f3":"markdown","7a279bd7":"markdown","ff55052c":"markdown","b79dbc83":"markdown","54dc9684":"markdown"},"source":{"0b9d5b5b":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport warnings\nwarnings.filterwarnings('ignore')","2d8f2bec":"from sklearn.preprocessing import OneHotEncoder , LabelEncoder , label_binarize\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import plot_roc_curve,roc_auc_score,roc_curve","1acc003e":"df = pd.read_csv(\"..\/input\/heart-failure-prediction\/heart.csv\")\ndf.head()","6a97eccf":"def chest_pain_type(title):\n    if title =='ATA':\n        return 'Atypical Angina'\n    elif title=='TA':\n        return 'Typical Angina'\n    elif title=='NAP':\n        return 'Non-Anginal Pain'\n    elif title=='ASY':\n        return 'Asymptomatic'\n    else:\n        return 'N\/A'","0305d0be":"df['ChestPainType']=df['ChestPainType'].apply(chest_pain_type)","e8d9e89b":"df.shape","bf6ede52":"df.info","045dd4b0":"df.isna().sum()","24dbd930":"df.head()","bf6b7b54":"fig=plt.figure(figsize=(11,6))\nsns.countplot(x=df.Sex)","8f0a513d":"fig=plt.figure(figsize=(11,6))\npx.histogram(x=df.Sex,color=df.HeartDisease,barmode='group')","1f02073a":"fig=plt.figure(figsize=(11,6))\npx.histogram(x=df.ChestPainType,color=df.HeartDisease,barmode='group')","1ac06f1a":"df.head()","76e6b853":"d={'F':1,'M':0}","7afe56c2":"df['Sex']=df.Sex.map(d)","6e18cf96":"d1={'N':0,'Y':1}","387063a1":"df['ExerciseAngina']=df.ExerciseAngina.map(d1)","8c8e3585":"df.head()","725dcc51":"cols=['Sex','Age','RestingBP','Cholesterol','FastingBS','MaxHR','ExerciseAngina','Oldpeak']","24eba9b1":"for c in cols:\n    plt.figure(figsize=(11,10))\n    sns.distplot(df.loc[df['HeartDisease']==0][c],kde_kws={'label':'Heart Disease'},color='green')\n    sns.distplot(df.loc[df['HeartDisease']==1][c],kde_kws={'label':'Normal'},color='red')\n    \n    plt.legend(labels=['Normal','Heart Disease'])\n    plt.title(c)\n    ","68457131":"df.head()","6bf84cd9":"col2=['Age','RestingBP','Cholesterol','MaxHR']","34ac3c19":"for c in col2:\n    fig=plt.figure(figsize=(9,6))\n    sns.boxplot(x=df[c],hue=df.HeartDisease)","5b4a6c4f":"sns.pairplot(df)","057071c3":"df2=df.apply(LabelEncoder().fit_transform)","0689e17d":"X=df2.drop('HeartDisease',axis=True)\ny=df2['HeartDisease']","50905e1d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","f859dee3":"X_train","cb84673c":"clf_random_forest=RandomForestClassifier()\nclf_random_forest=clf_random_forest.fit(X_train,y_train)\nrandom_forest_predictions=clf_random_forest.predict(X_test)\n\naccuracy_random_forest=accuracy_score(y_test,random_forest_predictions)*100\nprint(accuracy_random_forest)","b735440d":"r_fpr,r_tpr,_=roc_curve(y_test,random_forest_predictions)\nr_auc=roc_auc_score(y_test,random_forest_predictions)\nplt.plot(r_fpr,r_tpr,label='Random Forest Prediction (area={:.3f})'.format(r_auc))\nplt.title('ROC plot Random Forest Classifier')\nplt.xlabel('False Positive rate')\nplt.ylabel('True Positive rate')\nplt.legend(loc='best')\nplt.show()","017470d1":"KNC=KNeighborsClassifier()\nKNC=KNC.fit(X_train,y_train)\nKNN_predictions=KNC.predict(X_test)\n\nknn_accuracy=accuracy_score(y_test, KNN_predictions)*100\nprint(knn_accuracy)","0bdbf56b":"k_fpr,k_tpr,_=roc_curve(y_test,KNN_predictions)\nknn_score=roc_auc_score(y_test,KNN_predictions)\nplt.plot(k_fpr,k_tpr,label='KNN prediction (area={:.3f})'.format(knn_score))\nplt.title('ROC plot KNN')\nplt.xlabel('False Positive rate')\nplt.ylabel('True Positive rate')\nplt.legend(loc='best')\nplt.show()","093b2768":"d_tree=DecisionTreeClassifier()\nd_tree=d_tree.fit(X_train,y_train)\nd_tree_predictions=d_tree.predict(X_test)\n\nd_tree_accuracy=accuracy_score(y_test,d_tree_predictions)*100\nprint(d_tree_accuracy)","6d7f4885":"d_fpr,d_tpr,_=roc_curve(y_test,d_tree_predictions)\nd_tree_score=roc_auc_score(y_test,d_tree_predictions)\nplt.plot(d_fpr,d_tpr,label='Decision Tree prediction (area={:.3f})'.format(d_tree_score))\nplt.title('ROC plot Decision Tree Classifier')\nplt.xlabel('False Positive rate')\nplt.ylabel('True Positive rate')\nplt.legend(loc='best')\nplt.show()","917f4595":"gbc = GradientBoostingClassifier(n_estimators=500, learning_rate=0.01, random_state=0)\ngbc=gbc.fit(X_train,y_train)\ngbc_predictions=gbc.predict(X_test)\n\ngbc_accuracy=accuracy_score(y_test,gbc_predictions)*100\nprint(gbc_accuracy)","3060a815":"gbc_fpr,gbc_tpr,_=roc_curve(y_test,gbc_predictions)\ngbc_score=roc_auc_score(y_test,gbc_predictions)\nplt.plot(d_fpr,d_tpr,label='Gradient Boosting prediction (area={:.3f})'.format(gbc_score))\nplt.title('ROC plot Gradient Boosting')\nplt.xlabel('False Positive rate')\nplt.ylabel('True Positive rate')\nplt.legend(loc='best')\nplt.show()","ea4f63ea":"Models=pd.DataFrame({'Models':['RandomForest','KNeighbors','DecisionTree','GradientBoosting'],\n                    'Score':[accuracy_random_forest,knn_accuracy,d_tree_accuracy,gbc_accuracy]\n                    })","9908dd2d":"Models","d03c3f22":"fig=plt.figure(figsize=(10,10))\nsns.barplot(x=Models.Models,y=Models.Score)\nplt.xticks(rotation=90)\nfig.show()","9983f38d":"# Density Plot for numeric features","0246f1ea":"# Adding 1 and 0 for Exercise Angina column","30bad165":"**Random Forest and Graident Boosting are very close to another **","99315576":"# Replacing Females with 1 and Males with 0","6fec3c68":"# Box Plots to visualize outliers\n","9f83e36f":"# Relation of chest pain type with heart disease outcome","279ece21":"# Importing Libraries ","447dc811":"# Checking for Missing values","f60f64cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","31bc47e1":"# Count Plot for Males and Females in the dataset","bf88494e":"# Pair wise relationship between different variables\n","9ea3af59":"# Experimenting with different learning methods","cc44b6f3":"# Splitting Up the data set ","7a279bd7":"# Comparing performance of different models","ff55052c":"fig=plt.figure(figsize=(11,6))\npx.histogram(x=df.Sex,color=df.HeartDisease,barmode='group')","b79dbc83":"# Removing abbreviations for chest pain type","54dc9684":"# Looking into the Data Frame"}}