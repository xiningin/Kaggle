{"cell_type":{"7a93ba27":"code","1c7e64cb":"code","5c2503f4":"code","52c538fb":"code","db0f17a8":"code","18c9cc2a":"code","a6efcdb4":"code","30a9fae5":"code","bc7bac80":"code","639d100a":"code","7f4b06a8":"code","14d7ec67":"code","07ae1b30":"code","8c068241":"code","774e5579":"code","2a70b27f":"code","75a8cb48":"code","b9971575":"code","568ad700":"code","9b18cb62":"code","932c1c8d":"code","2d89622f":"code","78ba6914":"markdown","d79e9cbb":"markdown","f47ad7aa":"markdown","c033913a":"markdown","fad89d61":"markdown","68310b7a":"markdown","008e43be":"markdown","a5820ac6":"markdown","8503c4d6":"markdown","05a185a2":"markdown","1790076d":"markdown","4374d848":"markdown","3e4cb88e":"markdown","ab9018d5":"markdown","f4952949":"markdown","3fc2ab53":"markdown","a084e466":"markdown","09b69729":"markdown","8a3cfb35":"markdown","c0e2da1d":"markdown","88cb6451":"markdown","80ce0999":"markdown","6bc086dd":"markdown","8dfd8d3c":"markdown","9b2c8b30":"markdown"},"source":{"7a93ba27":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # for data visualization\n%matplotlib inline\nimport seaborn as sns # for advanced data visualizations\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1c7e64cb":"vgSales = pd.read_csv(\"..\/input\/videogamesales\/vgsales.csv\")\nvgSales.head()","5c2503f4":"vgSales.info()","52c538fb":"vgSales.describe()","db0f17a8":"vgSales.isna().sum()","18c9cc2a":"vgSales.isna().sum().sum()","a6efcdb4":"def dfCategory(dFrame):\n    for i in dFrame.columns:\n        print(dFrame.groupby(i)[i].count())\n        print('\\n')","30a9fae5":"dfCategory(vgSales)","bc7bac80":"print(\"The Skew Count of NA_Sales Column is:\",vgSales[\"NA_Sales\"].skew())\nprint(\"The Skew Count of EU_Sales Column is:\",vgSales[\"EU_Sales\"].skew())\nprint(\"The Skew Count of JP_Sales Column is:\",vgSales[\"JP_Sales\"].skew())\nprint(\"The Skew Count of Other_Sales Column is:\",vgSales[\"Other_Sales\"].skew())","639d100a":"vgSales[\"NA_Sales\"] = vgSales[\"NA_Sales\"]**(1\/2)\nvgSales[\"EU_Sales\"] = vgSales[\"EU_Sales\"]**(1\/2)\nvgSales[\"JP_Sales\"] = vgSales[\"JP_Sales\"]**(1\/2)\nvgSales[\"Other_Sales\"] = vgSales[\"Other_Sales\"]**(1\/2)\nvgSales[\"Global_Sales\"] = vgSales[\"NA_Sales\"] + vgSales[\"EU_Sales\"] + vgSales[\"JP_Sales\"] + vgSales[\"Other_Sales\"]","7f4b06a8":"vgSales","14d7ec67":"print(\"Max Year Value: \", vgSales['Year'].max())","07ae1b30":"maxEntry = vgSales['Year'].idxmax()\nvgSales.iloc[maxEntry]","8c068241":"vgSales[\"Year\"] = vgSales[\"Year\"].replace(2020.0, 2009.0)","774e5579":"print(\"Max Year Value: \", vgSales[\"Year\"].max())","2a70b27f":"YearAnamoly = vgSales[vgSales['Year'].isnull()]['Name'].unique()\nprint(\"The year records having such anamoly: \", len(YearAnamoly))","75a8cb48":"plt.figure(figsize = (20,20))\nplt.bar(vgSales[\"Year\"].value_counts().index, vgSales[\"Year\"].value_counts())\nplt.title(\"The most games produced in a specific year\")\nplt.show()","b9971575":"vgSales['Year'] = vgSales['Year'].fillna(2009.0)\nvgSales['Year'].isnull().sum()","568ad700":"vgSales['Year'] = vgSales['Year'].astype('int64')\nvgSales.head()","9b18cb62":"gameNames = vgSales['Name'].unique()\npublisherNames = vgSales['Publisher'].unique()\nplatformNames = vgSales['Platform'].unique()\ngenreNames = vgSales['Genre'].unique()\nprint(\"There are\",len(gameNames),\"games in the data set.\")\nprint(\"There are\",len(publisherNames),\"publishers in the data set.\")\nprint(\"There are\",len(platformNames),\"platforms in the data set.\")\nprint(\"There are\",len(genreNames),\"different genres in the data set.\")","932c1c8d":"vgSales[[\"Genre\",\"Global_Sales\"]].groupby(\"Genre\").sum()","2d89622f":"plt.figure(figsize = (20,20))\nplt.bar(vgSales[\"Platform\"].value_counts().index, vgSales[\"Platform\"].value_counts())\nplt.title(\"Most Games produced in Specific Gaming Platform\")\nplt.show()","78ba6914":"It basically gives the count of each categorical variable or records in the data set.","d79e9cbb":"### To get basic onformation of the data set:","f47ad7aa":"### To get the most games produced in a specific Gaming Platform:","c033913a":"The most sold genre of games globally is ***Action Genre***. The second highest selling genre globally is ***Sports Genre***.","fad89d61":"We are going to check the numerical data in the data set for normalization.","68310b7a":"# Importing the data set:","008e43be":"# Exploratory Data Analysis:","a5820ac6":"We can see that DS and PS2 are tied for the topspot in this","8503c4d6":"The above graph shows that most of the games were released in 2009 and 2010.","05a185a2":"**Cleaning includes normalization as well as removal of NA Values in the data set. Basically removing the Noise in the data set.**","1790076d":"Now, the max year is 2017 which is better and apt.\n***\nWe are checking anymore anamoly such as the above exists in our data set.","4374d848":"# To check our data is clean or not?","3e4cb88e":"***For such Anamolies, we thought of replaxing them with 2009 year most of the games were produced in the year 2009 according to this data set:***","ab9018d5":"We have successfully removed the NA Records and Anamolies in the Year column.\n***\nNow, converting year from Float64 -> Int64","f4952949":"### To get to know which genre sold the most globally:","3fc2ab53":"We removed the 58 NA Records in Publisher because it won't affect the visualization as it was an unnescessary noise in the data.","a084e466":"Now, we have imported the data set. We ready to go for the data cleaning and the lifescale of a data science project.","09b69729":"The data set should only contain values or records till 2017 year not till 2020.","8a3cfb35":"With this function describe(), we get to know the count, mean, standard deviation, minimum, maximum etc.","c0e2da1d":"# Importing Important libraries and directory name etc.","88cb6451":"To get the basic data of all the columns like the non-null, count as well as data type. As we can see there are 271 records in \"Year\" column and 58 records in \"Publisher\". There are total of 16598 records in this dataset.\n\nAlso, it is displaying the data types which is very important to know before applying any functions or even before working with the data.\n\nWe can see that \"Year\" column is in float64 which means that years are stores in this format ---> 2018.0 or 2021.0. We have to convert them into int64 format.","80ce0999":"This game was released on 2009 year and not in 2020.\n[https:\/\/www.google.com\/search?q=Imagine%3A+Makeup+Artist&rlz=1C1VIQF_enIN976IN976&oq=imagine+&aqs=chrome.2.69i57j0i433i512j69i59j46i433i512j0i433i457i512j0i402j0i433i512l2j0i512j0i433i512.3656j0j7&sourceid=chrome&ie=UTF-8](http:\/\/)\n\nYou can check the link above for the info on this game.","6bc086dd":"There are aroud 271 records in ***Year*** column and around 58 records in ***Publisher*** column whoch are NA Value records.\n***\nWe need to remove these before the visualization and taking useful insights from them.","8dfd8d3c":"So, we are normalizing the data with the help of Square Root Normalization Method.","9b2c8b30":"***Now let's check the Anamolies of the data:***"}}