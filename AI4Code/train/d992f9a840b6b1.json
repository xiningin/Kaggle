{"cell_type":{"2ec4fdfc":"code","788629e8":"code","3f9d04bc":"code","14d03c37":"code","b2d6e156":"code","74b46e99":"code","8f11f1fe":"code","3dfb96b7":"code","fa820e5b":"code","ff0c30e9":"code","7a2bc010":"code","9917941d":"code","dd43d836":"code","3440b772":"code","253ef98f":"code","f0e24e99":"code","194300e9":"code","aa348224":"markdown","fb0a95ce":"markdown","9798f847":"markdown","865b3f98":"markdown","eb6b37f8":"markdown","6d9165c1":"markdown","00d359fa":"markdown","dac9b7cf":"markdown"},"source":{"2ec4fdfc":"import pandas as pd\nimport seaborn as sns\nimport warnings\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nwarnings.filterwarnings('ignore')\nsns.set(style=\"darkgrid\")","788629e8":"## Read data files\ntrain = pd.read_csv(\"..\/input\/train\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test\/test.csv\")","3f9d04bc":"train.head()","14d03c37":"fig = plt.figure(figsize=(15,8))\nax = fig.add_subplot(121)\n    \nax = sns.countplot(x=\"AdoptionSpeed\", data=train, palette=\"YlOrRd\", edgecolor=\"black\")\n\nax.set_ylabel('Count')\nax.set_xlabel('Adoption Speed')\nax.set_title('Adoption Speed')\n\nax = fig.add_subplot(122)\n    \nax = sns.countplot(x=\"Type\", data=train, palette=\"YlOrRd\", edgecolor=\"black\")\n\nax.set_ylabel('Count')\nax.set_xlabel('Type')\nax.set_title('Count by Type (1 = Dog, 2 = Cat)')\n\nplt.show()\n\nfig = plt.figure(figsize=(15,8))\nax = fig.add_subplot(1,1,1)\n    \nax = sns.countplot(x=\"AdoptionSpeed\", hue=\"Type\", data=train, palette=\"YlOrRd\", edgecolor=\"black\")\n\nax.set_ylabel('Count')\nax.set_xlabel('Adoption Speed')\nax.set_title('Adoption Speed by Type (1 = Dog, 2 = Cat)')\n\nplt.show()","b2d6e156":"def generate_groupBY_data(col_name):\n    l = train.groupby(['AdoptionSpeed', col_name])[['PetID']].count().reset_index().rename(\n        columns={'PetID':'count'})\n    count_pets = train.groupby(['AdoptionSpeed', col_name])[['PetID']].count().reset_index().groupby(\n        [col_name]).sum()[['PetID']].reset_index()\n    new_col_name = 'total_pets_by' + col_name\n    count_pets.rename(columns={'PetID': new_col_name}, inplace=True)\n\n    temp = l.merge(count_pets, on=[col_name], how='left')\n    temp['fraction'] = temp['count'] * 100 \/ temp[new_col_name]\n\n    temp = temp.pivot(\"AdoptionSpeed\", col_name, \"fraction\")\n    \n    return temp","74b46e99":"# Plots for Categorical Variables\nlist_cols = ['Type', 'Gender', 'Color1', 'Color2', 'Color3', 'MaturitySize', 'FurLength', 'Vaccinated', 'Dewormed',\n            'Sterilized', 'Health', 'State']\n\ncols = 2\nrows = len(list_cols)\n\nfig = plt.figure(figsize=(15,5*rows))\nfig_no = 0\n\nfor col in list_cols:\n    fig_no += 1\n    ax = fig.add_subplot(rows, cols, fig_no)\n    sns.countplot(x=col, data=train, palette=\"YlOrRd\", edgecolor=\"black\")\n    ax.set_xlabel(col)\n    ax.set_ylabel('Count')\n    ax.set_title('Count of pets by ' + col)\n    \n    temp = generate_groupBY_data(col)\n    fig_no += 1\n    ax = fig.add_subplot(rows, cols, fig_no)\n    sns.heatmap(temp, annot=True, cmap='YlOrRd')\n    ax.set_xlabel(col)\n    ax.set_ylabel('Adoption Speed')\n    ax.set_title('Percentage of pets adopted by ' + col)\n\nfig.tight_layout()\nplt.show()","8f11f1fe":"g = sns.catplot(x=\"AdoptionSpeed\", y=\"PhotoAmt\", kind=\"box\", data=train, height=8, aspect=1.5, palette=\"YlOrRd\",\n               showfliers=False)\n\ng.axes[0,0].set_xlabel('Adoption Speed')\ng.axes[0,0].set_ylabel('Photo Amount')\ng.axes[0,0].set_title('Photo Amount vs Adoption Speed (after removing outliers)')\n\nplt.show()","3dfb96b7":"### Figure 1\nfig = plt.figure(figsize=(15,8))\n\nax = fig.add_subplot(121)\nsns.kdeplot(train.loc[train['Type'] == 1]['Age'], shade=True, color=\"red\", label='Dogs')\nsns.kdeplot(train.loc[train['Type'] == 2]['Age'], shade=True, color=\"green\", label='Cats')\nax.set_xlabel('Age')\nax.set_title('Distribution of Age by Type')\n\nax = fig.add_subplot(122)\nsns.boxplot(x=\"Type\", y=\"Age\", data=train, palette=\"YlOrRd\", showfliers=False)\nax.set_xlabel('Type')\nax.set_title('Distribution of Age by Type (after removing outliers) (1 = Dog, 2 = Cat)')\n\nplt.show()\n\n### Figure 2\ng = sns.catplot(x=\"AdoptionSpeed\", y=\"Age\", kind=\"box\", data=train, height=8, aspect=1.56, palette=\"YlOrRd\",\n                showfliers=False)\ng.axes[0,0].set_xlabel('Adoption Speed')\ng.axes[0,0].set_ylabel('Age')\ng.axes[0,0].set_title('Age vs Adoption Speed (after removing outliers)')\n\n### Figure 3\nfig = plt.figure(figsize=(15,8))\n\nax = fig.add_subplot(121)\nsns.boxplot(x=\"AdoptionSpeed\", y=\"Age\", data=train.loc[train['Type'] == 1], palette=\"YlOrRd\", showfliers=False)\nax.set_ylim((-5,60))\nax.set_xlabel('Adoption Speed')\nax.set_title('Distribution of Age by Adoption Speed for Dog (after removing outliers)')\n\nax = fig.add_subplot(122)\nsns.boxplot(x=\"AdoptionSpeed\", y=\"Age\", data=train.loc[train['Type'] == 2], palette=\"YlOrRd\", showfliers=False)\nax.set_ylim((-5,60))\nax.set_xlabel('Adoption Speed')\nax.set_title('Distribution of Age by Adoption Speed for Cat (after removing outliers)')\n\nplt.show()","fa820e5b":"train['Name_absent'] = train['Name'].isnull()\ntrain['Name_absent'] = train['Name_absent'].astype(int)\ntrain['Description_None'] = train['Description'].isnull()\ntrain['Description_None'] = train['Description_None'].astype(int)\n\n### Figure 1\nfig = plt.figure(figsize=(15,8))\n\nax = fig.add_subplot(121)\nsns.countplot(x=\"AdoptionSpeed\", data=train.loc[train['Name_absent'] == 0], palette=\"YlOrRd\", edgecolor=\"black\")\nax.set_ylim((0,4000))\nax.set_xlabel('Adoption Speed')\nax.set_ylabel('Count')\nax.set_title('Count by Adoption Speed (with Name)')\n\nax = fig.add_subplot(122)\nsns.countplot(x=\"AdoptionSpeed\", data=train.loc[train['Name_absent'] == 1], palette=\"YlOrRd\", edgecolor=\"black\")\nax.set_ylim((0,4000))\nax.set_xlabel('Adoption Speed')\nax.set_ylabel('Count')\nax.set_title('Count by Adoption Speed (with no Name)')\n\nplt.show()\n\n### Figure 1\nfig = plt.figure(figsize=(15,8))\n\nax = fig.add_subplot(121)\nsns.countplot(x=\"AdoptionSpeed\", data=train.loc[train['Description_None'] == 0], palette=\"YlOrRd\", edgecolor=\"black\")\nax.set_xlabel('Adoption Speed')\nax.set_ylabel('Count')\nax.set_title('Count by Adoption Speed (with Description)')\n\nax = fig.add_subplot(122)\nsns.countplot(x=\"AdoptionSpeed\", data=train.loc[train['Description_None'] == 1], palette=\"YlOrRd\", edgecolor=\"black\")\nax.set_xlabel('Adoption Speed')\nax.set_ylabel('Count')\nax.set_title('Count by Adoption Speed (with no Description)')\n\nplt.show()","ff0c30e9":"train['Name'].fillna('None', inplace=True)\ntrain['Description'].fillna('None', inplace=True)\n\ntest['Name_absent'] = test['Name'].isnull()\ntest['Name_absent'] = test['Name_absent'].astype(int)\ntest['Description_None'] = test['Description'].isnull()\ntest['Description_None'] = test['Description_None'].astype(int)\ntest['Name'].fillna('None', inplace=True)\ntest['Description'].fillna('None', inplace=True)","7a2bc010":"# Extract features from description\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\ntfidf_vectorizer = TfidfVectorizer(max_features=100, stop_words='english', use_idf=True)\n\ntfidf_matrix = tfidf_vectorizer.fit_transform(list(train['Description'].values) +\n                                                    list(test['Description'].values))\n\ncols = tfidf_vectorizer.get_feature_names()\ntfidf_train = pd.DataFrame(tfidf_matrix.toarray()[0:train.shape[0],], columns=cols)\ntfidf_test = pd.DataFrame(tfidf_matrix.toarray()[train.shape[0]:,], columns=cols)","9917941d":"train = pd.concat([train, tfidf_train], axis=1)\ntest = pd.concat([test, tfidf_test], axis=1)","dd43d836":"categorical_cols = ['Type', 'Breed1', 'Breed2', 'Gender', 'Color1', 'Color2', 'Color3', 'MaturitySize', 'FurLength',\n                    'Vaccinated', 'Dewormed', 'Sterilized', 'Health', 'State', 'Name_absent', 'Description_None']\n\ncategorical_features_lgbm = []\nfor col in categorical_cols:\n    categorical_features_lgbm.append('name:' + col)\n    train[col] = train[col].astype('category')\n    test[col] = test[col].astype('category')","3440b772":"X_train = train.drop(['Name', 'RescuerID', 'Description', 'PetID', 'AdoptionSpeed'], axis=1)\ny_train = train['AdoptionSpeed']\nX_test = test.drop(['Name', 'RescuerID', 'Description'], axis=1)","253ef98f":"from sklearn.model_selection import KFold\nfrom sklearn.metrics import cohen_kappa_score\nimport lightgbm as lgb\nimport time\n\nparam = {'num_leaves': 38,\n         'min_data_in_leaf': 146, \n         'objective':'multiclass',\n         'num_class': 5,\n         'max_depth': 4,\n         'learning_rate': 0.01,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9980062052116254,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.844212672233457,\n         \"bagging_seed\": 11,\n         \"metric\": 'multi_logloss',\n         \"lambda_l1\": 0.12757257166471625,\n         \"random_state\": 133,\n         \"verbosity\": -1}\n\nfolds = KFold(n_splits=5, shuffle=True, random_state=15)\noof = np.zeros(len(X_train))\nstart = time.time()\nfeature_importance_df = pd.DataFrame()\n\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(X_train.values, y_train.values)):\n    print(\"fold n\u00b0{}\".format(fold_))\n    trn_data = lgb.Dataset(X_train.iloc[trn_idx],\n                           label=y_train.iloc[trn_idx]\n                          )\n    val_data = lgb.Dataset(X_train.iloc[val_idx],\n                           label=y_train.iloc[val_idx]\n                          )\n\n    num_round = 10000\n    clf = lgb.train(param,\n                        trn_data,\n                        10000,\n                        valid_sets = [trn_data, val_data],\n                        verbose_eval=500,\n                        early_stopping_rounds = 200)\n        \n    oof[val_idx] = (pd.DataFrame(clf.predict(X_train.iloc[val_idx], \n                                                     num_iteration=clf.best_iteration)).idxmax(axis=1))\n\nprint(\"CV score: {:<8.5f}\".format(cohen_kappa_score(oof, y_train, weights=\"quadratic\")))","f0e24e99":"p = (pd.DataFrame(clf.predict(X_test.drop(['PetID'], axis=1),\n                              num_iteration=clf.best_iteration)).idxmax(axis=1))\ntest['AdoptionSpeed'] = p\ntest[['PetID', 'AdoptionSpeed']].to_csv(\"submission_lgbm_bayes_optimization.csv\", index=False)","194300e9":"# Feature importance\nfeatures_importance = pd.Series(clf.feature_importance(), index=X_train.columns)\nfeatures_importance = features_importance.sort_values(ascending=False)\ndf = features_importance.to_frame()\ndf['feature'] = df.index\ndf = df.rename(columns={0: 'importance'})\n\nfig = plt.figure(figsize=(15,60))\nax = sns.barplot(x=\"importance\", y=\"feature\", data=df)\nax.set_xlabel('Importance')\nax.set_ylabel('Feature')\nplt.show()","aa348224":"#### Distribution of Count and Adoption Speed by Age :\n \nPets that are not adopted yet (category 4) have slight higher average age when listed compared to the pets who are adopted earlier.","fb0a95ce":"### 2. Data Pre Processing :","9798f847":"#### Adoption Speed by various Categorical Features :\n\nLet us visualize the percentage of pets in various adoption speed for different categorical variables. Cats have a slight higher chance of getting adopted early. Pet with color \"Yellow\" tends to get adopted late. Big and furry ones seem to get adopted faster. The ones who are not vaccinated have a higher chance of getting adopted earlier (quite strange!!!). Pets who are not Sterilized are adopted earlier. There are two states in which around 60% of pets are not yet adopted after 100 days of listing.","865b3f98":"## PetFinder.my Adoption Prediction\n\nInspired from :  https:\/\/www.kaggle.com\/jaseziv83\/extensive-pet-finder-eda","eb6b37f8":"### 3. LighGBM with Bayesian Optimization :\n\nFor the Code of Bayesian Optimization, refer : https:\/\/www.kaggle.com\/fabiendaniel\/hyperparameter-tuning","6d9165c1":"#### Adoption Speed by Photo Amount :\n \nThe average amount of photos for pets which are not yet adopted (category 4) is slightly lower.","00d359fa":"#### Adoption Speed by Name and Description :","dac9b7cf":" ### 1. EDA for training data:\n#### Distribution of Adoption Speed :\n\nVery fet pets are adopted on the day they are listed. There are more dogs in the training data comapred to cat. Cats generally tend to be adopted earlier."}}