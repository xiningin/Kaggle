{"cell_type":{"d12e1c54":"code","8f8b9b15":"code","56abf9e8":"code","d32f4059":"code","92431c35":"code","d9dee2b9":"code","6ca59675":"code","2538c3c2":"code","195ea86d":"code","a430cbde":"code","05b91785":"code","16032213":"code","d08b96da":"code","3edc99d5":"code","0ff77dbb":"code","e138d73d":"code","601bf2ab":"code","55894610":"code","f377fa48":"code","591fcfae":"code","271bc1a0":"code","cd6d3e0b":"code","c4b1235e":"code","971b97be":"code","3f9f0aef":"code","cfd692a6":"code","dbe35b6c":"code","ff84016e":"code","f683ac37":"code","c1c2efe1":"code","2ab556a9":"code","883b957d":"code","477b0ace":"code","b974ed06":"code","3d3badaa":"code","7c2e46ec":"code","5517768c":"code","c08b2eed":"code","2e82217f":"code","6f238be4":"code","2144fd1a":"code","90b6f244":"code","6cac5868":"markdown","5a5adb79":"markdown","f933fcfe":"markdown","ff64c4e2":"markdown","11877e99":"markdown","33a17d8b":"markdown","9ef55dea":"markdown","8fc29a45":"markdown","dfe704f3":"markdown","ce16454e":"markdown","4e08a545":"markdown","dd4044ab":"markdown"},"source":{"d12e1c54":"import pandas as pd\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.tree import DecisionTreeClassifier\nfrom imblearn.combine import SMOTEENN","8f8b9b15":"df=pd.read_csv(\"..\/input\/telco-churn\/tel_churn.csv\")\ndf.head()","56abf9e8":"df=df.drop('Unnamed: 0',axis=1)","d32f4059":"x=df.drop('Churn',axis=1)\nx","92431c35":"y=df['Churn']\ny","d9dee2b9":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)","6ca59675":"model_dt=DecisionTreeClassifier(criterion = \"gini\",random_state = 100,max_depth=6, min_samples_leaf=8)","2538c3c2":"model_dt.fit(x_train,y_train)","195ea86d":"y_pred=model_dt.predict(x_test)\ny_pred","a430cbde":"model_dt.score(x_test,y_test)","05b91785":"print(classification_report(y_test, y_pred, labels=[0,1]))","16032213":"sm = SMOTEENN()\nX_resampled, y_resampled = sm.fit_sample(x,y)","d08b96da":"xr_train,xr_test,yr_train,yr_test=train_test_split(X_resampled, y_resampled,test_size=0.2)","3edc99d5":"model_dt_smote=DecisionTreeClassifier(criterion = \"gini\",random_state = 100,max_depth=6, min_samples_leaf=8)","0ff77dbb":"model_dt_smote.fit(xr_train,yr_train)\nyr_predict = model_dt_smote.predict(xr_test)\nmodel_score_r = model_dt_smote.score(xr_test, yr_test)\nprint(model_score_r)\nprint(metrics.classification_report(yr_test, yr_predict))","e138d73d":"print(metrics.confusion_matrix(yr_test, yr_predict))","601bf2ab":"from sklearn.ensemble import RandomForestClassifier","55894610":"model_rf=RandomForestClassifier(n_estimators=100, criterion='gini', random_state = 100,max_depth=6, min_samples_leaf=8)","f377fa48":"model_rf.fit(x_train,y_train)","591fcfae":"y_pred=model_rf.predict(x_test)","271bc1a0":"model_rf.score(x_test,y_test)","cd6d3e0b":"print(classification_report(y_test, y_pred, labels=[0,1]))","c4b1235e":"sm = SMOTEENN()\nX_resampled1, y_resampled1 = sm.fit_sample(x,y)","971b97be":"xr_train1,xr_test1,yr_train1,yr_test1=train_test_split(X_resampled1, y_resampled1,test_size=0.2)","3f9f0aef":"model_rf_smote=RandomForestClassifier(n_estimators=100, criterion='gini', random_state = 100,max_depth=6, min_samples_leaf=8)","cfd692a6":"model_rf_smote.fit(xr_train1,yr_train1)","dbe35b6c":"yr_predict1 = model_rf_smote.predict(xr_test1)","ff84016e":"model_score_r1 = model_rf_smote.score(xr_test1, yr_test1)","f683ac37":"print(model_score_r1)\nprint(metrics.classification_report(yr_test1, yr_predict1))","c1c2efe1":"print(metrics.confusion_matrix(yr_test1, yr_predict1))","2ab556a9":"# Applying PCA\nfrom sklearn.decomposition import PCA\npca = PCA(0.9)\nxr_train_pca = pca.fit_transform(xr_train1)\nxr_test_pca = pca.transform(xr_test1)\nexplained_variance = pca.explained_variance_ratio_","883b957d":"model=RandomForestClassifier(n_estimators=100, criterion='gini', random_state = 100,max_depth=6, min_samples_leaf=8)","477b0ace":"model.fit(xr_train_pca,yr_train1)","b974ed06":"yr_predict_pca = model.predict(xr_test_pca)","3d3badaa":"model_score_r_pca = model.score(xr_test_pca, yr_test1)","7c2e46ec":"print(model_score_r_pca)\nprint(metrics.classification_report(yr_test1, yr_predict_pca))","5517768c":"import pickle","c08b2eed":"filename = 'model.sav'","2e82217f":"pickle.dump(model_rf_smote, open(filename, 'wb'))","6f238be4":"load_model = pickle.load(open(filename, 'rb'))","2144fd1a":"model_score_r1 = load_model.score(xr_test1, yr_test1)","90b6f244":"model_score_r1","6cac5868":"###### Now we can see quite better results, i.e. Accuracy: 92 %, and a very good recall, precision & f1 score for minority class.\n\n###### Let's try with some other classifier.","5a5adb79":"#### Random Forest Classifier","f933fcfe":"##### With PCA, we couldn't see any better results, hence let's finalise the model which was created by RF Classifier, and save the model so that we can use it in a later stage :)","ff64c4e2":"#### Performing PCA","11877e99":"##### Train Test Split","33a17d8b":"##### Our final model i.e. RF Classifier with SMOTEENN, is now ready and dumped in model.sav, which we will use and prepare API's so that we can access our model from UI.","9ef55dea":"#### Reading csv","8fc29a45":"#### Decision Tree Classifier","dfe704f3":"### Importing Libraries","ce16454e":"###### With RF Classifier, also we are able to get quite good results, infact better than Decision Tree.\n\n###### We can now further go ahead and create multiple classifiers to see how the model performance is, but that's not covered here, so you can do it by yourself :)","4e08a545":"###### As you can see that the accuracy is quite low, and as it's an imbalanced dataset, we shouldn't consider Accuracy as our metrics to measure the model, as Accuracy is cursed in imbalanced datasets.\n\n###### Hence, we need to check recall, precision & f1 score for the minority class, and it's quite evident that the precision, recall & f1 score is too low for Class 1, i.e. churned customers.\n\n###### Hence, moving ahead to call SMOTEENN (UpSampling + ENN)","dd4044ab":"#### Pickling the model"}}