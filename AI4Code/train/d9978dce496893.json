{"cell_type":{"936a63a2":"code","91d9b10e":"code","3bc0d319":"code","75989a62":"code","613e81ed":"code","e34a533d":"code","49bfd49f":"code","40588d00":"code","b97b43ed":"code","27613b76":"code","6f439a38":"code","9703d691":"code","da605801":"code","03387b59":"code","c80e0a38":"code","6177ef30":"code","5e102fb6":"code","e9d38af8":"code","50d4e124":"code","ebed2b0e":"code","2235949c":"code","34eba2d0":"code","734c0b94":"code","adfa6955":"code","96149436":"code","6683934c":"markdown","edc25f6e":"markdown","c7425128":"markdown","6409fb42":"markdown","8288c74d":"markdown","84adde32":"markdown","7f03955d":"markdown","a66cfe44":"markdown","0f62ad85":"markdown","78046b58":"markdown","6f5eaf72":"markdown","45b369da":"markdown","75587114":"markdown","ca0fdfc2":"markdown","4aab0f45":"markdown","e955f99a":"markdown"},"source":{"936a63a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","91d9b10e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom datetime import datetime","3bc0d319":"df = pd.read_csv(\"\/kaggle\/input\/rainfall-data-from-1901-to-2017-for-india\/Rainfall_Data_LL.csv\")\ndf.head()","75989a62":"# basic information about the dataset\ndf.info()","613e81ed":"# number of null values in each column\ndf.isnull().sum()","e34a533d":"df[['SUBDIVISION','ANNUAL']].groupby('SUBDIVISION').mean()","49bfd49f":"df[['SUBDIVISION','ANNUAL']].groupby('SUBDIVISION').mean().sort_values('ANNUAL').iloc[0]","40588d00":"df[['SUBDIVISION','ANNUAL']].groupby('SUBDIVISION').mean().sort_values('ANNUAL').iloc[-1]","b97b43ed":"df[['SUBDIVISION', 'Jan-Feb']].groupby('SUBDIVISION').mean().sort_values('Jan-Feb').iloc[-1]","27613b76":"# only extracted the monthly data\nandaman = df.loc[df['SUBDIVISION'] == 'Andaman & Nicobar Islands'].iloc[:, 2:16]\nandaman.head()","6f439a38":"andaman.info()","9703d691":"sns.displot(x='ANNUAL', data=andaman, kde=True)","da605801":"andaman['ANNUAL'].describe()","03387b59":"andaman[andaman['ANNUAL'] == andaman['ANNUAL'].max()]","c80e0a38":"andaman[andaman['ANNUAL'] == andaman['ANNUAL'].min()]","6177ef30":"df1 = pd.melt(andaman, id_vars='YEAR', value_vars=andaman.columns[1:-1]) ## This will melt the data\ndf1.head()","5e102fb6":"df1.tail()","e9d38af8":"df1['Date'] = df1['variable'] + ' ' + df1['YEAR'].astype(str)  \ndf1.loc[:,'Date'] = df1['Date'].apply(lambda x : datetime.strptime(x, '%b %Y')) ## Converting String to datetime object\ndf1.head()","50d4e124":"df1.columns=['Year', 'Month', 'Rainfall', 'Date']\ndf1.sort_values(by='Date', inplace=True) ## To get the time series right.\nfig = go.Figure(layout = go.Layout(yaxis=dict(range=[0, df1['Rainfall'].max()+1])))\nfig.add_trace(go.Scatter(x=df1['Date'], y=df1['Rainfall']), )\nfig.update_layout(title='Rainfall Throught Timeline:',\n                 xaxis_title='Time', yaxis_title='Rainfall in mm')\nfig.update_layout(xaxis=go.layout.XAxis(\n    rangeselector=dict(\n        buttons=list([dict(label=\"Whole View\", step=\"all\"),\n                      dict(count=1,label=\"One Year View\",step=\"year\",stepmode=\"todate\")                      \n                     ])),\n        rangeslider=dict(visible=True),type=\"date\")\n)\nfig.show()","ebed2b0e":"fig = px.box(df1, 'Month', 'Rainfall')\nfig.update_layout(title='Minimum, Maximum and Median Monthly Rainfall.')\nfig.show()","2235949c":"from sklearn.cluster import KMeans\nsse = []\ntarget = df1['Rainfall'].to_numpy().reshape(-1,1)\nnum_clusters = list(range(1, 10))\n\nfor k in num_clusters:\n    km = KMeans(n_clusters=k)\n    km.fit(target)\n    sse.append(km.inertia_)\n\nfig = go.Figure(data=[\n    go.Scatter(x = num_clusters, y=sse, mode='lines'),\n    go.Scatter(x = num_clusters, y=sse, mode='markers')\n])\n\nfig.update_layout(title=\"Evaluation on number of clusters:\",\n                 xaxis_title = \"Number of Clusters:\",\n                 yaxis_title = \"Sum of Squared Distance\",\n                 showlegend=False)\nfig.show()","34eba2d0":"km = KMeans(3)\nkm.fit(df1['Rainfall'].to_numpy().reshape(-1,1))\ndf1.loc[:,'Rainfall Labels'] = km.labels_\nfig = px.scatter(df1, 'Date', 'Rainfall', color='Rainfall Labels')\nfig.update_layout(title = \"Rainfall clusters.\",\n                 xaxis_title=\"Date\", yaxis_title=\"Rainfall\")\nfig.show()","734c0b94":"fig = px.histogram(x=df1['Rainfall'], nbins=200, histnorm='density')\nfig.update_layout(title='Frequency chart of rainfall readings:',\n                 xaxis_title='Rainfall', yaxis_title='Count')","adfa6955":"fig = px.line(df1, 'Year', 'Rainfall', facet_col='Month', facet_col_wrap=4)\nfig.update_layout(title='Monthly rainfall throught history:')\nfig.show()","96149436":"## I am using decision tree regressor for prediction as the data does not actually have a linear trend.\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.metrics import r2_score \nfrom sklearn.linear_model import LinearRegression\n\ndf2 = df1[['Year', 'Month', 'Rainfall']].copy()\ndf2 = pd.get_dummies(df2)\ny = df2[['Rainfall']]\nx = df2.drop(columns='Rainfall')\n\nlr = LinearRegression()\ntrain_x, test_x, train_y, test_y = train_test_split(x,y,test_size=0.3)\nlr.fit(train_x, train_y)\npred = lr.predict(test_x)\nr2_score(test_y, pred)","6683934c":"## Exploratory Data Analysis","edc25f6e":"## Distribution of Annual rainfall\n","c7425128":"### Insights:\n- February has the lowest rainfall\n- June has the maximum rainfall\n- Rainfall in March vary the lowest as it has lowest standard deviation","6409fb42":"## Which year received the maximum and minimum rainfall?","8288c74d":"## Rainfall throughout 1901 - 2017","84adde32":"### Average Rainfall per Subdivision","7f03955d":"## Import the Libraries","a66cfe44":"## Subdivision with Lowest Rainfall","0f62ad85":"Now, we'll make an attribute that would contain date (month, year). So that we could get rainfall values with the timeline.","78046b58":"## Import the Dataset","6f5eaf72":"## That brings us to the end of this project. You can connect with me on Twitter [@PiyalBanik](https:\/\/twitter.com\/PiyalBanik)","45b369da":"## Statistical Information about the region","75587114":"## Subdivision that receives heighest rainfall in winter","ca0fdfc2":"## Subdivision with Heighest Rainfall","4aab0f45":"## Andaman & Nicobar Islands\nFor the rest of my analysis, I have chosen Andaman & Nicobar Islands","e955f99a":"Cluster size of 3 is the ideal choice of k"}}