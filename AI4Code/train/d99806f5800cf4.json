{"cell_type":{"91d053a4":"code","5b07f609":"code","082f26a5":"code","4823f424":"code","dfd09713":"code","d72d0b5f":"code","eeb7245b":"code","7bc078a3":"markdown","066db89a":"markdown","3a478fdc":"markdown","c5765e32":"markdown","285d0902":"markdown"},"source":{"91d053a4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.dates as mdates\nfrom sklearn.metrics import mean_squared_log_error\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom datetime import datetime, timedelta\nfrom pandas.tseries.offsets import MonthEnd\nimport warnings\nwarnings.filterwarnings('ignore')","5b07f609":"df = pd.read_csv('..\/input\/bri-data-hackathon-cr-optimization\/train.csv', index_col=[0], parse_dates=[0])","082f26a5":"# missing dates\nstart = df.index[0]\nend = df.index[-1]\nll = pd.date_range(start, end).tolist()\nmissing = [(i,j) for i,j in enumerate(ll) if j not in df.index]\nmissing","4823f424":"# data imputation\nfor d in missing:\n    # get middle value between 2 data\n    tmp = (df.iloc[d[0]] + df.iloc[d[0]-1]) \/ 2\n    # give timestamp for the index\n    tmp.name = d[1]\n    # append new data into the dataframe\n    df = df.append(tmp)\ndf.sort_index(inplace=True)","dfd09713":"# SARIMA model with cross-validation\ndef SARIMA_CV(df, target, order, seasonal_order):\n    \n    y = df[target]\n    errors = []\n    for month in [7, 8, 9]:\n        start = datetime(2020, month, 1)\n        end = start + MonthEnd(1)\n\n        # split data\n        y_tr = y.loc[:start-timedelta(1)]\n        y_val = y.loc[start:end]\n                \n        # train Seasonal ARIMA Model\n        model = SARIMAX(y_tr, order=order, seasonal_order=seasonal_order)\n        fit = model.fit()\n\n        # forecast\n        y_pred = fit.forecast(len(y_val))\n\n        # error\n        err = RMSLE(y_val, y_pred)\n        errors.append(err)\n\n        print(f'\\n Validation on Month {month}:')\n        print(f'\\t Number of Train Data: {len(y_tr)}')\n        print(f'\\t Number of Validation Data: {len(y_val)}')\n        print(f'\\t RMSLE: {err}')\n\n        fig, ax = plt.subplots(figsize=(16,3))\n        months = mdates.MonthLocator()\n        for name, dat, c in zip(['train', 'valid', 'pred'], [y_tr, y_val, y_pred], ['b', 'g', 'r']):\n            ax.plot(dat, c=c, label=name)\n        ax.xaxis.set_major_locator(months)\n        plt.legend()\n        plt.grid()\n        plt.show()\n    \n    print(f'\\n Mean RMSLE: {np.mean(errors)}')\n    print(f' Std RMSLE: {np.std(errors)}')\n\n    \n    \n# root mean square logarithmic error\ndef RMSLE(y_true, y_pred):\n    MSLE = mean_squared_log_error(y_true, y_pred)\n    return np.sqrt(MSLE)","d72d0b5f":"SARIMA_CV(df, target='kas_kantor', order=(2,1,2), seasonal_order=(2,1,1,7))","eeb7245b":"SARIMA_CV(df, target='kas_echannel', order=(5,2,5), seasonal_order=(1,0,0,7))","7bc078a3":"## <p style='color:blue'> Kas Kantor <\/p>","066db89a":"# Load Data","3a478fdc":"## <p style='color:blue'> Kas echannel <\/p>","c5765e32":"# Data Preprocessing","285d0902":"# Cross-Validation"}}