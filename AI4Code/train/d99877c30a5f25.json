{"cell_type":{"1fd9eb9a":"code","3406a4ad":"code","37832c1a":"code","daab5346":"code","9ca61715":"code","524ca99e":"code","28689968":"code","f47f2ebc":"code","4112419c":"code","eab8ee34":"code","24384a6e":"code","2c6ae5d5":"code","531c8d56":"code","8e6a6c2b":"code","8b85f89c":"code","ac4df0e0":"code","90cace22":"code","d64eed54":"code","bb36c7a3":"code","2a39d51c":"code","5b3ff5ec":"code","9414f07f":"code","e2843d9e":"code","3d923e41":"markdown","9e5593ae":"markdown","c440c1bb":"markdown","f8cf0780":"markdown","ed9bc731":"markdown","4b3d6c85":"markdown","6b9d5357":"markdown","cdc0a4bc":"markdown","16a4636e":"markdown","605abe6d":"markdown","8dc9a95b":"markdown","e22bf49c":"markdown","e049e5fd":"markdown","fa554207":"markdown","8e7cc7ec":"markdown","573fcc69":"markdown","0946158e":"markdown","30dda1ff":"markdown","585c5a77":"markdown"},"source":{"1fd9eb9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)","3406a4ad":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","37832c1a":"train.sample(5)","daab5346":"dataset = pd.concat([train.drop([\"SalePrice\"], axis=1), test]) \ndataset=pd.DataFrame(dataset)","9ca61715":"dataset.sample(5)","524ca99e":"d=pd.DataFrame(dataset.isnull().sum())\n\nprint(\"Total no. of rows: 2919 \\nCount of missing values: \\n\")\n\nfor i in range(len(d)):\n    if d.iloc[i,0]>0:\n        print(d.index[i], \" \", d.iloc[i,0])","28689968":"#MSZoning\ndataset[\"MSZoning\"].fillna(\"RL\", inplace=True)\n#Utilities\ndataset[\"Utilities\"].fillna(dataset[\"Utilities\"].mode, inplace=True)\n#Exterior1st and Exterior2nd\ndataset[\"Exterior1st\"].fillna(dataset[\"Exterior1st\"].mode, inplace=True)\ndataset[\"Exterior2nd\"].fillna(dataset[\"Exterior2nd\"].mode, inplace=True)\n#Electrical\ndataset[\"Electrical\"].fillna(dataset[\"Electrical\"].mode, inplace=True)\n#BsmtFullBath and BsmtHalfBath\ndataset[\"BsmtFullBath\"].fillna(dataset[\"BsmtFullBath\"].mode, inplace=True)\ndataset[\"BsmtHalfBath\"].fillna(dataset[\"BsmtHalfBath\"].mode, inplace=True)\n#KitchenQual\ndataset[\"KitchenQual\"].fillna(dataset[\"KitchenQual\"].mode, inplace=True)\n#Functional\ndataset[\"Functional\"].fillna(dataset[\"Functional\"].mode, inplace=True)\n#GarageCars\ndataset[\"GarageCars\"].fillna(dataset[\"GarageCars\"].mode, inplace=True)\n#SaleType\ndataset[\"SaleType\"].fillna(dataset[\"SaleType\"].mode, inplace=True)","f47f2ebc":"#BsmtUnfSF and TotalBsmtSF\ndataset[\"BsmtUnfSF\"].fillna(dataset[\"BsmtUnfSF\"].mean(),inplace=True)\ndataset[\"TotalBsmtSF\"].fillna(dataset[\"TotalBsmtSF\"].mean(),inplace=True)\n\n#BsmtFinSF1 and BsmtFinSF2\ndataset[\"BsmtFinSF1\"].fillna(0, inplace=True)\ndataset[\"BsmtFinSF2\"].fillna(0, inplace=True)\n#GarageArea\ndataset[\"GarageArea\"].fillna(419.49, inplace=True) #replacing it with the mean of detached garage area","4112419c":"#MasVnrType\ndataset.MasVnrType.fillna(\"None\", inplace=True)\n#MasVnrArea\ndataset.MasVnrArea.fillna(0, inplace=True)\n#BsmtQual\ndataset.BsmtQual.fillna(\"NA\", inplace=True)\n#BsmtCond\ndataset.BsmtCond.fillna(\"NA\", inplace=True)\n\n# For the properties without basement, we will set the value to no basement, and for others, to no exposure\n#BsmtExposure\ndataset.BsmtExposure.fillna(dataset.BsmtUnfSF, inplace=True)\ndataset.BsmtExposure.replace({0.0:\"NA\",936.0:\"No\", 1595.0:\"No\", 560.7721041809458:\"No\", 725.0:\"No\" }, inplace=True)\n\n#BsmtFinType1\ndataset.BsmtFinType1.loc[660]=dataset.BsmtFinType1.mode()\ndataset.BsmtFinType1.fillna(\"NA\",inplace=True)\n\n#BsmtFinType2\ndataset.BsmtFinType2.loc[332]=dataset.BsmtFinType2.mode()\ndataset.BsmtFinType2.fillna(\"NA\",inplace=True)\n\n#GarageType   \ndataset.GarageType.fillna(\"NA\", inplace=True)\n\n#2127,2577 - Garages' Id present\n#Garages can be expected to be built around the same time other garages were built in the same neighbourhood \n#dataset[[\"Neighborhood\",\"GarageType\"]].iloc[[2127,2577]]\n\ndataset[((dataset.Neighborhood==\"OldTown\") | (dataset.Neighborhood== \"IDOTRR\")) & (dataset.GarageType== \"Detchd\")]\n\n#GarageYrBlt  \ndataset.GarageYrBlt.loc[2127] = 1950\ndataset.GarageYrBlt.loc[2577] = 1946\ndataset.GarageYrBlt.fillna(0, inplace=True)\n\n#GarageFinish \ndataset.GarageFinish.loc[2127] = \"Unf\"\ndataset.GarageFinish.loc[2577] = \"Unf\"\ndataset.GarageFinish.fillna(\"NA\", inplace=True)\n\n#GarageQual   \ndataset.GarageQual.loc[2127] = \"TA\"\ndataset.GarageQual.loc[2577] = \"TA\"\ndataset.GarageQual.fillna(\"NA\", inplace=True)\n\n#GarageCond\ndataset.GarageCond.loc[2127] = \"TA\"\ndataset.GarageCond.loc[2577] = \"TA\"\ndataset.GarageCond.fillna(\"NA\", inplace=True)\n\n#LotFrontage\ndataset.LotFrontage.fillna(0,inplace=True)\n\n#FireplaceQu\ndataset.FireplaceQu.fillna(\"NA\",inplace=True)\n\n#PoolQC\ndataset.PoolQC.fillna(\"NA\",inplace=True)\n\n#Fence\ndataset.Fence.fillna(\"NA\",inplace=True)\n\n#Alley\ndataset.Alley.fillna(\"NA\",inplace=True)\n\n#MiscFeature\ndataset.MiscFeature.fillna(\"NA\",inplace=True)","eab8ee34":"d=pd.DataFrame(dataset.isnull().sum())\n\nprint(\"Total no. of rows: 2919 \\nCount of missing values: \\n\")\n\nfor i in range(len(d)):\n    if d.iloc[i,0]>0:\n        print(d.index[i], \" \", d.iloc[i,0])","24384a6e":"dataset[\"TotalArea\"] = dataset[\"GrLivArea\"]+dataset[\"TotalBsmtSF\"]+dataset[\"1stFlrSF\"]+dataset[\"2ndFlrSF\"]+dataset[\"WoodDeckSF\"]+dataset[\"OpenPorchSF\"]+dataset[\"PoolArea\"]+dataset[\"ScreenPorch\"]+dataset[\"EnclosedPorch\"]+dataset[\"3SsnPorch\"]+dataset[\"GarageArea\"]+dataset[\"LowQualFinSF\"]\ndataset[\"TotalBath\"] = dataset[\"FullBath\"] + dataset[\"HalfBath\"]","2c6ae5d5":"#Combining x_train and y_train after imputation of missing values\nimgg =pd.concat([dataset.iloc[:len(train),], train.SalePrice],axis=1)","531c8d56":"sns.factorplot(y=\"Neighborhood\", x=\"SalePrice\", hue=\"MSZoning\", data=imgg)","8e6a6c2b":"dataset.ExterQual.replace({\"Ex\":5,\"Gd\":4,\"TA\":3,\"Fa\":2,\"Po\":1 }, inplace=True)\ndataset.ExterCond.replace({\"Ex\":5,\"Gd\":4,\"TA\":3,\"Fa\":2,\"Po\":1 }, inplace=True)\ndataset.BsmtQual.replace({\"Ex\": 5,\"Gd\" :4,\"TA\" :3,\"Fa\" :2,\"Po\" :1,\"NA\" :0 }, inplace=True)\ndataset.BsmtCond.replace({\"Ex\":5,\"Gd\":4,\"TA\":3,\"Fa\":2,\"Po\":1,\"NA\":0 }, inplace=True)\ndataset.BsmtExposure.replace({\"Gd\":5,\"Av\":4,\"Mn\":3,\"No\":0,\"NA\":0 }, inplace=True)\ndataset.HeatingQC.replace({\"Ex\":5,\"Gd\":4,\"TA\":3,\"Fa\":2,\"Po\":1 }, inplace=True)\ndataset.CentralAir.replace({\"Y\":1,\"N\":0}, inplace=True)\ndataset.KitchenQual.replace({\"Ex\":5,\"Gd\":4,\"TA\":3,\"Fa\":2,\"Po\":1 }, inplace=True)\ndataset.FireplaceQu.replace({\"Ex\":5,\"Gd\":4,\"TA\":3,\"Fa\":2,\"Po\":1,\"NA\":0 }, inplace=True)\ndataset.GarageQual.replace({\"Ex\":5,\"Gd\":4,\"TA\":3,\"Fa\":2,\"Po\":1,\"NA\":0 }, inplace=True)\ndataset.GarageCond.replace({\"Ex\":5,\"Gd\":4,\"TA\":3,\"Fa\":2,\"Po\":1,\"NA\":0 }, inplace=True)\ndataset.PoolQC.replace({\"Ex\":5,\"Gd\":4,\"TA\":3,\"Fa\":2,\"NA\":0 }, inplace=True)\ndataset.PavedDrive.replace({\"Y\":1,\"N\":0, \"P\":0.5}, inplace=True)","8b85f89c":"dataset[[\"MSZoning-C\", \"MSZoning-FV\", \"MSZoning-RH\", \"MSZoning-RL\", \"MSZoning-RM\"]]=pd.get_dummies(dataset.MSZoning)\ndataset[[\"Street-Gravel\", \"Street-Pavement\"]] = pd.get_dummies(dataset.Street)\ndataset[[\"Alley-Gravel\", \"Alley-NA\", \"Alley-Pavel\"]] = pd.get_dummies(dataset.Alley)\ndataset[['LotSh - IR1', 'LotSh - IR2', 'LotSh - IR3','LotSh - Reg']] = pd.get_dummies(dataset.LotShape)\ndataset[[\"LandC - Bnk\", \"LandC - HLS\", \"LandC - Low\", \"LandC-Lvl\"]] = pd.get_dummies(dataset.LandContour)\ndataset[[\"LandS - Gtl\",\"LandS - Mod\",\"LandS - Sev\"]] = pd.get_dummies(dataset.LandSlope)\ndataset[[\"Lotconfig - Corner\", \"Lotconfig - CulDSac\", \"Lotconfig - FR2\", \"Lotconfig - FR3\", \"Lotconfig - Inside\"]] = pd.get_dummies(dataset.LotConfig)\ndataset[[\"E1 - AsbShng\",\"E1 - AsphShn\",\"E1 - BrkComm\",\"E1 - BrkFace\",\"E1 - CBlock\",\"E1 - CemntBd\",\"E1 - HdBoard\",\"E1 - ImStucc\",\"E1 - MetalSd\",\"E1 - Plywood\",\"E1 - Stone\",\"E1 - Stucco\",\"E1 - VinylSd\",\"E1 - Wd Sdng\"]] = pd.get_dummies(dataset.Exterior1st.astype('str')).iloc[:,[1,2,3,4,5,6,7,8,9,10,11,12,13,14]]\ndataset[[\"E2 - AsbShng\",\"E2 - AsphShn\",\"E2 - BrkComm\",\"E2 - BrkFace\",\"E2 - CBlock\",\"E2 - CemntBd\",\"E2 - HdBoard\",\"E2 - ImStucc\",\"E2 - MetalSd\",\"E2 - Other\",\"E2 - Plywood\",\"E2 - Stone\",\"E2 - Stucco\",\"E2 - VinylSd\",\"E2 - Wd Sdng\",\"E2 - WdShing\"]] = pd.get_dummies(dataset.Exterior2nd.astype('str')).iloc[:,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]]\ndataset[['BldgType-1Fam', 'BldgType2fmCon', 'BldgTypeDuplex', 'BldgTypeTwnhsE', 'BldgTypeTwnhs']] = pd.get_dummies(dataset.BldgType)\ndataset[['RoofStyle-Flat','RoofStyle-Gable', 'RoofStyle-Gambrel', 'RoofStyle-Hip', 'RoofStyle-Mansard', 'RoofStyle-Shed']] = pd.get_dummies(dataset.RoofStyle)\ndataset[['RoofMat - ClyTile', 'RoofMat - CompShg', 'RoofMat - Membran', 'RoofMat - Metal', 'RoofMat - Roll', 'RoofMat - Tar&Grv', 'RoofMat - WdShake', 'RoofMat - WdShngl']]  = pd.get_dummies(dataset.RoofMatl)\ndataset[['Foundation - PConc', 'Foundation - CBlock', 'Foundation - BrkTil', 'Foundation - Wood', 'Foundation - Slab', 'Foundation - Stone']] = pd.get_dummies(dataset.Foundation)\ndataset[['Vnr - BrkFace', 'Vnr - BrkCmn', 'Vnr - Stone', 'Vnr - None']] = pd.get_dummies(dataset.MasVnrType)\ndataset[['BsmtFinType2-ALQ', 'BsmtFinType2-BLQ', 'BsmtFinType2-GLQ', 'BsmtFinType2-LwQ', 'BsmtFinType2-NA', 'BsmtFinType2-Rec', 'BsmtFinType2-Unf']] = pd.get_dummies(dataset.BsmtFinType2)\ndataset[['BsmtFinType1-ALQ', 'BsmtFinType1-BLQ', 'BsmtFinType1-GLQ', 'BsmtFinType1-LwQ', 'BsmtFinType1-NA', 'BsmtFinType1-Rec', 'BsmtFinType1-Unf']] = pd.get_dummies(dataset.BsmtFinType1)\ndataset[[\"Elec - FuseA\", \"Elec - FuseF\", \"Elec - FuseP\", \"Elec - Mix\", \"Elec - SBrkr\"]] = pd.get_dummies(dataset.Electrical.astype('str')).iloc[:,[1,2,3,4,5]]\ndataset[['Heating-Floor', 'HeatingGasA', 'GasW', 'Grav', 'OthW', 'Wall']] = pd.get_dummies(dataset.Heating)\ndataset[['GarageType - 2Types', 'GarageType - Attchd', 'GarageType - Basment', 'GarageType - BuiltIn', 'GarageType - CarPort', 'GarageType - Detchd',\"GarageType - NA\"]] = pd.get_dummies(dataset.GarageType)#check\ndataset[['GarageFin - Fin', 'GarageFin - NA','GarageFin - RFn', 'GarageFin - Unf']] = pd.get_dummies(dataset.GarageFinish)\ndataset[[\"Func - Maj1\",\"Func - Maj2\",\"Func - Min1\",\"Func - Min2\",\"Func - Mod\",\"Func - Sev\",\"Func - Typ\"]] = pd.get_dummies(dataset.Functional.astype('str')).iloc[:,[1,2,3,4,5,6,7]]    \ndataset[['Sale - Abnorml', 'Sale - AdjLand', 'Sale - Alloca','Sale - Family', 'Sale - Normal', 'Sale - Partial']] = pd.get_dummies(dataset.SaleCondition)\ndataset[[\"Util-All\"]]=pd.get_dummies(dataset.Utilities.astype('str')).iloc[:,1]\ndataset[['C1-Artery', 'C1-Feedr', 'C1-Norm', 'C1-PosA', 'C1-PosN', 'C1-RRAe', 'C1-RRAn', 'C1-RRNe', 'C1-RRNn']] = pd.get_dummies(dataset.Condition1)\ndataset[['C2-Artery', 'C2-Feedr', 'C2-Norm', 'C2-PosA', 'C2-PosN', 'C2-RRAe', 'C2-RRAn', 'C2-RRNn']] = pd.get_dummies(dataset.Condition2)\ndataset[['HS - 1.5Fin', 'HS - 1.5Unf', 'HS - 1Story', 'HS - 2.5Fin', 'HS - 2.5Unf', 'HS - 2Story', 'HS - SFoyer', 'HS - SLvl']] = pd.get_dummies(dataset.HouseStyle)\ndataset[[\"Msc-Gar2\", \"Msc-NA\", \"Msc-Othr\", \"Msc-Shed\", \"Msc-TenC\"]]=pd.get_dummies(dataset.MiscFeature)\ndataset[['Blmngtn', 'Blueste', 'BrDale', 'BrkSide', 'ClearCr', 'CollgCr','Crawfor', 'Edwards', 'Gilbert', 'IDOTRR', 'MeadowV', 'Mitchel','NAmes', 'NPkVill', 'NWAmes', 'NoRidge', 'NridgHt', 'OldTown', 'SWISU','Sawyer', 'SawyerW', 'Somerst', 'StoneBr', 'Timber', 'Veenker']] = pd.get_dummies(dataset.Neighborhood)\ndataset[[\"SaleType-COD\", \"SaleType-CWD\",\"SaleType-Con\",\"SaleType-ConLD\",\"SaleType-ConLI\",\"SaleType-ConLw\",\"SaleType-New\",\"SaleType-Oth\",\"SaleType-WD\"]]=pd.get_dummies(dataset.SaleType.astype('str')).iloc[:,[1,2,3,4,5,6,7,8,9]]\ndataset.drop([\"MSZoning\",\"Street\",\"Alley\",\"LotShape\",\"LandContour\", \"Fence\", \"Electrical\", \"Functional\", \"MiscFeature\", \"Condition1\", \"Condition2\", \"HouseStyle\", \"LandSlope\",\"LotConfig\",\"BldgType\",\"RoofStyle\",\"Foundation\",\"RoofMatl\",\"MasVnrType\",\"BsmtFinType1\",\"BsmtFinType2\",\"Heating\",\"GarageFinish\",\"SaleCondition\",\"GarageType\",\"Exterior1st\",\"Exterior2nd\", \"Neighborhood\", \"Utilities\",\"SaleType\"], axis=1,inplace=True)","ac4df0e0":"#Import current year\nfrom datetime import date\nyr = date.today().year\n\ndataset[\"Yrs_occ\"] = dataset.YrSold - dataset.YearBuilt\ndataset[\"Blt_age\"] = dataset.YearBuilt - 1900\ndataset[\"Grg_age\"] = dataset.GarageYrBlt - 1900\ndataset[\"Remod_age\"] = dataset.YearRemodAdd - 1900\ndataset[\"Sold_age\"] = dataset.YrSold - 1900\n\ndataset.drop([\"YearBuilt\",\"GarageYrBlt\",\"YearRemodAdd\",\"YrSold\"], axis=1, inplace=True)","90cace22":"x_train = dataset.iloc[:len(train),]\ny_train = train[\"SalePrice\"]\ndatas =pd.concat([y_train, x_train], axis=1) \n\nx_test = dataset.iloc[len(train):,]","d64eed54":"dw=(pd.DataFrame(x_train.corrwith(y_train)))\ndw.columns=[\"SalePrice\"]\ndw=dw[abs(dw.SalePrice)>0.11]\ndw.sort_values([\"SalePrice\"], ascending=False).style.background_gradient(cmap=\"RdBu\")","bb36c7a3":"x_train = x_train[dw.index]\nx_test = x_test[dw.index]","2a39d51c":"from rgf.sklearn import RGFRegressor\nimport xgboost as xgb\nfrom catboost import CatBoostRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import StackingRegressor\nfrom sklearn.model_selection import train_test_split\n\nestimators =  [('xgb',xgb.XGBRegressor(n_estimators  = 750,learning_rate = 0.02, max_depth = 5)),\n               ('cat',CatBoostRegressor(loss_function='RMSE', verbose=False)),\n               ('RGF',RGFRegressor(max_leaf=500, algorithm=\"RGF_Sib\", test_interval=100, loss=\"LS\"))]\n\nensemble = StackingRegressor(estimators      =  estimators,\n                             final_estimator =  RandomForestRegressor())\n\n# Fit ensemble using cross-validation\nX_tr, X_te, y_tr, y_te = train_test_split(x_train,y_train)\nensemble.fit(X_tr, y_tr).score(X_te, y_te)\n\n# Prediction\npredictions = ensemble.predict(x_test)","5b3ff5ec":"from sklearn.model_selection import cross_val_score\nprint(pd.DataFrame(cross_val_score(xgb.XGBRegressor(n_estimators  = 750,learning_rate = 0.02, max_depth = 5), X_tr, y_tr, scoring = 'neg_mean_squared_error')).mean())\nprint(pd.DataFrame(cross_val_score(CatBoostRegressor(loss_function='RMSE', verbose=False), X_tr, y_tr, scoring = 'neg_mean_squared_error')).mean())\nprint(pd.DataFrame(cross_val_score(RGFRegressor(max_leaf=500, algorithm=\"RGF_Sib\", test_interval=100, loss=\"LS\"), X_tr, y_tr, scoring = 'neg_mean_squared_error')).mean())\n","9414f07f":"m = CatBoostRegressor(loss_function='RMSE', verbose=False)\nm.fit(X_tr, y_tr)\npredictions = m.predict(x_test)                ","e2843d9e":"output = pd.DataFrame({\"Id\":test.Id, \"SalePrice\":predictions})\noutput.to_csv('submission.csv', index=False)","3d923e41":"Splitting the training set for testing models","9e5593ae":"### Calculating age factors of the house","c440c1bb":"### Replacing the numerical variables:","f8cf0780":"## Data visualization","ed9bc731":"Combining train and test sets for data wrangling","4b3d6c85":"### Converting certain features to numerical values","6b9d5357":"# Data understanding","cdc0a4bc":"# Data exploration","16a4636e":"Let us first find the no. of missing values:","605abe6d":"# Data import","8dc9a95b":"### Now the data is complete","e22bf49c":"## Splitting test and train sets back and creating new set to prepare model.","e049e5fd":"## First we will impute those columns where n(missing values) <5","fa554207":"Creating two new features","8e7cc7ec":"## Now we need to address the columns with more missing values","573fcc69":"## Let us combine certain features to make them more meaningful","0946158e":"### Replacing the categorical variables:","30dda1ff":"# Creating and testing regression models","585c5a77":"### Encoding categorical to numerical variables"}}