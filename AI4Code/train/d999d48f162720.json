{"cell_type":{"3fee9167":"code","5c10d29e":"code","c2655551":"code","069ded77":"code","6e494cd4":"code","4178274b":"code","fa3a3a5d":"code","08630c21":"code","f564672c":"code","44f8f541":"code","0e5bbb58":"code","a485384d":"code","4977b8e8":"code","7748fdee":"code","f261dda5":"code","e9f92b4b":"code","71ea82fb":"code","beb690a9":"code","82545af9":"code","44e64357":"code","95d137dc":"code","20ef7886":"code","b9662c82":"code","789b987f":"code","c4a44ca5":"code","842746f8":"code","69ee49d4":"code","be3e1a03":"code","708491b4":"code","91e09f47":"code","e92166e3":"code","3c40afce":"code","61730c6b":"code","6f2c5079":"code","38caa7cc":"code","2430c0b2":"code","0ee4b3c2":"code","e2cb8ef2":"code","a61ee34b":"code","e39f24fd":"code","e5bd8133":"code","211f0947":"code","26565616":"code","7bbdf18b":"code","ddd875a1":"code","fc0451d4":"code","52098818":"code","7800681e":"code","45571c52":"code","599978da":"code","167a6902":"code","0fa2cf9c":"code","c022de99":"code","4db93a34":"code","0e32dee7":"code","ae9b11e0":"code","cc19eafb":"code","faa8c4ac":"code","e31aead8":"code","3e18e412":"code","e3649ac3":"code","6b38a7c6":"code","23cdd52b":"code","c96d6a4f":"code","eaa6e636":"code","ce784eed":"code","cb496431":"code","e763bb5a":"code","fe93a136":"code","cb7a57f6":"code","900cc7e4":"code","3e34ab4f":"code","8503a3b7":"code","e580277c":"code","f71b3caf":"code","9cfe7f1c":"code","8efb2f6d":"code","12b2b3cf":"code","cbd1ef1f":"code","b31812bf":"code","18e11282":"code","85bd212f":"code","23c724b7":"code","13317a32":"code","1a81a3ac":"code","172386fd":"code","cf6f5840":"code","afe61aca":"code","182e0e32":"code","2dbfcacb":"code","40c4fb4b":"code","c283145a":"code","b24aa2e3":"code","60442221":"code","ee07c6b5":"code","d5ac58f6":"code","9555aceb":"code","b00e724a":"code","bb8ad4af":"code","6f9680b4":"code","cd5b79ca":"code","597d45a5":"code","21882a07":"code","e296aa9b":"code","4ef64823":"code","dd951896":"code","0a4234bd":"code","c7468ae5":"code","4d8f448b":"code","45cf4087":"code","1b9d8f9f":"code","48b43f25":"code","7e062665":"code","2a99b13a":"code","412bd999":"code","c97b3972":"code","e13be61e":"code","63e4590e":"code","c4d3d396":"code","bd72ff9a":"code","aa862453":"code","646bcb4f":"code","48cf4afa":"code","42b7ebfc":"code","e86070d4":"code","bb6c8257":"code","12a72a7c":"code","3b20b887":"code","09247ebc":"code","1c6b4ea6":"code","7ac6941b":"code","83fde867":"code","c6408308":"code","25c40348":"code","431d5705":"code","14a1fd99":"code","890363d5":"code","2656d629":"code","f31912b9":"code","b28fd274":"code","d708460b":"code","a8e821b5":"code","62ab0d02":"markdown","8c36c19d":"markdown","670eb2d9":"markdown","d8909d76":"markdown","add332bc":"markdown","0903660e":"markdown","96f78094":"markdown","00a9d6aa":"markdown","7c9f2d98":"markdown","5b43fa04":"markdown","69f15bf9":"markdown","94683eb6":"markdown","607e8ef6":"markdown","3b971d25":"markdown","c41d954d":"markdown","06ea8466":"markdown","cc2887c4":"markdown","8a183237":"markdown","6a8a936d":"markdown","e84a540a":"markdown","1048960c":"markdown","104abcd2":"markdown","f9c3953c":"markdown","88276878":"markdown","a3d82874":"markdown","f2cb49cf":"markdown","75ba4ad1":"markdown","5c2e30d8":"markdown","b841bed8":"markdown","ff1eb30e":"markdown","b2f96818":"markdown","195c9a03":"markdown","80174da0":"markdown"},"source":{"3fee9167":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.pyplot import xticks\n%matplotlib inline\n\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn import metrics\nfrom sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import precision_recall_curve\n\n\npd.set_option('display.max_columns',125)\npd.set_option('display.max_rows',200)","5c10d29e":"leads=pd.read_csv('..\/input\/leads-scoring\/Lead Scoring.csv')","c2655551":"leads.head()","069ded77":"leads.shape","6e494cd4":"leads.info()","4178274b":"leads.describe()","fa3a3a5d":"#taking leads dataframe backup\n\nleads_backup=leads.copy()","08630c21":"# considering Lead number as a unique lead code removing duplicate rows\nleads=leads.drop_duplicates(subset='Lead Number')\n#no duplicates rows found","f564672c":"# because seclect is just a default value, replacing all the selects with NaN.\n\nleads.replace(to_replace=\"Select\",value=np.nan,inplace=True)\nleads.head()","44f8f541":"leads.loc[round(leads.isnull().sum(axis=1)\/len(leads.columns)*100,2)>50,:]\n\n#there is no row with more than 50% missing values","0e5bbb58":"leads.columns","a485384d":"# according to data dictonary columns ['Tags','Lead Quality','Lead Profile','Asymmetrique Activity Index',\n#       'Asymmetrique Profile Index', 'Asymmetrique Activity Score',\n#       'Asymmetrique Profile Score'] are recorded by Sales person based on intusion\n# can't keep variables based on intution so dropping these\nleads=leads.drop(['Tags','Lead Quality','Lead Profile','Asymmetrique Activity Index',\n       'Asymmetrique Profile Index', 'Asymmetrique Activity Score',\n       'Asymmetrique Profile Score'],axis=1)","4977b8e8":"# just to be sure checking null values\nround((leads.isnull().sum()\/leads.shape[0])*100,2)","7748fdee":"# dropping variables with greater than 45% null values\nleads=leads.drop(leads.loc[:,list(round((leads.isnull().sum()\/leads.shape[0])*100,2)>=45)].columns,1)","f261dda5":"# null values percentage check\nround((leads.isnull().sum()\/leads.shape[0])*100,2)","e9f92b4b":"# Checking unique counts in columns wise\nleads.nunique().sort_values()","71ea82fb":"#checking the unique counts of individual columns with 1 unique values or more\n\nprint(round(leads['Receive More Updates About Our Courses'].value_counts()\/leads.shape[0]*100,2))\nleads['Receive More Updates About Our Courses'].value_counts().plot.bar()\nplt.show()\n\n# all of people do not want to Receive More Updates About Our Courses","beb690a9":"print(round(leads['I agree to pay the amount through cheque'].value_counts()\/leads.shape[0]*100,2))\nleads['I agree to pay the amount through cheque'].value_counts().plot.bar()\nplt.show()\n# all of the people did'nt see the ad in search","82545af9":"print(round(leads.Magazine.value_counts()\/leads.shape[0]*100,2))\nleads.Magazine.value_counts().plot.bar()\nplt.show()\n# all of the people did'nt see the ad in Magazine","44e64357":"print(round(leads['Get updates on DM Content'].value_counts()\/leads.shape[0]*100,2))\nleads['Get updates on DM Content'].value_counts().plot.bar()\nplt.show()\n# all of the people did'nt see the ad in \"Get updates on DM Content\"","95d137dc":"print(round(leads['Update me on Supply Chain Content'].value_counts()\/leads.shape[0]*100,2))\nleads['Update me on Supply Chain Content'].value_counts().plot.bar()\nplt.show()\n# all of the people did'nt see the ad in \"Update me on supply chain content\"","20ef7886":"#checking the unique counts of individual columns with 2 unique values or more\nprint(round(leads.Search.value_counts()\/leads.shape[0]*100,2))\nleads.Search.value_counts().plot.bar()\nplt.show()\n# 99.85% of the people did'nt see the ad in search","b9662c82":"print(round(leads['A free copy of Mastering The Interview'].value_counts()\/leads.shape[0]*100,2))\nleads['A free copy of Mastering The Interview'].value_counts().plot.bar()\nplt.show()\n#about 30% of people wants free copy of Mastering The Interview","789b987f":"print(round(leads.Newspaper.value_counts()\/leads.shape[0]*100,2))\nleads.Newspaper.value_counts().plot.bar()\nplt.show()\n# only 0.01 % people saw ad in newspaper","c4a44ca5":"print(round(leads['Digital Advertisement'].value_counts()\/leads.shape[0]*100,2))\nleads['Digital Advertisement'].value_counts().plot.bar()\nplt.show()\n# only 0.04 % people saw ad in Digital Advertisement","842746f8":"print(round(leads['Through Recommendations'].value_counts()\/leads.shape[0]*100,2))\nleads['Through Recommendations'].value_counts().plot.bar()\nplt.show()\n# only 0.08 % people landed Through Recommendations","69ee49d4":"print(round(leads['Converted'].value_counts()\/leads.shape[0]*100,2))\nleads['Converted'].value_counts().plot.bar()\nplt.show()\n# 39% people converted","be3e1a03":"print(round(leads['Do Not Call'].value_counts()\/leads.shape[0]*100,2))\nleads['Do Not Call'].value_counts().plot.bar()\nplt.show()\n# 99.98% people want to be called","708491b4":"print(round(leads['Do Not Email'].value_counts()\/leads.shape[0]*100,2))\nprint(leads['Do Not Email'].value_counts())\nleads['Do Not Email'].value_counts().plot.bar()\nplt.show()\n# 92.06 people want to be emailed","91e09f47":"print(round(leads['Newspaper Article'].value_counts()\/leads.shape[0]*100,2))\nleads['Newspaper Article'].value_counts().plot.bar() \nplt.show()\n#only 0.02 % people saw ad in newspaper Article","e92166e3":"print(round(leads['X Education Forums'].value_counts()\/leads.shape[0]*100,2))\nleads['X Education Forums'].value_counts().plot.bar()\nplt.show()\n# only 0.01 % people saw ad in X Education Forums\n# all the columns with unique count 2 are binary yes and no except Converted column which is dependent column","3c40afce":"# getting the counts of columns with greater than 2 unique values\nprint(round(leads['What matters most to you in choosing a course'].value_counts()\/leads.shape[0]*100,2))\nprint(leads['What matters most to you in choosing a course'].value_counts())\nleads['What matters most to you in choosing a course'].value_counts().plot.bar()\nplt.show()\n# 70.65 % people says better Career prospects matter most to them while choosing a course","61730c6b":"print(round(leads['Lead Origin'].value_counts()\/leads.shape[0]*100,2))\nleads['Lead Origin'].value_counts().plot.bar()\nplt.show()\n# majority of leads comes from Landing page submission and API","6f2c5079":"print(round(leads['What is your current occupation'].value_counts()\/leads.shape[0]*100,2))\nleads['What is your current occupation'].value_counts().plot.bar()\nplt.show()\n# majority of leads are unemployed","38caa7cc":"print(round(leads['City'].value_counts()\/leads.shape[0]*100,2))\nleads['City'].value_counts().plot.bar()\nplt.show()\n","2430c0b2":"print(round(leads['Last Notable Activity'].value_counts()\/leads.shape[0]*100,2))\nleads['Last Notable Activity'].value_counts().plot.bar()\nplt.show()","0ee4b3c2":"print(round(leads['Last Activity'].value_counts()\/leads.shape[0]*100,2))\nleads['Last Activity'].value_counts().plot.bar()\nplt.show()","e2cb8ef2":"print(round(leads['Specialization'].value_counts()\/leads.shape[0]*100,2))\nleads['Specialization'].value_counts().plot.bar()\nplt.show()","a61ee34b":"print(round(leads['Lead Source'].value_counts()\/leads.shape[0]*100,2))\nleads['Lead Source'].value_counts().plot.bar()\nplt.show()","e39f24fd":"print(round(leads['Country'].value_counts()\/leads.shape[0]*100,2))\nleads['Country'].value_counts().plot.bar()\nplt.show()","e5bd8133":"sns.boxplot(leads['TotalVisits'])\nplt.show()\n#capping required\nleads['TotalVisits'].describe()","211f0947":"sns.boxplot(leads['Page Views Per Visit'])\nplt.show()\nleads['Page Views Per Visit'].describe()","26565616":"sns.boxplot(leads['Total Time Spent on Website'])\nplt.show()\nleads['Total Time Spent on Website'].describe()","7bbdf18b":"leads.columns","ddd875a1":"# dropping those columns which are highly skewed\nleads = leads.drop(['Do Not Call', 'What matters most to you in choosing a course',\n       'Search', 'Magazine', 'Newspaper Article', 'X Education Forums',\n       'Newspaper', 'Digital Advertisement', 'Through Recommendations',\n       'Receive More Updates About Our Courses',\n       'Update me on Supply Chain Content', 'Get updates on DM Content',\n       'I agree to pay the amount through cheque','Prospect ID'],axis=1)","fc0451d4":"leads.columns","52098818":"# combining categories(which are of less percentage) and naming it as others \nprint(round(leads['Lead Origin'].value_counts()\/leads.shape[0]*100,2))\nleads[\"Lead Origin\"].replace({\"Lead Add Form\": \"Others\", \"Lead Import\": \"Others\",\"Quick Add Form\":\"Others\"}, inplace=True)\nprint(round(leads['Lead Origin'].value_counts()\/leads.shape[0]*100,2))","7800681e":"print(round(leads['Lead Source'].value_counts()\/leads.shape[0]*100,2))\nleads['Lead Source'].replace({\"Reference\": \"Others\", \"Welingak Website\":\"Others\",\"Referral Sites\":\"Others\",\"Facebook\":\"Others\",\n                              \"bing\":\"Others\",\"google\":\"Others\",\"Click2call\":\"Others\",\"Press_Release\":\"Others\",\n                              \"Live Chat\":\"Others\",\"Social Media\":\"Others\",\"NC_EDM\":\"Others\" ,\"testone\":\"Others\",\n                              \"WeLearn\":\"Others\",\"welearnblog_Home\":\"Others\",\"blog\":\"Others\", \"youtubechannel\":\"Others\",\n                              \"Pay per Click Ads\":\"Others\"}, inplace=True)\nprint(round(leads['Lead Source'].value_counts()\/leads.shape[0]*100,2))","45571c52":"print(round(leads['Last Activity'].value_counts()\/leads.shape[0]*100,2))\nleads['Last Activity'].replace({\"Page Visited on Website\":\"Others\",\"Converted to Lead\":\"Others\",\"Email Bounced\":\"Others\",\n                                \"Email Link Clicked\":\"Others\",\"Form Submitted on Website\":\"Others\",\"Unreachable\":\"Others\",\n                                \"Unsubscribed\":\"Others\",\"Had a Phone Conversation\":\"Others\",\"Approached upfront\":\"Others\",\n                                \"View in browser link Clicked\":\"Others\",\"Email Marked Spam\":\"Others\",\"Email Received\":\"Others\",\n                                \"Resubscribed to emails\":\"Others\",\"Visited Booth in Tradeshow\":\"Others\"},inplace=True)\nprint(round(leads['Last Activity'].value_counts()\/leads.shape[0]*100,2))","599978da":"print(round(leads['Country'].value_counts()\/leads.shape[0]*100,2))\nleads['Country'].replace({\"Bahrain\":\"Others\",\"Hong Kong\":\"Others\",\"Oman\":\"Others\",\"France\":\"Others\",\"unknown\":\"Others\",\n                          \"Nigeria\":\"Others\",\"Germany\":\"Others\",\"Canada\":\"Others\",\"South Africa\":\"Others\",\"Kuwait\":\"Others\",\n                          \"Sweden\":\"Others\",\"Uganda\":\"Others\",\"China\":\"Others\",\"Belgium\":\"Others\",\"Philippines\":\"Others\",\n                          \"Asia\/Pacific Region\":\"Others\",\"Netherlands\":\"Others\",\"Ghana\":\"Others\",\"Italy\":\"Others\",\n                          \"Bangladesh\":\"Others\",\"Malaysia\":\"Others\",\"Switzerland\":\"Others\",\"Tanzania\":\"Others\",\n                          \"Denmark\":\"Others\",\"Russia\":\"Others\",\"Sri Lanka\":\"Others\",\"Kenya\":\"Others\",\"Liberia\":\"Others\",\n                          \"Vietnam\":\"Others\",\"Indonesia\":\"Others\",\"United States\":\"Others\",\"United Arab Emirates\":\"Others\",\n                          \"Singapore\":\"Others\",\"Saudi Arabia\":\"Others\",\"United Kingdom\":\"Others\",\"Australia\":\"Others\",\n                          \"Qatar\":\"Others\"},inplace=True)\nprint(round(leads['Country'].value_counts()\/leads.shape[0]*100,2))","167a6902":"print(round(leads['Specialization'].value_counts()\/leads.shape[0]*100,2))\nleads['Specialization'].replace({\"Business Administration\":\"Others\",\"IT Projects Management\":\"Others\",\n                                 \"Supply Chain Management\":\"Others\",\"Banking, Investment And Insurance\":\"Others\",\n                                 \"Travel and Tourism\":\"Others\",\"Media and Advertising\":\"Others\",\n                                 \"International Business\":\"Others\",\"Healthcare Management\":\"Others\",\n                                 \"Hospitality Management\":\"Others\",\"E-COMMERCE\":\"Others\",\"Retail Management\":\"Others\",\n                                 \"Rural and Agribusiness\":\"Others\",\"E-Business\":\"Others\",\n                                 \"Services Excellence\":\"Others\"},inplace=True)\nprint(round(leads['Specialization'].value_counts()\/leads.shape[0]*100,2))","0fa2cf9c":"print(round(leads['What is your current occupation'].value_counts()\/leads.shape[0]*100,2))\nleads['What is your current occupation'].replace({'Student':  'Others','Other':'Others',\n                                                  'Housewife':'Others','Businessman':'Others'}, inplace=True)\nprint(round(leads['What is your current occupation'].value_counts()\/leads.shape[0]*100,2))","c022de99":"print(round(leads['City'].value_counts()\/leads.shape[0]*100,2))\nleads['City'].replace({'Other Cities':'Others','Other Cities of Maharashtra':'Others',\n                      'Other Metro Cities':'Others','Tier II Cities':'Others'},inplace=True)\nprint(round(leads['City'].value_counts()\/leads.shape[0]*100,2))","4db93a34":"print(round(leads['Last Notable Activity'].value_counts()\/leads.shape[0]*100,2))\nleads['Last Notable Activity'].replace({\"Olark Chat Conversation\":\"Others\",\"Email Link Clicked\":\"Others\",\n                                        \"Email Bounced\":\"Others\",\"Unsubscribed\":\"Others\",\"Unreachable\":\"Others\",\n                                        \"Had a Phone Conversation\":\"Others\",\"Email Marked Spam\":\"Others\",\n                                        \"Email Received\":\"Others\",\"View in browser link Clicked\":\"Others\",\n                                        \"Resubscribed to emails\":\"Others\",\"Approached upfront\":\"Others\",\"Form Submitted on Website\":\"Others\",\n                                        \"Page Visited on Website\":\"Others\"},inplace=True)\nprint(round(leads['Last Notable Activity'].value_counts()\/leads.shape[0]*100,2))","0e32dee7":"# soft range cappping the outliers ie from 5 to \nnum_vars=[ 'TotalVisits','Page Views Per Visit']\n\nfor i in num_vars:\n    q1=leads[i].quantile(0.05)\n    q4=leads[i].quantile(0.95)\n    \n    leads[i][leads[i]<=q1]=q1\n    leads[i][leads[i]>=q4]=q4","ae9b11e0":"sns.boxplot(leads[ 'Page Views Per Visit'])\nplt.show()","cc19eafb":"sns.boxplot(leads['TotalVisits'])\nplt.show()","faa8c4ac":"# again checking the null counts\n# null values percentage check\nround((leads.isnull().sum()\/leads.shape[0])*100,2)","e31aead8":"leads.describe()","3e18e412":"# imputing with median in numerical columns also as there is not much difference between mean and median now \n#cols=['Lead Source','Last Activity','Country','What is your current occupation']\ncols=['TotalVisits','Page Views Per Visit']\nfor i in cols:\n    leads[i][leads[i].isnull()]=leads[i].median()\n    \n# imputing null values with mode values in categorical columns with small null percentage \ncols=['Country','What is your current occupation','City','Specialization']\nleads[cols]=leads[cols].apply(lambda x:x.fillna(x.value_counts().index[0]))\n  ","e3649ac3":"  round((leads.isnull().sum()\/leads.shape[0])*100,2)","6b38a7c6":"# as Lead source and Last activity is under 1.5% we can drop these rows\nleads=leads.dropna()\nround((leads.isnull().sum()\/leads.shape[0])*100,2)","23cdd52b":"#checking percentage of rows retained\nprint(f\"Percentage of row retained: {(leads.shape[0]\/9240)*100}\")\n","c96d6a4f":"cols=[ 'Lead Origin', 'Lead Source', 'Do Not Email',        \n        'Last Activity', 'Country', 'Specialization',\n       'What is your current occupation', 'City',\n       'A free copy of Mastering The Interview', 'Last Notable Activity']\n\nplt.figure(figsize=(15,30))\nfor i in enumerate(cols):\n    plt.subplot(8,2, i[0]+1)\n    sns.countplot(x=leads[i[1]],hue=leads['Converted'])","eaa6e636":"# drop last notable activity\nleads=leads.drop(['Last Notable Activity'],axis=1)","ce784eed":"leads.head()","cb496431":"cols=['TotalVisits', 'Total Time Spent on Website','Page Views Per Visit']\n\nplt.figure(figsize=(15,15))\nfor i in enumerate(cols):\n    plt.subplot(4,2, i[0]+1)\n    sns.boxplot(y=leads[i[1]],x=leads['Converted'])","e763bb5a":"leads.info()","fe93a136":"leads.head()","cb7a57f6":"#mapping lead number to index to assign score to a lead later\nleads.index=leads['Lead Number']\nleads.drop(['Lead Number'],axis=1)","900cc7e4":"leads.head()","3e34ab4f":"# Correlation\nplt.figure(figsize = (20,10))        \nsns.heatmap(leads.corr(),annot = True,cmap='YlGnBu')\nplt.show()","8503a3b7":"leads['Do Not Email']=leads['Do Not Email'].replace(to_replace=['No', 'Yes'], value=[0, 1])\nleads['A free copy of Mastering The Interview']=leads['A free copy of Mastering The Interview'].replace(to_replace=['No', 'Yes'], value=[0, 1])","e580277c":"leads.head()","f71b3caf":"#Lead_Origin = pd.get_dummies(leads['Lead Origin'], drop_first = True)\n#Lead_Source = pd.get_dummies(leads['Lead Source'], drop_first = True)\n#Last_Activity = pd.get_dummies(leads['Last Activity'], drop_first = True)\n#Countries = pd.get_dummies(leads['Country'], drop_first = True)\n#What_is_your_current_occupation=pd.get_dummies(leads['What is your current occupation'], drop_first = True)","9cfe7f1c":"# Creating dummy variables for the variable 'Lead Origin'\nlo = pd.get_dummies(leads['Lead Origin'], prefix='Lead Origin')\n# Dropping Lead Origin_Landing Page Submission\n# lo1 = lo.drop(['Lead Origin_Landing Page Submission'], 1)\nlo1 = lo.drop(['Lead Origin_Others'], 1)\n#Adding the results to the master dataframe\nleads = pd.concat([leads,lo1], axis=1)","8efb2f6d":"# Creating dummy variables for the variable 'Lead Source'\nls = pd.get_dummies(leads['Lead Source'], prefix='Lead Source')\n# Dropping Lead Source_Others\nls1 = ls.drop(['Lead Source_Others'], 1)\n#Adding the results to the master dataframe\nleads = pd.concat([leads,ls1], axis=1)","12b2b3cf":"# Creating dummy variables for the variable 'Last Activity'\nla = pd.get_dummies(leads['Last Activity'], prefix='Last Activity')\n# Dropping Last Activity_Olark Chat Conversation\nla1 = la.drop(['Last Activity_Olark Chat Conversation'], 1)\n#Adding the results to the master dataframe\nleads = pd.concat([leads,la1], axis=1)","cbd1ef1f":"# Creating dummy variables for the variable 'Country'\nc = pd.get_dummies(leads['Country'], prefix='Country')\n# Dropping Country_Others\nc1 = c.drop(['Country_Others'], 1)\n#Adding the results to the master dataframe\nleads = pd.concat([leads,c1], axis=1)","b31812bf":"# Creating dummy variables for the variable 'What is your current occupation'\nco = pd.get_dummies(leads['What is your current occupation'], prefix='What is your current occupation')\n# Dropping What is your current occupation_Others\nco1 = co.drop(['What is your current occupation_Others'], 1)\n#Adding the results to the master dataframe\nleads = pd.concat([leads,co1], axis=1)","18e11282":"# Creating dummy variables for the variable 'City'\nci = pd.get_dummies(leads['City'], prefix='City')\n# Dropping City_missing\nci1 = ci.drop(['City_Others'], 1)\n#Adding the results to the master dataframe\nleads = pd.concat([leads,ci1], axis=1)","85bd212f":"# Creating dummy variables for the variable Specialization\nsp = pd.get_dummies(leads['Specialization'], prefix='Specialization')\n# Dropping Specialization_missing\nsp1 = sp.drop(['Specialization_Others'], 1)\n#Adding the results to the master dataframe\nleads = pd.concat([leads,sp1], axis=1)","23c724b7":"leads.head()","13317a32":"leads.shape","1a81a3ac":"# We have created dummies for the below variables, so we can drop them\nleads = leads.drop(['Lead Origin','Lead Source','Last Activity','Country','Specialization', \n                    'What is your current occupation', 'City'], 1)","172386fd":"leads.info()","cf6f5840":"# Putting feature variable to X\nX = leads.drop(['Converted','Lead Number'], axis=1)\nX.head()","afe61aca":"# Putting response variable to y\ny = leads['Converted']\ny.head()","182e0e32":"# Splitting the data into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, test_size=0.3, random_state=100)","2dbfcacb":"X_train.head()","40c4fb4b":"scaler = StandardScaler()\nX_train[['TotalVisits','Total Time Spent on Website','Page Views Per Visit']] = scaler.fit_transform(X_train[['TotalVisits','Total Time Spent on Website','Page Views Per Visit']])\nX_train.head()","c283145a":"### Checking the Converted Rate\nconverted = (sum(leads['Converted'])\/len(leads['Converted'].index))*100\nconverted\n# the data is imbalanced","b24aa2e3":"# Logistic regression model\nlogm1 = sm.GLM(y_train,(sm.add_constant(X_train)), family = sm.families.Binomial())\nlogm1.fit().summary()","60442221":"logreg = LogisticRegression()","ee07c6b5":"rfe = RFE(logreg, 20)             \nrfe = rfe.fit(X_train, y_train)","d5ac58f6":"rfe.support_","9555aceb":"list(zip(X_train.columns, rfe.support_, rfe.ranking_))","b00e724a":"col = X_train.columns[rfe.support_]","bb8ad4af":"X_train.columns[~rfe.support_]","6f9680b4":"X_train_sm = sm.add_constant(X_train[col])\nlogm2 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm2.fit()\nres.summary()","cd5b79ca":"col = col.drop('Lead Source_Direct Traffic', 1)","597d45a5":"X_train_sm = sm.add_constant(X_train[col])\nlogm3 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm3.fit()\nres.summary()","21882a07":"col = col.drop('Specialization_Operations Management', 1)","e296aa9b":"X_train_sm = sm.add_constant(X_train[col])\nlogm4 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm4.fit()\nres.summary()","4ef64823":"\n# Country_India has higher p value than 0.05 so drop this.\ncol = col.drop('Country_India', 1)\nX_train_sm = sm.add_constant(X_train[col])\nlogm4_1 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm4_1.fit()\nres.summary()","dd951896":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","0a4234bd":"# What is your current occupation_Unemployed has high vif, so drop this.\ncol = col.drop('What is your current occupation_Unemployed', 1)\nX_train_sm = sm.add_constant(X_train[col])\nlogm5 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm5.fit()\nres.summary()","c7468ae5":"# Checking VIF\nvif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","4d8f448b":"# Lead Origin_Landing Page Submission has high vif, so drop this.\ncol = col.drop('Lead Origin_API', 1)\nX_train_sm = sm.add_constant(X_train[col])\nlogm6 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm6.fit()\nres.summary()","45cf4087":"# Checking VIF\nvif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","1b9d8f9f":"y_train_pred = res.predict(X_train_sm)\ny_train_pred[:10]","48b43f25":"y_train_pred = y_train_pred.values.reshape(-1)\ny_train_pred[:10]","7e062665":"y_train_pred_final = pd.DataFrame({'Converted':y_train.values, 'Converted_Prob':y_train_pred})\ny_train_pred_final['Lead Number'] = y_train.index\ny_train_pred_final.head()","2a99b13a":"y_train_pred_final.shape","412bd999":"y_train_pred_final['predicted'] = y_train_pred_final.Converted_Prob.map(lambda x: 1 if x > 0.5 else 0)\n\n\ny_train_pred_final.head()","c97b3972":"# Confusion matrix \nconfusion = metrics.confusion_matrix(y_train_pred_final.Converted, y_train_pred_final.predicted )\nprint(confusion)","e13be61e":"#overall accuracy.\nprint(f'Accuracy is: {metrics.accuracy_score(y_train_pred_final.Converted, y_train_pred_final.predicted)}')","63e4590e":"# now calculating sensitivity, specificity, false +ve rate, +ve predictive value, -ve predictive value\n\nTP = confusion[1,1] # true positive \nTN = confusion[0,0] # true negatives\nFP = confusion[0,1] # false positives\nFN = confusion[1,0] # false negatives\n\nsensitivity = TP\/float(TP+FN)\nspecificity = TN\/float(TN+FP)\nFPR = FP\/float(TN+FP) \nPPV = TP\/float(TP+FP)\nNPV = TN\/float(TN+FN)\n\nprint(f'sensitivity: {sensitivity}\\nspecificity: {specificity}\\nfalse +ve rate: {FPR}\\n+ve predictive value: {PPV}\\n-ve predictive value: {NPV}')","c4d3d396":"# roc curve\ndef draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return None","bd72ff9a":"draw_roc(y_train_pred_final.Converted, y_train_pred_final.Converted_Prob)","aa862453":"# finding optimal cut-off\nnum=[0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\nfor i in num:\n    y_train_pred_final[i]= y_train_pred_final.Converted_Prob.map(lambda x: 1 if x > i else 0)\ny_train_pred_final.head()","646bcb4f":"# Now calculating accuracy sensitivity and specificity for various probability cutoffs.\ncutoff_df = pd.DataFrame( columns = ['prob','accuracy','sensi','speci'])\n\nnum = [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]\nfor i in num:\n    cm1 = metrics.confusion_matrix(y_train_pred_final.Converted, y_train_pred_final[i] )\n    total1=sum(sum(cm1))\n    accuracy = (cm1[0,0]+cm1[1,1])\/total1\n    \n    speci = cm1[0,0]\/(cm1[0,0]+cm1[0,1])\n    sensi = cm1[1,1]\/(cm1[1,0]+cm1[1,1])\n    cutoff_df.loc[i] =[ i ,accuracy,sensi,speci]\nprint(cutoff_df)","48cf4afa":"# plotting accuracy sensitivity and specificity for various probabilities.\ncutoff_df.plot.line(x='prob', y=['accuracy','sensi','speci'],figsize = (10,5))\nplt.minorticks_on()\nplt.grid(b=True, which='major', color='b', linestyle='-')\n# plt.grid(b=True, which='minor', color='g', linestyle='-')\nplt.show()","42b7ebfc":"## From the above curve, 0.36 is the optimum point to take it as a cutoff probability\n\ny_train_pred_final['final_predicted'] = y_train_pred_final.Converted_Prob.map( lambda x: 1 if x > 0.36 else 0)\ny_train_pred_final.head()","e86070d4":"# Assigning Lead score\ny_train_pred_final['Lead_Score'] = y_train_pred_final.Converted_Prob.map( lambda x: round(x*100,2))\n\ny_train_pred_final.head()","bb6c8257":"# making new confusion matrix for evaluation\n\nconfusion2 = metrics.confusion_matrix(y_train_pred_final.Converted, y_train_pred_final.final_predicted )\nconfusion2","12a72a7c":"# now calculating Accuracy, sensitivity, specificity, false +ve rate, +ve predictive value, -ve predictive value\n\nprint(f'Accuracy is: {metrics.accuracy_score(y_train_pred_final.Converted, y_train_pred_final.final_predicted)}')\nTP = confusion2[1,1] # true positive \nTN = confusion2[0,0] # true negatives\nFP = confusion2[0,1] # false positives\nFN = confusion2[1,0] # false negatives\n\nsensitivity = TP\/float(TP+FN)\nspecificity = TN\/float(TN+FP)\nFPR = FP\/float(TN+FP) \nPPV = TP\/float(TP+FP)\nNPV = TN\/float(TN+FN)\n\nprint(f'sensitivity: {sensitivity}\\nspecificity: {specificity}\\nfalse +ve rate: {FPR}\\n+ve predictive value: {PPV}\\n-ve predictive value: {NPV}')","3b20b887":"# Precision and recall\n\np=precision_score(y_train_pred_final.Converted,y_train_pred_final.final_predicted)\nr=recall_score(y_train_pred_final.Converted,y_train_pred_final.final_predicted)\n\nprint(f'precision_score: {p}\\nrecall_score: {r}')","09247ebc":"# precision recall tradeoff\np, r, thresholds = precision_recall_curve(y_train_pred_final.Converted, y_train_pred_final.Converted_Prob)\nplt.plot(thresholds, p[:-1], \"g-\")\nplt.plot(thresholds, r[:-1], \"r-\")\nplt.show()","1c6b4ea6":"# making Predictions on test data\nX_test[['TotalVisits','Total Time Spent on Website',\n        'Page Views Per Visit']] = scaler.transform(X_test[['TotalVisits',\n                                                                'Total Time Spent on Website','Page Views Per Visit']])\n\nX_test.head()","7ac6941b":"X_test = X_test[col]\nX_test.head()","83fde867":"X_test_sm = sm.add_constant(X_test)\ny_test_pred = res.predict(X_test_sm)","c6408308":"y_test_pred[:10]","25c40348":"# Converting y_pred to a dataframe\ny_pred_1 = pd.DataFrame(y_test_pred)\ny_pred_1.head()","431d5705":"# Converting y_test to dataframe\ny_test_df = pd.DataFrame(y_test)\n\n# Concatnating y_test_df and y_pred_1\ny_pred_final = pd.concat([y_test_df, y_pred_1],axis=1)\ny_pred_final= y_pred_final.rename(columns={ 0 : 'Converted_prob'})\ny_pred_final.head()","14a1fd99":"# marking 1,0 according to threshold value\ny_pred_final['final_predicted'] = y_pred_final.Converted_prob.map(lambda x: 1 if x > 0.36 else 0)","890363d5":"y_pred_final['Lead_Score'] = y_pred_final.Converted_prob.map( lambda x: round(x*100))\ny_pred_final.head()","2656d629":"# now check accuracy ... for test data\n# making new confusion matrix for evaluation\n\nconfusion3 = metrics.confusion_matrix(y_pred_final.Converted, y_pred_final.final_predicted )\nconfusion3","f31912b9":"# now calculating Accuracy, sensitivity, specificity, false +ve rate, +ve predictive value, -ve predictive value\n\nprint(f'Accuracy is: {metrics.accuracy_score(y_pred_final.Converted, y_pred_final.final_predicted)}')\nTP = confusion3[1,1] # true positive \nTN = confusion3[0,0] # true negatives\nFP = confusion3[0,1] # false positives\nFN = confusion3[1,0] # false negatives\n\nsensitivity = TP\/float(TP+FN)\nspecificity = TN\/float(TN+FP)\nFPR = FP\/float(TN+FP) \nPPV = TP\/float(TP+FP)\nNPV = TN\/float(TN+FN)\n\nprint(f'sensitivity: {sensitivity}\\nspecificity: {specificity}\\nfalse +ve rate: {FPR}\\n+ve predictive value: {PPV}\\n-ve predictive value: {NPV}')","b28fd274":"# Precision and recall\n\np=precision_score(y_pred_final.Converted,y_pred_final.final_predicted)\nr=recall_score(y_pred_final.Converted,y_pred_final.final_predicted)\n\nprint(f'precision_score: {p}\\nrecall_score: {r}')","d708460b":"df1=y_pred_final[['Lead_Score']].reset_index()\ndf2=y_train_pred_final[['Lead Number','Lead_Score']]\nLead_Score_df=df1.append(df2)\n\nprint(Lead_Score_df.shape)\nprint('Final data frame with lead score')\nLead_Score_df.head()\n\n","a8e821b5":"# concatinating the lead score with the Leads data set\n# Final_leads_df is the dataframe we provide to sales team\nFinal_leads_df=pd.merge(leads_backup,Lead_Score_df,on='Lead Number',how='left')\nFinal_leads_df.head()","62ab0d02":"#### Inferences\n- most of the leads origin is through Landing page or Api and both have around 50% conversion\n- highest lead source is through google and direct traffic, apart Others highest conversion seen in google and orgainc search\n- High number of people wanted email and likewise high conversion rate\n- Most of the converted leads last activity was SMS sent.\n- Most of the converted leads are from India.\n- Unemployed people are converting to leads.\n- Most of the converted leads are from Mumbai.\n- Most of converted leads does not require a free copy of mastering the interview.","8c36c19d":"#### Check for null and unique values","670eb2d9":"#### Building sixth model","d8909d76":"#### Inferences\n- Most of the converted leads visited website more than 4 times.\n- Most of the converted leads spent more time website.\n- Few people who doesnot have page views per visit also converted.","add332bc":"#### Reading the Data set","0903660e":"#### Building fifth model","96f78094":"- Specialization_Operations Management has high p value, drop it","00a9d6aa":"- Lead Source_Direct Traffic has high p-value.\n- Drop Lead Source_Direct Traffic","7c9f2d98":"- There are 9240 rows looks like non-null with 37 columns\n- a mix of integer, float and object data type\n- many columns have \"select\" as a value","5b43fa04":"#### Building first model with all variables","69f15bf9":"## EDA and data cleaning\n\n#### Importing the libraries.","94683eb6":"#### Perform Scaling","607e8ef6":"## Model evaluation","3b971d25":"- It seems there exists only 2 to 3 highly correlated variables.\n- Total Visits is highly correlated to Page Views per visit","c41d954d":"## Structure of Analysis\n    1.EDA and data cleaning\n    2.Data preparation \n    3.Model building\n    4.Model evaluation\n    5.Final Comments","06ea8466":"#### Third model","cc2887c4":"Final Scores:\n\n    Train data:\n        Accuracy is         : 0.7743251726302574\n        sensitivity         : 0.7658098735210118\n        specificity         : 0.7796480489671003\n        false +ve rate      : 0.22035195103289976\n        +ve predictive value: 0.6847865742429771\n        -ve predictive value: 0.8419168273202975\n        precision_score     : 0.6847865742429771\n        recall_score        : 0.7658098735210118\n        \n     Test data:\n         Accuracy is         : 0.7722445990479678\n         sensitivity         : 0.7722277722277723\n         specificity         : 0.7722543352601156\n         false +ve rate      : 0.2277456647398844\n         +ve predictive value: 0.662382176520994\n         -ve predictive value: 0.8542199488491049\n         precision_score     : 0.662382176520994\n         recall_score        : 0.7722277722277723\n    ","8a183237":"#### Building Second Model","6a8a936d":"so our logistic regression equation is:\n\nlogit(converted)=\n\n    -1.5689 * const\n    -0.9094 *[Do Not Email]\n    +0.2748 *[TotalVisits]\n    +0.9557 *[Total Time Spent on Website]\n    -0.5006 *[Page Views Per Visit]\n    -1.1336 *[Lead Origin_Landing Page Submission]\n    -0.3430 *[Lead Source_Google]\n    -0.4128 *[Lead Source_Olark Chat]\n    -0.2816 *[Lead Source_Organic Search]\n    +1.7654 *[Last Activity_Email Opened]\n    +1.0051 *[Last Activity_Others1]\n    +0.9799 *[Last Activity_SMS Sent2]\n    +2.8227 *[What is your current occupation_Working Professional]\n    -0.2910 *[City_Mumbai]\n    +0.4834 *[Specialization_Finance Management]\n    +0.4017 *[Specialization_Marketing Management]\n\n\n\n","e84a540a":"#### Train-Test split","1048960c":"## Data Preparation","104abcd2":"#### all p values are under 5% and Vif is less than 5","f9c3953c":"#### Building fourth model","88276878":"##### top three variables in your model which contribute most towards the probability of a lead getting converted?\n    1.Last Activity_SMS Sent\n    2.What is your current occupation_Working Professional\n    3.Last Activity_Email Opened\n\n","a3d82874":"X Education wants help in selecting the most promising leads, build a model wherein you need to assign a lead score to each of the leads such that the customers with higher lead score have a higher conversion chance and the customers with lower lead score have a lower conversion chance. The CEO, in particular, has given a ballpark of the target lead conversion rate to be around 80%.","f2cb49cf":"#### now doing some Bivariate analysis\n    univariate analysis already done","75ba4ad1":"#### Dummy variable creation","5c2e30d8":"#### Feature selection using RFE","b841bed8":"#### Checking structure of data","ff1eb30e":"#### we know Rest 30 % are the values that are null values,\n#### we will follow the same technique bearing in mind that the missing percentage is of null values ","b2f96818":"- creating dataframe with actual converted and predicted probabilities","195c9a03":"- All p-values are within 0.05\n- Now checking vif values.","80174da0":"## Problem Statement:"}}