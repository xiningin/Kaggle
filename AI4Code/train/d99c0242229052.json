{"cell_type":{"da63b147":"code","22fe84c5":"code","ec379ee7":"code","4d9c60bd":"code","70bcf768":"code","016d83a8":"code","14719ae0":"code","27710168":"code","9fa247ba":"code","e18814c2":"code","5898ef9e":"code","78d6e0bc":"code","bcfd4316":"code","0817d41b":"code","5d2c0250":"code","394dbfa6":"code","1d986721":"code","5d64d484":"code","b2fa6885":"code","40967b20":"code","0aff43d6":"code","03a1240b":"code","c0004f65":"code","82bd20f3":"code","16801a6f":"code","60f610f1":"code","7f14ce71":"code","9f69f65b":"code","9485c43c":"code","ebff82f1":"markdown","cf405f46":"markdown","b8cad5dc":"markdown","d94980a8":"markdown","19139466":"markdown","0676f7a3":"markdown","25ac85c6":"markdown","5a6ba1e5":"markdown","c4542237":"markdown"},"source":{"da63b147":"# Laden der Pakete Numpy und Pandas\nimport numpy as np \nimport pandas as pd \n\n# Ausgabe der Dateipfade die wir \u00f6ffnen wollen\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","22fe84c5":"# Lesen der Daten (sleep)\ndf = pd.read_csv(\"\/kaggle\/input\/sleepstudypilot\/SleepStudyData.csv\", delimiter = \",\")\n# Informationen des Datensatzes\ndf.info()","ec379ee7":"# Inspektion des Datensatzes\ndf.head()","4d9c60bd":"# Reduzieren des Datensatzes\ndf_red = df[[\"Hours\", \"Tired\", \"Breakfast\"]]\ndf_red.head()","70bcf768":"data_count = df_red.groupby([\"Breakfast\"])[\"Breakfast\"].count()\nprint(data_count)","016d83a8":"# Eine weitere M\u00f6glichkeit zu z\u00e4hlen, wieviele Teilnehmer der Studie \"Yes\" \n# bei der Frage nach dem Fr\u00fchst\u00fcck angegeben haben\ndf_red[df_red[\"Breakfast\"] == \"Yes\"].info()","14719ae0":"# Mit describe k\u00f6nnen wir uns die statistische auswertung anzeigen lassen\ndf_red[df_red[\"Breakfast\"] == \"Yes\"].describe()","27710168":"# Inspektion der Gegengruppe\ndf_red[df_red[\"Breakfast\"] == \"No\"].describe()","9fa247ba":"# eine M\u00f6glichkeit, den Datensatz weiter auszuwerten k\u00f6nnte darin geschehen, \n# den Datensatz auf Gruppen zu testen \ndf_group = df_red.groupby([\"Hours\", \"Breakfast\"]).describe()\ndf_group","e18814c2":"df_red[df_red[\"Hours\"] < 6].describe()","5898ef9e":"df_red[(df_red[\"Hours\"] >= 6) & (df_red[\"Hours\"] <  7)].describe()","78d6e0bc":"# importiere Matplotlib.pyplot\nimport matplotlib.pyplot as plt\n\n# Generiere einen Test-Datensatz\nimport numpy as np\nfrom random import random\n\nx = np.arange(10)\n\ny = np.array([round(2*i + 3*random(), 1) for i in x])\n\nprint(\"x: \\n\", x)\nprint(\"y: \\n\", y)","bcfd4316":"#Einfacher Plot\nplt.plot(x, y)\n\nplt.show()","0817d41b":"# Scatter-Plot\nplt.scatter(x, y)\n\nplt.show()","5d2c0250":"plt.bar(x, y)\n\nplt.show()","394dbfa6":"#Histogramm\n\n# Hier wird ein neuer Datensattz generiert, der mehr Sinn macht im Umgang mit Histogrammen (eine Verteilung)\nfrom random import normalvariate\n\nx = np.array([normalvariate(7,1) for i in range(1000)])\n\n# plotten eines Histogramms\nplt.hist(x, bins = 10)\n\nplt.show()","1d986721":"# Zur\u00fcck zum alten selbstgenerierten Datensatz (mit einer Erweiterung durch y2)\nx = np.arange(10)\n\ny1 = np.array([round(2*i + 3*random(), 1) for i in x])\ny2 = np.array([round(2.3*i + 2*random(), 1) for i in x])","5d64d484":"# In einer Figur lassen sich mehrere plots realisieren\nplt.plot(x, y1)\nplt.plot(x, y2)\n\nplt.show()","b2fa6885":"# Hinzuf\u00fcgen eines Titels und Achsenbeschriftung\nplt.plot(x, y1)\nplt.plot(x, y2)\n\nplt.title(\"Der Titel meines Plots\") #\nplt.xlabel(\"x-Achse\") #\nplt.ylabel(\"y-Achse\") #\n\n\nplt.show()","40967b20":"# Die Farben der Datenpunkte\/Linien, als auch ihr Style lassen sich anpassen.\nplt.plot(x, y1, color = \"green\", linestyle = \"--\") #\nplt.plot(x, y2, color = \"red\") #\n\nplt.title(\"Der Titel meines Plots\")\nplt.xlabel(\"x-Achse\")\nplt.ylabel(\"y-Achse\")\n\nplt.show()","0aff43d6":"# Einf\u00fcgen eines Legende und passender Label\nplt.plot(x, y1, color = \"green\", linestyle = \"--\", label = \"y1\") #\nplt.plot(x, y2, color = \"red\", label = \"y2\") #\n\nplt.title(\"Der Titel meines Plots\")\nplt.xlabel(\"x-Achse\")\nplt.ylabel(\"y-Achse\")\nplt.legend(loc = \"upper left\") #\n\nplt.show()","03a1240b":"# Es lassen sich sonstige Optimierungen an der Figur realisieren, zB Skalierung,....\nplt.plot(x, y1, color = \"green\", linestyle = \"--\", label = \"y1\")\nplt.plot(x, y2, color = \"red\", label = \"y2\")\n\nplt.title(\"Der Titel meines Plots\")\nplt.xlabel(\"x-Achse\")\nplt.ylabel(\"y-Achse\")\nplt.legend(loc = \"upper left\")\n\nplt.xlim(0, 8) #\nplt.xticks(np.arange(0, 9, 2), labels = range(2010, 2019, 2), rotation = 90) #\n\nplt.show()","c0004f65":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))        ","82bd20f3":"data = pd.read_csv(\"\/kaggle\/input\/cusersmarildownloadsearningcsv\/earning.csv\", delimiter = \";\")\ndata.head()","16801a6f":"data.info()","60f610f1":"# Reduzierung des Datensatzes\ndata_red = data[[\"year\",\n                 \"femalesmanagers\",\n                 \"malemanagers\",\n                 \"femalemachineryoperatorsanddrivers\",\n                 \"malemachineryoperatorsanddrivers\"]]\n\ndata_red.head()","7f14ce71":"# Umbennen der Spalten\ndata_red.columns = ['year', \n                    'manager_f', \n                    'manager_m',\n                    'operator_f',\n                    'operator_m']\n\ndata_red","9f69f65b":"# L\u00f6sung 1\n\nplt.plot(data_red[\"year\"], data_red[\"manager_f\"], label = \"ManagerInnen (w)\")\nplt.plot(data_red[\"year\"], data_red[\"manager_m\"], label = \"ManagerInnen (m)\")\n\n# Hier habe ich noch zus\u00e4tzlich den Durchschnittslohn aller (also m und w) hinzugef\u00fcgt,\n# denn hier k\u00f6nnen wir auch anhand der N\u00e4he zu gewissen plots herleiten,\n# dass eine Gruppe zahlm\u00e4\u00dfig st\u00e4rker vertreten ist\nplt.plot(data_red[\"year\"], data[\"personmanagers\"], label = \"ManagerInnen (total)\")\n\n\nplt.title(\"Lohnentwicklung w vs m\")\nplt.xlabel(\"Jahr\")\nplt.ylabel(\"Stundenlohn in US $\")\nplt.legend()\n\nplt.style.use(\"seaborn\")\n\nplt.show()","9485c43c":"# L\u00f6sung 2\n# alternativ kann man Lohndifferenz auch vorher berechnen\nplt.plot(data_red[\"year\"], data_red[\"manager_m\"] - data_red[\"manager_f\"], label = \"ManagerInnen\")\nplt.plot(data_red[\"year\"], data_red[\"operator_m\"] - data_red[\"operator_f\"], label = \"OperatorInnen\")\n\n# Eine Hilfslinie, die uns die Nulllinie generiert\nplt.plot(data_red[\"year\"], np.zeros(len(data_red[\"year\"])), color = \"red\", linestyle = \"--\")\n\nplt.title(\"Lohndifferenz Entwicklung\")\nplt.ylabel(\"Differenz in US $\")\nplt.xlabel(\"Jahre\")\nplt.legend()\nplt.xlim(2004, 2017)\n\nplt.show()","ebff82f1":"# Hausaufgabe\n\n1. Finde heraus wieviele der Probanden regelm\u00e4\u00dfig fr\u00fchst\u00fccken\n2. Wie M\u00fcde f\u00fchlen sich die Probanden im Schnitt die fr\u00fchst\u00fccken?\n3. Was glaubst du: Welche Faktoren sind entscheidend, dass du dich tags\u00fcber fit f\u00fchlst? Versuche das mit den gegebenen Informationen zu begr\u00fcnden! Reduziert die Problemstellung auf die Features \"Hours\" und \"Breakfast\"","cf405f46":"### Im Folgenden werden die einzelnen Schritte Zelle f\u00fcr Zelle f\u00fcr ein vollst\u00e4ndiges Diagramm erweitert. Dies geschieht eigentlich alles in einer Zelle, soll ich aber dazu dienen die einzelnen Schritte besser nachzuvollziehen.\n\n#### Neue Schritte sind mit einem # markiert.","b8cad5dc":"# Aufgabe 2\n\n1)\nErstelle einen einfachen Plot, der die Lohnentwicklung \u00fcber die Jahre von Manager*innen (f und m) illustriert\n\n2)\nErstelle einen weiteren Plot, der die Lohndifferenzen zwischen female und male darstellt. Hierf\u00fcr wollen wir die Lohndifferenz f\u00fcr Manager und f\u00fcr Maschinenoperateur*innen in einem Plot haben\n\n** Sorge daf\u00fcr dass deine Plots alle wichtigen Informationen enthalten:**\n* Titel\n* Achsenbeschriftung\n* Legende und Label","d94980a8":"# Hausaugabe\n\n* Suche dir 5 Berufsgruppen heraus\n* Stelle die Lohndifferenz f\u00fcr das Jahr 2016 in einem S\u00e4ulendiagramm dar","19139466":"## PayGap-Datensatz","0676f7a3":"# Matplotlib\n### Datenvisualisierung","25ac85c6":"Der Datensatz ist viel zu klein, um anhand der Attribute eine verl\u00e4ssliche Aussage zu treffen.\n\nKonstruiert nicht einfach eine Vorhersage, ohne die Verl\u00e4sslichkeit eurer Aussage zu pr\u00fcfen.","5a6ba1e5":"Unterschiedliche Plot-Typen","c4542237":"# Aufgabe 1\n\n1)\n* \u00d6ffne den Datensatz \"\/kaggle\/input\/cusersmarildownloadsearningcsv\/earning.csv\". Beim \u00d6ffnen musst du den \"delimiter\" anders setzen\n* Schau dir den Datensatz zun\u00e4chst in Ruhe an. Nutze auch die info()-Funkion um dir einen \u00dcberblick zu verschaffen\n\n2)\nDer Datensatz enth\u00e4lt sehr viele Features. Wir wollen zun\u00e4chst nur ein paar Ausgew\u00e4hlte betrachten. Dazu bilde einen neuen DataFrame, der nun folgende Spalten vom Ursprungs-DataFrame enth\u00e4lt:\n* year\n* femalesmanagers \n* malemanagers\n* femalemachineryoperatorsanddrivers\n* malemachineryoperatorsanddrivers"}}