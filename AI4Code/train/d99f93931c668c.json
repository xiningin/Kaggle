{"cell_type":{"09c6cd06":"code","c32cd259":"code","c425ebb5":"code","03fbf55c":"code","9c4cd391":"code","c81a3fa6":"code","1b2e70b7":"code","d192352e":"code","db8fdeda":"code","60a86d78":"code","ea238ad5":"code","9a187502":"code","73b2b149":"code","07bbe941":"code","a38f22e8":"code","7dbda2c3":"code","8a6d03fe":"code","6f4838fb":"code","1afadc6d":"code","9aeeb216":"code","43b98408":"code","2eb6ee13":"code","b24215be":"code","8f460f4d":"code","793adae9":"code","2d24f292":"code","f73dcf3a":"code","19ef3cd8":"code","fdca9173":"markdown","a341c8dd":"markdown","872f50ad":"markdown","a6da5773":"markdown","7debdfa1":"markdown","e00620b1":"markdown","c9a151f5":"markdown","91a2ae1a":"markdown","8ca34498":"markdown","0b0db578":"markdown","2aaad109":"markdown","9f54a324":"markdown","6f775f51":"markdown","06459dcd":"markdown","0d528ad8":"markdown","efe6206c":"markdown","2c7956f8":"markdown","b70e07bb":"markdown","360c64f8":"markdown","e4284126":"markdown","1dba4d81":"markdown","39861e8a":"markdown"},"source":{"09c6cd06":"\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\\\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c32cd259":"pip install python-highcharts","c425ebb5":"from highcharts import Highchart","03fbf55c":"from sklearn.linear_model import LogisticRegression\nimport matplotlib.pyplot as plt","9c4cd391":"df=pd.read_csv('..\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')","c81a3fa6":"df.head()","1b2e70b7":"df.shape","d192352e":"print(df.hist())","db8fdeda":"df.isna().sum()","60a86d78":"gender_placed = df[df['gender'] == 'M'].status.value_counts().to_frame()\ngender_not_placed = df[df['gender'] == 'F'].status.value_counts().to_frame()\ngender_placed=gender_placed.merge(gender_not_placed,left_index=True,right_index=True,how='left').dropna()\ngender_placed.columns=['Male', 'Female',]\n\nH = Highchart(width=600,height=400)\n\noptions = {\n    'title': {\n        'text': 'Male vs Female Placements records(Placed or Not)'\n    },\n    'xAxis': {\n        'categories': ['Placed', 'Not Placed',],\n        'title': {\n            'text':None\n        }\n    },\n    'yAxis':{\n        'min': 0,\n        'title':{\n            'text': 'Respondents'\n        },\n        'labels': {\n            'overflow': 'justify'\n        }\n    },\n    'legend': {\n        'layout': 'vertical',\n        'align': 'right',\n        'verticalAlign': 'top',\n        'x': -40,\n        'y': 80,\n        'floating': True,\n        'borderWidth': 1,\n        'shadow': True\n    },\n    'credits': {\n        'enabled': False\n    },\n    'plotOptions': {\n        'bar': {\n            'dataLabels': {\n                'enabled': True\n            }\n        }\n    }\n}\n\nH.set_dict_options(options)\n\ndata1 = list(gender_placed['Male'])\ndata2 = list(gender_placed['Female'])\nH.add_data_set(data1,'bar','Male')\nH.add_data_set(data2,'bar','Female')\nH\n","ea238ad5":"placed = df[df['status'] == 'Placed'].ssc_b.value_counts().to_frame()\nnot_placed = df[df['status'] == 'Not Placed'].ssc_b.value_counts().to_frame()\nplaced=placed.merge(not_placed,left_index=True,right_index=True,how='left').dropna()\nplaced.columns=['placed','not placed']\n\nH = Highchart(width=600,height=400)\n\noptions = {\n    'title': {\n        'text': 'ssc_b Placements records(Placed or Not)'\n    },\n    'xAxis': {\n        'categories': list(placed.index),\n        'title': {\n            'text':None\n        }\n    },\n    'yAxis':{\n        'min': 0,\n        'title':{\n            'text': 'Count'\n        },\n        'labels': {\n            'overflow': 'justify'\n        }\n    },\n    'legend': {\n        'layout': 'vertical',\n        'align': 'right',\n        'verticalAlign': 'top',\n        'x': -40,\n        'y': 80,\n        'floating': True,\n        'borderWidth': 1,\n        'shadow': True\n    },\n    'credits': {\n        'enabled': False\n    },\n    'plotOptions': {\n        'bar': {\n            'dataLabels': {\n                'enabled': True\n            }\n        }\n    }\n}\n\nH.set_dict_options(options)\n\ndata1 = list(placed['placed'])\ndata2 = list(placed['not placed'])\nH.add_data_set(data1,'bar','placed')\nH.add_data_set(data2,'bar','not placed')\nH","9a187502":"hsc_b_placed = df[df['status'] == 'Placed'].hsc_b.value_counts().to_frame()\nhsc_b_not_placed = df[df['status'] == 'Not Placed'].hsc_b.value_counts().to_frame()\nhsc_b_placed=hsc_b_placed.merge(hsc_b_not_placed,left_index=True,right_index=True,how='left').dropna()\nhsc_b_placed.columns=['placed','not placed']\n\nH = Highchart(width=600,height=400)\n\noptions = {\n    'title': {\n        'text': 'hsc_b Placements records(Placed or Not)'\n    },\n    'xAxis': {\n        'categories': list(hsc_b_placed.index),\n        'title': {\n            'text':None\n        }\n    },\n    'yAxis':{\n        'min': 0,\n        'title':{\n            'text': 'Count'\n        },\n        'labels': {\n            'overflow': 'justify'\n        }\n    },\n    'legend': {\n        'layout': 'vertical',\n        'align': 'right',\n        'verticalAlign': 'top',\n        'x': -40,\n        'y': 80,\n        'floating': True,\n        'borderWidth': 1,\n        'shadow': True\n    },\n    'credits': {\n        'enabled': False\n    },\n    'plotOptions': {\n        'bar': {\n            'dataLabels': {\n                'enabled': True\n            }\n        }\n    }\n}\n\nH.set_dict_options(options)\n\ndata1 = list(hsc_b_placed['placed'])\ndata2 = list(hsc_b_placed['not placed'])\nH.add_data_set(data1,'bar','placed')\nH.add_data_set(data2,'bar','not placed')\nH","73b2b149":"hsc_splaced = df[df['status'] == 'Placed'].hsc_s.value_counts().to_frame()\nhsc_snot_placed = df[df['status'] == 'Not Placed'].hsc_s.value_counts().to_frame()\nhsc_splaced=hsc_splaced.merge(hsc_snot_placed,left_index=True,right_index=True,how='left').dropna()\nhsc_splaced.columns=['placed','not placed']\n\nH = Highchart(width=600,height=400)\n\noptions = {\n    'title': {\n        'text': 'hsc_s Placements records(Placed or Not)'\n    },\n    'xAxis': {\n        'categories': list(hsc_splaced.index),\n        'title': {\n            'text':None\n        }\n    },\n    'yAxis':{\n        'min': 0,\n        'title':{\n            'text': 'Count'\n        },\n        'labels': {\n            'overflow': 'justify'\n        }\n    },\n    'legend': {\n        'layout': 'vertical',\n        'align': 'right',\n        'verticalAlign': 'top',\n        'x': -40,\n        'y': 80,\n        'floating': True,\n        'borderWidth': 1,\n        'shadow': True\n    },\n    'credits': {\n        'enabled': False\n    },\n    'plotOptions': {\n        'bar': {\n            'dataLabels': {\n                'enabled': True\n            }\n        }\n    }\n}\n\nH.set_dict_options(options)\n\ndata1 = list(hsc_splaced['placed'])\ndata2 = list(hsc_splaced['not placed'])\nH.add_data_set(data1,'bar','placed')\nH.add_data_set(data2,'bar','not placed')\nH","07bbe941":"degree_tplaced = df[df['status'] == 'Placed'].degree_t.value_counts().to_frame()\ndegree_tnot_placed = df[df['status'] == 'Not Placed'].degree_t.value_counts().to_frame()\ndegree_tplaced=degree_tplaced.merge(degree_tnot_placed,left_index=True,right_index=True,how='left').dropna()\ndegree_tplaced.columns=['placed','not placed']\n\nH = Highchart(width=600,height=400)\n\noptions = {\n    'title': {\n        'text': 'degree_t Placements records(Placed or Not)'\n    },\n    'xAxis': {\n        'categories': list(degree_tplaced.index),\n        'title': {\n            'text':None\n        }\n    },\n    'yAxis':{\n        'min': 0,\n        'title':{\n            'text': 'Count'\n        },\n        'labels': {\n            'overflow': 'justify'\n        }\n    },\n    'legend': {\n        'layout': 'vertical',\n        'align': 'right',\n        'verticalAlign': 'top',\n        'x': -40,\n        'y': 80,\n        'floating': True,\n        'borderWidth': 1,\n        'shadow': True\n    },\n    'credits': {\n        'enabled': False\n    },\n    'plotOptions': {\n        'bar': {\n            'dataLabels': {\n                'enabled': True\n            }\n        }\n    }\n}\n\nH.set_dict_options(options)\n\ndata1 = list(degree_tplaced['placed'])\ndata2 = list(degree_tplaced['not placed'])\nH.add_data_set(data1,'bar','placed')\nH.add_data_set(data2,'bar','not placed')\nH","a38f22e8":"work = df['workex'].value_counts().to_frame()\nwork = pd.DataFrame({'Work_experience':work.index,'Count':work['workex']})\nwork.reset_index(drop=True, inplace=True)\n\nwork","7dbda2c3":"H = Highchart(width=450, height=400)\noptions = {\n    'title': {\n        'text':'Work experience'\n    },\n    'chart': {\n        'style': {\n            'fontFamily': '\\'Unica One\\', sans-serif'\n        },\n        'type': 'pie',\n        'options3d': {\n            'enabled': True,\n            'alpha': 45\n        }\n    },\n    'plotOptions': {\n        'pie': {\n            'innerSize': 100,\n            'depth': 45\n        }\n    },\n}\n\ndata1 = work.values.tolist()\n\nH.set_dict_options(options)\nH.add_data_set(data1, 'pie', 'Count')\n\nH","8a6d03fe":"placed = df[df['status'] == 'Placed'].workex.value_counts().to_frame()\nnot_placed = df[df['status'] == 'Not Placed'].workex.value_counts().to_frame()\nplaced=placed.merge(not_placed,left_index=True,right_index=True,how='left').dropna()\nplaced.columns=['placed','not placed']\n\nH = Highchart(width=600,height=400)\n\noptions = {\n    'title': {\n        'text': 'People with work experience Yes of No(Placed or Not)'\n    },\n    'xAxis': {\n        'categories': list(placed.index),\n        'title': {\n            'text':None\n        }\n    },\n    'yAxis':{\n        'min': 0,\n        'title':{\n            'text': 'Count'\n        },\n        'labels': {\n            'overflow': 'justify'\n        }\n    },\n    'legend': {\n        'layout': 'vertical',\n        'align': 'right',\n        'verticalAlign': 'top',\n        'x': -40,\n        'y': 80,\n        'floating': True,\n        'borderWidth': 1,\n        'shadow': True\n    },\n    'credits': {\n        'enabled': False\n    },\n    'plotOptions': {\n        'bar': {\n            'dataLabels': {\n                'enabled': True\n            }\n        }\n    }\n}\n\nH.set_dict_options(options)\n\ndata1 = list(placed['placed'])\ndata2 = list(placed['not placed'])\nH.add_data_set(data1,'bar','placed')\nH.add_data_set(data2,'bar','not placed')\nH\n","6f4838fb":"# dropping salary as we dont require it for our model building as it wont have any effecct on model   \ndf2 = df.drop(['salary'], axis = 1)","1afadc6d":"df2.shape","9aeeb216":"# checking null values in each feature of dataset\n\ndf2.isnull().sum()","43b98408":"# creating labels\n\ny = df2.status","2eb6ee13":"# checking dtype of evary \n\ndf2.dtypes","b24215be":"# encoding the string dtype to int. dtype\n\nfrom sklearn.preprocessing import LabelEncoder\nlb=LabelEncoder()\ndf2.gender=lb.fit_transform(df2.gender)\n\nle1=LabelEncoder()\ndf2.ssc_b=le1.fit_transform(df2.ssc_b)\n\nlb2=LabelEncoder()\ndf2.hsc_b=lb2.fit_transform(df2.hsc_b)\n\nle3=LabelEncoder()\ndf2.hsc_s=le3.fit_transform(df2.hsc_s)\n\nlb4=LabelEncoder()\ndf2.degree_t=lb4.fit_transform(df2.degree_t)\n\nle5=LabelEncoder()\ndf2.workex=le5.fit_transform(df2.workex)\n\nlb6=LabelEncoder()\ndf2.specialisation=lb6.fit_transform(df2.specialisation)\n\nlb_y=LabelEncoder()\ny=lb_y.fit_transform(df.status)\n","8f460f4d":"# dropping status from our datset as it is the prediction we need to make , hence it will be our label:\nx = df2.drop(['status'], axis = 1)\nx","793adae9":"\n\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ntransformer = MinMaxScaler()\ntransformer.fit(x)\nx = transformer.transform(x)\nx","2d24f292":"\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=10)\n# random_state shuffles the dataset randomly into training and testing ","f73dcf3a":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix ,classification_report,accuracy_score\nclf_rf = LogisticRegression()\n\nclf_rf.fit(x_train,y_train)\npred_r=clf_rf.predict(x_test)\nprint('accuracy score through random forest is ')\nprint(round((accuracy_score(y_test,pred_r)),3))\n\nprint(\"----------------------\")\nprint('classification report is:')\n\nprint(classification_report(y_test,pred_r))\nprint(\"----------------------\")\nprint('confusion matrix is:')\n\nprint(confusion_matrix(y_test,pred_r))\nprint('\\n')","19ef3cd8":"print(clf_rf.predict([[1,1,67.00,1,91.00,1,1,58.00,2,0,55.0,1,58.80]]))","fdca9173":"**scaling the features that we can input in classifier**","a341c8dd":"# **Anylasis of placed on basis of gender**","872f50ad":"**---------------------------------------------------------------------------------------------------------------------------------------------------------**","a6da5773":"**we see that the number of students in central board are more than number of students in others it might be because central board is easy.**","7debdfa1":"# **Anylasis of placement on basis of school in 10th class**","e00620b1":"# **On basis of degree_t & degree_p (Degree Type and Degree percentage)**","c9a151f5":"# **sample prediction:**","91a2ae1a":"**count of people having no experiece is more than that of having experiece**","8ca34498":"***whoo!!! the count of students placed form others school category is more than that of central which was not the case of students of 10th class.***","0b0db578":"**we interpret that the most demanded stream is commerce then science followed by arts**","2aaad109":"**from above representation we interpret that more males are placed than females**","9f54a324":"# **On basis of Work experience Vs Placement Status**","6f775f51":"**--------------------------------------------------------------------------------------------------------------------------------------------------**","06459dcd":"**** As in the above section we see that there are many features that have string dtype and machine learning does not read string type data  rather read only int. dtypes hence to convert them into int. dtype we need to  encode them using LabelEncoder**** ","0d528ad8":"**we see from above representation that ratio of people getting placed having experience to that of   people having not having experiece is high ,hence if a person have experience its highly possible he\/she gets placed**","efe6206c":"# Lets do some anylasis of placed and not placed with respective to features in the dataset","2c7956f8":"# **Anylasis of placement on basis of hsc_s (Specialization in Higher Secondary Education)** ","b70e07bb":"# BUILDING THE MODEL\n\n**1] we will be using logistic regression classifier**\n\n**2]**\n\n    **2.1]splitting the data set into train and test:**\n\n    **2.1.1]training dataset->80% of actual datset**\n\n    **2.1.2]testing dataset ->20% of actual dataset**","360c64f8":"**---------------------------------------------------------------------------------------------------------------------------------------------------------**","e4284126":"**-------------------------------------------------------------------------------------------------------------------------------------------**","1dba4d81":"# **Anylasis of placement on basis of school in 12th class**","39861e8a":"**---------------------------------------------------------------------------------------------------------------------------------------------------------**"}}