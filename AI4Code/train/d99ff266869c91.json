{"cell_type":{"56c6adc3":"code","b80c00d6":"code","5a1c0730":"code","e9cf50d0":"code","cafb447d":"code","65156477":"code","42cf53e4":"code","b7b60bb0":"code","892e72ca":"code","dedc7cbe":"code","e7e585bd":"code","a75f4cbe":"code","8e75e5c8":"code","ee43b21b":"code","9bdb230d":"code","22fc5e9c":"code","db6edb5c":"code","17fcfdbe":"markdown","9373fabf":"markdown"},"source":{"56c6adc3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport itertools\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b80c00d6":"# Load data\ndata1=pd.read_csv(\"..\/input\/cwurData.csv\")\ndata2=pd.read_csv(\"..\/input\/shanghaiData.csv\")\ndata3=pd.read_csv(\"..\/input\/timesData.csv\")","5a1c0730":"# analyzing data1\ndata1.info()","e9cf50d0":"data1.head()","cafb447d":"data1.tail()","65156477":"data1.corr()","42cf53e4":"#correleation map\nf,ax = plt.subplots(figsize=(18,18))\nsns.heatmap(data1.corr(),annot=True,linewidths=.3,fmt=\".1f\",ax=ax)","b7b60bb0":"data1.columns","892e72ca":"year_2012=data1[\"year\"]==2012\nyear_2013=data1[\"year\"]==2013\nyear_2014=data1[\"year\"]==2014\nyear_2015=data1[\"year\"]==2015","dedc7cbe":"data1[year_2015].world_rank.plot(kind = 'line', color = 'red',label = 'World rank',linewidth=1,alpha = 0.9,grid = True,linestyle = '-')\ndata1[year_2015].publications.plot(color = 'orange',label = 'Publications',linewidth=1, alpha = 0.9,grid = True,linestyle = '--')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('World rank-publications plot')            # title = title of plot\nplt.show()","e7e585bd":"data1[year_2015].plot(kind='scatter', x='publications', y='world_rank',alpha = 0.5,color = 'blue')\nplt.xlabel('Publications')              # label = name of label\nplt.ylabel('World rank')\nplt.title('World rank-publications with scatter plot')            # title = title of plot\nplt.show()","a75f4cbe":"data1[year_2015].score.plot(kind='hist',bins=20,figsize=(10,10),color='r')\nplt.show()","8e75e5c8":"data1[(data1[\"year\"]==2015) & (data1[\"country\"]==\"USA\") & (data1[\"world_rank\"]<11)]","ee43b21b":"# prepare data frame\ndf = data2.iloc[4397:4899,:]\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.pub,\n                    mode = \"lines\",\n                    name = \"publications\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df.university_name)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.award,\n                    mode = \"lines+markers\",\n                    name = \"Nobel prizes\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df.university_name)\ndata = [trace1, trace2]\nlayout = dict(title = 'Publications and Nobel Prizes - World Rank of Top 100 Universities in 2015',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","9bdb230d":"# prepare data frame\ndf2013 = data1[data1.year == 2013].iloc[:100,:]\ndf2014 = data1[data1.year == 2014].iloc[:100,:]\ndf2015 = data1[data1.year == 2015].iloc[:100,:]\n\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df2013.world_rank,\n                    y = df2013.publications,\n                    mode = \"markers\",\n                    name = \"2013\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df2013.institution)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df2014.world_rank,\n                    y = df2014.publications,\n                    mode = \"markers\",\n                    name = \"2014\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df2014.institution)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = df2015.world_rank,\n                    y = df2015.publications,\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= df2015.institution)\n\ndata = [trace1, trace2, trace3]\n\nlayout = dict(title = 'Publications of top 100 universities in 2013, 2014 2015',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Publications',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","22fc5e9c":"trace1 = go.Scatter3d(\n    x=df2015.national_rank,\n    y=df2015.alumni_employment,\n    z=df2015.score,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(200,0,0)',                     \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","db6edb5c":"feature_names = \"citations\",\"alumni_employment\",\"publications\",\"quality_of_education\"\nfeatures_size = [len(df2015.citations),len(df2015.alumni_employment),len(df2015.publications),len(df2015.quality_of_education)]\n# create a circle for the center of plot\ncircle = plt.Circle((0,0),0.4,color = \"white\")\nplt.pie(features_size, labels = feature_names, colors = [\"red\",\"green\",\"blue\",\"purple\"] )\np = plt.gcf()\np.gca().add_artist(circle)\nplt.title(\"Number of Each Features\")\nplt.show()","17fcfdbe":"HERE YOU CAN SEE MY ANALYSIS FOR WORLD UNIVERSITY RANKINGS. \n\nI WILL CONTINUE AND WORK ON IT.\n\nTHANK YOU FOR YOUR INTEREST!","9373fabf":"This dataset contains university rankings from very different places. "}}