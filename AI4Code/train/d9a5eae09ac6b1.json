{"cell_type":{"67439c15":"code","9288f378":"code","e18576b4":"code","09627dda":"code","348dc63b":"code","6b18b3c9":"code","9602245e":"code","ce00cbf5":"code","810a1f27":"code","eaaf2524":"code","b53b5b66":"code","2f51c718":"code","b3773121":"code","ff7a93fb":"code","02538c59":"code","95431128":"markdown","86bf0c05":"markdown","10cf0d3c":"markdown"},"source":{"67439c15":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","9288f378":"df = pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')\ndf","e18576b4":"df.dtypes","09627dda":"sns.countplot(df.diagnosis)","348dc63b":"from sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.decomposition import PCA\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler","6b18b3c9":"X = df.drop(columns=['id', 'diagnosis', 'Unnamed: 32'])\ny = df.diagnosis\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify=y, random_state=42)","9602245e":"pca = PCA(n_components=2, whiten=True)\nX_train_pca = pca.fit_transform(X_train)\nX_test_pca = pca.transform(X_test)","ce00cbf5":"X_train_pca.shape","810a1f27":"sns.scatterplot(X_train_pca[:, 0], X_train_pca[:, 1], hue=y_train)","eaaf2524":"X_train.columns","b53b5b66":"numerical_pipeline = Pipeline([\n    ('scaling', StandardScaler())\n])\n\n# categorical_pipeline = Pipeline([\n#     ('onehot', OneHotEncoder())\n# ])\n\npreprocessor = ColumnTransformer([\n    ('numeric', numerical_pipeline, X_train.columns),\n#     ('categoric', categorical_pipeline, ['diagnosis'])\n])\n\npipeline = Pipeline([\n    ('pre', preprocessor),\n    ('pca', PCA()),\n    ('algo', SVC(max_iter=500))\n])","2f51c718":"pipeline.get_params()","b3773121":"parameter = {\n    'pca__n_components' : [19],\n    'pca__whiten' : [True, False],\n    'algo__C': [0.1,1, 10, 100], \n    'algo__gamma': [1,0.1,0.01,0.001],\n}","ff7a93fb":"model = RandomizedSearchCV(pipeline, parameter, cv=3, n_iter=50, n_jobs=-1, verbose=1, random_state=42)\nmodel.fit(X_train, y_train)","02538c59":"print(model.best_params_)\nprint(model.score(X_train, y_train)), print(model.score(X_test, y_test))","95431128":"### **Check Balance Data**","86bf0c05":"### **Check Missing Value**","10cf0d3c":"### **Train Data**"}}