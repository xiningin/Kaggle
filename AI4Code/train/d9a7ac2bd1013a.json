{"cell_type":{"fd1aa30b":"code","3d7240d8":"code","fec27511":"code","24e814e6":"code","58639505":"code","08f9e41e":"code","bd7b4c0f":"code","dbb9d1ae":"code","a1c8dcf2":"code","19ed9dc8":"code","d0507ec7":"code","7cee233a":"code","be9f38c9":"code","1bbcbcd5":"code","624466d9":"code","d04ac652":"code","eb55dcd0":"code","db4eeaef":"code","8b5899ba":"code","64a76b51":"code","0b4121f4":"code","551b0920":"code","4db01250":"code","93b6beff":"code","2cdb5529":"code","d479230a":"code","c50e7827":"code","864c46ea":"code","f69c3f97":"code","39bbf403":"markdown","9b935aa9":"markdown","9e698131":"markdown","7a684ce8":"markdown","0984fff8":"markdown","02bb7bde":"markdown","f13f36ce":"markdown","ec1f1c98":"markdown","98c98df6":"markdown","97063702":"markdown","ecc1e935":"markdown","e9c33ddc":"markdown","a85c0b00":"markdown","31e439ab":"markdown","fa1dad15":"markdown","928c1628":"markdown","5b69b1cc":"markdown","c17de24c":"markdown","574c3040":"markdown","d43a9f00":"markdown","864a5f0f":"markdown"},"source":{"fd1aa30b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3d7240d8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime\n\n#Visualisation libraries\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\n\n\n# Increase the default plot size and set the color scheme\nplt.rcParams['figure.figsize'] = 8, 5\n# Settings for pretty nice plots\nplt.style.use('fivethirtyeight')\nplt.show()","fec27511":"train_df = pd.read_csv(\"\/kaggle\/input\/analytics-vidhya-jobathon-september-2021\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/analytics-vidhya-jobathon-september-2021\/test.csv\")\nsub_df = pd.read_csv(\"\/kaggle\/input\/analytics-vidhya-jobathon-september-2021\/sample_submission.csv\")","24e814e6":"train_df.head()","58639505":"test_df.head()","08f9e41e":"sub_df.head()","bd7b4c0f":"train_df['Date'].min(), train_df['Date'].max()","dbb9d1ae":"train_df.info()","a1c8dcf2":"print(train_df.shape, test_df.shape, sub_df.shape)","19ed9dc8":"# convert store_id as object\ntrain_df['Store_id'] = train_df['Store_id'].astype(str)\ntest_df['Store_id'] = test_df['Store_id'].astype(str)","d0507ec7":"!pip install sweetviz ","7cee233a":"# importing sweetviz\nimport sweetviz as sv\n\n#analyzing the dataset\ntrain_df_report = sv.analyze([train_df, \"Train\"])\n\n#display the report\ntrain_df_report.show_html('train_df_report.html')","be9f38c9":"test_df_report = sv.analyze([test_df, \"Test\"])\n#display the report\ntest_df_report.show_html('test_df_report.html')","1bbcbcd5":"train_test_report = sv.compare([train_df, \"Train\"] , [test_df, \"Test\"], \"Sales\")\ntrain_test_report.show_html('Train_Test_Report.html')","624466d9":"!pip install autoviz\n!pip install xlrd","d04ac652":"from autoviz.AutoViz_Class import AutoViz_Class\n\nAV = AutoViz_Class()","eb55dcd0":"filename = \"\/kaggle\/input\/analytics-vidhya-jobathon-september-2021\/train.csv\"\nsep = \",\"\ndft = AV.AutoViz(\n    filename,\n    sep=\",\",\n    depVar=\"\",\n    dfte=None,\n    header=0,\n    verbose=0,\n    lowess=False,\n    chart_format=\"svg\",\n    max_rows_analyzed=150000,\n    max_cols_analyzed=30,\n)","db4eeaef":"!pip install dtale","8b5899ba":"import dtale\ndtale.show(train_df)","64a76b51":"!pip install -U pandas-profiling","0b4121f4":"from pandas_profiling import ProfileReport\nprofile=ProfileReport(train_df,title='Pandas profiling report', explorative=True)\nprofile.to_file(output_file='Train_Profiling_Output.html')","551b0920":"profile","4db01250":"!pip install -U klib","93b6beff":"import klib","2cdb5529":"klib.cat_plot(train_df)","d479230a":"klib.corr_mat(train_df)","c50e7827":"klib.corr_plot(train_df)","864c46ea":"klib.dist_plot(train_df)","f69c3f97":"klib.missingval_plot(train_df)","39bbf403":"# Install Libraries","9b935aa9":"### For official documentation check this link:\n###  [klib \u00b7 PyPI](https:\/\/pypi.org\/project\/klib\/)","9e698131":"![image.png](attachment:3c53a782-22ac-4cda-ac3b-7665ba171cb1.png)","7a684ce8":"# SweetViz","0984fff8":"![sweetviz_2.JPG](attachment:93c83365-e5e4-46f1-b54f-9517ef4ad4a4.JPG)","02bb7bde":"# dtale","f13f36ce":"## If any other auto EDA packages are there which are not listed above. Please let me know in the comments section. I can experiment and run again!","ec1f1c98":"![image.png](attachment:e2eb17dc-1fec-4958-8817-b91e93d1f688.png)","98c98df6":"### For more information, check official documentation:\n\n### [sweetviz \u00b7 PyPI](https:\/\/pypi.org\/project\/sweetviz\/)","97063702":"![sweetviz_1.JPG](attachment:bd4fd775-5128-47b5-853f-7a036412fe21.JPG)","ecc1e935":"### For more information, check official documentation:\n\n### [autoviz \u00b7 PyPI](https:\/\/pypi.org\/project\/autoviz\/)","e9c33ddc":"# Pandas Profiling","a85c0b00":"## For official documentation check this link:\n\n### [pandas-profiling \u00b7 PyPI](https:\/\/pypi.org\/project\/pandas-profiling\/)","31e439ab":"# AutoViZ","fa1dad15":"### For official documentation check this link:\n\n### [dtale \u00b7 PyPI](https:\/\/pypi.org\/project\/dtale\/)","928c1628":"#### Train and Test comparision","5b69b1cc":"# Read the Data","c17de24c":"![image.png](attachment:e0ccbe9a-9efc-449a-88ff-7262fc02df6d.png)","574c3040":"![sweetviz_3.JPG](attachment:406f296e-465a-48bb-bf80-8f650a1f5e6a.JPG)","d43a9f00":"![image.png](attachment:1971f9c4-4998-43ed-8c6e-585bd4915205.png)","864a5f0f":"# klib"}}