{"cell_type":{"f766dd7c":"code","c4cb3952":"code","4e89a44e":"code","0f90fd5e":"code","3c24542c":"code","80a46d3d":"code","e8cdc539":"code","e0e415bb":"code","f3f59666":"code","7f93f932":"code","063df23c":"code","c4beb8aa":"code","6cafe51e":"code","ad339ba4":"code","8c6905c1":"code","f91fd132":"code","4946e11e":"code","26e0e483":"code","fde2a653":"code","1a2aeaf6":"code","bba18ba4":"code","16881ef2":"code","1a36dd39":"code","9a52f343":"code","3fde73b3":"code","6c30541d":"code","24290e30":"code","96ebca17":"code","de5fe5ff":"code","bd197661":"code","be68f199":"code","55e418e9":"code","b7e0697d":"code","d527bf9f":"code","861263e6":"code","46802e87":"code","128df6dc":"code","40df4cd3":"code","0cad3b98":"code","883eb166":"code","1e944884":"code","856251ba":"code","697a3a51":"code","0892aba7":"code","58fe2049":"code","33ff1562":"code","4b3c7270":"code","f4c4a3ef":"code","96d6a430":"code","6628c58f":"code","b5b84f3d":"code","2a94a7b3":"code","3a8deaaa":"code","10671c43":"code","d090b547":"code","b0fb9152":"code","c587cbd8":"code","dc327a31":"code","1ee2c5de":"code","7cd85c9b":"code","16bd2df6":"code","338f0927":"code","bc53ad25":"code","ddfc587f":"code","3c4a5bf6":"code","36332d9c":"code","254d2945":"code","777a0727":"code","214e3f06":"code","0efaa57b":"code","28ccd055":"code","bfca7a57":"code","c5bb0f5e":"code","b985f2c1":"code","6d5a947c":"code","be08f800":"code","87ee6063":"code","4e24d8c2":"code","415f1c57":"code","e757b4fd":"code","8ef4f62a":"code","a13440e9":"code","99c3c050":"code","7d06efc3":"code","096a277b":"code","d92f8e0c":"code","1702df27":"code","f65bcc09":"code","4fb12711":"code","08810f87":"code","f274a9f7":"code","c9a04504":"code","8923ea3b":"code","ae55c3f1":"code","706af212":"code","433102e9":"code","f263a7bf":"code","b50447aa":"code","3d4601f7":"code","9879fbcd":"code","7f57a009":"code","f3b14167":"code","25bd9bbc":"code","5d1dc903":"code","f7eb8ae3":"code","a1b59e89":"code","e22674a1":"code","3b65a63a":"code","c8b15f0d":"code","bde49734":"code","cd6463c3":"code","784c6ba1":"code","63c2976b":"code","16eacc44":"code","c05ae0a6":"code","d2c37e2b":"code","ebd3a07b":"code","c34d8d6a":"code","033e4d85":"code","9d150952":"code","968a8d94":"code","cfacef65":"code","b3003df9":"code","3ee81082":"code","264be211":"code","01c4e763":"code","b5ae7454":"code","9e1e077c":"code","9139e7e2":"code","2d182ca3":"code","c5ad8668":"code","8f83257f":"code","6f4387c5":"code","c4962da3":"code","63127bdf":"code","17cc1991":"code","294cd7f4":"code","70adc4d2":"code","2a7f57fd":"code","01820419":"code","b28b682b":"code","830a3025":"code","27d7a806":"code","9c084529":"code","919cd956":"code","2f0e2620":"code","be233a98":"code","c7aa3a94":"code","53c74a23":"code","dbbf2e40":"code","1ceead7c":"code","89293b0b":"code","a226d8d2":"code","5379ddf2":"code","d0a7f7c2":"code","9cc2d37f":"code","31ccea79":"code","630ca914":"code","c6f5d967":"code","2121e742":"code","fbd303a6":"code","3592a66d":"code","268b0ce6":"code","98215fa6":"code","ac8ac437":"code","4d1133fa":"code","9651a68c":"code","f0701c58":"code","cb72a4e4":"code","ce529df8":"code","b1f70ab8":"code","bca2593f":"code","31b27fe6":"code","e82518b3":"code","1d5b52ac":"code","5513ecf7":"code","281bccb6":"code","22493d42":"code","92b67763":"code","6280b912":"code","8b1773ba":"code","4ff33c07":"code","a3f9f6d7":"code","f062b70d":"code","ab497cf4":"code","9cbfa6aa":"code","419dedef":"code","aa37755b":"code","882b9dfa":"code","53d9b321":"code","92e3be02":"code","5b6a2489":"code","2972b6db":"code","24447b29":"code","8f6a912f":"code","51bc4a95":"code","72ab6108":"code","eda63eb7":"code","4cd63b81":"code","9406ff8b":"code","1600f1bd":"code","668f4ec8":"code","2e843891":"code","7acdc9c8":"code","1660bbf2":"code","fb88353f":"markdown","38a35a5d":"markdown","9e25d1ef":"markdown","5e918279":"markdown","23f7c28b":"markdown","1d4f95e4":"markdown","d1ba1b87":"markdown","eccdbca0":"markdown","4f890f7c":"markdown","c1412e44":"markdown","ec9a2628":"markdown","bfa59365":"markdown","1a8a1e47":"markdown","6ef3e39b":"markdown","416b8d14":"markdown","1a42d863":"markdown","a5344189":"markdown","0c23ca50":"markdown","1c5466ea":"markdown","4b129ffd":"markdown","beab133e":"markdown","b479b7fc":"markdown","ee2a7e71":"markdown","299e550c":"markdown","6b35e730":"markdown","361eebf1":"markdown","898d2c02":"markdown","66591909":"markdown","fb17b45b":"markdown","55f59a26":"markdown","4cdeae1c":"markdown","600af0f9":"markdown","4ca459fd":"markdown","9c149508":"markdown"},"source":{"f766dd7c":"![ -n \"$KAGGLE_WORKING_DIR\" ] && pip uninstall tensorflow keras -y && pip install tensorflow==1.15.0 keras==2.2.4","c4cb3952":"import gc\nimport os\nfrom pathlib import Path\nimport sys\n\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\n\nimport joblib\n# from sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import FeatureUnion, Pipeline, make_pipeline\n# from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder, QuantileTransformer\n# from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import SimpleImputer #, IterativeImputer, MissingIndicator\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.decomposition import TruncatedSVD\nimport category_encoders as ce\nimport lightgbm as lgbm\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier, FeaturesData, Pool\n\nfrom keras.layers import Input, Dense, Dropout, BatchNormalization\nfrom keras.optimizers import Adam, SGD, Nadam\nfrom keras.models import Model\nfrom keras.callbacks import EarlyStopping\nfrom keras import backend\nimport tensorflow as tf\n\nimport settings\nfrom features import Selector, Sub, Mul, Div, Grade, EmpLength, KFoldTargetEncoder, BasicDate,\\\n    LatLong, GdpAgg, ZipCodeType, ZipSummary, ZipFirstDigit, LocationType, MainState,\\\n    BasicTfidf, CatBoostEncoder, OrdinalEncoder, CountEncoder, TypeConverter\n    # Spi,","4e89a44e":"VERSION = \"15.1-ensemble-subgrade\"","0f90fd5e":"# Is this environment Kaggle kernel?\nIS_KAGGLE = \"KAGGLE_WORKING_DIR\" in os.environ\nprint(f\"IS_KAGGLE: {IS_KAGGLE}\")\n\n# GPU enviroment?\nUSE_GPU = \"NVIDIA_VISIBLE_DEVICES\" in os.environ\nprint(f\"USE_GPU: {USE_GPU}\")\n\n# Save and load interim data?\nUSE_CACHE = False\n# Do hyperparameter tuning?\nUSE_OPTUNA = False","3c24542c":"if USE_OPTUNA:\n    import optuna","80a46d3d":"model_dir = Path(\".\" if IS_KAGGLE else \"..\/output\/models\")\nmodel_dir.mkdir(parents=True, exist_ok=True)","e8cdc539":"settings.init(gdp=True, zip_code=True, spi=False)","e0e415bb":"X_train = settings.X_train\ny_train = settings.y_train\nX_test = settings.X_test\ndf_state = settings.df_state\ndf_gdp = settings.df_gdp\ndf_gdp_all = settings.df_gdp_all\ndf_zip = settings.df_zip\ndf_spi = settings.df_spi","f3f59666":"basic_date = BasicDate()","7f93f932":"X_train = X_train.join(basic_date.fit_transform(X_train))\nX_test = X_test.join(basic_date.transform(X_test))","063df23c":"del basic_date","c4beb8aa":"X_train.columns","6cafe51e":"# 2013\u5e74\u3088\u308a\u524d\u306f\u5927\u5206\u30c7\u30fc\u30bf\u50be\u5411\u9055\u3046\u306e\u3067\u3001\u9664\u5916\nX_train = X_train[X_train.issue_d_year >= 2013]\ny_train = y_train[X_train.index]","ad339ba4":"X_train = X_train.join(y_train)\nX_train.sort_values(\"issue_d\", inplace=True)\ny_train = X_train.loan_condition\nX_train.drop(columns=\"loan_condition\", inplace=True)","8c6905c1":"# \u3042\u307e\u308a\u306b\u3082\u4f8b\u5916\u7684\u306a\u5916\u308c\u5024\u306f\u9069\u5f53\u306a\u5024\u3067\u57cb\u3081\u308b\nX_train.loc[X_train.tot_coll_amt > 2500000, \"tot_coll_amt\"] =\\\nX_train.groupby(\"issue_d_yearmon\").tot_coll_amt.mean()[X_train.loc[X_train.tot_coll_amt > 2500000, \"issue_d_yearmon\"]]\n\n# \u3053\u308c\u306f2012\u5e74\n# X_train.loc[X_train.tot_cur_bal > 6e6]\n\n# \u30ea\u30dc\u5229\u7528\u7387100%\u30aa\u30fc\u30d0\u30fc\u7d50\u69cb\u5c45\u308b\u3051\u3069\u3001\u3069\u3046\u3044\u3046\u3053\u3068\uff1f\n# \u3068\u308a\u3042\u3048\u305a300\u30aa\u30fc\u30d0\u30fc\u3068\u304b\u306e\u3084\u3079\u30fc\u3084\u3064\u306f100\u306b\u3057\u3068\u304f\nX_train.loc[X_train.revol_util > 200, \"revol_util\"] = 100\n\nX_train.loc[X_train.acc_now_delinq > 10, \"acc_now_delinq\"] = 6","f91fd132":"main_state = MainState(df_zip=df_zip)","4946e11e":"X_train = X_train.join(main_state.fit_transform(X_train))\nX_test = X_test.join(main_state.transform(X_test))","26e0e483":"zip_1d = ZipFirstDigit(dtype=str)","fde2a653":"X_train[\"zip_1d\"] =zip_1d.fit_transform(X_train)\nX_test[\"zip_1d\"] = zip_1d.transform(X_test)","1a2aeaf6":"del main_state, zip_1d\ngc.collect()","bba18ba4":"# \u30ab\u30c6\u30b4\u30ea\u53d6\u5f97\nfeature_union1c = FeatureUnion([\n    # zip_code\u3092\u6587\u5b57\u5217\u306b\n    (\"zip_str\", TypeConverter(cols = [\"zip_code\"], dtype=str)),\n    # \u30ab\u30c6\u30b4\u30ea\u305d\u306e\u307e\u307e\n    (\"cat\", Selector(\n        cols = [\"grade\", \"sub_grade\", \"emp_length\", \"home_ownership\", \"addr_state\", \"purpose\",\n                \"initial_list_status\", \"application_type\", \"main_state\", \"zip_1d\"]\n    )),\n], n_jobs=None, verbose=True)","16881ef2":"# \u6b20\u640d\u5024\u88dc\u5b8c\npipe1c = make_pipeline(feature_union1c, SimpleImputer(strategy=\"constant\", fill_value=\"#\"))","1a36dd39":"X_train1c = pipe1c.fit_transform(X_train, y_train)","9a52f343":"X_test1c = pipe1c.transform(X_test)","3fde73b3":"type(X_test1c)","6c30541d":"X_test1c.dtype","24290e30":"feature_names1c = np.array(feature_union1c.get_feature_names())","96ebca17":"len(feature_names1c), X_train1c.shape, X_test1c.shape","de5fe5ff":"del feature_union1c, pipe1c\ngc.collect()","bd197661":"feature_union1 = FeatureUnion([\n    (\"selector\", Selector(\n        cols = [\"loan_amnt\", \"installment\", \"annual_inc\", \"zip_code\", \"dti\", \"delinq_2yrs\", \"inq_last_6mths\",\n                \"mths_since_last_delinq\", \"mths_since_last_record\", \"open_acc\", \"pub_rec\", \"revol_bal\",\n                \"revol_util\", \"total_acc\", \"collections_12_mths_ex_med\", \"mths_since_last_major_derog\",\n#                 \"acc_now_delinq\",\n                \"tot_coll_amt\", \"tot_cur_bal\", \"issue_d_yearmon\", \"issue_d_year\", \"issue_d_month\",\n                \"earliest_cr_line_yearmon\", \"earliest_cr_line_year\", \"earliest_cr_line_month\"]\n    )),\n    (\"sub\", Sub(\n        # \u5e74\u53ce\u5165 - \u30ed\u30fc\u30f3\u984d\n        # \u5e74\u53ce\u5165 - \u30ea\u30dc\u984d\n        # \u6b8b\u9ad8 - \u30ed\u30fc\u30f3\u984d\n        # \u6708\u53ce\u5165 - \u6708\u652f\u6255\u984d\n        # \u958b\u8a2d\u53e3\u5ea7\u6570 - \u30aa\u30fc\u30d7\u30f3\u306a\u53e3\u5ea7\u6570\n        # \u7533\u8fbc\u65e5 - \u53e3\u5ea7\u958b\u8a2d\u65e5 (\u591a\u5206\u5e74\u9f62\u7684\u306a\u4f55\u304b\u306b\u306a\u308b\u306e\u3067\u306f)\n        x1 = [\"annual_inc\", \"annual_inc\", \"tot_cur_bal\", \"annual_inc\", \"total_acc\", \"issue_d_yearmon\"],\n        x2 = [\"loan_amnt\", \"revol_bal\", \"loan_amnt\", \"installment\", \"open_acc\", \"earliest_cr_line_yearmon\"],\n        a1 = [1, 1, 1, 1\/12, 1, 1],\n        a2 = [1, 1, 1, 1, 1, 1]\n    )),\n    (\"mul\", Mul(\n        # \u30ea\u30dc\u6b8b\u9ad8 * \u30ea\u30dc\u5229\u7528\u7387\n        x1 = [\"revol_bal\"],\n        x2 = [\"revol_util\"]\n    )),\n    (\"div\", Div(\n        # \u5e74\u53ce\u5165 \/ \u30ed\u30fc\u30f3\u984d (\u5e74\u53ce\u5165\u306f0\u3042\u308a\u3048\u308b\u306e\u3067\u5206\u6bcd\u306b\u3057\u305f\u304f\u306a\u3044)\n        # \u5e74\u53ce\u5165 \/ \u30ea\u30dc\u984d\n        # \u6b8b\u9ad8 \/ \u30ed\u30fc\u30f3\u984d\n        # \u5e74\u53ce\u5165 \/ \u6708\u652f\u6255\u984d\n        # \u30aa\u30fc\u30d7\u30f3\u306a\u53e3\u5ea7\u6570 \/ \u958b\u8a2d\u53e3\u5ea7\u6570\n        # \u3084\u3079\u30fc\u53e3\u5ea7\u6570 \/ \u30aa\u30fc\u30d7\u30f3\u53e3\u5ea7\u6570\n        x1 = [\"annual_inc\", \"annual_inc\", \"tot_cur_bal\", \"annual_inc\", \"open_acc\",\n#               \"acc_now_delinq\"\n             ],\n        x2 = [\"loan_amnt\", \"revol_bal\", \"loan_amnt\", \"installment\", \"total_acc\",\n#               \"open_acc\"\n             ]\n    )),\n    (\"grade\", Grade()),\n    (\"emp_length\", EmpLength()),\n#     (\"spi\", Spi(df_spi=df_spi)),\n    (\"lat_long\", LatLong(df_state=df_state)),\n    (\"gdp_agg\", GdpAgg(df_gdp=df_gdp)),\n    (\"zip_code_type\", ZipCodeType(df_zip=df_zip)),\n    (\"zip_summary\", ZipSummary(df_zip=df_zip)),\n    (\"location_type\", LocationType(df_zip=df_zip)),\n    (\"zip_1d\", ZipFirstDigit())\n], n_jobs=None, verbose=True)","be68f199":"X_train1 = feature_union1.fit_transform(X_train, y_train)","55e418e9":"X_test1 = feature_union1.transform(X_test)","b7e0697d":"feature_names1 = np.array(feature_union1.get_feature_names())","d527bf9f":"type(X_train1), type(X_test1), X_train1.dtype, X_test1.dtype, X_train1.shape, X_test1.shape, feature_names1.shape","861263e6":"X_train1 = X_train1.astype(np.float32)\nX_test1 = X_test1.astype(np.float32)","46802e87":"del feature_union1, df_spi, df_state, df_gdp, df_gdp_all, df_zip, settings #, mask\ngc.collect()","128df6dc":"X = X_train.append(X_test)","40df4cd3":"# \u5206\u5272\u5272\u5408\u6c7a\u3081\u308b\nsplit_point = int(len(X_train) * .75)","0cad3b98":"y_train_ =  y_train[:split_point]\ny_val_ = y_train[split_point:]","883eb166":"X1c = np.vstack([X_train1c, X_test1c])","1e944884":"X1c.shape","856251ba":"ohe = OneHotEncoder(dtype=np.float32)","697a3a51":"X1_ohe = ohe.fit_transform(X1c)","0892aba7":"X1_ohe","58fe2049":"del X1c, ohe \ngc.collect()","33ff1562":"X.emp_title.fillna(\"null\", inplace=True)","4b3c7270":"tfidf_e = TfidfVectorizer(ngram_range=(1, 2), max_features=10000, use_idf=True)","f4c4a3ef":"X_emp = tfidf_e.fit_transform(X.emp_title)","96d6a430":"X_emp","6628c58f":"X_train_emp = X_emp[:len(X_train)]","b5b84f3d":"feature_names_emp = tfidf_e.get_feature_names()","2a94a7b3":"del tfidf_e\ngc.collect()","3a8deaaa":"X_train_ = X_train_emp[:split_point]\nX_val_ = X_train_emp[split_point:]","10671c43":"X_train_.shape, X_val_.shape, y_train_.shape, y_val_.shape","d090b547":"X_train_","b0fb9152":"clf = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.9,\n                     importance_type='gain', learning_rate=0.05, max_depth=-1,\n                     min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                     n_estimators=9999, n_jobs=-1, num_leaves=15, objective=None,\n                     random_state=71, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n                     subsample=1.0, subsample_for_bin=200000, subsample_freq=0)","c587cbd8":"%%time\nclf.fit(X_train_, y_train_, early_stopping_rounds=20, eval_metric=\"auc\", eval_set=[(X_val_, y_val_)], verbose=100)","dc327a31":"del X_train_, X_val_\ngc.collect()","1ee2c5de":"clf = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.9,\n                     importance_type='gain', learning_rate=0.05, max_depth=-1,\n                     min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                     n_estimators=clf.best_iteration_, n_jobs=-1, num_leaves=15, objective=None,\n                     random_state=71, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n                     subsample=1.0, subsample_for_bin=200000, subsample_freq=0)","7cd85c9b":"sfm = SelectFromModel(clf)","16bd2df6":"sfm.fit(X_train_emp, y_train)","338f0927":"del X_train_emp","bc53ad25":"X_emp_selected = sfm.transform(X_emp)","ddfc587f":"del X_emp\ngc.collect()","3c4a5bf6":"X_emp_selected","36332d9c":"feature_names_emp_s = pd.Series(feature_names_emp)[sfm.get_support()]","254d2945":"feature_names_emp_s.to_csv(model_dir \/ \"emp_title_important.csv\")","777a0727":"# \u5f8c\u3067\u4f7f\u3046\u304b\u3082\ndel feature_names_emp_s","214e3f06":"del clf, sfm, feature_names_emp\ngc.collect()","0efaa57b":"svd = TruncatedSVD(n_components=100)","28ccd055":"X_emp_svd = svd.fit_transform(X_emp_selected)","bfca7a57":"X_emp_svd.shape","c5bb0f5e":"X_train_emp_svd = X_emp_svd[:len(X_train)]\nX_test_emp_svd = X_emp_svd[len(X_train):]","b985f2c1":"feature_names_svd = np.array([f\"svd_{i}\" for i in range(svd.n_components)])","6d5a947c":"X_train_emp_svd = X_train_emp_svd.astype(np.float32)\nX_test_emp_svd = X_test_emp_svd.astype(np.float32)","be08f800":"# \u5f8c\u3067\u4f7f\u3046\u304b\u3082\ndel X_emp_selected","87ee6063":"del X_emp_svd, svd\ngc.collect()","4e24d8c2":"if not IS_KAGGLE and USE_CACHE:\n    joblib.dump(X_train_emp_svd, model_dir \/ \"X_train_emp_svd.joblib\", compress=3)\n    joblib.dump(X_test_emp_svd, model_dir \/ \"X_test_emp_svd.joblib\", compress=3)\n    joblib.dump(feature_names_svd, model_dir \/ \"feature_names_svd.joblib\", compress=3)","415f1c57":"# \u9014\u4e2d\u304b\u3089\u8aad\u307f\u8fbc\u307f\u3057\u3066\u6642\u9593\u77ed\u7e2e\u3059\u308b\u7528\nif not IS_KAGGLE and USE_CACHE:\n    X_train_emp_svd = joblib.load(model_dir \/ \"X_train_emp_svd.joblib\")\n    X_test_emp_svd = joblib.load(model_dir \/ \"X_test_emp_svd.joblib\")\n    feature_names_svd = joblib.load(model_dir \/ \"feature_names_svd.joblib\")","e757b4fd":"feature_union2 = FeatureUnion([\n    (\"oe\", OrdinalEncoder(\n        cols=[\"home_ownership\", \"zip_code\", \"addr_state\", \"purpose\",\n              \"initial_list_status\",\n#               \"application_type\",\n              \"main_state\"],\n        return_df=False\n    )),\n    (\"ce\", CountEncoder(\n        cols=[\"grade\", \"sub_grade\", \"emp_length\", \"home_ownership\", \"zip_code\", \"addr_state\", \"purpose\",\n#               \"initial_list_status\", \"application_type\",\n              \"main_state\"] \n    ))\n], n_jobs=None, verbose=True)","8ef4f62a":"X2 = feature_union2.fit_transform(X).astype(np.float32)","a13440e9":"X2.shape, X2.dtype","99c3c050":"del X\ngc.collect()","7d06efc3":"X1 = np.vstack([X_train1, X_test1])","096a277b":"idx = np.where(np.isnan(X1))\nX1[idx] = np.take(np.nanmedian(X1, axis=0), idx[1])","d92f8e0c":"del idx","1702df27":"rank_gauss = QuantileTransformer(output_distribution=\"normal\", random_state=81, copy=False)","f65bcc09":"X1","4fb12711":"rank_gauss.fit_transform(X1)","08810f87":"del rank_gauss\ngc.collect()","f274a9f7":"# NN\u7528\u306b\u7d50\u5408\nX_nn = sp.sparse.hstack([X1_ohe, X1], format=\"csr\")","c9a04504":"del X1, X1_ohe\ngc.collect()","8923ea3b":"X_train_nn_ = sp.sparse.hstack([X_nn[:split_point], X_train_emp_svd[:split_point]],\n                               format=\"csr\", dtype=np.float32)","ae55c3f1":"X_val_nn_ = sp.sparse.hstack([X_nn[split_point:len(X_train)], X_train_emp_svd[split_point:]],\n                               format=\"csr\", dtype=np.float32)","706af212":"X_test_nn = sp.sparse.hstack([X_nn[len(X_train):], X_test_emp_svd],\n                               format=\"csr\", dtype=np.float32)","433102e9":"del X_nn\ngc.collect()","f263a7bf":"X_train_nn_.shape, X_val_nn_.shape, X_test_nn.shape","b50447aa":"# GPU\u30e1\u30e2\u30ea\u98df\u3044\u5c3d\u304f\u3055\u308c\u308b\u3068CatBoost\u304c\u6b7b\u306c\u306e\u3067\u52d5\u7684\u30e1\u30e2\u30ea\u78ba\u4fdd\u306b\u3059\u308b\nconfig = tf.ConfigProto()\nconfig.gpu_options.allow_growth = True","3d4601f7":"sess = tf.Session(config=config)\nbackend.tensorflow_backend.set_session(sess)","9879fbcd":"# \u30b7\u30f3\u30d7\u30eb\u306aMLP\n\ndef create_model(input_dim):\n    inp = Input(shape=(input_dim,), sparse=True) # \u758e\u884c\u5217\u3092\u5165\u308c\u308b\n    x = Dense(192, activation='relu')(inp)\n    x = BatchNormalization()(x)\n    x = Dropout(0.2)(x)\n    x = Dense(64, activation='relu')(x)\n    x = BatchNormalization()(x)\n    x = Dropout(0.2)(x)\n    x = Dense(64, activation='relu')(x)\n    x = BatchNormalization()(x)\n    x = Dropout(0.2)(x)\n    outp = Dense(1, activation='sigmoid')(x)\n    model = Model(inputs=inp, outputs=outp)\n    model.compile(loss='binary_crossentropy', optimizer='nadam')\n    \n    return model","7f57a009":"model = create_model(X_train_nn_.shape[1])","f3b14167":"if USE_OPTUNA:\n    es = EarlyStopping(monitor='val_loss', patience=5, verbose=0)\n    model.fit(X_train_nn_, y_train_, batch_size=32, epochs=99, validation_data=(X_val_nn_, y_val_), callbacks=[es])\n    roc_auc_score(y_val_, model.predict(X_val_))","25bd9bbc":"%%time\nmodel.fit(sp.sparse.vstack([X_train_nn_, X_val_nn_]), y_train, batch_size=32, epochs=8 if IS_KAGGLE else 1)","5d1dc903":"y_pred_nn = model.predict(X_test_nn).flatten()","f7eb8ae3":"backend.clear_session()","a1b59e89":"del X_train_nn_, X_val_nn_, X_test_nn\ngc.collect()","e22674a1":"X_train2 = X2[:len(X_train)]\nX_test2 = X2[len(X_train):]","3b65a63a":"del X2\ngc.collect()","c8b15f0d":"X_train2m = np.hstack([X_train1, X_train2, X_train_emp_svd])\nX_test2m = np.hstack([X_test1, X_test2, X_test_emp_svd])","bde49734":"X_test2m.dtype","cd6463c3":"# \u5f8c\u3067\u4f7f\u3046\u304b\u3082\ndel X_train1, X_train2, X_test1, X_test2","784c6ba1":"del X_train_emp_svd, X_test_emp_svd\ngc.collect()","63c2976b":"X_train2m.shape, X_test2m.shape","16eacc44":"feature_names2 = np.hstack([np.array(feature_union2.get_feature_names()), feature_names_svd])","c05ae0a6":"del feature_union2, feature_names_svd\ngc.collect()","d2c37e2b":"# feature_names1 \u306e\u5217\u6570\u306f\u542b\u307e\u306a\u3044\nlen(feature_names2), X_train2m.shape, X_test2m.shape","ebd3a07b":"# \u5b9f\u884c\u6e08\u307f\n# split_point = int(len(X_train) * .75)\n\nX_train_ = X_train2m[:split_point]\nX_val_ = X_train2m[split_point:]\nX_train1c_ = X_train1c[:split_point]\nX_val1c_ = X_train1c[split_point:]","c34d8d6a":"X_train_.shape, X_val_.shape, X_train1c_.shape, X_val1c_.shape, y_train_.shape, y_val_.shape","033e4d85":"# \u7279\u5fb4\u91cf\u4f5c\u6210\u7528\u306b\u3082\u5206\u5272\nX_train_orig_ =  X_train[:split_point]\nX_val_orig_ = X_train[split_point:]","9d150952":"feature_union3 = FeatureUnion([\n    (\"te\", KFoldTargetEncoder(\n        cols = [\"grade\", \"sub_grade\", \"emp_length\", \"home_ownership\", \"zip_code\", \"addr_state\", \"purpose\",\n                \"initial_list_status\", \"application_type\", \"main_state\"],\n        smoothing=.8\n    )),\n], n_jobs=None, verbose=True)","968a8d94":"feature_union3_cbe = FeatureUnion([\n    (\"cbe\", CatBoostEncoder(\n        cols = [\"grade\", \"sub_grade\", \"emp_length\", \"home_ownership\", \"zip_code\", \"addr_state\", \"purpose\",\n                \"initial_list_status\", \"application_type\", \"main_state\"],\n        return_df=False, a=1.8\n    )),\n], n_jobs=None, verbose=True)","cfacef65":"X_train3_ = feature_union3.fit_transform(X_train_orig_, y_train_).astype(np.float32)","b3003df9":"X_val3_ = feature_union3.transform(X_val_orig_).astype(np.float32)","3ee81082":"X_train3_cbe_ = feature_union3_cbe.fit_transform(X_train_orig_, y_train_).astype(np.float32)","264be211":"X_val3_cbe_ = feature_union3_cbe.transform(X_val_orig_).astype(np.float32)","01c4e763":"del X_train_orig_, X_val_orig_\ngc.collect()","b5ae7454":"feature_names3 = np.array(feature_union3.get_feature_names())\nfeature_names3_cbe = np.array(feature_union3_cbe.get_feature_names())","9e1e077c":"feature_names3.shape, feature_names3_cbe.shape, X_train3_.shape, X_train3_cbe_.shape, X_val3_.shape, X_val3_cbe_.shape","9139e7e2":"X_train_ = np.hstack([X_train_, X_train3_])\nX_val_ = np.hstack([X_val_, X_val3_])","2d182ca3":"feature_names = np.hstack([feature_names1, feature_names2, feature_names3])","c5ad8668":"X_train_.shape, X_val_.shape, feature_names.shape, X_train_.dtype, X_val_.dtype, y_train_.shape, y_val_.shape","8f83257f":"del X_train3_, X_val3_, feature_names3\ngc.collect()","6f4387c5":"X_train3 = feature_union3.fit_transform(X_train, y_train).astype(np.float32)","c4962da3":"# \u4eca\u4f7f\u308f\u306a\u3044\u3051\u3069 X_train \u6d88\u3057\u305f\u3044\u304b\u3089\u5148\u306b\u8a08\u7b97\u3059\u308b\nX_train3_cbe = feature_union3_cbe.fit_transform(X_train, y_train).astype(np.float32)","63127bdf":"X_test3 = feature_union3.transform(X_test).astype(np.float32)","17cc1991":"# \u4eca\u4f7f\u308f\u306a\u3044\u3051\u3069\u7565\nX_test3_cbe = feature_union3_cbe.transform(X_test).astype(np.float32)","294cd7f4":"X_train3.shape, X_test3.shape","70adc4d2":"X_train3m = np.hstack([X_train2m, X_train3])\nX_test3m = np.hstack([X_test2m, X_test3])","2a7f57fd":"X_train3m.dtype, X_test3m.dtype","01820419":"del X_train3, X_test3, X_train2m, X_test2m\ngc.collect()","b28b682b":"X_train_cbe_ = np.hstack([X_train_, X_train3_cbe_])\nX_val_cbe_ = np.hstack([X_val_, X_val3_cbe_])","830a3025":"feature_names_cbe = np.hstack([feature_names, feature_names3_cbe])","27d7a806":"del X_train3_cbe_, X_val3_cbe_, feature_names3_cbe\ngc.collect()","9c084529":"X_train3m_cbe = np.hstack([X_train3m, X_train3_cbe])\nX_test3m_cbe = np.hstack([X_test3m, X_test3_cbe])","919cd956":"del X_train3_cbe, X_test3_cbe\ngc.collect()","2f0e2620":"grade = Grade()","be233a98":"grade_train = grade.fit_transform(X_train)","c7aa3a94":"del X_train\ngc.collect()","53c74a23":"grade_test = grade.transform(X_test)","dbbf2e40":"# grade, sub_grade \u3092\u9664\u5916\nX_train3m_sg = np.delete(X_train3m_cbe, np.flatnonzero(np.char.find(feature_names_cbe, \"grade\") != -1), axis=1)\nX_test3m_sg = np.delete(X_test3m_cbe, np.flatnonzero(np.char.find(feature_names_cbe, \"grade\") != -1), axis=1)","1ceead7c":"feature_names_sg = np.delete(feature_names_cbe, np.flatnonzero(np.char.find(feature_names_cbe, \"grade\") != -1),\n                             axis=0)","89293b0b":"X_test3m_sg.shape","a226d8d2":"train_data = lgbm.Dataset(\n    data=X_train3m_sg,\n    label=grade_train.sub_grade,\n    feature_name=feature_names_sg.tolist(),\n)\n\nval_data = lgbm.Dataset(\n    data=X_test3m_sg,\n    label=grade_test.sub_grade,\n    feature_name=feature_names_sg.tolist(),\n    reference=train_data\n)","5379ddf2":"params = {\n    \"objective\": \"regression\",\n    \"learning_rate\": .05,\n    \"tree_learner\": \"data\",\n    \"device_type\": \"cpu\",\n#     \"num_leaves\": 28,\n    \"seed\": 71,\n    \"colsample_bytree\": .9,\n#     \"min_data_in_leaf\": 968,\n    \"metric\": [\"l2\", \"rmse\"]\n}","d0a7f7c2":"clf = lgbm.train(params=params, train_set=train_data, num_boost_round=9999, valid_sets=[val_data],\n                 early_stopping_rounds=100, verbose_eval=100)","9cc2d37f":"grade_train_pred = clf.predict(X_train3m_sg).astype(np.float32).reshape(-1, 1)\ngrade_test_pred = clf.predict(X_test3m_sg).astype(np.float32).reshape(-1, 1)","31ccea79":"grade_train_pred = joblib.load(model_dir \/ \"grade_train_pred-13.2-predict-subgrade.joblib\")\ngrade_test_pred = joblib.load(model_dir \/ \"grade_test_pred-13.2-predict-subgrade.joblib\")","630ca914":"grade_train_pred = grade_train_pred.astype(np.float32).reshape(-1, 1)\ngrade_test_pred = grade_test_pred.astype(np.float32).reshape(-1, 1)","c6f5d967":"X_train_cbe_add_g_ = np.hstack([X_train_cbe_, grade_train_pred[:split_point]])\nX_val_cbe_add_g_ = np.hstack([X_val_cbe_, grade_train_pred[split_point:]])","2121e742":"del X_train_cbe_, X_val_cbe_\ngc.collect()","fbd303a6":"feature_names_cbe_add_g = np.append(feature_names_cbe, \"sub_grade_pred\")","3592a66d":"train_data = lgbm.Dataset(\n    data= X_train_cbe_add_g_,\n    label=y_train_,\n    feature_name=feature_names_cbe_add_g.tolist(),\n)\n\nval_data = lgbm.Dataset(\n    data= X_val_cbe_add_g_,\n    label=y_val_,\n    feature_name=feature_names_cbe_add_g.tolist(),\n    reference=train_data\n)","268b0ce6":"params = {\n    \"objective\": \"binary\",\n    \"learning_rate\": .01,\n    \"tree_learner\": \"data\",\n    \"device_type\": \"cpu\",\n    \"num_leaves\": 76,\n    \"max_depth\": 7,\n    \"seed\": 71,\n    \"colsample_bytree\": .6,\n#     \"min_data_in_leaf\": 968,\n    \"metric\": [\"auc\", \"binary_logloss\"]\n}","98215fa6":"clf = lgbm.train(params=params, train_set=train_data, num_boost_round=9999, valid_sets=[val_data],\n                 early_stopping_rounds=100, verbose_eval=100)","ac8ac437":"best_iteration = clf.best_iteration","4d1133fa":"del X_train_cbe_add_g_, X_val_cbe_add_g_, train_data, val_data\ngc.collect()","9651a68c":"X_train3m_cbe_add_g = np.hstack([X_train3m_cbe, grade_train_pred])","f0701c58":"del X_train3m_cbe\ngc.collect()","cb72a4e4":"train_data = lgbm.Dataset(\n    data= X_train3m_cbe_add_g,\n    label=y_train,\n    feature_name=feature_names_cbe_add_g.tolist(),\n#     categorical_feature=feature_names_oe\n)","ce529df8":"clf = lgbm.train(params=params, train_set=train_data, num_boost_round=best_iteration)","b1f70ab8":"X_test3m_cbe_add_g = np.hstack([X_test3m_cbe, grade_test_pred])","bca2593f":"y_pred_lgbm = clf.predict(X_test3m_cbe_add_g)","31b27fe6":"del X_train3m_cbe_add_g, train_data, X_test3m_cbe_add_g, X_test3m_cbe, clf\ngc.collect()","e82518b3":"X_train_add_g_ = np.hstack([X_train_, grade_train_pred[:split_point]])\nX_val_add_g_ = np.hstack([X_val_, grade_train_pred[split_point:]])","1d5b52ac":"del X_train_, X_val_\ngc.collect()","5513ecf7":"feature_names_add_g = np.append(feature_names, \"sub_grade_pred\")","281bccb6":"train_data = Pool(\n    data=FeaturesData(\n        num_feature_data=X_train_add_g_,\n        cat_feature_data=X_train1c_,\n        num_feature_names=feature_names_add_g.tolist(),\n        cat_feature_names=feature_names1c.tolist()\n    ),\n    label=y_train_\n)\n\nval_data = Pool(\n    FeaturesData(\n        num_feature_data=X_val_add_g_,\n        cat_feature_data=X_val1c_,\n        num_feature_names=feature_names_add_g.tolist(),\n        cat_feature_names=feature_names1c.tolist()\n    ),\n    label=y_val_\n)","22493d42":"task_type=\"GPU\" if USE_GPU else \"CPU\"","92b67763":"clf = CatBoostClassifier(custom_metric=[\"Logloss\", \"AUC\"], iterations=9999, task_type=task_type,\n                         random_seed=114, early_stopping_rounds=100, verbose=100, thread_count=-1\n                        )","6280b912":"%%time\nclf.fit(train_data, eval_set=val_data)","8b1773ba":"clf.best_score_","4ff33c07":"del X_train1c_, X_val1c_, train_data, val_data\ngc.collect()","a3f9f6d7":"best_iteration = clf.best_iteration_","f062b70d":"del clf, X_train_add_g_, X_val_add_g_\ngc.collect()","ab497cf4":"X_train3m_add_g = np.hstack([X_train3m, grade_train_pred])","9cbfa6aa":"del X_traim3m\ngc.collect()","419dedef":"train_data = Pool(\n    data=FeaturesData(\n        num_feature_data=X_train3m_add_g,\n        cat_feature_data=X_train1c,\n        num_feature_names=feature_names_add_g.tolist(),\n        cat_feature_names=feature_names1c.tolist()\n    ),\n    label=y_train\n)","aa37755b":"clf = CatBoostClassifier(custom_metric=[\"Logloss\", \"AUC\"], iterations=best_iteration, task_type=task_type,\n                         random_seed=114, early_stopping_rounds=100, verbose=100, thread_count=-1\n                        )","882b9dfa":"%%time\nclf.fit(train_data)","53d9b321":"del train_data, X_train1c, X_train3m_add_g\ngc.collect()","92e3be02":"X_test3m_add_g = np.hstack([X_test3m, grade_test_pred])","5b6a2489":"test_data = Pool(\n    data=FeaturesData(\n        num_feature_data=X_test3m_add_g,\n        cat_feature_data=X_test1c,\n        num_feature_names=feature_names_add_g.tolist(),\n        cat_feature_names=feature_names1c.tolist()\n    )\n)","2972b6db":"y_pred_cat = clf.predict_proba(test_data)[:, 1]","24447b29":"joblib.dump(clf, model_dir \/ f\"model-catboost-{VERSION}.joblib\", compress=3)","8f6a912f":"del test_data, X_test1c, X_test3m_add_g, X_test3m\ngc.collect()","51bc4a95":"y_pred_nn = y_pred_nn.astype(np.float64)","72ab6108":"def rank(arr):\n    return sp.stats.mstats.rankdata(arr, axis=0) \/ arr.shape[0]","eda63eb7":"y_pred_nn_rank = rank(y_pred_nn)\ny_pred_cat_rank = rank(y_pred_cat)\ny_pred_lgbm_rank = rank(y_pred_lgbm)","4cd63b81":"y_pred_nn, y_pred_nn_rank","9406ff8b":"y_pred_cat, y_pred_cat_rank","1600f1bd":"y_pred_lgbm, y_pred_lgbm_rank","668f4ec8":"y_pred = (y_pred_nn_rank + y_pred_cat_rank + y_pred_lgbm_rank) \/ 3","2e843891":"y_pred","7acdc9c8":"submission = pd.read_csv('..\/input\/homework-for-students2\/sample_submission.csv', index_col=0)\n\nsubmission.loan_condition = y_pred\nsubmission.to_csv(model_dir \/ f'submission-{VERSION}.csv')","1660bbf2":"with pd.option_context(\"display.max_rows\", 1000):\n    print(pd.DataFrame([[val for val in dir()], [sys.getsizeof(eval(val)) for val in dir()]],\n                       index=['name','size']).T.sort_values('size', ascending=False).reset_index(drop=True))","fb88353f":"# CatBoost","38a35a5d":"mask = ~np.isin(feature_names1, remove_cols)","9e25d1ef":"\u3068\u308a\u3042\u3048\u305a\u9069\u5f53\u306b\u9806\u4f4d\u5e73\u5747\u3068\u308b","5e918279":"zip_code\u4e00\u6841\u76ee\u3082\u8ffd\u52a0\u3057\u3068\u304f","23f7c28b":"# LightGBM","1d4f95e4":"# Submission","d1ba1b87":"### \u518d\u5b66\u7fd2","eccdbca0":"# Tree\u7cfb","4f890f7c":"X_train1 = X_train1[:, mask]\nX_test1 = X_test1[:, mask]\nfeature_names1 = feature_names1[mask]","c1412e44":"zip code\u306e\u5c5e\u3059\u308b\u30e1\u30a4\u30f3\u306e\u5dde\u8ffd\u52a0\u3057\u3068\u304f","ec9a2628":"USE_CACHE = True","bfa59365":"## One hot encoding","1a8a1e47":"### Validation \/ Modeling","6ef3e39b":"# \u6709\u7528\u6027\u4f4e\u3044\u306e\u306f\u9664\u5916\u3059\u308b\nremove_cols = np.array([\n    \"gdp_agg__State & Local Spending_median\",\n    \"gdp_agg__State & Local Spending_min\",\n    \"gdp_agg__State & Local Spending_max\",\n    \"gdp_agg__Gross State Product_median\",\n    \"gdp_agg__Gross State Product_max\",\n    \"gdp_agg__Population (million)_min\",\n    \"gdp_agg__Population (million)_max\",\n    \"gdp_agg__Population (million)_std\",\n    \"zip_summary__zip_codeZaxis_mean\",\n    \"zip_summary__zip_codeDecommisioned_median\",\n    \"zip_summary__zip_codeDecommisioned_max\",\n    \"zip_summary__zip_codeDecommisioned_min\",\n    \"zip_summary__addr_stateLat_min\",\n    \"zip_summary__addr_stateLong_median\",\n    \"zip_summary__addr_stateXaxis_mean\",\n    \"zip_summary__addr_stateXaxis_median\",\n    \"zip_summary__addr_stateXaxis_min\",\n    \"zip_summary__addr_stateYaxis_mean\",\n    \"zip_summary__addr_stateYaxis_median\",\n    \"zip_summary__addr_stateZaxis_mean\",\n    \"zip_summary__addr_stateZaxis_median\",\n    \"zip_summary__addr_stateZaxis_max\",\n    \"zip_summary__addr_stateZaxis_min\",\n    \"zip_summary__addr_stateDecommisioned_median\",\n    \"zip_summary__addr_stateDecommisioned_max\",\n    \"zip_summary__addr_stateDecommisioned_min\",\n    \"zip_summary__addr_stateDecommisioned_std\",\n])","416b8d14":"## \u6642\u7cfb\u5217\u9806\u306b\u4e26\u3079\u66ff\u3048","1a42d863":"#### \u5168\u4f53encoding\u7cfb\n\n\u5f8c\u306etree\u7cfb\u3067\u4f7f\u3046\u3064\u3082\u308a\u3060\u3051\u3069\u3001 `X` \u3092\u65e9\u3081\u306b\u30e1\u30e2\u30ea\u304b\u3089\u8ffd\u3044\u51fa\u3057\u305f\u3044\u304b\u3089\u5148\u306b\u8a08\u7b97\u3059\u308b","a5344189":"\u6a19\u6e96\u5316","0c23ca50":"del X_train3m_sg, X_test3m_sg, train_data, val_data, clf","1c5466ea":"# NN","4b129ffd":"X_train2m.data[np.isnan(X_train2m.data)] = -9999\nX_test2m.data[np.isnan(X_test2m.data)] = -9999","beab133e":"X_train1 = np.hstack([X_train1c, X_train1])\nX_test1 = np.hstack([X_test1c, X_test1])\nfeature_names1 = feature_names1c + feature_names1","b479b7fc":"##### \u7279\u5fb4\u91cf\u9078\u629e\u3068SVD","ee2a7e71":"#### emp_title \u3092 tfidf & \u6b21\u5143\u5727\u7e2e","299e550c":"joblib.dump(model, model_dir \/ f\"model-nn-{VERSION}.joblib\", compress=3)","6b35e730":"## \u7279\u5fb4\u91cf\u4f5c\u6210","361eebf1":"##### feature importance\u7b97\u51fa","898d2c02":"## Prediction","66591909":"## \u6b20\u640d\u5024\u51e6\u7406","fb17b45b":"#### \u4e2d\u592e\u5024\u3067\u57cb\u3081\u308b","55f59a26":"### kaggle kernel \u306e numpy \u304c 1.16\u7cfb\u306a\u306e\u3067\u52d5\u304b\u306a\u3044\n```python\nX_trainp1.data = np.nan_to_num(X_train1.data, copy=False, nan=-9999)\nX_test1.data = np.nan_to_num(X_test1.data, copy=False, nan=-9999)\n```","4cdeae1c":"### Subgrade\u3092\u4e88\u6e2c\u3059\u308b","600af0f9":"## train \u5168\u4f53\u3067\u518d\u5b66\u7fd2","4ca459fd":"# Ensemble","9c149508":"### train \u3068 test \u4e21\u65b9\u5408\u308f\u305b\u3066\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u7cfb"}}