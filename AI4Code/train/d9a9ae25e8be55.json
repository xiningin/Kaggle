{"cell_type":{"1890f96f":"code","a105c7d9":"code","5b175bc7":"code","205c91a4":"code","246820b7":"code","cee5ad84":"code","65d10fd2":"code","310ea37f":"code","2a270f71":"code","00da5f89":"code","3fbb65fe":"code","05d7de64":"code","f7c7c5a1":"code","f216450f":"code","88c18099":"code","9654ac01":"code","fe1ef575":"code","71879783":"code","a7387011":"code","db43680e":"code","e83e1504":"code","bef6fdb1":"code","bf4f5c3c":"code","0de79935":"code","baab2b4d":"code","3e632dc0":"code","146ff98c":"code","6add8df5":"code","1ea9b276":"code","f9ba3efe":"code","d11afec0":"code","ef14aa7c":"code","49917f7e":"markdown","592076a1":"markdown","73a0beee":"markdown"},"source":{"1890f96f":"import numpy as np\nimport pandas as pd\nimport seaborn as sns \nimport matplotlib.pyplot as plt","a105c7d9":"data=pd.read_csv('..\/input\/students-performance-in-exams\/StudentsPerformance.csv')\ndata","5b175bc7":"data.dtypes #to get data types","205c91a4":"data.head() #to see the first 5 rows","246820b7":"data.tail() # to see the last 5 rows","cee5ad84":"data.describe()","65d10fd2":"data.info()","310ea37f":"data.columns # to get the column headings","2a270f71":"data.shape # to get the shape","00da5f89":"data.nunique() # to get the unique values","3fbb65fe":"data['gender'].unique() # to get the unique values in gender column","05d7de64":"data.isnull()","f7c7c5a1":"data.isnull().sum() # to find the number of null values","f216450f":"data.rename(columns={\"race\/ethnicity\":\"race_ethnicity\",\n                   \"parental level of education\":\"education_level\",\n                   \"test preparation course\":\"prep_course\",\n                   \"math score\":\"math_score\",\n                   \"reading score\":\"reading_score\",\n                   \"writing score\":\"writing_score\"}) # to rename the column names\n","88c18099":"data","9654ac01":"data.describe()","fe1ef575":"df=data.drop(['race\/ethnicity','parental level of education'], axis=1)\ndf","71879783":"corre=df.corr() # to find correlation\ncorre","a7387011":"sns.heatmap(corre,xticklabels=corre.columns, yticklabels=corre.columns,annot=True) # to get the heatmap of correlation","db43680e":"sns.pairplot(df)","e83e1504":"sns.boxplot(x=df['math score'])","bef6fdb1":"fig, ax = plt.subplots(figsize=(16,8))\nax.scatter(df['math score'], df['reading score'])\nax.set_xlabel('math score')\nax.set_ylabel('reading score')\nplt.show()","bf4f5c3c":"plt.rcParams['figure.figsize'] = (20, 10)\nsns.countplot(df['math score'], palette = 'dark')\nplt.title('Math Score',fontsize = 20)\nplt.show()","0de79935":"plt.figure(figsize=(15,5))\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9,\n                      wspace=0.5, hspace=0.2)\nplt.subplot(141)\nplt.title('Math Scores')\nsns.violinplot(y='math score',data=df,color='m',linewidth=2)\nplt.show()","baab2b4d":"plt.figure(figsize=(15,5))\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9,\n                      wspace=0.5, hspace=0.2)\nplt.subplot(131)\nplt.title('Math Scores')\nsns.barplot(x=\"gender\", y=\"math score\", data=df)\n","3e632dc0":"df['total marks']=df['math score']+df['reading score']+df['writing score']\ndf['percentage']=df['total marks']\/300*100","146ff98c":"def determine_grade(scores):\n    if scores >= 85 and scores <= 100:\n        return 'Grade A'\n    elif scores >= 70 and scores < 85:\n        return 'Grade B'\n    elif scores >= 55 and scores < 70:\n        return 'Grade C'\n    elif scores >= 35 and scores < 55:\n        return 'Grade D'\n    elif scores >= 0 and scores < 35:\n        return 'Grade E'\n    \ndf['grades']=df['percentage'].apply(determine_grade)","6add8df5":"df.shape","1ea9b276":"df","f9ba3efe":"df['grades'].value_counts().plot.pie(autopct=\"%1.1f%%\")\nplt.show()","d11afec0":"duplicate_rows_df= df[df.duplicated()]\nprint(\"number of duplicate rows: \",duplicate_rows_df.shape)","ef14aa7c":"df.count()","49917f7e":"# Exploratory data analysis","592076a1":"Descriptive statistics","73a0beee":"Cleaning the data"}}