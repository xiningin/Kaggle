{"cell_type":{"afde95f1":"code","623da411":"code","bc4970ff":"code","4d54c671":"code","22029a20":"code","9a7a9079":"code","0c4e81fe":"markdown","8cd35238":"markdown"},"source":{"afde95f1":"import cv2\nimport numpy as np\nimport os\nimport sys\nimport dlib\nimport pandas as pd\nfrom matplotlib import pyplot as plt","623da411":"#use SHORT_TEST for fast testing of only one entry\nSHORT_TEST = False\ndetector = dlib.get_frontal_face_detector()\npredictor = dlib.shape_predictor(\"..\/input\/shape-predictor-68-face-landmarks\/shape_predictor_68_face_landmarks\/shape_predictor_68_face_landmarks.dat\")","bc4970ff":"def get_rect(shape):\n    rw = 0\n    rh = 0\n    rx = 65535\n    ry = 65535\n    for (x,y) in shape:\n        rw = max(rw,x)\n        rh = max(rh,y)\n        rx = min(rx,x)\n        ry = min(ry,y)\n    return (rx,ry,rw-rx,rh-ry)\ndef shape_to_np(shape, dtype=\"int\"):\n    # initialize the list of (x, y)-coordinates\n    coords = np.zeros((shape.num_parts, 2), dtype=dtype)\n\n    # loop over all facial landmarks and convert them\n    # to a 2-tuple of (x, y)-coordinates\n    for i in range(0, shape.num_parts):\n        coords[i] = (shape.part(i).x, shape.part(i).y)\n\n    # return the list of (x, y)-coordinates\n    return coords","4d54c671":"inpDir = '..\/input\/miraclvc1\/dataset\/dataset'\nperson = {}\nimg = None\nmouth = None\nfirstImg = None\nfirstPerson = None\nfirstSentenceId = None\nfirstSentenceId2 = None\nratio = 1.0\/2.0\npi = 0\nlinpDir = os.listdir(inpDir)\nfor personStr in linpDir:\n    pi += 1\n    print(\"person: %s [%d\/%d]\" % (personStr,pi,len(linpDir)))\n    person[personStr] = {}\n    personFolder = '%s\/%s\/phrases' % (inpDir,personStr)\n    lpersonFolder = os.listdir(personFolder)\n    si = 0\n    for sentenceId in lpersonFolder:\n        si += 1\n        person[personStr][sentenceId] = {}\n        print(\"reading sentence %s for person %s [%d\/%d,%d\/%d]\" % (sentenceId,personStr,si,len(lpersonFolder),pi,len(linpDir)))\n        sentenceFolder = '%s\/%s' % (personFolder,sentenceId)\n        for sentenceId2 in os.listdir(sentenceFolder):\n            sentenceFolder2 = '%s\/%s\/%s' % (personFolder,sentenceId,sentenceId2)\n            person[personStr][sentenceId][sentenceId2] = {}\n            for frame in os.listdir(sentenceFolder2):\n                file = \"%s\/%s\" % (sentenceFolder2,frame)\n                if(not os.path.isfile(file)):\n                    print(\"%s does not exist\" % file)\n                    sys.exit(1)\n                if(frame[0:5] != \"color\"):\n                    # skip depth data\n                    # kinda reminds me on the song \"War\" of Edwin Starr\n                    continue\n                frame = frame[6:-4]\n                #print(\"reading file: %s\" % file)\n                img = cv2.imread(file)\n                img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n                #speed up detector by resizing first\n                img2 = cv2.resize(img, None, fx=ratio, fy=ratio)\n\n                \n                #detects whole face\n                rects = detector(img2, 1)\n                if len(rects) == 0:\n                    print(\"error finding head at file: %s\" % file)\n                    continue\n                rects[0] = dlib.scale_rect(rects[0],1\/ratio)\n                shape = predictor(image=img,box=rects[0])\n                shape = shape_to_np(shape)\n                \n                #indices from 48 to 67 are for mouth\n                shape = [shape[x] for x in range(48,68)]\n                (x, y, w, h) = get_rect(shape)\n\n                for s in shape:\n                    s[0] -= x\n                    s[1] -= y\n                \n                person[personStr][sentenceId][sentenceId2][frame] = {}\n                if firstImg is None:\n                    firstImg = img\n                    firstPerson = personStr\n                    firstSentenceId = sentenceId\n                    firstSentenceId2 = sentenceId2\n                if ((firstPerson == personStr) and (firstSentenceId == sentenceId) and (firstSentenceId2 == sentenceId2)):\n                    mouth = img[y:y+h, x:x+w].copy()\n                    # sadly we do not have enough time to copy every picture, so only copy first person\n                    print(\"filling: person[%s][%s][%s][%s] with shapes %d\" % (personStr,sentenceId,sentenceId2,frame,len(shape)))\n                    person[personStr][sentenceId][sentenceId2][frame][\"mouth\"] = mouth\n                \n                person[personStr][sentenceId][sentenceId2][frame][\"shape\"] = shape\n            \n        #for now just one sentence\n        if SHORT_TEST:\n            break\n    #for now just one person\n    if SHORT_TEST:\n        break","22029a20":"COLS = 3\nplt.figure(figsize=(10,20))\nplt.subplot(10,COLS,1)\nplt.imshow(firstImg,cmap = 'gray')\nplt.title('Original Image'), plt.xticks([]), plt.yticks([])\nfor i in range(1,10):\n    id = '%03d' % i\n    if not id in person[firstPerson][firstSentenceId][firstSentenceId2]:\n        print(\"%s not found!\" % id)\n    else:\n        mouth = person[firstPerson][firstSentenceId][firstSentenceId2][id][\"mouth\"]\n        shape = person[firstPerson][firstSentenceId][firstSentenceId2][id][\"shape\"]\n        plt.subplot(10,COLS,COLS+1+(i-1)*COLS)\n        plt.imshow(mouth,cmap = 'gray')\n        plt.title('Mouth Image')\n        plt.xticks([])\n        plt.yticks([])\n        \n        mouthEdge = np.ones_like(mouth)\n        plt.subplot(10,COLS,COLS+2+(i-1)*COLS)\n        for (x, y) in shape:\n            cv2.circle(mouthEdge, (x, y), 1, (0, 0, 255), -1)\n        plt.imshow(mouthEdge,cmap = 'gray')\n        plt.title('Mouth Image Edge')\n        plt.xticks([])\n        plt.yticks([])\n\n        both = np.copy(mouth)\n        plt.subplot(10,COLS,COLS+3+(i-1)*COLS)\n        for (x, y) in shape:\n            cv2.circle(both, (x, y), 1, (0, 0, 255), -1)\n        plt.imshow(both,cmap = 'gray')\n        plt.title('Both')\n        plt.xticks([])\n        plt.yticks([])\nplt.show()","9a7a9079":"fileCount = 0\nfor p in person.keys():\n    for sentenceId in person[p].keys():\n        shapes = []\n        for sentenceId2 in person[p][sentenceId].keys():\n            for id in person[p][sentenceId][sentenceId2].keys():\n                shape = person[p][sentenceId][sentenceId2][id][\"shape\"]\n                for (x,y) in shape:\n                    shapes.append((id,sentenceId2,x,y))\n        df = pd.DataFrame(data = shapes,columns = ['id','sentenceId2','x','y'])\n        path = \"%s\/phrases\/%s\" % (p,sentenceId)\n        try:\n            os.makedirs(path)\n        except FileExistsError as e:\n            pass\n        filename = \"shapes.csv\"\n        csvPath = \"%s\/%s\" % (path,filename)\n        print(\"saving %s\" % csvPath)\n        df.to_csv(csvPath)\n        fileCount += 1\n#total fileCount needs to be below 500\nprint(\"fileCount: %d\" % fileCount)","0c4e81fe":"## Store shapes as csv-output\n\nThis output can be then used in another kernel.","8cd35238":"## Introduction\nUsing dlib to extract only the important mouth-area."}}