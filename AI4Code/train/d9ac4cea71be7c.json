{"cell_type":{"c87b948e":"code","b7ccf84c":"code","e194d3bf":"code","e3bc4b88":"code","b43435ca":"code","2cdca749":"code","ccf7def6":"code","d62b2cb1":"code","0fa700a4":"code","b28902b6":"code","1ed845d9":"code","3dec5897":"code","b4658744":"code","5cdee09e":"code","6b1e7fd1":"code","5180bc26":"code","68ec1584":"code","e3e2961f":"code","024a635e":"code","314e2125":"code","79081390":"code","5dbf9012":"code","06a9bcb2":"code","2d57220c":"code","f162cd54":"code","2baa4de5":"code","16364688":"code","4c16cfc6":"code","77e476e4":"code","60f79473":"code","6ef9a672":"code","edefef08":"code","f9615633":"code","e4481cf8":"code","d018aebd":"code","b77c5448":"code","b4b27f4f":"code","4ecf989f":"code","74545456":"code","42cacec7":"code","3e89d95d":"code","1f5c80a8":"code","16b5f180":"code","70803006":"code","970e240b":"code","67cdfcd8":"code","ea636264":"code","062e57e7":"code","6d07f0e0":"code","d22042fd":"code","f9e128a8":"code","04e75f2d":"code","eb40cced":"code","0575104c":"code","dc410272":"code","80f77c8c":"code","074e2568":"code","1bb0ff52":"code","55a59250":"code","67f5ff00":"markdown","2c4aa4e6":"markdown","c92f523d":"markdown","9b4b7a75":"markdown","17445a2d":"markdown","86217126":"markdown","3c5af069":"markdown","2838a92a":"markdown","be180970":"markdown","857e81a8":"markdown","315d2026":"markdown","eb10856f":"markdown","761c3fbd":"markdown","92f85fd6":"markdown","b38f53cb":"markdown","45736ecd":"markdown"},"source":{"c87b948e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b7ccf84c":"import matplotlib.pyplot as plt\n\nds = pd.read_csv('..\/input\/hmeq-data\/hmeq.csv')\nds","e194d3bf":"df = ds[ds['VALUE'].isnull()]\ndf = df[df['JOB'].isnull()]\ndf = df[df['REASON'].isnull()]\ndf = df[df['DEROG'].isnull()]\ndf = df[df['DELINQ'].isnull()]\ndf = df.reset_index()\ndf = df['index']\ndf","e3bc4b88":"ds = ds.drop(df)\nds = ds.reset_index()\nds = ds.drop(['index'], axis = 1)\n\nds.info()","b43435ca":"ds.describe()","2cdca749":"ds.corr()['BAD'].sort_values()","ccf7def6":"ds['MORTDUE'].mean()","d62b2cb1":"plt.plot(ds['MORTDUE'])","0fa700a4":"ds['MORTDUE'] = ds['MORTDUE'].fillna(ds['MORTDUE'].mean())","b28902b6":"plt.hist(ds['MORTDUE'])","1ed845d9":"ds['MORTDUE'] = np.log(ds['MORTDUE'])","3dec5897":"ds['VALUE'].mean()","b4658744":"plt.plot(ds['VALUE'])","5cdee09e":"ds['VALUE'] = ds['VALUE'].fillna(ds['VALUE'].mean())","6b1e7fd1":"plt.hist(ds['VALUE'])","5180bc26":"ds['VALUE'] = np.log(ds['VALUE'])","68ec1584":"ds['REASON'] = ds['REASON'].fillna('DebtCon')","e3e2961f":"ds['REASON'].unique()","024a635e":"plt.hist(ds['REASON'])","314e2125":"ds['REASON'] = ds['REASON'].replace(['HomeImp', 'DebtCon'], [0, 1])","79081390":"ds['JOB'].unique()","5dbf9012":"ds['JOB'].mode()[0]","06a9bcb2":"ds['JOB'] = ds['JOB'].fillna(ds['JOB'].mode()[0])","2d57220c":"plt.hist(ds['JOB'])","f162cd54":"ds['JOB'] = ds['JOB'].replace(['Other', 'Sales', 'Office', 'Mgr', 'ProfExe', 'Self'], [0, 1, 2, 3, 4, 5])","2baa4de5":"ds['YOJ'].mean()","16364688":"ds['YOJ'] = ds['YOJ'].fillna(ds['YOJ'].mean())","4c16cfc6":"plt.plot(ds['YOJ'])","77e476e4":"plt.hist(ds['YOJ'])","60f79473":"ds['YOJ'] = np.log(ds['YOJ']+1)","6ef9a672":"ds['DEROG'].std()","edefef08":"ds['DEROG'] = ds['DEROG'].fillna(ds['DEROG'].std())","f9615633":"plt.plot(ds['DEROG'])","e4481cf8":"plt.hist(ds['DEROG'])","d018aebd":"ds['DELINQ'].std()","b77c5448":"ds['DELINQ'] = ds['DELINQ'].fillna(ds['DELINQ'].std())","b4b27f4f":"plt.plot(ds['DELINQ'])","4ecf989f":"plt.hist(ds['DELINQ'])","74545456":"ds['CLAGE']","42cacec7":"ds['CLAGE'].mean()","3e89d95d":"ds['CLAGE'] = ds['CLAGE'].fillna(ds['CLAGE'].mean())","1f5c80a8":"plt.plot(ds['CLAGE'])","16b5f180":"plt.hist(ds['CLAGE'])","70803006":"ds['NINQ'].std()","970e240b":"ds['NINQ'] = ds['NINQ'].fillna(ds['NINQ'].std())","67cdfcd8":"plt.plot(ds['NINQ'])","ea636264":"plt.hist(ds['NINQ'])","062e57e7":"ds['DEBTINC'].mean()","6d07f0e0":"ds['DEBTINC'] = ds['DEBTINC'].fillna(ds['DEBTINC'].mean())","d22042fd":"plt.plot(ds['DEBTINC'])","f9e128a8":"plt.hist(ds['DEBTINC'])","04e75f2d":"ds.info()","eb40cced":"ds = ds.drop('CLNO', axis = 1)\nds","0575104c":"y = ds['BAD']\nX = ds.drop(['BAD'], axis = 1)","dc410272":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nscaler.fit(X)\nX = scaler.transform(X)","80f77c8c":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=0)","074e2568":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\n\nclassifiers = [\n    KNeighborsClassifier(3),\n    SVC(probability=True),\n    DecisionTreeClassifier(),\n    RandomForestClassifier(),\n    AdaBoostClassifier(),\n    GradientBoostingClassifier(),\n    GaussianNB(),\n    LinearDiscriminantAnalysis(),\n    QuadraticDiscriminantAnalysis(),\n    LogisticRegression()\n]\n\nlog_cols = [\"Classifier\", \"Accuracy\"]\nlog = pd.DataFrame(columns=log_cols)\n\nacc_dict = {}\n\nfor clf in classifiers:\n    name = clf.__class__.__name__\n    clf.fit(X_train, y_train)\n    train_predictions = clf.predict(X_test)\n    acc = accuracy_score(y_test, train_predictions)\n        \n    if name in acc_dict:\n        acc_dict[name] += acc\n    else:\n        acc_dict[name] = acc\n\nfor clf in acc_dict:\n    acc_dict[clf] = acc_dict[clf]\n    log_entry = pd.DataFrame([[clf, acc_dict[clf]]], columns = log_cols)\n    log = log.append(log_entry)\n\nplt.xlabel('Accuracy')\nplt.title('Classifier Accuracy')\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x = 'Accuracy', y = 'Classifier', data = log, color = \"b\")","1bb0ff52":"acc_dict","55a59250":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier(random_state=0)\nrfc.fit(X_train, y_train)\n\nprint('score=',rfc.score(X_test, y_test))\ny_pred = rfc.predict(X_test)\n\nfrom sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, y_pred))","67f5ff00":"Groups CLAGE","2c4aa4e6":"Groups DEROG","c92f523d":"Let's check some models","9b4b7a75":"Groups MORTDUE","17445a2d":"# HMEQ_Data\u00b6\n## Predict clients who default on their loan","86217126":"Groups REASON","3c5af069":"Groups YOJ","2838a92a":"Best model RandomForestClassifier, take it and use with new parametrs","be180970":"Groups DEBTINC","857e81a8":"Groups NINQ","315d2026":"Data Preprocessing","eb10856f":"score= 0.91","761c3fbd":"## Many row have Non elements, so drop this all row","92f85fd6":"Groups JOB","b38f53cb":"Groups VALUE","45736ecd":"Groups DELINQ"}}