{"cell_type":{"237641cb":"code","0a0a656d":"code","da8027e5":"code","90bf71a3":"code","06b7a836":"code","cf1ca42e":"code","0834bb45":"code","7633250b":"code","5320be1a":"code","ff71a76a":"code","57913314":"code","7f84f556":"code","668240fd":"code","d7ee998b":"code","fce02efb":"code","60032e2c":"code","170b245d":"code","e6096bad":"code","df22ce28":"code","75a442dd":"code","f58b5822":"code","ecb925e7":"code","ccbb4da5":"code","510fd796":"code","0cfb54d9":"code","8fee355e":"code","0a80ee88":"code","d4cc18b2":"code","20a9a26a":"code","c0b9cfce":"code","195e60e7":"code","db25fa0e":"code","2dd046e0":"code","964a2763":"code","6bbc591f":"code","18fe99ca":"code","45f1551b":"code","91d99723":"code","5ae5a011":"code","4dd70b99":"code","f035f4e7":"code","9b2aaacf":"code","61a07f3c":"code","b7ea27e2":"code","9c9e2692":"code","576a1e20":"code","93390e08":"code","3d11d870":"code","5e6187c5":"code","2b347484":"code","675722ca":"code","2cf31401":"code","d0aa878c":"code","73444acf":"code","969b194c":"code","3f79c342":"code","058b19a1":"code","3739113f":"code","4dd76659":"code","35257f46":"code","4e810b77":"code","d69e0412":"code","81b3d1f7":"code","5e1d1bd7":"code","e693349c":"code","4b0ad766":"code","614bff08":"code","dcea87b4":"code","ac1fb8d2":"code","60067dce":"code","e5a5f8bb":"code","3343b3d0":"code","caf8e21f":"code","9b1f3a6b":"code","66c2029a":"code","7cc7de0f":"code","382f8b57":"code","862ddf62":"code","5a766126":"code","07229c3e":"code","d1a4af02":"code","19aa9307":"code","12bf4023":"code","03c85ea7":"code","a3fd8148":"code","324330b5":"code","dd96a0dc":"code","1a4af43f":"code","724b0eca":"code","9272ffb6":"code","45b8cf58":"code","47c82123":"code","1c9fc318":"code","63956c6b":"code","4762acf7":"code","bd2719ae":"code","dbd717e2":"code","cc19bd31":"markdown","9d5d8575":"markdown","73fae65e":"markdown","bbd4c2c4":"markdown","486f02df":"markdown","9133706e":"markdown","51aae3b2":"markdown","82fa85cb":"markdown","7c40e1a8":"markdown","e0682b43":"markdown","c38f0076":"markdown","9106cc9f":"markdown","089e03e1":"markdown","e5dc5bfc":"markdown","49e4231f":"markdown","d1eafc05":"markdown","13d075c8":"markdown","7effb4ba":"markdown","b0bb8f6c":"markdown","f75380d1":"markdown","d5aa6361":"markdown","e9c7f7d3":"markdown","6af39206":"markdown"},"source":{"237641cb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0a0a656d":"import numpy as np # linear algebra\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","da8027e5":" #dataset studentInfo.csv\n\n studentInfo = pd.read_csv('\/kaggle\/input\/student-demographics-online-education-dataoulad\/studentInfo.csv', \\\n                           sep=',', encoding='ISO-8859-1')","90bf71a3":"studentInfo.sample(3)","06b7a836":"len(studentInfo['id_student'].unique())","cf1ca42e":"studentInfo['final_result_2'] = studentInfo['final_result'].apply(lambda x: 'Reprovado' if \\\n    (x == 'Withdrawn' or x == 'Fail') else 'Aprovado')","0834bb45":"studentInfo['code_module'].unique()","7633250b":"#plot numbers of students each course module\nmodulo = studentInfo.groupby('code_module').agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"code_module\": \"Modulo\", 'id_student': 'Qtde'})\n\nmodulo['Percentual'] = modulo.apply(lambda x: round(100 * (x['Qtde'] \/ modulo['Qtde'].sum()),2), axis=1)\n    \nfig = px.bar(modulo, x='Modulo', y='Qtde', \\\n    text='Percentual', color='Modulo',  hover_data=['Qtde'],\\\n        template=\"seaborn\")\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Distribui\u00e7\u00e3o - M\u00f3dulo Cursado',\n    xaxis_title=\"M\u00f3dulo Cursado\",\n    yaxis_title=\"Quantidade [Alunos]\",\n    legend_title=\"M\u00f3dulo Cursado\",\n    width=600, \n    height=400,\n    uniformtext_minsize=10, \n    uniformtext_mode='hide',\n)\nfig","5320be1a":"df = studentInfo.groupby(['code_module', 'final_result']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"code_module\": \"Modulo\", \"final_result\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", text=\"Percentual\", color=\"Modulo\",\n            hover_data=['Percentual'], barmode = 'stack', template=\"seaborn\")\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por M\u00f3dulo Cursado',\n    xaxis_title=\"Resultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"M\u00f3dulo Cursado\",\n    width=700, \n    height=500,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\nfig","ff71a76a":"# Binary Result - Aprovado e Reprovado\n# ----------------------------------------------------------------------------------------------------\n# ----------------------------------------------------------------------------------------------------\n\ndf = studentInfo.groupby(['code_module', 'final_result_2']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"code_module\": \"Modulo\", \"final_result_2\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", text=\"Percentual\", color=\"Modulo\",\n            hover_data=['Percentual'], barmode = 'stack', template=\"seaborn\")\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por M\u00f3dulo Cursado',\n    xaxis_title=\"Resultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"M\u00f3dulo Cursado\",\n    width=700, \n    height=500,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\nfig\n","57913314":"studentInfo['code_presentation'].unique()","7f84f556":"periodo = studentInfo.groupby('code_presentation').agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"code_presentation\": \"Periodo\", 'id_student': 'Qtde'})\n\nperiodo['Percentual'] = periodo.apply(lambda x: round(100 * (x['Qtde'] \/ periodo['Qtde'].sum()),2), axis=1)\n    \nfig = px.bar(periodo, x='Periodo', y='Qtde', \\\n    text='Percentual', color='Periodo',  hover_data=['Qtde'],\\\n        template=\"seaborn\")\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Distribui\u00e7\u00e3o - Per\u00edodo Cursado',\n    xaxis_title=\"Per\u00edodo Cursado\",\n    yaxis_title=\"Quantidade [Alunos]\",\n    legend_title=\"Per\u00edodo Cursado\",\n    width=600, \n    height=400,\n    uniformtext_minsize=10, \n    uniformtext_mode='hide',\n)\nfig.show()","668240fd":"df = studentInfo.groupby(['code_presentation', 'final_result']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"code_presentation\": \"Periodo\", \"final_result\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", text=\"Percentual\", color=\"Periodo\",\n            hover_data=['Percentual'], barmode = 'stack', template=\"seaborn\")\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por Per\u00edodo Cursado',\n    xaxis_title=\"Resultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"Per\u00edodo Cursado\",\n    width=700, \n    height=500,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\nfig.show()","d7ee998b":"# Binary Result - Aprovado e Reprovado\n# ----------------------------------------------------------------------------------------------------\n# ----------------------------------------------------------------------------------------------------\n\ndf = studentInfo.groupby(['code_presentation', 'final_result_2']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"code_presentation\": \"Periodo\", \"final_result_2\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", text=\"Percentual\", color=\"Periodo\",\n            hover_data=['Percentual'], barmode = 'stack', template=\"seaborn\")\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por Per\u00edodo Cursado',\n    xaxis_title=\"Resultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"Per\u00edodo Cursado\",\n    width=700, \n    height=500,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\nfig.show()","fce02efb":"studentInfo['gender'].unique()","60032e2c":"genero = studentInfo[['id_student', 'gender']].drop_duplicates().groupby('gender').\\\n    agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"gender\": \"Genero\", 'id_student': 'Qtde'})\n\ngenero['Percentual'] = genero.apply(lambda x: round(100 * (x['Qtde'] \/ genero['Qtde'].sum()),2), axis=1)\n    \nfig = px.bar(genero, x='Genero', y='Qtde', \\\n    text='Qtde', color='Genero',  hover_data=['Qtde'],\\\n        template=\"seaborn\")\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Distribui\u00e7\u00e3o - G\u00eanero',\n    xaxis_title=\"G\u00eanero\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"G\u00eanero\",\n    width=600, \n    height=400,\n    uniformtext_minsize=10, \n    uniformtext_mode='hide',\n)\nfig.show()","170b245d":"genero","e6096bad":"df = studentInfo.groupby(['gender', 'final_result']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"gender\": \"Genero\", \"final_result\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", text=\"Percentual\", color=\"Genero\",\n            hover_data=['Percentual'], barmode = 'stack', template=\"seaborn\")\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por G\u00eanero',\n    xaxis_title=\"Resultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"G\u00eanero\",\n    width=600, \n    height=400,\n    uniformtext_minsize=10, \n    uniformtext_mode='hide',\n)\nfig.show()","df22ce28":"# Binary Result - Aprovado e Reprovado\n# ----------------------------------------------------------------------------------------------------\n# ----------------------------------------------------------------------------------------------------\n\ndf = studentInfo.groupby(['gender', 'final_result_2']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"gender\": \"Genero\", \"final_result_2\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", text=\"Percentual\", color=\"Genero\",\n            hover_data=['Percentual'], barmode = 'stack', template=\"seaborn\")\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por G\u00eanero',\n    xaxis_title=\"Resultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"G\u00eanero\",\n    width=600, \n    height=400,\n    uniformtext_minsize=10, \n    uniformtext_mode='hide',\n)\nfig.show()","75a442dd":"len(studentInfo['region'].unique())","f58b5822":"regiao = studentInfo[['region', 'id_student']].drop_duplicates().groupby('region').agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"region\": \"Regiao\", 'id_student': 'Qtde'}).sort_values(by='Qtde', ascending=False)\n\nregiao['Percentual'] = regiao.apply(lambda x: round(100 * (x['Qtde'] \/ regiao['Qtde'].sum()), 2) ,axis=1)\n\nfig = px.bar(regiao, x='Regiao', y='Qtde', text='Percentual', color ='Regiao',  template=\"seaborn\")\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Distribui\u00e7\u00e3o - Localidade',\n    xaxis_title=\"Regi\u00e3o\",\n    yaxis_title=\"Quantidade [Alunos]\",\n    showlegend=False,\n    width=800, \n    height=550,\n    uniformtext_minsize=10, \n    uniformtext_mode='hide',\n)\n\nfig.show()","ecb925e7":"df = studentInfo.groupby(['region', 'final_result']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"region\": \"Regiao\", \"final_result\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", text=\"Percentual\", color=\"Regiao\",\n            hover_data=['Percentual'], barmode = 'stack', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por Localidade',\n    xaxis_title=\"Resultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"Regi\u00e3o\",\n    width=800, \n    height=700,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n \nfig.show()","ccbb4da5":"# Binary Result - Aprovado e Reprovado\n# ----------------------------------------------------------------------------------------------------\n# ----------------------------------------------------------------------------------------------------\n\ndf = studentInfo.groupby(['region', 'final_result_2']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"region\": \"Regiao\", \"final_result_2\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", text=\"Percentual\", color=\"Regiao\",\n            hover_data=['Percentual'], barmode = 'stack', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por Localidade',\n    xaxis_title=\"Resultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"Regi\u00e3o\",\n    width=800, \n    height=700,\n    uniformtext_minsize=10, \n    uniformtext_mode='hide',\n)\n \nfig.show()","510fd796":"studentInfo['highest_education'].unique()","0cfb54d9":"escolaridade = studentInfo.groupby('highest_education').agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"highest_education\": \"Escolaridade\", 'id_student': 'Qtde'}).sort_values(by='Qtde', ascending=False)\n\nescolaridade['Percentual'] = escolaridade.apply(lambda x: round(100 * (x['Qtde'] \/ escolaridade['Qtde'].sum()), 2) ,axis=1)\n\nfig = px.bar(escolaridade, x='Escolaridade', y='Qtde', text='Percentual', color='Escolaridade', template=\"seaborn\")\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Distribui\u00e7\u00e3o - Escolaridade',\n    xaxis_title=\"Escolaridade\",\n    yaxis_title=\"Quantidade [Alunos]\",\n    legend_title=\"Escolaridade\",\n    width=800, \n    height=550,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\nfig.show()","8fee355e":"df = studentInfo.groupby(['highest_education', 'final_result']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"highest_education\": \"Escolaridade\", \"final_result\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", text='Percentual', color=\"Escolaridade\",\n            hover_data=['Percentual'], barmode = 'stack', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por Escolaridade',\n    xaxis_title=\"Escolaridade\",\n    yaxis_title=\"Quantidade [Alunos]\",\n    legend_title=\"Escolaridade\",\n    width=800, \n    height=700,\n    uniformtext_minsize=8, \n    uniformtext_mode='hide',\n)\n \nfig.show()","0a80ee88":"# Binary Result - Aprovado e Reprovado\n# ----------------------------------------------------------------------------------------------------\n# ----------------------------------------------------------------------------------------------------\n\ndf = studentInfo.groupby(['highest_education', 'final_result_2']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"highest_education\": \"Escolaridade\", \"final_result_2\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", text='Percentual', color=\"Escolaridade\",\n            hover_data=['Percentual'], barmode = 'stack', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por Escolaridade',\n    xaxis_title=\"Escolaridade\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"Escolaridade\",\n    width=800, \n    height=700,\n    uniformtext_minsize=8, \n    uniformtext_mode='hide',\n)\n \nfig.show()","d4cc18b2":"studentInfo['imd_band'].unique()","20a9a26a":"studentInfo['imd_band_2'] = studentInfo.apply(lambda x: studentInfo[studentInfo['region']==x['region']]['imd_band'].mode()[0] \\\n    if pd.isna(x['imd_band']) else x['imd_band'], axis=1)","c0b9cfce":"indice = studentInfo.groupby('imd_band').agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"imd_band\": \"Indice\", 'id_student': 'Qtde'}).sort_values(by='Indice', ascending=True)\n\nindice['Percentual'] = indice.apply(lambda x:  round(100 * (x['Qtde'] \/ indice['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(indice, x='Indice', y='Qtde', text='Percentual', color='Indice', template=\"seaborn\")\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Distribui\u00e7\u00e3o - Indice IMD',\n    xaxis_title=\"IMD\",\n    yaxis_title=\"Quantidade [Alunos]\",\n    legend_title=\"IMD\",\n    width=800, \n    height=550,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n    \n)\nfig.show()","195e60e7":"indice = studentInfo.groupby('imd_band_2').agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"imd_band_2\": \"Indice\", 'id_student': 'Qtde'}).sort_values(by='Indice', ascending=True)\n\nindice['Percentual'] = indice.apply(lambda x:  round(100 * (x['Qtde'] \/ indice['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(indice, x='Indice', y='Qtde', text='Percentual', color='Indice', template=\"seaborn\")\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Distribui\u00e7\u00e3o - Indice IMD',\n    xaxis_title=\"IMD\",\n    yaxis_title=\"Quantidade [Alunos]\",\n    legend_title=\"IMD\",\n    width=800, \n    height=550,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n    \n)\nfig.show()","db25fa0e":"df = studentInfo.groupby(['imd_band', 'final_result']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"imd_band\": \"Indice\", \"final_result\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", text='Percentual', color=\"Indice\",\n            hover_data=['Percentual'], barmode = 'stack', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por Indice - IMD',\n    xaxis_title=\"IMD\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"IMD\",\n    width=800, \n    height=700,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n \nfig.show()","2dd046e0":"df = studentInfo.groupby(['imd_band_2', 'final_result']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"imd_band_2\": \"Indice\", \"final_result\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", text='Percentual', color=\"Indice\",\n            hover_data=['Percentual'], barmode = 'stack', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por \u00cdndice',\n    xaxis_title=\"IMD\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"IMD\",\n    width=800, \n    height=700,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n \nfig.show()","964a2763":"# Binary Result - Aprovado e Reprovado\n# ----------------------------------------------------------------------------------------------------\n# ----------------------------------------------------------------------------------------------------\n\ndf = studentInfo.groupby(['imd_band_2', 'final_result_2']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"imd_band_2\": \"Indice\", \"final_result_2\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", text='Percentual', color=\"Indice\",\n            hover_data=['Percentual'], barmode = 'stack', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por \u00cdndice',\n    xaxis_title=\"IMD\",\n    yaxis_title=\"Quantidade [Alunos]\",\n    legend_title=\"IMD\",\n    width=800, \n    height=700,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n \nfig.show()","6bbc591f":"studentInfo['age_band'].unique()","18fe99ca":"idade = studentInfo[['age_band', 'id_student']].drop_duplicates().groupby('age_band').agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"age_band\": \"Idade\", 'id_student': 'Qtde'}).sort_values(by='Idade', ascending=True)\n\nidade['Percentual'] = idade.apply(lambda x:  round(100 * (x['Qtde'] \/ idade['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(idade, x='Idade', y='Qtde', text='Qtde', color='Idade', template=\"seaborn\")\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Distribui\u00e7\u00e3o - Idade',\n    xaxis_title=\"Idade\",\n    yaxis_title=\"Quantidade [Alunos]\",\n    legend_title=\"Idade\",\n    width=800, \n    height=550,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n    \n)\nfig.show()","45f1551b":"df = studentInfo.groupby(['age_band', 'final_result']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"age_band\": \"Idade\", \"final_result\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] ==\\\n     x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", text=\"Percentual\", color=\"Idade\",\n            hover_data=['Percentual'], barmode = 'stack', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por Idade',\n    xaxis_title=\"Ressultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"Idade\",\n    width=800, \n    height=700,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n \nfig.show()","91d99723":"# Binary Result - Aprovado e Reprovado\n# ----------------------------------------------------------------------------------------------------\n# ----------------------------------------------------------------------------------------------------\n\ndf = studentInfo.groupby(['age_band', 'final_result_2']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"age_band\": \"Idade\", \"final_result_2\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", text=\"Percentual\", color=\"Idade\",\n            hover_data=['Percentual'], barmode = 'stack', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por Idade',\n    xaxis_title=\"Ressultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"Idade\",\n    width=800, \n    height=700,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n \nfig.show()\n","5ae5a011":"studentInfo['num_of_prev_attempts'].unique()","4dd70b99":"tentat = studentInfo.groupby('num_of_prev_attempts').agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"num_of_prev_attempts\": \"Tentativas\", 'id_student': 'Qtde'}).sort_values(by='Tentativas', ascending=True)\n\ntentat['Percentual'] = tentat.apply(lambda x:  round(100 * (x['Qtde'] \/ tentat['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(tentat, x='Tentativas', y='Qtde', text='Percentual', color='Tentativas', template=\"seaborn\")\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Distribui\u00e7\u00e3o - Tentativas Anteriores',\n    xaxis_title=\"Tentativas\",\n    yaxis_title=\"Quantidade [tentativas]\",\n    legend_title=\"N\u00ba de tentativas anteriores\",\n    width=800, \n    height=550,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\nfig.show()","f035f4e7":"df = studentInfo.groupby(['num_of_prev_attempts', 'final_result']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"num_of_prev_attempts\": \"Tentativas\", \"final_result\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", text=\"Percentual\", color=\"Tentativas\",\n            hover_data=['Percentual'], barmode = 'stack')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por Tentativas Anteriores',\n    xaxis_title=\"resultado\",\n    yaxis_title=\"Quantidade [tentativas]\",\n    legend_title=\"N\u00ba de tentativas anteriores\",\n    width=800, \n    height=700,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n \nfig.show()","9b2aaacf":"fig = px.bar(df[df['Tentativas'] != 0], x=\"Resultado\", y=\"Percentual\", text=\"Percentual\", color=\"Tentativas\",\n            hover_data=['Percentual'], barmode = 'stack')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por Tentativas Anteriores - A partir de uma tentativa',\n    xaxis_title=\"resultado\",\n    yaxis_title=\"Quantidade [tentativas]\",\n    legend_title=\"N\u00ba de tentativas anteriores\",\n    width=800, \n    height=600,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n\nfig.show()","61a07f3c":"# Binary Result - Aprovado e Reprovado\n# ----------------------------------------------------------------------------------------------------\n# ----------------------------------------------------------------------------------------------------\n\ndf = studentInfo.groupby(['num_of_prev_attempts', 'final_result_2']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"num_of_prev_attempts\": \"Tentativas\", \"final_result_2\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", text=\"Percentual\", color=\"Tentativas\",\n            hover_data=['Percentual'], barmode = 'stack')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por Tentativas Anteriores',\n    xaxis_title=\"resultado\",\n    yaxis_title=\"Quantidade [tentativas]\",\n    legend_title=\"N\u00ba de tentativas anteriores\",\n    width=800, \n    height=700,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n \nfig.show()","b7ea27e2":"fig = px.bar(df[df['Tentativas'] != 0], x=\"Resultado\", y=\"Percentual\", text=\"Percentual\", color=\"Tentativas\",\n            hover_data=['Percentual'], barmode = 'stack')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por Tentativas Anteriores - A partir de uma tentativa',\n    xaxis_title=\"resultado\",\n    yaxis_title=\"Quantidade [tentativas]\",\n    legend_title=\"N\u00ba de tentativas anteriores\",\n    width=800, \n    height=600,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n\nfig.show()","9c9e2692":"studentInfo['studied_credits'].unique().max()","576a1e20":"studentInfo['studied_credits'].unique().min()","93390e08":"studentInfo['studied_credits'].sort_values().unique()","3d11d870":"#criando faixas de creditos\nstudentInfo['cred_bin'] = studentInfo.apply(lambda x: '1.At\u00e9 100 creditos' if x['studied_credits'] <= 100 else \\\n    ('2.De 100 a 200 creditos'if x['studied_credits'] > 100 and x['studied_credits'] <= 200 \\\n        else ('3.De 200 a 300 creditos'if x['studied_credits'] > 200 and x['studied_credits'] <= 300 \\\n            else ('4.De 300 a 400 creditos'if x['studied_credits'] > 300 and x['studied_credits'] <= 400 else '5.Acima de 400 creditos'))), axis=1)","5e6187c5":"cred = studentInfo.groupby('cred_bin').agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"cred_bin\": \"Creditos\", 'id_student': 'Qtde'}).sort_values(by='Creditos', ascending=True)\n\n\ncred = cred.sort_values(by='Creditos')\n\nfig = px.bar(cred, x='Qtde', y='Creditos', color='Creditos', text='Qtde', template=\"seaborn\")\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Distribui\u00e7\u00e3o - Creditos Cursados',\n    xaxis_title=\"Quantidade [Alunos]\",\n    yaxis_title=\"Cr\u00e9ditos\",\n    legend_title=\"Intervalos de Cr\u00e9ditos\",\n    width=800, \n    height=550,\n    \n)\nfig.show()","2b347484":"df = studentInfo.groupby(['cred_bin', 'final_result']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"cred_bin\": \"FaixasCredito\", \"final_result\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", text=\"Percentual\", color=\"FaixasCredito\",\n            hover_data=['Percentual'], barmode = 'stack', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por Cr\u00e9ditos Cursados',\n    xaxis_title=\"Resultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"Intervalos de Cr\u00e9ditos\",\n    width=800, \n    height=700,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n \nfig.show()","675722ca":"# Binary Result - Aprovado e Reprovado\n# ----------------------------------------------------------------------------------------------------\n# ----------------------------------------------------------------------------------------------------\n\ndf = studentInfo.groupby(['cred_bin', 'final_result_2']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"cred_bin\": \"FaixasCredito\", \"final_result_2\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", text=\"Percentual\", color=\"FaixasCredito\",\n            hover_data=['Percentual'], barmode = 'stack', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por Cr\u00e9ditos Cursados',\n    xaxis_title=\"Resultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"Intervalos de Cr\u00e9ditos\",\n    width=800, \n    height=700,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n \nfig.show()","2cf31401":"studentInfo['disability'].unique()","d0aa878c":"defci = studentInfo[['disability', 'id_student']].drop_duplicates().groupby('disability').agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"disability\": \"Deficiencia\", 'id_student': 'Qtde'}).sort_values(by='Deficiencia', ascending=True)\n\ndefci['Percentual'] = defci.apply(lambda x:  round(100 * (x['Qtde'] \/ defci['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(defci, x='Deficiencia', y='Qtde', text='Qtde', template=\"seaborn\", color='Deficiencia')\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Distribui\u00e7\u00e3o - Deficiencia',\n    xaxis_title=\"Defici\u00eancia\",\n    yaxis_title=\"Quantidades [Alunos]\",\n    legend_title=\"Defici\u00eancia\",\n    width=800, \n    height=550,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\nfig.show()","73444acf":"df = studentInfo.groupby(['disability', 'final_result']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"disability\": \"Deficiencia\", \"final_result\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", color=\"Deficiencia\", text='Percentual',\n            hover_data=['Percentual'], barmode = 'stack', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por Deficiencia',\n    xaxis_title=\"Resultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"Defici\u00eancia\",\n    width=800, \n    height=700,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n \nfig.show()","969b194c":"# Binary Result - Aprovado e Reprovado\n# ----------------------------------------------------------------------------------------------------\n# ----------------------------------------------------------------------------------------------------\n\ndf = studentInfo.groupby(['disability', 'final_result_2']).agg({'id_student':'count'}).reset_index().\\\n    rename(columns={\"disability\": \"Deficiencia\", \"final_result_2\": 'Resultado','id_student': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", color=\"Deficiencia\", text='Percentual',\n            hover_data=['Percentual'], barmode = 'stack', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Resultados por Deficiencia',\n    xaxis_title=\"Resultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"Defici\u00eancia\",\n    width=800, \n    height=700,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n \nfig.show()","3f79c342":"studentVle = pd.read_csv('\/kaggle\/input\/student-demographics-online-education-dataoulad\/studentVle.csv', sep=',', encoding='ISO-8859-1')\n\nvle = pd.read_csv('\/kaggle\/input\/student-demographics-online-education-dataoulad\/vle.csv', sep=',', encoding='ISO-8859-1')","058b19a1":"#join studentVle(all features) and vle(activity_type)\nstudentVle_vle = studentVle.merge(vle[['id_site', 'activity_type']], on='id_site', how='left')","3739113f":"#group with sum (activity_type)\naux = studentVle_vle.groupby(['id_student', 'code_module', 'code_presentation',\\\n     'activity_type'])['sum_click'].sum().unstack().fillna(0).reset_index()","4dd76659":"#join\ndf = studentInfo.merge(aux, on=['id_student','code_module', 'code_presentation'], how='left')\n\n#fillna only required fields\ndf[['dataplus', 'dualpane', 'externalquiz', 'folder',\n       'forumng', 'glossary', 'homepage', 'htmlactivity', 'oucollaborate',\n       'oucontent', 'ouelluminate', 'ouwiki', 'page', 'questionnaire', 'quiz',\n       'repeatactivity', 'resource', 'sharedsubpage', 'subpage', 'url']] = \\\n              df[['dataplus', 'dualpane', 'externalquiz', 'folder',\n       'forumng', 'glossary', 'homepage', 'htmlactivity', 'oucollaborate',\n       'oucontent', 'ouelluminate', 'ouwiki', 'page', 'questionnaire', 'quiz',\n       'repeatactivity', 'resource', 'sharedsubpage', 'subpage', 'url']].fillna(0)","35257f46":"df.columns","4e810b77":"assessments = pd.read_csv('\/kaggle\/input\/student-demographics-online-education-dataoulad\/assessments.csv', sep=',', encoding='ISO-8859-1')\n\nstudentAssessment = pd.read_csv('\/kaggle\/input\/student-demographics-online-education-dataoulad\/studentAssessment.csv', sep=',', encoding='ISO-8859-1')","d69e0412":"assessments_group = studentAssessment.merge(assessments[['id_assessment', 'weight']], on='id_assessment', how='left')\nassessments_group = assessments_group.merge(studentInfo[['id_student', 'code_module', 'code_presentation',\\\n    'final_result']], on='id_student', how='left')","81b3d1f7":"assessments_group['nota'] = (assessments_group['score']\/100) * assessments_group['weight']","5e1d1bd7":"from sklearn.ensemble import ExtraTreesClassifier, RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nfrom sklearn.preprocessing import LabelEncoder","e693349c":"LE = LabelEncoder()","4b0ad766":"#removing % from de value\ndf['imd_band'] = df['imd_band'].astype(str)\ndf['imd_band'] = df['imd_band'].apply(lambda x: x.split('%')[0])","614bff08":"studentInfoDumm = df.copy()\n\ncolunas = ['code_module', 'code_presentation', 'gender', 'region',\n       'highest_education', 'imd_band', 'imd_band_2', 'age_band', 'disability', 'cred_bin', 'final_result', 'final_result_2']\n\n#convert to numeric values\nfor col in colunas:\n    studentInfoDumm[col] = LE.fit_transform(studentInfoDumm[col])\n","dcea87b4":"len(studentInfoDumm)","ac1fb8d2":"X = studentInfoDumm[['code_module', 'code_presentation', 'gender', 'region',\n       'highest_education', 'imd_band_2', 'age_band', 'num_of_prev_attempts', 'disability', 'cred_bin']]\n\nX_ = studentInfoDumm[['code_module', 'code_presentation', 'gender', 'region',\n       'highest_education', 'imd_band_2', 'age_band', 'num_of_prev_attempts',\n       'disability', 'cred_bin', 'dataplus', 'dualpane', 'externalquiz', 'folder',\n       'forumng', 'glossary', 'homepage', 'htmlactivity', 'oucollaborate',\n       'oucontent', 'ouelluminate', 'ouwiki', 'page', 'questionnaire', 'quiz',\n       'repeatactivity', 'resource', 'sharedsubpage', 'subpage', 'url']]\n\nY = studentInfoDumm[['final_result']]\nY_ = studentInfoDumm[['final_result_2']]","60067dce":"selection = ExtraTreesClassifier()\nselection.fit(X,Y_)","e5a5f8bb":"feature_list = list(['code_module', 'code_presentation', 'gender', 'region', 'highest_education',\n'imd_band_2', 'age_band', 'num_of_prev_attempts', 'disability', 'cred_bin'])","3343b3d0":"importances = list(selection.feature_importances_)\n\nfeature_importances = [(feature, round(importance * 100, 2)) for feature, importance in zip(feature_list, importances)]\n\nfeature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)\n \n[print('Feature: {:20} Importance: {}'.format(*pair)) for pair in feature_importances]","caf8e21f":"feat01 = pd.DataFrame(feature_importances, columns=['Feature', 'Importance'])","9b1f3a6b":"fig = px.bar(feat01, x=\"Importance\", y=\"Feature\", color=\"Feature\", text='Importance', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Feature Importance - Teste 01',\n    showlegend=False,\n    xaxis_title=\"Importancia [%]\",\n    yaxis_title=\"Vari\u00e1vel\",\n    legend_title=\"Defici\u00eancia\",\n    width=800, \n    height=800,\n    uniformtext_minsize=10, \n    uniformtext_mode='hide',\n)\n \nfig.show()","66c2029a":"selection = ExtraTreesClassifier()\nselection.fit(X_,Y_)\n\nimportances = selection.feature_importances_","7cc7de0f":"feature_list = list(['code_module', 'code_presentation', 'gender', 'region',\n'highest_education', 'imd_band', 'age_band', 'num_of_prev_attempts',\n'disability', 'cred_bin', 'dataplus', 'dualpane', \n'externalquiz', 'folder', 'forumng', 'glossary', \n'homepage', 'htmlactivity', 'oucollaborate','oucontent', \n'ouelluminate', 'ouwiki', 'page', 'questionnaire', \n'quiz', 'repeatactivity', 'resource', 'sharedsubpage', \n'subpage', 'url'])","382f8b57":"importances = list(selection.feature_importances_)\n\nfeature_importances = [(feature, round(importance * 100, 2)) for feature, importance in zip(feature_list, importances)]\n\nfeature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)\n \n[print('Feature: {:20} Importance: {}'.format(*pair)) for pair in feature_importances[:15]]","862ddf62":"feat02 = pd.DataFrame(feature_importances, columns=['Feature', 'Importance'])","5a766126":"fig = px.bar(feat02, x=\"Importance\", y=\"Feature\", color=\"Feature\", text='Importance', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Feature Importance - Teste 02',\n    showlegend=False,\n    xaxis_title=\"Importancia [%]\",\n    yaxis_title=\"Vari\u00e1vel\",\n    legend_title=\"Defici\u00eancia\",\n    width=800, \n    height=800,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n \nfig.show()","07229c3e":"X_new = X_.copy()","d1a4af02":"x_train_new, x_test_new, y_train, y_test = train_test_split(X_new, Y_, test_size=0.2, random_state=0)\nmodel1_2 = ExtraTreesClassifier()\nmodel1_2.fit(x_train_new, y_train)\npredictions_2 = model1_2.predict(x_test_new)\naccuracy_score(y_test, predictions_2)","19aa9307":"#RF\nmodel1_3 = RandomForestClassifier()\nmodel1_3.fit(x_train_new, y_train)\npredictions_3 = model1_3.predict(x_test_new)\naccuracy_score(y_test, predictions_3)","12bf4023":"df_ = df[['final_result', 'final_result_2', 'quiz', 'homepage', 'oucontent']]","03c85ea7":"bins = [-1, 100, 300, 500, 1000, 5000]\nlabels = [\"0 a 100\",\"100 a 300\",\"300 a 500\",\"500 a 1000\",\"Acima de 1000\"]\ndf_['quiz_binned'] = pd.cut(df_['quiz'], bins=bins, labels=labels)\ndf_['homepage_binned'] = pd.cut(df_['homepage'], bins=bins, labels=labels)\ndf_['oucontent_binned'] = pd.cut(df_['oucontent'], bins=bins, labels=labels)","a3fd8148":"df = df_.groupby(['quiz_binned', 'final_result']).agg({'quiz':'count'}).reset_index().\\\n    rename(columns={\"quiz_binned\": \"quiz\", \"final_result\": 'Resultado','quiz': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", color=\"quiz\", text='Percentual',\n            hover_data=['Percentual'], barmode = 'stack', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Recurso - Quiz',\n    xaxis_title=\"Resultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"Acessos ao material\",\n    width=800, \n    height=700,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n \nfig.show()","324330b5":"df = df_.groupby(['quiz_binned', 'final_result_2']).agg({'quiz':'count'}).reset_index().\\\n    rename(columns={\"quiz_binned\": \"quiz\", \"final_result_2\": 'Resultado','quiz': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", color=\"quiz\", text='Percentual',\n            hover_data=['Percentual'], barmode = 'stack', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Recurso - Quiz',\n    xaxis_title=\"Resultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"Acessos ao material\",\n    width=800, \n    height=700,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n \nfig.show()","dd96a0dc":"df = df_.groupby(['homepage_binned', 'final_result']).agg({'quiz':'count'}).reset_index().\\\n    rename(columns={\"homepage_binned\": \"homepage\", \"final_result\": 'Resultado','quiz': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", color=\"homepage\", text='Percentual',\n            hover_data=['Percentual'], barmode = 'stack', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Recurso - Homepage',\n    xaxis_title=\"Resultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"Acessos ao material\",\n    width=800, \n    height=700,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n \nfig.show()","1a4af43f":"df = df_.groupby(['homepage_binned', 'final_result_2']).agg({'quiz':'count'}).reset_index().\\\n    rename(columns={\"homepage_binned\": \"homepage\", \"final_result_2\": 'Resultado','quiz': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", color=\"homepage\", text='Percentual',\n            hover_data=['Percentual'], barmode = 'stack', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Recurso - Homepage',\n    xaxis_title=\"Resultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"Acessos ao material\",\n    width=800, \n    height=700,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n \nfig.show()","724b0eca":"df = df_.groupby(['oucontent_binned', 'final_result']).agg({'quiz':'count'}).reset_index().\\\n    rename(columns={\"oucontent_binned\": \"oucontent\", \"final_result\": 'Resultado','quiz': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", color=\"oucontent\", text='Percentual',\n            hover_data=['Percentual'], barmode = 'stack', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Recurso - Oucontent',\n    xaxis_title=\"Resultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"Acessos ao material\",\n    width=800, \n    height=700,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n \nfig.show()","9272ffb6":"df = df_.groupby(['oucontent_binned', 'final_result_2']).agg({'quiz':'count'}).reset_index().\\\n    rename(columns={\"oucontent_binned\": \"oucontent\", \"final_result_2\": 'Resultado','quiz': 'Qtde'})\n\ndf['Percentual'] = df.apply(lambda x:  round(100 * (x['Qtde'] \/ df[df['Resultado'] == x['Resultado']]['Qtde'].sum()),2), axis=1)\n\nfig = px.bar(df, x=\"Resultado\", y=\"Percentual\", color=\"oucontent\", text='Percentual',\n            hover_data=['Percentual'], barmode = 'stack', template='seaborn')\n\nfig.update_layout(\n    margin=dict(l=20, r=50, t=50, b=20),\n    title = 'Recurso - Oucontent',\n    xaxis_title=\"Resultado\",\n    yaxis_title=\"Percentual [%]\",\n    legend_title=\"Acessos ao material\",\n    width=800, \n    height=700,\n    uniformtext_minsize=9, \n    uniformtext_mode='hide',\n)\n \nfig.show()","45b8cf58":"from scipy.stats import hypergeom","47c82123":"studentInfo.sample(3)","1c9fc318":"def hipotese(df, feature, y):\n    y_res = df[y].unique()\n    feature_res = df[feature].unique()\n    N = df.shape[0]\n    lista = []\n\n    for i in y_res:\n        for j in feature_res:\n            \n            K = sum(df[y] == i)\n            n = sum(df[feature]==j)\n            x = sum((df[feature]==j) & (df[y]==i))\n            P = hypergeom.sf(x-1, N, n, K)\n\n            if P < 0.05:\n                result = 'Rejected'\n            else:\n                result = 'Acepted'\n\n            lista.append([j, i, P, result])\n    \n    return pd.DataFrame(lista, columns=[feature, y, 'Valor','Hip_nula']).sort_values(by=[feature]).reset_index(drop=True)\n","63956c6b":"df__ = hipotese(studentInfo, 'disability', 'final_result_2')","4762acf7":"df__","bd2719ae":"df__ = hipotese(studentInfo, 'cred_bin', 'final_result_2')","dbd717e2":"df__","cc19bd31":"# Random Forest","9d5d8575":"____\n# 2 - Course presentation analysis","73fae65e":"____\n# 1 - Module analysis","bbd4c2c4":"____\n# 4 - Region Analysis\n","486f02df":"## Features selection - all included","9133706e":"## Gender Results\n\n* The ratio of each group mantains between M and F\n* Second plot demonstrates an advantage for M","51aae3b2":"## Relationship between gender and final result","82fa85cb":"____\n# Education Analysis","7c40e1a8":"# EDA\n## Open University Learning Analytics dataset","e0682b43":"____\n# Studied credits analysis","c38f0076":"# Featuring\n\n## For confirmation of EDA results","9106cc9f":"## Features analysis (studentInfo)","089e03e1":"____\n# Age Analysis","e5dc5bfc":"## dealing with mission values - \"imd_band\" feature\n\n* using mode by region","49e4231f":"## Student's information","d1eafc05":"# Visualizations of most importante features","13d075c8":"____\n# Disability analysis","7effb4ba":"____\n# 3 - Gender Analysis","b0bb8f6c":"____\n# IM BAND analysis","f75380d1":"____\n# Number of prev attempts analysis","d5aa6361":"# Informations about student's activities","e9c7f7d3":"# null hypothesis test\n\n* Using hypergeometric distribution - scipy.stats.hypergeom\n","6af39206":"## create a binary result\n\n* for feature analysis"}}