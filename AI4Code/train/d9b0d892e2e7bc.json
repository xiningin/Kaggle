{"cell_type":{"0539dabe":"code","57815fad":"code","a5582f06":"code","3c3867a9":"code","f4726ca5":"code","bdf50e63":"code","db64766a":"code","af165f36":"code","f74a7f79":"code","c7a594d0":"code","5d4f64fd":"code","3e06609d":"code","0ab452b4":"code","e3bc0a64":"code","fd7b8f01":"code","f70e3b06":"code","5961fa6c":"code","e641b764":"code","070089af":"code","a22c3734":"code","899ad583":"code","cb509d9c":"code","07ae67a0":"code","90abc003":"code","d4671896":"code","1191bc43":"markdown","66029bf5":"markdown","9e50ee37":"markdown","839f19c5":"markdown","d6793d21":"markdown","58aed902":"markdown","0f3b3d4d":"markdown","408a5ee0":"markdown","cbed90f5":"markdown"},"source":{"0539dabe":"import tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom tensorflow import keras","57815fad":"# read data\ndata = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ndata.head()","a5582f06":"# split data in train and test\nn = int(data.shape[0] * 80 \/ 100);\ntrain_data = data.iloc[0:n,:]\ntest_data = data.iloc[n:,:]\n\ntrain_data.shape, test_data.shape","3c3867a9":"Y_train = tf.constant(train_data.iloc[:,0])\nX_train = tf.constant(train_data.iloc[:,1:] \/ 255.0)\nX_train = tf.reshape(X_train, (X_train.shape[0], 28, 28, 1))\n\n\nX_train.shape,Y_train.shape","f4726ca5":"Y_test = tf.constant(test_data.iloc[:,0])\nX_test = tf.constant(test_data.iloc[:,1:] \/ 255.0)\nX_test = tf.reshape(X_test, (X_test.shape[0], 28, 28, 1))\n\n\nX_test.shape,Y_test.shape","bdf50e63":"Y_train = tf.keras.utils.to_categorical(Y_train, 10)\nY_test = tf.keras.utils.to_categorical(Y_test, 10)","db64766a":"def show_sample(X, Y, index):\n\timage = X[index]\n\tif len(Y) > index:\n\t\tn = tf.argmax(Y[index])\n\t\tprint(\"Number: \" + str(n.numpy()))\n\telse:\n\t\tprint(\"Number: ???\")\n\tplt.imshow(image)","af165f36":"show_sample(X_train, Y_train, 3)\n","f74a7f79":"show_sample(X_test, Y_test, 70)","c7a594d0":"def create_model():\n    \n    model = keras.Sequential()\n\n    model.add(keras.layers.Conv2D(filters=16, kernel_size=(3, 3), activation='relu', input_shape=(28,28,1)))\n    model.add(keras.layers.BatchNormalization()) \n    model.add(keras.layers.AveragePooling2D())\n    model.add(keras.layers.Dropout(0.2)) \n\n    model.add(keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu'))\n    model.add(keras.layers.BatchNormalization()) \n    model.add(keras.layers.AveragePooling2D())\n    model.add(keras.layers.Dropout(0.4)) \n    \n    model.add(keras.layers.Flatten())\n    model.add(keras.layers.Dense(units=64, activation='relu'))\n    model.add(keras.layers.Dense(units=32, activation='relu'))\n    model.add(keras.layers.Dense(units=10, activation = 'softmax'))\n\n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics = ['accuracy'])\n\n    return model","5d4f64fd":"model = create_model()\nmodel.summary()","3e06609d":"def train (model, epochs, batch_size, X, Y):\n    history = model.fit(\n        X,\n        Y,\n        epochs = epochs,\n        batch_size = batch_size,\n        verbose = 1, \n        validation_split = 0.2\n        )    \n    return history","0ab452b4":"history = train(model, 30, 128, X_train, Y_train)","e3bc0a64":"history_df = pd.DataFrame(history.history)\nhistory_df['epoch'] = history.epoch\nhistory_df.tail()","fd7b8f01":"plt.plot(history.history['accuracy'],'r',label='training accuracy')\nplt.plot(history.history['val_accuracy'],'b',label='validation accuracy')\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\nplt.legend()\nplt.show()\n\nplt.plot(history.history['loss'],'r',label='training loss')\nplt.plot(history.history['val_loss'],'b',label='validation loss')\nplt.xlabel('epochs')\nplt.ylabel('loss')\nplt.legend()\nplt.show()","f70e3b06":"print(model.evaluate(X_test,Y_test))","5961fa6c":"prediction = model.predict(X_test)\nprint(\"Actual digits:   \", np.argmax(Y_test[0:10], axis = 1))\nprint(\"Predicted digits:\", np.argmax(prediction[0:10], axis = 1))","e641b764":"print(\"Actual image of digits:\")\nfig, a = plt.subplots(1, 10, figsize=(10, 2))\nfor i in range(10):\n  a[i].imshow(np.reshape(X_test[i], (28,28)))","070089af":"# read data\ndata = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ndata.head()","a22c3734":"X_Comp = tf.constant(data \/ 255.0)\nX_Comp = tf.reshape(X_Comp, (X_Comp.shape[0], 28, 28, 1))\n\n\nX_Comp.shape","899ad583":"prediction = model.predict(X_Comp)","cb509d9c":"print(\"Predicted digits:\", np.argmax(prediction[0:20], axis = 1))","07ae67a0":"print(\"Actual image of digits:\")\nfig, a = plt.subplots(1, 20, figsize=(20, 2))\nfor i in range(20):\n  a[i].imshow(np.reshape(X_Comp[i], (28,28)))","90abc003":"Y_Comp = np.argmax(prediction, axis = 1)\n\nidxs = []\nfor i in list(data.index):\n    idxs.append(i+1)\n\nsubmission_df = pd.DataFrame({\n    \"ImageId\": idxs,\n    \"Label\": Y_Comp\n})","d4671896":"submission_df.to_csv(\"submission.csv\", index = False)","1191bc43":"## Predict Kaggle Competition data","66029bf5":"## Train the model","9e50ee37":"## Make a prediction","839f19c5":"## Create the model","d6793d21":"## Plot","58aed902":"## Create the submission file","0f3b3d4d":"## create history dataframe","408a5ee0":"## evaluate the model on test data","cbed90f5":"# Digit Recognizer using CNN\n"}}