{"cell_type":{"a4916347":"code","9aa89021":"code","f3a5fb63":"code","4281e982":"code","375baf6c":"code","8de5610e":"code","f176567f":"code","0557fee2":"code","40a2121f":"code","858dc3f2":"code","7dc5826b":"code","1d845046":"code","6dfc4172":"markdown","d37290b2":"markdown","3712d26b":"markdown","25161174":"markdown","9b768f85":"markdown"},"source":{"a4916347":"import pandas as pd\nimport numpy as np\n\ntrain_path = r'..\/input\/tabular-playground-series-aug-2021\/train.csv'","9aa89021":"train = pd.read_csv(train_path, index_col=0)\ntrain","f3a5fb63":"X = train.iloc[:, :-1].values\ny = train.iloc[:, -1].values\n\nX.shape, y.shape","4281e982":"from xgboost import XGBRegressor\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nimport matplotlib.pyplot as plt\nrs = 69420\n\n%matplotlib inline","375baf6c":"kf = KFold(n_splits=10, shuffle=True, random_state=rs)\nmodels = []\nscores = []\ni = 0\n\nfor train_index, test_index in kf.split(X):\n    i += 1\n    print('='*25, f\"Training Fold {i}\", '='*25)\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    \n    # Remove tree method, single precision and deterministic parameters if you do not have a GPU\n    clf = XGBRegressor(tree_method='gpu_hist',\n                       single_precision_histogram=True,\n                       deterministic_histogram=False,\n                       random_state=rs)\n    \n    clf.fit(X_train, y_train, eval_set=[(X_test, y_test)], early_stopping_rounds=50, verbose=False)\n    \n    y_pred = clf.predict(X_test)\n    \n    mse = mean_squared_error(y_test, y_pred, squared=False)\n    \n    scores.append(mse)\n    models.append(clf)\n    print(f\"Fold {i} RMSE: {mse}\")\n\nprint(f\"Mean RMSE: {round(np.mean(scores), 5)}\")","8de5610e":"plt.plot(scores)\nplt.title(\"RMSE Per Fold for XGBoost\")\nplt.xlabel(\"Fold\")\nplt.ylabel(\"RMSE\")\nplt.show()\n\nprint(f\"Mean RMSE: {round(np.mean(scores), 5)}\")","f176567f":"from lightgbm import LGBMRegressor\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nimport matplotlib.pyplot as plt\nrs = 69420\n\n%matplotlib inline","0557fee2":"kf = KFold(n_splits=10, shuffle=True, random_state=rs)\nmodels = []\nscores = []\ni = 0\n\nfor train_index, test_index in kf.split(X):\n    i += 1\n    print('='*25, f\"Training Fold {i}\", '='*25)\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    \n    # device parameters if you do not have a GPU\n    clf = LGBMRegressor(device='gpu',\n                        random_state=rs)\n    \n    clf.fit(X_train, y_train, eval_set=[(X_test, y_test)], early_stopping_rounds=50, verbose=False)\n    \n    y_pred = clf.predict(X_test)\n    \n    mse = mean_squared_error(y_test, y_pred, squared=False)\n    \n    scores.append(mse)\n    models.append(clf)\n    print(f\"Fold {i} RMSE: {mse}\")\n\nprint(f\"Mean RMSE: {round(np.mean(scores), 5)}\")","40a2121f":"plt.plot(scores)\nplt.title(\"RMSE Per Fold for Lightgbm\")\nplt.xlabel(\"Fold\")\nplt.ylabel(\"RMSE\")\nplt.show()\n\nprint(f\"Mean RMSE: {round(np.mean(scores), 5)}\")","858dc3f2":"from catboost import CatBoostRegressor\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nimport matplotlib.pyplot as plt\nrs = 69420\n\n%matplotlib inline","7dc5826b":"kf = KFold(n_splits=10, shuffle=True, random_state=rs)\nmodels = []\nscores = []\ni = 0\n\nfor train_index, test_index in kf.split(X):\n    i += 1\n    print('='*25, f\"Training Fold {i}\", '='*25)\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    \n    # remove task_type parameters if you do not have a GPU\n    clf = CatBoostRegressor(task_type='GPU',\n                            random_state=rs)\n    \n    clf.fit(X_train, y_train, eval_set=[(X_test, y_test)], early_stopping_rounds=50, verbose=False)\n    \n    y_pred = clf.predict(X_test)\n    \n    mse = mean_squared_error(y_test, y_pred, squared=False)\n    \n    scores.append(mse)\n    models.append(clf)\n    print(f\"Fold {i} RMSE: {mse}\")\n\nprint(f\"Mean RMSE: {round(np.mean(scores), 5)}\")","1d845046":"plt.plot(scores)\nplt.title(\"RMSE Per Fold for Catboost\")\nplt.xlabel(\"Fold\")\nplt.ylabel(\"RMSE\")\nplt.show()\n\nprint(f\"Mean RMSE: {round(np.mean(scores), 5)}\")","6dfc4172":"# Catboost","d37290b2":"# XGBoost","3712d26b":"# Lightgbm","25161174":"# Final Scores","9b768f85":"- XGBoost: 7.88824\n- LightGBM: 7.86141\n- Catboost: 7.90038"}}