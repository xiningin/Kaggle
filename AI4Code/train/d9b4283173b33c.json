{"cell_type":{"5b4a5fb6":"code","9ba16b1a":"code","4daf9cf1":"code","996d29e2":"code","a614a58a":"code","4afc63c4":"code","d3323c33":"code","0710ba9e":"code","32edec5d":"code","80223f64":"code","e555d81b":"code","524ad988":"code","145e0b86":"code","bd78768f":"code","f19201f1":"code","225a8854":"code","98080c26":"code","89075628":"code","29c1c1d0":"code","8645e52a":"code","1ceb0d86":"code","c48ad45d":"code","0bc7773a":"code","2a36b8b5":"code","f8165f27":"code","d01414d1":"code","2010c114":"code","f87220b3":"code","7909b1cb":"code","5a3ac1c7":"code","72194fff":"code","933be5f7":"code","6ad0309a":"code","72927ccd":"code","790514bb":"code","e06af61c":"code","9b7b58c0":"code","17a9d97a":"code","d080b45b":"code","7666567f":"code","3a0f8517":"code","a68162d8":"code","d707d93d":"code","7791617d":"code","ec74515a":"code","e78b96c9":"code","9f72c0bf":"code","0d1e0b31":"code","ccb9eb7c":"code","22887efc":"code","133d3ff3":"code","f2d818a8":"code","c96a1123":"code","6fc2cd44":"code","379b3b23":"code","5bf16a5a":"code","2c8106b6":"code","5e50ace1":"markdown","3a16a457":"markdown","f4cd2a7b":"markdown","86ff532f":"markdown","c08e137e":"markdown","4f768854":"markdown","2f3afd10":"markdown","1045e13a":"markdown","a70e4dec":"markdown","a52f95fe":"markdown","6eacedc2":"markdown","314caf1d":"markdown","1dd69775":"markdown","e9e43518":"markdown"},"source":{"5b4a5fb6":"# Importing all required packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n# Suppressing Warnings\nimport warnings\nwarnings.filterwarnings('ignore')","9ba16b1a":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4daf9cf1":"#Importing dataset\nmedia = pd.read_csv(r'\/kaggle\/input\/mediacompany\/mediacompany.csv')\nmedia = media.drop('Unnamed: 7',axis = 1)","996d29e2":"#Let's explore the top 5 rows\nmedia.head()","a614a58a":"# Converting date to Pandas datetime format\nmedia['Date'] = pd.to_datetime(media['Date'])","4afc63c4":"media.head()","d3323c33":"# Deriving \"days since the show started\"\nfrom datetime import date\n\nd0 = date(2017, 2, 28)\nd1 = media.Date\ndelta = d1 - pd.to_datetime(d0)\nmedia['day']= delta","0710ba9e":"media.head()","32edec5d":"# Cleaning days\nmedia['day'] = media['day'].astype(str)\nmedia['day'] = media['day'].map(lambda x: x[0:2])\nmedia['day'] = media['day'].astype(int)","80223f64":"media.head()","e555d81b":"# days vs Views_show\nmedia.plot.line(x='day', y='Views_show')\nplt.title('Days vs Views_show')\nplt.xlabel('Days')\nplt.ylabel('Views_show')\nplt.show();","524ad988":"sns.pairplot(media)\nplt.show()","145e0b86":"media.columns","bd78768f":"media.dtypes","f19201f1":"plt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\nax =sns.countplot(x='Cricket_match_india', data=media)\nax.set_ylabel('# of Customers')\nplt.subplot(1,2,2)\nax =sns.countplot(x='Character_A', data=media)\nax.set_ylabel('# of Customers')\nplt.show()","225a8854":"# Scatter Plot (days vs Views_show)\nsns.scatterplot(x=media.day,y= media.Views_show)\nplt.title('Days vs Views_show')\nplt.xlabel('Days')\nplt.ylabel('Views_show')\nplt.show()","98080c26":"# plot for days vs Views_show and days vs Ad_impressions\n\nfig = plt.figure()\nhost = fig.add_subplot(111)\n\npar1 = host.twinx()\npar2 = host.twinx()\n\nhost.set_xlabel(\"Day\")\nhost.set_ylabel(\"View_Show\")\npar1.set_ylabel(\"Ad_impression\")\n\ncolor1 = plt.cm.viridis(0)\ncolor2 = plt.cm.viridis(0.8)\ncolor3 = plt.cm.viridis(.9)\n\np1, = host.plot(media.day,media.Views_show, color=color3,label=\"View_Show\")\np2, = par1.plot(media.day,media.Ad_impression,color=color1, label=\"Ad_impression\")\n\nlns = [p1, p2]\nhost.legend(handles=lns, loc='best')\n\n# right, left, top, bottom\npar2.spines['right'].set_position(('outward', 60))      \n# no x-ticks                 \npar2.xaxis.set_ticks([])\n# Sometimes handy, same for xaxis\npar2.yaxis.set_ticks_position('right')\n\nhost.yaxis.label.set_color(p1.get_color())\npar1.yaxis.label.set_color(p2.get_color())\n\nplt.savefig(\"pyplot_multiple_y-axis.png\", bbox_inches='tight')","89075628":"# Derived Metrics\n# Weekdays are taken such that 1 corresponds to Sunday and 7 to Saturday\n# Generate the weekday variable\nmedia['weekday'] = (media['day']+3)%7\nmedia.weekday.replace(0,7, inplace=True)\nmedia['weekday'] = media['weekday'].astype(int)\nmedia.head()","29c1c1d0":"# Putting feature variable to X\nX = media[['Visitors','weekday']]\n\n# Putting response variable to y\ny = media['Views_show']","8645e52a":"from sklearn.linear_model import LinearRegression","1ceb0d86":"# Representing LinearRegression as lr(Creating LinearRegression Object)\nlm = LinearRegression()","c48ad45d":"# fit the model to the training data\nlm.fit(X,y)","0bc7773a":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_1 = sm.OLS(y,X).fit()\nprint(lm_1.summary())","2a36b8b5":"# create Weekend variable, with value 1 at weekends and 0 at weekdays\ndef cond(i):\n    if i % 7 == 5: return 1\n    elif i % 7 == 4: return 1\n    else :return 0\n    return i\n\nmedia['weekend']=[cond(i) for i in media['day']]","f8165f27":"media.head()\n","d01414d1":"# Putting feature variable to X\nX = media[['Visitors','weekend']]\n\n# Putting response variable to y\ny = media['Views_show']","2010c114":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_2 = sm.OLS(y,X).fit()\nprint(lm_2.summary())","f87220b3":"# Putting feature variable to X\nX = media[['Visitors','weekend','Character_A']]\n\n# Putting response variable to y\ny = media['Views_show']","7909b1cb":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_3 = sm.OLS(y,X).fit()\nprint(lm_3.summary())","5a3ac1c7":"# Create lag variable\nmedia['Lag_Views'] = np.roll(media['Views_show'], 1)\nmedia.Lag_Views.replace(108961,0, inplace=True)","72194fff":"media.head()","933be5f7":"# Putting feature variable to X\nX = media[['Visitors','Character_A','Lag_Views','weekend']]\n\n# Putting response variable to y\ny = media['Views_show']","6ad0309a":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_4 = sm.OLS(y,X).fit()\nprint(lm_4.summary())","72927ccd":"plt.figure(figsize = (20,10))        # Size of the figure\nsns.heatmap(media.corr(),annot = True,cmap=\"tab20c\");","790514bb":"# Putting feature variable to X\nX = media[['weekend','Character_A','Views_platform']]\n\n# Putting response variable to y\ny = media['Views_show']","e06af61c":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_5 = sm.OLS(y,X).fit()\nprint(lm_5.summary())","9b7b58c0":"# Putting feature variable to X\nX = media[['weekend','Character_A','Visitors']]\n\n# Putting response variable to y\ny = media['Views_show']","17a9d97a":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_6 = sm.OLS(y,X).fit()\nprint(lm_6.summary())","d080b45b":"# Putting feature variable to X\nX = media[['weekend','Character_A','Visitors','Ad_impression']]\n\n# Putting response variable to y\ny = media['Views_show']","7666567f":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_7 = sm.OLS(y,X).fit()\nprint(lm_7.summary())","3a0f8517":"# Putting feature variable to X\nX = media[['weekend','Character_A','Ad_impression']]\n\n# Putting response variable to y\ny = media['Views_show']","a68162d8":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_8 = sm.OLS(y,X).fit()\nprint(lm_8.summary())","d707d93d":"#Ad impression in million\nmedia['ad_impression_million'] = media['Ad_impression']\/1000000","7791617d":"# Putting feature variable to X\nX = media[['weekend','Character_A','ad_impression_million','Cricket_match_india']]\n\n# Putting response variable to y\ny = media['Views_show']","ec74515a":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_9 = sm.OLS(y,X).fit()\nprint(lm_9.summary())","e78b96c9":"# Putting feature variable to X\nX = media[['weekend','Character_A','ad_impression_million']]\n\n# Putting response variable to y\ny = media['Views_show']","9f72c0bf":"import statsmodels.api as sm\n#Unlike SKLearn, statsmodels don't automatically fit a constant, \n#so you need to use the method sm.add_constant(X) in order to add a constant. \nX = sm.add_constant(X)\n# create a fitted model in one line\nlm_10 = sm.OLS(y,X).fit()\nprint(lm_10.summary())","0d1e0b31":"# Making predictions using the model\nX = media[['weekend','Character_A','ad_impression_million']]\nX = sm.add_constant(X)\nPredicted_views = lm_10.predict(X)","ccb9eb7c":"from sklearn.metrics import mean_squared_error, r2_score\nmse = mean_squared_error(media.Views_show, Predicted_views)\nr_squared = r2_score(media.Views_show, Predicted_views)","22887efc":"print('Mean_Squared_Error :' ,mse)\nprint('r_square_value :',r_squared)","133d3ff3":"#Actual vs Predicted\nc = [i for i in range(1,81,1)]\nfig = plt.figure()\nplt.plot(c,media.Views_show, color=\"blue\", linewidth=1.5, linestyle=\"-\")\nplt.plot(c,Predicted_views, color=\"red\",  linewidth=1.5, linestyle=\"-\")\nfig.suptitle('Actual and Predicted', fontsize=12)              # Plot heading \nplt.xlabel('Index', fontsize=12)                               # X-label\nplt.ylabel('Views', fontsize=12);                               # Y-label","f2d818a8":"# Error terms\nc = [i for i in range(1,81,1)]\nfig = plt.figure()\nplt.plot(c,media.Views_show-Predicted_views, color=\"blue\", linewidth=1.5, linestyle=\"-\")\nfig.suptitle('Error Terms', fontsize=12)              # Plot heading \nplt.xlabel('Index', fontsize=12)                      # X-label\nplt.ylabel('Views_show-Predicted_views', fontsize=12);                # Y-label","c96a1123":"# Making predictions using the model\nX = media[['weekend','Character_A','Visitors']]\nX = sm.add_constant(X)\nPredicted_views = lm_6.predict(X)","6fc2cd44":"from sklearn.metrics import mean_squared_error, r2_score\nmse = mean_squared_error(media.Views_show, Predicted_views)\nr_squared = r2_score(media.Views_show, Predicted_views)","379b3b23":"print('Mean_Squared_Error :' ,mse)\nprint('r_square_value :',r_squared)","5bf16a5a":"#Actual vs Predicted\nc = [i for i in range(1,81,1)]\nfig = plt.figure()\nplt.plot(c,media.Views_show, color=\"blue\", linewidth=1.5, linestyle=\"-\")\nplt.plot(c,Predicted_views, color=\"red\",  linewidth=1.5, linestyle=\"-\")\nfig.suptitle('Actual and Predicted', fontsize=12)              # Plot heading \nplt.xlabel('Index', fontsize=12)                               # X-label\nplt.ylabel('Views', fontsize=12);                               # Y-label","2c8106b6":"# Error terms\nc = [i for i in range(1,81,1)]\nfig = plt.figure()\nplt.plot(c,media.Views_show-Predicted_views, color=\"red\", linewidth=1.5, linestyle=\"-\")\nfig.suptitle('Error Terms', fontsize=12)              # Plot heading \nplt.xlabel('Index', fontsize=12)                      # X-label\nplt.ylabel('Views_show-Predicted_views', fontsize=12);                # Y-label","5e50ace1":"Problem Statement: A digital media company (similar to Voot, Hotstar, Netflix, etc.) had launched a show. Initially, the show got a good response, but then witnessed a decline in viewership. The company wants to figure out what went wrong.","3a16a457":"## Media Company Case Study","f4cd2a7b":"#### Running fourth model (lm4) visitors, Character_A, Lag_views & weekend","86ff532f":"#### Making predictions using lm6","c08e137e":"#### Running seventh model (lm7) Character_A, weekend & ad_impressions_million","4f768854":"#### Running eight model (lm8) Character_A, weekend & Ad_impressions","2f3afd10":"#### Running second model (lm2) visitors & weekend","1045e13a":"#### Running third model (lm3) visitors, weekend & Character_A","a70e4dec":"#### Running seventh model (lm7) Character_A, weekend, Visitors, ad_impressions_million & Cricket_match_india","a52f95fe":"#### Running seventh model (lm7) Character_A, weekend, Visitors & Ad_impressions","6eacedc2":"#### Running first model (lm1) Weekday & visitors ","314caf1d":"#### Running sixth model (lm6) Character_A, weekend & Visitors","1dd69775":"#### Making predictions using lm10","e9e43518":"#### Running fifth model (lm5) Character_A, weekend & Views_platform"}}