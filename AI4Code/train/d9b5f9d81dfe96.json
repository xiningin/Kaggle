{"cell_type":{"9d383e31":"code","737be060":"code","3b1abc78":"code","4b214842":"code","dd09af9a":"code","7ff15532":"code","bd51a527":"code","543f9c0d":"code","c59226de":"code","9306ea65":"markdown","c3e22d35":"markdown","09a0b3c8":"markdown","1a6ae858":"markdown","466c2634":"markdown","c8170d85":"markdown"},"source":{"9d383e31":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n#import warnings\nimport warnings\n# ignore warnings\nwarnings.filterwarnings(\"ignore\")\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","737be060":"data = pd.read_csv(\"\/kaggle\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")\nprint(plt.style.available) # look at available plot styles\nplt.style.use('ggplot')\n","3b1abc78":"data.head()","4b214842":"data.info()","dd09af9a":"data.describe()","7ff15532":"color_list = ['red' if i == \"Abnormal\" else 'green' for i in data.loc[:,\"class\"]]\npd.plotting.scatter_matrix(data.loc[:, data.columns != 'class'],\n                          c = color_list,\n                          figsize = [15,15],\n                          diagonal = 'hist',\n                          alpha=0.5,\n                          s = 200,\n                          marker = '*',\n                          edgecolor= \"black\")\n\nplt.show()","bd51a527":"sns.countplot(x=\"class\", data=data)\ndata.loc[:,\"class\"].value_counts()","543f9c0d":"#create data1 that includes pelvic_incidence that is feature and sacral_slope that is target variable\n\ndata1 = data[data[\"class\"] == \"Abnormal\"]\nx = np.array(data1.loc[:,\"pelvic_incidence\"]).reshape(-1,1)\ny =np.array(data1.loc[:,\"sacral_slope\"]).reshape(-1,1)\n # Scatter \nplt.figure(figsize = [10,10])\nplt.scatter(x=x,y=y)\nplt.xlabel('pelvic_incidence')\nplt.ylabel('sacral_slope')\nplt.show()","c59226de":"# Linear Regression\nfrom sklearn.linear_model import LinearRegression\nreg = LinearRegression()\n#Predict Space\npredict_space = np.linspace(min(x),max(x)).reshape(-1,1)\n#Fit\nreg.fit(x,y)\n#Predict\npredicted = reg.predict(predict_space)\n#R^2\nprint('R^2 score:', reg.score(x,y))\n#Plot regression line and scatter\nplt.plot(predict_space, predicted,color = 'black', linewidth = 3)\nplt.scatter(x=x, y=y)\nplt.xlabel(\"pelvic_incidence\")\nplt.ylabel(\"sacral_slope\")\nplt.show()","9306ea65":"## A.) Supervised Learning\n* Supervised learning: It uses that has labels. Example, there are orthopedic patients data that have labels normal and abnormal.\n    * There are features(predictor variable) and target variable. Features are like pelvic radius or scral slope. Target variables are labels normal and abnormal.\n    * Aim is that as given features(input) predict whether like normal or abnormal\n    * Classification: target variable consists of categories like normal or abnormal.\n    * Regression: target variable is continious like stock market.\n    * features = predictor variable= independent variable = columns = inputs.\n    * target variable = responce variable = class = dependent variable = output= result","c3e22d35":"## REGRESSION\n* Supervised learing\n* We will learn linear and logistic regressions\n* This orthopedic patients data is not proper for regression so I only use two features that are sacral_slope anad pelvic_incidence of abnormal\n    * I consider feature is pelvic_incidence and target is sacral_slope\n    * Lets look at scatter plot so as to understand it better\n    * reshape(-1,1): If you do not use it shape x or y becomes (210,) and we can not use it \u015fn sklearn, so we use shape(-1,1) and shape of x or y be (210,1)","09a0b3c8":"## EDA","1a6ae858":"# Machine Learning \n\n* in python there are some ML libraries like sklearn, keras or tensorflow. We will use sklearn.","466c2634":"pd.plotting.scatter_matrix:\n    \n* green: normal and red: abnormal\n* c:color\n* figsize: figure size\n* diagonal: histogram of each features\n* alpha: opacity\n* s=size of marker\n* marker: marker type\n    ","c8170d85":"Now we have our data to make regress\u015fon. In regression ploblems target value is continuously varying such as price of house of price or sacral_slope. Lets fit line into this points.\n\n\nLinear Regression\n\n* y = ax + b where y = target, x = feature and a = parameter of model\n* We choose parameter of model(a) according to minimum error function that is lost func.\n* In linear regression we use Ordinary Least Square (OLS) as lost function\n* OLS: sum all residuals but some positive and negative residuals can cancel eaach other so we sum of square of residuals. It is called OLS.\n* Score: Score uses R^2 method that is ((y_pred - y_mean)^2\/(y_actual - y_mean)^2)"}}