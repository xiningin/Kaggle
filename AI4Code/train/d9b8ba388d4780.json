{"cell_type":{"d70a6954":"code","3a5f5146":"code","c47c69d3":"code","1ff581b7":"code","ed64476b":"code","c81ac743":"code","1695acec":"code","9722bd93":"code","736d0c70":"code","0f1dda03":"code","4bf3d7e4":"code","14493337":"code","c7803457":"code","90c778d1":"code","ef3b3db3":"code","502be6f9":"markdown","864340b4":"markdown","d201b98d":"markdown"},"source":{"d70a6954":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode,iplot\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","3a5f5146":"df=pd.read_csv(\"\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Matches 2008-2020.csv\")\ndf_balltoball=pd.read_csv(\"\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Ball-by-Ball 2008-2020.csv\")","c47c69d3":"df.head()","1ff581b7":"\nx=['Sunrisers Hyderabad', 'Mumbai Indians', 'Gujarat Lions',\n    'Rising Pune Supergiant', 'Royal Challengers Bangalore',\n    'Kolkata Knight Riders', 'Delhi Daredevils', 'Kings XI Punjab',\n    'Chennai Super Kings', 'Rajasthan Royals', 'Deccan Chargers',\n    'Kochi Tuskers Kerala', 'Pune Warriors', 'Rising Pune Supergiants', 'Delhi Capitals']\n\ny = ['SRH','MI','GL','RPS','RCB','KKR','DC','KXIP','CSK','RR','SRH','KTK','PW','RPS','DC']\n\ndf.replace(x,y,inplace = True)\ndf_balltoball.replace(x,y,inplace = True)\ndf['city'].replace('Bengaluru','Bangalore',inplace = True)","ed64476b":"def Annotation(plots):\n    for bar in plots.patches:\n\n        plots.annotate(format(bar.get_height(), '.2f'), \n                       (bar.get_x() + bar.get_width() \/ 2, \n                        bar.get_height()), ha='center', va='center',\n                       size=8, xytext=(0, 5),\n                       textcoords='offset points')","c81ac743":"\nfig, ax = plt.subplots(1, 3, figsize=(20,8), sharey=True)\nsns.set_theme(style=\"whitegrid\")\n\nsns.countplot(ax=ax[0],x=\"winner\", data=df,order = df[\"winner\"].value_counts().index)\nAnnotation(sns.countplot(ax=ax[0],x=\"winner\", data=df,order = df[\"winner\"].value_counts().index))\nax[0].set_title(\"Match Winner\")\n\n\nsns.countplot(ax=ax[1],x=\"toss_winner\", data=df,order = df[\"toss_winner\"].value_counts().index)\nAnnotation(sns.countplot(ax=ax[1],x=\"toss_winner\", data=df,order = df[\"toss_winner\"].value_counts().index))\nax[1].set_title(\"Toss Winner\")\n\n\nsns.countplot(ax=ax[2],x=\"winner\", data=df[df['toss_winner']==df['winner']],order = df[\"winner\"].value_counts().index)\nAnnotation(sns.countplot(ax=ax[2],x=\"winner\", data=df[df['toss_winner']==df['winner']],order = df[\"winner\"].value_counts().index))\nax[2].set_title(\"Toss winner and Match Winner\")\n","1695acec":"'''\ntoss_decision={'field':0,'bat':1}\nresult={'runs':0,'wickets':1}\ndf['toss_decision'].map(toss_decision)\ndf['result'].map(result)'''","9722bd93":"\ndf1 = df.groupby('city')['toss_decision'].value_counts(normalize=True)\ndf1 = df1.mul(100)\ndf1 = df1.rename('percent').reset_index()\n\ng = sns.catplot(x='city',y='percent',hue='toss_decision',kind='bar',data=df1)\ng.fig.set_figwidth(30)\ng.fig.set_figheight(12)\ng.set_xticklabels(rotation=90)\ng.ax.set_ylim(0,100)\n\nfor p in g.ax.patches:\n    txt = str(p.get_height().round()) + '%'\n    txt_x = p.get_x() \n    txt_y = p.get_height()\n    g.ax.text(txt_x,txt_y,txt,size=10)","736d0c70":"\ndf1 = df.groupby('toss_winner')['toss_decision'].value_counts(normalize=True)\ndf1 = df1.mul(100)\ndf1 = df1.rename('percent').reset_index()\n\ng = sns.catplot(x='toss_winner',y='percent',hue='toss_decision',kind='bar',data=df1)\ng.fig.set_figwidth(20)\ng.fig.set_figheight(8)\ng.ax.set_ylim(0,100)\n\n\nfor p in g.ax.patches:\n    txt = str(p.get_height().round()) + '%'\n    txt_x = p.get_x() \n    txt_y = p.get_height()\n    g.ax.text(txt_x,txt_y,txt)","0f1dda03":"teams=pd.concat([df['team1'],df['team2']])\nteams=teams.value_counts().reset_index()\nteams.columns=['Team','Total Matches']\nteams['Wins']=df['winner'].value_counts().reset_index()['winner']\nteams['Win percentage']=((teams['Wins']\/teams['Total Matches'])*100).round()\ntrace = go.Table(\n    header=dict(values=[\"Team\",\"Total Matches\",\"Wins\",'Win percentage'],\n                fill = dict(color='#5499C7'),\n                font = dict(color=['rgb(45, 45, 45)'] * 5, size=14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[teams['Team'], teams['Total Matches'], teams['Wins'],teams['Win percentage']],\n               fill = dict(color=['rgb(174, 214, 241)', 'rgba(228, 222, 249, 0.65)']),\n               align = ['center'], font_size=13, height=25))\n\nlayout = dict(\n    width=750,\n    height=520,\n    autosize=False,\n    title='Total Matches vs Wins per team',\n    margin = dict(t=100),\n    showlegend=False,    \n)\nfig1 = dict(data=[trace], layout=layout)\niplot(fig1)","4bf3d7e4":"df_balltoball.head()","14493337":"df['season'] = df['date'].str[:4].astype(int)\nbatsmen = df[['id','season']].merge(df_balltoball, left_on = 'id', right_on = 'id', how = 'left').drop('id', axis = 1)\nseason=batsmen.groupby(['season'])['total_runs'].sum().reset_index()\n\navgruns_each_season=df.groupby(['season']).count().id.reset_index()\navgruns_each_season.rename(columns={'id':'matches'},inplace=1)\navgruns_each_season['total_runs']=season['total_runs']\navgruns_each_season['average_runs_per_match']=(avgruns_each_season['total_runs']\/avgruns_each_season['matches']).round()\ntrace = go.Table(\n    header=dict(values=[\"Season\",\"Matches\",\"Total runs\",'Average runs\/match'],\n                fill = dict(color='#2CF79F'),\n                font = dict(color=['rgb(45, 45, 45)'] * 5, size=14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[avgruns_each_season['season'], avgruns_each_season['matches'], avgruns_each_season['total_runs'],avgruns_each_season['average_runs_per_match']],\n               fill = dict(color=['rgb(165, 255, 216)', 'rgba(228, 222, 249, 0.65)']),\n               align = ['center'], font_size=13, height=25))\n\nlayout = dict(\n    width=750,\n    height=550,\n    autosize=False,\n    title='Total Run vs Average runs per match',\n    margin = dict(t=100),\n    showlegend=False,    \n)\nfig1 = dict(data=[trace], layout=layout)\niplot(fig1)","c7803457":"high_scores=df_balltoball.groupby(['id', 'inning','batting_team','bowling_team'])['total_runs'].sum().reset_index() \nhigh_scores=high_scores[high_scores['total_runs']>=200]\nhss = high_scores.nlargest(10,'total_runs')\n\ntrace = go.Table(\n    header=dict(values=[\"Inning\",\"Batting Team\",\"Bowling Team\", \"Total Runs\"],\n                fill = dict(color = 'black'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[hss['inning'], hss['batting_team'], hss['bowling_team'], hss['total_runs']],\n               fill = dict(color = ['#E2E4E3', 'rgb(254, 254, 254 )']),\n               align = ['center'], font_size=13))\n\nlayout = dict(\n    width=830,\n    height=410,\n    autosize=False,\n    title='Highest scores of IPL',\n    showlegend=False,    \n)\n\nfig1 = dict(data=[trace], layout=layout)\niplot(fig1)","90c778d1":"batsman_run=df_balltoball.groupby(['batsman'])['batsman_runs'].sum().nlargest().reset_index() \nbatsman_run.columns=['batsman','batsman_runs']\n\nbowler_wicket=df_balltoball.groupby(['bowler'])['is_wicket'].sum().nlargest().reset_index() \nbowler_wicket.columns=['bowler','is_wicket']\n\ntrace = go.Table(\n    header=dict(values=[\"Batsman\",\"Total Runs\",\"Bowler\",\"Wicket\"],\n                fill = dict(color = '#FFABD6'),\n                font = dict(color = 'white', size = 14),\n                align = ['center'],\n               height = 30),\n    cells=dict(values=[batsman_run['batsman'], batsman_run['batsman_runs'],bowler_wicket['bowler'], bowler_wicket['is_wicket']],\n               fill = dict(color = [ 'rgb(254, 254, 254 )']),\n               align = ['center'], font_size=13))\n\nlayout = dict(\n    width=830,\n    height=320,\n    autosize=False,\n    title='Highest Run scorer and Most wicket Taker',\n    showlegend=False,    \n)\n\nfig1 = dict(data=[trace], layout=layout)\niplot(fig1)","ef3b3db3":"wicket_per_over=df_balltoball.groupby(['over'])['is_wicket'].sum().reset_index()\nwicket_per_over.columns=['Over','Wicket']\nplt.figure(figsize=(15,8))\nsns.lineplot(data=wicket_per_over, x=\"Over\", y=\"Wicket\",markers=True, dashes=False).set(xticks=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])","502be6f9":"**Observation 2**\n\n1. Most of the team choose to field after winning toss. CSK  is an exception.\n2. In Bangalore most of the teams choose fielding that's why RCB has such high percentage of choosing fielding.","864340b4":"**Observation 3**\n\n1. RCB has the top highest score is IPL, Chris Gayle score 175 in 66 ball in that match.\n2. Virat and Mallinga is highest scorer and wicket taker.\n3. No of wicket fall reduce after 5th over because power play is over.","d201b98d":"**Observation 1**\n\n1. RPS, GL, PW and KTK has not played all seasons that's why they have very low count\n2. MI has won most of the toss and match. \n3. DC has a cood luck for toss but not same for matches."}}