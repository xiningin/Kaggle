{"cell_type":{"6bb2d14d":"code","5badfafc":"code","3849e5f2":"code","e6107c21":"code","b7b6367a":"code","4f0e8c5f":"code","1561769f":"code","bf10324f":"code","2e83cf83":"code","90b213bf":"code","f7b954b4":"code","17a072be":"code","7da6024f":"code","be2b027b":"code","6f73d1be":"code","aedea51e":"code","67364262":"code","443d7bee":"code","a14c17d0":"code","9eb36295":"code","ae1effe6":"code","ae09ba7a":"code","2bec1f68":"code","181d1689":"markdown","4a3198e2":"markdown","7f07e426":"markdown","43ffc424":"markdown","471cbd89":"markdown","9692288a":"markdown","338db4e8":"markdown","932feffd":"markdown","f2f944ef":"markdown","f20f73de":"markdown","88a10ae7":"markdown","7094675a":"markdown","feb67642":"markdown","419d9bd1":"markdown","966fff7e":"markdown","8ab34134":"markdown","c7d5015b":"markdown","0d68fadd":"markdown","92a3ae4e":"markdown","0605b073":"markdown","5a157eb9":"markdown","d827d3e0":"markdown"},"source":{"6bb2d14d":"import numpy as np\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\n#print(os.listdir(\"..\/input\"))\nimport warnings\nwarnings.filterwarnings('ignore')\nimport seaborn as sns\nimport statsmodels.api as sm\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX","5badfafc":"file = pd.read_csv(\"..\/input\/los-angeles-international-airport-passenger-traffic-by-terminal.csv\")\nfile2 = file.copy()\nfile2.head()","3849e5f2":"print(\"Number of null values: \\n\")\nprint(file2.isnull().sum())","e6107c21":"fig, (ax1,ax2,ax3)=plt.subplots(1,3, figsize=(20,10))\nax1.pie(file2['Terminal'].value_counts(), labels=file2.Terminal.unique(), autopct='%1.1f%%', startangle=180)\nax2.pie(file2['Arrival_Departure'].value_counts(), labels=file2.Arrival_Departure.unique(), autopct='%1.1f%%', startangle=180)\nax3.pie(file2['Domestic_International'].value_counts(), labels=file2.Domestic_International.unique(), autopct='%1.1f%%', startangle=180)\nax1.set_title(\"TERMINALS\", fontsize=14), ax2.set_title(\"DEP.\/ARRIV.\", fontsize=14), ax3.set_title(\"INT.\/DOM.\", fontsize=14)\nplt.draw()","b7b6367a":"plt.figure(figsize=(14,5))\nsns.countplot(y=\"Terminal\", hue=\"Arrival_Departure\", data=file2)\nplt.title(\"arrival\/departures of passengers for each terminal\", fontsize=16)\nplt.show()\nplt.figure(figsize=(14,5))\nsns.countplot(y=\"Terminal\", hue=\"Domestic_International\", data=file2)\nplt.title(\"domestic vs international flights for each terminal\", fontsize=16)\nplt.legend(loc=\"best\")\nplt.show()","4f0e8c5f":"file2.groupby(\"ReportPeriod\").sum().head()","1561769f":"x=file2.groupby(\"ReportPeriod\").sum()\nfile3=pd.DataFrame(x,columns=[\"Passenger_Count\"])\n\nfile3.index=pd.to_datetime(file3.index, format='%Y-%m-%d').strftime('%Y-%m')\nfile3.index.name =\"Date\"\nfile3.columns=[\"Number\"]\nfile3.head()","bf10324f":"fig,ax=plt.subplots(figsize=(15,5))\nax.plot(file3)\nax.set(xlabel=\"Date\", ylabel=\"Number\")\nax.set_title(\"Total number of passengers per period\", fontsize=16)\nplt.show()","2e83cf83":"#Changing the order of the indices\ndf=pd.DataFrame(file3)\ndf_ascending=df.sort_index(axis=0, ascending=True, inplace=False)\ndf=df_ascending","90b213bf":"#splitting into training and testing data\npercent_training=0.8\nsplit_point=round(len(df)*percent_training)\ntraining, testing=df[0:split_point], df[split_point:]\nprint(\"The shape of training set is: \",training.shape)\nprint(\"The shape of testing set is: \",testing.shape)","f7b954b4":"#To check the stationarity of data\n'''from statsmodels.tsa.stattools import adfuller\ndef check_adfuller(ts):\n    result=adfuller(ts, autolag=\"AIC\")\n    print(\"test statistics: \", result[0])\n    print(\"p-value: \", result[1])\n    print(\"Critical value: \", result[4])\ncheck_adfuller(training[\"Number\"])'''","17a072be":"training_diff=training.diff().dropna()\nplt.figure(figsize=(10,5))\nplt.plot(training_diff)\nplt.title(\"After taking first difference\", fontsize=14)\nplt.draw()","7da6024f":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfig,ax = plt.subplots(2,1,figsize=(15,8))\nplt.suptitle(\"ACF\/PACF of the first differencing\", fontsize=16)\nfig = sm.graphics.tsa.plot_acf(training_diff, lags=20, ax=ax[0])\nfig = sm.graphics.tsa.plot_pacf(training_diff, lags=20, ax=ax[1])\nplt.show()","be2b027b":"'''\nRules for SARIMA model selection from ACF\/PACF plots\nThese are all rule of thumbs, not an exact science for picking the number of each parameters in SARIMA(p,d,q)(P,D,Q)[S]. It is an art in picking good parameters from the ACF\/PACF plots. The following rules also apply to ARMA and ARIMA models.\n\nIdentifying the order of differencing:\n\nd=0 if the series has no visible trend or ACF at all lags is low.\n\nd\u22651 if the series has visible trend or positive ACF values out to a high number of lags.\n\nNote: if after applying differencing to the series and the ACF at lag 1 is -0.5 or more negative the series may be overdifferenced.\n\nNote: If you find the best d to be d=1 then the original series has a constant trend. A model with d=2 assumes that the original series has a time-varying trend.\n\nIdentifying the number of AR and MA terms\np is equal to the first lag where the PACF value is above the significance level.\n\nq is equal to the first lag where the ACF value is above the significance level.\n\nIdentifying the seasonal part of the model:\n\nS is equal to the ACF lag with the highest value (typically at a high lag).\n\nD=1 if the series has a stable seasonal pattern over time.\n\nD=0 if the series has an unstable seasonal pattern over time.\n\nRule of thumb: d+D\u22642\n\nP\u22651 if the ACF is positive at lag S, else P=0.\n\nQ\u22651 if the ACF is negative at lag S, else Q=0.\n\nRule of thumb: P+Q\u22642\n'''","6f73d1be":"model_fit=SARIMAX(training, order=(6, 1, 6), seasonal_order=(1,0,0, 6), enforce_stationarity=False, enforce_invertibility=False).fit(disp=False)","aedea51e":"K=len(testing)\nforecast=model_fit.forecast(K)\n#forecast=np.exp(forecast)\nforecast.index=testing.index\nplt.figure(figsize=(25,8))\nplt.plot(df,\"b\")\nplt.plot(forecast, \"r\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Number\")\nplt.xticks(rotation=90)\nplt.autoscale(enable=True, axis='x', tight=True)\nplt.axvline(x=testing.index[0], linestyle='--', color=\"gray\")\nplt.draw()\n\nfrom sklearn.metrics import mean_squared_error\nprint(\"RMSE is: \", round(np.sqrt(mean_squared_error(testing,forecast))))","67364262":"'''my_list=[]\nfor p in [6,8,10,12]:\n    for q in [4,6,12]:\n        for P in [0,1,2]:\n            for Q in [0,1]:\n                for S in [6, 12]:\n                    for D in [0,1]:\n                        for d in [1,2]:\n                            model_fit=SARIMAX(training, order=(p,1,q), seasonal_order=(P,1,Q,S), enforce_stationarity=False, enforce_invertibility=False).fit(disp=False)\n                            forecast=model_fit.forecast(32)\n                            my_list.append(np.sqrt(mean_squared_error(testing,forecast)))\n                            print(p,d,q,P,D,Q,S,np.sqrt(mean_squared_error(testing,forecast)))\nprint(np.min(my_list))'''\n","443d7bee":"model_fit=SARIMAX(training, order=(10, 1, 6), seasonal_order=(2, 1, 0, 6), enforce_stationarity=False, enforce_invertibility=False).fit(disp=False)","a14c17d0":"forecast=model_fit.forecast(K)\nforecast.index=testing.index\nplt.figure(figsize=(25,8))\nplt.plot(df,\"b\")\nplt.plot(forecast, \"r\")\nplt.xlabel(\"years\")\nplt.ylabel(\"number\")\nplt.xticks(rotation=90)\nplt.autoscale(enable=True, axis='x', tight=True)\nplt.axvline(x=testing.index[0], linestyle='--', color=\"gray\")\nplt.draw()\nprint(\"New RMSE is: \", round(np.sqrt(mean_squared_error(testing,forecast))))","9eb36295":"t=pd.date_range(start=\"2019-04\", end=\"2020-04\", freq=\"M\")\nfuture=pd.DataFrame(index=t, columns=file3.columns)\nfuture.index=pd.to_datetime(future.index, format='%Y-%m-%d').strftime('%Y-%m')\ndf=pd.concat([file3, future], axis=0)","ae1effe6":"model_fit.predict(start=160, end=171)","ae09ba7a":"df.Number.iloc[-12:]=model_fit.predict(start=160, end=171).values","2bec1f68":"plt.figure(figsize=(25,5))\n#b=df[\"Number\"].iloc[-24:-12]\nyear_ahead_forecast=df[\"Number\"].iloc[-12:]\n\nplt.plot(training, label=\"training\")\nplt.plot(testing, \"k\", label=\"testing\")\nplt.plot(forecast, \"r\", label=\"validation\")\nplt.plot(year_ahead_forecast,\"g\", label=\"year ahead forecast\")\n\nplt.legend()\nplt.axvline(x=testing.index[0], linestyle='--', color=\"gray\")\nplt.axvline(x=year_ahead_forecast.index[0], linestyle='--', color=\"gray\")\nplt.xlabel(\"years\")\nplt.ylabel(\"number\")\nplt.xticks(rotation=90)\nplt.show()","181d1689":"<a id=\"8\"><\/a> <br>\n## Parameter tuning","4a3198e2":"Don't you agree that it's good enough from the first attempt.\n\nHowever we can go on with tuning of parameters. Let's consider lags with higher values:\n\nfor p let's consider 1,6,8,10,12, for q the values 1,4,6,12, for P: 0,1,2, for Q: 0,1 and for S: 6 and 12.\n\nWith this many combinations, we still get a result very close to the one we got from our first attempt. Now RMSE is 154126 (so we have tiny improvement).","7f07e426":"<a id=\"3\"><\/a> <br>\n## Univariate Analysis","43ffc424":"To get rid of the trend let's consider the differenced data and analyze the residuals with autocorrelation plots.\n\n","471cbd89":"As we are going to focus on **time series prediction** to predict the number of passengers, we'll keep only the column \"Passenger_Count\". It will show the number of passengers recorded in the mentioned report period.\n\nLet's group our data by Report period and aggregate the sum of the number of passengers for the mentioned periods.","9692288a":"Now I will have use the predict function to create forecast values for these newlwy added time periods and plot them.","338db4e8":"<a id=\"1\"><\/a> <br>\n## Loading Data","932feffd":"From inspecting the plot we can conclude that this time series has a mostly positive linear trend, multiplicative seasonal patterns, and possibly some irregular patterns. This information suggests to use a SARIMA model to do our forecasting. First we split 80% of data for training and 20% fo testing.","f2f944ef":"After splitting data into training and testing sets we get:","f20f73de":"<a ><img src=\"https:\/\/media.fox5atlanta.com\/media.fox5atlanta.com\/photo\/2017\/01\/29\/Delta3_1485740598814_2667919_ver1.0_640_360.jpg\" ><\/a>\n* Hi guys, I hope you are doing fine. \n* In this kernel, we use data for **LAX passenger traffic**.\n* We are going to analyze the data, visualize our data to understand it better.  \n* After that, we will focus on **time series prediction** to predict the number of passengers for future dates.\n* For time series prediction, we will use **SARIMA** method. \n \n <br> <font color='blue'> Content: \n    * [Loading data](#1)\n    * [Univariate analysis](#3)\n    * [Bivariate analysis](#4)\n    * [Data preparation](#5)\n    * [Model selection](#6)\n    * [Model fit and prediction](#7)\n    * [Parameter tuning](#8)\n    * [Year ahead forecast](#9)\n    * [Summary](#10)\n","88a10ae7":"We see here that there is no more trend. However, an unstable seasonal pattern is still present in this residual series. It indicates that we need to remove the seasonal pattern which can be done with SARIMA. We can select the seasonal pattern parameters of SARIMA by looking at the ACF and PACF plots.","7094675a":"<a id=\"6\"><\/a> <br>\n## Model selection","feb67642":"<a id=\"10\"><\/a> <br>\n## Summary\n\nUsing data for LAX passengers we created a model (Seasonal ARIMA) to predict number of passengers one year ahead. We saw that the model fits the testing data prety well. It will be interesting to follow the real number of the passengers for upcoming months to see how well our model performs.\n\nHope you found this kernel interesting. If so, please UPVOTE!\n\nIn case of having some comments, you are always welcome...;)\n\n\n","419d9bd1":"Now we'll convert the column of time to a more confortable format. We'll rename our columns as \"Date\" and \"Number\".","966fff7e":"<a id=\"9\"><\/a> <br>\n## Year ahead forecast\n\nNow that we have a model built, we want to use it to make forecasts.\n\n","8ab34134":"The data we have loaded contains records for the following features:\n * DataExtractDate\t\n * ReportPeriod\t\n * Terminal\t\n * Arrival_Departure\t\n * Domestic_International\t\n * Passenger_Count","c7d5015b":"The first several rows of the data are presented below.","0d68fadd":"Looking at the ACF and PACF plots of the differenced series we see our first most significant value at lag 6 for ACF and at the same lag 6 for the PACF which suggest to use p = 6 and q = 6. We also have a big value at lags 6,12,18,... in the ACF plot which suggests our season is S = 6. Since this is a differenced series for SARIMA we set d = 1, and since the seasonal pattern is not stable over time we set D = 0. All together this gives us a SARIMA(6,1,6)(1,0,0)[6] model. Next we run SARIMA with these values to fit a model on our training data.","92a3ae4e":"<a id=\"7\"><\/a> <br>\n## Model fit and prediction","0605b073":"<a id=\"4\"><\/a> <br>\n## Bivariate analysis","5a157eb9":"So, the model with the best result is the following:","d827d3e0":"<a id=\"5\"><\/a> <br>\n## Data preparation"}}