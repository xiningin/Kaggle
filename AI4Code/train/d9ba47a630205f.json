{"cell_type":{"9a59157b":"code","dc10965e":"code","9e4e46f1":"code","21782cf0":"code","0e25e70a":"code","8122d133":"code","846338b2":"code","54bec377":"code","74530582":"code","b4c660e6":"code","bcf867b4":"code","2dd5753a":"code","8d24515e":"markdown","2c7b7ef0":"markdown","8719c149":"markdown","6382dc43":"markdown","874d591f":"markdown","06dc75b1":"markdown","89ca9cc9":"markdown","d132ffa8":"markdown","ba3abf4f":"markdown","5942df99":"markdown","225a1cfe":"markdown","7f22eb6a":"markdown"},"source":{"9a59157b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom keras.preprocessing import image\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, Lambda\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense, Dropout\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.utils.np_utils import to_categorical\nfrom keras.datasets import mnist\nfrom keras.layers.advanced_activations import PReLU","dc10965e":"(X_train,y_train),(X_test,y_test)=mnist.load_data()\nX_train=X_train.reshape(X_train.shape[0],28,28,1).astype('float32')\nX_test=X_test.reshape(X_test.shape[0],28,28,1).astype('float32')\nprint(X_train.shape)\nprint(X_test.shape)","9e4e46f1":"X_train_ = X_train.reshape(X_train.shape[0], 28, 28)\n\nfor i in range(0, 3):\n    plt.subplot(330 + (i+1))\n    plt.imshow(X_train_[i], cmap=plt.get_cmap('gray'))\n    plt.title(y_train[i]);","21782cf0":"y_train=to_categorical(y_train)\ny_test=to_categorical(y_test)\nnum_classes=y_test.shape[1]","0e25e70a":"gen=image.ImageDataGenerator()\nbatches=gen.flow(X_train,y_train,batch_size=64)","8122d133":"mean=np.mean(X_train)\nstd=np.std(X_train)\n\ndef standardize(x):\n    return (x-mean)\/std","846338b2":"def model():\n    model=Sequential()\n    model.add(Lambda(standardize,input_shape=(28,28,1)))\n    model.add(Conv2D(64,(3,3),activation=\"linear\"))\n    model.add(PReLU())\n    model.add(Conv2D(64,(3,3),activation=\"linear\"))\n    model.add(PReLU())\n    \n    model.add(MaxPooling2D(pool_size=(2,2)))\n    model.add(BatchNormalization())\n    model.add(Conv2D(128,(3,3),activation=\"linear\"))\n    model.add(PReLU())\n    model.add(Conv2D(128,(3,3),activation=\"linear\"))\n    model.add(PReLU())\n    \n    model.add(MaxPooling2D(pool_size=(2,2)))\n    model.add(BatchNormalization())\n    model.add(Conv2D(256,(3,3),activation=\"linear\"))\n    model.add(PReLU())\n    \n    model.add(MaxPooling2D(pool_size=(2,2)))\n    \n    model.add(Flatten())\n    model.add(BatchNormalization())\n    model.add(Dense(512,activation=\"linear\"))\n    model.add(PReLU())\n    model.add(Dense(10,activation=\"softmax\"))\n    \n    model.compile(loss=\"categorical_crossentropy\",optimizer=\"adam\",metrics=[\"accuracy\"])\n    model.fit_generator(generator=batches,steps_per_epoch=batches.n,epochs=3)\n    return model","54bec377":"model=model()","74530582":"score=model.evaluate(X_test,y_test,verbose=0)\nprint(\"CNN Error:%.2f%%\" %(100-score[1]*100))","b4c660e6":"X_test=pd.read_csv('..\/input\/test.csv')\nX_test=X_test.values.reshape(X_test.shape[0],28,28,1)\npreds=model.predict_classes(X_test,verbose=1)\nmodel.save('digit_recognizer.h5')","bcf867b4":"def write_preds(preds,fname):\n    pd.DataFrame({\"ImageId\":list(range(1,len(preds)+1)),\"Label\":preds}).to_csv(fname,index=False,header=True)","2dd5753a":" write_preds(preds,\"cnn-test.csv\")","8d24515e":"**Submit Results**","2c7b7ef0":"**Data Augmentation**","8719c149":"**Function to Submit Results to Kaggle**","6382dc43":"**Load Train and Test Data**","874d591f":"**Normalization**","06dc75b1":"**Model Training**","89ca9cc9":"**One-Hot Encoding**","d132ffa8":"**Data Visualization**","ba3abf4f":"**Model Evaluation**","5942df99":"**Model Definition**","225a1cfe":"**Prediciting the Outputs**","7f22eb6a":"**Import all Necessary Libraries**"}}