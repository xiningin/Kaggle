{"cell_type":{"4f849812":"code","c368452d":"code","6bca868c":"code","c8c8b54a":"code","b5ba7934":"code","0dce31dd":"code","d998d2bb":"code","e4b8f31a":"code","f68ab776":"code","0a275883":"code","34c0dd95":"code","6bd84694":"code","f1ce1c25":"code","908dd4b5":"code","e56c2a94":"code","206bcf39":"code","104425e9":"code","99b945bd":"code","1ee3ca9a":"code","4a9bf4d6":"code","d3620de9":"code","34bdfc88":"code","8ab8070a":"code","d0939265":"code","b2b033c4":"code","7ed6996f":"code","e7ac6b70":"code","715daeb3":"code","578dd27f":"code","8236fa07":"code","b64513ab":"code","fc6ccc41":"code","8f660757":"code","7a5f6b91":"code","e30baa80":"code","ef5385a1":"code","6e9efa81":"code","a6aea035":"code","1ad57a92":"code","17a61005":"code","b70a552b":"code","2e8ccbf6":"code","db39dc52":"code","e5125c19":"code","401b3237":"code","cca06453":"code","de3ece29":"code","da451bc8":"markdown","94bf466f":"markdown","169bb818":"markdown","401d2679":"markdown","43f0fede":"markdown","95cde0c7":"markdown","fbd78016":"markdown","33353c19":"markdown","f49ffe30":"markdown","87e4bf8a":"markdown","69492dfe":"markdown","a3c28812":"markdown","b3dd4ab6":"markdown","37c6caf1":"markdown","bf887b97":"markdown","933b087a":"markdown","de2acf32":"markdown","b9e16402":"markdown","92496754":"markdown","22263a23":"markdown","2738bf32":"markdown","d3559b9f":"markdown","768a9365":"markdown","a4102ddc":"markdown","3e08c741":"markdown","db369b03":"markdown","feeb5e4c":"markdown","04187947":"markdown","82b670dc":"markdown","f7d22c4a":"markdown"},"source":{"4f849812":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # For visualzations and graph creations\n%matplotlib inline\nimport seaborn as sns # For advanced visualizations and graph creations\nfrom sklearn.preprocessing import LabelEncoder # For Feature Engineering Method - Label Encoding\nfrom sklearn.preprocessing import MinMaxScaler # For Normalization\nfrom sklearn.model_selection import train_test_split # For Splitting the data into train data and test data\nfrom sklearn.ensemble import RandomForestRegressor # For Creation of Random Forest Regressor Model\nfrom sklearn.linear_model import LinearRegression # For Creation of Linear Regression Model\nfrom catboost import CatBoostRegressor # For Creation of CatBoost Regressor Model\n\n# Libraries for calculationg Metrics of the Model we create:\nfrom sklearn.metrics import mean_squared_error \nfrom sklearn.metrics import r2_score\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c368452d":"audidata = pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/audi.csv\")\naudidata.head()","6bca868c":"audidata.info()","c8c8b54a":"a_clean = audidata.copy(deep = True)","b5ba7934":"audidata.shape","0dce31dd":"audidata.isna().sum()","d998d2bb":"box1 = sns.boxplot(x = 'mileage', data = a_clean)","e4b8f31a":"a_clean = a_clean[a_clean['mileage'] < 200000]","f68ab776":"box1 = sns.boxplot(x = 'mileage', data = a_clean)","0a275883":"print('We removed {} outliers!'.format(len(audidata) - len(a_clean)))","34c0dd95":"box1 = sns.boxplot(x = 'mpg', data = audidata)","6bd84694":"a_clean = a_clean[a_clean['mpg'] < 100]","f1ce1c25":"box1 = sns.boxplot(x = 'mpg', data = a_clean)","908dd4b5":"print('We removed {} outliers!'.format(len(audidata) - len(a_clean)))","e56c2a94":"box1 = sns.boxplot(x = 'tax', data = a_clean)","206bcf39":"a_clean = a_clean[a_clean['tax'] < 500]","104425e9":"box1 = sns.boxplot(x = 'tax', data = a_clean)","99b945bd":"print('We removed {} outliers!'.format(len(audidata) - len(a_clean)))","1ee3ca9a":"sns.heatmap(a_clean.corr(), cmap =\"Reds\", annot = True)\nplt.title(\"Correlation HeatMap\/ Matrix\")\nplt.show()","4a9bf4d6":"fig, axes = plt.subplots(figsize = (12,10), nrows = 2, ncols = 3)\nsns.histplot(a_clean[\"year\"], ax = axes[0,0])\nsns.histplot(a_clean[\"mileage\"], ax = axes[0,1])\nsns.histplot(a_clean[\"tax\"], ax = axes[0,2])\nsns.histplot(a_clean[\"mpg\"], ax = axes[1,0])\nsns.histplot(a_clean[\"engineSize\"], ax = axes[1,1])\nsns.histplot(a_clean[\"price\"], ax = axes[1,2])\nplt.show()","d3620de9":"sns.countplot(x = \"transmission\", data = a_clean)\nplt.title(\"Transmission Types\")\nplt.show()","34bdfc88":"print(a_clean['model'].unique())","8ab8070a":"print(a_clean[\"model\"].value_counts())\nplt.figure(figsize = (10,10))\nsns.countplot(y = a_clean[\"model\"])\nplt.title(\"Model and thier listing Count\")\nplt.show()","d0939265":"plt.subplots(figsize = (18,18))\npriceByModel = a_clean.groupby(\"model\")['price'].mean().reset_index()\nplt.title(\"Average Price of Vehicle\")\nsns.set()\nsns.barplot(x = 'model', y = 'price', data = priceByModel)\nplt.show()","b2b033c4":"plt.figure(figsize = (10,10))\nsns.countplot(x = \"fuelType\", data = a_clean)\nplt.title(\"Fuel Type of Listed Car\")\nplt.show()","7ed6996f":"sns.pairplot(a_clean, diag_kind = \"kde\", hue = \"transmission\")\nplt.show()","e7ac6b70":"sns.lineplot(x = \"year\", y = \"tax\", data = a_clean)\nplt.title(\"The Taxes applied on the car based on the Number of Years old\")\nplt.show()","715daeb3":"sns.lineplot(x = \"year\", y = \"price\", data = a_clean)\nplt.title(\"The Price based on the number of Years old\")\nplt.show()","578dd27f":"sns.histplot(data = a_clean, x = 'price', hue = 'fuelType', fill = False, element = 'step')\nplt.title(\"The Prices of the cars of specific Fuel Type\")\nplt.show()","8236fa07":"plt.figure(figsize = (12,10))\nsns.boxplot(data = a_clean, x = 'model', y = 'price', order = a_clean['model'].value_counts().index, palette = 'magma')\nplt.title(\"Price range based on car models\")\nplt.show()","b64513ab":"plt.figure(figsize = (12,5))\nsns.boxplot(data = a_clean, x = 'engineSize', y = 'price', palette = 'magma')\nplt.title(\"The Price range of the car having specific engine size\")\nplt.show()","fc6ccc41":"sns.distplot(x = a_clean['year'], bins = 10, color = 'Orange',label = 'KDE')\nplt.legend()\nplt.gcf().set_size_inches(12,5)\nplt.show()","8f660757":"plt.figure(figsize = (10,10))\nplt.scatter(x = a_clean['mileage'], y = a_clean['price'])\nplt.title(\"Mileage vs Price\")\nplt.show()","7a5f6b91":"encoder = LabelEncoder()\na_clean['model'] = encoder.fit_transform(a_clean['model'])\nmodel_mapping = {index : label for index, label in enumerate(encoder.classes_)}\nmodel_mapping","e30baa80":"a_clean['transmission'] = encoder.fit_transform(a_clean['transmission'])\ntransmission_mapping = {index : label for index, label in enumerate(encoder.classes_)}\ntransmission_mapping","ef5385a1":"a_clean['fuelType'] = encoder.fit_transform(a_clean['fuelType'])\nfuelType_mapping = {index : label for index, label in enumerate(encoder.classes_)}\nfuelType_mapping","6e9efa81":"a_clean.head()","a6aea035":"x = a_clean.drop('price', axis = 1)\ny = a_clean['price']","1ad57a92":"scaler = MinMaxScaler(copy = True, feature_range = (0,1))\nX = scaler.fit_transform(x)\nX[:10]","17a61005":"x_train, x_test,y_train,y_test = train_test_split(x,y,test_size = 0.35, random_state=0)","b70a552b":"print(\"Shape of the x_train: \", x_train.shape)\nprint(\"Shape of the x_test: \", x_test.shape)\nprint(\"Shape of y_train:\", y_train.shape)\nprint(\"Shape of the y_test: \", y_test.shape)","2e8ccbf6":"LinearRegressionModel = LinearRegression(fit_intercept = True, normalize = True, copy_X = True, n_jobs = -1)\nLinearRegressionModel.fit(x_train, y_train)\n\n\nprint('Linear Regression Train Score is : ' , LinearRegressionModel.score(x_train, y_train))\nprint('Linear Regression Test Score is : ' , LinearRegressionModel.score(x_test, y_test))\n\nprint('----------------------------------------------------')\ny_pred = LinearRegressionModel.predict(x_test)\nprint('Predicted Value for Linear Regression is : ' , y_pred[:10])","db39dc52":"pricePredicted = pd.DataFrame({'Actual Price': y_test, 'Predicted Price': y_pred})\npricePredicted = pricePredicted.reset_index()\npricePredicted.head(5)","e5125c19":"RandomForestRegressorModel = RandomForestRegressor(n_estimators=100,max_depth=11, random_state=33)\nRandomForestRegressorModel.fit(x_train, y_train)\n\nprint('Random Forest Regressor Train Score is : ' , RandomForestRegressorModel.score(x_train, y_train))\nprint('Random Forest Regressor Test Score is : ' , RandomForestRegressorModel.score(x_test, y_test))\nprint('Random Forest Regressor No. of features are : ' , RandomForestRegressorModel.n_features_)\nprint('----------------------------------------------------')\n\ny_pred = RandomForestRegressorModel.predict(x_test)\nprint('Predicted Value for Random Forest Regressor is : ' , y_pred[:10])\n","401b3237":"pricePredicted = pd.DataFrame({'Actual Price': y_test, 'Predicted Price': y_pred})\npricePredicted = pricePredicted.reset_index()\npricePredicted.head(5)","cca06453":"catModel = CatBoostRegressor(verbose = 0, random_state = 33)\ncatModel.fit(x_train, y_train)\ny_pred = catModel.predict(x_test)\nr2 = r2_score(y_pred, y_test)\nprint(f'CatBoost Regressor Model by Yandex r2 score : {r2:0.5f}')","de3ece29":"pricePredicted = pd.DataFrame({'Actual Price': y_test, 'Predicted Price': y_pred})\npricePredicted = pricePredicted.reset_index()\npricePredicted.head(5)","da451bc8":"The average price of the Audi model R8 is higher than anyone. This is because Audi R8 is a two-seater sports car. It is a very expensive car and hence is priced above than anyone.\n","94bf466f":"After removal, this was the boxplot for mileage column:","169bb818":"There are more number of Audi A3's then any model.","401d2679":"### Exploratory Data Analysis:\n\nAfter outlier removal, the data was ready for Exploratory Data Analysis.","43f0fede":"These are the unique Audi Models in the data set.","95cde0c7":"This countplot shows us that there are around 4000+ cars which are of Manual Transmission in UK. Around 2500+ cars which are Automatic Transmission in UK and around 3500+ Cars which are Semi-Auto transmission.","fbd78016":"### Importing the Data set:","33353c19":"### Outlier Removal:","f49ffe30":"From the Correlation Matrix we get the following information:\n- There is a negative correlation price and mileage. This means the car that has driven more has more mileage and therefore the price is lesser since the car is used more.\n- There is a  negative correlation with mpg(miles per gallon) and the price. This means that the sports car have less miles per gallon ratio but whereas normal cars have more miles per gallon. So hence the price of the sports car models are more and the normal car models are of lesser price.\n- There is positive correlation between price of the car and the engine size of the car. It means that people tend to buy those cars having higher engine size.\n- There is a small positive correlation between tax and the price of the car. Cars with higher taxes on them are costlier. Total Price = Selling Price + VAT(Tax applied). ^ inc.","87e4bf8a":"We can observe that there are outliers in the range 0 \u20ac -100 \u20ac and 500 \u20ac - 600 \u20ac. Removed these outliers from the data in tax column.","69492dfe":"We can observe that there very little visible difference between the actual price of the car listed and the predicted price of the car, predicted by CatBoost Regressor Model, since it is 96% accurate.","a3c28812":"By this lineplot we can see that atleast 150 \u20ac are the taxes applied on cars which are relatively new i.e. 1-2 years old. In UK, every car needs to pay road tax irrespective of being a used car or a new car. There can been some deviations in the taxes on the specific year-old car. Our assumption is that the taxes are varying because the type of the car too. Like SUVs, Sedans will have more taxes applied on it.","b3dd4ab6":"This shows that the listed cars are of diesel fuel type. Petrol fuel type are at the second place, amongst the listed cars.","37c6caf1":"Have split the data into two parts for model creation: Train Data and Test Data. 65% Train Data and 35% Test Data.","bf887b97":"After cleaning the outliers, this the boxplot for the tax column.","933b087a":"The above visualization shows that the prices of cars of Diesel and Petrol fuel types are having almost similar price range.","de2acf32":"There is a visible difference between the actual car price listed and the predicted price by Linear Regression model since the accuracy of the model is just 80.23%.","b9e16402":"By this lineplot we can see that the cars which are relatively new are having higher prices which is obvious because lesser distance the cars have travelled. But we can see that there are some deviations or differeneces in prices of the car which are like 4-5 years old. People have tried to maximize their profit but haven't seen it through.","92496754":"### Model Creation:\n#### Linear Regression Model:","22263a23":"We observed that there are outliers ranging from 120 mpg - 200 mpg mileage. We removed those and kept the range of mpg as 0 mpg - 100 mpg.","2738bf32":"As we can see that this data set is already cleaned i.e. it is having no NA Values. But still it doesn't mean that the data doesn't contain noisy data points.","d3559b9f":"### Randm Forest Regressor:","768a9365":"We detected the outliers in numerical columns using boxplot.","a4102ddc":"We can observe that there very little visible difference between the actual price of the car listed and the predicted price of the car, predicted by Random Forest Regressor Model, since it is 95.56% accurate.","3e08c741":"Used the Label Encoding Technique.","db369b03":"After removal we can the difference in the boxplot.","feeb5e4c":"We can see that there is a car which is above the 300,000 miles driven. This is an outlier hence remoeved it by keeping the range of data points for mileage as 0-200,000 miles.","04187947":"For year column, it is right-skewed which means that most of the cars are between 2015 to 2020.\nFor mileage column, it is left-skewed which means that most of the cars listed are driven for more than 5000 miles.\nFor engineSize column, the most used cars engine size is between 1.5 lts to 2 lts.","82b670dc":"### CatBoost Regressor by Yandex:","f7d22c4a":"### Feature Engineering:\n#### Label Encoding:"}}