{"cell_type":{"e914e9e1":"code","bf8e9daf":"code","05596b7f":"code","70cc3490":"code","ed13c55b":"code","70740eae":"code","76659fe3":"code","e15c4bd0":"code","41b86848":"code","d109ca8b":"code","258f5e8a":"code","46457b84":"code","e6937e31":"code","637bae48":"code","bf7d71a7":"markdown","3c4181bd":"markdown","0ab7d4f5":"markdown","d7a73c32":"markdown","8e6d7dc4":"markdown","21db5bdf":"markdown","15724e55":"markdown","154eacf6":"markdown","ca517d6e":"markdown","65a82e82":"markdown","9c468829":"markdown"},"source":{"e914e9e1":"import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score","bf8e9daf":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","05596b7f":"# 1. delete insignificant feature\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)\n\n# 2. check null and fill new data\ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\n# 3.one hot encoding \nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)","70cc3490":"y = train['Survived']\nX = train.drop(['Survived'], axis=1)\nX_test = test\nRANDOM_SEED = 42\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.2,random_state = RANDOM_SEED )","ed13c55b":"from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier, VotingClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold, learning_curve","70740eae":"clf = RandomForestClassifier();\n\nimport numpy as np \nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import cross_val_score\n\nrandom_search = {'criterion': ['entropy', 'gini'],\n               'max_depth': [10,20,30,40,50],\n               'max_features': ['auto', 'sqrt'],\n               'min_samples_leaf': [4, 6, 8,10,12,14,16,18,20],\n               'min_samples_split': [5, 7,10,15,20,25,30,35],\n               'n_estimators': [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,200,300]}\n\nclf = RandomForestClassifier()\nmodel = RandomizedSearchCV(estimator = clf, param_distributions = random_search, n_iter = 100, \n                               cv = 5, verbose= 1, random_state= 42, n_jobs = -1)\nmodel.fit(X_train,y_train)","76659fe3":"model.best_estimator_\n","e15c4bd0":"model.best_estimator_.feature_importances_","41b86848":"for name, score in sorted(zip(train.columns, model.best_estimator_.feature_importances_),key = lambda x : -x[1]):\n    print(name, score)","d109ca8b":"predictionforest = model.best_estimator_.predict(X_val)","258f5e8a":"print(confusion_matrix(y_val,predictionforest))\n","46457b84":"print(classification_report(y_val,predictionforest,target_names=['Died', 'Survived']))","e6937e31":"acc2 = accuracy_score(y_val,predictionforest)\nacc2","637bae48":"submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\nsubmission.Survived = model.predict(X_test)\nsubmission.to_csv(\"submission.csv\",index=False)","bf7d71a7":"# split train and valid set ","3c4181bd":"# predict and submit","0ab7d4f5":"# make model ","d7a73c32":"# preprocessing","8e6d7dc4":"# import basic libraray ","21db5bdf":"# confustion matrix","15724e55":"# classification report ","154eacf6":"# predict validation set ","ca517d6e":"# load data","65a82e82":"# accuracy score","9c468829":"# featue importance "}}