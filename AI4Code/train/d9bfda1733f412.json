{"cell_type":{"7a455bc5":"code","0840b6fb":"code","509a83d4":"code","3c61428c":"code","ccaf86ad":"code","b06c7cfe":"code","b44c2372":"code","d963b4cd":"code","f9e89bf3":"code","517ad200":"code","17caa40d":"code","8aa9eabc":"code","cd93e887":"code","0fac095a":"code","07cbada1":"code","ce3846a7":"code","b9ba969b":"code","3f4a637c":"code","cb386169":"code","090b1157":"code","444b449f":"code","65de9d86":"markdown","8619b5f6":"markdown","223ca7b1":"markdown","9c39e8ac":"markdown","f331898e":"markdown","c70d9679":"markdown","bec3e86e":"markdown"},"source":{"7a455bc5":"import pandas as pd\ncsv_path = \"..\/input\/auto85\/auto.csv\"\n\ndf = pd.read_csv(csv_path, na_values = '?', header=None)\n\nheader = ['Symbolyng','Normalized-losses','Make','Fuel-Type','Aspiration','Num-of-doors','Body-style','Drive-wheels',\n         'Engine-location', 'Whell-base', 'Lenght', 'Width', 'Weight','Curb-weight','Engine-type','Num-of-cylinders',\n         'Engine-size','Fuel-system','Bore','Stroke','Compression-ratio','Horsepower','Peak-rpm','City-mpg','Highway-mpg',\n         'Price']\n\ndf.columns=header \n\npd.set_option('display.max_columns', None)\ndf.head()","0840b6fb":"is_null = df.isnull().sum().sort_values(ascending=False)\npercent = ((df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False))*100\n\nmissing_data = pd.concat([is_null, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data","509a83d4":"df['Normalized-losses']. fillna(df['Normalized-losses'].mean(), inplace=True)\ndf['Horsepower'].fillna(df['Horsepower'].mean(), inplace=True)","3c61428c":"df.dropna(subset=['Price'], axis=0, inplace=True)\ndf.dropna(subset=['Stroke'], axis=0, inplace=True)\ndf.dropna(subset=['Bore'], axis=0, inplace=True)\ndf.dropna(subset=['Peak-rpm'], axis=0, inplace=True)\ndf.dropna(subset=['Num-of-doors'], axis=0, inplace=True)","ccaf86ad":"is_null = df.isnull().sum().sort_values(ascending=False)\npercent = ((df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False))*100\n\nmissing_data = pd.concat([is_null, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data","b06c7cfe":"encode = pd.get_dummies(df[['Make','Fuel-Type','Aspiration','Num-of-doors','Body-style','Drive-wheels','Engine-location','Engine-type','Num-of-cylinders','Fuel-system']])","b44c2372":"df = pd.concat([df, encode], axis=1)","d963b4cd":"df.drop(['Make','Fuel-Type','Aspiration','Num-of-doors','Body-style','Drive-wheels','Engine-location','Engine-type','Num-of-cylinders','Fuel-system'], axis=1, inplace=True)","f9e89bf3":"df.head()","517ad200":"x = df.drop(['Price'],axis=1)\ny = df['Price']","17caa40d":"from sklearn.model_selection import train_test_split\nx_treino, x_teste, y_treino, y_teste = train_test_split(x, y, test_size=0.3)","8aa9eabc":"from sklearn.linear_model import LinearRegression\n\nlinear_model = LinearRegression()\nlinear_model.fit(x_treino,y_treino)\nresult =linear_model.score(x_teste,y_teste)\nprint(result)","cd93e887":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\nlinear_model = LinearRegression()\nkfold = KFold(n_splits=5,shuffle=True)\n\nresult= cross_val_score(linear_model,x,y,cv=kfold)\nprint(result.mean())","0fac095a":"from sklearn.linear_model import Ridge\n\nridge_model = Ridge()\nridge_model.fit(x_treino,y_treino)\nresult =ridge_model.score(x_teste,y_teste)\nprint(result)","07cbada1":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\nridge_model = Ridge()\nkfold = KFold(n_splits=5,shuffle=True)\n\nresult= cross_val_score(ridge_model,x,y,cv=kfold)\nprint(result.mean())","ce3846a7":"from sklearn.linear_model import Lasso\n\nlasso_model = Lasso(max_iter=5000)\nlasso_model.fit(x_treino,y_treino)\nresult =lasso_model.score(x_teste,y_teste)\nprint(result)","b9ba969b":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\nlasso_model = Lasso(max_iter=5000)\nkfold = KFold(n_splits=5,shuffle=True,)\n\nresult= cross_val_score(lasso_model,x,y,cv=kfold)\nprint(result.mean())","3f4a637c":"from sklearn.linear_model import ElasticNet\n\nelastic_model= ElasticNet(alpha=750, l1_ratio=0.9)\nelastic_model.fit(x_treino,y_treino)\nresult =elastic_model.score(x_teste,y_teste)\nprint(result)","cb386169":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\nelastic_model = ElasticNet(max_iter=5000)\nkfold = KFold(n_splits=5,shuffle=True,)\n\nresult= cross_val_score(elastic_model,x,y,cv=kfold)\nprint(result.mean())","090b1157":"from sklearn.tree import DecisionTreeRegressor\n\ndecision_tree_model = DecisionTreeRegressor()\ndecision_tree_model.fit(x_treino,y_treino)\nresult =decision_tree_model.score(x_teste,y_teste)\nprint(result)","444b449f":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\ndecision_tree_model = DecisionTreeRegressor()\nkfold = KFold(n_splits=5,shuffle=True,)\n\nresult= cross_val_score(decision_tree_model,x,y,cv=kfold)\nprint(result.mean())","65de9d86":"# Importing","8619b5f6":"# Linear regression","223ca7b1":"# Lasso regression","9c39e8ac":"# Data preprocessing","f331898e":"# ElasticNet","c70d9679":"# Decision tree","bec3e86e":"# Ridge regression"}}