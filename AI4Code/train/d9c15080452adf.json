{"cell_type":{"bb504e16":"code","5b03c873":"code","85dcea31":"code","8484594e":"code","844f0e18":"code","d1972757":"code","4a4eb0d0":"code","8e784c50":"code","f095c797":"code","23866756":"code","41ef8d4c":"code","33fa6a19":"code","d4aeec20":"code","97444e86":"code","42b379ed":"code","4d53c409":"code","7d4f159e":"code","ecc0125b":"code","35db389a":"code","b74deb2f":"code","02df15f6":"code","6d96dd93":"code","d502c3bb":"code","248a4c7d":"code","5b8e8585":"code","6dbf5f5d":"code","6d74244e":"code","76fcfe98":"code","dcd232a3":"code","4e0d45d0":"code","57025558":"code","35fdf580":"code","c2ee7090":"code","49cda161":"code","2e5bb6df":"code","246a72c3":"code","62e5ec5d":"code","0d5e60b0":"code","9568dde9":"code","4fd17b28":"code","373ab06e":"code","a1d8fd95":"code","9bfd37bc":"code","78f95a19":"code","b1d1d358":"code","256132f3":"code","1ee84927":"code","f58c0aee":"code","c82abdca":"markdown","6c3d02eb":"markdown","83f35c60":"markdown","d36bd40c":"markdown","6bdef420":"markdown","59a9918f":"markdown","045a3b44":"markdown","938af057":"markdown","51934da5":"markdown","0b12f57c":"markdown","87fe5fb7":"markdown","e557e474":"markdown","dc38bc27":"markdown","a4ffda57":"markdown","e0e8820b":"markdown","5ba67337":"markdown","eac0a106":"markdown","5bc4e956":"markdown","5fe3c7ad":"markdown","a834c800":"markdown","4e17a08c":"markdown","a9ce9012":"markdown","b5799f58":"markdown","d0886379":"markdown","4c1101b6":"markdown","d55296a4":"markdown","5812e6b9":"markdown","1b215c1a":"markdown","30587bc1":"markdown","c7a09703":"markdown","a654ba8b":"markdown","4f948a66":"markdown","a3ce3a44":"markdown","6a3fecc7":"markdown"},"source":{"bb504e16":"#import all the needed packages\nimport requests\nfrom bs4 import BeautifulSoup\nimport json\nimport time\nimport csv\nimport numpy as np\n\n# Import matplotlib\nimport matplotlib.pyplot as plt\n\n# Import plotly\nimport plotly.express as px \nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","5b03c873":"#The Scrap took about 4 hours due to need in delay\n# with open('hive_players.csv', mode='w') as hive_players:\n#     fieldnames = ['Place', 'Username', 'Points' , 'Victories', 'Games', 'Kills', 'Deaths', 'Beds', 'Teams Eliminated', 'Winstreak', 'Country']\n#     player = csv.DictWriter(hive_players, fieldnames=fieldnames)\n#     player.writeheader()\n#     for j in range (0, 5): #j itterates through api requests\n#         #we need to go through 5 api requests as max range of data that can be retrieved per 1 request is 200.\n        \n#         k = j*200 #this will be the start place of the player\n#         m = k+200 #end point in request\n#         URL = 'https:\/\/api.hivemc.com\/v1\/game\/BED\/leaderboard\/' \n#         URL = URL + str(k) + '\/' + str(m)\n\n#         page = requests.get(URL)\n\n#         soup = BeautifulSoup(page.text, 'html.parser')\n#         y = json.loads(soup.prettify())\n#         f = 0 \n#         for i in range(0, 200):\n#             #the id each api request is updated\n#             if f == 5:\n#                 #that's needed since there limited amount of requests at a time range is allowed on NameMC website\n#                 time.sleep(60)\n#                 f = 0\n#             URL2 = 'https:\/\/ru.namemc.com\/profile\/' + y[\"leaderboard\"][i][\"username\"] # \n\n#             page2 = requests.get(URL2)\n\n#             sup = BeautifulSoup(page2.text, 'html.parser')\n#             country = None\n#             #path to needed html element \n#             a1 = sup.find_all('div', class_ ='row')\n#             if len(a1)>=1 :\n#             #just to verify if we on right track\n#                 a2 = a1[1].find_all('div', class_='col-lg-8')\n#                 if len(a2)>=1 :\n#                     a3 = a2[0].find_all('div', class_='card mb-3')\n\n#                     if len(a3)>=3 :\n#                         a4 = a3[2].find_all('div', class_='card-body py-1')\n#                         if len(a4)>=1 :\n#                             a5 = a4[0].find_all('div', class_='row')\n#                             if len(a5)>=1 :\n#                                 for itter in range (0, len(a5)) : #itterating through this card to find right element\n#                                     if a5[itter].find('div', class_='col-md-4').text == \"\u0421\u0442\u0440\u0430\u043d\u0430\" : #choosing the right element\n#                                         country = a5[itter].find('div', class_='col-auto').text\n\n#             #writing data to csv file...\n#             player.writerow({'Place' : j*200 + i + 1, 'Username' : y[\"leaderboard\"][i][\"username\"], \n# 'Points' : y[\"leaderboard\"][i][\"total_points\"], 'Victories' : y[\"leaderboard\"][i][\"victories\"], \n# 'Games' : y[\"leaderboard\"][i][\"games_played\"], 'Kills' : y[\"leaderboard\"][i][\"kills\"], 'Deaths' : y[\"leaderboard\"][i][\"deaths\"], \n# 'Beds' : y[\"leaderboard\"][i][\"beds_destroyed\"], 'Teams Eliminated' : y[\"leaderboard\"][i][\"teams_eliminated\"], \n# 'Winstreak' : y[\"leaderboard\"][i][\"win_streak\"], 'Country' : country})","85dcea31":"#Now in the pandas form:\nimport pandas as pd\n\ntable = pd.read_csv('..\/input\/hive-players\/hive_players.csv')\ntable[:10]","8484594e":"#Missed values are given by \"None\" so we need to replace them\ntable.replace(\"None\", np.nan, inplace = True)\n\n# some columns with numeric values should be converted to int type\ntable = table.astype({\"Points\": \"int\", \"Victories\": \"int\", \"Games\": \"int\", \"Kills\": \"int\", \"Deaths\": \"int\", \"Beds\": \"int\", \"Teams Eliminated\": \"int\", \"Winstreak\": \"int\"})\ntable.head(5)\n","844f0e18":"table.tail(5)","d1972757":"#Number of points is pretty large, more than 500 thousands for each player\n#We need to convert this column, lets divide by thousand and round to 1 decimal place \n\npoints = table[\"Points\"] #save that for later\n\ntable[\"Points\"] = table[\"Points\"].div(1000).round(1)\ntable.head(5)","4a4eb0d0":"#Now we need to rename Points column so that it represents correct info\ntable.rename(columns = {'Points' : 'Points (in thousands)'}, inplace = True)\ntable.head(5)","8e784c50":"#Lets determine how many values are missing\ntable_validation = pd.DataFrame()\ntable_validation[\"Columns\"] = list(table.columns)\ntable_validation[\"Count\"] = list(table.count())\ntable_validation[:]","f095c797":"plt.figure(figsize=(18,6))\n\nnot_enough = [i if i < 1000 else 0 for i in table_validation[\"Count\"]]\nplt.bar(table_validation[\"Columns\"], table_validation[\"Count\"])\nplt.bar(table_validation[\"Columns\"], not_enough, color = 'gray')#color to indicate those columns where there is not enough data\nplt.xticks(rotation = 90, fontsize = 12)\nplt.show()","23866756":"plt.figure(figsize=(18,6))\n\n#creating plot for kills\nplt.subplot(121) \nplt.plot(table['Kills'])\nplt.xlabel('Place')\nplt.ylabel('Kill count')\nplt.title('Figure 4.1 Number of kills of the player', fontsize = 16)\n\n#creating plot for deaths\nplt.subplot(122)\nplt.plot(table['Deaths'])\nplt.xlabel('Place')\nplt.ylabel('Death count')\nplt.title('Figure 4.2 Number of deaths of the player', fontsize = 16)\nplt.show()","41ef8d4c":"kd_rt = pd.DataFrame() #separate dataframe to see the table\nkd_rt['Place'] = table['Place'] #we use place, username of the player\nkd_rt['Username'] = table['Username']\nkd_rt['Kills\/Deaths'] = table['Kills'].div(table['Deaths'])\nkd_rt.head(10)","33fa6a19":"kd_rt['Kills\/Deaths'].describe() #some descriptive statistics","d4aeec20":"kd_rt.sort_values(by=['Kills\/Deaths'], ascending = False) #sort to see the best and worst players","97444e86":"plt.figure(figsize=(12,6)) #creating a histogram \nplt.hist(kd_rt['Kills\/Deaths'], 100, density=1, facecolor='b', alpha=0.75)\nplt.xlabel('Kills\/Deaths')\nplt.ylabel('Probability')\nplt.title('Figure 4.3 Histogram of Kills\/Deaths ratio' , fontsize = 16)\nplt.text(11, .45, r'$\\mu=2.337,\\ \\sigma=1.484$', fontsize = 16)\nplt.grid(True)\nplt.show()","42b379ed":"\nprint('The value of skewness is: '+ str(kd_rt['Kills\/Deaths'].skew().round(3))) #to calculate value of skewness","4d53c409":"plt.figure(figsize=(18,6))\n\n#first plot\nplt.subplot(121)\nplt.plot(table['Victories'], color ='g')\nplt.xlabel('Place')\nplt.ylabel('Win count')\nplt.title('Figure 4.4 Number of wins of the player', fontsize = 16)\n\n#second plot\nlosses = table['Games'].sub(table['Victories'], axis = 0)\nplt.subplot(122)\nplt.plot(losses, color ='g')\nplt.xlabel('Place')\nplt.ylabel('Loss count')\nplt.title('Figure 4.5 Number of losses of the player', fontsize = 16)\nplt.show()","7d4f159e":"wl_rt = pd.DataFrame() #separate dataframe creation\nwl_rt['Place'] = table['Place']\nwl_rt['Username'] = table['Username']\nwl_rt['Wins\/Losses'] = table['Victories'].div(losses)\nwl_rt.head(10)","ecc0125b":"wl_rt['Wins\/Losses'].describe() #descriptive statistics ","35db389a":"wl_rt.sort_values(by=['Wins\/Losses'], ascending = False) #best and worst players...","b74deb2f":"plt.figure(figsize=(12,6)) #creating a histogram\nplt.hist(wl_rt['Wins\/Losses'], 100, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('Wins\/Losses')\nplt.ylabel('Probability')\nplt.title('Figure 4.6 Histogram of Wins\/Losses ratio' , fontsize = 16)\nplt.text(125, .25, r'$\\mu=3.139,\\ \\sigma=9.539$', fontsize = 16)\nplt.grid(True)\nplt.show()","02df15f6":"print('The value of skewness is: '+ str(wl_rt['Wins\/Losses'].skew().round(3)))","6d96dd93":"table = table[table['Username'] != 'TryMeHacker'] #excluding TryMeHacker from the table\nkd_rt = kd_rt[kd_rt['Username'] != 'TryMeHacker']\nwl_rt = wl_rt[wl_rt['Username'] != 'TryMeHacker']\ntable[295:297]","d502c3bb":"kd_wl = pd.concat([kd_rt, wl_rt['Wins\/Losses']], axis = 1, join='inner')\nkd_wl[:]","248a4c7d":"plt.figure(figsize=(8,8))\nx1 = kd_wl['Kills\/Deaths']\ny1 = kd_wl['Wins\/Losses']\nplt.scatter(x1, y1, label=f'Correlation coefficient = {np.round(np.corrcoef(x1,y1)[0,1], 3)}') #correlation coef for data\n\nplt.title('Figure 4.7 Correlation between Kills\/Deaths and Wins\/Losses')\nplt.xlabel('Kills\/Deaths')\nplt.ylabel('Wins\/Losses')\nplt.legend(prop={'size': 11})\nplt.show()","5b8e8585":"table.head(10)","6dbf5f5d":"#before we start it's better to divide the players by the rank groups\ntop25=table[0:24]\ntop100=table[25:99]\ntop250=table[100:249]\ntop1000=table[250:]","6d74244e":"fig = plt.figure(figsize=(18,15))\nfig.suptitle('Figure 4.8 Scatterplots, dependence on Ranking', fontsize=16)\nax1 = fig.add_subplot(421) #axes1\nax1.scatter(x=top25['Place'], \n            y=top25['Points (in thousands)'], \n           color = 'g')\nax1.scatter(x=top100['Place'], \n            y=top100['Points (in thousands)'], \n           color = 'y')\nax1.scatter(x=top250['Place'], \n            y=top250['Points (in thousands)'], \n           color = 'b')\nax1.scatter(x=top1000['Place'], \n            y=top1000['Points (in thousands)'], \n           color = 'r')\nax1.set_ylabel('Points (in thousands)', fontsize=15)\nax1.set_xlabel('Place', fontsize=15)\n\nax2 = fig.add_subplot(422) #axes2\nax2.scatter(x=top25['Place'], \n            y=top25['Beds'], \n           color = 'g')\nax2.scatter(x=top100['Place'], \n            y=top100['Beds'], \n           color = 'y')\nax2.scatter(x=top250['Place'], \n            y=top250['Beds'], \n           color = 'b')\nax2.scatter(x=top1000['Place'], \n            y=top1000['Beds'], \n           color = 'r')\nax2.set_ylabel('Beds', fontsize=15)\nax2.set_xlabel('Place', fontsize=15)\n\nax3 = fig.add_subplot(423) #axes3\nax3.scatter(x=top25['Place'], \n            y=top25['Teams Eliminated'], \n           color = 'g')\nax3.scatter(x=top100['Place'], \n            y=top100['Teams Eliminated'], \n           color = 'y')\nax3.scatter(x=top250['Place'], \n            y=top250['Teams Eliminated'], \n           color = 'b')\nax3.scatter(x=top1000['Place'], \n            y=top1000['Teams Eliminated'], \n           color = 'r')\nax3.set_ylabel('Teams Eliminated', fontsize=15)\nax3.set_xlabel('Place', fontsize=15)\n\nax4 = fig.add_subplot(424) #axes4\nax4.scatter(x=top25['Place'], \n            y=top25['Winstreak'], \n           color = 'g')\nax4.scatter(x=top100['Place'], \n            y=top100['Winstreak'], \n           color = 'y')\nax4.scatter(x=top250['Place'], \n            y=top250['Winstreak'], \n           color = 'b')\nax4.scatter(x=top1000['Place'], \n            y=top1000['Winstreak'], \n           color = 'r')\nax4.set_ylabel('Winstreak', fontsize=15)\nax4.set_xlabel('Place', fontsize=15)\nfig.legend(['1-25 rank', '26-100 rank', '101-250 rank', '251-1000 rank'],  prop={'size': 15})\nplt.show()","76fcfe98":"table.sort_values(by = ['Winstreak'], ascending = False).head(10) #just sorted","dcd232a3":"table.loc[table['Winstreak']>0].sort_values(by = ['Winstreak'], ascending = False) #use this to determine how many players have winstreak","4e0d45d0":"table['Winstreak'].describe() #descriptive statistics of winstreak of all players","57025558":"table.loc[table['Winstreak']>0]['Winstreak'].describe() #descriptive statistics of winstreak of players that have a winstreak","35fdf580":"#create a dataframe for scaled values\nlg_ws = pd.DataFrame()\nlg_ws['Place'] = table.loc[table['Winstreak']>0]['Place']\nlg_ws['Username'] = table.loc[table['Winstreak']>0]['Username']\nlg_ws['Log winstreak'] = np.log2(table.loc[table['Winstreak']>0]['Winstreak']).round(3) #scaling by log2\nlg_ws.sort_values(by = ['Log winstreak'], ascending = False)[:]","c2ee7090":"plt.figure(figsize=(12,6)) #creating a histogram\nplt.hist(lg_ws['Log winstreak'], 20, density=1, facecolor='g', alpha=0.75)\nplt.xlabel('$log_2(Winstreak)$')\nplt.ylabel('Probability')\nplt.title('Figure 4.9 Histogram of winstreak (Log scaled)' , fontsize = 16)\nplt.grid(True)\nplt.show()","49cda161":"lg_ws['KDR'] = kd_wl['Kills\/Deaths'] #use kd_wl data frame we used while analyzing KDR and WLR to add columns to lg_ws\nlg_ws['WLR'] = kd_wl['Wins\/Losses']\nlg_ws.dropna(axis=0) #to get rid of null values\n\n#create rank groups for colors\nlg_ws.loc[lg_ws['Place'] <= 25, 'Rank group'] = '1-25'\nlg_ws.loc[lg_ws['Place'] > 25, 'Rank group'] = '26-100'\nlg_ws.loc[lg_ws['Place'] > 100, 'Rank group'] = '101-250'\nlg_ws.loc[lg_ws['Place'] > 250, 'Rank group'] = '251-1000'","2e5bb6df":"fig = px.scatter(lg_ws, y=\"Log winstreak\", x=\"Place\", color=\"Rank group\",\n                 hover_data=['Username'], title = 'Figure 4.10 Log Winstreak\/Place')\nfig.show()","246a72c3":"fig = px.scatter(lg_ws, y=\"Log winstreak\", x=\"KDR\", color=\"Rank group\",\n                 hover_data=['Username'], title = 'Figure 4.11 Log Winstreak\/KDR')\nfig.show()","62e5ec5d":"fig = px.scatter(lg_ws, y=\"Log winstreak\", x=\"WLR\", color=\"Rank group\",\n                 hover_data=['Username'], title = 'Figure 4.12 Log Winstreak\/WLR')\nfig.show()","0d5e60b0":"#call the column Pnt_game\n#refer back to points dict we saved for this moment\ntable['Pnt_game'] = points.div(table['Games']).round(2) #divide points by amount of games\ntable[['Place', 'Username', 'Pnt_game']].head(10)","9568dde9":"#now, lets sort the values\ntable[['Place', 'Username', 'Pnt_game']].sort_values(by = ['Pnt_game'], ascending = False)","4fd17b28":"#create rank groups for colors\ntable.loc[table['Place'] <= 25, 'Rank group'] = '1-25'\ntable.loc[table['Place'] > 25, 'Rank group'] = '26-100'\ntable.loc[table['Place'] > 100, 'Rank group'] = '101-250'\ntable.loc[table['Place'] > 250, 'Rank group'] = '251-1000'\n\n#create boxplot\npx.box(table, x = 'Pnt_game', hover_data=['Username', 'Place'],\n       title = 'Figure 4.13 Box Plot for average points per game')","373ab06e":"#create a boxplots grouped by rank\npx.box(table, x = 'Pnt_game', hover_data=['Username', 'Place'], color = 'Rank group',\n       title = 'Figure 4.14 Box Plot for average points per game, grouped by rank')","a1d8fd95":"#using rank() function we will add new column\ntable['Rank pt\/g'] = table['Pnt_game'].rank(ascending = False)\ntable[['Username', 'Place', 'Rank pt\/g']][:]","9bfd37bc":"#creating a scatter plot to observe a correlation between two rankings\nfig = px.scatter(table, y=\"Rank pt\/g\", x=\"Place\", color=\"Rank group\",\n                 hover_data=['Username'], title = 'Figure 4.15 Scatter plot of two rankings')\nfig.show()","78f95a19":"#print correlation coefficient between two rankings\nprint('Correlation coefficient = ' + str(np.round(np.corrcoef(table['Rank pt\/g'],table['Place'])[0,1], 3))) ","b1d1d358":"cntry = pd.DataFrame()\n\n#group by to retrieve number of players in each country, count by usernames\ncntry = table[['Country', 'Username']].groupby(['Country']).count()\n\n#move index to column\ncntry.reset_index(inplace=True)\n\n#rename to fit the purpose\ncntry = cntry.rename(columns={'Username':'Count'})\n#sort by count of players\ncntry = cntry.sort_values(by = ['Count'], ascending = False)\ncntry[:]","256132f3":"#summing all of the points of players for each country\ncntry2 = table[['Country', 'Points (in thousands)']].groupby(['Country']).sum()\ncntry2 = cntry2.sort_values(by = ['Points (in thousands)'], ascending = False)\ncntry2.reset_index(inplace=True)\n#merging with previous table\ncntry = pd.merge(cntry, cntry2, on = 'Country')\ncntry[:]","1ee84927":"#for the analysis we will use average points per single player of a country\ncntry['Points per player (in thousands)'] = cntry['Points (in thousands)'].div(cntry['Count']).round(3)\n\n#also, rank them by points per player\ncntry['Rank'] = cntry['Points per player (in thousands)'].rank(ascending = False)\ncntry = cntry.sort_values(by = ['Rank'])\ncntry[:]","f58c0aee":"#creating a ge scatter plot that shows number of players by size of dots, avg points per player by color\nfig = px.scatter_geo(cntry, locations=\"Country\", locationmode = 'country names', color=\"Points per player (in thousands)\",\n                     hover_name=\"Country\", size = 'Count', size_max = 50,\n                     projection=\"natural earth\", hover_data = ['Rank', 'Points (in thousands)'],\n                    color_continuous_scale=px.colors.sequential.Bluered, \n                    title = 'Figure 4.16 Scatter world map of countries and the points per player')\n\nfig.show()","c82abdca":"## Content\n+ Introduction: HiveMC and Bedwars\n+ Data description and objectives\n+ Data acquisiton, manipulation and validation\n+ Data analysis and visualization\n+ Conclusion","6c3d02eb":"From the **Figure 4.9** we can see that winstreak is positively skewed. The player that has the biggest winstreak goes by the username \"Hwamzx\".","83f35c60":"### 4.5 Q5: Analyze geographical tendencies among players' origin countries\nLets begin from creating dataframe for showing the countries and number of the top 1000 players in those countries.","d36bd40c":"From the **Figure 4.12** we can see that the likelyhood of getting high winstreak also is bigger if a player has good WLR, but not as much as KDR.\n\n**Distribution analysis**\n\nMost of the players, even if they're considered being in top 1000, doesn't have a high winstreak, however, some of the players managed to get extremely high winstreak. Clearly data is positively skewed.\n\nThe scatter plots show that there might be some dependance between WLR, KDR and winstreak, but not with the Place of the player.","6bdef420":"It's clear that the win\/loss ratio has a positive skewness. We also can see something irregular, the player 'TryMeHacker' has a negative WLR which should be impossible. That's due to the in game bug (which is already fixed) that the player used to get impossible amount of wins. We should exclude this player from further analysis.\n\nThe biggest WLR has the player named tastydish. BbyTiger comes with the lowest WLR.","59a9918f":"From the **Figure 4.11** we can see that the likelyhood of getting high winstreak is bigger if a player has good KDR.","045a3b44":"The **Figure 4.7** shows that there is low positive linear correlation between KDR and WLR.\n\n**Distribution analysis**\n\nThis shows that the player have a general tendency on getting higher WLR than a KDR. Also, WLR shows huge amount of outliers, players with extreme values of WLR, much higher than the mean. This has a huge effect on the variance of the data.\n\nGenerally kills, deaths and wins are showing the logarithmic tendency with respect to the ranking of the player by points while the losses not. This might be due to lost games not playing a big role towards getting in game points.","938af057":"# Analysis of top 1000 HiveMC Bedwars players","51934da5":"**Figure 4.16** presents us interactive information about how players distributed around the world, clearly, most of the player base is located in the Europe and Northern America, but there is also some players from Australia and Russia.\n\nFrom the table we can see that Czech Republic is on the lead by average points per player. On the second and third places settled Israel and Bangladesh being on the very thin score margin (both at 2700 thousands per player).\n\nAverage points per player ranking is dominated by the countries with lower amount of players, as the score is less distributed.","0b12f57c":"Because the winstreak has a huge standart deviation and a lot of extremely big values, we will provide a histogram with values that are logarithmically scaled by a factor of 2 for the players with a winstreak.","87fe5fb7":"**Figure 4.13** shows us two outliers, lower outlier 'BbyTiger' and upper outlier 'tastydish'.\n\nWe can see that the average points per game for all players is almost symmetrically skewed.\n\n50% of the players are getting on average less than 230 points per game.","e557e474":"So we can clearly see from the **Figure 4.3** and the value of skewness that Kills\/Deaths ratio is positively skewed. The best player for the KDR is LOWIQQ and the worst is _XaviWxlf.","dc38bc27":"## 4. Data Visualization","a4ffda57":"While the rank groups have a tendency to get greater points as better the group, for the players individually, there is very low correlation ( r=0.313 ) between the place by points and the rank we proposed.\n\nYet, the greater the average points per game the player has, the faster this player will be getting to high ranks. Ranking the players for their points per game could be a good indicator for future tendencies in the rankings.","e0e8820b":"From the **Figure 4.10** we can see that there is not much dependance between the place of the player and the winstreak the player gets","5ba67337":"So we can see that 479 players have a winstreak greater than 0.","eac0a106":"## 1. Introduction: HiveMC and Bedwars\nThe HiveMC is an official Minecraft Java Edition Server. Minecraft is a sandbox video game developed by Mojang Studios. The game was created by Markus \"Notch\" Persson in the Java programming language and released as a public alpha for personal computers in 2009 before officially releasing in November 2011, with Jens Bergensten taking over development. Currently, Minecraft Java Edition surpasses 30 million lifetime sales.\n\nHiveMC or The Hive is a Minigames server owned by Hive Games Limited. It was first registered in 2018. Focuses on providing players with different fun games such as SkyWars, Bedwars, Hide and Seek and DeathRun. Over 12 million unique minecraft accounts visited the server at least once.\n\nBedwars is strategy and player vs. player based minigame where you must protect your bed whilst trying to eliminate your opponents on islands in the sky. You can continue to respawn while your bed is safe. If your bed is destroyed, you can no longer respawn and you are eliminated once you die. Before being first released on multiplayer servers it was a custom game map, developed at 2012, to play with a company of friends. At the time was called as \"Rush\" and was developed by the man named Xisuma. Became very popular once was released on GommeHD, German minigames server, and name was changed to \"Bedwars\".\n\nAs of 2020, the Bedwars is one of the most popular gamemodes among Minecraft minigames. Average unique player count per day for this gamemode is over 10000 players. I also play bedwars and by this date I'm on 492 place among all 3.6 millions The Hive Bedwars players.\n\nThis Project will analyze best 1000 Bedwars players of The Hive.\n\nSources:\n\n+ https:\/\/en.wikipedia.org\/wiki\/Minecraft\n+ https:\/\/hivemc.com\/bedwars","5bc4e956":"### 4.1 Q1: Analyze kill\/death ratio (KDR), win\/loss ratio (WLR) of top 1000 players\nBefore we begin analyzing the ratios, lets look at the plots of kills and deaths individually","5fe3c7ad":"As we can see from the **Figure 4.8**, Points, beds and teams eliminated clearly show the pattern close to logarithmic curve with points being the most close to the shape. Everywhere except the winstreak we can see the positive relationship between the rank of the player and the place. We will observe the tendencies in winstreak further in the analysis.","a834c800":"### 4.4 Q4: Propose new ranking model based on average points per game\nRanking players by the average points could be a good practice, as this shows how efficient each player in the game.\n\nBefore we begin, lets make a separate column for average points per game.","4e17a08c":"For the following analyze we will look at the tendencies between the place (rank) of the player and points, beds, teams eliminated and winstreak. We will noot look at the kills, deaths, victories as we already discussed them in the previous part. We also will not look at the games for now, as it will be observed in another part.","a9ce9012":"Next part of the code will not run since it takes to much time and rewrites the existing file. You can run it yourself if you would like to do that. Code also included in the GitHub repo. Changing the proxy each 5 scraps from NameMC could also help to boost the process without loosing the data.","b5799f58":"### 4.2 Q2: Analyze relationship between variables and place of the player in the data set","d0886379":"Now lets get a kill\/death ratio (KDR) table to further analyze","4c1101b6":"So we have data about players from 68 different countries that we know off. United States has the most players from top 1000 among the World.","d55296a4":"So the only missing values are the countries of some players, which is, due to some players not being registered to NameMC or not sharing their information about the country. Those entries with no data about country takes the dominant proportion. Further in geological analysis we will not use them.","5812e6b9":"**Figure 4.14** displays some interesting results. While rank groups '1-25' and '251-1000' are both close to be symmetrically skewed, in contrast, rank group '26-100' has a positive skewness and rank group '101-250' has a negative skewness.\n\nThe only outliers belong to the rank group '251-1000' (tastydish and YDMYK), and they are the best 2 players by average amount of points per game, which could imply that those two accounts belong to experienced players who own several game accounts.\n\nAs expected, on average, the better the rank group, the greater amount of points players from that rank group are getting per game. We can see that from the box plot as each successive box plot's box is further to the right than the previous one.\n\nNow lets rank the players by the average point per game.","1b215c1a":"## 3. Data acquisiton, manipulation and validation","30587bc1":"### 3.2. Data manipulation: cleaning and shaping\nAt this step we need to reshape our data a bit and assign appropriate column names.\n\n+ We will replace missing values by NaN\n+ Change type of some columns from string to int\n+ Convert some values\n+ Determine how many values are missing","c7a09703":"### 3.1. Data acquisiton: Use of HiveMC API and scrap from NameMC website\nWe are going to use Beatifulsoup package to get the data from HiveMC API and NameMC. In order to get our data we need to do 5 API requests and scrap from 1000 pages. The algorithm works as following: first we get data of first 200 players in the top from HiveAPI in form of JSON string and then transformed to object form. Using the Username data we then procceed to first 200 pages of NameMC to scrap the data about the country of the player. Once obtained all of the data will be written to CSV file for further use. Repeat the proccess for the rest 4 API requests. Webscrap took about 4 hours.\n\nSource of webscrap: (https:\/\/ru.namemc.com\/)","a654ba8b":"## 2. Data description and objectives\nThe data consits of the players statistics - namely, the indicators of player's progress in the game. In this analysis we are interested in comparing those statistics among different players. Besides that, further in the project we will make comparison between countries from which players originated. We took a sample of top 1000 players because those players spent a lot of time on getting there. This also helps to avoid duplicate considering in the analysis many accounts of the same player, which obviously, will get the statistics too biased.\n\nOur analysis will be based on data of 01.10.2020 obtained from HiveMC API(https:\/\/api.hivemc.com\/). We will aditionally scrap the information about the country of the player. Below is the main attributes of data that will be obtained, scraped and used for our analysis:\n\n+ Place - rank of the player based on game points\n+ Points - number of game points* player got\n+ Games played - number of games that a player participated in\n+ Victories - number of wins player has\n+ Kills - total amount of other player kills subject got\n+ Deaths - total number of times player died in game\n+ Beds - number of beds player by himself destroyed\n+ Team eliminated - number of other teams eliminated\n+ Winstreak - number of current wins in a row\n+ Country - origin country of the player\n+ For this project, data analysis and visualization contains 5 parts:\n\n1. Analyze kill\/death ratio (KDR), win\/loss ratio (WLR) of top 1000 players\n2. Analyze relationship between variables and place of the player in the data set\n3. Analyze the winstreak, relationship between winstreak and KDR, WLR\n4. Propose new ranking model based on average points per game\n5. Analyze geographical tendencies among players' origin countries\n\n*- Points can be obtained by killing players(5 points), breaking beds (50-80 points), upgrading resource generators (5-15 points)","4f948a66":"## 5. Conclusion\nBased on the analysis given above we could conclude several things about tendencies among top 1000 Hive Bedwars players.\n\n+ Players tend to get greater Win\/Loss ratio than Kill\/Death ratio. Also, there is very low correlation between two ratios.\n+ There is positive relationship between the place(rank) of the player and the number of points he gets, amount of beds and teams the player has eliminated.\n+ Winstreak the player gets doesn't depend on the place the player holds, but it could be affected by KDR and WLR.\n+ Ranking the players by average points per game could be useful in instances when we are trying to predict future standings of the players by points. This is supported by the fact that there is correlation between rank groups and distribution of average points per game of a players of that rank group.\n+ Most of the players come from Northern America and Europe, still, there is a lot of extremely good players in countries with quite low number of players.","a3ce3a44":"Now let's do the same for the wins and losses. Wins\/Losses Ratio = WLR","6a3fecc7":"### 4.3 Q3: Analyze the winstreak, relationship between winstreak and KDR, WLR\nNot all of the players in top 1000 have a winstreak, so for this part we will need to look at those players who have a winstreak of at least 1."}}