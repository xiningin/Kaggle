{"cell_type":{"9bcafa68":"code","431455ba":"code","9cfba729":"code","5457db04":"markdown"},"source":{"9bcafa68":"from cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import x25519\nimport base64\n\ndef generate_tor_v3_keys():\n    \"Generates public, private keypair\"\n    # Source: https:\/\/kushaldas.in\/posts\/python-function-to-generate-tor-v3-onion-service-authentication-keys.html\n    private_key = x25519.X25519PrivateKey.generate()\n    private_bytes = private_key.private_bytes(\n        encoding=serialization.Encoding.Raw\t,\n        format=serialization.PrivateFormat.Raw,\n        encryption_algorithm=serialization.NoEncryption())\n    public_key = private_key.public_key()\n    public_bytes = public_key.public_bytes(\n        encoding=serialization.Encoding.Raw,\n        format=serialization.PublicFormat.Raw)\n    public = base64.b32encode(public_bytes).replace(b'=', b'') \\\n                       .decode(\"utf-8\")\n    private = base64.b32encode(private_bytes).replace(b'=', b'') \\\n                        .decode(\"utf-8\")\n    return public, private\n\ndef install_tor():\n    \"Installs current tor version from deb.torproject.org\"\n    # Ubuntu bionic comes with tor version 0.3.2 which doesn't seem to support\n    # the much more user-friedly hidden service v3 client authentication. \n    # Using v2 authentication would require editing tor configuration files on\n    # the client side. Therefore this Notebook is installing a newer tor version\n    # directly from deb.torproject.org\n    # To verify key fingerprint correctness see \n    # https:\/\/2019.www.torproject.org\/docs\/signing-keys.html.en\n    !gpg --keyserver keyserver.ubuntu.com --recv-keys 0xEE8CBC9E886DDD89\n    !gpg --export 0xEE8CBC9E886DDD89 | apt-key add -\n    !echo \"deb http:\/\/deb.torproject.org\/torproject.org\/ bionic main\" >> \/etc\/apt\/sources.list.d\/tor.list\n    !apt-get update > \/dev\/null\n    !apt-get --assume-yes install tor\n    \ndef configure_tor_hidden_service(client_auth_public_key):\n    \"Creates configuration for hidden service exposing TensorBoard\"\n    !mkdir \/var\/lib\/tor\/hidden_service\/\n    !mkdir \/var\/lib\/tor\/hidden_service\/authorized_clients\/\n    !chown debian-tor:debian-tor \/var\/lib\/tor\/hidden_service\/ \/var\/lib\/tor\/hidden_service\/authorized_clients\/\n    !chmod 0700 \/var\/lib\/tor\/hidden_service\/ \/var\/lib\/tor\/hidden_service\/authorized_clients\/\n    !echo \"HiddenServiceDir \/var\/lib\/tor\/hidden_service\/\" >> \/etc\/tor\/torrc\n    !echo \"HiddenServiceVersion 3\" >> \/etc\/tor\/torrc\n    !echo \"HiddenServicePort 80 127.0.0.1:6006\" >> \/etc\/tor\/torrc\n    with open(\"\/var\/lib\/tor\/hidden_service\/authorized_clients\/user.auth\", \"w\") as auth_file:\n        auth_file.write(\"descriptor:x25519:\"+public_key)\n    !chown debian-tor:debian-tor \/var\/lib\/tor\/hidden_service\/authorized_clients\/user.auth\n    # Apply tor configuration\n    !\/etc\/init.d\/tor restart\n    # Get .onion address\n    with open('\/var\/lib\/tor\/hidden_service\/hostname', 'r') as hostname_file:\n        hostname = hostname_file.read().splitlines()[0]\n    return hostname\n\n######################################################################\n\nimport sys\nfrom IPython.utils import io\n\n# Setup tor\ninstall_tor();\n# Create a keypair that you will use to authenticate the client\n(public_key, private_key) = generate_tor_v3_keys();\nhostname = configure_tor_hidden_service(public_key);\n\n# Load the extension and start TensorBoard\n# Using capture to silence non-working tensorboard output\nwith io.capture_output() as captured:\n    %load_ext tensorboard\n    %tensorboard --logdir logs --bind_all\n    \nfrom IPython.display import clear_output\nclear_output(wait=True)\n\nprint(\"Open TorBrowser to access your TensorBoard.\\n\"\n      +\"URL:         http:\/\/\"+hostname+\"\\n\"\n      +\"private key: \"+private_key)","431455ba":"# Create your model\n# Source: https:\/\/www.kaggle.com\/aagundez\/using-tensorboard-in-kaggle-kernels\n\nimport tensorflow as tf\nmnist = tf.keras.datasets.mnist\n\n((x_train, y_train), (x_test, y_test)) = mnist.load_data()\n(x_train, x_test) = (x_train \/ 255.0, x_test \/ 255.0)\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(512, activation=tf.nn.relu),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n])\n\nmodel.compile(\n  optimizer='adam',\n  loss='sparse_categorical_crossentropy',\n  metrics=['accuracy'],\n)","9cfba729":"# Configure the TensorBoard callback and fit your model\n# Source: https:\/\/www.kaggle.com\/aagundez\/using-tensorboard-in-kaggle-kernels\n\ntensorboard_callback = tf.keras.callbacks.TensorBoard(\"logs\")\n\nmodel.fit(\n  x_train,\n  y_train,\n  epochs=5,\n  callbacks=[tensorboard_callback],\n)","5457db04":"# Exposing TensorBoard through Tor\n\nOfficial TensorBoard support \"has temporarily been disabled\": https:\/\/www.kaggle.com\/product-feedback\/89671#764494\n\nThe Board itself still launches using a current Docker image, but doesn't seem to be accessible from the outside. This can be worked around by connecting out to a reverse-proxy that forwards the service to clients.\n\nThis notebook exposes the TensorBoard as a Tor hidden service with client authentication, that can be accessed using the TorBrowser.\n\nIf you don't like Tor, you might prefer [Shivam Kumar](https:\/\/www.kaggle.com\/shivam1600)'s notebook [Tensorboard on Kaggle](https:\/\/www.kaggle.com\/shivam1600\/tensorboard-on-kaggle) that implements tunneling out using ngrok."}}