{"cell_type":{"15edb0c1":"code","8bcdcd9b":"code","e3c6d23b":"code","9e148c2b":"code","f27b147a":"code","27dee116":"code","ec90dc72":"code","d5ae31e1":"code","48e5f553":"code","63b9685c":"code","b36cc254":"code","30a1ab75":"code","9b68a5df":"code","b009dd63":"code","f874af2f":"code","b29a616c":"code","7f4af454":"code","e5a61b08":"code","99988aa3":"code","f9064336":"code","5cbf9982":"code","156c45c4":"code","ed848cd1":"code","f4eba0a1":"code","40535af3":"code","614e0d2b":"code","d4a09e74":"code","7b5eaf5e":"code","27283908":"code","114d7068":"code","a3dcdb00":"code","410796b3":"code","0b076b02":"code","019b2301":"code","0527305e":"code","9b85e4d0":"code","d9663c1c":"code","bb98d7d0":"code","1f5c81d6":"code","8d293d34":"code","1c681bf1":"code","67ba0af4":"code","7de006b7":"code","c5ae7236":"code","f39da4f3":"code","892db00a":"code","6860ad49":"code","936adc70":"code","fb70c9bd":"code","9080aad1":"code","7039dac9":"code","f8722db2":"code","d20e3233":"code","0129e87c":"code","9101a968":"code","5391e805":"code","05f928de":"code","7ac8b44a":"code","22220776":"code","4280cdb3":"code","4d227737":"code","0df20f69":"code","465b20af":"code","573eef5e":"code","00e433f8":"code","ef510383":"code","61980344":"code","9554df6b":"code","0e5c3364":"code","450b729b":"code","d3c9c139":"code","d09ac4af":"code","18bb8e9b":"code","31263dd3":"code","dddef185":"code","e5ff75c4":"code","13075e16":"code","2c917e60":"code","7675c8ff":"code","413a50ab":"code","5c57b43f":"code","7859a426":"code","2440038a":"code","226a8a0b":"code","a7e93d92":"code","6e8f50b6":"code","e964639c":"code","cd3a7df6":"code","736273aa":"code","c5c2a389":"code","4cf251ea":"code","4cc5cd0a":"code","2ec66364":"code","07b46689":"code","9b3b8d19":"code","346fda9f":"code","a46a2bad":"code","641bfea1":"code","bd0b30d3":"code","4cda2358":"code","36b62c25":"code","1a804536":"code","b5fa5a3b":"code","1be5a66b":"code","47905e08":"code","816a5add":"code","3a2e0c74":"code","9502d337":"code","5676ae28":"code","c9383516":"code","69b119e5":"code","c0d3d168":"code","21181c7c":"code","2e494b58":"code","967ee920":"code","039b100d":"code","ab4a49dd":"code","a7e3bc46":"code","5e829c9e":"code","4491091d":"code","460cb722":"code","6fa111cb":"code","72f16919":"code","43f23c3d":"code","46a508ba":"code","8717bed6":"code","8a74f8a4":"code","b5934310":"code","4bcdff0b":"code","637d0d4c":"code","b8d60095":"code","3c154b58":"code","3b2704ca":"code","79461d4f":"code","ff8f551b":"code","6493da2c":"code","8d1966a9":"code","210322d6":"code","9800d305":"code","ff130c65":"code","76c050a3":"code","297db0ba":"code","ce36ebaf":"code","bd9ab184":"code","1cd19f92":"code","4cf8d38e":"code","88d8f638":"code","456ccdf1":"code","5b27a05c":"code","469695ca":"code","fc140d2c":"code","48906d63":"code","7cc5f36f":"code","79c4a870":"code","dca098ad":"code","7e86e251":"code","379dae40":"code","00aa1968":"code","034e6aaa":"code","a856c405":"code","1150b370":"code","521385ec":"code","0d9a6d4e":"code","1689205b":"code","f9432663":"code","a008a2a3":"code","8155778f":"code","62875bc6":"code","7bc9a5d5":"code","3f0deac8":"code","693682e5":"code","5506059b":"code","d7dc586c":"code","d4ed16d1":"code","ab624574":"code","eebb4518":"code","c231b3ee":"code","9f8d145e":"code","2b974032":"code","6ddaa8d0":"code","b33c5bdc":"code","bb0acb24":"code","4943bae2":"code","2a6da467":"code","f493c8aa":"code","3a7eafb5":"code","dffde4d0":"code","5b7011f7":"code","474dccb1":"code","5062d178":"code","dbf4054b":"code","bd15b856":"code","1561c1b6":"code","2ea29531":"code","0fedd42e":"code","87292f80":"code","f98df8ae":"code","47e765b2":"code","98a040d8":"code","b32bb204":"code","92aea1b8":"code","a3a6be83":"code","5e4bf7f8":"code","375a9510":"code","3d8d06a3":"code","57298046":"code","0378a06e":"code","ac3c0d95":"code","5cf9159f":"code","7c17d05a":"markdown","dd78c7c0":"markdown","f40bb8d3":"markdown","dea71203":"markdown","0bc6b49e":"markdown","e0c63ad9":"markdown","3c5e85d1":"markdown","b9ce5eb5":"markdown","47a0c405":"markdown","ef3ec2c4":"markdown","c30e546d":"markdown","8aed1710":"markdown","ea88a4ab":"markdown","64de7568":"markdown","5fb92d76":"markdown","d35bb143":"markdown","a4cd0332":"markdown","bb519430":"markdown","ba7d1330":"markdown","ac50db2f":"markdown","049a1f10":"markdown","c249b209":"markdown","a42328ff":"markdown","6da4f407":"markdown","63f1d879":"markdown","a47c09bc":"markdown","ce11fd17":"markdown"},"source":{"15edb0c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nsns.set(color_codes=True)\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8bcdcd9b":"auto = pd.read_csv('\/kaggle\/input\/automobile-dataset\/Automobile_data.csv')","e3c6d23b":"auto.head()","9e148c2b":"col1 = np.linspace(0, 10, 1000)\ncol2 = np.sin(col1)\ndf = pd.DataFrame({\"C1\" : col1 , \"C2\" :col2})\ndf.head(10)","f27b147a":"# Plotting lineplot using sns.lineplot()\nplt.style.use('seaborn-darkgrid')\n%matplotlib inline\nsns.lineplot(x=df.C1,y=df.C2,data=df)\nplt.show()","27dee116":"\"\"\" - Adjusting background color using axes.facecolor\n- Changing label size using xtick.labelsize , ytick.labelsize \"\"\"\nplt.figure(figsize=(14,6))\nsns.set(rc={'axes.facecolor':'cornflowerblue',\"axes.grid\":True,'xtick.labelsize':14,'ytick.labelsize':14})\nsns.lineplot(x=df.C1,y=df.C2,data=df , linewidth = 2.5)\nsns.lineplot(x=df.C1,y=df.C2+1,data=df , linewidth = 2.5)\nplt.show()","ec90dc72":"\"\"\" - Adjusting background color using axes.facecolor\n- Changing label size using xtick.labelsize , ytick.labelsize \"\"\"\nplt.figure(figsize=(14,6))\nsns.set(rc={\"axes.facecolor\":\"#283747\", \"axes.grid\":False,'xtick.labelsize':14,'ytick.labelsize':14})\nsns.lineplot(x=df.C1,y=df.C2,data=df , color = \"#FF5722\" , linewidth = 2 )\nsns.lineplot(x=df.C1,y=np.cos(df.C1),data=df , color = \"#FFEB3B\" , linewidth = 2)\nplt.show()","d5ae31e1":"#Recover default matplotlib settings \nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline","48e5f553":"plt.figure(figsize=(10,8))\nsns.lineplot(x=\"wheel-base\",y=\"engine-size\",data=auto)\nplt.show()","63b9685c":"plt.figure(figsize=(10,8))\nsns.lineplot(x=\"wheel-base\",y=\"engine-size\",data=auto,linewidth = 5)\nplt.title(\"Wheel-Base Vs Engine-Size\")\nplt.show()","b36cc254":"plt.figure(figsize=(20,6))\nsns.lineplot(data=auto['wheel-base'],linewidth = 1.5 , label = 'wheel base')\nsns.lineplot(data=auto['engine-size'],linewidth = 1.5 , label = 'engine size')\nplt.show()","30a1ab75":"plt.figure(figsize=(16,6))\nsns.set(rc={\"axes.facecolor\":\"#283747\", \"axes.grid\":False,'xtick.labelsize':10,'ytick.labelsize':10})\nplt.title(\"Engine Size\",fontsize = 14)\nplt.xticks(rotation=45) # Rotating X tickts by 45 degrees\nsns.lineplot(x = auto[\"engine-size\"], y =auto[\"wheel-base\"].index.values  , color = '#ff9900')\nplt.show()","9b68a5df":"# Show groups with different colors using \"hue\"\nplt.figure(figsize=(14,7))\nplt.style.use('seaborn-darkgrid')\n# Group variable using \"hue\" that will produce lines with different colors\nsns.lineplot(x=\"wheel-base\" , y=\"engine-size\" , hue=\"fuel-type\" , data=auto)\nplt.show()","b009dd63":"# Using markers to identify groups\nplt.figure(figsize=(14,7))\nplt.style.use('seaborn-darkgrid')\nsns.lineplot(x=\"wheel-base\" , y=\"engine-size\" , hue = \"fuel-type\" ,style=\"fuel-type\" , markers=True ,data=auto)\nplt.show()","f874af2f":"plt.figure(figsize=(14,7))\nplt.style.use('seaborn-darkgrid')\nsns.lineplot(x=\"num-of-cylinders\" , y=\"engine-size\" , hue = \"fuel-type\" , err_style=\"bars\",data=auto)\nplt.show()","b29a616c":"plt.figure(figsize=(14,7))\nsns.lineplot(x = \"num-of-cylinders\", y = \"engine-size\",data=auto,hue=\"fuel-type\")\nsns.set(style='dark',)\nplt.show()","7f4af454":"plt.figure(figsize=(14,7))\nsns.set(rc={'xtick.labelsize':17,'ytick.labelsize':10,'axes.labelsize':15 , \"axes.grid\":False})\n# Use \"Pallete\" to specify the colors to be used for different levels of the hue\nsns.lineplot(x=\"wheel-base\" , y=\"engine-size\" , hue = \"fuel-type\" ,style=\"fuel-type\" , dashes = False,palette = 'CMRmap',markers=[\"o\", \">\"] ,data=auto)\nplt.show()","e5a61b08":"# Color and line dashing to represent 2 different grouping variables using \"hue\" & \"style\"\nplt.figure(figsize=(16,16))\nplt.style.use('seaborn-darkgrid')\nplt.gcf().text(.2, .70, \"Line Plot\", fontsize = 40, color='Black' ,ha='center', va='center')\nsns.lineplot(x=\"wheel-base\" , y=\"engine-size\" , hue = \"num-of-cylinders\" ,style=\"fuel-type\" ,data=auto)","99988aa3":"#Showing all experiments instead of Aggregate using \"units\" and \"estimator\"\nplt.figure(figsize=(14,7))\nplt.style.use('seaborn-darkgrid')\nsns.lineplot(x=\"wheel-base\" , y=\"engine-size\" , hue = \"num-of-cylinders\" ,style=\"fuel-type\", units='num-of-cylinders',markers=True,dashes=False ,estimator=None,lw=1 ,data=auto)\nplt.legend(bbox_to_anchor=(1.0, 1.0) , shadow=True, fontsize='large')\nplt.show()","f9064336":"# Combining lineplots using relplot\n\nplt.figure(figsize=(10,10))\nsns.set(rc={'xtick.labelsize':17,'ytick.labelsize':17,'axes.labelsize':20 , \"axes.grid\":False})\nsns.relplot(x=\"wheel-base\" , y=\"engine-size\" , hue=\"num-of-cylinders\" , col=\"fuel-type\",kind='line', height=8.5,data=auto)\nplt.show()","5cbf9982":"plt.figure(figsize=(10,10))\nsns.scatterplot(x='engine-size',y='wheel-base',data=auto)\nplt.show()","156c45c4":"#Changing the color of data points using \"color\" parameter\n\nplt.figure(figsize=(10,10))\nsns.scatterplot(x='engine-size',y='wheel-base',data=auto,color='#FF0000')\nplt.show()","ed848cd1":"#Changing the shape of data points using \"marker\" parameter\nplt.figure(figsize=(10,10))\nsns.scatterplot(x='engine-size',y='wheel-base',data=auto,color='#FF0000',marker='>')\nplt.show()\n","f4eba0a1":"# Show groups with different colors using \"hue\"\n\nplt.figure(figsize=(10,10))\nsns.scatterplot(x='engine-size',y='wheel-base',hue='fuel-type',data=auto)\nplt.show()","40535af3":"#Setting X limit using \"plt.xlim\"\nplt.figure(figsize=(10,10))\nplt.xlim([50,200])\nsns.scatterplot(x='engine-size',y='wheel-base',hue='fuel-type',data=auto)\nplt.show()","614e0d2b":"# Showing two different grouping variables using \"hue\" amd \"style\" parameter\n\nplt.figure(figsize=(10,10))\nplt.gcf().text(.5, .9, \"Scatter Plot\", fontsize = 40, color='Black' ,ha='center', va='center')\nsns.scatterplot(x='engine-size',y='wheel-base',hue='fuel-type',style='num-of-cylinders',data=auto)\nplt.show()","d4a09e74":"plt.figure(figsize=(10,10))\nsns.scatterplot(x='engine-size',y='wheel-base',hue='fuel-type',size='city-mpg',sizes=(20,200),data=auto)\nplt.show()","7b5eaf5e":"# Using the jointplot \nsns.jointplot(auto['engine-size'],auto['wheel-base'])","27283908":"# Drawing scatter plot using relplot\nplt.figure(figsize=(14,16))\nsns.relplot(x=\"wheel-base\" , y=\"engine-size\" , hue=\"fuel-type\" ,kind='scatter', height=8.5,aspect =1,data=auto)\nplt.show()","114d7068":"# Drawing scatter plot using relplot\nplt.figure(figsize=(14,16))\nsns.relplot(x=\"wheel-base\" , y=\"engine-size\" , hue=\"num-of-cylinders\" ,kind='scatter', height=8.5,aspect =1,data=auto)\nplt.show()","a3dcdb00":"# Use \"Pallete\" to specify the colors to be used for different levels of the hue\n\nplt.figure(figsize=(14,16))\nsns.set(rc={'xtick.labelsize':12,'ytick.labelsize':12,'axes.labelsize':12})\nsns.relplot(x=\"wheel-base\" , y=\"engine-size\" , hue=\"fuel-type\" ,kind='scatter',palette=[\"#FF3333\" ,\"#00CC00\"], height=8.5,aspect =1,data=auto)\nplt.show()\n","410796b3":"plt.figure(figsize=(14,16))\nsns.relplot(x=\"wheel-base\" , y=\"engine-size\" , hue=\"num-of-cylinders\" ,kind='scatter', height=8.5,aspect =1,data=auto)\nplt.gcf().text(.5, .99, \"Rel Plot\", fontsize = 40, color='Black' ,ha='center', va='center')\nplt.show()","0b076b02":"# Facet along the columns to show a categorical variable using \"col\" parameter\n\nplt.figure(figsize=(14,20))\nsns.set(rc={'xtick.labelsize':20,'ytick.labelsize':20,'axes.labelsize':20})\nsns.relplot(x=\"wheel-base\" , y=\"engine-size\" , hue=\"fuel-type\" ,kind='line',col=\"num-of-cylinders\", height=8.5,aspect =1,data=auto)\nplt.show()","019b2301":"# Facet along the columns and rows to show a categorical variable using \"col\" and \"row\" par\nsns.set(rc={'xtick.labelsize':12,'ytick.labelsize':12,'axes.labelsize':12})\nsns.relplot(x=\"wheel-base\", y=\"engine-size\", hue=\"fuel-type\",col=\"fuel-type\", row=\"body-style\", data=auto)\nplt.show()","0527305e":"# Limiting the number of columns using \"col_wrap\"\n\nsns.set(rc={'xtick.labelsize':12,'ytick.labelsize':12,'axes.labelsize':12})\nsns.relplot(x=\"wheel-base\", y=\"engine-size\", hue=\"fuel-type\",col=\"body-style\",col_wrap=3, data=auto)\nplt.show()","9b85e4d0":"plt.figure(figsize=(10,7))\nsns.barplot(auto['body-style'], auto['city-mpg'])\nplt.show()","d9663c1c":"#Sorted Bar Plot\n\nplt.figure(figsize=(10,7))\norder = auto.groupby(['body-style']).mean().sort_values('city-mpg' , ascending = False).index\nsns.barplot(auto['body-style'], auto['city-mpg'],order=order)\nplt.show()","bb98d7d0":"# Horizontal Bar plot\nplt.figure(figsize=(7,10))\nsns.barplot(auto['city-mpg'], auto['body-style'])\nplt.show()","1f5c81d6":"plt.figure(figsize=(10,7))\nsns.countplot(auto['body-style'])\nplt.show()","8d293d34":"plt.figure(figsize=(10,7))\nsns.countplot(auto['body-style'], order=auto['body-style'].value_counts().index)\nplt.show()","1c681bf1":"#Changing the background of bar plot\nplt.figure(figsize=(10,7))\nsns.set(rc={\"axes.facecolor\":\"#283747\", \"axes.grid\":False,'xtick.labelsize':14,'ytick.labelsize':14})\nsns.countplot(auto['body-style'], order=auto['body-style'].value_counts().index)\nplt.show()","67ba0af4":"mpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline","7de006b7":"# Adding hue \nplt.figure(figsize=(10,7))\nsns.barplot(auto['body-style'], auto['city-mpg'], hue=auto['fuel-type'])\nplt.show()","c5ae7236":"# Use Count Plot to visualize data\nplt.figure(figsize=(10,10))\nsns.catplot(y ='body-style', kind = \"count\",data = auto)\nplt.show()","f39da4f3":"# Use sorted  Count Plot to visualize data\nplt.figure(figsize=(7,10))\nsns.catplot(y ='body-style', kind = \"count\",data = auto,order=auto['body-style'].value_counts().index)\nplt.show()","892db00a":"# Use Voilin Plot to visualize data\nplt.figure(figsize=(12,10))\nsns.catplot(x=\"body-style\" , y = \"city-mpg\" ,kind=\"violin\" ,data=auto)\nplt.show()","6860ad49":"plt.figure(figsize=(11,9))\nsns.catplot(x = \"city-mpg\" , y=\"body-style\" ,kind=\"violin\" ,data=auto ,height=5, aspect=2)\nplt.show()","936adc70":"# Facet along the columns to show a categorical variable using \"col\" parameter\nplt.figure(figsize=(10,10))\nsns.catplot(x='body-style' , y='city-mpg' , data=auto , col=\"fuel-type\")\nplt.show()","fb70c9bd":"\"\"\" Facet along the columns to show a categorical variable using \"col\" parameter and\nLimiting the number of columns using \"col_wrap\" \"\"\"\nplt.figure(figsize=(20,10))\nsns.catplot(\"fuel-type\", col=\"body-style\",col_wrap=2,data=auto,kind=\"count\",height=5, aspect=1)\nplt.show()","9080aad1":"plt.figure(figsize=(10,10))\nsns.distplot(auto['engine-size'])\nplt.show()","7039dac9":"plt.figure(figsize=(10,10))\nsns.distplot(auto['city-mpg'], kde=False, rug=True)\nplt.show()","f8722db2":"# Histogram with rugplot and kde \nplt.figure(figsize=(10,10))\nsns.distplot(auto['city-mpg'], kde=True, rug=True,hist=False)\nplt.show()","d20e3233":"auto.hist(bins=40 , figsize=(20,20)) #Pandas Hist function\nplt.show()","0129e87c":"plt.figure(figsize=(11,7))\nsns.distplot(auto['city-mpg'], bins=20)\nplt.show()","9101a968":"plt.figure(figsize=(11,7))\nsns.distplot(auto['city-mpg'], bins=20 ,hist_kws=dict(edgecolor = '#FF0000'))\nplt.show()","5391e805":"sns.set_style(\"darkgrid\")\nfig1 , axes = plt.subplots(nrows=2,ncols=2 , figsize = (14,14))\nx = np.random.normal(1,10,1000)\n#Simple KDE Plot\naxes[0,0].set_title(\"Simple KDE Plot\")\nsns.kdeplot(x,ax=axes[0,0])\n# Shade under the density curve using the \"shade\" parameter\naxes[0,1].set_title(\"KDE Plot (Shaded Area Under the Curve)\")\nsns.kdeplot(x,shade=True,ax=axes[0,1])\n# Shade under the density curve using the \"shade\" parameter and use a different color.\naxes[1,0].set_title(\"KDE Plot (Different Color)\")\nsns.kdeplot(x,ax=axes[1,0],color = 'r',shade=True,cut=0)\n#Plotting the density on the vertical axis\naxes[1,1].set_title(\"KDE Plot (Density on Vertical Axis)\")\nsns.kdeplot(x,vertical=True)\nplt.show()","05f928de":"plt.figure(figsize=(6,8))\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nsns.kdeplot(x,y,shade=True,cmap=\"Reds\", shade_lowest=False)","7ac8b44a":"plt.figure(figsize=(10,8))\nsns.kdeplot(auto[\"city-mpg\"],auto[\"engine-size\"],shade=True,cmap=\"Reds\", shade_lowest=False)\nplt.show()","22220776":"plt.figure(figsize=(10,8))\nsns.kdeplot(auto[\"engine-size\"],auto[\"wheel-base\"],cmap=\"Reds\", shade=True, shade_lowest=False)\nplt.show()","4280cdb3":"#Simple Swarm plot\nplt.figure(figsize=(10,10))\nsns.swarmplot(auto['fuel-type'], auto['city-mpg'])\nplt.show()","4d227737":"# Draw horizontal swarm plot\nplt.figure(figsize=(10,10))\nsns.swarmplot(auto['city-mpg'], auto['fuel-type'])\nplt.show()","0df20f69":"# Defining the size of the plots\nplt.figure(figsize=(7,7))\nsns.swarmplot(auto['fuel-type'], auto['city-mpg'], size=10)\nplt.show()","465b20af":"# Displaying multiple swarmplots using subplot function.\nfig1 , axes = plt.subplots(nrows=2,ncols=2 , figsize = (20,20))\nsns.swarmplot(auto['fuel-type'], auto['city-mpg'], ax = axes[0,0], size=8)\nsns.swarmplot(auto['fuel-type'] , auto['wheel-base'] ,ax = axes[0,1], size=8)\nsns.swarmplot(auto['fuel-type'] ,auto['length'] , ax = axes[1,0] , size=8)\nsns.swarmplot(auto['fuel-type'] , auto['width'] , ax = axes[1,1] , size=8)\nplt.show()","573eef5e":"#Changing edge color , size and linewidth of data points\nplt.figure(figsize=(7,7))\nsns.swarmplot(x= \"fuel-type\", y = \"wheel-base\", size = 9 , linewidth= 2 , edgecolor=\"black\" , data =auto)\nplt.show()","00e433f8":"# Show groups with different colors using \"hue\"\nplt.figure(figsize=(7,7))\nsns.swarmplot(x= \"engine-location\", y = \"engine-size\", hue=\"fuel-type\", size = 8 , data = auto)","ef510383":"# Facet along the columns to show a categorical variable using \"col\" parameter\nsns.set(rc={'xtick.labelsize':10,'ytick.labelsize':10,'axes.labelsize':14})\nsns.set_style(\"white\")\nsns.catplot(x=\"fuel-type\" , y = \"engine-size\" , col= \"body-style\" , data=auto, kind=\"swarm\" , height=5,aspect=0.5)\nplt.show()","61980344":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline\nsns.set_style(\"white\")","9554df6b":"# Simple Violin Plot\nplt.figure(figsize=(7,7))\nsns.violinplot(auto['fuel-type'], auto['city-mpg'])\nplt.show()","0e5c3364":"# Drawing the quartiles as horizontal lines instead of a mini-box using (inner=\"quartile\")\nplt.figure(figsize=(7,7))\nsns.violinplot(x=\"fuel-type\" , y = \"city-mpg\" ,data=auto , inner=\"quartile\")\nplt.show()","450b729b":"# Remove interior section of the Violin plot\nplt.figure(figsize=(7,7))\nsns.violinplot(x=\"body-style\" , y = \"city-mpg\" ,data=auto , inner=None)\nplt.show()","d3c9c139":"# horizontal violin plot\nplt.figure(figsize=(9,7))\nsns.violinplot(y=\"body-style\" , x = \"city-mpg\" ,data=auto , inner=None)\nplt.show()","d09ac4af":"# Muted palette\nplt.figure(figsize=(16,7))\nsns.violinplot(x=auto[\"body-style\"] , y = auto[\"city-mpg\"] , palette=\"muted\")\nplt.show()","18bb8e9b":"#Scale the density relative to the counts across all bins\nplt.figure(figsize=(16,7))\nsns.violinplot(x=auto[\"body-style\"] , y = auto[\"city-mpg\"] , palette=\"Set1\" , scale=\"count\")\nplt.show()","31263dd3":"# Adjust the bandwidth of the KDE filtering parameter using \"bw\"\nplt.figure(figsize=(16,7))\nsns.violinplot(x=auto[\"body-style\"] , y = auto[\"city-mpg\"] , palette=\"Set1\" , scale=\"count\",bw='silverman')\nplt.show()","dddef185":"# Limit the violin range within the range of the observed data using \"cut =0\"\nplt.figure(figsize=(16,7))\nsns.violinplot(x=auto[\"body-style\"] , y = auto[\"city-mpg\"] , palette=\"Set1\" , scale=\"count\", cut =2)\nplt.show()","e5ff75c4":"#Show groups with different colors using \"hue\" and \"palette\"\nplt.figure(figsize=(16,7))\nsns.violinplot(x=auto[\"body-style\"] , y = auto[\"city-mpg\"] , palette=\"Set1\", hue= auto[\"fuel-type\"])\nplt.show()","13075e16":"# Overlap the violinplots for different hue levels along the categorical axis using \"dodge=\nplt.figure(figsize=(16,7))\nsns.violinplot(x=auto[\"body-style\"] , y = auto[\"city-mpg\"] , palette=\"Set1\", hue= auto[\"fuel-type\"],dodge=True)\nplt.show()","2c917e60":"plt.figure(figsize=(16,7))\nsns.violinplot(x=auto[\"body-style\"] , y = auto[\"city-mpg\"] , palette=\"Set1\", hue= auto[\"fuel-type\"],split=True)\nplt.show()","7675c8ff":"plt.figure(figsize=(16,7))\nsns.violinplot(x=auto[\"body-style\"] , y = auto[\"city-mpg\"] , palette=\"Set1\", hue= auto[\"fuel-type\"],split=True ,inner=\"quartile\")\nplt.show()","413a50ab":"plt.figure(figsize=(16,7))\nsns.violinplot(x=auto[\"body-style\"] , y = auto[\"city-mpg\"] , palette=\"Set1\", hue= auto[\"fuel-type\"],split=True ,inner=\"stick\")\nplt.show()","5c57b43f":"# Displaying multiple violin plots using subplot function.\nfig1 , axes = plt.subplots(nrows=2,ncols=2 , figsize = (20,20))\nsns.violinplot(x=\"body-style\" , y = \"city-mpg\" , ax = axes[0,0] ,data=auto , inner=None)\nsns.violinplot(x=\"body-style\" , y = \"wheel-base\" ,ax = axes[0,1] , data=auto , inner=None)\nsns.violinplot(x=\"body-style\" , y = \"length\" , ax = axes[1,0] , data=auto, inner=None)\nsns.violinplot(x=\"body-style\" , y = \"width\" , ax = axes[1,1] , data=auto, inner=None )\nplt.show()","7859a426":"iris = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\niris.head()","2440038a":"# Displaying swarmplot on top of violin plot\nfig1 , axes = plt.subplots(nrows=2,ncols=2 , figsize = (20,20))\nsns.swarmplot(x=\"Species\" , y = \"PetalWidthCm\" , ax = axes[0,0] ,data=iris , size=6 , color=\"#FFFFFF\")\nsns.violinplot(x=\"Species\" , y = \"PetalWidthCm\" , ax = axes[0,0] ,data=iris , inner=None)\nsns.swarmplot(x=\"Species\" , y = \"PetalLengthCm\" ,ax = axes[0,1] , data=iris , size=6 , color=\"#FFFFFF\")\nsns.violinplot(x=\"Species\" , y = \"PetalLengthCm\" ,ax = axes[0,1] , data=iris , inner=None)\nsns.swarmplot(x=\"Species\" , y = \"SepalWidthCm\" , ax = axes[1,0] , data=iris , size=6 , color=\"#FFFFFF\")\nsns.violinplot(x=\"Species\" , y = \"SepalWidthCm\" , ax = axes[1,0] , data=iris, inner=None)\nsns.swarmplot(x=\"Species\" , y = \"SepalLengthCm\" , ax = axes[1,1] , data=iris , size=6 , color=\"#FFFFFF\")\nsns.violinplot(x=\"Species\" , y = \"SepalLengthCm\" , ax = axes[1,1] , data=iris, inner=None )\nplt.show()","226a8a0b":"# Facet along the columns to show a categorical variable using \"col\" parameter\nplt.figure(figsize=(11,9))\nsns.catplot(x=\"body-style\" , y = \"engine-size\", col=\"fuel-type\", kind=\"violin\",palette=\"Set2\" , height=  7,scale = \"count\",data=auto)\nplt.show()","a7e93d92":"plt.figure(figsize=(11,8))\nsns.stripplot(auto['city-mpg'])\nplt.show()","6e8f50b6":"plt.figure(figsize=(11,8))\nsns.stripplot(auto['fuel-type'], auto['city-mpg'])\nplt.show()","e964639c":"plt.figure(figsize=(16,8))\nsns.stripplot(x=auto[\"body-style\"] ,palette=\"Set1\", y = auto[\"engine-size\"])\nplt.show()","cd3a7df6":"\"\"\" \"Jitter\" parameter signifies the amount of jitter to apply.\nThis can be extremely useful when we have large clusters of data points\"\"\"\n\nplt.figure(figsize=(11,8))\nsns.stripplot(x=auto[\"body-style\"] ,palette=\"Set1\", y = auto[\"engine-size\"],jitter=.3)\nplt.show()","736273aa":"# Flip x and y inputs to make a horizontal strip plot\nplt.figure(figsize=(11,8))\nsns.stripplot(y=auto[\"body-style\"] ,palette=\"Set1\", x = auto[\"engine-size\"] , jitter=True)\nplt.show()","c5c2a389":"# Adjust the linewidth of the edges of the circles using \"linewidth\" parameter\n# Adjust the size of the circles using the \"size\" parameter\nplt.figure(figsize=(14,10))\nsns.stripplot(x=auto[\"body-style\"] ,palette=\"Set1\", y = auto[\"engine-size\"],linewidth=2,size=8)\nplt.show()","4cf251ea":"# Using set2 pallette\nplt.figure(figsize=(14,10))\nsns.stripplot(x=auto[\"body-style\"] ,palette=\"Set2\", y = auto[\"engine-size\"],hue=auto[\"fuel-type\"],linewidth=2,size=8)\nplt.show()","4cc5cd0a":"# # Separate the strips for different hue levels along the categorical axis using \"dodge=True\"\nplt.figure(figsize=(14,10))\nsns.stripplot(x=auto[\"body-style\"] ,palette=\"Set2\", y = auto[\"engine-size\"],hue=auto[\"fuel-type\"],linewidth=2,size=8,dodge=True)\nplt.show()","2ec66364":"plt.figure(figsize=(16,10))\nsns.stripplot(x=auto[\"body-style\"] ,palette=\"Set2\", y = auto[\"engine-size\"],hue=auto[\"fuel-type\"],marker = \"o\",size=30,alpha = .15)\nplt.show()","07b46689":"# Drawing stripplot on top of a box plot\n\nplt.figure(figsize=(11,8))\nsns.stripplot(x=auto[\"body-style\"] ,palette=\"Set1\", y = auto[\"engine-size\"],hue=auto[\"fuel-type\"],jitter=True, color=\"black\",linewidth=2,size=8)\nsns.boxplot(x=auto[\"body-style\"] ,palette=\"Set1\", y = auto[\"engine-size\"] , color='black')\nplt.show()","9b3b8d19":"plt.figure(figsize=(10,9))\nsns.set(rc={\"axes.facecolor\":\"#b0deff\",\"axes.grid\":False,\n'xtick.labelsize':15,'ytick.labelsize':15,\n'axes.labelsize':20,'figure.figsize':(20.0, 9.0)})\nparams = dict(data=auto ,x = auto[\"body-style\"] ,y = auto[\"engine-size\"] ,hue=auto[\"fuel-type\"],dodge=True)\nsns.stripplot(**params , size=9,jitter=0.35,palette=['#FF8F00','#558B2F'],edgecolor='black')\nsns.boxplot(**params ,palette=['#909497','#D0D3D4'],linewidth=4)\nplt.show()","346fda9f":"plt.figure(figsize=(16,11))\nsns.set(rc={\"axes.facecolor\":\"#b0deff\",\"axes.grid\":False,\n'xtick.labelsize':15,'ytick.labelsize':15,\n'axes.labelsize':20,'figure.figsize':(20.0, 9.0)})\nparams = dict(data=auto ,x = auto[\"body-style\"] ,y = auto[\"engine-size\"] ,hue=auto[\"fuel-type\"],dodge=True)\nsns.stripplot(**params , size=8,jitter=0.35,palette=['#33FF66','#FF6600'],edgecolor='black')\nsns.boxplot(**params ,palette=['#BDBDBD','#E0E0E0'],linewidth=6)\nplt.show()\n","a46a2bad":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline\nsns.set_style(\"white\")","641bfea1":"# Drawing stripplot on top of a violin plot\nplt.figure(figsize=(14,10))\nsns.stripplot(x=auto[\"body-style\"] ,palette=\"Set1\", y = auto[\"engine-size\"],hue=auto[\"fuel-type\"],jitter=True, color=\"black\",linewidth=2,size=8)\nsns.violinplot(x=auto[\"body-style\"] ,palette=\"Set1\", y = auto[\"engine-size\"],hue=auto[\"fuel-type\"],scale=\"count\")\nplt.show()","bd0b30d3":"# Facet along the columns to show a categorical variable using \"col\" parameter\nplt.figure(figsize=(11,9))\nsns.catplot(x=\"body-style\" , y = \"engine-size\", col=\"fuel-type\", kind=\"strip\",palette=\"Set1\" , height=10,data=auto)\nplt.show()","4cda2358":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline\nsns.set_style(\"white\")","36b62c25":"# Simple boxplot\nplt.figure(figsize=(8,6))\nsns.boxplot(auto[\"engine-size\"])","1a804536":"# Vertical boxplot\nsns.set_style(\"darkgrid\")\nplt.figure(figsize=(8,6))\nsns.boxplot(auto['num-of-doors'], auto['city-mpg'])","b5fa5a3b":"#Explicit ordering using \"order\" parameter\nsns.set_style(\"darkgrid\")\nplt.figure(figsize=(8,6))\nsns.boxplot(auto['num-of-doors'], auto['city-mpg'],order = ['four' , 'two','?'])","1be5a66b":"#Plotting subplots\nplt.subplots(figsize = (14,24))\nplt.subplot(3,1,1)\nsns.boxplot(x= auto['body-style'] , y= auto['engine-size'] ,hue= auto[\"fuel-type\"])\nplt.subplot(3,1,2)\nsns.boxplot(x=auto['body-style'], y=auto[\"wheel-base\"], hue=auto[\"fuel-type\"])\nplt.subplot(3,1,3)\nsns.boxplot(x=auto['body-style'],y=auto[\"width\"] , hue=auto[\"fuel-type\"])\nplt.show()\n\n\n","47905e08":"plt.figure(figsize = (14,6))\nsns.boxplot(x= auto['body-style'] , y= auto['engine-size'] ,hue= auto[\"fuel-type\"],width=.7,palette= {\"gas\":'#FFB74D' , \"diesel\":'#9CCC65'})\nplt.show()","816a5add":"plt.figure(figsize = (14,6))\nsns.boxplot(x= auto['body-style'] , y= auto['engine-size'] ,hue= auto[\"fuel-type\"],width=.7,palette= {\"gas\":'#FFB74D' , \"diesel\":'#9CCC65'})\nsns.despine()\n# More about sns.despine() here - https:\/\/seaborn.pydata.org\/tutorial\/aesthetics.html\nplt.show()","3a2e0c74":"plt.figure(figsize = (14,6))\nsns.boxplot(x= auto['body-style'] , y= auto['engine-size'] ,hue= auto[\"fuel-type\"],width=.7,palette= {\"gas\":'#FFB74D' , \"diesel\":'#9CCC65'})\nsns.despine(left=True)\n# More about sns.despine() here - https:\/\/seaborn.pydata.org\/tutorial\/aesthetics.html\nplt.show()","9502d337":"plt.figure(figsize = (14,6))\nsns.boxplot(x= auto['body-style'] , y= auto['engine-size'] ,hue= auto[\"fuel-type\"],width=.7,palette= {\"gas\":'#FFB74D' , \"diesel\":'#9CCC65'},linewidth = 3)\nsns.despine(left=True)\n# More about sns.despine() here - https:\/\/seaborn.pydata.org\/tutorial\/aesthetics.html\nplt.show()","5676ae28":"# Add a notch to the box\n\nplt.figure(figsize = (14,6))\nsns.boxplot(x= auto['body-style'] , y= auto['engine-size'] ,hue= auto[\"fuel-type\"],width=.7,palette= {\"gas\":'#FFB74D' , \"diesel\":'#9CCC65'},linewidth = 3,notch=True)\nsns.despine(left=True)\n# More about sns.despine() here - https:\/\/seaborn.pydata.org\/tutorial\/aesthetics.html\nplt.show()","c9383516":"# Change the size of outlier markers using fliersize\nplt.figure(figsize = (14,6))\nsns.set(rc={\"axes.facecolor\":\"#b0deff\",\"axes.grid\":False,\n'xtick.labelsize':15,'ytick.labelsize':15,\n'axes.labelsize':20,'figure.figsize':(20.0, 9.0)})\nsns.boxplot(x= auto['body-style'] , y= auto['engine-size'] ,hue= auto[\"fuel-type\"],width=.7,palette= {\"gas\":'#FFB74D' , \"diesel\":'#9CCC65'},linewidth = 3,fliersize=8)\nsns.despine(left=True)\n# More about sns.despine() here - https:\/\/seaborn.pydata.org\/tutorial\/aesthetics.html\nplt.show()\n","69b119e5":"mpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline","c0d3d168":"plt.figure(figsize=(16,11))\nsns.set(rc={\"axes.facecolor\":\"#b0deff\",\"axes.grid\":False,\n'xtick.labelsize':15,'ytick.labelsize':15,\n'axes.labelsize':20,'figure.figsize':(20.0, 9.0)})\nparams = dict(data=auto ,x = auto[\"body-style\"] ,y = auto[\"engine-size\"] ,hue=auto[\"fuel-type\"],dodge=True)\nsns.stripplot(**params , size=8,jitter=0.35,palette=['#33FF66','#FF6600'],edgecolor='black')\nsns.boxplot(**params ,palette=['#BDBDBD','#E0E0E0'],linewidth=6)\nplt.show()\n","21181c7c":"mpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline\nsns.set_style(\"darkgrid\")","2e494b58":"fig1 , axes = plt.subplots(nrows=2,ncols=2 , figsize = (20,24))\nsns.swarmplot(x=\"Species\" , y = \"PetalWidthCm\" , ax = axes[0,0] ,data=iris, size=8 ,color=\"black\")\nsns.boxplot(x=\"Species\" , y = \"PetalWidthCm\" , ax = axes[0,0] ,data=iris )\nsns.swarmplot(x=\"Species\" , y = \"PetalLengthCm\" ,ax = axes[0,1] , data=iris , size=8,color=\"black\")\nsns.boxplot(x=\"Species\" , y = \"PetalLengthCm\" ,ax = axes[0,1] , data=iris )\nsns.swarmplot(x=\"Species\" , y = \"SepalWidthCm\" , ax = axes[1,0] , data=iris , size=8,color=\"black\")\nsns.boxplot(x=\"Species\" , y = \"SepalWidthCm\" , ax = axes[1,0] , data=iris )\nsns.swarmplot(x=\"Species\" , y = \"SepalLengthCm\" , ax = axes[1,1] , data=iris, size=8,color=\"black\")\nsns.boxplot(x=\"Species\" , y = \"SepalLengthCm\" , ax = axes[1,1] , data=iris )\nplt.show()","967ee920":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline\nsns.set_style(\"darkgrid\")","039b100d":"# Simple Boxen Plot\nplt.figure(figsize=(8,7))\nsns.boxenplot(y=auto[\"engine-size\"])\nplt.show()","ab4a49dd":"plt.figure(figsize=(7,9))\nsns.boxenplot(x=auto[\"fuel-type\"] , y = auto[\"engine-size\"] ,palette=\"Set1\")\nplt.show()","a7e3bc46":"# Drawing a vertical boxenplot grouped by a categorical variable\nplt.figure(figsize=(10,9))\nsns.boxenplot(x=auto[\"body-style\"] , y = auto[\"engine-size\"] ,palette=\"Set1\")\nplt.show()","5e829c9e":"# Using spring palette\nplt.figure(figsize=(11,9))\nsns.boxenplot(x=auto[\"body-style\"] , y = auto[\"engine-size\"],palette=\"spring\")\nplt.show()","4491091d":"sns.set(rc={\"axes.facecolor\":\"#616161\" , \"axes.grid\" : False})\nplt.figure(figsize=(11,9))\nsns.boxenplot(x=auto[\"body-style\"] , y = auto[\"engine-size\"],palette=\"Set1\")\nplt.show()","460cb722":"sns.set(rc={\"axes.facecolor\":\"#a1c45a\" , \"axes.grid\" : False})\nplt.figure(figsize=(11,9))\nplt.gcf().text(.51, .84, \"Box Plot\", fontsize = 40, color='Black' ,ha='center', va='center')\nsns.boxenplot(x=auto[\"body-style\"] , y = auto[\"engine-size\"],palette=\"Set1\")\nplt.show()","6fa111cb":"# Horizontal Boxen plot\nsns.set_style(\"darkgrid\")\nplt.figure(figsize=(10,9))\nsns.boxenplot(x = auto[\"engine-size\"] ,y= auto[\"body-style\"] ,palette=\"Set1\")\nplt.show()","72f16919":"# Show groups with different colors using \"hue\" (Nested grouping by two categorical variabl\nplt.figure(figsize=(11,9))\nsns.boxenplot(x=auto[\"body-style\"] , y = auto[\"engine-size\"], hue=auto[\"fuel-type\"], palette={\"diesel\":'#FFB74D' , \"gas\":'#9CCC65'})\nplt.show()","43f23c3d":"# Facet along the columns to show a categorical variable using \"col\" parameter\nplt.figure(figsize=(11,9))\nsns.catplot(x=\"body-style\" , y = \"engine-size\", col=\"fuel-type\", kind=\"boxen\",palette=\"Set2\" , height=7,data=auto)\nplt.show()","46a508ba":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline","8717bed6":"# Draw scatterplots for joint relationships and histograms for univariate distributions\nplt.figure(figsize=(11,9))\nsns.pairplot(auto,hue = 'fuel-type')\nplt.show()","8a74f8a4":"# Changing palettes\nsns.pairplot(auto,hue = 'fuel-type',palette=\"husl\",size=2)\nplt.show()","b5934310":"# Plot a subset of variables\nsns.pairplot(auto,hue = 'fuel-type',vars=[\"wheel-base\", \"length\" , \"height\" , \"width\"] )\nplt.show()","4bcdff0b":"# Use different markers for each level of the hue variable\nsns.pairplot(auto,hue = 'fuel-type',vars=[\"wheel-base\", \"length\" , \"height\" , \"width\"] ,markers= ['o' , 'D' ] , height=3, aspect=1)\nplt.show()","637d0d4c":"# Defining the y_vars also \n\n# Use different markers for each level of the hue variable\nsns.pairplot(auto,hue = 'fuel-type',x_vars=[\"wheel-base\", \"length\"] , y_vars=[\"height\" , \"width\"],markers= ['o' , 'D' ] , height=3, aspect=1)\nplt.show()","b8d60095":"# Fit linear regression models to the scatter plots\nsns.pairplot(auto,hue = 'fuel-type',vars=[\"wheel-base\" , \"height\" , \"width\"] , kind=\"reg\",height=5, aspect=1)\nplt.show()","3c154b58":"# Changing size of circles in scatter plots using -> plot_kws=dict(s=140)\nsns.pairplot(auto,hue = 'fuel-type',vars=[\"wheel-base\" , \"height\" , \"width\"] , plot_kws=dict(s=140),height=5, aspect=1)\nplt.show()","3b2704ca":"#Adjusting the line width and the height\nsns.pairplot(auto,hue = 'fuel-type',x_vars=[\"wheel-base\" , \"height\"] ,y_vars=[\"engine-size\" , \"length\"] ,plot_kws=dict(s=140, linewidth=1,alpha= .6),height=5, aspect=1)\nplt.show()","79461d4f":"#scatterplot for each pairwise relationship\ng = sns.PairGrid(auto)\ng = g.map(plt.scatter)\nplt.show()","ff8f551b":"# Histogram on the diagonal\ng = sns.PairGrid(auto)\ng = g.map_offdiag(plt.scatter)\ng = g.map_diag(plt.hist)\nplt.show()","6493da2c":"# Show groups with different colors using \"hue\"\ng = sns.PairGrid(auto , hue='fuel-type')\ng = g.map_offdiag(plt.scatter)\ng = g.map_diag(plt.hist)\ng = g.add_legend()\nplt.show()","8d1966a9":"g = sns.PairGrid(auto , hue='fuel-type', palette=\"husl\")\ng = g.map_offdiag(plt.scatter)\ng = g.map_diag(plt.hist)\ng = g.add_legend()\nplt.show()","210322d6":"# Changing histogram styling\ng = sns.PairGrid(auto , hue='fuel-type')\ng = g.map_offdiag(plt.scatter)\ng = g.map_diag(plt.hist , histtype=\"step\", linewidth=2)\ng = g.add_legend()\nplt.show()","9800d305":"# Plot a subset of variables\ng = sns.PairGrid(auto , hue='fuel-type' ,vars=[\"wheel-base\" , \"height\" , \"width\"],height=5, aspect=1)\ng = g.map_offdiag(plt.scatter , edgecolor=\"w\", s=130)\ng = g.map_diag(plt.hist , edgecolor ='w', linewidth=2)\ng = g.add_legend()\nplt.show()","ff130c65":"# Plot a subset of variables\ng = sns.PairGrid(auto , hue='fuel-type' ,x_vars=[\"wheel-base\" , \"height\"],y_vars=[\"wheel-base\" , \"height\"],height=6, aspect=1)\ng = g.map_offdiag(plt.scatter , edgecolor=\"w\", s=130)\ng = g.map_diag(plt.hist , edgecolor ='w', linewidth=2)\ng = g.add_legend()\nplt.show()","76c050a3":"g = sns.PairGrid(auto , hue='fuel-type' ,x_vars=[\"wheel-base\" ,\"height\"],y_vars=[\"wheel-base\" , \"height\"],height=6, aspect=1 , hue_kws={\"marker\": [\"o\", \"^\", \"v\"]})\ng = g.map(plt.scatter , edgecolor=\"w\", s=130)\ng = g.add_legend()\nplt.show()","297db0ba":"# Using different plots on the upper and lower triangles\ng = sns.PairGrid(auto ,vars=[\"length\" , \"height\" , \"width\"],height=5, aspect=1)\ng = g.map_upper(sns.scatterplot , edgecolor=\"w\", s=130)\ng = g.map_lower(sns.kdeplot)\ng = g.map_diag(sns.kdeplot , lw= 2)\ng = g.add_legend()\nplt.show()","ce36ebaf":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline","bd9ab184":"# Plot the relationship between two variables\nplt.figure(figsize=(7,7))\nsns.regplot(x=auto[\"wheel-base\"] , y=auto[\"engine-size\"])\nplt.show()","1cd19f92":"# Plot the relationship between two variables and use a different color\nplt.figure(figsize=(9,9))\nsns.regplot(x=auto[\"wheel-base\"] , y=auto[\"engine-size\"] , color='#FF6600')\nplt.show()","4cf8d38e":"plt.figure(figsize=(9,9))\nsns.regplot(x=auto[\"wheel-base\"] , y=auto[\"engine-size\"] , color='#FF6600' , marker='>')\nplt.show()","88d8f638":"# Use 50% Confidnce interval\nplt.figure(figsize=(9,9))\nsns.regplot(x=auto[\"wheel-base\"] , y=auto[\"engine-size\"] , color='#FF6600' , ci=50 , truncate=False)\nplt.show()","456ccdf1":"#Fit the regression model using log(x)\nplt.figure(figsize=(9,9))\nsns.regplot(x=auto[\"wheel-base\"] , y=auto[\"engine-size\"] , color='#FF6600' , logx=True)\nplt.show()","5b27a05c":"# Change the color and width of regression line -> line_kws={\"color\":\"#FF5722\",\"lw\":3}\nplt.figure(figsize=(9,9))\nsns.regplot(x=auto[\"wheel-base\"] , y=auto[\"engine-size\"] , logx=True , line_kws={\"color\":\"#FF5722\",\"lw\":3})\nplt.show()","469695ca":"#lmplot \nsns.lmplot(x=\"city-mpg\", y=\"engine-size\",data=auto)","fc140d2c":"#Fit a regression model for a categorical variable\nsns.lmplot(x=\"city-mpg\", y=\"engine-size\",hue=\"fuel-type\", data=auto)","48906d63":"sns.lmplot(x=\"wheel-base\" , y=\"engine-size\" , hue=\"fuel-type\" , data=auto , height=8,aspect=1.2 ,scatter_kws ={'s':90 , 'alpha' : .4} , palette=[\"#FF3333\" ,\"#00CC00\"])\nplt.show()","7cc5f36f":"# Plot the levels of the third variable across different columns\nsns.lmplot(x=\"wheel-base\", y=\"engine-size\", hue=\"body-style\", col=\"fuel-type\", data=auto ,height=6,aspect=1)","79c4a870":"plt.figure(figsize=(8,8))\nsns.pointplot(auto['fuel-system'], auto['engine-size'])\nplt.show()","dca098ad":"plt.figure(figsize=(8,8))\nsns.pointplot(auto['fuel-system'], auto['engine-size'], hue=auto['num-of-doors'])\nplt.show()","7e86e251":"#Separate the points for different hue levels along the categorical axis:\n\nplt.figure(figsize=(8,8))\nsns.pointplot(auto['fuel-system'], auto['engine-size'], hue=auto['num-of-doors'],dodge=True)\nplt.show()","379dae40":"# use a different markers\n\nplt.figure(figsize=(8,8))\nsns.pointplot(auto['fuel-system'], auto['engine-size'], hue=auto['fuel-type'],dodge=True,markers=[\"o\", \"x\"],linestyles=[\"-\", \"--\"])\nplt.show()","00aa1968":"#Don\u2019t draw a line connecting each point:\nplt.figure(figsize=(8,8))\nsns.pointplot(auto['fuel-system'], auto['engine-size'],join=False)\nplt.show()","034e6aaa":"plt.figure(figsize=(8,8))\nsns.pointplot(auto['fuel-system'], auto['engine-size'],color=\"#bb3f3f\")\nplt.show()","a856c405":"# Use a different color palette for the points:\nplt.figure(figsize=(8,8))\nsns.pointplot(auto['fuel-system'], auto['engine-size'], hue=auto['num-of-doors'], palette=\"Set2\")\nplt.show()\n","1150b370":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\nplt.rcParams[ 'axes.labelsize'] = 10\nplt.rcParams['xtick.labelsize'] = 10\nplt.rcParams['ytick.labelsize'] = 10","521385ec":"# Facet along the columns to show a categorical variables using \"col\" parameter (univariate\nplt.figure(figsize=(8,8))\ng = sns.FacetGrid(auto, col=\"fuel-type\")\ng = g.map(plt.hist, \"wheel-base\", edgecolor ='w', linewidth=2)\nplt.show()","0d9a6d4e":"# Facet along the columns and rows to show a categorical variables using \"col\" and \"row\" pa\ng = sns.FacetGrid(auto, col=\"fuel-type\" , row = \"body-style\" , height=4, aspect=1)\ng = g.map(plt.hist, \"engine-size\",edgecolor ='w', linewidth=1)","1689205b":"# Changing color of bars\ng = sns.FacetGrid(auto, col=\"fuel-type\" , row = \"body-style\" , height=3, aspect=1)\ng = g.map(plt.hist, \"engine-size\" , color = '#F39C12',edgecolor ='w', linewidth=1)","f9432663":"# Bivariate function on each facet\ng = sns.FacetGrid(auto, col=\"body-style\" , row = \"fuel-type\" , height=3, aspect=1)\ng = g.map(plt.scatter, \"engine-size\" , \"wheel-base\")","a008a2a3":"# Changing size of dots -> s = 80\ng = sns.FacetGrid(auto, col=\"body-style\" , row = \"fuel-type\" , height=3, aspect=1)\ng = g.map(plt.scatter, \"engine-size\" , \"wheel-base\" , color = '#FF6600',edgecolor=\"w\", s=80)","8155778f":"# Show groups with different colors using \"hue\"\ng = sns.FacetGrid(auto, col=\"body-style\" , row = \"fuel-type\" , hue=\"num-of-doors\" ,height=3, aspect=1)\ng = g.map(plt.scatter, \"wheel-base\" , \"engine-size\" , edgecolor=\"w\", s=70)","62875bc6":"# Showing legend -> g.add_legend()\ng = sns.FacetGrid(auto, col=\"body-style\" , row = \"fuel-type\" , hue=\"num-of-doors\" ,height=3, aspect=1)\ng = g.map(plt.scatter, \"wheel-base\" , \"engine-size\",edgecolor=\"w\", s=70)\ng.add_legend()","7bc9a5d5":"# Use a custom palette\npal1 = dict(front=\"#ff7315\", rear=\"#8cba51\")\ng = sns.FacetGrid(auto, col=\"body-style\" , row = \"fuel-type\" , hue=\"engine-location\" ,height=3, aspect=1,palette=pal1)\ng = g.map(plt.scatter, \"wheel-base\" , \"engine-size\",edgecolor=\"w\", s=70)\ng.add_legend()\nplt.show()","3f0deac8":"pal1 = dict(front=\"#ff7315\", rear=\"#8cba51\")\nkws = dict(s=80, linewidth=1, edgecolor=\"w\")\nkws1 = dict(height=3, aspect=1,palette=pal1)\ng = sns.FacetGrid(auto, col=\"body-style\" , row = \"fuel-type\" , hue=\"engine-location\" , **kws1)\ng = g.map(plt.scatter, \"wheel-base\" , \"engine-size\",**kws)\ng.add_legend()\nplt.show()","693682e5":"# Use different markers for each level of the hue variable\npal1 = dict(front=\"#ff7315\", rear=\"#8cba51\")\nkws = dict(s=70, linewidth=1, edgecolor=\"w\")\nkws1 = dict(height=3, aspect=1,palette=pal1 , hue_kws=dict(marker=[\"^\", \"v\"]))\ng = sns.FacetGrid(auto, col=\"body-style\" , row = \"fuel-type\" , hue=\"engine-location\" , **kws1)\ng = g.map(plt.scatter, \"wheel-base\" , \"engine-size\",**kws)\ng.add_legend()\nplt.show()","5506059b":"g = sns.FacetGrid(auto, col=\"body-style\" , row = \"fuel-type\" ,height=3, aspect=1)\ng = g.map(plt.bar, \"wheel-base\" , \"engine-size\",edgecolor=\"w\" , color = '#8cba51')\ng.add_legend()","d7dc586c":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline","d4ed16d1":"# scatterplot with marginal histograms\nsns.jointplot(x=\"wheel-base\", y=\"engine-size\", data=auto , height = 10)","ab624574":"# Regplot with marginal distplot\nsns.jointplot(x=\"wheel-base\", y=\"engine-size\", data=auto , height = 10 , kind=\"reg\")","eebb4518":"sns.set(style=\"white\", color_codes=True)","c231b3ee":"sns.jointplot(x=\"wheel-base\", y=\"engine-size\", data=auto , height = 10)","9f8d145e":"# Resid Plot\nsns.jointplot(x=\"wheel-base\", y=\"engine-size\", data=auto , height = 10 , kind=\"resid\")","2b974032":"# \"ratio\" adjusts the relative size of the marginal plots\nsns.jointplot(x=\"wheel-base\", y=\"engine-size\", data=auto , height = 10, ratio=2)","6ddaa8d0":"# Change the color of the joint plot\ng = sns.jointplot(x=\"wheel-base\", y=\"engine-size\", data=auto , height = 10 , color = '#FF6600')","b33c5bdc":"plt.rcParams['figure.facecolor'] = \"#E5E7E9\"\nplt.rcParams['axes.facecolor'] = \"#E5E7E9\"\nplt.rcParams[ 'axes.labelsize'] = 20\nplt.rcParams['xtick.labelsize'] = 15\nplt.rcParams['ytick.labelsize'] = 15\ng = sns.jointplot(x=\"wheel-base\", y=\"engine-size\", data=auto , height = 10 , color = '#FF6600')","bb0acb24":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline\nsns.set(style=\"white\", color_codes=True)","4943bae2":"# Replace the scatterplot with a joint histogram using hexagonal bins\nsns.jointplot(x=\"wheel-base\", y=\"engine-size\", data=auto , height = 10 , kind=\"hex\")","2a6da467":"# Replace the scatterplot with a joint histogram using hexagonal bins\nsns.jointplot(x=\"wheel-base\", y=\"engine-size\", data=auto , height = 10 , kind=\"hex\" , color=\"#FF6600\")","f493c8aa":"\"\"\" Replace the scatterplot & joint histogram with kde plot\nin the margins and the interior into a shaded countour plot \"\"\"\nsns.jointplot(x=\"wheel-base\", y=\"engine-size\", data=auto , height = 10 , kind=\"kde\" , color=\"#FF6600\")","3a7eafb5":"# Change formatting of marginal graphs\nsns.jointplot(x=\"wheel-base\", y=\"engine-size\", data=auto , height = 10 , kind=\"kde\" ,color=\"#FF6600\" , marginal_kws={'lw':5})","dffde4d0":"# Change formatting of marginal graphs\nsns.jointplot(x=\"wheel-base\", y=\"engine-size\", data=auto , height = 10 , kind=\"kde\" ,color=\"#33CC00\" , marginal_kws={'lw':5 , 'color' : \"#FF3300\"})","5b7011f7":"sns.jointplot(x=\"wheel-base\", y=\"engine-size\", data=auto , height = 10 , kind=\"kde\" ,color=\"#33CC00\" , marginal_kws={'lw':5 , 'color' : \"#FF3300\" , 'bw' :.3})","474dccb1":"# Changing background of marginal graphs\ng = sns.jointplot(x=\"wheel-base\", y=\"engine-size\", data=auto , height = 10 , kind=\"kde\" ,color=\"#33CC00\" , marginal_kws={'lw':5 , 'color' : \"#FF3300\"})\ng.ax_marg_x.set_facecolor('#f8fab8')\ng.ax_marg_y.set_facecolor('#f8fab8')","5062d178":"sns.jointplot(\"wheel-base\", \"engine-size\", data=auto, s=70, edgecolor=\"w\", linewidth=1, height =10,color =\"#33CC00\",marginal_kws=dict(bins=15, rug=True))\nplt.show()","dbf4054b":"#Add plots using default parameters\ng = sns.JointGrid(x=\"wheel-base\", y=\"engine-size\", data=auto, height = 10)\ng = g.plot(sns.regplot, sns.distplot)","bd15b856":"# Changing color of plots\ng = sns.JointGrid(x=\"wheel-base\", y=\"engine-size\", data=auto, height = 10)\ng = g.plot_joint(sns.scatterplot, color=\"#FF6600\",s=50)\ng = g.plot_marginals(sns.distplot, color=\"#FF6600\")","1561c1b6":"# Remove kernel density estimate from the marginal plots\ng = sns.JointGrid(x=\"wheel-base\", y=\"engine-size\", data=auto, height = 10)\ng = g.plot_joint(sns.scatterplot, color=\"#FF6600\")\ng = g.plot_marginals(sns.distplot,kde= False, color=\"#FF6600\")","2ea29531":"# kde plot in the margins and the interior into a shaded countour plot\ng = sns.JointGrid(x=\"wheel-base\", y=\"engine-size\", data=auto, height = 8)\ng = g.plot_joint(sns.kdeplot)\ng = g.plot_marginals(sns.kdeplot, shade=True)","0fedd42e":"# Remove the space between the joint and marginal axes\ng = sns.JointGrid(x=\"engine-size\", y=\"wheel-base\", data=auto, height = 8 , space =0)\ng = g.plot_joint(sns.kdeplot)\ng = g.plot_marginals(sns.kdeplot, shade=True)","87292f80":"g = sns.JointGrid(x=\"wheel-base\", y=\"engine-size\", data=auto, height = 8)\ng = g.plot_joint(sns.kdeplot , cmap=\"OrRd_r\")\ng = g.plot_marginals(sns.kdeplot, shade=True , color = 'orange')","f98df8ae":"# Set Axis limits\ng = sns.JointGrid(x=\"wheel-base\", y=\"engine-size\", data=auto, height = 10 , xlim=(80,100) , ylim=(20,300))\ng = g.plot_joint(sns.kdeplot , cmap=\"OrRd_r\")\ng = g.plot_marginals(sns.kdeplot, shade=True , color = 'orange')","47e765b2":"# Changing background of marginal graphs\ng = sns.JointGrid(x=\"wheel-base\", y=\"engine-size\", data=auto, height = 10)\ng = g.plot_joint(sns.scatterplot, color=\"#FF6600\",s=50)\ng= g.plot_marginals(sns.distplot,kde=False , color = 'Blue')\ng.ax_marg_x.set_facecolor('#f8fab8')\ng.ax_marg_y.set_facecolor('#f8fab8')","98a040d8":"corr = auto.corr()\nplt.figure(figsize=(20,9))\nax = sns.heatmap(corr)\nplt.yticks(rotation=0)\nplt.show()","b32bb204":"# Changing the limits of the colormap\nplt.figure(figsize=(20,9))\nax = sns.heatmap(corr,vmin=0, vmax=1)\nplt.yticks(rotation=0)\nplt.show()","92aea1b8":"# Plot a heatmap for data centered on 0.5 with a diverging colormap\nplt.figure(figsize=(16,9))\nax = sns.heatmap(corr,center=0.5)\nplt.yticks(rotation=0)\nplt.show()","a3a6be83":"# Changing cmap\nplt.figure(figsize=(16,9))\nax = sns.heatmap(corr,cmap=\"YlGnBu\")\nplt.yticks(rotation=0)\nplt.show()","5e4bf7f8":"plt.figure(figsize=(16,9))\nax = sns.heatmap(corr,cmap=\"coolwarm\")\nplt.yticks(rotation=0)\nplt.show()","375a9510":"# Add lines between each cell\nplt.figure(figsize=(16,9))\nax = sns.heatmap(corr,linewidths=.1)\nplt.yticks(rotation=0)\nplt.show()","3d8d06a3":"# Annotate each cell with the numeric value using integer formatting\nplt.figure(figsize=(16,9))\nax = sns.heatmap(corr,annot=True, fmt=\"f\")\nplt.yticks(rotation=0)\nplt.show()","57298046":"# Annotate each cell with the numeric value using decimal formatting\nplt.figure(figsize=(16,9))\nax = sns.heatmap(corr,cmap=\"YlGnBu\", annot=True ,fmt=\".2f\")\nplt.yticks(rotation=0)\nplt.show()","0378a06e":"plt.figure(figsize=(20,11))\nax = sns.heatmap(corr,cmap=\"YlGnBu\", linewidths=.5, annot=True )\nplt.yticks(rotation=0)\nplt.show()","ac3c0d95":"# Turn off the colorbar -> cbar=False\nplt.figure(figsize=(20,11))\nax = sns.heatmap(corr,vmin=0, vmax=8000,cmap=\"YlGnBu\", linewidths=.5,\nannot=True ,annot_kws={'size':14} ,fmt=\".1f\" , cbar=False)\nplt.yticks(rotation=0)\nplt.show()","5cf9159f":"# Force the aspect ratio of the blocks to be equal using \"square\" parameter\nplt.figure(figsize=(20,11))\nax = sns.heatmap(corr,cmap=\"YlGnBu\", linewidths=.5,\nannot=True ,annot_kws={'size':14} ,fmt=\".1f\" , cbar=False ,square = True)\nplt.yticks(rotation=0)\nplt.show()","7c17d05a":"<a class=\"anchor\" id=\"0.1\"><\/a>\n# **Table of Contents**\n\n1. [Introduction to Seaborn](#1)\n2. [Seaborn vs Matplotlib](#2)\n3. [Import Libraries](#3)\n4. [Line Charts](#4)\n5. [Scatterplots](#5)\n6. [Rel Plot](#6)\n7. [Bar Plot](#7)\n8. [Cat Plot](#8)\n9. [Dist Plot](#9)\n10. [KDE Plot](#10)\n11. [Swarm Plot](#11)\n12. [Violin Plot](#12)\n13. [Strip Plot](#13)\n14. [Box Plot](#14)\n15. [Boxen Plot](#15)\n16. [Pair Plot](#16)\n17. [Pair Grid](#17)\n18. [Regression Plot](#18)\n19. [Point Plot](#19)\n20. [Facet Grid](#20)\n21. [Joint Plot](#21)\n22. [Joint Grid](#22)\n23. [Heat Map](#23)\n\n","dd78c7c0":"## Histograms\n\nHistograms are likely familiar, and a hist function already exists in matplotlib. A histogram represents the distribution of data by forming bins along the range of the data and then drawing bars to show the number of observations that fall in each bin.\n\nTo illustrate this, let\u2019s remove the density curve and add a rug plot, which draws a small vertical tick at each observation. You can make the rug plot itself with the rugplot() function, but it is also available in distplot():","f40bb8d3":"# 20.Facet Grid     <a class=\"anchor\" id=\"20\"><\/a>\n\n[Table of Contents](#0.1)\n\nMulti-plot grid for plotting. A FacetGrid can be drawn with up to three dimensions \u2212 row, col, and\nhue.","dea71203":"# 15. Boxen Plot <a class=\"anchor\" id=\"15\"><\/a>\n\n[Table of Contents](#0.1)\n\nThe Boxen Plot shows a large number of quantiles.By plotting more quantiles, it provides more\ninformation about the shape of the distribution, particularly in the tails.","0bc6b49e":"# 13.Strip Plot         <a class=\"anchor\" id=\"13\"><\/a>\n\n[Table of Contents](#0.1)\n\nStrip plot is a scatter plot where one of the variables is categorical.","e0c63ad9":"# 9 Dist Plot <a class=\"anchor\" id=\"9\"><\/a>\n\n[Table of Contents](#0.1)","3c5e85d1":"# 14.Boxplot   <a class=\"anchor\" id=\"14\"><\/a>\n\n[Table of Contents](#0.1)\n\nThe box plot is a standardized way of displaying the distribution of data based on the five number summary: minimum, first quartile, median, third quartile, and maximum.The first is the familiar boxplot(). This kind of plot shows the three quartile values of the distribution along with extreme values. The \u201cwhiskers\u201d extend to points that lie within 1.5 IQRs of the lower and upper quartile, and then observations that fall outside this range are displayed independently. Importantly, this means that each value in the boxplot corresponds to an actual observation in the data:","b9ce5eb5":"# 22. Joint Grid   <a class=\"anchor\" id=\"22\"><\/a>\n\n[Table of Contents](#0.1)\n\nGrid for drawing a bivariate plot with marginal univariate plots.","47a0c405":"# **16. Pair Plot**  <a class=\"anchor\" id=\"16\"><\/a>\n\n[Table of Contents](#0.1)\n\nPair Plot is used for plotting pairwise relationships in a dataset.\n\nTo plot multiple pairwise bivariate distributions in a dataset, you can use the pairplot() function. This creates a matrix of axes and shows the relationship for each pair of columns in a DataFrame. by default, it also draws the univariate distribution of each variable on the diagonal Axes:","ef3ec2c4":"# 10.KDE Plot    <a class=\"anchor\" id=\"10\"><\/a>\n\n[Table of Contents](#0.1)\n\nKDE Plot is used to estimate the probability density function of a continuous random variable.","c30e546d":"# 11. Swarm Plot <a class=\"anchor\" id=\"11\"><\/a>\n\n[Table of Contents](#0.1)","8aed1710":"This kernel aims at depicting various plots and visualization techniques which can be done using seaborn library.It covers the basic to advance level plotting functions of the libraray.It contains several examples which will give you hands-on experience in generating plots in python.\n","ea88a4ab":"# 7. Bar Plot <a class=\"anchor\" id=\"7\"><\/a>\n\n[Table of Contents](#0.1)\n\nBar Plot shows the relationship between a numerical variable and a categorical variable.A familiar style of plot that accomplishes this goal is a bar plot. In seaborn, the barplot() function operates on a full dataset and shows an arbitrary estimate, using the mean by default. When there are multiple observations in each category, it also uses bootstrapping to compute a confidence interval around the estimate and plots that using error bars:\n\nBar plots include 0 in the quantitative axis range, and they are a good choice when 0 is a meaningful value for the quantitative variable, and you want to make comparisons against it.","64de7568":"# **5.Scatterplots**                              <a class=\"anchor\" id=\"5\"><\/a>\n\n[Table of Contents](#0.1)\n\nThe most familiar way to visualize a bivariate distribution is a scatterplot, where each observation is shown with point at the x and y values. This is analgous to a rug plot on two dimensions. You can draw a scatterplot with the matplotlib plt.scatter function, and it is also the default kind of plot shown by the jointplot() function:","5fb92d76":"# **8.Cat plot** <a class=\"anchor\" id=\"8\"><\/a>\n\n[Table of Contents](#0.1)\n\nCat Plot provides access to several axes-level functions (\"point\", \"bar\", \"strip\", \"swarm\",\"box\", \"violin\", \"count\" or\n\"boxen\") that show the relationship between a numerical and one or more categorical variables","d35bb143":"# 21.Joint Plot    <a class=\"anchor\" id=\"21\"><\/a>\n\n[Table of Contents](#0.1)\n\nJoint plot is used to draw a plot of two variables with bivariate graph and univariate graphs in the\nmargin.","a4cd0332":"# 18. Regression plots   <a class=\"anchor\" id=\"18\"><\/a>\n\n[Table of Contents](#0.1)\n\nlmplot() is one of the most widely used function to quickly plot the Linear Relationship b\/w 2 variables. Regression plot is used to plot data and a linear regression model fit.","bb519430":"# 3.Import libraries <a class=\"anchor\" id=\"3\"><\/a>\n\n[Table of Contents](#0.1)\n\n","ba7d1330":"# **6. Rel Plot** <a class=\"anchor\" id=\"6\"><\/a>\n\n[Table of Contents](#0.1)\n","ac50db2f":"# 17. Pair Grid <a class=\"anchor\" id=\"17\"><\/a>\n\n[Table of Contents](#0.1)\n\nPair Grid is a Subplot grid for plotting pairwise relationships in a dataset. Different axes-level plotting functions can be used to draw bivariate plots in the upper and lower triangles, and the the marginal distribution of each variable can be shown on the diagonal.","049a1f10":"# **4. Line Charts**    <a class=\"anchor\" id=\"4\"><\/a>\n\n[Table of Contents](#0.1)","c249b209":"# **1.Introduction to Seaborn**  <a class=\"anchor\" id=\"1\"><\/a>\n\n[Table of Contents](#0.1)\n\nSeaborn provides a high-level interface to Matplotlib, a powerful but sometimes unwieldy Python visualization library.On Seaborn\u2019s official website, they state:\n\n> If matplotlib \u201ctries to make easy things easy and hard things possible\u201d, seaborn tries to make a well-defined set of hard things easy too.\n\nFeatures of Seaborn : \n\n* Using default themes that are aesthetically pleasing.\n* Setting custom color palettes.\n* Making attractive statistical plots.\n* Easily and flexibly displaying distributions.\n* Visualizing information from matrices and DataFrames.\n\nThose last three points are why **Seaborn is our tool of choice for Exploratory Analysis**. It makes it very easy to \u201cget to know\u201d your data quickly and efficiently.","a42328ff":"## Plotting univariate distributions\n\nThe most convenient way to take a quick look at a univariate distribution in seaborn is the distplot() function. By default, this will draw a histogram and fit a kernel density estimate (KDE).","6da4f407":"# **12. Violin Plot**  <a class=\"anchor\" id=\"12\"><\/a>\n\n[Table of Contents](#0.1)\n\nViolinplots summarize numeric data over a set of categories.Violin plots are similar to box plots, except that they also show the probability density of the data at different values, usually smoothed by a kernel density estimator.","63f1d879":"# **2.Seaborn vs Matplotlib**  <a class=\"anchor\" id=\"2\"><\/a>\n\n[Table of Contents](#0.1)\n\nIt is summarized that if Matplotlib \u201ctries to make easy things easy and hard things possible\u201d, Seaborn tries to make a well-defined set of hard things easy too.\u201d\n\nSeaborn helps resolve the two major problems faced by Matplotlib; the problems are \u2212\n\n* Default Matplotlib parameters\n* Working with data frames\n\nAs Seaborn compliments and extends Matplotlib, the learning curve is quite gradual. If you know Matplotlib, you are already half way through Seaborn.\n","a47c09bc":"# 23.Heat Map           <a class=\"anchor\" id=\"23\"><\/a>\n\n[Table of Contents](#0.1)\n\nA heat map is a data visualization technique that shows magnitude of a phenomenon as color in two\ndimensions. The variation in color may be by hue or intensity, giving obvious visual cues to the reader about\nhow the phenomenon is clustered or varies over space.","ce11fd17":"# 19.Point plots <a class=\"anchor\" id=\"19\"><\/a>\n\n[Table of Contents](#0.1)\n\n\nAn alternative style for visualizing the same information is offered by the pointplot() function. This function also encodes the value of the estimate with height on the other axis, but rather than show a full bar it just plots the point estimate and confidence interval. Additionally, pointplot connects points from the same hue category. This makes it easy to see how the main relationship is changing as a function of a second variable, because your eyes are quite good at picking up on differences of slopes:"}}