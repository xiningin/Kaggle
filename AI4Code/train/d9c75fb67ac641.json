{"cell_type":{"df49a0fb":"code","dd62d120":"code","c6d598ff":"code","f2c9d24e":"code","c7e61d27":"code","b57ce858":"code","802a45ee":"code","862e07fb":"code","b77abb99":"code","0aa5c50b":"code","24d9a84f":"code","ab3fe764":"code","66b1d7eb":"code","eb85b51a":"code","53aeb3d2":"code","1b2f33da":"code","c900e48a":"code","2335ece1":"code","f9502fb8":"code","56584a07":"markdown","196a126b":"markdown"},"source":{"df49a0fb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dd62d120":"df=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf.head()\ndfTest=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndf.head()","c6d598ff":"#Concatting Train and Test data for Data cleansing\n\ndf[\"flag\"]=\"0\"\ndfTest[\"flag\"]=\"1\"\nFinalHouse_Data=pd.concat([df,dfTest])\nFinalHouse_Data.head()\nFinalHouse_Data.isnull().sum()\n","f2c9d24e":"missing_value_count_coulmn=FinalHouse_Data.isnull().sum()\nprint(missing_value_count_coulmn[missing_value_count_coulmn>0])\n#missingValues=pd.DataFrame(data=missing_value_count_coulmn[missing_value_count_coulmn>0],columns=['A','B'])\nmissingValues=pd.DataFrame(missing_value_count_coulmn[missing_value_count_coulmn>0])\nlist(missingValues.index)","c7e61d27":"# Removing LotFrontage feature as too many null values. Other null values can be extrapolated as most of them are NA\n#FinalHouse_Data=FinalHouse_Data.drop(['LotFrontage'],axis=1,inplace=True)\nprint(FinalHouse_Data.columns.values)\nFinalHouse_Data.shape","b57ce858":"Ordinal_categorical=[\"MSSubClass\",\"Street\",\"Alley\",\"LotShape\",\"LandContour\",\"Utilities\",\"LotConfig\",\"LandSlope\",\"Condition1\"\n                    ,\"BldgType\",\"HouseStyle\",\"RoofStyle\",\"RoofMatl\",\"Exterior1st\",\"MasVnrType\",\"ExterQual\",\"ExterCond\",\"Foundation\"\n                    ,\"BsmtQual\",\"BsmtCond\",\"BsmtExposure\",\"BsmtFinType1\",\"BsmtFinType2\",\"Heating\",\"HeatingQC\",\"CentralAir\",\n                    \"Electrical\",\"KitchenQual\",\"FireplaceQu\",\"GarageType\",\"GarageFinish\",\"GarageQual\",\"GarageCond\",\"PavedDrive\",\n                    \"PoolQC\",\"Fence\",\"MSZoning\",\"MiscFeature\",\"SaleType\",\"SaleCondition\"]\n#Nominal_categorical=[\"MSZoning\",\"MiscFeature\",\"SaleType\",\"SaleCondition\"]","802a45ee":"def Simplenullremoval(df,column):\n    for col in column:\n        if((df[col].dtypes=='int64') | (df[col].dtypes=='int32')):\n            df[col].fillna(0,inplace=True)\n        df[col].fillna(\"Not Applicable\",inplace=True)\n    print(df[column].head())\n    return df\n\n \n        ","862e07fb":"ParsesimplenullData=['Alley','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','Fence','MiscFeature','BsmtFinSF1','BsmtFinType2','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath','FireplaceQu','GarageType','GarageYrBlt','GarageFinish','GarageCars','GarageArea','GarageQual','GarageCond','PoolQC']\nHouseData_nullcheck=Simplenullremoval(FinalHouse_Data,ParsesimplenullData)\nFinalHouse_Data[ParsesimplenullData]=HouseData_nullcheck[ParsesimplenullData]\nFinalHouse_Data.shape","b77abb99":"missing_value_count_coulmn=FinalHouse_Data.isnull().sum()\nprint(missing_value_count_coulmn[missing_value_count_coulmn>0])\n#missingValues=pd.DataFrame(data=missing_value_count_coulmn[missing_value_count_coulmn>0],columns=['A','B'])\nmissingValues=pd.DataFrame(missing_value_count_coulmn[missing_value_count_coulmn>0])\nlist(missingValues.index)","0aa5c50b":"from sklearn.impute import SimpleImputer\n\nimputer=SimpleImputer(strategy='most_frequent')\nnullCategoryValues=['MSZoning','Utilities','Exterior1st','Exterior2nd','MasVnrType','MasVnrArea','Electrical','KitchenQual','Functional','SaleType']\n#HouseData_nullcategory=pd.DataFrame(imputer.fit_transform(FinalHouse_Data[nullCategoryValues]))\nHouseData_nullcategory=pd.DataFrame(imputer.fit_transform(FinalHouse_Data[nullCategoryValues]))\nHouseData_nullcategory.columns=df[nullCategoryValues].columns\n\nHouseData_nullcategory.head()\nFinalHouse_Data[nullCategoryValues]=HouseData_nullcategory\nFinalHouse_Data.head()\n","24d9a84f":"missing_value_count_coulmn=FinalHouse_Data.isnull().sum()\nprint(missing_value_count_coulmn[missing_value_count_coulmn>0])\n#missingValues=pd.DataFrame(data=missing_value_count_coulmn[missing_value_count_coulmn>0],columns=['A','B'])\nmissingValues=pd.DataFrame(missing_value_count_coulmn[missing_value_count_coulmn>0])\nlist(missingValues.index)","ab3fe764":"Meanimputer=SimpleImputer(strategy='mean')\nnullCategoryValues=['SalePrice']\n#HouseData_nullcategory=pd.DataFrame(imputer.fit_transform(FinalHouse_Data[nullCategoryValues]))\nHouseData_nullcategorySale=pd.DataFrame(Meanimputer.fit_transform(FinalHouse_Data[nullCategoryValues]))\nHouseData_nullcategorySale.columns=df[nullCategoryValues].columns\n\nHouseData_nullcategorySale.head()\nFinalHouse_Data[nullCategoryValues]=HouseData_nullcategorySale\nFinalHouse_Data.head()","66b1d7eb":"#Y=FinalHouse_Data['SalePrice']\n# Removing the flag, saleprice and id columns from the features matrix\ncols = [col for col in FinalHouse_Data.columns if col in ['flag','SalePrice','Id']]\nY=FinalHouse_Data[cols]\nX=FinalHouse_Data.drop(['LotFrontage','Id','SalePrice'],axis=1,inplace=True)","eb85b51a":"FinalHouse_Data.head()","53aeb3d2":"# Selecting the train part of the dataset by making flag=0\nX_train=FinalHouse_Data[FinalHouse_Data[\"flag\"]=='0']\nX_test=FinalHouse_Data[FinalHouse_Data[\"flag\"]=='1']\nY.head()\nY_train=Y[Y[\"flag\"]=='0']\ny_train=Y_train.drop(['flag','Id'],axis=1,inplace=True)\nY_test=Y[Y[\"flag\"]=='1']\ny_test=Y_test.drop(['flag','Id'],axis=1,inplace=True)\n\nprint(Y_test)\n\n","1b2f33da":"from sklearn.preprocessing import LabelEncoder\n\ndef transformCategorical(df,columns):\n    label_encoder=LabelEncoder()\n    for col in columns:\n        if df[col].dtype=='object':\n            df[col]=label_encoder.fit_transform(df[col].astype(str))\n    return df[columns]\n        \nX_train[X_train.columns.values]=transformCategorical(X_train,X_train.columns.values)\nX_train.head()","c900e48a":"\ndef transformCategoricalTest(df,columns):\n    label_encoder=LabelEncoder()\n    for col in columns:\n        if df[col].dtype=='object':\n            df[col]=label_encoder.fit_transform(df[col].astype(str))\n    return df[columns]\n\nX_test[X_test.columns.values]=transformCategoricalTest(X_test,X_test.columns.values)\nX_test.head()","2335ece1":"for col in (X_train.columns.values):\n    if X_train[col].dtype=='object':\n        print (col)","f9502fb8":"from sklearn.linear_model import LinearRegression\n# Instantiating linear regressor\nlm=LinearRegression()\n# Fitting the model on the training data\nlm.fit(X_train,Y_train)\n\n# Prediction on the training data\npredictions_linearregressor_traindata=lm.predict(X_test)\nprint(predictions_linearregressor_traindata.shape)\nprint(Y_test.shape)\npredicted=pd.DataFrame(data=predictions_linearregressor_traindata)\n#dff = pd.DataFrame({'Actual': Y_test, 'Predicted': predictions_linearregressor_traindata})\n\ndff=pd.concat([Y_test,predicted],axis=1)\ndff\n\n","56584a07":"Reference: https:\/\/www.kaggle.com\/warmachinezz\/housing-prediction-ranked-107-out-of-45651-top-1#MODEL-CREATION-AND-MAKING-PREDICTIONS","196a126b":"missing_value_count_coulmn=FinalHouse_Data.isnull().sum()"}}