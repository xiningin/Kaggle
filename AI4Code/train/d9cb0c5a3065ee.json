{"cell_type":{"8a1193f9":"code","f765f38e":"code","9646f30f":"code","4499f203":"code","78087bec":"code","bea1f096":"code","e0be4f77":"code","13374d60":"code","28b8c099":"code","cec48769":"code","b3316f26":"code","64655a9c":"code","ac5dd65f":"code","34c0d72b":"code","c0bfd35a":"code","49c3c885":"code","9479fba3":"code","f87860ae":"code","cf812a18":"code","80272848":"code","b80741d1":"code","dcb2163f":"code","b70d5c05":"code","2cdf0cde":"code","e40cea75":"code","5660a8a5":"code","bd95fd8c":"code","dd1d5043":"code","a73174bd":"code","371e4036":"code","b2f78241":"code","6d4dea95":"code","c33d6080":"code","2ac2c4b3":"code","172e0245":"code","36dcc8f1":"code","16baafcd":"code","396d1de7":"code","fc3a87a4":"code","ae85de25":"code","3a38bcbf":"code","67b2d07e":"code","b8d3dd3d":"code","248513d0":"code","e366fd10":"code","41db9047":"code","f009a790":"code","61c878e4":"code","92f69094":"code","c2ee7578":"code","95a2ad0a":"code","737fca8a":"code","b48c152e":"code","e00ed466":"code","27eef000":"code","ad22c275":"markdown","84b412a7":"markdown","a1057271":"markdown","f2a76576":"markdown","acbb9537":"markdown","4a2b7d77":"markdown","916d409f":"markdown","23fd41cd":"markdown","6d8d3702":"markdown","7e85f112":"markdown","21c23864":"markdown","40cacb01":"markdown","afba6032":"markdown","654ea365":"markdown","e2ec0ac5":"markdown","8c9dcdcb":"markdown","4f1d1b22":"markdown","6d96ebb6":"markdown","cac9945d":"markdown","6f017295":"markdown","4577fedc":"markdown","c1d680d9":"markdown","ad55b60a":"markdown","34ecca69":"markdown","5b52516f":"markdown","3c66e228":"markdown","94c3124f":"markdown","87166cd9":"markdown","9417d186":"markdown","def45984":"markdown","87365d59":"markdown","df22f13c":"markdown","2db1eb3d":"markdown","ce4b520b":"markdown","e8de499a":"markdown","2af08078":"markdown","ff61d21d":"markdown","8e0beb37":"markdown","111483c6":"markdown","35b8953b":"markdown","87ee4cca":"markdown","5bdb9d16":"markdown"},"source":{"8a1193f9":"#Importing the Libraries\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#Turning off the warnings\nimport warnings\nwarnings.filterwarnings('ignore')\nimport scipy.stats as stats","f765f38e":"#Imprting the Date\nfifa = pd.read_csv('..\/input\/fifa-21-complete-player-dataset\/fifa21_male2.csv')","9646f30f":"fifa.shape","4499f203":"#to display all the columns \npd.set_option('display.max_columns',170)","78087bec":"fifa.head()","bea1f096":"fifa.columns","e0be4f77":"fifa.drop(['ID','Position','Club Logo','Player Photo','Flag Photo','Team & Contract','Team & Contract'],axis=1,inplace=True)\nfifa.drop(['Joined','Loan Date End','Value','Wage','Release Clause','Contract'],axis=1,inplace=True)\nfifa.drop(['IR','LS','ST','RS','LW','LF','CF','RF','RW','LAM','CAM','RAM','LAM'],axis=1,inplace=True)\nfifa.drop(['LM','LCM','CM','RCM','RM','LWB','LDM','CDM','RDM','RWB'],axis=1,inplace=True)\nfifa.drop(['LB','LCB','CB','RCB','RB','GK','Gender','Hits'],axis=1,inplace=True)","13374d60":"fifa=fifa[(fifa['OVA']>75)].reset_index(drop=True)","28b8c099":"fifa.shape","cec48769":"fifa.info()","b3316f26":"fifa.head(2)","64655a9c":"def cleaning(x):\n    try:\n        #Height\n        x = x.replace(\"'\",\".\")\n        x = x.replace('\"',\"\")\n        #Weight\n        x=x.replace(\"lbs\",'')\n        # W\/F and SM\n        x=x.replace(\"\u2605\",'')\n        if ((\".\") in x):\n            x = x.split(\".\")\n            x = round((int(x[0])*12+int(x[1])) * 2.54, 1)\n        return int(x)\n    \n    except:\n        return int(x)\nfifa['Height']= fifa['Height'].apply(cleaning)\n#clean the weight and conver it to KG as integers\nfifa['Weight'] = ((fifa['Weight'].apply(cleaning))*0.453592).astype(int)\nfifa['W\/F']= fifa['W\/F'].apply(cleaning)\nfifa['SM'] = fifa['SM'].apply(cleaning)","ac5dd65f":"fifa.info()","34c0d72b":"fifa[fifa['BP']=='GK'].head()","c0bfd35a":"def missing_value (name_of_the_column):\n    \n    fifa[name_of_the_column] = fifa.groupby(['OVA','BP'])[name_of_the_column].apply(lambda x: x.fillna(x.mean()))\n    fifa[name_of_the_column] = fifa[name_of_the_column].fillna(int(fifa[name_of_the_column].mean()))\n\nfor i in ['Balance','Jumping','Volleys','Curve','Agility','Interceptions','Positioning','Vision','Composure','Sliding Tackle']:\n    missing_value(i)\n","49c3c885":"\ndef missing_object (name_of_the_column):\n    \n    fifa[name_of_the_column] = fifa.groupby(['OVA','BP'])[name_of_the_column].apply(lambda x: x.fillna(x.value_counts().idxmax()))\n    fifa[name_of_the_column] = fifa[name_of_the_column].fillna(fifa[name_of_the_column].value_counts().idxmax())\nfor j in ['A\/W','D\/W']:\n    missing_object(j)\n","9479fba3":"fifa.isnull().sum().sum()","f87860ae":"positions=[]\nfor i in fifa.BP.unique():\n    positions.append(i)\n    vars()[i]=fifa[fifa['BP']==i].reset_index(drop=True)\n\n\nprint(positions)","cf812a18":"LWB.head(2)","80272848":"attacking=pd.concat([ST, CF], axis = 0).sort_values(by=['OVA'], ascending=False).reset_index(drop=True)\ndefending=pd.concat([RWB,RB,CB,LB,LWB], axis = 0).sort_values(by=['OVA'], ascending=False).reset_index(drop=True)\nmidfield=pd.concat([CM,CAM,CDM], axis = 0).sort_values(by=['OVA'], ascending=False).reset_index(drop=True)\n\nrightfield=pd.concat([RM,RW], axis = 0).sort_values(by=['OVA'], ascending=False).reset_index(drop=True)\nleftfield=pd.concat([LM,LW], axis = 0).sort_values(by=['OVA'], ascending=False).reset_index(drop=True)\n\nsides=pd.concat([RM,RW,LM,LW], axis = 0).sort_values(by=['OVA'], ascending=False).reset_index(drop=True)","b80741d1":"sides['BP'].value_counts() ","dcb2163f":"sides.head(2)","b70d5c05":"fifa.select_dtypes([np.number]).hist(figsize=(24,24))\nplt.show()","2cdf0cde":"def sampler(population, n=30, k=500):\n    sample_means = []\n    for i in range(k):\n        sample = np.random.choice(population, size=n, replace=True)\n        sample_means.append(np.mean(sample))\n    return sample_means\n\n\nm,n=0 ,0\nfig, ax = plt.subplots(4,2,figsize=(10,20))\nfor i in ['Height','Acceleration','Reactions','Jumping','Stamina','Aggression','Interceptions']:\n    sns.distplot(sampler(fifa[i]), bins=100, kde=True,ax=ax[n][m]).set_title(i)\n    m+=1\n    if m==2:\n        n+=1\n        m=0\n","e40cea75":"def OP(dataframe, column,top=0.05):\n    P=stats.norm.ppf(1-top)\n    z=stats.zscore(dataframe[column])\n    a,b,c,d,e,f=[],[],[],[],[],[]\n    for x,i in  enumerate(z):\n#this functi\n        if z[x]>P:\n            a.append(dataframe['Name'][x])\n            b.append(dataframe['BP'][x])\n            c.append(z[x])\n            d.append(dataframe['Club'][x])\n            e.append(dataframe['OVA'][x])\n            f.append(dataframe['Nationality'][x])\n            \n    outstanding=pd.DataFrame()\n    outstanding['name'] =a\n    outstanding['club']=d\n    outstanding['nationality']=f\n    outstanding['position']=b\n    outstanding['rating']=e\n    outstanding['z value']=c\n    outstanding=outstanding.sort_values(by=['z value'], ascending=False).reset_index(drop=True)\n    \n    del outstanding['z value']\n    return outstanding","5660a8a5":"OP(midfield,'Total Stats')","bd95fd8c":"# the .corr() will return a corrletion matrix between all fields. I am intrested in rating effect so I will loc its row\n\ncorr = midfield.corr().loc[:,['OVA']]\n\nfig, ax = plt.subplots(figsize=(5,15))\n\nax = sns.heatmap(corr.sort_values(by=['OVA'],ascending=False), ax=ax,annot=True,cbar=True,cmap=\"Greens\")\nax.set_xticklabels(ax.xaxis.get_ticklabels(), fontsize=10)\nax.set_yticklabels(ax.yaxis.get_ticklabels(), fontsize=10)\n\nplt.show()","dd1d5043":"attacking.head(1)","a73174bd":"A_stat=['Finishing','Heading Accuracy','Short Passing','Dribbling','Acceleration','Sprint Speed','Agility','Reactions','Balance',\n      'Shot Power','Stamina','Strength','Long Shots','Positioning','Vision','Composure','W\/F','SM']\nA_panelty=[0.9,0.3,0.5,0.7,1.8,4,2,0.9,0.8,\n         1.8,0.75,0.6,0.5,3,0.7,0.75,20*2,20*3]\n\nS_stat=A_stat\nS_stat.append('Crossing')\nS_stat.append('Curve')\nS_panelty=[0.6,0.2,3,3,2,2,2,2,2,\n          1,3,2,1,2,3,2,20*2,20*3,2,1.5]\n\nattacking['Important STAT']=0\n\nfor m in range(len(A_panelty)):\n    attacking['Important STAT']+=A_panelty[m]*attacking[A_stat[m]]\n\nsides['Important STAT']=0\nfor n in range(len(S_panelty)):\n    sides['Important STAT']+=S_panelty[n]*sides[S_stat[n]]","371e4036":"OP(attacking,'Important STAT',0.1)","b2f78241":"OP(sides,'Important STAT')","6d4dea95":"defending.head(1)","c33d6080":"D_stat=['Height','Acceleration','Sprint Speed','Reactions','Jumping','Stamina','Strength','Aggression','Interceptions',\n       'Composure','Marking','Standing Tackle','Sliding Tackle']\nD_panelty=[1.5,4,4,1,1,2,1,1.5,2,\n          1,3,4,1]\n\ndefending['Important STAT']=0\n\nfor j in range(len(D_panelty)):\n    defending['Important STAT']+=D_panelty[j]*defending[D_stat[j]]\n   \nOP(defending,'Important STAT')","2ac2c4b3":"defender=defending.copy()\ndel defender['Important STAT']\n\ncorr = defender.corr().loc[:,['Height','Weight']]\n\nfig, ax = plt.subplots(figsize=(5,15))\n\nax = sns.heatmap(corr.sort_values(by=['Height'],ascending=False), ax=ax,annot=True,cbar=True,cmap=\"YlGnBu\")\nax.set_xticklabels(ax.xaxis.get_ticklabels(), fontsize=10)\nax.set_yticklabels(ax.yaxis.get_ticklabels(), fontsize=10)\n\nplt.show()","172e0245":"Bundesliga=[\"1. FC K\u00f6ln\", \"1. FSV Mainz 05\", \"DSC Arminia Bielefeld\", \"\tBorussia Dortmund\", \"FC Augsburg\", \"FC Bayern M\u00fcnchen\", \"FC Schalke 04\",\n    \"Eintracht Frankfurt\", \"Hertha BSC\", \"Bayer 04 Leverkusen\", \"Borussia M\u00f6nchengladbach\", \"RB Leipzig\",\"SC Freiburg\",\n    \"TSG 1899 Hoffenheim\",\"1. FC Union Berlin\", \"VfB Stuttgart\", \"VfL Wolfsburg\", \"SV Werder Bremen\"]\n\n\nOP(defending[defending['Club'].isin(Bundesliga)].reset_index(drop=True),'Important STAT',0.1)","36dcc8f1":"OP(fifa,'Total Stats',0.1)","16baafcd":"GK.describe()","396d1de7":"X=GK.copy()\n\ndel X[\"Name\"]\ndel X['Club']\ndel X['Nationality']\ndel X['D\/W']\ndel X['A\/W']\ndel X['foot']\ndel X['BP']\n\ngk=X.copy()\n\nX = pd.get_dummies(X, drop_first=True)","fc3a87a4":"from sklearn.preprocessing import StandardScaler\n\nSS = StandardScaler()\nX = pd.DataFrame(SS.fit_transform(X),columns=X.columns)","ae85de25":"# now the similarity of the data will be investigated by applying supervised clustring first and then unsupervised\nfrom sklearn.cluster import KMeans\nkmeans=KMeans(n_clusters=4).fit(X)\nlabels = kmeans.predict(X)\ncentroids = kmeans.cluster_centers_\nGK[\"Kmeans label\"]=labels\n\ngk[\"Kmeans label\"]=labels\n","3a38bcbf":"GK[GK['Club']==\"FC Bayern M\u00fcnchen\"]","67b2d07e":"KM=GK[['Name','OVA','Nationality','Club']][GK['Kmeans label']==1].reset_index(drop=True)\nKM.head(15)","b8d3dd3d":"from sklearn.cluster import DBSCAN\nclustering = DBSCAN(eps=5, min_samples=2).fit(X)\nclustering.labels_\nGK['DSBCAN label']=clustering.labels_\ngk['DSBCAN label']=clustering.labels_","248513d0":"GK['DSBCAN label'].value_counts()","e366fd10":"GK[['Name','OVA','Nationality','Club','DSBCAN label']][GK['DSBCAN label']>=0].reset_index(drop=True)","41db9047":"kmeans=KMeans(n_clusters=20).fit(X)\nlabels = kmeans.predict(X)\ncentroids = kmeans.cluster_centers_\nGK[\"Kmeans label\"]=labels\n\ngk[\"Kmeans label\"]=labels\n","f009a790":"GK[['Name',\"Kmeans label\"]][GK['Club']==\"FC Bayern M\u00fcnchen\"]","61c878e4":"GK[['Name','OVA','Nationality','Club']][GK[\"Kmeans label\"]==8].reset_index(drop=True)","92f69094":"del GK['DSBCAN label']\nGK[\"Kmeans label\"]=GK[\"Kmeans label\"].astype(str)","c2ee7578":"GK_Kmeans=pd.concat([GK,pd.get_dummies(GK[\"Kmeans label\"])], axis = 1)","95a2ad0a":"GK_Kmeans.head(2)","737fca8a":"corr = GK_Kmeans.corr().loc[['8'],:].T\n\nfig, ax = plt.subplots(figsize=(7,17))\n\nax = sns.heatmap(corr.sort_values(by=['8'],ascending=False), ax=ax,annot=True,cbar=True,cmap=\"seismic\")\nax.set_xticklabels(ax.xaxis.get_ticklabels(), fontsize=10)\nax.set_yticklabels(ax.yaxis.get_ticklabels(), fontsize=10)\n\nplt.show()","b48c152e":"goalkeeper = GK[['GK Diving','GK Handling','GK Kicking','GK Positioning','GK Reflexes','Height']]\ncorr=goalkeeper.corr().loc[:,['Height']].T\ndel corr['Height']\nfig, ax = plt.subplots(figsize=(10,2))\n\nax = sns.heatmap(corr.sort_values(by=['Height'],axis=1,ascending=False), ax=ax,annot=True,cbar=True,cmap=\"rocket_r\")\nax.set_xticklabels(ax.xaxis.get_ticklabels(), fontsize=10)\nax.set_yticklabels(ax.yaxis.get_ticklabels(), fontsize=10)\n\nplt.show()","e00ed466":"Benford=pd.DataFrame()\ncols=['fifa','midfield','sides','attacking','defending']\nfor column in cols:\n    Benford[column]=vars()[column].sum(axis =1, skipna = True).astype(int).astype(str).str[0]\n\n\nBenford.head()","27eef000":"m,n=0 ,0\nfig, ax = plt.subplots(2,3,figsize=(10,10))\n\nfor column in cols:\n    Benford[column].value_counts().sort_index().plot(kind='bar',figsize=(12,6),title=column,ax=ax[n][m])\n    m+=1\n    if m==3:\n        n+=1\n        m=0","ad22c275":"now we have only 1743 gold players out of more than 17000, meaning gold players present around 10% of all players.\nNext I will check the info to check the data types if it is correct","84b412a7":"The result shows it is highly related to short passing, ball control and reactions","a1057271":"Weight and Height are in pounds feets and which contain a nun numeric values as describtion for unit which I do not understand so I will conver it to KGs and CMs, weak foot and skill move are containg a star semple and all should be clean and correct by the next function","f2a76576":"to explain the above loop the vars() function will convert the assigned string to a variable that will equal the data frame where the position equal the string, to check the result I will check the head of the position LWB data frame","acbb9537":"As I have chosse my defenders from Bundesliga because I like Neuer, it is time to find more details about GoalKeepres","4a2b7d77":"the graph shows both of them effect heading accurecy, DRI , Balance, Agility, Strength and movement\n but what is intresting to me is highet have more impact on Balance than weight, and height effects positining!\n ","916d409f":"the relation between midfield players and there rating is never clear to me so I will look for an answer by using heat correlation map ","23fd41cd":"it is interisting to see most of the data is either having a normal distribution or left skewness","6d8d3702":"Droping all the columns I think it is not usefull to my analyze ","7e85f112":"after seeing the results, I have decided to use Rashford, Mertinz, Di Maria, Bruno Fernandes , Vidal, Naingolan, N. Mukiele, L.Hern\u00e1ndez,L. Klostermann B,Alex Telles,Neuer","21c23864":"similer function but it will take the most frequent object based on both rating and position ","40cacb01":"finally I want to Know what effect these clusters","afba6032":"it almost has no impact!","654ea365":"The panelty it is not important as the value by it self but its value out of all other columns value since z-score value will be calculated\nNow the important stats for definding will be diffrent so I will repeat the steps above\nTo me, I put my RB or LB on the instrecture stay back so thier passes are not important","e2ec0ac5":"my guess was not correct since some of the values ara missing while other have numeric so I am going to fill the missing data for all columns by the function below","8c9dcdcb":"my guess for the missing values that they return to Goalkeeprs so I will check it out","4f1d1b22":"The final thing I want to test is Benford\u2019s law (also called the first digit law) states that the leading digits in a collection of data set are probably going to be small. For example, most numbers in a set (about 30%) will have a leading digit of 1, when the expected probability is 11.1% (i.e. one out of nine digits). This is followed by about 17.5% starting with a number 2. This is an unexpected phenomenon; If all leading numbers (0 through 9) had equal probability, each would occur 11.1% of the time. To put it simply, Benford\u2019s law is a probability distribution for the likelihood of the first digit in a set of numbers","6d96ebb6":"Checking again the columns info to check the corrections and the missing values","cac9945d":"Below I will create a function that find players with a the probability of being among the top 5% of the distribution \nThe method based on the Z-Score test  and it is used to find the outlayers among the destribution,The z-score of an observation quantifies how many standard deviations the observation is away from the population mean, \nTo find the value of Z, z=((x-mean)\/std) and it is probabilty and doing the inverse to check.\n","6f017295":"from the dataframe I see Neuer is in cluster three, I will check other goal keeprs in his cluster","4577fedc":"The result shows that Griezmann and Tells could be realy good midfield players and E.can is a middle player who was assigned to CB position by mistake","c1d680d9":"While going throw the results of Over Power players I have  seen some players assigned to wrong positions such as Ndidi,\nanyhow I am confenced there are more players assigned to the wrong position, so I will check again for  middle players with Gullit style ","ad55b60a":"The dataframe above had all the good goal keeprs  but I need more details so I will Apply DSBCAN to get a better result since the number of clusters is not important","34ecca69":"I Will check how many clusters where found for goal keepers","5b52516f":"it shows that Highet and Weight are not in the correct format so is weak foot and skill movement so I will check the data head to see why!","3c66e228":"To get benefit from the last two functions, I am looking for  players with Gullit style meaning midfield players with high total stats","94c3124f":"checking for null values expecting it will be five which are in the club name and I don't belive it worth fixing","87166cd9":"Now I will create new field in attacking dataframe that will find the sum of columns that present the stats I am more concern in my strickers with penelty value based on the stat important to me","9417d186":"I See now Neuer Is in cluster 19 so I Will check who else on it","def45984":"I am interested in only gold players so I will filter out all the players which are not by taking all players with a rating above75","87365d59":"Assuming there is four types of goal keeprs I will check which players are more similer to Neuer by using Kmeans clustring","df22f13c":"Now that does make sense to me since all these goal keeprs are very good","2db1eb3d":"Neuer Did not apper in the small clusters so I will repeat KMeans with 20 clusters ","ce4b520b":"I want to check if thre is a relation between the weight and highet of the defender and his stats","e8de499a":"to chek if the new data frames in the correct format I will count how many players in each positions in sides then will check its head","2af08078":"it is intresting to see passing, skill and physical having an impact on cluster 8 or as I call it Neuer cluster but not highet! so I will check the effect of highet","ff61d21d":"now I will create multiple data frames based on each position","8e0beb37":"The result show that the theorey is not applicable may be because the data is not randomly selected","111483c6":"now I will create six more data frames that will contain attacking as ST and CF, midfield containg CM, CDM and CAM , defenders containg CB,RB,RWB,LB and LWB ,leftfield containg LM and LW, rightfield containg RM and RW , and finally sides containg right and left sides","35b8953b":"I am more intrested in defenders from Bundlisga so I will be able to have Nuer as my GoalKeeper, the code below will tackel this problem","87ee4cca":"from this data,I am trying to build an over powered team suitable for my playing style and my budget as I will try to understand some of players stats and rating  ","5bdb9d16":"at the moment I am intrested to check the central limit theorey,it states that, when independent random variables are added, their sum tends toward a normal distribution (commonly known as a bell curve), even if the original variables themselves are not normally distributed. In more precise terms, given certain conditions, the arithmetic mean of a sufficiently large number of iterates of independent random variables \u2014 each with a well-defined (finite) expected value and finite variance \u2014 will be approximately normally distributed, regardless of the underlying distribution. "}}