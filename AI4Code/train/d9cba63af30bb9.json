{"cell_type":{"6410d037":"code","404b2683":"code","dd155f1a":"code","1a4bff30":"code","b5880f91":"code","619c9eb0":"code","8cbd721a":"code","1d0170ec":"code","0b6f0439":"code","32fc71db":"markdown","53734312":"markdown","86724325":"markdown"},"source":{"6410d037":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# The input for this competition is also available in BigQuery\n# Using BigQuery will allow you to easily scale to large datasets\nfrom google.cloud import bigquery\nfrom bq_helper import BigQueryHelper\n\n# Any results you write to the current directory are saved as output.","404b2683":"query = \"\"\"\nSELECT * FROM (\n    SELECT\n        fare_amount,\n        extract(DAYOFWEEK from pickup_datetime) as day_of_week,\n        ABS(dropoff_longitude - pickup_longitude) as londiff,\n        ABS(dropoff_latitude - pickup_latitude) as latdiff,\n        passenger_count\n    FROM\n      `cloud-training-demos.taxifare_kaggle.train`\n) \nWHERE \n  -- do some quality control\n  londiff < 5.0 AND latdiff < 5.0 \n  AND fare_amount > 1 AND fare_amount < 200\n  -- sample the dataset for now. can remove the sampling later\n  AND RAND() < 0.001\n        \"\"\"\nbq_assistant = BigQueryHelper(\"cloud-training-demos\", \"taxifare_kaggle\")\nfull_df = bq_assistant.query_to_pandas(query)","dd155f1a":"full_df.describe()","1a4bff30":"full_df = full_df.sample(frac=1.0) # shuffle\nntrain = (int)(len(full_df)*0.8)\neval_df = full_df[ntrain:]\ntrain_df = full_df[:ntrain]\ntrain_df.describe()","b5880f91":"eval_df.describe()","619c9eb0":"train_df.head(n=3)","8cbd721a":"import tensorflow as tf\nimport tensorflow.feature_column as fc\n\n# 3 input functions to feed data\n# one each for train, eval and predict\ntrain_input_fn = tf.estimator.inputs.pandas_input_fn(\n    x=train_df,\n    y=train_df['fare_amount'],\n    batch_size=128,\n    num_epochs=None, # indefinitely\n    shuffle=True\n)\neval_input_fn = tf.estimator.inputs.pandas_input_fn(\n    x=eval_df, \n    y=eval_df['fare_amount'],\n    num_epochs=1,\n    shuffle=False\n)\ndef serving_input_fn():\n    ph = {\n        'day_of_week' : tf.placeholder(tf.int32, [None]),\n        'londiff': tf.placeholder(tf.float32, [None]),\n        'latdiff': tf.placeholder(tf.float32, [None]),\n        'passenger_count': tf.placeholder(tf.int32, [None])\n    }\n    features = ph # no transformations\n    return tf.estimator.export.ServingInputReceiver(features, ph)\n\n# train-and-evaluate loop. this code works distributed if submitted to Cloud ML Engine\ndef train_and_evaluate(outdir, num_train_steps):\n    feature_cols = [\n        fc.categorical_column_with_identity('day_of_week', num_buckets=8), # 0-7\n        fc.numeric_column('londiff'),\n        fc.numeric_column('latdiff'),\n        fc.numeric_column('passenger_count'),\n    ]\n    estimator = tf.estimator.LinearRegressor(\n        feature_columns=feature_cols, \n        model_dir=outdir\n    )\n    train_spec = tf.estimator.TrainSpec(\n        input_fn = train_input_fn,\n        max_steps = num_train_steps\n    )\n    exporter = tf.estimator.LatestExporter('exporter', serving_input_fn)\n    eval_spec = tf.estimator.EvalSpec(\n        input_fn = eval_input_fn,\n        start_delay_secs = 10, # start evaluating after N seconds\n        throttle_secs = 60, # evaluate every N seconds\n        exporters = exporter\n    )\n    tf.estimator.train_and_evaluate(estimator, train_spec, eval_spec)","1d0170ec":"import shutil, os\ntf.logging.set_verbosity(tf.logging.INFO)\nOUTDIR='.\/taxi_trained'\nshutil.rmtree(OUTDIR, ignore_errors = True) # start fresh each time\ntrain_and_evaluate(OUTDIR, num_train_steps = 2000)","0b6f0439":"!ls taxi_trained","32fc71db":"## Simple TensorFlow LinearRegressor","53734312":"## Read data from BigQuery","86724325":"## Split the dataset using Pandas"}}