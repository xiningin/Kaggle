{"cell_type":{"f7ffc03b":"code","e48a77b4":"code","3f8e31a2":"code","cde05fbb":"code","da8b4048":"code","ad802921":"code","aaa03b66":"code","bab7d01a":"code","f4868521":"code","ab56ac1d":"code","064a4f1f":"code","b42550af":"code","91f84edf":"code","17131c04":"code","e487956e":"code","8538949f":"code","8b62fb1f":"code","f78ef5c9":"code","5c4eb615":"code","dbe28862":"code","1bff5f07":"code","d011baf9":"code","aff2e257":"code","38e5e0ae":"code","dc756639":"code","6d75dd74":"code","f206de7d":"code","d0a6a942":"code","21ed98f3":"code","40e37ff5":"code","8899eb4b":"code","5b654939":"code","9d17c268":"code","ba543abe":"code","4ca2fac2":"code","30bb5154":"code","d8a1374a":"code","8bd5599a":"code","f5faccf3":"code","f62c88ca":"code","ed30756f":"code","8c1992b7":"code","45f8a96e":"code","f26d74ea":"code","0cd35170":"code","218f420d":"code","7925e921":"code","5bc8d0de":"code","51b30b06":"code","8a57527b":"code","234bb56a":"code","21b9ae87":"code","9f48cf27":"code","63506fd9":"code","b8329aef":"code","47d16c29":"code","f10d3541":"code","79a89340":"code","db2b7b5b":"code","ff07cda0":"code","2b4c4c11":"markdown","2665a94f":"markdown","d2276f0e":"markdown","daa702e9":"markdown","4b6858f5":"markdown","cb048e5e":"markdown","f0f6123e":"markdown","bec448b3":"markdown","6933381d":"markdown","c2189876":"markdown","35f4075c":"markdown","42bd9b6f":"markdown","1aeab006":"markdown","0432b3ae":"markdown","ed1f38a2":"markdown","cbf135c8":"markdown","e697d386":"markdown","ff52d655":"markdown","891795b7":"markdown","f0a10503":"markdown","dd082bd0":"markdown","4f1ee8bc":"markdown","2d796813":"markdown","497569b5":"markdown","a79e5e53":"markdown","5d238ad8":"markdown"},"source":{"f7ffc03b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline \nsns.set()","e48a77b4":"summer = pd.read_csv('..\/input\/olympic-games\/summer.csv')","3f8e31a2":"winter = pd.read_csv('..\/input\/olympic-games\/winter.csv')","cde05fbb":"countries = pd.read_csv('..\/input\/olympic-games\/dictionary.csv')","da8b4048":"summer.head()","ad802921":"summer.info()","aaa03b66":"winter.head()","bab7d01a":"winter.info()","f4868521":"countries.head()","ab56ac1d":"countries.info()","064a4f1f":"# Listing all of the missing data in the 'countries' dataframe\ncountries[countries.isnull().any(axis = 1)].reset_index(drop=True)","b42550af":"summer.head()","91f84edf":"# Modify the full name of the athletes in Winter and Summer editions\nsummer['Athlete'] = summer['Athlete'].str.split(', ').str[::-1].str.join(' ')\nsummer['Athlete'] = summer['Athlete'].str.title()\nsummer.head()","17131c04":"# Adding the countries column to our dataframe\nsummer = summer.merge(countries,left_on='Country',right_on='Code',how='left')\nsummer.head() ","e487956e":"summer=summer[['Year','City','Sport','Discipline','Athlete','Country_x','Gender','Event','Medal','Country_y']]\nsummer.columns=['Year','City','Sport','Discipline','Athlete','Code','Gender','Event','Medal','Country']\nsummer.head()","8538949f":"# The highest males athletes of all Summer editions \nmale_athlete = summer[summer['Gender']=='Men']['Athlete'].value_counts()[:5]#.index[0] # if i want to return only the highest record\nmale_athlete","8b62fb1f":"# His total number of medals\n# num_of_male_medals = summer[summer['Gender']=='Men']['Athlete'].value_counts()[:1].values[0]\n# num_of_male_medals","f78ef5c9":"# The highest females athletes of all Summer editions \nfemale_athlete = summer[summer['Gender']=='Women']['Athlete'].value_counts()[:5] #.index[0]# if i want to return only the highest record\nfemale_athlete","5c4eb615":"# Her total number of medals\n# num_of_female_medals = summer[summer['Gender']=='Women']['Athlete'].value_counts()[:1].values[0]\n# num_of_female_medals","dbe28862":"summer.head()","1bff5f07":"# Let's discover what does 'Michael Phelps' have of medals  \nsummer[summer.Athlete == 'Michael Phelps']","d011baf9":"top_medals = summer.groupby(['Athlete','Medal'])['Sport'].count().reset_index().sort_values(by='Sport',ascending=False)\ntop_medals","aff2e257":"top_medals = top_medals.drop_duplicates(subset=['Medal'],keep='first')\ntop_medals.columns = [['Athlete','Medal','Count']]\ntop_medals","38e5e0ae":"medals_country = summer.groupby(['Country','Medal'])['Gender'].count().reset_index().sort_values(by='Gender',ascending=False)\nmedals_country = medals_country.pivot('Country','Medal','Gender').fillna(0)\nmedals_country","dc756639":"top_10 = medals_country.sort_values(by='Gold',ascending=False)[:11]\ntop_10","6d75dd74":"top_10.plot.barh(width=0.8,color=['#CD7F32','#FFDF00','#D3D3D3'])\nfig = plt.gcf()\nfig.set_size_inches(12,12)\nplt.title('Medals Distribution Of Top 10 Countries (Summer Olympics)')\nplt.show()","f206de7d":"fig,ax=plt.subplots(1,2,figsize=(18,15))\nmen=summer[summer['Gender']=='Men']\nmen=men.groupby(['Athlete','Medal'])['Country'].count().reset_index().sort_values(by='Country',ascending=False)\nmen=men[men['Athlete'].isin(summer['Athlete'].value_counts().index[:15])]\nmen=men.pivot('Athlete','Medal','Country')\nmen.plot.barh(width=0.8,color=['#CD7F32','#FFDF00','#D3D3D3'],ax=ax[0])\nax[0].set_title('Best Male Athletes')\nax[0].set_ylabel('Athlete')\n\nwomen=summer[summer['Gender']=='Women']\nwomen=women.groupby(['Athlete','Medal'])['Country'].count().reset_index().sort_values(by='Country',ascending=False)\nwomen=women[women['Athlete'].isin(summer['Athlete'].value_counts().index[:30])]\nwomen=women.pivot('Athlete','Medal','Country')\nwomen.plot.barh(width=0.8,color=['#CD7F32','#FFDF00','#D3D3D3'],ax=ax[1])\nax[1].set_title('Best Female Athletes')\nax[1].set_ylabel('')\nplt.show()","d0a6a942":"summer.head()","21ed98f3":"winter.head()","40e37ff5":"countries.head()","8899eb4b":"# Now you can easily merge the two dataframes\nolympics = pd.concat([summer, winter], keys = [\"Summer\", \"Winter\"], names = [\"Edition\"]).reset_index().drop(columns = \"level_1\")\nolympics","5b654939":"olympics.info()","9d17c268":"olympics.rename(columns = {\"Country_x\":\"Code\", \"Country_y\": \"Country\"}, inplace = True)","ba543abe":"# Finding the missing data in the new dataframe\nolympics.loc[olympics.Country.isnull()]","4ca2fac2":"# List all of the old countries' codes\nolympics.loc[olympics.Country.isnull()].Code.value_counts()","30bb5154":"# Get all of the indicies of the old countries\nold_indices = olympics.loc[olympics.Country.isnull()].Code.value_counts().index\nold_indices","d8a1374a":"# Create a mapper to match the old countries' codes with their corresponding names\nmapper = pd.Series(index=old_indices, name = \"Country\", data = [\"Soviet Union\", \"East Germany\", \"Romania\", \"West Germany\", \"Czechoslovakia\",\n                               \"Yugoslavia\", \"Unified Team\", \"Unified Team of Germany\", \"Mixed teams\", \"Serbia\",\n                              \"Australasia\", \"Russian Empire\", \"Montenegro\", \"Trinidad and Tobago\", \"Bohemia\", \n                              \"West Indies Federation\", \"Singapore\", \"Independent Olympic Participants\"])\n\nmapper","8bd5599a":"# Let's get all the missing data indicies to map them to countries\nmissing_indices = olympics.loc[olympics.Country.isnull()].index\nmissing_indices","f5faccf3":"# Now, we need to map the names\nolympics.loc[missing_indices, \"Code\"].map(mapper)","f62c88ca":"# Filling the missing data with the new names\nolympics.Country.fillna(olympics.Code.map(mapper), inplace = True)","ed30756f":"olympics.loc[missing_indices]","8c1992b7":"# Double-check for any missing data\nolympics[olympics.Code.isna()]","45f8a96e":"# Drop these missing records\nolympics.dropna(subset = [\"Code\"], inplace = True)","f26d74ea":"# Reseting indicies to get rid of the deleted records\nolympics.reset_index(drop = True, inplace = True)","0cd35170":"olympics.info()","218f420d":"olympics['Medal'] = olympics['Medal'].astype(\"category\")","7925e921":"olympics.info()","5bc8d0de":"olympics.Medal.sort_values()","51b30b06":"olympics.Medal.cat.set_categories([\"Bronze\", \"Silver\", \"Gold\"], ordered = True, inplace = True)","8a57527b":"olympics.Medal.sort_values()","234bb56a":"olympics","21b9ae87":"olympics.Country.value_counts()","9f48cf27":"top_10 = olympics.Country.value_counts().nlargest(10)\ntop_10","63506fd9":"top_10.plot(kind = \"barh\", fontsize = 15, figsize=(12,8))\nplt.title(\"Top 10 Countries by Medals\", fontsize = 15)\nplt.ylabel(\"Medals\", fontsize = 14)\nplt.show()","b8329aef":"# Gathering the top10 data\nolympics_10 = olympics[olympics.Country.isin(top_10.index)]\nolympics_10","47d16c29":"plt.figure(figsize=(20,10))\nsns.set(font_scale=1.5, palette= \"dark\")\nsns.countplot(data = olympics_10, x = \"Country\", order = top_10.index)\nplt.title(\"Top 10 Countries by Medals\", fontsize = 20)\nplt.show()","f10d3541":"plt.figure(figsize=(20,10))\nsns.set(font_scale=1.5, palette= \"dark\")\nsns.countplot(data = olympics_10, x = \"Country\", hue = \"Edition\", order = top_10.index)\nplt.title(\"Top 10 Countries by Medals\", fontsize = 20)\nplt.show()","79a89340":"plt.figure(figsize=(20,10))\nsns.set(font_scale=1.5, palette= \"dark\")\nsns.countplot(data = olympics_10, x = \"Edition\", hue = \"Country\", hue_order = top_10.index)\nplt.title(\"Top 10 Countries by Medals\", fontsize = 20)\nplt.show()","db2b7b5b":"plt.figure(figsize=(20,10))\nsns.set(font_scale=1.5, palette= \"dark\")\nsns.countplot(data = olympics_10, x = \"Country\", hue = \"Medal\", order = top_10.index,\n              hue_order = [\"Gold\", \"Silver\", \"Bronze\"], palette = [\"gold\", \"silver\", \"brown\"])\nplt.title(\"Top 10 Countries by Medals\", fontsize = 20)\nplt.show()","ff07cda0":"plt.figure(figsize=(20,10))\nsns.set(font_scale=1.5, palette= \"dark\")\nsns.countplot(data = olympics_10, x = \"Medal\", hue = \"Country\", \n              order = [\"Gold\", \"Silver\", \"Bronze\"], hue_order= top_10.index)\nplt.title(\"Top 10 Countries by Medals\", fontsize = 20)\nplt.show()","2b4c4c11":"##### Q. Split the total medals of Top 10 Countries into Gold, Silver, Bronze","2665a94f":"##### Remove rows from olympics where the Country code is unknown","d2276f0e":"===========","daa702e9":"==========","4b6858f5":"#### 1] Data Merging","cb048e5e":"- You can find the full project & the dataset at: https:\/\/www.kaggle.com\/the-guardian\/olympic-games\n- In this project, I will consider these topics:\n    - Data Cleaning & Manipulation\n    - Data Grouping & Aggregation\n    - Data Reshaping & Pivoting\n    - Data Merging, Joining, & Concatenation","f0f6123e":"#### 3] Data Analysis & Visualization (EDA)","bec448b3":"##### Q. Which are the most successful countries in both Summer and Winter editions?\n- What are the __Top 10__ Countries by __total medals__?\n- __Split__ the total medals of Top 10 Countries into __Summer \/ Winter__. Are there typical Summer\/Winter Games Countries? \n- __Split__ the total medals of Top 10 Countries into __Gold, Silver, Bronze__. ","6933381d":"##### Q. Find the highest athletes regarding to each medal type in the Summer editions","c2189876":"### Inspecting Datasets","35f4075c":"## Olympic Sports and Medals, 1896-2014\nWhich countries and athletes have won the most medals at the Olympic games?","42bd9b6f":"##### Q. What are the Top 10 Countries by total medals?","1aeab006":"{'URS': 'Soviet Union',\n 'GDR': 'East Germany',\n 'ROU': 'Romania',\n 'FRG': 'West Germany',\n 'TCH': 'Czechoslovakia',\n 'YUG': 'Yugoslavia',\n 'EUN': 'Unified Team',\n 'EUA': 'Unified Team of Germany',\n 'ZZX': 'Mixed teams',\n 'SRB': 'Serbia',\n 'ANZ': 'Australasia',\n 'RU1': 'Russian Empire',\n 'MNE': 'Montenegro',\n 'TTO': 'Trinidad and Tobago',\n 'BOH': 'Bohemia',\n 'BWI': 'West Indies Federation',\n 'SGP': 'Singapore',\n 'IOP': 'Independent Olympic Participants'}","0432b3ae":"### Proposed Questions\n\n- ***Analysing all Summer editions data***\n    - Can you find the __highest__ male \/ female __athletes__ of all time in the Summer editions?\n    - Find the highest __athletes__ regarding to each __medal type__ in the Summer editions?\n\n- ***Which are the most successful countries in both Summer and Winter editions?***\n    - What are the __Top 10__ Countries by __total medals__?\n    - __Split__ the total medals of Top 10 Countries into __Summer \/ Winter__. Are there typical Summer\/Winter Games Countries? \n    - __Split__ the total medals of Top 10 Countries into __Gold, Silver, Bronze__. \n","ed1f38a2":"##### For some Country Codes, there is no corresponding __full Country Name__ available (e.g. for \"URS\") -> __missing values__ in olympics. Identify these Country Codes and search the Web for the full Country Names. __Replace__ missing values!","cbf135c8":"==========","e697d386":"#### 2] Data Cleaning","ff52d655":"##### Q. Can you find the highest male \/ female athletes of all time in the Summer editions","891795b7":"##### Assign appropriate Column Headers to Country Codes and full Country Names","f0a10503":"- ***Analysing all Summer editions data***\n    - Can you find the __highest__ male \/ female __athletes__ of all time in the Summer editions?\n    - Find the highest __athletes__ regarding to each __medal type__ in the Summer editions?","dd082bd0":"#### Now let's calculate the medals per each country for the best male and females athletes in all of the Summer editions and visualize the results","4f1ee8bc":"##### Q. Split the total medals of Top 10 Countries into Summer \/ Winter. Are there typical Summer\/Winter Games Countries?","2d796813":"### Importing libraries & data","497569b5":"##### Convert the column Medal into an ordered Categorical column (\"Bronze\" < \"Silver\" < \"Gold\")","a79e5e53":"#### ***Final words: If you enjoy my work, please leave a comment and upvote to help me improve my work and if there is any question or feedback, please write to me in the comments section, OSAMA REFAY***","5d238ad8":"# Olympic Games [Data Pre-processing project]"}}