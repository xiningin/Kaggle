{"cell_type":{"5ba0da09":"code","f7ef9c6a":"code","a42e6b89":"code","d26cfc14":"code","f4d4bb3e":"code","384991e7":"code","30975455":"code","e355790f":"code","2c4cab70":"code","2257c7f1":"code","85867433":"code","ac435959":"code","b36a6254":"code","090c6db9":"code","90be4c73":"code","3a7411d2":"code","ebd65423":"code","8ce7a728":"code","b10bc154":"code","e735b7e3":"code","e50b2a8e":"code","ac3f6ce5":"code","a45982f4":"code","f7f493a8":"code","3937499d":"code","404c05ae":"code","2d39bdf5":"code","c74922c8":"code","1d605f69":"code","217e45c0":"code","e917a096":"code","33c02af4":"code","03715c81":"code","0f272c76":"code","f9db41aa":"code","6c466253":"code","be44ac85":"code","634da2ba":"code","60682777":"code","eb4e53d4":"code","bc33aa3e":"code","fb623e0a":"code","75bd9fd5":"code","f2006006":"code","9561485e":"code","f004975c":"code","0dd0d8c3":"code","85ed6693":"code","c8656ed2":"code","9e4d9822":"code","0d93bb83":"code","b9d05682":"code","fcef4a17":"code","0428c21b":"code","53ec67d0":"code","557f3821":"code","d41ba64d":"code","9a6ee7b5":"code","7f94daca":"code","e4a29ec3":"code","6bf3c328":"code","57ce7f96":"code","839d6bab":"code","02063b4d":"code","b6064bc8":"code","f8530297":"code","0e2e53fa":"code","a490438f":"code","f586ad65":"code","d90212cc":"code","ef9e365c":"code","b6cccf86":"code","caaa87e5":"code","f451548b":"code","efb20f22":"code","825c2d01":"code","6eb7ae18":"code","3e85f0a8":"code","7d91de0d":"code","ebd76e69":"code","fe8c8c1f":"code","2fb5923a":"code","ce95fb27":"code","b231a6b1":"code","409da416":"code","54c308ed":"code","f350f82b":"code","bbcb2801":"code","ffa0309d":"code","5b28a58f":"code","33855b5f":"code","fc03c8a1":"code","57ab5d0f":"code","54135d56":"code","6c52eed9":"code","29b09b7f":"code","7db74791":"code","e7837158":"code","78d79b72":"code","657f6307":"code","d1af0146":"code","009d0dad":"code","0d3caf8a":"code","6853a923":"code","ea88d763":"code","85ee09df":"code","e2b0e149":"code","499c918c":"code","d289bc7b":"code","43db87d9":"code","3c62ea65":"code","0cd26b6a":"code","ed32005e":"code","bc5cb56d":"code","7f1d1d96":"code","214d5c08":"code","c6da2570":"code","63c9c099":"code","f7736da6":"code","5056526a":"code","310d54be":"code","3319214f":"code","c4dd6564":"code","3b4432c4":"code","ee13e80e":"code","e520cd0e":"code","fede9c8a":"code","7b9b1937":"code","f522db44":"code","32943a5d":"code","182e892a":"code","f08377e5":"code","69fcc546":"code","d058d91b":"code","859e2a5d":"code","0023b6cb":"code","5409183e":"code","a6129279":"code","ed40205d":"code","e80189b0":"code","f4da68e3":"code","0709af0a":"code","2db76e91":"code","dc4ada26":"code","406e524d":"code","b9c6927b":"code","c226059c":"code","617c9286":"code","d00a354f":"code","da3b9403":"code","d5ec975e":"code","30706da8":"code","62c027c8":"code","fef6fa58":"code","08e5ce52":"code","e291f802":"code","117b5dab":"code","0e4639ce":"code","e7cb288f":"code","bd475241":"code","d692fa78":"code","a0c3497d":"code","3455cf10":"code","4951bfee":"code","dcc0ece2":"code","3b295058":"code","8a2a89c6":"code","9ba433de":"code","469f90f5":"code","2617f80f":"code","84e9ac27":"code","cf6db47d":"code","b9da1a43":"code","e1109a4f":"code","f89d38d3":"code","4f2219cd":"code","2b4d16ba":"code","0e5add69":"code","0d995df1":"code","e7228c79":"code","964f102e":"code","4ba6e3f0":"code","b1460215":"code","919d6fe3":"code","78f70924":"code","c69c39a2":"code","b83d3905":"markdown","8cbb8e0a":"markdown","d7321349":"markdown","46fe8b16":"markdown","c2586eb3":"markdown","900b7f4e":"markdown","9b5143da":"markdown","aba5b547":"markdown","aa4e80f0":"markdown","0810d35b":"markdown","860bc8ad":"markdown","6dca846f":"markdown","8751e3e6":"markdown","95ccc1dc":"markdown","b82fcdd1":"markdown","dcbf683a":"markdown","05b50f15":"markdown","8bf96ab7":"markdown","d15fcccf":"markdown","7c3fc0f2":"markdown","9df63d45":"markdown","2b97d79d":"markdown","f19b9f38":"markdown","76135e45":"markdown","d640301c":"markdown","e00c2cf8":"markdown","6b1870e0":"markdown","1b77bea8":"markdown","2f9f5800":"markdown","0b4743b4":"markdown","605596fc":"markdown","8c4bd047":"markdown","26bac066":"markdown","60368709":"markdown","3d76ccd1":"markdown","7bc27ba1":"markdown","e4774a19":"markdown","d5a70822":"markdown","b14add21":"markdown","0af8f3c8":"markdown","08415166":"markdown","4d2adcff":"markdown","1c88821b":"markdown","a8f7d417":"markdown","7170d195":"markdown","8936d934":"markdown","f15ee787":"markdown","1699758c":"markdown","f5976d7a":"markdown","8c9633a4":"markdown","3512761a":"markdown","0b8fcd19":"markdown","a19be3d4":"markdown","ad7edec9":"markdown","d94b5bd0":"markdown","ef846082":"markdown","19590341":"markdown","a826d126":"markdown","1efae2da":"markdown","8669b6e4":"markdown","cd3b409d":"markdown","72c242bc":"markdown","7a3f8d2d":"markdown","03554404":"markdown","ba584d95":"markdown","1f7c5e8b":"markdown","a3f470c8":"markdown","18dd30aa":"markdown","82d111a7":"markdown","183e30af":"markdown","2f89e3b7":"markdown","d50f54d2":"markdown","1ca40862":"markdown","7c061bc6":"markdown","69dbe2ee":"markdown"},"source":{"5ba0da09":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","f7ef9c6a":"pd.set_option('display.max_columns',None)\npd.set_option('display.max_rows',None)\npd.set_option('display.float_format',lambda x:'%.3f' % x)\npd.set_option('display.width',500)","a42e6b89":"df_=pd.read_csv('..\/input\/hitters\/Hitters.csv')","d26cfc14":"df=df_.copy()","f4d4bb3e":"df.sample(10)","384991e7":"print(\"The dataset has {} rows and {} columns.\".format(df.shape[0],df.shape[1]),end=\"\\n\\n\")\nprint(\"Names of variables in the dataset:\" )\nfor col in df.columns:\n      print(col,end=\"  \")\nprint(end=\"\\n\\n\")\nprint(\"Index information in the dataset:\" )\nprint(df.index,end=\"\\n\\n\")\nprint(\"Data type of variables in dataset :\")\nprint(df.dtypes,end=\"\\n\\n\")\nprint(\"Missing values of variables in the dataset: \")\nprint(df.isnull().sum(),end=\"\\n\\n\")\nprint(\"The total number of missing values in the dataset: \")\nprint(df.isnull().sum().sum(),end=\"\\n\\n\")\nprint(\"Memory usage of label values (index\/columns) in the dataset: \" )\nprint(df.memory_usage())","30975455":"base_df_columns=df.columns.values\nbase_df_columns","e355790f":"def grab_col_names(dataframe,cat_th=10,car_th=20):\n    # Categorical Variables\n    \n    cat_cols=[i for i in dataframe.columns if dataframe[i].dtypes=='O']\n    num_but_cat=[i for i in dataframe.columns if dataframe[i].dtypes!='O' and dataframe[i].nunique()<cat_th]\n    cat_but_car=[i for i in dataframe.columns if dataframe[i].dtypes=='O' and dataframe[i].nunique()>car_th]\n    cat_cols=cat_cols+num_but_cat\n    cat_cols=[i for i in cat_cols if i not in cat_but_car]\n    \n    # Continuous Variables\n    \n    num_cols=[i for i in dataframe.columns if dataframe[i].dtypes!='O']\n    num_cols=[i for i in num_cols if i not in num_but_cat]\n    \n    print('Number of Observations : {}'.format(dataframe.shape[0]))\n    print('Number of Variables    : {}'.format(dataframe.shape[1]))\n    print('Number of Categorical Variables : {}'.format(len(cat_cols)))\n    print('Number of Numerical Variables : {}'.format(len(num_cols)))\n    print('Number of Numerical but Categorical Variables : {}'.format(len(num_but_cat)))\n    print('Number of Categorical but Cardinal Variables : {}'.format(len(cat_but_car)))\n    \n    return cat_cols,num_cols,cat_but_car ","2c4cab70":"cat_cols,num_cols,cat_but_car=grab_col_names(df)\nprint(end='\\n\\n')\nprint('Categorical Variables :',cat_cols,end='\\n\\n')\nprint('Continuous Variables  :',num_cols,end='\\n\\n')\nprint('Categorical but Cardinal  Variables :',cat_but_car,end='\\n\\n')","2257c7f1":"for i in cat_cols:\n    print('Unique class number of ',i,':'+str(df[i].nunique()))","85867433":"for i in cat_cols:\n    print('Categorical Veriables : ', i,end='\\n\\n')\n    print(df[i].value_counts(),end='\\n\\n')\n    df[i].value_counts().plot(kind='pie',y='points',autopct='%.1f')\n    plt.show()","ac435959":"print(df['League'].value_counts().index[0]+' total number of players in the league: '+str(df['League'].value_counts()[0]))\nprint(df['League'].value_counts().index[1]+' total number of players in the league: '+str(df['League'].value_counts()[1]))","b36a6254":"print(df['League'].value_counts().index[0]+' total number of main players in the league   : ' +str(9*14))\nprint(df['League'].value_counts().index[0]+' total number of substitutes in the league    : '+ \\\n      str(df['League'].value_counts()[0]-9*14),end='\\n\\n')\nprint(df['League'].value_counts().index[1]+' total number of main players in the league   : ' +str(9*12))\nprint(df['League'].value_counts().index[1]+' total number of substitutes in the league    : '+ \\\n      str(df['League'].value_counts()[1]-9*12),end='\\n\\n')","090c6db9":"len(df.loc[(df['League']=='A') & (df['NewLeague']=='A')])","90be4c73":"len(df.loc[(df['League']=='N') & (df['NewLeague']=='N')])","3a7411d2":"A_to_N_index=df.loc[(df['League']=='A') & (df['NewLeague']=='N')].index\nprint(A_to_N_index,end='\\n\\n')\nprint('Number of players transferred from league A to league N  :'\\\n      ,len(df.loc[(df['League']=='A') & (df['NewLeague']=='N')]))","ebd65423":"N_to_A_index=df.loc[(df['League']=='N') & (df['NewLeague']=='A')].index\nprint(N_to_A_index,end='\\n\\n')\nprint('Number of players transferred from league N to league A  :'\\\n      ,len(df.loc[(df['League']=='N') & (df['NewLeague']=='A')]))","8ce7a728":"166+137+9+10 == df.shape[0] # Validation","b10bc154":"df.loc[A_to_N_index].agg(['min','max','mean']).compare(df.loc[N_to_A_index].agg(['min','max','mean']))","e735b7e3":"df.loc[df['League']=='A'].agg(['min','max','mean']).compare(df.loc[df['League']=='N'].agg(['min','max','mean']))","e50b2a8e":"df.loc[df['Division']=='E'].agg(['min','max','mean']).compare(df.loc[df['Division']=='W'].agg(['min','max','mean']))","ac3f6ce5":"df[num_cols].describe().T","a45982f4":"for i in df[num_cols]:\n    print(i,'\\n',df[i].quantile([0.90,0.95,0.99,1]))","f7f493a8":"print('Minimum value of Target Variable                  :',df['Salary'].min())\nprint('Maximum value of Target Variable                  :',df['Salary'].max())\nprint('Missing number of observations of Target Variable :',df['Salary'].isnull().sum())\nprint('Number of observations not missing of Target      :',df['Salary'].notnull().sum())","3937499d":"for i in cat_cols:\n    print(df.groupby(i)['Salary'].mean(),end='\\n\\n')\n    df.groupby(i)['Salary'].mean().plot(kind='pie',y='points',autopct='%.1f')\n    plt.show()","404c05ae":"plt.figure(figsize=(16,10))\nsns.heatmap(df.corr(),annot=True)\nplt.show()","2d39bdf5":"df.corr()['Salary'].nlargest(len(df.corr().columns))[1:]","c74922c8":"print('Total number of missing observation units in the dataset : ', df.isnull().sum().sum(),end='\\n\\n')","1d605f69":"NaN_cols={i:[df[i].isnull().sum(),np.round((df[i].isnull().sum()\/df.shape[0])*100, 2)] \\\n              for i in df.columns if df[i].isnull().sum()!=0}\nprint(NaN_cols,end='\\n\\n')\nmissing_values_df=pd.DataFrame(data=NaN_cols.values(),columns=['NaN_Count','Ratio'],index=NaN_cols.keys())\nmissing_values_df","217e45c0":"df.loc[df[list(NaN_cols.keys())].isnull().any(axis=1)]","e917a096":"df.dropna(subset=[list(NaN_cols.keys())[0]],inplace=True)","33c02af4":"df.isnull().sum().sum()","03715c81":"df.index","0f272c76":"df=df.reset_index(drop=True)","f9db41aa":"df.index","6c466253":"df['Salary'].min()","be44ac85":"for i in df.columns:\n    for index in range(df.shape[0]):\n        if df.loc[index,i]==0:\n            df.loc[index,i]+=0.001","634da2ba":"df.groupby(['League','Division'])['AtBat'].mean()","60682777":"df.groupby(['League','Division'])['PutOuts'].mean()","eb4e53d4":"LeagueA_DivisionE_Substitute=(df.loc[(df['League']=='A') & (df['Division']=='E') \\\n                                & (df['AtBat']<df.groupby(['League','Division'])['AtBat'].mean()[0]) \\\n                                & (df['PutOuts']<df.groupby(['League','Division'])['PutOuts'].mean()[0])\n                                & (df['Assists']<df.groupby(['League','Division'])['Assists'].mean()[0])\n                                ])\n\nLeagueA_DivisionW_Substitute=(df.loc[(df['League']=='A') & (df['Division']=='W') \\\n                               & (df['AtBat'] <df.groupby(['League','Division'])['AtBat'].mean()[1]) \\\n                               & (df['PutOuts']<df.groupby(['League','Division'])['PutOuts'].mean()[1])\n                               & (df['Assists']<df.groupby(['League','Division'])['Assists'].mean()[1])\n                               ])\n\nprint('Estimated total number of substitutes under certain conditions in league A  : ', \\\n      len(LeagueA_DivisionE_Substitute)+len(LeagueA_DivisionW_Substitute))\nprint(df['League'].value_counts().index[0]+' total number of substitutes in the league  : ' + \\\n      str(df['League'].value_counts()[0]-9*14),end='\\n\\n')\n\n\nLeagueN_DivisionE_Substitute=(df.loc[(df['League']=='N') & (df['Division']=='E') \\\n                               & (df['AtBat']<df.groupby(['League','Division'])['AtBat'].mean()[2]) \\\n                               & (df['PutOuts']<df.groupby(['League','Division'])['PutOuts'].mean()[2])\n                               & (df['Assists']<df.groupby(['League','Division'])['Assists'].mean()[2])\n                               ])\n\nLeagueN_DivisionW_Substitute=(df.loc[(df['League']=='N') & (df['Division']=='W') \\\n                               & (df['AtBat']<df.groupby(['League','Division'])['AtBat'].mean()[3]) \\\n                               & (df['PutOuts']<df.groupby(['League','Division'])['PutOuts'].mean()[3])\n                               & (df['Assists']<df.groupby(['League','Division'])['Assists'].mean()[3])\n                               ])\n\nprint('Estimated total number of substitutes under certain conditions in league N  : ', \\\n      len(LeagueN_DivisionE_Substitute)+len(LeagueN_DivisionW_Substitute))\nprint(df['League'].value_counts().index[1]+' total number of substitutes in the league : '+ \\\n      str(df['League'].value_counts()[1]-9*12),end='\\n\\n')","bc33aa3e":"Substitute=LeagueA_DivisionE_Substitute+LeagueA_DivisionW_Substitute+ \\\n           LeagueN_DivisionE_Substitute+LeagueN_DivisionW_Substitute\nSubstitute_=[]\nfor i in Substitute.index:\n    Substitute_.append(i)\n\ndel Substitute","fb623e0a":"for i in Substitute_:\n    df.loc[i,'Substitute']='substitute'\ndf['Substitute'].fillna('main_player',inplace=True)\ndf['Substitute'].unique()","75bd9fd5":"print(df['Substitute'].value_counts())\ndf['Substitute'].value_counts().plot(kind='pie',y='points',autopct='%.1f')","f2006006":"df['Experience']=pd.cut(df['Years'],bins=[0,df['Years'].quantile(0.25),df['Years'].quantile(0.66), \n                                                df['Years'].quantile(0.85),df['Years'].max()], \\\n                              labels=['beginner','normal','experienced','senior'])","9561485e":"df['Experience'].unique() # Validation","f004975c":"print(df['Experience'].value_counts())\ndf['Experience'].value_counts().plot(kind='pie',y='points',autopct='%.1f')","0dd0d8c3":"df['Support_']=df['PutOuts']+df['Assists']\n\ndf['Support']=pd.qcut(df['Support_'],4,labels=['bronze','silver','gold','challenger'])\n\ndf.drop(columns=['Support_'],inplace=True)          ","85ed6693":"df['Support'].unique() # Validation","c8656ed2":"print(df['Support'].value_counts())\ndf['Support'].value_counts().plot(kind='pie',y='points',autopct='%.1f')","9e4d9822":"df['Categorical_AtBat']=pd.cut(df['AtBat'],bins=[0,df['AtBat'].quantile(0.25),df['AtBat'].quantile(0.50), \n                                                df['AtBat'].quantile(0.75),df['AtBat'].max()], \\\n                              labels=['low','not_low','medium','high'])","0d93bb83":"df['Categorical_AtBat'].unique() # Validation","b9d05682":"print(df['Categorical_AtBat'].value_counts())\ndf['Categorical_AtBat'].value_counts().plot(kind='pie',y='points',autopct='%.1f')","fcef4a17":"df['Errors_per_AtBat']=df['Errors']\/df['AtBat']\ndf['Errors_per_AtBat']=pd.cut(df['Errors_per_AtBat'],bins=[-1,df['Errors_per_AtBat'].quantile(0.25),df['Errors_per_AtBat'].quantile(0.50), \n                                                df['Errors_per_AtBat'].quantile(0.75),df['Errors_per_AtBat'].max()], \\\n                              labels=['low','not_low','medium','high'])","0428c21b":"df.loc[(df['Categorical_AtBat']=='low') & (df['Errors_per_AtBat']=='low'),'Stability']='reliable_lowBat'\ndf.loc[(df['Categorical_AtBat']=='low') & (df['Errors_per_AtBat']=='not_low'),'Stability']='like_risky_lowBat'\ndf.loc[(df['Categorical_AtBat']=='low') & (df['Errors_per_AtBat']=='medium'),'Stability']='risky_lowBat'\ndf.loc[(df['Categorical_AtBat']=='low') & (df['Errors_per_AtBat']=='high'),'Stability']='unreliable_lowBat'\n\ndf.loc[(df['Categorical_AtBat']=='not_low') & (df['Errors_per_AtBat']=='low'),'Stability']='reliable_NlowBat'\ndf.loc[(df['Categorical_AtBat']=='not_low') & (df['Errors_per_AtBat']=='not_low'),'Stability']='like_risky_NlowBat'\ndf.loc[(df['Categorical_AtBat']=='not_low') & (df['Errors_per_AtBat']=='medium'),'Stability']='risky_NlowBat'\ndf.loc[(df['Categorical_AtBat']=='not_low') & (df['Errors_per_AtBat']=='high'),'Stability']='unreliable_NlowBat'\n\ndf.loc[(df['Categorical_AtBat']=='medium') & (df['Errors_per_AtBat']=='low'),'Stability']='reliable_mediumBat'\ndf.loc[(df['Categorical_AtBat']=='medium') & (df['Errors_per_AtBat']=='not_low'),'Stability']='like_risky_mediumBat'\ndf.loc[(df['Categorical_AtBat']=='medium') & (df['Errors_per_AtBat']=='medium'),'Stability']='risky_mediumBat'\ndf.loc[(df['Categorical_AtBat']=='medium') & (df['Errors_per_AtBat']=='high'),'Stability']='unreliable_mediumBat'\n\ndf.loc[(df['Categorical_AtBat']=='high') & (df['Errors_per_AtBat']=='low'),'Stability']='reliable_highBat'\ndf.loc[(df['Categorical_AtBat']=='high') & (df['Errors_per_AtBat']=='not_low'),'Stability']='like_risky_highBat'\ndf.loc[(df['Categorical_AtBat']=='high') & (df['Errors_per_AtBat']=='medium'),'Stability']='risky_highBat'\ndf.loc[(df['Categorical_AtBat']=='high') & (df['Errors_per_AtBat']=='high'),'Stability']='unreliable_highBat'\n","53ec67d0":"df['Stability'].nunique()==16 # Validation","557f3821":"print(df['Stability'].value_counts())\ndf['Stability'].value_counts().plot(kind='barh')","d41ba64d":"df['Categorical_Runs']=pd.cut(df['Runs'],bins=[-1,df['Runs'].quantile(0.25),df['Runs'].quantile(0.50), \n                                                df['Runs'].quantile(0.75),df['Runs'].max()], \\\n                              labels=['bronze','silver','gold','challenger'])","9a6ee7b5":"df['Categorical_Runs'].unique() # Validation","7f94daca":"print(df['Categorical_Runs'].value_counts())\ndf['Categorical_Runs'].value_counts().plot(kind='pie',y='points',autopct='%.1f')","e4a29ec3":"df['Runs_per_AtBat']=df['Runs']\/df['AtBat']","6bf3c328":"df['Scorer']=pd.cut(df['Runs_per_AtBat'],bins=[-1,df['Runs_per_AtBat'].quantile(0.25),df['Runs_per_AtBat'].quantile(0.50), \n                                                df['Runs_per_AtBat'].quantile(0.75),df['Runs_per_AtBat'].max()], \\\n                     labels=['bronze','silver','gold','challenger'])","57ce7f96":"print(df['Scorer'].value_counts())\ndf['Scorer'].value_counts().plot(kind='pie',y='points',autopct='%.1f')","839d6bab":"df.loc[((df['Scorer']=='bronze') |  (df['Scorer']=='silver')) & \\\n       ((df['Support']=='bronze') | (df['Support']=='silver')),'Player_Type']='Battacker_Bsupporter'\n\ndf.loc[((df['Scorer']=='bronze') | (df['Scorer']=='silver')) & \\\n       (df['Support']=='gold'),'Player_Type']='Battacker_Nsupporter'\n\ndf.loc[((df['Scorer']=='bronze') | (df['Scorer']=='silver')) & \\\n       (df['Support']=='challenger'),'Player_Type']='Battacker_Gsupporter'\n\ndf.loc[(df['Scorer']=='gold') & \\\n       ((df['Support']=='bronze') | (df['Support']=='silver')),'Player_Type']='Nattacker_Bsupporter'\n\ndf.loc[(df['Scorer']=='gold') & \\\n       (df['Support']=='gold'),'Player_Type']='Nattacker_Nsupporter'\n\ndf.loc[(df['Scorer']=='gold') & \\\n       (df['Support']=='challenger'),'Player_Type']='Nattacker_Gsupporter'\n\n\ndf.loc[(df['Scorer']=='challenger') & \\\n       ((df['Support']=='bronze') | (df['Support']=='silver')),'Player_Type']='Hattacker_Bsupporter'\n\ndf.loc[(df['Scorer']=='challenger') & \\\n       (df['Support']=='gold'),'Player_Type']='Hattacker_Nsupporter'\n\ndf.loc[(df['Scorer']=='challenger') & \\\n       (df['Support']=='challenger'),'Player_Type']='Hattacker_Gsupporter'\n","02063b4d":"df['Player_Type'].nunique()==9 # Validation","b6064bc8":"print(df['Player_Type'].value_counts())\ndf['Player_Type'].value_counts().plot(kind='barh')","f8530297":"df['Point_per_Season']=((df['CHits']+df['CHmRun']+df['CRuns']+df['CRBI']+df['CWalks'])\/df['CAtBat']) \/df['Years']","0e2e53fa":"df['Point_per_1986-1987']=((df['Hits']+df['HmRun']+df['Runs']+df['RBI']+df['Walks'])\/df['AtBat'])","a490438f":"for index1,i in enumerate(df['Point_per_Season']):\n    for index2,j in enumerate(df['Point_per_1986-1987']):\n        if j<i-(df['Point_per_Season'].std()) and index1==index2: \n            df.loc[index2,'1986-1987vsAll']='worse'\n        if j>=i and j<i+df['Point_per_Season'].std() and index1==index2: \n            df.loc[index2,'1986-1987vsAll']='some'\n        if j>=i+df['Point_per_Season'].std() and index1==index2:\n             df.loc[index2,'1986-1987vsAll']='better'","f586ad65":"df.loc[df['Years']==1,'1986-1987vsAll']='Unknown'","d90212cc":"print(df['1986-1987vsAll'].value_counts())\ndf['1986-1987vsAll'].value_counts().plot(kind='barh')","ef9e365c":"df['Categorical_Hits']=pd.cut(df['Hits'],bins=[0,df['Hits'].quantile(0.25),df['Hits'].quantile(0.50), \n                                                df['Hits'].quantile(0.75),df['Hits'].max()], \\\n                              labels=['low','not_low','medium','high'])","b6cccf86":"df['Categorical_Hits'].unique() # validation","caaa87e5":"print(df['Categorical_Hits'].value_counts())\ndf['Categorical_Hits'].value_counts().plot(kind='pie',y='points',autopct='%.1f')","f451548b":"df['Categorical_HmRun']=pd.cut(df['HmRun'],bins=[-1,df['HmRun'].quantile(0.25),df['HmRun'].quantile(0.50), \n                                                df['HmRun'].quantile(0.75),df['HmRun'].max()], \\\n                              labels=['low','not_low','medium','high'])","efb20f22":"df['Categorical_HmRun'].unique() # Validation","825c2d01":"print(df['Categorical_HmRun'].value_counts())\ndf['Categorical_HmRun'].value_counts().plot(kind='pie',y='points',autopct='%.1f')","6eb7ae18":"df['Categorical_RBI']=pd.cut(df['Runs'],bins=[-1,df['RBI'].quantile(0.25),df['RBI'].quantile(0.50), \n                                                df['RBI'].quantile(0.75),df['RBI'].max()], \\\n                              labels=['bronze','silver','gold','challenger'])","3e85f0a8":"df['Categorical_RBI'].unique()","7d91de0d":"print(df['Categorical_RBI'].value_counts())\ndf['Categorical_RBI'].value_counts().plot(kind='pie',y='points',autopct='%.1f')","ebd76e69":"df['Categorical_Walks']=pd.cut(df['Walks'],bins=[-1,df['Walks'].quantile(0.25),df['Walks'].quantile(0.50), \n                                                df['Walks'].quantile(0.85),df['Walks'].max()], \\\n                              labels=['bronze','silver','gold','challenger'])","fe8c8c1f":"df['Categorical_Walks'].unique()","2fb5923a":"print(df['Categorical_Walks'].value_counts())\ndf['Categorical_Walks'].value_counts().plot(kind='pie',y='points',autopct='%.1f')","ce95fb27":"df.loc[(df[\"League\"] == \"A\") & (df[\"NewLeague\"] == \"A\"), \"Transfer\"] = \"A_unchanged\"\ndf.loc[(df[\"League\"] == \"N\") & (df[\"NewLeague\"] == \"N\"), \"Transfer\"] = \"N_unchanged\"\ndf.loc[(df[\"League\"] == \"A\") & (df[\"NewLeague\"] == \"N\"), \"Transfer\"] = \"promated_to_N\"\ndf.loc[(df[\"League\"] == \"N\") & (df[\"NewLeague\"] == \"A\"), \"Transfer\"] = \"relagated_to_A\"","b231a6b1":"print(df['Transfer'].value_counts())\ndf['Transfer'].value_counts().plot(kind='pie',y='points',autopct='%.1f')","409da416":"df['Hits_per_AtBat']=df['Hits']\/df['AtBat']","54c308ed":"df['HmRun_per_AtBat']=df['HmRun']\/df['AtBat']","f350f82b":"df['RBI_per_AtBat']=df['RBI']\/df['AtBat']","bbcb2801":"df['Walks_per_AtBat']=df['Walks']\/df['AtBat']","ffa0309d":"df['AtBat_per_CAtBat']=df['AtBat']\/df['CAtBat']","5b28a58f":"df['Hits_per_CHits']=df['Hits']\/df['CHits']","33855b5f":"df['HmRun_per_CHmRun']=df['HmRun']\/df['CHmRun']","fc03c8a1":"df['Runs_per_CRuns']=df['Runs']\/df['CRuns']","57ab5d0f":"df['RBI_per_CRBI']=df['RBI']\/df['CRBI']","54135d56":"df['Walks_per_CWalks']=df['Walks']\/df['CWalks']","6c52eed9":"df['PutOuts_per_AtBat']=df['PutOuts']\/df['AtBat']","29b09b7f":"df['Assits_per_AtBat']=df['Assists']\/df['AtBat']","7db74791":"df['Errors_per_AtBat']=df['Errors']\/df['AtBat']","e7837158":"df['HmRun_per_Hits']=df['HmRun']\/df['Hits']","78d79b72":"df['Runs_per_Hits']=df['Runs']\/df['Hits']","657f6307":"df['RBI_per_Hits']=df['RBI']\/df['Hits']","d1af0146":"df['Walks_per_Hits']=df['Walks']\/df['Hits']","009d0dad":"df['PutOuts_per_Hits']=df['PutOuts']\/df['Hits']","0d3caf8a":"df['Assists_per_Hits']=df['Assists']\/df['Hits']","6853a923":"df['Errors_per_Hits']=df['Errors']\/df['Hits']","ea88d763":"df['Runs_per_HmRun']=df['Runs']\/df['HmRun']","85ee09df":"df['RBI_per_HmRun']=df['RBI']\/df['HmRun']","e2b0e149":"df['Walks_per_HmRun']=df['Walks']\/df['HmRun']","499c918c":"df['Walks_per_HmRun']=df['Walks']\/df['HmRun']","d289bc7b":"df['PutOuts_per_HmRun']=df['PutOuts']\/df['HmRun']","43db87d9":"df['Assists_per_HmRun']=df['Assists']\/df['HmRun']","3c62ea65":"df['Errors_per_HmRun']=df['Errors']\/df['HmRun']","0cd26b6a":"df['RBI_per_Runs']=df['RBI']\/df['Runs']","ed32005e":"df['Walks_per_Runs']=df['Walks']\/df['Runs']","bc5cb56d":"df['PutOuts_per_Runs']=df['PutOuts']\/df['Runs']","7f1d1d96":"df['Assists_per_Runs']=df['Assists']\/df['Runs']","214d5c08":"df['Errors_per_Runs']=df['Errors']\/df['Runs']","c6da2570":"df['Walks_per_RBI']=df['Walks']\/df['RBI']","63c9c099":"df['PutOuts_per_RBI']=df['PutOuts']\/df['RBI']","f7736da6":"df['Assists_per_RBI']=df['Assists']\/df['RBI']","5056526a":"df['Errors_per_RBI']=df['Errors']\/df['RBI']","310d54be":"df['PutOuts_per_Walks']=df['PutOuts']\/df['Walks']","3319214f":"df['Assits_per_Walks']=df['Assists']\/df['Walks']","c4dd6564":"df['Errors_per_Walks']=df['Errors']\/df['Walks']","3b4432c4":"df['Assits_per_PutOuts']=df['Assists']\/df['PutOuts']","ee13e80e":"df['Errors_per_PutOuts']=df['Errors']\/df['PutOuts']","e520cd0e":"df['Errors_per_Assists']=df['Errors']\/df['Assists']","fede9c8a":"df['CHits_per_CAtBat']=df['CHits']\/df['CAtBat']","7b9b1937":"df['CHmRun_per_CAtBat']=df['CHmRun']\/df['CAtBat']","f522db44":"df['CRuns_per_CAtBat']=df['CRuns']\/df['CAtBat']","32943a5d":"df['CRBI_per_CAtBat']=df['CRBI']\/df['CAtBat']","182e892a":"df['CWalks_per_CAtBat']=df['CWalks']\/df['CAtBat']","f08377e5":"df['CHmRun_per_CHits']=df['CHmRun']\/df['CHits']","69fcc546":"df['CRuns_per_CHits']=df['CRuns']\/df['CHits']","d058d91b":"df['CRBI_per_CHits']=df['CRBI']\/df['CHits']","859e2a5d":"df['CWalks_per_CHits']=df['CWalks']\/df['CHits']","0023b6cb":"df['CRuns_per_CHmRun']=df['CRuns']\/df['CHmRun']","5409183e":"df['CRBI_per_CHmRun']=df['CRBI']\/df['CHmRun']","a6129279":"df['CWalks_per_CHmRun']=df['CWalks']\/df['CHmRun']","ed40205d":"df['CRBI_per_CRuns']=df['CRBI']\/df['CRuns']","e80189b0":"df['CWalks_per_CRuns']=df['CWalks']\/df['CRuns']","f4da68e3":"df['CWalks_per_CRBI']=df['CWalks']\/df['CRBI']","0709af0a":"df['CAtBat_per_Years'] = df['CAtBat'] \/ df['Years']","2db76e91":"df['CHmRun_per_Years'] = df['CHmRun'] \/ df['Years']","dc4ada26":"df['CRuns_per_Years'] = df['CRuns'] \/ df['Years']","406e524d":"df['CRBI_per_Years'] = df['CAtBat'] \/ df['Years']","b9c6927b":"df['CWalks_per_Years'] = df['CWalks'] \/ df['Years']","c226059c":"cat_cols,num_cols,cat_but_car=grab_col_names(df)","617c9286":"def outlier_thresholds(dataframe,col,q1=0.25,q3=0.75):\n    quartile1=dataframe[col].quantile(q1)\n    quartile3=dataframe[col].quantile(q3)\n    inter_quartile_range=quartile3-quartile1\n    down_limit=quartile1-(1.5*inter_quartile_range)\n    up_limit=quartile3+(1.5*inter_quartile_range)\n    \n    return down_limit,up_limit","d00a354f":"for i in num_cols:\n    print(i+\":\"+str(outlier_thresholds(df,i)))","da3b9403":"def check_outlier(dataframe,col):\n    down_limit,up_limit=outlier_thresholds(dataframe,col)\n    if dataframe[((dataframe[col]<down_limit) | (dataframe[col]>up_limit))].any(axis=None):\n        return True\n    else:\n        return False","d5ec975e":"for i in num_cols:\n    print(i+\":\"+str(check_outlier(df,i)))","30706da8":"def grab_outliers(dataframe,col,table=False,index=False):\n    down,up=outlier_thresholds(dataframe,col)\n    if table:\n        if dataframe[((dataframe[col]<down) | (dataframe[col]>up))].any(axis=None):\n            print(dataframe[((dataframe[col]<down) | (dataframe[col]>up))])\n    if index:\n        outliers_index=dataframe[((dataframe[col]<down) | (dataframe[col]>up))].index\n        return outliers_index","62c027c8":"for i in num_cols:\n    print(i+\": \"+str(grab_outliers(df,i,False,True)),end='\\n\\n\\n')\n    outliers_index=grab_outliers(df,i,False,True)\n    print(\"Outliers :\"+\"\\n\"+str(df[i][outliers_index]),end='\\n\\n\\n')                     ","fef6fa58":"def replace_with_thresholds(dataframe,col):\n    down_limit,up_limit=outlier_thresholds(dataframe,col)\n    dataframe.loc[(dataframe[col]<down_limit),col]=down_limit\n    dataframe.loc[(dataframe[col]>up_limit),col]=up_limit","08e5ce52":"for i in num_cols:\n    if i!='Salary':\n        replace_with_thresholds(df,i)","e291f802":"for i in num_cols:\n    print(i+\":\"+str(check_outlier(df,i)))","117b5dab":"cat_cols,num_cols,cat_but_car=grab_col_names(df)","0e4639ce":"binary_columns=[i for i in cat_cols if df[i].nunique()==2]\nbinary_columns","e7cb288f":"from sklearn.preprocessing import LabelEncoder","bd475241":"lbe=LabelEncoder()","d692fa78":"for i in binary_columns:\n    df[i]=lbe.fit_transform(df[i])","a0c3497d":"def rare_analyser(dataframe, target, cat_cols):\n    for col in cat_cols:\n        print(col, \":\", len(dataframe[col].value_counts()))\n        print(pd.DataFrame({\"COUNT\": dataframe[col].value_counts(),\n                            \"RATIO\": dataframe[col].value_counts() \/ len(dataframe),\n                            \"TARGET_MEAN\": dataframe.groupby(col)[target].mean()}), end=\"\\n\\n\\n\")","3455cf10":"rare_analyser(df,'Salary',cat_cols)","4951bfee":"cat_cols,num_cols,cat_but_car=grab_col_names(df)","dcc0ece2":"one_hot_cols=[i for i in cat_cols if 16>=df[i].nunique()>2]\none_hot_cols","3b295058":"def one_hot_encoder(dataframe,col):\n    dataframe=pd.get_dummies(data=dataframe,columns=one_hot_cols,drop_first=True)\n    return dataframe","8a2a89c6":"df=one_hot_encoder(df,one_hot_cols)","9ba433de":"cat_cols,num_cols,cat_but_car=grab_col_names(df)","469f90f5":"def rare_analyser(dataframe, target, cat_cols):\n    for col in cat_cols:\n        print(col, \":\", len(dataframe[col].value_counts()))\n        print(pd.DataFrame({\"COUNT\": dataframe[col].value_counts(),\n                            \"RATIO\": dataframe[col].value_counts() \/ len(dataframe),\n                            \"TARGET_MEAN\": dataframe.groupby(col)[target].mean()}), end=\"\\n\\n\\n\")","2617f80f":"rare_analyser(df,'Salary',cat_cols)","84e9ac27":"useless_cols = [col for col in df.columns if df[col].nunique() == 2 and\n                (df[col].value_counts() \/ len(df) < 0.01).any(axis=None)]\n\ndf.drop(useless_cols, axis=1, inplace=True)","cf6db47d":"from sklearn.preprocessing import StandardScaler","b9da1a43":"num_cols=[i for i in num_cols if i!='Salary']","e1109a4f":"scaler=StandardScaler()\ndf[num_cols]=scaler.fit_transform(df[num_cols])","f89d38d3":"corr=df.corr()['Salary'].nlargest(len(df.columns))[1:]\ncorr","4f2219cd":"negative_corr=[]\n\nfor index,i in enumerate(corr):\n    if i<0 and corr.index[index] not in base_df_columns:\n        negative_corr.append(corr.index[index])\n        ","2b4d16ba":"negative_corr","0e5add69":"df.drop(columns=negative_corr,inplace=True)","0d995df1":"y=df['Salary']\nX=df.drop(columns=['Salary'],axis=1)","e7228c79":"# Model Class\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso,ElasticNet\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, VotingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\n\n# Model metrics\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, cross_validate","964f102e":"models = [('LR', LinearRegression()),\n          (\"Ridge\", Ridge()),\n          (\"Lasso\", Lasso()),\n          (\"ElasticNet\", ElasticNet()),\n          ('KNN', KNeighborsRegressor()),\n          ('CART', DecisionTreeRegressor()),\n          ('RF', RandomForestRegressor()),\n          ('SVR', SVR()),\n          ('GBM', GradientBoostingRegressor()),\n          (\"XGBoost\", XGBRegressor(objective='reg:squarederror')),\n          (\"LightGBM\", LGBMRegressor()),\n          # (\"CatBoost\", CatBoostRegressor(verbose=False))\n          ]\n\n\nfor name, regressor in models:\n    rmse = np.mean(np.sqrt(-cross_val_score(regressor, X, y, cv=10, scoring=\"neg_mean_squared_error\")))\n    print(f\"RMSE: {round(rmse, 4)} ({name}) \")","4ba6e3f0":"cart_params = {'max_depth': range(1, 20),\n               \"min_samples_split\": range(2, 30)}\n\nrf_params = {\"max_depth\": [5, 8, 15, None],\n             \"max_features\": [5, 7, \"auto\"],\n             \"min_samples_split\": [8, 15, 20],\n             \"n_estimators\": [200, 500, 1000]}\n\nxgboost_params = {\"learning_rate\": [0.1, 0.01, 0.01],\n                  \"max_depth\": [5, 8, 12, 20],\n                  \"n_estimators\": [100, 200, 300, 500],\n                  \"colsample_bytree\": [0.5, 0.8, 1]}\n\nlightgbm_params = {\"learning_rate\": [0.01, 0.1, 0.001],\n                   \"n_estimators\": [300, 500, 1500],\n                   \"colsample_bytree\": [0.5, 0.7, 1]}\n\nregressors = [(\"CART\", DecisionTreeRegressor(), cart_params),\n              (\"RF\", RandomForestRegressor(), rf_params),\n              ('XGBoost', XGBRegressor(objective='reg:squarederror'), xgboost_params),\n              ('LightGBM', LGBMRegressor(), lightgbm_params)]\n\nbest_models = {}","b1460215":"for name, regressor, params in regressors:\n    print(f\"########## {name} ##########\")\n    rmse = np.mean(np.sqrt(-cross_val_score(regressor, X, y, cv=10, scoring=\"neg_mean_squared_error\")))\n    print(f\"RMSE: {round(rmse, 4)} ({name}) \")\n\n    gs_best = GridSearchCV(regressor, params, cv=10, n_jobs=-1, verbose=False).fit(X, y)\n\n    final_model = regressor.set_params(**gs_best.best_params_)\n    rmse = np.mean(np.sqrt(-cross_val_score(final_model, X, y, cv=10, scoring=\"neg_mean_squared_error\")))\n    print(f\"RMSE (After): {round(rmse, 4)} ({name}) \")\n\n    print(f\"{name} best params: {gs_best.best_params_}\", end=\"\\n\\n\")\n    best_models[name] = final_model","919d6fe3":"voting_reg = VotingRegressor(estimators=[('RF', best_models[\"RF\"]),\n                                         ('LightGBM', best_models[\"LightGBM\"])])\n\nvoting_reg.fit(X, y)\n\n\nnp.mean(np.sqrt(-cross_val_score(voting_reg, X, y, cv=10, scoring=\"neg_mean_squared_error\")))\n","78f70924":"gbm_model = GradientBoostingRegressor(random_state=17)\n\n\n\ngbm_params = {\"learning_rate\": [0.01, 0.1],\n              \"max_depth\": [3, 8],\n              \"n_estimators\": [500, 1000],\n              \"subsample\": [1, 0.5, 0.7]}\n\ngbm_best_grid = GridSearchCV(gbm_model,\n                             gbm_params,\n                             cv=5,\n                             n_jobs=-1,\n                             verbose=True).fit(X, y)\n\ngbm_final = gbm_model.set_params(**gbm_best_grid.best_params_,\n                                 random_state=17, ).fit(X, y)\n\nrmse = np.mean(np.sqrt(-cross_val_score(gbm_model, X, y, cv=10, scoring=\"neg_mean_squared_error\")))\nprint(round(rmse, 4))","c69c39a2":"def plot_importance(model, features, num=len(X), save=False):\n    feature_imp = pd.DataFrame({'Value': model.feature_importances_, 'Feature': features.columns})\n    plt.figure(figsize=(30, 30))\n    sns.set(font_scale=1.5)\n    sns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\",\n                                                                      ascending=False)[0:num])\n    plt.title('Features')\n    plt.tight_layout()\n    plt.show()\n    if save:\n        plt.savefig('importances.png')\n\nplot_importance(gbm_final,X)","b83d3905":"## Accessing Missing Observation Units","8cbb8e0a":"G-->Good N-->Normal B-->Bad","d7321349":"## New Variables Created by Binary Combination According to the Interaction Between the Variables ","46fe8b16":"- The average earnings in league A are higher than the average earnings in league N. \n- Players playing in the East position have a higher average earnings than the players playing in the West position. ","c2586eb3":"### Categorical RBI","900b7f4e":"#### Target Variable by Category Variables","9b5143da":"### Categorical_Hits","aba5b547":"#### League - New League ","aa4e80f0":"### Experience","0810d35b":"This dataset was taken from the StatLib library which is maintained at Carnegie Mellon University. This is part of the data that was used in the 1988 ASA Graphics Section Poster Session. The salary data were originally from Sports Illustrated, April 20, 1987. The 1986 and career statistics were obtained from The 1987 Baseball Encyclopedia Update published by Collier Books, Macmillan Publishing Company, New York.","860bc8ad":"When reviewing the descriptive statistics of the players being transferred\n   - Descriptive statistics of players transferred to league N  <br>\n     It is seen that the players transferred to league A are higher than their descriptive statistics. ","6dca846f":"If the denominator of a continuous variable is zero, the number \/ infinity will come from 0 when new variables are created, taking into account the interaction of the continuous variables with each other.\n\nTherefore, if the minimum value of the unit of observation of a continuous variable is zero, it is a solution to add the unit of observation of the variable with a number that will affect the variable the least. \n\nIn the dataset display settings I have allowed the decimal part of the continuous variable to be shown as not 3 digits.\nTherefore, the minimum integer value that will least affect a variable is 0.001. ","8751e3e6":"## Solving Outlier Observation Units Problems ","95ccc1dc":"### Scorer","b82fcdd1":"As a result\n   - The a league is more quality than the B league, which can be commented. ","dcbf683a":"## One-Hot Encoding","05b50f15":"### 1986-1987vsAll","8bf96ab7":"- AtBat : Number of times at bat in 1986\n- Hits  : Number of hits in 1986\n- HmRun : Number of home runs in 1986\n- Runs  : Number of runs in 1986\n- RBI   : Number of runs batted in in 1986\n- Walks : Number of walks in 1986\n- Years : Number of years in the major leagues\n- CAtBat: Number of times at bat during his career\n- CHits : Number of hits during his career\n- CHmRun: Number of home runs during his career\n- CRuns : Number of runs during his career\n- CRBI  : Number of runs batted in during his career\n- CWalks :Number of walks during his career\n- League :A factor with levels A and N indicating player\u2019s league at the end of 1986\n- Division :A factor with levels E and W indicating player\u2019s division at the end of 1986\n- PutOuts: Number of put outs in 1986\n- Assists : Number of assists in 1986\n- Errors :Number of errors in 1986\n- Salary: 1987 annual salary on opening day in thousands of dollars\n- NewLeague : A factor with levels A and N indicating player\u2019s league at the beginning of 1987","d15fcccf":"Continuous variables \n   - I think there is no problem with the minimum values<br>\n     The available values for each variable are possible. ","7c3fc0f2":"- In the 1986-1987 season \n    - In American League 175 \n    - In National League 147 <br>\n    \nthere are players. \n\n- At the beginning of the 1987 season \n    - In American League 176\n    - In National League 146 <br>\n    \nthere are players. ","9df63d45":"In the 1986-1987 season, there were a total of 26 teams in the baseball major league.\n- 7 teams in the West region 7 teams in the East region in the American League\n-6 teams in the West region of the National League 6 teams in the East region \n\n<a href=\"https:\/\/en.wikipedia.org\/wiki\/1986_Major_League_Baseball_season\">Referances<\/a>","2b97d79d":"Condition of being a substitute player \n\n- A player's below average number of hits to the ball during a season\n\nis in the form. ","f19b9f38":"**My LinkedIn Address** :\n\n<a href=\"https:\/\/www.linkedin.com\/in\/ibrahim-turkoglu\/\">LinkedIn<\/a>\n\n**My Medium   Address** :\n\n<a href=\"https:\/\/medium.com\/@trkglu.ibrahim\">Medium<\/a>\n\n**My Github   Address** :\n\n<a href=\"https:\/\/github.com\/ibrahimturkoglu\">Github<\/a>\n\n**My Kaggle  Address** :\n\n<a href=\"https:\/\/www.kaggle.com\/brahimtrkolu\">Kaggle<\/a>","76135e45":"#### Division ","d640301c":"#### League ","e00c2cf8":"## Accessing The Index Information Of Outlier Observation Units ","6b1870e0":"## Label Encoding","1b77bea8":"# Encoding","2f9f5800":"- The number of players in a team transferred from the American League to the National League is 9 \n- The number of players belonging to a team transferred from the National League to the American League is 9+1 \n\nsince there are 9 players in a team   9+1 --> supported my hypothesis about the existence of substitute players. .","0b4743b4":"# Let's Get To Know The Dataset","605596fc":"Continuous variables\n   - The standard deviation is quite high. <br>\n     Therefore\n        - At maximum values, descriptive statistics are quite high compared to the mean.\n        - The median should be used when examining continuous variables. ","8c4bd047":"# Scaling","26bac066":"## Rare Analysis","60368709":"# Correlation Analysis ","3d76ccd1":"#### Target Variable by Continuous Variables","7bc27ba1":"### Categorical_HmRun","e4774a19":"# Modelling","d5a70822":"## Re-assignment with Tresholds ","b14add21":"If the number of mistakes the player makes decreases, the player's earnings increase. ","0af8f3c8":"## Solve The Missing Observation Unit Problem ","08415166":"## Model Building \/ Training ","4d2adcff":"- The relationship to be established between two continuous variables is a linear relationship. \n   - Is the variable increasing continuously while the target variable is increasing? correct proportion\n   - Does the variable increase continuously while the target variable is decreasing? Inverse proportion \n- With correlation, the relationship between target variables and other continuous variables can be examined. \n   - (+) correlation Positive correlation: as the target variable increases, the numeric variable also increases.\n   - (-) correlation Negative relationship: numeric variable increases while target variable decreases.","1c88821b":"# Infinity Values Control","a8f7d417":"# Data Story","7170d195":"### Main Player - Substitute","8936d934":"## Calculating Threshold Values for Outlier Observations as Lower Limit and Upper Limit ","f15ee787":"## Rare Analysis","1699758c":"![f6RNgpT.png](attachment:5e0186d4-f4ec-4357-9e0a-b7ba237de061.png)","f5976d7a":"## Detecting the Presence of Outlier Observation Units","8c9633a4":"### Stacking & Ensemble Learning;","3512761a":"# Feature Importances for Best Model GBM","0b8fcd19":"It is seen that the descriptive stats of the players in the East position are generally higher than the descriptive stats of the players in the West position. \n\nExceptions: \n\n- It is seen that the players in the East position play less time in the major league than the players in the West position play in the major league .<br>\n\nTherefore\n    \n   - Number of hits by players over their careers  - CAtBat\n   - Number of accurate shots made by players throughout their careers  -CHits\n   - Most valuable hits made by players throughout their careers  -CHmRun\n   - The number of players players have run throughout their careers  -CRBI\n   \nIt is seen that the players in the East position are lower than the players in the West position. \n","a19be3d4":"### Stability","ad7edec9":"## Creating target variables and features ","d94b5bd0":"# Missing Observation Units Analysis","ef846082":"# Dataset Display Settings ","19590341":"with Target Variable \n   - There is a positive correlation between continuous variables.--> Correct proportion \n        - As the units of observation of the variables increase, the values of the units of observation of the target variable also increase. \n\nExceptional \n   - There is a negative correlation between the Errors variable.-->Inverse proportion \n        - If the number of mistakes the player makes decreases, the player's earnings increase. \n","a826d126":"# Loading Related Libraries ","1efae2da":"### Let's Examine Categorical Variables ","8669b6e4":"### **If you want to interact with me**","cd3b409d":"# Feature Engineering","72c242bc":"### Transfer","7a3f8d2d":"# Let's Get to Know the Variables ","03554404":"### Categorical_Runs","ba584d95":"# About The Dataset","1f7c5e8b":"### Let's Review Continuous\/Numerical Variables","a3f470c8":"### Categorical_AtBat","18dd30aa":"### Player_Type","82d111a7":"### Categorical Walks","183e30af":"## Hyperparameter Optimization","2f89e3b7":"# Reviewing Observation Units","d50f54d2":"### Support","1ca40862":"### Let's Examine the Target\/Dependent\/Output Variable ","7c061bc6":"## Variables Classification","69dbe2ee":"There are 9 members of a team on the stage in the baseball arena.Therefore\n\n   - At least 9 * 14 players in the American League\n   - At least 9 * 12 players in the National league\n\nthere should be\n\nExtra players in the league can be interpreted as substitutes belonging to the teams. "}}