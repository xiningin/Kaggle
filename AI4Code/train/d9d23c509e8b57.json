{"cell_type":{"e141e039":"code","e47d7df2":"code","4744c3dd":"code","16076d8f":"code","c3a170d5":"code","9ea562e3":"code","879e8d9a":"code","73135bf7":"code","4ebda11c":"code","cf3b5b10":"code","7e462b83":"code","3efead13":"code","1757e8ab":"code","98328bc0":"code","c47da402":"code","65f68af5":"code","d40379a4":"code","2dd6bc80":"code","a9f04354":"code","82d40562":"code","3c3ad218":"code","09b89493":"code","50385c6c":"code","be1e6d9a":"code","736b7e9c":"code","4e6886ef":"code","c336fba4":"code","bacf2af3":"code","cb519bb6":"code","86f95a62":"code","37cab4b2":"code","77d87152":"code","6015a810":"code","c00fbce2":"code","a111a482":"code","e81319ba":"code","ede34882":"code","4ad79854":"markdown","a1b9c40f":"markdown","3a9ac75d":"markdown","ec9ae200":"markdown","245a0127":"markdown"},"source":{"e141e039":"# Directive pour afficher les graphiques dans Jupyter\n%matplotlib inline\n\n# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import model_selection\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import datasets\n\nfrom tensorflow.keras.preprocessing import sequence\nfrom sklearn.datasets import fetch_20newsgroups\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.models import Sequential, Model\nfrom tensorflow.keras.layers import Input, Dense, Embedding, Conv2D, MaxPooling2D, Dropout, UpSampling2D\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.preprocessing import sequence\nimport numpy as np\nimport string\nimport re\n\nfrom tensorflow.keras.utils import to_categorical","e47d7df2":"from tensorflow.keras.datasets import fashion_mnist\nimport numpy as np\n(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data()","4744c3dd":"X_train = X_train.reshape(-1, 28, 28, 1)\nX_test = X_test.reshape(-1, 28, 28, 1)","16076d8f":"X_train.shape\n","c3a170d5":"X_test.shape","9ea562e3":"y_train.shape","879e8d9a":"X_train = X_train.astype('float32') \/ 255.\nX_test = X_test.astype('float32') \/ 255.","73135bf7":"labels = ['T-shirt\/top','Trouser','Pullover','Dress','Coat','Sandal','Shirt','Sneaker','Bag','Ankle boot']\nnum_classes = 10","4ebda11c":"y_train1 = to_categorical(y_train, num_classes)\ny_test1 = to_categorical(y_test, num_classes)","cf3b5b10":"y_train1.shape","7e462b83":"model = Sequential()\nmodel.add(Conv2D(128, (1, 1), input_shape=(28, 28, 1), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(64, (1, 1), activation='relu'))\nmodel.add(Conv2D(32, (1, 1), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(32, (1, 1), activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\n\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","3efead13":"model.summary()","1757e8ab":"train = model.fit(X_train, y_train1, validation_data=(X_test, y_test1), epochs=100, batch_size=200, verbose=1)","98328bc0":"# Test\nscores = model.evaluate(X_test, y_test1, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","c47da402":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","65f68af5":"plot_scores(train)","d40379a4":"y_cnn = model.predict(X_test)\ny_cnn = np.round(y_cnn).astype(int)","2dd6bc80":"matrix = [[0], [1],[2], [3], [4], [5], [6], [7], [8], [9]]","a9f04354":"plt.figure(figsize=(15,25))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    #print(y_cnn[j])\n    #print(int(np.matmul(y_cnn[j], matrix)))\n    #print(y_test[j])\n    if (int(np.matmul(y_cnn[j], matrix)) != y_test[j]) & (i<50):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[j])\n        pred_classe = int(np.matmul(y_cnn[j], matrix))\n        plt.title('%s \/ %s' % (labels[int(np.matmul(y_cnn[j], matrix))], labels[int(y_test[j])]))\n        i+=1","82d40562":"from tensorflow.keras.layers import Input, Dense\nfrom tensorflow.keras.models import Model\n\n\ninput_img = Input(shape=(28, 28, 1))\nencoded  = Conv2D(32, (3, 3), name='e1', padding=\"same\", input_shape=(32, 32, 3), activation='relu')(input_img)\nencoded = MaxPooling2D(pool_size=(2, 2), name='e2', padding=\"same\")(encoded)\nencoded = Conv2D(16, (3, 3), name='e3', padding=\"same\", activation='relu')(encoded)\nencoded = MaxPooling2D(pool_size=(2, 2), name='e4', padding=\"same\")(encoded)\nencoded = Conv2D(3, (3, 3), name='e5', padding=\"same\", activation='relu')(encoded)\n\ndecoded = Conv2D(16, (3, 3), name='d1', padding=\"same\", input_shape=(16, 16, 3), activation='relu')(encoded)\ndecoded = UpSampling2D(size=(2, 2), name='d2')(decoded)\ndecoded = Conv2D(32, (3, 3), name='d3', padding=\"same\", activation='relu')(decoded)\ndecoded = UpSampling2D(size=(2, 2), name='d4')(decoded)\ndecoded = Conv2D(1, (3, 3), name='d5', padding=\"same\", activation='relu')(decoded)\n\nautoencoder = Model(input_img, decoded)\n","3c3ad218":"autoencoder.summary()","09b89493":"encoder = Model(input_img, encoded)\nencoder.summary()","50385c6c":"encoded_input = Input(shape=(7, 7, 3))\ndecoder_layer = autoencoder.get_layer('d1')(encoded_input)\ndecoder_layer = autoencoder.get_layer('d2')(decoder_layer)\ndecoder_layer = autoencoder.get_layer('d3')(decoder_layer)\ndecoder_layer = autoencoder.get_layer('d4')(decoder_layer)\ndecoder_layer = autoencoder.get_layer('d5')(decoder_layer)\n\ndecoder = Model(encoded_input, decoder_layer)\ndecoder.summary()","be1e6d9a":"autoencoder.compile(optimizer='adam', loss='binary_crossentropy')\n","736b7e9c":"autoencoder.fit(X_train, X_train,\n                epochs=1,\n                batch_size=256,\n                shuffle=True,\n                validation_data=(X_test, X_test))\nencoded_imgs = encoder.predict(X_test)\ndecoded_imgs = decoder.predict(encoded_imgs)","4e6886ef":"%matplotlib inline\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(nrows=2, ncols=10,figsize=(20, 4))\nplt.gray()\nfor indice, row in enumerate(ax):\n    for indice2, col in enumerate(row):\n        if indice == 0:\n            col.imshow(X_test[indice2].reshape(28,28,1))\n        else:\n            col.imshow(decoded_imgs[indice2].reshape(28,28,1))\n\nplt.show()","c336fba4":"autoencoder.fit(X_train, X_train,\n                epochs=20,\n                batch_size=256,\n                shuffle=True,\n                validation_data=(X_test, X_test))\nencoded_imgs = encoder.predict(X_test)\ndecoded_imgs = decoder.predict(encoded_imgs)","bacf2af3":"%matplotlib inline\nimport matplotlib.pyplot as plt\n\n\nplt.imshow(X_test[5].reshape(28,28,1))\nplt.gray()\nplt.show()","cb519bb6":"encoded_imgs = encoded_imgs.reshape(encoded_imgs.shape[0], -1)\nimg_to_find = encoded_imgs[5]","86f95a62":"def custom_cosine_sim(a,b):\n    return np.dot(a, b) \/ ( np.linalg.norm(a) * np.linalg.norm(b))","37cab4b2":"from scipy import spatial\ncosine_list = []\nfor index_image,xt in enumerate(encoded_imgs):\n    result = 1 - spatial.distance.cosine(img_to_find, xt)\n    cosine_list.append(dict({'res':result, 'i':index_image}))","77d87152":"from operator import itemgetter\ncosine_list.sort(key=itemgetter('res'), reverse=True)","6015a810":"%matplotlib inline\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(nrows=1, ncols=10,figsize=(20, 4))\nplt.gray()\nfor indice, row in enumerate(ax):\n    row.imshow(X_test[cosine_list[indice]['i']].reshape(28,28,1))\n\nplt.show()","c00fbce2":"plt.imshow(X_test[5].reshape(28,28,1))\nplt.gray()\nplt.show()","a111a482":"from scipy import spatial\ncosine_list = []\nfor index_image,xt in enumerate(encoded_imgs):\n    result = 1 - spatial.distance.cosine(img_to_find, xt)\n    cosine_list.append(dict({'res':result, 'i':index_image}))","e81319ba":"from operator import itemgetter\ncosine_list.sort(key=itemgetter('res'), reverse=False)","ede34882":"%matplotlib inline\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(nrows=1, ncols=10,figsize=(20, 4))\nplt.gray()\nfor indice, row in enumerate(ax):\n    row.imshow(X_test[cosine_list[indice]['i']].reshape(28,28,1))\n\nplt.show()","4ad79854":"## Conv2D pour cat\u00e9goriser","a1b9c40f":"Avec y_cnn on r\u00e9cup\u00e8re un array de matrices, avec les matrices de dimension 10 par 1.\n\nEx : \n[0 0 0 0 1 0 0 0 0 0],\no\u00f9 le 1 est la cat\u00e9gorie (ici la cat\u00e9gorie 5).\n\nLe but est maintenant de r\u00e9cup\u00e9rer cette cat\u00e9gorie en entier pour la comparer au label.\nPour ce faire on multiplie y_cnn[x] par la matrice ci-dessous","3a9ac75d":"On affiche 50 images pour lesquelles on s'est tromp\u00e9","ec9ae200":"## Similarit\u00e9 Cosine","245a0127":"## Bonus "}}