{"cell_type":{"42ca7bc6":"code","f5b2e5cd":"code","e36a936a":"code","03ea947a":"code","8ceee94b":"code","e039622b":"code","3f9a9c93":"code","37cf817f":"code","2d9bbcad":"code","438c1591":"code","132b39e3":"code","be97eb73":"code","4139806d":"code","f4aff991":"code","19c9893f":"code","2fbbe818":"code","b1a2c2e4":"code","3073fcb8":"code","1886829e":"markdown","83ff02ec":"markdown","bcf50c14":"markdown","e406493c":"markdown","f37bec2f":"markdown","88f4a03a":"markdown","d2ab1640":"markdown","4c06161d":"markdown","3e3ebbeb":"markdown"},"source":{"42ca7bc6":"!pip install -q pycaret","f5b2e5cd":"from tqdm.notebook import tqdm\nimport pandas as pd\nimport numpy as np\nimport random\nimport os\nimport gc\n\nfrom pycaret.regression import setup, compare_models, tune_model, blend_models, finalize_model, predict_model, plot_model\n\nfrom sklearn.model_selection import LeaveOneGroupOut\nimport statsmodels.api as sm\n\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nimport warnings\nwarnings.simplefilter('ignore')","e36a936a":"CFG = {\n    'carbon_monoxide': {\n        'target': 'target_carbon_monoxide',\n        'seed': 2021,\n        'n_select': 4,\n        'tuning': False,\n        'normalize': True,\n        'optimize': 'RMSE',\n    },\n    'benzene': {\n        'target': 'target_benzene',\n        'seed': 2021,\n        'n_select': 4,\n        'tuning': False,\n        'normalize': True,\n        'optimize': 'RMSE',        \n    },\n    'nitrogen_oxides': {\n        'target': 'target_nitrogen_oxides',\n        'seed': 2021,\n        'n_select': 4,\n        'tuning': False,\n        'normalize': True,\n        'optimize': 'RMSE',        \n    },\n} ","03ea947a":"def seed_everything(seed=2021):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything()","8ceee94b":"train = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv\")\n\ntrain=train.loc[~(train['date_time']=='2011-01-01 00:00:00')].reset_index(drop=True)","e039622b":"all_df = pd.concat([train, test])\nall_df['date_time'] = pd.to_datetime(all_df['date_time'])","3f9a9c93":"def make_features(df, params):\n    df['deg_K'] = df['deg_C'] + 273.15\n    \n    df['sensor_6'] = (df['sensor_2'] - df['sensor_5']) \/ df['sensor_5']\n    df['sensor_7'] = (df['sensor_3'] - df['sensor_4']) \/ df['sensor_4']\n    \n    for periods in params[0]:\n        df[f'dt-{periods}'] = df['deg_C'] - df['deg_C'].shift(periods=periods, fill_value=0)\n\n    for periods in params[1]:\n        df[f'abshum-{periods}'] = df['absolute_humidity'] - df['absolute_humidity'].shift(periods=periods, fill_value=0)\n        df[f'relhum-{periods}'] = df['relative_humidity'] - df['relative_humidity'].shift(periods=periods, fill_value=0)\n    \n    for i in range(7):\n        for periods in params[2]:\n            df[f's{i+1}-{periods}'] = df[f'sensor_{i+1}'] - df[f'sensor_{i+1}'].shift(periods=periods, fill_value=0)\n\n            \n    df.drop(columns='deg_C', inplace=True)\n    \n    return df","37cf817f":"import math\n\ndef pb_add(X):\n    X['day'] = X.date_time.dt.weekday\n    X['is_odd'] = (X['sensor_4'] < 646) & (X['absolute_humidity'] < 0.238)\n    diff = X['date_time'] - min(X['date_time'])\n    trend = diff.dt.days\n    \n    for i in [1, 2, 3, 4]:\n        X[f'f{i}s'] = np.sin(trend * 2 * math.pi \/ (365 * i)) \n        X[f'f{i}c'] = np.cos(trend * 2 * math.pi \/ (365 * i))\n    for i in [1, 2, 3]:\n        X[f'fh{i}s'] = np.sin(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * i))\n        X[f'fh{i}c'] = np.cos(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * i))\n    \n    sensor_features = [\n        'deg_K', \n        'relative_humidity', 'absolute_humidity', \n        'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5', 'sensor_6', 'sensor_7',\n    ]\n    \n    lags = [-1, -4, -24, -7*24]\n    for sensor_feature in sensor_features:\n        this = X[sensor_feature]\n        # look back\n        for lag in lags:\n            feature = f'{sensor_feature}_{abs(lag)}b'\n            this_f = X[sensor_feature].shift(lag)\n            X[feature] = (this_f - this).fillna(0)\n        # look forwards\n        for lag in lags:\n            feature = f'{sensor_feature}_{abs(-lag)}f'\n            this_f = X[sensor_feature].shift(-lag)\n            X[feature] = (this_f - this).fillna(0)\n            \n    return X","2d9bbcad":"# The months will be used for folds split\nmonths = all_df[\"date_time\"].dt.month[:len(train)]\n\nall_df[\"hour\"] = all_df[\"date_time\"].dt.hour\nall_df['seconds'] = all_df['hour']*3600+all_df.date_time.dt.minute*60+all_df.date_time.dt.second\nall_df[\"working_hours\"] =  all_df[\"hour\"].isin(np.arange(8, 21, 1)).astype(\"int\")\nall_df['maximum_hours'] =  all_df['hour'].isin([8, 9, 17, 18, 19, 20]).astype('int')\nall_df[\"is_weekend\"] = (all_df[\"date_time\"].dt.dayofweek >= 5).astype(\"int\")\nall_df['is_saturday'] = (all_df.date_time.dt.weekday==5).astype(\"int\")\nall_df[\"SMC\"] = (all_df[\"absolute_humidity\"] * 100) \/ all_df[\"relative_humidity\"]\nall_df.drop(columns = 'hour', inplace = True)\n\nall_df = make_features(all_df.copy(), [[3, 6], [3, 6], [1]])\nall_df = pb_add(all_df.copy())\n\nall_df.drop(columns='date_time', inplace=True)","438c1591":"features = [col for col in all_df.columns.tolist() if 'target_' not in col]\ntarget = [col for col in all_df.columns.tolist() if 'target_' in col]\n\nall_df[target] = np.log1p(all_df[target])\nall_df","132b39e3":"def pycaret_model(train, test, config):\n    print('Setup Your Data....')\n    setup(\n        data=train,\n        target=config['target'],\n        numeric_imputation='mean',\n        session_id=config['seed'],\n        fold_strategy=config['fold_strategy'],\n        fold_groups=config['fold_groups'],\n        normalize = config['normalize'],\n        silent= True,\n    )\n\n    print(f\"Comparing Models....\")\n    best = compare_models(sort=config['optimize'], n_select=config['n_select'], exclude=['xgboost'])\n\n    if config['tuning']:\n        print(f\"Tuning Models....\")\n        best_tuned = [tune_model(model) for model in best]\n\n        print(f\"Blending Models....\")\n        blended = blend_models(estimator_list=best+best_tuned, optimize=config['optimize'])\n    else:\n        print(f\"Blending Models....\")\n        blended = blend_models(estimator_list=best, optimize=config['optimize'])\n        \n    pred_holdout = predict_model(blended)\n\n    print(f\"Finallizing Models....\")\n    final_model = finalize_model(blended)\n\n    print('Done...!!!')\n    pred = predict_model(final_model, test)\n    re = pred['Label']\n\n    return re, final_model","be97eb73":"# 'target_carbon_monoxide'\nCFG['carbon_monoxide']['fold_strategy'] = LeaveOneGroupOut()\nCFG['carbon_monoxide']['fold_groups'] = months\n\nX_train = all_df[features+[CFG['carbon_monoxide']['target']]][:len(train)].copy()\nX_test = all_df[features+[CFG['carbon_monoxide']['target']]][len(train):].copy()\n\npred_CO, model_CO = pycaret_model(X_train, X_test, CFG['carbon_monoxide'])\nsubmission[CFG['carbon_monoxide']['target']] = np.expm1(pred_CO)","4139806d":"plot_model(model_CO, plot='error')","f4aff991":"# 'target_benzene'\nCFG['benzene']['fold_strategy'] = LeaveOneGroupOut()\nCFG['benzene']['fold_groups'] = months\n\nX_train = all_df[features+[CFG['benzene']['target']]][:len(train)].copy()\nX_test = all_df[features+[CFG['benzene']['target']]][len(train):].copy()\n\npred_benzene, model_benzene = pycaret_model(X_train, X_test, CFG['benzene'])\nsubmission[CFG['benzene']['target']] = np.expm1(pred_benzene)","19c9893f":"plot_model(model_benzene, plot='error')","2fbbe818":"# 'target_nitrogen_oxides'\nCFG['nitrogen_oxides']['fold_strategy'] = LeaveOneGroupOut()\nCFG['nitrogen_oxides']['fold_groups'] = months\n\nX_train = all_df[features+[CFG['nitrogen_oxides']['target']]][:len(train)].copy()\nX_test = all_df[features+[CFG['nitrogen_oxides']['target']]][len(train):].copy()\n\npred_NOx, model_NOx = pycaret_model(X_train, X_test, CFG['nitrogen_oxides'])\nsubmission[CFG['nitrogen_oxides']['target']] = np.expm1(pred_NOx)","b1a2c2e4":"plot_model(model_NOx, plot='error')","3073fcb8":"submission.to_csv('submission.csv', index=False)\nsubmission","1886829e":"## for Benzene","83ff02ec":"# Datasets\n---","bcf50c14":"# Feature engineering\n---","e406493c":"## Thanks to @junhyeok99 https:\/\/www.kaggle.com\/junhyeok99\/automl-pycaret","f37bec2f":"# PyCaret\n---","88f4a03a":"## for Nitrogen Oxides","d2ab1640":"## for Carbon Monoxide","4c06161d":"# Libraries\n---","3e3ebbeb":"# Submission\n---"}}