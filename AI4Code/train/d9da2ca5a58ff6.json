{"cell_type":{"905dfcab":"code","1b950044":"code","a4875db7":"code","b8351f9b":"code","5dfa3b73":"code","23c54ac6":"code","760c331e":"code","37e03a75":"code","26b02f31":"code","f4782a87":"code","8e3f4e04":"code","c7cee92e":"code","10e860f9":"code","e16a79ca":"code","243bbd58":"code","4a72e8d4":"code","e3c93b61":"code","99dd0d12":"code","3f25ac09":"code","d665e6d1":"code","b0fc6cf4":"code","1f6b8eb2":"code","c47ee604":"code","e4996d3b":"code","9d74d8cb":"code","68dffe48":"code","a89e8683":"code","42e406b6":"code","d32f7a2d":"code","52faf5fc":"code","c1edfab1":"code","957daa97":"code","7f5fa045":"code","856d4bd5":"code","611974ae":"code","119b0f25":"code","8de0eed3":"code","7c7b07c3":"code","fa53f9ad":"code","aafea3d9":"markdown","50ed7a29":"markdown","95887c01":"markdown","d8ca623a":"markdown","1fb3f128":"markdown","ada8b3e0":"markdown","df97e4ed":"markdown","fd4ae8f3":"markdown","cc1bd916":"markdown","cb6c7736":"markdown","a22ddcc5":"markdown","521baff8":"markdown","a71c161c":"markdown","39c6aeef":"markdown","6f587d91":"markdown","0976e99e":"markdown","55014d8a":"markdown","080a46b7":"markdown","3cd22580":"markdown","8aa147ae":"markdown","e31763b9":"markdown","376bbbbf":"markdown","acefccdc":"markdown","0e6bb30a":"markdown"},"source":{"905dfcab":"%config Completer.use_jedi = False","1b950044":"!pip install klib","a4875db7":"!pip install openpyxl","b8351f9b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport xgboost as xgb\nfrom xgboost import XGBClassifier, plot_importance\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import confusion_matrix \nimport klib\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5dfa3b73":"icu_data = pd.read_excel(open('..\/input\/covid19\/Kaggle_Sirio_Libanes_ICU_Prediction.xlsx','rb'),sheet_name='Sheet1',index_col=0)\nicu_data.head(3)","23c54ac6":"icu_data.info()\nprint(icu_data.columns.ravel())\n","760c331e":"icu_data.describe()\n","37e03a75":"icu_data['AGE_PERCENTIL']","26b02f31":"icu_data[['WINDOW','ICU']]","f4782a87":"out_icu_df = icu_data.loc[icu_data['ICU']==0]\nout_icu_df.describe()","8e3f4e04":"in_icu_df = icu_data.loc[icu_data['ICU']==1]\nin_icu_df.describe()","c7cee92e":"X = icu_data.drop(['ICU','WINDOW','AGE_PERCENTIL'], axis=1)\ny = icu_data[['ICU']]","10e860f9":"seed = 2\ntest_size = 0.2\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=seed,shuffle=True, stratify=y)","e16a79ca":"unique, counts = np.unique(y_train, return_counts=True)\nprop= counts[0]\/counts[1]\nprop","243bbd58":"dtrain = xgb.DMatrix(\n        X_train,\n        y_train)\n\ndtest = xgb.DMatrix(\n        X_test,\n        y_test)","4a72e8d4":"EDA_model = xgb.train(\n                        {\n                          'eta': 0.1,               \n                          'colsample_bytree' : 1,\n                          'sample_type': 'weighted',\n                          'min_child_weight':1,\n                          'max_delta_step':1,\n                          'max_depth': 20,\n                          'subsample': 0.8,\n                          'objective': 'binary:logistic',\n                          'n_estimators':1,\n                          'scale_pos_weight':prop,\n                          'num_parallel_tree':2,\n                          'gamma': 10,\n                          'alpha' : 20,\n                          'lambda': 50,\n                          'silent': True,\n                          'verbose_eval': False,\n                          'tree_method':'hist', \n                          'grow_policy':'depthwise',\n                          'max_bin':200               \n                        },\n                        dtrain,\n                        num_boost_round=500, evals=[(dtrain, 'train'),(dtest,'test')])","e3c93b61":"prediction = EDA_model.predict(dtest)\nplot_importance(EDA_model, height=0.2,max_num_features=20)","99dd0d12":"auc = roc_auc_score(y_test, prediction)\nprint(\"Auc en el test : \", auc)","3f25ac09":"icu_data['AGE_PERCENTIL'].value_counts()","d665e6d1":"icu_data['WINDOW'].value_counts()","b0fc6cf4":"patients = icu_data.groupby(level=0).mean()\npatients.head(3)","1f6b8eb2":"icu_patients = patients.loc[patients['ICU'] != 0]\nicu_patients.info()","c47ee604":"def stringtonum():\n        #organized in such way that follows the relationships\n\n    ages = icu_data['AGE_PERCENTIL'].replace({ '10th':0.1, '20th':0.2, '30th':0.3,\n                                               '40th':0.4,'50th': 0.5, '60th':0.6,\n                                               '70th':0.7, '80th':0.8, '90th':0.9,\n                                               'Above 90th':0.9})\n    windows = icu_data['WINDOW'].replace({'0-2': 1, '2-4':2, '4-6':3, '6-12':4,\n                                                         'ABOVE_12':5})\n    \n    icu_data['AGE_PERCENTIL'] = ages\n    icu_data['WINDOW'] = windows","e4996d3b":"print('The number of unique ids on the dataset is: ',icu_data.index.nunique(),'Total length is: ',len(icu_data.index))","9d74d8cb":"def will_need_one():\n    #Create a target variable that tells if the person with those stats will need an ICU or not\n    #knowing the future admission\n    maxim_values=icu_data['ICU'].groupby(level=0).max() \n    icu_data['WILL_NEED_ONE']=np.repeat(maxim_values,5)\n    ","68dffe48":"stringtonum()\nwill_need_one()\nicu_data[['ICU','WILL_NEED_ONE']].head(20)","a89e8683":"icu_data['WILL_NEED_ONE'].value_counts()","42e406b6":"out_icu_df = icu_data.loc[icu_data['ICU']==0]\nout_icu_df.head()","d32f7a2d":"X = out_icu_df.drop(['ICU','WILL_NEED_ONE'], axis=1)\ny = out_icu_df[['WILL_NEED_ONE']]","52faf5fc":"seed = 2\ntest_size = 0.2\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=seed,shuffle=True, stratify=y)","c1edfab1":"unique , counts = np.unique(y_train, return_counts=True)\nprop=counts[0]\/counts[1]\nprop","957daa97":"dtrain = xgb.DMatrix(\n        X_train,\n        y_train)\ndtest = xgb.DMatrix(\n        X_test,\n        y_test)","7f5fa045":"EDA_model_2 = xgb.train(\n                        {\n                          'eta': 0.1,               \n                          'colsample_bytree' : 1,\n                          'sample_type': 'weighted',\n                          'min_child_weight':1,\n                          'max_delta_step':1,\n                          'max_depth': 20,\n                          'subsample': 0.8,\n                          'objective': 'binary:logistic',\n                          'n_estimators':1,\n                          'scale_pos_weight':prop,\n                          'num_parallel_tree':2,\n                          'gamma': 10,\n                          'alpha' : 20,\n                          'lambda': 50,\n                          'silent': True,\n                          'verbose_eval': False,\n                          'tree_method':'hist', \n                          'grow_policy':'depthwise',\n                          'max_bin':200               \n                        },\n                        dtrain,\n                        num_boost_round=500, evals=[(dtrain, 'train'),(dtest,'test')])","856d4bd5":"prediction = EDA_model_2.predict(dtest)\nplot_importance(EDA_model_2, height=0.2, max_num_features=20)","611974ae":"auc = roc_auc_score(y_test, prediction)\nprint('AUC Score: ',auc)","119b0f25":"icu_data.isnull().sum()","8de0eed3":"klib.missingval_plot(icu_data)","7c7b07c3":"icu_data[['ALBUMIN_MAX','CALCIUM_MEAN']].plot(grid=True)","fa53f9ad":"icu_data[['ALBUMIN_MAX','CALCIUM_MEAN']].head(10)","aafea3d9":"Proportion of the labels.","50ed7a29":"### Modelling (EDA) #2\n\nHere we'll continue using XGBoost because other alternatives like lightgbm or HistGradientBoosting don't perform as good as xgb on small datasets.","95887c01":"People that will need an ICU are almost balanced with people that wont need one. Our next step would be select the data where ICU = 0 (are still out of the ICU), we will model that and we'll see how it goes, and if the most important features remain the same, or there's some change between the ones useful to predict, and the ones useful to classify.","d8ca623a":"There's a small difference in the mean values, so the model is somewhat likely to perform well.","1fb3f128":"This is my first Covid-19 Project, the idea is to predict if a patient that has just arrived at the hospital will need an admission in the ICU or not. ","ada8b3e0":"According to the Klib plot, there is a pattern in the way the missing data appear, so let's have a look at one of those features and see how this happens.","df97e4ed":"With this model we could classify a patient **inside** the ICU and **outside** of it with an AUC of 90%, hence we can take into account the importance of the variables and define which ones are the most related to the difference.\n\nThe most important variables include the respiratory_rate (max,mean, diff_rel), blood pressure (sistolic and diastolic), Lactate (median), neutrophiles (median), age above 65, oxigen_saturation (min & max), HTN, temperature (mean), gender, heart rate (median), and others.\n\nThese features help us with the classification, BUT, we need to predict as early as possible.","fd4ae8f3":"Now that we have extracted the trainning data, we can see that we have various kind of windows, so a Shuffle must be done, and there would be some patients with less training data than the others, so Maybe an oversampling can help if the model doesn't fit good enough.","cc1bd916":"All patients with ICU different from 0, are patients that were internalized in the ICU.","cb6c7736":"### Modelling (EDA)","a22ddcc5":"There are 195 patients in ICU from a total of 385 patients, leaving 190 patients out of ICU. We can assume that this is a balanced dataset in terms of patients.","521baff8":"There are a lot of missiong values compared to the data size. This time I'm gonna use Klib for handling these. Klib is a python library that focus on handling missing values, and facilitate some basic data exploration and analysis.\n","a71c161c":"### Fill Nan Values","39c6aeef":"There are a lot of variables, so we will make a first model that shows us which of these are the most important, and analyze those.","6f587d91":"# Predict ICU Admissions","0976e99e":"### EDA","55014d8a":"The ICU shows when was a patient internalized acording to the WINDOW ","080a46b7":"The WINDOW is a column that is well organized among all the patients, each patient has the corresponding 5 time windows.","3cd22580":"> The age percentil and the window are variables that could be one-label encoded, but, there is a relationship inside the values. A high age percentil is higher than others, an advanced windows is more in the future than the others. These relations should be taken into account by the model.","8aa147ae":"Let's fill some Nan values.","e31763b9":"Before filling missing values, we should make another EDA model for another target variable that tells us what we want to predict. So first let's create this variable.","376bbbbf":"Removing data inside the ICU.","acefccdc":"### Feature Engineering\n\nThere are some features to create, and some data to fill. We should map the **age percentil** and the **window** to numerical. Fill **missing data** on columns, create a **new target** variable for the classification that shows whether a patient is going to enter the ICU or not.\n\nThis feature engineering will be just the essential, we can also include the time derivative of the features to show the model in a clear way if a patient is improving, or getting worse, but, if we get an accurate model without it, it won't be necessary.","0e6bb30a":"The AUC score in this model is not as good as we wanted (at least 80%). We can: \n1. Create other variables that help us improve these scores (like the temporal derivades, PCA, relations). \n2. Use other models, and\/or ensembles.\n3. Drop non-important features and change the nature of the decisions inside the tree.\n4. Fill the Nan values in a smart way.\n\n> The most important variables include the respiratory_rate (max,mean, diff_rel), blood pressure (sistolic and diastolic), Lactate (median), neutrophiles (median), age above 65, oxigen_saturation (min & max), HTN, temperature (mean), gender, heart rate (median), and others."}}