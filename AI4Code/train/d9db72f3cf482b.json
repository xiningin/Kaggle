{"cell_type":{"ce975916":"code","e3ff3e83":"code","80b53f4a":"code","50999a32":"code","c31bd527":"code","50c0ea5e":"code","381e3218":"code","7a150f79":"code","f3b75267":"code","d72fe054":"code","a6428181":"code","4f4e7d64":"code","3b9af367":"code","ca5bdeaf":"code","41571c88":"code","5b8b9c44":"code","3102da16":"code","69bb64ba":"code","86aea074":"code","2975031b":"code","57e57394":"code","ac1ddcc1":"code","d3768068":"code","41d863f6":"code","6c8121e9":"code","ec33d990":"code","87a18f31":"code","f8e3d6e7":"code","a7322875":"code","978ae04a":"code","fff7fe2c":"code","e4ffa9f8":"code","626b3640":"code","6cf756ac":"code","05927e2b":"code","9da1e7cb":"code","107c325e":"code","adb68fa9":"code","4487c9ae":"code","bcf87142":"code","80a10248":"code","c77cecfb":"code","03307d7d":"code","536650de":"code","4d674d42":"code","bfe7c405":"markdown","95813d60":"markdown","9b278de8":"markdown","c1000dcb":"markdown","3521a7cd":"markdown","9d3f2520":"markdown","a00ef8f8":"markdown","75122506":"markdown","4beeb398":"markdown","c82d945c":"markdown","0eb58d7a":"markdown","590f9f81":"markdown","5f288aad":"markdown","34f297d0":"markdown"},"source":{"ce975916":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn import tree, linear_model, ensemble, neural_network, svm\nfrom sklearn.model_selection import cross_val_score, GridSearchCV, train_test_split\nfrom sklearn.metrics import accuracy_score, roc_auc_score\nfrom sklearn.utils import shuffle\nfrom graphviz import Source\nfrom IPython.display import Image","e3ff3e83":"train_data = pd.read_csv('..\/input\/train.csv')\ntrain_data = shuffle(train_data, random_state=0)","80b53f4a":"train_data.head()","50999a32":"train_data.info()","c31bd527":"# Select the columns I'd like to use\nX = train_data[['Pclass', 'Sex', 'Age', 'Name', 'Parch', 'SibSp', 'Embarked']].copy()","50c0ea5e":"# Since Pclass represent boarding classes, it should be treated as a categorical variable\nX.Pclass = X.Pclass.astype('category')","381e3218":"# Simply dropping NaN values for Age does not seem like a good idea. Let's try replacing them\n# with mean values.\n#Y.drop(X[pd.isna(X.Age)].index, inplace=True)\n#X.drop(X[pd.isna(X.Age)].index, inplace=True)\nX.Age = X.Age.fillna(X.Age.mean())","7a150f79":"# Hmm, how about extracting family names from the list and convert them into integers?\nX.Name = X.Name.str.lower()\n\n# NOTE: There should parentheses that group the whole regular expression together \n# in order to make pandas recognize it\nX.Name = X.Name.str.extract(r'(.+(?=,))')\n\n# Converter function\ndef convert_word_to_int(word):\n    result = '';\n    \n    for i, character in enumerate(word):\n        if i >= 6:\n            break\n        else:\n            result += str(ord(character))\n    \n    return int(result)\n\nX.Name = X.Name.map(convert_word_to_int)","f3b75267":"# Fill NaN values for 'Embarked' with the most frequent value\nX.Embarked = X.Embarked.fillna(X.Embarked.mode())","d72fe054":"# Convert categorical variables into dummy variables\nX = pd.get_dummies(X, dummy_na=False)","a6428181":"# Min-Max Scaling\nmin_max_scaler = MinMaxScaler()\nX[['Age', 'Name', 'Parch', 'SibSp']] = min_max_scaler.fit_transform(X[['Age', 'Name', 'Parch', 'SibSp']])","4f4e7d64":"# Total Number of Data Points\nprint(len(X))","3b9af367":"X.head()","ca5bdeaf":"# Get the dependent variable - or just Y\nY = train_data[['Survived']].copy()","41571c88":"Y.head()","5b8b9c44":"Y = Y.values.ravel()","3102da16":"submission_data = pd.read_csv('..\/input\/test.csv')","69bb64ba":"submission_data.head()","86aea074":"# Need to do the same preprocessing done previously on the training data\n\nX_submission = submission_data[['Pclass', 'Sex', 'Age', 'Name', 'Parch', 'SibSp', 'Embarked']].copy()\n\nX_submission.Pclass = X_submission.Pclass.astype('category')\n\n# Simply dropping NaN values for Age does not seem like a good idea. Let's try replacing them\n# with mean values.\nX_submission.Age = X_submission.Age.fillna(X_submission.Age.mean())\n\n# Hmm, how about extracting family names from the list and convert them into integers?\nX_submission.Name = X_submission.Name.str.lower()\n# NOTE: There should parentheses that group the whole regular expression together in order to make pandas recognize it\nX_submission.Name = X_submission.Name.str.extract(r'(.+(?=,))')\n\n# Converter function\ndef convert_word_to_int(word):\n    result = '';\n    \n    for i, character in enumerate(word):\n        if i >= 6:\n            break\n        else:\n            result += str(ord(character))\n    \n    return int(result)\n\nX_submission.Name = X_submission.Name.map(convert_word_to_int)\n\n# Fill NaN values for 'Embarked' with the most frequent value\nX_submission.Embarked = X_submission.Embarked.fillna(X_submission.Embarked.mode())\n\n# Dummy Variables\nX_submission = pd.get_dummies(X_submission, dummy_na=False)\n\n# Min-Max Scaling\nX_submission[['Age', 'Name', 'Parch', 'SibSp']] = min_max_scaler.fit_transform(X_submission[['Age', 'Name', 'Parch', 'SibSp']])","2975031b":"X_submission.head()","57e57394":"# Spit the train data for training and testing (because test.csv does not contain answers)\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state=0)","ac1ddcc1":"# lines adapted from https:\/\/stackoverflow.com\/questions\/31161637\/grid-search-cross-validation-in-sklearn#31162095\n\ndecision_tree_param_grid = {\n    'min_samples_leaf': np.linspace(0.01, 0.5),\n    'max_depth': np.arange(2, 11)\n}\n\ndecision_tree_grid_search = GridSearchCV(tree.DecisionTreeClassifier(), decision_tree_param_grid)\n\ndecision_tree_grid_search.fit(X_train, Y_train)\ndecision_tree_grid_search_preds = decision_tree_grid_search.predict_proba(X_train)[:, 1]\ndecision_tree_grid_search_performance = roc_auc_score(Y_train, decision_tree_grid_search_preds)\n\nprint('DecisionTree: Area under the ROC curve = {}'.format(decision_tree_grid_search_performance))\nprint(decision_tree_grid_search.best_params_)","d3768068":"decision_tree_classifier = tree.DecisionTreeClassifier(\n    min_samples_leaf=decision_tree_grid_search.best_params_['min_samples_leaf'],\n    max_depth=decision_tree_grid_search.best_params_['max_depth']\n)\ndecision_tree_classifier = decision_tree_classifier.fit(X_train, Y_train)","41d863f6":"graph = Source( tree.export_graphviz(decision_tree_classifier, out_file=None, feature_names=X_train.columns))\n\npng_bytes = graph.pipe(format='png')\n\nwith open('decison_tree_pipe.png','wb') as f:\n    f.write(png_bytes)\n\nImage(png_bytes)","6c8121e9":"decison_tree_cross_validation_scores = cross_val_score(decision_tree_classifier, X_train, Y_train, cv=5)\nprint(decison_tree_cross_validation_scores)","ec33d990":"decision_tree_predictions = decision_tree_classifier.predict(X_test)\nprint(accuracy_score(Y_test, decision_tree_predictions))","87a18f31":"decision_tree_submission_prediction = decision_tree_classifier.predict(X_submission)","f8e3d6e7":"decision_tree_submission_prediction","a7322875":"with open('submission_decisiontree.csv', 'w') as submission_file:\n    submission_file.writelines('PassengerId,Survived\\n')\n    \n    for i in range(len(decision_tree_submission_prediction)):\n        newline_string = str(submission_data['PassengerId'].iloc[i]) + ',' + str(decision_tree_submission_prediction[i]) + '\\n'\n        submission_file.writelines(newline_string)","978ae04a":"logistic_regression_classifier = linear_model.LogisticRegression(random_state=0, solver='lbfgs', multi_class='ovr', fit_intercept=True)\nlogistic_regression_classifier = logistic_regression_classifier.fit(X_train, Y_train)","fff7fe2c":"logistic_predictions = logistic_regression_classifier.predict(X_test)\nprint(accuracy_score(Y_test, logistic_predictions))\nlogistic_cross_validation_scores = cross_val_score(logistic_regression_classifier, X_train, Y_train, cv=5)\nprint(logistic_cross_validation_scores)","e4ffa9f8":"logistic_submission_prediction = logistic_regression_classifier.predict(X_submission)","626b3640":"with open('submission_logistic.csv', 'w') as submission_file:\n    submission_file.writelines('PassengerId,Survived\\n')\n    \n    for i in range(len(logistic_submission_prediction)):\n        newline_string = str(submission_data['PassengerId'].iloc[i]) + ',' + str(logistic_submission_prediction[i]) + '\\n'\n        submission_file.writelines(newline_string)","6cf756ac":"# lines adapted from https:\/\/stackoverflow.com\/questions\/31161637\/grid-search-cross-validation-in-sklearn#31162095\n\ngradient_boosting_param_grid = {\n    #'min_samples_leaf': np.linspace(0.01, 0.5),\n    'max_depth': np.arange(2, 11),\n    'n_estimators': np.arange(10, 26)\n}\n\ngradient_boosting_grid_search = GridSearchCV(ensemble.GradientBoostingClassifier(), gradient_boosting_param_grid)\n\ngradient_boosting_grid_search.fit(X_train, Y_train)\ngradient_boosting_grid_search_preds = gradient_boosting_grid_search.predict_proba(X_train)[:, 1]\ngradient_boosting_grid_search_performance = roc_auc_score(Y_train, gradient_boosting_grid_search_preds)\n\nprint('Gradient Boosting: Area under the ROC curve = {}'.format(gradient_boosting_grid_search_performance))\nprint(gradient_boosting_grid_search.best_params_)","05927e2b":"gradient_boosting_classifier = ensemble.GradientBoostingClassifier(\n    #min_samples_leaf=gradient_boosting_grid_search.best_params_['min_samples_leaf'],\n    n_estimators=10,\n    max_depth=3\n)\ngradient_boosting_classifier = gradient_boosting_classifier.fit(X_train, Y_train)\n\ngradient_boosting_predictions = gradient_boosting_classifier.predict(X_test)\nprint(accuracy_score(Y_test, gradient_boosting_predictions))\n\ngradient_boosting_cross_validation_scores = cross_val_score(gradient_boosting_classifier, X_train, Y_train, cv=5)\nprint(gradient_boosting_cross_validation_scores)\n\ngradient_boosting_submission_prediction = gradient_boosting_classifier.predict(X_submission)","9da1e7cb":"with open('submission_gradient_boosting.csv', 'w') as submission_file:\n    submission_file.writelines('PassengerId,Survived\\n')\n    \n    for i in range(len(gradient_boosting_submission_prediction)):\n        newline_string = str(submission_data['PassengerId'].iloc[i]) + ',' + str(gradient_boosting_submission_prediction[i]) + '\\n'\n        submission_file.writelines(newline_string)","107c325e":"# lines adapted from https:\/\/stackoverflow.com\/questions\/31161637\/grid-search-cross-validation-in-sklearn#31162095\n\nadaboost_param_grid = {\n    'n_estimators': np.arange(10, 26)\n}\n\nadaboost_grid_search = GridSearchCV(ensemble.AdaBoostClassifier(), adaboost_param_grid)\n\nadaboost_grid_search.fit(X_train, Y_train)\nadaboost_grid_search_preds = adaboost_grid_search.predict_proba(X_train)[:, 1]\nadaboost_grid_search_performance = roc_auc_score(Y_train, adaboost_grid_search_preds)\n\nprint('AdaBoost: Area under the ROC curve = {}'.format(adaboost_grid_search_performance))\nprint(adaboost_grid_search.best_params_)","adb68fa9":"adaboost_classifier = ensemble.AdaBoostClassifier(n_estimators=12)\nadaboost_classifier = adaboost_classifier.fit(X_train, Y_train)\nadaboost_predictions = adaboost_classifier.predict(X_test)\nprint(accuracy_score(Y_test, adaboost_predictions))\n\nadaboost_cross_validation_scores = cross_val_score(adaboost_classifier, X_train, Y_train, cv=5)\nprint(adaboost_cross_validation_scores)\n\nadaboost_submission_prediction = adaboost_classifier.predict(X_submission)","4487c9ae":"with open('submission_adaboost.csv', 'w') as submission_file:\n    submission_file.writelines('PassengerId,Survived\\n')\n    \n    for i in range(len(adaboost_submission_prediction)):\n        newline_string = str(submission_data['PassengerId'].iloc[i]) + ',' + str(adaboost_submission_prediction[i]) + '\\n'\n        submission_file.writelines(newline_string)","bcf87142":"# lines adapted from https:\/\/stackoverflow.com\/questions\/31161637\/grid-search-cross-validation-in-sklearn#31162095\n\nrandom_forest_param_grid = {\n    #'min_samples_leaf': np.linspace(0.01, 0.5),\n    'max_depth': np.arange(2, 11),\n    'n_estimators': np.arange(10, 26)\n}\nrandom_forest_grid_search = GridSearchCV(ensemble.RandomForestClassifier(), random_forest_param_grid)\n\nrandom_forest_grid_search.fit(X_train, Y_train)\nrandom_forest_grid_search_preds = random_forest_grid_search.predict_proba(X_train)[:, 1]\nrandom_forest_grid_search_performance = roc_auc_score(Y_train, random_forest_grid_search_preds)\n\nprint('Random Forest: Area under the ROC curve = {}'.format(random_forest_grid_search_performance))\nprint(random_forest_grid_search.best_params_)","80a10248":"random_forest_classifier = ensemble.RandomForestClassifier(\n    #min_samples_leaf=random_forest_grid_search.best_params_['min_samples_leaf'],\n    n_estimators=13,\n    max_depth=3\n)\n\nrandom_forest_classifier = random_forest_classifier.fit(X_train, Y_train)\nrandom_forest_predictions = random_forest_classifier.predict(X_test)\nprint(accuracy_score(Y_test, random_forest_predictions))\nrandom_forest_submission_prediction = random_forest_classifier.predict(X_submission)","c77cecfb":"with open('submission_random_forest.csv', 'w') as submission_file:\n    submission_file.writelines('PassengerId,Survived\\n')\n    \n    for i in range(len(random_forest_submission_prediction)):\n        newline_string = str(submission_data['PassengerId'].iloc[i]) + ',' + str(random_forest_submission_prediction[i]) + '\\n'\n        submission_file.writelines(newline_string)","03307d7d":"mlp_classifier = neural_network.MLPClassifier(\n    learning_rate='adaptive',\n    solver='adam',\n    #early_stopping=True,\n    verbose=True,\n    shuffle=True\n)\nmlp_classifier = mlp_classifier.fit(X_train, Y_train)\nmlp_predictions = mlp_classifier.predict(X_test)\nprint(accuracy_score(Y_test, mlp_predictions))\nmlp_submission_prediction = mlp_classifier.predict(X_submission)","536650de":"with open('submission_mlp.csv', 'w') as submission_file:\n    submission_file.writelines('PassengerId,Survived\\n')\n    \n    for i in range(len(mlp_submission_prediction)):\n        newline_string = str(submission_data['PassengerId'].iloc[i]) + ',' + str(mlp_submission_prediction[i]) + '\\n'\n        submission_file.writelines(newline_string)","4d674d42":"svm_classifier = svm.SVC(kernel='linear')\nsvm_classifier = svm_classifier.fit(X_train, Y_train)\nsvm_predictions = svm_classifier.predict(X_test)\nprint(accuracy_score(Y_test, svm_predictions))\nsvm_submission_prediction = svm_classifier.predict(X_submission)","bfe7c405":"# Models","95813d60":"### Grid search for good parameter values","9b278de8":"## AdaBoost Classifier","c1000dcb":"## Support Vector Machines","3521a7cd":"### Grid search for good parameter values","9d3f2520":"## Gradient Boosting Classifier","a00ef8f8":"## Random Forest Classifier","75122506":"### Grid search for good parameter values","4beeb398":"### Grid search for good parameter values","c82d945c":"## Logistic Regression","0eb58d7a":"# Data Preprocessing","590f9f81":"## Multi-layer Perceptron ","5f288aad":"## Decision Tree Classifier","34f297d0":"# Load the data"}}