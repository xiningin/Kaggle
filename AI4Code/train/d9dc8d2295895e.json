{"cell_type":{"6f213c3e":"code","377d8bbd":"code","7b0f85e2":"code","0a910d23":"code","4320ebe5":"code","d13d898d":"code","6f79726b":"code","924c683e":"code","7aae7f59":"code","149af7bf":"code","7ca54c47":"code","cf672b77":"markdown","86005eb7":"markdown","a21f37cf":"markdown","b64476dd":"markdown","79d4347f":"markdown","230da1bc":"markdown","e433395b":"markdown","6b75913c":"markdown","150d5ce1":"markdown","5e1ca151":"markdown"},"source":{"6f213c3e":"# Install W&B for experiment tracking and Visualizations\n!pip install --upgrade -q wandb\n\n# Install pycbc to do easy preprocessing of the data\n# Thanks AlexNitz for intruducing this library\n!pip -q install pycbc\n\n# General imports\nimport os\nos.environ['WANDB_SILENT'] = \"true\"\nimport gc \nimport glob\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Deeplearning import\nimport tensorflow as tf\nprint(f'TensorFlow version: {tf.__version__}')\n\n# PyCBC imports\nimport pylab\nimport pycbc.types\n\n# W&B imports\nimport wandb\nfrom wandb.keras import WandbCallback\n\nwandb.login()","377d8bbd":"CONFIG = {'competition': 'g2net', '_wandb_kernel': 'ayut'}","7b0f85e2":"TRAIN_PATH = '..\/input\/g2net-gravitational-wave-detection\/train\/'\ntrain_files = glob.glob(TRAIN_PATH+'*\/*\/*\/*')\n\nexample_file = train_files[0].split('\/')[-1]\nprint(f'Example data sample: {example_file}, number of data samples: {len(train_files)}')","0a910d23":"example_data = np.load(train_files[0])\nprint(f'Shape of the example data: {example_data.shape}')","4320ebe5":"run = wandb.init(project='G2Net', config=CONFIG)\nwandb.log({\"example_data\": wandb.plot.line_series(\n                       xs=np.arange(2048), \n                       ys=[example_data[0][::2], example_data[1][::2], example_data[2][::2]],\n                       keys=[\"LIGO Hanford\", \"LIGO Livingston\", \"Virgo\"],\n                       title=\"Example Data\",\n                       xname=\"time\")})\nrun.finish()\nrun","d13d898d":"train_df = pd.read_csv('..\/input\/g2net-gravitational-wave-detection\/training_labels.csv')\nprint(f'Size of training_labels.csv: {len(train_df)}')\ntrain_df.head()","6f79726b":"plt.figure(figsize=(16, 5))\nax = sns.countplot(data=train_df, y=\"target\")\nax.set_title(\"Distribution of Labels\");\nprint(train_df.target.value_counts())","924c683e":"def get_constant_q_transform(file_name, esp=1e-6, normalize=True):\n    # load the specific 2s sample\n    data = np.load(file_name)\n\n    channels = []\n    for i in range(3):\n        # convert the data to a TimeSeries instance\n        ts = pycbc.types.TimeSeries(data[i, :], epoch=0, delta_t=1.0\/2048) \n\n        # whiten the data (i.e. normalize the noise power at different frequencies)\n        ts = ts.whiten(0.125, 0.125)\n\n        # calculate the qtransform\n        time, freq, power = ts.qtransform(.002, logfsteps=100, qrange=(10, 10), frange=(20, 512))\n        \n        # normalize and scale to 0-255\n        if normalize:\n            mean = power.mean()\n            std = power.std()\n\n            power = (power - mean) \/ (std + esp)\n            _min, _max = power.min(), power.max()\n\n            power[power < _min] = _min\n            power[power > _max] = _max\n            power = 255 * (power - _min) \/ (_max - _min)\n            power = power.astype(np.uint8)\n    \n        channels.append(np.flip(power, 0))\n        \n    return channels, np.vstack(channels), np.dstack(channels)","7aae7f59":"# Visualize images\nsample_size = 20\nexample_files = np.random.choice(train_files, size=sample_size)\n\nchannels_arr, vstacked_arr, dstacked_arr, target, ids = [], [], [], [], []\nfor example_file in tqdm(example_files):\n    # get id name\n    example_id = example_file.split('\/')[-1].split('.')[0]\n    # get constant q transforms of individual inferometer and stacked transforms as well\n    channels, vstacked, dstacked = get_constant_q_transform(example_file, normalize=True)\n    \n    # append the data to lists\n    channels_arr.append(channels)\n    vstacked_arr.append(vstacked)\n    dstacked_arr.append(dstacked)\n    ids.append(example_id)\n    target.append(train_df.loc[train_df.id==example_id].target.values[0])","149af7bf":"idx = 2\nprint(target[idx])\nplt.figure(figsize=(16,5))\nplt.imshow(vstacked_arr[idx])\nplt.savefig('cqt_3.png')","7ca54c47":"# Visualize spectrogram from individual inferometers\nrun = wandb.init(project='G2Net', config=CONFIG)\n# Create W&B Tables\nsample_data_tables = wandb.Table(columns=[\"id\", \"LIGO Hanford\", \"LIGO Livingston\", \"Virgo\", \"vstacked\", \"dstacked\", \"label\"])\n# Iterate through the data and add them to the tables\nfor i in tqdm(range(sample_size)):\n    # Append each example as a new row in Table.\n    sample_data_tables.add_data(ids[i],\n                                wandb.Image(tf.image.resize(tf.expand_dims(channels_arr[i][0],-1), (224,224))),\n                                wandb.Image(tf.image.resize(tf.expand_dims(channels_arr[i][1],-1), (224,224))),\n                                wandb.Image(tf.image.resize(tf.expand_dims(channels_arr[i][2],-1), (224,224))),\n                                wandb.Image(tf.image.resize(tf.expand_dims(vstacked_arr[i],-1), (224,224))),\n                                wandb.Image(tf.image.resize(dstacked_arr[i], (224,224))),\n                                target[i])\n    \nwandb.log({'wandb_viz': sample_data_tables})\nwandb.finish()\n\nrun","cf672b77":"> Head over to https:\/\/wandb.ai\/authorize to access your W&B API token. :)","86005eb7":"![img](https:\/\/i.imgur.com\/twvZap3.png)\n\n# Introduction\n\n## What's Gravitational Wave?\n\n> Gravitational waves are ripples in space-time (the fabled \u201cfabric\u201d of the Universe) caused by massive objects moving with extreme accelerations. In outer space that means objects like neutron stars or black holes orbiting around each other at ever increasing rates, or stars that blow themselves up. ([Source](https:\/\/www.ligo.caltech.edu\/page\/gravitational-waves)) \n\nThe presence of GW was first proposed by Einstein in his paper General Theory of Relativity paper in 1916. The first proof indicating the presence of GW however, came in 1974 and further works confirmed the presence of GW. Note that all these were indirect proofs indicating the presence of GW. The first time the GW was actually (physically) measured was in September 14, 2015 by LIGO inferometer caused by gravitational waves generated by two colliding black holes 1.3 billion light-years away.\n\nNote that events creating such GWs are violent and catastrophic, however, by the time these waves reach us they are thousands of billions of times smaller in magnitude. The amount of space-time wobbling that was detected as GW was a 1000 times smaller than the nucleus of an atom! Indeed LIGO is an engineering feet and the science is, well I can't even put words to the thrill I feel thinking about it. Learn more about GWs [here](https:\/\/www.ligo.caltech.edu\/page\/what-are-gw).\n\n## Why bother detecting such miniscule signals?\n\nI wanted to write something original after reading it [here](https:\/\/www.ligo.caltech.edu\/page\/why-detect-gw). I will just quote a paragraph as it is,\n\n> Imagine humans were a species that only had eyes and no ears. You can learn a lot about the world around you simply by studying the light from objects. Then one day, someone invents something they call an ear. This device senses vibrations in air or water that you could not have known existed before. This ear opens up an entirely new realm of observation that you didn't have access to simply by studying electromagnetic radiation (ight)! As an antenna able to detect vibrations in the 'medium' of space-time, LIGO is akin to a human ear able to detect vibrations in a medium like air or water. ([Source](https:\/\/www.ligo.caltech.edu\/page\/why-detect-gw))\n\nGWs are generated by violent cosmic activities - blackhole colliding,supernovae explosion, or maybe *birth of a new universe*! GWs don't interact with matter like electromagnetic radiations (reflect, refract, distortion, etc) and thus carries undistorted information about the origin of the wave. \n\n## Sources and Types of Gravitational Waves\n\nThere are four types of gravitational waves depending on the source of the waves ([Source](https:\/\/www.ligo.caltech.edu\/page\/gw-sources)):\n\n- Continuous Gravitational Waves: Continuous gravitational waves are thought to be produced by a single spinning massive object like a neutron star. Any bumps on or imperfections in the spherical shape of this star will generate gravitational waves as it spins. [This is how a Continus GW will sound like to LIGO](http:\/\/www.black-holes.org\/sound\/Periodic.wav). \n\n- Compact Binary Inspiral Gravitational Waves: Compact binary inspiral gravitational waves are produced by orbiting pairs of massive and dense (\"compact\") objects like white dwarf stars, black holes, and neutron stars. All the GWs detected so far by LIGO falls under this category. \n\n    A spinning pair of compact objects orbit each other and in the process release some of the orbital energy as gravitational waves. Due to this release of orbital energy, they move closer and closer, orbiting faster thus releasing more energy as gravitational waves and this goes on till the objects merge together. You may note that this process takes millions and billions of years and the strongest gravitational wave generated is at the \"final\" moment of before two objects collide. This mechanism of wave generation is called \"inspiral\". The inspiral for two black holes is shorter than that of two neutron stars. \n    \n    > The first pair of merging black holes that LIGO detected produced a signal just two-tenths of a second long. In contrast, the first neutron star merger LIGO detected in August 2017 generated a signal over 100 seconds long in our instruments.\n    \n    The competition data is simulating gravitational waves generated by merging of two black holes. This is evident by this paragraph in the Data section:\n    \n    > The parameters that determine the exact form of a binary black hole waveform are the masses, sky location, distance, black hole spins, binary orientation angle, gravitational wave polarisation, time of arrival, and phase at coalescence (merger). These parameters (15 in total) have been randomised according to astrophysically motivated prior distributions and used to generate the simulated signals present in the data, but are not provided as part of the competition data. \n    \n    I will highly encourage to watch this YouTube video [Journey of a Gravitational Wave](https:\/\/www.youtube.com\/watch?v=FlDtXIBrAYE). Listen to these two detected sounds:\n    \n    - [The Sound of Two Black Holes Colliding](https:\/\/www.youtube.com\/watch?v=QyDcTbR-kEA) <br>\n    - [First LIGO\/Virgo detection of a binary neutron star merger (GW170817)](https:\/\/www.youtube.com\/watch?v=_SQbaILipjY)\n    \n- Stochastic Gravitational Waves: If massive objects create ripples through space-time there should be ripples all over the space-time fabric. Waves from the time of big bang itself and multiple black holes colliding must mass through earth everytime. These Stochastic GWs are random (mixed) waves passing through universe all the time. These are the hardest GWs to detect. These waves are detected statistically and not precisely. \n \n- Burst Gravitational Waves: Given so many uncertainities about this universe, the limitation of current Physics we have, etc it's hard to model every type of GWs. Burst GWs are waves generated by a system not modeled before or are wave patterns not thought of before. It's like finding without knowing what to find.  \n   \n    \n## Why is the data time series? \n\nIf \"everything\" is stretching due to GW how to say \"anything\" is stretching. In this case, \"everything\" is space-time being \"stretched\" and \"squished\" by GW and \"anything\" is the LASER that is used in the LIGO Inferometer. Now that's a conundrum. \n\nThe LASER beam is sent down through the arms of the LIGO tube which then bounces back from the end of the tube. This forth and back take a very very short time. If GW happens to pass through earth, the immediate LASER in the tube is stretched so is the space around it. But we don't just know if that LASER was stretched when if bounce back to the detector since everything was stretched. However, since GW is a wave, the second LASER sent through the tube has to travel a bigger distance due to stretched space. By looking at how this interference is changing *with time* and since the wavelength of the LASER is fixed we can detect the stretch and squish of the space. ","a21f37cf":"# Imports and Setup","b64476dd":"> It won't be bad to say that it's a balanced dataset. I don't remember any competition with such balanced dataset. I feel good about it. \n\n> 0 corresponds to signals without GW while 1 correspnds to signals with GW. ","79d4347f":"### [Check out the W&B run page for the table shown above.](https:\/\/wandb.ai\/ayush-thakur\/G2Net\/runs\/30b6nr2w)\n\n![image.png](attachment:94d5785f-5d79-4fd1-a8ca-09ba4ede01bf.png)\n\n## Two cents on W&B Tables\n\n> WB Tables accelerate the ML development lifecycle by giving users the ability to rapidly extract meaningful insights from data. The WB Table Visualizer provides an interactive interface to perform powerful analytics functions like grouping, joining, and creating custom fields while simultaneously supporting rich media annotations such as bounding boxes and segmentation masks. WB Tables is designed generically to work well for a wide range of use cases - from analyzing intermediate data transformations to reviewing model predictions - while being directly integrated directly into the WB UI dashboard, allowing users to learn, adapt, and improve their models effectively and efficiently.","230da1bc":"The following is the directory structure. Each `.npy` file contains 3 time series and each spans 2 sec and is sampled at 2,048 Hz. The 3 time series belong to the three detectors - LIGO Hanford, LIGO Livingston, and Virgo.\n\n![img](https:\/\/i.imgur.com\/UaMkieo.png)","e433395b":"> Note that I am resampling the data. This is due to the limit of 10k data points to plot the custom charts. Taking the full data (4096 * 3 = 12288) crosses the limit. \n\n> Each data point spans for 2 seconds and sampled at 2048 Hz.","6b75913c":"# Constant Q Transform\n\n> PyCBC is a software package used to explore astrophysical sources of gravitational waves. It contains algorithms to analyze gravitational-wave data, detect coalescing compact binaries, and make bayesian inferences from gravitational-wave data. PyCBC was used in the first direct detection of gravitational waves and is used in flagship analyses of LIGO and Virgo data.\n\nThanks to @alexnitz for introducing this package. Here's the [official GitHub link to the repo](https:\/\/github.com\/gwastro\/pycbc).\n\nHere are some relevant links you might wanna check: \n\n* [PyCBC-Tutorials](https:\/\/github.com\/gwastro\/PyCBC-Tutorials)\n\n* [PyCBC Documentation](http:\/\/pycbc.org\/pycbc\/latest\/html\/)\n\nThe function `get_constant_q_transform` takes the path to the `.npy` file and returns constant Q transform for all three inferometers (`channels`), stacked as 3 channel image (`np.vstack`), and stacked below the other (`np.dstack`).\n\nThe function is performing three important step:\n\n* Converting the numpy array (data from single inferometer) to a PyCBC TimeSeries format. \n\n* \"Whitening\" the data within some frequency range. In this way excesses in the data are visible as deviations from zero. Whitening takes the data and attempts to make the power spectral density flat, so that all frequencies contribute equally.\n\n* Calculating the constant Q transform.","150d5ce1":"# Work In Progress","5e1ca151":"# Load and Visualize Data"}}