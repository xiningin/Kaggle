{"cell_type":{"b91f85f3":"code","a86f3565":"code","6f60ab5c":"code","1989dabe":"code","07be5765":"code","0b5283e3":"code","6480bc95":"code","377578a1":"code","a3b7a401":"code","f9299a1e":"code","431c86a8":"code","204586a7":"code","347519cf":"code","1e309254":"code","703374e2":"code","13120fdc":"code","67685d1a":"code","16545975":"code","c0692b5d":"code","bd3a6fbf":"code","15dad6f6":"code","c4bc479b":"code","3aecfdb5":"code","2d56f4d6":"code","37a60625":"code","182d1d8d":"code","8c8d8631":"code","29c2a1d5":"code","259d3bcb":"code","a71b4b31":"code","50789fe6":"code","98df0040":"code","3778a79c":"code","60f97f6d":"code","183d70d1":"code","1d7a9cd3":"code","64f74fa6":"code","9fa2a6cc":"code","b935781d":"code","cf99c48d":"code","363f9783":"code","177debf9":"code","ebb52001":"code","5d1a6fc6":"code","31e66205":"code","428fcd91":"code","b70bd4dd":"code","197008ae":"code","21ae9adc":"code","5fa04117":"code","eb271686":"code","98140cee":"markdown","1c076201":"markdown","299f18b0":"markdown","3656138f":"markdown","f598a10d":"markdown"},"source":{"b91f85f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a86f3565":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns","6f60ab5c":"df_train = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv\")\ndf_submission = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/submission.csv\")","1989dabe":"df_train.info()","07be5765":"df_train['Date'] = pd.to_datetime(df_train['Date'])\ndf_test['Date'] = pd.to_datetime(df_test['Date'])\n","0b5283e3":"Global_Top_Cases = df_train[df_train['Date'] == df_train['Date'].max()].groupby(['Country_Region','Date'])","6480bc95":"G_cases = Global_Top_Cases.sum().sort_values(['ConfirmedCases'], ascending = False)","377578a1":"G_cases[:10]","a3b7a401":"G1 = G_cases.drop(['Id'], axis = 1)","f9299a1e":"G1[:10]","431c86a8":"corrmat = df_train.corr()\nplt.subplots(figsize=(12,9))\nsns.heatmap(corrmat, vmax=0.9, square=True)","204586a7":"G1[:10].plot(kind = 'bar')","347519cf":"G1['ConfirmedCases_percent_change'] = G1['ConfirmedCases'].pct_change()\nG1['Fatalities_percent_change'] = G1['Fatalities'].pct_change()","1e309254":"G2 = G1.drop(['ConfirmedCases', 'Fatalities'], axis = 1)","703374e2":"G2[:10].plot(kind = 'line')\n\nx = plt.gca().xaxis\n\nfor item in x.get_ticklabels():\n    item.set_rotation(70)","13120fdc":"us = df_train[df_train['Country_Region'] == 'US'].groupby(['Province_State']).max()","67685d1a":"us_cases = us.sort_values(['ConfirmedCases'], ascending = False)","16545975":"us_cases.head()","c0692b5d":"us_cases = us_cases.drop(['Id', 'Date','Country_Region'], axis = 1)","bd3a6fbf":"us_cases[:10].plot(kind = 'bar')","15dad6f6":"us_cases['ConfirmedCases_percent_change'] = us_cases['ConfirmedCases'].pct_change()\nus_cases['Fatalities_percent_change'] = us_cases['Fatalities'].pct_change()","c4bc479b":"us_cases = us_cases.drop(['ConfirmedCases', 'Fatalities'], axis = 1)","3aecfdb5":"us_cases[:10].plot(kind = 'line')\nx = plt.gca().xaxis\nfor item in x.get_ticklabels():\n    item.set_rotation(70)","2d56f4d6":"df_train['Province_State'].fillna(\"\", inplace = True)\ndf_test['Province_State'].fillna(\"\", inplace = True)","37a60625":"df_train['Country_Region'] = df_train['Country_Region'] + ' ' + df_train['Province_State']\ndf_test['Country_Region'] = df_test['Country_Region'] + ' ' + df_test['Province_State']","182d1d8d":"df_train['Date'] = list(df_train['Date'].dt.strftime('%Y,%m,%d'))\ndf_test['Date'] = list(df_test['Date'].dt.strftime('%Y,%m,%d'))","8c8d8631":"\ndef createDateFields(df):\n    year = []\n    month = []\n    day = []\n    for i in df['Date']:\n        i = i.split(\",\")\n    \n        year.append(i[0])\n        month.append(i[1])\n        day.append(i[2])\n    df['year'] = year\n    df['month'] = month\n    df['day'] = day\n    \n    return df   \n  ","29c2a1d5":"\ndf_train = createDateFields(df_train)\ndf_test = createDateFields(df_test)\n","259d3bcb":"df_train.tail()","a71b4b31":"df_test.tail()","50789fe6":"df_train['ConfirmedCases']= df_train['ConfirmedCases'].apply(int)\ndf_train['Fatalities'] = df_train['Fatalities'].apply(int)","98df0040":"y1 = df_train.ConfirmedCases\ny2 = df_train.Fatalities\n\ndel df_train['ConfirmedCases']\ndel df_train['Fatalities']","3778a79c":"from sklearn.preprocessing import LabelEncoder","60f97f6d":"lable_encoder = LabelEncoder()\ndf_train['Country_Region'] = lable_encoder.fit_transform(df_train['Country_Region'])\ndf_test['Country_Region'] = lable_encoder.transform(df_test['Country_Region'])","183d70d1":"features = ['Country_Region', 'month', 'day']","1d7a9cd3":"X = df_train[features]","64f74fa6":"test_features = ['Country_Region', 'month', 'day']","9fa2a6cc":"X_test = df_test[test_features]","b935781d":"from sklearn.preprocessing import MinMaxScaler","cf99c48d":"min_max_scaler = MinMaxScaler()\nX = min_max_scaler.fit_transform(X.values)\nX_test = min_max_scaler.transform(X_test.values)","363f9783":"import xgboost as xgb","177debf9":"xg_reg_model1 = xgb.XGBRegressor(n_estimators = 1500,random_state = 0, max_depth = 15, learning_rate = 0.1)","ebb52001":"xg_reg_model1.fit(X,y1);","5d1a6fc6":"y_pred1 = xg_reg_model1.predict(X_test)\n","31e66205":"#y_pred1","428fcd91":"xg_reg_model2 = xgb.XGBRegressor (n_estimators = 1500,random_state =0, max_depth = 15, learning_rate = 0.1)\nxg_reg_model2.fit(X,y2);","b70bd4dd":"y_pred2 = xg_reg_model2.predict(X_test)\n","197008ae":"#y_pred2","21ae9adc":"y_pred1 , y_pred2 = np.round(y_pred1),np.round(y_pred2)\n\ny_pred1[y_pred1 < 0] = 0\ny_pred2[y_pred2 < 0] = 0\n\ndf_submission['ConfirmedCases'] = y_pred1.astype(int)\ndf_submission['Fatalities'] = y_pred2.astype(int)","5fa04117":"df_submission.head()","eb271686":"df_submission.to_csv(\"submission.csv\",index = False)","98140cee":"# ***Percent change* of Confirmed Cases and Fatalities of max affected Countries and affect of Mitigation like social distancing, shelter in place , Closed down et al.**","1c076201":"# ***Forecasting* Cases and Fatalities**","299f18b0":"# **EDA for Global *Cases* and *Fatalities* for max affected countries**","3656138f":"# ***EDA* for *US* Confirmed Cases and Fatalites by most affected *States***","f598a10d":"# ***Percent change *of Confirmed Cases and Fatalities of max affected US states and affect of *Mitigation* - Social Distancing, Shelter in place , Closed down et al.**"}}