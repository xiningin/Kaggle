{"cell_type":{"c5f91ddf":"code","0c4a0a72":"code","ef851a57":"code","d8549b22":"code","997047fb":"code","d2849768":"code","f5d8d7ee":"code","d3f05fab":"code","f724c364":"code","b0f6c4ba":"code","7338be47":"code","4fd24564":"code","b44d0281":"code","f092e1bd":"code","8ffb3418":"code","47ca7909":"code","b068d561":"code","dd311c25":"code","8e0309ea":"code","a09d22c9":"code","95fb4312":"code","10abc8b2":"code","d9b24fbf":"code","a1da5d7c":"code","6d58cbb2":"code","76ea3cb6":"code","a2ae5fd6":"code","03d5ccca":"code","989a7d68":"code","942a0f94":"code","3b8bd4fa":"code","34a0d990":"code","04a09683":"code","e5570034":"code","b9f5f4a6":"markdown","8ba4ea17":"markdown","cc74888c":"markdown","c1317055":"markdown","70ce4363":"markdown","31eead15":"markdown","08d38b0c":"markdown","46d493d9":"markdown","46780f87":"markdown","6d865969":"markdown","05582796":"markdown"},"source":{"c5f91ddf":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","0c4a0a72":"train_csv = os.path.join(\"..\/input\", \"train.csv\")\ntrain_base = pd.read_csv(train_csv)\ntrain_base.head(5)","ef851a57":"from sklearn.model_selection import train_test_split\nX = train_base.drop('SalePrice', axis=1)\ny = train_base['SalePrice'].copy()\n\nX_train, X_validate, y_train, y_validate = train_test_split(X, y, random_state=0)","d8549b22":"X_train.info()","997047fb":"X_train['Street'].factorize()","d2849768":"X_train['Alley'].factorize()","f5d8d7ee":"X_train['PoolQC'].factorize()","d3f05fab":"X_train['GarageCond'].factorize()","f724c364":"attributes = ['LotFrontage', 'LotArea', 'TotalBsmtSF', 'SalePrice']\npd.plotting.scatter_matrix(train_base[attributes], figsize=(12,8))","b0f6c4ba":"train_base.plot(kind=\"scatter\", x=\"SalePrice\", y=\"LotArea\", alpha=.1)","7338be47":"train_base.plot(kind=\"scatter\", x=\"SalePrice\", y=\"TotalBsmtSF\", alpha=.1)","4fd24564":"X_train_selected = X_train[[\"LotArea\", \"TotalBsmtSF\"]]","b44d0281":"from sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression()\nlin_reg.fit(X_train_selected, y_train)","f092e1bd":"X_train_selected.info()","8ffb3418":"from sklearn.metrics import mean_squared_error\ny_pred = lin_reg.predict(X_train_selected)\nlin_mse = mean_squared_error(y_train, y_pred)\nlin_rmse =np.sqrt(lin_mse)\nlin_rmse","47ca7909":"X_train_dummies = pd.get_dummies(X_train)\nX_train_dummies.shape","b068d561":"X_train_dummies.head(10)","dd311c25":"from sklearn.preprocessing import Imputer\nimputer = Imputer(strategy=\"mean\")\nimputer.fit(X_train_dummies)\nX_train_filled = imputer.transform(X_train_dummies)","8e0309ea":"from sklearn.ensemble import RandomForestRegressor\n\nforest_reg = RandomForestRegressor(n_estimators=200, random_state=0)\nforest_reg.fit(X_train_filled, y_train)","a09d22c9":"y_pred = forest_reg.predict(X_train_filled)\nlin_mse = mean_squared_error(y_train, y_pred)\nlin_rmse = np.sqrt(lin_mse)\nlin_rmse","95fb4312":"from sklearn.model_selection import cross_val_score\nscores = cross_val_score(forest_reg, X_train_filled, y_train, scoring=\"neg_mean_squared_error\", cv=10)\nforest_rmse_scores = np.sqrt(-scores)\n\ndef display_scores(scores):\n    print(\"Scores: \", scores)\n    print(\"Mean: \", scores.mean())\n    print(\"Standard devitation:\", scores.std())\n    \ndisplay_scores(forest_rmse_scores)","10abc8b2":"lin_reg2 = LinearRegression()\nlin_reg2.fit(X_train_filled, y_train)","d9b24fbf":"scores = cross_val_score(lin_reg2, X_train_filled, y_train, scoring=\"neg_mean_squared_error\", cv=10)\nlin_rmse_scores = np.sqrt(-scores)\ndisplay_scores(lin_rmse_scores)","a1da5d7c":"test_csv = os.path.join(\"..\/input\", \"test.csv\")\ntest_raw = pd.read_csv(test_csv)\n\ntest_concat = pd.concat([X_train, test_raw])\ntest_concat_dummies = pd.get_dummies(test_concat)","6d58cbb2":"test_dummies = test_concat_dummies[1095:]","76ea3cb6":"test_raw.head(1)","a2ae5fd6":"test_dummies.head(1)","03d5ccca":"for c1, c2 in zip(X_train_dummies.columns, test_dummies.columns):\n    if c1 != c2:\n        print(c1, \",\", c2)","989a7d68":"test_dummies = test_dummies.drop(['Condition2_PosA', 'Functional_Sev'], axis=1)\nfor c1, c2 in zip(X_train_dummies.columns, test_dummies.columns):\n    if c1 != c2:\n        print(c1, \",\", c2)","942a0f94":"test_filled = imputer.transform(test_dummies)","3b8bd4fa":"test_pred = forest_reg.predict(test_filled)","34a0d990":"result_df = pd.DataFrame([test_dummies['Id'], test_pred], ['Id', 'SalePrice']).swapaxes(0,1)\n","04a09683":"result_df.head()","e5570034":"result_df.to_csv(\"house_prediction.csv\")","b9f5f4a6":"explore data","8ba4ea17":"Since most of the features are character string notation, one hot encoding is performed.","cc74888c":"split train data and validation data.","c1317055":"street and allay features are pave or not.","70ce4363":"Load train set and peek data.","31eead15":"I will try to predict the combination of confirmed data in a linear model.","08d38b0c":"RandomForestRegressor is much better than LinearRegression.","46d493d9":"I think that the size of the land and the building will affect the price, so let's first check the correlation.","46780f87":"I got better score than not.","6d865969":"list up features.","05582796":"Load Libraries."}}