{"cell_type":{"72d25b4f":"code","04f044d8":"code","206d44c0":"code","46bec056":"code","d35bcfa8":"code","3ae9b0bb":"code","54606cb0":"code","fe5246a7":"code","283c9399":"code","4b2c43fa":"code","e14f2596":"code","2e5fcb62":"code","f885e2e7":"code","831953b0":"code","b437ad0b":"code","0767b695":"code","92f57a34":"code","8024f4d2":"code","85ff4053":"code","a42958ea":"code","2d748f75":"code","f179eaf0":"code","4e41cb7c":"code","453788ba":"code","d94d7f60":"code","1e44e93b":"code","531e225b":"code","fc5e3143":"code","7fcd90a3":"code","2ad8fdf6":"code","b9be7b93":"code","091457b2":"code","ca19a047":"markdown","bf63b1f2":"markdown","c9769d5e":"markdown","2aeea466":"markdown","bc352e65":"markdown","b2299f0b":"markdown","2236b6fd":"markdown","523d58ee":"markdown","299d21da":"markdown","b42f50b3":"markdown","e670e400":"markdown","be27205a":"markdown","cee69d17":"markdown","2bb14a29":"markdown","797177ee":"markdown","56a875d0":"markdown","9101ac87":"markdown","a2af93d8":"markdown","05f956a2":"markdown","2857e040":"markdown","98700cb0":"markdown","a584ed77":"markdown","5aaf1367":"markdown","19456bd8":"markdown","e268b0be":"markdown","d5053201":"markdown","b11cb963":"markdown","01d98b11":"markdown","025df070":"markdown","039858f1":"markdown","52b5ecf7":"markdown","a4bdce8e":"markdown","5130c4b0":"markdown","c7fd2a3d":"markdown","492bebe9":"markdown","43e43b4f":"markdown"},"source":{"72d25b4f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","04f044d8":"#See the head of dataframe\ndf_overall = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")\ndf_overall.head(3)","206d44c0":"#Check the columns\ndf_overall.info()","46bec056":"#Approach 1 ; calculate missing values\nimport math\nindex = df_overall.columns\ncount = pd.DataFrame(df_overall.isna().sum())\npercentage = pd.DataFrame(df_overall.isna().sum() \/ df_overall.shape[0]*100)\nd = pd.merge(count,percentage,on=index)\nd.columns = [\"title\",\"count\",\"percentage\"]\nd = d.set_index(\"title\")\nd.sort_values(by=\"percentage\",ascending=False)\n","d35bcfa8":"#approach 2; visualize missing values in a heatmap\nplt.figure(figsize=[11,8])\nsns.heatmap(df_overall.isnull(), cbar=False)\nplt.show()","3ae9b0bb":"plt.figure(figsize=(10,7))\nsns.set_style(\"darkgrid\")\nsns.countplot(x=\"type\",data=df_overall,palette=\"autumn\")\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=10)\nplt.title(\"Number of contents\",fontsize=13)\nplt.xlabel(\"\")\nplt.ylabel(\"\")\nplt.show()\nmovie = df_overall[df_overall[\"type\"]==\"Movie\"]\nshow = df_overall[df_overall[\"type\"]==\"TV Show\"]\nprint(\"\u3000\u3000\\n{} movies and {} TV shows\".format(movie.shape[0],show.shape[0]))","54606cb0":"#Firstly, count how many countries involved in producing movies\/shows\ncountry_unique = []\ncountry_count = 0\ndf_overall[\"country\"] = df_overall[\"country\"].astype(\"str\")\n\nfor row in df_overall[\"country\"]:\n    country = row.split(\",\")\n    for each in country:\n        each = each.lstrip()\n        if each not in country_unique:\n            country_unique.append(each)\n            country_count += 1\n        else:\n            continue     \n        \nprint(\"The number of country is {}\".format(country_count))","fe5246a7":"#Multiple countries may contained in a single row. So split and insert them into a list to count unique countries.\n\nassert df_overall[\"country\"].dtype == \"object\" #make sure it's \"object\"\n\ncountry_list = [] #a list to count countries\n\nfor row in df_overall[\"country\"]:\n    country = row.split(\",\")\n    for each in country:\n        if each == \"nan\":\n            continue\n        else:\n            each = each.lstrip()\n            country_list.append(each)\n\ncountry_movie_count = {}\nfor country in country_unique:\n    country_movie_count[country] = country_list.count(country)\n\n\nmovies_per_country_df = pd.DataFrame(country_movie_count.items())\nmovies_per_country_df = movies_per_country_df.set_axis([\"country\",\"count\"],axis='columns')\nmovies_per_country_df[[\"country\",\"count\"]].sort_values(\"count\",ascending = False)","283c9399":"#Make top 5 countries visualize\ndict = {\"United States\":3690,\"India\":1046,\"United Kingdom\":806,\"Canada\":445,\"France\":393}\ndf = pd.DataFrame(dict.items())\ndf = df.set_axis([\"country\",\"count\"],axis=\"columns\")","4b2c43fa":"#plt.figure(figsize=(12,9))\nsns.set_style(\"darkgrid\")\ng = sns.catplot(y=\"country\",x=\"count\",data=df,kind=\"bar\",palette=\"autumn\")\ng.fig.set_size_inches(10,8)\nplt.xticks(fontsize=10)\nplt.title(\"Top 5 countries produce movies\/shows\",fontsize=18)\nplt.yticks(fontsize=13)\nplt.show()","e14f2596":"#df_overall[\"country\"].head(10)","2e5fcb62":"duration_min = [] #Insert durations that are expressed in minutes\nduration_seasons = [] #Insert durations that are expressed in seasons\nduration_int = [] #Insert durations that are expressed in minutes\n\nfor each in df_overall[\"duration\"]:\n    try:\n        if \"min\" in each:\n            stripped_each = each.strip(\"min\")\n            stripped_each = stripped_each.strip(\"\")\n            duration_min.append(stripped_each)\n            duration_int.append(stripped_each)\n        elif \"Seasons\" in each:\n            stripped_each = each.strip(\"Seasons\")\n            stripped_each = stripped_each.strip(\"\")\n            duration_seasons.append(stripped_each)\n            duration_int.append(\"nan\")\n        elif \"Season\" in each:\n            stripped_each = each.strip(\"Season\")\n            stripped_each = stripped_each.strip(\"\")\n            duration_seasons.append(stripped_each)\n            duration_int.append(\"nan\")\n    except TypeError:\n        duration_int.append(\"nan\")\n        continue\n        \nduration_min = np.array(duration_min, dtype=np.int64)\ndf_overall[\"duration_int\"] = duration_int","f885e2e7":"first_country = [] #insert the first country\n\nfor row in df_overall[\"country\"]:\n    try:\n        countries = row.split(\",\")\n        first_country.append(countries[0])\n    except AttributeError:\n        first_country.append(\"nan\")\n        continue\ndf_overall[\"first_country\"] = first_country\n\ndf = df_overall[df_overall['first_country'] != \"nan\"]\norder = df.groupby(\"first_country\")[\"first_country\"].count().sort_values(ascending=False)\n#print(order.head(10)) #See the order\ndf = df.set_index(\"first_country\")\ndf_top = df.loc[[\"United States\",\"India\",\"United Kingdom\",\"Canada\",\"Japan\",\"France\",\"South Korea\",\"Spain\",\"Mexico\",\"Australia\"],:] #according to the \"order\"\n\nsns.set_style(\"darkgrid\")\nfig, ax = plt.subplots(figsize=[10,10])\nsns.countplot(x=df_top.index)\nplt.xlabel(\" \")\nplt.xticks(rotation=80)\nplt.show()","831953b0":"#Convert rating names into easier-to-understand ones\ndf_overall[\"rating\"].unique()\ndf_overall[\"rating\"] = df_overall[\"rating\"].replace({\"PG-13\":\"Parents Strongly Cautioned\",\"TV-MA\":\"Mature Audience Only\",\"PG\":\"Parental Guidance Suggested\",\n                   \"TV-14\":\"Parents Strongly Cautioned\",\"TV-PG\":\"Parental Guidance Suggested\",\"TV-Y\":\"All Children\",\"TV-Y7\":\"Suitable for children 7 or older\",\"TV-G\":\"Suitable for all audiences\",\"R\":\"Restricted\",\n                    \"G\":\"General Audience\",\"NC-17\":\"No One 17 And Under Admitted\",\"NR\":\"Not\/Unrated\",\"TV-Y7-FV\":\"Suitable for children\", \"suitable for children\":\"Suitable for children\",\"UR\":\"Not\/Unrated\",\"Unrated\":\"Not\/Unrated\",\"74 min\":\"nan\",\"84 min\":\"nan\",\"66 min\":\"nan\"})","b437ad0b":"plt.figure(figsize=(12,9))\nsns.set_style(\"darkgrid\")\nsns.countplot(x=\"rating\",data=df_overall,palette=\"autumn\",order=df_overall[\"rating\"].value_counts().index)\nplt.xticks(rotation=90)\nplt.show()","0767b695":"fig,ax = plt.subplots(figsize=(12,10))\nfig = sns.countplot(x=\"rating\", hue=\"type\", data=df_overall,order=df_overall[\"rating\"].value_counts().index,palette=\"autumn\")\nplt.xticks(rotation=90,fontsize=12)\nplt.legend(loc=\"upper right\",fontsize=15)\nplt.show()","92f57a34":"duration_min = [] #Insert durations that are expressed in minutes\nduration_seasons = [] #Insert durations that are expressed in seasons\nduration_int = [] #Insert durations that are expressed in minutes\n\nfor each in df_overall[\"duration\"]:\n    try:\n        if \"min\" in each:\n            stripped_each = each.strip(\"min\")\n            stripped_each = stripped_each.strip(\"\")\n            duration_min.append(stripped_each)\n            duration_int.append(stripped_each)\n        elif \"Seasons\" in each:\n            stripped_each = each.strip(\"Seasons\")\n            stripped_each = stripped_each.strip(\"\")\n            duration_seasons.append(stripped_each)\n            duration_int.append(\"nan\")\n        elif \"Season\" in each:\n            stripped_each = each.strip(\"Season\")\n            stripped_each = stripped_each.strip(\"\")\n            duration_seasons.append(stripped_each)\n            duration_int.append(\"nan\")\n    except TypeError:\n        duration_int.append(\"nan\")\n        continue\n        \nduration_min = np.array(duration_min, dtype=np.int64)\ndf_overall[\"duration_int\"] = duration_int","8024f4d2":"#Histogram of duration in minutes\nbinwidth=10\nsns.set_style(\"whitegrid\")\nsns.set_palette(\"autumn\")\nfig = sns.displot(x=duration_min,bins=np.arange(min(duration_min), max(duration_min) + binwidth, binwidth),kde=True)\nfig.fig.set_size_inches(13,7)\nplt.title(\"duration\",fontsize=15)\nplt.show()","85ff4053":"#Histogram of duration in season\nduration_seasons = np.array(duration_seasons, dtype=np.int64)\nplt.figure(figsize=[11,8])\nsns.set_style(\"whitegrid\")\nsns.countplot(x=duration_seasons,palette=\"autumn\",order= duration_seasons.sort())\nplt.title(\"number of seasons\",fontsize=15)\nplt.show()","a42958ea":"#Relation between a producing country and duration\n\ndf_top[\"duration_int\"] = pd.to_numeric(df_top[\"duration_int\"], errors='coerce')\ndf_top = df_top.dropna(subset=[\"duration_int\"]) \ndf_top[\"duration_int\"] = df_top[\"duration_int\"].astype(int)\n\nfig,ax = plt.subplots(figsize=[9,13])\nfig = sns.boxenplot(x=df_top.index,y=df_top[\"duration_int\"],palette=\"autumn\")\nfig = sns.stripplot(x=df_top.index,y=df_top[\"duration_int\"],color=\"#008080\",alpha=0.6)\nplt.xticks(rotation=90)\nplt.show()","2d748f75":"#convert date_added to datetime objects\ndf_overall[\"date_added\"] = df_overall[\"date_added\"].replace({\"January\":1,\"February\":2,\"March\":3,\"April\":4,\"May\":5,\"June\":6,\n                                                             \"July\":7,\"August\":8,\"September\":9,\"October\":10,\"November\":11,\"December\":12})\ndf_overall[\"date_added\"] = pd.to_datetime(df_overall[\"date_added\"],infer_datetime_format=True)\n    \n\n#Split them into year \/ month \/ date\ndf_overall[\"date_added_year\"] =  df_overall[\"date_added\"].dt.strftime('%Y')\ndf_overall[\"date_added_month\"] =  df_overall[\"date_added\"].dt.strftime('%m')\ndf_overall[\"date_added_day\"] = df_overall[\"date_added\"].dt.strftime('%d')\n","f179eaf0":"df_added_year = df_overall.groupby(\"date_added_year\")[[\"title\"]].count().reset_index()\nfig = px.area(df_added_year, x=\"date_added_year\",y=\"title\", title=\"When were the contents added on Netflix?\")\nfig.show()","4e41cb7c":"#Compare the increase of TV shows \/ movies added on Netflix\ndf_type_date = df_overall.groupby([\"type\",\"date_added_year\"])[[\"title\"]].count()\ndf_type_date_movie = df_type_date.loc[\"Movie\",]\ndf_type_date_tv= df_type_date.loc[\"TV Show\",]\n\nfig = plt.figure(figsize=(12,10))\nsns.set_style(\"darkgrid\")\nfig = sns.lineplot(x=df_type_date_movie.index,y=df_type_date_movie.title,palette=\"autumn\")\nfig = sns.lineplot(x=df_type_date_tv.index,y=df_type_date_tv.title,color=\"green\")\n\nplt.legend([\"Movie\",\"TV Show\"],fontsize=15)\nplt.xlabel(xlabel=\"\")\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=11)\nplt.title(\"Movies\/TV Shows added to Netflix\",fontsize=15)\nplt.show()","453788ba":"df_overall[\"release_year\"] = df_overall[\"release_year\"].astype(\"int\")\nassert df_overall[\"release_year\"].dtype == \"int\"","d94d7f60":"df_date = df_overall.groupby(\"release_year\")[\"title\"].count().reset_index()\nfig = px.area(df_date, x='release_year',y=\"title\",title = \"When were the contents released?\")\nfig.show()","1e44e93b":"#make a variable \"till_release\" that has the years between the actual release and year added.\n\ntill_release = []\nfor index,each in df_overall.iterrows():\n    till_release.append(float(each.date_added_year) - int(each.release_year))\n    \ndf_overall[\"till_release\"] = till_release","531e225b":"#fig,ax = plt.subplots(figsize=[10,5])\nfig = sns.displot(x=\"till_release\",data=df_overall,kde=True)\nfig.fig.set_size_inches(10,7)\nplt.xlim()\nplt.xticks()\nplt.legend(loc=\"upper right\")\nplt.show()\n\nfig2,ax = plt.subplots(figsize=[8,5])\nfig2 = sns.boxplot(x=\"till_release\",data=df_overall)\n#fig2.set_size_inches(10,7)\nplt.show()","fc5e3143":"#Define a function that returns a day of week according to the number\ndef get_day_of_week(a):\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    try:\n        return(days[int(a)])\n    except ValueError:\n        return(\"nan\")\n\n#Create a column \"date_added_weekday\"\ndate_added_weekday = []\ndays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nfor datetime in df_overall[\"date_added\"]:\n    a = datetime.weekday()\n    weekday = get_day_of_week(a)\n    date_added_weekday.append(weekday)\ndf_overall[\"date_added_weekday\"] = date_added_weekday\n\n#Create a pivot table that has title, date_added_weekday, and date_added_month\ndf = df_overall[~df_overall.isin({\"date_added_weekday\",\"nan\"})]\ndf = df.groupby(by=[\"date_added_month\",\"date_added_weekday\"],as_index=False)[\"title\"].count()\ndf = df.sort_index()\ndf = df.sort_values(by=\"title\")\npivot = pd.pivot_table(data=df,values=\"title\",index=\"date_added_weekday\",columns=\"date_added_month\")\npivot = pivot.loc[[\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"]]\n\npivot.columns = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]","7fcd90a3":"#x=day-of-week\u3001y=month, hue=the number of contents added\nplt.figure(figsize=[8,8])\nsns.heatmap(pivot,cmap=\"OrRd\")\nplt.xticks(rotation=60)\nplt.yticks(rotation=0)\nplt.xlabel(\"\")\nplt.ylabel(\"\")\nplt.show()","2ad8fdf6":"#x-axis=weekday\u3001y-axis=day, hue=the number of titles\ndf2 = df_overall[~df_overall.isin({\"date_added_weekday\",\"nan\"})]\ndf2 = df2.groupby(by=[\"date_added_weekday\",\"date_added_day\"],as_index=False)[\"title\"].count()\npivot2 = pd.pivot_table(data=df2,values=\"title\",columns=\"date_added_weekday\",index=\"date_added_day\")\npivot2 = pivot2.loc[:,[\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"]]\n\nplt.figure(figsize=[8,8])\nsns.heatmap(pivot2,cmap=\"PuRd\")\nplt.xticks(rotation=60)\nplt.yticks(rotation=0)\nplt.xlabel(\"\")\nplt.ylabel(\"Day\")\nplt.show()\nplt.show()","b9be7b93":"assert df_overall[\"listed_in\"].dtype == \"object\"\n\nlist_list = []  #Insert any list \nlist_unique = [] #Insert unique list\n\nfor row in df_overall[\"listed_in\"]:\n    _lists = row.split(\",\")\n    for each in _lists:\n        if each == \"nan\":\n            continue\n        else:\n            each = each.lstrip()\n            list_list.append(each)\n            \nfor each in list_list:\n    if each not in list_unique:\n        list_unique.append(each)\n    else:\n        continue","091457b2":"df_lists = pd.DataFrame(data=list_list,columns=[\"list\"],index=list_list)\ndf_lists\nfig, ax = plt.subplots(figsize=(12,10))\nfig = sns.countplot(y=\"list\",data=df_lists,order=df_lists[\"list\"].value_counts().index)\nplt.title(\"Movies\/TV shows are listed in...\",fontsize=13)\nplt.ylabel(\"\")\nplt.show()","ca19a047":"![image.png](attachment:feb8965a-265b-4de2-980b-3484ed2f372c.png)","bf63b1f2":"<h1><span style=\"color: #dc143c; \">How durations are distributed?<\/span><\/h1>\nThe variable \"duration\" identifies total duration - in minutes or number of seasons.","c9769d5e":"<h2>Observations<\/h2>\n<h3>\ud83d\udca1 International Movies is the most popular list on Netflix!<\/h3>","2aeea466":"<h1><span style=\"color: #dc143c; \">How many years are there between the actual release and the year added on Netflix?<\/span><\/h1>\nI'll calculate the number of years between the actual release and year added!","bc352e65":"<h1><span style=\"color: #dc143c; \">When were the contents added on Netflix?<\/span><\/h1>\nThe variable \"date_added\" identifies the date the TV show \/ movie was added on Netflix.","b2299f0b":"<h1><span style=\"color: #dc143c; \">Is there correlation between duration and countries?<\/span><\/h1>\nI'll visualize the average duration of a content by each top 10 country!\n\n\n<p>Just to remember;\nThe variable \"duration\" identifies total duration in minutes or number of seasons (This time focus on \"in minutes\"). The variable \"country\" indentifies where the movie \/ show was produced (This time focus on the first written one in a row). <\/p>","2236b6fd":"The result seems to be the same.\n\n<span style=\"color: #dc143c; \">So, let's get started with analyzing!<\/span>","523d58ee":"<h2>Observations<\/h2>\n<h3>\ud83d\udca1 Contents tend to be added on Friday!<\/h3>\n<h3>\ud83d\udca1 Especially, Friday in March and November got many contents<\/h3>\n<h3>\ud83d\udca1 Sunday seems to have the least number of contents<\/h3>\n<br><\/br>\nWow, those are so interesting. Let's also examine if Netflix uploads contents on a particular date, not a day of week!","299d21da":"<h1><span style=\"color: #dc143c; \">Which countries most lead producing contents?<\/span><\/h1>\nThe variable \"country\" - we just saw - may have multiple countries, but the first written country seems to be the leading one of them; there's no regulation as to which country comes first. (e.g the US, Ghana, Brazil, the UK... \u2190 no rule!)\n\nI'll define the first written country as \"the first country\" and make sure which country most led producing contents!","b42f50b3":"<h2>Observations<\/h2>\n<h3>\ud83d\udca1 Typically, contents are added one or two year(s) after the actual release <\/h3>\n<h3>\ud83d\udca1 Most of the contents are added within 5 years <\/h3>","e670e400":"<h1><span style=\"color: #dc143c; \">Does Netflix tend to add contents on a particular date?<\/span><\/h1>","be27205a":"<h1><span style=\"color: #dc143c; \">Does Netflix tend to add contents on a particular day of month?<\/span><\/h1>\nWe've seen in what year contents were added. But what if your manager asks the dates when contents were added?\n<br><\/br> - See what comes out!","cee69d17":"<h4><span style=\"color: #dc143c; \">Please leave comments or upvote if you like it! <\/span><\/h4>\n\nI'm a sophomore college student in Tokyo, Japan and currently looking for opportunities that I could apply my SQL \/ Python \/ Tableau skills. I wanna meet many people in data analytics field so please reach me out on LinkedIn ^^\n[Kurumi Muto on LinkedIn](https:\/\/www.linkedin.com\/in\/kurumimuto\/)\n","2bb14a29":"<h2>Observations<\/h2>\n<h3>\ud83d\udca1Countries most involved in producing contents are the five countries above<\/h3>\n<h3>\ud83d\udca1The US produced the 3.52 times larger number of movies than India<\/h3>","797177ee":"You can hover over the graph to see the exact number!\n<h2>Observations<\/h2>\n<h3>\ud83d\udca1From 2015, relatively a large number of contents started to be added<\/h3>\n<h3>\ud83d\udca1The number of the contents added in 2019 is the highest - 2016<\/h3>\n<h3>\ud83d\udca1It decreases from 2020<\/h3>","56a875d0":"The column \"director\" most has missing values, and \"country\" and \"date_added\" follow.  Since these columns are string type and thought to be independent to other variables, I won't fill in the blanks by predicting.","9101ac87":"<h1>The goals of this project is...<\/h1>\n<h3><span style=\"color: #dc143c; \">- To grasp insights that will be helpful when a statistical analysis<\/span><\/h3>\n<br><\/br>\n\n<h1>To achieve this...<\/h1>\n<h3><span style=\"color: #dc143c; \">- I'll visualize the distribution of variables and highlight observations<\/span><\/h3>\n<h3><span style=\"color: #dc143c; \">- I'll visualize the correlation between variables<\/span><\/h3>\n<br><\/br>\nLet's get started\ud83e\udd17","a2af93d8":"![image.png](attachment:8bcdc7cc-749b-405b-ac58-24ade6c134a4.png)","05f956a2":"<h2>Observations<\/h2>\n<h3>\ud83d\udca1Countries most led producing contents are the 10 countries above<\/h3>\n<h3>\ud83d\udca1The U.S. comes in first by a wide margin<\/h3>\n<h3>\ud83d\udca1For me, a typical Japanese person, it was surprising that India is ranked in second. <\/h3>","2857e040":"<h1><span style=\"color: #dc143c; \">Is there any difference in increase of how many TV shows \/ movies added on Netflix?<\/span><\/h1>","98700cb0":"<h4>Observation<\/h4>\n<h4>\ud83d\udca1Netflix has the 2.3 times larger number of movies than TV shows<\/h4>","a584ed77":"Hi, it's Kurumi.\nI'm going to explore a netflix dataset with Python. I've got wonderful insights that may surprise you if you assume you're a big fan of Netflix!","5aaf1367":"<h2>Observations<\/h2>\n<h3>\ud83d\udca1Contents produced in India tend to be longer<\/h3>\n<h3>\ud83d\udca1the US has the longest content that lasts more than 300 minutes<\/h3>","19456bd8":"<h2>Observations<\/h2>\n<h3>\ud83d\udca1The majority of Netflix contents are rated as \"Mature Audience Only\" or \"Parents Strongly Cautioned\"<\/h3>\n<h3>\ud83d\udca1Contents rated as \"Restricted\" are exclusively movies though other rates seems to be in accord to the distribution of contents type <\/h3>","e268b0be":"<h3><span style=\"color: #dc143c; \">What are the most lasted serieses?<\/span><\/h3>\n\n-- coming soon!\n ","d5053201":"<h1><span style=\"color: #dc143c; \">Which list is the most popular?<\/span><\/h1>\nThe variable \"listed_in\" identifies which list the TV show \/ movie is listed in. A TV show \/ movie can be listed in multiple lists. (e.g Movie A is listed in \"International TV Shows\", \"TV Dramas\", \"TV Mysteries\")\n<br><\/br>\nLet's make sure what list has the largest number of contents!","b11cb963":"<h3><span style=\"color: #dc143c; \">How are rating distributed?<\/span><\/h3>\nThe variable \"rating\" identifies the TV Rating of the movie \/ show","01d98b11":"<h2>Observations<\/h2>\n<h3>\ud83d\udca1The center of the distribution is 93-100 minutes<\/h3>\n<h3>\ud83d\udca1The center is the distribution is relatively biased in left side, suggesting that there're more longer contents than shorter ones<\/h3>","025df070":"<h2>Observations<\/h2>\n<h3>\ud83d\udca1Until 2014, there isn't a significant gap between the number of TV shows \/ movies<\/h3>\n<h3>\ud83d\udca1The number of movies more sharply increases in between 2016 and 2019<\/h3>\n<h3>\ud83d\udca1Both TV shows \/ movies decrease in 2020<\/h3>","039858f1":"<h1><span style=\"color: #dc143c; \">What are the type of contents?<\/span><\/h1>\nThe variable \"type\" identifies whether the content is a TV show or movie.","52b5ecf7":"<h2>Observations<\/h2>\n<h3>\ud83d\udca1 Contents tend to be added on 1st!<\/h3>\n<h3>\ud83d\udca1 Especially, 1st on Wednesday \/ Thursday \/ Friday tend to have large contents!<\/h3>\n<h3>\ud83d\udca1 Friday has relatively a larger number of contents regardless of the date<\/h3>\n<br><\/br>\nAgain, it's so insightful!","a4bdce8e":"<h1><span style=\"color: #dc143c; \">When were the contents on Netflix released?<\/span><\/h1>\nThe variable \"release_year\" identifies the actual release year of the move \/ show. Note that it's not the date when the content was \"added\" on Netflic but it's \"released\".","5130c4b0":"You can hover over the graph to see the exact number!\n\n<h2>Observations<\/h2>\n<h3>\ud83d\udca1 The oldest content on Netflix was released in 1925<\/h3>\n<h3>\ud83d\udca1 The number of the contents released in 2018 was the highest - 1147<\/h3>\n<h3>\ud83d\udca1 This suggests that it may need a couple years from the actual release to add the content on Netflix <\/h3>","c7fd2a3d":"<h1> <span style=\"color: #dc143c; \">Which country most produced movies \/ shows?<\/span> <\/h1>\nThe variable \"country\" indentifies where the movie \/ show was produced. ","492bebe9":"<h1><span style=\"color: #dc143c; \">How are missing values distributed?<\/span><\/h1>","43e43b4f":"<h2>Observation<\/h2>\n<h3>\ud83d\udca1Almost all the series last only for one season<\/h3>"}}