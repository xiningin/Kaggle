{"cell_type":{"1bcf9bff":"code","2e07ec57":"code","d6d73d2e":"code","13d9c3f6":"code","fe93e3c3":"code","54aa1c71":"code","a62345c8":"code","5f7f96dc":"code","ed4a116f":"code","4b3d7b2f":"code","f626e92a":"code","c5620923":"code","255cf2d0":"code","c3b95fa7":"code","6d19ee82":"code","04ca75f9":"code","bc699276":"code","c7af2c99":"code","e1314391":"code","81cfc7e9":"code","847735d5":"code","2f291b1f":"code","c9fab40a":"code","133f4c02":"code","cb8ddc35":"code","9fbf1542":"code","7acc50d6":"code","1029c78a":"code","23089913":"markdown","5814a52d":"markdown","cbf0d56c":"markdown","79fa078e":"markdown","8af90f08":"markdown","64de68e5":"markdown","4a803bec":"markdown","d79b194e":"markdown","f0ec07e4":"markdown","6fd8e44d":"markdown","26d4c21b":"markdown","440ce784":"markdown","c076ef4c":"markdown","d7cd0dc3":"markdown"},"source":{"1bcf9bff":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","2e07ec57":"import plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.offline import iplot\nimport plotly.figure_factory as ff","d6d73d2e":"from sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nfrom sklearn.metrics import classification_report","13d9c3f6":"df = pd.read_csv('..\/input\/congressional-voting-records\/house-votes-84.csv')\ndf.head()","fe93e3c3":"class Info:\n    def __init__(self,dataframe):\n        self.dataframe = dataframe.drop(['Class Name'],axis=1)\n        self.columns = list(self.dataframe.columns)\n        self.df = pd.DataFrame()\n        self.listY = []\n        self.listN = []\n        self.listQ = []\n        self.main()\n        \n    def countY(self,x='y'):\n        for col in self.columns:\n            self.listY.append((self.dataframe[col] == x).sum())\n        self.df[x] = self.listY\n        \n    def countN(self,x='n'):\n        for col in self.columns:\n            self.listN.append((self.dataframe[col] == x).sum())\n        self.df[x] = self.listN\n        \n    def countQ(self,x='?'):\n        for col in self.columns:\n            self.listQ.append((self.dataframe[col] == x).sum())\n        self.df[x] = self.listQ\n\n    \n    def missing_zero_values_table(self):\n        mis_val = self.dataframe.isnull().sum()\n        mis_val_percent = round(self.dataframe.isnull().mean().mul(100),2)\n        mz_table = pd.concat([mis_val,mis_val_percent],axis=1)\n        mz_table = mz_table.rename(columns = {self.dataframe.index.name:'col_name',0:'Missing Values',1:'% of Total Values'})\n        mz_table['Data_type'] = self.dataframe.dtypes\n        print(\"Your selected dataframe has ** \"+str(df.shape[1])+\" ** columns and ** \"+str(df.shape[0])+\" ** Rows.\\n\"\n                 \"There are ** \"+str(mz_table[mz_table.iloc[:,1] != 0].shape[0])+\n                  \" ** columns that have missing values. \\n\")\n        self.df = pd.concat([self.df,mz_table],axis=1)\n        \n    def main(self):\n        self.df['col'] = self.columns\n        self.countN()\n        self.countY()\n        self.countQ()\n        self.df.set_index('col',inplace=True)\n        self.missing_zero_values_table()\n        print('Sum No : ',sum(self.listN),\n              ', Sum Yes : ',sum(self.listY),\n              ', Sum ? : ',sum(self.listQ),\n             ', Total : ',sum(self.listN)+sum(self.listY)+sum(self.listQ))","54aa1c71":"a = Info(df)\na.df.style.background_gradient(cmap='Reds')","a62345c8":"px.bar(a.df,x=a.df.index, y=['n','y','?'], title=\"Votes related to laws\")","5f7f96dc":"x = df['Class Name'].value_counts()\nlabels = df['Class Name'].unique().tolist()","ed4a116f":"className = go.Pie(labels=labels,values=x,hoverinfo='label+percent',textinfo='value')\niplot([className])","4b3d7b2f":"split = StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)\nfor train_index,test_index in split.split(df,df['Class Name']):\n    strat_train_set = df.loc[train_index]\n    strat_test_set = df.loc[test_index]","f626e92a":"strat_test_set['Class Name'].value_counts() \/ len(strat_test_set)","c5620923":"resVoting = {}\nfor col in df.columns.tolist()[1:]:\n    resVoting[col] = df[col].value_counts().idxmax()","255cf2d0":"resVoting = pd.DataFrame(list(resVoting.items()),columns = ['columns','FinalRes'])\nresVoting","c3b95fa7":"maximumVote = {}\nfor col in df.columns.tolist()[1:]:\n    maximumVote[col] = df.groupby([col,'Class Name']).count().idxmax()[0]","6d19ee82":"maximumVote = pd.DataFrame(list(maximumVote.items()),columns = ['columns','TupleVotes'])\nmaximumVote","04ca75f9":"Res,className=zip(*np.array(maximumVote.TupleVotes))","bc699276":"maximumVote['Res'] = Res\nmaximumVote['className'] = className\nmaximumVote.drop(['TupleVotes'],axis=1,inplace=True)","c7af2c99":"resVoting = resVoting.merge(maximumVote,on='columns',how='left')","e1314391":"winnerParty = resVoting[resVoting.FinalRes == resVoting.Res]['className'].value_counts()\npx.bar(x=winnerParty.index, y=winnerParty,\n       title='The number of victories in passing a law in different parties',\n       labels={'y':'Number of successes '})","81cfc7e9":"labels = resVoting.FinalRes.value_counts().index\nx = resVoting.FinalRes.value_counts()\nResultVoting = go.Pie(labels=labels,values=x,hoverinfo='label+percent',\n                      textinfo='value',title='Voting results')\niplot([ResultVoting])","847735d5":"voting = strat_train_set.drop('Class Name',axis=1)\nvoting_labels = strat_train_set['Class Name'].copy()","2f291b1f":"ordinal_encoder = OrdinalEncoder()\nvoting_cat_encoded = ordinal_encoder.fit_transform(voting)\nvoting_cat_encoded","c9fab40a":"clf = GaussianNB()\nclf.fit(voting_cat_encoded,voting_labels)","133f4c02":"pred = clf.predict(voting_cat_encoded)\naccuracy_score(pred,voting_labels)*100","cb8ddc35":"px.imshow(confusion_matrix(voting_labels, pred),\n         labels=dict(y=\"True Label\", x=\"Predicted Label\", color=\"Productivity\"),\n                x=['democrat', 'republican'],\n                y=['democrat', 'republican'])","9fbf1542":"voting = strat_test_set.drop('Class Name',axis=1)\nvoting_labels = strat_test_set['Class Name'].copy()","7acc50d6":"ordinal_encoder = OrdinalEncoder()\nvoting_cat_encoded = ordinal_encoder.fit_transform(voting)\nvoting_cat_encoded","1029c78a":"pred = clf.predict(voting_cat_encoded)\naccuracy_score(pred,voting_labels)*100","23089913":"# Prepare the Data for Machine Learning Algorithms","5814a52d":"Work in progress","cbf0d56c":"The test set is must be **representative** of the overall parties population ","79fa078e":"It's not overfit or underfit  \nok fine","8af90f08":"# Evaluate our Model on the Test Set","64de68e5":"It seems democrat party is strong in these voting","4a803bec":"good job","d79b194e":"# Discover and visualize the data to gain insights","f0ec07e4":"# Select and Train a Model","6fd8e44d":"Most of them were approved","26d4c21b":"I know there are great algorithms such as SVM, etc. but I like to implement it with Gaussian Naive Bayes","440ce784":"# Create Test set","c076ef4c":"**Handling Categorical Attributes**","d7cd0dc3":"# Take a Quick Look at the Data Structure"}}