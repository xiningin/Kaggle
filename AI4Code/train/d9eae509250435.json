{"cell_type":{"f56b5a78":"code","6b9a2111":"code","c5dc0521":"code","61829edd":"code","0a850195":"code","0f34c712":"code","d6d781af":"code","0eebdae9":"code","83be01a7":"code","c69c2ad4":"code","d63ff2e6":"code","f5418da8":"code","d202f5ca":"code","a4b44ed4":"code","a4701aad":"code","64d3c656":"code","365b6109":"code","da9704eb":"code","24ba9c17":"code","f08c986d":"code","a95aed6a":"code","9c3f2776":"code","377f4b51":"code","8e205212":"code","ef9d507d":"code","b5fa590b":"markdown","13c7b1fc":"markdown","df7a2e9f":"markdown","c4bc4291":"markdown","38389c6f":"markdown","82a9b147":"markdown","9e865760":"markdown","b448f067":"markdown","9add996a":"markdown","10c164e8":"markdown"},"source":{"f56b5a78":"## Importing libraries\nimport pandas as pd\nimport numpy as np\nimport cv2\nimport os\nimport glob\nfrom scipy.spatial import distance\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential, models\nfrom tensorflow.keras.layers import Flatten, Dense, Conv2D, MaxPool2D\nfrom keras.preprocessing.image import ImageDataGenerator\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","6b9a2111":"path = \"..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/\"","c5dc0521":"dataset = {\n    \"image_path\": [],\n    \"mask_status\": [],\n    \"where\": []\n}\n\nfor where in os.listdir(path):\n    for status in os.listdir(path+\"\/\"+where):\n        for image in glob.glob(path+where+\"\/\"+status+\"\/\"+\"*.png\"):\n            dataset[\"image_path\"].append(image)\n            dataset[\"mask_status\"].append(status)\n            dataset[\"where\"].append(where)\n            \ndataset = pd.DataFrame(dataset)\ndataset.head()","61829edd":"## Choosing a random image to detect the face in the image\nface_model = cv2.CascadeClassifier('..\/input\/haarcascades\/haarcascade_frontalface_default.xml')\n\n## Choosing the image from the directory\nimg = cv2.imread(\"..\/input\/face-mask-detection\/images\/maksssksksss352.png\")\n\n## Converting the image to grayscale to apply haarcascade algorithm\nimg = cv2.cvtColor(img, cv2.IMREAD_GRAYSCALE)\n\n## Returns the x, y, w, h co-ordinates as numpy arrays for all the detected faces\ndetected_face = face_model.detectMultiScale(img)\n\n## Converting from grayscale to colored image\noutput_img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n\n## Drawing rectangle box around the faces in the image\nfor (x, y, w, h) in detected_face:\n    cv2.rectangle(output_img, (x,y), (x+w, y+h), (0, 0, 200), 2)\n    \n## Displaying the image\nplt.figure(figsize = (15, 15))\nplt.imshow(output_img)","0a850195":"if len(detected_face) >= 2:\n    # Track to check for violation of social distance violation\n    label = [0 for i in range(len(detected_face))]\n    \n    # Getting the distance from one image to rest of the image  \n    for i in range(len(detected_face)-1):\n        for j in range(i+1, len(detected_face)):\n            # [:2] gets only x, y co ordinates\n            dist = distance.euclidean(detected_face[i][:2], detected_face[j][:2])\n            # Checking if the distance is less than 6 feet \n            if dist < 130:\n                # If less than 6 feet, flag the respective images\n                label[i] = 1\n                label[j] = 1\n    \n    # Coloring the image\n    new_image = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n    \n    # Coloring the rectangle around the image\n    for i in range(len(detected_face)):\n        (x, y, w, h) = detected_face[i]\n        if label[i] == 1:\n            # If its 1, then the distance is less than 6 feet so mark red\n            cv2.rectangle(new_image, (x, y), (x+w, y+h), (255, 0, 0), 2)\n        else:\n            # If not mark green \n            cv2.rectangle(new_image, (x, y), (x+w, y+h), (0, 255, 0), 2)\n         \n    plt.figure(figsize = (10, 10))\n    plt.imshow(new_image)","0f34c712":"## Checking for total number of images in the dataset\nprint(f\"With Mask:\", dataset.value_counts(\"mask_status\")[0])\nprint(f\"Without Mask:\", dataset.value_counts(\"mask_status\")[1])\n\n## Plotting the numbers\nsns.countplot(x = dataset[\"mask_status\"])","d6d781af":"plt.figure(figsize = (15, 10))\n\nfor i in range(9):\n    random = np.random.randint(1, len(dataset))\n    plt.subplot(3, 3, i+1)\n    plt.imshow(cv2.imread(dataset.loc[random,\"image_path\"]))\n    plt.title(dataset.loc[random,\"mask_status\"], size = 15)\n    plt.xticks([])\n    plt.yticks([])\n    \nplt.show()","0eebdae9":"## Splitting train test and Validation Dataset\ntrain_df = dataset[dataset[\"where\"] == \"Train\"]\ntest_df = dataset[dataset[\"where\"] == \"Test\"]\nvalid_df = dataset[dataset[\"where\"] == \"Validation\"]\n\nprint(train_df.head(10))\n\n## Shuffling the dataset \ntrain_df = train_df.sample(frac = 1)\ntest_df = test_df.sample(frac = 1)\nvalid_df = valid_df.sample(frac = 1)\n\nprint(\"\\n After Shuffling \\n\")\nprint(train_df.head(10))","83be01a7":"plt.figure(figsize = (15, 5))\nplt.subplot(1, 3, 1)\nsns.countplot(x = train_df[\"mask_status\"])\nplt.title(\"Training Dataset\", size = 10)\n\nplt.subplot(1, 3, 2)\nsns.countplot(x = test_df[\"mask_status\"])\nplt.title(\"Test Dataset\", size = 10)\n\nplt.subplot(1, 3, 3)\nsns.countplot(x = valid_df[\"mask_status\"])\nplt.title(\"Validation Dataset\", size = 10)\n\nplt.show()","c69c2ad4":"train_df = train_df.reset_index().drop(\"index\", axis = 1)\ntrain_df.head()","d63ff2e6":"## Reading all the image into a list and changing the size of the image to (150,150)\ndata = []\nimage_size = 150\n\nfor i in range(len(train_df)):\n    ## Converting the image into grayscale\n    img_array = cv2.imread(train_df[\"image_path\"][i], cv2.IMREAD_GRAYSCALE)\n\n    ## Resizing the array\n    new_image_array = cv2.resize(img_array, (image_size, image_size))\n\n    ##Encoding the image with the label\n    if train_df[\"mask_status\"][i] == \"WithMask\":\n        data.append([new_image_array, 1])\n    else:\n        data.append([new_image_array, 0])","f5418da8":"data = np.array(data)","d202f5ca":"data[0][0].shape","a4b44ed4":"## Shuffling the data to make sure everything is not in order\nnp.random.shuffle(data)","a4701aad":"## Looking at the training samples\n\nfig, ax = plt.subplots(2, 3, figsize=(10, 10))\n\nfor row in range(2):\n    for col in range(3):\n        image_index = row*100+col\n        \n        ax[row, col].axis(\"off\")\n        ax[row,col].imshow(data[image_index][0], cmap = \"gray\")\n    \n        if data[image_index][1] == 0:\n            ax[row, col].set_title(\"Without Mask\")\n        else:\n            ax[row, col].set_title(\"With Mask\")\n            \nplt.show()","64d3c656":"# datagen = ImageDataGenerator(rescale = 1.\/255)\n\n# train_generator=datagen.flow_from_dataframe(\n# dataframe=train_df,\n# directory=\"..\/input\",\n# x_col=\"image_path\",\n# y_col=\"mask_status\",\n# batch_size=80,\n# seed=42,\n# shuffle=False,\n# class_mode=\"binary\",\n# target_size=(150,150))","365b6109":"X = []\ny = []\n\n## Seperating X and y\nfor image in data:\n    X.append(image[0])\n    y.append(image[1])\n    \n## Converting X and y to numpy array as Tensorflow accepts only numpy arrays\nX = np.array(X)\ny = np.array(y)","da9704eb":"### Normalizing the data\nX = X\/255\n\n### Train Test Split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.2, random_state = 42)","24ba9c17":"model = Sequential()\nmodel.add(Conv2D(64, (3, 3), activation = \"relu\"))\nmodel.add(Conv2D(64, (3, 3), activation = \"relu\"))\nmodel.add(MaxPool2D(pool_size=(3, 3)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation = \"relu\"))\nmodel.add(Dense(1, activation = \"sigmoid\"))\n# model.summary()","f08c986d":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.BinaryCrossentropy(),\n              metrics=['accuracy'])","a95aed6a":"# X_train = X_train.reshape(-1, 32, 150, 150)\n## Reshaping training set to match Conc2D\nX_train = X_train.reshape(len(X_train), X_train.shape[1], X_train.shape[2], 1)\nX_val = X_val.reshape(len(X_val), X_val.shape[1], X_val.shape[2], 1)\n\nhistory = model.fit(X_train, y_train, epochs=5, batch_size = 32)","9c3f2776":"model.summary()","377f4b51":"model.evaluate(X_val, y_val)","8e205212":"prediction = model.predict_classes(X_val)","ef9d507d":"print(classification_report(y_val, prediction))\nprint(confusion_matrix(y_val, prediction))","b5fa590b":"### Preparing data to be loaded into the Model","13c7b1fc":"We can observe that Default face detection Haar Cascading that we choose doesnt do a good job in identifying the faces. (Will replace this with other algorithms)","df7a2e9f":"### Visualisations","c4bc4291":"### Visualising the distribution of train test and validation set","38389c6f":"### Getting the directories, Path and Data","82a9b147":"##### Drawbacks:","9e865760":"### Face Detection using HAAR Cascade Algorithm","b448f067":"### Detecting Social Distance","9add996a":"Note: Red showing that they are not 6 feet apart. Green shows that they are 6 feet apart","10c164e8":"### Building the model"}}