{"cell_type":{"4543890b":"code","73e7e9d3":"code","e371d820":"code","11987608":"code","9a3f969b":"code","0944f61f":"code","dda9867c":"code","bd966a54":"code","15240d84":"code","2f4a2d2e":"code","a15620a3":"code","d93c2e80":"code","fe8386a1":"code","7b0b45e0":"code","5fd591cf":"code","0e509318":"code","13fd0fb2":"code","ac31fea9":"code","6e429da2":"code","4d8d83ea":"code","5f4383f0":"code","d8ba4819":"code","65fe441a":"code","4e9c57ca":"code","d73ee644":"code","e3380b9a":"code","c746dc04":"code","4bfbfeea":"code","63efd00c":"markdown","39e57577":"markdown","d94ea0d9":"markdown","ae559f20":"markdown","9e924a4a":"markdown"},"source":{"4543890b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport tqdm\nimport time\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import accuracy_score, f1_score\nimport sklearn.svm\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nprint(os.listdir(\"..\/input\"))\n\n# source Cipher #1 & Cipher #2 Full Solutions (https:\/\/www.kaggle.com\/leflal\/cipher-1-cipher-2-full-solutions)\ndic1 = {'1': ' ', '\\x1b': 'e', 't': 't', 'v': 's', '#': 'r', '0': 'h', '8': 'l', 's': '\\n', 'A': 'd', '^': 'o', ']': 'f', 'O': 'a', '\\x02': 'n', 'o': 'y', 'c': 'u', '_': 'c', '{': 'T', '\\x03': 'b', 'z': 'v', 'a': 'i', 'W': 'w', '-': 'm', '*': 'F', 'G': ':', ';': \"'\", 'f': 'k', 'F': 'L', \"'\": 'p', 'd': 'g', '>': 'S', 'X': 'j', '\\x1a': 'q', 'w': 'K', '2': 'C', ':': 'I', '9': 'P', '@': 'U', 'x': 'D', '+': 'x', 'T': ',', '%': 'O', '\\x08': '.', 'q': '-', '\\x1e': 'R', 'h': 'z', '!': 'X', '\\x7f': 'N', '\/': 'A', 'b': '@', '}': 'J', 'J': 'B', 'e': 'M', '\"': 'G', '|': '(', 'y': ')', 'g': 'H', 'u': '3', '\\x06': '7', '\\t': '5', ',': '4', 'L': '1', '\\\\': '0', 'n': '8', '[': '>', ' ': '<', 'r': '&', 'l': 'W', '\\x18': 'V', 'U': '[', 'i': ']', '3': ';', '~': '+', '<': '9', 'H': '2', '5': '6', '?': '\/', '4': '|', 'Z': '=', '.': '~', 'm': '\\\\', '\\x10': 'Y', ')': '_', 'S': '\\x08', '6': '\"', '&': '?', '\\x1c': '*', 'Q': '\\t', 'I': '}', '`': '#', 'B': '$', 'P': '!', 'k': '{', 'Y': '`', 'V': 'Q', 'D': '\\x0c', '=': '\\x10', '$': '\\x02', 'K': 'Z', 'p': '\\x1e', '(': '^', '\\x0c': '%', 'E': 'E'}\ndic2 = {'8': ' ', 'z': '\\n', '$': 'e', '{': 't', '7': 'h', 'e': 'o', 'd': 'f', 'V': 'a', '\\x10': 'n', 'H': 'd', '*': 'r', '\\x03': 'v', '^': 'w', 'h': 'i', '}': 's', 'v': 'y', '?': 'l', 'j': 'u', '1': 'F', '4': 'm', 'N': ':', '\\x18': 'b', 'f': 'c', 'B': \"'\", 'm': 'k', 'M': 'L', '.': 'p', 'k': 'g', 'E': 'S', '_': 'j', '9': 'C', '#': 'q', 'n': 'H', '[': ',', '&': 'R', 'x': '-', '\\x06': 'T', '~': 'K', 'A': 'I', 'G': 'U', '\\x7f': 'D', 'L': 'E', ',': 'O', 'o': 'z', '6': 'A', \"'\": '<', 'P': '}', 'Q': 'B', '=': '\"', ']': 'Q', ')': 'G', '\\x19': '7', '\\x1b': '5', '\\\\': '[', 'F': '\/', 'r': '{', '\/': '^', '5': '~', '\\n': '+', 'I': '$', 'y': '&', '!': 'V', 'g': '#', 's': 'W', ';': '|', 'i': '@', '\\x1a': '.', '\\x08': '(', 'l': 'M', '\\x02': ')', ' ': 'Y', '(': 'X', 'c': '0', '2': 'x', 'W': '!', '-': '?', '\\t': 'J', '3': '4', '<': '6', '\\x0c': 'N', '@': 'P', 'S': '1', 'O': '2', 'C': '9', 'u': '8', '|': '3', '\\x1e': '%', 'b': '>', 'X': '\\t', '0': '_', '>': '\\x03', 'J': '\\x1a', '%': '*', 'Z': '\\x08', 'Y': '\\x06', '\"': '\\x1b', 't': '\\\\', 'a': '=', 'R': 'Z', 'p': ']', ':': ';', 'T': '\\x7f', 'K': '\\x0c', 'q': '\\x18', '\\x1c': '\\x19', '`': '`', '+': '\\x02'}","73e7e9d3":"def decrypt(str,dict):\n    out=''\n    for i in range(0,len(str)):\n        transit = str[i]\n        out += dict[transit]\n    return out\n\ntrain = pd.read_csv('..\/input\/train.csv')\n# add column for clear text\ntrain['clear']=''\n","e371d820":"# Training set Decrypt level 1\nfor j in range(0,len(train)):\n    if train.iloc[j,1] == 1:\n        scrambled = train.iloc[j,2]\n        clear = decrypt(scrambled,dic1)\n        train.iloc[j,4] = clear\n\n# Training set Decrypt level 2\nfor j in range(0,len(train)):\n    if train.iloc[j,1] == 2:\n        scrambled = train.iloc[j,2]\n        clear = decrypt(scrambled,dic2)\n        train.iloc[j,4] = clear","11987608":"# update the files...\nfor i in range(0,len(train)):\n    if train.iloc[i,4] != '':\n        train.iloc[i,2] = train.iloc[i,4]\n\ntrain.drop('clear', axis=1, inplace=True)","9a3f969b":"diff1 = train[train['difficulty'] == 1]\ndiff2 = train[train['difficulty'] == 2]\ndiff3 = train[train['difficulty'] == 3]\ndiff4 = train[train['difficulty'] == 4]","0944f61f":"diff1 = diff1.drop(['Id','difficulty'], axis = 1)\ndiff2 = diff2.drop(['Id','difficulty'], axis = 1)\ndiff3 = diff3.drop(['Id','difficulty'], axis = 1)\ndiff4 = diff4.drop(['Id','difficulty'], axis = 1)\ndiff1.head()","dda9867c":"# train = pd.concat([train, pd.get_dummies(train['difficulty'])], axis=1)\n# train = train.drop(['Id', 'difficulty'], axis = 1)","bd966a54":"# train = train.iloc[:,[0,2,3,4,5,1]]","15240d84":"# train.columns = ['ciphertext', '1d', '2d', '3d', '4d', 'target']\n# train.head()","2f4a2d2e":"diff1['ciphertext'] = diff1['ciphertext'].apply(lambda x: x.replace('1', ' '))\ndiff2['ciphertext'] = diff2['ciphertext'].apply(lambda x: x.replace('8', ' '))\ndiff3['ciphertext'] = diff3['ciphertext'].apply(lambda x: x.replace('8', ' '))\ndiff4['ciphertext'] = diff4['ciphertext'].apply(lambda x: x.replace('8', ' '))","a15620a3":"train_diff = pd.concat([diff1, diff2, diff3, diff4])","d93c2e80":"Xtrain, Xtest, ytrain, ytest = train_test_split(train_diff.iloc[:,:1], train_diff['target'], test_size = 0.1, random_state = 0)","fe8386a1":"start = time.time()\nvect = TfidfVectorizer(analyzer = 'char_wb', lowercase = False, ngram_range=(1, 6))\ntrain_vect = vect.fit_transform(Xtrain['ciphertext'])\ntest_vect = vect.transform(Xtest['ciphertext'])\nprint('Time: ' + str(time.time() - start) + 's')","7b0b45e0":"start = time.time()\nmodel = sklearn.svm.LinearSVC()\nmodel.fit(train_vect, ytrain)\nprint('Time: ' + str(time.time() - start) + 's')","5fd591cf":"pred = model.predict(test_vect)","0e509318":"accuracy_score(pred, ytest)","13fd0fb2":"f1_score(pred, ytest, average= 'macro')","ac31fea9":"test1 = pd.read_csv('..\/input\/test.csv')\n# add column for clear text\ntest1['clear']=''\n\n# treat case of line 8151,38126,38130,42245,43762\ntest1.iloc[8151,1] = 2\ntest1.iloc[38130,1] = 2\ntest1.iloc[42245,1] = 3\ntest1.iloc[43762,1] = 2\n\n# Test set Decrypt level 1\nfor j in range(0,len(test1)):\n    if test1.iloc[j,1] == 1:\n        scrambled = test1.iloc[j,2]\n        clear = decrypt(scrambled,dic1)\n        test1.iloc[j,3] = clear\n# Test set Decrypt level 2\nfor j in range(0,len(test1)):\n    if test1.iloc[j,1] == 2:\n        scrambled = test1.iloc[j,2]\n        clear = decrypt(scrambled,dic2)\n        test1.iloc[j,3] = clear\nfor i in range(0,len(test1)):\n    if test1.iloc[i,3] != '':\n        test1.iloc[i,2] = test1.iloc[i,3]\ntest1.drop('clear', axis=1, inplace=True)\n\ntest = test1.copy()","6e429da2":"test_diff1 = test[test['difficulty'] == 1]\ntest_diff2 = test[test['difficulty'] == 2]\ntest_diff3 = test[test['difficulty'] == 3]\ntest_diff4 = test[test['difficulty'] == 4]","4d8d83ea":"test_diff1['ciphertext'] = test_diff1['ciphertext'].apply(lambda x: x.replace('1', ' '))\ntest_diff2['ciphertext'] = test_diff2['ciphertext'].apply(lambda x: x.replace('8', ' '))\ntest_diff3['ciphertext'] = test_diff3['ciphertext'].apply(lambda x: x.replace('8', ' '))\ntest_diff4['ciphertext'] = test_diff4['ciphertext'].apply(lambda x: x.replace('8', ' '))","5f4383f0":"test_diff = pd.concat([test_diff1, test_diff2, test_diff3, test_diff4])","d8ba4819":"test1.head()","65fe441a":"test_diff = test_diff.set_index('Id').loc[test1['Id']]","4e9c57ca":"test_vect = vect.transform(test_diff['ciphertext'])","d73ee644":"test_pred = model.predict(test_vect)","e3380b9a":"submission = pd.DataFrame([test1['Id'],test_pred]).T","c746dc04":"submission.columns = ['Id', 'Predicted']","4bfbfeea":"submission.to_csv('submission.csv', index=False)","63efd00c":"### SVM","39e57577":"## ML Models","d94ea0d9":"### Test Prediction","ae559f20":"### Vectorization","9e924a4a":"**Hybrid solution update using multiple sources.**\n\nHere is my quick & dirty test kernel using hybrid clear\/crypted training set and partial decryption results.\n\nAs you can see, the improvement is not impressive...\n\nMany Thanks to:\n- Flal for kernel :*Cipher #1 & Cipher #2 Full Solutions* (https:\/\/www.kaggle.com\/leflal\/cipher-1-cipher-2-full-solutions)\n- ARES for kernel: *Classification - TFIDF + Logistic* (https:\/\/www.kaggle.com\/ananthu017\/classification-tfidf-logistic)\n- kaggleuser58 for kernel: *1 char decryption in level 1, 2 and 3 gives 98.85%*\n(https:\/\/www.kaggle.com\/kaggleuser58\/1-char-decryption-in-level-1-2-and-3-gives-98-85)\n\n"}}