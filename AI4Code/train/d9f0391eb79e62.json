{"cell_type":{"9341476e":"code","09f52f41":"code","376e64d8":"code","4f710a87":"code","bfa2e843":"code","593bc782":"code","a0f257f9":"code","7c3788f0":"code","75683987":"code","38a378bc":"markdown","447bb5ef":"markdown","3cae6a47":"markdown","880edf75":"markdown"},"source":{"9341476e":"import numpy as np \nimport pandas as pd ","09f52f41":"#df1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], \n#                    'B': ['B0', 'B1', 'B2', 'B3'], \n#                    'C': ['C0', 'C1', 'C2', 'C3'], \n#                    'D': ['D0', 'D1', 'D2', 'D3']}, \n#                    index = [0, 1, 2, 3])\n# We can provide the Index of our own as well.\n\ndf1 = pd.DataFrame(\n                   {\n                    'A': ['A0', 'A1', 'A2', 'A3'], \n                    'B': ['B0', 'B1', 'B2', 'B3']\n                   }\n                  ) \n  \n# Creating second dataframe \ndf2 = pd.DataFrame(\n                    {\n                    'A': ['A4', 'A5', 'A6', 'A7'], \n                    'B': ['B4', 'B5', 'B6', 'B7']\n                    }\n                  ) \nprint(df1)\nprint(\"-\"*10)\nprint(df2)\nprint(\"-\"*10)\nprint(pd.concat([df1,df2], ignore_index = True)) # Note : ignore_index is set to True, This is to create new index. If set to false, will keep the original index.","376e64d8":"print(pd.concat([df1,df2], ignore_index = False))","4f710a87":"# Combining the data side-by-side\nprint(pd.concat([df1,df2], axis = 1))","bfa2e843":"# Dataframe created \nleft = pd.DataFrame(\n                    {\n                    'Key': ['K0', 'K1', 'K2', 'K5'], \n                    'A': ['A0', 'A1', 'A2', 'A3'], \n                    'B': ['B0', 'B1', 'B2', 'B3']\n                    }\n                   ) \n  \nright = pd.DataFrame(\n                     {\n                      'Key': ['K0', 'K4', 'K2', 'K3'], \n                      'C': ['C0', 'C1', 'C2', 'C3'], \n                      'D': ['D0', 'D1', 'D2', 'D3']\n                     }\n                    )  ","593bc782":"# Option 1 : Keep just Intercation of both\nprint(pd.merge(left, right, how ='inner', on ='Key'))\nprint('*'*25)\nprint(pd.merge(left, right, how ='inner' )) # Here we have remved on argument.","a0f257f9":"# Option 2 : Keep full content of one, and the matching of another DF.\nprint(pd.merge(left, right, how ='left')) # Full content from DF \"left\", and just matching from DF \"right\"\nprint('*'*15)\nprint(pd.merge(right, left, how ='left' )) # Full content from DF \"right\", and just matching from DF \"left\"  ","7c3788f0":"# Option 3 : Keep full content of both the DF.\nprint(pd.merge(left, right, how ='outer')) # Full content from DF \"left\", and from DF \"right\". Non-Matching will be set to NaN.\n ","75683987":"# result = left.join(right)","38a378bc":"2) **Using Merge function**","447bb5ef":"1) **Using concat() function**","3cae6a47":"3) **Using Joins**","880edf75":"# Combining Pandas Data Frame"}}