{"cell_type":{"a594bdd5":"code","9beffa46":"code","9d9780ec":"code","75add720":"code","58f98e28":"code","0d0bcac3":"code","9f01dfc8":"code","da9c6657":"code","05bb7bcd":"code","1b44118a":"code","28764f19":"code","f8908fd1":"code","542622af":"code","157e0b34":"code","2b4180fe":"code","5570d1ef":"code","c5bc0c54":"code","cd656d15":"code","482c8f2a":"code","c20d165d":"code","7c5913d1":"code","1890e27e":"code","b8f9b7db":"code","31d81ea9":"code","2b5ef153":"code","e9a16f38":"code","8440392d":"code","b01a9e17":"code","7b12d7de":"markdown","17eb67e2":"markdown","59432731":"markdown","5a50203d":"markdown","e95b1862":"markdown"},"source":{"a594bdd5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9beffa46":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F","9d9780ec":"data = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')","75add720":"data.head()","58f98e28":"data.info()","0d0bcac3":"def onehot_encode(df, column, prefix):\n    df = df.copy()\n    dummies = pd.get_dummies(df[column], prefix=prefix)\n    df = pd.concat([df, dummies], axis=1)\n    df = df.drop(column, axis=1)\n    return df","9f01dfc8":"data = data.drop('id', axis=1)","da9c6657":"data['year'] = data['date'].apply(lambda x: x[0:4])\ndata['month'] = data['date'].apply(lambda x: x[4:6])\ndata = data.drop('date', axis=1)","05bb7bcd":"len(data['zipcode'].unique())","1b44118a":"data = onehot_encode(data, 'zipcode', 'zip')","28764f19":"data.query('yr_renovated != 0')","f8908fd1":"len(data.query('yr_renovated != 0'))\/len(data)","542622af":"data = data.drop('yr_renovated', axis=1)","157e0b34":"data","2b4180fe":"y = data['price'].copy()\nX = data.drop('price', axis=1).copy()","5570d1ef":"scaler = StandardScaler()\nX = scaler.fit_transform(X)","c5bc0c54":"tf_X_train, tf_X_test, tf_y_train, tf_y_test = train_test_split(X, y, train_size=0.7, random_state=1)","cd656d15":"tf_X_train.shape","482c8f2a":"class Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__ ()\n        self.layer1 = nn.Linear(88, 64)\n        self.layer2 = nn.Linear(64, 64)\n        self.out = nn.Linear(64, 1)\n        \n    \n    def forward(self, x):\n        x = F.relu(self.layer1(x))\n        x = F.relu(self.layer2(x))\n        x = self.out(x)\n        return x\n        \n\nnet = Net()","c20d165d":"net.parameters","7c5913d1":"list(net.parameters())","1890e27e":"for i in range(len(list(net.parameters()))):\n    print(list(net.parameters())[i].shape)","b8f9b7db":"torch_X_train = torch.tensor(tf_X_train).type(torch.float32)\ntorch_y_train = torch.tensor(np.array(tf_y_train)).type(torch.float32)\ntorch_X_test = torch.tensor(tf_X_test).type(torch.float32)\ntorch_y_test = torch.tensor(np.array(tf_y_test)).type(torch.float32)","31d81ea9":"optimizer = torch.optim.Adam(net.parameters(), lr=0.01)\ncriterion = nn.MSELoss()","2b5ef153":"for x, target in zip(torch_X_train, torch_y_train):\n    optimizer.zero_grad()\n    output = net(x)\n    loss = criterion(output, target)\n    loss.backward()\n    optimizer.step()","e9a16f38":"total_loss = 0\n\nfor x, target in zip(torch_X_test, torch_y_test):\n    output = net(x)\n    loss = criterion(output, target)\n    total_loss += loss\navg_loss = total_loss \/ len(torch_X_test)\n    ","8440392d":"torch_rmse = torch.sqrt(avg_loss).detach().numpy()","b01a9e17":"print(f'PyTorch RMSE: {torch_rmse}')","7b12d7de":"# Results","17eb67e2":"# Splitting and Scaling","59432731":"# Training with PyTorch","5a50203d":"# Preprocessing","e95b1862":"Remove the column yr_renovated as the majority of entries don't have this value set"}}