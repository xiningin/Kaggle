{"cell_type":{"925152b1":"code","790d27d6":"code","3b49d9f9":"code","07a75468":"code","4cfbfe76":"code","90b944ee":"code","154b5e9b":"code","5622bf30":"code","67d2bf49":"code","ccce0e47":"code","d372a2ba":"code","76c881d6":"code","d4eb8a27":"code","bd28babc":"code","bb5f9cda":"code","b8db8734":"code","5c7c4602":"code","97e7a8ef":"code","6afd7c4a":"code","72c92795":"code","29538f7b":"code","f3230965":"code","a19e4374":"code","43294490":"code","efa64409":"code","8d02f174":"markdown","e161b4cb":"markdown","98c33dde":"markdown"},"source":{"925152b1":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport tensorflow as tf\nimport keras\nimport keras.layers as L\nimport math\nfrom keras.utils import Sequence\nfrom keras.preprocessing import image\nfrom random import shuffle\nfrom sklearn.model_selection import train_test_split\nimport plotly.express as px\nimport seaborn as sns","790d27d6":"train_labels =pd.read_csv('..\/input\/seti-breakthrough-listen\/train_labels.csv')\nsample_submission = pd.read_csv('..\/input\/seti-breakthrough-listen\/sample_submission.csv')","3b49d9f9":"px.histogram(train_labels['target'])","07a75468":"arr = np.load('..\/input\/seti-breakthrough-listen\/train\/f\/fffbb1c9c3d6c31.npy').astype(np.float32)","4cfbfe76":"fig = plt.figure(figsize=(16, 10))\nfor i in range(6):\n    plt.subplot(6,1,i+1)\n    plt.imshow(arr[i],aspect='auto')","90b944ee":"def on_target(arr):  #will return a new array that contain only on target array\n    arr0 = arr[::2]\n    return arr0","154b5e9b":"fig = plt.figure(figsize=(16, 10))\narr_new = on_target(arr)\nfor i in range(3):\n    plt.subplot(6,1,i+1)\n    plt.imshow(arr_new[i],aspect='auto')","5622bf30":"def id_to_path(idx,train=True):\n    path = '..\/input\/seti-breakthrough-listen\/'\n    if train:\n        folder = 'train\/'\n    else:\n        folder = 'test\/'\n    path+=folder+idx[0]+'\/'+idx+'.npy'\n    return path","67d2bf49":"class Dataset(Sequence):\n    def __init__(self,idx,y=None,batch_size=16,shuffle=True):\n        self.idx = idx\n        self.batch_size = batch_size\n        self.shuffle = shuffle\n        if y is not None:\n            self.is_train=True\n        else:\n            self.is_train=False\n        self.y = y\n    def __len__(self):\n        return math.ceil(len(self.idx)\/self.batch_size)\n    def __getitem__(self,ids):\n        batch_ids = self.idx[ids * self.batch_size:(ids + 1) * self.batch_size]\n        if self.y is not None:\n            batch_y = self.y[ids * self.batch_size: (ids + 1) * self.batch_size]\n            \n        list_x1 = np.array([np.load(id_to_path(x, self.is_train))[::2].reshape(3*273,256) for x in batch_ids]).transpose(1,2,0)\n        list_x2 = np.array([np.zeros((3,3*273,256)) for x in batch_ids]).transpose(1,2,3,0)\n        list_x2[0::] = list_x1\n        list_x2[1::] = list_x1\n        list_x2[2::] = list_x1\n        batch_x = np.transpose(list_x2,(3,1,2,0))\n        if self.is_train:\n            return batch_x, batch_y\n        else:\n            return batch_x\n    \n    def on_epoch_end(self):\n        if self.shuffle and self.is_train:\n            ids_y = list(zip(self.idx, self.y))\n            shuffle(ids_y)\n            self.idx, self.y = list(zip(*ids_y))","ccce0e47":"train_idx =  train_labels['id'].values\ny = train_labels['target'].values\ntest_idx = sample_submission['id'].values","d372a2ba":"x_train,x_valid,y_train,y_valid = train_test_split(train_idx,y,test_size=0.05,random_state=42,stratify=y)","76c881d6":"train_dataset = Dataset(x_train,y_train)\nvalid_dataset = Dataset(x_valid,y_valid)\ntest_dataset = Dataset(test_idx)","d4eb8a27":"!pip install -U efficientnet","bd28babc":"import efficientnet.keras as efn","bb5f9cda":"model = tf.keras.Sequential([efn.EfficientNetB0(input_shape=(3*273,256,3),weights='imagenet',include_top=False),\n        L.GlobalAveragePooling2D(),\n        L.Dense(32,activation='relu'),\n        L.Dense(1, activation='sigmoid')\n        ])\n\nmodel.summary()\nmodel.compile(optimizer=keras.optimizers.Adam(learning_rate=0.001),\n              loss='binary_crossentropy', metrics=[keras.metrics.AUC()])","b8db8734":"model.summary()","5c7c4602":"def auc_plot(auc,val_auc):\n    plt.plot(auc)\n    plt.plot(val_auc)\n    plt.xlabel('epochs')\n    plt.ylabel('auc')\n    plt.title('auc vs epochs')\n    plt.legend(['auc','val_auc'])\n    plt.show()\ndef loss_plot(loss,val_loss):\n    plt.plot(loss)\n    plt.plot(val_loss)\n    plt.xlabel('epochs')\n    plt.ylabel('loss')\n    plt.title('loss vs epochs')\n    plt.legend(['loss','val_loss'])\n    plt.show()","97e7a8ef":"history = model.fit(train_dataset,epochs=3,validation_data=valid_dataset)","6afd7c4a":"#auc_plot(history.history['auc'],history.history['val_auc'])","72c92795":"loss_plot(history.history['loss'],history.history['val_loss'])","29538f7b":"preds = model.predict(test_dataset)","f3230965":"preds = preds.reshape(-1)","a19e4374":"submission = pd.DataFrame({'id':sample_submission['id'],'target':preds})","43294490":"submission","efa64409":"submission.to_csv('submission.csv',index=False)","8d02f174":"https:\/\/www.kaggle.com\/awsaf49\/seti-bl-spatial-info-tf-tpu<br>\nhttps:\/\/www.kaggle.com\/c\/seti-breakthrough-listen\/discussion\/239552","e161b4cb":"# Refrences","98c33dde":"helper function"}}