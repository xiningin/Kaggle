{"cell_type":{"564a76c4":"code","d08e5414":"code","663a7c91":"code","00a4ece0":"code","d1d4dbc1":"code","26f38c92":"code","3ed694a9":"code","afd4b4df":"code","c4a7bd36":"code","1fa421fd":"code","19e0d8a6":"code","7e8654e4":"code","0e55b7ee":"code","2996444f":"code","382bdef4":"code","85f9445d":"code","565728f5":"code","04a55f93":"code","62772808":"code","be98c240":"code","94f7569a":"code","715970dd":"code","a967f507":"code","2acd014e":"code","e6f9d59f":"code","27f0d185":"code","49f404c3":"code","bdd052a2":"code","8ea7975e":"code","8eab32da":"code","b0887542":"code","6052ecfc":"code","3f991bdf":"code","90a9469e":"code","e9dc13b0":"code","9071bbb0":"markdown","1a5d3a25":"markdown","7aa1af9b":"markdown","65b23519":"markdown","221ddc1b":"markdown","a1931c1f":"markdown","7a926003":"markdown","af1c8b66":"markdown","48d749bc":"markdown","fe901b89":"markdown","3d16925d":"markdown","e011e319":"markdown","b2c89bd2":"markdown","6c6876d3":"markdown","ebfa19e5":"markdown","ce020287":"markdown","572b3065":"markdown","fb1dfcaa":"markdown","fbbc114e":"markdown","819874fb":"markdown","af845f87":"markdown","5608b4ab":"markdown","dea08831":"markdown","b4e1c320":"markdown","b82659ba":"markdown","839207dc":"markdown","81cbecb7":"markdown","60618185":"markdown","82fc8bf3":"markdown","a4b094d0":"markdown","f702aad1":"markdown","e2ed754f":"markdown","3d768d90":"markdown","c3bef78a":"markdown"},"source":{"564a76c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use(\"seaborn-colorblind\")\nsns.set_palette('pastel')\nfrom collections import Counter\n\nfrom sklearn.manifold import TSNE\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.metrics import plot_confusion_matrix,classification_report,roc_curve,roc_auc_score,confusion_matrix\nimport warnings \nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d08e5414":"bank_churnesData = pd.read_csv(\"\/kaggle\/input\/credit-card-customers\/BankChurners.csv\")","663a7c91":"bank_churnesData.head()","00a4ece0":"bank_churnesData.info()","d1d4dbc1":"bank_churnesData.columns","26f38c92":"bank_churnesData.drop(['Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1','Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2'],axis = \"columns\",inplace = True)","3ed694a9":"bank_churnesData.columns","afd4b4df":"#Set index\nbank_churnesData.set_index(\"CLIENTNUM\", inplace = True)\n\n#Sort data ascending CLINETNUM index\nbank_churnesData.sort_index(ascending=True,inplace=True)","c4a7bd36":"bank_churnesData.info()","1fa421fd":"bank_churnesData.isnull().any()","19e0d8a6":"bank_churnesData.duplicated().any()","7e8654e4":"corrData = bank_churnesData.corr()\nf, ax= plt.subplots(figsize = (11,9))\nax = sns.heatmap(corrData, cmap=\"flare\", linewidths=.5,annot = True)\nplt.show()","0e55b7ee":"def create_picChart(df,column):\n    \"\"\"Create Pie chart, inputs: df=Pandas Dataframe,column=column we want to do pie chart\"\"\"\n    key_value_column = dict(df.groupby(column).size())\n    sizeData = list()\n    valueList = list(key_value_column.values())\n    keyList = list(key_value_column.keys())\n    title = \"\"\n    \n    pData = np.array(valueList)\/sum(valueList)*100\n    labels = keyList\n    explode = np.zeros(len(key_value_column))\n    \n    fig1, ax1 = plt.subplots(figsize=(10,10))\n    ax1.pie(pData, explode=explode, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90)\n    ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n    plt.title(\"Hi\")\n    \n    for index in keyList:\n        if index != keyList[-1]:\n            title = title + index + \"  vs.  \"\n        else:\n            title = title + index \n        \n    plt.title(title)\n    plt.show()","2996444f":"create_picChart(bank_churnesData,\"Attrition_Flag\")","382bdef4":"categories = [\"Attrition_Flag\",\"Gender\",\"Education_Level\",\"Marital_Status\",\"Income_Category\",\"Card_Category\"]\ndef getCategoriesInChart(cats):\n    fig, axis = plt.subplots(len(cats)\/\/3,3,figsize=(20,12))\n    index = 0\n    \n    for i in range(len(cats)\/\/3):\n        for j in range(3):\n            ax=sns.countplot(x= cats[index],data=bank_churnesData, ax = axis[i][j])\n            \n            if cats[index] in [\"Education_Level\",\"Income_Category\"]:\n                for item in ax.get_xticklabels():\n                    item.set_rotation(15)\n            \n            for p in ax.patches:\n                height = p.get_height()\n                ax.text(p.get_x()+p.get_width()\/2.,\n                        height + 3,\n                        '{:1.2f}%'.format(height\/len(bank_churnesData)*100),\n                        ha=\"center\") \n            index += 1","85f9445d":"getCategoriesInChart(categories)","565728f5":"bank_churnesData[\"Income_Category\"].unique()","04a55f93":"bank_churnesData[\"incomeCategory2\"] = [\"Low Income\" if i in [\"Less than $40K\",\"$40K - $60K\"] else \"Unknown\" if i == \"Unknown\" else \"Mid-High Income\" for i in bank_churnesData[\"Income_Category\"]]","62772808":"lowIncomeCustomersP = bank_churnesData[\"incomeCategory2\"].value_counts()[0]\/len(bank_churnesData[\"incomeCategory2\"])*100\nmidHighCustomersP = bank_churnesData[\"incomeCategory2\"].value_counts()[1]\/len(bank_churnesData[\"incomeCategory2\"])*100\n\nprint(\"The percentage of Low Income Category People: {} \\nThe percentage of Mid-High Income Category People: {}\".format(str(lowIncomeCustomersP),str(midHighCustomersP)))","be98c240":"numerics = bank_churnesData.select_dtypes(include=np.number).columns.tolist()\nnumericVariables = numerics.copy()\ncontinousVariables = numerics.copy()\nfor i in [\"Dependent_count\",\"Total_Relationship_Count\",\"Months_Inactive_12_mon\",\"Contacts_Count_12_mon\"]:\n    continousVariables.remove(i)\nprint(continousVariables)","94f7569a":"def plot_hist(df,variable):\n    var = df[variable]\n    plt.figure(figsize = (9,3))\n    sns.histplot(var,bins = 50,kde=True)\n    plt.ylabel(\"Frequency\")\n    plt.xlabel(variable)\n    plt.title(\"{} Distribituon with hist\".format(variable))\n    plt.show()","715970dd":"for var in continousVariables:\n    plot_hist(bank_churnesData,var)","a967f507":"def getCategoriesInChartWithTarget(cats,target):\n    fig, axis = plt.subplots(len(cats)\/\/3,3,figsize=(20,12))\n    index = 0\n    \n    for i in range(len(cats)\/\/3):\n        for j in range(3):\n            ax=sns.countplot(x= cats[index],data=bank_churnesData, ax = axis[i][j],hue=target)\n            \n            ax.legend(title=\"Customer Exit?\",labels=[\"Yes\",\"No\"])\n            if cats[index] in [\"Education_Level\",\"Income_Category\"]:\n                for item in ax.get_xticklabels():\n                    item.set_rotation(15)\n            \n            for p in ax.patches:\n                height = p.get_height()\n                ax.text(p.get_x()+p.get_width()\/2.,\n                        height + 3,\n                        '{:1.2f}%'.format(height\/len(bank_churnesData)*100),\n                        ha=\"center\") \n            index += 1","2acd014e":"getCategoriesInChartWithTarget(categories,\"Attrition_Flag\")","e6f9d59f":"def decet_outlier_unknown_index(df,numFeatures,catFeatures):\n    \"\"\"\n    Decet outlier rows for given df and columns for %25 and %75 percentiles\n    \n    df: Pandas DataFrame\n    \n    features: Column name\n    \n    \"\"\"\n    \n    outlier_unknown_indeces = []\n    noInf_ind = []\n    for c in numFeatures:\n        \n        #Q1 Calculation\n        \n        Q1 = np.percentile(df[c],25)\n\n\n        #Q3 Calculation\n        \n        Q3 = np.percentile(df[c],75)\n\n        #IQR Calculation\n        \n        IQR = Q3-Q1\n        \n        #Outlier Step\n        \n        outlier_step = IQR * 1.5\n        \n        #Detect outlier and their indeces\n        \n        outlier_list_col = df[(df[c]< Q1 - outlier_step) | (df[c]> Q3 + outlier_step)].index\n        \n        \n        outlier_unknown_indeces.extend(outlier_list_col)\n        \n    for f in catFeatures:\n        \n        unknown_list_col = df[df[f] == \"Unknown\"].index\n        outlier_unknown_indeces.extend(unknown_list_col)\n        \n    for i,j in Counter(outlier_unknown_indeces).items():\n        if j > 3:\n            noInf_ind.append(i)\n            \n    return noInf_ind","27f0d185":"#Give the rows ind. which have 3 or most outlier\/unknown col\ntrash_ind = decet_outlier_unknown_index(bank_churnesData,numericVariables,categories)\nbank_churnesData.loc[trash_ind,:].head()","49f404c3":"bank_churnesData = bank_churnesData.drop(index=trash_ind)","bdd052a2":"bank_churnesData[\"dependent\"] = [0 if i == \"Attrited Customer\" else 1 for i in bank_churnesData[\"Attrition_Flag\"]]\nbank_churnes_data = bank_churnesData.drop(columns= [\"Attrition_Flag\",\"incomeCategory2\"]) #Dropping cols\n\ndummy_data = pd.get_dummies(bank_churnes_data)\ndummy_data.columns\n\nextra_dummy_cols = [\"Gender_M\",\"Education_Level_Unknown\",\"Marital_Status_Unknown\",\"Income_Category_Unknown\",\"Card_Category_Platinum\"]\n\ndummy_data = dummy_data.drop(columns = extra_dummy_cols)\ny = dummy_data[\"dependent\"].to_numpy().reshape(-1,1)\nX = dummy_data.drop(columns=\"dependent\").to_numpy()\n\n#Train-test models\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state = 23)","8ea7975e":"tsne = TSNE(learning_rate = 100,random_state = 23)\ntransformed = tsne.fit_transform(X)\nxs = transformed[:,0]\nys = transformed[:,1]\n\nplt.figure(figsize=(12,8))\nplt.scatter(x = xs,y = ys,c=y)\nscatter = plt.scatter(xs, ys,c=y)\nplt.legend(handles=scatter.legend_elements()[0], labels=[\"Attriated\",\"Existing\"])\nplt.show()","8eab32da":"Counter(y[:,0])","b0887542":"xgb = XGBClassifier(objective = \"multi:softprob\",num_class=2,eval_metric='mlogloss')\nxgb.fit(X_train,y_train)\n\ny_pred = xgb.predict(X_test)\n\nprint(classification_report(y_test,y_pred))\n\nplot_confusion_matrix(xgb,X_test, y_test)\nplt.show()\nxgb.score(X_test,y_test)","6052ecfc":"y_prob = xgb.predict_proba(X_test)\nfpr,tpr,thrshld = roc_curve(y_test,y_prob[:,1])\nplt.figure(figsize=(12,8))\nplt.plot([0,1],[0,1],'--')\nplt.plot(fpr,tpr)\nplt.grid()\nplt.show()","3f991bdf":"clf = XGBClassifier(objective = \"multi:softprob\",num_class = 2,eval_metric='mlogloss')\nparameters = {\n    'n_estimators': [600, 1000],\n    'gamma':[0,3,5],\n    'min_child_weight':[1,3,5],\n    'learning_rate': [0.1, 0.05,0.03, 0.01]\n}\nskf = StratifiedKFold(n_splits=4, shuffle = True)\n\ngridSearch = GridSearchCV(clf,param_grid=parameters,scoring=\"roc_auc\",cv=skf)\ngridSearch.fit(X_train,y_train)","90a9469e":"xgb = gridSearch.best_estimator_\n\n\ny_pred = xgb.predict(X_test)\n\nprint(classification_report(y_test,y_pred))\n\nplot_confusion_matrix(xgb,X_test, y_test)\nplt.show()\nxgb.score(X_test,y_test)","e9dc13b0":"y_prob = xgb.predict_proba(X_test)\nfpr,tpr,thrshld = roc_curve(y_test,y_prob[:,1])\nplt.figure(figsize=(12,8))\nplt.plot([0,1],[0,1],'--')\nplt.plot(fpr,tpr)\nplt.grid()\nplt.show()","9071bbb0":"We can find the **Attrition_Flag** which customer is **Existing Customer** or **Attrited Customer**\n\nPrediction of Attrition_Flag can be increasing bank sustainabiliy, productivity and profit","1a5d3a25":"**XGBoost good choice this type of distributions**","7aa1af9b":"**Dependent columns; 1-> Existing Customer; 0-> Attrited Customer**","65b23519":"<h3><a id = \"11\">Categorical Variables vs Target Variable<\/a><\/h3>","221ddc1b":"<h3><a id = \"7\">Find and Examine The Target Value<\/a><\/h3>","a1931c1f":"**Our data looks good seperated but Attriated Customers too low. We can try with SMOTE after first model.**","7a926003":"**Ratio between Attrited vs. Existing customer is in pie chart**\n\n\n%16.1 is Attrited customer","af1c8b66":"**Controlling null columns**","48d749bc":"**Controlling duplicate any row**","fe901b89":"<h3><a id = \"8\">Analysis Categorical Values<\/a><\/h3>","3d16925d":"<h3><a id = \"4\">Variable Description<\/a><\/h3>","e011e319":"**Change CLIENTNUM to index**","b2c89bd2":"* Attrition_Flag(10127) **Target Value visulize in <a href = \"#targetPie\">pie chart<\/a>**\n* Gender(10127)\n* Education_Level(10127)\n* Maritial_Status(10127)\n* Income_Category(10127)\n* Card_Category(10127)","6c6876d3":"**We can also look the roc curve and auc score**","ebfa19e5":"<h2><a id = \"14\">T-SNE Visualization<\/a><\/h2>","ce020287":"<h1>Introduction<\/h1>\n\n<p>Everybody in the world know the credit card. It is the basically monthly credit system with card. Banks gives the customers which can pay the limit money.<\/p> \n\n<ol>\n    <li><a href = \"#1\">Load and Check the Data<\/a><\/li>\n    <li><a href = \"#2\">Presentation the Data<\/a>\n    <ul>\n                <li><a href = \"#4\">Variable Description<\/a><\/li>\n<li><a href = \"#3\">Check Data Variables and Clean The Data<\/a><\/li>\n    <\/ul>\n    <\/li>\n     <li><a href = \"#5\">Explotary Data Analysis<\/a>\n         <ul>\n             <li><a href = \"#6\">Exploratory the Variables Each Other<\/a><\/li>\n             <li><a href = \"#7\">Find and Examine the Target Variable<\/a><\/li>\n             <li><a href = \"#8\">Analysis Categorical Values<\/a><\/li>\n             <li><a href = \"#9\">Analysis Numerical Values Values<\/a><\/li>\n             <li><a href = \"#9\">Relation the Target Variable  Others<\/a><\/li>\n         <\/ul>\n       <\/li>\n     <li><a href = \"#10\">Basic Data Analysis<\/a>\n         <ul><li><a  href = \"#11\"> Categorical Variables vs Target Variable<\/a><\/li>\n             <\/ul><\/li>\n    <li><a href = \"#12\">Outlier Detection\/\"Unknown\" Col analysis<\/a><\/li>\n    <li><a href = \"#16\">Modelling<\/a>\n        <ul><li><a href = \"#13\">Preparing Data for Models<\/a><\/li>\n    <li><a href = \"#14\">T-SNE Visualazition<\/a><\/li>\n    <li><a href = \"#17\">XGBoost<\/a><\/li>\n<\/ul>\n    <\/li>\n\n    \n<\/ol>\n","572b3065":"<h1><a id = \"16\">Modelling<\/a><\/h1>\n","fb1dfcaa":"**These rows have 3 or more outlier\/unknown cols.**\n\n**So, i choose to delete this rows.**","fbbc114e":"<a id = \"targetPie\"><\/a>","819874fb":"<h2><a id = \"5\">Explotary Data Analysis<\/a><\/h2>","af845f87":"**Dropping and clean the Native bayes values**","5608b4ab":"<h3><a id = \"7\">Relation Between Values<\/a><\/h3>","dea08831":"<h2><a id = \"2\">Presentation the Data<\/a><\/h2>","b4e1c320":"<h2><a id = \"17\">XGBoost<\/a><\/h2>","b82659ba":"* Customer_Age(10127)\n* Dependent_count(10127)\n* Months_on_book(10127)\n* Total_Relationship_Count(10127)\n* Months_Inactive_12_mon(10127)\n* Contacts_Count_12_mon(10127)\n* Credit_Limit(10127)\n* Total_Revolving_Bal(10127)\n* Avg_Open_To_Buy(10127)\n* Total_Amt_Chng_Q4_Q1(10127)\n* Total_Trans_Amt(10127)\n* Total_Trans_Ct(10127)\n* Total_Ct_Chng_Q4_Q1(10127)\n* Avg_Utilization_Ratio(10127)","839207dc":"**Observations**\n* Most of the customers are Low Income category\n* Most of the customers \n","81cbecb7":"**So, our data don't have any duplicated row or any null value**","60618185":"<h2><a id = \"12\">Outlier\/Missing and \"Unknown\" Value Detection<\/a><\/h2>","82fc8bf3":"<h3><a id = \"9\">Analysis Numerical Values<\/a><\/h3>","a4b094d0":"<h2><a id = \"10\">Basic Data Analysis<\/a><\/h2>","f702aad1":"<h2><a id = \"1\">Load and Check The Data<\/a><\/h2>","e2ed754f":"<h4>Data Sample<\/h4>\n\n**About Customer**:\n* **CLIENTNUM**: unique clinet number value each customer\n* **Attrition_Flag**: Internal event (customer activity) variable (\"Existing Customer\",\"Attrited Customer\")\n* **Customer_Age**: Demographic variable - Customer's Age in Years\n* **Gender**: Demographic variable - M=Male, F=Female\n* **Dependent_count**: Demographic variable - Number of dependents\n* **Education_Level**: Demographic variable - Educational Qualification of the account holder (example: high school, college graduate, etc.)\n* **Marital_Status**: Demographic variable - Married, Single, Divorced, Unknown\n* **Income_Category**: Demographic variable - Annual Income Category of the account holder (< $40K, $40K - 60K, $60K - $80K, $80K-$120K, >\n\n**About Credit Card**:\n* **Card_Category**: Product Variable - Type of Card (Blue, Silver, Gold, Platinum)\n* **Months_on_book**: Period of relationship with bank\n* **Total_Relationship_Count**:Total no. of products held by the customer.\n* **Months_Inactive_12_mon**:No. of Months in the last 12 months.\n* **Contacts_Count_12_mon**:No. of Contacts in the last 12 months.\n* **Credit_Limit**:Credit Limit on the Credit Card\n* **Total_Revolving_Bal**:Total Revolving Balance on the Credit Card.\n* **Avg_Open_To_Buy**:Open to Buy Credit Line (Average of last 12 months\n* **Total_Amt_Chng_Q4_Q1**:Change in Transaction Amount (Q4 over Q1).\n* **Total_Trans_Amt**:Total Transaction Amount (Last 12 months).\n* **Total_Trans_Ct**:Total Transaction Count (Last 12 months).\n* **Total_Ct_Chng_Q4_Q1**:Change in Transaction Count (Q4 over Q1).\n* **Avg_Utilization_Ratio**:Average Card Utilization Ratio.\n\n**Naive Bayes**\n* **Naive_Bayes**: It was mentioned that all columns containing the \"N.B.\"-tag should be disregarded.\n","3d768d90":"<h2><a id = \"13\">Preparing Data for models<\/a><\/h2>","c3bef78a":"<h3><a id = \"3\">Check Data Variables and Clean The Data<\/a><\/h3>"}}