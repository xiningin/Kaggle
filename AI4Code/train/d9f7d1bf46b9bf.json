{"cell_type":{"208c9790":"code","c26ee9e2":"code","88ecfc94":"code","c49721d2":"code","51f65691":"code","4029ad58":"code","7a265441":"code","9212993b":"code","025fce91":"code","c5dcd144":"code","435074b6":"code","8824d74e":"code","e0b4673f":"code","08be0d48":"code","2fd0d486":"code","60dcab4f":"code","99b1624c":"code","94c870b0":"code","8a8b5d49":"code","6abb1f27":"code","034d44cb":"code","2449f7cc":"code","03e9fe0a":"code","6b18b1bb":"code","d7cb5492":"code","18034fa4":"code","4cbe650e":"code","472a6276":"code","5268cb9b":"code","98c94ec8":"code","03114098":"code","8535db1b":"code","a862d1ff":"code","bb2a2e8c":"code","20bf1458":"code","40fef8e1":"code","c5308df8":"code","af6751cf":"code","267a940c":"code","1c81887b":"code","39e1c6f7":"code","eface290":"code","c38344ce":"code","d58d921d":"code","8a851879":"code","9ea0a608":"code","f877c9c6":"code","0a6a161f":"code","ea8a19ed":"code","9cbcab19":"code","9408de56":"code","70494123":"code","f0608b4a":"code","71d827b8":"code","e022d649":"code","db233a23":"code","b1991563":"code","29b62216":"code","fa3684dc":"code","0182284f":"code","b99ec213":"code","454d6f21":"code","24d1665a":"code","aef921b1":"code","941b7241":"markdown","06f3909c":"markdown","4f09b669":"markdown","46b31139":"markdown","338a0522":"markdown","ee9eba56":"markdown","026c7f4d":"markdown","30acbc2d":"markdown","3ab4b7d0":"markdown","330c484e":"markdown","29193fb5":"markdown","0718a1ef":"markdown","74877ebe":"markdown","ed433769":"markdown","2b614a29":"markdown","5fd0c7bb":"markdown","9879f2b0":"markdown","6f1f3ff5":"markdown","2a8d755d":"markdown","af7c9cf3":"markdown","6ae762c3":"markdown","11baaacd":"markdown","cd14c245":"markdown","2cdccffe":"markdown","99f54a3e":"markdown","6162460d":"markdown","d0dac348":"markdown","b25ea73a":"markdown","13e497a4":"markdown","abe26b6a":"markdown","a53e7b4a":"markdown","3d03b6d3":"markdown","1daff6bf":"markdown","3b926de0":"markdown","b7070cc3":"markdown","66f08fc1":"markdown","f637a7c7":"markdown","3cb6f600":"markdown","bccce588":"markdown","88dcf248":"markdown","2435da91":"markdown","477e5345":"markdown","56afe51c":"markdown","a37e138c":"markdown","2146e877":"markdown","63c9bf65":"markdown","cbb88db2":"markdown","0493d2db":"markdown","2b31e1e9":"markdown","1df33988":"markdown","66202007":"markdown","b39c0a45":"markdown","b7415769":"markdown","d875cfbe":"markdown","da5bf934":"markdown","960e0273":"markdown","36c357f6":"markdown","0ca2c555":"markdown","8ccf6551":"markdown","77d65bec":"markdown","a5e00f49":"markdown","2f703ee8":"markdown"},"source":{"208c9790":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8aad\u307f\u8fbc\u307f\nimport numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew #for some statistics\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\n\n%matplotlib inline","c26ee9e2":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\ntrain = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")","88ecfc94":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u6700\u521d\u306e5\u884c\u3092\u8868\u793a\ntrain.head(5)","c49721d2":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u6700\u521d\u306e5\u884c\u3092\u8868\u793a\ntest.head(5)","51f65691":"# Id\u5217\u524a\u9664\u524d\u306e\u578b\u3092\u78ba\u8a8d\nprint(\"The train data size before dropping Id feature is : {} \".format(train.shape))\nprint(\"The test data size before dropping Id feature is : {} \".format(test.shape))\n\n# Id\u3060\u3051\u5225\u306b\u4fdd\u6301\u3059\u308b\ntrain_ID = train['Id']\ntest_ID = test['Id']\n\n# \u4e88\u6e2c\u306b\u4e0d\u8981\u306a\u306e\u3067Id\u5217\u3092\u524a\u9664\u3059\u308b\ntrain.drop(\"Id\", axis = 1, inplace = True)\ntest.drop(\"Id\", axis = 1, inplace = True)\n\n# Id\u5217\u524a\u9664\u5f8c\u306e\u578b\u3092\u78ba\u8a8d\nprint(\"\\nThe train data size after dropping Id feature is : {} \".format(train.shape)) \nprint(\"The test data size after dropping Id feature is : {} \".format(test.shape))","4029ad58":"fig, ax = plt.subplots()\nax.scatter(x = train['GrLivArea'], y = train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","7a265441":"# \u5916\u308c\u5024\u3092\u9664\u53bb\u3059\u308b\ntrain = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)\n\n# \u30b0\u30e9\u30d5\u3067\u8868\u793a\u3057\u3066\u518d\u5ea6\u30c1\u30a7\u30c3\u30af\u3059\u308b\nfig, ax = plt.subplots()\nax.scatter(train['GrLivArea'], train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","9212993b":"# \u6b63\u898f\u5206\u5e03\u4ed8\u304d\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\u3059\u308b\nsns.distplot(train['SalePrice'] , fit=norm);\n\n# MLE(Maximum Likelihood Estimate)\u3092\u7528\u3044\u3066\u5206\u5e03\u3092\u63a8\u5b9a\u3059\u308b\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint('mu = {:.2f} and sigma = {:.2f}'.format(mu, sigma))\nprint('\u203bmu\u306f\u3001\u4e2d\u592e\u5024\u3002 sigma\u306f\u3001\u5206\u6563\u5024')\n\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)], loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n# QQ\u30d7\u30ed\u30c3\u30c8\u3092\u63cf\u753b\u3059\u308b\n# \u6b63\u898fQQ\u30d7\u30ed\u30c3\u30c8\u3068\u306f\u3001\u89b3\u6e2c\u5024\u304c\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u5834\u5408\u306e\u671f\u5f85\u5024\u3092Y\u8ef8\u306b\u3068\u308a\u3001\u89b3\u6e2c\u5024\u305d\u306e\u3082\u306e\u3092X\u8ef8\u306b\u3068\u3063\u305f\u78ba\u7387\u30d7\u30ed\u30c3\u30c8\u3002\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","025fce91":"# SalePrice\u3092log(1+x)\u3000\u3067\u5bfe\u6570\u306b\u5909\u63db\u3059\u308b\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n# \u6b63\u898f\u5206\u5e03\u4ed8\u304d\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u753b\u3059\u308b\nsns.distplot(train['SalePrice'] , fit=norm);\n\n# MLE(Maximum Likelihood Estimate)\u3092\u7528\u3044\u3066\u5206\u5e03\u3092\u63a8\u5b9a\u3059\u308b\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint('mu = {:.2f} and sigma = {:.2f}'.format(mu, sigma))\nprint('\u203bmu\u306f\u3001\u4e2d\u592e\u5024\u3002 sigma\u306f\u3001\u5206\u6563\u5024')\n\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)], loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n# QQ\u30d7\u30ed\u30c3\u30c8\u3092\u63cf\u753b\u3059\u308b\n# \u6b63\u898fQQ\u30d7\u30ed\u30c3\u30c8\u3068\u306f\u3001\u89b3\u6e2c\u5024\u304c\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u5834\u5408\u306e\u671f\u5f85\u5024\u3092Y\u8ef8\u306b\u3068\u308a\u3001\u89b3\u6e2c\u5024\u305d\u306e\u3082\u306e\u3092X\u8ef8\u306b\u3068\u3063\u305f\u78ba\u7387\u30d7\u30ed\u30c3\u30c8\u3002\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","c5dcd144":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u9023\u7d50\u3057\u3066\u3001all_data\u3092\u4f5c\u6210\u3059\u308b\nntrain = train.shape[0]\nntest = test.shape[0]\ny_train = train.SalePrice.values\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(all_data.shape))","435074b6":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'\u6b20\u640d\u6bd4\u7387' :all_data_na})\nmissing_data.head(100)","8824d74e":"f, ax = plt.subplots(figsize=(10, 8))\nplt.xticks(rotation='90')\nsns.barplot(x=all_data_na.index, y=all_data_na)\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","e0b4673f":"# SalePrice\u3068\u306e\u76f8\u95a2\u3092\u78ba\u8a8d\u3059\u308b\ncorrmat = train.corr()\nplt.subplots(figsize=(12,9))\nsns.heatmap(corrmat, vmax=0.9, square=True)","08be0d48":"all_data[\"PoolQC\"] = all_data[\"PoolQC\"].fillna(\"None\")","2fd0d486":"all_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")","60dcab4f":"all_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")","99b1624c":"all_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")","94c870b0":"all_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")","8a8b5d49":"all_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))","6abb1f27":"for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    all_data[col] = all_data[col].fillna('None')","034d44cb":"for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)","2449f7cc":"for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)","03e9fe0a":"for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')","6b18b1bb":"all_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)","d7cb5492":"all_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])","18034fa4":"all_data = all_data.drop(['Utilities'], axis=1)","4cbe650e":"all_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")","472a6276":"all_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])","5268cb9b":"all_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])","98c94ec8":"all_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])","03114098":"all_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])","8535db1b":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'\u6b20\u640d\u6bd4\u7387' :all_data_na})\nmissing_data.head()","a862d1ff":"# \u6570\u5b57\u578b\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u3001\u6587\u5b57\u5217\u578b\u306b\u5909\u66f4\u3059\u308b\nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)","bb2a2e8c":"from sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(all_data[c].values)) \n    all_data[c] = lbl.transform(list(all_data[c].values))\n\nprint('Shape all_data: {}'.format(all_data.shape))","20bf1458":"all_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']","40fef8e1":"numeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\u6570\u5024\u578b\u5909\u6570\u306e\u6b6a\u5ea6: \")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","c5308df8":"skewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    #all_data[feat] += 1\n    all_data[feat] = boxcox1p(all_data[feat], lam)\n    \n#all_data[skewed_features] = np.log1p(all_data[skewed_features])","af6751cf":"all_data = pd.get_dummies(all_data)\nprint(all_data.shape)","267a940c":"train = all_data[:ntrain]\ntest = all_data[ntrain:]","1c81887b":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","39e1c6f7":"n_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","eface290":"# LASSO Regression\uff08LASSO\u56de\u5e30\uff09\uff1a\n# \u3053\u306e\u30e2\u30c7\u30eb\u306f\u5916\u308c\u5024\u306b\u975e\u5e38\u306b\u654f\u611f\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3001\u3088\u308a\u5805\u7262\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n# \u305d\u306e\u305f\u3081\u306b\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3067sklearn\u306eRobustscaler\uff08\uff09\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3002\nlasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))","c38344ce":"# Elastic Net Regression\uff08Elastic Net \u56de\u5e30\uff09 :\n# \u5916\u308c\u5024\u306b\u5bfe\u3057\u3066\u5805\u7262\u306b\u3059\u308b\nENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))","d58d921d":"# Kernel Ridge Regression\uff08\u30ab\u30fc\u30cd\u30eb\u30ea\u30c3\u30b8\u56de\u5e30\uff09 :\nKRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)","8a851879":"# Gradient Boosting Regression\uff08\u52fe\u914d\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\u56de\u5e30\uff09 :\n# \u5916\u308c\u5024\u306b\u5bfe\u3057\u3066\u3001\u5805\u7262\u306b\u3059\u308b\u30cf\u30d6\u640d\u5931\nGBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)","9ea0a608":"# XGBoost :\nmodel_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)","f877c9c6":"# LightGBM :\nmodel_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)","0a6a161f":"score = rmsle_cv(lasso)\nprint(\"Lasso score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","ea8a19ed":"score = rmsle_cv(ENet)\nprint(\"ElasticNet score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","9cbcab19":"score = rmsle_cv(KRR)\nprint(\"Kernel Ridge score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","9408de56":"score = rmsle_cv(GBoost)\nprint(\"Gradient Boosting score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","70494123":"score = rmsle_cv(model_xgb)\nprint(\"Xgboost score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","f0608b4a":"score = rmsle_cv(model_lgb)\nprint(\"LGBM score: {:.4f} ({:.4f})\" .format(score.mean(), score.std()))","71d827b8":"class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, models):\n        self.models = models\n        \n    def fit(self, X, y):\n        self.models_ = [clone(x) for x in self.models]\n        \n        # Train cloned base models\n        for model in self.models_:\n            model.fit(X, y)\n\n        return self\n    \n    def predict(self, X):\n        predictions = np.column_stack([\n            model.predict(X) for model in self.models_\n        ])\n        return np.mean(predictions, axis=1) ","e022d649":"averaged_models = AveragingModels(models = (ENet, GBoost, KRR, lasso))\n\nscore = rmsle_cv(averaged_models)\nprint(\" Averaged base models score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","db233a23":"class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models, meta_model, n_folds=5):\n        self.base_models = base_models\n        self.meta_model = meta_model\n        self.n_folds = n_folds\n   \n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        self.meta_model_ = clone(self.meta_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n        \n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                instance = clone(model)\n                self.base_models_[i].append(instance)\n                instance.fit(X[train_index], y[train_index])\n                y_pred = instance.predict(X[holdout_index])\n                out_of_fold_predictions[holdout_index, i] = y_pred\n                \n        self.meta_model_.fit(out_of_fold_predictions, y)\n        return self\n   \n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_ ])\n        return self.meta_model_.predict(meta_features)","b1991563":"stacked_averaged_models = StackingAveragedModels(base_models = (ENet, GBoost, KRR),\n                                                 meta_model = lasso)\n\nscore = rmsle_cv(stacked_averaged_models)\nprint(\"Stacking Averaged models score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","29b62216":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","fa3684dc":"stacked_averaged_models.fit(train.values, y_train)\nstacked_train_pred = stacked_averaged_models.predict(train.values)\nstacked_pred = np.expm1(stacked_averaged_models.predict(test.values))\nprint(rmsle(y_train, stacked_train_pred))","0182284f":"model_xgb.fit(train, y_train)\nxgb_train_pred = model_xgb.predict(train)\nxgb_pred = np.expm1(model_xgb.predict(test))\nprint(rmsle(y_train, xgb_train_pred))","b99ec213":"model_lgb.fit(train, y_train)\nlgb_train_pred = model_lgb.predict(train)\nlgb_pred = np.expm1(model_lgb.predict(test.values))\nprint(rmsle(y_train, lgb_train_pred))","454d6f21":"'''RMSE on the entire Train data when averaging'''\n\nprint('RMSLE score on train data:')\nprint(rmsle(y_train,stacked_train_pred*0.70 +\n               xgb_train_pred*0.15 + lgb_train_pred*0.15 ))","24d1665a":"ensemble = stacked_pred*0.70 + xgb_pred*0.15 + lgb_pred*0.15","aef921b1":"sub = pd.DataFrame()\nsub['Id'] = test_ID\nsub['SalePrice'] = ensemble\nsub.to_csv('submission.csv',index=False)","941b7241":"Electrical : \u96fb\u6c17\u7cfb\u7d71\u3002\u6b20\u640d\u3057\u3066\u3044\u308b\u6570\u306f\u5c11\u306a\u3044\u306e\u3067\u3001\u6700\u983b\u5024\u3067\u57cb\u3081\u308b\u3002","06f3909c":"MasVnrArea and MasVnrType : \u77f3\u7a4d\u307f\u30d9\u30cb\u30a2\u3002NA\u306b\u306f\u3001None\u30680\u3067\u88dc\u5b8c\u3059\u308b\u3002","4f09b669":"XGBoost :","46b31139":"# \u306f\u3058\u3081\u306b\n\u3053\u306eNotebook\u306f\u3001[Stacked Regressions : Top 4% on LeaderBoard](https:\/\/www.kaggle.com\/serigne\/stacked-regressions-top-4-on-leaderboard)\u3092\u53c2\u8003\u306b\u4f5c\u6210\u3057\u305f\u65e5\u672c\u8a9e\u306eNotebook\u3067\u3059\u3002\n\u3068\u3053\u308d\u3069\u3053\u308d\u65e5\u672c\u8a9e\u5316\u3092\u306f\u3057\u3087\u3063\u3066\u307e\u3059\u304c\u3001\u6700\u7d42\u7684\u306a\u30b9\u30b3\u30a2\u306f\u2191\u306e\u53c2\u8003Notebook\u3068\u540c\u3058\u306b\u306a\u3063\u3066\u307e\u3059\u3002\n\nKaggle\u65e5\u672c\u8a9e\u306e\u8cc7\u6599\u304c\u5c11\u306a\u3044\u306e\u3067\u52c9\u5f37\u304c\u3066\u3089\u4f5c\u3063\u3066\u307f\u305fNotebook\u306b\u306a\u308a\u307e\u3059\u3002\u53c2\u8003\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\u3002","338a0522":"\u6b20\u640d\u5024\u304c\u6b8b\u3063\u3066\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b","ee9eba56":"## 2\uff0e4\uff0e\u6b20\u640d\u5024\u3092\u88dc\u5b8c\u3059\u308b","026c7f4d":"## 2\uff0e7\uff0e\u6b6a\u5ea6\u3092\u8abf\u6574\u3059\u308b","30acbc2d":"LightGBM :","3ab4b7d0":"StackedRegressor:","330c484e":"FireplaceQu : \u6696\u7089\u306e\u54c1\u8cea\u3002NA\u306f\u300c\u6696\u7089\u306a\u3057\u300d\u3068\u3044\u3046\u3053\u3068\u3002","29193fb5":"\u6b6a\u5ea6\u306e\u9ad8\u3044\u5909\u6570\u3092\u3001BoxCox\u5909\u63db\u3059\u308b\u3002\n\nBox-cox\u5909\u63db\uff1a\u30c7\u30fc\u30bf\u306e\u69cb\u9020\u3092\u7121\u7406\u3084\u308a\u6b63\u898f\u5206\u5e03\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u3089\u3057\u3044\u3002","0718a1ef":"## 3\uff0e2\uff0e\u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u306e\u4f5c\u6210","74877ebe":"Gradient Boosting Regression\uff08\u52fe\u914d\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\u56de\u5e30\uff09 :\n\u5916\u308c\u5024\u306b\u5bfe\u3057\u3066\u3001\u5805\u7262\u306b\u3059\u308b\u30cf\u30d6\u640d\u5931","ed433769":"\u8ca9\u58f2\u4fa1\u683c\u306e\u4e88\u6e2c\u306b\u306f\u3001\u9762\u7a4d\u95a2\u9023\u306e\u7279\u5fb4\u304c\u975e\u5e38\u306b\u91cd\u8981\u306a\u305f\u3081\u3001\u5730\u4e0b\u306e\u7dcf\u9762\u7a4d\u3001\u5404\u5bb6\u306e1\u968e\u30682\u968e\u306e\u9762\u7a4d\u3067\u3042\u308b\u7279\u5fb4\u3092\u3082\u30461\u3064\u8ffd\u52a0\u3059\u308b","2b614a29":"* \u76ee\u7684\u5909\u6570\u306f\u3001\u53f3\u5074\u306b\u6b6a\u3093\u3067\u3044\u308b\u3002\n* \u76ee\u7684\u5909\u6570\u306f\u3001\u6b63\u898f\u5206\u5e03\u3057\u3066\u3044\u306a\u3044\u3068\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u7cbe\u5ea6\u306b\u5f71\u97ff\u304c\u3067\u308b\u305f\u3081\u3001\u6b63\u898f\u5206\u5e03\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002","5fd0c7bb":"## 3\uff0e1\uff0e\u6e96\u5099","9879f2b0":"LASSO Regression\uff08LASSO\u56de\u5e30\uff09\uff1a\n\u3053\u306e\u30e2\u30c7\u30eb\u306f\u5916\u308c\u5024\u306b\u975e\u5e38\u306b\u654f\u611f\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3001\u3088\u308a\u5805\u7262\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u306b\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3067sklearn\u306eRobustscaler\uff08\uff09\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3002","6f1f3ff5":"## 3\uff0e6\uff0e\u30a2\u30f3\u30b5\u30f3\u30d6\u30ea\u30f3\u30b0\n\u524d\u3067\u5b9a\u7fa9\u3057\u305fStackedRegressor\u306bXGBoost\u3068LightGBM\u3092\u8ffd\u52a0\u3059\u308b\u3002","2a8d755d":"## 3\uff0e5\uff0e\u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\uff08\u30e1\u30bf\u30e2\u30c7\u30eb\u3092\u8ffd\u52a0\uff09\n\u30e1\u30bf\u30e2\u30c7\u30eb\u3092\u8ffd\u52a0\u3057\u305f\u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\u3002","af7c9cf3":"## 3\uff0e3\uff0e\u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u306e\u30b9\u30b3\u30a2\n\u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u306e\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b","6ae762c3":"Ensemble prediction:","11baaacd":"GarageYrBlt, GarageArea and GarageCars : \u30ac\u30ec\u30fc\u30b8\uff08\u6570\u5024\u60c5\u5831\uff09\u3002NA\u306f\u300c\u30ac\u30ec\u30fc\u30b8\u306a\u3057\u300d\u306a\u306e\u3067\u3001\u6b20\u640d\u5024\u306b\u306f0\u3092\u57cb\u3081\u308b\u3068\u3059\u308b\u3002","cd14c245":"# 3\uff0e\u30e2\u30c7\u30ea\u30f3\u30b0","2cdccffe":"## 1\uff0e2\uff0e\u76ee\u7684\u5909\u6570\uff08SalePrice\uff09\u3092\u5206\u6790\u3059\u308b","99f54a3e":"XGBoost:","6162460d":"\u6b20\u640d\u5024\u306f0\u306b\u306a\u3063\u305f\u3002","d0dac348":"Functional : \u4f4f\u5b85\u306e\u6a5f\u80fd\u300293%\u304c\u300cTyp\u300d\u306a\u306e\u3067\u3001\u6b20\u640d\u5024\u3082\u300cTyp\u300d\u3067\u88dc\u5b8c\u3059\u308b","b25ea73a":"## 2\uff0e2\uff0e\u6b20\u640d\u5024\u3092\u78ba\u8a8d\u3059\u308b","13e497a4":"# 5\uff0e\u63d0\u51fa","abe26b6a":"SaleType : \u8ca9\u58f2\u30bf\u30a4\u30d7\u3002\u6b20\u640d\u3057\u3066\u3044\u308b\u6570\u306f\u5c11\u306a\u3044\u306e\u3067\u3001\u6700\u983b\u5024\u3067\u57cb\u3081\u308b\u3002","a53e7b4a":"# 0\uff0e\u6e96\u5099\uff08\u30e9\u30a4\u30d6\u30e9\u30ea\u8aad\u307f\u8fbc\u307f\u3001\u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\uff09","3d03b6d3":"GrLivArea\uff08\u5730\u4e0a\u306e\u4f4f\u5c45\u9762\u7a4d\uff09\u304c\u5927\u304d\u3044\u306e\u306b\u3001SalePrice\uff08\u8ca9\u58f2\u4fa1\u683c\uff09\u304c\u7570\u5e38\u306b\u5b89\u3044\u30c7\u30fc\u30bf\u304c2\u70b9\u3042\u308b\u3002\u3053\u306e2\u70b9\u306f\u7570\u5e38\u5024\u3068\u307f\u306a\u3057\u3066\u9664\u53bb\u3059\u308b\u3068\u3059\u308b\u3002","1daff6bf":"## 3\uff0e4\uff0e\u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\uff08\u5e73\u5747\u5316\uff09\n\u30b7\u30f3\u30d7\u30eb\u306a\u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\u3002\uff08\u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u3092\u5e73\u5747\u5316\u3059\u308b\uff09","3b926de0":"MSZoning : \u8ca9\u58f2\u306e\u4e00\u822c\u7684\u306a\u7a2e\u985e\u3002\u6b20\u640d\u5024\u306b\u306f\u3001\u6700\u983b\u5024\u3092\u57cb\u3081\u308b\u3002","b7070cc3":"Exterior1st and Exterior2nd : \u5916\u88c5\u3002\u6b20\u640d\u3057\u3066\u3044\u308b\u6570\u306f\u5c11\u306a\u3044\u306e\u3067\u3001\u6700\u983b\u5024\u3067\u57cb\u3081\u308b\u3002","66f08fc1":"BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1 and BsmtFinType2 : \u5730\u4e0b\u3002NA\u306f\u300c\u5730\u4e0b\u306a\u3057\u300d\u3068\u3044\u3046\u3053\u3068\u3002","f637a7c7":"\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u3080\u3002","3cb6f600":"LotFrontage : \u4f4f\u5c45\u304b\u3089\u901a\u308a\u3078\u306e\u8ddd\u96e2\u3002\u8fd1\u96a3\u3068\u4f3c\u305f\u3088\u3046\u306a\u8ddd\u96e2\u306e\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u305f\u3081\u3001\u8fd1\u96a3\u306eLogFrontage\u306e\u4e2d\u592e\u5024\u3067\u6b20\u640d\u5024\u3092\u57cb\u3081\u308b\u3002","bccce588":"## 2\uff0e3\uff0e\u76f8\u95a2\u4fc2\u6570\u3092\u78ba\u8a8d\u3059\u308b","88dcf248":"# 2\uff0e\u7279\u5fb4\u91cf\u306e\u4f5c\u6210\n## 2\uff0e1\uff0e\u9023\u7d50\u30c7\u30fc\u30bf\uff08all_data\uff09\u306e\u4f5c\u6210","2435da91":"Utilities : \u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\uff08\u96fb\u6c17\u3001\u30ac\u30b9\u3001\u6c34\u9053\uff09\u306e\u30bf\u30a4\u30d7\u3002\u6570\u500b\u306e\u300cNoSeWa\u300d\u3068NA\u4ee5\u5916\u306f\u3059\u3079\u3066\u300cAllPub\u300d\u306a\u306e\u3067\u4e88\u6e2c\u306b\u5f79\u7acb\u305f\u306a\u3044\u3068\u5224\u65ad\u3057\u3001\u9664\u53bb\u3059\u308b\u3002","477e5345":"ENet, GBoost, KRR , Lasso\u306e4\u3064\u306e\u30e2\u30c7\u30eb\u3092\u5e73\u5747\u5316\u3057\u3066\u30b9\u30b3\u30a2\u3092\u3060\u3057\u3066\u307f\u307e\u3059\u3002","56afe51c":"Sklearn\u306ecross_val_score\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3002\u305f\u3060\u3057\u3001\u3053\u306e\u95a2\u6570\u306b\u306f\u30b7\u30e3\u30c3\u30d5\u30eb\u5c5e\u6027\u304c\u306a\u3044\u305f\u3081\u3001\u4ea4\u5dee\u691c\u8a3c\u306e\u524d\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30b7\u30e3\u30c3\u30d5\u30eb\u3059\u308b\u305f\u3081\u306b\u3001\u30b3\u30fc\u30c9\u30921\u884c\u8ffd\u52a0\u3059\u308b\u3002","a37e138c":"Alley : \u4f4f\u5b85\u304b\u3089\u8def\u5730\u3078\u306e\u30a2\u30af\u30bb\u30b9\u30bf\u30a4\u30d7\u3002NA\u306f\u300c\u8def\u5730\u30a2\u30af\u30bb\u30b9\u306a\u3057\u300d\u3068\u3044\u3046\u3053\u3068\u3002","2146e877":"# 4\uff0e\u6700\u7d42\u7684\u306a\u5b66\u7fd2\u3068\u4e88\u6e2c","63c9bf65":"## 2\uff0e6\uff0e\u7279\u5fb4\u3092\u8ffd\u52a0\u3059\u308b","cbb88db2":"Fence : \u30d5\u30a7\u30f3\u30b9\u306e\u54c1\u8cea\u3002NA\u306f\u300c\u30d5\u30a7\u30f3\u30b9\u306a\u3057\u300d\u3068\u3044\u3046\u3053\u3068\u3002","0493d2db":"KitchenQual: \u30ad\u30c3\u30c1\u30f3\u306e\u54c1\u8cea\u3002\u6b20\u640d\u3057\u3066\u3044\u308b\u6570\u306f\u5c11\u306a\u3044\u306e\u3067\u3001\u6700\u983b\u5024\u3067\u57cb\u3081\u308b\u3002","2b31e1e9":"Kernel Ridge Regression\uff08\u30ab\u30fc\u30cd\u30eb\u30ea\u30c3\u30b8\u56de\u5e30\uff09 :","1df33988":"## 2\uff0e5\uff0e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u9069\u5207\u306a\u5f62\u306b\u5909\u63db\u3059\u308b","66202007":"GarageType, GarageFinish, GarageQual and GarageCond : \u30ac\u30ec\u30fc\u30b8\u3002NA\u306f\u300c\u30ac\u30ec\u30fc\u30b8\u306a\u3057\u300d\u3068\u3044\u3046\u3053\u3068\u3002","b39c0a45":"BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath and BsmtHalfBath : \u5730\u4e0b\u3002NA\u306f\u300c\u5730\u4e0b\u306a\u3057\u300d\u3068\u3044\u3046\u3053\u3068\u3002","b7415769":"MiscFeature : \u4ed6\u306e\u30ab\u30c6\u30b4\u30ea\u3067\u30ab\u30d0\u30fc\u3055\u308c\u3066\u3044\u306a\u3044\u305d\u306e\u4ed6\u306e\u6a5f\u80fd\u3002NA\u306f\u305d\u306e\u4ed6\u306e\u6a5f\u80fd\u304c\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3002","d875cfbe":"Elastic Net Regression\uff08Elastic Net \u56de\u5e30\uff09 :\n\u5916\u308c\u5024\u306b\u5bfe\u3057\u3066\u5805\u7262\u306b\u3059\u308b","da5bf934":"* **PoolQC** : \u30d7\u30fc\u30eb\u306e\u54c1\u8cea\u3002NA\u306f\u300c\u30d7\u30fc\u30eb\u306a\u3057\u300d\u3068\u3044\u3046\u3053\u3068\u3002","960e0273":"# 1\uff0e\u30c7\u30fc\u30bf\u51e6\u7406\n## 1\uff0e1\uff0e\u5916\u308c\u5024\u3092\u9664\u53bb","36c357f6":"## 2\uff0e8\uff0e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092get dymmy\u3059\u308b","0ca2c555":"\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b","8ccf6551":"\u30ab\u30c6\u30b4\u30ea\u30fc\u7684\u306a\u6570\u5024\u5909\u6570\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b","77d65bec":"LightGBM:","a5e00f49":"\u65b0\u3057\u3044\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b","2f703ee8":"Enet KRR\u3068Gboost\u3092\u5e73\u5747\u5316\u3057\u3001\u6b21\u306bLasso\u3092\u30e1\u30bf\u30e2\u30c7\u30eb\u3068\u3057\u3066\u8ffd\u52a0\u3057\u3066\u30b9\u30b3\u30a2\u3092\u51fa\u3057\u3066\u307f\u307e\u3059\u3002"}}