{"cell_type":{"6abe54be":"code","6ae292d0":"code","c19f52cd":"code","b8e23306":"code","cccfd2e8":"code","f388e877":"code","858cb650":"code","63652b0e":"code","6461e848":"code","75bed862":"code","5042de98":"code","1fb421a4":"code","d3bb794f":"code","3d085fde":"code","c1030140":"code","ca6eb362":"code","5cfe617e":"code","8d368d50":"code","99b050b5":"code","78284aaf":"markdown","8f637baf":"markdown","fb3daaea":"markdown","df97f42e":"markdown","b86aab16":"markdown","bd3a0055":"markdown","8e009ebf":"markdown","b4309ec2":"markdown","fba9209e":"markdown","fe031887":"markdown","ac53c54f":"markdown","ffce3c11":"markdown","14960cf6":"markdown","3d1af1ca":"markdown","980d4413":"markdown","8b8f4619":"markdown"},"source":{"6abe54be":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.lines as lines\n\nfrom skimage import io\nfrom scipy.stats import skew, kurtosis\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\nsns.set_style('white')\nplt.rcParams['font.family'] = 'monospace'","6ae292d0":"file_path = '..\/input\/water-potability\/water_potability.csv'\ndf = pd.read_csv(file_path)","c19f52cd":"blues = ['#193f6e','#3b6ba5','#72a5d3','#b1d3e3','#e1ebec']\ndarks = ['#4e5560','#866a67','#9a9385','#c5bfa7','#e6dbc8']\ncmap_blues = sns.color_palette(blues)\ncmap_darks = sns.color_palette(darks)\nsns.set_palette(cmap_blues)","b8e23306":"sns.palplot(cmap_blues)\nsns.palplot(cmap_darks)","cccfd2e8":"print(f\"Shape: {df.shape}\")\nprint(':'*20)\ndf.head(5)","f388e877":"df.info()","858cb650":"# get percentage of missing values per column\nmissing_values = df.isna().sum() \/ len(df) * 100\nmissing_values = missing_values.sort_values(ascending=False)\nmissing_values = missing_values[missing_values > 0]\nmissing_values = pd.DataFrame({'Feature':missing_values.index, 'Ratio':missing_values.values})\n\nfig, ax = plt.subplots(1, 2, figsize=(12,6))\n\nfig.text(0.05,1,'Missing Values', fontsize=16, fontweight='bold')\nfig.text(0.05,0.95,'We can tell that missing values occur among three different columns.', fontsize=12, fontweight='light')\nfig.subplots_adjust(wspace=0.5, hspace=0.5)\n\nax0 = sns.barplot(\n    data=missing_values,\n    y='Feature',\n    x='Ratio',\n    orient='h',\n    ax=ax[0]\n)\n\nax1 = sns.heatmap(\n    data=df.isna(),\n    cmap=cmap_darks,\n    cbar=False,\n    ax=ax[1]\n)\n\nax0.set_xlabel('')\nax0.set_xticks([])\nax1.set_yticks([])\n\n# annotations\nfor idx in range(0,len(missing_values.index)):\n    ax0.annotate(\n        f\"{np.round(missing_values['Ratio'][idx],2)} %\",\n        xy=(missing_values['Ratio'][idx]-2.5,idx),\n        va='center', ha='center', color='#fff'\n    )\n\n# despine\nfor a in ax:\n    a.set_ylabel('')\n    for spine in ['top','left','right','bottom']:\n        a.spines[spine].set_visible(False) \n\n# seperation line       \nl1 = lines.Line2D([0.5, 0.5], [0, 0.9], transform=fig.transFigure, figure=fig,color='#ccc',lw=1)\nfig.lines.extend([l1])\n\nplt.show()","63652b0e":"plt.figure(figsize=(12,6))\nplt.title('Potability Count', size=16, y=1, x=0.12, fontweight='bold')\nplt.grid(color='gray', axis='x', linestyle=':', linewidth=1, alpha=0.5, zorder=0, dashes=(2,10))\n\nax = sns.countplot(\n    data=df, y='Potability', orient='h',\n    edgecolor='white', linewidth=1, alpha=0.95\n)\n\nax.imshow(\n    io.imread('https:\/\/media.istockphoto.com\/photos\/water-splash-picture-id182812025?k=6&m=182812025&s=170667a&w=0&h=QVsOSW86k5WIVaMrQikXvSCkMKMAVg9FKYkHRprrtVs='),\n    aspect=ax.get_aspect(),\n    extent=ax.get_xlim() + ax.get_ylim(),\n    alpha=0.35,\n    zorder=0\n)\n\nplt.xlabel('')\nplt.ylabel('')\nplt.yticks([])\n\nv_counts = df['Potability'].value_counts()\npot_0, pot_1 = v_counts[0], v_counts[1]\nplt.figtext(0.7,0.7,f\"# Not-Drinkable: {pot_0}\",backgroundcolor='#e1ebec')\nplt.figtext(0.45,0.3,f\"# Drinkable: {pot_1}\",backgroundcolor='#e1ebec')\n\nsns.despine(left=True)","6461e848":"# calculate ratio of potability classes\ntotal_counts = pot_0 + pot_1\nr0 = pot_0 \/ total_counts\nr1 = pot_1 \/ total_counts\nr_df = pd.DataFrame({'Ratio_0':[r0],'Ratio_1':[r1]})\n\nfig, ax = plt.subplots(1,1, figsize=(12, 4))\n\nax.barh(r_df.index, r_df['Ratio_0'], color=blues[0], alpha=0.9)\nax.barh(r_df.index, r_df['Ratio_1'], color=blues[1], alpha=0.9, left=r_df['Ratio_0'])\n\nax.set_xlim(0,1)\nax.set_xticks([])\nax.set_yticks([])\n\nx_0 = r_df['Ratio_0'][0]\nx_1 = r_df['Ratio_1'][0]\n\n# Class 0 Annotation\nax.annotate(\n    f\"{np.round(x_0*100,2)}%\",\n    xy=(x_0\/2, 0),\n    va='center', ha='center', fontsize=40, fontweight='light',color='#fff'\n)\n\nax.annotate(\n    'Not-Drinkable',\n    xy=(x_0\/2, -0.15),\n    va='center', ha='center', fontsize=15, fontweight='light',color='#eee'\n)\n\n# Class 1 Annotation\nax.annotate(\n    f\"{np.round(x_1*100,2)}%\",\n    xy=(x_0 + x_1\/2, 0),\n    va='center', ha='center', fontsize=40, fontweight='light',color='#fff'\n)\n\nax.annotate(\n    'Drinkable',\n    xy=(x_0 + x_1\/2, -0.15),\n    va='center', ha='center', fontsize=15, fontweight='light',color='#eee'\n)\n\n# Title & Subtitle\nfig.text(0.125,1.03,'Potability Distribution',fontsize=16, fontweight='bold')\nfig.text(0.125,0.92,'Our dataset is not equally distributed in terms of potability.',fontsize=12)  \n\nfor spine in ['top','left','right','bottom']:\n    ax.spines[spine].set_visible(False)\n\nplt.show()","75bed862":"# get all features, split df into potability classes\nfeature_cols = [*df.columns.drop(labels='Potability')]\ndf_pot_0 = df[df['Potability'] == 0].copy()\ndf_pot_1 = df[df['Potability'] == 1].copy()","5042de98":"fig = plt.figure(figsize=(15,9))\n\nfor idx, feature in enumerate(feature_cols):\n    plt.subplot(3,3,idx+1)\n    plt.title(f\"Distribution of {feature}\", size=11, y=1.05)\n    plt.grid(color='gray', axis='x', linestyle=':', linewidth=1, alpha=0.5, zorder=0, dashes=(2,10))\n\n    sns.kdeplot(\n        data=df_pot_0, x=feature, shade=True, color=blues[0], \n        edgecolor='black', linewidth=1, alpha=0.8, label='CLASS 0'\n    )\n\n    sns.kdeplot(\n        data=df_pot_1, x=feature, shade=True, color=blues[3], \n        edgecolor='black', linewidth=1, alpha=0.8, label='CLASS 1'\n    )\n\n    plt.xlabel('')\n    plt.ylabel('')\n    plt.yticks([])\n\n    plt.legend(facecolor=blues[4], fontsize=7)\n    sns.despine(left=True)\n\n# seperation lines    \nl1 = lines.Line2D([0.07, 0.07], [0.97, 1.12], transform=fig.transFigure, figure=fig,color='#ccc',lw=1)\n# l2 = lines.Line2D([0.07, 0.4], [1.12, 1.12], transform=fig.transFigure, figure=fig,color='#ccc',lw=1)\nfig.lines.extend([l1])\n\nfig.subplots_adjust(wspace=0.25,hspace=0.5)\nfig.text(0.05,1.15,'Feature Distribution', fontsize=16, fontweight='bold')\nfig.text(0.08,0.97,'''\nBy looking at the different feature distributions we can tell that most of \nthe features are normally distributed. However the distribution of solids looks \nskewed with outliers to the right. By comparing both classes of potability \nwe can tell if a certain feature is a determining factor for the upcoming \nclassification task. The most important features seem to be: \npH-Value, Hardness and Sulfate.\n''', fontsize=12, fontweight='light')\n\nplt.show()","1fb421a4":"# compare means\nprint('Mean Comparison by Potability')\nmean_group = df.groupby('Potability').mean()\nmean_group","d3bb794f":"# create correlation map\ncorr_map = df.drop(columns='Potability').corr()\n\n# create mask\nmask = np.triu(np.ones_like(corr_map,dtype=bool))\n\n# create correlation heatmap\nfig = plt.figure(figsize=(15,9))\n\nax = sns.heatmap(\n    data=corr_map, square=True, center=0, linewidth=1,\n#     cmap=sns.diverging_palette(240, 10, s=60, l=40, n=9, center=\"light\", as_cmap=True),\n    cmap=cmap_blues,\n    cbar=False,\n    mask=mask,\n    annot=True,\n    fmt='.2f',\n    cbar_kws={'shrink': 0.82}\n)\n\nax.annotate(\n    'A small sign of correlation,\\nif any...',\n    fontsize=10,fontweight='light',\n    xy=(2.3, 4.1), xycoords='data',\n    xytext=(0.6, 0.95), textcoords='axes fraction',\n    arrowprops=dict(\n        facecolor=darks[0], shrink=0.025, \n        connectionstyle='arc3, rad=0.3'),\n    horizontalalignment='left', verticalalignment='top'\n)\n\n# seperation lines    \nl1 = lines.Line2D([0.65, 0.65], [0.4, 0.7], transform=fig.transFigure, figure=fig,color='#ccc',lw=1)\nfig.lines.extend([l1])\n\n# Title & Annotation\nfig.text(0.2,0.93,'Feature Correlation',fontsize=16, fontweight='bold')\nfig.text(0.66,0.69,'Insights:', fontsize=12, fontweight='bold')\nfig.text(0.64,0.52,'''\n    Nearly all of the features are uncorrelated \n    which means there is little to no sign of multicolinearity.\n    A small sign of correlation is evident when taking a look \n    at the sulfate-level and the dissolved minerals, which makes sense.\n    The less (solids) minerals are dissolved the lower the sulfate-levels\n    should be since sulfate is a mineral itself.\n''', fontsize=12, fontweight='light')\n\nplt.show()","3d085fde":"from sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer","c1030140":"# prepare dataset for split\nX = df.drop(columns='Potability').copy()\ny = df['Potability'].copy()\n\n# create train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1, stratify=y)\n\n# preprocess data\npipe = Pipeline([\n    ('impute',SimpleImputer()),\n    ('scale',StandardScaler())\n])\n\nX_train = pd.DataFrame(data=pipe.fit_transform(X_train), columns=X_train.columns)\nX_test = pd.DataFrame(data=pipe.transform(X_test), columns=X_test.columns)\n\n# check results exemplary on ph\nprint(f\"Train Shape: {X_train.shape} Train ph Mean: {np.round(np.mean(X_train['ph']),0)} Train ph Std: {np.std(X_train['ph'])}\")\nprint(f\"Test Shape: {X_test.shape} Test ph Mean: {np.round(np.mean(X_test['ph']),0)} Test ph Std: {np.std(X_test['ph'])}\")","ca6eb362":"from sklearn.metrics import precision_score\nfrom sklearn.linear_model import LogisticRegression, RidgeClassifier, SGDClassifier, Perceptron, PassiveAggressiveClassifier\nfrom sklearn.svm import SVC, NuSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB, BernoulliNB\nfrom sklearn.neighbors import NearestCentroid\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom xgboost import XGBClassifier","5cfe617e":"# test different base models\nmodels = [\n    ('LogReg', LogisticRegression(max_iter=1000)),\n    ('Ridge', RidgeClassifier()),\n    ('SGD', SGDClassifier(max_iter=1000, tol=1e-3)),\n    ('SVC', SVC()),\n    ('NuSVC', NuSVC()),\n    ('DTree', DecisionTreeClassifier()),\n    ('GNB', GaussianNB()),\n    ('BNB', BernoulliNB()),\n    ('Perc', Perceptron()),\n    ('NC', NearestCentroid()),\n    ('RFC', RandomForestClassifier()),\n    ('Ada', AdaBoostClassifier()),\n    ('XGB', XGBClassifier(verbosity = 0)),\n    ('PAC', PassiveAggressiveClassifier())\n]\n\nresults = dict()\n\nfor name, model in models:\n    model.fit(X_train, y_train)\n    y_hat = model.predict(X_test)\n    score = precision_score(y_test, y_hat, average='macro')\n    results[name] = score","8d368d50":"# create dataframe from results\ndf_results = pd.DataFrame([results])\ndf_results = df_results.transpose()\ndf_results = df_results.rename(columns={0:'Precision'}).sort_values(by='Precision',ascending=False)","99b050b5":"fig = plt.figure(figsize=(15,9))\n\nax = sns.barplot(data=df_results, y=df_results.index, x='Precision', orient='h', palette='Blues', saturation=0.4, edgecolor=darks[0], linewidth=0.5)\n\nax.set_xlabel('')\nax.set_xticks([])\n\n# Bar Annotation\nfor idx in range(0,len(df_results.index)):\n    color='black' \n    if idx > (len(df_results.index)-4): color='white'\n        \n    ax.annotate(\n        f\"{np.round(df_results['Precision'][idx]*100,2)} %\",\n        xy=(df_results['Precision'][idx]-0.035, idx),\n        va='center', ha='center', fontsize=12, color=color\n    )\n\n# Title & Annotation\nfig.text(0.1,0.93,'Model Evaluation: Precision Score',fontsize=16, fontweight='bold')\nfig.text(0.82,0.69,'Insights:', fontsize=12, fontweight='bold')\nfig.text(0.8,0.56,'''\n    Support Vector or Decision Tree based algorithms \n    perform best, whereas the linear models perform worst.\n    This should make sense, since in our EDA we couldn't\n    find any linear relation at all.\n''', fontsize=12, fontweight='light')\n\n# seperation lines    \nl1 = lines.Line2D([0.8, 0.8], [0.5, 0.7], transform=fig.transFigure, figure=fig,color='#ccc',lw=1)\nfig.lines.extend([l1])\n\n# Despine\nfor spine in ['top','left','right','bottom']:\n    ax.spines[spine].set_visible(False)","78284aaf":"**Feel free to take a look at my other work:**\n* [Netflix - Awesome EDA & Score Prediction](https:\/\/www.kaggle.com\/mlanhenke\/netflix-awesome-eda-score-prediction-wip)\n* [Student-Test-Scores - EDA & Score Prediction](https:\/\/www.kaggle.com\/mlanhenke\/test-scores-epic-eda-prediction-cb-xgb-lgbm)","8f637baf":"<div style='background:#72a5d3;padding-left:2em;text-align:left;font-family:monospace;font-weight:bold;font-size:1.65em;color:#fff'>\n    Conclusion\n<\/div>","fb3daaea":"<div style='background:#72a5d3;padding-left:2em;text-align:left;font-family:monospace;font-weight:bold;font-size:1.65em;color:#fff'>\n    Target: Potability\n<\/div>","df97f42e":"<div style='background:#72a5d3;padding-left:2em;text-align:left;font-family:monospace;font-weight:bold;font-size:1.65em;color:#fff'>\n    Dataset Description\n<\/div>","b86aab16":"<div style='color:#212129;font-family:calibri light;text-align:justify;font-size:1.2em;font-weight:500;padding-left:2em;padding-right:4em'>\nWhile working with this dataset, I tried to put special <b>emphasis<\/b> on the <b>exploratory data analysis<\/b>.\nMy main goal here was to sharpen my plotting skills and put a little bit more effort into the visuals.\n\nAs far as <b>analysis<\/b> goes, the dataset seems to be synthetically generated, since the feature distribution \nin comparision to the classification doesn't look quite right. However for the purpose of practicing, \nthis dataset is super easy and fun to handle.\n    \nThings I'd have to do to <b>improve the model<\/b> would be hyperparameter tuning (optuna study) and combining the baseline models into an ensemble learner (VotingClassifer e.g.).\n<\/div>","bd3a0055":"<div style='border-radius:3px;background:#b1d3e3;padding:2em;text-align:left;font-family:monospace;font-weight:light;font-size:1.1em;color:black'>\n    <b>Thanks for checking out my notebook!<\/b><br>\n    Feel free to leave a comment, a suggestion, an upvote or just a simple message to say hello :)\n<\/div>","8e009ebf":"<div style='background:#72a5d3;padding-left:2em;text-align:left;font-family:monospace;font-weight:bold;font-size:1.65em;color:#fff'>\n    Color Palettes\n<\/div>","b4309ec2":"<div style='background:#72a5d3;padding-left:2em;text-align:left;font-family:monospace;font-weight:bold;font-size:1.65em;color:#fff'>\n    Introduction\n<\/div>","fba9209e":"<div style='background:#72a5d3;padding-left:2em;text-align:left;font-family:monospace;font-weight:bold;font-size:1.65em;color:#fff'>\n    Data Preprocessing\n<\/div>","fe031887":"<div style='background:#72a5d3;padding-left:2em;text-align:left;font-family:monospace;font-weight:bold;font-size:1.65em;color:#fff'>\n    Modeling\n<\/div>","ac53c54f":"<div style='background:#72a5d3;padding-left:2em;text-align:left;font-family:monospace;font-weight:bold;font-size:1.65em;color:#fff'>\n    Missing Values\n<\/div>","ffce3c11":"<div style='background:#72a5d3;padding-left:2em;text-align:left;font-family:monospace;font-weight:bold;font-size:1.65em;color:#fff'>\n    Basic Overview\n<\/div>","14960cf6":"<div style='color:#212129;font-family:calibri light;text-align:justify;font-size:1.2em;font-weight:500;padding-left:2em;padding-right:4em'>\n<b>Drinking water<\/b>, also known as potable water, is water that is safe to drink or use for food preparation. The amount of drinking water required to maintain good health varies, and depends on physical activity level, age, health-related issues, and environmental conditions.<sup>[1][2]<\/sup> For those who work in a hot climate, up to 16 litres (4.2 US gal) a day may be required.<sup>[1]<\/sup>\n<br><br>    \nTypically in developed countries, tap water meets drinking water quality standards, even though only a small proportion is actually consumed or used in food preparation. Other typical uses include washing, toilets, and irrigation. Greywater may also be used for toilets or irrigation. Its use for irrigation however may be associated with risks.<sup>[3]<\/sup> <b>Water may also be unacceptable<\/b> due to levels of <b>toxins<\/b> or suspended <b>solids<\/b>.<br><br>\n\nGlobally, by 2015, <b>89% of people<\/b> had access to water from a source that is <b>suitable for drinking<\/b> \u2013 called improved water source.<sup>[3]<\/sup> In <b>Sub-Saharan Africa<\/b>, access to potable water ranged from <b>40% to 80%<\/b> of the population. Nearly 4.2 billion people worldwide had access to tap water, while another 2.4 billion had access to wells or public taps.<sup>[3]<\/sup> The World Health Organization considers access to <b>safe drinking-water a basic human right<\/b>.<br><br>\n        \nAbout <b>1 to 2 billion people lack safe drinking water<\/b>.<sup>[4]<\/sup> <b>More people die from unsafe water than from war<\/b>, then-U.N. Secretary-General Ban Ki-moon said in 2010.<sup>[5]<\/sup>  \n<br><br>\n<p style='font-size:0.5em;margin-left:3em'>[1] Ann C. Grandjean (August 2004). \"3\" (PDF). Water Requirements, Impinging Factors, & Recommended Intakes. World Health Organization. pp. 25\u201334. Archived (PDF) from the original on 2016-02-22. This 2004 article focuses on the USA context and uses data collected from the US military.<\/p>\n<p style='font-size:0.5em;margin-left:3em'>[2] Exposure Factors Handbook: 2011 Edition (PDF). National Center for Environmental Assessment. September 2011. Archived from the original (PDF) on 24 September 2015. Retrieved 24 May 2015.<\/p>\n<p style='font-size:0.5em;margin-left:3em'>[3] \"Water Fact sheet N\u00b0391\". July 2014. Archived from the original on 5 June 2015. Retrieved 24 May 2015.<\/p>\n<p style='font-size:0.5em;margin-left:3em'>[4] \"Drinking-water\". World Health Organization. March 2018. Retrieved 23 March 2018.<\/p>\n<p style='font-size:0.5em;margin-left:3em'>[5] \"Unsafe water kills more people than war, Ban says on World Day\". UN News. 22 March 2010. Retrieved 10 May 2018.<\/p>\n<\/div>","3d1af1ca":"<div style='background:#72a5d3;padding-left:2em;text-align:left;font-family:monospace;font-weight:bold;font-size:1.65em;color:#fff'>\n    Feature Columns\n<\/div>","980d4413":"<div style='background:#72a5d3;padding-left:2em;text-align:left;font-family:monospace;font-weight:bold;font-size:1.65em;color:#fff'>\n    Importing Data\n<\/div>","8b8f4619":"<div style='color:#212129;font-family:calibri light;text-align:justify;font-size:1.2em;font-weight:500;padding-left:2em;padding-right:4em'>\nThe dataset at hand consists of <b>10 columns<\/b> in total.<br> \nOur <b>goal<\/b> is to predict (classify) if a water source is potable or not.<hr\/><\/div>\n\n1. **pH-Value**: Measures the acid-balance. WHO has recommended maximum permissible limit of pH from 6.5 to 8.5\n2. **Hardness**: Caused by calcium and magnesium salts. Defined as the capacity of water to precipitate soap.\n3. **Solids**: Indicates how much the water is mineralized (Total Dissolved Solids). Desired range for TDS is 500 up to 1000 mg\/l.\n4. **Chloramines**: Major disinfectants used in public water systems. Up to 4 milligrams per liter are considered safe.\n5. **Sulfate**: Sulfates are naturally occurring substances that are found in minerals, soil, and rocks.\n6. **Conductivity**: The amount of dissolved solids in water determines the electrical conductivity. Should not exceeded 400 \u03bcS\/cm.\n7. **Organic_carbon**: A measure of the total amount of carbon in organic compounds decaying in pure water.\n8. **Trihalomethanes**: May be found in water treated with chlorine. THM levels up to 80 ppm is considered safe.\n9. **Turbidity**: Indicate the quality of waste discharge with respect to colloidal matter. WHO recommended value of 5.00 NTU.\n10. **Potability**: Our target variable. Indicates if safe for human consumption where 1 means potable and 0 means not potable"}}