{"cell_type":{"8d1aac91":"code","091ef303":"code","424548fd":"code","eb2292d2":"code","609111a6":"code","6d3fec6c":"code","deacbb97":"code","bb4b39aa":"code","89595dec":"code","9be083b7":"code","0748117c":"code","e21cd858":"code","70cd0d0b":"code","4392c058":"code","3923d4fa":"code","5351050a":"code","3f7cfaea":"code","d137c62c":"code","9253560c":"code","0b8bb53c":"code","50c9731a":"code","66c18e98":"code","973b4bdb":"code","1d1a0cb9":"code","d7085300":"code","de5eb95e":"code","cc3654c8":"code","ec2278a7":"code","6120a5ca":"code","b20f1512":"code","071bd410":"code","ca324cdd":"code","ad345448":"code","f26bfd4b":"code","a0fc1b35":"code","b906eed3":"code","ee3e19a5":"code","67d43852":"code","379d39ad":"code","a6b80dbc":"code","5cb2e09f":"code","e96242f4":"code","693b7d0c":"code","625399e8":"code","129c922d":"code","4bb45b25":"code","5c353250":"code","b377b6a6":"code","70612e17":"code","62e53b7a":"code","d31b331d":"code","2fc53ffd":"code","ae23402c":"code","4b78ce82":"code","22578bdb":"code","61443b71":"code","4cc50d1e":"code","38ff196b":"code","1d62c803":"code","8f3ee688":"code","4ea716d1":"code","9a16181b":"code","7c23bb48":"code","abab927c":"code","a1af35a8":"code","9e3bec06":"code","a7aa23cc":"code","a7e222c5":"code","7a83fe33":"code","dd79f8f7":"code","d48756c6":"code","d52444e9":"code","566449b2":"code","5928ee1b":"code","18791756":"code","322159f5":"code","85cb0410":"code","537e4c03":"code","f0029279":"code","432578ad":"code","9a78f1cf":"code","c7fc9277":"code","036ef17c":"code","a3bcecc0":"code","2447586b":"code","8ab074d6":"code","66ea823d":"code","37858e92":"code","0124bccf":"code","997f4bd5":"code","2359cbb5":"code","e0f43ef9":"code","d2d58800":"code","564a4e49":"markdown","2542e65b":"markdown","ac5b4cdb":"markdown","735fe3f8":"markdown","94e892e9":"markdown","ccd09b24":"markdown","800c29e4":"markdown","82863003":"markdown","323387a2":"markdown","e8a55441":"markdown","a8d5f555":"markdown","212d3b6b":"markdown","6e182e7b":"markdown","83b887c8":"markdown","31832d8e":"markdown","467a3a58":"markdown","8d00fab7":"markdown","c81f17fb":"markdown","3542e407":"markdown"},"source":{"8d1aac91":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport sklearn","091ef303":"# Import training and validation sets\ndf = pd.read_csv(\"..\/input\/bluebook-for-bulldozers\/TrainAndValid.csv\",\n                 low_memory=False)","424548fd":"df.info()","eb2292d2":"df.isna().sum()","609111a6":"df.columns","6d3fec6c":"fig, ax = plt.subplots()\nax.scatter(df[\"saledate\"][:1000], df[\"SalePrice\"][:1000])","deacbb97":"df.saledate[:1000]","bb4b39aa":"df.saledate.dtype","89595dec":"df.SalePrice.plot.hist()","9be083b7":"# Import data again but this time parse dates\ndf = pd.read_csv(\"..\/input\/bluebook-for-bulldozers\/TrainAndValid.csv\",\n                 low_memory=False,\n                 parse_dates=[\"saledate\"])","0748117c":"df.saledate.dtype","e21cd858":"df.saledate[:1000]","70cd0d0b":"fig, ax = plt.subplots()\nax.scatter(df[\"saledate\"][:1000], df[\"SalePrice\"][:1000])","4392c058":"df.head()","3923d4fa":"df.head().T","5351050a":"df.saledate.head(20)","3f7cfaea":"# Sort DataFrame in date order\ndf.sort_values(by=[\"saledate\"], inplace=True, ascending=True)\ndf.saledate.head(20)","d137c62c":"# Make a copy of the original DataFrame to perform edits on\ndf_tmp = df.copy()","9253560c":"df_tmp[\"saleYear\"] = df_tmp.saledate.dt.year\ndf_tmp[\"saleMonth\"] = df_tmp.saledate.dt.month\ndf_tmp[\"saleDay\"] = df_tmp.saledate.dt.day\ndf_tmp[\"saleDayOfWeek\"] = df_tmp.saledate.dt.dayofweek\ndf_tmp[\"saleDayOfYear\"] = df_tmp.saledate.dt.dayofyear","0b8bb53c":"df_tmp.head().T","50c9731a":"# Now we've enriched our DataFrame with date time features, we can remove 'saledate'\ndf_tmp.drop(\"saledate\", axis=1, inplace=True)","66c18e98":"# Check the values of different columns\ndf_tmp.state.value_counts()","973b4bdb":"df_tmp.head()","1d1a0cb9":"len(df_tmp)","d7085300":"a = df_tmp.drop(\"SalePrice\", axis=1)\na","de5eb95e":"b = df_tmp['SalePrice']\nb","cc3654c8":"# # Let's build a machine learning model \n# from sklearn.ensemble import RandomForestRegressor\n\n# model = RandomForestRegressor(n_jobs=-1,\n#                               random_state=42)\n\n# model.fit(a, b)","ec2278a7":"df_tmp.info()","6120a5ca":"df_tmp[\"UsageBand\"].dtype","b20f1512":"df_tmp.isna().sum()","071bd410":"df_tmp.head().T","ca324cdd":"pd.api.types.is_string_dtype(df_tmp[\"UsageBand\"])","ad345448":"# Find the columns which contain strings\nfor label, content in df_tmp.items():\n    if pd.api.types.is_string_dtype(content):\n        print(label)","f26bfd4b":"# If you're wondering what df.items() does, here's an example\nrandom_dict = {\"key1\": \"hello\",\n               \"key2\": \"world!\"}\n\nfor key, value in random_dict.items():\n    print(f\"this is a key: {key}\",\n          f\"this is a value: {value}\")","a0fc1b35":"# This will turn all of the string value into category values\nfor label, content in df_tmp.items():\n    if pd.api.types.is_string_dtype(content):\n        df_tmp[label] = content.astype(\"category\").cat.as_ordered()","b906eed3":"df_tmp.info()","ee3e19a5":"df_tmp.state.cat.categories","67d43852":"df_tmp.state.cat.codes","379d39ad":"# Check missing data\ndf_tmp.isnull().sum()\/len(df_tmp)","a6b80dbc":"# Export current tmp dataframe\ndf_tmp.to_csv(\"train_tmp.csv\",\n              index=False)","5cb2e09f":"# Import preprocessed data\ndf_tmp = pd.read_csv(\"train_tmp.csv\",\n                     low_memory=False)\ndf_tmp.head().T","e96242f4":"df_tmp.isna().sum()","693b7d0c":"for label, content in df_tmp.items():\n    if pd.api.types.is_numeric_dtype(content):\n        print(label)","625399e8":"df_tmp.ModelID","129c922d":"# Check for which numeric columns have null values\nfor label, content in df_tmp.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isnull(content).sum():\n            print(label)","4bb45b25":"# Fill numeric rows with the median\nfor label, content in df_tmp.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isnull(content).sum():\n            # Add a binary column which tells us if the data was missing or not\n            df_tmp[label+\"_is_missing\"] = pd.isnull(content)\n            # Fill missing numeric values with median\n            df_tmp[label] = content.fillna(content.median())","5c353250":"# Demonstrate how median is more robust than mean\nhundreds = np.full((1000,), 100)\nhundreds_billion = np.append(hundreds, 1000000000)\nnp.mean(hundreds), np.mean(hundreds_billion), np.median(hundreds), np.median(hundreds_billion)","b377b6a6":"# Check if there's any null numeric values\nfor label, content in df_tmp.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isnull(content).sum():\n            print(label)","70612e17":"# Check to see how many examples were missing\ndf_tmp.auctioneerID_is_missing.value_counts()","62e53b7a":"df_tmp.isna().sum()","d31b331d":"# Check for columns which aren't numeric\nfor label, content in df_tmp.items():\n    if not pd.api.types.is_numeric_dtype(content):\n        print(label)","2fc53ffd":"# Turn categorical variables into numbers and fill missing\nfor label, content in df_tmp.items():\n    if not pd.api.types.is_numeric_dtype(content):\n        # Add binary column to indicate whether sample had missing value\n        df_tmp[label+\"_is_missing\"] = pd.isnull(content)\n        # Turn categories into numbers and add +1\n        df_tmp[label] = pd.Categorical(content).codes+1","ae23402c":"# + 1 to turn -1 to 0, so we know 0 is missing value\npd.Categorical(df_tmp[\"state\"]).codes+1","4b78ce82":"df_tmp.info()","22578bdb":"df_tmp.head().T","61443b71":"df_tmp.isna().sum()","4cc50d1e":"df_tmp.head()","38ff196b":"len(df_tmp)","1d62c803":"%%time\nfrom sklearn.ensemble import RandomForestRegressor\n# Instantiate model\nmodel = RandomForestRegressor(n_jobs=-1,\n                              random_state=42)\n\n# Fit the model\nmodel.fit(df_tmp.drop(\"SalePrice\", axis=1), df_tmp[\"SalePrice\"])","8f3ee688":"# Score the model\nmodel.score(df_tmp.drop(\"SalePrice\", axis=1), df_tmp[\"SalePrice\"])","4ea716d1":"df_tmp.saleYear","9a16181b":"df_tmp.saleYear.value_counts()","7c23bb48":"# Split data into training and validation\ndf_val = df_tmp[df_tmp.saleYear == 2012]\ndf_train = df_tmp[df_tmp.saleYear != 2012]\n\nlen(df_val), len(df_train)","abab927c":"# Split data into X & y\nX_train, y_train = df_train.drop(\"SalePrice\", axis=1), df_train.SalePrice\nX_valid, y_valid = df_val.drop(\"SalePrice\", axis=1), df_val.SalePrice\n\nX_train.shape, y_train.shape, X_valid.shape, y_valid.shape","a1af35a8":"y_train","9e3bec06":"# Create evaluation function (the competition uses RMSLE)\nfrom sklearn.metrics import mean_squared_log_error, mean_absolute_error, r2_score\n\ndef rmsle(y_test, y_preds):\n    \"\"\"\n    Caculates root mean squared log error between predictions and\n    true labels.\n    \"\"\"\n    return np.sqrt(mean_squared_log_error(y_test, y_preds))\n\n# Create function to evaluate model on a few different levels\ndef show_scores(model):\n    train_preds = model.predict(X_train)\n    val_preds = model.predict(X_valid)\n    scores = {\"Training MAE\": mean_absolute_error(y_train, train_preds),\n              \"Valid MAE\": mean_absolute_error(y_valid, val_preds),\n              \"Training RMSLE\": rmsle(y_train, train_preds),\n              \"Valid RMSLE\": rmsle(y_valid, val_preds),\n              \"Training R^2\": r2_score(y_train, train_preds),\n              \"Valid R^2\": r2_score(y_valid, val_preds)}\n    return scores","a7aa23cc":"# # This takes far too long... for experimenting\n\n# %%time\n# model = RandomForestRegressor(n_jobs=-1, \n#                               random_state=42)\n\n# model.fit(X_train, y_train)","a7e222c5":"len(X_train)","7a83fe33":"# Change max_samples value\nmodel = RandomForestRegressor(n_jobs=-1,\n                              random_state=42,\n                              max_samples=10000)","dd79f8f7":"%%time\n# Cutting down on the max number of samples each estimator can see improves training time\nmodel.fit(X_train, y_train)","d48756c6":"# original dataset size = X_train.shape[0] * 100\n# new dataset size = 10000 * 100\n# 40 times smaller\n(X_train.shape[0] * 100) \/ 1000000","d52444e9":"10000 * 100","566449b2":"show_scores(model)","5928ee1b":"%%time\nfrom sklearn.model_selection import RandomizedSearchCV\n\n# Different RandomForestRegressor hyperparameters\nrf_grid = {\"n_estimators\": np.arange(10, 100, 10),\n           \"max_depth\": [None, 3, 5, 10],\n           \"min_samples_split\": np.arange(2, 20, 2),\n           \"min_samples_leaf\": np.arange(1, 20, 2),\n           \"max_features\": [0.5, 1, \"sqrt\", \"auto\"],\n           \"max_samples\": [10000]}\n\n# Instantiate RandomizedSearchCV model\nrs_model = RandomizedSearchCV(RandomForestRegressor(n_jobs=-1,\n                                                    random_state=42),\n                              param_distributions=rf_grid,\n                              n_iter=2,\n                              cv=5,\n                              verbose=True)\n\n# Fit the RandomizedSearchCV model\nrs_model.fit(X_train, y_train)","18791756":"# Find the best model hyperparameters\nrs_model.best_params_","322159f5":"# Evaluate the RandomizedSearch model\nshow_scores(rs_model)","85cb0410":"%%time\n\n# Most ideal hyperparamters\nideal_model = RandomForestRegressor(n_estimators=40,\n                                    min_samples_leaf=1,\n                                    min_samples_split=14,\n                                    max_features=0.5,\n                                    n_jobs=-1,\n                                    max_samples=None,\n                                    random_state=42) # random state so our results are reproducible\n\n# Fit the ideal model\nideal_model.fit(X_train, y_train)","537e4c03":"# Scores for ideal_model (trained on all the data)\nshow_scores(ideal_model)","f0029279":"# Scores on rs_model (only trained on ~10,000 examples)\nshow_scores(rs_model)","432578ad":"# Import the test data\ndf_test = pd.read_csv(\"..\/input\/bluebook-for-bulldozers\/Test.csv\",\n                      low_memory=False,\n                      parse_dates=[\"saledate\"])\n\ndf_test.head()","9a78f1cf":"def preprocess_data(df):\n    \"\"\"\n    Performs transformations on df and returns transformed df.\n    \"\"\"\n    df[\"saleYear\"] = df.saledate.dt.year\n    df[\"saleMonth\"] = df.saledate.dt.month\n    df[\"saleDay\"] = df.saledate.dt.day\n    df[\"saleDayOfWeek\"] = df.saledate.dt.dayofweek\n    df[\"saleDayOfYear\"] = df.saledate.dt.dayofyear\n    \n    df.drop(\"saledate\", axis=1, inplace=True)\n    \n    # Fill the numeric rows with median\n    for label, content in df.items():\n        if pd.api.types.is_numeric_dtype(content):\n            if pd.isnull(content).sum():\n                # Add a binary column which tells us if the data was missing or not\n                df[label+\"_is_missing\"] = pd.isnull(content)\n                # Fill missing numeric values with median\n                df[label] = content.fillna(content.median())\n    \n        # Filled categorical missing data and turn categories into numbers\n        if not pd.api.types.is_numeric_dtype(content):\n            df[label+\"_is_missing\"] = pd.isnull(content)\n            # We add +1 to the category code because pandas encodes missing categories as -1\n            df[label] = pd.Categorical(content).codes+1\n    \n    return df","c7fc9277":"# Process the test data \ndf_test = preprocess_data(df_test)\ndf_test.head()","036ef17c":"X_train.head()","a3bcecc0":"# We can find how the columns differ using sets\nset(X_train.columns) - set(df_test.columns)","2447586b":"# Manually adjust df_test to have auctioneerID_is_missing column\ndf_test[\"auctioneerID_is_missing\"] = False\ndf_test.head()","8ab074d6":"# Make predictions on the test data\ntest_preds = ideal_model.predict(df_test)","66ea823d":"test_preds","37858e92":"# Format predictions into the same format Kaggle is after\ndf_preds = pd.DataFrame()\ndf_preds[\"SalesID\"] = df_test[\"SalesID\"]\ndf_preds[\"SalesPrice\"] = test_preds\ndf_preds","0124bccf":"# Export prediction data\ndf_preds.to_csv(\"test_predictions.csv\", index=False)","997f4bd5":"# Find feature importance of our best model\nideal_model.feature_importances_","2359cbb5":"# Helper function for plotting feature importance\ndef plot_features(columns, importances, n=20):\n    df = (pd.DataFrame({\"features\": columns,\n                        \"feature_importances\": importances})\n          .sort_values(\"feature_importances\", ascending=False)\n          .reset_index(drop=True))\n    \n    # Plot the dataframe\n    fig, ax = plt.subplots()\n    ax.barh(df[\"features\"][:n], df[\"feature_importances\"][:20])\n    ax.set_ylabel(\"Features\")\n    ax.set_xlabel(\"Feature importance\")\n    ax.invert_yaxis()","e0f43ef9":"plot_features(X_train.columns, ideal_model.feature_importances_)","d2d58800":"df[\"Enclosure\"].value_counts()","564a4e49":"### Convert string to categories\n\nOne way we can turn all of our data into numbers is by converting them into pandas catgories.\n\nWe can check the different datatypes compatible with pandas here: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/general_utility_functions.html#data-types-related-functionality","2542e65b":"### Save preprocessed data","ac5b4cdb":"### Make a copy of the original DataFrame\n\nWe make a copy of the original dataframe so when we manipulate the copy, we've still got our original data.","735fe3f8":"### Preprocessing the data (getting the test dataset in the same format as our training dataset)","94e892e9":"## Fill missing values \n\n### Fill numerical missing values first","ccd09b24":"### Splitting data into train\/validation sets","800c29e4":"### Building an evaluation function","82863003":"### Hyerparameter tuning with RandomizedSearchCV","323387a2":"### Train a model with the best hyperparamters\n\n**Note:** These were found after 100 iterations of `RandomizedSearchCV`.","e8a55441":"## Make predictions on test data","a8d5f555":"# \ud83d\ude9c Predicting the Sale Price of Bulldozers using Machine Learning\n\nIn this notebook, we're going to go through an example machine learning project with the goal of predicting the sale price of bulldozers.\n\n## 1. Problem defition\n\n> How well can we predict the future sale price of a bulldozer, given its characteristics and previous examples of how much similar bulldozers have been sold for?\n\n## 2. Data\n\nThe data is downloaded from the Kaggle Bluebook for Bulldozers competition: https:\/\/www.kaggle.com\/c\/bluebook-for-bulldozers\/data\n\nThere are 3 main datasets:\n\n* Train.csv is the training set, which contains data through the end of 2011.\n* Valid.csv is the validation set, which contains data from January 1, 2012 - April 30, 2012 You make predictions on this set throughout the majority of the competition. Your score on this set is used to create the public leaderboard.\n* Test.csv is the test set, which won't be released until the last week of the competition. It contains data from May 1, 2012 - November 2012. Your score on the test set determines your final rank for the competition.\n\n## 3. Evaluation\n\nThe evaluation metric for this competition is the RMSLE (root mean squared log error) between the actual and predicted auction prices.\n\nFor more on the evaluation of this project check: https:\/\/www.kaggle.com\/c\/bluebook-for-bulldozers\/overview\/evaluation\n\n**Note:** The goal for most regression evaluation metrics is to minimize the error. For example, our goal for this project will be to build a machine learning model which minimises RMSLE.","212d3b6b":"Now that all of data is numeric as well as our dataframe has no missing values, we should be able to build a machine learning model.","6e182e7b":"### Add datetime parameters for `saledate` column","83b887c8":"## 5. Modelling \n\nWe've done enough EDA (we could always do more) but let's start to do some model-driven EDA.","31832d8e":"### Feature Importance\n\nFeature importance seeks to figure out which different attributes of the data were most importance when it comes to predicting the **target variable** (SalePrice).","467a3a58":"### Filling and turning categorical variables into numbers","8d00fab7":"### Parsing dates\n\nWhen we work with time series data, we want to enrich the time & date component as much as possible.\n\nWe can do that by telling pandas which of our columns has dates in it using the `parse_dates` parameter.","c81f17fb":"### Sort DataFrame by saledate\n\nWhen working with time series data, it's a good idea to sort it by date.","3542e407":"## Testing our model on a subset (to tune the hyperparameters)"}}