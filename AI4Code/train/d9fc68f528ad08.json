{"cell_type":{"21d6224e":"code","e989403b":"code","9068470f":"code","928f3e6e":"code","ab53e453":"code","48a6112a":"code","db462ef5":"code","d076ff42":"code","b3be6f41":"code","c82c3b61":"code","d5198ba9":"code","2234875a":"code","69499dfa":"code","81d42a49":"code","eef85175":"code","62f6e793":"code","238a25d4":"code","28fb0ac6":"code","df2eb240":"code","ac6fa203":"code","83183fd0":"code","7fd8f9d3":"code","72fdb6cf":"code","c6137461":"code","2b35b2b6":"code","4e023090":"code","0f37f016":"markdown","e2295535":"markdown","4c76a60a":"markdown","83c60844":"markdown","d90992a7":"markdown","caeb411f":"markdown","f1e0d563":"markdown","b092a755":"markdown"},"source":{"21d6224e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nos.listdir(\"..\/input\/cassava-leaf-disease-classification\/train_tfrecords\")\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e989403b":"# import keras, re\n# import tensorflow as tf\n# from functools import partial\n# from kaggle_datasets import KaggleDatasets","9068470f":"import math, re, os, warnings, random\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom kaggle_datasets import KaggleDatasets\nfrom tensorflow import keras\nfrom functools import partial\nfrom sklearn.model_selection import train_test_split\n!pip install -q efficientnet\nimport efficientnet.tfkeras as efn\n\nfrom sklearn.utils import class_weight\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.backend as K\nfrom tensorflow.keras import optimizers, applications, Sequential, losses, metrics\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, LearningRateScheduler\n\nprint(\"Tensorflow version \" + tf.__version__)","928f3e6e":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint('Number of replicas:', strategy.num_replicas_in_sync)","ab53e453":"AUTOTUNE = tf.data.experimental.AUTOTUNE\nGCS_PATH = KaggleDatasets().get_gcs_path()\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\nIMAGE_SIZE = [512, 512]\nRESIZE_IMAGE_SIZE = [300, 300]  # GPU\nCLASSES = ['0', '1', '2', '3', '4']\nEPOCHS = 25\nHEIGHT = 512\nWIDTH = 512\nCHANNELS = 3","48a6112a":"## This is the only code neeeded to read TFrecord files and convert them to images\ndef decode_image(img):\n    image = tf.image.decode_jpeg(img, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.reshape(image, [*IMAGE_SIZE, 3])\n    return image\n\ndef parse_img(example, labeled):\n    FEATURES = {\n        \"image\": tf.io.FixedLenFeature([], tf.string),\n        \"target\": tf.io.FixedLenFeature([], tf.int64)\n    } if labeled else {\n        \"image\": tf.io.FixedLenFeature([], tf.string),\n        \"image_name\": tf.io.FixedLenFeature([], tf.string)\n    }\n    example_img = tf.io.parse_single_example(example, FEATURES)\n    image = decode_image(example_img['image'])\n    if labeled:\n        label = tf.cast(example_img['target'], tf.int32)\n        return image, label\n    idnum = example_img['image_name']\n    return image, idnum\n\n","db462ef5":"from sklearn.model_selection import train_test_split\nTRAINING_FILENAMES, VAL_FILENAMES = train_test_split(tf.io.gfile.glob(GCS_PATH + \"\/train_tfrecords\/ld_train*.tfrec\"), test_size=0.2, random_state=5)\n\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + \"\/test_tfrecords\/ld_test*.tfrec\")","d076ff42":"train_filenames = GCS_PATH + \"\/train_tfrecords\/ld_train14-1338.tfrec\"\nraw_dataset = tf.data.TFRecordDataset(train_filenames)\nfor raw_record in raw_dataset.take(1):\n    example = tf.train.Example()\n    example.ParseFromString(raw_record.numpy())\n    keysList = list(example.features.feature)\n    print(keysList)\n    \ntest_filenames = GCS_PATH + \"\/test_tfrecords\/ld_test00-1.tfrec\"\nraw_dataset = tf.data.TFRecordDataset(test_filenames)\nfor raw_record in raw_dataset.take(1):\n    example = tf.train.Example()\n    example.ParseFromString(raw_record.numpy())\n    keysList = list(example.features.feature)\n    print(keysList)\n","b3be6f41":"def count_data_items(filenames):\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\nNUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_VALIDATION_IMAGES = count_data_items(VAL_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)","c82c3b61":"ds = pd.read_csv('..\/input\/cassava-leaf-disease-classification\/train.csv')\nds.shape","d5198ba9":"# #data augmentation\n# def data_augment(image, label):\n#     image = tf.image.random_flip_left_right(image)\n#     return image, label\n","2234875a":"def data_augment(image, label):\n    p_rotation = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n    p_spatial = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n    p_rotate = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n    p_pixel_1 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n    p_pixel_2 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n    p_pixel_3 = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n    p_shear = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n    p_crop = tf.random.uniform([], 0, 1.0, dtype=tf.float32)\n    \n    # Shear\n    if p_shear > .2:\n        if p_shear > .6:\n            image = transform_shear(image, HEIGHT, shear=20.)\n        else:\n            image = transform_shear(image, HEIGHT, shear=-20.)\n            \n    # Rotation\n    if p_rotation > .2:\n        if p_rotation > .6:\n            image = transform_rotation(image, HEIGHT, rotation=45.)\n        else:\n            image = transform_rotation(image, HEIGHT, rotation=-45.)\n            \n    # Flips\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_flip_up_down(image)\n    if p_spatial > .75:\n        image = tf.image.transpose(image)\n        \n    # Rotates\n    if p_rotate > .75:\n        image = tf.image.rot90(image, k=3) # rotate 270\u00ba\n    elif p_rotate > .5:\n        image = tf.image.rot90(image, k=2) # rotate 180\u00ba\n    elif p_rotate > .25:\n        image = tf.image.rot90(image, k=1) # rotate 90\u00ba\n        \n    # Pixel-level transforms\n    if p_pixel_1 >= .4:\n        image = tf.image.random_saturation(image, lower=.7, upper=1.3)\n    if p_pixel_2 >= .4:\n        image = tf.image.random_contrast(image, lower=.8, upper=1.2)\n    if p_pixel_3 >= .4:\n        image = tf.image.random_brightness(image, max_delta=.1)\n        \n    # Crops\n    if p_crop > .7:\n        if p_crop > .9:\n            image = tf.image.central_crop(image, central_fraction=.6)\n        elif p_crop > .8:\n            image = tf.image.central_crop(image, central_fraction=.7)\n        else:\n            image = tf.image.central_crop(image, central_fraction=.8)\n    elif p_crop > .4:\n        crop_size = tf.random.uniform([], int(HEIGHT*.6), HEIGHT, dtype=tf.int32)\n        image = tf.image.random_crop(image, size=[crop_size, crop_size, CHANNELS])\n            \n    image = tf.image.resize(image, size=[HEIGHT, WIDTH])\n\n    return image, label","69499dfa":"def transform_rotation(image, height, rotation):\n    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n    # output - image randomly rotated\n    DIM = height\n    XDIM = DIM%2 #fix for size 331\n    \n    rotation = rotation * tf.random.uniform([1],dtype='float32')\n    # CONVERT DEGREES TO RADIANS\n    rotation = math.pi * rotation \/ 180.\n    \n    # ROTATION MATRIX\n    c1 = tf.math.cos(rotation)\n    s1 = tf.math.sin(rotation)\n    one = tf.constant([1],dtype='float32')\n    zero = tf.constant([0],dtype='float32')\n    rotation_matrix = tf.reshape(tf.concat([c1,s1,zero, -s1,c1,zero, zero,zero,one],axis=0),[3,3])\n\n    # LIST DESTINATION PIXEL INDICES\n    x = tf.repeat( tf.range(DIM\/\/2,-DIM\/\/2,-1), DIM )\n    y = tf.tile( tf.range(-DIM\/\/2,DIM\/\/2),[DIM] )\n    z = tf.ones([DIM*DIM],dtype='int32')\n    idx = tf.stack( [x,y,z] )\n    \n    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n    idx2 = K.dot(rotation_matrix,tf.cast(idx,dtype='float32'))\n    idx2 = K.cast(idx2,dtype='int32')\n    idx2 = K.clip(idx2,-DIM\/\/2+XDIM+1,DIM\/\/2)\n    \n    # FIND ORIGIN PIXEL VALUES \n    idx3 = tf.stack( [DIM\/\/2-idx2[0,], DIM\/\/2-1+idx2[1,]] )\n    d = tf.gather_nd(image, tf.transpose(idx3))\n        \n    return tf.reshape(d,[DIM,DIM,3])\n\ndef transform_shear(image, height, shear):\n    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n    # output - image randomly sheared\n    DIM = height\n    XDIM = DIM%2 #fix for size 331\n    \n    shear = shear * tf.random.uniform([1],dtype='float32')\n    shear = math.pi * shear \/ 180.\n        \n    # SHEAR MATRIX\n    one = tf.constant([1],dtype='float32')\n    zero = tf.constant([0],dtype='float32')\n    c2 = tf.math.cos(shear)\n    s2 = tf.math.sin(shear)\n    shear_matrix = tf.reshape(tf.concat([one,s2,zero, zero,c2,zero, zero,zero,one],axis=0),[3,3])    \n\n    # LIST DESTINATION PIXEL INDICES\n    x = tf.repeat( tf.range(DIM\/\/2,-DIM\/\/2,-1), DIM )\n    y = tf.tile( tf.range(-DIM\/\/2,DIM\/\/2),[DIM] )\n    z = tf.ones([DIM*DIM],dtype='int32')\n    idx = tf.stack( [x,y,z] )\n    \n    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n    idx2 = K.dot(shear_matrix,tf.cast(idx,dtype='float32'))\n    idx2 = K.cast(idx2,dtype='int32')\n    idx2 = K.clip(idx2,-DIM\/\/2+XDIM+1,DIM\/\/2)\n    \n    # FIND ORIGIN PIXEL VALUES \n    idx3 = tf.stack( [DIM\/\/2-idx2[0,], DIM\/\/2-1+idx2[1,]] )\n    d = tf.gather_nd(image, tf.transpose(idx3))\n        \n    return tf.reshape(d,[DIM,DIM,3])","81d42a49":"def load_dataset(filenames, labeled, ordered=False):\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n    ds = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTOTUNE) # automatically interleaves reads from multiple files\n    ds = ds.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    \n    ds = ds.map(partial(parse_img, labeled=labeled), num_parallel_calls=AUTOTUNE)\n    return ds\n    \ndef get_training_ds():\n    ds = load_dataset(TRAINING_FILENAMES, labeled=True)\n    ds = ds.map(data_augment, num_parallel_calls=AUTOTUNE)\n    ds = ds.repeat()\n    ds = ds.shuffle(2048)\n    ds = ds.batch(BATCH_SIZE)\n    ds = ds.prefetch(AUTOTUNE)\n    return ds\n\ndef get_valid_ds(ordered=False):\n    ds = load_dataset(VAL_FILENAMES, labeled=True, ordered=ordered)\n    ds = ds.batch(BATCH_SIZE)\n    ds = ds.cache()\n    ds = ds.prefetch(AUTOTUNE)\n    return ds\n\ndef get_test_ds(ordered=False):\n    ds = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    ds = ds.batch(BATCH_SIZE)\n    ds = ds.prefetch(AUTOTUNE)\n    return ds\n\n","eef85175":"train_ds = get_training_ds()\ntrain_ds = train_ds.unbatch().batch(20)\n\nval_ds = get_valid_ds()\nval_ds = val_ds.unbatch().batch(20)\n","62f6e793":"from keras.applications import ResNet50\nimport keras.layers as layers\n","238a25d4":"lr_scheduler = keras.optimizers.schedules.ExponentialDecay(\n    initial_learning_rate = 1e-5,\n    decay_rate = 0.9,\n    decay_steps = 10000\n)\n\nearly_stopping_cb = keras.callbacks.EarlyStopping(patience = 20 ,min_delta = 0.001, restore_best_weights=True)","28fb0ac6":"def efficientnet_b3_base():\n    base_model = efn.EfficientNetB7(\n                            input_shape=(512, 512, 3),\n                            weights='imagenet',\n                            include_top=False)\n#     preprocess_layer = tf.keras.layers.Lambda(tf.keras.applications.efficientnet.preprocess_input, input_shape=[*RESIZE_IMAGE_SIZE, 3])\n#     return base_model, preprocess_layer\n    return base_model","df2eb240":"MODEL_NAME = 'efficientnet_b3'\n\nwith strategy.scope():\n#     img_adjust_layer = tf.keras.layers.Lambda(tf.keras.applications.resnet50.preprocess_input, input_shape=[*IMAGE_SIZE, 3])\n    \n#     base_model = ResNet50(weights='imagenet', include_top=False)\n#     base_model.trainable = False\n\n#     base_model, img_adjust_layer = efficientnet_b3_base() \n    base_model = efficientnet_b3_base() \n\n    model = keras.Sequential([\n        layers.BatchNormalization(renorm=True),\n#         img_adjust_layer,\n        base_model,\n        layers.GlobalAveragePooling2D(),\n        layers.Dense(1024, activation='relu'),\n        layers.Dense(len(CLASSES), activation='softmax')\n    ])\n\n    model.compile(optimizer=keras.optimizers.Adam(learning_rate = lr_scheduler, epsilon=0.001),\n             loss='sparse_categorical_crossentropy',\n             metrics=['sparse_categorical_accuracy'])","ac6fa203":"TRAIN_STEPS = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nVAL_STEPS = NUM_VALIDATION_IMAGES \/\/ BATCH_SIZE","83183fd0":"\n\nhistory = model.fit(\n    train_ds,\n    epochs = 100,\n    steps_per_epoch = TRAIN_STEPS, # required for infinite datasets (dunno what this means though)\n    validation_data = val_ds,    \n    validation_steps = VAL_STEPS,  # required for infinite datasets (dunno what this means though)\n    callbacks=[early_stopping_cb]\n)","7fd8f9d3":"# create learning curves to evaluate model performance\nhistory_frame = pd.DataFrame(history.history)\nhistory_frame.loc[:, ['loss', 'val_loss']].plot()\nhistory_frame.loc[:, ['sparse_categorical_accuracy', 'val_sparse_categorical_accuracy']].plot();","72fdb6cf":"model.save(f\"{MODEL_NAME}.h5\")","c6137461":"def to_float32(image, label):\n    return tf.cast(image, tf.float32), label","2b35b2b6":"test_ds1 = get_test_ds(ordered=True) \ntest_ds = test_ds1.map(to_float32)\n\nprint('Computing predictions...')\ntest_images_ds = test_ds1\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = model.predict(test_images_ds)\npredictions = np.argmax(probabilities, axis=-1)\nprint(predictions)","4e023090":"print('Generating submission.csv file...')\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')\n!head submission.csv","0f37f016":"## Utility functions for ETL of data\n","e2295535":"## Functions for Reading Data from TFRecords ","4c76a60a":"#### Getting the Features Dictionary","83c60844":"## check for TPU","d90992a7":"## Building Model","caeb411f":"## Training model","f1e0d563":"## Getting the filenames of train, val and test","b092a755":"## Plotting History curves"}}