{"cell_type":{"e2308753":"code","0253eb5b":"code","f9e6c22a":"code","65881b0e":"code","3b76f570":"code","ff59f847":"code","b2219b24":"code","f1f53011":"code","688704d3":"code","84fcf98c":"code","92fbe0d8":"code","1571bff9":"code","9c013e95":"code","7cdb8107":"code","72937bd1":"code","36fdc53f":"code","20911489":"code","ae5c230b":"code","42dcc1f2":"code","c82a484b":"code","efb9a20d":"code","64374e0c":"code","f5278867":"code","b1416f82":"code","56152dac":"code","b8e92122":"code","b4a193cc":"code","5b86e688":"code","dea5393d":"code","a4b58f1d":"code","d51a6906":"code","1da17e3d":"code","91fb2aac":"markdown","204b18ae":"markdown","b6e44874":"markdown","6a6558b0":"markdown","5846600e":"markdown","97adc020":"markdown","c1930572":"markdown","b8adff9c":"markdown","b2eb2b62":"markdown","6a6a22c2":"markdown","fe260435":"markdown","c929907d":"markdown","9063f1a3":"markdown","55f030cc":"markdown","b325928e":"markdown","5307ff57":"markdown","0f52ad61":"markdown","90e78659":"markdown","608a6a54":"markdown","7143cac9":"markdown","7b760342":"markdown","f5c7a829":"markdown","8f26f002":"markdown","f71b8741":"markdown","8397b23f":"markdown","397ea6e7":"markdown","f027c950":"markdown","fe5bfb84":"markdown","d314591c":"markdown","64938888":"markdown","97f364c6":"markdown"},"source":{"e2308753":"#Import necessary libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport networkx as nx\nimport time\nimport seaborn as sns\nimport re\nimport math\nsns.set_style(\"whitegrid\")\n#sns.set(style=\"darkgrid\")\nsns.set_palette(\"tab10\")\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode,iplot\nimport datetime as dt\nplt.style.use('seaborn-notebook')\nparams = {'legend.fontsize': 15,\n          'legend.title_fontsize': 16,\n          'figure.figsize': (15, 5),\n         'axes.labelsize': 18,\n         'axes.titlesize':20,\n         'xtick.labelsize':18,\n         'ytick.labelsize':18}\nplt.rcParams.update(params)\nimg_fmt = 'svg'","0253eb5b":"#Analysing the input dataframe\ndf=pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\ndf.head()\ndf.info()\ndf.describe().T","f9e6c22a":"df['release_year'] = pd.to_datetime(df['release_year'],format='%Y')\ndf['date_added'] = pd.to_datetime(df['date_added'])\nindeks = df[np.isnan(df['date_added'])].index\ndf.loc[indeks, 'date_added'] = df.loc[indeks, 'release_year']\ndf['release_year'] = df['release_year'].dt.year","65881b0e":"title = 'Top 10 video contents in each type and rating'\ndf_type_rating = df.groupby(['type','rating']).count().show_id.reset_index().sort_values(by = 'show_id').tail(10)\nfig,ax = plt.subplots(figsize = (15,7.5))\nplots = sns.barplot(data = df_type_rating, x='type',y = 'show_id', hue = 'rating', palette='dark')\nfor bar in plots.patches:\n    _ = plots.annotate(format(bar.get_height(), '.0f'), \n                   (bar.get_x() + bar.get_width() \/ 2, \n                    bar.get_height() - (bar.get_height()-3.1)\/2), ha='center', va='center',\n                   size=15, xytext=(0, 0),bbox=dict(boxstyle=\"round4,pad=0.6\", fc=\"w\", ec=\"black\", lw=2),\n                   textcoords='offset points')\n_ = plt.box(on=None)\n_ = plt.title(title, fontsize = 25, color = 'blue')\n_ = plt.xlabel('Type')\n_ = plt.ylabel('Count')\n_ = plt.savefig(title+'.'+img_fmt,format = img_fmt)","3b76f570":"title = 'Top 5 countries in terms of movies released'\ncountries = {}\nfor country in df.country.dropna():\n    for sub_country in str(country).split(', '):\n        if sub_country not in countries:\n            countries[sub_country] = 1\n        else: countries[sub_country] += 1\ndf_countries = pd.DataFrame(list(countries.items()),columns = ['country','count']).sort_values(by = ['count'])\n_ = plt.subplots(figsize = (10,8))\n_ = plt.xticks(rotation = 60)\n_ = plt.title(title, color='blue', fontsize=20)\nplots = sns.barplot(data = df_countries.tail()[::-1],x= 'country', y='count')\nfor bar in plots.patches:\n    _ = plots.annotate(format(bar.get_height(), '.0f'), \n                   (bar.get_x() + bar.get_width() \/ 2, \n                    bar.get_height() - (bar.get_height()-3.1)\/2), ha='center', va='center',\n                   size=15, xytext=(0, 0),bbox=dict(boxstyle=\"round4,pad=0.6\", fc=\"w\", ec=\"black\", lw=2),\n                   textcoords='offset points')\n_ = plt.savefig(title+'.'+img_fmt,format = img_fmt)","ff59f847":"title = 'Number of videos release in last 5 years in the top 3 countries'\nfig,ax = plt.subplots(nrows = 1, ncols = 3, figsize = (15,5),sharey=True)\n_ = fig.suptitle(title, fontsize = 25, color = 'blue')\ni = 0\nfor country in df_countries.tail(3).country.values[::-1]:\n    df_country = df.loc[df.country == country].loc[(df.release_year>2015) & (df.release_year<=2020)]\n    plots = sns.countplot(data = df_country,x= 'release_year', ax = ax[i])\n    _ = ax[i].set_title(country,color='brown', fontsize=25)\n    for bar in plots.patches:\n        _ = plots.annotate(format(bar.get_height(), '.0f'), \n                       (bar.get_x() + bar.get_width() \/ 2, \n                        bar.get_height()\/2), ha='center', va='center',\n                       size=15, xytext=(0, 0),bbox=dict(fc=\"w\", ec=\"white\", lw=2),\n                       textcoords='offset points')\n    i += 1\nfig.tight_layout()\n_ = plt.savefig(title+'.'+img_fmt,format = img_fmt)","b2219b24":"release = df['release_year'].value_counts()\nrelease = release.sort_index(ascending=True)\n\ntitle = 'Number of videos released in each year'\n_ = plt.figure(figsize=(8,6))\n_ = plt.plot(release[-11:-1])\n_ = plt.scatter(release[-11:-1].index, release[-11:-1].values, s=0.5*release[-11:-1].values, c='orange');\n_ = plt.box(on=None);\n_ = plt.xticks(rotation = 60)\n_ = plt.xticks(release[-11:-1].index);\n_ = plt.title(title, color='blue', fontsize=25);\n_ = plt.savefig(title+'.'+img_fmt,format = img_fmt)","f1f53011":"rating = df['rating'].value_counts()\n#rating = rating.sort_values()\n\ntitle = 'Number of videos grouped by rating'\n_ = plt.figure(figsize=(9,6));\n_ = plt.title(title, color='blue', fontsize=15)\nplots = sns.barplot(y=rating.values[:10], x=rating.index[:10], palette='gnuplot',orient='v');\nfor bar in plots.patches:\n    _ = plots.annotate(format(bar.get_height()\/rating.sum()*100, '.0f')+'%', \n                   (bar.get_x() + bar.get_width() \/ 2, \n                    bar.get_height() - (bar.get_height()-3.1)\/2), ha='center', va='center',\n                   size=15, xytext=(0, 0),bbox=dict(boxstyle=\"round4,pad=0.6\", fc=\"w\", ec=\"black\", lw=2),\n                   textcoords='offset points')\n_ = plt.box(on=None)\n_ = plt.xlabel('Ratings')\n_ = plt.xticks(rotation = 60)\n_ = plt.ylabel('Number of videos')\n_ = plt.savefig(title+'.'+img_fmt,format = img_fmt)","688704d3":"country_rating = df.groupby(['country', 'rating']).count().sort_values('show_id', ascending=False).reset_index()\ncountry_rating['country_and_rating'] = country_rating[['country','rating']].apply(axis=1,func = lambda x : str(x.country)+'--'+str(x.rating))\ncountry_rating.set_index(keys = 'country_and_rating', inplace = True)\n\ntitle = 'Most Popular Programmes by Country & Rating'\n_ = plt.figure(figsize=(12,10), dpi = 50)\nplots = sns.barplot(y=country_rating.index[:20], x = country_rating['show_id'][:20]);\n_ = plt.box(on=None)\n_ = plt.title(title, fontsize=25, color='blue')\n_ = plt.xlabel('Number of Programmes');\n_ = plt.savefig(title+'.'+img_fmt,format = img_fmt)","84fcf98c":"movie = df.copy()\nmovie = movie[movie['type'] == 'Movie']\n\nmovie['minute'] = [int(re.findall('\\d{1,3}', w)[0]) for w in movie.duration.ravel()]\n\nduration_rating = movie.groupby(['rating']).mean().sort_values('minute')\ntitle = 'Average run time of the videos in each Rating'\n_ = plt.figure(figsize=(15,6))\nplots = sns.barplot(x=duration_rating.index, y=duration_rating.minute.values, palette='gnuplot_r')\nfor bar in plots.patches:\n    _ = plots.annotate(format(bar.get_height(), '.0f'), \n                   (bar.get_x() + bar.get_width() \/ 2, \n                    bar.get_height() - (bar.get_height()-3.1)\/2), ha='center', va='center',\n                   size=15, xytext=(0, 0),bbox=dict(boxstyle=\"round4,pad=0.6\", fc=\"w\", ec=\"black\", lw=2),\n                   textcoords='offset points')\n_ = plt.box(on=None)\n_ = plt.title(title, fontsize = 20, color = 'blue')\n_ = plt.xlabel('Movie Rating')\n_ = plt.xticks(rotation = 45)\n_ = plt.ylabel('Average movie duration in minutes')\n_ = plt.savefig(title+'.'+img_fmt,format = img_fmt)","92fbe0d8":"duration_year = movie.groupby(['release_year']).mean().sort_values('minute')\nduration_year = duration_year.sort_index()\n\ntitle = \"YoY Trends of Movie's Duration\"\n_ = plt.figure(figsize=(15,6))\n_ = sns.lineplot(x=duration_year.index, y=duration_year.minute.values)\n_ = plt.box(on=None)\n_ = plt.ylabel('Average movie duration in minutes');\n_ = plt.xlabel('Year of release');\n_ = plt.title(title, fontsize=20, color='blue');\n_ = plt.savefig(title+'.'+img_fmt,format = img_fmt)","1571bff9":"director_minute = movie.groupby('director').sum().sort_values('minute', ascending=False)\ntitle = 'Top 15 most Productive Movie Directors in Video Length'\n_ = plt.figure(figsize=(12,6))\n_ = sns.barplot(y=director_minute.index[:10], x=director_minute.minute[:10]);\n_ = plt.title(title, color='blue', fontsize=25)\n_ = plt.xticks(director_minute.minute[:10],rotation = 60)\n_ = plt.xlim(min(director_minute.minute[:10])\/10*9.9,max(director_minute.minute[:10])\/10*10.1)\n_ = plt.box(on=None)\nplt.xlabel('Length of Total Movies Released in Minutes');\n_ = plt.savefig(title+'.'+img_fmt,format = img_fmt)","9c013e95":"title = 'Top 10 most Productive Directors'\n_ = plt.figure(figsize=(18,8))\n_ = sns.barplot(y=movie.director.value_counts()[:10].sort_values().index, x=movie.director.value_counts()[:10].sort_values().values);\n_ = plt.title(title, color='blue', fontsize=25)\n_ = plt.box(on=None)\n_ = plt.xticks(movie.director.value_counts()[:10].sort_values().values);\n_ = plt.xlim(min(movie.director.value_counts()[:10])-1,max(movie.director.value_counts()[:10])+1)\nplt.xlabel('Count of Total Movies Released');\n_ = plt.savefig(title+'.'+img_fmt,format = img_fmt)","7cdb8107":"title = 'Directors with most movie credits in top 6 countries'\ndf_country = pd.DataFrame()\nfig, ax = plt.subplots(nrows = 2, ncols = 3, figsize = (30,12), sharex = True)\n_ = fig.suptitle(title, fontsize = 35, color = 'blue')\ni,j = 0,0\nn_countries = 6\nn_directors = 5\nfor country in df_countries.tail(n_countries).country.values[::-1]:\n    t_df = df[df.country == country].groupby(['director','country'], sort = False).count().sort_values('release_year')[-n_directors:][::-1].reset_index()\n    plots = sns.barplot(data=t_df,y = 'director', x = 'release_year', ax =ax[i,j])\n    for bar in plots.patches:\n        _ = plots.annotate(format(bar.get_width(), '.0f'), \n               (bar.get_width()\/2, \n                bar.get_y() + bar.get_height() \/ 2), ha='center', va='center',\n               size=15, xytext=(0, 0),bbox=dict(boxstyle=\"round4,pad=1\", fc=\"w\", ec=\"black\", lw=2),\n               textcoords='offset points')\n    _ = ax[i,j].set_xticks([])\n    _ = ax[i,j].set_title(country,fontsize=30)\n    _ = ax[i,j].set_xlabel('')\n    _ = ax[i,j].set_ylabel('')\n    df_country = df_country.append(t_df)\n    j += 1\n    if j> n_countries\/2-1:\n        j = 0\n        i = 1\nfig.tight_layout()\nplt.savefig(title+'.'+img_fmt, format = img_fmt)","72937bd1":"df_data_added = df[df.date_added >'2008-01-01'].groupby([df.date_added.dt.year,df.type,df.rating]).count().show_id.reset_index()\ntitle = 'Number of content added in each year'\ng = sns.relplot(data = df_data_added, x = 'date_added', y = 'show_id', col = 'type', hue ='rating',kind = 'line', markers = True,aspect = 0.9, height = 5)\n_ = g.axes[0,0].set_ylabel('Number of videos added')\n_ = g.fig.suptitle(title, color = 'blue',fontsize = 20)\n_ = g.fig.subplots_adjust(top=0.85)\n_ = plt.savefig(title+'.'+img_fmt,format = img_fmt)","36fdc53f":"#mapping the multiple value cells into list type\ndf['directors'] = df['director'].apply(lambda l: [] if pd.isna(l) else [i.strip().replace(\" \",\"_\") for i in l.split(\",\")])\ndf['genres'] = df['listed_in'].apply(lambda l: [] if pd.isna(l) else [i.strip().replace(\" \",\"_\") for i in l.split(\",\")])\ndf['actors'] = df['cast'].apply(lambda l: [] if pd.isna(l) else [i.strip().replace(\" \",\"_\") for i in l.split(\",\")])\ndf['countries'] = df['country'].apply(lambda l: [] if pd.isna(l) else [i.strip().replace(\" \",\"_\") for i in l.split(\",\")])\ndf['all_features'] = df['directors'] + df['genres'] + df['actors'] + df['countries']\ndf['all_features'] = df['all_features'].apply(lambda x: \" \".join(x))","20911489":"import nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nimport string\nnltk.download('stopwords')\nnltk.download('wordnet')","ae5c230b":"def text_cleanser(text):\n    stemmer = WordNetLemmatizer()\n    text = ''.join([char for char in text if (char.isalpha() or char.isspace()) and char !=\"'\"])\n    text = [word.lower() for word in text.split() if word.lower() not in stopwords.words('english')]\n    return [stemmer.lemmatize(word) for word in text]\nsample_text = \"Hello! This is me. I need to verify whether this sentence is working correctly.\"\nprint(text_cleanser(sample_text))","42dcc1f2":"df_desc = df[['show_id','description']].set_index('show_id')\ndf_desc['trunc_desc'] = df_desc['description'].apply(lambda x : text_cleanser(x))","c82a484b":"vocabulary = {}\nfor words in df_desc.trunc_desc:\n    for word in words:\n        if word in vocabulary:\n            vocabulary[word] = vocabulary[word] + 1\n        else:\n            vocabulary[word] = 1\ndf_voc = pd.DataFrame(list(vocabulary.items()),columns = ['text','count'])","efb9a20d":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nfrom PIL import Image\n\ntext = df_voc.sort_values(ascending=False, by ='count')[:20].text.values\nplt.rcParams['figure.figsize'] = (13, 13)\n\n#assigning shape to the word cloud\nmask = np.array(Image.open('..\/input\/awesome-wordcloud-masks\/Awards\/trophy.png'))\nwordcloud = WordCloud(max_words=1000000,background_color=\"white\",mask=mask).generate(str(text))\n\nplt.imshow(wordcloud,interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.title('Top key terms in the movie description')\nplt.show()","64374e0c":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nbow_transformer = CountVectorizer(analyzer = text_cleanser).fit(df_desc['description'])\ndesc_bow = bow_transformer.transform(df_desc['description'])\nprint('Shape of the generated matrix : ',desc_bow.shape)\nsparsity = desc_bow.nnz\/(desc_bow.shape[0]*desc_bow.shape[1])*100.0\nprint('Sparsity of the generated matrix',round(sparsity,4))","f5278867":"df.head()","b1416f82":"# Finding TF and IDF metrics\nvector = TfidfVectorizer(max_df=1.4, min_df=1,strip_accents = 'ascii', stop_words='english',lowercase=True,use_idf=True,norm=u'l2',smooth_idf=True)\ntfidf = vector.fit_transform(df.all_features)","56152dac":"# Cluster the description data using MiniBatchKMeans\nfrom sklearn.cluster import MiniBatchKMeans\nfrom sklearn.metrics.pairwise import linear_kernel\n#setting the no. of resulting clusters for kmeans\nk = 400\nkmeans = MiniBatchKMeans(n_clusters = k, init = 'k-means++')\nkmeans.fit(tfidf)\ncenters = kmeans.cluster_centers_.argsort()[:,::-1]\nterms = vector.get_feature_names()\nrequest_transform = vector.transform(df['all_features'])\n# new column cluster based on the description\ndf['cluster'] = kmeans.predict(request_transform) ","b8e92122":"def find_similar_movies(tfidf_matrix, index, top_n = 5):\n    cosine_similarities = linear_kernel(tfidf_matrix[index:index+1], tfidf_matrix).flatten()\n    related_docs_indices = [i for i in cosine_similarities.argsort()[::-1] if i != index]\n    return [index for index in related_docs_indices][0:top_n]  ","b4a193cc":"for ind in find_similar_movies(tfidf,0,5):\n    print(df.loc[ind].title)","5b86e688":"G = nx.Graph(label=\"MOVIE\")\nstart_time = time.time()\nfor i, rowi in df.iterrows():\n    G.add_node(rowi['title'],key=rowi['show_id'],label=\"MOVIE\",mtype=rowi['type'],rating=rowi['rating'])\n    for element in rowi['actors']:\n        G.add_node(element,label=\"PERSON\")\n        G.add_edge(rowi['title'], element, label=\"ACTED_IN\")\n    for element in rowi['genres']:\n        G.add_node(element,label=\"GENRE\")\n        G.add_edge(rowi['title'], element, label=\"GENRE_IN\")\n    for element in rowi['directors']:\n        G.add_node(element,label=\"PERSON\")\n        G.add_edge(rowi['title'], element, label=\"DIRECTED\")\n    for element in rowi['countries']:\n        G.add_node(element,label=\"COU\")\n        G.add_edge(rowi['title'], element, label=\"COU_IN\")\n    \n    indices = find_similar_movies(tfidf, i, top_n = 3)\n    snode=\"Sim(\"+rowi['title'][:15].strip()+\")\"        \n    G.add_node(snode,label=\"SIMILAR\")\n    G.add_edge(rowi['title'], snode, label=\"SIMILARITY\")\n    for element in indices:\n        G.add_edge(snode, df['title'].loc[element], label=\"SIMILARITY\")\nprint(\" finish -- {} seconds --\".format(time.time() - start_time))    ","dea5393d":"def get_all_adj_nodes(list_in):\n    sub_graph=set()\n    for m in list_in:\n        sub_graph.add(m)\n        for e in G.neighbors(m):        \n                sub_graph.add(e)\n    return list(sub_graph)\ndef draw_sub_graph(sub_graph, title = \"\"):\n    subgraph = G.subgraph(sub_graph)\n    colors=[]\n    sizes = []\n    std_size = 500\n    for e in subgraph.nodes():\n        if G.nodes[e]['label']==\"MOVIE\":\n            colors.append('#b3042c')\n            sizes.append(std_size*5)\n        elif G.nodes[e]['label']==\"PERSON\":\n            colors.append('#047d59')\n            sizes.append(std_size*2.5)\n        elif G.nodes[e]['label']==\"GENRE\":\n            colors.append('#3a018a')\n            sizes.append(std_size)\n        elif G.nodes[e]['label']==\"COU\":\n            colors.append('#bd3102')\n            sizes.append(std_size*0.9)\n        elif G.nodes[e]['label']==\"SIMILAR\":\n            colors.append('#b87906')\n            sizes.append(std_size)\n        elif G.nodes[e]['label']==\"CLUSTER\":\n            colors.append('#cdf7e9')\n            sizes.append(std_size*0.9)\n    fig, ax = plt.subplots(figsize = (18,18))\n    nx.draw(subgraph, with_labels=True, alpha = 0.8, node_shape = 'o' ,node_size = sizes,cmap = 'Accent', edge_color = 'white',font_color = 'white',font_weight='bold',node_color=colors)    \n    #plt.title('Recommendations after watching The video '+title+' :-')\n    ax.set_title('Recommendations after watching The video '+title+' :-', color='white', size = 30)\n    ax.axis('off')\n    fig.set_facecolor('#44495c')\n    plt.tight_layout()\n    plt.show()","a4b58f1d":"def get_recommendation(root):\n    commons_dict = {}\n    for e in G.neighbors(root):           \n        for e2 in G.neighbors(e):\n            if e2==root:\n                continue\n            if G.nodes[e2]['label']==\"MOVIE\":\n                commons = commons_dict.get(e2)\n                if commons==None:\n                    commons_dict.update({e2 : [e]})\n                else:\n                    commons.append(e)\n                    commons_dict.update({e2 : commons})\n    movies=[]\n    weight=[]\n    for key, values in commons_dict.items():\n        w=0.0\n        for e in values:\n            w=w+1\/math.log(G.degree(e))\n        movies.append(key) \n        weight.append(w)\n    \n    result = pd.Series(data=np.array(weight),index=movies)\n    result.sort_values(inplace=True,ascending=False)        \n    return result","d51a6906":"Movie=\"Dark\"\nrecommendation = get_recommendation(Movie)\nrel_graph = get_all_adj_nodes([Movie]+list(recommendation.index[:2]))\ndraw_sub_graph(rel_graph,Movie)","1da17e3d":"Movie=\"1922\"\nrecommendation = get_recommendation(Movie)\nrel_graph = get_all_adj_nodes([Movie]+list(recommendation.index[:2]))\ndraw_sub_graph(rel_graph,Movie)","91fb2aac":"<div style=\"color:#001724;\n           display:fill;\n           border-radius:50px;\n            border-style: solid;\n            padding: 25px 25px;\n           border-width: 15px;\n            border-color:#001724;\n           background-color:#d0e7f5;\n           letter-spacing:1.1px;\n            font-family:'Futura';\n            line-height: 1.7em;\n            font-size:1.3em;\">\n    <h3 style = \"line-height:1.3;\">More than 70% videos are TV rated with TV-MA amounting for the most.<\/h3>\n<\/div>","204b18ae":"## Recommendation after watching the movie 'Dark'","b6e44874":"<div style=\"color:#001724;\n           display:fill;\n           border-radius:50px;\n            border-style: solid;\n            padding: 25px 25px;\n           border-width: 15px;\n            border-color:#001724;\n           background-color:#d0e7f5;\n           letter-spacing:1.1px;\n            font-family:'Futura';\n            line-height: 1.7em;\n            font-size:1.3em;\">\n    <h3 style = \"line-height:1.3;\">Top 10 video contents by its type and rating is listed here. We can say that TV rating video contents are more prevalent in Netflix and R rated videos are all movie contents<\/h3>\n<\/div>","6a6558b0":"<div style=\"color:#001724;\n           display:fill;\n           border-radius:50px;\n            border-style: solid;\n            padding: 25px 25px;\n           border-width: 15px;\n            border-color:#001724;\n           background-color:#d0e7f5;\n           letter-spacing:1.1px;\n            font-family:'Futura';\n            line-height: 1.7em;\n            font-size:1.3em;\">\n    <h3 style = \"line-height:1.3;\">United states tops the productivity count with a huge margin nearly thrice the movie contents presented from the second best India.<\/h3>\n<\/div>","5846600e":"## Movies by Rating","97adc020":"# Movie's Duration Trends","c1930572":"<div style=\"color:#001724;\n           display:fill;\n           border-radius:50px;\n            border-style: solid;\n            padding: 25px 25px;\n           border-width: 15px;\n            border-color:#001724;\n           background-color:#d0e7f5;\n           letter-spacing:1.1px;\n            font-family:'Futura';\n            line-height: 1.7em;\n            font-size:1.3em;\">\n    <h3 style = \"line-height:1.3;\">The number of video uploads per year remains steady for past 4 years in all the top 3 countries except the considerable increase during the year 2017<\/h3>\n<\/div>","b8adff9c":"# Clustering :-","b2eb2b62":"# Exploratory Data Analysis\n## Content type on Netflix","6a6a22c2":"# Number of programmes by Rating","fe260435":"<div style=\"color:#001724;\n           display:fill;\n           border-radius:50px;\n            border-style: solid;\n            padding: 25px 25px;\n           border-width: 15px;\n            border-color:#001724;\n           background-color:#d0e7f5;\n           letter-spacing:1.1px;\n            font-family:'Futura';\n            line-height: 1.7em;\n            font-size:1.3em;\">\n    <h3 style = \"line-height:1.5;\"><b>TV Shows and Movies listed on Netflix<\/b><\/h3>\n    <h4 style = \"line-height:1.3;\">\nThis dataset consists of tv shows and movies available on Netflix as of 2019. The dataset is collected from Flixable which is a third-party Netflix search engine.\n\nIn 2018, they released an interesting report which shows that the number of TV shows on Netflix has nearly tripled since 2010. The streaming service\u2019s number of movies has decreased by more than 2,000 titles since 2010, while its number of TV shows has nearly tripled. It will be interesting to explore what all other insights can be obtained from the same dataset.\n\nIntegrating this dataset with other external datasets such as IMDB ratings, rotten tomatoes can also provide many interesting findings.<\/h4>\n<h2><b>Motivation<\/b><\/h2>\n<h3>Tasks which can be performed on this dataset -<\/h3>\n<ul>\n    <li>Understanding what content is available in different countries<\/li>\n    <li>Identifying similar content by matching text-based features<\/li>\n    <li>Network analysis of Actors \/ Directors and find interesting insights<\/li>\n    <li>Is Netflix has increasingly focusing on TV rather than movies in recent years?<\/li>\n<\/ul>\n<\/div>","c929907d":"<div style=\"color:#001724;\n           display:fill;\n           border-radius:50px;\n            border-style: solid;\n            padding: 25px 25px;\n           border-width: 15px;\n            border-color:#001724;\n           background-color:#d0e7f5;\n           letter-spacing:1.1px;\n            font-family:'Futura';\n            line-height: 1.7em;\n            font-size:1.3em;\">\n    <h3 style = \"line-height:1.3;\">Raul Campos and Jan Sutler have been credited as Directors in the record 18 videos 3 more than the second best. <\/h3>\n<\/div>","9063f1a3":"# The Most Productive Director by number of movies produced","55f030cc":"## Recommendation after watching the movie '1922'","b325928e":"<div style=\"color:#001724;\n           display:fill;\n           border-radius:50px;\n            border-style: solid;\n            padding: 25px 25px;\n           border-width: 15px;\n            border-color:#001724;\n           background-color:#d0e7f5;\n           letter-spacing:1.1px;\n            font-family:'Futura';\n            line-height: 1.7em;\n            font-size:1.3em;\">\n    <h2 style = \"line-height:1.3;\">Method get_recommendation:<\/h2>\n    <ul>\n    <li>Fetch all the neighbor nodes for the given movie.<\/li>\n    <li>Collect all the related movies in a dictionary<\/li>\n    <li>Order the all related movies based on its weights(degrees - number neighbours that a particular node has)<\/li>\n    <li>Top N related movies will be recommended for a given movie<\/li>\n<\/ul>\n<\/div>\n","5307ff57":"<div style=\"color:#001724;\n           display:fill;\n           border-radius:50px;\n            border-style: solid;\n            padding: 25px 25px;\n           border-width: 15px;\n            border-color:#001724;\n           background-color:#d0e7f5;\n           letter-spacing:1.1px;\n            font-family:'Futura';\n            line-height: 1.7em;\n            font-size:1.3em;\">\n    <h3 style = \"line-height:1.3;\">Although Raul Campos produced more Movies, Martin Scorcece still outperform Raul in terms of the total duration of the movies <\/h3>\n<\/div>","0f52ad61":"# Director's Productivity by Total Minutes of Movies Produced","90e78659":"# Most Popular Programmes by Country & Rating","608a6a54":"<div style=\"color:#001724;\n           display:fill;\n           border-radius:50px;\n            border-style: solid;\n            padding: 25px 25px;\n           border-width: 15px;\n            border-color:#001724;\n           background-color:#d0e7f5;\n           letter-spacing:1.1px;\n            font-family:'Futura';\n            line-height: 1.7em;\n            font-size:1.3em;\">\n    <h3 style = \"line-height:1.3;\">A Similar chart as we have seen before but with a additional dimension country is added to it. TV rated content accounts for the most as before. One interesting insight that we can grab is TV-MA is most popular than TV-14 in States and its a vice versa in India.<\/h3>\n<\/div>","7143cac9":"# Recommendation System :-\n<div style=\"color:#001724;\n           display:fill;\n           border-radius:50px;\n            border-style: solid;\n            padding: 25px 25px;\n           border-width: 15px;\n            border-color:#001724;\n           background-color:#d0e7f5;\n           letter-spacing:1.1px;\n            font-family:'Futura';\n            line-height: 1.7em;\n            font-size:1.3em;\">\n    <h4 style = \"line-height:1.3;\">Collaborative filtering is used here to build the recommendation system. The System will be primarily based on the user opinions<\/h4>\n<\/div>","7b760342":"# Netflix Movies and TV Shows\n<div style=\"color:#140033;\n           display:fill;\n           border-radius:15px;\n            border-style: solid;\n           border-width: 15px;\n            border-color:#f0e6ff;\n           background-color:#f0e6ff;\n           letter-spacing:0.75px;\n            font-family:'Futura';\n            line-height: 1.7em;\n            font-size:1.3em;\">\n    \n<h2><b>Context<\/b><\/h2><h4 style = \"line-height:1.3;\">\n    This notebook deals with <a href = 'https:\/\/www.kaggle.com\/shivamb\/netflix-shows'>Netflix movies and TV shows<\/a> data which focuses on Exploratory data analysis. I tried to implement movie recommendation system using Cosine Similarity. Your feedbacks and appreciations are welcome.<\/h4>\n\n<\/div>\n","f5c7a829":"# Identifying similar content by matching text-based features","8f26f002":"# Recommendation System :-\n<div style=\"color:#001724;\n           display:fill;\n           border-radius:50px;\n            border-style: solid;\n            padding: 25px 25px;\n           border-width: 15px;\n            border-color:#001724;\n           background-color:#d0e7f5;\n           letter-spacing:1.1px;\n            font-family:'Futura';\n            line-height: 1.7em;\n            font-size:1.3em;\">\n    <h2 style = \"line-height:1.3;\">Graph preparation<\/h2>\n    <ul>\n    <li>Insert all the notable parameters like castings,genre and directors as nodes in the graph.<\/li>\n    <li>use <i>find_similar_movies()<\/i> method to fetch the n related movies for the given node <\/li>\n    <li>Connect the all the related movie nodes with the selected movie with an edge names '<i>SIMILAR<\/i>'<\/li>\n<\/ul>    \n<\/div>","f71b8741":"## Converting the multi value columns from the type String to List","8397b23f":"# Analysis on Movie Programmes","397ea6e7":"<div style=\"color:#001724;\n           display:fill;\n           border-radius:50px;\n            border-style: solid;\n            padding: 25px 25px;\n           border-width: 15px;\n            border-color:#001724;\n           background-color:#d0e7f5;\n           letter-spacing:1.1px;\n            font-family:'Futura';\n            line-height: 1.7em;\n            font-size:1.3em;\">\n    <h3 style = \"line-height:1.3;\">There is an increasing trend starting from the year 2011 and the trend starts to seetle with some dip in the movies counts post 2018.\nIt shows that most number of videos got released in 2018 comparatively higher than 2019 and 2020. <\/h3>\n<\/div>","f027c950":"<div style=\"color:#001724;\n           display:fill;\n           border-radius:50px;\n            border-style: solid;\n            padding: 25px 25px;\n           border-width: 15px;\n            border-color:#001724;\n           background-color:#d0e7f5;\n           letter-spacing:1.1px;\n            font-family:'Futura';\n            line-height: 1.7em;\n            font-size:1.3em;\">\n    <h3 style = \"line-height:1.3;\">TV-MA and TV-14 accounts for the most number videos over the span of last 5 years.<\/h3>\n<\/div>","fe5bfb84":"<img src='https:\/\/raw.githubusercontent.com\/sathishkumar118\/Netflix-Movies-and-TV-shows-Data\/main\/Netflix-Wallpaper.jpg'>","d314591c":"<div style=\"color:#001724;\n           display:fill;\n           border-radius:50px;\n            border-style: solid;\n            padding: 25px 25px;\n           border-width: 15px;\n            border-color:#001724;\n           background-color:#d0e7f5;\n           letter-spacing:1.1px;\n            font-family:'Futura';\n            line-height: 1.7em;\n            font-size:1.3em;\">\n    <h3 style = \"line-height:1.3;\">The average movie's duration released during 1960 era was the longest <\/h3>\n<\/div>","64938888":"## Number of programmes released by year","97f364c6":"<div style=\"color:#001724;\n           display:fill;\n           border-radius:50px;\n            border-style: solid;\n            padding: 25px 25px;\n           border-width: 15px;\n            border-color:#001724;\n           background-color:#d0e7f5;\n           letter-spacing:1.1px;\n            font-family:'Futura';\n            line-height: 1.7em;\n            font-size:1.3em;\">\n    <h2 style = \"line-height:1.5;\"><b>Index<\/b><\/h2>\n<h2><b>Motivation<\/b><\/h2>\n<ul>\n    <li><a href = 'https:\/\/www.kaggle.com\/ssathishkumar\/netflix-data-eda-recommendation-system#Exploratory-Data-Analysis' style = \"color: #024bbf;\">Exploratory Data Analysis<\/a><\/li>\n    <li><a href = 'https:\/\/www.kaggle.com\/ssathishkumar\/netflix-data-eda-recommendation-system#Clustering-:-' style = \"color: #024bbf;\">Clustering<\/a><\/li>\n    <li><a href = 'https:\/\/www.kaggle.com\/ssathishkumar\/netflix-data-eda-recommendation-system#Recommendation-System-:-' style = \"color: #024bbf;\">Recommendation System<\/a><\/li>    \n<\/ul>\n<\/div>"}}