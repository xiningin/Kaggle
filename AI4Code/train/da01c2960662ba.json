{"cell_type":{"5aa0bb36":"code","c8ddaf15":"code","6d1c2898":"code","59593629":"code","c3ca6732":"code","a5558283":"code","09e627e0":"code","98dd663b":"code","c086def6":"code","9bd5947e":"code","6079c305":"code","1af8dd0c":"code","e65e4b7d":"code","ca04311a":"code","c78d9527":"markdown","2cbda006":"markdown","f4ef82a2":"markdown","83596bc9":"markdown","0c86a675":"markdown"},"source":{"5aa0bb36":"import pandas as pd\ndata = pd.read_csv('..\/input\/coffee-machines-rental\/coffee-machine-kaggle.csv')\ndata.describe(include='all')","c8ddaf15":"data.info()","6d1c2898":"# bad customers who have debts\nbad_mask = (data['protests'] != 0) & (data['target'] == 0)\nbad_customers_yes_debts = data.loc[bad_mask]\n# bad_customers_yes_debts.sort_values('amount due', ascending=False)\n# has 30 rows","59593629":"# good customers who have debts\ngood_customers_yes_debts = data.loc[(data['protests'] !=0) & (data['target'] == 1)]\n#good_customers_yes_debts.sort_values('amount due', ascending=False)\n#has 8 rows","c3ca6732":"# bad customers who have no debts\nbad_customers_no_debts = data.loc[(data.protests == 0) & (data.target == 0)]\n#bad_customers_no_debts.sort_values('amount due', ascending=False)\n# has 4 rows","a5558283":"# bad customers who have no debts\nbad_customers_no_debts = data.loc[(data.protests == 0) & (data.target == 0)]\n#bad_customers_no_debts.sort_values('amount due', ascending=False)\n# has 4 rows","09e627e0":"unuseful_data = pd.concat([bad_customers_no_debts, good_customers_yes_debts])\n\ndata = data.drop(index = list(unuseful_data.index))\ndata.shape","98dd663b":"# select object columns\nobj_cols = [c for c in data.select_dtypes(include='object')]\nobj_cols","c086def6":"#converting data to integers\ncity_codes, label = pd.factorize(data.city)\ndata['City'] = city_codes\n\ncomm_codes, label = pd.factorize(data.commerce)\ndata['Commerce'] = comm_codes\n\nequip_codes, label = pd.factorize(data.equipment)\ndata['Equipment'] = equip_codes\n","9bd5947e":"#viewing data converted to numbers\nint_data = data.drop(obj_cols+['target'], axis=1)\nint_data.head(10)","6079c305":"int_data.describe()","1af8dd0c":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\nX = int_data\ny = data.target.values\n\nX_train, X_test, y_train, y_test = train_test_split(X,y)\n\nmodel_rf = RandomForestClassifier()\nmodel_rf.fit(X_train, y_train)\nprediction_rf = model_rf.predict(X_test)\n\nprint('True values:       ',y_test)\nprint('forest prediction: ',prediction_rf)\nprint(f'\\nforest score: {model_rf.score(X_test, y_test)}')","e65e4b7d":"# scaling data to the range 0-1\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(int_data)\nscaled_data = pd.DataFrame(scaler.transform(int_data), columns= int_data.columns)\nscaled_data.head()","ca04311a":"#making the new scaled model\nX1 = scaled_data\n\nxtrain1, xtest1, ytrain1, ytest1 = train_test_split(X1,y)\n\ns_model_rf = RandomForestClassifier()\ns_model_rf.fit(xtrain1, ytrain1)\ns_prediction_rf = s_model_rf.predict(xtest1)\n\nprint('True values:       ',y_test)\nprint('forest prediction: ',s_prediction_rf)\nprint(f'\\nforest score: {s_model_rf.score(xtest1, ytest1)}')","c78d9527":"We are more interested in how there are bad customers with no protests or dues to pay\nand similarly, good customers with protests and dues to pay.\n\nafter further segrigation we now have 4 types of customers:\n1.  good ones with no debt\n1.  good ones WITH DEBT\n1.  bad ones with debt\n1.  bad ones WITH NO DEBT\n\nits odd to have no.2 and no.4, and their entries are rather small so I will choose to remove them.","2cbda006":"**Note:** Up untill this part, data has only been segregated into different parts by giving relevant names.","f4ef82a2":"There is no missing data.\nHowever object data needs to be converted to integer\/floats,\nlets check for cardinality.","83596bc9":"# Some of the findings:\n\n- **customers** column can be dropped since each customer is unique\n- **protests** and **amount due** column seem highly correlated\n- Most customers are from city_1 and city_2\n- More than half machine renters consume the products they make\n- Many renters are good renters which can be problematic for the model since the prediction target is not balanced","0c86a675":"Very Surprising results.\nLets scale data and see what is the result."}}