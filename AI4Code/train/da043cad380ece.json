{"cell_type":{"fe7b99f0":"code","42060573":"code","58739277":"code","dcfb8f5c":"code","ff60ed5a":"code","9ed89c5f":"code","f2a548a0":"code","c8e3caa1":"code","b5ec7183":"code","76696fe0":"code","937d5dc5":"code","dd9eaa87":"code","29d2a137":"code","f8887e95":"code","7f50b7e4":"code","73c3efb2":"code","720141f1":"code","443bf784":"code","6a04f6b3":"code","418e917e":"code","c418283a":"code","9481157e":"code","f7120771":"code","81b8ce59":"code","fb8e706c":"code","b1821016":"code","161345ec":"code","22052c5c":"code","3b4718de":"code","ba23f6e7":"code","33f6b76b":"code","6e18ae50":"code","fdab04c6":"code","be8db732":"code","b2d3db5e":"code","4b555b72":"code","47350db4":"code","2daa04c7":"code","ca414c4c":"code","e73c8603":"code","596d8910":"code","e5df0a78":"code","4845aef6":"code","f0137189":"code","3330fbf2":"code","c5c533c4":"code","7a5cdeb7":"code","b4251502":"code","322b9153":"code","3ef9630c":"code","4f068b43":"code","ea042367":"code","c1ac6f40":"code","845b6862":"code","d63ca71c":"code","08cf9bbc":"code","c3c682f3":"code","2ce5c131":"code","ee5758da":"code","9588178f":"code","223c8489":"code","9f4502f4":"code","557878cd":"code","514b6472":"code","ccdee5ac":"code","f8fa0e4c":"code","c105c432":"code","d005394b":"code","00a3a15d":"code","d9512e51":"code","cae7d081":"code","d380c8e9":"code","fe6a4354":"code","6cfdec36":"code","69414401":"code","24078d6a":"code","62a00e9b":"code","6c9955ca":"code","1903297c":"code","61dcbd4c":"code","4906a8d0":"code","3542ae25":"code","ea32ee3d":"code","e99028a3":"code","c1b3e830":"code","ecdc5df0":"code","12615eee":"code","0036624a":"code","44d6c02e":"code","296f82a6":"code","20ac7819":"markdown","e8410ba8":"markdown","c6ccba43":"markdown","8f51dbb8":"markdown","c228257e":"markdown","8df408ef":"markdown","c4284426":"markdown","bcc59abd":"markdown","7441da52":"markdown","3d48ff33":"markdown","b297206a":"markdown","69c0c79e":"markdown","a2f31e01":"markdown"},"source":{"fe7b99f0":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas_profiling\nimport warnings\n\nwarnings.simplefilter('ignore')\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","42060573":"from sklearn import (ensemble, \n                     preprocessing, \n                     tree)\n\nfrom sklearn.metrics import (auc, \n                             confusion_matrix, \n                             roc_auc_score,\n                             roc_curve)\n\nfrom sklearn.model_selection import (train_test_split,\n                                    StratifiedKFold)\n\nfrom yellowbrick.classifier import (ConfusionMatrix, \n                                    ROCAUC)\n\nfrom yellowbrick.model_selection import (LearningCurve)","58739277":"dataset_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndataset_train.head()","dcfb8f5c":"dataset_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndataset_test.head()","ff60ed5a":"dataset_train['Pclass'].value_counts()","9ed89c5f":"dataset_train['SibSp'].value_counts()","f2a548a0":"dataset_train['Parch'].value_counts()","c8e3caa1":"dataset_train['Embarked'].value_counts()","b5ec7183":"dataset_train['Survived'].value_counts()","76696fe0":"dataset_train.info()","937d5dc5":"#pandas_profiling.ProfileReport(dataset_train)","dd9eaa87":"dataset_train.describe().iloc[:, :2]","29d2a137":"dataset_train.isnull().sum(axis = 1).loc[:10]","f8887e95":"dataset_train.loc[5,:]","7f50b7e4":"mask = dataset_train.isnull().any(axis = 1)\nmask.head(10) # lines","73c3efb2":"dataset_train[mask].head()","720141f1":"dataset_train['Sex'].value_counts(dropna=False)","443bf784":"dataset_train['Embarked'].value_counts(dropna = False)","6a04f6b3":"dataset_train = dataset_train.drop(columns = ['Name', 'Ticket', 'Cabin'])","418e917e":"dataset_train = pd.get_dummies(dataset_train)\ndataset_train.columns","c418283a":"dataset_train = dataset_train.drop(columns = 'Sex_female')","9481157e":"dataset_train = pd.get_dummies(dataset_train)\ndataset_train.columns","f7120771":"dataset_survived_female = dataset_train.query(\"Survived == 1 and Sex_male == 0\")\ndataset_survived_male = dataset_train.query(\"Survived == 1 and Sex_male == 1\")\ndataset_survived_female.shape, dataset_survived_male.shape","81b8ce59":"dataset_survived_female['Age'].hist();","fb8e706c":"dataset_survived_female['Pclass'].hist(); ","b1821016":"dataset_survived_male['Age'].hist();","161345ec":"dataset_survived_male['Pclass'].hist();","22052c5c":"f, ax = plt.subplots(figsize = (20,20))\nsns.heatmap(dataset_train.corr(), annot = True);","3b4718de":"dataset_train.columns","ba23f6e7":"#dataset_train['feature_weights'] = 0 \n#dataset_train.loc[(dataset_train.Survived == 1) & (dataset_train.Sex_male == 0) & (dataset_train.Age <= 5), 'feature_weights'] = 0.1\n#dataset_train.loc[(dataset_train.Survived == 1) & (dataset_train.Sex_male == 1) & (dataset_train.Age <= 5), 'feature_weights'] = 0.1\n#dataset_train.loc[(dataset_train.Survived == 1) & (dataset_train.Sex_male == 0) & (dataset_train.Age.between(14, 41)), 'feature_weights'] = 0.1\n#dataset_train.loc[(dataset_train.Survived == 1) & (dataset_train.Sex_male == 1) & (dataset_train.Age.between(24, 31)), 'feature_weights'] = 0.1\n#dataset_train","33f6b76b":"x = dataset_train.drop(columns = ['Survived', 'PassengerId', 'Pclass','Embarked_C'])\ny = dataset_train['Survived']","6e18ae50":"x_train, x_test, y_train, y_test = train_test_split(x, \n                                                    y, \n                                                    test_size = 0.3, \n                                                    random_state = 42)","fdab04c6":"from sklearn.experimental import (\n    enable_iterative_imputer,\n)","be8db732":"from sklearn import impute","b2d3db5e":"num_cols = [\n    \"Age\",\n    \"SibSp\",\n    \"Parch\",\n    \"Fare\",\n]","4b555b72":"imputer = impute.IterativeImputer()\nimputed = imputer.fit_transform(x_train[num_cols])","47350db4":"x_train.loc[:, num_cols] = imputed;\n\nimputed = imputer.transform(x_test[num_cols]);\nx_test.loc[:, num_cols] = imputed;","2daa04c7":"meds = x_train.median();\nx_train = x_train.fillna(meds);\nx_test = x_test.fillna(meds);","ca414c4c":"cols = \"Age,SibSp,Parch,Fare\".split(\",\")\nx_train = x_train[cols]\nx_test = x_test[cols]\nsca = preprocessing.StandardScaler()\nx_train = sca.fit_transform(x_train)\nx_train = pd.DataFrame(x_train, columns = cols)\nx_test = sca.transform(x_test)\nx_test = pd.DataFrame(x_test, columns = cols);","e73c8603":"def tweak_titanic(dataset, columns):\n    dataset = dataset.drop(columns = columns).pipe(pd.get_dummies);\n    return dataset;","596d8910":"def get_train_test(dataset,\n                  y_col,\n                  size = 0.3,\n                  std_cols = None):\n    \n    y = dataset[y_col];\n    x = dataset.drop(columns = y_col);\n    x_train, x_test, y_train, y_test = train_test_split(x,\n                                                        y, \n                                                        test_size = size,\n                                                        random_state = 42);\n    cols = x.columns;\n    num_cols = [\n        \"Age\",\n        \"SibSp\",\n        \"Parch\",\n        \"Fare\",\n    ];\n    \n    fit = impute.IterativeImputer();\n    x_train.loc[:, num_cols] = fit.fit_transform(x_train[num_cols]);\n    x_test.loc[:, num_cols] = fit.transform(x_test[num_cols]);\n    \n    if std_cols:\n        std = preprocessing.StandardScaler();\n        \n        x_train.loc[:, std_cols] = std.fit_transform(x_train[std_cols]);\n        x_test.loc[:, std_cols] = std.transform(x_test[std_cols]);\n        \n    return x_train, x_test, y_train, y_test;","e5df0a78":"def imput_value(x, y_col=None):\n    num_cols = [\n        \"Age\",\n        \"SibSp\",\n        \"Parch\",\n        \"Fare\",\n    ];\n    \n    if y_col:\n        x = x.drop(columns = y_col);\n    \n    fit = impute.IterativeImputer();\n    x.loc[:, num_cols] = fit.fit_transform(x[num_cols]);\n    return x;","4845aef6":"dataset_train.shape, dataset_test.shape","f0137189":"dataset_train = tweak_titanic(dataset_train, ['PassengerId', 'Pclass', 'Embarked_C']);\n\nstd_cols = \"Age,SibSp,Parch,Fare\".split(\",\");\nx_train, x_test, y_train, y_test = get_train_test(dataset_train, \"Survived\", std_cols = std_cols);","3330fbf2":"from sklearn.dummy import DummyClassifier","c5c533c4":"bm = DummyClassifier()\nbm.fit(x_train, y_train)\nbm.score(x_test, y_test)","7a5cdeb7":"from sklearn import metrics","b4251502":"metrics.precision_score(y_test, bm.predict(x_test))","322b9153":"x = pd.concat([x_train, x_test])\ny = pd.concat([y_train, y_test])","3ef9630c":"from sklearn import model_selection\nfrom sklearn.dummy import DummyClassifier\nfrom sklearn.linear_model import (LogisticRegression,)\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import (KNeighborsClassifier,)\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import (RandomForestClassifier,)\nfrom sklearn.svm import SVC\nimport xgboost","4f068b43":"results = [];\nmodels = [];\nnr_models = [];\ncount = 1;\nfor model in [DummyClassifier,\n             LogisticRegression,\n             DecisionTreeClassifier,\n             KNeighborsClassifier,\n             GaussianNB,\n             SVC,\n             RandomForestClassifier,\n             xgboost.XGBClassifier,]:\n    \n    cls = model();\n    kfold = model_selection.KFold(n_splits = 10, random_state = 42)\n    s = model_selection.cross_val_score(cls, x, y, scoring = \"roc_auc\", cv = kfold)\n    results.append(s)\n    models.append(cls)\n    nr_models.append(count);\n    print('>%s %.3f (%.3f)' % (str(count) + \" - \" + str(model), np.mean(s), np.std(s)))\n    count = count + 1;\n    ","ea042367":"plt.figure(figsize=(20,10))\nplt.boxplot(results, labels=nr_models, showmeans=True)\nplt.show()","c1ac6f40":"model_rfc = RandomForestClassifier(criterion = 'entropy',\n                              n_estimators = 200,\n                              max_depth = 10, \n                              n_jobs = 10,\n                              random_state = 42)\nmodel_rfc.fit(x_train, y_train);","845b6862":"model_rfc.score(x_test, y_test)","d63ca71c":"for col, val in sorted(zip(x_train.columns, model_rfc.feature_importances_,), key=lambda x: x[1], reverse = True,)[:5]:\n    print(f\"{col:10}{val:10.3f}\")","08cf9bbc":"model_rfc_v2 = RandomForestClassifier()\n\nparams = {\n    'max_features': [0.2, 0.4, 0.6, 'auto', 'sqrt', 'log2'],\n    'criterion': ['gini', 'entropy'],\n    'n_estimators': [15, 100, 200, 300, 400],\n    'min_samples_leaf': [1.5, 1.0, 0.1, 0.2, 0.3],\n    'max_depth': [2, 3, 4, 5, 6],\n    'random_state': [42],\n}\n\ncv = model_selection.GridSearchCV(model_rfc_v2,\n                                 params, \n                                 n_jobs = -1).fit(x_train, y_train)\n\nprint(cv.best_params_)","c3c682f3":"model_rfc_v3 = RandomForestClassifier(**{\n    'criterion': 'gini', \n    'max_depth': 3, \n    'max_features': 0.4, \n    'min_samples_leaf': 0.1, \n    'n_estimators': 100, \n    'random_state': 42}\n)\n\nmodel_rfc_v3.fit(x_train, y_train)\nmodel_rfc_v3.score(x_test, y_test)","2ce5c131":"from sklearn.metrics import confusion_matrix\ny_pred = model_rfc_v3.predict(x_test)\nconfusion_matrix(y_test, y_pred)","ee5758da":"mapping = {0: 'died', 1: 'survived'}\n\nfig, ax = plt.subplots(figsize = (6,6))\ncm_viz = ConfusionMatrix(\n    model_rfc_v3,\n    classes=['died', 'survived'],\n    label_encoder = mapping,\n)\n\ncm_viz.score(x_test, y_test)\ncm_viz.poof();","9588178f":"y_pred = model_rfc_v3.predict(x_test)\nroc_auc_score(y_test, y_pred)","223c8489":"ns_probs = [0 for _ in range(len(y_test))]\n# predict probabilities\nlr_probs = model_rfc_v3.predict_proba(x_test)\n# keep probabilities for the positive outcome only\nlr_probs = lr_probs[:, 1]\n# calculate scores\nns_auc = roc_auc_score(y_test, ns_probs)\nlr_auc = roc_auc_score(y_test, lr_probs)\n# summarize scores\nprint('No Skill: ROC AUC=%.3f' % (ns_auc))\nprint('RandomForestClassifier: ROC AUC=%.3f' % (lr_auc))\n# calculate roc curves\nns_fpr, ns_tpr, _ = roc_curve(y_test, ns_probs)\nlr_fpr, lr_tpr, _ = roc_curve(y_test, lr_probs)\n# plot the roc curve for the model\nplt.plot(ns_fpr, ns_tpr, linestyle='--', label='No Skill')\nplt.plot(lr_fpr, lr_tpr, marker='.', label='RandomForestClassifier')\n# axis labels\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\n# show the legend\nplt.legend()\n# show the plot\nplt.show();","9f4502f4":"visualizer = ROCAUC(model_rfc_v3, classes=[\"win\", \"loss\", \"draw\"])\n\nvisualizer.fit(x_train, y_train)\nvisualizer.score(x_test, y_test)\nvisualizer.show();  ","557878cd":"fig, ax = plt.subplots(figsize = (6,6))\ncv = StratifiedKFold(12)\nsizes = np.linspace(0.3,1.0,10)\nlc_viz = LearningCurve(\n    model_rfc_v3,\n    cv = cv,\n    train_sizes = sizes,\n    scoring = \"f1_weighted\",\n    n_jobs = 4,\n    ax = ax,\n)\n\nlc_viz.fit(x, y);\nlc_viz.poof();","514b6472":"model_xgboost = xgboost.XGBClassifier(learning_rate=0.01, \n                                      n_estimators=500, \n                                      max_depth=4,\n                                      min_child_weight=5, \n                                      gamma=0.2, \n                                      subsample=0.3, \n                                      colsample_bytree=1.0,\n                                      objective='binary:logistic', \n                                      nthread=4, \n                                      scale_pos_weight=2, \n                                      seed=42)\n\nresult_xgboost = model_selection.cross_val_score(estimator = model_xgboost,\n                                                X = x, \n                                                y = y,\n                                                cv = 10,\n                                                scoring = 'accuracy');","ccdee5ac":"mean = result_xgboost.mean()\nmean","f8fa0e4c":"std = result_xgboost.std()\nstd","c105c432":"model_xgboost.fit(x_train, y_train, eval_metric='auc')","d005394b":"model_xgboost.score(x_test, y_test)","00a3a15d":"visualizer = ROCAUC(model_xgboost, classes=[\"win\", \"loss\", \"draw\"])\n\nvisualizer.fit(x_train, y_train)\nvisualizer.score(x_test, y_test)\nvisualizer.show(); ","d9512e51":"fig, ax = plt.subplots(figsize = (6,6))\ncv = StratifiedKFold(12)\nsizes = np.linspace(0.3,1.0,10)\nlc_viz = LearningCurve(\n    model_xgboost,\n    cv = cv,\n    train_sizes = sizes,\n    scoring = \"f1_weighted\",\n    n_jobs = 4,\n    ax = ax,\n)\n\nlc_viz.fit(x, y);\nlc_viz.poof();","cae7d081":"from mlxtend.classifier import (StackingClassifier,)\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.metrics import accuracy_score","d380c8e9":"x","fe6a4354":"clfs = [\n    x()\n    for x in [\n        LogisticRegression,\n        DecisionTreeClassifier,\n        KNeighborsClassifier,\n        xgboost.XGBClassifier,\n        GaussianNB,\n        SVC,\n        RandomForestClassifier,\n    ]\n];\n\nstack = StackingClassifier(classifiers = clfs, \n                           meta_classifier = LogisticRegression(),);\nkfold = model_selection.KFold(n_splits = 10, random_state = 42);\ns = model_selection.cross_val_score(stack, x, y, scoring = \"roc_auc\", cv = kfold);\nprint('>%s %.3f (%.3f)' % (str(stack), np.mean(s), np.std(s)));\n","6cfdec36":"stack.fit(x_train, y_train)","69414401":"stack.score(x_test, y_test)","24078d6a":"visualizer = ROCAUC(stack, classes=[\"win\", \"loss\", \"draw\"])\n\nvisualizer.fit(x_train, y_train)\nvisualizer.score(x_test, y_test)\nvisualizer.show(); ","62a00e9b":"fig, ax = plt.subplots(figsize = (6,6))\ncv = StratifiedKFold(12)\nsizes = np.linspace(0.3,1.0,10)\nlc_viz = LearningCurve(\n    stack,\n    cv = cv,\n    train_sizes = sizes,\n    scoring = \"f1_weighted\",\n    n_jobs = 4,\n    ax = ax,\n)\n\nlc_viz.fit(x, y);\nlc_viz.poof();","6c9955ca":"dataset_test","1903297c":"dataset_test_ajustado = tweak_titanic(dataset_test, ['PassengerId', 'Pclass','Name', 'Ticket', 'Cabin'])\ndataset_test_ajustado.head()","61dcbd4c":"dataset_test_ajustado = dataset_test_ajustado.drop(columns = ['Embarked_C', 'Sex_female'])","4906a8d0":"dataset_test_ajustado = imput_value(dataset_test_ajustado, None)\ndataset_test_ajustado","3542ae25":"#dataset_test_ajustado['feature_weights'] = 0\n#dataset_test_ajustado.loc[(dataset_test_ajustado.Sex_male == 0) & (dataset_test_ajustado.Age <= 5), 'feature_weights'] = 0.1\n#dataset_test_ajustado.loc[(dataset_test_ajustado.Sex_male == 1) & (dataset_test_ajustado.Age <= 5), 'feature_weights'] = 0.1\n#dataset_test_ajustado.loc[(dataset_test_ajustado.Sex_male == 0) & (dataset_test_ajustado.Age.between(14, 41)), 'feature_weights'] = 0.1\n#dataset_test_ajustado.loc[(dataset_test_ajustado.Sex_male == 1) & (dataset_test_ajustado.Age.between(24, 31)), 'feature_weights'] = 0.1\n#dataset_test_ajustado","ea32ee3d":"dataset_test_ajustado.columns","e99028a3":"std = preprocessing.StandardScaler();\ndataset_test_ajustado.loc[:, ['Age','SibSp','Parch','Fare']] = std.fit_transform(dataset_test_ajustado.loc[:, ['Age','SibSp','Parch','Fare']]);\ndataset_test_ajustado","c1b3e830":"prediction = model_xgboost.predict(dataset_test_ajustado)\nprediction","ecdc5df0":"prediction = model_rfc.predict(dataset_test_ajustado)\nprediction","12615eee":"prediction = stack.predict(dataset_test_ajustado)\nprediction","0036624a":"sub = pd.Series(prediction, index = dataset_test[\"PassengerId\"], name = 'Survived')\nsub.shape","44d6c02e":"sub.to_csv(\"titanic_without_james_cameron.csv\", header = True)","296f82a6":"!head -10 titanic_without_james_cameron.csv","20ac7819":"# Numbers of the Fathers\/Sons","e8410ba8":"# Pclass:\n* 1 -> first class\n* 2 -> second class\n* 3 -> third class","c6ccba43":"# Staking Process","8f51dbb8":"# Developing functions to transform of datas","c228257e":"# Embark place\n* C -> Cherbourg\n* Q -> Queenstown\n* S -> Southampton","8df408ef":"# Survived:\n* 0 -> no\n* 1 -> yes","c4284426":"Profile Report not necessary","bcc59abd":"# Preparating Data test","7441da52":"# XGBClassifier","3d48ff33":"# Prediction","b297206a":"# Numbers of the Brothers and Sisters\/Wife","69c0c79e":"# RandomForestClassifier","a2f31e01":"# **Exploratory Data Analysis of TITANIC**"}}