{"cell_type":{"0dec3171":"code","a2dca727":"code","3e3cb421":"code","16c0f5a8":"code","925d8b1a":"code","2e468704":"code","0c7e3c71":"code","f1a4ab06":"code","3ce3612e":"markdown","4cb3e11c":"markdown","14fbf493":"markdown","4be88420":"markdown","f566175d":"markdown","78b70a73":"markdown","3b38f519":"markdown","4c3b610a":"markdown","3e798d3a":"markdown","75401a56":"markdown"},"source":{"0dec3171":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\npd.set_option(\"display.max_columns\",None);\npd.set_option(\"display.max_rows\",None);\nretail=pd.read_excel(\"..\/input\/online-retail-ii-dataset\/online_retail_II.xlsx\", sheet_name=\"Year 2010-2011\")\ndf=retail.copy()\n\n#DATA PREPROCESSING\ndf=df[df.notnull().all(axis=1)]\ndf[\"Customer ID\"]=df[\"Customer ID\"].astype(\"int64\")\ndf=df[df[\"Invoice\"].astype(\"str\").str.get(0)!=\"C\"]\ndf=df.drop([125])\ndf[\"Total_price\"]=df[\"Quantity\"]*df[\"Price\"]\npd.set_option(\"display.float_format\", lambda x: \"%.2f\" % x)\n\n\n#RECENCY\nimport datetime as dt\ntoday_date=dt.datetime(2011,12,10)\nrec_df=today_date-df.groupby(\"Customer ID\").agg({\"InvoiceDate\":max})\nrec_df.rename(columns={\"InvoiceDate\": \"Recency\"}, inplace=True)\nrec_df=rec_df[\"Recency\"].apply(lambda x: x.days)\n\n#FREQUENCY\nfreq_df=df.groupby(\"Customer ID\").agg({\"InvoiceDate\":\"nunique\"})\nfreq_df.rename(columns={\"InvoiceDate\": \"Frequency\"}, inplace=True)\n\n# MONETARY\nmonetary_df=df.groupby(\"Customer ID\").agg({\"Total_price\":\"sum\"})\nmonetary_df.rename(columns={\"Total_price\":\"Monetary\"}, inplace=True)\n\n#RFM\nrfm=pd.concat([rec_df,freq_df, monetary_df], axis=1)\nrfm[\"Recency_Score\"]= pd.qcut(rfm[\"Recency\"],5, labels=[5,4,3,2,1])\nrfm[\"Frequency_Score\"]= pd.qcut(rfm[\"Frequency\"].rank(method=\"first\"),5, labels=[1,2,3,4,5])\nrfm[\"Monetary_Score\"]=pd.qcut(rfm[\"Monetary\"],5, labels=[1,2,3,4,5])\nrfm[\"RFM\"]=rfm[\"Recency_Score\"].astype(str)+rfm[\"Frequency_Score\"].astype(str)+rfm[\"Monetary_Score\"].astype(str)\n\n#SEG_MAP\nseg_map={r'[1-2][1-2]': \"Hibernating\", r'[1-2][3-4]': \"At Risk\", r'[1-2]5': \"Can't Lose\", r'3[1-2]': \"About to Sleep\",\n        r'33': \"Need Attention\", r'[3-4][4-5]': \"Loyal Customers\", r'41': \"Promising\", r'51': \"New Customers\",\n        r'[4-5][2-3]': \"Potential Loyalist\", r'5[4-5]': \"Champions\"}\n\nrfm[\"RFM_Segment\"]=rfm[\"Recency_Score\"].astype(str)+ rfm[\"Frequency_Score\"].astype(str)\nrfm[\"RFM_Segment\"]=rfm[\"RFM_Segment\"].replace(seg_map,regex=True)\nrfm[[\"RFM_Segment\",\"Recency\",\"Frequency\",\"Monetary\"]].groupby(\"RFM_Segment\").agg([\"min\",\"max\",\"mean\",\"count\"])","a2dca727":"rfm.head()","3e3cb421":"rfmm=rfm.loc[:,\"Recency\":\"Monetary\"]\n\n#log(x+1) transformation\nrfmm['Recency']=np.log1p(rfmm['Recency'])\nrfmm['Frequency']=np.log1p(rfmm['Frequency'])\nrfmm['Monetary']=np.log1p(rfmm['Monetary'])\n\n# Scaling\n\nfrom sklearn.preprocessing import Normalizer\ntransformer = Normalizer().fit(rfmm)\nnormalized=transformer.transform(rfmm)\nnormalized_rfm=pd.DataFrame(normalized,columns=rfmm.columns)\n\n#K-Means\nfrom sklearn.cluster import KMeans\nk_means = KMeans(n_clusters = 10).fit(normalized_rfm)\nsegments=k_means.labels_\n\n\nnormalized_rfm[\"K-Means_Segment\"] = k_means.labels_\n\n\n\n\nS=pd.DataFrame(normalized_rfm[\"K-Means_Segment\"])\nS=S.reset_index(drop=True)\nrfm2=rfmm.reset_index(drop=True)\ndf_=pd.concat([rfm2, S], axis=1)\nCustomer_ID=rfm.reset_index()[\"Customer ID\"]\ndf_K_Means=pd.concat([Customer_ID,df_], axis=1)\ndf_K_Means.head(3)","16c0f5a8":"df_K_Means=df_K_Means.reset_index(drop=True)\nrfm=rfm.reset_index(drop=True)\n\ndf_all=pd.concat([df_K_Means[\"Customer ID\"],rfm.loc[:,\"Recency\":\"Monetary\"], rfm[\"RFM\"], rfm[\"RFM_Segment\"],df_K_Means[\"K-Means_Segment\"] ], axis=1)\ndf_all.head(5)","925d8b1a":"df_all[[\"RFM_Segment\",\"Recency\",\"Frequency\",\"Monetary\"]].groupby(\"RFM_Segment\").agg([\"min\",\"max\",\"mean\",\"count\"])","2e468704":"df_all[[\"K-Means_Segment\",\"Recency\",\"Frequency\",\"Monetary\"]].groupby(\"K-Means_Segment\").agg([\"min\",\"max\",\"mean\",\"count\"])","0c7e3c71":"df_all[(df_all[\"RFM_Segment\"]==\"Champions\") & (df_all[\"K-Means_Segment\"]==5)].shape","f1a4ab06":"df_all[(df_all[\"RFM_Segment\"]==\"Champions\") & (df_all[\"K-Means_Segment\"]==5)].head()","3ce3612e":"# COMPARISON BETWEEN RFM AND K-Means (ONLINE RETAIL II- 2010_2011) ","4cb3e11c":"# COMPARISON BETWEEN RFM AND K-Means","14fbf493":"# REPORTING","4be88420":"# RFM ANALYSIS FOR ONL\u0130NE RETAIL DATA SET","f566175d":"# RFM Champions Segment \n\n* There are 632 customers in this group.\n* Their last purchases was 5.4 days ago, meanly.\n* The frequency of the group's purchase is 12.3 .\n* The mean of the total purchase for one person who is in this group is 6866 sterlin.\n\n# K-Means Champions Segment\n\n* There are 300 customers in this group.\n* Their last purchases was 2 days ago, meanly.\n* The frequency of the group's purchase is 16.8. .\n* The mean of the total purchase for one person who is in this group is 11327 sterlin.\n","78b70a73":"* RFM ve K-Means ile m\u00fc\u015fteri segmentasyonlar\u0131 olu\u015fturuldu.\n* 10 gruptan olu\u015fan bu segmentasyonlardan 2 segmentasyon y\u00f6ntemine ait \"\u015eampiyonlar\" s\u0131n\u0131f\u0131 kar\u015f\u0131la\u015ft\u0131r\u0131ld\u0131.\n* RFM \u015eampiyon s\u0131n\u0131f\u0131nda 632 m\u00fc\u015fteri, K-Means \u015fampiyon s\u0131n\u0131f\u0131nda ise 300 ki\u015fi oldu\u011fu g\u00f6r\u00fcld\u00fc.\n* Bu ki\u015filerden 279'unun ortak oldu\u011fu tespit edildi.\n\n* K-Means \u015fampiyon s\u0131n\u0131f ve RFM \u015fampiyon s\u0131n\u0131f ortalamalar\u0131 kar\u015f\u0131la\u015ft\u0131r\u0131ld\u0131\u011f\u0131nda;\n\n -  K-Means \u015fampiyon s\u0131n\u0131f\u0131n\u0131n 4.461 sterlin daha fazla harcama yapt\u0131\u011f\u0131, (K-Means: 11.327, rfm: 6.866)\n -  K-Means \u015fampiyon s\u0131n\u0131f\u0131n\u0131n son al\u0131\u015fveri\u015f yapt\u0131\u011f\u0131 g\u00fcn\u00fcn 2 g\u00fcn \u00f6nce oldu\u011fu (K-Means:2, rfm: 5.37),\n -  K-Means \u015fampiyon s\u0131n\u0131f\u0131n\u0131n al\u0131\u015fveri\u015f yapma s\u0131kl\u0131\u011f\u0131n\u0131n 4.5 fazla oldu\u011fu g\u00f6r\u00fclmektedir. ( K-Means: 16.8, rfm: 12.34)\n \n* B\u00fct\u00fcn bunlar\u0131n sonucunda, K-Means \u015fampiyon s\u0131n\u0131f\u0131n\u0131n, rfm \u015fampiyon s\u0131n\u0131f\u0131ndaki en \u00e7ok harcama yapan en s\u0131k ve en son gelen m\u00fc\u015fterilerden olu\u015ftu\u011fu g\u00f6r\u00fclmektedir.\n","3b38f519":"# Champions seems to be represented by \"5\" by K-Means","4c3b610a":"# K-Means FOR ONL\u0130NE RETAIL DATA SET","3e798d3a":"# RFM AND K-Means ","75401a56":"## Description of data set\n* InvoiceNo: Invoice number. Nominal. A 6-digit integral number uniquely assigned to each transaction. **If this code starts with the letter 'c', it indicates a cancellation.**\n* StockCode: Product (item) code. Nominal. A 5-digit integral number uniquely assigned to each distinct product.\n* Description: Product (item) name. Nominal.\n* Quantity: The quantities of each product (item) per transaction. Numeric.\n* InvoiceDate: Invice date and time. Numeric. The day and time when a transaction was generated.\n* UnitPrice: Unit price. Numeric. Product price per unit in sterling (\u00c2\u00a3).\n* CustomerID: Customer number. Nominal. A 5-digit integral number uniquely assigned to each customer.\n* Country: Country name. Nominal. The name of the country where a customer resides."}}