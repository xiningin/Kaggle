{"cell_type":{"be345b59":"code","63941e71":"code","03356645":"code","7aac3307":"code","2f3ba1b5":"code","4501c33c":"code","dd4b9213":"code","6aaab484":"code","8fef9bf1":"code","7f78156d":"code","b5e4808e":"code","bdb6f96d":"code","09781109":"code","17a61445":"code","b600d4e5":"code","43ccef13":"code","88fede66":"code","f7daf32d":"code","f1f9c003":"code","dda92466":"code","2fea091a":"code","3e6c12f5":"code","66211106":"markdown","cecc8e29":"markdown","aec7b7a2":"markdown","6af8a9db":"markdown","ac2b0f78":"markdown","bedfddc7":"markdown","951718c4":"markdown"},"source":{"be345b59":"import pandas as pd\npd.set_option('display.max_columns', 20)","63941e71":"# reading datasets\nmovie = pd.read_csv(\"..\/input\/movielens-20m-dataset\/movie.csv\")\nrating = pd.read_csv(\"..\/input\/movielens-20m-dataset\/rating.csv\")\ndf_ = movie.merge(rating, how=\"left\", on=\"movieId\")\ndf = df_.copy()\ndf.head()","03356645":"df.shape","7aac3307":"# number of unique titles in ratings \ncomment_counts = pd.DataFrame(df[\"title\"].value_counts())\ncomment_counts","2f3ba1b5":"# movies rarely rated \nrare_movies = comment_counts[comment_counts[\"title\"] <= 1000].index","4501c33c":"# exclusion of movies rarely rated \ncommon_movies = df[~df[\"title\"].isin(rare_movies)]\ncommon_movies.shape\n# check number of common movies\ncommon_movies[\"title\"].nunique()","dd4b9213":"# creating pivot table consisting of so called common movies             \nuser_movie_df = common_movies.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")\n#user_movie_df.shape\nuser_movie_df.head(10)","6aaab484":"# movies are in columns checked\nuser_movie_df.columns","8fef9bf1":"# picking up a random user for user based recommendation\nrandom_user = int(pd.Series(user_movie_df.index).sample(1, random_state=45).values)","7f78156d":"#selecting the movies the the random picked user watched \nrandom_user_df = user_movie_df[user_movie_df.index == random_user]\nrandom_user_df.head()\n","b5e4808e":"#moving them to a list \nmovies_watched = random_user_df.columns[random_user_df.notna().any()].tolist() \nmovies_watched\n#verification\n#user_movie_df.loc[user_movie_df.index == random_user, user_movie_df.columns == \"Ace Ventura: Pet Detective (1994)\"]\n#len(movies_watched)","bdb6f96d":"# selecting the movies that random user watched which also includes other users\nmovies_watched_df = user_movie_df[movies_watched]\nmovies_watched_df.head()","09781109":"# number of movies watched by users to find the similar pattern with random user\nuser_movie_count = movies_watched_df.T.notnull().sum()\nuser_movie_count = user_movie_count.reset_index()\n#number of movies watched by users\nuser_movie_count.columns = [\"userId\", \"movie_count\"]\nuser_movie_count.head(10)\n# excluding the user who watched less than 20 movies to get similar pattern with random user\n# user_movie_count[user_movie_count[\"movie_count\"] > 20].sort_values(\"movie_count\", ascending=False)\n# users who watched same amount of movies with random user\n# user_movie_count[user_movie_count[\"movie_count\"] == 33].count() # just 17","17a61445":"# selecting the users who watched more than %60 of movies the the random user watched to get better results\nperc = len(movies_watched) * 60 \/ 100\nusers_same_movies = user_movie_count[user_movie_count[\"movie_count\"] > perc][\"userId\"]\nlen(users_same_movies)","b600d4e5":"# creating dataframe consisting of movies watched by random user and other users who watched them\nfinal_df = pd.concat([movies_watched_df[movies_watched_df.index.isin(users_same_movies.index)],\n                      random_user_df[movies_watched]])\nfinal_df","43ccef13":"# finding correlations between users\ncorr_df = final_df.T.corr().unstack().sort_values().drop_duplicates()\ncorr_df = pd.DataFrame(corr_df, columns=[\"corr\"])\ncorr_df.index.names = ['user_id_1', 'user_id_2']\ncorr_df = corr_df.reset_index()\ncorr_df","88fede66":"# selecting users at least %65 correlated with random user\ntop_users = corr_df[(corr_df[\"user_id_1\"] == random_user) & (corr_df[\"corr\"] >= 0.65)][\n    [\"user_id_2\", \"corr\"]].reset_index(drop=True)\ntop_users = top_users.sort_values(by='corr', ascending=False)\ntop_users.rename(columns={\"user_id_2\": \"userId\"}, inplace=True)\ntop_users","f7daf32d":"# rating scores of similar users with random user\ntop_users_ratings = top_users.merge(rating[[\"userId\", \"movieId\", \"rating\"]], how='inner')\ntop_users_ratings.head()","f1f9c003":"# considering rating and correlation together: weighted average\ntop_users_ratings['weighted_rating'] = top_users_ratings['corr'] * top_users_ratings['rating']\n# getting the movie IDs and weighted ratings\nrecommendation_df = top_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})\nrecommendation_df = recommendation_df.reset_index()\nrecommendation_df.head()","dda92466":"# 5 movies to recommend (user-based)\nmovies_to_be_recommend = recommendation_df[recommendation_df[\"weighted_rating\"] > 4].sort_values(\"weighted_rating\", ascending=False)\nmovies_to_be_recommend = movies_to_be_recommend.merge(movie[[\"movieId\", \"title\"]])[\"title\"]\nmovies_to_be_recommend.head(5)","2fea091a":"# getting the movie ID of recently watched and highly graded movie by random picked user \nmovie_id = rating[(rating[\"userId\"] == random_user) & (rating[\"rating\"] ==  5.0)].\\\nsort_values(by = \"timestamp\", ascending = False)[\"movieId\"][0:6].values[0]","3e6c12f5":"# 5 movies to recommend (item-based)\nmovie_name = movie[movie[\"movieId\"]== movie_id][\"title\"]\nmovie_name = user_movie_df[movie_name]\nmovies_from_item_based = user_movie_df.corrwith(movie_name).sort_values(ascending=False)\nmovies_from_item_based[1:6].index","66211106":"Task 3: Finding the other users who watched the same movies ","cecc8e29":"Task 4: Determining the similar users to random user for recommendation","aec7b7a2":"Task 2: Determinig the movies that the random picked user watched","6af8a9db":"Task 1: Data Processing ","ac2b0f78":"Task 6: Item based recommendation based on recently watched and highly graded movie by random picked user ","bedfddc7":"Task 5: Calculation of weighted average recommendation score and recommend first 5 movies\n","951718c4":"Hybrid Recommender System\n1) User Based Recommendation\n2) Item Based Recommendation "}}