{"cell_type":{"9566498f":"code","dda7db33":"code","583956e8":"code","599156f8":"code","381694db":"code","d9173f03":"code","419fcfd6":"code","a0b9b605":"code","b26aa7a3":"code","a7980c13":"code","096f4b88":"code","7c2fc900":"code","3939e712":"code","4b80dbc7":"code","0c6dc184":"code","c6e24814":"code","551d06c6":"markdown"},"source":{"9566498f":"! mkdir -p ~\/.kaggle\n! cp kaggle.json ~\/.kaggle\/\n! chmod 600 ~\/.kaggle\/kaggle.json","dda7db33":"! pip uninstall --y kaggle\n! pip install --upgrade\n! pip install kaggle==1.5.6","583956e8":"! kaggle competitions download -c sejongyjelectricpowerprediction\n! unzip sejongyjelectricpowerprediction.zip","599156f8":"import pandas as pd\nimport numpy as np\n\nimport torch\nimport torchvision.datasets as data\nimport torchvision.transforms as transforms\nimport random\n\nfrom sklearn import preprocessing","381694db":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n! nvidia-smi\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(777)","d9173f03":"learning_rate = 0.5\ntraining_epochs = 50\nbatch_size =10\nScaler = preprocessing.StandardScaler()","419fcfd6":"#train_data=pd.read_csv('electric_power_train_data.csv')\ntrain_data=pd.read_csv('electric_power_train_data.csv')\n#test_data=pd.read_csv('electric_power_test_data.csv')\ntest_data=pd.read_csv('electric_power_test_data.csv')\ntrain_data['Date'] = train_data['Date']%1000000\/10000\ntest_data['Date'] = test_data['Date']%1000000\/10000\n\nx_train_data=train_data.loc[:,[i for i in train_data.keys()[:-1]]]\ny_train_data=train_data[train_data.keys()[-1]]\n\nx_train_data=np.array(x_train_data)\ny_train_data=np.array(y_train_data)\nx_train_data = Scaler.fit_transform(x_train_data)  \n\nx_train_data=torch.FloatTensor(x_train_data)\ny_train_data=torch.FloatTensor(y_train_data)","a0b9b605":"train_dataset = torch.utils.data.TensorDataset(x_train_data, y_train_data)\n\ndata_loader = torch.utils.data.DataLoader(dataset=train_dataset,\n                                          batch_size=batch_size,\n                                          shuffle=True,\n                                          drop_last=True)","b26aa7a3":"linear1 = torch.nn.Linear(3,50,bias=True)\nlinear2 = torch.nn.Linear(50,50,bias=True)\nlinear3 = torch.nn.Linear(50,1,bias=True)\n\n\nrelu= torch.nn.LeakyReLU()\n\ntorch.nn.init.kaiming_uniform_(linear1.weight)\ntorch.nn.init.kaiming_uniform_(linear2.weight)\ntorch.nn.init.kaiming_uniform_(linear3.weight)\n","a7980c13":"model = torch.nn.Sequential(linear1,relu,\n                            linear2,relu,\n                            linear3).to(device)","096f4b88":"loss = torch.nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate) ","7c2fc900":"total_batch = len(data_loader)\n\nfor epoch in range(training_epochs):\n    avg_cost = 0\n\n    for X, Y in data_loader:\n\n        X = X.to(device)\n        Y = Y.to(device)\n\n        # \uadf8\ub798\ub514\uc5b8\ud2b8 \ucd08\uae30\ud654\n        optimizer.zero_grad()\n        # Forward \uacc4\uc0b0\n        hypothesis = model(X)\n        # Error \uacc4\uc0b0\n        cost = loss(hypothesis, Y)\n        # Backparopagation\n        cost.backward()\n        # \uac00\uc911\uce58 \uac31\uc2e0\n        optimizer.step()\n\n        # \ud3c9\uade0 Error \uacc4\uc0b0\n        avg_cost += cost \/ total_batch\n\n    print('Epoch:', '%04d' % (epoch + 1), 'cost =', '{:.9f}'.format(avg_cost))\n\nprint('Learning finished')","3939e712":"with torch.no_grad():\n\n  x_test_data=test_data.loc[:,[i for i in test_data.keys()[:]]]\n  x_test_data=np.array(x_test_data)\n  x_test_data = Scaler.transform(x_test_data)\n  x_test_data=torch.from_numpy(x_test_data).float().to(device)\n\n  prediction = model(x_test_data)","4b80dbc7":"correct_prediction = prediction.cpu().numpy().reshape(-1,1)","0c6dc184":"submit=pd.read_csv('electric_power_submit_data.csv')\nfor i in range(len(correct_prediction)):\n  submit['ElectricPower'][i]=correct_prediction[i].item()\n\nsubmit.to_csv('submit.csv',index=False,header=True)","c6e24814":"! kaggle competitions submit -c sejongyjelectricpowerprediction -f submit.csv -m \"\uc138\uc815\"","551d06c6":"*\ucc28\uc774\uc810 :\n\n1. layer1\uac1c -> layer3\uac1c ( 3->50->1)\n2. \ud65c\uc131\ud568\uc218 relu -> LeakyReLU\n3. \ucd08\uae30\ud654 xavier_uniform_ -> kaiming_uniform_"}}