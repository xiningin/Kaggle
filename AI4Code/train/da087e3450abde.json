{"cell_type":{"3c367f3f":"code","06ee16ed":"code","039a303a":"code","fe9a6951":"code","059c276a":"code","0a9957b3":"code","9fd837b9":"code","aa1e2311":"code","5532bc39":"code","1eaa317b":"code","cd5cbf5a":"code","43972c46":"code","ad9a5011":"code","e9d0dffb":"code","2b68ea36":"code","01bf9036":"code","6f6134ca":"code","f2febb8a":"code","5c6b2843":"code","5527110b":"code","6ce6566c":"code","a4986703":"code","89f9846f":"code","044a93e0":"code","652d72c3":"code","c2ffc8b0":"code","163521f8":"code","fb70bf79":"code","e4f16b38":"code","1119217d":"code","9c00629f":"code","b9a81501":"code","c6b01290":"code","a2782793":"code","183828bb":"code","252e3272":"code","9f11244c":"code","46b10d3f":"code","9973ee8a":"code","49a05e9c":"code","d73872b9":"code","73e7a288":"code","9dc48546":"code","229aa52a":"code","0f1998f5":"code","a0a12e25":"code","4d00077a":"code","f1e32821":"code","bd22465c":"code","855cbb68":"code","4129aa28":"code","b263a28e":"code","584f7134":"code","30cd64bc":"code","4ebf7081":"markdown","232e1951":"markdown","56e539fe":"markdown","fced841e":"markdown","172ccda0":"markdown","355a1f2e":"markdown","76469300":"markdown","bd12294b":"markdown","b2db797d":"markdown","5ebda94e":"markdown","925d501d":"markdown"},"source":{"3c367f3f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n%matplotlib inline\nimport seaborn as sns","06ee16ed":"train = pd.read_excel('..\/input\/flight-fare-prediction-mh\/Data_Train.xlsx')\ntest= pd.read_excel('..\/input\/flight-fare-prediction-mh\/Test_set.xlsx')","039a303a":"train.shape","fe9a6951":"test.shape","059c276a":"train.head(5)","0a9957b3":"print(train.dtypes)\nprint(test.dtypes)","9fd837b9":"print(train.isnull().sum()) #checking for null values\nprint(test.isnull().sum())","aa1e2311":"train=train.dropna()","5532bc39":"train.drop_duplicates()\ntrain.shape","1eaa317b":"train['Journey_Day'] = pd.to_datetime(train.Date_of_Journey, format='%d\/%m\/%Y').dt.day\ntrain['Journey_Month'] = pd.to_datetime(train.Date_of_Journey, format='%d\/%m\/%Y').dt.month\ntrain['weekday']= pd.to_datetime(train.Date_of_Journey, format='%d\/%m\/%Y').dt.weekday\n\ntest['Journey_Day'] = pd.to_datetime(test.Date_of_Journey, format='%d\/%m\/%Y').dt.day\ntest['Journey_Month'] = pd.to_datetime(test.Date_of_Journey, format='%d\/%m\/%Y').dt.month\ntest['weekday']= pd.to_datetime(test.Date_of_Journey, format='%d\/%m\/%Y').dt.weekday","cd5cbf5a":"train.drop(labels = 'Date_of_Journey', axis = 1, inplace = True)\ntest.drop(labels = 'Date_of_Journey', axis = 1, inplace = True)","43972c46":"train.columns","ad9a5011":"def duration(test):\n    test = test.strip()\n    total=test.split(' ')\n    to=total[0]\n    hrs=(int)(to[:-1])*60\n    if((len(total))==2):\n        mint=(int)(total[1][:-1])\n        hrs=hrs+mint\n    test=str(hrs)\n    return test\ntrain['Duration']=train['Duration'].apply(duration)\ntest['Duration']=test['Duration'].apply(duration)","e9d0dffb":"def deparrtime(x):\n    x=x.strip()\n    tt=(int)(x.split(':')[0])\n    if(tt>=16 and tt<21):\n        x='Evening'\n    elif(tt>=21 or tt<5):\n        x='Night'\n    elif(tt>=5 and tt<11):\n        x='Morning'\n    elif(tt>=11 and tt<16):\n        x='Afternoon'\n    return x\ntrain['Dep_Time']=train['Dep_Time'].apply(deparrtime)\ntest['Dep_Time']=test['Dep_Time'].apply(deparrtime)\ntrain['Arrival_Time']=train['Arrival_Time'].apply(deparrtime)\ntest['Arrival_Time']=test['Arrival_Time'].apply(deparrtime)","2b68ea36":"def stops(x):\n    if(x=='non-stop'):\n        x=str(0)\n    else:\n        x.strip()\n        stps=x.split(' ')[0]\n        x=stps\n    return x\ntrain['Total_Stops']=train['Total_Stops'].apply(stops)\ntest['Total_Stops']=test['Total_Stops'].apply(stops)","01bf9036":"pd.options.mode.chained_assignment = None \nfor i in range(train.shape[0]):\n    if(train.iloc[i]['Additional_Info']=='No info'):\n        train.iloc[i]['Additional_Info']='No Info' ","6f6134ca":"pd.options.mode.chained_assignment = None \nfor i in range(test.shape[0]):\n    if(test.iloc[i]['Additional_Info']=='No info'):\n        test.iloc[i]['Additional_Info']='No Info' ","f2febb8a":"train=train.drop(['Route'], axis=1) #we don't need it as we already have total_stops\ntest=test.drop(['Route'], axis=1)","5c6b2843":"train.head(2)","5527110b":"test.head(2)","6ce6566c":"print(train.info())\nprint(test.info())","a4986703":"sns.pairplot(data=train,vars=['Price','Dep_Time'])","89f9846f":"#price outlier check\nQ1=train['Price'].quantile(0.25)\nQ3=train['Price'].quantile(0.75)\nIQR=Q3-Q1\n\nprint(Q1)\nprint(Q3)\nprint(IQR)","044a93e0":"#price outlier removed\ntrain=train[~((train['Price']>Q3+1.5*IQR)|(train['Price']<Q1-1.5*IQR))]","652d72c3":"train.shape","c2ffc8b0":"train[\"Duration\"] = train[\"Duration\"].astype(int)\ntest[\"Duration\"] = test[\"Duration\"].astype(int)\ntrain[\"Journey_Day\"] = train[\"Journey_Day\"].astype(object)\ntest[\"Journey_Day\"] = test[\"Journey_Day\"].astype(object)\ntrain[\"Journey_Month\"] = train[\"Journey_Month\"].astype(object)\ntest[\"Journey_Month\"] = test[\"Journey_Month\"].astype(object)\ntrain[\"weekday\"] = train[\"weekday\"].astype(object)\ntest[\"weekday\"] = test[\"weekday\"].astype(object)","163521f8":"import scipy.stats as stats\n_ = sns.jointplot(x='Duration',y='Price',data=train,kind = 'reg')\n_.annotate(stats.pearsonr)\nplt.show()","fb70bf79":"# Import label encoder \ncolnames = list(train.columns)\nfrom sklearn import preprocessing \n\n# label_encoder object knows how to understand word labels. \nlabel_encoder = preprocessing.LabelEncoder() \n  \nfor col in colnames:\n    if train[col].dtype==object:\n        train[col]= label_encoder.fit_transform(train[col]) ","e4f16b38":"train.head()","1119217d":"train.info()","9c00629f":"train[\"weekday\"] = train[\"weekday\"].astype(object)\ntrain[\"Dep_Time\"] = train[\"Dep_Time\"].astype(object)\ntrain[\"Airline\"]=train[\"Airline\"].astype(object)\ntrain[\"Source\"]=train[\"Source\"].astype(object)\ntrain[\"Destination\"]=train[\"Destination\"].astype(object)\ntrain[\"Arrival_Time\"]=train[\"Arrival_Time\"].astype(object)\ntrain[\"Total_Stops\"]=train[\"Total_Stops\"].astype(object)\ntrain[\"Additional_Info\"]=train[\"Additional_Info\"].astype(object)\ntrain[\"Journey_Day\"]=train[\"Journey_Day\"].astype(object)\ntrain[\"Journey_Month\"]=train[\"Journey_Month\"].astype(object)","b9a81501":"train.head()","c6b01290":"train.info()","a2782793":"#for test data\n# Import label encoder \ncolnames = list(test.columns)\nfrom sklearn import preprocessing \n\n# label_encoder object knows how to understand word labels. \nlabel_encoder = preprocessing.LabelEncoder() \n  \nfor col in colnames:\n    if test[col].dtype==object:\n        test[col]= label_encoder.fit_transform(test[col]) ","183828bb":"test.info()","252e3272":"test[\"weekday\"] = test[\"weekday\"].astype(object)\ntest[\"Dep_Time\"] = test[\"Dep_Time\"].astype(object)\ntest[\"Airline\"]=test[\"Airline\"].astype(object)\ntest[\"Source\"]=test[\"Source\"].astype(object)\ntest[\"Destination\"]=test[\"Destination\"].astype(object)\ntest[\"Arrival_Time\"]=test[\"Arrival_Time\"].astype(object)\ntest[\"Total_Stops\"]=test[\"Total_Stops\"].astype(object)\ntest[\"Additional_Info\"]=test[\"Additional_Info\"].astype(object)\ntest[\"Journey_Day\"]=test[\"Journey_Day\"].astype(object)\ntest[\"Journey_Month\"]=test[\"Journey_Month\"].astype(object)","9f11244c":"test.info()","46b10d3f":"test.head()","9973ee8a":"from sklearn import preprocessing","49a05e9c":"train[\"Duration\"]= (train[\"Duration\"] - train[\"Duration\"].mean())\/train[\"Duration\"].std()   #standardizing\ntest[\"Duration\"]= (test[\"Duration\"] - test[\"Duration\"].mean())\/test[\"Duration\"].std()","d73872b9":"X=train.drop([\"Price\"],axis=1)\nY=train[\"Price\"]\nx=np.array(X)\ny=np.array(Y)","73e7a288":"from sklearn.ensemble import GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import make_scorer\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor","9dc48546":"gbm = GradientBoostingRegressor()\nxgb = XGBRegressor()","229aa52a":"best_gbm = GridSearchCV(gbm, param_grid={'learning_rate':[0.01,0.05,0.1],'max_depth':[1,2,3],'n_estimators':[100,200,500]}, cv=5, n_jobs=-1)\nbest_xgb = GridSearchCV(xgb, param_grid={'learning_rate':[0.01,0.05,0.1],'max_depth':[1,2,3],'n_estimators':[100,200,500]}, cv=5, n_jobs=-1)","0f1998f5":"best_gbm.fit(x,y)\nbest_xgb.fit(x,y)","a0a12e25":"scores = cross_val_score(best_gbm.best_estimator_, x, y, cv=5)\nprint(\"GBM Cross validation score: {0:.2%} (+\/- {1:.2%})\".format(np.mean(scores), np.std(scores)*2))\nscores = cross_val_score(best_xgb.best_estimator_, x, y, cv=5)\nprint(\"XGBoost Cross validation score: {0:.2%} (+\/- {1:.2%})\".format(np.mean(scores), np.std(scores)*2))","4d00077a":"#KNN\nnumber_of_neighbors = range(1,20)\nparams = {'n_neighbors':number_of_neighbors}\nknn = KNeighborsRegressor()\nmodel = GridSearchCV(knn, params, cv=5) \nmodel.fit(x,y)\nscores = cross_val_score(model, x, y, cv=5)\nprint(\"Cross validation score: {0:.2%} (+\/- {1:.2%})\".format(np.mean(scores), np.std(scores)*2))","f1e32821":"#Random Forest\nparameters = {'n_estimators':[500], \"max_features\" : [\"auto\", \"log2\", \"sqrt\"],\"bootstrap\": [True, False]}\nclf = GridSearchCV(RandomForestRegressor(), parameters, n_jobs=-1)\nclf.fit(x, y)\nscores = cross_val_score(clf, x, y, cv=5)\nprint(\"Cross validation score: {0:.2%} (+\/- {1:.2%})\".format(np.mean(scores), np.std(scores)*2))","bd22465c":"x=np.array(test)","855cbb68":"ypred=clf.predict(x)","4129aa28":"test= pd.read_excel('..\/input\/flight-fare-prediction-mh\/Test_set.xlsx')\ntest[\"Price\"]=ypred","b263a28e":"test.columns","584f7134":"test=test.drop(['Airline', 'Date_of_Journey', 'Source', 'Destination', 'Route',\n       'Dep_Time', 'Arrival_Time', 'Duration', 'Total_Stops',\n       'Additional_Info'],axis=1)","30cd64bc":"test.head()","4ebf7081":"### Converting total_stops to 0,1,2,3 and so on..","232e1951":"### Extracting day,month,weekday from Date of Journey","56e539fe":"For a traveller it is important to know the fare value of a trip, and as prices of flight ticket varies abruptly and it becomes hectic for a user to check different websites, use different deals. A flight fare prediction model will help inform the travellers with the optimal time to buy their flight tickets and understand trends in the airline industry.","fced841e":"## FEATURE EXTRACTION","172ccda0":"### Converting duration into minutes","355a1f2e":"### Extracting whether its a morning,evening,night or afternoon flight from departure time & arrival time of the flight","76469300":"# **FLIGHT-FARE PREDICTION**","bd12294b":"### Checking the relationship between Dept_time and Price","b2db797d":"### Correlation Analysis between duration(continuous independent variable and price)","5ebda94e":"### Convert into proper datatypes","925d501d":"# **STEPS**\n1. We will be using train and test data. Test data is similar to train data minus the \u2018price\u2019 column.\n2.We can do some data pre-processing and remove variables which are not needed and add some new features like \u2018Booking_class\u2019 and \u2018market_share\u2019 which will indicate the market share of each airline.\n3. Next step is Feature generation, here we mainly work on the data and do some transformations to extract unknown variables or create different bons of particular columns and clean the messy data.\n4. Do some EDA, data visualisation to understand the relationship between different independent variables and the relationship between the independent variables and the dependent variables...*For the eda part you can refer my other kaggle file* [Statistical Analysis & EDA for flight fare](https:\/\/www.kaggle.com\/ananyanandi02\/statistical-analysis-eda-for-flight-fare)\n\n# **BUILDING OUR MODEL**\n5. Finally after the above steps, we can deploy the  model and evaluate the efficiency of the predictions.\n\n\n---\n\n# MODELS USED:\n*   Random Forest : **90.04%**\n*   KNN : **75.7%**\n*   Xgboost : **87.48%**\n*   Gradientboost : **87.59%**\n\n[MACHINE HACK FLIGHT FARE PREDICTION HACKATHON PUBLIC LEADERBOARD ACCURACY SCORE](https:\/\/www.machinehack.com\/hackathons\/predict_the_flight_ticket_price_hackathon ) : **93:14%**"}}