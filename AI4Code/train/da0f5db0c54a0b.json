{"cell_type":{"fe41a85e":"code","c7ee0953":"code","eb448c70":"code","cc2e1f55":"code","b6fbed02":"code","f4989506":"code","f5a0bb70":"code","a04bb551":"code","f95ca94d":"code","9ddaeb4b":"code","fdf3ed15":"code","6509d9c7":"code","b9a342f1":"code","09e97346":"code","f391870e":"code","dd0909b3":"code","40a34e1b":"code","f550ba7d":"code","d13547fe":"code","c8b75aa5":"code","4003f83f":"code","d87d89ba":"code","6d6162fc":"code","5b2b4de5":"code","47582780":"code","fbaba5f4":"code","99886c41":"code","55996049":"code","ad264e08":"code","2dead8b8":"code","28969631":"code","2a01725f":"code","46f004ae":"code","a61678d6":"code","3c9fb403":"code","8aebda55":"code","e7b218c1":"code","204e2e6f":"code","7c34264b":"code","bdcce5fd":"code","5b098e5e":"code","899c1634":"code","0a7c0cc0":"code","98bd11e5":"code","f7112fa7":"code","fa519109":"code","15b0b80d":"code","5a7a6826":"code","3c40a409":"code","7a207d2b":"code","ca8bfc06":"code","12c9f0e9":"code","9e1535dd":"code","525f5c3f":"code","c9b60dae":"code","03d62926":"code","421b0e47":"code","9c4915b5":"code","24c70ede":"code","8f386b19":"code","c55663ac":"code","4e1beb50":"code","a4b9a3eb":"code","8008bbf4":"code","3e4329ed":"code","09fb0d72":"code","412310dc":"code","7c788782":"code","ced2a9d8":"code","56cb2b41":"code","9a1a2255":"code","c0f93cc0":"code","c48b26c8":"code","1122d466":"code","458b5bef":"code","f461a182":"code","0e40500a":"code","c56eeb71":"code","f86b721c":"code","de3f9977":"markdown","8a009bb7":"markdown","fd3b358d":"markdown","1ede12b3":"markdown","28a92a99":"markdown","37e6ed35":"markdown"},"source":{"fe41a85e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport io\nimport requests\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom plotly import tools\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\nfrom datetime import tzinfo, timedelta, datetime, date\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c7ee0953":"sdds = pd.read_csv(\"..\/input\/eirgridsystemdemand\/SystemDemand_14.Apr.2020.00.00_13.May.2020.23.59.csv\", header=0, na_values='-')\nsdds2 = pd.read_csv(\"\/kaggle\/input\/eirgridmetrics\/SystemDemand_06.Jun.2020.00.00_05.Jul.2020.23.59.csv\", na_values='-')\nsdds = pd.concat([sdds, sdds2])\n","eb448c70":"co2ds = pd.read_csv(\"\/kaggle\/input\/eirgridmetrics\/Co2Intensity_14.Apr.2020.00.00_13.May.2020.21.45.csv\", na_values='-')\nco2ds2 = pd.read_csv(\"\/kaggle\/input\/eirgridmetrics\/Co2Intensity_06.Jun.2020.00.00_05.Jul.2020.23.15.csv\", na_values='-')\nco2ds = pd.concat([co2ds, co2ds2])\n\nco2ds['date'] = pd.to_datetime(co2ds[\"DATE & TIME\"], infer_datetime_format=True, errors='ignore')\nco2ds\n","cc2e1f55":"sgds = pd.read_csv(\"\/kaggle\/input\/eirgridmetrics\/SystemGeneration_14.Apr.2020.00.00_13.May.2020.21.45.csv\")\nsgds2 = pd.read_csv(\"\/kaggle\/input\/eirgridmetrics\/SystemGeneration_06.Jun.2020.00.00_05.Jul.2020.23.00.csv\")\nsgds = pd.concat([sgds, sgds2])\n\n","b6fbed02":"wgds = pd.read_csv(\"\/kaggle\/input\/eirgridmetrics\/WindGeneration_14.Apr.2020.00.00_13.May.2020.23.59.csv\")\nwgds2 = pd.read_csv(\"\/kaggle\/input\/eirgridmetrics\/WindGeneration_06.Jun.2020.00.00_05.Jul.2020.23.59.csv\")\nwgds = pd.concat([wgds, wgds2])\n","f4989506":"wgds.dtypes","f5a0bb70":"#wg0621ds = pd.read_csv(\"\/kaggle\/input\/eirgridmetrics\/WindGeneration_21.Jun.2020.00.00_21.Jun.2020.23.59.csv\")\nicds = pd.read_csv(\"\/kaggle\/input\/eirgridmetrics\/Interconnection_14.Apr.2020.00.00_13.May.2020.22.00.csv\")\nicds2 = pd.read_csv(\"\/kaggle\/input\/eirgridmetrics\/Interconnection_06.Jun.2020.00.00_05.Jul.2020.23.00.csv\")\nicds = pd.concat([icds, icds2])\n","a04bb551":"sdds","f95ca94d":"#co2ds['date'] = pd.to_datetime(co2ds[\"DATE & TIME\"], infer_datetime_format=True, errors='ignore')\nsgds['date'] = pd.to_datetime(sgds[\"DATE & TIME\"], infer_datetime_format=True, errors='ignore')\nwgds['date'] = pd.to_datetime(wgds[\"DATE & TIME\"], infer_datetime_format=True, errors='ignore')\nicds['date'] = pd.to_datetime(icds[\"DATE & TIME\"], infer_datetime_format=True, errors='ignore')\n#wg0621ds['date'] = pd.to_datetime(wg0621ds[\"DATE & TIME\"], infer_datetime_format=True, errors='ignore')\nsdds['date'] = pd.to_datetime(sdds[\"DATE & TIME\"], infer_datetime_format=True, errors='ignore')","9ddaeb4b":"sdds = sdds.drop('DATE & TIME', axis=1)\nco2ds = co2ds.drop('DATE & TIME', axis=1)\nsgds = sgds.drop('DATE & TIME', axis=1)\nwgds = wgds.drop('DATE & TIME', axis=1)\nicds = icds.drop('DATE & TIME', axis=1)\n#wg0621ds = wg0621ds.drop('DATE & TIME', axis=1)","fdf3ed15":"icds.columns","6509d9c7":"sgds.columns","b9a342f1":"left = sdds.set_index(['date', ' REGION'])\nright = co2ds.set_index(['date', ' REGION'])\n#right.index = right.index.tz_convert(None)\n\nnewdf = left.join(right)\n\nright = sgds.set_index(['date', ' REGION'])\nnewdf = newdf.join(right)\n\nright = wgds.set_index(['date', ' REGION'])\nnewdf = newdf.join(right)\nnewdf = newdf.reset_index()\n","09e97346":"right = icds.set_index(['date'])\nleft = newdf.set_index(['date'])\nnewdf = left.join(right)\n\nnewdf = newdf.reset_index()","f391870e":"newdf.columns","dd0909b3":"newdf[' ACTUAL DEMAND(MW)']","40a34e1b":"newdf.dtypes","f550ba7d":"newdf.loc[newdf['  ACTUAL WIND(MW)']=='-']","d13547fe":"newdf.loc[newdf[' ACTUAL GENERATION(MW)'].isnull()]","c8b75aa5":"newdf.dropna(axis=0, subset=[' ACTUAL GENERATION(MW)'], inplace=True)\n","4003f83f":"newdf['  ACTUAL WIND(MW)'] = newdf['  ACTUAL WIND(MW)'].astype('int32')\nnewdf[' ACTUAL DEMAND(MW)'] = newdf[' ACTUAL DEMAND(MW)'].astype('int32')\n#newdf[' NET TOTAL(MW)'] = newdf[' NET TOTAL(MW)'].astype('int32')\n#newdf[' EWIC(MW)'] = newdf[' EWIC(MW)'].astype('int32')\n#newdf[' MOYLE(MW)'] = newdf[' MOYLE(MW)'].astype('int32')\n\n\n    ","d87d89ba":"newdf.describe()","6d6162fc":"# Check intuition that Actual Wind Electricity Generation correlates to overall electricity generation CO2 intensity\nimport plotly.express as px\n\ndf = px.data.tips()\n#fig = px.scatter(newdf, x=' FORECAST DEMAND(MW)', y=' CO2 INTENSITY (gCO2\/kWh)', trendline=\"ols\")\n\nfig = px.scatter(newdf, x='  ACTUAL WIND(MW)', y=' CO2 INTENSITY (gCO2\/kWh)', trendline=\"ols\")\nfig.show()","5b2b4de5":"df = px.data.tips()\n#fig = px.scatter(newdf, x=' FORECAST DEMAND(MW)', y=' CO2 INTENSITY (gCO2\/kWh)', trendline=\"ols\")\n\nfig = px.scatter(newdf, x='date', y=' CO2 INTENSITY (gCO2\/kWh)')\nfig.show()","47582780":"weatherds = pd.read_csv(\"..\/input\/ireland-weather\/IrelandWeatherData (1).csv\")","fbaba5f4":"weatherds.columns","99886c41":"weatherds['date'].describe()","55996049":"\n# Reduce timeframe\nweatherds = weatherds[(weatherds.date >= \"2020-04-14 00:00:00\") & (weatherds.date < \"2020-07-05 14:45:00\")]","ad264e08":"# Perform EDA, visualize, etc...\nfig = make_subplots(\n    rows=1, cols=1,\n    specs=[[{\"secondary_y\": True}]],\n    subplot_titles=(\"Belmullet\"))\n\n\nfig.add_trace(go.Scatter(x=weatherds['date'], y=weatherds['wdsp'],\n                    mode='lines',\n                    name='Wind Speed',showlegend=True), 1, 1, secondary_y=False)\n\nfig.add_trace(go.Scatter(x=weatherds['date'], y=weatherds['temp'],\n                    mode='lines',\n                    name='Temperature',showlegend=True), 1, 1, secondary_y=True)\n\n\nfig.update_layout(\n    title_text=\"Wind speed vs. Temperatures\",\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n    ),\n    autosize=False,\n    margin=dict(\n        l=100,\n        r=20,\n        t=110,\n    ),\n    plot_bgcolor='white',\n    width=4000,\n    height=500\n)\nfig.show()","2dead8b8":"import plotly.express as px\n\ndf = px.data.tips()\n#fig = px.scatter(newdf, x='wdsp', y='wdsp_BEL', trendline=\"ols\")\nfig = px.scatter(weatherds, x='wdsp', y='temp', trendline=\"ols\")\nfig.show()","28969631":"right = newdf.set_index(['date'])\nleft = weatherds.set_index(['date'])\nnewdf = left.join(right)\n\nnewdf = newdf.reset_index()","2a01725f":"newdf.columns","46f004ae":"df = px.data.tips()\nfig = px.scatter(newdf, x='wdsp', y='  ACTUAL WIND(MW)', trendline=\"ols\")\nfig.show()","a61678d6":"newdf.wdsp.describe()","3c9fb403":"df = px.data.tips()\nfig = px.scatter(newdf, x='wdsp_COR', y='  ACTUAL WIND(MW)', trendline=\"ols\")\nfig.show()","8aebda55":"df = px.data.tips()\nfig = px.scatter(newdf, x='wdsp_BEL', y='  ACTUAL WIND(MW)', trendline=\"ols\")\nfig.show()","e7b218c1":"# Perform EDA, visualize, etc...\nfig = make_subplots(\n    rows=1, cols=1,\n    specs=[[{\"secondary_y\": True}]],\n    subplot_titles=(\"newdf\"))\n\n\nfig.add_trace(go.Scatter(x=newdf['date'], y=(newdf['wdsp_COR']^2),\n                    mode='lines',\n                    name='Wind Speed ^ 2',showlegend=True), 1, 1, secondary_y=False)\n\n#fig.add_trace(go.Scatter(x=newdf['date'], y=newdf[' ACTUAL DEMAND(MW)'],\n#                    mode='lines',\n#                    name='Actual Demand (MW)',showlegend=True), 1, 1, secondary_y=True)\n\nfig.add_trace(go.Scatter(x=newdf['date'], y=(newdf['  ACTUAL WIND(MW)'] \/ newdf[' ACTUAL DEMAND(MW)']),\n                    mode='lines',\n                    name='Wind Generation by Actual Demand',showlegend=True), 1, 1, secondary_y=True)\n\n\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n    ),\n    autosize=False,\n    margin=dict(\n        l=100,\n        r=20,\n        t=110,\n    ),\n    plot_bgcolor='white',\n    width=2000,\n    height=500\n)\nfig.show()","204e2e6f":"newdf[\"hour\"] = 0\nnewdf[\"isweekday\"] = False\nnewdf[\"month\"] = 0\ndef settimeatt(row):\n    row[\"hour\"] = row.date.hour\n    row[\"isweekday\"] = (row.date.isoweekday() < 6) \n    row[\"month\"] = row.date.month\n    return row\nnewdf = newdf.apply(settimeatt, axis='columns')\n","7c34264b":"newdf[\"Wind_gen_ratio\"] = (newdf['  ACTUAL WIND(MW)'] \/ newdf[' ACTUAL DEMAND(MW)'])\nnewdf['wdsp_BEL2'] = (newdf['wdsp_BEL'] ^ 2)\nnewdf['wdsp_COR2'] = (newdf['wdsp_COR'] ^ 2)\nnewdf['wdsp_DUB2'] = (newdf['wdsp_DUB'] ^ 2)\nnewdf['wdsp2'] = (newdf['wdsp']^2)\n","bdcce5fd":"import plotly.express as px\n\n#df = px.data.tips()\nfig = px.scatter(newdf, x='hour', y=' ACTUAL DEMAND(MW)', facet_col='isweekday')\nfig.show()","5b098e5e":"fig = px.scatter(newdf, x='hour', y=' ACTUAL DEMAND(MW)', facet_col='month', color='isweekday')\nfig.show()","899c1634":"newdf = newdf.rename(columns={' ACTUAL DEMAND(MW)' : 'ActualDemandMW'})\nnewdf = newdf.rename(columns={'  ACTUAL WIND(MW)' : 'ActualWindMW'})\n","0a7c0cc0":"newdf.columns","98bd11e5":"redds = newdf.loc[:, ['date', 'wdsp_BEL', 'wddir_BEL', 'wdsp', 'wddir','wdsp_COR', 'wddir_COR', 'wdsp_DUB', 'wddir_DUB', 'hour', 'isweekday', 'month', 'ActualWindMW']]","f7112fa7":"import seaborn as sns\n\nnum_df = redds.select_dtypes(['int', 'float'])\n# Compute the correlation matrix\ncorr = num_df.corr()\ncorr = np.round(corr, 3)\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=0.6, center=0, annot= True,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n","fa519109":"from sklearn.model_selection import train_test_split\n\n# Remove rows with missing target, separate target from predictors\nredds.dropna(axis=0, subset=['ActualWindMW'], inplace=True)\ny = redds.ActualWindMW\nredds.drop(['ActualWindMW'], axis=1, inplace=True)\n\n# Break off validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(redds, y, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n\n# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\ncategorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].nunique() < 10 and \n                    X_train_full[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if \n                X_train_full[cname].dtype in ['int64', 'float64', 'bool']]\n\n# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\n","15b0b80d":"X_train.dtypes","5a7a6826":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='constant')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n# Define model\nmodel = RandomForestRegressor(n_estimators=100, random_state=0)\n\n# Bundle preprocessing and modeling code in a pipeline\nclf = Pipeline(steps=[('preprocessor', preprocessor),\n                      ('model', model)\n                     ])\n\n# Preprocessing of training data, fit model \nclf.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds = clf.predict(X_valid)\n\nprint('MAE:', mean_absolute_error(y_valid, preds))\n","3c40a409":"importances = model.feature_importances_\nstd = np.std([tree.feature_importances_ for tree in model.estimators_], axis=0)\nindices = np.argsort(importances)[::-1]\n\n# Print the feature ranking\nprint(\"Feature ranking:\")\n\nfor f in range(X_train.shape[1]):\n    print(\"%d. feature %d: %s (%f)\" % (f + 1, indices[f], X_train.columns[f], importances[indices[f]]))\n\n# Plot the impurity-based feature importances of the forest\nplt.figure()\nplt.title(\"Feature importances range(X_train.shape[1])\")\nplt.bar(X_train.columns, importances[indices],\n        color=\"r\", yerr=std[indices], align=\"center\")\nplt.xticks(range(X_train.shape[1]), indices)\nplt.xlim([-1, X_train.shape[1]])\nplt.show()","7a207d2b":"fig = px.scatter(x=preds, y=(y_valid.array), trendline=\"ols\")\nfig.show()","ca8bfc06":"y_valid.describe()","12c9f0e9":"wfds = pd.read_csv(\"\/kaggle\/input\/ireland-weather-forecast\/WeatherForecast.csv\")\n","9e1535dd":"wfds['date'] = pd.to_datetime(wfds[\"date\"], infer_datetime_format=True, errors='ignore')\nwfds.wdsp_BEL.describe()","525f5c3f":"wfds['date'].describe()","c9b60dae":"# Weather Hourly data wind speed in knt, for some reason, 1 knt = 0.514 m\/s\nknot = 0.514\nwfds.wdsp_BEL = wfds.wdsp_BEL \/ knot\nwfds.wdsp = wfds.wdsp \/ knot\nwfds.wdsp_COR = wfds.wdsp_COR \/ knot\nwfds.wdsp_DUB = wfds.wdsp_DUB \/ knot\n","03d62926":"wfds[\"hour\"] = 0\nwfds[\"isweekday\"] = False\nwfds[\"month\"] = 0\nwfds = wfds.apply(settimeatt, axis='columns')\n# TODO Compatible types\nredtds = wfds.loc[:, ['wdsp_BEL', 'wddir_BEL', 'wdsp', 'wddir','wdsp_COR', 'wddir_COR', 'wdsp_DUB', 'wddir_DUB', 'hour', 'isweekday', 'month']]\nredtds.dtypes","421b0e47":"preds = clf.predict(redtds)","9c4915b5":"preds","24c70ede":"redtds","8f386b19":"fig = go.Figure()\nfig.add_trace(go.Box(y=newdf['wdsp_BEL'], name='BEL'))\nfig.add_trace(go.Box(y=wfds['wdsp_BEL'], name='BEL forecast'))\nfig.add_trace(go.Box(y=newdf['wdsp_DUB'], name = 'DUB'))\nfig.add_trace(go.Box(y=wfds['wdsp_DUB'], name='DUB forecast'))\nfig.add_trace(go.Box(y=newdf['wdsp'], name = 'SHA'))\nfig.add_trace(go.Box(y=wfds['wdsp'], name='SHA forecast'))\n\nfig.add_trace(go.Box(y=newdf['wdsp_COR'], name = 'CORK'))\nfig.add_trace(go.Box(y=wfds['wdsp_COR'], name='CORK forecast'))\nfig.show()","c55663ac":"wfds[\"preds\"] = preds","4e1beb50":"wfds","a4b9a3eb":"wgds3 = pd.read_csv(\"\/kaggle\/input\/eirgridmetrics\/WindGeneration_30.Jun.2020.00.00_29.Jul.2020.23.59.csv\", na_values='-')\nwgds3['date'] = pd.to_datetime(wgds3[\"DATE & TIME\"], infer_datetime_format=True, errors='ignore')\nwgds3 = wgds3.drop(\"DATE & TIME\", axis=1)","8008bbf4":"wgds2 = pd.read_csv(\"\/kaggle\/input\/eirgridmetrics\/WindGeneration_27.Jul.2020.00.00_27.Jul.2020.23.59OLD.csv\", na_values='-')\nwgds28 = pd.read_csv(\"\/kaggle\/input\/eirgridmetrics\/WindGeneration_28.Jul.2020.00.00_28.Jul.2020.23.59OLD.csv\", na_values='-')\nwgds2 = pd.concat([wgds2, wgds28])\nwgds29 = pd.read_csv(\"\/kaggle\/input\/eirgridmetrics\/WindGeneration_29.Jul.2020.00.00_29.Jul.2020.23.59.csv\", na_values='-')\nwgds2 = pd.concat([wgds2, wgds29])","3e4329ed":"wgds2['date'] = pd.to_datetime(wgds2[\"DATE & TIME\"], infer_datetime_format=True, errors='ignore')\nwgds2 = wgds2.drop(\"DATE & TIME\", axis=1)\n","09fb0d72":"# Reduce time frame to common weather forecast and Eirgrid wind generation forecast\nwgds2 = wgds2[(wgds2.date >= \"2020-07-27 13:00:00\") & (wgds2.date < \"2020-07-30 00:00:00\")]\nwgds3 = wgds3[(wgds3.date >= \"2020-07-27 13:00:00\") & (wgds3.date < \"2020-07-30 00:00:00\")]\nwfds = wfds[(wfds.date >= \"2020-07-27 13:00:00\") & (wfds.date < \"2020-07-30 00:00:00\")]\nwgds2","412310dc":"wgds2 = wgds2.rename(columns={' FORECAST WIND(MW)' : 'ForecastWindMW'})\nwgds2 = wgds2.rename(columns={'  ACTUAL WIND(MW)' : 'ActualWindMW'})\nwgds3 = wgds3.rename(columns={' FORECAST WIND(MW)' : 'ForecastWindMW'})\nwgds3 = wgds3.rename(columns={'  ACTUAL WIND(MW)' : 'ActualWindMW'})","7c788782":"wgds3.columns","ced2a9d8":"right = wgds2.set_index(['date'])\nleft = wfds.set_index(['date']).copy()\nfulldf = left.join(right, lsuffix=\"\", rsuffix=\"_wf\")\n\nfulldf = fulldf.reset_index()","56cb2b41":"right = wgds3.set_index(['date'])\nleft = fulldf.set_index(['date']).copy()\nfulldf = left.join(right, lsuffix=\"\", rsuffix=\"_3\")\n\nfulldf = fulldf.reset_index()","9a1a2255":"fulldf.columns","c0f93cc0":"# Perform EDA, visualize, etc...\nfig = make_subplots(\n    rows=1, cols=1,\n    specs=[[{\"secondary_y\": True}]],\n    subplot_titles=(\"\"))\n\n\nfig.add_trace(go.Scatter(x=fulldf['date'], y=(fulldf['preds']),\n                    mode='lines',\n                    name='Random Forest prediction',showlegend=True), 1, 1, secondary_y=False)\n\nfig.add_trace(go.Scatter(x=fulldf['date'], y=(fulldf['ForecastWindMW']),\n                    mode='lines',\n                    name='Eirgrid ForecastWindMW',showlegend=True), 1, 1, secondary_y=False)\n\n#fig.add_trace(go.Scatter(x=fulldf['date'], y=(fulldf['ForecastWindMW_3']),\n#                    mode='lines',\n#                    name='Eirgrid ForecastWindMW v3',showlegend=True), 1, 1, secondary_y=False)\n\nfig.add_trace(go.Scatter(x=fulldf['date'], y=(fulldf['ActualWindMW_3'] ),\n                    mode='lines', line=dict(width=3),\n                    name='Eirgrid Wind Generation Actual',showlegend=True), 1, 1, secondary_y=False)\n\n\n\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n    ),\n    autosize=False,\n    margin=dict(\n        l=100,\n        r=20,\n        t=110,\n    ),\n    plot_bgcolor='white',\n    width=1000,\n    height=500\n)\nfig.show()","c48b26c8":"# Perform EDA, visualize, etc...\nfig = make_subplots(\n    rows=2, cols=1,\n    specs=[[{\"secondary_y\": True}],\n           [{\"secondary_y\": True}]],\n    subplot_titles=(\"\"))\n\n\nfig.add_trace(go.Scatter(x=fulldf['date'], y=(fulldf['preds']),\n                    mode='lines',\n                    name='Random Forest prediction',showlegend=True), 1, 1, secondary_y=False)\n\nfig.add_trace(go.Scatter(x=fulldf['date'], y=(fulldf['ForecastWindMW']),\n                    mode='lines',\n                    name='Eirgrid ForecastWindMW',showlegend=True), 1, 1, secondary_y=False)\n\n\nfig.add_trace(go.Scatter(x=fulldf['date'], y=(fulldf['ActualWindMW_3'] ),\n                    mode='lines',\n                    name='Eirgrid Wind Generation',showlegend=True), 1, 1, secondary_y=False)\n\nfig.add_trace(go.Scatter(x=fulldf['date'], y=(fulldf['wdsp_BEL'] ),\n                    mode='lines',\n                    name='Belmullet Wind Speed',showlegend=True), 2, 1, secondary_y=False)\n\nfig.add_trace(go.Scatter(x=fulldf['date'], y=(fulldf['wdsp'] ),\n                    mode='lines',\n                    name='Shannon Wind Speed',showlegend=True), 2, 1, secondary_y=False)\n\nfig.add_trace(go.Scatter(x=fulldf['date'], y=(fulldf['wdsp_COR'] ),\n                    mode='lines',\n                    name='Cork Airport Wind Speed',showlegend=True), 2, 1, secondary_y=False)\n\n\n\nfig.update_layout(\n    xaxis=dict(\n        showline=True,\n        showgrid=False,\n        showticklabels=True,\n        linecolor='rgb(204, 204, 204)',\n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12,\n            color='rgb(82, 82, 82)',\n        ),\n    ),\n    yaxis=dict(\n        showgrid=False,\n        zeroline=False,\n        showline=False,\n        showticklabels=True,\n    ),\n    autosize=False,\n    margin=dict(\n        l=100,\n        r=20,\n        t=110,\n    ),\n    plot_bgcolor='white',\n    width=1000,\n    height=500\n)\nfig.show()","1122d466":"fulldf.loc[:, ['date', 'preds', 'ForecastWindMW', 'ActualWindMW_3']].tail()","458b5bef":"fulldf.shape","f461a182":"data_without_missing_values = fulldf.dropna(subset=[\"ActualWindMW_3\"], axis=0)\n#data_without_missing_values = data_without_missing_values.drop('ActualWindMW_3', axis =1)\ndata_without_missing_values.shape","0e40500a":"print('MAE:', mean_absolute_error(data_without_missing_values['ActualWindMW_3'], data_without_missing_values['preds']))\n","c56eeb71":"dayaheadpred = fulldf.iloc[0:24]  ","f86b721c":"print('MAE:', mean_absolute_error(dayaheadpred['ActualWindMW_3'], dayaheadpred['preds']))\n","de3f9977":"Weather forecast api\nhttps:\/\/data.gov.ie\/dataset\/met-eireann-weather-forecast-api\n","8a009bb7":"Load CSV Exported from http:\/\/smartgriddashboard.eirgrid.com\/","fd3b358d":"Load prepared Weather data from weather stations: Belmullet, Dublin Airport, Shannon Airport and Cork Airport","1ede12b3":"Load Eirgrid predictions Jul 27th to 29th","28a92a99":"# cast to int\nweatherds.wdsp_BEL = weatherds.wdsp_BEL.astype('int32')\nweatherds.wddir_BEL = weatherds.wddir_BEL.astype('int32')\nweatherds.wdsp = weatherds.wdsp.astype('int32')\nweatherds.wddir = weatherds.wddir.astype('int32')\nweatherds.wddsp_COR = weatherds.wdsp_COR.astype('int32')\nweatherds.wddir_COR = weatherds.wddir_COR.astype('int32')\nweatherds.wdsp_DUB = weatherds.wdsp_DUB.astype('int32')\nweatherds.wddir_DUB = weatherds.wddir_DUB.astype('int32')\n","37e6ed35":"Merge CSV to have all data based on Date and Region: All Island"}}