{"cell_type":{"e0186c96":"code","77ee6ad5":"code","eb539da1":"code","14430db0":"code","3f3f8c61":"code","4df49cf2":"code","5ed92547":"code","3e05c026":"code","91538220":"code","35e88daa":"code","333438f6":"code","63b28402":"code","bfe0b26c":"code","197c3b08":"code","4eaebe7a":"code","d7d7d935":"code","9855eeae":"code","dbc863e7":"code","f5948dab":"code","ce12b4e9":"code","19bbf005":"code","606cf00e":"code","c0dd20a1":"code","eee5140b":"code","2492f057":"code","7cc6f86c":"code","86a345c8":"code","c603ab66":"code","8983f68b":"code","ba0e97c8":"code","e2ebcc99":"code","041d6891":"code","471f9fc9":"code","27b2a3be":"code","f73fd164":"code","cfa317cb":"code","a7be900c":"code","021a7e11":"code","b86ead87":"code","0ee48b7f":"code","c5ba3713":"code","ab76b30e":"code","d1d02401":"code","0123e797":"code","07ed40fd":"code","e71e28bb":"code","7379aa53":"code","36904f9f":"code","33730d1e":"code","f387aa03":"code","efb1d657":"code","a945edc8":"code","d801f355":"code","ee8c710d":"code","4a3ead77":"code","53b123a6":"code","5500bf3c":"code","e84629bd":"code","83c68d2d":"code","0ca5d3f0":"code","ca2629ad":"code","c5076952":"code","712c2a56":"code","40e053f9":"code","062aa67c":"code","bbd33dfb":"code","62a6c433":"code","982a7379":"code","ca1367e0":"code","8f92689d":"code","d827eec5":"code","477dd544":"code","b2b199f2":"code","b4f8be1a":"code","ab57756d":"code","3f83c7f2":"code","1d561f13":"code","b1b7f72e":"code","91b2c186":"code","7083a784":"code","578a373e":"code","5c339c9c":"code","eb365a19":"code","1d0f791c":"code","775a1912":"code","9557c8e6":"code","427e4494":"code","faf35aac":"code","488b1ad8":"code","6836e779":"code","cecaa8bd":"code","03016d0a":"code","6b7264cf":"code","17188983":"code","40950ee2":"code","861ec810":"code","bef845f5":"code","0def3841":"code","cc0133f5":"code","290c71cc":"code","bb7be384":"code","69fe82bb":"code","5702e826":"code","cc223880":"code","bf0ed938":"code","b939fb35":"code","bbddc7f4":"code","60809d7d":"code","06aa480b":"code","0fa7d92e":"code","fd672e7b":"code","2bd66a04":"code","37d195ca":"code","f3fe4474":"code","ea6117c3":"code","7dc05df2":"code","44d5fc04":"code","836179aa":"code","8a715490":"code","b710f3bb":"code","3f584776":"code","b724ba82":"code","91762456":"code","9914261b":"code","ab16db78":"code","6ed233e4":"code","baf82786":"code","d943877d":"code","54f02c96":"code","096fba5f":"code","e77d455d":"code","c238ca85":"code","d1e928e0":"code","2363d7bc":"markdown","82e10caa":"markdown","2df0a7c2":"markdown","a6a04598":"markdown","8e1282e6":"markdown","e789be43":"markdown","9c79edee":"markdown","c805bdcc":"markdown","b8664d18":"markdown","ee214996":"markdown","f2d01f5d":"markdown","ce3c03dc":"markdown","d6537514":"markdown","48cde7d0":"markdown","a78101bf":"markdown","248b3cd8":"markdown","d72666e9":"markdown","a5d9af52":"markdown","2f7c1ae0":"markdown","ac370a6f":"markdown","3ffd0c13":"markdown","c06e615c":"markdown","c8785e7f":"markdown","8d4a6373":"markdown","bc358d44":"markdown","e0c7c16f":"markdown","3e7498dd":"markdown","9a4df5f7":"markdown","bd0b6478":"markdown","ed1eea93":"markdown","f70d2d51":"markdown","e5b1c476":"markdown","fb66353f":"markdown","c88a428a":"markdown","220bafe6":"markdown","f1f784d0":"markdown","49b9fca1":"markdown","eb5f90cb":"markdown","176463b9":"markdown","52419d92":"markdown","ddf36d36":"markdown","b2a42641":"markdown","095affa8":"markdown","5d4384a6":"markdown","d99350e3":"markdown","e6eb7678":"markdown","4e4c89a6":"markdown","5448fc81":"markdown","95b27774":"markdown","fb9d8477":"markdown","7d2d1111":"markdown","393889bd":"markdown","8dd9b79d":"markdown","a80f7d5c":"markdown","d3c9ebd3":"markdown","80464894":"markdown","0f510647":"markdown","0bbcf9b8":"markdown","90df0052":"markdown","57ea6d1b":"markdown","7f3ba301":"markdown","158a6125":"markdown","bbf449ef":"markdown","79ac2e35":"markdown","e41ca61c":"markdown"},"source":{"e0186c96":"import numpy as np\nimport pandas as pd","77ee6ad5":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","eb539da1":"train_df =  pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df =  pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nsubmission =  pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","14430db0":"train_df","3f3f8c61":"test_df","4df49cf2":"submission","5ed92547":"import random\nnp.random.seed(1234)\nrandom.seed(1234)","3e05c026":"print(train_df.shape)\nprint(test_df.shape)","91538220":"pd.set_option(\"display.max_columns\",50)\npd.set_option(\"display.max_rows\",50)","35e88daa":"train_df.head()","333438f6":"test_df.head()","63b28402":"train_df.dtypes","bfe0b26c":"train_df.describe()","197c3b08":"test_df.describe()","4eaebe7a":"train_df[\"Sex\"].value_counts()","d7d7d935":"train_df[\"Embarked\"].value_counts()","9855eeae":"train_df[\"Cabin\"].value_counts()","dbc863e7":"train_df.isnull().sum()","f5948dab":"test_df.isnull().sum()","ce12b4e9":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns","19bbf005":"plt.style.use('ggplot')","606cf00e":"train_df[[\"Embarked\",\"Survived\",\"PassengerId\"]]","c0dd20a1":"train_df[[\"Embarked\",\"Survived\",\"PassengerId\"]].dropna()","eee5140b":"train_df[[\"Embarked\",\"Survived\",\"PassengerId\"]].dropna().groupby([\"Embarked\",\"Survived\"]).count()","2492f057":"embarked_df = train_df[[\"Embarked\",\"Survived\",\"PassengerId\"]].dropna().groupby([\"Embarked\",\"Survived\"]).count().unstack()","7cc6f86c":"embarked_df","86a345c8":"embarked_df.plot.bar(stacked=True)","c603ab66":"embarked_df[\"survived_rate\"]=embarked_df.iloc[:,0]\/(embarked_df.iloc[:,0] + embarked_df.iloc[:,1])","8983f68b":"embarked_df","ba0e97c8":"sex_df = train_df[[\"Sex\",\"Survived\",\"PassengerId\"]].dropna().groupby([\"Sex\",\"Survived\"]).count().unstack()\nsex_df.plot.bar(stacked=True)","e2ebcc99":"ticket_df = train_df[[\"Pclass\",\"Survived\",\"PassengerId\"]].dropna().groupby([\"Pclass\",\"Survived\"]).count().unstack()\nticket_df.plot.bar(stacked=True)","041d6891":"plt.hist((train_df[train_df[\"Survived\"] == 0][\"Age\"].values, train_df[train_df[\"Survived\"] == 1][\"Age\"].values),\nhisttype=\"barstacked\", bins=8, label=(\"Death\", \"Survive\"))\nplt.legend()","471f9fc9":"train_df_corr = pd.get_dummies(train_df, columns=[\"Sex\"],drop_first=True)\ntrain_df_corr = pd.get_dummies(train_df_corr, columns=[\"Embarked\"])","27b2a3be":"train_df_corr.head()","f73fd164":"train_corr = train_df_corr.corr()","cfa317cb":"train_corr","a7be900c":"plt.figure(figsize=(9, 9))\nsns.heatmap(train_corr, vmax=1, vmin=-1, center=0, annot=True)","021a7e11":"all_df = pd.concat([train_df, test_df],sort=False).reset_index(drop=True)","b86ead87":"all_df","0ee48b7f":"all_df.isnull().sum()","c5ba3713":"Fare_mean = all_df[[\"Pclass\",\"Fare\"]].groupby(\"Pclass\").mean().reset_index()","ab76b30e":"Fare_mean.columns = [\"Pclass\",\"Fare_mean\"]","d1d02401":"Fare_mean","0123e797":"all_df = pd.merge(all_df, Fare_mean, on=\"Pclass\",how=\"left\")\nall_df.loc[(all_df[\"Fare\"].isnull()), \"Fare\"] = all_df[\"Fare_mean\"]\nall_df = all_df.drop(\"Fare_mean\",axis=1)","07ed40fd":"all_df[\"Name\"].head()","e71e28bb":"name_df = all_df[\"Name\"].str.split(\"[,.]\",2,expand=True)","7379aa53":"name_df.columns = [\"family_name\",\"honorific\",\"name\"]","36904f9f":"name_df","33730d1e":"name_df[\"family_name\"] =name_df[\"family_name\"].str.strip()\nname_df[\"honorific\"] =name_df[\"honorific\"].str.strip()\nname_df[\"name\"] =name_df[\"name\"].str.strip()","f387aa03":"name_df[\"honorific\"].value_counts()","efb1d657":"all_df = pd.concat([all_df, name_df],axis=1)","a945edc8":"all_df","d801f355":"plt.figure(figsize=(18, 5))\nsns.boxplot(x=\"honorific\", y=\"Age\", data=all_df)","ee8c710d":"all_df[[\"Age\",\"honorific\"]].groupby(\"honorific\").mean()","4a3ead77":"train_df = pd.concat([train_df,name_df[0:len(train_df)].reset_index(drop=True)],axis=1)\ntest_df = pd.concat([test_df,name_df[len(train_df):].reset_index(drop=True)],axis=1)","53b123a6":"honorific_df = train_df[[\"honorific\",\"Survived\",\"PassengerId\"]].dropna().groupby([\"honorific\",\"Survived\"]).count().unstack()\nhonorific_df.plot.bar(stacked=True)","5500bf3c":"honorific_age_mean = all_df[[\"honorific\",\"Age\"]].groupby(\"honorific\").mean().reset_index()\nhonorific_age_mean.columns = [\"honorific\",\"honorific_Age\"]","e84629bd":"all_df = pd.merge(all_df, honorific_age_mean, on=\"honorific\", how=\"left\")\nall_df.loc[(all_df[\"Age\"].isnull()), \"Age\"] = all_df[\"honorific_Age\"]\nall_df = all_df.drop([\"honorific_Age\"],axis=1)","83c68d2d":"all_df[\"family_num\"] = all_df[\"Parch\"] + all_df[\"SibSp\"]","0ca5d3f0":"all_df[\"family_num\"].value_counts()","ca2629ad":"all_df.loc[all_df[\"family_num\"] ==0, \"alone\"] = 1\nall_df[\"alone\"].fillna(0, inplace=True)","c5076952":"all_df = all_df.drop([\"PassengerId\",\"Name\",\"family_name\",\"name\",\"Ticket\",\"Cabin\"],axis=1)","712c2a56":"all_df.head()","40e053f9":"categories = all_df.columns[all_df.dtypes == \"object\"]\nprint(categories)","062aa67c":"all_df.loc[~((all_df[\"honorific\"] ==\"Mr\") |\n    (all_df[\"honorific\"] ==\"Miss\") |\n    (all_df[\"honorific\"] ==\"Mrs\") |\n    (all_df[\"honorific\"] ==\"Master\")), \"honorific\"] = \"other\"","bbd33dfb":"all_df.honorific.value_counts()","62a6c433":"from sklearn.preprocessing import LabelEncoder","982a7379":"all_df[\"Embarked\"].fillna(\"missing\", inplace=True)","ca1367e0":"all_df.head()","8f92689d":"for cat in categories:\n    le = LabelEncoder()\n    print(cat)\n    if all_df[cat].dtypes == \"object\":    \n        le = le.fit(all_df[cat])\n        all_df[cat] = le.transform(all_df[cat])","d827eec5":"all_df.head()","477dd544":"train_X = all_df[~all_df[\"Survived\"].isnull()].drop(\"Survived\",axis=1).reset_index(drop=True)\ntrain_Y = train_df[\"Survived\"]\ntest_X = all_df[all_df[\"Survived\"].isnull()].drop(\"Survived\",axis=1).reset_index(drop=True)","b2b199f2":"import lightgbm as lgb","b4f8be1a":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold","ab57756d":"X_train, X_valid, y_train, y_valid = train_test_split(train_X, train_Y, test_size=0.2)","3f83c7f2":"categories = [\"Embarked\", \"Pclass\", \"Sex\",\"honorific\",\"alone\"]","1d561f13":"lgb_train = lgb.Dataset(X_train, y_train, categorical_feature=categories)\nlgb_eval = lgb.Dataset(X_valid, y_valid,  categorical_feature=categories, reference=lgb_train)","b1b7f72e":"lgbm_params = {\n    \"objective\":\"binary\",        \n    \"random_seed\":1234\n}","91b2c186":"model_lgb = lgb.train(lgbm_params, \n                      lgb_train, \n                      valid_sets=lgb_eval, \n                      num_boost_round=100,\n                      early_stopping_rounds=20,\n                      verbose_eval=10)","7083a784":"model_lgb.feature_importance()","578a373e":"importance = pd.DataFrame(model_lgb.feature_importance(), index=X_train.columns, columns=[\"importance\"]).sort_values(by=\"importance\",ascending =True)\nimportance.plot.barh()","5c339c9c":"y_pred = model_lgb.predict(X_valid, num_iteration=model_lgb.best_iteration)","eb365a19":"from sklearn.metrics import accuracy_score","1d0f791c":"accuracy_score(y_valid, np.round(y_pred))","775a1912":"lgbm_params = {\n    \"objective\":\"binary\",\n    \"max_bin\":331,\n    \"num_leaves\": 20,\n    \"min_data_in_leaf\": 57,\n    \"random_seed\":1234\n}","9557c8e6":"lgb_train = lgb.Dataset(X_train, y_train, categorical_feature=categories)\nlgb_eval = lgb.Dataset(X_valid, y_valid, categorical_feature=categories, reference=lgb_train)","427e4494":"model_lgb = lgb.train(lgbm_params, lgb_train, \n                      valid_sets=lgb_eval, \n                      num_boost_round=100,\n                      early_stopping_rounds=20,\n                      verbose_eval=10)","faf35aac":"y_pred = model_lgb.predict(X_valid, num_iteration=model_lgb.best_iteration)","488b1ad8":"accuracy_score(y_valid, np.round(y_pred))","6836e779":"folds = 3\n\nkf = KFold(n_splits=folds)","cecaa8bd":"models = []\n\nfor train_index, val_index in kf.split(train_X):\n    X_train = train_X.iloc[train_index]\n    X_valid = train_X.iloc[val_index]\n    y_train = train_Y.iloc[train_index]\n    y_valid = train_Y.iloc[val_index]\n        \n    lgb_train = lgb.Dataset(X_train, y_train, categorical_feature=categories)\n    lgb_eval = lgb.Dataset(X_valid, y_valid, categorical_feature=categories, reference=lgb_train)    \n    \n    model_lgb = lgb.train(lgbm_params, \n                          lgb_train, \n                          valid_sets=lgb_eval, \n                          num_boost_round=100,\n                          early_stopping_rounds=20,\n                          verbose_eval=10,\n                         )\n    \n    \n    y_pred = model_lgb.predict(X_valid, num_iteration=model_lgb.best_iteration)\n    print(accuracy_score(y_valid, np.round(y_pred)))\n    \n    models.append(model_lgb)","03016d0a":"preds = []\n\nfor model in models:\n    pred = model.predict(test_X)\n    preds.append(pred)","6b7264cf":"preds_array = np.array(preds)\npreds_mean = np.mean(preds_array, axis=0)","17188983":"preds_int = (preds_mean > 0.5).astype(int)","40950ee2":"submission[\"Survived\"] = preds_int","861ec810":"submission","bef845f5":"submission.to_csv(\".\/titanic_submit01.csv\",index=False)","0def3841":"train_df =  pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df =  pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nall_df = pd.concat([train_df, test_df],sort=False).reset_index(drop=True)","cc0133f5":"all_df.Pclass.value_counts()","290c71cc":"all_df.Pclass.value_counts().plot.bar()","bb7be384":"all_df[[\"Pclass\",\"Fare\"]].groupby(\"Pclass\").describe()","69fe82bb":"plt.figure(figsize=(6, 5))\nsns.boxplot(x=\"Pclass\", y=\"Fare\", data=all_df)","5702e826":"all_df[\"Pclass2\"] = all_df[\"Pclass\"]","cc223880":"all_df.loc[all_df[\"Fare\"]>108, \"Pclass2\"] = 0","bf0ed938":"all_df[all_df[\"Pclass2\"] == 0]","b939fb35":"all_df[[\"Pclass2\",\"Age\"]].groupby(\"Pclass2\").describe()","bbddc7f4":"plt.figure(figsize=(6, 5))\nsns.boxplot(x=\"Pclass2\", y=\"Age\", data=all_df)","60809d7d":"all_df[all_df[\"Age\"]>15][[\"Pclass2\",\"Age\"]].groupby(\"Pclass2\").describe()","06aa480b":"plt.figure(figsize=(6, 5))\nsns.boxplot(x=\"Pclass2\", y=\"Age\", data=all_df[all_df[\"Age\"]>15])","0fa7d92e":"all_df.plot.scatter(x=\"Age\", y=\"Fare\", alpha=0.5)","fd672e7b":"all_df[\"family_num\"] = all_df[\"SibSp\"] + all_df[\"Parch\"]","2bd66a04":"all_df[[\"Pclass2\",\"family_num\"]].groupby(\"Pclass2\").describe()","37d195ca":"plt.figure(figsize=(6, 5))\nsns.boxplot(x=\"Pclass2\", y=\"family_num\", data=all_df)","f3fe4474":"Pclass_gender_df = all_df[[\"Pclass2\",\"Sex\",\"PassengerId\"]].dropna().groupby([\"Pclass2\",\"Sex\"]).count().unstack()","ea6117c3":"Pclass_gender_df.plot.bar(stacked=True)","7dc05df2":"Pclass_gender_df[\"male_ratio\"] = Pclass_gender_df[\"PassengerId\", \"male\"] \/ (Pclass_gender_df[\"PassengerId\", \"male\"] + Pclass_gender_df[\"PassengerId\", \"female\"])","44d5fc04":"Pclass_gender_df","836179aa":"Pclass_emb_df = all_df[[\"Pclass2\",\"Embarked\",\"PassengerId\"]].dropna().groupby([\"Pclass2\",\"Embarked\"]).count().unstack()","8a715490":"Pclass_emb_df = Pclass_emb_df.fillna(0)","b710f3bb":"Pclass_emb_df.plot.bar(stacked=True)","3f584776":"Pclass_emb_df_ratio = Pclass_emb_df.copy()\nPclass_emb_df_ratio[\"sum\"] = Pclass_emb_df_ratio[\"PassengerId\",\"C\"] + Pclass_emb_df_ratio[\"PassengerId\",\"Q\"] + Pclass_emb_df_ratio[\"PassengerId\",\"S\"]\nPclass_emb_df_ratio[\"PassengerId\",\"C\"] = Pclass_emb_df_ratio[\"PassengerId\",\"C\"] \/ Pclass_emb_df_ratio[\"sum\"]\nPclass_emb_df_ratio[\"PassengerId\",\"Q\"] = Pclass_emb_df_ratio[\"PassengerId\",\"Q\"] \/ Pclass_emb_df_ratio[\"sum\"]\nPclass_emb_df_ratio[\"PassengerId\",\"S\"] = Pclass_emb_df_ratio[\"PassengerId\",\"S\"] \/ Pclass_emb_df_ratio[\"sum\"]\nPclass_emb_df_ratio = Pclass_emb_df_ratio.drop([\"sum\"],axis=1)","b724ba82":"Pclass_emb_df_ratio","91762456":"Pclass_emb_df_ratio.plot.bar(stacked=True)","9914261b":"C_young10 = all_df[(all_df[\"Embarked\"] == \"C\") & (all_df[\"Age\"] \/\/ 10 == 1) & (all_df[\"family_num\"] == 0)]","ab16db78":"C_young20 = all_df[(all_df[\"Embarked\"] == \"C\") & (all_df[\"Age\"] \/\/ 10 == 2) & (all_df[\"family_num\"] == 0)]","6ed233e4":"len(C_young10)","baf82786":"len(C_young20)","d943877d":"ax = all_df.plot.scatter(x=\"Age\", y=\"Fare\", alpha=0.5)\nC_young10.plot.scatter(x=\"Age\", y=\"Fare\", color=\"red\",alpha=0.5, ax=ax)","54f02c96":"ax = all_df[all_df[\"family_num\"] == 0].plot.scatter(x=\"Age\", y=\"Fare\", alpha=0.5)\nC_young10.plot.scatter(x=\"Age\", y=\"Fare\", color=\"red\",alpha=0.5, ax=ax)","096fba5f":"ax = all_df.plot.scatter(x=\"Age\", y=\"Fare\", alpha=0.5)\nC_young20.plot.scatter(x=\"Age\", y=\"Fare\", color=\"red\",alpha=0.5, ax=ax)","e77d455d":"ax = all_df[all_df[\"family_num\"] == 0].plot.scatter(x=\"Age\", y=\"Fare\", alpha=0.5)\nC_young20.plot.scatter(x=\"Age\", y=\"Fare\", color=\"red\",alpha=0.5, ax=ax)","c238ca85":"C_all = all_df[(all_df[\"Embarked\"] == \"C\")]\nax = all_df.plot.scatter(x=\"Age\", y=\"Fare\", alpha=0.5)\nC_all.plot.scatter(x=\"Age\", y=\"Fare\", color=\"red\",alpha=0.5, ax=ax)","d1e928e0":"all_df[(all_df[\"Age\"] \/\/ 10 == 1) & (all_df[\"family_num\"]== 0)][[\"Embarked\",\"Fare\"]].groupby(\"Embarked\").mean()","2363d7bc":"#### \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u6570\u5024\u306b\u5909\u63db","82e10caa":"#### LightGBM\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5909\u66f4\u3057\u3066\u518d\u5b9f\u884c","2df0a7c2":"#### \u30e2\u30c7\u30eb\u306e\u5909\u6570\u306e\u91cd\u8981\u5ea6\u3092\u53ef\u8996\u5316","a6a04598":"#### \u30c7\u30fc\u30bf\u306e\u884c\u6570\u30fb\u5217\u6570\u3092\u78ba\u8a8d","8e1282e6":"#### \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u7d50\u5408","e789be43":"#### \u53ef\u8996\u5316\u3057\u305f\u3044\u30c7\u30fc\u30bf\u304b\u3089\u6b20\u640d\u5024\u3092\u9664\u5916","9c79edee":"### \u6a5f\u68b0\u5b66\u7fd2\u306b\u3088\u308b\u30e2\u30c7\u30ea\u30f3\u30b0","c805bdcc":"#### \u5168\u4f53\u306e\u4e2d\u306b\u304a\u3051\u308b\u300cCherbourg\u304b\u3089\u306e1\u4eba\u4e57\u8239\u306e\u82e5\u8005(10\u4ee3)\u300d\u3092\u78ba\u8a8d","b8664d18":"## 2. EDA","ee214996":"#### LightGBM\u7528\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210","f2d01f5d":"#### \u53c2\u8003\u307e\u3067\u306b\u3001Cherbourg\u304b\u3089\u306e\u4e57\u8239\u5ba2\u3092\u5168\u4f53\u306e\u4e2d\u3067\u78ba\u8a8d","ce3c03dc":"#### \u691c\u8a3c\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\u7cbe\u5ea6\u3092\u78ba\u8a8d","d6537514":"#### \u518d\u5ea6\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","48cde7d0":"## 4. Preprocessing & Feature Engineering","a78101bf":"#### \u30c7\u30fc\u30bf\u306e\u5148\u982d\u884c\u3092\u78ba\u8a8d","248b3cd8":"#### \u6e2f\u3054\u3068\u306e\u9055\u3044\u3092\u78ba\u8a8d","d72666e9":"#### \u300cCherbourg\u304b\u3089\u306e1\u4eba\u4e57\u8239\u3057\u305f20\u4ee3\u300d\u306b\u3064\u3044\u3066\u3082\u540c\u69d8\u306b\u78ba\u8a8d","a5d9af52":"#### 1\u4eba\u4e57\u8239\u306e\u4eba\u306b\u9650\u3063\u305f\u4e2d\u3067\u306e\u300cCherbourg\u304b\u3089\u306e1\u4eba\u4e57\u8239\u306e\u82e5\u8005(10\u4ee3)\u300d\u3092\u78ba\u8a8d","2f7c1ae0":"#### \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u304a\u3051\u308b\u4e88\u6e2c\u7d50\u679c\u306e\u7b97\u51fa","ac370a6f":"#### 15\u6b73\u3088\u308a\u4e0a\u306e\u4eba\u306b\u9650\u5b9a\u3057\u3066\u518d\u5ea6\u78ba\u8a8d","3ffd0c13":"#### \u5bb6\u65cf\u4eba\u6570\u3092\u8ffd\u52a0","c06e615c":"#### \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8","c8785e7f":"#### \u30c1\u30b1\u30c3\u30c8\u30af\u30e9\u30b9\u3054\u3068\u306e\u5e74\u9f62\u306e\u5206\u5e03\u3092\u78ba\u8a8d","8d4a6373":"## 3. Data Visualize","bc358d44":"## 1. Data Import","e0c7c16f":"#### \u30c1\u30b1\u30c3\u30c8\u30af\u30e9\u30b9\u3054\u3068\u306e\u4e57\u8239\u5bb6\u65cf\u4eba\u6570","3e7498dd":"#### \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u63cf\u753b","9a4df5f7":"#### submission\u30d5\u30a1\u30a4\u30eb\u306e\u751f\u6210","bd0b6478":"### \u524d\u51e6\u7406\u30fb\u7279\u5fb4\u91cf\u751f\u6210","ed1eea93":"#### \u6b20\u640d\u30c7\u30fc\u30bf\u3092\u7a74\u57cb\u3081","f70d2d51":"## Appendix1. Passenger Type","e5b1c476":"#### \u5e74\u9f62\u304c\u6b20\u640d\u3057\u3066\u3044\u308b\u3082\u306e\u306f\u3001\u656c\u79f0\u3054\u3068\u306e\u5e73\u5747\u5e74\u9f62\u3067\u88dc\u5b8c","fb66353f":"#### Embarked\u3068Survived\u306e\u5024\u3067\u96c6\u8a08","c88a428a":"#### \u30c7\u30fc\u30bf\u306e\u578b\u3092\u78ba\u8a8d","220bafe6":"#### \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u6307\u5b9a","f1f784d0":"#### \u540c\u8239\u3057\u3066\u3044\u308b\u5bb6\u65cf\u4eba\u6570\u304c0\u4eba(1\u4eba\u4e57\u8239)\u304b\u3069\u3046\u304b\u3092\u8868\u3059alone\u3068\u3044\u3046\u5909\u6570\u3092\u8ffd\u52a0","49b9fca1":"#### \u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272","eb5f90cb":"#### \u30c7\u30fc\u30bf\u3092\u6a2a\u6301\u3061\u306b\u5909\u63db","176463b9":"#### \u656c\u79f0\u306e\u5909\u6570\u3092\u8ffd\u52a0","52419d92":"### \u30c7\u30fc\u30bf\u306e\u6982\u8981\u3092\u78ba\u8a8d","ddf36d36":"### \u4e57\u5ba2\u3092\u30af\u30e9\u30b9\u30bf\u3054\u3068\u306b\u5206\u985e","b2a42641":"## Appendix2. young passenger from Cherbourg","095affa8":"#### \u5404\u4e57\u8239\u6e2f\u3054\u3068\u306b\u300110\u4ee31\u4eba\u4e57\u8239\u5ba2\u306e\u5e73\u5747\u6599\u91d1\u3092\u6bd4\u8f03","5d4384a6":"### \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","d99350e3":"#### \u656c\u79f0\u306fMr\u3001Miss\u3001Mrs\u3001Master\u4ee5\u5916\u306f\u6570\u304c\u5c11\u306a\u3044\u305f\u3081\u3001other\u3068\u3057\u3066\u7d71\u5408","e6eb7678":"#### \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u4efb\u610f\u306e\u5217\u3092\u62bd\u51fa","4e4c89a6":"### \u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316","5448fc81":"#### \u7a4d\u307f\u4e0a\u3052\u7e26\u68d2\u30b0\u30e9\u30d5\u3067\u53ef\u8996\u5316","95b27774":"#### \u656c\u79f0\u306b\u3088\u308b\u751f\u5b58\u7387\u306e\u9055\u3044\u3092\u78ba\u8a8d","fb9d8477":"## 5. Modeling","7d2d1111":"#### \u76f8\u95a2\u884c\u5217\u3092\u4f5c\u6210","393889bd":"#### \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u78ba\u8a8d","8dd9b79d":"#### \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u308b\u5b66\u7fd2","a80f7d5c":"#### \u6b20\u640d\u5024\u306e\u78ba\u8a8d","d3c9ebd3":"### \u300cCherbourg\u304b\u3089\u306e1\u4eba\u4e57\u8239\u306e\u82e5\u8005\u300d\u3068\u3044\u3046\u30af\u30e9\u30b9\u30bf\u306e\u7279\u5fb4\u3092\u5206\u6790","80464894":"#### \u30c1\u30b1\u30c3\u30c8\u30af\u30e9\u30b9\u3054\u3068\u306e\u7537\u5973\u6bd4","0f510647":"#### \u5e74\u9f62\u3068\u4e57\u8239\u6599\u91d1\u306e\u5206\u5e03","0bbcf9b8":"#### \u5168\u4f53\u30c7\u30fc\u30bf\u3067\u6b20\u640d\u5024\u306e\u6570\u3092\u78ba\u8a8d","90df0052":"#### \u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a","57ea6d1b":"#### LightGBM\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8","7f3ba301":"#### \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u30c0\u30df\u30fc\u5909\u6570\u5316","158a6125":"#### \u30c7\u30fc\u30bf\u306e\u7d71\u8a08\u91cf\u3092\u78ba\u8a8d","bbf449ef":"#### \u4e0d\u8981\u306a\u5909\u6570\u3092\u524a\u9664","79ac2e35":"#### \u53ef\u8996\u5316\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8","e41ca61c":"#### 1\u7b49\u7d1a\u30c1\u30b1\u30c3\u30c8\u306e\u3046\u3061\u3001\u9ad8\u984d\u30c1\u30b1\u30c3\u30c8(Fare108\u4ee5\u4e0a\u30011\u7b49\u7d1a\u30c1\u30b1\u30c3\u30c8\u306e\u4e0a\u4f4d25%)\u3092Pclass0\u306b"}}