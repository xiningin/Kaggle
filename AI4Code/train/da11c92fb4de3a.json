{"cell_type":{"127d0ffc":"code","450998b1":"code","1c607a50":"code","eed7c798":"code","4c458b81":"code","c81a4662":"code","23f6b628":"code","3bfe9525":"code","d9172f51":"code","99eca8d1":"code","cd37cb33":"code","9a7ceb95":"code","17ae4829":"code","b8d1aec7":"code","47bba0a3":"code","9dcda31c":"code","3883670c":"code","a1ec67cf":"code","ceb7d909":"code","1d7edb78":"code","fdf1f9b4":"code","27914b06":"code","a1ab00e3":"markdown","c8f9535c":"markdown","bdf39bac":"markdown","82f40ee7":"markdown","183d1f2c":"markdown","4b2c2a9e":"markdown"},"source":{"127d0ffc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","450998b1":"df = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf.head()","1c607a50":"df.describe()","eed7c798":"df.shape","4c458b81":"df.dtypes","c81a4662":"df.isnull().sum().any()","23f6b628":"#Though there is no null value certain columns have 0's which is considered to be NaN values\ndf[['Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']] = df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']].replace(0,np.NaN) ","3bfe9525":"df.isnull().sum()","d9172f51":"#Replacing NaN values with their median value\nfor column in ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']:\n    df[column].replace(np.nan,df[column].median(),inplace = True)\ndf.head()","99eca8d1":"df.Outcome.value_counts()","cd37cb33":"# Grouping predictor variables by target variable\ndf.groupby(\"Outcome\")[[\"Pregnancies\",\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\",\"Age\"]].agg(['max','min','mean'])","9a7ceb95":"sns.countplot(x=\"Outcome\", data=df)\n","17ae4829":"#Let's see how the features are correlated\nplt.figure(figsize=(12, 8))\nsns.heatmap(df.corr(),annot=True)\nplt.title(\"Correlation heatmap\")","b8d1aec7":"df['Age_Group'] = pd.cut(df['Age'],\n                         [10,20,30,40,50,60],\n                         labels=['11-20','21-30','31-40','41-50','51+'])\n","47bba0a3":"fig,ax = plt.subplots(figsize=(8,6))\nsns.countplot(data=df,x = 'Age_Group',hue= 'Outcome',ax=ax)\nplt.title('Age vs Outcome')\n","9dcda31c":"df.drop([\"Age_Group\"],axis = 1,inplace = True)","3883670c":"fig, ax = plt.subplots(4,2, figsize=(16,16))\nsns.kdeplot(data=df['Age'],color = 'r',shade = True,ax=ax[0][0])\nsns.kdeplot(data=df['Pregnancies'],color = 'b',shade = True,ax=ax[0][1])\nsns.kdeplot(data=df['Glucose'], color = 'r',shade = True,ax=ax[1][0])\nsns.kdeplot(data=df['BloodPressure'],color = 'b',shade = True,ax=ax[1][1])\nsns.kdeplot(data=df['SkinThickness'],shade = True,color = 'r',ax=ax[2][0])\nsns.kdeplot(data=df['Insulin'],shade = True,color = 'b',ax=ax[2][1])\nsns.kdeplot(data=df['DiabetesPedigreeFunction'],shade = True,color = 'r',ax=ax[3][0])\nsns.kdeplot(data=df['BMI'],shade = True,color = 'b',ax=ax[3][1])\n","a1ec67cf":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.tree import DecisionTreeRegressor","ceb7d909":"X = df.drop([\"Outcome\"], axis = 1)\ny = df[\"Outcome\"]","1d7edb78":"train_X, test_X, train_y, test_y = train_test_split(X, y, test_size = 0.30, random_state = 1)","fdf1f9b4":"classifier = DecisionTreeRegressor(random_state = 1)\n\n# fit your model\nclassifier.fit(train_X, train_y)\n\n#prediction\npredicted_values = classifier.predict(test_X)\n\ncm = confusion_matrix(test_y,predicted_values)\nprint(cm)\naccuracy_score(test_y, predicted_values)\n","27914b06":"classifier =  LogisticRegression(random_state = 1,max_iter = 150)\n\n# fit your model\nclassifier.fit(train_X, train_y)\n\n#prediction\npredicted_values = classifier.predict(test_X)\n\ncm = confusion_matrix(test_y,predicted_values)\nprint(cm)\naccuracy_score(test_y, predicted_values)\n","a1ab00e3":"# **2.Data Preprocessing**","c8f9535c":"# **Building models**","bdf39bac":"# **Logistic Regression model**","82f40ee7":"# 1.**Reading the required data**","183d1f2c":"# **3.Data Visualizations**","4b2c2a9e":"# **Decision Tree Model**"}}