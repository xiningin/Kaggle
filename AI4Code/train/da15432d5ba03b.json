{"cell_type":{"e257586a":"code","fe6a398b":"code","61bf2f55":"code","5c9d5b98":"code","196ac028":"code","a20292cd":"code","6495bd81":"code","2aa3add5":"code","cdc7d6b4":"code","9af715e9":"code","117d05dd":"code","5fbf7313":"code","6aa2b382":"code","fc5a27c6":"code","a9b9397b":"code","0dff19d1":"code","4521cd47":"code","d9fb3445":"code","95b3dc41":"code","124b2408":"code","a98ffbbc":"code","c84a7dcd":"code","29c41e20":"code","5b362f69":"code","6bb13809":"code","88f2f364":"code","39a43965":"code","ec7ad9c6":"code","3bbc2649":"code","70a96444":"code","20cf52c3":"code","759bc5a2":"code","a16bcc47":"code","d4def6b6":"code","c4ed781a":"code","7cb038b9":"code","47ae9b50":"code","edccdc84":"code","0d38970a":"code","af47cbe6":"code","54deb1a9":"code","ba82bd05":"code","b1667da8":"code","b2132d62":"code","abcd2765":"code","6d0ce11e":"markdown","c8aa0f11":"markdown","c3618e61":"markdown","6268d140":"markdown","b83cb090":"markdown","93fc378a":"markdown","04b14ea2":"markdown","ea153704":"markdown","4fe558b9":"markdown","cb99ea5f":"markdown","9f5c79f6":"markdown","ce9527ad":"markdown","69f7665c":"markdown","d1f29c15":"markdown","d0861c92":"markdown","d4d344a6":"markdown","603ae516":"markdown","879e804c":"markdown","2e487715":"markdown","5172646f":"markdown","440e5d4b":"markdown","253f286b":"markdown","c9a00c73":"markdown","8b6ed94e":"markdown"},"source":{"e257586a":"#import the packages that I want to use ","fe6a398b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')","61bf2f55":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","5c9d5b98":"train.columns","196ac028":"train.head()","a20292cd":"test.head()","6495bd81":"# get the Id for train and test set\nn = train.shape[0]\ntrain_Id = train['Id']\ntest_Id = test['Id']\ny_train = train['SalePrice']\ntrain.drop('Id', axis=1,inplace=True)\ntest.drop('Id', axis=1, inplace=True)","2aa3add5":"# combine train and test data for processing\ndata = pd.concat((train,test)).reset_index(drop=True)\ndata.drop(['SalePrice'], axis=1, inplace=True)","cdc7d6b4":"data.shape","9af715e9":"sns.set_style('whitegrid')","117d05dd":"sns.distplot(y_train)","5fbf7313":"y_train = np.log1p(y_train)","6aa2b382":"sns.distplot(y_train)","fc5a27c6":"missing = (data.isnull().sum()\/ data.isnull().count()).sort_values(ascending=False)\nmissing = pd.DataFrame({'missing percentage':missing})","a9b9397b":"missing.head(40)","0dff19d1":"data = data.drop(['PoolQC', 'MiscFeature', 'Alley', 'Fence'], axis=1)","4521cd47":"for i in ('FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'MasVnrType',\n         'MSSubClass','BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    data[i] = data[i].fillna('None')","d9fb3445":"for j in ('GarageYrBlt', 'GarageArea', 'GarageCars','BsmtFinSF1', 'BsmtFinSF2', \n            'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath','MasVnrArea'):\n    data[j] = data[j].fillna(0)","95b3dc41":"data['MSZoning'] = data['MSZoning'].fillna(data['MSZoning'].mode()[0])","124b2408":"data['Electrical'] = data['Electrical'].fillna(data['Electrical'].mode()[0])\ndata['KitchenQual'] = data['KitchenQual'].fillna(data['KitchenQual'].mode()[0])\ndata['Exterior1st'] = data['Exterior1st'].fillna(data['Exterior1st'].mode()[0])\ndata['Exterior2nd'] = data['Exterior2nd'].fillna(data['Exterior2nd'].mode()[0])\ndata['SaleType'] = data['SaleType'].fillna(data['SaleType'].mode()[0])","a98ffbbc":"#group by neighborhood and apply the median of the neighbor\ndata[\"LotFrontage\"] = data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))","c84a7dcd":"data = data.drop(['Utilities'], axis=1)\ndata[\"Functional\"] = data[\"Functional\"].fillna(\"Typ\")","29c41e20":"missing1 = (data.isnull().sum()\/ data.isnull().count()).sort_values(ascending=False)\nmissing1 = pd.DataFrame({'missing percentage':missing1})","5b362f69":"missing1.head()","6bb13809":"data = pd.get_dummies(data)","88f2f364":"data.head(10)","39a43965":"#split train and test set\ntrain = data[:n]\ntest = data[n:]","ec7ad9c6":"train.shape","3bbc2649":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb","70a96444":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))","20cf52c3":"ENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3610))","759bc5a2":"Ridge = KernelRidge(alpha=1, kernel='polynomial', degree=2, coef0=2.5)","a16bcc47":"Xgboost = xgb.XGBRegressor(colsample_bytree=0.46, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.78, n_estimators=2200,\n                             reg_alpha=0.464, reg_lambda=0.857,\n                             subsample=0.52, silent=1,\n                             random_state =7, nthread = -1)","d4def6b6":"#cross validation to calculate the rmse\nn_folds = 5","c4ed781a":"kf = KFold(n_folds, shuffle=True, random_state=3610).get_n_splits(train.values)","7cb038b9":"rmse_lasso = np.sqrt(-cross_val_score(lasso, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))","47ae9b50":"print(rmse_lasso.mean())","edccdc84":"rmse_enet = np.sqrt(-cross_val_score(ENet, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))","0d38970a":"print(rmse_enet.mean())","af47cbe6":"rmse_xgboost = np.sqrt(-cross_val_score(Xgboost, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))","54deb1a9":"print(rmse_xgboost.mean())","ba82bd05":"fitted = Xgboost.fit(train, y_train)","b1667da8":"predictions = Xgboost.predict(test)","b2132d62":"predictions = np.exp(predictions)","abcd2765":"sub = pd.DataFrame()\nsub['Id'] = test_Id\nsub['SalePrice'] = predictions\nsub.to_csv('submission.csv',index=False)","6d0ce11e":"For remain variables, I filled out based on the conditions.\n1. For numeric variables, I used mean or median to replace with the None.\n2. For categorical variables, I used proportion category to replace with the None.","c8aa0f11":"C. Some variables just miss one or two values so I fill it with the most common values.      \nMSZoning: 'RL' is the most common value so I fill in missing values with 'RL'","c3618e61":"### Backgroung","6268d140":"## Modeling","b83cb090":"# House Price Prediction","93fc378a":"B. Fill the variable 'GarageYrBlt', 'GarageArea', 'GarageCars','BsmtFinSF1', 'BsmtFinSF2', \n            'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath' with 0","04b14ea2":"## Preprocessing","ea153704":"E. Other special variables          \nUtilities: For this categorical feature all records are \"AllPub\", except for one \"NoSeWa\" and 2 NA. This feature won't help in the prediction and I removed it.            \nFunctional: data description says NA means typical         ","4fe558b9":"### Gradient Boosting Regression","cb99ea5f":"With 79 explanatory variables describing (almost) every aspect of residential homes in Ames, Iowa, I predict the final price of each home.","9f5c79f6":"### Ridge","ce9527ad":"A. Fill the variable 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond' with None.","69f7665c":"D. Numeric variable         \nLotFrontage : I fill in the missing values according to the meadian LotFrontage of the neighborhood because the variable have a similar value to its neighborhood.","d1f29c15":"### Submission","d0861c92":"### Xgboost","d4d344a6":"I dropped the variable which has more than 80% missing data.","603ae516":"### Visualize","879e804c":"### Elastic Net","2e487715":"### Lasso","5172646f":"### Getting dummy variables","440e5d4b":"Linear models assume that the distribution for the response should be normal so I transformed the SalePrice with log function.","253f286b":"### Missing Data","c9a00c73":"### Linear Regression","8b6ed94e":"### RMSE"}}