{"cell_type":{"f4c11b52":"code","a0f6f1c7":"code","c7373082":"code","98edd3ef":"code","66a9b5f1":"code","d8b3cfe2":"code","d1a999cc":"code","49f2edf8":"code","5740e729":"code","2f4eab16":"code","d24c47b1":"code","e51b9151":"code","169d4172":"code","410d09d3":"code","2a0ed2b1":"code","a599075b":"code","f74d53f9":"code","4886bf2f":"code","e504f522":"code","5391ab94":"code","b3f400f8":"code","bb89ce8a":"code","4c04be5c":"code","d10a54de":"code","a8257eac":"code","a01b9db1":"code","f5a5fab1":"code","4adcb5e0":"markdown","c870d1b5":"markdown","6d48510b":"markdown","2f5d197e":"markdown","bbdf4121":"markdown","76ede77b":"markdown","8229abce":"markdown","5cec7b33":"markdown","7b573fe0":"markdown","8efca858":"markdown","cd101105":"markdown","eaeb47d2":"markdown","edde42c5":"markdown","40ba4fe4":"markdown","d4077dc2":"markdown","f30925f7":"markdown","46d7993b":"markdown","785bb90d":"markdown","bb1d34f8":"markdown","ab7a49eb":"markdown","009f6598":"markdown","170e8408":"markdown","e9a9b96c":"markdown","74016146":"markdown","565d65dc":"markdown","f3d4ce7a":"markdown","09926a3e":"markdown","a8a637b8":"markdown","3cdb0487":"markdown","087231bc":"markdown"},"source":{"f4c11b52":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'font.size': 14})\n\nfrom wordcloud import WordCloud, STOPWORDS# Generate word cloud\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","a0f6f1c7":"netflix_shows = pd.read_csv('..\/input\/data-journalism-data-preparation-1-5\/netflix_shows.csv')\nnetflix_shows.head()","c7373082":"netflix_shows[\"rating\"].value_counts()","98edd3ef":"fig = plt.figure(figsize=(12,6))\nsns.countplot(netflix_shows[\"rating\"], palette='Reds')\nplt.show()","66a9b5f1":"# Clean up ratings by replacing them with plausible counterparts\nnetflix_shows.rating = netflix_shows.rating.replace({\"TV-Y7-FV\" : \"TV-Y7\", \"R\" : \"TV-MA\"})\n\nfig = plt.figure(figsize=(10,6))\nsns.countplot(netflix_shows[\"rating\"], palette='Reds')\nplt.show()","d8b3cfe2":"fig, ax = plt.subplots(3, 1, figsize=(12,18))\nsns.countplot(netflix_shows[\"date_added_weekday\"], palette='Reds', ax=ax[0])\nsns.countplot(netflix_shows[\"date_added_day\"], palette='Reds', ax=ax[1])\nsns.countplot(netflix_shows[\"date_added_month\"], palette='Reds', ax=ax[2])\n\nplt.show()","d1a999cc":"display(netflix_shows[netflix_shows.columns[netflix_shows.columns.str.startswith('director')]].sum(axis=0).sort_values(ascending=False))\n\nnetflix_shows.drop(\"director_Unknown\", axis=1, inplace=True)","49f2edf8":"temp = netflix_shows[netflix_shows.columns[netflix_shows.columns.str.startswith('country')]].sum(axis=0).sort_values(ascending=False).to_frame().reset_index()\ntemp.columns = ['country', 'number_tv_shows']\n\nfig, ax = plt.subplots(1, 1, figsize=(16,6))\n\nsns.barplot(data=temp[temp.number_tv_shows > 20], x='country', y='number_tv_shows', palette='Reds')\n\nfor tick in ax.xaxis.get_major_ticks():\n        tick.label.set_rotation(90) \nplt.show()\n\nmost_common_countries = temp[temp.number_tv_shows > 20].country.values\nmost_common_countries = [c for c in most_common_countries if c != 'country_Unknown']\n\nnetflix_shows.drop(\"country_Unknown\", axis=1, inplace=True)","5740e729":"display(netflix_shows[netflix_shows.columns[netflix_shows.columns.str.startswith('cast')]].sum(axis=0).sort_values(ascending=False))","2f4eab16":"display(netflix_shows[netflix_shows.columns[netflix_shows.columns.str.startswith('listed_in')]].sum(axis=0).sort_values(ascending=False))\n\ntemp = netflix_shows[netflix_shows.columns[netflix_shows.columns.str.startswith('listed_in')]].sum(axis=1)\nsns.countplot(temp, palette='Reds');","d24c47b1":"netflix_shows.drop(\"listed_in_TVShows\", axis=1, inplace=True)\n\ncategory_cols = ['listed_in_AnimeSeries', \n                 'listed_in_Classic&CultTV', \n                 'listed_in_CrimeTVShows',\n                 'listed_in_Docuseries', \n                 'listed_in_RealityTV',\n                 'listed_in_RomanticTVShows', \n                 'listed_in_Science&NatureTV',\n                 'listed_in_Stand-UpComedy&TalkShows', \n                 'listed_in_TVAction&Adventure',\n                 'listed_in_TVComedies', \n                 'listed_in_TVDramas', \n                 'listed_in_TVHorror',\n                 'listed_in_TVMysteries', \n                 'listed_in_TVSci-Fi&Fantasy',\n                 'listed_in_TVThrillers',\n                 \"listed_in_Kids'TV\"]\n\ndisplay(netflix_shows[category_cols].sum(axis=0).sort_values(ascending=False))\n\ntemp = netflix_shows[category_cols].sum(axis=1)\nsns.countplot(temp, palette='Reds');\n\ntemp = netflix_shows[category_cols].corr()\n\nf, ax = plt.subplots(nrows=1, ncols=1, figsize=(12,10))\nsns.heatmap(temp, cmap=plt.cm.get_cmap('RdGy').reversed(), vmin=-0.5, vmax=0.5)#, annot=True)\nplt.show()","e51b9151":"fig, ax = plt.subplots(nrows=1,ncols=3,figsize=(20,6))\n\nsns.histplot(netflix_shows.first_release_year, ax=ax[0], bins=50, color=\"#E50914\")\nax[0].set_title('.histplot()')\n\nsns.kdeplot(netflix_shows.first_release_year, ax=ax[1], color=\"#E50914\")\nax[1].set_title('.kdeplot()')\n\nsns.boxplot(netflix_shows.first_release_year, ax=ax[2], color=\"#E50914\")\nax[2].set_title('.boxplot()')\n\nplt.show()","169d4172":"# Remove missing values maked with 1800\n#display(netflix_shows.date_added_year[netflix_shows.date_added_year != 1800].value_counts())\nfig = plt.figure(figsize=(10,6))\nsns.histplot(netflix_shows.date_added_year[netflix_shows.date_added_year != 1800], color=\"#E50914\")\nplt.show()","410d09d3":"fig = plt.figure(figsize=(10,6))\nsns.histplot(netflix_shows.time_first_release_to_netflix[netflix_shows.date_added_year != 1800], color=\"#E50914\", bins=50)\nplt.show()","2a0ed2b1":"fig = plt.figure(figsize=(10,6))\nsns.histplot(netflix_shows.duration, color=\"#E50914\")\nplt.show()","a599075b":"display(netflix_shows[netflix_shows.columns[netflix_shows.columns.str.startswith('dtm_descr')]].sum(axis=0).sort_values(ascending=False).head(15))","f74d53f9":"display(netflix_shows[netflix_shows.columns[netflix_shows.columns.str.startswith('dtm_title')]].sum(axis=0).sort_values(ascending=False).head(15))","4886bf2f":"fig, ax = plt.subplots(4, 4, figsize=(24, 24))\n\nj = 0\nk = -1\nfor i, cat in enumerate(category_cols):\n\n    j = (i % 4)\n    if j == 0:\n        k=k+1\n    temp = netflix_shows[netflix_shows[cat] == 1][most_common_countries].sum(axis=0).sort_values(ascending=False).head(5).to_frame().reset_index()\n    temp.columns = ['country', 'amount']\n    sns.barplot(data=temp, \n                x='country', \n                y='amount', \n               palette='Reds', ax=ax[k,j])\n    ax[k,j].set_title(cat)\n    for tick in ax[k,j].xaxis.get_major_ticks():\n        tick.label.set_rotation(90) \n    \n\n\nplt.tight_layout()","e504f522":"fig, ax = plt.subplots(4, 5, figsize=(24, 24))\n\nj = 0\nk = -1\nfor i, country in enumerate(most_common_countries):\n\n    j = (i % 5)\n    if j == 0:\n        k=k+1\n    temp = netflix_shows[netflix_shows[country] == 1][category_cols].sum(axis=0).sort_values(ascending=False).head(5).to_frame().reset_index()\n    temp.columns = ['category', 'amount']\n    sns.barplot(data=temp, \n                x='category', \n                y='amount', \n               palette='Reds', ax=ax[k,j])\n    ax[k,j].set_title(country)\n    for tick in ax[k,j].xaxis.get_major_ticks():\n        tick.label.set_rotation(90) \n    \n\n\nplt.tight_layout()","5391ab94":"country_cols = netflix_shows.columns[netflix_shows.columns.str.startswith('country')].values\n\ndisplay(netflix_shows[netflix_shows.listed_in_KoreanTVShows == 1][country_cols].sum(axis=0).sort_values(ascending=False).head(10))\n\ndisplay(netflix_shows[netflix_shows.listed_in_BritishTVShows == 1][country_cols].sum(axis=0).sort_values(ascending=False).head(10))\n\ndisplay(netflix_shows[netflix_shows['listed_in_Spanish-LanguageTVShows'] == 1][country_cols].sum(axis=0).sort_values(ascending=False).head(10))\n","b3f400f8":"## Relationsships\ntemp = netflix_shows.groupby('rating')[netflix_shows.columns[netflix_shows.columns.str.startswith('listed_in')]].sum().T\ntemp = temp[['NR', 'TV-Y', 'TV-Y7', 'TV-G', 'TV-PG',  'TV-14','TV-MA', ]]\ndisplay(temp.style.background_gradient(cmap='Reds', vmin=0, vmax=100).format(\"{:.0f}\").set_caption('Number Training Pathes per Floor for Buildings in Test Set'))\n\ndisplay(netflix_shows[(netflix_shows.listed_in_TVThrillers == 1) & ((netflix_shows.rating == \"TV-Y\") | (netflix_shows.rating == \"TV-Y7\"))])","bb89ce8a":"temp = netflix_shows[netflix_shows.date_added_year != 1800].groupby('date_added_year').date_added_weekday.value_counts().to_frame()\ntemp.columns = ['weekday_count']\ntemp.reset_index(drop=False, inplace=True)\ntemp = temp.pivot(index='date_added_year', columns='date_added_weekday').weekday_count\ntemp.style.background_gradient(cmap='Reds', vmin=0, vmax=200).format(\"{:.0f}\")#.set_caption('Number Training Pathes per Floor for Buildings in Test Set')\n","4c04be5c":"def get_wordcloud_from_df(df):\n    text = []\n    for i in range(len(df)):\n\n        word = df.index[i].split('dtm_descr_')[1]\n\n        for j in range(df.iloc[i]):\n            text = text + [word]\n\n    wordcloud = WordCloud(width = 3000, height = 2000, random_state=1, \n                      background_color='white', \n                      colormap='Reds', \n                      collocations=False, \n                      stopwords = STOPWORDS).generate(', '.join(text))\n    \n    return wordcloud\n\nfig, ax = plt.subplots(2, 2, figsize=(12, 12))\n\ntemp = netflix_shows[(netflix_shows.listed_in_TVDramas == 1) & (netflix_shows.country_India == 1)][netflix_shows.columns[netflix_shows.columns.str.startswith('dtm_descr')]].sum(axis=0).sort_values(ascending=False).head(15)\nwordcloud = get_wordcloud_from_df(temp)\nax[0,0].imshow(wordcloud) \nax[0,0].axis(\"off\");\nax[0,0].set_title('Indian TV Dramas')\n\ntemp = netflix_shows[(netflix_shows.listed_in_TVDramas == 1) & ((netflix_shows.country_Japan == 1)  | (netflix_shows.country_SouthKorea == 1)| (netflix_shows.country_China == 1)| (netflix_shows.country_Taiwan == 1))][netflix_shows.columns[netflix_shows.columns.str.startswith('dtm_descr')]].sum(axis=0).sort_values(ascending=False).head(15)\nwordcloud = get_wordcloud_from_df(temp)\nax[0,1].imshow(wordcloud) \nax[0,1].axis(\"off\");\nax[0,1].set_title('Asian TV Dramas')\n\ntemp = netflix_shows[(netflix_shows.listed_in_TVDramas == 1) & (netflix_shows.country_UnitedStates == 1)][netflix_shows.columns[netflix_shows.columns.str.startswith('dtm_descr')]].sum(axis=0).sort_values(ascending=False).head(15)\nwordcloud = get_wordcloud_from_df(temp)\nax[1,0].imshow(wordcloud) \nax[1,0].axis(\"off\");\nax[1,0].set_title('U.S. TV Dramas')\n\ntemp = netflix_shows[(netflix_shows.listed_in_TVDramas == 1) & ((netflix_shows.country_Spain == 1)  | (netflix_shows.country_Colombia == 1)| (netflix_shows.country_Mexico == 1))][netflix_shows.columns[netflix_shows.columns.str.startswith('dtm_descr')]].sum(axis=0).sort_values(ascending=False).head(15)\nwordcloud = get_wordcloud_from_df(temp)\nax[1,1].imshow(wordcloud) \nax[1,1].axis(\"off\");\nax[1,1].set_title('Spanish TV Dramas')\n\nplt.show()","d10a54de":"netflix_shows['n_listed_countries'] = netflix_shows[netflix_shows.columns[netflix_shows.columns.str.startswith('country')]].sum(axis=1)\nsns.countplot(netflix_shows['n_listed_countries'], palette='Reds');\nplt.show()\n\nnetflix_shows[['title', 'n_listed_countries']].sort_values(by = 'n_listed_countries', ascending=False).head(15).style.set_caption('TV Shows listed in most countries')","a8257eac":"\"\"\"temp = netflix_shows[(netflix_shows.date_added_year != 1800) & netflix_shows.country.isin(netflix_shows.country.value_counts().head(20).index)].groupby('date_added_year').country.value_counts().to_frame()\ntemp.columns = ['country_count']\ntemp.reset_index(drop=False, inplace=True)\ntemp = temp.pivot(index='date_added_year', columns='country').country_count.T\ntemp.style.background_gradient(cmap='Reds', vmin=0, vmax=200).format(\"{:.0f}\")#.set_caption('Number Training Pathes per Floor for Buildings in Test Set')\n\"\"\"","a01b9db1":"[# 'director',  \n# 'country',\n #'rating',\n #'date_added_month', \n #'date_added_day',\n #'date_added_weekday', \n# 'cast',\n   # 'listed_in', \n 'description', 'dtm_description', \n    'title','dtm_title',\n   # 'date_added_year', \n    #'first_release_year',\n   # 'time_first_release_to_netflix'\n # 'duration',\n ]","f5a5fab1":"# Save current state to output\nnetflix_shows.to_csv(\"netflix_shows.csv\", index=False)","4adcb5e0":"### Category","c870d1b5":"<div class=\"alert alert-block alert-danger\">\n<b>Findings:<\/b> \n     <ul>\n  <li>The majority of TV shows are added close to their release<\/li>\n  <li>However, since Netflix has not been around for many decades, there are TV shows with more than 15 years between their first release and their addition to the Netflix library<\/li>\n<\/ul> \n<\/div>","6d48510b":"# Feature Characteristics\nFirst we will look at each individual feature. Here we will start with some surface level questions:\n- Is the feature categorical or numerical?\n- Is the feature continuous or discrete?\n- How many unique values does the feature have?\n- What are the minimum and maximum values?\n- What are the most and least common values?\n- What is the overall distribution of the feature?\n- Are there any implausible datapoints? Are these outliers or mislabelled datapoint?\n\n## Categorical Feature\nFor **categorical features** you can start with a simple console output with the `.value_counts()` function, which lists the amount a category in that column appears. Alternatively, you can use a `countplot` to visualize the same information as a plot.","2f5d197e":"<div class=\"alert alert-block alert-danger\">\n<b>Findings:<\/b> \n     <ul>\n         <li>There are over 22 categories for Netflix TV shows<\/li>\n         <li>The most common category is \"International TV Shows\"<\/li>\n         <li>The category \"TV Shows\" seems to be a filler for unknown category. We could drop this column.<\/li>\n         <li>The least common category is \"Classic & Cult TV\"<\/li>\n         <li>A TV show is listed in at least one category. Roughly half of all TV shows on Netflix are listed in three categories.<\/li>\n         <li>Some categories describe the origin instead of the content such as \"British TV Shows\", \"International TV Shows\", \"Korean TV Shows\", \"Spanish Language TV Shows\"<\/li>\n         <li>Some categories describe the audience instead of the content such as \"Kid's TV\" and \"Teen TV Shows\"<\/li>\n<\/ul> \n<\/div>\n\n---","bbdf4121":"---\n\n### Added Date\nNot all features that are numbers necessarily have to handled as numerical features. Numerical features with a low cardinality (low number of unique values in feature) can also be handled as categorical features. For example, the feature `date_added_weekday`. Although this feature has the datatype integer howevery due to the fact that there are only seven unique days in a week","76ede77b":"<div class=\"alert alert-block alert-danger\">\n<b>Findings:<\/b> \n     <ul>\n  <li>Ken Burns and Alastair Fothergill are the only directors to have directed three TV shows on Netflix<\/li>\n  <li>For the majority of TV shows on Netflix the director is unknown in this dataset. We could drop this column.<\/li>\n  <li>There are 228 unique directors<\/li>\n  <li>The majority of directors have directed one TV show on Netflix<\/li>\n<\/ul> \n<\/div>\n\n---","8229abce":"### Director","5cec7b33":"This is also a good time to get more familiar with the topic. For example, we could check what the rating categories mean. The rating categories have the following meaning:\n* TV-Y: 2-6 years\n* TV-Y7: >= 7 year\n* TV-G: all ages\n* TV-PG: parental guidance\n* TV-14: >= 14 years\n* TV-MA: mature adult\n\nWith this background information and the above feature representations, we can quickly summarize our observations:\n\n<div class=\"alert alert-block alert-danger\">\n<b>Findings:<\/b> \n     <ul>\n  <li>The most common rating is TV-MA, followed by TV-14 and TV-PG. This means that the majority of TV shows are intended for more mature audiences.<\/li>\n  <li>Rating R and TV-Y7-FV seem to be mislabeled data points<\/li>\n  <li>Rating NR could be the result of imputed missing ratings and mean \"not rated\"<\/li>\n  <li>The least common rating is TV-G, followed by TV-Y and TV-Y7. These are the ratings for younger audiences.<\/li>\n<\/ul> \n<\/div>\n\n\nThis is a nice example of the **iterative process** of the data analysis workflow is because now we have to tidy up the rating column in addition to the previously conducted data cleaning steps.\n\nAfter the clean up, the feature `rating` looks as follows:","7b573fe0":"## Text Data","8efca858":"<div class=\"alert alert-block alert-danger\">\n<b>Findings:<\/b> \n     <ul>\n          <li>Japan has the most anime TV shows<\/li>\n          <li>For most categories, United States is the country with most TV shows since the United States also has the most TV shows in general<\/li>\n         <li>Romantic TV shows are more popular in Asia than in other countries.<\/li>\n<\/ul> \n<\/div>","cd101105":"<div class=\"alert alert-block alert-danger\">\n<b>Findings:<\/b> \n     <ul>\n          <li>Most TV shows are added on Fridays (weekday 4)<\/li>\n          <li>There is an increase of TV shows added on Wednesdays (weekday 2) in 2020, which is confirmed by <a href=\"https:\/\/screenrant.com\/netflix-movies-release-dates-wednesday-not-friday-reason\/\">this article<\/a><\/li>\n<\/ul> \n<\/div>\n","eaeb47d2":"### Rating","edde42c5":"Interestingly according to [Netflix](https:\/\/about.netflix.com\/en), the idea for Netflix was already born in 1997 and the website netflix.com was launched  in 1998. However, streaming was not introducted until 2007. Before 2007, Netflix was renting DVDs by mail to people's homes. This explains, why there is no data available before 2008 in this dataset.\nFurthermore, we can see a gap between 2008 and 2013, where no TV shows were added.","40ba4fe4":"--- \nLet's explore how TV dramas, which is the most common category, differs across different regions. \n\nFor this we will look at the most common words in the description. We will group the countries by following regions:\n- Indian TV dramas: India\n- Spanish TV dramas: Spain, Mexico, Colombia\n- U.S. TV dramas: United States\n- Asian TV dramas: Japan, South Korea, Taiwan, China","d4077dc2":"## Numerical Features\n\nFor numerical features, we can plot the distributions in a few different ways: You can use `.histplot()` from the seaborn library to plot histograms or `.kdeplot()` to plot the kernel density estimate (KDE). Both are ways to quickly get an understanding of the features distribution. Additionally, you can use `.boxplot()` to plot the box plot and detect outliers.","f30925f7":"We will use a heatmap style to visualize the how different TV show categories are rated. Let's do a few quick sanity checks:\n* `listed_in_Kids'TV` has no TV-14 and no TV-MA rating, which are intended for older audiences \n* `listed_in_TVHorror` has mostly TV-14 and TV-MA rating  \n* `listed_in_TVThrillers` one has one entry with TV-Y and two with TV-Y7 \n\nOverall the categories and ratings seem plausible. However, the last **sanity check seems off and it is important to at least check if this is ok or not**. A closer look at the last point reveals that these are in fact TV shows intended for children that are thrilling. That seems to be alright from my point of view and we will continue.","46d7993b":"<div class=\"alert alert-block alert-danger\">\n<b>Findings:<\/b> \n     <ul>\n  <li>The amount of added TV shows has been steadily increasing over the past five years<\/li>\n  <li>Since we are in the beginning of 2021 as of this writing, there are not many TV shows added sofar in 2021.<\/li>\n<\/ul> \n<\/div>","785bb90d":"### Cast","bb1d34f8":"<div class=\"alert alert-block alert-danger\">\n<b>Findings:<\/b> \n     <ul>\n  <li>The majority of TV shows only have one season\/li>\n  <li>The most seasons a TV show on Netflix has is 16<\/li>\n<\/ul> \n<\/div>","ab7a49eb":"# Relationships\nIn this section, we will explore some relationships between the features. However, since looking at every possible relationship between the available features would take a lot of time, it is recommended to focus our attention on a specific direction. If you don't have a specific hypothesis or question in mind, you can go back through your findings and start asking more questions with more depth. This means, that **during the first data analysis, we have asked a lot of \"what\" questions. Now it is time to ask \"how\" and \"why\".**\n\nThis is a good point to start asking more specific questions, such as:\n* How are the rating and the category correlated?\n* Why are TV shows added at specific times (on Fridays, on the 1st or the 15th, during winter months)\n* How do countries differ in category \/ rating preferences between countries?\n* Are there any relationships between cast and director within countries?\n* Can we see any trend over the past years regarding popularity of TV show types?\n* What differentiates a TV show with 16 seasons from one with only 1 season?\n* How do ratings\/categories differ in their title\/descriptions?\n","009f6598":"<div class=\"alert alert-block alert-danger\">\n<b>Findings:<\/b> \nIf we remove the categories \"TVShow\", \"British TV Shows\", \"International TV Shows\", \"Korean TV Shows\", \"Spanish Language TV Shows\", \"Teen TV Shows\", we find the following:\n     <ul>\n         <li>There are 14 TV shows without any category <\/li>\n         <li>The most common category is \"TV Dramas\"<\/li>\n         <li>The least common category is \"Classic & Cult TV\"<\/li>\n         <li>A TV show is listed in at least one category. Most TV shows on Netflix are listed in one category.<\/li>\n         <li>\"Docuseries\" and \"Science&Nature TV\" are highly correlated as well as \"TV Action & Adventure\" and \"TV Sci-Fi&Fantasy\" and also \"TV Horror\" and \"TV Mysteries\"<\/li>\n         <li>\"TV Dramas\" is negatively correlated with \"Docuseries\" and \"Kid's TV<\/li>\n<\/ul> \n<\/div>\n\n---","170e8408":"<div class=\"alert alert-block alert-danger\">\n<b>Findings:<\/b> \n     <ul>\n  <li>There are seven days in a week with Monday being represented by 0 and Sunday being represented by 6<\/li>\n  <li>Most TV shows are added on Fridays<\/li>\n  <li>Fewer TV shows are added on Monday and the weekends<\/li>       \n  <li>Most TV shows are added on the first or the 15th of a month<\/li>\n  <li>Most TV shows are added in December<\/li>\n  <li>The least TV shows are added in February<\/li>\n<\/ul> \n<\/div>\n\n---","e9a9b96c":"# Introduction\nThis is part 2 of the [Data Journalism Workflow tutorial  series](https:\/\/www.kaggle.com\/iamleonie\/data-journalism-workflow).\nIn this notebook you will learn how to explore the data and gain as much insight as possible from it. \n\n![Screenshot%202021-03-23%20at%2019.52.46.png](attachment:Screenshot%202021-03-23%20at%2019.52.46.png)\n\nNow begins the fun part! We will start to explore the data by visualizing it. The goal of this part is to learn about the characteristics of each feature and its relationship to other features. Additionally, we will check if the data makes sense, if there are outliers, and everything else that might catch our attention. Also, you will learn that data cleaning and processing is an iterative part through out this workflow.\n\n- [Feature Characteristics](#Feature-Characteristics)\n    - [Categorical Features](#Categorical-Features)\n    - [Numerical Features](#Numerical-Features)\n    - [Text Features](#Text-Features)\n- [Relationships](#Relationships)\n\n\n**The most important message in my opinion is to not just visualize the data. Instead take a few minutes to look at your visualization and think about what the data is telling you.** I recommend you take some notes of your findings.\n\nFor the visualizations, we will be using the libraries `matplotlib` and `seaborn`. Feel free to use any other library, such as `plotly` as well. \n\nHere is a quick collection of the most commonly used plot types:\n* For single features' characteristics\n    * histograms\n    * density plots\n    * box plots\n    * count plots\n* For relationships\n    * scatter plots\n    * line plots\n    * (stacked) bar charts\n    * heat maps\n    * kdeplots\n\n    \nNotice, how I did not list pie charts? Pie charts have a bad reputation since they often distort the information and make it more difficult to understand the underlying message. I **recommend to avoid pie charts and to try a stacked bar chart instead**.\n\nThis is also the right time to **ask a lot of questions**:\n* Who\n* What\n* Where\n* When\n* Why\n* How","74016146":"## \ud83d\ude80 Let's continue with [Lesson 3: Story Concept](http:\/\/www.kaggle.com\/iamleonie\/data-journalism-story-concept-3-5)","565d65dc":"### Country","f3d4ce7a":"<div class=\"alert alert-block alert-danger\">\n<b>Findings:<\/b> \n     <ul>\n  <li>Since the 2000s the number of TV shows has been growing almost exponentially<\/li>\n  <li>The world's first television stations first started appearing in the United States of America in the late 1920s and early 1930s. There are no TV shows with an earlier first release year before 1920.<\/li>\n<\/ul> \n<\/div>","09926a3e":"We will load the preprocessed data from [part 1](https:\/\/www.kaggle.com\/iamleonie\/data-journalism-data-preparation-1-5) of this series. The .csv file contains only netflix TV shows and is the cleaned and preprocessed data with a few additional features.","a8a637b8":"<div class=\"alert alert-block alert-danger\">\n<b>Findings:<\/b> \n     <ul>\n  <li>There are 66 countries in which Netflix TV shows are available<\/li>\n  <li>The most TV shows are available in the United States of America, which makes sense since Netflix was founded there<\/li>\n  <li>For a lot of TV shows the country is unknown. We could remove this column.<\/li>\n  <li>The second most TV shows are available in the United Kingdom, followed by Japan and South Korea<\/li>\n<\/ul> \n<\/div>\n\n---","3cdb0487":"---\nWhich TV sho is listed in the most countries?","087231bc":"<div class=\"alert alert-block alert-danger\">\n<b>Findings:<\/b> \n     <ul>\n  <li>There are over 13,000 actors starring in Netflix TV shows<\/li>\n  <li>Actors starring in the most TV shows are all Japanese<\/li>\n<\/ul> \n<\/div>\n\n---"}}