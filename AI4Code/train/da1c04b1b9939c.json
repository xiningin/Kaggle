{"cell_type":{"d84e4277":"code","11dd906e":"code","2caa0dcf":"code","f571f6cf":"code","4277aae9":"code","775b11ca":"markdown","ef8029b4":"markdown"},"source":{"d84e4277":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","11dd906e":"\n# Load in data\nboulder = pd.read_csv('\/kaggle\/input\/ifsc-sport-climbing-competition-results\/boulder_results.csv')\nlead = pd.read_csv('\/kaggle\/input\/ifsc-sport-climbing-competition-results\/lead_results.csv')\ncombined = pd.read_csv('\/kaggle\/input\/ifsc-sport-climbing-competition-results\/combined_results.csv')","2caa0dcf":"boulder = boulder[~boulder['Competition Title'].str.contains('Youth')]\nlead = lead[~lead['Competition Title'].str.contains('Youth')]\ncombined = combined[combined['Competition Title'].str.contains('Hachioji')]#most usefull qulification\n\n#Split male and female bouldering competitors\n#In each competition there are first listed females, then males\n#They are ranked in order from 1 up\nmale = True\nisMale = []\nfor index, climber in boulder.iterrows():\n    if climber['Rank'] == 1:\n        male = not male\n    isMale.append(male)\nboulder_mal = boulder[isMale]\nboulder_fem=boulder[~boulder.isin(boulder_mal)]\nboulder_fem = boulder_fem.dropna(how='all')\n\n#Split male and female lead competitors\n#In each competition there are first listed females, then males\n#They are ranked in order from 1 up\nmale = True\nisMale = []\nfor index, climber in lead.iterrows():\n    if climber['Rank'] == 1:\n        male = not male\n    isMale.append(male)\nlead_mal = lead[isMale]\nlead_fem=lead[~lead.isin(lead_mal)]\nlead_fem = lead_fem.dropna(how='all')\n#making assumption that medal wont go to speed specialist(in bonus i will make agrument for that)","f571f6cf":"#more than 3 competions(competitors for olympic medal need consistency)\nboulder_mal_top = boulder_mal.groupby(['FIRST', 'LAST'])['Rank'].agg(['mean', 'count']).reset_index().sort_values('mean')\nboulder_mal_top = boulder_mal_top[(boulder_mal_top['count']>3) & (boulder_mal_top['mean']<15)]\nboulder_mal_top.insert(3, 'Rank', range(1, 1+len(boulder_mal_top)))\nboulder_mal_top=boulder_mal_top.drop(columns =['mean', 'count'])\n\n\n\nboulder_fem_top = boulder_fem.groupby(['FIRST', 'LAST'])['Rank'].agg(['mean', 'count']).reset_index().sort_values('mean')\nboulder_fem_top = boulder_fem_top[(boulder_fem_top['count']>3) & (boulder_fem_top['mean']<15)]\nboulder_fem_top.insert(3, 'Rank', range(1,1+ len(boulder_fem_top)))\nboulder_fem_top=boulder_fem_top.drop(columns =['mean', 'count'])\n\n\n#More competisions and just finals higer requriments\nlead_mal_top = lead_mal.groupby(['FIRST', 'LAST'])['Rank'].agg(['mean', 'count']).reset_index().sort_values('mean')\nlead_mal_top = lead_mal_top[(lead_mal_top['count']>5) & (lead_mal_top['mean']<15)]\nlead_mal_top .insert(3, 'Rank1', range(1, 1+len(lead_mal_top )))\nlead_mal_top =lead_mal_top .drop(columns =['mean', 'count'])\n\n\n\n\nlead_fem_top = lead_fem.groupby(['FIRST', 'LAST'])['Rank'].agg(['mean', 'count']).reset_index().sort_values('mean')\nlead_fem_top = lead_fem_top[(lead_fem_top['count']>5) & (lead_fem_top['mean']<15)]\nlead_fem_top.insert(3, 'Rank1', range(1, 1+len(lead_fem_top)))\nlead_fem_top = lead_fem_top.drop(columns =['mean', 'count'])\n\n\n\n#get speeed climbing results from best allround climbers-we need just comparison soo we dont need split data into male\/female\ncombined['Qualification speed'] = combined['Qualification speed'].str[:-1]\ncombined['Qualification speed'] = combined['Qualification speed'].astype(float)\ncombined=combined.sort_values(by=['Qualification speed'])\ncombined.insert(4, 'Rank2', range(1, 1+len(combined)))\ncombined = combined.groupby(['FIRST', 'LAST'])['Rank2'].agg(['mean', 'count']).reset_index().sort_values('mean')\ncombined.insert(4, 'Rank2', range(1, 1+len(combined)))\ncombined = combined.drop(columns =['mean', 'count'])","4277aae9":"temp_mal = pd.merge(lead_mal_top, boulder_mal_top, on=[\"FIRST\", \"LAST\"])\ntemp_fem = pd.merge(lead_fem_top, boulder_fem_top, on=[\"FIRST\", \"LAST\"])\n\n\nfinal_mal = pd.merge(temp_mal, combined, on=[\"FIRST\", \"LAST\"])\nfinal_fem = pd.merge(temp_fem, combined, on=[\"FIRST\", \"LAST\"])\n\nfinal_mal=final_mal.sort_values(by=['Rank'])\nfinal_mal.insert(5, 'Bouldering', range(1, 1+len(final_mal)))\nfinal_mal=final_mal.sort_values(by=['Rank1'])\nfinal_mal.insert(6, 'Lead', range(1, 1+len(final_mal)))\nfinal_mal=final_mal.sort_values(by=['Rank2'])\nfinal_mal.insert(7, 'Speed', range(1, 1+len(final_mal)))\nfinal_mal = final_mal.drop(columns =['Rank', 'Rank1', 'Rank2'])\nfinal_mal['Overall']=final_mal['Speed']*final_mal['Lead']*final_mal['Bouldering']\nfinal_mal=final_mal.sort_values(by=['Overall'],ascending=True)\nfinal_mal['Name']=final_mal['FIRST'] +' '+ final_mal['LAST']\n\n\nfinal_fem=final_fem.sort_values(by=['Rank'])\nfinal_fem.insert(5, 'Bouldering', range(1, 1+len(final_fem)))\nfinal_fem=final_fem.sort_values(by=['Rank1'])\nfinal_fem.insert(6, 'Lead', range(1, 1+len(final_fem)))\nfinal_fem=final_fem.sort_values(by=['Rank2'])\nfinal_fem.insert(7, 'Speed', range(1, 1+len(final_fem)))\nfinal_fem = final_fem.drop(columns =['Rank', 'Rank1', 'Rank2'])\nfinal_fem['Overall']=final_fem['Speed']*final_mal['Lead']*final_fem['Bouldering']\nfinal_fem.sort_values(by=['Overall'],ascending=True)\nfinal_fem['Name']=final_fem['FIRST'] +' '+ final_fem['LAST']\n\nax = final_mal.plot.bar(x='Name', y='Overall', rot=0)\nax = final_fem.plot.bar(x='Name', y='Overall', rot=0)\nprint(final_fem)\nprint(final_mal)","775b11ca":"**It looks like Tomoa Narasaki and Adam Ondra will fight for gold medal in mens category**\n\n**And if everything goes acorrding expectations Janja will dominate.**\n\n*Unfortunately we wont see Lu\u010dka Rakovec and Kokoro Fuji in Tokyo duo too limit of nation representation.*\n\n\n","ef8029b4":" # Finding olympic winner\n\n![image.png](attachment:image.png)\n\n\n\nThe final standings at the end of the event will be determined by a multiplied score of athletes' placements in all three disciplines\u2014with the lowest score earning the gold medal.\n\nSpeed(placement) x Bouldering(placement) x Lead(placement)=overall->lowest=winner\n\nSoo its important too be good at least 2 disciplines and most climbers are combining well lead and bouldering soo we will find 3 best mens and womens and we will compare their results(speed-we will get from olympic qualification) and then overall score. Then we will see predictions for olympic games"}}