{"cell_type":{"cb52a83e":"code","b9a52015":"code","8c2e4562":"code","b5ad23d6":"code","d326a775":"code","759e0afd":"code","ea0fddbc":"code","a01882b4":"code","613a02ea":"code","53755ad2":"code","66c69ad0":"code","fd9772a2":"code","9e064719":"code","d6237977":"code","253765b6":"code","b2593e5d":"code","75a98a24":"code","d1651ae7":"code","0a2eb168":"code","1b722cff":"code","90175ed7":"markdown","3a29a0d0":"markdown","4fd37dd4":"markdown","b58d3099":"markdown","847ba4ba":"markdown","fb829bbf":"markdown","e0dc823b":"markdown","5953381c":"markdown","e56f572e":"markdown","b6c8b426":"markdown","f66ba6a4":"markdown","bbfd24b4":"markdown","3d8bdadd":"markdown","4b212ee3":"markdown","44b5da5d":"markdown","27278932":"markdown","04660983":"markdown","d54726f2":"markdown","d8e1e53e":"markdown"},"source":{"cb52a83e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b9a52015":"df = pd.read_csv('\/kaggle\/input\/heart-failure-prediction\/heart.csv')\ndf.head()","8c2e4562":"df.shape[0]","b5ad23d6":"df.dtypes","d326a775":"df.info()","759e0afd":"df.describe().T","ea0fddbc":"from pandas.plotting import scatter_matrix\n\nattributes = [\"Age\",\"Sex\",\"ChestPainType\",\"RestingBP\",\"Cholesterol\",\"FastingBS\",\"RestingECG\",\"MaxHR\",\"ExerciseAngina\",\"Oldpeak\",\"ST_Slope\",\"HeartDisease\"]\n\nsns.pairplot(df[attributes], hue=\"Sex\")","a01882b4":"# Find the corrolation between features.\n\ncorr = df.corr()\n\nsns.heatmap(corr, annot = True, linewidth=5)","613a02ea":"# Check for missing values in the dataset\n\nmissing_values = df.isna().sum()\n\nprint(f\"It seems like there are no missing values \\n{missing_values}\")","53755ad2":"sns.boxplot(df[\"Cholesterol\"])","66c69ad0":"# Find outliers in the dataset.\nfrom scipy import stats\nfrom scipy.stats import zscore\n\nz_scores = stats.zscore(df[\"Cholesterol\"])\n\nabs_z_scores = np.abs(z_scores)\nfiltered_entries = (abs_z_scores < 3)\ndf = df[filtered_entries]\n\nsns.boxplot(df[\"Cholesterol\"])","fd9772a2":"sns.boxplot(df[\"MaxHR\"])","9e064719":"z_scores = stats.zscore(df[\"MaxHR\"])\n\nabs_z_scores = np.abs(z_scores)\nfiltered_entries = (abs_z_scores < 3)\ndf = df[filtered_entries]\n\nsns.boxplot(df[\"MaxHR\"])","d6237977":"sns.boxplot(df[\"RestingBP\"])","253765b6":"z_scores = stats.zscore(df[\"RestingBP\"])\n\nabs_z_scores = np.abs(z_scores)\nfiltered_entries = (abs_z_scores < 3)\ndf = df[filtered_entries]\n\nsns.boxplot(df[\"RestingBP\"])","b2593e5d":"# Split the data into training, test and valuation with sklearn train test split\n\nfrom sklearn.model_selection import train_test_split\n\nY = df[\"HeartDisease\"]\n\nX = df.drop([\"HeartDisease\", \"ST_Slope\"], axis=1)\n\ntrain_x, valid_x, train_y, valid_y = train_test_split(X, Y,train_size=0.8, test_size=0.2, random_state=42)","75a98a24":"train_x.head()","d1651ae7":"train_x = pd.get_dummies(train_x, columns=[\"Sex\", \"ChestPainType\", \"RestingECG\", \"ExerciseAngina\"])\nvalid_x = pd.get_dummies(valid_x, columns=[\"Sex\", \"ChestPainType\", \"RestingECG\", \"ExerciseAngina\"])","0a2eb168":"train_x.head()","1b722cff":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error\n\nmodel = LinearRegression()\n\nmodel.fit(train_x, train_y)\n\npreds = model.predict(valid_x)\n\n# Evaluate the model\nscore = mean_absolute_error(valid_y, preds)\nprint('MAE:', score)","90175ed7":"**The boxplot after the big outliers are removed**","3a29a0d0":"**The goal of this notebook is to learn you some quick ways to create your first machine learning program.**\n\n# All upvotes are welcome!\n\n\n**Gameplan**\n\n1. Load the dataset.\n2. Analyse the data.\n3. Find missing values.\n4. Find outliers\n5. Split the data.\n6. Prepare the data for the model. \n7. Build the model\n8. Evaluate the model.","4fd37dd4":"# Handle numircal and categorical data","b58d3099":"Attribute Information\n* Age: age of the patient [years]\n* Sex: sex of the patient [M: Male, F: Female]\n* ChestPainType: chest pain type [TA: Typical Angina, ATA: Atypical Angina, NAP: Non-Anginal Pain, ASY: Asymptomatic]\n* RestingBP: resting blood pressure [mm Hg]\n* Cholesterol: serum cholesterol [mm\/dl]\n* FastingBS: fasting blood sugar [1: if FastingBS > 120 mg\/dl, 0: otherwise]\n* RestingECG: resting electrocardiogram results [Normal: Normal, ST: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV), LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria]\n* MaxHR: maximum heart rate achieved [Numeric value between 60 and 202]\n* ExerciseAngina: exercise-induced angina [Y: Yes, N: No]\n* Oldpeak: oldpeak = ST [Numeric value measured in depression]\n* ST_Slope: the slope of the peak exercise ST segment [Up: upsloping, Flat: flat, Down: downsloping]\n* HeartDisease: output class [1: heart disease, 0: Normal]","847ba4ba":"**The dataset has 906 rows**","fb829bbf":"With **df.info()** we can see some import information about missing values.","e0dc823b":"# Analyse the dataset.","5953381c":"# Find missing values.","e56f572e":"**The dots are outliers in our data**","b6c8b426":"# Load the dataset from the CSV file.","f66ba6a4":"# Create the model and evaluate it.","bbfd24b4":"**Luckily for us there are no missing values :)**","3d8bdadd":"# Split the date and seperate the dataset.","4b212ee3":"**The correlation matrix is a great way to discover corrolations and good for understandin the dataset.**","44b5da5d":"# A brief introduction into machine learning. (realy brief)","27278932":"# Find outliers and delete them.","04660983":"**df.describe()** gives us insight on some important aspects of every feature.","d54726f2":"**Here create a scatter plot to find some corrolation betweet features.**","d8e1e53e":"With **df.dtypes** we can see wich datatype every column has."}}