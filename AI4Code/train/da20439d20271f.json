{"cell_type":{"7b1efa1e":"code","09272834":"code","850f8456":"code","982dab38":"code","a8fe4a84":"code","ab295ac4":"code","d9148113":"code","02c99260":"code","47d1eb55":"code","1dd75a67":"code","46a41b20":"code","7de2947d":"code","33301cd1":"code","a898899d":"code","8e27203f":"code","460be05c":"code","49c40eff":"code","4cdc5a54":"code","9fa05e0a":"code","6919acd5":"code","32387d5e":"code","0a334cb3":"code","9c695192":"code","4342088a":"code","b9903c72":"code","62524eb7":"code","59500904":"code","5b7f0e29":"code","a337ae79":"code","8e94a197":"code","a79e0b6d":"code","9ecddd19":"code","ecf7234d":"code","5ab27158":"code","cf40c2fd":"code","014ee4e4":"code","eb1505fa":"code","c214afb1":"code","07890332":"code","4492a69c":"code","27363b23":"code","92cd2ea1":"code","bf5d6aae":"code","930be636":"code","ee2c2948":"code","3c725977":"code","5ef69a8e":"markdown","740e1765":"markdown","d1fcfe81":"markdown","1c803bde":"markdown"},"source":{"7b1efa1e":"import numpy as np\nimport pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as plt","09272834":"data_path = '..\/input'\n\ndef fetch_data(data_path):\n    train_df = pd.read_csv(data_path + '\/train.csv')\n    test_df = pd.read_csv(data_path + '\/test.csv')\n    samp_df = pd.read_csv(data_path + '\/gender_submission.csv')\n    return train_df, test_df, samp_df","850f8456":"train_df, test_df, samp_df = fetch_data(data_path)","982dab38":"train_df.head()","a8fe4a84":"train_df.info()","ab295ac4":"train_df.describe()","d9148113":"train_df.Survived.value_counts()","02c99260":"train_df.Pclass.value_counts()","47d1eb55":"train_df.Sex.value_counts()","1dd75a67":"train_df.Embarked.value_counts()","46a41b20":"from collections import Counter\n\ndef detect_outliers(df,n,features):\n    \"\"\"\n    Takes a dataframe df of features and returns a list of the indices\n    corresponding to the observations containing more than n outliers according\n    to the Tukey method.\n    \"\"\"\n    outlier_indices = []\n    \n    # iterate over features(columns)\n    for col in features:\n        # 1st quartile (25%)\n        Q1 = np.percentile(df[col], 25)\n        # 3rd quartile (75%)\n        Q3 = np.percentile(df[col],75)\n        # Interquartile range (IQR)\n        IQR = Q3 - Q1\n        \n        # outlier step\n        outlier_step = 1.5 * IQR\n        \n        # Determine a list of indices of outliers for feature col\n        outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step )].index\n        \n        # append the found outlier indices for col to the list of outlier indices \n        outlier_indices.extend(outlier_list_col)\n        \n    # select observations containing more than 2 outliers\n    outlier_indices = Counter(outlier_indices)        \n    multiple_outliers = list( k for k, v in outlier_indices.items() if v > n )\n    \n    return multiple_outliers   \n\n# detect outliers from Age, SibSp , Parch and Fare\nOutliers_to_drop = detect_outliers(train_df,2,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])","7de2947d":"train_df.loc[Outliers_to_drop] # Show the outliers rows","33301cd1":"corr_matrix = train_df.corr()\ncorr_matrix['Survived'].sort_values(ascending=False)","a898899d":"train_df['Family_number'] = train_df.SibSp + train_df.Parch # number of family members on board\ntrain_df['Age_cats'] = np.ceil(train_df.Age \/ 18) # Creating Age ranges to split into categories","8e27203f":"train_df.head()","460be05c":"# Drop outliers\ntrain_drop = train_df.drop(Outliers_to_drop, axis = 0).reset_index(drop=True)","49c40eff":"from sklearn.base import BaseEstimator, TransformerMixin\n\nclass DataFrameSelector(BaseEstimator,TransformerMixin):\n    def __init__(self,attrib_names):\n        self.attrib_names = attrib_names\n    def fit(self,X,y=None):\n        return self\n    def transform(self,X):\n        return X[self.attrib_names]","4cdc5a54":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import Imputer\n\nimputer = Imputer(strategy=\"median\")\n\nnum_pipeline = Pipeline([\n        (\"select_numeric\", DataFrameSelector([\"Age\", \"SibSp\", \"Parch\", \"Fare\", \"Family_number\"])),\n        (\"imputer\", Imputer(strategy=\"median\")),\n    ])","9fa05e0a":"num_pipeline.fit_transform(train_drop)","6919acd5":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn_pandas import CategoricalImputer","32387d5e":"class MostFrequentImputer(BaseEstimator,TransformerMixin):\n    def fit(self,X,y=None):\n        self.imputer = CategoricalImputer()\n        return self\n    def transform(self,X):\n        age_cats_imputed = pd.Series(self.imputer.fit_transform(X.Age_cats.copy())).astype('category')\n        sex_imputed = pd.Series(self.imputer.fit_transform(X.Sex.copy())).astype('category')\n        embarked_imputed = pd.Series(self.imputer.fit_transform(X.Embarked.copy())).astype('category')\n        X.Sex = sex_imputed.cat.codes\n        X.Embarked = embarked_imputed.cat.codes\n        X.Age_cats = age_cats_imputed\n        return X","0a334cb3":"cat_pipeline = Pipeline([\n        (\"select_cat\", DataFrameSelector([\"Pclass\", \"Sex\", \"Embarked\", \"Age_cats\"])),\n        (\"imputer\", MostFrequentImputer()),\n        (\"cat_encoder\", OneHotEncoder(sparse=False)),\n    ])","9c695192":"cat_pipeline.fit_transform(train_drop)","4342088a":"from sklearn.pipeline import FeatureUnion\npreprocess_pipeline = FeatureUnion(transformer_list=[\n        (\"num_pipeline\", num_pipeline),\n        (\"cat_pipeline\", cat_pipeline),\n    ])","b9903c72":"x_train = preprocess_pipeline.fit_transform(train_drop)\nx_train","62524eb7":"y_train = train_drop[\"Survived\"]","59500904":"test_df['Family_number'] = test_df.SibSp + test_df.Parch # number of family members on board\ntest_df['Age_cats'] = np.ceil(test_df.Age \/ 18) # Creating Age ranges to split into categories","5b7f0e29":"# SVM\nfrom sklearn.svm import SVC\n\nsvm_clf = SVC()\nsvm_clf.fit(x_train,y_train)","a337ae79":"X_test = preprocess_pipeline.transform(test_df)\ny_pred = svm_clf.predict(X_test)","8e94a197":"from sklearn.model_selection import cross_val_score\n\nsvm_scores = cross_val_score(svm_clf, x_train, y_train, cv=10)\nsvm_scores.mean()","a79e0b6d":"# Random forest\nfrom sklearn.ensemble import RandomForestClassifier\n\nforest_clf = RandomForestClassifier(random_state=42)\nforest_clf.fit(x_train,y_train)\nforest_scores = cross_val_score(forest_clf, x_train, y_train, cv=10)\nforest_scores.mean()","9ecddd19":"plt.figure(figsize=(8, 4))\nplt.plot([1]*10, svm_scores, \".\")\nplt.plot([2]*10, forest_scores, \".\")\nplt.boxplot([svm_scores, forest_scores], labels=(\"SVM\",\"Random Forest\"))\nplt.ylabel(\"Accuracy\", fontsize=14)\nplt.show()","ecf7234d":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = [\n    {'n_estimators': [3, 10, 20, 30], 'max_features': [2, 4, 6, 8, 10, 12]},\n    # then try 6 (2\u00d73) combinations with bootstrap set as False\n    {'bootstrap': [False], 'n_estimators': [3, 10, 20], 'max_features': [2, 3, 4]},\n]\n\nforest_clf = RandomForestClassifier(random_state=42)\ngrid_search = GridSearchCV(forest_clf, param_grid, cv=5,\n                           scoring='accuracy', return_train_score=True)\ngrid_search.fit(x_train,y_train)","5ab27158":"grid_search.best_params_","cf40c2fd":"grid_search.best_estimator_","014ee4e4":"cvres = grid_search.cv_results_\nfor acc_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(acc_score, params)","eb1505fa":"from sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint\n\nparam_distribs = {\n        'n_estimators': randint(low=1, high=200),\n        'max_features': randint(low=1, high=8),\n    }\n\nforest_clf = RandomForestClassifier(random_state=42)\nrnd_search = RandomizedSearchCV(forest_clf, param_distributions=param_distribs,\n                                n_iter=30, cv=5, scoring='accuracy', random_state=42)\nrnd_search.fit(x_train, y_train)","c214afb1":"cvres = rnd_search.cv_results_\nfor acc_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(acc_score, params)","07890332":"rnd_search.best_score_","4492a69c":"rnd_search.best_estimator_","27363b23":"preds = rnd_search.best_estimator_.predict(X_test)\npreds","92cd2ea1":"preds.shape","bf5d6aae":"samp_df.head()","930be636":"subm_df = samp_df.copy()","ee2c2948":"subm_df.Survived = preds\nsubm_df.head()","3c725977":"subm_df.to_csv('submission.csv', index=False)","5ef69a8e":"## Data exploration","740e1765":"## Run on models","d1fcfe81":"## Generate test predictions","1c803bde":"## Data preparation"}}