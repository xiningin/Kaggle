{"cell_type":{"789abced":"code","68bbd02b":"code","7cd614c2":"code","6ff70753":"code","c1c27a43":"code","45ac4aee":"code","db350b72":"code","1e309291":"code","41a53c83":"code","925229d2":"code","52eb8581":"code","2e0b6f20":"code","41f3cee9":"code","8b84e5bf":"code","aba78dd1":"code","89ddf4a8":"code","16ce9f17":"code","92a3f1e8":"code","7a25647a":"code","bd4b70f1":"code","7662cc11":"code","718e60ba":"code","ff4eced4":"code","bfeb9038":"code","5514ba63":"code","38882993":"code","c74c10ed":"code","e9081112":"code","28a78e8f":"code","72096c4c":"code","b7245801":"code","8f236315":"code","525c761e":"code","b216bb9b":"code","5d27fdd4":"code","5756b3ed":"code","30d99bd3":"code","dd85579f":"code","e463e5c8":"code","7ee67a02":"code","cbf20373":"code","174d43c7":"code","54b800dd":"code","c08a0f41":"code","61865099":"code","fc977705":"code","958ce4d8":"code","8f15985e":"code","a182480b":"code","d5e5b523":"code","1fa32a82":"code","f48aa08a":"code","0df21040":"code","3209992f":"code","758a8b58":"code","6e49bba6":"code","aa85a83d":"code","5deb1de6":"code","34ef80c3":"code","5b52b3c8":"code","efc7914a":"code","110e8236":"code","6fa89a7c":"code","e8aa6b4a":"code","3345ed77":"code","7bb88a08":"code","5a5bd0d9":"code","10b821fe":"code","5130825c":"code","b1bf35bc":"code","3033a9a5":"code","a7236ff9":"code","3583b22c":"code","429d9fb5":"code","90dd94bc":"code","d47c2654":"code","e251cdaf":"code","389a0a52":"code","0b9d4240":"code","cffd725a":"code","6d85666c":"code","2ae22928":"code","d2270245":"code","4cc75123":"code","c63b3371":"markdown","8ef89ee3":"markdown","e980cbb6":"markdown","6054eaed":"markdown","fe0e4b3f":"markdown","a109c53f":"markdown","377653cf":"markdown","355dc9fb":"markdown","3090571e":"markdown","5eb42fda":"markdown","8aad7cdc":"markdown","5ef915de":"markdown","ee358123":"markdown","1029690a":"markdown","1ab19981":"markdown","898e8288":"markdown","1ee0c592":"markdown","634a5fcb":"markdown","a513139c":"markdown","16147d8c":"markdown","a88ac64f":"markdown","bd502429":"markdown","85e9b677":"markdown","2ad7ea6c":"markdown","da55331b":"markdown","56ee6857":"markdown","84226199":"markdown","a36476bd":"markdown","957cd676":"markdown","ed84e0bc":"markdown","2af307c1":"markdown","1b27818d":"markdown","70a752aa":"markdown","30fc4c4d":"markdown","1b58255a":"markdown","69c2184c":"markdown","41c2f092":"markdown","aa92ae4e":"markdown","98071595":"markdown","c49728f9":"markdown","9132ecac":"markdown","d265f9f8":"markdown","6eec9f14":"markdown","bb38a4f3":"markdown","ee59415e":"markdown","a9a6bd6e":"markdown","85965dc8":"markdown","57b61749":"markdown","c93a5d06":"markdown","d0861b94":"markdown"},"source":{"789abced":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","68bbd02b":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","7cd614c2":"train_df.columns","6ff70753":"train_df.head()","c1c27a43":"train_df.describe()","45ac4aee":"train_df.info()","db350b72":"def bar_plot(variable):\n    \"\"\"\n    input: variable ex: \"Sex\"\n    output: bar plor & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}:\".format(variable, varValue))","1e309291":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","41a53c83":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","925229d2":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show","52eb8581":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","2e0b6f20":"# Pclass vs Survived\ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","41f3cee9":"# Sex vs Survived\ntrain_df[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","8b84e5bf":"# SibSp vs Survived\ntrain_df[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","aba78dd1":"# Parch vs Survived\ntrain_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","89ddf4a8":"def detect_outliers(df, features):\n    outlier_indices = []\n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c], 25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c], 75)\n        # IQR\n        IQR = Q3 - Q1\n        # outlier Step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices) \n    # bir samplede ikiden fazla outlier varsa \u00e7\u0131kart\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2) \n    \n    return multiple_outliers","16ce9f17":"train_df.loc[detect_outliers(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]","92a3f1e8":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"]), axis = 0).reset_index(drop = True)","7a25647a":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop = True)","bd4b70f1":"train_df.columns[train_df.isnull().any()]","7662cc11":"train_df.isnull().sum()","718e60ba":"train_df[train_df[\"Embarked\"].isnull()]","ff4eced4":"train_df.boxplot(column = \"Fare\", by = \"Embarked\")\nplt.show()","bfeb9038":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","5514ba63":"train_df[train_df[\"Fare\"].isnull()]","38882993":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))\ntrain_df[train_df[\"Fare\"].isnull()]","c74c10ed":"list1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","e9081112":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","28a78e8f":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probabilty\")\nplt.show()","72096c4c":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probabilty\")\nplt.show()","b7245801":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","8f236315":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 3)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","525c761e":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 3)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","b216bb9b":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","5d27fdd4":"train_df[train_df[\"Age\"].isnull()]","5756b3ed":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\" )\nplt.show()","30d99bd3":"sns.factorplot(x = \"Sex\", y = \"Age\", hue= \"Pclass\", data = train_df, kind = \"box\")\nplt.show()","dd85579f":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","e463e5c8":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","7ee67a02":"sns.heatmap(train_df[[\"Age\", \"Sex\", \"SibSp\", \"Parch\", \"Pclass\"]].corr(), annot = True)\nplt.show()","cbf20373":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_median = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_median","174d43c7":"train_df[train_df[\"Age\"].isnull()]","54b800dd":"train_df[\"Name\"].head(10)","c08a0f41":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","61865099":"train_df[\"Title\"].head()","fc977705":"sns.countplot(x = \"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","958ce4d8":"# convert to categorical \ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\", \"the Countess\", \"Capt\", \"Don\", \"Dr\", \"Major\", \"Rev\", \"Sir\", \"Jonkheer\", \"Dona\"], \"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"] ]","8f15985e":"sns.countplot(x = \"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","a182480b":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\", \"Mrs\", \"Mr\", \"Other\"])\ng.set_ylabels(\"Survival Probability\")","d5e5b523":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)\n","1fa32a82":"train_df.head()","f48aa08a":"train_df = pd.get_dummies(train_df, columns = [\"Title\"])\ntrain_df.head()","0df21040":"train_df.head()","3209992f":"# The reason for adding 1 is even passenger has no realtive he\/she is still a family\ntrain_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","758a8b58":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","6e49bba6":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","aa85a83d":"train_df.head(10)","5deb1de6":"sns.countplot( x = \"family_size\", data = train_df)\nplt.show()","34ef80c3":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","5b52b3c8":"train_df = pd.get_dummies(train_df, columns = [\"family_size\"])","efc7914a":"train_df[\"Embarked\"].head(10)","110e8236":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","6fa89a7c":"train_df = pd.get_dummies(data = train_df, columns = [\"Embarked\"])","e8aa6b4a":"train_df.head()","3345ed77":"train_df[\"Ticket\"].head(10)","7bb88a08":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\", \"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","5a5bd0d9":"train_df[\"Ticket\"].head(10)","10b821fe":"train_df = pd.get_dummies(train_df, columns = [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","5130825c":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","b1bf35bc":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns = [\"Pclass\"])\ntrain_df.head()","3033a9a5":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns = [\"Sex\"])\ntrain_df.head()","a7236ff9":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","3583b22c":"train_df.columns","429d9fb5":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","90dd94bc":"train_df_len","d47c2654":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"], axis = 1, inplace = True)","e251cdaf":"train = train_df[:train_df_len]\nX_train = train.drop(labels = [\"Survived\"], axis = 1)\ny_train = train[\"Survived\"]\n# now X_test and y_test means X_validation and y_validation\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\", len(X_train))\nprint(\"X_test\", len(X_test))\nprint(\"y_train\", len(y_train))\nprint(\"y_test\", len(y_test))\nprint(\"test\", len(test))","389a0a52":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train) * 100, 2)\nacc_log_test = round(logreg.score(X_test, y_test) * 100, 2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","0b9d4240":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","cffd725a":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","6d85666c":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\",\n                                                                            \"SVM\",\n                                                                            \"RandomForestClassifier\",\n                                                                            \"LogisticRegression\",\n                                                                            \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")\nplt.show()","2ae22928":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","d2270245":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","4cc75123":"test_survived\n","c63b3371":" <a id = \"26\"><\/a><br>\n ## Pclass","8ef89ee3":"* If Parch is either 0 or 1, then passengers more likely to be around 20-30 year old. \n* If SibSp is either 0 or 1, then passengers more likely to be around 25-35 year old. ","e980cbb6":" <a id = \"27\"><\/a><br>\n ## Sex","6054eaed":"<a id = \"2\"><\/a><br>\n# [Variable Description]\n1. PassengerId: Unique d number to each passenger\n2. Survived: Passenger survided(1) or died(0)\n3. Pclass: Passenger class\n4. Name: Name\n5. Sex: Gender\n6. Age: Age\n7. SibSp: Number of siblings\/spouses\n8. Parch: Number of parents\/children\n9. Ticket: ticket number \n10. Fare: Amount of money paid for ticket\n11. Cabin: Cabin category\n12. Embarked: Port where passengers embarked, (C = cherbourg, Q = Queenstown, S=Southampton)","fe0e4b3f":" <a id = \"23\"><\/a><br>\n ## Family Size","a109c53f":" <a id = \"31\"><\/a><br>\n ## Simple Logistic Regression","377653cf":"* Female passenger have more chance to survive, namely much better survival rate than males. This is supported by a further analysis above which is Sex vs Survived in Basic Analysis.\n* Males have better survival rates in Pclass in C.\n* Females have better survival rates in Pclass in S.\n* Females have better survival rates in Pclass in Q.\n* Embarked and Sex will be used ofr training.","355dc9fb":" <a id = \"14\"><\/a><br>\n ## Parch -- Survived   ","3090571e":"* Pclass == 1 => age median is almost 40.\n* Pclass == 2 => age median is almost 30.\n* Pclass == 3 => age median is almost 25.\n* So, the oldest passengers are tend to be in 1st class, whereas the youngest passengers tend to be 3rd class.","5eb42fda":" <a id = \"19\"><\/a><br>\n ## Embarked -- Sex -- Fare -- Survived ","8aad7cdc":" <a id = \"12\"><\/a><br>\n ## Correlation Between SibSp -- Parch -- Age -- Fare -- Survived     \n ","5ef915de":" <a id = \"29\"><\/a><br>\n # Modeling","ee358123":" <a id = \"32\"><\/a><br>\n ## Hyperparameter Tuning -- Grid Search -- Cross Validation\n * We will compare 5 ML classifier and evaluate mean accuracy of each of them by stratified cross validation\n * Decision Tree\n * SVM\n * Random Forest\n * KNN\n * Logistic Regression","1029690a":"* Age is not correlated with sex but it is correlated with Parch, SibSp and Pclass.","1ab19981":" <a id = \"30\"><\/a><br>\n ## Train - Test Split","898e8288":" <a id = \"13\"><\/a><br>\n ## SibSp -- Survived   ","1ee0c592":"<a id = \"34\"><\/a><br>\n## Prediction and Submission","634a5fcb":" <a id = \"18\"><\/a><br>\n ## Embarked -- Sex -- Pclass -- Survived ","a513139c":"* Pclass stand for the class that passengers travel.\n* Passenger that travels in 1st class have more chance to survive.","16147d8c":"<a id = \"4\"><\/a><br>\n## Categorical Variable:","a88ac64f":"* float64(2): Fare and Age \n* int64(5): Pcalss, SibSp, Parch, PassengerId, Survived \n* object(5): Cabin, Embarked, Tickets, name and sex","bd502429":" <a id = \"24\"><\/a><br>\n ## Embarked","85e9b677":" <a id = \"28\"><\/a><br>\n ## Drop Passenger ID and Cabin","2ad7ea6c":"* Children have more chance to survive accoridng to the 2nd graph age <= 10 has a high survival probabilty namely rate. \n* Also oldest passengers (60-80) survived at most.\n* large number of 20 years old didn't survive in general, where as in general 35 year olds survived.\n* most of the passengers are in 15-35 age range\n* Gaussian distribution is obtained.\n* use afe feaure in training\n* use age distribution for missing value of age","da55331b":"<a id = \"5\"><\/a><br>\n## Numerical Variable:","56ee6857":"<a id = \"10\"><\/a><br>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1 missing value","84226199":"* SibSp and Parch can be used for new feature extraction  with threshold = 3\n* Small families have more chance to survive.\n* There is a standart deviation in survival of passenger with Parch = 3.","a36476bd":"* Family size 4'e kdara art\u0131\u015f g\u00f6steririken 5 olunca aniden d\u00fc\u015f\u00fc\u015f ya\u015f\u0131yor.","957cd676":" <a id = \"22\"><\/a><br>\n ## Name -- Title","ed84e0bc":" <a id = \"20\"><\/a><br>\n ## Fill Missing: Age Feature","2af307c1":"<a id = \"1\"><\/a><br>\n# [Load and Check the Data]","1b27818d":" <a id = \"21\"><\/a><br>\n # Feature Engineering","70a752aa":" <a id = \"17\"><\/a><br>\n ## Pclass -- Survived -- Age ","30fc4c4d":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass- Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","1b58255a":"* Having a lot of SibSp have less cnhance to sruvive.\n* If SibSp == 0 or 1 or 2, passenger has more chance to survive.\n* We can consider a new feature describing these categories.\n","69c2184c":" <a id = \"15\"><\/a><br>\n ## Pclass -- Survived   ","41c2f092":"<a id = \"11\"><\/a><br>\n# Visualization","aa92ae4e":" <a id = \"25\"><\/a><br>\n ## Ticket","98071595":" <a id = \"16\"><\/a><br>\n ## Age -- Survived   ","c49728f9":"<a id = \"7\"><\/a><br>\n# Outlier Detection","9132ecac":"Fare feature seems to have correlation with survived feature (0.26)","d265f9f8":"<a id = \"9\"><\/a><br>\n## Find Missing Value","6eec9f14":"* Pclass is important feature for model training\n* Pclass == 1 => survival rate is higher than death rate\n* Pclass == 3 => survival rate is lower than death rate\n* Pclass == 2 => survival rate is almost equal to death rate","bb38a4f3":"* Big families have a lower chance to survive.\n* Small families have more chance to survive than large families.","ee59415e":" <a id = \"33\"><\/a><br>\n## Ensemble Modeling","a9a6bd6e":"# Introduction\nThe sinking of Titanic is one of the most notorious shipwredcks in the history. In 1912, during her voyage, the titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. \n\n<font color = 'blue'>\nContent:\n    \n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)    \n        *    [Categorical Variable](#4)  \n        *    [Numerical Variable](#5) \n3. [Basic Data Analysis](#6)  \n4. [Outlier Detection](#7)\n5. [Missing Value](#8) \n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)    \n6. [Visualization](#11) \n    * [Correlation Between SibSp -- Parch -- Age -- Fare -- Survived](#12)   \n    * [SibSp -- Survived](#13)    \n    * [Parch -- Survived](#14) \n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16) \n    * [Pclass -- Survived -- Age](#17) \n    * [Embarked -- Sex -- Pclass -- Survived](#18) \n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20) \n7. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n7. [Modeling](#29) \n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)\n    ","85965dc8":"<a id = \"8\"><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","57b61749":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, SibSp, Parch\n* Numerical Variable: Fare, Age, PassengerId","c93a5d06":"* Sex is not informative for age prediction. Because age distribution seems to be same with respect to sex.","d0861b94":"* When fare goes up, survival rate also increases for passenger that deperated in S port. \n* When fare goes up, survival rate also increases for passenger that deperated in C port.\n* In port Q, the difference is not strong as it is in S and C.\n* Passengers who pay higher fare have better survival. Fare can be used as categorical for training."}}