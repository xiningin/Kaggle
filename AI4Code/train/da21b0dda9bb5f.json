{"cell_type":{"5c50afb3":"code","d2c5161b":"code","fe65bbd4":"code","b283128e":"code","fecd9034":"code","826efdc2":"code","5aaae189":"code","654121f9":"code","59acda7c":"code","9a1d8aa8":"code","887ad129":"code","570e75a6":"code","a1527a70":"code","7369b088":"code","9f68d5c1":"code","a2c9a59c":"code","0bbd73e5":"code","5f201d8e":"code","699a12be":"code","969b34f1":"code","b430e2f4":"code","ffa7e050":"code","ecf574d9":"code","f99f6b03":"code","c4b6faf8":"code","8464b541":"code","2e0aa076":"code","4f772074":"code","aa6dfa86":"code","a07c9c81":"code","e54bbc83":"code","e9477cea":"code","a30806b4":"code","ec20895d":"code","9474e88c":"code","04e153c7":"code","9bee4957":"code","02eacb77":"markdown","43a335da":"markdown","dbb8d8c1":"markdown","b7b85010":"markdown","2b265aa4":"markdown","7e353b19":"markdown","b8c23479":"markdown","1e4660ed":"markdown","2d430a06":"markdown","d7a91b12":"markdown","b0e0035d":"markdown","c6451e06":"markdown","d08bd001":"markdown","271810d3":"markdown","66445c4e":"markdown","b49c24d4":"markdown"},"source":{"5c50afb3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d2c5161b":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.axes\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")","fe65bbd4":"train = pd.read_csv(\"..\/input\/finance-company-loan-data\/train_ctrUa4K.csv\")\ntest = pd.read_csv(\"..\/input\/finance-company-loan-data\/test_lAUu6dG.csv\")\ntrain_original = train.copy()\ntest_original = test.copy()","b283128e":"train.info()","fecd9034":"train[\"Loan_Status\"].value_counts(normalize = True).reset_index()","826efdc2":"train['Loan_Status'].value_counts(normalize = True).plot.bar()","5aaae189":"plt.figure(1)\nplt.subplot(221) \ntrain['Gender'].value_counts(normalize = True).plot.bar(figsize = (20,10), title = 'Gender')\nplt.subplot(222)\ntrain['Married'].value_counts(normalize = True).plot.bar(title = 'Married')\nplt.subplot(223)\ntrain['Self_Employed'].value_counts(normalize = True).plot.bar(title = 'Self Employed')\nplt.subplot(224)\ntrain['Credit_History'].value_counts(normalize = True).plot.bar(title = 'Credit History')\n\n","654121f9":"plt.figure(1)\nplt.subplot(131)\ntrain['Education'].value_counts(normalize = True).plot.bar(figsize = (20,5), title = 'Education')\nplt.subplot(132)\ntrain['Dependents'].value_counts(normalize = True).plot.bar(title = 'Dependents')\nplt.subplot(133)\ntrain['Property_Area'].value_counts(normalize = True).plot.bar(title = 'Property area')","59acda7c":"plt.figure(1)\nplt.subplot(121)\nsns.distplot(train['ApplicantIncome'])\nplt.subplot(122)\ntrain['ApplicantIncome'].plot.box(figsize = (16,5))\nplt.show()","9a1d8aa8":"train.boxplot(column = 'ApplicantIncome', by = 'Education') \nplt.suptitle(\"\")","887ad129":"plt.figure(1)\nplt.subplot(121)\nsns.distplot(train['CoapplicantIncome'])\nplt.subplot(122)\ntrain['CoapplicantIncome'].plot.box(figsize =(20,10))","570e75a6":"plt.figure(1)\nplt.subplot(121)\nsns.distplot(train['LoanAmount'])\nplt.subplot(122)\ntrain['LoanAmount'].plot.box(figsize =(20,10))","a1527a70":"Gender = pd.crosstab(train['Gender'],train['Loan_Status'])\nGender.div(Gender.sum(1).astype(float), axis = 0).plot(kind = \"bar\",stacked = True, figsize =(4,4))","7369b088":"Married = pd.crosstab(train['Married'],train['Loan_Status'])\nEducation = pd.crosstab(train['Education'],train['Loan_Status'])\nDependents = pd.crosstab(train['Dependents'],train['Loan_Status'])\nSelf_Employed = pd.crosstab(train['Self_Employed'],train['Loan_Status'])\nMarried.div(Married.sum(1).astype(float), axis = 0).plot(kind = \"bar\", stacked = True, figsize = (4,4))\nEducation.div(Education.sum(1).astype(float), axis = 0).plot(kind = \"bar\", stacked = True, figsize = (4,4))\nDependents.div(Dependents.sum(1).astype(float), axis = 0).plot(kind = \"bar\", stacked = True, figsize = (4,4))\nSelf_Employed.div(Self_Employed.sum(1).astype(float), axis = 0).plot(kind = \"bar\", stacked = True, figsize = (4,4))","9f68d5c1":"bins = []\nbins = [0,2500,4000,6000,81000] \ngroups = ['Low','Average','High','Very High']\ntrain['Income_bin']=pd.cut(train['ApplicantIncome'], bins, labels = groups)\nIncome_bin = pd.crosstab(train['Income_bin'], train['Loan_Status'])\nIncome_bin.div(Income_bin.sum(1).astype(float), axis = 0).plot(kind = \"bar\", stacked = True,)\nplt.xlabel(\"Applicant Income\")\nplt.ylabel(\"Percentage\")","a2c9a59c":"bins = [0,1000,3000,42000] \ngroups = ['Low','Average','High']\ntrain['Coapplicant_income_bin']=pd.cut(train['CoapplicantIncome'], bins, labels = groups) \nCoapplicant_Income = pd.crosstab(train['Coapplicant_income_bin'],train['Loan_Status'])\nCoapplicant_Income.div(Coapplicant_Income.sum(1).astype(float), axis = 0).plot(kind =\"bar\", stacked = True, figsize = (4,4))\nplt.xlabel(\"Co-Applicant Income\")\nplt.ylabel(\"Percentage\")","0bbd73e5":"bins = [0,2500,4000,81000] \ngroups = ['Low','Average','High']\ntrain['Totalincome'] = train['ApplicantIncome'] + train['CoapplicantIncome']\ntrain['Total_income_bin']=pd.cut(train['Totalincome'], bins, labels = groups) \nTotal_Income = pd.crosstab(train['Total_income_bin'],train['Loan_Status'])\nTotal_Income.div(Total_Income.sum(1).astype(float), axis = 0).plot(kind =\"bar\", stacked = True, figsize = (4,4))\nplt.xlabel(\"Total Income\")\nplt.ylabel(\"Percentage\")","5f201d8e":"bins=[0,100,200,700] \ngroup=['Low','Average','High'] \ntrain['LoanAmount_bin']=pd.cut(train['LoanAmount'],bins,labels=group)\nLoanAmount_bin=pd.crosstab(train['LoanAmount_bin'],train['Loan_Status']) \nLoanAmount_bin.div(LoanAmount_bin.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, figsize = (4,4)) \nplt.xlabel('LoanAmount') \nP = plt.ylabel('Percentage')","699a12be":"train=train.drop(['Income_bin', 'Coapplicant_income_bin', 'LoanAmount_bin', 'Total_income_bin', 'Totalincome'], axis=1)\ntrain['Dependents'].replace('3+', 3,inplace=True) \ntest['Dependents'].replace('3+', 3,inplace=True) \ntrain['Loan_Status'].replace('N', 0,inplace=True)\ntrain['Loan_Status'].replace('Y', 1,inplace=True)","969b34f1":"matrix = train.corr()\nf, ax = plt.subplots(figsize = (9,6))\nsns.heatmap(matrix, vmax = .8, cmap = \"YlOrBr\", square = True)","b430e2f4":"train.isnull().sum()","ffa7e050":"train['Gender'].fillna(train['Gender'].mode()[0], inplace = True)\ntrain['Married'].fillna(train['Married'].mode()[0], inplace = True)\ntrain['Dependents'].fillna(train['Dependents'].mode()[0], inplace = True)\ntrain['Self_Employed'].fillna(train['Self_Employed'].mode()[0], inplace = True)\ntrain['Credit_History'].fillna(train['Credit_History'].mode()[0], inplace = True)\ntrain.isnull().sum()","ecf574d9":"train['Loan_Amount_Term'].fillna(train['Loan_Amount_Term'].mode()[0], inplace=True)\ntrain['LoanAmount'].fillna(train['LoanAmount'].median(), inplace=True)","f99f6b03":"test['Gender'].fillna(train['Gender'].mode()[0], inplace=True) \ntest['Dependents'].fillna(train['Dependents'].mode()[0], inplace=True) \ntest['Self_Employed'].fillna(train['Self_Employed'].mode()[0], inplace=True) \ntest['Credit_History'].fillna(train['Credit_History'].mode()[0], inplace=True) \ntest['Loan_Amount_Term'].fillna(train['Loan_Amount_Term'].mode()[0], inplace=True) \ntest['LoanAmount'].fillna(train['LoanAmount'].median(), inplace=True)\n","c4b6faf8":"test['Loan_Amount_Term'].fillna(train['Loan_Amount_Term'].mode()[0], inplace=True)\ntest['LoanAmount'].fillna(train['LoanAmount'].median(), inplace=True)\n","8464b541":"train=train.drop('Loan_ID',axis=1) \ntest=test.drop('Loan_ID',axis=1)","2e0aa076":"X = train.drop('Loan_Status',1) \ny = train.Loan_Status","4f772074":"X=pd.get_dummies(X) \ntrain=pd.get_dummies(train) \ntest=pd.get_dummies(test)","aa6dfa86":"from sklearn.model_selection import train_test_split\nx_train, x_cv, y_train, y_cv = train_test_split(X,y, test_size =0.3)\nx_train.head()\nx_train.isnull().values.any()","a07c9c81":"from sklearn.linear_model import LogisticRegression \nfrom sklearn.metrics import accuracy_score\nmodel = LogisticRegression() \nmodel.fit(x_train, y_train)","e54bbc83":"pred_cv = model.predict(x_cv)","e9477cea":"accuracy_score(y_cv,pred_cv)","a30806b4":"pred_test = model.predict(test)","ec20895d":"submission1=pd.read_csv(\"..\/input\/finance-company-loan-data\/sample_submission_49d68Cx.csv\", index_col=False)","9474e88c":"submission1['Loan_Status']=pred_test \nsubmission1['Loan_ID']=test_original['Loan_ID']","04e153c7":"submission1['Loan_Status'].replace(0, 'N',inplace=True) \nsubmission1['Loan_Status'].replace(1, 'Y',inplace=True)","9bee4957":"pd.DataFrame(submission1, columns=['Loan_ID','Loan_Status']).to_csv('logistic2.csv')","02eacb77":"# Importing libraries","43a335da":"We can see that there are a higher number of graduates with very high incomes, which are appearing to be the outliers.\n\nLet\u2019s look at the Coapplicant income distribution","dbb8d8c1":"## Import data","b7b85010":"Following can be infered from the plots\n1. Around 80% are graduates\n2. Most people dont have dependents\n3. Most applicants are from semi-urban area","2b265aa4":"# Missing value imputation","7e353b19":"It can be infered that most of the data in the distribution is inclined towards the left that means data is not normally distributed. We will try to make it normal at later stage.\n\nThe boxplot confirms presence of a number of outliers\/ extreme values in the database. This can be attributed to the presence of income disparity in the society. This can also be seen from the point of view that we are looking at people with different level of education level\n\nLets try segregating income by level of education","b8c23479":"It can be seen that the proportion of approved loans is higher for Low and Average Loan Amount as compared to that of High Loan Amount which supports our hypothesis in which we considered that the chances of loan approval will be high when the loan amount is less.\n\nLet\u2019s drop the bins which we created for the exploration part. We will change the 3+ in dependents variable to 3 to make it a numerical variable.We will also convert the target variable\u2019s categories into 0 and 1 so that we can find its correlation with numerical variables. One more reason to do so is few models like logistic regression takes only numeric values as input. We will replace N with 0 and Y with 1.","1e4660ed":"* Proportion of married applicants is higher for the approved loans.\n* Distribution of applicants with 1 or 3+ dependents is similar across both the categories of Loan_Status.\n* There is nothing significant we can infer from Self_Employed vs Loan_Status plot.","2d430a06":"It can be inferred that Applicant income does not affect the chances of loan approval which contradicts the hypothesis in which I assumed that if the applicant income is high the chances of loan approval will also be high.\n\nWe will analyze the coapplicant income and loan amount variable in similar manner.","d7a91b12":"\nWe see that the most correlated variables are (ApplicantIncome - LoanAmount) and (Credit_History - Loan_Status). LoanAmount is also correlated with CoapplicantIncome.","b0e0035d":"We see a similar distribution as that of the applicant income. Majority of coapplicant\u2019s income ranges from 0 to 5000. We also see a lot of outliers in the coapplicant income and it is not normally distributed.\n\nLet\u2019s look at the distribution of LoanAmount variable.","c6451e06":"We can see that Proportion of loans getting approved for applicants having low Total_Income is very less as compared to that of applicants with Average, High and Very High Income.\n\nLet\u2019s visualize the Loan amount variable.","d08bd001":"It can be infered from the plots that -\n1. 85% applicants in the database are males.\n2. 65% applicants are married\n3. Around 15% of the applicants are self employed\n4. Around 85% of the applicants have repaid their debts","271810d3":"\nIt shows that if coapplicant\u2019s income is less the chances of loan approval are high. But this does not look right. The possible reason behind this may be that most of the applicants don\u2019t have any coapplicant so the coapplicant income for such applicants is 0 and hence the loan approval is not dependent on it. So we can make a new variable in which we will combine the applicant\u2019s and coapplicant\u2019s income to visualize the combined effect of income on loan approval.\n\nLet us combine the Applicant Income and Coapplicant Income and see the combined effect of Total Income on the Loan_Status.","66445c4e":"Now lets look at the correlation between all the numerical variables. We will use the heat map to visualize the correlation. Heatmaps visualize data through variations in coloring. The variables with darker color means their correlation is more.","b49c24d4":"It can be infered that the approval of loan is not determined by gender.\n\nNow let us see for other variables"}}