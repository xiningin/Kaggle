{"cell_type":{"a25dbaed":"code","e0c7feab":"code","22bcd7f8":"code","d3e8e704":"code","f8bafd93":"code","c5c46c16":"code","ff64df14":"code","d3e72c94":"code","f7d968d8":"code","cc4b6ebf":"code","d696f4c9":"code","91089b6d":"code","962ab9dd":"code","672ce753":"code","9debe5e1":"code","5158e0b4":"markdown"},"source":{"a25dbaed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e0c7feab":"# for visual data\nimport matplotlib.pyplot as plt\nimport random\n%matplotlib inline\n\n# for deep learning\nfrom tensorflow.keras.layers import Dense, Flatten, Activation,Dropout,Conv2D, MaxPooling2D\nfrom tensorflow.keras.models import Sequential\nfrom keras.utils import np_utils\nfrom tensorflow.keras.callbacks import ModelCheckpoint","22bcd7f8":"# first import the data\ntraining_data = pd.read_csv('..\/input\/train.csv')\ntesting_data = pd.read_csv('..\/input\/test.csv')","d3e8e704":"# take look on the raw data\ntraining_data.head()\n","f8bafd93":"# slice the label to y and other columns to x\nY_train = training_data['label']\nX_train = np.asarray(training_data.loc[:,\"pixel0\":])\/255 # slice and scale\nX_test = np.asarray(testing_data)\/255 # scale","c5c46c16":"# reshape the data\nX_train = X_train.reshape(-1,28,28,1)\nX_test = X_test.reshape(-1,28,28,1)","ff64df14":"X_train.shape","d3e72c94":"# split the train data into train and valid data we need only 0.2 of data be valid\nX_tarin, X_valid = X_train[int(X_train.shape[0]*0.2):], X_train[ : int(X_train.shape[0]*0.2)]\nY_tarin, Y_valid = X_train[int(Y_train.shape[0]*0.2):], Y_train[ : int(X_train.shape[0]*0.2)]\n# print number of training, validation, and test images\nprint(X_train.shape[0], 'train samples')\nprint(X_test.shape[0], 'test samples')\nprint(X_valid.shape[0], 'validation samples')","f7d968d8":"\n# visual random image\nplt.imshow(random.choice(X_train).reshape(28,28),cmap='gray')","cc4b6ebf":"model = Sequential()\nmodel.add(Conv2D(filters=16, kernel_size=2, padding='same', activation='relu', \n                        input_shape=(28, 28, 1)))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=32, kernel_size=2, padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Conv2D(filters=64, kernel_size=2, padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Dropout(0.3))\nmodel.add(Flatten())\nmodel.add(Dense(1024, activation='relu'))\n\nmodel.add(Dense(10, activation='softmax'))","d696f4c9":"# compile the model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy',metrics=['accuracy'])","91089b6d":" \n# train the model and save the best accuracy\ncheckpoint_path = \"Digit_Recognizer.hdf5\" \ncheckpointer = ModelCheckpoint(filepath=checkpoint_path, verbose=1, \n                               save_best_only=True)\n\nbest_model = model.fit(X_train, Y_train, batch_size=32, epochs=20,\n          validation_data=(X_valid, Y_valid),  verbose=1, shuffle=True, callbacks=[checkpointer])","962ab9dd":"results = model.predict(X_test)","672ce753":"fig = plt.figure(figsize=(20, 8))\nfor i, idx in enumerate(np.random.choice(X_test.shape[0], size=24, replace=False)): \n    ax = fig.add_subplot(4, 8, i + 1, xticks=[], yticks=[])\n    ax.imshow(np.squeeze(X_test[idx]),cmap='gray')\n    pred_idx = np.argmax(results[idx])\n    ax.set_title(\"{}\".format(pred_idx))","9debe5e1":"results = np.argmax(results,axis = 1)\nresults = pd.Series(results,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)\nsubmission.head()\n","5158e0b4":"# let's build our model"}}