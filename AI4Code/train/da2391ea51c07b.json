{"cell_type":{"3a63d94a":"code","3b754579":"code","6dfaad46":"code","a19dd03f":"code","4af30f2d":"code","db6307ae":"code","292cb7cc":"code","1e97d269":"code","bb0c2879":"code","7c21681a":"code","95cd16e6":"code","36b7d537":"code","710a23d0":"code","ecd15b58":"code","4968d436":"code","19e65464":"code","7c588d4f":"code","fd89d757":"code","28e061d5":"code","8a1f67b7":"code","715c8e84":"code","4d17c222":"code","69662979":"code","2e7a3172":"code","ab225569":"code","2d1e1dcd":"markdown","8626f6d0":"markdown","c5a9059a":"markdown","b3913c1b":"markdown","ac3a0f9d":"markdown","69128194":"markdown","69b08fb4":"markdown","bbfc504a":"markdown","44e25daf":"markdown","2729eac1":"markdown"},"source":{"3a63d94a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\nfrom sklearn.preprocessing import RobustScaler\n\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_absolute_error\nimport optuna\n\nfrom sklearn.metrics import mean_absolute_error as mae\nfrom sklearn.preprocessing import RobustScaler, normalize\nfrom sklearn.model_selection import train_test_split, GroupKFold, KFold\n\nfrom IPython.display import display\n\n","3b754579":"\ntrain = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\n\ntest  = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\n\nsub   = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')\n","6dfaad46":"train","a19dd03f":"test","4af30f2d":"print(train.shape)\nprint(test.shape)","db6307ae":"## Looking for missing values\n\nprint('\\n\\nTrain\\n\\n')\nprint(train.isnull().sum())\n\nprint('\\n\\nTest\\n\\n')\nprint(test.isnull().sum())","292cb7cc":"plt.style.use(\"seaborn\")\n\ncolor=plt.cm.flag(np.linspace(0,2,4))\ntrain[\"R\"].value_counts().plot.bar(color=color,figsize=(10,6))\n\nplt.title(\"R\")\nplt.xlabel(' ')\nplt.ylabel(\"total count\")\nplt.show()","1e97d269":"plt.style.use(\"seaborn\")\n\ncolor=plt.cm.flag(np.linspace(0,2,4))\ntrain[\"C\"].value_counts().plot.bar(color=color,figsize=(10,6))\n\nplt.title(\"C\")\nplt.xlabel(' ')\nplt.ylabel(\"total count\")\nplt.show()","bb0c2879":"# relationship between features\n\ncorr = train.corr()\nfig, ax = plt.subplots(figsize=(12,8))\nsns.heatmap(corr)","7c21681a":"train[\"u_out\"].value_counts().plot.pie(figsize=(12,8),explode=(0.01,0.01),autopct=\"%1.1f%%\")\nplt.title(\"U_out\",fontsize=18)\nplt.show()","95cd16e6":"# Pressure Distribution\n# Target feature distribution It took time so u can remove # and have a look at it.\n\n#sns.histplot(data=train['pressure'], x= train[\"pressure\"], kde=True)","36b7d537":"for i in range(1,20,1):\n    one_breath = train[train[\"breath_id\"]==i]\n\n    plt.figure(figsize=(6,4));\n    sns.lineplot(x = 'id',y='pressure',data=one_breath[one_breath['u_out']==0],color='green',label='pressure inhale');\n    sns.lineplot(x = 'id',y='pressure',data=one_breath[one_breath['u_out']==1],color='orange',label='pressure exhale');\n    sns.lineplot(x = 'id',y='u_in',data=one_breath,color='blue',label='valve position')\n    plt.title(f\"Variation of Pressure and Input valve position during breath {i}\");\n    plt.legend();","710a23d0":"def add_features(df):\n    df['area'] = df['time_step'] * df['u_in']\n    df['area'] = df.groupby('breath_id')['area'].cumsum()\n    df['cross']= df['u_in']*df['u_out']\n    df['cross2']= df['time_step']*df['u_out']\n    \n    \n    df['u_in_cumsum'] = (df['u_in']).groupby(df['breath_id']).cumsum()\n    df['one'] = 1\n    df['count'] = (df['one']).groupby(df['breath_id']).cumsum()\n    df['u_in_cummean'] =df['u_in_cumsum'] \/df['count']\n    \n\n    \n    df['breath_id_lag']=df['breath_id'].shift(1).fillna(0)\n    df['breath_id_lag2']=df['breath_id'].shift(2).fillna(0)\n    df['breath_id_lagsame']=np.select([df['breath_id_lag']==df['breath_id']],[1],0)\n    df['breath_id_lag2same']=np.select([df['breath_id_lag2']==df['breath_id']],[1],0)\n    df['u_in_lag'] = df['u_in'].shift(1).fillna(0)\n    df['u_in_lag'] = df['u_in_lag']*df['breath_id_lagsame']\n    df['u_in_lag2'] = df['u_in'].shift(2).fillna(0)\n    df['u_in_lag2'] = df['u_in_lag2']*df['breath_id_lag2same']\n    df['u_out_lag2'] = df['u_out'].shift(2).fillna(0)\n    df['u_out_lag2'] = df['u_out_lag2']*df['breath_id_lag2same']\n    #df['u_in_lag'] = df['u_in'].shift(2).fillna(0)\n    \n    df['R'] = df['R'].astype(str)\n    df['C'] = df['C'].astype(str)\n    df['RC'] = df['R']+df['C']\n    df = pd.get_dummies(df)\n    return df\n\ntrain = add_features(train)\ntest = add_features(test)\n","ecd15b58":"X = train.drop(['id', 'breath_id', 'u_out', 'pressure'], axis = 1)\nX_test = test.drop(['id', 'breath_id', 'u_out'], axis = 1)\ny = train['pressure']","4968d436":"train.shape","19e65464":"y.shape","7c588d4f":"def objective(trial,data=X,target=y):\n    \n    X_train, X_valid, y_train, y_valid = train_test_split(data, target, train_size=0.8, test_size=0.2,random_state=0)\n        \n    params = {\n        'objective': 'regression',\n        'metric': 'mae', \n        'boosting_type': 'gbdt',\n        'n_estimators': 1000,\n        'random_state': 42,\n        'learning_rate': trial.suggest_categorical('learning_rate', [0.006,0.008,0.01,0.014,0.017,0.02]),\n        'subsample': trial.suggest_loguniform('subsample', 0.4, 1.0),\n        'subsample_freq': trial.suggest_loguniform('subsample_freq', 0.4, 1.0),\n        'colsample_bytree': trial.suggest_uniform('colsample_bytree', 0.4, 1.0),\n        'reg_alpha': trial.suggest_loguniform('reg_alpha', 1e-3, 10.0),\n        'reg_lambda': trial.suggest_loguniform('reg_lambda', 1e-3, 10.0),\n        'min_child_weight': trial.suggest_int('min_child_weight', 5, 256),\n        'min_child_samples': trial.suggest_int('min_child_samples', 5, 100),\n        'bagging_fraction': trial.suggest_uniform('bagging_fraction', 0.4, 1.0),\n        'bagging_freq': trial.suggest_int('bagging_freq', 1, 7),\n    }\n    model = lgb.LGBMRegressor(**params) \n    model.fit(X_train, y_train)\n    \n    preds = model.predict(X_valid)\n    mae = mean_absolute_error(y_valid, preds)\n    \n    return mae\n","fd89d757":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,random_state=0)","28e061d5":"lgb_params = {\n    'objective': 'regression',\n    'metric': 'mae', \n    'boosting_type': 'gbdt',\n    'n_estimators': 1000,\n    'random_state': 42,\n    'learning_rate': 0.017,\n    'subsample': 0.6706735076307812,\n    'subsample_freq': 0.9731836936473381,\n    'colsample_bytree': 0.7981147731267384,\n    'reg_alpha': 0.29250836566881794,\n    'reg_lambda': 0.0032438602599939702,\n    'min_child_weight': 134,\n    'min_child_samples': 26,\n    'bagging_fraction': 0.6263245217964235,\n    'bagging_freq': 1,\n}","8a1f67b7":"model = lgb.LGBMRegressor(**lgb_params)\nmodel","715c8e84":"model.fit(X_train, y_train)","4d17c222":"pred_valid = model.predict(X_valid)\nprint('Mean Absolute Error: ', mean_absolute_error(y_valid, pred_valid))","69662979":"preds = model.predict(X_test)","2e7a3172":"sub.pressure = preds\nsub.head()","ab225569":"sub.to_csv('submission.csv', index=False)","2d1e1dcd":"## Feature Engineering","8626f6d0":"## Model Stacking","c5a9059a":"## Exploratory Data Analysis ","b3913c1b":"## Looking into dataset","ac3a0f9d":"## Model Lgbm parameters","69128194":"## Loading dataset","69b08fb4":"## Extracting target feature","bbfc504a":"## Some basic info.\n1.   When we have U_out = 0 That means the inhale pressure from patient.\n2.   When we have U_out = 1 That means exhale pressure form patient.\n3.   U_in represents the valve pressue of Oxygen provided to patient.","44e25daf":"## Evaluation ","2729eac1":"## Submission\n"}}