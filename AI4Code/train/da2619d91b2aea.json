{"cell_type":{"07c96da3":"code","b3271991":"code","f3029716":"code","70fe008d":"code","8ef20ad3":"code","93d2b9c3":"code","7a4dc091":"code","f5a45bb9":"code","2b9d9d37":"code","a9d0a75e":"code","f6cdeb1e":"code","f50130b4":"code","f0f39094":"code","69c74f5f":"code","ba7789d2":"code","627f2f18":"code","718ac3c8":"code","316cfdda":"code","36bad7af":"code","f1df1947":"code","ce16aa8f":"code","681c707c":"code","695fb3aa":"code","9fef9999":"code","1d9879b1":"code","ffa391b4":"code","a3a8d362":"code","6a9d11c5":"code","e45f9f46":"code","82db03a8":"code","ed28684e":"code","28834b56":"code","edd4d215":"code","4f8f798e":"code","932905a0":"code","6a125ef8":"code","f39e3038":"code","03c79d6c":"code","71af06db":"code","1289a320":"markdown","fe92819f":"markdown","427d1a95":"markdown","cf8cd4a2":"markdown","2e9c52b4":"markdown","ddec84eb":"markdown","f6671a30":"markdown","9d00de46":"markdown","28f3e35e":"markdown","00b849d3":"markdown"},"source":{"07c96da3":"import numpy as np\n\nimport pandas as pd\n\nimport warnings\n\nimport os\n\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n\nimport wordcloud\n\nimport matplotlib_venn\n\n","b3271991":"\ninput_path = \"..\/input\"\nfor file in os.listdir(input_path):\n    print(file)","f3029716":"professionals_df = pd.read_csv(r\"..\/input\/professionals.csv\")\ntag_users_df = pd.read_csv(r\"..\/input\/tag_users.csv\")\nschool_memberships_df = pd.read_csv(r\"..\/input\/school_memberships.csv\")\nanswers_df = pd.read_csv(r\"..\/input\/answers.csv\")\ntags_df = pd.read_csv(r\"..\/input\/tags.csv\")\nquestions_df = pd.read_csv(r\"..\/input\/questions.csv\")\nstudents_df = pd.read_csv(r\"..\/input\/students.csv\")\ngroups_df = pd.read_csv(r\"..\/input\/groups.csv\")\ngroup_memberships_df = pd.read_csv(r\"..\/input\/group_memberships.csv\")\ncomments_df = pd.read_csv(r\"..\/input\/comments.csv\")\nmatches_df = pd.read_csv(r\"..\/input\/matches.csv\")\nemails_df = pd.read_csv(r\"..\/input\/emails.csv\")\ntag_question_df = pd.read_csv(r\"..\/input\/tag_questions.csv\")\nanswer_scores_df = pd.read_csv(r\"..\/input\/answer_scores.csv\")\nquestion_scores_df = pd.read_csv(r\"..\/input\/question_scores.csv\")\n","70fe008d":"print(\"professionals DF :\",professionals_df.columns)\nprint(\"tag_users_df  :\",tag_users_df.columns)\nprint(\"school_memberships_df DF :\",school_memberships_df.columns)\nprint(\"answers_df DF :\",answers_df.columns)\nprint(\"tags_df DF :\",tags_df.columns)\nprint(\"questions_df DF :\",questions_df.columns)\nprint(\"students_df DF :\",students_df.columns)\nprint(\"groups_df DF :\",groups_df.columns)\nprint(\"group_memberships_df DF :\",group_memberships_df.columns)\nprint(\"comments_df DF :\",comments_df.columns)\nprint(\"matches_df DF :\",matches_df.columns)\nprint(\"emails_df DF :\",emails_df.columns)\nprint(\"tag_question_df DF :\",tag_question_df.columns)\nprint(\"answer_scores_df DF :\",answer_scores_df.columns)\n","8ef20ad3":"professionals_df.isna().sum()","93d2b9c3":"def plotNa(df_list):\n    tot = len(df_list)\n    \n    for dfi in df_list:\n        f, axes = plt.subplots(2, figsize=(20, 10), sharex=True)\n        count = 0\n        df = dfi[0]\n        df_name = dfi[1]\n        sns.barplot(x=df.columns,y=df.isna().sum(),ax=axes[0])\n        axes[0].set_title(\"Nans in the DataFrame \" + df_name)\n        sns.barplot(x=df.columns,y=df.nunique(),ax=axes[1])\n        axes[1].set_title(\"Unique Values in DataFrame \" + df_name)\n        plt.plot()\n\ndef plotNaDf(df):\n    x = df.columns\n    y = df.isna().sum()\n    f, axes = plt.subplots(2, figsize=(20, 10), sharex=True)\n\n    s1 = sns.barplot(x=df.columns,y=df.isna().sum(),ax=axes[0])\n    axes[0].set_title(\"Nans in the database\")\n    s2 = sns.barplot(x=df.columns,y=df.nunique(),ax=axes[1])\n    axes[1].set_title(\"Unique Values in the database\")\n","7a4dc091":"#Plots the venn diagram to see the common and uncommon col in 2 datasets\nfrom matplotlib_venn import venn2, venn2_circles\ndef pltOnlyVenn(\n    df1,\n    df2,\n    col1,\n    col2,\n    label1,\n    label2,\n    title1):\n\n    f,ax1 = plt.subplots(figsize=(5, 5))\n    venn2(subsets=(set(df1[col1]),set(df2[col2])),\n          set_labels=[label1,label2],ax=ax1)\n    ax1.set_title(title1)\n    plt.tight_layout()\n    return\n\ndef pltVenn(\n    df1,\n    df2,\n    col1,\n    col2,\n    label1,\n    label2,\n    title1,\n    pieLabel1,\n    pieLabel2,\n    pieLabel3,\n    pieTitle):\n    \n    f, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 10))\n    #f, axes = plt.subplots(2,figsize=(10, 10), sharex=True)\n    venn2(subsets=(set(df1[col1]),set(df2[col2])),set_labels=[label1,label2],ax=ax1)\n    ax1.set_title(title1)\n\n    #Pie\n    ax2.set_title(pieTitle)\n    ax2.pie(\n                x = [\n                    len(set(df1[col1]) - set(df2[col2])),\n                    len(set(df1[col1]) & set(df2[col2])),\n                    len(set(df2[col2]) - set(df1[col1]))\n                ],\n        labels=[pieLabel1,pieLabel2,pieLabel3],\n        autopct='%1.2f%%'\n    )\n    plt.tight_layout()\n\ndef pltPie(\n    df1,\n    df2,\n    col1,\n    col2,\n    pieLabel1,\n    pieLabel2,\n    pieTitle):\n    \n    f, ax2 = plt.subplots(figsize=(5, 5))\n\n    #Pie\n    ax2.set_title(pieTitle)\n    ax2.pie(\n                x = [\n                    len(set(df1[col1]) - set(df2[col2])),\n                    len(set(df1[col1]) & set(df2[col2]))\n                ],\n        labels=[pieLabel1,pieLabel2],\n        autopct='%1.2f%%'\n    )\n    plt.tight_layout()\n\n","f5a45bb9":"pltOnlyVenn(students_df,\n           professionals_df,\n           'students_id',\n           'professionals_id',\n           'students_df',\n           'professionals_df',\n           'Common ID within students and professionals')","2b9d9d37":"group_memberships_df.head()","a9d0a75e":"pltVenn(\n    students_df,\n    questions_df,\n    'students_id',\n    'questions_author_id',\n    'Students',\n    'Questions',\n    'How many students have been writing questions',\n    'Students without questions',\n    'Students with questions',\n    'Not students',\n    'What is the percentage'\n)\n","f6cdeb1e":"pltVenn(\n    professionals_df,\n    questions_df,\n    'professionals_id',\n    'questions_author_id',\n    'Professionals',\n    'Questions',\n    'How many Professionals have been writing questions',\n    'Professionals without questions',\n    'Professionals with questions',\n    'Not Professionals',\n    'What is the percentage'\n)\n","f50130b4":"pltVenn(\n        answers_df,\n        professionals_df,\n        'answers_author_id',\n        'professionals_id',\n        'Students_df',\n        'Professional_df',\n        'authorID in students Vs professionals_id',\n        'Professionals without answers',\n        'Professionals with answers',\n        'Not Professionals',\n        'What is the percentage'\n       )","f0f39094":"#lets check the various group type\ngroups_df.groups_group_type.unique()","69c74f5f":"#Lets check if there are any common values in group_memberships_df & groups_df\npltVenn(\n            groups_df,\n            group_memberships_df,\n            'groups_id',\n            'group_memberships_group_id',\n            'groups_df',\n            'group_memberships_df',\n            'Common Group Ids',\n            'Unique in groups_df',\n            'Common Across',\n            'Unique in group_memberships_df',\n            'What is the Percentage')","ba7789d2":"group_memberships_df['groups_id'] = group_memberships_df['group_memberships_group_id']\n","627f2f18":"diff_groups_df = groups_df.merge(group_memberships_df,\n                          on='groups_id',how='right')\n\ndiff_groups_df.groups_group_type.unique()","718ac3c8":"pltVenn(\n            students_df,\n            questions_df,\n            'students_id',\n            'questions_author_id',\n            'students_df',\n            'questions_df',\n            'Students Asking Questions',\n            'Students Not Asking Questions',\n            'Students Asking Questions',\n            'Unique Students in questions_df',\n            'What is the Percentage')","316cfdda":"pltVenn(\n            professionals_df,\n            comments_df,\n            'professionals_id',\n            'comments_author_id',\n            'professionals_df',\n            'comments_df',\n            'Professional Giving Comments',\n            'Professional Not Giving Comments',\n            'Professional Giving Comments',\n            'Unique Professional in comments_df',\n            'What is the Percentage')","36bad7af":"pltVenn(\n            students_df,\n            comments_df,\n            'students_id',\n            'comments_author_id',\n            'students_df',\n            'comments_df',\n            'Students Giving Comments',\n            'Students Not Giving Comments',\n            'Students Giving Comments',\n            'Unique Students in comments_df',\n            'What is the Percentage')","f1df1947":"answers_df['professionals_id'] = answers_df['answers_author_id']\n\nans_prof_df = answers_df.merge(professionals_df,\n                          on='professionals_id',how='left')\nans_prof_df.shape\nans_prof_df.head()","ce16aa8f":"answer_scores_df['answers_id'] = answer_scores_df['id']\nscore_ans_df = answer_scores_df.merge(answers_df,on='answers_id',how='left')\nprint(score_ans_df.shape)","681c707c":"def getDataWithColumns(df):\n    allData = []\n    for i in df:\n        df_name = i[1]\n        columns = i[0].columns.values\n        allData.append((df_name,columns))\n    allData_df = pd.DataFrame(allData,columns=['DataFrame', 'Columns'])\n    return allData_df\n\ndef getDateTimeMonth(df,col):\n    df[col] = df[col].astype('datetime64')\n    df['year'] = df[col].dt.year\n    df['month'] = df[col].dt.month\n    df['week'] = df[col].dt.week\n    df['day'] = df[col].dt.day\n    df['hour'] = df[col].dt.hour\n    return df","695fb3aa":"professionals_df = getDateTimeMonth(professionals_df,col='professionals_date_joined')","9fef9999":"getDateTimeMonth(comments_df,col='comments_date_added')\ngetDateTimeMonth(questions_df,col='questions_date_added')\ngetDateTimeMonth(students_df,col='students_date_joined')","1d9879b1":"plt.figure(figsize=(10,10))\nplt.plot(professionals_df.year)\nplt.plot(students_df.year)","ffa391b4":"plt.figure(figsize=(10,10))\nplt.plot(question_scores_df.score)","a3a8d362":"emails_df['professionals_id'] = emails_df['emails_recipient_id']\nemail_prof_df = emails_df.merge(professionals_df,on='professionals_id',how='left')\nemail_prof_df.shape","6a9d11c5":"pltVenn(matches_df,\n       emails_df,\n       'matches_email_id',\n       'emails_id',\n       'matches_df',\n       'emails_df',\n        'Matching Answers',\n        'Emails in Matching',\n        'Common Emails',\n        'emails in emails_df & not in matches_df',\n        'Pie Chart for Matching emails'\n       )","e45f9f46":"pltPie(\n    emails_df,\n    matches_df,\n    'emails_id',\n    'matches_email_id',\n    'emails_df  - matches_df',\n    'emails_df  & matches_df',\n    'Pie Chart for Matches Email')\n","82db03a8":"emails_df.emails_id.nunique() \/ matches_df.matches_email_id.nunique()","ed28684e":"email_match = matches_df.matches_email_id.unique()\nemail_match.shape","28834b56":"email_prof_df.head(1)","edd4d215":"prof_email_match = email_prof_df.loc[email_prof_df['emails_id'].isin(email_match)]\n\n","4f8f798e":"uniq_prof_id = prof_email_match.professionals_id.unique()","932905a0":"uniq_prof_id.shape","6a125ef8":"uniqueProf = professionals_df[professionals_df['professionals_id'].isin(uniq_prof_id)]","f39e3038":"uniqueProf.shape","03c79d6c":"professionals_df.shape","71af06db":"pltPie(\nprofessionals_df,\nuniqueProf,\n'professionals_id',\n'professionals_id',\n'professionals_df - uniqueProf',\n'professionals_df & uniqueProf',\n'PieChart for Professors who answer correctly')","1289a320":"Let's check if comments_df is by professionals or students 40% of the students are asking the Questions. Rest 60% are not asking any questions.","fe92819f":"We can conclude from above that only 36% professionals are providing answers\n","427d1a95":"# So all group have memberships\nLets check students_df and questions_df (students_id & questions_author_id, to see if every student is asking questions or not)  ","cf8cd4a2":"from the above we see that approx 77% of professors have answered correctly \nat least one time ","2e9c52b4":"# Approx 94% values are present in group_memberships_df as well.\nLets check which all groups are missing in group_memberships_df","ddec84eb":"We see that only 40% of the students are asking the Questions. Rest 60% are not asking any questions.","f6671a30":"Let's check chart by professionals score","9d00de46":"Let's check how many emails sent matches the professional skill","28f3e35e":"Let's check if comments_df is by professionals or students 40% of the students are asking the Questions. Rest 60% are not asking any questions.","00b849d3":"Lets check how the community is build over the period of time"}}