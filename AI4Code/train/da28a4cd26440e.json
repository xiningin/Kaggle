{"cell_type":{"f393e59c":"code","053c947b":"code","dd3e9881":"code","5a025ee0":"code","85463992":"code","91eb1cbf":"code","64b050e5":"code","d50df714":"code","f59e5a2b":"code","a2eb0455":"code","ac1570c0":"code","28b30ad8":"code","8d39930a":"code","a308e0ce":"code","55d68b29":"code","7057e31b":"code","0a0f1eca":"code","32b3ea32":"code","50d5f8b4":"code","740a418d":"code","0a4987a6":"code","86c9b429":"code","fb4b9487":"code","739ff1d2":"code","d86ad653":"code","5cb8936e":"code","23929bce":"code","f35b8f97":"code","20d78621":"code","e4497d6f":"markdown","a7b5f2d5":"markdown","efbda95e":"markdown","65bffb7f":"markdown","5d52399f":"markdown","db3057fd":"markdown","8efc74db":"markdown","32c6dd9d":"markdown","431ad3a2":"markdown","2ee49b53":"markdown","1d3c45c7":"markdown","63df3d64":"markdown","34e1d480":"markdown","bde05d5d":"markdown","72016622":"markdown","075116b9":"markdown","cd0af6e2":"markdown","0cdb3064":"markdown","7934fb37":"markdown","305796fb":"markdown","d5d11298":"markdown","289c89b7":"markdown","40178f4e":"markdown","9ca4971d":"markdown","4990296d":"markdown","786de8d9":"markdown","85b4928c":"markdown","4e3d3872":"markdown","c37ec5fd":"markdown","18cddcf8":"markdown","3fba6bac":"markdown","43ebc1d0":"markdown","bc4facba":"markdown","73f4c13f":"markdown"},"source":{"f393e59c":"# Supress Warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Import the numpy and pandas package\n\nimport numpy as np\nimport pandas as pd\n\n# Data Visualisation\nimport matplotlib.pyplot as plt \nimport seaborn as sns","053c947b":"advertising = pd.DataFrame(pd.read_csv(\"..\/input\/advertising.csv\"))\nadvertising.head()","dd3e9881":"advertising.shape","5a025ee0":"advertising.info()","85463992":"advertising.describe()","91eb1cbf":"# Checking Null values\nadvertising.isnull().sum()*100\/advertising.shape[0]\n# There are no NULL values in the dataset, hence it is clean.","64b050e5":"# Outlier Analysis\nfig, axs = plt.subplots(3, figsize = (5,5))\nplt1 = sns.boxplot(advertising['TV'], ax = axs[0])\nplt2 = sns.boxplot(advertising['Newspaper'], ax = axs[1])\nplt3 = sns.boxplot(advertising['Radio'], ax = axs[2])\nplt.tight_layout()","d50df714":"# There are no considerable outliers present in the data.","f59e5a2b":"sns.boxplot(advertising['Sales'])\nplt.show()","a2eb0455":"# Let's see how Sales are related with other variables using scatter plot.\nsns.pairplot(advertising, x_vars=['TV', 'Newspaper', 'Radio'], y_vars='Sales', height=4, aspect=1, kind='scatter')\nplt.show()","ac1570c0":"# Let's see the correlation between different variables.\nsns.heatmap(advertising.corr(), cmap=\"YlGnBu\", annot = True)\nplt.show()","28b30ad8":"X = advertising['TV']\ny = advertising['Sales']","8d39930a":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, test_size = 0.3, random_state = 100)","a308e0ce":"# Let's now take a look at the train dataset\n\nX_train.head()","55d68b29":"y_train.head()","7057e31b":"import statsmodels.api as sm","0a0f1eca":"# Add a constant to get an intercept\nX_train_sm = sm.add_constant(X_train)\n\n# Fit the resgression line using 'OLS'\nlr = sm.OLS(y_train, X_train_sm).fit()","32b3ea32":"# Print the parameters, i.e. the intercept and the slope of the regression line fitted\nlr.params","50d5f8b4":"# Performing a summary operation lists out all the different parameters of the regression line fitted\nprint(lr.summary())","740a418d":"plt.scatter(X_train, y_train)\nplt.plot(X_train, 6.948 + 0.054*X_train, 'r')\nplt.show()","0a4987a6":"y_train_pred = lr.predict(X_train_sm)\nres = (y_train - y_train_pred)","86c9b429":"fig = plt.figure()\nsns.distplot(res, bins = 15)\nfig.suptitle('Error Terms', fontsize = 15)                  # Plot heading \nplt.xlabel('y_train - y_train_pred', fontsize = 15)         # X-label\nplt.show()","fb4b9487":"plt.scatter(X_train,res)\nplt.show()","739ff1d2":"# Add a constant to X_test\nX_test_sm = sm.add_constant(X_test)\n\n# Predict the y values corresponding to X_test_sm\ny_pred = lr.predict(X_test_sm)","d86ad653":"y_pred.head()","5cb8936e":"from sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","23929bce":"#Returns the mean squared error; we'll take a square root\nnp.sqrt(mean_squared_error(y_test, y_pred))","f35b8f97":"r_squared = r2_score(y_test, y_pred)\nr_squared","20d78621":"plt.scatter(X_test, y_test)\nplt.plot(X_test, 6.948 + 0.054 * X_test, 'r')\nplt.show()","e4497d6f":"## Exploratory Data Analysis","a7b5f2d5":"## Data Cleaning","efbda95e":"## Data Inspection","65bffb7f":"The values we are concerned with are - \n1. The coefficients and significance (p-values)\n2. R-squared\n3. F statistic and its significance","5d52399f":"##### 2. R - squared is 0.816\nMeaning that 81.6% of the variance in `Sales` is explained by `TV`\n\nThis is a decent R-squared value.","db3057fd":"### Univariate Analysis","8efc74db":"####  Looking at some key statistics from the summary","32c6dd9d":"By default, the `statsmodels` library fits a line on the dataset which passes through the origin. But in order to have an intercept, you need to manually use the `add_constant` attribute of `statsmodels`. And once you've added the constant to your `X_train` dataset, you can go ahead and fit a regression line using the `OLS` (Ordinary Least Squares) attribute of `statsmodels` as shown below","431ad3a2":"###### Checking the R-squared on the test set","2ee49b53":"---\nThe fit is significant. Let's visualize how well the model fit the data.\n\nFrom the parameters that we get, our linear regression equation becomes:\n\n$ Sales = 6.948 + 0.054 \\times TV $","1d3c45c7":"##### 1. The coefficient for TV is 0.054, with a very low p value\nThe coefficient is statistically significant. So the association is not purely by chance. ","63df3d64":"As you can see, the regression line is a pretty good fit to the data","34e1d480":"#### Building a Linear Model\n\nYou first need to import the `statsmodel.api` library using which you'll perform the linear regression.","bde05d5d":"### Problem Statement\n\nBuild a model which predicts sales based on the money spent on different platforms for marketing.\n\n### Data\nUse the advertising dataset given in ISLR and analyse the relationship between 'TV advertising' and 'sales' using a simple linear regression model. \n\nIn this notebook, we'll build a linear regression model to predict `Sales` using an appropriate predictor variable.","72016622":"## Reading and Understanding the Data","075116b9":"#### Distribution of the error terms\nWe need to check if the error terms are also normally distributed (which is infact, one of the major assumptions of linear regression), let us plot the histogram of the error terms and see what it looks like.","cd0af6e2":"#### Train-Test Split\n\nYou now need to split our variable into training and testing sets. You'll perform this by importing `train_test_split` from the `sklearn.model_selection` library. It is usually a good practice to keep 70% of the data in your train dataset and the rest 30% in your test dataset","0cdb3064":"Equation of linear regression<br>\n$y = c + m_1x_1 + m_2x_2 + ... + m_nx_n$\n\n-  $y$ is the response\n-  $c$ is the intercept\n-  $m_1$ is the coefficient for the first feature\n-  $m_n$ is the coefficient for the nth feature<br>\n\nIn our case:\n\n$y = c + m_1 \\times TV$\n\nThe $m$ values are called the model **coefficients** or **model parameters**.\n\n---","7934fb37":"# Sales Prediction\n## ( Simple Linear Regression)","305796fb":"We are confident that the model fit isn't by chance, and has decent predictive power. The normality of residual terms allows some inference on the coefficients.\n\nAlthough, the variance of residuals increasing with X indicates that there is significant variation that this model is unable to explain.","d5d11298":"### Performing Simple Linear Regression","289c89b7":"###### 3. F statistic has a very low p value (practically low)\nMeaning that the model fit is statistically significant, and the explained variance isn't purely by chance.","40178f4e":"The residuals are following the normally distributed with a mean 0. All good!","9ca4971d":"## Model Building","4990296d":"Now that you have fitted a regression line on your train dataset, it's time to make some predictions on the test data. For this, you first need to add a constant to the `X_test` data like you did for `X_train` and then you can simply go on and predict the y values corresponding to `X_test` using the `predict` attribute of the fitted regression line.","786de8d9":"### Residual analysis \nTo validate assumptions of the model, and hence the reliability for inference","85b4928c":"As is visible from the pairplot and the heatmap, the variable `TV` seems to be most correlated with `Sales`. So let's go ahead and perform simple linear regression using `TV` as our feature variable.","4e3d3872":"#### Sales (Target Variable)","c37ec5fd":"##### Visualizing the fit on the test set","18cddcf8":"### Predictions on the Test Set","3fba6bac":"## Model Evaluation","43ebc1d0":"#### Looking for patterns in the residuals","bc4facba":"##### Looking at the RMSE","73f4c13f":"### Generic Steps in model building using `statsmodels`\n\nWe first assign the feature variable, `TV`, in this case, to the variable `X` and the response variable, `Sales`, to the variable `y`."}}