{"cell_type":{"333ac20e":"code","1b4a8041":"code","69ae8681":"code","75304ae5":"code","bbe9eac8":"code","3151f13d":"code","123dc30a":"code","e506c4e9":"code","f0fba666":"code","501ea979":"code","94cbfad1":"code","b4d5cbb9":"code","192d2a0c":"code","0304afca":"code","13048000":"code","7b808b2f":"code","e8da3258":"markdown","5ec75691":"markdown","57b2df84":"markdown","16d3f382":"markdown"},"source":{"333ac20e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1b4a8041":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ngender_submission = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\n","69ae8681":"train.head()","75304ae5":"train.info()","bbe9eac8":"train = train.drop(columns=[\"Age\", \"Cabin\", \"Embarked\", \"Name\", \"Ticket\"])","3151f13d":"train.info()","123dc30a":"train[\"Sex\"] = train[\"Sex\"].replace(to_replace = \"female\", value = \"0\")\ntrain[\"Sex\"] = train[\"Sex\"].replace(to_replace = \"male\", value = \"1\")\ntrain[\"Sex\"] = train.Sex.astype('int64', copy=False)\n\ntest[\"Sex\"] = test[\"Sex\"].replace(to_replace = \"female\", value = \"0\")\ntest[\"Sex\"] = test[\"Sex\"].replace(to_replace = \"male\", value = \"1\")\ntest[\"Sex\"] = test.Sex.astype('int64', copy=False)","e506c4e9":"train[\"Family\"] = train[\"SibSp\"] + train[\"Parch\"]\ntest[\"Family\"] = test[\"SibSp\"] + test[\"Parch\"]","f0fba666":"train.info()","501ea979":"train.head()","94cbfad1":"train.describe()","b4d5cbb9":"a = sns.heatmap(train.corr(), annot=True)","192d2a0c":"test.Fare = test.Fare.fillna(35.627)","0304afca":"# from xgboost import XGBClassifier\n# from sklearn.ensemble import GradientBoostingClassifier\n\n# # Targets:\n# Target = [\"Fare\", \"Pclass\", \"Sex\"]\n# # Target = [\"Fare\", \"Sex\"]\n# # Target = [\"Fare\", \"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\n\n# train_X = train[Target]\n# train_y = train[\"Survived\"]\n# test_X = test[Target]\n\n# # model = GradientBoostingClassifier(max_depth=3, n_estimators=500, learning_rate=0.05)\n# model = XGBClassifier(max_depth=2, n_estimators=500, learning_rate=0.5, verbosity=0, gamma=0.5, objective= 'binary:logistic', seed=27)\n# model.fit(train_X, train_y)\n\n# test_pred = model.predict(test_X)\n","13048000":"import xgboost as xgb\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nTarget = [\"Fare\", \"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Family\"]\n\ntrain_X = train[Target]\ntrain_y = train[\"Survived\"]\ntest_X = test[Target]\n\ntrain_dmatrix = xgb.DMatrix(data = train_X, label = train_y)\n\ngbm_param_grid = {'learning_rate': [0.01, 0.02, 0.04, 0.05, 0.06, 0.08, 0.1, 0.5, 0.9],\n                  'n_estimators': [200, 300, 400, 500, 600],\n                  'max_depth': [2, 3, 4, 5, 8]}\ngbm = xgb.XGBClassifier()\ngrid = GridSearchCV(estimator=gbm, param_grid = gbm_param_grid, scoring=\"accuracy\", cv=4, verbose = 1, n_jobs=-1)\n\n# rfc_param_grid = { \n#     'n_estimators': [200, 300, 400, 500, 600],\n#     'max_features': ['auto', 'sqrt', 'log2'],\n#     'max_depth' : [4,5,6,7,8],\n#     'criterion' :['gini', 'entropy']\n# }\n# rfc = RandomForestClassifier(random_state=42)\n# grid = GridSearchCV(estimator=rfc, param_grid=rfc_param_grid, scoring=\"accuracy\", cv= 5, verbose = 1, n_jobs=-1)\n\ngrid.fit(train_X, train_y)\ntest_pred = grid.predict(test_X)\n\nprint(grid.best_estimator_)\nprint(grid.best_params_)\nprint(grid.best_score_)","7b808b2f":"submission = pd.DataFrame({ 'PassengerId': test['PassengerId'],\n                            'Survived' : test_pred })\nsubmission.to_csv(\"submission.csv\", index=False)","e8da3258":"# Data visualization and data cleaning","5ec75691":"# Reading Files","57b2df84":"# Train and predict","16d3f382":"# Trying GridSeacrhCV"}}