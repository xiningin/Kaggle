{"cell_type":{"c6cb0344":"code","a34b2822":"code","c27b8e0f":"code","63f01f92":"code","ab52ffb1":"code","c9a0b7fa":"code","c7ae4ef2":"code","d5007e5f":"code","7bb24288":"code","8215c3b8":"code","ab09e5b7":"code","fe354c77":"code","1826cd92":"code","b27281bd":"code","6acbde6c":"code","533b746a":"code","a38dfc84":"code","03d77acd":"code","7236cd38":"code","475b901c":"markdown","1993c9a3":"markdown","794105ab":"markdown","64aade62":"markdown"},"source":{"c6cb0344":"# Import basic libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\nimport plotly.express as px\nfrom plotly.offline import plot\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler, LabelEncoder\nfrom sklearn.metrics import mean_squared_error\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, SimpleRNN, LSTM, GRU","a34b2822":"# Label Encoding\nlist_company = ['Audi', 'BMW', 'Honda', 'Lucid Motors', 'NIO', 'Nissan', 'Rolls Royces', 'Tata', 'Tesla', 'Volkswagen']\n\nle = LabelEncoder()\n\nlist_company_le = le.fit_transform(list_company)\nlist_company_le","c27b8e0f":"# Display label encoded list of comapnies\nfor i, company in enumerate(range(0, len(list_company_le), 1)):\n    print(i, \":\", le.inverse_transform([company]))","63f01f92":"# Choose wanted company\n# Unavailable for 'input' on Kaggle session\n# Therefore we have to define variable as number in custom.\n# Uncomment following logic if you wanna input number on local session.\n# num = int(input(\">>> Choose Number of Company : \"))\n\nnum = 8 #Tesla\ncompany = le.inverse_transform([num])[0]\ncompany","ab52ffb1":"# Define filepath\nfilepath = \"..\/input\/share-price-of-top-electric-car-company\/Top EV Company\/{0}\/{1}.csv\".format(company, company.lower())\nfilepath","c9a0b7fa":"data = pd.read_csv(filepath)\ndata","c7ae4ef2":"# Sorting DataFrame\ndata.sort_values(by='Date', ascending=False, inplace=True)\ndata.reset_index(drop=True, inplace=True)\ndata.drop('Volume', axis=1, inplace=True)\ndata","d5007e5f":"# Utility Function\ndef make_dataset(data, label, window_size=20):\n    feature_list = []\n    label_list = []\n    for i in range(len(data) - window_size):\n        feature_list.append(np.array(data.iloc[i:i+window_size]))\n        label_list.append(np.array(label.iloc[i+window_size]))\n    return np.array(feature_list), np.array(label_list)","7bb24288":"# Set feature and label\ntrain_feature = data[['Open', 'High', 'Low', 'Close']]\ntrain_label = data['Adj Close']","8215c3b8":"# train dataset\ntrain_feature, train_label = make_dataset(train_feature, train_label, 10)","ab09e5b7":"# Set X, y\nX = train_feature\ny = train_label","fe354c77":"# Split train and test dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=11)","1826cd92":"model = Sequential()\nmodel.add(GRU(16, activation='relu', input_shape=X_train.shape[1:]))\nmodel.add(Dense(1))","b27281bd":"model.summary()","6acbde6c":"model.compile(loss='mse', optimizer='adam', metrics=['mse'])","533b746a":"history = model.fit(X_train, y_train, batch_size=64, epochs=100, validation_data=(X_val, y_val))","a38dfc84":"# Plot epochs - loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.xlabel('epochs')\nplt.ylabel('loss')\nplt.legend(['train', 'val'])\nplt.show()","03d77acd":"# Evaluate model\ntrain_pred = model.predict(X_train)\ntrain_rmse = np.sqrt(mean_squared_error(y_train, train_pred))\n\ntest_pred = model.predict(X_test)\ntest_rmse = np.sqrt(mean_squared_error(y_test, test_pred))\n\nprint(f\"Train RMSE: {train_rmse.round(2)}\")\nprint(f\"Test RMSE: {test_rmse.round(2)}\")","7236cd38":"# Prediction Plot\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=np.arange(len(y_test)), y=y_test.ravel(),\n                    mode='lines',\n                    name='test'))\nfig.add_trace(go.Scatter(x=np.arange(len(y_test)), y=test_pred.ravel(),\n                    line=dict(dash='dash', width=3),\n                    name='pred'))\n\nfig.update_layout(\n    title=\"Adj Close Prediction of {}\".format(company),\n    height=500)\nfig.show()","475b901c":"# Outline\nGoal: Predict 'Adj Close' as target with features as follows: 'Open', 'High', 'Low', 'Close'  \n**How to use this notebook:** just input the number corresponded to comapnies that you want","1993c9a3":"# Create Datasets","794105ab":"# Import libraries and data","64aade62":"# Modeling"}}