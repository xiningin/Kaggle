{"cell_type":{"67808471":"code","96d9138c":"code","960371e8":"code","00bf3e63":"code","603efa8e":"code","35b28ba7":"code","f47c6ece":"code","88c694bd":"code","50cd93e7":"code","c8120c0f":"code","4d39daf0":"code","0ee8e044":"code","0ec7ea40":"code","4627cf4a":"code","3d919c15":"code","670298be":"code","a2e13f82":"code","9b37a129":"code","1c490571":"code","3729f7ea":"code","61121520":"code","839f7544":"code","a3b30ae0":"code","cc16eb43":"code","3f62a16c":"code","8dfaf67d":"code","aaea1485":"code","bd95f66e":"code","03c5a7aa":"code","9abf86c9":"code","e61719e8":"code","62942e48":"code","dfad08cf":"code","9e47b58c":"code","fcf78c48":"code","8bdc54cc":"code","185363ec":"markdown","79ccf35e":"markdown","c0f657be":"markdown","2f503538":"markdown","d8fee63e":"markdown","cd98ccf2":"markdown","8e6acc05":"markdown","bf6f8c39":"markdown","0902a28b":"markdown","e79ed3d1":"markdown","89243ff9":"markdown","a6ebe61a":"markdown","7764ced9":"markdown","f4ae1434":"markdown","1d387ecb":"markdown"},"source":{"67808471":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport cv2\nimport tensorflow as tf\n\nfrom glob import glob\nfrom keras.models import Sequential \nfrom keras.layers import Conv2D, MaxPooling2D, Activation, Dropout, Flatten, Dense\nfrom keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\n\nimport warnings\nwarnings.filterwarnings('ignore') # filter warnings","96d9138c":"train_dir = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train'\ntest_dir =  '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test'\nval_dir = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val'","960371e8":"def image_file_separation(folder):\n    y = []\n    x = []\n    image_list = []\n\n    for foldername in os.listdir(folder):\n        if not foldername.startswith('.'):\n            if foldername == \"NORMAL\":\n                label = 0\n            elif foldername == \"PNEUMONIA\":\n                label = 1\n            else:\n                label = 2\n                \n            for image_filename in os.listdir(folder + \"\/\"+ foldername):\n                img_file = cv2.imread(folder + \"\/\" + foldername + '\/' + image_filename,0)\n                if img_file is not None:\n                    img = cv2.resize(img_file,(64,64))\n                    img_arr = img_to_array(img) \/ 255\n                    x.append(img_arr)\n                    y.append(label)\n                    image_list.append(foldername + '\/' + image_filename)\n                    \n    X = np.asarray(x)\n    y = np.asarray(y)\n    \n    return X,y,image_list","00bf3e63":"X_train, y_train, img_train = image_file_separation(train_dir)\n\ntrain_df = pd.DataFrame(img_train, columns=[\"images\"])\ntrain_df[\"target\"] = y_train","603efa8e":"train_df.head()","35b28ba7":"train_df.info()","f47c6ece":"sns.countplot(train_df[\"target\"])\nplt.title(\"NORMAL\/PNOMON\u0130A\")\nplt.show()\nprint(train_df[\"target\"].value_counts())","88c694bd":"X_val, y_val, img_val = image_file_separation(val_dir)\n\nval_df = pd.DataFrame(img_val, columns=[\"images\"])\nval_df[\"target\"] = y_val","50cd93e7":"val_df.head()","c8120c0f":"sns.countplot(val_df[\"target\"])\nplt.title(\"NORMAL\/PNOMON\u0130A\")\nplt.show()\nprint(val_df[\"target\"].value_counts())","4d39daf0":"X_test, y_test, img_test = image_file_separation(test_dir)\n\ntest_df = pd.DataFrame(img_test, columns=[\"images\"])\ntest_df[\"target\"] = y_test","0ee8e044":"test_df.head()","0ec7ea40":"test_df.tail()","4627cf4a":"sns.countplot(test_df[\"target\"])\nplt.title(\"NORMAL\/PNOMON\u0130A\")\nplt.show()\nprint(test_df[\"target\"].value_counts())","3d919c15":"full_data = pd.concat([train_df, test_df, val_df], axis=0, ignore_index=True)","670298be":"print(full_data.head())\nprint(full_data.tail())","a2e13f82":"plt.figure(figsize=(12,8))\n\nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][3875])\nplt.imshow(img)\nplt.title(\"NORMAL\", color = \"green\", size = 14)\nplt.grid(color='#999999', linestyle='-')\nplt.show()","9b37a129":"plt.figure(figsize=(10,7))\n\nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][0])\nplt.imshow(img)\nplt.title(\"PNEUMONIA\", color = \"red\", size = 14)\nplt.grid(color='#999999', linestyle='-')\nplt.show()","1c490571":"sns.countplot(full_data[\"target\"])\nplt.title(\"NORMAL\/PNOMON\u0130A\")\nplt.show()\nprint(full_data[\"target\"].value_counts())","3729f7ea":"plt.figure(figsize=(15,8))\n\nplt.subplot(2,3,1) \nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][0])\nplt.imshow(img)\nplt.title(\"PNEUMONIA\", color = \"red\", size = 14)\nplt.axis(\"off\")\n\nplt.subplot(2,3,2) \nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][1])\nplt.imshow(img)\nplt.title(\"PNEUMONIA\", color = \"red\", size = 14)\nplt.axis(\"off\")\n\nplt.subplot(2,3,3) \nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][10])\nplt.imshow(img)\nplt.title(\"PNEUMONIA\", color = \"red\", size = 14)\nplt.axis(\"off\")\n\nplt.subplot(2,3,4) \nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][3875])\nplt.imshow(img)\nplt.title(\"NORMAL\", color = \"green\", size = 14)\nplt.axis(\"off\")\n\nplt.subplot(2,3,5) \nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][3876])\nplt.imshow(img)\nplt.title(\"NORMAL\", color = \"green\", size = 14)\nplt.axis(\"off\")\n\nplt.subplot(2,3,6) \nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][3877])\nplt.imshow(img)\nplt.title(\"NORMAL\", color = \"green\", size = 14)\nplt.axis(\"off\")\n\nplt.suptitle(\"NORMAL\/PNEUMONIA\")\nplt.show()","61121520":"print(X_train.shape)","839f7544":"className = glob(train_dir + '\/*' )\nnumberOfClass = len(className)\nprint(\"NumberOfClass: \",numberOfClass)","a3b30ae0":"batch_size = 32\n\ntrain_datagen = ImageDataGenerator(rescale= 1.\/255,\n                   shear_range = 0.3,\n                   horizontal_flip=True,\n                   zoom_range = 0.3)\n\ntest_datagen = ImageDataGenerator(rescale= 1.\/255)\n\nval_datagen = ImageDataGenerator(rescale= 1.\/255)","cc16eb43":"train_generator = train_datagen.flow_from_directory(\n        train_dir, \n        target_size=(64, 64),\n        batch_size = batch_size,\n        color_mode = \"grayscale\",\n        class_mode= \"binary\")","3f62a16c":"test_generator = test_datagen.flow_from_directory(\n        test_dir, \n        target_size=(64, 64),\n        batch_size = batch_size,\n        color_mode = \"grayscale\",\n        class_mode= \"binary\")","8dfaf67d":"val_generator = test_datagen.flow_from_directory(\n        val_dir, \n        target_size=(64, 64),\n        batch_size = batch_size,\n        color_mode = \"grayscale\",\n        class_mode= \"binary\")","aaea1485":"X_train.shape[1:]","bd95f66e":"model = Sequential()\nmodel.add(Conv2D(32,(3,3),input_shape = X_train.shape[1:]))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(32,(3,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(64,(3,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D())\n\nmodel.add(Flatten())\nmodel.add(Dense(1024))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(1)) # output\nmodel.add(Activation(\"sigmoid\"))\n\nmodel.compile(loss = \"binary_crossentropy\",\n              optimizer = \"rmsprop\",\n              metrics = [\"accuracy\"])\n\nearly_stopping = EarlyStopping(monitor='val_loss', mode='min', verbose=1,patience=2)","03c5a7aa":"activity = model.fit_generator(\n                    train_generator,\n                    steps_per_epoch=5216\/\/32,\n                    epochs=20,\n                    validation_data=test_generator,\n                    validation_steps=624\/\/32,\n                    callbacks=[early_stopping])","9abf86c9":"acc = activity.history['accuracy']\nval_acc = activity.history['val_accuracy']\n\nloss = activity.history['loss']\nval_loss = activity.history['val_loss']\n\nplt.figure(figsize=(16, 8))\n\nplt.subplot(1, 2, 1)\nplt.plot(acc, label='Training Accuracy')\nplt.plot(val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\nplt.grid()\n\nplt.subplot(1, 2, 2)\nplt.plot(loss, label='Training Loss')\nplt.plot(val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.grid()\n\nplt.show()","e61719e8":"print(\"Accuracy of the model is - \" , model.evaluate_generator(test_generator)[1]*100 , \"%\")\nprint(\"Loss of the model is - \" , model.evaluate_generator(test_generator)[0])","62942e48":"file_url = \"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/5\/51\/X-ray_of_lobar_pneumonia.jpg\"\nfile_path = tf.keras.utils.get_file('..\/..\/..\/..\/kaggle\/working\/downloaded_file_from.jpg', origin=file_url)\nprediction_test_dir = '\/kaggle\/working\/'","dfad08cf":"for dirname, _, filenames in os.walk(prediction_test_dir):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9e47b58c":"predict_datagen = ImageDataGenerator(rescale= 1.\/255)\n\npredict_generator = predict_datagen.flow_from_directory(\n        prediction_test_dir, \n        target_size=(64, 64),\n        batch_size = batch_size,\n        color_mode = \"grayscale\",\n        class_mode= None,\n        classes=[''])","fcf78c48":"filenames = predict_generator.filenames\nstep_size = len(filenames)\npredictions = model.predict_generator(test_generator, steps = step_size)\nscore = tf.nn.softmax(predictions[0])","8bdc54cc":"plt.figure(figsize=(12,8))\n\nimg = load_img(file_path)\nplt.imshow(img)\nplt.title(\"This is a image of {} ({:.2f}% confidence).\".format(className[np.argmax(score)].split('\/')[-1], 100 * np.max(score)), fontsize=14)\nplt.grid(color='#999999', linestyle='-')\nplt.show()","185363ec":"### Setting up","79ccf35e":"This will take time","c0f657be":"Let's see the result\n>Note: className contains full path so we need to split it","2f503538":"### Training\nThis will take time","d8fee63e":"##  Pneumonia Detection from X-Ray\nIn recent years the clinical-decision, based on medical imaging, faces lots of challenges. Pneumonia has now become a common illness affecting approximately 450 million people a year and occurring in all parts of the world (according to wikipedia https:\/\/en.wikipedia.org\/wiki\/Pneumonia#Epidemiology). In most of the cases death is unavoidable due to delay identification and proper diagnosis. Here, we establish a diagnostic tool based on a deep-learning framework for the screening of patients to detect the pneumonia quickly.","cd98ccf2":"### Explore\nLet's see how the data was stored","8e6acc05":"### Function to perform image separation\nWe need to separate all the files in diffrent classification, so we are creating a function for that.","bf6f8c39":"### Modeling\nCNN method usesed in our modeling","0902a28b":"### The Data\nAssigning directories for train, test and validation","e79ed3d1":"This will take time","89243ff9":"This will take time","a6ebe61a":"Let's view some of the sample after classification of image data","7764ced9":"Visualizing the activity to check how good our training was.","f4ae1434":"### Prediction\nLet's download a unknown iamge from internet and try to predict with our model.","1d387ecb":"### Creating dataset\ncreating a full set of data by concatinating others"}}