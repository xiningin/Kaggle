{"cell_type":{"a4be1213":"code","91c4ab4f":"code","ba03faa4":"code","bed6de1b":"code","290fa026":"code","1e844f0e":"code","51c40235":"code","50a327c1":"code","d3611f6b":"code","f7571ae6":"code","8e127c41":"code","fefb1485":"code","04f8333c":"code","3ccbbbce":"code","fa25d37e":"code","953fce77":"code","b57cbbac":"code","c899467a":"code","f0b25ab1":"code","068f0a75":"code","b9e4c5e7":"code","87a55702":"markdown"},"source":{"a4be1213":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","91c4ab4f":"data = pd.read_csv('..\/input\/youtube-new\/CAvideos.csv')\ndata.head()","ba03faa4":"data.info()","bed6de1b":"data.corr()","290fa026":"#correlation map\nf,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.2f',ax=ax)\nplt.show()","1e844f0e":"data.head(10)","51c40235":"data.columns","50a327c1":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.likes.plot(kind=\"line\",color=\"red\",label=\"likes\",linewidth=1,alpha=0.5,linestyle=\":\")\ndata.dislikes.plot(color=\"blue\",label=\"dislikes\",linewidth=1,alpha=0.5,linestyle=\"-\")\nplt.legend(loc=\"upper right\")\nplt.xlabel(\"x axis\")\nplt.ylabel(\"y axis\")\nplt.title(\"Line Plot\")\nplt.show()","d3611f6b":"# Scatter Plot \n# x = like, y = dislike\ndata.plot(kind='scatter', x='likes', y='dislikes',alpha = 0.5,color = 'red')\nplt.xlabel('Likes')              # label = name of label\nplt.ylabel('Dislikes')\nplt.title('Likes & Dislikes Scatter Plot')            # title = title of plot\nplt.show()","f7571ae6":"# Histogram\n# bins = number of bar in figure\ndata.likes.plot(kind = 'hist',bins = 50,figsize = (10,10))\nplt.show()","8e127c41":"# clf() = cleans it up again you can start a fresh\nplt.clf()","fefb1485":"#create dictionary and look its keys and values\ndictionary = {'spain' : 'madrid','usa' : 'vegas'}\nprint(dictionary.keys())\nprint(dictionary.values())","04f8333c":"# update existing entry\ndictionary['spain'] = 'barcelona'\nprint(dictionary)\n\n# Add new entry\ndictionary['Turkey'] = \"Ankara\"\nprint(dictionary)\n\n# remove entry with key 'spain'\ndel dictionary['spain']\nprint(dictionary)\n\n# check include or not\nprint('Turkey' in dictionary)\nprint('turkey' in dictionary)\n\n# remove all entries in dict\ndictionary.clear()\nprint(dictionary)","3ccbbbce":"#delete entire dictionary  \ndel dictionay\n#print(dictionary) # it gives error because dictionary is deleted","fa25d37e":"#data['likes'] = series\nseries = data['likes']\nprint(type(series))\n\n# data[['Defense']] = data frame\ndata_frame = data[['likes']]\nprint(type(data_frame))","953fce77":"# Comparison operator\nprint(32%5 == 0)\nprint(32\/5 > 5)\n\n# Boolean operators\nprint(True and False)\nprint(True or False)\nprint(True and False or True)  #process priority: or","b57cbbac":"# 1 - Filtering Pandas data frame\nx = data['likes'] > 50000\nprint(x)  # return boolean value\ndata[x]   # result table","c899467a":"# 2 - Filtering numpy with logical_and\ndata[np.logical_and(data['likes'] > 100000, data['dislikes'] < 1000)] ","f0b25ab1":"data[(data['likes'] > 100000) & (data['dislikes'] < 1000)]","068f0a75":"lis = [1,2,3,4,5]\nfor i in lis:\n    result = i*i\n    print(\"{} in square: {}\".format(i, result))","b9e4c5e7":"# Stay in loop if condition( i is not equal 5) is true\nlis = [1,2,3,4,5]\nindex = 0\nfor i in lis:\n    print('{}. index: {}'.format(index, i))\n    index = 1 + index\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index,value in data[['likes']][0:3].iterrows():\n    print(index,\" : \",value)","87a55702":"**Note:** Linestyle supported values are '-', '--', '-.', ':', 'None', ' ', '', 'solid', 'dashed', 'dashdot', 'dotted'\n"}}