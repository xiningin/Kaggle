{"cell_type":{"e2cf6d4f":"code","540eb1b6":"code","dc80f6a9":"code","323b3141":"code","0fd6eca6":"code","d60f7fd9":"code","61475f62":"code","7f0ac3d3":"code","c1ff2811":"code","781eee77":"code","8a44d8d9":"code","e4ce1e59":"code","49e8c7ef":"code","81e2ca18":"code","19e9b99d":"code","4cc6dc87":"code","f720cc3a":"code","b635348e":"code","8291f979":"code","a43b929f":"code","840f5440":"code","c0c9b3bd":"code","1449c11e":"markdown","9230be07":"markdown"},"source":{"e2cf6d4f":"import os\nimport random\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers, models,Sequential\nimport cv2, numpy as np\nimport os","540eb1b6":"train_data_csv = '..\/input\/petfinder-pawpularity-score\/train.csv'\ntest_data_csv  = '..\/input\/petfinder-pawpularity-score\/test.csv'\ntrain_folder = '..\/input\/petfinder-pawpularity-score\/train'\ntest_folder  = '..\/input\/petfinder-pawpularity-score\/test'","dc80f6a9":"y = 'Pawpularity'\nvalidation_size = 0.25\nautotune = tf.data.experimental.AUTOTUNE\nimg_size = 299\nbatch_size = 8\ndropout = 0.2\nlr = 1e-3\ndecay_steps = 100\ndecay_rate = 0.96\nepochs = 30","323b3141":"def id_to_path(img_id,dir):\n    return os.path.join(dir, f'{img_id}.jpg')","0fd6eca6":"def get_image(path):\n    image = tf.image.decode_jpeg(tf.io.read_file(path), channels=3)\n    image = tf.cast(tf.image.resize_with_pad(image, img_size, img_size), dtype=tf.float32)\n    return tf.keras.applications.inception_v3.preprocess_input(image)","d60f7fd9":"def process_dataset(path, label):\n    return get_image(path), label","61475f62":"def get_dataset(x, y=None):\n    if y is not None:\n        ds = tf.data.Dataset.from_tensor_slices((x, y))\n        return ds.map(process_dataset, num_parallel_calls=autotune) \\\n            .batch(batch_size).prefetch(buffer_size=autotune)\n    else:\n        ds = tf.data.Dataset.from_tensor_slices(x)\n        return ds.map(get_image, num_parallel_calls=autotune) \\\n            .batch(batch_size).prefetch(buffer_size=autotune)","7f0ac3d3":"data_train = pd.read_csv(train_data_csv)\ndata_train.head()","c1ff2811":"data_test = pd.read_csv(test_data_csv)\ndata_test.head()","781eee77":"data_train['path'] = data_train['Id'].apply(lambda x: id_to_path(x, train_folder))\ndata_test['path'] = data_test['Id'].apply(lambda x: id_to_path(x, test_folder))\n\ntrain_subset, valid_subset = train_test_split(\n    data_train[['path', y]],\n    test_size=validation_size, shuffle=True, random_state=5\n)","8a44d8d9":"data_train.head()","e4ce1e59":"data_train.path","49e8c7ef":"train_data = get_dataset(x=train_subset['path'], y=train_subset[y]\/100.).shuffle(1000)\nvalid_data = get_dataset(x=valid_subset['path'], y=valid_subset[y]\/100.).shuffle(1000)\ntest_data = get_dataset(x=data_test['path'])","81e2ca18":"model = tf.keras.models.load_model('..\/input\/keras-applications-models\/InceptionV3.h5')\n#model.trainable = False","19e9b99d":"len(model.layers)","4cc6dc87":"for layer in model.layers[300:]:\n    layer.trainable = True","f720cc3a":"model= tf.keras.models.Sequential(\n    [\n        tf.keras.layers.Input(shape=(img_size, img_size, 3)),\n        tf.keras.layers.experimental.preprocessing.RandomFlip(mode=\"horizontal_and_vertical\"),\n        model,\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(dropout, name='top_dropout'),\n        tf.keras.layers.Dense(32, activation='elu'),\n        tf.keras.layers.Dense(1)\n    ]\n)","b635348e":"lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n    initial_learning_rate=lr,\n    decay_steps=decay_steps, decay_rate=decay_rate,staircase=True)\n\nlr =tf.keras.callbacks.ReduceLROnPlateau(monitor=\"val_loss\", factor=0.5, patience=5, verbose=90)\nearly_stop = tf.keras.callbacks.EarlyStopping(\n    monitor='val_loss', patience=5, restore_best_weights=True)","8291f979":"from tensorflow.keras import backend as K\ndef rmse(y_true, y_pred):\n    return K.sqrt(K.mean(K.square(y_true*100 - y_pred*100)))\n\nmodel.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=lr_schedule),\n                    loss=rmse,\n                    metrics=[rmse])","a43b929f":"history=model.fit(train_data,validation_data=valid_data, epochs=epochs,verbose=1,callbacks=[early_stop,lr],use_multiprocessing=True, workers=-1)","840f5440":"data_test[y] = model.predict(test_data,use_multiprocessing=True, workers=os.cpu_count())*100","c0c9b3bd":"data_test[['Id', y]].to_csv('submission.csv', index=False)\ndata_test[['Id', y]].head()","1449c11e":"## Hyperparameter for our newtowk","9230be07":"## We are using pretrained weights of inceptionV3\n### [from->https:\/\/www.kaggle.com\/ekaterinadranitsyna\/keras-applications-models](https:\/\/www.kaggle.com\/ekaterinadranitsyna\/keras-applications-models)\nadding it to our dataset,"}}