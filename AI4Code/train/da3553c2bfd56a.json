{"cell_type":{"c10cd30a":"code","399f8ee6":"code","d71749e6":"code","a159a2f5":"code","f5878931":"code","db890802":"code","2fee3001":"code","cbc943c5":"code","d0a010b5":"code","a0bf3bb6":"code","8e5480c3":"code","067c62e0":"code","96ae8a5b":"markdown","a44dac27":"markdown","778d46b0":"markdown","140ca881":"markdown","ece928d0":"markdown","77053ece":"markdown","ec820c4e":"markdown","26d1e7b5":"markdown","490652e9":"markdown"},"source":{"c10cd30a":"# Helpful Python packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","399f8ee6":"# Select one file corresponding to the load case you want to analyze\n# Healthy gearbox\n# ---------------\n#dataset = pd.read_csv(\"..\/input\/gearbox-fault-diagnosis\/Healthy\/h30hz50.csv\")\n\n# Broken gearbox\n# --------------\ndataset = pd.read_csv(\"..\/input\/gearbox-fault-diagnosis\/BrokenTooth\/b30hz50.csv\")\ndataset.describe()","d71749e6":"# Select a subset of the vibration records\ntime_serie = dataset.iloc[1:1000,:]","a159a2f5":"# Import Python libraries for graphical representations\nimport matplotlib.pyplot as plt\nfrom pylab import rcParams","f5878931":"rcParams['figure.figsize'] = 18, 8\ntime_serie.plot()\nplt.show()","db890802":"time_serie.plot(style='.')\nplt.show()","2fee3001":"fig, axes = plt.subplots(nrows=2, ncols=2)\n\na1 = time_serie.iloc[:,0]\na2 = time_serie.iloc[:,1]\na3 = time_serie.iloc[:,2]\na4 = time_serie.iloc[:,3]\n\na1.plot(ax=axes[0,0])\na2.plot(ax=axes[0,1])\na3.plot(ax=axes[1,0])\na4.plot(ax=axes[1,1])","cbc943c5":"time_serie.hist(bins=100)\nplt.show()","d0a010b5":"time_serie.plot(kind='kde')\nplt.xlim(-20, 20)\nplt.show()","a0bf3bb6":"# dataset is the variable that host the full record for all 4 signals\n## It takes a while to depict them...\ndataset.plot(kind='kde')\nplt.xlim(-20, 20)\nplt.show()","8e5480c3":"from pandas.plotting import lag_plot\n\nlag_plot(time_serie.iloc[:,0])\nplt.show()","067c62e0":"from pandas.plotting import autocorrelation_plot\n\nautocorrelation_plot(time_serie.iloc[:,0])\nplt.show()","96ae8a5b":"## Graphics of temporal evolution: all in one graph\nThe next plots show the time series of the 4 accelerometers placed in the gearbox","a44dac27":"And as a function of the lag value: y(t+lag) vs. y(t) values","778d46b0":"## Autocorrelation for a1 vibration signal\ny(t+1) vs. y(t) values","140ca881":"# Exploratory Data Analysis\n## Time series of vibration data\nLet's follow the tutorial https:\/\/machinelearningmastery.com\/time-series-data-visualization-with-python\/","ece928d0":"## Plots of probability density functions of vibration signals\nKDE Plot described as *Kernel Density Estimate* is used for visualizing the Probability Density of a continuous variable\n### Based on 1000 points","77053ece":"### Based on the full dataset (100.000 points per signal)","ec820c4e":"## Histogram of the four vibration signals\nEach plot shows the histogram for each of the 4 accelerations a1, a2, a3, a4","26d1e7b5":"#### Plotting only points","490652e9":"## Graphics of temporal evolution: separated graphs\nThe next plots show the time series of the 4 accelerometers a1, a2, a3, a4 from top-left to bottom-right"}}