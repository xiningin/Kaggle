{"cell_type":{"ea4b6b7b":"code","1df6c8f0":"code","980085a8":"code","e486a60b":"code","be22ea12":"code","fed63bc4":"code","4df640d8":"code","874679ba":"code","c5eebba1":"code","bf7fea39":"code","45a82f46":"code","525fcd37":"code","c6891bc6":"code","a7cd6b53":"code","eb51a278":"code","96a7881c":"code","7a85277e":"code","1cd29257":"code","abcea217":"code","7189f53f":"code","a767be90":"code","3d25b104":"code","1be75bbc":"markdown","4f70b99f":"markdown","5389e38d":"markdown","52669f4e":"markdown","08360442":"markdown","52a05c66":"markdown","97e9fc11":"markdown","c6f6c842":"markdown","0d127e62":"markdown","d3057085":"markdown","4adebe13":"markdown","c369deff":"markdown","396d8bbf":"markdown"},"source":{"ea4b6b7b":"import os\n\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB","1df6c8f0":"os.listdir('..\/input')","980085a8":"data_file = os.path.join('..','input', 'FIFA 2018 Statistics.csv')","e486a60b":"dataframe = pd.read_csv(data_file)","be22ea12":"dataframe.describe()","fed63bc4":"dataframe.head()","4df640d8":"dataframe.columns","874679ba":"dataframe.corr()","c5eebba1":"def normalize(column):\n    mean = column.mean()\n    std = column.std()\n    return column.apply(lambda x: (x - mean) \/ std)","bf7fea39":"numeric_cols = ['Goal Scored', 'Ball Possession %', 'Attempts', 'On-Target', 'Off-Target', 'Blocked', 'Corners', 'Offsides',\n       'Free Kicks', 'Saves', 'Pass Accuracy %', 'Passes',\n       'Distance Covered (Kms)', 'Fouls Committed', 'Yellow Card',\n       'Yellow & Red', 'Red', '1st Goal',\n       'Goals in PSO', 'Own goals', 'Own goal Time']","45a82f46":"for num_column in numeric_cols:\n    dataframe[num_column] = pd.to_numeric(dataframe[num_column], errors='coerce')\ndataframe.fillna(0, inplace=True)\ndataframe.describe()","525fcd37":"for num_column in numeric_cols:\n    dataframe[num_column] = normalize(dataframe[num_column])\ndataframe.describe()","c6891bc6":"categorical_cols = ['Man of the Match']","a7cd6b53":"for categorical_column in categorical_cols:\n    dataframe[categorical_column] = dataframe[categorical_column].apply(lambda x: 1 if x == 'Yes' else 0)","eb51a278":"X_train, X_test, y_train, y_test = train_test_split(dataframe[numeric_cols], dataframe['Man of the Match'],\n                                                    test_size=0.33, random_state=42)","96a7881c":"model = GaussianNB()","7a85277e":"model.fit(X_train, y_train)","1cd29257":"model.score(X_test, y_test)","abcea217":"new_model = GaussianNB()","7189f53f":"X_train, X_test, y_train, y_test = train_test_split(dataframe[['Goal Scored', '1st Goal', 'On-Target', 'Attempts', 'Corners']], dataframe['Man of the Match'],\n                                                    test_size=0.33, random_state=42)","a767be90":"model.fit(X_train, y_train)","3d25b104":"model.score(X_test, y_test)","1be75bbc":"And indeed the score is higher with less, and more related, columns","4f70b99f":"Replace the missing values in numeric columns with NaN then fill that with zeros","5389e38d":"# Dependencies\n\nFirst import few dependencies\n1. `os` to access the file system\n2. `pandas` to prepare date\n3. `sklearn.model_selection` to split the data into training and testing\n4. `sklearn.naive_bayes` our bayesian classifier ","52669f4e":"Normalize each column to have a mean of ~zero and standard deviation of 1","08360442":"Define a Gaussian NB model and train it","52a05c66":"To enhance the score, let's go back and see which columns in the correlation matrix are more promising","97e9fc11":"Get file location and store it","c6f6c842":"Show the correlation matrix of the data to see which columns are more related to our goal","0d127e62":"This is just a 10 min try on this problem. I haven't used sklearn for a while so I'm sure that there are many better ways to process the data but I thought that I would start with this basic algorithm.","d3057085":"Read the csv file into a pandas dataframe","4adebe13":"Split the data with most columns","c369deff":"Define a function to normalize the numeric data points","396d8bbf":"Change the categorical result into a 1 or 0 result"}}