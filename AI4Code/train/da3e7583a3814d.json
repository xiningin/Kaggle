{"cell_type":{"b7fcff29":"code","ab149301":"code","070b28da":"code","5f4fce01":"code","761b0e21":"code","7b9c6efa":"code","18d1abc3":"code","95f23130":"markdown","eb249355":"markdown","1b91be6b":"markdown","5b2dd855":"markdown","e32d108d":"markdown","848fb789":"markdown","dcffafd3":"markdown","389facde":"markdown"},"source":{"b7fcff29":"import tensorflow as tf\nimport pandas as pd","ab149301":"def define_model(width, height):\n    model_input = tf.keras.layers.Input(shape=(width, height, 3), name='image_input')\n    model_main = tf.keras.applications.inception_resnet_v2.InceptionResNetV2(include_top=False, weights='imagenet')(model_input)\n    model_dense1 = tf.keras.layers.Flatten()(model_main)\n    model_dense2 = tf.keras.layers.Dense(128, activation='relu')(model_dense1)\n    model_out = tf.keras.layers.Dense(12, activation=\"softmax\")(model_dense2)\n\n    model = tf.keras.models.Model(model_input,  model_out)\n    optimizer = tf.keras.optimizers.Adam(lr=0.00004, beta_1=0.9, beta_2=0.999)\n    model.compile(loss=\"categorical_crossentropy\", optimizer=optimizer, metrics=[\"accuracy\"])\n    return model","070b28da":"def define_generators():\n    train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(\n        rotation_range=360,\n        width_shift_range=0.3,\n        height_shift_range=0.3,\n        shear_range=0.3,\n        zoom_range=0.5,\n        vertical_flip=True,\n        horizontal_flip=True,\n        validation_split=0.0, # change to use validation instead of training on entire training set\n    )\n\n    train_generator = train_datagen.flow_from_directory(\n        directory='\/kaggle\/input\/plant-seedlings-classification\/train',\n        target_size=(width, height),\n        batch_size=batch_size,\n        color_mode='rgb',\n        class_mode=\"categorical\",\n        subset='training',\n    )\n\n    validation_generator = train_datagen.flow_from_directory(\n        directory='\/kaggle\/input\/plant-seedlings-classification\/train',\n        target_size=(width, height),\n        batch_size=batch_size,\n        color_mode='rgb',\n        class_mode=\"categorical\",\n        subset='validation',\n    )\n\n    test_datagen = tf.keras.preprocessing.image.ImageDataGenerator()\n\n    test_generator = test_datagen.flow_from_directory(\n        directory='\/kaggle\/input\/plant-seedlings-classification\/',\n        classes=['test'],\n        target_size=(width, height),\n        batch_size=1,\n        color_mode='rgb',\n        shuffle=False,\n        class_mode='categorical')\n\n    return train_generator, validation_generator, test_generator","5f4fce01":"def define_callbacks():\n    save_callback = tf.keras.callbacks.ModelCheckpoint(\n        filepath='model.h5',\n        monitor='val_acc',\n        save_best_only=True,\n        verbose=1\n    )\n\n    return save_callback","761b0e21":"nb_epoch     = 40\nbatch_size   = 16\nwidth        = 299\nheight       = 299\nspecies_list = [\"Black-grass\", \"Charlock\", \"Cleavers\", \"Common Chickweed\", \"Common wheat\", \"Fat Hen\",\n                \"Loose Silky-bent\", \"Maize\", \"Scentless Mayweed\", \"Shepherds Purse\", \"Small-flowered Cranesbill\",\n                \"Sugar beet\"]","7b9c6efa":"model = define_model(width, height)\nmodel.summary()\ntrain_generator, validation_generator, test_generator = define_generators()\nsave_callback = define_callbacks()\n\nmodel.fit(\n    train_generator,\n    epochs=nb_epoch,\n    steps_per_epoch=train_generator.samples \/\/ batch_size,\n    validation_data= validation_generator,\n    validation_steps=validation_generator.samples \/\/ batch_size,\n#    callbacks=[save_callback] UNCOMMENT THIS LINE TO SAVE BEST VAL_ACC MODEL\n)","18d1abc3":"predictions = model.predict(test_generator, steps=test_generator.samples)\n\nclass_list = []\n\nfor i in range(0, predictions.shape[0]):\n  y_class = predictions[i, :].argmax(axis=-1)\n  class_list += [species_list[y_class]]\n\nsubmission = pd.DataFrame()\nsubmission['file'] = test_generator.filenames\nsubmission['file'] = submission['file'].str.replace(r'test\/', '')\nsubmission['species'] = class_list\n\nsubmission.to_csv('submission.csv', index=False)\n\nprint('Submission file generated. All done.')","95f23130":"**Cool, now we (hopefully) have a model that can predict the species!**\n\nCall it to get the predictions, and create a pandas dataframe with the species names of the highest probabilities. finally save the dataframe as the submission file.","eb249355":"**Next, the code for the data generators that take care of traversing through the directories with images and augmenting the images as needed for training.**","1b91be6b":"**Secondly define the neural network. We use the build-in module for Inception-ResNet V2 in tf.keras.**\n\nWe don't import the output layer, however as we don't have 1000 different categories. Instead we add a few layers for our 12 catagories.","5b2dd855":"# Simple notebook for accurate predictions using the build-in Inception-ResNet V2 module in TensorFlow (tf.keras).\n\nI got an embarrasing score back when this competition was running so I decided to revisit with this notebook. :-)\n\nWith validation turned off (validation_split set to 0.0 in train_datagen) this scores 97% as \"late submission\".","e32d108d":"**First import TensorFlow and Pandas**","848fb789":"**Now, define the model and fit it with the training data.**","dcffafd3":"**Define the checkpoint save callback on validation accuracy.**\n\nIt is not currently used, but you can if you want to work on the model with the highest accuracy instead of the last training epoch.","389facde":"**Define some constants.**\n\nThese are number of epochs to train, images per batch, image width and height in pixels and the names of each class\/species for the submission file"}}