{"cell_type":{"c913a7f9":"code","d335bf06":"code","205cd894":"code","48454bc7":"code","fd3a15cb":"code","157969c4":"code","f05a950b":"code","95f55e4f":"code","7069e84e":"code","a4a3f19a":"code","478a9b5e":"code","706e7464":"code","4671cced":"code","3f1d16ca":"code","05064436":"code","7290f02f":"code","23b01ce2":"code","40eaaa0a":"code","fb42de6e":"code","b4de2880":"code","52ee1ef5":"code","0ffa9dce":"code","c6ece346":"code","0803523c":"code","e00f59ee":"code","77d4b488":"code","107ca305":"code","04f1166f":"code","6dc95fc7":"code","7cc39dcc":"code","019f90c5":"code","889b91a5":"code","8994290d":"code","26b111af":"code","7d5660db":"code","b86483af":"code","51d02d9d":"code","4465d1d2":"code","f47ba3a3":"code","9b21b375":"code","a4bda268":"code","1ce799e8":"code","e8cc6d2d":"code","40744e0f":"code","83ac0c69":"code","6329728c":"code","0daa51d5":"code","55b2480e":"code","7bbbb51e":"code","45aa214c":"markdown","7ec484b7":"markdown","93275419":"markdown","b1ecb9e8":"markdown","40c38ef8":"markdown","5bf5c1ec":"markdown","19fc5a58":"markdown","ea29fbff":"markdown","3a2f51f5":"markdown","f053ac61":"markdown","4dcb7368":"markdown","f63ad954":"markdown","0f5c6178":"markdown","f7f083f0":"markdown","c054cced":"markdown","302b9867":"markdown","32a00f1a":"markdown","7069d332":"markdown","4b070955":"markdown","05eb53b5":"markdown","4cfdb892":"markdown","a446438c":"markdown","4239a1dd":"markdown","be12e6fd":"markdown"},"source":{"c913a7f9":"import pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom itertools import product\n\nfrom sklearn.preprocessing import LabelEncoder\n\nimport lightgbm as lgbm\nfrom lightgbm import plot_importance\nfrom sklearn.metrics import mean_squared_error\n\nimport joblib\n\nfrom math import sqrt\n\nfrom time import time","d335bf06":"train_sales = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ntrain_sales['date'] = pd.to_datetime(train_sales['date'], dayfirst = True)\n\ntest  = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv').set_index('ID')\n\ndf_items = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/items.csv')\ndf_shops = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/shops.csv')\ndf_categories = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')","205cd894":"print(train_sales.shape)\ntrain_sales.describe()","48454bc7":"max_cnt = train_sales[\"item_cnt_day\"].quantile(0.999)\nmax_price = train_sales[\"item_price\"].quantile(0.999)\n\nprint(max_cnt)\ntrain_sales = train_sales[train_sales[\"item_cnt_day\"]<=max_cnt]\n\nprint(max_price)\ntrain_sales = train_sales[(train_sales[\"item_price\"]>0)&(train_sales[\"item_price\"]<=max_price)]\n\nprint(train_sales.shape)","fd3a15cb":"train_sales.shape","157969c4":"regs = []\n\nfor date_block in range(34):\n    train_block = train_sales[train_sales['date_block_num']==date_block]\n    \n    unique_shops = train_block['shop_id'].unique()\n    unique_items = train_block['item_id'].unique()\n    \n    regs.append(np.array(list(product([date_block], \n                                      unique_shops, \n                                      unique_items))))\n    \ntrain_monthly = pd.DataFrame(np.vstack(regs), columns = ['date_block_num', 'shop_id', 'item_id'])\n\ntrain_monthly.head()","f05a950b":"train_monthly.shape","95f55e4f":"group_sales = train_sales.groupby(['date_block_num', 'shop_id', 'item_id'], \n                                  as_index=False)[['item_cnt_day']].sum()\n\ngroup_sales = group_sales.rename(columns={\"item_cnt_day\":\"item_cnt_month\"})\n\ntrain_monthly = train_monthly.merge(group_sales, \n                                    on=['date_block_num', 'shop_id', 'item_id'], \n                                    how='left')\n\ntrain_monthly['item_cnt_month'] = train_monthly['item_cnt_month'].fillna(0).clip(0, 20)","7069e84e":"test['date_block_num'] = 34\ntrain_test_monthly = pd.concat([train_monthly, test]).reset_index(drop = True)","a4a3f19a":"prices = train_sales.groupby(by = ['item_id'],\n                             as_index=False).agg({'item_price':['mean']})\n\nprices.columns = ['item_id', 'item_price_mean']\nprices.fillna(0, inplace = True)\n\ntrain_test_monthly = train_test_monthly.merge(prices, \n                                              on=['item_id'], \n                                              how='left')","478a9b5e":"df_shops","706e7464":"train_test_monthly.loc[train_test_monthly['shop_id']==0, 'shop_id'] = 57\ntrain_test_monthly.loc[train_test_monthly['shop_id']==1, 'shop_id'] = 58\ntrain_test_monthly.loc[train_test_monthly['shop_id']==39, 'shop_id'] = 40","4671cced":"df_shops.loc[df_shops.shop_name == '\u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"', 'shop_name'] = '\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"'\ndf_shops['city'] = df_shops['shop_name'].str.split(' ').map(lambda x: x[0])\ndf_shops.loc[df_shops['city'] == '!\u042f\u043a\u0443\u0442\u0441\u043a', 'city'] = '\u042f\u043a\u0443\u0442\u0441\u043a'","3f1d16ca":"train_test_monthly = train_test_monthly.merge(df_shops[['shop_id', 'city']], \n                                              how = 'left', \n                                              on = 'shop_id')","05064436":"train_test_monthly['city'] = LabelEncoder().fit_transform(train_test_monthly['city'])","7290f02f":"df_categories['type'] = df_categories['item_category_name'].str.\\\n                        split('-').map(lambda x: x[0].strip())\n\ndf_categories['sub_type'] = df_categories['item_category_name'].str.\\\n                            split('-').map(lambda x: x[1].strip() if len(x) > 1 \n                                                                  else x[0].strip())\n\ndf_categories.head()","23b01ce2":"df_items = df_items.merge(df_categories[['item_category_id', 'type', 'sub_type']], \n                          on = 'item_category_id',\n                          how = 'left')","40eaaa0a":"train_test_monthly = train_test_monthly.merge(df_items[['item_id', 'item_category_id', 'type', 'sub_type']], \n                                              on = 'item_id',\n                                              how = 'left')","fb42de6e":"train_test_monthly['type'] = LabelEncoder().fit_transform(train_test_monthly['type'])\ntrain_test_monthly['sub_type'] = LabelEncoder().fit_transform(train_test_monthly['sub_type'])","b4de2880":"train_test_monthly['month'] = (train_test_monthly['date_block_num'] % 12) + 1","52ee1ef5":"train_test_monthly['shop_item_id'] = train_test_monthly['shop_id'].astype(str) + '_' +\\\n                                     train_test_monthly['item_id'].astype(str)\n\ntrain_test_monthly['shop_cat_id'] = train_test_monthly['shop_id'].astype(str) + '_' +\\\n                                    train_test_monthly['item_category_id'].astype(str)\n\ntrain_test_monthly['shop_type_id'] = train_test_monthly['shop_id'].astype(str) + '_' +\\\n                                     train_test_monthly['type'].astype(str)\n\ntrain_test_monthly['item_city_id'] = train_test_monthly['item_id'].astype(str) + '_' +\\\n                                     train_test_monthly['city'].astype(str)\n\ntrain_test_monthly['item_city_month'] = train_test_monthly['item_city_id'].astype(str) + '_' +\\\n                                     train_test_monthly['month'].astype(str)\n\ntrain_test_monthly['shop_item_month'] = train_test_monthly['shop_item_id'].astype(str) + '_' +\\\n                                        train_test_monthly['month'].astype(str)\n\ntrain_test_monthly['shop_cat_month'] = train_test_monthly['shop_cat_id'].astype(str) + '_' +\\\n                                       train_test_monthly['month'].astype(str)\n\ntrain_test_monthly['shop_type_month'] = train_test_monthly['shop_type_id'].astype(str) + '_' +\\\n                                        train_test_monthly['month'].astype(str)","0ffa9dce":"train_test_monthly['item_id'].min()","c6ece346":"train_test_monthly.drop(columns=['month'], inplace=True)","0803523c":"train_test_monthly['shop_item_id'] = LabelEncoder().fit_transform(train_test_monthly['shop_item_id'])\ntrain_test_monthly['shop_cat_id'] = LabelEncoder().fit_transform(train_test_monthly['shop_cat_id'])\ntrain_test_monthly['shop_type_id'] = LabelEncoder().fit_transform(train_test_monthly['shop_type_id'])\ntrain_test_monthly['item_city_id'] = LabelEncoder().fit_transform(train_test_monthly['item_city_id'])\ntrain_test_monthly['item_city_month'] = LabelEncoder().fit_transform(train_test_monthly['item_city_month'])\ntrain_test_monthly['shop_item_month'] = LabelEncoder().fit_transform(train_test_monthly['shop_item_month'])\ntrain_test_monthly['shop_cat_month'] = LabelEncoder().fit_transform(train_test_monthly['shop_cat_month'])\ntrain_test_monthly['shop_type_month'] = LabelEncoder().fit_transform(train_test_monthly['shop_type_month'])","e00f59ee":"train_test_monthly.isna().sum()","77d4b488":"group_mean_type = train_test_monthly.groupby('type')['item_price_mean'].mean()\ntrain_test_monthly.loc[train_test_monthly['item_price_mean'].isna(), 'item_price_mean'] =\\\n            train_test_monthly.loc[train_test_monthly['item_price_mean'].isna(), 'type'].map(group_mean_type)","107ca305":"train_test_monthly.head().T","04f1166f":"print('%i cities'%(train_test_monthly[train_test_monthly['date_block_num']<34]['city'].nunique()))\nprint('%i types'%(train_test_monthly[train_test_monthly['date_block_num']<34]['type'].nunique()))\nprint('%i sub_types'%(train_test_monthly[train_test_monthly['date_block_num']<34]['sub_type'].nunique()))","6dc95fc7":"print('%i cities'%(train_test_monthly[train_test_monthly['date_block_num']==34]['city'].nunique()))\nprint('%i types'%(train_test_monthly[train_test_monthly['date_block_num']==34]['type'].nunique()))\nprint('%i sub_types'%(train_test_monthly[train_test_monthly['date_block_num']==34]['sub_type'].nunique()))","7cc39dcc":"plt.figure(figsize=(20,5))\n\ngroup_city = train_test_monthly.groupby(by=['date_block_num', 'city']).sum()[['item_cnt_month']]\ngroup_city.reset_index(inplace = True)\n\nsns.barplot(x = 'city', y = 'item_cnt_month', data = group_city)","019f90c5":"plt.figure(figsize=(20,5))\n\ngroup_type = train_test_monthly.groupby(by=['date_block_num', 'type']).sum()[['item_cnt_month']]\ngroup_type.reset_index(inplace = True)\n\nsns.barplot(x = 'type', y = 'item_cnt_month', data = group_type)","889b91a5":"plt.figure(figsize=(20,5))\n\ngroup_sub_type = train_test_monthly.groupby(by=['date_block_num', 'sub_type']).sum()[['item_cnt_month']]\ngroup_sub_type.reset_index(inplace = True)\n\nsns.barplot(x = 'sub_type', y = 'item_cnt_month', data = group_sub_type)","8994290d":"def col_months_lag(col, dataset, date_block_mean=True, use_similar=False):\n    lag_months = [1, 2, 3, 12]\n    \n    df = dataset.copy()\n    \n    if date_block_mean:\n        group_mean = df.groupby(['date_block_num', \n                                 col], \n                                as_index=False)['item_cnt_month'].mean().fillna(0)\n        group_mean.rename(columns={'item_cnt_month':col+'_date_block_mean'}, \n                          inplace = True)\n\n        for lag in lag_months:\n            group_mean_lag = group_mean.copy()\n\n            group_mean_lag['date_block_num'] += lag\n            group_mean_lag.rename(columns={col+'_date_block_mean':col+'_date_block_mean_lag_'+str(lag)}, \n                                  inplace = True)\n\n            df = df.merge(group_mean_lag, \n                          on=['date_block_num', col], \n                          how='left')\n            \n            df[col+'_date_block_mean_lag_'+str(lag)].fillna(0, inplace = True)\n            \n\n        df[col+'_3_months_mean'] = df[[col+'_date_block_mean_lag_1', \n                                       col+'_date_block_mean_lag_2', \n                                       col+'_date_block_mean_lag_3']].mean(axis = 1)\n        \n        df[col+'_3_months_std'] = df[[col+'_date_block_mean_lag_1', \n                                       col+'_date_block_mean_lag_2', \n                                       col+'_date_block_mean_lag_3']].std(axis = 1)\n        \n\n        df[col+'_diff_1_2_months'] = df[col+'_date_block_mean_lag_1'] - df[col+'_date_block_mean_lag_2']\n        \n        df.drop(columns=[col+'_date_block_mean_lag_3'], \n                inplace=True)\n        \n    else:\n        for lag in lag_months:\n            df[col+'_month_lag_'+str(lag)] =\\\n                       df.groupby([col])['item_cnt_month'].shift(lag)\n            \n            df[col+'_month_lag_'+str(lag)].fillna(0, inplace = True)\n\n        df[col+'_3_months_mean'] = df[[col+'_month_lag_1', \n                                       col+'_month_lag_2', \n                                       col+'_month_lag_3']].mean(axis = 1)\n        \n        df[col+'_3_months_std'] = df[[col+'_month_lag_1', \n                                       col+'_month_lag_2', \n                                       col+'_month_lag_3']].std(axis = 1)\n\n\n        df[col+'_diff_1_2_months'] = df[col+'_month_lag_1'] - df[col+'_month_lag_2']\n        \n        df.drop(columns=[col+'_month_lag_3'], \n                inplace=True)\n    \n    return df","26b111af":"train_test_monthly = col_months_lag('shop_item_id', train_test_monthly, False)\ntrain_test_monthly = col_months_lag('shop_type_id', train_test_monthly)\ntrain_test_monthly = col_months_lag('item_id', train_test_monthly)","7d5660db":"similar_group_mean = train_test_monthly.groupby(by=['date_block_num', \n                                                    'shop_id',\n                                                    'item_id'], \n                                                as_index=False)['item_cnt_month'].last().fillna(0)\n\nsimilar_group_mean.rename(columns={'item_cnt_month':'shop_similar_item_id_month_lag_1'}, \n                          inplace = True)\n\nsimilar_group_mean['item_id'] += 1\nsimilar_group_mean['date_block_num'] += 1\n\ntrain_test_monthly = train_test_monthly.merge(similar_group_mean, \n                                              on=['date_block_num', 'shop_id', 'item_id'], \n                                              how='left')","b86483af":"def RMSE(y_true, y_pred):\n    return sqrt(mean_squared_error(y_true, y_pred))","51d02d9d":"def split_date_block_num(df, date_block_num):\n    split_1 = df[df['date_block_num'] < date_block_num].copy()\n    split_2 = df[df['date_block_num'] == date_block_num].copy().reset_index(drop=True)\n    \n    return split_1, split_2","4465d1d2":"train_sales, test = split_date_block_num(train_test_monthly, 34)","f47ba3a3":"train_sales = train_sales[train_sales['date_block_num']>2]","9b21b375":"select_feats = ['shop_id',\n                'item_id',\n                'shop_item_id',\n                'shop_cat_id',\n                'shop_type_id',\n                'item_city_month',\n                'shop_item_month',\n                'shop_item_id_month_lag_1',\n                'shop_item_id_month_lag_2',\n                'shop_item_id_month_lag_12',\n                'shop_item_id_3_months_mean',\n                'shop_item_id_3_months_std',\n                'shop_item_id_diff_1_2_months',\n                'shop_type_id_date_block_mean_lag_1',\n                'shop_type_id_date_block_mean_lag_2',\n                'shop_type_id_date_block_mean_lag_12',\n                'shop_type_id_3_months_mean',\n                'shop_type_id_3_months_std',\n                'shop_type_id_diff_1_2_months',\n                'item_id_date_block_mean_lag_1',\n                'item_id_date_block_mean_lag_2',\n                'item_id_date_block_mean_lag_12',\n                'item_id_3_months_mean',\n                'item_id_3_months_std',\n                'item_id_diff_1_2_months',\n                'shop_similar_item_id_month_lag_1'\n               ]","a4bda268":"params = {\n        'num_iterations':140,\n        'max_depth':15,\n        'objective': 'rmse',\n        'metric': 'rmse',\n        'num_leaves': (2 ** 11) - 1,\n        'learning_rate': 0.025,\n        'feature_fraction': 0.4,\n        'bagging_fraction': 0.2,\n        'bagging_freq': 5,\n        'seed': 1,\n        'verbose': 1\n    }\n\ncat_cols = ['shop_id', 'item_id', 'shop_item_id', 'shop_cat_id', \n            'shop_type_id', 'item_city_month', 'shop_item_month']","1ce799e8":"errors = []\n\nfor block_num in range(24, 34):\n    \n    train, validation = split_date_block_num(train_sales, block_num)\n\n    x_train = train[select_feats].values\n    y_train = train['item_cnt_month'].values\n\n    x_val = validation[select_feats].values\n    y_val = validation['item_cnt_month'].values\n    \n    del train\n    del validation\n    \n    print('TRAINING %i MONTHS:'%(block_num))\n\n    start = time()\n    \n    lgbmr_train = lgbm.Dataset(x_train, y_train)\n    lgbmr_val = lgbm.Dataset(x_val, y_val, reference=lgbmr_train)\n\n    lgbmr_trained = lgbm.train(params, \n                               lgbmr_train, \n                               feature_name=select_feats,\n                               categorical_feature=cat_cols)\n    end = time()\n    \n    del lgbmr_train\n    del lgbmr_val\n\n    y_train_pred = lgbmr_trained.predict(x_train).clip(0, 20)\n\n    train_rmse = RMSE(y_train, y_train_pred)\n    print('Train RMSE = %.5f'%(train_rmse))\n\n    y_val_pred = lgbmr_trained.predict(x_val).clip(0, 20)\n\n    val_rmse = RMSE(y_val, y_val_pred)\n    print('Validation RMSE = %.5f'%(val_rmse))\n    errors.append(val_rmse)\n\n    print('Training time = %.2f s'%(end - start))\n\n    print()\n    \n    del x_train\n    del y_train\n    del x_val\n    del y_val\n    del lgbmr_trained\n    del y_train_pred\n    del y_val_pred","e8cc6d2d":"print('RMSE = %.5f +\/- %.5f'%(np.array(errors).mean(), np.array(errors).std()))","40744e0f":"x_train = train_sales[select_feats].values\ny_train = train_sales['item_cnt_month'].values\n\nx_test = test[select_feats].values","83ac0c69":"start = time()\nlgbmr_train = lgbm.Dataset(x_train, y_train)\nlgbmr_trained = lgbm.train(params, \n                           lgbmr_train, \n                           feature_name=select_feats,\n                           categorical_feature=cat_cols)\nend = time()\n\nprint('Training time = %.2f s'%(end - start))","6329728c":"plot_importance(lgbmr_trained)","0daa51d5":"test['ID'] = test.index\ntest['item_cnt_month'] = lgbmr_trained.predict(x_test).clip(0, 20)","55b2480e":"test[['ID', 'item_cnt_month']].to_csv(\"lgbm_submission.csv\", index = False) ","7bbbb51e":"joblib.dump(lgbmr_trained, 'lgbm_model.joblib') ","45aa214c":"* Formating categories dataset","7ec484b7":"### Mean monthly sales per sub_type","93275419":"### Get month","b1ecb9e8":"### Validation split\n* To simulate the test split, our validation will be all months of 2015 in the train set, and the train data will be all the months before the month of validation\n#### Example:\n   **Validation:** date_block_num=24;\n   **Train:** date_block_num<24\n   \n   **Validation:** date_block_num=25;\n   **Train:** date_block_num<25\n   \n   **Validation:** date_block_num=26;\n   **Train:** date_block_num<26\n   \n   **.**\n   **.**\n   **.**","40c38ef8":"### Get items categories and types","5bf5c1ec":"* Best feats found for lgbm","19fc5a58":"* Merge with the train\/test dataset","ea29fbff":"* Add monthly sales","3a2f51f5":"* Encode pairs","f053ac61":"* Encode","4dcb7368":"### Get prices feats","f63ad954":"#### Fill NaNs\n* There are some information in the test set that are not in the train set, so we now have some NaN values in the test part of our dataset","0f5c6178":"* Merge with the train\/test dataset","f7f083f0":"### Get monthly sales train and test sets\n* Get date_block_num, shops and items combination","c054cced":"* Concat train and test","302b9867":"* Merge with the items datasets","32a00f1a":"* Encode","7069d332":"### Adding similar items lag feature\n* Assuming that item_id is similar to item_id-1, we will add the sales from the previous month from these similar items","4b070955":"### Mean monthly sales per type","05eb53b5":"### Mean monthly sales per city","4cfdb892":"### Lag features","a446438c":"### Pair some feats","4239a1dd":"### Get the shop feats\n* Formating shop dataset","be12e6fd":"* 0 == 57\n* 1 == 58\n* 39 == 40"}}