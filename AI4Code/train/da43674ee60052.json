{"cell_type":{"be592328":"code","13680cf4":"code","8dc370fd":"code","7d9f777e":"code","e5cd9d2f":"code","639aba70":"code","c2f1ce04":"code","5b250c52":"code","ef416b56":"code","f9eb73b1":"code","98e7f175":"code","34504877":"code","e1588693":"code","c4dab78e":"code","954871d2":"code","02d728c2":"code","bca247d3":"code","136c540d":"markdown"},"source":{"be592328":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nfrom sklearn import metrics\nfrom sklearn.model_selection import KFold\nimport lightgbm\nimport matplotlib.pyplot as plt\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","13680cf4":"train = pd.read_csv('\/kaggle\/input\/commonlitreadabilityprize\/train.csv').set_index('id')\ntest = pd.read_csv('\/kaggle\/input\/commonlitreadabilityprize\/test.csv').set_index('id')","8dc370fd":"data = pd.concat([train, test]).loc[:, ['excerpt', 'target']].rename(columns={'excerpt': 'txt'})","7d9f777e":"sent_len_df = data.txt.str.split('.').apply(lambda x: [len(s.split(' ')) for s in x[:-1]])","e5cd9d2f":"features = pd.concat([data.txt.apply(len).to_frame('symbols_in_text'),\n                      data.txt.str.split('.').apply(len).subtract(1).to_frame('cnt_of_centences'),\n                      sent_len_df.apply(max).to_frame('max_words_in_sentence'),\n                      sent_len_df.apply(min).to_frame('min_words_in_sentence'),\n                      sent_len_df.apply(np.size).to_frame('cnt_words_in_sentence'),\n                      sent_len_df.apply(np.mean).to_frame('avg_words_in_sentence'),\n                      data.txt.str.split(' ').apply(len).to_frame('cnt_words')], axis=1)","639aba70":"data","c2f1ce04":"feature_names = data.drop(columns=['target']).columns.tolist()","5b250c52":"X = data.loc[lambda dx: dx.index.isin(train.index), feature_names]\ny = data.loc[lambda dx: dx.index.isin(train.index), 'target']\nX_tst = data.loc[lambda dx: dx.index.isin(test.index), feature_names]","ef416b56":"thresholds = np.quantile(y, [0.2, 0.4, 0.6, 0.8])","f9eb73b1":"import catboost\nparams = dict(loss_function='Logloss', n_estimators=99999999, learning_rate=0.1)\ncv_obj = KFold(n_splits=6, random_state=42, shuffle=True)\n\nfor threshold in thresholds:\n    oof = np.zeros(X.index.size)\n    test_oof = np.zeros(X_tst.index.size)\n    for fold_id, (trn_idx, val_idx) in enumerate(cv_obj.split(X,y)):\n        x_trn, x_val = X.iloc[trn_idx], X.iloc[val_idx]\n        y_trn, y_val = y.iloc[trn_idx], y.iloc[val_idx]\n        trn_pool = catboost.Pool(x_trn, label=(y_trn > threshold).astype(int), text_features=['txt'])\n        val_pool = catboost.Pool(x_val, label=(y_val > threshold).astype(int), text_features=['txt'])\n        model = catboost.train(pool=trn_pool, params=params, eval_set=[trn_pool, val_pool], early_stopping_rounds=100, verbose_eval=100)\n        oof[val_idx] = model.predict(x_val)\n        test_oof += model.predict(X_tst) \/ cv_obj.n_splits\n\n    feature = pd.concat([pd.DataFrame(oof, index=X.index, columns=[f'thr_{threshold}']),\n                         pd.DataFrame(test_oof, index=X_tst.index, columns=[f'thr_{threshold}'])])\n    data = data.join(feature)","98e7f175":"data = data.join(features).drop(columns=['txt'])","34504877":"data","e1588693":"feature_names = data.drop(columns=['target']).columns.tolist()\nX = data.loc[lambda dx: dx.index.isin(train.index), feature_names]\ny = data.loc[lambda dx: dx.index.isin(train.index), 'target']\nX_tst = data.loc[lambda dx: dx.index.isin(test.index), feature_names]","c4dab78e":"oof = np.zeros(X.index.size)\npredictions = np.zeros(X_tst.index.size)\nfor fold_id, (trn_idx, val_idx) in enumerate(cv_obj.split(X,y)):\n    x_trn, x_val = X.iloc[trn_idx], X.iloc[val_idx]\n    y_trn, y_val = y.iloc[trn_idx], y.iloc[val_idx]\n    model = lightgbm.LGBMRegressor(n_estimators=9999999, learning_rate=1e-3)\n    model.fit(x_trn, y_trn, eval_set=[(x_trn, y_trn), (x_val, y_val)], early_stopping_rounds=300, verbose=500)\n    oof[val_idx] = model.predict(x_val)\n    predictions += model.predict(X_tst) \/ 5\n    lightgbm.plot_importance(model)\n    plt.show()","954871d2":"metrics.mean_squared_error(y, oof)","02d728c2":"submission = pd.Series(predictions, index=X_tst.index).to_frame('target').reset_index()","bca247d3":"submission.to_csv('submission.csv', index=False)","136c540d":"Catboost allow to use textual features, alongside numerical, categorical etc.<br>\nBut it only possible in classification tasks.<br>\nI create different thresholds on a target and run a catboost model with a single textual feature against binary targets<br>"}}