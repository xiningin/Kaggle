{"cell_type":{"1576aa40":"code","d8cd63ee":"code","e75d255e":"code","25d8a72a":"code","89a3a59f":"code","3cb3ed82":"code","ec4836b9":"code","5ead9e0d":"code","9d990f27":"code","be607e82":"code","2f0ed19a":"code","d25ac031":"code","94b1bb34":"code","869a651b":"code","fa4c852f":"code","e9445dc9":"code","573e99ba":"code","1248a52b":"code","5490e541":"code","79ae93e4":"code","04591f23":"code","4cbffc6f":"code","976336d5":"code","2c09b26f":"code","cf66145a":"code","8092ae59":"code","471afd3e":"code","db49f8ec":"code","54bbaf84":"code","44f467a0":"code","b8b2f07e":"code","b21d625c":"code","ab740b06":"code","7e117803":"code","36d0252f":"code","f08446a5":"markdown","10d2c387":"markdown","c99c09e9":"markdown","d3c14ba1":"markdown","59dfbcf2":"markdown","2d63c0c9":"markdown","f47459a9":"markdown","d56e92ba":"markdown","4a7356c6":"markdown","a556bace":"markdown","8f0e4103":"markdown","be6c307d":"markdown","93b86fdd":"markdown"},"source":{"1576aa40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d8cd63ee":"import matplotlib.pyplot as plt\nimport seaborn as sb","e75d255e":"train_df = pd.read_csv(\"\/kaggle\/input\/neolen-house-price-prediction\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/neolen-house-price-prediction\/test.csv\")\nprint(train_df.shape)\nprint(test_df.shape)\n","25d8a72a":"train_df.info()","89a3a59f":"train_df.hist(bins = 50, figsize= (20,15))","3cb3ed82":"train_df.isnull().sum().sort_values(ascending = False).head(20)","ec4836b9":"# Separate Numerical columns from Categorical columns \n\nobject_df = train_df.select_dtypes(include = \"object\")\nnumeric_df = train_df.select_dtypes(exclude = \"object\")\nobject_df.shape , numeric_df.shape","5ead9e0d":"train_df = train_df.drop([\"PoolQC\", \"MiscFeature\", \"Alley\", \"Fence\"], axis = 1)\n","9d990f27":"numeric_df.isnull().sum().sort_values(ascending = False).head(10)","be607e82":"train_df['MasVnrArea']= train_df['MasVnrArea'].fillna(train_df.MasVnrArea.mean())\ntrain_df['GarageYrBlt']= train_df['GarageYrBlt'].fillna(train_df.GarageYrBlt.mean())\ntrain_df['LotFrontage']= train_df['LotFrontage'].fillna(train_df.LotFrontage.mean())","2f0ed19a":"object_df.isnull().sum().sort_values(ascending = False).head(17)","d25ac031":"str_cols =  ['BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2','MasVnrType',\"BsmtQual\",]\ntrain_df[str_cols] = train_df[str_cols].fillna('None')","94b1bb34":"for feature in numeric_df:\n    data=train_df.copy()\n    if 0 in data[feature].unique():\n        pass\n    else:\n        data[feature]=np.log(data[feature])\n        data.boxplot(column=feature)\n        plt.ylabel(feature)\n        plt.title(feature)\n        plt.show()","869a651b":"train_df['GarageType']= train_df['GarageType'].fillna('Attchd')    \ntrain_df['GarageCond']= train_df['GarageCond'].fillna('TA') \ntrain_df['GarageFinish']= train_df['GarageFinish'].fillna('Unf') \ntrain_df['GarageQual']= train_df['GarageQual'].fillna('TA')\n\n\ntrain_df['FireplaceQu']= train_df['FireplaceQu'].fillna('None')       \n\n","fa4c852f":"train_df.isnull().sum().sort_values(ascending = False).head(10)","e9445dc9":"for i in train_df.select_dtypes(include = \"object\"): \n    train_df[i] = pd.get_dummies(train_df[i], prefix=[i], columns=[i])\n","573e99ba":"train_df","1248a52b":"num_features=['LotFrontage', 'LotArea', '1stFlrSF', 'GrLivArea']\n\nfor feature in num_features:\n    train_df[feature]=np.log(train_df[feature])","5490e541":"train_df","79ae93e4":"y = train_df.SalePrice              \nx = train_df.drop(['Id','SalePrice'], axis=1)","04591f23":"x.corrwith(y).sort_values(ascending=False).tail(20)","4cbffc6f":"from sklearn.model_selection import train_test_split\nx_train, x_valid, y_train, y_valid = train_test_split(x , y , train_size=0.8 , test_size=0.2,random_state=0)\ny_valid.shape","976336d5":"from sklearn.linear_model import LinearRegression\n\n# Create a model\nmodel = LinearRegression()\n# Fit the model\nmodel.fit(x_train , y_train)\n# Get the R-squared\nr_sq = model.score(x_train , y_train)\nprint('coefficient of determination:', r_sq)\n\n\ny_pred = model.predict(x_valid)\n","2c09b26f":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nrms = sqrt(mean_squared_error(y_valid, y_pred))\nprint(\"RMS :\",rms)\n","cf66145a":"#Create the Ridge model\nfrom sklearn.metrics import r2_score\nfrom sklearn.linear_model import Ridge\nrid_reg = Ridge(alpha = 8.01)\nrid_reg.fit(x_train , y_train)\n\ny_pred_ridge = rid_reg.predict(x_valid)\nprint('R2 SCORE With ridge : ',r2_score(y_valid, y_pred_ridge))\n","8092ae59":"test_df.isnull().sum().sort_values(ascending = False).head(20)","471afd3e":"test_df['MasVnrArea']= test_df['MasVnrArea'].fillna(test_df.MasVnrArea.mean())\ntest_df['GarageYrBlt']= test_df['GarageYrBlt'].fillna(test_df.GarageYrBlt.mean())\ntest_df['LotFrontage']= test_df['LotFrontage'].fillna(test_df.LotFrontage.mean())\n\ntest_df = test_df.drop([\"PoolQC\", \"MiscFeature\", \"Alley\", \"Fence\"], axis = 1)\ntest_df =test_df.drop(['Id'], axis = 1)\ntest_df['GarageType']= test_df['GarageType'].fillna('Attchd')    \ntest_df['GarageCond']= test_df['GarageCond'].fillna('TA') \ntest_df['GarageFinish']= test_df['GarageFinish'].fillna('Unf') \ntest_df['GarageQual']= test_df['GarageQual'].fillna('TA')\ntest_df['Electrical']= test_df['Electrical'].fillna(1)\n\ntest_df['FireplaceQu']= test_df['FireplaceQu'].fillna('None')       \n\nstr_cols =  ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2','MasVnrType',]\ntest_df[str_cols] = test_df[str_cols].fillna('None')\n\n    \n","db49f8ec":"test_df.isnull().sum().sort_values(ascending = False).head(20)","54bbaf84":"obj_col=test_df.select_dtypes(include = \"object\")\nfor i in obj_col:\n    test_df[i] = pd.get_dummies(test_df[i], prefix=[i], columns=[i])","44f467a0":"num_features=['LotFrontage', 'LotArea', '1stFlrSF', 'GrLivArea']\n\nfor feature in num_features:\n    test_df[feature]=np.log(test_df[feature])","b8b2f07e":"test_df.info()","b21d625c":"y_new_pred1 = model.predict(test_df)\n","ab740b06":"\nsubmission = pd.read_csv(\"..\/input\/neolen-house-price-prediction\/test.csv\")\nsubmission_df = pd.DataFrame()\nsubmission_df[\"Id\"] = submission.Id\n\nsubmission_df[\"SalePrice\"] = y_new_pred1","7e117803":"submission_df","36d0252f":"\nsubmission_df.to_csv(\"submission.csv\", index = False, header = True)","f08446a5":"#  There is no missing values now!","10d2c387":"# Data Splitting","c99c09e9":"# Display the information of train data","d3c14ba1":"Encodding ","59dfbcf2":"# Model Training","2d63c0c9":"# Replace null values in numerical columns with suitable values","f47459a9":"# Checking for Outliers","d56e92ba":"# Feature Scaling","4a7356c6":"# Replace null values in Categorical columns with suitable values","a556bace":"# Encoding categorical datatype to numerical datatype","8f0e4103":"# Preprocessing for test file","be6c307d":"# Drop dummy column","93b86fdd":"# Reading Files"}}