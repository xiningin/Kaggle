{"cell_type":{"b86a3fe1":"code","a38f0eba":"code","b198fc5f":"code","796d8af8":"code","b5a2d57a":"code","1753b98c":"code","46780027":"code","2bb98adc":"code","47b2461d":"code","76cfeaea":"code","45cc5528":"code","896a8517":"code","c06e2e9a":"code","680b3280":"code","6ca9c776":"code","88bbcbb7":"code","502e6635":"code","cd0e69ad":"code","fb0fcf99":"code","8901a819":"code","2b5aaf46":"code","5fbfd669":"code","6a138ce1":"code","3986448d":"code","c4689a16":"code","f82702a7":"code","4b0c0b9d":"code","4e90782d":"code","0425085d":"code","3c4fba2d":"code","3c0d6aed":"code","575f37a3":"code","262aa9d2":"code","107cd23a":"code","0da99be2":"code","0e6032c5":"code","8ef562fe":"code","5bcce254":"code","31899aa4":"code","b6d6f6e5":"code","2544044d":"code","b6014d48":"code","650370d6":"code","ca7c0ecc":"code","f68bab48":"code","3521a8e1":"code","d7db1409":"code","f08a68a6":"code","447cf182":"code","f670c4e2":"code","86365c37":"code","b5f27b1b":"code","49890585":"code","79a4ebda":"code","d8561dd0":"code","7f097deb":"code","80fc9061":"code","800bef88":"code","806b7e95":"code","c5a129b2":"code","8dd8a6b4":"code","7a5917f7":"code","f324c651":"code","987fded8":"code","3250fea0":"code","06e676b2":"code","a8419afa":"code","0f31b58d":"code","63388cef":"code","f59e0ce0":"code","5f1372ec":"code","e2248818":"code","02a39a8e":"code","5021101f":"code","7c0919e3":"code","2c15f415":"code","b15ccb4a":"code","7c927b52":"code","d37f56ce":"code","2cf8b21b":"code","1b4c8b36":"code","8f0bd9ec":"code","a6086208":"code","4b8004ed":"code","10746287":"code","38aac594":"code","f2bdad32":"code","802a3559":"code","2e08b184":"code","533a34d2":"code","3c2244a9":"code","ebb16122":"code","0aa383eb":"code","fcf02b38":"code","860ffadd":"code","eb973892":"code","cafdd726":"code","0d7c6da5":"code","de363d02":"code","a5d2236e":"code","fb1fa1cd":"code","b77e446c":"code","b66cc4ad":"code","f8989e87":"code","8602ed7e":"code","a971416c":"code","2d9e2d6f":"code","4606a473":"code","858e94e9":"code","0d666f23":"code","97529cd1":"code","9f683d3d":"code","65a307cd":"code","1c30e913":"code","9ee6f0eb":"code","079238ad":"code","989a1b73":"code","c6a6aed8":"code","364d10a9":"code","161b7b63":"code","97bdac8b":"code","b4ff4046":"code","69305c60":"code","09d211ee":"code","ded0c3b9":"code","e88d8b6a":"code","e2b55b67":"code","de32ee35":"code","7a677a39":"code","21404f27":"code","b0470f85":"code","6e5d0bd8":"code","5b67093d":"code","65214a1b":"code","25df4122":"code","c0887a73":"code","b8584700":"code","d533836e":"code","bbda9988":"code","0b18b4e3":"code","e1e2e590":"code","4dc2212b":"code","4663ec96":"code","9f9f8d53":"code","9d31d28f":"code","e4149f60":"code","d9fcc94c":"code","6c92f54d":"code","728af85d":"code","cfe54517":"code","a7907eb7":"code","0ad2cee9":"code","2d0b5118":"code","dcec9836":"code","b4121101":"code","ad060975":"code","74ec871f":"code","06e709ea":"code","d301c7a3":"code","250933d8":"code","7e1cdb0e":"code","c3fe99a5":"code","a0b9e14e":"code","be9ccb1d":"code","7d817a1a":"code","0b18357a":"code","43939a5b":"code","06c041ac":"code","fdae3ae5":"code","bd49015a":"code","3d94b0ed":"code","9b1d79d9":"code","1677a9ea":"code","2d9a0649":"code","1c7c1b77":"code","996f106c":"code","79bff739":"code","88c801d2":"code","309e5d6e":"code","9396be33":"code","9b931772":"code","f85177c1":"markdown","e536a555":"markdown","b90e0205":"markdown","a83c3831":"markdown","058bf5b1":"markdown","f9d2d8d9":"markdown","21ff0535":"markdown","f652d7d6":"markdown","1614ba70":"markdown","62aa8820":"markdown","e71c51b1":"markdown","d7f8e5bf":"markdown","a7b32d9c":"markdown","fec32f11":"markdown","167353ef":"markdown","e993868a":"markdown","a6fa057a":"markdown","71460490":"markdown","10f7e3ac":"markdown","9791f9d5":"markdown","fe335ff9":"markdown","9ec32f21":"markdown","d85be11d":"markdown","0c140812":"markdown","a4f5e413":"markdown","f22b4bd2":"markdown","312ad812":"markdown","2ff983af":"markdown","f36e5baa":"markdown","7dcd2191":"markdown","1ae7c56e":"markdown","fccb0b15":"markdown","9c6f0ec9":"markdown","7f5642e7":"markdown","a9d2cb56":"markdown","eeb8cd8c":"markdown","abc0688b":"markdown","cca3149c":"markdown","805637ad":"markdown","b4d9a27d":"markdown","422eb68d":"markdown","a128d910":"markdown","1bf53aa8":"markdown","382fd540":"markdown","a3c0d7d5":"markdown","e9387899":"markdown","f7957b09":"markdown","aa0d375a":"markdown","98e60d2b":"markdown","5497cf3d":"markdown","7bef5622":"markdown","35fa6634":"markdown","ca3d5d21":"markdown","8316f141":"markdown","4cb5b385":"markdown","c246d709":"markdown","95e6ffcc":"markdown","ab964bc2":"markdown","255268b4":"markdown","7e72cef3":"markdown","737206e9":"markdown","2e143cac":"markdown","7378d320":"markdown","fdbc43ef":"markdown","afeb0fbb":"markdown","8b58bdfe":"markdown","af3e5f57":"markdown","f2e1196f":"markdown","069744cb":"markdown"},"source":{"b86a3fe1":"!pip install seaborn==0.11.0","a38f0eba":"import pandas as pd \nimport numpy as np\nfrom catboost import CatBoostRegressor, FeaturesData, Pool\nfrom sklearn.metrics import mean_absolute_error\nimport seaborn as sns","b198fc5f":"sns.__version__","796d8af8":"df = pd.read_csv(\"..\/input\/seattle-airbnb\/price_train.csv\")","b5a2d57a":"df.info()","1753b98c":"import matplotlib.pyplot as plt\nplt.figure(figsize = (15,10))\nsns.heatmap(df.corr(), annot = True)","46780027":"df.head()","2bb98adc":"test = pd.read_csv(\"..\/input\/seattle-airbnb\/price_test.csv\")","47b2461d":"test","76cfeaea":"df['price'] = df['price'].str.replace(\"$\", \"\"); df['price'] = df['price'].str.replace(\",\", \"\"); df['price'] = df['price'].astype(float)","45cc5528":"df","896a8517":"from sklearn.preprocessing import LabelBinarizer\nencoder = LabelBinarizer()","c06e2e9a":"host_response_time = encoder.fit_transform(df['host_response_time'])\n\nhost_response_time ","680b3280":"X = df.drop(['X1', 'id', 'price'], axis =1)","6ca9c776":"X.columns","88bbcbb7":"print(\"Number of Features -> \", len(X.columns))","502e6635":"X.isna().sum()","cd0e69ad":"y = df[['price']]","fb0fcf99":"y","8901a819":"y.isna().sum()","2b5aaf46":"X['host_is_superhost'] =X['host_is_superhost'].apply(lambda x : 0 if x == False else 1)  ","5fbfd669":"X['host_is_superhost']","6a138ce1":"sns.countplot(X['host_is_superhost'])","3986448d":"X['host_response_rate'] = X['host_response_rate'].str.replace(\"%\", \"\")\nX['host_response_rate'] = X['host_response_rate'].astype(float) \/ 100.0","c4689a16":"X","f82702a7":"X[\"host_identity_verified\"] = X[\"host_identity_verified\"].apply(lambda x: 0 if x == False else 1)","4b0c0b9d":"encoder = LabelBinarizer()\nneighbor_grp_cleansed = encoder.fit_transform(X['neighbourhood_group_cleansed'])\nneighbor_grp_cleansed","4e90782d":"X['neighbourhood_group_cleansed'].value_counts()","0425085d":"len(X.columns)","3c4fba2d":"X['cleaning_fee'] = X['cleaning_fee'].str.replace(\"$\", \"\")","3c0d6aed":"X['cleaning_fee'] = X['cleaning_fee'].str.replace(\",\", \"\")\n","575f37a3":"X['cleaning_fee'] = X['cleaning_fee'].astype(float)","262aa9d2":"X.columns","107cd23a":"X['host_is_superhost']","0da99be2":"X['host_response_rate']","0e6032c5":"X['host_response_rate'].value_counts()","8ef562fe":"X['host_response_rate'].corr(df['price'])","5bcce254":"sns.displot(X['host_response_rate'])","31899aa4":"sns.regplot(X['host_response_rate'], df['price'])","b6d6f6e5":"X[X['host_response_rate'] == 0]","2544044d":"# to be settled\n\nX['host_response_time']","b6014d48":"sns.barplot(X['host_response_time'], df['price'])","650370d6":"sns.barplot(X['host_response_time'], df['price'], hue = X['host_is_superhost'], palette = ['r','k'])\nplt.show()","ca7c0ecc":"# to be settled, feature scaling\n\nX['host_listings_count']","f68bab48":"X['host_listings_count'].corr(df['price'])","3521a8e1":"sns.scatterplot(X['host_listings_count'], df['price'])","d7db1409":"sns.regplot(X['host_listings_count'], df['price'])","f08a68a6":"X['host_identity_verified']","447cf182":"X['host_identity_verified'].corr(df['price'])","f670c4e2":"sns.violinplot(X['host_identity_verified'], df['price'])","86365c37":"sns.boxplot(X['host_identity_verified'], df['price'])","b5f27b1b":"sns.boxplot(X['host_identity_verified'], X['host_listings_count'])","49890585":"# to be settled\n\nX['accommodates']","79a4ebda":"X['accommodates'].value_counts()","d8561dd0":"sns.kdeplot(X['accommodates'], df['price'], shade = True)","7f097deb":"# to be settled\n\nX['neighbourhood_group_cleansed']","80fc9061":"plt.figure(figsize = (25,10))\nsns.boxplot(X['neighbourhood_group_cleansed'], df['price'])","800bef88":"X['property_type']","806b7e95":"plt.figure(figsize = (25,10))\nsns.countplot(X['property_type'])","c5a129b2":"plt.figure(figsize = (25,10))\nsns.boxplot(X['property_type'], df['price'])","8dd8a6b4":"# to be settled\n\nX['room_type']","7a5917f7":"## Let's explore the room type distribution\n\nsns.countplot(X['room_type'], hue = df['host_is_superhost'])\nplt.show()","f324c651":"# to be settled\n\nX['latitude']","987fded8":"# to be settled\n\nX['longitude']","3250fea0":"X.drop(['latitude', 'longitude'], axis = 1, inplace = True)","06e676b2":"test.drop(['latitude', 'longitude'], axis = 1, inplace = True)","a8419afa":"# to be feature scaled\n\nX['guests_included']","0f31b58d":"sns.regplot(X['guests_included'], df['price'])","63388cef":"# to be feature scaled\n\nX['bathrooms']","f59e0ce0":"sns.regplot(X['bathrooms'], df['price'])","5f1372ec":"# to be feature scaled\n\nX['bedrooms']","e2248818":"sns.regplot(X['bedrooms'], df['price'])","02a39a8e":"# to be settled, feature scaled\n\nX['beds']","5021101f":"sns.displot(X['beds'], bins = 3)","7c0919e3":"X['beds'].value_counts()","2c15f415":"plt.figure(figsize = (15,10))\nsns.boxplot(X['beds'], df['price'])\nplt.show()","b15ccb4a":"# to be settled\n\nX['bed_type']","7c927b52":"X['bed_type'].value_counts()","d37f56ce":"sns.boxplot(X['bed_type'] , df['price'])","2cf8b21b":"X['amenities']\n","1b4c8b36":"X['amenities'] = X['amenities'].str.replace(\"[{}]\", \"\")\nX['amenities']","8f0bd9ec":"X['amenities'] = X['amenities'].str.replace('[\"\"]', \"\")\nX['amenities']","a6086208":"amenities = np.unique(np.concatenate(X['amenities'].map(lambda x : x.split(\",\"))))\namenities","4b8004ed":"X.iloc[0]['amenities']","10746287":"amenities = amenities[1:][:-2]\namenities","38aac594":"amenities = [x.strip() for x in amenities]","f2bdad32":"amenities","802a3559":"for amenity in amenities : \n    X[\"has_\" + amenity] = X['amenities'].apply(lambda x : int(amenity in x))","2e08b184":"X","533a34d2":"X.drop(['amenities'], axis = 1, inplace = True)","3c2244a9":"for amenity in amenities : \n    test[\"has_\" + amenity] = test['amenities'].apply(lambda x : int(amenity in x))","ebb16122":"test","0aa383eb":"test.drop(['amenities'], axis = 1, inplace = True)","fcf02b38":"# feature scaling\n\nX['cleaning_fee']","860ffadd":"sns.distplot(X['cleaning_fee'])","eb973892":"sns.lineplot(X['cleaning_fee'], df['price'])","cafdd726":"# feature scaling \n\nX['minimum_nights']","0d7c6da5":"X['minimum_nights'].value_counts()","de363d02":"sns.scatterplot(X['minimum_nights'], df['price'])","a5d2236e":"sns.regplot(X['minimum_nights'], df['price'])","fb1fa1cd":"X['maximum_nights']","b77e446c":"sns.scatterplot(X['maximum_nights'], df['price'])","b66cc4ad":"sns.regplot(X['maximum_nights'], df['price'])","f8989e87":"X['instant_bookable'] = X['instant_bookable'].apply(lambda x : 0 if x == False else 1)\nX['instant_bookable']","8602ed7e":"X['instant_bookable'].corr(df['price'])","a971416c":"sns.countplot(X['instant_bookable'])","2d9e2d6f":"sns.boxplot(X['instant_bookable'], y = df['price'])","4606a473":"X['cancellation_policy']","858e94e9":"X['cancellation_policy'].value_counts()","0d666f23":"plt.figure(figsize = (15,10))\nsns.violinplot(X['cancellation_policy'], df['price'])","97529cd1":"plt.figure(figsize = (15,10))\nsns.violinplot(X['cancellation_policy'], df['price'], hue = X['host_is_superhost'], split = True, palette = ['r', 'k'])","9f683d3d":"plt.figure(figsize = (15,10))\nsns.boxplot(X['cancellation_policy'], df['price'])","65a307cd":"test['host_is_superhost'] = test['host_is_superhost'].apply(lambda x : 1 if x == True else 0)","1c30e913":"categorical_features = np.where(X.dtypes == object)[0]\ncategorical_features","9ee6f0eb":"test['host_response_rate'] = test['host_response_rate'].apply(lambda x : float(x[:-1]) \/ 100)","079238ad":"test['cleaning_fee'] = test['cleaning_fee'].str.replace(\"$\", \"\")\ntest['cleaning_fee'] =test['cleaning_fee'].astype(float)","989a1b73":"test = test.drop(['X1'], axis = 1)\ntest","c6a6aed8":"test = test.drop(['id'], axis = 1)","364d10a9":"categorical_features = np.where(test.dtypes == object)[0]\ncategorical_features","161b7b63":"model = CatBoostRegressor(iterations=2000, learning_rate=0.05, depth=5)","97bdac8b":"model.fit(X,y, cat_features = categorical_features,plot = False)\n","b4ff4046":"X.columns","69305c60":"test.columns","09d211ee":"len(X.columns) == len(test.columns)","ded0c3b9":"preds = model.predict(test)\n\n#, cat_features = categorical_features)","e88d8b6a":"preds","e2b55b67":"test.columns","de32ee35":"columns_ = list(test.columns)\ncolumns_","7a677a39":"columns_.append('Price')","21404f27":"pd.DataFrame(np.c_[test, preds], columns = columns_).to_csv(\"Predictions1_CatBoost.csv\", index = False)","b0470f85":"X.drop(['minimum_nights', 'maximum_nights'], axis = 1, inplace = True)","6e5d0bd8":"test.drop(['minimum_nights', 'maximum_nights'], axis = 1, inplace= True)","5b67093d":"model = CatBoostRegressor(iterations=2000, learning_rate=0.05, depth=5)","65214a1b":"categorical_features = np.where(test.dtypes == object)[0]\ncategorical_features","25df4122":"categorical_features = np.where(X.dtypes == object)[0]\ncategorical_features","c0887a73":"model.fit(X,y, cat_features = categorical_features,plot = False)\n","b8584700":"preds = model.predict(test)","d533836e":"columns_ = list(test.columns)\ncolumns_.append('Price')\npd.DataFrame(np.c_[test, preds], columns = columns_).to_csv(\"Predictions2_FeatureSelection_CatBoost.csv\", index = False)","bbda9988":"X.info()","0b18b4e3":"X.columns[categorical_features]","e1e2e590":"from sklearn.ensemble import RandomForestRegressor\nforest = RandomForestRegressor(n_estimators = 300, criterion = 'mse', n_jobs = -1)","4dc2212b":"cat_columns = list(X.select_dtypes(include=['object']).columns)","4663ec96":"cat_columns","9f9f8d53":"for col in  cat_columns:\n    X = pd.concat([X.drop(col, axis=1), pd.get_dummies(X[col], prefix=col, prefix_sep='_',\n\n                                                         drop_first=True)], axis=1)","9d31d28f":"list(X.columns)","e4149f60":"for col in  cat_columns:\n    test = pd.concat([test.drop(col, axis=1), pd.get_dummies(test[col], prefix=col, prefix_sep='_',\n\n                                                         drop_first=True)], axis=1)","d9fcc94c":"list(test.columns)","6c92f54d":"print(len(X.columns))\nprint(len(test.columns))","728af85d":"for x in list(X.columns):\n    if x not in list(test.columns):\n        print(x)","cfe54517":"for x in list(test.columns):\n    if x not in list(X.columns):\n        print(x)","a7907eb7":"X['property_type_Treehouse'] = 0\nX['bed_type_Couch'] = 0","0ad2cee9":"test['property_type_Boutique hotel'] = 0\ntest['property_type_Farm stay'] = 0\ntest['property_type_Hostel'] = 0\ntest['property_type_In-law'] = 0\ntest['property_type_Resort'] = 0\ntest['property_type_Yurt'] = 0","2d0b5118":"len(list(X.columns)) == len(list(test.columns))","dcec9836":"forest.fit(X,y)","b4121101":"preds_forest = forest.predict(test)","ad060975":"preds_forest","74ec871f":"columns_ = list(test.columns)\ncolumns_.append('Price')\npd.DataFrame(np.c_[test, preds_forest], columns = columns_).to_csv(\"Predictions3_RandomForestRegressor.csv\", index = False)","06e709ea":"import xgboost\nxgb = xgboost.XGBRegressor(n_estimators=300, learning_rate=0.08, gamma=0, subsample=0.75,\n                           colsample_bytree=1, max_depth=7)\nxgb.fit(X,y)","d301c7a3":"X.columns","250933d8":"preds_xgb = xgb.predict(test[X.columns])","7e1cdb0e":"columns_ = list(test.columns)\ncolumns_.append('Price')\npd.DataFrame(np.c_[test, preds_xgb], columns = columns_).to_csv(\"Predictions4_XGBoost.csv\", index = False)","c3fe99a5":"X.columns","a0b9e14e":"X.info()","be9ccb1d":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nfrom sklearn.preprocessing import MinMaxScaler\n\nX_norm = MinMaxScaler().fit_transform(X)\nchi_selector = SelectKBest(chi2, k = 100)\nchi_selector.fit(X_norm, y)","7d817a1a":"chi_support = chi_selector.get_support()\nchi_feature = X.loc[:,chi_support].columns.tolist()\nprint(chi_feature)\n\nprint(len(chi_feature))","0b18357a":"from sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression\n\nrfe_selector = RFE(estimator = LogisticRegression(), n_features_to_select = 100, step = 10, verbose = 5)\nrfe_selector.fit(X_norm, y)","43939a5b":"rfe_support = rfe_selector.get_support()\nrfe_feature = X.loc[:,rfe_support].columns.tolist()","06c041ac":"print(rfe_feature)","fdae3ae5":"from sklearn.feature_selection import SelectFromModel\nfrom sklearn.linear_model import LogisticRegression\n\n\nembeded_lr_selector = SelectFromModel(LogisticRegression(penalty = 'l2'), '1.25*median')\nembeded_lr_selector.fit(X_norm, y)","bd49015a":"embeded_lr_support = embeded_lr_selector.get_support()\nembeded_lr_feature = X.loc[:,embeded_lr_support].columns.tolist()\nprint(str(embeded_lr_feature), 'selected features')","3d94b0ed":"from sklearn.feature_selection import SelectFromModel\nfrom sklearn.ensemble import RandomForestClassifier\n\nembeded_rf_selector = SelectFromModel(RandomForestClassifier(n_estimators=100), threshold='1.25*median')\nembeded_rf_selector.fit(X, y)","9b1d79d9":"embeded_rf_support = embeded_rf_selector.get_support()\nembeded_rf_feature = X.loc[:,embeded_rf_support].columns.tolist()","1677a9ea":"embeded_rf_feature","2d9a0649":"!pip install -q --upgrade 'lightgbm>=3.0.0'","1c7c1b77":"from sklearn.feature_selection import SelectFromModel\nfrom lightgbm import LGBMClassifier\n","996f106c":"lgbc = LGBMClassifier(n_estimators = 500, learning_rate = 0.05, num_leaves = 32, colsample_bytree = 0.2, reg_alpha= 3, reg_lambda = 1, min_split_gain = 0.01, min_child_weight = 40)","79bff739":"embeded_lgb_selector = SelectFromModel(lgbc, threshold='1.25*median')\nembeded_lgb_selector.fit(X, y)","88c801d2":"embeded_lgb_support = embeded_lgb_selector.get_support()\nembeded_lgb_feature = X.loc[:,embeded_lgb_support].columns.tolist()","309e5d6e":"embeded_lgb_feature","9396be33":"from sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier()\nclf.fit(X,y)","9b931772":"scores = []\nfor i in range(100):\n    scores.append((clf.feature_importances_[i],X.columns[i]))\n        \nprint(scores)","f85177c1":"Correlation doesn't indicate the relation quite well. Let's explore more into the distribution & details.","e536a555":"Pearson Correlation","b90e0205":"Conclusion : Boutique Hotel & Villa have the highest mean price in the property type.","a83c3831":"## Feature Selection using Model Based Methods","058bf5b1":"Conclusion: Minimum and Maximum Nights don't seem to have a direct effect on the price of the listing.","f9d2d8d9":"### Method -3 \n\nRandomForest Regressor","21ff0535":"A little text cleaning","f652d7d6":"## Data Modelling","1614ba70":"Observation: Although, there is a slight difference of number of bookings which satisfyied \"instant_bookable\". However, majority of the bookings are instant_bookable. \n\nConclusion : Majority of the bookings happen to be instant.\n","62aa8820":"Preprocess \"cleaning_fee\" to generate numeric column type","e71c51b1":"As per NyTimes, A superhost maintains a quick response rate. Let's verify with the data.","d7f8e5bf":"Comparitive Study of the methods","a7b32d9c":"Recursive Feature Elimination","fec32f11":"### Method -2 \n\nFeature Selection","167353ef":"##### Preliminary Feature Processing","e993868a":"Further Analysis\/Assumption: Instant bookings tend be expensive than reserved bookings? Let's verify our statement","a6fa057a":"No missing values in the dataset.","71460490":"Remove \"Minimum Nights\" & \"Maximum Nights\" features. These features don't seem to have a direct influence on the price of the listing.","10f7e3ac":"Conclusion : With increasing number of bedrooms, the price increases.","9791f9d5":"Finding : Superhosts don't support \"super_strict_60\" and \"super_strict_30\"","fe335ff9":"Observation: If the host is not a superhost, the response time is faster.","9ec32f21":"Observation : Most of the bookings which happen, comprise of at max 6 beds.","d85be11d":"## Feature Selection using RF","0c140812":"We'll have to make features of boolean type depicting has or has not for an amenity. ","a4f5e413":"Similar transformation for test dataset","f22b4bd2":"## Feature Selection using Statistical Methods","312ad812":"Conclusion : With increasing number of bathrooms, the price increases.","2ff983af":"Conclusion: \n1. If the host is a normal host, the number of requests must be low compared to the superhost, which is resulting in faster response time compared to superhosts.\n2. There might be listings which want to fulfill the criteria of becoming a superhost. And to achieve this feat, they are outperforming in the response time field.","f36e5baa":"Conclusion : Higher the listings count, higher the price as expected. ","7dcd2191":"Drop 'latitude' & 'longitude' as these are redundant features compared to 'neighbourhood_group'.\nAdded to it, coordinates aren't the best indicators of price as compared to neighbourhood.","1ae7c56e":"But, with a verified identity, higher listings count can be achieved.","fccb0b15":"Drop the amenities from X","9c6f0ec9":"Conclusion : \n\n1. Majority of the listings have response rate as 1.0\n\n2. It doesn't affect the price directly\n\nbecause if response_rate is 0, it would eventually be listed out. However, few of the listings had response rate as 0. Let's explore those few responses.","7f5642e7":"SelectKBest, chi2","a9d2cb56":"We can confirm that, host_identity verification doesn't make any difference to the price.","eeb8cd8c":"Using RF","abc0688b":"Drop \"id\" & \"price\" columns from the df to generate X","cca3149c":"Although, readings are quite close to each other, it is right to say that number of instant bookings and reserved are equal. However, the ones which have supported instant bookings are on the higher end if we compare the 75th quantile & Max Value. \n\nWe can support our assumption based on these two factors.","805637ad":"Boosting Algorithms\n\nXGBoost","b4d9a27d":"RF Bestt Features","422eb68d":"Conclusion : With increasing number of guests_included, the price increases proportionately. Number of guests_included has a direct impact on the price of the listing.","a128d910":"Preprocess \"host_identity_verified\" to generate numeric column type","1bf53aa8":"Univariate","382fd540":"Most popular amenities","a3c0d7d5":"Conclusion : There is a obvious & direct relation between the accommodates & the price (few being outliers because of other factors or fascilities causing their price to increase). ","e9387899":"We can conclude that orders which are responded within an hour, are the costliest ones.","f7957b09":"## Dimensionality Reduction Methods (PCA)","aa0d375a":"### Feature Wise Preprocessing & Analysis","98e60d2b":"Conclusion: With the bed type, the price increases. Real bed are the costliest among all as expected.","5497cf3d":"Conclusion: \n\n1. Comparing among strict, moderate & flexible, as obvious it should be, the ones with strict cancellation policy tend to be on the higher range.\n\n2. Comparing Super Strict 60 (atleast 60 days cancellation) & Super Strict 30 (atleast 30 days cancellation), super strict 60 should be on the higher end of prices. And it is.\n\n3. Strict 14 with grace period seems to be the most commonly adapted and preferred cancellation policy among all.","7bef5622":"Similarly for test dataset,","35fa6634":"# Notebook in Making...","ca3d5d21":"No missing values for prices.","8316f141":"Converting categorical columns to dummies","4cb5b385":"## Feature Selection using Wrapper Methods\n\nForward Selection\nBackward Selection\nExhaustive Feature Selection","c246d709":"# Summary","95e6ffcc":"preprocessing Price Column","ab964bc2":"Conclusion : Queen Anne being affluent neighbourhood is the costliest.","255268b4":"Let's deal with the categorical variables so as to use RFRegressor","7e72cef3":"Conclusion: \n\nMajority of the listings are for Enitre home\/apt.\n\nAmong the listings, there is an equal distribution for host being superhost.\n\nNo Superhost for shared room which should be obvious.","737206e9":"#### Method -4 ","2e143cac":"We can say, those with 0 response_rate have listings count as 1 (majorly). \nWe can also say, those are intended for long term bookings.","7378d320":"Preprocessing \"host_response_rate\" to generate numeric value","fdbc43ef":"LightGBM","afeb0fbb":"Observation : Apertment, House & Guest Suite are the most common property types. ","8b58bdfe":"A huge chunk of price lies in the range of 50 to 100 for cleaning. \n\nFor a small fraction, it is 200 to 400. Let's see if that higher cleaning_fee is related to higher price. Intutively, it should be.","af3e5f57":"Conclusion : In the dataset, there is an equal distribution of host being a super host and host not being a super host. ","f2e1196f":"Conclusion : As expected, with the increasing number of beds, the price would increase.\nMore beds mean, more space needed. Hence, higher price charged.\n\nAnother observation, there are no aberrations for number of beds greater than 6. This can explained by the fact that the most common bookings which happen are the ones for number of beds lesser than 6. Those have additional features which increase their price.","069744cb":"Conclusion : Although there are some spikes in between (aberrations), we can say there's a linear increase of price with the cleaning_fee."}}