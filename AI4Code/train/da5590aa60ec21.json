{"cell_type":{"bb7a2fbc":"code","4ee1010f":"code","88877eab":"code","78d5315a":"code","50997532":"code","f09bf8ce":"code","b48d6342":"code","e7bb3e97":"code","4fd0a8a1":"code","f8289382":"code","e4975c34":"code","85228a13":"code","77b2ac32":"code","ef09988e":"code","e1bd5d51":"code","d8548471":"code","199c894c":"code","2a902184":"code","4929e2f0":"code","3b32c483":"code","0a333305":"code","370d8df3":"code","49636a70":"code","f665ea0b":"code","f2b1ec30":"code","c7cfe584":"code","a227079c":"code","ff8ebe8f":"code","a6419434":"code","2ec18f25":"code","bfed528d":"code","3992d980":"code","1509afba":"code","63a3f725":"code","52d8d390":"code","8bd7b56c":"markdown","d0458545":"markdown","3fefe27c":"markdown","7ef1c7b2":"markdown","11257f90":"markdown","ce04fd78":"markdown","507145f3":"markdown","5a30f4db":"markdown","35181120":"markdown","c077f2b4":"markdown","ca74f36b":"markdown","17e5a08e":"markdown","8239c985":"markdown","7191fc16":"markdown","b0263b01":"markdown","513dd30f":"markdown","224fa495":"markdown","3f084528":"markdown","2d45c840":"markdown","5a989d13":"markdown","1689ef19":"markdown","504d8d38":"markdown","a00ca86f":"markdown","ad9fc29b":"markdown","9cc0b0ba":"markdown","9d2965a3":"markdown","ea54366c":"markdown","45971e11":"markdown"},"source":{"bb7a2fbc":"import pandas as pd\nimport numpy as np\nimport math\nimport datetime as dt\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, explained_variance_score, r2_score \nfrom sklearn.metrics import mean_poisson_deviance, mean_gamma_deviance, accuracy_score\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM, GRU\n\nfrom itertools import cycle\n\n# ! pip install plotly\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots","4ee1010f":"# Import dataset\nbist100 = pd.read_csv(\"..\/input\/tcs19092019to17092021\/19-09-2019-TO-17-09-2021TCSALLN.csv\")\nbist100.head()","88877eab":"# Rename columns\nbist100.rename(columns={\"Date\":\"date\",\"Open Price\":\"open\",\"High Price\":\"high\",\"Low Price\":\"low\",\"Close Price\":\"close\"}, inplace= True)\nbist100.head()","78d5315a":"# Checking null value\nbist100.isnull().sum()","50997532":"# Checking na value\nbist100.isna().any()","f09bf8ce":"# Checking Data type of each column\nprint(\"Date column data type: \", type(bist100['date'][0]))\nprint(\"Open column data type: \", type(bist100['open'][0]))\nprint(\"Close column data type: \", type(bist100['close'][0]))\nprint(\"High column data type: \", type(bist100['high'][0]))\nprint(\"Low column data type: \", type(bist100['low'][0]))","b48d6342":"# convert date field from string to Date format and make it index\nbist100['date'] = pd.to_datetime(bist100.date)\nbist100.head()","e7bb3e97":"bist100.sort_values(by='date', inplace=True)\nbist100.head()","4fd0a8a1":"bist100.shape","f8289382":"print(\"Starting date: \",bist100.iloc[0][2])\nprint(\"Ending date: \", bist100.iloc[-1][2])\nprint(\"Duration: \", bist100.iloc[-1][2]-bist100.iloc[0][2])","e4975c34":"monthvise= bist100.groupby(bist100['date'].dt.strftime('%B'))[['open','close']].mean().sort_values(by='close')\nnew_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', \n             'September', 'October', 'November', 'December']\nmonthvise = monthvise.reindex(new_order, axis=0)\nmonthvise","85228a13":"fig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x=monthvise.index,\n    y=monthvise['open'],\n    name='Stock Open Price',\n    marker_color='crimson'\n))\nfig.add_trace(go.Bar(\n    x=monthvise.index,\n    y=monthvise['close'],\n    name='Stock Close Price',\n    marker_color='lightsalmon'\n))\n\nfig.update_layout(barmode='group', xaxis_tickangle=-45, \n                  title='Monthwise comparision between Stock actual, open and close price')\nfig.show()","77b2ac32":"monthHighLow = bist100.groupby(bist100['date'].dt.strftime('%B'))['low'].min()\nnew_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', \n             'September', 'October', 'November', 'December']\nmonthHighLow = monthHighLow.reindex(new_order, axis=0)\nmonthHighLow","ef09988e":"# monthvise_high= bist100.groupby(bist100['date'].dt.strftime('%B'))['high'].max()\n# monthvise_low= bist100.groupby(bist100['date'].dt.strftime('%B'))['low'].min()","e1bd5d51":"bist100.groupby(bist100['date'].dt.strftime('%B'))['low'].min()\nmonthvise_high = bist100.groupby(bist100['date'].dt.strftime('%B'))['high'].max()\nmonthvise_high = monthvise_high.reindex(new_order, axis=0)\n\nmonthvise_low = bist100.groupby(bist100['date'].dt.strftime('%B'))['low'].min()\nmonthvise_low = monthvise_low.reindex(new_order, axis=0)","d8548471":"fig = go.Figure()\nfig.add_trace(go.Bar(\n    x=monthvise_high.index,\n    y=monthvise_high,\n    name='Stock high Price',\n    marker_color='rgb(0, 153, 204)'\n))\nfig.add_trace(go.Bar(\n    x=monthvise_low.index,\n    y=monthvise_low,\n    name='Stock low Price',\n    marker_color='rgb(255, 128, 0)'\n))\n\nfig.update_layout(barmode='group', \n                  title=' Monthwise High and Low stock price')\nfig.show()","199c894c":"names = cycle(['Stock Open Price','Stock Close Price','Stock High Price','Stock Low Price'])\n\nfig = px.line(bist100, x=bist100.date, y=[bist100['open'], bist100['close'], \n                                          bist100['high'], bist100['low']],\n             labels={'date': 'Date','value':'Stock value'})\nfig.update_layout(title_text='Stock analysis chart', font_size=15, font_color='black',legend_title_text='Stock Parameters')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n\nfig.show()","2a902184":"closedf = bist100[['date','close']]\nprint(\"Shape of close dataframe:\", closedf.shape)","4929e2f0":"fig = px.line(closedf, x=closedf.date, y=closedf.close,labels={'date':'Date','close':'Close Stock'})\nfig.update_traces(marker_line_width=2, opacity=0.6)\nfig.update_layout(title_text='Stock close price chart', plot_bgcolor='white', font_size=15, font_color='black')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","3b32c483":"close_stock = closedf.copy()\ndel closedf['date']\nscaler=MinMaxScaler(feature_range=(0,1))\nclosedf=scaler.fit_transform(np.array(closedf).reshape(-1,1))\nprint(closedf.shape)","0a333305":"training_size=int(len(closedf)*0.70)\ntest_size=len(closedf)-training_size\ntrain_data,test_data=closedf[0:training_size,:],closedf[training_size:len(closedf),:1]\nprint(\"train_data: \", train_data.shape)\nprint(\"test_data: \", test_data.shape)","370d8df3":"# convert an array of values into a dataset matrix\ndef create_dataset(dataset, time_step=1):\n    dataX, dataY = [], []\n    for i in range(len(dataset)-time_step-1):\n        a = dataset[i:(i+time_step), 0]   ###i=0, 0,1,2,3-----99   100 \n        dataX.append(a)\n        dataY.append(dataset[i + time_step, 0])\n    return np.array(dataX), np.array(dataY)","49636a70":"# reshape into X=t,t+1,t+2,t+3 and Y=t+4\ntime_step = 15\nX_train, y_train = create_dataset(train_data, time_step)\nX_test, y_test = create_dataset(test_data, time_step)\n\nprint(\"X_train: \", X_train.shape)\nprint(\"y_train: \", y_train.shape)\nprint(\"X_test: \", X_test.shape)\nprint(\"y_test\", y_test.shape)","f665ea0b":"from sklearn.ensemble import RandomForestRegressor\n\nregressor = RandomForestRegressor(n_estimators = 100, random_state = 0)\nregressor.fit(X_train, y_train)","f2b1ec30":"# Lets Do the prediction \n\ntrain_predict=regressor.predict(X_train)\ntest_predict=regressor.predict(X_test)\n\ntrain_predict = train_predict.reshape(-1,1)\ntest_predict = test_predict.reshape(-1,1)\n\nprint(\"Train data prediction:\", train_predict.shape)\nprint(\"Test data prediction:\", test_predict.shape)","c7cfe584":"# Transform back to original form\n\ntrain_predict = scaler.inverse_transform(train_predict)\ntest_predict = scaler.inverse_transform(test_predict)\noriginal_ytrain = scaler.inverse_transform(y_train.reshape(-1,1)) \noriginal_ytest = scaler.inverse_transform(y_test.reshape(-1,1)) ","a227079c":"# Evaluation metrices RMSE and MAE\nprint(\"Train data RMSE: \", math.sqrt(mean_squared_error(original_ytrain,train_predict)))\nprint(\"Train data MSE: \", mean_squared_error(original_ytrain,train_predict))\nprint(\"Test data MAE: \", mean_absolute_error(original_ytrain,train_predict))\nprint(\"-------------------------------------------------------------------------------------\")\nprint(\"Test data RMSE: \", math.sqrt(mean_squared_error(original_ytest,test_predict)))\nprint(\"Test data MSE: \", mean_squared_error(original_ytest,test_predict))\nprint(\"Test data MAE: \", mean_absolute_error(original_ytest,test_predict))","ff8ebe8f":"print(\"Train data explained variance regression score:\", explained_variance_score(original_ytrain, train_predict))\nprint(\"Test data explained variance regression score:\", explained_variance_score(original_ytest, test_predict))","a6419434":"print(\"Train data R2 score:\", r2_score(original_ytrain, train_predict))\nprint(\"Test data R2 score:\", r2_score(original_ytest, test_predict))","2ec18f25":"print(\"Train data MGD: \", mean_gamma_deviance(original_ytrain, train_predict))\nprint(\"Test data MGD: \", mean_gamma_deviance(original_ytest, test_predict))\nprint(\"----------------------------------------------------------------------\")\nprint(\"Train data MPD: \", mean_poisson_deviance(original_ytrain, train_predict))\nprint(\"Test data MPD: \", mean_poisson_deviance(original_ytest, test_predict))","bfed528d":"# shift train predictions for plotting\n\nlook_back=time_step\ntrainPredictPlot = np.empty_like(closedf)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\nprint(\"Train predicted data: \", trainPredictPlot.shape)\n\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(closedf)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(closedf)-1, :] = test_predict\nprint(\"Test predicted data: \", testPredictPlot.shape)\n\nnames = cycle(['Original close price','Train predicted close price','Test predicted close price'])\n\n\nplotdf = pd.DataFrame({'date': close_stock['date'],\n                       'original_close': close_stock['close'],\n                      'train_predicted_close': trainPredictPlot.reshape(1,-1)[0].tolist(),\n                      'test_predicted_close': testPredictPlot.reshape(1,-1)[0].tolist()})\n\nfig = px.line(plotdf,x=plotdf['date'], y=[plotdf['original_close'],plotdf['train_predicted_close'],\n                                          plotdf['test_predicted_close']],\n              labels={'value':'Stock price','date': 'Date'})\nfig.update_layout(title_text='Comparision between original close price vs predicted close price',\n                  plot_bgcolor='white', font_size=15, font_color='black', legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","3992d980":"x_input=test_data[len(test_data)-time_step:].reshape(1,-1)\ntemp_input=list(x_input)\ntemp_input=temp_input[0].tolist()\n\nfrom numpy import array\n\nlst_output=[]\nn_steps=time_step\ni=0\npred_days = 10\nwhile(i<pred_days):\n    \n    if(len(temp_input)>time_step):\n        \n        x_input=np.array(temp_input[1:])\n        #print(\"{} day input {}\".format(i,x_input))\n        x_input=x_input.reshape(1,-1)\n        \n        yhat = regressor.predict(x_input)\n        #print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat.tolist())\n        temp_input=temp_input[1:]\n       \n        lst_output.extend(yhat.tolist())\n        i=i+1\n        \n    else:\n        yhat = regressor.predict(x_input)\n        \n        temp_input.extend(yhat.tolist())\n        lst_output.extend(yhat.tolist())\n        \n        i=i+1\n        \nprint(\"Output of predicted next days: \", len(lst_output))","1509afba":"last_days=np.arange(1,time_step+1)\nday_pred=np.arange(time_step+1,time_step+pred_days+1)\nprint(last_days)\nprint(day_pred)","63a3f725":"temp_mat = np.empty((len(last_days)+pred_days+1,1))\ntemp_mat[:] = np.nan\ntemp_mat = temp_mat.reshape(1,-1).tolist()[0]\n\nlast_original_days_value = temp_mat\nnext_predicted_days_value = temp_mat\n\nlast_original_days_value[0:time_step+1] = scaler.inverse_transform(closedf[len(closedf)-time_step:]).reshape(1,-1).tolist()[0]\nnext_predicted_days_value[time_step+1:] = scaler.inverse_transform(np.array(lst_output).reshape(-1,1)).reshape(1,-1).tolist()[0]\n\nnames = cycle(['Last 15 days close price','Predicted next 10 days close price'])\n\nnew_pred_plot = pd.DataFrame({\n    'last_original_days_value':last_original_days_value,\n    'next_predicted_days_value':next_predicted_days_value\n})\n\nfig = px.line(new_pred_plot,x=new_pred_plot.index, y=[new_pred_plot['last_original_days_value'],\n                                                      new_pred_plot['next_predicted_days_value']],\n              labels={'value': 'Stock price','index': 'Timestamp'})\nfig.update_layout(title_text='Compare last 15 days vs next 10 days',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Close Price')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","52d8d390":"rfdf=closedf.tolist()\nrfdf.extend((np.array(lst_output).reshape(-1,1)).tolist())\nrfdf=scaler.inverse_transform(rfdf).reshape(1,-1).tolist()[0]\n\nnames = cycle(['Close price'])\n\nfig = px.line(rfdf,labels={'value': 'Stock price','index': 'Timestamp'})\nfig.update_layout(title_text='Plotting whole closing stock price with prediction',\n                  plot_bgcolor='white', font_size=15, font_color='black',legend_title_text='Stock')\nfig.for_each_trace(lambda t:  t.update(name = next(names)))\n\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","8bd7b56c":"# Plotting last 15 days and next predicted 10 days","d0458545":"# Plotting stock close price chart","3fefe27c":"R2 score for regression\n\nR-squared (R2) is a statistical measure that represents the proportion of the variance for a dependent variable that's explained by an independent variable or variables in a regression model.\n\n1 = Best\n\n0 or < 0 = worse","7ef1c7b2":"# Create new dataset according to requirement of time-series prediction","11257f90":"# Make separate dataframe with close price","ce04fd78":"Explained variance regression score\n\nThe explained variance score explains the dispersion of errors of a given dataset, and the formula is written as follows: Here, and Var(y) is the variance of prediction errors and actual values respectively. Scores close to 1.0 are highly desired, indicating better squares of standard deviations of errors.","507145f3":"# Rename columns","5a30f4db":"# Checking null & na value","35181120":"# Convert date from string to date format","c077f2b4":"# Get the duration of dataset","ca74f36b":"Regression Loss Mean Gamma deviance regression loss (MGD) and Mean Poisson deviance regression loss (MPD)","17e5a08e":"# Monthwise High and Low stock price","8239c985":"Root Mean Square Error (RMSE), Mean Square Error (MSE) and Mean absolute Error (MAE) are a standard way to measure the error of a model in predicting quantitative data.","7191fc16":"Ratio for training and testing data is 70:30","b0263b01":"# Sorting dataset by date format","513dd30f":"# Normalizing \/ scaling close value between 0 to 1","224fa495":"# Importing Library ","3f084528":"# Checking datatype of each column","2d45c840":"# Split data for training and testing","5a989d13":"# Import dataset","1689ef19":"# Algorithms","504d8d38":"Evaluation metrices RMSE, MSE and MAE","a00ca86f":"# Comparision between original stock close price vs predicted close price","ad9fc29b":"# Random Forest Regressor - RF","9cc0b0ba":"# Predicting next 10 days","9d2965a3":"# Trend comparision between stock price, open price, close price, high price, low price","ea54366c":"# Monthwise comparision between Stock actual, open and close price","45971e11":"# Plotting whole closing stock price with prediction"}}