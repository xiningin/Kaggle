{"cell_type":{"e612a9e3":"code","05ec2699":"code","f2c0df10":"code","a091206f":"code","95c080f6":"code","e6ec24db":"code","e6b478b4":"code","68385dde":"code","477d55f9":"code","081965b1":"code","e427d60b":"code","0b080e21":"code","77bb48bf":"markdown","93f1047b":"markdown","78cc2a4d":"markdown","22a38b55":"markdown","4f6404ce":"markdown","66dfeac9":"markdown"},"source":{"e612a9e3":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import Ridge\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","05ec2699":"data = pd.read_csv('..\/input\/crowdedness-at-the-campus-gym\/data.csv')","f2c0df10":"data","a091206f":"data.info()","95c080f6":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Extract date features\n    df['date'] = pd.to_datetime(df['date'])\n    df['month'] = df['date'].apply(lambda x: x.month)\n    df['day'] = df['date'].apply(lambda x: x.day)\n    df['hour'] = df['date'].apply(lambda x: x.hour)\n    df['minute'] = df['date'].apply(lambda x: x.minute)\n    df = df.drop('date', axis=1)\n    \n    # Split df into X and y\n    y = df['number_people']\n    X = df.drop('number_people', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n    \n    return X_train, X_test, y_train, y_test","e6ec24db":"X_train, X_test, y_train, y_test  = preprocess_inputs(data)","e6b478b4":"X_train","68385dde":"y_train","477d55f9":"models = {\n    \"Linear Regression (Ridge)\": Ridge(),\n    \"           Neural Network\": MLPRegressor(),\n    \"            Random Forest\": RandomForestRegressor()\n}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + \" trained.\")","081965b1":"def get_rmse(y_test, y_pred):\n    rmse = np.sqrt(np.mean((y_test - y_pred)**2))\n    return rmse\n\ndef get_r2(y_test, y_pred):\n    r2 = 1 - (np.sum((y_test - y_pred)**2) \/ np.sum((y_test - y_test.mean())**2))\n    return r2","e427d60b":"for name, model in models.items():\n    y_pred = model.predict(X_test)\n    rmse = get_rmse(y_test, y_pred)\n    print(name + \" RMSE: {:.2f}\".format(rmse))","0b080e21":"for name, model in models.items():\n    y_pred = model.predict(X_test)\n    r2 = get_r2(y_test, y_pred)\n    print(name + \" R^2: {:.5f}\".format(r2))","77bb48bf":"# Training","93f1047b":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/K7_HWT7u0fA","78cc2a4d":"# Task for Today  \n\n***\n\n## Gym Crowd Size Prediction  \n  \nGiven *data about a campus gym*, let's try to predict the **number of people** that will be at the gym at a given time.  \n  \nWe will use a variety of regression models to make our predictions.","22a38b55":"# Results","4f6404ce":"# Getting Started","66dfeac9":"# Preprocessing"}}