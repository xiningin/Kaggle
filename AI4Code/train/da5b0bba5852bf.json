{"cell_type":{"b0fb7bac":"code","96b9e288":"code","dbfb6d5a":"code","73ac3400":"code","6d7bc2c1":"code","f8571c52":"code","caf2bf93":"code","2a6d3692":"code","a8e6dee0":"code","c9fd6dac":"code","ccdd5e43":"code","218c3aa6":"code","e9203c20":"code","7c0a0e9a":"code","5e42175c":"code","51d14dfb":"code","d7d3be60":"code","05b1f299":"code","1253ce27":"code","8f144f54":"code","d7ded6cd":"code","d68f0382":"code","4cb6ad30":"code","23d7b78c":"code","20ebfa7b":"code","d0c0f75f":"code","22631599":"code","3c4319e5":"code","1dbcd908":"code","ff98ed39":"code","18ec4984":"code","42799d44":"code","0ed84055":"code","bdb386e3":"code","897e66f4":"code","5de27556":"code","1f5d999f":"code","65eed7ae":"code","dbc252ad":"code","fe44de98":"code","af9a2d9e":"code","25130ea7":"code","935cff4a":"code","9891fdd4":"code","93d123e2":"code","7c4e9bb7":"code","956a848f":"code","681192f5":"code","09b646e4":"code","1092a7bc":"code","3bdb5185":"code","4ca91da1":"code","306519c0":"code","c505fd42":"code","4666cf0b":"code","c0619382":"code","9de6aab9":"code","02025766":"code","7da28637":"code","cc4067aa":"code","9daf5f40":"code","b72879a8":"code","c3f4c7cc":"code","7c70c657":"code","79858064":"code","b584862e":"code","782797e3":"code","41dc41da":"code","088312c4":"code","6af8c615":"code","eb9b2687":"code","7341f900":"code","66d6bb5f":"code","3c41e228":"code","f69fc96c":"code","9b82b26e":"code","a0364d64":"code","8fc5367f":"code","55af3ef0":"code","75c54095":"code","a5966b60":"code","0f849324":"code","c26012b7":"code","51d3092f":"code","f2629a73":"code","fe39c88d":"code","bff1f019":"code","1bcc3b98":"code","30b7e558":"code","d1921544":"code","70f8b3ea":"code","f604c87f":"code","2cbedf48":"code","eb3371f0":"code","54ef5773":"code","9755b664":"code","fa5b2fd4":"code","4eedef56":"code","2cd2f055":"code","0ca3b5ab":"code","96e5ad81":"code","a71c1233":"code","45793f12":"code","e411e29d":"code","be85b2fe":"code","2ed63efd":"code","1ba71839":"code","97096dfe":"code","be24ff25":"code","aa802bba":"code","cca91950":"code","4ab54323":"code","e0bfd47d":"code","52f29e18":"code","cfe80b83":"code","ad941479":"code","832d11fb":"code","24c846b3":"code","4422cbb3":"code","1a15d97c":"code","041d444d":"markdown","497f1839":"markdown","f4c555f7":"markdown","fa0ca797":"markdown","322455d5":"markdown","7571a971":"markdown","02b872d7":"markdown","8e514cdd":"markdown","7d4c1498":"markdown","5d98e9f6":"markdown","d93c6953":"markdown","39203255":"markdown","7887a9ab":"markdown","4212d188":"markdown","9bed160b":"markdown","49503496":"markdown","1968524e":"markdown","a37f33ee":"markdown","cf4f72ab":"markdown","b24f5731":"markdown","dc005411":"markdown","47d8e487":"markdown","a6a945bf":"markdown","0a2679d9":"markdown","c11ec0d5":"markdown","8ce2e4f8":"markdown","9f641b35":"markdown","fb16017f":"markdown","17778611":"markdown","f1318830":"markdown","466a2f71":"markdown","5fbfecd2":"markdown","aaa01c43":"markdown","b740b73e":"markdown","6f7305d6":"markdown","c233ea01":"markdown","9459ed5c":"markdown","dcce5a97":"markdown","6ca6205a":"markdown","aa32cf09":"markdown","a39eaa1a":"markdown","a4d3f7e3":"markdown","36c28736":"markdown","f2539a5c":"markdown","c6b768fd":"markdown","dd9d22d9":"markdown","f943416a":"markdown","4caa829d":"markdown"},"source":{"b0fb7bac":"!pip install missingno\nimport numpy as np\nimport pandas as pd\nimport missingno as msno\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn import model_selection\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import preprocessing","96b9e288":"#Veri setini okutup ilk 5 sat\u0131r\u0131n\u0131 g\u00f6zlemliyoruz.\ndata = pd.read_csv(\"Hitters.csv\")\ndata.head()","dbfb6d5a":"import warnings\nwarnings.simplefilter(action = \"ignore\")","73ac3400":"#Veri setinini boyutunu inceliyoruz. 322 adet g\u00f6zlem ve 20 de\u011fi\u015fken bulunmaktad\u0131r.\ndata.shape","6d7bc2c1":"#Veri setine istatiktiksel olarak g\u00f6z at\u0131yoruz.\ndata.describe().T","f8571c52":"#Kategorik de\u011fi\u015fken olup olmad\u0131\u011f\u0131na bak\u0131yoruz. Veri setinde 3 adet kategorik de\u011fi\u015fken bulunuyor.\ndata.nunique()","caf2bf93":"categorical_columns = [col for col in data.columns if data[col].dtype == 'object']\ncategorical_columns","2a6d3692":"numeric_columns = [c for c in data.columns if c not in categorical_columns]\nnumeric_columns","a8e6dee0":"#Kategorik de\u011fi\u015fkenlerin s\u0131n\u0131flar\u0131ndan ka\u00e7ar adet oldu\u011funu inceliyoruz.\nprint(data[\"League\"].value_counts())\nprint(data[\"NewLeague\"].value_counts())\nprint(data[\"Division\"].value_counts())","c9fd6dac":"data.NewLeague.value_counts().plot.barh();","ccdd5e43":"data.Division.value_counts().plot.barh();","218c3aa6":"data.NewLeague.value_counts().plot.barh();","e9203c20":"# Ba\u011f\u0131ml\u0131 de\u011fi\u015fken olan salary de\u011fi\u015fkeninin maksimum ve minimum de\u011ferlerini buluyoruz.\nprint(\"Salary maksimum de\u011fer:\", data[\"Salary\"].max())\nprint(\"Salary minimum de\u011fer:\", data[\"Salary\"].min())","7c0a0e9a":"# Salary de\u011fi\u015fkeninin histogram ve yo\u011funluk grafi\u011fini \u00e7izdiriyoruz.\nsns.distplot(data.Salary);","5e42175c":"# Veri setinin korelasyonunu inceleyerek de\u011fi\u015fkenler aras\u0131nda ne t\u00fcr bir ili\u015fki oldu\u011funu anlayabiliriz. \n# Korelasyon de\u011feri > 0 ise pozitif korelasyon bulunmaktad\u0131r. Bir de\u011fi\u015fken de\u011feri artarken di\u011fer de\u011fi\u015fkenin de de\u011feri artmaktad\u0131r.\n# Korelasyon = 0 ise de\u011fi\u015fkenler aras\u0131nda ili\u015fki yoktur anlam\u0131na gelir.\n# Korelasyon < 0 ise negatif korelasyon bulunmaktad\u0131r. Bir de\u011fi\u015fken artarken di\u011fer de\u011fi\u015fken azalmaktad\u0131r. \n# Korelasyonlar incelendi\u011finde salary ba\u011f\u0131ml\u0131 de\u011fi\u015fkene pozitif korelasyon olarak etkimekte olan 2 de\u011fi\u015fken bulunmaktad\u0131r. \n# Bu de\u011fi\u015fkenler CRBI ile CRuns de\u011fi\u015fkenleridir. Bunlar artt\u0131k\u00e7a Salary (Maa\u015f) de\u011fi\u015fkeni de artmaktad\u0131r.\ndata.corr()","51d14dfb":"# Veri setinin korelasyon matrisi grafi\u011fini olu\u015fturuyoruz.\nf, ax = plt.subplots(figsize= [20,15])\nsns.heatmap(data.corr(), annot=True, fmt=\".2f\", ax=ax, cmap = \"magma\" )\nax.set_title(\"Correlation Matrix\", fontsize=20)\nplt.show()","d7d3be60":"#League de\u011fi\u015fkenine g\u00f6re groupby yap\u0131l\u0131p hangi ligde ortalama ne kadar maa\u015f al\u0131nd\u0131\u011f\u0131n\u0131 buluyoruz.\ndata.groupby(\"League\").agg({\"Salary\": \"mean\"})","05b1f299":"#Oyuncunun oynad\u0131\u011f\u0131 pozisyona g\u00f6re ortalama ne kadar maa\u015f ald\u0131\u011f\u0131n\u0131 buluyoruz.\ndata.groupby(\"Division\").agg({\"Salary\": \"mean\"})","1253ce27":"#Veri setinin korelasyonu incelendi\u011finde en y\u00fcksek pozitif y\u00f6nl\u00fc korelasyona CRBI de\u011fi\u015fkeni sahipti. Bu de\u011fi\u015fken artt\u0131k\u00e7a salary de\u011fi\u015fkenin de artmas\u0131n\u0131 bekleriz.\n#CRBI de\u011fi\u015fkeni kariyeri boyunca yapm\u0131\u015f oldu\u011fu vuru\u015f say\u0131s\u0131d\u0131r. CRBI de\u011fi\u015fkenine g\u00f6re gruplay\u0131p salary de\u011fi\u015fkeninin ortalamas\u0131n\u0131 inceliyoruz.\ndata.groupby(\"CRBI\").agg({\"Salary\": \"mean\"})","8f144f54":"#Veri setinde CRBI de\u011fi\u015fkeninden sonra en y\u00fcksek korelasyona CRuns de\u011fi\u015fkeni sahip. Ayn\u0131 i\u015flemi onun i\u00e7in de yap\u0131yoruz.\ndata.groupby(\"CRuns\").agg({\"Salary\": \"mean\"})","d7ded6cd":"#Yeni lig ve oyuncunun ligde oynad\u0131\u011f\u0131 s\u00fcresine g\u00f6re gruplanarak oyuncunun ald\u0131klar\u0131 maa\u015flar\u0131n ortalamas\u0131n\u0131 buluyoruz.\ndata.groupby([\"NewLeague\",\"Years\"]).agg({\"Salary\": \"mean\"})","d68f0382":"#Kariyeri boyunca isabet say\u0131s\u0131 en y\u00fcksek olan g\u00f6zlem birimlerine g\u00f6re veri setini azalan \u015fekilde s\u0131ralayal\u0131m. \ndata.sort_values(\"CHits\", ascending = False)","4cb6ad30":"#Liglere g\u00f6re gruplayarak kariyeri boyunca yap\u0131lan isabet say\u0131lar\u0131n\u0131n maksimum de\u011ferine eri\u015felim.\ndata.groupby(\"League\").agg({\"CHits\": \"max\"})","23d7b78c":"#Oyuncular\u0131n oynad\u0131klar\u0131 pozisyonlara g\u00f6re gruplama yaparak kariyeri boyunca isabet say\u0131s\u0131n\u0131n maksimum de\u011ferine eri\u015felim.\ndata.groupby(\"Division\").agg({\"CHits\": \"max\"})","20ebfa7b":"#Lig de\u011fi\u015fkenine g\u00f6re gruplayarak beyzbol sopas\u0131 ile yap\u0131lan vuru\u015f say\u0131s\u0131n\u0131n maksimum de\u011ferlerine eri\u015felim.\ndata.groupby(\"League\").agg({\"AtBat\": \"max\"})","d0c0f75f":"#Lig de\u011fi\u015fkenine g\u00f6re gruplayarak liglerde yap\u0131lan hatalar\u0131n ortalama de\u011ferlerine eri\u015felim.\ndata.groupby(\"League\").agg({\"Errors\": \"mean\"})","22631599":"#Lig de\u011fi\u015fkenine g\u00f6re gruplayarak liglerde yap\u0131lan hatalar\u0131n maksimum de\u011ferlerine eri\u015felim.\ndata.groupby(\"League\").agg({\"Errors\": \"max\"})","3c4319e5":"#Oyuncunun ligde oynad\u0131\u011f\u0131 s\u00fcresine g\u00f6re gruplay\u0131p oyuncunun kariyeri boyunca beyzbol sopas\u0131 ile yap\u0131lan vuru\u015f say\u0131s\u0131n\u0131n maksimum de\u011ferlerine eri\u015felim.\ndata.groupby(\"Years\").agg({\"CAtBat\": \"max\"})","1dbcd908":"#Lig de\u011fi\u015fkenine g\u00f6re gruplay\u0131p kariyeri boyunca acaba liglerde beyzbol sopas\u0131 ile ortalama ka\u00e7 at\u0131\u015f ger\u00e7ekle\u015fmi\u015ftir buna eri\u015felim.\ndata.groupby(\"League\").agg({\"CAtBat\": \"mean\"})","ff98ed39":"data[\"OrtCAtBat\"] = data[\"CAtBat\"] \/ data[\"Years\"] #Oyuncunun kariyeri boyunca ortalama ka\u00e7 kez topa vurdu\u011fu\ndata[\"OrtCHits\"] = data[\"CHits\"] \/ data[\"Years\"] #Oyuncunun kariyeri boyunca ortalama ka\u00e7 kez isabetli vuru\u015f yapt\u0131\u011f\u0131\ndata[\"OrtCHmRun\"] = data[\"CHmRun\"] \/ data[\"Years\"] #Oyuncunun kariyeri boyunca ortalama ka\u00e7 kez en de\u011ferli vuru\u015fu yapt\u0131\u011f\u0131\ndata[\"OrtCruns\"] = data[\"CRuns\"] \/ data[\"Years\"] #Oyuncunun kariyeri boyunca tak\u0131m\u0131na ortalama ka\u00e7 tane say\u0131 kazand\u0131rd\u0131\u011f\u0131\ndata[\"OrtCRBI\"] = data[\"CRBI\"] \/ data[\"Years\"] #Oyuncunun kariyeri boyunca ortalama ka\u00e7 tane oyuncuya ko\u015fu yapt\u0131rd\u0131\u011f\u0131\ndata[\"OrtCWalks\"] = data[\"CWalks\"] \/ data[\"Years\"] #Oyuncun kariyeri boyunca kar\u015f\u0131 oyuncuya ortalama ka\u00e7 kez hata yapt\u0131rd\u0131\u011f\u0131\ndata.head()","18ec4984":"#Amac\u0131m\u0131z maa\u015f tahmini yapmak oldu\u011fu i\u00e7in maa\u015f de\u011fi\u015fkeniyle y\u00fcksek korelasyon i\u00e7erisinde olan de\u011fi\u015fkenlere bakarak tahminleme yapaca\u011f\u0131z.\ndata = data.drop(['AtBat','Hits','HmRun','Runs','RBI','Walks','Assists','Errors','PutOuts'], axis=1)","42799d44":"data.head()","0ed84055":"#Kategorik de\u011fi\u015fkenlerin say\u0131sal de\u011ferlere d\u00f6n\u00fc\u015ft\u00fcr\u00fclmesi i\u00e7in Label Encoding ve One Hot Encoding y\u00f6ntemleri kullan\u0131lmaktad\u0131r.\n#One Hot Encoding yaparak kategorik de\u011fi\u015fkenleri say\u0131sal de\u011ferlere d\u00f6n\u00fc\u015ft\u00fcr\u00fcp dummy de\u011fi\u015fken tuza\u011f\u0131ndan korunal\u0131m.\ndata = pd.get_dummies(data, columns =  [\"Division\"], drop_first = True)\ndata = pd.get_dummies(data, columns =  [\"League\"], drop_first = True)\ndata = pd.get_dummies(data, columns =  [\"NewLeague\"], drop_first = True)\ndata.head()","bdb386e3":"#Veri setinde ka\u00e7 adet eksik de\u011fer var?\ndata.isnull().sum()","897e66f4":"#Veri setinde ka\u00e7 adet dolu de\u011fer var?\ndata.notnull().sum()","5de27556":"msno.bar(data);","1f5d999f":"msno.matrix(data);","65eed7ae":"#Eksik g\u00f6zlem olan de\u011ferlerin ka\u00e7 y\u0131ll\u0131k kariyere sahip olduklar\u0131n\u0131 ve hangi ligde oynad\u0131klar\u0131n\u0131 inceleyelim.\ndata_eksik = data[data[\"Salary\"].isnull()].head()\ndata_eksik","dbc252ad":"#Eksik de\u011ferleri veri setinden \u00e7\u0131kar\u0131yoruz.\ndata=data.dropna()\ndata.shape","fe44de98":"sns.boxplot(x = data[\"Years\"]);","af9a2d9e":"Q1 = data[\"Years\"].quantile(0.25)\nQ3 = data[\"Years\"].quantile(0.75)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\noutliers = (data[\"Years\"] > upper) | (data[\"Years\"] < lower)\ndata[\"Years\"] = data[\"Years\"][~(outliers)]\nsns.boxplot(x = data[\"Years\"]);","25130ea7":"sns.boxplot(x = data[\"CAtBat\"]);","935cff4a":"Q1 = data[\"CAtBat\"].quantile(0.30)\nQ3 = data[\"CAtBat\"].quantile(0.70)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\noutliers = (data[\"CAtBat\"] > upper) | (data[\"CAtBat\"] < lower)\ndata[\"CAtBat\"] = data[\"CAtBat\"][~(outliers)]\nsns.boxplot(x = data[\"CAtBat\"]);","9891fdd4":"sns.boxplot(x = data[\"CHits\"]);","93d123e2":"Q1 = data[\"CHits\"].quantile(0.30)\nQ3 = data[\"CHits\"].quantile(0.70)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\noutliers = (data[\"CHits\"] > upper) | (data[\"CHits\"] < lower)\ndata[\"CHits\"] = data[\"CHits\"][~(outliers)]\nsns.boxplot(x = data[\"CHits\"]);","7c4e9bb7":"sns.boxplot(x = data[\"CHmRun\"]);","956a848f":"Q1 = data[\"CHmRun\"].quantile(0.35)\nQ3 = data[\"CHmRun\"].quantile(0.65)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\noutliers = (data[\"CHmRun\"] > upper) | (data[\"CHmRun\"] < lower)\ndata[\"CHmRun\"] = data[\"CHmRun\"][~(outliers)]\nsns.boxplot(x = data[\"CHmRun\"]);","681192f5":"sns.boxplot(x = data[\"CRuns\"]);","09b646e4":"Q1 = data[\"CRuns\"].quantile(0.35)\nQ3 = data[\"CRuns\"].quantile(0.65)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\noutliers = (data[\"CRuns\"] > upper) | (data[\"CRuns\"] < lower)\ndata[\"CRuns\"] = data[\"CRuns\"][~(outliers)]\nsns.boxplot(x = data[\"CRuns\"]);","1092a7bc":"sns.boxplot(x = data[\"CRBI\"]);","3bdb5185":"Q1 = data[\"CRBI\"].quantile(0.30)\nQ3 = data[\"CRBI\"].quantile(0.70)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\noutliers = (data[\"CRBI\"] > upper) | (data[\"CRBI\"] < lower)\ndata[\"CRBI\"] = data[\"CRBI\"][~(outliers)]\nsns.boxplot(x = data[\"CRBI\"]);","4ca91da1":"sns.boxplot(x = data[\"CWalks\"]);","306519c0":"Q1 = data[\"CWalks\"].quantile(0.35)\nQ3 = data[\"CWalks\"].quantile(0.65)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\noutliers = (data[\"CWalks\"] > upper) | (data[\"CWalks\"] < lower)\ndata[\"CWalks\"] = data[\"CWalks\"][~(outliers)]\nsns.boxplot(x = data[\"CWalks\"]);","c505fd42":"sns.boxplot(x = data[\"Salary\"]);","4666cf0b":"Q1 = data[\"Salary\"].quantile(0.25)\nQ3 = data[\"Salary\"].quantile(0.75)\nIQR = Q3-Q1\nlower = Q1 - 1.5*IQR\nupper = Q3 + 1.5*IQR\noutliers = (data[\"Salary\"] > upper) | (data[\"Salary\"] < lower)\ndata[\"Salary\"] = data[\"Salary\"][~(outliers)]\nsns.boxplot(x = data[\"Salary\"]);","c0619382":"data=data.dropna()\ndata.shape","9de6aab9":"scaler = StandardScaler()\nnormalizer = preprocessing.Normalizer()","02025766":"y = data[\"Salary\"]\nX = data.drop('Salary', axis=1)\ncols = X.columns","7da28637":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\nX = pd.DataFrame(X, columns = cols)\nX.head()","cc4067aa":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","9daf5f40":"# Ba\u011f\u0131ml\u0131 ve Ba\u011f\u0131ms\u0131z de\u011fi\u015fkenler se\u00e7ilerek X ve y de\u011fi\u015fkenlerine atanm\u0131\u015ft\u0131r. X ba\u011f\u0131ms\u0131z de\u011fi\u015fkeni standardize edilmi\u015ftir.\n# Veri setinde yer alan de\u011fi\u015fkenleri standardizasyon i\u015flemi yap\u0131larak model kurulumunda al\u0131nan hatalar\u0131n d\u00fc\u015f\u00fcr\u00fclmesinde etkili bir fakt\u00f6rd\u00fcr. \n# Birden \u00e7ok standardizasyon y\u00f6ntemi bulunmaktad\u0131r. Bunlar \"Normalize\", \"MinMax\" ve \"Scale\" gibi y\u00f6ntemlerdir.\n# Test ve Train ay\u0131rma i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir. Train setinin % 20'si test setini olu\u015fturmaktad\u0131r. Yani train = % 80 ve test = % 20 olarak ayr\u0131lm\u0131\u015ft\u0131r.\nX = data[[\"OrtCHits\"]]\ny = data[[\"Salary\"]]\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","b72879a8":"# Train setleri ile basit do\u011frusal regresyon model kurulum i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\nreg_model = LinearRegression()\nreg_model.fit(X_train, y_train)","c3f4c7cc":"# Basit Do\u011frusal Regresyonun model denklemi (form\u00fcl\u00fc) yazd\u0131r\u0131lm\u0131\u015ft\u0131r.\n# \u0130ntercept: Model denkleminde yer alan b0 de\u011feridir. Y\u00fckseklikde denilebilir.\n# Coef: Model denkleminde yer alan b1, b2 ... bp de\u011ferleridir.\nprint(\"Form\u00fcl: \"+str(reg_model.intercept_)+\" \"+str(reg_model.coef_)+\"x1\")","7c70c657":"# Model e\u011fitim hatas\u0131 hesaplanm\u0131\u015ft\u0131r.\ny_pred = reg_model.predict(X_train)\nreg_model_basit_egitim_hata = np.sqrt(mean_squared_error(y_train, y_pred))\nreg_model_basit_egitim_hata","79858064":"# Modelin daha \u00f6nce g\u00f6rmedi\u011fi veriler \u00fczerinden test i\u015flemi ger\u00e7ekle\u015ftirilip RMSE Hata De\u011feri hesaplanm\u0131\u015ft\u0131r.\ny_pred = reg_model.predict(X_test)\nreg_model_basit_test_hata = np.sqrt(mean_squared_error(y_test, y_pred))\nreg_model_basit_test_hata","b584862e":"# Model do\u011frulama y\u00f6netmlerinden K-Fold CV y\u00f6ntemi kullan\u0131larak model do\u011frulama i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\nfrom sklearn.model_selection import cross_val_score\nprint(\"Model Do\u011frulama RMSE Hata De\u011feri:\" + str(np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))))","782797e3":"# Ba\u011f\u0131ml\u0131 ve Ba\u011f\u0131ms\u0131z de\u011fi\u015fkenler belirlenip X ve y de\u011fi\u015fkenlerine atanm\u0131\u015ft\u0131r.\n# Daha sonra ba\u011f\u0131ms\u0131z de\u011fi\u015fkenler standardize edilmi\u015ftir ancak one hot encoding k\u0131sm\u0131nda olu\u015fan yeni dummy de\u011fi\u015fkenleri standardize etmemek gerekmektedir.\n# Bu nedenle ilk \u00f6nce b\u00fct\u00fcn ba\u011f\u0131ms\u0131z de\u011fi\u015fkenler standardize edilip sonras\u0131nda dummy de\u011fi\u015fkenler 1-0 olarak d\u00f6n\u00fc\u015ft\u00fcr\u00fclm\u00fc\u015ft\u00fcr.\n# Standardize i\u015flemi sonucunda dummy de\u011fi\u015fkenlerde yer alan 0 de\u011ferleri negatfi de\u011ferlere 1 de\u011ferleri pozitif de\u011ferlere d\u00f6n\u00fc\u015ft\u00fcr\u00fclm\u00fc\u015ft\u00fcr.\n# Bu nedenle 0'dan k\u00fc\u00e7\u00fck olan de\u011ferlere 0, b\u00fcy\u00fck olan de\u011ferlere 1 de\u011feri bir for d\u00f6ng\u00fcs\u00fc yaz\u0131larak atanm\u0131\u015ft\u0131r.\ny = data[\"Salary\"]\nX = data.drop(\"Salary\",axis=1)\nX = scaler.fit_transform(X)\nfor i in range(len(X)):\n    if X[i][13]<0:\n        X[i][13]=0\n    else:\n        X[i][13]=1  \nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)","41dc41da":"# Ayr\u0131lm\u0131\u015f olan veri setinin boyutlar\u0131na eri\u015fim sa\u011flanm\u0131\u015ft\u0131r.\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","088312c4":"# Train setleri ile \u00e7oklu do\u011frusal regresyon model kurulum i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\nreg_model = LinearRegression()\nreg_model.fit(X_train, y_train)","6af8c615":"# Model denkleminde yer alan b0 de\u011feridir. Y\u00fckseklikde denilebilir.\nreg_model.intercept_","eb9b2687":"# Model denkleminde yer alan b1, b2 ... bp de\u011ferleridir.\nreg_model.coef_","7341f900":"# Model e\u011fitim hatas\u0131 hesaplanm\u0131\u015ft\u0131r.\ny_pred = reg_model.predict(X_train)\nreg_model_egitim_hata = np.sqrt(mean_squared_error(y_train, y_pred))\nreg_model_egitim_hata","66d6bb5f":"# Modelin daha \u00f6nce g\u00f6rmedi\u011fi veriler \u00fczerinden test i\u015flemi ger\u00e7ekle\u015ftirilip RMSE Hata De\u011feri hesaplanm\u0131\u015ft\u0131r.\ny_pred = reg_model.predict(X_test)\nreg_model_test_hata = np.sqrt(mean_squared_error(y_test, y_pred))\nreg_model_test_hata","3c41e228":"# Model do\u011frulama y\u00f6netmlerinden K-Fold CV y\u00f6ntemi kullan\u0131larak model do\u011frulama i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\nfrom sklearn.model_selection import cross_val_score\nprint(\"Model Do\u011frulama RMSE Hata De\u011feri:\" + str(np.sqrt(np.mean(-cross_val_score(reg_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))))","f69fc96c":"X_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.20, \n                                                    random_state=46)","9b82b26e":"ridge_model = Ridge().fit(X_train, y_train)\nridge_model.coef_","a0364d64":"ridge_model.intercept_","8fc5367f":"# Model e\u011fitim hatas\u0131 hesaplanm\u0131\u015ft\u0131r.\ny_pred = ridge_model.predict(X_train)\nridge_model_egitim_hata = np.sqrt(mean_squared_error(y_train, y_pred))\nridge_model_egitim_hata","55af3ef0":"# Modelin daha \u00f6nce g\u00f6rmedi\u011fi veriler \u00fczerinden test i\u015flemi ger\u00e7ekle\u015ftirilip RMSE Hata De\u011feri hesaplanm\u0131\u015ft\u0131r.\ny_pred = ridge_model.predict(X_test)\nridge_model_test_hata = np.sqrt(mean_squared_error(y_test, y_pred))\nridge_model_test_hata","75c54095":"# Model do\u011frulama y\u00f6netmlerinden K-Fold CV y\u00f6ntemi kullan\u0131larak model do\u011frulama i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\nfrom sklearn.model_selection import cross_val_score\nprint(\"Model Do\u011frulama RMSE Hata De\u011feri:\" + str(np.sqrt(np.mean(-cross_val_score(ridge_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))))","a5966b60":"# Kurulmu\u015f olunan modelin hiperparametre de\u011ferlerine eri\u015fim sa\u011flanm\u0131\u015ft\u0131r. \n# Hiperparametre optimizasyonunda alpha de\u011ferinin en uygun de\u011feri bulunarak final modeli kurulacakt\u0131r.\nridge_model","0f849324":"# Baz\u0131 alpha setleri haz\u0131rlan\u0131lm\u0131\u015ft\u0131r. Model i\u00e7in denenip en uygunu se\u00e7ilecektir.\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nalphas4 = [1e-15, 1e-10, 1e-8, 1e-4, 1e-3,1e-2, 1]\nalphas5 = np.arange(100,10000,10)","c26012b7":"# Belli alpha setleri denenerek final modeli i\u00e7in en uygun alpha de\u011feri belirlenecektir. Cross Validation i\u00e7in RidgeCV fonk. Kullan\u0131lmaktad\u0131r.\nfrom sklearn.linear_model import RidgeCV\nridge_cv = RidgeCV(alphas = alphas3, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train, y_train)","51d3092f":"# Final modeli i\u00e7in en uygun alpha de\u011feri se\u00e7ilmi\u015ftir.\nridge_cv.alpha_","f2629a73":"# Alpha de\u011feri de\u011fi\u015fkene atanm\u0131\u015ft\u0131r. Kar\u015f\u0131la\u015ft\u0131rma dataframene eklemek i\u00e7in. \nridge_alpha = ridge_cv.alpha_","fe39c88d":"ax = plt.gca()\nax.plot(alphas, coefs) \nax.set_xscale(\"log\")","bff1f019":"# Belirlenen alpha de\u011ferine g\u00f6re final modeli kururlmu\u015ftur.\nridge_tuned = Ridge(alpha = ridge_cv.alpha_)\nridge_tuned.fit(X_train, y_train)","1bcc3b98":"#E\u011fitim Hatas\u0131\ny_pred = ridge_tuned.predict(X_train)\nridge_final_egitim_hata = np.sqrt(mean_squared_error(y_train, y_pred))\nridge_final_egitim_hata","30b7e558":"#Test Hatas\u0131\ny_pred = ridge_tuned.predict(X_test)\nridge_final__test_hata = np.sqrt(mean_squared_error(y_test, y_pred))\nridge_final__test_hata","d1921544":"# Train setleri ile lasso regresyon model kurulum i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\nlasso_model = Lasso()\nlasso_model.fit(X_train, y_train)","70f8b3ea":"# Model denkleminde yer alan b0 de\u011feridir. Y\u00fckseklikde denilebilir.\nlasso_model.intercept_","f604c87f":"# Model denkleminde yer alan b1, b2 ... bp de\u011ferleridir.\nlasso_model.coef_","2cbedf48":"# Model e\u011fitim hatas\u0131 hesaplanm\u0131\u015ft\u0131r.\ny_pred = lasso_model.predict(X_train)\nlasso_model_egitim_hata = np.sqrt(mean_squared_error(y_train, y_pred))\nlasso_model_egitim_hata","eb3371f0":"# Modelin daha \u00f6nce g\u00f6rmedi\u011fi veriler \u00fczerinden test i\u015flemi ger\u00e7ekle\u015ftirilip RMSE Hata De\u011feri hesaplanm\u0131\u015ft\u0131r.\ny_pred = lasso_model.predict(X_test)\nlasso_model_test_hata = np.sqrt(mean_squared_error(y_test, y_pred))\nlasso_model_test_hata","54ef5773":"# Model do\u011frulama y\u00f6netmlerinden K-Fold CV y\u00f6ntemi kullan\u0131larak model do\u011frulama i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\nprint(\"Model Do\u011frulama Hatas\u0131:\" + str(np.sqrt(np.mean(-cross_val_score(lasso_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))))","9755b664":"# Kurulmu\u015f olunan modelin hiperparametre de\u011ferlerine eri\u015fim sa\u011flanm\u0131\u015ft\u0131r. \n# Hiperparametre optimizasyonunda alpha de\u011ferinin en uygun de\u011feri bulunarak final modeli kurulacakt\u0131r.\nfrom sklearn.linear_model import LassoCV\nlasso_model","fa5b2fd4":"# Baz\u0131 alpha setleri belirlenilmi\u015ftir.\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nalphas4 = [1e-15, 1e-10, 1e-8, 1e-4, 1e-3,1e-2, 1, 5, 10, 20]\nalphas5 = np.arange(100,10000,10) ","4eedef56":"# Belli alpha setleri denenerek final modeli i\u00e7in en uygun alpha de\u011feri belirlenecektir. Cross Validation i\u00e7in LassoCV fonk. Kullan\u0131lmaktad\u0131r.\nlasso_cv = LassoCV(alphas = alphas3, cv = 10)\nlasso_cv.fit(X_train, y_train)","2cd2f055":"# Final modeli i\u00e7in gerekli olan alpha belirlenilmi\u015ftir.\nlasso_cv.alpha_","0ca3b5ab":"# Alpha de\u011feri de\u011fi\u015fkene atanm\u0131\u015ft\u0131r. Kar\u015f\u0131la\u015ft\u0131rma dataframene eklemek i\u00e7in. \nlasso_alpha = lasso_cv.alpha_","96e5ad81":"# Belirlenen alpha de\u011feri ile final modeli kurulum i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\nlasso_tuned = Lasso(alpha = lasso_cv.alpha_)\nlasso_tuned.fit(X_train, y_train)","a71c1233":"#E\u011fitim Hatas\u0131\ny_pred = lasso_tuned.predict(X_train)\nlasso_final_egitim_hata = np.sqrt(mean_squared_error(y_train, y_pred))\nlasso_final_egitim_hata","45793f12":"#Test Hatas\u0131\ny_pred = lasso_tuned.predict(X_test)\nlasso_final_test_hata = np.sqrt(mean_squared_error(y_test, y_pred))\nlasso_final_test_hata","e411e29d":"# ElasticNet Model kurulum i\u015flemleri ger\u00e7ekle\u015ftirilmi\u015ftir.\nenet_model = ElasticNet()\nenet_model.fit(X_train, y_train)","be85b2fe":"# Model denkleminde yer alan b0 de\u011feridir. Y\u00fckseklikde denilebilir.\nenet_model.intercept_","2ed63efd":"# Model denkleminde yer alan b1, b2 ... bp de\u011ferleridir.\nenet_model.coef_","1ba71839":"y_pred = enet_model.predict(X_train)\nenet_model_egitim_hata = np.sqrt(mean_squared_error(y_train, y_pred))\nenet_model_egitim_hata","97096dfe":"y_pred = enet_model.predict(X_test)\nenet_model_test_hata = np.sqrt(mean_squared_error(y_test, y_pred))\nenet_model_test_hata","be24ff25":"# Model do\u011frulama i\u015flemi ger\u00e7ekle\u015ftirilmi\u015ftir.\nprint(\"Model Do\u011frulama RMSE Hata De\u011feri:\" + str(np.sqrt(np.mean(-cross_val_score(enet_model, X_train, y_train, cv = 10, scoring = \"neg_mean_squared_error\")))))","aa802bba":"enet_model","cca91950":"# Parametre de\u011ferleri belirlenmi\u015ftir.\nenet_params = {\"l1_ratio\": [0.1,0.4,0.5,0.6,0.8,1],\n              \"alpha\": np.linspace(0,1,1000)}","4ab54323":"# Belirlenen parametrelere g\u00f6re final modeli kurulacakt\u0131r.\nenet_model = ElasticNet()\nenet_model.fit(X_train, y_train)\nfrom sklearn.model_selection import GridSearchCV\ngs_cv_enet = GridSearchCV(enet_model, enet_params, cv = 5).fit(X_train, y_train)","e0bfd47d":"# En iyi parametreler belirlenilmi\u015ftir.\ngs_cv_enet.best_params_","52f29e18":"# Alpha de\u011feri de\u011fi\u015fkene atanm\u0131\u015ft\u0131r. Kar\u015f\u0131la\u015ft\u0131rma dataframene eklemek i\u00e7in. \nenet_alpha = 0.6686686686686687","cfe80b83":"# Belirlenen parametrelere g\u00f6re final modeli kurulumu yap\u0131lm\u0131\u015ft\u0131r.\nenet_tuned = ElasticNet(**gs_cv_enet.best_params_)\nenet_tuned.fit(X_train, y_train)","ad941479":"#E\u011fitim Hatas\u0131\ny_pred = enet_tuned.predict(X_train)\nenet_final_egitim_hata = np.sqrt(mean_squared_error(y_train, y_pred))\nenet_final_egitim_hata","832d11fb":"#Test Hatas\u0131\ny_pred = enet_tuned.predict(X_test)\nenet_final_test_hata = np.sqrt(mean_squared_error(y_test, y_pred))\nenet_final_test_hata","24c846b3":"modeller = [\n    reg_model,\n    ridge_tuned,\n    lasso_tuned,\n    enet_tuned,]\n\n\nfor model in modeller:\n    isimler = model.__class__.__name__\n    y_pred = model.predict(X_test)\n    hata = np.sqrt(mean_squared_error(y_test, y_pred))\n    print(\"-\"*28)\n    print(isimler + \":\" )\n    print(\"Hata:\" + str(hata))","4422cbb3":"sonuc = []\n\nsonuclar = pd.DataFrame(columns= [\"Modeller\",\"Hata\"])\n\nfor model in modeller:\n    isimler = model.__class__.__name__\n    y_pred = model.predict(X_test)\n    hata = np.sqrt(mean_squared_error(y_test, y_pred))    \n    sonuc = pd.DataFrame([[isimler, hata]], columns= [\"Modeller\",\"Hata\"])\n    sonuclar = sonuclar.append(sonuc)\n    \n    \nsns.barplot(x= 'Hata', y = 'Modeller', data=sonuclar, color=\"b\")\nplt.xlabel('Hata')\nplt.title('Modellerin Hata Oranlar\u0131');","1a15d97c":"sonuclar_data= pd.DataFrame({\"E\u011fitim Hatas\u0131\":[reg_model_basit_egitim_hata, reg_model_egitim_hata, ridge_model_egitim_hata, lasso_model_egitim_hata, enet_model_egitim_hata],\n                              \"Test Hatas\u0131\":[reg_model_basit_test_hata, reg_model_test_hata, ridge_model_test_hata, lasso_model_test_hata, enet_model_test_hata],                              \n                              \"Test Tuned Hatas\u0131\":[\"Yoktur\",\"Yoktur\",ridge_final_hata, lasso_final_test_hata,enet_final_test_hata],\n                               \"Alpha De\u011ferleri\": [\"Yoktur\", \"Yoktur\", ridge_alpha,lasso_alpha, enet_alpha]})\nsonuclar_data.index= [\"BAS\u0130T_LR_DETAY\", \"COKLU_LR_DETAY\",\"RIDGE_DETAY\",\"LASSO_DETAY\",\"ENET_DETAY\"]\nsonuclar_data","041d444d":"**2.4) Model Do\u011frulama**","497f1839":"**Ba\u011f\u0131ml\u0131 De\u011fi\u015fken:** Salary (1986-1987 sezonunda kazan\u0131lan maa\u015f(birimi: bin))\n\n**Ba\u011f\u0131ms\u0131z De\u011fi\u015fkenler:** \n\n- AtBat: 1986-1987 sezonunda bir beyzbol sopas\u0131 ile topa yap\u0131lan vuru\u015f say\u0131s\u0131\n- Hits: 1986-1987 sezonundaki isabet say\u0131s\u0131\n- HmRun: 1986-1987 sezonundaki en de\u011ferli vuru\u015f say\u0131s\u0131\n- Runs: 1986-1987 sezonunda tak\u0131m\u0131na ka\u00e7 say\u0131 kazand\u0131rd\u0131\n- RBI: Bir vurucunun vuru\u015f yapt\u0131g\u0131nda ka\u00e7 tane oyuncuya ko\u015fu yapt\u0131rd\u0131\u011f\u0131.\n- Walks: Kar\u015f\u0131 oyuncuya ka\u00e7 defa hata yapt\u0131rd\u0131\u011f\u0131\n- Years: Oyuncunun major liginde ka\u00e7 sene oynad\u0131\u011f\u0131\n- CAtBat: Oyuncunun kariyeri boyunca ka\u00e7 kez topa vurdu\u011fu\n- CHits*: Oyuncunun kariyeri boyunca ka\u00e7 kez isabetli vuru\u015f yapt\u0131\u011f\u0131\n- CHmRun*: Oyucunun kariyeri boyunca ka\u00e7 kez en de\u011ferli vuru\u015fu yapt\u0131\u011f\u0131\n- CRuns: Oyuncunun kariyeri boyunca tak\u0131m\u0131na ka\u00e7 tane say\u0131 kazand\u0131rd\u0131\u011f\u0131\n- CRBI: Oyuncunun kariyeri boyunca ka\u00e7 tane oyuncuya ko\u015fu yapt\u0131rd\u0131\u011f\u0131\n- CWalks: Oyuncun kariyeri boyunca kar\u015f\u0131 oyuncuya ka\u00e7 kez hata yapt\u0131rd\u0131\u011f\u0131\n- League: Oyuncunun sezon sonuna kadar oynad\u0131\u011f\u0131 ligi g\u00f6steren A ve N seviyelerine sahip bir fakt\u00f6r\n- Division: 1986 sonunda oyuncunun oynad\u0131\u011f\u0131 pozisyonu g\u00f6steren E ve W seviyelerine sahip bir fakt\u00f6r\n- PutOuts: Oyun icinde tak\u0131m arkada\u015f\u0131nla yard\u0131mla\u015fma\n- Assits: 1986-1987 sezonunda oyuncunun yapt\u0131\u011f\u0131 asist say\u0131s\u0131\n- Errors: 1986-1987 sezonundaki oyuncunun hata say\u0131s\u0131\n- NewLeague: 1987 sezonunun ba\u015f\u0131nda oyuncunun ligini g\u00f6steren A ve N seviyelerine sahip bir fakt\u00f6r\n\n**G\u00f6zlem Say\u0131s\u0131:** 322\n\n**De\u011fi\u015fken Say\u0131s\u0131:** 20","f4c555f7":"# **_Regresyon Modelleri ile Maa\u015f Tahmini_**","fa0ca797":"**4.5) Model Hiperparametre Optimizasyonu**","322455d5":"# **De\u011fi\u015fkenlerin Ayr\u0131nt\u0131l\u0131 \u0130ncelenmesi**","7571a971":"**Ayk\u0131r\u0131 De\u011fer Sorgulamas\u0131**","02b872d7":"**3.7) Final Model E\u011fitim ve Test Hatas\u0131**","8e514cdd":"**5.7) Final Modeli E\u011fitim ve Test Hatas\u0131**","7d4c1498":"### **3) Ridge Regresyon**","5d98e9f6":"# **Do\u011frusal Regresyon Modelleri ile Modelleme**","d93c6953":"**5.5) Model Hiperparametre Optimizasyonu**","39203255":"**1.2) E\u011fitim Hatas\u0131**","7887a9ab":"**4.3) Test Hatas\u0131**","4212d188":"**Eksik De\u011fer Sorgulamas\u0131**","9bed160b":"**1.4) Model Do\u011frulama(K-Fold CV)**","49503496":"**4.4) Model Do\u011frulama**","1968524e":"**3.3) Test Hatas\u0131**","a37f33ee":"### **4) Lasso Regresyon**","cf4f72ab":"**5.3) Test Hatas\u0131**","b24f5731":"**4.1) Model Kurulum**","dc005411":"**3.2) E\u011fitim Hatas\u0131**","47d8e487":"**3.6) Model Tuning(Hiperparametre Optimizasyonu sonras\u0131nda Final Model Kurulumu)**","a6a945bf":"**One Hot Encoding D\u00f6n\u00fc\u015f\u00fcm\u00fc**","0a2679d9":"**2.1) Model Kurulum**","c11ec0d5":"**4.6) Model Tuning(Hiperparametre Optimizasyonu sonras\u0131nda Final Model Kurulumu)**","8ce2e4f8":"**5.2) E\u011fitim Hatas\u0131**","9f641b35":"**5.4) Model Do\u011frulama**","fb16017f":"**3.5) Model Hiperparametre Optimizasyonu**","17778611":"**3.4) Model Do\u011frulama**","f1318830":"### **1) Basit Do\u011frusal Regresyon**","466a2f71":"### **2) \u00c7oklu Do\u011frusal Regresyon**","5fbfecd2":"# **Korelasyon \u0130ncelemesi**","aaa01c43":"**4.7) Final Modeli E\u011fitim ve Test Hatas\u0131**","b740b73e":"# **Ke\u015fif\u00e7i Veri Analizi**","6f7305d6":"### **4) Modellerin Kar\u015f\u0131la\u015ft\u0131r\u0131lmas\u0131**","c233ea01":"**Verilerin Standartla\u015ft\u0131r\u0131lmas\u0131**","9459ed5c":"**1.1) Model Kurulum**","dcce5a97":"**4.2) E\u011fitim Hatas\u0131**","6ca6205a":"**5.1) Model Kurulum**","aa32cf09":"**1.3) Test Hatas\u0131**","a39eaa1a":"*Veri setinde maa\u015f de\u011fi\u015fkeniyle y\u00fcksek korelasyon ili\u015fkisi olan oyuncunun kariyerine ba\u011fl\u0131 de\u011fi\u015fkenler ve oyuncunun ligde oynad\u0131\u011f\u0131 s\u00fcresi yer almaktad\u0131r. \nBu durumda kariyere ba\u011fl\u0131 de\u011fi\u015fkenler\/kariyer s\u00fcresi yap\u0131l\u0131rsa oyuncu i\u00e7in ortalama de\u011ferler elde edilerek mant\u0131kl\u0131 yeni de\u011fi\u015fkenler olu\u015fturulabilir.*","a4d3f7e3":"**3.1) Model Kurulum**","36c28736":"# **Veri \u00d6n \u0130\u015fleme**","f2539a5c":"### **5)ElasticNet Regresyon**","c6b768fd":"Regresyon modelleri kullan\u0131larak maa\u015f tahminleme \u00fczerine bir proje ger\u00e7ekle\u015ftirilecektir. \nAma\u00e7 beyzbol oyuncular\u0131n\u0131n maa\u015flar\u0131n\u0131 tahmin edecek bir makine \u00f6\u011frenmesi modeli geli\u015ftirmektir.\n\n**Uygulanacak Regresyon Modelleri**\n\n- Do\u011frusal Regresyon\n- Ridge Regresyon\n- Lasso Regresyon\n- ElasticNet Regresyon","dd9d22d9":"**2.3) Test Hatas\u0131**","f943416a":"**5.6) Hiperparametre Optimizasyonu sonras\u0131nda Final Model Kurulumu (Model Tuning)**","4caa829d":"**2.2) E\u011fitim Hatas\u0131**"}}