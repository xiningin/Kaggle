{"cell_type":{"45de648b":"code","36e902b4":"code","aef8118a":"code","cbeb1d8c":"code","e329989d":"code","da035fd6":"code","cdb8b344":"code","2557435e":"code","23b4eec1":"code","344422e8":"code","d3a12092":"code","b70133a5":"markdown","4ee9381d":"markdown","6872bd14":"markdown","c80896f3":"markdown","2cc45c93":"markdown","2b3a26b6":"markdown","2aa995cf":"markdown","4a6b02a5":"markdown","97e8de24":"markdown","a3d60dda":"markdown"},"source":{"45de648b":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","36e902b4":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","aef8118a":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","cbeb1d8c":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","e329989d":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","da035fd6":"nRowsRead = None # specify 'None' if want to read whole file\n# data.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/data.csv', delimiter=',', nrows = nRowsRead).drop(\"Unnamed: 0\", 1)\ndf1.dataframeName = 'data.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","cdb8b344":"df1","2557435e":"df1.describe()","23b4eec1":"plotPerColumnDistribution(df1, 10, 5)","344422e8":"plotCorrelationMatrix(df1, 8)","d3a12092":"plotScatterMatrix(df1, 20, 10)","b70133a5":"There is 1 csv file in the current version of the dataset:\n","4ee9381d":"Let's take a quick look at what the data looks like:","6872bd14":"Correlation matrix:","c80896f3":"### Let's check our file: \/kaggle\/input\/data.csv","2cc45c93":"## Exploratory Analysis","2b3a26b6":"The functions below create visualizations for exploratory data analysis","2aa995cf":"## Setup\nTo begin this exploratory analysis, we first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made.","4a6b02a5":"Distribution graphs (histogram\/bar graph) of sampled columns:","97e8de24":"Statistical analysis ","a3d60dda":"Scatter and density plots:"}}