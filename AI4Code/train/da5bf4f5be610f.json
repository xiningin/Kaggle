{"cell_type":{"02131693":"code","2447e267":"code","bd91e5e0":"code","35573b9a":"code","d0eb7a23":"code","7e6aa626":"code","c69ceedf":"code","4f5f4e68":"code","f2dbdb68":"code","bf6ec96d":"code","76fc8e14":"code","29c58925":"code","a61f82a9":"code","f80a9fe0":"code","5855d640":"code","9b2ecb11":"code","19702224":"markdown","57d0b6c6":"markdown","5db0da2e":"markdown","e078ad7c":"markdown","a191f681":"markdown","59359f5e":"markdown","86870141":"markdown","468a647f":"markdown","7854d5b9":"markdown","b84f26fc":"markdown","3e924641":"markdown","9ba06168":"markdown","7f5dce29":"markdown","3886a2e2":"markdown","816b13c9":"markdown"},"source":{"02131693":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Convolution2D, MaxPooling2D, Dense, Dropout, Activation, Flatten\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2447e267":"train_df = pd.read_csv(\"..\/input\/train.csv\")\nprint(\"Shape of train.csv file \",train_df.shape)\ntest_df = pd.read_csv(\"..\/input\/test.csv\")\nprint(\"Shape of test.csv file\", test_df.shape)\ntrain_df.sample(5)\ntest_df.sample(5)","bd91e5e0":"Y_train = train_df.iloc[:, 0].values\nX_train = train_df.iloc[:, 1:].values\nX_test = test_df.iloc[:, 0:].values\nX_train = X_train.astype('float32')","35573b9a":"print(\"training data: {}\".format(X_train.shape))\nprint(\"training labels {}\".format(Y_train.shape))","d0eb7a23":"img_width=28\nimg_height=28\nimg_depth=1\n\nX_train = X_train.reshape(len(X_train), img_width, img_height, img_depth)\nX_test = X_test.reshape(len(X_test), img_width, img_height, img_depth)\nX_train = X_train.astype('float32')\nX_test = X_test.astype('float32')\n\nX_train \/= 255\nX_test \/= 255\n\nprint(\"Training matrix shape\", X_train.shape)\nprint(\"Testing matrix shape\", X_test.shape)","7e6aa626":"plt.figure(figsize=(12,10))","c69ceedf":"for i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.imshow(X_train[i].reshape(28,28), cmap='gray', interpolation='none')\n    plt.title(\"Class {}\".format(Y_train[i]))","4f5f4e68":"Y_train = to_categorical(Y_train, num_classes=10)","f2dbdb68":"model = Sequential()\nmodel.add(Convolution2D(32,(3, 3), activation='relu', input_shape=(28,28, 1)))\nmodel.add(Convolution2D(32, (3, 3), activation='relu', input_shape=(28,28, 1)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n \nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\n","bf6ec96d":"model.summary()","76fc8e14":"model.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])","29c58925":"saved_path='cnn_model.h5'\nmodel_checkpoint = ModelCheckpoint(filepath=saved_path, monitor='val_loss', verbose=1, save_best_only=True, mode='auto')\nearly_stop = EarlyStopping(monitor='val_loss', min_delta=0.5, patience=6, verbose=1, mode='auto')\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=5, min_lr=0.001, mode='auto')\ncallback_list = [model_checkpoint, early_stop, reduce_lr]\n\ntrain_history = model.fit(X_train, Y_train, batch_size=32, \n                          epochs=15, verbose=1, callbacks=callback_list, validation_split=0.2)","a61f82a9":"model = load_model('cnn_model.h5')\nlabels = model.predict_classes(X_test)","f80a9fe0":"plt.figure(figsize=(12,10))\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.imshow(X_test[i].reshape(28,28), cmap='gray', interpolation='none')\n    plt.title(\"predicted class {}\".format(labels[i]))","5855d640":"submit_df = pd.DataFrame({'ImageId': list(range(1, 28001)), 'Label': labels})","9b2ecb11":"submit_df.to_csv('submit.csv', index=False)","19702224":"Firstly, let's import train and test file and look at their shape. The sample method will show the sample data of the provided dataframe.","57d0b6c6":"**Iloc** method returns the Series based on provided indices.  X_train stores the array of all values of pixels while Y_train stores the array of labels. And, we convert the type of X_train dataframe to float32. ","5db0da2e":"to_categorical converts a class vector (integers) to binary class matrix.","e078ad7c":"So, now we will submit our result through csv file.\nFirst step is to create a dataframe and conversion of the dataframe to csv file is done.","a191f681":"Okay, let's check our train data before doing anything to make sure we have valid input data.","59359f5e":"Did you notice the change in shape? The column of the X_train dataframe reduced by 1. ;) ","86870141":"Now, let's have a peak at our model.","468a647f":"So, it's time for stacking the layers into our model. Here, we will be using the Convolution2D. ","7854d5b9":"So, we use categorical_crossentropy for loss and adam optimizer for optimization.","b84f26fc":"Let's check if our results are valid.","3e924641":"Reshaping of dataframe is done with reshape method. Division changes the pixel values ranging from 0 to 1.","9ba06168":"Finally, we have come to the important step here. We will be fitting our model .","7f5dce29":"Now, let's do the fun part. **Prediction**.","3886a2e2":"Now, we will train the model and predict the given digits.","816b13c9":"Seems okay, doesn't it?"}}