{"cell_type":{"ebcf87ea":"code","fecc2b86":"code","d3275dec":"code","336dad81":"code","7e783e03":"code","f77c2e7a":"code","70b339d7":"code","4052942c":"code","203726fe":"code","9b8a3649":"code","8c77c513":"code","05aa0df3":"code","e2bd6831":"code","e14aa2b1":"code","574d192c":"code","bcb5c2a5":"code","75c0b2ce":"code","7a3076eb":"code","76b5e9d5":"code","ed434ca1":"code","2e636072":"code","4e148656":"code","cca8d064":"code","5b8f67a6":"code","a1446c96":"code","ce4e4895":"code","8b6fd35b":"code","fb0ee0d7":"code","6857ed7e":"code","345ca9fc":"code","00f0e261":"code","314dc334":"code","25afb8a5":"code","33f13c07":"code","a59bb349":"code","055f4692":"code","095be132":"code","255efda8":"code","1de1d109":"code","c396f4d9":"markdown","b0170155":"markdown","a4ed440a":"markdown","1e9a158d":"markdown","7c37b2ea":"markdown","b55a20bc":"markdown","165e2557":"markdown","97f11a6b":"markdown","0b763c96":"markdown","d05deb06":"markdown","0497c809":"markdown","6b1936e2":"markdown","f2519bc6":"markdown","6bf94c58":"markdown","2a71f438":"markdown","608ecdf4":"markdown","123d80c3":"markdown","c8782f8d":"markdown","9d86d118":"markdown","fc6cb741":"markdown"},"source":{"ebcf87ea":"!pip install dtreeviz\n!pip install -Uqq fastbook\nimport fastbook\n\nfrom fastbook import *\nfrom fastai.tabular.all import *\nfrom pandas.api.types import is_string_dtype, is_numeric_dtype, is_categorical_dtype\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom dtreeviz.trees import *\nfrom IPython.display import Image, display_svg, SVG\n\npd.options.display.max_rows = 20\npd.options.display.max_columns = 8","fecc2b86":"train = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/train.csv', low_memory=False)\ntest = pd.read_csv('\/kaggle\/input\/bike-sharing-demand\/test.csv', low_memory=False)\nsubmission = pd.read_csv('..\/input\/bike-sharing-demand\/sampleSubmission.csv', low_memory=False)\ntrain.head(1)","d3275dec":"train.tail(1)","336dad81":"len(train.columns), len(test.columns)","7e783e03":"train.columns","f77c2e7a":"test.columns","70b339d7":"train.season.unique(), train.holiday.unique(), train.weather.unique(), train.workingday.unique()","4052942c":"train.dtypes","203726fe":"dep_var = 'count'\ntrain[dep_var] = np.log(train[dep_var])\n# test[dep_var] = np.log(test[dep_var])","9b8a3649":"train = add_datepart(train, 'datetime')\ntest = add_datepart(test, 'datetime')","8c77c513":"train.columns","05aa0df3":"for i in train.columns[train.columns.str.contains('datetime')]:\n    print('\\n'+i+': '+str(train[i].unique()))","e2bd6831":"len(train.columns), len(test.columns)","e14aa2b1":"procs = [Categorify, FillMissing]","574d192c":"train.columns[train.columns.str.contains('datetime', case=False)]","bcb5c2a5":"# train.drop(columns=['casual', 'registered'], inplace=True)","75c0b2ce":"len(train.columns), len(test.columns)","7a3076eb":"cond = (train.datetimeYear<2011) | (train.datetimeMonth<8)\ntrain_idx = np.where( cond)[0]\nvalid_idx = np.where(~cond)[0]\n\nsplits = (list(train_idx),list(valid_idx))\n'training: ', len(train_idx), 'validation: ', len(valid_idx)","76b5e9d5":"cont,cat = cont_cat_split(train, 1, dep_var=dep_var)","ed434ca1":"to = TabularPandas(train, procs, cat, cont, y_names=dep_var, splits=splits)","2e636072":"dls = to.dataloaders(bs=64)","4e148656":"dls.show_batch()","cca8d064":"xs, y = to.train.xs, to.train.y\nvalid_xs,valid_y = to.valid.xs,to.valid.y","5b8f67a6":"model = DecisionTreeRegressor(max_leaf_nodes=4)\nmodel.fit(xs, y);","a1446c96":"draw_tree(model, xs, size=10, leaves_parallel=True, precision=2)","ce4e4895":"idx = np.random.permutation(len(y))[:500]\ndtreeviz(model, xs.iloc[idx], y.iloc[idx], xs.columns, dep_var,\n        fontname='DejaVu Sans', scale=1.6, label_fontsize=10,\n        orientation='LR')","8b6fd35b":"def r_mse(pred,y): \n    return round(math.sqrt(((pred-y)**2).mean()), 6)\n\ndef m_rmse(m, xs, y): \n    return r_mse(m.predict(xs), y)","fb0ee0d7":"def rf(xs, y, n_estimators=40, max_samples=4507,\n       max_features=0.5, min_samples_leaf=5, **kwargs):\n    return RandomForestRegressor(n_jobs=-1, n_estimators=n_estimators,\n        max_samples=max_samples, max_features=max_features,\n        min_samples_leaf=min_samples_leaf, oob_score=True).fit(xs, y)","6857ed7e":"# model = rf(xs, y);\n# m_rmse(model, xs, y), m_rmse(model, valid_xs, valid_y)\nmodel = tabular_learner(dls, metrics=accuracy)","345ca9fc":"model.fit_one_cycle(1)","00f0e261":"model.show_results()","314dc334":"test.columns","25afb8a5":"train.columns","33f13c07":"test_df = train.copy()\ntest_df.drop(['count'], axis=1, inplace=True)\ndl = model.dls.test_dl(test_df)","a59bb349":"preds = model.get_preds(dl=dl)","055f4692":"# randomforest_preds = model.predict(test)","095be132":"preds[0][:6492]","255efda8":"preds_l = [float(i) for i in preds[0]]\npreds_l","1de1d109":"submission['count'] = np.exp(preds_l[:6493])\nsubmission.to_csv('submission.csv', index=False)","c396f4d9":"`xs` denotes the independent variable and `y` the dependent.","b0170155":"### Creating Decision Tree","a4ed440a":"You are provided hourly rental data spanning two years. For this competition, the training set is comprised of the first 19 days of each month, while the test set is the 20th to the end of the month. You must predict the total count of bikes rented during each hour covered by the test set, using only information available prior to the rental period.","1e9a158d":"### TabularPandas & TabularProcs\n`TabularPandas` provides a wrapper around a standard Pandas DataFrame to help with missing values. To use `TabularPandas`, `TabularProcs` must be use to tell FastAI how to handle the missing values, the ones used here are `Categorify` and `FillMissing`.\n\n`Categorify`: replace a column with a categorical one\n\n`FillMissing`: replaces missing values with the median of that column\n\n\n`TabularPandas` also handle the splitting of the training and validation sets, because this a time series prediction where the goal is to know how many bikes will be a at a station in the future, the validation set must be the latter portion of the set as we need this to verify the predictions.","7c37b2ea":"Training spans from the 1st day of each month to the 19th. The test set begins on the 20th to the end of the month.","b55a20bc":"- write on this","165e2557":"![image.png](attachment:image.png)","97f11a6b":"## Random Forests","0b763c96":"This plot shows the data distribution of each split. This can help in finding outliers in the data that may be skewing the predictions. The top node is the model's state before any data splits have been made. This node will predict the average of the whole set.","d05deb06":"### Submission","0497c809":"### Column Metadata\n\n1. `datetime`: hourly date + timestamp  \n\n1. `season`:  \n    - `1` = spring \n    - `2` = summer\n    - `3` = fall\n    - `4` = winter \n\n1. `holiday`: whether the day is considered a holiday\n\n1. `workingday`: whether the day is neither a weekend nor holiday\n\n1. `weather`:\n    - `1`: Clear, Few clouds, Partly cloudy, Partly cloudy\n    - `2`: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n    - `3`: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\n    - `4`: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog \n\n\n1. `temp`: temperature in Celsius\n\n1. `atemp`: \"feels like\" temperature in Celsius\n\n1. `humidity`: relative humidity\n\n1. `windspeed`: wind speed\n\n1. `casual`: number of non-registered user rentals initiated\n\n1. `registered`: number of registered user rentals initiated\n\n1. `count`: number of total rentals\n","6b1936e2":"The choice of split below was not terribly scientific; I roughly split the set into a 60:40 split in favour of training set.","f2519bc6":"The columns below seem to be the only categorical columns, all having less than 4 discrete levels.","6bf94c58":"All data types seem to fit well into their descriptions except for `datetime` which needs to be converted into a `pd.Datetime` object.","2a71f438":"The visualisation below shows what factors that cause a split and gives a better insight into what is actually happening.","608ecdf4":"## Decision Trees\nDecision trees perfrom well with structured data like this dataset so it seems the obvious approach. It relies on a series of binary questions that tree asks to exclude certain possibilities, as we descend the tree the questions get more specific to narrow the prediction, similar to a game of 20 questions.","123d80c3":"The function below splits the continuous and categorical columns for `TabularPandas` to understand.","c8782f8d":"The `add_datepart` function has created additional date columns. Prining out all unique values of the datepart shows a combination if continuous and categorical variables.","9d86d118":"### Date Parsing\nDates are unlike most data types as they can seen as both continuous and categorical variables. Each date can be categorised into weekday\/weekend or holiday\/non-holiday and at the same time we can use the day of the month as a number. This gives dates the bonus of being able to create more data from data.\n- ordinality\n\n\nDates are usually a hassle to work with but, FastAI comes with a nifty function that does a lot of the date parsing for us.","fc6cb741":"The number of bikes at the station is what needs to be predicted, this is represented as the `count` column and is the dependent variable. The dataset specifies to use the RMSLE (Root Mean Squared Log Error) as the loss function."}}