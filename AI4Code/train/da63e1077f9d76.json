{"cell_type":{"5c27ba9a":"code","e2b3f20b":"code","eaabc6dc":"code","d39e502b":"code","411e9b67":"code","763dbc1c":"code","b7050423":"code","78270a28":"code","d60a6c00":"code","3c224839":"code","33bb1846":"code","53c7d664":"code","2cb9df8e":"code","5e4d6ab1":"code","a4245a70":"code","8646ed80":"code","f39ba757":"code","d00fc360":"code","8c6cc373":"code","0971676c":"code","c71be12d":"code","7e795742":"code","c87c4d29":"code","f8df8c46":"code","932eee94":"code","aa1ed7d0":"code","54fd3e41":"code","73f639ee":"code","35c7cbcc":"code","3432472f":"code","589e7486":"code","2fae6464":"code","6f1f1d4e":"code","72ca4317":"code","b70072f6":"code","56ecceec":"code","96b97a92":"code","e1f16b27":"code","e6d0ae69":"code","086843c8":"code","1646f3fa":"code","7a77d4ac":"code","a832e7af":"code","8a5bfa43":"code","f94c9879":"code","c0bfc950":"code","bb7a0925":"code","9e654596":"code","f3577092":"code","2f8c7d64":"code","a176444c":"code","3087ad6a":"code","7c97fb65":"code","5c02e824":"code","14a91392":"code","b20a46b2":"code","8fcaf9aa":"code","7d30061f":"code","6a496410":"code","0898244f":"code","b9acce96":"code","bf5e9493":"code","ee35ebff":"code","eba8c173":"code","f9ff1981":"code","f15a9554":"code","9754264e":"code","bf2b641d":"code","c6bcb03c":"code","6dec1df5":"code","55a471fb":"code","ce5081ed":"code","7fc7f5ba":"code","057df73a":"code","6bb430d6":"code","bb7b9237":"code","dfeb3bd5":"code","59fe4af9":"code","4e032c83":"code","936dc62f":"code","d18c8dfb":"code","2b245ce0":"code","0101afc9":"code","fbfbcb26":"markdown","eb39a6f0":"markdown"},"source":{"5c27ba9a":"import pandas as pd\nimport numpy as np","e2b3f20b":"import os","eaabc6dc":"os.getcwd()","d39e502b":"train=pd.read_csv(\"..\/input\/janatahack-healthcare-analytics-part-2\/train.csv\")","411e9b67":"train.info()","763dbc1c":"train.describe()","b7050423":"train.isnull().sum()","78270a28":"test=pd.read_csv(\"..\/input\/janatahack-healthcare-analytics-part-2\/test.csv\")","d60a6c00":"test.info()","3c224839":"test.describe()","33bb1846":"test.isnull().sum()","53c7d664":"train.isnull().sum()","2cb9df8e":"train.shape","5e4d6ab1":"test.shape","a4245a70":"train.columns","8646ed80":"test.columns","f39ba757":"train_df=train.drop(['Stay'],axis=1)","d00fc360":"train_df.columns","8c6cc373":"train_df['flag']=1","0971676c":"train_df.head(2)","c71be12d":"test_df=test","7e795742":"test_df['flag']=0","c87c4d29":"test_df.head(2)","f8df8c46":"clean=pd.concat([train_df,test_df])","932eee94":"clean","aa1ed7d0":"clean.columns","54fd3e41":"clean.drop(['case_id'],axis=1,inplace=True)","73f639ee":"clean.columns","35c7cbcc":"clean.drop(['patientid'],axis=1,inplace=True)","3432472f":"clean.columns","589e7486":"clean.shape","2fae6464":"clean.isnull().sum()","6f1f1d4e":"for column in ['Bed Grade','City_Code_Patient' ]:\n    clean[column].fillna(clean[column].mode()[0], inplace=True)","72ca4317":"clean.isnull().sum()","b70072f6":"clean.columns","56ecceec":"train_set=clean.loc[clean['flag']==1]","96b97a92":"train_set.shape","e1f16b27":"test_set=clean.loc[clean['flag']==0]","e6d0ae69":"test_set.shape","086843c8":"train_set.columns","1646f3fa":"train_set.shape","7a77d4ac":"train_set.drop('flag',axis=1,inplace=True)","a832e7af":"train_set.shape","8a5bfa43":"test_set.shape","f94c9879":"test_set.columns","c0bfc950":"test_set.drop('flag',axis=1,inplace=True)","bb7a0925":"train_set.head(2)","9e654596":"train_set['Hospital_code'] = train_set['Hospital_code'].astype('category')\ntrain_set['Hospital_type_code'] = train_set['Hospital_type_code'].astype('category')\ntrain_set['City_Code_Hospital'] = train_set['City_Code_Hospital'].astype('category')\ntrain_set['Hospital_region_code'] = train_set['Hospital_region_code'].astype('category')\ntrain_set['Department'] = train_set['Department'].astype('category')\ntrain_set['Ward_Type'] = train_set['Ward_Type'].astype('category')\ntrain_set['Ward_Facility_Code'] = train_set['Ward_Facility_Code'].astype('category')\ntrain_set['Bed Grade'] = train_set['Bed Grade'].astype('category')\ntrain_set['City_Code_Patient'] = train_set['City_Code_Patient'].astype('category')\ntrain_set['Type of Admission'] = train_set['Type of Admission'].astype('category')\ntrain_set['Severity of Illness'] = train_set['Severity of Illness'].astype('category')\ntrain_set['Age'] = train_set['Age'].astype('category')","f3577092":"from sklearn.preprocessing import LabelEncoder \n","2f8c7d64":"le = LabelEncoder() ","a176444c":"train_set= pd.get_dummies(train_set)","3087ad6a":"train_set.columns","7c97fb65":"train_set.info()","5c02e824":"train_set.shape","14a91392":"train_set.info()","b20a46b2":"training_set=pd.concat([train_set,train['Stay']],axis=1)","8fcaf9aa":"training_set.head(2)","7d30061f":"from sklearn.model_selection import train_test_split","6a496410":"x=training_set.loc[:, training_set.columns != 'Stay']\n","0898244f":"y=training_set['Stay']","b9acce96":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=101)","bf5e9493":"x_train.columns","ee35ebff":"x_test.head(2)","eba8c173":"y_train.head()","f9ff1981":"y_test.head()","f15a9554":"from numpy import mean\nfrom numpy import std\nfrom sklearn.datasets import make_classification\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom matplotlib import pyplot\n","9754264e":"from sklearn.metrics import accuracy_score","bf2b641d":"# define dataset\n#X, y = make_classification(n_samples=1000, n_features=10, n_informative=5, n_redundant=5, random_state=1)\n# evaluate the model\nmodel = LGBMClassifier()\n#cv = RepeatedStratifiedKFold(n_splits=3, n_repeats=3, random_state=1)\n#n_scores = cross_val_score(model, x_train, y_train, scoring='accuracy', cv=cv, error_score='raise')\n#print('Accuracy: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))\n# fit the model on the whole dataset\nmodel.fit(x_train, y_train)\n# make a single prediction\npredict = model.predict(x_test)\nprint(accuracy_score(y_test,predict))","c6bcb03c":"# define dataset\n#X, y = make_classification(n_samples=1000, n_features=10, n_informative=5, n_redundant=5, random_state=1)\n# evaluate the model\nmodel = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,\n               importance_type='split', learning_rate=0.1, max_depth=-1,\n               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n               n_estimators=100, n_jobs=-1, num_leaves=100, objective=None,\n               random_state=None, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n               subsample=1.0, subsample_for_bin=200000, subsample_freq=0, max_bin= 100)\n\nmodel.fit(x_train, y_train)\n# make a single prediction\npredict = model.predict(x_test)\nprint(accuracy_score(y_test,predict))","6dec1df5":"# define dataset\n#X, y = make_classification(n_samples=1000, n_features=10, n_informative=5, n_redundant=5, random_state=1)\n# evaluate the model\nmodel = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,\n               importance_type='split', learning_rate=0.1, max_depth=-1,\n               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n               n_estimators=100, n_jobs=-1, num_leaves=100, objective=None,\n               random_state=None, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n               subsample=1.0, subsample_for_bin=300000, subsample_freq=0, max_bin= 100)\n\nmodel.fit(x_train, y_train)\n# make a single prediction\npredict = model.predict(x_test)\nprint(accuracy_score(y_test,predict))","55a471fb":"import pandas as pd\nimport numpy as np\npred=pd.DataFrame(predict)","ce5081ed":"test_set.head(2)","7fc7f5ba":"test_set['Hospital_code'] = test_set['Hospital_code'].astype('category')\ntest_set['Hospital_type_code'] = test_set['Hospital_type_code'].astype('category')\ntest_set['City_Code_Hospital'] = test_set['City_Code_Hospital'].astype('category')\ntest_set['Hospital_region_code'] = test_set['Hospital_region_code'].astype('category')\ntest_set['Department'] = test_set['Department'].astype('category')\ntest_set['Ward_Type'] = test_set['Ward_Type'].astype('category')\ntest_set['Ward_Facility_Code'] = test_set['Ward_Facility_Code'].astype('category')\ntest_set['Bed Grade'] = test_set['Bed Grade'].astype('category')\ntest_set['City_Code_Patient'] = test_set['City_Code_Patient'].astype('category')\ntest_set['Type of Admission'] = test_set['Type of Admission'].astype('category')\ntest_set['Severity of Illness'] = test_set['Severity of Illness'].astype('category')\ntest_set['Age'] = test_set['Age'].astype('category')","057df73a":"test_set1= pd.get_dummies(test_set)","6bb430d6":"test_set1.columns","bb7b9237":"pred= model.predict(test_set1)","dfeb3bd5":"final_predictions=pd.DataFrame(pred)","59fe4af9":"final_predictions.columns=['Stay']","4e032c83":"Submission=pd.concat((test['case_id'],final_predictions['Stay']),axis=1)","936dc62f":"import os","d18c8dfb":"os.getcwd()","2b245ce0":"Submission.to_csv(\"submission.csv\",index=False)","0101afc9":"model1 = LGBMClassifier(boosting_type='gbdt', colsample_bytree=0.8,\n               learning_rate=0.04,min_child_samples=228,\n               n_estimators=50000, n_jobs=-1, objective='multi_class',\n               reg_alpha=1, reg_lambda=1,\n               max_bin= 63,num_class=11 )\n\nmodel.fit(x_train, y_train)\n# make a single prediction\npredict = model.predict(x_test)\nprint(accuracy_score(y_test,predict))","fbfbcb26":"Recent Covid-19 Pandemic has raised alarms over one of the most overlooked area to focus: Healthcare Management. While healthcare management has various use cases for using data science, patient length of stay is one critical parameter to observe and predict if one wants to improve the efficiency of the healthcare management in a hospital. \nThis parameter helps hospitals to identify patients of high LOS risk (patients who will stay longer) at the time of admission. Once identified, patients with high LOS risk can have their treatment plan optimized to miminize LOS and lower the chance of staff\/visitor infection. Also, prior knowledge of LOS can aid in logistics such as room and bed allocation planning.\nSuppose you have been hired as Data Scientist of HealthMan \u2013 a not for profit organization dedicated to manage the functioning of Hospitals in a professional and optimal manner.\nThe task is to accurately predict the Length of Stay for each patient on case by case basis so that the Hospitals can use this information for optimal resource allocation and better functioning. The length of stay is divided into 11 different classes ranging from 0-10 days to more than 100 days.\n \nData Description\n\nTrain.zip contains 1 csv alongside the data dictionary that contains definitions for each variable\ntrain.csv \u2013 File containing features related to patient, hospital and Length of stay on case basis\ntrain_data_dict.csv \u2013 File containing the information of the features in train file\n\nTest Set\ntest.csv \u2013 File containing features related to patient, hospital. Need to predict the Length of stay for each case_id\n\n\nSample Submission:\ncase_id: Unique id for each case\nStay: Length of stay for the patient w.r.t each case id in test data\nEvaluation Metric\nThe evaluation metric for this hackathon is 100*Accuracy Score.\n\n","eb39a6f0":"Different hyper tuning parameters"}}