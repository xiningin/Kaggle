{"cell_type":{"d2ed80da":"code","9048baf1":"code","6a2c9633":"code","f0e8dc78":"code","aeb8c0c6":"code","ad7cb258":"code","fff2114a":"code","5b4bd84c":"code","d412aecc":"code","075585d2":"code","ebc23108":"code","19c9f29d":"code","8ee88262":"code","4188f498":"code","46e977a2":"code","51610e23":"code","e2424150":"code","83bed11d":"code","22b0e7aa":"code","82e083c9":"code","5eb53a08":"code","81d5a976":"code","4bb90063":"code","5336c8b3":"code","2adc412f":"code","bd678c25":"code","43a17d4c":"code","79518cdc":"code","f89df256":"code","7940bd2e":"code","67395031":"code","71af5a8d":"code","44d4616d":"code","f95e8a17":"code","50d2f0e7":"code","6882bcbe":"code","ca9db3a4":"code","157d3bf8":"code","c1219813":"code","c87f474c":"code","f93bad5d":"code","b5f50fe0":"code","2a2033a1":"code","811801cf":"code","3b35e767":"code","42d8fba1":"code","a2f0488c":"code","7327a226":"code","94c29540":"code","ce33f711":"code","12c9ae39":"code","0e832fd3":"code","46610dad":"code","b93430e0":"code","e5ad1f47":"code","f029ae3c":"code","a31ad781":"code","1a1704f2":"code","3f8d9f31":"code","038c89da":"code","06e55dfa":"code","b664249d":"code","632cbdaf":"code","5a73a52a":"code","814fa225":"code","6bcc1a3a":"code","be330f3a":"code","8305fc28":"code","bbf33f8d":"code","13ccebc9":"code","f1ecee81":"code","a56e8b9b":"code","41fff441":"code","34e810f8":"code","574103e0":"code","b48ae0e7":"code","7c995e32":"code","f493ce5b":"code","0072bb34":"code","d6632482":"code","90ce0a18":"code","ef378611":"code","e4133937":"code","6e754e59":"code","6c22fddb":"code","1e34a54b":"code","94506509":"code","dd198b67":"code","de05b276":"code","4aa4a42b":"code","4397b5cc":"code","28f72215":"code","c7d83b32":"code","c2e41672":"code","78b850d3":"code","454e7662":"code","fe16bcb9":"code","6226e773":"code","e7f95192":"code","6c274574":"code","4ab50388":"code","b8710d2e":"code","2fe86f8c":"code","65d7b6bb":"code","e2a6eee1":"code","e2e1761f":"code","7fa8dd1d":"markdown","90686fb2":"markdown","7b040a7b":"markdown","0ef1a729":"markdown","bf8c4313":"markdown","b07488b1":"markdown","2b031608":"markdown","3a45e37a":"markdown","2ebc2086":"markdown","9be8661c":"markdown","94f2fbf7":"markdown","5b573191":"markdown","cc89f88a":"markdown","fa4e7633":"markdown","866bbee3":"markdown","629b10d7":"markdown","732a7259":"markdown"},"source":{"d2ed80da":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n#\uc0ac\uc18c\ud55c Error\uba54\uc2dc\uc9c0 \uc81c\uac70\nimport warnings\nwarnings.filterwarnings(action='ignore')","9048baf1":"#\ud6c8\ub828\ub370\uc774\ud130\uc640 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc14b\uc744 \ubd88\ub7ec\uc624\uae30\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","6a2c9633":"#\ud6c8\ub828\ub370\uc774\ud130\uc14b\uc758 \ud615\ud0dc\ntrain.head()","f0e8dc78":"#\ud6c8\ub828\ub370\uc774\ud130\uc14b\uc758 \uceec\ub7fc\uc758 \uc885\ub958\uc640 \uc18d\uc131 \ubc0f \uac01 \uceec\ub7fc\uc758 \uac1c\uc218\ud655\uc778\ntrain.info()","aeb8c0c6":"def check_null(dataset):\n    df_null = pd.DataFrame(dataset.isnull().sum().sort_values(ascending=False)).reset_index()\n    df_null.columns = ['var_name','count']\n    return df_null[df_null['count']>0]","ad7cb258":"#\ud6c8\ub828\ub370\uc774\ud130 \uc14b\uc5d0 null\uac12\uc758 \uac1c\uc218\ub97c \ud30c\uc545\ncheck_null(train)","fff2114a":"#\ud14c\uc2a4\ud2b8\ub370\uc774\ud130 \uc14b\uc5d0 null\uac12\uc758 \uac1c\uc218\ub97c \ud30c\uc545\ncheck_null(test)","5b4bd84c":"#PassengerId\ub97c \uc81c\uc678\ud55c \ubaa8\ub4e0 \uceec\ub7fc\uacfc Survived[Target value]\uc640\uc758 \uc0c1\uad00\uacc4\ub97c heatmap\ud654\nfig = plt.figure()\nfig,ax = plt.subplots(figsize=[12,12])\ntrain_corr = train.drop('PassengerId',axis=1).dropna().corr()\nsns.heatmap(train_corr,annot=True,square=True,vmax=0.6,cmap=plt.cm.summer)\nplt.suptitle('Correlation Heatmap of Numeric Features',fontsize=18)","d412aecc":"n=len(train_corr.columns)\ntrain_corr.nlargest(n,columns='Survived')['Survived']","075585d2":"fig = plt.figure(figsize=[20,20])\nax = sns.pairplot(train.drop('PassengerId',axis=1).dropna(),palette={'red','blue'},hue='Survived')","ebc23108":"fig = plt.figure()\nfig,ax = plt.subplots(3,3,figsize=[15,15])\n\nsurv = train[train.Survived == 1]\nnosurv = train[train.Survived == 0]\n\nax1 = plt.subplot(3,3,1)\nax1 = sns.distplot(surv.dropna().Age,bins=range(0,surv.dropna().Age.max().astype('int')+1,1),kde=False,color='blue',label='Survived')\nax1 = sns.distplot(nosurv.dropna().Age,bins=range(0,surv.dropna().Age.max().astype('int')+1,1),kde=False,color='red',label='Died')\nax1.set_ylabel('# of Passengers')\nax1.legend()\n\nax2 = plt.subplot(3,3,2)\nax2 = sns.barplot(x='Pclass',y='Survived',data=train)\n\nax3 = plt.subplot(3,3,3)\nax3 = sns.barplot(x='SibSp',y='Survived',data=train)\n\nax4 = plt.subplot(3,3,4)\nax4 = sns.barplot(x='Parch',y='Survived',data=train)\n\nax5 = plt.subplot(3,3,5)\nax5 = sns.distplot(surv.Fare,kde=False,color='blue',label='Survived')\nax5 = sns.distplot(nosurv.Fare,kde=False,color='red',label='Died')\nax5.set_ylabel('# of Passengers')\nax5.legend()\n\nax6 = plt.subplot(3,3,6)\nax6 = sns.barplot(x='Embarked',y='Survived',data=train)\n\nax7 = plt.subplot(3,3,7)\nax7 = sns.barplot(x='Sex',y='Survived',data=train)\n\nplt.suptitle(\"Detail relationship btw Survived and various features\",fontsize=18)","19c9f29d":"#2. \ud0d1\uc2b9\uce78\uc758 \ub4f1\uae09\uacfc Survived\nfig = plt.figure()\nfig,ax = plt.subplots(1,2,figsize=[15,5])\nax1 = plt.subplot(1,3,1)\nax1 = sns.barplot(x='Pclass',y='Survived',data=train)\nax2 = plt.subplot(1,3,2)\nax2 = sns.countplot(x='Pclass',data=train)\nax3 = plt.subplot(1,3,3)\nax3 = sns.countplot(x='Pclass',hue='Survived',data=train)\n\nplt.suptitle('Detail about Pclass with Survived',fontsize=18)","8ee88262":"#3,4 SibSp, Parch\uc758 \uc778\uc6d0\uc218\uc640 Survived\ntab = pd.crosstab(train['SibSp'],train['Survived'])\nax1 = tab.div(tab.sum(1),axis=0).plot(kind='bar',stacked=True)\ntitle = ax1.title\ntitle.set_position([.5,1.2])\nax1.set_title('Survivor Ratio by # of SibSp')\nplt.suptitle(\"Survivor Ratio by # of SibSp and Parch\")\n\ntab = pd.crosstab(train['Parch'],train['Survived'])\nax2 = tab.div(tab.sum(1),axis=0).plot(kind='bar',stacked=True)\ntitle = ax2.title\ntitle.set_position([.5,1.1])\nax2.set_title('Survivor Ratio by # of Parch')","4188f498":"#\ub3c8\uc744 \ub9ce\uc774\ub0b8 \uc2b9\uac1d\uacfc Survived\uc9c0\ud45c\nfig = plt.figure()\nfig,ax = plt.subplots(1,3,figsize=[18,6])\n\nax1 = plt.subplot(1,3,1)\nax1 = sns.distplot(surv[surv.Pclass==1].Fare,color='blue',label='Survived',kde=False)\nax1 = sns.distplot(nosurv[nosurv.Pclass==1].Fare,color='red',label='Died',kde=False)\nax1.set_ylabel('# of Passengers')\nax1.set_title('Pclass 1')\nax1.legend()\n\nax2 = plt.subplot(1,3,2)\nax2 = sns.distplot(surv[surv.Pclass==2].Fare,color='blue',label='Survived',kde=False)\nax2 = sns.distplot(nosurv[nosurv.Pclass==2].Fare,color='red',label='Died',kde=False)\nax2.set_ylabel('# of Passengers')\nax2.set_title('Pclass 2')\nax2.legend()\n\nax3 = plt.subplot(1,3,3)\nax3 = sns.distplot(surv[surv.Pclass==3].Fare,color='blue',label='Survived',kde=False)\nax3 = sns.distplot(nosurv[nosurv.Pclass==3].Fare,color='red',label='Died',kde=False)\nax3.set_ylabel('# of Passengers')\nax3.set_title('Pclass 3')\nax3.legend()\n\nplt.suptitle('Passenger Insight by paid Fare',fontsize=18)","46e977a2":"fig = plt.figure()\nfig,ax = plt.subplots(1,2,figsize=[10,5])\n\nmale = train[train.Sex=='male']\nfemale = train[train.Sex=='female']\n\nmale_surv = male[male.Survived==1]\nmale_nosurv = male[male.Survived==0]\nfem_surv = female[female.Survived==1]\nfem_nosurv = female[female.Survived==0]\n\nax1 = plt.subplot(1,2,1)\nax1 = sns.distplot(male_surv.Age.dropna(),bins=range(0,surv.Age.dropna().max().astype('int')+1,1),kde=False,color='blue',label='Survived')\nax1 = sns.distplot(male_nosurv.Age.dropna(),bins=range(0,surv.Age.dropna().max().astype('int')+1,1),kde=False,color='red',label='Died')\n\nax1.set_ylabel('# of Passengers')\nax1.set_title('Age Distribution of Males by Survived')\nax1.legend()\n\nax2 = plt.subplot(1,2,2)\nax2 = sns.distplot(fem_surv.Age.dropna(),bins=range(0,nosurv.Age.dropna().max().astype('int')+1,1),kde=False,color='blue',label='Survived')\nax2 = sns.distplot(fem_nosurv.Age.dropna(),bins=range(0,nosurv.Age.dropna().max().astype('int')+1,1),kde=False,color='red',label='Died')\n\nax2.set_ylabel('# of Passengers')\nax2.set_title('Age Distribution of Females by Survived')\nax2.legend()\n\nplt.suptitle('Age Distribution by Survived value',fontsize=18)","51610e23":"fig = plt.figure()\nfig, ax = plt.subplots(1,2,figsize=[12,6])\n\n#pclass\uc640 \ud0d1\uc2b9\uc790\uc758 \uc5f0\ub839\uacfc Survived\nax1 = plt.subplot(1,2,1)\nax1 = sns.violinplot(x='Pclass',y='Age',hue='Survived',data=train,split=True)\n\n#pclass\uc640 Embarked\uc640 Survived\nax2 = sns.factorplot(x='Pclass',y='Survived',hue='Sex',col='Embarked',data=train,split=True)","e2424150":"#Pclass\ubcc4 \uc0dd\uc874\uc790 \ud604\ud669\ntab = pd.crosstab(train['Pclass'],train['Survived'])\ntab.div(tab.sum(1),axis=0).plot(kind='bar',stacked=True)","83bed11d":"#Pclass,Sex \uadf8\ub9ac\uace0 Survived\nsns.barplot(x='Pclass',y='Survived',hue='Sex',data=train)","22b0e7aa":"tab = pd.crosstab(train['Embarked'],train['Sex'])\ntab.div(tab.sum(1),axis=0).plot(kind='bar',stacked=True)","82e083c9":"tab = pd.crosstab(train['Embarked'],train['Pclass'])\ntab.div(tab.sum(1),axis=0).plot(kind='bar',stacked=True)","5eb53a08":"fig = plt.figure()\nfig, ax = plt.subplots(1,2,figsize=[12,6])\n\nax1 = plt.subplot(1,2,1)\nax1 = sns.barplot(x='Embarked',y='Survived',hue='Pclass',data=train)\n\nax2 = plt.subplot(1,2,2)\nax2 = sns.violinplot(x='Embarked',y='Age',hue='Survived',data=train,split=True) ","81d5a976":"check_null(train)","4bb90063":"check_null(test)","5336c8b3":"train.Embarked.value_counts(ascending=False).idxmax() # S 664","2adc412f":"train.loc[train.Embarked.isnull()].index","bd678c25":"train.loc[train.Embarked.isnull(),'Embarked'] = 'S'","43a17d4c":"test.loc[test.Fare.isnull(),'Fare'] = test.Fare.median()","79518cdc":"# combine = pd.concat([train,test],axis=0)\n\n# combine_null = combine[combine.Age.isnull()]\n# combine_notnull = combine[~combine.Age.isnull()]\n\n# remove_cols = ['PassengerId','Survived','Name','Ticket','Cabin']\n# new_cols = []\n# for col in list(combine.columns):\n#     if col in remove_cols:\n#         continue\n#     else:\n#         new_cols.append(col)\n# combine_null = combine_null.loc[:,new_cols]\n# combine_notnull = combine_notnull.loc[:,new_cols]\n# combine_null = combine_null.drop('Age',axis=1)\n# X_combine_notnull = combine_notnull.drop('Age',axis=1)\n# y_combine_notnull = combine_notnull['Age']","f89df256":"# for col in ['Sex','Embarked','Pclass']:\n#     combine_null[col] = combine_null[col].astype('category')\n#     X_combine_notnull[col] = X_combine_notnull[col].astype('category')\n\n# for col in ['Fare','SibSp','Parch']:\n#     if col == 'Fare':\n#         combine_null[col] = pd.to_numeric(combine_null[col])\n#         X_combine_notnull[col] = pd.to_numeric(X_combine_notnull[col])\n#     else:\n#         combine_null[col] = pd.to_numeric(combine_null[col],downcast='integer')\n#         X_combine_notnull[col] = pd.to_numeric(X_combine_notnull[col],downcast='integer')","7940bd2e":"# w_o_Pclass = pd.concat([combine_null,pd.get_dummies(combine_null.Pclass)],axis=1).drop('Pclass',axis=1)\n# w_o_Sex = pd.concat([w_o_Pclass,pd.get_dummies(combine_null.Sex)],axis=1).drop('Sex',axis=1)\n# w_o_Emb = pd.concat([w_o_Sex,pd.get_dummies(combine_null.Embarked)],axis=1).drop('Embarked',axis=1)\n# combine_null = w_o_Emb\n\n# w_o_Pclass = pd.concat([X_combine_notnull,pd.get_dummies(combine_notnull.Pclass)],axis=1).drop('Pclass',axis=1)\n# w_o_Sex = pd.concat([w_o_Pclass,pd.get_dummies(X_combine_notnull.Sex)],axis=1).drop('Sex',axis=1)\n# w_o_Emb = pd.concat([w_o_Sex,pd.get_dummies(X_combine_notnull.Embarked)],axis=1).drop('Embarked',axis=1)\n# X_combine_notnull = w_o_Emb","67395031":"# from sklearn.ensemble import RandomForestRegressor\n# rf = RandomForestRegressor(random_state=200)\n# rf.fit(X_combine_notnull,y_combine_notnull)\n# new_Age = []\n# for element in rf.predict(combine_null):\n#     new_Age.append(round(element,2))\n# new_Age = np.array(new_Age)","71af5a8d":"# combine_null = combine[combine.Age.isnull()]\n# combine_notnull = combine[~combine.Age.isnull()]\n# combine_null['Age'] = new_Age\n# combine = pd.concat([combine_notnull,combine_null],axis=0)\n# combine.drop('Cabin',axis=1,inplace=True)","44d4616d":"combine = pd.concat([train,test],axis=0)","f95e8a17":"combine.head()","50d2f0e7":"ticket = (combine.Ticket.value_counts() > 1).reset_index()\nsharedTicketList = ticket[ticket.Ticket == True]['index'].values\n\ndef SharedTicket(ticket):\n    if ticket in sharedTicketList:\n        return 1\n    else: \n        return 0","6882bcbe":"combine['Alone'] = (combine.Parch + combine.SibSp == 0)\ncombine['Family'] = (combine.Parch + combine.SibSp)\ncombine['Large_family'] = (combine.Parch + combine.SibSp > 5)\ncombine['Title'] = combine.Name.apply(lambda x:x.split(',')[1].split('.')[0].strip())\ncombine['Child'] = combine.Age < 10\ncombine['Young'] = np.logical_or(combine.Age <= 30, combine.Title.isin(['Miss','Master','Mlle']))\ncombine['Fare_cat'] = pd.DataFrame(np.floor(np.log10(combine.Fare+1))).astype('int')\ncombine['SharedTicket'] = combine.Ticket.apply(SharedTicket)\ncombine['Age_known'] = ~combine.Age.isnull()\ncombine['Cabin_known'] = ~combine.Cabin.isnull()\ncombine['Deck']= combine.Cabin.str[0]\ncombine['Deck']= combine['Deck'].fillna(value='U')","ca9db3a4":"combine.head()","157d3bf8":"neededToChange = ['Embarked','Sex','Deck']\n\nfor col in neededToChange:\n    combine[col] = combine[col].astype('category')\n    print(combine[col].cat.categories)\n\ncombine['Embarked'].cat.categories = range(0,3) # C:0,Q:1,S:2\ncombine['Embarked'] = combine['Embarked'].astype('int')\ncombine['Sex'].cat.categories = range(0,2) #female:\ncombine['Sex'] = combine['Sex'].astype('int')\ncombine['Deck'].cat.categories = range(0,9) #A:0,B:1,C:2,D:3,E:4,F:5,G:6,T:7,U:8\ncombine['Deck'] = combine['Deck'].astype('int')","c1219813":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(np.float64(combine['Fare']).reshape((len(combine['Fare']),1)))\nstd_Scaled_Fare = scaler.transform(np.float64(combine['Fare']).reshape(len(combine['Fare']),1))","c87f474c":"print(std_Scaled_Fare.min(),std_Scaled_Fare.max())","f93bad5d":"combine['std_Scaled_Fare'] = std_Scaled_Fare","b5f50fe0":"combine.columns","2a2033a1":"combine = combine[['PassengerId','Age', 'Cabin', 'Embarked', 'Fare', 'Name', 'Parch', \n       'Pclass', 'Sex', 'SibSp', 'Ticket', 'Alone', 'Family',\n       'Large_family', 'Title', 'Child', 'Young', 'Fare_cat', 'SharedTicket',\n       'Age_known', 'Cabin_known', 'Deck', 'std_Scaled_Fare','Survived']]","811801cf":"train = combine[~combine.Survived.isnull()]\ntest = combine[combine.Survived.isnull()]","3b35e767":"train.info()","42d8fba1":"test.info()","a2f0488c":"fig = plt.figure(figsize=[20,20])\ntrain_corr = train.drop('PassengerId',axis=1).corr()\nsns.heatmap(train_corr,square=True,annot=True,cmap=plt.cm.summer)","7327a226":"n=len(train_corr.columns)\ndf_train_corr = train_corr.nlargest(n,columns='Survived')['Survived'].reset_index()","94c29540":"df_train_corr","ce33f711":"features = df_train_corr[abs(df_train_corr.Survived) >0.08]['index'].values\nfeatures = [feature for feature in features if feature!='Fare']\nfeatures","12c9ae39":"plt.figure(figsize=[15,15])\nsns.heatmap(train.loc[:,features].corr(),annot=True,square=True)","0e832fd3":"features.append('PassengerId')\n\ncombine = combine.loc[:,features]\ncombine.head()","46610dad":"combine.columns","b93430e0":"combine = combine[['PassengerId', 'Cabin_known', 'Fare_cat', 'std_Scaled_Fare',\n       'SharedTicket', 'Young', 'Child', 'Age_known', 'Parch', 'Embarked',\n       'Alone', 'Deck', 'Pclass', 'Sex', 'Survived']]","e5ad1f47":"# from sklearn.preprocessing import LabelBinarizer\n\n# binarizer_output={}\n\n# neededToChange = ['Fare_cat','Parch','Pclass','Embarked','Deck']\n# for col in neededToChange:\n#     combine[col] = combine[col].astype('category')\n#     binarizer = LabelBinarizer()\n#     binarizer.fit(combine[col])\n#     print(binarizer.classes_)\n#     binarizer_output[col] = pd.DataFrame(binarizer.transform(combine[col]))","f029ae3c":"neededToChange = ['Fare_cat','Parch','Pclass','Embarked','Deck']\n\nfor col in neededToChange:\n    combine[col] = combine[col].astype('category')\n    binerized = pd.get_dummies(combine[col],prefix=col)\n    \n    combine = pd.concat([combine,binerized],axis=1)\n    combine = combine.drop(col,axis=1)","a31ad781":"combine.info()","1a1704f2":"# final_features = []\n\n# for col in combine.columns:\n#     if col in features:\n#         final_features.append(col)","3f8d9f31":"# features = features[-1::-1]\n# combine = combine.loc[:,features]","038c89da":"# combine = combine.reset_index()\n# combine.drop('index',axis=1,inplace=True)","06e55dfa":"# for col in neededToChange:\n#     combine.drop(col,axis=1,inplace=True)\n#     combine = pd.concat([combine,binarizer_output[col]],axis=1)","b664249d":"# combine['Embarked'] = combine['Embarked'].astype('category')\n# combine.Embarked.cat.categories = [0,1,2] # C,Q,S\n# combine['Embarked'] = pd.to_numeric(combine['Embarked'],downcast='integer')\n# combine['Sex'] = combine['Sex'].astype('category')\n# combine.Sex.cat.categories = [0,1] #female,male\n# combine['Sex'] = pd.to_numeric(combine['Sex'],downcast='integer')","632cbdaf":"# combine = combine[['PassengerId', 'Age', 'Embarked', 'Fare', 'Name', 'Parch', \n#        'Pclass', 'Sex', 'SibSp', 'Ticket', 'Alone', 'Family', 'Large_family',\n#        'Title', 'Child', 'Young', 'Fare_cat', 'SharedTicket','Survived']]","5a73a52a":"# train = combine.loc[~combine.Survived.isnull()]\n# test = combine.loc[combine.Survived.isnull()]\n# test.drop('Survived',axis=1,inplace=True)","814fa225":"# fig = plt.figure(figsize=[20,20])\n# train_corr = train.drop('PassengerId',axis=1).corr()\n# sns.heatmap(train_corr,square=True,annot=True,vmax=0.6,cmap=plt.cm.summer)","6bcc1a3a":"# df = train_corr.nlargest(n=15,columns='Survived')['Survived'].reset_index()\n# df = df.drop(df.loc[(df['index'] == 'Survived')].index,axis=0)\n# index = df['index']\n# ratio = df['Survived']\n# fig = plt.figure(figsize=[10,6])\n# ax = sns.barplot(x=index,y=ratio)\n# ax.set_xticklabels(ax.get_xticklabels(),rotation=30)\n# ax.set_title('Correlationship with Survived feature',fontsize=18)\n# ax.set_xlabel('Features',fontsize=14)","be330f3a":"# df_usingcol = (abs(train_corr.nlargest(n=15,columns='Survived')['Survived']) > 0.1).reset_index()\n# usingcols = list(df_usingcol[df_usingcol.Survived==True]['index'].values)\n# # usingcols.remove('SharedTicket')\n# finalcols = []\n# finalcols.append('PassengerId')\n# for col in usingcols:\n#     finalcols.append(col)","8305fc28":"# combine = pd.concat([train,test],axis=0)\n# combine = combine.loc[:,finalcols]","bbf33f8d":"# # cat_cols = ['Fare_cat','Child','Young','Alone','Pclass','Sex','Embarked']\n# cat_cols = ['Fare_cat','Pclass','Embarked']\n# for col in cat_cols:\n#     combine[col] = combine[col].astype('category')\n#     combine = pd.concat([combine,pd.get_dummies(combine[col])],axis=1)\n#     combine.drop(col,axis=1,inplace=True)","13ccebc9":"train = combine.loc[~combine.Survived.isnull()]\ntest = combine.loc[combine.Survived.isnull()]\ntest.drop('Survived',axis=1,inplace=True)","f1ecee81":"train['Survived'] = train['Survived'].astype('int')","a56e8b9b":"train = train.sort_values(by='PassengerId')\ntest = test.sort_values(by='PassengerId')","41fff441":"from sklearn.model_selection import train_test_split\nX = train.drop(['Survived','PassengerId'],axis=1)\ny = train['Survived']\ntest = test.drop('PassengerId',axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,random_state=42)","34e810f8":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold\n\nSKFold = StratifiedKFold(n_splits=5)\n\nknn = KNeighborsClassifier()\nknn_params={'n_neighbors':range(1,11,1),'weights':['distance']}\ngrid_knn = GridSearchCV(knn,knn_params,scoring='accuracy',cv=SKFold)\ngrid_knn.fit(X_train,y_train)\ngrid_knn.score(X_test,y_test)","574103e0":"from sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression()\nlr_params = {'C':[0.001,0.01,0.1,1,10,100,1000]}\ngrid_lr = GridSearchCV(lr,lr_params,scoring='accuracy',cv=SKFold)\ngrid_lr.fit(X_train,y_train)\ngrid_lr.score(X_test,y_test)","b48ae0e7":"from sklearn.svm import LinearSVC\n\nlsvc = LinearSVC()\nlsvc_params = {'C':[0.001,0.01,0.1,1,10,100,1000]}\ngrid_lsvc = GridSearchCV(lsvc,lsvc_params,scoring='accuracy',cv=SKFold)\ngrid_lsvc.fit(X_train,y_train)\ngrid_lsvc.score(X_test,y_test)","7c995e32":"from sklearn.naive_bayes import BernoulliNB\n\nnb = BernoulliNB()\nnb_params = {'alpha':[0.001,0.01,0.1,1,10,100,1000]}\ngrid_nb = GridSearchCV(nb,nb_params,scoring='accuracy',cv=SKFold)\ngrid_nb.fit(X_train,y_train)\ngrid_nb.score(X_test,y_test)","f493ce5b":"from sklearn.tree import DecisionTreeClassifier\n\ntree = DecisionTreeClassifier()\ntree_params = {'max_depth':range(1,10,1)}\ngrid_tree = GridSearchCV(tree,tree_params,scoring='accuracy',cv=SKFold)\ngrid_tree.fit(X_train,y_train)\ngrid_tree.score(X_test,y_test)","0072bb34":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(random_state=42)\nrf.fit(X_train,y_train)\nrf.score(X_test,y_test)","d6632482":"from sklearn.ensemble import GradientBoostingClassifier\n\ngb = GradientBoostingClassifier(\n learning_rate= 0.1,\n max_depth= 5,\n max_features= 'sqrt',\n min_samples_leaf= 1,\n min_samples_split= 2,\n min_weight_fraction_leaf= 0.0,\n random_state= 12,\n subsample= 1.0\n)\ngb_params = {'n_estimators':range(20,100,20)}\ngrid_gb1 = GridSearchCV(gb,gb_params,scoring='accuracy',cv=5)\ngrid_gb1.fit(X_train,y_train)","90ce0a18":"grid_gb1.cv_results_,grid_gb1.best_params_,grid_gb1.best_score_","ef378611":"from sklearn.ensemble import GradientBoostingClassifier\n\ngb = GradientBoostingClassifier(\n learning_rate= 0.1,\n#  max_depth= 5,\n max_features= 'sqrt',\n min_samples_leaf= 1,\n#  min_samples_split= 2,\n min_weight_fraction_leaf= 0.0,\n n_estimators= 60,\n random_state= 12,\n subsample= 1.0\n)\ngb_params = {'max_depth':range(3,15,3),'min_samples_split':range(10,101,20)}\ngrid_gb2 = GridSearchCV(gb,gb_params,scoring='accuracy',cv=5)\ngrid_gb2.fit(X_train,y_train)","e4133937":"grid_gb2.cv_results_,grid_gb2.best_params_,grid_gb2.best_score_","6e754e59":"gb = GradientBoostingClassifier(\n learning_rate= 0.1,\n max_depth= 12,\n max_features= 'sqrt',\n#  min_samples_leaf= 1,\n min_samples_split= 70,\n min_weight_fraction_leaf= 0.0,\n n_estimators= 60,\n random_state= 12,\n subsample= 1.0\n)\ngb_params = {'min_samples_leaf':range(1,20,3)}\ngrid_gb3 = GridSearchCV(gb,gb_params,scoring='accuracy',cv=5)\ngrid_gb3.fit(X_train,y_train)","6c22fddb":"grid_gb3.cv_results_,grid_gb3.best_params_,grid_gb3.best_score_","1e34a54b":"gb = GradientBoostingClassifier(\n learning_rate= 0.1,\n max_depth= 12,\n#  max_features= 'sqrt',\n min_samples_leaf= 10,\n min_samples_split= 70,\n min_weight_fraction_leaf= 0.0,\n n_estimators= 60,\n random_state= 12,\n subsample= 1.0\n)\ngb_params = {'max_features':range(6,34,4)}\ngrid_gb4 = GridSearchCV(gb,gb_params,scoring='accuracy',cv=5)\ngrid_gb4.fit(X_train,y_train)","94506509":"grid_gb4.cv_results_,grid_gb4.best_params_,grid_gb4.best_score_","dd198b67":"gb = GradientBoostingClassifier(\n learning_rate= 0.1,\n max_depth= 12,\n max_features= 22,\n min_samples_leaf= 10,\n min_samples_split= 70,\n min_weight_fraction_leaf= 0.0,\n n_estimators= 60,\n random_state= 12,\n#  subsample= 1.0\n)\ngb_params = {'subsample':[0.5,0.6,0.7,0.8,0.9,1.0]}\ngrid_gb5 = GridSearchCV(gb,gb_params,scoring='accuracy',cv=5)\ngrid_gb5.fit(X_train,y_train)","de05b276":"gb = GradientBoostingClassifier(\n learning_rate= 0.1,\n max_depth= 12,\n max_features= 22,\n min_samples_leaf= 10,\n min_samples_split= 70,\n min_weight_fraction_leaf= 0.0,\n n_estimators= 60,\n random_state= 12,\n subsample= 1.0\n)\ngb_params = {'subsample':[0.5,0.6,0.7,0.8,0.9,1.0]}\ngrid_gb5 = GridSearchCV(gb,gb_params,scoring='accuracy',cv=5)\ngrid_gb5.fit(X_train,y_train)","4aa4a42b":"grid_gb5.cv_results_,grid_gb5.best_params_,grid_gb5.best_score_","4397b5cc":"from sklearn.metrics import accuracy_score\n\ngb = GradientBoostingClassifier(\n learning_rate= 0.1,\n max_depth= 12,\n max_features= 22,\n min_samples_leaf= 10,\n min_samples_split= 70,\n min_weight_fraction_leaf= 0.0,\n n_estimators= 60,\n random_state= 12,\n subsample= 1.0\n)\n# gb_params = {'subsample':[0.5,0.6,0.7,0.8,0.9,1.0]}\n# grid_gb5 = GridSearchCV(gb,gb_params,scoring='accuracy',cv=5)\ngb.fit(X_train,y_train)\nprint(accuracy_score(y_train,gb.predict(X_train)),accuracy_score(y_test,gb.predict(X_test)))","28f72215":"from sklearn.metrics import accuracy_score\n\ngb = GradientBoostingClassifier(\n learning_rate= 0.05,\n max_depth= 12,\n max_features= 22,\n min_samples_leaf= 10,\n min_samples_split= 70,\n min_weight_fraction_leaf= 0.0,\n n_estimators= 120,\n random_state= 12,\n subsample= 1.0\n)\n# gb_params = {'subsample':[0.5,0.6,0.7,0.8,0.9,1.0]}\n# grid_gb5 = GridSearchCV(gb,gb_params,scoring='accuracy',cv=5)\ngb.fit(X_train,y_train)\naccuracy_score(y_train,gb.predict(X_train))\nprint(accuracy_score(y_train,gb.predict(X_train)),accuracy_score(y_test,gb.predict(X_test)))","c7d83b32":"from sklearn.metrics import accuracy_score\n\ngb = GradientBoostingClassifier(\n learning_rate= 0.01,\n max_depth= 12,\n max_features= 22,\n min_samples_leaf= 10,\n min_samples_split= 70,\n min_weight_fraction_leaf= 0.0,\n n_estimators= 600,\n random_state= 12,\n subsample= 1.0\n)\n# gb_params = {'subsample':[0.5,0.6,0.7,0.8,0.9,1.0]}\n# grid_gb5 = GridSearchCV(gb,gb_params,scoring='accuracy',cv=5)\ngb.fit(X_train,y_train)\naccuracy_score(y_train,gb.predict(X_train))\nprint(accuracy_score(y_train,gb.predict(X_train)),accuracy_score(y_test,gb.predict(X_test)))","c2e41672":"from sklearn.metrics import accuracy_score\n\ngb = GradientBoostingClassifier(\n learning_rate= 0.005,\n max_depth= 12,\n max_features= 22,\n min_samples_leaf= 10,\n min_samples_split= 70,\n min_weight_fraction_leaf= 0.0,\n n_estimators= 1200,\n random_state= 12,\n subsample= 1.0\n)\n# gb_params = {'subsample':[0.5,0.6,0.7,0.8,0.9,1.0]}\n# grid_gb5 = GridSearchCV(gb,gb_params,scoring='accuracy',cv=5)\ngb.fit(X_train,y_train)\naccuracy_score(y_train,gb.predict(X_train))\nprint(accuracy_score(y_train,gb.predict(X_train)),accuracy_score(y_test,gb.predict(X_test)))","78b850d3":"# from xgboost import XGBClassifier\n# import xgboost\n\n\n# # xgb.get_params()\n# params = {'base_score': 0.5,\n#  'booster': 'gbtree',\n#  'colsample_bylevel': 0.8,\n#  'colsample_bytree': 1,\n#  'gamma': 0,\n#  'learning_rate': 0.1,\n#  'max_delta_step': 0,\n#  'max_depth': 5,\n#  'min_child_weight': 0.8,\n#  'missing': None,\n#  'n_estimators': 100,\n#  'n_jobs': 1,\n#  'nthread': None,\n#  'objective': 'binary:logistic',\n#  'random_state': 0,\n#  'reg_alpha': 0,\n#  'reg_lambda': 1,\n#  'scale_pos_weight': 1,\n#  'seed': None,\n#  'silent': True,\n#  'subsample': 0.8}\n\n# # X_xgb_train = xgboost.DMatrix(X_train)\n# XGBClassifier.fit(params,X_train,y_train,eval_metric='accuracy')","454e7662":"score = []\nmodels = [grid_knn,grid_lr,grid_lsvc,grid_nb,grid_tree,rf,gb] \nfor model in models:\n    score.append(model.score(X_test,y_test))\ncols = ['knn','LogisticRegression','Linear Support Vector Machine','Naive Bayes','DecisionTree','RandomForest','GradientBoost']","fe16bcb9":"fig = plt.figure(figsize=[10,10])\nax = sns.barplot(x=cols,y=score)\nax.set_xticklabels(ax.get_xticklabels(),rotation=30)\n\nheight = [p.get_height() for p in ax.patches]\n# Looping through bars\nfor i, p in enumerate(ax.patches):    \n    # Adding percentages\n    ax.text(p.get_x()+p.get_width()\/2, height[i]*1.01,\n            '{:1.1%}'.format(height[i]), ha=\"center\", size=14) ","6226e773":"X = X.values","e7f95192":"# X_predict = np.zeros(len(X))\ntest_predict = np.array(len(test))","6c274574":"X_test.head()","4ab50388":"First = True\n\nfor i,(train_level,valid_level) in enumerate(SKFold.split(X,y)):\n    X_train, X_valid = X[train_level,:], X[valid_level,:]\n    y_train, y_valid = y[train_level], y[valid_level]\n    \n    gb.fit(X_train,y_train)\n    train_set = gb.predict(X_train)\n    valid_set = gb.predict(X_valid)\n    test_set = gb.predict(test)\n    \n    if First:\n        print(\"#\"*30,i+1)\n        test_predict = pd.Series(test_set)\n        First=False\n    else:\n        print(\"#\"*30,i+1)\n        test_predict += pd.Series(test_set)","b8710d2e":"def decision(row):\n    if row < 3:\n        return 0\n    else:\n        return 1","2fe86f8c":"test_predict = test_predict.apply(decision)","65d7b6bb":"# from sklearn.ensemble import VotingClassifier\n\n# estimators = [('lsvc',grid_lsvc),('d_tree',grid_tree),('gb',grid_gb)]\n# voting = VotingClassifier(estimators=estimators,voting='hard')\n# voting.fit(X_train,y_train)\n# voting.score(X_test,y_test)","e2a6eee1":"# test.drop('PassengerId',axis=1,inplace=True)\n# predicts = grid_gb.predict(test).astype('int')","e2e1761f":"submission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['Survived'] = test_predict\nsubmission.to_csv('..\/working\/submit.csv',index=False)","7fa8dd1d":"## **3. \ub370\uc774\ud130 \uc804\ucc98\ub9ac**\n\n## **1) null \ub370\uc774\ud130 \uac12 \ucc98\ub9ac**","90686fb2":"## **\uac01 \uceec\ub7fc\ub4e4\uc758 \uc815\ubcf4**\n### * survival - \uc0dd\uc874\uc720\ubb34, target \uac12. (0 = \uc0ac\ub9dd, 1 = \uc0dd\uc874)\n### * pclass - \ud2f0\ucf13 \ud074\ub798\uc2a4. (1 = 1st, 2 = 2nd, 3 = 3rd)\n### * sex - \uc131\ubcc4\n### * Age - \ub098\uc774(\uc138)\n### * sibsp - \ud568\uaed8 \ud0d1\uc2b9\ud55c \ud615\uc81c\uc790\ub9e4, \ubc30\uc6b0\uc790 \uc218 \ucd1d\ud569\n### * parch - \ud568\uaed8 \ud0d1\uc2b9\ud55c \ubd80\ubaa8, \uc790\ub140 \uc218 \ucd1d\ud569\n### * ticket - \ud2f0\ucf13 \ub118\ubc84\n### * fare - \ud0d1\uc2b9 \uc694\uae08\n### * cabin - \uac1d\uc2e4 \ub118\ubc84\n### * embarked - \ud0d1\uc2b9 \ud56d\uad6c","7b040a7b":"# \uc9c0\ub09c 3\uac1c\uc6d4\uc744 \ub2e4\uc2dc\ubcf4\ub294 Tie_tanic\n\n# \ubaa9\ucc28\n\n## **1. \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 \ubc0f \ud615\ud0dc \ud655\uc778**\n## **2. \uac01\uac01\uc758 \uceec\ub7fc\uacfc \ube44\uad50\ud560 Tagert Value[Survived]\uc640\uc758 \uac1c\ubcc4 \ube44\uad50 \ubc0f \uc804\uccb4 \uc0c1\uad00\uad00\uacc4**\n## **3. \ub370\uc774\ud130 \uc804\ucc98\ub9ac**\n## **4. ML \ubaa8\ub378\ub9c1**\n## **5. \uacb0\uacfc \uac12 \uc81c\ucd9c**","0ef1a729":"Stacking using gradient Boost","bf8c4313":"## ****2. \uac01\uac01\uc758 \uceec\ub7fc\uacfc \ube44\uad50\ud560 Tagert Value[Survived]\uc640\uc758 \uac1c\ubcc4 \ube44\uad50 \ubc0f \uc804\uccb4 \uc0c1\uad00\uad00\uacc4****","b07488b1":"### \uc800\ub294 \ube48\uac12\ub4e4\uc5d0 \uc788\uc5b4\uc11c Cabin\uc774\ub098 Age\uac12\uc740 null\uc758 \uc218\uac00 \ub9ce\uae30 \ub54c\ubb38\uc5d0 \uc81c\uc678\ud558\uace0, \ud6c8\ub828\uc14b\uacfc \ud14c\uc2a4\ud2b8\uc14b\uc5d0 \uac01\uac01 null\ub85c \uc788\ub294 Embarked\uc640 Fare\uc5d0 \uc788\uc5b4\uc11c \uac01\uac01 \ucd5c\ube48\uac12\uacfc \uc911\uac04\uac12\uc73c\ub85c null\uac12\uc744 \ucc44\uc6cc\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4. ","2b031608":"### \uc0c1\uad00\uad00\uacc4\ub97c \ud45c\ud604\ud55c \ud45c\ub294 \uc704\uc758 heatmap\uacfc \uac19\uc73c\uba70 Survived\uc640 \ub192\uc740 \uc0c1\uad00\uad00\uacc4 \uc21c\uc73c\ub85c \uc815\ub82c\ud574\ubcf4\uc558\uc744\ub54c,\n## **Fare,SibSp,Parch,Pclass,Age**\uc21c\uc73c\ub85c \uc54c \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4.\n*(Numeric\ud558\uc9c0 \uc54a\uc740 Name,Sex,Embarked\ub294 pd.DataFrame.corr()\uc2dc\uc5d0 \ub9cc\ub4e4\uc5b4\uc9c0\ub294 \ub370\uc774\ud130\ud504\ub808\uc784\uc5d0\uc11c \ubc30\uc81c\ub429\ub2c8\ub2e4.)*","3a45e37a":"### pairplot\uc744 \ud65c\uc6a9\ud558\uba74 heatmap\uc5d0\uc11c \ubcf4\uc5ec\uc8fc\uc9c0 \ubabb\ud55c \uac1c\ubcc4 \ubcc0\uc218\uac04\uc758 \ubd84\ud3ec \ub610\ud55c \uc54c\uc544\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.","2ebc2086":"* ### Alone: \ub3d9\uc2b9\uc790 \uc5c6\uc774 \ud63c\uc790\ud0c0\ub294 \uc2b9\uac1d\uc744 \uad6c\ubd84\ud558\uae30 \uc704\ud55c \ud2b9\uc131\n* ### Family: \uac00\uc871\uc2b9\uac1d\uc758 \uacbd\uc6b0 \ub3d9\uc2b9\uc790\uc758 \uc218\n* ### Large_family: \uac00\uc871 \uc2b9\uac1d \uc911\uc5d0 6\uc778 \uc774\uc0c1\uc758 \ub3d9\ud589\uc790\ub97c \ud3ec\ud568\ud55c \uc2b9\uac1d\uc744 \uad6c\ubd84\ud558\uae30 \uc704\ud55c \ud2b9\uc131\n* ### Title: Name Series\uc5d0\uc11c \uc2b9\uac1d\uc758 \ud638\uce6d\n* ### Child: 10\uc138 \ubbf8\ub9cc\uc758 \ud0d1\uc2b9\uac1d\uc744 \uad6c\ubd84\ud558\uae30 \uc704\ud55c \ud2b9\uc131\n* ### Young: \uc80a\uc740 \ud0d1\uc2b9\uac1d 30\uc138\uc774\ud558\uc758 \uc2b9\uac1d \ub610\ub294 \ud638\uce6d\uc774 Miss, Master, Mlle\uc5d0 \ud574\ub2f9\ud558\ub294 \ud0d1\uc2b9\uac1d\n* ### Alone: \ub3d9\uc2b9\uc790 \uc5c6\uc774 \ud63c\uc790\ud0c0\ub294 \uc2b9\uac1d\uc744 \uad6c\ubd84\ud558\uae30 \uc704\ud55c \ud2b9\uc131\n* ### Alone: \ub3d9\uc2b9\uc790 \uc5c6\uc774 \ud63c\uc790\ud0c0\ub294 \uc2b9\uac1d\uc744 \uad6c\ubd84\ud558\uae30 \uc704\ud55c \ud2b9\uc131\n* ### Alone: \ub3d9\uc2b9\uc790 \uc5c6\uc774 \ud63c\uc790\ud0c0\ub294 \uc2b9\uac1d\uc744 \uad6c\ubd84\ud558\uae30 \uc704\ud55c \ud2b9\uc131\n* ### Alone: \ub3d9\uc2b9\uc790 \uc5c6\uc774 \ud63c\uc790\ud0c0\ub294 \uc2b9\uac1d\uc744 \uad6c\ubd84\ud558\uae30 \uc704\ud55c \ud2b9\uc131\n","9be8661c":"## ** \uc774\uc0c1 null\uc778 Age\ub97c RandomForest\ub97c \ud65c\uc6a9\ud55c \ucc98\ub9ac\uc785\ub2c8\ub2e4.**","94f2fbf7":"### \uc704\uc758 \uadf8\ub9bc\uc740 \uc6b0\ub9ac\uac00 \ubcf4\uc558\ub358 7\uac00\uc9c0\uc758 \uc9c0\ud45c\ub4e4\uc744 \uc11e\uc5b4\uc11c \uc0dd\uac01\ud574\ubcf4\uc558\uc744\ub54c, \ub098\ud0c0\ub0bc \uc218 \uc788\ub294 \uadf8\ub9bc \uc911 \ud558\ub098\uc785\ub2c8\ub2e4.\n## \ub9cc\uc57d, \uc5b4\ub290 \ud0d1\uc2b9\uac1d\uc774 7\uac1c \uc911 2 \uac00\uc9c0\uc758 \uc870\uac74\uc744 \ubaa8\ub450 \ucda9\uc871\ud558\uace0 \uc788\ub294 \uc2b9\uac1d\uc774\ub77c\uba74, \uc6b0\ub9ac\ub294 \ub354 \ud655\uc2e4\ud788 \uadf8 \uc2b9\uac1d\uc774 \uc0b4\uc544\ub0a8\uc558\uc744 \uac83\uc774\ub77c\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9c8\uce58 \uc704\uc758 \uadf8\ub9bc\ucc98\ub7fc\uc694\n#### \uadf8\ub9bc\uc740 \uc88c\uce21\uacfc \uc6b0\uce21\uc744 \ub0a8\uc131\uacfc \uc5ec\uc131\uc73c\ub85c \ub098\ub204\uace0 Survived\uc9c0\ud45c\ub97c \ud1b5\ud574 \ub098\ub204\uc5c8\uc2b5\ub2c8\ub2e4.\n\n### **\uc774\ub97c \ud1b5\ud574 \uc5b4\ub9b0\ub098\uc774\uc758 \ub0a8\uc131\uacfc \uc80a\uc740 \uc5ec\uc131\uc774 \ub192\uc740 \uc0dd\uc874\uc790 \uc218\ub97c \uac00\uc9c0\uace0 \uc788\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.**\n\n## **\uc774\uc81c\ub294 \uc704\uc640 \uac19\uc774 \uac01\uac01\uc744 \ubcf5\ud569\uc801\uc73c\ub85c \uc0dd\uac01\ud574 \ubcfc \ub54c\uc785\ub2c8\ub2e4.**","5b573191":"## ****1.\ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 \ubc0f \ud615\ud0dc \ud655\uc778****","cc89f88a":"### \uc6b0\ub9ac\uc758 \ub370\uc774\ud130\uc14b\uc5d0\uc11c Parch\ub098 SibSp \uac19\uc740 \ub3d9\uc2b9\uc790\uc5d0 \ub300\ud55c \uc815\ubcf4\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc2e4\uc81c\ub85c Ticket\uc5d0 \ub300\ud574\uc11c unique()\ub97c \uc801\uc6a9\ud558\uc5ec \uac1c\uc218\ub97c \ud655\uc778\ud574 \ubcf4\uc544\ub3c4 \ub3d9\uc77c\ud55c \ud2f0\ucf13\uc774 \uc788\ub294\uc9c0 \uc804\uccb4 \ub370\uc774\ud130\uc14b\uc758 \uc218\uc640 \uc77c\uce58\ud558\uc9c0 \uc54a\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc5d0 \ub530\ub974\uba74, \ub3d9\uc2b9\uc790\ub4e4\uc740 \uac19\uc740 \ud2f0\ucf13\ubc88\ud638\ub97c \uac00\uc9c0\uace0 \uc788\uc744 \uac83\uc744 \uc608\uce21\ud560 \uc218 \uc788\uc73c\uba70, \uc6b0\ub9ac\uc758 feature\uc5d0 \ucd94\uac00 \ud574 \uc8fc\uae30 \uc704\ud574\uc11c \uacf5\uc720\ub41c \ud2f0\ucf13\uc5d0 \ub300\ud55c List\uc640 Ticket Series\uc5d0 \uc801\uc6a9\ud560 \ud568\uc218\ub97c \uc815\uc758\ud558\uc600\uc2b5\ub2c8\ub2e4. ","fa4e7633":"### \uc704\ub97c \ud1b5\ud574 \uc6b0\ub9ac\ub294,\n\n## **1. \ub098\uc774\uac00 \uc80a\uc744 \uc218\ub85d \uc0b4\uc544\uc788\ub294 \uc0ac\ub78c\uc758 \uc218\uac00 \ub9ce\ub2e4**\n## **2. 1\ub4f1\uae09 \uce78\uc5d0 \ud0d1\uc2b9\ud55c \uc190\ub2d8\uc758 \uc0dd\uc874\ub960\uc774 \ub354 \ub192\uc558\ub2e4.**\n## **3. 1,2\uba85\uc758 SibSp\uc640 \ub3d9\ud589\ud55c \uc190\ub2d8\uc758 \uc0dd\uc874\ub960\uc774 \ub192\uc558\ub2e4.**\n## **4. 1,2,3\uba85\uc758 Parch\uc640 \ub3d9\ud578\ud55c \uc190\ub2d8\uc758 \uc0dd\uc874\ub960\uc774 \ub354 \ub192\uc558\ub2e4.**\n## **5. \ub3c8\uc744 \ub9ce\uc774 \ub0b8 \uc2b9\uac1d\uc758 \uc0dd\uc874\uc790 \uc218\uac00 \ub354 \ub9ce\uc558\ub2e4.**\n## **6. C\uc5d0\uc11c \ucd9c\ubc1c\ud55c \uc2b9\uac1d\uc758 \uc0dd\uc874\uc790\uc218\uac00 \ub354 \ub192\ub2e4.**\n## **7. \uc5ec\uc131 \ud0d1\uc2b9\uac1d\uc774 \ub0a8\uc790 \ud0d1\uc2b9\uac1d\ubcf4\ub2e4 \uc0dd\uc874\ub960\uc774 \ub354 \ub192\ub2e4.**\n\n### 7\uac1c\uc758 \uc0ac\uc2e4\uc744 \uc54c \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4.","866bbee3":"## **2) Feature Engineering**","629b10d7":"~~Train Dataset\uc758 null\uc778 Age\uac12 \ucc98\ub9ac.~~\n\n~~***null\uc774 \uc788\ub294 Age\ub97c \ubc84\ub9ac\uc9c0 \ub9d0\uace0 Name\uc5d0 \uc788\ub294 \ud638\uce6d\uc744 \uc774\uc6a9\ud558\uc5ec \uc801\uc6a9\ud574\ubcf4\uc790 (\uc911\uac04\uac12 & \ub79c\ud3ec)***~~\n## ** =>\uc131\ub2a5\uc800\ud558\uac00 \ub108\ubb34 \uc2ec\ud574\uc11c Age\ub97c \uc6b0\ub9ac\uac00 \uc0ac\uc6a9\ud560 feature\ub85c \ucc44\ud0dd\ud558\uc9c0 \uc54a\uae30\ub85c \ud569\ub2c8\ub2e4.**","732a7259":"#### \uac04\ub2e8\ud788 pd.DataFrame\uc5d0 .isnull().sum()\uc73c\ub85c null\uc758 \uac1c\uc218\ub97c \ud30c\uc545\uac00\ub2a5\ud558\uc9c0\ub9cc, \ub9e4\ubc88 \uac19\uc740 \ud568\uc218 \ucf5c\uc744 \ud1b5\ud574 \ud655\uc778\ud558\uae30 \uc704\ud574 null\uc758 \uac12\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub294 DataFrame\uc744 \ud615\uc131\ud558\ub3c4\ub85d \n### check_null \ud568\uc218\ub97c \uc120\uc5b8\ud558\uc600\uc2b5\ub2c8\ub2e4."}}