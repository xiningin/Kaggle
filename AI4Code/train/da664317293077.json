{"cell_type":{"0beb3c59":"code","3cd81395":"code","f06b150d":"code","d9a9804b":"code","ce0db64b":"code","37dd4246":"code","0a1727d3":"code","470343f0":"code","6b33afce":"code","b215698d":"code","dffb08c8":"code","dfaae43c":"code","5ffce2ef":"code","3874f6f6":"code","3812e6fc":"code","f3e1e041":"code","a60c0034":"code","bd040033":"code","48c309af":"code","42d00798":"code","8aacee76":"code","f6c38655":"code","484d9cab":"code","8ab4b6a5":"code","86aa350c":"code","501c1555":"code","d3d213ba":"code","13418711":"code","c64c0a8a":"code","2d30dfd6":"code","5c1ef53e":"code","3d0e5988":"code","c6cf7445":"code","b31f1190":"code","2cb16b03":"code","a1fe7be7":"code","14b8221f":"code","69149a2e":"markdown","93331335":"markdown","ed37d8a7":"markdown","fc81d852":"markdown","8c40da86":"markdown","3259bf03":"markdown","9d5c4373":"markdown","9d5bf5cc":"markdown"},"source":{"0beb3c59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.tsaplots import plot_acf\nimport scipy.stats\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nimport statsmodels.api as sm\nimport collections\n\n\nsns.set(style=\"darkgrid\")\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3cd81395":"sell_prices = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv\")\ncalendar = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv\")\nsales_train_validation = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv\")\nsample_submission = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/sample_submission.csv\")","f06b150d":"d_cols = []\nrename_cols = {}\nfor i in range(1,1914):\n    d_cols.append(i)\n    rename_cols[\"d_\"+str(i)] = i\n\nsales_train_validation = sales_train_validation.rename(columns = rename_cols)","d9a9804b":"df = sales_train_validation.melt(id_vars = [\"id\",\"item_id\",\"dept_id\",\"cat_id\",\"store_id\",\"state_id\"],value_vars = d_cols).rename(columns = {\"variable\":\"day\",\"value\":\"quantity\"})","ce0db64b":"df.head()","37dd4246":"plot1 = df[[\"state_id\",\"day\",\"quantity\"]].groupby([\"state_id\",\"day\"]).sum().reset_index() \nplt.figure(figsize=(18, 6))\nax = sns.lineplot(x = 'day', y = 'quantity', hue=\"state_id\", data=plot1)\ndel plot1","0a1727d3":"plot1 = df[[\"state_id\",\"store_id\",\"day\",\"quantity\"]].groupby([\"state_id\",\"store_id\",\"day\"]).sum().reset_index() \ng = sns.FacetGrid(data = plot1, col=\"state_id\", hue=\"store_id\", height=6, margin_titles=True)\nax = g.map(sns.lineplot, \"day\", \"quantity\")\ng.add_legend();\ndel plot1","470343f0":"plot1 = df[[\"state_id\",\"cat_id\",\"day\",\"quantity\"]].groupby([\"state_id\",\"cat_id\",\"day\"]).sum().reset_index() \ng = sns.FacetGrid(data = plot1, col=\"state_id\", hue=\"cat_id\", height=6, margin_titles=True)\nax = g.map(sns.lineplot, \"day\", \"quantity\")\ng.add_legend();\ndel plot1","6b33afce":"plot1 = df[[\"state_id\",\"store_id\",\"cat_id\",\"day\",\"quantity\"]][df[\"state_id\"] == \"CA\"].groupby([\"state_id\",\"store_id\",\"cat_id\",\"day\"]).sum().reset_index()\ng = sns.FacetGrid(data = plot1, col=\"store_id\", hue=\"cat_id\", height=6, margin_titles=True)\nax = g.map(sns.lineplot, \"day\", \"quantity\")\ng.add_legend();\ndel plot1","b215698d":"def Chow_test(X,y,point):\n    k=2\n    X1 = np.zeros((len(X),2))\n    Y1 = np.zeros((len(y),1))\n    \n    X1[:,0] = 1\n    X1[:,1] = X\n    Y1[:,0] = y\n    \n    try:\n        weights = np.linalg.inv(X1.T.dot(X1)).dot(X1.T).dot(Y1)\n    except:\n        return (float(\"nan\"),float(\"nan\"))\n        \n    Y_reg =  X1.dot(weights)\n    Y_reg = np.reshape(Y_reg,(1,-1))[0]\n    \n    x1 = X[0:point]\n    x2 = X[point:len(X)]\n    y1 = y[0:point]\n    y2 = y[point:len(X)]\n    \n    X11 = np.zeros((len(x1),2))\n    Y11 = np.zeros((len(y1),1))\n    X11[:,0] = 1\n    X11[:,1] = x1\n    Y11[:,0] = y1\n    \n    try:\n        weights1 = np.linalg.inv(X11.T.dot(X11)).dot(X11.T).dot(Y11)\n    except:\n        return (float(\"nan\"),float(\"nan\"))\n    \n    y_temp1 = X11.dot(weights1)\n    y_temp1 = np.reshape(y_temp1,(1,-1))[0]\n    \n    \n    X21 = np.zeros((len(x2),2))\n    Y21 = np.zeros((len(y2),1))\n    X21[:,0] = 1\n    X21[:,1] = x2\n    Y21[:,0] = y2\n    \n    try:\n        weights2 = np.linalg.inv(X21.T.dot(X21)).dot(X21.T).dot(Y21)    \n    except:\n        return (float(\"nan\"),float(\"nan\"))\n    y_temp2 = X21.dot(weights2)\n    y_temp2 = np.reshape(y_temp2,(1,-1))[0]\n    \n    e = sum((y - Y_reg)**2)\n    e1 = sum((y1 -y_temp1)**2)\n    e2 = sum((y2 -y_temp2)**2)\n    \n    chow = ((e-e1-e2)\/k)\/((e1+e2)\/(len(y1)+len(y2)-2*k))\n    F_stat = scipy.stats.f.ppf(q=1-0.05, dfn=k, dfd=len(y1)+len(y2)-2*k)\n    \n    return (chow, F_stat)","dffb08c8":"day_CA_2_FOODS = 0\nchow_stat = 0 \nplot1 = df[[\"state_id\",\"store_id\",\"cat_id\",\"day\",\"quantity\"]][df[\"state_id\"] == \"CA\"].groupby([\"state_id\",\"store_id\",\"cat_id\",\"day\"]).sum().reset_index()\nplot1 = plot1[(plot1[\"store_id\"]==\"CA_2\")&(plot1[\"cat_id\"]==\"FOODS\")] \nfor i in plot1[\"day\"]:\n    (chow, F) = Chow_test(plot1[\"day\"], plot1[\"quantity\"], i) \n    if ((chow > chow_stat) and (chow > F)):\n        chow_stat =  chow\n        day_CA_2_FOODS = i","dfaae43c":"print(\"Trend brake at point\",day_CA_2_FOODS,\"in store CA_2 in category FOODS.\")","5ffce2ef":"df = df.drop(df[(df[\"store_id\"]==\"CA_2\") & (df[\"cat_id\"]==\"FOODS\") & (df[\"day\"] < day_CA_2_FOODS)].index)","3874f6f6":"plot1 = df[[\"state_id\",\"store_id\",\"cat_id\",\"day\",\"quantity\"]][df[\"state_id\"] == \"TX\"].groupby([\"state_id\",\"store_id\",\"cat_id\",\"day\"]).sum().reset_index()\ng = sns.FacetGrid(data = plot1, col=\"store_id\", hue=\"cat_id\", height=6, margin_titles=True)\nax = g.map(sns.lineplot, \"day\", \"quantity\")\ng.add_legend();\ndel plot1","3812e6fc":"plot1 = df[[\"state_id\",\"store_id\",\"cat_id\",\"day\",\"quantity\"]][df[\"state_id\"] == \"WI\"].groupby([\"state_id\",\"store_id\",\"cat_id\",\"day\"]).sum().reset_index()\ng = sns.FacetGrid(data = plot1, col=\"store_id\", hue=\"cat_id\", height=6, margin_titles=True)\nax = g.map(sns.lineplot, \"day\", \"quantity\")\ng.add_legend();\ndel plot1","f3e1e041":"day_WI_1_FOODS = 0\nchow_stat = 0 \nplot1 = df[[\"state_id\",\"store_id\",\"cat_id\",\"day\",\"quantity\"]][df[\"state_id\"] == \"WI\"].groupby([\"state_id\",\"store_id\",\"cat_id\",\"day\"]).sum().reset_index()\nplot1 = plot1[(plot1[\"store_id\"]==\"WI_1\")&(plot1[\"cat_id\"]==\"FOODS\")] \nfor i in plot1[\"day\"]:\n    (chow, F) = Chow_test(plot1[\"day\"], plot1[\"quantity\"], i) \n    if ((chow > chow_stat) and (chow > F)):\n        chow_stat =  chow\n        day_WI_1_FOODS = i\n        \nday_WI_2_FOODS = 0\nchow_stat = 0 \nplot1 = df[[\"state_id\",\"store_id\",\"cat_id\",\"day\",\"quantity\"]][df[\"state_id\"] == \"WI\"].groupby([\"state_id\",\"store_id\",\"cat_id\",\"day\"]).sum().reset_index()\nplot1 = plot1[(plot1[\"store_id\"]==\"WI_2\")&(plot1[\"cat_id\"]==\"FOODS\")] \nfor i in plot1[\"day\"]:\n    (chow, F) = Chow_test(plot1[\"day\"], plot1[\"quantity\"], i) \n    if ((chow > chow_stat) and (chow > F)):\n        chow_stat =  chow\n        day_WI_2_FOODS = i\n        \nprint(\"Trend brake at point\",day_WI_1_FOODS,\"in store WI_1 in category FOODS.\")\nprint(\"Trend brake at point\",day_WI_2_FOODS,\"in store WI_2 in category FOODS.\")","a60c0034":"df = df.drop(df[(df[\"store_id\"]==\"WI_1\") & (df[\"cat_id\"]==\"FOODS\") & (df[\"day\"] < day_WI_1_FOODS)].index)\ndf = df.drop(df[(df[\"store_id\"]==\"WI_2\") & (df[\"cat_id\"]==\"FOODS\") & (df[\"day\"] < day_WI_2_FOODS)].index)","bd040033":"plot1 = df[df[\"state_id\"] == \"CA\"][[\"store_id\",\"cat_id\",\"day\",\"quantity\"]].groupby([\"store_id\",\"cat_id\",\"day\"]).sum().reset_index()\nfig, axes = plt.subplots(1,3,figsize=(25,5))\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"CA_1\")&(plot1[\"cat_id\"]==\"FOODS\")][\"quantity\"], title = \"CA_1 FOODS\",ax =axes[0])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"CA_1\")&(plot1[\"cat_id\"]==\"HOBBIES\")][\"quantity\"], title = \"CA_1 HOBBIES\",ax =axes[1])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"CA_1\")&(plot1[\"cat_id\"]==\"HOUSEHOLD\")][\"quantity\"], title = \"CA_1 HOUSEHOLD\",ax =axes[2])\n\nfig, axes = plt.subplots(1,3,figsize=(25,5))\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"CA_2\")&(plot1[\"cat_id\"]==\"FOODS\")][\"quantity\"], title = \"CA_2 FOODS\",ax =axes[0])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"CA_2\")&(plot1[\"cat_id\"]==\"HOBBIES\")][\"quantity\"], title = \"CA_2 HOBBIES\",ax =axes[1])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"CA_2\")&(plot1[\"cat_id\"]==\"HOUSEHOLD\")][\"quantity\"], title = \"CA_2 HOUSEHOLD\",ax =axes[2])\n\nfig, axes = plt.subplots(1,3,figsize=(25,5))\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"CA_3\")&(plot1[\"cat_id\"]==\"FOODS\")][\"quantity\"], title = \"CA_3 FOODS\",ax =axes[0])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"CA_3\")&(plot1[\"cat_id\"]==\"HOBBIES\")][\"quantity\"], title = \"CA_3 HOBBIES\",ax =axes[1])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"CA_3\")&(plot1[\"cat_id\"]==\"HOUSEHOLD\")][\"quantity\"], title = \"CA_3 HOUSEHOLD\",ax =axes[2])\n\nfig, axes = plt.subplots(1,3,figsize=(25,5))\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"CA_4\")&(plot1[\"cat_id\"]==\"FOODS\")][\"quantity\"], title = \"CA_4 FOODS\",ax =axes[0])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"CA_4\")&(plot1[\"cat_id\"]==\"HOBBIES\")][\"quantity\"], title = \"CA_4 HOBBIES\",ax =axes[1])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"CA_4\")&(plot1[\"cat_id\"]==\"HOUSEHOLD\")][\"quantity\"], title = \"CA_4 HOUSEHOLD\",ax =axes[2])\ndel plot1","48c309af":"plot1 = df[df[\"state_id\"] == \"TX\"][[\"store_id\",\"cat_id\",\"day\",\"quantity\"]].groupby([\"store_id\",\"cat_id\",\"day\"]).sum().reset_index()\nfig, axes = plt.subplots(1,3,figsize=(25,5))\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"TX_1\")&(plot1[\"cat_id\"]==\"FOODS\")][\"quantity\"], title = \"TX_1 FOODS\",ax =axes[0])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"TX_1\")&(plot1[\"cat_id\"]==\"HOBBIES\")][\"quantity\"], title = \"TX_1 HOBBIES\",ax =axes[1])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"TX_1\")&(plot1[\"cat_id\"]==\"HOUSEHOLD\")][\"quantity\"], title = \"TX_1 HOUSEHOLD\",ax =axes[2])\n\nfig, axes = plt.subplots(1,3,figsize=(25,5))\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"TX_2\")&(plot1[\"cat_id\"]==\"FOODS\")][\"quantity\"], title = \"TX_2 FOODS\",ax =axes[0])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"TX_2\")&(plot1[\"cat_id\"]==\"HOBBIES\")][\"quantity\"], title = \"TX_2 HOBBIES\",ax =axes[1])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"TX_2\")&(plot1[\"cat_id\"]==\"HOUSEHOLD\")][\"quantity\"], title = \"TX_2 HOUSEHOLD\",ax =axes[2])\n\nfig, axes = plt.subplots(1,3,figsize=(25,5))\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"TX_3\")&(plot1[\"cat_id\"]==\"FOODS\")][\"quantity\"], title = \"TX_3 FOODS\",ax =axes[0])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"TX_3\")&(plot1[\"cat_id\"]==\"HOBBIES\")][\"quantity\"], title = \"TX_3 HOBBIES\",ax =axes[1])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"TX_3\")&(plot1[\"cat_id\"]==\"HOUSEHOLD\")][\"quantity\"], title = \"TX_3 HOUSEHOLD\",ax =axes[2])\n\ndel plot1","42d00798":"plot1 = df[df[\"state_id\"] == \"WI\"][[\"store_id\",\"cat_id\",\"day\",\"quantity\"]].groupby([\"store_id\",\"cat_id\",\"day\"]).sum().reset_index()\nfig, axes = plt.subplots(1,3,figsize=(25,5))\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"WI_1\")&(plot1[\"cat_id\"]==\"FOODS\")][\"quantity\"], title = \"WI_1 FOODS\",ax =axes[0])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"WI_1\")&(plot1[\"cat_id\"]==\"HOBBIES\")][\"quantity\"], title = \"WI_1 HOBBIES\",ax =axes[1])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"WI_1\")&(plot1[\"cat_id\"]==\"HOUSEHOLD\")][\"quantity\"], title = \"WI_1 HOUSEHOLD\",ax =axes[2])\n\nfig, axes = plt.subplots(1,3,figsize=(25,5))\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"WI_2\")&(plot1[\"cat_id\"]==\"FOODS\")][\"quantity\"], title = \"WI_2 FOODS\",ax =axes[0])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"WI_2\")&(plot1[\"cat_id\"]==\"HOBBIES\")][\"quantity\"], title = \"WI_2 HOBBIES\",ax =axes[1])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"WI_2\")&(plot1[\"cat_id\"]==\"HOUSEHOLD\")][\"quantity\"], title = \"WI_2 HOUSEHOLD\",ax =axes[2])\n\nfig, axes = plt.subplots(1,3,figsize=(25,5))\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"WI_3\")&(plot1[\"cat_id\"]==\"FOODS\")][\"quantity\"], title = \"WI_3 FOODS\",ax =axes[0])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"WI_3\")&(plot1[\"cat_id\"]==\"HOBBIES\")][\"quantity\"], title = \"WI_3 HOBBIES\",ax =axes[1])\nfig = plot_acf(plot1[(plot1[\"store_id\"] == \"WI_3\")&(plot1[\"cat_id\"]==\"HOUSEHOLD\")][\"quantity\"], title = \"WI_3 HOUSEHOLD\",ax =axes[2])\n\ndel plot1","8aacee76":"LAG = 7","f6c38655":"def  stationarity_check(x,store):\n    res1 = sm.tsa.adfuller(x[\"quantity\"].values,regression='c')\n    res2 = sm.tsa.adfuller(x[\"quantity\"].values,regression='ct')\n    res3 = sm.tsa.adfuller(x[\"quantity\"].values,regression='ctt')\n    cat = x[\"cat_id\"].unique()[0]\n    if (res1[1] > 0.05):\n        print(\"P-value for\", cat, \"in store\", store, \"for model with constant is\", res1[1],\"Model is not stationary.\")\n    if (res2[1] > 0.05):\n        print(\"P-value for\", cat, \"in store\", store, \"for model with linear trend is\", res2[1],\"Model is not stationary.\")\n    if (res3[1] > 0.05):\n        print(\"P-value for\", cat, \"in store\", store, \"for model with linear + quadratic is\", res3[1],\"Model is not stationary.\")\n    ","484d9cab":"plot1 = df[df[\"store_id\"] == \"CA_1\"][[\"cat_id\",\"day\",\"quantity\"]].groupby([\"cat_id\",\"day\"]).sum().reset_index()\nplot1[[\"cat_id\",\"quantity\"]].groupby([\"cat_id\"]).apply(stationarity_check,\"CA_1\")\nplot1 = df[df[\"store_id\"] == \"CA_2\"][[\"cat_id\",\"day\",\"quantity\"]].groupby([\"cat_id\",\"day\"]).sum().reset_index()\nplot1[[\"cat_id\",\"quantity\"]].groupby([\"cat_id\"]).apply(stationarity_check,\"CA_2\")\nplot1 = df[df[\"store_id\"] == \"CA_3\"][[\"cat_id\",\"day\",\"quantity\"]].groupby([\"cat_id\",\"day\"]).sum().reset_index()\nplot1[[\"cat_id\",\"quantity\"]].groupby([\"cat_id\"]).apply(stationarity_check,\"CA_3\")\nplot1 = df[df[\"store_id\"] == \"CA_4\"][[\"cat_id\",\"day\",\"quantity\"]].groupby([\"cat_id\",\"day\"]).sum().reset_index()\nplot1[[\"cat_id\",\"quantity\"]].groupby([\"cat_id\"]).apply(stationarity_check,\"CA_4\")\n\nplot1 = df[df[\"store_id\"] == \"TX_1\"][[\"cat_id\",\"day\",\"quantity\"]].groupby([\"cat_id\",\"day\"]).sum().reset_index()\nplot1[[\"cat_id\",\"quantity\"]].groupby([\"cat_id\"]).apply(stationarity_check,\"TX_1\")\nplot1 = df[df[\"store_id\"] == \"TX_2\"][[\"cat_id\",\"day\",\"quantity\"]].groupby([\"cat_id\",\"day\"]).sum().reset_index()\nplot1[[\"cat_id\",\"quantity\"]].groupby([\"cat_id\"]).apply(stationarity_check,\"TX_2\")\nplot1 = df[df[\"store_id\"] == \"TX_3\"][[\"cat_id\",\"day\",\"quantity\"]].groupby([\"cat_id\",\"day\"]).sum().reset_index()\nplot1[[\"cat_id\",\"quantity\"]].groupby([\"cat_id\"]).apply(stationarity_check,\"TX_3\")\n\n\nplot1 = df[df[\"store_id\"] == \"WI_1\"][[\"cat_id\",\"day\",\"quantity\"]].groupby([\"cat_id\",\"day\"]).sum().reset_index()\nplot1[[\"cat_id\",\"quantity\"]].groupby([\"cat_id\"]).apply(stationarity_check,\"WI_1\")\nplot1 = df[df[\"store_id\"] == \"WI_2\"][[\"cat_id\",\"day\",\"quantity\"]].groupby([\"cat_id\",\"day\"]).sum().reset_index()\nplot1[[\"cat_id\",\"quantity\"]].groupby([\"cat_id\"]).apply(stationarity_check,\"WI_2\")\nplot1 = df[df[\"store_id\"] == \"WI_3\"][[\"cat_id\",\"day\",\"quantity\"]].groupby([\"cat_id\",\"day\"]).sum().reset_index()\nplot1[[\"cat_id\",\"quantity\"]].groupby([\"cat_id\"]).apply(stationarity_check,\"WI_3\")\n","8ab4b6a5":"calendar[\"d\"] = [int(i[2:]) for i in calendar[\"d\"]]","86aa350c":"calendar = calendar[[\"wday\",\"month\",\"d\",\"event_name_1\",\"event_type_1\",\"event_name_2\",\"event_type_2\",\"snap_CA\",\"snap_TX\",\"snap_WI\"]]","501c1555":"calendar = calendar.rename(columns ={\"d\":\"day\"})","d3d213ba":"def graph(df,calendar,store):\n    cat_in_store = df[(df[\"store_id\"] == store)]\n    calendar1 = calendar.merge(cat_in_store[[\"day\",\"cat_id\",\"quantity\"]], on = [\"day\"], how = 'left')\n    calendar1 = calendar1.dropna(subset = [\"quantity\"])\n    bar = calendar1[calendar1[\"event_name_1\"].notnull()][[\"event_name_1\",\"cat_id\",\"quantity\"]].groupby([\"cat_id\",\"event_name_1\"]).sum().reset_index()\n    return bar","13418711":"fig,axes = plt.subplots(2,2,figsize = (24,20))\n\nbar = graph(df,calendar,\"CA_1\")\naxes[0,0].set_title('CA_1')\nax = sns.barplot(x=\"event_name_1\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[0,0])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\nbar = graph(df,calendar,\"CA_2\")\naxes[0,1].set_title('CA_2')\nax = sns.barplot(x=\"event_name_1\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[0,1])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\nbar = graph(df,calendar,\"CA_3\")\naxes[1,0].set_title('CA_3')\nax = sns.barplot(x=\"event_name_1\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[1,0])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\nbar = graph(df,calendar,\"CA_4\")\naxes[1,1].set_title('CA_4')\nax = sns.barplot(x=\"event_name_1\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[1,1])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n","c64c0a8a":"fig,axes = plt.subplots(1,3,figsize = (25,6))\n\nbar = graph(df,calendar,\"TX_1\")\naxes[0].set_title('TX_1')\nax = sns.barplot(x=\"event_name_1\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[0])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\nbar = graph(df,calendar,\"TX_2\")\naxes[1].set_title('TX_2')\nax = sns.barplot(x=\"event_name_1\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[1])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\nbar = graph(df,calendar,\"TX_3\")\naxes[2].set_title('TX_3')\nax = sns.barplot(x=\"event_name_1\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[2])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\n","2d30dfd6":"fig,axes = plt.subplots(1,3,figsize = (25,6))\n\nbar = graph(df,calendar,\"WI_1\")\naxes[0].set_title('WI_1')\nax = sns.barplot(x=\"event_name_1\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[0])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\nbar = graph(df,calendar,\"WI_2\")\naxes[1].set_title('WI_2')\nax = sns.barplot(x=\"event_name_1\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[1])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\nbar = graph(df,calendar,\"WI_3\")\naxes[2].set_title('WI_3')\nax = sns.barplot(x=\"event_name_1\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[2])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\ndel bar","5c1ef53e":"def months(df,calendar,store_id):\n    cat_in_store = df[df[\"store_id\"] == store_id]\n    calendar1 = calendar.merge(cat_in_store[[\"day\",\"cat_id\",\"quantity\"]], on = [\"day\"], how = 'left')\n    calendar1 = calendar1.dropna(subset = [\"quantity\"])\n    g = calendar1[[\"cat_id\",\"month\",\"quantity\"]].groupby([\"cat_id\",\"month\"]).sum().reset_index()\n    return g\n","3d0e5988":"fig,axes = plt.subplots(2,2,figsize = (24,20))\n\nbar = months(df,calendar,\"CA_1\")\naxes[0,0].set_title('CA_1')\nax = sns.barplot(x=\"month\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[0,0])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\nbar = months(df,calendar,\"CA_2\")\naxes[0,1].set_title('CA_2')\nax = sns.barplot(x=\"month\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[0,1])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\nbar = months(df,calendar,\"CA_3\")\naxes[1,0].set_title('CA_3')\nax = sns.barplot(x=\"month\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[1,0])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\nbar = months(df,calendar,\"CA_4\")\naxes[1,1].set_title('CA_4')\nax = sns.barplot(x=\"month\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[1,1])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\n","c6cf7445":"fig,axes = plt.subplots(1,3,figsize = (25,6))\n\nbar = months(df,calendar,\"TX_1\")\naxes[0].set_title('TX_1')\nax = sns.barplot(x=\"month\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[0])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\nbar = months(df,calendar,\"TX_2\")\naxes[1].set_title('TX_2')\nax = sns.barplot(x=\"month\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[1])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\nbar = months(df,calendar,\"TX_3\")\naxes[2].set_title('TX_3')\nax = sns.barplot(x=\"month\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[2])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\n\n","b31f1190":"fig,axes = plt.subplots(1,3,figsize = (25,6))\n\nbar = months(df,calendar,\"WI_1\")\naxes[0].set_title('WI_1')\nax = sns.barplot(x=\"month\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[0])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\nbar = months(df,calendar,\"WI_2\")\naxes[1].set_title('WI_2')\nax = sns.barplot(x=\"month\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[1])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\nbar = months(df,calendar,\"WI_3\")\naxes[2].set_title('WI_3')\nax = sns.barplot(x=\"month\", y=\"quantity\",hue =\"cat_id\", data=bar,ax = axes[2])\nax1 = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n\ndel bar","2cb16b03":"def snap(df,calendar,state_id):\n    cat_in_store = df[df[\"state_id\"] == state_id]\n    calendar1 = calendar.merge(cat_in_store[[\"day\",\"quantity\"]], on = [\"day\"], how = 'left')\n    calendar1 = calendar1.dropna(subset = [\"quantity\"])\n    g = calendar1[[\"snap_\"+state_id,\"quantity\"]].groupby([\"snap_\"+state_id]).mean().reset_index()\n    return g","a1fe7be7":"bar = snap(df,calendar,\"CA\")\nbar1 = snap(df,calendar,\"TX\")\nbar2 = snap(df,calendar,\"WI\")","14b8221f":"fig,axes = plt.subplots(1,3,figsize = (15,8))\naxes[0].set_title('Average snap sales')\naxes[1].set_title('Average snap sales')\naxes[2].set_title('Average snap sales')\nax = sns.barplot(x=\"snap_CA\", y=\"quantity\", data=bar,ax = axes[0])\nax = sns.barplot(x=\"snap_TX\", y=\"quantity\", data=bar1,ax = axes[1])\nax = sns.barplot(x=\"snap_WI\", y=\"quantity\", data=bar2,ax = axes[2])","69149a2e":"Check stationarity with Augmented Dicky Fuller test","93331335":"Now to drop down the seasonality we will look at the ACF functions","ed37d8a7":"There are 2 trend brakes in store WI_1 and  WI_2","fc81d852":"From all the graphs we can see the 7 days sesonality period. So before making investigation of our time-series we want to take a lag of 7 days","8c40da86":"Let's investigate how category sales increased on events ","3259bf03":"Okay, we will investigate time-series after point 1588. Of course we drop down a lot of points, but for business we should use the latest significant information, because old sales can change the model badly.","9d5c4373":"Clearly trend brake in store CA_2 in category foods. Let's find the point with the help of Chow test","9d5bf5cc":"Investigate calendar"}}