{"cell_type":{"d693fbc6":"code","54baea50":"code","5fe17430":"code","d39de45c":"code","474fa636":"code","e5797864":"code","ead74b10":"code","904d65ac":"code","a47728ef":"code","eb9ef7e8":"code","95212f21":"code","feea2160":"code","f44b243e":"code","d655ccb0":"code","92973369":"code","e834c0c0":"code","440408a9":"code","9ecd2724":"code","b78113e0":"code","ffc59386":"code","a6f675c4":"code","169c3f64":"code","9f28ad18":"code","4d455652":"code","bf4e7ea7":"code","72e04c3e":"code","ae3167de":"code","69c7717c":"code","3190c915":"code","400ae1ec":"code","9ecc88c8":"code","83cb3600":"code","f8353799":"code","a7919827":"code","3408a02a":"code","b1748e5a":"code","d4cd28b6":"code","dd4e51d3":"code","b2672030":"code","baeacb3a":"code","00ab1518":"code","77946be0":"code","5994bf85":"code","47e4ca92":"code","4c618659":"code","6af8f02d":"markdown","a997a99c":"markdown","d24c4939":"markdown","0b8f3992":"markdown","a42ba629":"markdown","d4da4abf":"markdown","8dd1609c":"markdown","0e02d922":"markdown","edfa2c0c":"markdown","da7c9b06":"markdown","c30e6e33":"markdown","91383506":"markdown","35b19812":"markdown","98ad5590":"markdown","2ab8257c":"markdown","a79a598f":"markdown","3f88c70e":"markdown","797f590a":"markdown","30bf3512":"markdown","9184e3d5":"markdown","c4ca872b":"markdown","9561a16e":"markdown","c1807602":"markdown","69584efc":"markdown","22655f34":"markdown","9365f3e9":"markdown","f80fbc61":"markdown","a3a9da7e":"markdown","97356758":"markdown","8b787998":"markdown","0a610325":"markdown","5c3b00be":"markdown","e5bb53e0":"markdown","6907e1ce":"markdown","f69b317b":"markdown"},"source":{"d693fbc6":"import numpy as pd, pandas as pd, seaborn as sns, matplotlib.pyplot as plt\nimport warnings, time, gc\nfrom plotly import tools\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected = True)\n\ncolor = sns.color_palette()\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\n\nfrom kaggle.competitions import twosigmanews\n\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 999\n\nenv = twosigmanews.make_env()","54baea50":"market_train, news_train = env.get_training_data()","5fe17430":"import random\n\ndef generate_color():\n    color = \"#{:02x}{:02x}{:02x}\".format(*map(lambda x: random.randint(0, 255), range(3)))\n    return color","d39de45c":"market_train.head()","474fa636":"market_train.describe()","e5797864":"market_train.isnull().sum()","ead74b10":"market_train[\"time\"] = market_train[\"time\"].dt.strftime(date_format = '%Y-%m-%d')","904d65ac":"temp = market_train[\"time\"].value_counts()\ntime_count = pd.DataFrame({\"date\": temp.index,\n                           \"count\": temp.values}).sort_values(by = \"date\")\ntime_count.sort_values(by = \"date\")\ntrace = go.Scatter(x = time_count[\"date\"].values,\n                   y = time_count[\"count\"].values)\n\nlayout = dict(title = \"Asset Counts Per Day\", \n              xaxis = dict(title = \"Day\"), \n              yaxis = dict(title = \"Count\"))\niplot(dict(data = [trace], layout = layout))","a47728ef":"asset_code = market_train[\"assetCode\"].describe()\nasset_name = market_train[\"assetName\"].describe()\n\npd.concat([asset_code, asset_name], axis = 1, keys = [\"Asset Code\", \"Asset Name\"])","eb9ef7e8":"unknown_name = market_train[market_train[\"assetName\"] == \"Unknown\"]\nunknown_count = unknown_name[\"assetCode\"].value_counts()\n\nprint(\"There are {} unique asset code with unknown asset name\".format(len(unknown_count.index)))","95212f21":"trace = go.Bar(x = unknown_count.index[:25],\n               y = unknown_count.values[:25])\nlayout = dict(title = \"First 25 Asset Code with Unknown Asset Name\", \n              xaxis = dict(title = \"Asset Code\"), \n              yaxis = dict(title = \"Days\"))\niplot(dict(data = [trace], layout = layout))","feea2160":"valumeByCode = market_train.groupby(market_train[\"assetCode\"])[\"volume\"].sum().sort_values(ascending = False)","f44b243e":"top_trade_code = valumeByCode.index[:10]\n\nfig = tools.make_subplots(rows = len(top_trade_code), cols = 2)\n\nfor i, c in enumerate(top_trade_code):\n    temp = market_train[market_train[\"assetCode\"] == c]\n    trace = go.Scatter(x = temp[\"time\"],\n                       y = temp[\"volume\"],\n                       name = c)\n    fig.append_trace(trace, int(i\/2)+1, (i%2)+1)\n\nfig[\"layout\"].update(height = 1000, width = 800,\n                     title = \"Top 10 AssetCode By Trade Volume\")\n    \niplot(fig)","d655ccb0":"fig = tools.make_subplots(rows = len(top_trade_code), cols = 2)\n\nfor i, c in enumerate(top_trade_code):\n    temp = market_train[(market_train[\"assetCode\"] == c) & \n                        (market_train[\"time\"] > \"2008-01-01\") &\n                        (market_train[\"time\"] < \"2010-01-01\")]\n    trace = go.Scatter(x = temp[\"time\"],\n                       y = temp[\"volume\"],\n                       name = c)\n    fig.append_trace(trace, int(i\/2)+1, (i%2)+1)\n\nfig[\"layout\"].update(height = 1200, width = 800,\n                     title = \"Top 10 AssetCode By Trade Volume\")\n    \niplot(fig)","92973369":"def candle_sticks(data):\n    data[\"high\"] = data[\"open\"]\n    data[\"low\"] = data[\"close\"]\n    \n    for idx, row in data.iterrows():\n        if row[\"close\"] > row[\"open\"]:\n            data.loc[idx, \"high\"] = row[\"close\"]\n            data.loc[idx, \"low\"] = row[\"open\"]\n            \n    return data\n\nfor c in top_trade_code[:5]:\n    temp1 = market_train[market_train[\"assetCode\"] == c][[\"time\", \"open\", \"close\"]]\n    temp2 = candle_sticks(temp1)\n    \n    trace = go.Candlestick(x = temp2[\"time\"],\n                           open = temp2[\"open\"],\n                           low = temp2[\"low\"],\n                           high = temp2[\"high\"],\n                           close = temp2[\"close\"],\n                           increasing = dict(line = dict(color = generate_color())),\n                           decreasing = dict(line = dict(color = generate_color())))\n    \n    layout = dict(title = \"Candlestick Chart for {}\".format(c), \n                 xaxis = dict(title = \"Day\"),\n                 yaxis = dict(title = \"Price (USD)\"))\n    \n    iplot(dict(data = [trace], layout = layout))","e834c0c0":"c = top_trade_code[0]\ntemp1 = market_train[market_train[\"assetCode\"] == c]\ncolor = generate_color()\ntrace1 = go.Scatter(x = temp1[\"time\"],\n                    y = temp1[\"open\"],\n                    marker = dict(color = color),\n                    name = c)\n\ntrace2 = go.Scatter(x = temp1[\"time\"],\n                    y = temp1[\"returnsOpenPrevRaw1\"],\n                    marker = dict(color = color),\n                    name = c)\n\ntrace3 = go.Scatter(x = temp1[\"time\"],\n                    y = temp1[\"returnsOpenPrevRaw10\"],\n                    marker = dict(color = color),\n                    name = c)\n\ntitle1 = \"Price Per Day\"\ntitle2 = \"Price Differences (1 Day)\"\ntitle3 = \"Price Differences (10 Days)\"","440408a9":"temp2 = market_train[(market_train[\"assetCode\"] == c) & \n                     (market_train[\"time\"] > \"2006-12-31\") & \n                     (market_train[\"time\"] < \"2008-01-01\")]\ncolor = generate_color()\ntrace4 = go.Scatter(x = temp2[\"time\"],\n                    y = temp2[\"open\"],\n                    marker = dict(color = color),\n                    name = c)\n\ntrace5 = go.Scatter(x = temp2[\"time\"],\n                    y = temp2[\"returnsOpenPrevRaw1\"],\n                    marker = dict(color = color),\n                    name = c)\n    \ntrace6 = go.Scatter(x = temp2[\"time\"],\n                    y = temp2[\"returnsOpenPrevRaw10\"],\n                    marker = dict(color = color),\n                    name = c)\n\ntitle4 = \"Price Per Day\"\ntitle5 = \"Price Differences (1 Day)\"\ntitle6 = \"Price Differences (10 Days)\"","9ecd2724":"temp3 = market_train[(market_train[\"assetCode\"] == c) & \n                     (market_train[\"time\"] > \"2007-10-31\") & \n                     (market_train[\"time\"] < \"2008-01-01\")]\ncolor = generate_color()\ntrace7 = go.Scatter(x = temp3[\"time\"],\n                    y = temp3[\"open\"],\n                    marker = dict(color = color),\n                    name = c)\n\ntrace8 = go.Scatter(x = temp3[\"time\"],\n                    y = temp3[\"returnsOpenPrevRaw1\"],\n                    marker = dict(color = color),\n                    name = c)\n\ntrace9 = go.Scatter(x = temp3[\"time\"],\n                    y = temp3[\"returnsOpenPrevRaw10\"],\n                    marker = dict(color = color),\n                    name = c)\n\ntitle7 = \"Price Per Day\"\ntitle8 = \"Price Differences (1 Day)\"\ntitle9 = \"Price Differences (10 Days)\"","b78113e0":"fig = tools.make_subplots(rows = 3, cols = 3, subplot_titles = (title1, title2, title3,\n                                                                title4, title5, title6,\n                                                                title7, title8, title9))\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\nfig.append_trace(trace4, 2, 1)\nfig.append_trace(trace5, 2, 2)\nfig.append_trace(trace6, 2, 3)\nfig.append_trace(trace7, 3, 1)\nfig.append_trace(trace8, 3, 2)\nfig.append_trace(trace9, 3, 3)\n\nfig[\"layout\"][\"xaxis7\"].update(title = \"Day\")\nfig[\"layout\"][\"xaxis8\"].update(title = \"Day\")\nfig[\"layout\"][\"xaxis9\"].update(title = \"Day\")\n\nfig[\"layout\"].update(height = 1000, width = 800,\n                     title = \"{} Open Price & Its Difference Overview\".format(c))\niplot(fig)","ffc59386":"color = generate_color()\ntrace1 = go.Scatter(x = temp1[\"time\"],\n                    y = temp1[\"close\"],\n                    marker = dict(color = color),\n                    name = c)\n\ntrace2 = go.Scatter(x = temp1[\"time\"],\n                    y = temp1[\"returnsClosePrevRaw1\"],\n                    marker = dict(color = color),\n                    name = c)\n\ntrace3 = go.Scatter(x = temp1[\"time\"],\n                    y = temp1[\"returnsClosePrevRaw10\"],\n                    marker = dict(color = color),\n                    name = c)\n\ntitle1 = \"Price Per Day\"\ntitle2 = \"Price Differences (1 Day)\"\ntitle3 = \"Price Differences (10 Days)\"","a6f675c4":"temp2 = market_train[(market_train[\"assetCode\"] == c) & \n                     (market_train[\"time\"] > \"2006-12-31\") & \n                     (market_train[\"time\"] < \"2008-01-01\")]\ncolor = generate_color()\ntrace4 = go.Scatter(x = temp2[\"time\"],\n                    y = temp2[\"close\"],\n                    marker = dict(color = color),\n                    name = c)\n\ntrace5 = go.Scatter(x = temp2[\"time\"],\n                    y = temp2[\"returnsClosePrevRaw1\"],\n                    marker = dict(color = color),\n                    name = c)\n\ntrace6 = go.Scatter(x = temp2[\"time\"],\n                    y = temp2[\"returnsClosePrevRaw10\"],\n                    marker = dict(color = color),\n                    name = c)\n\ntitle4 = \"Price Per Day\"\ntitle5 = \"Price Differences (1 Day)\"\ntitle6 = \"Price Differences (10 Days)\"","169c3f64":"temp3 = market_train[(market_train[\"assetCode\"] == c) & \n                     (market_train[\"time\"] > \"2007-10-31\") & \n                     (market_train[\"time\"] < \"2008-01-01\")]\ncolor = generate_color()\ntrace7 = go.Scatter(x = temp3[\"time\"],\n                    y = temp3[\"close\"],\n                    marker = dict(color = color),\n                    name = c)\n\ntrace8 = go.Scatter(x = temp3[\"time\"],\n                    y = temp3[\"returnsClosePrevRaw1\"],\n                    marker = dict(color = color),\n                    name = c)\n\ntrace9 = go.Scatter(x = temp3[\"time\"],\n                    y = temp3[\"returnsClosePrevRaw10\"],\n                    marker = dict(color = color),\n                    name = c)\n    \ntitle7 = \"Price Per Day\"\ntitle8 = \"Price Differences (1 Day)\"\ntitle9 = \"Price Differences (10 Days)\"","9f28ad18":"fig = tools.make_subplots(rows = 3, cols = 3, subplot_titles = (title1, title2, title3,\n                                                                title4, title5, title6,\n                                                                title7, title8, title9))\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\nfig.append_trace(trace4, 2, 1)\nfig.append_trace(trace5, 2, 2)\nfig.append_trace(trace6, 2, 3)\nfig.append_trace(trace7, 3, 1)\nfig.append_trace(trace8, 3, 2)\nfig.append_trace(trace9, 3, 3)\n\nfig[\"layout\"][\"xaxis7\"].update(title = \"Day\")\nfig[\"layout\"][\"xaxis8\"].update(title = \"Day\")\nfig[\"layout\"][\"xaxis9\"].update(title = \"Day\")\n\nfig[\"layout\"].update(height = 1000, width = 800,\n                     title = \"{} Close Price & Its Difference Overview\".format(c))\niplot(fig)","4d455652":"fig = tools.make_subplots(rows = len(top_trade_code), cols = 2)\n\nfor i, c in enumerate(top_trade_code):\n    temp = market_train[market_train[\"assetCode\"] == c][[\"time\", \"returnsOpenNextMktres10\"]]\n    trace = go.Scatter(x = temp[\"time\"],\n                       y = temp[\"returnsOpenNextMktres10\"],\n                       marker = dict(color = generate_color()),\n                       name = c)\n    fig.append_trace(trace, int(i\/\/2)+1, (i%2)+1)\n\nfig[\"layout\"].update(height = 800, width = 800,\n                     title = \"Returns Open Next Mktres Top 10 Trade Value Companies (10 Days)\")\niplot(fig)","bf4e7ea7":"fig = tools.make_subplots(rows = len(top_trade_code), cols = 2)\n\nfor i, c in enumerate(top_trade_code):\n    temp = market_train[(market_train[\"assetCode\"] == c) & \n                        (market_train[\"time\"] > \"2007-12-31\") & \n                        (market_train[\"time\"] < \"2010-01-01\")][[\"time\", \"returnsOpenNextMktres10\"]]\n    trace = go.Scatter(x = temp[\"time\"],\n                       y = temp[\"returnsOpenNextMktres10\"],\n                       marker = dict(color = generate_color()),\n                       name = c)\n    fig.append_trace(trace, int(i\/\/2)+1, (i%2)+1)\n\nfig[\"layout\"].update(height = 800, width = 800,\n                     title = \"Returns Open Next Mktres Top 10 Trade Value Companies (10 Days)\")\niplot(fig)","72e04c3e":"fig = tools.make_subplots(rows = len(top_trade_code), cols = 2)\n\nfor i, c in enumerate(top_trade_code):\n    temp = market_train[(market_train[\"assetCode\"] == c) & \n                        (market_train[\"time\"] > \"2008-12-31\") & \n                        (market_train[\"time\"] < \"2010-01-01\")][[\"time\", \"returnsOpenNextMktres10\"]]\n    trace = go.Scatter(x = temp[\"time\"],\n                       y = temp[\"returnsOpenNextMktres10\"],\n                       marker = dict(color = generate_color()),\n                       name = c)\n    fig.append_trace(trace, int(i\/\/2)+1, (i%2)+1)\n\nfig[\"layout\"].update(height = 800, width = 800,\n                     title = \"Returns Open Next Mktres Top 10 Trade Value Companies (10 Days)\")\niplot(fig)","ae3167de":"known_open_Mktres = market_train[market_train[\"returnsOpenPrevMktres10\"].notnull()]\n\nfig = tools.make_subplots(rows = len(top_trade_code), cols = 2)\nfor i, c in enumerate(top_trade_code):\n    temp = known_open_Mktres[known_open_Mktres[\"assetCode\"] == c]\n    color = generate_color()\n    trace1 = go.Scatter(x = temp[\"time\"],\n                        y = temp[\"returnsOpenPrevMktres10\"],\n                        marker = dict(color = color),\n                        name = c)\n    fig.append_trace(trace1, i+1, 1)\n    trace2 = go.Scatter(x = temp[\"time\"],\n                        y = temp[\"returnsOpenNextMktres10\"],\n                        marker = dict(color = color),\n                        name = c)\n    fig.append_trace(trace2, i+1, 2)\n    \nfig[\"layout\"].update(height = 1200, width = 800,\n                     title = \"Returns Open Prev Mktres10 v.s. Returns Open Next Mktres10 \")\niplot(fig)","69c7717c":"fig = tools.make_subplots(rows = len(top_trade_code), cols = 2)\nfor i, c in enumerate(top_trade_code):\n    temp = known_open_Mktres[(known_open_Mktres[\"assetCode\"] == c) & \n                             (known_open_Mktres[\"time\"] > \"2008-12-31\") &\n                             (known_open_Mktres[\"time\"] < \"2010-01-01\")]\n    color = generate_color()\n    trace1 = go.Scatter(x = temp[\"time\"],\n                        y = temp[\"returnsOpenPrevMktres10\"],\n                        marker = dict(color = color),\n                        name = c)\n    fig.append_trace(trace1, i+1, 1)\n    trace2 = go.Scatter(x = temp[\"time\"],\n                        y = temp[\"returnsOpenNextMktres10\"],\n                        marker = dict(color = color),\n                        name = c)\n    fig.append_trace(trace2, i+1, 2)\n    \nfig[\"layout\"].update(height = 1200, width = 800,\n                     title = \"Returns Open Prev Mktres10 v.s. Returns Open Next Mktres10 \")\niplot(fig)","3190c915":"known_close_Mktres = market_train[market_train[\"returnsClosePrevMktres10\"].notnull()]\n\nfig = tools.make_subplots(rows = len(top_trade_code), cols = 2)\nfor i, c in enumerate(top_trade_code):\n    temp = known_close_Mktres[known_close_Mktres[\"assetCode\"] == c]\n    color = generate_color()\n    trace1 = go.Scatter(x = temp[\"time\"],\n                        y = temp[\"returnsClosePrevMktres10\"],\n                        marker = dict(color = color),\n                        name = c)\n    fig.append_trace(trace1, i+1, 1)\n    trace2 = go.Scatter(x = temp[\"time\"],\n                        y = temp[\"returnsOpenNextMktres10\"],\n                        marker = dict(color = color),\n                        name = c)\n    fig.append_trace(trace2, i+1, 2)\n    \nfig[\"layout\"].update(height = 1200, width = 800,\n                     title = \"Returns Close Prev Mktres10 v.s. Returns Open Next Mktres10 \")\niplot(fig)","400ae1ec":"fig = tools.make_subplots(rows = len(top_trade_code), cols = 2)\nfor i, c in enumerate(top_trade_code):\n    temp = known_close_Mktres[(known_close_Mktres[\"assetCode\"] == c) & \n                              (known_close_Mktres[\"time\"] > \"2008-12-31\") &\n                              (known_close_Mktres[\"time\"] < \"2010-01-01\")]\n    color = generate_color()\n    trace1 = go.Scatter(x = temp[\"time\"],\n                        y = temp[\"returnsClosePrevMktres10\"],\n                        marker = dict(color = color),\n                        name = c)\n    fig.append_trace(trace1, i+1, 1)\n    trace2 = go.Scatter(x = temp[\"time\"],\n                        y = temp[\"returnsOpenNextMktres10\"],\n                        marker = dict(color = color),\n                        name = c)\n    fig.append_trace(trace2, i+1, 2)\n    \nfig[\"layout\"].update(height = 1200, width = 800,\n                     title = \"Returns Close Prev Mktres10 v.s. Returns Open Next Mktres10 \")\niplot(fig)","9ecc88c8":"universe_count = market_train[\"universe\"].value_counts()\ntrace = go.Bar(x = [\"Score\", \"Not Score\"],\n               y = [universe_count.values[0], universe_count.values[1]],\n               marker = dict(color = [\"blue\", \"red\"]))\nlayout = dict(title = \"Universe Bar Plot\",\n              yaxis = dict(title = \"Count\"))\niplot(dict(data = [trace], layout = layout))","83cb3600":"news_train.head()","f8353799":"news_train.describe()","a7919827":"news_train.isnull().sum()","3408a02a":"news_train[\"time\"] = news_train[\"time\"].dt.strftime(date_format = '%Y-%m-%d')\nnews_train[\"sourceTimestamp\"] = news_train[\"sourceTimestamp\"].dt.strftime(date_format = '%Y-%m-%d')\nnews_train[\"firstCreated\"] = news_train[\"firstCreated\"].dt.strftime(date_format = '%Y-%m-%d')","b1748e5a":"temp = news_train[news_train[\"assetName\"] == \"Bank of America Corp\"]","d4cd28b6":"temp.head()","dd4e51d3":"headline_tag_count = news_train[\"headlineTag\"].value_counts()\ntrace = go.Bar(x = headline_tag_count.index,\n               y = headline_tag_count.values,\n               marker = dict(color = [generate_color() for _ in range(len(headline_tag_count.index))]))\nlayout = dict(title = \"Headline Tag Bar Plot\",\n              xaxis = dict(title = \"Headline Tag\"),\n              yaxis = dict(title = \"Count\"))\niplot(dict(data = [trace], layout = layout))","b2672030":"trace = go.Bar(x = headline_tag_count.index[1:],\n               y = headline_tag_count.values[1:],\n               marker = dict(color = [generate_color() for _ in range(len(headline_tag_count.index[1:]))]))\nlayout = dict(title = \"Headline Tag Bar Plot\",\n              xaxis = dict(title = \"Headline Tag\"),\n              yaxis = dict(title = \"Count\"))\niplot(dict(data = [trace], layout = layout))","baeacb3a":"urgency_count = news_train[\"urgency\"].value_counts()\ntrace = go.Bar(x = urgency_count.index,\n               y = urgency_count.values,\n               marker = dict(color = [generate_color(), generate_color()]))\nlayout = dict(title = \"News Urgency Count\")\niplot(dict(data = [trace], layout = layout))","00ab1518":"provider_count = news_train[\"provider\"].value_counts()\ntrace = go.Bar(x = provider_count.index,\n               y = provider_count.values,\n               marker = dict(color = [generate_color() for _ in range(len(provider_count.index))]))\nlayout = dict(title = \"News Provider & Their News Count\")\niplot(dict(data = [trace], layout = layout))","77946be0":"company_count = news_train[\"companyCount\"].unique()\n\nfor year in range(2007, 2017):\n    data = []\n    for c in list(sorted(company_count)):\n        temp = news_train[(news_train[\"companyCount\"] == c) & \n                          (news_train[\"time\"] >= \"{}-01-01\".format(year)) & \n                          (news_train[\"time\"] < \"{}-01-01\".format(year+1))]\n        trace = go.Box(y = temp[\"bodySize\"],\n                       name = \"Company Count = {}\".format(c),\n                       marker = dict(color = generate_color()),\n                       boxpoints = False)\n        data.append(trace)\n\n    layout = dict(title = \"Body Size v.s. Company Count Box Plot in {}\".format(year),\n                  xaxis = dict(title = \"Company Count\"),\n                  yaxis = dict(title = \"Body Size\"))\n    iplot(dict(data = data, layout = layout))","5994bf85":"years = list(range(2007, 2017))\nfig = tools.make_subplots(rows = len(years), cols = 1)\n\nfor i, year in enumerate(years):\n    temp = news_train[(news_train[\"assetName\"] == \"Bank of America Corp\") & \n                      (news_train[\"time\"] >= \"{}-01-01\".format(year)) & \n                      (news_train[\"time\"] < \"{}-01-01\".format(year+1))]\n    trace = go.Scatter(x = temp[\"sentenceCount\"],\n                       y = temp[\"wordCount\"],\n                       name = year,\n                       mode = \"markers\",\n                       marker = dict(color = generate_color()))\n    fig.append_trace(trace, i+1, 1)\n\nfig[\"layout\"][\"xaxis{}\".format(len(years))].update(title = \"Sentence Count\")\nfig[\"layout\"].update(height = 1200, width = 800,\n                     title = \"Sentence Count v.s. Word Count of Bank of America\")\niplot(fig)","47e4ca92":"def candle_sticks(data):\n    data[\"high\"] = data[\"open\"]\n    data[\"low\"] = data[\"close\"]\n    \n    for idx, row in data.iterrows():\n        if row[\"close\"] > row[\"open\"]:\n            data.loc[idx, \"high\"] = row[\"close\"]\n            data.loc[idx, \"low\"] = row[\"open\"]\n            \n    return data","4c618659":"temp = news_train[(news_train[\"assetName\"] == \"Bank of America Corp\") &\n                  (news_train[\"time\"] > \"2008-12-31\") &\n                  (news_train[\"time\"] < \"2009-02-01\")]\ntrace1 = go.Scatter(x = temp[\"time\"],\n                    y = temp[\"relevance\"],\n                    mode = \"markers+lines\",\n                    marker = dict(color = generate_color()),\n                    name = \"Relevance\")\ntrace2 = go.Scatter(x = temp[\"time\"],\n                    y = temp[\"sentimentNegative\"],\n                    mode = \"markers\",\n                    marker = dict(color = generate_color()),\n                    name = \"Sentiment Negative\")\ntrace3 = go.Scatter(x = temp[\"time\"],\n                    y = temp[\"sentimentNeutral\"],\n                    mode = \"markers\",\n                    marker = dict(color = generate_color()),\n                    name = \"Sentiment Neutral\")\ntrace4 = go.Scatter(x = temp[\"time\"],\n                    y = temp[\"sentimentPositive\"],\n                    mode = \"markers\",\n                    marker = dict(color = generate_color()),\n                    name = \"Sentiment Positive\")\nlayout = dict(title = \"Relevance & Sentiment over time (Bank of America Corp)\",\n              xaxis = dict(title = \"Day\"))\niplot(dict(data = [trace1, trace2, trace3, trace4], layout = layout))\n\ntemp = market_train[(market_train[\"assetCode\"] == \"BAC.N\") & \n                    (market_train[\"time\"] > \"2008-12-31\") & \n                    (market_train[\"time\"] < \"2009-02-01\")][[\"time\", \"open\", \"close\"]]\n\ntemp2 = candle_sticks(temp)\n    \ntrace = go.Candlestick(x = temp2[\"time\"],\n                       open = temp2[\"open\"],\n                       low = temp2[\"low\"],\n                       high = temp2[\"high\"],\n                       close = temp2[\"close\"],\n                       increasing = dict(line = dict(color = generate_color())),\n                       decreasing = dict(line = dict(color = generate_color())))\n    \nlayout = dict(title = \"Candlestick Chart for Bank of America Corp in Jan 2009\", \n              xaxis = dict(title = \"Day\"),\n              yaxis = dict(title = \"Price (USD)\"))\niplot(dict(data = [trace], layout = layout))","6af8f02d":"* At the first glance, 'returnsOpenPrevMktres10' and 'reuturnsOpenNextMktres10' have the same trend over time.","a997a99c":"## To be continued...","d24c4939":"### Returns Open Next Mktres 10","0b8f3992":"### Urgency","a42ba629":"### Company Count & Body Size","d4da4abf":"### Sentence Count & Word Count\n\nFor these two features, we will focus on Bank of America because we believe one example can present others in this case","8dd1609c":"### Headline Tag","0e02d922":"### Provider","edfa2c0c":"### Overview of News Data","da7c9b06":"### Volume","c30e6e33":"* Based on the data description, these 110 asset-names are not in the test set\n* About $20\\%$ of asset code with unknown names has at least a year trading information","91383506":"* There are only 25 Urgency 2, which indicates this features is unbalance.\n","35b19812":"### Relevance & Sentiment","98ad5590":"### Returns Open\/Close Prev Mktres 10 v.s. Returns Open Next Mktres 10 ","2ab8257c":"### Time","a79a598f":"## Market Data","3f88c70e":"### AssetCode and AssetName","797f590a":"#### Import packages and data","30bf3512":"* Open and returnsOpenPrevRaw1\/Close and returnsClosePrevRaw1 have a linear relation. \n* returnsOpen(Close)PrevRaw1(10) cancel some noise on price. ","9184e3d5":"* During Oct 2014 and Nov 2014, there are about 300 assetCode that disappear from the dataset. \n* There are about 1350 AssetCode  that contain full trading infor from 2007 to 2016. ","c4ca872b":"This notebook provides an overview of each feature from the 2-$\\sigma$ dataset.","9561a16e":"### Universe","c1807602":"* News relevance doesn't affect the stock maket\n* However, sentiment of articles do. For example, if articles of a given day contain negative information of a company, the price would drop; otherwise, prise raise. ","69584efc":"* Over $95\\%$ of headline tag are filled with NOTHING.\n* Without taking accout of empty tag, about $30\\%$ of news are tagged as brief.","22655f34":"### Open & Close","9365f3e9":"* Bear market occures in 2008, but bull market happens in 2009. (President Election?)\n* There is a major bounce from 2008 to 2009. We need to read the news data to know what happended during that time.","f80fbc61":"Take a peek on Bank Of America","a3a9da7e":"### Overview of Market Data","97356758":"* ReturnsOpen\/CloseMktres10 is linear correlated with ReturnsOpenNextMktres10.","8b787998":"* Over $90\\%$ of news are written by RTRS","0a610325":"### Return Close Prev Raw & Return Open Prev Raw","5c3b00be":"* At the beginning of 2009, some have big jump of trading volume.","e5bb53e0":"## News Data","6907e1ce":"* It is surprised that one article talks more than 10 companies, but they are rare.\n* However, articles' body size of company count that are greater than 15 increase as time moving forward.","f69b317b":"Without loss of generality, the specific publish time of an article does not have big effect on stock market."}}