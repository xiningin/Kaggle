{"cell_type":{"e37471a4":"code","ad433966":"code","13b97c67":"code","9cd744d5":"code","b9dbed6e":"code","1d3991ca":"code","f38c4362":"code","9109b330":"code","b21f9735":"code","0fd468d2":"code","2d4154ca":"code","125de1f0":"code","4aa1cdc7":"code","eae32c6c":"code","135e41ad":"code","164184a6":"code","f99e0a7a":"code","3e843710":"code","4d802a65":"code","83023951":"code","55a52780":"code","4b4c9087":"code","2825075a":"code","93dce77d":"code","e138640a":"code","2dec6c7f":"code","18fe9b7e":"code","200b3eae":"code","fbfc2b93":"code","a9919383":"code","daab1908":"code","b8dca7fc":"code","c1f126c9":"code","c36b641d":"code","7b7d6959":"code","169e59db":"code","187f09e8":"code","2e656125":"code","7e383adc":"code","d45d1219":"code","ef6323a0":"code","f9ec15e1":"code","bc4e4cd7":"code","3857e025":"code","5af689c5":"code","c78ebe6d":"code","50b77036":"code","9834b8a1":"code","517aec70":"code","332eb9b1":"code","9fd42562":"code","de1c89e6":"code","49cc75e9":"code","2118a443":"code","12934c3e":"code","71c64da3":"code","dcd20c78":"code","5a6aa158":"code","becf4bbb":"code","c9229498":"code","29ea7e40":"code","f81d9182":"code","7af9a7e9":"code","db630209":"code","6940b7aa":"code","25398acd":"code","4d5581f8":"code","84adce77":"code","97b47499":"code","5906fb21":"code","235f89d0":"code","07f10cf9":"code","07b1dc9f":"code","1c0b325c":"code","c254b225":"code","f86b5f30":"code","0d868929":"code","4b9cced8":"code","a31fef28":"code","e291b0f4":"code","e6477735":"code","f771f27d":"code","a4cf99b8":"code","3111b72d":"code","f157ccff":"code","939d0b56":"code","b8f0dfef":"code","9e0aecf6":"code","43185476":"code","9f5ba454":"code","bc0d989f":"code","c6cd1fcc":"code","efe9bd70":"code","a8d774e5":"code","33dc9b07":"code","9b1064d2":"code","8144ba75":"code","f6f679e4":"code","20de1808":"code","162ee72e":"code","da5f0401":"code","cf22b879":"code","dab9ac06":"code","4d46a223":"code","77d4da67":"code","e3aa86a3":"code","4b9b2d12":"markdown","b6a3cbbf":"markdown","903e512b":"markdown","5a6bb61c":"markdown","aa44e0ec":"markdown","a5000975":"markdown","017a052b":"markdown","0fdc9de6":"markdown","d972dacc":"markdown","8e0d0737":"markdown","0ce1dbef":"markdown","ee264cf6":"markdown","9bf8abc5":"markdown","da3a95f2":"markdown","2dab37f5":"markdown","6b857ef5":"markdown","800d3d27":"markdown","7a9ca297":"markdown","ae98ada8":"markdown","de89c577":"markdown","b164bf50":"markdown","98517ee7":"markdown","577ad263":"markdown","1bc2ca97":"markdown"},"source":{"e37471a4":"import numpy as np \nimport pandas as pd \nfrom sklearn import preprocessing\nimport statistics\nimport category_encoders as ce\nfrom IPython.display import HTML\nimport base64\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn import tree\nimport matplotlib.pyplot as plt\nimport math\nfrom pprint import pprint\nfrom sklearn.model_selection import RandomizedSearchCV\nimport scipy\nfrom scipy.cluster import hierarchy as hc","ad433966":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","13b97c67":"data = pd.read_csv('..\/input\/fifa19\/data.csv')","9cd744d5":"data.shape","b9dbed6e":"data.head()\n","1d3991ca":"for i, col in enumerate(data.columns):\n    print(i, col)","f38c4362":"\nfor i, col in enumerate(data.columns):    \n    if i==0:\n        dict1={col : data[col].isna().sum(axis=0) }\n    else: \n        dict1.update([(col, data[col].isna().sum(axis=0))])\n        \ndict1","9109b330":"data.info()","b21f9735":"data = data.drop(['ID','Photo','Flag','Club Logo'], axis=1)","0fd468d2":"data['Value']=data['Value'].str.replace('\u20ac','')","2d4154ca":"for i in range(data.shape[0]):\n    word=data['Value'][i]\n    dotControl=word.find('.')\n    \n    if dotControl == -1:\n        data['Value']=data['Value'].str.replace('K','00')\n        data['Value']=data['Value'].str.replace('M','00000')\n    else:\n        data['Value']=data['Value'].str.replace('K','000')\n        data['Value']=data['Value'].str.replace('M','000000')","125de1f0":"data['Value']=data['Value'].str.replace('.','')\ndata['Value']=data['Value'].astype('float64')","4aa1cdc7":"data['Value'].head(10)","eae32c6c":"data['Wage']=data['Wage'].str.replace('\u20ac','')\ndata['Wage']=data['Wage'].str.replace('K','000')\ndata['Wage']=data['Wage'].str.replace('M','000000')\ndata['Wage']=data['Wage'].astype('float64')","135e41ad":"data['Work Rate'].unique()","164184a6":"data['Work Rate'].dropna(axis=0, inplace=True)","f99e0a7a":"data['Attack_Rate']=data['Work Rate'].apply(lambda x:x.split('\/')[0])\ndata['Defence_Rate']=data['Work Rate'].apply(lambda x:x.split('\/')[1])","3e843710":"data['Attack_Rate'].dropna(axis=0, inplace=True)","4d802a65":"\"\"\"cat = pd.Categorical(data['Attack_Rate'], categories=['Medium', 'High', 'Low'])\nattack_Series=pd.Series(data['Attack_Rate'],dtype='category')\nattack_Series.cat.categories\nattack_Series.cat.codes\"\"\"","83023951":"data['Attack_Rate']=data['Attack_Rate'].str.replace('Medium','1')\ndata['Attack_Rate']=data['Attack_Rate'].str.replace('High','2')\ndata['Attack_Rate']=data['Attack_Rate'].str.replace('Low','0')\ndata['Attack_Rate']=data['Wage'].astype('int64')","55a52780":"\"\"\"cat1 = pd.Categorical(data['Defence_Rate'], categories=['Medium', 'High', 'Low'])\ndefence_Series=pd.Series(data['Defence_Rate'],dtype='category')\ndefence_Series.cat.categories\ndefence_Series.cat.codes\"\"\"","4b4c9087":"data['Defence_Rate'].unique()","2825075a":"data['Defence_Rate'].isna().sum()","93dce77d":"data['Defence_Rate']=data['Defence_Rate'].str.replace('Medium','1')\ndata['Defence_Rate']=data['Defence_Rate'].str.replace('High','2')\ndata['Defence_Rate']=data['Defence_Rate'].str.replace('Low','0')\ndata['Defence_Rate']=data['Defence_Rate'].str.replace(' ','')\ndata['Defence_Rate'].dropna(axis=0 , inplace=True)\ndata['Defence_Rate']=data['Defence_Rate'].astype('int64')","e138640a":"data.info()","2dec6c7f":"data = data.drop(['Work Rate'], axis=1)","18fe9b7e":"data['Body Type'].unique()","200b3eae":"data['Body Type'].isna().sum()","fbfc2b93":"data['Body Type']=data['Body Type'].replace(np.nan, 'Drop_This')","a9919383":"le = preprocessing.LabelEncoder()\ndata['Body Type']= le.fit_transform(data['Body Type'])\n","daab1908":"data['Body Type'].value_counts()","b8dca7fc":"data['Body_Type1'] = data[\"Body Type\"]\ndata = data.set_index(\"Body_Type1\")\ndata = data.drop(3, axis=0)","c1f126c9":"data['Position'].unique()","c36b641d":"data['Position'].isna().sum()","7b7d6959":"data['Position']=data['Position'].replace(np.nan, 'Drop_This')\ndata['Position']= le.fit_transform(data['Position'])\ndata['Position'].value_counts()","169e59db":"data['Position1'] = data[\"Position\"]\ndata = data.set_index(\"Position1\")\ndata = data.drop(5, axis=0)","187f09e8":"data['Joined']=data['Joined'].str.replace(' ','')\ndata['Joined']=data['Joined'].str.split(',').str[1]\ndata['Joined']=data['Joined'].replace(np.nan,'2018')\ndata['Joined']=data['Joined'].astype('int64')\ndata['Joined'].head()","2e656125":"\"\"\"data['Joined'].isna().sum()\ndata['Joined'].value_counts()\"\"\"","7e383adc":"data['Loaned From'].isna().sum()","d45d1219":"data = data.drop(['Loaned From','Contract Valid Until'], axis=1)","ef6323a0":"def height_to_int(df_height):\n    try:\n        feet = int(df_height[0])\n        dlm = df_height[-2]\n\n        if dlm == \"'\":\n            height = round((feet * 12 + int(df_height[-1])) * 2.54, 0)\n        elif dlm != \"'\":\n            height = round((feet * 12 + int(df_height[-2:])) * 2.54, 0)\n    except ValueError:\n        height = 0\n    return height\n\ndata['Height_int'] = data['Height'].apply(height_to_int)","f9ec15e1":"data = data.drop(['Height'], axis=1)","bc4e4cd7":"data['Weight']=data['Weight'].str.replace('lbs','')","3857e025":"data['Weight']=data['Weight'].astype('int64')","5af689c5":"for i, col in enumerate(data.columns):    \n    if i >= 20 and i <=45:\n        data[col]=data[col].str.split('+').str[0]\n        data[col]=data[col].replace(np.nan,'0')\n        data[col]=data[col].astype('int64')\n        x_median=statistics.median(data[col])\n        data[col]=data[col].replace(0,x_median)\n    else: \n        i= i+1","c78ebe6d":"data=data.reset_index()","50b77036":"data['Release Clause']=data['Release Clause'].str.replace('\u20ac','')\ndata['Release Clause']=data['Release Clause'].replace(np.nan,'0')","9834b8a1":"for j in range(data.shape[0]):\n    word1=data['Release Clause'][j]\n    dotControl1=word1.find('.')\n    \n    if dotControl1 == -1:\n        data['Release Clause']=data['Release Clause'].str.replace('K','00')\n        data['Release Clause']=data['Release Clause'].str.replace('M','00000')\n    else:\n        data['Release Clause']=data['Release Clause'].str.replace('K','000')\n        data['Release Clause']=data['Release Clause'].str.replace('M','000000')\n        \ndata['Release Clause']=data['Release Clause'].str.replace('.','')\ndata['Release Clause']=data['Release Clause'].astype('float64')\nx1_median=statistics.median(data['Release Clause'])\ndata['Release Clause']=data['Release Clause'].replace(0,x1_median)","517aec70":"data['Real Face'].unique()","332eb9b1":"data_real_face=pd.get_dummies(data['Real Face'])\ndata_real_face","9fd42562":"data= pd.concat([data,data_real_face],axis=1,sort=False)","de1c89e6":"data['Preferred Foot'].unique()","49cc75e9":"#data = data.drop(['Position1','','Unnamed: 0','Name'], axis=1)","2118a443":"data_pref_foot=pd.get_dummies(data['Preferred Foot'])\ndata_pref_foot","12934c3e":"data= pd.concat([data,data_pref_foot],axis=1,sort=False)","71c64da3":"data = data.drop(['Real Face','Preferred Foot','Position1','Unnamed: 0','Name'], axis=1)","dcd20c78":"data.info()","5a6aa158":"encoder= ce.BinaryEncoder(cols=['Nationality','Club',],return_df=True)\nlast_data=encoder.fit_transform(data)\nlast_data","becf4bbb":"last_data.info()","c9229498":"def create_download_link(df, title = \"Download CSV file\", filename = \"data.csv\"):  \n    csv = df.to_csv()\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)","29ea7e40":"create_download_link(last_data)","f81d9182":"last1_data=last_data","7af9a7e9":"sub_last_df=last_data.iloc[:4000, :]\nsub_last_df.head()","db630209":"y_sub=sub_last_df['Value']\nsub_last_df=sub_last_df.drop(['Value'],axis=1)","6940b7aa":"X_train_sub ,X_test_sub, y_train_sub, y_test_sub = train_test_split(sub_last_df,y_sub, test_size=0.3, random_state=42)\nX_train_sub ,X_valid_sub, y_train_sub, y_valid_sub = train_test_split(X_train_sub,y_train_sub, test_size=0.2, random_state=42)","25398acd":"y_last=last_data['Value']\nlast_keep=last_data['Value']\nlast_data=last_data.drop(['Value'],axis=1)","4d5581f8":"X_train ,X_test, y_train, y_test = train_test_split(last_data,y_last, test_size=0.3, random_state=42)","84adce77":"X_train ,X_valid, y_train, y_valid = train_test_split(X_train,y_train, test_size=0.2, random_state=42)","97b47499":"m = RandomForestRegressor(n_jobs=-1) #n_jobs=-1 means use all processors\nm.fit(X_train_sub, y_train_sub)\nm.score(X_train_sub,y_train_sub) #r^2 by default","5906fb21":"print(mean_squared_error(m.predict(X_train_sub),y_train_sub))\nprint(mean_squared_error(m.predict(X_valid_sub),y_valid_sub))\nprint('\\n')\n\nprint(mean_squared_log_error(m.predict(X_train_sub),y_train_sub))\nprint(mean_squared_log_error(m.predict(X_valid_sub),y_valid_sub))\nprint('\\n')\n\nprint(m.score(X_train_sub,y_train_sub))\nprint(m.score(X_valid_sub,y_valid_sub))","235f89d0":"print('Parameters currently in use:\\n')\npprint(m.get_params())","07f10cf9":"\"\"\"# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\npprint(random_grid)\"\"\"","07b1dc9f":"\"\"\"m_random= RandomizedSearchCV(estimator = m, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)\n\nm_random.fit(X_train,y_train)\"\"\"","1c0b325c":"m= RandomForestRegressor(n_estimators=40, n_jobs=-1)\nm.fit(X_train,y_train)\nprint(m.score(X_train,y_train))\nprint(m.score(X_valid_sub,y_valid_sub))","c254b225":"estimator=m.estimators_[0]","f86b5f30":"fig,axes =plt.subplots(nrows=1,ncols=1, figsize=(10,10),dpi=300)\ntree.plot_tree(estimator,feature_names=last_data.columns,filled=True)","0d868929":"X_train_sub.describe()","4b9cced8":"X_test_sub.describe()","a31fef28":"m= RandomForestRegressor(n_estimators=40, n_jobs=-1, oob_score=True)\nm.fit(X_train_sub,y_train_sub)\nprint(m.score(X_train_sub,y_train_sub))","e291b0f4":"# when i added min_samples_leaf. performance of modes is decreased","e6477735":"m= RandomForestRegressor(n_estimators=40, n_jobs=-1, oob_score=True,max_features=0.8)\nm.fit(X_train_sub,y_train_sub)\nprint(m.score(X_train_sub,y_train_sub))\nprint(m.score(X_valid_sub,y_valid_sub))","f771f27d":"m= RandomForestRegressor(n_estimators=40, n_jobs=-1, oob_score=True,max_features=0.8)\nm.fit(X_train,y_train)\nprint(m.score(X_train,y_train))\nprint(m.score(X_valid_sub,y_valid_sub))","a4cf99b8":"importances = m.feature_importances_\nimportances","3111b72d":"features = last_data.columns\nimp = pd.DataFrame({'Features': features, 'Importance': importances})\nimp.head()","f157ccff":"imp = imp.sort_values(by = 'Importance', ascending = False)\nimp.head()","939d0b56":"imp['Sum Importance'] = imp['Importance'].cumsum()\nimp = imp.sort_values(by = 'Importance')\nimp.head()","b8f0dfef":"plt.figure(figsize=(20,20))\nplt.barh(imp['Features'], imp['Importance'])\nl1 = plt.axhline(len(imp) - (len(imp['Features'][imp['Sum Importance'] < 0.50]) + 1.5), linestyle='-.', color = 'r')\nl2 = plt.axhline(len(imp) - (len(imp['Features'][imp['Sum Importance'] < 0.90]) + 1.5), linestyle='--', color = 'r')\nl3 = plt.axhline(len(imp) - (len(imp['Features'][imp['Sum Importance'] < 0.99]) + 1.5), linestyle='-', color = 'r')\nplt.legend(title = 'Cut-offs of acumulated importance', handles=(l1, l2, l3), labels = ('50%', '90%', '99%'))\nplt.title('Feature importance in group assignment')","9e0aecf6":"last1_data=last_data","43185476":"last1_data.head()","9f5ba454":"keep_columns = imp[imp[\"Importance\"]>0.005][imp.columns]; \nlen(keep_columns)","bc0d989f":"keep_columns","c6cd1fcc":"last1_keep = last1_data[keep_columns].copy()","efe9bd70":"last1_data.info()","a8d774e5":"keep_columns['Features'].unique()","33dc9b07":"df_keep = last_data[['Position', 'GKHandling', 'GKPositioning', 'Penalties', 'GKDiving',\n       'Aggression', 'Interceptions', 'ShotPower', 'BallControl',\n       'SprintSpeed', 'Jersey Number', 'Finishing', 'RW', 'GKKicking',\n       'Crossing', 'Marking', 'Acceleration', 'Curve', 'SlidingTackle',\n       'Weight', 'Dribbling', 'Strength', 'RF', 'Composure', 'Reactions',\n       'LAM', 'FKAccuracy', 'Stamina', 'LongShots', 'Jumping', 'Special',\n       'CAM', 'Wage', 'Attack_Rate', 'RAM', 'Age', 'LM', 'LF',\n       'Potential', 'RM', 'Release Clause', 'Overall']]","9b1064d2":"df_keep.info()","8144ba75":"df_keep.shape[0]","f6f679e4":"last_keep.shape","20de1808":"X_train_1, X_test_1, y_train_1, y_test_1 = train_test_split(df_keep, last_keep, test_size=0.33, random_state=42)\nX_train_1, X_valid_1, y_train_1, y_valid_1 = train_test_split(X_train_1, y_train_1, test_size=0.33, random_state=42)","162ee72e":"t = RandomForestRegressor(n_estimators=40, min_samples_leaf=3, max_features=0.5,\n                          n_jobs=-1, oob_score=True)\nt.fit(X_train_1, y_train_1)\nprint(t.score(X_train_1,y_train_1))\nprint(t.score(X_valid_1,y_valid_1))","da5f0401":"t = RandomForestRegressor(n_estimators=100, min_samples_leaf=1, max_features=0.5,\n                          n_jobs=-1, oob_score=True)\nt.fit(X_train_1, y_train_1)\nprint(t.score(X_train_1,y_train_1))\nprint(t.score(X_valid_1,y_valid_1))","cf22b879":"t = RandomForestRegressor(n_estimators=1000, min_samples_leaf=4, max_features=0.8,\n                          n_jobs=-1, oob_score=True)\nt.fit(X_train_1, y_train_1)\nprint(t.score(X_train_1,y_train_1))\nprint(t.score(X_valid_1,y_valid_1))","dab9ac06":"scipy.stats.spearmanr(df_keep).correlation","4d46a223":"??hc","77d4da67":"corr = np.round(scipy.stats.spearmanr(df_keep).correlation, 4)\ncorr_condensed = hc.distance.squareform(1-corr)\nz = hc.linkage(corr_condensed, method='average')\nfig = plt.figure(figsize=(16,20))\ndendrogram = hc.dendrogram(z, labels=df_keep.columns, orientation='left', leaf_font_size=16)\nplt.show()","e3aa86a3":"print(t.oob_score_)","4b9b2d12":"LS,ST,RS... Columns","b6a3cbbf":"Creating Random Forest","903e512b":"Height inch to cm","5a6bb61c":"Body Type Column","aa44e0ec":"Work Rate Column","a5000975":"Position Column","017a052b":"Weight","0fdc9de6":"Binary Encoding(Nationality and Club columns)","d972dacc":"Try Try Try !...","8e0d0737":"Label Encoding","0ce1dbef":"Loaned From Column","ee264cf6":"Wage Column","9bf8abc5":"Create Sub Sample","da3a95f2":"Real Face Column","2dab37f5":"Value Column","6b857ef5":"Single Tree","800d3d27":"Download your df as csv format","7a9ca297":"Miss Values","ae98ada8":"Joined Column","de89c577":"Release Clause Column","b164bf50":"Train - Validation - Test Split ","98517ee7":"Plotting a Tree","577ad263":"For feature importance","1bc2ca97":"Feature importance\n"}}