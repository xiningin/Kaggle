{"cell_type":{"c553aaa7":"code","a36da956":"code","93d82226":"code","3e85e609":"code","a12c0027":"code","0c92a062":"code","5bcfc0d9":"code","32e90494":"code","9b43fcd7":"code","e74b97a8":"code","4636bbbb":"code","1a3e7d8b":"code","762cdcd7":"code","4e68f5eb":"code","d437d177":"code","622ba635":"code","9feb8eb6":"code","806d351c":"code","7c3f571e":"code","7d15380c":"markdown","8f99133e":"markdown","41fd794d":"markdown","87b4a2b4":"markdown","6e6281e4":"markdown","36251ca6":"markdown","e231e000":"markdown","72001c92":"markdown","1d1a6253":"markdown","5873e296":"markdown","8ac8db1a":"markdown","5880d684":"markdown"},"source":{"c553aaa7":"# Variable: A named reference to a value\nquantity = 144","a36da956":"# Number: numbers come in two flavors\n# Integer: whole numbers (e.g. 1,2,3)\ni = 12\n# Float: A floating-point\/decimal number can hold fractional values (e.g. 1.0, 0.25 13.79)\nf = 33.33\nhalf = 1.0 \/ 2.0","93d82226":"# String: An ordered sequence of characters (individual letters, numbers, or symbols)\n\nstudent_name = \"Alice Jones\"","3e85e609":"# List: A list is an ordered collection of values that can be referenced by position in the list [0,1,2,3,...]\n# 0 is the index of the first item, 1 is the second item 2 is the third item etc\n# -1 is the last item -2 is the second to the last item\npeople = [\"Bob\", \"Carol\", \"Ted\", \"Alice\"]\nfirst_person = people[0]\nlast_person = people[-1]\n\nquarterly_sales_for_year = [100, 75, 50, 200]\nq3 = quarterly_sales_for_year[2]","a12c0027":"#Dictionary: a dictionary is an unordered collection of values that can be accessed by a name known as a key like a phone book or library\nphone_book = {\n    \"Bob\": \"555-555-2222\", \n    \"Carol\": \"555-555-3333\", \n    \"Ted\": \"555-555-4444\", \n    \"Alice\": \"555-555-1111\"\n}\nalice_number = phone_book[\"Alice\"]","0c92a062":"#Boolean: A Boolean is a binary logical value. e.g. True or False\nis_a_student = True\nis_cheating = False","5bcfc0d9":"###\n# EXPRESSIONS AND OPERATORS\n###","32e90494":"sum = 2 + 2\nproduct = 3 * 4\nfraction = 1 \/ 2\nmodulus_remainder = 5 % 4\n\n#Boolean Expressions\nis_greater = 7 > 9\nis_equal = (9 == (4 + 5))","9b43fcd7":"# CONDITIONALS\n# if, elif, else\nstate = \"bad\"\nif state == \"good\":\n    destination = \"heaven\"\nelif state == \"bad\":\n    destination = \"hell\"\nelse:\n    destination = \"purgatory\"","e74b97a8":"# While\n\nhappy = True\nclaps = 0\nlimit = 2\n\nwhile happy:\n    if claps <= limit:\n        print(f\"Clap {claps}\")\n    else:\n        happy = False\n        \n    claps = claps + 1  #  CLEAREST\n    # claps += 1       #  SUCCINCT & AVAILABLE IN PYTHON\n    # claps++          #  NOT AVAILABLE IN PYTHON\n","4636bbbb":"# For\npeople = [\"Bob\", \"Carol\", \"Ted\", \"Alice\"]\nfor person in people:\n    print(person)","1a3e7d8b":"###\n# DEFINING FUNCTIONS\n###\n\n#built in functions\nprint(len(\"word, again\"))\nprint(\"BINARY:\",  bin(3 * 4))\nprint(len(str(bin(3 * 4))))\n## Functions are a sequence of code instructions you can call by name to avoid copy paste modify.\n# like a useful formula\n\ndef celcius(farenheit):\n    output = ((farenheit - 32) * 5) \/ 9\n    return output\n\n# D on't\n# R epeat\n# Y ourself\n\nprint (\"100 -> \" + str(celcius(100)))\nprint (f\"100 -> {str(celcius(100))} .\")","762cdcd7":"oneThroughFive = range(1,6)\n# up to but not including the number on the right.\n# [1,2,3,4,5]\n\nzeroToFour = range(0,5) \n# Up to but not including the number on the right.\n#  [0,1,2,3,4]\nprint(list(oneThroughFive))\nprint(list(zeroToFour))\n","4e68f5eb":"###\n# Classes and Modules\n###\nclass Person(object):\n    #CONSTRUCTOR\n    def __init__(self, first_name, last_name):\n        #ATTRIBUTES - PROPERTIES\n        self.first_name = first_name\n        self.last_name = last_name\n    #METHOD\n    def full_name(self):\n        return self.first_name + \" \" + self.last_name\n\np = Person(\"Kevin\", \"Long\")\nprint( p.full_name() )\n#Encapsulation - Cell Like\n\n# class Employee(person):\n#     salary = 999\n    \nclass Group(list):\n    def __init__(self, people):\n        self.people = people\n\n    def show(self):\n        for person in self.people:\n            print(person.full_name())\n\n\np = Person(\"Kevin\", \"Long\")\nprint(p.first_name)\n\ng = Group([\n    p,\n    Person(\"Ashley\", \"Ford\"),\n    Person(\"Bob\", \"Dobbs\"),\n])\n\nk = g.people[0]\nprint(k.first_name)\n\ng.show()","d437d177":"#total\ndef total(data):\n    total = 0\n    for value in data:\n        total += value\n    return total\n\nprint(total([123,456,789]))","622ba635":"# minimum\n# maximum\n# average\n\n#total\ndef average(data):\n    total = 0\n    count = 0\n    for value in data:\n        total += value\n        count += 1\n    return total \/ count\n\nprint(average([1,1,2]))","9feb8eb6":"def minimum(data):\n    counter = 0\n    for value in data:\n        if counter == 0:\n            lowest = value\n        elif value < lowest:\n            lowest = value\n        counter += 1\n        \n    return lowest\nprint(minimum([441,31,52]))\n","806d351c":"def maximum(data):\n    counter = 0\n    biggest = 0\n    for value in data:\n        if counter == 0:\n            biggest = value\n        elif value > biggest:\n            biggest = value\n        counter += 1\n        \n    return biggest\n\nprint(maximum([441,1131,952]))\n","7c3f571e":"def maximum(data):\n    if len(data) > 0:\n        biggest = data[0]\n    else:\n        biggest = 0\n        \n    for value in data:\n        if value > biggest:\n            biggest = value\n    return biggest\n\nprint(maximum([441,1131,952]))\n","7d15380c":"# SECTION 5: Classes for Encapsulating Data and Code.","8f99133e":"Create a function that takes a list of numbers and returns the total. Write it from scratch instead of using the built in sum function.","41fd794d":"# SECTION 3: LOOPS","87b4a2b4":"# SECTION 2: CONTROL FLOW - Branching with (If, Elif, Else)","6e6281e4":"# SECTION 1: VARIABLES AND DATA TYPES","36251ca6":"# SECTION 6: Exercises\nAnswers are provided for reference if you get stuck.\nPlease write down in english how you would explain to a young child how you would do this by hand.\nYou can use that description as inline comments to help guide you in coding.","e231e000":"# **Introduction to Python**\nPresented by Kevin Ernest Long of Clever Clever Consulting Partners on behalf of Lumious for The VA.\n\nThis contains the code exercises that correspond to the slides in the presentation.","72001c92":"Create a function that takes a list of numbers and returns the **maximum**. Write it from scratch instead of using the built in functions.","1d1a6253":"Create a function that takes a list of numbers and returns the **avergage**. Write it from scratch instead of using the built in functions.","5873e296":"Create a function that takes a list of numbers and returns the **minimum**. Write it from scratch instead of using the built in functions.","8ac8db1a":"# Data Type: A Specific kind of variable (e.g. Integer, String, List)","5880d684":"# SECTION 4: Functions for Code Organization and Re-Use"}}