{"cell_type":{"91f61bdd":"code","932a976b":"code","3e6cf410":"code","ceadbebb":"code","6ad89335":"code","7aa64bb4":"code","d7723a6e":"code","4e319ebd":"markdown","48e33b5e":"markdown","172e1f02":"markdown","22970779":"markdown","1c0d122b":"markdown","bbd671b7":"markdown"},"source":{"91f61bdd":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport gc\nimport matplotlib.pyplot as plt\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras import *\nfrom tensorflow.keras.callbacks import LearningRateScheduler\nfrom tensorflow.keras.optimizers.schedules import ExponentialDecay\nfrom sklearn.preprocessing import RobustScaler, normalize\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.metrics import mean_absolute_error\nfrom pickle import load\nimport json\n!cp ..\/input\/ventilator-feature-engineering\/VFE.py .","932a976b":"from VFE import add_features\n\n# test set\ntest_ori = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\ntest = add_features(test_ori)\ntest.drop(['id', 'breath_id'], axis=1, inplace=True)\n\nRS = load(open('..\/input\/ventilator-feature-engineering\/RS.pkl', 'rb'))\ntest = RS.transform(test)\ntest = test.reshape(-1, 80, test.shape[-1])","3e6cf410":"with open('..\/input\/train-ventilator-lstm-model-part-i\/train_params.json', 'r') as fp:\n    config = json.load(fp)","ceadbebb":"# Function to get hardware strategy\ndef get_hardware_strategy():\n    try:\n        # TPU detection. No parameters necessary if TPU_NAME environment variable is\n        # set: this is always the case on Kaggle.\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        print('Running on TPU ', tpu.master())\n    except ValueError:\n        tpu = None\n\n    if tpu:\n        tf.config.experimental_connect_to_cluster(tpu)\n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        strategy = tf.distribute.experimental.TPUStrategy(tpu)\n        tf.config.optimizer.set_jit(True)\n    else:\n        # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n        strategy = tf.distribute.get_strategy()\n\n    return tpu, strategy\n\ntpu, strategy = get_hardware_strategy()","6ad89335":"test_preds = []\nmodels = ['..\/input\/train-ventilator-lstm-model-part-ii\/lstm_fold2.hdf5', \n          '..\/input\/train-ventilator-lstm-model-part-iii\/lstm_fold3.hdf5', \n          '..\/input\/train-ventilator-lstm-model-part-iv\/lstm_fold4.hdf5',\n          '..\/input\/train-ventilator-lstm-model-part-v\/lstm_fold0.hdf5',\n          '..\/input\/train-ventilator-lstm-model-part-v-b\/lstm_fold1.hdf5',\n          '..\/input\/train-ventilator-lstm-model-part-i\/lstm_fold0.hdf5',\n          '..\/input\/train-ventilator-lstm-model-part-i\/lstm_fold1.hdf5',\n          '..\/input\/train-ventilator-lstm-model-part-v-d\/lstm_fold3.hdf5',\n          '..\/input\/train-ventilator-lstm-model-part-v-c\/lstm_fold2.hdf5']\n\nwith strategy.scope():\n    for m in models:\n        print('Loading model {}'.format(m))\n        model = keras.models.load_model(m)\n            \n        test_preds.append(model.predict(test, batch_size=config['BATCH_SIZE'], verbose=2).squeeze().reshape(-1, 1).squeeze())","7aa64bb4":"pressure = np.load('..\/input\/ventilator-feature-engineering\/y_train.npy')\nP_MIN = np.min(pressure)\nP_MAX = np.max(pressure)\nP_STEP = pressure[0][1] - pressure[0][0]\nprint('Min pressure: {}'.format(P_MIN))\nprint('Max pressure: {}'.format(P_MAX))\nprint('Pressure step: {}'.format(P_STEP))\nprint('Unique values:  {}'.format(np.unique(pressure).shape[0]))","d7723a6e":"submission = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')\nsubmission[\"pressure\"] = np.median(np.vstack(test_preds),axis=0)\nsubmission[\"pressure\"] = np.round((submission.pressure - P_MIN)\/P_STEP) * P_STEP + P_MIN\nsubmission.pressure = np.clip(submission.pressure, P_MIN, P_MAX)\nsubmission.to_csv('submission.csv', index=False)","4e319ebd":"Fetch batch size from training session:","48e33b5e":"![logo](https:\/\/keras.io\/img\/logo.png)","172e1f02":"# Test dataset","22970779":"# Prediction - LSTM based model\nThis notebook is part of a series:  \n  * [Ventilator: Feature engineering](https:\/\/www.kaggle.com\/mistag\/ventilator-feature-engineering)\n  * [Keras model tuning with Optuna](https:\/\/www.kaggle.com\/mistag\/keras-model-tuning-with-optuna)\n  * [[train] Ventilator LSTM Model - part I](https:\/\/www.kaggle.com\/mistag\/train-ventilator-lstm-model-part-i)\n  * [[train] Ventilator LSTM Model - part II](https:\/\/www.kaggle.com\/mistag\/train-ventilator-lstm-model-part-ii)\n  * [[train] Ventilator LSTM Model - part III](https:\/\/www.kaggle.com\/mistag\/train-ventilator-lstm-model-part-iii)\n  * [[train] Ventilator LSTM Model - part IV](https:\/\/www.kaggle.com\/mistag\/train-ventilator-lstm-model-part-iv)\n  \n## References\nThe code is based on these references:  \n  * [Improvement base on Tensor Bidirect LSTM](https:\/\/www.kaggle.com\/kensit\/improvement-base-on-tensor-bidirect-lstm-0-173\/notebook) by [Ken Sit](https:\/\/www.kaggle.com\/kensit)\n  * [Ensemble Folds with MEDIAN - [0.153]](https:\/\/www.kaggle.com\/cdeotte\/ensemble-folds-with-median-0-153) by [Chris Deotte](https:\/\/www.kaggle.com\/cdeotte)\n","1c0d122b":"# Prediction","bbd671b7":"# Submission\nHere we will do rounding to discrete target values, as discussed [here](https:\/\/www.kaggle.com\/c\/ventilator-pressure-prediction\/discussion\/276083) and several other places."}}