{"cell_type":{"7e820e1d":"code","a3914518":"code","da8e8f6f":"code","f8cf6ef8":"code","18b4ec48":"code","4eebcb6b":"code","5b2e0e5b":"code","36f8326b":"code","0cd1bec8":"code","04143edf":"code","a08c9f58":"code","b9d70593":"code","0643cc23":"code","ab344665":"code","c74587cc":"code","736637f6":"code","01e97d29":"code","c2013a37":"code","ea8e875c":"code","58ae8596":"code","8cffeade":"code","7b85a1d4":"code","f76115e7":"code","a60ca42f":"code","ec6aec79":"code","8224e083":"code","e6f68cfa":"code","cce6ef4b":"markdown","445ad1b7":"markdown","facbcb29":"markdown","2e58ffd2":"markdown","283328e6":"markdown","26cfc589":"markdown"},"source":{"7e820e1d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a3914518":"pd.set_option('max_columns', 500)\ndf_train = pd.read_csv('\/kaggle\/input\/av-healthcare-analytics-ii\/healthcare\/train_data.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/av-healthcare-analytics-ii\/healthcare\/test_data.csv')","da8e8f6f":"X_train, X_test, y_train, y_test = train_test_split(df_train.drop(columns = 'Stay', axis=1), df_train['Stay'], test_size=0.2, random_state=0)","f8cf6ef8":"X_train.head()","18b4ec48":"X_train.info()","4eebcb6b":"X_train.describe()","5b2e0e5b":"X_train.isnull().sum()","36f8326b":"sns.countplot(x='Bed Grade', data=X_train)","0cd1bec8":"X_train['Bed Grade'].fillna(X_train['Bed Grade'].mode()[0], inplace=True)\nX_test['Bed Grade'].fillna(X_train['Bed Grade'].mode()[0], inplace=True)\ndf_test['Bed Grade'].fillna(df_train['Bed Grade'].mode()[0], inplace = True)\ndf_train['Bed Grade'].fillna(df_train['Bed Grade'].mode()[0], inplace = True)","04143edf":"X_train.columns","a08c9f58":"X_train['repeat'] = X_train.groupby('patientid')['case_id'].transform('count')\nX_test['repeat'] = X_test.groupby('patientid')['case_id'].transform('count')\ndf_test['repeat'] = df_test.groupby('patientid')['case_id'].transform('count')\ndf_train['repeat'] = df_train.groupby('patientid')['case_id'].transform('count')","b9d70593":"X_train.isnull().sum()","0643cc23":"X_train.drop(columns=['patientid','case_id'], inplace = True)\nX_test.drop(columns=['patientid','case_id'], inplace = True)\ndf_test.drop(columns=['patientid','case_id'], inplace=True)\ndf_train.drop(columns=['patientid','case_id'], inplace=True)","ab344665":"X_train.isnull().sum()","c74587cc":"X_train['City_Code_Patient'].nunique()","736637f6":"plt.figure(figsize=(13,5))\nsns.countplot(x='City_Code_Patient', data=X_train)\nplt.xticks(rotation = 90)\nplt.show()","01e97d29":"X_train['City_Code_Patient'].fillna(X_train['City_Code_Patient'].mode()[0], inplace=True)\nX_test['City_Code_Patient'].fillna(X_train['City_Code_Patient'].mode()[0], inplace=True)\ndf_test['City_Code_Patient'].fillna(df_train['City_Code_Patient'].mode()[0], inplace=True)\ndf_train['City_Code_Patient'].fillna(df_train['City_Code_Patient'].mode()[0], inplace=True)","c2013a37":"X_train.isnull().sum()","ea8e875c":"cat_vars = [c for c in X_train.columns if X_train[c].dtypes=='object']\nnum_vars = [c for c in X_train.columns if X_test[c].dtypes!='object']","58ae8596":"for var in cat_vars:\n    map_feats = dict(zip(X_train[var].unique(), range(len(X_train[var]))))\n    X_train.replace(map_feats,inplace=True)\n    X_test.replace(map_feats, inplace=True)\n    df_test.replace(map_feats, inplace=True) \n    df_train.replace(map_feats, inplace=True)","8cffeade":"stay_map = dict(zip(y_train.unique(), range(len(y_train))))\ny_train.replace(stay_map,inplace = True)\ny_test.replace(stay_map, inplace=True)\ndf_train['Stay'].replace(stay_map, inplace = True)","7b85a1d4":"from catboost import CatBoostClassifier, Pool\n\neval_set = Pool(X_test, y_test)\n\ncbc = CatBoostClassifier(iterations = 100, learning_rate=.5, depth = 5, loss_function='MultiClass', eval_metric='Accuracy')\n\ncbc.fit(X_train, y_train, eval_set = eval_set, verbose = False)\nyhat = cbc.predict(Pool(X_test))\ncbc.get_best_score()","f76115e7":"from catboost.utils import get_confusion_matrix\n\nconf_matrix = get_confusion_matrix(cbc, eval_set)\nnp.set_printoptions(suppress=True)\nprint(conf_matrix)\nsns.heatmap(conf_matrix, cmap='coolwarm', linewidth=1)","a60ca42f":"inv_map = {v: k for k, v in stay_map.items()}","ec6aec79":"yhat = map(lambda x: x[0], yhat)\nyhat = pd.Series(yhat)\nt = yhat.replace(inv_map)","8224e083":"plt.figure(figsize=(15,5))\nplt.title('Predicted Hospital Stay Times')\nplt.xlabel(\"Number of Days\")\nsns.countplot(t, order=t.value_counts().index)","e6f68cfa":"plt.figure(figsize=(15,5))\np = y_test.replace(inv_map)\nplt.title('Test Set Hospital Stay Times')\nplt.xlabel(\"Number of Days\")\nsns.countplot(p, order=p.value_counts().index)","cce6ef4b":"Map the repeat patient id's to a repeat feature column.","445ad1b7":"**Train Set Accuracy: 43%**\n\n**Test Set Accuracy: 42%**\n\nOf note: Although the model seems poor performing with only a 42% accuracy rate on test set predictions, it is worth observing the general trending ability from the histogram plots above. The prediction set is able to closely following the magnitude of significance for Hospital Stay Times as compared to the Test Set. The only major difference being the flipping of the 51-60 and 31-40 categories.\n\nFuture areas for improvement would be identifying features or insights into improved classification amongst these two inverted magnitude categories.\n\nPlease provide feedback and comments! Thank you!","facbcb29":"Drop the identification entities case_id and patientid","2e58ffd2":"Fill the missing Bed Grade variables with the mode: 2","283328e6":"City Code Patient doesn't appear to be a continuous variable with only 37 unique choices out of the ~300,000 training data set examples.","26cfc589":"Let's again fill missing values with the mode."}}