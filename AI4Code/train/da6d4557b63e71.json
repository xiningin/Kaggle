{"cell_type":{"800cf649":"code","c1e8257e":"code","b8b5fe12":"code","2e51900a":"code","dd3fd137":"code","6e59dc48":"code","c3bf0e38":"code","fa821efc":"code","7f0dcca1":"code","e7808f64":"code","f75e0ca8":"code","679f1244":"code","4f69b290":"code","0645b4ea":"markdown","c0624809":"markdown","7f89f090":"markdown","f6b429b5":"markdown","34d6565c":"markdown","00d3ce9d":"markdown","6aca9f3f":"markdown","9cac22d2":"markdown","321895f0":"markdown","fbc051ac":"markdown","a560eac4":"markdown","1bae930d":"markdown","971c1d76":"markdown","dd42f8c0":"markdown","465a8819":"markdown","0c584848":"markdown","ffc0d64e":"markdown","17c0e11e":"markdown","f946287e":"markdown","575a5f8b":"markdown","0bdffa78":"markdown","f651aa5a":"markdown","1387cd5c":"markdown","3a2cdc60":"markdown","4389ad45":"markdown","04b30a96":"markdown"},"source":{"800cf649":"import re # regex library in python","c1e8257e":"mystring = \"preposterous\"\n\n# Gives you the index number of the start of the match\nmystring.find(\"rous\")","b8b5fe12":"# If it doesn't find the matching string, it returns None\nre.search(\"rous\", mystring)","2e51900a":"f = open(\"..\/input\/alice-in-wonderland.txt\") \nalice_lines = f.readlines() # Read all the lines\nalice_lines = [l.rstrip() for l in alice_lines] # strip whitespace in each line and then add it in list (list comprehension)\nf.close()\n\nfor line in alice_lines:\n     if re.search(\"Hatter\", line): print( line ) # Look through each line and if a line has word \"Hatter\" in it, print that line","dd3fd137":"for line in alice_lines:\n    if re.search(\"riddle\", line): print(line)","6e59dc48":"# Find word Hatter but also match not just \"H\"atter but also \"h\"atter\n\nfor line in alice_lines:\n    if re.search(\"[Hh]atter\", line): print(line)","c3bf0e38":"for line in alice_lines:\n\n     if re.search(\"[0-9][0-9][0-9]\", line): print(line)","fa821efc":"for line in alice_lines:\n    if re.search(\"b\\w\\w\\wed\", line): print( line )","7f0dcca1":"# ... : Three consecutive sequences of any single character\nfor line in alice_lines:\n    if re.search(\"b...ed\", line): print(line)","e7808f64":"# Lines with words with at least 7 characters\nfor line in alice_lines:\n    if re.search(\".......+\", line): print(line)","f75e0ca8":"# look for lines in Alice in Wonderland that start with \"The\"\nfor line in alice_lines:\n    if re.search(\"^The\", line): print(line)","679f1244":"#  Look for lines that have the word \"Alice\" occurring in the end of a line\nfor line in alice_lines:\n    if re.search(\"Alice$\", line): print(line)","4f69b290":"for line in alice_lines:\n    if re.search(r\"\\bsing\\b\", line): print(line)","0645b4ea":"Example","c0624809":"Exercise) What does the following regex match??","7f89f090":"Anchors don't match any characters, they mark special places in a string: at the beginning and end of the string, and at the boundaries of words!","f6b429b5":"- Caret (\"^\"), when not used within a bracket, matches wordss at the beginning of a string. So \"^123\" will only match strings that begin with \"123\".","34d6565c":"- verticle line (|) in paranthesis is equivalent to \"or\" when matching words. For example, mov(es|ing|e|ed) matches \"moves\", \"moving\", \"move\", and \"moved\".\n- \"?\" means optionality. For instance, sings? will match \"sing\" as well as \"sings\".[](http:\/\/)","00d3ce9d":"Exercise) How do you match 3 sequences of numbers?","6aca9f3f":"- period (.) matches any single character (e.g. letter digit punctuation whitespace etc.)\n- You need backslash (\\) if you want to match a literal period","9cac22d2":"Regular expression offers a powerful too to match and search for strings we want in text data and various corpuses.","321895f0":"Some shortcuts include:\n\n- [A-Z] matches any uppercase letter\n- [a-z] matches any lowercase letter\n- [0-9] matches any digit\n- You can combine them, for example in [A-Za-z0-9]","fbc051ac":"Exercise) What does \\(.+\\) match?","a560eac4":"- \\d matches a single digit, equivalent to [0-9]\n- \\D matches a single character that is not a digit, equivalent to [^0-9]\n- \\s matches a whitespace, equivalent to [\\t\\n\\r\\f\\v]\n- \\S matches a non-whitespace\n- \\w matches an alphanumeric character, equivalent o [A-Za-z0-9_]\n- \\W matches a non-alphanumeric character","1bae930d":"- dollar sign matches at the end of a string. \n- Hence, \"123$\" will match strings that end with \"123\".","971c1d76":"It matches any words that have the format \"bxxxed\" where x represents some single alphanumeric character. For example, the word \"bombed\" will be matched.","dd42f8c0":"### More methodds of matching single characters","465a8819":"### More than Exact Matches","0c584848":"The above mathces \"an opening parenthesis (note there is backslash in front of the opening parenthesis), then one or more arbitrary characters, then a closing parenthesis\"","ffc0d64e":"- \\b matches a word boundary\n- \\B matches anywhere but at a word boundary\n- word boundary includes \"punctuation\" as well (as you can see from the example below)","17c0e11e":"### Find and Search","f946287e":"- re.split(): split on regular expressions rather than just strings\n- re.findall(): find all non-overlapping matches in a string and return them in a list\n- re.sub(): substitutes matches of a regex pattern by a string","575a5f8b":"### If you found this notebook helpful, consider upvoting it! Thank you!","0bdffa78":"### Anchors","f651aa5a":"- plus (+) matchces characters one or more times\n- star (*) matches characters zero or more times","1387cd5c":"### Other Functions","3a2cdc60":"- [Hh] matches a single letter which can be either H or h.\n- [aeiuo] matches any lowercase vowel.\n- [1234567890_abc] matches a digit or an underscore or a or b or c\n- [....] always matches a single character, and you are specifying all the possibilities of what it could be.","4389ad45":"Caret(^) acts as a negation if used within a bracket\n\n- [^aeiou] matches any character that is not a lowercase vowel (what does that encompass?)\n- [^A-Za-z] matches anything but a letter","04b30a96":"### More matching symbols"}}