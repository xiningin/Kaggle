{"cell_type":{"1dae230c":"code","f3a756f9":"code","77c8c94a":"code","9bef99da":"code","3b6e85c4":"code","acc1d544":"code","7bf973bf":"code","4f88f4ab":"code","8af57895":"code","1cf3cd87":"code","9c5b3c61":"code","0380c8f6":"code","9f23cec1":"markdown","8bef3911":"markdown","c93b5fe0":"markdown","d1230baa":"markdown"},"source":{"1dae230c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f3a756f9":"import matplotlib.pyplot as plt\nimport seaborn as sns","77c8c94a":"df = pd.read_csv('\/kaggle\/input\/room-occupancy-detection-data-iot-sensor\/Occupancy.csv')","9bef99da":"df.head()","3b6e85c4":"df.Occupancy.value_counts()","acc1d544":"df['date'] = pd.to_datetime(df['date'])\n\ndiff_second =df['date'].diff().dropna().dt.seconds\n\ndiff_second[diff_second>70]","7bf973bf":"df.iloc[2660:2670]","4f88f4ab":"plt.figure(figsize=(15,3))\nplt.scatter(df['date'],df.Occupancy,s=0.5)\nplt.yticks([0,1],['Empty','Occupancy'])\nplt.title('Occupancy tendency')\nplt.show()","8af57895":"dfc = df.copy()\ndfc['Occupancy'] = dfc['Occupancy'].map(lambda x : 'Occupancy' if x ==1 else 'Empty')\n","1cf3cd87":"fig , axes = plt.subplots(1,5,figsize=(15,5),constrained_layout=True)\n\nfor i,col in enumerate(dfc.columns[1:-1]):\n    sns.violinplot(x = \"Occupancy\",y = col,data=dfc,ax=axes[i])\n    axes[i].set_title(col)","9c5b3c61":"df.head()","0380c8f6":"for hours in range(0,24):\n    dft = dfc[dfc['date'].dt.hour ==hours].reset_index(drop=True)\n    \n    \n    fig , axes = plt.subplots(1,5,figsize=(15,5),constrained_layout=True)\n    plt.suptitle(str(hours)+\":00:00 Occupancy tendency\",fontsize=20)\n    for i,col in enumerate(dfc.columns[1:-1]):\n        sns.violinplot(x = \"Occupancy\",y = col,data=dft,ax=axes[i])\n        axes[i].set_title(col)\n    \n    plt.show()\n    ","9f23cec1":"# Total data violinplot","8bef3911":"# max 5-hours delay","c93b5fe0":"# Each hours violinplot","d1230baa":"## 1 - Occupancy\n## 0 - empty"}}