{"cell_type":{"0acfdfd6":"code","37677f04":"code","0a33ff75":"code","71f29622":"markdown","6830229e":"markdown","67292778":"markdown","32770dab":"markdown","3f3c75ce":"markdown","a1486f22":"markdown","2d8cd201":"markdown","1f1929f5":"markdown","33dbb68d":"markdown","e4e1acc5":"markdown","45a9194b":"markdown","14e898f3":"markdown","bdf1ed2f":"markdown"},"source":{"0acfdfd6":"def binary_Search(mylist , item):\n    \"\"\"mylist is array containing some elements\n    and item is the number you want to search\"\"\"\n    \n    low  = 0 \n    high = len(mylist) - 1\n    \"\"\"assign a variable low = 0 for lowest index value\n    and high the maximum index value in the array \"\"\"\n    \n    while low <= high:\n        mid = (low + high) \/\/ 2\n        \" starting from the mid value\"\n    \n        if mylist[mid] == item:\n            return mid\n            \"\"\"Check if the mid value of the array is equal to the item, if yes then return the array value\"\"\"\n        \n\n        if mylist[mid] > item:\n            high = mid - 1\n            \"\"\"If the mid value of the array is greater than the item, then update the high value\"\"\"   \n            \n        else:\n            low = mid + 1\n            \"\"\"If the mid value of the array is less than the item, then update the low value\"\"\"\n        \n    return None\n    \"\"\"If item is not in the array, then binary search returns a null value\"\"\"\n    \nmy_list = [1,3,5,6,7,9,10]\n\nprint(binary_Search(my_list ,6))\n    ","37677f04":"## O(1) Example in python\ndef bigOconstant(values):\n    \"\"\"Print one value at a time\n    hence, run time of fucntion is constant irrespective of list length \"\"\"\n    print(values[0])\n    \nvalues = [1,2,3,4,5,5,6]\nbigOconstant(values)\n\n\n## O(n) Example in python\ndef bigOlinear(values):\n    \"\"\"Prints every value at once\n    hence, run time of fucntion will increase linearly as the input size of the list grows\"\"\"\n    print(values)\n    \nvalues = [1,2,3,4,5,5,6]\nbigOlinear(values)\n\n","0a33ff75":"# Let\u2019s write a function to find the smallest element in an array:\\\n\n\"\"\"Function for finding smallest value\"\"\"\ndef findSmallest(arr): \n    \n    \"\"\"Assigning the first value of the array as smallest value, to compare with other values while looping\"\"\"\n    smallest = arr[0] \n    smallest_index = 0\n    \n    \"\"\"Looping through each value of array to compare it with the smallest value\"\"\"\n    for i in range(1, len(arr)):\n        if arr[i] < smallest: \n            smallest = arr[i] \n            smallest_index = i\n    return smallest_index\n            \n\ndef selection_sort(array):\n    \"\"\"Creating a new list to store the value after sorting\"\"\"\n    newlist = []   \n    for i in range(len(array)):\n        smallest = findSmallest(array)\n        newlist.append(array.pop(smallest))\n        \n    return newlist\n\n\nselection_sort([5, 3, 6, 2, 10])","71f29622":"#### Concept and code\n\nBig-O-Notation is all about how fast an Algorithm is.\n\nIn last post we saw binary search, the reason its a better algorithm than a simple ste-by-step search is the Run-time of binary search does not grow at the same rate as simple search.","6830229e":"### This Notebook is made with the intention to practice Grokking Algorithm book, Understand the Concept and practice real problems.\n\n\n1. I will be sharing some concepts here from the book.\n\n2. Implementation examples from the book , and some general other examples also.\n\n3. Solve real coding problems from Leetcode.com related to every Concept we cover here.\n\n\nFollow this journey on my [linkedIN](https:\/\/www.linkedin.com\/in\/vjyadav\/)\n\nIf you wish to follow along, read the brief explanation by me here about the concept and practice with the provided Code.\n\n\n### *Please, do not forget to UPVOTE this notebook if you find this helpful, amd share it with anyone who you think might benefit learning this.*","67292778":"####  This Notebook will be in continuation, and I will be regulary adding more and more concepts and code here as I keep learning the book.","32770dab":"## Example of Selection sort\n\n### problem:- Sort a given array from smallest to largest.","3f3c75ce":"# Grokking Algorithm book Exercises: - Concept + Code to Practice","a1486f22":"* Algorithm speed isn\u2019t measured in seconds, but in growth of the number of operations ' n '.\n\n* Big O notation talks about how quickly the run time of an algorithm increases as the size of the input increases.\n\n* Run time of algorithms is expressed in Big O notation.\n\n* five most common notations are O(log n) , O(n) , O(nlogn) , O(n2) , O(n!)\n\n* O(log n) is faster than O(n) . eg. Run-time of Binary search algorithm is much faster than simple step-by-step search as the input size increases.","2d8cd201":"Start with understanding two types of basic data structure i.e array and linked list.\n\nBoth are used in programs to store values and perform actions like insertion,deletion, and accessing values.\n\n* Using an array means all your tasks are stored contiguously (right next to each other) in memory. It is good for random access and can read values faster.\n\n* With linked lists, your items can be anywhere in memory. Each item stores the address of the next item in the list and bunch of random memory addresses are linked together. \n* With Linked list reading values is not great as it will read only one item at a time, however linked list is great for insertion and deletion of elements.\n\n* A better way is a hybrid type of data structure an \" array of linked lists\". Here we have the random search capability of array and the faster insertion, deletion of the linked list. \n","1f1929f5":"# Big-O-Notation","33dbb68d":"# Selection Sort","e4e1acc5":"# Binary Search Algorithm","45a9194b":"### Selection sort\n\n* Suppose you have to sort a list of values from smallest to largest. You will have to loop through each value in the list and check whether its the smallest or not.\n\n* If it is the smallest, you store that as the smallest value in a new list. So on, you will end up with a sorted list by selecting each element in the list. Its good way to do it, but ofcourse slow as compared to other alogrithms as the time complexity for this in Big-O-Notaion terms is O(n*n) \n","14e898f3":"Suppose you have to search something in a list of 1000 values, normally you will take 1000 steps starting sequentially from 1 to all the way till 1000 assuming that the last values is what you are looking for.\n\nBut if you do binary search, you start from the middle value. In this case you will start from 500, then if the value you are looking for is less than 500 you will eliminate every value above 500 and narrow down your search between 0 to 500. Further, again taking the mid value 250 and if the number is higher than 250, you will eliminate every value from 0 to 250 and smililary keep eliminating half the values in every guess. You will reach to the solution in log2 N steps.\n\nAlgorithm : - Binary search takes sorted list only as an input. IF the Value is not in the list , binary search will return Null value.","bdf1ed2f":"# Chapter 2"}}