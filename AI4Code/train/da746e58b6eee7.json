{"cell_type":{"28121416":"code","a04f9393":"code","8e97bbd7":"code","986a9452":"code","17c9ceee":"code","251aae68":"code","e55f105a":"code","ae0cb1e1":"code","b015acb7":"code","39f2b0f8":"code","878f7e96":"code","a72c93ea":"code","38a7b3cc":"code","5073928c":"code","7dcd9733":"code","389eb1ed":"code","7ed06fc3":"code","7461d586":"code","c4736829":"code","c4d3ad30":"code","0206fb1f":"code","5f1f061f":"code","4162e95c":"code","eb734e8e":"code","58144d70":"markdown","4936a4c3":"markdown","51bc0c59":"markdown","f7912d5a":"markdown","0ebc388d":"markdown","88f5a8d1":"markdown","ba446635":"markdown","b873fa94":"markdown","0c11ea00":"markdown","c786c7f7":"markdown","84e2c9ac":"markdown"},"source":{"28121416":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a04f9393":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","8e97bbd7":"df = pd.read_csv(\"\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv\") # getting data\ndf","986a9452":"df.info()","17c9ceee":"plt.figure(figsize = (16,8))\nsns.pairplot(df,hue  = \"gender\")\nplt.show()","251aae68":"grp = df.groupby(\"gender\").aggregate([\"mean\"]) # group the gender\ngrp","e55f105a":"plt.figure(figsize = (14,6))\nplt.subplot(121)\nsns.barplot(grp.index,grp['writing score','mean'])\nplt.subplot(122)\nsns.barplot(grp.index,grp['reading score', 'mean'])\nplt.xlabel(\"Gender\")\nplt.show()\nplt.figure(figsize = (14,7))\nlabels = [\"Female\",\"Male\"]\nplt.pie(grp['math score','mean'], autopct=\"%.1f%%\", labels=labels, pctdistance=0.5)\nplt.title(\"Math mean score\")\nplt.show()","ae0cb1e1":"plt.figure(figsize = (14,6))\nplt.subplot(121)\nsns.distplot(df['math score'])\nplt.subplot(122)\nsns.distplot(df['reading score'])\nplt.show()\nplt.figure(figsize = (14,6))\nsns.distplot(df['writing score'])\nplt.show()","b015acb7":"lsn = df.groupby([\"parental level of education\"]).aggregate([\"mean\"]) # group the level of  education\nlsn","39f2b0f8":"plt.figure(figsize = (14,6))\nlabels = [i for i in lsn.index]\nplt.pie(lsn['math score','mean'], autopct=\"%.1f%%\",explode=[0.05]*6, labels=labels, pctdistance=0.5)\nplt.title(\"Math mean score\")\nplt.show()","878f7e96":"plt.figure(figsize = (16,6))\nplt.subplot(121)\nsns.barplot(lsn.index,lsn['writing score','mean'])\nplt.xticks(rotation = 60)\nplt.subplot(122)\nsns.barplot(lsn.index,lsn['reading score','mean'])\nplt.xticks(rotation = 60)\nplt.show();","a72c93ea":"plt.figure(figsize = (16,7))\nsns.barplot(x = \"parental level of education\", y = \"math score\", data = df, hue = \"gender\")\nplt.show()","38a7b3cc":"df[\"test preparation course\"].unique()","5073928c":"df[\"test preparation course\"] = df[\"test preparation course\"].astype(\"string\") # type conversion","7dcd9733":"df.info()","389eb1ed":"df.head()","7ed06fc3":"for i in range(len(df[\"test preparation course\"])):\n    if df.loc[i,\"test preparation course\"] == \"none\":\n        df.loc[i,\"test preparation course\"] = \"not completed\"\ndf","7461d586":"plt.figure(figsize = (16,7))\nsns.barplot(x = \"test preparation course\", y = \"math score\", data = df,hue = \"gender\")\nplt.show()","c4736829":"plt.figure(figsize = (14,8))\nsns.heatmap(df.corr(),annot = True)\nplt.show()","c4d3ad30":"rac = df.groupby([\"race\/ethnicity\"]).aggregate([\"mean\"]) # group the rac\nrac","0206fb1f":"plt.figure(figsize = (16,7))\nplt.subplot(121)\nsns.barplot(rac.index,rac['writing score','mean'])\nplt.subplot(122)\nsns.barplot(rac.index,rac['reading score','mean'])\nplt.show();","5f1f061f":"plt.figure(figsize = (18,12))\nplt.subplot(121)\nlabels = [i for i in lsn.index]\nplt.pie(lsn['math score'], autopct=\"%.1f%%\",explode=[0.05]*6, labels=labels, pctdistance=0.5)\nplt.title(\"Math mean score\")\nplt.subplot(122)\nplt.pie(lsn['reading score'], autopct=\"%.1f%%\",explode=[0.05]*6, labels=labels, pctdistance=0.5)\nplt.title(\"read mean score\")\nplt.show()","4162e95c":"# looking outlier \nfor i in df.columns[5:]:\n    plt.figure(figsize = (12,6))\n    sns.boxplot(df[i])\n    plt.show()\n","eb734e8e":"plt.figure(figsize = (14,6))\nplt.subplot(121)\nsns.lineplot(x = \"writing score\", y = \"math score\", data = df, hue = \"gender\",ci = None)\nplt.subplot(122)\nsns.lineplot(x = \"reading score\", y = \"math score\", data = df, hue = \"gender\",ci = None)\nplt.show()","58144d70":"woman are better at reading and writing than men.\nmen are better at math than woman","4936a4c3":"most succesfull level of education => bachlor's degree and master's degree <br>\nworst level of education => high school","51bc0c59":"# looking data","f7912d5a":"# import necessary libraries","0ebc388d":"# visualization of gender","88f5a8d1":"male's math > female's math <br>\nfemale's reading > male's reading <br>\nfemale's writing  > male's writing","ba446635":"male always more succesfull math than female","b873fa94":"# look  the correlations","0c11ea00":"# visualization the level of education","c786c7f7":"# visualization rac","84e2c9ac":"# Setup"}}