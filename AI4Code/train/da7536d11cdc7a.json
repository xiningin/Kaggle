{"cell_type":{"f94f9331":"code","69ea811a":"code","2c6824fb":"code","44fda879":"code","84e0d46f":"code","d25b4892":"code","b0a3c36b":"code","454a639e":"code","26b858f1":"code","d6d06cee":"code","db23d1ca":"code","97199154":"code","b6318be4":"code","1936c684":"code","5785e9cb":"code","ec92d495":"code","52f4c2f7":"code","f555829c":"code","68534c10":"code","3d18873c":"code","c74eede0":"code","7338fd78":"code","d168e19e":"code","24bee91b":"code","be5595d8":"markdown","6a424df3":"markdown","2e41cc2d":"markdown","3bd6b21a":"markdown","3ced3643":"markdown","707132da":"markdown","04d51e79":"markdown","4214e5c6":"markdown"},"source":{"f94f9331":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","69ea811a":"import numpy as np\nimport pandas as pd\ndf=pd.read_csv('..\/input\/anime-recommendations-database\/Anime_data.csv',encoding='latin')  \n","2c6824fb":"df.describe(include='O')","44fda879":"df.describe()","84e0d46f":"df.head()","d25b4892":"df.isna().mean()","b0a3c36b":"df.shape\n","454a639e":"red=df.iloc[:,[1,3]]\nred=red.drop(df[df.Synopsis.isnull()].index,0)\n\nred.isna().any()","26b858f1":"red['Synopsis'][30]","d6d06cee":"from sklearn.feature_extraction.text import TfidfVectorizer\n\ntf_idf = TfidfVectorizer(stop_words='english')                                   #Removing stop words \ntf_idf_matrix = tf_idf.fit_transform(red['Synopsis'])\ntf_idf_matrix.shape","db23d1ca":"from sklearn.metrics.pairwise import linear_kernel\n\nsim = linear_kernel(tf_idf_matrix, tf_idf_matrix)\nsim","97199154":"index = red.index\ntitles = red['Title']\nindices = pd.Series(index, index = titles).drop_duplicates()\nindices","b6318be4":"def get_recommendations(title,cosine_sim = sim):\n    idx = indices[title]\n    sim_scores = list(enumerate(sim[idx]))\n    sim_scores = sorted(sim_scores, key = lambda x: x[1], reverse = True)\n    sim_scores = sim_scores[1:11]\n    movie_indices = [i[0] for i in sim_scores]\n    wss=[]\n    for i in movie_indices:\n        wss.append(red['Title'][i])\n        \n    return wss","1936c684":"get_recommendations('Trigun')","5785e9cb":"black=df.iloc[:,[1,2,4,5,6,12]]\nblack=black.drop(black[black.Genre.isna()].index,0)\nblack=black.fillna('Unknown')\nblack.isna().sum()","ec92d495":"import numpy as np\n\ndef to_string(x):\n    if x:\n        return x.replace(',',' ').replace('[','').replace(']','').replace(\"'\",'')\n    else:\n        return ''\n\n#black['Genre'] = black['Genre'].astype(str)\nblack['Genre'] = black['Genre'].map(lambda x: to_string(x))\nblack['Producer'] = black['Producer'].map(lambda x: to_string(x))\nblack['Studio'] = black['Studio'].map(lambda x: to_string(x))","52f4c2f7":"black.columns","f555829c":"def soup(x):\n    return  x['Source']+' ' +x['Genre'] + ' ' + x['Type'] + ' ' + x['Producer'] + ' ' + x['Studio'] +' ' + x['Source']","68534c10":"black['soup'] = black.apply(soup, axis = 1)","3d18873c":"me=black['soup'].values\nme[85]","c74eede0":"from sklearn.feature_extraction.text import CountVectorizer\n\ncv=CountVectorizer()\nmatr=cv.fit_transform(me)\nmatr.shape","7338fd78":"sim_sc = linear_kernel(matr, matr)\n\nindex = black.index\ntitles = black['Title']\nids = pd.Series(index, index = titles).drop_duplicates()\n\ndef get_recom(title,cosine_sim = sim_sc):\n    idx = indices[title]\n    sim_scores = list(enumerate(sim_sc[idx]))\n    sim_scores = sorted(sim_scores, key = lambda x: x[1], reverse = True)\n    sim_scores = sim_scores[1:11]\n    anime_indices = [i[0] for i in sim_scores]\n    wss=[]\n    for i in anime_indices:\n        wss.append(black['Title'][i])\n        \n    return wss","d168e19e":"get_recom('One Piece')","24bee91b":"get_recommendations('One Piece')","be5595d8":"![](https:\/\/fiverr-res.cloudinary.com\/images\/q_auto,f_auto\/gigs\/164076617\/original\/103631ebfeb9ec68e2566c70525b0f762c11431a\/give-you-some-anime-recommendations.jpg)","6a424df3":"Lets start with other columns.\n","2e41cc2d":"************************************************************************************************************","3bd6b21a":"![](https:\/\/image.slidesharecdn.com\/anime-recommendation-1-180121040742\/95\/anime-recommendation-big-data-certification6-1-638.jpg?cb=1516507702)","3ced3643":"![](https:\/\/manga.tokyo\/wp-content\/uploads\/2019\/08\/5d64c99f43599-450x320.jpg)","707132da":"# Anime Recommender System ","04d51e79":"#                           WORK IN PROGRESS","4214e5c6":"The first one is working better as compared to the second one."}}