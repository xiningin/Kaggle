{"cell_type":{"e479c7ab":"code","b4422e39":"code","06cffc43":"code","77465dd4":"code","3757417e":"code","4494419b":"code","ad8be6f4":"code","5f2b74be":"code","d7d2fc30":"markdown","06855c2e":"markdown","6aecd357":"markdown","b77e3c46":"markdown","c1210ff6":"markdown","b5e2d9bb":"markdown","ebec2e27":"markdown","7f8977db":"markdown","63a02d40":"markdown","b94c9cbc":"markdown","a3156e38":"markdown","228c2a53":"markdown","3578fc6b":"markdown","0fa0fcf6":"markdown","a6cb0d9c":"markdown","924fd5c0":"markdown","53c6ac0b":"markdown"},"source":{"e479c7ab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n# for data visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly as py\nimport plotly.graph_objs as go","b4422e39":"# read the dataset\ndata = pd.read_csv('\/kaggle\/input\/online-shoppers-intention\/online_shoppers_intention.csv')\n\n# check the shape of data\ndata.info()","06cffc43":"# check whether there are missing data in all the columns\nmissing = data.isnull().sum()\nprint(missing)","77465dd4":"# fill null fields with 0\ndata.fillna(0, inplace = True)\n\n# checking the no. of null values in data after imputing the missing values\ndata.isnull().sum().sum()","3757417e":"# preparing the dataset\nx = data.iloc[:, [5, 6]].values\n\n# checking the shape of the dataset\nx.shape","4494419b":"from sklearn.cluster import KMeans\n\nwcss = []\nfor i in range(1, 11):\n    km = KMeans(n_clusters = i,\n              init = 'k-means++',\n              max_iter = 300,\n              n_init = 10,\n              random_state = 0,\n              algorithm = 'full',\n              tol = 0.001)\n    km.fit(x)\n    labels = km.labels_\n    wcss.append(km.inertia_)\n    \nplt.rcParams['figure.figsize'] = (13, 7)\nplt.plot(range(1, 11), wcss)\nplt.grid()\nplt.tight_layout()\nplt.title('The Elbow Method', fontsize = 20)\nplt.xlabel('No. of Clusters')\nplt.ylabel('wcss')\nplt.show()","ad8be6f4":"km = KMeans(n_clusters = 2, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\n# get predicted cluster index for each sample: 0, 1, 2\ny_means = km.fit_predict(x)\n\nplt.scatter(x[y_means == 0, 0], x[y_means == 0, 1], s = 50, c = 'yellow', label = 'Uninterested Customers')\nplt.scatter(x[y_means == 1, 0], x[y_means == 1, 1], s = 50, c = 'pink', label = 'Target Customers')\nplt.scatter(km.cluster_centers_[:,0], km.cluster_centers_[:, 1], s = 50, c = 'blue' , label = 'centeroid')\n\nplt.title('ProductRelated Duration vs Bounce Rate', fontsize = 20)\nplt.grid()\nplt.xlabel('ProductRelated Duration')\nplt.ylabel('Bounce Rates')\nplt.legend()\nplt.show()","5f2b74be":"# encode Revenue as actual label\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nlabels_true = le.fit_transform(data['Revenue'])\n\n# get predicted clustering result label\nlabels_pred = y_means\n\n# print adjusted rand index, which measures the similarity of the two assignments\nfrom sklearn import metrics\nscore = metrics.adjusted_rand_score(labels_true, labels_pred)\nprint(\"Adjusted rand index: \")\nprint(score)\n\n# print confusion matrix\n#cm = metrics.plot_confusion_matrix(None, labels_true, labels_pred)\n#print(cm)\n\nimport scikitplot as skplt\nplt_1 = skplt.metrics.plot_confusion_matrix(labels_true, labels_pred, normalize=False)\nplt_2 = skplt.metrics.plot_confusion_matrix(labels_true, labels_pred, normalize=True)","d7d2fc30":"From the confusion matrix, we can see that among 10,422 failed revenues, 9,769 are clustered as uninterested customers, which is 94%. However, among 937 successful revenues, only 284 are clustered as target customers, which is 15%. Besides, the adjusted index score is not very high.\n\nSo it is clear that we misclustered many successful revenue sessions as uninterested customers, which means that when high bounce rate combined short product related page duration, there are still many target customers. ","06855c2e":"# Import Essential Libraries","6aecd357":"First select the two columns from dataset.","b77e3c46":"By looking at this clustering plot, we can say confidently that the customers who spent longer time on a product related website are very less likely to navigate away from the website after viewing only one page.","c1210ff6":"Then apply K-elbow method to determine the number of clustering groups.","b5e2d9bb":"Read the dataset and check the shape of data","ebec2e27":"Found 14 data with empty fields, fill these empty fields with 0. Then check whether there are any missing data again.","7f8977db":"# K-Means","63a02d40":"# Conclusion","b94c9cbc":"# Evaluate ProductRelated_Duration and BounceRates clustering result with label revenue","a3156e38":"# Cluster ProductRelated_Duration and BounceRates ","228c2a53":"There is a likely chance that after a decent number of customers looked through the product-related page, they decided to navigate away from the website. Then they opened a new website in the same session to finish the purchase. The above speculation is why many successful revenue records happen when the session has a short duration and high bounce rate. \n\nIn conclusion, based on what we just found, I suggest that the website reformat and add more useful links like recommended similar products, quick checkout button, etc. For the sake of improving their bounce rates, convenient their customers, and even make more profits and revenues. ","3578fc6b":"Since K-Means is not a supervised learning method, we adopt other ways to evaluate its clustering result. \nThe leftmost column of the confusion matrix represents the actual label (Revenue true or false), and the topmost row represents the predicted clustering groups (Uninterested customers or target customers).","0fa0fcf6":"According to the above derived plot, the maximum bend is at the second index, that is the number of optimal clustering groups for ProductRelated_Duration and BounceRates is 2. After the clustering number is determined, we apply KMeans method and plot the clusters.","a6cb0d9c":"Check whether the data are all intact","924fd5c0":"# Data Preprocessing","53c6ac0b":"# K-Elbow method"}}