{"cell_type":{"6dcc236e":"code","73fd4a72":"code","e19e42b5":"code","bfefd164":"code","ee04a90f":"code","fd3b1aca":"code","2619f3a4":"code","ac85cb21":"code","e8d9eb75":"code","346a29e1":"code","75702afe":"code","5ddd7db6":"code","85eb9f59":"code","a9c738e2":"code","52fbe97f":"code","584f0184":"code","d1c1c995":"code","25e079ef":"code","0db8e3b3":"code","6b12eabf":"code","43b8f2f3":"code","1b8859ad":"code","5b5c5499":"code","57459d55":"code","1233964b":"code","87e94a90":"code","4a98fd4b":"code","385b5904":"code","0d5804d6":"code","3a4e2d63":"code","f1a42535":"code","7d923b4e":"code","c0e37b5a":"code","d6a2726b":"code","e5a9edfc":"code","8c953e36":"code","8d405b3f":"code","04a3f99e":"code","813b4af5":"code","d33b6f58":"code","ad164e19":"code","89b4bdf2":"code","ec399766":"code","ed619b08":"code","09e40b7b":"code","9a69dc17":"code","744717eb":"code","60dd211d":"code","b14a9daf":"code","29b69a45":"code","e97fcc4e":"code","1fa41ba2":"code","29ea6c35":"code","fc1bce50":"code","026f9fea":"code","28a74db4":"code","d6b5dc92":"code","048a1e2d":"code","69a4f720":"code","9e7f7061":"code","a06cfa98":"code","1d836769":"code","a2f0dee2":"code","08a91f9a":"code","f113ca12":"code","c5db60bc":"code","e4160da1":"markdown","73212bcc":"markdown","3703cf50":"markdown","d2c1f17d":"markdown","b30abd33":"markdown","4a1a17e6":"markdown","b6359a80":"markdown","4c2cd151":"markdown","4ef582ec":"markdown","fadbc08e":"markdown","18bfc56d":"markdown","41a004c3":"markdown","9840aa22":"markdown","fb7f01f2":"markdown","813eaaa8":"markdown","ad36b5c5":"markdown","84015483":"markdown","82116346":"markdown","0fdb35de":"markdown","1297be5e":"markdown","689c848f":"markdown","8284feaf":"markdown","1fe7d3ca":"markdown","171f88e5":"markdown","e901eec7":"markdown","d530a0df":"markdown","56e600cf":"markdown","a50f31c3":"markdown","6ec08170":"markdown","7195b249":"markdown","b6be3972":"markdown","4bcc4dbd":"markdown","be12813f":"markdown","ea5433e5":"markdown","58a8b553":"markdown","0f0c4e8c":"markdown","0db1502e":"markdown","19858ad8":"markdown","4d991585":"markdown","c52a253b":"markdown","15f96efe":"markdown","6d68c2dc":"markdown"},"source":{"6dcc236e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","73fd4a72":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nfrom sklearn.linear_model import LinearRegression,Lasso,Ridge\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import RandomizedSearchCV","e19e42b5":"df_train=pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/train.csv\")\ndf_test=pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/test.csv\")","bfefd164":"print(f\"The train dataset has {df_train.shape[0]} entries and {df_train.shape[1]} columns.\\n\")\nprint(f\"The test dataset has {df_test.shape[0]} entries and {df_test.shape[1]} columns.\")","ee04a90f":"df_train.info()","fd3b1aca":"df_train.describe()","2619f3a4":"df_train.isnull().sum()","ac85cb21":"df_test.isnull().sum()","e8d9eb75":"fig,ax=plt.subplots(4,2,figsize=(30,20))\nsns.boxplot(x='deg_C', data=df_train,ax=ax[0,0])\nax[0,0].set_title('deg_C')\nsns.boxplot(x='relative_humidity', data=df_train,ax=ax[0,1])\nax[0,1].set_title('relative_humidity')\nsns.boxplot(x='absolute_humidity', data=df_train,ax=ax[1,0])\nax[1,0].set_title('absolute_humidity')\nsns.boxplot(x='sensor_1', data=df_train,ax=ax[1,1])\nax[1,1].set_title('sensor_1')\nsns.boxplot(x='sensor_2', data=df_train,ax=ax[2,0])\nax[2,0].set_title('sensor_2')\nsns.boxplot(x='sensor_3', data=df_train,ax=ax[2,1])\nax[2,1].set_title('sensor_3')\nsns.boxplot(x='sensor_4', data=df_train,ax=ax[3,0])\nax[3,0].set_title('sensor_4')\nsns.boxplot(x='sensor_5', data=df_train,ax=ax[3,1])\nax[3,1].set_title('sensor_5')\nfig.suptitle(\"Outlier Check\",size=30)","346a29e1":"def outlier_no(df,col):\n    me=df[col].mean()\n    st=df[col].std()\n    upper= 3*st + me\n    lower= -3*st + me\n    l=df[(df[col]<=upper) & (df[col]>=lower)]\n    return l.shape[0]","75702afe":"cols=['deg_C', 'relative_humidity', 'absolute_humidity', 'sensor_1',\n       'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']\nfor i in cols:\n    legit=outlier_no(df_train,i)\n    print(i,\" has\", str(df_train.shape[0]-legit))","5ddd7db6":"fig,ax=plt.subplots(4,2,figsize=(30,20))\nsns.kdeplot(x='deg_C', data=df_train,ax=ax[0,0])\nax[0,0].set_title('deg_C')\nsns.kdeplot(x='relative_humidity', data=df_train,ax=ax[0,1])\nax[0,1].set_title('relative_humidity')\nsns.kdeplot(x='absolute_humidity', data=df_train,ax=ax[1,0])\nax[1,0].set_title('absolute_humidity')\nsns.kdeplot(x='sensor_1', data=df_train,ax=ax[1,1])\nax[1,1].set_title('sensor_1')\nsns.kdeplot(x='sensor_2', data=df_train,ax=ax[2,0])\nax[2,0].set_title('sensor_2')\nsns.kdeplot(x='sensor_3', data=df_train,ax=ax[2,1])\nax[2,1].set_title('sensor_3')\nsns.kdeplot(x='sensor_4', data=df_train,ax=ax[3,0])\nax[3,0].set_title('sensor_4')\nsns.kdeplot(x='sensor_5', data=df_train,ax=ax[3,1])","85eb9f59":"df_train[\"date_time\"]=pd.to_datetime(df_train[\"date_time\"])\ndf_test[\"date_time\"]=pd.to_datetime(df_test[\"date_time\"])","a9c738e2":"df_train[\"month\"]=df_train[\"date_time\"].apply(lambda x:x.month)\ndf_test[\"month\"]=df_test[\"date_time\"].apply(lambda x:x.month)\n\ndf_train[\"day\"]=df_train[\"date_time\"].apply(lambda x:x.day)\ndf_test[\"day\"]=df_test[\"date_time\"].apply(lambda x:x.day)\n\ndf_train[\"hour\"]=df_train[\"date_time\"].apply(lambda x:x.hour)\ndf_test[\"hour\"]=df_test[\"date_time\"].apply(lambda x:x.hour)\n\ndf_train[\"dayofweek\"]=df_train[\"date_time\"].apply(lambda x:x.dayofweek)\ndf_test[\"dayofweek\"]=df_test[\"date_time\"].apply(lambda x:x.dayofweek)","52fbe97f":"#Adding Season for train\nfor i in range(df_train.shape[0]):\n    if df_train.loc[i,\"month\"] in [3,4,5]:\n        df_train.loc[i,\"Season\"]=\"Spring\"\n    elif df_train.loc[i,\"month\"] in [6,7,8]:\n        df_train.loc[i,\"Season\"]=\"Summer\"\n    elif df_train.loc[i,\"month\"] in [9,10,11]:\n        df_train.loc[i,\"Season\"]=\"Autumn\"\n    elif df_train.loc[i,\"month\"] in [12,1,2]:\n        df_train.loc[i,\"Season\"]=\"Winter\"\n        \n#Adding Season for test\nfor i in range(df_test.shape[0]):\n    if df_test.loc[i,\"month\"] in [3,4,5]:\n        df_test.loc[i,\"Season\"]=\"Spring\"\n    elif df_test.loc[i,\"month\"] in [6,7,8]:\n        df_test.loc[i,\"Season\"]=\"Summer\"\n    elif df_test.loc[i,\"month\"] in [9,10,11]:\n        df_test.loc[i,\"Season\"]=\"Autumn\"\n    elif df_test.loc[i,\"month\"] in [12,1,2]:\n        df_test.loc[i,\"Season\"]=\"Winter\"\n","584f0184":"# Adding TimeofDay for train\nfor i in range(df_train.shape[0]):\n    if df_train.loc[i,\"hour\"] in np.arange(6,12):   #np.arange(6,12)\n        df_train.loc[i,\"TimeofDay\"]=\"Morning\"\n    elif df_train.loc[i,\"hour\"] in np.arange(12,18): #np.arange(12,18)\n        df_train.loc[i,\"TimeofDay\"]=\"Afternoon\"\n    elif df_train.loc[i,\"hour\"] in np.arange(18,21): #np.arange(18,21)\n        df_train.loc[i,\"TimeofDay\"]=\"Evening\"\n    else:\n        df_train.loc[i,\"TimeofDay\"]=\"Night\"\n\n        \n# Adding TimeofDay for test\nfor i in range(df_test.shape[0]):\n    if df_test.loc[i,\"hour\"] in np.arange(6,12):   #np.arange(6,12)\n        df_test.loc[i,\"TimeofDay\"]=\"Morning\"\n    elif df_test.loc[i,\"hour\"] in np.arange(12,18): #np.arange(12,18)\n        df_test.loc[i,\"TimeofDay\"]=\"Afternoon\"\n    elif df_test.loc[i,\"hour\"] in np.arange(18,21): #np.arange(18,21)\n        df_test.loc[i,\"TimeofDay\"]=\"Evening\"\n    else:\n        df_test.loc[i,\"TimeofDay\"]=\"Night\"\n","d1c1c995":"def funct_week(n):\n    if n in [0,1,2,3,4]:\n        return \"Weekday\"\n    else:\n        return \"Weekend\"","25e079ef":"df_train[\"dayofweek\"]=df_train[\"dayofweek\"].apply(lambda x:funct_week(x))\ndf_test[\"dayofweek\"]=df_test[\"dayofweek\"].apply(lambda x:funct_week(x))","0db8e3b3":"df_train[\"dewtemp\"]=df_train[\"deg_C\"]-((100-df_train[\"relative_humidity\"])\/5)\ndf_test[\"dewtemp\"]=df_test[\"deg_C\"]-((100-df_test[\"relative_humidity\"])\/5)","6b12eabf":"df_train.head()","43b8f2f3":"df_train.drop([\"month\",\"day\"],axis=1,inplace=True)\ndf_test.drop([\"month\",\"day\"],axis=1,inplace=True)","1b8859ad":"df_train.corr()","5b5c5499":"fig,ax=plt.subplots(1,3,figsize=(30,5))\nsns.kdeplot(x=df_train[\"target_carbon_monoxide\"],ax=ax[0],shade=True)\nax[0].set_title(\"target_carbon_monoxide\")\nsns.kdeplot(x=df_train[\"target_benzene\"],ax=ax[1],shade=True)\nax[1].set_title(\"target_benzene\")\nsns.kdeplot(x=df_train[\"target_nitrogen_oxides\"],ax=ax[2],shade=True)\nax[2].set_title(\"target_nitrogen_oxides\")","57459d55":"df_train[\"log_carbon_monoxide\"]=np.log(df_train[\"target_carbon_monoxide\"])\ndf_train[\"log_benzene\"]=np.log(1+df_train[\"target_benzene\"])\ndf_train[\"log_nitrogen_oxides\"]=np.log(1+df_train[\"target_nitrogen_oxides\"])","1233964b":"fig,ax=plt.subplots(1,3,figsize=(30,5))\nsns.kdeplot(x=df_train[\"log_carbon_monoxide\"],ax=ax[0],shade=True)\nax[0].set_title(\"log_carbon_monoxide\")\nsns.kdeplot(x=df_train[\"log_benzene\"],ax=ax[1],shade=True)\nax[1].set_title(\"log_benzene\")\nsns.kdeplot(x=df_train[\"log_nitrogen_oxides\"],ax=ax[2],shade=True)\nax[2].set_title(\"log_nitrogen_oxides\")","87e94a90":"df_train.drop(columns=[\"target_carbon_monoxide\",\"target_benzene\",\"target_nitrogen_oxides\"],inplace=True)","4a98fd4b":"plt.figure(figsize=(30,5))\nsns.lineplot(x=\"date_time\",y=\"deg_C\",data=df_train,hue=\"Season\")","385b5904":"fig,ax=plt.subplots(10,1,figsize=(30,25))    #log_carbon_monoxide\tlog_benzene\tlog_nitrogen_oxides\nsns.lineplot(x=\"date_time\",y=\"relative_humidity\",data=df_train,hue=\"Season\",ax=ax[0])\nsns.lineplot(x=\"date_time\",y=\"absolute_humidity\",data=df_train,hue=\"Season\",ax=ax[1])\nsns.lineplot(x=\"date_time\",y=\"sensor_1\",data=df_train,hue=\"Season\",ax=ax[2])\nsns.lineplot(x=\"date_time\",y=\"sensor_2\",data=df_train,hue=\"Season\",ax=ax[3])\nsns.lineplot(x=\"date_time\",y=\"sensor_3\",data=df_train,hue=\"Season\",ax=ax[4])\nsns.lineplot(x=\"date_time\",y=\"sensor_4\",data=df_train,hue=\"Season\",ax=ax[5])\nsns.lineplot(x=\"date_time\",y=\"sensor_5\",data=df_train,hue=\"Season\",ax=ax[6])\nsns.lineplot(x=\"date_time\",y=\"log_carbon_monoxide\",data=df_train,hue=\"Season\",ax=ax[7])\nsns.lineplot(x=\"date_time\",y=\"log_benzene\",data=df_train,hue=\"Season\",ax=ax[8])\nsns.lineplot(x=\"date_time\",y=\"log_nitrogen_oxides\",data=df_train,hue=\"Season\",ax=ax[9])\n\nplt.suptitle(\"Time Series Analysis\",size=30)\n","0d5804d6":"plt.figure(figsize=(30,10))\nsns.lineplot(x=\"date_time\",y=\"deg_C\",data=df_train,hue=\"TimeofDay\")","3a4e2d63":"fig,ax=plt.subplots(10,1,figsize=(30,50))\nsns.lineplot(x=\"date_time\",y=\"relative_humidity\",data=df_train,hue=\"TimeofDay\",ax=ax[0])\nsns.lineplot(x=\"date_time\",y=\"absolute_humidity\",data=df_train,hue=\"TimeofDay\",ax=ax[1])\nsns.lineplot(x=\"date_time\",y=\"sensor_1\",data=df_train,hue=\"TimeofDay\",ax=ax[2])\nsns.lineplot(x=\"date_time\",y=\"sensor_2\",data=df_train,hue=\"TimeofDay\",ax=ax[3])\nsns.lineplot(x=\"date_time\",y=\"sensor_3\",data=df_train,hue=\"TimeofDay\",ax=ax[4])\nsns.lineplot(x=\"date_time\",y=\"sensor_4\",data=df_train,hue=\"TimeofDay\",ax=ax[5])\nsns.lineplot(x=\"date_time\",y=\"sensor_5\",data=df_train,hue=\"TimeofDay\",ax=ax[6])\nsns.lineplot(x=\"date_time\",y=\"log_carbon_monoxide\",data=df_train,hue=\"TimeofDay\",ax=ax[7])\nsns.lineplot(x=\"date_time\",y=\"log_benzene\",data=df_train,hue=\"TimeofDay\",ax=ax[8])\nsns.lineplot(x=\"date_time\",y=\"log_nitrogen_oxides\",data=df_train,hue=\"TimeofDay\",ax=ax[9])\n","f1a42535":"df_train.columns","7d923b4e":"x=df_train[['sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5','log_carbon_monoxide','log_benzene', 'log_nitrogen_oxides','Season']]\nsns.pairplot(x, hue ='Season')\nplt.show()","c0e37b5a":"x=df_train[['sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5','log_carbon_monoxide','log_benzene', 'log_nitrogen_oxides','TimeofDay']]\nsns.pairplot(x, hue ='TimeofDay')\nplt.show()","d6a2726b":"x=df_train[['sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5','log_carbon_monoxide','log_benzene', 'log_nitrogen_oxides','dayofweek']]\nsns.pairplot(x, hue ='dayofweek')\nplt.show()","e5a9edfc":"X=df_train.drop(columns=[\"log_benzene\",\"log_nitrogen_oxides\",\"log_carbon_monoxide\",\"date_time\"],axis=1)\ntest=df_test.drop([\"date_time\"],axis=1)\ny_CO=df_train[\"log_carbon_monoxide\"]\ny_C6H6=df_train[\"log_benzene\"]\ny_NO=df_train[\"log_nitrogen_oxides\"]","8c953e36":"le=LabelEncoder()\nX[\"Season\"]=le.fit_transform(X[\"Season\"])\ntest[\"Season\"]=le.transform(df_test[\"Season\"])","8d405b3f":"le=LabelEncoder()\nX[\"TimeofDay\"]=le.fit_transform(X[\"TimeofDay\"])\ntest[\"TimeofDay\"]=le.transform(df_test[\"TimeofDay\"])","04a3f99e":"le=LabelEncoder()\nX[\"dayofweek\"]=le.fit_transform(X[\"dayofweek\"])\ntest[\"dayofweek\"]=le.transform(df_test[\"dayofweek\"])","813b4af5":"X.head()","d33b6f58":"sc=StandardScaler()\nX=sc.fit_transform(X)\ntest=sc.transform(test)","ad164e19":"def fun_best(X,y):\n    models=[\"Linear Regression\",\"Lasso\",\"Ridge\",\"Random Forest Regressor\",\"XGB Regressor\",\"LGBM Regressor\",\"Cat Boost Regressor\",\"Gradient Boosting Regressor\"]\n    mean_score=[]\n    \n    lr=LinearRegression()\n    score_lr=-1*cross_val_score(lr,X,y,cv=5,scoring=\"neg_mean_squared_error\")\n    mean_score.append(score_lr.mean())\n\n    las=Lasso()\n    score_las=-1*cross_val_score(las,X,y,cv=5,scoring=\"neg_mean_squared_error\")\n    mean_score.append(score_las.mean())\n\n    rid=Ridge()\n    score_rid=-1*cross_val_score(rid,X,y,cv=5,scoring=\"neg_mean_squared_error\")\n    mean_score.append(score_rid.mean())\n\n    rf=RandomForestRegressor()\n    score_rf=-1*cross_val_score(rf,X,y,cv=5,scoring=\"neg_mean_squared_error\")\n    mean_score.append(score_rf.mean())\n\n    xgbr=XGBRegressor()\n    score_xg=-1*cross_val_score(xgbr,X,y,cv=5,scoring=\"neg_mean_squared_error\")\n    mean_score.append(score_xg.mean())\n\n    lgbm=LGBMRegressor()\n    score_lg=-1*cross_val_score(lgbm,X,y,cv=5,scoring=\"neg_mean_squared_error\")\n    mean_score.append(score_lg.mean())\n\n    cb=CatBoostRegressor()\n    score_cb=-1*cross_val_score(cb,X,y,cv=5,scoring=\"neg_mean_squared_error\")\n    mean_score.append(score_cb.mean())\n\n    gb=GradientBoostingRegressor()\n    score_gb=-1*cross_val_score(gb,X,y,cv=5,scoring=\"neg_mean_squared_error\")\n    mean_score.append(score_gb.mean())\n\n    return dict(zip(models,mean_score))\n\n","89b4bdf2":"result=fun_best(X,y_CO)\n","ec399766":"print(result)","ed619b08":"result=fun_best(X,y_C6H6)\nprint(result)","09e40b7b":"result=fun_best(X,y_NO)\nprint(result)","9a69dc17":"lg=LGBMRegressor()\nlg.fit(X,y_CO)\ny_pred_CO=lg.predict(test)\n#print(lg.get_params())\n","744717eb":"lg=LGBMRegressor()\nlg.fit(X,y_C6H6)\ny_pred_C6H6=lg.predict(test)","60dd211d":"cb=CatBoostRegressor()\ncb.fit(X,y_NO)\ny_pred_NO=cb.predict(test)\n#print(cb.get_params())","b14a9daf":"#res=pd.DataFrame({\"date_time\":df_test[\"date_time\"],\"target_carbon_monoxide\":np.exp(y_pred_CO),\"target_benzene\":(np.exp(y_pred_C6H6)-1),\"target_nitrogen_oxides\":(np.exp(y_pred_NO)-1)})","29b69a45":"#res.to_csv(\"Result.csv\",index=False)","e97fcc4e":"n_estimators=[950,1000,1010,1020,1030,1040,1050,1060,1070,1080,1090,1100,1150,1200,1250]\nmax_depth=[2,3,4,5,6,7,8,9,10]\nlearning_rate=[0.01,0.015,0.025,0.02,0.03,0.035,0.04,0.045,0.05,0.055,0.06]\nmin_child_weight=[1,2,3,4,5,6,7,8]\n\nhyperparameter_grid={\n    \"n_estimators\":n_estimators,\n    \"max_depth\": max_depth,\n    \"learning_rate\" : learning_rate,\n    \"min_child_weight\" : min_child_weight\n    }","1fa41ba2":"model=LGBMRegressor()\nrandom_cv=RandomizedSearchCV(estimator=model,param_distributions=hyperparameter_grid,\n                             cv=5,n_iter=50,scoring=\"neg_root_mean_squared_error\",\n                             n_jobs=4,verbose=5,return_train_score=True,random_state=1)","29ea6c35":"random_cv.fit(X,y_CO)","fc1bce50":"random_cv.best_params_","026f9fea":"random_cv.best_estimator_","28a74db4":"lgbm=LGBMRegressor(learning_rate=0.01, max_depth=6, min_child_weight=5,\n              n_estimators=1010)\nscore_lg=-1*cross_val_score(lgbm,X,y_CO,cv=5,scoring=\"neg_mean_squared_error\")\nprint(score_lg.mean())\n\n","d6b5dc92":"lgbm.fit(X,y_CO)\ny_pred_CO=lgbm.predict(test)","048a1e2d":"n_estimators=[950,1000,1010,1020,1030,1040,1050,1060,1070,1080,1090,1100,1150,1200,1250]\nmax_depth=[2,3,4,5,6,7,8,9,10]\nlearning_rate=[0.01,0.015,0.025,0.02,0.03,0.035,0.04,0.045,0.05,0.055,0.06]\nmin_child_weight=[1,2,3,4,5,6,7,8]\n\nhyperparameter_grid={\n    \"n_estimators\":n_estimators,\n    \"max_depth\": max_depth,\n    \"learning_rate\" : learning_rate,\n    \"min_child_weight\" : min_child_weight\n    }","69a4f720":"model=LGBMRegressor()\nrandom_cv=RandomizedSearchCV(estimator=model,param_distributions=hyperparameter_grid,\n                             cv=5,n_iter=50,scoring=\"neg_root_mean_squared_error\",\n                             n_jobs=4,verbose=5,return_train_score=True,random_state=1)","9e7f7061":"random_cv.fit(X,y_C6H6)","a06cfa98":"random_cv.best_params_","1d836769":"random_cv.best_estimator_","a2f0dee2":"lgbm=LGBMRegressor(learning_rate=0.06, max_depth=2, min_child_weight=2,\n              n_estimators=1040)\nscore_lgbm=-1*cross_val_score(lgbm,X,y_C6H6,cv=5,scoring=\"neg_mean_squared_error\")\nprint(score_lgbm.mean())\n\n","08a91f9a":"lgbm.fit(X,y_C6H6)\ny_pred_C6H6=lgbm.predict(test)","f113ca12":"res=pd.DataFrame({\"date_time\":df_test[\"date_time\"],\"target_carbon_monoxide\":np.exp(y_pred_CO),\"target_benzene\":(np.exp(y_pred_C6H6)-1),\"target_nitrogen_oxides\":(np.exp(y_pred_NO)-1)})","c5db60bc":"res.to_csv(\"Result.csv\",index=False)","e4160da1":"Categorisation based on \"Season\":","73212bcc":"## Pairplot Visualization:","3703cf50":"In order to find out number of outliers in each column:","d2c1f17d":"# Data Exploration:","b30abd33":"# Basic Feature Additions:","4a1a17e6":"Now Target variables almost look Normally Distributed. ","b6359a80":"Since all Target variables are Right-Skewed(Log-Normal), we apply LOG-TRANSFORMATION:","4c2cd151":"The above represents the basic statistics of the train set, which furnishes quantities like standard deviation, mean, etc... for every column.","4ef582ec":"Adding corresponding day,month,hour and day of week of each date\/time entry.","fadbc08e":"## Log Transformation of Target variables:","18bfc56d":"# Model Selection","41a004c3":"### (i)For CO:","9840aa22":"# Label Encoding Categorical Variables:","fb7f01f2":"Dew Temp","813eaaa8":"There are no missing values in the train set and test set.","ad36b5c5":"## 2. Parameter tuning:","84015483":"**LGBM wins!**","82116346":"As we can see from the above boxplots, all the \"sensor\" variables are experimentally determined quantities. So outliers present in them are called *NATURAL OUTLIERS* and cannot be removed.","0fdb35de":"## 1. Description and Statistics:","1297be5e":"# Removing unwanted Features:","689c848f":"## 3. Predicting NO:","8284feaf":"## 3. Outlier Detection:","1fe7d3ca":"### (ii)For C6H6:","171f88e5":"Since **LGBM Regressor** and **Cat Boost Regressor** has given the best results,we will use it to predict our test results.","e901eec7":"# Visualizing the target variable:","d530a0df":"### (iii)NO:","56e600cf":"## 2. Missing Values Handling:","a50f31c3":"## 1. With Base Parameters:","6ec08170":"# Standard scaling the data:","7195b249":"## 4. Univariate Analysis:","b6be3972":"There are 9 features and 3 target variables in the train set.","4bcc4dbd":"Weekday\/Weekend :","be12813f":"**CatBoost Regressor wins!**","ea5433e5":"# Bivariate Analysis","58a8b553":"**LGBM wins!**","0f0c4e8c":"Season ---->\n\n         Spring--For the months MARCH,APRIL,MAY\n         Summer--For the months JUNE,JULY,AUGUST\n         Autumn--For the months SEPTEMBER,OCTOBER,NOVEMBER\n         Winter--For the months DECEMBER,JANUARY,FEBRUARY\nTime of Day ---->\n\n         Morning is from 6 AM to 11:59 AM.(Sunrise typically occurs around 6 AM)\n         Afternoon is from 12:00 PM to around 5:00 PM(17:00).\n         Evening is from 5:01 PM(17:01) to 8 PM(20:00).\n         Night is from sunset to sunrise, so from 8:01 PM(20:01) until 5:59 AM.","0db1502e":"## 1. Predicting CO:","19858ad8":"## Time Series Analysis:","4d991585":"## 2. Predicting C6H6:","c52a253b":"Probability Distribution Curve:","15f96efe":"Categorisation based on \"TimeOfDay\":","6d68c2dc":"# Final Predictions:"}}