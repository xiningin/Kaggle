{"cell_type":{"e92e5521":"code","8a3e0698":"code","559c6307":"code","48ad100f":"code","1db661b8":"code","04f8a21f":"code","747e1960":"code","72eb0447":"code","1208e17c":"code","2ed2334f":"markdown","496de3db":"markdown","a99eca4c":"markdown","b1a9468f":"markdown","eef4af85":"markdown","b4647a97":"markdown"},"source":{"e92e5521":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport keras\nfrom keras.preprocessing.image import *\nfrom keras.layers import *\nfrom keras.models import Sequential\nfrom keras.callbacks import *","8a3e0698":"face_mask_detection_dir = '..\/input\/face-mask-detection\/images'\n\nwith_without_mask_train = '..\/input\/withwithout-mask\/maskdata\/maskdata\/train'\nwith_without_mask_test = '..\/input\/withwithout-mask\/maskdata\/maskdata\/test'\n\nwith_mask_train_dir = os.path.join(with_without_mask_train, 'with_mask')\nwithout_mask_train_dir = os.path.join(with_without_mask_train, 'without_mask')\n\nwith_mask_test_dir = os.path.join(with_without_mask_test, 'with_mask')\nwithout_mask_test_dir = os.path.join(with_without_mask_test, 'without_mask')","559c6307":"train_wear_mask = pd.DataFrame()\ntrain_wear_mask['is_wear'] = ['1'] * len(os.listdir(face_mask_detection_dir)) + ['1'] * len(os.listdir(with_mask_train_dir)) + ['0'] * len(os.listdir(without_mask_train_dir))\ntrain_wear_mask['dir'] = [os.path.join(face_mask_detection_dir, name) for name in os.listdir(face_mask_detection_dir)] + [os.path.join(with_mask_train_dir, name) for name in os.listdir(with_mask_train_dir)] + [os.path.join(without_mask_train_dir, name) for name in os.listdir(without_mask_train_dir)]\n\n\ntest_wear_mask = pd.DataFrame()\ntest_wear_mask['is_wear'] = ['1'] * len(os.listdir(with_mask_test_dir)) + ['0'] * len(os.listdir(without_mask_test_dir))\ntest_wear_mask['dir'] = [os.path.join(with_mask_test_dir, name) for name in os.listdir(with_mask_test_dir)] + [os.path.join(without_mask_test_dir, name) for name in os.listdir(without_mask_test_dir)]","48ad100f":"plt.figure(figsize = (15, 10))\n\nplt.subplot(1, 2, 1)\nplt.title('attitude of mask wearers to non-wearers on train data \\n')\nsns.countplot(x = train_wear_mask['is_wear'])\n\nplt.subplot(1, 2, 2)\nplt.title('attitude of mask wearers to non-wearers on test_data \\n')\n\nsns.countplot(x = test_wear_mask['is_wear'])","1db661b8":"# Train data\n\nfrom shutil import copyfile\n\nos.mkdir('train')\nos.mkdir('train\/without')\nos.mkdir('train\/with')\n\ntrain_dir = 'train'\ntrain_with = 'train\/with'\ntrain_without = 'train\/without'\n\nfor index in range(len(train_wear_mask)):\n    if train_wear_mask.is_wear.iloc[index] == '1':\n        copyfile(src = train_wear_mask['dir'].iloc[index], dst = 'train\/with\/{}.jpg'.format(index))\n    else:\n        copyfile(src = train_wear_mask['dir'].iloc[index], dst = 'train\/without\/{}.jpg'.format(index))","04f8a21f":"# Test_data\n\nos.mkdir('test')\nos.mkdir('test\/without')\nos.mkdir('test\/with')\n\ntest_dir = 'test'\ntest_with = 'test\/with_test'\ntest_without = 'test\/without_test'\n\nfor index in range(len(test_wear_mask)):\n    if test_wear_mask.is_wear.iloc[index] == '1':\n        copyfile(src = test_wear_mask['dir'].iloc[index], dst = 'test\/with\/{}.jpg'.format(index))\n    else:\n        copyfile(src = test_wear_mask['dir'].iloc[index], dst = 'test\/without\/{}.jpg'.format(index))","747e1960":"train_datagen = ImageDataGenerator(\n    rescale = 1.\/255,\n    zoom_range = 0.2,\n    horizontal_flip  = True,\n    rotation_range = 40,\n    fill_mode = 'nearest'\n)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\n\ntrain_generator = train_datagen.flow_from_directory(\n    train_dir,\n    batch_size = 32,\n    class_mode = 'binary',\n    target_size = (256, 256)\n)\n\ntest_generator = train_datagen.flow_from_directory(\n    test_dir,\n    batch_size = 32,\n    class_mode = 'binary',\n    target_size = (256, 256)\n)\n\nvalid_generator = test_datagen.flow_from_directory(\n    test_dir,\n    batch_size = 32,\n    class_mode = 'binary',\n    target_size = (256, 256)\n)","72eb0447":"plt.figure(figsize = (20 , 20))\n\nplt.subplot(3, 3, 1)\nplt.title('with_mask')\nplt.imshow(load_img(train_wear_mask.query(\"is_wear == '1'\").dir.iloc[1], target_size = (268, 400, 3)))\n\nplt.subplot(3, 3, 2)\nplt.title('with_mask')\nplt.imshow(load_img(train_wear_mask.query(\"is_wear == '1'\").dir.iloc[2], target_size = (268, 400, 3)))\n\nplt.subplot(3, 3, 3)\nplt.title('with_mask')\nplt.imshow(load_img(train_wear_mask.query(\"is_wear == '1'\").dir.iloc[3], target_size = (268, 400, 3)))\n\nplt.subplot(3, 3, 4)\nplt.title('augmentated_image')\nplt.imshow(array_to_img(datagen.flow(img_to_array(load_img(train_wear_mask.query(\"is_wear == '1'\").dir.iloc[1], target_size = (268, 400, 3))).reshape(1, 268, 400, 3))[0].reshape(268, 400, 3)))\nplt.subplot(3, 3, 5)\nplt.title('augmentated_image')\nplt.imshow(array_to_img(datagen.flow(img_to_array(load_img(train_wear_mask.query(\"is_wear == '1'\").dir.iloc[2], target_size = (268, 400, 3))).reshape(1, 268, 400, 3))[0].reshape(268, 400, 3)))\n\nplt.subplot(3, 3, 6)\nplt.title('augmentated_image')\nplt.imshow(array_to_img(datagen.flow(img_to_array(load_img(train_wear_mask.query(\"is_wear == '1'\").dir.iloc[3], target_size = (268, 400, 3))).reshape(1, 268, 400, 3))[0].reshape(268, 400, 3)))\n\nplt.subplot(3, 3, 7)\nplt.title('without_mask')\nplt.imshow(load_img(train_wear_mask.query(\"is_wear == '0'\").dir.iloc[1], (428, 320, 3)))\n\nplt.subplot(3, 3, 8)\nplt.title('without_mask')\nplt.imshow(load_img(train_wear_mask.query(\"is_wear == '0'\").dir.iloc[2], (428, 320, 3)))\n\nplt.subplot(3, 3, 9)\nplt.title('without_mask')\nplt.imshow(load_img(train_wear_mask.query(\"is_wear == '0'\").dir.iloc[3], (428, 320, 3)))","1208e17c":"import tensorflow as tf\n\ndef scheduler(epoch, lr):\n    if epoch < 15:\n        return lr\n    else:\n        return lr * tf.math.exp(-0.1)\n\ncallbacks = [\n#     EarlyStopping(monitor = 'val_accuracy', patience = 5),\n    ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=5, min_lr=0.001),\n    ModelCheckpoint(filepath='weights.h5', save_weights_only=True, monitor='val_accuracy',mode='max', save_best_only=True),\n    LearningRateScheduler(scheduler),\n    \n]\n\n\nfrom keras.applications import VGG16\n\nVGG =  VGG16(weights = 'imagenet', include_top = False, input_shape = (256, 256, 3))\n\nVGG.trainable = False\n\nmodel = Sequential()\nmodel.add(VGG)\n\nmodel.add(Flatten())\n\nmodel.add(Dropout(0.3))\nmodel.add(Dense(64, activation = 'relu'))\nmodel.add(Dense(1, activation = 'sigmoid'))\n\nmodel.compile(loss = 'binary_crossentropy', metrics = ['accuracy'])\n\nhistory = model.fit(\n    train_generator,\n    batch_size = 32,\n    epochs = 30,\n    validation_data = test_generator,\n    callbacks = callbacks\n         )\n\nplt.figure(figsize = (10, 10))\nplt.subplot(2,2, 1)\nplt.title('accuracy')\nsns.lineplot(data = history.history, x = range(len(history.history['val_accuracy'])), y = 'val_accuracy')\nsns.lineplot(data = history.history, x = range(len(history.history['val_accuracy'])), y = 'accuracy')\nplt.legend()\n\nplt.subplot(2,2, 2)\nplt.title('loss')\nsns.lineplot(data = history.history, x = range(len(history.history['val_accuracy'])), y = 'val_loss')\nsns.lineplot(data = history.history, x = range(len(history.history['val_accuracy'])), y = 'loss')\nplt.legend()\n\nVGG.trainable = True\nset_trainable = False\n\nfor layer in VGG.layers:\n    if layer.name == 'block5_conv1':\n        set_trainable = True\n    if set_trainable:\n        layer.trainable = True\n    else:\n        layer.trainable = False\n        \nmodel.compile(loss = 'binary_crossentropy', metrics = ['accuracy'])\n\nhistory = model.fit(\n    train_generator,\n    batch_size = 32,\n    epochs = 30,\n    validation_data = test_generator,\n    callbacks = callbacks\n         )\n\nplt.subplot(2,2, 3)\nplt.title('accuracy')\nsns.lineplot(data = history.history, x = range(len(history.history['val_accuracy'])), y = 'val_accuracy')\nsns.lineplot(data = history.history, x = range(len(history.history['val_accuracy'])), y = 'accuracy')\nplt.legend()\n\nplt.subplot(2,2, 4)\nplt.title('loss')\nsns.lineplot(data = history.history, x = range(len(history.history['val_accuracy'])), y = 'val_loss')\nsns.lineplot(data = history.history, x = range(len(history.history['val_accuracy'])), y = 'loss')\nplt.legend()\n","2ed2334f":"# Visualization","496de3db":"\n# Visualizing data","a99eca4c":"Thank you for reading before here, if you find this notebook useful, please upvote it))\nSoon there will be a second part where I will show on what grounds the model draws conclusions, subscribe to my profile so as not to miss the second part, Thank you very much good luck to everyone","b1a9468f":"# distribute photos to catalogs","eef4af85":"# directories of datasets","b4647a97":"# Augmentation"}}