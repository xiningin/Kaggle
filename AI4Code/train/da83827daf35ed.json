{"cell_type":{"9ba9b12e":"code","4980dc52":"code","28a06ff1":"code","cc853ae7":"code","b94a9817":"code","d0144b52":"code","ee583e44":"code","4c6316c3":"code","4802389d":"code","2b4634fa":"code","15a70b7f":"code","badb9729":"code","8af9ffc7":"code","a58470e6":"code","4316411f":"code","b292fa6d":"code","3c91a524":"code","4f8c39af":"code","fdcc9eb0":"code","56768000":"code","a9e92f76":"code","3dd65969":"markdown","6badfdb0":"markdown","0d88a2c5":"markdown","377d44ef":"markdown","4a5a95b1":"markdown","b3800b3b":"markdown","e3c6c67c":"markdown","36cf5f3b":"markdown","5c888fe1":"markdown","07e640ce":"markdown","2842b1c3":"markdown","1d7a5322":"markdown","9d0d412a":"markdown"},"source":{"9ba9b12e":"import numpy as np\nimport pandas as pd","4980dc52":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf = train.copy()\n\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndf_test = test.copy()\n\ndf_test.head()","28a06ff1":"df_test['MSZoning'].unique()","cc853ae7":"total = df.isnull().sum().sort_values(ascending = False).head(20)*100\/len(df)\ntotal","b94a9817":"total = df_test.isnull().sum().sort_values(ascending = False).head(20)*100\/len(df)\ntotal","d0144b52":"df = df.drop(['PoolQC','MiscFeature','Alley','Fence','FireplaceQu','LotFrontage','MSZoning'], axis='columns')\ndf_test = df_test.drop(['PoolQC','MiscFeature','Alley','Fence','FireplaceQu','LotFrontage', 'MSZoning'], axis='columns')","ee583e44":"df.describe()","4c6316c3":"# Removing columns with >50% zeroes & having large max_values\n# not removing '2ndFlrSF' because of house type\ndf = df.drop(['MasVnrArea', 'BsmtFinSF2', '2ndFlrSF', 'LowQualFinSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch',\n              'PoolArea', 'MiscVal'], axis='columns')\ndf_test = df_test.drop(['MasVnrArea', 'BsmtFinSF2', '2ndFlrSF', 'LowQualFinSF', 'EnclosedPorch', '3SsnPorch',\n                        'ScreenPorch', 'PoolArea', 'MiscVal'], axis='columns')","4802389d":"df.dtypes.value_counts()","2b4634fa":"df.head()","15a70b7f":"# Creating independent and dependent variables\nx_train = df.drop(['SalePrice'], axis=1)\ny_train = df.SalePrice\n\nx_test = df_test","badb9729":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\n\nnum_features = df.select_dtypes(include = ['int64', 'float64']).columns.tolist()\ncat_features = df.select_dtypes(include = ['object']).columns.tolist()\n\nnum_features.remove('SalePrice')\n\n# processing for numerical data\nnumerical_transformer = Pipeline(steps = [\n                                          ('imputer', SimpleImputer(strategy='mean')),\n                                          ('scalar', StandardScaler())\n])\n\n# processing for categorical data\ncat_transformer = Pipeline(steps = [\n                                    ('imputer', SimpleImputer(strategy='most_frequent',fill_value='missing')),\n                                    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# processing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers = [\n                    ('nums', numerical_transformer, num_features),\n                    ('cat', cat_transformer, cat_features)\n    ]\n)\n","8af9ffc7":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\n\nlda = LDA(n_components = 2)\n\npipe_Linear = Pipeline(steps = [\n                                ('preprocessor', preprocessor),\n                                ('linear', LinearRegression() )\n])\npipe_Forest = Pipeline(steps = [\n                                ('preprocessor', preprocessor),\n                                ('forest', RandomForestRegressor(n_estimators = 100, random_state = 42) )\n])\n\npipe_Tree = Pipeline(steps = [\n                                ('preprocessor', preprocessor),\n                                ('tree', DecisionTreeRegressor(random_state = 0) )\n])\n\npipe_Lasso = Pipeline(steps = [\n                               ('preprocessor', preprocessor),\n                               ('Lasso', Lasso(random_state = 42))\n])\n\npipe_Ridge = Pipeline(steps = [\n                               ('preprocessor', preprocessor),\n                               ('Ridge', Ridge(random_state = 42))\n])\n","a58470e6":"list_models = [pipe_Linear, pipe_Forest, pipe_Tree, pipe_Lasso, pipe_Ridge]","4316411f":"from sklearn.model_selection import cross_val_score\n\nfor pipe in list_models:\n  score = cross_val_score(pipe, x_train, y_train, scoring='neg_mean_squared_error', cv = 5)\n","b292fa6d":"score","3c91a524":"pipe_Linear.fit(x_train, y_train)\na = pipe_Linear.predict(x_test)\n\npipe_Forest.fit(x_train, y_train)\nb = pipe_Forest.predict(x_test)\n\npipe_Tree.fit(x_train, y_train)\nc = pipe_Tree.predict(x_test)\n\npipe_Lasso.fit(x_train, y_train)\nd = pipe_Lasso.predict(x_test)\n\npipe_Ridge.fit(x_train, y_train)\ne = pipe_Ridge.predict(x_test)","4f8c39af":"combined_avg = (a + b + c + d + e)\/5\ncombined_avg","fdcc9eb0":"output = pd.DataFrame()\noutput[\"Id\"] = test.Id\noutput[\"SalePrice\"] = combined_avg","56768000":"output.head()","a9e92f76":"output.to_csv('submission.csv', index = False)","3dd65969":"Average value of all regression models","6badfdb0":"Inserting all regression models in a list","0d88a2c5":"Declaring training and test sets","377d44ef":"Exporting \"output\" as a csv file ","4a5a95b1":"Importing libraries","b3800b3b":"Calculating missing data","e3c6c67c":"Regression model (pipelining it)","36cf5f3b":"Importing dataset","5c888fe1":"Dropping columns with >10% null values","07e640ce":"Calculating cross_val_score for all 5 regression models","2842b1c3":"Pipelining","1d7a5322":"Predicting the training sets","9d0d412a":"Creating dataframe 'output'"}}