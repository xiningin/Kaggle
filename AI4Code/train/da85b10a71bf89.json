{"cell_type":{"a1641eec":"code","33ded29f":"code","35b11c54":"code","79e70bd3":"code","ee23c88a":"code","80b94522":"code","aa49e09a":"code","288d133f":"code","e0ec7875":"code","85ed28c3":"code","cb125eca":"code","0dd69a80":"code","26df84c6":"code","627b57ae":"code","ec071ce1":"code","1535fca2":"code","b4e74218":"code","fcccaaf4":"code","3c8bce4d":"code","3cc27173":"code","c0dbc659":"code","89e91917":"code","6984511a":"code","294b817a":"code","adec7dc2":"code","9d186845":"code","d6811e55":"code","09a8733b":"code","294fcadf":"code","05e23d85":"code","295acfa3":"markdown","45487b6e":"markdown","dc00a9c8":"markdown","6a87cdf9":"markdown","0ef126d6":"markdown","58219022":"markdown","bec74055":"markdown","3ebeab2d":"markdown","019210c5":"markdown","1d5c3a7f":"markdown"},"source":{"a1641eec":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings","33ded29f":"warnings.filterwarnings(\"ignore\")","35b11c54":"train_data = pd.read_csv('..\/input\/train.csv')\ntrain_data.head()","79e70bd3":"test_data = pd.read_csv('..\/input\/test.csv')\ntest_data.head()","ee23c88a":"def check_NaN(df, name):\n    '''\n    Check whether a Pandas DataFrame has NaN value in it.\n    \n    Input(s):\n        df: Pandas DataFrame.\n        name: String, the data's column name.\n    \n    Return(s):\n        String, represents how many NaN in the column, or none.\n    '''\n    cnt = df[name].isna().sum()\n    if cnt > 0:\n        return 'The {} column have {} NaN value!'.format(name, cnt)\n    else:\n        return 'The {} column do not have NaN value.'.format(name)","80b94522":"def show_count_bar(df, name):\n    '''\n    Plot DataFrame with count bar.\n    \n    Input(s):\n        df: Pandas DataFrame.\n        name: String, the data's column name.\n    \n    Return(s):\n        None.\n    '''\n    x1, y1 = np.unique(np.array(df[name][df[name].notna()]), return_counts=True)\n    x2, y2 = np.unique(np.array(df[name][df[name].notna() & df['Survived'] == 1]), return_counts=True)\n    \n    x1 = np.array(x1).astype('str')\n    x2 = np.array(x2).astype('str')\n    \n    plt.bar(x1, y1, label='Dead')\n    plt.bar(x2, y2, label='Survived')\n    plt.xlabel(name)\n    plt.ylabel('Count')\n    plt.legend()\n    plt.show()","aa49e09a":"def show_hist(df, name):\n    '''\n    Plot DataFrame with hist.\n    \n    Input(s):\n        df: Pandas DataFrame.\n        name: String, the data's column name.\n    \n    Return(s):\n        None.\n    '''\n    plt.hist(df[name][df[name].notna()], label='Dead')\n    plt.hist(df[name][df[name].notna() & df['Survived'] == 1], label='Survived')\n    plt.xlabel(name)\n    plt.ylabel('Count')\n    plt.legend()\n    plt.show()","288d133f":"sns.set(style=\"white\", palette=\"muted\", color_codes=True)","e0ec7875":"show_count_bar(train_data, 'Pclass')\n\nprint(check_NaN(train_data, 'Pclass'))","85ed28c3":"show_count_bar(train_data, 'Sex')\n\nprint(check_NaN(train_data, 'Sex'))","cb125eca":"show_hist(train_data, 'Age')\n\nprint(check_NaN(train_data, 'Age'))","0dd69a80":"show_count_bar(train_data, 'SibSp')\n\nprint(check_NaN(train_data, 'SibSp'))","26df84c6":"show_count_bar(train_data, 'Parch')\n\nprint(check_NaN(train_data, 'Parch'))","627b57ae":"show_count_bar(train_data, 'Embarked')\n\nprint(check_NaN(train_data, 'Embarked'))","ec071ce1":"show_hist(train_data, 'Fare')\n\nprint(check_NaN(train_data, 'Fare'))","1535fca2":"def get_one_hot(array):\n    return np.array((array['Pclass'] == 1, array['Pclass'] == 2,\n                    array['Pclass'] == 3, array['Sex'] == 'male',\n                    array['Sex'] == 'female', array['SibSp'],\n                    array['Parch'], array['Fare'],\n                    array['Embarked'] == 'C', array['Embarked'] == 'Q',\n                    array['Embarked'] == 'S')).swapaxes(0, 1).astype('float32')","b4e74218":"x_train = train_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]\nx_train.head()","fcccaaf4":"x_train = get_one_hot(x_train)\n\nx_train[:10]","3c8bce4d":"y_train = np.array(train_data['Survived'])\n\ny_train[:10]","3cc27173":"x_test = test_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]\n\nx_test.head()","c0dbc659":"x_test = get_one_hot(x_test)\n\nx_test[:10]","89e91917":"from mlxtend.classifier import StackingCVClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.impute import SimpleImputer","6984511a":"imp = SimpleImputer(missing_values=np.nan, strategy='mean')\nimp = imp.fit(x_train)\nx_train_imp = imp.transform(x_train)","294b817a":"clf1 = RandomForestClassifier()\nclf2 = GradientBoostingClassifier()\nlr = LogisticRegression()\n\nsclf = StackingCVClassifier(classifiers=[clf1, clf2], meta_classifier=lr)","adec7dc2":"param_test = {'randomforestclassifier__n_estimators': [10, 120],\n              'randomforestclassifier__max_depth': [2, 15],\n              'gradientboostingclassifier__n_estimators': [10, 120],\n              'gradientboostingclassifier__max_depth': [2, 15],\n              'gradientboostingclassifier__learning_rate' : [0.01, 0.1],\n              'meta_classifier__C': [0.1, 10.0]}","9d186845":"sclf.fit(x_train_imp, y_train)","d6811e55":"x = ['Pclass:1', 'Pclass:2', 'Pclass:3', 'male', 'female', 'SibSp', 'Parch', 'Fare', 'Embarked:C', 'Embarked:Q', 'Embarked:S']\n\nplt.figure(figsize=(16, 9))\nplt.title('Importance for the classification')\nplt.bar(x, sclf.clfs_[0].feature_importances_)\nplt.show()","09a8733b":"x_test_imp = imp.transform(x_test)","294fcadf":"data = np.array([np.array(test_data['PassengerId']), sclf.predict(x_test_imp)]).swapaxes(0, 1)\n\nresults = pd.DataFrame(data, columns=['PassengerId', 'Survived'])\nresults.set_index('PassengerId', inplace=True)\n\nresults.head()","05e23d85":"results.to_csv('predict.csv')","295acfa3":"## Check datasets","45487b6e":"## Import libs","dc00a9c8":"## Show feature importance","6a87cdf9":"## Process datasets","0ef126d6":"#### One-Hot\n\nMake `Pclass`, `Sex` and `Embarked` One-hot.","58219022":"### Process test data","bec74055":"### Process train data","3ebeab2d":"## Train the stacking model","019210c5":"## Import datasets","1d5c3a7f":"## Predict test data"}}