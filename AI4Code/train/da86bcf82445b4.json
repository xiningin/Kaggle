{"cell_type":{"26cb677a":"code","66316611":"code","c8e9e033":"code","d52be194":"code","d5fa7258":"code","0580a58e":"code","214557f5":"code","3116de74":"code","7d9a0854":"code","c0e37fdb":"code","53f540d7":"code","cf9dddb0":"code","30f76323":"code","1fadb82d":"code","463f6e30":"code","c268f364":"markdown","ce892236":"markdown","bf5da734":"markdown","2c95b7d3":"markdown","115f83dc":"markdown","189e3d1c":"markdown","496ec539":"markdown","7b70a9d4":"markdown","ab5d31bd":"markdown","df2b33d4":"markdown","da8008fe":"markdown","91742589":"markdown","e525be38":"markdown","87eff4e3":"markdown","6497b280":"markdown"},"source":{"26cb677a":" !pip install -q tensorflow-model-optimization","66316611":"import tempfile\nimport os\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow import keras\n%load_ext tensorboard","c8e9e033":"# Load MNIST dataset\nmnist = keras.datasets.mnist\n(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n\n# Normalize the input image so that each pixel value is between 0 to 1.\ntrain_images = train_images \/ 255.0\ntest_images = test_images \/ 255.0\n\n# Define the model architecture.\nmodel = keras.Sequential([\n  keras.layers.InputLayer(input_shape=(28, 28)),\n  keras.layers.Reshape(target_shape=(28, 28, 1)),\n  keras.layers.Conv2D(filters=12, kernel_size=(3, 3), activation='relu'),\n  keras.layers.MaxPooling2D(pool_size=(2, 2)),\n  keras.layers.Flatten(),\n  keras.layers.Dense(10)\n])\n\n# Train the digit classification model\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\nmodel.fit(\n  train_images,\n  train_labels,\n  epochs=4,\n  validation_split=0.1,\n)","d52be194":"_, baseline_model_accuracy = model.evaluate(\n    test_images, test_labels, verbose=0)\n\nprint('Baseline test accuracy:', baseline_model_accuracy)\n\n_, keras_file = tempfile.mkstemp('.h5')\ntf.keras.models.save_model(model, keras_file, include_optimizer=False)\nprint('Saved baseline model to:', keras_file)\n","d5fa7258":"import tensorflow_model_optimization as tfmot\nprune_low_magnitude = tfmot.sparsity.keras.prune_low_magnitude\n# Compute end step to finish pruning after 2 epochs.\nbatch_size = 128\nepochs = 2\nvalidation_split = 0.1 # 10% of training set will be used for validation set. \nnum_images = train_images.shape[0] * (1 - validation_split)\nend_step = np.ceil(num_images \/ batch_size).astype(np.int32) * epochs\n# Define model for pruning.\npruning_params = {\n      'pruning_schedule': tfmot.sparsity.keras.PolynomialDecay(initial_sparsity=0.50,\n                                                               final_sparsity=0.80,\n                                                               begin_step=0,\n                                                               end_step=end_step)\n}\nmodel_for_pruning = prune_low_magnitude(model, **pruning_params)\n# `prune_low_magnitude` requires a recompile.\nmodel_for_pruning.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\nmodel_for_pruning.summary()","0580a58e":"logdir = tempfile.mkdtemp()\n\ncallbacks = [\n  tfmot.sparsity.keras.UpdatePruningStep(),\n  tfmot.sparsity.keras.PruningSummaries(log_dir=logdir),\n]\n  \nmodel_for_pruning.fit(train_images, train_labels,\n                  batch_size=batch_size, epochs=epochs, validation_split=validation_split,\n                  callbacks=callbacks)","214557f5":"_, model_for_pruning_accuracy = model_for_pruning.evaluate(\n   test_images, test_labels, verbose=0)\n\nprint('Baseline test accuracy:', baseline_model_accuracy) \nprint('Pruned test accuracy:', model_for_pruning_accuracy)","3116de74":"#%tensorboard --logdir={logdir}","7d9a0854":"model_for_export = tfmot.sparsity.keras.strip_pruning(model_for_pruning)\n\n_, pruned_keras_file = tempfile.mkstemp('.h5')\ntf.keras.models.save_model(model_for_export, pruned_keras_file, include_optimizer=False)\nprint('Saved pruned Keras model to:', pruned_keras_file)","c0e37fdb":"converter = tf.lite.TFLiteConverter.from_keras_model(model_for_export)\npruned_tflite_model = converter.convert()\n\n_, pruned_tflite_file = tempfile.mkstemp('.tflite')\n\nwith open(pruned_tflite_file, 'wb') as f:\n  f.write(pruned_tflite_model)\n\nprint('Saved pruned TFLite model to:', pruned_tflite_file)","53f540d7":"def get_gzipped_model_size(file):\n    # Returns size of gzipped model, in bytes.\n    import os\n    import zipfile\n    _, zipped_file = tempfile.mkstemp('.zip')\n    with zipfile.ZipFile(zipped_file, 'w', compression=zipfile.ZIP_DEFLATED) as f:\n        f.write(file)\n\n    return os.path.getsize(zipped_file)","cf9dddb0":"print(\"Size of gzipped baseline Keras model: %.2f bytes\" % (get_gzipped_model_size(keras_file)))\nprint(\"Size of gzipped pruned Keras model: %.2f bytes\" % (get_gzipped_model_size(pruned_keras_file)))\nprint(\"Size of gzipped pruned TFlite model: %.2f bytes\" % (get_gzipped_model_size(pruned_tflite_file)))","30f76323":"converter = tf.lite.TFLiteConverter.from_keras_model(model_for_export)\nconverter.optimizations = [tf.lite.Optimize.DEFAULT]\nquantized_and_pruned_tflite_model = converter.convert()\n\n_, quantized_and_pruned_tflite_file = tempfile.mkstemp('.tflite')\n\nwith open(quantized_and_pruned_tflite_file, 'wb') as f:\n  f.write(quantized_and_pruned_tflite_model)\n\nprint('Saved quantized and pruned TFLite model to:', quantized_and_pruned_tflite_file)\n\nprint(\"Size of gzipped baseline Keras model: %.2f bytes\" % (get_gzipped_model_size(keras_file)))\nprint(\"Size of gzipped pruned and quantized TFlite model: %.2f bytes\" % (get_gzipped_model_size(quantized_and_pruned_tflite_file)))","1fadb82d":"import numpy as np\n\ndef evaluate_model(interpreter):\n  input_index = interpreter.get_input_details()[0][\"index\"]\n  output_index = interpreter.get_output_details()[0][\"index\"]\n\n  # Run predictions on ever y image in the \"test\" dataset.\n  prediction_digits = []\n  for i, test_image in enumerate(test_images):\n    if i % 1000 == 0:\n      print('Evaluated on {n} results so far.'.format(n=i))\n    # Pre-processing: add batch dimension and convert to float32 to match with\n    # the model's input data format.\n    test_image = np.expand_dims(test_image, axis=0).astype(np.float32)\n    interpreter.set_tensor(input_index, test_image)\n\n    # Run inference.\n    interpreter.invoke()\n\n    # Post-processing: remove batch dimension and find the digit with highest\n    # probability.\n    output = interpreter.tensor(output_index)\n    digit = np.argmax(output()[0])\n    prediction_digits.append(digit)\n\n  print('\\n')\n  # Compare prediction results with ground truth labels to calculate accuracy.\n  prediction_digits = np.array(prediction_digits)\n  accuracy = (prediction_digits == test_labels).mean()\n  return accuracy","463f6e30":"interpreter = tf.lite.Interpreter(model_content=quantized_and_pruned_tflite_model)\ninterpreter.allocate_tensors()\n\ntest_accuracy = evaluate_model(interpreter)\n\nprint('Pruned and quantized TFLite test_accuracy:', test_accuracy)\nprint('Pruned TF test accuracy:', model_for_pruning_accuracy)","c268f364":"**Define a helper function to actually compress the models via gzip and measure the zipped size.**","ce892236":"# Create a 10x smaller model from combining pruning and quantization\n\n**You can apply post-training quantization to the pruned model for additional benefits.**","bf5da734":"# Conclusion\n\nIn this tutorial, we saw how to create sparse models with the TensorFlow Model Optimization Toolkit API for both TensorFlow and TFLite. we then combined pruning with post-training quantization for additional benefits.\n\nWe created a 10x smaller model for MNIST, with minimal accuracy difference.","2c95b7d3":"**You evaluate the pruned and quantized model and see that the accuracy from TensorFlow persists to the TFLite backend.**","115f83dc":"**Create 3x smaller models from pruning**\n\nBoth tfmot.sparsity.keras.strip_pruning and applying a standard compression algorithm (e.g. via gzip) are necessary to see the compression benefits of pruning.\n\nFirst, create a compressible model for TensorFlow.","189e3d1c":"**Train and evaluate the model against baseline**\n\nFine tune with pruning for two epochs.\n\ntfmot.sparsity.keras.UpdatePruningStep is required during training, and tfmot.sparsity.keras.PruningSummaries provides logs for tracking progress and debugging.","496ec539":"**The logs show the progression of sparsity on a per-layer basis.**","7b70a9d4":"**Train a model for MNIST without pruning**","ab5d31bd":"**See persistence of accuracy from TF to TFLite**\n\n**Define a helper function to evaluate the TF Lite model on the test dataset.**","df2b33d4":"**Evaluate baseline test accuracy and save the model for later usage.**","da8008fe":"**Fine-tune pre-trained model with pruning**\n\nDefine the model:\n\nYou will apply pruning to the whole model and see this in the model summary.\nIn this example, you start the model with 50% sparsity (50% zeros in weights) and end with 80% sparsity.","91742589":"# References:\n[https:\/\/medium.com\/tensorflow\/tensorflow-model-optimization-toolkit-pruning-api-42cac9157a6a](http:\/\/)\n[https:\/\/towardsdatascience.com\/pruning-deep-neural-network-56cae1ec5505](http:\/\/)\n[https:\/\/www.tensorflow.org\/model_optimization\/guide\/pruning\/pruning_with_keras](http:\/\/)\n[https:\/\/www.tensorflow.org\/model_optimization\/guide\/quantization\/training](http:\/\/)\n[https:\/\/www.tensorflow.org\/model_optimization\/guide\/quantization\/post_training](http:\/\/)\n[https:\/\/medium.com\/apache-mxnet\/model-quantization-for-production-level-neural-network-inference-f54462ebba05](http:\/\/)\n\n\n# **Pruning**\n\nPruning is one of the methods for inference to efficiently produce models smaller in size, more memory-efficient, more power-efficient and faster at inference with minimal loss in accuracy, other such techniques being weight sharing and quantization.\n\n**why Pruning ?**\nAs we Know the state of the art models are getting more and more accurate but this progress comes with a cost of different resources.\n1. Models are getting larger\n2. The Second Challenge: Speed\n3. The Third Challenge: Energy Efficiency\n\n**Solution \u2014 Efficient Inference Algorithms**\n1. Weight pruning\n2. Quantization\n\n **Weight pruning:**\n In Weight Pruning our optimizations aims to reduce the number of parameters and operations involved in the computation by removing connections, and thus parameters, in between neural network layers.\n![](http:\/\/\/\/miro.medium.com\/max\/875\/0*iNI8Oc80Eunm8NgI)\n\nWeight pruning means eliminating unnecessary values in the weight tensors. We are practically setting the neural network parameters\u2019 values to zero to remove what we estimate are unnecessary connections between the layers of a neural network. This is done during the training process to allow the neural network to adapt to the changes.\nHere, to achieve sparsity of k% we rank the individual weights in weight matrix W according to their magnitude, and then set to zero the smallest k%.\n\n**Results across several models**\nIn our experiments, we have validated that this technique can be successfully applied to different types of models across distinct tasks, from image processing convolutional-based neural networks to speech processing ones using recurrent neural networks. The following table shows a subset of some of these experimental results.\n\n![](http:\/\/\/\/miro.medium.com\/max\/875\/1*GxXn3vZBtnYS3SuUf_-7AA.png)\n\n**Quantization:**\nThere are two forms of quantization: post-training quantization and quantization aware training. Start with post-training quantization since it's easier to use, though quantization aware training is often better for model accuracy.\n\n **Post-training quantization:**\nPost-training quantization includes general techniques to reduce CPU and hardware accelerator latency, processing, power, and model  size with little degradation in model accuracy. These techniques can be performed on an already-trained float TensorFlow model and applied during TensorFlow Lite conversion. These techniques are enabled as options in the TensorFlow Lite converter.\n\n**quantization aware training:**\nQuantization aware training emulates inference-time quantization, creating a model that downstream tools will use to produce actually quantized models. The quantized models use lower-precision (e.g. 8-bit instead of 32-bit float), leading to benefits during deployment.","e525be38":"**Then, create a compressible model for TFLite.**","87eff4e3":"**Compare and see that the models are 3x smaller from pruning.**","6497b280":"**For this example, there is minimal loss in test accuracy after pruning, compared to the baseline.**"}}