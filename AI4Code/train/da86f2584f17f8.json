{"cell_type":{"6a6b6198":"code","f16e593b":"code","5bb19c2c":"code","cdf73285":"code","6a2d67ee":"code","93fea1d1":"code","ec16217b":"code","8c979089":"code","305cccd9":"code","a3bc008f":"code","c51a155f":"code","be40c527":"code","efb17459":"code","7fa0e1e4":"code","5e7ea351":"code","1ba80c60":"code","7c61d034":"code","f3a01da9":"code","910db887":"code","bcef9bfe":"code","9db9863e":"code","daa221f6":"code","67afa55c":"markdown","c67f364d":"markdown","8d1acdb4":"markdown","3a878fa0":"markdown","b94b430d":"markdown"},"source":{"6a6b6198":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","f16e593b":"from sklearn.datasets import make_blobs","5bb19c2c":"data = make_blobs(n_samples=300,\n    n_features=2,\n    centers=2,\n    cluster_std=1.0,random_state=101)","cdf73285":"X,y = data","6a2d67ee":"np.random.seed(seed=101)\nz_noise = np.random.normal(size=len(X))\nz_noise = pd.Series(z_noise)","93fea1d1":"feat = pd.DataFrame(X)\nfeat = pd.concat([feat,z_noise],axis=1)\nfeat.columns = ['X1','X2','X3']","ec16217b":"feat.head()","8c979089":"plt.scatter(feat['X1'],feat['X2'],c=y)","305cccd9":"from mpl_toolkits.mplot3d import Axes3D","a3bc008f":"#%matplotlib notebook  --> Try this command for an interactive 3D Visualization","c51a155f":"fig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(feat['X1'],feat['X2'],feat['X3'],c=y)","be40c527":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.optimizers import SGD","efb17459":"# 3 --> 2\nencoder = Sequential()\nencoder.add(Dense(units=2,activation='relu',input_shape=[3]))","7fa0e1e4":"# 2 ---> 3\ndecoder = Sequential()\ndecoder.add(Dense(units=3,activation='relu',input_shape=[2]))","5e7ea351":"# ENCODER\n# 3 ---> 2 ----> 3\nautoencoder = Sequential([encoder,decoder])\nautoencoder.compile(loss=\"mse\" ,optimizer=SGD(lr=1.5))","1ba80c60":"from sklearn.preprocessing import MinMaxScaler","7c61d034":"# Note how all the data is used! There is no \"right\" answer here\nscaler = MinMaxScaler()\nscaled_data = scaler.fit_transform(feat)","f3a01da9":"# scaled_data","910db887":"autoencoder.fit(scaled_data,scaled_data,epochs=5)","bcef9bfe":"encoded_2dim = encoder.predict(scaled_data)","9db9863e":"encoded_2dim","daa221f6":"plt.scatter(encoded_2dim[:,0],encoded_2dim[:,1],c=y)","67afa55c":"### This was a simple example of reducing dimensions from 3 to 2. In part 2, I will use MNIST data with added noise to reduce both dimensions and noise.","c67f364d":"# AutoEncoders for Dimensionality Reduction","8d1acdb4":"# Encoder and Decoder","3a878fa0":"# Thanks","b94b430d":"https:\/\/matplotlib.org\/mpl_toolkits\/mplot3d\/tutorial.html#scatter-plots"}}