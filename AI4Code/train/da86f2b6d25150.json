{"cell_type":{"0f89a1bd":"code","dd690966":"code","9e25977a":"code","4a964110":"code","7c0e5474":"code","df78cf16":"code","37a7c6c6":"code","6ee83a44":"code","5926c035":"code","6efbd295":"code","16050142":"code","2bed6688":"code","1b178ee0":"code","32c55420":"code","a1d51efa":"code","24098395":"code","c3725004":"code","69b845c1":"code","a76fe1e9":"code","5fb35b6a":"code","5ee2ab68":"code","e8c32771":"code","30cc8d40":"code","7f68a3c3":"code","813ce2f8":"code","f3e797fc":"code","63ebe4b7":"code","a7a44b6f":"code","73596d92":"code","24c6922f":"code","b840cb86":"code","512a3a94":"code","4a471909":"code","6f7d60ca":"code","aa74502b":"code","ab6e3244":"code","933497a0":"code","97c98e44":"code","f3137576":"code","8e053c00":"code","c8cac119":"code","d8d25b1b":"code","aa053eaf":"code","82116c50":"code","39fad881":"code","5db405c8":"code","6a02cee8":"code","735744ee":"code","93bb9bdb":"code","ef0f543f":"code","eb22d919":"code","40e11560":"code","99116471":"code","b6015cd5":"code","b51b1677":"code","15d62dc1":"code","8e4280f7":"code","b83525b7":"code","2e81fb34":"code","f8fb645f":"code","c9cff5b4":"code","b35d01af":"code","b7d42c22":"code","ebf98667":"code","1cff472a":"code","fc6462d0":"code","441f1323":"code","3165935e":"code","7844fe1e":"code","0d5f6f62":"code","634e33e6":"code","cbaa6fa9":"code","df6c7648":"code","6cadd558":"code","fed596f4":"code","8302950c":"code","fb16c82a":"code","78641e84":"code","16886e4a":"code","60e58b8d":"markdown","ea7e685e":"markdown","7e3263b6":"markdown","f9f3fb1a":"markdown","f4272934":"markdown","1b08c346":"markdown","60a8c9a2":"markdown","2e8c736b":"markdown","5c3d3b92":"markdown","df3e30f2":"markdown","6792bded":"markdown","ded96e8c":"markdown","91c5f79d":"markdown","a807496f":"markdown","f45a706a":"markdown","ea9aadda":"markdown","63c982ef":"markdown","745a9bf7":"markdown","749123a6":"markdown","43897095":"markdown","ffbce47d":"markdown","8b598cd4":"markdown","f50a2fce":"markdown","20acb614":"markdown"},"source":{"0f89a1bd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as mn\nfrom sklearn.model_selection import train_test_split,cross_val_score,RandomizedSearchCV\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler,LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\n\n%matplotlib inline","dd690966":"df_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ndf_sub = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","9e25977a":"df_train.head(5)","4a964110":"#find shape of training data\ndf_train.shape","7c0e5474":"#check info of training data\ndf_train.info()","df78cf16":"#check columns in training data\ndf_train.columns","37a7c6c6":"# find total number of null values in each columns in training data\ndf_train.isnull().sum()","6ee83a44":"mn.matrix(df_train)\nplt.xlabel('Feature',fontdict={\"fontsize\":24})\nplt.ylabel('Index',fontdict={\"fontsize\":24})","5926c035":"df_test.head()","6efbd295":"df_test.shape","16050142":"df_test.columns","2bed6688":"df_test.info()","1b178ee0":"mn.matrix(df_test)\nplt.xlabel('Feature',fontdict={\"fontsize\":24})\nplt.ylabel('Index',fontdict={\"fontsize\":24})","32c55420":"print(\"Total Age's null values in train data set :\",df_train['Age'].isnull().sum())\nprint(\"Total Age's null values in test data set :\",df_test['Age'].isnull().sum())","a1d51efa":"sns.kdeplot(df_train['Age'],color='red')\nsns.kdeplot(df_test['Age'],color='green')","24098395":"sns.boxplot(df_test['Age'])","c3725004":"df_train['Age_random']=df_train['Age']\nrandom_sample = df_train['Age'].dropna().sample(df_train['Age'].isnull().sum(),random_state = 0)\n#here is a null index and there values\nrandom_sample.index = df_train[df_train['Age'].isnull()].index\ndf_train.loc[df_train['Age'].isnull(),'Age_random']=random_sample","69b845c1":"sns.boxplot(df_train['Age_random'])","a76fe1e9":"df_test['Age_random']=df_test['Age']\nrandom_sample = df_test['Age'].dropna().sample(df_test['Age'].isnull().sum(),random_state = 0)\n#here is a null index and there values\nrandom_sample.index = df_test[df_test['Age'].isnull()].index\ndf_test.loc[df_test['Age'].isnull(),'Age_random']=random_sample","5fb35b6a":"\nsns.boxplot(df_test['Age_random'])","5ee2ab68":"sns.kdeplot(df_train['Age_random'],color='red')\nsns.kdeplot(df_test['Age_random'],color='green')","e8c32771":"df_train.drop('Age',axis=1,inplace=True)\ndf_test.drop('Age',axis=1,inplace=True)","30cc8d40":"print(\"In train dataset there is :\",(df_train['Cabin'].isnull().sum()\/len(df_train))*100,\"% null values\")\nprint(\"In test dataset there is :\",(df_test['Cabin'].isnull().sum()\/len(df_test))*100,\"% null values\")","7f68a3c3":"df_train.drop('Cabin',axis=1,inplace=True)\ndf_test.drop('Cabin',axis=1,inplace=True)","813ce2f8":"print(\"Total Fare's null values in train data set :\",df_train['Fare'].isnull().sum())\nprint(\"Total Fare's null values in test data set :\",df_test['Fare'].isnull().sum())","f3e797fc":"df_test['Fare'].fillna(df_test['Fare'].median(),inplace=True)","63ebe4b7":"sns.kdeplot(df_train['Fare'],color='Red')\nsns.kdeplot(df_test['Fare'],color='Green')","a7a44b6f":"sns.boxplot(df_train['Fare'],color='red')","73596d92":"sns.boxplot(df_test['Fare'],color='green')","24c6922f":"print(\"Total Embarked's null values in train data set :\",df_train['Embarked'].isnull().sum())\nprint(\"Total Embarked's null values in test data set :\",df_test['Embarked'].isnull().sum())","b840cb86":"df_train[df_train['Embarked'].isnull()]","512a3a94":"df_train['Embarked'].fillna(method = 'ffill' , inplace = True)","4a471909":"print(df_train['Embarked'].unique())\nprint(df_train['Embarked'].unique())","6f7d60ca":"mn.matrix(df_train)","aa74502b":"mn.matrix(df_test)","ab6e3244":"df_train.head()","933497a0":"df_train.drop(['PassengerId'],axis=1,inplace=True)\ndf_test.drop(['PassengerId'],axis=1,inplace=True)","97c98e44":"df_train['Name']","f3137576":"df_train = df_train.reset_index(drop = True)\nfor i in range(len(df_train)):\n    if (\"Mr\" in df_train.loc[i , 'Name']) or (\"Master\" in df_train.loc[i , 'Name']):\n        df_train.loc[i , \"gender_category\"] = 0\n    else:\n        df_train.loc[i , 'gender_category'] = 1","8e053c00":"df_test = df_test.reset_index(drop = True)\nfor i in range(len(df_test)):\n    if (\"Mr\" in df_test.loc[i , 'Name']) or (\"Master\" in df_test.loc[i , 'Name']):\n        df_test.loc[i , \"gender_category\"] = 0\n    else:\n        df_test.loc[i , 'gender_category'] = 1","c8cac119":"df_train.drop(['Name'],axis=1,inplace=True)\ndf_test.drop(['Name'],axis=1,inplace=True)","d8d25b1b":"df_train['Sex'].unique()","aa053eaf":"train_sex=pd.get_dummies(df_train['Sex'],drop_first=True)\ndf_train = pd.concat([df_train,train_sex],axis=1)","82116c50":"df_train.drop(['Sex'],axis=1,inplace=True)","39fad881":"test_sex=pd.get_dummies(df_test['Sex'],drop_first=True)\ndf_test = pd.concat([df_test,test_sex],axis=1)","5db405c8":"df_test.drop(['Sex'],axis=1,inplace=True)","6a02cee8":"df_train.head()","735744ee":"len(df_train['Ticket'].unique())","93bb9bdb":"len(df_test['Ticket'].unique())","ef0f543f":"df_train.drop(['Ticket'],axis=1,inplace=True)\ndf_test.drop(['Ticket'],axis=1,inplace=True)","eb22d919":"df_train.head()","40e11560":"df_train['Embarked']","99116471":"df_train['Embarked'].unique()","b6015cd5":"sns.countplot(df_train['Embarked'])","b51b1677":"df_test['Embarked'].unique()","15d62dc1":"sns.countplot(df_test['Embarked'])","8e4280f7":"df_train['Embarked'] = df_train['Embarked'].replace({\"S\":3 , \"C\":2 , \"Q\":1})\ndf_test['Embarked'] = df_test['Embarked'].replace({\"S\":3 , \"C\":2 , \"Q\":1})","b83525b7":"df_train.head()","2e81fb34":"df_test.head()","f8fb645f":"Sclar = StandardScaler()\n\nSclar.fit(df_train[['Fare']])\ndf_train['Fare']  = Sclar.transform(df_train[['Fare']])","c9cff5b4":"Sclar.fit(df_train[['Age_random']])\ndf_train['Age_random']  = Sclar.transform(df_train[['Age_random']])","b35d01af":"Sclar.fit(df_test[['Fare']])\ndf_test['Fare']  = Sclar.transform(df_test[['Fare']])\n\nSclar.fit(df_test[['Age_random']])\ndf_test['Age_random']  = Sclar.transform(df_test[['Age_random']])","b7d42c22":"df_train.head()","ebf98667":"df_test.head()","1cff472a":"x = df_train.drop(['Survived'] ,axis =1)\ny = df_train['Survived']","fc6462d0":"x_train ,x_test , y_train , y_test = train_test_split(x,y,test_size= 0.27 , random_state =100)","441f1323":"print(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","3165935e":"xgb = XGBClassifier()\nresult = cross_val_score(xgb ,x,y, cv =10 ,scoring = 'accuracy',n_jobs =-1 , verbose =1)","7844fe1e":"print(xgb.fit(x_train , y_train))\nxgb_pred = xgb.predict(x_test)","0d5f6f62":"print(\"Acc of XGBClassifier  \" , accuracy_score(xgb_pred , y_test))","634e33e6":"xgb_param = {'n_estimators':list(range(100,500)) , \n         'max_depth':list(range(1,10)) , \n         'learning_rate':[0.001,0.002,0.003,0.004,0.005,0.006,0.007,0.008,0.05,0.09] ,\n         'min_child_weight ':list(range(1,10))    \n}\n\nrscv = RandomizedSearchCV(xgb ,param_distributions=xgb_param ,  cv =5 , n_iter=10 , scoring = 'accuracy',n_jobs =-1 , verbose =10)\nrscv.fit(x,y)","cbaa6fa9":"print(rscv.best_score_)\nprint(rscv.best_estimator_)\nprint(rscv.best_index_)\nprint(rscv.best_params_)","df6c7648":"# Fit and predict\nxgb = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.09, max_delta_step=0, max_depth=4,\n               min_child_weight =8,\n              monotone_constraints='()', n_estimators=184, n_jobs=0,\n              num_parallel_tree=1, random_state=0, reg_alpha=0, reg_lambda=1,\n              scale_pos_weight=1, subsample=1, tree_method='exact',\n              validate_parameters=1, verbosity=None)\n\nprint(xgb.fit(x_train , y_train))\nprint(\"Accuracy score of XGB after tuning is :\", accuracy_score(xgb.predict(x_test) , y_test))","6cadd558":"df_test","fed596f4":"predict_test = xgb.predict(df_test)","8302950c":"predict_test","fb16c82a":"df_sub","78641e84":"df_sub['Survived']=predict_test","16886e4a":"df_sub.to_csv(\"Main_Submission.csv\" , index = False)\n","60e58b8d":"* Analysis 'Ticket' feature","ea7e685e":"## Model XGBoostClassifier","7e3263b6":"*Read training dataset and print head of it*","f9f3fb1a":"## Operation on Train Data","f4272934":"### Analysis on Cabin feature of train and test data","1b08c346":"## Import required libraries","60a8c9a2":"#### there is lots of outlier are present in Age feature","2e8c736b":"* Analysis Name feature","5c3d3b92":"### Analysis on Fare feature of train and test dataset","df3e30f2":"# Feature Engineering","6792bded":"## There is no null values in any Feature","ded96e8c":"### apply hydermeter","91c5f79d":"* Analysis 'Sex' feature","a807496f":"\n### Work on Test data ","f45a706a":"# Splitting , Cross Validation and Model Building","ea9aadda":"#### In both dataset we having more null values so we drop this feature","63c982ef":"## Now, we will work on missing data","745a9bf7":"# If you liked this Notebook , please upvote and comment\n## Thank you ","749123a6":"### Work on train  data","43897095":"* Analysis 'Embarked' feature\n","ffbce47d":"## Check any Null value is remain or not","8b598cd4":"### Analysis on Embarked feature of train and test dataset","f50a2fce":"* Drop ID","20acb614":"### Analysis on Age feature of train and test data"}}