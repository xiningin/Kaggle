{"cell_type":{"8590cf23":"code","d8f41025":"code","88f0a2b7":"code","607195c4":"code","f253c7fd":"code","f45c412e":"code","6b1ec447":"code","6abc9427":"code","02a82d83":"code","f00f50e2":"code","c37c58c7":"code","7b857fb6":"code","016914a3":"code","7ab02b15":"code","13c4bd9d":"code","c35b7f34":"code","1e909c96":"code","62f61bf3":"code","c742a0c6":"code","b26147ce":"code","ed36ae4e":"code","e6bcfbf1":"code","593a3c9b":"code","c2c798f5":"code","dc77dabf":"code","2c91d9c9":"code","8d5f2bec":"code","da90417a":"code","5d8ad0dc":"code","24e79922":"code","1456bee3":"code","4db68510":"code","af5d350c":"code","46a2a002":"markdown","4124ce33":"markdown","e344fbf2":"markdown","836ade02":"markdown","5105574d":"markdown","9bd014c2":"markdown","209f02e9":"markdown"},"source":{"8590cf23":"#import libraries\nimport numpy as np                                                      #for fast operations on arrays    \nimport pandas as pd                                                     #for read & manipulate dataset\nimport matplotlib.pyplot as plt                                         #for Data visualization\nimport seaborn as sns                                                   #for Data visualization\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","d8f41025":"#load dataset\ndataset_deliveries = pd.read_csv('..\/input\/ipl\/deliveries.csv')\ndataset_matches = pd.read_csv('..\/input\/ipl\/matches.csv')\ndf_deliveries = dataset_deliveries.copy()\ndf_matches= dataset_matches.copy()","88f0a2b7":"df_matches.head()","607195c4":"df_matches.info()","f253c7fd":"df_matches.describe()","f45c412e":"print(\"Nimber of rows : {}\".format(df_matches.shape[0]))","6b1ec447":"#Check Missing Values\ndef check_missing(data):\n    total = data.isnull().sum().sort_values(ascending=False)\n    percent = (data.isnull().sum()\/data.isnull().count()).sort_values(ascending=False)\n    missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    return missing_data.head(20)\n\ncheck_missing(df_matches)","6abc9427":"df_matches['season'].value_counts().plot(kind='barh',figsize=[10,10])\nplt.title('Number of matches per season')","02a82d83":"df_matches['city'].value_counts().plot(kind='pie',figsize=[20,15],autopct='%1.1f%%')\nplt.title('Number of matches per city')","f00f50e2":"df_matches.toss_winner.value_counts().plot(kind='barh',figsize=[20,15])\nplt.title('the most team win toss')","c37c58c7":"df_matches.toss_decision.value_counts().plot(kind='pie',figsize=[10,10],autopct='%1.1f%%')\nplt.title('favorite toss')","7b857fb6":"df_matches.result.value_counts().plot(kind='pie',figsize=[10,10],autopct='%1.1f%%')\nplt.title('Toss Results')","016914a3":"df_matches.winner.value_counts().plot(kind='barh',figsize=[20,15])\nplt.title('the most team win')","7ab02b15":"df_matches.venue.value_counts().plot(kind='barh',figsize=[20,15])\nplt.title('popular staduim')","13c4bd9d":"df_matches.player_of_match.value_counts()[0:10].plot(kind='barh',figsize=[10,10])\nplt.title('Top 10 best player')","c35b7f34":"plt.subplots(figsize = (30,10))\ndf_matches['run'] = df_matches['win_by_runs'].apply(lambda x: '0' if x <= 0 else '1')\nax = sns.countplot(x=\"winner\", hue ='run', data = df_matches,palette = \"Accent\")\nlegend_labels, _= ax.get_legend_handles_labels()\nplt.title('win by runs Vs. win by wickets', fontsize = 30)\nax.legend(legend_labels, ['Win by Run','Win by wickets'], bbox_to_anchor=(1,1))\nplt.show()","1e909c96":"plt.subplots(figsize = (30,10))\nsns.countplot(x=\"winner\", hue ='toss_decision', data = df_matches,palette = \"Accent\")\nlegend_labels, _= ax.get_legend_handles_labels()\nplt.title('Winner Team Vs. Toss Decision', fontsize = 30)\nplt.show()","62f61bf3":"plt.subplots(figsize = (30,10))\nsns.countplot(x=\"season\", hue ='winner', data = df_matches,palette = \"Accent\")\nlegend_labels, _= ax.get_legend_handles_labels()\nplt.title('Winner Team  Vs. Season', fontsize = 30)\nplt.show()","c742a0c6":"snap_1 = df_matches[df_matches['winner']=='Mumbai Indians']\npd.crosstab(snap_1.season,snap_1.winner).plot(color=sns.color_palette('Paired',15))\nfig=plt.gcf()\nfig.set_size_inches(18,6)\nplt.title(\"Mumbai Indians Trend\")\nplt.show()","b26147ce":"snap_2 = df_matches[df_matches['winner']=='Chennai Super Kings']\npd.crosstab(snap_2.season,snap_2.winner).plot(color=sns.color_palette('Paired',15))\nfig=plt.gcf()\nfig.set_size_inches(18,6)\nplt.title(\"Chennai Super Kings Trend\")\nplt.show()","ed36ae4e":"df_deliveries.head()","e6bcfbf1":"df_deliveries.info()","593a3c9b":"df_deliveries.describe()","c2c798f5":"print(\"Nimber of rows : {}\".format(df_deliveries.shape[0]))","dc77dabf":"#Check Missing Values\ndef check_missing(data):\n    total = data.isnull().sum().sort_values(ascending=False)\n    percent = (data.isnull().sum()\/data.isnull().count()).sort_values(ascending=False)\n    missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    return missing_data.head(20)\n\ncheck_missing(df_deliveries)","2c91d9c9":"#check duplicate rows\ndef check_duplicate(data):\n    duplicate = data.duplicated()\n    unique_data  = pd.Series(data.shape[0] - duplicate.value_counts()[1])\n    duplicate_data = pd.Series(data.shape[0] - duplicate.value_counts()[0])\n    unique_data_percent = pd.Series((unique_data\/data.shape[0])*100)\n    duplicate_data_percent = pd.Series((duplicate_data\/data.shape[0])*100)\n    dub = pd.concat([unique_data, duplicate_data,unique_data_percent,duplicate_data_percent], axis=1, keys=['Unique Count', 'Duplicate Count','Unique percent','Duplicate Percent'])\n    return dub\n\ncheck_duplicate(df_deliveries)","8d5f2bec":"#Drop duplicates\ndf_deliveries.drop_duplicates(inplace=True)","da90417a":"df_deliveries.batting_team.value_counts().plot(kind='barh',figsize=[20,10])\nplt.title('Most batting team')","5d8ad0dc":"df_deliveries.bowling_team.value_counts().plot(kind='barh',figsize=[20,10])\nplt.title('Most bowling team')","24e79922":"batsmen = df_matches[['id','season']].merge(df_deliveries, left_on = 'id', right_on = 'match_id', how = 'left').drop('id', axis = 1)\n#merging the matches and delivery dataframe by referencing the id and match_id columns respectively\nseason=batsmen.groupby(['season'])['total_runs'].sum().reset_index()\nseason.set_index('season').plot(marker='o')\nplt.gcf().set_size_inches(10,6)\nplt.title('Total Runs Across the Seasons')\nplt.show()","1456bee3":"plt.subplots(figsize=(10,6))\nmax_runs=df_deliveries.groupby(['batsman'])['batsman_runs'].sum()\nmax_runs.sort_values(ascending=False)[:10].plot.barh(width=0.8,color=sns.color_palette('Accent',20))\nplt.title(\"Top Run Getters of IPL\")\nplt.show()","4db68510":"extra = df_deliveries[df_deliveries['extra_runs']!=0]['bowler'].value_counts()[:10]\nextra.plot(kind='bar', figsize=(11,6), title='Bowlers who have bowled maximum number of Extra balls')\n\nplt.xlabel('BOWLER')\nplt.ylabel('BALLS')\nplt.show()\n","af5d350c":"#We will consider players who have played 10 or more seasons\n#merging the 2 datasets\nmerge = pd.merge(df_deliveries,df_matches, left_on='match_id', right_on ='id')\n\n#total number of matches played by each batsman\nno_of_balls = pd.DataFrame(merge.groupby('batsman')['ball'].count()) \n\n#total runs of each batsman\nruns = pd.DataFrame(merge.groupby('batsman')['batsman_runs'].sum())\n\n#season = 1 implies played only 1 season\nseasons = pd.DataFrame(merge.groupby('batsman')['season'].nunique()) \n\nbatsman_strike_rate = pd.DataFrame({'balls':no_of_balls['ball'],'run':runs['batsman_runs'],'season':seasons['season']})\nbatsman_strike_rate.reset_index(inplace = True)\n\nbatsman_strike_rate['strike_rate'] = batsman_strike_rate['run']\/batsman_strike_rate['balls']*100\nhighest_strike_rate = batsman_strike_rate[batsman_strike_rate.season.isin([10,11])][['season','batsman','strike_rate']].sort_values(by = 'strike_rate',ascending = False)\n\nplt.figure(figsize = (20,8))\nsns.barplot(x='batsman', y='strike_rate', data = highest_strike_rate.head(10), hue = 'season')\nplt.title(\"Highest strike rates in IPL\",fontsize= 30, fontweight = 'bold')\nplt.xlabel(\"Player\", size = 25)\nplt.ylabel(\"Strike Rate\", size = 25)\nplt.xticks(size = 14)\nplt.yticks(size = 14)","46a2a002":"Content\n\nAll Indian Premier League Cricket matches between 2008 and 2016.\n\nThis is the ball by ball data of all the IPL cricket matches till season 9.\n\nThe dataset contains 2 files: deliveries.csv and matches.csv.\n\nmatches.csv contains details related to the match such as location, contesting teams, umpires, results, etc.\n\ndeliveries.csv is the ball-by-ball data of all the IPL matches including data of the batting team, batsman, bowler, non-striker, runs scored, etc.","4124ce33":"## EDA Matches","e344fbf2":"## EDA Deliveries","836ade02":"**2011, 2012, 2013 seasons have more matchs than other**","5105574d":"**Mumbai** is the city with the most matches","9bd014c2":"###  Exploratory Data Analysis on dataset Indian Premier League\n\n**As a sports analysts, find out the most successful teams, players and factors contributing win or loss of a team.**\n\n**Suggest teams or players a company should endorse for its products.**","209f02e9":" - inning : Tells if the first set of batting was going on or second. 1: First Innings 2: Second Innings\n \n - batting_team : The team name which is currently batting.\n \n - bowling_team : The team name which is currently bowling.\n \n - over : Describe the current over number.\n \n - ball : Describe the current bowl no of the current over.\n \n - batsman : Name of the batsman on striking end.\n \n - non_striker : Name of the batsman on non-striking end.\n \n"}}