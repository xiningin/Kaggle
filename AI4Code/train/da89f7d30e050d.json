{"cell_type":{"72628a75":"code","2671794a":"code","403304c4":"code","f8a7e10a":"code","7bd86754":"code","0739cdf7":"code","c5be69de":"code","55319ffa":"code","408df1a0":"code","760e33ff":"code","23e9322e":"code","f4309152":"code","4581e285":"code","3ff3998e":"code","98ff51bb":"code","bc781b86":"code","a3077efc":"code","eb5f4408":"markdown","efd4ae4a":"markdown","9afd0640":"markdown","4de597b7":"markdown","5f793581":"markdown","c2862c4d":"markdown","69619ae2":"markdown","08616aec":"markdown","09efc365":"markdown","50cf47db":"markdown","5bf1348e":"markdown","92c80cfa":"markdown","f4400a1c":"markdown","5d7a9a22":"markdown","03208056":"markdown","42471f30":"markdown","5a80e04f":"markdown","00e09d54":"markdown","0f9e2161":"markdown"},"source":{"72628a75":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nprint(os.listdir('\/kaggle\/input\/ashrae-ensembling-1'))\n\n# Any results you write to the current directory are saved as output.","2671794a":"import os\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom scipy.stats.mstats import gmean\nimport seaborn as sns\n%matplotlib inline\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","403304c4":"sub_path = \"..\/input\/ashrae-ensembling-1\"\nall_files = os.listdir(sub_path)\nall_files","f8a7e10a":"import warnings\nwarnings.filterwarnings(\"ignore\")\nouts = [pd.read_csv(os.path.join(sub_path, f), index_col=0) for f in all_files]\nconcat_sub = pd.concat(outs, axis=1)\ncols = list(map(lambda x: \"mol\" + str(x), range(len(concat_sub.columns))))\nconcat_sub.columns = cols\nconcat_sub.reset_index(inplace=True)\nconcat_sub.head()\nncol = concat_sub.shape[1]","7bd86754":"concat_sub.iloc[:,1:].corr()","0739cdf7":"corr = concat_sub.iloc[:,1:].corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap='prism', vmin=0.96, center=0, square=True, linewidths=1, annot=True, fmt='.4f')","c5be69de":"concat_sub['m_max'] = concat_sub.iloc[:, 1:].max(axis=1)\nconcat_sub['m_min'] = concat_sub.iloc[:, 1:].min(axis=1)\nconcat_sub['m_median'] = concat_sub.iloc[:, 1:].median(axis=1)","55319ffa":"concat_sub.describe()","408df1a0":"cutoff_lo = 0.8\ncutoff_hi = 0.2","760e33ff":"rank = np.tril(concat_sub.iloc[:,1:ncol].corr().values,-1)\nm_gmean = 0\nn = 8\nwhile rank.max()>0:\n    mx = np.unravel_index(rank.argmax(), rank.shape)\n    m_gmean += n*(np.log(concat_sub.iloc[:, mx[0]+1]) + np.log(concat_sub.iloc[:, mx[1]+1]))\/2\n    rank[mx] = 0\n    n += 1","23e9322e":"concat_sub['m_mean'] = np.exp(m_gmean\/(n-1)**2)","f4309152":"concat_sub['meter_reading'] = concat_sub['m_mean']\nconcat_sub[['row_id', 'meter_reading']].to_csv('stack_mean.csv', \n                                        index=False, float_format='%.6f')","4581e285":"concat_sub['meter_reading'] = concat_sub['m_median']\nconcat_sub[['row_id', 'meter_reading']].to_csv('stack_median.csv', \n                                        index=False, float_format='%.6f')","3ff3998e":"concat_sub['meter_reading'] = np.where(np.all(concat_sub.iloc[:,1:7] > cutoff_lo, axis=1), 1, \n                                    np.where(np.all(concat_sub.iloc[:,1:7] < cutoff_hi, axis=1),\n                                             0, concat_sub['m_median']))\nconcat_sub[['row_id', 'meter_reading']].to_csv('stack_pushout_median.csv', \n                                        index=False, float_format='%.6f')","98ff51bb":"concat_sub['meter_reading'] = np.where(np.all(concat_sub.iloc[:,1:7] > cutoff_lo, axis=1), \n                                    concat_sub['m_max'], \n                                    np.where(np.all(concat_sub.iloc[:,1:7] < cutoff_hi, axis=1),\n                                             concat_sub['m_min'], \n                                             concat_sub['m_mean']))\nconcat_sub[['row_id', 'meter_reading']].to_csv('stack_minmax_mean.csv', \n                                        index=False, float_format='%.6f')","bc781b86":"concat_sub['meter_reading'] = np.where(np.all(concat_sub.iloc[:,1:7] > cutoff_lo, axis=1), \n                                    concat_sub['m_max'], \n                                    np.where(np.all(concat_sub.iloc[:,1:7] < cutoff_hi, axis=1),\n                                             concat_sub['m_min'], \n                                             concat_sub['m_median']))\nconcat_sub[['row_id', 'meter_reading']].to_csv('stack_minmax_median.csv', \n                                        index=False, float_format='%.6f')","a3077efc":"concat_sub['meter_reading'] = concat_sub['mol0'].rank(method ='min') + concat_sub['mol1'].rank(method ='min') + concat_sub['mol2'].rank(method ='min') \nconcat_sub['meter_reading'] = (concat_sub['meter_reading']-concat_sub['meter_reading'].min())\/(concat_sub['meter_reading'].max() - concat_sub['meter_reading'].min())\nconcat_sub.describe()\nconcat_sub[['row_id', 'meter_reading']].to_csv('stack_rank.csv', index=False, float_format='%.8f')","eb5f4408":"### step2","efd4ae4a":"### step7","9afd0640":"### step5","4de597b7":"### *Kaggle Ensembling Guide*\n\nModel ensembling is a very powerful technique to increase accuracy on a variety of ML tasks. The ensembling approaches for Kaggle Competitions are shared: https:\/\/mlwave.com\/kaggle-ensembling-guide\/","5f793581":"### step4: check correlation","c2862c4d":"### step9","69619ae2":"### step6: get the data fields ready for stacking","08616aec":"### step14: MinMax + Mean Stacking","09efc365":"### step3","50cf47db":"### step15: MinMax + Median Stacking","5bf1348e":"### step13: Pushout + Median Stacking","92c80cfa":"### step1: Stat Stack","f4400a1c":"# Stacking Method","5d7a9a22":"### step10","03208056":"### step16: Averaging Ranks","42471f30":"### step11: Mean Stacking","5a80e04f":"### step8","00e09d54":"### step12: Median Stacking","0f9e2161":"### *ashrae-ensembling-1*\n\nsubmittion_01: https:\/\/www.kaggle.com\/nz0722\/aligned-timestamp-lgbm-by-meter-type\n\nsubmittion_02: https:\/\/www.kaggle.com\/rohanrao\/ashrae-half-and-half\n\nsubmittion_03: https:\/\/www.kaggle.com\/isaienkov\/keras-nn-with-embeddings-for-cat-features-1-15\n\nsubmittion_04: https:\/\/www.kaggle.com\/kimtaegwan\/what-s-your-cv-method\n"}}