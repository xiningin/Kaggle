{"cell_type":{"80dc03dc":"code","6fcdb6ea":"code","214d957e":"code","8472c71f":"markdown"},"source":{"80dc03dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6fcdb6ea":"\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split    \nfrom sklearn.metrics import mean_absolute_error\n\n# Read SCV files\ntrain_csv = \"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\"\ntest_csv = \"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\"\ntrain_data = pd.read_csv(train_csv)\ntest_data = pd.read_csv(test_csv)\n\n# Select fratures and X, y\nfeatures = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\ntrain_X = train_data[features]\ntrain_y = train_data.SalePrice\ntest_X = test_data[features]\ntest_index = test_data.Id\n\ndef get_predictions(train_X, test_X, train_y):\n\n    # RFR model\n    model = RandomForestRegressor(random_state=1)\n    model.fit(train_X, train_y)\n\n    # Predict\n    predictions = model.predict(test_X)\n\n    return predictions\n\n# Get Predictions\npredictions = get_predictions(train_X, test_X, train_y)\n\n# Mearge mats\nresult = np.vstack([test_index, predictions])\n\n# Debug...\nprint(len(predictions))\nprint(type(predictions))\nprint(result.T)","214d957e":"# import the modules we'll need\nfrom IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64\n\n# function that takes in a dataframe and creates a text link to  \n# download it (will only work for files < 2MB or so)\ndef create_download_link(df, title = \"Download CSV file\", filename = \"data.csv\"):  \n    csv = df.to_csv()\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\n\n# create a random sample dataframe\ndf = pd.DataFrame(result.T)\n\n# create a link to download the dataframe\ncreate_download_link(df)","8472c71f":"`SalePrice`\uc744 \uad6c\ud558\ub294\uac8c \ubaa9\ud45c\n\nTrain data = 1460 rows x 81\n\nTest data = 1459 rows x 80"}}