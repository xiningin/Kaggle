{"cell_type":{"2878fbce":"code","bf3920e5":"code","2882c598":"code","8fe744ef":"code","e6f6725a":"code","5f8dd6c0":"code","159e414e":"code","ad5b0c9e":"code","ed18ab11":"code","0e867554":"code","1b43a585":"code","2d857d50":"code","2c9b3003":"code","95e01788":"code","f024d1df":"code","c56769f2":"code","55b2b701":"code","dd81a742":"code","9ff33ef5":"code","a66715dc":"code","49d787b2":"markdown","a57931c7":"markdown"},"source":{"2878fbce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestClassifier # Das Modell\nfrom sklearn.model_selection import train_test_split #Einfach Daten in Test und Presiction splitten\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bf3920e5":"data = pd.read_csv(\"\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv\")\ndata.info()","2882c598":"data.isnull().sum()","8fe744ef":"data.info()","e6f6725a":"print(\"Room types - \", len(data['room_type'].value_counts()))\nprint(\"Neighbourhood groups - \", len(data['neighbourhood_group'].value_counts()))\nprint(\"Neighbourhoods - \", len(data['neighbourhood'].value_counts()))","5f8dd6c0":"data['room_type'] = data['room_type'].astype('category').cat.codes\ndata['neighbourhood_group'] = data['neighbourhood_group'].astype('category').cat.codes","159e414e":"data.head()","ad5b0c9e":"data.drop(['id', 'name', 'host_id', 'host_name', 'neighbourhood'], axis=1, inplace=True)","ed18ab11":"data.drop(['last_review', 'reviews_per_month'], axis=1, inplace=True)","0e867554":"data.isnull().sum()","1b43a585":"data.describe()","2d857d50":"hist_price=data[\"price\"].hist()","2c9b3003":"data = data[data.price < 250]","95e01788":"hist_price=data[\"price\"].hist()","f024d1df":"plt.figure(figsize=(15,12))\npalette = sns.diverging_palette(20, 220, n=256)\ncorr=data.corr(method='pearson')\nsns.heatmap(corr, annot=True, fmt=\".2f\", cmap=palette, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5}).set(ylim=(11, 0))\nplt.title(\"Correlation Matrix\",size=15, weight='bold')","c56769f2":"from sklearn.model_selection import train_test_split\nfeatures = [\"neighbourhood_group\", \"latitude\", \"longitude\",\"room_type\", \"minimum_nights\", \"number_of_reviews\", \"availability_365\"]\nX = data[features]\ny = data[\"price\"]\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0, test_size=0.3)","55b2b701":"for max_leaf_nodes in [5, 6, 7, 8, 9, 10, 11, 12 ,13 ,14, 15 , 16, 17, 18, 19]:\n    from sklearn.tree import DecisionTreeRegressor\n\n    model = DecisionTreeRegressor(random_state=1, max_depth = max_leaf_nodes)\n    model.fit(train_X, train_y)\n    predictions = model.predict(val_X)\n\n    from sklearn.metrics import mean_absolute_error\n\n    print(mean_absolute_error(val_y, predictions))","dd81a742":"from sklearn.tree import DecisionTreeRegressor\n\nmodel = DecisionTreeRegressor(random_state=1, max_depth = 8)\nmodel.fit(train_X, train_y)\npredictions = model.predict(val_X)\n\nfrom sklearn.metrics import mean_absolute_error\n\nprint(mean_absolute_error(val_y, predictions))","9ff33ef5":"from subprocess import check_call\nfrom PIL import Image, ImageDraw, ImageFont\nfrom IPython.display import Image as PImage\nfrom sklearn.tree import export_graphviz\nwith open(\"tree1.dot\", 'w') as f:\n     f = export_graphviz(model,\n                              out_file=f,\n                              max_depth = 3,\n                              impurity = True,\n                              feature_names = [\"neighbourhood_group\", \"latitude\", \"longitude\", \"room_type\", \"minimum_nights\", \"number_of_reviews\", \"availability_365\"],\n                              rounded = True,\n                              filled= True )\ncheck_call(['dot','-Tpng','tree1.dot','-o','tree1.png'])\nimg = Image.open(\"tree1.png\")\ndraw = ImageDraw.Draw(img)\nimg.save('sample-out.png')\nPImage(\"sample-out.png\")","a66715dc":"Ergebnisse = pd.DataFrame({'Actual': np.array(val_y), 'Predicted': np.array(predictions)})\n\nErgebnisse.head(15)","49d787b2":"id, host_id, neighbourhood_group, neighbourhood, latitude, longitude, roomtype, price, minimum_nights, number_of_reviews, calculated_host_listings_count, availability_365 haben keine Nullwerte\n\nname, host_name, last_review, reviews_per_month haben Nullwerte","a57931c7":"last_review und reviews_per_month haben mehr als 20% Null Werte -> Kann gedroppet werden"}}