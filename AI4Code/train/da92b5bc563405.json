{"cell_type":{"399f9ce8":"code","60dde3d6":"code","a0ea2826":"code","03eea6b9":"code","fecae625":"code","fa46206f":"code","04698166":"code","2967384c":"code","0dbf9672":"code","2199343e":"code","c663a555":"code","3eda4e51":"code","5b267d9f":"code","3a96b473":"code","3c15fd2d":"code","7addbc65":"code","f39dc797":"code","73db3b87":"code","e8ba7d21":"code","eafa5542":"code","9ac9596a":"code","b66ec9aa":"code","6b99ceb9":"code","1cf29946":"code","9dcaa9a5":"code","4ced326c":"code","e2990410":"markdown","e8d95ba6":"markdown","91ce6923":"markdown","406e78eb":"markdown","084991c0":"markdown","f0c9e435":"markdown","36c964ab":"markdown","94e8e939":"markdown"},"source":{"399f9ce8":"import pandas as pd\nimport numpy as np # linear algebra\nimport tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing import image\nfrom keras.layers.normalization import BatchNormalization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')","60dde3d6":"def unpickle(file):\n    import pickle\n    with open(file, 'rb') as fo:\n        dict = pickle.load(fo, encoding='bytes')\n    return dict","a0ea2826":"batch_1=unpickle('..\/input\/cifar10\/data_batch_1')\nbatch_2=unpickle('..\/input\/cifar10\/data_batch_2')\nbatch_3=unpickle('..\/input\/cifar10\/data_batch_3')\nbatch_4=unpickle('..\/input\/cifar10\/data_batch_4')\nbatch_5=unpickle('..\/input\/cifar10\/data_batch_5')\ntest_batch=unpickle('..\/input\/cifar10\/test_batch')","03eea6b9":"batch1_data=batch_1[b'data'].reshape(10000,3,32,32).transpose(0,2,3,1)\nbatch2_data=batch_2[b'data'].reshape(10000,3,32,32).transpose(0,2,3,1)\nbatch3_data=batch_3[b'data'].reshape(10000,3,32,32).transpose(0,2,3,1)\nbatch4_data=batch_4[b'data'].reshape(10000,3,32,32).transpose(0,2,3,1)\nbatch5_data=batch_5[b'data'].reshape(10000,3,32,32).transpose(0,2,3,1)\ntest_data=test_batch[b'data'].reshape(10000,3,32,32).transpose(0,2,3,1)\n\nbatch1_labels=batch_1[b'labels']\nbatch2_labels=batch_2[b'labels']\nbatch3_labels=batch_3[b'labels']\nbatch4_labels=batch_4[b'labels']\nbatch5_labels=batch_5[b'labels']\ntest_labels=test_batch[b'labels']\n\ntrain_images=np.concatenate((batch1_data,batch2_data,batch3_data,batch4_data,batch5_data),axis=0)\ntrain_labels_data=np.concatenate((batch1_labels,batch2_labels,batch3_labels,batch4_labels,batch5_labels),axis=0)","fecae625":"train_images.shape","fa46206f":"plt.imshow(train_images[5],cmap='binary')\ntrain_labels_data[5]","04698166":"sns.countplot(train_labels_data)","2967384c":"#labels = ['Airplane', 'Automobile', 'Bird', 'Cat', 'Deer', 'Dog', 'Frog', 'Horse', 'Ship', 'Truck']","0dbf9672":"plt.imshow(train_images[1],cmap='binary')\ntrain_labels_data[1]","2199343e":"def label(num):\n  if num==0:\n    return 'Airplane'\n  elif num==1:\n    return 'Automobile'\n  elif num==2:\n    return 'Bird'\n  elif num==3:\n    return 'Cat'\n  elif num==4:\n    return 'Deer'\n  elif num==5:\n    return 'Dog'\n  elif num==6:\n    return 'Frog'\n  elif num==7:\n    return 'Horse'\n  elif num==8:\n    return 'Ship'\n  elif num==9:\n    return 'Truck'","c663a555":"plt.subplot(1,2,1)\nplt.imshow(train_images[50],cmap='binary')\nprint(f'The image is of {label(train_labels_data[50])}')\nplt.subplot(1,2,2)\nplt.imshow(test_data[50],cmap='binary')\nprint(f'The image is of {label(test_labels[50])}')","3eda4e51":"train_labels_data","5b267d9f":"from keras.utils import to_categorical\ntrain_label=to_categorical(train_labels_data)","3a96b473":"Test_labels=to_categorical(test_labels)","3c15fd2d":"datagen=ImageDataGenerator( featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)","7addbc65":"train_data=datagen.flow(train_images, train_label, batch_size=32)\nvalidation_data=datagen.flow(test_data, Test_labels, batch_size=32)","f39dc797":"cnn=tf.keras.models.Sequential()","73db3b87":"cnn.add(tf.keras.layers.Conv2D(input_shape=[32,32,3],filters=32,kernel_size=(3,3),activation='relu'))\ncnn.add(tf.keras.layers.MaxPooling2D(strides=2,pool_size=(2,2)))\ncnn.add(BatchNormalization())","e8ba7d21":"cnn.add(tf.keras.layers.Conv2D(input_shape=[32,32,3],filters=32,kernel_size=(3,3),activation='relu'))\ncnn.add(tf.keras.layers.MaxPooling2D(strides=2,pool_size=(2,2)))\ncnn.add(BatchNormalization())","eafa5542":"cnn.add(tf.keras.layers.Conv2D(input_shape=[32,32,3],filters=32,kernel_size=(3,3),activation='relu'))\ncnn.add(tf.keras.layers.MaxPooling2D(strides=2,pool_size=(2,2)))\ncnn.add(BatchNormalization())","9ac9596a":"cnn.add(tf.keras.layers.Flatten())","b66ec9aa":"cnn.add(tf.keras.layers.Dense(784,activation='relu'))\ncnn.add(tf.keras.layers.Dense(784,activation='relu'))\ncnn.add(tf.keras.layers.Dense(10,activation='softmax'))\ncnn.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","6b99ceb9":"cnn.fit(train_data,epochs=20)","1cf29946":"prediction=cnn.predict_classes(test_data)\ntarget_label=np.argmax(Test_labels,1)\nfrom sklearn.metrics import confusion_matrix\nsns.heatmap(confusion_matrix(prediction,target_label),annot=True)","9dcaa9a5":"from sklearn.metrics import classification_report\nprint(classification_report(prediction,target_label))","4ced326c":"img=image.load_img('..\/input\/cifar10\/plane.jpg',target_size=(32,32))\nraw_image=image.img_to_array(img)\ntest_image=np.expand_dims(raw_image,axis=0)\nprint(f'The Prediction of image is {label(cnn.predict_classes(test_image))}')\nti=plt.imread('..\/input\/cifar10\/plane.jpg')\nplt.imshow(ti)","e2990410":"# Convolutional Neural Network","e8d95ba6":"# Predicting the data","91ce6923":"# TEST","406e78eb":"# One Hot Encoding","084991c0":"# **Unpickling the dataset**","f0c9e435":"# **Importing Libraries**","36c964ab":"# Preprocessing the data","94e8e939":"# Visualizing the data"}}