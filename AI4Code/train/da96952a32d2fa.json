{"cell_type":{"8a4a3750":"code","b1fc214a":"code","df02c4a8":"code","df217f8e":"code","33077312":"code","c701f3b5":"code","46fb2cd3":"code","b08e836b":"code","3d3a1e6c":"code","af1d0153":"code","2ea87265":"code","89c58381":"code","21360ef2":"code","22f4d50a":"code","370cd681":"code","f6ea64f6":"code","88b40010":"code","da0b9e88":"code","5c28af79":"code","73c60931":"code","a26ccc26":"code","a3cfb9a3":"code","c3dac241":"code","bd021906":"code","f478e665":"code","d82ab4a6":"code","aa5dc4c4":"code","3b381320":"code","1f3bd6f6":"code","bbff7de3":"code","16addb58":"code","12ca304d":"code","75ab4be1":"code","88519e08":"code","49214784":"code","31ed599f":"code","ca9957ff":"code","eea2c94d":"code","56b0ed15":"code","e87542a3":"code","b23d71da":"code","6da746ab":"code","c1a85e5c":"code","53a8acc3":"code","e3b53732":"code","9b66f8b6":"code","181081aa":"markdown","43e1bf69":"markdown","955253e0":"markdown","2b246f8e":"markdown","4e321043":"markdown","b8209715":"markdown","ff9fcab5":"markdown","cb748070":"markdown","79dc4d87":"markdown","7d568d76":"markdown","099e3e45":"markdown","8482e233":"markdown","96828d17":"markdown","8e7a786b":"markdown","bef2649f":"markdown","9833ef29":"markdown","6570076c":"markdown","eb6e956a":"markdown","c69664d8":"markdown","62b2ed5c":"markdown","01b8e1e4":"markdown","0c29d6cc":"markdown","ae57b53f":"markdown","e26a17c2":"markdown","420c4077":"markdown","b10aaba0":"markdown","82a68008":"markdown","5b4890ec":"markdown","12940a56":"markdown","7d8b3662":"markdown","e92fe869":"markdown","5522a8a3":"markdown","40deb70c":"markdown","3b8fea25":"markdown","4d546dbb":"markdown","cfd0d70c":"markdown","2cb5d6b9":"markdown","3c78fb81":"markdown","62a95a4e":"markdown","2b951ad4":"markdown","a9fb0a3c":"markdown","0c2e1810":"markdown","bff9fc84":"markdown","3e0ae4d4":"markdown","5fad8578":"markdown","142f0061":"markdown","eb727bcd":"markdown","da60e909":"markdown","e75d56af":"markdown","466d87e8":"markdown","2f961bd6":"markdown","acc165d8":"markdown","25fe4030":"markdown","d057ddab":"markdown","d61007c8":"markdown"},"source":{"8a4a3750":"import numpy as np\nimport pandas as pd","b1fc214a":"print(f'A vers\u00e3o do numpy \u00e9 : {np.__version__}')\nprint(f'A vers\u00e3o do pandas \u00e9 : {pd.__version__}')","df02c4a8":"df = pd.read_csv('..\/input\/census\/census.csv')\ndf.head()","df217f8e":"colunas = ['STNAME', 'CTYNAME', 'BIRTHS2010', 'BIRTHS2011', 'BIRTHS2012', 'BIRTHS2013', 'BIRTHS2014',\n          'BIRTHS2015', 'POPESTIMATE2010', 'POPESTIMATE2011', 'POPESTIMATE2012', 'POPESTIMATE2013', \n          'POPESTIMATE2014', 'POPESTIMATE2015']\ndf = df[df['SUMLEV'] == 50]\ndf = df[colunas]\ndf.head()","33077312":"df.shape","c701f3b5":"df['STNAME'].unique()","46fb2cd3":"# Utilizamos a fun\u00e7\u00e3o groupby passando o nome da coluna que queremos usar para agrupar\ng = df.groupby('STNAME')","b08e836b":"# Se tentarmos mostrar a vari\u00e1vel g, vemos que ela \u00e9 um objeto do tipo pandas.core.groupby.generic.DataFrameGroupBy\n# Mas ainda n\u00e3o conseguimos entender o que realmente aconteceu com o nosso DataFrame\ng","3d3a1e6c":"g.describe().head(10)","af1d0153":"g.describe()['POPESTIMATE2015'].head(10)","2ea87265":"type(g.describe())","89c58381":"g.mean().head()","21360ef2":"g.max().head()\n# Observe que quando uma fun\u00e7\u00e3o n\u00e3o pode ser aplicada a uma coluna, essa coluna n\u00e3o aparece no resultado final.\n# Nesse caso, 'max' pode ser aplicada a CTYNAME utilizando a ordem lexogr\u00e1fica.","22f4d50a":"g.count().head()","370cd681":"g.get_group('California').head(10)","f6ea64f6":"df[df['STNAME'] == 'California'].head(10)","88b40010":"# Para iterar \u00e9 como se fosse um dicion\u00e1rio com a chave do grupo e o DataFrame\nfor chave, grupo in g:\n    print(f'O nome do grupo \u00e9 {chave} e o shape \u00e9 {grupo.shape}.')","da0b9e88":"g['BIRTHS2013'].max().head()","5c28af79":"g[['BIRTHS2010','BIRTHS2011','BIRTHS2012','POPESTIMATE2014','POPESTIMATE2015']].mean().head()","73c60931":"# Vamos criar um dataframe menor para ajudar na visualiza\u00e7\u00e3o:\ndf1 = pd.DataFrame({'col1' : [1, 1, 2, 2, 2, 3],\n                  'col2' : ['no', 'yes', 'no', 'no', 'yes', 'no'],\n                  'col_val1' : np.random.rand(6),\n                  'col_val2' : np.random.randn(6)*10})\ndf1","a26ccc26":"df1.groupby(['col1', 'col2']).mean()","a3cfb9a3":"colunas = pd.MultiIndex.from_arrays([['US']*3 +['BR']*2,\n                                     [1, 3, 5, 1, 3]],\n                                    names=['pais', 'num'])\nhier_df = pd.DataFrame(np.random.randn(4, 5), columns=colunas)\nhier_df","c3dac241":"# groupby aceita os keyword arguments level e axis\nhier_df.groupby(level='pais', axis='columns').max()","bd021906":"df2 = pd.DataFrame({'nome' : ['Jo\u00e3o', 'Cl\u00e1udia', 'Mariana', 'Mario', 'Joana', 'Lucas', 'Marcos'],\n                   'nota1' : np.random.randint(0, 11, size=7),\n                   'nota2' : np.random.randint(0, 11, size=7)})\ndf2 = df2.set_index('nome') # \u00c9 importante que o \u00edndice seja os nomes, pois a fun\u00e7\u00e3o vai receber esses nomes\ndf2","f478e665":"# Vamos criar uma fun\u00e7\u00e3o que recebe uma string e retorna suas primeiras duas letras\ndef duas_letras(s):\n    # Sempre que tiver d\u00favida quanto a o que a fun\u00e7\u00e3o est\u00e1 recebendo, experimente printar o valor ou seu tipo\n    #print(s)\n    #print(type(s))\n    return s[:2]\n\n# Passamos nossa fun\u00e7\u00e3o para groupby \ndf2.groupby(duas_letras).max()","d82ab4a6":"df2.groupby(len).max()","aa5dc4c4":"df2.groupby(len).groups","3b381320":"# Vamos voltar ao nosso banco de dados do censo\ng.agg(np.mean).head()","1f3bd6f6":"g.mean().head()","bbff7de3":"g.agg([np.mean, np.sum]).head(10)","16addb58":"# O exemplo \u00e9 besta, mas em muitos casos n\u00f3s precisamos definir nossas pr\u00f3prias fun\u00e7\u00f5es para gerar agrega\u00e7\u00f5es \n# exatamente como desejamos\n\ndef meia_media(s):\n    return s.mean() \/ 2\ndef soma_mais_10(s):\n    return s.sum() + 10\n\ng.agg([meia_media, soma_mais_10]).head(10)","12ca304d":"df2","75ab4be1":"def verifica_tipo(s):\n    print(type(s))\n    print(s)\n    print('-' * 100, end='\\n\\n')\n    if s.shape[0] > 1:\n        return 1000\n    else:\n        return 0\n    \ndf2.groupby(duas_letras).agg(verifica_tipo)","88519e08":"def uma_funcao_com_um_nome_desnecessariamente_grande(s):\n    return s.mean() \/ 2\n\ng.agg([uma_funcao_com_um_nome_desnecessariamente_grande,\n       lambda x : x.sum(),\n       lambda x : x.max() - x.min()]).head(10)","49214784":"g.agg([('meia_soma', uma_funcao_com_um_nome_desnecessariamente_grande),\n       ('soma', lambda x : x.sum()),\n       ('amplitude', lambda x : x.max() - x.min())]).head(10)","31ed599f":"minhas_agg = {'BIRTHS2013' : np.sum,\n              'BIRTHS2014' : np.sum,\n              'BIRTHS2015' : np.sum,\n              'POPESTIMATE2013' : [np.mean, lambda x : x.max() - x.min()],\n              'POPESTIMATE2014' : [np.mean, lambda x : x.max() - x.min()],\n              'POPESTIMATE2015' : [np.mean, lambda x : x.max() - x.min()]}\ng.agg(minhas_agg).head(10)","ca9957ff":"df2","eea2c94d":"df2.groupby(duas_letras).get_group('Ma')","56b0ed15":"df2.groupby(duas_letras).transform(np.max)","e87542a3":"df2.groupby(duas_letras).groups","b23d71da":"precos = np.concatenate((((np.random.randn(6) * 5000) + 40000),\n                         ((np.random.randn(4) * 2000) + 30000),\n                         ((np.random.randn(3) * 300) + 2000), \n                         ((np.random.randn(7) * 10000) + 1000000))).astype(int)\nveiculos_dict = {\n    'id' : list(map(lambda x : 'id_' + str(x), range(20))),\n    'tipo' : ['Carro']*6 + ['Moto']*4 + ['Bicicleta']*3 + ['Avi\u00e3o']*7,\n    'pre\u00e7o' : precos \n}\n\nveiculos = pd.DataFrame(veiculos_dict)\nveiculos.loc[0, 'pre\u00e7o'] = np.nan\nveiculos.loc[6, 'pre\u00e7o'] = np.nan\nveiculos.loc[13, 'pre\u00e7o'] = np.nan\nveiculos","6da746ab":"veiculos.fillna(int(veiculos['pre\u00e7o'].mean()))","c1a85e5c":"def fill_by_group(x):\n    # Importante!!! \n    # x \u00e9 uma coluna!\n    # Como a coluna id n\u00e3o suporta a opera\u00e7\u00e3o 'mean', ela n\u00e3o ser\u00e1 retornada\n    return x.fillna(int(x.mean()))\n\n# Observe que apenas a coluna pre\u00e7o \u00e9 retornada, pois n\u00e3o existe m\u00e9dia dos ids e \n# a coluna tipo foi utilizada para agrupar \nveiculos.groupby('tipo').transform(fill_by_group)","53a8acc3":"veiculos.groupby('tipo').transform(lambda x : (x - x.mean()) \/ x.std())","e3b53732":"ids = np.random.choice(range(10000000, 20000000), size=120)\nnotas = np.random.randint(11, size=120)\ncursos = pd.DataFrame({\n    'ids' : ids,\n    'curso' : ['Programa\u00e7\u00e3o I']*30 + ['C\u00e1lculo']*30 + ['Probabilidade']*30 + ['Programa\u00e7\u00e3o II']*30,\n    'notas' : notas\n})\ncursos.sample(10)","9b66f8b6":"def media_maior(df):\n    # df \u00e9 um DataFrame!\n    #print(type(df))\n    media = df['notas'].mean()\n    nome = df['curso'].iloc[0]\n    print(f'A m\u00e9dia do curso {nome} \u00e9 {media}.')\n    return media > 5\n\ncursos.groupby('curso').filter(media_maior).sample(10)","181081aa":"# Formas de agrupar dados\n\nVamos agora entender como agrupar esses dados **por estado**. Suponha por exemplo, que queremos saber a m\u00e9dia da popula\u00e7\u00e3o em cada estado, ou ent\u00e3o a soma, ou mesmo os valores m\u00e1ximos e m\u00ednimos de cada cidade por estado.\n\nPara come\u00e7ar a fazer essas an\u00e1lises, precisamos, antes de mais nada, agrupar essas 3142 linhas de acordo com os estados.","43e1bf69":"Aqui vemos que a coluna *STNAME* possui todos os estados dos EUA, mas que v\u00e1rias linhas s\u00e3o referente ao Alabama, v\u00e1rias linhas s\u00e3o referentes \u00e0 Florida e assim por diante. A primeira forma que veremos de agrupar \u00e9 justamente colocar no mesmo grupo aquelas linhas que t\u00eam o mesmo valor para uma determinada coluna.","955253e0":"# Agrupando e manipulando dados com Pandas\n\n\u00c9 muito comum em Data Science n\u00f3s termos de responder perguntas como:\n- 'Qual a m\u00e9dia salarial **por sexo**?'\n- 'Qual a m\u00e9dia salarial **por regi\u00e3o do Brasil**?'\n- 'Qual a nota m\u00e1xima do ENEM **por ano**?'\n\n\nEntre muitas outras similares.\n\nVemos que todas essas perguntas possuem uma similaridade, que \u00e9 a parte do final: 'por sexo', 'por cor', 'por regi\u00e3o', 'por idade', 'por cargo', 'por ano'...\nEm geral, queremos avaliar uma m\u00e9trica de acordo com cada **categoria** ou **grupo**.\n\nPara responder esse tipo de pergunta, precisamos **agrupar** nossos dados de acordo com cada categoria.\n\nO *pandas* possui uma funcionalidade muito bacana para nos ajudar, que \u00e9 a fun\u00e7\u00e3o *groupby*.","2b246f8e":"### Filtragem\n\nPara nossa \u00faltima aplica\u00e7\u00e3o, vamos demostrar como podemos usar a fun\u00e7\u00e3o `filter` para manter apenas grupos nos quais estamos interassados. Suponha que temos um banco de dados de v\u00e1rios cursos com as notas de cada aluno daquele curso e que queremos manter apenas os cursos nos quais os alunos tiveram uma m\u00e9dia acima de 5.","4e321043":"Veja que, para cada coluna, temos v\u00e1rias informa\u00e7\u00f5es. Por exemplo, temos a m\u00e9dia, desvio padr\u00e3o, m\u00e1ximo, m\u00ednimo, mediana para a popula\u00e7\u00e3o de 2015:","b8209715":"O `describe` nos traz muitas informa\u00e7\u00f5es, mas podemos tamb\u00e9m aplicar outras fun\u00e7\u00f5es para ter apenas aquilo que desejamos (e de forma mais r\u00e1pida):","ff9fcab5":"# Transforma\u00e7\u00f5es\n\nVamos passar agora para o segundo t\u00f3pico das nossas aplica\u00e7\u00f5es.\n\nAo contr\u00e1rio de uma agrega\u00e7\u00e3o, a transforma\u00e7\u00e3o \u00e9 uma opera\u00e7\u00e3o que retorna uma tabela de mesmo tamanho (`shape`) que a tabela original.\n\nPor exemplo, suponha que eu tenho uma tabela e que eu quero dividir todos os valores por dois. Isso \u00e9 uma transforma\u00e7\u00e3o, pois a tabela resultante vai ter o mesmo n\u00famero de linha e colunas da original.","cb748070":"Veja como ficaria se preenchesemos com a m\u00e9dia de todos os ve\u00edculos:","79dc4d87":"Para terminar essa primeira parte, vale a pena dizer que podemos indexar colunas de um objeto `groupby`:","7d568d76":"Veja como n\u00f3s agrupamos as pessoas de acordo com as duas primeiras letras de seu nome.\n\nPoder\u00edamos usar tamb\u00e9m fun\u00e7\u00f5es do Python, como a fun\u00e7\u00e3o `len`:","099e3e45":"Note que isso \u00e9 exatamente o que j\u00e1 fizemos anteriormente:","8482e233":"# Outras formas de se agrupar\n\nAgora que j\u00e1 entendemos alguns usos b\u00e1sicos de um agrupamento. Vamos voltar um pouco para a fun\u00e7\u00e3o `groupby` e ver rapidamente outras formas de utiliza-la.","96828d17":"Para iterar pelos grupos, podemos usar um `for`.","8e7a786b":"### Normaliza\u00e7\u00e3o e padroniza\u00e7\u00e3o (normalization e standardization)\n\nDois processos muito comuns em Machine Learning, normalizar e padronizar os dados significa subtrair a m\u00e9dia e dividir pelo desvio padr\u00e3o.","bef2649f":"### Agrega\u00e7\u00f5es customiz\u00e1veis\nAl\u00e9m disso, podemos passar nossas pr\u00f3prias fun\u00e7\u00f5es para a `agg`:","9833ef29":"A fun\u00e7\u00e3o `filter` recebe o grupo inteiro (diferente de antes, que eram as colunas) e deve retornar `True` ou `False`. Se o grupo retornar `True`, ele ser\u00e1 mantido.","6570076c":"**Importante:** note que, depois de aplicarmos a fun\u00e7\u00e3o `describe`, o resultado \u00e9 um `DataFrame`. Ou seja, podemos usar tudo aquilo que j\u00e1 sabemos sobre `DataFrame`'s (como acessar uma coluna, igual eu fiz acima).","eb6e956a":"### Lidar com valores nulos\n\nUma aplica\u00e7\u00e3o legal do transform \u00e9 preencher valores nulos com agrega\u00e7\u00f5es de cada grupo.\n\nPor exemplo, suponha que eu tenha uma tabela de produtos de v\u00e1rios tipos: carros, motos, bicicletas e avi\u00f5es. E que o pre\u00e7o de um determinado carro est\u00e1 faltando (\u00e9 `NaN`). Uma op\u00e7\u00e3o seria tirar a m\u00e9dia dos pre\u00e7os e usar esse valor no lugar do pre\u00e7o faltando. Entranto, isso parece um pouco confuso, pois temos ve\u00edculos bem diferentes (bicicletas que custam muito menos e avi\u00f5es que custam muito mais) e a m\u00e9dia de tudo talvez n\u00e3o seja um valor ideal.\n\nO que n\u00f3s podemos fazer, ent\u00e3o, \u00e9 tirar a m\u00e9dia apenas dos carros (agrupando-os) e usar essa m\u00e9dia no lugar o valor faltando. \n\nVamos ver essa aplica\u00e7\u00e3o na pr\u00e1tica:","c69664d8":"Se quisermos ver quem percente a cada grupo, uma forma pr\u00e1tica \u00e9 utilizando o *atributo* `groups` do nosso objeto `groupby`.","62b2ed5c":"### Conclus\u00e3o e aprofundamento\n\nPor hoje \u00e9 tudo =)\n\nEspero que voc\u00ea tenha gostado e aprendido bastante. \n\nConclu\u00edmos que a fun\u00e7\u00e3o `groupby` \u00e9 incrivelmente \u00fatil e poderosa, resolvendo diversos problemas diferentes. \n\nVimos que existem muitas formas de se realizar um agrupamento com ela. \n\nDepois, vimos a utilidade da fun\u00e7\u00e3o `agg` e as diferentes formas de se trabalhar com ela.\n\nPor fim, vimos exemplos de outras duas fun\u00e7\u00f5es utilizadas com agrupamentos: `transform` e `filter`. \n\n<br>\n\nCaso queira se aprofundar e treinar um pouco o que vimos hoje, seguem alguns materiais adicionais:\n\n\n[Documenta\u00e7\u00e3o groupby](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.groupby.html) <br>\n[Documenta\u00e7\u00e3o agg](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.core.groupby.DataFrameGroupBy.aggregate.html) <br>\n[Documenta\u00e7\u00e3o transform](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.core.groupby.DataFrameGroupBy.transform.html) <br>\n[Documenta\u00e7\u00e3o filter](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.core.groupby.DataFrameGroupBy.filter.html) <br>\n\n[Guia do usu\u00e1rio sobre groupby](https:\/\/pandas.pydata.org\/docs\/user_guide\/groupby.html)\n\nAl\u00e9m disso, recomendo fortemente o livro *Python for Data Analysis* do Wes McKinney, criador do `pandas`. Ele foi um guia muito bom para eu aprender **muito** sobre a biblioteca e tem um cap\u00edtulo s\u00f3 para agrupamentos.\n\nPor fim, tem dois cursos que eu recomendo: <br>\n[Kaggle](https:\/\/www.kaggle.com\/learn\/pandas) <br>\n[Introdution to Data Science in Python](https:\/\/www.coursera.org\/learn\/python-data-analysis) <br>\n","01b8e1e4":"Note novamente que o resultado \u00e9 um `DataFrame`. Nesse caso, todos os valores da coluna *STNAME* s\u00e3o 'California'.\n\nO resultado \u00e9 exatamente o mesmo que quando fazemos:","0c29d6cc":"Antes de mais nada, as vers\u00f5es do numpy e pandas que utilizei para fazer esse notebook s\u00e3o, respectivamente, 1.19.2 e 1.2.3.\n\nIsso \u00e9 importante, pois bibliotecas costumam mudar conforme o tempo e algo que eu mostrar aqui pode ficar ultrapassado no futuro.","ae57b53f":"Observe o que aconteceu.\nJo\u00e3o e Joana agora t\u00eam a mesma nota nas duas provas. A nota1 de ambos \u00e9 a maior nota que algum deles tinha tirado, assim como a nota2.\nO mesmo aconteceu com Mariana, Mario e Marcos. \nCl\u00e1udia e Lucas n\u00e3o tiveram suas notas alteradas, pois est\u00e3o sozinhos em seus respectivos grupos.","e26a17c2":"Vamos agora importar nossa tabela.\n\nVou utilizar uma tabela do censo americado de 2010 a 2015.","420c4077":"Veja como obtivemos apenas as somas para os nascimentos e apenas a m\u00e9dia e a amplitude para a quantidade de popul\u00e3o.\n\nAl\u00e9m disso, perceba como apenas as colunas que eu informei apareceram (as colunas de 2010, 2011 e 2012 foram ignoradas).\n\nPor fim, note que para ter mais de uma fun\u00e7\u00e3o por coluna, novamente usamos uma lista, como faz\u00edamos antes.\n\nMas novamente tivemos um problema: a fun\u00e7\u00e3o lambda est\u00e1 sem nome. Ser\u00e1 que voc\u00ea consegue resolver isso? \n\n**Exerc\u00edcio:** \n*Pegue tudo o que j\u00e1 aprendemos e crie uma agrega\u00e7\u00e3o similar a anterior, mas com nomes 'soma', 'media' e 'amplitude'.*","b10aaba0":"A vari\u00e1vel `g` \u00e9 um **objeto** como v\u00e1rios outro do *pandas* (e.g. uma `Series` ou um `DataFrame`). Isso significa que temos v\u00e1rias fun\u00e7\u00f5es e atributos dentro desse objeto que n\u00f3s podemos usar.\n\nPor exemplo, o m\u00e9todo `describe` vai nos gerar v\u00e1rias informa\u00e7\u00f5es, como em um `DataFrame` normal, mas de forma agrupada por estado.","82a68008":"![image](https:\/\/github.com\/Giatroo\/BeeData_GroupBy-in-Pandas\/blob\/main\/split-apply-combine2.jpg?raw=true)","5b4890ec":"### Usando uma fun\u00e7\u00e3o\n\nPodemos tamb\u00e9m agrupar utilizando uma fun\u00e7\u00e3o (criada por n\u00f3s ou n\u00e3o). \n\nA fun\u00e7\u00e3o vai receber o *\u00edndice de cada linha* e deve devolver um valor que pode ser compar\u00e1vel. Ent\u00e3o vamos criar os grupos de acordo com os resultados iguais da fun\u00e7\u00e3o.","12940a56":"Veja que todas essas ferramentas que estamos utilizando s\u00e3o t\u00e3o poderosas que nos permitem fazer tudo em uma \u00fanica linha.\n\n**Exerc\u00edcio:**\n*Podemos ir al\u00e9m e primeiro preencher os valores nulos com a transforma\u00e7\u00e3o anterior e depois aplicar a transforma\u00e7\u00e3o de normaliza\u00e7\u00e3o e padroniza\u00e7\u00e3o. Tente fazer isso =)*","7d8b3662":"S\u00e3o 100 colunas ao todo, ent\u00e3o vamos remover as que n\u00e3o nos interessam e manter apenas os nascimentos de cada ano e estimativa da popula\u00e7\u00e3o. Al\u00e9m disso, vou manter apenas as linhas onde o *sumarrary level* \u00e9 *50*, pois essas s\u00e3o as linhas que se referem ao census de cada cidade.","e92fe869":"A lista completa de opera\u00e7\u00f5es pode ser encontrada [aqui](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/groupby.html#computations-descriptive-stats).","5522a8a3":"![img](https:\/\/github.com\/Giatroo\/BeeData_GroupBy-in-Pandas\/blob\/main\/split-apply-combine.jpeg?raw=true)","40deb70c":"Veja que temos uma fun\u00e7\u00e3o com um nome gigante e duas fun\u00e7\u00f5es lambda (fun\u00e7\u00f5es sem nome) que acabam n\u00e3o dando um resultado muito desej\u00e1vel. \n\nPodemos, entretanto, passar nomes para nossas colunas atrav\u00e9s da fun\u00e7\u00e3o `agg`. \n\nAo inv\u00e9s de passar uma lista de fun\u00e7\u00f5es, passamos uma lista de tuplas onde o primeiro elemento \u00e9 o nome e o segundo,a fun\u00e7\u00e3o:","3b8fea25":"### Agrega\u00e7\u00f5es diferentes para colunas diferentes\nPara finalizar as agrega\u00e7\u00f5es, outra coisas que a fun\u00e7\u00e3o `agg` nos permite \u00e9 aplicar agrega\u00e7\u00f5es por coluna.\n\nNote que eu passei tr\u00eas fun\u00e7\u00f5es para `agg` e elas foram aplicadas em todas as colunas num\u00e9ricas do meu `DataFrame`. Muitas vezes, n\u00e3o queremos isso. Pode ser que eu queira a soma dos nascimentos e a m\u00e9dia e amplitude da quantidade de popula\u00e7\u00e3o (diferentes agrega\u00e7\u00f5es para diferentes colunas). \n\nPodemos fazer isso passando um dicion\u00e1rio para `agg`:","4d546dbb":"### Por n\u00edvel em um MultiIndex\nFalando em `MultiIndex`, outra forma de agrupar \u00e9 informando o n\u00edvel em um `MultiIndex`.","cfd0d70c":"Veja como cada grupo aparece duas vezes, um para cada coluna do `DataFrame` original.","2cb5d6b9":"**~Lucas Paiolla , 16\/03\/2021**","3c78fb81":"Para acessar um grupo espec\u00edfico, usamos a fun\u00e7\u00e3o `get_group` e passamos o grupo desejado.","62a95a4e":"Utilizamos a fun\u00e7\u00e3o `transform` para transformar nossos grupos.","2b951ad4":"A diferen\u00e7a \u00e9 que `g` possui muitos outros grupos e \u00e9 muito mais pr\u00e1tico, como j\u00e1 vimos.","a9fb0a3c":"Primeiro, importamos o pandas, nosso foco hoje, e o numpy, que vai nos ser \u00fatil mais para frente.","0c2e1810":"### V\u00e1rias colunas\nA primeira forma \u00e9 passando um array de colunas ao inv\u00e9s de uma \u00fanica coluna.","bff9fc84":"Perceba que agora temos um `DataFrame` com um `MultiIndex` onde o n\u00edvel externo \u00e9 *'col1'* e o interno \u00e9 *'col2'*. E note que n\u00e3o h\u00e1 uma linha `(3, 'yes')` porque essa combina\u00e7\u00e3o n\u00e3o existe.","3e0ae4d4":"**Obs.:** como queremos agrupar pelos pa\u00edses (que s\u00e3o 'US' e 'BR') e eles s\u00e3o colunas, precisamos definir `axis='columns'`. Se tiv\u00e9ssemos um `MultiIndex` nas linhas e quisessemos agrupar nas linhas, var\u00edamos `axis='index'` ou simplesmente n\u00e3o falar\u00edamos nada (pois, `axis='index'` \u00e9 o padr\u00e3o). [Aqui](https:\/\/stackoverflow.com\/questions\/22149584\/what-does-axis-in-pandas-mean) tem umas discuss\u00e3o interessante sobre a diferen\u00e7a entre os *eixos* (axis).","5fad8578":"Espero que agora esteja come\u00e7ando a ficar claro quais s\u00e3o as funcionalidade desse tipo de objeto.","142f0061":"# Acessando grupos\n\nEm muitos casos, n\u00f3s precisamos acessar um grupo espec\u00edfico ou mesmo iterar sobre nossos grupos. ","eb727bcd":"### Nomear agrega\u00e7\u00f5es\nPodemos, agora, querer renomear os nomes que aparecem em cada coluna da tabela agregada. Veja como podemos ter alguns casos em que renomar as colunas \u00e9 bastante desej\u00e1vel:","da60e909":"# Agrega\u00e7\u00f5es\n\nVamos agora passar para as principais aplica\u00e7\u00f5es e utilizades dos agrupamentos:\n- Gerar agrega\u00e7\u00f5es\n- Gerar transforma\u00e7\u00f5es\n- Filtrar grupos\n\nCome\u00e7ando com as agrega\u00e7\u00f5es.\n\nSempre que temos uma lista e geramos um n\u00famero com base naquela lista, estamos gerando uma agrega\u00e7\u00e3o. Ou seja, uma agrega\u00e7\u00e3o \u00e9 sempre uma opera\u00e7\u00e3o que transforma uma lista de valores em um \u00fanico valor. Exemplos de agrega\u00e7\u00e3o s\u00e3o soma, m\u00e9dia, mediana, desvio padr\u00e3o, m\u00e1ximo, m\u00ednimo, produto, entre outras agrega\u00e7\u00f5es que n\u00f3s mesmos podemos criar (agrega\u00e7\u00f5es n\u00e3o se restringem a n\u00fameros).\n\nQuando se trata de grupos, as agrega\u00e7\u00f5es v\u00e3o ser feitas dentro de cada grupo. Ou seja, se utilizamos uma m\u00e9dia, vamos ter a m\u00e9dia dos valores de cada grupo.\n\nNo pandas, as fun\u00e7\u00f5es `agg` ou `aggregate` s\u00e3o utilizadas para fazer agrega\u00e7\u00f5es (n\u00e3o existe diferen\u00e7a nenhuma entre elas, `agg` \u00e9 um *alias* para *aggregate*).","e75d56af":"Agora os pre\u00e7os fazem muito mais sentido.","466d87e8":"**Obs.:** podemos passar uma lista com quantas colunas n\u00f3s quisermos, n\u00e3o precisa parar em duas.","2f961bd6":"Mas ent\u00e3o qual a diferen\u00e7a? Fazer apenas `.mean()` parece muito mais f\u00e1cil.\n\nA diferen\u00e7a \u00e9 que a fun\u00e7\u00e3o `agg` nos permite fazer muitos mais. E \u00e9 isso que vamos ver agora:","acc165d8":"![image](https:\/\/github.com\/Giatroo\/BeeData_GroupBy-in-Pandas\/blob\/main\/groupby-transform.jpg?raw=true)","25fe4030":"### V\u00e1rias agrega\u00e7\u00f5es\nCom `agg` podemos passar quantas fun\u00e7\u00f5es de agrega\u00e7\u00e3o n\u00f3s quisermos e vamos gerar um DataFrame com colunas hierarquicas com os nomes dessas fun\u00e7\u00f5es:","d057ddab":"**Observe** que a fun\u00e7\u00e3o passada para `agg` recebe como par\u00e2metro uma `Series` que corresponde a uma coluna do agrupamento. Vamos provar isso com `DataFrame` menor:","d61007c8":"Existem outras formas de nomear, mas elas s\u00e3o muito mais complexas e eu acho que n\u00e3o vale a pena aprender.\n\nEntretanto, recomendo voc\u00ea dar uma [olhada](https:\/\/pandas.pydata.org\/docs\/user_guide\/groupby.html#named-aggregation)."}}