{"cell_type":{"5a1d9a56":"code","08351b41":"code","61221ed7":"code","589e7139":"code","3d8d4b48":"code","339a81f3":"code","c4e415ff":"code","7c821769":"code","f7cf5f99":"code","cbe8c17c":"code","f987f184":"code","00d78645":"code","8c1e4a16":"code","0b35d9ee":"code","7fd02a05":"code","1b6bf2c2":"code","96590305":"code","138e6e51":"code","4713f803":"code","268da04d":"code","e0a0961e":"code","425ef3d5":"code","44a3cd79":"code","00ead7d9":"code","e039c7b5":"code","c45f1fb8":"code","e517929c":"code","1e128f75":"code","cc7b5b61":"code","25b5b574":"code","10aecddc":"code","86d2d62c":"code","54436d11":"code","871ab834":"code","028739a5":"code","1ed7836b":"code","3f500562":"code","e6f1985d":"code","585950d5":"code","91ea5c41":"code","364a4092":"code","5edd9086":"code","0e5f3989":"code","eff6f359":"code","0d2daba2":"code","e1dfda32":"code","648b8b08":"code","442cd73f":"code","61af0591":"code","88003c71":"code","601d6cf2":"code","6d476cd3":"code","1265e0fe":"code","dc70474b":"code","20834831":"code","398a46da":"code","ade9ab42":"code","8cec8344":"code","4a95db86":"code","a4daa8b5":"code","23263c45":"code","eaf2c012":"code","1fd80620":"code","75d9ab07":"code","3264dbad":"code","e836b05c":"code","eddcd153":"code","d091ded8":"code","2b4acd6d":"code","83788e95":"code","93b59b96":"code","83c42c91":"code","b68a1d6c":"code","5814a363":"code","91923e1d":"code","7734c6d0":"code","cac4fedd":"code","8825501d":"code","13e2e682":"code","c6ba1355":"code","15a9f3f6":"code","52c779d0":"code","4c3cc61e":"code","d9b7f0c2":"code","cf2521b7":"code","13140a58":"code","40752db4":"code","bf8568b4":"code","e36606d1":"code","f2de6812":"code","065db3ff":"code","76b2347e":"code","d3501ebb":"code","94b1604a":"code","63b99753":"code","52fb5b6d":"code","5ab3fe89":"code","b782881f":"code","4acb81fa":"code","1f6aab7c":"code","abbcc723":"code","d07b2a0b":"code","763e85e6":"code","ade191cb":"code","d45ea088":"code","bda344c8":"code","d5822ada":"code","245daa35":"code","8ee12afd":"code","528d93d6":"code","54364430":"code","17bcd7f6":"code","2eba1f5c":"code","3b3b0c4a":"code","7d718b0e":"code","1ed42150":"code","b9661aa1":"code","ffc05933":"code","893ca9a3":"code","3b98406b":"code","17efa1eb":"code","b82635c7":"code","35348926":"code","e97a0adf":"code","714417a9":"code","c9d1e5be":"code","abdd4b02":"code","8c3f6b15":"code","b7c7692f":"code","8e23968e":"code","82a95138":"code","a78a73b6":"code","567f6dcf":"code","e5b66270":"markdown","64d528ec":"markdown","3ad38974":"markdown","ef3325bf":"markdown","ea4a349b":"markdown","3d8d32dd":"markdown","90379a2e":"markdown","2cee7be6":"markdown","9b285d2a":"markdown","ff7df118":"markdown","be911139":"markdown","b5f8d12d":"markdown","aa49bbda":"markdown","621efda0":"markdown","784797eb":"markdown","bd07b9d0":"markdown","a527de3c":"markdown","a6beff15":"markdown","d8ad63b5":"markdown","4a0ab849":"markdown","54a6beb0":"markdown","6b37b6ff":"markdown","f2acf8cf":"markdown","defea4dd":"markdown","3bd1fce0":"markdown","20785fa1":"markdown","31d8ee95":"markdown","c742eafa":"markdown","8700ece8":"markdown","72fc9b85":"markdown","c76abf90":"markdown","80f2a9d2":"markdown","1cd0635e":"markdown","7bcf5c53":"markdown","024084cd":"markdown","629fd5eb":"markdown","274115f0":"markdown","97a8584f":"markdown","6042f2d8":"markdown","8b00c167":"markdown","34391089":"markdown","904b1a11":"markdown","0e9a2503":"markdown","d72037d4":"markdown","6fd85812":"markdown","bce904d7":"markdown","13848c70":"markdown","1434a072":"markdown","b5600593":"markdown","ef356292":"markdown","841f0afe":"markdown","4e4545a1":"markdown","6f32ef25":"markdown","8fc49949":"markdown","1fc9e931":"markdown","3bf0bd20":"markdown","1ae969f6":"markdown","edf307c7":"markdown","945cf066":"markdown","fdc8972d":"markdown","96530a7a":"markdown","2d7b007b":"markdown","423717dd":"markdown","54dd6e04":"markdown","c910c6b9":"markdown","3d97742b":"markdown","ff375b66":"markdown","7de7a4a0":"markdown","b1ffcf3c":"markdown","1a45997b":"markdown","6e094ea3":"markdown","dd206c6c":"markdown","d086ec01":"markdown","d9f79564":"markdown","dd2fbd12":"markdown","b0035c2b":"markdown","3f15e14b":"markdown","d20158c2":"markdown","df9c23ea":"markdown","2018f90b":"markdown","4c96c0a1":"markdown","e957897d":"markdown","e5eca963":"markdown","43313fa2":"markdown","ce9868bf":"markdown","f7847f4b":"markdown","61babc29":"markdown","d36dcc2e":"markdown","57284d40":"markdown","957e9054":"markdown"},"source":{"5a1d9a56":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","08351b41":"import plotly as py\nimport cufflinks as cf\nfrom plotly.offline import iplot\npy.offline.init_notebook_mode(connected=True)\ncf.go_offline()","61221ed7":"import plotly.express as px\nimport plotly.graph_objects as go","589e7139":"from plotly.subplots import make_subplots\nimport plotly.figure_factory as ff","3d8d4b48":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","339a81f3":"data = pd.read_csv('..\/input\/adult-income-dataset\/adult.csv')","c4e415ff":"from sklearn.model_selection import train_test_split","7c821769":"x = data.drop('income', axis = 'columns')\ny = data['income']","f7cf5f99":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 1, stratify = y)","cbe8c17c":"df = pd.concat([x_train, y_train], axis = 'columns')","f987f184":"test = pd.concat([x_test, y_test], axis = 'columns')","00d78645":"y_train.value_counts()","8c1e4a16":"y_test.value_counts()","0b35d9ee":"df.head()","7fd02a05":"df.shape","1b6bf2c2":"df.info()","96590305":"df.isna().sum().sum()","138e6e51":"num = list(df.select_dtypes(include = np.number).columns)\ncat = list(df.select_dtypes(include = 'object').columns)","4713f803":"colorscale = [[0, '#C71585'],[.5, '#FF1493'],[1, '#FF69B4']]\nfig = ff.create_table(round(df[num].describe().reset_index(), 2), font_colors = ['white'], colorscale = colorscale)\n\nfor i in range(len(fig.layout.annotations)):\n    fig.layout.annotations[i].font.size = 9\n    \nfig.update_layout(\n    title_text = 'Descriptive Statistics on the numerical columns',\n    margin = {'t':50},\n    template= \"plotly_dark\"\n)\n    \nfig.show()","268da04d":"colorscale = [[0, '#C71585'],[.5, '#FF1493'],[1, '#FF69B4']]\nfig = ff.create_table(df[cat].describe().reset_index(), font_colors = ['white'], colorscale = colorscale)\n\nfor i in range(len(fig.layout.annotations)):\n    fig.layout.annotations[i].font.size = 9\n    \nfig.update_layout(\n    title_text = 'Statistics of the categorical columns',\n    margin = {'t':50},\n    template= \"plotly_dark\"\n)\n    \nfig.show()","e0a0961e":"fig = ff.create_distplot([df['age']],group_labels =['age_density'], colors = ['#00FFFF'])\n\nfig.add_trace(go.Box(x = df['age'],\n                    xaxis='x2', yaxis='y2', \n                     name = 'age_distribution'\n                    ))\n\nfig.update_layout(\n    title_text = 'Checking density and distribution of the age column',\n    margin = {'t':50, 'b':100},\n    template= \"plotly_dark\"\n)\n\n\nfig.show()","425ef3d5":"print('Total number of adults in the record is:', df.shape[0])\nprint('Number of working adults working after the age of 65 is:',df[df['age'] > 65].shape[0])","44a3cd79":"df = df[df['age'] <= 65] # Removing the records having age of more than 65","00ead7d9":"fig = ff.create_distplot([df['age']],group_labels =['age_density'], colors = ['#00FFFF'])\n\nfig.add_trace(go.Box(x = df['age'],\n                    xaxis='x2', yaxis='y2', \n                     name = 'age_distribution'\n                    ))\n\nfig.update_layout(\n    title_text = 'Checking density and distribution of the age column after outlier treatment',\n    margin = {'t':50, 'b':10},\n    template= \"plotly_dark\"\n)\n\n\nfig.show()","e039c7b5":"df['education'].unique()","c45f1fb8":"df['education'].value_counts()","e517929c":"df['educational-num'].unique()","1e128f75":"len(df['education'].unique()), len(df['educational-num'].unique())","cc7b5b61":"edu = pd.DataFrame(df.groupby('education')['educational-num'].agg(pd.Series.mode))\nedu = edu.reset_index()\nedu.columns = ['Education', 'Educational-num']\nedu = edu.sort_values(by = 'Educational-num')","25b5b574":"fig = go.Figure(data=[go.Table(\n    header=dict(values=['Education','Educational-num'],\n                fill_color='yellow',\n                font_color = 'black',\n                line_color='darkslategray',\n                align='center',font_size=20),\n    cells=dict(values=[edu.Education, edu['Educational-num']],\n               font_color = 'black',\n               fill=dict(color=['paleturquoise', '#0FFF50']),\n               line_color='darkslategray',\n               align='center',font_size=15))\n])\n\nfig.update_layout(\n    title_text = 'Showing Corresponding value of education in educational-num column',\n    # template = 'plotly_dark',\n    width=700\n)\n\nfig.show()","10aecddc":"df['education'] = df['education'].replace(['9th','10th','11th','12th'], '9th-12th')\ndf['education'] = df['education'].replace(['1st-4th','5th-6th', '7th-8th'], '1st-8th')","86d2d62c":"df['education'].value_counts()","54436d11":"df['educational-num'] = df['educational-num'].replace([2, 3, 4], 2)\ndf['educational-num'] = df['educational-num'].replace([5, 6, 7, 8], 3)\ndf['educational-num'] = df['educational-num'].replace([9, 10, 11, 12, 13, 14, 15, 16], [4, 5, 6, 7, 8, 9, 10, 11])","871ab834":"df['educational-num'].value_counts()","028739a5":"edu = pd.DataFrame(df.groupby('education')['educational-num'].agg(pd.Series.mode))\nedu = edu.reset_index()\nedu.columns = ['Education', 'Educational-num']\nedu = edu.sort_values(by = 'Educational-num')","1ed7836b":"fig = go.Figure(data=[go.Table(\n    header=dict(values=['Education','Educational-num'],\n                fill_color='yellow',\n                font_color = 'black',\n                line_color='darkslategray',\n                align='center',font_size=20),\n    cells=dict(values=[edu['Education'], edu['Educational-num']],\n               font_color = 'black',\n               fill=dict(color=['paleturquoise', '#0FFF50']),\n               line_color='darkslategray',\n               align='center',font_size=15))\n])\n\nfig.update_layout(\n    title_text = 'Showing Corresponding value of education in educational-num column after<br> updating the categories',\n    # template = 'plotly_dark',\n    width=700\n)\n\nfig.show()","3f500562":"df = df.drop(df[df['education'] == 'Preschool'].index)","e6f1985d":"education = pd.DataFrame(df['education'].value_counts())\neducation = education.reset_index()\neducation.columns = ['Education', 'Count']","585950d5":"colorscale = [[0, '#008000'],[.5, '#00FF00'],[1, '#20B2AA']]\nfig = ff.create_table(education, colorscale = colorscale, font_colors = ['white'])\n\nfig.add_trace(go.Bar(x= list(education.Education), \n                     y=list(education.Count), \n                     xaxis='x2', yaxis='y2',\n                    marker=dict(color='#AAFF00'),\n                    name='Count'))\n\n\nfig.update_layout(\n    title_text = 'Number of People having respective highest education',\n    height = 1000,\n    margin = {'t':75, 'l':50},\n    yaxis = {'domain': [0, .45]},\n    xaxis2 = {'anchor': 'y2'},\n    yaxis2 = {'domain': [.6, 1], 'anchor': 'x2', 'title': 'Count'},\n    template= \"plotly_dark\"\n)\nfor i in range(len(fig.layout.annotations)):\n    fig.layout.annotations[i].font.size = 15\n\nfig.show()","91ea5c41":"print('Number of records having highest education lesser than 9th is:',df[df['educational-num'] < 5].shape[0])","364a4092":"low_education = df[df['educational-num'] < 5][['occupation', 'workclass']]","5edd9086":"low_education['occupation'].unique()","0e5f3989":"df[df['occupation'] == '?'].head()","eff6f359":"df[df['occupation'] == '?'].head()","0d2daba2":"print('Number of rows in which \"occupation\" is missing:', df[df['occupation'] == '?'].shape[0])\nprint('Number of rows in which \"workclass\" is missing:', df[df['workclass'] == '?'].shape[0])\nprint('Number of rows in which both \"workclass\" and \"occupation\" is missing:', df[df['workclass'] == df['occupation']].shape[0])","e1dfda32":"for i in cat:\n    if df[i].isin(['?']).any().any():\n        print(i, 'has missing values')","648b8b08":"print('Number of rows in which \"occupation\" is missing:', df[df['occupation'] == '?'].shape[0])\nprint('Number of rows in which \"workclass\" is missing:', df[df['workclass'] == '?'].shape[0])\nprint('Number of rows in which \"native-country\" is missing:', df[df['native-country'] == '?'].shape[0])\nprint('Number of rows in which both \"workclass\", \"occupation\" and \"native-country\", all are missing:', df[(df['workclass'] == '?') & (df['occupation'] == '?') & (df['native-country'] == '?')].shape[0])","442cd73f":"missing = df[(df['workclass'] == '?') & (df['occupation'] == '?') & (df['native-country'] == '?')]","61af0591":"missing.shape","88003c71":"missing.head()","601d6cf2":"pd.crosstab(df['native-country'], df['race'])","6d476cd3":"df_2 = df.drop(df[(df['workclass'] == '?') & (df['occupation'] == '?') & (df['native-country'] == '?')].index)","1265e0fe":"df_2.shape","dc70474b":"print('Number of rows in which \"occupation\" is missing:', df_2[df_2['occupation'] == '?'].shape[0])\nprint('Number of rows in which \"workclass\" is missing:', df_2[df_2['workclass'] == '?'].shape[0])\nprint('Number of rows in which both \"workclass\" and \"occupation\" is missing:', df_2[df_2['workclass'] == df_2['occupation']].shape[0])","20834831":"df_3 = df_2.drop(df_2[df_2['occupation'] == '?'].index)\ndf_3.shape","398a46da":"# Analyzing with new datafrmae\nprint('Number of records having highest education lesser than 9th is:',df_3[df_3['educational-num'] <= 2].shape[0])","ade9ab42":"low_education = df_3[df_3['educational-num'] < 3][['occupation', 'workclass']]","8cec8344":"low_education = pd.DataFrame(low_education['occupation'].value_counts())\nlow_education = low_education.reset_index()\nlow_education.columns = ['Occupation', 'Count']","4a95db86":"colorscale = [[0, '#0000ff'],[.5, '#00ffff'],[1, '#0096FF']]\nfig = ff.create_table(low_education, height_constant=60, colorscale = colorscale, font_colors = ['white'])\n\nfig.add_trace(go.Bar(x= list(low_education['Occupation']), \n                     y=list(low_education['Count']), \n                     xaxis='x2', yaxis='y2',\n                    marker=dict(color='#00FFFF'),\n                    name='Views'))\n\n\nfig.update_layout(\n    title_text = 'Count vs Occupation of those having education lesser than 9th standard',\n    height = 900,\n    margin = {'t':75, 'l':50},\n    yaxis = {'domain': [0, .45]},\n    xaxis2 = {'anchor': 'y2'},\n    yaxis2 = {'domain': [.6, 1], 'anchor': 'x2', 'title': 'Views'},\n    template = 'plotly_dark'\n)\n\nfor i in range(len(fig.layout.annotations)):\n    fig.layout.annotations[i].font.size = 15\n\nfig.show()","a4daa8b5":"df_3['marital-status'].unique()","23263c45":"df_3['marital-status'].value_counts()","eaf2c012":"df_3['marital-status'] = df_3['marital-status'].replace('Married-spouse-absent', 'Separated')","1fd80620":"df_3['marital-status'] = df_3['marital-status'].replace(['Married-civ-spouse', 'Married-AF-spouse'], 'Married')","75d9ab07":"df_3['marital-status'] = df_3['marital-status'].replace(['Never-married', 'Widowed'], ['Unmarried', 'Separated'])","3264dbad":"marital = pd.DataFrame(df_3['marital-status'].value_counts())\nmarital = marital.reset_index()\nmarital.columns = ['marital-status', 'Count']","e836b05c":"colorscale = [[0, '#800080'],[.5, '#EE82EE'],[1, '#FF00FF']]\nfig = ff.create_table(marital, height_constant=60, colorscale = colorscale, font_colors = ['white'])\n\nfig.add_trace(go.Bar(x= list(marital['marital-status']), \n                     y=list(marital['Count']), \n                     xaxis='x2', yaxis='y2',\n                    marker=dict(color='#9400D3'),\n                    name='Count'))\n\n\nfig.update_layout(\n    title_text = 'Total number of records from each Marital-Status category',\n    height = 900,\n    margin = {'t':75, 'l':50},\n    yaxis = {'domain': [0, .45]},\n    xaxis2 = {'anchor': 'y2'},\n    yaxis2 = {'domain': [.6, 1], 'anchor': 'x2', 'title': 'Count'},\n    template = 'plotly_dark'\n)\n\nfor i in range(len(fig.layout.annotations)):\n    fig.layout.annotations[i].font.size = 17\n\nfig.show()","eddcd153":"df_3['occupation'].unique()","d091ded8":"df_3['occupation'].value_counts()","2b4acd6d":"df_3['occupation'] = df_3['occupation'].replace(['Armed-Forces', 'Priv-house-serv', 'Protective-serv'], 'Other-service')","83788e95":"occup = pd.DataFrame(df_3['occupation'].value_counts())\noccup = occup.reset_index()\noccup.columns = ['Occupation', 'Count']","93b59b96":"colorscale = [[0, '#E49B0F'],[.5, '#FFBF00'],[1, '#FDDA0D']]\nfig = ff.create_table(occup, height_constant=60, colorscale = colorscale, font_colors = ['black'])\n\nfig.add_trace(go.Bar(x= list(occup['Occupation']), \n                     y=list(occup['Count']), \n                     xaxis='x2', yaxis='y2',\n                    marker=dict(color='#FFEA00'),\n                    name='Count'))\n\n\nfig.update_layout(\n    title_text = 'Total number of records from each occupation category',\n    height = 900,\n    margin = {'t':75, 'l':50},\n    yaxis = {'domain': [0, .45]},\n    xaxis2 = {'anchor': 'y2'},\n    yaxis2 = {'domain': [.6, 1], 'anchor': 'x2', 'title': 'Count'},\n    template = 'plotly_dark'\n)\n\nfor i in range(len(fig.layout.annotations)):\n    fig.layout.annotations[i].font.size = 16\n\nfig.show()","83c42c91":"df_3['relationship'].unique()","b68a1d6c":"from scipy.stats import chi2\nfrom scipy.stats import chi2_contingency","5814a363":"pd.crosstab(df['relationship'], df['income'], margins=True)","91923e1d":"# These are the observed frequencies\n\nobserved = pd.crosstab(df['relationship'], df['income'])","7734c6d0":"# Computing chi2 test statistic, p-value, degree of freedoms\n\nchi2_test_stat = chi2_contingency(observed)[0]\npval = chi2_contingency(observed)[1]\ndf = chi2_contingency(observed)[2]","cac4fedd":"confidence_level = 0.90\n\nalpha = 1 - confidence_level\n\nchi2_critical = chi2.ppf(1 - alpha, df)\n\nchi2_critical","8825501d":"if(chi2_test_stat > chi2_critical):\n    print(\"Reject Null Hypothesis\")\nelse:\n    print(\"Fail to Reject Null Hypothesis\")","13e2e682":"if(pval < alpha):\n    print(\"Reject Null Hypothesis\")\nelse:\n    print(\"Fail to Reject Null Hypothesis\")","c6ba1355":"df_3 = df_3.drop('relationship', axis = 'columns')","15a9f3f6":"df_3['race'].unique()","52c779d0":"df_3['race'].value_counts()","4c3cc61e":"df_3['race'] = df_3['race'].replace(['Asian-Pac-Islander','Amer-Indian-Eskimo'], 'Other')","d9b7f0c2":"race = pd.DataFrame(df_3['race'].value_counts())\nrace = race.reset_index()\nrace.columns = ['race', 'Count']","cf2521b7":"fig = make_subplots(\n    rows=1, cols=2,\n    shared_xaxes=True,\n    vertical_spacing=0.03,\n    specs=[[{\"type\": \"table\"}, {\"type\": \"pie\"}]]\n)\n\n\nfig.add_trace(go.Pie(labels=list(race.race),\n                             values=list(race['Count']),\n                               name='race', hole=.3),\n             row = 1, col = 2)\n\nfig.add_trace(go.Table(\n    header=dict(values=list(race.columns),\n                fill_color='yellow',\n                align='left',\n               font_color = 'black'),\n    cells=dict(values=[race.race, race.Count],\n               fill_color=['#00FF00', '#00BFFF'],\n               align='left',\n              font_color = 'black')),\n             row = 1, col = 1)\n\nfig.update_layout(margin=dict(t=50, b=0, l=0, r=10),\n                 title_text = 'Total Count of people from each race',\n                 template = 'plotly_dark',\n                  annotations=[dict(text='race', x=0.81, y=0.5, font_size=25, showarrow=False)]\n                  )\n\n\nfig.show()","13140a58":"df_3['gender'].unique()","40752db4":"gender = pd.DataFrame(df_3['gender'].value_counts())\ngender = gender.reset_index()\ngender.columns = ['Gender', 'Count']","bf8568b4":"fig = make_subplots(\n    rows=1, cols=2,\n    shared_xaxes=True,\n    vertical_spacing=0.03,\n    specs=[[{\"type\": \"table\"}, {\"type\": \"pie\"}]]\n)\n\n\nfig.add_trace(go.Pie(labels=list(gender.Gender),\n                             values=list(race['Count']),\n                               name='race', hole=.3),\n             row = 1, col = 2)\n\nfig.add_trace(go.Table(\n    header=dict(values=list(gender.columns),\n                fill_color='yellow',\n                align='left',\n               font_color = 'black'),\n    cells=dict(values=[gender.Gender, gender.Count],\n               fill_color=['#00FF00', '#00BFFF'],\n               align='left',\n              font_color = 'black')),\n             row = 1, col = 1)\n\nfig.update_layout(margin=dict(t=50, b=0, l=0, r=10),\n                 title_text = 'Total Count of people from each Gender',\n                 template = 'plotly_dark',\n                  annotations=[dict(text='Gender', x=0.8452, y=0.5, font_size=25, showarrow=False)]\n                  )\n\n\nfig.show()","e36606d1":"fig = ff.create_distplot([df_3['capital-gain']],group_labels =['capital-gain'], colors = ['#00FFFF'])\n\nfig.add_trace(go.Box(x = df_3['capital-gain'],\n                    xaxis='x2', yaxis='y2', \n                     name = 'capital_gain<br>distribution'\n                    ))\n\nfig.update_layout(\n    title_text = 'Checking density and distribution of the capital-gain column',\n    margin = {'t':50, 'b':100},\n    template= \"plotly_dark\"\n)\nfig.update_xaxes(type=\"log\")\n\nfig.show()","f2de6812":"df_3[df_3['capital-gain'] < 0].shape[0]","065db3ff":"print('Number of records with some capital gain',df_3[df_3['capital-gain'] > 0].shape[0]\/ df_3.shape[0] *100)\nprint('Number of records with no capital gain', df_3[~(df_3['capital-gain'] > 0)].shape[0] \/ df_3.shape[0] *100)","76b2347e":"df_3.loc[df_3['capital-gain'] > 0, 'capital-gain'] = '> 0'\ndf_3.loc[df_3['capital-gain'] == 0, 'capital-gain'] = '0'","d3501ebb":"gain = pd.DataFrame(df_3['capital-gain'].value_counts())\ngain = gain.reset_index()\ngain.columns = ['capital-gain', 'Count']","94b1604a":"fig = make_subplots(\n    rows=1, cols=2,\n    shared_xaxes=True,\n    vertical_spacing=0.03,\n    specs=[[{\"type\": \"table\"}, {\"type\": \"pie\"}]]\n)\n\nfig.add_trace(go.Pie(labels=list(gain['capital-gain']),\n                             values=list(gain['Count']),\n                               name='gain', hole=.3),\n             row = 1, col = 2)\n\nfig.add_trace(go.Table(\n    header=dict(values=list(gain.columns),\n                fill_color='yellow',\n                align='left',\n               font_color = 'black'),\n    cells=dict(values=[gain['capital-gain'], gain.Count],\n               fill_color=['#00FF00', '#00BFFF'],\n               align='left',\n              font_color = 'black')),\n             row = 1, col = 1)\n\nfig.update_layout(margin=dict(t=50, b=0, l=0, r=10),\n                 title_text = 'Total Count of people having zero or non zero capital gain',\n                 template = 'plotly_dark',\n                  annotations=[dict(text='Gain', x=0.823, y=0.5, font_size=25, showarrow=False)]\n                  )\n\n\nfig.show()","63b99753":"fig = ff.create_distplot([df_3['capital-loss']],group_labels =['capital-loss'], colors = ['#00FFFF'])\n\nfig.add_trace(go.Box(x = df_3['capital-loss'],\n                    xaxis='x2', yaxis='y2', \n                     name = 'capital-loss<br>distribution'\n                    ))\n\nfig.update_layout(\n    title_text = 'Checking density and distribution of the capital-loss column',\n    margin = {'t':50, 'b':100},\n    template= \"plotly_dark\"\n)\nfig.update_xaxes(type=\"log\")\n\nfig.show()","52fb5b6d":"print('Number of records with some capital loss',df_3[df_3['capital-loss'] > 0].shape[0] \/ df_3.shape[0] *100)\nprint('Number of records with no capital loss', df_3[~(df_3['capital-loss'] > 0)].shape[0] \/ df_3.shape[0] *100) ","5ab3fe89":"df_3[df_3['capital-loss'] < 0].shape[0]","b782881f":"df_3.loc[df_3['capital-loss'] > 0, 'capital-loss'] = '> 0'\ndf_3.loc[df_3['capital-loss'] == 0, 'capital-loss'] = '0'","4acb81fa":"loss = pd.DataFrame(df_3['capital-loss'].value_counts())\nloss = loss.reset_index()\nloss.columns = ['capital-loss', 'Count']","1f6aab7c":"fig = make_subplots(\n    rows=1, cols=2,\n    shared_xaxes=True,\n    vertical_spacing=0.03,\n    specs=[[{\"type\": \"table\"}, {\"type\": \"pie\"}]]\n)\n\n\nfig.add_trace(go.Pie(labels=list(loss['capital-loss']),\n                             values=list(loss['Count']),\n                               name='loss', hole=.3),\n             row = 1, col = 2)\n\nfig.add_trace(go.Table(\n    header=dict(values=list(loss.columns),\n                fill_color='yellow',\n                align='left',\n               font_color = 'black'),\n    cells=dict(values=[loss['capital-loss'], loss.Count],\n               fill_color=['#00FF00', '#00BFFF'],\n               align='left',\n              font_color = 'black')),\n             row = 1, col = 1)\n\nfig.update_layout(margin=dict(t=50, b=0, l=0, r=10),\n                 title_text = 'Total Count of people having zero and non zero capital loss',\n                 template = 'plotly_dark',\n                  annotations=[dict(text='loss', x=0.816, y=0.5, font_size=25, showarrow=False)]\n                  )\n\n\nfig.show()","abbcc723":"fig = ff.create_distplot([df_3['hours-per-week']],group_labels =['hours-per-week'], colors = ['#FFEA00'])\n\nfig.add_trace(go.Box(x = df_3['hours-per-week'],\n                    xaxis='x2', yaxis='y2', \n                     name = 'hours-per-week<br>distribution'\n                    ))\n\nfig.update_layout(\n    title_text = 'Checking density and distribution of the hours-per-week column',\n    margin = {'t':50, 'b':100},\n    template= \"plotly_dark\"\n)\n# fig.update_xaxes(type=\"log\")\n\nfig.show()","d07b2a0b":"def find_normal_boundaries(df, variable):\n    # calculate the boundaries outside which lie the outliers for a Gaussian distribution\n    upper_boundary = df[variable].mean() + 3 * df[variable].std()\n    lower_boundary = df[variable].mean() - 3 * df[variable].std()\n    return upper_boundary, lower_boundary\n","763e85e6":"upper, lower = find_normal_boundaries(df_3, 'hours-per-week')","ade191cb":"upper, lower","d45ea088":"df_3[(df_3['hours-per-week'] < lower) | (df_3['hours-per-week'] > upper)].shape[0]","bda344c8":"df_3.shape","d5822ada":"df_3 = df_3.drop(df_3[(df_3['hours-per-week'] < lower) | (df_3['hours-per-week'] > upper)].index)","245daa35":"df_3.shape","8ee12afd":"fig = ff.create_distplot([df_3['hours-per-week']],group_labels =['hours-per-week'], colors = ['#FFEA00'])\n\nfig.add_trace(go.Box(x = df_3['hours-per-week'],\n                    xaxis='x2', yaxis='y2', \n                     name = 'hours-per-week<br>distribution'\n                    ))\n\nfig.update_layout(\n    title_text = 'Checking density and distribution of the hours-per-week column<br> after removing outliers',\n    margin = {'t':50, 'b':100},\n    template= \"plotly_dark\"\n)\n# fig.update_xaxes(type=\"log\")\n\nfig.show()","528d93d6":"df_3['native-country'].unique()","54364430":"df_3['native-country'] = df_3['native-country'].replace('?', np.nan)","17bcd7f6":"df_3['native-country'].isna().sum()","2eba1f5c":"df_3['native-country'] = df_3['native-country'].fillna(df_3['native-country'].mode()[0])","3b3b0c4a":"df_3['native-country'].isna().sum()","7d718b0e":"df_3['native-country'].value_counts()[:10]","1ed42150":"lst_1 = list(df_3['native-country'].unique())\nlst_1.remove('United-States')","b9661aa1":"df_3['native-country'] = df_3['native-country'].replace(lst_1, 'Other') ","ffc05933":"native = pd.DataFrame(df_3['native-country'].value_counts())\nnative = native.reset_index()\nnative.columns = ['Country', 'Count']","893ca9a3":"fig = make_subplots(\n    rows=1, cols=2,\n    shared_xaxes=True,\n    vertical_spacing=0.03,\n    specs=[[{\"type\": \"table\"}, {\"type\": \"pie\"}]]\n)\n\n\nfig.add_trace(go.Pie(labels=list(native.Country),\n                             values=list(native['Count']),\n                               name='country', hole=.3),\n             row = 1, col = 2)\n\nfig.add_trace(go.Table(\n    header=dict(values=list(native.columns),\n                fill_color='yellow',\n                align='left',\n               font_color = 'black'),\n    cells=dict(values=[native.Country, native.Count],\n               fill_color=['#00FF00', '#00BFFF'],\n               align='left',\n              font_color = 'black')),\n             row = 1, col = 1)\n\nfig.update_layout(margin=dict(t=50, b=0, l=0, r=10),\n                 title_text = 'Total Count of people from country category',\n                 template = 'plotly_dark',\n                  annotations=[dict(text='native<br>country', x=0.85, y=0.5, font_size=23, showarrow=False)]\n                  )\n\n\nfig.show()","3b98406b":"df_3['workclass'].unique()","17efa1eb":"df_3['workclass'].value_counts()","b82635c7":"df_3 = df_3.drop(df_3[df_3['workclass'] == 'Without-pay'].index)","35348926":"df_3['workclass'] = df_3['workclass'].replace(['Self-emp-not-inc', 'Self-emp-inc'], 'Self-emp')\ndf_3['workclass'] = df_3['workclass'].replace(['Federal-gov', 'State-gov', 'Local-gov'], 'Government')","e97a0adf":"workclass = pd.DataFrame(df_3['workclass'].value_counts())\nworkclass = workclass.reset_index()\nworkclass.columns = ['workclass', 'Count']","714417a9":"fig = make_subplots(\n    rows=1, cols=2,\n    shared_xaxes=True,\n    vertical_spacing=0.03,\n    specs=[[{\"type\": \"table\"}, {\"type\": \"pie\"}]]\n)\n\n\nfig.add_trace(go.Pie(labels=list(workclass.workclass),\n                             values=list(workclass['Count']),\n                               name='workclass', hole=.3),\n             row = 1, col = 2)\n\nfig.add_trace(go.Table(\n    header=dict(values=list(workclass.columns),\n                fill_color='yellow',\n                align='left',\n               font_color = 'black'),\n    cells=dict(values=[workclass.workclass, workclass.Count],\n               fill_color=['#00FF00', '#00BFFF'],\n               align='left',\n              font_color = 'black')),\n             row = 1, col = 1)\n\nfig.update_layout(margin=dict(t=50, b=0, l=0, r=10),\n                 title_text = 'Total Count of people from different workclass',\n                 template = 'plotly_dark',\n                  annotations=[dict(text='workclass', x=0.865, y=0.5, font_size=23, showarrow=False)]\n                  )\n\n\nfig.show()","c9d1e5be":"df_3['income'].unique()","abdd4b02":"income = pd.DataFrame(df_3['income'].value_counts())\nincome = income.reset_index()\nincome.columns = ['income', 'Count']","8c3f6b15":"fig = make_subplots(\n    rows=1, cols=2,\n    shared_xaxes=True,\n    vertical_spacing=0.03,\n    specs=[[{\"type\": \"table\"}, {\"type\": \"pie\"}]]\n)\n\n\nfig.add_trace(go.Pie(labels=list(income.income),\n                             values=list(income['Count']),\n                               name='income', hole=.3),\n             row = 1, col = 2)\n\nfig.add_trace(go.Table(\n    header=dict(values=list(income.columns),\n                fill_color='yellow',\n                align='left',\n               font_color = 'black'),\n    cells=dict(values=[income.income, income.Count],\n               fill_color=['#00FF00', '#00BFFF'],\n               align='left',\n              font_color = 'black')),\n             row = 1, col = 1)\n\nfig.update_layout(margin=dict(t=50, b=0, l=0, r=10),\n                 title_text = 'Total Count of people from each income category',\n                 template = 'plotly_dark',\n                  annotations=[dict(text='income', x=0.85, y=0.5, font_size=25, showarrow=False)]\n                  )\n\n\nfig.show()","b7c7692f":"fig = ff.create_distplot([df_3['fnlwgt']],group_labels =['fnlwgt_density'], colors = ['#AAFF00'])\n\nfig.add_trace(go.Box(x = df_3['fnlwgt'],\n                    xaxis='x2', yaxis='y2', \n                     name = 'fnlwgt_distribution'\n                    ))\n\nfig.update_layout(\n    title_text = 'Checking density and distribution of the fnlwgt column',\n    margin = {'t':50, 'b':10},\n    template= \"plotly_dark\"\n)\n\nfig.update_xaxes(type=\"log\")\n\nfig.show()","8e23968e":"# from google.colab import files","82a95138":"# df_3.to_csv('df_3.csv', index = False)         \n# files.download('df_3.csv')","a78a73b6":"# On age column\ntest = test[test['age'] <= 65]\n\n# On age column\ntest['education'] = test['education'].replace(['9th','10th','11th','12th'], '9th-12th')\ntest['education'] = test['education'].replace(['1st-4th','5th-6th', '7th-8th'], '1st-8th')\n\n# Replacing values in marital-status\ntest['marital-status'] = test['marital-status'].replace('Married-spouse-absent', 'Separated')\ntest['marital-status'] = test['marital-status'].replace(['Married-civ-spouse', 'Married-AF-spouse'], 'Married')\ntest['marital-status'] = test['marital-status'].replace(['Never-married', 'Widowed'], ['Unmarried', 'Separated'])\n\n# Replacing values in occupation\ntest['occupation'] = test['occupation'].replace(['Armed-Forces', 'Priv-house-serv', 'Protective-serv'], 'Other-service')\n\n# Dropping values in relationship\ntest = test.drop('relationship', axis = 'columns')\n\n# Replacing values in race column\ntest['race'] = test['race'].replace(['Asian-Pac-Islander','Amer-Indian-Eskimo'], 'Other')\n\n# Binning capital-gain\ntest.loc[test['capital-gain'] > 0, 'capital-gain'] = '> 0'\ntest.loc[test['capital-gain'] == 0, 'capital-gain'] = '0'\n\n# Binning capital-loss\ntest.loc[test['capital-loss'] > 0, 'capital-loss'] = '> 0'\ntest.loc[test['capital-loss'] == 0, 'capital-loss'] = '0'\n\n# On native-country\nlst_1 = list(test['native-country'].unique())\nlst_1.remove('United-States')\ntest['native-country'] = test['native-country'].replace('?', np.nan)\ntest['native-country'] = test['native-country'].fillna(test['native-country'].mode()[0])\ntest['native-country'] = test['native-country'].replace(lst_1, 'Other') \n\n# On workclass\ntest['workclass'] = test['workclass'].replace(['Self-emp-not-inc', 'Self-emp-inc'], 'Self-emp')\ntest['workclass'] = test['workclass'].replace(['Federal-gov', 'State-gov', 'Local-gov'], 'Government')\n","567f6dcf":"# test.to_csv('test.csv', index = False)         \n# files.download('test.csv')","e5b66270":"**Combining the training dataframes for the analysis**","64d528ec":"**showing total number of missing values in the dataset**","3ad38974":"Here, 0 represents no capital gain and > 0 represent some capital gain ","ef3325bf":"<font color = blue>**Here, we can clearly see that most of the distribution is around 0 and all the values above 0 are just outliers.**<\/font>","ea4a349b":"<font color = blue>**Those having lower education usually have the jobs that don't require much IQ hence there is no mistake in the data**<\/font>","3d8d32dd":"<font color = blue>**Number of persons in Private is more than 50% so it is better that other categories should be merged as they are very less in numbers**<\/font>","90379a2e":"<font color = blue>**There are very few records having lower education it might also be possible that they are false record so to confirm whether it is true or not I need to check the education of these guys having lower education**<\/font>","2cee7be6":"<font color = blue>**Since, Married-spouse-absent and Separated are one and the same thing so I am replacing one with another.**<\/font>","9b285d2a":"**Creating new dataframe by removing the missing values from the native-country coulumn**","ff7df118":"## Educational Num and Education","be911139":"<font color = blue>**In comparison to other values, the count of 'Asian-Pac-Islander', 'Amer-Indian-Eskimo' and 'Other' is very less hence I shall merge all three of them into 'Other' only.**<\/font>","b5f8d12d":"dataset available at:- https:\/\/www.kaggle.com\/wenruliu\/adult-income-dataset","aa49bbda":"**Checking datatype of each column**","621efda0":"**Checking the relation between native-country and race**","784797eb":"<font color = blue>**As you can see, the data has very little skewness but no need to bother about it as it will be treated later with box-cox transformation**<\/font>","bd07b9d0":"# Data Description","a527de3c":"<font color = blue>**Without-pay are very less in number so it is better to remove them**<\/font>","a6beff15":"**Merging other categories**","d8ad63b5":"# Doing the same data cleaning operations on the test data","4a0ab849":"## Gender","54a6beb0":"<font color = blue>**From the general knowledge we are aware that once the individual reaches to the age of 60 he\/she usually prefer for retirement and hence there are very less records, we can see from above which are working even at the age of 60+**<\/font>","6b37b6ff":"**Part 2:** [Bivariate\/Multivariate\/Encoding\/Scaling](https:\/\/www.kaggle.com\/gauravkumar008\/bivariate-multivariate-encoding-techniques)\n\n**Part 3:** [Machine Learning Implementation ](https:\/\/www.kaggle.com\/gauravkumar008\/predicting-adult-income)","f2acf8cf":"**Checking the occupation of those having lower education**","defea4dd":"<font color = blue>**Since, we are analyzing the annual income of an individual, it doesn't depend on his\/her spouse's occupation<br> So I am replacing Married-AF-spouse and Married-civ-spouse with Married only**<\/font>","3bd1fce0":"Null Hypothesis:- $$H_0 \\Rightarrow \\ They\\ are\\ independent$$\nAlternate Hypothesis:- $$H_1 \\Rightarrow \\ They\\ are\\ dependent$$","20785fa1":"## Relationship","31d8ee95":"<font color = blue>**It makes sense ot have few records with lower education**<\/font>","c742eafa":"# Saving the File","8700ece8":"**Removing these outliers**","72fc9b85":"## Capital Loss","c76abf90":"\n\n*   Married-civ-spouse corresponds to a civilian spouse\n*   Married-AF-spouse is a spouse in the Armed Forces\n*   'Married-spouse-absent': persons whose spouse did not live in the same household\n\n\n\n","80f2a9d2":"<font color = green>**As of now, I am removing the relationship column**<\/font>","1cd0635e":"<font color = blue>**In US, in 1990s the discrimation used to be a lot at that time, so this might be the possibility that the percentage of White is much higher than the percentage of black and other races**<\/font>","7bcf5c53":"<font color = blue>**Since, the number of individuals from US is extrmely high so it would dominate the other values, hence it is better to merge all the other values in a single term**<\/font>","024084cd":"<font color = blue>**It kind of look like that the missing values in 'workclass' and 'occupation' columns are dependent on each other. Let's analyze them deeply**<\/font>","629fd5eb":"## Occupation","274115f0":"**Checking the count of each marital status**","97a8584f":"## Native Country","6042f2d8":"# Overview of the dataset","8b00c167":"**Checking number of rows and columns**","34391089":"<font color = blue>**It is better to convert it into categorical since all non zero values are just categorical**<\/font>","904b1a11":"<br>\n<h1 style = \"font-size:40px; font-family:monospace ; font-weight : bold; color : #3C0096; text-align: center; border-radius: 5px 25px;\">Table of Contents<\/h1>\n<br>","0e9a2503":"age: continuous.\n\nworkclass: Private, Self-emp-not-inc, Self-emp-inc, Federal-gov, Local-gov, State-gov, Without-pay, Never-worked.\n\nfnlwgt: continuous.\n\neducation: Bachelors, Some-college, 11th, HS-grad, Prof-school, Assoc-acdm, Assoc-voc, 9th, 7th-8th, 12th, Masters, 1st-4th, 10th, Doctorate, 5th-6th, Preschool.\n\neducation-num: continuous.\n\nmarital-status: Married-civ-spouse, Divorced, Never-married, Separated, Widowed, Married-spouse-absent, Married-AF-spouse.\n\noccupation: Tech-support, Craft-repair, Other-service, Sales, Exec-managerial, Prof-specialty, Handlers-cleaners, Machine-op-inspct, Adm-clerical, Farming-fishing, Transport-moving, Priv-house-serv, Protective-serv, Armed-Forces.\n\nrelationship: Wife, Own-child, Husband, Not-in-family, Other-relative, Unmarried.\n\nrace: White, Asian-Pac-Islander, Amer-Indian-Eskimo, Other, Black.\n\nsex: Female, Male.\n\ncapital-gain: continuous.\n\ncapital-loss: continuous.\n\nhours-per-week: continuous.\n\nnative-country: United-States, Cambodia, England, Puerto-Rico, Canada, Germany, Outlying-US(Guam-USVI-etc), India, Japan, Greece, South, China, Cuba, Iran, Honduras, Philippines, Italy, Poland, Jamaica, Vietnam, Mexico, Portugal, Ireland, France, Dominican-Republic, Laos, Ecuador, Taiwan, Haiti, Columbia, Hungary, Guatemala, Nicaragua, Scotland, Thailand, Yugoslavia, El-Salvador, Trinadad&Tobago, Peru, Hong, Holand-Netherlands.\n\nclass: >50K, <=50K\n\n","d72037d4":"## Capital Gain","6fd85812":"**Downloading my file to do bivariate and multivariate separately**","bce904d7":"# Univariate analysis of Numerical Columns","13848c70":"## fnlwgt","1434a072":"<font color = green>**But let's check this first using chi-square testing**<\/font>","b5600593":"<font color = green>**Conclusion:- It is better to remove the records having the age of > 65 as it won't affect our predictions and analysis much**<\/font>","ef356292":"## Hours-Per-Week","841f0afe":"**Checking in which categorical column ? is present**","4e4545a1":"<font color = blue>**In this case, it might be possible that the two variables are dependet since, the code only observes the pattern but since the values in the relationship column are totally at random since one person can have many different types of relations.**<\/font> ","6f32ef25":"<font color = blue>**So, here we can clearly see that 3 columns ,i.e., 'workclass', 'occupation', 'native-country' have missing values**<\/font>","8fc49949":"<font color = blue>**'?' indicates missing values which need to be replaced with relevant other values <br> But before that we should check whether they are at random or not.**<\/font>","1fc9e931":"**Looking at first five rows**","3bf0bd20":"## Marital-Status","1ae969f6":"<font color = blue>**No, doubt about this, since in 1990s women were not much allowed to do work other than households**<\/font>","edf307c7":"<font color = blue>**Since, there are very few records of 'Armed-Forces', 'Protective-serv' and 'Priv-house-serv' I am merging it in 'Other-sservice'**<\/font>","945cf066":"**Statistics of the numerical columns**","fdc8972d":"<font color = green>**It looks like all missing values of 'workclass' are dependent on 'occupation' but some values of 'occupation' are missing at random**<\/font>","96530a7a":"\n\n*   Machine-op-inspct : Machine Operator Inspector\n*   Exec-managerial : Executive Manager\n\n","2d7b007b":"## Race","423717dd":"<br>\n<h1 style = \"font-size:30px; font-family:Brush Script MT ; font-weight : bold; color : #0331A8; text-align: center; border-radius: 10px 10px;\">The End<\/h1>\n<br>","54dd6e04":"<font color = blue>**Visualizing the whole occupation data with a countplot**<\/font>","c910c6b9":"<font color = blue>**It can be seen that many of the columns have ? which means that they are missing values and should be imputed**<\/font>","3d97742b":"<font color = blue>**Imputing the null values with the most frequent values**<\/font>","ff375b66":"**Looking at the frequency table**","7de7a4a0":"<font color = blue>**From the above table we can clearly see that 9th, 10th, 11th and 12th can be grouped as 9th-12th.<br>\n1st-4th, 5th-6th and 7th-8th can be grouped as 1st-8th to keep the interval constant as 3.**<\/font>","b1ffcf3c":"**Statistics of the categorical columns**","1a45997b":"**Separating numerical and string columns**","6e094ea3":"## Income","dd206c6c":"## WorkClass","d086ec01":"<font color = blue>**According to the data description, educational-num is just the numerical representation of the education column**<\/font>","d9f79564":"<font color = blue>**Looking at the current situation since there are approx 47000 rows in the new dataframe so 2317 rows can be dropped since, I am unable to find the relationship of the missing values with the other columns**<\/font>","dd2fbd12":"<font color = blue>**Checking unique value in order to see whether there is a wrong or absured value in the column or not**<\/font","b0035c2b":"**Part 2:** [Bivariate\/Multivariate\/Encoding\/Scaling](https:\/\/www.kaggle.com\/gauravkumar008\/bivariate-multivariate-encoding-techniques)\n\n**Part 3:** [Machine Learning Implementation ](https:\/\/www.kaggle.com\/gauravkumar008\/predicting-adult-income)\n\n","3f15e14b":"**Top 10 native countries most number of workers belong to**","d20158c2":"##### Data Description\n##### Overview of the dataset\n##### Univariate analysis of Numerical Columns\n - Age\n - Educational Num and Education\n - Marital-Status\n - Occupation\n - Relationship\n - Race\n - Gender\n - Capital Gain\n - Capital Loss\n - Hours-Per-Week\n     - Outlier removal using Z-Score\n - Native Country\n - WorkClass\n - Income\n - Fnlwgt\n \n##### Same Operations on Test Data\n##### Saving the final file for Bivariate Analysis","df9c23ea":"<font color = blue>**In the dataset there are only 64 records of the Preschool, hence it is better not to include it at all, just delete it.**<\/font>","2018f90b":"<br>\n<h1 style = \"font-size:30px; font-weight : bold; color : #0331A8; text-align: center; \">**Do Upvote If you liked my Work**<\/h1>\n<br>\n","4c96c0a1":"<font color = blue>**It is better to merge widow in the category of separated as there are very few records of both and also makes sense, For my own sake of convenience, I am replacing Never-married with  Unmarried**<\/font>","e957897d":"### Outlier Analysis using Z-Score","e5eca963":"<font color = blue>**Someone's job or income is not decided by his\/her relationship with other, also in this column only one relationship has been provided which is also not complete information about the individual's relationship with others, so this column should be removed**<\/font>","43313fa2":"## Age","ce9868bf":"<font color = blue>**We can clearly see that most of the working adults are between the age of 20 - 45**<\/font>","f7847f4b":"<font color = red>**Let's go back to analysis of the records having lower education**<\/font>","61babc29":"**Note:- PLotly Visualizations might slow down your browser speed while viewing this notebook**","d36dcc2e":"<font color = blue>**92% haven't gained any capital**<\/font><br>\n<font color = blue>**Only 8% have gained any capital**<\/font>\n\n<font color = blue>\n** All those 8% records are outlers so if I delete them then lot of information will be lost, so it is better to convert it inot categorical values instead **\n<\/font>","57284d40":"<font color = blue>**Here also I am unable to find any relation of missing values and also since there are only 43 rows so it is better to remove them as it won't affect the distribution of data much**<\/font>","957e9054":"<font color =  blue> **Since, there are very large numbers of outliers so imputing them with median will create a lot of misinformation hence it will be better to use binning**<\/font>"}}