{"cell_type":{"abcf07e9":"code","909a4412":"code","679b1a80":"code","b55b6232":"code","4c096679":"code","3bba282c":"code","873f8aab":"code","48a7a55f":"code","4d3c1f73":"code","149eb4a3":"code","acb36d05":"code","46fbe97c":"code","ed48cbfa":"code","53a24d23":"code","dcfb8cf1":"code","507da86f":"code","96053cf2":"code","a6f48768":"code","fe183ffb":"code","89f8c993":"code","d42f08ed":"code","d7cfda60":"markdown","2952f230":"markdown","94521f42":"markdown","859c3a56":"markdown","b3548f6c":"markdown","cc4847cc":"markdown"},"source":{"abcf07e9":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQ90omapaHups-xWH58rKakVUn7L7xqXnHofup5r9r5qTtTQBRZ',width=400,height=400)","909a4412":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import feature_extraction, linear_model, model_selection, preprocessing\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","679b1a80":"df = pd.read_csv(\"..\/input\/corona-virus-brazil\/brazil_covid19.csv\")","b55b6232":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQkC9iamVdQ_s74piDOHvX4Fk5CBY6TpcNOCKMn6eman6OUDbFg',width=400,height=400)","4c096679":"df.head().style.background_gradient(cmap='summer')","3bba282c":"df.dtypes","873f8aab":"from wordcloud import WordCloud, STOPWORDS\nstopwords = set(STOPWORDS)\n\ndef show_wordcloud(data, title = None):\n    wordcloud = WordCloud(\n        background_color='green',\n        stopwords=stopwords,\n        max_words=200,\n        colormap='summer',\n        max_font_size=40, \n        scale=3,\n        random_state=1 # chosen at random by flipping a coin; it was heads\n).generate(str(data))\n\n    fig = plt.figure(1, figsize=(15, 15))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize=20)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wordcloud)\n    plt.show()\n\nshow_wordcloud(df['state'])","48a7a55f":"cnt_srs = df['suspects'].value_counts().head()\ntrace = go.Bar(\n    y=cnt_srs.index[::-1],\n    x=cnt_srs.values[::-1],\n    orientation = 'h',\n    marker=dict(\n        color=cnt_srs.values[::-1],\n        colorscale = 'Blues',\n        reversescale = True\n    ),\n)\n\nlayout = dict(\n    title='Suspects distribution',\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"suspects\")","4d3c1f73":"fig = px.pie( values=df.groupby(['suspects']).size().values,names=df.groupby(['suspects']).size().index)\nfig.update_layout(\n    title = \"Suspects\",\n    font=dict(\n        family=\"Arial, monospace\",\n        size=10,\n        color=\"#7f7f7f\"\n    )\n    )   \n    \npy.iplot(fig)","149eb4a3":"fig = px.histogram(df[df.suspects.notna()],x=\"suspects\",marginal=\"box\",nbins=10)\nfig.update_layout(\n    title = \"Suspects\",\n    xaxis_title=\"suspects\",\n    yaxis_title=\"Number of suspects\",\n    barmode=\"group\",\n    bargap=0.1,\n    xaxis = dict(\n        tickmode = 'linear',\n        tick0 = 0,\n        dtick = 10),\n    font=dict(\n        family=\"Arial, monospace\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n    )\npy.iplot(fig)","acb36d05":"fig = px.pie( values=df.groupby(['refuses']).size().values,names=df.groupby(['refuses']).size().index)\nfig.update_layout(\n    title = \"refuses  distribution \",\n    font=dict(\n        family=\"Arial, monospace\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n    )   \n    \npy.iplot(fig)","46fbe97c":"sns.countplot(df[\"suspects\"])\nplt.xticks(rotation=90)\nplt.show()","ed48cbfa":"cat = []\nnum = []\nfor col in df.columns:\n    if df[col].dtype=='O':\n        cat.append(col)\n    else:\n        num.append(col)  \n        \n        \nnum ","53a24d23":"plt.style.use('dark_background')\nfor col in df[num].drop(['suspects'],axis=1):\n    plt.figure(figsize=(8,5))\n    plt.plot(df[col].value_counts(),color='Blue')\n    plt.xlabel(col)\n    plt.ylabel('suspects')\n    plt.tight_layout()\n    plt.show()","dcfb8cf1":"df.corr()\nplt.figure(figsize=(10,4))\nsns.heatmap(df.corr(),annot=True,cmap='summer')\nplt.show()","507da86f":"df.plot.area(y=['suspects','refuses','cases'],alpha=0.4,figsize=(12, 6));","96053cf2":"sns.barplot(x=df['suspects'].value_counts().index,y=df['suspects'].value_counts())","a6f48768":"    plt.figure(figsize=(18,9))\n    sns.factorplot(x=col,y='suspects',data=df)\n    plt.tight_layout()\n    plt.show()","fe183ffb":"for col in df.columns:\n    plt.figure(figsize=(18,9))\n    sns.barplot(x=col,y='suspects',data=df)\n    sns.pointplot(x=col,y='suspects',data=df,color='Black')\n    plt.tight_layout()\n    plt.show()","89f8c993":"sns.pairplot(df)\nplt.show()","d42f08ed":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxISEhUSEBIVFRUVFRUVFRUVFhUVFRYVFRUWFhUVFRUYHSggGBolHRUVITEhJSkrLi4uGB8zODMtNygtLisBCgoKDg0OGhAQGjIlHyUtLSstLjAtLS0vLS0tLS0tLS0tLy01LS0tLS0vLS0tLS0tLS0tLSstLS0tLS0tLS0tLf\/AABEIAKgBLAMBIgACEQEDEQH\/xAAbAAADAAMBAQAAAAAAAAAAAAAAAQIDBAUGB\/\/EADoQAAICAQMCBAMGBAUEAwAAAAECAAMRBBIhMUEFEyJRYXGBBhQykaGxI0LR8DNSYsHhFUNyggei8f\/EABoBAAMBAQEBAAAAAAAAAAAAAAABAgMEBQb\/xAArEQACAgIBAwMDAwUAAAAAAAAAAQIRAyESBDFBE1FhInHwMpHRBUKhscH\/2gAMAwEAAhEDEQA\/APkYEeIhHNzisar8IwICOUTbHge0pVz0EUYgS2ygB7R7R7RCVKFbDA9o8D2gICMVseB7CVtHtFKgTbGqj2H5SgB7TJRWDnMyqi+31zmUoWQ5GttHsJn8lf8A9AiFXxEzIR06j49ZUY+5LkzGtajtn8o7VHBwAfkPzjIxxKK5+GP2luOhWzBtHsPygVHsJlwPYn9JQYd1GP1\/OTxC2a+wE4wJd1CjGMHPwxz3mZgByJl0dPmHZjqM554x34EfATk1s5xUe0W0ewluMHEkzNmlsnaPYSCB7CWZMRSbJwPaLaPaUYohpsggQIHtHEYirYtvwkFR7TIZBiHZJETCUZJiKsnHwkkS5MTKTEV+EnEqKIdgIxFmMRiKjEkSoxMcpTJErMZJQlSRKEYhgwhCMkoRxCZVpY\/D5\/0jJZl054P6TJEqYGPzjmsexmwgDCEoRlZl64znk\/D5RB+ef7ExwzCxUX5Z7c\/L+kkiUvHP5f1kwGhqex6Te0Wpfb5VKgEnJfoxGORknAE58IJkyipI3tRR1a4rnjAXbuJ\/9en1moaqz\/mT8nH16GRKI4PuYpKxxVd2ZNR4QyothtqwwDIMvvZSSobbt9IyCMtjp8s6viOialzWzKWBIO0PgEEgj1queh5GR8ZvabxFlTY1ddmFKIz7sqpYtj0kBgCSQGzgk9uIa\/WtfYbbUTJJLY34Ysc9Cx29+mJz8ZHUnBdzkEcZkzq0aMOCVVR2Iy3GemP77THf4Q4BK4Pwzz9JislScZM68mCMscZ40+2zmkiLM7vhXidaad6LMgs74zuKKLKthZ6x+PBUYHUFtwBxg3qvE6LfPZ12u9CBWVfS9gFTsrr2YOjqHHBB59zTmzJYo+554xTIhGef7MV2MnHST6j5VRo+nSxc1Ld1Xn7mGKOLM0OYRkmMxRMoUUZkmIoJUmUVxwYwYShEBGDAkoRyQY4ySsyxIEtYxDMYijBjEblVe0c9f9pUpHJGe35iPPw+om6Sowb2TmOPZ7c\/vEBGFhCUE9+BD0\/8\/wDEYiY1GTKNfxEEXnkiArJYxS3XPI+vzkGA0EIQiAunrk9O+YWdj75iPC\/r9IktBGCDgZOfYd\/pByS0wUW9okywpwePaSbQMe55+kxmwRco+5XCXsdDwqwBiD3HHzE6wGZxPDqS7ArjggnPw\/ed4Z64Hw7Ty+tUeaaZ7X9OlL02mvsYdToEf8SA9sjg\/mJxPGPDhXhkHHcZz9cz0PTqMTV8SOKmO3jBzn5HkfXEyx5JckrN82GPFtLZh0+i0rNShVd11dZQA3YDNp3Dead4BPnquAmOMg9pyPHNGKrQEBCuiWKpDBhuGGDK\/qX1KxAJJ2leT1mOrwuxq\/MXaQTYAu4b28pQ9m1O+FYHHX2Exa7RGlzWzIWUkMEYNtYHBBx3nWcF\/BicDAI+RmBhMoQn+x+0xOIQ9rH1Fupca1+9EkyYzFNDmFFHFAoIxEDAQAqMRQgIuBYDqYsz6Do3vr0Gnbwm+qs7XbWsLqKbxaGJUWGwhvLCgbQvByeDBugUbPn+8e4l7h7z6jVqdSv3a3QarT1aRkrs1d72acM97HdqfvSN\/EdySQEAx0AxOpoPFNJVQ76TAaw63XJpSakruqV\/KSq0spKjYu8VjHccYi5l+l8nxzcPeUDPqOnF9T6dtC2lr8N2VPfax0218gHUjUB\/4hfO5AgHHpAxziG0\/h99Wn0OEq+9WajVae3oa9+pZaKX7hXqTbz0IWPmS8XyfM67Mcgzap1AI9bfpx+k+raPw3SnV3m1tMra622mqpyA66UCyiuylApAd7EUgnHpXjkzz2qFNOnp8Rda\/MXTfdEp2rg62lrKbL3ToVVArc9SUlRyESwfJ5TUUGtUdwQtgLV5GCyg43AHt7Hv2mq+tbovA\/M\/nPqvh\/henSy2tzVU1dHhejW16arQLnQ2MSrjaWcFVLH3HtOP4l4J97qI0uh8tm8VdLUrQF9PWtaV7XZB6EzvfrtBPHaP1mJ9MjxDMTjJ5wOsmfTUqqubVrp9Kla+bqHq1T6VbdE9NSlTX5pGKQGRiCvBJnzCu1SO6n2PT85rDIpGM8bgZ9ucYI9sGY5kRccnoPr9JjmhkgBleYfc\/nJhEMrzD\/eJSNk9B+QmONG5Hzhddwq9IVhzmb\/2a1wpNuWClkTbl7KwWW6p8F6gWHpVu3PTvMVPh1rqXrrZkBI3AE8gAkcDsCCfbImJtDbsFhqPlno\/8p5K8HvyCPpMJuMvJ044zh4O\/rbtIyvStjYse63eUARLGc+TnowChSOB0vb6ebrOBjM3hqlAUFATjrx\/uJs6dq3HCrnuCBmcGTK1ao9bDg\/TK6fc52msIdTnuP3nX1N+0bjk\/wDMPIX\/ACr+Qi1Ve5CB1xOZyUmjsprk\/fZr\/wDUXYqK0LHn09ThQWJGPYAk+wE0PGfEN6qqghTyWI\/EQcYB7gH9ZvaLXrozY24m01hawh2lWZ1LEsVYKQoYYwc7iJq+JXae2pRW\/l7HtdamVzgWrWxqV1XBCurgE44YfGdsYJVrZ5cskpN70zTo8UsShqEJXc5YsPxYavy3TpkAgLnBHTHeV4x4p5+1m8zcAoO63fXwiqxRNoKbiu48nkmaCNg5EmzviUu9A4r0+Se77FV2gf3x9ZiciRJMtQSdmUs8pQUH2X\/RQhEZRkKEDFmAwEckRxDKzHJlQExiOSDKEZI8Tf8ABfDH1V9WnrwGtcICegz1Y47AZP0mhOv9lvGBo9QNQULlEtCAEDFj1sisc9huzGwXfZuW\/Y7Uq+qRlXfpWpUjkm1tRYK6RVgc7s5GccTYf7FWYsVNTpbL6lZ7dNXYWsVUHrAO3Y7rjlQTjHebnh3\/AMgPVptPX5Qe6i6km1j\/AIun0+9qqXPXKmxsHsPjMD\/aHRUm63QUagX3LYm6962Shbc+Z5IQZc4JALnj4ybkXUDS+z\/2Tt1dfmV2UVhrhp0FrOpsuZN4RdiMPwjqcCbGj+xOoetbFfThnF5SlrCLnXTsyWlBt2kAof5unM6f2R+21Oi0yU7dQXW6251TyhTfvQIqWlssFwozhZVn26rbSHRhLKq\/ui1qagismo8x3sx6uaHDBSpOfT05hcgShWzzQ8Av+5\/fsDyPM2dfUTyN4XHKbsrn34nQv+yeprsWg3Uefa9dTadb83K1uCBcoGMeoE4JxmdjUfbPRvXdpjpLE07adNPUyvutAqcPUXrZvLDbi7Fhk5PeZtP9tNIj6Qv951J09\/mefdXSt6VCtlWlSrk2eoqSWbtxHchcYe55PxDwrUaelWdsVWW3VhVckF9O4RyV6Y3dD8Jy8z0\/ifi2l1Gh09bvcl9H3ltoqVq7H1F3mE7\/ADAVGMDOPfieXlxZlNK9G1o\/5vl\/uJdjYE1arCpyP15mdby\/pO0ZHHAHPzl8tUZ19Vm5qNE1Y\/iWVK4XcaiX8wAjIBwpQNg52ls\/DPEyN4XaMrurNgBY0hj5oAGSMY2lgBkoGLfCbqeIljZatL+bYpWz1KaS7KQbPLNe7PJbG7GfhxIbWAWnUDT2C8ln\/GDSLWzmwLs3dSW27sZ744mPOXazq9ONXRxRYT7TPQpPbnnA9+xk06VgeVYYAOMc47Ta0qNvUkHr7GZZM0o2vg6sXTYpQUv7r\/wbOltqNSLZY9bV3WWAom5iHSgek7hhgae\/uJl8Z8QW4IVqVT\/EycHK79Tdaqhs4IxYO3XMzXvtUtjpFp7Lia1FOTauahjlxuK+njn1KROaM3LwdM8aj5OQwGOvSZvDmXePr+03tMt1gLJpywztz0G7uoz1b4Dmav8A1DH\/AGwCPz\/aJ3vRpzTUU32Opt9pM06PEAThht9jnidBTwSeZg0b2eV8dJNzk98H58Dmc9jOp9omzYB7KP3JnKnqwdxTPn8keM2l7hmJs55\/vMUDKJDHtIgYRDHu4x7yIxFEUBMUIoDFKEgShACo5IjjEVCKdPR3UDZvH8pD8f6iAR8cMDn\/AEAdzEFHPEc6h1OnI5UA7ixwqnIydqrhV49K5zgEMeM8xXWabDbRk\/xcZUj8Yyh\/9cbcfEmOxcR+XRt45YbAfUADuX1FSzjoQecY5HHeWdNTzgrnJwN4G705C53HbgjBz1OMHniDZTjAKbgF2Eq+3gKG8wY9RPqI4IH1iV6eT6eXXOQ34FA3bR1wx3YGQRgQAyjSUcesZypKKwOBjDAMeD6vjnA75zMdWkQ7uc4NmSHGFCjKkKRl8\/rLpbT5xhduWK7s5wKxt3Hpksee2VPYyh92IXoDsGfxgeYQpwf9OcjI7MfYGAqJv0dao5DEsGwAGUjYSwVjgcngH6iFXhgOnOo81eHVCgDFhuJGWPQcAnAzxFatHlnhfMx0UvtByPwknngjjno2McZx0+IAU+QUypuW1iGwSFXbsHBx1PP6R2LRvHwNSKmr1CFLWZAzq1eGXAPp5LZyAMd5zdbp\/LsevOdjsmcYztJGcduk6Gt8ZR7abFpZBSUxX5gZdqMGCqNg25wck5zmc3VX+ZY9hGN7s+P\/ACYnr36wbdDSi2BoYKrFTtckKcHDFcbgp7kbh+czV+G3Nv21WHyyVfCN6GX8QbjgjByO07NPitS1Im7J09dd1IwSDqT5jOp+Ae2onsRQR3E2jqabbHNtlLUsWtX1ONRXdZQm41rjD5sABByOCcr1kc2a+nE018SwANpOABnPXHGekz6XWB+Oh9vf5TjiZdL+Nf8AyH7zhlFNs9eGsSlfmqO6gAJOOowT37f0EoJnpzImNDcQzoilVJXLMq8gZIG5huOOcDMzSc2VJxxrWitQoKsAMnB+HMseOIq4AYWU0oKDj8NrVCu\/PwydwPvWPea9tt6ILHpGwhTng8OMoWwcrkdM4zNU+JZP+Gv6mawUomM+ORo3tfqdNe6neqBDZhbUtatltse448r1Bg1rLjgEInPacjXNWbHNKlayx2Kckhe2ckn9T85nfWYP+Gs26PLcZCj48DIhLJXgFhf4jjGdx9WERGxncMHp7ZlLp1P8q\/kJh8XAVOeFUjHx+UiLUnRtmm65PwjgeIeZa7MFJA4G1SQq9Rkge3vNJqmABIOD0ODg\/I956Lwa8vp768sX82uwKuoXTkhksRzluHAwmV+Ik68vbp99zbDWlaoBej1W7MVACgMTXYF5JHp9LcLnnvTrR47gntnndslhM9T4IP8AeJLjkj5xc3dGjwR9Pmnu6r\/RrxRxEyzmFFHETAYoswizEUhCVIEoQGyo4jGIyWOOTHGIqEUYgIrMciPMBFZjzFCMRUeZGY8wFRWY8ycwjEXmXTbtYNgHHOD0+sxZlCS6RceTOiPFB3pT\/wC2MfLP+87OmqRlVwoGQD1JwZxf+haj04qJ3mtVAZGO60BqwwDejcCCN2Jtrffp\/LqsrAzypPqDKWP4WQ7TzkZBPSc+XGpL6TswZZQlc9o7iqP5pj0rV7mW+xPJL7mqdHLEYA30Oo9L44\/EBwN2ROc\/ibE52j9Zsae9bBhgMjsefqJyxuHg9CceaV69g8T8QBUJWq4ajTV2P6t7GpEypy20AMg\/CBnaOT35E76adOm1efgIvuK\/5B9BKeVPwTDG4STvts4q8gDPfvOj4LTkvjnAz8OPjNTW+IUJlVQOw7\/yA\/Tr9JytZ4iXPpGxcD0g8Z7\/AD79ZtDDyWzLqeuvUUtPx+dj1Go1BQ\/gJ+OfgP6zkfaDUNgVtW6HO71grnt6QRyOes4nUGex+0Nw1SFaCXdm09ti2Wg4NlC7TQDgKN1pVxkkMF7dKjijB6OaWaWSNPsePZCODwR2I5+snBnW+05P3ly2NxSguAQcWHT1G1SRxkPuB+U06rPTzngHjsc9Pr\/SVObSui+n6eOWXGUq1+fyabMRFvMtxxMM0WzllafcCYoMPeIyiAizAxbsdIhoRjWzHYfUA\/vJYY4MURQAxiTHEMoGOSIwYxUWISY8xklRxQgIqEmOAiowZMBGIqOTDMYUVHmTHAVDzL7THAGJqyoumeyp8erXV17BWtZOj863LkuKKquDk4UBl52gZ2jmcjxLWIRQaQi1rXxQN38F8\/xASSS25vUGz0wP5Zxd06vh3hDP6nO1e3ufp2EzaUVbZtFubpIyJ6gGGBkdOnftmbXhtZ8wfI89uh7zeTRVgBducfE5\/eZK9LWCCoIPzJH6zjc4bo9R+pJR5LtoykAfzCc37Q+Isla1VkYcEsw64yRs68CbPiC+hv77ia1Hh9dmnL7HutV2Hl12KjrUFB80IVY2DdkEL06nqMV06V2YdZbio2eWinZ1GnoqRBYLXtepLSUZErTzU31rgoxc7WUnkdcDpmcudnI4PSMQMC3ym1bSAM89uvQ5HaajjEmM1PaNc\/T5OnfGQ98PMkZil0jDkyzZIhiKHYG7KK8Z95GYGKAARJMckxFIIo4sxDDMciVAYxHJjgIvdAGRKBjFRQjkiOMmioRZhGIrMMxQzEBQhFDMBDjizDMYDzHgyZ6z7O+EV20i2ypmX7wa7LRaKloqCVMbW3Aq2DYeD1wB3kt0VGPI5nguhXO+3AA\/CpI5PuR7fvPQeev+YfmJptWn3dbFRrgw\/iXhwoosLlQj07SVUqFOWPO\/g8YnNABGRyPec2aLk7Z6HSyjH6V3fk73mr\/mH5iXmeexN3w2852dj0+E5nDWjvkpw\/WvLX7HQ11yipy54xgcZJPYCcHQ+LojrY1Ad62V6z5jptKnI3BfxDPPY\/HEPtJqwSKh\/Ly3zI4H5fvOJmdmGFR2eT1OW8lLsjuN4wlgH3mgWsuQrrY1TbclgjAAhlBY44BA4zjGOVmYIprxMOZutfkHjk4yc+3wmtbMcIowUexrm6iebcwhFFLMBkxZiiJiHRQkEwzMg07YyQBnpuKrn5ZMBpGKEqysrwRj++3vIMRVBJjizEAhGIoQGUJUgGOMRUIo4CHmMGTDMYqLjBkZjzAVFgwkx5jFRUJOY8wAccnMcBDzOz4b40akRAisq2Ws6sTttS6uut6nA\/lxX17Eg9QJxYRNWVF0dqjxKutHFVGLHqalrDaWXY+N5Fe0eogdSxA6gdMaVF205\/TOJpQkuFmkMzhJSXdHbpuD9Bg9x\/uJjv1hr\/B+LHX2z7D35mDwrxBaQ525ZtoX2HXOf0\/KaNthYlmOSTkn4mQsS5djfL1mScFGUvN\/YTNnk9YoswmxxDhmTDMBjizDMWYBQQzFmLMQ6GTE3Hx+UUIFG94VSGLsf+3U7jpyyrlQc\/U\/SS4QAM4JL5IwxJxnBJOeuQR9JPh2pCFg34bK3rJ9tw4b6HH0zLddoAetmHO07sjnrtK9R\/fvEV4NjT6dXL1BcHYHQ7sglimzgjjO8Z595x8zpjUCvc+1g7LsG5hwMrghQowBtGPkPpzNpxnt0iGImZEoJGRj85jgDAQQhCABGDCEAHAGOEYgjihAQ4QhABxgwhGIeYQhAQR5hCABmGYQgAZhCEBBmGYQgMIswhAAzAmEIDFmImEIAKEUIhjzFCEAFLR2AO0kDvgkDn3xFCIoxmEIQAIQhAZ\/\/9k=',width=400,height=400)","d7cfda60":"g1.globo.com","2952f230":"#Codes from Helder X. Peixoto https:\/\/www.kaggle.com\/helderxpp\/covid-19-south-korea-interactive-with-plotly\u00b6","94521f42":"Kaggle Notebook Runner: Mar\u00edlia Prata @mpwolke","859c3a56":"#Codes from https:\/\/www.kaggle.com\/thorgodofthunder\/house-price-regression-eda-model","b3548f6c":"facebook.com","cc4847cc":"Brazilian researchers sequence the genome of the coronavirus identified in the country\n\nThe work was conducted by scientists from the Adolfo Lutz Institute, the Institute of Tropical Medicine at the USP School of Medicine and the University of Oxford. They are part of a project called Cadde, supported by Fapesp and the Medical Research Centers, from the United Kingdom, which develops new techniques to monitor epidemics in real time.\n\nIn just 48 hours since the confirmation of the first Brazilian case of infection with the new coronavirus, Brazilian researchers were able to sequence the genome of the virus that arrived in the country. https:\/\/istoe.com.br\/pesquisadores-brasileiros-sequenciam-genoma-do-coronavirus-identificado-no-pais\/"}}