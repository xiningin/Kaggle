{"cell_type":{"02e31fa2":"code","ebd2bd23":"code","5ec9254f":"code","6513f95d":"code","1839e02c":"code","dbff3112":"code","7ef93f01":"code","14dfde4c":"code","6926ca16":"code","c4f59e62":"code","af34255f":"code","bc499650":"code","c06d6861":"code","2c731c88":"code","3afa99e7":"code","26676b8d":"code","75d9eb97":"code","0220a530":"code","24389e54":"code","26a01bc6":"code","46f78d9e":"code","39c16d30":"code","c0a9ea3f":"code","0629ec6a":"code","bf3c9d6d":"code","c5e0dffb":"code","dc9a71af":"code","7e6c8fcf":"code","aeef9be3":"code","0fe61b0a":"code","c4955bc1":"code","89709a44":"code","7d51ae29":"code","38014403":"code","a5f27eaa":"code","ea30cbbf":"code","8955eb06":"code","8517ee40":"code","c213b822":"code","98b077ca":"code","a6ec628f":"markdown","4f3676a8":"markdown","e3401afe":"markdown","72480893":"markdown","7db1b23e":"markdown","668a882a":"markdown","5ce38198":"markdown","3d3c9dfb":"markdown","c233b578":"markdown","5fe95a51":"markdown","963916b5":"markdown","dd9dabba":"markdown","8e99122f":"markdown","3d11b96b":"markdown","7d46fb33":"markdown","023395e5":"markdown","d09eb3ff":"markdown","057cd844":"markdown"},"source":{"02e31fa2":"# \ub370\uc774\ud130 \ucc98\ub9ac \ud328\ud0a4\uc9c0 \nimport pandas as pd\nimport numpy as np\n\n# \ub370\uc774\ud130 \uc2dc\uac01\ud654 \ud328\ud0a4\uc9c0 \nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\n# \ud1b5\uacc4 \ubd84\uc11d \ud328\ud0a4\uc9c0\nfrom scipy import stats\nfrom scipy.stats import shapiro\nmatplotlib.rc(\"font\",family=\"Malgun Gothic\") \nmatplotlib.rc(\"axes\",unicode_minus=False) ","ebd2bd23":"import warnings\nwarnings.filterwarnings('ignore') # \uacbd\uace0\uba54\uc2dc\uc9c0 \ubb34\uc2dc","5ec9254f":"train = pd.read_csv('..\/input\/posmlstudy2\/train.csv')\ntest = pd.read_csv('..\/input\/posmlstudy2\/test.csv')\nsubmission = pd.read_csv('..\/input\/posmlstudy2\/sample_submission.csv')","6513f95d":"# \ub370\uc774\ud130 \uad6c\uc131 \ud655\uc778 \ndisplay(train) \ndisplay(test)\n# \ub370\uc774\ud130 \ud589\ub82c\uc218 \ud655\uc778 : train data 2442 rows \u00d7 32 columns, test data 500 rows \u00d7 31 columns\ndisplay(train.shape)\ndisplay(test.shape)","1839e02c":"# \ub370\uc774\ud130 \uc720\ud615 \ud655\uc778 \ndisplay(train.info()) \n# null\uac12 \ud655\uc778\ndisplay(train.isnull().sum())","dbff3112":"# 1) \uc218\uce58\ud615 \ubcc0\uc218 - \uc694\uc57d \ud1b5\uacc4\ub7c9 : \ub370\uc774\ud130 \uc911\uc559\uac12, \ud3c9\uade0, Q1, Q2, Q3 \ub4f1 \ud655\uc778\ud558\uc5ec \ub370\uc774\ud130 \ud615\ud0dc \ubc0f \ubd84\ud3ec \ud655\uc778.\n\ndisplay(train.describe().round(2)) \n\n# id: \ubc95\uc815\ub3d9 \ucf54\ub4dc(\uace0\uc720\uac12)\n# population : \uc778\uad6c \uc218\n# gross_area : \uba74\uc801\n# jojung : \uc870\uc815\uc9c0\uc5ed \uc5ec\ubd80 (1-\ud574\ub2f9, 0-\ubbf8\ud574\ub2f9)  \n# tugi : \ud22c\uae30\uc9c0\uc5ed \uc5ec\ubd80 (1-\ud574\ub2f9, 0-\ubbf8\ud574\ub2f9)\n# newcommer_1yr : \uc2dc\uad70\uad6c \ub2e8\uc704 \ucd5c\uadfc 1\ub144\uac04 \uc21c \uc804\uc785\ub7c9\n# brand_apt : \ube0c\ub79c\ub4dc \uc544\ud30c\ud2b8 \uc218        \n# apt_age :  \uc544\ud30c\ud2b8 \ud3c9\uade0 \uc5f0\uc2dd     \n# compet_rate_1yr : \ucd5c\uadfc 1\ub144\uac04 \ud3c9\uade0 \uccad\uc57d \uacbd\uc7c1\ub960\n# unsold : \ubbf8\ubd84\uc591 \uc218      \n# trade_6m  :  \ucd5c\uadfc 6\uac1c\uc6d4\uac04 \ub9e4\ub9e4 \uac70\ub798 \uc218\n# rent_6m  :  \ucd5c\uadfc 6\uac1c\uc6d4\uac04 \uc804\uc6d4\uc138 \uac70\ub798 \uc218\n# elemen_school : \ucd08\ub4f1\ud559\uad50 \uc218\n# middle_school : \uc77c\ubc18 \uc911\ud559\uad50 \uc218  \n# high_school : \uc77c\ubc18 \uace0\ub4f1\ud559\uad50 \uc218      \n# special_school : \ud2b9\ubaa9\uc911, \ud2b9\ubaa9\uace0 \uc218\n# academy : \ud559\uc6d0 \uc218       \n# kindergarten : \uc5b4\ub9b0\uc774\uc9d1 \uc218    \n# museum  :  \ubc15\ubb3c\uad00 \uc218         \n# pharmacy :  \uc57d\uad6d \uc218     \n# doctor :  \uc758\uc0ac \uc218          \n# motel : \ubaa8\ud154 \uc218          \n# industry  : \uc0b0\uc5c5\ub2e8\uc9c0 \uc218\n# commerce : \uc0c1\uac00 \uc218 (\uc74c\uc2dd, \uc5ec\uac00, \uc18c\ub9e4 \ub4f1)           \n# starbucks : \uc2a4\ud0c0\ubc85\uc2a4 \uc218       \n# real_estate : \ubd80\ub3d9\uc0b0 \uc218  \n# subway : \uc9c0\ud558\ucca0 \uc5ed \uc218           \n# expressway : \uace0\uc18d\ub3c4\ub85c \ucd9c\uc785\ub85c(IC)\uc218\n# price : \ud3c9\ub2f9 \ud3c9\uade0 \ub9e4\ub9e4\uac00\uaca9\n\n# 2) \ubc94\uc8fc\ud615 \ubcc0\uc218 - \uc694\uc57d \ud1b5\uacc4\ub7c9 \ndisplay(train.describe(include=[object]))\n\n# address : \uc9c0\uc5ed\uba85\n# sido : \uc2dc\/\ub3c4\n# sigungu : \uc2dc\/\uad70\/\uad6c","7ef93f01":"# 1) \uc5f0\uc18d\ud615 \ub370\uc774\ud130 \ubd84\ud3ec \ud655\uc778 \nbinwidth = 10\ntrain.hist(figsize=(25,25))","14dfde4c":"# 2) \ubc94\uc8fc\ud615 \n\n# \ubc94\uc8fc\ud615 \ubcc0\uc218 \ube48\ub3c4\uc218 \ub3c4\ucd9c \ndisplay(train['address'].value_counts()) \ndisplay(train['sido'].value_counts()) \ndisplay(train['sigungu'].value_counts())\n\n# pie chart \uc0dd\uc131\ndf_count = train.groupby(['sido']).size() \n# pie(\ub370\uc774\ud130,labels=\ub808\uc774\ube14  \ubcc0\uc218 \uc9c0\uc815,autopct=\ube44\uc728 %\ub85c \ud45c\uc2dc(%.1f%%: \uc18c\uc218\uc810 1\uc790\ub9ac \uc801\uc6a9)\ndisplay(df_count.plot.pie(y = \"sido\", autopct=\"%.1f%%\"))","6926ca16":"# \ubc94\uc8fc\ud615 \ubcc0\uc218 \uc22b\uc790 \ubcc0\ud658 \ucc98\ub9ac \nsido_dict = {'\uc11c\uc6b8': 0, '\uc778\ucc9c': 1, '\ub300\uc804': 2, '\uad11\uc8fc': 3, '\ub300\uad6c': 4, '\uc6b8\uc0b0': 5,\n             '\ubd80\uc0b0': 6, '\uc138\uc885': 7, '\uc81c\uc8fc': 8, '\uacbd\uae30': 9, '\uac15\uc6d0': 10, '\ucda9\ubd81': 11,\n             '\ucda9\ub0a8': 12, '\uacbd\ubd81': 13, '\uacbd\ub0a8': 14, '\uc804\ubd81': 15, '\uc804\ub0a8':16}\n\n# \ubc94\uc8fc\ud615 \ubcc0\uc218 \uc22b\uc790 \ubcc0\ud658 \ucc98\ub9ac : 5\uac1c \uc9c0\uc5ed\uad8c\uc73c\ub85c \ud074\ub7ec\uc2a4\ud130\ub9c1\n\"\"\"sido_dict = {'\uc11c\uc6b8': 0, \n             '\uacbd\uae30': 1,\n             '\uc778\ucc9c': 2, '\ub300\uc804': 2, '\uad11\uc8fc': 2, '\ub300\uad6c': 2, '\uc6b8\uc0b0': 2, '\ubd80\uc0b0': 2, \n             '\uc138\uc885': 3, '\uc81c\uc8fc': 3,  \n             '\uac15\uc6d0': 4, '\ucda9\ubd81': 4, '\ucda9\ub0a8': 4, '\uacbd\ubd81': 4, '\uacbd\ub0a8': 4, '\uc804\ubd81': 4, '\uc804\ub0a8':4}\"\"\" \n\ntrain['sido'] = train['sido'].map(sido_dict)\ntest['sido'] = test['sido'].map(sido_dict)\n\n\n# pie chart \uc0dd\uc131\ndf_count = train.groupby(['sido']).size() \n# pie(\ub370\uc774\ud130,labels=\ub808\uc774\ube14  \ubcc0\uc218 \uc9c0\uc815,autopct=\ube44\uc728 %\ub85c \ud45c\uc2dc(%.1f%%: \uc18c\uc218\uc810 1\uc790\ub9ac \uc801\uc6a9)\ndisplay(df_count.plot.pie(y = \"sido\", autopct=\"%.1f%%\"))","c4f59e62":"# \ubd88\ud544\uc694 \ubcc0\uc218 \uc81c\uac70 \ntrain = train.drop(['id', 'address', 'sigungu'], axis=1)\ntest = test.drop(['id', 'address', 'sigungu'], axis=1)\n\n# \ud30c\uc0dd\ubcc0\uc218 \uc0dd\uc131\n# \ucd1d \ud559\uad50 \uc218\ntrain['schools'] = train['elemen_school'] + train['middle_school'] + train['high_school'] + train['special_school'] \ntest['schools'] = test['elemen_school'] + test['middle_school'] + test['high_school'] + test['special_school']\n\n# \uc778\uad6c\ub300\ube44 \ud559\uad50 \uc218\ntrain['schools_ratio'] = train['schools']\/train['population'] \ntest['schools_ratio'] = test['schools']\/test['population'] \n \n# \uc2e0\uaddc\uc804\uc785\uc778\uad6c \ube44\uc728\ntrain['newcommer_ratio'] = train['newcommer_1yr']\/train['population'] \ntest['newcommer_ratio'] = test['newcommer_1yr']\/test['population'] \n\n# \ubc95\uc815\ub3d9\ubcc4 \uba74\uc801 \ub300\ube44 \uc778\uad6c \ube44\uc728 \ntrain['population_ratio'] = train['population']\/train['gross_area']\ntest['population_ratio'] = test['population']\/test['gross_area']\n\n\n# \ud45c\uc900\ud654 \ud568\uc218 \nfrom sklearn.preprocessing import scale,minmax_scale,robust_scale\n\n#\ubc95\uc815\ub3d9\ubcc4 \uba74\uc801 \ub300\ube44 \uc0c1\uad8c \ube44\uc728 (\uc0c1\ub300 \ube44\uad50\ub97c \uc704\ud574\uc11c \ubc95\uc815\ub3d9\ubcc4 \uba74\uc801 scaling \ucc98\ub9ac)\ntrain['gross_area_minmax']=minmax_scale(train.gross_area)\ntrain['commerce_density']=train['commerce']\/train['gross_area_minmax']\n\ntest['gross_area_minmax']=minmax_scale(test.gross_area)\ntest['commerce_density']=test['commerce']\/test['gross_area_minmax']","af34255f":"# 3. \ud30c\uc0dd\ubcc0\uc218 \uc0dd\uc131 - \uc774\ud638\ub3d9 \n\n# \uc11c\uc6b8\/ \uacbd\uae30\uc758 resolution\ud5a5\uc0c1\uc744 \uc704\ud55c \ud30c\uc0dd\ubcc0\uc218\n \n# \ud55c\uac15 \uc720\ubb34 \n# address \ud544\ub4dc split\n'''train[['address_1', 'address_2', 'address_3']] = train['address'].str.rpartition(sep=' ')\ntest[['address_1', 'address_2', 'address_3']] = test['address'].str.rpartition(sep=' ')\n#train = train.drop(['address_2'], axis=1)\n#test = test.drop(['address_2'], axis=1)\n\n# \ud544\ub4dc\uba85 \ubcc0\uacbd\ntrain = train.rename(columns = {'address_3':'dong'})\ntest = test.rename(columns = {'address_3':'dong'})\n\ntrain['is_seoul'] = train['sido_han'] == '\uc11c\uc6b8'\ntest['is_seoul'] = test['sido_han'] == '\uc11c\uc6b8'\n\nhangang_list = ['\uc131\uc218\ub3d91\uac00','\uc774\ucd0c\ub3d9','\uacf5\ub355\ub3d9','\uc11c\uad50\ub3d9','\ud55c\uac15\ub85c3\uac00','\ubaa9\ub3d9','\ub2f9\uc0b0\ub3d9','\ubaa9\ub3d9','\ud751\uc11d\ub3d9','\ubc18\ud3ec\ub3d9','\uc7a0\uc6d0\ub3d9','\uc2e0\uc0ac\ub3d9','\uc555\uad6c\uc815\ub3d9','\uccad\ub2f4\ub3d9','\uc7a0\uc2e4\ub3d9','\ud55c\ub0a8\ub3d9','\uc6a9\uac15\ub3d9','\uc2e0\uc218\ub3d9','\ub3c4\ud654\ub3d9', '\uc6d0\ud6a8\ub85c2\ub3d9','\ud569\uc815\ub3d9','\ub9dd\uc6d01\ub3d9']\ntrain['is_hangang']=train['dong'].isin(['\uc131\uc218\ub3d91\uac00','\uc774\ucd0c\ub3d9','\uacf5\ub355\ub3d9','\uc11c\uad50\ub3d9','\ud55c\uac15\ub85c3\uac00','\ubaa9\ub3d9','\ub2f9\uc0b0\ub3d9','\ubaa9\ub3d9','\ud751\uc11d\ub3d9','\ubc18\ud3ec\ub3d9','\uc7a0\uc6d0\ub3d9','\uc2e0\uc0ac\ub3d9','\uc555\uad6c\uc815\ub3d9','\uccad\ub2f4\ub3d9','\uc7a0\uc2e4\ub3d9','\ud55c\ub0a8\ub3d9','\uc6a9\uac15\ub3d9','\uc2e0\uc218\ub3d9','\ub3c4\ud654\ub3d9', '\uc6d0\ud6a8\ub85c2\ub3d9','\ud569\uc815\ub3d9','\ub9dd\uc6d01\ub3d9']).astype(int)\ntest['is_hangang']=test['dong'].isin(['\uc131\uc218\ub3d91\uac00','\uc774\ucd0c\ub3d9','\uacf5\ub355\ub3d9','\uc11c\uad50\ub3d9','\ud55c\uac15\ub85c3\uac00','\ubaa9\ub3d9','\ub2f9\uc0b0\ub3d9','\ubaa9\ub3d9','\ud751\uc11d\ub3d9','\ubc18\ud3ec\ub3d9','\uc7a0\uc6d0\ub3d9','\uc2e0\uc0ac\ub3d9','\uc555\uad6c\uc815\ub3d9','\uccad\ub2f4\ub3d9','\uc7a0\uc2e4\ub3d9','\ud55c\ub0a8\ub3d9','\uc6a9\uac15\ub3d9','\uc2e0\uc218\ub3d9','\ub3c4\ud654\ub3d9', '\uc6d0\ud6a8\ub85c2\ub3d9','\ud569\uc815\ub3d9','\ub9dd\uc6d01\ub3d9']).astype(int)\n\n# \ud55c\uac15 \uc778\uc811 \ub3d9 \ubcc0\uc218 \ucd94\uac00 'hangang'\ntrain['hangang'] = (train['is_seoul']==True) & (train['is_hangang']==1)\ntest['hangang'] = (test['is_seoul']==True) & (test['is_hangang']==1)\n\n# \ubd88\ud544\uc694 \ubcc0\uc218 \uc81c\uac70 \ntrain = train.drop(['id', 'address', 'sigungu','address_1','address_2','dong'], axis=1)\ntest = test.drop(['id', 'address', 'sigungu','address_1','address_2','dong'], axis=1)\n\n'''","bc499650":"# 2. \ud30c\uc0dd\ubcc0\uc218 \uc0dd\uc131 - \ucd5c\uc601\ub300 \n'''\n#  \ube0c\ub79c\ub4dc \uc544\ud30c\ud2b8 \ubc00\uc9d1\ub3c4 (\ube0c\ub79c\ud2b8 \uc544\ud30c\ud2b8\/\uba74\uc801)\ntrain['brand_apt_ratio'] = train['brand_apt']\/train['gross_area']\ntest['brand_apt_ratio'] = test['brand_apt']\/test['gross_area']\n\n#  \ubbf8\ubd84\uc591\ub960 (\ubbf8\ubd84\uc591\uc218\/\uc778\uad6c)\ntrain['unsold_ratio'] = train['unsold']\/train['population']\ntest['unsold_ratio'] = test['unsold']\/test['population']\n\n#  \ub9e4\ub9e4 \uac70\ub798\ub960 (6\uac1c\uc6d4 \ub9e4\ub9e4\uac70\ub798\uac74\uc218\/\uc778\uad6c)\ntrain['trade_6m_ratio'] = train['trade_6m']\/train['population']\ntest['trade_6m_ratio'] = test['trade_6m']\/test['population']\n\n#  \uc804\uc6d4\uc138 \uac70\ub798\ub960 (6\uac1c\uc6d4 \uc804\uc6d4\uc138\uac70\ub798\uac74\uc218\/\uc778\uad6c)\ntrain['rent_6m_ratio'] = train['rent_6m']\/train['population']\ntest['rent_6m_ratio'] = test['rent_6m']\/test['population']\n\n#  \ud559\uad50 \ubc00\uc9d1\ub3c4 (\ud559\uad50 \ud569\uacc4\/\uba74\uc801)\ntrain['schools_ratio'] = train['schools']\/train['gross_area']\ntest['schools_ratio'] = test['schools']\/test['gross_area']\n\n#  \ud559\uc6d0 \ubc00\uc9d1\ub3c4 (\ud559\uc6d0 \ud569\uacc4\/\uba74\uc801)\ntrain['academy_ratio'] = train['academy']\/train['gross_area']\ntest['academy_ratio'] = test['academy']\/test['gross_area']\n\n#  \uc720\uce58\uc6d0 \ubc00\uc9d1\ub3c4 (\uc720\uce58\uc6d0 \ud569\uacc4\/\uba74\uc801) \ntrain['kindergarten_ratio'] = train['kindergarten']\/train['gross_area']\ntest['kindergarten_ratio'] = test['kindergarten']\/test['gross_area']\n\n# \ubc15\ubb3c\uad00 \ubc00\uc9d1\ub3c4 (\ubc15\ubb3c\uad00 \ud569\uacc4\/\uba74\uc801)\ntrain['museum_ratio'] = train['museum']\/train['gross_area']\ntest['museum_ratio'] = test['museum']\/test['gross_area']\n\n# \uc758\ub8cc\uc11c\ube44\uc2a4 \ubc00\uc9d1\ub3c4 (\uc57d\uad6d+\ubcd1\uc6d0)\/\uba74\uc801\ntrain['medicals'] = train['pharmacy'] + train['doctor']\ntest['medicals'] = test['pharmacy'] + test['doctor']\n\ntrain['medicals_ratio'] = train['medicals']\/train['gross_area']\ntest['medicals_ratio'] = test['medicals']\/test['gross_area']\n\n# \ubaa8\ud154 \ubc00\uc9d1\ub3c4 (\ubaa8\ud154 \ud569\uacc4\/\uba74\uc801)\ntrain['motel_ratio'] = train['motel']\/train['gross_area']\ntest['motel_ratio'] = test['motel']\/test['gross_area']\n\n#  \uc0b0\uc5c5\ub2e8\uc9c0 \ubc00\uc9d1\ub3c4 (\uc0b0\uc5c5\ub2e8\uc9c0 \ud569\uacc4\/\uba74\uc801)\ntrain['industry_ratio'] = train['industry']\/train['gross_area']\ntest['industry_ratio'] = test['industry']\/test['gross_area']\n\n#  \uc2a4\ud0c0\ubc85\uc2a4 \ubc00\uc9d1\ub3c4 (\uc2a4\ud0c0\ubc85\uc2a4 \ud569\uacc4\/\uba74\uc801)\ntrain['starbucks_ratio'] = train['starbucks']\/train['gross_area']\ntest['starbucks_ratio'] = test['starbucks']\/test['gross_area']\n\n# \ubd80\ub3d9\uc0b0 \ubc00\uc9d1\ub3c4 (\ubd80\ub3d9\uc0b0 \ud569\uacc4\/\uba74\uc801)\ntrain['real_estate_ratio'] = train['real_estate']\/train['gross_area']\ntest['real_estate_ratio'] = test['real_estate']\/test['gross_area']\n\n# \uc9c0\ud558\ucca0 \ubc00\uc9d1\ub3c4 (\uc9c0\ud558\ucca0 \ud569\uacc4\/\uba74\uc801)\ntrain['subway_ratio'] = train['subway']\/train['gross_area']\ntest['subway_ratio'] = test['subway']\/test['gross_area']\n\n#  \uace0\uc18d\ub3c4\ub85c \ubc00\uc9d1\ub3c4 (\uace0\uc18d\ub3c4\ub85c \ud569\uacc4\/\uba74\uc801)\ntrain['expressway_ratio'] = train['expressway']\/train['gross_area']\ntest['expressway_ratio'] = test['expressway']\/test['gross_area'] \n'''","c06d6861":"display(train)   \ndisplay(test)   \ndisplay(train.info())\ndisplay(test.info())","2c731c88":"# \uc5f0\uc18d\ud615 \ubcc0\uc218 \ud655\uc778 : \ubaa8\ub450 \uc218\uce58\ud615\uc73c\ub85c \ubcc0\uacbd \uc644\ub8cc \ud568.\ntrain_num= train.select_dtypes(include = [\"int\",\"float\"])\ntrain_num.columns","3afa99e7":"# \ubc94\uc8fc\ud615 \ubcc0\uc218 \ud655\uc778 : \uae30\uc874 \uc2dc\ub3c4 \ubcc0\uc218\ub97c \uc81c\uc678\ud55c \ubc94\uc8fc\ud615 \ubcc0\uc218\ub294 \uc81c\uc678\ud558\uc600\uace0, \uc2dc\ub3c4\ub3c4 \uc22b\uc790\ub85c \ubcc0\uacbd \uc644\ub8cc\ud558\uc600\uc74c.\ntrain_char = train.select_dtypes(include = \"object\")\ntrain_char.columns","26676b8d":"# 0. graph \ubd84\uc11d \n\n# \uc2dc\ub3c4\ubcc4 prices \ndisplay(train.boxplot(column='price',by=['sido'],figsize=(25,5)))  \n# \uc2dc\ub3c4\ubcc4 \uc544\ud30c\ud2b8 \uc5f0\uc2dd \ndisplay(train.boxplot(column='apt_age',by=['sido'],figsize=(25,5)))","75d9eb97":"#1. scattor plot \uc0dd\uc131\n\nsns.pairplot(train,y_vars=['price'],x_vars=['sido', 'population', 'gross_area', 'jojung'])\nsns.pairplot(train,y_vars=['price'],x_vars=['tugi', 'newcommer_1yr', 'brand_apt', 'apt_age'])\nsns.pairplot(train,y_vars=['price'],x_vars=['compet_rate_1yr', 'unsold', 'trade_6m','rent_6m'])\nsns.pairplot(train,y_vars=['price'],x_vars=['elemen_school', 'middle_school', 'high_school','special_school'])\nsns.pairplot(train,y_vars=['price'],x_vars=['academy', 'kindergarten', 'museum', 'pharmacy'])\nsns.pairplot(train,y_vars=['price'],x_vars=['doctor', 'motel', 'industry', 'commerce'])\nsns.pairplot(train,y_vars=['price'],x_vars=['starbucks', 'real_estate','subway', 'expressway'])\n\n# \uc218\uce58\ud615\uc774\uc9c0\ub9cc \uc720\ubb34\ubcc0\uc218 \uc870\uc815 \ud544\uc694 : 0\uc774 \ub9ce\uc740 \ubcc0\uc218 \ubc15\ubb3c\uad00, \uc0b0\uc5c5\ub2e8\uc9c0, \uace0\uc18d\ub3c4\ub85c, \ubaa8\ud154 \n# \uc9c0\uc5ed\ubcc4 \ud2b9\uc131\uc744 \ubcf4\uc77c \uc218 \uc788\ub294 \ubcc0\uc218 : \uc9c0\ud558\ucca0, \uc2a4\ud0c0\ubc85\uc2a4, \uc870\uc815\uc9c0\uc5ed\/\ud22c\uae30\uc9c0\uc5ed\uc5ec\ubd80","0220a530":"#2. correlation\uc758 heatmap\ud654\ndf_cor=train.corr()\nplt.figure(figsize=(25,25))\nsns.heatmap(df_cor,annot=True,cmap=\"Accent\");","24389e54":"df_cor=train.corr()\nplt.figure(figsize=(30,2))\nsns.heatmap(df_cor.loc[['price'],:],annot=True,cmap=\"Accent\");","26a01bc6":"# 3. correlation\uc758 table\ud654 \ndf_cor=train.corr()\ndisplay(df_cor)\n\n# 1) price\uc640\uc758 \uc0c1\uad00\uacc4\uc218\ub9cc \ucd94\ucd9c \ndf_cor_price=df_cor.loc[:,['price']]\ndisplay(df_cor_price)\n\n# 2) price \uc0c1\uad00\uad00\uacc4 \uac15\ud55c \uc21c\uc11c\ub300\ub85c \uc815\ub82c\ndisplay(df_cor_price.round(3).sort_values(by=['price'],axis=0,ascending=False,inplace=False)) \n# price\uae30\uc900, \ud589\uac12 \uc815\ub82c(axis=0), \uc624\ub984\ucc28\uc21c, \ubcf8 data\uc720\uc9c0\n \n# 3) top list, \uc74c\/\uc591 \uc0c1\uad00\uad00\uacc4\uc774\ubbc0\ub85c \uc808\ub300\uac12\uc744 \uae30\uc900\uc73c\ub85c \uacc4\uc0b0 \ud544\uc694\ud568.\ndisplay(abs(df_cor_price).round(3).sort_values(by=['price'],axis=0,ascending=False,inplace=False)) \n\n# \uc804\uad6d \ub2e8\uc704 \uc0c1\uad00\uacc4\uc218 \uc815\ub3c4 \ubd84\uc11d \n# tugi\t0.724 : \ud22c\uae30\uc9c0\uc5ed\uc5ec\ubd80(\ubc94\uc8fc\ud615) \n# sido\t-0.629823 : \uc2dc\ub3c4(\ubc94\uc8fc\ud615) \n# jojung\t0.515 : \uc870\uc815\uc9c0\uc5ed\uc5ec\ubd80(\ubc94\uc8fc\ud615)\n# ====================================== \uc9c0\uc5ed \ud2b9\uc131 \n# subway\t0.423 : \uc9c0\ud558\ucca0\uc5ed \uc218\n# pharmacy\t0.412 : \uc57d\uad6d \uc218\n# starbucks\t0.403 : \uc2a4\ud0c0\ubc85\uc2a4 \uc218\n# rent_6m\t0.363 : \ucd5c\uadfc 6\uac1c\uc6d4\uac04 \uc804\uc6d4\uc138 \uac70\ub798 \uc218\n# doctor\t0.326 : \uc758\uc0ac \uc218\n# real_estate\t0.325 : \ubd80\ub3d9\uc0b0 \uc218\n# population\t0.309 : \uc778\uad6c\uc218 \n# kindergarten\t0.281 : \uc5b4\ub9b0\uc774\uc9d1 \uc218 \n# brand_apt\t0.265 : \ube0c\ub79c\ub4dc \uc544\ud30c\ud2b8 \uc218 \n# academy\t0.253 : \ud559\uc6d0 \uc218 \n# commerce\t0.210 : \uc0c1\uad8c \uc218\n# industry\t-0.166872 : \uc0b0\uc5c5\ub2e8\uc9c0 \uc218\uac00 \uc99d\uac00\ud560 \uc218\ub85d \uac00\uaca9\uc740 \ub0ae\uc544\uc9d0 \n# compet_rate_1yr\t0.166 :  \ucd5c\uadfc 1\ub144\uac04 \ud3c9\uade0 \uccad\uc57d \uacbd\uc7c1\ub960 \n# high_school\t0.155 : \uace0\ub4f1\ud559\uad50 \uc218 \n# middle_school\t0.140 : \uc911\ud559\uad50 \uc218 \n# apt_age\t-0.122804 : \uc544\ud30c\ud2b8 \uc5f0\uc2dd\uc774 \uc99d\uac00\ud560\uc218\ub85d \uac00\uaca9\uc740 \ub0ae\uc544\uc9d0\n# newcommer_1yr\t-0.109145 : \uc2dc\uad70\uad6c \ub2e8\uc704 \ucd5c\uadfc 1\ub144\uac04 \uc21c \uc804\uc785\ub7c9\uc774 \ub9ce\uc744\uc218\ub85d \uac00\uaca9\uc774 \ub0ae\uc544\uc9d0. \n# elemen_school\t0.096 : \ucd08\ub4f1\ud559\uad50 \uc218 \n# motel\t-0.058430 : \ubaa8\ud154\uc218\uac00 \uc99d\uac00\ud560\uc218\ub85d \uac00\uaca9\uc774 \ub0ae\uc544\uc9d0. \n# special_school\t0.049 : \ud2b9\ubaa9\uc911, \ud2b9\ubaa9\uace0 \uc218\n# gross_area\t0.041 : \ubc95\uc815\ub3d9 \uba74\uc801\n# unsold\t-0.019336 : \ubbf8\ubd84\uc591 \uc218 \n# trade_6m\t0.013 : \ucd5c\uadfc 6\uac1c\uc6d4\uac04 \ub9e4\ub9e4 \uac70\ub798 \uc218\n# expressway\t-0.011258 : \uace0\uc18d\ub3c4\ub85c \ucd9c\uc785\ub85c(IC) \uc218\uac00 \uc99d\uac00\ud560\uc218\ub85d \uac00\uaca9\uc774 \ub0ae\uc544\uc9d0 \n# museum\t-0.005965 : \ubc15\ubb3c\uad00 \uc218\uac00 \uc99d\uac00\ud560\uc218\ub85d \uac00\uaca9\uc774 \ub0ae\uc544\uc9d0.   \n\n## \uacb0\ub860 : \uc9c0\uc5ed\ubcc4\ub85c \ucc28\uc774\uac00 \uc788\ub2e4\ub294 \uac83\uc744 \ud655\uc778 \ud558\uc600\uc74c. \uac01 \uc9c0\uc5ed\ubcc4\ub85c \ubcc0\uc218\uac04\uc758 \ucc28\uc774\ub97c \ud655\uc778 \ud560 \ud544\uc694\uac00 \uc788\uc74c.","46f78d9e":"#1.\uc120\ud615\ud68c\uadc0\ubd84\uc11d\nfrom statsmodels.formula.api import ols # ordinary list square : \ucd5c\uc18c\uc790\uc2b9\ubc95\uc73c\ub85c \ucd5c\uc801\uc758 Beta\uac12\uc744 \ucc3e\uaca0\ub2e4\ub294 \uac83\n# qqplot, \ud68c\uadc0\ubd84\uc11d \uc0c1\uc218\ud56d \ucd94\uac00 \nfrom statsmodels.api import qqplot, add_constant #\ud68c\uadc0\ubd84\uc11d\uc758 \uc0c1\uc218\ud56d \ucd94\uac00(\uc808\ud3b8 b0 \ucd94\uac00), \",\"\ub97c \ub204\ub974\uace0 tab\uc744 \ub204\ub974\uba74 autocompletion\uc774 \ub428.\n# \uc120\ud615\ubaa8\ub378 formula(y ~ x1 + x2 ~ )\nimport statsmodels.formula.api as smf \n#\ub2e4\uc911\uacf5\uc120\uc131 \ud655\uc778 \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n#\uacb0\uc815\uacc4\uc218 \ud3c9\uac00\uc9c0\ud45c : Root Mean Square Error\nfrom sklearn.metrics import r2_score","39c16d30":"train.columns","c0a9ea3f":"# 1. \uc120\ud615 \ud68c\uadc0 \ubd84\uc11d : \uc804\uccb4 \ubcc0\uc218\ub97c \uac00\uc9c0\uace0 modeling \n\n# density \ubcc0\uc218\ub294 \uc81c\uc678\ud558\uc600\uc74c. \ubaa8\ub378 \ub3cc\uc544\uac00\uc9c0 \uc54a\uc74c.\n\nreg_model = smf.ols(formula = \"price ~ sido + population + gross_area + jojung + tugi + newcommer_1yr + \\\n                               brand_apt + apt_age + compet_rate_1yr + unsold + trade_6m + rent_6m + \\\n                               special_school + academy + kindergarten + museum + pharmacy + doctor + motel + \\\n                               industry + commerce + starbucks + real_estate + subway + expressway + schools + \\\n                               schools_ratio + newcommer_ratio + population_ratio\", data = train)\n# \ubaa8\ub378\uc801\ud569\nreg_result = reg_model.fit()\nprint(reg_result.summary())\n\n# p-value\uac00 0.05 \uc774\uc0c1\uc778 \ubcc0\uc218\ub294 jojung 0.774, apt_age 0.318, unsold  0.789,  special_school 0.524, \n# academy 0.116, kindergarten  0.606,  museum 0.293, motel 0.174, industry 0.084, expressway 0.676\n# schools 0.439, schools_ratio 0.107, newcommer_ratio 0.990 \uc784. \ud574\ub2f9 \uac12\uc740 \uc81c\uc678 \ud544\uc694 \n\n# \uacb0\uc815\uacc4\uc218 70, \uc804\uccb4 \ud68c\uadc0 \ubaa8\ub378\uc758 p-value\ub294 \ubb38\uc81c \uc5c6\uc74c.\n# Durbin-Watson : \uc794\ucc28\uc758 \ub3c5\ub9bd\uc131(0~4\uc774 \uac12), 2\uc5d0 \uac00\uae4c\uc6b0\uba74 \uc794\ucc28\uc758 \ub3c5\ub9bd\uc131\uc774 \uc788\uc5b4 \uc88b\uc74c ","0629ec6a":"# 2. \uc120\ud615 \ud68c\uadc0 \ubd84\uc11d : \uc804\uccb4 \ubcc0\uc218 \uc911\uc5d0\uc11c \uc720\uc758\ubbf8\ud558\uc9c0 \uc54a\uc740 \ubcc0\uc218\ub9cc \ubaa8\ub378\ub9c1 \uc2e4\ud589 \n# p-value\uac00 0.05 \uc774\uc0c1\uc778 \ubcc0\uc218\ub294 jojung 0.774, apt_age 0.318, unsold  0.789,  special_school 0.524, \n# academy 0.116, kindergarten  0.606,  museum 0.293, motel 0.174, industry 0.084, expressway 0.676\n# schools 0.439, schools_ratio 0.107, newcommer_ratio 0.990 \uc784. \ud574\ub2f9 \uac12\uc740 \uc81c\uc678 \ud544\uc694 \n\n \nreg_model = smf.ols(formula = \"price ~ sido + population + gross_area + tugi + newcommer_1yr + \\\n                               brand_apt + compet_rate_1yr + trade_6m + rent_6m + \\\n                               doctor + commerce + starbucks + real_estate + subway + population_ratio\", data = train)\n# \ubaa8\ub378\uc801\ud569\nreg_result = reg_model.fit()\nprint(reg_result.summary())\n\n\n# \uacb0\uc815\uacc4\uc218 69, \uc804\uccb4 \ud68c\uadc0 \ubaa8\ub378\uc758 p-value\ub294 \ubb38\uc81c \uc5c6\uc74c.\n# Durbin-Watson : \uc794\ucc28\uc758 \ub3c5\ub9bd\uc131(0~4\uc774 \uac12), 2\uc5d0 \uac00\uae4c\uc6b0\uba74 \uc794\ucc28\uc758 \ub3c5\ub9bd\uc131\uc774 \uc788\uc5b4 \uc88b\uc74c \n# \ud574\ub2f9 \ubcc0\uc218\uac00 \uc720\uc758\ubbf8\ud55c \ubcc0\uc218\ub85c \ud310\ub2e8, \ub2e4\uc911\uacf5\uc120\uc131 \ud655\uc778 \ud544\uc694\ud568.","bf3c9d6d":"# 3. x\ubcc0\uc218\ub4e4\ub07c\ub9ac\uc758 \ub2e4\uc911\uacf5\uc120\uc131 \ud655\uc778\n\n#\ub2e4\uc911\uacf5\uc120\uc131 \ud655\uc778 \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\ndf_raw_x = train[['sido', 'population', 'gross_area', 'tugi', 'newcommer_1yr', 'brand_apt', 'compet_rate_1yr', 'trade_6m', \\\n                  'rent_6m', 'doctor', 'commerce', 'starbucks', 'real_estate', 'subway', 'population_ratio']] \n\n# statsmodels\uc758 \uc0c1\uc218\ud56d \ucd94\uac00 \ud568\uc218 \uc801\uc6a9\ndf_raw_x_const = add_constant(df_raw_x) \n# DataFrame\uc73c\ub85c \uc800\uc7a5\ndf_vif = pd.DataFrame()\ndf_vif[\"variable\"] = df_raw_x_const.columns\ndf_vif[\"VIF\"] = [variance_inflation_factor(df_raw_x_const.values, i) for i in range(df_raw_x_const.shape[1])]\n# VIF \uc815\ub82c\ndf_vif.sort_values(\"VIF\", inplace = True)\ndf_vif.round(3)\n\n# \uc0ac\uc6a9 \ub41c \ubcc0\uc218 \uc911 \ub2e4\uc911\uacf5\uc120\uc131\uc774 10\uc774\uc0c1\uc778 \ubcc0\uc218\ub294 \uc5c6\ub294 \uac83 \ud655\uc778\ud568.\n# \ud574\ub2f9 \ubcc0\uc218\ub4e4\uc740 \ubaa8\ub450 \uc0ac\uc6a9\ud574\ub3c4 \ubb34\ubc29\ud568.","c5e0dffb":"# \ub370\uc774\ud130 \uad6c\uc131 \ud655\uc778 \ndisplay(train) \ndisplay(test)\n# \ub370\uc774\ud130 \ud589\ub82c\uc218 \ud655\uc778 : train data 2442 rows \u00d7 32 columns, test data 500 rows \u00d7 31 columns\ndisplay(train.shape)\ndisplay(test.shape)","dc9a71af":"# \ubd88\ud544\uc694 \ubcc0\uc218 \uc81c\uac70 : \uc0c1\ub2e8 \ud68c\uadc0\ubaa8\ub378 \uae30\ubc18 \ubcc0\uc218 \uc120\ud0dd \uc9c4\ud589 \n\ny_train = train['price']\nX_train = train.drop(['jojung', 'apt_age', 'unsold', 'special_school', 'academy', 'kindergarten',\\\n                      'museum', 'motel', 'industry', 'expressway', 'schools', 'schools_ratio', 'newcommer_ratio',\\\n                      'gross_area_minmax', 'commerce_density','price'], axis=1)\nX_test = test.drop(['jojung', 'apt_age', 'unsold', 'special_school', 'academy', 'kindergarten',\\\n                      'museum', 'motel', 'industry', 'expressway', 'schools', 'schools_ratio', 'newcommer_ratio',\\\n                      'gross_area_minmax', 'commerce_density'], axis=1)\n\n# p-value\uac00 0.05 \uc774\uc0c1\uc778 \ubcc0\uc218\uc81c\uac70 \n# jojung 0.774, apt_age 0.318, unsold  0.789,  special_school 0.524, \n# academy 0.116, kindergarten  0.606,  museum 0.293, motel 0.174, industry 0.084, expressway 0.676\n# schools 0.439, schools_ratio 0.107, newcommer_ratio 0.990\n# \ubaa8\ub378\uc774 \ub3cc\uc544\uac00\uc9c0 \uc54a\ub294 gross_area_minmax, commerce_density \uc81c\uac70","7e6c8fcf":"# \ub370\uc774\ud130 \uad6c\uc131 \ud655\uc778 \ndisplay(X_train) \ndisplay(X_test)\n# \ub370\uc774\ud130 \ud589\ub82c\uc218 \ud655\uc778 : train data 2442 rows \u00d7 32 columns, test data 500 rows \u00d7 31 columns\ndisplay(X_train.info())\ndisplay(X_test.info())","aeef9be3":"# \uc608\uce21 Gradient Boosting\nfrom sklearn.ensemble import GradientBoostingRegressor\n# \ucd5c\uc801 \ubaa8\ub378, \ud30c\ub77c\ubbf8\ud130 \ud0d0\uc0c9\nfrom sklearn.model_selection import GridSearchCV","0fe61b0a":"# Train Set\ub97c Validation Set\uc73c\ub85c \ubd84\ud560\ucc98\ub9ac 8:2\n# \uc2dc\ub3c4 \uae30\uc900\uc73c\ub85c \ub3d9\uc77c \ube44\uc728\ub85c \ubc30\ubd84\uc2dc\ud0a4\uae30 \uc704\ud574\uc11c stratify\ub97c \uc635\uc158\uc73c\ub85c \uc9c0\uc815\ud558\uc600\uc74c.\n\nfrom sklearn.model_selection import train_test_split\ntrain_X, val_X, train_y, val_y = train_test_split(X_train, y_train,random_state = 1, stratify=train['sido'], test_size = 0.2)","c4955bc1":"display(train_X.head());display(train_X.shape)\ndisplay(val_X.head());display(val_X.shape)","89709a44":"# \ubc94\uc8fc\ud615 \ubcc0\uc218 \ube48\ub3c4\uc218 \ub3c4\ucd9c (\uc2dc\ub3c4\ubcc4\ub85c \uc81c\ub300\ub85c \uac01\uac01 \ubc30\ubd84 \ub418\uc5c8\ub294\uc9c0 \uc7ac\ud655\uc778)\ndisplay(train_X['sido'].value_counts()) \n# pie chart \uc0dd\uc131\ndf_count = train_X.groupby(['sido']).size() \n# pie(\ub370\uc774\ud130,labels=\ub808\uc774\ube14  \ubcc0\uc218 \uc9c0\uc815,autopct=\ube44\uc728 %\ub85c \ud45c\uc2dc(%.1f%%: \uc18c\uc218\uc810 1\uc790\ub9ac \uc801\uc6a9)\ndisplay(df_count.plot.pie(y = \"sido\", autopct=\"%.1f%%\"))","7d51ae29":"# \ubc94\uc8fc\ud615 \ubcc0\uc218 \ube48\ub3c4\uc218 \ub3c4\ucd9c \ndisplay(val_X['sido'].value_counts()) \n# pie chart \uc0dd\uc131\ndf_count = val_X.groupby(['sido']).size() \n# pie(\ub370\uc774\ud130,labels=\ub808\uc774\ube14  \ubcc0\uc218 \uc9c0\uc815,autopct=\ube44\uc728 %\ub85c \ud45c\uc2dc(%.1f%%: \uc18c\uc218\uc810 1\uc790\ub9ac \uc801\uc6a9)\ndisplay(df_count.plot.pie(y = \"sido\", autopct=\"%.1f%%\"))","38014403":"# \uae30\ubcf8 \ubaa8\ub378 \uc0dd\uc131\nmodel = GradientBoostingRegressor(random_state=1) \nmodel.fit(train_X,train_y)\n\nmodel.get_params()","a5f27eaa":"# \uae30\ubcf8 \ubaa8\ub378\uc758 8:2 \ubd84\ud560\uac12 \uac00\uc9c0\uace0 \uc815\ud655\ub3c4 \ube44\uad50 \nprint('\ud559\uc2b5\uc6a9 \ub370\uc774\ud130 \uc815\ud655\ub3c4 : {:.3f}'.format(model.score(train_X,train_y)))\nprint('\ud3c9\uac00\uc6a9 \ub370\uc774\ud130 \uc815\ud655\ub3c4 : {:.3f}'.format(model.score(val_X,val_y)))","ea30cbbf":"# Querry for min mae\n# n_estimators 100, max_depth 10, learning_rate 0.1, min_samples_split(2~8), min_samples_leaf 4, mae 238.64968841768282\n\n'''\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.ensemble import GradientBoostingRegressor\n\ndef get_mae(n_estimators, max_depth, learning_rate, min_samples_split, min_samples_leaf, train_X, val_X, train_y, val_y):\n    model = GradientBoostingRegressor(n_estimators = n_estimators, max_depth=max_depth, learning_rate=learning_rate,min_samples_split=min_samples_split, min_samples_leaf=min_samples_leaf, random_state=1)\n    model.fit(train_X, train_y)\n    preds_val = model.predict(val_X)\n    mae = mean_absolute_error(val_y, preds_val)\n    return(mae)\n\nbest_param_err = [[0,0,0,0,0],1000] # \ucd5c\uc801\uc758 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130\uc758 \uc21c\uc11c\uc30d\uacfc \uc5d0\ub7ec\ub97c \uc800\uc7a5\nfor n_estimators in [100,200,300,500] : #  n_estimators \uc870\ud569\n    for max_depth in [10,20,30,50] : #  max_depth\uc758 \uc870\ud569 \n        for learning_rate in [0.01,0.05,0.1,0.15] : # learining_rate \uc870\ud569\n            for min_samples_split in [2,4,6,8] : # min_samples_spit \uc870\ud569\n                for min_samples_leaf in [1,2,3,4] : # min_samples_leaf \uc870\ud569 \n                    my_mae = get_mae(n_estimators, max_depth, learning_rate, min_samples_split, min_samples_leaf, train_X, val_X, train_y, val_y)\n                    if best_param_err[1] > my_mae : # \uc5d0\ub7ec\uac12\uc774 \ub354 \ub0ae\uac8c \ub098\uc624\uba74\n                        best_param_err[0] = [n_estimators, max_depth, learning_rate] # \uc21c\uc11c\uc30d \uac31\uc2e0\n                        best_param_err[1] = my_mae # \uc5d0\ub7ec \uac31\uc2e0\n                    print(\"n_estimators : %d \\t\\t max_depth : %d \\t\\t learning_rate : %f \\t\\t min_samples_split : %d \\t\\t min_samples_leaf : %d \\t\\t Mean Absolute Error:  %f\" \\\n                          %(n_estimators, max_depth, learning_rate, min_samples_split, min_samples_leaf, my_mae)) \n                    # Mean Absolute Error \uac12\uc774 \uac00\uc7a5 \ub0ae\uac8c \ub098\uc624\ub294 \uac12\uc744 \uc120\ud0dd\n            \nbest_param_err # \ucd5c\uc801\uc758 \uc21c\uc11c\uc30d, \uc5d0\ub7ec \n'''","8955eb06":"# \ud29c\ub2dd \ubaa8\ub378 \uc0dd\uc131 \ubc0f \ubd84\ud560 80%\ub97c \uae30\uc900\uc73c\ub85c \uc801\uc6a9 \n# min_samples_split\uc740 2,4,6,8\uc774\uc5b4\ub3c4 \ubb34\ubc29, min_samples_leaf\uac00 4\uc774\uba74 \ubaa8\ub450 \uac12\uc774 \uac19\uc558\uc74c.\n\nmodel = GradientBoostingRegressor(n_estimators=100, max_depth=10, learning_rate=0.1, min_samples_split=8, min_samples_leaf=4, random_state=1)\nmodel.fit(train_X, train_y)","8517ee40":"# \ud29c\ub2dd \ubaa8\ub378\uc758 8:2 \ubd84\ud560\uac12 \uac00\uc9c0\uace0 \uc815\ud655\ub3c4 \ube44\uad50 \n\nprint('\ud559\uc2b5\uc6a9 \ub370\uc774\ud130 \uc815\ud655\ub3c4 : {:.3f}'.format(model.score(train_X,train_y)))\nprint('\ud3c9\uac00\uc6a9 \ub370\uc774\ud130 \uc815\ud655\ub3c4 : {:.3f}'.format(model.score(val_X,val_y)))","c213b822":"model = GradientBoostingRegressor(n_estimators=100, max_depth=10, learning_rate=0.1, min_samples_split=8, min_samples_leaf=4, random_state=1)\nmodel.fit(X_train, y_train)","98b077ca":"# \ud559\uc2b5\ub41c \ubaa8\ub378\uc744 \ud1b5\ud574 \uc608\uce21\uac12 \uc0dd\uc131\npred = model.predict(X_test) # \uc608\uce21\uac12 \uc0dd\uc131\nsubmission['price'] = pred  # \uc608\uce21\uac12 \uc81c\ucd9c \ud30c\uc77c\uc5d0 \uc800\uc7a5\nsubmission.to_csv('my_submission.csv', index=False)   ","a6ec628f":"### 4.2.2 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd","4f3676a8":"## 4.2 \ubaa8\ub378 \uc0dd\uc131","e3401afe":"### 4.2.4. \ucd5c\uc885\ubaa8\ub378 \uc801\uc6a9","72480893":"### 4.2.2 \uae30\ubcf8 \ubaa8\ub378","7db1b23e":"* \uc11c\uc6b8': 0, '\uc778\ucc9c': 1, '\ub300\uc804': 2, '\uad11\uc8fc': 3, '\ub300\uad6c': 4, '\uc6b8\uc0b0': 5, '\ubd80\uc0b0': 6, '\uc138\uc885': 7, '\uc81c\uc8fc': 8, '\uacbd\uae30': 9, '\uac15\uc6d0': 10, '\ucda9\ubd81': 11,'\ucda9\ub0a8': 12, '\uacbd\ubd81': 13, '\uacbd\ub0a8': 14, '\uc804\ubd81': 15, '\uc804\ub0a8':16","668a882a":"## 1-2. \uc694\uc57d\ud1b5\uacc4\ub7c9 \ud655\uc778 : \uc218\uce58\ud615 \/ \ubc94\uc8fc\ud615","5ce38198":"## 2-1. \ubcc0\uc218 \uc720\ud615 \uc7ac \ud655\uc778 ","3d3c9dfb":"# \ud658\uacbd\uc124\uc815","c233b578":"# 1. \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","5fe95a51":"## 1-1. \ub370\uc774\ud130 \ud655\uc778(\ud56d\ubaa9\/\uc18d\uc131\/\uad6c\uc870\/\uc720\ud615\/\ud589\uc5f4 \uc218 \ub4f1)- len, shape, info  ","963916b5":"## 4.1 train_test set \uc7ac\uad6c\uc131","dd9dabba":"# 2. EDA","8e99122f":"# 4. \ubaa8\ub378\ub9c1","3d11b96b":"## 2-2. Simple EDA : correlation \ubd84\uc11d (y-x\uac04\uc758 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d)","7d46fb33":"# 3. \ubcc0\uc218 \uc120\ud0dd","023395e5":"## 1-3. \ub370\uc774\ud130 \ubd84\ud3ec\/\uc774\uc0c1\uce58 \ud655\uc778","d09eb3ff":"### 4.2.1 train\uc744 8:2\ub85c \ubd84\ud560\ucc98\ub9ac","057cd844":"## 1-4. EDA\uc6a9 \ub370\uc774\ud130 \ub9c8\ud2b8 \uc0dd\uc131"}}