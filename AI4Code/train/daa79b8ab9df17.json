{"cell_type":{"b1b573ae":"code","aace269c":"code","60241d7e":"code","cbd2e221":"code","337a0a28":"code","79004f1a":"code","ea35bfe3":"code","9435af7f":"code","300f3535":"code","011dad50":"code","6c5d5e96":"code","5d04357e":"code","54e20c6c":"code","a3273070":"code","3deef96e":"code","817ce690":"markdown","4301f962":"markdown","a9e9591b":"markdown","d4b569e9":"markdown","59a75453":"markdown","d0dd39a6":"markdown","e02647d4":"markdown","f5a303be":"markdown"},"source":{"b1b573ae":"\nimport pandas as pd \nimport numpy as np\nimport os\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nfrom PIL import Image\nimport glob\nimport matplotlib.image as mpimg\nfrom matplotlib.animation import FuncAnimation\nimport matplotlib.animation as animation\nfrom IPython.display import HTML\n\nimport pytorch_lightning as pl\nimport torch \nfrom torch.utils.data import Dataset, DataLoader\n\nimport pydicom\nplt.rcParams[\"figure.figsize\"] = (10,8)","aace269c":"def set_seed( seed = 443):\n    \"\"\" Seed every thing \"\"\"\n    pl.seed_everything(seed=seed)\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    if torch.cuda.is_available():\n        torch.cuda.manual_seed_all(seed)\n        torch.backends.cudnn.deterministic = True\nset_seed()","60241d7e":"train_root_dir = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train'\ncsv_path = '..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train_labels.csv'","cbd2e221":"df = pd.read_csv(csv_path)\ndf['BraTS21ID'] = df['BraTS21ID'].apply( lambda x : str(x).zfill(5))\ntarget = 'MGMT_value'\ndf.head(8)","337a0a28":"# class count\nax = sns.countplot(data=df, x=target,)\nax.bar_label(ax.containers[0])\nplt.title(\" Class Count\")\nplt.show()","79004f1a":"class_one = df[df[target] == 1 ].iloc[0,0]\nclass_zero = df[df[target] == 0 ].iloc[0,0]\nscan_types = ['FLAIR','T1w', 'T1wCE', 'T2w' ]","ea35bfe3":"# plot some random images\npath = Path( os.path.join( train_root_dir, class_one, 'T2w' ))\npath_sorted = [file for file in path.glob(\"*.dcm\")]\npath_sorted.sort()\nfig, axes = plt.subplots(2,5,)\nidx = 2\nimg_lst = []\nfor i in range(2):\n    for j in range(5):\n        ds = pydicom.filereader.dcmread( str(path_sorted[idx].as_posix()))\n        axes[i,j].imshow( ds.pixel_array )\n        axes[i,j].axis('off')\n        axes[i,j].set_title( path_sorted[idx].name)\n        idx = idx+1\n\nfig.tight_layout()\nfig.subplots_adjust(top=0.88)\nplt.show() ","9435af7f":"def show_anim(scan_type='T2w', class_type=class_one):\n    \"\"\"\n    Generate animation from scan images\n    \"\"\"\n    path = Path( os.path.join( train_root_dir, class_one, scan_type ))\n    path_sorted = [file for file in path.glob(\"*.dcm\")]\n    path_sorted.sort()\n    fig, ax = plt.subplots()\n    ims = []\n    for idx in range(len(path_sorted)):\n        ds = pydicom.filereader.dcmread( str(path_sorted[idx].as_posix()))\n        if np.max(ds.pixel_array) != 0:\n            im = ax.imshow(ds.pixel_array, animated=True)\n            ims.append([im])\n\n    ani = animation.ArtistAnimation(fig, ims, interval=50, blit=True,\n                                    repeat_delay=1000)\n    display(HTML(f'<h1 style=\"text-align:center\">{scan_type} <\/h1>'))\n    display(HTML(ani.to_html5_video()))\n","300f3535":"for st in scan_types:\n    show_anim( class_type=class_one, scan_type=st)","011dad50":"for st in scan_types:\n    show_anim( class_type=class_zero, scan_type=st)","6c5d5e96":"class BrainTumorDataset(Dataset):\n    \"\"\" Prepare dataset for brain tumor Classification \"\"\"\n    def __init__(self, csv_file, root_dir, transform=None):\n        self.root_dir = root_dir\n        self.df = pd.read_csv(csv_file)\n        self.df['BraTS21ID'] = self.df['BraTS21ID'].apply( lambda x : str(x).zfill(5))\n    \n    def __len__( self ):\n        return self.df.shape[0]\n    \n    def __getitem__( self, idx):\n        if torch.is_tensor( idx):\n            idx = idx.tolist()\n        subject_wise_scan = []\n        for file in scan_types:\n            image_path = Path( os.path.join( self.root_dir, self.df.iloc[idx, 0 ], file ) )\n            image_label = self.df.iloc[idx, 1 ]\n            img_list = []\n            for item in image_path.glob(\"*.dcm\"):\n                ds = pydicom.filereader.dcmread( str(item))\n                data = ds.pixel_array\n                if not np.max( data ) == 0: # filter blank images\n                    img_list.append( ds.pixel_array)\n        mean_img = np.max(img_list, axis=1)\n        subject_wise_scan.append(mean_img)\n        return {\"arr\": subject_wise_scan[0], \"label\": image_label }\n","5d04357e":"def show_image(image, label):\n    \"\"\"Show image with landmarks\"\"\"\n    plt.title(f\"Image Label: {label}\")\n    plt.imshow(image)\n    plt.show()","54e20c6c":"braintumordataset = BrainTumorDataset(\n   root_dir= train_root_dir,\n   csv_file= csv_path\n)","a3273070":"fig = plt.figure()\n\nfor i in range(len(ds)):\n    sample = braintumordataset[i]\n    print(i, sample['arr'].shape, sample['label'].shape)\n\n    ax = plt.subplot(1, 4, i + 1)\n    plt.tight_layout()\n    ax.set_title('Sample #{}'.format(i))\n    ax.axis('off')\n    show_image(sample['arr'], sample['label'] )\n\n    if i == 3:\n        plt.show()\n        break","3deef96e":"dataloader = DataLoader(braintumordataset, batch_size=4,\n                        shuffle=True, num_workers=0)","817ce690":"<h1 align=\"center\"  style=\"background-color:yellow;\" style=\"font-family:verdana;\"> \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f If you find this note book helpful. <b>please upvote!<\/b> \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f <\/h1>","4301f962":"# Prepare Dataset","a9e9591b":"<h1 align=\"center\" style=\"background-color:powderblue;\" style=\"font-size:300%;\"> Brain Tumor Radiogenomic Classification  <\/h1>","d4b569e9":"<a id=\"1\"><\/a>\n<h2 style='background:blue; border:0; color:white'><center> Load Libraries <\/center><h2>","59a75453":"### Lets visualize few scans for both classes","d0dd39a6":"# Animation for MGMT_value 0","e02647d4":"# Animation for MGMT_value 1","f5a303be":" ## About Competition\n - A malignant tumor in the brain is a life-threatening condition. Known as `glioblastoma`, it's both the most common form of brain cancer in adults and the one with the worst prognosis, with median survival being less than a year. \n - The presence of a specific genetic sequence in the tumor known as MGMT promoter methylation has been shown to be a favorable prognostic factor and a strong predictor of responsiveness to chemotherapy.\n ## Objective\n - In this competition we need to predict the genetic subtype of glioblastoma using MRI (magnetic resonance imaging) scans to train and test your model to detect for the presence of MGMT promoter methylation. Predict the `MGMT_value` for each subject\n ## About Data\n - The `Training` and the `Validation` data sets are provided to the participants, whereas the `Testing` cohort is kept hidden at all times, during and after the competition.\n - Folder structure\n \n ![image.png](attachment:937858cf-8714-460e-8ed8-47e2a60948a5.png)\n \n Definitions\n - The FLAIR MR imaging sequence produces a heavily T2-weighted image with nulling of the signal of cerebrospinal fluid using an inversion time that usually ranges from 1800 to 2500 msec. By suppressing the signal intensity of bulk water, FLAIR images increase the conspicuity of lesions located in areas adjacent to or filled with cerebrospinal fluid. This property gives FLAIR images their unique characteristics.\n - T1-weighted (T1W) image is a basic pulse sequence in magnetic resonance (MR) imaging and depicts differences in signal based upon intrinsic T1 relaxation time of various tissues.\n \n- T2-weighted imaging is built from the basic physics of magnetic resonance imaging where there is spin\u2013spin relaxation, that is, the transverse component of the magnetization vector exponentially decays towards its equilibrium value. It is characterized by the spin\u2013spin relaxation time, known as T2. \n\nRead More:\n* https:\/\/www.ajronline.org\/doi\/10.2214\/ajr.179.1.1790237\n* https:\/\/en.wikipedia.org\/wiki\/T2*-weighted_imaging"}}