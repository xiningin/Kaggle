{"cell_type":{"9cdd6136":"code","520d7570":"code","a137eced":"code","c885a71e":"code","8df5295a":"code","9686696b":"code","949a2f0a":"code","9c5f2695":"code","a80e9e53":"code","c6c831a8":"code","2edc1f6e":"code","0564ce4b":"code","48f4b7ae":"code","c1e200f0":"code","86bb1363":"code","13f9f187":"code","62149437":"code","6bcfb1b6":"code","9554e26c":"code","c6bd2ee1":"code","356171f4":"code","c4ab9262":"code","b700f619":"code","6b01362b":"code","71603725":"code","cce85335":"code","322696ec":"markdown","d46e6ed5":"markdown","96a523bb":"markdown","82b87f54":"markdown","7b7c35c8":"markdown","cc7fcdad":"markdown","bc8f4fca":"markdown","f670a753":"markdown","e0c9c28b":"markdown","929db557":"markdown","90fd68ba":"markdown","d5cbe46f":"markdown","cbeabfa2":"markdown","e15ffc44":"markdown","e5781a53":"markdown","65a72460":"markdown","954caef4":"markdown","b5a452a2":"markdown"},"source":{"9cdd6136":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","520d7570":"file_path = '\/kaggle\/input\/'\n\nfile = os.path.join(file_path,'ecommerce-data\/data.csv')\ndf = pd.read_csv(file,encoding='unicode_escape')","a137eced":"df.head()","c885a71e":"df.select_dtypes(include = \"object\")","8df5295a":"df.isna().sum()","9686696b":"df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate']).dt.date\n","949a2f0a":"df.shape","9c5f2695":"df.dtypes","a80e9e53":"df['InvoiceDate'] = df['InvoiceDate'].astype('datetime64[ns]')\n\n#Convert date to year-month\ndf['InvoiceMonth'] = df['InvoiceDate'].dt.strftime('%Y-%m')","c6c831a8":"df.describe()","2edc1f6e":"df[df['Quantity']<0].head()","0564ce4b":"df[df['CustomerID']==17548]","48f4b7ae":"cnt_order = df[df['Quantity']>0]['InvoiceNo'].nunique()\ncnt_refund = df[df['Quantity']<0]['InvoiceNo'].nunique()\n\n\nprint(\"Total Orders : \",cnt_order)\nprint(\"Total Refund Order : \",cnt_refund)\nprint(\"%Refund : \",cnt_refund\/(cnt_order)*100,\"%\")","c1e200f0":"df['RefundFlg'] = df['Quantity']<0","86bb1363":"prod_order = df[df['Quantity']>0].groupby(['StockCode','Description']).InvoiceNo.nunique().sort_values(ascending = False).reset_index()\nprod_order = prod_order.rename(columns = {'InvoiceNo' : 'TotalOrder'})\nprod_order_refund = df[df['Quantity']<0].groupby(['StockCode','Description']).InvoiceNo.nunique().sort_values(ascending = False).reset_index()\nprod_order_refund = prod_order_refund.rename(columns = {'InvoiceNo' : 'TotalRefundOrder'})\n\njoin_prod_order = prod_order.merge(prod_order_refund,left_on = [\"StockCode\",\"Description\"],right_on = [\"StockCode\",\"Description\"],how = 'left')\njoin_prod_order['%Refund'] = join_prod_order['TotalRefundOrder']\/join_prod_order['TotalOrder']*100\njoin_prod_order = join_prod_order.sort_values(by = 'TotalRefundOrder',ascending = False)\njoin_prod_order.head()","13f9f187":"join_prod_order = join_prod_order.sort_values(by = '%Refund',ascending = False)\njoin_prod_order[join_prod_order['TotalRefundOrder']>=10].head(10)","62149437":"prod_only_order = join_prod_order[~join_prod_order['StockCode'].isin(['AMAZONFEE','S','BANK CHARGES','M'])]\nTotalRefundProdOrder = prod_only_order['TotalRefundOrder'].sum()\nTotalReProdOrder = prod_only_order['TotalOrder'].sum()\nprint(\"%Refund : \",TotalRefundProdOrder\/TotalReProdOrder*100,\"%\")","6bcfb1b6":"df[df['UnitPrice']<0].head()","9554e26c":"df['Net'] = df['Quantity']*df['UnitPrice']","c6bd2ee1":"sales_by_country = df.groupby(['Country']).Net.sum().sort_values(ascending = False).reset_index()\nTotalSales = sales_by_country['Net'].sum()\n\n\nsales_by_country['% of total sales'] = sales_by_country['Net']\/TotalSales\n#Top 5 countries by sales\nsales_by_country.head()","356171f4":"import matplotlib.pyplot as plt\ndf_wt_cust = df[(df['CustomerID'].notnull()) & (df['Quantity']>0)]\n\norder_net = df_wt_cust.groupby(['InvoiceNo']).Net.sum()\naov = order_net.mean()\nplt.hist(order_net,bins=1000)\nplt.xlim(0,2000)\nplt.xlabel(\"Order value\")\nplt.ylabel(\"Number of orders\")\nprint(\"AOV : \",aov)","c4ab9262":"#Repeat Customers\n\n#Exlude non-product rows\n\ndf_for_rpt_cust = df_wt_cust.copy()\ndf_for_rpt_cust = df_for_rpt_cust[~df_for_rpt_cust['StockCode'].isin(['AMAZONFEE','S','BANK CHARGES','M'])]\n\ncust_wt_total_order = df_for_rpt_cust[df_for_rpt_cust['Net']>0].groupby(['CustomerID']).InvoiceNo.nunique().reset_index()\ncust_wt_total_order = cust_wt_total_order.rename(columns = {'InvoiceNo' : 'TotalOrder'})\n\ncust_wt_total_refund_order = df_for_rpt_cust[df_for_rpt_cust['Net']<0].groupby(['CustomerID']).InvoiceNo.nunique().reset_index()\ncust_wt_total_refund_order = cust_wt_total_refund_order.rename(columns = {'InvoiceNo' : 'TotalRefundOrder'})\n\njoin_cust_wt_total_order = cust_wt_total_order.merge(cust_wt_total_refund_order,left_on = 'CustomerID',right_on='CustomerID',how = 'left')\n# convert null to 0\njoin_cust_wt_total_order['TotalRefundOrder'] = np.where(join_cust_wt_total_order['TotalRefundOrder'].isnull(),0,join_cust_wt_total_order['TotalRefundOrder'])\njoin_cust_wt_total_order['TotalSuccessOrder'] = join_cust_wt_total_order['TotalOrder']-join_cust_wt_total_order['TotalRefundOrder']\n\njoin_cust_wt_total_order['RepeatFlg'] = join_cust_wt_total_order['TotalSuccessOrder']>=2\n\nCntCustomer = join_cust_wt_total_order.CustomerID.nunique()\nCntRepeatCustomer = join_cust_wt_total_order[join_cust_wt_total_order['RepeatFlg']==True].CustomerID.nunique()\nPctRepeatCustomer = CntRepeatCustomer\/CntCustomer\n\nprint(\"%Repeat Customer : \",PctRepeatCustomer*100,\"%\")\n\nplt.hist(join_cust_wt_total_order['TotalSuccessOrder'],bins = 100)\nplt.xlim(0,30)\nplt.xlabel(\"Number of Orders\")\nplt.ylabel(\"Number of Customers\")\nplt.show()\n\n","b700f619":"df_wt_cust.groupby(['CustomerID','Description']).InvoiceNo.nunique().sort_values(ascending = False).reset_index().head(10)","6b01362b":"\ndf_for_trend = df.copy()\n\n#Define new customer\n\ncust_wt_fst_order = df_for_trend.groupby(['CustomerID']).InvoiceDate.min().reset_index()\ncust_wt_fst_order = cust_wt_fst_order.rename(columns = {\"InvoiceDate\" : \"FirstInvoiceDate\"})\n\ndf_for_trend = df_for_trend.merge(cust_wt_fst_order,left_on = 'CustomerID',right_on = 'CustomerID',how = 'left')\n\ndf_for_trend['FirstOrderFlg'] = (df_for_trend['InvoiceDate'] == df_for_trend['FirstInvoiceDate'])\n\ndf_new_cust = df_for_trend[df_for_trend['FirstOrderFlg']==True][['CustomerID','InvoiceMonth']].drop_duplicates()\n\nagg_df_new_cust = df_new_cust.groupby(\"InvoiceMonth\").CustomerID.nunique().reset_index()\nplt.bar(agg_df_new_cust['InvoiceMonth'],agg_df_new_cust['CustomerID'])\nplt.xticks(rotation=90)\nplt.xlabel(\"InvoiceMonth\")\nplt.ylabel(\"Number of New Customers\")\nplt.title('Number of New Customers by month')\nplt.show()\n","71603725":"agg_df_cust = df_for_trend.groupby(\"InvoiceMonth\").CustomerID.nunique().reset_index()\n\nplt.bar(agg_df_cust['InvoiceMonth'],agg_df_cust['CustomerID'])\nplt.xticks(rotation=90)\nplt.xlabel(\"InvoiceMonth\")\nplt.ylabel(\"Number of Customers\")\nplt.title('Number of Customers by month')\n\nplt.show()","cce85335":"agg_sales = df_for_trend.groupby('InvoiceMonth').Net.sum().reset_index()\n\nplt.bar(agg_df_cust['InvoiceMonth'],agg_df_cust['CustomerID'])\nplt.xticks(rotation=90)\nplt.xlabel(\"InvoiceMonth\")\nplt.ylabel(\"Sales\")\nplt.title('Sales by month')\nplt.show()","322696ec":"The **InvoiceNo** has prefix **C** which probably means canceled order. I'll look into **CustomerID** 17584 data if we find something else.","d46e6ed5":"The **min** in each column is negative value which probably means a refund order or the data is incorrect but I assume that it's a refund order. I'll check more about it, start with negative **Quantity**.","96a523bb":"* Take a quick look in numerical columns","82b87f54":"> **Comment on this part:**\n    It's okay to use C as prefix to define that this order is refund but it would be a lot better if it can specify which order is refunded. For example, **InvoiceNo** : C1234 is the refund order of **InvoiceNo** : 1234 or you can create a new column that tell which ordered is refunded (the value of this column in normal order is null). ","7b7c35c8":"Most of the sales are from UK which is around 84% of total sales (Company is based in UK)\n","cc7fcdad":"## 2.3 Customers\n\nIn this part I'd like to learn more about the customers. I'll start with calculating:\n* Average per Order (AOV)\n* Repeat Customers : Customers who has more than 1 orders\n\nNote : \n* There're many rows that **CustomerID** is missing so I'll filter out in this part.\n* Assume that there is no refund and bad debt to simplify calculation","bc8f4fca":"The top 4 doesn't seem like the name of products and **TotalRefundOrder** is higher that **TotalOrder**! From the descriptions, I think in this case, it is about additional fee or discounted fee.\n\nEven the top 4 is not the problems, other products in top 10 seem to be problems and should find out why these product has high %refund.\n\nNext, I'll try to recalculate %refund again by excluding the non-product (top 4 in above table)","f670a753":"The aov is 480. Next I'm going to find the %repeat customers.\n\nFrom the last part, we learned that there're refunded orders, so I'll calculated number of orders per customer by count total orders and subtract by total refund order by each customer\n","e0c9c28b":"## 2.2 Country","929db557":"%Repeat Customer is 65.5% which is pretty high and many customers keep coming back multiple times.\n\nLet's see which products that make customers keep coming back","90fd68ba":"1. ## 2.1 Negative Quantity and UnitPrice","d5cbe46f":"From the chart above, it seems that the data on Dec2011 is not complete, so we'll look only data from Dec10-Nov11 (12 months).\n\nNumber of new customers is clearly in downtrend during Mar11-Aug11 and higher in Sep11-Nov11 because of high season period (data from sales by month that sales spike during the end of the year). One thing that company should be concern is customer acquisition because customer has their own lifecycle, so one day they'll churn anyway. There're many things that company can do such as increasing budget for acquiring new customers, analyzing the source of new customers to improve stretegies.\n\nAnother thing we learn from chart is seasonality is sales. Because the products of the company is gift, it depends on holidies or ceremonies (as we can see from sales at the end of the year). So the company should always prepare in inventory and manpower before peak season.","cbeabfa2":"From the top 10 products, we learn that there're customers who buy a lot of products and a lot of orders. These customers might buy this orders to sell in their area (just guessing)\n\nThe previous data table makes me curious about sales concentration in customers. If most of the sales are from just a few of  customers, I think it's risky for the company because when these customer gone, all of the sales gone.\n\nThe next thing I'm going to find is the number of customers that make 80% sales of the company. I want to make sure that this number is not too low. I'll select only sales in last 3 months (from 9Sep2011)","e15ffc44":"The **InvoiceNo** 550755 and C552049 are exactly the same in quantity and products, but the **InvoiceDate** of **C** is over a month later. So I think **InvoiceNo** with C in prefix is refund order.\n\nAnother case is **InvoiceNo** C536391 which has no matched order but if we look at the **InvoiceDate** and **index**, this refund order is very early in dataset, so I think it refund for the order that occured before the company collected the data.\n\nLet's see if there're a lot of refunds.","e5781a53":"The prefix of **InvoiceNo** is A in thist case and **Description** tell us that it means bad debt. So the company might give customers credit and some of them didn't pay back and becomes bad debt.","65a72460":"Number of refund order is aroud 25%! We should dig deeper to find why the %refund is so high (may be I was wrong about refund).\n\nI create **RefundFlg** to make in easier when we want to filter it.","954caef4":"**M** doesn't seem like the name of product, may be there is something is hidden inside the data.\n\nThis time I'll sort by %refund but select only product that has at least 10 refund order.","b5a452a2":"Creating **Net** column for easier calculation sales in the future. The **Net** is calculated from **Quantity** x **UnitPrice**. \n\nNote : Keep in mind that the refund order has negative **Net** value"}}