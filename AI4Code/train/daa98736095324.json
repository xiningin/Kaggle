{"cell_type":{"1ba43bea":"code","fb9d5098":"code","39e06665":"code","6ef5c605":"code","5d38f76f":"code","a285588d":"code","834130bb":"code","a5d83947":"code","77bd1cfc":"code","ebbb55a8":"code","3aaaf895":"code","fb6f4b75":"code","485d0f7e":"code","b58c49c4":"code","c0fd3e47":"markdown","18126215":"markdown","d0edf4b3":"markdown","698bc4e4":"markdown","ccc089e2":"markdown","73a678d6":"markdown","94aed466":"markdown","32292056":"markdown","bf66f6af":"markdown","ecf923ae":"markdown"},"source":{"1ba43bea":"import tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Dense, SimpleRNN\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport datetime as dt\nplt.rcParams['figure.figsize'] = [20, 5]\nfrom tqdm import tqdm\nimport pandas as pd\n\ndf = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/train.csv');","fb9d5098":"COUNTRIES = ['Russia']","39e06665":"data = df.loc[(df['Country_Region'] == COUNTRIES[0]) & (df['Target'] == 'ConfirmedCases')]\ndf_date = [dt.datetime.strptime(d,'%Y-%m-%d').date() for d in data['Date']]\ndf_conf = data['TargetValue']\ndf_fata = df.loc[(df['Country_Region'] == COUNTRIES[0]) & (df['Target'] == 'Fatalities')]['TargetValue']","6ef5c605":"plt.plot( df_date, df_conf, 'b' ), plt.title('Confirmed Cases'), plt.show();\nplt.plot( df_date, df_fata, 'r' ), plt.title('Fatalities'), plt.show();","5d38f76f":"df_maxs = [max(df_conf), max(df_fata)]\ndf_mins = [min(df_conf), min(df_fata)]\ndef normalize(x, d):\n    return (x-df_mins[d])\/(df_maxs[d]-df_mins[d])\ndef denormalize(x, d):\n    x = np.array(x)\n    return x*(df_maxs[d]-df_mins[d])+df_mins[d]","a285588d":"data = []\nfor f1, f2 in zip(df_conf, df_fata):\n    data.append([normalize(f1, 0), normalize(f2, 1)])\ndata = np.array(data)","834130bb":"x, y, seq = [], [], 16\nfor i in range(0, len(df_conf.values)-seq):\n    x.append( data[i:i+seq] )\n    y.append( data[i+seq] )\nx = np.array(x)\ny = np.array(y)\n\nprint('x shape:', x.shape)\nprint('y shape:', y.shape)\nin_dim = (seq, 2)\nout_dim = 2","a5d83947":"model = Sequential()\n\nmodel.add(SimpleRNN(units=512, input_shape=in_dim, activation=\"relu\")) \nmodel.add(Dense(256, activation=\"relu\")) \n# model.add(Dense(16, activation=\"relu\")) \nmodel.add(Dense(out_dim))\n\n# model.compile(loss='mse', optimizer='adam') \nmodel.compile(loss='mae', optimizer='adam') \n \nmodel.summary()\nhist = model.fit(x, y, epochs=100, verbose=0)","77bd1cfc":"plt.plot([i for i in range(len(hist.history['loss']))], hist.history['loss']) \nplt.title('Training Loss over Epoch'), plt.ylabel('Loss'), plt.xlabel('Epoch'), plt.show()\nprint('Final loss value:', hist.history['loss'][-1])","ebbb55a8":"yp = model.predict(x)","3aaaf895":"yp1, yp2 = zip(*yp) # Prediction\ny1, y2 = zip(*y)    # Actual Data","fb6f4b75":"plt.title('Confirmed Cases'), plt.plot(denormalize(yp1, 0), 'b'), plt.plot(denormalize(y1, 0), 'r'), plt.show();\nplt.title('Fatalities'), plt.plot(denormalize(yp2, 1), 'b'), plt.plot(denormalize(y2, 1), 'r'), plt.show();\nprint('Blue = Prediction, Red = Real Data')","485d0f7e":"mae = tf.keras.losses.MeanAbsoluteError()\n\ncountries = df['Country_Region'].unique()\nseq = 16\nin_dim = (seq, 2)\nout_dim = 2\n\nresults = []\nfor country in tqdm(countries):\n    df_conf = df.loc[(df['Country_Region'] == country) & (df['Target'] == 'ConfirmedCases')]['TargetValue']\n    df_conf = ( df_conf - min(df_conf) )\/( max(df_conf) - min(df_conf) )\n    df_fata = df.loc[(df['Country_Region'] == country) & (df['Target'] == 'Fatalities')]['TargetValue']\n    df_fata = ( df_fata - min(df_fata) )\/( max(df_fata) - min(df_fata) )\n    \n    data = np.array([ [f1, f2] for f1, f2 in zip(df_conf, df_fata) ])\n    x, y = [], []\n    for i in range(0, len(df_conf.values)-seq):\n        x.append( data[i:i+seq] ), y.append( data[i+seq] )\n    x = np.array(x)\n    y = np.array(y)\n    yp = model.predict(x)\n    if not np.isnan(mae(y, yp).numpy()):\n        results.append( [mae(y, yp).numpy(), country] )\nprint('Done')","b58c49c4":"results.sort()\nsorted_errors, sorted_countries = zip(*results)\nsorted_errors = (np.array(sorted_errors) - min(sorted_errors))\/(max(sorted_errors) - min(sorted_errors))*100\ny_pos = np.arange(len(sorted_countries))\nTOP_K = 10\n\n## First Plot: Error Chart For Every Country\nplt.title('Covid19 Jan-Jun 2021 Global Forecast')\nplt.ylabel('Errors')\nplt.bar(y_pos, sorted_errors, align='center', alpha=0.5)\nplt.show()\nprint('Error mean:', np.mean(sorted_errors))\nprint('Error std:', np.std(sorted_errors))\nprint('Cannot predict (NaN): ', len(countries) - len(y_pos))\n\n## Second Plot: Top 10 correct prediction\nplt.title('Top 10 least error prediction')\nplt.ylabel('Errors')\nplt.bar(y_pos[:TOP_K], sorted_errors[:TOP_K], align='center', alpha=0.5)\nplt.xticks(y_pos[:TOP_K], sorted_countries[:TOP_K])\nplt.show()\n\n## Third Plot: Top 10 inaccurate prediction\nplt.title('Top 10 most error prediction')\nplt.ylabel('Errors')\nplt.bar(y_pos[-TOP_K:], sorted_errors[-TOP_K:], align='center', alpha=0.5)\nplt.xticks(y_pos[-TOP_K:], sorted_countries[-TOP_K:])\nplt.show()","c0fd3e47":"T\u1eadp d\u1eef li\u1ec7u l\u00e0 th\u1ed1ng k\u00ea s\u1ed1 ca nhi\u1ec5m v\u00e0 s\u1ed1 th\u01b0\u01a1ng vong do \u0111\u1ea1i d\u1ecbch Covid19 trong kho\u1ea3ng th\u1eddi gian 01-2020 \u0111\u1ebfn 06-2020 \u1edf c\u00e1c n\u01b0\u1edbc tr\u00ean to\u00e0n c\u1ea7u.\n- `INPUT`: T\u1eadp d\u1eef li\u1ec7u c\u00f3 m\u1ed7i datapoint l\u00e0 bao g\u1ed3m `seq` ng\u00e0y li\u00ean ti\u1ebfp, m\u1ed7i `seq` c\u00f3 2 \u0111\u1eb7c tr\u01b0ng: Ca nhi\u1ec5m ('Confirmed Cases') v\u00e0 Th\u01b0\u01a1ng vong ('Fatalities'). L\u00e0 vector `(?, seq, 2)`\n- `OUTPUT`: M\u1ed9t output g\u1ed3m 2 \u0111\u1eb7c tr\u01b0ng, d\u1ef1 \u0111o\u00e1n Ca nhi\u1ec5m v\u00e0 Th\u01b0\u01a1ng vong t\u1ea1i ng\u00e0y ti\u1ebfp theo (`seq+1`). L\u00e0 vector `(?, 2)`","18126215":"### D\u1ef1 \u0111o\u00e1n v\u00e0 Plot k\u1ebft qu\u1ea3","d0edf4b3":"## X\u00e2y d\u1ef1ng Model","698bc4e4":"# B\u00e0i to\u00e1n: D\u1ef1 \u0111o\u00e1n Covid19","ccc089e2":"### Ch\u1ecdn qu\u1ed1c gia","73a678d6":"## D\u1ef1 \u0111o\u00e1n t\u1ea5t c\u1ea3 qu\u1ed1c gia","94aed466":"### Plotting sai s\u1ed1 d\u1ef1 \u0111o\u00e1n m\u1ed7i \u0111\u1ea5t n\u01b0\u1edbc","32292056":"### T\u1ea1o t\u1eadp X, Y","bf66f6af":"### Ch\u1ecdn l\u1ecdc d\u1eef li\u1ec7u v\u00e0 plot","ecf923ae":"## Chu\u1ea9n b\u1ecb Data\n### Chu\u1ea9n h\u00f3a 0-1 "}}