{"cell_type":{"5a536378":"code","6b86409d":"code","c4427cd1":"code","b8bfc8fe":"code","7a2e8e14":"code","ae3c81e0":"code","e4028cb1":"code","eabe35de":"code","2333f5a2":"code","d5fab814":"code","329510c3":"code","23d4411a":"code","cdd18b2b":"code","89b9b431":"code","647970c9":"code","149895d7":"code","0ab2ed62":"code","9f68bebf":"code","eddeedeb":"code","1f5756df":"code","d9fe647c":"code","34f1f739":"code","f7c2d5ce":"code","f0b2db8e":"code","ee097905":"code","15d10598":"code","9a2975cc":"code","29560764":"markdown","6d13b987":"markdown","4637a71c":"markdown","cf095663":"markdown","0c4c7beb":"markdown","ab81171c":"markdown","f33f35ce":"markdown","10048b5c":"markdown","ec7dc184":"markdown"},"source":{"5a536378":"!sudo apt-get install git-lfs","6b86409d":"!pip install datasets transformers huggingface-hub kaggle","c4427cd1":"# I am uploading my model to the huggingface hub. If you don't want to upload the trained model to the huggingface hub, comment this cell\nfrom huggingface_hub import notebook_login\nnotebook_login()","b8bfc8fe":"import pandas as pd\nimport numpy as np\n\nimport torch\nimport transformers\nfrom torch.utils.data import Dataset, DataLoader\nfrom transformers import BertModel, BertTokenizer\nfrom datasets import load_metric","7a2e8e14":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ae3c81e0":"# read data to the pandas data frame\n\n# You can use either the farsnews1398 dataset or the farsnews1399 dataset or a combination of them\n\ndf1 = pd.io.json.read_json(\"\/kaggle\/input\/farsnews1398\/fars-news-1398.json\")\ndf2 = pd.io.json.read_json(\"\/kaggle\/input\/farsnews1399\/fars-news-1399.json\")\ndf = pd.concat([df1, df2])","e4028cb1":"df.head()","eabe35de":"# remove unwanted columns\ndf.drop([\"title\", \"subcat\", \"tags\", \"link\"], axis=1, inplace=True)\n\n# join all paragraphs together\ndf[\"paragraphs\"] = df[\"paragraphs\"].apply(lambda x : '\\n'.join(x))\n\n# concat the abstract to the body\ndf[\"paragraphs\"] = df[\"abstract\"].astype(str) + \"\\n\" + df[\"paragraphs\"].astype(str)\ndf.drop([\"abstract\"], axis=1, inplace=True)","2333f5a2":"df.head()","d5fab814":"len(df)","329510c3":"# unique categories\ndf[\"cat\"].unique()","23d4411a":"general_categories = ['sports', 'world', 'politics', 'foreign-policy', 'arts-media', 'social', 'economy', 'culture', 'regional-offices', 'scientific-academic', 'companies-news', 'education']","cdd18b2b":"df = df[df[\"cat\"].isin(general_categories)]","89b9b431":"df.head()","647970c9":"len(df)","149895d7":"df['cat'].value_counts().plot(kind='bar')","0ab2ed62":"# Encode categories and convert them to integer numbers\n\nencode_dict = {}\n\ndef encode_cat(x):\n    if x not in encode_dict.keys():\n        encode_dict[x]=len(encode_dict)\n    return encode_dict[x]\n\ndf['encoded_cat'] = df['cat'].apply(lambda x: encode_cat(x))","9f68bebf":"encode_dict","eddeedeb":"from datasets import load_metric\n\n# This variable specifies the maximum number of characters in each sentence. Longer sentences will be truncated.\nMAX_LEN = 512\n\n# If you have better GPUs, you can increase these values:)\nTRAIN_BATCH_SIZE = 6\nVALID_BATCH_SIZE = 4\n\ntokenizer = BertTokenizer.from_pretrained('HooshvareLab\/bert-fa-zwnj-base')\n\nmetric = load_metric('matthews_correlation')\n# This is a metric for classification task. For more information check this url : \n# https:\/\/en.wikipedia.org\/wiki\/Matthews_correlation_coefficient","1f5756df":"class FarsNews(Dataset):\n    def __init__(self, dataframe, tokenizer, max_len):\n        self.len = len(dataframe)\n        self.data = dataframe\n        self.tokenizer = tokenizer\n        self.max_len = max_len\n        \n    def __getitem__(self, index):\n        paragraph = str(self.data.paragraphs[index])\n        paragraph = \" \".join(paragraph.split())\n        inputs = self.tokenizer.encode_plus(\n            paragraph,\n            None,\n            add_special_tokens=True,\n            max_length=self.max_len,\n            pad_to_max_length=True,\n            return_token_type_ids=True,\n            truncation=True\n        )\n        ids = inputs['input_ids']\n        mask = inputs['attention_mask']\n\n        item = {key: torch.tensor(inputs[key]) for key in inputs}\n        item['labels'] = torch.tensor(self.data.encoded_cat[index], dtype=torch.long)\n        return item\n    \n    def __len__(self):\n        return self.len","d9fe647c":"# Split the dataset into training, testing, and validation sets and convert them to Pytorch datasets\n\ntrain_size = 0.8\neval_size = 0.5\n\ntrain_dataset=df.sample(frac=train_size,random_state=200)\ntest_dataset=df.drop(train_dataset.index).reset_index(drop=True)\n\neval_dataset=test_dataset.sample(frac=eval_size,random_state=200)\ntest_dataset=test_dataset.drop(eval_dataset.index).reset_index(drop=True)\n\ntrain_dataset = train_dataset.reset_index(drop=True)\neval_dataset = eval_dataset.reset_index(drop=True)\n\n\nprint(\"FULL Dataset: {}\".format(df.shape))\nprint(\"TRAIN Dataset: {}\".format(train_dataset.shape))\nprint(\"EVAL Dataset: {}\".format(eval_dataset.shape))\nprint(\"TEST Dataset: {}\".format(test_dataset.shape))\n\ntraining_set = FarsNews(train_dataset, tokenizer, MAX_LEN)\neval_set = FarsNews(eval_dataset, tokenizer, MAX_LEN)\ntesting_set = FarsNews(test_dataset, tokenizer, MAX_LEN)","34f1f739":"from transformers import AutoModelForSequenceClassification, TrainingArguments, Trainer\n\n# Load ParsBERT pre-trained model with the different head that is appropriate for sequence classification\nmodel = AutoModelForSequenceClassification.from_pretrained(\"HooshvareLab\/bert-fa-zwnj-base\", num_labels=len(encode_dict))","f7c2d5ce":"args = TrainingArguments(\n    #persian fars text classification finetuned\n    f\"pft-clf-finetuned\",\n    evaluation_strategy = \"epoch\",\n    save_strategy = \"epoch\",\n    learning_rate=3e-5,\n    per_device_train_batch_size=TRAIN_BATCH_SIZE,\n    per_device_eval_batch_size=VALID_BATCH_SIZE,\n    num_train_epochs=1,\n    weight_decay=0.01,\n    load_best_model_at_end=True,\n    metric_for_best_model='matthews_correlation',\n    push_to_hub=True,\n)","f0b2db8e":"def compute_metrics(eval_pred):\n    predictions, labels = eval_pred\n    predictions = np.argmax(predictions, axis=1)\n    return metric.compute(predictions=predictions, references=labels)","ee097905":"trainer = Trainer(\n    model,\n    args,\n    train_dataset=training_set,\n    eval_dataset=eval_set,\n    compute_metrics=compute_metrics\n)","15d10598":"# Train the model\ntrainer.train()","9a2975cc":"# Push the tokenizer and the model to my repository on huggingface \n\ntokenizer.push_to_hub(\"pft-clf-finetuned\")\ntrainer.push_to_hub() ","29560764":"We've made our dataset smaller by filtering out categories that we didn't need. Now we have 11 categories.\n\nHere, you can see the number of news in each category.","6d13b987":"### Train The Model","4637a71c":"Ok, as you see, we have lots of categories in our dataset. We don't need most of these categories. So I create a subset and work on a smaller set of categories.","cf095663":"### Import Necessary Libraries","0c4c7beb":"In this notebook, I will classify news in the \"farsnews1398\" dataset based on the category. For classifying news, I'll fine-tune BERT on the sequence classification task.\n\nBERT is a deep neural network architecture that has been pre-trained on a large corpus of English text. You can use this pre-trained model in different NLP tasks by utilizing its contextual representation for each input token by adding a layer on top of BERT for your desired task. We are doing sequence classification in this notebook, so we add a layer with \"cross-entropy\" loss on top of BERT to classify our input.\n\nFor more information about BERT, you can read [the paper](https:\/\/arxiv.org\/abs\/1810.04805).\n\nAfter the BERT paper was released, many people in the community started to pre-train a model with the same architecture in other languages, including Persian. In this notebook, I'll use the ParsBERT model that has been pre-trained on Persian.\n\nFor more information about ParsBERT, you can read [the paper](https:\/\/arxiv.org\/abs\/2005.12515).\n\nHere, you can see the architecture we are using for this task.\n\n![BERT-model-for-classification-H-denotes-BERT-segment-representations-from-last.png](data:image\/png;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8LCwkMEQ8SEhEPERETFhwXExQaFRERGCEYGh0dHx8fExciJCIeJBweHx7\/2wBDAQUFBQcGBw4ICA4eFBEUHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh7\/wAARCAHBAV8DASIAAhEBAxEB\/8QAHAABAAIDAQEBAAAAAAAAAAAAAAYHAQQFAgMI\/8QAWhAAAQMDAQQECgUGCAsGBgMAAgADBAUGEgcBEyIyERRC1BUWF1JWV2J2lLUhNXKTliMxN0GCtAgkNFFhkqLwMzZDSFNmcXXC0vIYdISHpMVFRlSBhrKRpeL\/xAAZAQEAAwEBAAAAAAAAAAAAAAAAAgMEAQX\/xAAgEQEBAAICAgMBAQAAAAAAAAAAAhITAzIBFAQiQjER\/9oADAMBAAIRAxEAPwD9lKDSNVNM48p2I\/f9rR5LRmJg9VmQ2gY8PQfGp0vyvpHdFCplAq1NmaWXNccrbX6llMgW6Ell7+Mn\/li4PYQfpuBMjTobU2DJZkx3gzB1o8xL7K28l+bLFevGxrXodowadEolavO457tNgTdu11qhwcN8QYgY5mADwhkHGalcm679tS46nalZONdk06BJrNEejROrvSXmeeMbIGfnN4GOH6+c0F1LXZeZeyBkwPDgPA+VURpJqJW7ouKnMt6gW5VilxT21GiuwdsCfT3sc+hkD2mboCXCWfY4xIlGbVvGtadaW3XV5FVps52XecqnxCehm0yzJOSQOvOkBmZs48eIcY4YZllkIfqRc2s1Km0elu1Kqzo0CFHDJ6RJeEAa2e0Z\/mVI6e6qvyNS6Na8i9qNekesi\/0OwIHVH4LzIGfGGZ5tGAHh21HWr31Eqn8HqramV6VbMmnPU0+rUZymb0DMJOAm6Znx54HwfYQfqJZVQVKtXtduo1xWradch0CBbgxm5Mt6m9cekyXmt7gHGAAABh7WajE3Uy+Zdt0inUxijR7m2Xk9a1QI2zONmDLx74AzzwxwPD9hB+hMw85Qh\/VfTNqScV6\/7WZfAzAhdqzIYGH6i4127Vj1yJRI0e4aizVKkOwt7Lai9XA\/2MyxX5z0duWgwrPl06dpVcVySjqs7OTBt0JTDv8AGXv8sfAg\/TsCSzLihKiPMvR3dmYOtHmJfZW4vzRbZahWBYlp0CmRKfRptzXTJZjQJuzfhTIboPOgHAfHhz45+wpW3U9R6tdj9hQLmpLEqgwGpNXrh0nM5L0gz3TIRt6IAOAHmeZ8ePKgtaoVamUwIh1OoRonWpIQ42+cEN68fIAdP5zPzV11+XNRbnuqv23SaTKZpfjZb+o1Og74AIYj7m38qy\/hzAJZhmAFnzqxKVcF527qTTrQuiqQbiar0GVIpktmFsgmMiNtAjZMcz4MC6QP8\/2+dBby48SrU2VUp1Liz4z8uBtAJkdt4SOPmOYZh08GY8v86\/O9V1cuSjOU+oP6iWhV6i9Ojs1C26XE3zbAvOgBCMgDPjAT5j4MtnKS7NEpd8T9etVRtevwKNEF6lE89JgdcJ54IYYgOzMBAfP7fLjggvGZVKfEnQoMmZGjyZzhBGaddETeIQyPAe3w\/wD8LUj3RbstqK\/DrtMdGdIOJFMZIflngzzAPPMcD4fZVWW1qFUrhn6cdfptJGoy6xUqZUtoM7zYy9GZezOOZcYZ4f1DUb0mrEmm2jYsVqLCf2VG+KlGcKSzmbPHJPMPMPg\/toP0FU6vS6ZBkVGoVCNDixjBt9150QADLDDMv1c4\/wBddUD2EGS\/KVFmXHbOlOqFZnTaPWdxd7zW2NIpXSy88cxkDeLjLsnswDsGHMak986sOeUit25Gv+iWcxQdyztdnU8pbs2QQZnw5gAgOYB0Bxkewuyg\/RCx2V+b6hrHXajpzbdf2vxKDGlVKTBr9dZgPTosDc8hgHmPHhgZ54ZqyNH7gqlbosqXULjt2547cnCLVaQeOY4CWDzPSYtOjmWXQXLggmtRqUGAw05NlMx23n247O108c3TLEA+1mo\/V9StO6VUXqZVb5tyBOaPB6PJqbLZtl\/MQkajleknWP4RNBt57bt6lQ6G9XdjOzkOS891Zoy+wG+\/rqu7ZuCj0fUDUmNU9NriuY3LkNwJNNogzm2g3LPARnyn28PbQX2FyUByjjXWa3TX6UZgAS2pIEyWZ4D0HsLDn4f9qkCovSSynqhSL\/GrWtIty3Lql5Q6G8Ag4wybOBvYj\/gTM+LDnDD7KmH8H+vy7o0jt2q1Q9j07YyceS7+fa64y8bJn+2TWf8A90FiIiICIiAiIgIiICIiAiIgIiICIiDChWlVov2bbcimP1AZhPVOZOzBnAB3zxnhj+2psiCA6mWdKufbRp1EqjdIr1EmdbgSyjb5rZmBAYGGYZgYbcPzrhwNPbjqFXqdxXTc4FXJNKOkQttEjnGZpwGWwieDMzMncwA8yLs4q2kQU1H06vOqXLbNSvW4KHPC3X9kiLJp1NNmZLIAwDfOmZ4BtzMjAOdfANJKm9Tbho0i4WmosuvuV6iSWYfRIp0zfb4CPjweAT28nB2\/6MLsRBW1sUG\/zuqLV7vuqBth09k2madR47sdmQZ\/RtdezcPPo7ALl7NKZOz+Dw7pR4aY6w7GNnr3VuDjeN7kVoy5DEdhx95xtlpoMzMzwEftKlK1cNzXVOGr23U36JSYm3OmAbW3aFRP\/TSQ4D3PYAPM4+fAACR12ybnhX5U7vsis0qI9XGWWqrDqsE5DJmyOAPAYGBhtw2YYcpLTpOkhwINv7PDvW5sC6DuOpS3Y2Bz5JgYHwB9Ac4efyKVWFdTFzMONPRzp9Xg7RGdTiPM2T7Jj57J8eB8vD2DEwGbIChWlFpPWXafgN6ohNIpsmVvAaw\/wzxu\/wDGpqiCG3pajtwV21qk3UAjeA6t4QMMM99+RNrD2OdcC47LuZq93rysiuQINQlwghVGJU4pvx5Oxsywd6QMDAxzPl4VaKIKPqGjtYmWu1G2Xhu7kcuRq4ZdZ6nkG2QHAANM9PCAAADsDPsLp+Tq4Lhrb9Zv6vQ5MgaXIpFPZpEMmWYgSeB58MzM98QAA8fAHtq3UQUA5pRes7TqHY8i67fhUykOxyilBopiczcGBj1jYb2A8nFh2+3zgfemWNfdM1Duq7LUumlxvGLq21+JUKWbws7mMDWwwMHg6T5\/oLh\/N5quFEFT0HSsKMdl9Wq77523OlzZbzoflqg\/JZMHHNvmcbuXa4eBaluaRyqXT7VhnWGCOg3DLq57QjEAvb7fcAcfB\/hv7KuNEFH1jSStz6JetstXDDCkXLVfC7WcMzeivG8y84BFngQfkiw4O2u3WLKuqnXvWLksSuUyLtrW5OpRKrCN5negG7B5ogMMNuOGYfTn0bVaqIKoKzL8hUehDRb\/AH36zS3H3pkipsG7HqZvfnB5oDEgEdu3ZhiZYY4\/StzS6xJVqVq4rgq0unPVavPMlJGmQurRGxZDAMAyM8+I9pmR9r+hWWiCqbvilb+uFsXmew+oVOAduzHdp8DJke+jZ\/bPMM\/PMA7akFg2i7bNYuye7UAk7K9WTqICLOG5yZAMfb5FL3AAwwMMw8xfZBHL2rke17XqFddj7ZG2IztJmOOzjkPbeBpkPbM8AH7S5WitsP2fpZQKBLPOZGjZyi2\/reePfPf2zNS7cgQYGAc+eOC2kGUREBERAREQEREBERAREQEREBERAREQEREBeT5F6RBX+qVq1y8aZFplOr8WnQwe3s1mRTTkhNHp4WzweDg7Rh2+Hp4cwOO2YcuqUV1+odW2So8+XEeKO1umXOrSXo3RjkWIEDOWOWzDPnNXEqy0sib23qifn3HW\/mslBE6dbl1XPfNSqNHuCmUI7cqoRGD8FHIedZONGkmBn1gAID32Bhh2APn41eg7zoDL9tQfSwN1cOoDfmXEz8qgKeoCIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgiWoVdk27bDlTgQgnSdsyJDaaN\/a0BnJkssDkeB9H+F8w1xPGvUf0LtX8TSe4Lc1v\/wARWfeCifNYq+6u4Yi+ynmvBzfGzUf0MtL8TSe4J42aj+hlpfiaT3BdJFdphTutzfGzUf0MtL8TSe4J42aj+hlpfiaT3BdPt4dtYTTBvtzPGvUf0MtP8Uye4KFHblf30h5q02I+\/lPSHWompVXjtb54zMzBoGQAMzIj4PPVkLPYA\/PDMPbU9EG60QtTxwtliY1S7Mt7+OSesSXpd6T5Lzzu7AM9pvQzPbwNCH7C7njXqP6GWn+KJPcF0\/8AnwTMMM81DRBvtzPGzUf0MtL8TSe4J42aj+hlpfiaT3BdJE0wb7c3xs1H9DLS\/E0nuCeNmo\/oZaX4mk9wXSRNMG63M8a9R\/Qy0\/xTJ7gnjXqP6GWn+KZPcF1DDDn+wnbU9EG62jbd1XA\/esW3bht6mQetU+TOZkQKqcvZt3LjIGB7DjtYfyj+yrA2qs4f6are93Kr+801WZs\/MsXJ4xr\/ABpi83pERRTEREBERAREQEREBERAREQEREBERAREQEREBERAREQQTXD\/ABHZ\/wB\/0T5rFX3+3yL4a4f4js\/7\/onzWKvstPCzcykbJk33dTVZqD2qgUcY9YlxAieCYZ4Ay8YBxmGakN11u6qY9bFi0StMz7kq++N6tSYwYRowcZvbkMAz4wAA5D7aj2kWnFnVul1yqXNaUOZOdr8899LZ4zDfHhz9jBdzUOnSrXu60r1pVJky6XRoz1LnxITObzMYwDAwAOcAMOPDM8Fag34tO1It2u0gguI7xpUuSDNTakRY8Z6OBh\/KWjDDMQx2ZhxH9Cnz7psxnXgA3jADMADnP2AVbjqXsuOt0ulafQX6ob0kDq0uZT348aJHDLYeRmAGTx8AAHGuszbN4U+oy6mzfNSqp7AeOLTJbLIRjMwPADMAA8APDt9hItHBBLFrV83zbGy46RqVT2q3xveLrUCObUcwP+TPZ\/luPAMzMw5+DpVhTb2iUChUZ67478Su1AQHZSIjRy3ikgAEYNAGeeGfOPYw89VTWKppfcdIHZfljT4F7g30yWYNHkBJOSHBmy8yPGGfIRmYci6NEbuS1KpYl3agtTJLLdAeplQkgyUg4LxmBgbuGZ8YBgZ+f2+NMl2CUXfqpTGdMriuO2+uHVKWybJx3ae9vojxgZhvmTDMA7eZ8C4Fm6g1mHcdo2\/U5lxVcawy9IlTJ9BdjO57toQwEAD8kB7DMz48QPiNc26G5NzxNVbtplMmDSJ9vswoZuxjaOc8AGZmAGGZgGYBmYcfYUhrj\/gjUfTCrTW5YQhpkmI461GdMAeebZAA4APnPtHwcBqFVZhDuStY7JYcdN2RUijsSTiS5bcF7azEdA8CB57DAOPz+xiXbXTt7UW2q3cDdDhvy25ElknoZyYLsdqcAYZmyZiAGHEJ8HOCqt6nyx\/g2X\/FCnv9YeqdSMGtyeb38ZPjww4+wpre0SUGqOlz8OEbwQ2akB4BgAZw+ADPkDM8AU\/shhDelav2RHM3DfqZ0sJPVzq4U144AHnh\/KcMOfgzzwUhcu2gNXFUaHMljDn06GE5\/ZIAwDZG7bwGfAYAfAfmdGC\/Nl21Sq3Do9VIMqq3GVdJkzetWmUMY0SL+WzPa5+RzwAAzyM8zNTjWOgT9Sq5BpNv0xkzt2H1uTOkNmATDMOCAHn54BmfY4EycwXJa9bg3HQYdcpRPdVmBnGN5g2jMOnhPA+TPn9sORdbtrh2PW41x2tCq0OE9BB1kAOPIZwejmHOyYexx\/bXc7au40LcWD+mq3vdyq\/vNNVm\/qVZQf01297uVX95pqs39Swc3drjqyiIqlgiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiCBa4f4jNf7\/onzWMthZ1Ko9Ur1q+D6O1GOcM+BLZGY6TLR9WmMvEBmAGQZg10fQG1cbqmqPoxZ\/wCJpPcFp4LiOynmjN2f7gn9\/MXG6pqj6MWf+JpPcE6pqj6MWf8AiaT3BXboU6bdkAWFxOqanH\/8sWYf\/wCTSe4Li3Fc11UGoU6HWoNjQZNQexjNPXNI6CLk\/wDoeAOMAzLtlh203wabTb+\/Geae3hn+xz\/bXF6rqh6MWb+KJPcE6rqh6K2b+KJPcE3QabdrDAMMAwQ+M\/PzPzFxuqao+jFn\/iaT3BOqao+jFn\/iaT3BN0Gm3Z9jn+32\/wDgTAPt+Z5643VNUfRiz\/xNJ7gnVNUfRiz\/AMTSe4Jug027OHsB7fB\/\/hPb7f8Aft9tcbqmqPoxZ\/4mk9wTqmqPoxZ\/4mk9wTdBpt2f7\/YWFx+qao+jFn\/iaT3BOqao+jFmfiaT3BN0Gkgfpnt73cqv7zTVZira2qHd7moMG4bhp9Dp8eHSpkEG4VSeluEbz0Y8tuUdrYAfxc\/66sjasV3nbTHjGXpERRTEREBERAREQEREBERAREQEREBERAREQEREBERAREQERYQYy2LKr2wLrqVx3Pe9LlhFFih1cYcXayBARt7kD4+k+fM\/ZS2rpqNS1Zu+1JIx9kGjRoDkXdiWxwjfB4zzL83Y2cqBqtf9IsGjtOz5UQKlOPdwWJMsGQePZ0bTIzPhAA6eMvsiPEYCq5o8OFcFPfrNSnxLjkVZswkzWzA2XgAzDcs8\/wCRA8wAA+2fGZmv0KY\/QSo+xmcoFWMPSKscnB\/8Sk8CDRtnUmmWJcca0LlueHJgEYMw3ZE0CmQTPDBl4DPNxk+HB7mDt8HGr+DA+3mq40VDCffrJ9i4wD\/+tgKx\/N50H0REQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAXk+RelhB+dLP02tK9tT9TZ1yU+TJkR6+DLJNT5Mbg6szn\/AIEwyXX0Ut2j2prrqLRqFGdjwmYFIMAdkOu7czB7tumZq6W2m2tpkDYBmWR4jj+0si03vjfEAB0+HPDiQbapzTxrOlVQ\/wDWOt\/NZKuNVZpk1nQamf8ArHW\/mslBu6OhhVL9D\/WNv5VAVjKBaUhhX9QB\/wBYmflVPU9QEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQefoTLYopqrUpVF0xuqr097YxNp9GmSI7hdh0GTMC\/rCov4Gun1oXT7H8Wpf0\/wDo\/wDnU4jNCrmFp9KdKq7wTdXrVu34KldzTwTdXrVu34KldzU9NubpWhkoBpK1nbFRP\/WOt\/NZK53gi7fWpdnwVK7mobt0gLbIkOs6p6mRBkSXpDzUWshHazeMzMwaBkADMzM+H+dc027uhZemnDc+ofvEz8qgKcdKpS2LAqVtNS2aTqbe23rcnrEl6ScGS887gAZbTejGe3gaaDn7C7Xgm6vWrdvwVK7mu6bN0LR6U6VV3gm6vWrdvwVK7mngm6vWrdvwVK7mmm3N0rRy2J9Cq7wRdPb1Uu3H\/uVL7mseM1Z\/7M3jn1rZ4a8T\/CfWtyH8q6nvt5hjhz8X5sVCo8w7Fza0clnpVWeBrq6f0oXSH\/hqX9P\/AKP\/AJ168E3V61bt+CpXc1LTbm6Fo9KdKq7wTdXrVu34KldzTwTdXrVu34KldzXdNm6Vo9KdKq7wTdXrVu34KldzTwTdXrVu34KldzTTZulaPSnSqu8E3V61bt+CpXc08E3V61bt+CpXc002bpWj0p0qrvBN1etW7fgqV3NPBF1fnPVS7Mf+5UruaabN0rSWVENLKjOrOmlr1ipyNj8+oUeJJkvbBEc3XGgMtuwR4dnESl6pWCIiAiIgIiICIolqpU5VF0wumr017YxNp9GmSYzh7OR0GTMC4vaFBK+lOlVZ4Gurp\/ShdIf+Gpf0\/wDo\/wDnXrwTdXrVu34KldzVum1e6Vo9KdKq7wTdXrVu34KldzTwTdXrVu34KldzXdNm6Vo9KdKq7wTdXrVu34KldzTwTdXrVu34KldzTTZuhaPSnSqu8E3V61bt+CpXc08E3V61bt+CpXc002bpWj0p0qrvBN1etW7fgqV3NPBF1fnPVS7Mf+5UruaabN0rSWVENLKjOrOmlr1ipyNj8+oUeJJkvbBEc3XGgMtuwR4dnESl6pWITrt+hO+\/duo\/uxr05zrzrt+hO+\/duo\/uxr05zrT8ZTzdGERFpYxFlzkVc6jVm4Jt90bT+2ag5SpE6K9UqnOBgDejxgPAAZA+DMzPDM+TnTNOIWN\/yZrCr2nWxeVs3PTH6ZdlTuCiPHuanErLwG8yGHA8yYAGHIAGCsJcLERF1AUN\/wAyf\/y5\/wDbVMlDf8yf\/wAuf\/bVm+T+WnhTNznWFlznWFoVCIi6Czh\/Sqy1sp9Zp1qV+7KXeVfpzkKnnIYhR9z1bYYAfOBsmf8AbXV0zt6pwocGtVK8bgrYS6eH8UlmzuQM8DzDAAMOMMP21zZ9sXNf6TdFENUqxdtKoLrlpUlqXLNl43p8h4AZggAZ5mHOZ8+AB2w41s6TTZVT0ytipz3zenSKTGeeeLnM9yGZn7aVyffEwSZERWX0I7mhn6FLE926d+7ApooXoZ+hSxPdunfuwKaLym9lERAREQEREBQrXT9CV+e7lR\/dnFNVCtdP0JX57uVH92cQZc51hZc51hel+GC+4iIjoirPWun12nWpcV30u86\/TjhU85DEKPuerbDAD5wNkz\/trq6a29UocOJWp95V+sbJcAP4tLcZ3IGeB5hgAGB5h\/bXP9+2JcfTJN0VO603bdls6j0E7f2vTKXEpkmo1anM8ByWWTADw9sAPMPsLv3DdW2Xdem0ihVEXKVXJUlx3a1yOtdVN0BP9ri9gwUc3MFhoiKf4dNDP0KWJ7t0792BTRQvQz9Clie7dO\/dgU0XmtyF65foTvr3dn\/uxrLnOsa5foTvr3dn\/uxrPb+3yLT8Zm5mERFpZhVtqPEqtC1Ao+odLpUqrx49PeplViRAzkdWMwMDZDt4GHGHPgrJRLhPNXDd53HdN00mn2tb9ZptMZlb6sVGrQDjBuQA\/wAiyB4GZn5+HBh21Y6IkQXYiIiAob\/mT\/8Alz\/7apkob\/mT\/wDlz\/7as3yfy08KZuc6ws9v7fIsLQqERF1WiWtESVUNJ7phQIr0yQ9TXgZZaAzMzMOAAAOMzXbtRp5m1aMw8BsvBCZAwMMDAwAOAwXSRME4c262X3bVqzDIGbxwngAADMzMwPgAFydIYsmFpXa0KZFejSWaVGaeZdAwMDAAzAwPjA1KETDOzMREU7\/hDGhf6FbE926d+7ApqoRoX+hWxPdym\/uwKbryrb2VhRur3FRaZcFHoE+buanWCeGAzsAz3u5DM+Pox4Q4uNfSm3HSJ1x1C3I0wTq9NaaemR8C6Whe4gQSBZUPi3zaz9pTrraqjZ0Wn77ZJkbg8W9yeLnSGOfB0L7VW8aBToFCmSqmLUeuSmYdNd3RlskOvBm0HT0cGXtoJRkgFkuAVx0ULxbtMpuFZdhFOCNgf8nzwz83nS17jotxsy3qRL2SwgzHYMksD2bW5DZ4GHGgkKhWun6Er893Kj+7OKaqFa6foSvz3cqP7s4gy5zrCz2\/t8iwvVjowX3ERFBBEdaIkqoaT3TCgRXpsh2mvAyy0BmZmYcAAAcZmu3ajL7Vq0lh4DB4ITIGBhgYGABwGC6aKWv7ZJ5\/TFA6zAnPa8UGd4PfeprVBltPyNyZsgZvMngZ8mZgPIoC3ZdwWtrfa1LptPek2UE+TUYpssmYU4zjGDzJn2AzMMM\/PV9Io6\/0bPpiIiKd9CGNC\/0K2J7t0792BTVQjQv9Ctie7lN\/dgU3XlW3ojqlTZ1c01uej01nrE6bR5kOM10iOTpsmA8XZ5lG\/DN24fouu3j58JlL74rR6E6VKLqEPMZqs8M3b6q7s+MpXfE8LXV6rrt+NpXfFaiyp7rQ0wqrwtdXquu342ld8WPDN2+q66fjaV3xWVLkMR2HH3nG2WmgzMzPAR+0qUrVw3NdU4avbdTeolJibc6YBtbdoVE\/9NJDgPc9gA8zj58ADu6zTCQ+Gbq9V12\/G0rviz4Wur1XXb8bSu+Lv2FdTFzR3Gno50+rQdojOpxHmbJ9kx89k+PA+Xh7BiYDNk32aYVV4Wur1XXb8bSu+J4Wur1XXb8bSu+K1UXN9mmFU+Gbq9V12\/GUrviz4sV\/\/szeJnU9vhvxO8F9WzDp6z1PdYZZ4c3ayxVqdCx0qN3mn4iZVd4Zu3D9F11Znz\/xyl98XnwtdXquu342ld8VqopbrQ0wqrwtdXquu342ld8TwtdXquu342ld8VqrTlyGI7Dj7zjbLTQZmZngI\/aXd1mmFa+Gbt9V10\/G0rvieGbq9V12\/G0rvij1auG5rqnDV7bqb1EpMTbnTANrbtCon\/ppIcB7nsAHmcfPgAWDYV1MXNHcaejnT6tB2iM6nEeZsn2THz2T48D5eHsGJgLdZphwPC11eq67fjaV3xPC11eq67fjaV3xWqib7NMKq8LXV6rrt+NpXfE8LXb6q7t+MpXfFaqwm6zTCI6V02dRNMbWo1SZ2MT6fRocaS1s4sDBkAPox9oVL0RUrny\/rrOC+iIPkm3mH9ftL6og+GH\/AFr3gvoiAofqjTpta02umi01rZImzaNMiR2ukRydcZMADL8w8wqYIgqrwzduH6LrqzPn\/jtL74nha6vVddvxtK74rVRW77U6YVV4Wur1XXb8bSu+J4Wur1XXb8bSu+K1Vpy5DEdhx95xtlpoMzMzwEftLu6zTCtfDN2+q66fjaV3xPDN1eq67fjaV3xR6tXDc11Thq9t1N6iUmJtzpgG1t2hUT\/00kOA9z2ADzOPnwALBsK6mLmjuNPRzp9Wg7RGdTiPM2T7Jj57J8eB8vD2DEwFus0w4Hha6vVddvxtK74nha6vVddvxtK74rVRN9mmFVeFrq9V12\/G0rvieFrt9Vd2\/GUrvitVYTdZphEdK6bOommNrUapM7GJ9Po0ONJa2cWBgyAH0Y+0Kl6IqVwi85L0gLyfIvSIK\/1StWuXjTItMp1fi06GD29msyKackJo9PC2eDwcHaMO3w9PDmBx2zDl1Siuv1Dq2yVHny4jxR2t0y51aS9G6McixAgZyxy2YZ85q4lWWlkTe29UT8+46381koInTrcuq575qVRo9wUyhHblVCIwfgo5DzrJxo0kwM+sABAe+wMMOwB8\/Gr0HedAZftqD6WBurh1Ab8y4mflUBT1AREQEREBERB5PkUB1StWuXjTItMp1fi06GD29msyKackJo9PC2eDwcHaMO3w9PDmB2AiCnbMOXVKK6\/UOrbJUefLiPFHa3TLnVpL0boxyLECBnLHLZhnzmuRTrcuq575qVRo9wUyhHblVCIwfgo5DzrJxo0kwM+sABAe+wMMOwB8\/GpZpZE3tvVE\/PuOt\/NZK6Glgbq4dQG\/MuJn5VAQTgd50Bl+2vqiICIiAiIgIiICIiAiIgIiICIiDyfIoDqlatcvGmRaZTq\/Fp0MHt7NZkU05ITR6eFs8Hg4O0Ydvh6eHMDsBEFO2YcuqUV1+odW2So8+XEeKO1umXOrSXo3RjkWIEDOWOWzDPnNcinW5dVz3zUqjR7gplCO3KqERg\/BRyHnWTjRpJgZ9YACA99gYYdgD5+NSzSyJvbeqJ+fcdb+ayV0NLA3Vw6gN+ZcTPyqAgnA7zoDL9tfVEQEREBFhZQRO9LpbthmnbfBVTqr1RmdTjRYO5zM9y89t\/wxgGODJ9tcjyiVT1X3n99S++LOrn15p\/7xPfKp63Vdw8OcKebkwaXlEqnquvP76l98Tyi1T1XXn99S++LdRXeqhuaXlFqnquvP76l98ULOLTiefeZ051Qj7+S9INqJdgRmt68ZmZg0FUERzIzPhHtqwUT1Tci9s1jbbjMtmk6YX10y5HWZD0irQZbzrmAN5bXXp5nt4GQH9hdvyi1T1XXn99S++LdRPVNzS8otU9V15\/fUvvieUWqeq68\/vqX3xbqJ6puaXlFqnquvP76l98Tyi1T1XXn99S++LdRPVNzS8otU9V15\/fUvvieUWqeq68\/vqX3xbqJ6puaXlFqnquvP76l98Tyi1T1XXn99S++LdRPVNyvji04nn3mdOdUI+\/kvSDaiXYEZrevGZmYNBVBEcyMz4R7a7Ns1jbbjMtmk6YX10y5HWZD0irQZbzrmAN5bXXp5nt4GQH9hShE9U3NLyi1T1XXn99S++J5Rap6rrz++pffFuonqm5peUWqeq68\/vqX3xPKLVPVdef31L74t1E9U3NLyi1T1XXn99S++J5Rap6rrz++pffFuonqm5peUWqeq68\/vqX3xPKLVPVdef31L74t1E9U3NLyi1T1XXn99S++J5Rap6rrz++pffFuonqm5peUWqeq68\/vqX3xPKLVPVdef31L74t1E9U3NLyi1T1XXn99S++J5Rap6rrz++pffFuonqm5peUWqeq68\/vqX3xPKLVPVdef31L74t1E9U3NLyi1T1XXn99S++J5Rap6rrz++pffFuonqm5XxxacTz7zOnOqEffyXpBtRLsCM1vXjMzMGgqgiOZGZ8I9tdm2axttxmWzSdML66ZcjrMh6RVoMt51zAG8trr08z28DID+wpQieqbml5Rap6rrz++pffE8otU9V15\/fUvvi3UT1jc0vKLVPVdef31L74nlEqnqxvH7+l98W6iaINzkv6jPx5EIKjYt0U2PJmR4PWn3IJg2488DIZ4STPnMOySspVPqP9TU\/3lonzWMrY\/Us1xgui8\/CvdW\/rvT\/AN43PlU9by0dW\/rvT\/3jc+VT1vLRwdFPMIiK9mEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQERFOBHNRvqSne8dE+axla6qjUb6kp3vHRPmsZWusHP3bOHor3Vv670\/wDeNz5VPW8tHVv670\/943PlU9byt4OiHMIiK9mEREBERAREQEREBERARFn\/AK0GEWfb7CwgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIpwI5qN9SU73jonzWMrXVUajfUlO946J81jK11g5+7Zw9Fe6t\/Xen\/ALxufKp63lo6t\/Xen\/vG58qnreVvB0Q5hERXswiIgIiICIiAiIgIiI6rdjW3Tt6MEwKjUAhHx9ZOkzAZw88z3OHAf7CkdzX3bNuwaZNqM0jaqn1ecSO7I32YZ5huQM8MONUvpeGq8v8Ag90+n2zT7Pk092nvMsdYkvdZMDM8+Aw3Of2zwWHZoy7X0WlWOyDrwvPNQgqZGzxsxjB7MgEj5wPk7arzXYLct\/Uq2a9V49Mprda2yJGeG+o0lkDwDPjM2cA5MFqSNXbKbnS4QyatIOJJdjvFHo8t0QeA8TDMGTA+MFuWpI1OerABdVJtaNTsDN46dMeeezw4OAwwwVY2HXNQ6RSr0l2zadOrsJm5ao70bagbUkz3pZgA4GB\/18zTMwWczqXaMi2Qr8OfIl085PVM48F110HgEzIDZECMMMe2HbDz1z6frJYs6S5Ghv1h55t\/cuAFEl8B+YX5HgPk51qaAxuu0Gp3sdUp8+XcszbNeCGBiywYDhugz48+DjMgzXz0cebjz9Tnt2Zg1dkk8ADMzAGWeAPP+wmdmEJ9clbpluUKXXarK3NPghvXngZM8A+wHGotB1esOVMiQts+bEOWYhGKbTJMdkzI8RDMwAONRHV29IV06M3oxGotx002qZmZ1SmvRg5w4AM+c1ytVA1Jf0w27bnptsnbIAy9U\/BMh453VgMDM2t8AAB8Hn+fgl25gv8A\/wChM\/M7aqK\/rgi1O5WIrN13QcU6UzJZpVqwzKYeef5V10APAPpDAMwD7aj1MuK\/6rpSZw3bknu0+5HoNSKK203V9kBkz5A5N9yAWH2PbXc0Na\/UVADf7lu6c3pUqRcdZq1RpwsdXpddhmE6nE84DOzMjAd8OZiYDhw4YZ8a3Leql2U+6Lf2U1rUiqNSZoNVsa5TMI2B88kDx\/ImB9gOxsPzEzNa80RFNAREQEREBERAREQEREBERAREU4Ec1G+pKd7x0T5rGVrqqNRvqSne8dE+axla6wc\/ds4eivdW\/rvT\/wB43PlU9by0dW\/rvT\/3jc+VT1vK3g6IcwiIr2YREQEREBERAREQEREFVUXR6VTaGzQImpV5tUloDaZjR3I4Yh7B7ng5zXXrWl9KkUW3aZQapU7eC3DM4LsMwIhzAwMzIgPMzzPP7anyLmEJ52hNvWNXaZVI8yTqPc1SjsnmcSSEbcvcHbwDNdmy7Zi2vHqLMN554J1SkVEzdw4HnjzMAwDk8xd1F3WZoxaVmwrartcn02TKCJWX+svQSMCZZe5DMODgM+c\/7C+9o2tFt6XW5LMl546zUzqLwPYHgZgAYBgHJwKQImszce+LejXdaVTtye89Gj1FncvPNYZhycn9RQt\/SM6hC2Uu49QLvrFJ4N\/BOSy0EkA7BmAAZh+2rMRcwgztB6lYGwrmfr9CuWrW\/IqMdmNUBiBHIJAM54GAvAeBgB4Z9gA89aEHSOmQaBspsSuVlh1msnV4c0XwN6PJwwPjMDzA+PMDA88+NWOia4M7QRvTOlymK0N01GdcsusQggypMvAMY4GZgDQMgABgfHnxlmlH08Nmr02bXbvrlwNUct5TY81xrBosDACPAAN4xEiEDM+0Z9tTtEwgzsREXUBERAREQEREBERAREQEREBERTgRzUb6kp3vHRPmsZWuqo1G+pKd7x0T5rGVrrBz92zh6K91b+u9P\/eNz5VPW8tHVv670\/8AeNz5VPW8reDohzCIivZhERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERTgRzUb6kp3vHRPmsZWuqo1G+pKd7x0T5rGVrrBz92zh6K91b+u9P8A3jc+VT1vLS1Z+vLA943vlk9bqt4OiHMIiK9mEWcP6Uc4OdBhERAREQEREBERAREQEWcP6Uc4OdBhERAREQEREBERAREQEREBERAREQEREBFnD+lHODnQYREQERZ7CnAjeo31JTveOifNYytdVRqN9T073ionzaMrXWDn7tnD0QrUG3KhXwo7tJqkWmS6TUDmtuTIZyWj2FHeZINog812ZB\/Tl2VzfFXUf0ztP8LPd+VjbE27VX4vzHVPHJXPipqP6Z2n+Fnu\/p4qaj+mdp\/hZ7v6sZC5V3dZhCsZNv39FjvSZN7Wcyy0Gbpla7wCP05c3XlA6LcGo1UhSp0Wq203A2me2nvv0KS0cpnHHYe0et8ImWeGWZY8ZYkWwdtk6pWrXLxp0amU6vxabDB7ezWZFNOS3NHp4WzweDg7Rh2+Hp4cwPgWbtlVSjOyJ3VtklifLivFHZ3TTnVpL0boAcixAgZyxy2YZ85pnZhDSsl6+bljmLl1WtBrEHZhPp223HiJk3MsTE9szjaLjwMMM+QsTEwGT+KmovpnaX4We78odAtu57mveoVKj3BS6EduVMIbB+CnJDzrJxo0kwM+sABAe+wMMOxnz8avJvPoDLm7aZ2YQr7xU1H9M7T\/AAs939PFTUf0ztP8LPd\/VjY7ETdZhCufFTUf0ztP8LPd\/TxU1H9M7T\/Cz3f1YyLm6zCFc+Kmo\/pnaf4We7+nipqP6Z2n+Fnu\/qxkTdZhCufFTUf0ztP8LPd\/TxU1H9M7T\/Cz3f1YyFyru6zCFYybfv6LHekyb2s5lloM3TK13gEfpy5uvKB0W4NRqpClTotVtpuBtM9tPffoUlo5TOOOw9o9b4RMs8Msyx4yxItg7bJ1StWuXjTo1Mp1fi02GD29msyKacluaPTwtng8HB2jDt8PTw5gfAs3bKqlGdkTurbJLE+XFeKOzumnOrSXo3QA5FiBAzljlswz5zTOzCGlZL183LHMXLqtaDWIOzCfTttuPETJuZYmJ7ZnG0XHgYYZ8hYmJgMn8VNRfTO0vws935Q6Bbdz3Ne9QqVHuCl0I7cqYQ2D8FOSHnWTjRpJgZ9YACA99gYYdjPn41eTefQGXN20zswhX3ipqP6Z2n+Fnu\/p4qaj+mdp\/hZ7v6sbHYibrMIVz4qaj+mdp\/hZ7v6eKmo\/pnaf4We7+rGRc3WYQrnxU1H9M7T\/AAs939PFTUf0ztP8LPd\/VjIm6zCFc+Kmo\/pnaf4We7+nipqP6Z2n+Fnu\/qxkTdZhCufFTUf0ztP8LPd\/TxU1H9M7T\/Cz3f1YyJuswhXPipqP6Z2n+Fnu\/p4qaj+mdp\/hZ7v6sZE3WYQrnxU1H9M7T\/Cz3f08VNR\/TO0\/ws939WMibrMIVz4qaj+mdp\/hZ7v6eKmo\/pnaf4We7+rGQuVd3WYQrGTb9\/RY70mTe1nMstBm6ZWu8Aj9OXN15QOi3BqNVIUqdFqttNwNpntp779CktHKZxx2HtHrfCJlnhlmWPGWJFsHbZOqVq1y8adGplOr8Wmwwe3s1mRTTktzR6eFs8Hg4O0Ydvh6eHMD4Fm7ZVUozsid1bZJYny4rxR2d0051aS9G6AHIsQIGcsctmGfOaZ2YQ0rJevm5Y5i5dVrQaxB2YT6dttx4iZNzLExPbM42i48DDDPkLExMBk\/ipqL6Z2l+Fnu\/KHQLbue5r3qFSo9wUuhHblTCGwfgpyQ86ycaNJMDPrAAQHvsDDDsZ8\/Grybz6Ay5u2mdmEK+8VNR\/TO0\/ws939PFPUj0ztL8LSe\/qxsdiJuswhVcqyr1qbkBmr3bQnoMefEluMx6C6y4XV5ISBACOWewMiaAeXlVqdCbFnaoXeZM\/4ysIoDetzSIssbatzcybgeHPaRhm1Aa\/NtkPcYf04hnkf2czBEZpp70p0qq26LdeAZ6oXTl28YdL7n\/cF78E3V61bt+CpXc1dptXuhaGSrXSyJvbeqJ+fcdb+ayV8fBF2+tS7PgqV3NQ09HtpyJDzOqmpsPfyXpBtRayEdrfPGZmYNAyABmZmfB565pt3dCyNMA3Vw6gN+ZcTPyqAp30qlbXsGpW4zJZpOpl67etyesSXpJwZLzruAhkZvRjPkaaDn7C7Pgm6vWrdvwVK7mu6bc3QtHpWMlV\/ga6u3qjdR+x1aldzWrKdu62yYrWy4qzdcVjb0zKdKixgNxn9b0fqzIHmH58CyzHIMMjAlzTZuhbqLm0mpQqxS41TpsluTCkgLrLrW3IXANdJVLBYRQG9bmkRZY21bm5k3A8Oe0jDNqA1+bbIe4w\/pxDPI\/s5mCIzE96U6VVjdGu3AM9Ubqz7eEKl9zXrwTdXrVu34KldzV2m1e6FoZKtdLIm9t6on59x1v5rJXx8EXb61Ls+CpXc1DT0e2nIkPM6qamw9\/JekG1FrIR2t88ZmZg0DIAGZmZ8Hnrmm3d0LI0wDdXDqA35lxM\/KoCnfSqVtewalbjMlmk6mXrt63J6xJeknBkvOu4CGRm9GM+RpoOfsLs+Cbq9at2\/BUrua7ptzdC0elOlVd4Gurt6o3YfsdVpXc1qynbutsmK1suKs3XFY29MynSosYDcZ\/W9H6syB5h+fAssxyDDIwJc02boW6i5tJqUKsUuNU6bJbkwpIC6y61tyFwDXSVSwREQEREBERAREQFhFAb1uaRFljbVubmTcDw57SMM2oDX5tsh7jD+nEM8j+zmYIjMT3pTpVWN0a7cAz1RurPt4QqX3NevBN1etW7fgqV3NXabV7oWhkq10sib23qieHPcdb+ayV8fBF2+tS7PgqV3NQ09HtpyJDzOqmpsPfyXpBtRayEdrfPGZmYNAyABmZmfB565pt3dCyNMA3Vw6gN+ZcTPyqAp30qlbXsGpW4zJZpOpl67etyesSXpJwZLzruAhkZvRjPkaaDn7C7Pgm6vWrdvwVK7mu6bc3QtHpWMlV\/ga6u3qjdR+x1aldzWrKdu62yYrWy4qzdcVjb0zKdKixgNxn9b0fqzIHmH58CyzHIMMjAlzTZuhbqLm0mpQqxS41TpsluTCkgLrLrW3IXANdJVLDYqg03ZA4NYmuBtKW9cNT3zxbeNzYzPeZbz2\/r2gAAA9kAAMeTgt\/Yqn05+pKp7x1v5rJVvD3U83RI0Uf1MnSqZpxc9TgPbmXEpMySy8AAeBgyZgfH7YKv363dUW37ItelV92RcF2h1jwnUGmXeoRgZB57gAADMM+DMO37C2XeFs0QuBFXOy276oFYp0yk3bVLmivSgGowaztaz2MmHG8yYABiQYcnIfEC2tOq3U6nfd+U+dLKVHpk+M1DAwDBgDjAZ4Ye2u7DBPf+hYVY663NUqLKtenN1srapVUmus1KsgyBnGAAzZDM+AMz4Mz5MM19LOhXExW2gpV+OXda0uM8D0iQ9GekQXgAcDZMBwMDzLgMODBNhrWUsmGYYeeq+0Xm1iQ7dtPq9am1g6TXjgx3pYABgyDTJhngAAfGZqwFwuMHL0jAWale0dodgRmbizZbAiwDfQIb54j7Rumf8AtMlZCr\/ST67v73iZ+VU9WAvPps8M7FUGnjLG2BWJrnSch+4qpvni28Z7ie8y3nt9gAAB8wADHk4Lf2Kp9OfqSqe8db+ayVZw90Obokazh\/bXPr8KTUaS\/DiVKTTHXdvBLigBvNcefDmBhyeeqhpVJvOVqnXLPPU24xiQafHlg6MaHmZvGYGB\/ksMOBbLtmiPou7\/AIEwPzFWzGrNuQooG94wzKXEMIkm4jgH1M3g4DMzD2+cwDDNZcvFuk6k3Z4bqzbNvUuhw5gZ4YBmb2Z8mZmeAcHbUczBY6KIVi4rgkWvCqFp2zJkTqjsxis1DaEcYw4cDz305gABx4BmZ8nCtTQStVOv6S0OtViUcmdLB433jDDPB4wz4PsACnsME6WTDMMPPWEXEXL0jAWale0dodgRmbizZbAiwDfQIb54j7Rumf8AtMlZCr\/ST67v73iZ+VU9WAvPtu8MoiwuJsosLKAi85IBZIPSIiAqg08ZY2wKxNc6TkP3FVN88W3jPcT3mW89vsAAAPmAAY8nBb6qfTn6kqnvHW\/mslW8HdTzdEjWcP7a59fhSajSX4cSpSaY67t4JcUAN5rjz4cwMOTz1UNKpN5ytU65Z56m3GMSDT48sHRjQ8zN4zAwP8lhhwLZds0R9F3f8COcHOq0Z1ZtyFFA3tlwTKXEeCJJuI4B9TN4OAzMw9vnMAwzXty8m6TqTdeyt1Vtm3qRRIksBMwAAzN7M+AMzM8A4EjkNax0VJ6t37d8aoWJOs6JKb2Tm50uTSZrIg9LaZBs8CHjIDw2ngAnnmQcC7t6XsdQoen1dtapH1KuXFDjPGG0MzjGLxmyeYeeHH7YGC7sNaz1kwzDDz1hFxFy9IwBqpXtHaHYEZm4s2WwIsA30CG8eI+0bpn\/ALTJWT+pV9pJ9d397xM\/KoCsH9S8626P487PzKqdOfqSqe8db+ayVa3ZVU6bfU9U946381kq743dDm6NbWT9Ed5f7gn\/ALsag9cp9Zi0fTO\/qHTZNVO3YABNp0b+UvRpMYAMwDtmGAGAdtWpcNMi1636jRZmYR6jGeiPGHmGBgeHt4GtWzKA1bFEZo0eo1OoNM7C3JzngMwDgAAzAA4AAFr8znTPF4QhUrUKsXJUKfSrGt+tC6ckCnzqnTXo0eNGAwMw48M3j5AAFw6JcfidqTfpVS2bpmM1Gey9Gdg0Z51p3BkAMwMMwV2Z+2n20wtzNW10XdVip9Kr7Fp1KqWxI3rVYgu04uvNFngLu5PAzHnzDHzT5VE7XptJm6t0Krac2lV7cprQyfD0hyCcGNIaMDFlkGSwAzA+PgDg5uNXrmYLw+yb0Z5kHzZzAwzZPAwz7YcHOoYLM1eaN\/X2o3vY9+7MqxVHLDs6n2dGqDEGbU5h1CYcuS9OeB54zMADsAHBgAKRqyFd92npJ9d397xM\/KoCn+z8ygGkn13f3vEz8qgKf7PzLzb7tsfwVU6c\/UlU946381kq1uyqp02+p6p7x1v5rJV3xu6vm6JGq5p9NmPa3XXJ6tKZiS6DEaZl7o92ZgbuYAfIZhmHArGWf78i2YM0KAgzahTtBn9LH7Prj10jT3qQEYIDvVzM8wCSEjDc4ceeefnrXrOllaq93zjZkymp9EoNLOmP4H1SRNjGf0nnwPYY4ewDq\/Q\/\/wC\/9+2n9+RQwzTzcGxa0\/X7Xg1ObTJNHlvN7BkxJDRCbLwcBhx9jMOA+2Cjv8HeDNp2jtAg1KE9DkMg8BsyGTAw\/LGfGB8YcCsDk4w4D+wnsKeCLCIi4g09JPru\/veJn5VAU\/2fmUA0k+u7+94mflUBT\/Z+Zedfdvj+I5V7iotMuCj0CfN3NTrBPDAZ2AZ73chmfH0Y8IcXGvpTbjpE646hbkaYJ1emtNPTI+BdLQvcQLuf11nBEkTi3zaz9pTrraqjZ0Wn77ZJkbg8W9yeLnSGOfB0L7VW8aBToFCmSqmLUeuSmYdNd3RlskOvBm0HT0cGXtqSpt5h\/X7SDhlcdFC8W7TKbhWXYRTgjYH\/ACfPDPzedLXuOi3GzLepEvZLCDMdgySwPZtbkNngYca7WH\/WveCD6IiIPKqnTn6kqnvHW\/mslWt2VVOm31PVPeOt\/NZKu+N3U83RI1XNPpsx7W665PVpTMSXQYjTMvdHuzMDdzAD5DMMw4FYyz\/fkWzBmhQEGbUKdoM\/pY\/Z9ceukae9SAjBAd6uZnmASQkYbnDjzzz89a9Z0srVXu+cbEmU1PolBpZ0x\/A+qSJsYz+k8+B7DHD2AdX6H\/8A3\/v21hQwTzVAcmsXPqBpRcZ2\/UqcbLFU21Nl2IQhEecigOBmYcAGYYAfbDkUdvizLgt7Uy2IlvU2VJtCo3TGrhiyBH4LkhmD3JyMnmB+YGCv\/DzAXv8AvxgmCGbCIiki09JPru\/veJn5VAVgfqVf6SfXd\/e8TPyqArA\/UvOvs3R\/BVu3ps\/GKZ4Mv26YEeXMkyyjMhBMGTeeN48N9GM+cy7ashETV95O6p6zrz+5pfc168ndT9Zt4\/cUvuan\/wBCfQmdoYeEA8ndT9Zt4\/cUvuaeTup+s28fuKX3NT7oToTOzDwgPk7qfrNvH7il9zTyd1P1m3j9xS+5qfdCdCZ27h4QHyd1P1m3j9xS+5p5O6p6zbv+Gpfc1PuhOhM7MPCLWVazVrNVEQq0+qP1GZ1uTInbrMz3LLP+RAA5GQ7ClaIiTCrdvTZ+MUzwZft0wI8uZJllGZCCYMm88bx4b6MZ85l21ZCIK+8ndU9Z15\/c0vua9eTup+s28fuKX3NT\/wChPoTO0MPCAeTup+s28fuKX3NPJ3U\/WbeP3FL7mp90J0JnbuHhAfJ3U\/WbeP3FL7mnk7qfrNvH7il9zU+6E6Ezsw8ID5O6n6zbx+4pfc08ndU9Zt3\/AA1L7mp90J0JnZh4RayrWatZqoiFWn1R+ozOtyZE7dZme5ZZ\/wAiAByMh2FK1hZRIREQEREBERAREQYVbt6bPximeDL9umBHlzJMsozIQTBk3njePDfRjPnMu2rIRBX3k7qnrOvP7ml9zXryd1P1m3j9xS+5qf8A0J9CZ2hh4QDyd1P1m3j9xS+5p5O6n6zbx+4pfc1PuhOhM7dw8ID5O6n6zbx+4pfc08ndT9Zt4\/cUvuan3QnQmduYeEB8ndT9Zt4\/cUvuaeTuqes27\/hqX3NT7oToTO3cPCLWVazVrNVEQq0+qP1GZ1uTInbrMz3LLP8AkQAORkOwpWiIkIiICIiAiIgIiICIiAiIgIiICIiAiIgIi8nyINWXIYjsOPvONstNBmZmeAj9pUpWrhua6pw1e26m\/RKTE250wDa27QqJ\/wCmkhwHuewAeZx8+ABN9UrVrl40yLTKdX4tOhg9vZrMimnJCaPTwtng8HB2jDt8PTw5gcdsw5dUorr9Q6tslR58uI8UdrdMudWkvRujHIsQIGcsctmGfOaCWWFdTFzMONPRzp9Xg7RGdTiPM2T7Jj57J8eB8vD2DEwGbKhqdbl1XPfNSqNHuCmUI7cqoRGD8FHIedZONGkmBn1gAID32Bhh2APn41eg7zoDL9tB9UREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERARYVd3vqC\/Qa\/Gtmi25PuS4JcU5gQozzTWxmOB4E6648QCAZcI+cgsRZVeWFqENw16dbdXt+o25cMAAeep83YBZMnyPNOhwOBn0j9pWEgyiwsZD0eyg9IiwgyiIgIo5Z1x026IUioUo3dzHmPQXCMMONkyA\/7XSpD9lBlVnpZE3tvVE\/PuOt\/NZK7epV2M2Ta\/h06dJqLpyWYkeJHIQN9548ADpPl4jXDoFhUmoUgKnOg3Lb82a89LlU+Ldc4GmnnjMz2iLMjc8ZntPg89B0dLGt1cOoDfmXEz8qgKeqOWpbVMtlmYxSm5XTMk9ZkuyZj0l148ADMjeMz5AAP2FI0BFFL3uyJauyi9ZjPP+FqvGpbO5x\/Jm8RYGXscKlSDKLzkP8AOmSD0i85D\/OsoMoiICwijlYuWmUy7aFbks3evVzrPUwEOkPyIZnl+yexBJEWFlAREQEREBERAREQEREBERAREQEREHk+RU9fNJpNzasNRqJdVVte\/KdSs25EZkDCTDN7kMDAgeAD6fsGrhPkUKvewbWvUor9w0fbNkQsjivtvGw8z9h1owPZl9rFBWU67b7tSVddArcmj12tw7Ok1qmVaFC3D+DJYCLzPEHPxhhwFgShFGoVwQrQty76PbNMo1XIokly6Zd45nOzMMxezAN9vssMDPgzDBfoazNO7UtAZpUOitsPTvplSHnzkPSNvmGbxme3Z\/RkuXTNIdPqfUIkyJbzgbIj\/WIscpjxxo73+kCOZ7kD+wCCDWra1Av+6NRK1fGxwqnSa+9ToR9cNk6ZDZZDcmzgf5HPMzzUHs6mN3TR9BKRVJs5+FOhVcpojJMDlgAAeBmB54ewp7qHZtZqF51OoPaTUa53ZO7CDUAqvVG3GhEOCcyR\/lsDDnxczDEMAUz0005g2xadoQZ7QS6tbEM2Istt0xEDe\/w2HnB9seygq2jaaWrMq2qVDmRpTtEojwbKVTimvbmCbkMHnDZHPADzMcPMXFYqFyXk9prbk+i+NcHbZgVR+DNrBw250jIGs3TwPfEAcePbzzX6Ui2xR4k+sTmIWMmtmBVI9pkW1\/AMB6eLzOH6Fw6nppZtQt2k0KRRNgxKLsAKYbUh5l2KHJwPAWfJ+fj4+2goa6I1w0bSbUyjP9UoUGHJpD1NpEGthOepBuPMkQdjcgRABgGPbPBTqq2ZQLM1usKPbbDsBq4WqoxWQ6y6e2ogEbMN7mfGYH0lnzqfxNMrMjWrOthmhZUyovBIlib7pvSHgPPN13PM9uQB2lIKnQaPUq3S6zMhbHqjSd91N3MvyO9DA\/6woKx\/gs27SaRbFekU6EEV524Z8Z4w2F0k2zJeFoP9gZkvhOolM1A1zumiXlHOfT6HTaeVJpzr5AwW+3xPSdgAXGeYAGfYVh2pZduW1VKvU6LTziSKs71ibsGU7tEjyPiEDPAOc+QR\/Ovhd2n9r3XOjT6xTndk+O2bTMyJMejPCJ\/nDesmBkHscqD8+XDR4VQsOfRalteqVOt+\/wCPSaU\/Ikk8TEd1+NvmM\/zmI5mGZ8fY7C\/SNS2U61rPlu75ym0ylwDPNoMzZZZbL6B6ebAA6eLJabFh2jFtyBbLFCisUuDKblx4wbDAAdA8wPb55Zj2+ZSWoxY06E9CmMA9HkBuXmj+kDA+AgQfkusU1ulW1aN4USyJdGN2rU42bkqlbA6jUgeeDjNoM898BmRgZhjx8P8AP+idbarUqFpBdNXoxGNQiUp42XQ52Tw5\/wBjn\/YXLa0a08GGEY6LKlMR9oDFalVKS8ETDAx3Im7+R5B5Mf5uX6FYb8duSwTLzIOsmGBgfEBgg\/N142DZ1uwNMK5RcxqEi6KRsek7ZZmdUMzzM3vPPtgf\/AuzZVn27qRPviu3u2\/LqES4ZlMiunJMDpkVnDc7niwZ4NueYc+eSmtN0e08gT4kxi3Hd9CfCRTwdmSXG4hgeYbkTPBnj7Ifz+at+6dLLGuKrS6rU6M7tlzW93NONPkRhlgP5heBowB39tBTGnUuVqS7ptQL7kO1ClvUGdONl0zAKo8zJBlk3R7ezc9J4f08a695Uy37TqNtW\/bFelExH1EpfWaecnMKdvmjLYyHmAf0nhx8\/ZVt3BYts12m0+nVGjNBGpW3Z1DZFcOMUPgxHdG1gYfRw9AEtZ3TKxttoSbUK3gKlSZXWXhN503nX+ffG7nvc\/bzyQRO7pWX8IaVGbknwadzHTbE8eaSGJY\/sGquYsqkR9JNK7lhHU4tcq1To8KXVGqg6Ek4kn8ibIHlwBgeIAHIAir4tzTK0aJNeqdNoxhUXopwpMt6Y88+60ZiRiTxntMuIB6D7GPB0Lq+JFs7KFQ6D4L2bIFDejSKe3me3cux+jdFn2sejtIKQuWPs0xuzUGNYbDlIjDYQVfYw0ZGAS988G\/wPp4hAPscHGuZRbfr9EhWtcVFtWl0GdtlxN\/cT12b46y27tHeA8JgG+3uWYgR\/QeOC\/RpW1RXLiduA6c2dRfgbKe86Z7SE4+ZHutobeHaORF\/WUdoOkdg0efCqFOoZg5AM3YDTsyQ8xEcPttMmZsgftCKCtaBp\/bl5VbVKZcjMuccSvyGoQOPmIxD2RmT3zQDjgfEHH7ALi0CBAuyt6CVi5I+ypTZdDl9akPEeb21lkDDP+kTMjz+2v0RS7bpNJ21ZyDC3XheUcmfszIt84YgBH\/UDYuBL01s6bSqFTHaK4EegH00rdSXmjjcGHAYHnjh08BbeJBOw9jkX1Xy\/Y\/tr6oCIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIg\/\/2Q==)","ab81171c":"### Install Huggingface Libraries And Prerequisites","f33f35ce":"### Introduction","10048b5c":"### Create Pytorch Dataset","ec7dc184":"### Load And Clean The Dataset"}}