{"cell_type":{"9739f068":"code","22a066a9":"code","1f74fb9b":"code","84af8c58":"code","5dd5ca3f":"code","6517b772":"code","605baf97":"code","4d63a12e":"code","8abb2617":"code","1a024e58":"code","1b452ca4":"code","95a6a835":"code","4559b152":"code","371bfe1e":"code","9db6aa74":"code","d1101310":"code","4677add3":"code","39ff1b40":"code","5dfa2457":"code","673a0bc4":"code","33140056":"code","f75ebe30":"code","31eebb38":"code","ba6e27b4":"code","91bed594":"code","3acfc6d0":"code","53a43745":"code","7d4dab04":"code","634ee8fe":"code","f8069c7a":"code","879f6ea8":"code","fbf9a84e":"code","cd698fbe":"code","de88b2d5":"code","8a81a6f5":"code","ef57d0a6":"markdown","e798c1b2":"markdown","b69dc3ba":"markdown","0cf268c1":"markdown","3f3774e8":"markdown","06e2463d":"markdown","89220ed7":"markdown","a95e2c67":"markdown","ca252a89":"markdown","6b682205":"markdown","744be95c":"markdown","4e34f1c7":"markdown","295a5c4c":"markdown"},"source":{"9739f068":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n'''for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))'''\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","22a066a9":"BASE_DIR = '\/kaggle\/input\/siim-isic-melanoma-classification\/'\n# Location of the image dir\nimg_dir = BASE_DIR + 'jpeg\/train\/'","1f74fb9b":"#imports\nfrom matplotlib import pyplot as plt\nimport seaborn as sns","84af8c58":"!ls -lrt \/kaggle\/input\/siim-isic-melanoma-classification","5dd5ca3f":"train_df = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/test.csv')\nprint(f\"Train shape: {train_df.shape}, Test shape: {test_df.shape}\")","6517b772":"train_df.head()","605baf97":"# Check missing values on each column\ntrain_df.isna().sum()","4d63a12e":"test_df.isna().sum()","8abb2617":"def print_value_counts_columnwise(df, listOfColumns):\n    for col in listOfColumns:\n        print(df[col].value_counts())","1a024e58":"# Print count of unique values\nprint_value_counts_columnwise(train_df, ['sex','age_approx', 'anatom_site_general_challenge', 'diagnosis', 'benign_malignant','target'])","1b452ca4":"train_df.sex.fillna('na', inplace=True)\ntrain_df.age_approx.fillna('na', inplace=True)\ntrain_df.anatom_site_general_challenge.fillna('na', inplace=True)\n\n#now check if there are still missing values in any column\ntrain_df.isna().sum()","95a6a835":"# Plot frequencies for each column\ndef freq_plots(cols):\n    plt.figure(figsize = (15,10))\n    for i in range(len(cols)):\n        plt.subplot(2,3,i+1)\n        plot = sns.countplot(x = cols[i], data = train_df)\n        plt.xticks(rotation=45, horizontalalignment='right')","4559b152":"freq_plots(['sex','age_approx','anatom_site_general_challenge','diagnosis','benign_malignant','target'])","371bfe1e":"# Plot relative frequencies for each column\ndef rel_freq_plots(cols):\n    plt.figure(figsize = (15,10))\n    for i in range(len(cols)):\n        value_counts = train_df[cols[i]].value_counts(normalize=True)*100\n        plt.subplot(2,3,i+1)\n        plot = sns.barplot(x = value_counts.index, y = value_counts.values, alpha=0.8)\n        plt.ylabel('Percentage %')\n        plt.xticks(rotation=45, horizontalalignment='right')","9db6aa74":"rel_freq_plots(['sex','age_approx','anatom_site_general_challenge','diagnosis','benign_malignant','target'])","d1101310":"print(f\"Out of {train_df.shape[0]} samples, we have {sum(train_df['target']==1)} malignant and {sum(train_df['target']==0)} benign cases, which leads to {sum(train_df['target']==1)\/train_df.shape[0] * 100} % positive class and    {sum(train_df['target']==0)\/train_df.shape[0] * 100} % negative class\")","4677add3":"# check how target is distributed on sex\ntmp = train_df.groupby('sex')['target'].value_counts()\ndf = pd.DataFrame(data={'exams':tmp.values}, index=tmp.index).reset_index()\nprint(df)","39ff1b40":"plot = sns.barplot(x='sex', y='exams', hue='target', data=df)\nplt.show()","5dfa2457":"# target vs age_approx\ntmp = train_df.groupby('age_approx')['target'].value_counts()\ndf = pd.DataFrame(data={'exams':tmp.values}, index=tmp.index).reset_index()","673a0bc4":"plot = sns.barplot(x='age_approx', y='exams', hue='target', data=df)\nplt.xticks(rotation=90)\nplt.show()","33140056":"# target vs anatom_site_general_challenge\ntmp = train_df.groupby('anatom_site_general_challenge')['target'].value_counts()\ndf = pd.DataFrame(data={'exams':tmp.values}, index=tmp.index).reset_index()\nprint(df)","f75ebe30":"plot = sns.barplot(x='anatom_site_general_challenge', y='exams', hue='target', data=df)\nplt.xticks(rotation=90)\nplt.show()","31eebb38":"# target vs anatom_site_general_challenge\ntmp = train_df.groupby('diagnosis')['target'].value_counts()\ndf = pd.DataFrame(data={'exams':tmp.values}, index=tmp.index).reset_index()\nprint(df)","ba6e27b4":"# Unique patient ids in train and test\nprint(f\"Out of {len(train_df)} samples, only {len(train_df.patient_id.unique())} patient ids are unique in train set.\")\nprint(f\"Out of {len(test_df)} samples, only {len(test_df.patient_id.unique())} patient ids are unique in test set.\")","91bed594":"unique_patient_ids_train = set(train_df.patient_id.unique())\nunique_patient_ids_test = set(test_df.patient_id.unique())\ncommon_patient_ids = unique_patient_ids_train.intersection(unique_patient_ids_test)\nprint(f\"There are totally {len(common_patient_ids)} common patient ids in train and test\")","3acfc6d0":"#checking distribution of images for patients\nsns.countplot(train_df.patient_id)","53a43745":"print(f\"{sum(train_df['target'])} tumour samples are contributed by {len(train_df.loc[train_df.target==1]['patient_id'].unique())} unique patients\")","7d4dab04":"tmp = train_df.groupby('patient_id')['target'].value_counts()\nprint(tmp)","634ee8fe":"df = pd.DataFrame(data={'exams':tmp.values}, index=tmp.index).reset_index()\nprint(df)","f8069c7a":"multiple_samples_df = df.query('target == 1 & exams > 1')[['patient_id','exams']]\nmultiple_samples_df","879f6ea8":"train_df.query('patient_id == \"IP_9997715\" & target == 1')","fbf9a84e":"train_df.query('patient_id == \"IP_9111321\" & target == 1')","cd698fbe":"images = list(train_df.query('patient_id == \"IP_9111321\" & target == 1')['image_name'])\nprint(images)","de88b2d5":"images[0]","8a81a6f5":"plt.figure(figsize=(15,10))\nfor i in range(len(images)):\n    plt.subplot(2,3,i+1)\n    img = plt.imread(os.path.join(img_dir, images[i]+'.jpg'))\n    plt.imshow(img, cmap='gray')\n    plt.axis('off')\n    plt.title(images[i])","ef57d0a6":"# Checking patient overlap in train and test","e798c1b2":"# Loading Data","b69dc3ba":"It's clear that those samples belong to same woman taken either at different sections at same age or at same age at different sections. Let's examine with another patient.","0cf268c1":"There are no overlaps between train and test! Let's check how samples are distributed across patients.","3f3774e8":"# Relative frequencies to check how balanced the distribution is!","06e2463d":"It can be seen that few patients have very large number of image samples upto 115, but almost all the patients have multiple image samples.","89220ed7":"Before plotting the distribution, let's fill all missing values","a95e2c67":"# Let's check how target is related to each feature","ca252a89":"Oops! It looks like this male patient's samples were taken at same age and at same section of the body. It's time to examine the image samples of this patient.","6b682205":"Let's take a particular patient_id: IP_9997715 which has 3 tumour samples. Let's examine if 3 samples are diagnosed in different sections of body or they're just duplicates!!","744be95c":"# Initial EDA on train and test","4e34f1c7":"Samples are all different, though taken from same patient at same age and at same section of the body.","295a5c4c":"# Sneak Peek into malignant samples which were taken from same patient!"}}