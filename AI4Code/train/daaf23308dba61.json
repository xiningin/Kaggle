{"cell_type":{"b4ed7779":"code","b4952fd0":"code","ba02117c":"code","0df43e08":"code","41e36b24":"code","faf3af2a":"code","b30e3722":"code","235f88d4":"code","10833df2":"code","27ab0177":"code","d0338a1d":"code","0cafd886":"code","de03636d":"code","60ccb049":"code","fc031c3d":"code","9179c1c5":"code","3774f37a":"code","06a5127a":"code","7aa57cd7":"code","1207dd6d":"code","85f709cc":"code","dcdd07db":"code","1291e3a9":"code","6d986afc":"code","b2978111":"code","ae22ff56":"code","8020313e":"code","731e36d7":"code","417c9c17":"code","69dbab87":"code","847de1e4":"code","51d27235":"code","6eb76368":"code","95512415":"code","eeb8a735":"code","3093cb2a":"code","91157c1d":"code","4909745b":"code","98832c76":"code","77d8f785":"code","2fbc8689":"code","b8d9627e":"code","3b99a544":"code","d24b3d94":"code","c2ae19be":"code","3c2d1236":"code","a470133f":"code","24dfcb43":"code","753a6442":"code","54c7231f":"code","526bf7ed":"code","604b9d27":"code","fcaa4020":"code","889382f3":"code","a3a74089":"code","1be13ea4":"code","b58939d8":"code","909d6a8c":"code","da6c6e0f":"code","739c6e8b":"code","ad16c46f":"markdown","ddd9a52e":"markdown","d448e6ac":"markdown","ada25990":"markdown","dd570f9f":"markdown","202c6f03":"markdown","62d1ba13":"markdown","0a7e4f77":"markdown","4dcfdbd1":"markdown","0c2bc563":"markdown","0d869a8a":"markdown"},"source":{"b4ed7779":"%reset -f","b4952fd0":"import pandas as pd\nimport numpy as np\n","ba02117c":"from sklearn.random_projection import SparseRandomProjection as sr  # Projection features\nfrom sklearn.cluster import KMeans                    # Cluster features\nfrom sklearn.preprocessing import PolynomialFeatures  # Interaction features\n","0df43e08":"# Ref: http:\/\/scikit-learn.org\/stable\/modules\/classes.html#module-sklearn.feature_selection\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import mutual_info_classif  # Selection criteria\n","41e36b24":"# 1.4 Data processing\n# 1.4.1 Scaling data in various manner********\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, scale\n# 1.4.2 Transform categorical (integer) to dummy\nfrom sklearn.preprocessing import OneHotEncoder","faf3af2a":"# 1.5 Splitting data\nfrom sklearn.model_selection import train_test_split","b30e3722":"# 1.6 Decision tree modeling\n# http:\/\/scikit-learn.org\/stable\/modules\/classes.html#module-sklearn.tree\n# http:\/\/scikit-learn.org\/stable\/modules\/tree.html#tree\nfrom sklearn.tree import  DecisionTreeClassifier as dt","235f88d4":"# 1.7 RandomForest modeling\nfrom sklearn.ensemble import RandomForestClassifier as rf","10833df2":"# 1.8 Plotting libraries to plot feature importance\nimport matplotlib.pyplot as plt\nimport seaborn as sns","27ab0177":"# 1.9 Misc\nimport os, time, gc","d0338a1d":"# 2.0 Set working directory and read file\nos.chdir(\"..\/input\")\nprint(os.listdir())","0cafd886":"# 2.1 Read heart data from files\nheart = pd.read_csv(\"heart.csv\")","de03636d":"# 2.2 Look at data\nheart.head(2)\nheart.shape                        # 303 X 14","60ccb049":"# 2.3 Data types\nheart.dtypes.value_counts()  ","fc031c3d":"# 2.4 Target classes are almost balanced\nheart.target.value_counts()","9179c1c5":"#  4. Feature 1: Row sums of features 1:93. More successful\n#                when data is binary.\n\nheart['sum'] = heart.sum(numeric_only = True, axis=1)  # numeric_only= None is default\nheart.shape","3774f37a":"# 4.1 Assume that value of '0' in a cell implies missing feature\n#     Transform train and test dataframes\n#     replacing '0' with NaN\n#     Use pd.replace()\ntmp_heart = heart.replace(0, np.nan)","06a5127a":"# 4.2 Check if tmp_train is same as train or is a view\n#     of train? That is check if tmp_train is a deep-copy\n\ntmp_heart is heart                # False\n#tmp_train is train.values.base    # False\ntmp_heart._is_view                # False","7aa57cd7":"# 4.3 Check if 0 has been replaced by NaN\ntmp_heart.head(1)","1207dd6d":"# 5. Feature 2 : For every row, how many features exist\n#                that is are non-zero\/not NaN.\n#                Use pd.notna()\ntmp_heart.notna().head(1)\nheart[\"count_not0\"] = tmp_heart.notna().sum(axis = 1)\nheart.shape","85f709cc":"# 6. Similary create other statistical features\n#    Feature 3\n#    Pandas has a number of statistical functions\n#    Ref: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/frame.html#computations-descriptive-stats\n\nfeat = [ \"var\", \"median\", \"mean\", \"std\", \"max\", \"min\"]\nfor i in feat:\n    heart[i] = tmp_heart.aggregate(i,  axis =1)","dcdd07db":"# 7 Delete not needed variables and release memory\ndel(tmp_heart)\ngc.collect()","1291e3a9":"# 7.1 So what do we have finally\nheart.shape                # 303 X (14 + 1 + 1 + 6) ; 14th Index is target\nheart.head(1)","6d986afc":"# 8. Before we proceed further, keep target feature separately\ntarget = heart['target']\ntarget.tail(2)","b2978111":"# 9.1 Drop 'target' column\nheart.drop(columns = ['target'], inplace = True)\nheart.shape                # 303 X 21","ae22ff56":"# 9.2. Store column names of our data somewhere\n#     We will need these later (at the end of this code)\ncolNames = heart.columns.values\ncolNames","8020313e":"# 11. Transform tmp t0 numpy array\n#      Henceforth we will work with array only\ntmp = heart.values","731e36d7":"# 12. tmp shape\ntmp.shape       # (303, 21)","417c9c17":"# 13. Let us create 10 random projections\/columns\n#     This decision, at present, is arbitrary\nNUM_OF_COM = 12","69dbab87":"# 13.1 Create an instance of class\nrp_instance = sr(n_components = NUM_OF_COM)","847de1e4":"# 13.2 fit and transform the (original) dataset\n#      Random Projections with desired number\n#      of components are returned\nrp = rp_instance.fit_transform(tmp[:, :13])","51d27235":"# 13.3 Look at some features\nrp[: 3, :  12]","6eb76368":"# 13.4 Create some column names for these columns\n#      We will use them at the end of this code\nrp_col_names = [\"r\" + str(i) for i in range(12)]\nrp_col_names","95512415":"# 14. Before clustering, scale data\n# 15.1 Create a StandardScaler instance\nse = StandardScaler()","eeb8a735":"# 15.2 fit() and transform() in one step\ntmp = se.fit_transform(tmp)","3093cb2a":"# 15.3\ntmp.shape               # 303 X 21 (an ndarray)\ntarget.shape","91157c1d":"# 16. Perform kmeans using 93 features.\n#     No of centroids is no of classes in the 'target'\ncenters = target.nunique()    # 2 unique classes\ncenters               # 9","4909745b":"# 17.1 Begin clustering\nstart = time.time()\n\n# 17.2 First create object to perform clustering\nkmeans = KMeans(n_clusters=centers, # How many\n                n_jobs = 2)         # Parallel jobs for n_init\n\n\n\n# 17.3 Next train the model on the original data only\nkmeans.fit(tmp[:, : 13])\n\nend = time.time()\n(end-start)\/60.0      # 5 minutes","98832c76":"# 18 Get clusterlabel for each row (data-point)\nkmeans.labels_\nkmeans.labels_.size   # 303","77d8f785":"# 19. Cluster labels are categorical. So convert them to dummy\n\n# 19.1 Create an instance of OneHotEncoder class\nohe = OneHotEncoder(sparse = False)","2fbc8689":"# 19.2 Use ohe to learn data\n#      ohe.fit(kmeans.labels_)\nohe.fit(kmeans.labels_.reshape(-1,1))     # reshape(-1,1) recommended by fit()\n                                          # '-1' is a placeholder for actual","b8d9627e":"# 19.3 Transform data now\ndummy_clusterlabels = ohe.transform(kmeans.labels_.reshape(-1,1))\ndummy_clusterlabels\ndummy_clusterlabels.shape    # 206245 X 9 (as many as there are classes)","3b99a544":"# 19.4 We will use the following as names of new nine columns\n#      We need them at the end of this code\n\nk_means_names = [\"k\" + str(i) for i in range(2)]\nk_means_names","d24b3d94":"degree = 2\npoly = PolynomialFeatures(degree,                 # Degree 2\n                          interaction_only=True,  # Avoid e.g. square(a)\n                          include_bias = False    # No constant term\n                          )","c2ae19be":"# 21.1 Consider only first 5 features\n#      fit and transform\ndf =  poly.fit_transform(tmp[:, : 5])\ndf.shape     # 303 X 15","3c2d1236":"# 21.2 Generate some names for these 15 columns\npoly_names = [ \"poly\" + str(i)  for i in range(15)]\npoly_names","a470133f":"# 22 Append now all generated features together\n# 22 Append random projections, kmeans and polynomial features to tmp array\n\ntmp.shape          # 303 X 21","24dfcb43":"#  22.1 If variable, 'dummy_clusterlabels', exists, stack kmeans generated\n#       columns also else not. 'vars()'' is an inbuilt function in python.\n#       All python variables are contained in vars().\n\ntmp = np.hstack([tmp,rp])       # No kmeans and polynomial      <==\ntmp.shape          # 303 X 33   I  ","753a6442":"# 22.1 Separate train and test\nX = tmp[: 230, : ]\nX.shape                             # 61878 X 135 if no kmeans: (61878, 126)","54c7231f":"# 22.2\ntest = tmp[230 :, : ]\ntest.shape                         # 144367 X 135; if no kmeans: (144367, 126)","526bf7ed":"# 22.3 Delete tmp\ndel tmp\ngc.collect()","604b9d27":"target.shape\nX.shape\n\nt1 = target.head(230)\nt2 = target.tail(73)","fcaa4020":"# 23. Split train into training and validation dataset\nX_train, X_test, y_train, y_test = train_test_split(\n                                                    X,\n                                                    t1,\n                                                    test_size = 0.3)","889382f3":"# 23.1\nX_train.shape    # 43314 X 135  if no kmeans: (43314, 126)\nX_test.shape     # 18564 X 135; if no kmeans: (18564, 126)\ny_train.shape","a3a74089":"# 24 Decision tree classification\n# 24.1 Create an instance of class\nclf = dt(min_samples_split = 5,\n         min_samples_leaf= 5\n        )\nstart = time.time()\n# 24.2 Fit\/train the object on training data\n#      Build model\nclf = clf.fit(X_train, y_train)\nend = time.time()\n(end-start)\/60                     # 1 minute","1be13ea4":"# 24.3 Use model to make predictions\npredicted_target = clf.predict(X_test)","b58939d8":"# 24.4 Check accuracy\n(predicted_target == y_test).sum()\/y_test.size      # 72%","909d6a8c":"# 25. Instantiate RandomForest classifier\nclf = rf(n_estimators=20)","da6c6e0f":"# 25.1 Fit\/train the object on training data\n#      Build model\n\nstart = time.time()\nclf = clf.fit(X_train, y_train)\nend = time.time()\n(end-start)\/60","739c6e8b":"# 25.2 Use model to make predictions\npre_target = clf.predict(X_test)\n# 25.3 Check accuracy\n(pre_target == y_test).sum()\/y_test.size      # 72%\n","ad16c46f":"############################ Feature creation using kmeans ####################\n","ddd9a52e":"############################################  DONE ######################\n","d448e6ac":"############################ Interaction features #######################\n**# 21. Will require lots of memory if we take large number of features\n","ada25990":"**# 1.3 For feature selection**","dd570f9f":"################# concatenate all features now ##############################","202c6f03":"**# 1.1 Call data manipulation libraries**","62d1ba13":"Objectives:\n* Using pandas and sklearn for modeling\n* Feature engineering\n     a) Using statistical measures\n     b) Using Random Projections\n     c) Using clustering\n     d) USing interaction variables\n* Classifciation using Decision Tree and RandomForest","0a7e4f77":"############################################################################\n################ Feature creation Using Random Projections ##################\n**# 10. Random projection is a fast dimensionality reduction feature\n**#     Also used to look at the structure of data\n****","4dcfdbd1":"**############################ BB. Feature Engineering #########################\n**############################ Using Statistical Numbers #####################","0c2bc563":"**# 1.2 Feature creation libraries**","0d869a8a":"################## Model building #####################"}}