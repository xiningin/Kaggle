{"cell_type":{"a216e0b6":"code","0221009a":"code","3072c114":"code","73ef681b":"code","8f57c1ed":"code","9bc48c6c":"code","029afbec":"code","95b55cba":"code","10f53487":"code","3719bcce":"code","803bd5d1":"code","5156873e":"code","218a5ce2":"code","c8e63905":"code","7a9d2201":"code","2321a4ec":"code","ebc423bf":"code","d2ad7d77":"code","4ffc0844":"code","1e0e0093":"code","faf0831f":"code","d1fc1464":"code","4a98c31f":"code","280bcabf":"code","82976e7e":"markdown"},"source":{"a216e0b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0221009a":"#Loading the dataset\n\ndf = pd.read_csv(\"\/kaggle\/input\/indian-food-101\/indian_food.csv\")\ndf","3072c114":"df.info()","73ef681b":"#checking null values\n\ndf.isna().sum()","8f57c1ed":"# getting column names\n\nprint(list(df.columns))","9bc48c6c":"# vegeterian and nonveg dishes count\n\ncount = list(df['diet'].value_counts())\ncount","029afbec":"import matplotlib.pyplot as plt\nx=['vegeterian','Non vegeterian']\ny = count\nfig = plt.figure(figsize = (15, 5)) \n  \nplt.bar(x, y, color ='pink',width = 0.3) \n  \nplt.xlabel(\"Vegeterian or Not vegeterian\") \nplt.ylabel(\"Number of Dishes\") \n\nplt.title(\"Classification\") \nplt.show() ","95b55cba":"import re\nimport spacy\nnlp = spacy.load('en')\n\ndef normalize(msg):\n    \n    msg = re.sub('[^A-Za-z]+', ' ', msg) #remove special character and intergers\n    doc = nlp(msg)\n    res=[]\n    for token in doc:\n        if(token.is_stop or token.is_punct or token.is_currency or token.is_space or len(token.text) <= 2): #word filteration\n            pass\n        else:\n            res.append(token.lemma_.lower())\n    return res\n\ndf[\"ingredients\"] = df[\"ingredients\"].apply(normalize)\ndf.head()","10f53487":"# words count\nfrom collections import Counter\nwords_collection = Counter([item for subtext in df['ingredients'] for item in subtext])\nmost_common = pd.DataFrame(words_collection.most_common(20))\nmost_common.columns = ['most_common_word','count']\nmost_common","3719bcce":"import plotly.express as px \n  \nfig = px.sunburst(most_common, path=['most_common_word'],values='count',color ='count')\nfig.show()","803bd5d1":"# 3D Scatter Plot\n\nimport plotly.express as px\n\n\nfig = px.scatter_3d(df, x='name', y='prep_time', z='cook_time', color='name')\nfig.show()","5156873e":"flavour_count = list(df['flavor_profile'].value_counts())\nflavour_count","218a5ce2":"flavours = list(df.flavor_profile.unique())\nflavours","c8e63905":"import numpy as np \nimport plotly \nimport plotly.graph_objects as go \nimport plotly.offline as pyo \nfrom plotly.offline import init_notebook_mode \n  \ninit_notebook_mode(connected=True) \n  \n# generating 150 random integers \n# from 1 to 50 \nx = flavours\n  \n\ny = flavour_count\n  \n# plotting scatter plot \nfig = go.Figure(data=go.Scatter(x=x, y=y, mode='markers', marker=dict( \n        color=np.random.randn(10), \n        colorscale='Viridis',  \n        showscale=True\n    ) )) \n  \nfig.show() ","7a9d2201":"course_count = list(df['flavor_profile'].value_counts())\ncourse_count\n  \n","2321a4ec":"course = list(df.course.unique())\ncourse","ebc423bf":"# Donut chart\n\nimport plotly.graph_objects as go\n\nlabels = course\nvalues = course_count\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\nfig.show()","d2ad7d77":"def ingredients_count(msg):\n    \n   \n    \n    msg_len = len(msg)\n    \n    return msg_len","4ffc0844":"df['ing_count'] = df['ingredients'].apply(ingredients_count)\ndf.head()","1e0e0093":"fig = go.Figure(data=go.Scatter(x=df['name'],\n                                y=df['ing_count'],\n                                mode='markers',\n                                marker_color=df['ing_count'],\n                                text=df['name'])) # hover text goes here\n\nfig.update_layout(title='dish vs ingredients')\nfig.show()","faf0831f":"# Heat Map\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ncorrelation = df.corr()\nplt.figure(figsize = (12 , 12))\nsns.heatmap(correlation)","d1fc1464":"state_count = list(df['state'].value_counts())\nstate_count","4a98c31f":"state = list(df.state.unique())\nstate","280bcabf":"import plotly.graph_objects as go\nimport numpy as np\n\nfig = go.Figure(data=go.Scatter(\n    x = state,\n    y = state_count,\n    mode='markers',\n    marker=dict(\n        size=16,\n        color=np.random.randn(500), #set color equal to a variable\n        colorscale='Viridis', # one of plotly colorscales\n        showscale=True\n    )\n))\n\nfig.show()","82976e7e":"#  Data Visualisation"}}