{"cell_type":{"42e5009a":"code","df166e8e":"code","bea320ca":"code","15dca9e0":"code","feadd4e7":"code","b4321805":"code","03f41964":"code","6a55326f":"code","14303fb8":"code","1897ddf5":"code","b3aad325":"code","3e439c9e":"code","13e91243":"code","cdb0e662":"code","b92c3159":"code","068877cc":"code","1975490f":"code","83b67a07":"code","dca5f5ab":"code","fbed4393":"code","e8b6ccf6":"code","b885ce79":"code","cdc7e722":"code","768249f3":"code","5713e82b":"code","22a437c6":"code","a990a1b2":"code","d289626c":"code","fa8da00f":"code","b2842ff5":"code","c022ebea":"code","6e87df48":"markdown","3f0eb9ef":"markdown","0aca599a":"markdown","3b638916":"markdown","65f15723":"markdown","1dc6fb13":"markdown","57086128":"markdown","cdf7a80b":"markdown","35dd089d":"markdown","8c9cb1b0":"markdown","8592290a":"markdown","cfa63b88":"markdown","7051f092":"markdown","1408031f":"markdown","4ca9b4ff":"markdown","b94adf67":"markdown","7c148e60":"markdown","564eb997":"markdown"},"source":{"42e5009a":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","df166e8e":"df = pd.read_csv(\"..\/input\/clothessizeprediction\/final_test.csv\")\ndf","bea320ca":"df.isna().sum()","15dca9e0":"df.describe()","feadd4e7":"df.info()","b4321805":"df['age'] = df['age'].fillna(df['age'].median())\ndf['height'] = df['height'].fillna(df['height'].median())","03f41964":"df.isna().sum()","6a55326f":"fig, axes = plt.subplots(1,3,figsize=(20,5))\nfig.suptitle('Predictor')\n\n# weight\nsns.histplot(df['weight'], ax = axes[0])\naxes[0].set_title('weight')\n\n# age\nsns.histplot(df['age'], ax = axes[1])\naxes[1].set_title('age')\n\n# height\nsns.histplot(df['height'], ax = axes[2])\naxes[2].set_title('height')","14303fb8":"fig, axes = plt.subplots(1,3,figsize=(20,5))\nfig.suptitle('Predictor')\n\n# weight\nsns.boxplot(x = 'size',y = 'weight', data = df, ax = axes[0])\naxes[0].set_title('weight')\n\n# age\nsns.boxplot(x = 'size',y = 'age', data = df, ax = axes[1])\naxes[1].set_title('age')\n\n# height\nsns.boxplot(x = 'size',y = 'height', data = df, ax = axes[2])\naxes[2].set_title('height')","1897ddf5":"df['size'].value_counts()","b3aad325":"sns.countplot(x = 'size', data = df)","3e439c9e":"# calculate zscore\n\nfrom scipy import stats\n\nz = np.abs(stats.zscore(df[['age','height','weight']]))\ndf = df.drop(np.unique(np.where(z > 3)[0]))\ndf = df.reset_index()\ndf = df.drop(columns=['index'], axis = 1)\ndf","13e91243":"fig, axes = plt.subplots(1,3,figsize=(20,5))\nfig.suptitle('Predictor')\n\n# weight\nsns.boxplot(x = 'size',y = 'weight', data = df, ax = axes[0])\naxes[0].set_title('weight')\n\n# age\nsns.boxplot(x = 'size',y = 'age', data = df, ax = axes[1])\naxes[1].set_title('age')\n\n# height\nsns.boxplot(x = 'size',y = 'height', data = df, ax = axes[2])\naxes[2].set_title('height')","cdb0e662":"df['size'].value_counts()","b92c3159":"sns.countplot(x = 'size', data = df)","068877cc":"df['bmi'] = df[\"height\"]\/df[\"weight\"]\ndf[\"weight-squared\"] = df[\"weight\"] * df[\"weight\"]\ndf = pd.concat([df['weight'],df['age'],df['height'],df['bmi'],df['weight-squared'],df['size']],axis = 1)\ndf","1975490f":"# Mapping clothes size from strings to numeric\ndf['size'] = df['size'].map({\"XXS\": 1,\n                             \"S\": 2,\n                             \"M\" : 3,\n                             \"L\" : 4,\n                             \"XL\" : 5,\n                             \"XXL\" : 6,\n                             \"XXXL\" : 7})\ndf.head()","83b67a07":"sns.heatmap(df.corr(), annot=True)","dca5f5ab":"from sklearn.model_selection import train_test_split\n\ntrain,test = train_test_split(df,test_size = 0.2,random_state = 0)","fbed4393":"train['size'].value_counts()","e8b6ccf6":"test['size'].value_counts()","b885ce79":"X_train = train.iloc[:, :-1].values\ny_train = train.iloc[:, -1].values\nX_test = test.iloc[:, :-1].values\ny_test = test.iloc[:, -1].values","cdc7e722":"from imblearn.over_sampling import SMOTE","768249f3":"oversample = SMOTE()\nX_train,y_train = oversample.fit_resample(X_train,y_train)","5713e82b":"from collections import Counter\nCounter(y_train)","22a437c6":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","a990a1b2":"X_train","d289626c":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nimport xgboost as xgb","fa8da00f":"key = ['LogisticRegression','KNeighborsClassifier','SVC','DecisionTreeClassifier','RandomForestClassifier',\n       'GradientBoostingClassifier','AdaBoostClassifier','XGBClassifier']\nvalue = [LogisticRegression(solver='newton-cg'),KNeighborsClassifier(),SVC(C=.5, gamma = 0.1,kernel = 'rbf', random_state = 0),\n         DecisionTreeClassifier(),RandomForestClassifier(),GradientBoostingClassifier(),AdaBoostClassifier(),xgb.XGBClassifier()]\nmodels = dict(zip(key,value))\nprint(models)","b2842ff5":"predicted =[]\nfor name,algo in models.items():\n    model=algo\n    model.fit(X_train,y_train)\n    predict = model.predict(X_test)\n    acc = accuracy_score(y_test, predict)\n    predicted.append(acc)\n    print(name,acc)","c022ebea":"plt.figure(figsize = (10,5))\nsns.barplot(x = predicted, y = key)","6e87df48":"# Data Description","3f0eb9ef":"# Train Test Split","0aca599a":"# Check Missing Value","3b638916":"Distribution of its target","65f15723":"# Load Data","1dc6fb13":"# Modeling","57086128":"check outlier using boxplot","cdf7a80b":"# Exploratory Data","35dd089d":"# Remove Outlier","8c9cb1b0":"# Check Correlation Plot","8592290a":"# Balancing Data","cfa63b88":"# Data Structures","7051f092":"# Feature Engineering","1408031f":"# Distribution of its target","4ca9b4ff":"# Encode the Target","b94adf67":"Too many outliers in there, we need to remove the outliers","7c148e60":"# Handling Missing Value\n\nFor this case, we will fill the missing data using `median`","564eb997":"# Standarizing"}}