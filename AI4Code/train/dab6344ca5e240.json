{"cell_type":{"dbf7add0":"code","071b0d31":"code","13167407":"code","d8e0696f":"code","22921bfd":"code","5ea33bd7":"code","bc70adad":"code","5ddb99cc":"code","ef319143":"code","938b5b58":"code","ecd68698":"code","2e371f9d":"code","e817693c":"code","a33f49e5":"code","eba5a9df":"code","f95bdab9":"code","0850e29a":"code","eba9dc49":"code","3437e2da":"code","d5106a4e":"code","49bbc8ab":"code","4943b93b":"code","1ad636c0":"code","948d7739":"code","ef164984":"code","a54a0369":"code","f573a6fb":"code","8a8287f8":"code","55a9aa79":"code","420f00ad":"code","68cd1350":"code","25791489":"code","4201231d":"code","ee14fe1b":"code","e0e6b5d1":"code","b1cee68e":"code","faa9cb63":"markdown","efe7378e":"markdown","8debfb90":"markdown","501f6126":"markdown","9fe4e128":"markdown"},"source":{"dbf7add0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","071b0d31":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\n\nsns.set_style({'xtick.bottom':False,\n               'ytick.left':False,\n               'axes.spines.bottom': False,\n               'axes.spines.left': False,\n               'axes.spines.right': False,\n               'axes.spines.top': False})","13167407":"files = []\nfor dirname, _, filenames in os.walk('..\/input\/intel-image-classification\/seg_test'):\n    for filename in filenames:\n        files.append(os.path.join(dirname, filename))","d8e0696f":"images = random.sample(files,k=9)\nfig = plt.figure(figsize=(15,15))\nfor i,v in enumerate(images):\n    img = plt.imread(v)\n    ax = fig.add_subplot(3,3,i+1)\n    ax.set_title(v.split('\/')[-2])\n    ax.imshow(img)","22921bfd":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n                                 zoom_range=0.2,\n                                 horizontal_flip=True)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_data = train_datagen.flow_from_directory(\"..\/input\/intel-image-classification\/seg_train\/seg_train\",\n                                              target_size=(128,128),\n                                              batch_size=32,\n                                              class_mode=\"categorical\")\n\ntest_data = test_datagen.flow_from_directory(\"..\/input\/intel-image-classification\/seg_test\/seg_test\",\n                                              target_size=(128,128),\n                                              batch_size=32,\n                                              class_mode=\"categorical\")","5ea33bd7":"from tensorflow.keras.optimizers import Adam,SGD,RMSprop\n\naccuracies_ = []\n\ndef train(optimizer,train_data,test_data,name,epochs=30):    \n    classifier = keras.Sequential([keras.layers.Conv2D(16,(3,3),input_shape=(128,128,3),activation='relu'),\n                                  keras.layers.MaxPool2D(2,2),\n                                  keras.layers.Conv2D(32,(3,3),activation='relu'),\n                                  keras.layers.MaxPool2D(2,2),\n                                  keras.layers.Conv2D(64,(3,3),activation='relu'),\n                                  keras.layers.MaxPool2D(2,2),\n                                  keras.layers.Conv2D(128,(3,3),activation='relu'),\n                                  keras.layers.MaxPool2D(2,2),\n                                  keras.layers.Conv2D(256,(3,3),activation='relu'),\n                                  keras.layers.MaxPool2D(2,2),\n\n                                  keras.layers.Flatten(),\n                                  keras.layers.Dense(2048,activation='relu'),\n                                  keras.layers.Dropout(0.2),\n                                  keras.layers.Dense(1024,activation='relu'),\n                                  keras.layers.Dropout(0.1),\n                                  keras.layers.Dense(512,activation='relu'),\n                                  keras.layers.Dropout(0.1),\n                                  keras.layers.Dense(256,activation='relu'),\n                                  keras.layers.Dense(128,activation='relu'),\n                                  keras.layers.Dense(64,activation='relu'),\n                                  keras.layers.Dense(32,activation='relu'),\n                                  keras.layers.Dense(6,activation='softmax')])\n\n    classifier.compile(optimizer=optimizer,loss='categorical_crossentropy',metrics=['accuracy'])\n    history = classifier.fit(train_data,\n          steps_per_epoch=100,\n          validation_data=test_data,\n          validation_steps=50,\n          epochs=epochs)\n    \n    acc = pd.DataFrame.from_dict(history.history)\n    acc = pd.concat([pd.Series(range(0,epochs),name='epochs'),acc],axis=1)\n    \n    fig,(ax,ax1) = plt.subplots(nrows=2,ncols=1,figsize=(16,16))\n    sns.lineplot(x='epochs',y='accuracy',data=acc,ax=ax,color='m')\n    sns.lineplot(x='epochs',y='val_accuracy',data=acc,ax=ax,color='c')\n    sns.lineplot(x='epochs',y='loss',data=acc,ax=ax1,color='m')\n    sns.lineplot(x='epochs',y='val_loss',data=acc,ax=ax1,color='c')\n    ax.legend(labels=['Test Accuracy','Training Accuracy'])\n    ax1.legend(labels=['Test Loss','Training Loss'])\n    plt.show()\n    \n    accuracies_.append((name,(\"Validation Accuracy\",history.history['val_accuracy'][epochs-1]),(\"Training Accuracy\",history.history['accuracy'][epochs-1])))\n\n    return classifier","bc70adad":"\nadam_classifier = train(Adam(lr=0.001),train_data,test_data,\"Adam\",50)","5ddb99cc":"rms_classifier = train(RMSprop(lr=0.0001),train_data,test_data,\"RMSprop\",60)","ef319143":"sgd_classifier = train(SGD(lr=0.0001,momentum=0.9, nesterov=True),train_data,test_data,\"SGD\",60)","938b5b58":"accuracies_","ecd68698":"classes = {v:k for k,v in test_data.class_indices.items()}","2e371f9d":"true_labels = []\nrow_labels = []\nfor i in range(len(test_data)):\n    for val in test_data[i][1]:\n        row_labels.append(val.argmax(axis=0))\n    true_labels.extend(row_labels)","e817693c":"predictions_ = []\nrow_predictions = []\nfor i in range(len(test_data)):\n    predictions = adam_classifier.predict(test_data[i][0])\n    for val in predictions:\n        row_predictions.append(val.argmax(axis=0))\n    predictions_.extend(row_predictions)","a33f49e5":"top10 = [next(test_data) for _ in range(40,50)]","eba5a9df":"adam_predictions = adam_classifier.predict(top10[0][0])","f95bdab9":"fig = plt.figure(figsize=(15,15))\nfor i,img in enumerate(top10):\n    image = img[0][i]\n    labels = classes[img[1][i].argmax(axis=0)]\n    pred_labels = classes[adam_predictions[i].argmax(axis=0)]\n    ax = fig.add_subplot(5,2,i+1)\n    plt.subplots_adjust(hspace = .5)\n    color = 'green' if labels == pred_labels else 'red'\n    ax.set_title(f\"Original : {labels} | Predicted : {pred_labels}\",color=color)\n    ax.imshow(image)","0850e29a":"from sklearn.metrics import classification_report\n\nprint(classification_report(true_labels,predictions_,target_names=list(classes.values())))","eba9dc49":"rms_predictions = rms_classifier.predict(top10[0][0])","3437e2da":"fig = plt.figure(figsize=(15,15))\nfor i,img in enumerate(top10):\n    image = img[0][i]\n    labels = classes[img[1][i].argmax(axis=0)]\n    pred_labels = classes[rms_predictions[i].argmax(axis=0)]\n    ax = fig.add_subplot(5,2,i+1)\n    plt.subplots_adjust(hspace = .5)\n    color = 'green' if labels == pred_labels else 'red'\n    ax.set_title(f\"Original : {labels} | Predicted : {pred_labels}\",color=color)\n    ax.imshow(image)","d5106a4e":"rms_predictions_ = []\nrow_predictions = []\nfor i in range(len(test_data)):\n    predictions = rms_classifier.predict(test_data[i][0])\n    for val in predictions:\n        row_predictions.append(val.argmax(axis=0))\n    rms_predictions_.extend(row_predictions)","49bbc8ab":"print(classification_report(true_labels,rms_predictions_,target_names=list(classes.values())))","4943b93b":"sgd_predictions = sgd_classifier.predict(top10[0][0])","1ad636c0":"fig = plt.figure(figsize=(15,15))\nfor i,img in enumerate(top10):\n    image = img[0][i]\n    labels = classes[img[1][i].argmax(axis=0)]\n    pred_labels = classes[sgd_predictions[i].argmax(axis=0)]\n    ax = fig.add_subplot(5,2,i+1)\n    plt.subplots_adjust(hspace = .5)\n    color = 'green' if labels == pred_labels else 'red'\n    ax.set_title(f\"Original : {labels} | Predicted : {pred_labels}\",color=color)\n    ax.imshow(image)","948d7739":"sgd_predictions_ = []\nrow_predictions = []\nfor i in range(len(test_data)):\n    predictions = adam_classifier.predict(test_data[i][0])\n    for val in predictions:\n        row_predictions.append(val.argmax(axis=0))\n    sgd_predictions_.extend(row_predictions)","ef164984":"print(classification_report(true_labels,sgd_predictions_,target_names=list(classes.values())))","a54a0369":"import cv2\ndir_path = \"..\/input\/intel-image-classification\/seg_pred\/seg_pred\"\nimages = []\nfiles = os.listdir(dir_path)\nfor fi in files:\n    img = plt.imread(os.path.join(dir_path,fi))\n    img = cv2.resize(img,(128,128))\n    images.append(img)","f573a6fb":"plt.imshow(images[1])","8a8287f8":"images = np.array(images)","55a9aa79":"len(images)","420f00ad":"images.shape","68cd1350":"images_split = np.array_split(images,228)\nimages_split = np.array(images_split)","25791489":"images_split[5].shape","4201231d":"pred_predictions = adam_classifier.predict(images_split[5])","ee14fe1b":"predictions_classes = []\nfor preds in pred_predictions:\n    predictions_classes.append(classes[preds.argmax(axis=0)])","e0e6b5d1":"images_split[5].shape","b1cee68e":"fig = plt.figure(figsize=(15,15))\nfor i,img in enumerate(images_split[5]):\n    image = img\n    labels = predictions_classes[i]\n    ax = fig.add_subplot(8,4,i+1)\n    plt.subplots_adjust(hspace = .5)\n    ax.set_title(labels)\n    ax.imshow(image)","faa9cb63":"# Predictions Using RMSprop optimizer on test data","efe7378e":"# On Predictions","8debfb90":"# Predictions Using Adam optimizer on TestData","501f6126":"# Using SGD","9fe4e128":"# Thank you "}}