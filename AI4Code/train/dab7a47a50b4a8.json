{"cell_type":{"d194dc8e":"code","342ea4b4":"code","83ba4a9e":"code","ee0424df":"code","0135853b":"code","41e3a549":"code","e8366db8":"code","5b20eed8":"code","6b12d11b":"code","d1be6a38":"code","358d938b":"code","2f7a75b6":"code","f3bb1525":"code","28e4a512":"code","75c4f897":"code","c7dde043":"code","2712704d":"code","e5e3d6b7":"code","8133732f":"code","a6215842":"code","f41d0792":"code","b924a936":"code","1104b7b9":"code","3d63e2bd":"code","b744dde7":"code","c587d081":"code","db37483e":"code","5891a36a":"code","9f07e9a8":"code","184bff19":"code","158d6dab":"code","2597338a":"code","b21aeeb8":"code","ee345199":"code","b05cc2e5":"code","3810008f":"code","358f0104":"code","854514b6":"code","d7372d02":"code","3daf890f":"code","361e165f":"code","0952120b":"code","6c4f3575":"markdown","52c620e3":"markdown","5efd5c8d":"markdown","998dab1f":"markdown","50ec928f":"markdown","b2e3ef2b":"markdown","967ac98a":"markdown","8b12f7bc":"markdown","4b367d8d":"markdown","70728768":"markdown","e382a7bd":"markdown","05077bb6":"markdown","3ebfd04c":"markdown","18c6e75f":"markdown","44331fe6":"markdown","12f40020":"markdown","d778f813":"markdown","bba42508":"markdown","2725ae05":"markdown","8efbab8d":"markdown","34a81946":"markdown","05b58b13":"markdown","f0815f56":"markdown","48da49d2":"markdown","1ded7cab":"markdown","e419360b":"markdown","e7b79d20":"markdown","5d63acba":"markdown","1c744599":"markdown","5fdfc938":"markdown","f669e6f1":"markdown","795d4967":"markdown","f6958019":"markdown","3b39597b":"markdown","25f4f37d":"markdown","72daacc5":"markdown","1498eb71":"markdown","8269e695":"markdown","b9cca4a2":"markdown","697f4a63":"markdown","259aeef5":"markdown","eeebe8f8":"markdown","f8a2c090":"markdown","efb5456f":"markdown","637bc321":"markdown","60df83ca":"markdown","5c7336ad":"markdown","75a781ce":"markdown","9a4f9f78":"markdown","37681ef8":"markdown","81ca804f":"markdown","d8445a4d":"markdown","10b4f566":"markdown","b5da839b":"markdown","c19c34f0":"markdown","d624f410":"markdown","46be0aad":"markdown","c13bddb2":"markdown","4972f931":"markdown","014ab1ed":"markdown","7d16b8bd":"markdown","1b31b9af":"markdown","db1043c1":"markdown","d7dbeb96":"markdown"},"source":{"d194dc8e":"#hide\nimport warnings\nwarnings.filterwarnings('ignore')\n# import kaggle\n# !kaggle competitions download -c titanic -p \"kaggle\/input\"\n# !unzip \"kaggle\/input\/titanic.zip\" -d \"kaggle\/input\/titanic\"","342ea4b4":"#collapse-hide\nimport os\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, accuracy_score, roc_auc_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\npd.set_option('display.max_columns', None)","83ba4a9e":"#hide_input\nfrom pathlib import Path\ndata_path = Path(\"..\/input\/titanic\")","ee0424df":"os.listdir(data_path)","0135853b":"train_data = pd.read_csv(data_path\/\"train.csv\")\ndisplay(train_data.head(3))","41e3a549":"test_data = pd.read_csv(data_path\/\"test.csv\")\ntest_data.head(3)","e8366db8":"train_data.describe()","5b20eed8":"view = train_data.isna().sum().reset_index().merge(test_data.isna().sum().reset_index(), on='index', how='left')\nview.columns = ['feature','train','test']\nview.loc['Total',:]= view.sum(axis=0, numeric_only=True)\nview.T","6b12d11b":"import matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (10,6)\n\nfig, ax =plt.subplots(1, 2)\nsns.countplot(train_data.Pclass, ax=ax[0])\nsns.barplot(x=train_data.Pclass, y=train_data.Survived, ax=ax[1])\nfig.show()","d1be6a38":"fig, ax =plt.subplots(1, 2)\nsns.countplot(train_data.Sex, ax=ax[0])\nsns.barplot(x=train_data.Sex, y=train_data.Survived, ax=ax[1])\nfig.show()","358d938b":"fig, ax =plt.subplots(1, 2)\nsns.boxplot(y=train_data.Age, x=train_data.Survived, ax=ax[0])\nsns.boxplot(y=train_data.Age, x=train_data.Survived, hue = train_data.Sex, ax=ax[1])\nfig.show()","2f7a75b6":"train_data[train_data.Age >=70]","f3bb1525":"train_data.loc[train_data.Age == 80, \"Age\"] = 47","28e4a512":"fig, ax =plt.subplots(1, 2)\nsns.countplot(x=train_data.SibSp, ax=ax[0])\nsns.barplot(x=train_data.SibSp, y=train_data.Survived, ax=ax[1])\nfig.show()","75c4f897":"fig, ax =plt.subplots(1, 2)\nsns.countplot(x=train_data.Parch, ax=ax[0])\nsns.barplot(x=train_data.Parch, y=train_data.Survived, ax=ax[1])\nfig.show()","c7dde043":"sns.boxplot(y=np.log(train_data.Fare+1), x=train_data.Survived)","2712704d":"train_data[train_data.Fare==0]","e5e3d6b7":"plt.rcParams[\"figure.figsize\"] = (10, 6)\nfig, ax =plt.subplots(1, 2)\nsns.countplot(x=train_data.Embarked, ax=ax[0])\nsns.barplot(x=train_data.Embarked, y=train_data.Survived, ax=ax[1])\nfig.show()","8133732f":"baseline_features = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\n\nX = pd.get_dummies(train_data[baseline_features])\ny = train_data[\"Survived\"]\n\nX_test = pd.get_dummies(test_data[baseline_features])\n\nbaseline_model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nbaseline_model.fit(X, y)\npredictions = baseline_model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('.\/baseline_submission.csv', index=False)","a6215842":"train_data.Name.sample(5)","f41d0792":"def get_title(n):\n    if ' Mrs. ' in n: title = 'Mrs'\n    elif ' Mr. ' in n: title = 'Mr'\n    elif ' Miss. ' in n: title = 'Miss'\n    elif ' Master. ' in n: title = 'Master'\n    elif ' Dr. ' in n: title = 'Dr'\n    else: title = 'Other'\n    return title\n\ndef get_lastname(s, idx):\n    i = s.split(',')[1]\n    return i.split()[idx]\n        \ntrain_data['Title'] = train_data.Name.apply(lambda s: get_title(s))\ntrain_data['LastName'] = train_data.Name.apply(lambda s: get_lastname(s, 1))\n# I am interested in popular last names\nLastNameTop = train_data.LastName.value_counts().head(10)\ntrain_data['LastName'] = train_data['LastName'].apply(lambda s: s if s in LastNameTop.index else 'Other')","b924a936":"plt.rcParams[\"figure.figsize\"] = (10, 6)\nfig, ax =plt.subplots(1, 2)\nsns.countplot(x=train_data.Title, ax=ax[0])\nsns.barplot(x=train_data.Title, y=train_data.Survived, ax=ax[1])\nfig.show()","1104b7b9":"def normarl_text(string):\n    return ''.join(char for char in string if (char.isalnum() or char == \" \") )\n\ntrain_data['Ticket_normal'] = train_data.Ticket.apply(lambda s: normarl_text(s))\ntrain_data['Ticket_split'] = train_data.Ticket_normal.apply(lambda s: s.split())\ntrain_data['Ticket_length'] = train_data.Ticket_split.apply(lambda s: len(s))\ntrain_data['TicketNumber'] = train_data.Ticket_split.apply(lambda s: s[-1])\ntrain_data['TicketFirstNumber'] = train_data.TicketNumber.str.extract('(\\d+)', expand=False).fillna(0).apply(lambda s: str(s)[:1])\ntrain_data['TicketCode'] = train_data.Ticket_split.apply(lambda s: s[0])\n\nTicketCodeTop = train_data.TicketCode.value_counts().head(10)\ntrain_data['TicketCode'] = train_data['TicketCode'].apply(lambda s: s if s in TicketCodeTop.index else 'Other')","3d63e2bd":"plt.rcParams[\"figure.figsize\"] = (15, 6)\nfig, ax =plt.subplots(1, 2)\nsns.countplot(data=train_data, x='TicketFirstNumber', ax=ax[0])\nsns.barplot(data=train_data, x='TicketFirstNumber', y='Survived', ax=ax[1])\nfig.show()","b744dde7":"plt.rcParams[\"figure.figsize\"] = (15, 6)\nfig, ax =plt.subplots(1, 2)\nsns.countplot(data=train_data, x='TicketCode', ax=ax[0])\nsns.barplot(data=train_data, x='TicketCode', y='Survived', ax=ax[1])\nfig.show()","c587d081":"import re\n\ndef cabin_code(cabin):\n    if cabin is None: return 'NAN'\n    elif 'A' in cabin: return 'A'\n    elif 'B' in cabin: return 'B'\n    elif 'C' in cabin: return 'C'\n    elif 'D' in cabin: return 'D'\n    elif 'E' in cabin: return 'E'\n    elif 'F' in cabin: return 'F'\n    elif 'G' in cabin: return 'G'\n    else: return 'NAN'\n\ndef cabin_number(cabin):\n    if cabin is None: return None\n    l = []\n    try:\n        for w in str(cabin).split():\n            l.append(int(re.findall(r'\\d+', w)[0]))\n        return np.mean(l)\n    except:\n        return None\n\ntrain_data['CabinCode'] = train_data.Cabin.apply(lambda s: cabin_code(str(s)))\ntrain_data['CabinNumber'] = train_data.Cabin.apply(lambda s: cabin_number(str(s)))","db37483e":"pd.crosstab(train_data.Pclass, train_data.CabinCode)","5891a36a":"pd.crosstab(train_data[train_data.Pclass==2].Embarked, train_data[train_data.Pclass==2].CabinCode)","9f07e9a8":"pd.crosstab(train_data[train_data.Pclass==3].Sex, train_data[train_data.Pclass==3].CabinCode)","184bff19":"def fill_cabin_nan(row):\n    value = None\n    if row['CabinCode'] != 'NAN':\n        value = row['CabinCode']\n    else:\n        if row['Pclass']==1:\n            value = 'C'\n        elif row['Pclass']==2:\n            if row['Embarked']=='C':\n                value = 'D'\n            elif row['Embarked']=='Q':\n                value = 'E'\n            else:\n                value = 'F'\n        else:\n            if row['Sex']=='female':\n                value = 'G'\n            else:\n                value = 'F'\n    return value\n\ntrain_data['CabinCodeFill'] = train_data.apply(lambda s: fill_cabin_nan(s), axis=1)\ncabin_map = train_data.groupby(['CabinCode'], as_index=False).mean()[['CabinCode','CabinNumber']].set_index('CabinCode')['CabinNumber']\ntrain_data['CabinNumberFill'] = train_data['CabinNumber'].fillna(train_data['CabinCodeFill'].map(cabin_map))","158d6dab":"plt.rcParams[\"figure.figsize\"] = (15, 6)\nfig, ax =plt.subplots(1, 3)\nsns.countplot(x=train_data.CabinCodeFill, ax=ax[0])\nsns.barplot(x=train_data.CabinCodeFill, y=train_data.Survived, ax=ax[1])\nsns.boxplot(x=train_data.Survived, y=train_data.CabinNumberFill, ax=ax[2])\nfig.show()","2597338a":"plt.rcParams[\"figure.figsize\"] = (15, 6)\nfig, ax =plt.subplots(1, 2)\nsns.boxplot(y=train_data.Age, x=train_data.Title, ax=ax[0])\nsns.boxplot(y=train_data.Age, x=train_data.Pclass, ax=ax[1])\nfig.show()","b21aeeb8":"age_map = train_data.pivot_table(values='Age', index='Title', columns='Pclass', aggfunc=np.median, \n                       fill_value=train_data.Age.median()).stack().reset_index()\nage_map.columns = ['Title', 'Pclass', 'AgeFill']\n\ntrain_data = train_data.merge(age_map, on=['Title','Pclass'], how='left')\ntrain_data['Age'] = np.where(train_data.Age.isna(), train_data.AgeFill, train_data.Age)","ee345199":"train_data.Embarked.fillna('S', inplace=True)","b05cc2e5":"test_data['Title'] = test_data.Name.apply(lambda s: get_title(s))\ntest_data['LastName'] = test_data.Name.apply(lambda s: get_lastname(s, 1))\ntest_data['LastName'] = test_data['LastName'].apply(lambda s: s if s in LastNameTop.index else 'Other')\n\ntest_data['Ticket_normal'] = test_data.Ticket.apply(lambda s: normarl_text(s))\ntest_data['Ticket_split'] = test_data.Ticket_normal.apply(lambda s: s.split())\ntest_data['Ticket_length'] = test_data.Ticket_split.apply(lambda s: len(s))\ntest_data['TicketNumber'] = test_data.Ticket_split.apply(lambda s: s[-1])\ntest_data['TicketFirstNumber'] = test_data.TicketNumber.str.extract('(\\d+)', expand=False).fillna(0).apply(lambda s: str(s)[:1])\ntest_data['TicketCode'] = test_data.Ticket_split.apply(lambda s: s[0])\ntest_data['TicketCode'] = test_data['TicketCode'].apply(lambda s: s if s in TicketCodeTop.index else 'Other')\n\ntest_data['CabinCode'] = test_data.Cabin.apply(lambda s: cabin_code(str(s)))\ntest_data['CabinNumber'] = test_data.Cabin.apply(lambda s: cabin_number(str(s)))\ntest_data['CabinCodeFill'] = test_data.apply(lambda s: fill_cabin_nan(s), axis=1)\ntest_data['CabinNumberFill'] = test_data['CabinNumber'].fillna(test_data['CabinCodeFill'].map(cabin_map))\n\ntest_data = test_data.merge(age_map, on=['Title','Pclass'], how='left')\ntest_data['Age'] = np.where(test_data.Age.isna(), test_data.AgeFill, test_data.Age)\n\ntest_data.Fare.fillna(train_data[train_data.Pclass==3].Fare.mean(), inplace=True)","3810008f":"all_features = ['PassengerId', 'Pclass', 'Title', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare',\n                'TicketFirstNumber', 'CabinCodeFill', 'CabinNumberFill', 'Embarked']\n\nX = pd.get_dummies(train_data[all_features])\nX_test = pd.get_dummies(test_data[all_features])\ny = train_data.Survived\nprint(X.shape, X_test.shape)","358f0104":"def Diff(li1, li2):\n    return list(set(li1) - set(li2)) + list(set(li2) - set(li1))\n\ndiff_cols = Diff(X.columns, X_test.columns)\nprint('diff columns: ', diff_cols)","854514b6":"all_features = list(set(X.columns) - set(diff_cols))\nX, X_test = X[all_features], X_test[all_features]\nprint(X.shape, X_test.shape)","d7372d02":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.25, random_state=1)","3daf890f":"def training(m, X_train, y_train, X_valid, y_valid):\n    m.fit(X_train, y_train)\n    \n    train_pred = m.predict(X_train)\n    train_prob = m.predict_proba(X_train)[:, 1]\n    \n    valid_pred = m.predict(X_valid)\n    valid_prob = m.predict_proba(X_valid)[:, 1]\n    \n    print(\"****TRAIN****\")\n    print(classification_report(y_train, train_pred))\n    print(\"roc_auc score: \", roc_auc_score(y_train, train_prob))\n    \n    print(\"\\n****VALID****\")\n    print(classification_report(y_valid, valid_pred))\n    print(\"roc_auc score: \", roc_auc_score(y_valid, valid_prob))","361e165f":"rf = RandomForestClassifier(n_estimators=500, max_features='sqrt', max_depth=3, \n                            bootstrap=False, min_samples_leaf=2, min_samples_split=2, \n                            random_state=1)\n\ntraining(rf, X_train[all_features], y_train, X_valid[all_features], y_valid)","0952120b":"predictions = rf.predict(X_test[all_features])\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('.\/rf_submission.csv', index=False)","6c4f3575":"Only two missing value in `Embarke` in train_data, I will fill them by mode value, it is `S`","52c620e3":"Passenger has 1, 2 sibling or husband and wife relationship have higher survived rate but if have more relationship, passenger have significantly lower survived rate","5efd5c8d":"**Train valid split data**","998dab1f":"Have some passager have free ticket, look at them","50ec928f":"**SibSp**","b2e3ef2b":"### **Become a Kaggler and progression**","967ac98a":"Have difference of shape between two dataset, because, have level in category feature are different. I need sync train_data and test_data","8b12f7bc":"**Ticket**","4b367d8d":"**Fare**","70728768":"### **Training model**","e382a7bd":"**Cabbin**","05077bb6":"One thing to note is number of missing value of `Cabin`, I see them concentrated on 2nd and 3rd class tickets. So, I will fill `NAN` in `CabinCode` by `C` if `Pclass=1`","3ebfd04c":"* ***train.csv*** contains the details of a subset of the passengers on board (891 passengers, to be exact -- where each passenger gets a different row in the table). The values in the second column (\"Survived\") can be used to determine whether each passenger survived or not (`1`, if passenger survived)\n* ***test.csv*** contains the details of a subset of 418 passengers. Using the patterns you find in train.csv, you have to predict whether the other 418 passengers on board survived. So test.csv does not have a \"Survived\" column  \n* ***gender_submission.csv*** file is provided as an example that shows how you should structure your predictions. It predicts that all female passengers survived, and all male passengers died. Like this file, your submission should have:  \n    * a \"PassengerId\" column containing the IDs of each passenger from test.csv  \n    * a \"Survived\" column (that you will create!) with a \"1\" for the rows where you think the passenger survived, and a \"0\" where you predict that the passenger died.","18c6e75f":"Count number of passengers and calculate Survival rate for each Title","44331fe6":"**Apply for test_data**","12f40020":"Oh, `Mr` has survival rate is very low, and `Mrs`, `Miss` have survival rate is highest. This is matched with `Sex` analyst before. It is really good feature","d778f813":"Only 1\/15 person have free ticket was survived.","bba42508":"### **Feature engineering**","2725ae05":"Male is more than but survied rate is lower. Most likely, the men gave the lives to the women","8efbab8d":"**Name**","34a81946":"Now, I can train classification model on Titanic data","05b58b13":"Number of `ticket class 1` and `ticket class 2` is smaller than number of `ticket class 3`, but survived rate higher, maybe the safety standards of these two ticket classes are better","f0815f56":"Now we can bring [this](https:\/\/www.kaggle.com\/c\/titanic\/submit) to submis our prediction. This case,our model has an accuracy of 0.775","48da49d2":"Young people have a slightly higher survival rate, but look at the point outlier, have man 80 years old survived. That is [Henry Wilson](https:\/\/www.encyclopedia-titanica.org\/titanic-survivor\/algernon-barkworth.html), he was born on 1864, so at the moment of Titanic disaster (1912) he was 47 years old. I will update data for this case","1ded7cab":"Seemingly, `TicketFirstNumber` strong correlation with `Pclass`, If `TicketFirstNumber` is 3 then `Pclass` may be is 3, and survival rate is low.","e419360b":"We need import libraries","e7b79d20":"**Age**","5d63acba":"Passagers are from Cherbourg have higher survived rate","1c744599":"If `Pclass=3`, fill `NAN` base `Sex`","5fdfc938":"Look at the passenger's name, I found have `Title` in the `Name`. I can extract, statistical them and consider it related to `Survived` or not? I also do that with `LastName`","f669e6f1":"### **Submit to Titanic**","795d4967":"Passengers on `F-Cabin` have lower survival rate","f6958019":"This is the legendary [Titanic ML competition](https:\/\/www.kaggle.com\/c\/titanic) \u2013 the best, first challenge for you to dive into ML competitions and familiarize yourself with how the Kaggle platform works.  \n\nThe competition is simple: use machine learning to create a model that predicts which passengers survived the Titanic shipwreck","3b39597b":"Look at the data","25f4f37d":"Baseline is a simple model which you are confident should perform reasonably well. Through visualization, `Pclass`, `Sex`, `SibSp`, `Parch` are features can be classification passagers into 2 classes. So, we use it to try build a model quickly way","72daacc5":"|Variable | Definition | Key | Types |\n| :-- | :-- |:-- | --- |\n|PassengerId | Id of passenger |  | int64 |\n|Survival | Survival | 0 = No, 1 = Yes | int64 |\n|Pclass | Ticket class | 1 = 1st, 2 = 2nd, 3 = 3rd |int64 |\n|Name | Name of passenger | | object |\n|Sex | Gender of passenger | | object |\n|Age | Age in years | |\tfloat64 |\n|Sibsp | Of siblings \/ spouses aboard the Titanic | |int64 |\n|Parch | Of parents \/ children aboard the Titanic | |int64 |\n|Ticket | Ticket number\t| |object |\n|Fare | Passenger fare\t| |float64 |\n|Cabin | Cabin number | |\tobject |\n|Embarked | Port of Embarkation | C = Cherbourg, Q = Queenstown, S = Southampton |object |","1498eb71":"I think location seat information may be related to survival rate, `Ticket` may be contains it. I interested code and first number in the `Ticket`. Let extract them","8269e695":"**Parch**","b9cca4a2":"Number of missing value for each feature","697f4a63":"## **Welcome to Kaggle**\n[Kaggle](https:\/\/www.kaggle.com\/), a subsidiary of Google LLC, is an online community of data scientists and machine learning practitioners. Kaggle allows users to find and publish data sets, explore and build models in a web-based data-science environment, work with other data scientists and machine learning engineers, and enter competitions to solve data science challenges.  \n\n[This](https:\/\/www.kaggle.com\/alexisbcook\/getting-started-with-kaggle) is best to getting with Kaggle, this post is highlight that I summarize","259aeef5":"**Randomforest model**","eeebe8f8":"So these are something highlight data\n\n* Have 891 records in train data\n* Rate of survived (*target*) is 38.38%\n* The 3rd class ticket is the most popular\n* Have 577\/891 passenger is male\n* Mean of age is 29.7, 177\/891 are missing values\n* The most popular of SibSp is 0\n* The most popular of Parch is 0\n* Have passenger have fare equal 0, note test dataset have a missing value\n* Have 204\/891 values of Cabin are not null, therein 147 unique value\n* 644\/891 passengers are from Southampton\n* Missing value rate same same between train dataset and test dataset","f8a2c090":"We have a variable call `data_path`, this is path of directory contains our data","efb5456f":"#### **Load data**","637bc321":"# Kaggle's 1\/30 Days Of ML\n> Getting Started With Kaggle\n\n- toc: true \n- badges: true\n- comments: true\n- categories: [Kaggle]\n- image: images\/chart-preview.png","60df83ca":"### **Give an upvote**\nPick one that seems particularly useful or insightful, and click on the ticker to the right of the comment to cast an upvote.  \n\nAnd that's it! You should now be a Contributor!","5c7336ad":"**Embarked**","75a781ce":"### **Make a comment**","9a4f9f78":"We have 177\/891 missing values of `Age` in train_data and 86\/418 in test_data. We need fill that values. I consider the relationship between `Title`, `Pclass` and `Age` ","37681ef8":"#### **Explore data analysis**","81ca804f":"#### **Baseline model**","d8445a4d":"Navigate to the discussion forum for the Titanic competition by clicking [here](https:\/\/www.kaggle.com\/c\/titanic\/discussion). Find a topic that interests you, and click on it to view the list of comments that other users have already posted. With me, discussion forum really is a treasure.","10b4f566":"## **Let's be in the top 5% with the highest score**","b5da839b":"**Gender with survived**","c19c34f0":"If `Pclass=2`, fill `NAN` base `Enbarked`","d624f410":"**Ticket class and survived**","46be0aad":"**Age**","c13bddb2":"Now, we need apply processing for test_data, and final, fill missing value of `Fare` in test_data, we only have one missing value, it of passenger have `Pclass=3`","4972f931":"Now, this is all features we have to build model classification","014ab1ed":"There is an age difference between the ticket categories, and also within the title groups. So I will fill missing value by mean for each groups. ","7d16b8bd":"**Predict and submiss result**","1b31b9af":"Data Dictionary","db1043c1":"Click [here](https:\/\/www.kaggle.com\/account\/login?phase=startRegisterTab&returnUrl=%2F) to create an acount, and once you have created a Kaggle account, you're officially a \"Kaggler\", and joining a community of over seven million users!  \n  \nThere are five performance tiers at Kaggle: **Novice**, **Contributor**, **Expert**, **Master**, **Grandmaster**. And to level up, you need to do the list of things. Now we are levelling up from **Novice** to **Contributor**, it is quick and easy.","d7dbeb96":"**Embarked**"}}