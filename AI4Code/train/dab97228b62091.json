{"cell_type":{"f4da0447":"code","9aea7a99":"code","a94799c6":"code","5e90e214":"code","5904e4a5":"code","68d89e71":"code","e50dbbb7":"code","c385da16":"code","d828d5b0":"code","8b82bfc4":"code","9cd92b62":"code","495620c8":"code","244e9fe8":"code","5faf6dfa":"code","6c44aaff":"code","6bbd4d3e":"code","670b202e":"markdown","9b2689be":"markdown","4762a20b":"markdown","17aa2071":"markdown","9ca9a561":"markdown","0086cec4":"markdown","ec8462dc":"markdown","db1d6318":"markdown"},"source":{"f4da0447":"import tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt","9aea7a99":"fashion_mnist = tf.keras.datasets.fashion_mnist\n(train_features, train_labels), (test_features, test_labels) = fashion_mnist.load_data()\nclass_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","a94799c6":"print(train_features.shape)\nprint(train_labels.shape)","5e90e214":"plt.figure()\nplt.imshow(train_features[0])\nplt.colorbar()\nplt.grid(False)\nplt.show()","5904e4a5":"plt.figure(figsize=(10,10))\nfor i in range(24):\n    plt.subplot(6,6,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_features[i], cmap=plt.cm.binary)\n    plt.xlabel(class_names[train_labels[i]])\nplt.show()","68d89e71":"# Scale values to a range of 0 to 1 before feeding them to the neural network model\ntrain_features = train_features \/ 255.0\ntest_features = test_features \/ 255.0","e50dbbb7":"# Set up CNN layers\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10)\n])","c385da16":"# Compile model\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","d828d5b0":"# Feed model\nmodel.fit(train_features, train_labels, epochs = 5)","8b82bfc4":"# Evaluate model\ntest_loss, test_acc = model.evaluate(test_features,  test_labels, verbose=2)\nprint(\"\\nTest accuracy: \" + \"{:.2f}\".format(test_acc))","9cd92b62":"probability_model = tf.keras.Sequential([model, tf.keras.layers.Softmax()])\n\npredictions = probability_model.predict(test_features)","495620c8":"# Accuracy test\n\n# print(predictions[i])\n\nres_count = 0\nn_test = 1000\n\nfor i in range(0,n_test):\n    predict = np.argmax(predictions[i]);\n    actual = test_labels[i];\n    if predict == actual:\n        res = \"True\"\n        res_count += 1\n    else:\n        res = \"False\"\n#     print(\"Predict: \" + str(predict) + \"\\tActual: \" + str(actual) + \"\\t> \" + res)\n\nprint(\"Accuracy: \" + str(res_count\/n_test))","244e9fe8":"def plot_image(i, predictions_array, true_label, img):\n  true_label, img = true_label[i], img[i]\n  plt.grid(False)\n  plt.xticks([])\n  plt.yticks([])\n\n  plt.imshow(img, cmap=plt.cm.binary)\n\n  predicted_label = np.argmax(predictions_array)\n  if predicted_label == true_label:\n    color = 'blue'\n  else:\n    color = 'red'\n\n  plt.xlabel(\"{} {:2.0f}% ({})\".format(class_names[predicted_label],\n                                100*np.max(predictions_array),\n                                class_names[true_label]),\n                                color=color)\n\ndef plot_value_array(i, predictions_array, true_label):\n  true_label = true_label[i]\n  plt.grid(False)\n  plt.xticks(range(10))\n  plt.yticks([])\n  thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n  plt.ylim([0, 1])\n  predicted_label = np.argmax(predictions_array)\n\n  thisplot[predicted_label].set_color('red')\n  thisplot[true_label].set_color('blue')","5faf6dfa":"i = 0\nplt.figure(figsize=(6,3))\nplt.subplot(1,2,1)\nplot_image(i, predictions[i], test_labels, test_features)\nplt.subplot(1,2,2)\nplot_value_array(i, predictions[i],  test_labels)\nplt.show()","6c44aaff":"# Plot the first X test images, their predicted labels, and the true labels.\n# Color correct predictions in blue and incorrect predictions in red.\nnum_rows = 5\nnum_cols = 3\nnum_images = num_rows*num_cols\nplt.figure(figsize=(2*2*num_cols, 2*num_rows))\nfor i in range(num_images):\n  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n  plot_image(i, predictions[i], test_labels, test_features)\n  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n  plot_value_array(i, predictions[i], test_labels)\nplt.tight_layout()\nplt.show()","6bbd4d3e":"# Grab an image from the test dataset.\nimg = test_features[1]\nprint(img.shape)\n\n# tf.keras models are optimized to make predictions on a batch, or collection, of examples at once. Accordingly, even though you're using a single image, you need to add it to a list\n\n# Add the image to a batch where it's the only member.\nimg = (np.expand_dims(img,0))\nprint(img.shape)\n\n# Now predict the correct label for this image:\npredictions_single = probability_model.predict(img)\nprint(predictions_single)\n\nplot_value_array(1, predictions_single[0], test_labels)\n_ = plt.xticks(range(10), class_names, rotation=45)\nplt.show()\n\nprint(np.argmax(predictions_single))","670b202e":"## Explore dataset","9b2689be":"## Import libraries","4762a20b":"## Make prediction","17aa2071":"## Train model","9ca9a561":"## Use the trained model","0086cec4":"## Preprocess dataset","ec8462dc":"## Build model","db1d6318":"## Import dataset"}}