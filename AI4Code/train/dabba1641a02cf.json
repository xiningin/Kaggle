{"cell_type":{"d7faa792":"code","bf401842":"code","1aed8ea5":"code","5b16aa53":"code","c96acc3c":"code","4147677b":"code","bdc05ac1":"code","1e60da95":"code","b9fd5895":"code","b16be67d":"code","77c38bb5":"code","dcefbee5":"code","0eda0a75":"code","9f24f145":"code","631742ad":"code","3e2e9a06":"code","03b63d16":"code","63d0d88f":"code","78be0f62":"code","81ac7227":"code","9979455d":"markdown","943fb0ee":"markdown","74b4d80d":"markdown"},"source":{"d7faa792":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bf401842":"import matplotlib.pyplot as plt","1aed8ea5":"from sklearn.datasets import load_boston\nbos= load_boston()\nbos.keys()","5b16aa53":"print(bos.DESCR)","c96acc3c":"boston=pd.read_csv('..\/input\/boston.csv')\n# this dataset is also available as sklear.datasets.load_boston()\nboston.head()","4147677b":"X=boston.drop('MEDV',axis=1).values\ny=boston['MEDV'].values\nprint(type(X),type(y))\nprint(X[1])\nprint(y[1])","bdc05ac1":"X_rooms=X[:,5]   #RM col\ny=y.reshape(-1,1)\nX_rooms=X_rooms.reshape(-1,1)","1e60da95":"plt.scatter(X_rooms,y)\nplt.xlabel('No of rooms per dwelling')\nplt.ylabel('Value of house in 1000$')\nplt.show()","b9fd5895":"from sklearn import linear_model\nreg= linear_model.LinearRegression()\nreg.fit(X_rooms,y)","b16be67d":"predict_space= np.linspace(min(X_rooms), max(X_rooms)).reshape(-1,1)","77c38bb5":"plt.scatter(X_rooms,y,color='green')\nplt.plot(predict_space,reg.predict(predict_space),color='red',linewidth=3)\nplt.show()","dcefbee5":"from sklearn.model_selection import train_test_split","0eda0a75":" X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=42)","9f24f145":"reg_all = linear_model.LinearRegression()\nreg_all.fit(X_train, y_train)","631742ad":"y_pred = reg_all.predict(X_test)\n","3e2e9a06":"reg_all.score(X_test, y_test)","03b63d16":"from sklearn.linear_model import Lasso\nnames=boston.drop('MEDV',axis=1).columns\nl=Lasso(alpha=0.1)\nlcoef= l.fit(X,y).coef_","63d0d88f":"_=plt.plot(range(len(names)),lcoef)\n_=plt.xticks(range(len(names)),names,rotation=60)\n_=plt.ylabel('coeffs')\nplt.show()","78be0f62":"def display_plot(cv_scores, cv_scores_std):\n    fig = plt.figure()\n    ax = fig.add_subplot(1,1,1)\n    ax.plot(alpha_space, cv_scores)\n\n    std_error = cv_scores_std \/ np.sqrt(10)\n\n    ax.fill_between(alpha_space, cv_scores + std_error, cv_scores - std_error, alpha=0.2)\n    ax.set_ylabel('CV Score +\/- Std Error')\n    ax.set_xlabel('Alpha')\n    ax.axhline(np.max(cv_scores), linestyle='--', color='.5')\n    ax.set_xlim([alpha_space[0], alpha_space[-1]])\n    ax.set_xscale('log')\n    plt.show()","81ac7227":"# Import necessary modules\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import cross_val_score\n\n# Setup the array of alphas and lists to store scores\nalpha_space = np.logspace(-4, 0, 50)\nridge_scores = []\nridge_scores_std = []\n\n# Create a ridge regressor: ridge\nridge = Ridge(normalize=True)\n\n# Compute scores over range of alphas\nfor alpha in alpha_space:\n\n    # Specify the alpha value to use: ridge.alpha\n    ridge.alpha = alpha\n    \n    # Perform 10-fold CV: ridge_cv_scores\n    ridge_cv_scores = cross_val_score(ridge,X,y,cv=10)\n    \n    # Append the mean of ridge_cv_scores to ridge_scores\n    ridge_scores.append(np.mean(ridge_cv_scores))\n    \n    # Append the std of ridge_cv_scores to ridge_scores_std\n    ridge_scores_std.append(np.std(ridge_cv_scores))\n\n# Display the plot\ndisplay_plot(ridge_scores, ridge_scores_std)\n","9979455d":"The most important predictor for our taget is No of rooms per dwelling","943fb0ee":"Target is MEDV: Median value of owner-occupied homes in $1000's","74b4d80d":"predicting house value from a single feature RM:average number of rooms per dwelling"}}