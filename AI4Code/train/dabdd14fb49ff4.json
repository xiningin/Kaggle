{"cell_type":{"c3a326ec":"code","8f8f1dd7":"code","8c9ee479":"code","aa3a4f98":"code","c8aee7fb":"code","3083914f":"code","1b9d8cb1":"code","16a93f00":"code","31bb5cc1":"code","271e0017":"code","69a3fbca":"code","62529f82":"code","e3e2f6d7":"code","556faa2f":"code","12d18687":"code","d6a9282d":"code","2bc2a6f9":"code","2784eb19":"code","e04d402b":"code","1f4f6bc7":"code","d3b0d646":"code","87e628e4":"code","ca14bdaa":"code","70efd623":"code","9c4a459b":"code","f3575350":"code","1519b660":"code","97db2a06":"code","97580b8d":"code","6bebe9ab":"code","48c84345":"code","894aec37":"code","da83c6c3":"code","aa26908f":"code","67db85cf":"code","f75be5a5":"code","5106b5b0":"code","f8983d2b":"code","f6097aed":"markdown","4c330013":"markdown","fcf100fe":"markdown"},"source":{"c3a326ec":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport pylab as pl\nimport numpy as np\nimport sklearn\nimport seaborn as sns\nfrom scipy import stats\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.impute import KNNImputer","8f8f1dd7":"df = pd.read_csv(r\"..\/input\/is-the-driver-at-fault\/train.csv\")\ntest = pd.read_csv(r\"..\/input\/is-the-driver-at-fault\/test.csv\")\n","8c9ee479":"def resumetable(df):\n    print(f\"Dataset Shape: {df.shape}\")\n    summary = pd.DataFrame(df.dtypes,columns=['dtypes'])\n    summary = summary.reset_index()\n    summary['Name'] = summary['index']\n    summary = summary[['Name','dtypes']]\n    summary['Missing'] = df.isnull().sum().values    \n    summary['Uniques'] = df.nunique().values\n    summary['First Value'] = df.loc[0].values\n    summary['Second Value'] = df.loc[1].values\n    #summary['Third Value'] = df.loc[2].values\n\n    for name in summary['Name'].value_counts().index:\n        summary.loc[summary['Name'] == name, 'Entropy'] = round(stats.entropy(df[name].value_counts(normalize=True), base=2),2) \n\n    return summary","aa3a4f98":"columns =  [\"Report Number\",\"Local Case Number\", \"Off-Road Description\",\"Municipality\", \"Related Non-Motorist\",\"Person ID\",\"Non-Motorist Substance Abuse\",\"Drivers License State\",\"Vehicle ID\",\"Vehicle Model\",\"Vehicle Make\",\"Vehicle Year\",\"Circumstance\"]\ndf = df.drop(columns, axis =1)\ntest = test.drop(columns, axis =1)","c8aee7fb":"corr =  [\"Crash Date\/Time\", 'Location','Road Name', 'Cross-Street Name','Latitude', 'Longitude','Driverless Vehicle' ]\ndf = df.drop(corr, axis =1)\ntest = test.drop(corr, axis =1)","3083914f":"def outliertrain(df):\n    col = [ 'Route Type','Collision Type', 'Weather', 'Surface Condition', 'Light',\n       'Traffic Control', 'Driver Substance Abuse', 'Injury Severity',\n       'Vehicle Damage Extent', 'Vehicle Second Impact Location','Vehicle First Impact Location',\n       'Vehicle Body Type', 'Vehicle Movement', 'Vehicle Going Dir','Vehicle Continuing Dir',\n       'Equipment Problems']\n\n\n    for i in col:\n        df[i].replace(\"UNKNOWN\", np.nan, inplace=True)\n        df[i].replace(\"Unknown\", np.nan, inplace=True)\n    \n\n        df[[\"Driver Substance Abuse\"]] = df[[\"Driver Substance Abuse\"]].replace({\"ALCOHOL CONTRIBUTED\":\"ALCOHOL PRESENT\",\"ILLEGAL DRUG CONTRIBUTED\":\"ILLEGAL DRUG PRESENT\",\"MEDICATION CONTRIBUTED\":\"MEDICATION PRESENT\",\"COMBINATION CONTRIBUTED\":\"COMBINED SUBSTANCE PRESENT\"})\n\n    return df","1b9d8cb1":"def outliertest(df):\n    col = [ 'Route Type','Collision Type', 'Weather', 'Surface Condition', 'Light',\n       'Traffic Control', 'Driver Substance Abuse', 'Injury Severity',\n       'Vehicle Damage Extent', 'Vehicle Second Impact Location','Vehicle First Impact Location',\n       'Vehicle Body Type', 'Vehicle Movement', 'Vehicle Going Dir','Vehicle Continuing Dir',\n       'Equipment Problems']\n\n    for i in col:\n        df[i].replace(\"UNKNOWN\", np.nan, inplace=True)\n        df[i].replace(\"Unknown\", np.nan, inplace=True)\n\n        test[[\"Driver Substance Abuse\"]] = test[[\"Driver Substance Abuse\"]].replace({\"ALCOHOL CONTRIBUTED\":\"ALCOHOL PRESENT\",\"ILLEGAL DRUG CONTRIBUTED\":\"ILLEGAL DRUG PRESENT\",\"MEDICATION CONTRIBUTED\":\"MEDICATION PRESENT\",\"COMBINATION CONTRIBUTED\":\"COMBINED SUBSTANCE PRESENT\"})\n\n\n\n        test[[\"Equipment Problems\"]] = test[[\"Equipment Problems\"]].replace({\"SIZE\/TYPE IMPROPER\":\"OTHER\",\n                                                                    \"NOT STREPPED RIGHT\":\"OTHER\"})\n\n    return df\n","16a93f00":"outliertrain(df)","31bb5cc1":"outliertest(test)","271e0017":"resumetable(test)","69a3fbca":"resumetable(df)","62529f82":"for i in df.columns.values.tolist():\n    print(df[i].value_counts().to_frame())","e3e2f6d7":"def preprocessing(df):\n    cateogry_columns=df.select_dtypes(include=['object']).columns.tolist()\n    integer_columns=df.select_dtypes(include=['int64','float64']).columns.tolist()\n\n    for column in df:\n        if df[column].isnull().any():\n            if(column in cateogry_columns):\n                df[column]=df[column].fillna(df[column].mode()[0])\n            else:\n                df[column]=df[column].fillna(df[column].mean)\n  \n    return df","556faa2f":"df=preprocessing(df)","12d18687":"test_df = preprocessing(test)","d6a9282d":"def encoder(df):\n    df1 = df.select_dtypes(include=['int64','float64'])\n    lepf = df.select_dtypes(include= [np.object])\n    le = LabelEncoder()\n    lpf = {}\n    for col in lepf.columns:    \n        lpf[col] = le.fit_transform(lepf[col].astype(str))\n        lpfdf = pd.DataFrame(lpf)\n        df = pd.concat([lpfdf,df1], axis=1, join='inner')\n    return df","2bc2a6f9":"df = encoder(df)","2784eb19":"test_df = encoder(test_df)","e04d402b":"resumetable(df)","1f4f6bc7":"resumetable(test_df)","d3b0d646":"s= [\"Id\"]\ntest_df = test_df.drop(s, axis=1)","87e628e4":"X = df.loc[:, df.columns !='Fault']\ny = df.loc[:,'Fault']\nprint(X.shape, y.shape)","ca14bdaa":"# evaluate xgboost algorithm for classification\nfrom numpy import mean\nfrom numpy import std\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n","70efd623":"from catboost import CatBoostClassifier","9c4a459b":"mode = CatBoostClassifier(verbose=0, n_estimators=1000)","f3575350":"mode.fit(X,y)","1519b660":"y_pred=mode.predict(test_df)","97db2a06":"Id = np.array(list(range(77235)))","97580b8d":"output = pd.DataFrame({\n\"Id\": Id,\n\"Fault\": y_pred\n})","6bebe9ab":"output.head()","48c84345":"output.to_csv('auto7.csv', index=False)\n","894aec37":"from xgboost import XGBClassifier","da83c6c3":"model = XGBClassifier(n_estimators=1000, learning_rate = 0.03,colsample_bytree=1.0,max_depth=3,subsample=0.8)","aa26908f":"model.fit(X,y)","67db85cf":"y_pred=mode.predict(test_df)","f75be5a5":"Id = np.array(list(range(77235)))","5106b5b0":"output = pd.DataFrame({\n\"Id\": Id,\n\"Fault\": y_pred\n})","f8983d2b":"output.to_csv('auto12.csv', index=False)","f6097aed":"# Modelling","4c330013":"# Cat Boost\n","fcf100fe":"# XGBOOSTING"}}