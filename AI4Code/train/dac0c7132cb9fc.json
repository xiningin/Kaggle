{"cell_type":{"cf863a76":"code","9a14f1b0":"code","bebd3606":"code","31eb485b":"code","6e903362":"code","b054357e":"code","5f2ae795":"code","b563fc4f":"code","0d776210":"code","6dd35a4d":"code","487237f6":"code","1efaa140":"code","8a1b9832":"code","49409329":"code","cbc1d5d1":"code","712973af":"markdown","bf5c3b79":"markdown","740d9520":"markdown","9593e775":"markdown","8729724e":"markdown","a4fd2e86":"markdown","c460c1b6":"markdown","9690500a":"markdown","6f647ddc":"markdown","489b2a5c":"markdown"},"source":{"cf863a76":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9a14f1b0":"from keras.datasets import imdb\n\n(train_data, train_label), (test_data, test_label) = imdb.load_data(num_words=10000)","bebd3606":"print(train_data[0])\nprint(train_label[0])","31eb485b":"word_index = imdb.get_word_index()\nreverse_word_index = dict([(value, key) for (key, value) in word_index.items()])\ndecode_review = ' '.join([reverse_word_index.get(i-3, '?') for i in train_data[0]])\n\nprint(decode_review)","6e903362":"def vectorize_sequences(sequences, dimension=10000):\n    result = np.zeros((len(sequences), dimension))\n    for i, sequence in enumerate(sequences):\n        result[i, sequence] = 1\n    return result\n\nX_train = vectorize_sequences(train_data)\nX_test = vectorize_sequences(test_data)\n\ny_train = np.asarray(train_label).astype('float32')\ny_test = np.asarray(test_label).astype('float32')\n\nprint(X_train[0])\nprint(y_train[0])","b054357e":"from keras import models\nfrom keras.layers import Dense\n\nmodel = models.Sequential()\nmodel.add(Dense(16, activation='relu', input_shape=(10000,)))\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])\n\nX_val = X_train[:10000]\npartial_X_train = X_train[10000:]\n\ny_val = y_train[:10000]\npartial_y_train = y_train[10000:]\n\nhistory = model.fit(partial_X_train, partial_y_train, epochs=20, batch_size=512, validation_data=(X_val, y_val))","5f2ae795":"import matplotlib.pyplot as plt\n\nhistory_dict = history.history\nloss_values = history_dict['loss']\nval_loss_values = history_dict['val_loss']\n\nepochs = [i for i in range(1, 21)]\n\nplt.plot(epochs, loss_values, 'bo', label='Training loss');\nplt.plot(epochs, val_loss_values, 'ro', label='Validation loss');\nplt.title('Training and Validation Loss')\nplt.xlabel('Epochs');\nplt.ylabel('Loss');\nplt.legend();\nplt.show()","b563fc4f":"acc_values = history_dict['accuracy']\nval_acc_values = history_dict['val_accuracy']\n\nplt.plot(epochs, acc_values, 'bo', label='Training accuracy');\nplt.plot(epochs, val_acc_values, 'ro', label='Validation accuracy');\nplt.title('Training and Validation Accuracy');\nplt.xlabel('Epochs');\nplt.ylabel('Accuracy');\nplt.legend();\nplt.show()","0d776210":"model = models.Sequential()\nmodel.add(Dense(16, activation='relu', input_shape=(10000,)))\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=4, batch_size=512)\nresults = model.evaluate(X_test, y_test)","6dd35a4d":"results","487237f6":"model = models.Sequential()\nmodel.add(Dense(16, activation='relu', input_shape=(10000,)))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=4, batch_size=512)\nresults = model.evaluate(X_test, y_test)\nprint(results)","1efaa140":"model = models.Sequential()\nmodel.add(Dense(16, activation='relu', input_shape=(10000,)))\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=4, batch_size=512)\nresults = model.evaluate(X_test, y_test)\nprint(results)","8a1b9832":"model = models.Sequential()\nmodel.add(Dense(32, activation='relu', input_shape=(10000,)))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=4, batch_size=512)\nresults = model.evaluate(X_test, y_test)\nprint(results)","49409329":"model = models.Sequential()\nmodel.add(Dense(16, activation='relu', input_shape=(10000,)))\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='rmsprop', loss='mse', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=4, batch_size=512)\nresults = model.evaluate(X_test, y_test)\nprint(results)","cbc1d5d1":"model = models.Sequential()\nmodel.add(Dense(16, activation='tanh', input_shape=(10000,)))\nmodel.add(Dense(16, activation='tanh'))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=4, batch_size=512)\nresults = model.evaluate(X_test, y_test)\nprint(results)","712973af":"# MSE Loss Function","bf5c3b79":"As we can see from those two charts above, once epochs are more than 4 or 5, the model starts overfitting where the gap of training and validation performances becomes larger. Therefore, we'd better stop the model at epoch 4 to maintain its performance on unseen data.","740d9520":"In this project I will apply basic deep learning algorithm to movie review dataset imdb by using keras package. The dataset has been transformed into number of frequency already, so the focus is just on how to implement deep learning in keras instead of data preprocessing or other stuffs. \n\nAll the codes in this notebook are from \"Deep learning With Python\" by Fran\u00e7ois Chollet. It is the place where I can practice and record my progress while reading the book.  ","9593e775":"# 3 Hidden Layers","8729724e":"# 1 Hidden layer","a4fd2e86":"# Visualizing the results","c460c1b6":"# Implementing Neural Network","9690500a":"# tanh Activation","6f647ddc":"# More Hidden Units","489b2a5c":"# Transform the Format\n\nVectorize the data so that the algorithm can work on it"}}