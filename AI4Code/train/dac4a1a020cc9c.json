{"cell_type":{"1e950a26":"code","a072b55d":"code","34659266":"code","81dcbebc":"code","c00ab78b":"code","ec55c62a":"code","49820636":"code","1f3a6bf3":"code","41c93ca4":"code","a50aa656":"code","4c301ce9":"code","e64a12e6":"code","f741f6eb":"code","87f84b54":"code","6d00e899":"code","d987fde7":"code","79061cf3":"code","edc0a991":"markdown","a7b59e7b":"markdown","3f138e97":"markdown","7eb20731":"markdown","743092e7":"markdown","0798784a":"markdown","edc8ef73":"markdown","0c34700d":"markdown","22717bb9":"markdown","187c865a":"markdown"},"source":{"1e950a26":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a072b55d":"import cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math","34659266":"def adjust_gamma(image, gamma=1.0):\n    invGamma = 1.0 \/ gamma\n    table = np.array([((i \/ 255.0) ** invGamma) * 255\n        for i in np.arange(0, 256)]).astype(\"uint8\")\n    return cv2.LUT(image, table)","81dcbebc":"def getPixVal(fillFile, clearFile, fillCoords, fillRadius, clearCoords, clearRadius, gamma):\n    fillImg = cv2.imread(fillFile)\n    fillImg = cv2.cvtColor(fillImg, cv2.COLOR_BGR2RGB)\n    fillImg = cv2.cvtColor(fillImg, cv2.COLOR_RGB2GRAY)\n    fillImg = adjust_gamma(fillImg, gamma=gamma)\n\n    fillMask = np.zeros(fillImg.shape[:2], dtype=\"uint8\")\n    cv2.circle(fillMask, fillCoords, fillRadius, 255, -1)\n\n    masked = cv2.bitwise_and(fillImg, fillImg, mask=fillMask)\n    mean = cv2.mean(fillImg, mask=fillMask)\n\n    clearImg = cv2.imread(clearFile)\n    clearImg = cv2.cvtColor(clearImg, cv2.COLOR_BGR2RGB)\n    clearImg = cv2.cvtColor(clearImg, cv2.COLOR_RGB2GRAY)\n    clearImg = adjust_gamma(clearImg, gamma=gamma)\n\n    clearMask = np.zeros(clearImg.shape[:2], dtype=\"uint8\")\n    cv2.circle(clearMask, clearCoords, clearRadius, 255, -1)\n\n    clearMasked = cv2.bitwise_and(clearImg, clearImg, mask=clearMask)\n    InotMean = cv2.mean(clearImg, mask=clearMask)\n    \n    f, axarr = plt.subplots(1,2)\n    axarr[0].imshow(masked, cmap=\"gray\")\n    axarr[1].imshow(clearMasked, cmap=\"gray\")\n    \n    return mean, InotMean","c00ab78b":"inputIMG=['..\/input\/flourodata\/samples\/f2.png','..\/input\/flourodata\/clear\/fclear2.png']","ec55c62a":"def valCalc(files,fillCoords, fillRadius, clearCoords, clearRadius,gammaList = [.45,.46,.47,.48,.49]):  \n    for gamma in gammaList:\n        mean, InotMean = getPixVal(files[0], files[1], fillCoords, fillRadius,clearCoords, clearRadius, gamma=gamma)\n        inval = mean[0] - InotMean[0]\n        print(f'GAMMA ADJUSTED VAL{gamma}: {inval}')","49820636":"def predCalc(files,fillCoords, fillRadius, clearCoords, clearRadius,gammaList = [.48]):  \n    for gamma in gammaList:\n        mean, InotMean = getPixVal(files[0], files[1], fillCoords, fillRadius,clearCoords, clearRadius, gamma=gamma)\n        inval = mean[0] - InotMean[0]\n        inval = (14.3*inval)+468\n        print(\"-------------------------------------------------\")\n        print(f'PREDICTED VAL {gamma}: {inval}')","1f3a6bf3":"inputIMG=['..\/input\/flourodata\/samples\/f1.png','..\/input\/flourodata\/clear\/fclear1.png']\nvalCalc(inputIMG,(1051,1127),120,(1042,1097),141)\npredCalc(inputIMG,(1051,1127),120,(1042,1097),141)","41c93ca4":"inputIMG=['..\/input\/flourodata\/samples\/f2.png','..\/input\/flourodata\/clear\/fclear2.png']\nvalCalc(inputIMG,(1008,1095),124,(1082,1023),143)\npredCalc(inputIMG,(1008,1095),124,(1082,1023),143)","a50aa656":"inputIMG=['..\/input\/flourodata\/samples\/f3.png','..\/input\/flourodata\/clear\/fclear3.png']\nvalCalc(inputIMG,(1024,1034),144,(1030,1056),144)\npredCalc(inputIMG,(1024,1034),144,(1030,1056),144)","4c301ce9":"inputIMG=['..\/input\/flourodata\/samples\/f4.png','..\/input\/flourodata\/clear\/fclear4.png']\nvalCalc(inputIMG,(1034,1051),140,(1005,1081),146)","e64a12e6":"inputIMG=['..\/input\/flourodata\/samples\/f5.png','..\/input\/flourodata\/clear\/fclear5.png']\nvalCalc(inputIMG,(1035,1056),112,(1052,1113),140)","f741f6eb":"inputIMG=['..\/input\/flourodata\/samples\/f6.png','..\/input\/flourodata\/clear\/fclear6.png']\nvalCalc(inputIMG,(966,1076),113,(984,1528),140)","87f84b54":"inputIMG=['..\/input\/flourodata\/samples\/f7.png','..\/input\/flourodata\/clear\/fclear7.png']\nvalCalc(inputIMG,(1031,1082),171,(1007,1090),145)","6d00e899":"inputIMG=['..\/input\/flourodata\/samples\/f8.png','..\/input\/flourodata\/clear\/fclear8.png']\nvalCalc(inputIMG,(1022,1091),142,(1011,1012),142)","d987fde7":"inputIMG=['..\/input\/flourodata\/samples\/f9.png','..\/input\/flourodata\/clear\/fclear10.png']\nvalCalc(inputIMG,(1098,1030),115,(1057,1463),141)","79061cf3":"inputIMG=['..\/input\/flourodata\/samples\/f10.png','..\/input\/flourodata\/clear\/fclear10.png']\nvalCalc(inputIMG,(1042,1085),132,(1123,1017),143)","edc0a991":"## f8","a7b59e7b":"## f3","3f138e97":"## f6","7eb20731":"## f10","743092e7":"## f9","0798784a":"## f2","edc8ef73":"## f1","0c34700d":"## f7","22717bb9":"## f5","187c865a":"## f4"}}