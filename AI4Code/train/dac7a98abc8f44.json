{"cell_type":{"c08dd6b3":"code","1ac14777":"code","7b0b1db8":"code","2b73de12":"code","e10c1c39":"code","3943a456":"code","fa9642eb":"code","29c79d65":"code","400f3796":"markdown"},"source":{"c08dd6b3":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom xgboost import XGBRegressor","1ac14777":"data = pd.read_csv('\/kaggle\/input\/trainfolds\/train_kfolds.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/dataset2\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/dataset2\/sample_submission.csv')\n","7b0b1db8":"useful_features = [i for i in data.columns if i not in (\"id\", \"target\",\"kfold\")]\nobject_cols = [col for col in useful_features if \"cat\" in col]\ntest_data = test_data[useful_features]","2b73de12":"final_predictions =[]\n\nfor fold in range(5):\n    xtrain = data[data.kfold != fold].reset_index(drop=True)\n    xvalid = data[data.kfold == fold].reset_index(drop=True)\n    xtest = test_data.copy()\n    \n    ytrain = xtrain.target\n    yvalid = xvalid.target\n    \n    xtrain = xtrain[useful_features]\n    xvalid = xvalid[useful_features]\n    \n    # Data Encoding \n    oe = OrdinalEncoder()\n    xtrain[object_cols] = oe.fit_transform(xtrain[object_cols])\n    xvalid[object_cols] = oe.transform(xvalid[object_cols])\n    xtest[object_cols] = oe.transform(xtest[object_cols])\n    \n    # Model Training\n    model = XGBRegressor(random_state = fold, n_jobs=5)\n    model.fit(xtrain, ytrain)\n    preds_valid = model.predict(xvalid)\n    preds_test = model.predict(xtest)\n    final_predictions.append(preds_test)\n    print(fold, mean_squared_error(yvalid, preds_valid, squared=False))","e10c1c39":"final_predictions =[]\n\nfor fold in range(5):\n    xtrain = data[data.kfold != fold].reset_index(drop=True)\n    xvalid = data[data.kfold == fold].reset_index(drop=True)\n    xtest = test_data.copy()\n    \n    ytrain = xtrain.target\n    yvalid = xvalid.target\n    \n    xtrain = xtrain[useful_features]\n    xvalid = xvalid[useful_features]\n    \n    # Data Encoding \n    oe = OrdinalEncoder()\n    xtrain[object_cols] = oe.fit_transform(xtrain[object_cols])\n    xvalid[object_cols] = oe.transform(xvalid[object_cols])\n    xtest[object_cols] = oe.transform(xtest[object_cols])\n    \n    # Model Training\n    model = XGBRegressor(random_state = fold, n_jobs=5, learning_rate =0.1, subsample=0.8,\n                         max_depth = 20, min_child_weight = 1, gamma = 0, scale_pos_weight = 1)\n    model.fit(xtrain, ytrain)\n    preds_valid = model.predict(xvalid)\n    preds_test = model.predict(xtest)\n    final_predictions.append(preds_test)\n    print(fold, mean_squared_error(yvalid, preds_valid, squared=False))","3943a456":"preds = np.mean(np.column_stack(final_predictions), axis=1)","fa9642eb":"submission.target = preds\nsubmission.to_csv(\"submission1.csv\", index=False)","29c79d65":"output = pd.read_csv('\/kaggle\/output\/submission1.csv')\noutput","400f3796":"### Import Libraries"}}