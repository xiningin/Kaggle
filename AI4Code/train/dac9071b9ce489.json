{"cell_type":{"6016708c":"code","889b7237":"code","4a4b07d3":"code","918c8757":"code","674b6a5c":"code","473a13dc":"code","2336a5b9":"code","f8253bf6":"code","f1bc240a":"code","ac1d5866":"code","a993a144":"code","17f571ca":"code","5cda4905":"code","ecd09601":"code","d11c3fcd":"code","5b683ef2":"code","7904100e":"code","f47f5921":"code","15d5f6ac":"markdown","2b85b983":"markdown","252762bc":"markdown","fc8f3b62":"markdown","779b5b46":"markdown","da712d57":"markdown","3d80882c":"markdown","e0d1077a":"markdown","fa35fa85":"markdown","96303c21":"markdown","957e230f":"markdown","44e7dd36":"markdown","57a8c0af":"markdown","b317d703":"markdown","fb1a191f":"markdown","afd11016":"markdown"},"source":{"6016708c":"import numpy as np # for linear algebra\nimport pandas as pd # data processing, CSV file I\/O\ndata = pd.read_csv('..\/input\/salary-data-simple-linear-regression\/Salary_Data.csv')\ndata.head()","889b7237":"def mse(predictions, targets):\n    return  (((predictions - targets) ** 2).mean())","4a4b07d3":"def rmse(predictions, targets):\n    return np.sqrt(((predictions - targets) ** 2).mean())","918c8757":"x = data.iloc[:, :-1] # YearsExperience as x\ny = data.iloc[:, [-1]] # Salary as y","674b6a5c":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,train_size = 0.50,test_size = 0.50) # 50% Train and 50% Test","473a13dc":"from sklearn import linear_model\nlr = linear_model.LinearRegression()\nlr.fit(x_train,y_train)\ny_pred = lr.predict(x_test)","2336a5b9":"print('Mean squared error using fuction: %.2f' % mse(y_test,y_pred))\nprint('Root mean squared error using fuction: %.2f' % rmse(y_test, y_pred))","f8253bf6":"from sklearn.metrics import mean_squared_error\nprint('Mean squared error using sklearn: %.2f' % mean_squared_error(y_test,y_pred))\nrms = np.sqrt(mean_squared_error(y_test, y_pred))\nprint('Root mean squared error using sklearn: %.2f' % rms)","f1bc240a":"x1 = data.iloc[:, :-1] # YearsExperience as x\ny1 = data.iloc[:, [-1]] # Salary as y","ac1d5866":"from sklearn.model_selection import train_test_split\nx1_train,x1_test,y1_train,y1_test = train_test_split(x1,y1,train_size = 0.70,test_size = 0.30) # 70% Train and 30% Test","a993a144":"from sklearn import linear_model\nlr = linear_model.LinearRegression()\nlr.fit(x1_train,y1_train)\ny1_pred = lr.predict(x1_test)","17f571ca":"print('Mean squared error using fuction: %.2f' % mse(y1_test,y1_pred))\nprint('Root mean squared error using fuction: %.2f' % rmse(y1_test, y1_pred))","5cda4905":"from sklearn.metrics import mean_squared_error\nprint('Mean squared error using sklearn: %.2f' % mean_squared_error(y1_test,y1_pred))\nrms = np.sqrt(mean_squared_error(y1_test, y1_pred))\nprint('Root mean squared error using sklearn: %.2f' % rms)","ecd09601":"x2 = data.iloc[:, :-1] # YearsExperience as x\ny2 = data.iloc[:, [-1]] # Salary as y","d11c3fcd":"from sklearn.model_selection import train_test_split\nx2_train,x2_test,y2_train,y2_test = train_test_split(x2,y2, train_size = 0.80,test_size = 0.2) # 80% Train and 20% Test","5b683ef2":"from sklearn import linear_model\nlr = linear_model.LinearRegression()\nlr.fit(x2_train,y2_train)\ny2_pred = lr.predict(x2_test)","7904100e":"print('Mean squared error using fuction: %.2f' % mse(y2_test,y2_pred))\nprint('Root mean squared error using fuction: %.2f' % rmse(y2_test, y2_pred))","f47f5921":"from sklearn.metrics import mean_squared_error\nprint('Mean squared error using sklearn: %.2f' % mean_squared_error(y2_test,y2_pred))\nrms = np.sqrt(mean_squared_error(y2_test, y2_pred))\nprint('Root mean squared error using sklearn: %.2f' % rms)","15d5f6ac":"# TASK C\n> For 80% Train and 20% Test","2b85b983":"***Hence, Verified***","252762bc":"# Function for RMSE","fc8f3b62":"> # Using MSE and RMSE functions","779b5b46":"# TASK B\n> For 70% Train and 30% Test","da712d57":"***Hence, Verified***","3d80882c":"# TASK A\n> For 50% Train and 50% Test","e0d1077a":"> # Using MSE and RMSE functions","fa35fa85":"# Input Dataset","96303c21":"# TASK 1\nTrain a linear regression classifier to fit the data. Use Salary as a target column (y). Form the models with following configurations\n* (a) 50% Train, 50% Test\n* (b) 70% Train, 30% Test\n* (c) 80% Train, 20% Test\n\nAnalyze the MSE, RMSE for each configuration. Write your own function to determine MSE\/RMSE.\n\nCrosscheck it with the results given by sklearn metrics.","957e230f":"***Hence, Verified***","44e7dd36":">  # Cross-checking MSE & RMSE using sklearn metrics","57a8c0af":">  # Cross-checking MSE & RMSE using sklearn metrics","b317d703":"# Function for MSE","fb1a191f":"> # Using MSE and RMSE functions","afd11016":">  # Cross-checking MSE & RMSE using sklearn metrics"}}