{"cell_type":{"1d288405":"code","e1ba2af7":"code","917877fc":"code","440cd460":"code","38f6f8cf":"code","8d5566a5":"code","b838764f":"code","f638fe90":"markdown","1bb569a6":"markdown"},"source":{"1d288405":"# Imports\nimport datetime as dt\nimport folium\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\nimport sys\n\n# Settings\ninit_notebook_mode()\npd.set_option('max_rows', 8)\n\n# Files\nraw_data_filename = '..\/input\/restaurant-scores-lives-standard.csv'\n\n# Load inspection data\ninspection_data = pd.read_csv(raw_data_filename,\n    usecols=['business_id', 'inspection_id', 'inspection_date', \n             'inspection_type', 'violation_id', 'violation_description',\n             'risk_category'],\n    parse_dates=['inspection_date'], infer_datetime_format=True)\n                              \n# Validate inspection data\nrisk_categories = ['No Violations', 'Low Risk', 'Moderate Risk', 'High Risk']\ninvalid_risk_categories = (~inspection_data['risk_category']\n                           .isin(risk_categories + [np.nan]))\nif invalid_risk_categories.any():\n    print('Found entries with unknown risk categories')\n    print('Acceptable risk categories are {0}'.format(risk_categories))\n    print('Dropped offending entries')\n    display(inspection_data.loc[invalid_risk_categories])\n    inspection_data.drop(invalid_risk_categories.index, inplace=True)\n\n# Load business data in a separate, less redundent, dataframe\nbusiness_info = (pd.read_csv(raw_data_filename, \n                             usecols=['business_id', 'business_name', \n                                      'business_latitude', 'business_longitude'])\n                   .drop_duplicates('business_id')\n                   .set_index('business_id'))\n\n# Clean up business name format\nbusiness_info['business_name'] = (business_info['business_name']\n                                  .str.title().str.replace(\"'S\", \"'s\"))\n\n# Set any latitude and longitude that is obviously outside San Fran to Na\n# Ideally, at some point, code in an address based geocatcher to find Na\nbusiness_info.loc[(business_info['business_latitude'] < 37.65) | \n                  (business_info['business_latitude'] > 37.85) |\n                  (business_info['business_longitude'] < -122.55) |\n                  (business_info['business_longitude'] > -122.30),\n                   ['business_latitude', 'business_longitude']] =\\\n                     [np.nan, np.nan]\n\n# Focusing on \"Routine - Unscheduled\" inspections for now\n# These dominate the inspection types and are less likely to have special cases\nroutine_data = (inspection_data\n .loc[inspection_data['inspection_type'] == 'Routine - Unscheduled'].copy())\n\n# Assign risk_category to categorical type for sorting\nroutine_data['risk_category'] = (routine_data['risk_category'].astype('category'))\nroutine_data['risk_category'].cat.set_categories(risk_categories, \n                                                 ordered=True, inplace=True)\n\n# Drop duplicate rows\nroutine_data.drop_duplicates(inplace=True)","e1ba2af7":"# Plot violations per inspection per day\n\ndef count_inspections(df, rule, label=None, loffset=None):\n    '''Count unique inspections per time period. \n       Takes inspections dataframe and time perios rule.\n       Returns series of counts per period. '''\n\n    df['n'] = 1\n    inspection_counts = (df\n     .groupby(['inspection_date', 'inspection_id'])\n     .n.count()\n     .reset_index(level=1)\n     .resample(rule, label=label, loffset=loffset).count()['n'])\n    inspection_counts.drop(inspection_counts.loc[inspection_counts == 0].index,\n                           inplace=True)\n    \n    return inspection_counts\n\n\ndef count_violations(df, rule, label=None, loffset=None):\n    '''Count number of occurances of each risk level by time period.\n       Takes inspections dataframe and time period rule. \n       Returns dataframe with inspection_date as index and \n       risk_categories as columns. '''\n    \n    df['n'] = 1\n    df.fillna({'risk_category':'No Violations'}, inplace=True)\n    date_risk_count = (pd.pivot_table(df, 'n', 'inspection_date', 'risk_category',\n                                      'count', fill_value=0)\n                       .resample(rule, loffset=loffset, label=label).sum())\n    \n    return date_risk_count\n\n\ndef violations_per_inspection(df, rule, label=None, loffset=None):\n    vio_insp = (count_violations(df, rule, label, loffset)\n                .divide(count_inspections(df, rule, label, loffset), axis=0)\n                .dropna())\n\n    return vio_insp\n\n\n# Plot data\nplot_data = violations_per_inspection(routine_data, 'D')\ndata = []\nrisk_levels = ['No Violations', 'Low Risk', 'Moderate Risk', 'High Risk'][::-1]\ncolors = ['black', 'blue', 'orange', 'red'][::-1]\nvisibilities = ['legendonly', True, True, True][::-1]\nx = plot_data.index\n\nfor risk_level, color, visible in zip(risk_levels, colors, visibilities):\n    y = plot_data[risk_level]\n    data.append(go.Scatter(x=x, y=y, name=risk_level, mode='lines',\n                           line=dict(color=color), visible=visible))\n\n# Figure layout\nlayout = dict(title='Violations per inspection (daily average)',\n              width=700, height=400,\n              xaxis=dict(title='Inspection date', ticklen=8, \n                         hoverformat='%d', \n                         range=[routine_data['inspection_date'].max() -\n                                dt.timedelta(30), \n                                routine_data['inspection_date'].max()]),\n              yaxis=dict(hoverformat='.2f'))\n\nfig = dict(data=data, layout=layout)\niplot(fig)","917877fc":"# Plot violations per inspection per month\n\n#  Use data from the most recent two years of completed months\nend_date = routine_data['inspection_date'].max().replace(day=1)\nbegin_date = end_date - dt.timedelta(2 * 365)\ntwoyear_data = (routine_data.loc[(routine_data['inspection_date'] >= begin_date) &\n                                 (routine_data['inspection_date'] < end_date)]\n                .copy())\n        \nplot_data = violations_per_inspection(twoyear_data, 'M', label='left', \n                                      loffset=dt.timedelta(1))\n\n# Plot violations per inspection\ndata = []\nrisk_levels = ['No Violations', 'Low Risk', 'Moderate Risk', 'High Risk'][::-1]\ncolors = ['black', 'blue', 'orange', 'red'][::-1]\nx = plot_data.index\nfor risk_level, color in zip(risk_levels, colors):\n    y = plot_data[risk_level]\n    data.append(go.Scatter(x=x, y=y, name=risk_level, mode='lines',\n                           line=dict(color=color)))\n\n# Specify figure layout\nlayout = dict(title='Violations per inspection (monthly average)',\n              width=700, height=400,\n              xaxis=dict(title='Inspection date', ticklen=8, \n                         hoverformat='%b %Y', \n                         range=[begin_date + dt.timedelta(355),\n                                end_date - dt.timedelta(20)]),\n              yaxis=dict(hoverformat='.2f'))\nfig = dict(data=data, layout=layout)\niplot(fig)","440cd460":"# Plot geographic map of most recent violations\n# Get violations within the past n days of the most recently reported violation\nn_days = 30\n\ndef inspection_df(insp):\n    ''' Generate dataframe with one row per inspection for plotting on \n        geographic map '''    \n    # Retain business id to join with business info\n    business_id = insp['business_id'].iloc[0]\n    # Color by highest risk violation in inspection\n    color_map = {'Low Risk':'blue', 'Moderate Risk':'orange', \n                 'High Risk':'red'}\n    color = color_map[insp['risk_category'].iloc[0]]\n    # List all violations in inspection\n    violations = [': '.join(text) for text in zip(insp['risk_category'], \n                                                  insp['violation_description'])]\n    violations_str = '<br>'.join(violations)\n    \n    return pd.DataFrame({'business_id':business_id, 'color':color, \n                         'violations':violations_str}, index=[0])\n\n# Gather info to plot for selected date range\nrecent_violations = (routine_data\n .loc[(routine_data['inspection_date'] > \n       routine_data['inspection_date'].max() - dt.timedelta(n_days)) &\n      (routine_data['violation_id'].notnull())]\n .sort_values('risk_category', ascending=False)\n .groupby('inspection_id')\n .apply(inspection_df)\n .drop_duplicates()\n .join(business_info[['business_name', 'business_latitude', \n                      'business_longitude']], on='business_id')\n)\n\n# For now, just drop the missing latitudes and longitudes, focusing on making map\n# first ideally come back and try to geolocate from address\nrecent_violations.dropna(inplace=True)\n\n# Add data to map\nrestaurant_map = folium.Map(location=(37.76, -122.44),\n                            width='100%', height='90%',\n                            zoom_start=12, min_zoom=12, max_zoom=15)\n(recent_violations\n #.iloc[:5] # for troubleshooting\n .apply(lambda row: folium\n        .Marker([row['business_latitude'], row['business_longitude']], \n            popup=('<p><b>{0}<\/b><br>{1}<\/p>'.format(row['business_name'],\n                                                     row['violations'])),\n            icon=folium.Icon(icon_color='black', color=row['color'], \n                             icon='bug', prefix='fa'))\n        .add_to(restaurant_map), axis='columns')\n)\n\n# Add legend and title via html\nlegend_html =  '''\n    <div style=\"position: fixed; bottom: 20px; left: 20px; \n                width: 108px; height: 120px;\n                background-color:silver; border:2px solid black; z-index:9999;\n                font-size:14px;\n      \"<h2 align=\"center\"><b>Health Risk<\/b><\/h2><br>\n      <p align=\"left\">\n        &nbsp; <i class=\"fa fa-map-marker fa-2x\" style=\"color:red\"><\/i> \n        &nbsp; High <br>\n        &nbsp; <i class=\"fa fa-map-marker fa-2x\" style=\"color:orange\"><\/i> \n        &nbsp; Moderate <br>\n        &nbsp; <i class=\"fa fa-map-marker fa-2x\" style=\"color:#0099FF\"><\/i> \n        &nbsp; Low \n      <\/p>\n    <\/div>\n    ''' \ntitle_html = '''\n    <div style=\"position: static; margin: auto; z-index:9998; font-size:20px;\n      \"<h2 align=\"center\"><b>Health Violations (from most recent {0} days of \n                             inspections)<\/b><\/h2><br>\n    <\/div>\n    '''.format(n_days)\nrestaurant_map.get_root().html.add_child(folium.Element(title_html))\nrestaurant_map.get_root().html.add_child(folium.Element(legend_html))\n\ndisplay(restaurant_map)","38f6f8cf":"# Plot geographic map for recent inspections with no violations\n\n# Gather info to plot for selected date range\nrecent_no_violations = (routine_data\n .loc[(routine_data['inspection_date'] > \n       routine_data['inspection_date'].max() - dt.timedelta(n_days)) &\n      (routine_data['violation_id'].isnull())]\n .loc[:, ['business_id']]\n .join(business_info[['business_name', 'business_latitude', \n                      'business_longitude']], on='business_id')\n)\n\n# For now, just drop the missing latitudes and longitudes, focusing on making map\n# first ideally come back and try to geolocate from address\nrecent_no_violations.dropna(inplace=True)\n\n# Add data to map\nrestaurant_map = folium.Map(location=(37.76, -122.44), \n                            width='100%', height='90%',\n                            zoom_start=12, min_zoom=12, max_zoom=15)\n\n(recent_no_violations\n  #.iloc[:5] # for troubleshooting\n  .apply(lambda row: folium\n         .Marker([row['business_latitude'], row['business_longitude']],\n              popup=('<p><b>{0}<\/b><\/p>'.format(row['business_name'])),\n             icon=folium.Icon(icon_color='black', color='green', \n                              icon='thumbs-up', prefix='fa'))\n         .add_to(restaurant_map), axis='columns')\n)\n\n# Add title html\ntitle_html = '''\n    <div style=\"position: static; margin: auto; z-index:9998; font-size:20px;\n      \"<h2 align=\"center\"><b>Inspected, No Violations (from most recent {0} \n                             days) <\/b><\/h2><br>\n    <\/div>\n    '''.format(n_days)\nrestaurant_map.get_root().html.add_child(folium.Element(title_html))\ndisplay(restaurant_map)","8d5566a5":"# Test violations per inspection per day\nrun_tests = False\n\nif run_tests:\n    test_data = pd.DataFrame([[ 0,  0, np.NaN,           '2001-01-01'], # Day 1\n                              [ 1,  1, 'Low Risk',       '2001-01-01'],\n                              [ 2,  2, 'Moderate Risk',  '2001-01-01'],\n                              [ 3,  3, 'High Risk',      '2001-01-01'],\n                              [ 4,  4, 'Low Risk',       '2001-01-02'], # Day 2\n                              [ 4,  5, 'Moderate Risk',  '2001-01-02'],\n                              [ 5,  6, 'High Risk',      '2001-01-02'],                                                     \n                              [ 6,  7, 'Moderate Risk',  '2001-01-03'], # Day 3\n                              [ 6,  8, 'High Risk',      '2001-01-03'],\n                                                                        # Day 4 - none\n                              [ 7,  9, 'Moderate Risk',  '2001-01-05'], # Day 5\n                              [ 7, 10, 'Moderate Risk',  '2001-01-05'],\n                              [ 7, 11, 'Moderate Risk',  '2001-01-05'],\n                              [ 8, 12, np.NaN,           '2001-01-05'],\n                                                                        # Day 6 - none\n                              [ 9, 13, 'Low Risk',       '2001-01-07'], # Day 7\n                              [ 9, 14, 'Low Risk',       '2001-01-07'],\n                              [10, 15, 'Low Risk',       '2001-01-07'],\n                              [10, 16, 'Moderate Risk',  '2001-01-07'],\n                              [10, 17, 'High Risk',      '2001-01-07']],\n                             columns=['inspection_id', 'violation_id', \n                                      'risk_category', 'inspection_date'])\n\n    test_data['inspection_date'] = pd.to_datetime(test_data['inspection_date'])\n    \n    output_correct = pd.DataFrame({'High Risk':     [0.25, 0.50, 1.00, 0.0, 0.5],\n                                   'Low Risk':      [0.25, 0.50, 0.00, 0.0, 1.5],\n                                   'Moderate Risk': [0.25, 0.50, 1.00, 1.5, 0.5],\n                                   'No Violations': [0.25, 0.00, 0.00, 0.5, 0.0]},\n                                  index=['2001-01-01', '2001-01-02', '2001-01-03',\n                                         '2001-01-05', '2001-01-07'])\n\n    output_correct.index = pd.to_datetime(output_correct.index)\n    output_correct.columns.name = 'risk_category'\n    output_correct.index.name = 'inspection_date'\n        \n    pd.testing.assert_frame_equal(output_correct, \n                                  violations_per_inspection(test_data, 'D'))","b838764f":"# Test violations per inspection per day\n\nif run_tests:\n    test_data = pd.DataFrame([[ 0,  0, np.NaN,           '2001-01-01'], # Month 1\n                              [ 1,  1, 'Low Risk',       '2001-01-08'],\n                              [ 2,  2, 'Moderate Risk',  '2001-01-12'],\n                              [ 3,  3, 'High Risk',      '2001-01-31'],\n                              [ 4,  4, np.NaN,           '2001-02-01'], # Month 2\n                              [ 5,  5, np.NaN,           '2001-02-02'],\n                              [ 6,  6, 'Moderate Risk',  '2001-02-03'],\n                              [ 7,  7, 'Moderate Risk',  '2001-02-04'],\n                              [ 8,  8, 'Low Risk',       '2001-03-15'], # Month 3\n                              [ 8,  9, 'Low Risk',       '2001-03-15'],\n                              [ 8, 10, 'Moderate Risk',  '2001-03-15'],\n                              [ 8, 11, 'Moderate Risk',  '2001-03-15'],\n                                                                        # Month 4 - none\n                              [ 9, 12, 'Low Risk',       '2001-05-01'], # Month 5\n                              [ 9, 13, 'Low Risk',       '2001-05-01'],\n                              [10, 10, 'High Risk',      '2001-05-31'],\n                              [10, 11, 'Moderate Risk',  '2001-05-31']],\n                             columns=['inspection_id', 'violation_id', \n                                      'risk_category', 'inspection_date'])  \n    \n    test_data['inspection_date'] = pd.to_datetime(test_data['inspection_date'])\n\n    output_correct = pd.DataFrame({'High Risk':     [0.25, 0.00, 0.00, 0.50],\n                                   'Low Risk':      [0.25, 0.00, 2.00, 1.00],\n                                   'Moderate Risk': [0.25, 0.50, 2.00, 0.50],\n                                   'No Violations': [0.25, 0.50, 0.00, 0.00]},\n                                  index=['2001-01-01', '2001-02-01', '2001-03-01',\n                                         '2001-05-01'])\n\n    output_correct.index = pd.to_datetime(output_correct.index)\n    output_correct.columns.name = 'risk_category'\n    output_correct.index.name = 'inspection_date'\n    \n    pd.testing.assert_frame_equal(output_correct, \n                                  violations_per_inspection(test_data, 'M', 'left',\n                                                            dt.timedelta(1)))","f638fe90":"## A Dashboard for San Francisco Restaurant Health Inspections","1bb569a6":"The dataset, provided by the City of San Francisico Health Department, logs violations identified during restaurant inspections and their corresponding health risk. The current version of this notebook looks at the results of  \"Routine - Unschedule inspecitons\" which dominate the dataset.\n\nThe dashboard was built following the [Dashboarding with Notebooks tutorial](http:\/\/www.kaggle.com\/rtatman\/dashboarding-with-notebooks-day-5) by Rachael Tatman"}}