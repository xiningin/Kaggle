{"cell_type":{"382e424b":"code","7ebd05bd":"code","36aef3f5":"code","d56cb595":"code","5289e779":"code","bc163913":"code","2fcbeba4":"code","24ac9322":"code","cc7a9f3e":"code","d3cbf67b":"code","78c23a0d":"code","2a52a68d":"code","f2a806f1":"code","d4155e78":"code","5e8d853f":"code","6e1f6b9d":"code","1cb58fb4":"code","10b288de":"code","cf9aa687":"code","6dce427a":"code","c287314d":"code","74600cd0":"markdown","de510235":"markdown","b3e59a09":"markdown","5190f8fa":"markdown","f6a4ed3e":"markdown","74b02fd0":"markdown","cf0089a8":"markdown","efdc762f":"markdown","5c125957":"markdown","afe82b15":"markdown","c2711c3d":"markdown","97fadcbe":"markdown","03f6b0b5":"markdown"},"source":{"382e424b":"# Import statements\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVC\nfrom sklearn import metrics","7ebd05bd":"# Reading the training and testing datasets (given as .csv files)\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\ndatasets = [train,test] # Making a list of datasets.","36aef3f5":"train.head(10)","d56cb595":"test.head(10)","5289e779":"train.describe()","bc163913":"test.describe()","2fcbeba4":"print(train.isnull().sum())\nprint('_'*20)\nprint(test.isnull().sum())","24ac9322":"for df in datasets: # Loops through the dataset\n    for _ in range(1,4): # Loops through range(1,4) i.e. from 1 to 3 (since there are three 'PClass' values i.e. 1,2,3)\n        df.loc[df.Pclass==_,'Age'] = df.loc[df.Pclass==_,'Age'].fillna(df.loc[df.Pclass==_].Age.mean()) # Fill-up statement","cc7a9f3e":"# Checking the number of passengers embarked at 'S','C' and 'Q'\ntrain['Embarked'].value_counts()","d3cbf67b":"# Since, the majority of passengers embarked at 'S', I will replace the missing values with 'S'.\ntrain['Embarked'] = train['Embarked'].fillna('S')","78c23a0d":"test[test.Fare.isnull()] # Printing the row where the 'Fare' value is missing.","2a52a68d":"# Since there is only one passenger whose 'Fare' entry is missing, I decided to replace it with average 'Fare' paid by \n# passengers in his\/her 'Pclass'.\ntest['Fare'] = test['Fare'].fillna(test.loc[test.Pclass==3].Fare.mean())","f2a806f1":"# Chceking if there are anymore missing entries in both the datasets (except for 'Cabin' entries)\nprint(train.isnull().sum())\nprint('_'*20)\nprint(test.isnull().sum())","d4155e78":"for df in datasets:\n    df['FamilySize'] = df['SibSp']+df['Parch']+1 # Number of siblings + Number of parents + Passenger = Size of the Family.\n    # If a particular passenger is alone or not. \n    # # 0 represents 'not alone' and 1 represents 'alone'.\n    df['IsAlone'] = 1 # Initially setting the value as 1.\n    df['IsAlone'].loc[df['FamilySize'] > 1] = 0 # Changing the value to 0, if 'FamilySize' is greater than 1.\n    \n    # Encoding\n    label = LabelEncoder()   \n    df['Sex_Code'] = label.fit_transform(df['Sex']) # Converts 'male' and 'female' to 0 and 1.\n    df['Embarked_Code'] = label.fit_transform(df['Embarked']) # Converts the 'Embarked' values to 0,1,2.\n","5e8d853f":"# The feature classes that I have selected to train the model on.\r\nfeatures = ['Pclass', 'Sex_Code', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked_Code', 'FamilySize', 'IsAlone']","6e1f6b9d":"# Splitting the training dataset into training entries (90% of training dataset) and validation entries (10% of training dataset).\nx_train, x_val, y_train, y_val = train_test_split(train[features], train['Survived'], train_size = 0.9)","1cb58fb4":"# Application of Support Vector Machine - Classifier\nmodel = SVC(kernel='linear') # Using Linear Kernel\nmodel.fit(x_train, y_train) # Model training\n\ny_val_pred = model.predict(x_val) # Predicting y_val from x_val [val == validation set]","10b288de":"# Model accuracy\nprint(\"Model Accuracy:\",metrics.accuracy_score(y_val, y_val_pred))","cf9aa687":"test['Survived'] = model.predict(test[features]) # Predicting 'Survived' attribute using the above-trained model.","6dce427a":"final_df = test[['PassengerId','Survived']]  \n# Final dataframe containing the testing datasets 'PassengerId' and predicted 'Survived' attribute.","c287314d":"# Saving the final dataframe as a .csv file.\nfinal_df.to_csv('final_submission.csv', index = False)","74600cd0":"### Filling up all the NaN values in 'Age' column of both the testing and training datasets.","de510235":"Next, I will be filling up the missing 'Embarked' values in the training dataset. The 'Embarked' column contains either 'S', 'C' or 'Q'.","b3e59a09":"## Applying the model on testing dataset.","5190f8fa":"Thank you for having a look at my notebook! <br>\nHope you have a great day!","f6a4ed3e":"A lot of entries in the 'Age' column of both the datasets are missing. Along with this, two entries of 'Embarked' in the training dataset and one entry of 'Fare' in the testing dataset are missing. I will fill-up these discrepencies based on the data that we have.<br><br>\nNote: I decided to ignore the 'Cabin' entries which were missing as they are Alphanumberic strings which are difficult to assume and fill-up.","74b02fd0":"## Feature Generation and Encoding <br>\nIn this section, I created two new columns\/features in both the given datasets i.e. 'FamilySize' and 'IsAlone'. Along with this, I used LabelEncoder() to convert the 'Sex' and 'Embarked' columns to numeric codes, for simplicity while model training and testing.","cf0089a8":"## Data cleaning","efdc762f":"# Titanic - Prediction using SVM-Classifier","5c125957":"First, let's check how many of the column entries from both the datasets have missing values. ","afe82b15":"## Splitting the datasets, model training and model application\nThe model I decided to use is **Support Vector Machine - Classifier** with a **Linear** kernel.","c2711c3d":"I decided to fill up the 'Age' of each passenger (in both the training and testing datasets) based on the 'Pclass' they booked their ticket under. So, for a passenger whose 'Age' entry is missing, his\/her 'Age' will be filled up with the average age of passengers from his\/her 'Pclass'.","97fadcbe":"Let's have a look at the datasets we are dealing with.","03f6b0b5":"Next, I will be filling up the missing 'Fare' value in the training dataset."}}