{"cell_type":{"276bf2da":"code","46b6f7c1":"code","3f7bdece":"code","7cccf259":"code","dac8042d":"code","4d037f96":"code","f152714b":"code","292c5c52":"code","f06a0f3f":"code","c209c61b":"code","00d562d0":"code","4560cc3b":"markdown","c10ab720":"markdown","2bc61adb":"markdown","f0cde5d3":"markdown","7d014271":"markdown","6f0928d1":"markdown"},"source":{"276bf2da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","46b6f7c1":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import GridSearchCV\nfrom xgboost import XGBClassifier, XGBRegressor\n\n\nimport missingno as msno\nfrom eli5.sklearn import PermutationImportance","3f7bdece":"#load data\ndata = pd.read_csv(\"\/kaggle\/input\/staszic1\/train.csv\")\ndata.head()","7cccf259":"#examine data\nmsno.matrix(data)\n#nothing is missing","dac8042d":"#process data\ncolumns = [\"fixed acidity\", \"volatile acidity\", \"citric acid\", \"residual sugar\", \"chlorides\", \"free sulfur dioxide\", \"total sulfur dioxide\", \"density\", \"pH\", \"sulphates\", \"alcohol\"]\nX = data[columns]\ny = data.quality\nX.head()","4d037f96":"#examine labels\ny.describe() \n#looks like we're dealing with multi-class classification problem","f152714b":"#split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\nX_train.head()","292c5c52":"#Grid search\n\"\"\"\nXGBClassifier(max_depth=3, learning_rate=0.1, n_estimators=100, verbosity=1, objective='binary:logistic',\nbooster='gbtree', tree_method='auto', n_jobs=1, gpu_id=-1, gamma=0, min_child_weight=1, max_delta_step=0, \nsubsample=1, colsample_bytree=1, colsample_bylevel=1, colsample_bynode=1, reg_alpha=0, reg_lambda=1, \nscale_pos_weight=1, base_score=0.5, random_state=0, missing=None, **kwargs)\n\"\"\"\n\ntest_model = XGBRegressor(learning_rate=0.1, n_estimatoors=70, max_depth=8, min_child_weight=4, gamma=0, colsample_bytree=0.75, subsample=0.65, reg_alpha=0.1, objective='reg:squarederror')\ntest_parameters_a1 = {\n    'n_estimators' : [100, 200, 300, 400],\n}\n\ntest_parameters_a2 = {\n    'n_estimators' : [50, 70, 100, 120],\n}\n\ntest_parameters_b1 = {\n    'max_depth' : [4, 5, 6],\n    'min_child_weight' : [4, 5, 6]\n}\n\ntest_parameters_b2 = {\n    'max_depth' : [8, 9],\n    'min_child_weight' : [3, 4, 5]\n}\n\ntest_parameters_c = {\n   'gamma':[i\/10.0 for i in range(0,5)],\n}\n\ntest_parameters_d1 = {\n 'subsample':[i\/10.0 for i in range(6,10)],\n 'colsample_bytree':[i\/10.0 for i in range(6,10)]\n}\n\ntest_parameters_d2 = {\n 'subsample':[i\/100.0 for i in range(65,75,5)],\n 'colsample_bytree':[i\/100.0 for i in range(75,85,5)]\n}\n\ntest_parameters_e1 = {\n 'reg_alpha':[1e-5, 1e-2, 0.1, 1, 100]\n}\n# test_parameters_e2 = {\n#  'reg_alpha':[0.00002, 0.00003, 0.00004 ]\n# }\n\n\ngs_model = GridSearchCV(estimator = test_model,param_grid = test_parameters_e1, cv=5)\ngs_model.fit(X,y)\nprint(gs_model.best_params_)\n\n\"\"\"\n\n\n\nperm = PermutationImportance(model, random_state=1).fit(train_X, train_y)\neli5.show_weights(perm, feature_names = train_X.columns.tolist())\n\"\"\"","f06a0f3f":"model = XGBRegressor(learning_rate=0.025, n_estimatoors=70, max_depth=8, min_child_weight=4, gamma=0, colsample_bytree=0.75, subsample=0.65, reg_alpha=0.1, objective='reg:squarederror')\nmodel.fit(X, y)\nmodel.score(X_test, y_test)","c209c61b":"test = pd.read_csv(\"\/kaggle\/input\/staszic1\/test.csv\")\nwyniki = model.predict(test[columns])\nwyniki = pd.DataFrame(wyniki, columns=['answer'])\nwyniki.head()","00d562d0":"wyniki.to_csv('wynik.csv')","4560cc3b":"# Results","c10ab720":"# Data Preprocessing","2bc61adb":"# Training","f0cde5d3":"# Done ;)","7d014271":"# Grid Search\n","6f0928d1":"# Imports"}}