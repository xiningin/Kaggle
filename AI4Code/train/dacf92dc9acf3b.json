{"cell_type":{"f3638367":"code","8798c6d5":"code","bc10960b":"code","8a78b930":"code","d02ea922":"code","c6ca21ec":"code","956be7cb":"code","1279a9c8":"code","6484d083":"code","38998324":"code","8f965fec":"code","c27e618f":"code","348cb357":"code","b2537938":"code","2e125d92":"code","66329423":"code","8c69ac18":"code","eabcf743":"code","c8564460":"code","3921d692":"code","2969a21b":"code","78649985":"code","568cb6fc":"code","2be87d87":"code","e0809eaa":"code","434f63c2":"code","b2536b59":"code","bf10566d":"code","036a1c89":"code","f9ec7756":"code","0863d338":"code","00200cb7":"code","44fedee3":"code","743edb36":"code","5e05302c":"code","0cb21b4b":"code","9800c56c":"code","73ea4df0":"code","db76366d":"code","7a613e77":"code","7bab7764":"code","dd421096":"code","b228d475":"code","7356fc4e":"code","9e104ae2":"code","43253bbe":"code","d3446c6a":"code","aa38b437":"code","27de683c":"code","99b34eef":"code","3db6d8ea":"code","ffc4599d":"code","6d08412b":"code","73b5196e":"code","2b2bf100":"code","4ce6eaf2":"code","566220ed":"code","3a73b5f9":"code","82b9d140":"code","dfae8d19":"code","388c1f83":"code","c14f43ff":"markdown","84715a70":"markdown","95dddc2a":"markdown","fb244359":"markdown","c8d42d57":"markdown","2e284ff4":"markdown","39b04a13":"markdown","ead5601c":"markdown","30ba0810":"markdown","fc0c8da0":"markdown","fda9056a":"markdown","2602bde5":"markdown","728106d6":"markdown","8ab7282d":"markdown","ab1475f1":"markdown","7b8227dc":"markdown","a3f2672e":"markdown","21402833":"markdown","4ea1723d":"markdown","1a7d79f3":"markdown","7bf35901":"markdown","bc5e654f":"markdown","696d358b":"markdown","a0bfcfb1":"markdown","582db49d":"markdown","d1af52c4":"markdown","cb0879c8":"markdown","5b04ba1c":"markdown","c569eb9a":"markdown","472411c4":"markdown","84e5b057":"markdown","7c14540e":"markdown"},"source":{"f3638367":"#importing packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nfrom IPython.core.display import HTML\nHTML(\"\"\"\n<style>\n.output_png {\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n}\n<\/style>\n\"\"\")","8798c6d5":"#importing data from kaggle\ndf = pd.read_csv(\"\/kaggle\/input\/creditcardfraud\/creditcard.csv\")\ndf.head(5)","bc10960b":"df = df.drop(\"Time\", axis=1)","8a78b930":"from sklearn import preprocessing\nscaler = preprocessing.StandardScaler()","d02ea922":"#standard scaling\ndf['std_Amount'] = scaler.fit_transform(df['Amount'].values.reshape (-1,1))\n\n#removing Amount\ndf = df.drop(\"Amount\", axis=1)","c6ca21ec":"sns.countplot(x=\"Class\", data=df)","956be7cb":"import imblearn\nfrom imblearn.under_sampling import RandomUnderSampler \n\nundersample = RandomUnderSampler(sampling_strategy=0.5)","1279a9c8":"cols = df.columns.tolist()\ncols = [c for c in cols if c not in [\"Class\"]]\ntarget = \"Class\"","6484d083":"#define X and Y\nX = df[cols]\nY = df[target]\n\n#undersample\nX_under, Y_under = undersample.fit_resample(X, Y)","38998324":"from pandas import DataFrame\ntest = pd.DataFrame(Y_under, columns = ['Class'])","8f965fec":"#visualizing undersampling results\nfig, axs = plt.subplots(ncols=2, figsize=(13,4.5))\nsns.countplot(x=\"Class\", data=df, ax=axs[0])\nsns.countplot(x=\"Class\", data=test, ax=axs[1])\n\nfig.suptitle(\"Class repartition before and after undersampling\")\na1=fig.axes[0]\na1.set_title(\"Before\")\na2=fig.axes[1]\na2.set_title(\"After\")","c27e618f":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X_under, Y_under, test_size=0.2, random_state=1)","348cb357":"#importing packages for modeling\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.neural_network import MLPClassifier\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras.layers import Dropout\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import BatchNormalization\n\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import auc\nfrom sklearn.metrics import precision_recall_curve","b2537938":"#train the model\nmodel1 = LogisticRegression(random_state=2)\nlogit = model1.fit(X_train, y_train)","2e125d92":"#predictions\ny_pred_logit = model1.predict(X_test) ","66329423":"#scores\nprint(\"Accuracy Logit:\",metrics.accuracy_score(y_test, y_pred_logit))\nprint(\"Precision Logit:\",metrics.precision_score(y_test, y_pred_logit))\nprint(\"Recall Logit:\",metrics.recall_score(y_test, y_pred_logit))\nprint(\"F1 Score Logit:\",metrics.f1_score(y_test, y_pred_logit))","8c69ac18":"#print CM\nmatrix_logit = confusion_matrix(y_test, y_pred_logit)\ncm_logit = pd.DataFrame(matrix_logit, index=['not_fraud', 'fraud'], columns=['not_fraud', 'fraud'])\n\nsns.heatmap(cm_logit, annot=True, cbar=None, cmap=\"Blues\", fmt = 'g')\nplt.title(\"Confusion Matrix Logit\"), plt.tight_layout()\nplt.ylabel(\"True Class\"), plt.xlabel(\"Predicted Class\")\nplt.show()","eabcf743":"#AUC\ny_pred_logit_proba = model1.predict_proba(X_test)[::,1]\nfpr_logit, tpr_logit, _ = metrics.roc_curve(y_test,  y_pred_logit_proba)\nauc_logit = metrics.roc_auc_score(y_test, y_pred_logit_proba)\nprint(\"AUC Logistic Regression :\", auc_logit)","c8564460":"#ROC\nplt.plot(fpr_logit,tpr_logit,label=\"Logistic Regression, auc={:.3f})\".format(auc_logit))\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('Logistic Regression ROC curve')\nplt.legend(loc=4)\nplt.show()","3921d692":"logit_precision, logit_recall, _ = precision_recall_curve(y_test, y_pred_logit_proba)\nno_skill = len(y_test[y_test==1]) \/ len(y_test)\nplt.plot([0, 1], [no_skill, no_skill], linestyle='--', color='black', label='No Skill')\nplt.plot(logit_recall, logit_precision, color='orange', label='Logistic')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall curve')\nplt.legend()\nplt.show()","2969a21b":"#train the model\nmodel2 = SVC(probability=True, random_state=2)\nsvm = model2.fit(X_train, y_train)","78649985":"#predictions\ny_pred_svm = model2.predict(X_test)","568cb6fc":"#scores\nprint(\"Accuracy SVM:\",metrics.accuracy_score(y_test, y_pred_svm))\nprint(\"Precision SVM:\",metrics.precision_score(y_test, y_pred_svm))\nprint(\"Recall SVM:\",metrics.recall_score(y_test, y_pred_svm))\nprint(\"F1 Score SVM:\",metrics.f1_score(y_test, y_pred_svm))","2be87d87":"#CM matrix\nmatrix_svm = confusion_matrix(y_test, y_pred_svm)\ncm_svm = pd.DataFrame(matrix_svm, index=['not_fraud', 'fraud'], columns=['not_fraud', 'fraud'])\n\nsns.heatmap(cm_svm, annot=True, cbar=None, cmap=\"Blues\", fmt = 'g')\nplt.title(\"Confusion Matrix SVM\"), plt.tight_layout()\nplt.ylabel(\"True Class\"), plt.xlabel(\"Predicted Class\")\nplt.show()","e0809eaa":"#AUC\ny_pred_svm_proba = model2.predict_proba(X_test)[::,1]\nfpr_svm, tpr_svm, _ = metrics.roc_curve(y_test,  y_pred_svm_proba)\nauc_svm = metrics.roc_auc_score(y_test, y_pred_svm_proba)\nprint(\"AUC SVM :\", auc_svm)","434f63c2":"#ROC\nplt.plot(fpr_svm,tpr_svm,label=\"SVM, auc={:.3f})\".format(auc_svm))\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('SVM ROC curve')\nplt.legend(loc=4)\nplt.show()","b2536b59":"svm_precision, svm_recall, _ = precision_recall_curve(y_test, y_pred_svm_proba)\nno_skill = len(y_test[y_test==1]) \/ len(y_test)\nplt.plot([0, 1], [no_skill, no_skill], linestyle='--', color='black', label='No Skill')\nplt.plot(svm_recall, svm_precision, color='orange', label='SVM')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall curve')\nplt.legend()\nplt.show()","bf10566d":"#train the model\nmodel3 = RandomForestClassifier(random_state=2)\nrf = model3.fit(X_train, y_train)","036a1c89":"#predictions\ny_pred_rf = model3.predict(X_test)","f9ec7756":"#scores\nprint(\"Accuracy RF:\",metrics.accuracy_score(y_test, y_pred_rf))\nprint(\"Precision RF:\",metrics.precision_score(y_test, y_pred_rf))\nprint(\"Recall RF:\",metrics.recall_score(y_test, y_pred_rf))\nprint(\"F1 Score RF:\",metrics.f1_score(y_test, y_pred_rf))","0863d338":"#CM matrix\nmatrix_rf = confusion_matrix(y_test, y_pred_rf)\ncm_rf = pd.DataFrame(matrix_rf, index=['not_fraud', 'fraud'], columns=['not_fraud', 'fraud'])\n\nsns.heatmap(cm_rf, annot=True, cbar=None, cmap=\"Blues\", fmt = 'g')\nplt.title(\"Confusion Matrix RF\"), plt.tight_layout()\nplt.ylabel(\"True Class\"), plt.xlabel(\"Predicted Class\")\nplt.show()","00200cb7":"#AUC\ny_pred_rf_proba = model3.predict_proba(X_test)[::,1]\nfpr_rf, tpr_rf, _ = metrics.roc_curve(y_test,  y_pred_rf_proba)\nauc_rf = metrics.roc_auc_score(y_test, y_pred_rf_proba)\nprint(\"AUC Random Forest :\", auc_rf)","44fedee3":"#ROC\nplt.plot(fpr_rf,tpr_rf,label=\"Random Forest, auc={:.3f})\".format(auc_rf))\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('Random Forest ROC curve')\nplt.legend(loc=4)\nplt.show()","743edb36":"rf_precision, rf_recall, _ = precision_recall_curve(y_test, y_pred_rf_proba)\nno_skill = len(y_test[y_test==1]) \/ len(y_test)\nplt.plot([0, 1], [no_skill, no_skill], linestyle='--', color='black', label='No Skill')\nplt.plot(rf_recall, rf_precision, color='orange', label='RF')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall curve')\nplt.legend()\nplt.show()","5e05302c":"#train the model\nmodel4 = XGBClassifier(random_state=2)\nxgb = model4.fit(X_train, y_train)","0cb21b4b":"#predictions\ny_pred_xgb = model4.predict(X_test) ","9800c56c":"#scores\nprint(\"Accuracy XGB:\",metrics.accuracy_score(y_test, y_pred_xgb))\nprint(\"Precision XGB:\",metrics.precision_score(y_test, y_pred_xgb))\nprint(\"Recall XGB:\",metrics.recall_score(y_test, y_pred_xgb))\nprint(\"F1 Score XGB:\",metrics.f1_score(y_test, y_pred_xgb))","73ea4df0":"#CM matrix\nmatrix_xgb = confusion_matrix(y_test, y_pred_xgb)\ncm_xgb = pd.DataFrame(matrix_xgb, index=['not_fraud', 'fraud'], columns=['not_fraud', 'fraud'])\n\nsns.heatmap(cm_xgb, annot=True, cbar=None, cmap=\"Blues\", fmt = 'g')\nplt.title(\"Confusion Matrix XGBoost\"), plt.tight_layout()\nplt.ylabel(\"True Class\"), plt.xlabel(\"Predicted Class\")\nplt.show()","db76366d":"#AUC\ny_pred_xgb_proba = model4.predict_proba(X_test)[::,1]\nfpr_xgb, tpr_xgb, _ = metrics.roc_curve(y_test,  y_pred_xgb_proba)\nauc_xgb = metrics.roc_auc_score(y_test, y_pred_xgb_proba)\nprint(\"AUC XGBoost :\", auc_xgb)","7a613e77":"#ROC\nplt.plot(fpr_xgb,tpr_xgb,label=\"XGBoost, auc={:.3f})\".format(auc_xgb))\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('XGBoost ROC curve')\nplt.legend(loc=4)\nplt.show()","7bab7764":"xgb_precision, xgb_recall, _ = precision_recall_curve(y_test, y_pred_xgb_proba)\nno_skill = len(y_test[y_test==1]) \/ len(y_test)\nplt.plot([0, 1], [no_skill, no_skill], linestyle='--', color='black', label='No Skill')\nplt.plot(xgb_recall, xgb_precision, color='orange', label='XGB')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall curve')\nplt.legend()\nplt.show()","dd421096":"#train the model\nmodel5 = MLPClassifier(solver='lbfgs', hidden_layer_sizes=(100,100), random_state=2)\nmlp = model5.fit(X_train, y_train)","b228d475":"model5.get_params(deep=True)","7356fc4e":"#predictions\ny_pred_mlp = model5.predict(X_test)","9e104ae2":"#scores\nprint(\"Accuracy MLP:\",metrics.accuracy_score(y_test, y_pred_mlp))\nprint(\"Precision MLP:\",metrics.precision_score(y_test, y_pred_mlp))\nprint(\"Recall MLP:\",metrics.recall_score(y_test, y_pred_mlp))\nprint(\"F1 Score MLP:\",metrics.f1_score(y_test, y_pred_mlp))","43253bbe":"#CM matrix\nmatrix_mlp = confusion_matrix(y_test, y_pred_mlp)\ncm_mlp = pd.DataFrame(matrix_mlp, index=['not_fraud', 'fraud'], columns=['not_fraud', 'fraud'])\n\nsns.heatmap(cm_mlp, annot=True, cbar=None, cmap=\"Blues\", fmt = 'g')\nplt.title(\"Confusion Matrix MLP\"), plt.tight_layout()\nplt.ylabel(\"True Class\"), plt.xlabel(\"Predicted Class\")\nplt.show()","d3446c6a":"#AUC\ny_pred_mlp_proba = model5.predict_proba(X_test)[::,1]\nfpr_mlp, tpr_mlp, _ = metrics.roc_curve(y_test,  y_pred_mlp_proba)\nauc_mlp = metrics.roc_auc_score(y_test, y_pred_mlp_proba)\nprint(\"AUC MLP :\", auc_mlp)","aa38b437":"#ROC\nplt.plot(fpr_mlp,tpr_mlp,label=\"MLPC, auc={:.3f})\".format(auc_mlp))\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('Multilayer Perceptron ROC curve')\nplt.legend(loc=4)\nplt.show()","27de683c":"mlp_precision, mlp_recall, _ = precision_recall_curve(y_test, y_pred_mlp_proba)\nno_skill = len(y_test[y_test==1]) \/ len(y_test)\nplt.plot([0, 1], [no_skill, no_skill], linestyle='--', color='black', label='No Skill')\nplt.plot(mlp_recall, mlp_precision, color='orange', label='MLP')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall curve')\nplt.legend()\nplt.show()","99b34eef":"#train the model\nmodel = Sequential()\nmodel.add(Dense(32, input_shape=(29,), activation='relu')),\nmodel.add(Dropout(0.2)),\nmodel.add(Dense(16, activation='relu')),\nmodel.add(Dropout(0.2)),\nmodel.add(Dense(8, activation='relu')),\nmodel.add(Dropout(0.2)),\nmodel.add(Dense(4, activation='relu')),\nmodel.add(Dropout(0.2)),\nmodel.add(Dense(1, activation='sigmoid'))","3db6d8ea":"opt = tf.keras.optimizers.Adam(learning_rate=0.001) #optimizer\n\nmodel.compile(optimizer=opt, loss=tf.keras.losses.BinaryCrossentropy(), metrics=['accuracy']) #metrics","ffc4599d":"earlystopper = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', min_delta=0, patience=15, verbose=1,mode='auto', baseline=None, restore_best_weights=False)","6d08412b":"history = model.fit(X_train.values, y_train.values, epochs = 6, batch_size=5, validation_split = 0.15, verbose = 0,\n                    callbacks = [earlystopper])\nhistory_dict = history.history","73b5196e":"loss_values = history_dict['loss']\nval_loss_values=history_dict['val_loss']\nplt.plot(loss_values,'b',label='training loss')\nplt.plot(val_loss_values,'r',label='val training loss')\nplt.legend()\nplt.xlabel(\"Epochs\")","2b2bf100":"accuracy_values = history_dict['accuracy']\nval_accuracy_values=history_dict['val_accuracy']\nplt.plot(val_accuracy_values,'-r',label='val_accuracy')\nplt.plot(accuracy_values,'-b',label='accuracy')\nplt.legend()\nplt.xlabel(\"Epochs\")","4ce6eaf2":"#predictions\ny_pred_nn = model.predict_classes(X_test)","566220ed":"#scores\nprint(\"Accuracy Neural Net:\",metrics.accuracy_score(y_test, y_pred_nn))\nprint(\"Precision Neural Net:\",metrics.precision_score(y_test, y_pred_nn))\nprint(\"Recall Neural Net:\",metrics.recall_score(y_test, y_pred_nn))\nprint(\"F1 Score Neural Net:\",metrics.f1_score(y_test, y_pred_nn))","3a73b5f9":"#CM matrix\nmatrix_nn = confusion_matrix(y_test, y_pred_nn)\ncm_nn = pd.DataFrame(matrix_nn, index=['not_fraud', 'fraud'], columns=['not_fraud', 'fraud'])\n\nsns.heatmap(cm_nn, annot=True, cbar=None, cmap=\"Blues\", fmt = 'g')\nplt.title(\"Confusion Matrix Neural Network\"), plt.tight_layout()\nplt.ylabel(\"True Class\"), plt.xlabel(\"Predicted Class\")\nplt.show()","82b9d140":"#AUC\ny_pred_nn_proba = model.predict_proba(X_test)\nfpr_keras, tpr_keras, thresholds_keras = roc_curve(y_test,y_pred_nn_proba)\nauc_keras = auc(fpr_keras, tpr_keras)\nprint('AUC Neural Net: ', auc_keras)","dfae8d19":"#ROC\nplt.figure(1)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr_keras, tpr_keras, label='Keras (area = {:.3f})'.format(auc_keras))\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('Neural Net ROC curve')\nplt.legend(loc='best')\nplt.show()","388c1f83":"nn_precision, nn_recall, _ = precision_recall_curve(y_test, y_pred_nn_proba)\nno_skill = len(y_test[y_test==1]) \/ len(y_test)\nplt.plot([0, 1], [no_skill, no_skill], linestyle='--', color='black', label='No Skill')\nplt.plot(nn_recall, nn_precision, color='orange', label='TF NN')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.title('Precision-Recall curve')\nplt.legend()\nplt.show()","c14f43ff":"### <center> How SVM works : <\/center>\n\n<center><img src= \"https:\/\/vitalflux.com\/wp-content\/uploads\/2020\/07\/Screenshot-2020-07-07-at-3.44.38-PM.png\">\n\nSVM Classifier uses a technique called the kernel trick to transform the data and then based on these transformations it finds an optimal boundary (hyper-plane) between the possible outputs.\nSupport vector machines focus only on the points that are the most difficult to tell apart, whereas other classifiers pay attention to all of the points.","84715a70":"![r\u00e9seau final.png](attachment:d0166ebc-403f-4565-b302-6fdbe678d218.png)","95dddc2a":"Classification metrics for Logistic Regression (rounded down) :\n- Accuracy : 0.94\n- F1 score : 0.92\n- AUC : 0.96","fb244359":"Classification metrics for Neural Network (rounded down) :\n- Accuracy : 0.95\n- F1 score : 0.94\n- AUC : 0.98","c8d42d57":"Classification metrics for XGBoost (rounded down) :\n- Accuracy : 0.95\n- F1 score : 0.93\n- AUC : 0.97","2e284ff4":"Classification metrics for Random Forest (rounded down) :\n- Accuracy : 0.95\n- F1 score : 0.93\n- AUC : 0.97","39b04a13":"# 6. Multilayer Neural Network with Tensorflow\/Keras","ead5601c":"### <center> How XGBoost works :<\/center>\n\n![](https:\/\/d1rwhvwstyk9gu.cloudfront.net\/2020\/02\/XG-Boost-FINAL-01.png)\n\nThe sequential ensemble methods, also known as \u201cboosting\u201d, creates a sequence of models that attempt to correct the mistakes of the models before them in the sequence. The first model is built on training data, the second model improves the first model, the third model improves the second, and so on. ","30ba0810":"# 4. Ensemble learning : Boosting (XGBoost)","fc0c8da0":"# 3. Ensemble learning : Bagging (Random Forest)","fda9056a":"Now, let's have a look at the class :","2602bde5":"Classification metrics for SVM (rounded down) :\n- Accuracy : 0.94\n- F1 score : 0.92\n- AUC : 0.97","728106d6":"Classification metrics for Multi Layer Perceptron (rounded down) :\n- Accuracy : 0.95\n- F1 score : 0.94\n- AUC : 0.98","8ab7282d":"# 5. Multi Layer Perceptron","ab1475f1":"# <center>And the winner is...<\/center>","7b8227dc":"### <center> How Neural network works : <\/center>\n\n<center><img src= \"https:\/\/victorzhou.com\/27cf280166d7159c0465a58c68f99b39\/network3.svg\">\n\nThe layers of a neural network are made of nodes. \nA node combines input from the data with a set of coefficients and bias, that either amplify or dampen that input, thereby assigning significance to inputs with regard to the task the algorithm is trying to learn. These input-weight products are summed and then the sum is passed through a node\u2019s so-called activation function, to determine whether and to what extent that signal should progress further through the network to affect the ultimate outcome, say, an act of classification. If the signals passes through, the neuron has been \u201cactivated.\u201d","a3f2672e":"Great ! Our dataset is now perfectly balanced !\n\nThe last step before modelling is now to split the data intro train and test samples. The test set will be composed of 20% of the data.\n\nWe will use the train dataset to train our models and then evaluate them of the test set : \n<center><img src= \"https:\/\/data-flair.training\/blogs\/wp-content\/uploads\/sites\/2\/2018\/08\/1-16.png\">\n\nTo split the data, we can use train_test_split function from sklearn !","21402833":"Now let's visualize our multilayer network. \n\nThe hidden layers are composed of an activation function called ReLU. It'is a piecewise linear function that will output the input directly if it is positive, otherwise, it will output zero. The last node has a sigmoid function that turns values to 0 or 1 (for binary classification).","4ea1723d":"### <center> How Random Forest works : <\/center>\n\n<center><img src= \"https:\/\/miro.medium.com\/max\/567\/1*Mb8awDiY9T6rsOjtNTRcIg.png\">\n\n<center>\"A large number of relatively uncorrelated models (trees) operating as a committee will outperform any of the individual constituent models\"<\/center>\n\nRandom forest consists of a large number of individual decision trees that operate as an ensemble. Each individual tree in the random forest spits out a class prediction and the class with the most votes becomes our model\u2019s prediction.","1a7d79f3":"# 1. Logistic Regression","7bf35901":"### Importing packages and data","bc5e654f":"Now we are ready for modeling ! Let's try to predict credit card frauds with different models. ","696d358b":"Time is not needed for classification so I simply remove the feature from the dataset :","a0bfcfb1":"The dataset is highly imbalanced ! \nIt's a big problem because classifiers will always predict the most common class without performing any analysis of the features and it will have a high accuracy rate, obviously not the correct one. To change that, I will proceed to random undersampling.  \n\nThe simplest undersampling technique involves randomly selecting examples from the majority class and deleting them from the training dataset. This is referred to as random undersampling.\n\nAlthough simple and effective, a limitation of this technique is that examples are removed without any concern for how useful or important they might be in determining the decision boundary between the classes. This means it is possible, or even likely, that useful information will be deleted.\n\n### <center>How undersampling works :<\/center>\n<center><img src= \"https:\/\/miro.medium.com\/max\/335\/1*YH_vPYQEDIW0JoUYMeLz_A.png\">\n\n\n\nTo undersample, we can use the package imblearn with RandomUnderSampler function !","582db49d":"<center><img src= \"https:\/\/media.istockphoto.com\/vectors\/best-simple-champion-cup-winner-trophy-award-and-victory-vector-id1025281982?k=6&m=1025281982&s=612x612&w=0&h=Oos26qFlAJI7GG62Gs_k_aWRthTVJOsVKGx7AXVc6W8=\">\n\n# <center> Neural Network !!!<\/center>\n\nThe multilayer neural network has the best performance according to our three most important classification metrics (Accuracy, F1-score and AUC). The Multi Layer Perceptron from sklearn is the one that minimizes the most the false negatives so I decided to keep this model to predict credit card frauds. It's very important that a bank do not miss frauds so minimizing false negatives rate is essential. \n\nAll the models can be improved by tuning hyper-parameters. Please upvote this notebook if you want me to update it with model tuning ! ","d1af52c4":"### Data processing and undersampling","cb0879c8":"### <center> How Logistic regression works :\n\n<center><img src= \"https:\/\/saedsayad.com\/images\/LogReg_1.png\">\n\nIn Logistic Regression, input values (X) are combined linearly using weights or coefficient values to predict an output value (y). \nA key difference from linear regression is that the output value being modeled is a binary values (0 or 1) rather than a numeric value. Logistic regression is a linear method, but the predictions are transformed using the logistic function.","5b04ba1c":"![](https:\/\/www.howardbank.com\/sites\/default\/files\/HB-SecurityCenter-DebCredCardSecurity-WEB.jpg)","c569eb9a":"## <center>Welcome on my notebook! <\/center>\n\nToday, our objective is to create the best classifier for credit car fraud detection. To do it, we'll compare classification models from different methods :\n* Logistic regression\n* Support Vector Machine\n* Bagging (Random Forest)\n* Boosting (XGBoost)\n* Neural Network (tensorflow\/keras)\n\nThe datasets contains transactions made by credit cards in September 2013 by european cardholders.\nThis dataset presents transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions. The dataset is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions. I decided to proceed to an undersampling strategy to re-balance the class.\n\nIt contains only numerical input variables which are the result of a PCA transformation. Unfortunately, due to confidentiality issues, we cannot provide the original features and more background information about the data.\n\nHere are some other notebooks that helped me build this one :\n- https:\/\/www.kaggle.com\/jdelamorena\/recall-97-by-using-undersampling-neural-network\n- https:\/\/www.kaggle.com\/marbatlle\/fraud-prediction-undersampling-and-svm\n\nIf you found this notebook helpful or you just liked it , some upvotes would be very appreciated !","472411c4":"# 2. Support Vector Machine","84e5b057":"# <center>CREDIT CARD FRAUD DETECTION USING MACHINE LEARNING METHODS<\/center>\n\n <p style=\"color:blue;\">Nils LEFEUVRE - March 2020<\/p>","7c14540e":"We need to standardize the 'Amount' feature before modelling. \nFor that, we use the StandardScaler function from sklearn. Then, we just have to drop the old feature :"}}