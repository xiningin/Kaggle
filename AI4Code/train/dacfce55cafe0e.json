{"cell_type":{"504b1be1":"code","92eaf63e":"code","c436ba68":"code","d1b4d138":"code","c49dcbe7":"code","227d5212":"code","e18ef592":"code","d33db348":"code","5e87aa7a":"code","9cb7e509":"code","a2adeb90":"code","f099ab2a":"code","b3a0c879":"code","c4a49f9d":"code","6d927e8c":"code","538ac12e":"markdown","52b58ac3":"markdown","22179211":"markdown"},"source":{"504b1be1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","92eaf63e":"!pip list","c436ba68":"import numpy as np\nimport skimage.exposure\nfrom matplotlib import pyplot as plt","d1b4d138":"CLASSES = [\n    'AnnualCrop', 'Forest', 'HerbaceousVegetation', 'Highway', 'Industrial', 'Pasture', 'PermanentCrop', 'Residential',\n    'River', 'SeaLake'\n]\n","c49dcbe7":"train_dataset = np.load(\"\/kaggle\/input\/isae-dl-short-2021\/train.npz\")","227d5212":"x_train, y_train = train_dataset['x'], train_dataset['y']","e18ef592":"x_train.shape","d33db348":"def plot_imgs(x, y=None, grid_size=4, title=\"samples\"):\n    \"\"\"\n    Plot grid_size*grid_size images \n    \"\"\"\n    fig, ax = plt.subplots(grid_size, grid_size, figsize=(20, 20))\n    fig.tight_layout()\n    idxs = np.random.randint(len(x), size=16)\n\n    for i in range(grid_size ** 2):\n        k = idxs[i]\n        if y is not None:\n            img, lbl = x[k], CLASSES[y[k]]\n        else:\n            img, lbl = x[k], \"no-label\"\n        img = skimage.exposure.adjust_gamma(img, gamma=0.7)\n        ax[i % 4][i \/\/ 4].imshow(img)\n        ax[i % 4][i \/\/ 4].set_title(lbl)\n        ax[i % 4][i \/\/ 4].axis('off')\n    fig.suptitle(title, fontsize=14)\n    plt.show()","5e87aa7a":"plot_imgs(x_train, y=y_train, title=\"training set\")","9cb7e509":"np.unique(y_train, return_counts=True)","a2adeb90":"test_dataset = np.load(\"\/kaggle\/input\/isae-dl-short-2021\/test.npz\")","f099ab2a":"x_test = test_dataset[\"x\"]","b3a0c879":"x_test.shape","c4a49f9d":"plot_imgs(x_test, y=None, title=\"test set\")","6d927e8c":"predictions = []\n\nfor idx, img in enumerate(x_test):\n    predictions.append({\"Id\": idx, \"PredictedIndex\": np.random.randint(0,10)})\n\nsubmission_id = \"random\"\npredictions = pd.DataFrame(predictions)\n\n# Sauvegarde du dataframe en csv. ATTENTION: index=False sinon BUG !\npredictions.to_csv(\"\/kaggle\/working\/{}.csv\".format(submission_id), index=False)","538ac12e":"## G\u00e9n\u00e9ration d'une soumission exemple","52b58ac3":"You can now download the submission and upload it !","22179211":"## Chargement des donn\u00e9es"}}