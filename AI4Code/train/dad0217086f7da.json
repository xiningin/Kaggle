{"cell_type":{"98a0b6b8":"code","a0e42a99":"code","a4cf9e86":"code","2af175e8":"code","073fa92f":"code","d7e299cb":"code","955af7c0":"code","0f4f5fe8":"code","86e83ba9":"code","e5bb81fa":"code","f5096097":"code","6defba36":"code","5a28e233":"code","e1faaf67":"code","6ab25b55":"code","84b62b0a":"code","8f3b936c":"code","2d41e760":"code","c031198d":"code","b53041d5":"code","f42f598a":"code","5f0fb5e0":"code","7f519771":"code","767ae56b":"code","fae02ec3":"code","8f820c04":"code","9299d7cd":"markdown","7972f109":"markdown","70582bc1":"markdown","b98db9ed":"markdown"},"source":{"98a0b6b8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport sqlite3 # for interacting with a local relational database\nimport matplotlib.pyplot as plt # data visualization\nfrom sklearn.cluster import KMeans # KMeans clustering from sklearn\nfrom sklearn.preprocessing import scale\n#from customplot import *\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a0e42a99":"cnx = sqlite3.connect('..\/input\/database.sqlite')\nprint(cnx)\n# df = pd.read_sql_query(\"SELECT * FROM Player_Attributes\", cnx)\ndf = pd.read_sql_query(\"SELECT * FROM Player_Attributes\", cnx)","a4cf9e86":"df.columns","2af175e8":"# Simple Statistice of the Dataset\ndf.describe().transpose()","073fa92f":"# Null of missing values\n# Show if any of the 183978 rows have null value in one of the 42 columns\ndf.isnull().any().any(), df.shape\n# df.isnull().any(), df.shape # show if each column has null value","d7e299cb":"# How many data points in each column are null?\ndf.isnull().sum(axis=0)","955af7c0":"# initial number of rows\ninitial_rows_no = df.shape[0]\n\n# Drop the null rows\ndf = df.dropna()","0f4f5fe8":"# Check if all nulls are gone\ndf.isnull().any().any(), df.shape","86e83ba9":"# How many rows were deleted?\ninitial_rows_no - df.shape[0]","e5bb81fa":"# Shuffle the rows of df\n# df = df.reindex(np.random.permutation(df.index))\n#df = df.reindex(np.random.permutation(df.id))\n\n","f5096097":"# Look at top few rows\ndf.head(5)","6defba36":"# Look at top few rows\ndf.shape","5a28e233":"df[:10][['penalties', 'overall_rating']]","e1faaf67":"# Pearson's Correlation Coefficient to see the correlation of features\ndf['overall_rating'].corr(df['penalties'])","6ab25b55":"#features = list(df.columns.values)\nfeatures = ['acceleration', 'curve', 'free_kick_accuracy', 'ball_control', 'shot_power', 'stamina']\n\nfor f in features:\n    correlation = df['overall_rating'].corr(df[f])\n    print(\"%s: %f\" % (f, correlation))\n    ","84b62b0a":"cols = ['potential',  'crossing', 'finishing', 'heading_accuracy',\n       'short_passing', 'volleys', 'dribbling', 'curve', 'free_kick_accuracy',\n       'long_passing', 'ball_control', 'acceleration', 'sprint_speed',\n       'agility', 'reactions', 'balance', 'shot_power', 'jumping', 'stamina',\n       'strength', 'long_shots', 'aggression', 'interceptions', 'positioning',\n       'vision', 'penalties', 'marking', 'standing_tackle', 'sliding_tackle',\n       'gk_diving', 'gk_handling', 'gk_kicking', 'gk_positioning',\n       'gk_reflexes']","8f3b936c":"# Create a list contain Pearson's Correlation between overall_rating with each columns\ncorrelations = [ df['overall_rating'].corr(df[f]) for f in cols]","2d41e760":"len(cols), len(correlations)","c031198d":"# Create a dataframe using cols and correlations\ndf2 = pd.DataFrame({'attributes': cols, 'correlation': correlations})\ndf2\n","b53041d5":"# Function for plotting a dataframe\ndef plot_dataframe(df, y_label):\n    color = 'coral'\n    fig = plt.gcf()\n    fig.set_size_inches(20, 12)\n    plt.ylabel(y_label)\n    \n    ax = df2.correlation.plot(linewidth=3.3, color=color)\n    ax.set_xticks(df2.index)\n    ax.set_xticklabels(df2.attributes, rotation=75)\n    plt.show()","f42f598a":"plot_dataframe(df2, 'Player\\'s Overall Rating')","5f0fb5e0":"# Select features on which to group players\nselect5features = ['gk_kicking', 'potential', 'marking', 'interceptions', 'standing_tackle']\n\n# Generate a new dataframe with selected features\ndf_select = df[select5features].copy(deep=True)\ndf_select.head()","7f519771":"# Perform scaling on the dataframe\ndata = scale(df_select)\n\n# Define no of clusters\nnoOfClusters = 4","767ae56b":"model = KMeans(init='k-means++', n_clusters=noOfClusters, n_init=20).fit(data)","fae02ec3":"print(90*'_')\nprint(\"\\nCount of players in each cluster\")\nprint(90*'_')\n\npd.value_counts(model.labels_, sort=False)","8f820c04":"def pd_centers(featuresUsed, centers):\n    from itertools import cycle, islice\n    from pandas.tools.plotting import parallel_coordinates\n    import matplotlib.pyplot as plt\n    import pandas as pd\n    import numpy as np\n\n    colNames = list(featuresUsed)\n    colNames.append('prediction')\n\n    # Zip with a column called 'prediction' (index)\n    Z = [np.append(A, index) for index, A in enumerate(centers)]\n\n    # Convert to pandas for plotting\n    P = pd.DataFrame(Z, columns=colNames)\n    P['prediction'] = P['prediction'].astype(int)\n    return P\n","9299d7cd":"## Clean null value by simply removing it","7972f109":"## Visualize the Correlation","70582bc1":"## Clustering Players","b98db9ed":"## Predicting 'overal_rating' of a Player"}}