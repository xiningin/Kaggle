{"cell_type":{"6a7a9d3a":"code","93316c56":"code","8801e2a6":"code","042cd271":"code","eecb5ae1":"code","cb0e0220":"code","8b312127":"code","acc4b887":"code","e738a967":"code","777131ab":"code","4ecaa17d":"code","07a5d5bf":"code","02209289":"code","f967f225":"code","0ea5f4bc":"code","77b28860":"code","e18328cf":"code","56e41fbc":"code","3208b171":"code","14dd5fac":"code","1f428960":"code","9581e675":"markdown","60c6ae31":"markdown"},"source":{"6a7a9d3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n #   for filename in filenames:\n        #print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","93316c56":"import sklearn\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.applications.resnet50 import ResNet50\nfrom sklearn.model_selection import KFold\nfrom tensorflow.keras.layers.experimental.preprocessing import RandomRotation, RandomContrast","8801e2a6":"#!pip install keras","042cd271":"train = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/train.csv\")\ntest = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/sample_submission.csv\")","eecb5ae1":"train.head()","cb0e0220":"test.head()","8b312127":"train[\"file_path\"] = train[\"Id\"].apply(lambda identifier: \"..\/input\/petfinder-pawpularity-score\/train\/\" + identifier + \".jpg\")\ntest[\"file_path\"] = test[\"Id\"].apply(lambda identifier: \"..\/input\/petfinder-pawpularity-score\/test\/\" + identifier + \".jpg\")","acc4b887":"train.head()","e738a967":"train.columns","777131ab":"columns = ['Subject Focus', 'Eyes', 'Face', 'Near', 'Action', 'Accessory',\n       'Group', 'Collage', 'Human', 'Occlusion', 'Info', 'Blur']","4ecaa17d":"image_size = 128\nbatch_size = 256","07a5d5bf":"def preprocess(image_url, tabular):\n    image_string = tf.io.read_file(image_url)\n    image = tf.image.decode_jpeg(image_string, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.central_crop(image, 1.0)\n    image = tf.image.resize(image, (image_size, image_size))\n    return (image, tabular[1:]), tf.cast(tabular[0], tf.float32)","02209289":"def build_tabular_model(inputs):\n   \n    x = keras.layers.Dense(12,  activation='relu')(inputs)\n    x = keras.layers.Dense(64,  activation='relu')(x)\n    x = keras.layers.Dense(128, activation='relu')(x)                 #\u52a0\u4e00\u5c42\n    x = keras.layers.Dropout(0.3)(x)\n    x = keras.layers.BatchNormalization()(x)\n    #x = keras.layers.Dense(256, activation='relu')(x)   \n    x = keras.layers.Dense(128, activation='relu')(x)\n    x = keras.layers.Dense(64,  activation='relu')(x)\n    x = keras.layers.Concatenate()([x, inputs])\n    return x","f967f225":"def block(x, filters, kernel_size, repetitions, pool_size=2, strides=2):\n    for i in range(repetitions):\n        x = tf.keras.layers.Conv2D(filters, kernel_size, activation='relu', padding='same')(x)\n    x = tf.keras.layers.MaxPooling2D(pool_size, strides)(x)\n    return x","0ea5f4bc":"def get_model():\n    image_inputs = tf.keras.Input((image_size, image_size , 3))\n    tabular_inputs = tf.keras.Input(len(columns))\n    \n    #resnet = ResNet50(include_top=False, pooling=None)\n    resnet = keras.models.load_model('..\/input\/d\/aeryss\/keras-pretrained-models\/ResNet50V2_NoTop_ImageNet.h5')\n    resnet.trainable = False\n    \n    image_x = resnet(RandomContrast(factor = 0.1)(RandomRotation(factor = 0.3)(image_inputs)))   # factor was 0.15\n    #image_x = resnet((image_inputs))\n\n    image_x = tf.keras.layers.GlobalAveragePooling2D()(image_x)\n    \n    tabular_x = build_tabular_model(tabular_inputs)\n    \n    x = tf.keras.layers.Concatenate(axis=1)([image_x, tabular_x])#\u4ece\u7b2cn=1\u7ef4\u8fdb\u884c\u62fc\u63a5\n    #x = image_x\n    x = tf.keras.layers.Dense(1024)(x)\n    x = keras.layers.Dropout(0.1)(x)\n    x = tf.keras.layers.Dense(64)(x)\n    output = tf.keras.layers.Dense(1)(x)\n    model = tf.keras.Model(inputs=[image_inputs, tabular_inputs], outputs=[output]) #\u901a\u8fc7\u8bad\u7ec3\u548c\u63a8\u7406\u529f\u80fd\u5c06layer\u5206\u7ec4\u4e3a\u4e00\u4e2a\u5bf9\u8c61\u3002\u8fdb\u884c\u5b9e\u4f8b\u5316\uff0c\u4f7f\u7528\u201cAPI\u201d\uff0c\u4ece\u5f00\u59cb\uff0c\u94fe\u63a5\u5c42\u8c03\u7528\u4ee5\u6307\u5b9a\u6a21\u578b\u7684\u6b63\u5411\u4f20\u9012\uff0c\u6700\u540e\u4ece\u8f93\u5165\u548c\u8f93\u51fa\u521b\u5efa\u6a21\u578b\n    return model","77b28860":"model = get_model()\ntf.keras.utils.plot_model(model, show_shapes=True)","e18328cf":"def rmse(y_true, y_pred):\n    return tf.sqrt(tf.reduce_mean((y_true -  y_pred) ** 2))","56e41fbc":"# tf.keras.backend.clear_session()\nmodels = []\nhistorys = []\nkfold = KFold(n_splits=5, shuffle=True, random_state=42)\ntrain_best_fold = True\nbest_fold = 0\nfor index, (train_indices, val_indices) in enumerate(kfold.split(train)):\n    if train_best_fold and index != best_fold: continue#\n    x_train = train.loc[train_indices, \"file_path\"]\n    tabular_train = train.loc[train_indices, [\"Pawpularity\"] + columns]\n    x_val= train.loc[val_indices, \"file_path\"]\n    tabular_val = train.loc[val_indices, [\"Pawpularity\"] + columns]\n    checkpoint_path = \"model_%d.h5\"%(index)#\u4fdd\u5b58\u6a21\u578b\u8def\u5f84\n    checkpoint = tf.keras.callbacks.ModelCheckpoint(checkpoint_path, save_best_only=True)\n    early_stop = tf.keras.callbacks.EarlyStopping(min_delta=1e-4, patience=1000)\n    reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(factor=0.3,patience=2, min_lr=1e-7)      #f was 0.3\n    callbacks = [early_stop, checkpoint, reduce_lr]    \n    optimizer = tf.keras.optimizers.Adam(1e-3)    \n    train_ds = tf.data.Dataset.from_tensor_slices((x_train, tabular_train)).map(preprocess).shuffle(512).batch(batch_size).cache().prefetch(2)\n    val_ds = tf.data.Dataset.from_tensor_slices((x_val, tabular_val)).map(preprocess).batch(batch_size).cache().prefetch(2)\n    model = get_model()\n    model.compile(loss = \"mse\", optimizer = optimizer, metrics = [\"mae\", rmse, \"mape\"])\n    history = model.fit(train_ds, epochs=30, validation_data=val_ds, callbacks=callbacks, batch_size = 8)\n    for metrics in [(\"rmse\", \"val_rmse\"), (\"loss\", \"val_loss\"), (\"mae\", \"val_mae\"), (\"mape\", \"val_mape\"), [\"lr\"]]:\n        pd.DataFrame(history.history, columns=metrics).plot()\n        plt.show() \n    model.load_weights(checkpoint_path)\n    historys.append(history)\n    models.append(model)","3208b171":"def preprocess_test_data(image_url, tabular):\n    print(image_url, tabular)\n    image_string = tf.io.read_file(image_url)\n    image = tf.image.decode_jpeg(image_string, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.central_crop(image, 1.0)\n    image = tf.image.resize(image, (image_size, image_size))\n    # 0 won't be used in prediction, but it's needed in this senario or the tabular variable is treated as label.\n    return (image, tabular), 0","14dd5fac":"test_ds = tf.data.Dataset.from_tensor_slices((test[\"file_path\"], test[columns])).map(preprocess_test_data).batch(batch_size).cache().prefetch(2)","1f428960":"use_best_result = False\nif use_best_result:\n    if train_best_fold:\n        best_model = models[0]\n    else:\n        best_fold = 0\n        best_score = 10e8\n        for fold, history in enumerate(historys):\n            for val_rmse in history.history[\"val_rmse\"]:\n                if val_rmse < best_score:\n                    best_score = val_rmse\n                    best_fold = fold\n        print(\"Best Score:%.2f Best Fold: %d\"%(best_score, best_fold + 1))\n        best_model = models[best_fold]\n    results = best_model.predict(test_ds).reshape(-1)\nelse:\n    total_results = []\n    for model in models:\n        total_results.append(model.predict(test_ds).reshape(-1))\n    results = np.mean(total_results, axis=0).reshape(-1)\nsample_submission[\"Pawpularity\"] = results\nsample_submission.to_csv(\"submission.csv\", index=False)","9581e675":"# Build the model","60c6ae31":"# Import libraries"}}