{"cell_type":{"4a7b1eb7":"code","b974fd3c":"code","f24c2163":"code","be9b04a3":"code","b9ac7703":"code","ba466fc5":"code","985b758f":"code","a0470cb9":"code","fecd266d":"code","86e61600":"code","401235e2":"code","8218bbd8":"code","47d6e4e3":"code","8399c1ff":"code","d4ba58aa":"code","60f76cf5":"code","fc1bf6ef":"code","b24c67a3":"code","f64453e8":"code","a56c1cf0":"code","bdeabbab":"code","e345a76d":"markdown","0a21d112":"markdown","a3fd865e":"markdown","ff150e74":"markdown","cde797ac":"markdown"},"source":{"4a7b1eb7":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxISEhUSExMVFhUWFhYXFhgYGRoaFxgYGBsbGhsfGh0YHSgjHRolHRcdIjEhJSkrLi4uGiAzODMtNygtLisBCgoKDg0OGhAQGysmICUrLS0rLS0rLS0wLS0wLS03LS0wLzUtLS0tLS4tLS0tLS0tLSstLy0tLSstLS0tLS0tLf\/AABEIAKEBOgMBIgACEQEDEQH\/xAAcAAEAAgIDAQAAAAAAAAAAAAAABQYDBAECBwj\/xABGEAACAQMCBAIHBQUECgIDAQABAgMABBESIQUTMUEiUQYyYXGBk9EUFRZUkSMzQlKhB7GywSQ0Q1NicnOS8PGC4TWisyX\/xAAaAQEAAwEBAQAAAAAAAAAAAAAAAQIDBAYF\/8QAMBEAAgEDAgUBCAEFAQAAAAAAAAECAxESMVEEEyFB8BQiMmFxgZGh0SMzNEKxwQX\/2gAMAwEAAhEDEQA\/APP7SAPKWkwozqZcEbE749lS9rxGPlSqix6mKLGrnOACOzfzZ7Y\/pUbb3VqXXU3M1R+PWwUK\/fT7MD+tc2KW5kjUTICJAdesDw9ep2BGP1rJrJ2Cjl0JD0stSdLyW\/Ic5XK4ZZX7Yx02HfB39lQ2u4QK2GUIR4wM4YbjJ6ZHlVo4taWLAOblXfw5JmU5OTqJGe4x06YGMVNJxWyaIYktwR0VnTAZRpHU+zY9cVpCk0rSOuHC9m0Via6gkJkeRiPArMjMshBOc6SMbHxbeXurnjt3BFIUg0hWjQ6xls9e\/c9877n2Vi4feQBGLyRZLHbUvi94J6Z6eypngzcPWAFnt9RJLamXUSGJGcnOB5dKsqaxxuWjQVsboi\/RriBlYQTztyypVVBCkkdAWxnGM+3oK2eOy25VFiHij1KcAgY2wSx3O\/c+ZqKvDDEWkgnjGDqXLJke7HfPbHSslh6QmWQNM8WSoQbhckHOWHxO+wqjg+Ym2ZpSVRZP8lu9FOJyxqY5DqBxp2GF79R8T0+NWi34miFhKwDlthuSRgdAB552qoCS27XsK77aXjB9vUnsT28qk7fiti4DNcW\/7MhRqdFbYg523PTP\/utJxHFcPGcbN2X5+RcqVAwek1iuFFzDv35iAf31t\/iKy\/N2\/wA1PrWLTR56dGcH1TJOlRn4isvzdv8ANT60\/EVl+bt\/mp9agpi9iTpUZ+IrL83b\/NT60\/EVl+bt\/mp9aDF7EnSoz8RWX5u3+an1p+IrL83b\/NT60GL2JOlRn4isvzdv81PrT8RWX5u3+an1oMXsSdKjPxFZfm7f5qfWn4isvzdv81PrQYvYk6VGfiKy\/N2\/zU+tPxFZfm7f5qfWgxexJ0qM\/EVl+bt\/mp9afiKy\/N2\/zU+tBi9iTpUZ+IrL83b\/ADU+tPxFZfm7f5qfWgxexJ0qM\/EVl+bt\/mp9afiKy\/N2\/wA1PrQYvYk6VGfiKy\/N2\/zU+tPxFZfm7f5qfWgxexJ0qM\/EVl+bt\/mp9afiKy\/N2\/zU+tBi9iTpUZ+IrL83b\/NT60\/EVl+bt\/mp9aDF7EnSoz8RWX5u3+an1rbsr+GYExSxyAHBKMGAPt0nahDi0bFKUoQfKFWef0NkXhq8Q5i5JUtDjxrC7vGkhOfVZ4yo29uag+FWD3E0UCevK6xr72IAz7N69dj4lwya\/lsVluQJYPu1AyR\/Z15Y0xsrayxPMXUDp6v7a1PulBn9CnHC4+JrKrBmOuLSQyJzGiDas7jWoHTbUKejfoU93Z3V5zVjW3R2VSpJlMa63A3GMArvv64q6cKmEMHCrO48MdxHxGznH8pe4KqfYVkCnPbBrtAywNd8OUqVsuDXaOQchrmXlvOQe41YTf8A3dAVe19BIX+yxm+VLm7hSWGJoX0HmFgqmRScElSM6ap7WUgkaHQxkUspUDUQUzq9XPTB\/SvXLHjsUU\/Cbd44RzeHwol1oBngkkaVEZGbKgK2DuNsk5qq\/wBnVvJBxxI5f3sTXSuTv41hlBOT13HxoCrrwC7MghFrcGVk1iPlPrKHowXGSvt6V0t+DXMkrQJbzNKudUaxuZFx1yoGR18q9A9C717iwvMpc3dyZ4mkSKYxzvBh9wdDs6CRslFHVgffJniF3NLLE\/DLwI9tZwzCOXVeroZzFKx0AkkZBDrjwjJFAeWWnBbmV2jit5pJEzrRI3ZlxsdSgZG\/nXFlwe5mdo4reaR09dUjdmXGx1BQSNx3r1n7GIra6t4Vur+SLiDmY285Sdhy15bvoSRnAYOvkGVjWC4tJrt7u5eK\/jcS20b2VrKObq5QxNOxTGMDro2JOcb0B5XBwq4dzGkErOrBGVUYsGOQFIAyG2O3sNZbfgN3JzNFtO\/KJWTTE55bDqHwPCR5GvV\/S69eL79eJyrMnChqDAsQ6AN4l6kgkEjrk+dQU1vf3Fhw1uHc9tPP5xiZgyXJlLFpWU+ElSpDMRt3oCucU9EJRDay28c83NtufLpQuI\/G6\/wDZcJ39tRHAeHpPLy5JGjXS7aliaU5VSwGhN8HHXt1PSvRPvSdJfR6NZnVMQllVyFJa5ZWJwcHK7b9s+dRfogoXjk4GAB94gAdABFNjFAU224JdSAmO3mcBA5KxuwCHIDEgeqSp36bHyrUghZ2CIrMzHCqoJYnyAG5NeoLxWaO49Ho0ldU5dsSoYhSXuHRsgdcqMb9s+2oDgHC+dxmWJJZIcSXRUwnTKQok\/Zxbga2GVG+ME+6gKrxHhc9uwWeGWFiMgSIyEjzAYDastnwS6lGYraeQadeUjdhpyRq8I9XKkZ6bHyq9f2hW+jhlmDHcxlbi4AW6dXnVWWNsHCqUB2OkjPfuKlLez4jJbcENpzTGgy\/LY6Ubnt4pQOi6QfE22zDucgeW8N4TcXBIgglmKjLCNGcge3SDiu1nwe5mdo4oJpJEzqRI2ZlwcHUqjI323r030lSW5t5PukSOo4ldtcLb5LksV5D4TcxaQ2D0HsqRvJJZbiaD7PPcLIljFeTWb4miu4ozqbK5DL4iG1eHK9QRQHmEHojePbPdLC5RJeUV0PrzhiTgL6q6CCc7HaouzsJZTiKKSQ5Awisxy2cDwjqcHA74r0t7e6FhxG1tp5rh4OILlo2YsYisoZyFJ8LNksemck+dRf9nsVy\/DuKraa+cRaYEZxIy65NYTG5JXOw3IyBnOKApp4Pcib7Obebnf7rlvzOmfUxq6eyutzwq4jcxyQSpIql2RkZWCgZLFSMhQBnNerrwuSUWkU0tyl3Bw2Z7iOA4u5YzNmGHffUFOoqQSAPV3qTUmJ7NgJo5E4ZxLHPdXnTRrKh2UAZXsuAV6EZBoDxW\/4VcQFRNBLEXGVEiMhYea6gMj3VOQeiEi2d5cXEc8LwC3aJXQoHEsmgnxjJAHQirj6B34kt7CS6k16OLuFaUltJaBWXdug5ulvfvXNpb30PD+JDifOCGe0bTKSS2Lgc5kU7lSMeIDB2xnFAeZzcHuUiE7W8ywtjTKY3EZz0w5GDn30PBrnQ8n2eblpjW\/LfSmQGGpsYGQwO\/Yjzr1z0wvJo5OIMnD7qSGaCRRcG41WfJYDlyIvJ0DSNJVQ+R0ruvFphxpYxK3LXhuyZ8A\/0Tmer09YA\/AUB5PFwKVZoYrmOa3WZlAZoXLaWIGpEwDJ16L1riPgU8skq20M06xMwLJE5IAJALKASmQM4PSr76LXjy2nDnlkaRxx6MBnYswDLEx3Y5wW39+9ZuO2t5NbQjhwmZkvr77QLctqWZpRymk0bgcsbOdhg7igPLVtnKswRiqY1kA4XJwNR7ZO29dvscuUHLfMmOWNJy+TgaNvFk7bd6t3oEzyXV1YSnLXsM0J1MCPtC5kjZjnc8xMZ\/wCKvQJp4N7lCn\/+FzYFH+8xAscJOev+kK+9AeNWvAruVWeO2ndUJDskTsqkdQxAwCPbWOy4TcTbxQSyet6iM3q4LeqD0DDPlkedemi3vpm4PJYc026Qxcx4yeVHOJGa5MxBwpJOSW9YHvWr6Y8WxYTG0kKQy8YuyOWcBlCIRgr\/AAZOQOnTyFAVPjnow0clrFbrLM89pBcaVUs2qVdTBQgyVFdfSD0d+y2tnM3MWWf7RzY3GnQYZNAGCAQcdc16JKsj28kdtk3bcG4Zygn71owwM6pjcnTpyo3IFVv+0dLhbHhSXRYzql0HDNqdRzF0q\/kwTSMHcdDQHn1eyf2G\/wCr3H\/VX\/DXjdeyf2G\/6vcf9Vf8NRLQ5+K\/ps9LpSlZnyj5a+7ps45UmScAaGzn9Kzfcl1+Wn+W\/wBK9itOYJocwldUi5bY4APfHQ7d\/wCtWPibgsMsuQT\/ALRg24A3Rdjvtv0+NdGHWx6adBR7nzv903H+4l\/7G+ldTw2cf7GTy9RvpXucluAMFvGTuOo07ddtq0OP3bcsj+EFV2HdTkdemwrXkkOhszxz7quP9xL\/ANjfSuq8OmJIEUhI6gI2R79q9wsbjUckiXKK\/YYB204B6gqTmsc87QlZNIdZAqsMhcYIwem+ASD8Kcj4leWrHjEXDbpSCsMwPYhHB322wKyDhl4pL8m4B3y2iQHHfJxXuFv6wUDJQ569vZ7QT7qlLe61DGNRIwQG1ZBzjOwGcZ2AqsqVi\/IV7XPnSG0uFOVSVT5hWBx36VxHbT+JlSXfwsQG31diR5+XevcLC1hTUjOrsraWLYyCDsMee\/x\/SoP0gliW6hfOpCMvpbG4OEYlT1DZ38gao4F5cKkr3PK04XOc4hlODg4Rjg+3asycMu1BAhnAI8QCOAR7dvbXt1xxuFQNJ1syll0757b+Xc7+RqS4HPzIwWOCv6kE9fZRxsRU4eMFe7Z8\/jgV3+Wn+U\/0p9w3f5af5T\/SvpyJwRsdq75rLI+NLi5RbTifMH3Dd\/lp\/lP9K5Xgd2DkW1wCOn7N\/pX09mmajIr617HzE\/BLxiSbe4JPUmNyT\/SpTiZv5obeH7LMot4miBWOTLqzlzq28z09lfROaZpkPWvY+Y4uD3qnKwXCnGMiOQbfAUi4NernTb3AyMHEcgyPLYdK+nM0zTIetex8xR8GvFzi3uBkYOI5BkHsdulSfDlvoba4tltJsXBgJblyBlMLFhpwO5NfRWa4zTIetex8yDg97q18i51Zzq5cmc+\/FdW4Hdnc20+f+m\/0r6ezTNMh617HzB9w3f5af5T\/AErvJwa9bdre4JxjeOQ7D3ivpzNM0yHrXsfMZ4Re6dHIudI3C8uTGfdiun3Dd\/lp\/lP9K+ns1zmmQ9a9j5g+4bv8tP8AKf6V3j4PerkC3uBkYOI5BkeR23FfTmaZpkPWvY+YPuG7\/LT\/ACn+lPuG7\/LT\/Kf6V9P5pmmQ9a9j5jTg96AVEFyAeoEcmD7xjeun3Dd\/lp\/lP9K+n80zTIetex8xR8FvFIK29wCOhEbgj9BXB4Hdnc20\/wAt\/pX09mmaZD1r2PmD7hu\/y0\/yn+letf2L2csUE4kjdCZFIDqVJGntkV6LmuKOVylTiXOONhSlKqcpRLb0jEssUaIVDSKrk+R7DHfO2asF3aLkeDJXPVTtt\/MSAP6+6qyYGyxhhYEYxqwu5G3XAPtxVlnBlQEqoIAzrOY1cb5IBwcHz8h0rqTep6+Tk1cjZ2214O3ree3Tfy+ldbiASqVODrIJUHBONwQe\/ntWaGdXIKtrTdSQMAkdcZ7ZrQWFlYmL1eoD5wu5OzL03PTGPdXUZWVtPPPxY1Y+HckLoj\/a9Gy2coTvsQPIdO9b19gocHDnDAFdwykEDB7E4\/Wu6XhzqdDqOwBAbb\/4noM9wKyCRR0yCcBug\/Qf1qSLLt558jmzOUDeH1hnfz6g+fXHwqWsgc+uThyNOsFQAvcaQw37dQfZUeFXUGIbT4f4c+wFgu4HtrcvJkjiLdcAKoLdW7b7nHtI6CsauxePtO78ZVOIcSxLN4GIWVx4RlcBjkk+7NQd8UeQsW0xquok5Ovv\/F7RgDvvVzseIKRpYKCT\/CPCTjOc9P1qnekckNzdJofUCirhc5J1NsR5jPSsanumnEK1PUsXowsMkCylVzqZjkAaSNuuPIDepLh19G1wI0CldJYkD1mJ2AxjPw86qv2xIYuQyBnU6CxUqdChcasYJP8ACN+i\/rucLWMSWzxkHAPM09VYDVk+Xrf02qrmkkl3KyqfxpLpdanpKKAMAYrmo6KV23XOA2+wGduhLH6VI1lJWZ5niKXKnje4pWleXxSaCLSCJTICc+roTV8c9KxDi6iWdHwqQrCdZPXmZ7e8ADzzVTHFklSo+Hjdu+kLJktJygMMCJNJcKwIypKgkZxn412uOMQJr1PvG6owCsza2UMFUKCWYqQcLk0GL2N6la9jfRzLrjOQCQcgqysOoZWAKn2EVrWnHIJHKKzatJcao5EDKuMlC6gOBkernqKEWZI0qKsvSO1mIWOQtqUup0PpcKMtoJXDEd1UkjyqPt\/S2OVEKao2ebl\/tIpimBKY8awgUOwG2TsTg9DSxbCWxZaVX7D0mj1SRzPhluZIVwjaVAbTGHYAqrHbGojOa3fvZE57SyJpilVPCr6gWRCFI31uS+2gdwOuaEODRJ0qDvfSmBIJJ11vy2VWTRIrqzYwGUpqXbcEjB+NZrTjaSTMithViLsJIpY32YDUDIqqUA6980GEtiWpUXF6Q2zI0gdgqhTlo5F1BjhSmpRrDEgDTnJIx1rJc8RBtpZo85WORhrRkOpFJ3VwD1FBiyQpUTwjj0M+lA+ZDGH9VlVhgaijMNLgE7lScZrLZ8dt5W0o+SQWUlXVXVepRmAVwPNSeoNBi9iRpUbacet5SQjnZDIMo6hkHVkLKA6jbdc9R5ilhx63mcJHJqJXWvhcK6jGSjMAHxkZ0k4zvQYvYkqUpQqKUpQClKUApSlAUyLjsTRh48OT\/DndfPV3HT41H2d\/ySxlY8uVyXHUAsOoHwxjfbFQfEL3TdmQkrFIAAdJ8KgbeEY3z\/fVg9HrJXzPr1htQAK4A39ud9h09tdMJuSV11PYU6nM6PUnpbcNvG2wQKmPVVTgkgZwXOPW7ZHka15FZNWolAoYnAyCFUMxHngHGfMGojiPpC8Vx+yYMmNDA+prGScEb6gMVNWvGRMGXl6cKCehXfcjbft5b1pGTWhDp3l0OEkDaDoQlsEYyCc7AnbYE7e2usA1o0giBx4gqgFnXcDT\/wBp2O+3trZ+32qkymdPFoJyOnL6AZGfoSTXMvE1iUbM2SSuNge43PTP1qeY+xVQbRzBAVPNB3GR\/EFCEnBIOxcYwd+mD74W\/wCOgSA6FFuAF1YyQwz4gB1Xoo29tZ1lN3C6gvCC5UquNwvY7dPdj4ioQRFHaGQZyeiqTqUYJIU59u\/TIFVe5so4dSX9IFjMTSFcnScHOy5HhYgkZGT1361VvQyBueSFUlA55mMk529\/U9a37GzjN0DIjRrpQRRuWJLA5UnHQjGQNwKmeNQaHR0wDqYnHUk+LPtGR\/5mq456\/Yq4c32pLpsRnpJwWIPzDqJcknJ9gGx65yens7Vh9DLR1kJdfCpBIPQkjuR2xt8an4ZzdRspR4zsC7L4DvvjPUHBqWtOHLGgjVdQBOtgdLFuuw\/yzjHnRqKK1nCKu9CQ4cPD7ySfef8A6xW1WOAYUDGP\/PbWSuaTuzylWWU2\/iQvHeEi4mttcSyRI0pkDBSoymFyG6+LyqPPB5bc3Zs4ljDi25YjEa50kiXQG8IfSTjUMZxVrpS5Cm0rFOXhE8i3TFJFdvs8lvznjL8yDUw1GMkL4gB7j7wMk3ApjFBIQTMtxJcTIkmhiZVdSqSAjdAyqNwCExkZq20pcnmMi+C2fLSQiN42kcseZJzWLaVUFjqbsoGATsKheG8NuzLDJMr6kimSV3lVg0jqozGi7KhIPYH2d6t1cVBGb6lbsOESrHwxSBm2A5u42\/0d49vPxMOlYYeFXHI+zmPGi8WYNqXS6G6M5IGcghT0IG\/SrSxwCdz7utdLaXWivpZdQB0sMMMjOGHY+ypuTmyqz8MumjuLbkrpnuZHEutcLG0gYll668DYDPbOKzXXB5+ZJKqgkXsdwiagOYiwLEwz2bOojPdR55qxpcoXaMHxqqsw8lfUFPx0N+lLuYRo8hBIRWYgdSFBO36UuM2Vu94VcTrdy8sRvNFCkcZZSf2JZ8uy5UFi+BgnAA332z8U4ZLdGQleVzbKaDxMpKO7DGdJORgZ2qetZg6I4BAdVYZ64YZ\/zrJQZsgpOdNA0c1mcBUBQTLlmBBzGykadOAyklTkDpXNtaXDWk8cmou6zLEHZWcIykIrsuxbJO\/ljJPWpylQRkVmLh9xM0CyxiIQQyIWDhtbPGIxoA30gZJ1AHIG3etKz9HXeFYJYpVdIHiWU3BeJWaJoS0aFycEMdiowDVwuJdCM5zhVLHHsGa1478GKOUI5EgjIAGWAkxgtg7AZ3PapuTnLsQNhwpyBrglWRIZEVnuOZHqZAp5alzscdWC4xW7a8NkX7DkD9hEyybjYmJVwPPcdqnKVBDmxSlKFBSlKAUpSgFKUoDw2KRpV0MJGIYatIJOM49w3OKluCXfJmECO2+Vy5ART1PUbdMbDc1ZuA28SvIEA2IYNpw2CN1PsBGfjWlxGLNw+rTpVRjHVeux9p3+GK3ULq9z1UaDaUlJ3I++4tDGWt3jKyI+rWCHBdt98YO+Rtjb4VZODOnLUqSQdRGRp77nB3xmsVnw+IQkskfjBJwoORksudtyM1UH4JKHBikfALddzoBByQOozpyPpWnWKN1nTV31JLisi6XAIyxJAPcFugI2ztVlYqYSCVGFwSPVUqB7e1U7h8cMk\/JuIiHIfPrKXYHSNGO2xO+21aEtrzJmgHMjt42OYy+dJXqd8gZJ\/rWXPV2mjJcWk2mib4NxTQzlIXdZHG6kEbZyVzjOev0rY4PxjmuZpYyEBCRucYUEscsSfCSCAcdce6omy4PKWCRvkAEqpOlow2xJ0+sdz333x1qcuLZowEb93HjScDQM+857d+m3nUwlKXXsTSqVZ9exI8Y4dzCCmDICuQCMkb42J8yN\/ZW7ZcNkVAs7iZtWrBUaRjtnG\/Xr\/Ssfo7wyONDJj9pP4huAdA6YHxz29YCp22izuemcnzJHQnuGHSrylbqRX4qNNZP7bnQDVgDOO22Bg47EdRjpsMGtmG3C46kgYyazUrCU2zz9fjalVW0QpSlUOMrvpTdRCSGOQJhhI2qWZoogF05Hh9eTfYdgGOfOBsLuJjZ\/a5iIzaS51yMqOyyqq62JGTpz63U+2r+yg9QD3rT+xxvNzgdTIjwlQQVGWVzkfzAqP1qbmsZpKxSLaeEmz+1uTAYr3SZC2hoxNGITKehXl4wX2J09yKy8MshM9pHIGaA\/eJjVi2GhEkfJDA7lNJBAPYCrtJZKZkmOdaI8Y8tMhQnI8\/2Y\/rWw7gAknAHUnpS5Lq7ea\/soPFTDi7Eh\/wBOEji1GTzQAByOR30dM6ds6tXesfGXt9fERMT9oBT7OMtq5n2aLTyMbczX1074xnavQVkBGoEEeYIxj31q2UUSmWVHB5rqzHUCuoIsYAx02QbedLhVPPsQljYh7i6llGqSMQ6ck4RjANRUdAxzgnyqt3FxE1pDHIsQkHDoXjklLmRmKNtbqv8AGpGSw38S9hXpTMBjJxk4Hv8ArXUzqMEsoB6HI391LkKoUe4RVnndQoupbGJ7YnGt5gk+opnq3q5+FdOGRRFXaGaDItJhLHEH5jkqMNPqYnmKQRlhq8TVfs1wWGcZ3PQdzilxzCi3WuPRAmrHEIIEUjPgdFVJjnseQdQ9sZ71N+ksiwtZyMdEUc5DsfVRTDKq6j2XUQMnbJFSk1vG08bs37SNXCLqH8eMtp6k4XGfInzrcoQ56Hn1xPDL9okaWEIL12RLkMIZh9niGDnHnqU4PmAaXkySyKbjlQRtawGBbkNhGOvXy21LiVfDk+tjT0r0LNKXLc34FBvFhBlW8kMkotoRbP4g7\/sjraELvzDJnVp3wRnapW+Y\/YbLGf3nD+nlrizVprHDOrglWDAFlJBzhlJDD3gggj2UuRzNCjmyQRPcgHnLxNgr6jlVN6EKrvshUnKjY5OavlK4qCspZCldUkDbgg7kbHO42I27g1qS8Xt1kELTRiQkAIWGrJGQMeZHQd6FbM3aUpQgUpSgFKUoCuW\/BYVZWLSM6sFyPCNRGdwOowfMiuU4RbueYwbW+QcE4JA3BA2AwPZWGGUltZYglULgnwB48YK46HzGcfrWK1dF0gSnOWc6upMg0sNunXYDviu1U5Hq85ddRdcNflqsb5RS2zbM47bjbbPTG+1YOCWxUyGRGVgQvi64ODsQcYP+VbcMhBySeXGvhibdmKg\/xHc5J369BW3c2X2mJklbdhjw4GlvWAIyfPoc7e+jTjqaxqlH9JB9odZYQVeJiqtsMkbjGM5GR38\/fUVY+lGjWZo+ZIysr5AAY5GNW3TqOlXqxsMM3MB8DaVG4Hh3yMHcdMe6qz6aMisJEVH2wxzk9djgDAGSffmsatNSXUpxFFSWaIj0YvpIpRIU1K6sijVgKM5AGc4XIxVwh4\/JIyIsOGaRUYk5Ayd8Y3OB36VXPRWNrmZm06ECdsYDkjoNuuP6e2rWvCtBVy4GCucgAZ1bAb7Z2FXp3xLcPlyyyLa5OgkFfVIK9sZ2PTyH\/qpFFwMVHWeEOlwurORvvvtsPLtnapKsajdz4X\/pTm6lnp9BSlKzPmilKUBAekAn+02gimEYZ5QQULAkROd8OMjboeh3qN+03EP2uaNo+Wl54oyhLOG5Sv4tQ0kA7bHcb9drLxLhkc+jXqBjbUjIzIykqVOCpzurEfGuJOFRFJIyDplfmPud28PTy9UbVJqpqy87kFPxW6aSYwq55U3LSNY1KOE069bk5DHJwRgDbINbXG4llvbWCUBojHPJobdXkTlhdQPraVZmA+Pat+fgcDSGXDqzEM2iWVFcrjBdEYKxwANxuAAaz8S4bFOoWVc6TqUglWVvNWUhlO\/UGgyV1YguM8MgEtrbiJFhlmkeRFUBJHWIlQ6jYgkasdygrV49wSNrkQQqsf2i1uOZoAUao2iMMhA21K52brU9+H7blGIoWUsHJZ3Z9Y6NzGbWGGAAc5GNqy8O4RDAWZA2psBnd3kcgdBqkYnSPLOKXCnYheGX\/wBtmtWIH7GIzyr\/ACzvqhVfeumf9BUZwOzjlbh6yRpIv2W7Ol1DDPNh3wwxnerhYcMhgMjRIFMrmSTGfE56nc7e4bbnzrUl9HLZljXS6iJWWPRLKhCuQWGUcEglR1J6UuTmu3mv7NDg7i3lu4okdoUki0JGM8tnj1OqgkBVGxwOheu01sgv7WYKweWO41aiSwwsWF3J0gb+EbZJPcmpyxso4V0RoFXJOB3J3JJO5J7k71pXfo\/BJKJm5usdCJ5lC9AdKq4UA4GQBv3oVzVyr8ZspIUmLW2qQ3Syx3IaPPimXljc8wMFIj0gYI74NWXjE83PghicIJBMXYqGICBSNOdtW565G\/Q1n+5YebziHZg2oBpJGRW\/mVGYop9oG3asPGODC4lhdvVjEucMyuGcKFKMmCCMHcEdaE5p2v8AEjYuKysvKaZhKs80QMUId5RHg6gpyqABgGJGM9MZrDw7i11cG2jEixl47vmsIwWzBKkQKqxIUnJyDkDJ9lTLejtuURArKIyxVkkkR8v6+XVgx1Hc5Jz3rNZcGghKGNNPLEipuxwJWDuNz3YA+zoMCgyjsQXD+LXM5gg5ixuRdGWRUB1fZpRCNKtkLqJDHrjGB5jU4bfzRxRxAkvLd3wkeNAx\/ZySM3LRiQCTjrnAz1qxzej9uyquhl0vI6lJJEcNKS0mHRg2GJORnHTyFc\/h+25QiEelFdpF0M6sjsSSUZWDLnUeh6EjpQnOPn1ItL28YwxE8svLMhd411NEiB1YKCQr\/wAPlkE4xtWvb8TuwizPKjBLz7KyCMASLz+RrJzkPuG2wNum+1it+FRJowGJjLlS7u7ZcYbJdiTkeecdqfdMOjRo8Jl5+Mt+95nN1df598dO2MbUIzjsV2xvZZHS3RxBrmv2Z40QMRBNoAUMpXUdeWYgk4PnmpDjFpLMEs9mV11yzlcYMUkeAAo0iVs7HIxpJA2xW9JwO3ZdJj2Ejyg6mDB5CWcqwOoZLHocb4rPDw2JGRlQAxoY0Iz4UYgkfEqD8KBzV7o2zXFKVBkKUpQClKUBTEudWpc+FeoXIGo58Pwxv766cSkMSam0nQoA6bsx7j6eVdOCvhGwdTCRmcEEHOAe46\/QVhvpSWiTkq5fPrHYb4BBHQgZyfI19X4np79DYt7oSAYGc+qST4WONj7Nwc1K2sm3qkFW0nALHf8AlGcDPXV1xUTwqzESdBq1YbB2CnA6j3Zx51nSB9zzV8WVGpdY2PQg9dqrJXRaLWpselEYjiEvi2bQ2+3j2GQDg7\/31CX\/AAiSSJxIwUYGN+p6nVgbDb2\/Wyz7W7yPluWutlMZQFl38IbGdwO1QM\/GpskiMBNOfE2+fhnvtjHxrBHVBprq7lUsle2kQoY2wQu4ycMQGyP4T\/WrFPdGRGEr5GMqo7tnyA3Axk1GycFjuIhLqcTku0mgZB8bEawB4Tjp39+KmfRO3jEfrB5EJBYA5XUdWGJJBbHl2xWcV\/jc56SfWncsXCuKmaBHYMGOQy+enpg9cd\/iamY5c7d8f+\/0qnvxVlmVo2zGFIZf5s9874xt+hqyW1zEVEqNlW6HJOy7YA8s57edJwRzcdwsZx6J37EhSuFOd65rnPOilKUBr3l6kWnWcBiRnbC6UaQliTsoVDv7qTX8KZ1yxrg4OWAwQA2Nz1wwPuIrBxHhvOzqcgaGUAAbF8Ak567DGPIn4YG4Gp163Zi4lDEgDaUqWxj\/AIUVB7B3oWSiSKXKMxQOpZfWUEFh7x2rQfjiA6THJr5gj0kxA6inMG5k04042znJG1d7PhQiD6GwzatL6QWXUxY9eviOewOK6NwfMJgZ8owYSeHxOG9YkknDHfLe3bGBQlYkjLIVXIVmP8o05\/8A2IH9ajrbjscmgorlX0DVhcKzpzFVvFnUVIOwI8Q3rJdWMksQR5ANyXwuVZTnwHcHQMgdiQu\/Ug4peDElisrKSxkXCr4JDGItQz1AXJCnIBPfAwCx7nD8fQa8xy6o9etMJqVUVHZs69JAEi9CTk4xkHEsDneoj7iXTo14Uo0bgD11ZtTZJJOo75bJJ1HvgiXoRK3YUpShUUpSgFKUoBSlKAUpSgFKUoBSlKAUpSgFKUoClcPicnDgeJiwyDqxjTuAB\/KPLp+vdrNC2+NQ7noMHOw7nOPOshlGjAGkBvWXuPf3\/wDquutmC41DQeoUMce87ZPng\/1r6p6e23n\/AA4jbUu+xbJbv37AY23x8RWZ0AyGxkBmJIJXfscAnFYbW1jVsFTrJJI\/iIO+W9uTmpG3tv4hkgsTlWIZSDtpIB1dCGB+NRKVkTZ3+fmp2uC5tmUadWjSCrEx595JIFRf3ONP7xs\/xYwdt9gD07fpXf0qvtSJAqtIW8bnTkDSD109yd\/gKhIb6VwER8M+V8RIx7R3BH99c10ldnTTaSbfQhbOORXlTnfshMDIkYY8zpkaguQOx7Vxxzic7XRZE0BcA6QQGGxJcjrjP6Vs8V4RIiIZJSdTuJSNQGd2B1NjV06Yx+lRFxczKqlJAyKdCDT62fPzPtrkXtPNHz++a3PRbaziCBnKYxudWV7DYttv\/nWTgfFo5HmUABVCGIgHOCCD4cdjj9ap0EFwkaqZC+\/Qnwr3wAfLfYipb0Vc8yWQrsFAwNhqz0B\/+P8AWuu7fQ75Sk1ax6FCCPP49T7671it5CwzjAPT\/wAxWWuV6nk6t83cUpSoMxSlKAUpSgFKUoBSlKAUpSgFKUoBSlKAUpUH6Wek0djGGYF3ckRoDgsR1JPZRkZPtFTGLk7IlJt2ROUqg8G\/tEaRwJYAqHqyMSV9pBG4q3cb4gYYDKvLO6Y1sVTxMB1APnttV5UpxlixbrYkKVE3npPZROY5LiNHDaSpO4OAd\/Ib9elZPvQCdoy0QjWAS6tfiALEZIxgJgetmq4S2JxZJUqJsfSezmYJFcRux1YUHc6RqO3lgE59lYl9MLA5xdxbLqPi7fX2danlz2f2GMtibpUX+IrTlLP9oj5TNoD58OrBOD5HA71v2lykqLJGwZGAKkdCD33qri1qiGmjLSlKggq5ikSMuy+LOohRkFcqoGCepyT8K2JbVxq3bGCy4wBnbbPY75HxrDw7jbSgI8QyR6yk6RjJBOf6b1lvOORxggxSEjb+HbOBtluhruzkeqUO52PDQdQ1NkggOD4gcKykeQ2I3\/zpd3ywKcKeYzEhcEqG3yfZnOTjr8Sa0uM8TuYlUoE5Y9Zt9Y\/rgDpvg104NdZGDq3y25z167nfr\/fUO7fU1jS62Zr8K4m+QkpLszMQwUBd98HHfr7KgvSxCZFS3TS6ftCyYGzH2HOrP+dZvSOdEcqhwR4nySAMkEAY33+PWtWJJb1naPVEHxtnCjSoGMgZJI\/zrKcn7qRStUb\/AI4q5AzQTShlMkkratWjJYdPWIJ269amLG1EYDXQLjbSFJXqNj0G2MjrUtwWOK3uXjZSGbAU+soBXJyc7ZGKl+LWDEq0YJOQpAx0wcbH9KiNNY9StPh1jd6\/6NThljJLGz4UA5MaNnOOoy3fORvVn4fwoRoNgWPiYjw6j2z12HT4VoW0H2eKONv3mDpAO7Hrjr2\/QCpaxn30nvk1aV7XRjxbqqnnTemptwphQPIf+dhXelK5jzjd3cUpShApSlAKUpQClKUApSlAKUpQClKUApSlAK8\/\/tP4S8jwzAEoqsjf8JJyM+\/p8K9ArhlBGCMg9QavTqOEskSm1oUa4mF0IVWEIUGNsewYGB6u1b3pwVSxWAsvMZrdUXI1OVljzpHU4x2qzQWsaeoir7gB\/dXMlrGzK7IpdM6GKgsueukkZGcdqmNS0k9jKjGUZ5ydyjI0wuOJLFZi4EkujVqRdJ5a7OH6p4s7e2us\/ohcGN4AR\/8Aj4YBJkaTJHIXK+enG2cdDV9jhVSxVVBY5YgAFjjGTjqcDGTXetPUNaLb8HTzX2KUbW6nu7SZrIQJCsysdcZOXjKgAKfUBwB7z0pYej0qwcMRoRqgk1TDweEaX367+IjpmrrSquu7WS86\/sjmPz6\/so936PTNKf2IKHicU+MpjlCPDNjP83bqfKrxSlUnUc7X7FZSchSlKoVKdwX+L3p\/nXTjH70f80X+KlK7T2b0Rm9Iv9Wk+H94qOtPUHuH+Na4pR6k9yjcV\/fv\/wA1X30H\/dP\/ANT\/ACFKVnHU5aHvsiPSn9+3\/MP8K1ZuA9fif71pSrdzWXvExxT\/AGX\/AFT\/APyelj+9+B\/upSqy9xnNW\/tp\/IlaUpXMeZFKUoBSlKAUpSgFKUoBSlKAUpSgFKUoBSlKgClKVIFKUqAKUpQClKVIFKUqAKUpQH\/\/2Q==',width=400,height=400)","b974fd3c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f24c2163":"# Import Python Packages\n# PyTesseract and Tika-Python for OCR\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport shutil\nimport PIL\nimport os\nfrom os import walk\nfrom shutil import copytree, ignore_patterns\nfrom collections import Counter\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud, STOPWORDS\nfrom PIL import Image\nfrom wand.image import Image as Img\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_colwidth', 500)\n#mueller_report = pd.read_csv('..\/input\/data-science-cheat-sheets\/Interview Questions\/AI Questions.pdf') # one row per line","be9b04a3":"# Import Python Packages\n# PyTesseract and Tika-Python for OCR\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport shutil\nimport PIL\nimport os\nfrom os import walk\nfrom shutil import copytree, ignore_patterns\nfrom collections import Counter\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud, STOPWORDS\nfrom PIL import Image\nfrom wand.image import Image as Img\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_colwidth', 500)\n#mueller_report = pd.read_csv('..\/input\/data-science-cheat-sheets\/Interview Questions\/AI Questions.pdf') # one row per line","b9ac7703":"# Define helper function for plotting word clouds\ndef wordCloudFunction(df,column,numWords):\n    # adapted from https:\/\/www.kaggle.com\/benhamner\/most-common-forum-topic-words\n    topic_words = [ z.lower() for y in\n                       [ x.split() for x in df[column] if isinstance(x, str)]\n                       for z in y]\n    word_count_dict = dict(Counter(topic_words))\n    popular_words = sorted(word_count_dict, key = word_count_dict.get, reverse = True)\n    popular_words_nonstop = [w for w in popular_words if w not in stopwords.words(\"english\")]\n    word_string=str(popular_words_nonstop)\n    wordcloud = WordCloud(stopwords=STOPWORDS,\n                          background_color='white',\n                          max_words=numWords,\n                          width=1000,height=1000,\n                         ).generate(word_string)\n    plt.clf()\n    plt.imshow(wordcloud)\n    plt.axis('off')\n    plt.show()","ba466fc5":"# Define helper function for plotting word bar graphs\ndef wordBarGraphFunction(df,column,title):\n    # adapted from https:\/\/www.kaggle.com\/benhamner\/most-common-forum-topic-words\n    topic_words = [ z.lower() for y in\n                       [ x.split() for x in df[column] if isinstance(x, str)]\n                       for z in y]\n    word_count_dict = dict(Counter(topic_words))\n    popular_words = sorted(word_count_dict, key = word_count_dict.get, reverse = True)\n    popular_words_nonstop = [w for w in popular_words if w not in stopwords.words(\"english\")]\n    plt.barh(range(50), [word_count_dict[w] for w in reversed(popular_words_nonstop[0:50])])\n    plt.yticks([x + 0.5 for x in range(50)], reversed(popular_words_nonstop[0:50]))\n    plt.title(title)\n    plt.show()","985b758f":"# Preview the data folder\ninputFolder = '..\/input\/'\nfor root, directories, filenames in os.walk(inputFolder):\n    for filename in filenames: \n        print(os.path.join(root,filename))\n        \n# Move data to folder with read\/write access\noutputFolder = '\/kaggle\/working\/pdfs\/'\nshutil.copytree(inputFolder,outputFolder,ignore=ignore_patterns('*.db'))\nfor root, directories, filenames in os.walk(outputFolder, topdown=False):\n    for file in filenames:\n        try:\n            shutil.move(os.path.join(root, file), outputFolder)\n        except OSError:\n            pass\nprint(os.listdir(outputFolder))","a0470cb9":"# Look at page 2\npdf = os.path.join(outputFolder,'resist.pdf[2]')\nwith Img(filename=pdf, resolution=300) as img:\n    img.compression_quality = 99\n    img.convert(\"RGBA\").save(filename='\/kaggle\/working\/resist.jpg') # intro page to preview later","fecd266d":"# Parse a PDF file and convert it to CSV using PyTesseract\nimport pytesseract\npdfimage = Image.open('\/kaggle\/working\/resist.jpg')\ntext = pytesseract.image_to_string(pdfimage)  \ndf = pd.DataFrame([text.split('\\n')])","86e61600":"# Plot WordCloud of page 2\nplt.figure(figsize=(10,10))\nwordCloudFunction(df.T,0,10000000)\nplt.figure(figsize=(10,10))\nwordBarGraphFunction(df.T,0,\"Most Common Words on Page 2 of Antimicrobial resistance\")","401235e2":"# Parse a PDF file and convert it to CSV using Tika-Python\n!pip install tika\nimport tika\nfrom tika import parser\ntika.initVM()\nparsed = parser.from_file('\/kaggle\/working\/resist.jpg') \ntext = parsed[\"content\"]\ndf = pd.DataFrame([text.split('\\n')])\ndf.drop(df.iloc[:, 1:46], inplace=True, axis=1)","8218bbd8":"# Convert PDF to JPG and then convert JPG to CSV\n# I will do this for Pages 289 to 291 but\n# Eventually I should loop through the entire document\n\n# PDF to JPG for p 2\npdf = os.path.join(outputFolder,'resist.pdf[2]')\nwith Img(filename=pdf, resolution=300) as img:\n    img.compression_quality = 99\n    img.convert(\"RGBA\").save(filename='\/kaggle\/working\/resist.jpg')\npdfimage2 = Image.open('\/kaggle\/working\/resist.jpg')","47d6e4e3":"# PDF to JPG for p1\npdf = os.path.join(outputFolder,'resist.pdf[1]')\nwith Img(filename=pdf, resolution=300) as img:\n    img.compression_quality = 99\n    img.convert(\"RGBA\").save(filename='\/kaggle\/working\/resist.jpg')\npdfimage1 = Image.open('\/kaggle\/working\/resist.jpg')\n\n# PDF to JPG for p3\npdf = os.path.join(outputFolder,'resist.pdf[3]')\nwith Img(filename=pdf, resolution=300) as img:\n    img.compression_quality = 99\n    img.convert(\"RGBA\").save(filename='\/kaggle\/working\/resist.jpg')\npdfimage3 = Image.open('\/kaggle\/working\/resist.jpg')","8399c1ff":"# Parse a PDF file and convert it to CSV using PyTesseract (p2)\ntext = pytesseract.image_to_string(pdfimage2)\ndf = pd.DataFrame([text.split('\\n')])\ndf.drop(df.iloc[:, 27:], inplace=True, axis=1)\ndf.drop(df.iloc[:, :3], inplace=True, axis=1)\ndf.columns = range(df.shape[1])","d4ba58aa":"# Parse a PDF file and convert it to CSV using Tika-Python (p290-291)\ntika.initVM()\nparsed = parser.from_file('\/kaggle\/working\/resist.jpg')\nparsed2 = parser.from_file('\/kaggle\/working\/resist.jpg')\n\ntext = parsed[\"content\"]\ndf2 = pd.DataFrame([text.split('\\n')])\ndf2.drop(df2.iloc[:, 1:50], inplace=True, axis=1)\ndf2.drop(df2.iloc[:, 26:], inplace=True, axis=1)\ndf2.columns = range(df2.shape[1])\n\ntext = parsed2[\"content\"]\ndf3 = pd.DataFrame([text.split('\\n')])\ndf3.drop(df3.iloc[:, :50], inplace=True, axis=1)\ndf3.drop(df3.iloc[:, 22:], inplace=True, axis=1)\ndf3.columns = range(df3.shape[1])\n\ndfcombined = pd.concat([df, df2, df3]) # combine pages 289-291","60f76cf5":"#Explore page 3 - Mueller Report. Here I don't know how many pages each Cheat Sheet. There are 20 pages2\nw, h = pdfimage3.size # crop image\npdfimage3.crop((0, 1240, w, h-1300)) # display exerpt of PDF","fc1bf6ef":"#Explore page 1 - Mueller Report. Here I don't know how many pages each Cheat Sheet. There are 30 pages \nw, h = pdfimage1.size # crop image\npdfimage1.crop((0, 1240, w, h-1300)) # display exerpt of PDF","b24c67a3":"#Explore page 2 - Mueller Report. Here I don't know how many pages each Cheat Sheet. There are 30 pages\nw, h = pdfimage2.size # crop image\npdfimage2.crop((0, 1240, w, h-1300)) # display exerpt of PDF","f64453e8":"# Pages 1, 2 and 3\ndfcombined.head() # preview csv of 289-291","a56c1cf0":"# Clean up the notebook\n!apt-get install zip # install zip\n!zip -r pdfs.zip \/kaggle\/working\/pdfs\/ # zip up a few files\n!rm -rf pdfs\/* # remove everything else","bdeabbab":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Mar\u00edlia Prata, @mpwolke Was here' )","e345a76d":"#Codes from Paul Mooney https:\/\/www.kaggle.com\/paultimothymooney\/what-is-inside-of-the-mueller-report\/notebook","0a21d112":"#Confronting antimicrobial resistance beyond the COVID-19 pandemic and the 2020 US election.\n\nAuthors:Steffanie A Strathdee;; Sally C Davies;; Jasmine R Marcelin - Published:September 29, 2020DOI:https:\/\/doi.org\/10.1016\/S0140-6736(20)32063-8\n\nThe rise in multidrug-resistant bacterial infections that are undetected, undiagnosed, and increasingly untreatable threatens the health of people in the USA and globally. In 2020 and beyond, the antimicrobial resistance (AMR) should not be ignored.\n\nA US multicentre study reported that 72% of COVID-19 patients received antibiotics even when not clinically indicated, which can promote AMR. AMR might worsen under COVID-19 due to the overuse of antibiotics in humans, continuing misuse in agriculture, and the dearth of antimicrobials in the development pipeline. Competing global priorities are reducing AMR eradication activities, including measures for multidrug-resistant tuberculosis.\n\nIn 2015, the White House released a comprehensive action plan for the USA proposing milestones to curtail antibiotic misuse and accelerate new antimicrobials and vaccines.\n\nThe speed at which new antibiotic resistance genes emerge and spread globally requires that the USA and other countries take immediate action.\n\nOne of the ways to accelerate progress on AMR national action plan is encouraging the development of new antibiotics through bipartisan initiatives such as the Developing an Innovative Strategy for Antimicrobial Resistant Microorganisms (DISARM) Act, which some legislators have proposed as part of a COVID-19 relief bill.\n\nAs the COVID-19 pandemic has shown, efforts are needed to strengthen AMR surveillance and health-care infrastructure and create policies to ensure global equitable access to antimicrobials, diagnostics, and vaccines.\n\nNo matter the outcome of the 2020 US election, the path forward is not only one that builds back from the COVID-19 pandemic, but also addresses AMR in the context of pandemic preparedness.\n\nhttps:\/\/www.thelancet.com\/journals\/lancet\/article\/PIIS0140-6736(20)32063-8\/fulltext\n","a3fd865e":"#PDF to CSV\n\nConvert Page 2 of PDF to CSV (Method 1 of 2: PyTesseract)","ff150e74":"#It seems that data is broken since the words are cut.","cde797ac":"#I got broken data stream when reading image file and couldn't write mode CMYK as PNG."}}