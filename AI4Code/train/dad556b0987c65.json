{"cell_type":{"9672df8d":"code","cd3534f8":"code","5542e1d5":"code","8d49b77e":"code","4316eea1":"code","2e42bea6":"code","9807b1f1":"code","b96703f8":"code","9f3db1a1":"code","bf9da6b0":"code","e1730463":"code","fc8f988e":"code","3fe98b60":"code","95d49a37":"code","c426bca6":"code","a5bd57c3":"code","ac320e36":"code","b8696a40":"code","566b88b3":"code","6ee182fa":"code","b9a06014":"code","52c478cb":"code","7f32f06e":"markdown","beb51a2d":"markdown","1f5742e4":"markdown","9af4cb2d":"markdown","11acc7c8":"markdown","c6b1878b":"markdown","d93d6011":"markdown","a6623206":"markdown","dd8398be":"markdown","47e9d7bc":"markdown","515be677":"markdown","afb9c749":"markdown","b95a8eff":"markdown","6cfcd4cf":"markdown","ff03ebd8":"markdown","77dacb62":"markdown","50b61ed8":"markdown","7c48e1b2":"markdown","c543d15a":"markdown","cd62e2da":"markdown","b363f8d5":"markdown","63bc8b69":"markdown","ad421571":"markdown","920b1f6b":"markdown","40cdc15a":"markdown","a4ccb083":"markdown","28f4e81f":"markdown"},"source":{"9672df8d":"import matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport folium\nimport requests\nimport json\nimport os","cd3534f8":"path_data = os.path.join('..', 'input', 'recorded-crime-data-at-police-force-area-level', 'rec-crime-pfa.csv')\npath_geo = os.path.join('..', 'input', 'pfasgeo2017', 'pfas-geo-2017.json')\n\ndf = pd.read_csv(path_data)\ndf.head()","5542e1d5":"print(df.shape)\nprint(df.dtypes)","8d49b77e":"df['12 months ending'] = pd.to_datetime(df['12 months ending'], format='%d\/%m\/%Y')\n\ndf.head()","4316eea1":"df['year'] = pd.DatetimeIndex(df['12 months ending']).year\ndf.drop(['12 months ending'], inplace=True, axis=1)\ndf.drop(['Region'], inplace=True, axis=1)\n\ndf.head()","2e42bea6":"df.rename(inplace=True, columns={\n    'PFA': 'pfa',\n    'Offence': 'offence',\n    'Rolling year total number of offences': 'total'\n})\n\ndf.head()","9807b1f1":"df.describe(include='all')","b96703f8":"def quick_look(col_name):\n    colunique = np.sort(df[col_name].unique())\n    colnull = df[col_name].isnull().values.sum()\n    \n    print(colunique)\n    print('Count unique:', len(colunique))\n    print('Count null:', colnull)","9f3db1a1":"quick_look('pfa')","bf9da6b0":"rows_before = df.shape[0]\n\ndf = df[df['pfa'] != 'Action Fraud']\ndf = df[df['pfa'] != 'British Transport Police']\ndf = df[df['pfa'] != 'CIFAS']\ndf = df[df['pfa'] != 'UK Finance']\n\nrows_after = df.shape[0]\n\nquick_look('pfa')\nprint('Rows from:', rows_before, 'to:', rows_after, 'dropped:', (rows_before - rows_after))","e1730463":"quick_look('offence')","fc8f988e":"df.loc[df['offence'] == 'Domestic burglary', 'offence'] = 'Burglary'\ndf.loc[df['offence'] == 'Non-domestic burglary', 'offence'] = 'Burglary'\ndf.loc[df['offence'] == 'Non-residential burglary', 'offence'] = 'Burglary'\ndf.loc[df['offence'] == 'Residential burglary', 'offence'] = 'Burglary'\n\ndf.loc[df['offence'] == 'Bicycle theft', 'offence'] = 'Theft'\ndf.loc[df['offence'] == 'Shoplifting', 'offence'] = 'Theft'\ndf.loc[df['offence'] == 'Theft from the person', 'offence'] = 'Theft'\ndf.loc[df['offence'] == 'All other theft offences', 'offence'] = 'Theft'\n\ndf.loc[df['offence'] == 'Violence with injury', 'offence'] = 'Violence'\ndf.loc[df['offence'] == 'Violence without injury', 'offence'] = 'Violence'\n\ndf = df.groupby(['pfa', 'offence', 'year']).sum().reset_index()\n\nquick_look('offence')","3fe98b60":"quick_look('total')","95d49a37":"rows_before = df.shape[0]\ndf = df[df['total'] >= 0]\nrows_after = df.shape[0]\n\nquick_look('total')\nprint('Rows from:', rows_before, 'to:', rows_after, 'dropped:', (rows_before - rows_after))","c426bca6":"df['total'].plot(kind='hist', color='red')\nplt.show()","a5bd57c3":"quick_look('year')","ac320e36":"rows_before = df.shape[0]\ndf = df[df['year'] >= 2007]\nrows_after = df.shape[0]\n\nquick_look('year')\nprint('Rows from:', rows_before, 'to:', rows_after, 'dropped:', (rows_before - rows_after))","b8696a40":"pfageo = os.path.abspath(path_geo)\nprint(pfageo)","566b88b3":"def map_britain(data):\n    britain = folium.Map(location=[52.355518, -1.174320],\n                         zoom_start=6,\n                         tiles='cartodbpositron')\n    folium.Choropleth(\n        geo_data=pfageo,\n        name='choropleth',\n        data=data,\n        columns=['pfa', 'total'],\n        key_on='feature.properties.pfa17nm',\n        fill_color='YlGn',\n        fill_opacity=0.7,\n        line_opacity=0.2,\n        legend_name='# Crimes'\n    ).add_to(britain)\n\n    folium.LayerControl().add_to(britain)\n    return britain","6ee182fa":"label_weapon = 'Possession of weapons offences'\ndf_weapon = df.loc[df['offence'] == label_weapon]","b9a06014":"map_britain(df_weapon.loc[df_weapon['year'] == 2018])","52c478cb":"labels_weapon_high = ['Metropolitan Police', 'Greater Manchester', 'West Midlands', 'West Yorkshire']\ndf_weapon_high = df_weapon.loc[df_weapon['pfa'].isin(labels_weapon_high)]\n\nsns.lineplot(data=df_weapon_high, x='year', y='total', hue='pfa')","7f32f06e":"## Initial Data Insights","beb51a2d":"We now have data for all [43 territorial PFAs](https:\/\/www.police.uk\/forces\/) in England and Wales.","1f5742e4":"In fact, we only really need the year from `12 months ending`, so we will create a new column `year` of type `int64`\nthat contains only the year that the offences were committed and drop `12 months ending`.\nWe do not need `Region` either, so we will drop that column as well.","9af4cb2d":"The total crime count should be 0 or more.\nLet's remove all rows with an invalid crime count.","11acc7c8":"We see that all of the years are within the expected range.\nData were collected differently before 2007, and so we will only consider data between 2007 and 2018.","c6b1878b":"## Overview\n\nWe will now check the dataset size and whether the data types are being interpreted correctly.","d93d6011":"# Data Understanding\nWe will be using data from the [Office for National Statistics](\nhttps:\/\/www.ons.gov.uk\/), the United Kingdom's largest independent producer of official statistics.\nOur first step is to try to understand the data, and to ensure that data is correctly formatted and of good quality.\n\nWe will start by importing dependencies and reading the data from the `.csv` file to a dataframe.","a6623206":"We will go through the data of each column and fix any erroneous data that we find.","dd8398be":"We see that `12 months ending` is being interpreted as type `object`.\nHowever, this is a date type, so we will change its data type to `datetime64[ns]` and indicate that the date is in the\nformat `%d\/%m\/%Y`.","47e9d7bc":"PFAs that include major cities (e.g. London, Manchester, Birmingham, Leeds) appear to suffer from weapon possession offences more than most other places.\nLet's compare the trend of offences for the PFAs over the years.","515be677":"### total","afb9c749":"### offence","b95a8eff":"Now let's rename the column headers so that they are short and consistent.","6cfcd4cf":"### Weapon Possession Offences\n\nLet's extract weapon possession offence data.","ff03ebd8":"# Introduction\nIn this notebook, we will explore the [Recorded Crime Data at the Police Force Area Level](\nhttps:\/\/www.kaggle.com\/r3w0p4\/recorded-crime-data-at-police-force-area-level) dataset.\nThis dataset contains criminal offences that occurred in the United Kingdom and are grouped into rolling 12-month\ntotals.\n\nWe will follow the [Data Science Methodology](https:\/\/www.ibmbigdatahub.com\/blog\/why-we-need-methodology-data-science)\nas the process for our analysis.\nWe will skip the first four steps (i.e. business understanding, analytic approach, data requirements, data collection)\nbecause they are not applicable to our analysis.","77dacb62":"We will show a quick visualisation of the distribution of total crimes.","50b61ed8":"For our assessment, we will only consider *territorial* PFAs that are associated with one-or-more counties of England\nand Wales.","7c48e1b2":"### year","c543d15a":"We will map the total number of offences in 2018.","cd62e2da":"Some of these crimes look very similar (e.g. `Domestic burglary`, `Non-domestic burglary`).\nTo simplify our analysis, we will combine similar offences.","b363f8d5":"### pfas","63bc8b69":"We want to map our crime data to the PFAs of England and Wales, so we will use the GeoJSON file from [here](https:\/\/ckan.publishing.service.gov.uk\/dataset\/police-force-areas-december-2017-ew-bgc\/resource\/446cea20-c981-498e-aad2-f52965a26c0e) to do this.\nOur Notebook already has this downloaded, but you can find the direct `.geojson` file [here](http:\/\/geoportal1-ons.opendata.arcgis.com\/datasets\/bb12117b37134a03874c55175cf7f4bc_2.geojson).","ad421571":"We will now use `.describe()` to get quick insights into our data.","920b1f6b":"# TO BE CONTINUED","40cdc15a":"We will make a convenience function `map_britain` to easily map data.\n\nNote: there is a known issue with rendering complex maps in Chrome (see [here](https:\/\/github.com\/python-visualization\/folium\/issues\/812)) that might result in blank outputs.\nIf this occurs, try another browser e.g. Firefox.","a4ccb083":"We see that offences were on a steep decline in London (i.e. `Metropolitan Police`) from `2008` but started to increase again from approximately `2013` for all PFAs.","28f4e81f":"## Column Checking\n"}}