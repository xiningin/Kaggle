{"cell_type":{"490882d1":"code","ba583b03":"code","2c3a3328":"code","04988475":"code","6f8e798c":"code","1c8f0060":"code","5dd5f98a":"code","482a5b9a":"code","8eb007c9":"code","2673cf59":"code","906090a5":"code","1ac09727":"code","25d72fca":"code","588008c5":"code","8929dd3c":"code","1d2b29ac":"code","c91ad136":"code","7ce24023":"code","a8a2dbef":"code","c1f0ff59":"code","93adeb18":"code","3b800ff8":"code","70314920":"code","92ec1441":"code","a4e510c6":"code","2942c476":"code","c5e23f4a":"code","86f2cc25":"code","12f83f2d":"code","17e73c54":"code","f15f5951":"code","d2216504":"code","1972fbe6":"code","1c4284df":"code","f5504611":"markdown","3c7c2024":"markdown","829cd6da":"markdown","be19a9d4":"markdown","e0edab5f":"markdown","4faade0f":"markdown","05ad582e":"markdown","65a50b05":"markdown","84f5f9bd":"markdown"},"source":{"490882d1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import LabelEncoder\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns # for data visualiztions\nfrom sklearn.model_selection import GridSearchCV,cross_val_score, StratifiedKFold, learning_curve\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","ba583b03":"def concat_df(train_data, test_data):\n    # Returns a concatenated df of training and test set\n    return pd.concat([train_data, test_data], sort=True).reset_index(drop=True)\n\ndef divide_df(all_data):\n    # Returns divided dfs of training and test set\n    return all_data.loc[:890], all_data.loc[891:].drop(['Survived'], axis=1)","2c3a3328":"train=pd.read_csv('..\/input\/titanic\/train.csv')\ntest=pd.read_csv('..\/input\/titanic\/test.csv')\ntrain_test = concat_df(train,test)\nsubmission=pd.read_csv('..\/input\/titanic\/gender_submission.csv')","04988475":"train_test.head()","6f8e798c":"#check missing data\ntrain_test.isnull().sum().sort_values(ascending=False)","1c8f0060":"train_test['Age'] = train_test['Age'].fillna(train['Age'].median())\ntrain_test['Fare'] = train_test['Fare'].fillna(train['Fare'].median())","5dd5f98a":"train_test.head(5)","482a5b9a":"train_test['Fare_bin'] = pd.qcut(train_test['Fare'], 13)\ntrain_test['Age_bin']  = pd.qcut(train_test['Age'], 10,duplicates='drop')","8eb007c9":"train_test.head(10)","2673cf59":"# Create new column\ntrain_test['Friends']=train_test['SibSp']+train_test['Parch']\ntrain_test.head()\nprint(pd.crosstab(train_test['Survived'], train_test['Friends']), '\\n')","906090a5":"#def convert_Friends(Table):\n#    \n#    bins = [None] * len(Table)\n#\n#    for i in range(len(Table)):\n#        if(Table.Friends[i] in [0]):\n#            bins[i] = '0'\n#        if(Table.Friends[i] in [1, 2, 3]):\n#            bins[i] = '1'\n#        if(Table.Friends[i] in [4, 5, 6,7,8,9,10]):\n#            bins[i]='2'\n#    Table['Friends'] = bins\n#convert_Friends(train)\n#convert_Friends(test)\n#train.head()","1ac09727":"train_test[\"Cabin\"] = pd.Series([i[0] if not pd.isnull(i) else 'X' for i in train_test['Cabin'] ])","25d72fca":"# Name transform to Title\n#combine = [train, test]\n#print(type(combine))\n\n\n#  Label Enconding\nCols=['Sex','Embarked','Cabin',\"Fare_bin\",\"Age_bin\"]\n\n\n  \n\n#for i in range(len(combine)):\nfor col in Cols:\n    dummy_varas=pd.get_dummies(train_test[col],prefix=col, prefix_sep='_')\n    train_test = train_test.join(dummy_varas)\nprint(train_test.describe()) \n\n\n#df_all['Cabin'] = df_all['Cabin'].replace(['A', 'B', 'C'], 'ABC')\n#df_all['Cabin'] = df_all['Cabin'].replace(['D', 'E'], 'DE')\n#df_all['Cabin'] = df_all['Cabin'].replace(['F', 'G'], 'FG')","588008c5":"train_test.head()","8929dd3c":"train_test['Title'] = train_test['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\ntrain_test['Title'] = train_test['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\ntrain_test['Title'] = train_test['Title'].replace('Mlle', 'Miss')\ntrain_test['Title'] = train_test['Title'].replace('Ms', 'Miss')\ntrain_test['Title'] = train_test['Title'].replace('Mme', 'Mrs')\n    \ntrain_test['Title'] = train_test['Title'].fillna(\"Other\")\ndummy_varas = pd.get_dummies(train_test[\"Title\"],prefix=\"Title\", prefix_sep='_')\ntrain_test = train_test.join(dummy_varas)\ntrain_test.head()","1d2b29ac":"def get_person(passenger):\n    age,sex = passenger\n    return 'child' if age < 16 else sex\n\ntrain_test['Person'] = train_test[['Age','Sex']].apply(get_person,axis=1)\ntrain_test['Person'] = train_test['Person'].astype(str)    \nperson_dummies  = pd.get_dummies(train_test['Person'],prefix=\"Person\", prefix_sep='_')\nperson_dummies.drop(['Person_male'], axis=1, inplace=True)\ntrain_test = train_test.join(person_dummies)\n\ntrain_test.head()","c91ad136":"#for i in range(len(combine)):\n#    pclass_dummies  = pd.get_dummies(combine[i]['Pclass'])\n#    pclass_dummies.columns = ['Class_1','Class_2','Class_3']\n#    pclass_dummies.drop(['Class_3'], axis=1, inplace=True)\n#    combine[i] = combine[i].join(pclass_dummies)\n#combine[i].head(10)","7ce24023":"train_test['Ticket_type'] = train_test['Ticket'].apply(lambda x: x[0:3])\ntrain_test['Ticket_type'] = train_test['Ticket_type'].astype('category')\ntrain_test['Ticket_type'] = train_test['Ticket_type'].cat.codes","a8a2dbef":"train_test.head(5)","c1f0ff59":"\ntrain_test.drop(['Cabin'],axis=1,inplace=True)\ntrain_test.drop(['Embarked'],axis=1,inplace=True)\ntrain_test.drop(['Sex'],axis=1,inplace=True)\ntrain_test.drop(['Ticket'],axis=1,inplace=True)\ntrain_test.drop(['Name'],axis=1,inplace=True)\ntrain_test.drop(['Person'],axis=1,inplace=True)\n    \ntrain_test.drop(['Title'],axis=1,inplace=True)\ntrain_test.drop(['Sex_female'],axis=1,inplace=True)\ntrain_test.drop(['Sex_male'],axis=1,inplace=True)\n\ntrain_test.drop(['Fare_bin'],axis=1,inplace=True)\ntrain_test.drop(['Age_bin'],axis=1,inplace=True)","93adeb18":"train, test = divide_df(train_test)\n\npd.set_option('display.max_columns',None)\npd.set_option('display.max_rows',None)\ntrain.count()\nprint(train.head(2))","3b800ff8":"train['Survived'].value_counts()","70314920":"# Split x and y\ny=train[\"Survived\"]\nx=train.drop(['PassengerId','Survived'],axis=1)\ny.head(10)","92ec1441":"x.head()","a4e510c6":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=50)","2942c476":"test.head(1)\nx_test=test.drop(['PassengerId'],axis=1)","c5e23f4a":"import numpy as np\nfrom sklearn.model_selection import KFold\nfold_cnt = 10\n#kf = KFold(n_splits=fold_cnt,shuffle=True)\nkf = KFold(n_splits=fold_cnt)\n\n#score_array = np.arange(fold_cnt,dtype=float)\n\nscore_array = pd.DataFrame(columns=['score']) \n\n\n\nall_preds = pd.DataFrame(columns=['p0']) \nall_preds_sum_avg = pd.DataFrame(columns=['avg_predict','sum_predict'])\n\n\ni=0\nfor train_test_index, val_index in kf.split(train):\n    y=(train.iloc[train_test_index])[\"Survived\"]\n    x=train.iloc[train_test_index].drop(['PassengerId','Survived'],axis=1)\n    \n    #rf_model = RandomForestClassifier(criterion='gini', \n    #                                       n_estimators=1100,\n    #                                       max_depth=5,\n    #                                       min_samples_split=4,\n    #                                       min_samples_leaf=5,\n    #                                       max_features='auto',\n    #                                       oob_score=True,\n    #                                       random_state=42,\n    #                                       n_jobs=-1,\n    #                                       verbose=1)\n    \n    rf_model = RandomForestClassifier(max_depth=5,n_estimators=500)\n    rf_model.fit(x,y)\n    \n    y_val=train.iloc[val_index][\"Survived\"]\n    x_val=train.iloc[val_index].drop(['PassengerId','Survived'],axis=1)\n    \n    score=rf_model.score(x_val, y_val)\n    print(score)\n    #if score>0.8:\n    if score>0.0:\n        #score_array[i] = score\n        #score_array.iloc[i][\"score\"]=score\n        #score_array.insert(score)\n        \n        score = {'score':[score]}\n        score_array = pd.concat([score_array, pd.DataFrame(score)], sort=True)\n\n        all_preds[\"p\"+str(i)] = pd.DataFrame(rf_model.predict(x_test))\n        i=i+1\nprint(score_array)\nprint(score_array['score'].mean())\n\nall_preds_sum_avg['sum_predict']=all_preds['p0'] \nall_preds_sum_avg['sum_predict']=all_preds_sum_avg['sum_predict']-all_preds['p0'] \nfor i in range(i): \n    all_preds_sum_avg['sum_predict'] = all_preds_sum_avg['sum_predict'] + all_preds[\"p\"+str(i)]\n\nall_preds_sum_avg['avg_predict'] = all_preds_sum_avg['sum_predict']\/i \nall_preds_sum_avg['avg_predict'] = all_preds_sum_avg['avg_predict'].apply(lambda x: 1 if 0.5 < x else 0)\n\nall_preds_sum_avg.head(10)","86f2cc25":"# Cross validate model with Kfold stratified cross val\n#kfold = StratifiedKFold(n_splits=10)\n# RFC Parameters tunning \n#rf_model = RandomForestClassifier(max_depth=3,n_estimators=100)\n#rf_model.fit(x_train,y_train)","12f83f2d":"#import numpy as np\n#x_test_predict = rf_model.predict(x_test)\n#score = cross_val_score(rf_model,x_test,y_test, cv=5)\n#print(score)\n#print(np.mean(score))\n#print(type(score))\n#rf_model.score(x_test, y_test, sample_weight=None)","17e73c54":"#gs_rf_model.best_params_","f15f5951":"def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n                        n_jobs=-1, train_sizes=np.linspace(.1, 1.0, 5)):\n    \"\"\"Generate a simple plot of the test and training learning curve\"\"\"\n    plt.figure()\n    plt.title(title)\n    if ylim is not None:\n        plt.ylim(*ylim)\n    \n    #plt.set_ylim(1,0)\n    plt.ylim([0.5, 1.1])\n    \n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    plt.grid()\n\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1,\n                     color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    #plt.set_ylim(bottom=0)\n    \n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n             label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n             label=\"Cross-validation score\")\n\n    plt.legend(loc=\"best\")\n    return plt","d2216504":"#kfold = StratifiedKFold(n_splits=10)\n#g = plot_learning_curve(rf_model,\"RF mearning curves\",x_test,y_test,cv=kfold)","1972fbe6":"#predictions_rf = rf_model_best.predict(test)\n#predictions_rf = rf_model.predict(test)","1c4284df":"test_sub=pd.read_csv('..\/input\/titanic\/test.csv')\noutput= pd.DataFrame({'PassengerId':test_sub.PassengerId, 'Survived': all_preds_sum_avg['avg_predict']})\noutput.to_csv('submission_simple_5.csv', index=False)\n#output.head()","f5504611":"## Data Preprocessing","3c7c2024":"## Binning:Fare,Age","829cd6da":"# Random Forest Models","be19a9d4":"## Random Forest","e0edab5f":"## Fequency Table for Categorary Data","4faade0f":"# Conculsion","05ad582e":"## Missing Data","65a50b05":"## Read Data","84f5f9bd":"## Search grid for optimal parameters\nrf_param_grid = {\"max_depth\": [7,10,13],#10\n              \"max_features\": [10,14,20],#14\n              \"min_samples_split\": [7,10, 15],#7\n              \"min_samples_leaf\": [1, 3, 9],#1\n              \"bootstrap\": [False],\n              \"n_estimators\" :[100,150,200],#150\n              \"criterion\": [\"gini\"]}\n\n\ngs_rf_model = GridSearchCV(rf_model,param_grid = rf_param_grid, cv=kfold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n\ngs_rf_model.fit(x,y)\n\nrf_model_best = gs_rf_model.best_estimator_\n\n# Best score\ngs_rf_model.best_score_"}}