{"cell_type":{"ff9d89a9":"code","75d35a9a":"code","97bfddae":"code","55ab46e4":"code","bbad43d5":"code","f209c2fb":"code","704457ce":"code","b2c3a00a":"code","31fa3cf4":"code","509919cf":"code","ca37d4e8":"code","8dcf5efd":"code","308712fe":"code","8489cc69":"code","d63b3b61":"code","cae5f7a3":"code","57613c4e":"code","bba492e5":"code","c337d58b":"code","2a68ea82":"code","f8651de6":"code","a7598fdc":"code","56b23b2e":"code","706b015f":"code","961b28e5":"code","0d20d4f7":"code","03f99e89":"code","4062de7c":"code","700cb782":"code","f558816c":"code","f1c3b30f":"code","38e8a3fe":"code","4a6668f2":"code","f620eada":"code","e1d79dfc":"code","d20e1977":"code","83b50ef8":"code","b7fcd1c9":"code","459a7384":"code","042b46b9":"code","14424812":"code","6feb0589":"code","42ca7788":"code","46f85a0c":"code","679ea566":"code","f8becbe4":"code","cc3ccec6":"code","2aed5292":"code","c4fbb538":"code","483b9f28":"code","11917eac":"code","0ef4dcc2":"code","1bd14aba":"code","5b300b06":"code","74dc48ef":"code","b1f9c0f2":"code","bfd0910f":"code","053c8afe":"code","bada69c1":"code","489f167f":"code","c3c658e4":"code","c402c83e":"markdown","7c5dc5c1":"markdown","6fbcde7c":"markdown","fdb8e1f8":"markdown","f7a9b25b":"markdown","397e4018":"markdown","3a421595":"markdown","0cbb9f6f":"markdown","64185a16":"markdown","599b2fbd":"markdown","93d98ddb":"markdown","455d3fd8":"markdown","5bae957d":"markdown","27a340c5":"markdown","fc87040a":"markdown","6bf23ad1":"markdown","f3692ce7":"markdown","a488a4ca":"markdown","cbc19145":"markdown","aba3986d":"markdown","bf30318b":"markdown","5b9f9a62":"markdown","8647dc1c":"markdown","9b1cddd1":"markdown","46f53cb5":"markdown","b459877c":"markdown","7bc97008":"markdown","d8803225":"markdown","ac91ce87":"markdown","d8658d81":"markdown","d38ea913":"markdown","9237ed7d":"markdown","010d811b":"markdown","a45f4577":"markdown","82b1f239":"markdown","d3000155":"markdown","ecc07957":"markdown","98dc383e":"markdown","f8311efd":"markdown","bb25ecce":"markdown","e15a79b4":"markdown","8a086ffb":"markdown","77b38c25":"markdown","93dc1e2f":"markdown","52646d71":"markdown","a8ae0e46":"markdown","bc3582ef":"markdown","e9909513":"markdown","76ffb3a8":"markdown","b6e06129":"markdown","e064e74c":"markdown"},"source":{"ff9d89a9":"from IPython.display import clear_output\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\nimport os\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')\nprint(os.listdir(\".\/\"))","75d35a9a":"test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\n#check ids.\nprint('test  min\\t',test.Id.min())\nprint('test  max\\t',test.Id.max())\nprint('train min\\t',train.Id.min())\nprint('train max\\t',train.Id.max())\nprint('--')\nprint('min sale price\\t',train.SalePrice.max())\nprint('max sale price\\t',train.SalePrice.min())\nprint('count sale price',train.SalePrice.count())\n\nplt.figure(figsize=(10,1))\nsns.distplot(train.SalePrice)\nplt.legend(['Sale Price'])\nplt.axis('off')","97bfddae":"plt.figure(figsize=(10,3))\nsns.scatterplot(  x=\"GrLivArea\", y=\"SalePrice\",data=train)\nplt.legend(['GrLivArea x Sale Price'])\nplt.axis('on')","55ab46e4":"train = train[train.GrLivArea < 4000]\nplt.figure(figsize=(10,3))\nsns.scatterplot(  x=\"GrLivArea\", y=\"SalePrice\",data=train)\nplt.legend(['GrLivArea x Sale Price'])\nplt.axis('on')","bbad43d5":"train_id = train.Id\ntest_id = test.Id\ndata = train.copy()\ntrain = train[['Id','SalePrice']]\ndata.drop(\"SalePrice\", axis = 1, inplace = True)\ndata =  pd.concat([data,test],axis=0,sort=False)\ndata = data.reset_index(drop=True)\ndata.describe()","f209c2fb":"data.MSSubClass = data.MSSubClass.astype(str)\nmsSubClass= np.unique(data.MSSubClass.values)\nfor sub_class in msSubClass:\n  if \"SC\" not in sub_class:\n    data.loc[data[\"MSSubClass\"] == sub_class,\"MSSubClass\"] = \"SC\"+sub_class\ndata.OverallQual = data.OverallQual.astype(str)\noverallQual= np.unique(data.OverallQual.values)\nfor overall_qual in overallQual:\n  if \"OQ\" not in overall_qual:\n    data.loc[data[\"OverallQual\"] == overall_qual,\"OverallQual\"] = \"OQ\"+overall_qual\n\n#OverallCond : classifica\u00e7\u00e3o geral das condi\u00e7\u00f5es\ndata.OverallCond = data.OverallCond.astype(str)\noverallCond= np.unique(data.OverallCond.values)\nfor overall_cond in overallCond:\n  if \"OC\" not in overall_cond:\n    data.loc[data[\"OverallCond\"] == overall_cond,\"OverallCond\"] = \"OC\"+overall_cond\n\nprint('MSSubClass:',np.unique(data.MSSubClass.values))\nprint('--')\nprint('OverallQual:',np.unique(data.OverallQual.values))\nprint('--')\nprint('OverallCond:',np.unique(data.OverallCond.values))\ndata = data.reset_index(drop=True)","704457ce":"print(\"dtypes:\",data.dtypes.unique())\nquantitative_columns = [f for f in data.columns if data.dtypes[f] != 'object']\nqualitative_columns = [f for f in data.columns if data.dtypes[f] == 'object']\nquantitative_columns.pop(0)\nprint('qualitative columns:',qualitative_columns)\nprint('quantitative columns:',quantitative_columns)","b2c3a00a":"total=data.isnull().sum().sort_values(ascending=False)\npercent=(data.isnull().sum()\/data.isnull().count()).sort_values(ascending=False)\nmissing=pd.concat([total,percent], axis=1,keys=['Total','%'])\nmissing.head(30)","31fa3cf4":"data.Alley.mode()\ndata.Alley.fillna('NA', inplace=True) #No alley access\nplt.figure(figsize=(4,2))\nsns.barplot(x=data.Alley, y=train.SalePrice)\nplt.axis('on')","509919cf":"data.LotFrontage.mode()\ndata.LotFrontage.fillna(data.LotFrontage.median(), inplace=True)\ndata.LotFrontage\nplt.figure(figsize=(10,3))\nsns.distplot(data.LotFrontage, hist_kws={'alpha':0.5}, label='LotFrontage')\nplt.legend()","ca37d4e8":"data.MasVnrType.mode()\ndata.MasVnrType.fillna('NA', inplace=True)\nplt.figure(figsize=(8,2))\nsns.barplot(x=data.MasVnrType, y=train.SalePrice)\nplt.axis('on')","8dcf5efd":"data.MasVnrArea.mode()\ndata.MasVnrArea.fillna(0.0, inplace=True)\nplt.figure(figsize=(10,3))\nsns.distplot(data.MasVnrArea, hist_kws={'alpha':0.4}, label='MasVnrArea')\nplt.legend()","308712fe":"data.BsmtQual.mode()\ndata.BsmtQual.fillna('NA', inplace=True)\nplt.figure(figsize=(12,2))\nsns.barplot(x=data.BsmtQual, y=train.SalePrice)","8489cc69":"data.BsmtCond.mode()\ndata.BsmtCond.fillna('NA', inplace=True)\nplt.figure(figsize=(12,2))\nsns.barplot(x=data.BsmtCond, y=train.SalePrice)","d63b3b61":"data.BsmtExposure.mode()\ndata.BsmtExposure.fillna('NA', inplace=True)\nplt.figure(figsize=(10,2))\nsns.barplot(x=data.BsmtExposure, y=train.SalePrice)","cae5f7a3":"data.BsmtFinType1.mode()\ndata.BsmtFinType1.fillna('NA', inplace=True)\nplt.figure(figsize=(10,2))\nsns.barplot(x=data.BsmtFinType1, y=train.SalePrice)","57613c4e":"data.BsmtFinSF1.mode()\ndata.BsmtFinSF1.fillna(0, inplace=True)\nplt.figure(figsize=(10,3))\nsns.distplot(data.BsmtFinSF1, hist_kws={'alpha':0.5}, label='BsmtFinSF1')\nplt.legend()","bba492e5":"data.BsmtFinType2.mode()\ndata.BsmtFinType2.fillna('NA', inplace=True)\nplt.figure(figsize=(10,2))\nsns.barplot(x=data.BsmtFinType2, y=train.SalePrice)","c337d58b":"data.Electrical.mode()\ndata.Electrical.fillna('SBrkr', inplace=True)\nplt.figure(figsize=(10,2))\nsns.barplot(x=data.Electrical, y=train.SalePrice)","2a68ea82":"data.FireplaceQu.mode()\ndata.FireplaceQu.fillna('NA', inplace=True)\nplt.figure(figsize=(10,2))\nsns.barplot(x=data.FireplaceQu, y=train.SalePrice)","f8651de6":"data.GarageType.mode()\ndata.GarageType.fillna('NA', inplace=True)\nplt.figure(figsize=(10,2))\nsns.barplot(x=data.GarageType, y=train.SalePrice)","a7598fdc":"data.GarageYrBlt = data.GarageYrBlt.fillna(data.YearBuilt)#, inplace=True)\nplt.figure(figsize=(10,2))\nsns.scatterplot(x=data.GarageYrBlt, y=train.SalePrice)","56b23b2e":"data.GarageFinish.mode()\ndata.GarageFinish.fillna('NA', inplace=True)\nplt.figure(figsize=(10,2))\nsns.barplot(x=data.GarageFinish, y=train.SalePrice)","706b015f":"data.GarageQual.mode()\ndata.GarageQual.fillna('NA', inplace=True)\nplt.figure(figsize=(10,2))\nsns.barplot(x=data.GarageQual, y=train.SalePrice)","961b28e5":"data.GarageCond.mode()\ndata.GarageCond.fillna('NA', inplace=True)\nplt.figure(figsize=(10,2))\nsns.barplot(x=data.GarageCond, y=train.SalePrice)","0d20d4f7":"data.PoolQC.mode()\ndata.PoolQC.fillna('NA', inplace=True)\nplt.figure(figsize=(10,2))\nsns.barplot(x=data.PoolQC, y=train.SalePrice)","03f99e89":"data.Fence.mode()\ndata.Fence.fillna('NA', inplace=True)\nplt.figure(figsize=(10,2))\nsns.barplot(x=data.Fence, y=train.SalePrice)","4062de7c":"data.MiscFeature.mode()\ndata.MiscFeature.fillna('NA', inplace=True)\nplt.figure(figsize=(10,2))\nsns.barplot(x=data.MiscFeature, y=train.SalePrice)","700cb782":"for col in  quantitative_columns:\n  data[col].mode()\n  data[col].fillna(0, inplace=True)","f558816c":"data_corr = data[:train.shape[0]].copy() \ndata_corr = data_corr[quantitative_columns]\ndata_corr['SalePrice']  = train.SalePrice.values\ndata_corr = data_corr.reset_index(drop=True)","f1c3b30f":"kendall = data_corr.corr(\"kendall\")\nkendall.style.format(\"{:.2}\").background_gradient()","38e8a3fe":"best_kendall =  dict((k,v) for k,v in (kendall['SalePrice'].sort_values(ascending=False).to_dict()).items() if v >.1)\nbest_kendall","4a6668f2":"spearman = data_corr.corr(\"spearman\")\nspearman.style.format(\"{:.2}\").background_gradient(cmap=plt.get_cmap('OrRd'))","f620eada":"best_spearman =  dict((k,v) for k,v in (spearman['SalePrice'].sort_values(ascending=False).to_dict()).items() if v >.1)\nbest_spearman #best_kendall","e1d79dfc":"pearson= data_corr.corr(\"pearson\")\npearson.style.format(\"{:.2}\").background_gradient(cmap=plt.get_cmap('PuRd'))","d20e1977":"best_pearson =  dict((k,v) for k,v in (pearson['SalePrice'].sort_values(ascending=False).to_dict()).items() if v >.1)\nbest_pearson #best_spearman #best_kendall","83b50ef8":"cols =  [k for k,v in best_kendall.items()]+[k for k,v in best_pearson.items()]+[k for k,v in best_spearman.items()]\ncols = set(cols)\nlen(cols),len(best_kendall),len(best_pearson),len(best_spearman)","b7fcd1c9":"cols","459a7384":"best_columns=['GrLivArea',\n 'GarageCars',\n 'TotalBsmtSF',\n 'GarageArea',\n '1stFlrSF',\n 'FullBath',\n 'TotRmsAbvGrd',\n 'YearBuilt',\n 'YearRemodAdd',\n 'GarageYrBlt',\n 'MasVnrArea',\n 'Fireplaces',\n 'BsmtFinSF1',\n 'LotFrontage',\n 'OpenPorchSF',\n 'WoodDeckSF']\nfor key in cols:\n    #if ((value>=0.3175) & (value<0.9)) | (value<=-0.315):\n    best_columns.append(key)\nbest_columns ","042b46b9":"total=data.isnull().sum().sort_values(ascending=False)\npercent=(data.isnull().sum()\/data.isnull().count()).sort_values(ascending=False)\nmissing=pd.concat([total,percent], axis=1,keys=['Total','%'])\n\nmissing[missing['%']>0].head(30)","14424812":"data.SaleType.mode()\ndata.SaleType.fillna('Oth', inplace=True)\t\nplt.figure(figsize=(12,2))\nsns.barplot(x=data.SaleType, y=train.SalePrice)","6feb0589":"data.KitchenQual.mode()\ndata.KitchenQual.fillna('TA', inplace=True)\nplt.figure(figsize=(5,2))\nsns.barplot(x=data.KitchenQual, y=train.SalePrice)","42ca7788":"data.Exterior1st.mode()\ndata.Exterior1st.fillna('VinylSd', inplace=True)\nplt.figure(figsize=(20,2))\nsns.barplot(x=data.Exterior1st, y=train.SalePrice)","46f85a0c":"data.Exterior2nd.mode()\ndata.Exterior2nd.fillna('VinylSd', inplace=True)\t\nplt.figure(figsize=(20,2))\nsns.barplot(x=data.Exterior2nd, y=train.SalePrice)","679ea566":"data.Utilities.mode()\ndata.Utilities.fillna('AllPub', inplace=True)\t\nplt.figure(figsize=(3,2))\nsns.barplot(x=data.Utilities, y=train.SalePrice)","f8becbe4":"data.Functional.mode()\ndata.Functional.fillna('Typ', inplace=True)\t\nplt.figure(figsize=(8,2))\nsns.barplot(x=data.Functional, y=train.SalePrice)","cc3ccec6":"data.MSZoning.mode()\ndata.MSZoning.fillna('RL', inplace=True)\t\nplt.figure(figsize=(10,2))\nsns.barplot(x=data.MSZoning, y=train.SalePrice)","2aed5292":"total=data.isnull().sum().sort_values(ascending=False)\npercent=(data.isnull().sum()\/data.isnull().count()).sort_values(ascending=False)\nmissing=pd.concat([total,percent], axis=1,keys=['Total','%'])\nmissing[missing['%']>0].head(30)","c4fbb538":"data.describe().transpose()","483b9f28":"size = train.shape[0]\norig_label = train.SalePrice.copy()\nlabel = train.SalePrice.values","11917eac":"train = data[:size]\ntrain['SalePrice']  = orig_label.values\nlabel = train.SalePrice.values\ntrain.drop(\"SalePrice\", axis = 1, inplace = True)\ntest = data[size:]\ntrain = train.reset_index(drop=True)\ntest = test.reset_index(drop=True)\ntrain.head(3)","0ef4dcc2":"test.shape,train.shape","1bd14aba":"best_columns = list(set(best_columns))\nbest_columns.remove(\"SalePrice\")\nbest_columns","5b300b06":"train[best_columns]","74dc48ef":"feature_columns = []\nfor column_name in  np.unique(best_columns):#quantitative_columns:\n  feature_columns.append(tf.feature_column.numeric_column(column_name))\n\ndef one_hot_cat_column(feature_name, vocab):\n  return tf.feature_column.indicator_column( tf.feature_column.categorical_column_with_vocabulary_list(feature_name, vocab))\n\nfor column_name in qualitative_columns:\n  #vocabulary =np.unique(train[qualitative_columns[0]].values)\n  vocabulary = train[column_name].unique()\n  categorical_column =one_hot_cat_column(column_name,vocabulary)\n  feature_columns.append(categorical_column)\n\nprint('feature_columns:\\t',len(feature_columns))\nprint('feature_columns:\\t',feature_columns)\ntrain[best_columns].head(1)","b1f9c0f2":"train.interpolate(method='linear',inplace=True)\ntest.interpolate(method='linear',inplace=True)","bfd0910f":"batch_size = 1\n\n#boost_testimator  = tf.estimator.BoostedTreesRegressor(feature_columns=feature_columns,max_depth=10, learning_rate=0.1, l1_regularization=0.1, l2_regularization=0.1, n_batches_per_layer=1,n_trees=700)\nboost_testimator  = tf.estimator.BoostedTreesRegressor(feature_columns=feature_columns,max_depth=10, learning_rate=0.1,n_batches_per_layer=1,n_trees=3000)\n\nepochs = 1\ndef input_estimator(xdata,ydata,epochs=None,shuffle=True):\n  def input_fn():\n    dataset = tf.data.Dataset.from_tensor_slices((dict(xdata), ydata))\n    if shuffle:\n        dataset = dataset.shuffle(len(ydata))\n    dataset = dataset.repeat(epochs)\n    dataset = dataset.batch(len(ydata))\n    return dataset\n  return input_fn\nboost_testimator.train(input_estimator(train,label),max_steps=30)\nclear_output()","053c8afe":"results = boost_testimator.evaluate(input_estimator(train,label,epochs=1,shuffle=False))\nclear_output()\npd.Series(results).to_frame()\nprint(pd.Series(results))","bada69c1":"predict_input_fn = lambda: tf.data.Dataset.from_tensors(dict(test))\npreds = np.array([p['predictions'][0] for p in boost_testimator.predict(predict_input_fn)])","489f167f":"preds.shape,test.shape","c3c658e4":"submission = pd.DataFrame({\"ID\" : test_id, \"SalePrice\" : preds})\nsubmission.to_csv(\"prediction_values_corr_bruno.csv\", index=False)\nsubmission.head(1)","c402c83e":"**MasVnrType**: Tipo de alvenaria da fachada\n1.        **BrkCmn**\tTijolo \/ Brick Common\n1.        **BrkFace**\tCara de Tijolo \/ Brick Face\n1.        **CBlock**\tConcreto \/ Cinder Block\n1.        **None**\t\tNone\n1.        **Stone**\t    Pedra \/Stone","7c5dc5c1":"**Utilities**: Tipo de utilit\u00e1rios dispon\u00edveis\n*        AllPub\tAll public Utilities (E,G,W,& S)\t\n*        NoSewr\tElectricity, Gas, and Water (Septic Tank)\n*        NoSeWa\tElectricity and Gas Only\n*        ELO\tElectricity only","6fbcde7c":"**LotFrontage:** Metros da rua concetados \u00e0 propriedade.","fdb8e1f8":"**Exterior2nd**: Exterior covering on house (if more than one material)\n*        AsbShng\tAsbestos Shingles\n*        AsphShn\tAsphalt Shingles\n*        BrkComm\tBrick Common\n*        BrkFace\tBrick Face\n*        CBlock\tCinder Block\n*        CemntBd\tCement Board\n*        HdBoard\tHard Board\n*        ImStucc\tImitation Stucco\n*        MetalSd\tMetal Siding\n*        Other\tOther\n*        Plywood\tPlywood\n*        PreCast\tPreCast\n*        Stone\tStone\n*        Stucco\tStucco\n*        VinylSd\tVinyl Siding\n*        Wd Sdng\tWood Siding\n*        WdShing\tWood Shingles","f7a9b25b":"**KitchenQual**: Kitchen quality\n*        Ex\tExcellent\n*        Gd\tGood\n*        TA\tTypical\/Average\n*        Fa\tFair\n*        Po\tPoor","397e4018":"> #### Drop outliers  (update or drop)","3a421595":"O autor do conjunto de dados recomenda remover todas as casas com \n**GrLivArea** com mais de 4.000 metros quadrados, pois esses pontos no conjunto de dados s\u00e3o discrepantes.","0cbb9f6f":"https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/data?select=data_description.txt\n\nhttps:\/\/www.tensorflow.org\/api_docs\/python\/tf\/estimator\/BoostedTreesRegressor\n\nhttp:\/\/blog.datadive.net\/interpreting-random-forests\/\n\nhttps:\/\/www.tensorflow.org\/tutorials\/estimator\/boosted_trees\n\nhttps:\/\/www.tensorflow.org\/tutorials\/estimator\/boosted_trees_model_understanding\n\nhttps:\/\/medium.com\/@dineshmadhup_75545\/comparison-of-tensorflow-and-random-forest-model-with-python-92a475f84faa\n\nhttps:\/\/www.kaggle.com\/serigne\/stacked-regressions-top-4-on-leaderboard\n\n","64185a16":"**GarageFinish**: Acabamento interior da garagem\n*        Fin\tFinished\n*        RFn\tRough Finished\t\n*        Unf\tUnfinished\n*        NA\tNo Garage","599b2fbd":"**SaleType**: Type of sale\t\t\n*        WD \tWarranty Deed - Conventional\n*        CWD\tWarranty Deed - Cash\n*        VWD\tWarranty Deed - VA Loan\n*        New\tHome just constructed and sold\n*        COD\tCourt Officer Deed\/Estate\n*        Con\tContract 15% Down payment regular terms\n*        ConLw\tContract Low Down payment and low interest\n*        ConLI\tContract Low Interest\n*        ConLD\tContract Low Down\n*        Oth\tOther","93d98ddb":"> ## DEPENDENCIES","455d3fd8":"**Electrical**: Electrical system\n*        SBrkr\tStandard Circuit Breakers & Romex\n*        FuseA\tFuse Box over 60 AMP and all Romex wiring (Average)\t\n*        FuseF\t60 AMP Fuse Box and mostly Romex wiring (Fair)\n*        FuseP\t60 AMP Fuse Box and mostly knob & tube wiring (poor)\n*        Mix\tMixed","5bae957d":"Dados\/Colunas  -  Quantitativos","27a340c5":"**BsmtExposure:** Paredes subterr\u00e2neas no n\u00edvel da entrada ou do jardim\n*        Gd\tGood Exposure\n*        Av\tAverage Exposure (split levels or foyers typically score average or above)\t\n*        Mn\tMimimum Exposure\n*        No\tNo Exposure\n*        NA\tNo Basement","fc87040a":"> # Data Cleaning","6bf23ad1":"**GarageCond**: Condi\u00e7\u00f5es da Garagem\n*        Ex\tExcellent\n*        Gd\tGood\n*        TA\tTypical\/Average\n*        Fa\tFair\n*        Po\tPoor\n*        NA\tNo Garage","f3692ce7":"check Missing data","a488a4ca":"GarageYrBlt: Ano de constru\u00e7\u00e3o da garagem","cbc19145":"> ###  Existem 2915  conjuntos de treinamento\nEstat\u00edstica descritiva para idenificar tend\u00eancias centrais, dispers\u00f5es e forma da distribui\u00e7\u00e3o.","aba3986d":"**OverallQual** : Qualidade geral do material e acabamento\n*        10\tVery Excellent\n*        9\tExcellent\n*        8\tVery Good\n*        7\tGood\n*        6\tAbove Average\n*        5\tAverage\n*        4\tBelow Average\n*        3\tFair\n*        2\tPoor\n*        1\tVery Poor","bf30318b":"**MiscFeature**: Recurso variado n\u00e3o coberto em outras categorias\t\n*        Elev\tElevator\n*        Gar2\t2nd Garage (if not described in garage section)\n*        Othr\tOther\n*        Shed\tShed (over 100 SF)\n*        TenC\tTennis Court\n*        NA\tNone","5b9f9a62":"**FireplaceQu**: Qualidade da lareira\n*        Ex\tExcellent - Exceptional Masonry Fireplace\n*        Gd\tGood - Masonry Fireplace in main level\n*        TA\tAverage - Prefabricated Fireplace in main living area or Masonry Fireplace in basement\n* \t\t\t\t\t- Lareira pr\u00e9-fabricada na sala principal ou lareira de alvenaria no por\u00e3o\n*        Fa\tFair - Prefabricated Fireplace in basement\n* \t\t\t\t - Pr\u00e9-fabricada no por\u00e3o\n*        Po\tPoor - Ben Franklin Stove\n*        NA\tNo Fireplace","8647dc1c":"Voltando com os dados ...","9b1cddd1":"*pseudo evaluate*","46f53cb5":"Missing Data again verify  \/ Verificar se ainda temos problemas ","b459877c":"**Functional**: Home functionality (Assume typical unless deductions are warranted)\n*        Typ\tTypical Functionality\n*        Min1\tMinor Deductions 1\n*        Min2\tMinor Deductions 2\n*        Mod\tModerate Deductions\n*        Maj1\tMajor Deductions 1\n*        Maj2\tMajor Deductions 2\n*        Sev\tSeverely Damaged\n*        Sal\tSalvage only","7bc97008":"# Feature Engeneering\n","d8803225":"**Alley:** Tipo de beco de acesso \u00e0 propriedade\n1. **Grvl**\tGravel\n1. **Pave**\tPaved\n1. **Noaa**\tNo alley access\t\n","ac91ce87":"* max_depth=10\n* learning_rate=0.1\n* n_batches_per_layer=1\n* n_trees=3000","d8658d81":"Obtendo colunas com valores quantitativos e qualitativos.","d38ea913":"# REFERENCIES","9237ed7d":"Obtendo as previs\u00f5es do estimator...","010d811b":"**BsmtCond**: Condi\u00e7\u00e3o geral do por\u00e3o\n*        Ex\tExcellent\n*        Gd\tGood\n*        TA\tTypical - slight dampness allowed\n*        Fa\tFair - dampness or some cracking or settling\n*        Po\tPoor - Severe cracking, settling, or wetness\n*        NA\tNo Basement","a45f4577":"* **BsmtFullBath** : banheiros completos no por\u00e3o\n* **GarageArea** : tamanho da garagem em metro quadrado.\n* **GarageCars** : tamanho da garagem em capacidade do carro\n* **TotalBsmtSF** : tamanho total em metros quadrados da \u00e1rea do por\u00e3o","82b1f239":"**GarageType**: Tipo\/Localiza\u00e7\u00e3o da garagem\t\n*        Types\tMore than one type of garage\n*        Attchd\tAttached to home\n*        Basment\tBasement Garage\n*        BuiltIn\tBuilt-In (Garage part of house - typically has room above garage)\n*        CarPort\tCar Port\n*        Detchd\tDetached from home\n*        NA\tNo Garage","d3000155":"**GarageQual**: Qualidade da Garagem\n*        Ex\tExcellent\n*        Gd\tGood\n*        TA\tTypical\/Average\n*        Fa\tFair\n*        Po\tPoor\n*        NA\tNo Garage","ecc07957":"**Fence**: Qualidade da Cerca\t\t\n*        GdPrv\tGood Privacy\n*        MnPrv\tMinimum Privacy\n*        GdWo\tGood Wood\n*        MnWw\tMinimum Wood\/Wire\n*        NA\tNo Fence","98dc383e":"*Best columns para usarmos em nossa predi\u00e7\u00e3o.*","f8311efd":"**BsmtFinType1: ** Qualidade da \u00e1rea acabada do por\u00e3o\n*        GLQ\tGood Living Quarters\n*        ALQ\tAverage Living Quarters\n*        BLQ\tBelow Average Living Quarters\t\n*        Rec\tAverage Rec Room\n*        LwQ\tLow Quality\n*        Unf\tUnfinshed\n*        NA\tNo Basement","bb25ecce":"BsmtFinSF1: Metro quadrado com acabamento tipo 1","e15a79b4":"# Hyperparameter tuning","8a086ffb":"**PoolQC**: Qualidade da Piscina\n*        Ex\tExcellent\n*        Gd\tGood\n*        TA\tAverage\/Typical\n*        Fa\tFair\n*        NA\tNo Pool","77b38c25":"## Correlation Matrix (heatmap)\n\n*Como nosso dataset possui colunas, precisamos saber a correla\u00e7\u00e3o entre as colunas.*\n","93dc1e2f":"**Exterior1st**: Exterior covering on house\n*        AsbShng\tAsbestos Shingles\n*        AsphShn\tAsphalt Shingles\n*        BrkComm\tBrick Common\n*        BrkFace\tBrick Face\n*        CBlock\tCinder Block\n*        CemntBd\tCement Board\n*        HdBoard\tHard Board\n*        ImStucc\tImitation Stucco\n*        MetalSd\tMetal Siding\n*        Other\tOther\n*        Plywood\tPlywood\n*        PreCast\tPreCast\t\n*        Stone\tStone\n*        Stucco\tStucco\n*        VinylSd\tVinyl Siding\n*        Wd Sdng\tWood Siding\n*        WdShing\tWood Shingles","52646d71":"# House Prices: Advanced Regression Techniques\n\n*O dataset desta competi\u00e7\u00e3o demonstra como as negocia\u00e7\u00f5es influenciam diretamente nos pre\u00e7os do que o n\u00famero de quartos ou uma cerca branca.\nCom 79 vari\u00e1veis que descrevem \"todos\" os aspectos de casas residenciais, essa competi\u00e7\u00e3o desafia voc\u00ea a* **prever o pre\u00e7o final** **de cada casa.**\n\nPredict sales prices and practice feature engineering, **BoostedTreesRegressor**\n<img src='https:\/\/www.tensorflow.org\/images\/tf_logo_32px.png'  style='float:left;margin-top:-5px;padding-right:10px'\/>\n\n**Estimator:** *High level tools for working with models. \/ Ferramenta de alto n\u00edvel para trabalhar com modelos.*\n","a8ae0e46":"> ## SETUP \/ Data Correlation Analysis  \nverificando alguns valores...","bc3582ef":"**MSZoning**: Identifica a classifica\u00e7\u00e3o geral de zoneamento da venda.\t\n*        A\tAgriculture\n*        C\tCommercial\n*        FV\tFLOATING VILLAGE RESIDENTIAL\n*        I\tIndustrial\n*        RH\tResidential High Density\n*        RL\tResidential Low Density\n*        RP\tResidential Low Density Park \n*        RM\tResidential Medium Density","e9909513":"**BsmtFinType2**: Qualidade da segunda \u00e1rea finalizada (se presente)\n*        GLQ\tGood Living Quarters\n*        ALQ\tAverage Living Quarters\n*        BLQ\tBelow Average Living Quarters\t\n*        Rec\tAverage Rec Room\n*        LwQ\tLow Quality\n*        Unf\tUnfinshed\n*        NA\tNo Basement","76ffb3a8":"**MasVnrArea**: Area de alvenaria por metro quadrado","b6e06129":"**BsmtQual:** Altura do por\u00e3o\n1.        **Ex**\tExcellent (100+ inches)\t\n1.        **Gd**\tGood (90-99 inches)\n1.        **TA**\tTypical (80-89 inches)\n1.        **Fa**\tFair (70-79 inches)\n1.        **Po**\tPoor (<70 inches\n1.        **NA**\tNo Basement","e064e74c":"**Data Clear! **"}}