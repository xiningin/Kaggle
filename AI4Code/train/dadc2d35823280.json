{"cell_type":{"0df2ec04":"code","d48041aa":"code","d6adbc36":"code","de062820":"code","7a6c6ec9":"code","0b1104e7":"code","2438d13c":"code","f683f3e7":"code","7d2bba6a":"code","f8e0f4c7":"code","e0400674":"code","a6cc5299":"code","79093722":"code","5ee5f6e2":"code","a9cf252c":"code","81025612":"code","0ac9096c":"code","fe108d54":"code","2053ad8b":"code","e2950d4b":"code","94183aed":"markdown","a4397c61":"markdown","1f8a0cca":"markdown","6078b58b":"markdown","2063a6e4":"markdown","a5e1152d":"markdown"},"source":{"0df2ec04":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d48041aa":"import tensorflow as tf\n\nmnist = tf.keras.datasets.mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train \/ 255.0, x_test \/ 255.0","d6adbc36":"x_train.shape","de062820":"train_data=pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_data=pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\nsubmission=pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')","7a6c6ec9":"train_data.head()","0b1104e7":"train_data.isnull().sum()","2438d13c":"import seaborn as sns\nsns.countplot(train_data['label'])","f683f3e7":"X_train=train_data.drop('label',axis=1).to_numpy()\/255\ny_train=train_data['label']\ny_train = tf.keras.utils.to_categorical(y_train, num_classes=10)\nfrom sklearn.model_selection import train_test_split\nx_train, x_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1, random_state=2)\n","7d2bba6a":"import matplotlib.pyplot as plt\nfrom numpy.random import randint\nplt.imshow(x_train[randint(1,100)].reshape(28,28))\n","f8e0f4c7":"y_train[1]","e0400674":"model = tf.keras.Sequential([\n    tf.keras.layers.Conv2D(16, 3, padding='same', activation='relu', input_shape=(28,28,1)),\n    tf.keras.layers.MaxPooling2D(),\n    tf.keras.layers.Conv2D(32, 3, padding='same', activation='relu'),\n    tf.keras.layers.MaxPooling2D(),\n    tf.keras.layers.Conv2D(64, 3, padding='same', activation='relu'),\n    tf.keras.layers.MaxPooling2D(),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(1024, activation='relu'),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Dense(10,activation='softmax')\n])\nmodel.summary()","a6cc5299":"x_train=x_train.reshape(-1,28,28,1)\ny_train.shape","79093722":"from keras.preprocessing.image import ImageDataGenerator\nagu=tf.keras.preprocessing.image.ImageDataGenerator(\n    rotation_range=10,\n)\nagu.fit(x_train)","5ee5f6e2":"lr_scheduler = tf.keras.callbacks.ReduceLROnPlateau(factor=0.5, patience=3,\n                                                    verbose=1,\n                                                    min_lr=0.000001,\n                                                   )\n","a9cf252c":"model.compile(loss='sparse_categorical_crossentropy',\n             optimizer='adam',\n             metrics=['accuracy'])","81025612":"model.fit(agu.flow(x_train, y_train, batch_size=64),\n          steps_per_epoch=len(x_train) \/ 64, epochs=30,\n         validation_data = (x_test.reshape(-1,28,28,1),y_test),\n          callbacks=[lr_scheduler],\n         )","0ac9096c":"test_data=test_data.to_numpy()\/255.0\n","fe108d54":"prediction=model.predict_classes(test_data.reshape(-1,28,28,1))\nprediction[:5]","2053ad8b":"submission['Label'] = prediction\nsubmission.to_csv(\"submission.csv\" , index = False)","e2950d4b":"submission.head()","94183aed":"# **data collection**","a4397c61":"# Data analysis and visualization","1f8a0cca":"# Model","6078b58b":"# load _data****","2063a6e4":"# **train-validation split **","a5e1152d":"# agumentation"}}