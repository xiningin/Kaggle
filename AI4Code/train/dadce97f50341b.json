{"cell_type":{"5e5f7852":"code","2e34404d":"code","9248eca9":"code","c0436b85":"code","a5501a96":"code","9d72f247":"code","a80ba140":"code","0a425978":"code","50e15967":"code","528439fa":"code","331527b4":"code","453a1990":"code","cd7df77b":"code","a5571828":"code","c62a4b2d":"code","eeb5e28f":"code","68572efa":"code","333a1bef":"code","2b01648b":"code","2628a2d2":"code","8bf12fcb":"code","a1e01b66":"code","5d6c27a3":"code","69c40b2e":"code","3f2b1253":"code","d8fb8c9e":"code","a0ff39bd":"markdown","221528aa":"markdown","960a0d8d":"markdown","df343c7d":"markdown","ba2f0e85":"markdown","04dbfb12":"markdown","e381505d":"markdown","6775713e":"markdown","7463f6c8":"markdown","68c577df":"markdown","3b6cc1ee":"markdown","f6c65ea3":"markdown"},"source":{"5e5f7852":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os","2e34404d":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9248eca9":"#more imports\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport graphviz\n\nfrom pathlib import Path\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import tree\nfrom sklearn.metrics import confusion_matrix","c0436b85":"path = Path('\/kaggle\/input\/employee-satisfaction-index-dataset\/Employee Satisfaction Index.csv')\ndf = pd.read_csv(path)","a5501a96":"df.head()","9d72f247":"df.isnull().sum(),df.isna().sum()","a80ba140":"df.drop(['Unnamed: 0','emp_id'],axis=1,inplace=True)","0a425978":"df.Dept.unique(),df.location.unique(),df.recruitment_type.unique()","50e15967":"sns.countplot(x = 'Dept',data = df)","528439fa":"sns.countplot(x = 'satisfied',data = df,palette='rocket')","331527b4":"sns.distplot(df['salary'])","453a1990":"correlation = df.corr()\nplt.figure(1,figsize=(10,10))\nsns.heatmap(correlation,annot=True)","cd7df77b":"df.Dept.unique(),df.location.unique(),df.recruitment_type.unique(),df.education.unique()","a5571828":"df.location = df.location.astype('category')\ndf.Dept = df.Dept.astype('category')\ndf.recruitment_type =  df.recruitment_type.astype('category')\ndf.education = df.education.astype('category')","c62a4b2d":"location_d = dict(enumerate(df.location.cat.categories))\nDept_d = dict(enumerate(df.Dept.cat.categories))\nrecruitment_type_d = dict(enumerate(df.recruitment_type.cat.categories))\neducation_d = dict(enumerate(df.education.cat.categories))","eeb5e28f":"df.location = df.location.cat.codes\ndf.Dept = df.Dept.cat.codes\ndf.recruitment_type = df.recruitment_type.cat.codes\ndf.education = df.education.cat.codes","68572efa":"X = df.drop(['satisfied'],axis=1)\ny = df.satisfied","333a1bef":"X_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.2,random_state=0)","2b01648b":"DTmodel = DecisionTreeClassifier().fit(X_train,y_train)","2628a2d2":"DTmodel.score(X_test,y_test)","8bf12fcb":"fig, ax = plt.subplots(figsize=(15, 15))\ntree.plot_tree(DTmodel,fontsize=10,max_depth=3)","a1e01b66":"treedata = tree.export_graphviz(DTmodel,out_file=None,feature_names=X_train.columns,filled=True,rounded=True,special_characters=True,max_depth=4)\ngraph = graphviz.Source(treedata)\ngraph","5d6c27a3":"RFmodel = RandomForestClassifier().fit(X_train,y_train)","69c40b2e":"RFmodel.score(X_test,y_test)","3f2b1253":"test_pred = RFmodel.predict(X_test)\ncm = confusion_matrix(y_test,test_pred)\ncm","d8fb8c9e":"n_features = X.shape[1]\nplt.barh(range(n_features),RFmodel.feature_importances_)\nplt.yticks(np.arange(n_features),df.columns[1:])","a0ff39bd":"that's nice destribution right here.\n\nConverting columns to categorical datatype and i won't use one hot encoding for a reason.","221528aa":"dropping unnecessary columns","960a0d8d":"and feature importance","df343c7d":"Anyway, let's finish notebook with confusion matrix","ba2f0e85":"checking for the head() and null values first","04dbfb12":"train\\test split","e381505d":"emp_id - Unique ID\n\nage - Age\n\nDept - Department\n\nlocation - Employee location\n\neducation - Employee's education status\n\nrecruitment_type - Mode of recruitment\n\njob_level - 1 to 5. The job level of the employee. 1 being the least and 5 being the highest position\n\nrating - 1 to 5. The previous year rating of the employee. 1 being the least and 5 being the highest position\n\nonsite - Has the employee ever went to an onsite location? 0 and 1\n\nawards - No. of awards\n\ncertifications - Is the employee certified?\n\nsalary - Net Salary\n\nsatisfied - Is the employee satisfied with his job?","6775713e":"let's get visual representation of the data","7463f6c8":"**Random Forest Classifier**","68c577df":"DT gives decent visualization how data splits. \nWith random forest we'll get way more variations , but it's usefull to have the initial one.","3b6cc1ee":"Slightly better improvement. Score is low for basic binary classification, probably due to even distribution of generated satisfaction points. It would be different for sure with real-world data.","f6c65ea3":"**Decision Tree**"}}