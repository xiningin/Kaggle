{"cell_type":{"a04b550b":"code","5d01a1f2":"code","a91c3e1f":"code","eb46c716":"code","bc0d803f":"code","02cf9354":"code","f9d15dc7":"code","dcf73486":"code","fa719c76":"code","cd21b9f9":"code","7ab4985b":"code","44c41b2c":"code","dca58ff7":"code","0874a2f1":"code","0b2f6ca1":"code","e7905afd":"code","0d731979":"code","64bcef84":"code","ad8de089":"code","d92d5802":"code","ed3db0be":"code","7c67a313":"code","f6c804f6":"code","6daa75df":"code","42194be7":"code","e3d64a52":"code","062c529b":"code","0386905d":"code","2809bbef":"code","3266b612":"markdown","df2c70ba":"markdown","c8f35ca7":"markdown","2454b728":"markdown","cdb50e00":"markdown","c402e0e5":"markdown","addae9c8":"markdown","4e0460c9":"markdown","4c95b118":"markdown","e3f2eb3a":"markdown","93253f54":"markdown","19a68869":"markdown","5962db3e":"markdown","fe98c26a":"markdown","96e0fa3f":"markdown","e91972aa":"markdown","0d72fa27":"markdown","9b659b74":"markdown","9ad10f1a":"markdown","f172c05d":"markdown","318af835":"markdown","02467102":"markdown","6b5f219e":"markdown","8e3d0ee3":"markdown","e6b976b1":"markdown","362bc41d":"markdown","8988d159":"markdown","4241aa69":"markdown","1399dfe3":"markdown","49107d87":"markdown","f4807ba8":"markdown","b99535f5":"markdown","0f6ef5ae":"markdown","0660c84d":"markdown"},"source":{"a04b550b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\nimport datetime as dt\nfrom pandas.io.json import json_normalize\n\n\n\nfrom plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport cufflinks as cf\ncf.go_offline()","5d01a1f2":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","a91c3e1f":"\"\"\" Format tables \"\"\"\n\ndef format_table(df):\n    df_formatted = df\n    \n    # Format date\n    df_formatted[\"date\"] = df_formatted[\"date\"]\\\n        .apply(lambda x: dt.datetime.strptime(str(x),\"%Y%m%d\"))\n\n    for dict_col_name in [\"device\", \"totals\", \"trafficSource\", \"geoNetwork\"]:\n        df_formatted[dict_col_name] = df_formatted[dict_col_name]\\\n            .apply(lambda x: x.replace('true', 'True').replace('false', 'False'))\\\n            .apply(lambda x: dict(eval(x)))\n        \n    # Explode json columns\n    for col_name in [\"browser\", \"operatingSystem\", \"isMobile\", \"deviceCategory\"]:\n        df_formatted[col_name] = df_formatted[\"device\"]\\\n            .apply(lambda x: x.get(col_name))\n\n    for col_name in [\"visits\", \"hits\", \"pageviews\", \"bounces\", \"newVisits\", \"transactionRevenue\"]:\n        df_formatted[col_name] = df_formatted[\"totals\"]\\\n            .apply(lambda x: float(x.get(col_name) if x.get(col_name) else 0))\n\n    for col_name in [\"campaign\", \"source\", \"medium\", \"keyword\"]:\n        df_formatted[col_name] = df_formatted[\"trafficSource\"]\\\n            .apply(lambda x: x.get(col_name))\n\n    for col_name in [\"continent\", \"subContinent\", \"country\", \"region\"]:\n        df_formatted[col_name] = df_formatted[\"geoNetwork\"]\\\n            .apply(lambda x: x.get(col_name))\n\n    df_formatted = df_formatted.drop(columns=[\"device\", \"totals\", \"trafficSource\", \"geoNetwork\"])    \n    \n    # Add has_bought column\n    df_formatted[\"has_bought\"]=(df_formatted[\"transactionRevenue\"]>0).apply(int)\n    \n    return df_formatted\n\ntrain = format_table(train)\n","eb46c716":"# A simple look at the train set\ntrain.head()","bc0d803f":"print(\"Training set contains %s lines\" % train.shape[0])","02cf9354":"print(\"Probability: {}%\".format(round(100 * train[train['transactionRevenue'] > 0].shape[0] \/ train.shape[0], 2)))","f9d15dc7":"mean = train[train['transactionRevenue'] > 0]\\\n          .agg({'transactionRevenue': 'mean'})['transactionRevenue']\n\nprint(\"Mean basket price if payment: %s\" % round(mean, 2))\n\nmedian = train[train['transactionRevenue'] > 0]\\\n          .agg({'transactionRevenue': 'median'})['transactionRevenue']\n\nprint(\"Mean basket price if payment: %s\" % round(median, 2))","dcf73486":"# Count nb_sales\ntrain_count = train\\\n    .groupby(\"date\", as_index=False)\\\n    .agg({'visitId' : ['count'], 'transactionRevenue' : ['sum']})\\\n    .rename(columns={'visitId': 'nb_visits', 'transactionRevenue': 'total_revenue'})\n\ntrain_count.columns=train_count.columns.droplevel(1)\n\ntrain_count['revenue_per_visit'] = train_count['total_revenue'] \/ train_count['nb_visits']\n\n# Add moving average\nwindow_size = 7 # Weekly seasonality\ntrain_count[\"visits_moving_average\"] = train_count[\"nb_visits\"].rolling(window_size, center=True).sum() \/ window_size\ntrain_count[\"revenue_moving_average\"] = train_count[\"total_revenue\"].rolling(window_size, center=True).sum() \/ window_size\ntrain_count[\"ratio_moving_average\"] = train_count[\"revenue_per_visit\"].rolling(window_size, center=True).sum() \/ window_size","fa719c76":"# Prepare layout for plotting\nlayout = go.Layout(\n    legend = dict(orientation=\"h\")\n)","cd21b9f9":"#Create traces\nlayout.update({\"title\": \"Evolution of number of daily visits over time\"})\n\ntrace_daily = go.Scatter(\n    x = train_count.date,\n    y = train_count.nb_visits,\n    name = 'nb_visits'\n)\ntrace_average = go.Scatter(\n    x = train_count.date,\n    y = train_count.visits_moving_average,\n    name = 'Moving average'\n)\n\ndata = [trace_daily, trace_average]\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='line-mode')","7ab4985b":"layout.update({\"title\": \"Evolution of daily revenues over time\"})\n\ntrace_transactions = go.Scatter(\n    x = train_count.date,\n    y = train_count.total_revenue,\n    name = 'Revenue'\n)\n\ntrace_average = go.Scatter(\n    x = train_count.date,\n    y = train_count.revenue_moving_average,\n    name = 'Moving average'\n)\n\ndata = [trace_transactions, trace_average]\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='line-mode')","44c41b2c":"layout.update({\"title\": \"Evolution of daily SumRevenue\/NbVisits over time\"})\n\n#Create traces\ntrace_daily = go.Scatter(\n    x = train_count.date,\n    y = train_count.revenue_per_visit,\n    name = 'Revenue per visit'\n)\ntrace_average = go.Scatter(\n    x = train_count.date,\n    y = train_count.ratio_moving_average,\n    name = 'Moving average'\n)\n\ndata = [trace_daily, trace_average]\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='line-mode')","dca58ff7":"train[(train['transactionRevenue'] > 0) & (train['transactionRevenue'] < 1000000000)]['transactionRevenue'].iplot(\n    kind='histogram',\n    barmode='stack',\n    bins=1000,\n    histnorm='probability',\n    filename='cufflinks\/customized-histogram',\n    title='transactionRevenue distribution')","0874a2f1":"def plot_metrics_on_type(train, t):\n    \"\"\" Top Part \"\"\"\n    # Daily visits evolutions\n    df = train\\\n        .groupby([\"date\", t], as_index=False)\\\n        .visitId.agg(['count']).reset_index()\\\n        .pivot(index=\"date\", columns=t, values=\"count\")\n    \n    figure = df.iplot(kind='area', fill=True, asFigure=True)\n    figure['layout'].update({'height': 400, 'paper_bgcolor':'#ffffff', 'title': 'Evolution of visits over time per %s' % t})\n    py.iplot(figure)\n    \n    \"\"\" Bottom part \"\"\"\n    # Compare revenues and probability to buy \n    df_revenue_per_type = train[train[\"transactionRevenue\"] > 0]\\\n        .groupby(t)\\\n        .agg({'transactionRevenue': 'mean'})\n    \n    df = train\\\n        .groupby([t], as_index=False)\\\n        .agg({'has_bought': 'mean'}).reset_index()\\\n        .merge(df_revenue_per_type, on=t)\n    \n    trace1 = go.Bar(\n        x=df[t],\n        y=df.has_bought,\n        name='Has_bought'\n    )\n    trace2 = go.Bar(\n        x=df[t],\n        y=df.transactionRevenue,\n        xaxis='x2',\n        yaxis='y2',\n        name='Mean revenue when a payment is done'\n    )\n    \n    # Global repartition of visits\n    df2 = train\\\n        .groupby([t], as_index=False)\\\n        .visitId.agg(['count']).reset_index()\\\n    \n    trace3 = go.Bar(\n        x=df2[t],\n        y=df2[\"count\"],\n        name='Number of visits',\n        xaxis='x3',\n        yaxis='y3',\n    )\n    \n    data = [trace3, trace1, trace2]\n    layout = go.Layout(\n        title=\"%s metrics\" % t,\n        showlegend=False,\n        barmode='group',\n        height=400,\n        xaxis=dict(\n            title='Probability of payment by %s' % t,\n            domain=[0, 0.28],\n            titlefont=dict(\n                size=9,\n            )\n        ),\n        yaxis=dict(\n            domain=[0, 1]\n        ),\n        xaxis2=dict(\n            title='Mean revenue by %s' % t,\n            domain=[0.38, 0.62],\n            titlefont=dict(\n                size=9,\n            )\n        ),\n        yaxis2=dict(\n            domain=[0, 1],\n            anchor='x2'\n        ),\n        xaxis3=dict(\n            title='Number of visits by %s' % t,\n            domain=[0.72, 1],\n            titlefont=dict(\n                size=9,\n            )\n        ),\n        yaxis3=dict(\n            domain=[0, 1],\n            anchor='x3'\n        )\n    )\n    \n    fig = go.Figure(data=data, layout=layout)\n    py.iplot(fig)","0b2f6ca1":"plot_metrics_on_type(train, \"channelGrouping\")","e7905afd":"plot_metrics_on_type(train, \"deviceCategory\")","0d731979":"plot_metrics_on_type(train, \"operatingSystem\")","64bcef84":"plot_metrics_on_type(train, \"continent\")","ad8de089":"#plot_metrics_on_type(train, \"country\") #filter biggest countries first","d92d5802":"df_payment_prob = train\\\n    .groupby(\"newVisits\")\\\n    .agg({\"visitId\": \"count\", \"has_bought\": \"mean\"})\\\n    .reset_index()\n\ndf_transaction_mean_when_payment = \\\n    train[train[\"transactionRevenue\"] > 0]\\\n        .groupby(\"newVisits\")\\\n        .agg({\"transactionRevenue\": \"mean\"})\\\n        .reset_index()\n\ntrace1 = go.Bar(\n    x=df_payment_prob[\"newVisits\"],\n    y=df_payment_prob[\"has_bought\"],\n    name='Payment probability'\n)\n\ntrace2 = go.Bar(\n    x=df_transaction_mean_when_payment[\"newVisits\"],\n    y=df_transaction_mean_when_payment[\"transactionRevenue\"],\n    xaxis='x2',\n    yaxis='y2',\n    name='Mean revenue when payment'\n)\n\ntrace3 = go.Bar(\n    x=df_payment_prob[\"newVisits\"],\n    y=df_payment_prob[\"visitId\"],\n    xaxis='x3',\n    yaxis='y3',\n    name='Number of visits'\n)\n\n\nlayout = go.Layout(\n    title=\"Analysis of newVisits field\",\n    showlegend=False,\n    barmode='group',\n    height=400,\n    xaxis=dict(\n        title='Probability of payment',\n        domain=[0, 0.28]\n    ),\n    yaxis=dict(\n        domain=[0, 1]\n    ),\n    xaxis2=dict(\n        title='Mean revenue when a payment is done',\n        domain=[0.38, 0.62]\n    ),\n    yaxis2=dict(\n        domain=[0, 1],\n        anchor='x2'\n    ),\n    xaxis3=dict(\n        title='Number of visits',\n        domain=[0.72, 1]\n    ),\n    yaxis3=dict(\n        domain=[0, 1],\n        anchor='x3'\n    )\n)\n\ndata = [trace1, trace2, trace3]\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","ed3db0be":"train[(train['transactionRevenue'] < 1000000000)]\\\n    .groupby(\"visitNumber\")\\\n    .agg({\"has_bought\": \"mean\"})\\\n    .iplot(kind='bar', title=\"Probability of payment given visitNumber field\")","7c67a313":"train[(train['transactionRevenue'] > 0) & (train['transactionRevenue'] < 1000000000)]\\\n    .groupby(\"visitNumber\")\\\n    .agg({\"transactionRevenue\": \"mean\"})\\\n    .iplot(kind='bar', title=\"Mean transaction Revenue for visits that led to a payment by visitNumber field\")","f6c804f6":"train\\\n    .groupby(\"hits\")\\\n    .agg({'has_bought':'mean'})\\\n    .iplot(kind=\"bar\", title=\"Probability of payment given the number of hits\")","6daa75df":"train[train[\"transactionRevenue\"] > 0]\\\n    .groupby(\"hits\")\\\n    .agg({'transactionRevenue':'mean'})\\\n    .iplot(kind=\"bar\", title=\"Mean transactionRevenue for visits that led to payments, given the number of hits\")","42194be7":"train\\\n    .groupby(\"pageviews\")\\\n    .agg({'has_bought':'mean'})\\\n    .iplot(kind=\"bar\", title=\"Probability of payment given the number of pageviews\")","e3d64a52":"train[train[\"transactionRevenue\"] > 0]\\\n    .groupby(\"pageviews\")\\\n    .agg({'transactionRevenue':'mean'})\\\n    .iplot(kind=\"bar\", title=\"Mean transactionRevenue for visits that led to payments, given the number of pageviews\")","062c529b":"data = train[['pageviews','hits']]\ndata.corr(method='pearson')","0386905d":"print( \"The test set contains %s lines\" % test.shape[0])","2809bbef":"common_ids = set(test[\"fullVisitorId\"]).intersection(train[\"fullVisitorId\"])\nprint( \"%s visitors IDs are present in bot train and test set. (out of %s)\" % (len(common_ids), len(set(test[\"fullVisitorId\"]))))","3266b612":"## Imports","df2c70ba":"Notes :\n- Peak during Late Fall \/ Early Winter 2017 (Christmas ?)\n- Weekly seasonality (less visits on weekends, easier to see with zoom in functionality)","c8f35ca7":"# Basic first questions <a name=\"chap2\"><\/a>","2454b728":"What's the probability that a visit leads to a payment ? If yes, what's the mean basket price ?","cdb50e00":"This clearly shows that the probability of buying is impacted by previous visits if any, and that the price of the basket if a payment is made is impacted as well. \n","c402e0e5":"Date can have a strong impact on revenue per visit. We can also see that we didn't lose the seasonality, meaning that people are likely to buy more on certain days of the week","addae9c8":"The probability makes sense. The mean basket price however doesn't without any currency information. Not a big deal but it's always nice to have an intuition over what we're handling\n(Update: saw on other kernels that it's in micro$, it makes more sense then. The median being lower than the average, we can expect that there are outliers payments with great amounts)","4e0460c9":"Notes:\n - Spikes during Valentines day and easter\n - rise of average sales during christmas","4c95b118":"## continent field","e3f2eb3a":"## channelGrouping field","93253f54":"Other categories we looked  (Countries, devices used...) at described the source of the visit. These features qualify the visit itself.","19a68869":"# Evolution of visits and sales in time <a name=\"chap3\"><\/a>","5962db3e":"Customers are 3 times more likely to pay on desktops, and are likely to make bigger payments as well.","fe98c26a":"## deviceCategory field","96e0fa3f":"to be continued...","e91972aa":"This looks great ! As we could have guessed the more hits the more likely you are to make a payment. After a certain threshold (hits ~ > 200) we even make out that over 2\/3 of visits led to payment. What about the transactionRevenue of these visits ?","0d72fa27":"The number of visits shows that only Windows, Mac, iOS and Android come out. Between these 4 OS Mac has a far greater probability of payment.","9b659b74":"##\u00a0Load and format","9ad10f1a":"#\u00a0Google Analytics Customer Revenue Prediction EDA\n","f172c05d":"It seems that more hits slightly lead to bigger transactions, and a greater variance in these sums. (You can zoom in the plot)","318af835":"# Analysis of hits &  pageviews <a name=\"chap7\"><\/a>","02467102":"# Transaction revenue distribution <a name=\"chap4\"><\/a>","6b5f219e":"## operatingSystem field","8e3d0ee3":"newVisits = 1 <-> It is not the first time customers join the service.\n\nIt seems than previous visitors are less likely to make a payment and are less generous.\n\nLet's now go further than just the \"newVisits\" info.","e6b976b1":"# Impact of previous visits <a name=\"chap6\"><\/a>","362bc41d":"# Metrics by categories (Device\/continent\/...) <a name=\"chap5\"><\/a>","8988d159":"Same thing for pageviews, which seems normal since pageviews and hits are highly correlated as you can see below\n","4241aa69":"Display channel has far fewer visits but customers are more generous.\n\nReferral has logically a better probability of payment.\n\nSocial channel seems to get boosted in the end of the year while other channels seem stable.","1399dfe3":"This kernel is a simple EDA of the Google Analytics Customer Revenue Prediction train set.\n\nI used Plotly as data plotting tool: Interactive graphs are really useful to explore data!\n\nIt's my first attempt at giving out a Kaggle kernel, feel free to give any advice to get better :)\n\n# Summary\n1. [Some preliminary table formatting](#chap1)\n2. [Basic first questions answered](#chap2)\n3. [Visits metrics over time](#chap3)\n4. [transactionRevenue distribution](#chap4)\n5. [A closer look at each categorical field](#chap5)\n6. [Impact of previous visits](#chap6)\n7. [Impact of hits and pageviews](#chap7)\n8. [A quick look at the test set](#chap8)","49107d87":"As expected the disrtibution is skewed, there are far more small payments than big ones. if we account for the fact that we are trying to predict log of revenues, it shows that small payments are of bigger importance here.","f4807ba8":"There are very few payments from Africa but they are usually bigger than average.\nAmericans are far more likely to buy than the average","b99535f5":"#\u00a0A quick look at the Test set <a name=\"chap8****\"><\/a>","0f6ef5ae":"## country field","0660c84d":"# Some preliminary table formatting <a name=\"chap1\"><\/a>"}}