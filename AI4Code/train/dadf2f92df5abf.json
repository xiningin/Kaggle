{"cell_type":{"0127cfbf":"code","fe4a7d18":"code","55fc957d":"code","393cc3aa":"code","335e3781":"code","d87981f9":"code","29902683":"code","6150cc9a":"code","45a4f510":"code","9cb5d1c8":"code","620a845b":"code","96aaf49e":"code","84002e80":"code","24709c1e":"code","312b7c1e":"code","d2b75122":"code","868ecdb9":"markdown"},"source":{"0127cfbf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fe4a7d18":"data = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\ndata.head()","55fc957d":"data.info()","393cc3aa":"classes = data['Class'].value_counts()\nclasses[0],classes[1]","335e3781":"m = classes[0]\/data.shape[0]\nn = classes[1]\/data.shape[0]\n\n\nprint(\"Percentage of valid cases: \",m*100)\nprint(\"Percentage of fraud cases: \",n*100)","d87981f9":"import matplotlib.pyplot as plt \nclasses.plot(kind = \"bar\")\nplt.xlabel(\"Class\")\nplt.ylabel(\"Number of observartions\")\nplt.title(\"Counts of different classes\")\nplt.show()","29902683":"# Comparison between fraud and non-fraud cases\nplt.scatter(data.loc[data['Class'] == 0]['V11'], data.loc[data['Class'] == 0]['V12'],label='Class #0', alpha=0.5, linewidth=0.15,c='g')\nplt.scatter(data.loc[data['Class'] == 1]['V11'], data.loc[data['Class'] == 1]['V12'],label='Class #1', alpha=0.5, linewidth=0.15,c='r')\nplt.show()\n","6150cc9a":"X = data.drop(['Class'],axis=1)\nY = data['Class']\nprint(X.shape)\nprint(Y.shape)","45a4f510":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score","9cb5d1c8":"X_train,x_test,Y_train,y_test = train_test_split(X,Y,test_size=0.3,random_state=100)\nprint(X_train.shape)\nprint(Y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)\n","620a845b":"ss = StandardScaler()\nX_ = ss.fit_transform(X_train-X_train.mean()\/X_train.std())\nx_ = ss.transform(x_test-x_test.mean()\/x_test.std())\n","96aaf49e":"log_reg = LogisticRegression()\nlog_reg.fit(X_,Y_train)","84002e80":"log_reg.coef_","24709c1e":"log_reg.intercept_","312b7c1e":"#Making predictions\npredictions = log_reg.predict(x_test)\npredictions[:20]","d2b75122":"score = accuracy_score(predictions,y_test)\nprint(\"The accuracy score is: \",score*100)","868ecdb9":"**Implementing through Logistic regression**\n"}}