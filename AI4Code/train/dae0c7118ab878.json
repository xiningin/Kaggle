{"cell_type":{"c981307a":"code","a1fd029d":"code","df8c933f":"code","82bf1c0a":"code","49dab32a":"code","0c15d344":"code","06cbd13a":"code","23e2e48a":"code","3a1d8f30":"code","3e1dfe55":"code","1b18bc7a":"code","f91fbab3":"code","7623f23c":"code","a2d352ee":"code","953fa349":"code","9a043a91":"code","05ba7500":"code","2af1191a":"code","c2a7fb34":"markdown","1412bfd0":"markdown"},"source":{"c981307a":"import numpy as np\nimport pandas as pd","a1fd029d":"games   = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/games.csv')\nplayers = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/players.csv')\nplays   = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/plays.csv')\n\nweek_1  = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week1.csv')\nweek_2  = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week2.csv')\nweek_3  = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week3.csv')\nweek_4  = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week4.csv')\nweek_5  = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week5.csv')\nweek_6  = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week6.csv')\nweek_7  = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week7.csv')\nweek_8  = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week8.csv')\nweek_9  = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week9.csv')\n\nweek_10 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week10.csv')\nweek_11 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week11.csv')\nweek_12 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week12.csv')\nweek_13 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week13.csv')\nweek_14 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week14.csv')\nweek_15 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week15.csv')\nweek_16 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week16.csv')\nweek_17 = pd.read_csv('..\/input\/nfl-big-data-bowl-2021\/week17.csv')","df8c933f":"# make a dataframe of all strong and free safeties for each week\nwk1 = week_1[(week_1[\"position\"]==\"SS\") | (week_1[\"position\"]==\"FS\")]\nwk2 = week_2[(week_2[\"position\"]==\"SS\") | (week_2[\"position\"]==\"FS\")]\nwk3 = week_3[(week_3[\"position\"]==\"SS\") | (week_3[\"position\"]==\"FS\")]\nwk4 = week_4[(week_4[\"position\"]==\"SS\") | (week_4[\"position\"]==\"FS\")]\nwk5 = week_5[(week_5[\"position\"]==\"SS\") | (week_5[\"position\"]==\"FS\")]\nwk6 = week_6[(week_6[\"position\"]==\"SS\") | (week_6[\"position\"]==\"FS\")]\nwk7 = week_7[(week_7[\"position\"]==\"SS\") | (week_7[\"position\"]==\"FS\")]\nwk8 = week_8[(week_8[\"position\"]==\"SS\") | (week_8[\"position\"]==\"FS\")]\nwk9 = week_9[(week_9[\"position\"]==\"SS\") | (week_9[\"position\"]==\"FS\")]\nwk10 = week_10[(week_10[\"position\"]==\"SS\") | (week_10[\"position\"]==\"FS\")]\nwk11 = week_11[(week_11[\"position\"]==\"SS\") | (week_11[\"position\"]==\"FS\")]\nwk12 = week_12[(week_12[\"position\"]==\"SS\") | (week_12[\"position\"]==\"FS\")]\nwk13 = week_13[(week_13[\"position\"]==\"SS\") | (week_13[\"position\"]==\"FS\")]\nwk14 = week_14[(week_14[\"position\"]==\"SS\") | (week_14[\"position\"]==\"FS\")]\nwk15 = week_15[(week_15[\"position\"]==\"SS\") | (week_15[\"position\"]==\"FS\")]\nwk16 = week_16[(week_16[\"position\"]==\"SS\") | (week_16[\"position\"]==\"FS\")]\nwk17 = week_17[(week_17[\"position\"]==\"SS\") | (week_17[\"position\"]==\"FS\")]","82bf1c0a":"# merge all of the week to get a dataframe of every safety on every play\nframes = [wk1,wk2,wk3,wk4,wk5,wk6,wk7,wk8,wk9,wk10,wk11,wk12,wk13,wk14,wk15,wk16,wk17]\nsafeties = pd.concat(frames)\n\n# create a df of safeties whenthe ball is snapped and safeties when the pass arrives\nsafeties_snap = safeties[safeties[\"event\"] == \"ball_snap\"]\nsafeties_arrive = safeties[safeties[\"event\"] == \"pass_arrived\"]","49dab32a":"# to find which safeties are in the box, we will only consider roughly the middle thrid of the field, between 35.5 and 17.75 on the y axis\nsafeties_snap = safeties_snap[(safeties_snap[\"y\"] <= 35.5) & (safeties_snap[\"y\"] >= 17.75)]","0c15d344":"# merge the saftey data with the play data\ns_play_data = plays.merge(safeties_snap, on=['playId', 'gameId'])\n\n# calculate the distance from line of scrimmage of each safety \ndistance = abs(s_play_data.absoluteYardlineNumber - s_play_data.x)\ns_play_data[\"LOSdistance\"] = abs(s_play_data.absoluteYardlineNumber - s_play_data.x)","06cbd13a":"# of the safties in the center third, only consider those less than 6 yards off of the line of srimmage\nboxSafeties = s_play_data[s_play_data.LOSdistance < 6.0]","23e2e48a":"# clean dataframe of when safeties arrive \narrive = safeties_arrive.x.to_frame()\narrive.rename(columns={'x':'arrive_x'}, inplace=True,errors='ignore')\narrive[\"arrive_y\"] = safeties_arrive.y\narrive = safeties_arrive.drop(safeties_arrive.columns.difference(['gameId','playId', 'x','y', 'nflId', 'displayName', 'epa']), 1)\narrive.rename(columns={'x':'arrive_x', 'y':'arrive_y'}, inplace=True,errors='ignore')\narrive\nsafety_info = boxSafeties.merge(arrive, on=['playId', 'gameId', 'nflId'])","3a1d8f30":"# create a dataframe of all of the pass catchers\nr1 = week_1[week_1.route.notna()]\nr2 = week_2[week_2.route.notna()]\nr3 = week_3[week_3.route.notna()]\nr4 = week_4[week_4.route.notna()]\nr5 = week_5[week_5.route.notna()]\nr6 = week_6[week_6.route.notna()]\nr7 = week_7[week_7.route.notna()]\nr8 = week_8[week_8.route.notna()]\nr9 = week_9[week_9.route.notna()]\nr10 = week_10[week_10.route.notna()]\nr11 = week_11[week_11.route.notna()]\nr12 = week_12[week_12.route.notna()]\nr13 = week_13[week_13.route.notna()]\nr14 = week_14[week_14.route.notna()]\nr15 = week_15[week_15.route.notna()]\nr16 = week_16[week_16.route.notna()]\nr17 = week_17[week_17.route.notna()]","3e1dfe55":"# merge all of the week to get a dataframe of every safety on every play\nframes_r = [r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17]\nroutes = pd.concat(frames_r)\nroutes = routes[routes[\"event\"] == \"pass_arrived\"]","1b18bc7a":"# merge the saftey data with the play data\nroute_info = plays.merge(routes, on=['playId', 'gameId'])","f91fbab3":"# extract the player's first initial and last name for each data frame\nroute_info[\"player\"] = route_info['displayName'].str[:1] + '.' + route_info['displayName'].str.rsplit(' ', n=1).str.get(1)\n# use a regular expression to extract the target for each pass\nroute_info['target'] = route_info['playDescription'].str.extract('(to [A-Z][a-z]*.\\s*[A-Z]\\'*[A-z]+)', expand=False).str.strip()\nroute_info['target'] = route_info['target'].str.replace(r\"to \",\"\")\nroute_info","7623f23c":"# create a new DataFrame that shows all the data for each target\npasses = route_info[route_info.target == route_info.player]\npasses","a2d352ee":"# only consider box safeties that are within 4 yards virtically and horizontally of the target \ncoverage = safety_info.merge(passes, on=['playId', 'gameId'], suffixes = ['_s', '_pc'])\ncoverage[\"x_sep\"] = abs(coverage.arrive_x - coverage.x_pc)\ncoverage[\"y_sep\"] = abs(coverage.arrive_y - coverage.y_pc)\nboxCoverage = coverage[(coverage[\"x_sep\"] <=4) & (coverage[\"y_sep\"] <=4)]\nboxCoverage[\"coverage\"] = boxCoverage['displayName_x']\nboxCoverage","953fa349":"# count the targets, completions, and incompletions for each box safety\ntarget = boxCoverage.displayName_x.value_counts().to_frame().reset_index().rename({'index':'displayName', 'displayName_x' : 'targets'},axis=1)\ncomplete = boxCoverage[boxCoverage.passResult_s=='C'].displayName_x.value_counts().to_frame().reset_index().rename({'index':'displayName', 'displayName_x' : 'complete'},axis=1)\nincomplete = boxCoverage[boxCoverage.passResult_s=='I'].displayName_x.value_counts().to_frame().reset_index().rename({'index':'displayName', 'displayName_x' : 'incomplete'},axis=1)","9a043a91":"stats = pd.merge(target,complete, on='displayName')\nstats = pd.merge(stats, incomplete)\nsnaps = boxSafeties.displayName.value_counts()\nsnaps = snaps.to_frame().reset_index()\nsnaps.rename(columns={'index':'displayName', 'displayName': 'snaps'}, inplace=True,errors='ignore')\nstats = snaps.merge(stats, on=\"displayName\")\nstats = stats[stats[\"snaps\"] >= 10]\nstats","05ba7500":"boxCoverage[\"distance\"] = ((boxCoverage.x_sep) ** 2 + (boxCoverage.y_sep) ** 2) **(1\/2)\ndist = boxCoverage.drop(boxCoverage.columns.difference(['displayName_x','distance', 'epa_s']), 1)\n# average distance of corner from target\navg_epa = boxCoverage.groupby('displayName_x')['epa_s'].agg(np.mean).to_frame()\navg_dist = boxCoverage.groupby('displayName_x')['distance'].agg(np.mean).to_frame()\nfinal = pd.merge(stats, avg_dist, right_on='displayName_x', left_on='displayName')\nfinal = pd.merge(stats, avg_epa, right_on='displayName_x', left_on='displayName')\nfinal","2af1191a":"final[\"percent_targeted\"] = (final[\"targets\"]\/final[\"snaps\"]) *100\nfinal[\"percent_complete\"] = (final[\"complete\"]\/final[\"targets\"]) *100\nfinal[\"target_pct_rank\"] = final[\"percent_targeted\"].rank(method='min')\nfinal[\"complete_pct_rank\"] = final[\"percent_complete\"].rank(method='min')\nfinal[\"avg_epa_rank\"] = final[\"epa_s\"].rank(method='min')\nfinal\nfinal[\"average_ranking\"] = (final.target_pct_rank + final.complete_pct_rank + final.avg_epa_rank)\/3\nfinal[\"overall_rank\"] = final[\"average_ranking\"].rank(method='min')\nfinal.sort_values(by='overall_rank').reset_index().drop({'index'},1)\nfinal","c2a7fb34":"As NFL offenses trend towards heavier passing attacks, defenses have been forced to adapt. More wide receivers are on the field at once, and tight ends have become premier pass catchers.  Traditionally, defenses primarily operate out of \u201cbase\u201d personnel (4 pass rushers and 3 linebackers\/2 cornerbacks\/2 safeties in coverage) or \u201cnickel\u201d personnel (4 pass rushers and 2 linebackers\/3 cornerbacks\/2 safeties in coverage). However, linebackers usually don\u2019t have the speed or coverage skills needed to guard speedy slot receivers or elite tight ends. Teams have tried putting cornerbacks in the position, but most corners don\u2019t have the physicality to guard 6\u201d4\u2019 tight ends and provide support in run defense. As a result, the \u201cbox safety\u201d was born. Brought into the public eye by the New England Patriots as a response to All-Pro tight end Zach Ertz in Superbowl LII, the big nickel defense is a direct counter to the rise of tall, receiving tight ends such as Travis Kelce, George Kittle, and Darren Waller. Theoretically, safeties have the coverage skills of a cornerback without sacrificing the size and strength needed to help in run defense and tight end coverage.\n\nAlthough free safeties and strong safeties are almost always lined up 10+ yards behind the line of scrimmage, box safeties line up as if they are linebackers. This new role is not always easy for the players; it is a fundamental change in how the safety position is played. These safeties that are used to having 10 or more yards of cushion from the receivers now have half of that. However, the payoff for those who master the position is huge. Players like Jamal Adams, Harrison Smith, and Derwin James have become versatile game wreckers capable of neutralizing almost any player on the field. Because reliable box safeties provide such excellent value to a defense, every team is scrambling to find players who can fill the role. In fact, the Arizona Cardinals spent the 8th overall pick in the 2020 NFL Draft on uber-athlete Isaiah Simmons in hopes that he can be moved to any coverage position at will. Additionally, Jeremy Chinn of the Carolina Panthers is a frontrunner to win Defensive Rookie of the Year honors, playing a significant portion of his snaps in the box.\n\nWith the box safety position becoming extremely valuable, it is important that coaches and front office personnel are able to evaluate performance effectively. Using the data given to us by the NFL, we created an objective formula to rank the coverage abilities of box safeties in 2018.\n\nThese rankings would be useful to both defensive staff and front offices. For example, our system could suggest that the expensive veteran might not be worth his large salary when the rookie sitting behind him is playing just as well. It could also be used to identify talented players who are possibly flying under the radar on other teams that could be acquired cheaply.","1412bfd0":"# Who is the best box safety in coverage?\n### Emily O'Connell and Benjamin O'Connell\n### Big Data Bowl 2021 - College Competition "}}