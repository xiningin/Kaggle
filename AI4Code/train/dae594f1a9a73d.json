{"cell_type":{"daebc6af":"code","b5e746e6":"code","ccbf14a4":"code","9cca2d54":"code","be89ab7d":"code","7f628355":"code","fe195583":"code","bd3292a6":"code","b603a9f0":"code","4188cf5b":"code","9e968527":"code","3dbe253c":"code","68617565":"code","f0a31505":"code","68faa1ea":"code","80dd2f5a":"code","7eab8a24":"markdown","7f7b8376":"markdown","c1aba5d9":"markdown","18a6aefb":"markdown","c4c67297":"markdown","0ec88fa4":"markdown","3821d1f4":"markdown","f8316d2e":"markdown","0af4818f":"markdown","de207849":"markdown","731eb5e8":"markdown"},"source":{"daebc6af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5e746e6":"import numpy as np\nimport pandas as pd","ccbf14a4":"data = pd.read_csv(\"\/kaggle\/input\/carla-driver-behaviour-dataset\/full_data_carla.csv\",index_col=0)\ndata.info()","9cca2d54":"data_1 = data[data['class']=='apo']\ndata_2 = data[data['class']=='gonca']\ndata_3 = data[data['class']=='onder']\ndata_4 = data[data['class']=='berk']\ndata_5 = data[data['class']=='selin']\ndata_6 = data[data['class']=='hurcan']\ndata_7 = data[data['class']=='mehdi']","be89ab7d":"data_7.shape","7f628355":"def dataTuner(data):\n    residual = data.shape[0]%20\n    data = data.drop(data.index[-residual:])\n    return data","fe195583":"data_full = pd.DataFrame()\nfor i in [data_1,data_2,data_3,data_4,data_5,data_6]:\n    i = dataTuner(i)\n    print(i.shape)\n    data_full = pd.concat([data_full,i],ignore_index=True)\ndata_full = pd.concat([data_full,data_7],ignore_index=True)\ndata_full.info()","bd3292a6":"x = data_full.drop([\"class\"],axis=1)\ny = data_full[\"class\"].values","b603a9f0":"from sklearn.preprocessing import StandardScaler\nx = StandardScaler().fit_transform(x)","4188cf5b":"from sklearn.preprocessing import LabelEncoder\ny = LabelEncoder().fit_transform(y)","9e968527":"x = pd.DataFrame(x)\nx = np.asarray(x).reshape(-1,20,6)","3dbe253c":"y = np.array(y).reshape(-1,20)\ny = pd.DataFrame(y).iloc[:,0]","68617565":"from tensorflow.python.keras.utils.np_utils import to_categorical\ny = to_categorical(y, num_classes=7)","f0a31505":"import tensorflow as tf\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense,LSTM,Conv1D,BatchNormalization,Activation\nfrom tensorflow.python.keras.layers import Dropout\nwith tf.device(\"\/GPU:0\"):\n    print(\"gpu is ok\")\n    model = Sequential()\n    \n    model.add(Conv1D(filters=64, kernel_size=4, input_shape=(20,6),padding='same'))\n    model.add(BatchNormalization())\n    model.add(Activation('relu'))\n    \n    model.add(Conv1D(filters=64, kernel_size=4,padding='same'))\n    model.add(BatchNormalization())\n    model.add(Activation('relu'))\n    \n    model.add(Conv1D(filters=64, kernel_size=4,padding='same'))\n    model.add(BatchNormalization())\n    model.add(Activation('relu'))\n    \n    model.add(Conv1D(filters=64, kernel_size=4,padding='same'))\n    model.add(BatchNormalization())\n    model.add(Activation('relu'))\n    \n    model.add(LSTM(128, return_sequences=True))\n    model.add(BatchNormalization())\n    model.add(Activation('tanh'))\n    \n    model.add(LSTM(128))\n    model.add(BatchNormalization())\n    model.add(Activation('tanh'))\n    \n    model.add(Dense(128, kernel_initializer='random_uniform'))\n    model.add(BatchNormalization())\n    model.add(Activation('relu'))    \n\n    model.add(Dense(128, kernel_initializer='random_uniform'))\n    model.add(BatchNormalization())\n    model.add(Activation('relu'))    \n    \n    model.add(Dense(7, kernel_initializer='random_uniform',activation='softmax'))\n    \n    \n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n    model.summary()","68faa1ea":"hist = model.fit(x , y , epochs=480    , validation_data=(x,y) )","80dd2f5a":"import matplotlib.pyplot as plt\n\nplt.plot(hist.history['accuracy'])\nplt.plot(hist.history['val_accuracy'])\nplt.show()","7eab8a24":"**Splitting data into Features and Labels**","7f7b8376":"**Lets concentate the mini datas into one dataframe**","c1aba5d9":"**BEST PLACE IS FITTING PLACE :))**","18a6aefb":"**COOL. FINALLY I ACHIEVED GOOD RESULTS....**","c4c67297":"**I will use categorical crossentropy as loss function. So, I convert labels to right format**","0ec88fa4":"**Data Normalization speeds up training time. So, I normalized the data.**","3821d1f4":"**In this section we filter data into label batches. We made it to use it on Conv1d layers. The input of Conv Layers are (20,6). 20 is timesteps, 6 is features. So, the dataset have to divide 20 and remaining must be 0.**","f8316d2e":"**The input of neural network is (20,6). And, we will use conv layers. So, we have to convert our data from 2D to 3D.**","0af4818f":"**The labels in the format of string. I convert it from string to integer.**","de207849":"**A funct to drop residual rows into mini dataframes.**","731eb5e8":"**The model I builded contain Conv, LSTM, Dense layers.**"}}