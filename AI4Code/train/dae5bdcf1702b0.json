{"cell_type":{"36ae0daa":"code","ad61619f":"code","fbc9bbbf":"code","e339b9d2":"code","7241e5c3":"code","37691f10":"code","d88acb9f":"code","758435e6":"code","4d78d12a":"code","c6275b1a":"code","1cf6cada":"code","c19df26f":"code","192d1e78":"code","7956a078":"code","fb366355":"code","dee50b9c":"code","4a15c622":"code","af8ab63f":"code","d64ecb7f":"code","289efc13":"code","43097048":"code","143f0ddc":"code","3fec9d6a":"code","b4b258d6":"code","eb78e32e":"code","bf901f33":"code","d4559f92":"code","aa182aff":"code","ce868e06":"code","31b8fac7":"code","b62efa3a":"code","3de9cf77":"code","2f50554f":"code","9d652c55":"code","6ed6ef19":"code","0534a442":"code","441864d4":"code","33f5d545":"code","98e2ee8f":"code","b37208dd":"code","f460c006":"code","2fd7d775":"code","c1ec77e2":"code","36efd4d4":"code","f9d0dfad":"code","623d4f2b":"code","3cdfd36f":"code","3a8d26b1":"code","a9f7acdc":"code","333fd65c":"code","40fef56a":"code","e297e475":"code","6be45333":"code","fa1fc81e":"code","836c8fe0":"code","17da0a78":"markdown","f6e22814":"markdown"},"source":{"36ae0daa":"import numpy as np \nimport pandas as pd\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nfrom random import shuffle\nfrom keras.utils  import to_categorical\nimport pickle\nfrom sklearn.model_selection  import train_test_split","ad61619f":"def load_rand():\n    X=[]\n    dir_path='\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/train'\n    for sub_dir in tqdm(os.listdir(dir_path)):\n        print(sub_dir)\n        path_main=os.path.join(dir_path,sub_dir)\n        i=0\n        for img_name in os.listdir(path_main):\n            if i>=6:\n                break\n            img=cv2.imread(os.path.join(path_main,img_name))\n            img=cv2.resize(img,(100,100))\n            img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n            X.append(img)\n            i+=1\n    return X","fbc9bbbf":"X=load_rand()","e339b9d2":"X=np.array(X)\nX.shape","7241e5c3":"def show_subpot(X,title=False,Y=None):\n    if X.shape[0]==36:\n        f, ax= plt.subplots(6,6, figsize=(40,60))\n        list_fruits=['rottenoranges', 'rottenapples', 'freshbanana', 'freshoranges', 'rottenbanana', 'freshapples']\n        for i,img in enumerate(X):\n            ax[i\/\/6][i%6].imshow(img, aspect='auto')\n            if title==False:\n                ax[i\/\/6][i%6].set_title(list_fruits[i\/\/6])\n            elif title and Y is not None:\n                ax[i\/\/6][i%6].set_title(Y[i])\n        plt.show()\n    else:\n        print('Cannot plot')","37691f10":"show_subpot(X)","d88acb9f":"del X","758435e6":"def load_rottenvsfresh():\n    quality=['fresh', 'rotten']\n    X,Y=[],[]\n    z=[]\n    for cata in tqdm(os.listdir('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/train')):\n        if quality[0] in cata:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/train',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,0])\n        else:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/train',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,1])\n    print('Shuffling your data.....')\n    shuffle(z)\n    for images, labels in tqdm(z):\n        X.append(images);Y.append(labels)\n    return X,Y","4d78d12a":"X,Y=load_rottenvsfresh()","c6275b1a":"Y=np.array(Y)\nX=np.array(X)","1cf6cada":"y_ser=pd.Series(Y)\ny_ser.value_counts()","c19df26f":"\nX_train,X_val,Y_train,Y_val = train_test_split(X,Y,test_size=0.2,random_state=1)","192d1e78":"def load_rottenvsfresh_valset():\n    quality=['fresh', 'rotten']\n    X,Y=[],[]\n    z=[]\n    for cata in tqdm(os.listdir('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/test')):\n        if quality[0] in cata:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/test',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,0])\n        else:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/test',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,1])\n    print('Shuffling your data.....')\n    shuffle(z)\n    for images, labels in tqdm(z):\n        X.append(images);Y.append(labels)\n    return X,Y            ","7956a078":"Y_train=np.array(Y_train)\nX_train=np.array(X_train)\ny_ser=pd.Series(Y_train)\ny_ser.value_counts()","fb366355":"Y_val=np.array(Y_val)\nX_val=np.array(X_val)\ny_ser=pd.Series(Y_val)\ny_ser.value_counts()","dee50b9c":"X_test,Y_test=load_rottenvsfresh_valset()","4a15c622":"Y_test=np.array(Y_test)\nX_test=np.array(X_test)\ny_ser=pd.Series(Y_test)\ny_ser.value_counts()","af8ab63f":"import keras \nfrom keras.layers import Dense,Dropout, Conv2D,MaxPooling2D , Activation, Flatten, BatchNormalization, SeparableConv2D\nfrom keras.models import Sequential","d64ecb7f":"model = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu', input_shape=(100,100,3)))\nmodel.add(BatchNormalization())\nmodel.add(SeparableConv2D(32, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.3))\n\nmodel.add(SeparableConv2D(64, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(SeparableConv2D(64, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(128, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\n# model.add(BatchNormalization())\nmodel.add(Conv2D(128, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Flatten())\n\n#model.add(Dense(512, activation='relu', kernel_initializer='he_uniform'))\n#model.add(Dropout(0.5))\nmodel.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))\nmodel.add(Dropout(0.3))\n\nmodel.add(Dense(1, activation='sigmoid'))","289efc13":"model.summary()","43097048":"import tensorflow as tf","143f0ddc":"lr_rate=keras.callbacks.ReduceLROnPlateau(\n    monitor='val_loss', factor=0.5, patience=6, verbose=1, mode='max',\n    min_lr=0.00002, cooldown=2)\ncheck_point=tf.keras.callbacks.ModelCheckpoint(\n    filepath='\/kaggle\/working\/rotten.h5', monitor='val_loss', verbose=1, save_best_only=True,\n    save_weights_only=False, mode='min')\n\nmodel.compile(loss=keras.losses.binary_crossentropy, optimizer = keras.optimizers.Adam(lr = 0.001), metrics=['accuracy'])","3fec9d6a":"X_train=X_train\/255.0\nX_val=X_val\/255.0","b4b258d6":"X_test = X_test\/255.0","eb78e32e":"history=model.fit(X_train,Y_train,batch_size=20,validation_data=(X_val,Y_val),epochs= 50,\n                 callbacks=[check_point])","bf901f33":"import matplotlib.pyplot  as plt","d4559f92":"plt.figure(1, figsize = (20, 12))\nplt.subplot(1,2,1)\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.plot( history.history[\"loss\"], label = \"Training Loss\")\nplt.plot( history.history[\"val_loss\"], label = \"Validation Loss\")\nplt.grid(True)\nplt.legend()\n\nplt.subplot(1,2,2)\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.plot( history.history[\"accuracy\"], label = \"Training Accuracy\")\nplt.plot( history.history[\"val_accuracy\"], label = \"Validation Accuracy\")\nplt.grid(True)\nplt.legend()","aa182aff":"model.evaluate(X_test,Y_test)","ce868e06":"model.save('\/kaggle\/working\/rottenvsfresh.h5')","31b8fac7":"from keras.models import Model, load_model","b62efa3a":"new_model=load_model('\/kaggle\/working\/rotten.h5')","3de9cf77":"new_model.evaluate(X_test,Y_test)","2f50554f":"plt.imshow(X_test[0])","9d652c55":"model.predict(X_test[0].reshape(1,100,100,3))","6ed6ef19":"show_subpot(X_test[-36*11:-36*10])","0534a442":"model.predict_classes(X_test[-36*11:-36*10])","441864d4":"def load_fruits_data():\n    quality=['apples', 'banana','oranges']\n    X,Y=[],[]\n    z=[]\n    for cata in tqdm(os.listdir('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/test')):\n        if quality[0] in cata:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/test',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,0])\n        elif quality[1] in cata:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/test',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,1])\n        elif quality[2] in cata:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/test',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,2])\n        \n    print('Shuffling your data.....')\n    shuffle(z)\n    for images, labels in tqdm(z):\n        X.append(images);Y.append(labels)\n    return X,Y \n    ","33f5d545":"def load_fruits_train_data():\n    quality=['apples', 'banana','oranges']\n    X,Y=[],[]\n    z=[]\n    for cata in tqdm(os.listdir('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/train')):\n        if quality[0] in cata:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/train',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,0])\n        elif quality[1] in cata:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/train',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,1])\n        elif quality[2] in cata:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/train',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,2])\n        \n    print('Shuffling your data.....')\n    shuffle(z)\n    for images, labels in tqdm(z):\n        X.append(images);Y.append(labels)\n    return X,Y \n    ","98e2ee8f":"X_val,Y_val=load_fruits_data()","b37208dd":"X,Y=load_fruits_train_data()","f460c006":"X=np.array(X)\nX_val=np.array(X_val)","2fd7d775":"X.shape,X_val.shape","c1ec77e2":"X=X\/255.0\nX_val=X_val\/255.0","36efd4d4":"Y=to_categorical(Y)\nY","f9d0dfad":"Y_test=to_categorical(Y_val)\nY_val=np.array(Y_val)","623d4f2b":"Y.shape,Y_test.shape, Y_val.shape","3cdfd36f":"model = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu', input_shape=(100,100,3)))\nmodel.add(BatchNormalization())\nmodel.add(SeparableConv2D(32, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.3))\n\nmodel.add(SeparableConv2D(64, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(SeparableConv2D(64, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(SeparableConv2D(64, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.4))\n\nmodel.add(SeparableConv2D(128, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(SeparableConv2D(128, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(SeparableConv2D(128, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Flatten())\n\n#model.add(Dense(512, activation='relu', kernel_initializer='he_uniform'))\n#model.add(Dropout(0.5))\nmodel.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))\nmodel.add(Dropout(0.3))\n\nmodel.add(Dense(3, activation='softmax'))","3a8d26b1":"lr_rate=keras.callbacks.ReduceLROnPlateau(\n    monitor='val_loss', factor=0.5, patience=6, verbose=1, mode='max',\n    min_lr=0.00002, cooldown=2)\ncheck_point=tf.keras.callbacks.ModelCheckpoint(\n    filepath='\/kaggle\/working\/fruit_cata.h5', monitor='val_loss', verbose=1, save_best_only=True,\n    save_weights_only=False, mode='min')\n\nmodel.compile(loss=keras.losses.categorical_crossentropy, optimizer = keras.optimizers.Adam(lr = 0.001), metrics=['accuracy'])","a9f7acdc":"history=model.fit(X,Y,batch_size=20,validation_data=(X_val,Y_test),epochs= 40,\n                 callbacks=[check_point])","333fd65c":"model.summary()","40fef56a":"plt.figure(1, figsize = (20, 12))\nplt.subplot(1,2,1)\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.plot(history.history[\"loss\"], label = \"Training Loss\")\nplt.plot(history.history[\"val_loss\"], label = \"Validation Loss\")\nplt.grid(True)\nplt.legend()\n\nplt.subplot(1,2,2)\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.plot( history.history[\"accuracy\"], label = \"Training Accuracy\")\nplt.plot( history.history[\"val_accuracy\"], label = \"Validation Accuracy\")\nplt.grid(True)\nplt.legend()","e297e475":"model=load_model('fruit_cata.h5')","6be45333":"model.evaluate(X,Y)","fa1fc81e":"show_subpot(X_val[:36],title=True,Y=model.predict_classes(X_val[:36]))","836c8fe0":"model.predict_classes(X_val[:36])","17da0a78":"# Category of Fruits","f6e22814":"# Rotten vs fresh"}}