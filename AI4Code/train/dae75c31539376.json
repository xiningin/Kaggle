{"cell_type":{"b4f89c44":"code","7b528f04":"code","0e2d6f76":"code","c1d60944":"markdown"},"source":{"b4f89c44":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.preprocessing import scale\nfrom sklearn.model_selection import cross_val_score, RepeatedStratifiedKFold, GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\n\n# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\ndata_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndata_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndata_all = data_train.append(data_test, sort=False)\n\n# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n# ID \u043f\u0430\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u044f\u0442\u0441\u044f \u0432 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0433\u0434\u0435 \u0438\u043c \u0431\u0443\u0434\u0443\u0442 \u0441\u043e\u043f\u0430\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u0430\u044f \u0432\u044b\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c\nids = data_all[data_all.Survived.isna()].PassengerId\n\n# \u0423\u0434\u0430\u043b\u0438\u043c \u043f\u043e\u043b\u044f \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0438 \u0441 \u043c\u0430\u043b\u043e\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\ndata_all.drop(columns=['PassengerId', 'Ticket', 'Cabin'], inplace=True)\n\n# \u041c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Age. \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0438\u0445 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\ndata_all.Age.fillna (data_all.Age.median(), inplace = True )\n# A\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0434\u043b\u044f Fara\ndata_all.Fare.fillna(data_all.Fare.median(), inplace = True )\n# \u041f\u0430\u0440\u0443 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 Embarked \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u043c\u043e\u0434\u0443\ndata_all.Embarked.fillna(data_all.Embarked.mode()[0], inplace = True ) \n\n# \u041f\u0440\u0438\u0432\u0435\u0434\u0451\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043d\u0430\u043a\u043e\u0432 \u043a \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c\u0443 \u0432\u0438\u0434\u0443\ndata_all.Sex = data_all.Sex.astype('category').cat.codes\ndata_all.Embarked = data_all.Embarked.astype('category').cat.codes\n\n# \u041e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432\u0438\u0434\u0430 Mr, Master, Ms, Miss, Mrs \u0438 \u0442.\u043f. \u043c\u043e\u0433\u0443\u0442 \u043d\u0435\u0441\u0442\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u0432\u044b\u0434\u0435\u0440\u043d\u0438\u043c \u0438\u0445\ndef get_title(name):\n    Titles = ['Capt', 'Rev.', 'Col.', 'Sir.', 'Mr.', 'Master.', 'Dr.', 'Ms.', 'Mrs.', 'Miss.']\n    for i in range(len(Titles)):\n        if Titles[i] in name:\n            return i\n    return len(Titles)\n\n# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u043d\u043e\u0432\u043e\u0435 \u043f\u043e\u043b\u0435 title, \u0430 \u0441\u0442\u043e\u0440\u043e\u0435 (Name) \u0443\u0434\u0430\u043b\u0438\u043c\ndata_all['title'] = data_all['Name'].apply(get_title)\ndata_all.drop(columns=['Name'], inplace=True)\n\nXtrain = data_all[~data_all.Survived.isna()].drop(columns=['Survived'], inplace=False).values\nYtrain = data_all[~data_all.Survived.isna()].Survived.values\n\nXtest = data_all[data_all.Survived.isna()].drop(columns=['Survived'], inplace=False).values\n \n\n# \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435, \u044d\u0442\u043e \u043d\u0443\u0436\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0431\u044b\u043b\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c \u0434\u043b\u044f \u0432\u0441\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438   \nXAll = np.concatenate((Xtrain,Xtest))\n# \u041d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 (\u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u043a \u0435\u0434\u0438\u043d\u043e\u0439 \u0448\u043a\u0430\u043b\u0435)\nXAll = scale (XAll)           \n\n# C\u043d\u043e\u0432\u0430 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0438 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443\ni,j = Xtrain.shape\nXtrain = XAll[:i, :]\nXtest = XAll[i:, :]\n\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0431\u0443\u0434\u0435\u043c \u0434\u0432\u0443\u043c\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430\u043c\u0438 - \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0438 \u041c\u0435\u0442\u043e\u0434 K \u0441\u043e\u0441\u0435\u0434\u0435\u0439\n# \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u044d\u0442\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u043f\u043e\u0434\u043e\u0433\u043d\u0430\u043d\u044b \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0439 \u0432\u044b\u0448\u0435\n\n# \u041c\u0435\u0442\u043e\u0434 K \u0441\u043e\u0441\u0435\u0434\u0435\u0439\nkN = KNeighborsClassifier(algorithm='auto', leaf_size=1, metric='minkowski',metric_params=None, n_jobs=None, n_neighbors=14, p=1, weights='uniform')\n\n# \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\nforest = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=None, max_features='auto',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=0.1,\n                       min_weight_fraction_leaf=0.0, n_estimators=26,\n                       n_jobs=None, oob_score=False, random_state=None,\n                       verbose=0, warm_start=False)\n\n# \u041f\u043e\u0434\u0431\u043e\u0440 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0432 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430\n# \u041f\u043e\u0434\u0431\u043e\u0440 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b\u0437\u043e\u0432 \u044d\u0442\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d, \n# \u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438\u0445 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d \u043d\u0438\u0436\u0435 \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445.\n# \u041d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043c\u043e\u0434\u0435\u043b\u044c, \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438.\n\ndef find_best_parameters(forest, Xtrain, Ytrain, CV, params):\n    cv = GridSearchCV(forest, params, verbose=2, cv=CV, n_jobs=-1, refit=True)\n    best_params = cv.fit(Xtrain, Ytrain)\n    print(f\"Accuracy: {best_params.best_score_:.4f}\")\n    print(\"\u041f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\")\n    print(best_params.best_estimator_)\n    \nparams_RFC = [{\"min_samples_leaf\": list(range(1, 30)), \"min_samples_split\":list(np.arange(0.1,1,0.1)), \"n_estimators\":list(range(1,30))}]\nparams_kN = [{\"n_neighbors\": list(range(1, 30)), \"leaf_size\":list(range(1,60)), \"weights\":[\"uniform\", \"distance\"], \"algorithm\":[\"auto\", \"ball_tree\", \"kd_tree\", \"brute\"], \"p\":[1,2]}]                                                                                \n\n# \u041d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f kN\nCV_kN = RepeatedStratifiedKFold(n_splits=7, n_repeats = 5)\n#find_best_parameters(kN,Xtrain, Ytrain, CV_kN, params_kN)\n\n# \u041d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f RFC\nCV_RFC = RepeatedStratifiedKFold(n_splits=7, n_repeats = 5)\n#find_best_parameters(forest,Xtrain, Ytrain, CV_RFC, params_RFC)\n                                                                                \n# Accuracy: 0.8236\n# \u041f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n# KNeighborsClassifier(algorithm='auto', leaf_size=1, metric='minkowski',\n#                      metric_params=None, n_jobs=None, n_neighbors=14, p=1,\n#                      weights='uniform')\n\n# Accuracy: 0.8296\n# \u041f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n# RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n#                        criterion='gini', max_depth=None, max_features='auto',\n#                        max_leaf_nodes=None, max_samples=None,\n#                        min_impurity_decrease=0.0, min_impurity_split=None,\n#                        min_samples_leaf=3, min_samples_split=11,\n#                        min_weight_fraction_leaf=0.0, n_estimators=8,\n#                        n_jobs=None, oob_score=False, random_state=None,\n#                        verbose=0, warm_start=False)\n# Accuracy: 0.8314\n# \u041f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n# RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n#                        criterion='gini', max_depth=None, max_features='auto',\n#                        max_leaf_nodes=None, max_samples=None,\n#                        min_impurity_decrease=0.0, min_impurity_split=None,\n#                        min_samples_leaf=2, min_samples_split=13,\n#                        min_weight_fraction_leaf=0.0, n_estimators=8,\n#                        n_jobs=None, oob_score=False, random_state=None,\n#                        verbose=0, warm_start=False)\n# Accuracy: 0.8202\n# \u041f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n# RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n#                        criterion='gini', max_depth=None, max_features='auto',\n#                        max_leaf_nodes=None, max_samples=None,\n#                        min_impurity_decrease=0.0, min_impurity_split=None,\n#                        min_samples_leaf=1, min_samples_split=0.1,\n#                        min_weight_fraction_leaf=0.0, n_estimators=26,\n#                        n_jobs=None, oob_score=False, random_state=None,\n#                        verbose=0, warm_start=False)\n\n# \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\nYtest = np.zeros( shape=(Xtest.shape[0], 2), dtype=int )  # \u0434\u043b\u044f id \u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439\nYtest[:, 0] = ids\nYtest2 = Ytest\n\n# \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\nclf = forest\nclf.fit(Xtrain, Ytrain)\n\n# \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u0442\u043e\u0440\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\nkNPredict = kN\nkN.fit(Xtrain, Ytrain)\n\n# \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\nfor i in range(Xtest.shape[0]):\n    Ytest[i,1]=clf.predict([ Xtest[i] ])\n\nfor i in range(Xtest.shape[0]):\n    Ytest2[i,1]=kNPredict.predict([ Xtest[i] ])\n    \n# \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432 \u0444\u0430\u0439\u043b\u044b\nnp.savetxt('submission_forest.csv', Ytest, fmt='%d', delimiter=',', header=\"PassengerId,Survived\", comments='')\nnp.savetxt('submission_kN.csv', Ytest2, fmt='%d', delimiter=',', header=\"PassengerId,Survived\", comments='')\n\n# \u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u043e\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\n#pd.DataFrame(Ytest).to_csv(\"submission_forest.csv\", index=True)\n#pd.DataFrame(Ytest2).to_csv(\"submission_kN.csv\", index=True)\nprint(\"Done\")","7b528f04":"# \u041f\u0440\u0438\u043c\u0435\u0440 \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c XGBClassifier\nimport xgboost as xgb\nfrom sklearn.calibration import CalibratedClassifierCV\nparamsXGB = {\"learning_rate\":1e-3, \"booster\":\"gbtree\"} #gblinear or dart or gbtree.\nclf = xgb.XGBClassifier()\nclf.set_params(**paramsXGB)\nmetLearn= CalibratedClassifierCV(clf, method='isotonic', cv=2)\nmetLearn.fit(Xtrain, Ytrain)\n\ntestPredictions = metLearn.predict(Xtest)\n\nYtest3 = np.zeros(shape=(Xtest.shape[0], 2), dtype=int )  # \u0434\u043b\u044f id \u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439\nYtest3[:, 0] = ids\n\nfor i in range(Xtest.shape[0]):\n    Ytest3[i,1]=metLearn.predict([ Xtest[i] ])\n\n# \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432 \u0444\u0430\u0439\u043b\nnp.savetxt('submission_XGBoost.csv', Ytest3, fmt='%d', delimiter=',', header=\"PassengerId,Survived\", comments='')\nprint(\"Done\")","0e2d6f76":"from sklearn.feature_selection import RFECV\nclf = forest\n\nprint(\"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\")\nprint(clf.get_params())\n\nprint(\"\\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0435\u0439 \u043d\u0430\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\")\nprint(data_all.columns[1:])\n\nCV = RepeatedStratifiedKFold(n_splits=7, n_repeats = 5)\nscore = cross_val_score(clf, Xtrain, Ytrain, cv=CV)\nprint(f\"\\nAccuracy \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432: {score.mean():.3f} \u00b1 {score.std():.3f}\")\nScores = []\nScores.append([score.mean()])\n\n\nrfecv = RFECV(estimator=clf, cv = CV, scoring='accuracy', step=1, n_jobs=-1)\nrfecv.fit(Xtrain, Ytrain)\n\nprint(\"Accuracy \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\")\nprint(rfecv.grid_scores_)\n\nprint(\"\u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0438 \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\")\nprint(rfecv.get_support())  # \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c?","c1d60944":"# \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0417\u0430\u0434\u0430\u0447\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438"}}