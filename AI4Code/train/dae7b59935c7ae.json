{"cell_type":{"412ed3f5":"code","131c1663":"code","d7bad1e0":"code","4848ba51":"code","fbf583b4":"code","606448ca":"code","b6c0f7ce":"code","18e01550":"code","ca79a75b":"code","df1643f2":"code","7739396b":"code","8b6a33f7":"code","8429c5b7":"code","7fb641f9":"code","e7c7ae36":"code","c7311fa0":"code","3c7edf70":"code","668f57d0":"code","db62f7b8":"code","9bcc1b00":"code","0fbb9c18":"code","f4ac610c":"code","614cf86e":"code","60d07d58":"code","7f1cef73":"code","0f97f2d6":"code","971c6f03":"code","064e083d":"code","64fea3a9":"code","2eb4a02e":"code","8abe966d":"code","eeffc07f":"code","94fd3dd8":"code","c41650a8":"code","0cb4a9a6":"code","8b06a00e":"code","bf8d6fdc":"code","3128f48b":"code","c1de7123":"code","ae1080e3":"code","058c0f4b":"code","e4cdf915":"code","c64c5ebc":"code","ec43da8d":"code","0d19cd19":"code","aa07344a":"code","81468106":"code","182e9028":"code","916517be":"code","3e41839b":"code","db94ddc5":"code","3fc1d313":"code","af419062":"code","57d5df9a":"code","b0d14049":"code","ce7b5724":"code","c6ba3162":"code","0a3925c8":"code","24608169":"code","70c70d77":"code","921d22fa":"code","62ce2bb5":"code","e3986a9f":"code","fda3c41d":"code","23885a99":"code","d2d3bd07":"code","e7d61626":"code","1f03a710":"code","736076c1":"markdown","ffd2dd41":"markdown","cc820946":"markdown","d9fd4d68":"markdown","5e74ea0b":"markdown","1f5501ca":"markdown","c0b9984a":"markdown","f00901c2":"markdown","15daf7eb":"markdown","10cfff05":"markdown","66dd7264":"markdown","803b0f50":"markdown","3aff1561":"markdown","407e7121":"markdown","83f01299":"markdown","6b8708d4":"markdown","82c42edc":"markdown"},"source":{"412ed3f5":"import pandas as pd \ndata = pd.read_csv('\/kaggle\/input\/kepler-exoplanet-search-results\/cumulative.csv')","131c1663":"data.head()","d7bad1e0":"data.info()","4848ba51":"del data['kepoi_name']\ndel data['kepler_name']\ndel data['koi_tce_delivname']\ndel data['koi_tce_plnt_num']","fbf583b4":"del data['koi_teq_err1']\ndel data['koi_teq_err2']","606448ca":"data.info()","b6c0f7ce":"miss_col = ('koi_score', 'koi_period_err1', 'koi_period_err2', 'koi_time0bk_err1', 'koi_time0bk_err2', 'koi_impact', 'koi_impact_err1', 'koi_impact_err2', 'koi_duration_err1', 'koi_duration_err2', 'koi_depth', 'koi_depth_err1', 'koi_depth_err2', 'koi_prad', 'koi_prad_err1', 'koi_prad_err2', 'koi_teq', 'koi_insol', 'koi_insol_err1', 'koi_insol_err2', 'koi_model_snr', 'koi_steff', 'koi_steff_err1', 'koi_steff_err2', 'koi_slogg', 'koi_slogg_err1', 'koi_slogg_err2', 'koi_srad', 'koi_srad_err1', 'koi_srad_err2', 'koi_kepmag')","18e01550":"for col in miss_col:\n    data[col] = data[col].fillna(data[col].mean())","ca79a75b":"data.info()","df1643f2":"data = pd.get_dummies(data)","7739396b":"data.info()","8b6a33f7":"del data['koi_disposition_FALSE POSITIVE']\ndel data['koi_pdisposition_CANDIDATE']\ndel data['koi_pdisposition_FALSE POSITIVE']","8429c5b7":"data.info()","7fb641f9":"corr = data.corr()","e7c7ae36":"corr","c7311fa0":"del data['rowid']\ndel data['kepid']","3c7edf70":"data.shape","668f57d0":"data.info()","db62f7b8":"data['koi_disposition'] = [0]*9564","9bcc1b00":"type(data)","0fbb9c18":"data.info()","f4ac610c":"for i in range(0, 9564):\n    if(data.at[i, 'koi_disposition_CANDIDATE'] == 1):\n        data.at[i, 'koi_disposition'] = 1\n    elif(data.at[i, 'koi_disposition_CONFIRMED'] == 1):\n        data.at[i, 'koi_disposition'] = 2\n    elif(data.at[i, 'koi_disposition_CANDIDATE'] == 0 and data.loc[i, 'koi_disposition_CONFIRMED'] == 0):\n        data.loc[i, 'koi_disposition'] = 0","614cf86e":"data","60d07d58":"del data['koi_disposition_CANDIDATE']\ndel data['koi_disposition_CONFIRMED']","7f1cef73":"train_data = data.loc[:6999, :]\ntest_data = data.loc[7000:, :]","0f97f2d6":"x_train = train_data.loc[:, train_data.columns != 'koi_disposition']\ny_train = train_data['koi_disposition']\nx_test = test_data.loc[:, test_data.columns != 'koi_disposition']\ny_test = test_data['koi_disposition']","971c6f03":"x_train.shape, y_train.shape, x_test.shape, y_test.shape, data.shape","064e083d":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as lda\nmodel_lda = lda()\nmodel_lda.fit(x_train, y_train)","64fea3a9":"lda_train_predict = model_lda.predict(x_train)\nlda_test_predict = model_lda.predict(x_test)","2eb4a02e":"from sklearn.metrics import confusion_matrix, accuracy_score\ncon_lda_train = confusion_matrix(y_train, lda_train_predict)\ncon_lda_test = confusion_matrix(y_test, lda_test_predict)","8abe966d":"con_lda_train","eeffc07f":"con_lda_test","94fd3dd8":"lda_train_acc = accuracy_score(y_train, lda_train_predict)\nlda_test_acc = accuracy_score(y_test, lda_test_predict)\nlda_train_acc, lda_test_acc","c41650a8":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV","0cb4a9a6":"k_hyper = {'n_neighbors': range(1, 101)}","8b06a00e":"grid_search = GridSearchCV(KNeighborsClassifier(), k_hyper)","bf8d6fdc":"from sklearn import preprocessing\nscaler_train = preprocessing.StandardScaler().fit(x_train)\nx_train_scaled = scaler_train.transform(x_train)\nscaler_test = preprocessing.StandardScaler().fit(x_test)\nx_test_scaled = scaler_test.transform(x_test)","3128f48b":"grid_search.fit(x_train_scaled, y_train)","c1de7123":"grid_search.best_params_","ae1080e3":"model_knn = grid_search.best_estimator_","058c0f4b":"knn_train_predict = model_knn.predict(x_train_scaled)\nknn_test_predict = model_knn.predict(x_test_scaled)","e4cdf915":"con_knn_train = confusion_matrix(y_train, knn_train_predict)\ncon_knn_test = confusion_matrix(y_test, knn_test_predict)","c64c5ebc":"con_knn_train","ec43da8d":"con_knn_test","0d19cd19":"knn_train_acc = accuracy_score(y_train, knn_train_predict)\nknn_test_acc = accuracy_score(y_test, knn_test_predict)\nknn_train_acc, knn_test_acc","aa07344a":"from sklearn.tree import DecisionTreeClassifier","81468106":"tree1 = DecisionTreeClassifier(min_samples_split = 25)","182e9028":"tree1.fit(x_train, y_train)","916517be":"tree1_train_predict = tree1.predict(x_train)\ntree1_test_predict = tree1.predict(x_test)","3e41839b":"con_tree1_train = confusion_matrix(y_train, tree1_train_predict)\ncon_tree1_test = confusion_matrix(y_test, tree1_test_predict)","db94ddc5":"con_tree1_train","3fc1d313":"con_tree1_test","af419062":"tree1_train_acc = accuracy_score(y_train, tree1_train_predict)\ntree1_test_acc = accuracy_score(y_test, tree1_test_predict)\ntree1_train_acc, tree1_test_acc","57d5df9a":"tree2 = DecisionTreeClassifier(min_samples_leaf = 5)","b0d14049":"tree2.fit(x_train, y_train)","ce7b5724":"tree2_train_predict = tree2.predict(x_train)\ntree2_test_predict = tree2.predict(x_test)","c6ba3162":"con_tree2_train = confusion_matrix(y_train, tree2_train_predict)\ncon_tree2_test = confusion_matrix(y_test, tree2_test_predict)","0a3925c8":"con_tree2_train","24608169":"con_tree2_test","70c70d77":"tree2_train_acc = accuracy_score(y_train, tree2_train_predict)\ntree2_test_acc = accuracy_score(y_test, tree2_test_predict)\ntree2_train_acc, tree2_test_acc","921d22fa":"from sklearn.ensemble import RandomForestClassifier","62ce2bb5":"ran_for = RandomForestClassifier(n_estimators = 10000, n_jobs = -1, random_state = 0)","e3986a9f":"ran_for.fit(x_train, y_train)","fda3c41d":"ran_train_predict = ran_for.predict(x_train)\nran_test_predict = ran_for.predict(x_test)","23885a99":"con_ran_train = confusion_matrix(y_train, ran_train_predict)\ncon_ran_test = confusion_matrix(y_test, ran_test_predict)","d2d3bd07":"con_ran_train","e7d61626":"con_ran_test","1f03a710":"ran_train_acc = accuracy_score(y_train, ran_train_predict)\nran_test_acc = accuracy_score(y_test, ran_test_predict)\nran_train_acc, ran_test_acc","736076c1":"Missing value Imputation","ffd2dd41":"From the above output cell, we note that the following variables need missing value imputation:\nkoi_score, koi_period_err1, koi_period_err2, koi_time0bk_err1, koi_time0bk_err2, koi_impact, koi_impact_err1, koi_impact_err2, koi_duration_err1, koi_duration_err2, koi_depth, koi_depth_err1, koi_depth_err2, koi_prad, koi_prad_err1, koi_prad_err2, koi_teq, koi_insol, koi_insol_err1, koi_insol_err2, koi_model_snr, koi_steff, koi_steff_err1, koi_steff_err2, koi_slogg, koi_slogg_err1, koi_slogg_err2, koi_srad, koi_srad_err1, koi_srad_err2, koi_kepmag","cc820946":"# Importing Dataset and Data Preprocessing\n","d9fd4d68":"The trees have given a good accuracy.","5e74ea0b":"The Linear Discriminant Analysis has a good performance, but it's not state-of-the-art.","1f5501ca":"Deleting some dummy variables created to avoid multi-collinearity","c0b9984a":"Note that the target variable here has 3 categories, hence can not be represented by a bool.\nWe need to make a variable which takes value 0, 1 ,2 as koi_disposition is FALSE POSITIVE, CANDIDATE, CONFIRMED respectively.","f00901c2":"Deleting empty columns","15daf7eb":"## KNN","10cfff05":"Removing Name-related variables","66dd7264":"Converting categorical target variables into dummy variables\n","803b0f50":"## Random Forest","3aff1561":"## Discriminant Analysis","407e7121":"This model behaves well, the previous model has test set accuracy greater than train set accuracy, the main reason for this is irregular distribution of data, as these is astronomical data recorded we highly accurate instruments. Some observations might seem as outliers but there's a high probability that the observation is not a outlier but a genuine observation. Due to this the data might have a irregular distribution. The distribution doesn't affect K-Nearest Model as this model doesn't use any function but uses geometric arguements to estimate the target variable.","83f01299":"# Model Building","6b8708d4":"## Decision Tree","82c42edc":"### Train Test split and variable formation"}}