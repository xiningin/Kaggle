{"cell_type":{"1b35d434":"code","b693d048":"code","2c77700d":"code","765600a2":"code","dacad943":"code","22de8992":"code","da2c79fa":"code","c069db71":"code","0ad21476":"markdown","64afa235":"markdown","8bbfe38b":"markdown","f05887e7":"markdown","0bb99e22":"markdown","45dc681a":"markdown"},"source":{"1b35d434":"import numpy as np\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd","b693d048":"# Output format for the data. There were up to eight problems in a given year.\ndt = np.dtype([\n    ('year',      np.int),\n    ('name',      np.unicode_, 30), \n    ('country',   np.unicode_, 30), \n    ('rank',      np.int),\n    ('p1',        np.float),   # Score achieved on the first problem (similarly p2, p3, ...)\n    ('p2',        np.float),\n    ('p3',        np.float),\n    ('p4',        np.float),\n    ('p5',        np.float),\n    ('p6',        np.float),\n    ('p7',        np.float),\n    ('p8',        np.float),\n    ('abs_score', np.float),   # Sum of scores over all problems\n    ('rel_score', np.float),   # Score relative to the maximal achievable score\n    ('medal',     np.unicode_, 1),   # Medal (G,S,B)\n])","2c77700d":"HEADER_LENGTH = 2    # First two rows of a table are header\nMAX_NUM_PROBLEMS = 8 # Maximal number of problems seen in a competition","765600a2":"def scrape_single_year_results(year):\n    \"\"\"\n    Scrapes a webpage with results of the International Olympiad in Informatics for the given year.\n    \n    Returns:\n    numpy array of format dt. Problems for which individual scores are not available are filled with NaN.\n    \"\"\"\n    \n    # Download the webpage\n    page = requests.get('http:\/\/stats.ioinformatics.org\/results\/' + str(year))\n    soup = BeautifulSoup(page.content, 'html.parser')\n\n    # Select all rows from the table with results\n    rows = soup.select(\"table tr\")\n\n    # Number of contestants\n    N = len(rows) - HEADER_LENGTH\n    \n    # Initialize an empty array\n    res = np.zeros(N, dtype = dt)\n    for i in range(1, MAX_NUM_PROBLEMS+1):\n        res['p' + str(i)] = np.nan\n\n    # Get data for each contestant\n    for i, row in enumerate(rows[HEADER_LENGTH:]):\n\n        # Lists of all \"td\" and \"a\" tags\n        list_td = row.find_all('td')\n        list_a  = row.find_all('a')\n\n        # Easy to read off values\n        res[i]['year']      = year\n        res[i]['name']      = list_a[0].text\n        res[i]['country']   = list_a[1].text\n        res[i]['rel_score'] = list_td[-2].text.replace('%', '')\n        res[i]['abs_score'] = list_td[-3].text\n\n        # There are missing values for rank, so we have to be more careful\n        rank = list_td[0].text        \n        if rank == '':\n            # Check if the same score as the previous person\n            if res[i]['abs_score'] == res[i-1]['abs_score']:\n                res[i]['rank'] = res[i-1]['rank']\n            else:\n                res[i]['rank'] = res[i-1]['rank']\n        else:\n            res[i]['rank'] = rank.replace('*', '')\n\n        # Some people do not medal\n        medal = list_td[-1].text\n        if medal != '':\n            res[i]['medal'] = medal[0] #Single character only\n\n        # Each year there are a varying number of tasks\n        num_tasks = len(list_td) - 6    # There are six fixed columns\n        \n        # Read off score for each task\n        for task in range(1, num_tasks+1):\n            score = list_td[2 + task].text\n            if score == '\u2013':\n                res[i]['p' + str(task)] = 0\n            else:\n                res[i]['p' + str(task)] = score\n\n    return res","dacad943":"def scrape_results(from_year = 1989, to_year = 2021):\n    \"\"\"\n    Scrapes a webpage with results of the International Olympiad in Informatics in the given time period.\n    The from_year and to_year parameters are inclusive.\n    \n    Returns:\n    numpy array of format dt. Problems for which individual scores are not available are filled with NaN.\n    \"\"\"\n    # The competition started in 1989\n    if from_year < 1989:\n        from_year = 1989\n\n    # Initialize an empty array of the proper data type\n    res = np.zeros(0, dtype = dt)\n    \n    # Fill it year by year\n    for year in range(from_year, to_year + 1):\n        res = np.concatenate((res, scrape_single_year_results(year)))\n        \n    return res","22de8992":"all_results = scrape_results()","da2c79fa":"# Save as a numpy array\nnp.save('all_results.npy', all_results)","c069db71":"# Also save as csv\npd.DataFrame(all_results).to_csv('all_results.csv', index = False)","0ad21476":"# Scraping functions","64afa235":"# Import libraries","8bbfe38b":"In this notebook we scrape the webpages http:\/\/stats.ioinformatics.org\/results\/YYYY to create an array combining results of all the International Olympiads in Informatics. We use BeautifulSoup to navigate through the webpage.","f05887e7":"# Introduction","0bb99e22":"# Run and save","45dc681a":"# Define the output data type"}}