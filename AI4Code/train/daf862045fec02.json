{"cell_type":{"7ea6f13f":"code","4e25eace":"code","00310daa":"code","584229e4":"code","3e1e47ca":"code","07864710":"code","efc452ba":"code","75bcc377":"code","2497f4f9":"code","0ab13bff":"code","d8298387":"code","3b163a9a":"code","c371c5d3":"code","ee646f01":"code","c7a0a318":"code","250d56f1":"code","6fd5d3f6":"code","8260e6ed":"code","6eb6c04d":"code","45f29d0d":"code","28b95a40":"code","43cbe3f1":"code","7bbd0e93":"code","ac156705":"code","f455c33c":"code","802af26f":"code","69620276":"code","b133a750":"code","9f0b3626":"code","106becea":"code","cce4c441":"code","68033d84":"code","fce5e43c":"code","3be3663a":"code","ebbd9365":"code","c816534e":"code","03011ac0":"code","f780bf26":"code","61f87310":"code","cde77d27":"code","9f1dc21a":"markdown","65092c7a":"markdown","533630c5":"markdown","f7d8beea":"markdown","0aa9ebf1":"markdown","565cea28":"markdown","a74663de":"markdown","c235d324":"markdown","46a7c8b2":"markdown","edb51dbb":"markdown","cc987f98":"markdown","c31ed465":"markdown"},"source":{"7ea6f13f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4e25eace":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom scipy.stats import zscore\nfrom sklearn.cluster import KMeans\nfrom scipy.cluster.hierarchy import linkage, dendrogram\nfrom sklearn.cluster import AgglomerativeClustering","00310daa":"pd.set_option('display.max_columns',None)\npd.set_option('display.max_rows',200)","584229e4":"df=pd.read_csv('..\/input\/ecommerce-data\/data.csv',encoding = 'ISO-8859-1')\ndf.head()","3e1e47ca":"df.shape","07864710":"df.info()","efc452ba":"df.isna().sum()","75bcc377":"df=df.drop(df[df['CustomerID'].isna()==True].index,axis=0)","2497f4f9":"df.shape","0ab13bff":"df.isna().sum()  #rechecking missing values","d8298387":"df['Country'].value_counts()\n# Maximum orders are coming from UK","3b163a9a":"print(df['Country'].unique())\nprint('Total no. of countries from where customers belong: ',df['Country'].nunique())","c371c5d3":"print('Total no. of customers: ',df['CustomerID'].nunique())\nprint('Total transactions done: ',df['InvoiceNo'].nunique())\nprint('Products sold are : ',df['StockCode'].nunique())","ee646f01":"# Need to check the cancelled orders as well as they are of not use for customer segmentation,\n#'C'mentioned before the Invoiceno indicates that the order is cancelled\ndf[df['InvoiceNo'].apply(lambda x: x[0]=='C')]","c7a0a318":"percent_transaction_cancelled = round((df[df['InvoiceNo'].apply(lambda x: x[0]=='C')]['InvoiceNo'].nunique()\/ df['InvoiceNo'].nunique())*100,2)\nprint('Percentage of Transactions cancelled are : ',percent_transaction_cancelled)","250d56f1":"df=df.drop(df[df['InvoiceNo'].apply(lambda x: x[0]=='C')].index,axis=0)\ndf.shape","6fd5d3f6":"df['Amount'] = df['Quantity'] * df['UnitPrice']","8260e6ed":"a=df.groupby('CustomerID').sum()['Amount']\na= a.reset_index()","6eb6c04d":"a.head()","45f29d0d":"b= df.groupby('CustomerID')['InvoiceNo'].count()\nb= b.reset_index()\nb.columns = ['CustomerID', 'Frequency']","28b95a40":"b.head()","43cbe3f1":"df1= pd.merge(a, b, on='CustomerID', how='inner')\ndf1.head()","7bbd0e93":"df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])\nmax_date = df['InvoiceDate'].max()\nmax_date","ac156705":"df['days_diff'] = max_date - df['InvoiceDate']\ndf.head()","f455c33c":"c = df.groupby('CustomerID')['days_diff'].min()\nc = c.reset_index()\nc.head()","802af26f":"c['days_diff'] = c['days_diff'].dt.days\nc.head()","69620276":"df1 = pd.merge(df1, c, on='CustomerID', how='inner')\ndf1.columns = ['CustomerID', 'Amount', 'Frequency', 'Recency']\ndf1.head()","b133a750":"df2=df1[['Amount','Frequency','Recency']]   # using only Amount, Frequency and Recency to find the customer segments.","9f0b3626":"df1_scaled = df2.apply(zscore)    # scaling of data is required as all the calculations is based on distance\ndf1_scaled.head()","106becea":"kmeans = KMeans(random_state=2)\nkmeans.fit(df1_scaled)","cce4c441":"cluster_range = range( 1, 15 )\ncluster_errors = []\nfor num_clusters in cluster_range:\n    clusters = KMeans( num_clusters, n_init = 10 )\n    clusters.fit(df1_scaled)\n    cluster_errors.append( clusters.inertia_ )\nclusters_df = pd.DataFrame( { \"num_clusters\":cluster_range, \"cluster_errors\": cluster_errors } )\nclusters_df[0:15]","68033d84":"plt.figure(figsize=(12,6))\nplt.plot( clusters_df.num_clusters, clusters_df.cluster_errors, marker = \"o\" )","fce5e43c":"kmeans = KMeans(n_clusters=3, n_init = 15, random_state=2)\nkmeans.fit(df1_scaled)\ncentroids = kmeans.cluster_centers_\ncentroid_df = pd.DataFrame(centroids, columns = list(df1_scaled) )\ncentroid_df","3be3663a":"df_labels = pd.DataFrame(kmeans.labels_ , columns = list(['labels']))\ndf_labels['labels'] = df_labels['labels'].astype('category')","ebbd9365":"df_kmeans = df1.join(df_labels)\ndf_kmeans.head()","c816534e":"sns.pairplot(df_kmeans,diag_kind='kde',hue='labels')","03011ac0":"Z = linkage(df1_scaled, method='ward',metric='euclidean')\nplt.figure(figsize=(25, 10))\nplt.title('Hierarchical Clustering Dendrogram')\nplt.xlabel('sample index')\nplt.ylabel('distance')\ndendrogram(\n    Z,\n    leaf_rotation=90.,  # rotates the x axis labels\n    leaf_font_size=8.,  # font size for the x axis labels\n)\nplt.show()","f780bf26":"plt.title('Hierarchical Clustering Dendrogram (truncated)')\nplt.xlabel('sample index')\nplt.ylabel('distance')\ndendrogram(\n    Z,\n    truncate_mode='lastp',  # show only the last p merged clusters\n    p=12,  # show only the last p merged clusters\n    show_leaf_counts=False,  # otherwise numbers in brackets are counts\n    leaf_rotation=90.,\n    leaf_font_size=12.,\n    show_contracted=True,  # to get a distribution impression in truncated branches\n)\nplt.show()","61f87310":"hie_clus = AgglomerativeClustering(n_clusters=3, affinity='euclidean', linkage='ward')\nlabels = hie_clus.fit_predict(df1_scaled)\n\ndf_h = df1.copy(deep=True)\ndf_h['label'] = labels\ndf_h['label']=df_h['label'].astype('category')\ndf_h.head()","cde77d27":"sns.pairplot(df_h,diag_kind='kde',hue='label')","9f1dc21a":"Dendrogram Truncation","65092c7a":"# Hierarchical Clustering","533630c5":"Droping the rows that have missing values in CustomerID column because this rows seems not to be useful for segmenting customer as imputation of CustomerID won't work efficiently.","f7d8beea":"Droping rows that contains cancelled order as it won't be helpful for customer segmentation.","0aa9ebf1":"# K-Means Clustering","565cea28":"# Inferences","a74663de":"From Hierarchical clustering:\n1. Customers belonging to cluster 0 are loyal customers which are same as Kmeans cluster 2.\n2. Customers belonging to cluster 1 are the potential customers sam as Kmeans cluster 0.\n3. Customers belonging to cluster 2 are same as Kmeans cluster 1. ","c235d324":"Creating new columns like Amount (total amount of purchase per customerID), Frequency (no. of times customer visiting the webpage) and Recency(how many days before customer did a transaction from today).","46a7c8b2":"Thus focus must be more on retaining the customers belonging to cluster 2 (kmeans) and cluster 0 (hierarchical) providing better services and discounts. Also customers belonging to cluster 0 (kmeans) and cluster 1 (hierarchical) are the potential customers who can convert into loyal cutsomers.For the same, a survey form could be send to those customers to understand their needs and preferences that can be work upon.","edb51dbb":"From the cluster table above, the drop of error is low from cluster no. 3 which is also evident from elbow plot, thus we can expect our customers are divided into 3 segments.","cc987f98":"From the centroids of Kmeans clustering:\n1. Customers belonging to cluster 0 are the ones who recently visited but have moderate frequency to visit the webpage and purchase products  of moderate amount.\n2. Customers belonging to cluster 1 are the ones who haven't visited the webpage recently, frequency is the lowest with least transaction amount.\n3. Customers belonging to cluster 2 are the ones seems to be loyal customers as they are frequently visiting the webpage with the huge transaction amount.","c31ed465":"# Data Analysis"}}