{"cell_type":{"b61d0998":"code","0478b332":"code","d6657ef2":"code","d121a526":"code","2e091e29":"code","99220a3a":"code","ef125187":"code","23de0378":"code","43c6757a":"code","ebf3907c":"code","36e3021b":"code","87d36ead":"code","6801de57":"code","9b204888":"code","3a27878e":"code","0b401992":"code","9c2f1eee":"code","fa70038f":"code","12b43d0d":"code","fe938275":"code","765b5bd5":"code","9fe5e0d5":"code","8b0aa052":"markdown","23edf122":"markdown","9d3ed677":"markdown","bf31af79":"markdown","8a264c2d":"markdown","b38b70aa":"markdown","f52d4022":"markdown"},"source":{"b61d0998":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0478b332":"titanic_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntitanic_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nPassengerId = titanic_test['PassengerId']\ntitanic_train.head()","d6657ef2":"titanic_train.info()","d121a526":"titanic_train.describe()","2e091e29":"titanic_train.hist(bins=50, figsize=(20, 15))\nplt.show","99220a3a":"titanic_train.info()","ef125187":"mean = titanic_train['Age'].mean()\ntitanic_train['Age'].fillna(mean, inplace=True)\n\nmode = titanic_train['Embarked'].mode()\ntitanic_train['Embarked'].fillna(mode[0], inplace=True)","23de0378":"titanic_test.info()","43c6757a":"age_mean = titanic_test['Age'].mean()\ntitanic_test['Age'].fillna(age_mean, inplace=True)\n\nfare_mean = titanic_test['Fare'].mean()\ntitanic_test['Fare'].fillna(fare_mean, inplace=True)\n\nmode = titanic_test['Embarked'].mode()\ntitanic_test['Embarked'].fillna(mode[0], inplace=True)","ebf3907c":"corr_matrix = titanic_train.corr()\ncorr_matrix[\"Survived\"].sort_values(ascending=False)","36e3021b":"#  Custom Transformers to Add Extra Features\u00b6\nfrom sklearn.base import BaseEstimator, TransformerMixin\n\nclass CombinedAttributesAdder(BaseEstimator, TransformerMixin):\n    def __init__(self, X=None, tittle = True, deck = True, family_size = True, age_class = True, fare_per_person = True):\n        self.X = None\n        self.tittle = tittle\n        self.deck = deck\n        self.family_size = family_size\n        self.age_class = age_class\n        self.fare_per_person = fare_per_person\n    \n    def substrings_in_string(self, big_string, substrings):\n        for substring in substrings:\n            if big_string.find(substring) != -1:\n                return substring\n        return substrings[-1]\n\n    def replace_titles(self, x):\n        title = x['Title']\n        if title in ['Don', 'Major', 'Capt', 'Jonkheer', 'Rev', 'Col']:\n            return 'Mr'\n        elif title in ['Countess', 'Mme']:\n            return 'Mrs'\n        elif title in ['Mlle', 'Ms']:\n            return 'Miss'\n        elif title =='Dr':\n            if x['Sex']=='Male':\n                return 'Mr'\n            else:\n                return 'Mrs'\n        else:\n            return title\n\n    def add_tittle(self):\n        title_list = ['Mrs', 'Mr', 'Master', 'Miss', 'Major', 'Rev',\n                      'Dr', 'Ms', 'Mlle','Col', 'Capt', 'Mme', 'Countess',\n                      'Don', 'Jonkheer']\n        \n        self.X['Title'] = self.X['Name'].map(lambda x: self.substrings_in_string(x, title_list))\n        self.X['Title'] = self.X.apply(self.replace_titles, axis=1)\n    \n    def add_deck(self):\n        cabin_list = ['A', 'B', 'C', 'D', 'E', 'F', 'T', 'G', 'Unknown']\n        self.X['Cabin'] = self.X['Cabin'].astype(str)\n        self.X['Deck'] = self.X['Cabin'].map(lambda x: self.substrings_in_string(x, cabin_list))\n    \n    def add_family_size(self):\n        self.X['Family_Size'] = self.X['SibSp'] + self.X['Parch']\n    \n    def add_age_class(self):\n        self.X['Age*Class'] = self.X['Age'] * self.X['Pclass']\n    \n    def add_age_calss(self):\n        self.X['Fare_Per_Person'] = self.X['Fare']\/(self.X['Family_Size']+1)\n        \n    def fit(self, X, y=None):\n        return self # nothing else to do\n    \n    def transform(self, X):\n        self.X = X\n        if self.tittle:\n            self.add_tittle()\n        if self.deck:\n            self.add_deck()\n        if self.family_size:\n            self.add_family_size()\n        if self.age_class:\n            self.add_age_class()\n        if self.fare_per_person:\n            self.add_age_calss()\n        return self.X","87d36ead":"add_atr = CombinedAttributesAdder()\ntitanic_train = add_atr.transform(titanic_train)\ntitanic_test = add_atr.transform(titanic_test)","6801de57":"titanic_train.head()","9b204888":"titanic_train = titanic_train.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)\ntitanic_test = titanic_test.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)\n\n# titanic_train = pd.get_dummies(titanic_train)\n# titanic_test = pd.get_dummies(titanic_test)\n\ntitanic_train.head()","3a27878e":"from sklearn.preprocessing import OneHotEncoder\n\ncat_features = ['Sex', 'Embarked', 'Title', 'Deck']\n\ntrain_cat_features = titanic_train[cat_features]\ntest_cat_features = titanic_test[cat_features]\n\ncat_encoder = OneHotEncoder()\n\ncat_encoder.fit(train_cat_features)\ntrain_hot_enc = cat_encoder.transform(train_cat_features).toarray()\ntest_hot_enc = cat_encoder.transform(test_cat_features).toarray()\n\ntrain_num = titanic_train.drop(cat_features, axis=1)\ntest_num = titanic_test.drop(cat_features, axis=1)","0b401992":"y = train_num['Survived']\ntrain_num = train_num.drop(['Survived'], axis=1)","9c2f1eee":"train = np.concatenate((train_num, train_hot_enc), axis=1)\ntest = np.concatenate((test_num, test_hot_enc), axis=1)","fa70038f":"from sklearn.preprocessing import StandardScaler\nstd = StandardScaler()\nX = std.fit_transform(train)\nX_test = std.fit_transform(test)","12b43d0d":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X, y, random_state = 42)","fe938275":"from sklearn.svm import SVC\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\n\nsvc = SVC(random_state=0)\nsvc.fit(X_train, y_train)\ntrain_acc = svc.score(X_train, y_train)\ntest_acc = svc.score(X_val, y_val)\nprint(\"========== SVC ==========\")\nprint(\"Train set accuracy: {}\".format(train_acc))\nprint(\"Validation set accuracy: {}\".format(test_acc))\n\nSGD = SGDClassifier(random_state=0)\nSGD.fit(X_train, y_train)\ntrain_acc = SGD.score(X_train, y_train)\ntest_acc = SGD.score(X_val, y_val)\nprint(\"========== SGD ==========\")\nprint(\"Train set accuracy: {}\".format(train_acc))\nprint(\"Validation set accuracy: {}\".format(test_acc))\n\ntree = DecisionTreeClassifier(random_state=0)\ntree.fit(X_train, y_train)\ntrain_acc = tree.score(X_train, y_train)\ntest_acc = tree.score(X_val, y_val)\nprint(\"========== Tree ==========\")\nprint(\"Train set accuracy: {}\".format(train_acc))\nprint(\"Validation set accuracy: {}\".format(test_acc))\n\nforest_clf = RandomForestClassifier(random_state=0)\nforest_clf.fit(X_train, y_train)\nprint(\"========== Forest ==========\")\ntrain_acc = forest_clf.score(X_train, y_train)\ntest_acc = forest_clf.score(X_val, y_val)\nprint(\"Train set accuracy: {}\".format(train_acc))\nprint(\"Validation set accuracy: {}\".format(test_acc))\n\n\nboost = AdaBoostClassifier(tree,random_state=0)\nboost.fit(X_train, y_train)\ntrain_acc = boost.score(X_train, y_train)\ntest_acc = boost.score(X_val, y_val)\nprint(\"========== Boost ==========\")\nprint(\"Train set accuracy: {}\".format(train_acc))\nprint(\"Validation set accuracy: {}\".format(test_acc))","765b5bd5":"from sklearn.metrics import classification_report\ny_pred = forest_clf.predict(X_val)\nprint(classification_report(y_val, y_pred, target_names=['Not-survived', 'survived']))","9fe5e0d5":"test_submitted = pd.Series(forest_clf.predict(X_test), name=\"Survived\")\n\nresults = pd.concat([PassengerId,test_submitted],axis=1)\n\nresults.to_csv(\"Gender_Submission.csv\",index=False)","8b0aa052":"# Fill missing Values","23edf122":"# Training Classifier","9d3ed677":"# Data Prepocessing","bf31af79":"# Get The Dataset","8a264c2d":"# Work with Features","b38b70aa":"# Handling Missing Features","f52d4022":"# Submission"}}