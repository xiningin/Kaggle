{"cell_type":{"c5f084a8":"code","5ef3767f":"code","398af763":"code","9a1d2efe":"code","2d2af3e3":"code","ba219731":"code","14d3cca9":"code","3f8165d7":"code","8cbf5e07":"code","1f4fc28b":"code","aaca1bfc":"code","28dd0f07":"code","0a49a946":"code","dd7995f3":"markdown","fd051655":"markdown","b261392f":"markdown","f79bb54c":"markdown","ee828567":"markdown","dbb0691b":"markdown","3132153f":"markdown","f6ecc489":"markdown"},"source":{"c5f084a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5ef3767f":"import tensorflow as tf\nprint(tf.__version__)","398af763":"import numpy as np\nimport matplotlib.pyplot as plt\ndef plot_series(time, series, format=\"-\", start=0, end=None):\n    plt.plot(time[start:end], series[start:end], format)\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Value\")\n    plt.grid(True)\n    ","9a1d2efe":"import csv\ntime_step = []\nsunspots = []\n\nwith open('\/kaggle\/input\/sunspots\/Sunspots.csv') as csvfile:\n  reader = csv.reader(csvfile, delimiter=',')\n  next(reader)\n  for row in reader:\n    sunspots.append(float(row[2]))\n    time_step.append(int(row[0]))\n\nseries = np.array(sunspots)\ntime = np.array(time_step)\nplt.figure(figsize=(10, 6))\nplot_series(time, series)","2d2af3e3":"split_time = 2800\ntime_train = time[:split_time]\nx_train = series[:split_time]\ntime_valid = time[split_time:]\nx_valid = series[split_time:]\n\nwindow_size = 30\nbatch_size = 32\nshuffle_buffer_size = 1000","ba219731":"def windowed_dataset(series, window_size, batch_size, shuffle_buffer):\n    series = tf.expand_dims(series, axis=-1)\n    ds = tf.data.Dataset.from_tensor_slices(series)\n    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)\n    ds = ds.flat_map(lambda w: w.batch(window_size + 1))\n    ds = ds.shuffle(shuffle_buffer)\n    ds = ds.map(lambda w: (w[:-1], w[1:]))\n    return ds.batch(batch_size).prefetch(1)","14d3cca9":"def model_forecast(model, series, window_size):\n    ds = tf.data.Dataset.from_tensor_slices(series)\n    ds = ds.window(window_size, shift=1, drop_remainder=True)\n    ds = ds.flat_map(lambda w: w.batch(window_size))\n    ds = ds.batch(32).prefetch(1)\n    forecast = model.predict(ds)\n    return forecast","3f8165d7":"train_set = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=shuffle_buffer_size)\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Conv1D(filters=60, kernel_size=5,\n                      strides=1, padding=\"causal\",\n                      activation=\"relu\",\n                      input_shape=[None, 1]),\n  tf.keras.layers.LSTM(60, return_sequences=True),\n  tf.keras.layers.LSTM(60, return_sequences=True), #declaring the LSTM layers\n  tf.keras.layers.Dense(10, activation=\"relu\"),\n  tf.keras.layers.Dense(10, activation=\"relu\"),\n  tf.keras.layers.Dense(1),\n  tf.keras.layers.Lambda(lambda x: x * 400)\n])\n\n\noptimizer = tf.keras.optimizers.SGD(lr=1e-5, momentum=0.9)\nmodel.compile(loss=tf.keras.losses.Huber(),\n              optimizer=optimizer,\n              metrics=[\"mae\"])\nhistory = model.fit(train_set,epochs=700)","8cbf5e07":"rnn_forecast = model_forecast(model, series[..., np.newaxis], window_size)\nrnn_forecast = rnn_forecast[split_time - window_size:-1, -1, 0]","1f4fc28b":"plt.figure(figsize=(10, 6))\nplot_series(time_valid, x_valid)\nplot_series(time_valid, rnn_forecast)","aaca1bfc":"tf.keras.metrics.mean_absolute_error(x_valid, rnn_forecast).numpy() # using MAE","28dd0f07":"import matplotlib.image  as mpimg\nimport matplotlib.pyplot as plt\n\nloss=history.history['loss']\nepochs=range(len(loss))\nplt.plot(epochs, loss, 'r')\nplt.title('Training loss')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend([\"Loss\"])\nplt.figure()\n\nzoomed_loss = loss[400:]\nzoomed_epochs = range(400,700)\nplt.plot(zoomed_epochs, zoomed_loss, 'r')\nplt.title('Training loss')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend([\"Loss\"])\n\nplt.figure()","0a49a946":"print(rnn_forecast)","dd7995f3":"# Creating window","fd051655":"# Splitting test and train and setting window and batch size","b261392f":"# Forecast function","f79bb54c":"# Plotting the forecast","ee828567":"# **Plotting the time series Data**","dbb0691b":"# Forecasted values","3132153f":"# Plotting Loss vs Epochs","f6ecc489":"# Defining the model"}}