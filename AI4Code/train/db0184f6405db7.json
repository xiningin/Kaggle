{"cell_type":{"7b2d4866":"code","6cfdb083":"code","cb16cbea":"code","8d127b8d":"code","cec3b0bf":"code","ee5b079f":"code","6302d340":"code","429bbaab":"code","c8f80dcf":"code","69678ff0":"code","e0d15650":"code","700b5c7f":"code","093fcbd1":"code","9f9e66cb":"code","282a6021":"code","35b37c75":"code","ce26a242":"code","3847ce79":"code","ff9b8c23":"code","1f1bebe9":"code","2244c3f7":"code","6ec0e5f0":"code","5fefaad0":"code","3ab275c4":"code","1a87edb6":"code","8549566a":"code","1f971615":"code","98c0b182":"code","01f36615":"code","7cfdeb89":"code","88878928":"code","e3e32548":"code","eaabcbf7":"code","5c562bd3":"code","4f53237e":"code","ff7d2fc6":"code","6a8ff693":"code","9a3b7b44":"code","6d5c96f2":"code","ae83e49b":"code","28c5aac6":"code","21b17879":"code","765a288b":"code","c5d84526":"code","a51dda02":"code","f449a09a":"code","42f27f56":"code","b232323f":"code","6c976615":"code","44e88d19":"markdown","7429eede":"markdown","50f447f9":"markdown","91f3d1b9":"markdown","8630f8b4":"markdown","0131c47c":"markdown","2abb9473":"markdown","45f34457":"markdown","e40472bb":"markdown","278f087d":"markdown","a3c7da89":"markdown","934871c1":"markdown","f726c5a2":"markdown","58f0e9ab":"markdown","85cde329":"markdown","b5a5dd3d":"markdown","c14b441e":"markdown","bea310cf":"markdown","ba49c30c":"markdown","7a8fc7fb":"markdown","ba2dc9f5":"markdown","733d8bc6":"markdown","67251d86":"markdown","673867b7":"markdown"},"source":{"7b2d4866":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score, roc_curve\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","6cfdb083":"# read data \ndf = pd.read_csv(\"\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")","cb16cbea":"df.head()","8d127b8d":"# describe basic statistics of data\ndf.describe()","cec3b0bf":"# information about data frame\ndf.info()","ee5b079f":"# missing value\ndf.isnull().sum()","6302d340":"for i in list(df.columns):\n    print(\"{} -- {}\".format(i, df[i].value_counts().shape[0]))","429bbaab":"categorical_list = [\"sex\", \"cp\",\"fbs\",\"restecg\",\"exng\",\"slp\",\"caa\",\"thall\",\"output\"]","c8f80dcf":"df_categoric = df.loc[:, categorical_list]\nfor i in categorical_list:\n    plt.figure()\n    sns.countplot(x = i, data = df_categoric, hue = \"output\")\n    plt.title(i)","69678ff0":"numeric_list = [\"age\", \"trtbps\",\"chol\",\"thalachh\",\"oldpeak\",\"output\"]","e0d15650":"df_numeric = df.loc[:, numeric_list]\nsns.pairplot(df_numeric, hue = \"output\", diag_kind = \"kde\")\nplt.show()","700b5c7f":"scaler = StandardScaler()\nscaler","093fcbd1":"scaled_array = scaler.fit_transform(df[numeric_list[:-1]])","9f9e66cb":"scaled_array ","282a6021":"# pd.DataFrame(scaled_array).describe()","35b37c75":"df_dummy = pd.DataFrame(scaled_array, columns = numeric_list[:-1])\ndf_dummy.head()","ce26a242":"df_dummy = pd.concat([df_dummy, df.loc[:, \"output\"]], axis = 1)\ndf_dummy.head()","3847ce79":"data_melted = pd.melt(df_dummy, id_vars = \"output\", var_name = \"features\", value_name = \"value\")\ndata_melted.head(20)","ff9b8c23":"# box plot\nplt.figure()\nsns.boxplot(x = \"features\", y = \"value\", hue = \"output\", data= data_melted)\nplt.show()","1f1bebe9":"# swarm plot\nplt.figure()\nsns.swarmplot(x = \"features\", y = \"value\", hue = \"output\", data= data_melted)\nplt.show()","2244c3f7":"sns.catplot(x = \"exng\", y = \"age\", hue = \"output\", col = \"sex\", kind = \"swarm\", data = df)\nplt.show()","6ec0e5f0":"sns.catplot(x = \"thall\", y = \"age\", hue = \"output\", col = \"sex\", kind = \"swarm\", data = df)\nplt.show()","5fefaad0":"sns.catplot(x = \"slp\", y = \"age\", hue = \"output\", col = \"sex\", kind = \"swarm\", data = df)\nplt.show()","3ab275c4":"sns.catplot(x = \"restecg\", y = \"age\", hue = \"output\", col = \"sex\", kind = \"swarm\", data = df)\nplt.show()","1a87edb6":"plt.figure(figsize = (14,10))\nsns.heatmap(df.corr(), annot = True, fmt = \".1f\", linewidths = .7)\nplt.show()","8549566a":"numeric_list = [\"age\", \"trtbps\",\"chol\",\"thalachh\",\"oldpeak\"]\ndf_numeric = df.loc[:, numeric_list]\ndf_numeric.head()","1f971615":"df.describe()","98c0b182":"# outlier detection\nfor i in numeric_list:\n    \n    # IQR\n    Q1 = np.percentile(df.loc[:, i],25)\n    Q3 = np.percentile(df.loc[:, i],75)\n    \n    IQR = Q3 - Q1\n    \n    print(\"Old shape: \", df.loc[:, i].shape)\n    \n    # upper bound\n    upper = np.where(df.loc[:, i] >= (Q3 +2.5*IQR))\n    \n    # lower bound\n    lower = np.where(df.loc[:, i] <= (Q1 - 2.5*IQR))\n    \n    print(\"{} -- {}\".format(upper, lower))\n    \n    try:\n        df.drop(upper[0], inplace = True)\n    except: print(\"KeyError: {} not found in axis\".format(upper[0]))\n        \n    try:\n        df.drop(lower[0], inplace = True)\n    except:  print(\"KeyError: {} not found in axis\".format(lower[0]))\n        \n    print(\"New shape: \", df.shape)","01f36615":"df1 = df.copy()","7cfdeb89":"df1 = pd.get_dummies(df1, columns = categorical_list[:-1], drop_first = True)\ndf1.head()","88878928":"# \nX = df1.drop([\"output\"], axis = 1)\ny = df1[[\"output\"]]","e3e32548":"scaler = StandardScaler()\nscaler","eaabcbf7":"X[numeric_list[:-1]] = scaler.fit_transform(X[numeric_list[:-1]])\nX.head()","5c562bd3":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 3)\nprint(\"X_train: {}\".format(X_train.shape))\nprint(\"X_test: {}\".format(X_test.shape))\nprint(\"y_train: {}\".format(y_train.shape))\nprint(\"y_test: {}\".format(y_test.shape))","4f53237e":"logreg = LogisticRegression()\nlogreg","ff7d2fc6":"# fitting = training\nlogreg.fit(X_train, y_train)","6a8ff693":"# calculate probabilities\ny_pred_prob = logreg.predict_proba(X_test)\ny_pred_prob","9a3b7b44":"y_pred = np.argmax(y_pred_prob, axis = 1)\ny_pred","6d5c96f2":"#dummy_ = pd.DataFrame(y_pred_prob)\n#dummy_[\"y_pred\"] = y_pred\n#dummy_.head()","ae83e49b":"print(\"Test accuracy: {}\".format(accuracy_score(y_pred, y_test)))","28c5aac6":"# ROC Curve\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob[:,1])","21b17879":"# plot curve\nplt.plot([0,1],[0,1],\"k--\")\nplt.plot(fpr, tpr, label = \"Logistic Regression\")\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\"Logistic Regression ROC Curve\")\nplt.show()","765a288b":"lr = LogisticRegression()\nlr","c5d84526":"penalty = [\"l1\", \"l2\"]\n\nparameters = {\"penalty\":penalty}","a51dda02":"lr_searcher = GridSearchCV(lr, parameters)","f449a09a":"lr_searcher.fit(X_train, y_train)","42f27f56":"print(\"Best parameters: \",lr_searcher.best_params_)","b232323f":"y_pred = lr_searcher.predict(X_test)","6c976615":"print(\"Test accuracy: {}\".format(accuracy_score(y_pred, y_test)))","44e88d19":"### Scaling","7429eede":"# Heart Attack Analysis & Prediction(KALP KR\u0130Z\u0130 ANAL\u0130Z\u0130 VE TAHM\u0130N\u0130)","50f447f9":"<a id=\"6\"><\/a>\n## Categorical Feature Analysis","91f3d1b9":"### Logistic Regression Hyperparameter Tuning","8630f8b4":"<a id=\"10\"><\/a>\n## Swarm Plot Analysis","0131c47c":"<a id=\"14\"><\/a>\n## Modelling","2abb9473":"### Logistic Regression","45f34457":"<a id=\"1\"><\/a>\n## Python Libraries\n* In this section, we import used libraries during this kernel.","e40472bb":"## What we will do in the project?\n* EDA\n* Missing Value Analysis\n* Categoric and Numeric Features\n* Standardization\n* Box - Swarm - Cat - Correlation Plot Analysis\n* Outlier Detection\n* Modelling and Tuning Machine Learning Model","278f087d":"### ROC Curve\n![indir (3).png](attachment:c610c433-e7cb-4761-b8ce-f391bf700d3a.png)","a3c7da89":"<a id=\"11\"><\/a>\n## Cat Plot Analysis","934871c1":"## Analysis Content\n1. [Python Libraries](#1)\n1. [Data Content](#2)\n1. [Read and Analyse Data](#3)\n1. [Missing Value Analysis](#4)\n1. [Unique Value Analysis](#5)\n1. [Categorical Feature Analysis](#6)\n1. [Numeric Feature Analysis](#7)\n1. [Standardization](#8)\n1. [Box Plot Analysis](#9)\n1. [Swarm Plot Analysis](#10)\n1. [Cat Plot Analysis](#11)\n1. [Correlation Analysis](#12)\n1. [Outlier Detection](#13)\n1. [Modelling](#14)\n    1. Encoding Categorical Columns\n    1. Scaling\n    1. Train\/Test Split\n    1. Logistic Regression\n    1. Logistic Regression Hyperparameter Tuning","f726c5a2":"<a id=\"12\"><\/a>\n## Correlation Analysis","58f0e9ab":"<a id=\"4\"><\/a>\n## Missing Value Analysis","85cde329":"## Introduction\n* A heart attack, also called a myocardial infarction, happens when a part of the heart muscle doesn't get enough blood.\n* The more time that passes without treatment to restore blood flow, the greater the damage to the heart muscle.\n* Coronary artery disease (CAD) is the main cause of heart attack.\n![indir.jfif](attachment:82bd46ea-d570-4a1a-9ab4-40de978206d9.jfif)","b5a5dd3d":"<a id=\"2\"><\/a>\n## Data Content\n* **Age:** Age of the patient\n* **Sex:** Sex of the patient\n* **exang:** exercise induced angina (1 = yes; 0 = no)\n* **ca:** number of major vessels (0-3)\n* **cp:** Chest Pain type chest pain type\n    * Value 1: typical angina\n    * Value 2: atypical angina\n    * Value 3: non-anginal pain\n    * Value 4: asymptomatic\n* **trtbps:** resting blood pressure (in mm Hg)\n* **chol:** cholestoral in mg\/dl fetched via BMI sensor\n* **fbs:** (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n* **rest_ecg:** resting electrocardiographic results\n    * Value 0: normal\n    * Value 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\n    * Value 2: showing probable or definite left ventricular hypertrophy by Estes' criteria\n* **thalach:** maximum heart rate achieved\n* **target:** 0= less chance of heart attack 1= more chance of heart attack\n\n","c14b441e":"<a id=\"13\"><\/a>\n## Outlier Detection\n* Outliers can disrupt ML process.\n![indir.png](attachment:82f1f0a8-5c74-4c7d-8f21-dbadb49e88ae.png)","bea310cf":"<a id=\"3\"><\/a>\n## Read and Analyse Data\n* In this section, we read heart.csv","ba49c30c":"### Train\/Test Split","7a8fc7fb":"<a id=\"9\"><\/a>\n## Box Plot Analysis","ba2dc9f5":"### Encoding Categorical Columns\n![indir (1).png](attachment:e60cff87-a6ea-4d1d-8abe-24671276fe49.png)","733d8bc6":"<a id=\"5\"><\/a>\n## Unique Value Analysis","67251d86":"<a id=\"7\"><\/a>\n## Numeric Feature Analysis\n* Bivariate data analysis with scatter plot","673867b7":"<a id=\"8\"><\/a>\n## Standardization"}}