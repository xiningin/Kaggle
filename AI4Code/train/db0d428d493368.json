{"cell_type":{"716968c4":"code","38b6f2df":"code","1f014efc":"code","16f76cfa":"code","ee2c2dc6":"code","d98d4920":"code","3710d2f6":"code","6559b83f":"code","11fde0fe":"code","5e856c82":"code","4dd25651":"code","628e5fdc":"code","45e3adc2":"code","9570570b":"code","5a94f611":"code","89232210":"code","1c58f1fd":"code","e2686994":"markdown","272d321b":"markdown","6c3c9e0c":"markdown","6bb1f5d3":"markdown","5e6552ff":"markdown","2858625f":"markdown"},"source":{"716968c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","38b6f2df":"train_dir = '..\/input\/10-monkey-species\/training\/training\/'\nval_dir = '..\/input\/10-monkey-species\/validation\/validation\/'","1f014efc":"\n\nlabels = pd.read_csv(\"..\/input\/10-monkey-species\/monkey_labels.txt\")\nnum_classes = labels['Label'].size\nlabels","16f76cfa":"# for display images in notebook\nfrom IPython.display import Image, display\n\nfrom os import listdir\n%matplotlib inline","ee2c2dc6":"IMAGE_WIDTH = 300\nIMAGE_HEIGHT = 300\nBATCH_SIZE = 24","d98d4920":"from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\nfrom keras.applications.inception_v3 import preprocess_input\n\n\n## use inception's own preprocess function\ntrain_data_gen_aug=ImageDataGenerator(\n                              preprocessing_function=preprocess_input,\n                              rotation_range=35,\n                              width_shift_range=0.2,\n                              height_shift_range=0.2,\n                              shear_range=0.2,\n                              horizontal_flip=True,\n                              fill_mode='nearest' #default\n                              \n                             )\n\nvalidation_data_gen=ImageDataGenerator(\n                                       preprocessing_function=preprocess_input\n                                      )\n","3710d2f6":"train_gen=train_data_gen_aug.flow_from_directory(train_dir,\n                                            target_size=(IMAGE_WIDTH,\n                                                       IMAGE_HEIGHT),\n                                            batch_size=BATCH_SIZE,\n                                            shuffle=True,\n                                            class_mode=\"categorical\")\nval_gen = validation_data_gen.flow_from_directory(val_dir, \n                                                    target_size=(IMAGE_WIDTH, IMAGE_HEIGHT), \n                                                    batch_size = BATCH_SIZE, \n                                                    \n                                                    class_mode=\"categorical\")","6559b83f":"train_count=1097\nval_count=272\nsteps_per_epoch=train_count\/\/BATCH_SIZE\nsteps_per_epoch","11fde0fe":"from keras.applications import InceptionV3\nfrom keras.models import Sequential\nfrom keras.layers import Dense, GlobalAveragePooling2D, Dropout\n\n# set  up the model\nmodel=Sequential()\n# add inception pretrained model, the wieghts 80Mb\nmodel.add(InceptionV3(include_top=False, \n                      pooling='avg', \n                      weights='..\/input\/inceptionv3\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5'\n                     ))\n# use relu as activation function \"vanishing gradiends\" :)\nmodel.add(Dense(512, activation=\"relu\"))  \n# add drop out to avoid overfitting\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes, activation=\"softmax\"))","5e856c82":"# do not need to train the pre train layer\nmodel.layers[0].trainable=False","4dd25651":"model.layers[0].summary()","628e5fdc":"model.summary()","45e3adc2":"\n# from keras import optimizers\n# adam = optimizers.Adam(lr=0.0001, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0.00001)\n# use adam to avoid overfitting\n\nmodel.compile(loss=\"categorical_crossentropy\",\n              optimizer='adam',\n              metrics=[\"accuracy\"])\n","9570570b":"model_history = model.fit_generator(train_gen,\n                                    steps_per_epoch=steps_per_epoch,\n                                    epochs=32,\n                                    validation_data=val_gen,\n                                    validation_steps=val_count \/\/ BATCH_SIZE\n                                   )\n","5a94f611":"model.save('incept_adv.h5') ","89232210":"import pandas as pd\nhistory = pd.DataFrame()\nhistory[\"acc\"] = model_history.history[\"acc\"]\nhistory[\"val_acc\"] = model_history.history[\"val_acc\"]\nhistory.plot(figsize=(12, 6))","1c58f1fd":"acc = model_history.history['acc']\nval_acc = model_history.history['val_acc']\nloss = model_history.history['loss']\nval_loss = model_history.history['val_loss']\nepochs = range(1, len(acc) + 1)\n\nimport matplotlib.pyplot as plt\n\nplt.title('Training and validation accuracy')\nplt.plot(epochs, acc, 'red', label='Training acc')\nplt.plot(epochs, val_acc, 'blue', label='Validation acc')\nplt.legend()\n\nplt.figure()\nplt.title('Training and validation loss')\nplt.plot(epochs, loss, 'red', label='Training loss')\nplt.plot(epochs, val_loss, 'blue', label='Validation loss')\n\nplt.legend()\n\nplt.show()","e2686994":"**Credits:**\n1. Dan Becker https:\/\/www.kaggle.com\/learn\n2. Juan https:\/\/www.kaggle.com\/moriano\/monkey-species-transfer-learning-95-6-accuracy\n3. Dan Rusei https:\/\/www.kaggle.com\/danrusei\/10-monkey-keras-transfer-learning-resnet50","272d321b":"# Compile then Fit the model","6c3c9e0c":"# About\nThis is a deep learning kernel to use Inception v3 pretrained model to train the classificators for monkeys. \n- keras\n- tensorflow\n- inception v3\n\nIt is also my assignment for machine learning paper at uni.\n\n\n","6bb1f5d3":"## Set up Model","5e6552ff":"# Preparation\n","2858625f":"# Data Augmetation"}}