{"cell_type":{"82fbebe7":"code","b80b2110":"code","5df4c42b":"code","d676499f":"code","5a68e526":"code","22269cd6":"code","002ccee0":"code","d91f5feb":"code","4d26f1fe":"code","d63d86f2":"code","e7ce0e15":"code","abd34cf6":"code","dd388c49":"markdown","d90f7751":"markdown","f65fd7b5":"markdown","1c85e204":"markdown"},"source":{"82fbebe7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b80b2110":"store_sales = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/train.csv',\n                parse_dates=[\"date\"],\n                infer_datetime_format=True,\n                )\nstore_sales.info()","5df4c42b":"grocery = store_sales[store_sales['family'] == 'GROCERY I']\ngrocery_sales = grocery.groupby('date').sum()['sales']\ngrocery_sales","d676499f":"df = grocery_sales.to_frame()\ndf['time'] = np.arange(len(df.index)) # time dummy\ndf.head()","5a68e526":"from sklearn.linear_model import LinearRegression\n# Training data\nX = df.loc[:, ['time']]  # features\ny = df.loc[:, 'sales']  # target\n\nmodel = LinearRegression()\nmodel.fit(X, y)\n\ny_pred = pd.Series(model.predict(X), index=X.index)\ny_pred","22269cd6":"import matplotlib.pyplot as plt\n\n# Set Matplotlib defaults\nplt.style.use(\"seaborn-whitegrid\")\nplt.rc(\"figure\", autolayout=True, figsize=(11, 4))\nplt.rc(\n    \"axes\",\n    labelweight=\"bold\",\n    labelsize=\"large\",\n    titleweight=\"bold\",\n    titlesize=14,\n    titlepad=10,\n)\nplot_params = dict(\n    color=\"0.75\",\n    style=\".-\",\n    markeredgecolor=\"0.25\",\n    markerfacecolor=\"0.25\",\n    legend=False,\n)\n%config InlineBackend.figure_format = 'retina'","002ccee0":"fig, ax = plt.subplots()\n\nax = y.plot(**plot_params, alpha=0.5)\nax = y_pred.plot(ax=ax, linewidth=3)\nax.set_title('Time Plot for Grocery Sales');","d91f5feb":"df['Lag_1'] = df['sales'].shift(1)\ndf.head()","4d26f1fe":"df.dropna(inplace=True) \ndf","d63d86f2":"# Training data\nX = df.loc[:, ['Lag_1']]  # features\ny = df.loc[:, 'sales']  # target\n\nmodel = LinearRegression()\nmodel.fit(X, y)\n\ny_pred = pd.Series(model.predict(X), index=X.index)\ny_pred","e7ce0e15":"fig, ax = plt.subplots()\nax.plot(X['Lag_1'], y, '.', color='0.25')\nax.plot(X['Lag_1'], y_pred)\nax.set_aspect('equal')\nax.set_ylabel('sales')\nax.set_xlabel('Lag_1')\nax.set_title('Lag Plot of Grocery sales');","abd34cf6":"ax = y.plot(**plot_params)\nax = y_pred.plot()","dd388c49":"Extract sales for Grocery product family","d90f7751":"Add Lag feature","f65fd7b5":"Build Model","1c85e204":"Add Time-step feature"}}