{"cell_type":{"011d5296":"code","40de5f4b":"code","bf0bcfcf":"code","a0fbdc33":"code","512eb60e":"code","543543a6":"code","078e60e5":"code","bd709930":"code","63024352":"code","e0497fe5":"code","a82ef408":"code","7da58de3":"code","f376976d":"code","6c988fab":"code","81a24e16":"code","f0cb8f66":"code","cdd5589f":"code","bb387d8f":"code","e2866d25":"code","ae95fba0":"code","a6b0809e":"code","7052f6f5":"code","1dab019a":"code","276a9da6":"code","cdbdeeaa":"code","6ba6bb28":"code","eff6f3a8":"code","6c649647":"code","0f283601":"code","ac833516":"code","ebe2c985":"code","5aa600ed":"code","0f8e2f52":"code","6d971ef1":"code","c800446f":"code","57e13e76":"code","d74cd50d":"code","8c28881e":"code","e7f69b4d":"code","c9b3061f":"code","a71f41e8":"code","8e54fe7e":"code","e714b173":"code","013f50c3":"code","eef4c71e":"code","fb0bb5c4":"code","8a1754c2":"code","5e8c2fcb":"code","2337f05a":"code","b0a3e17a":"code","f3065250":"code","919bae3d":"code","6e7d5441":"code","3dda4c96":"code","420bd720":"code","2ede8d1d":"markdown"},"source":{"011d5296":"# import libraries\nimport os\nimport time\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom matplotlib.colors import rgb2hex\nfrom matplotlib.cm import get_cmap\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\nfrom mpl_toolkits import mplot3d\nfrom pylab import rcParams\n\nfrom sklearn.manifold import TSNE\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LogisticRegression,RidgeClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score, f1_score\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, StackingClassifier, GradientBoostingClassifier\nimport xgboost\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout , BatchNormalization\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils import np_utils\nfrom keras.optimizers import RMSprop, Adam\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nsns.set(rc={'figure.facecolor':'#ffffff'})","40de5f4b":"# get data\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","bf0bcfcf":"# load data\ndf_train = pd.read_csv('\/kaggle\/input\/human-activity-recognition-with-smartphones\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/human-activity-recognition-with-smartphones\/test.csv')","a0fbdc33":"# shape data\nprint(f\"Train Dataset Shape: {df_train.shape}\")\nprint(f\"Test Dataset Shape: {df_test.shape}\")","512eb60e":"# missing data counts\nprint(f\"Train Dataset Missing Data Counts: {df_train.isna().sum().sum()}\")\nprint(f\"Test Dataset Missing Data Counts: {df_test.isna().sum().sum()}\")","543543a6":"# duplicates data counts\nprint(f\"Train Dataset Duplicate Data Counts: {df_train.duplicated().sum()}\")\nprint(f\"Test Dataset Duplicate Data Counts: {df_test.duplicated().sum()}\")","078e60e5":"# check data balanced or not for train\nplt.figure(figsize=(25, 5))\ncount_plot=sns.countplot(data=df_train, x='subject', hue='Activity')\nplt.gca().tick_params(axis='x')\nplt.gca().tick_params(axis='y')\nplt.xlabel( xlabel='Subjects')\nplt.ylabel( ylabel='Activity Counts')\nplt.legend([\"Standing\", \"Seating\", \"Laying\", \"Walking\", \"Walking Downstairs\", \"Walking Upstairs\"],bbox_to_anchor = (0.25, 1.1), ncol=6, loc='upper center')\nplt.title(\"Subjects Wise Activity Counts Train Set\", fontsize=25, loc='left', pad=50, fontfamily=\"roboto\")\nplt.show()\n\n\nplt.figure(figsize=(5, 5))\nlabel_counts = df_train['Activity'].value_counts()\ncolors = px.colors.qualitative.Plotly\n\ngraph = go.Bar(x=label_counts.index, y=label_counts.values, marker = dict(color = colors))\nlayout = go.Layout(\n    height=450, width=1100,\n    title = 'Acticity Counts Distribution Train Set',\n    xaxis = dict(title = 'Activity', tickangle=0, showgrid=False),\n    yaxis = dict(title = 'Count', showgrid=False),\n    plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n    title_font=dict(size=25, color='#a5a7ab', family='roboto'),\n    margin=dict(t=80, b=30, l=70, r=40),\n    font=dict(color='#8a8d93'))\nfig = go.Figure(data=[graph], layout = layout)\nfig.update_traces(textfont=dict(color='#fff'), marker=dict(line=dict(color='#ffffff', width=2)))\n\niplot(fig)","bd709930":"# check data balanced or not for train\nplt.figure(figsize=(25, 5))\ncount_plot=sns.countplot(data=df_test, x='subject', hue='Activity')\nplt.gca().tick_params(axis='x')\nplt.gca().tick_params(axis='y')\nplt.xlabel( xlabel='Subjects')\nplt.ylabel( ylabel='Activity Counts')\nplt.legend([\"Standing\", \"Seating\", \"Laying\", \"Walking\", \"Walking Downstairs\", \"Walking Upstairs\"],bbox_to_anchor = (0.25, 1.1), ncol=6, loc='upper center')\nplt.title(\"Subjects Wise Activity Counts For Test Set\", fontsize=25, loc='left', pad=50, fontfamily=\"roboto\")\nplt.show()\n\n\nplt.figure(figsize=(5, 5))\nlabel_counts = df_test['Activity'].value_counts()\ncolors = px.colors.qualitative.Plotly\n\ngraph = go.Bar(x=label_counts.index, y=label_counts.values, marker = dict(color = colors))\nlayout = go.Layout(\n    height=450, width=1100,\n    title = 'Acticity Counts Distribution For Test Set',\n    xaxis = dict(title = 'Activity', tickangle=0, showgrid=False),\n    yaxis = dict(title = 'Count', showgrid=False),\n    plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n    title_font=dict(size=25, color='#a5a7ab', family='roboto'),\n    margin=dict(t=80, b=30, l=70, r=40),\n    font=dict(color='#8a8d93'))\nfig = go.Figure(data=[graph], layout = layout)\nfig.update_traces(textfont=dict(color='#fff'), marker=dict(line=dict(color='#ffffff', width=2)))\n\niplot(fig)","63024352":"# Acticity Counts Distribution For Train & Test Set using pie chart\nlabel_counts_for_train = df_train['Activity'].value_counts()\ncolors = px.colors.qualitative.Plotly\n\nlabel_counts_for_test = df_test['Activity'].value_counts()\n\n\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'},{'type':'domain'}]])\nfig.add_trace(go.Pie(hole=0.5, labels=label_counts_for_train.index, values=label_counts_for_train.values, name=\"Train Set\"), 1, 1)\nfig.add_trace(go.Pie(hole=0.5, labels=label_counts_for_test.index, values=label_counts_for_test.values, name=\"Test Set\"), 1, 2)\n\nfig.update_layout(\n#     height=450, width=1100,\n    title = 'Acticity Counts Distribution For Train & Test Set',\n    xaxis = dict(title = 'Activity', tickangle=0, showgrid=False),\n    yaxis = dict(title = 'Count', showgrid=False),\n    plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n    title_font=dict(size=25, color='#a5a7ab', family='roboto'),\n#     margin=dict(t=80, b=30, l=70, r=40),\n    font=dict(color='#8a8d93'))\n# graph = go.Figure(data=[graph], layout = layout)\nfig.update_traces(textfont=dict(color='#fff'), marker=dict(line=dict(color='#ffffff', width=2)))\nfig.show()","e0497fe5":"# fig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'},{'type':'domain'}]])\nfig = go.Figure()\nfig.add_trace(go.Box(y=df_train['subject'], name=\"Train Set\", notched=True))\nfig.add_trace(go.Box( y=df_test['subject'], name=\"Test Set\", notched=True))\n\n\nfig.update_xaxes(showgrid=False)\nfig.update_layout(\n    title=\"Check Outliers In Train & Test\",\n    height=500, width=500,\n    title_font=dict(size=25, color='#a5a7ab', family='Muli'),\n    font=dict(color='#8a8d93'),\n    plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n    margin=dict(t=100, b=10, l=70, r=40), \n    )\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\n","a82ef408":"# Accelerometer & Gyroscope Columns Counts\nacc = 0\ngyro = 0\nother = 0\n\nfor value in df_train.columns:\n    if \"Acc\" in str(value):\n        acc += 1\n    elif \"Gyro\" in str(value):\n        gyro += 1\n    else:\n        other += 1\n\ngraph = go.Bar(x=['Accelerometer', 'Gyroscope', 'Others'], y=[acc,gyro,other], marker = dict(color = colors))\nlayout = go.Layout(\n    height=450, width=500,\n    title = 'Accelerometer & Gyroscope Columns Counts',\n    xaxis = dict(title = 'Activity', tickangle=0, showgrid=False),\n    yaxis = dict(title = 'Count', showgrid=False),\n    plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n    title_font=dict(size=25, color='#a5a7ab', family='roboto'),\n    margin=dict(t=80, b=30, l=70, r=40),\n    font=dict(color='#8a8d93'))\nfig = go.Figure(data=[graph], layout = layout)\nfig.update_traces(textfont=dict(color='#fff'), marker=dict(line=dict(color='#ffffff', width=2)))\n\niplot(fig)","7da58de3":"pd.crosstab(df_train.subject, df_train.Activity, margins = True).style.background_gradient(cmap='Paired')","f376976d":"pd.crosstab(df_test.subject, df_test.Activity, margins = True).style.background_gradient(cmap='Paired')","6c988fab":"# update columns name\ncolumns_name = df_train.columns\n\ncolumns_name = columns_name.str.replace('[()]','')\ncolumns_name = columns_name.str.replace('[-]', '')\ncolumns_name = columns_name.str.replace('[,]','')\n\ndf_train.columns = columns_name\ndf_train.columns = columns_name","81a24e16":"plt.figure(figsize=(20, 5))\nbbox = dict(boxstyle =\"larrow,pad=0.5\", fc=\"w\", ec=\"b\", lw=2)\n  \nsns.set_context(context='poster', font_scale=0.5)\nsns.kdeplot(df_train['tBodyAccMagmean'], hue=df_train['Activity'])\n\nplt.annotate(\n    text=\"Static Activities\",\n    xy=(-0.9, 1.5),\n    bbox = bbox,\n    rotation=15)\nplt.annotate(\n    text=\"Dynamic Activities\",\n    xy=(0.0, 0.5),\n    bbox = bbox,\n    rotation=45)\nplt.title('Static Activities & Dynamic Activities Distributions Using \"tBodyAccMagmean\"', loc='left', fontsize=20, pad=20)\nplt.show()","f0cb8f66":"plt.figure(figsize=(20, 5))\nbbox = dict(boxstyle =\"larrow,pad=0.5\", fc=\"w\", ec=\"b\", lw=2)\n  \nsns.set_context(context='poster', font_scale=0.5)\nsns.kdeplot(df_train['angleXgravityMean'], hue=df_train['Activity'])\n\nplt.title('Static Activities & Dynamic Activities Distributions Using \"angleXgravityMean\"', loc='left', fontsize=20, pad=20)\nplt.show()","cdd5589f":"plt.figure(figsize=(20, 5))\nbbox = dict(boxstyle =\"larrow,pad=0.5\", fc=\"w\", ec=\"b\", lw=2)\n  \nsns.set_context(context='poster', font_scale=0.5)\nsns.kdeplot(df_train['angleYgravityMean'], hue=df_train['Activity'])\n\nplt.title('Static Activities & Dynamic Activities Distributions Using \"angleYgravityMean\"', loc='left', fontsize=20, pad=20)\nplt.show()","bb387d8f":"# t-sne (2D)\nx_for_tsne = df_train.drop(['subject', 'Activity'], axis=1)\n\ntsne = TSNE(random_state = 42, n_components=2, verbose=1, perplexity=50, n_iter=1000).fit_transform(x_for_tsne)\nplt.figure(figsize=(12,8))\nsns.scatterplot(x =tsne[:, 0], y = tsne[:, 1], hue = df_train[\"Activity\"],palette=\"bright\")","e2866d25":"# t-sne (3D)\nx_for_tsne = df_train.drop(['subject', 'Activity'], axis=1)\n\ntsne = TSNE(random_state = 42, n_components=3, verbose=1, perplexity=50, n_iter=1000).fit_transform(x_for_tsne)","ae95fba0":"fig = px.scatter_3d(\n    x =tsne[:, 0],\n    y = tsne[:, 1],\n    z = tsne[:, 2],\n    color=df_train['Activity']\n)\nfig.update_layout(\n    title=\"Cluster Of Activities\",\n    title_font=dict(size=25, color='#a5a7ab', family='roboto'),\n    font=dict(color='#8a8d93'),\n    plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n    margin=dict(t=100, b=10, l=70, r=40), \n    )\nfig.show()","a6b0809e":"X_train, y_train = df_train.drop(['subject', 'Activity'], axis=1), df_train['Activity']","7052f6f5":"X_test, y_test = df_test.drop(['subject', 'Activity'], axis=1), df_test['Activity']","1dab019a":"# pca with all comonents\npca = PCA()\nX_pca = pca.fit_transform(X_train)\n\n# print(pca.n_components_)\n# print(pca.explained_variance_ratio_)\n# print(np.cumsum(pca.explained_variance_ratio_))\nfig = px.line(np.cumsum(pca.explained_variance_ratio_))\nfig.update_layout(\n    title=\"Screeplot Of All Principsl Components\",\n    title_font=dict(size=25, color='#a5a7ab', family='roboto'),\n    paper_bgcolor='#2d3035', plot_bgcolor='#2d3035',\n    font=dict(color='#a5a7ab'),\n    showlegend=False,\n    \n\n)\nfig.update_yaxes(showgrid=False, gridwidth=1, gridcolor='#a5a7ab')\nfig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='#a5a7ab')\n","276a9da6":"# pca with 95% info\npca = PCA(0.95)\n\npca.fit(X_train)\nX_train = pca.transform(X_train)\nX_test = pca.transform(X_test)","cdbdeeaa":"encoder = LabelEncoder()\ny_train=encoder.fit_transform(y_train)\ny_test=encoder.fit_transform(y_test)","6ba6bb28":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","eff6f3a8":"# ML Modelling","6c649647":"# function to plot confusion matrix\ndef plot_confusion_matrix(cm,lables):\n    fig, ax = plt.subplots(figsize=(15,5)) # for plotting confusion matrix as image\n    im = ax.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)\n    ax.figure.colorbar(im, ax=ax)\n    ax.set(xticks=np.arange(cm.shape[1]),\n    yticks=np.arange(cm.shape[0]),\n    xticklabels=lables, yticklabels=lables,\n    ylabel='True label',\n    xlabel='Predicted label')\n    plt.xticks(rotation = 90)\n    plt.grid(b=False)\n    thresh = cm.max() \/ 2.\n    for i in range(cm.shape[0]):\n        for j in range(cm.shape[1]):\n            ax.text(j, i, int(cm[i, j]),ha=\"center\", va=\"center\",color=\"white\" if cm[i, j] > thresh else \"black\")\n    fig.tight_layout()","0f283601":"# logistic regresssion\nlr_model = LogisticRegression()\n\nparams = {\n    'C': np.arange(10,61,10),\n    'penalty': ['l2','l1']\n}\n\nrandom_cv = RandomizedSearchCV(lr_model, param_distributions=params, cv=5, random_state=42)\nrandom_cv.fit(X_train, y_train)","ac833516":"lr_model = LogisticRegression(penalty='l2', C=10,solver='lbfgs',class_weight='balanced', max_iter=10000,random_state = 0)\nlr_model.fit(X_train, y_train)\ny_pred = lr_model.predict(X_test)\n\nlr_accuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy Of Logistic Regression : \", lr_accuracy)","ebe2c985":"cm = confusion_matrix(y_test,y_pred)\nplot_confusion_matrix(cm, np.unique(y_pred))  ","5aa600ed":"# svc\nparams = {\n    'C':[2,4,8,16],\n    'gamma': [0.125, 0.250, 0.5, 1]\n}\nsvm_model = SVC(kernel='rbf')\n\nrandom_cv = RandomizedSearchCV(svm_model, param_distributions=params, random_state = 42, verbose=10)\nrandom_cv.fit(X_train, y_train)","0f8e2f52":"random_cv.best_params_","6d971ef1":"svc_model = SVC(gamma=0.125, C=2)\nsvc_model.fit(X_train, y_train)\ny_pred = svc_model.predict(X_test)\n\nsvc_accuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy Of Logistic Regression : \", svc_accuracy)","c800446f":"cm = confusion_matrix(y_test,y_pred)\nplot_confusion_matrix(cm, np.unique(y_pred))","57e13e76":"# decision tree\nparams = {'max_depth':np.arange(2,10,2)}\n\ndt_model = DecisionTreeClassifier()\nrandom_cv = RandomizedSearchCV(dt_model, param_distributions=params, random_state = 42)\nrandom_cv.fit(X_train, y_train)","d74cd50d":"random_cv.best_params_","8c28881e":"dt_model = DecisionTreeClassifier(max_depth=6)\ndt_model.fit(X_train, y_train)\ny_pred = dt_model.predict(X_test)\n\ndt_accuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy Of Logistic Regression : \", dt_accuracy)","e7f69b4d":"cm = confusion_matrix(y_test,y_pred)\nplot_confusion_matrix(cm, np.unique(y_pred))","c9b3061f":"# random forest\nparams = {\n    'n_estimators': np.arange(20,101,10),\n    'max_depth':np.arange(2,16,2),\n    'max_features':['auto', 'sqrt'],\n    'bootstrap':[True, False]\n}\nrf_model = RandomForestClassifier()\nrandom_cv = RandomizedSearchCV(rf_model, param_distributions=params,random_state = 42, verbose=10)\nrandom_cv.fit(X_train, y_train)","a71f41e8":"random_cv.best_params_","8e54fe7e":"rf_model = RandomForestClassifier(n_estimators=90,\n                                  max_features='auto',\n                                  max_depth=14,\n                                  bootstrap=True)\nrf_model.fit(X_train, y_train)\ny_pred = rf_model.predict(X_test)\n\nrf_accuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy Of Logistic Regression : \", rf_accuracy)","e714b173":"cm = confusion_matrix(y_test,y_pred)\nplot_confusion_matrix(cm, np.unique(y_pred))","013f50c3":"# # xgboost\n# params={\n#     \"max_depth\": [6, 8, 10, 12, 15],\n#     \"gamma\": [0.2, 0.3, 0.4],\n# }\n# xgb_model = xgboost.XGBClassifier()\n# random_cv = RandomizedSearchCV(xgb_model, param_distributions=params, cv=2, n_iter=5, scoring='roc_auc', n_jobs=-1, verbose=100)\n# random_cv.fit(X_train, y_train)","eef4c71e":"xgb_model = xgboost.XGBClassifier()\nxgb_model.fit(X_train, y_train)\ny_pred = xgb_model.predict(X_test)\n\nxgb_accuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy Of Logistic Regression : \", xgb_accuracy)","fb0bb5c4":"cm = confusion_matrix(y_test,y_pred)\nplot_confusion_matrix(cm, np.unique(y_pred))","8a1754c2":"\nestimators = [\n        ('RFC' ,RandomForestClassifier(n_estimators=500, random_state = 42)),\n        ('KNC', KNeighborsClassifier(5)),\n        ('DTC', DecisionTreeClassifier()),\n        ('SVC', SVC(kernel=\"rbf\")),\n        ('XGB', xgboost.XGBClassifier()),\n        ('RC',  RidgeClassifier())\n]\n\nclf = StackingClassifier(\n    estimators=estimators, \n    final_estimator=GradientBoostingClassifier()\n)","5e8c2fcb":"def f_score(X_train, X_test, y_train, y_test):\n    for clf in classifiers:\n        s = time.time()\n        clf.fit(X_train,y_train)\n        y_pred = clf.predict(X_test)\n        f = f1_score(y_true=y_test,y_pred=y_pred,average=\"macro\")\n        e = time.time()\n        print(f\"Score: {round(f,3)} \\t Time(in secs): {round(e-s,3)} \\t Classifier: {clf.__class__.__name__}\")","2337f05a":"clf.fit(X_train,y_train)\ny_pred = clf.predict(X_test)\nf1_score(y_true=y_test,y_pred=y_pred,average=\"macro\")","b0a3e17a":"cm = confusion_matrix(y_test,y_pred)\nplot_confusion_matrix(cm, np.unique(y_pred))","f3065250":"model=Sequential()\nmodel.add(Dense(units=64,kernel_initializer='uniform',activation='relu',input_dim=X_train.shape[1]))\n\nmodel.add(Dense(units=128,kernel_initializer='uniform',activation='relu'))\n\nmodel.add(Dense(units=64,kernel_initializer='uniform',activation='relu'))\n\nmodel.add(Dense(units=6,kernel_initializer='uniform',activation='softmax'))\n\nmodel.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])","919bae3d":"history=model.fit(X_train,y_train,batch_size=256,epochs=100,validation_data=(X_test,y_test))","6e7d5441":"rcParams['figure.figsize'] = 10, 4\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n","3dda4c96":"model_name = ['LR', 'SVC', 'DT', 'RF', 'XGB', 'Stacking', 'DeepLearning']\nmodel_acc1 = [ 0.9392, 0.9477, 0.80590, 0.90661, 0.9222, 0.93827, 0.959]\nmodel_acc = [np.round(i, decimals=2) for i in model_acc1]","420bd720":"\ngraph = go.Bar(\n    x=model_name,\n    y=model_acc,\n    opacity=1,\n    showlegend=False,\n    marker=dict(color=px.colors.qualitative.Pastel1)\n\n)\n\nlayout = go.Layout(\n    height=450, width=700,\n    title = 'Model Accuracy Chart',\n    xaxis = dict(title = 'Model', showgrid=False,tickangle=0),\n    yaxis = dict(title = 'Accuracy', showgrid=False),\n    plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n    title_font=dict(size=25, color='#a5a7ab', family='roboto'),\n    margin=dict(t=80, b=30, l=70, r=40),\n    font=dict(color='#8a8d93'))\nfig = go.Figure(data=[graph], layout = layout)\nfig.update_traces(textfont=dict(color='#fff'), marker=dict(line=dict(color='#ffffff', width=2)))\niplot(fig)\n","2ede8d1d":"# **\ud83e\uddcdHuman Activity Recognition**"}}