{"cell_type":{"d8082903":"code","898cfd98":"code","73bcf84f":"code","0f1f3f7c":"code","52863f32":"code","507c3968":"code","acf75f62":"code","8db361da":"code","66710df7":"code","d3671a5b":"code","b9ba7d6a":"code","c2f72093":"code","40424c20":"code","84bccf13":"code","349b2954":"code","46aea0d0":"code","66a6ffdb":"code","4677774e":"code","916b0c4a":"code","b02ac52f":"code","8a29be08":"code","8195368f":"code","721afacb":"code","e0ebafd3":"markdown","a933122b":"markdown","fe4565e5":"markdown","b2aa0c7d":"markdown","0f9775ad":"markdown","adb2c9ae":"markdown","2d6b669a":"markdown","e32acb42":"markdown","c5c90abe":"markdown","8a26783f":"markdown","f87472e1":"markdown","e8bffae1":"markdown","ac2bea45":"markdown"},"source":{"d8082903":"print(\"In the name of Allah, The Most Gracious and The Most Merciful\")","898cfd98":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom fbprophet import Prophet        # I am going to use Prophet <=\nimport seaborn as sns\nimport os\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'): # new way of reading comppetition input  \n    for filename in filenames:                         # csv files\n        file_name = os.path.join(dirname, filename)    # if you liked, then upvote\n        print(file_name)           \n        if \"train.csv\" in file_name:                   # to make notebook popular among Kagglers\n            df = pd.read_csv(file_name)                # 'df' represents for train dataset\n        elif \"test.csv\" in file_name:\n            test = pd.read_csv(file_name)              # 'test' represents for test dataset\n        elif \"submission.csv\" in file_name:\n            sample = pd.read_csv(file_name) \n        elif \"holidays.csv\" in file_name:\n            holidays = pd.read_csv(file_name)","73bcf84f":"holidays.date = pd.to_datetime(holidays.date) ","0f1f3f7c":"df['date'] = pd.to_datetime(df['date'])\ntest['date'] = pd.to_datetime(test['date'])\ndef clean_store(item):\n    return item[6:7] # 'KaggleMart' => 'M'\ndef clean_product(product):\n    return product[7:8] # 'Kaggle Hat' => 'H'\ndef clean_country(items):\n    return items[0] # 'Finland' => 'F'\ndf.store = df.store.apply(clean_store)\ntest.store = test.store.apply(clean_store)\ndf['product'] = df['product'].apply(clean_product)\ntest['product'] = test['product'].apply(clean_product)\ndf['country'] = df['country'].apply(clean_country)\ntest['country'] = test['country'].apply(clean_country)\ndf['hybrid'] =  df['country'] + df['store'] +df['product']\ntest['hybrid'] =  test['country'] + test['store'] + test['product']\nbest_df = df.drop([ \"country\", \"store\", \"product\",'row_id'], axis=1) #unnecessary columns \nX_valid = test.drop([\"country\", \"store\", \"product\", 'row_id'], axis=1) #unnecessary columns","52863f32":"best_df.hybrid # hybrid is easy way of seperating","507c3968":"holidays['country'] = holidays['country'].apply(clean_country) # editing country values\nholidays = holidays.drop(['event', 'type'], axis=1) # holiday name, event type is not important ","acf75f62":"best_df.rename(columns={'date':'ds', 'num_sold':\"y\", 'hybrid': 'hybrid'}, inplace=True)\nX_valid.rename(columns={'date':'ds', 'hybrid': 'hybrid'}, inplace=True)","8db361da":"holidays.rename(columns={\"date\": \"ds\", \"country\": 'holiday'}, inplace=True)","66710df7":"holidays_no = holidays.loc[(holidays.holiday == 'N')]\nholidays_se = holidays.loc[(holidays.holiday == 'S')]\nholidays_fi = holidays.loc[(holidays.holiday == 'F')]\nholidays = [ holidays_fi, holidays_no, holidays_se] # in hybrid column finland is first, norway is second and sweden is third","d3671a5b":"def create_features(df):\n    \"\"\"\n    Creates time series features from datetime index.\n    \"\"\"\n    df['dayofweek'] = df['ds'].dt.dayofweek\n    df['quarter'] = df['ds'].dt.quarter\n    df['month'] = df['ds'].dt.month\n    df['year'] = df['ds'].dt.year\n    df['dayofyear'] = df['ds'].dt.dayofyear\n    df['dayofmonth'] = df['ds'].dt.day\n    df['weekofyear'] = df['ds'].dt.weekofyear\n    ","b9ba7d6a":"create_features(best_df)\ncreate_features(X_valid)","c2f72093":"best_df.head()","40424c20":"X_valid.head()","84bccf13":"def sorting_for_prophet(df, list_base):\n    for i in df.hybrid.unique():\n        sorted_df = df.loc[(df.hybrid == i)]\n        sorted_df.drop(\"hybrid\", axis=1, inplace=True)\n        list_base.append(sorted_df)\n    return list_base\n","349b2954":"valids = [] # valids is 18 different dataframe collection for prediction\ntrains = [] # trains is 18 diferent dataframe collection for fitting\nsorting_for_prophet(X_valid, valids )\nsorting_for_prophet(best_df, trains )\nprint('Sorting is done!')","46aea0d0":"trains[0] # this is train dataframe for FMM (Finland Mart Mug)","66a6ffdb":"def prophet_each(df, future_df, holidays):\n    model = Prophet(holidays=holidays)\n    model.fit(df)\n    preds = model.predict(future_df)\n    return preds.iloc[:, [0, -1]] # return only date and yhat value\n","4677774e":"y_preds = []\nfor i  in range(18):\n    y_preds.append(prophet_each(trains[i], valids[i], holidays=holidays[i%3]))\n    print(i)","916b0c4a":"num_sold = []\nfor k in range(365):\n    for j in y_preds:\n        num_sold.append(j.yhat[k])","b02ac52f":"num_sold[:10]","8a29be08":"sample['row_id'] = sample['row_id'].astype('int32')\nsample['num_sold'] = num_sold","8195368f":"sample.info()","721afacb":"sample.to_csv('submission_facebook_prophet.csv', index=False)","e0ebafd3":"# Prophet model","a933122b":"**prophet_each** function is implemented  for each hybrid in train dataframe \n\nholidays is dataframe of holidays dates in each country  ","fe4565e5":"Due to Facebook(Meta) Prophet:\n* **rename** date => ds\n* **rename** num_sold => y \n\n[More info](https:\/\/facebook.github.io\/prophet\/docs\/quick_start.html) ","b2aa0c7d":"**Hybrid** column is combination of first letters of country + store + product","0f9775ad":"For each **hybrid** column,\nI create seperate prophet model","adb2c9ae":"Sorting all prediction results into single dataframe","2d6b669a":"# Importing all modules and csv files","e32acb42":"# Formatting DataFrames","c5c90abe":"Share your ideas in the **comments** section","8a26783f":"# Submission ","f87472e1":"# Prophet model preparation","e8bffae1":"Separating holidays dataframe into country based holidays","ac2bea45":"**create_features** function creates aditional features of time series for making model more accurate"}}