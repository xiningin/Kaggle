{"cell_type":{"df66f293":"code","4ad89e58":"code","d7426b68":"code","55167645":"code","884a9e69":"code","151bb63c":"code","98321ae5":"code","a501e945":"code","fb9481c8":"code","58eebd13":"code","a24e0029":"code","40093af1":"code","5ec83eff":"code","07a08d64":"code","fe9cebc0":"code","0cf244c9":"code","c7b34138":"code","519e51dd":"code","c2af5e66":"code","f171ef31":"code","8bd0509d":"code","a2977b4e":"code","b51fbc34":"code","e85d15e7":"code","41454f6a":"code","02f43f7f":"code","f31dfb23":"code","4298415b":"code","dd95ef05":"code","8a118757":"code","d56d78ce":"code","679f0642":"code","45cbbc1c":"code","e66dcce6":"code","dc506a2d":"code","9afb727d":"code","29c373b2":"code","f61e4ee5":"code","fafe131e":"code","0742b8e4":"code","23d1eb31":"code","dbd16f9d":"code","20221e2e":"code","2000e506":"code","8bfd16fd":"code","a9193f5b":"code","8a7567e7":"code","a06367c1":"code","43fa586f":"code","4d206a94":"code","7483494a":"code","c28c70ba":"code","fa38b5d0":"code","74b59f64":"code","a07f9798":"code","f6d0f5d0":"code","7966cd34":"code","77153e3d":"code","bcb379ef":"code","1685d1e2":"code","2a44285b":"code","e6da358c":"code","bda15dac":"code","b5293b72":"code","0a2438ef":"code","224c86e6":"code","21f5f6a1":"code","03042b59":"code","1db1d904":"code","cee3a799":"code","66de554f":"code","729640f9":"markdown","65a14c16":"markdown","dde3bbc4":"markdown","c7357931":"markdown","c45a8bd9":"markdown","896aa536":"markdown","e9e972e1":"markdown","cc670642":"markdown","94f36a4b":"markdown","adc20c83":"markdown","e1bcd71a":"markdown","c6a7aa95":"markdown","36d59159":"markdown","3d644771":"markdown","2086eebd":"markdown"},"source":{"df66f293":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nimport time\nfrom datetime import datetime\nfrom scipy import integrate, optimize\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# ML libraries\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom xgboost import plot_importance, plot_tree\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\n\nfrom xgboost import XGBRegressor\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.impute import SimpleImputer\n\n\n\n\nfrom sklearn.preprocessing import LabelBinarizer,LabelEncoder,StandardScaler,MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression,SGDClassifier,LinearRegression\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score\n\nimport keras\nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom keras.models import Sequential\nfrom keras.layers import Dense,LSTM\nimport tensorflow as tf\n\n\n\n\n\n# Any results you write to the current directory are saved as output.","4ad89e58":"submission=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/submission.csv')","d7426b68":"\nsubmission = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/submission.csv\")\ntest = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/train.csv\")\ntrain.Province_State.fillna(\"None\", inplace=True)\ndisplay(train.head(5))\ndisplay(train.describe())\nprint(\"Number of Country_Region: \", train['Country_Region'].nunique())\nprint(\"Dates go from day\", max(train['Date']), \"to day\", min(train['Date']), \", a total of\", train['Date'].nunique(), \"days\")\nprint(\"Countries with Province\/State informed: \", train.loc[train['Province_State']!='None']['Country_Region'].unique())","55167645":"# Total global cases of covid 19\nconfirmed_total_date = train.groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date = train.groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date = confirmed_total_date.join(fatalities_total_date)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(17,7))\ntotal_date.plot(ax=ax1)\nax1.set_title(\"Global confirmed cases\", size=13)\nax1.set_ylabel(\"Number of cases\", size=13)\nax1.set_xlabel(\"Date\", size=13)\nfatalities_total_date.plot(ax=ax2, color='orange')\nax2.set_title(\"Global deceased cases\", size=13)\nax2.set_ylabel(\"Number of cases\", size=13)\nax2.set_xlabel(\"Date\", size=13)","884a9e69":"\nconfirmed_total_date_noChina = train[train['Country_Region']!='China'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_noChina = train[train['Country_Region']!='China'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_noChina = confirmed_total_date_noChina.join(fatalities_total_date_noChina)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(17,7))\ntotal_date_noChina.plot(ax=ax1)\nax1.set_title(\"Global confirmed cases excluding China\", size=13)\nax1.set_ylabel(\"Number of cases\", size=13)\nax1.set_xlabel(\"Date\", size=13)\nfatalities_total_date_noChina.plot(ax=ax2, color='orange')\nax2.set_title(\"Global deceased cases excluding China\", size=13)\nax2.set_ylabel(\"Number of cases\", size=13)\nax2.set_xlabel(\"Date\", size=13)","151bb63c":"\nconfirmed_total_date_China = train[train['Country_Region']=='China'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_China = train[train['Country_Region']=='China'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_China = confirmed_total_date_China.join(fatalities_total_date_China)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(17,7))\ntotal_date_China.plot(ax=ax1)\nax1.set_title(\"China confirmed cases\", size=13)\nax1.set_ylabel(\"Number of cases\", size=13)\nax1.set_xlabel(\"Date\", size=13)\nfatalities_total_date_China.plot(ax=ax2, color='orange')\nax2.set_title(\"China deceased cases\", size=13)\nax2.set_ylabel(\"Number of cases\", size=13)\nax2.set_xlabel(\"Date\", size=13)","98321ae5":"#italy, spain, UK, india, australia, US\n\n#confirmed_country_Italy = train[train['Country_Region']=='Italy'].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Italy = train[train['Country_Region']=='Italy'].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Italy = train[train['Country_Region']=='Italy'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Italy = train[train['Country_Region']=='Italy'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Italy = confirmed_total_date_Italy.join(fatalities_total_date_Italy)\n\n#confirmed_country_Spain = train[train['Country_Region']=='Spain'].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Spain = train[train['Country_Region']=='Spain'].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Spain = train[train['Country_Region']=='Spain'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Spain = train[train['Country_Region']=='Spain'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Spain = confirmed_total_date_Spain.join(fatalities_total_date_Spain)\n\n#confirmed_country_UK = train[train['Country_Region']=='United Kingdom'].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_UK = train[train['Country_Region']=='United Kingdom'].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_UK = train[train['Country_Region']=='United Kingdom'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_UK = train[train['Country_Region']=='United Kingdom'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_UK = confirmed_total_date_UK.join(fatalities_total_date_UK)\n\n#confirmed_country_Australia = train[train['Country_Region']=='Australia'].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Australia = train[train['Country_Region']=='Australia'].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Australia = train[train['Country_Region']=='Australia'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Australia = train[train['Country_Region']=='Australia'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Australia = confirmed_total_date_Australia.join(fatalities_total_date_Australia)\n\n#confirmed_country_Singapore = train[train['Country_Region']=='Singapore'].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Singapore = train[train['Country_Region']=='Singapore'].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Singapore = train[train['Country_Region']=='Singapore'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Singapore = train[train['Country_Region']=='Singapore'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Singapore = confirmed_total_date_Singapore.join(fatalities_total_date_Singapore)\n\nconfirmed_total_date_India = train[train['Country_Region']=='India'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_India = train[train['Country_Region']=='India'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_India = confirmed_total_date_India.join(fatalities_total_date_India)\n\nconfirmed_total_date_US = train[train['Country_Region']=='US'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_US = train[train['Country_Region']=='US'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_US = confirmed_total_date_US.join(fatalities_total_date_US)\n\nplt.figure(figsize=(17,10))\nplt.subplot(3, 2, 1)\ntotal_date_Italy.plot(ax=plt.gca(), title='Italy')\nplt.ylabel(\"Confirmed infection cases\", size=13)\n\n\nplt.subplot(3, 2, 2)\ntotal_date_Spain.plot(ax=plt.gca(), title='Spain')\n\nplt.subplot(3, 2, 3)\ntotal_date_UK.plot(ax=plt.gca(), title='United Kingdom')\nplt.ylabel(\"Confirmed infection cases\", size=13)\n\nplt.subplot(3, 2, 4)\ntotal_date_India.plot(ax=plt.gca(), title='India')\n\nplt.subplot(3, 2, 5)\ntotal_date_Australia.plot(ax=plt.gca(), title='Australia')\nplt.ylabel(\"Confirmed infection cases\", size=13)\n\nplt.subplot(3, 2, 6)\ntotal_date_US.plot(ax=plt.gca(), title='United States')\nplt.ylabel(\"Confirmed infection cases\", size=13)","a501e945":"\n\npop_India=1377011281.\npop_US=330578810.\npop_spain = 46749696.\npop_italy = 60486683.\npop_UK = 67784927.\npop_singapore = 5837230.\n\ntotal_date_India.ConfirmedCases = total_date_India.ConfirmedCases\/pop_India*100.\ntotal_date_India.Fatalities = total_date_India.ConfirmedCases\/pop_India*100.\ntotal_date_US.ConfirmedCases = total_date_US.ConfirmedCases\/pop_US*100.\ntotal_date_US.Fatalities = total_date_US.ConfirmedCases\/pop_US*100.\ntotal_date_Italy.ConfirmedCases = total_date_Italy.ConfirmedCases\/pop_italy*100.\ntotal_date_Italy.Fatalities = total_date_Italy.ConfirmedCases\/pop_italy*100.\ntotal_date_Spain.ConfirmedCases = total_date_Spain.ConfirmedCases\/pop_spain*100.\ntotal_date_Spain.Fatalities = total_date_Spain.ConfirmedCases\/pop_spain*100.\ntotal_date_UK.ConfirmedCases = total_date_UK.ConfirmedCases\/pop_UK*100.\ntotal_date_UK.Fatalities = total_date_UK.ConfirmedCases\/pop_UK*100.\ntotal_date_Singapore.ConfirmedCases = total_date_Singapore.ConfirmedCases\/pop_singapore*100.\ntotal_date_Singapore.Fatalities = total_date_Singapore.ConfirmedCases\/pop_singapore*100.\n\nplt.figure(figsize=(15,10))\nplt.subplot(3, 2, 1)\ntotal_date_India.ConfirmedCases.plot(ax=plt.gca(), title='India')\nplt.ylabel(\"Fraction of population infected\")\nplt.ylim(0, 0.05)\n\nplt.subplot(3, 2, 2)\ntotal_date_US.ConfirmedCases.plot(ax=plt.gca(), title='US')\nplt.ylim(0, 0.05)\n\nplt.subplot(3, 2, 3)\ntotal_date_Spain.ConfirmedCases.plot(ax=plt.gca(), title='Spain')\nplt.ylabel(\"Fraction of population infected\")\nplt.ylim(0, 0.05)\n\nplt.subplot(3, 2, 4)\ntotal_date_Italy.ConfirmedCases.plot(ax=plt.gca(), title='Italy')\nplt.ylim(0, 0.05)\n\nplt.subplot(3, 2, 5)\ntotal_date_UK.ConfirmedCases.plot(ax=plt.gca(), title='United Kingdom')\nplt.ylabel(\"Fraction of population infected\")\nplt.ylim(0, 0.05)\n\nplt.subplot(3, 2, 6)\ntotal_date_Singapore.ConfirmedCases.plot(ax=plt.gca(), title='Singapore')\nplt.ylim(0, 0.05)","fb9481c8":"\n\n#confirmed_country_Italy = train[(train['Country_Region']=='Italy') & train['ConfirmedCases']!=0].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Italy = train[(train['Country_Region']=='Italy') & train['ConfirmedCases']!=0].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_India = train[(train['Country_Region']=='India') & train['ConfirmedCases']!=0].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_India = train[(train['Country_Region']=='India') & train['ConfirmedCases']!=0].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_India = confirmed_total_date_India.join(fatalities_total_date_India)\n\n#confirmed_country_Italy = train[(train['Country_Region']=='Italy') & train['ConfirmedCases']!=0].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Italy = train[(train['Country_Region']=='Italy') & train['ConfirmedCases']!=0].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_US = train[(train['Country_Region']=='US') & train['ConfirmedCases']!=0].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_US = train[(train['Country_Region']=='US') & train['ConfirmedCases']!=0].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_US = confirmed_total_date_US.join(fatalities_total_date_US)\n\n#confirmed_country_Italy = train[(train['Country_Region']=='Italy') & train['ConfirmedCases']!=0].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Italy = train[(train['Country_Region']=='Italy') & train['ConfirmedCases']!=0].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Italy = train[(train['Country_Region']=='Italy') & train['ConfirmedCases']!=0].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Italy = train[(train['Country_Region']=='Italy') & train['ConfirmedCases']!=0].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Italy = confirmed_total_date_Italy.join(fatalities_total_date_Italy)\n\n#confirmed_country_Spain = train[(train['Country_Region']=='Spain') & (train['ConfirmedCases']!=0)].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Spain = train[(train['Country_Region']=='Spain') & (train['ConfirmedCases']!=0)].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Spain = train[(train['Country_Region']=='Spain') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Spain = train[(train['Country_Region']=='Spain') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Spain = confirmed_total_date_Spain.join(fatalities_total_date_Spain)\n\n#confirmed_country_UK = train[(train['Country_Region']=='United Kingdom') & (train['ConfirmedCases']!=0)].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_UK = train[(train['Country_Region']=='United Kingdom') & (train['ConfirmedCases']!=0)].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_UK = train[(train['Country_Region']=='United Kingdom') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_UK = train[(train['Country_Region']=='United Kingdom') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_UK = confirmed_total_date_UK.join(fatalities_total_date_UK)\n\n#confirmed_country_Australia = train[(train['Country_Region']=='Australia') & (train['ConfirmedCases']!=0)].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Australia = train[(train['Country_Region']=='Australia') & (train['ConfirmedCases']!=0)].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\n\nconfirmed_total_date_Australia = train[(train['Country_Region']=='Australia') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Australia = train[(train['Country_Region']=='Australia') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Australia = confirmed_total_date_Australia.join(fatalities_total_date_Australia)\n\n#confirmed_country_Singapore = train[(train['Country_Region']=='Singapore') & (train['ConfirmedCases']!=0)].groupby(['Country_Region', 'Province_State']).agg({'ConfirmedCases':['sum']})\n#fatalities_country_Singapore = train[(train['Country_Region']=='Singapore') & (train['ConfirmedCases']!=0)].groupby(['Country_Region', 'Province_State']).agg({'Fatalities':['sum']})\nconfirmed_total_date_Singapore = train[(train['Country_Region']=='Singapore') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date_Singapore = train[(train['Country_Region']=='Singapore') & (train['ConfirmedCases']!=0)].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_date_Singapore = confirmed_total_date_Singapore.join(fatalities_total_date_Singapore)\n\n\nIndia = [i for i in total_date_India.ConfirmedCases['sum'].values]\nIndia_30 = India[0:70]\nUS = [i for i in total_date_US.ConfirmedCases['sum'].values]\nUS_30 = US[0:70]\nitaly = [i for i in total_date_Italy.ConfirmedCases['sum'].values]\nitaly_30 = italy[0:70] \nspain = [i for i in total_date_Spain.ConfirmedCases['sum'].values]\nspain_30 = spain[0:70] \nUK = [i for i in total_date_UK.ConfirmedCases['sum'].values]\nUK_30 = UK[0:70] \nsingapore = [i for i in total_date_Singapore.ConfirmedCases['sum'].values]\nsingapore_30 = singapore[0:70] \n\n\n# Plots\nplt.figure(figsize=(12,6))\nplt.plot(India_30)\nplt.plot(US_30)\nplt.plot(italy_30)\nplt.plot(spain_30)\nplt.plot(UK_30)\nplt.plot(singapore_30)\nplt.legend([\"India\",\"US\", \"Italy\", \"Spain\", \"UK\", \"Singapore\"], loc='upper left')\nplt.title(\"COVID-19 infections from the first| confirmed case\", size=15)\nplt.xlabel(\"Days\", size=13)\nplt.ylabel(\"Infected cases\", size=13)\nplt.ylim(0, 300000)\nplt.show()","58eebd13":"plt.figure(figsize=(20,10))\nplt.plot(train.Id, train.ConfirmedCases)\nplt.title('Confirmed Cases')\nplt.show()","a24e0029":"# Susceptible equation\ndef fa(N, a, b, beta):\n    fa = -beta*a*b\n    return fa\n\n# Infected equation\ndef fb(N, a, b, beta, gamma):\n    fb = beta*a*b - gamma*b\n    return fb\n\n# Recovered\/deceased equation\ndef fc(N, b, gamma):\n    fc = gamma*b\n    return fc","40093af1":"# Runge-Kutta method of 4rth order for 3 dimensions (susceptible a, infected b and recovered r)\ndef rK4(N, a, b, c, fa, fb, fc, beta, gamma, hs):\n    a1 = fa(N, a, b, beta)*hs\n    b1 = fb(N, a, b, beta, gamma)*hs\n    c1 = fc(N, b, gamma)*hs\n    ak = a + a1*0.5\n    bk = b + b1*0.5\n    ck = c + c1*0.5\n    a2 = fa(N, ak, bk, beta)*hs\n    b2 = fb(N, ak, bk, beta, gamma)*hs\n    c2 = fc(N, bk, gamma)*hs\n    ak = a + a2*0.5\n    bk = b + b2*0.5\n    ck = c + c2*0.5\n    a3 = fa(N, ak, bk, beta)*hs\n    b3 = fb(N, ak, bk, beta, gamma)*hs\n    c3 = fc(N, bk, gamma)*hs\n    ak = a + a3\n    bk = b + b3\n    ck = c + c3\n    a4 = fa(N, ak, bk, beta)*hs\n    b4 = fb(N, ak, bk, beta, gamma)*hs\n    c4 = fc(N, bk, gamma)*hs\n    a = a + (a1 + 2*(a2 + a3) + a4)\/6\n    b = b + (b1 + 2*(b2 + b3) + b4)\/6\n    c = c + (c1 + 2*(c2 + c3) + c4)\/6\n    return a, b, c","5ec83eff":"def SIR(N, b0, beta, gamma, hs):\n    \n    \"\"\"\n    N = total number of population\n    beta = transition rate S->I\n    gamma = transition rate I->R\n    k =  denotes the constant degree distribution of the network (average value for networks in which \n    the probability of finding a node with a different connectivity decays exponentially fast\n    hs = jump step of the numerical integration\n    \"\"\"\n    \n    # Initial condition\n    a = float(N-1)\/N -b0\n    b = float(1)\/N +b0\n    c = 0.\n\n    sus, inf, rec= [],[],[]\n    for i in range(10000): # Run for a certain number of time-steps\n        sus.append(a)\n        inf.append(b)\n        rec.append(c)\n        a,b,c = rK4(N, a, b, c, fa, fb, fc, beta, gamma, hs)\n\n    return sus, inf, rec","07a08d64":"# Parameters of the model\nN = 7800*(10**6)\nb0 = 0\nbeta = 0.7\ngamma = 0.2\nhs = 0.1\n\nsus, inf, rec = SIR(N, b0, beta, gamma, hs)\n\nf = plt.figure(figsize=(8,5)) \nplt.plot(sus, 'b.', label='susceptible');\nplt.plot(inf, 'r.', label='infected');\nplt.plot(rec, 'c.', label='recovered\/deceased');\nplt.title(\"SIR model\")\nplt.xlabel(\"time\", fontsize=10);\nplt.ylabel(\"Fraction of population\", fontsize=10);\nplt.legend(loc='best')\nplt.xlim(0,1000)\nplt.savefig('SIR_example.png')\nplt.show()","fe9cebc0":"\npopulation = float(46750238)\ncountry_df = pd.DataFrame()\ncountry_df['ConfirmedCases'] = train.loc[train['Country_Region']=='Spain'].ConfirmedCases.diff().fillna(0)\ncountry_df = country_df[10:]\ncountry_df['day_count'] = list(range(1,len(country_df)+1))\n\nydata = [i for i in country_df.ConfirmedCases]\nxdata = country_df.day_count\nydata = np.array(ydata, dtype=float)\nxdata = np.array(xdata, dtype=float)\n\nN = population\ninf0 = ydata[0]\nsus0 = N - inf0\nrec0 = 0.0\n\ndef sir_model(y, x, beta, gamma):\n    sus = -beta * y[0] * y[1] \/ N\n    rec = gamma * y[1]\n    inf = -(sus + rec)\n    return sus, inf, rec\n\ndef fit_odeint(x, beta, gamma):\n    return integrate.odeint(sir_model, (sus0, inf0, rec0), x, args=(beta, gamma))[:,1]\n\npopt, pcov = optimize.curve_fit(fit_odeint, xdata, ydata)\nfitted = fit_odeint(xdata, *popt)\n\nplt.plot(xdata, ydata, 'o')\nplt.plot(xdata, fitted)\nplt.title(\"Fit of SIR model for Spain infected cases\")\nplt.ylabel(\"Population infected\")\nplt.xlabel(\"Days\")\nplt.show()\nprint(\"Optimal parameters: beta =\", popt[0], \" and gamma = \", popt[1])","0cf244c9":"population = float(60486683)\ncountry_df = pd.DataFrame()\ncountry_df['ConfirmedCases'] = train.loc[train['Country_Region']=='Italy'].ConfirmedCases.diff().fillna(0)\ncountry_df = country_df[10:]\ncountry_df['day_count'] = list(range(1,len(country_df)+1))\n\nydata = [i for i in country_df.ConfirmedCases]\nxdata = country_df.day_count\nydata = np.array(ydata, dtype=float)\nxdata = np.array(xdata, dtype=float)\n\nN = population\ninf0 = ydata[0]\nsus0 = N - inf0\nrec0 = 0.0\n\ndef sir_model(y, x, beta, gamma):\n    sus = -beta * y[0] * y[1] \/ N\n    rec = gamma * y[1]\n    inf = -(sus + rec)\n    return sus, inf, rec\n\ndef fit_odeint(x, beta, gamma):\n    return integrate.odeint(sir_model, (sus0, inf0, rec0), x, args=(beta, gamma))[:,1]\n\npopt, pcov = optimize.curve_fit(fit_odeint, xdata, ydata)\nfitted = fit_odeint(xdata, *popt)\n\nplt.plot(xdata, ydata, 'o')\nplt.plot(xdata, fitted)\nplt.title(\"Fit of SIR model for Italy infected cases\")\nplt.ylabel(\"Population infected\")\nplt.xlabel(\"Days\")\nplt.show()\nprint(\"Optimal parameters: beta =\", popt[0], \" and gamma = \", popt[1])","c7b34138":" #Merge train and test, exclude overlap\ndates_overlap = ['2020-04-01', '2020-04-02', '2020-04-03', '2020-04-04', '2020-04-05', '2020-04-06', '2020-04-07', '2020-04-08',\n                 '2020-04-09', '2020-04-10']\ntrain2 = train.loc[~train['Date'].isin(dates_overlap)]\nall_data = pd.concat([train2, test], axis = 0, sort=False)\n\n# Double check that there are no informed ConfirmedCases and Fatalities after 2020-03-11\nall_data.loc[all_data['Date'] >= '2020-04-01', 'ConfirmedCases'] = 0\nall_data.loc[all_data['Date'] >= '2020-04-01', 'Fatalities'] = 0\nall_data['Date'] = pd.to_datetime(all_data['Date'])\n\n# Create date columns\nle = preprocessing.LabelEncoder()\nall_data['Day_num'] = le.fit_transform(all_data.Date)\nall_data['Day'] = all_data['Date'].dt.day\nall_data['Month'] = all_data['Date'].dt.month\nall_data['Year'] = all_data['Date'].dt.year\n\n# Fill null values given that we merged train-test datasets\nall_data['Province_State'].fillna(\"None\", inplace=True)\nall_data['ConfirmedCases'].fillna(0, inplace=True)\nall_data['Fatalities'].fillna(0, inplace=True)\nall_data['Id'].fillna(-1, inplace=True)\nall_data['ForecastId'].fillna(-1, inplace=True)\n\ndisplay(all_data)\ndisplay(all_data.loc[all_data['Date'] == '2020-04-01'])","519e51dd":"def calculate_lag(df, lag_list, column):\n    for lag in lag_list:\n        column_lag = column + \"_\" + str(lag)\n        df[column_lag] = df.groupby(['Country_Region', 'Province_State'])[column].shift(lag, fill_value=0)\n    return df\n\ndef calculate_trend(df, lag_list, column):\n    for lag in lag_list:\n        trend_column_lag = \"Trend_\" + column + \"_\" + str(lag)\n        df[trend_column_lag] = (df.groupby(['Country_Region', 'Province_State'])[column].shift(0, fill_value=0) - \n                                df.groupby(['Country_Region', 'Province_State'])[column].shift(lag, fill_value=0))\/df.groupby(['Country_Region', 'Province_State'])[column].shift(lag, fill_value=0.001)\n    return df\n\nall_data = calculate_lag(all_data.reset_index(), range(1,7), 'ConfirmedCases')\nall_data = calculate_lag(all_data, range(1,7), 'Fatalities')\nall_data = calculate_trend(all_data, range(1,7), 'ConfirmedCases')\nall_data = calculate_trend(all_data, range(1,7), 'Fatalities')\nall_data.replace([np.inf, -np.inf], 0, inplace=True)\nall_data.fillna(0, inplace=True)","c2af5e66":"all_data[all_data['Country_Region']=='India'].iloc[40:50][['Id', 'Province_State', 'Country_Region', 'Date',\n       'ConfirmedCases', 'Fatalities', 'ForecastId', 'Day_num', 'ConfirmedCases_1',\n       'ConfirmedCases_2', 'ConfirmedCases_3', 'Fatalities_1', 'Fatalities_2',\n       'Fatalities_3']]","f171ef31":"all_data[all_data['Country_Region']=='US'].iloc[40:50][['Id', 'Province_State', 'Country_Region', 'Date',\n       'ConfirmedCases', 'Fatalities', 'ForecastId', 'Day_num', 'ConfirmedCases_1',\n       'ConfirmedCases_2', 'ConfirmedCases_3', 'Fatalities_1', 'Fatalities_2',\n       'Fatalities_3']]","8bd0509d":"all_data[all_data['Country_Region']=='Italy'].iloc[40:50][['Id', 'Province_State', 'Country_Region', 'Date',\n       'ConfirmedCases', 'Fatalities', 'ForecastId', 'Day_num', 'ConfirmedCases_1',\n       'ConfirmedCases_2', 'ConfirmedCases_3', 'Fatalities_1', 'Fatalities_2',\n       'Fatalities_3']]","a2977b4e":"all_data[all_data['Country_Region']=='China'].iloc[40:50][['Id', 'Province_State', 'Country_Region', 'Date',\n       'ConfirmedCases', 'Fatalities', 'ForecastId', 'Day_num', 'ConfirmedCases_1',\n       'ConfirmedCases_2', 'ConfirmedCases_3', 'Fatalities_1', 'Fatalities_2',\n       'Fatalities_3']]","b51fbc34":"all_data[all_data['Country_Region']=='Spain'].iloc[40:50][['Id', 'Province_State', 'Country_Region', 'Date',\n       'ConfirmedCases', 'Fatalities', 'ForecastId', 'Day_num', 'ConfirmedCases_1',\n       'ConfirmedCases_2', 'ConfirmedCases_3', 'Fatalities_1', 'Fatalities_2',\n       'Fatalities_3']]","e85d15e7":"df = train.fillna('NA').groupby(['Country_Region','Province_State','Date'])['ConfirmedCases'].sum() \\\n                       .groupby(['Country_Region','Province_State']).max().sort_values() \\\n                          .groupby(['Country_Region']).sum().sort_values(ascending = False)\n\ntop20_countries = pd.DataFrame(df).head(20)\ntop20_countries","41454f6a":"plt.figure(figsize = (10,10))\n\ntop20_countries.plot(kind = 'bar')\nplt.xlabel('Country', fontsize=5)\nplt.ylabel('No of Confirmed Cases', fontsize=5)\nplt.title('Confirmed Cases By Country')\nplt.show()\n","02f43f7f":"train['Date'] = pd.to_datetime(train['Date'], infer_datetime_format=True)\ntest['Date'] = pd.to_datetime(test['Date'], infer_datetime_format=True)","f31dfb23":"train.loc[:, 'Date'] = train.Date.dt.strftime('%y%m%d')\ntrain.loc[:, 'Date'] = train['Date'].astype(int)\n\ntest.loc[:, 'Date'] = test.Date.dt.strftime('%y%m%d')\ntest.loc[:, 'Date'] = test['Date'].astype(int)","4298415b":"train['Province_State'] = np.where(train['Province_State'] == 'nan',train['Country_Region'],train['Province_State'])\ntest['Province_State'] = np.where(test['Province_State'] == 'nan',test['Country_Region'],test['Province_State'])","dd95ef05":"convert_dict = {'Province_State': str}\ntrain = train.astype(convert_dict)\ntest = test.astype(convert_dict)","8a118757":"train.head()","d56d78ce":"test.head()","679f0642":"sns.countplot(y=\"Country_Region\", data=train,order=train[\"Country_Region\"].value_counts(ascending=False).iloc[:10].index)","45cbbc1c":"sns.regplot(x=train[\"ConfirmedCases\"], y=train[\"Fatalities\"], fit_reg=True)","e66dcce6":"sns.jointplot(x=train[\"ConfirmedCases\"], y=train[\"Fatalities\"],kind='resid')","dc506a2d":"sns.jointplot(x=train[\"ConfirmedCases\"], y=train[\"Fatalities\"],kind='scatter')","9afb727d":"submission = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/submission.csv\")\ntest = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/train.csv\")","29c373b2":"train.shape","f61e4ee5":"test.shape","fafe131e":"train.isna().sum()","0742b8e4":"test.isna().sum()","23d1eb31":"train['Province_State'].fillna(\"\",inplace = True)\ntest['Province_State'].fillna(\"\",inplace = True)","dbd16f9d":"train['Country_Region'] = train['Country_Region'] + ' ' + train['Province_State']\ntest['Country_Region'] = test['Country_Region'] + ' ' + test['Province_State']\ndel train['Province_State']\ndel test['Province_State']","20221e2e":"train.head()","2000e506":"test.head()","8bfd16fd":"def split_date(date):\n    date = date.split('-')\n    date[0] = int(date[0])\n    if(date[1][0] == '0'):\n        date[1] = int(date[1][1])\n    else:\n        date[1] = int(date[1])\n    if(date[2][0] == '0'):\n        date[2] = int(date[2][1])\n    else:\n        date[2] = int(date[2])    \n    return date\ntrain.Date = train.Date.apply(split_date)\ntest.Date = test.Date.apply(split_date)","a9193f5b":"train.head()","8a7567e7":"year = []\nmonth = []\nday = []\nfor i in train.Date:\n    year.append(i[0])\n    month.append(i[1])\n    day.append(i[2])","a06367c1":"train['Year'] = year\ntrain['Month'] = month\ntrain['Day'] = day\ndel train['Date']","43fa586f":"year = []\nmonth = []\nday = []\nfor i in test.Date:\n    year.append(i[0])\n    month.append(i[1])\n    day.append(i[2])","4d206a94":"test['Year'] = year\ntest['Month'] = month\ntest['Day'] = day\ndel test['Date']\ndel train['Id']\ndel test['ForecastId']","7483494a":"train.head()","c28c70ba":"test.head()","fa38b5d0":"train.Year.unique(),test.Year.unique()","74b59f64":"del train['Year']\ndel test['Year']","a07f9798":"train['ConfirmedCases'] = train['ConfirmedCases'].apply(int)\ntrain['Fatalities'] = train['Fatalities'].apply(int)","f6d0f5d0":"cases = train.ConfirmedCases\nfatalities = train.Fatalities\ndel train['ConfirmedCases']\ndel train['Fatalities']","7966cd34":"lb = LabelEncoder()\ntrain['Country_Region'] = lb.fit_transform(train['Country_Region'])\ntest['Country_Region'] = lb.transform(test['Country_Region'])","77153e3d":"scaler = MinMaxScaler()\nx_train = scaler.fit_transform(train.values)\nx_test = scaler.transform(test.values)","bcb379ef":"rf = XGBRegressor(n_estimators = 2500 , random_state = 0 , max_depth = 27)\nrf.fit(x_train,cases)","1685d1e2":"cases_pred = rf.predict(x_test)\ncases_pred","2a44285b":"cases_pred = np.around(cases_pred,decimals = 0)\ncases_pred","e6da358c":"x_train_cas = []\nfor i in range(len(x_train)):\n    x = list(x_train[i])\n    x.append(cases[i])\n    x_train_cas.append(x)\nx_train_cas[0]","bda15dac":"x_train_cas = np.array(x_train_cas)","b5293b72":"rf = XGBRegressor(n_estimators = 2500 , random_state = 0 , max_depth = 27)\nrf.fit(x_train_cas,fatalities)","0a2438ef":"x_test_cas = []\nfor i in range(len(x_test)):\n    x = list(x_test[i])\n    x.append(cases_pred[i])\n    x_test_cas.append(x)\nx_test_cas[0]","224c86e6":"x_test_cas = np.array(x_test_cas)","21f5f6a1":"fatalities_pred = rf.predict(x_test_cas)\nfatalities_pred","03042b59":"fatalities_pred = np.around(fatalities_pred,decimals = 0)\nfatalities_pred","1db1d904":"submission['ConfirmedCases'] = cases_pred\nsubmission['Fatalities'] = fatalities_pred","cee3a799":"submission.head()","66de554f":"submission","729640f9":"converting string date and time into the python version","65a14c16":"scenarios in India, US, Italy, Spain, UK, Singapore","dde3bbc4":"**TOP 20 countries with total number of cases**","c7357931":"Now we are using Runge-kutta method to solve the diffeerential equations","c45a8bd9":"**from the dataset**","896aa536":" Now we are going with **Susceptibel, infected, Recovered\/diseased model i.e, 'SIR model'**\nFrom the data we get to know about the general general behavior of the virus in agregated data, for the country where the coronavirus was originated and for four other interesting countries. There's a lot of information to be extracted from this data; for example, we haven't analyzed the effects of long\/lat of countries. However, since our main purpose is to develop a predective model in order to understand the key factors that impact the COVID-19 transmission, Now we are proceeding with the SIR model to have the better prediction,\nThis model considers the population that belongs to one of these categories as mentioned above\nSusceptible (S) The individual hasn't contracted the disease, but she can be infected due to transmisison from infected people.\nInfected (I) This person has contracted the disease.\nRecovered\/Deceased (R) The disease may lead to one of two destinies: either the person survives, hence developing inmunity to the disease, or the person is deceased.\nThere are many versions of this model, considering birth and death (SIRD with demography), with intermediate states, etc. However, since we are in the early stages of the COVID-19 expansion and our interest is focused in the short term, we will consider that people develops immunity (in the long term, immunity may be lost and the COVID-19 may come back within a certain seasonality like the common flu) and there is no transition from recovered to the remaining two states. With this, the differential equations that govern the system are:\ndS dt = \u2212\u03b2SI\/N\ndI dt = (\u03b2SI\/N)\u2212\u03b3I\ndR dt = \u03b3I\nWhere \u03b2(beta) is the contagion rate of the pathogen and \u03b3(gama) is the recovery rate.\nImplementing the SIR model\nSIR model can be implemented in many ways: from the differential equations governing the system, within a mean field approximation or running the dynamics in a social network (graph). For the sake of simplicity, I'vem chosen the first option, and we will simply run a numerical method (Runge-Kutta) to solve the differential equations system","e9e972e1":"Results obtained for N=world population, only one initial infected case, \u03b2=0.3, \u03b3=0.5 and a leap pass hs=0.1 are shown below:","cc670642":"163 countries and almost 2 full months from 2020, which is enough data to get some clues about the pandemic. Let's see a few plots of the worldwide tendency to see if we can extract some insights","94f36a4b":"Fititng the SIR parameteres into the real data\nconsidering Spain and  Italy","adc20c83":"**Evolution of covid19 infection in all the above mentioned 6 countries**","e1bcd71a":"China's scenario for covid 19 since its the epicentric of pandemic outbreak","c6a7aa95":"Data enrichment\nAnalyzing SIR simulations is used to understand that approximately how many deaths occured on what dates and how many were infected and recovered on the approximate range of date. there are alternative methods that may prove being equally useful both to predict and to understand the pandemic evolution. Many of these methods rely on having rich data to extract conclusions and allow algorithms to extrapolate patterns in data, and that is exactly what we are going to do.\nMain workflow of this section:\n\n1. Join data, filter dates and clean missings\n2.Compute lags and trends \n3.Add country details Disclaimer: \n","36d59159":"**Fraction of the total population which is being infected in a particular country**","3d644771":"without china , we are looking the tendency of covid-19","2086eebd":"In order to obtain the evolution of the disease we simply define the initial conditions and call the rk4 method:"}}