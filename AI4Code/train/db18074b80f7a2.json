{"cell_type":{"f9216c3d":"code","af03168e":"code","f9fda07f":"code","4060b43e":"code","296846d5":"code","f8fc7777":"code","bae98186":"code","20dbfeab":"code","c5ce289e":"code","130a0163":"code","26fb5b5f":"code","9e214783":"code","0a944bbe":"code","3c346779":"code","28dd16a8":"code","d0e87a81":"code","2eb3f899":"markdown","14d3fdcb":"markdown","ea67824a":"markdown","f690181a":"markdown"},"source":{"f9216c3d":"# Input data files are available in the read-only \"..\/input\/\" directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        ","af03168e":"import numpy as np \nimport pandas as pd\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, KFold\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV  \nfrom sklearn.metrics import classification_report, accuracy_score\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Dropout, Lambda\nfrom tensorflow.keras.layers import LeakyReLU, PReLU, ELU\nfrom tensorflow.keras.layers import Convolution2D, MaxPooling2D\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.utils.np_utils import to_categorical","f9fda07f":"df_train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\nprint(df_train.shape)\ndf_train.head()","4060b43e":"df_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\nprint(df_test.shape)\ndf_test.head()","296846d5":"df_submission = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\nprint(df_submission.shape)\ndf_submission.head()","f8fc7777":"df_train.dtypes","bae98186":"df_train.isnull().sum()","20dbfeab":"df_train['label'].value_counts()","c5ce289e":"Y_train = df_train['label'].values\nX_train = df_train.drop(['label'], axis = 1).values \nX_test = df_test.values \n\nprint(X_train.shape, Y_train.shape)\nprint(X_test.shape)","130a0163":"Y_train = to_categorical(Y_train)\nX_train = (X_train\/255).reshape(X_train.shape[0],28,28,1)\nX_test = (X_test\/255).reshape(X_test.shape[0],28,28,1)\n\nprint(X_train.shape, Y_train.shape)\nprint(X_test.shape)","26fb5b5f":"x_train, x_test, y_train, y_test = train_test_split( X_train, Y_train, test_size=0.2, random_state=4)\nprint ('Train set:', x_train.shape,  y_train.shape)\nprint ('Test set:', x_test.shape,  y_test.shape)","9e214783":"model = Sequential()\nmodel.add(Convolution2D(64,(3,3), activation='relu',input_shape=(28,28,1)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Convolution2D(64,(3,3), activation='relu'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Convolution2D(32,(3,3), activation='relu'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","0a944bbe":"early_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=5)\nmodel_history = model.fit(x_train, y_train, validation_data=(x_test,y_test), batch_size = 64, epochs=10, verbose=1, callbacks=[early_stop])","3c346779":"prediction = model.predict_classes(X_test)\nprediction[0:10]","28dd16a8":"df_submission['Label'] = prediction\ndf_submission.to_csv('prediction.csv', index=False)\ndf_submission.head()","d0e87a81":"df_submission['Label'].value_counts()","2eb3f899":"## Data Preprocessing","14d3fdcb":"## Model Development","ea67824a":"## Data Acquisition","f690181a":"## Submission"}}