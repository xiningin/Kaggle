{"cell_type":{"53e471b5":"code","331c4e42":"code","23a89ca2":"code","3abc064e":"code","cd347f93":"code","e3fcd691":"code","5ab78967":"code","472fc608":"code","8bc6eae6":"code","7395a19a":"code","ec6cdc20":"code","844e69c9":"code","74114757":"code","4a02c1d8":"code","91559129":"code","ac62bef1":"code","6419ccae":"code","a787649e":"code","cb7cfd58":"code","329d18fd":"code","59ec72f0":"code","42b9e410":"code","8ac5b900":"code","7e290ca4":"code","9b61e4eb":"code","1bba494f":"code","d78c995f":"code","6143f6b9":"code","ba1b0f54":"code","dff90dc0":"code","7e2f1bb6":"code","e6bd6b87":"code","5bb48557":"code","b75eb08d":"code","dc468f93":"code","ea23456a":"code","b7414031":"code","f347ba63":"code","0106cd47":"code","b9ea91e3":"code","e24ff67b":"code","4ca2a34e":"code","90b82d37":"code","b296e5ac":"code","24d2637a":"code","7758890d":"code","e416609c":"code","75595a05":"code","cf95cf97":"code","4f6624a4":"code","16c71b98":"code","03bd3828":"code","c7a9c428":"code","baaa6f2f":"code","e75a706c":"code","ce700362":"code","4de00464":"code","4143a2c4":"markdown","9b581527":"markdown","98c34f68":"markdown","ad927d97":"markdown","a56943fb":"markdown","c4b00ec5":"markdown","d0627082":"markdown","8abb6391":"markdown","0f513121":"markdown","4d3d2c10":"markdown","839055e3":"markdown","c7c33751":"markdown","f7de8b0a":"markdown","320c1aab":"markdown","3d86dedd":"markdown","69c34c4f":"markdown","8f8c0c6d":"markdown","4e0ffe6a":"markdown","8ce45f03":"markdown","9a2eedef":"markdown","91d4c3f6":"markdown","ee6ca0fd":"markdown","182f948a":"markdown","35e99738":"markdown","07ecf5b7":"markdown","81eb10d5":"markdown","b84ef7d1":"markdown","7113f63b":"markdown","07eb07f5":"markdown"},"source":{"53e471b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport networkx as nx\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","331c4e42":"uber_df = pd.read_csv(\"\/kaggle\/input\/uberdrives\/My Uber Drives - 2016.csv\")","23a89ca2":"# First 5 records \nuber_df.head()","3abc064e":"# Last 5 records \nuber_df.tail()","cd347f93":"# The  shape and size of data \nprint(uber_df.shape)\nprint (uber_df.size)","e3fcd691":"# Columns names \nuber_df.columns","5ab78967":"# Data  type of the columns \n\nuber_df.dtypes","472fc608":"#get more information about data\nuber_df.info()","8bc6eae6":"# Check the missing values \nuber_df.isnull().any()\n","7395a19a":"#Get the number of missing values in each column\nuber_df.isnull().sum()","ec6cdc20":"uber_df[uber_df['END_DATE*'].isnull()]","844e69c9":"uber_df.drop(uber_df.index[1155],inplace=True)\n","74114757":"#Duplicated Records needs to be removed \n\nuber_df[uber_df.duplicated()]","4a02c1d8":"# Dropping the duplicates values \n\nuber_df.drop_duplicates(inplace=True)\n","91559129":"# Get the initial data with dropping the NA values\nuber_df = uber_df.dropna()\n\n#Get the shape of the dataframe after removing the null values\nuber_df.shape","ac62bef1":"#get the summary of data\nuber_df.describe().T","6419ccae":"# Displot of Miles \nplt.figure(figsize=(10,6))\nsns.distplot(uber_df[\"MILES*\"])\nplt.show()","a787649e":"# Get the starting destination, unique destination\nprint(uber_df['START*'].unique()) #names of unique start points\nprint(len(uber_df['START*'].unique())) #count of unique start points","cb7cfd58":"# Get the starting destination, unique destination\nprint(uber_df['STOP*'].unique()) #names of unique start points\nprint(len(uber_df['STOP*'].unique())) #count of unique start points","329d18fd":"#Identify popular start destinations - top 10\nuber_df['START*'].value_counts().head(10)","59ec72f0":"plt.figure(figsize=(15,10))\nsns.countplot(y=\"START*\",order= pd.value_counts(uber_df['START*']).iloc[:10].index, data=uber_df)\nplt.show()","42b9e410":"#Identify popular stop destinations - top 10\nuber_df['STOP*'].value_counts().head(10)","8ac5b900":"plt.figure(figsize=(15,10))\nsns.countplot(y=\"STOP*\",order= pd.value_counts(uber_df['STOP*']).iloc[:10].index, data=uber_df)\nplt.show()","7e290ca4":"#Find out most farthest start and stop pair -top10\n#Dropping Unknown Location Value\nuber_df2 = uber_df[uber_df['START*']!= 'Unknown Location']\nuber_df2 = uber_df2[uber_df2['STOP*']!= 'Unknown Location']\n\nuber_df2.groupby(['START*','STOP*'])['MILES*'].sum().sort_values(ascending=False).head(10)","9b61e4eb":"#Find out most popular start and stop pair - top10\nuber_df2.groupby(['START*','STOP*']).size().sort_values(ascending=False).head(10)","1bba494f":"# For this purpose, we need to make a function\nplt.figure(figsize=(8,5))\ndef round(x):\n    if x['START*'] == x['STOP*']:\n        return 'YES'\n    else:\n        return 'NO'\n    \nuber_df['ROUND_TRIP*'] = uber_df.apply(round, axis=1)\n\nsns.countplot(uber_df['ROUND_TRIP*'], order=uber_df['ROUND_TRIP*'].value_counts().index, palette='viridis')\nplt.show()","d78c995f":"# Convert the START DATE and END_DATE in string format to datetime object\n\nuber_df.loc[:, 'START_DATE*'] = uber_df['START_DATE*'].apply(lambda x: pd.datetime.strptime(x, '%m\/%d\/%Y %H:%M'))\nuber_df.loc[:, 'END_DATE*'] = uber_df['END_DATE*'].apply(lambda x: pd.datetime.strptime(x, '%m\/%d\/%Y %H:%M'))","6143f6b9":"#Calculate the duration for the rides\nuber_df['DIFF'] = uber_df['END_DATE*'] - uber_df['START_DATE*']","ba1b0f54":"#convert duration to numbers(minutes)\nuber_df.loc[:, 'DIFF'] = uber_df['DIFF'].apply(lambda x: pd.Timedelta.to_pytimedelta(x).days\/(24*60) + pd.Timedelta.to_pytimedelta(x).seconds\/60)","dff90dc0":"uber_df['DIFF'].head()","7e2f1bb6":"uber_df['DIFF'].describe()","e6bd6b87":"#Capture Hour, Day, Month and Year of Ride in a separate column\nuber_df['month'] = pd.to_datetime(uber_df['START_DATE*']).dt.month\nuber_df['Year'] = pd.to_datetime(uber_df['START_DATE*']).dt.year\nuber_df['Day'] = pd.to_datetime(uber_df['START_DATE*']).dt.day\nuber_df['Hour'] = pd.to_datetime(uber_df['START_DATE*']).dt.hour","5bb48557":"#Capture day of week and rename to weekday names\nuber_df['day_of_week'] = pd.to_datetime(uber_df['START_DATE*']).dt.dayofweek\ndays = {0:'Mon',1:'Tue',2:'Wed',3:'Thur',4:'Fri',5:'Sat',6:'Sun'}\n\nuber_df['day_of_week'] = uber_df['day_of_week'].apply(lambda x: days[x])","b75eb08d":"#Rename the numbers in the Month column to calendar months\nimport calendar\nuber_df['month'] = uber_df['month'].apply(lambda x: calendar.month_abbr[x])\nuber_df.head()","dc468f93":"#Extract the total number of trips per month, weekday\nprint(uber_df['month'].value_counts())\nprint(uber_df['day_of_week'].value_counts())","ea23456a":"plt.figure(figsize=(12,7))\nsns.countplot(uber_df['month'],order=pd.value_counts(uber_df['month']).index)\nplt.show()","b7414031":"plt.figure(figsize=(12,7))\nsns.countplot(uber_df['day_of_week'],order=pd.value_counts(uber_df['day_of_week']).index)\nplt.show()","f347ba63":"#Getting the average distance covered per month\nuber_df.groupby('month').mean()['MILES*'].sort_values(ascending = False)","0106cd47":"plt.figure(figsize=(12,5))\nuber_df.groupby('month').mean()['MILES*'].sort_values(ascending = False).plot.bar(color=['maroon','darksalmon','green','blue','yellow','teal'])\nplt.axhline(uber_df['MILES*'].mean(), linestyle='--', color='green', label='Mean distance')\nplt.legend()\nplt.show()","b9ea91e3":"#Number of trips based of hour of day\nuber_df['Hour'].value_counts()","e24ff67b":"plt.figure(figsize=(12,7))\nsns.countplot(uber_df['Hour'],order=pd.value_counts(uber_df['Hour']).index)\nplt.show()","4ca2a34e":"#which hours of the day highest trips are made\n\nplt.figure(figsize=(20,10))\nsns.countplot(data=uber_df, x=uber_df['Hour'], hue=uber_df['day_of_week'],\n              palette=\"Set1\", )\nplt.show()","90b82d37":"# Day Time or Night time \na = pd.to_datetime(['18:00:00']).time\nuber_df['DAY\/NIGHT*'] = uber_df.apply(lambda x : 'Night Ride' if x['START_DATE*'].time() > a else 'Day Ride', axis=1)\nsns.countplot(uber_df['DAY\/NIGHT*'], palette='Set2' , order = uber_df['DAY\/NIGHT*'].value_counts().index)\nplt.show()","b296e5ac":"plt.figure(figsize=(9,7))\nsns.countplot(uber_df['day_of_week'], hue=uber_df['DAY\/NIGHT*'], palette='Set1' ,\n              order=uber_df['day_of_week'].value_counts().index)\nplt.show()","24d2637a":"m = {}\n\nfor i in uber_df['MILES*']:\n    for i in uber_df['MILES*']:\n        if i < 10:\n            m.setdefault(i,'0-10 miles')\n        elif i >= 10 and i < 20:\n            m.setdefault(i,'10-20 miles')\n        elif i >= 20 and i < 30:\n            m.setdefault(i,'20-30 miles')\n        elif i >= 30 and i < 40:\n            m.setdefault(i,'30-40 miles')\n        elif i >= 40 and i < 50:\n            m.setdefault(i,'40-50 miles')\n        else:\n            m.setdefault(i,'Above 50 miles')\n            \nuber_df['MILES_BUCKET*'] = uber_df['MILES*'].map(m)\n\nplt.figure(figsize=(10,6))\nsns.countplot(uber_df['MILES_BUCKET*'], palette='Set1' ,\n              order = uber_df['MILES_BUCKET*'].value_counts().index)\nplt.show()","7758890d":"plt.figure(figsize=(10,7))\nsns.countplot(uber_df['MILES_BUCKET*'], hue=uber_df['DAY\/NIGHT*'], palette='cubehelix',\n              order = uber_df['MILES_BUCKET*'].value_counts().index)\nplt.show()","e416609c":"# calculate trip speed for each trip\nuber_df['Duration_hours'] = uber_df['DIFF'] \/ 60\nuber_df['Speed_KM'] = uber_df['MILES*'] \/ uber_df['Duration_hours']\nuber_df['Speed_KM'].describe()","75595a05":"plt.figure(figsize=(12,7))\nsns.distplot(uber_df['Speed_KM'])","cf95cf97":"uber_df['CATEGORY*'].value_counts()","4f6624a4":"plt.figure(figsize=(8,6))\nsns.countplot(uber_df['CATEGORY*'])\nplt.show()","16c71b98":"#Purpose\nuber_df['PURPOSE*'].value_counts()","03bd3828":"plt.figure(figsize=(15,6))\nsns.countplot(uber_df['PURPOSE*'], order=uber_df['PURPOSE*'].value_counts().index, palette='Set2')\nplt.show()","c7a9c428":"#Average distance traveled for each activity\nuber_df.groupby('PURPOSE*').mean()['MILES*'].sort_values(ascending = False)","baaa6f2f":"# How many miles was earned per category and purpose ?\nuber_df.groupby('PURPOSE*').sum()['MILES*'].sort_values(ascending = False)","e75a706c":"#How many miles was earned per category and purpose ?\nuber_df.groupby('CATEGORY*').sum()['MILES*'].sort_values(ascending = False)","ce700362":"#Categorywise trip per day\nplt.figure(figsize=(9,5))\na=sns.countplot(uber_df['day_of_week'],hue=uber_df['CATEGORY*'],palette=[\"#FF3333\" ,\"#00CC00\"],\n                order=uber_df['day_of_week'].value_counts().index)\nplt.legend(bbox_to_anchor=(1.05, 0.95), loc=2)\nplt.show()","4de00464":"# Monthly Ride based on category\nplt.figure(figsize=(9,5))\nsns.countplot(uber_df['month'],hue=uber_df['CATEGORY*'],palette=\"Set1\",\n              order=uber_df['month'].value_counts().index)\nplt.show()","4143a2c4":"**Longest average distance is covered in Oct and least in Dec**","9b581527":"**The dataset has 1 numerical variable and 6 categorical variables** <br>\n**The \"PURPOSE\" column has many missing values**","98c34f68":"<a id=\"top\"><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" role=\"tab\" aria-controls=\"home\">Table of Content<\/h3>\n    \n   * [1. Data Exploration](#1)\n   * [2. Destination (Starting and Stopping)](#2)\n   * [3. Exploring date and time object](#3)\n   * [4. Category and Purpose](#4)\n   * [5. Conclusion](#5)\n","ad927d97":"**There are 137 unique destinations in the datset**","a56943fb":"**Most trips are for meetings**","c4b00ec5":"**Most trips are in the business category**","d0627082":"**Both highest number of Day and Night Rides were below 10miles of a distance**","8abb6391":"**Cary and Durham are the farthest from each other**","0f513121":"**Highest number of Day rides were on Friday while Night rides were on Sunday\/Thursday**\n","4d3d2c10":"**Maximum trips were made during Day Time**\n","839055e3":"**There are 131 unique starting points in the dataset**","c7c33751":"<a id=\"5\"><\/a>\n<font color=\"darkslateblue\" size=+2.5><b>5. Conclusion<\/b><\/font>\n\n<a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Go to TOC<\/a>\n","f7de8b0a":"**The dataset now contains 653 rows of non-null values**","320c1aab":"**Cary and Durham are the farthest from each other**","3d86dedd":"* The dataset has 1156 rows and 7 columns . The total size of the dataset is 8092","69c34c4f":"<a id=\"3\"><\/a>\n<font color=\"darkslateblue\" size=+2.5><b>3.Exploring date and time object<\/b><\/font>\n\n<a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Go to TOC<\/a>\n","8f8c0c6d":"**The average speed is little right skewed here**","4e0ffe6a":"- The miles driven ranges from 0.5 miles to 12204 miles with an average of 21 miles\n- There are 131 unique start destinations in the dataset\n- There are 137 unique start destinations in the dataset\n- Cary is most poplular starting point for this driver.\n- Cary also features in the most popular stop destinations\n- Cary and Durham are the farthest from each other\n- The most popular start to destination pair is Cary-Morrisville\n- Ride durations range from 2 minutes to 330 minutes with an average duration of 23 minutes\n- December has maximum number of trips and August has the least\n- Friday has the maximum number of trips\n- Longest average distance is covered in Oct and least in Dec\n- Afternoons and evenings seem to have the maximum number of trips\n- Most trips are in the business category\n- Most trips are for meetings\n- There are more number of short distanced trips\n- There are more number of day trips\n- Both highest number of Day and Night Rides were below 10miles of a distance\n- Highest number of Day rides were on Friday while Night rides were on Sunday\/Thursday","8ce45f03":"**Cary also features in the most popular stop destinations**","9a2eedef":"<a id=\"2\"><\/a>\n<font color=\"darkslateblue\" size=+2.5><b>2. Destination(Starting and Stopping)<\/b><\/font>\n\n<a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Go to TOC<\/a>\n\n","91d4c3f6":"**One can see that there are more number of short distanced trips**\n","ee6ca0fd":"**Afternoons and evenings seem to have the maximum number of trips**","182f948a":"**No of round trips is less**","35e99738":"**Ride durations range from 2 minutes to 330 minutes with an average duration of 23 minutes**","07ecf5b7":"<a id=\"1\"><\/a>\n<font color=\"darkslateblue\" size=+2.5><b>1. Data Exploration <\/b><\/font>\n<a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Go to TOC<\/a>\n","81eb10d5":"<a id=\"4\"><\/a>\n<font color=\"darkslateblue\" size=+2.5><b>4.Category and Purpose <\/b><\/font>\n\n<a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Go to TOC<\/a>\n","b84ef7d1":"- This miles column is rightly skewed ( as we have mean > median)\n- The ride ranges from 0.5 miles 310.3 miles","7113f63b":"**From the above it is clear that is there is one null data which needs**","07eb07f5":"**We can say that Cary is most poplular starting point for this driver.**"}}