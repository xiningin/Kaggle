{"cell_type":{"7b972b34":"code","e513326c":"code","1950887b":"code","a3a5e23f":"code","08f5a5ad":"code","be74cf6b":"code","d7896b05":"code","fedefc1d":"code","198c9cc7":"code","bb669aab":"code","5ff96d67":"code","d4fea9c9":"code","f1359f57":"code","a007b0cb":"code","d5579cac":"code","7842223b":"code","c14a27f5":"code","f560bab8":"code","8c1351f8":"code","a45a4db0":"code","b75c2518":"code","8d157fd0":"code","b2c6d63f":"code","d5685366":"code","05bc831c":"code","e76337f3":"code","3b48a5a1":"code","5002748e":"code","5c3f163e":"code","685b3d8b":"code","8520854c":"code","6162c797":"code","49f6c078":"code","2e8dc7b9":"code","ff6d10b1":"code","61d5fc97":"code","77ddab26":"code","09340884":"code","44a6f3e1":"code","fb419b04":"code","c8d11e88":"code","ffb1026d":"code","cfd41039":"code","cc8be298":"code","e4fc0d76":"code","6f83760d":"code","f3829bf4":"code","b8132bc5":"code","09c53212":"code","1f294e1e":"code","c86da885":"code","ac7f5af6":"code","1753ec7a":"code","fc9b89a1":"code","1de07e45":"code","d1b1beee":"code","30c8d6f2":"code","77209c7f":"code","e7464837":"code","8247b69d":"code","1975e4ff":"code","5affafe1":"code","2b31d248":"code","8927c43c":"code","689d9a24":"code","31a5c583":"code","e05d0e4e":"code","e1e65baa":"code","601acafb":"code","bbcf45e7":"code","8a369c96":"code","65b0dd26":"code","6b39b61a":"code","38fc651a":"code","08e2bfcc":"markdown","e461156c":"markdown"},"source":{"7b972b34":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler, LabelEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestRegressor, BaggingRegressor, GradientBoostingRegressor, AdaBoostRegressor\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, RidgeCV\nfrom sklearn.metrics import mean_squared_log_error,mean_squared_error, r2_score, mean_absolute_error\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier, BaggingRegressor, VotingClassifier\nfrom sklearn.model_selection import train_test_split, cross_validate\nfrom sklearn.svm import LinearSVC, SVC\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import KFold\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e513326c":"df=pd.read_csv('..\/input\/titanic\/train.csv')\ndf.shape","1950887b":"df.columns","a3a5e23f":"df.head()","08f5a5ad":"df.info()","be74cf6b":"df.isnull().sum()","d7896b05":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","fedefc1d":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',data=df)","198c9cc7":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Sex',data=df)","bb669aab":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Pclass',data=df)","5ff96d67":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='SibSp',data=df)","d4fea9c9":"sns.countplot(x='SibSp',data=df)","f1359f57":"sns.distplot(df['Age'].dropna())","a007b0cb":"df['Age'].hist()","d5579cac":"df['Fare'].hist(bins=40,figsize=(10,8))","7842223b":"sns.boxplot(x='Pclass',y='Age',data=df)","c14a27f5":"def impute_age(cols):\n    Age=cols[0]\n    Pclass=cols[1]\n    \n    if pd.isnull(Age):\n        if Pclass==1:\n            return 37\n        elif Pclass==2:\n            return 29\n        else:\n            return 24\n    else:\n        return Age     \n","f560bab8":"df['Age']=df[['Age','Pclass']].apply(impute_age,axis=1)","8c1351f8":"df_test=pd.read_csv('..\/input\/titanic\/test.csv')\ntest_id=df_test[\"PassengerId\"]\ndf_test['Age']=df_test[['Age','Pclass']].apply(impute_age,axis=1)","a45a4db0":"df.drop('Cabin',axis=1,inplace=True)\ndf_test.drop('Cabin',axis=1,inplace=True)","b75c2518":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","8d157fd0":"sns.heatmap(df_test.isnull(),yticklabels=False,cbar=False,cmap='viridis')","b2c6d63f":"df.info()\ndf['Sex'].unique()\ndf['Embarked'].unique()","d5685366":"df_test.info()","05bc831c":"#label_encode= preprocessing.LabelEncoder()\n#df['Sex']=label_encode.fit_transform(df['Sex'])\n#df['Sex'].unique()\n#df['Embarked']=label_encode.fit_transform(df['Embarked'].astype(str))\n#df['Embarked'].unique()\nSex=pd.get_dummies(df['Sex'],drop_first=True)\nSex_test=pd.get_dummies(df_test['Sex'],drop_first=True)\nEmbarked=pd.get_dummies(df['Embarked'],drop_first=True)\nEmbarked_test=pd.get_dummies(df_test['Embarked'],drop_first=True)","e76337f3":"df_test.drop(['Name','Sex','Embarked','Ticket'],axis=1,inplace=True)\ndf_test.head","3b48a5a1":"df.drop(['Name','Sex','Embarked','Ticket'],axis=1,inplace=True)\ndf.head()","5002748e":"df_test=pd.concat([df_test,Sex_test,Embarked_test],axis=1)\ndf_test.head()","5c3f163e":"df_test.info","685b3d8b":"df=pd.concat([df,Sex,Embarked],axis=1)\n#df=df[[\"PassengerId\",\"Pclass\",\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"Male\",\"Q\",\"S\",\"Survived\"]]\ndf.head()","8520854c":"df=df[[\"PassengerId\",\"Pclass\",\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"male\",\"Q\",\"S\",\"Survived\"]]\ndf.head()","6162c797":"X=df.drop('Survived',axis=1)\ny=df.Survived\nX_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.2,random_state=42)\nmodels= [LinearSVC(), SVC(kernel='rbf'),KNeighborsClassifier(), RandomForestClassifier(),DecisionTreeClassifier(),GradientBoostingClassifier(), GaussianNB()]\nmodel_names=['LinearSVM','rbfSVM','KNeighbors','RandomForestClassifier','DecisionTree','GradientBoostingClassifier','GaussianNB']\naccu=[]\n\nfor model in range(len(models)):\n    clf=models[model]\n    clf.fit(X_train,y_train)\n    pred=clf.predict(X_test)\n    accu.append(accuracy_score(pred,y_test))\nmodels={'Model': model_names,'Accuracy':accu}\n\nmodel_df=pd.DataFrame(models)\n\nmodel_df","49f6c078":"def feature_scaling(X_train, X_test, y_train,y_test, name_scaler):\n    models=[LinearSVC(), SVC(kernel='rbf'),KNeighborsClassifier(), RandomForestClassifier(), DecisionTreeClassifier(), GradientBoostingClassifier(), GaussianNB()]\n    accu_score=[]\n    for i in range(len(models)):\n        clf=models[model]\n        clf.fit(X_train, y_train)\n        pred=clf.predict(X_test)\n        accu_score.append(accuracy_score(pred, y_test))\n    model_df[name_scaler]=np.array(accu_score)","2e8dc7b9":"scalers= [MinMaxScaler(), StandardScaler()]\nnames =['Accuracy_MinMax','Accuracy_Standard']\nfor i in range(len(scalers)):\n    scaler=scalers[i]\n    scaler.fit(df)\n    scaled_df=scaler.transform(df)\n    X=scaled_df[:,0:9]\n    Y=df.Survived.to_numpy()\n    X_train, X_test, y_train, y_test=train_test_split(X,Y, test_size=0.2, random_state=42)\n    feature_scaling(X_train,X_test, y_train, y_test, names[i])\nmodel_df","ff6d10b1":"scaler= MinMaxScaler()\nX=df.drop('Survived',axis=1)\ny=df.Survived\nX_train, X_test, y_train, y_test= train_test_split(X, y, test_size=0.2, random_state=42)","61d5fc97":"X_train =scaler.fit_transform(X_train)\nX_test=scaler.transform(X_test)\nmodel, test_accuracy=[], []","77ddab26":"#knn\nparams_dict={'n_neighbors': [i+1 for i in range(50)], 'n_jobs': [-1]}\nknn_clf=RandomizedSearchCV(estimator= KNeighborsClassifier(),param_distributions=params_dict, scoring='accuracy', cv=10)\nknn_clf.fit(X_train, y_train)","09340884":"knn_clf.best_params_","44a6f3e1":"knn_clf.best_score_","fb419b04":"pred=knn_clf.predict(X_test)\naccuracy=accuracy_score(y_test, pred)\n\nmodel.append('KNN')\ntest_accuracy.append(accuracy)\nprint(\"KNN Accuracy:\", accuracy)","c8d11e88":"#SvM\nparams_dict={'C':[0.1,1,10,100,1000],'gamma':[1,0.1,0.01,0.001,0.0001],'kernel':['linear','rbf']}\nsvm_clf=RandomizedSearchCV(estimator=SVC(), param_distributions=params_dict,scoring='accuracy',cv=10)\nsvm_clf.fit(X_train, y_train)","ffb1026d":"svm_clf.best_params_","cfd41039":"svm_clf.best_score_","cc8be298":"pred=svm_clf.predict(X_test)\naccuracy= accuracy_score(y_test, pred)\n\nmodel.append('SVM')\ntest_accuracy.append(accuracy)\nprint(\"SVM Accuracy:\", accuracy)","e4fc0d76":"#decision tree\nparams_dict={'criterion': ['gini', 'entropy'], 'max_depth':[4,5,6,7,8,9,10,11,12,15,20,30,40,50,70,90,120,150]}\ndt_clf=RandomizedSearchCV(estimator=DecisionTreeClassifier(), param_distributions=params_dict,scoring='accuracy',cv=10)\ndt_clf.fit(X_train, y_train)","6f83760d":"dt_clf.best_params_","f3829bf4":"dt_clf.best_score_","b8132bc5":"pred=dt_clf.predict(X_test)\naccuracy=accuracy_score(y_test, pred)\n\nmodel.append('Decision Tree')\ntest_accuracy.append(accuracy)\nprint(\"Decision Tree Accuracy:\", accuracy)","09c53212":"#random forest\nparams_dict={'n_estimators':[100,200,300,400,500], 'max_features':['auto','sqrt','log2']}\nrf_clf=RandomizedSearchCV(estimator=RandomForestClassifier(n_jobs=-1),param_distributions=params_dict,scoring='accuracy',cv=10)\n\nrf_clf.fit(X_train,y_train)","1f294e1e":"rf_clf.best_params_","c86da885":"rf_clf.best_score_","ac7f5af6":"pred=rf_clf.predict(X_test)\naccuracy=accuracy_score(y_test, pred)\n\nmodel.append('Random Forest')\ntest_accuracy.append(accuracy)\n\nprint(\"Random Forest Accuracy:\", accuracy)","1753ec7a":"#gradientboosting\nparams_dict={'n_estimators':[100,200,300,400,500,600,700]}\ngb_clf=RandomizedSearchCV(estimator=GradientBoostingClassifier(), param_distributions=params_dict,cv=10)\n\ngb_clf.fit(X_train,y_train)","fc9b89a1":"gb_clf.best_params_","1de07e45":"gb_clf.best_score_","d1b1beee":"pred=gb_clf.predict(X_test)\naccuracy=accuracy_score(y_test, pred)\n\nmodel.append('GradientBoosting')\ntest_accuracy.append(accuracy)\nprint(\"GradientBoosting Accuracy:\", accuracy)","30c8d6f2":"#adaboost classifier\n#params_dict={'n_estimators': list(range(1,201,20))}\n#ada_clf=GridSearchCV(AdaBoostClassifier(DecisionTreeClassifier(criterion='entropy',max_depth=100), algorithm='SAMME.R'), param_grid=params_dict,cv=10)\n#ada_clf.fit(X_train, y_train)","77209c7f":"#ada_clf.best_params_","e7464837":"#ada_clf.best_score_","8247b69d":"#pred=ada_clf.predict(X_test)\n#accuracy=accuracy_score(y_test, pred)\n\n#model.append('AdaBoostClassifier')\n#test_accuracy.append(accuracy)\n\n#print(\"AdaBoost Classifier Accuracy:\", accuracy)","1975e4ff":"#voting classifier\n#hard voting\n#h_vote_clf=VotingClassifier([('logistic regression', LogisticRegression(C=0.1,penalty='l2')),('knn',KNeighborsClassifier(n_jobs=-1,n_neighbors=16)),('svm', SVC(C=1,gamma=1,kernel='rbf')),('random forests', RandomForestClassifier(max_features='log2',n_estimators=300)),('gradient boosting', GradientBoostingClassifier(n_estimators=100)),],voting='hard')","5affafe1":"#h_vote_clf.fit(X_train,y_train)","2b31d248":"#h_vote_clf.score(X_train,y_train)","8927c43c":"#pred=h_vote_clf.predict(X_test)\n#accuracy=accuracy_score(y_test,pred)\n\n#model.append('Hard voting')\n#test_accuracy.append(accuracy)\n#print(\"Hard Voting Accuracy:\",accuracy)","689d9a24":"#softvoting\n#s_vote_clf=VotingClassifier([('logistic regression', LogisticRegression(C=0.1,penalty='l2')),('knn',KNeighborsClassifier(n_jobs=-1,n_neighbors=16)),('svm', SVC(C=1,gamma=1,kernel='rbf',probability=True)),('random forests', RandomForestClassifier(max_features='log2',n_estimators=300)),('gradient boosting', GradientBoostingClassifier(n_estimators=100)),],voting='soft')","31a5c583":"#s_vote_clf.fit(X_train,y_train)","e05d0e4e":"#s_vote_clf.score(X_train,y_train)","e1e65baa":"\n#pred=s_vote_clf.predict(X_test)\n#accuracy=accuracy_score(y_test,pred)\n\n#model.append('Soft voting')\n#test_accuracy.append(accuracy)\n#print(\"Soft Voting Accuracy:\",accuracy)\n","601acafb":"#final evaluation\n#final=pd.DataFrame({'Model':model,'Test Accuracy': test_accuracy})","bbcf45e7":"#final","8a369c96":"df_test.isnull().any()","65b0dd26":"df_test['Fare']=df_test['Fare'].fillna((df_test['Fare'].mean()))","6b39b61a":"submission_pred=clf.predict(df_test)\ndf=pd.DataFrame({\"PassengerId\":test_id.values,\"Survived\":submission_pred,})","38fc651a":"df.to_csv(\"Submission.csv\",index=False)","08e2bfcc":"**IMPORT TEST DATA**","e461156c":"**This is my first notebbok.**\n\n**Any mistakes or sugesstions please comment.**"}}