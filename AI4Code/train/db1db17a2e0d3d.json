{"cell_type":{"930ae34d":"code","3107b0f2":"code","6e7c12ad":"code","66f73659":"code","e77be439":"code","d6cf28a6":"code","cf74f6d7":"code","46f21237":"code","7c45b3e0":"code","c51ea5f4":"code","8ffe6ef3":"code","0ae936c8":"code","21b6ae64":"code","74cb6b2f":"code","32f0dcd0":"code","6aa66101":"code","54f3ffc0":"code","be0fbe20":"code","5c7fd41d":"code","eed4e90d":"code","43231223":"code","d69acc9c":"code","f5d9e6d2":"code","bf882097":"code","e3740916":"code","50410c84":"code","af731f8c":"code","1ea5205b":"code","f2a48e20":"code","b5e3de09":"code","e16c24b4":"code","15ef8727":"code","28135322":"code","eae1187d":"code","a726d9f5":"code","cc126405":"code","4c430712":"code","bee44cc5":"code","75c5653f":"code","5c914afd":"code","52ab5b01":"code","010e2ca5":"code","42a3794a":"code","5be828e2":"code","02dc888e":"code","0c016315":"code","76eeee05":"code","cf1dda0d":"code","eb29d0c2":"code","a3ec0644":"code","b30c3f01":"markdown","9ffaa63a":"markdown","b192b461":"markdown"},"source":{"930ae34d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as datetime\nimport sys\n\nVALOR_CAMBIO_A_DOLAR = 19.54","3107b0f2":"df = pd.read_csv('..\/input\/mexican-zonaprop-datasets\/train.csv',\n        index_col='id',\n        dtype={'gimnasio': bool,\n                'usosmultiples': bool,\n                'escuelascercanas': bool,\n                'piscina': bool,\n                'centroscomercialescercanos': bool,\n                'tipodepropiedad': 'category',\n                'provincia': 'category',\n                'ciudad': 'category'\n            },\n        parse_dates=['fecha'])\npd.set_option('display.float_format', '{:.2f}'.format)","6e7c12ad":"df['tipodepropiedad'].isin(['Apartamento'])","66f73659":"df.columns","e77be439":"# Me quedo solo con las columnas que son importantes para nuestro analisis.\n# Quizas el titulo y la descripcion tampoco las use, pero primero habria que hacer  un analisis de ese campo\ndf.drop(['direccion','idzona','lat','lng'], axis=1, inplace=True)","d6cf28a6":"df.columns","cf74f6d7":"# 1. Ver cuantos datos (observaciones) tenemos en total\n# 2. Ver cuantos atributos tiene cada observaci\u00b4on\n# 3. Ver el nombre y tipo de dato de cada observaci\u00b4on\n# 4. Ver cuantos valores faltantes existen y en que proporci\u00b4on se presentan para\n# cada atributo\n# Despues de parsear y filtrar los nulos, deberiamos poner cada columna en su tipo ideal.\n# df['antiguedad'] = df['antiguedad'].astype(int)     algo de este estilo\n\nprint(\"Filas, columnas: \", df.shape)\nprint(\"Tipos: \\n\", df.dtypes)","46f21237":"# Cosas a observar de esto:\n# Propiedades sin ciudad ni provincia.\n# Muchas propiedades sin metroscubiertos y totales especificados. Estas columnas son claves para \n# el precio (falta demostrar)\n# 46 propiedades sin clasificacion de tipo de propiedad. \n# Habitaciones y Banos, muchos datos nulos. Sera que no tienen? Una casa no pude no tener habitacio ni bano...\n# Garages, piscina, salondeusosmultiples y gimnasio son extras. Supongo que el hecho de que no aparezcan \n# es que no los tienen.\n# Estos 4 extras, podrian reunirse en una categoria todas juntas para evaluar como crece el precio en base a esos\n# extras.\n# 43000 propiedades sin saber su antiguedad. Esto si ni idea como podemos reemplazarlos.\n\ndf_nulos = df.isnull().sum().to_frame().reset_index().rename(columns={'index':'Columna',0:'Cantidad de nulos'})\ndf_nulos = df_nulos[df_nulos['Cantidad de nulos']>200].sort_values(by='Cantidad de nulos')\n\nplt.figure(figsize=(15,10))\nax = sns.barplot(data=df_nulos, x='Columna', y='Cantidad de nulos')\n#ax.set(xlabel='\\n Columna ', ylabel='Cantidad \\n')\nax.set_xlabel('Columna \\n', fontsize=18)\nax.set_ylabel('\\n Cantidad', fontsize=18)\nax.set_title('Cantidad de nulos por columna', fontdict={'fontsize':20})\n","7c45b3e0":"df_nulos = df.isnull().sum().to_frame().reset_index().rename(columns={'index':'Columna',0:'Cantidad de nulos'})\ndf_nulos","c51ea5f4":"# Dato importante y valioso: No hay ninguna casa que no tenga especificado ni metros cubiertos ni totales\n# Esto me asegura que no tengo que limpiar datos, ya que si no hubiese tenido ninguno hubiese sido dato invalido\n# Conociendo uno de los dos valores, puedo intentar asumir el otro con alguna decision.\ndf[(df['metroscubiertos'].isnull()) & (df['metrostotales'].isnull())].head()","8ffe6ef3":"# Tiene sentido que los terrenos no tengan metros cubiertos. \n# Pero como una casa, un edificio, y cualquier otra cosa que no sea un terreno no tiene metros cubiertos? \n# Y ya demostre en uno de los graficos que los metros cubiertos y totales son lo que mas influyen en el precio. \n# Esto, a mi criterio, convierte estos datos en invalidos.\ndf_nulos_metroscub_tipoprop = df[df.metroscubiertos.isnull()]['tipodepropiedad'].value_counts().to_frame().reset_index().rename(columns={'index':'Tipo de propiedad', 'tipodepropiedad': 'Cantidad de nulos'})\ndf_nulos_metroscub_tipoprop = df_nulos_metroscub_tipoprop[df_nulos_metroscub_tipoprop['Cantidad de nulos']>100]\n\ndf_nulos_metroscub_tipoprop['Tipo de propiedad'].cat.remove_unused_categories(inplace=True)\n\ndf_nulos_metroscub_tipoprop.sort_values(by='Cantidad de nulos', inplace=True)\n\ndf_nulos_metroscub_tipoprop.reset_index(inplace=True)\n\nplt.figure(figsize=(15,10))\nax = sns.barplot(data=df_nulos_metroscub_tipoprop, x='Tipo de propiedad', y='Cantidad de nulos')\nax.set(xlabel='\\n Tipo de propiedad ', ylabel='Cantidad \\n')\nax.set_xlabel('\\n Tipo de propiedad ', fontsize=18)\nax.set_ylabel('Cantidad \\n', fontsize=18)\nax.set_title('Cantidad de metros cubiertos nulos por tipo de propiedad', fontdict={'fontsize':20})","0ae936c8":"# Extraigo todos aquellas propiedades que tienen metroscubiertos nulos y no son terrenos. \n# Quizas en vez de extraerlos, se podria asumir que los metros totales son todos cubiertos.\nindices_invalidos = df[(df.metroscubiertos.isnull()) & (~df.tipodepropiedad.isin(['Terreno','Terreno comercial','Lote']))].index\ndf.drop(index=indices_invalidos, inplace=True)\ndf.shape","21b6ae64":"# No tiene sentido que una casa no tenga ciudad ni provincia, ya que son datos que influyen en el precio\n# y no se pueden deducir de otro lado, ademas, son pocos\ndf.dropna(subset=['ciudad','provincia'], inplace=True)\ndf.shape","74cb6b2f":"# Es imposible que cualquier inmueble tenga metroscubiertos, y no tenga metros totales.\n# Para esos casos, le asigno la misma cantidad de metros cubiertos que totales, osea no tiene metros descubiertos.\ndf['metrostotales'].fillna(df['metroscubiertos'], inplace=True)","32f0dcd0":"# Despues de estos peque\u00f1os arreglos, se reducen la cantidad de nulos. Si bien siguen habiendo, \ndf.isnull().sum()","6aa66101":"# El resto de filas con metros cubiertos, son terrenos. Deberian tener 0 metros cubiertos.\ndf['metroscubiertos'].fillna(0, inplace=True)","54f3ffc0":"# Aquellas casas que no tienen el tipodepropiedad, son solo 19. Podria intentar sacar el tipo de prop\n# desde la descripcion pero no estaria seguro al respecto. Siendo solo 19, las elimino.\ndf.dropna(subset=['tipodepropiedad'],inplace=True)","be0fbe20":"df.shape","5c7fd41d":"# Para banos y habitaciones, completo los nulos con la moda agrupando por tipo de propiedad y ciudad.\n# En caso de que no este en ninguno de esos, le asigno la moda por tipo de propiedad.\n\ndf['banos'] = df.groupby(['tipodepropiedad','ciudad'])['banos'].transform(lambda x: x.fillna(x.mode()))\ndf['habitaciones'] = df.groupby(['tipodepropiedad','ciudad'])['habitaciones'].transform(lambda x: x.fillna(x.mode()))\ndf['banos'] = df.groupby(['tipodepropiedad'])['banos'].transform(lambda x: x.fillna(x.mode()))\ndf['habitaciones'] = df.groupby(['tipodepropiedad'])['habitaciones'].transform(lambda x: x.fillna(x.mode()))","eed4e90d":"df.isnull().sum()","43231223":"# 17964 registros sin banos ni habitaciones completados. Analizo eso:\n# Hay alguno con ambos nulos?\ndf[(df.banos.isnull())&(df.habitaciones.isnull())].shape\n# Esos 17964 coinciden.","d69acc9c":"# Registros sin ba\u00f1o agrupados por tipo de propiedad.\ndf[df.banos.isnull()].groupby('tipodepropiedad').size()","f5d9e6d2":"# Causalmente, todos esos nulos corresponden a inmuebles no habitables. Es raro suponer que no tienen ba\u00f1o, pero asumimos\n# que ese None, es algo que no modifica el valor del inmueble. No cambia para un local su valor si tiene o no ba\u00f1o.\ndf[df.habitaciones.isnull()].groupby('tipodepropiedad').size().sum()","bf882097":"# La idea es ver si alguno que no sea habitable, tiene ba\u00f1os distinto de None para ver como reemplazar los otros nan.\n# Por habitable me refiero a propiedades donde vive gente.\n\nhabitables = ['Casa','Apartamento','Casa en condominio','Casa uso de suelo','Quinta Vacacional','Villa','Duplex','Rancho','Departamento Compartido']\n\ndf[~df.tipodepropiedad.isin(habitables)]['habitaciones'].value_counts()","e3740916":"# Tomo la decision de llenar los banos y habitaciones nulos, ya demostrado que corresponden a inmuebles no habitables,\n# con el valor 0. Al margen de llenar los nulos, clarmaente son datos que no van a interesar para el analisis de este tipo de \n# propiedades.\ndf.banos.fillna(0, inplace = True)\ndf.habitaciones.fillna(0, inplace = True)","50410c84":"df.isnull().sum()","af731f8c":"# Ahora voy a analizar los garages nulos. \ndf[df.garages.isnull()].groupby('tipodepropiedad').size()","1ea5205b":"# De aca se puede ver informacion importante: Segun la ciudad y el tipo de propiedad, varia bastante la cantidad de garages\n# de una casa.\ndf.groupby(['tipodepropiedad','ciudad']).agg({'garages':'mean'})","f2a48e20":"# Tomo la decision de completar aquellos valores de garage nulos, con el promedio de garages para ese tipo de propiedad,\n# en la ciudad en que se encuentre.\ndf['garages'] = df.groupby(['tipodepropiedad','ciudad'])['garages'].transform(lambda x: x.fillna(x.mode()))\n\ndf['banos'].value_counts()","b5e3de09":"# Para aquellos registros que registraban de promedio nan, osea ninguno tenia, los relleno con 0 como valor de garage.\ndf['garages'].fillna(0, inplace=True)","e16c24b4":"# Solo me queda revisar los nulos de antiguedad. Son muchisimos. \ndf.isnull().sum()","15ef8727":"# La decision que voy a tomar para esos nulos, es similar a la de los garages. Voy a rellenar los nulos con el promedio\n# de antiguedad para ese tipo de propiedad y esa ciudad en la que esta ubicada la propiedad.\n# No se que tanto sentido tenga asignarle valores asi a la antiguedad porque de verdad estoy modificando de una forma que\n# no necesariamente sea correcta\n\n\n# df.groupby(['tipodepropiedad','ciudad']).agg({'antiguedad':'mean'})","28135322":"# df['antiguedad'] = df.groupby(['tipodepropiedad','ciudad'])['antiguedad'].transform(lambda x: x.fillna(x.mean()))","eae1187d":"df.isnull().sum()","a726d9f5":"# Se puede ver mucha informacion importante aca. \n# Por ejemplo, la diferencia abismal que hay entre el tercer cuantil y el maximo de precio.\n# Deberia seguir mirando un poco mas\ndf.describe()","cc126405":"# Antes de empezar a analizar los datos, deberia intentar detectar outliers en cuanto al precio.\nprint('El percentil 0.99: ',df.precio.quantile(0.99))\nprint('El percentil 0.01: ',df.precio.quantile(0.01))\nprint('El maximo: ', df.precio.max())\nprint('El minimo: ', df.precio.min())\nprint('Maximo \/ Percentil 0.99', df.precio.max()\/df.precio.quantile(0.99))\nprint('Percentil 0.01 \/ Minimo', df.precio.quantile(0.01)\/df.precio.min())\nprint('Cantidad de registros por debajo del percentil 0.01: ', df[df['precio']<df.precio.quantile(0.01)].shape)\nprint('Cantidad de registros por encima del percentil 0.99: ', df[df['precio']>df.precio.quantile(0.99)].shape)","4c430712":"# Un boxplot ayuda a poder detectar estos outliers.\n\ndf['precio_m2'] = df['precio']\/df['metrostotales']\n\ndef plot_outliers(df):\n    fig, ax = plt.subplots(figsize=(15,10))\n    green_diamond = dict(markerfacecolor='g', marker='D')\n    df_g1 = df.copy()\n    df_g1 = df[df['tipodepropiedad'].isin(['Casa','Apartamento','Edificio','Casa en condominio','Duplex','Terreno','Terreno comercial'])]\n    df_g1.tipodepropiedad.cat.remove_unused_categories(inplace=True)\n    df_g1.boxplot(column='precio_m2', by='tipodepropiedad', ax=ax, flierprops=green_diamond)\n    ax.set_title('Precio por tipo de propiedad', fontdict={'fontsize':20})\n    fig.suptitle('')\n    ax.set_xlabel('\\n Tipo de propiedad', fontsize=18)\n    ax.set_ylabel('Precio m2\\n', fontsize=18)\n    \nplot_outliers(df)","bee44cc5":"# Filtro los outliers, usando maximos y minimos en base al cuantil 1 y 3 y el IQR.\nprint('Antes de filtrar: ', df.shape)\n\ndef is_outlier(group):\n    Q1 = group.quantile(0.25)\n    Q3 = group.quantile(0.75)\n    IQR = Q3 - Q1\n    precio_min = Q1 - 1.5 * IQR\n    precio_max = Q3 + 1.5 * IQR\n    return ~group.between(precio_min, precio_max)\n\ndf = df[~df.groupby('tipodepropiedad')['precio_m2'].apply(is_outlier)]\n\nprint('Despues de filtrar: ', df.shape)","75c5653f":"# Vuelvo a graficar, para ver como cambiaron los outliers.\nplot_outliers(df)","5c914afd":"#Lleno los nulos de antiguedad con 0. Supongo que son todos nuevos.\ndf['antiguedad'].fillna(0, inplace=True)\n\n# Quedaron solo 517 con antiguedad nula. Los reviso:\n# df[df['antiguedad'].isnull()]\n\n# Para estos restantes, tomo la decision de rellenarlos de acuerdo a el promedio de antiguedad segun el tipo de prop y la prov\n\n# df['antiguedad'] = df.groupby(['tipodepropiedad','provincia'])['antiguedad'].transform(lambda x: x.fillna(x.mean()))","52ab5b01":"# df.isnull().sum()","010e2ca5":"# Los restantes, los elimino ya que son pocos y no puedo fijarle una antiguedad de forma tan directa\n# df.dropna(subset=['antiguedad'], inplace=True)","42a3794a":"df.isnull().sum()","5be828e2":"# Hay 70000 filas en las que los metros totales son menores a los cubiertos. Esto es invalido. La realidad es que son muchas\n# filas, por lo tano les seteo como metros totales, la misma cantidad que cubiertos.\n\ndf.loc[df['metrostotales']<df['metroscubiertos'], 'metrostotales'] = df['metroscubiertos']\n","02dc888e":"# Aca deberia ir seteando las columnas nuevas que me parezcan utiles para analisis.\n# Ideas: Precio por metro total, o agregar una columna con la cantidad de extras que tenga la casa.\ndf['precio_dolar'] = df['precio']\/VALOR_CAMBIO_A_DOLAR\ndf['precio_m2'] = df['precio']\/df['metrostotales']\ndf['extras'] = df['garages']+df['piscina']+df['usosmultiples']+df['gimnasio']\n","0c016315":"df[df.tipodepropiedad=='Lote']['metroscubiertos']","76eeee05":"df[df.ciudad.isnull()].tipodepropiedad.value_counts()","cf1dda0d":"df[df.metroscubiertos.isnull()].tipodepropiedad.value_counts()","eb29d0c2":"df_terrenos = df[df.tipodepropiedad =='Local Comercial']\ndf_terrenos[df.metroscubiertos.isnull()][['metrostotales','metroscubiertos']]","a3ec0644":"df.shape","b30c3f01":"# Detecci\u00f3n y limpieza de outliers","9ffaa63a":"# ---------------------------------------------------------------------------------------------------------\n\n# B\u00fasqueda y reemplazo de nulos","b192b461":"# Normalizaci\u00f3n de los Datos\n## El objetivo de esta secci\u00f3n es limpiar el set de datos para que todos podamos utilizarlo"}}