{"cell_type":{"95af83d6":"code","e4a0df17":"code","d317b313":"code","68b3fa8c":"code","cf4b0ffa":"code","67741e68":"code","6e953c37":"code","2db3c2aa":"code","450de6f2":"code","9695d41e":"code","fb170ea1":"code","23d0c846":"code","8707fb9c":"code","44e2498d":"code","043700a2":"code","f237d76b":"code","656fc019":"code","fadd2c9b":"code","bc054bda":"code","9a2a26ae":"code","c3ad85a1":"code","c19bba26":"code","25cf9db9":"code","5345ad79":"code","877562de":"code","309e2a07":"code","e8420a0a":"code","6504343d":"code","41208b01":"code","a4c9bf63":"code","4f7f5ac3":"code","7d486631":"code","2cfbc1a2":"code","51af7a9d":"code","c5e7f027":"code","4fe08ef6":"code","12347d48":"code","f5cc1f61":"code","20216a71":"code","f2ceba6c":"code","854edcaf":"code","04c27f22":"code","00bad727":"code","72e1c5cc":"code","8721428a":"code","07167e17":"code","c54fe44f":"code","fad31896":"code","84012d1e":"code","90f17e83":"code","6ba6b655":"markdown","13435a4d":"markdown","e92c2329":"markdown","e5753689":"markdown","c6200c8b":"markdown","1e38b8e5":"markdown","e8419c3c":"markdown","b517f4e5":"markdown","0c6f2b73":"markdown","a476c3b1":"markdown","f55ec1ee":"markdown","ff787ea4":"markdown","5d96abe2":"markdown","d529f587":"markdown","d58e75c6":"markdown","12af8bff":"markdown","4d4762b2":"markdown","77b3542d":"markdown","8a644e87":"markdown","8bb168b3":"markdown","a176692a":"markdown","104a1965":"markdown","34a3179a":"markdown","f194dfb3":"markdown","e8d7115a":"markdown","dc7ebc48":"markdown","714b02e2":"markdown","7ec73a1f":"markdown","2753e726":"markdown","4d7cd8cb":"markdown","76ce8618":"markdown","8c991ac0":"markdown","d04bc6c1":"markdown","741cb59b":"markdown","057f1700":"markdown","bf1dd08b":"markdown","5107e8bc":"markdown","4e6b6a45":"markdown","5e6b4f59":"markdown","d07851b7":"markdown","08b85a6b":"markdown","36554bea":"markdown","5c1243a1":"markdown","366a4a8b":"markdown","a2dfd79d":"markdown","15a8f6e7":"markdown","a8aed805":"markdown","ff4a172b":"markdown","882467b1":"markdown","6cf3fa6a":"markdown","c69ff012":"markdown","326cbf1b":"markdown","257b45ee":"markdown","8f4bed00":"markdown","00c53c98":"markdown","799769bf":"markdown","291a1ed0":"markdown","6f90c178":"markdown","52ffc18f":"markdown","783312c7":"markdown","366b3ee2":"markdown","aaf5e86b":"markdown","ea04b35c":"markdown","57e2e427":"markdown","f9662506":"markdown"},"source":{"95af83d6":"import numpy as np  # useful for many scientific computing in Python\nimport pandas as pd # primary data structure library\nfrom PIL import Image # converting images into arrays\nfrom matplotlib.colors import LinearSegmentedColormap\n","e4a0df17":"df_can = pd.read_excel('..\/input\/Canada.xlsx',\n                       sheet_name='Canada by Citizenship',\n                       skiprows=range(20),\n                       skipfooter=2)\n\nprint('Data downloaded and read into a dataframe!')","d317b313":"df_can.head()","68b3fa8c":"print(df_can.shape)","cf4b0ffa":"# clean up the dataset to remove unnecessary columns (eg. REG) \ndf_can.drop(['AREA','REG','DEV','Type','Coverage'], axis = 1, inplace = True)\n\n# let's rename the columns so that they make sense\ndf_can.rename (columns = {'OdName':'Country', 'AreaName':'Continent','RegName':'Region'}, inplace = True)\n\n# for sake of consistency, let's also make all column labels of type string\ndf_can.columns = list(map(str, df_can.columns))\n\n# set the country name as index - useful for quickly looking up countries using .loc method\ndf_can.set_index('Country', inplace = True)\n\n# add total column\ndf_can['Total'] =  df_can.sum (axis = 1)\n\n# years that we will be using in this lesson - useful for plotting later on\nyears = list(map(str, range(1980, 2014)))\nprint ('data dimensions:', df_can.shape)","67741e68":"%matplotlib inline\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches # needed for waffle Charts\n\nmpl.style.use('ggplot') # optional: for ggplot-like style\n\n# check for latest version of Matplotlib\nprint ('Matplotlib version: ', mpl.__version__) # >= 2.0.0","6e953c37":"df_dsn=df_can.loc[['Denmark','Norway','Sweden'],:]\ndf_dsn.head()","2db3c2aa":"# compute the proportion of each category with respect to the total\ntotal_values = sum(df_dsn['Total'])\ncategory_proportions = [(float(value) \/ total_values) for value in df_dsn['Total']]\n\n# print out proportions\nfor i, proportion in enumerate(category_proportions):\n    print (df_dsn.index.values[i] + ': ' + str(proportion))","450de6f2":"width = 40 # width of chart\nheight = 10 # height of chart\n\ntotal_num_tiles = width * height # total number of tiles\n\nprint ('Total number of tiles is ', total_num_tiles)","9695d41e":"# compute the number of tiles for each catagory\ntiles_per_category = [round(proportion * total_num_tiles) for proportion in category_proportions]\n# print out number of tiles per category\nfor i, tiles in enumerate(tiles_per_category):\n    print (df_dsn.index.values[i] + ': ' + str(tiles))","fb170ea1":"# initialize the waffle chart as an empty matrix\nwaffle_chart = np.zeros((height, width))\n\n# define indices to loop through waffle chart\ncategory_index = 0\ntile_index = 0\n\n# populate the waffle chart\nfor col in range(width):\n    for row in range(height):\n        tile_index += 1\n\n        # if the number of tiles populated for the current category is equal to its corresponding allocated tiles...\n        if tile_index > sum(tiles_per_category[0:category_index]):\n            # ...proceed to the next category\n            category_index += 1       \n            \n        # set the class value to an integer, which increases with class\n        waffle_chart[row, col] = category_index\n        \nprint ('Waffle chart populated!')","23d0c846":"# instantiate a new figure object\nfig = plt.figure()\n\n# use matshow to display the waffle chart\ncolormap = plt.cm.coolwarm\nplt.matshow(waffle_chart, cmap=colormap)\nplt.colorbar()","8707fb9c":"# instantiate a new figure object\nfig = plt.figure()\n\n# use matshow to display the waffle chart\ncolormap = plt.cm.coolwarm\nplt.matshow(waffle_chart, cmap=colormap)\nplt.colorbar()\n\n# get the axis\nax = plt.gca()\n\n# set minor ticks\nax.set_xticks(np.arange(-.5, (width), 1), minor=True)\nax.set_yticks(np.arange(-.5, (height), 1), minor=True)\n    \n# add gridlines based on minor ticks\nax.grid(which='minor', color='w', linestyle='-', linewidth=2)\n\nplt.xticks([])\nplt.yticks([])","44e2498d":"# instantiate a new figure object\nfig = plt.figure()\n\n# use matshow to display the waffle chart\ncolormap = plt.cm.coolwarm\nplt.matshow(waffle_chart, cmap=colormap)\nplt.colorbar()\n\n# get the axis\nax = plt.gca()\n\n# set minor ticks\nax.set_xticks(np.arange(-.5, (width), 1), minor=True)\nax.set_yticks(np.arange(-.5, (height), 1), minor=True)\n    \n# add gridlines based on minor ticks\nax.grid(which='minor', color='w', linestyle='-', linewidth=2)\n\nplt.xticks([])\nplt.yticks([])\n\n# compute cumulative sum of individual categories to match color schemes between chart and legend\nvalues_cumsum = np.cumsum(df_dsn['Total'])\ntotal_values = values_cumsum[len(values_cumsum) - 1]\n\n# create legend\nlegend_handles = []\nfor i, category in enumerate(df_dsn.index.values):\n    label_str = category + ' (' + str(df_dsn['Total'][i]) + ')'\n    color_val = colormap(float(values_cumsum[i])\/total_values)\n    legend_handles.append(mpatches.Patch(color=color_val, label=label_str))\n\n# add legend to chart\nplt.legend(handles=legend_handles,\n           loc='lower center', \n           ncol=len(df_dsn.index.values),\n           bbox_to_anchor=(0., -0.2, 0.95, .1)\n          )","043700a2":"def create_waffle_chart(df_chart,categories, values, height, width, colormap, value_sign='',):\n    \n    # compute the proportion of each category with respect to the total\n    total_values = sum(values)\n    category_proportions = [(float(value) \/ total_values) for value in values]\n\n    # compute the total number of tiles\n    total_num_tiles = width * height # total number of tiles\n    print ('Total number of tiles is', total_num_tiles)\n    \n    # compute the number of tiles for each catagory\n    tiles_per_category = [round(proportion * total_num_tiles) for proportion in category_proportions]\n\n    # print out number of tiles per category\n    for i, tiles in enumerate(tiles_per_category):\n        print (df_chart.index.values[i] + ': ' + str(tiles))\n    \n    # initialize the waffle chart as an empty matrix\n    waffle_chart = np.zeros((height, width))\n\n    # define indices to loop through waffle chart\n    category_index = 0\n    tile_index = 0\n\n    # populate the waffle chart\n    for col in range(width):\n        for row in range(height):\n            tile_index += 1\n\n            # if the number of tiles populated for the current category \n            # is equal to its corresponding allocated tiles...\n            if tile_index > sum(tiles_per_category[0:category_index]):\n                # ...proceed to the next category\n                category_index += 1       \n            # set the class value to an integer, which increases with class\n            waffle_chart[row, col] = category_index\n    \n    # compute cumulative sum of individual categories to match color schemes between chart and legend\n    values_cumsum = np.cumsum(values)\n    total_values = values_cumsum[len(values_cumsum) - 1]\n\n    # create legend\n    legend_handles = []\n    for i, category in enumerate(categories):\n        if value_sign == '%':\n            label_str = category + ' (' + str(values[i]) + value_sign + ')'\n        else:\n            label_str = category + ' (' + value_sign + str(values[i]) + ')'\n            \n        color_val = colormap(float(values_cumsum[i])\/total_values)\n        if i==0:\n            colors=[color_val]\n        if i!=0:\n            colors.append(color_val)\n        legend_handles.append(mpatches.Patch(color=color_val, label=label_str))\n    \n    cmap_name = 'my_list'\n    cm = LinearSegmentedColormap.from_list(\n        cmap_name, colors,)\n    # instantiate a new figure object\n    fig = plt.figure()\n\n    # use matshow to display the waffle chart\n    plt.matshow(waffle_chart, cmap=cm)\n    plt.colorbar()\n\n    # get the axis\n    ax = plt.gca()\n\n    # set minor ticks\n    ax.set_xticks(np.arange(-.5, (width), 1), minor=True)\n    ax.set_yticks(np.arange(-.5, (height), 1), minor=True)\n    \n    # add dridlines based on minor ticks\n    ax.grid(which='minor', color='w', linestyle='-', linewidth=2)\n\n    plt.xticks([])\n    plt.yticks([])\n\n    \n\n    # add legend to chart\n    plt.legend(\n        handles=legend_handles,\n        loc='lower center', \n        ncol=len(categories),\n        bbox_to_anchor=(0., -0.2, 0.95, .1)\n    )","f237d76b":"width = 40 # width of chart\nheight = 10 # height of chart\n\ncategories = df_dsn.index.values # categories\nvalues = df_dsn['Total'] # correponding values of categories\n\ncolormap = plt.cm.coolwarm # color map class","656fc019":"create_waffle_chart(df_dsn,categories, values, height, width, colormap)","fadd2c9b":"df_tsi=df_can.loc[['Iran (Islamic Republic of)','Syrian Arab Republic','Turkey'],:]\ndf_tsi","bc054bda":"categories1=df_tsi.index.values\nvalues1=df_tsi['Total']\ncreate_waffle_chart(df_tsi,categories1, values1, height, width, colormap)","9a2a26ae":"\n# install wordcloud\n#!conda install -c conda-forge wordcloud==1.4.1 --yes\n\n# import package and its set of stopwords\nfrom wordcloud import WordCloud, STOPWORDS\n\nprint ('Wordcloud is installed and imported!')","c3ad85a1":"# download file and save as alice_novel.txt\n!wget --quiet https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/DV0101EN\/labs\/coursera\/Data_Files\/alice_novel.txt\n\n\n# open the file and read it into a variable alice_novel\nalice_novel = open('..\/input\/alice_novel.txt', 'r').read()\n    \nprint ('File downloaded and saved!')","c19bba26":"stopwords = set(STOPWORDS)","25cf9db9":"# instantiate a word cloud object\nalice_wc = WordCloud(\n    background_color='white',\n    max_words=2000,\n    stopwords=stopwords\n)\n\n# generate the word cloud\nalice_wc.generate(alice_novel)","5345ad79":"# display the word cloud\nplt.imshow(alice_wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()","877562de":"fig = plt.figure()\nfig.set_figwidth(14) # set width\nfig.set_figheight(18) # set height\n\n# display the cloud\nplt.imshow(alice_wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()","309e2a07":"stopwords.add('said') # add the words said to stopwords\n\n# re-generate the word cloud\nalice_wc.generate(alice_novel)\n\n# display the cloud\nfig = plt.figure()\nfig.set_figwidth(14) # set width\nfig.set_figheight(18) # set height\n\nplt.imshow(alice_wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()","e8420a0a":"\n    \n# save mask to alice_mask\nalice_mask = np.array(Image.open('..\/input\/alice_mask.png'))\n    \nprint('Image downloaded and saved!')","6504343d":"fig = plt.figure()\nfig.set_figwidth(14) # set width\nfig.set_figheight(18) # set height\n\nplt.imshow(alice_mask, cmap=plt.cm.gray, interpolation='bilinear')\nplt.axis('off')\nplt.show()","41208b01":"# instantiate a word cloud object\nalice_wc = WordCloud(background_color='white', max_words=2000, mask=alice_mask, stopwords=stopwords)\n\n# generate the word cloud\nalice_wc.generate(alice_novel)\n\n# display the word cloud\nfig = plt.figure()\nfig.set_figwidth(14) # set width\nfig.set_figheight(18) # set height\n\nplt.imshow(alice_wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()","a4c9bf63":"df_can.head()","4f7f5ac3":"total_immigration=df_can['Total'].sum()\ntotal_immigration","7d486631":"max_words = 90\nword_string = ''\nfor country in df_can.index.values:\n    # check if country's name is a single-word name\n    if len(country.split(' ')) == 1:\n        repeat_num_times = int(df_can.loc[country, 'Total']\/float(total_immigration)*max_words)\n        word_string = word_string + ((country + ' ') * repeat_num_times)\n                                     \n# display the generated text\nword_string","2cfbc1a2":"# create the word cloud\nwordcloud = WordCloud(background_color='white').generate(word_string)\n\nprint('Word cloud created!')","51af7a9d":"# display the cloud\nfig = plt.figure()\nfig.set_figwidth(14)\nfig.set_figheight(18)\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis('off')\nplt.show()","c5e7f027":"canada_mask = np.array(Image.open('..\/input\/russia.png'))","4fe08ef6":"fig = plt.figure()\nfig.set_figwidth(14) # set width\nfig.set_figheight(18) # set height\n\nplt.imshow(canada_mask, cmap=plt.cm.gray, interpolation='bilinear')\nplt.axis('off')\nplt.show()","12347d48":"# instantiate a word cloud object\ncanada_wc = WordCloud(background_color='white', mask=canada_mask, stopwords=stopwords)\n\n# generate the word cloud\ncanada_wc.generate(alice_novel)\n\n# display the word cloud\nfig = plt.figure()\nfig.set_figwidth(14) # set width\nfig.set_figheight(18) # set height\n\nplt.imshow(canada_wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()","f5cc1f61":"\n\n# import library\nimport seaborn as sns\n\nprint('Seaborn installed and imported!')","20216a71":"# we can use the sum() method to get the total population per year\ndf_tot = pd.DataFrame(df_can[years].sum(axis=0))\n\n# change the years to type float (useful for regression later on)\ndf_tot.index = map(float, df_tot.index)\n\n# reset the index to put in back in as a column in the df_tot dataframe\ndf_tot.reset_index(inplace=True)\n\n# rename columns\ndf_tot.columns = ['year', 'total']\n\n# view the final dataframe\ndf_tot.head()","f2ceba6c":"ax = sns.regplot(x='year', y='total', data=df_tot)","854edcaf":"ax = sns.regplot(x='year', y='total', data=df_tot, color='green')","04c27f22":"ax = sns.regplot(x='year', y='total', data=df_tot, color='green',marker='+')","00bad727":"plt.figure(figsize=(15,10))\nax = sns.regplot(x='year', y='total', data=df_tot, color='green',marker='+')","72e1c5cc":"plt.figure(figsize=(15, 10))\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+', scatter_kws={'s': 300})\n\nax.set(xlabel='Year', ylabel='Total Immigration') # add x- and y-labels\nax.set_title('Total Immigration to Canada from 1980 - 2013') # add title","8721428a":"plt.figure(figsize=(15, 10))\n\nsns.set(font_scale=1.5)\n\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+', scatter_kws={'s': 200})\nax.set(xlabel='Year', ylabel='Total Immigration')\nax.set_title('Total Immigration to Canada from 1980 - 2013')","07167e17":"plt.figure(figsize=(15, 10))\n\nsns.set(font_scale=1.5)\nsns.set_style('ticks') # change background to white background\n\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+', scatter_kws={'s': 200})\nax.set(xlabel='Year', ylabel='Total Immigration')\nax.set_title('Total Immigration to Canada from 1980 - 2013')","c54fe44f":"plt.figure(figsize=(15, 10))\n\nsns.set(font_scale=1.5)\nsns.set_style('whitegrid')\n\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+', scatter_kws={'s': 200})\nax.set(xlabel='Year', ylabel='Total Immigration')\nax.set_title('Total Immigration to Canada from 1980 - 2013')","fad31896":"#my answer\ndf_dsn = pd.DataFrame(df_can.loc[['Denmark','Norway','Sweden'],years].sum(axis=0))\n# change the years to type float (useful for regression later on)\ndf_dsn.index = map(float, df_tot.index)\n\n# reset the index to put in back in as a column in the df_tot dataframe\ndf_dsn.reset_index(inplace=True)\n\n# rename columns\ndf_dsn.columns = ['year', 'total']\n\n# view the final dataframe\ndf_dsn.head()","84012d1e":"ax = sns.regplot(x='year', y='total', data=df_dsn, color='green', marker='+', scatter_kws={'s': 200})\nax.set(xlabel='Year', ylabel='Total Immigration')\nax.set_title('Total Immigrationn from Denmark, Sweden, and Norway to Canada from 1980 - 2013')","90f17e83":"#ibms answer\n\n\n# create df_countries dataframe\ndf_countries = df_can.loc[['Denmark', 'Norway', 'Sweden'], years].transpose()\n\n\n # create df_total by summing across three countries for each year\ndf_total = pd.DataFrame(df_countries.sum(axis=1))\n\n\n# reset index in place\ndf_total.reset_index(inplace=True)\n\n\n# rename columns\ndf_total.columns = ['year', 'total']\n\n # change column year from string to int to create scatter plot\ndf_total['year'] = df_total['year'].astype(int)\n\n # define figure size\nplt.figure(figsize=(15, 10))\n\n\n # define background style and font size\nsns.set(font_scale=1.5)\nsns.set_style('whitegrid')\n\n\n # generate plot and add title and axes labels\nax = sns.regplot(x='year', y='total', data=df_total, color='green', marker='+', scatter_kws={'s': 200})\nax.set(xlabel='Year', ylabel='Total Immigration')\nax.set_title('Total Immigrationn from Denmark, Sweden, and Norway to Canada from 1980 - 2013')\n","6ba6b655":"**Step 7.** Create a legend and add it to chart.","13435a4d":"Based on the calculated proportions, Denmark will occupy 129 tiles of the `waffle` chart, Norway will occupy 77 tiles, and Sweden will occupy 194 tiles.","e92c2329":"**Step 5.** Map the `waffle` chart matrix into a visual.","e5753689":"If you are not a big fan of the purple background, you can easily change the style to a white plain background.","c6200c8b":"Interesting! So in the first 2000 words in the novel, the most common words are **Alice**, **said**, **little**, **Queen**, and so on. Let's resize the cloud so that we can see the less frequent words a little better.","1e38b8e5":"Create a word cloud object and generate a word cloud. For simplicity, let's generate a word cloud using only the first 2000 words in the novel.","e8419c3c":"You can always customize the marker shape, so instead of circular markers, let's use '+'.","b517f4e5":"**Step 6.** Prettify the chart.","0c6f2b73":"And there you go! What a good looking *delicious* `waffle` chart, don't you think?","a476c3b1":"And what was the total immigration from 1980 to 2013?","f55ec1ee":"# Visualizing Data using Matplotlib<a id=\"4\"><\/a>","ff787ea4":"**Step 3.** The third step is using the proportion of each category to determe it respective number of tiles","5d96abe2":"Amazing! A complete scatter plot with a regression fit with 5 lines of code only. Isn't this really amazing?","d529f587":"Let's take a look at how the mask looks like.","d58e75c6":"Unfortunately, unlike R, `waffle` charts are not built into any of the Python visualization libraries. Therefore, we will learn how to create them from scratch.","12af8bff":"**Step 4.** The fourth step is creating a matrix that resembles the `waffle` chart and populating it.","4d4762b2":"According to the above word cloud, it looks like the majority of the people who immigrated came from one of 15 countries that are displayed by the word cloud. One cool visual that you could build, is perhaps using the map of Canada and a mask and superimposing the word cloud on top of the map of Canada. That would be an interesting visual to build!","77b3542d":"Let's recall how our data looks like.","8a644e87":"As expected, the matrix consists of three categories and the total number of each category's instances matches the total number of tiles allocated to each category.","8bb168b3":"Much better! However, **said** isn't really an informative word. So let's add it to our stopwords and re-generate the cloud.","a176692a":"In lab *Pie Charts, Box Plots, Scatter Plots, and Bubble Plots*, we learned how to create a scatter plot and then fit a regression line. It took ~20 lines of code to create the scatter plot along with the regression fit. In this final section, we will explore *seaborn* and see how efficient it is to create regression lines and fits using this library!","104a1965":"I want to create one more waffle chart. I'll crate a dataset with turkey,syria and iran","34a3179a":"Really impressive!","f194dfb3":"Clean up data. We will make some modifications to the original dataset to make it easier to create our visualizations. Refer to *Introduction to Matplotlib and Line Plots* and *Area Plots, Histograms, and Bar Plots* for a detailed description of this preprocessing.","e8d7115a":"And now let's call our function to create a `waffle` chart.","dc7ebc48":"# Regression Plots <a id=\"10\"><\/a>\n\n\n> Seaborn is a Python visualization library based on matplotlib. It provides a high-level interface for drawing attractive statistical graphics. You can learn more about *seaborn* by following this [link](https:\/\/seaborn.pydata.org\/) and more about *seaborn* regression plots by following this [link](http:\/\/seaborn.pydata.org\/generated\/seaborn.regplot.html).","714b02e2":"<hr>\n\nCopyright &copy; 2019 [Cognitive Class](https:\/\/cognitiveclass.ai\/?utm_source=bducopyrightlink&utm_medium=dswb&utm_campaign=bdu). This notebook and its source code are released under the terms of the [MIT License](https:\/\/bigdatauniversity.com\/mit-license\/).","7ec73a1f":"Unfortunately, our immmigration data does not have any text data, but where there is a will there is a way. Let's generate sample text data from our immigration dataset, say text data of 90 words.","2753e726":"Let's blow up the plot a little bit so that it is more appealing to the sight.","4d7cd8cb":"This is not magic; it is *seaborn*! You can also customize the color of the scatter plot and regression line. Let's change the color to green.","76ce8618":"Let's revisit the previous case study about Denmark, Norway, and Sweden.","8c991ac0":"We are not dealing with any stopwords here, so there is no need to pass them when creating the word cloud.","d04bc6c1":"Import Primary Modules:","741cb59b":"And finally increase the font size of the tickmark labels, the title, and the x- and y-labels so they don't feel left out!","057f1700":"There is a mistake between the color in the legend and the chart. I've been trying to fix it. But I couldn't. I would be thankful if anyone helps me out with this mistake.","bf1dd08b":"There seems to be a new Python package for generating `waffle charts` called [PyWaffle](https:\/\/github.com\/ligyxy\/PyWaffle), but it looks like the repository is still being built. But feel free to check it out and play with it.","5107e8bc":"# Downloading and Prepping Data <a id=\"2\"><\/a>","4e6b6a45":"Now it would very inefficient to repeat these seven steps every time we wish to create a `waffle` chart. So let's combine all seven steps into one function called *create_waffle_chart*. This function would take the following parameters as input:\n\n> 1. **categories**: Unique categories or classes in dataframe.\n> 2. **values**: Values corresponding to categories or classes.\n> 3. **height**: Defined height of waffle chart.\n> 4. **width**: Defined width of waffle chart.\n> 5. **colormap**: Colormap class\n> 6. **value_sign**: In order to make our function more generalizable, we will add this parameter to address signs that could be associated with a value such as %, $, and so on. **value_sign** has a default value of empty string.","5e6b4f59":"# Word Clouds <a id=\"8\"><\/a>\n\n\n`Word` clouds (also known as text clouds or tag clouds) work in a simple way: the more a specific word appears in a source of textual data (such as a speech, blog post, or database), the bigger and bolder it appears in the word cloud.","d07851b7":"**Question**: Use seaborn to create a scatter plot with a regression line to visualize the total immigration from Denmark, Sweden, and Norway to Canada from 1980 to 2013.","08b85a6b":"With *seaborn*, generating a regression plot is as simple as calling the **regplot** function.","36554bea":"**Step 1.** The first step into creating a waffle chart is determing the proportion of each category with respect to the total.","5c1243a1":"`Word` clouds are commonly used to perform high-level analysis and visualization of text data. Accordinly, let's digress from the immigration dataset and work with an example that involves analyzing text data. Let's try to analyze a short novel written by **Lewis Carroll** titled *Alice's Adventures in Wonderland*. Let's go ahead and download a _.txt_ file of the novel.","366a4a8b":"Excellent! This looks really interesting! Another cool thing you can implement with the `word_cloud` package is superimposing the words onto a mask of any shape. Let's use a mask of Alice and her rabbit. We already created the mask for you, so let's go ahead and download it and call it *alice_mask.png*.","a2dfd79d":"Next, let's use the stopwords that we imported from `word_cloud`. We use the function *set* to remove any redundant stopwords.","15a8f6e7":"# Waffle Charts <a id=\"6\"><\/a>\n\n\nA `waffle chart` is an interesting visualization that is normally created to display progress toward goals. It is commonly an effective option when you are trying to add interesting visualization features to a visual that consists mainly of cells, such as an Excel dashboard.","a8aed805":"First, let's install the package.","ff4a172b":"Shaping the `word` cloud according to the mask is straightforward using `word_cloud` package. For simplicity, we will continue using the first 2000 words in the novel.","882467b1":"Let's download and import our primary Canadian Immigration dataset using *pandas* `read_excel()` method. Normally, before we can do that, we would need to download a module which *pandas* requires to read in excel files. This module is **xlrd**. For your convenience, we have pre-installed this module, so you would not have to worry about that. Otherwise, you would need to run the following line of code to install the **xlrd** module:\n```\n!conda install -c anaconda xlrd --yes\n```","6cf3fa6a":"Create a new dataframe that stores that total number of landed immigrants to Canada per year from 1980 to 2013.","c69ff012":"## Table of Contents\n\n<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n\n1. [Exploring Datasets with *p*andas](#0)<br>\n2. [Downloading and Prepping Data](#2)<br>\n3. [Visualizing Data using Matplotlib](#4) <br>\n4. [Waffle Charts](#6) <br>\n5. [Word Clouds](#8) <br>\n7. [Regression Plots](#10) <br> \n<\/div>\n<hr>","326cbf1b":"# Exploring Datasets with *pandas* and Matplotlib<a id=\"0\"><\/a>\n\nToolkits: The course heavily relies on [*pandas*](http:\/\/pandas.pydata.org\/) and [**Numpy**](http:\/\/www.numpy.org\/) for data wrangling, analysis, and visualization. The primary plotting library we will explore in the course is [Matplotlib](http:\/\/matplotlib.org\/).\n\nDataset: Immigration to Canada from 1980 to 2013 - [International migration flows to and from selected countries - The 2015 revision](http:\/\/www.un.org\/en\/development\/desa\/population\/migration\/data\/empirical2\/migrationflows.shtml) from United Nation's website\n\nThe dataset contains annual data on the flows of international migrants as recorded by the countries of destination. The data presents both inflows and outflows according to the place of birth, citizenship or place of previous \/ next residence both for foreigners and nationals. In this lab, we will focus on the Canadian Immigration data.","257b45ee":"Awesome! Now that the `word` cloud is created, let's visualize it.","8f4bed00":"This notebook is part of the free course on **Cognitive Class** called *Data Visualization with Python*. If you accessed this notebook outside the course, you can take this free self-paced course online by clicking [here](https:\/\/cocl.us\/DV0101EN_Lab4).","00c53c98":"And let's increase the size of markers so they match the new size of the figure, and add a title and x- and y-labels.","799769bf":"Let's take a look at the first five items in our dataset","291a1ed0":"Let's find out how many entries there are in our dataset","6f90c178":"Or to a white background with gridlines.","52ffc18f":"### Thank you for completing this lab!\n\nThis notebook was created by [Alex Aklson](https:\/\/www.linkedin.com\/in\/aklson\/). I hope you found this lab interesting and educational. Feel free to contact me if you have any questions!","783312c7":"Import `matplotlib`:","366b3ee2":"**Step 2.** The second step is defining the overall size of the `waffle` chart.","aaf5e86b":"Let's first install *seaborn*","ea04b35c":"Now to create a `waffle` chart, all we have to do is call the function `create_waffle_chart`. Let's define the input parameters:","57e2e427":"Luckily, a Python package already exists in Python for generating `word` clouds. The package, called `word_cloud` was developed by **Andreas Mueller**. You can learn more about the package by following this [link](https:\/\/github.com\/amueller\/word_cloud\/).\n\nLet's use this package to learn how to generate a word cloud for a given text document.","f9662506":"Download the dataset and read it into a *pandas* dataframe:"}}