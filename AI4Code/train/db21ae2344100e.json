{"cell_type":{"48222789":"code","ee41cf2c":"code","add02e81":"code","863546a4":"code","0c7d924f":"code","cad4e6a0":"code","4f37ad4d":"code","0015fa87":"code","fa75fdc3":"code","e4ed5151":"code","01e523bf":"code","6bc25685":"code","aa145b46":"code","c78f6ab7":"code","07f60ab9":"code","c415f80d":"code","6cb7b84e":"code","92e8770f":"code","1d122036":"code","659f0970":"code","d18e5606":"code","29b6c301":"code","8106d0ab":"code","3b7181df":"code","5f4d0d19":"code","709318ad":"code","5c7e3a96":"code","963e55d0":"code","da335a41":"code","5683ef3f":"code","439114d0":"code","08e6df75":"code","10b65d58":"code","19e29691":"code","1eb5984a":"code","b0783ae5":"code","b7b48d08":"code","3043b761":"code","77cf73d4":"code","9796aa16":"code","f0787adf":"code","8e348b6b":"code","0a31e4cf":"code","e333a4f3":"code","acfc2b6a":"code","2eeb221b":"code","c9703636":"code","02d5bdc2":"code","d3c6c7e3":"code","14742c31":"markdown","69d59314":"markdown"},"source":{"48222789":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n#import libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ee41cf2c":"pd.set_option('display.max_columns', 300)\nnp.random.seed(566)\npd.set_option('display.max_rows', 200)\npd.set_option('display.width', 1000)","add02e81":"TARGET_COL = \"diabetes_mellitus\"\ndf = pd.read_csv(\"\/kaggle\/input\/widsdatathon2021\/TrainingWiDS2021.csv\")\nprint(df.shape)\ntest = pd.read_csv(\"\/kaggle\/input\/widsdatathon2021\/UnlabeledWiDS2021.csv\")\nprint(test.shape)","863546a4":"df.shape","0c7d924f":"df.info()","cad4e6a0":"df.dtypes","4f37ad4d":"df.describe().T","0015fa87":"#Five point summary w.r.t to diabetes_mellitus\n#df.describe()['diabetes_mellitus'].T","fa75fdc3":"df.dtypes.value_counts()","e4ed5151":"sns.displot(data = df, kind = 'hist', x = 'age', hue = 'diabetes_mellitus', multiple = 'stack',bins=25,height = 4, aspect = 1.7)","01e523bf":"sns.displot(data = df, kind = 'hist', x = 'd1_glucose_max', hue = 'diabetes_mellitus', multiple = 'stack',bins=25,height = 4, aspect = 1.7)\n\n# The higher the glucose_max the higher precented of patients with diabetes (especially >250 range)","6bc25685":"#Removing Duplicates\ndf=df.drop_duplicates()","aa145b46":"pd.DataFrame(df.isnull().sum(), columns = [\"Number of Missing Columns\"])","c78f6ab7":"df.isnull().sum().sum()  # Total number of recognised missing values in the entire dataframe","07f60ab9":"## Print the categorical columns\nprint([c for c in df.columns if (1<df[c].nunique()) & (df[c].dtype != np.number)& (df[c].dtype != int) ])","c415f80d":"categorical_cols =  [#'hospital_id',\n 'ethnicity', 'gender', 'hospital_admit_source', 'icu_admit_source', 'icu_stay_type', 'icu_type']","6cb7b84e":"## Handle na values\ndf[categorical_cols] = df[categorical_cols].fillna(\"\")\ntest[categorical_cols] = test[categorical_cols].fillna(\"\")\n\ndf[categorical_cols].isna().sum()","92e8770f":"# Splitting dataframe\nwith_diabetes = df[df['diabetes_mellitus'] == 1]\nwithout_diabetes = df[df['diabetes_mellitus'] == 0]\n\n# Making a list of col names:\n#cols = df.columns.tolist()\n\n#fig = plt.figure(figsize=(14,14))\n#for position, col in enumerate(cols):\n #   ax = fig.add_subplot(3,3,position+1)\n  #  ax.hist(with_diabetes[col], histtype ='step', label='With Diabetes', bins = 20)\n   # ax.hist(without_diabetes[col], histtype ='step', label = 'No Diabetes', bins=20)\n    #ax.legend(loc=0)\n    #plt.title(col)\n\n# plt.show()","1d122036":"DROP_COLS = ['Unnamed: 0',\"hospital_id\",\"encounter_id\"]\ndf.drop(DROP_COLS,axis=1,inplace=True,errors=\"ignore\")\n\ntest_id = test[\"encounter_id\"]\ntest.drop(DROP_COLS,axis=1,inplace=True,errors=\"ignore\")","659f0970":"(df.shape[0])","d18e5606":"Missing_values=pd.DataFrame(df.isnull().sum()\/(df.shape[0]))\nMissing_values","29b6c301":"Missing_values.columns=['Missing ratio']\nMissing_values.sort_values(by='Missing ratio',ascending=False)","8106d0ab":"col_features=Missing_values[Missing_values['Missing ratio']>0.6].index","3b7181df":"df=df.drop(labels=col_features,axis=1)","5f4d0d19":"# Age\ndef replace_age_Nan(row):\n    if (pd.isnull(row['age']) or row['age']==0):\n         return 1\n    else:\n        return row['age']\n    \ndf['age'] = df.apply(replace_age_Nan, axis=1)","709318ad":"#weight\ndef replace_weight_Nan(row):\n    if pd.isnull(row['weight']) or row['weight']==0:\n         return 1\n    else:\n        return row['weight']\n    \ndf['weight'] = df.apply(replace_weight_Nan, axis=1)","5c7e3a96":"#height\ndef replace_height_Nan(row):\n    if pd.isnull(row['height']) or row['height']==0:\n         return 1\n    else:\n        return row['height']\n    \ndf['height'] = df.apply(replace_height_Nan, axis=1)","963e55d0":"#Gender\ndef replace_gender_Nan(row):\n    if pd.isnull(row['gender']):\n         return 'Other\/Unknown'\n    else:\n        return row['gender']\n    \ndf['gender'] = df.apply(replace_gender_Nan, axis=1)","da335a41":"#ethnicity\ndef replace_ethnicity_Nan(row):\n    if pd.isnull(row['ethnicity']):\n         return 'Other\/Unknown'\n    else:\n        return row['ethnicity']\n    \ndf['ethnicity'] = df.apply(replace_ethnicity_Nan, axis=1)","5683ef3f":"df['h1_glucose_max'].mean()","439114d0":"# Fill NaN\ndf['h1_glucose_max'].fillna(value = df['h1_glucose_max'].mean(), inplace=True)\ndf['h1_glucose_min'].fillna(value = df['h1_glucose_min'].mean(), inplace=True)\ndf['bmi'].fillna(value = df['bmi'].mean(), inplace=True)","08e6df75":"cat_list = df.select_dtypes('object').columns\ndisplay(cat_list)","10b65d58":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\nfor ob in cat_list:\n    df[ob] = le.fit_transform(df[ob].astype(str))\n    df[ob] = le.fit_transform(df[ob].astype(str))\nprint(df.info())","19e29691":"! pip install catboost","1eb5984a":"from catboost import CatBoostClassifier,Pool","b0783ae5":"TARGET_COL = \"diabetes_mellitus\"\n## Train Test split and remove Target values\nX_train = df.drop([TARGET_COL],axis=1)\ny_train = df[TARGET_COL]","b7b48d08":"## catBoost Pool object\n## Catboost and lgbm have Pool\/Dataset objects, that can be used \"internally\" by them for some functions, e.g. to efficienctly CV\n## drop any additional features we filtered out with adv. selection\nX_train = X_train.drop([\"icu_id\",'Unnamed: 0'],axis=1,errors=\"ignore\")\ntest = test.drop([\"icu_id\",'Unnamed: 0'],axis=1,errors=\"ignore\")\n\ntrain_pool = Pool(data=X_train,label = y_train,cat_features=categorical_cols)","3043b761":"model_basic = CatBoostClassifier(verbose=False,iterations=50)#,learning_rate=0.1, task_type=\"GPU\",)\nmodel_basic.fit(train_pool, plot=True,silent=True)\nprint(model_basic.get_best_score())","77cf73d4":"### hyperparameter tuning example grid for catboost : \n# ML Metrics\nfrom sklearn.metrics import make_scorer, accuracy_score\n# ML Model selection\nfrom sklearn.model_selection import train_test_split, GridSearchCV\n# CatBoost model\nfrom catboost import CatBoostClassifier, Pool\n\nparams = {'learning_rate': [0.05, 0.1],\n        'depth': [8, 10],\n         'l2_leaf_reg': [1, 3,9],\n        \"iterations\": [3,5],\n       \"custom_metric\":['Logloss', 'AUC']}\n\nmodel = CatBoostClassifier()\nscorer = make_scorer(accuracy_score)\n## can also do randomized search - more efficient typically, especially for large search space - `randomized_search`\ngrid_search_result = GridSearchCV(estimator=model, param_grid=params, scoring=scorer, cv=2) \n\ngrid_search_result.fit(X_train, y_train)","9796aa16":"best_param = grid_search_result.best_params_\nbest_param","f0787adf":"print(\" Results from Grid Search \" )\nprint(\"\\n The best estimator across ALL searched params:\\n\", grid_search_result.best_estimator_)\nprint(\"\\n The best score across ALL searched params:\\n\", grid_search_result.best_score_)\nprint(\"\\n The best parameters across ALL searched params:\\n\", grid_search_result.best_params_)","8e348b6b":"# Using best params\nmodel_final = CatBoostClassifier(depth = 8 , verbose=False,iterations=30,learning_rate=0.05,l2_leaf_reg =  3, custom_metric = 'AUC',task_type=\"GPU\",)\nmodel_final.fit(train_pool, plot=True,silent=True)","0a31e4cf":"#print([c for c in test.columns if (1<test[c].nunique()) & (test[c].dtype == np.float)])\n       \n       #& (test[c].dtype == np.object) ])","e333a4f3":"##categorical_features_indices[0].value\n# test.astype(str).apply(', '.join, axis=1)\n\n#categorical_cols =  ['ethnicity', 'gender', 'hospital_admit_source', 'icu_admit_source', 'icu_stay_type', 'icu_type']\n#train_pool = Pool(data=X_train,label = y_train,cat_features=categorical_cols)\n## Print the categorical columns\n#features_to_cast = ['bmi', 'height', 'pre_icu_los_days', 'weight', 'albumin_apache', 'apache_2_diagnosis', \n                  #  'apache_3j_diagnosis', 'bilirubin_apache', 'bun_apache', 'creatinine_apache', 'fio2_apache', 'gcs_eyes_apache', \n                   # 'gcs_motor_apache', 'gcs_unable_apache', 'gcs_verbal_apache', 'glucose_apache', 'heart_rate_apache', 'hematocrit_apache', \n                    #'map_apache', 'paco2_apache', 'paco2_for_ph_apache', 'pao2_apache', 'ph_apache', 'resprate_apache', 'sodium_apache'\n                    #, 'temp_apache', 'urineoutput_apache', 'wbc_apache', 'd1_diasbp_invasive_max', 'd1_diasbp_invasive_min', 'd1_diasbp_max'\n                    #, 'd1_diasbp_min', 'd1_diasbp_noninvasive_max', 'd1_diasbp_noninvasive_min', 'd1_heartrate_max', 'd1_heartrate_min'\n                    #, 'd1_mbp_invasive_max', 'd1_mbp_invasive_min', 'd1_mbp_max', 'd1_mbp_min', 'd1_mbp_noninvasive_max'\n                    #, 'd1_mbp_noninvasive_min', 'd1_resprate_max', 'd1_resprate_min', 'd1_spo2_max', 'd1_spo2_min', 'd1_sysbp_invasive_max'\n                    #, 'd1_sysbp_invasive_min', 'd1_sysbp_max', 'd1_sysbp_min', 'd1_sysbp_noninvasive_max', 'd1_sysbp_noninvasive_min'\n                    #, 'd1_temp_max', 'd1_temp_min', 'h1_diasbp_invasive_max', 'h1_diasbp_invasive_min', 'h1_diasbp_max', 'h1_diasbp_min', 'h1_diasbp_noninvasive_max', 'h1_diasbp_noninvasive_min', 'h1_heartrate_max', 'h1_heartrate_min', 'h1_mbp_invasive_max', 'h1_mbp_invasive_min', 'h1_mbp_max', 'h1_mbp_min', 'h1_mbp_noninvasive_max', 'h1_mbp_noninvasive_min', 'h1_resprate_max', 'h1_resprate_min', 'h1_spo2_max', 'h1_spo2_min', 'h1_sysbp_invasive_max', 'h1_sysbp_invasive_min', 'h1_sysbp_max', 'h1_sysbp_min', 'h1_sysbp_noninvasive_max', 'h1_sysbp_noninvasive_min', 'h1_temp_max', 'h1_temp_min', 'd1_albumin_max', 'd1_albumin_min', 'd1_bilirubin_max', 'd1_bilirubin_min', 'd1_bun_max', 'd1_bun_min', 'd1_calcium_max', 'd1_calcium_min', 'd1_creatinine_max', 'd1_creatinine_min', 'd1_glucose_max', 'd1_glucose_min', 'd1_hco3_max', 'd1_hco3_min', 'd1_hemaglobin_max', 'd1_hemaglobin_min', 'd1_hematocrit_max', 'd1_hematocrit_min', 'd1_inr_max', 'd1_inr_min', 'd1_lactate_max', 'd1_lactate_min', 'd1_platelets_max', 'd1_platelets_min', 'd1_potassium_max', 'd1_potassium_min', 'd1_sodium_max', 'd1_sodium_min', 'd1_wbc_max', 'd1_wbc_min', 'h1_albumin_max', 'h1_albumin_min', 'h1_bilirubin_max', 'h1_bilirubin_min', 'h1_bun_max', 'h1_bun_min', 'h1_calcium_max', 'h1_calcium_min', 'h1_creatinine_max', 'h1_creatinine_min', 'h1_glucose_max', 'h1_glucose_min', 'h1_hco3_max', 'h1_hco3_min', 'h1_hemaglobin_max', 'h1_hemaglobin_min', 'h1_hematocrit_max', 'h1_hematocrit_min', 'h1_inr_max', 'h1_inr_min', 'h1_lactate_max', 'h1_lactate_min', 'h1_platelets_max', 'h1_platelets_min', 'h1_potassium_max', 'h1_potassium_min', 'h1_sodium_max', 'h1_sodium_min', 'h1_wbc_max', 'h1_wbc_min', 'd1_arterial_pco2_max', 'd1_arterial_pco2_min', 'd1_arterial_ph_max', 'd1_arterial_ph_min', 'd1_arterial_po2_max', 'd1_arterial_po2_min', 'd1_pao2fio2ratio_max', 'd1_pao2fio2ratio_min', 'h1_arterial_pco2_max', 'h1_arterial_pco2_min', 'h1_arterial_ph_max'\n                    #, 'h1_arterial_ph_min', 'h1_arterial_po2_max', 'h1_arterial_po2_min', 'h1_pao2fio2ratio_max', 'h1_pao2fio2ratio_min']\n\n#test[features_to_cast] = test[features_to_cast].fillna(0)\n#for col in features_to_cast:\n #   test[col]=test[col].astype('int64')","acfc2b6a":"test[TARGET_COL] = model_final.predict(test,prediction_type='Probability')[:,1]","2eeb221b":"#AUC_FINAL=metrics.roc_auc_score(Y.values, model.predict(df_train))\n#AUC_FINAL\ntest[\"encounter_id\"] = test_id # restore test encounter ID. We could also make the catboost model ignore that feature","c9703636":"test[\"diabetes_mellitus\"]","02d5bdc2":"print(os.listdir(\"..\/input\"))","d3c6c7e3":"test[[\"encounter_id\",\"diabetes_mellitus\"]].to_csv(\"submission.csv\",index=False)","14742c31":"# Submission File","69d59314":"# Visualizing distribution of Data based on Diabetes outcome"}}