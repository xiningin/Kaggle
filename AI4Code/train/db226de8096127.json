{"cell_type":{"c5341196":"code","5562b969":"code","2a51c13c":"code","a2f0fe80":"code","5b7988b2":"code","0bdfb56d":"code","d399fb47":"code","8f4e86ae":"code","fdd58e6a":"code","6d059b54":"code","fdbe6092":"code","0fbbcc7e":"code","9de6bda8":"code","d4343653":"markdown","3cd60897":"markdown","e5c1dda6":"markdown","d1858760":"markdown","d6d1aa48":"markdown","a1b02a96":"markdown","5c0d4f92":"markdown"},"source":{"c5341196":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy\nimport sklearn\n\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.neighbors import LocalOutlierFactor","5562b969":"data = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')","2a51c13c":"data.head()","a2f0fe80":"print(data.columns)","5b7988b2":"data.shape","0bdfb56d":"data.info()","d399fb47":"data.describe()","8f4e86ae":"fig = plt.figure(figsize = (15, 12))\n\nplt.subplot(5, 6, 1) ; plt.plot(data.V1) ; plt.subplot(5, 6, 15) ; plt.plot(data.V15)\nplt.subplot(5, 6, 2) ; plt.plot(data.V2) ; plt.subplot(5, 6, 16) ; plt.plot(data.V16)\nplt.subplot(5, 6, 3) ; plt.plot(data.V3) ; plt.subplot(5, 6, 17) ; plt.plot(data.V17)\nplt.subplot(5, 6, 4) ; plt.plot(data.V4) ; plt.subplot(5, 6, 18) ; plt.plot(data.V18)\nplt.subplot(5, 6, 5) ; plt.plot(data.V5) ; plt.subplot(5, 6, 19) ; plt.plot(data.V19)\nplt.subplot(5, 6, 6) ; plt.plot(data.V6) ; plt.subplot(5, 6, 20) ; plt.plot(data.V20)\nplt.subplot(5, 6, 7) ; plt.plot(data.V7) ; plt.subplot(5, 6, 21) ; plt.plot(data.V21)\nplt.subplot(5, 6, 8) ; plt.plot(data.V8) ; plt.subplot(5, 6, 22) ; plt.plot(data.V22)\nplt.subplot(5, 6, 9) ; plt.plot(data.V9) ; plt.subplot(5, 6, 23) ; plt.plot(data.V23)\nplt.subplot(5, 6, 10) ; plt.plot(data.V10) ; plt.subplot(5, 6, 24) ; plt.plot(data.V24)\nplt.subplot(5, 6, 11) ; plt.plot(data.V11) ; plt.subplot(5, 6, 25) ; plt.plot(data.V25)\nplt.subplot(5, 6, 12) ; plt.plot(data.V12) ; plt.subplot(5, 6, 26) ; plt.plot(data.V26)\nplt.subplot(5, 6, 13) ; plt.plot(data.V13) ; plt.subplot(5, 6, 27) ; plt.plot(data.V27)\nplt.subplot(5, 6, 14) ; plt.plot(data.V14) ; plt.subplot(5, 6, 28) ; plt.plot(data.V28)\nplt.subplot(5, 6, 29) ; plt.plot(data.Amount)\nplt.show()","fdd58e6a":"fraud = data[data['Class'] == 1]\nvalid = data[data['Class'] == 0]\n\noutlier_fraction = len(fraud) \/ float(len(valid))\nprint(outlier_fraction)\n\nprint('Fraud Cases: {}'.format(len(fraud)))\nprint('Valid Cases: {}'.format(len(valid)))","6d059b54":"corrmat = data.corr()\nfig = plt.figure(figsize = (12, 9))\n\nsns.heatmap(corrmat, vmax = .8, square = True)\nplt.show()","fdbe6092":"columns = data.columns.tolist()\n\ncolumns = [c for c in columns if c not in ['Class']]\n\ntarget = 'Class'\n\nX = data[columns]\nY = data[target]\n\nprint(X.shape)\nprint(Y.shape)","0fbbcc7e":"state = 1\n\n# define the outlier detection methods\nclassifiers = {\n    # contamination is the number of outliers we think there are\n    'Isolation Forest': IsolationForest(max_samples = len(X),\n                                       contamination = outlier_fraction,\n                                       random_state = state),\n    # number of neighbors to consider, the higher the percentage of outliers the higher you want to make this number\n    'Local Outlier Factor': LocalOutlierFactor(\n    n_neighbors = 20,\n    contamination = outlier_fraction)\n}","9de6bda8":"plt.figure(figsize=(9, 7))\nn_outliers = len(fraud)\n\nfor i, (clf_name, clf) in enumerate(classifiers.items()):\n    \n    # fit the data and tag outliers\n    if clf_name == 'Local Outlier Factor':\n        y_pred = clf.fit_predict(X)\n        scores_pred = clf.negative_outlier_factor_\n    else:\n        clf.fit(X)\n        scores_pred = clf.decision_function(X)\n        y_pred = clf.predict(X)\n        \n    # reshape the prediction values to 0 for valid and 1 for fraud\n    y_pred[y_pred == 1] = 0\n    y_pred[y_pred == -1] = 1\n\n    # calculate the number of errors\n    n_errors = (y_pred != Y).sum()\n    \n    # classification matrix\n    print('{}: {}'.format(clf_name, n_errors))\n    print(accuracy_score(Y, y_pred))\n    print(classification_report(Y, y_pred))","d4343653":"# **Step-1 Importing the required Libraries**","3cd60897":"# **Credit Card Fraud Detection**","e5c1dda6":"# **Step-4 Visualizing the dataset**","d1858760":"# **Step-5 Data preparation**","d6d1aa48":"# **Step-3 Exploring the dataset**","a1b02a96":"# **Step-6 Fit the model**","5c0d4f92":"# **Step-2 Inserting the dataset**"}}