{"cell_type":{"ef0142f5":"code","66d52468":"code","fbaae660":"code","d7e42677":"code","bf8e034a":"code","68d83d46":"code","be775928":"code","3b676f7f":"code","a95acef5":"code","cbfea58f":"code","4bf2b481":"code","3760fa5a":"markdown","3dba83ca":"markdown","a3d7bd0d":"markdown"},"source":{"ef0142f5":"import os\nimport tensorflow as tf\nfrom tensorflow import keras\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nIMAGE_SETS_PATH = '..\/input\/pascal-voc-2012\/VOC2012\/ImageSets\/'\nIMAGE_SETS_MAIN_PATH = '..\/input\/pascal-voc-2012\/VOC2012\/ImageSets\/Main\/'\nJPEG_IMAGES_PATH = '..\/input\/pascal-voc-2012\/VOC2012\/JPEGImages\/'","66d52468":"imageSets_list = os.listdir(IMAGE_SETS_PATH + 'Main')","fbaae660":"train_file_list = []\nval_file_list = []\n\nfor file_name in imageSets_list:\n    if file_name.find('_train.txt') != -1:\n        train_file_list.append(file_name)\n    elif file_name.find('_val.txt') != -1:\n        val_file_list.append(file_name)","d7e42677":"train_dataframe = pd.DataFrame(columns=('file_name', 'class'))\nval_dataframe = pd.DataFrame(columns=('file_name', 'class'))\n\nkind = 0\nfor train_file_name in train_file_list:\n    f = open(IMAGE_SETS_MAIN_PATH + train_file_name)\n    row_list = f.readlines()\n    for pair in row_list:\n        target = pair.split()\n        if target[1] == '1':\n            train_dataframe = train_dataframe.append(\n                [{'file_name': JPEG_IMAGES_PATH + target[0] + '.jpg',\n                  'class': train_file_name[:-10]}],\n                ignore_index=True\n            )\n    kind += 1\n    f.close()\n\nkind = 0\nfor val_file_name in val_file_list:\n    f = open(IMAGE_SETS_MAIN_PATH + val_file_name)\n    row_list = f.readlines()\n    for pair in row_list:\n        target = pair.split()\n        if target[1] == '1':\n            val_dataframe = val_dataframe.append(\n                [{'file_name': JPEG_IMAGES_PATH + target[0] + '.jpg',\n                  'class': val_file_name[:-8]}],\n                ignore_index=True\n            )\n    kind += 1\n    f.close()","bf8e034a":"train_generator = keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=keras.applications.mobilenet.preprocess_input,\n    validation_split=0.1\n)\n\ntest_generator = keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=keras.applications.mobilenet.preprocess_input\n)\n\ntrain_sets = train_generator.flow_from_dataframe(\n    dataframe=train_dataframe,\n    x_col='file_name',\n    y_col='class',\n    target_size=(300, 300),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    subset='training',\n    rotation_range=30,\n    zoom_range=0.15,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\"\n)\n\nval_sets = train_generator.flow_from_dataframe(\n    dataframe=train_dataframe,\n    x_col='file_name',\n    y_col='class',\n    target_size=(300, 300),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=0,\n    subset='validation'\n)\n\ntest_sets = test_generator.flow_from_dataframe(\n    dataframe=val_dataframe,\n    x_col='file_name',\n    y_col='class',\n    target_size=(300, 300),\n    color_mode='rgb',\n    batch_size=32,\n    class_mode='categorical',\n    shuffle=False\n)","68d83d46":"original_model = keras.applications.mobilenet.MobileNet(\n    input_shape=(300, 300, 3),\n    include_top=False,\n    weights='imagenet',\n    pooling='avg'\n)\n\ninputs = original_model.input\n\nx = keras.layers.Dense(512, activation='relu')(original_model.output)\nx = keras.layers.Dense(256, activation='relu')(x)\n\noutputs = keras.layers.Dense(20, activation='softmax')(x)\n\nmodel = keras.Model(inputs=inputs, outputs=outputs)\n\nmodel.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)","be775928":"model.summary()","3b676f7f":"callbacks = [\n    keras.callbacks.ModelCheckpoint(\n        '.\/checkpoints\/weights.{epoch:02d}-{val_loss:.2f}-{val_accuracy:.4f}.h5',\n        verbose=1,\n        save_weights_only=True\n    )\n]","a95acef5":"history = model.fit(\n    train_sets,\n    validation_data=val_sets,\n    epochs=20,\n    verbose=1,\n    callbacks=callbacks\n)","cbfea58f":"model.evaluate(test_sets, verbose=1)","4bf2b481":"model.save('VOC_MobileNet.h5')","3760fa5a":"Train the model using VOC2012.","3dba83ca":"Build the MobileNet model.","a3d7bd0d":"Generate the train and val dataset"}}