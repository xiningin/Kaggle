{"cell_type":{"0ac906f3":"code","e2238a43":"code","cb4413f7":"code","d97c5154":"code","89d82868":"code","59767d57":"code","aab65a94":"code","3cd4d1db":"code","783c34e2":"code","cf4f8c2c":"code","f3770d5e":"code","59c05c0b":"code","67ea32f7":"markdown","5acf74ae":"markdown","3a4b08f6":"markdown","c275e01e":"markdown","7b91e1ac":"markdown","b3156af0":"markdown","66e366f6":"markdown","66112ad2":"markdown"},"source":{"0ac906f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e2238a43":"import matplotlib.pyplot as plt\n%matplotlib inline","cb4413f7":"# Reading data from remote link\nurl = \"http:\/\/bit.ly\/w-data\"\ns_data = pd.read_csv(url)\nprint(\"Data imported successfully\")\n\ns_data.head(10)","d97c5154":"# Plotting the distribution of scores\ns_data.plot(x='Hours', y='Scores', style='o')  \nplt.title('Hours vs Percentage')  \nplt.xlabel('Hours Studied')  \nplt.ylabel('Percentage Score')  \nplt.show()","89d82868":"X = s_data.iloc[:, :-1].values  \ny = s_data.iloc[:, 1].values","59767d57":"from sklearn.model_selection import train_test_split  \nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                            test_size=0.2, random_state=0)","aab65a94":"from sklearn.linear_model import LinearRegression  \nregressor = LinearRegression()  \nregressor.fit(X_train, y_train) \n\nprint(\"Training complete.\")","3cd4d1db":"# Plotting the regression line\nline = regressor.coef_*X+regressor.intercept_\n\n# Plotting for the test data\nplt.scatter(X, y)\nplt.plot(X, line);\nplt.show()","783c34e2":"print(X_test) # Testing data - In Hours\ny_pred = regressor.predict(X_test) # Predicting the scores","cf4f8c2c":"# Comparing Actual vs Predicted\ndf = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  \ndf","f3770d5e":"# Task\nhours = 9.25\nown_pred = regressor.predict(np.array([hours]).reshape(1, 1))\nprint(\"No of Hours = {}\".format(hours))\nprint(\"Predicted Score = {}\".format(own_pred[0]))","59c05c0b":"from sklearn import metrics  \nprint('Mean Absolute Error:', \n      metrics.mean_absolute_error(y_test, y_pred))","67ea32f7":"# Preparing the data\n\nThe next step is to divide the data into \"attributes\" (inputs) and \"labels\" (outputs).","5acf74ae":"# Problem Statement : \n    Predict the percentage of a student based on the no. of study hours.\n    What will be predicted score if a student studies for 9.25 hrs\/day?","3a4b08f6":"# Solution :\n       This is a simple linear regression task as it involves 2 variables.","c275e01e":"Now that we have our attributes and labels, the next step is to split this data into training and test sets. We'll do this by using Scikit-Learn's built-in train_test_split() method:","7b91e1ac":"# Training the Algorithm\nWe have split our data into training and testing sets, and now is finally the time to train our algorithm.","b3156af0":"Let's plot our data points on 2-D graph to eyeball our dataset and see if we can manually find any relationship between the data. We can create the plot with the following script:","66e366f6":"# Making Predictions\nNow that we have trained our algorithm, it's time to make some predictions.","66112ad2":"# Evaluating the model\nThe final step is to evaluate the performance of algorithm. This step is particularly important to compare how well different algorithms perform on a particular dataset. For simplicity here, we have chosen the mean square error. There are many such metrics."}}