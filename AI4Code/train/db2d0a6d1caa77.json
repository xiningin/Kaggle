{"cell_type":{"ab5c48ba":"code","60b05762":"code","79aeaeda":"code","99064d58":"code","aaeca7c9":"markdown","a690b142":"markdown","1f7582cb":"markdown","819a709e":"markdown","056f4a8c":"markdown","1e7c300e":"markdown","a4694a98":"markdown","46784d80":"markdown"},"source":{"ab5c48ba":"# This codes are taken from datai team\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n# Any results you write to the current directory are saved as output.\n# load data set\nx_l = np.load('..\/input\/sign-language-digits-dataset\/X.npy')\nY_l = np.load('..\/input\/sign-language-digits-dataset\/Y.npy')\nimg_size = 64\nplt.subplot(1, 2, 1)\nplt.imshow(x_l[260].reshape(img_size, img_size))\nplt.axis('off')\nplt.subplot(1, 2, 2)\nplt.imshow(x_l[900].reshape(img_size, img_size))\nplt.axis('off')\n# Then lets create x_train, y_train, x_test, y_test arrays\n# Join a sequence of arrays along an row axis.\nX = np.concatenate((x_l[204:409], x_l[822:1027] ), axis=0) # from 0 to 204 is zero sign and from 205 to 410 is one sign \nz = np.zeros(205)\no = np.ones(205)\nY = np.concatenate((z, o), axis=0).reshape(X.shape[0],1)\nprint(\"X shape: \" , X.shape)\nprint(\"Y shape: \" , Y.shape)\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.15, random_state=42)\nnumber_of_train = X_train.shape[0]\nnumber_of_test = X_test.shape[0]\nX_train_flatten = X_train.reshape(number_of_train,X_train.shape[1]*X_train.shape[2])\nX_test_flatten = X_test .reshape(number_of_test,X_test.shape[1]*X_test.shape[2])\nprint(\"X train flatten\",X_train_flatten.shape)\nprint(\"X test flatten\",X_test_flatten.shape)\nx_train = X_train_flatten.T\nx_test = X_test_flatten.T\ny_train = Y_train.T\ny_test = Y_test.T\nprint(\"x train: \",x_train.shape)\nprint(\"x test: \",x_test.shape)\nprint(\"y train: \",y_train.shape)\nprint(\"y test: \",y_test.shape)","60b05762":"x_train, y_train, x_test, y_test = x_train.T, y_train.T, x_test.T, y_test.T","79aeaeda":"from keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score \nfrom keras.models import Sequential \nfrom keras.layers import Dense","99064d58":"\ndef model():\n    classifier = Sequential() # initialize neural network\n    classifier.add(Dense(units = 8, kernel_initializer = 'uniform', activation = 'relu', input_dim = x_train.shape[1]))\n    classifier.add(Dense(units = 4, kernel_initializer = 'uniform', activation = 'relu'))\n    classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n    classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n    return classifier\nclassifier = KerasClassifier(build_fn = model, epochs = 100)\naccuracies = cross_val_score(estimator = classifier, X = x_train, y = y_train, cv = 3)\nmean = accuracies.mean()\nvariance = accuracies.std()\nprint(\"Accuracy mean: \"+ str(mean))\nprint(\"Accuracy variance: \"+ str(variance))","aaeca7c9":"* KerasClassifier is used to classify the data.\n* cross_val_score is used for estimation and calculating accuracy(ies). \n* Sequential is used to construct neural network.\n* Dense is used to construct layers. ","a690b142":"# Reading Sign Language Digits Dataset","1f7582cb":"# Reshaping Dataset Arrays  \n* To use dataset arrays with Keras Library, Arrays should be transposed.","819a709e":"# 3 Layer Artificial Neural Network (ANN) with Keras Library","056f4a8c":"# Model and Its Structure\n* Firstly, we will implement Artificial Neural Network with Keras Library.\n* To implement our model, we will use keras.models.Sequential.\n* Then, we will implement our hidden and output layer with keras.layers.Dense.\n* In our model, there are three layers, two of them is hidden layers. \n* In first layer, model has eight nodes and Its activation function is Relu.\n* In second layer, model has four nodes and Its activation function is Relu.\n* In third layer, output layer, model has one node, output node, and Its activation function is sigmoid. \n* Finally, we will compile our model. When compiling the model, Its optimizer is \"adam\", Its loss is calculayed with binary crossentropy. ","1e7c300e":"# Model Implementation\n* To implement first hidden layer, we should give our sample number of our dataset (input_dim).\n* units : number of nodes of current layer.\n* kernel_initializer: how to initialize weights and bias.\n* activation : which activation function will be used.\n* input_dim : In our case, number of pixel each image has ( 64x64 )\n* optimizer : adam optimizer will be used since : \n    * It is one of the most effective optimizer. \n    * It provide to use less momory than others since when It is working, It optimize learning rate with little changes.\n* metrics : accuracy\n* epochs : number of iteration","a4694a98":"cross_val_score ?\nKerasClassifier \nSequential?\nDense\nparametlerin anlam\u0131\nrelu nedir max(0,z)","46784d80":"# Needed Library"}}