{"cell_type":{"124eef02":"code","38f9c6b2":"code","73f31329":"code","ed2e557b":"code","266f213f":"code","936b6363":"code","a8c4b74d":"code","4315e7ec":"code","5bb9c844":"code","b4f1a8f0":"code","e70de042":"code","ec0c23af":"code","38ea8bd3":"code","3ddac0ed":"code","cfd9894e":"code","f40cd610":"code","c192ae4a":"code","52346199":"code","49ea88ba":"code","9c50ea58":"code","feeb9e0c":"code","ab889684":"code","51424e29":"code","da37094b":"code","6d4d076a":"code","8937ea65":"code","70440bad":"code","c44f84a5":"code","b3f847b7":"code","31a71183":"code","8086881a":"code","b01fa82e":"code","cffe8ef8":"code","7ae101c4":"code","d5bb820a":"code","b52517e2":"code","0445cbdc":"code","0f8d985c":"code","812840a6":"code","2364b015":"code","7c58787a":"code","a018e655":"code","7a17ca31":"code","de29ece5":"code","b7e3eeac":"code","4422ef19":"code","3750748f":"code","c6f3954e":"markdown"},"source":{"124eef02":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error, accuracy_score, confusion_matrix\n\nimport warnings\nwarnings.simplefilter('ignore')","38f9c6b2":"train_df = pd.read_csv(\"..\/input\/mnes-stroke\/mnes-stroke\/stroke_train.csv\")\ntrain_df.head()","73f31329":"train_df.describe()","ed2e557b":"train_df.isnull().sum()","266f213f":"test_df= pd.read_csv(\"..\/input\/mnes-stroke\/mnes-stroke\/stroke_test.csv\")\ntest_df.describe()","936b6363":"test_df.isnull().sum()","a8c4b74d":"#train_df['bmi']=train_df['bmi'].fillna(train_df['bmi'].mean())\n#test_df['bmi']=test_df['bmi'].fillna(train_df['bmi'].mean())","4315e7ec":"train_df.isnull().sum()","5bb9c844":"def rep(df):\n    df=df.replace({'Urban':0,'Rural':1})\n    df=df.replace({'Yes':1,'No':0})\n    df=df.replace({'Male':1,'Female':0,'Other':0.5})\n    df=df.replace({\"Never_worked\":-1,'Private':4,'children':1,'Govt_job':2,\"Self-employed\":3})\n    df=df.replace({'Unknown':0,'never smoked':-1, \"formerly smoked\":3,'smokes':1})\n    return(df)","b4f1a8f0":"train_df=rep(train_df)\ntest_df=rep(test_df)","e70de042":"#\u7279\u5fb4\u91cf\u4f5c\u6210\ndef plus(df):\n   # df['age*bmi']=df['age']*df['bmi']\n    df['r-age']=0\n    df['r-age']=df['r-age'].where(df['age']<35,0.1)\n    df['r-age']=df['r-age'].where(df['age']<50,3)\n    df['r-age']=df['r-age'].where(df['age']<70,5)\n    df['r-age']=df['r-age'].where(df['age']<80,7)\n    df['r-age2']=0\n    df['r-age2']=df['r-age2'].where(df['age']<=75,1)\n    df['r-glu']=0\n    df['r-glu']=df['r-glu'].where(train_df['avg_glucose_level']<150,1)\n    df['glu*bmi']=df['avg_glucose_level']*df['bmi']\n    df['hd']=df['hypertension']+df['heart_disease']+df['ever_married']#+df['r-glu']\n    df['A']=df['hd']*df['r-age']\n    df['B']=df['r-age']*df['bmi']\n    df['chad']=df['hypertension']+df['heart_disease']+df['r-age2']+df['r-glu']+df['ever_married']\n    return(df)","ec0c23af":"\ndef fill_bmi(df):\n    df[(df['gender']=='Male') & (df['age']<=20)]['bmi'].fillna(21.1)\n    df[(df['gender']=='Male') & (df['age']<=30)]['bmi'].fillna(22.9)\n    df[(df['gender']=='Male') & (df['age']<=40)]['bmi'].fillna(23.7)\n    df[(df['gender']=='Male') & (df['age']<=50)]['bmi'].fillna(24.7)\n    df[(df['gender']=='Male') & (df['age']<=60)]['bmi'].fillna(24.6)\n    df[(df['gender']=='Male') & (df['age']<=70)]['bmi'].fillna(24.0)\n    df[(df['gender']=='Male') & (df['age']>70)]['bmi'].fillna(23.4)\n    df[(df['gender']=='Female') & (df['age']<=20)]['bmi'].fillna(20.2)\n    df[(df['gender']=='Female') & (df['age']<=30)]['bmi'].fillna(21.0)\n    df[(df['gender']=='Female') & (df['age']<=40)]['bmi'].fillna(21.7)\n    df[(df['gender']=='Female') & (df['age']<=50)]['bmi'].fillna(22.3)\n    df[(df['gender']=='Female') & (df['age']<=60)]['bmi'].fillna(22.4)\n    df[(df['gender']=='Female') & (df['age']<=70)]['bmi'].fillna(23.1)\n    df[(df['gender']=='Female') & (df['age']>70)]['bmi'].fillna(22.9)\n    df['bmi']=df['bmi'].fillna(22)\n    return df","38ea8bd3":"train_df=fill_bmi(train_df)\ntest_df=fill_bmi(test_df)","3ddac0ed":"train_df=plus(train_df)\ntest_df=plus(test_df)","cfd9894e":"from sklearn.model_selection import train_test_split\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nfrom lightgbm import LGBMClassifier as lgbm\n#import optuna \n#from optuna.samplers import TPESampler","f40cd610":"train_df.corr()","c192ae4a":"import tensorflow as tf\nimport os\nos.environ['TF_DETERMINISTIC_OPS'] = '1'","52346199":"train_df.columns","49ea88ba":"feat=['gender', \n      'age',\n      'hypertension',\n      'heart_disease',\n      'ever_married',\n       'work_type', \n      'Residence_type',\n      'avg_glucose_level',\n      'bmi',\n       'smoking_status',\n       #'glu*bmi',\n       #'r-age',\n        #'hd',\n     'A',\n     #'B',\n     'chad'\n     ]\ntarget=['stroke']","9c50ea58":"def sigmoid(x):\n    return 1 \/ (1 + np.exp(-x))","feeb9e0c":"from sklearn.metrics import precision_recall_curve,auc","ab889684":"from sklearn import metrics","51424e29":"F=len(feat)","da37094b":"train,test=train_test_split(train_df,test_size=0.3,random_state=162)\nX_train = train[feat]\ny_train = train[target]\nX_test= test[feat]\ny_test = test[target]","6d4d076a":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils import np_utils","8937ea65":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv1D\nfrom tensorflow.keras.layers import MaxPool1D\nfrom tensorflow.keras.optimizers import Adam\n\nfrom tensorflow.keras.layers import Dense, Activation, Dropout, Flatten\nfrom tensorflow.keras.utils import plot_model, to_categorical\nfrom keras.callbacks import TensorBoard\n\nfrom keras.datasets import cifar10","70440bad":"#tabmet\u3067\u4f7f\u3048\u308b\u5f62\u306b\u30c7\u30fc\u30bf\u3092\u4f5c\u308a\u66ff\u3048\u308b\ny_train2 = np_utils.to_categorical(y_train)","c44f84a5":"import tensorflow as tf","b3f847b7":"#\u4e0a\u3068\u540c\u3058\nX_train=X_train.to_numpy()\nX_test=X_test.to_numpy()\ny_train=y_train.to_numpy()\ny_test=y_test.to_numpy()","31a71183":"!pip install pytorch-tabnet","8086881a":"from pytorch_tabnet.tab_model import TabNetClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\n","b01fa82e":"#tabnet\u306e\u30e2\u30c7\u30eb\u69cb\u7bc9\u3068\u5b66\u7fd2\nfrom pytorch_tabnet.tab_model import TabNetClassifier, TabNetRegressor#,TabNetPretrainer\nfrom pytorch_tabnet.pretraining import TabNetPretrainer\nimport torch\nunsupervised_model = TabNetPretrainer(\n    optimizer_fn=torch.optim.Adam,\n    optimizer_params=dict(lr=2e-2),\n    mask_type= 'entmax'\n)\n\nunsupervised_model.fit(\n    X_train=X_train,\n    eval_set=[X_test],\n    pretraining_ratio=0.7,\n    batch_size=32\n)\n\nclf = TabNetClassifier(\n    optimizer_fn=torch.optim.Adam,\n    optimizer_params=dict(lr=2e-2),\n    scheduler_params={\"step_size\":20, # how to use learning rate scheduler\n                      \"gamma\":0.9},\n    scheduler_fn=torch.optim.lr_scheduler.StepLR,\n    mask_type='sparsemax' # This will be overwritten if using pretrain model\n)\n\nclf.fit(\n    X_train=X_train, y_train=y_train.reshape(-1),\n    eval_set=[(X_train, y_train.reshape(-1)), (X_test, y_test.reshape(-1))],\n    eval_name=['train', 'valid'],\n    eval_metric=['auc'],\n    from_unsupervised=unsupervised_model,\n    patience=20,\n    max_epochs = 80,\n    batch_size=16#\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u306f\u5c0f\u3055\u3081\u3060\u3068\u30b9\u30b3\u30a2\u304c\u3088\u304b\u3063\u305f\n     \n)\npreds = clf.predict_proba(X_test)","cffe8ef8":"import tensorflow as tf\nimport random","7ae101c4":"preds = clf.predict_proba(X_test)","d5bb820a":"preds=preds[:,1]","b52517e2":"#pr-auc\u3092\u63cf\u3044\u3066\u307f\u308b\nprecision, recall, thresholds = metrics.precision_recall_curve(y_test, preds)\n\nauc1 = metrics.auc(recall, precision)\nprint(auc1)\n\nplt.plot(recall, precision, label='PR curve (area = %.2f)'%auc1)\nplt.legend()\nplt.title('PR curve')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.grid(True)\nplt.show()","0445cbdc":"# roc-auc\u3092\u63cf\u3044\u3066\u307f\u308b\nfpr, tpr, thresholds = metrics.roc_curve(y_test, preds)\n# \u3064\u3044\u3067\u306bAUC\u3082\nauc = metrics.auc(fpr, tpr)\nprint(auc)\n# ROC\u66f2\u7dda\u3092\u30d7\u30ed\u30c3\u30c8\nplt.plot(fpr, tpr, label='ROC curve (area = %.2f)'%auc)\nplt.legend()\nplt.title('ROC curve')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.grid(True)","0f8d985c":"test_df[:1]","812840a6":"#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\nX=clf.predict_proba(test_df[feat].to_numpy())","2364b015":"X=X[:,1]","7c58787a":"predictions=[]\nfor i in X:\n    predictions.append(i)","a018e655":"test_df['stroke1']=predictions\n#test_df['stroke2']=model.predict(test_df[feat])","7a17ca31":"test_df['stroke']=(test_df['stroke1'])#+test_df['stroke2'])\/2","de29ece5":"sub=test_df[['id','stroke']]","b7e3eeac":"sub","4422ef19":"sub.describe()","3750748f":"sub.to_csv(\"sample_submission.csv\", index=False ,encoding='utf-8')","c6f3954e":"\u4eca\u56de\u306fnn\u3068tabnet\u304cpublic,private\u5171\u306b\u3088\u304b\u3063\u305f\u3067\u3059\u3002\npublic score\u306b\u983c\u3089\u305a\u306bPR\u30fcAUC\u306e\u5f62\u3092\u898b\u3066\u6700\u7d42\u63d0\u51fa\u3092\u3057\u307e\u3057\u305f\u304c\u3001\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30b9\u30b3\u30a2\u306e\u4e0a\u4f4d\u4e8c\u3064\u3092\u9078\u629e\u3067\u304d\u3066\u3044\u305f\u305f\u3081pr-auc\u306f\u6b63\u89e3\u30c7\u30fc\u30bf\u306e\u5c11\u306a\u3044\u5834\u5408\u306e\u63d0\u51fa\u30e2\u30c7\u30eb\u306e\u9078\u5b9a\u306b\u4f7f\u3048\u305d\u3046\u3067\u3059\u3002"}}