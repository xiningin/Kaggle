{"cell_type":{"d67e96cd":"code","fd576e28":"code","a812031a":"code","a1fa19a1":"code","10649a3d":"code","0acb5f8a":"code","fb810e05":"code","bda9bbee":"code","8e28e203":"code","eabe9d53":"markdown"},"source":{"d67e96cd":"import pandas as pd\nimport numpy as np\nimport altair as alt\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport ast #convert columns wiht lists to lst\nimport os\n#set enviorment\n\n#open metadata into pandas df\ndf = pd.read_csv('..\/input\/mesminer\/df_mesminer_final.csv', error_bad_lines=False, encoding='ISO-8859-1',index_col=0)\n\ndf['Biomedical_Entities'] =  df['Biomedical_Entities'].apply(ast.literal_eval)\n\ndf['genes_'] =  df['Genes'].apply(ast.literal_eval)\ndf['drugs_'] =  df['Drugs'].apply(ast.literal_eval)\n\ndf.head(2)#have a look at the dataframe","fd576e28":"#This cell allows you to perform a search whithin the database\ndf_search = df\n#you can create a search of papers that contain key biomedical entities, \n#add them in the list below as ['liver','neuron','X']\n\n#remove '#' in selection and df = ... to apply the search\n\n#you can create a search of papers that contain keywords, add them in the list\n#selection = ['liver']\n#df_search = df_search[pd.DataFrame(df_search.Biomedical_Entities.tolist()).isin(selection).any(1)]\n\n#you can create a search of genes of interest, add them in the list\n#selection = ['vim']\n#df_search = df_search[pd.DataFrame(df_search.genes_.tolist()).isin(selection).any(1)]\n\n\n#you can create a search of drugs of interest, add them in the list\n\n#selection = ['cysteine']\n#df_search = df_search[pd.DataFrame(df_search.drugs_.tolist()).isin(selection).any(1)]\n\n\n#you can create only look at preprints or peer reviewed papers\n#selection = ['Peer-Review']\n#df = df[pd.DataFrame(df.preprint.tolist()).isin(selection).any(1)]\n\n\n#df_search","a812031a":"#get top n words\ndef get_top_n_genes(corpus, n=20):\n    vec = CountVectorizer().fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in      \n                   vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], \n                       reverse=True)\n    return words_freq[:n]#Convert most freq words to dataframe for plotting bar plot\n","a1fa19a1":"#Check if the subselection contains any genes\ndef check_if_empty(list_of_lists):\n    lst =[]\n\n    for elem in list_of_lists:\n       \n        if len(elem) == 0:\n            lst.append(False)\n        else:\n            lst.append(True)\n    if True in lst:\n        return True\n    else:\n        return False\n    \n\n#visualises a column of df the using altair of the top items in a column\ndef viz_data(df,col,n=20):\n    if n == 0:\n        n = 20\n        print('You did asked for 0 genes so I am showing you the top 20!')\n\n    sr = df[col].dropna()\n    lst = sr.tolist()\n    check = check_if_empty(lst)\n    if check == True:\n            flat_list = [item for sublist in lst for item in sublist]\n            top_words = get_top_n_genes(lst, n)\n            top_df = pd.DataFrame(top_words)\n            top_df.columns=[col, \"Freq_gene\"]\n            plot = alt.Chart(top_df).mark_bar().encode(\n    x = alt.X(col,sort ='-y', axis=alt.Axis( title = col)),\n    y = alt.Y('Freq_gene', axis=alt.Axis( title = 'Frequency Count'))\n    ).properties(title = \"Frequency of the top {} {}\".format(str(n),col), width = 200\n               )\n\n            return plot\n    else:\n        return False\n    \n#visualise top genes and drugs \ndef viz_multiple_columns(df,lst,n=20):\n    plots = []\n    for el in lst:\n        plt = viz_data(df,el,n)\n        if plt != False:\n            plots.append(plt)\n            #plots.append('|')\n    \n    a = plots[0]\n    for i in range(1,len(plots)):\n         a = a | plots[i]\n        \n    return a\n#n = int(input(\"Please enter a number: \"))\n\nviz_multiple_columns(df,['Genes','Drugs'],20)","10649a3d":"#This function returns a df with the frequency of the top genes or drugs\n#for downstream applications\n\ndef get_df(df,col,n=20):\n    sr = df[col].dropna()\n    lst = sr.tolist()\n    check = check_if_empty(lst)\n    if check == True:\n            flat_list = [item for sublist in lst for item in sublist]\n            top_words = get_top_n_genes(lst, n)\n            top_df = pd.DataFrame(top_words)\n            top_df.columns=[col, \"Freq_gene\"]\n\n            return top_df\n    else:\n        return False\n#Use it for Genes or Drugs\ntop_words_df = get_df(df,'Genes', n=20)\ntop_words_df.head()","0acb5f8a":"#you can save your genes or drugs as a csv file if you want!\n#top_words_df.to_csv('top_words_df.csv',index=False)","fb810e05":"\n#visualises a column of the df using altair of the top items in a column\n\ndef viz_data_up_reg(df,col,n=20):\n    sr = df[col].dropna()\n    lst = sr.tolist()\n    check = check_if_empty(lst)\n    if check == True:\n            top_words = get_top_n_genes(lst, n)\n            top_df = pd.DataFrame(top_words)\n            top_df.columns=[col, \"Freq_gene\"]\n            plot = alt.Chart(top_df).mark_bar().encode(\n    x = alt.X(col,sort ='-y', axis=alt.Axis( title = col)),\n    y = alt.Y('Freq_gene', axis=alt.Axis( title = 'Frequency Count'))\n    ).properties(title = \"Frequency of the top {} {}\".format(str(n),col), width = 200\n               )\n\n            return plot\n    else:\n        return False\n    #first we need to check if the lists are empty\n\n#visualise regulation\n\n#Regulation is calculated using nlp techniques. Currently it is a simplistic based on dentification of common terms used to describe gene regulation in the surrounding text of an identified gene.\n#More details in the Github page\ndef viz_multiple_columns_reg(df,lst,n=20):\n    \n    if n == 0:\n        n = 20\n        print('You did asked for 0 genes so I am showing you the top 20!')\n\n    plots = []\n    for el in lst:\n        plt = viz_data_up_reg(df,el,n)\n        if plt != False:\n            plots.append(plt)\n            #plots.append('|')\n    \n    a = plots[0]\n    for i in range(1,len(plots)):\n         a = a | plots[i]\n        \n    return a\n#n = int(input(\"Please enter a number: \"))\n\n\nviz_multiple_columns_reg(df,['Genes_Upregulated','Genes_Downregulated','Genes_Nonregulated'],20)","bda9bbee":"#This function returns a df with the frequency of the regulation\n#for downstream applications\n\ndef get_df(df,col,n=20):\n    sr = df[col].dropna()\n    lst = sr.tolist()\n    check = check_if_empty(lst)\n    if check == True:\n            top_words = get_top_n_genes(lst, n)\n            top_df = pd.DataFrame(top_words)\n            top_df.columns=[col, \"Freq_gene\"]\n\n            return top_df\n    else:\n        return False\n#Use it for reguraion\ntop_words_df = get_df(df,'Genes_Upregulated', n=20)\ntop_words_df.head()","8e28e203":"#you can save your genes or drugs as a csv file if you want!\n#top_words_df.to_csv('top_words_df.csv',index=False)","eabe9d53":"\nThe 2019 coronavirus pandemic outbreak has been an unprecedented health risk event caused by a severe acute respiratory syndrome. Global effort has been focused to finding a functional vaccine as well as novel treatment to reduce the severity of ICU patients. The scientific community has been researching insensitivity to understand the mechanism of COVID-19 with the immune response. By understanding COVID-19 better drug development and drug repurposing approaches could be performed rapidly and more efficiently. The major aim of this project is to develop a text mining platform from the abstracts of each papers published covering COVID-19 related research to create a database with all the novel biological outcomes. The focus is to identify and normalise gene and drug mentions from the paper abstracts.\n\nThis would facilitate the transfer of the new dataset into current interactome databases with the aim to facilitate analysis and ease the finding of new potential interactions that are not currently been investigated. At this stage, only abstracts were analysed, future steps will include the analysis of the whole manuscript and to extract the quantitative data from each publication. Scispacy, an natural processing language (NLP) library was used to identify biological terms, gene, drugs, and gene regulations. By combing this with molecular biology datasets a fine curated dataset with the most frequent gene and drugs mentioned in the COVID-19 dataset can be developed. This method combined with machine learning pipelines could represent a great tool to accelerate translational research.\n\nThis notebook allows the user to visualise and export the top genes, drugs and gene regulation. In addition, this notebook allows a custom search of the dataset to search for specific biological terms or type of publication prior finding the top entities.\n\nIf you are interested in the whole pipeline have a look at:\n\nhttps:\/\/github.com\/mese433\/Capstone_JM_MesMiner"}}