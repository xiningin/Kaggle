{"cell_type":{"b70e4999":"code","4d807eb1":"code","84f8188f":"code","484adf6c":"code","a73964c8":"code","49bc1f34":"code","20231ca4":"code","a734d2ac":"code","3a3799ef":"code","40d2e9c8":"code","79013b07":"code","f9edbf30":"code","dd32d5f2":"code","26efde11":"code","43e1d985":"code","d494f840":"code","07e1071f":"code","d126328c":"code","1d811c36":"code","36344644":"code","5759e1ef":"code","652af95d":"code","5b0bb69e":"code","c96e662b":"code","e996a2b8":"code","297c04f5":"code","fbe34370":"code","3b3ae953":"code","2a2e2afe":"code","f22d6497":"code","96b3e068":"code","f8ebd6b8":"code","16615afd":"markdown","339817e7":"markdown","d960940d":"markdown","ef53c5f3":"markdown","ae2ab205":"markdown","a009bcf0":"markdown","04f88f8b":"markdown"},"source":{"b70e4999":"!pip install opencage","4d807eb1":"import pandas as pd\nimport numpy as np\nimport datetime\n\nimport folium \nfrom folium import plugins\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom plotly.graph_objs import *\n\nfrom opencage.geocoder import OpenCageGeocode\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\nimport warnings\n\n%config InlineBackend.figure_format = 'retina'\n\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","84f8188f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","484adf6c":"confirmed = pd.read_csv('\/kaggle\/input\/ece657aw20asg4coronavirus\/time_series_covid19_confirmed_global.csv')\nrecovered = pd.read_csv('\/kaggle\/input\/ece657aw20asg4coronavirus\/time_series_covid19_recovered_global.csv')\ndeaths= pd.read_csv('\/kaggle\/input\/ece657aw20asg4coronavirus\/time_series_covid19_deaths_global.csv')","a73964c8":"test_data= pd.read_csv('\/kaggle\/input\/covid19-challenges\/test_data_canada.csv')\ntest_data.head()","49bc1f34":"recovered_df = pd.read_csv('\/kaggle\/input\/covid19-challenges\/canada_recovered.csv')","20231ca4":"recovered_df = pd.read_csv('\/kaggle\/input\/covid19-challenges\/canada_recovered.csv')\nstudy = recovered_df.loc[recovered_df['date']=='2020-04-03',['province','cumulative_recovered']]\nstudy.index = study['province']\nstudy.drop('province',axis=1,inplace=True)\nstudy","a734d2ac":"death_df = pd.read_csv('\/kaggle\/input\/covid19-challenges\/canada_mortality.csv')","3a3799ef":"test_intl=pd.read_csv('\/kaggle\/input\/covid19-challenges\/test_data_intl.csv')\ntest_intl.head()","40d2e9c8":"intl_death= pd.read_csv('\/kaggle\/input\/covid19-challenges\/international_mortality.csv')\n\nf_column = intl_death[\"deaths\"]\nintl_death.tail()","79013b07":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\ncase_vs_recovered = pd.concat([test_data['province'].value_counts(),study,death_df['province'].value_counts()],axis=1,sort=False)\ncase_vs_recovered.index.name='province'\ncase_vs_recovered.columns = ['Confirmed','Recovered','Death']\n\n\ncase_vs_recovered.fillna(0,inplace=True)\ncase_vs_recovered = case_vs_recovered.astype(int)\n\n\ndisplay(case_vs_recovered)\n\nrecover_rate = pd.DataFrame([elem + \"%\" if elem!=\"nan\" else \"0%\" for elem in map(str,round(case_vs_recovered['Recovered'] \/ case_vs_recovered['Confirmed'] * 100,2))],index=case_vs_recovered.index,columns=['Recover Rate(%)'])\ndeath_rate = pd.DataFrame([elem + \"%\" if elem!=\"nan\" else \"0%\" for elem in map(str,round(case_vs_recovered['Death'] \/ case_vs_recovered['Confirmed'] * 100,2))],index=case_vs_recovered.index,columns=['Death Rate(%)'])\ntotal_rate = pd.DataFrame([round(case_vs_recovered['Recovered'].sum() \/ case_vs_recovered['Confirmed'].sum() * 100, 2),round(case_vs_recovered['Death'].sum() \/ case_vs_recovered['Confirmed'].sum() * 100 , 2)],index=['Total Recover Rate','Total Death Rate'],columns=['Percentage(%)'])\ndisplay(recover_rate,death_rate,total_rate)","f9edbf30":"ax = case_vs_recovered.plot.bar(rot=0,figsize=(35,10),width=0.8)\nplt.xlabel('Province'),plt.ylabel('Cases'),plt.autoscale()\n\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))\nax","dd32d5f2":"last_update = '4\/17\/20'\ncurrent_cases = confirmed\ncurrent_cases = current_cases[['Country\/Region',last_update]]\n\ncurrent_cases = current_cases.groupby('Country\/Region').sum().sort_values(by=last_update, ascending=False)\n\ncurrent_cases['recovered'] = recovered[['Country\/Region',last_update]].groupby('Country\/Region').sum().sort_values(by=last_update,ascending=False)\n\ncurrent_cases['deaths'] = deaths[['Country\/Region',last_update]].groupby('Country\/Region').sum().sort_values(by=last_update,ascending=False)\n\ncurrent_cases['active'] = current_cases[last_update]-current_cases['recovered']-current_cases['deaths']\n\ncurrent_cases = current_cases.rename(columns={last_update:'confirmed'\n                                              ,'recovered':'recovered'\n                                              ,'deaths':'deaths'\n                                              ,'active':'active'})\n\ncurrent_cases.style.background_gradient(cmap='Blues')","26efde11":"top_10_confirmed = confirmed[(confirmed['Country\/Region']=='Brazil') |\n                             (confirmed['Country\/Region']=='US') |\n                             (confirmed['Country\/Region']=='China') |\n                             (confirmed['Country\/Region']=='Italy') |\n                             (confirmed['Country\/Region']=='Spain') |\n                             (confirmed['Country\/Region']=='Germany') |\n                             (confirmed['Country\/Region']=='France') |\n                             (confirmed['Country\/Region']=='Iran') |\n                             (confirmed['Country\/Region']=='United Kingdom') |\n                             (confirmed['Country\/Region']=='Russia') |\n                             (confirmed['Country\/Region']=='Turkey')]\n\ntop_10_confirmed = top_10_confirmed.groupby(top_10_confirmed['Country\/Region']).sum()\n\ntop_10_confirmed = top_10_confirmed.drop(['Lat','Long'], axis = 1)\ntop_10_confirmed = top_10_confirmed.transpose()","43e1d985":"top_10_countries = top_10_confirmed.drop('Brazil', axis = 1)\n\nlayout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)'\n    , plot_bgcolor='rgba(0,0,0,0)'\n    , title=\"Cases over time in top 10 countries in confirmed cases numbers\"\n)\n\nindex = top_10_countries.index\ndata = top_10_countries\n\nfig = go.Figure(data=[\n    \n    go.Line(name='US', x = index, y=data['US'])\n    , go.Line(name='China', x = index, y=data['China'])\n    , go.Line(name='Italy', x = index, y=data['Italy'])\n    , go.Line(name='Spain', x = index, y=data['Spain'])\n    , go.Line(name='Germany', x=index, y=data['Germany'])\n    , go.Line(name='France', x=index , y=data['France'])\n    , go.Line(name='Iran', x = index, y=data['Iran'])\n    , go.Line(name='United Kingdom', x = index, y=data['United Kingdom'])\n    , go.Line(name='Russia', x = index, y=data['Russia'])\n    , go.Line(name='Turkey', x = index, y=data['Turkey'])\n    \n])\n\nfig['layout'].update(layout)\n\nfig.show()","d494f840":"# Taking confirmed cases since first case appear in 2\/26\/2020\ncases = test_intl['cases'].groupby(test_intl['date']).sum().sort_values(ascending=True)\ncases = cases[cases>0].reset_index().drop('date',axis=1)\n\ndeaths = intl_death['deaths'].groupby(intl_death['date']).sum().sort_values(ascending=True)\ndeaths = deaths[deaths>0].reset_index().drop('date',axis=1)\n\n# add new 3 days here\ncases = cases[0:55]\ndeaths = deaths[0:55]","07e1071f":"# Converting our data into a array\ndays_since_first_case = np.array([i for i in range(len(cases.index))]).reshape(-1, 1)\nintl_cases = np.array(cases).reshape(-1, 1)\n\ndays_since_first_death = np.array([i for i in range(len(deaths.index))]).reshape(-1, 1)\nintl_deaths = np.array(deaths).reshape(-1, 1)","d126328c":"#Preparing indexes to predict next 15 days\ndays_in_future = 3\nfuture_forcast = np.array([i for i in range(len(cases.index)+days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcast[:-3]\n\nfuture_forcast_deaths = np.array([i for i in range(len(deaths.index)+days_in_future)]).reshape(-1, 1)\nadjusted_dates_deaths = future_forcast_deaths[:-3]","1d811c36":"#Splitting data into train and test to evaluate our model\nX_train, X_test, y_train, y_test = train_test_split(days_since_first_case\n                                                    , intl_cases\n                                                    , test_size= 0.2\n                                                    , shuffle=False\n                                                    , random_state = 42) \n\nX_train_death, X_test_death, y_train_death, y_test_death = train_test_split(days_since_first_death\n                                                    , intl_deaths\n                                                    , test_size= 0.2\n                                                    , shuffle=False\n                                                    , random_state = 42) ","36344644":"mae = 10000\ndegree = 0\nfor i in range(101):\n    # Transform our cases data for polynomial regression\n    poly = PolynomialFeatures(degree=i)\n    poly_X_train = poly.fit_transform(X_train)\n    poly_X_test = poly.fit_transform(X_test)\n    poly_future_forcast = poly.fit_transform(future_forcast)\n\n    # polynomial regression cases\n    linear_model = LinearRegression(normalize=True, fit_intercept=False)\n    linear_model.fit(poly_X_train, y_train)\n    test_linear_pred = linear_model.predict(poly_X_test)\n    linear_pred = linear_model.predict(poly_future_forcast)\n\n    # evaluating with MAE and MSE\n    m = mean_absolute_error(test_linear_pred, y_test)\n    if(m<mae):\n        mae = m\n        degree = i\n    if(i==100):\n        print('the best mean absolute error is:',round(mae,2))\n","5759e1ef":"mae = 10000\ndegree = 0\nfor i in range(101):\n    # Transform our death data for polynomial regression\n    poly_death = PolynomialFeatures(degree=i)\n    poly_X_train_death = poly_death.fit_transform(X_train_death)\n    poly_X_test_death = poly_death.fit_transform(X_test_death)\n    poly_future_forcast_death = poly_death.fit_transform(future_forcast_deaths)\n\n    # polynomial regression deaths\n    linear_model_death = LinearRegression(normalize=True, fit_intercept=False)\n    linear_model_death.fit(poly_X_train_death, y_train_death)\n    test_linear_pred_death = linear_model_death.predict(poly_X_test_death)\n    linear_pred_death = linear_model_death.predict(poly_future_forcast_death)\n\n    # evaluating with MAE and MSE\n    m = mean_absolute_error(test_linear_pred_death, y_test_death)\n    if(m<mae):\n        mae = m\n        degree = i\n    if(i==100):\n        print('the best mean absolute error is:',round(mae,2))","652af95d":"# Transform our cases data for polynomial regression\npoly = PolynomialFeatures(degree=3)\npoly_X_train = poly.fit_transform(X_train)\npoly_X_test = poly.fit_transform(X_test)\npoly_future_forcast = poly.fit_transform(future_forcast)\n\n# Transform our death data for polynomial regression\npoly_death = PolynomialFeatures(degree=3)\npoly_X_train_death = poly_death.fit_transform(X_train_death)\npoly_X_test_death = poly_death.fit_transform(X_test_death)\npoly_future_forcast_death = poly_death.fit_transform(future_forcast_deaths)","5b0bb69e":"# polynomial regression cases\nlinear_model = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model.fit(poly_X_train, y_train)\ntest_linear_pred = linear_model.predict(poly_X_test)\nlinear_pred = linear_model.predict(poly_future_forcast)\n\n# evaluating with MAE and MSE\nprint('Mean Absolute Error:', mean_absolute_error(test_linear_pred, y_test))","c96e662b":"plt.figure(figsize=(12,7))\n\nplt.plot(y_test, label = \"Real cases\")\nplt.plot(test_linear_pred, label = \"Predicted\")\nplt.title(\"Predicted vs Real cases\", size = 20)\nplt.xlabel('Days', size = 15)\nplt.ylabel('Cases', size = 15)\nplt.xticks(size=12)\nplt.yticks(size=12)\n\n# defyning legend config\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , ncol = 2 \n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1\n           , prop={'size': 15});","e996a2b8":"plt.figure(figsize=(16, 9))\n\nplt.plot(adjusted_dates\n         , intl_cases\n         , label = \"Real cases\")\n\nplt.plot(future_forcast\n         , linear_pred\n         , label = \"Polynomial Regression Predictions\"\n         , linestyle='dashed'\n         , color='orange')\n\nplt.title('Global cases over the time: Predicting Next 3 days', size=30)\nplt.xlabel('Days Since 2\/26\/20', size=30)\nplt.ylabel('Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\n\nplt.axvline(len(X_train), color='black'\n            , linestyle=\"--\"\n            , linewidth=1)\nplt.text(18, 5000\n         , \"model training\"\n         , size = 15\n         , color = \"black\")\n\nplt.text((len(X_train)+0.2), 15000\n         , \"prediction\"\n         , size = 15\n         , color = \"black\")\n\n# defyning legend config\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , ncol = 2 \n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1\n           , prop={'size': 15})\n\nplt.show();","297c04f5":"last_predictions = pd.DataFrame([13108,14898,16905\n                                 ,17720,19683,21806\n                                 ,23105,23135,27166\n                                ,29127,31544,34091\n                                ,36399,38975,41622]\n                                , columns = ['Predicted']\n                                , index = ['04\/06\/20','04\/07\/20','04\/08\/20'\n                                           ,'04\/09\/20','04\/10\/20','04\/11\/20'\n                                          ,'04\/12\/20','04\/13\/20','04\/14\/20'\n                                          ,'04\/15\/20','04\/16\/20','04\/17\/20'\n                                          ,'04\/18\/20','04\/19\/20','04\/20\/20'])\nlast_predictions['Real cases'] = [12056,13717,15927\n                                  ,17857,19638,20727\n                                  ,22169,23430,25262\n                                 ,28320,30425,33682\n                                 ,36599,38654,40581]\n\nlayout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)'\n    , plot_bgcolor='rgba(0,0,0,0)'\n    , title=\"Last predictions vs Real cases\"\n)\n\nfig = go.Figure(data=[\n    \n    go.Line(name='Predicted', x=last_predictions.index , y=last_predictions['Predicted'])\n    , go.Line(name='Real cases', x=last_predictions.index , y=last_predictions['Real cases'])\n    \n])\n\nfig.update_layout(barmode='stack')\nfig['layout'].update(layout)\n\nfig.show()","fbe34370":"pd.DataFrame(linear_pred[len(cases):].astype('Int64'), columns = ['Predicted'], index = ['04-21-20','04-22-20','04-23-20']).style.background_gradient(cmap='Blues')","3b3ae953":"# polynomial regression deaths\nlinear_model_death = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model_death.fit(poly_X_train_death, y_train_death)\ntest_linear_pred_death = linear_model_death.predict(poly_X_test_death)\nlinear_pred_death = linear_model_death.predict(poly_future_forcast_death)\n\n# evaluating with MAE and MSE\nprint('MAE:', mean_absolute_error(test_linear_pred_death, y_test_death))","2a2e2afe":"plt.figure(figsize=(12,7))\n\nplt.plot(test_linear_pred_death, label = \"Predicted\")\nplt.plot(y_test_death, label = \"Real deaths\")\nplt.title(\"Predicted vs Real deaths\", size = 20)\nplt.xlabel('Days', size = 15)\nplt.ylabel('Deaths', size = 15)\nplt.xticks(size=12)\nplt.yticks(size=12)\n\n# defyning legend config\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , ncol = 2 \n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1\n           , prop={'size': 15});","f22d6497":"plt.figure(figsize=(16, 9))\n\nplt.plot(adjusted_dates_deaths\n         , intl_deaths\n         , label = \"Real deaths\")\n\nplt.plot(future_forcast_deaths\n         , linear_pred_death\n         , label = \"Polynomial Regression Predictions\"\n         , linestyle='dashed'\n         , color='red')\n\nplt.title('Global deaths over the time: Predicting Next 3 days', size=30)\nplt.xlabel('Days Since 03\/17\/20', size=30)\nplt.ylabel('Deaths', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\n\nplt.axvline(len(X_train_death), color='black'\n            , linestyle=\"--\"\n            , linewidth=1)\n\nplt.text(10, 200\n         , \"model training\"\n         , size = 15\n         , color = \"black\")\nplt.text((len(X_train_death)+0.2), 600\n         , \"prediction\"\n         , size = 15\n         , color = \"black\")\n\n# defyning legend config\nplt.legend(loc = \"upper left\"\n           , frameon = True\n           , ncol = 2 \n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1\n           , prop={'size': 15})\n\nplt.show();","96b3e068":"last_predictions = pd.DataFrame([550,634,727\n                                 ,919,1060,1218\n                                ,1321,1490,1673\n                                ,1584,1722,1864\n                                ,2249,2456,2676]\n                                , columns = ['Predicted']\n                                , index = ['04\/06\/20','04\/07\/20','04\/08\/20'\n                                           ,'04\/09\/20','04\/10\/20','04\/11\/20'\n                                          ,'04\/12\/20','04\/13\/20','04\/14\/20'\n                                          ,'04\/15\/20','04\/16\/20','04\/17\/20'\n                                          ,'04\/18\/20','04\/19\/20','04\/20\/20'])\n\nlast_predictions['Real cases'] = [553,667,800\n                                  ,941,1056,1124\n                                 ,1223,1328,1532\n                                 ,1736,1924,2141\n                                 ,2347,2462,2575]\n\nlayout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)'\n    , plot_bgcolor='rgba(0,0,0,0)'\n    , title=\"Last predictions vs Real deaths\"\n)\nfig = go.Figure(data=[\n    \n    go.Line(name='Predicted', x=last_predictions.index , y=last_predictions['Predicted'])\n    , go.Line(name='Real deaths', x=last_predictions.index , y=last_predictions['Real cases'])\n    \n])\n\nfig.update_layout(barmode='stack')\nfig['layout'].update(layout)\n\nfig.show()","f8ebd6b8":"pd.DataFrame(linear_pred_death[len(deaths):].astype('Int64'), columns = ['Predicted'], index = ['04-21-20','04-22-20','04-23-20']).style.background_gradient(cmap='Reds')","16615afd":"# Prepare data for modeling","339817e7":"# Plotting confirmed, recovered and deaths globally","d960940d":"**Using Polynomial regression Model**","ef53c5f3":"# plotting confirmed, recovered and deaths in Canada up till now","ae2ab205":"Training, predicting and evaluating polynomial regression into confirmed cases","a009bcf0":"To modeling confirmed cases and deaths let's take cases and deaths since first case appear, convert our data into 1D arrays, split into train and test and train_death and test_death, transform our data using polynomial fit. We can make a new prediction every 3 days.","04f88f8b":"Now that we already have the bests degree for death and cases prediction, let's put into poly.fit again and transform our data for polynomial regression."}}