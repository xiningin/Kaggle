{"cell_type":{"d63e4bc6":"code","cc53cafa":"code","c4f75378":"code","ffe63a90":"code","46390519":"code","ce1742ff":"code","94e86d67":"code","efbb4196":"code","34337936":"code","261e8709":"code","f0ae1579":"code","cc7ddc1d":"code","7dfb9974":"code","3f2db946":"code","37dc3bbb":"markdown"},"source":{"d63e4bc6":"import pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\nfrom keras.utils.np_utils import to_categorical\nimport cv2\nimport tensorflow as tf\n\nimport os","cc53cafa":"disease_types=['COVID', 'non-COVID']\ndata_dir = '..\/input\/sarscov2-ctscan-dataset\/'\ntrain_dir = os.path.join(data_dir)","c4f75378":"train_data = []\nfor defects_id, sp in enumerate(disease_types):\n    for file in os.listdir(os.path.join(train_dir, sp)):\n        train_data.append(['{}\/{}'.format(sp, file), defects_id, sp])      \ntrain = pd.DataFrame(train_data, columns=['File', 'DiseaseID','Disease Type'])","ffe63a90":"IMAGE_SIZE = 64\ndef read_image(filepath):\n    return cv2.imread(os.path.join(data_dir, filepath)) \ndef resize_image(image, image_size):\n    return cv2.resize(image.copy(), image_size, interpolation=cv2.INTER_AREA)","46390519":"X_train = np.zeros((train.shape[0], IMAGE_SIZE, IMAGE_SIZE, 3))\nfor i, file in tqdm(enumerate(train['File'].values)):\n    image = read_image(file)\n    if image is not None:\n        X_train[i] = resize_image(image, (IMAGE_SIZE, IMAGE_SIZE))\nX_Train = X_train \/ 255.\nprint(X_Train.shape)","ce1742ff":"Y_train = train['DiseaseID'].values\nY_train = to_categorical(Y_train, num_classes=2)","94e86d67":"from sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(X_Train, Y_train, test_size=0.1)","efbb4196":"from keras.layers import  Flatten, Dense, Dropout\nfrom keras.applications import VGG16\nfrom keras.models import Model\nfrom keras import optimizers\nfrom keras.optimizers import Adam\nfrom keras.layers import Dense, GlobalAveragePooling2D\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization, AveragePooling2D, GlobalAveragePooling2D\nvgg16_model = VGG16(weights = 'imagenet', include_top = False,input_shape=(150,150,3))\nx = vgg16_model.output\nx = GlobalAveragePooling2D()(x)\nx = BatchNormalization()(x)\nx = Dropout(0.5)(x)\nx = Dense(256, activation='relu')(x)\nx = BatchNormalization()(x)\nx = Dropout(0.5)(x)\n\npredictions = Dense(2, activation = 'softmax')(x)\nmodel = Model(vgg16_model.input,predictions)\nfor layer in vgg16_model.layers:\n    layer.trainable = False\noptimizer = Adam(lr=0.0002)\nmodel.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n\nmodel.summary()","34337936":"import keras_preprocessing\nfrom keras_preprocessing import image\nfrom keras_preprocessing.image import ImageDataGenerator","261e8709":"training_datagen = ImageDataGenerator(rotation_range=40, \n                        width_shift_range=0.2, \n                        height_shift_range=0.2, \n                        zoom_range=0.2, \n                        horizontal_flip=True, \n                        vertical_flip=True,\n                        shear_range=0.2) \n\ntrain_generator = training_datagen.flow(\n\tX_train, Y_train,\nbatch_size=64\n)\ntraining_datagen.fit(X_train)\nfrom keras import callbacks\n\nfilepath=\"Best1.hdf5\"\ncheckpoint = callbacks.ModelCheckpoint(filepath, monitor='val_loss',save_best_only=True, mode='min',verbose=1)\ncallbacks_list = [checkpoint]\n\nhistory = model.fit_generator(train_generator, steps_per_epoch=32, epochs=200,\n                              validation_data=(X_val, Y_val),validation_steps=50,callbacks=callbacks_list)","f0ae1579":"import matplotlib.pyplot as plt\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(acc))\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend(loc=0)\nplt.figure()\nplt.show()","cc7ddc1d":"model.load_weights(\"Best1.hdf5\")\nscore = model.evaluate(X_val, Y_val ,verbose=1)\nprint('Test Loss:', score[0])\nprint('Test accuracy:', score[1])","7dfb9974":"test_img=cv2.imread(\"..\/input\/sarscov2-ctscan-dataset\/COVID\/Covid (10).png\")\ntestimg_data_list=[]\ntest_img_resize=cv2.resize(test_img,(150,150))\ntestimg_data_list.append(test_img_resize)\ntestimg_data = np.array(testimg_data_list)\ntestimg_data = testimg_data.astype('float32')\ntestimg_data = testimg_data\/255\ntestimg_data.shape\n\nresults = model.predict(testimg_data).argmax(axis=-1)\nplt.imshow(test_img)\nplt.gca().get_xaxis().set_ticks([])\nplt.gca().get_yaxis().set_ticks([])\nplt.xlabel('prediction = Covid', fontsize=25)\nprint(results)\n","3f2db946":"test_img=cv2.imread(\"..\/input\/sarscov2-ctscan-dataset\/non-COVID\/Non-Covid (100).png\")\ntestimg_data_list=[]\ntest_img_resize=cv2.resize(test_img,(150,150))\ntestimg_data_list.append(test_img_resize)\ntestimg_data = np.array(testimg_data_list)\ntestimg_data = testimg_data.astype('float32')\ntestimg_data = testimg_data\/255\ntestimg_data.shape\n\nresults = model.predict(testimg_data).argmax(axis=-1)\nplt.imshow(test_img)\nplt.gca().get_xaxis().set_ticks([])\nplt.gca().get_yaxis().set_ticks([])\nplt.xlabel('prediction = Non-Covid', fontsize=25)\nprint(results)","37dc3bbb":"![](http:\/\/)We got an model with acc 77%"}}