{"cell_type":{"02b800b0":"code","4ddf1d2e":"code","f83b39b4":"code","6672da52":"code","43d91e5d":"code","a3f3e741":"code","023d54b8":"code","6cea1682":"code","5a8fe787":"code","7c064b1e":"markdown","58f61c1f":"markdown","5381f09c":"markdown","c5a70c7d":"markdown","333b5a2b":"markdown"},"source":{"02b800b0":"!pip install numpy==1.19.3","4ddf1d2e":"import math\nimport numpy as np\nimport random\nfrom collections import deque\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.models import load_model, save_model\nfrom tensorflow.keras.layers import Input, LSTM, Dense\nfrom tensorflow.keras.optimizers import Adam","f83b39b4":"stock_name = 'GOOGL'\nmodel_name = stock_name+'_DQN.h5'\nwindow_size = 20 # working days","6672da52":"class DQNAgent:\n    def __init__(self, state_size, is_eval=False, model_name=\"\"):\n        self.state_size = state_size # normalized previous days\n        self.action_size = 3 # sit, buy, sell\n        self.memory = deque(maxlen=1000)\n        self.inventory = []\n        self.model_name = model_name\n        self.is_eval = is_eval\n        self.gamma = 0.95\n        self.epsilon = 1.0\n        self.epsilon_min = 0.01\n        self.epsilon_decay = 0.995\n        self.model = load_model(model_name) if is_eval else self._model()   \n    def _model(self):\n        model = Sequential()        \n        model.add(Dense(units=64, input_dim=self.state_size, activation=\"relu\"))\n        model.add(Dense(units=32, activation=\"relu\"))\n        model.add(Dense(units=8, activation=\"relu\"))\n        model.add(Dense(self.action_size, activation=\"linear\"))        \n        model.summary()\n        model.compile(loss=\"mse\", optimizer=Adam(learning_rate=0.001))\n        return model\n    def act(self, state):        \n        if not self.is_eval and random.random()<= self.epsilon:\n            return random.randrange(self.action_size)\n        options = self.model.predict(state)\n        return np.argmax(options[0])\n    def expReplay(self, batch_size):\n        mini_batch = []\n        l = len(self.memory)\n        for i in range(l - batch_size + 1, l):\n            mini_batch.append(self.memory[i])\n        for state, action, reward, next_state, done in mini_batch:\n            target = reward\n            if not done:\n                target = reward + self.gamma * np.amax(self.model.predict(next_state)[0])\n            target_f = self.model.predict(state)\n            target_f[0][action] = target \n            self.model.fit(state, target_f, epochs=1, verbose=0)\n        if self.epsilon > self.epsilon_min:\n            self.epsilon *= self.epsilon_decay            ","43d91e5d":"def formatPrice(n):\n    return(\"-Rs.\" if n<0 else \"Rs.\")+\"{0:.2f}\".format(abs(n))\n\ndef getStockDataVec(symbol):\n    vec = []\n    dat = []\n    lines = open('\/kaggle\/input\/stocks\/'+symbol+\".csv\",\"r\").read().splitlines()\n    for line in lines[1:]:\n        vec.append(float(line.split(\",\")[4]))\n        dat.append(line.split(\",\")[0])\n    return vec, dat\n\ndef sigmoid(x):\n    return 1\/(1+math.exp(-x))\n\ndef getState(data, t, n):\n    d = t - n + 1\n    block = data[d:t + 1] if d >= 0 else -d * [data[0]] + data[0:t + 1] # pad with t0\n    res = []\n    for i in range(n - 1):\n        res.append(sigmoid(block[i + 1] - block[i]))\n    return np.array([res])","a3f3e741":"agent = DQNAgent(window_size)\ndata,date = getStockDataVec(stock_name)\nprint(stock_name, len(data))\n\n#datalen = 52 *5 *2  # 2 years\n#data = data[0:datalen]\n#date = date[0:datalen]\n\nl = len(data) - 1\nprint(l)","023d54b8":"data.reverse() # first data is from the latest date, so reverse it\ndate.reverse()","6cea1682":"batch_size = 32\nnum_episode= 1","5a8fe787":"for e in range(num_episode):\n    print(\"Episode \" + str(e+1) + \"\/\" + str(num_episode))\n    state = getState(data, 0, window_size + 1)\n    total_profit = 0\n    agent.inventory = []\n    for t in range(l):        \n        action = agent.act(state)\n        # sit\n        next_state = getState(data, t + 1, window_size + 1)\n        reward = 0\n        if action == 1: # buy\n            agent.inventory.append(data[t])\n            print(date[t]+\" Buy: \" + formatPrice(data[t]))\n        elif action == 2 and len(agent.inventory) > 0: # sell\n            bought_price = window_size_price = agent.inventory.pop(0)\n            reward = max(data[t] - bought_price, 0)\n            total_profit += data[t] - bought_price\n            print(date[t]+\" Sell: \" + formatPrice(data[t]) + \" | Profit: \" + formatPrice(data[t] - bought_price))\n        done = True if t == l - 1 else False\n        agent.memory.append((state, action, reward, next_state, done))\n        state = next_state\n        if done:\n            print(\"--------------------------------\")\n            print(\"Total Profit: \" + formatPrice(total_profit))\n            print(\"--------------------------------\")\n        if len(agent.memory) > batch_size:\n            agent.expReplay(batch_size)\n    if e % 10 == 0:        \n        save_model(agent.model, model_name)\n    save_model(agent.model, model_name)","7c064b1e":"# Reinforcement Learning Stock Trading using DQN","58f61c1f":"## Create Agent","5381f09c":"## Train Model","c5a70c7d":"## Basic Functions","333b5a2b":"## Train Agent"}}