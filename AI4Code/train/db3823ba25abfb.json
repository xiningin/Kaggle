{"cell_type":{"966d6a43":"code","f34dfa4f":"code","720f0747":"code","848dbbdb":"code","630c627e":"code","938a4101":"code","befb28b7":"code","5b6012aa":"code","62cbc8e3":"code","52fc8e74":"code","1be3aeda":"code","9ac5d8be":"code","42f84c88":"code","312b0306":"code","a6c5de52":"code","8973e8ba":"code","e98dbc24":"code","d59a87b6":"code","e6bd9bb0":"code","29c77b1e":"code","3bc85261":"code","a9e28dc6":"code","6f9c7f7d":"code","4905811d":"code","96b7c071":"code","8c235926":"code","118d7d76":"code","3deff3ea":"code","e3e3c5bc":"code","13d7053e":"code","3e32863b":"code","5d7d67ec":"code","abb8655a":"code","be44d41a":"code","8a865bc2":"code","e2a7ff3e":"code","50f03923":"code","e7d1c6e9":"code","b9ee3fc7":"code","af0a01ef":"code","6488dbe3":"code","921bad7f":"code","b1590e35":"code","ab9cc360":"code","0e037815":"code","ccef3254":"code","bf608756":"code","97dbe288":"code","74033e96":"code","f2e17690":"code","724b91e8":"code","bdb5bf56":"code","259ea85e":"code","b4765bd7":"code","c1e6154c":"code","6880f45b":"code","f679c353":"code","37998a69":"code","2919329a":"code","98784c06":"code","33c88b86":"code","034bb978":"code","717f12db":"code","ba15cc02":"code","2de36c98":"markdown","7ab45ba6":"markdown","92223c36":"markdown","6b8b4094":"markdown","262baed3":"markdown","5ce59dda":"markdown","6544857c":"markdown","5660230d":"markdown","039eac21":"markdown","04d1b7e2":"markdown","64cdcdaa":"markdown","713e9571":"markdown","cdff5d03":"markdown","ed86d964":"markdown","9d6a10f7":"markdown","317b3917":"markdown","bad212f3":"markdown"},"source":{"966d6a43":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\nsns.set()","f34dfa4f":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain.head()","720f0747":"test = pd.read_csv('..\/input\/titanic\/test.csv')\ntest.head()","848dbbdb":"gs = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ngs.head()","630c627e":"sns.countplot(x='Survived',data=train)","938a4101":"sns.countplot(x='Survived',hue='Sex',data=train)","befb28b7":"sns.countplot(x='Survived',hue=\"Pclass\",data=train)","5b6012aa":"sns.distplot(train['Age'].dropna(),kde=False,bins=30)","62cbc8e3":"train.info()","52fc8e74":"sns.countplot(x='SibSp',data=train)","1be3aeda":"train['Fare'].hist(bins=40,figsize=(10,4))","9ac5d8be":"dfs = [train, test]","42f84c88":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","312b0306":"sns.heatmap(test.isnull(),yticklabels=False,cbar=False,cmap='viridis')","a6c5de52":"test[pd.isnull(test['Fare'])]","8973e8ba":"fare_fill = test[test['Pclass']==3]['Fare'].mean() # Mean of Fare values when Pclass = 3\ntest['Fare'].fillna(fare_fill, inplace=True)","e98dbc24":"sns.boxplot(x='Pclass',y='Age',data=train)","d59a87b6":"for df in dfs:\n    def impute_age(col): # Use Pclass to fill null age values\n        age = col[0]\n        pclass = col[1]\n        \n        if (pd.isnull(age)):\n            return df[df['Pclass']==pclass]['Age'].median()\n        return age\n    \n    df['Age'] = df[['Age', 'Pclass']].apply(impute_age, axis=1)    ","e6bd9bb0":"for df in dfs:\n    df['Cabin_letter'] = df['Cabin'].dropna().apply(lambda x : x[0])    \n\ntrain['Cabin_letter'].value_counts()","29c77b1e":"test['Cabin_letter'].value_counts()","3bc85261":"sex = pd.get_dummies(train['Sex'],drop_first=True)\nembark = pd.get_dummies(train['Embarked'],drop_first=True, prefix='Emb')\ncabin = pd.get_dummies(train['Cabin_letter'],prefix='Cabin')\n\ntrain = pd.concat([train,sex,embark,cabin],axis=1)","a9e28dc6":"sex = pd.get_dummies(test['Sex'],drop_first=True)\nembark = pd.get_dummies(test['Embarked'],drop_first=True, prefix='Emb')\ncabin = pd.get_dummies(test['Cabin_letter'],prefix='Cabin')\n\ntest = pd.concat([test,sex,embark,cabin],axis=1)\ntest['Cabin_T'] = 0 # Makes sure train and test have same # of columns","6f9c7f7d":"def get_title(x):\n    for i in x.split():\n        if i[-1] == '.':\n            return i[:-1]\n        \ntrain['Name'].apply(get_title).value_counts()","4905811d":"test['Name'].apply(get_title).value_counts()","96b7c071":"title_map = {\n    'Mr': 0, 'Miss': 0, 'Mrs': 0, 'Ms': 0, 'Mme': 0, 'Mlle': 0,\n    'Lady': 1, 'Sir': 1, 'Dr': 1, 'Rev': 1, 'Don': 1, 'Dona': 1, 'Countess': 1,\n    'Jonkheer': 1, 'Capt': 1, 'Col': 1, 'Major': 1, 'Master': 1,\n}\n\ntrain['Rank'] = train['Name'].apply(get_title).map(title_map)\ntest['Rank'] = test['Name'].apply(get_title).map(title_map)","8c235926":"train.columns","118d7d76":"train.drop(['PassengerId', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked', 'Cabin_letter'], axis=1, inplace=True)\ntrain.head()","3deff3ea":"test.drop(['Name', 'Sex', 'Ticket', 'Cabin', 'Embarked', 'Cabin_letter'], axis=1, inplace=True)\ntest.head()","e3e3c5bc":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","13d7053e":"sns.heatmap(test.isnull(),yticklabels=False,cbar=False,cmap='viridis')","3e32863b":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix","5d7d67ec":"X = train.drop('Survived',axis=1)\ny = train['Survived']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\nX_train1, X_train2, y_train1, y_train2 = train_test_split(X_train, y_train, test_size=0.5)","abb8655a":"from sklearn.linear_model import LogisticRegression","be44d41a":"logmodel = LogisticRegression()\nlogmodel.fit(X_train1,y_train1)","8a865bc2":"log_pred = logmodel.predict(X_train2)","e2a7ff3e":"print(classification_report(y_train2,log_pred))\nprint(confusion_matrix(y_train2,log_pred))","50f03923":"from sklearn.tree import DecisionTreeClassifier","e7d1c6e9":"dtree = DecisionTreeClassifier()\ndtree.fit(X_train1, y_train1)","b9ee3fc7":"dtree_pred = dtree.predict(X_train2)","af0a01ef":"print(classification_report(y_train2,dtree_pred))\nprint(confusion_matrix(y_train2,dtree_pred))","6488dbe3":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV","921bad7f":"params = {\n    'n_estimators': [100, 200, 400, 600],\n    'criterion': ['entropy', 'gini'],\n    'max_depth': [None, 8, 10, 12, 15, 20, 30, 50],\n}\nrfc_grid = GridSearchCV(RandomForestClassifier(), params)\nrfc_grid.fit(X_train1, y_train1)\n\nrfc = rfc_grid.best_estimator_\nrfc_grid.best_params_","b1590e35":"rfc_pred = rfc.predict(X_train2)","ab9cc360":"print(classification_report(y_train2,rfc_pred))\nprint(confusion_matrix(y_train2,rfc_pred))","0e037815":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler(copy=True, with_mean=True, with_std=True)\nscaler.fit(X_train1)\nscaled_features = scaler.transform(X_train1)\n\nscaler = StandardScaler(copy=True, with_mean=True, with_std=True)\nscaler.fit(X_train2)\nscaled_features1 = scaler.transform(X_train2)","ccef3254":"from sklearn.neighbors import KNeighborsClassifier","bf608756":"error_rate = []\n\n# Will take some time\nfor i in range(1,40):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(scaled_features, y_train1)\n    pred_i = knn.predict(scaled_features1)\n    error_rate.append(np.mean(pred_i != y_train2))","97dbe288":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","74033e96":"knn = KNeighborsClassifier(n_neighbors=20)\nknn.fit(scaled_features, y_train1)\nknn_pred = knn.predict(scaled_features1)","f2e17690":"print(classification_report(y_train2,knn_pred))\nprint(confusion_matrix(y_train2,knn_pred))","724b91e8":"from xgboost import XGBClassifier","bdb5bf56":"xgb = XGBClassifier()\nxgb.fit(X_train1, y_train1)","259ea85e":"xgb_pred = xgb.predict(X_train2)","b4765bd7":"print(classification_report(y_train2,xgb_pred))\nprint(confusion_matrix(y_train2,xgb_pred))","c1e6154c":"pred_df = pd.DataFrame()\npred_df['log'] = log_pred\npred_df['dtree'] = dtree_pred\npred_df['rfc'] = rfc_pred\npred_df['xgb'] = xgb_pred\npred_df['knn'] = knn_pred\npred_df.head()","6880f45b":"from xgboost import XGBClassifier","f679c353":"meta_model = XGBClassifier()\nmeta_model.fit(pred_df, y_train2)","37998a69":"pred_df = pd.DataFrame()\npred_df['log'] = logmodel.predict(X_test)\npred_df['dtree'] = dtree.predict(X_test)\npred_df['rfc'] = rfc.predict(X_test)\n\nscaler = StandardScaler(copy=True, with_mean=True, with_std=True)\nscaler.fit(X_test)\nX_test_scaled = scaler.transform(X_test)\npred_df['knn'] = knn.predict(X_test_scaled)\n\npred_df['xgb'] = xgb.predict(X_test)\nmeta_pred = meta_model.predict(pred_df)","2919329a":"print(classification_report(y_test,meta_pred))\nprint(confusion_matrix(y_test,meta_pred))","98784c06":"test.head()","33c88b86":"final_X = test.drop('PassengerId', axis=1)","034bb978":"final_pred = pd.DataFrame()\nfinal_pred['log'] = logmodel.predict(final_X)\nfinal_pred['dtree'] = dtree.predict(final_X)\nfinal_pred['rfc'] = rfc.predict(final_X)\n\nscaler = StandardScaler(copy=True, with_mean=True, with_std=True)\nscaler.fit(final_X)\nfinal_X_scaled = scaler.transform(final_X)\nfinal_pred['knn'] = knn.predict(final_X_scaled)\nfinal_pred['xgb'] = xgb.predict(final_X)\nfinal_pred.head()","717f12db":"meta_pred = meta_model.predict(final_pred)","ba15cc02":"final = pd.DataFrame()\nfinal['PassengerId'] = test['PassengerId']\nfinal['Survived'] = meta_pred\nfinal.to_csv('pred.csv', index=False)\nfinal.head()","2de36c98":"### XGBoost","7ab45ba6":"## Imports","92223c36":"## Building Initial Models","6b8b4094":"### KNN","262baed3":"## Feature Engineering","5ce59dda":"Age","6544857c":"## Read Data","5660230d":"### Decision Tree","039eac21":"Remove extra columns","04d1b7e2":"### Random Forest","64cdcdaa":"Fare","713e9571":"## Visualize Data","cdff5d03":"### Logistic Regression","ed86d964":"## Run models on test data","9d6a10f7":"Encoding (Sex, Embarked, Cabin)\n\nNote: this can't be done using a for loop since we're changing the variable reference","317b3917":"## Ensembling (Stacking)","bad212f3":"Name\n\nNote: also can't be done using a for loop bc adding a column doesn't update in the original reference for some reason"}}