{"cell_type":{"f7b94849":"code","7e903e68":"code","54bb26ff":"code","48e1cb89":"code","3be8a01e":"code","0dad2545":"code","25be5d93":"code","267a73a4":"code","e3a85cf9":"code","b1930e06":"code","e5a13b11":"code","3395ef8b":"code","b4215fcf":"code","03294274":"code","a7769ec9":"markdown","959b335b":"markdown","3c7c235b":"markdown","55f0d7b9":"markdown","2d1d1efd":"markdown","3f9b9548":"markdown","cdfdf6cd":"markdown","f1bd022c":"markdown","2eec0ae2":"markdown"},"source":{"f7b94849":"import os\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\n\nimport numpy as np\nimport tensorflow as tf\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import activations\nfrom tensorflow.keras.optimizers import Adam\nfrom keras.utils import np_utils\nfrom keras.datasets import cifar10","7e903e68":"NUM_CLASSES = 10\nNUM_EPOCHS = 10\nBATCH_SIZE = 32\nLEARNING_RATE = 0.0005\n\nCLASS_NAMES = np.array([\n    'airplane',\n    'car',\n    'bird',\n    'cat',\n    'deer',\n    'dog',\n    'frog',\n    'horse',\n    'ship',\n    'truck'\n])","54bb26ff":"os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'","48e1cb89":"(X_train, y_train), (X_test, y_test) = cifar10.load_data()","3be8a01e":"X_train = X_train.astype(np.float32) \/ 255.0\nX_test = X_test.astype(np.float32) \/ 255.0\n\ny_train = np_utils.to_categorical(y_train, NUM_CLASSES)\ny_test = np_utils.to_categorical(y_test, NUM_CLASSES)","0dad2545":"indices = np.random.randint(0, X_train.shape[0], 100)\nclass_names = CLASS_NAMES[np.argmax(y_train, axis=1)]\n\nfig, axes = plt.subplots(nrows=10, ncols=10, figsize=(20, 20))\nfor idx, ax in zip(indices, axes.flatten()):\n    ax.imshow(X_train[idx])\n    class_name = class_names[idx]\n    \n    ax.set_title(class_name, fontsize=12)\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n\nfig.tight_layout()\nplt.show()","25be5d93":"def create_model():\n    input_layer = keras.Input((32, 32, 3))\n    \n    x = layers.Conv2D(\n        filters=32,\n        kernel_size=3,\n        strides=1,\n        padding='same')(input_layer)\n    x = layers.BatchNormalization()(x)\n    x = layers.LeakyReLU()(x)\n    \n    x = layers.Conv2D(\n        filters=32,\n        kernel_size=3,\n        strides=2,\n        padding='same')(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.LeakyReLU()(x)\n\n    x = layers.Conv2D(\n        filters=64,\n        kernel_size=3,\n        strides=1,\n        padding='same')(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.LeakyReLU()(x)\n    \n    x = layers.Conv2D(\n        filters=64,\n        kernel_size=3,\n        strides=2,\n        padding='same')(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.LeakyReLU()(x)\n    \n    x = layers.Flatten()(x)\n\n    x = layers.Dense(units=128)(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.LeakyReLU()(x)\n    x = layers.Dropout(rate=0.5)(x)\n    \n    x = layers.Dense(units=NUM_CLASSES)(x)\n    output_layer = layers.Activation('softmax')(x)\n\n    model = keras.Model(\n        inputs=input_layer, \n        outputs=output_layer, \n        name=\"cifar10_model\"\n    )\n    return model","267a73a4":"model = create_model()\nmodel.summary()","e3a85cf9":"opt = Adam(learning_rate=LEARNING_RATE)\nmodel.compile(\n    loss='categorical_crossentropy',\n    optimizer=opt,\n    metrics=['accuracy']\n)","b1930e06":"%%time\n\nmodel.fit(\n    X_train, \n    y_train, \n    validation_data=(X_test, y_test), \n    epochs=NUM_EPOCHS, \n    batch_size=BATCH_SIZE,\n    shuffle=True\n);","e5a13b11":"model.evaluate(X_test, y_test)","3395ef8b":"y_pred = model.predict(X_test)","b4215fcf":"pred_class = np.argmax(y_pred, axis=1)\npred_names = CLASS_NAMES[pred_class]\n\nactual_class = np.argmax(y_test, axis=1)\nactual_names = CLASS_NAMES[actual_class]","03294274":"indices = np.random.randint(0, X_test.shape[0], 100)\n\nfig, axes = plt.subplots(nrows=10, ncols=10, figsize=(20, 20))\nfor idx, ax in zip(indices, axes.flatten()):\n    \n    pred_name = pred_names[idx]\n    actual_name = actual_names[idx]\n    \n    ax.imshow(X_test[idx])\n    \n    color = 'black' if pred_class[idx] == actual_class[idx] else 'red'\n    ax.set_title(f'{actual_name} ({pred_name})', fontsize=12, color=color)\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n    \n    for pos in ['top', 'bottom', 'right', 'left']:\n        ax.spines[pos].set_edgecolor(color)\n\nfig.tight_layout()\nplt.show()","a7769ec9":"## Training the Classification Model","959b335b":"## Make predictions","3c7c235b":"## Compile the Model","55f0d7b9":"## Bild a Classification Model","2d1d1efd":"## Load CIFAR-10 data set","3f9b9548":"## Display 100 random images","cdfdf6cd":"## Overview\n\nIn this notebook, we implement a simple convolutional neural network (CNN) using the Keras framework. For this purpose, we apply the CIFAR-10 dataset, which consists of 32x32 color images from 10 categories.","f1bd022c":"## Imports & Confiuration","2eec0ae2":"### Normalization and One-Hot Encoding"}}