{"cell_type":{"89d08336":"code","bfd5e24d":"code","056364d7":"code","ee185d94":"code","b995e57d":"code","8ea6aed9":"code","ebfb6511":"code","761fd618":"code","66b4848b":"code","5cbfc695":"code","7a78019f":"code","22ee55a2":"code","1d965bf2":"code","61677dae":"code","57fd9fd8":"code","5bf3d734":"code","ed9ab79e":"code","1bcc79b5":"code","eeadbdee":"code","3e5614d9":"code","fca11b41":"code","f99b4ad4":"markdown","9586fd45":"markdown","79334fba":"markdown","acdd7a1e":"markdown","d8ee45e9":"markdown","7caef58d":"markdown","e86327e0":"markdown","31bbc627":"markdown","d1213c1e":"markdown","ceb97563":"markdown","0480a485":"markdown","8aaf7921":"markdown","afabb540":"markdown","73ad20c6":"markdown","4ecb4818":"markdown"},"source":{"89d08336":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split \n\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","bfd5e24d":"path = \"\/kaggle\/input\/tsf-datasets\/student_scores.csv\"\ndata = pd.read_csv(path)","056364d7":"data.head()","ee185d94":"data.shape","b995e57d":"data.columns","8ea6aed9":"data.info()","ebfb6511":"data.describe()","761fd618":"data.isna().sum()","66b4848b":"data.corr()","5cbfc695":"px.scatter(data,x=\"Hours\",y=\"Scores\",template=\"plotly_dark\")","7a78019f":"x= data.iloc[:,:-1].values\ny= data.iloc[:,1].values","22ee55a2":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2, random_state=0)","1d965bf2":"reg = LinearRegression()    # Creating a linear regression object\nreg.fit(x_train,y_train)","61677dae":"px.scatter(data,x=\"Hours\",y=\"Scores\",trendline='ols',template=\"plotly_dark\")","57fd9fd8":"reg.score(x_train,y_train)   # Score of our trained model","5bf3d734":"y_preds = reg.predict(x_test)","ed9ab79e":"compare = pd.DataFrame({\"Actual\":y_test,\"Predicted\":y_preds})\ncompare           # a dataframe to store values of y_test(Actual values from our dataset) and y_preds(Predicted values)","1bcc79b5":"from sklearn.metrics import mean_absolute_error,r2_score\nmean_absolute_error(y_test,y_preds)","eeadbdee":"r2_score(y_test,y_preds)     ","3e5614d9":"x_axis = range(len(y_test))","fca11b41":"plt.plot(x_axis,y_test, label='original')\nplt.plot(x_axis,y_preds, label='predicted')\nplt.legend()\nplt.show()","f99b4ad4":"## Plotting the data","9586fd45":"## Evaluating Our Model","79334fba":"Plotting our data to figure out which model is best suited.\n\nFrom the Scatter-Plot it is pretty clear that Linear Regression is the best Model for our data.","acdd7a1e":"## Loading the Dataset","d8ee45e9":"Please do check out my other notebooks\n- [Beginner : Simple Linear Regression](https:\/\/www.kaggle.com\/amartyanambiar\/beginner-simple-linear-regression)\n- [Beginner : Multiple Linear Regression](https:\/\/www.kaggle.com\/amartyanambiar\/beginner-multiple-linear-regression)","7caef58d":"## Prediction","e86327e0":"No null values","31bbc627":"## Conclusion\nWe created a Simple Linear Regression Model to predict the scores of a student on a basis of the hours spent to study for the examination. The Mean Absolute Error was low and r2_score of our model was high, which means that our model is working just fine.","d1213c1e":"The key take-aways are :\n- Max Score: 95 , Min Score: 17, Avg Score: 51.48\n- On an average, Students study around 5 hours","ceb97563":"Plotting the data with the regression line","0480a485":"Plotting the values to visualize how well our model works.","8aaf7921":"## Importing Libraries","afabb540":"## Understanding the Data","73ad20c6":"## Splitting Data","4ecb4818":"This function has given the correlation between Hours and Scores.It is cleary visible that they are highly correlated because closer the value is to 1 , higher is the correlation."}}