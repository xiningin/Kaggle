{"cell_type":{"bc57eca5":"code","b5b12a46":"code","c68b338d":"code","3facf058":"code","5ed9eeb2":"code","3627efc0":"code","a58bf957":"code","5b94ff58":"code","1e97012b":"code","4005b72c":"code","4125b90e":"code","1cb74385":"code","c887c377":"code","cab93b6c":"code","ee1fd52c":"code","9127b71d":"code","1895e4b8":"code","a4ad967e":"code","fcc61612":"code","f4d7fdb5":"code","0f3bee90":"code","4a1b5baa":"code","3500f744":"code","324fbc77":"code","5ee971cd":"code","eab5348c":"code","e5fce481":"code","7050b964":"code","8ebfbb7b":"code","9401ba74":"code","5dbef313":"code","89d5e3e7":"markdown","79e5576e":"markdown","36cee2ed":"markdown","352dc227":"markdown","67441944":"markdown","0dc87357":"markdown","ff7418a7":"markdown","122dc37e":"markdown","7fa1f452":"markdown"},"source":{"bc57eca5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5b12a46":"import pandas as pd\nimport numpy as np\nimport glob","c68b338d":"glob.glob('..\/input\/iris\/*')","3facf058":"df = pd.read_csv('..\/input\/iris\/Iris.csv')\ndf","5ed9eeb2":"df['SpealArea'] = df['SepalLengthCm'] * df['SepalWidthCm']\ndf['PetalArea'] = df['PetalLengthCm'] * df['PetalWidthCm']","3627efc0":"df","a58bf957":"import seaborn as sns","5b94ff58":"sns.pairplot(df, hue='Species')","1e97012b":"from sklearn.model_selection import train_test_split","4005b72c":"features = [i for i in df.columns if i != 'Species']\npredicts = 'Species'","4125b90e":"X = df[features].values\ny = df[predicts]","1cb74385":"X","c887c377":"y","cab93b6c":"from sklearn.preprocessing import LabelEncoder","ee1fd52c":"y = LabelEncoder().fit_transform(y)","9127b71d":"y","1895e4b8":"from sklearn.preprocessing import MinMaxScaler","a4ad967e":"X = MinMaxScaler().fit_transform(X)","fcc61612":"Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size=1\/3, random_state=42)","f4d7fdb5":"Xtrain","0f3bee90":"Xtest","4a1b5baa":"ytrain","3500f744":"ytest","324fbc77":"Xtrain.shape, ytrain.shape","5ee971cd":"Xtest.shape, ytest.shape","eab5348c":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier","e5fce481":"from sklearn import metrics","7050b964":"class Model:\n    def __init__(self, name, model):\n        self.name = name\n        self.model = model\n        self.isfit = False\n        self.ismetrics = False\n    \n    def fit(self, X, y):\n        self.isfit = True\n        return self.model.fit(X, y)\n        \n    \n    def accuracy_score(self, X, y):\n        self.ismetrics = True\n        ypredict = self.model.predict(X)\n        self.acc = metrics.accuracy_score(y, ypredict)\n        return self.acc\n\n    def __repr__(self):\n        if self.isfit == False:\n            return '<({}, Not train yet)>'.format(self.name)\n        if self.ismetrics == False:\n            return '<({}, Trained)'.format(self.name)\n        return '<({}, {:.2f}%)>'.format(self.name, self.acc)","8ebfbb7b":"models = [Model('Random Forest', RandomForestClassifier()), Model('Support Vector Machine', SVC()), Model('K Nearest Neighbors', KNeighborsClassifier())]\nmodels","9401ba74":"for i in range(len(models)):\n    models[i].fit(Xtrain, ytrain)\n    models[i].accuracy_score(Xtest, ytest)","5dbef313":"models","89d5e3e7":"# Modeling","79e5576e":"# Split train and test","36cee2ed":"# Conclusion\n\n| Id | Name | Accuracy |\n| -- | ---- | -------- |\n| 1 | Random Forest | 100% |\n| 2 | Support Vector Machine | 100% |\n| 3 | K Nearest Neighbors | 100% |\n\n- This Iris Dataset is so small, get 100% is not a challenge.","352dc227":"# Scale values to range [0, 1] aka. Normalization","67441944":"# Split X and y","0dc87357":"X.shape, y.shape","ff7418a7":"# Overview Data","122dc37e":"# Label encoder the `Species` column","7fa1f452":"from sklearn.model_selection import train_test_split"}}