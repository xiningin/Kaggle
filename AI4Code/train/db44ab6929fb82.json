{"cell_type":{"66617a86":"code","d56bb2d1":"code","c447e833":"code","5068c905":"code","c860a9b3":"code","0d7c88be":"code","0ca49237":"code","bd5ec46b":"code","db795192":"code","f04034dc":"code","78a4af24":"code","383cdf56":"markdown","fcbf097e":"markdown","3bc185bb":"markdown","d34506f7":"markdown","2c278480":"markdown","27501d7d":"markdown","09a85e93":"markdown","c4710731":"markdown"},"source":{"66617a86":"import numpy as np\nimport pandas as pd\nimport plotly\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport matplotlib.pyplot as plt\nimport folium\nimport warnings\npy.init_notebook_mode()\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.metrics import r2_score\nfrom scipy.optimize import curve_fit","d56bb2d1":"#load data\npatient_path = \"..\/input\/coronavirusdataset\/PatientInfo.csv\"\ntime_path = \"..\/input\/coronavirusdataset\/Time.csv\"\nroute_path = \"..\/input\/coronavirusdataset\/PatientRoute.csv\"\n\ndf_route = pd.read_csv(route_path)\ndf_all_cases = pd.read_csv(time_path)\ndf_patients = pd.read_csv(patient_path)","c447e833":"\n\n\ndf_all_cases['date'] = pd.to_datetime(df_all_cases['date'])\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df_all_cases['date'], y=df_all_cases['test'], fill='tozeroy',name='total tests')) # fill down to xaxis\nfig.add_trace(go.Scatter(x=df_all_cases['date'], y=df_all_cases['negative'], fill='tozeroy',name='negative test')) # fill down to xaxis\nfig.add_trace(go.Scatter(x=df_all_cases['date'], y=df_all_cases['confirmed'], fill='tozeroy',name='positive test')) # fill down to xaxis\nfig.update_layout(\n    title = \"Covid19 tests\",\n    #xaxis_range = [0,5.2],\n    #yaxis_range = [0,3],\n    yaxis_title=\"number of cases\",\n    font=dict(\n        family=\"Arial, monospace\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n)\npy.iplot(fig)\n\n\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df_all_cases['date'], y=df_all_cases['released'], fill='tozeroy',name='released')) # fill down to xaxis\nfig.add_trace(go.Scatter(x=df_all_cases['date'], y=df_all_cases['deceased'], fill='tozeroy',name='deceased')) # fill down to xaxis\nfig.update_layout(\n    title = \"Released and deceased over time\",\n    #xaxis_range = [0,5.2],\n    #yaxis_range = [0,3],\n    yaxis_title=\"number of cases\",\n    font=dict(\n        family=\"Arial, monospace\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n)\npy.iplot(fig)\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df_all_cases['date'], y=np.round(100*df_all_cases['deceased']\/df_all_cases['released'],2), fill='tozeroy',name='ratio')) # fill down to xaxis\nfig.update_layout(\n    title = \"Ratio of deceased\/released\",\n    #xaxis_range = [0,5.2],\n    #yaxis_range = [0,3],\n    yaxis_title=\"deceased\/released %\",\n    font=dict(\n        family=\"Arial, monospace\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n)\npy.iplot(fig)\n\n\n\n\n\n\n\n\n\n","5068c905":"\ndf_patients['Age'] = None\nfor i in range(df_patients.shape[0]):\n    if df_patients.birth_year.index[i] in df_patients[df_patients.birth_year.notna()].index:\n        if  df_patients.birth_year.iloc[i] !=' ':\n            df_patients['Age'].iloc[i] = 2020 - float(df_patients.birth_year.iloc[i])\n\ndf_recovered = df_patients[df_patients['state']=='released']\ndf_deceased = df_patients[df_patients['state']=='deceased']","c860a9b3":"df_patients","0d7c88be":"\n\nfig = px.pie( values=df_patients.groupby(['infection_case']).size().values,names=df_patients.groupby(['infection_case']).size().index)\nfig.update_layout(\n    title = \"Possible infection reason\",\n    font=dict(\n        family=\"Arial, monospace\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n    )   \n    \npy.iplot(fig)","0ca49237":"fig = px.histogram(df_patients[df_patients.Age.notna()],x=\"Age\",marginal=\"box\",nbins=20)\nfig.update_layout(\n    title = \"number of confirmed cases by age group\",\n    xaxis_title=\"Age\",\n    yaxis_title=\"number of cases\",\n    barmode=\"group\",\n    bargap=0.1,\n    xaxis = dict(\n        tickmode = 'linear',\n        tick0 = 0,\n        dtick = 10),\n    font=dict(\n        family=\"Arial, monospace\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n    )\npy.iplot(fig)\n\n\nfig = px.pie( values=df_patients.groupby(['sex']).size().values,names=df_patients.groupby(['sex']).size().index)\nfig.update_layout(\n    title = \"Sex distribuition of confirmed cases\",\n    font=dict(\n        family=\"Arial, monospace\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n    )   \n    \npy.iplot(fig)\n\ndf_patients_aux = df_patients[df_patients.Age.notna()]\ndf_patients_aux=df_patients_aux[df_patients_aux.sex.notna()]\n#df_patients_aux=df_patients_aux.sex.notna()\nfig = px.histogram(df_patients_aux,x=\"Age\",color=\"sex\",marginal=\"box\",opacity=1,nbins=20)\nfig.update_layout(\n    title = \"number of confirmed cases by age group and sex\",\n    xaxis_title=\"Age\",\n    yaxis_title=\"number of cases\",\n    barmode=\"group\",\n    xaxis = dict(\n        tickmode = 'linear',\n        tick0 = 0,\n        dtick = 10),\n    font=dict(\n        family=\"Arial, monospace\",\n        size=15,\n        color=\"#7f7f7f\"\n    ))\npy.iplot(fig)\n\n\n\n","bd5ec46b":"df_deceased_and_recovered = pd.concat([df_deceased,df_recovered])\nfig = px.histogram(df_deceased_and_recovered,x=\"Age\",color=\"state\",marginal=\"box\",nbins=10)\nfig.update_layout(\n    title = \"Recovered and deceased patients by age group\",\n    xaxis_title=\"Age\",\n    yaxis_title=\"number of cases\",\n    xaxis = dict(\n        tickmode = 'linear',\n        tick0 = 0,\n        dtick = 10),\n    bargap=0.2,\n    barmode=\"group\",\n    xaxis_range = [0,100],\n    font=dict(\n        family=\"Arial, monospace\",\n        size=15,\n        color=\"#7f7f7f\"\n    ))\npy.iplot(fig)","db795192":"\ndf_deceased.drop(index=df_deceased[df_deceased.Age.isna()].index,inplace=True)\ndf_deceased.drop(index=df_deceased[df_deceased.sex.isna()].index,inplace=True)\n\n\ndf_recovered.drop(index=df_recovered[df_recovered.Age.isna()].index,inplace=True)\ndf_recovered.drop(index=df_recovered[df_recovered.sex.isna()].index,inplace=True)\n\n\n","f04034dc":"fig = px.histogram(df_recovered,x=\"Age\",color=\"sex\",marginal=\"box\",nbins=10)\nfig.update_layout(\n    title = \"recovered patients by age and sex\",\n    xaxis_title=\"Age\",\n    yaxis_title=\"number of cases\",\n    xaxis = dict(\n        tickmode = 'linear',\n        tick0 = 0,\n        dtick = 10),\n    bargap=0.2,\n    barmode=\"group\",\n    xaxis_range = [0,100],\n    font=dict(\n        family=\"Arial, monospace\",\n        size=15,\n        color=\"#7f7f7f\"\n    ))\npy.iplot(fig)\n\n\nfig = px.histogram(df_deceased,x=\"Age\",color=\"sex\",marginal=\"box\",nbins=10)\nfig.update_layout(\n    title = \"deceased patients by age and sex\",\n    xaxis_title=\"Age\",\n    yaxis_title=\"number of cases\",\n    xaxis = dict(\n        tickmode = 'linear',\n        tick0 = 0,\n        dtick = 10),\n    bargap=0.2,\n    barmode=\"group\",\n    xaxis_range = [0,100],\n    font=dict(\n        family=\"Arial, monospace\",\n        size=15,\n        color=\"#7f7f7f\"\n    ))\npy.iplot(fig)","78a4af24":"df_deceased_and_recovered['time_lenght_to_recover_or_dead']= None\nfor i in range(df_deceased_and_recovered.shape[0]):\n    if df_deceased_and_recovered['state'].iloc[i] == 'deceased':\n        df_deceased_and_recovered['time_lenght_to_recover_or_dead'].iloc[i] = (pd.to_datetime(df_deceased_and_recovered['deceased_date'].iloc[i])- pd.to_datetime(df_deceased_and_recovered['confirmed_date'].iloc[i])).days\n    if df_deceased_and_recovered['state'].iloc[i] == 'released':\n        df_deceased_and_recovered['time_lenght_to_recover_or_dead'].iloc[i] = ( pd.to_datetime(df_deceased_and_recovered['released_date'].iloc[i]) - pd.to_datetime(df_deceased_and_recovered['confirmed_date'].iloc[i])).days\n     \n\n\nfig = px.histogram(df_deceased_and_recovered,x=\"time_lenght_to_recover_or_dead\",color=\"state\",marginal=\"box\",nbins=10)\nfig.update_layout(\n    title = \"Time do recovery\/dead after confirmatition\",\n    xaxis_title=\"Days after confirmation\",\n    yaxis_title=\"number of cases\",\n    xaxis = dict(\n        tickmode = 'linear',\n        tick0 = -10,\n        dtick = 5),\n    bargap=0.2,\n    barmode=\"group\",\n    xaxis_range = [-5,40],\n    font=dict(\n        family=\"Arial, monospace\",\n        size=15,\n        color=\"#7f7f7f\"\n    ))\npy.iplot(fig)","383cdf56":"### Infection reason\n\n","fcbf097e":"# Covid-19 outbreak South Korea - Interactive Data Exploration using Plotly\n\n## Context\nIn this notebook we do data exploration and visualization on patients infected with Covid-19 in South Korea. Visualizations are produced with Plotly.\n\n#### What is a coronavirus?\nCoronaviruses are a large family of viruses which may cause illness in animals or humans.  In humans, several coronaviruses are known to cause respiratory infections ranging from the common cold to more severe diseases such as Middle East Respiratory Syndrome (MERS) and Severe Acute Respiratory Syndrome (SARS). The most recently discovered coronavirus causes coronavirus disease COVID-19.\n\n#### What is COVID-19?\nCOVID-19 is the infectious disease caused by the most recently discovered coronavirus. This new virus and disease were unknown before the outbreak began in Wuhan, China, in December 2019.\n\n__COVID-19 has infected more than 7000 people in South Korea.__\nKCDC (Korea Centers for Disease Control & Prevention) announces the information of COVID-19 quickly and transparently.\nWe make a structured dataset based on the report materials of KCDC and local governments.\n\n## Motivation\n\nMost data reports only show data regarding the total number of confirmed, recovered and deceased patients. Here, the dataset includes details about gender and age as well recovery date and deceased date. This aditional features allow us to get more detailed insights about the outbreak.\n\n","3bc185bb":"## Demographics analysis\n\nDemographics data is not available for the total number of confirmed cases. \n\n* For 1557 cases, age was reported. \n* For 1821 cases, sex was reported\n\n* The median age of reported cases is 45 years old (min 0; max 104). <br\/>\n* 43.8% of confirmed cases are male and 56.2% are female. <br\/>\n* The median age of confirmed cases is 48 for females and 40 for males. <br\/>\n\n","d34506f7":"## Number of tests, confirmed cases, deceased and recovered patients","2c278480":"## Acknowledgements\n\n* DS4C (Data Science for COVID-19) Project \n* KCDC (Korea Centers for Disease Control & Prevention)\n\n## Data sources\nDS4C (Data Science for COVID-19) Project\n\nTo reprocess information provided by KCDC and local governments for easy data analysis\nTo find meaningful patterns by applying various machine learning or visualization techniques\nProject Manager\nJihoo Kim (datartist)\nProject Leader\nSeojin Jang (Seojin Jang)\nSeonghan Ryoo (incastle)\nYeonjun In (Y.J)\nProject Engineer\nKyeongwook Jang (Jeeu)\nBoyoung Song (bysong)\nWoncheol Lee (LeeWonCheol)\nWansik Choi (wansik choi)\nTaehyeong Park (2468ab)\nSangwook Park (Simon Park)\nJuhwan Park (JuHwan-Park)\nMinseok Jung (msjung)\nYouna Jung (You Na Jung)\nLogo Designer\nRinchong Kim\nGithub Repository\n\nworking with Big Leader and SK Telecom.\nsponsored by Google Korea (Soonson Kwon)\n\nhttps:\/\/www.kaggle.com\/kimjihoo\/coronavirusdataset","27501d7d":"* Median age of recovered patients of female gender is 45, and 36 in males.\n* Median age of deceased patients of female gender is 85, and 73 in males.","09a85e93":"* Median age of recovered patients is 42, while the median age for deceased patients is 77. __Apparently, higher death rates are linked to older patients. Higher recovery rates, are linked to younger patients.__","c4710731":"#### For cases with an outcome, we calculated the time between confirmation and the outcome (released\/deceased). <br\/>\n\n* The median time after confirmation for recovery is 21 days.\n* The median time after confirmation for deceased cases is 5 days. \n\nThis analysis is highly dependent on how much in advance the cases are detected."}}