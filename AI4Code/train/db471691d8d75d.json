{"cell_type":{"0b513740":"code","d89f120f":"code","d01ee0e7":"code","b83bae02":"code","2c831a98":"code","018a0c67":"code","c5105e4f":"code","0034aad3":"code","85e860ea":"code","16fb6bdf":"code","9cd48967":"code","03063c43":"code","e920ffe8":"code","8d5c0d05":"code","18487173":"code","871a91b0":"code","1b1ab5de":"code","fed61993":"code","79bfd9f1":"code","a8137897":"code","a72a5c72":"code","c8fe5d8f":"code","e104febc":"code","b01d833c":"code","10916719":"code","feba386c":"code","9a6c6168":"code","5d7a4498":"code","eec40a1a":"code","6b124e46":"markdown","52acbabf":"markdown","af2998a3":"markdown","9e24a51b":"markdown","213a4ceb":"markdown","eef19258":"markdown","bd905d51":"markdown","b31470ad":"markdown","3111de77":"markdown","74b746ae":"markdown","55c1b4ef":"markdown","97ec570c":"markdown","b8b5c1d8":"markdown","8ed02d68":"markdown","92229124":"markdown","59833981":"markdown"},"source":{"0b513740":"print(14 * \" >\", \"\\t n.B.a. \\t\", \"< \" * 14, \"\\n\\n\\n\")\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt \nfrom collections import Counter\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# plotly\n# import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nimport warnings            \nwarnings.filterwarnings(\"ignore\") \n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nplt.style.use('ggplot') # style of plots. ggplot is one of the most used style, I also like it.\n# Any results you write to the current directory are saved as output.\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d89f120f":"timesData1 = pd.read_csv(\"..\/input\/world-happiness\/2015.csv\")\ntimesData1[\"year\"]= 2015\ntimesData1.columns","d01ee0e7":"timesData1.rename(columns={'Dystopia Residual': 'Dystopia_Residual', 'Economy (GDP per Capita)': 'Economy_GDP_per_Capita', 'Happiness Rank': 'Happiness_Rank', 'Happiness Score': 'Happiness_Score', 'Health (Life Expectancy)': 'Health(Life_Expectancy)', 'Lower Confidence Interval': 'Lower_Confidence_Interval', 'Standard Error': 'Standard_Error', 'Trust (Government Corruption)': 'Trust(Government_Corruption)'}, inplace=True)","b83bae02":"\ntimesData2 = pd.read_csv(\"..\/input\/world-happiness\/2016.csv\")\ntimesData2[\"year\"]= 2016\n# timesData2\ntimesData2.columns","2c831a98":"timesData2.rename(columns={'Dystopia Residual': 'Dystopia_Residual', 'Economy (GDP per Capita)': 'Economy_GDP_per_Capita', 'Happiness Rank': 'Happiness_Rank', 'Happiness Score': 'Happiness_Score', 'Health (Life Expectancy)': 'Health(Life_Expectancy)', 'Upper Confidence Interval': 'Upper_Confidence_Interval', 'Lower Confidence Interval': 'Lower_Confidence_Interval', 'Standard Error': 'Standard_Error', 'Trust (Government Corruption)': 'Trust(Government_Corruption)'}, inplace=True)","018a0c67":"timesData2.columns","c5105e4f":"timesData3 = pd.read_csv(\"..\/input\/world-happiness\/2017.csv\")\ntimesData3[\"year\"]= 2017\n# timesData3\ntimesData3.columns","0034aad3":"timesData3.rename(columns={'Dystopia.Residual': 'Dystopia_Residual', 'Economy..GDP.per.Capita.': 'Economy_GDP_per_Capita', 'Happiness.Rank': 'Happiness_Rank', 'Happiness.Score': 'Happiness_Score', 'Health..Life.Expectancy.': 'Health(Life_Expectancy)', 'Trust..Government.Corruption.': 'Trust(Government_Corruption)'}, inplace=True)","85e860ea":"timesData3.columns","16fb6bdf":"\nhappinessData = pd.concat([timesData1,timesData2,timesData3])\nhappinessData.head()","9cd48967":"happinessData.info()","03063c43":"# prepare data frame\ndf = happinessData.iloc[:100,:]                             # dataframe ilk 100 uzerinden alindi!!!!\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.Happiness_Rank,                         # dataframe de sutun isimleri birebir\n                    y = df.Generosity,\n                    mode = \"lines\",\n                    name = \"Generosity\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df.Country)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.Happiness_Rank,\n                    y = df.Happiness_Score,\n                    mode = \"lines+markers\",\n                    name = \"Happiness_Score\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),    #isaretleme noktalama renkleri ve saydamligi 0.8 olacak\n                    text= df.Country)                          #grafikte uzerinde gelince isim gorunsun diye kullaniliyor\ndata = [trace1, trace2]\nlayout = dict(title = 'Generosity and Happiness Score vs World Rank of Top 100 Happiness Country',\n              xaxis= dict(title= 'Happiness_Rank',ticklen= 5,zeroline= False)      #zeroline sifirdan baslamak gosterilsin mi?\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","e920ffe8":"# prepare data frames\ndf2015 = happinessData[happinessData.year == 2015].iloc[:100,:]             # 2014 2015 2016 ilk 100 al\ndf2016 = happinessData[happinessData.year == 2016].iloc[:100,:]\ndf2017 = happinessData[happinessData.year == 2017].iloc[:100,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go                              # go burada modul ismi olarak adlandirildi\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df2015.Happiness_Rank,\n                    y = df2015.Generosity,\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df2015.Country)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df2016.Happiness_Rank,\n                    y = df2016.Generosity,\n                    mode = \"markers\",\n                    name = \"2016\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df2016.Country)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = df2017.Happiness_Rank,\n                    y = df2017.Generosity,\n                    mode = \"markers\",\n                    name = \"2017\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= df2017.Country)\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Generosity vs Happiness_Rank of top 100 Countries with 2015, 2016 and 2017 years',\n              xaxis= dict(title= 'Happiness_Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Generosity',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","8d5c0d05":"# prepare data frames\ndf2015 = happinessData[happinessData.year == 2015].iloc[:3,:]\ndf2015","18487173":"# prepare data frames\ndf2015 = happinessData[happinessData.year == 2015].iloc[:3,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = df2015.Country,\n                y = df2015.Generosity,\n                name = \"Generosity\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2015.Region)\n# create trace2 \ntrace2 = go.Bar(\n                x = df2015.Country,\n                y = df2015.Happiness_Rank,\n                name = \"Happiness_Rank\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2015.Region)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","871a91b0":"# prepare data frames\ndf2015 = happinessData[happinessData.year == 2015].iloc[:3,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\nx = df2015.Country\n\ntrace1 = {\n  'x': x,\n  'y': df2015.Generosity,\n  'name': 'Generosity',\n  'type': 'bar'\n};\ntrace2 = {\n  'x': x,\n  'y': df2015.Happiness_Score,\n  'name': 'Happiness_Score',\n  'type': 'bar'\n};\ndata = [trace1, trace2];\nlayout = {\n  'xaxis': {'title': 'Top 3 countries'},\n  'barmode': 'relative',\n  'title': 'Generosity and Happiness_Rank of top 3 countries in 2015'\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","1b1ab5de":"# import graph objects as \"go\" and import tools\nimport plotly.graph_objs as go\nfrom plotly import tools\nimport matplotlib.pyplot as plt\n# prepare data frames\ndf2016 = happinessData[happinessData.year == 2016].iloc[:7,:]\n\ny_saving = [each for each in df2016.Freedom]\ny_net_worth  = [float(each) for each in df2016.Economy_GDP_per_Capita]\nx_saving = [each for each in df2016.Country]\nx_net_worth  = [each for each in df2016.Country]\ntrace0 = go.Bar(\n                x=y_saving,\n                y=x_saving,\n                marker=dict(color='rgba(171, 50, 96, 0.6)',line=dict(color='rgba(171, 50, 96, 1.0)',width=1)),\n                name='Freedom',\n                orientation='h',\n)\ntrace1 = go.Scatter(\n                x=y_net_worth,\n                y=x_net_worth,\n                mode='lines+markers',\n                line=dict(color='rgb(63, 72, 204)'),\n                name='Economy(GDP_per_Capita)',\n)\nlayout = dict(\n                title='Generosity and Economy(GDP_per_Capita)',\n                yaxis=dict(showticklabels=True,domain=[0, 0.85]),\n                yaxis2=dict(showline=True,showticklabels=False,linecolor='rgba(102, 102, 102, 0.8)',linewidth=2,domain=[0, 0.85]),\n                xaxis=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0, 0.42]),\n                xaxis2=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0.47, 1],side='top',dtick=25),\n                legend=dict(x=0.029,y=1.038,font=dict(size=10) ),\n                margin=dict(l=200, r=20,t=70,b=70),\n                paper_bgcolor='rgb(248, 248, 255)',\n                plot_bgcolor='rgb(248, 248, 255)',\n)\nannotations = []\ny_s = np.round(y_saving, decimals=2)             #decimal 2 basamakli round ettir\ny_nw = np.rint(y_net_worth)\n\n# Adding labels\nfor ydn, yd, xd in zip(y_nw, y_s, x_saving):\n    # labeling the scatter savings\n    annotations.append(dict(xref='x2', yref='y2', y=xd, x=ydn - 4,text='{:,}'.format(ydn),font=dict(family='Arial', size=12,color='rgb(63, 72, 204)'),showarrow=False))\n    # labeling the bar net worth\n    annotations.append(dict(xref='x1', yref='y1', y=xd, x=yd + 3,text=str(yd),font=dict(family='Arial', size=12,color='rgb(171, 50, 96)'),showarrow=False))\n\nlayout['annotations'] = annotations\n\n# Creating two subplots\nfig = tools.make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_xaxes=True,\n                          shared_yaxes=False, vertical_spacing=0.001)\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\nfig['layout'].update(layout)\niplot(fig)","fed61993":"# data preparation\ndf2017 = happinessData[happinessData.year == 2017].iloc[:7,:]\n# df2016\n# burda num_students te ',' kullanilmis ve bunlari '.' ile degistirmemiz gerekiyor.\n\n#Replace yapiyoruz\npie1 = df2017.Freedom\n# pie1_list = [float(each.replace(',', '.')) for each in df2017.Freedom]  # str(2,4) => str(2.4) = > float(2.4) = 2.4\nlabels = df2017.Country","79bfd9f1":"# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Freedom Of Countries\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,                                   # simit seklinde gostermek icin\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Countries rate of Freedom\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Freedom rate\",\n                \"x\": 0.135,\n                \"y\": 1.1\n            },\n        ]\n    }\n}\niplot(fig)","a8137897":"df2017.info()","a72a5c72":"# data preparation: buradada ',' ile '.' arasinda replace yaparak datamizi duzenleyelim\n\ndf2017 = happinessData[happinessData.year == 2017].iloc[:20,:]                 #ilk 20 degeri aldik\nHappiness_size  = [float(each) for each in df2017.Happiness_Score]\nDystopia_Residual_color = [float(each) for each in df2017.Dystopia_Residual]\ndata = [\n    {\n        'y': df2017.Happiness_Score,\n        'x': df2017.Happiness_Rank,\n        'mode': 'markers',\n        'marker': {\n            'color': Dystopia_Residual_color,\n            'size': Happiness_size,\n            'showscale': True\n        },\n        \"text\" :  df2017.Country    \n    }\n]\niplot(data)\n","c8fe5d8f":"# prepare data\nx2015 = happinessData.Family[happinessData.year == 2015]\nx2017 = happinessData.Family[happinessData.year == 2017]\n\ntrace1 = go.Histogram(\n    x=x2015,\n    opacity=0.75,\n    name = \"2015\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=x2017,\n    opacity=0.75,\n    name = \"2017\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',                           # overlay ustuste sutunlari cizdirme yapiyor\n                   title=' Family ratio in 2015 and 2017',\n                   xaxis=dict(title='Family ratio'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","e104febc":"from wordcloud import WordCloud           # Degerlendirmeler yapilsin hangi daha coksa ve o ulkedeyse ona gore kelimeleri buyuk yapsin!\n\n# data prepararion\nx2017 = happinessData.Country[happinessData.year == 2017]\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(background_color='white', width=512, height=384).generate(\" \".join(x2017))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","b01d833c":"# data preparation\nx2015 = happinessData[happinessData.year == 2015]\n\ntrace0 = go.Box(\n    y=x2015.Happiness_Score,\n    name = 'Happiness_Score of Countries in 2015',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=x2015.Family,\n    name = 'Family of Countries in 2015',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","10916719":"# import figure factory\nimport plotly.figure_factory as ff\n# prepare data\ndataframe = happinessData[happinessData.year == 2015]\ndata2015 = dataframe.loc[:,[\"Family\",\"Dystopia_Residual\", \"Happiness_Score\"]]\ndata2015[\"index\"] = np.arange(1,len(data2015)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data2015, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","feba386c":"# first line plot\ntrace1 = go.Scatter(\n    x=dataframe.Happiness_Rank,\n    y=dataframe.Generosity,\n    name = \"Generosity\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=dataframe.Happiness_Rank,\n    y=dataframe.Economy_GDP_per_Capita,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Economy_GDP_per_Capita\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Economy_GDP_per_Capita and Generosity vs Happiness_rank of Countries'\n\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","9a6c6168":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=dataframe.Happiness_Rank,\n    y=dataframe.Family,\n    z=dataframe.Generosity,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(18, 255, 253)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","5d7a4498":"trace1 = go.Scatter(\n    x=dataframe.Happiness_Rank,\n    y=dataframe.Family,\n    name = \"Family\"\n)\ntrace2 = go.Scatter(\n    x=dataframe.Happiness_Rank,\n    y=dataframe.Generosity,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Generosity\"\n)\ntrace3 = go.Scatter(\n    x=dataframe.Happiness_Rank,\n    y=dataframe.Economy_GDP_per_Capita,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"Economy_GDP_per_Capita\"\n)\ntrace4 = go.Scatter(\n    x=dataframe.Happiness_Rank,\n    y=dataframe.Happiness_Score,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"Happiness_Score\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Family, Generosity, Economy_GDP_per_Capita and Happiness_Score VS World Rank of Countries'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","eec40a1a":"happinessData.head()","6b124e46":"\n# Inset Plots\n\nInset Matrix = 2 plots are in one frame\n","52acbabf":"# Histogram\n\nLets look at histogram of Family ratio in 2015 and 2017 years.","af2998a3":"# Third Bar Charts Example: \nHorizontal bar charts. (style3) Generosity vs Freedom for countries","9e24a51b":"# Bubble Charts\n\nBubble Charts Example: Countries Happiness rank (first 20) vs Happiness score and Dystopia_Residual (color) in 2017","213a4ceb":"\n# Multiple Subplots\n\nMultiple Subplots: While comparing more than one features, multiple subplots can be useful.\n","eef19258":"# Scatter\n\nScatter Example: Generosity and Happiness Score vs World Happiness Report with 2015, 2016 and 2017 years","bd905d51":"Visually I tried to show the World Happiness map. I hope the visuals help you with your work. See you on my next job.\n\n### PS: Don't forget to post a comment and Upvote, please!","b31470ad":"# Bar Charts\n\nFirst Bar Charts Example: Generosity and Happiness_Rank of top 3 Countries in 2015 (style1)","3111de77":"# Word Cloud\n\nEvaluations should be made, whichever is more and if it is in that country, make the words bigger according to it!\n\nNot a pyplot but learning it is good for visualization. Lets look at which country is mentioned most in 2017.","74b746ae":"# 3D Scatter Plot with Colorscaling\n\n3D Scatter: Sometimes 2D is not enough to understand data. Therefore adding one more dimension increase the intelligibility of the data. Even we will add color that is actually 4th dimension.","55c1b4ef":"# Box Plots\n\n- Median (50th percentile) = middle value of the data set. Sort and take the data in the middle. It is also called 50% percentile that is 50% of data are less that median(50th quartile)(quartile)\n    - 25th percentile = quartile 1 (Q1) that is lower quartile\n    - 75th percentile = quartile 3 (Q3) that is higher quartile\n    - height of box = IQR = interquartile range = Q3-Q1\n    - Whiskers = 1.5 * IQR from the Q1 and Q3\n    - Outliers = being more than 1.5*IQR away from median commonly.\n\n    trace = box\n        y = data we want to visualize with box plot\n        marker = color","97ec570c":"# Second Bar Charts Example(Another way to alternate drawing): \nGenerosity and Happiness_Rank of top 3 countries in 2015 (style2) Actually, if you change only the barmode from group to relative in previous example, you achieve what we did here. However, for diversity I use different syntaxes.","b8b5c1d8":"![afbeelding.png](attachment:afbeelding.png)\n\n\n## Context\n\nThe World Happiness Report is a landmark survey of the state of global happiness. The first report was published in 2012, the second in 2013, the third in 2015, and the fourth in the 2016 Update. The World Happiness 2017, which ranks 155 countries by their happiness levels, was released at the United Nations at an event celebrating International Day of Happiness on March 20th. The report continues to gain global recognition as governments, organizations and civil society increasingly use happiness indicators to inform their policy-making decisions. Leading experts across fields \u2013 economics, psychology, survey analysis, national statistics, health, public policy and more \u2013 describe how measurements of well-being can be used effectively to assess the progress of nations. The reports review the state of happiness in the world today and show how the new science of happiness explains personal and national variations in happiness.\n\n\n## Content\n\nThe happiness scores and rankings use data from the Gallup World Poll. The scores are based on answers to the main life evaluation question asked in the poll. This question, known as the Cantril ladder, asks respondents to think of a ladder with the best possible life for them being a 10 and the worst possible life being a 0 and to rate their own current lives on that scale. The scores are from nationally representative samples for the years 2013-2016 and use the Gallup weights to make the estimates representative. The columns following the happiness score estimate the extent to which each of six factors \u2013 economic production, social support, life expectancy, freedom, absence of corruption, and generosity \u2013 contribute to making life evaluations higher in each country than they are in Dystopia, a hypothetical country that has values equal to the world\u2019s lowest national averages for each of the six factors. They have no impact on the total score reported for each country, but they do explain why some countries rank higher than others.\nInspiration\n\nWhat countries or regions rank the highest in overall happiness and each of the six factors contributing to happiness? How did country ranks or scores change between the 2015 and 2016 as well as the 2016 and 2017 reports? Did any country experience a significant increase or decrease in happiness?\n\n\n## What is Dystopia?\n\nDystopia is an imaginary country that has the world\u2019s least-happy people. The purpose in establishing Dystopia is to have a benchmark against which all countries can be favorably compared (no country performs more poorly than Dystopia) in terms of each of the six key variables, thus allowing each sub-bar to be of positive width. The lowest scores observed for the six key variables, therefore, characterize Dystopia. Since life would be very unpleasant in a country with the world\u2019s lowest incomes, lowest life expectancy, lowest generosity, most corruption, least freedom and least social support, it is referred to as \u201cDystopia,\u201d in contrast to Utopia.\n\n\n## What are the residuals?\n\nThe residuals, or unexplained components, differ for each country, reflecting the extent to which the six variables either over- or under-explain average 2014-2016 life evaluations. These residuals have an average value of approximately zero over the whole set of countries. Figure 2.2 shows the average residual for each country when the equation in Table 2.1 is applied to average 2014- 2016 data for the six variables in that country. We combine these residuals with the estimate for life evaluations in Dystopia so that the combined bar will always have positive values. As can be seen in Figure 2.2, although some life evaluation residuals are quite large, occasionally exceeding one point on the scale from 0 to 10, they are always much smaller than the calculated value in Dystopia, where the average life is rated at 1.85 on the 0 to 10 scale.\n\n\n## What do the columns succeeding the Happiness Score(like Family, Generosity, etc.) describe?\n\nThe following columns: GDP per Capita, Family, Life Expectancy, Freedom, Generosity, Trust Government Corruption describe the extent to which these factors contribute in evaluating the happiness in each country.\nThe Dystopia Residual metric actually is the Dystopia Happiness Score(1.85) + the Residual value or the unexplained value for each country as stated in the previous answer.\n\nIf you add all these factors up, you get the happiness score so it might be un-reliable to model them to predict Happiness Scores.","8ed02d68":"# Line Charts\n\nLine Charts Example: Generosity and Happiness Score vs World Happiness Report","92229124":"# Scatter Matrix Plots\n\nScatter Matrix = it helps us to see covariance and relation between more than 2 features","59833981":"# Pie Charts\n\nPie Charts Example: Freedom rate of top 7 countries in 2017"}}