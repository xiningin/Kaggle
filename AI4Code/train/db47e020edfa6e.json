{"cell_type":{"62a882eb":"code","e6d68903":"code","8242ced3":"code","2fa721d2":"code","aea2c68c":"code","a89e6888":"code","7d9842e8":"code","c08b95fd":"code","63511567":"code","d5b436a6":"code","8fa90ec3":"code","525dd9f3":"code","9ec0c8fa":"code","b9aaf674":"code","2523c587":"code","e97954ba":"code","d9e1dda4":"code","c3f11fe8":"code","6c2c2939":"code","a63a8682":"code","6b30c32f":"code","2d96949c":"code","9c036594":"code","acce7a3f":"code","2ed91761":"markdown","272dae93":"markdown","4a219c85":"markdown","28d2ad1f":"markdown","2e57cec4":"markdown","b14b0067":"markdown","cdf396ea":"markdown","213bff5f":"markdown","cc7dd1a1":"markdown","1e4d1fe5":"markdown","6c20c83e":"markdown","f4689287":"markdown","76f334a5":"markdown","39d2b326":"markdown","b0d18f03":"markdown","3cc9e7a4":"markdown","73d9e04e":"markdown","3213bd91":"markdown","4bbef320":"markdown","5ccf2337":"markdown","85da6fb2":"markdown","9478fa86":"markdown","929d4a32":"markdown"},"source":{"62a882eb":"import numpy as np\nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e6d68903":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntrain.head()","8242ced3":"test.head()","2fa721d2":"print(train.isnull().sum())\nprint(test.isnull().sum())","aea2c68c":"train[\"Age\"]=train[\"Age\"].fillna(train[\"Age\"].median())\ntest[\"Age\"]=test[\"Age\"].fillna(test[\"Age\"].median())\ntest[\"Fare\"]=test[\"Fare\"].fillna(test[\"Fare\"].median())\ntrain[\"Embarked\"]=train[\"Embarked\"].fillna(\"S\")","a89e6888":"print(train.isnull().sum())\nprint(test.isnull().sum())","7d9842e8":"train[\"Sex\"][train[\"Sex\"] == \"male\"] = 0\ntrain[\"Sex\"][train[\"Sex\"] == \"female\"] = 1\ntest[\"Sex\"][test[\"Sex\"] == \"male\"] = 0\ntest[\"Sex\"][test[\"Sex\"] == \"female\"] = 1","c08b95fd":"train[\"Embarked\"][train[\"Embarked\"]== \"S\"] = 0\ntrain[\"Embarked\"][train[\"Embarked\"]== \"C\"] =1\ntrain[\"Embarked\"][train[\"Embarked\"]== \"Q\"] =2\ntest[\"Embarked\"][test[\"Embarked\"]== \"S\"] = 0\ntest[\"Embarked\"][test[\"Embarked\"]== \"C\"] =1\ntest[\"Embarked\"][test[\"Embarked\"]== \"Q\"] =2","63511567":"y = train.loc[:,[\"Survived\"]]\nx = train.loc[:,[\"Sex\",\"Age\",\"Pclass\",\"SibSp\",\"Fare\",\"Embarked\"]]\nprint(x,y)","d5b436a6":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,shuffle=True,random_state=0)\nprint(x_train,y_train)\nprint(x_test,y_test)","8fa90ec3":"x_train = x_train.astype(\"float32\")\ny_train = y_train.astype(\"float32\")\nx_test = x_test.astype(\"float32\")\ny_test = y_test.astype(\"float32\")","525dd9f3":"params = {\"objective\": [\"binary:logistic\"],\n          \"n_estimators\":[50000],\n          \"booster\":[\"gbtree\"],\n          \"eta\":[0.01],\n          \"max_depth\": [0,1,2,3,4,5,6,7,8,9,10],\n          \"min_child_weight\":[0,1,2,3,4,5,6,7,8,9,10],\n          \"random_state\":[0],\n          \"colsample_bytree\":[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0],\n          \"subsample\":[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0],\n          \"alpha\":[0,1,2,3,4,5],\n          \"lambda\":[0,1,2,3,4,5]}","9ec0c8fa":"from sklearn.model_selection import RandomizedSearchCV\nimport xgboost as xgb\nclf = xgb.XGBClassifier()\nclf_grid = RandomizedSearchCV(clf,params,cv=5,n_iter=50,random_state=0,scoring=\"accuracy\")","b9aaf674":"import warnings\nwarnings.filterwarnings(\"ignore\")","2523c587":"clf_grid.fit(x_train,y_train,\n        early_stopping_rounds=50,\n        eval_set = [(x_test,y_test)],\n        eval_metric = \"error\",\n        verbose = 0)","e97954ba":"from sklearn.metrics import accuracy_score,confusion_matrix\nprint(clf_grid.best_params_)\nprint(clf_grid.best_score_)","d9e1dda4":"bst = clf_grid.best_estimator_\nprint(bst)","c3f11fe8":"pred_1 = bst.predict(x_test)\ngrid_score= accuracy_score(y_test,pred_1)\nprint(grid_score)","6c2c2939":"confusion_matrix(y_test,pred_1)","a63a8682":"import graphviz\nfrom IPython.display import Image, display_png\ngraph = xgb.to_graphviz(bst)\ngraph.format = \"png\"\ngraph.render(\"tree\")\ndisplay_png(Image(\"tree.png\"))","6b30c32f":"import matplotlib.pyplot as plt\ndef plot_feature_importances(model):\n    n_features = x.shape[1]\n    plt.barh(range(n_features),model.feature_importances_,align=\"center\")\n    plt.yticks(np.arange(n_features),x)\n    plt.xlabel(\"importance\")\n    plt.ylabel(\"features\")\n    plt.show\nplot_feature_importances(bst)\nplt.savefig(\"Features Importances\")","2d96949c":"X= test.loc[:,[\"Sex\",\"Age\",\"Pclass\",\"SibSp\",\"Fare\",\"Embarked\"]]\nX = X.astype(\"float32\")\nY= bst.predict(X)\nY = np.array(Y,dtype = \"int64\")\nprint(Y)","9c036594":"PassengerId = np.array(test[\"PassengerId\"]).astype(int)\nresult = pd.DataFrame(Y,PassengerId,columns = [\"Survived\"])\nprint(result)","acce7a3f":"result.to_csv(\"my_submission.csv\",index_label = [\"PassengerId\"])\nprint(\"Your submission was successfully saved!\")","2ed91761":"12.**\u5404\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u306e\u53ef\u8996\u5316**","272dae93":"9.**\u30e2\u30c7\u30eb\u69cb\u7bc9**","4a219c85":"10.**\u7d50\u679c\u306e\u78ba\u8a8d**","28d2ad1f":"13.**\u4e88\u6e2c**","2e57cec4":"1.**\u30c7\u30fc\u30bf\u5165\u529b**","b14b0067":"5.**\u30c7\u30fc\u30bf\u306e\u6574\u7406**","cdf396ea":"8.**\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a**","213bff5f":"Age\u3068Fare\u3092\u4e2d\u592e\u5024\u3001Embarked\u3092\u6700\u983b\u5024\u3067\u88dc\u5b8c","cc7dd1a1":"2.**\u6b20\u640d\u306e\u78ba\u8a8d**","1e4d1fe5":"\u6df7\u5408\u884c\u5217","6c20c83e":"7.**XGBoost\u7528\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5f62\u5f0f\u306b\u76f4\u3059**","f4689287":"\u30a8\u30e9\u30fc\u306e\u975e\u8868\u793a","76f334a5":"male\u30920 female\u30921\u306b\u3059\u308b","39d2b326":"S\u30920 C\u30921 Q\u30922\u306b\u3059\u308b","b0d18f03":"* \u5bfe\u8c61\u30b3\u30f3\u30da : https:\/\/www.kaggle.com\/c\/titanic\n* \u53c2\u8003\u30b5\u30a4\u30c8 : https:\/\/www.codexa.net\/hyperparameter-tuning-python\/","3cc9e7a4":"4.**\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u30c7\u30fc\u30bf\u306e\u6570\u5024\u5316**","73d9e04e":"\u30e2\u30c7\u30eb\u306e\u8a13\u7df4","3213bd91":"14.**\u7d50\u679c\u306e\u51fa\u529b**","4bbef320":"11.**\u30e2\u30c7\u30eb\u306e\u53ef\u8996\u5316**","5ccf2337":"6.**\u30c7\u30fc\u30bf\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3068\u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b(\u5206\u5272\u6bd4\u73877:3)**","85da6fb2":"\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u5206\u6790","9478fa86":"\u6b63\u89e3\u7387","929d4a32":"3.**\u6b20\u640d\u306e\u5bfe\u51e6**"}}