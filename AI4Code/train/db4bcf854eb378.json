{"cell_type":{"84a2f751":"code","77b09f3b":"code","62a36efd":"code","bb4a7f1e":"code","5ec7c369":"code","49b02995":"code","a4d49f6a":"code","f3db03e8":"code","1f42c638":"code","e1c80644":"code","cb6717a1":"code","8c22095f":"code","9d3b188e":"code","d4c52c8a":"code","84766cf2":"code","ac9150f7":"code","ee929ec6":"code","ee7669a9":"code","745a5981":"code","ce61e2f4":"code","8e8e6370":"code","eee8ea76":"code","191810ab":"code","ad61309a":"markdown"},"source":{"84a2f751":"#making the imports\nfrom __future__ import absolute_import, division, print_function, unicode_literals\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# TensorFlow and tf.keras\nimport tensorflow as tf\nfrom tensorflow import keras\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport matplotlib.pyplot as plt\n\nprint(tf.__version__)\n\n","77b09f3b":"#reading the train file\ntrain = pd.read_csv('..\/input\/fashion-mnist_train.csv')","62a36efd":"train.head()","bb4a7f1e":"#train shape\ntrain.shape","5ec7c369":"#reading the test file\ntest = pd.read_csv('..\/input\/fashion-mnist_test.csv')\ntest.head()","49b02995":"#shape of test data\ntest.shape","a4d49f6a":"#defining the list for labels\nclass_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","f3db03e8":"#splitting the data into X and y\ntrain_images = train.iloc[:,1:785]\ntrain_labels = train.iloc[:,0]\n\ntest_images = test.iloc[:,1:785]\ntest_labels = test.iloc[:,0]","1f42c638":"#plotting some fashion items from dataset. \nplt.figure()\nplt.imshow(train_images.iloc[0].as_matrix().reshape(28,28))\nplt.colorbar()\nplt.xticks([])\nplt.yticks([])\nplt.show()\n\nprint(class_names[0])","e1c80644":"#plotting some fashion items from dataset. \nplt.figure()\nplt.imshow(train_images.iloc[4].as_matrix().reshape(28,28))\nplt.colorbar()\nplt.xticks([])\nplt.yticks([])\nplt.show()\n\nprint(class_names[3])","cb6717a1":"#scaling the data so that the values are between 0 and 1\n\ntrain_images = train_images \/ 255.0\n\ntest_images = test_images \/ 255.0","8c22095f":"#displaying the first 25 images in training set\nplt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_images.iloc[i].as_matrix().reshape(28,28))\n    plt.xlabel(class_names[train_labels[i]])\nplt.show()","9d3b188e":"#building the model\n\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(128, activation= tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(128, activation= tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(64, activation= tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(10, activation= tf.nn.softmax))","d4c52c8a":"#compile the model\n\nmodel.compile(loss= 'sparse_categorical_crossentropy', optimizer= 'adam', metrics= ['accuracy'])\n","84766cf2":"#converting to a np array\ntrain_images = train_images.values\ntrain_labels = train_labels.values\n\ntest_images = test_images.values\ntest_labels = test_labels.values\n\n","ac9150f7":"#train the model\n\nmodel.fit(train_images, train_labels, epochs= 10)","ee929ec6":"#evaluate the model\ntest_loss, test_acc = model.evaluate(test_images, test_labels)\n\nprint('The test accuracy is: {} and test loss is: {}'.format(test_acc, test_loss))","ee7669a9":"#getting the predictions\n\npredictions = model.predict(test_images)","745a5981":"#getting the prediction for first row in test set\nnp.argmax(predictions[0])","ce61e2f4":"#comparing with actual label\nprint(test_labels[0])\nprint(class_names[0])","8e8e6370":"#plot the figure for first element in test set\nplt.figure()\nplt.imshow(test_images[0].reshape(28,28))\nplt.colorbar()\nplt.xticks([])\nplt.yticks([])\nplt.show()","eee8ea76":"#lets randomly do it for postion 99\nx = np.argmax(predictions[999])\nprint(x)\nprint('\\n')\nprint(test_labels[999])","191810ab":"#plot the figure for first element in test set\nplt.figure()\nplt.imshow(test_images[999].reshape(28,28))\nplt.colorbar()\nplt.xticks([])\nplt.yticks([])\nplt.show()\n\nprint(class_names[x])","ad61309a":"**So Our model is quite accurate, as we have predicted some rendom values accurately. **"}}