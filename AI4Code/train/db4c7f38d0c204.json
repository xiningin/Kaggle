{"cell_type":{"797f9c86":"code","2ff5f613":"code","fc3d2f66":"code","d57bce42":"code","21a28d8e":"code","fe129c75":"code","8762ae2d":"code","b1321913":"code","16c93eb2":"code","ddfcd304":"code","2c768612":"code","5ff1a0ee":"code","a0447f8f":"code","592ae733":"code","accb91e7":"code","59f7b294":"code","43204fd9":"code","504453ab":"code","30f60f81":"code","ba72d7d0":"code","79e23f17":"code","39b94976":"code","4102c96b":"code","634cafba":"code","4daecbe8":"code","4f8ed668":"code","74e7abb3":"code","4640b0f9":"code","de295f1b":"code","e5b0e05c":"code","c2ebe164":"code","69678046":"code","5b17244f":"code","f255379d":"code","e0e8d95c":"code","53bf7d69":"code","34468234":"code","2569f1ce":"markdown","dcdc2321":"markdown","9f740fa3":"markdown","6d695778":"markdown","fa53c6ac":"markdown","893014f4":"markdown","f473aad7":"markdown","35475d83":"markdown","ade7aaa4":"markdown","4250e165":"markdown"},"source":{"797f9c86":"import pandas as pd\nimport numpy as np\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem import SnowballStemmer\nimport re\nfrom gensim import utils\nfrom gensim.models.doc2vec import LabeledSentence\nfrom gensim.models import Doc2Vec\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nimport matplotlib.pyplot as plt","2ff5f613":"df = pd.read_csv(\"..\/input\/questions.csv\")","fc3d2f66":"# Use the full dataset on your personal computer.\n# I'm using a fraction so that it doesn't time out when uploading.\ndf = df[0:20000]","d57bce42":"df.head(10)","21a28d8e":"df.isnull().sum()","fe129c75":"df.is_duplicate.value_counts()","8762ae2d":"25109\/len(df)","b1321913":"# Take a look at some of the question pairs.\nprint(\"Not duplicate:\")\nprint(df.question1[0])\nprint(df.question2[0])\nprint()\nprint(\"Not duplicate:\")\nprint(df.question1[1])\nprint(df.question2[1])\nprint()\nprint(\"Is duplicate:\")\nprint(df.question1[5])\nprint(df.question2[5])","16c93eb2":"def review_to_wordlist(review, remove_stopwords=True):\n    # Clean the text, with the option to remove stopwords.\n    \n    # Convert words to lower case and split them\n    words = review.lower().split()\n\n    # Optionally remove stop words (true by default)\n    if remove_stopwords:\n        stops = set(stopwords.words(\"english\"))\n        words = [w for w in words if not w in stops]\n    \n    review_text = \" \".join(words)\n\n    # Clean the text\n    review_text = re.sub(r\"[^A-Za-z0-9(),!.?\\'\\`]\", \" \", review_text)\n    review_text = re.sub(r\"\\'s\", \" 's \", review_text)\n    review_text = re.sub(r\"\\'ve\", \" 've \", review_text)\n    review_text = re.sub(r\"n\\'t\", \" 't \", review_text)\n    review_text = re.sub(r\"\\'re\", \" 're \", review_text)\n    review_text = re.sub(r\"\\'d\", \" 'd \", review_text)\n    review_text = re.sub(r\"\\'ll\", \" 'll \", review_text)\n    review_text = re.sub(r\",\", \" \", review_text)\n    review_text = re.sub(r\"\\.\", \" \", review_text)\n    review_text = re.sub(r\"!\", \" \", review_text)\n    review_text = re.sub(r\"\\(\", \" ( \", review_text)\n    review_text = re.sub(r\"\\)\", \" ) \", review_text)\n    review_text = re.sub(r\"\\?\", \" \", review_text)\n    review_text = re.sub(r\"\\s{2,}\", \" \", review_text)\n    \n    words = review_text.split()\n    \n    # Shorten words to their stems\n    stemmer = SnowballStemmer('english')\n    stemmed_words = [stemmer.stem(word) for word in words]\n    \n    review_text = \" \".join(stemmed_words)\n    \n    # Return a list of words\n    return(review_text)","ddfcd304":"def process_questions(question_list, questions, question_list_name):\n# function to transform questions and display progress\n    for question in questions:\n        question_list.append(review_to_wordlist(question))\n        if len(question_list) % 10000 == 0:\n            progress = len(question_list)\/len(df) * 100\n            print(\"{} is {}% complete.\".format(question_list_name, round(progress, 1)))","2c768612":"questions1 = []     \nprocess_questions(questions1, df.question1, \"questions1\")\nprint()\nquestions2 = []     \nprocess_questions(questions2, df.question2, \"questions2\")","5ff1a0ee":"# Take a look at some of the processed questions.\nfor i in range(5):\n    print(questions1[i])\n    print(questions2[i])\n    print()","a0447f8f":"# Stores the indices of unusable questions\ninvalid_questions = []\nfor i in range(len(questions1)):\n    # questions need to contain a vowel (which should be part of a full word) to be valid\n    if not re.search('[aeiouyAEIOUY]', questions1[i]) or not re.search('[aeiouyAEIOUY]', questions2[i]):\n    # Need to subtract 'len(invalid_questions)' to adjust for the changing index values as questions are removed.\n        invalid_questions.append(i-len(invalid_questions))\nprint(len(invalid_questions))","592ae733":"# list of invalid questions\ninvalid_questions","accb91e7":"# Remove the invalid questions\nfor index in invalid_questions:\n    df = df[df.id != index]\n    questions1.pop(index)\n    questions2.pop(index)\n\n# These questions are also unusable, but were not detected initially.\n# They were found when the function 'cosine_sim' stopped due to an error.\nunexpected_invalid_questions = [6870]#,42273,65937,304867,306828,353918] \nfor index in unexpected_invalid_questions:\n    df = df[df.id != index]\n    questions1.pop(index)\n    questions2.pop(index)","59f7b294":"# Use TfidfVectorizer() to transform the questions into vectors,\n# then compute their cosine similarity.\nvectorizer = TfidfVectorizer()\ndef cosine_sim(text1, text2):\n    tfidf = vectorizer.fit_transform([text1, text2])\n    return ((tfidf * tfidf.T).A)[0,1]","43204fd9":"Tfidf_scores = []\nfor i in range(len(questions1)):\n    score = cosine_sim(questions1[i], questions2[i])\n    Tfidf_scores.append(score)\n    if i % 10000 == 0:\n        progress = i\/len(questions1) * 100\n        print(\"Similarity Scores is {}% complete.\".format(round(progress,2)))","504453ab":"# Plot the scores\nplt.figure(figsize=(12,4))\nplt.hist(Tfidf_scores, bins = 200)\nplt.xlim(0,1)\nplt.show()","30f60f81":"X.shape","ba72d7d0":"X = df.is_duplicate[1:]","79e23f17":"# Function to report the quality of the model\ndef performance_report(value, score_list):\n    # the value (0-1) is the cosine similarity score to determine if a pair of questions\n    # have the same meaning or not.\n    scores = []\n    for score in score_list:\n        if score >= value:\n            scores.append(1)\n        else:\n            scores.append(0)\n    X=df.is_duplicate[1:]\n    accuracy = accuracy_score(X, scores) * 100\n    print(\"Accuracy score is {}%.\".format(round(accuracy),1))\n    print()\n    print(\"Confusion Matrix:\")\n    print(confusion_matrix(X, scores))\n    print()\n    print(\"Classification Report:\")\n    print(classification_report(X, scores))","39b94976":"performance_report(0.52, Tfidf_scores)","4102c96b":"# Reset index to match the index values of questions1 and questions2\ndf = df.reset_index()","634cafba":"# Contains the processed questions for Doc2Vec\nquestions_labeled = []\n\nfor i in range(len(questions1)):\n    # Question strings need to be separated into words\n    # Each question needs a unique label\n    questions_labeled.append(LabeledSentence(questions1[i].split(), df[df.index == i].qid1))\n    questions_labeled.append(LabeledSentence(questions2[i].split(), df[df.index == i].qid2))\n    if i % 10000 == 0:\n        progress = i\/len(questions1) * 100\n        print(\"{}% complete\".format(round(progress, 2)))","4daecbe8":"# Split questions for computing similarity and determining the lengths of the questions.\nquestions1_split = []\nfor question in questions1:\n    questions1_split.append(question.split())\n    \nquestions2_split = []\nfor question in questions2:\n    questions2_split.append(question.split())","4f8ed668":"# Determine the length of questions to select more optimal parameters.\nlengths = []\nfor i in range(len(questions1_split)):\n    lengths.append(len(questions1_split[i]))\n    lengths.append(len(questions2_split[i]))\nlengths = pd.DataFrame(lengths, columns=[\"count\"])","74e7abb3":"lengths['count'].describe()","4640b0f9":"# 99% of the questions include 18 or fewer words.\nnp.percentile(lengths['count'], 99)","de295f1b":"# Build the model\nmodel = Doc2Vec(dm = 1, min_count=1, window=10, size=150, sample=1e-4, negative=10)\nmodel.build_vocab(questions_labeled)","e5b0e05c":"print(model.corpus_count)","c2ebe164":"# Train the model\n# 20 epochs performs a bit better, but timed out when uploading\nfor epoch in range(5):\n    model.train(questions_labeled, epochs = 10, total_examples=model.corpus_count)\n    print(\"Epoch #{} is complete.\".format(epoch+1))","69678046":"# Check a few terms to ensure the model was trained properly.\nmodel.most_similar('good')","5b17244f":"model.most_similar('peopl')","f255379d":"model.most_similar('book')","e0e8d95c":"doc2vec_scores = []\nfor i in range(len(questions1_split)):\n    # n_similarity computes the cosine similarity in Doc2Vec\n    score = model.n_similarity(questions1_split[i],questions2_split[i])\n    doc2vec_scores.append(score)\n    if i % 10000 == 0:\n        progress = i\/len(questions1_split) * 100\n        print(\"{}% complete.\".format(round(progress,2)))","53bf7d69":"# Plot the scores\nplt.figure(figsize=(12,4))\nplt.hist(doc2vec_scores, bins = 200)\nplt.xlim(0,1)\nplt.show()","34468234":"performance_report(0.92, doc2vec_scores)","2569f1ce":"# Predicting Similar Questions","dcdc2321":"Using 0.92 as our threshold, we are able to score slightly higher with the Doc2Vec method. Accuracy is 2 percentage points higher and the f1-score increased by 0.01. Much like with TfidfVectorizer, it would have been nice to score higher, but this is by no means an easy challenge. Nonetheless, I hope that you have learned something from reading this and enjoyed this project as much as I did.","9f740fa3":"## Method 2: Doc2Vec","6d695778":"Although accuracy won't be as good of a performance metric as F1, it's still good to establish some sort of a baseline. In this case, 62.8% will be our baseline for accuracy.","fa53c6ac":"Using a threshold of 0.51 for the cosine similarity maximizes both the f1-score and accuracy. It's good to see that we are scoring better than the baseline value of 63.1% accuracy. I'm not too surprised that we didn't score much above the baseline accuracy, given the difficulty of this task.","893014f4":"The objective of this analysis is to use different Natural Language Processing methods to predict if pairs of questions have the same meaning. The data is from Quora and hosted on Kaggle: https:\/\/www.kaggle.com\/quora\/question-pairs-dataset. The sections of this analysis include:\n- Transforming the text\n- Method 1: TfidfVectorizer \n- Method 2: Doc2Vec","f473aad7":"These questions look pretty unusable, so it should be okay to remove them. Plus, we are only removing less than 0.09% of all of the questions.","35475d83":"It's interesting to see how Doc2Vec computes the pairs of questions to be more similar than TfidfVectorizer.","ade7aaa4":"This task looks like it will be a little difficult since the first pair of questions have very similar wordings but different meanings, and the third pair have less similar wordings but the same meaning.","4250e165":"These words have appropriate similar words, so I am pleased with the training."}}