{"cell_type":{"9f3c95ee":"code","bcce4138":"code","c23369c3":"code","5144529e":"code","86c2fea1":"code","1115d008":"code","0cb6daf4":"code","fda33db9":"code","034c5b6e":"code","c0a2307c":"code","f6773760":"code","8b626634":"markdown","c7d05f5d":"markdown","22fc520b":"markdown","3dc65d0d":"markdown","d1ec4acf":"markdown","87d66aee":"markdown"},"source":{"9f3c95ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bcce4138":"df = pd.read_excel(\"\/kaggle\/input\/taxdata2\/tax_data.xlsx\")\ndf3= df.copy()\ndf2 = pd.read_excel(\"\/kaggle\/input\/state-tax\/tax_data.xlsx\")\n","c23369c3":"df.head()","5144529e":"items = [ 'Corp Tax Revenue (miilions)', 'Total Revenue',\n       'Unemployment ', 'GDP']\n","86c2fea1":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib","1115d008":"df3.head()","0cb6daf4":"df3.groupby(\"State \").plot(x= 'Year', y= 'Unemployment ' )\n","fda33db9":"fig, ax= plt.subplots()\nstyles = ['solid', 'dashed']\ndf3.groupby(\"State \").plot(x= 'Year', y= 'Unemployment ', ax= ax, ls= '-')\nax.legend(('Indiana',' Comparsion Cohort'))\nax.set_xlabel('Year')\nax.set_ylabel('Unemployment Rate')\nax.set_title('State Unemployement Rate')\nplt.show()\n","034c5b6e":"plt.savefig('unemploy.png')","c0a2307c":"for item in items:\n    if item == 'GDP':\n        fig, axs= plt.subplots()    \n        df3.groupby(\"State \").plot(x= 'Year', y= item , ax= axs, ls= '-')\n        axs.legend(('Indiana',' Comparsion Cohort', 'Kansas', 'Ohio','North Carolina'),prop={'size': 6})\n        axs.set_xlabel('Year')\n        axs.set_ylabel(item)\n        axs.axvline(x = 2013)\n        axs.set_xlim([2010,2018])\n        axs.set_ylim([40000,55000])\n        plt.show()\n        \n    else:\n        fig, axs= plt.subplots()    \n        df3.groupby(\"State \").plot(x= 'Year', y= item , ax= axs, ls= '-')\n        axs.legend(('Indiana',' Comparsion Cohort', 'Kansas', 'Ohio','North Carolina'),prop={'size': 6})\n        axs.set_xlabel('Year')\n        axs.axvline(x = 2013)\n        axs.set_ylabel(item)\n        plt.show()\n     \n  \n    \n\n","f6773760":"for item in items:\n    if item == 'GDP':\n        fig, axs= plt.subplots()    \n        df2.groupby(\"State \").plot(x= 'Year', y= item , ax= axs, ls= '-')\n        axs.legend(('Indiana',' Comparsion Cohort'))\n        axs.set_xlabel('Year')\n        axs.set_ylabel(item)\n        axs.axvline(x = 2013)\n        axs.set_xlim([2010,2018])\n        axs.set_ylim([40000,55000])\n        plt.show()\n        \n    else:\n        fig, axs= plt.subplots()    \n        df2.groupby(\"State \").plot(x= 'Year', y= item , ax= axs, ls= '-')\n        axs.legend(('Indiana',' Comparsion Cohort'))\n        axs.set_xlabel('Year')\n        axs.axvline(x = 2013)\n        axs.set_ylabel(item)\n        plt.show()\n     ","8b626634":"It made a different graph for each state. But what I really want is all states on one graph. Here I will do so","c7d05f5d":"Here I am testing the plot worked how I wanted.","22fc520b":"Okay, that looks better, now I'll do this for each variable of interest. I'll add a line for the year of the policy reform ","3dc65d0d":"I read in the two datasets using Pandas. ","d1ec4acf":"Here I repat with only the cohort comparsion. I could have done this within the first dataset, but since I already had it, why write more code?","87d66aee":"I will use this later when I plot the columns"}}