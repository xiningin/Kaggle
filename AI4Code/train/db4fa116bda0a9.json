{"cell_type":{"bd09cbd0":"code","7e519118":"code","87393cf0":"code","d5e2bab6":"code","84b6bc56":"code","36ac24c8":"code","a2787cc6":"code","7ff8eba9":"code","a3d2e7cb":"code","3992d031":"code","034813e9":"code","4580b3eb":"code","0c654bbf":"code","59dd98fc":"code","cf855127":"code","15f9c810":"code","aa027775":"code","399dbb7a":"code","701d2bd2":"code","22cc7021":"code","632907c7":"code","8636a106":"code","a4a4088f":"code","3ec220aa":"code","4aa56237":"code","1b7afc57":"code","493ca7cc":"code","00a12c52":"code","bf16482c":"code","7bcbdb4f":"code","c55f5f18":"code","1de8f460":"markdown","e72c3b4a":"markdown","55ed2dc0":"markdown","b38ac0aa":"markdown","0f322733":"markdown","585493b5":"markdown","d52156da":"markdown","90d53a05":"markdown","f73fd543":"markdown","18175d7a":"markdown","0659c1d3":"markdown","d0ef43b2":"markdown","41cb1a50":"markdown","79c16014":"markdown","90ee1ee9":"markdown","2d49f57c":"markdown","e462f4fb":"markdown","d0971c03":"markdown","b31a9b32":"markdown"},"source":{"bd09cbd0":"# SOME USEFUL IMPORTS\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","7e519118":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","87393cf0":"# coillecting data from kaggle input and checking size \ndf_train=pd.read_csv('\/kaggle\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv')\ndf_test=pd.read_csv('\/kaggle\/input\/hr-analytics-job-change-of-data-scientists\/aug_test.csv')\nprint('SHAPE OF TRAIN DATA',df_train.shape)\nprint('SHAPE OF TRAIN DATA',df_test.shape)","d5e2bab6":"# IN train data we have 14 columns which includes the target label\ndf_train.head()","84b6bc56":"# lets check if our data is blanced or not\nsns.countplot(df_train['target'])","36ac24c8":"#counting null values\nprint(df_train.isnull().sum())\nprint('\\n')\nprint(df_test.isnull().sum())\n# lets create heatmap for it.","a2787cc6":"fig, axes = plt.subplots(1, 2, figsize=(15, 5), sharey=True)\nfig.suptitle('CHECKING MISSING VALUES')\n\n# train data\nsns.heatmap(df_train.isnull(),cbar=False,ax=axes[0])\naxes[0].set_title('TRAIN DATA')\n\n# test data\nsns.heatmap(df_test.isnull(),cbar=False,ax=axes[1])\naxes[1].set_title('TEST DATA')","7ff8eba9":"# starting with gender\nfig, axes = plt.subplots(1, 2, figsize=(15, 5), sharey=True)\n\n\nsns.countplot(df_train['gender'],hue=df_train['major_discipline'],ax=axes[0])\naxes[0].set_title('with major discipline')\n\n\nsns.countplot(df_train['gender'],hue=df_train['education_level'])\naxes[1].set_title('with education level')\n\n","a3d2e7cb":"df_train['gender'].value_counts()","3992d031":"# so now we will fill nan value with male if the person major discipline is STEM,BUSINESS_DEGREE or OTHERS\ndf_train.loc[df_train[\"major_discipline\"]==\"STEM\", \"gender\"] = \"Male\"\ndf_train.loc[df_train[\"major_discipline\"]==\"Business Degree\", \"gender\"] = \"Male\"\ndf_train.loc[df_train[\"major_discipline\"]==\"Other\", \"gender\"] = \"Male\"\n\n# and for others we will fill with female\ndf_train['gender'].fillna(\"Female\",inplace=True)\n\n# for test data also\n# so now we will fill nan value with male if the person major discipline is STEM,BUSINESS_DEGREE or OTHERS\ndf_test.loc[df_test[\"major_discipline\"]==\"STEM\", \"gender\"] = \"Male\"\ndf_test.loc[df_test[\"major_discipline\"]==\"Business Degree\", \"gender\"] = \"Male\"\ndf_test.loc[df_test[\"major_discipline\"]==\"Other\", \"gender\"] = \"Male\"\n\n# and for others we will fill with female\ndf_test['gender'].fillna(\"Female\",inplace=True)","034813e9":"# Lets check for nan value in gender\nprint(df_train['gender'].isnull().sum())\n\nprint(df_test['gender'].isnull().sum())","4580b3eb":"# now we will fill missing values in company size\nprint(df_train['company_size'].value_counts())\n# to make our code robust we fill nan value with unknown category\ndf_train['company_size'].fillna('unknown',inplace=True)\n# for test data also\ndf_test['company_size'].fillna('unknown',inplace=True)\n# lets check for nan value now\nprint('nbull value in company size')\nprint(df_train['company_size'].isnull().sum())\nprint(df_test['company_size'].isnull().sum())\n\n\n# now we will fill missing values in company type\nprint(df_train['company_type'].value_counts())\n# to make our code robust we fill nan value with unknown category\ndf_train['company_type'].fillna('unknown',inplace=True)\n# for test data also\ndf_test['company_type'].fillna('unknown',inplace=True)\n# lets check for nan value now\nprint('nbull value in company type')\nprint(df_train['company_type'].isnull().sum())\nprint(df_test['company_type'].isnull().sum())\n\n\n# now we will fill missing values in company size\nprint(df_train['major_discipline'].value_counts())\n# to make our code robust we fill nan value with unknown category\ndf_train['major_discipline'].fillna('unknown',inplace=True)\n# for test data also\ndf_test['major_discipline'].fillna('unknown',inplace=True)\n# lets check for nan value now\nprint('nbull value in major_discipline')\nprint(df_train['major_discipline'].isnull().sum())\nprint(df_test['major_discipline'].isnull().sum())","0c654bbf":"# droping rest of rows as they have less data\ndf_train.dropna(inplace=True)\ndf_test.dropna(inplace=True)\nprint(df_train.isnull().sum())\nprint('\\n')\nprint(df_test.isnull().sum())","59dd98fc":"df_train.head()","cf855127":"fig, axes = plt.subplots(3, 3, figsize=(25, 15), sharey=True)\n\n\nsns.countplot(df_train['gender'],hue=df_train['target'],ax=axes[0,0])\n\n\nsns.countplot(df_train['relevent_experience'],hue=df_train['target'],ax=axes[0,1])\n\n\nsns.countplot(df_train['enrolled_university'],hue=df_train['target'],ax=axes[0,2])\n\n\nsns.countplot(df_train['experience'],hue=df_train['target'],ax=axes[1,0])\n\n\nsns.countplot(df_train['company_size'],hue=df_train['target'],ax=axes[1,1])\n\n\nsns.countplot(df_train['company_type'],hue=df_train['target'],ax=axes[1,2])\n\n\nsns.countplot(df_train['last_new_job'],hue=df_train['target'],ax=axes[2,0])\n\n\n","15f9c810":"#replacing <1 with 0 and >20 with 21\ndf_train['experience'].replace({'<1':'0','>20':'21'},inplace=True)\ndf_train['experience'].value_counts()\ndf_train['experience'] = df_train.experience.astype(int)# converting its datatypes from object to integer\n\ndf_test['experience'].replace({'<1':'0','>20':'21'},inplace=True)\ndf_test['experience'].value_counts()\ndf_test['experience'] = df_test.experience.astype(int)# converting its datatypes from object to integer","aa027775":"# similarly doing this thing for last new job columns\ndf_train['last_new_job'].replace({'never':'0','>4':'5'},inplace=True)\ndf_train['last_new_job'].value_counts()\ndf_train['last_new_job'] = df_train.last_new_job.astype(int)# converting its datatypes from object to integer\n\ndf_test['last_new_job'].replace({'never':'0','>4':'5'},inplace=True)\ndf_test['last_new_job'].value_counts()\ndf_test['last_new_job'] = df_test.last_new_job.astype(int)# converting its datatypes from object to integer\n\n\n","399dbb7a":"df_train.head()","701d2bd2":"X_train=df_train.drop(['target','enrollee_id'],axis=1)\nY_train=df_train['target']\nX_test=df_test.drop(['enrollee_id'],axis=1)\nprint(X_train.shape)\nprint(Y_train.shape)\nprint(X_test.shape)","22cc7021":"# combining two data frame and making on dataframe to do encoding\nldf=pd.concat([X_train,X_test])","632907c7":"# now we will do one hot encoding\nldf=pd.get_dummies(ldf)\nldf","8636a106":"# now we will seperate training data and test data..as we already know that upto 18014 index we have train_data\nX_train=ldf.iloc[:18014]\nX_test=ldf.iloc[18014:]\nprint(X_train.shape)\nprint(X_test.shape)","a4a4088f":"from sklearn.model_selection import train_test_split\nX_train, X_Val, Y_train, Y_Val = train_test_split(X_train, Y_train, test_size=0.3,random_state=42)","3ec220aa":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score,confusion_matrix,f1_score\nfrom sklearn.model_selection import RandomizedSearchCV\n","4aa56237":"#creation of model\nmodel=RandomForestClassifier(n_estimators=100)\nmodel.fit(X_train,Y_train)\nY_pred=model.predict(X_Val)","1b7afc57":"#lets check the accuracy of our model\nprint('accuracy of model is',accuracy_score(Y_Val, Y_pred))\nprint('confusion matrix',confusion_matrix(Y_Val, Y_pred))\nprint('F1-Score of model is',f1_score(Y_Val, Y_pred))","493ca7cc":"param={'bootstrap': [True, False],\n 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],\n 'max_features': ['auto', 'sqrt'],\n 'min_samples_leaf': [1, 2, 4],\n 'min_samples_split': [2, 5, 10],\n 'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]}","00a12c52":"#rf=RandomForestClassifier()\n#random_search= RandomizedSearchCV(estimator = rf, param_distributions = param, \n#                         cv = 3, n_jobs = -1, verbose = 2)","bf16482c":"#random_search.fit(X_train,Y_train)","7bcbdb4f":"#random_search.best_params_","c55f5f18":"model=RandomForestClassifier(n_estimators=2000,min_samples_split=2,min_samples_leaf=2,max_features='sqrt',max_depth=70,bootstrap=False)\nmodel.fit(X_train,Y_train)\nY_pred=model.predict(X_Val)\n#lets check the accuracy of our model now\nprint('accuracy of model is',accuracy_score(Y_Val, Y_pred))\nprint('confusion matrix',confusion_matrix(Y_Val, Y_pred))\nprint('F1-Score of model is',f1_score(Y_Val, Y_pred))","1de8f460":"## 3. EXPLORATORY DATA ANALYSIS\nIn this step we will learn about and go into deep dive into data with manu visulization tools.","e72c3b4a":"AS we can cleraly see our data is not balanced..so we will balanced it in later steps.","55ed2dc0":"As we can see in experience columns that there are values in ranges so we have to fill appropriately.","b38ac0aa":"First of all we have to handle missing values...handling missing values is one of the hardest task for data scientist...their are lot of techniqye by which we can handle missing values.\n1. Imputation by mean median or mode\n2. Imutation by introducing new variable in categorical variable like gender we can fill nan value by unknown or others.\n3. by deleting the whole row or columns having higher null values.","0f322733":"## PIPELINES\nTo solve any data science related problem we have to follow some of the procedures to get the better results.so we will look everything step by step.\n1. FRAME THE PROBLEM\n2. DATA COLLECTION\n3. DATA CLEANING AND PROCESSING\n4. EXPLORATORY DATA ANALYSIS\n5. MODEL SELECTION","585493b5":"Our model accuracy have little increased... it can still be increased by various tecnique such as:\n1. Applying some more algorithms who knows may knn gives better accuracy\n2. or reducing our model complexity..like principle component analyis..feature reduction\n3. more hyperParameter tuning.","d52156da":"AS we can see that major discipline have some connection with gender.\n* Mostly male belongs to STEM and less Male are in humanities and NO major\n* mostly woman goes for arts \nso we will fill gender by considering these things.","90d53a05":"## 3. DATA CLEANING AND PROCESSING\nIN this step we will process data and clean data both on test set as well as train set parallely. Lets check for missing values in dataset.\n","f73fd543":"AS we can see that there are three files in input data.\n1. Sample submission\n2. Aug test Data\n3. Aug train data","18175d7a":"so we have handeled missing values no we will move to one further step.","0659c1d3":"## 1. FRAME THE PROBLEM\nA company which is active in Big Data and Data Science wants to hire data scientists among people who successfully pass some courses which conduct by the company. Many people signup for their training. Company wants to know which of these candidates are really wants to work for the company after training or looking for a new employment because it helps to reduce the cost and time as well as the quality of training or planning the courses and categorization of candidates. Information related to demographics, education, experience are in hands from candidates signup and enrollment.\n\n#### WHAT WE HAVE TO DO\n* Predict the probability of a candidate will work for the company\n* Interpret model(s) such a way that illustrate which features affect candidate decision\n\nallright so we have frame our problem now we will move to one step ahead.","d0ef43b2":"Okay! everything is good till here.lets check our dataset again.","41cb1a50":"#### Now we are done with filling missing values... for others features we simply delewte those rows which have any null value associated with it.","79c16014":"**SO WE ARE DONE WITH THIS> IF YOU LIKE THIS NOTEBOOK PLEASE GIVE AN UPVOTE. IF ANY SUGGESTIONS COMMENT DOWN.**","90ee1ee9":"<h1 style=\"text-align:center;\">WHO IS GOING TO SWITCH THE JOB<\/h1>","2d49f57c":"## 2. DATA COLLECTION\nIn this step we will collect data and know some info about data.","e462f4fb":"AS you can see our accuracy is average but f1-score is very poor..we have to increase f1 score of model.\nNow we will tune the parameter to check if model performs better or not.","d0971c03":"NOW we will split our target variable from train data","b31a9b32":"Before moving ahead we will combine test data and train data together so that we can do one hot encoding without loosing any feature.\n"}}