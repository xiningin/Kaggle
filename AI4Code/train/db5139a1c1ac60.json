{"cell_type":{"7df5a9ea":"code","bd9209c4":"code","9b160a97":"code","6919a5c3":"code","5ed3bb5a":"code","5f8891f4":"code","45cac221":"code","309749ea":"code","83317963":"code","17fd1dd4":"code","78dfa73a":"code","36f5e7cb":"code","bb27c1ee":"code","a8a43e82":"code","4389de73":"code","df867fd2":"code","28429508":"code","734c0d08":"code","7fc5bcdc":"markdown"},"source":{"7df5a9ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bd9209c4":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","9b160a97":"data = pd.read_csv(\"\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv\")","6919a5c3":"data.head()\ndata.info()","5ed3bb5a":"data = data.drop([\"Unnamed: 32\", \"id\"], axis=1)\ndata.head()","5f8891f4":"encoder = LabelEncoder()\ndata[\"diagnosis\"] = encoder.fit_transform(data[\"diagnosis\"])\ndata.head()","45cac221":"X=data.drop('diagnosis',axis=1)\ny=data['diagnosis']","309749ea":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state= 10)","83317963":"print(\"X train shape: \", X_train.shape)\nprint(\"y train shape: \", y_train.shape)\nprint(\"X test shape: \", X_test.shape)\nprint(\"y test shape: \", y_test.shape)","17fd1dd4":"from sklearn.linear_model import LogisticRegression\n\nlreg_model = LogisticRegression(max_iter=10000)\n\nlreg_model.fit(X_train, y_train)\ny_pred_lreg_model = lreg_model.predict(X_test)\n\nlreg_model_score = lreg_model.score(X_test, y_test)\nprint(lreg_model_score)","78dfa73a":"from sklearn import svm\n\nsvm_model = svm.SVC(C=100000)\n\nsvm_model.fit(X_train, y_train)\ny_pred_svm_model  = svm_model.predict(X_test)\n\nsvm_model_score = svm_model.score(X_test, y_test)\nprint(svm_model_score)","36f5e7cb":"from sklearn.naive_bayes import GaussianNB\n\nnb_model = GaussianNB()\n\nnb_model.fit(X_train, y_train)\ny_pred_nb_model = nb_model.predict(X_test)\n\nnb_model_score = nb_model.score(X_test, y_test)\nprint(nb_model_score)","bb27c1ee":"from sklearn.tree import DecisionTreeClassifier\n\ndtc_model = DecisionTreeClassifier(random_state=10)\n\ndtc_model.fit(X_train, y_train)\ny_pred_dtc_model = dtc_model.predict(X_test)\n\ndtc_model_score = dtc_model.score(X_test, y_test)\nprint(dtc_model_score)","a8a43e82":"from sklearn.ensemble import RandomForestClassifier\n\nrf_model = RandomForestClassifier(n_estimators=1000, random_state=10)\n\nrf_model.fit(X_train, y_train)\ny_pred_rf_model = rf_model.predict(X_test)\n\nrf_model_score = rf_model.score(X_test, y_test)\nprint(rf_model_score)","4389de73":"from sklearn.neighbors import KNeighborsClassifier\n\nknn_model = KNeighborsClassifier(n_neighbors=10)\n\nknn_model.fit(X_train, y_train)\ny_pred_knn_model = knn_model.predict(X_test)\n\nknn_model_score = knn_model.score(X_test, y_test)\nprint(knn_model_score)","df867fd2":"models = list()\nscores = list()\nfor vars in dir():\n    if vars.endswith(\"_model_score\"):\n        print(f\"{vars}: {eval(vars)}\")\n        models.append(vars)\n        scores.append(eval(vars))","28429508":"df = {'models': models, 'scores': scores}\npd.DataFrame.from_dict(df)","734c0d08":"count  = df[\"scores\"]\n# plt.figure(figsize=(16,9))\nsns.barplot(df[\"models\"], df[\"scores\"], alpha=1)\n# plt.title('Tweets vs User Location')\nplt.ylabel('Number of Occurrences', fontsize=12)\n# plt.xlabel('State', fontsize=12)\nplt.xticks(rotation=75)\nplt.show()","7fc5bcdc":"# END: RandomForestClassifier has the highest Accuracy.\n# Work in progress..."}}