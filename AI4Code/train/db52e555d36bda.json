{"cell_type":{"d13db591":"code","3ba7c8c6":"code","7d732231":"code","70aa0c76":"code","354ec36b":"code","db9cbb19":"code","3697dc3a":"code","ac48edd6":"code","64552459":"code","13b5f05d":"code","d3df25f8":"code","80493fc9":"code","29f1f11e":"code","ed982c05":"code","7634642d":"code","d779219e":"code","12f66219":"code","632a4d97":"code","fa63ff2d":"code","59c955a5":"code","bd4b4b17":"code","c73587ff":"code","1a91fa08":"code","6e767ea4":"code","f3e32215":"code","4db1ff25":"markdown","672717b8":"markdown","66831525":"markdown","7d28b4be":"markdown","90ca28f8":"markdown","e91318cd":"markdown","8fb0cd60":"markdown","86d0a434":"markdown","e1f53db0":"markdown","191e4ee6":"markdown","89917046":"markdown","9b1e17be":"markdown","a3be2bd8":"markdown","057fa782":"markdown"},"source":{"d13db591":"import numpy as np\nfrom dateutil.relativedelta import relativedelta\nimport pandas as pd\nimport boto3\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","3ba7c8c6":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nbucket = user_secrets.get_secret(\"bucket\")\nfile_name = user_secrets.get_secret(\"file_name\")\nkey_id = user_secrets.get_secret(\"key_id\")\nsecret_key = user_secrets.get_secret(\"secret_key\")\n\ns3 = boto3.client('s3', aws_access_key_id=key_id, aws_secret_access_key=secret_key) \n\n\n# get object and file (key) from bucket\nobj = s3.get_object(Bucket= bucket, Key= file_name) \n\n#read the content body\ndf = pd.read_csv(obj['Body'], parse_dates=['date_of_birth'], infer_datetime_format=True)\ndf","7d732231":"df.info()","70aa0c76":"df['date_of_birth'].max()","354ec36b":"df['date_of_birth'].min()","db9cbb19":"y = relativedelta(df['date_of_birth'].max(), df['date_of_birth'].min()).years\nprint(f'The age gap between the oldest and the youngest record is {y} years.')","3697dc3a":"df.count()","ac48edd6":"(1 - 387\/500)\n","64552459":"#try:\n\n#df['age'] = df.apply(lambda x: relativedelta(today, x['date_of_birth']).years)\n#except:\n#    print('check outcome. lambda not successful')\n","13b5f05d":"today = pd.to_datetime('today')\ndf['age'] = df['date_of_birth']\nfor row in range(0,499):\n    df['age'][row] = (relativedelta(today, df['date_of_birth'][row]).years)","d3df25f8":"df","80493fc9":"df2 = pd.DataFrame(df.device_type_us_state.str.split('-',1).tolist(),columns = ['device_type','us_state'])\n\ndf = pd.concat([df,df2], axis=1, sort=False)\ndf","29f1f11e":"df['Gender'] = df['Gender'].apply(lambda x: 'M' if x == 'MALE' else x)\ndf['Gender'] = df['Gender'].apply(lambda x: 'M' if x == 'Male' else x)\ndf['Gender'] = df['Gender'].apply(lambda x: 'F' if x == 'FEMALE' else x)\ndf['Gender'] = df['Gender'].apply(lambda x: 'F' if x == 'Female' else x)\ndf","ed982c05":"\ndf_dropped_invalid_age.Gender.value_counts()","7634642d":"df['us_state'].nunique()","d779219e":"df.us_state.value_counts()","12f66219":"df.device_type.value_counts()","632a4d97":"df.age.value_counts()","fa63ff2d":"df_bad_age_dropped = df.drop(499)","59c955a5":"df_bad_age_dropped","bd4b4b17":"import numpy as np\nage_groups = pd.cut(df_bad_age_dropped['age'], bins=[0,18, 24, 34,44, 54, 64, 100], right=True, precision=3)\n#df.groupby(age_groups).count()\nage_groups\n# Age Groups = 0-18, 19-24,25-34,35-44, 45-54, 55-64,65+ ","c73587ff":"df_age_grouped = (df_bad_age_dropped.groupby(age_groups).count())\n#df_age_grouped.set_index()\ndf_age_grouped.columns","1a91fa08":"df_age_grouped","6e767ea4":"df_age_grouped['age']","f3e32215":"plt.figure(figsize=(14,7))\nplt.xlabel(\"age\")\nplt.ylabel(\"value_counts\")\nplt.title(\"Mobile Devices against Each Age\")\n\nsns.barplot(x=df_bad_age_dropped.age.sort_values(), y=df.age.value_counts())","4db1ff25":"**Separating the device type and the US state columns**","672717b8":"**Ignoring the unknowns**, \n\nRecords agains Males : 174 , \nRecords agains Females : 164","66831525":"# Observations\n\nBased on the requirements, we have the data present in varying forms here. \n\n* Age needs to be calculated from the Date of Birth,\n\n* The Date of Birth column seems to be in varying date formats. I might face some challenge in parsing the dates. \n\n* The Gender has two issues; there are some missing values, and the categories need to be assigned fixed values, e.g., M, Male and MALE all mean the same and should be assigned to the same variable. Similarly with the Female category. \n\n* The device_type_us_state column needs to be separated into the state and the device type columns. \n\n**Missing Values**\n\n* There is one missing Name value, which I choose to ignore for the purpose of the analysis.\n\n* There are several missing values in the Gender column. About 22.6% values are missing. I will ignore the missing values as they could be anything.  I will treat the remaining 77% of values as the representative sample, with the knowledge that there could be an error in the gender analysis.\n","7d28b4be":"Having to drop one row as the date is not converted to age, an issue which I will need to look into further later.","90ca28f8":"**Formatting the Gender Categories**","e91318cd":"# Records against each Age Group","8fb0cd60":"# Devices for Each State","86d0a434":"# Devices for each Device Type","e1f53db0":"# Devices for each Age","191e4ee6":"# Conclusion \n\n\nWith every notebook I get better. Hope the EDA was able to get some quick insight on the data.\n\nThere were some issues I came across with a few data values. \nThere was also a warning that I ignored, as it was not and error and I was able to get an output.\n\nAny feedback would be helpful. Hope this notebook provides some value. Thanks for reading so far.","89917046":"The Gender column has nearly 23% missing values","9b1e17be":"# Ingesting the content","a3be2bd8":"# Devices against each age","057fa782":"span between dates of birth."}}