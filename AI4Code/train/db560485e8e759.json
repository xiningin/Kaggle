{"cell_type":{"4e71657c":"code","653325e2":"code","7411508c":"code","1c8934ad":"code","ed4c10e9":"code","05d5bfbd":"code","fbc8de50":"code","26f2d488":"code","91922063":"code","53ab16a1":"code","df0f95ca":"code","6cb58661":"code","3e6aa5b2":"code","5c9c207f":"markdown","9627cff0":"markdown"},"source":{"4e71657c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\n# sklearn imports\nfrom sklearn.preprocessing import StandardScaler, RobustScaler, MinMaxScaler, PowerTransformer, QuantileTransformer, Normalizer, OneHotEncoder, LabelEncoder\nfrom sklearn.compose import ColumnTransformer, make_column_transformer\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.neural_network import MLPClassifier, MLPRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\nfrom sklearn import svm\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier, GradientBoostingRegressor, AdaBoostRegressor\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.model_selection import StratifiedShuffleSplit,train_test_split, ShuffleSplit\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, mean_squared_log_error\n\n# Keras imports \nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Conv2D, MaxPooling2D\nfrom keras.utils import np_utils\nfrom keras.losses import mean_squared_logarithmic_error\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","653325e2":"# loading and verifying the shapes\ndf_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndf_sample_submission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\ndf_train.shape, df_test.shape, df_sample_submission.shape","7411508c":"# the pathern to submit in kaggle\ndf_sample_submission.head()","1c8934ad":"#spliting the target and join the data\ntarget = df_train['SalePrice']\ndf_train = df_train.drop('SalePrice', axis = 1)\ndf_train_test = pd.concat([df_train, df_test])\nprint(f'train_test_shape: {df_train_test.shape}')","ed4c10e9":"# checking NaN values in traintest dataframe\nimport operator\nNaNColumns_train_test = {}\nfor cols in df_train_test.columns:\n    if df_train_test[cols].isna().sum() > 0:\n        NaNColumns_train_test[cols] = df_train_test[cols].isna().sum()\nsorted_NaNColumns_train_test = sorted(NaNColumns_train_test.items(), key=operator.itemgetter(1), reverse = True)\nprint(sorted_NaNColumns_train_test)\nprint([i[0] for i in sorted_NaNColumns_train_test])\n        ","05d5bfbd":"train_test_columns = ['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu', 'LotFrontage', 'GarageYrBlt', 'GarageFinish', 'GarageQual', 'GarageCond', 'GarageType', 'BsmtCond', 'BsmtExposure', 'BsmtQual', 'BsmtFinType2', 'BsmtFinType1', 'MasVnrType', 'MasVnrArea', 'MSZoning', 'Utilities', 'BsmtFullBath', 'BsmtHalfBath', 'Functional', 'Exterior1st', 'Exterior2nd', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Electrical', 'KitchenQual', 'GarageCars', 'GarageArea', 'SaleType']\n\nfor i in train_test_columns:\n    df_train_test[i] = pd.Categorical(df_train_test[i]).codes","fbc8de50":"object_columns = [df_train_test.dtypes.keys()[i] for i, j in enumerate(df_train_test.dtypes.values) if j =='O']\nfor i in object_columns:\n    print(f'For {i} columns there is {len(df_train_test[i].value_counts())} diferent values!')","26f2d488":"\nfor i in object_columns:\n    print(f'The index of {i} is - {list(df_train_test.columns).index(i)}')\n    index_stored.append(list(df_train_test.columns).index(i))\n","91922063":"# Let's generate dummies variables here\ndf_train_test = pd.get_dummies(df_train_test)\n","53ab16a1":"df_train_test.shape","df0f95ca":"X = df_train_test.iloc[:df_train.shape[0], :].values\nX_teste = df_train_test.iloc[df_train.shape[0]:, :].values\n","6cb58661":"y","3e6aa5b2":"# my first submission with data transform \nrandom = RandomForestRegressor(n_estimators=1000)\ny = y.ravel()\nrandom.fit(X, y)\np = random.predict(X_teste)\n## Two forms to generate data to submit\nrandom_submission = pd.DataFrame({'Id': df_test['Id'].values, 'SalePrice': p})\nserie_submission = pd.Series(p, index = df_test['Id'], name = 'SalePrice')\n\nserie_submission.to_csv('submission_serie01.csv', header = True)\nrandom_submission.to_csv('submission01.csv', index = False)","5c9c207f":"## **run the model to test**","9627cff0":"## Result: 0.14760 (baseline is 0.40890)"}}