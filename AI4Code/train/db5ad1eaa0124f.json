{"cell_type":{"bba0bd14":"code","51ade282":"code","15c3b603":"code","7e78d633":"code","86e1704a":"code","cd50bc52":"code","069ee8ec":"code","ce040f7b":"code","afe0f70f":"code","a12a4135":"code","e08679b3":"code","e678da45":"code","f4dee50e":"code","8213a344":"code","20438a3c":"code","07af4f1f":"code","21038ec5":"code","e4e74b90":"code","c0a813ab":"code","b8484354":"code","fe6de7b8":"code","2e36af29":"code","2680af71":"code","7ae97849":"code","ab23335c":"code","ddf42fb6":"code","6f4baa72":"code","148b7060":"code","d1f62125":"code","2450671e":"code","c5d8e5dc":"code","741156da":"code","8ab19582":"code","a17f8753":"code","95fbe44f":"code","2b828251":"code","37da173e":"code","1aba85d6":"code","3b4364db":"code","15e67582":"code","46f80707":"code","5dbd5c91":"code","cb3cdfce":"code","ff0ab785":"code","c390d70d":"code","462cd6c3":"code","3eea58f0":"code","6f7e729b":"code","64ff4542":"code","192a21eb":"code","deed41ab":"code","bc1dfdb5":"code","d4dd40d3":"code","842d8ed8":"code","1490ee7d":"code","934f5958":"code","181cf937":"code","1dc15893":"code","d209ccdd":"code","78baceed":"code","c18b52b6":"code","1ae75bd2":"code","86e5d8a5":"code","aa83e5a5":"code","5956be0c":"code","e0dace4e":"code","0706e3f5":"code","756eb90a":"code","55b11784":"code","0b27a0e3":"code","16af5329":"code","2265e281":"code","1b3b9483":"code","9a3047be":"code","457f2062":"code","921b2826":"code","e632a4b0":"code","0a9c6c42":"code","6b6a88ca":"code","236fe86f":"code","7d9236a8":"code","17bb07d2":"code","c19e8cae":"code","a550d939":"code","3ecbc0be":"code","eae114fa":"code","6e1a9bf7":"code","097eaa3b":"code","6a1a0a25":"code","0fb5f44e":"code","69768d02":"code","9db04f40":"code","bc6c0473":"code","e9dbff7b":"code","59aeb182":"code","e6ef5e64":"code","1142ee57":"code","2b5d1165":"code","47e4d0b2":"code","20577055":"code","ad073e63":"code","bf742605":"code","0c1b66d7":"code","06ecf581":"code","258a597d":"code","aa25c590":"code","0682349c":"code","d954bfd3":"code","33fa862f":"code","7bf41574":"code","aa70759e":"code","b3681cba":"code","4715edd5":"code","1385a8f0":"code","9211d842":"code","13991505":"code","40d08400":"code","16f69c65":"code","b7d4a9b8":"code","ebcf361e":"code","56de3fca":"code","25a3eb3d":"code","406c7f32":"code","b9182b22":"code","ced4c204":"code","a9308b14":"code","92c6325b":"code","fcdc9ee6":"code","2a5934d4":"code","d69bc41b":"code","e9ba94ee":"code","bfefd828":"code","f869b74b":"code","a24da84b":"code","07dae88a":"code","0597d7c0":"markdown","174d2589":"markdown","4d73b63f":"markdown","0d2f778e":"markdown","cb153d43":"markdown","9e63c388":"markdown","c618bc0c":"markdown","86e2ab3c":"markdown","2cb07ac6":"markdown","2b76c232":"markdown","c4bade75":"markdown","e0f6132e":"markdown","1d3ac343":"markdown","9be0afc9":"markdown","7f6083a0":"markdown","dae69c52":"markdown","6aa1adf2":"markdown","e2979241":"markdown","03d07d9e":"markdown","6d51ccb7":"markdown","3961321e":"markdown","704fdfc7":"markdown","836822ef":"markdown","b6b31289":"markdown","ac1e62eb":"markdown","f5462a09":"markdown","4d9bb5af":"markdown","1d5f17b4":"markdown","f6eeb5c2":"markdown","3485116f":"markdown","b7b46bac":"markdown","9e7e5027":"markdown","204be970":"markdown","59e23b8e":"markdown","dae4af36":"markdown","3947f49e":"markdown","9f16f2f7":"markdown","7ada3b5f":"markdown","5b5b88bc":"markdown","577c36d6":"markdown","55e6a7d9":"markdown","d34dea27":"markdown","3941dcfb":"markdown","96c58b92":"markdown","fe06360d":"markdown","eb1c1088":"markdown","b8774b47":"markdown","8b503c57":"markdown","6e0ea3ff":"markdown","80f96af1":"markdown"},"source":{"bba0bd14":"import numpy as np","51ade282":"print(np.__version__)","15c3b603":"print(np.show_config())","7e78d633":"np.info(np.add)","86e1704a":"x=np.array([1,2,3,4])\nx","cd50bc52":"print(\"Test if none of the elements of the said array is zero:\")\nnp.all(x)","069ee8ec":"x = np.array([0,1,2,3])","ce040f7b":"x","afe0f70f":"np.all(x)","a12a4135":"x=np.array([1,0,0,0])\nx","e08679b3":"np.any(x)","e678da45":"x=np.array([0,0])\nx","f4dee50e":"np.any(x)","8213a344":"a = np.array([1,0,np.nan,np.inf])","20438a3c":"a","07af4f1f":"np.isfinite(a)","21038ec5":"a = np.array([1, 0, np.nan, np.inf])\nprint(\"Original array\")\nprint(a)\nprint(\"Test element-wise for NaN:\")\nprint(np.isnan(a))","e4e74b90":"a = np.array([1+1j, 1+0j, 4.5, 3, 2, 2j])","c0a813ab":"a","b8484354":"np.iscomplex(a)","fe6de7b8":"np.isreal(a)","2e36af29":"np.isscalar(3.1)","2680af71":"np.isscalar([3.1])","7ae97849":"print(\"Test if two arrays are element-wise equal within a tolerance:\")\nnp.allclose([1e10,1e-7], [1.00001e10,1e-8])","ab23335c":"np.allclose([1e10,1e-8], [1.00001e10,1e-9])","ddf42fb6":"np.allclose([1.0, np.nan], [1.0, np.nan])","6f4baa72":"np.allclose([1.0, np.nan], [1.0, np.nan], equal_nan=True)","148b7060":"x = np.array([3, 5])\ny = np.array([2, 5])","d1f62125":"x, y","2450671e":"np.greater(x, y)","c5d8e5dc":"np.greater_equal(x, y)","741156da":"np.less(x, y)","8ab19582":"np.less_equal(x, y)","a17f8753":"x = np.array([72, 79, 85, 90, 150, -135, 120, -10, 60, 100])\ny = np.array([72, 79, 85, 90, 150, -135, 120, -10, 60, 100.000001])","95fbe44f":"x, y","2b828251":"np.equal(x, y)","37da173e":"np.allclose(x, y)","1aba85d6":"x = np.array([1, 7, 13, 105])\nx","3b4364db":"print(\"Size of the memory occupied by the said array:\")\nprint(\"%d bytes\" % (x.size * x.itemsize))","15e67582":"x = np.zeros(10)\nx","46f80707":"x = np.ones(10)\nx","5dbd5c91":"x = np.ones(10)*5\nx","cb3cdfce":"x = np.arange(30, 71)\nx","ff0ab785":"x = np.arange(30, 71, 2)\nx","c390d70d":"np2d = np.identity(3)\nnp2d","462cd6c3":"rand_num = np.random.normal(0,1)\nrand_num","3eea58f0":"rand_num = np.random.normal(0,1,15)\nrand_num","6f7e729b":"v = np.arange(15,55)\nv","64ff4542":"v[1:-1]","192a21eb":"x = np.arange(10,22).reshape((3,4))\nx","deed41ab":"print(\"Each element of the array is:\")\nfor y in np.nditer(x):\n    print(y,end=\" \")\n    ","bc1dfdb5":"x = np.linspace(5,50,10)","d4dd40d3":"x","842d8ed8":"x = np.arange(21)","1490ee7d":"x","934f5958":"x[(x>=9)&(x<=15)] *=-1\nx","181cf937":"x=np.random.randint(0,10,5)","1dc15893":"x","d209ccdd":"x = np.array([1,2,34,45])\nx","78baceed":"y=np.random.randint(0,11,4)\ny","c18b52b6":"result = x*y","1ae75bd2":"result","86e5d8a5":"x = np.arange(10,22).reshape(3,4)\nx","aa83e5a5":"print(\"Number of rows and columns of the said matrix:\")\nx.shape","5956be0c":"np.eye(3)","e0dace4e":"x = np.ones((10,10))\nx","0706e3f5":"x[1:-1,1:-1] = 0\nx","756eb90a":"x = np.diag([1, 2, 3, 4, 5])\nx","55b11784":"x = np.zeros((4, 4))","0b27a0e3":"x[::2, 1::2] = 1\nx[1::2, ::2] = 1","16af5329":"x","2265e281":"x = np.random.random((3, 3, 3))\nx","1b3b9483":"x = np.array([[0,1],[2,3]])","9a3047be":"x","457f2062":"np.sum(x)","921b2826":"np.sum(x, axis=0)","e632a4b0":"np.sum(x, axis=1)","0a9c6c42":"x = np.array([4, 5])\ny = np.array([7, 10])","6b6a88ca":"np.dot(x, y)","236fe86f":"m = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])\nv = np.array([1, 1, 0])","7d9236a8":"result = np.empty_like(m)\nresult","17bb07d2":"for i in range(4):\n    result[i, :] = m[i, :] + v\n\nprint(result)","c19e8cae":"result[i, :]","a550d939":"for i in range(4):\n    m[i, 1:2]\nprint(m)","3ecbc0be":"m[1, 2:]","eae114fa":"import os","6e1a9bf7":"a = np.arange(20)","097eaa3b":"np.save('temp_arra.npy', a)","6a1a0a25":"if os.path.exists('temp_arra.npy'):\n    x2 = np.load('temp_arra.npy')\n    print(np.array_equal(a, x2))","0fb5f44e":"x = np.arange(10)\ny = np.arange(11, 20)","69768d02":"np.savez('temp_arra.npz', x=x, y=y)","9db04f40":"with np.load('temp_arra.npz') as data:\n    x2 = data['x']\n    y2 = data['y']\n    print(x2)\n    print(y2)","bc6c0473":"x = np.arange(12).reshape(4, 3)\nx","e9dbff7b":"header = 'col1 col2 col3'","59aeb182":"np.savetxt('temp.txt', x, fmt=\"%d\", header=header) ","e6ef5e64":"result = np.loadtxt('temp.txt')\nprint(result)","1142ee57":"a = np.array([1, 2, 3, 4, 5, 6])\na","2b5d1165":"a_bytes = a.tostring()\na_bytes","47e4d0b2":"a2 = np.fromstring(a_bytes, dtype=a.dtype)","20577055":"a2","ad073e63":"np.array_equal(a, a2)","bf742605":"a = [[1, 2], [3, 4]]\na","0c1b66d7":"x = np.array(a)\nx","06ecf581":"a2 = x.tolist()\na2","258a597d":"print(a == a2)","aa25c590":"import matplotlib.pyplot as plt","0682349c":"x = np.arange(0, 3 * np.pi, 0.2)\ny = np.sin(x)","d954bfd3":"plt.plot(x, y)\nplt.show()","33fa862f":"x = np.float32(0)\nprint(type(x))\npyval = x.item()\nprint(type(pyval))","7bf41574":"import numpy as np\ndef sum_matrix_Elements(m):\n    arra = np.array(m)   \n    element_sum = 0  \n    for p in range(len(arra)):  \n        for q in range(len(arra[p])):  \n            if arra[p][q] == 0 and p < len(arra)-1: \n                arra[p+1][q] = 0  \n            element_sum += arra[p][q]  \n    return element_sum\nm = [[1, 1, 0, 2],\n          [0, 3, 0, 3], \n          [1, 0, 4, 4]]\nprint(\"Original matrix:\")\nprint(m)\nprint(\"Sum:\")\nprint(sum_matrix_Elements(m))\n","aa70759e":"m = [[1, 1, 0, 2],\n          [0, 3, 0, 3], \n          [1, 0, 4, 4]]","b3681cba":"m","4715edd5":"arra = np.array(m)\narra","1385a8f0":"ele_sum = 0","9211d842":"for p in range(len(arra)):\n    for q in range(len(arra[p])):\n        print(arra[p][q], end =\" \")\n        if arra[p][q] == 0 and p < len(arra)-1:\n            arra[p+1][q] = 0\n        ele_sum += arra[p][q]\n    print(ele_sum)\n\n    ","13991505":"nums = np.array([[3, 2, np.nan, 1],\n                [10, 12, 10, 9],\n                [5, np.nan, 1, np.nan]])","40d08400":"nums","16f69c65":"np.isnan(nums).sum()","b7d4a9b8":"np.isnan(nums)","ebcf361e":"np.random.seed(10)","56de3fca":"np.random.rand(40)","25a3eb3d":"np.random.seed(200)","406c7f32":"cbrt = np.cbrt(7)","b9182b22":"nd1 = 200","ced4c204":"cbrt * np.random.randn(8, 5) + nd1","a9308b14":"nums = np.arange(16, dtype='int').reshape(-1, 4)","92c6325b":"nums","fcdc9ee6":"new_nums = nums[::-1]\nnew_nums","2a5934d4":"nums = np.array([[5.54, 3.38, 7.99],\n              [3.54, 4.38, 6.99],\n              [1.54, 2.39, 9.29]])\nnums","d69bc41b":"# Sort the said array by row in ascending order:\nnp.sort(nums, axis=1)","e9ba94ee":"# Sort the said array by column in ascending order:\nnp.sort(nums, axis=0)","bfefd828":"n=5\n\n# Elements of the said array greater than 5\nnums[nums > n]","f869b74b":"# Elements of the said array less than 6\nnums[nums < n]","a24da84b":"nums = np.array([[5.54, 3.38, 7.99],\n              [3.54, 8.32, 6.99],\n              [1.54, 2.39, 9.29]])\nprint(\"Original array:\")\nprint(nums)\nn = 8.32\nr = 18.32\nprint(\"\\nReplace elements of the said array which are equal to \",n,\"with\",r)\nprint(np.where(nums == n, r, nums))\nprint(\"\\nReplace elements with of the said array which are less than\",n,\"with\",r)\nprint(np.where(nums < n, r, nums))\nprint(\"\\nReplace elements with of the said array which are greater than\",n,\"with\",r)\nprint(np.where(nums > n, r, nums))\n","07dae88a":"nums = np.array([[[1, 5, 2, 1],\n               [4, 3, 5, 6],\n               [6, 3, 0, 6],\n               [7, 3, 5, 0],\n               [2, 3, 3, 5]],\n              \n              [[2, 2, 3, 1],\n               [4, 0, 0, 5],\n               [6, 3, 2, 1],\n               [5, 1, 0, 0],               \n               [0, 1, 9, 1]],\n              \n              [[3, 1, 4, 2],\n               [4, 1, 6, 0],\n               [1, 2, 0, 6],\n               [8, 3, 4, 0],               \n               [2, 0, 2, 8]]]) \nprint(\"Array:\")\nprint(nums)\n","0597d7c0":"###  NumPy program to create a three-dimension array with shape (3,5,4) and set to a variable.","174d2589":"# NumPy program to get help on the add function.","4d73b63f":"### NumPy program to create a vector of length 10 with values \u200b\u200bevenly distributed between 5 and 50","0d2f778e":"### NumPy program to create a 4x4 array with random values, now create a new array from the said array swapping first and last rows.","cb153d43":"### NumPy program to create an element-wise comparison (equal, equal within a tolerance) of two given arrays.","9e63c388":"### NumPy program to create a 3x3 identity matrix.","c618bc0c":"# NumPy program to test whether any of the elements of a given array is non-zero.\n\n","86e2ab3c":"### NumPy program to create a 3x3 identity matrix, i.e. diagonal elements are 1,the rest are 0","2cb07ac6":"### NumPy program to create a 3x4 matrix filled with values \u200b\u200bfrom 10 to 21.","2b76c232":"### NumPy program to save a given array to a text file and load it.","c4bade75":"###  NumPy program to convert a given list into an array, then again convert it into a list. Check initial list and final list are equal or not.","e0f6132e":"### NumPy program to create a 4x4 matrix in which 0 and 1 are staggered, with zeros on the main diagonal.\n\n","1d3ac343":"# NumPy program to test element-wise for NaN of a given array.","9be0afc9":"### NumPy program to create an array of 10 zeros, 10 ones, 10 fives.","7f6083a0":"### NumPy program to save two given arrays into a single file in compressed format (.npz format) and load it.","dae69c52":"### NumPy program to create a 5x5 zero matrix with elements on the main diagonal equal to 1, 2, 3, 4, 5.","6aa1adf2":"### NumPy program to convert a given array into bytes, and load it as array.\n\n","e2979241":"### NumPy program to create a two-dimensional array with shape (8,5) of random numbers. Select random numbers from a normal distribution (200,7).","03d07d9e":"### NumPy program to create an array with the values 1, 7, 13, 105 and determine the size of the memory occupied by the array","6d51ccb7":"# NumPy program to test a given array element-wise for finiteness (not infinity or not a Number).","3961321e":"### NumPy program to test element-wise for complex number, real number of a given array. Also test whether a given number is a scalar type or not.","704fdfc7":"### NumPy program to test whether two arrays are element-wise equal within a tolerance.","836822ef":"#  NumPy program to test whether none of the elements of a given array is zero.","b6b31289":"### NumPy program to create a 10x10 matrix, in which the elements on the borders will be equal to 1, and inside 0.\n\n","ac1e62eb":"### NumPy program to create a 3x3x3 array filled with arbitrary values.\n\n","f5462a09":"### NumPy program to convert numpy dtypes to native python types.","4d9bb5af":"### NumPy program to generate a random number between 0 and 1.","1d5f17b4":"### NumPy program to create a 3X4 array using and iterate over it.","f6eeb5c2":"### NumPy program to compute sum of all elements, sum of each column and sum of each row of a given array.","3485116f":"###  NumPy program to compute the inner product of two given vectors.","b7b46bac":"### NumPy program to find the number of rows and columns of a given matrix.","9e7e5027":"### NumPy program to add elements in a matrix. If an element in the matrix is 0, we will not add the element below this element.","204be970":"### NumPy program to create a one dimensional array of forty pseudo-randomly generated values. Select random numbers from a uniform distribution between 0 and 1.","59e23b8e":"### NumPy program to multiply the values \u200b\u200bof two given vectors.","dae4af36":"### NumPy program to sort a given array by row and column in ascending order.","3947f49e":"### NumPy program to add a vector to each row of a given matrix.","9f16f2f7":"### NumPy program to create an array of all the even integers from 30 to 70","7ada3b5f":"### NumPy program to compute the x and y coordinates for points on a sine curve and plot the points using matplotlib.\n\n","5b5b88bc":"### NumPy program to create a vector with values ranging from 15 to 55 and print all values except the first and last.","577c36d6":"# More Exerise is Coming............\ud83d\ude0e\ud83d\udce3","55e6a7d9":"### NumPy program to create an element-wise comparison (greater, greater_equal, less and less_equal) of two given arrays.","d34dea27":"# NumPy program to get the numpy version and show numpy build configuration.","3941dcfb":"### NumPy program to create an array of the integers from 30 to 70.","96c58b92":"###  NumPy program to extract all numbers from a given array which are less and greater than a specified number.","fe06360d":"### NumPy program to find the missing data in a given array.","eb1c1088":"### NumPy program to create a vector of length 5 filled with arbitrary integers from 0 to 10.\n","b8774b47":"### NumPy program to replace all numbers in a given array which is equal, less and greater to a given number.","8b503c57":"### NumPy program to save a given array to a binary file.","6e0ea3ff":"###  NumPy program to generate an array of 15 random numbers from a standard normal distribution.","80f96af1":"### NumPy program to create a vector with values \u200b\u200bfrom 0 to 20 and change the sign of the numbers in the range from 9 to 15."}}