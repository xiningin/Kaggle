{"cell_type":{"014c0c7a":"code","0ddb99b8":"code","441a3767":"code","ac6ae5af":"code","a65786e7":"code","0086814e":"code","c6e4dd06":"code","ca1fdfcc":"code","9cec2cd0":"code","89a27a0c":"code","5897c7b9":"code","04c61c5c":"code","eff92292":"markdown","bc55b44e":"markdown","f18ece43":"markdown","2f12fe84":"markdown"},"source":{"014c0c7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0ddb99b8":"import csv\nimport matplotlib.pylab as pylab\n%matplotlib inline\n\nfrom mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport datetime","441a3767":"#tab = pd.read_csv(\"..\/input\/country-pop-data\/country_pop_data.csv\")\ncon = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")\ncon_US = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed_US.csv\")\nfont = {'family': 'serif',\n        'color':  'darkred',\n        'weight': 'normal',\n        'size': 16,\n        }","ac6ae5af":"con[\"Province\/State\"].fillna(\"*\", inplace = True)\ndf = con\ncountries = [ \"Australia\",\"Canada\", \"China\"]\nchina = df.loc[df['Country\/Region'] == 'China']\naus = df.loc[df['Country\/Region'] == 'Australia']\ncan = df.loc[df['Country\/Region'] == 'Canada']\nframes = [aus,can,china]\ncountry_v =0\ndf1=df.drop(df.index[2:-1])\nfor each_country in countries:\n    #print(country_v)\n    state = \"*\"\n    #print(each_country)\n    df1.iloc[country_v,0]=state\n    df1.iloc[country_v,1]=each_country\n    frame = frames[country_v]\n   \n    length = len(frame.columns)\n    #print(frame)\n    #print(length,state,each_country)\n    for y in range(length-4):\n        \n        z=y+4\n        total = 0\n       # print(frame.columns.values[z])\n       \n        for x in range(len(frame)):\n            \n            new = frame.iloc[x,z]\n            \n            total = total + new\n           # print(new,total)\n            df1.iloc[country_v,z]= total\n    country_v+=1        \n   # print(total)   ","a65786e7":"frames = [df1, con]\nconfirmed = pd.concat(frames)","0086814e":"doubling = pd.DataFrame(columns=['SNo','Province\/State','Country\/Region','Lat','Long','Confirmed','Doubling Rate'])\ncount=0\ncon = confirmed\nfor i in range(len(con)): \n        count+=1\n        latest = con.iloc[i,-1]\n        state = con.iloc[i,0] \n        country = con.iloc[i,1]\n        lat =con.iloc[i,2]\n        long = con.iloc[i,3]\n        \n        doub = latest\/2\n        z = len(con.columns)-1\n        v=np.nan\n        if latest > 25:\n            for j in range(z):\n          \n                value = con.iloc[i,z-j]\n             \n                if value <= doub:\n              \n                    v=j\n                    \n                    break\n        d = (state,country,v)        \n            #doubling = pad.concat(state,country,v)\n        doubling.loc[count] = [count,state,country,lat, long,latest,v]","c6e4dd06":"last_date_in_df  = con.columns.values[-1]\nprint(\"Data goes up to: \",last_date_in_df) ","ca1fdfcc":"doub=doubling.loc[doubling[\"Doubling Rate\"]<7]\ndoub_w=doubling.loc[doubling[\"Doubling Rate\"]<10]\ndoub1 = doub.drop(columns=\"Lat\")\ndoub1 = doub1.drop(columns=\"Long\")\ndoub1 = doub1.drop(columns=\"SNo\")\ndoub1 = doub1.sort_values(by ='Country\/Region')\ndoub1['Province\/State'].fillna('*',inplace=True)\nprint(\"AREAS OF FASTEST SPREAD (CASES>25)\")\ncount = doub1.shape[0] \ndoub1.head(count)","9cec2cd0":"# Counties that are doubling on a world map\nimport folium\nimport math\n\ndoubling = doubling[doubling['Doubling Rate'] == doubling['Doubling Rate'].max()]\nmap = folium.Map(location=[10, 0], tiles = \"cartodbpositron\", zoom_start=3.0,max_zoom=6,min_zoom=2)\nfor i in range(0,len(doub_w)):\n    folium.Circle(location=[doub_w.iloc[i,3],\n                            doub_w.iloc[i,4]],\n                           \n                            tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+doub_w.iloc[i]['Country\/Region']+\"<\/h5>\"+\n                            \"<div style='text-align:center;'>\"+str(np.nan_to_num(doub_w.iloc[i]['Province\/State']))+\"<\/div>\"+\n                            \"<hr style='margin:10px;'>\"+\n                            \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n                            \"<li>Cases: \"+str(doub_w.iloc[i,5])+\"<\/li>\"+\n                             \"<li>Doubling Rate: \"+str(doub_w.iloc[i,-1])+\"<\/li>\"+\n                            \n                            \"<\/ul>\"\n                            ,\n                            #radius=(math.sqrt(doub.iloc[i,5])*4000 ),\n                            radius=(int((np.log(doub_w.iloc[i,-1]+1.00001)))+0.2)*50000,\n                            color='orange',\n                            fill=True,\n                            fill_color='orange').add_to(map)\nmap    ","89a27a0c":"doubling_US = pd.DataFrame(columns=['SNo','Province\/State','Admin Area','Lat','Long','Confirmed','Doubling Rate'])\ncount=0\nfor i in range(len(con_US)): \n        count+=1\n        latest = con_US.iloc[i,-1]\n        state = con_US.iloc[i,6] \n        admin = con_US.iloc[i,5] \n        country = con_US.iloc[i,7]\n        lat =con_US.iloc[i,8]\n        long = con_US.iloc[i,9]\n        doub = latest\/2\n        z = len(con_US.columns)-1\n        v=np.nan\n        if latest > 25:\n            for j in range(z):\n          \n                value = con_US.iloc[i,z-j]\n             \n                if value <= doub:\n              \n                    v=j\n                    \n                    break\n        d = (state,country,v)        \n           \n        doubling_US.loc[count] = [count,state,admin,lat, long,latest,v]","5897c7b9":"doub_US=doubling_US.loc[doubling_US[\"Doubling Rate\"]<4]\ndoub_USA=doubling_US.loc[doubling_US[\"Doubling Rate\"]<5]\ndoub1_US = doub_US.drop(columns=\"Lat\")\ndoub1_US = doub1_US.drop(columns=\"Long\")\ndoub1_US = doub1_US.drop(columns=\"SNo\")\ndoub1_US = doub1_US.sort_values(by ='Admin Area')\ndoub1_US['Province\/State'].fillna('*',inplace=True)\nprint(\"AREAS OF FASTEST SPREAD (CASES > 25)\")\ncount = doub1_US.shape[0] \ndoub1_US.head(count)","04c61c5c":"\n#doub_USA=doubling_US.loc[doubling_US[\"Doubling Rate\"]<5]\ndoubling = doubling[doubling['Doubling Rate'] == doubling['Doubling Rate'].max()]\nmap_USA = folium.Map(location=[31, -84], tiles = \"cartodbpositron\", zoom_start=4.0,max_zoom=7,min_zoom=2)\nfor i in range(0,len(doub_USA)):\n    folium.Circle(location=[doub_USA.iloc[i,3],\n                            doub_USA.iloc[i,4]],\n                           \n                            tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+doub_USA.iloc[i]['Admin Area']+\"<\/h5>\"+\n                            \"<div style='text-align:center;'>\"+str(np.nan_to_num(doub_USA.iloc[i]['Province\/State']))+\"<\/div>\"+\n                            \"<hr style='margin:10px;'>\"+\n                            \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n                            \"<li>Cases: \"+str(doub_USA.iloc[i,5])+\"<\/li>\"+\n                            \"<li>Doubling Rate: \"+str(doub_USA.iloc[i,-1])+\"<\/li>\"+\n                            \n                            \"<\/ul>\"\n                            ,\n                            #radius=(math.sqrt(doub_USA.iloc[i,5])*4000 ),\n                            radius=(int((np.log(doub_USA.iloc[i,-1]+1.00001)))+0.2)*50000,\n                            color='red',\n                            fill=True,\n                            fill_color='red').add_to(map_USA)\nmap_USA","eff92292":"The map shows areas that have doubling of case numbers within 5 days.","bc55b44e":"The map shows countries that have had a doubling of case numbers within 10 days.","f18ece43":"# COVID-19 Hotspots\n\nOne way of watching the spread of the SARS-Cov-2 virus is by calculating the doubling rate. This is the number of days that it takes for COVIS-19 case number to double.\nThe smaller the doubling rate, the faster the spread of the virus through the population. This is of most concerning in smaller countries or countries with less developed health infrastructure.\n\n\nThese countries show a doubling of cases within 7 days.","2f12fe84":"**WHAT ABOUT THE US AND US TERRITORIES?**\n\nThese areas show a doubling of cases within 4 days."}}