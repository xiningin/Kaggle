{"cell_type":{"bf8ecf8e":"code","6a2770ef":"code","143e696f":"code","07abf809":"code","549f1473":"code","8c175743":"code","f847df04":"code","83b8ba05":"code","41fe9514":"code","727090cf":"code","4b95aa75":"code","a4e59e44":"markdown","58f4d862":"markdown","56b16e6e":"markdown","33dd2fe3":"markdown","f1dcf5ad":"markdown","5a667ff2":"markdown","bb2f312c":"markdown","c646622f":"markdown"},"source":{"bf8ecf8e":"import numpy as np\nimport pandas as pd\nimport nltk\nimport json\nimport re\nimport csv\nfrom tqdm import tqdm\npd.set_option('display.max_colwidth', 300)\n\ndata = []\n\nwith open(\"\/kaggle\/input\/cmu-book-summary-dataset\/booksummaries.txt\", 'r') as f:\n    reader = csv.reader(f, dialect='excel-tab')\n    for row in tqdm(reader):\n        data.append(row)","6a2770ef":"book_index = []\nbook_id = []\nbook_author = []\nbook_name = []\nsummary = []\ngenre = []\na = 1\nfor i in tqdm(data):\n    book_index.append(a)\n    a = a+1\n    book_id.append(i[0])\n    book_name.append(i[2])\n    book_author.append(i[3])\n    genre.append(i[5])\n    summary.append(i[6])\n\ndf = pd.DataFrame({'Index': book_index, 'ID': book_id, 'BookTitle': book_name, 'Author': book_author,\n                       'Genre': genre, 'Summary': summary})\ndf.head()","143e696f":"df.isna().sum()\n\ndf = df.drop(df[df['Genre'] == ''].index)\ndf = df.drop(df[df['Summary'] == ''].index)\n\n\ngenres_cleaned = []\nfor i in df['Genre']:\n    genres_cleaned.append(list(json.loads(i).values()))\ndf['Genres'] = genres_cleaned\n\n","07abf809":"def clean_summary(text):\n    text = re.sub(\"\\'\", \"\", text)\n    text = re.sub(\"[^a-zA-Z]\",\" \",text)\n    text = ' '.join(text.split())\n    text = text.lower()\n    return text\n\ndf['clean_summary'] = df['Summary'].apply(lambda x: clean_summary(x))\ndf.head(2)","549f1473":"from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom nltk.corpus import stopwords\n\n\ndf['GenreString'] = df['Genres'].apply(lambda x: ' '.join(x))\n\n#get a combined text that includes author's name and associated genres\ndf[\"combined_text\"] = df[\"clean_summary\"] + \" \" + df[\"Author\"] + \" \" + df[\"GenreString\"]\n\n\n\"\"\"stopwords = stopwords.words('english')\ndf['text_without_stopwords'] = df['combined_text'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stopwords)]))\ncv = CountVectorizer()\ncount_matrix = cv.fit_transform(df['text_without_stopwords'])\"\"\"\n\ntf = TfidfVectorizer(analyzer = \"word\", ngram_range=(1,2), min_df=0, stop_words='english')\n\ntfidf_matrix = tf.fit_transform(df['combined_text'])\n\ncosine =  cosine_similarity(tfidf_matrix, tfidf_matrix)\n\n\n\n","8c175743":"def get_title_from_index(Index):\n    return df[df.Index == Index][\"BookTitle\"].values[0]\ndef get_index_from_title(BookTitle):\n    return df[df.BookTitle == BookTitle][\"Index\"].values[0]\n\ndef get_recommendations(book):\n    book_index = get_index_from_title(book)\n    similar_books = list(enumerate(cosine[book_index]))\n    sortedbooks = sorted(similar_books, key = lambda x:x[1], reverse=True)[1:]\n    i = 0\n    for book in sortedbooks:\n        print(get_title_from_index(book[0]) + \" by \" + df.Author[df[\"Index\"] == book[0]])\n        i = i+1\n        if i>10:\n            break","f847df04":"print(get_recommendations(\"The Stand\"))","83b8ba05":"print(get_recommendations(\"A Clockwork Orange\"))","41fe9514":"print(get_recommendations(\"Dune\"))","727090cf":"print(get_recommendations(\"Oliver Twist\"))","4b95aa75":"print(get_recommendations('White Noise'))","a4e59e44":"### 1.2. Converting Data into a Dataframe","58f4d862":"### 1.3. Cleaning up Genres","56b16e6e":"# A Simple Book Recommendation System\n\nThis is a simple book recommender that analyzes the summary of a particular book and recommends book similar to it. This uses the CMU Book Summaries Dataset and since that dataset contains less than 20,000 books, the efficacy of this algorithm will be relatively limited. ","33dd2fe3":"### 1.4. Cleaning up the Summaries","f1dcf5ad":"## 3. Extensions and Improvements\n\nThis is just the first draft of the system. I plan on improving the model, first tryinf Tfidf Vectorizer and then somehow finding a way increase the relative importance of Author and Genres as compared to the text of the summary itself. Any suggestions would be greatly welcomed.","5a667ff2":"I define a simple function that extracts the books that are most similar to the entered book based on their cosine similarities. ","bb2f312c":"## 1 Data Cleaning\n\n### 1.1. Importing Data from the TXT file","c646622f":"## 2. Model\n\n**STEPS:**\n1. First, I create a combined text field that takes the cleaned book summary, the author's name and the associated genres and combines them. \n2. I apply the Count Vectorizer on it to create a count matrix.\n3. I calculate the cosine similarity \n\nNOTE: I initially intended on using the million books dataset from Goodreads. However, both my PC and Google Colab kept on crashing while trying to calculate the cosine similarities. Hence, I settled for a smaller dataset."}}