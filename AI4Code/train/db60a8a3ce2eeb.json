{"cell_type":{"d87c8e22":"code","d0723e19":"code","d0c019ad":"code","8dbae883":"code","d10c63d1":"code","a4229d9e":"code","a19aa1f3":"code","fafdbb06":"code","a2ae4192":"code","7ac658b7":"code","0333c9a6":"markdown","cae14a50":"markdown","1fb752a6":"markdown"},"source":{"d87c8e22":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm_notebook\nimport IPython\nimport IPython.display\nimport PIL\nimport pickle\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d0723e19":"DATA = Path('..\/input\/freesound-audio-tagging-2019')\n#PREPROCESSED = Path('..\/input\/fat2019_prep_mels1')\nPREPROCESSED = Path('work\/fat2019_prep_mels1')\nWORK = Path('work')\nPath(PREPROCESSED).mkdir(exist_ok=True, parents=True)\nPath(WORK).mkdir(exist_ok=True, parents=True)\n\nCSV_TRN_CURATED = DATA\/'train_curated.csv'\nCSV_TRN_NOISY = DATA\/'train_noisy.csv'\nCSV_SUBMISSION = DATA\/'sample_submission.csv'\n\nTRN_CURATED = DATA\/'train_curated'\nTRN_NOISY = DATA\/'train_noisy'\nTEST = DATA\/'test'\n\nMELS_TRN_CURATED = PREPROCESSED\/'mels_train_curated.pkl'\nMELS_TRN_NOISY = PREPROCESSED\/'mels_train_noisy.pkl'\nMELS_TEST = PREPROCESSED\/'mels_test.pkl'\n\nCSV_TRN_NOISY_BEST50S = PREPROCESSED\/'trn_noisy_best50s.csv'\nMELS_TRN_NOISY_BEST50S = PREPROCESSED\/'mels_trn_noisy_best50s.pkl'\n\ntrn_curated_df = pd.read_csv(CSV_TRN_CURATED)\ntrn_noisy_df = pd.read_csv(CSV_TRN_NOISY)\ntest_df = pd.read_csv(CSV_SUBMISSION)","d0c019ad":"import librosa\nimport librosa.display\nimport random\n\nfrom fastai import *\nfrom fastai.callbacks import *\nfrom fastai.vision import *\nfrom fastai.vision.data import *\n\n\ndef read_audio(conf, pathname, trim_long_data):\n    y, sr = librosa.load(pathname, sr=conf.sampling_rate)\n    # trim silence\n    if 0 < len(y): # workaround: 0 length causes error\n        y, _ = librosa.effects.trim(y) # trim, top_db=default(60)\n    # make it unified length to conf.samples\n    if len(y) > conf.samples: # long enough\n        if trim_long_data:\n            y = y[0:0+conf.samples]\n    else: # pad blank\n        padding = conf.samples - len(y)    # add padding at both ends\n        offset = padding \/\/ 2\n        y = np.pad(y, (offset, conf.samples - len(y) - offset), conf.padmode)\n    return y\n\n\ndef audio_to_melspectrogram(conf, audio):\n    spectrogram = librosa.feature.melspectrogram(audio, \n                                                 sr=conf.sampling_rate,\n                                                 n_mels=conf.n_mels,\n                                                 hop_length=conf.hop_length,\n                                                 n_fft=conf.n_fft,\n                                                 fmin=conf.fmin,\n                                                 fmax=conf.fmax)\n    spectrogram = librosa.power_to_db(spectrogram)\n    spectrogram = spectrogram.astype(np.float32)\n    return spectrogram\n\n\ndef show_melspectrogram(conf, mels, title='Log-frequency power spectrogram'):\n    librosa.display.specshow(mels, x_axis='time', y_axis='mel', \n                             sr=conf.sampling_rate, hop_length=conf.hop_length,\n                            fmin=conf.fmin, fmax=conf.fmax)\n    plt.colorbar(format='%+2.0f dB')\n    plt.title(title)\n    plt.show()\n\n\ndef read_as_melspectrogram(conf, pathname, trim_long_data, debug_display=False):\n    x = read_audio(conf, pathname, trim_long_data)\n    mels = audio_to_melspectrogram(conf, x)\n    if debug_display:\n        IPython.display.display(IPython.display.Audio(x, rate=conf.sampling_rate))\n        show_melspectrogram(conf, mels)\n    return mels\n\n\nclass conf:\n    sampling_rate = 44100\n    duration = 2 # sec\n    hop_length = 347*duration # to make time steps 128\n    fmin = 20\n    fmax = sampling_rate \/\/ 2\n    n_mels = 128\n    n_fft = n_mels * 20\n    padmode = 'constant'\n    samples = sampling_rate * duration\n\n\ndef get_default_conf():\n    return conf\n\n    \ndef set_fastai_random_seed(seed=42):\n    # https:\/\/docs.fast.ai\/dev\/test.html#getting-reproducible-results\n\n    # python RNG\n    random.seed(seed)\n\n    # pytorch RNGs\n    import torch\n    torch.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    if torch.cuda.is_available(): torch.cuda.manual_seed_all(seed)\n\n    # numpy RNG\n    import numpy as np\n    np.random.seed(seed)","8dbae883":"def mono_to_color(X, mean=None, std=None, norm_max=None, norm_min=None, eps=1e-6):\n    # Stack X as [X,X,X]\n    X = np.stack([X, X, X], axis=-1)\n\n    # Standardize\n    mean = mean or X.mean()\n    X = X - mean\n    std = std or X.std()\n    Xstd = X \/ (std + eps)\n    _min, _max = Xstd.min(), Xstd.max()\n    norm_max = norm_max or _max\n    norm_min = norm_min or _min\n    if (_max - _min) > eps:\n        # Normalize to [0, 255]\n        V = Xstd\n        V[V < norm_min] = norm_min\n        V[V > norm_max] = norm_max\n        V = 255 * (V - norm_min) \/ (norm_max - norm_min)\n        V = V.astype(np.uint8)\n    else:\n        # Just zero\n        V = np.zeros_like(Xstd, dtype=np.uint8)\n    return V\n\n\ndef convert_wav_to_image(df, source):\n    X = []\n    for i, row in tqdm_notebook(df.iterrows()):\n        x = read_as_melspectrogram(conf, source\/str(row.fname), trim_long_data=False)\n        x_color = mono_to_color(x)\n        X.append(x_color)\n    return X\n\n\ndef save_as_pkl_binary(obj, filename):\n    \"\"\"Save object as pickle binary file.\n    Thanks to https:\/\/stackoverflow.com\/questions\/19201290\/how-to-save-a-dictionary-to-a-file\/32216025\n    \"\"\"\n    with open(filename, 'wb') as f:\n        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)\n\n\ndef load_pkl(filename):\n    \"\"\"Load pickle object from file.\"\"\"\n    with open(filename, 'rb') as f:\n        return pickle.load(f)","d10c63d1":"conf = get_default_conf()\n\ndef convert_dataset(df, source_folder, filename):\n    X = convert_wav_to_image(df, source=source_folder)\n    save_as_pkl_binary(X, filename)\n    print(f'Created {filename}')\n    return X\n\nconvert_dataset(trn_curated_df, TRN_CURATED, MELS_TRN_CURATED);\nconvert_dataset(test_df, TEST, MELS_TEST);","a4229d9e":"df = trn_noisy_df.copy()\ndf['singled'] = ~df.labels.str.contains(',')\nsingles_df = df[df.singled]\n\ncat_gp = (singles_df.groupby(\n    ['labels']).agg({\n    'fname':'count'\n}).reset_index()).set_index('labels')\n\nplot = cat_gp.plot(\n    kind='barh',\n    title=\"Number of samples per label\",\n    figsize=(15,20))\nplot.set_xlabel(\"Noisy Set's Number of Samples\", fontsize=20)\nplot.set_ylabel(\"Label\", fontsize=20);","a19aa1f3":"labels = singles_df.labels.unique()\nlabels, len(labels)","fafdbb06":"idxes_best50s = np.array([random.choices(singles_df[(singles_df.labels == l)].index, k=50)\n                          for l in labels]).ravel()\nbest50s_df = singles_df.loc[idxes_best50s]\n\ngrp = (best50s_df.groupby(\n    ['labels']).agg({\n    'fname':'count'\n}).reset_index()).set_index('labels')\ngrp.plot( kind='barh', title=\"Best 50s' Number of samples per label\", figsize=(15,20));","a2ae4192":"best50s_df.to_csv(CSV_TRN_NOISY_BEST50S, index=False)","7ac658b7":"# Convert noisy set first\n#X_trn_noisy = convert_dataset(trn_noisy_df, TRN_NOISY, MELS_TRN_NOISY)\n\n# Then choose preprocessed data for 50s, and save it\n#X = [X_trn_noisy[i] for i in idxes_best50s]\n#save_as_pkl_binary(X, MELS_TRN_NOISY_BEST50S)","0333c9a6":"# Code to create FAT2019 Preprocessed Mel-spectrogram Dataset\n\nThis is the code to create [FAT2019 Preprocessed Mel-spectrogram Dataset](https:\/\/www.kaggle.com\/daisukelab\/fat2019_prep_mels1).\n\nCreating noisy set is commented out due to kernel memory restriction. You can fully run in your local environment. No GPU used.","cae14a50":"## Creating Best 50s","1fb752a6":"### Now best 50s are selected\n\nMaking preprocessed data is as follows, but you have to run locally. Kernel cannot hold all the noisy preprocessed data on memory."}}