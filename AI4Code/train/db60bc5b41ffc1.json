{"cell_type":{"f57a062b":"code","f64061e3":"code","80f4c655":"code","a9198d0b":"code","ca545f9f":"code","6a0a614f":"code","2f9b4f6f":"code","e0b0c48e":"code","6658fdc6":"markdown","af6edff3":"markdown","6c340302":"markdown","3e278c62":"markdown","119b6407":"markdown","798ec476":"markdown","d3a2e2ae":"markdown","8d4af701":"markdown","20336845":"markdown"},"source":{"f57a062b":"#Packages to load\nimport numpy as np #Linear algebra\nimport pandas as pd #Data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split #Split arrays into train and test subsets\nfrom sklearn.linear_model import LogisticRegression #ML prediction model","f64061e3":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")","80f4c655":"train_data.head()","a9198d0b":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","ca545f9f":"train_data.info()","6a0a614f":"train_data['Age']=train_data['Age'].fillna((train_data[\"Age\"].mean()))\ntest_data['Age']=test_data['Age'].fillna((train_data[\"Age\"].mean()))","2f9b4f6f":"train_data[\"Sex\"] = (train_data['Sex'].astype('category')).cat.codes\ntest_data[\"Sex\"] = (test_data['Sex'].astype('category')).cat.codes","e0b0c48e":"y = train_data[\"Survived\"] #The variable \"y\" has the (target) value of who died and survived.\ncategories = [\"Pclass\", \"Sex\", \"Age\"] #The variable \"categories\" has all three columns values (class, gender & age). \nX = pd.get_dummies(train_data[categories]) #converts the data in the (train-)categories to indicators (= 0's and 1's) instead of the labels.\nX_test = pd.get_dummies(test_data[categories])#converts the data in the (test-)categories to indicators (= 0's and 1's) instead of the labels.\n\n\nlog_reg = LogisticRegression(max_iter=500) #Built in function to predict the probability of a categorical variable.\nlog_reg.fit(X, y) # Fit the logistic regression model according to the given training data.\npredictions = log_reg.predict(X_test) #After training the model, the predictions over the test dataset happens.\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","6658fdc6":"_____\nNow, the logistic regression model is exercised.\n\nI have chose the \"Pclass\", \"Sex\" and \"Age\" columns, as I thought these were interesting to investigate - whether the gender, age and social class had anything to do with the odds of survival (which it probably did).","af6edff3":"In order to fill out the missing values in Age, I am using .fillna(), to fill out the spots with the mean age.\n\nSince the train and test dataset is not the same length, the mean would come out different, so I have replaced the missing values in test with the output I got from the train data.","6c340302":"_____\nThe .astype() function can convert an exsisting column to category type, as I have done  - since this type takes a limitied number of values (such as gender).\nI am obtaining\/returning the code by using .cat.codes. ","3e278c62":"____\nThe following dataset is my \"test set\" and contains 481 rows of data, but does not contain the \"Survived\" column - as I am predicting who will survive or not. Here, the dataset is loaded into a variable called **\"test_data\"**.","119b6407":"______\nBefore getting started with the predictions, I wanted to explore the data a bit. ","798ec476":"_____\n\nThe .head() function helps me gain visual sight into the first lines of rows and columns.","d3a2e2ae":"Based on this output, there is, e.g, missing values in Age and Cabin. \nSome of the categories are ints or floats, which is relevant in relation to using \"Age\" in my predictions. ","8d4af701":"_______","20336845":"I am using logistic regression for this test model, to predict the likelihood of an event happening. Here, that would be; who will survive and who will die on the titanic?\n\n_____\nThe following dataset is my \"training set\" and contains all 891 rows of data. Here, the dataset is loaded into a variable called **\"train_data\"**."}}