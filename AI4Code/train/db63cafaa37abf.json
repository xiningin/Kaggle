{"cell_type":{"9a86ca49":"code","d6229d31":"code","498beabd":"code","f47e0df8":"code","dcbc3a8c":"code","c40dc3eb":"code","a1835275":"markdown","5428f853":"markdown","98cbb96c":"markdown","09564567":"markdown"},"source":{"9a86ca49":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# visualiation tools\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n# import calmap\nimport folium\nplt.style.use('ggplot')\n\n# sci-kit learn tools\nfrom scipy.stats import skew\n\n# import random numbers\nfrom random import random, randint   \n\n# ignoreing sklearn warnings\nimport warnings\nfrom sklearn.exceptions import DataConversionWarning\nwarnings.filterwarnings(action='ignore', category=DataConversionWarning)\n# this will filter out a lot of future warnings from statsmodels\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# import library for Standardrize feature scales \nfrom sklearn.preprocessing import StandardScaler\n\nsns.set_style('whitegrid')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d6229d31":"covid_19 = pd.read_csv(\"\/kaggle\/input\/saudi-covid19-time-series-data\/New_Saudi_Cities_COVID-19.csv\")\ncovid_19.head()","498beabd":"covid_19.dtypes","f47e0df8":"covid_19['Date'] = pd.to_datetime(covid_19['Date'])\ncovid_19 = covid_19.sort_values(by=\"Date\")\ncovid_19['Date'] = covid_19['Date'].dt.strftime('%m\/%d\/%Y')\ncovid_19.dtypes\n","dcbc3a8c":"import plotly.graph_objects as go\n\nformated_gdf = covid_19.groupby(['Date', 'Country','City','Lat','Long'])['Cases', 'TotalDeaths'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['size'] = formated_gdf['Cases'].pow(0.3)\n\nfig = px.scatter_geo(formated_gdf, lat='Lat', lon='Long', locations = None, \n                     color=\"Cases\", size='Cases', hover_name=\"City\", \n                     range_color= [0, max(formated_gdf['Cases'])+2], animation_frame=\"Date\", projection=\"natural earth\",\n                     color_discrete_sequence= px.colors.sequential.Plasma_r,\n                     title='Spread over time')\n# fig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n# fig.update(layout_coloraxis_showscale=False)\n","c40dc3eb":"# fig.write_(\"saudi_map.pdf\")\nfig.write_html(\"saudi_map.html\")\n# fig.write_image(\"saudi_map.png\")","a1835275":"## Change date type and sort the dataframe by date","5428f853":"## Explore saudi cities covid 19 cases dataset","98cbb96c":"## Save plot as html file","09564567":"## Plot covid 19 cases on saudi cities  "}}