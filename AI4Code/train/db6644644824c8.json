{"cell_type":{"63a35792":"code","9a2d1593":"code","af1925b1":"code","4fbd6f48":"code","12549028":"code","0a593943":"code","8314152a":"code","7d465f39":"code","d2baf648":"code","1113dda4":"code","a2b1e41f":"code","aa7322b0":"code","2fb626da":"code","4f5be70b":"code","ee594a4d":"code","e5645a71":"code","e6fc19cc":"code","700f1fb4":"code","28aaf71f":"code","c234a896":"code","e50cb2a0":"code","ea500146":"code","983af778":"code","0ed94360":"code","aa030678":"code","09a4843e":"code","d461de21":"code","d3e99c6e":"code","4d2c1ce5":"code","4d64afb7":"code","811f6eb4":"code","43fb8317":"code","ba283630":"code","3bec7f8e":"code","1b867101":"code","030fd833":"markdown","98ee1b8f":"markdown","5d5afa41":"markdown","bcc08423":"markdown","446ad127":"markdown","a26fdc0f":"markdown","8a060b40":"markdown","c9f1bfa9":"markdown","e0a5d685":"markdown","318e2c3c":"markdown","c4aacc0e":"markdown","28804d34":"markdown","ef14de1d":"markdown","4fe75fcb":"markdown","3f5136f7":"markdown","9072bb34":"markdown","73dccf00":"markdown","0f16dd22":"markdown","5e3475f1":"markdown","5745b843":"markdown","02214f86":"markdown","5485aa89":"markdown","3338cdb6":"markdown","0a1ead27":"markdown"},"source":{"63a35792":"import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n%matplotlib inline","9a2d1593":"df=pd.read_csv('\/kaggle\/input\/real-estate-price-prediction\/Real estate.csv')","af1925b1":"df.head()","4fbd6f48":"df.shape","12549028":"df.info()","0a593943":"df.describe()","8314152a":"plt.figure(figsize=(8,3))\nsns.displot(x=df['Y house price of unit area'], kde=True, aspect=2, color='purple')\nplt.xlabel('house price of unit area')","7d465f39":"ax = sns.heatmap(df.corr(),annot=True,linewidths=.5)","d2baf648":"sns.pairplot(df)","1113dda4":"X = df.drop('Y house price of unit area',axis=1)\ny = df['Y house price of unit area']","a2b1e41f":"from sklearn.preprocessing import PolynomialFeatures\npolynomial_converter= PolynomialFeatures(degree=3, include_bias=False)\npoly_features= polynomial_converter.fit_transform(X)\npoly_features.shape","aa7322b0":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(poly_features, y, test_size=0.3, random_state=101)","2fb626da":"from sklearn.preprocessing import StandardScaler\nscaler= StandardScaler()\nscaler.fit(X_train)\nX_train= scaler.transform(X_train)\nX_test= scaler.transform(X_test)","4f5be70b":"from sklearn.linear_model import Ridge\nridge_model = Ridge(alpha=40)","ee594a4d":"ridge_model.fit(X_train, y_train)","e5645a71":"y_pred= ridge_model.predict(X_test)","e6fc19cc":"from sklearn.metrics import mean_absolute_error, mean_squared_error\n\nMAE= mean_absolute_error(y_test, y_pred)\nMSE= mean_squared_error(y_test, y_pred)\nRMSE= np.sqrt(MSE)\n\npd.DataFrame([MAE, MSE, RMSE], index=['MAE', 'MSE', 'RMSE'], columns=['metrics'])","700f1fb4":"from sklearn.linear_model import RidgeCV\nridge_cv_model=RidgeCV(alphas=(0.1, 1.0, 10.0), scoring='neg_mean_absolute_error')","28aaf71f":"ridge_cv_model.fit(X_train, y_train)","c234a896":"ridge_cv_model.alpha_","e50cb2a0":"y_pred_ridge= ridge_cv_model.predict(X_test)","ea500146":"MAE_ridge= mean_absolute_error(y_test, y_pred_ridge)\nMSE_ridge= mean_squared_error(y_test, y_pred_ridge)\nRMSE_ridge= np.sqrt(MSE_ridge)\npd.DataFrame([MAE_ridge, MSE_ridge, RMSE_ridge], index=['MAE', 'MSE', 'RMSE'], columns=['Ridge Metrics'])","983af778":"ridge_cv_model.coef_","0ed94360":"from sklearn.linear_model import LassoCV\nlasso_cv_model= LassoCV(eps=0.01, n_alphas=100, cv=5)","aa030678":"lasso_cv_model.fit(X_train, y_train)","09a4843e":"lasso_cv_model.alpha_","d461de21":"y_pred_lasso= lasso_cv_model.predict(X_test)","d3e99c6e":"MAE_Lasso= mean_absolute_error(y_test, y_pred_lasso)\nMSE_Lasso= mean_squared_error(y_test, y_pred_lasso)\nRMSE_Lasso= np.sqrt(MSE_Lasso)\n\npd.DataFrame([MAE_Lasso, MSE_Lasso, RMSE_Lasso], index=['MAE', 'MSE', 'RMSE'], columns=['Lasso Metrics'])","4d2c1ce5":"lasso_cv_model.coef_","4d64afb7":"from sklearn.linear_model import ElasticNetCV\nelastic_model= ElasticNetCV(l1_ratio=[0.1, 0.5, 0.7, 0.9, 0.95, 0.99, 1],cv=5, max_iter=100000)\nelastic_model.fit(X_train, y_train)","811f6eb4":"elastic_model.l1_ratio_","43fb8317":"y_pred_elastic=elastic_model.predict(X_test)","ba283630":"MAE_Elastic= mean_absolute_error(y_test, y_pred_elastic)\nMSE_Elastic= mean_squared_error(y_test, y_pred_elastic)\nRMSE_Elastic= np.sqrt(MSE_Elastic)\n\npd.DataFrame([MAE_Elastic, MSE_Elastic, RMSE_Elastic], index=['MAE', 'MSE', 'RMSE'], columns=['Elastic Metrics'])","3bec7f8e":"elastic_model.coef_","1b867101":"data = {'Polynomial regression': [4.304236, 29.018488, 5.386881], 'Multivariate regression': [5.392294, 46.211798, 6.797926], 'Ridge Metrics': [MAE_ridge, MSE_ridge, RMSE_ridge], 'Lasso Metrics': [MAE_Lasso, MSE_Lasso, RMSE_Lasso] , 'Elastic Metrics': [MAE_Elastic, MSE_Elastic, RMSE_Elastic]}\n\npd.DataFrame( data, index=['MAE', 'MSE', 'RMSE'])","030fd833":"### A. Ridge","98ee1b8f":"Let's see what we had in the previous notebook:","5d5afa41":"How to choose the optimum value of alpha?\n\nWe choose an alpha value with Cross-Validation. We import from the sklearn.linear_model the RidgeCV class which is Ridge regression with built-in cross-validation.\n\nYou can read more from sklearn documantation: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.RidgeCV.html","bcc08423":"Splitting the data to test and train:","446ad127":"We can see that Ridge regularization gave us the best metrics!","a26fdc0f":"Scaling the data:","8a060b40":"## Step 2: Getting to know the data better\u00b6","c9f1bfa9":"We can see that many of the parameter coefficients are zero in this model. ","e0a5d685":"### C. Elastic Net","318e2c3c":"## Step 6: Comparing the different errors in the models","c4aacc0e":"Splitting the features and lables:","28804d34":"### B. Lasso","ef14de1d":"## Step 5: Building a polynomial model with regularization","4fe75fcb":"Overfitting is a common issue in the field of machine learning. L1 and L2 regularization are some of the techniques to address the overfitting issue. In my previous notebook (https:\/\/www.kaggle.com\/saharpourahmad\/filoger-week-3-real-estate-price-prediction) I made a multivariate and polynomial model on this dataset and calculated the 'MAE', 'MSE' and 'RMSE' for them. In this notebook I am going to make the polynomial model again but this time with regularization. Let's see if the errors are reducing by this techniques!","3f5136f7":"Creating polynomial features: (in the previous notebook I analyzed the degree and it showed that degree=3 is the best one for this data)","9072bb34":"## Step 4: Preprocessing","73dccf00":"## Step 3: Exploratory data analysis\u00b6","0f16dd22":"Polynomial regression model\n\nMAE: 4.304236 \/ MSE: 29.018488 \/ RMSE: 5.386881 \n\nMultivariate regression model\n\nMAE: 5.392294 \/ MSE: 46.211798 \/ RMSE: 6.797926","5e3475f1":"We can see that the errors has reduced.","5745b843":"Also here we use Lasso linear model with iterative fitting along a regularization path. The best model is selected by cross-validation.\n\nYou can read more from sklearn documantation: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LassoCV.html","02214f86":"We can see that many of the parameter coefficients are zero in this model. ","5485aa89":"evaluating the model:","3338cdb6":"## Step 1: Importing the dataset and neccessary libraries:\u00b6","0a1ead27":"evaluating the model once again:"}}