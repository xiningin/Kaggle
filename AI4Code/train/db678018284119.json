{"cell_type":{"fb5e2342":"code","f58a9d34":"code","6d05789f":"code","f1b633ad":"code","3b47783c":"code","58332bbc":"code","1b440939":"code","d2aea977":"code","522e25fd":"code","45fded17":"code","321ab7f7":"code","6e3f95d2":"code","3bc76aba":"code","ca266e4a":"code","c13c1f0b":"markdown","0a23b13d":"markdown","8cf9ff7f":"markdown","2541a4a0":"markdown","918b4b34":"markdown","ff0c5705":"markdown","ec7d798d":"markdown","bcda04cb":"markdown","b1d7b635":"markdown","fd0cbc35":"markdown"},"source":{"fb5e2342":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.graph_objects as go\nimport plotly.express as px \nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f58a9d34":"# Read and show data\ndf = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\ndf.head()","6d05789f":"# Check null values in data\ndf.rename(columns = {'ObservationDate': 'Date',\n                     'Province\/State' : 'State',\n                     'Country\/Region' : 'Country'}, inplace = True)\ndf.info()\nprint('\\n')\ndf.isnull().sum()","f1b633ad":"# Fill null values to \"Unknown\"\ndf['State'] = df['State'].fillna('Unknown')\ndf.isnull().sum()","3b47783c":"# Patients column \ucd94\uac00\ndf['Patients'] = df['Confirmed'] - (df['Deaths'] + df['Recovered'])\ndf.head(10)","58332bbc":"# Sort dataframe by date\ndf['Date'] = pd.to_datetime(df['Date'])\ndf1 = df.sort_values('Date')\ntotal = df1.groupby('Date')[['Confirmed','Deaths','Recovered','Patients']].sum().reset_index()\n# \uc77c\uc77c Confirmed\uc778 'daily' \uc5f4 \ucd94\uac00\ndaily = []\nfor day, confirm in enumerate(total['Confirmed']):\n    if day == 0:\n        daily.append(confirm)\n    else:\n        daily.append(confirm - total['Confirmed'][day-1])\n\ntotal['Daily Confirmed'] = pd.DataFrame(daily)\ntotal.head(10)","1b440939":"# Sort dataframe by date and country\ndf2 = df1.groupby(['Date','Country'])[['Confirmed','Deaths','Recovered', 'Patients']].sum().reset_index().sort_values('Date').reset_index(drop = True)\ndf2","d2aea977":"# Sort dataframe by confirmed in last date\ncountry = df2[df2['Date'] == df2['Date'][len(df2)-1]][['Date','Country','Confirmed']].sort_values('Confirmed').reset_index(drop = True)\ncountry.tail(10)","522e25fd":"# Sort dataframe by Patients\npatient = df2[df2['Date'] == df2['Date'][len(df2)-1]][['Date','Country','Patients']].sort_values('Patients').reset_index(drop= True)\npatient.tail(10)","45fded17":"# Visualization\n# line plot\n\nplot = px.line(total, x='Date', y=['Patients', 'Confirmed', 'Recovered'])\nplot.update_layout(title = 'Cumulative number of confirmed cases per day',\n                  title_x = 0.5,\n                  title_font = dict(size= 20, color = 'steelblue'),\n                  xaxis = dict(title = 'Date'),\n                  yaxis = dict(title = 'Patients'))\n\nplot.show()","321ab7f7":"fig = px.bar(total,\n             x = 'Date',\n             y = 'Daily Confirmed',\n             color = 'Daily Confirmed',\n             color_continuous_scale = 'purp',\n             labels = {\"Daily Confirmed\":\"Daily Cases\"})\n\nfig.update_layout(title = 'Confirmed Cases per day',\n                  title_x = 0.5,\n                  title_font = dict(size = 18, color = 'darkcyan'),\n                  yaxis = dict(title = 'Confirmed Cases'),\n                  xaxis = dict(tickangle = 45))\nfig.show()","6e3f95d2":"fig = px.bar(country.tail(30),\n             x = 'Country',\n             y = 'Confirmed',\n             color = 'Confirmed',\n             color_continuous_scale = 'YlGnBu',\n             labels = {\"Confirmed\":\"Confirmed Cases\"})\n\nfig.update_layout(title = 'Ranking Countries with the most Confirmed Cases',\n                  title_x = 0.5,\n                  title_font = dict(size = 18, color = 'darkcyan'),\n                  yaxis = dict(title = 'Confirmed Cases'),\n                  xaxis = dict(tickangle = 45))\nfig.show()","3bc76aba":"fig = px.bar(patient.tail(30),\n             x = 'Country',\n             y = 'Patients',\n             color = 'Patients',\n             color_continuous_scale = 'ice')\n\nfig.update_layout(title = 'Ranking Countries with the most Patients',\n                  title_x = 0.5,\n                  title_font = dict(size = 18, color = 'Skyblue'),\n                  yaxis = dict(title = 'Patients'),\n                  xaxis = dict(tickangle = 45))\nfig.show()","ca266e4a":"# Prepare dataframe \ntop = list(country['Country'][len(country)-10:len(country)-1])\ntop2 = list(patient['Country'][len(patient)-10:len(country)-1])\n\nprim1 = df2[df2['Country'].isin(top)].reset_index(drop =True)\nprim2 = df2[df2['Country'].isin(top2)].reset_index(drop =True)\n\n# Plot\nprim = pd.merge(prim1,prim2, how = 'outer')\ncheck = top\nfor i in top2:\n    if i not in top:\n        check.append(i)\n    else:\n        check.remove(i)\n\nplot = px.line(prim[prim['Country'].isin(check)], x='Date', y='Confirmed',\n              color = 'Country')\n\nplot.update_layout(title = 'Change in the number of confirmed in specific countries',\n                  title_x = 0.5,\n                  title_font = dict(size= 20, color = 'green'),\n                  xaxis = dict(title = 'Date'),\n                  yaxis = dict(title = 'Comulative Confirmed cases'))\n\nplot.show()","c13c1f0b":"### \ubc31\uc2e0\uc758 \uae30\ub300\ud6a8\uacfc\uc640 \ubaa9\ud45c\uc5d0 \ubbf8\uce60 \uc601\ud5a5\n\n- 2021.04.29\uc5d0\uc11c 2021.05.29\uae4c\uc9c0 **Daily Confirmed**\uac00 416767\uba85, \uc57d 46.4% \uac10\uc18c\ud588\uc2b5\ub2c8\ub2e4. \n- **Confirmed** & **Patients**\uc5d0\uc11c \ubaa8\ub450 10\uc704\ub0b4\uc5d0 \ud574\ub2f9\ub418\ub294 5\uac1c\uad6d\uc5d0\uac8c \ubc31\uc2e0\uc744 \uc6b0\uc120\uc801\uc73c\ub85c \uacf5\uae09\ud558\uace0, \ud55c \uac00\uc9c0 \uacbd\uc6b0\uc5d0\ub9cc \ub9cc\uc871\ud558\ub294 10\uac1c\uad6d\uc5d0 \uacbd\uc6b0 \ucd5c\uadfc \ub450 \ub2ec \ub0b4\uc5d0 **Daily Confirmed**\uc758 \uc0c1\uc2b9\ub960\uc774 \uac00\uc7a5 \ud070 **Turkey**, **Argentina**, **Germany**, **Italy**\uc5d0 \ub0a8\uc740 \ubb3c\ub7c9\uc744 \uacf5\uae09\ud55c\ub2e4\uba74 \ucd5c\uadfc \uac10\uc18c\uc138\uc640 \uc720\uc0ac\ud55c 40% \uc774\uc0c1\uc758 **Daily Confirmed** \uac10\uc18c\ub97c \uc9c0\uc18d\uc2dc\ud0ac \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4.","0a23b13d":"### 2. Data Visualization\n- \uc804\uccb4 **Confirmed**\uc640 \ud604\uc7ac**Patients** \uc0c1\ud669\uc744 \ud30c\uc545\ud569\ub2c8\ub2e4.\n- **Daily Confirmed**\ub97c \uc2dc\uac01\ud654\ud569\ub2c8\ub2e4.\n- **Confirmed**\uc640 **Patients**\uac00 \ub9ce\uc740 \ub098\ub77c 30\uac1c\uad6d\uc758 data\ub97c \uc2dc\uac01\ud654\ud569\ub2c8\ub2e4.","8cf9ff7f":"### \ub9cc\uc57d \ub450 \ub2ec\ub0b4 \ubbf8\ub798\ub97c \uc608\uce21\ud55c\ub2e4\uba74?\n- **2020**\ub144 \ud558\ubc18\uae30 \ubd80\ud130 **Daily Confirmed**\uac00 \uae09\uc99d\ud55c \ud6c4\uc5d0 **2021**\ub144\ub3c4\uc5d0\ub294 \uadf8 \uc218\uac00 \uc99d\uac10\uc744 \ubc18\ubcf5\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uac00\uc7a5 \ucd5c\uadfc\uc758 data\ubcf4\ub2e4 \ub450 \ub2ec \uc804\uc778 **2021.03.29**\uc5d0 **Daily Confirmed** \uc218\ub294 **458,405**\uc600\uace0 **2021.05.29**\uc5d0\ub294 **480,835**\ub85c \uc57d **4.89%** \uc99d\uac00\ud588\uc73c\ub098 \ud55c \ub2ec \uc804 \uae30\uc900\uc73c\ub85c\ub294 **46.4%**\uac00 \uac10\uc18c\ud588\uc2b5\ub2c8\ub2e4.\n- \ud604\uc7ac \uac00\uc9c0\uace0 \uc788\ub294 \ubc31\uc2e0\uc758 \uc218\uac00 **Daily Confirmed**\ubcf4\ub2e4 \ub9ce\uace0 \ucd5c\uadfc \ud55c\ub2ec \ub3d9\uc548 \uac10\uc18c \ucd94\uc138\uc600\uae30 \ub54c\ubb38\uc5d0, \uc704\uc5d0 \uacc4\ud68d\ub300\ub85c \ubc31\uc2e0\uacf5\uae09\uc774 \uc774\ub904\uc9c4\ub2e4\uba74 **2021.03 ~ 2021.04**\uacfc\ub294 \ub2ec\ub9ac **Daily Confirmed**\uae09\uc99d\uc744 \uc608\ubc29\ud558\uace0 \ucd5c\uadfc \ud55c \ub2ec \ub3d9\uc548\uacfc \ube44\uc2b7\ud55c 40% \uc815\ub3c4\uc758 \uac10\uc18c\uc138\ub97c \ub450 \ub2ec \uac00\uae4c\uc774 \uc720\uc9c0\ud560 \uc218 \uc788\uc744 \uac83\uc73c\ub85c \uc608\uc0c1\ud569\ub2c8\ub2e4.\n\n### \uc2dc\uac04\uc774 \ub354 \uc8fc\uc5b4\uc84c\ub2e4\uba74 \ud574\ubcf4\uace0 \uc2f6\uc740 \uac83\n- \uac01 \uad6d\uac00\ubcc4 \ucd5c\uadfc \ud55c \ub2ec\uac04\uc758 Daily Confirmed \ud3c9\uade0 \uc21c\uc704\uc640 date\uc5d0 \ub530\ub978 \uac10\uc5fc \ucd94\uc774\ub97c \uc560\ub2c8\uba54\uc774\uc158 \uadf8\ub798\ud504\ub85c \ub098\ud0c0\ub0b4 \uc9c0\uae08\ubcf4\ub2e4 \ub354 \uc138\uc138\ud55c \ubd84\uc11d\uc744 \uc9c4\ud589\ud574\ubcf4\uace0 \uc2f6\uc2b5\ub2c8\ub2e4. ","2541a4a0":"## Objective : \ud655\uc9c4\uc790 \uc218 \uc99d\uac00 \ub9c9\uae30\n- \ubd84\uc11d \uacb0\uacfc\ub97c \uc774\uc6a9\ud574 \uc77c\uc77c \ud655\uc9c4\uc790 \uc218\ub97c \uac10\uc18c\uc2dc\ud0b5\ub2c8\ub2e4.\n\n### \ubaa9\ud45c\ub97c \uc704\ud55c \ubc31\uc2e0 \ud65c\uc6a9\ubc95\n- \uc704\uae09\ud55c \ub098\ub77c\ub97c \uc6b0\uc120\uc801\uc73c\ub85c \ubc31\uc2e0\uc744 \uacf5\uae09\ud569\ub2c8\ub2e4. \n- **Confirmed** & **Patients**\ub97c \uae30\uc900\uc73c\ub85c \ud3c9\uac00\ud569\ub2c8\ub2e4.\n- **State**\uc758 \uacbd\uc6b0 \uc785\ub825\ub418\uc9c0 \uc54a\uc740 \ub370\uc774\ud130\uac00 \uc874\uc7ac\ud558\uae30 \ub54c\ubb38\uc5d0 **Country** \ub2e8\uc704\ub85c \ud569\ub2c8\ub2e4.\n- **Patients = Confirmed - (Deaths + Recovered)**","918b4b34":"#### Confirmed \ube44\uad50","ff0c5705":"#### Confirmed\uc640 Patients \uc911 \ud55c \uac00\uc9c0\uc5d0\ub9cc \uc0c1\uc704 10\uc704 \ub0b4\uc5d0 \ub4dc\ub294 \uad6d\uac00\ub4e4\uc758 Daily Confirmed \ube44\uad50","ec7d798d":"#### Patients \ube44\uad50","bcda04cb":"### 1. Data Cleaning\n- **State**\uc5d0 null\uc740 **Unknown**\uc73c\ub85c \ucc44\uc6c1\ub2c8\ub2e4.\n- \ud658\uc790 \uc218\ub97c \ub098\ud0c0\ub0b4\ub294 'Patients'\uc5f4\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4.","b1d7b635":"#### **\uc804\uccb4 \uad6d\uac00 data**","fd0cbc35":"#### \uc804\uccb4 COVID-19 \ud604\ud669"}}