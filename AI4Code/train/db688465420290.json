{"cell_type":{"49eb53fb":"code","8f1c22ac":"code","bbd2a2b8":"code","bb9fd126":"code","8d50085b":"code","4a3b4299":"code","a4ae81a9":"code","b0fcf150":"code","9cab4efd":"code","67267c9d":"code","209b3b83":"code","ed86d44e":"code","4ccd9135":"code","3c16d31a":"code","4bbfb305":"code","2f5405ad":"markdown","e1db85d7":"markdown","0ec77088":"markdown","958f4437":"markdown","95ab21d1":"markdown","c0473bb7":"markdown","0f93531e":"markdown","5dcd924c":"markdown","366604c4":"markdown","707d9fec":"markdown","a6015ab9":"markdown","99008235":"markdown","440de752":"markdown","84899e5e":"markdown","8fc2270a":"markdown"},"source":{"49eb53fb":"# import libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport ipywidgets\nfrom ipywidgets import interact\nfrom ipywidgets import interact_manual\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","8f1c22ac":"# upload dataset\ndata= pd.read_csv(\"\/kaggle\/input\/movies-meta-data\/movie_metadata.csv\")\n\n# dataset shape\nprint(\"shape of dataset:\", data.shape)\n\n# to see all the columns\npd.set_option(\"max_columns\", 28)\n\ndata.head()","bbd2a2b8":"# dataset\nreviews= data.groupby(\"director_name\")[\"num_critic_for_reviews\"].sum().sort_values(ascending=False).head(10)\n\n# plot\nplt.figure(figsize=(15,4))\n\nplt.style.use('ggplot')\nreviews.plot(kind=\"bar\")\nplt.title(\"Top 10 directors with maximum critic reviews\")","bb9fd126":"df= data[[\"movie_title\", \"imdb_score\"]][data[\"director_name\"] == \"Steven Spielberg\"].sort_values(by= \"imdb_score\", ascending=False).head(10)\ndf\n\nfig = px.bar(df, x='movie_title', y='imdb_score',\n             color='imdb_score',\n             \n             text= \"imdb_score\",\n             title= \"Steven Spielberg top 10 movies\",\n             height=500)\nfig.show()","8d50085b":"fig = go.Figure(data=go.Scatter(x=data[\"num_voted_users\"],\n                                y=data[\"gross\"],\n                                mode='markers',\n                                marker=dict(size=7, color=np.random.randn(5043),colorscale='Viridis',showscale=True)\n                             )\n               )\nfig.update_layout(title_text='Number of voted users vs Gross', font_size=15,\n                 xaxis = dict(\n                               title_text = \"Number of voted users\",\n                               title_font = {\"size\": 20},\n                               title_standoff = 25),\n                 yaxis = dict(\n                              title_text = \"Gross\",\n                              title_standoff = 25))\nfig.show()","4a3b4299":"fig = go.Figure(data=go.Scatter(x=data[\"num_user_for_reviews\"],\n                                y=data[\"gross\"],\n                                mode='markers',\n                                marker=dict(size=7, color=np.random.randn(5043),colorscale='Bluered_r',showscale=True)\n                               )\n               )\nfig.update_layout(title_text='Number of user for reviews vs Gross', font_size=15,\n                 xaxis = dict(\n                               title_text = \"Number of user for reviews\",\n                               title_font = {\"size\": 20},\n                               title_standoff = 25),\n                 yaxis = dict(\n                              title_text = \"Gross\",\n                              title_standoff = 25))\n\nfig.show()","a4ae81a9":"import plotly.graph_objects as go\n\nfig = go.Figure(data=go.Scatter(x=data[\"imdb_score\"],\n                                y=data[\"gross\"],\n                                mode='markers',\n                                marker=dict(size=7, color=np.random.randn(5043),colorscale='Viridis',showscale=True)\n                               )\n               )\nfig.update_layout(title_text='Imdb Score vs Gross', font_size=15,\n                 xaxis = dict(\n                               title_text = \"Imdb Score\",\n                               title_font = {\"size\": 20},\n                               title_standoff = 25),\n                 yaxis = dict(\n                              title_text = \"Gross\",\n                              title_standoff = 25))\nfig.show()","b0fcf150":"import plotly.graph_objects as go\n\nfig = go.Figure(data=go.Scatter(x=data[\"budget\"],\n                                y=data[\"gross\"],\n                                mode='markers',\n                                marker=dict(size=7, color=np.random.randn(5043),colorscale='Inferno',showscale=True)\n                               )\n               )\nfig.update_layout(title_text='Budget vs Gross', font_size=15,\n                 xaxis = dict(\n                               title_text = \"Budget\",\n                               title_font = {\"size\": 20},\n                               title_standoff = 25),\n                 yaxis = dict(\n                              title_text = \"Gross\",\n                              title_standoff = 25))\nfig.show()","9cab4efd":"data[(data[\"budget\"]> 200000000) & (data[\"gross\"]< 200000000)][[ \"movie_title\", \"budget\",\"gross\", \"country\"]]","67267c9d":"# prepare dataset\ndata2= data.groupby(\"country\")[[\"budget\"]].sum().sort_values(by= \"budget\", ascending=False).head(10)\n\n# plot\nfig=go.Figure(data= [go.Pie(labels = data2.index,\n                            values = data2[\"budget\"],\n                            hole=0.4, pull= [0.05,0], opacity=0.9,\n                            texttemplate = \"%{label}: %{percent}\",\n                            textposition = \"inside\")],\n                           \n                                                        \n              layout = go.Layout(title= \"Top 10 countries with Total Movie Budget\",\n                                  font_size=12\n                                 ))\nfig.show()","209b3b83":"@interact\n\ndef plot(x= list(data.select_dtypes(include=\"object\").columns),\n         y= list(data.select_dtypes(include=\"number\").columns)\n        ):\n        \n         return sns.barplot(data[x], data[y]) \n         plt.xticks(rotation=90)","ed86d44e":"# function to recommend movie based on language\ndef recommend_lang(x):\n    y= data[[\"language\", \"movie_title\", \"imdb_score\"]][data[\"language\"] == x]\n    y= y.sort_values(by= \"imdb_score\", ascending=False)\n    return y","4ccd9135":"# Hindi recommended movis with highest imdb score\nrecommend_lang(\"Hindi\")","3c16d31a":"# function to recommend movie based on language\ndef recommend_actor(x):\n    a= data[[\"movie_title\", \"imdb_score\"]][data[\"actor_1_name\"] == x]\n    b= data[[\"movie_title\", \"imdb_score\"]][data[\"actor_2_name\"] == x]\n    c= data[[\"movie_title\", \"imdb_score\"]][data[\"actor_3_name\"] == x]\n    \n    x= a.append(b)\n    y= x.append(c)\n    y= y.sort_values(by= \"imdb_score\", ascending=False)\n    return y","4bbfb305":"recommend_actor(\"Katrina Kaif\")","2f5405ad":"# Imdb Score vs Gross","e1db85d7":"Here you can find that Gross has no correlation with the Budget. Infact some movies with very high budget have very low gross.<br>\nThese movies are:","0ec77088":"# Number of voted users vs Gross","958f4437":"Looks like the movies with gross value more than 400M have more number of voted users.","95ab21d1":"# Budget vs Gross","c0473bb7":"# About Dataset","0f93531e":"Steven Spielberg tops the list with maximum critic reviews. Lets have a look at some of his top movies based on imdb rating.","5dcd924c":"# Movie recommendation based on Actors","366604c4":"# Number of user for reviews vs Gross","707d9fec":"# Interactive Analysis","a6015ab9":"This Data set consists of IMDB Ratings of Movies and includes many other information about the Movies such as It's Actors, Social Media Presence, Duration of the Movie, Genre of the Movie, Origin, Aspect Ratio, language, plot, budget, content rating etc. which makes this dataset perfect to practice the skills in Pandas.\n\nWe can perform Recommendations of Movies based on Actors, Langugae, Content etc.","99008235":"# Top 10 directors with maximum critic reviews","440de752":"# Top 10 countries with Total Movie Budget","84899e5e":"# Movie recommendation based on Language","8fc2270a":"Also movies with gross more than 400M have more reviews."}}