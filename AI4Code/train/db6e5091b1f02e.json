{"cell_type":{"e9280eec":"code","9102e314":"code","579402d3":"code","8cc22bd5":"code","a83af79e":"code","92aa9ecc":"code","d42a3c30":"code","9a8d5a61":"code","434dd9a2":"code","3d50da55":"code","901db2d1":"code","8cbde97b":"code","73ccd96a":"code","bf717ef6":"code","c197be68":"code","615feb76":"code","4ad09e66":"code","0355bdaa":"code","d39b6fc8":"code","9afaeb4c":"code","3c344601":"code","51b6f49a":"code","6f96cbbe":"code","d61dcaea":"code","979ef153":"markdown","bf904cd8":"markdown","b0c5a04b":"markdown","7c658a86":"markdown","6899e637":"markdown","35492b3e":"markdown"},"source":{"e9280eec":"from tensorflow.python.client import device_lib\nprint(device_lib.list_local_devices())","9102e314":"import os\nimport re\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport cv2\nfrom tqdm import tqdm\nfrom glob import glob\nfrom PIL import Image\nfrom skimage.transform import resize\nfrom sklearn.model_selection import train_test_split, KFold\n\nimport tensorflow as tf\nimport tensorflow.keras\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint","579402d3":"path = \"..\/input\/ultrasound-nerve-segmentation\/train\/\"\nfile_list = os.listdir(path)\nfile_list[:20]","8cc22bd5":"train_image = []\ntrain_mask = glob(path + '*_mask*')\n\nfor i in train_mask:\n    train_image.append(i.replace('_mask', ''))\n        \nprint(train_image[:10],\"\\n\" ,train_mask[:10])","a83af79e":"# Display the first image and mask of the first subject.\nimage1 = np.array(Image.open(path+\"1_1.tif\"))\nimage1_mask = np.array(Image.open(path+\"1_1_mask.tif\"))\nimage1_mask = np.ma.masked_where(image1_mask == 0, image1_mask)\n\nfig, ax = plt.subplots(1,3,figsize = (16,12))\nax[0].imshow(image1, cmap = 'gray')\n\nax[1].imshow(image1_mask, cmap = 'gray')\n\nax[2].imshow(image1, cmap = 'gray', interpolation = 'none')\nax[2].imshow(image1_mask, cmap = 'jet', interpolation = 'none', alpha = 0.7)","92aa9ecc":"width = 128\nheight = 128","d42a3c30":"from tensorflow.keras.models import Model, load_model\nfrom tensorflow.keras import Input\nfrom tensorflow.keras.layers import Input, Activation, BatchNormalization, Dropout, Lambda, Conv2D, Conv2DTranspose, MaxPooling2D, concatenate,add\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint","9a8d5a61":"from sklearn import metrics\n\ndef dice_coef(y_true, y_pred, smooth = 1.0):\n    y_true_f = K.flatten(y_true)\n    y_pred_f = K.flatten(y_pred)\n    intersection = K.sum(y_true_f * y_pred_f)\n    return (2. * intersection + smooth) \/ (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)\n\ndef iou(y_true, y_pred, smooth = 1.0):\n    y_true_f = K.flatten(y_true)\n    y_pred_f = K.flatten(y_pred)\n    intersection = K.sum ( y_true_f * y_pred_f) + smooth\n    union = K.sum(y_true_f + y_pred_f - y_true_f * y_pred_f) + smooth\n    return intersection\/union\n\n\ndef dice_coef_loss(y_true, y_pred):\n    return -dice_coef(y_true, y_pred)\n\n\ndef sensitivity(y_true, y_pred):\n    s = K.sum(y_true, axis=(1,2,3))\n    y_true_c = s \/ (s + K.epsilon())\n    s_ = K.sum(y_pred, axis=(1,2,3))\n    y_pred_c = s_ \/ (s_ + K.epsilon())\n\n    true_positives = K.sum(K.round(K.clip(y_true_c * y_pred_c, 0, 1)))\n    possible_positives = K.sum(K.round(K.clip(y_true_c, 0, 1)))\n    return true_positives \/ (possible_positives + K.epsilon())\n\ndef specificity(y_true, y_pred):\n    s = K.sum(y_true, axis=(1,2,3))\n    y_true_c = s \/ (s + K.epsilon())\n    s_ = K.sum(y_pred, axis=(1,2,3))\n    y_pred_c = s_ \/ (s_ + K.epsilon())\n    \n    true_negatives = K.sum(K.round(K.clip((1-y_true_c) * (1-y_pred_c), 0, 1)))\n    possible_negatives = K.sum(K.round(K.clip(1-y_true_c, 0, 1)))\n    return true_negatives \/ (possible_negatives + K.epsilon())\n","434dd9a2":"from tensorflow.keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.layers import *\n\ndef res_block(inputs,filter_size):\n    \"\"\"\n    res_block -- Residual block for building res path\n    \n    Arguments:\n    inputs {<class 'tensorflow.python.framework.ops.Tensor'>} -- input for residual block\n    filter_size {int} -- convolutional filter size \n    \n    Returns:\n    add {<class 'tensorflow.python.framework.ops.Tensor'>} -- addition of two convolutional filter output  \n    \"\"\"\n    # First Conv2D layer\n    cb1 = Conv2D(filter_size,(3,3),padding = 'same',activation=\"relu\")(inputs)\n    # Second Conv2D layer parallel to the first one\n    cb2 = Conv2D(filter_size,(1,1),padding = 'same',activation=\"relu\")(inputs)\n    # Addition of cb1 and cb2\n    add = Add()([cb1,cb2])\n    \n    return add\n\ndef res_path(inputs,filter_size,path_number):\n    \"\"\"\n    res_path -- residual path \/ modified skip connection\n    \n    Arguments:\n    inputs {<class 'tensorflow.python.framework.ops.Tensor'>} -- input for res path\n    filter_size {int} -- convolutional filter size \n    path_number {int} -- path identifier \n    \n    Returns:\n    skip_connection {<class 'tensorflow.python.framework.ops.Tensor'>} -- final res path\n    \"\"\"\n    # Minimum one residual block for every res path\n    skip_connection = res_block(inputs, filter_size)\n\n    # Two serial residual blocks for res path 2\n    if path_number == 2:\n        skip_connection = res_block(skip_connection,filter_size)\n    \n    # Three serial residual blocks for res path 1\n    elif path_number == 1:\n        skip_connection = res_block(skip_connection,filter_size)\n        skip_connection = res_block(skip_connection,filter_size)\n    \n    return skip_connection\n\ndef decoder_block(inputs, res, out_channels, depth):\n    \n    \"\"\"\n    decoder_block -- decoder block formation\n    \n    Arguments:\n    inputs {<class 'tensorflow.python.framework.ops.Tensor'>} -- input for decoder block\n    mid_channels {int} -- no. of mid channels \n    out_channels {int} -- no. of out channels\n    \n    Returns:\n    db {<class 'tensorflow.python.framework.ops.Tensor'>} -- returning the decoder block\n    \"\"\"\n    conv_kwargs = dict(\n        activation='relu',\n        padding='same',\n        kernel_initializer='he_normal',\n        data_format='channels_last'  \n    )\n    \n    # UpConvolutional layer\n    db = UpSampling2D((2, 2), interpolation='bilinear')(inputs)\n    db = concatenate([db, res], axis=3)\n    # First conv2D layer \n    db = Conv2D(out_channels, 3, **conv_kwargs)(db)\n    # Second conv2D layer\n    db = Conv2D(out_channels, 3, **conv_kwargs)(db)\n\n    if depth > 2:\n        # Third conv2D layer\n        db = Conv2D(out_channels, 3, **conv_kwargs)(db)\n\n    return db\n\ndef TransCGUNet(input_size=(512, 512, 1)):\n    \"\"\"\n    TransResUNet -- main architecture of TransResUNet\n    \n    Arguments:\n    input_size {tuple} -- size of input image\n    \n    Returns:\n    model {<class 'tensorflow.python.keras.engine.training.Model'>} -- final model\n    \"\"\"\n    \n    # Input \n    inputs = Input(input_size)\n\n    # VGG16 with imagenet weights\n    encoder = VGG16(include_top=False, weights='imagenet', input_shape=input_size)\n       \n    # First encoder block\n    enc1 = encoder.get_layer(name='block1_conv1')(inputs)\n    enc1 = encoder.get_layer(name='block1_conv2')(enc1)\n    enc2 = MaxPooling2D(pool_size=(2, 2))(enc1)\n    \n    # Second encoder block\n    enc2 = encoder.get_layer(name='block2_conv1')(enc2)\n    enc2 = encoder.get_layer(name='block2_conv2')(enc2)\n    enc3 = MaxPooling2D(pool_size=(2, 2))(enc2)\n    \n    # Third encoder block\n    enc3 = encoder.get_layer(name='block3_conv1')(enc3)\n    enc3 = encoder.get_layer(name='block3_conv2')(enc3)\n    enc3 = encoder.get_layer(name='block3_conv3')(enc3)\n    center = MaxPooling2D(pool_size=(2, 2))(enc3)\n\n    # Center block\n    center = Conv2D(512, (3, 3), activation='relu', padding='same')(center)\n    center = Conv2D(512, (3, 3), activation='relu', padding='same')(center)\n    \n    # classification branch\n    cls = Conv2D(32, (3,3), activation='relu', padding='same')(center)\n    # cls = Conv2D(128, (3,3), activation='relu', padding='same')(center)\n    cls = Conv2D(1, (1,1))(cls)\n    cls = GlobalAveragePooling2D()(cls)\n    cls = Activation('sigmoid', name='class')(cls)\n    clsr = Reshape((1, 1, 1), name='reshape')(cls)\n\n    # Decoder block corresponding to third encoder\n    res_path3 = res_path(enc3,128,3)\n    dec3 = decoder_block(center, res_path3, 256, 3)\n    \n    # Decoder block corresponding to second encoder\n    res_path2 = res_path(enc2,64,2)\n    dec2 = decoder_block(dec3, res_path2, 128, 2)\n    \n    # Final Block concatenation with first encoded feature \n    res_path1 = res_path(enc1,32,1)\n    dec1 = decoder_block(dec2, res_path1, 64, 1)\n\n    # Output\n    out = Conv2D(1, 1)(dec1)\n    out = Activation('sigmoid')(out)\n    out = multiply(inputs=[out,clsr], name='seg')\n    \n    # Final model\n    model = Model(inputs=[inputs], outputs=[out, cls])\n    \n    return model","3d50da55":"# From: https:\/\/github.com\/zhixuhao\/unet\/blob\/master\/data.py\nfrom tensorflow.keras.applications.vgg16 import preprocess_input\n\ndef train_generator(data_frame, batch_size, train_path, aug_dict,\n        image_color_mode=\"rgb\",\n        mask_color_mode=\"grayscale\",\n        image_save_prefix=\"image\",\n        mask_save_prefix=\"mask\",\n        save_to_dir=None,\n        target_size=(256,256),\n        seed=1):\n    '''\n    can generate image and mask at the same time use the same seed for\n    image_datagen and mask_datagen to ensure the transformation for image\n    and mask is the same if you want to visualize the results of generator,\n    set save_to_dir = \"your path\"\n    '''\n    image_datagen = ImageDataGenerator(**aug_dict)\n    mask_datagen = ImageDataGenerator(**aug_dict)\n    \n    image_generator = image_datagen.flow_from_dataframe(\n        data_frame,\n        directory = train_path,\n        x_col = \"filename\",\n        class_mode = None,\n        color_mode = image_color_mode,\n        target_size = target_size,\n        batch_size = batch_size,\n        save_to_dir = save_to_dir,\n        save_prefix  = image_save_prefix,\n        seed = seed)\n\n    mask_generator = mask_datagen.flow_from_dataframe(\n        data_frame,\n        directory = train_path,\n        x_col = \"mask\",\n        class_mode = None,\n        color_mode = mask_color_mode,\n        target_size = target_size,\n        batch_size = batch_size,\n        save_to_dir = save_to_dir,\n        save_prefix  = mask_save_prefix,\n        seed = seed)\n\n    train_gen = zip(image_generator, mask_generator)\n    \n    for (img, mask) in train_gen:\n        img, mask, label = adjust_data(img, mask)\n        yield (img,[mask,label])\n\ndef adjust_data(img,mask):\n    img = preprocess_input(img)\n    mask = mask \/ 255\n    mask[mask > 0.5] = 1\n    mask[mask <= 0.5] = 0\n    masks_sum = np.sum(mask, axis=(1,2,3)).reshape((-1, 1))\n    class_lab = (masks_sum != 0) + 0.\n    \n    return (img, mask, class_lab)","901db2d1":"pos_mask = []\npos_img = []\nneg_mask = []\nneg_img = []\n\nfor mask_path, img_path in zip(train_mask, train_image):\n    mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)\n    if np.sum(mask) == 0:\n        neg_mask.append(mask_path)\n        neg_img.append(img_path)\n    else:\n        pos_mask.append(mask_path)\n        pos_img.append(img_path)","8cbde97b":"!mkdir generated\n!mkdir generated\/img","73ccd96a":"def flip_up_down(img):\n    newImg = img.copy()\n    return cv2.flip(newImg, 0)\n\ndef flip_right_left(img):\n    newImg = img.copy()\n    return cv2.flip(newImg, 1)","bf717ef6":"gen_img = []\ngen_mask = []\n\nfor (img_path, mask_path) in tqdm(zip(pos_img, pos_mask)):\n    image_name = img_path.split('\/')[-1].split('.')[0]\n\n    uf_img_path = 'generated\/img\/'+image_name+'_uf.jpg'\n    uf_mask_path = 'generated\/img\/'+image_name+'_uf_mask.jpg'\n    rf_img_path = 'generated\/img\/'+image_name+'_rf.jpg'\n    rf_mask_path = 'generated\/img\/'+image_name+'_rf_mask.jpg'\n\n    img = cv2.imread(img_path)\n    mask = cv2.imread(mask_path)\n\n    uf_img = flip_up_down(img)\n    uf_mask = flip_up_down(mask)\n    rf_img = flip_right_left(img)\n    rf_mask = flip_right_left(mask)\n\n    cv2.imwrite(uf_img_path, uf_img)\n    cv2.imwrite(uf_mask_path, uf_mask)\n    cv2.imwrite(rf_img_path, rf_img)\n    cv2.imwrite(rf_mask_path, rf_mask)\n    \n    gen_img.append(uf_img_path)\n    gen_mask.append(uf_mask_path)\n    gen_img.append(rf_img_path)\n    gen_mask.append(rf_mask_path)","c197be68":"aug_img = gen_img + train_image\naug_mask = gen_mask + train_mask\n\ndf_ = pd.DataFrame(data={\"filename\": aug_img, 'mask' : aug_mask})\ndf = df_.sample(frac=1).reset_index(drop=True)\n\n# df = df[0:160]\n\nkf = KFold(n_splits = 5, shuffle=False)","615feb76":"histories = []\nlosses = []\naccuracies = []\ndicecoefs = []\nious = []\n\ntrain_generator_args = dict(rotation_range=0.2,\n                            width_shift_range=0.05,\n                            height_shift_range=0.05,\n                            shear_range=0.05,\n                            zoom_range=0.05,\n                            horizontal_flip=True,\n                            fill_mode='nearest')\n\nEPOCHS = 120\nBATCH_SIZE = 32\n\nfor k, (train_index, test_index) in enumerate(kf.split(df)):\n    train_data_frame = df.iloc[train_index]\n    test_data_frame = df.iloc[test_index]\n    \n    train_gen = train_generator(train_data_frame, BATCH_SIZE,\n                                None,\n                                train_generator_args,\n                                target_size=(height, width))\n\n    test_gener = train_generator(test_data_frame, BATCH_SIZE,\n                                None,\n                                dict(),\n                                target_size=(height, width))\n\n    model = TransCGUNet(input_size=(height,width, 3))\n    model.compile(optimizer=Adam(lr=5e-6), loss={'seg':dice_coef_loss, 'class':'binary_crossentropy'}, \\\n                      loss_weights={'seg':1, 'class':1}, metrics={'seg':[iou, dice_coef, sensitivity, specificity,'binary_accuracy'], 'class':['accuracy']})\n\n    model_checkpoint = ModelCheckpoint(str(k+1) + '_unet_ner_seg.hdf5', \n                                       verbose=1, \n                                       save_best_only=True)\n\n    history = model.fit(train_gen,\n                          steps_per_epoch=len(train_data_frame) \/\/ BATCH_SIZE, \n                          epochs=EPOCHS, \n                          callbacks=[model_checkpoint],\n                          validation_data = test_gener,\n                          validation_steps=len(test_data_frame) \/\/ BATCH_SIZE)\n    \n    model = load_model(str(k+1) + '_unet_ner_seg.hdf5', custom_objects={'dice_coef_loss': dice_coef_loss, 'iou': iou, 'dice_coef': dice_coef, 'sensitivity': sensitivity, 'specificity': specificity})\n    \n    test_gen = train_generator(test_data_frame, BATCH_SIZE,\n                                None,\n                                dict(),\n                                target_size=(height, width))\n    results = model.evaluate(test_gen, steps=len(test_data_frame) \/\/ BATCH_SIZE)\n    results = dict(zip(model.metrics_names,results))\n    \n    histories.append(history)\n    accuracies.append(results['seg_binary_accuracy'])\n    losses.append(results['seg_loss'])\n    dicecoefs.append(results['seg_dice_coef'])\n    ious.append(results['seg_iou'])\n    \n    break","4ad09e66":"import cv2\nfrom sklearn import metrics\n\nthreshold = []\nsensi = []\nspeci = []\nf1 = []\n\ntest_gen = train_generator(test_data_frame, BATCH_SIZE,\n                                    None,\n                                    dict(),\n                                    target_size=(height, width))\npred_ = model.predict(test_gen, steps=len(test_data_frame) \/\/ BATCH_SIZE)\n\nfor i in tqdm(range(1, 100)):\n    \n    pred = pred_[0].copy()\n\n    tr = i \/ 100\n\n    pred[pred>tr] = 1\n    pred[pred<=tr] = 0\n\n    pred = np.sum(pred, axis=(1,2,3))      # onno model e pred[0] er jaygay pred hobe\n    pred[pred>0] = 1\n\n    true = []\n    for i in test_data_frame['mask']:\n        img = cv2.imread(i, cv2.IMREAD_GRAYSCALE)\n        s = np.sum(img)\n        if s > 0:\n            true.append(1)\n        else:\n            true.append(0)\n\n    true = np.array(true)\n\n    m = min(pred.size, true.size)\n    cm = metrics.confusion_matrix(true[:m], pred[:m])\n\n    TP = cm[1][1]\n    TN = cm[0][0]\n    FP = cm[0][1]\n    FN = cm[1][0]\n\n    # calculate the sensitivity\n    conf_sensitivity = (TP \/ float(TP + FN))    \n    # calculate the specificity\n    conf_specificity = (TN \/ float(TN + FP))\n    # calculate precision\n    conf_precision = (TN \/ float(TN + FP))\n    # calculate f_1 score\n    conf_f1 = 2 * ((conf_precision * conf_sensitivity) \/ (conf_precision + conf_sensitivity))\n\n    # print('Sensitivity', conf_sensitivity)\n    # print('Specificity', conf_specificity)\n    # print('F1 score', conf_f1)\n\n    threshold.append(tr)\n    sensi.append(conf_sensitivity)\n    speci.append(conf_specificity)\n    f1.append(conf_f1)","0355bdaa":"plt.plot(threshold, sensi, 'red')\nplt.plot(threshold, speci, 'blue')\nplt.plot(threshold, f1, 'green')\nplt.legend(['Sensitivity', 'Specificity', 'F1 Score'])","d39b6fc8":"test_gen = train_generator(test_data_frame, BATCH_SIZE,\n                            None,\n                            dict(),\n                            target_size=(height, width))\npred = model.predict(test_gen, steps=len(test_data_frame) \/\/ BATCH_SIZE)[0]\n\ntr = 0.8\n\npred[pred>tr] = 1\npred[pred<=tr] = 0\n\npred = np.sum(pred, axis=(1,2,3))      # onno model e pred[0] er jaygay pred hobe\npred[pred>0] = 1\n\ntrue = []\nfor i in test_data_frame['mask']:\n    img = cv2.imread(i, cv2.IMREAD_GRAYSCALE)\n    s = np.sum(img)\n    if s > 0:\n        true.append(1)\n    else:\n        true.append(0)\n\ntrue = np.array(true)\n\nm = min(pred.size, true.size)\ncm = metrics.confusion_matrix(true[:m], pred[:m])\n\nTN = cm[0][0]\nFP = cm[0][1]\nFN = cm[1][0]\nTP = cm[1][1]\n\n# calculate the sensitivity\nconf_sensitivity = (TP \/ float(TP + FN))    \n# calculate the specificity\nconf_specificity = (TN \/ float(TN + FP))\n# calculate precision\nconf_precision = (TN \/ float(TN + FP))\n# calculate f_1 score\nconf_f1 = 2 * ((conf_precision * conf_sensitivity) \/ (conf_precision + conf_sensitivity))\n\nprint('Sensitivity', conf_sensitivity)\nprint('Specificity', conf_specificity)\nprint('F1 score', conf_f1)","9afaeb4c":"import pickle\n\nfor h, history in enumerate(histories):\n\n    keys = history.history.keys()\n    fig, axs = plt.subplots(1, len(keys)\/\/2, figsize = (25, 5))\n    fig.suptitle('No. ' + str(h+1) + ' Fold Results', fontsize=30)\n\n    for k, key in enumerate(list(keys)[:len(keys)\/\/2]):\n        training = history.history[key]\n        validation = history.history['val_' + key]\n\n        epoch_count = range(1, len(training) + 1)\n\n        axs[k].plot(epoch_count, training, 'r--')\n        axs[k].plot(epoch_count, validation, 'b-')\n        axs[k].legend(['Training ' + key, 'Validation ' + key])\n        \n    with open(str(h+1) + '_ultrasound_trainHistoryDict', 'wb') as file_pi:\n        pickle.dump(history.history, file_pi)","3c344601":"print('accuracies : ', np.array(accuracies))\nprint('losses : ', np.array(losses))\nprint('ious : ', np.array(ious))\nprint('dicecoefs : ', np.array(dicecoefs))\n\nprint('\\naverage accuracy : ', np.mean(np.array(accuracies)), '+-', np.std(np.array(accuracies)))\nprint('average loss : ', np.mean(np.array(losses)), '+-', np.std(np.array(losses)))\nprint('average iou : ', np.mean(np.array(ious)), '+-', np.std(np.array(ious)))\nprint('average dice_coe : ', np.mean(np.array(dicecoefs)), '+-', np.std(np.array(dicecoefs)))","51b6f49a":"selector = np.argmin(abs(np.array(ious) - np.mean(ious)))\nmodel = load_model(str(selector+1)+'_unet_ner_seg.hdf5', custom_objects={'dice_coef_loss': dice_coef_loss, 'iou': iou, 'dice_coef': dice_coef})","6f96cbbe":" for i in range(20):\n    index=np.random.randint(0,len(test_data_frame.index))\n    print(i+1, index)\n    img = cv2.imread(test_data_frame['filename'].iloc[index])\n    img = cv2.resize(img, (height, width))\n    img = img[np.newaxis, :, :, :]\n    img = preprocess_input(img)\n    pred = model.predict(img)\n    print('Class Prediction : ',pred[1])\n\n    plt.figure(figsize=(12,12))\n    plt.subplot(1,3,1)\n    plt.imshow(cv2.resize(cv2.imread(test_data_frame['filename'].iloc[index]), (height, width)))\n    plt.title('Original Image')\n    plt.subplot(1,3,2)\n    plt.imshow(np.squeeze(cv2.resize(cv2.imread(test_data_frame['mask'].iloc[index]), (height, width))))\n    plt.title('Original Mask')\n    plt.subplot(1,3,3)\n    plt.imshow(np.squeeze(pred[0]) > .5)\n    plt.title('Prediction')\n    plt.show()","d61dcaea":"!rm -r generated","979ef153":"Now, I try to load all image files and store them variables X and y. Afther doing this, I recognize that it takes very much memory.<br\/>\nPlease let me know if there are several efficient ways to store image file","bf904cd8":"Let's modularize this work.","b0c5a04b":"**Sort the file list in ascending order and seperate it into images and masks**<br\/>\nEach file has the form of either \"subject_imageNum.tif\" or \"subject_imageNum_mask.tif\", so we can extract `subject` and `imageNum` from each file name by using regular expression. `\"[0-9]+\"` means to find the first consecutive number.<br\/>","7c658a86":"Let's check that I did well","6899e637":"## How to deal with train_masks.csv ?","35492b3e":"## Building the training dataset.\nLet's look at the train image list"}}