{"cell_type":{"56fed7e7":"code","ed0ad003":"code","3aa14d95":"code","4e158ee6":"code","c212305c":"code","64043826":"code","057b187a":"code","ccd476b3":"code","008d2f70":"code","5d24b2e3":"code","5f1a2d4c":"code","28eec6cb":"code","c2f84a64":"code","efe7e20d":"code","b786d205":"code","de0fcc56":"code","a968b109":"code","fa15fc9e":"code","e5ec1c41":"code","9ba86c82":"code","41f54a06":"markdown","2f3f68dc":"markdown","8e750c59":"markdown","ded9232e":"markdown","f08bc05c":"markdown","eb8d37dc":"markdown","4808f8d3":"markdown","128198f5":"markdown","81dff6a8":"markdown","bdeed29d":"markdown","14a3ff51":"markdown","80148aa0":"markdown","fb92ca86":"markdown","d3048f5b":"markdown","d9477c9a":"markdown","9a23b83d":"markdown","cb0085da":"markdown","95487349":"markdown","8edac75a":"markdown","da1a27fa":"markdown","3317b3f3":"markdown","d42060ad":"markdown","da00c62a":"markdown","e8b55e05":"markdown","8633073d":"markdown","7c3fe623":"markdown"},"source":{"56fed7e7":"%matplotlib inline\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt \nfrom shapely.geometry import LineString\nfrom statistics import mean\n\nfrom sympy import *\n#from sympy import symbols\n#from sympy import plot\n\nfrom math import sqrt","ed0ad003":"\nposition_data = {'t (s)': [0, 1, 2, 3, 4, 5], 'x(m)': [30, 52, 38, 0,-37,-53]}\nposition_DataFrame= pd.DataFrame.from_dict(position_data)\nposition_DataFrame\n","3aa14d95":"\n# We can print, min, max, mean, average of postion\nprint(f\"The max value of the position is: {position_DataFrame['x(m)'].max()}\")\nprint(f\"The min value of the position is: {position_DataFrame['x(m)'].min()}\")\nprint(f\"The mean value of the position is: {position_DataFrame['x(m)'].mean()}\")\nprint(f\"The median value of the position is: {position_DataFrame['x(m)'].median()}\")\n\n","4e158ee6":"position_DataFrame.plot(kind='scatter',x='t (s)', y='x(m)');","c212305c":"\n# calculates speed from postion and time\nposition_DataFrame['v(m\/s)'] = (position_DataFrame['x(m)'] - position_DataFrame['x(m)'].shift(1)) \/ (position_DataFrame['t (s)'] - position_DataFrame['t (s)'].shift(1))\nposition_DataFrame\n","64043826":"\n# Replace null values by zero\nposition_DataFrame =position_DataFrame.fillna(0)\nposition_DataFrame\n","057b187a":"\n#Calculate acceleration from speed\nposition_DataFrame['a(m\/s^2)'] = (position_DataFrame['v(m\/s)'] - position_DataFrame['v(m\/s)'].shift(1)) \/ (position_DataFrame['t (s)'] - position_DataFrame['t (s)'].shift(1))\nposition_DataFrame =position_DataFrame.fillna(0)\nposition_DataFrame\n","ccd476b3":"\n# form data frame out of time points\ntime = pd.DataFrame({'t':range(0,6)})\ntime['y'] = 0 + 20 * time['t'] -  0.5* 9.8*time['t'] **2 \ntime.plot(kind='scatter',x='t',y='y');\n#print time to see the data frame\n","008d2f70":"\n# line plot\ntime = pd.DataFrame({'t':range(0,6)})\ntime['y'] = 0 + 20 * time['t'] - 0.5* 9.8*time['t'] **2  \ntime.plot(kind='line',x='t',y='y');\n","5d24b2e3":"# using \\delta t = T\/N\ntime =10\ndt = 0.1;\nn = int(round(time\/dt))\nt = np.linspace(0,5,n) # time axis with n-points\n\ny = 0+20*t-0.5*9.8*t**2 #here is our equation\n\n# Create the plot\nplt.plot(t, y,label='Position y in meters', color ='m')\n\n# Add a title\nplt.title('Position versus Time')\n\n\n# Add X and y Label\nplt.xlabel('t in sec')\nplt.ylabel('y in meters')\n\n# Add a grid\nplt.grid(alpha=.4,linestyle='--')\n\n# Add a Legend\nplt.legend()\n\n# Show the plot\nplt.show()","5f1a2d4c":"x=0\n\n\ntime =10\ndt = 0.1;\nn = int(round(time\/dt))\nt = np.linspace(0,4,n)\n# Create the vectors X and Y\n#t = np.array(range(0,5,n))\n# choses very few data so better make it smooth with ff \nx = x-4*t+2*t**2\n\n# Create the plot\nplt.plot(t, x,label='Position versus Time', color='c')\n\n\n\n# Add a title\nplt.title('Position versus Time')\n\n# Add limit\n#plt.xlim()\nplt.ylim(-2.1,10.1)\n\n# Add X and y Label\nplt.xlabel('t in sec')\nplt.ylabel('x meters')\n\n# Add a grid\nplt.grid(alpha=.4,linestyle='--')\n\n# Add a Legend\nplt.legend()\n\n# Show the plot\nplt.show()","28eec6cb":"\nt = Symbol('t')\nx = -4*t+2*t**2\nv=x.diff(t) # dx\/dt\na = v.diff(t)# dv\/dt\nprint(f\"The positon is: {x}\")\nprint(f\"The speed  is: {v}\")\nprint(f\"The acceleration  is: {a}\")\n","c2f84a64":"\n\np = plot(x, v, a, (t, 0, 5.6), show=false)\n#change the color of p's\np[0].line_color = 'b' # x\np[1].line_color = 'r' # v\np[2].line_color = 'g' # a\n\np.show()\n","efe7e20d":"\n# Use cmath instead of math if you are working with complex numbers\n#import cmath\n\na = 4\nb = -42\nc = -2000\nd = (b**2) - (4*a*c)\nroot1 = (-b-sqrt(d))\/(2*a)\nroot2 = (-b+sqrt(d))\/(2*a)\nprint(root1)\nprint(root2)\n","b786d205":"\n# informations we gathered from the question \nxA=0\nxB=2000\nvA=0\nvB=-42\naA=5.6\naB=2.4\n\n# calculate distance traveled by Car A and Car B respectively\ntime=10\ndt = 0.1;\nn = int(round(time\/dt))\nt = np.linspace(0,40,n)\nxA = xA  + vA*t+0.5*aA *t**2\nxB = xB + vB*t+0.5*aB *t**2\n# Create the plot\nplt.plot(t, xA,label='CarA', color='r')\nplt.plot(t, xB,label='CarB', color ='b')\n\n\n# Add a title\nplt.title('Distance of CarA and CarB')\n\n# Add X and y Label\nplt.xlabel('time in seconds')\nplt.ylabel('distance in meters')\n\n\n# Add a grid\nplt.grid(alpha=.4,linestyle='--')\n\n# Add a Legend\nplt.legend()\n\n# Show the plot\nplt.show()","de0fcc56":"\n# informations we gathered from the question \nxA=0\nxB=2000\nvA=0\nvB=-42\naA=5.6\naB=2.4\n\n\ntime=10\ndt = 0.1;\nn = int(round(time\/dt))\nt = np.linspace(0,40,n)\nxA = xA  + vA*t+0.5*aA *t**2\nxB = xB + vB*t+0.5*aB *(t)**2\n# Create the plot\nplt.plot(t, xA,label='CarA', color='r')\nplt.plot(t,xB,label='CarB', color='b')\n\n\n# Add a title\nplt.title('Distance of CarA and CarB')\n\n# Add X and y Label\nplt.xlabel('time in seconds')\nplt.ylabel('distance in meters')\n\n# Add a grid\nplt.grid(alpha=.4,linestyle='--')\n\n# Add a Legend\nplt.legend()\n\n# Show the plot\n\n#To show intersection\nfirst_line = LineString(np.column_stack((t, xA)))\nsecond_line = LineString(np.column_stack((t, xB)))\nintersection = first_line.intersection(second_line)\n\nif intersection.geom_type == 'MultiPoint':\n    plt.plot(*LineString(intersection).xy, 'o', color = 'black')\nelif intersection.geom_type == 'Point':\n    plt.plot(*intersection.xy, 'o', color = 'black')\nplt.show()","a968b109":"xA, xB = intersection.xy # use this if it is single point\n#xA, xB = LineString(intersection).xy\nprint(xA,xB)","fa15fc9e":"a1 = 1\nb1 = -32\nc1 = 1\nd1 = (b1**2) - (4*a1*c1)\nrootC = (-b1-sqrt(d1))\/(2*a1)\nrootT = (-b1+sqrt(d1))\/(2*a1)\nprint(rootC)\nprint(rootT)","e5ec1c41":"#Given\nxC=45\nxT=0\nvC=45\nvT=0\naC=0\naT=3\n\n\ndt = 0.1;#0.00001\nn = int(round(time\/dt))\nt = np.linspace(0,40,n)\nxC = xC  + vC*t+0.5*aC *t**2\nxT = xT + vT*t+0.5*aT *t**2\n# Create the plot\nplt.plot(t, xC,label='Car', color='b')\nplt.plot(t,xT,label='Tropper', color='r')\n\n\n# Add a title\nplt.title('Distance of Car and Tropper')\n\n# Add X and y Label\nplt.xlabel('t in s')\nplt.ylabel('distance in meters')\n\n# Add limit\n#plt.xlim(-1,32)\n#plt.ylim(0,1600)\n\n# Add a grid\nplt.grid(alpha=.4,linestyle='--')\n\n# Add a Legend\nplt.legend()\n\n# Show the plot\n\n#To show intersection\nfirst_line = LineString(np.column_stack((t, xC)))\nsecond_line = LineString(np.column_stack((t, xT)))\nintersection = first_line.intersection(second_line)\n\nif intersection.geom_type == 'MultiPoint':\n    plt.plot(*LineString(intersection).xy, 'o', color = 'black')\nelif intersection.geom_type == 'Point':\n    plt.plot(*intersection.xy, 'o', color = 'black')\nplt.show()","9ba86c82":"xC, xT = intersection.xy # use this if it is single point\n#x, y = LineString(intersection).xy\nprint(xC,xT)","41f54a06":"We can also use motion diagrams when one the dependece relation of one variable on another variable is known as in the following **example**\n><span style=\"color:blue\">A particle moves along the x axis. Its position varies with time according to\nthe expression $x =- 4t + 2t^2$ , where $x$ is in meters and $t$ is in seconds.<\/span>","2f3f68dc":"Let add another **example** and employ the above method:\n><span style=\"color:blue\">A car traveling at a constant speed of 45.0 m\/s passes a trooper on a motorcycle hidden behind a billboard. One second after the speeding car passes the billboard, the trooper sets out from the billboard to catch the car, accelerating at a constant rate of 3.00 m\/s . How long does it take the trooper to overtake the car?<\/span>\n\n> Car: $xC = 45 t$  \n  Tropper: $xT = 0.5*3.0(t-1)^2$ \n  \nWhen trooper overtakes the car, the distance covered by the trooper and car. will be the same,  i.e $xC=xT$, and noting that the trooper began her journey a second later, the equations of motion takes the form: $t^2-32t+1=0$","8e750c59":"Ontop of providing a clearer picture of the situation at hand, motion diagram also help us answer questions like the following **example** without having to solve them by hand.\n  \n><span style=\"color:blue\">Car A starts from rest and has an acceleration of $5.6 m\/s^2$. Another car Car B starts at the other end of a track such that it is $2000$ meters away from Car A and driving towards car A. Car B starts with a velocity of $42 m\/s$ and has an acceleration of $2.4 m\/s^2$. Where and when do the two cars meet.<\/span>\n","ded9232e":"Looking at the times we can chose to ignore the negative time since we take $t = 0$ as our initial time, based on this information we conclude they meet around $t=28$ seconds.  \n\nNow let me use motion diagram to see if we can arrive at a similar solution. All we need to do here is just plot the distance versus time graph, for both cars, and see if they interesect; and if they do at what time? ","f08bc05c":"You can see that the points are connected by a line, but the curve is not smooth. The question then is based on the above formula how can we get a smooth curve. The answer lies in the data points we take. Even if we want to plot the distance vs time, between zero to five seconds, we need as much points as possible to make the connection between the data point smooth enough. \n\nIf we say the total time is plotted from 0 to $T$, as of now we have 5 points in this line (which is stretched from zero to T = 5 ), but now let us divide this line into $n$ many segements each length $\\delta t$, and consequently we have $\\delta t = T\/N $. The smaller the segement the more smooth our curve becomes, this is so because $ N = T\/\\delta t$. \n\nTo achive this we use numpy's `linspace`, which returns evenly spaced numbers over a specified interval.\n\n>`numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)`  \nReturns **num** evenly spaced samples, calculated over the interval [start, stop].\nThe endpoint of the interval can optionally be excluded.\n\nNow let us apply this method to our problem at hand and see what our motion diagram looks like now.","eb8d37dc":"This is a very simple, straight-forward plot of the data points, and we can see from the motion diagram of $x$ versus $t$ that the postion starts at 30m and goes down to -53m as time proceeds, and the curve looks kind of inverted parabola.\n\nNext step is to calculate the speed from our data, and by definition $\\Delta v = \\frac{\\Delta x}{\\Delta t}$, where $\\Delta = Final - Initial$. Therefore by considering each row as initial value for the next row, we can calculate the speed using the following code line.","4808f8d3":"Notice here that, the first value of in v(m\/s) is `NaN`, this happens because it doesn't have a previous row to subtract from. So we need to manually replace it by zero.","128198f5":"Excellent! This actually is close enough to the analytical result we have obtained.\n\nTo conclude we have seen how to use python to plot motion diagrams and solve our problems, we also have managed to get an intersection point of the curves.","81dff6a8":"**Shapely** is a Python package for set-theoretic analysis and manipulation of planar features for geometry-related computations. We are going to make use of this library to obtain the intersection point\/s. To this end, all we need to do is construct `LineString` from each line and get their intersection using the code given below. But if you are wondering what is `LineString`?\n>`class LineString(coordinates)`\nThe LineString constructor takes an ordered sequence of 2 or more (x, y[, z]) point tuples.\n\nCheck for the discussions in [stackoverflow](https:\/\/stackoverflow.com\/questions\/28766692\/intersection-of-two-graphs-in-python-find-the-x-value) as there are other interseting methods listed in there too for you to check them out.\n>`object.intersection(other)`\nReturns a representation of the intersection of this object with the other geometric object.\n\nHere is the snippet of the code, that we use to get the intersection point or points, we will include it into our code and pinpoint the exact intersection point. What this code does is take points in the lines (of CarA and CarB) then form a LineString. Next look for intersection and plot it.\n\n```python\nfirst_line = LineString(np.column_stack((t, xA)))\nsecond_line = LineString(np.column_stack((t, xB)))\nintersection = first_line.intersection(second_line)\n\nif intersection.geom_type == 'MultiPoint':\n    plt.plot(*LineString(intersection).xy, 'o')\nelif intersection.geom_type == 'Point':\n    plt.plot(*intersection.xy, 'o')\n```\n","bdeed29d":"From these graphs we can see that at t=5 sec, the distance is 22.5 m. Of course this is simple problem and one can arrive at the solution using easy plugging, but this approach is preferable when you have complicated and more variables. Moreover this is fun way to do it!","14a3ff51":"Again if we have information about speed, then we can calculate the accelaration. The step is pretty much the same as previous one, though now we take speed instaed of postion as by definition $\\Delta a = \\frac{\\Delta v}{\\Delta t}$. Recall each entry of the row is input as an intial value for the next row. Don't forget to replace the null values by zero.","80148aa0":"Because the position of the particle is given by a mathematical function, the motion of the particle is completely known. One can see from the position\u2013time graph that the particle moves in the negative \nx direction for the first second of motion, is momentarily at rest at the moment t = 1 s, and moves in the positive x direction at times t > 1 s.\n\nActually we can use python's symbolic library and obtain the speed and acceleration of the particle as follows, recall velocity is the derivative of position; acceleration inturn is the derivative of velocity. The first thing we need to. do is tell python to symbolize time, and based on that we call the `diff()` function for differentiating x with respect time to get velocity; and then velocty with respect time to get acceleration. Here is how you. will do. it.","fb92ca86":"Once we got the data in DataFrame, we can use functions like `max()`, `min()`, `median()`, `mean()` to get the feel of the data","d3048f5b":"Also if you want to see it visually you can plot the data frame as follows, we are going to use scatter plot as we have very few data. But if you have ample data points then you can use line plot. The line plot connects the data points, and if we have very few data points like ours the curve won't be smooth. We will see examples in the next section.","d9477c9a":"We can see that we the interesection point is a bit pass 30 seconds, we used our Shapley library to pinpoint the intersection time.","9a23b83d":"Great! we see that CarA starts from zero, while CarB starts 2000m away, after some time (approximately around 25 sec-- by looking at it) they meet,and then depart again. But our eye might be decieving us so, it will be helpful to look for a way that pinpoints the exact meeting point. I found a way to do this in a [stackoverflow](https:\/\/stackoverflow.com\/questions\/28766692\/intersection-of-two-graphs-in-python-find-the-x-value) discussion. Of the suggestion provided, I found the **Shapely** package relevant for our case. So what is it?","cb0085da":"We can also visualize  these results as follows, <span style=\"color:blue\">**blue curve is position**<\/span>,\n<span style=\"color:red\">**red curve is speed**<\/span>, and <span style=\"color:green\">**green curve is acceleration**<\/span>","95487349":"The intersection time is thus about 24.6 seconds; and the meeting distance is 1692.8 meters. You can see it is off by few seconds from the analytical result, but that is . We may need to check our margin of error.","8edac75a":"# Python for Kinematics: Motion Diagram-Tutorial\n\n### Kinematic Equation\n\nI want to introduce you in this post how we can use `python` to graph motion diagrams or plots such as *postion-time*, *velocity-time*, *acceleration-time*. Graphs are helpful in many instances, and we use them in physics more often to 'see' the result. By looking at the plots we can understand what kind of relationship exists between two parameters and\/or variables. Moreover, looking-visually- at a graph makes it easy to grasp the situation and help us widen our understanding. By looking at graphs, it is easily to answer questions like: Do I have linear relationship? or quadratic? or higher order polynomial? all this can be deduced after ploting the results. For some simple forms, the graphs help us to establish equations too, thereby allowing us generalize the conclusion. \n\nI will disscus here the simple use of Python to describe motion a system, specifically in a frictionless system, where we assume its effect is negligible, and use the plotted graph to decribe the motion and arrive at solution if need be. \n\nSince my aim is to show how to use python to get motion diagrams, I am skipping the derivation of kinematic equations in here. I believe you already are able to do so, if not I refer you to [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Equations_of_motion). For convenienece we list the basic kinematic equations of motion as:\n\n> $v_{avg} =\\frac {v_{i} + v_{f}}{2}$  \n  $s=v_{avg}t$  \n  $v_{f} = v_{i} + a t$  \n  $v^2_{f} = v^2_{i}+2as$  \n  $s= v_{i}t + \\frac{1}{2}at^2$  \n  \n  \nOne point worth mentioning about these equations is that they are used in a situation where the **acceleration is is constant**. These types of motion usually are referred to as Uniformly Accelerated Rectilinear Motion (UARM). Rectilinear-- indicates that the trajectory is a straight line.\n\nI assume you have already installed python(https:\/\/www.python.org) in your machine and have basic knowldge of how it works. For this tutorial you just need very basic know-how of python. \n\nLet me first import the libraries that I need for this particular post, as you will see below we are going to use them for plotting, forming data frame, and obtaining an intersection point\/s. ","da1a27fa":"As expected we have taken five time-points and used the formula to obtain corresponding five points in the postion column, and the graph shows where each points are located. Let us see what kind of plot we get if we use line plot instead of scatter. ","3317b3f3":"First let us see how we can plot a simple motion diagram, to exemplify I have the following data points that I got from[Serway](https:\/\/books.google.com\/books\/about\/Physics_for_Scientists_and_Engineers_Cha.html?id=3dFWOQmkweMC). We are using SI units, we have a record of a motion, in x-axis, of an object as described by the time taken (in seconds) to cover the specified distance (in meters). \n\nFirst thing we need to do is put it in a DataFrame, so that we can make use of pandas library to do some calculation.","d42060ad":"Nice! The dot at the intersection of the curves indicates that we are able to pin point the exact point. But still we need to print the result. To do so we can readily use the following line of code","da00c62a":"Again, here also, we have two time outputs, and we note that the first result is when they first met at the billboard and the second is the time we are interested in, and that says trooper overtakes the car around 31.9 seconds. Let us now see if we can reproduce these result using motion diagram.","e8b55e05":"Thanks to the Shapely library for geometry-related computations, getting the \nintersection will be much easier. You just have to construct `LineString` from \neach line and get their intersection as follows:","8633073d":"To begin with let us solve the equation analytically. To thsi end we assume they met at postion $x$ from car A's starting point, which means $2000-x$ away from car B's starting position. The distance for both cars respectively can be calculated using:\n\nCar A: $x= (0m\/s)t + \\frac{1}{2}(5.6)(m\/s^2)t^2(s^2)$\n\nCar B: $2000-x= (-42m\/s)t + \\frac{1}{2}(2.4)(m\/s^2)t^2(s^2)$\n\nEquating both equations and rearranging like terms reduces the pair of equations into the following quadratic equation: $4.0 t^2 -42t-2000=0$. Now we can solve this equation using the quadratic formula, or we can feed the formula as a code for our computer to solve it. For this post we chose the later, and we can write the code as follows\n","7c3fe623":"## Smooth Curve Plots\n\nWe have seen earilier that when your data points are taken to be few, the plot is better viewed via scatter plot as our eye connects the dot and completes the curve. But if we try to make a line plot, as we see below, the line tries to connect each data points and based on that it yields plot. \n\n<span style=\"color:blue\">Let us take an **example** where an object is thrown upward with an intial velocity of $20m\/s$, we want to calculate the total height the object covers when t is five seconds. For this case we chose the kinematic equation with $s=h$ and $a=g$, to get an equation of the form $y=y_i + v_i t - \\frac{1}{2}gt^2$, where acceleration deue to gravity is given to be $g=9.8 m\/s^2$.<\/span>\n\nWe can use the `range()` method in pandas to list five time points and form data frame, this produces a one column DataFrame, next we can add another column to the DataFrame that calculates the height (based on the above formula) and let us name this column to be 'y'. That is it we just formed a DataFrame that has time and postion as its columns. If you notice this is the same dataFrame as the one seen above. That means we can plot and see the relationship. One point worth noting is that while using the `range()` function with **start** and **stop** points, the range of integers end at **stop \u2013 1**. Of course we could a step size, but the steps shoup be in _int_.\n\n```python\n# The following creates a one-columned dataframe\ntime = pd.DataFrame({'t':range(0,6)})\n#Next we calculate height and add the result as second column\ntime['y'] = 0 + 20 * time['t'] - time['t'] **2 * 0.5* 9.8\n# recall t**2 is t squared\n```"}}