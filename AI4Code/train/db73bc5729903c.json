{"cell_type":{"c6887246":"code","72708198":"code","d27eeb2c":"code","f5b7f2b5":"code","b06b6102":"code","1e98e67f":"code","5737f8ce":"code","0d69ebe2":"code","dbdbcb65":"code","5f738717":"code","077068ab":"code","a7bdd24d":"code","c4eab577":"code","04401599":"code","160b6901":"code","5852061d":"code","4dd34ef8":"code","046a3569":"code","2e8c5c7b":"code","14d189b4":"code","0cd5c75e":"code","ea7cde4e":"code","532bfa12":"code","8d7f84d4":"code","e12097ad":"code","49dfe551":"code","f1e94f67":"code","12b3d0d7":"code","630c7882":"code","909d100f":"code","dfd3f9ea":"code","e51bb827":"code","0c455ca9":"code","457ca685":"code","9a69eb0e":"code","da72e9ee":"code","38f5d813":"code","592a8d99":"code","0326543b":"code","bf86f8e5":"code","e68dfbb8":"code","2a4b4bb4":"code","fd149dfb":"code","aaa02ebd":"code","d4261c49":"code","00bc7af0":"code","1c710df6":"code","39e4a60d":"code","89554cfc":"code","cce8385e":"code","160dadc8":"code","6db3952d":"code","3cdd0326":"code","ad5a2aa5":"code","b7248642":"code","2b266f57":"code","ab53c4a5":"code","fa5cb044":"code","cd41c711":"code","f43673b6":"code","495fc3c0":"code","da384c7a":"code","ddd6f739":"code","8db60dc5":"code","0a44bbd5":"markdown"},"source":{"c6887246":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","72708198":"import matplotlib.pyplot as plt\nimport seaborn as sns","d27eeb2c":"data = pd.read_csv('..\/input\/churn-modelling\/Churn_Modelling.csv')","f5b7f2b5":"data.head()","b06b6102":"data.shape","1e98e67f":"# Dropping columns that are not required for EDA or modelling\ndata.drop(['RowNumber','CustomerId','Surname'], axis=1, inplace=True)","5737f8ce":"data.info()","0d69ebe2":"data.head()","dbdbcb65":"data.describe()","5f738717":"sns.countplot(x=data.Geography, data=data, hue=data.Exited)","077068ab":"sns.countplot(x=data.Gender, data=data, hue=data.Exited)","a7bdd24d":"plt.figure(figsize=(12,9))\nsns.scatterplot(x=data.EstimatedSalary, y=data.Balance, data=data)\nplt.show()","c4eab577":"sns.distplot(data.CreditScore)","04401599":"sns.distplot(data.EstimatedSalary)","160b6901":"sns.distplot(data.Balance)","5852061d":"data['AgeGroup'] = 'Young'\ndata.loc[(data.Age>35)&(data.Age<=60), 'AgeGroup']='MidAge'\ndata.loc[data.Age>60, 'AgeGroup']='SeniorCitizens'\ndata.drop('Age', axis=1, inplace=True)","4dd34ef8":"data.head()","046a3569":"data = pd.get_dummies(data=data, drop_first=True)","2e8c5c7b":"data.head()","14d189b4":"X = data.drop('Exited', axis=1)\ny = data.Exited","0cd5c75e":"from sklearn.preprocessing import StandardScaler, MinMaxScaler","ea7cde4e":"sns.pairplot(data=X)","532bfa12":"scaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)","8d7f84d4":"X_scaled = pd.DataFrame(X_scaled, columns=X.columns)","e12097ad":"X_scaled.head()","49dfe551":"y.value_counts()","f1e94f67":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier, ExtraTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom xgboost.sklearn import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","12b3d0d7":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify=y)","630c7882":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","909d100f":"y_train.value_counts()","dfd3f9ea":"clf = LogisticRegression()\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\ny_pred","e51bb827":"print(metrics.confusion_matrix(y_test, y_pred))","0c455ca9":"!pip install lazypredict","457ca685":"!pip install --upgrade pip","9a69eb0e":"import lazypredict\nfrom lazypredict.Supervised import LazyClassifier","da72e9ee":"clf = LazyClassifier(verbose=0, ignore_warnings=True, custom_metric=None)\nmodels, predictions = clf.fit(X_train, X_test, y_train, y_test)","38f5d813":"models","592a8d99":"predictions","0326543b":"import imblearn\nfrom imblearn.over_sampling import SMOTE","bf86f8e5":"smt = SMOTE(0.75, random_state=2)","e68dfbb8":"X_train_res, y_train_res = smt.fit_resample(X_train, y_train)","2a4b4bb4":"clf = LazyClassifier(verbose=0, ignore_warnings=True, custom_metric=None)\nmodels, predictions = clf.fit(X_train_res, X_test, y_train_res, y_test)","fd149dfb":"models","aaa02ebd":"predictions","d4261c49":"rf = RandomForestClassifier(random_state=2)\nrf.fit(X_train_res, y_train_res)\ny_pred = rf.predict(X_test)\ny_pred","00bc7af0":"print(metrics.confusion_matrix(y_test, y_pred))","1c710df6":"print(metrics.classification_report(y_test, y_pred))","39e4a60d":"print(metrics.roc_auc_score(y_test, y_pred))","89554cfc":"print(rf.score(X_train_res, y_train_res))\nprint(rf.score(X_test, y_test))","cce8385e":"X_train.shape","160dadc8":"y_train.value_counts()","6db3952d":"rf = RandomForestClassifier(n_estimators=300, max_depth=6, class_weight={0:1, 1:5}, random_state=2)\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)\nprint(metrics.confusion_matrix(y_test, y_pred))\nprint('\\t')\nprint(metrics.classification_report(y_test, y_pred))\nprint('\\t')\nprint(metrics.roc_auc_score(y_test, y_pred))\nprint('\\t')\nprint(rf.score(X_train, y_train))\nprint(rf.score(X_test, y_test))","3cdd0326":"from sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingClassifier\nclf = HistGradientBoostingClassifier(learning_rate=0.01, max_iter=1000, max_depth=6, validation_fraction=0.2, \n                                     n_iter_no_change=25, max_leaf_nodes=9, min_samples_leaf=20, loss='binary_crossentropy',\n                                     l2_regularization=1, random_state=2)","ad5a2aa5":"clf.fit(X_train_res, y_train_res)\ny_pred = clf.predict(X_test)\nprint(metrics.confusion_matrix(y_test, y_pred))\nprint('\\t')\nprint(metrics.classification_report(y_test, y_pred))\nprint('\\t')\nprint(metrics.roc_auc_score(y_test, y_pred))\nprint('\\t')\nprint(clf.score(X_train_res, y_train_res))\nprint(clf.score(X_test, y_test))","b7248642":"X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, stratify=y)","2b266f57":"X_train.head()","ab53c4a5":"X_train_res, y_train_res = smt.fit_resample(X_train, y_train)","fa5cb044":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense","cd41c711":"X_train_res.shape","f43673b6":"model = Sequential()\nmodel.add(Dense(32, input_dim = 12, activation='sigmoid'))\nmodel.add(Dense(32, activation='sigmoid'))\nmodel.add(Dense(32, activation='sigmoid'))\n\nmodel.add(Dense(64, activation='sigmoid'))\nmodel.add(Dense(64, activation='sigmoid'))\nmodel.add(Dense(64, activation='sigmoid'))\n\nmodel.add(Dense(128, activation='sigmoid'))\nmodel.add(Dense(128, activation='sigmoid'))\nmodel.add(Dense(128, activation='sigmoid'))\n\nmodel.add(Dense(1, activation='sigmoid'))","495fc3c0":"history = model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","da384c7a":"clf = model.fit(x=X_train_res, y=y_train_res, epochs=100, batch_size=128)","ddd6f739":"y_pred = model.predict_classes(X_test)\ny_pred","8db60dc5":"print(metrics.confusion_matrix(y_test, y_pred))\nprint('\\t')\nprint(metrics.classification_report(y_test, y_pred))\nprint('\\t')\nprint(metrics.roc_auc_score(y_test, y_pred))","0a44bbd5":"Let's do some EDA to see how the data is distributed and how do the independent variables affect the taget(Exited). "}}