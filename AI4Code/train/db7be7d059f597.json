{"cell_type":{"37dac4f2":"code","5fdc6341":"code","a58b2005":"code","9f79c0e0":"code","b49e06b2":"code","b0043943":"code","3dd887bf":"code","83132e77":"code","aa760006":"code","4e05a6b2":"code","f43d0f33":"code","5b24c5a1":"code","a38a1857":"code","ca834cc5":"code","dc457d30":"code","189aae0f":"code","6c2437c5":"code","58aac406":"code","7b917687":"code","b2e7ff61":"code","19b58e55":"code","b334a291":"code","01d323d4":"code","23c38080":"code","8e653eba":"code","72071b73":"code","13508a73":"code","8476c0ae":"code","b4751033":"markdown","6f7406ce":"markdown","611062e1":"markdown","2eb95127":"markdown","fb751bfe":"markdown","9370a418":"markdown","816f947f":"markdown","c3fc4405":"markdown","80668062":"markdown","5f2fb0da":"markdown","5337a742":"markdown","1b8ea26d":"markdown","eab97382":"markdown","4c65b38b":"markdown","26f631ed":"markdown","b5014337":"markdown","e3e97143":"markdown","8e93d01b":"markdown","087d4d2d":"markdown","59185fb2":"markdown","112f55a0":"markdown"},"source":{"37dac4f2":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.cluster import KMeans, AgglomerativeClustering\nfrom sklearn.metrics import silhouette_samples\nfrom scipy.spatial.distance import pdist, squareform\nfrom scipy.cluster.hierarchy import linkage, dendrogram\n\n# plotly imports\nimport plotly as py\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot","5fdc6341":"# load the customer data\nraw_df = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv', index_col='CustomerID')\nraw_df.info()","a58b2005":"raw_df.head()","9f79c0e0":"raw_df.describe()","b49e06b2":"genders =['Female', 'Male']\nfig = go.Figure([go.Bar(x=genders, y=raw_df['Gender'].value_counts().values.tolist())])\nfig.show()","b0043943":"fig = px.scatter(raw_df, x='Annual Income (k$)', y='Spending Score (1-100)', color=\"Gender\", size=\"Age\")\nfig.show()","3dd887bf":"# One-hot encoding of gender column\nencoded_df = pd.get_dummies(raw_df, prefix='Gender', drop_first=True)\nencoded_df.head()","83132e77":"# Standardize the dataset\nscaler = StandardScaler()\n# Scales only the numerics columns\nscaled_features = pd.DataFrame(scaler.fit_transform(encoded_df.loc[:, ['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]),\n                              index=encoded_df.index, columns=['Scaled_Age', 'Scaled_AnnualIncome', 'Scaled_SpendingScore'])\n# Concat with the Gender column\nscaled_df = pd.concat([scaled_features, encoded_df.loc[:, ['Gender_Male']]], axis=1)\nscaled_df.head()","aa760006":"result_df = scaled_df.copy()\nkmeans = KMeans(n_clusters=5)\nclusters = kmeans.fit_predict(result_df.values)\nresult_df['Cluster'] = clusters\nresult_df.head()","4e05a6b2":"# Elbow plot to determine the optimal number of clusters\ndistorsions = []\nfor n_cluster in range(1, 11):\n    km = KMeans(n_clusters=n_cluster, n_init=50, max_iter=300, random_state=0)\n    km.fit(scaled_df.values)\n    distorsions.append(km.inertia_)\nplt.plot(range(1, 11), distorsions, marker='o')\nplt.show()","f43d0f33":"def silhoutte_plot(X, y_km):\n    cluster_labels = np.unique(y_km)\n    n_clusters = cluster_labels.shape[0]\n    silhoutte_vals = silhouette_samples(X, y_km, metric='euclidean')\n    y_ax_upper, y_ax_lower = 0, 0\n    y_ticks = []\n    for i, c in enumerate(cluster_labels):\n        c_silhoutte_vals = silhoutte_vals[y_km==c]\n        c_silhoutte_vals.sort()\n        y_ax_upper += len(c_silhoutte_vals)\n        color = cm.jet(float(i) \/ n_clusters)\n        plt.barh(range(y_ax_lower, y_ax_upper), c_silhoutte_vals, height=1.0, edgecolor='none', color=color)\n        y_ticks.append((y_ax_lower + y_ax_upper) \/ 2.)\n        y_ax_lower += len(c_silhoutte_vals)\n\n    silhoutte_avg = np.mean(silhoutte_vals)\n    plt.axvline(silhoutte_avg, color='red', linestyle='--')\n    plt.yticks(y_ticks, cluster_labels+1)\n    plt.ylabel('Cluster')\n    plt.xlabel('Silhoutte Coefficient')\n    plt.show()","5b24c5a1":"km4 = KMeans(n_clusters=4, n_init=50)\ny_km4 = km4.fit_predict(scaled_df.values)","a38a1857":"silhoutte_plot(scaled_df.values, y_km4)","ca834cc5":"km5 = KMeans(n_clusters=5, n_init=50)\ny_km5 = km5.fit_predict(scaled_df.values)","dc457d30":"silhoutte_plot(scaled_df.values, y_km5)","189aae0f":"# Apply complete linkage agglomeration using linkage function which return a linkage matrix row_clusters\nrow_clusters = linkage(scaled_df.values, method='complete', metric='euclidean')\n# Now let's make a dendrogram\nplt.figure(figsize=(12, 8))\nrow_dndr = dendrogram(row_clusters, labels=scaled_df.index)\nplt.tight_layout()\nplt.ylabel('Euclidean Distance')\nplt.show()","6c2437c5":"# Now let's perform aggolomerative hierarchical clustering using sklearn library\nac = AgglomerativeClustering(n_clusters=5, affinity='euclidean', linkage='complete')\nlabels = ac.fit_predict(scaled_df.values)\nprint('First 10 cluster labels: {}'.format(labels[:10]))","58aac406":"# PCA with three priciple components\npca = PCA(n_components=3)","7b917687":"# PCA Dataframe\nPCs = pd.DataFrame(pca.fit_transform(result_df.drop(['Cluster'], axis=1)))\nPCs.columns = ['PC1', 'PC2', 'PC3']","b2e7ff61":"# Concatenate all PCs dataframes with result df\nresult_df = pd.concat([result_df, PCs], axis=1, join='inner')\nresult_df.head()","19b58e55":"# Seperate out 5 different clusters\ncluster0 = result_df[result_df['Cluster'] == 0]\ncluster1 = result_df[result_df['Cluster'] == 1]\ncluster2 = result_df[result_df['Cluster'] == 2]\ncluster3 = result_df[result_df['Cluster'] == 3]\ncluster4 = result_df[result_df['Cluster'] == 4]","b334a291":"init_notebook_mode(connected=True)","01d323d4":"# intruction for building 2-D Plot\n\n# trace1 for `cluster0`\ntrace1 = go.Scatter(x=cluster0['PC1'], y=cluster0['PC2'], mode='markers', name='Cluster0', \n                    marker=dict(color = 'rgba(255, 128, 255, 0.8)'), text=None)\n\n# trace2 for `cluster1`\ntrace2 = go.Scatter(x=cluster1['PC1'], y=cluster1['PC2'], mode='markers', name='Cluster1', \n                    marker=dict(color = 'rgba(255, 128, 2, 0.8)'), text=None)\n\n# trace3 for `cluster2`\ntrace3 = go.Scatter(x=cluster2['PC1'], y=cluster2['PC2'], mode='markers', name='Cluster2', \n                    marker=dict(color = 'rgba(20, 128, 200, 0.8)'), text=None)\n\n# trace4 for `cluster3`\ntrace4 = go.Scatter(x=cluster3['PC1'], y=cluster3['PC2'], mode='markers', name='Cluster3', \n                    marker=dict(color = 'rgba(0, 255, 200, 0.8)'), text=None)\n\n# trace5 for `cluster4`\ntrace5 = go.Scatter(x=cluster4['PC1'], y=cluster4['PC2'], mode='markers', name='Cluster4', \n                    marker=dict(color = 'rgba(150, 0, 200, 0.8)'), text=None)\n\ndata = [trace1, trace2, trace3, trace4, trace5]\n\ntitle = '2D Visulization of clusters using PCA'\n\nlayout = dict(title=title,\n              xaxis=dict(title='PC1', ticklen=5, zeroline=False),\n              yaxis=dict(title='PC2', ticklen=5, zeroline=False))\n\nfig = dict(data=data, layout=layout)\n\niplot(fig)","23c38080":"# intruction for building 3D Plot\n\n# trace1 for `cluster0`\ntrace1 = go.Scatter3d(x=cluster0['PC1'], y=cluster0['PC2'], z=cluster0['PC3'], mode='markers', name='Cluster0', \n                      marker=dict(color = 'rgba(255, 128, 255, 0.8)'), text=None)\n\n# trace2 for `cluster1`\ntrace2 = go.Scatter3d(x=cluster1['PC1'], y=cluster1['PC2'], z=cluster0['PC3'], mode='markers', name='Cluster1', \n                      marker=dict(color = 'rgba(255, 128, 2, 0.8)'), text=None)\n\n# trace3 for `cluster2`\ntrace3 = go.Scatter3d(x=cluster2['PC1'], y=cluster2['PC2'], z=cluster0['PC3'], mode='markers', name='Cluster2', \n                      marker=dict(color = 'rgba(20, 128, 200, 0.8)'), text=None)\n\n# trace4 for `cluster3`\ntrace4 = go.Scatter3d(x=cluster3['PC1'], y=cluster3['PC2'], z=cluster0['PC3'], mode='markers', name='Cluster3', \n                      marker=dict(color = 'rgba(0, 255, 200, 0.8)'), text=None)\n\n# trace5 for `cluster4`\ntrace5 = go.Scatter3d(x=cluster4['PC1'], y=cluster4['PC2'], z=cluster0['PC3'], mode='markers', name='Cluster4', \n                      marker=dict(color = 'rgba(150, 0, 200, 0.8)'), text=None)\n\ndata = [trace1, trace2, trace3, trace4, trace5]\n\ntitle = '3D Visulization of clusters using PCA'\n\nlayout = dict(title=title,\n              xaxis=dict(title='PC1', ticklen=5, zeroline=False),\n              yaxis=dict(title='PC2', ticklen=5, zeroline=False))\n\nfig = dict(data=data, layout=layout)\n\niplot(fig)","8e653eba":"# T-SNE with three components\nperplexity = 12\ntsne = TSNE(n_components=3, perplexity=perplexity)\n\n#This DataFrame contains three dimension,built by T-SNE\nTCs = pd.DataFrame(tsne.fit_transform(result_df.drop(['Cluster'], axis=1)))\nTCs.columns = ['TC1', 'TC2', 'TC3']\n\n# Concatenate the TCs \nresult_df = pd.concat([result_df, TCs], axis=1, join='inner')\nresult_df.head()","72071b73":"# Seperate out 5 different clusters\ncluster0 = result_df[result_df['Cluster'] == 0]\ncluster1 = result_df[result_df['Cluster'] == 1]\ncluster2 = result_df[result_df['Cluster'] == 2]\ncluster3 = result_df[result_df['Cluster'] == 3]\ncluster4 = result_df[result_df['Cluster'] == 4]","13508a73":"# intruction for building 2-D Plot\n\n# trace1 for `cluster0`\ntrace1 = go.Scatter(x=cluster0['TC1'], y=cluster0['TC2'], mode='markers', name='Cluster0', \n                    marker=dict(color = 'rgba(255, 128, 255, 0.8)'), text=None)\n\n# trace2 for `cluster1`\ntrace2 = go.Scatter(x=cluster1['TC1'], y=cluster1['TC2'], mode='markers', name='Cluster1', \n                    marker=dict(color = 'rgba(255, 128, 2, 0.8)'), text=None)\n\n# trace3 for `cluster2`\ntrace3 = go.Scatter(x=cluster2['TC1'], y=cluster2['TC2'], mode='markers', name='Cluster2', \n                    marker=dict(color = 'rgba(20, 128, 200, 0.8)'), text=None)\n\n# trace4 for `cluster3`\ntrace4 = go.Scatter(x=cluster3['TC1'], y=cluster3['TC2'], mode='markers', name='Cluster3', \n                    marker=dict(color = 'rgba(0, 255, 200, 0.8)'), text=None)\n\n# trace5 for `cluster4`\ntrace5 = go.Scatter(x=cluster4['TC1'], y=cluster4['TC2'], mode='markers', name='Cluster4', \n                    marker=dict(color = 'rgba(150, 0, 200, 0.8)'), text=None)\n\ndata = [trace1, trace2, trace3, trace4, trace5]\n\ntitle = '2D Visulization of clusters using T-SNE'\n\nlayout = dict(title=title,\n              xaxis=dict(title='TC1', ticklen=5, zeroline=False),\n              yaxis=dict(title='TC2', ticklen=5, zeroline=False))\n\nfig = dict(data=data, layout=layout)\n\niplot(fig)","8476c0ae":"# intruction for building 3D Plot\n\n# trace1 for `cluster0`\ntrace1 = go.Scatter3d(x=cluster0['TC1'], y=cluster0['TC2'], z=cluster0['TC3'], mode='markers', name='Cluster0', \n                      marker=dict(color = 'rgba(255, 128, 255, 0.8)'), text=None)\n\n# trace2 for `cluster1`\ntrace2 = go.Scatter3d(x=cluster1['TC1'], y=cluster1['TC2'], z=cluster0['TC3'], mode='markers', name='Cluster1', \n                      marker=dict(color = 'rgba(255, 128, 2, 0.8)'), text=None)\n\n# trace3 for `cluster2`\ntrace3 = go.Scatter3d(x=cluster2['TC1'], y=cluster2['TC2'], z=cluster0['TC3'], mode='markers', name='Cluster2', \n                      marker=dict(color = 'rgba(20, 128, 200, 0.8)'), text=None)\n\n# trace4 for `cluster3`\ntrace4 = go.Scatter3d(x=cluster3['TC1'], y=cluster3['TC2'], z=cluster0['TC3'], mode='markers', name='Cluster3', \n                      marker=dict(color = 'rgba(0, 255, 200, 0.8)'), text=None)\n\n# trace5 for `cluster4`\ntrace5 = go.Scatter3d(x=cluster4['TC1'], y=cluster4['TC2'], z=cluster0['TC3'], mode='markers', name='Cluster4', \n                      marker=dict(color = 'rgba(150, 0, 200, 0.8)'), text=None)\n\ndata = [trace1, trace2, trace3, trace4, trace5]\n\ntitle = '3D Visulization of clusters using T-SNE'\n\nlayout = dict(title=title,\n              xaxis=dict(title='TC1', ticklen=5, zeroline=False),\n              yaxis=dict(title='TC2', ticklen=5, zeroline=False))\n\nfig = dict(data=data, layout=layout)\n\niplot(fig)","b4751033":"## Introduction","6f7406ce":"Clustering is one of most popular unsupervised learning techniques that helps to discover hidden structure in the data. The goal of clustering is to find natural grouping in data so that items in the same cluster are more similar to each other than to those from different clusters.\n\nIn this post we will learn customer segmentaion using clustering. We will do the following steps over our dataset\n\n*\tData exploration and pre-processing\n*\tK-Means Clustering with pre-defined number of clusters\n*\tFind optimal number of clusters using elbow and silhouette plot\n*\tPerform agglomerative hierarchical clustering using dendrogram\n*\tVisualization of clusters using PCA (Principal Component Analysis)\n*\tVisualization of clusters using T-SNE","611062e1":"From above plot one good observation is that people with age between 20-30 have high spending scores (more that 70) although they have low annual income (below 40k $) (cluster at the top left corner).","2eb95127":"#### 3D-Visualization","fb751bfe":"From the above silhoutte plots it seems that 5 is optimal number of clusters","9370a418":"Now let's explore the spending scores with respect to annual incomes of each of the customers","816f947f":"## Visualization of clusters using T-SNE","c3fc4405":"## Data Pre-Processing","80668062":"#### 3D-Visualization","5f2fb0da":"### T-SNE Visualization","5337a742":"## Visualization of clusters using PCA (Principal Component Analysis)","1b8ea26d":"## Loading Data","eab97382":"## Import Libraries","4c65b38b":"## Perform agglomerative hierarchical clustering using dendrogram","26f631ed":"## Find optimal number of clusters using elbow and silhouette plot","b5014337":"#### 2D-Visualization","e3e97143":"Now we will apply complete linkage agglomeration to our cluster using the linkage function which returns the so called linkage matrix","8e93d01b":"#### 2D-Visualization","087d4d2d":"## Data Exploration","59185fb2":"### PCA Visualization","112f55a0":"## KMeans Clustering With Predefined Number of Clusters"}}