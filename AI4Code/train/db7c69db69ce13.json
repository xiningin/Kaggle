{"cell_type":{"6787c9c0":"code","34c84b13":"code","cd0803cd":"code","9cf89ff6":"code","c5a3103a":"code","2b9a88a6":"code","60a56335":"code","c6696fac":"code","a29a1133":"code","14fc65a5":"code","d87c91c9":"code","efccafd8":"code","1e351525":"markdown"},"source":{"6787c9c0":"#Loading the libraries \/ methods:\n\nimport numpy as np\nimport pandas as pd\nimport keras\nfrom sklearn.model_selection  import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.wrappers.scikit_learn import KerasClassifier","34c84b13":"#Loading the datasets:\n\npred_breast = pd.read_csv(\"\/kaggle\/input\/breastcancerwisconsin\/features_breast.csv\")\nclass_breast = pd.read_csv(\"\/kaggle\/input\/breastcancerwisconsin\/class_breast.csv\")","cd0803cd":"print(pred_breast.shape, class_breast.shape)","9cf89ff6":"pred_breast.head()","c5a3103a":"class_breast.head()","2b9a88a6":"#Builnding a neural network with two hidden layer:\n\ndef NeuralNet():\n    classifier = Sequential()\n    classifier.add(Dense(units = 16, activation='relu', kernel_initializer='random_uniform', input_dim=30))\n    classifier.add(Dropout(0.2))\n    classifier.add(Dense(units = 16, activation='relu', kernel_initializer='random_uniform'))\n    classifier.add(Dropout(0.2))  \n    classifier.add(Dense(units = 1, activation='sigmoid')) #output layer\n\n    #Setting the optimizer, loss function, and metrics:\n    opt = keras.optimizers.Adam(lr = 0.001, decay = 0.0001, clipvalue=0.5)\n    classifier.compile(optimizer=opt, loss='binary_crossentropy', metrics=['binary_accuracy'])\n    \n    return classifier","60a56335":"#Hyperparameter optimization (tuning):\n\n'''\nparameters = {'batch_size': [10, 30],\n              'epochs': [50, 100],\n              'optimizer': ['adam', 'sgd'],\n              'loss': ['binary_cross_entropy', 'hinge']\n              'kernel_initializer': ['random_uniform', 'normal'], \n              'activation': ['relu', 'tanh'],\n              'neurons': [16, 8]}\n\ngrid_search = GridSearchCV(estimator = classifier, param_grid = parameters, scoring = 'accuracy', cv = 5)\nbest_param = grid_search.best_params_ \nbest_acc = grid_search.best_score_\n'''","c6696fac":"classifier = KerasClassifier(build_fn = NeuralNet, epochs=100, batch_size=10)","a29a1133":"#10-fold cross-validation:\n\nresults = cross_val_score(estimator = classifier, X = pred_breast, y = class_breast, cv = 10, scoring = 'accuracy')\nresults","14fc65a5":"mean = results.mean()\nstd = results.std()\nprint(mean)\nprint(std)","d87c91c9":"#Alternative coding:\n\n#Splitting the data into training and test datasets:\n#pred_train, pred_test, class_train, class_test = train_test_split(pred_breast, class_breast, test_size=0.25)\n\n#Training the neural network (adjusting weights):\n#classifier.fit(pred_train, class_train, batch_size=10, epochs=100)\n\n\n#Predictions with the test dataset (without k-fold cross-validation):\n\n#predictions = classifier.predict(pred_test)\n#predictions\n\n#Evaluating the accuracy of the model:\n\n#predictions = (predictions > 0.5)\n\n#accuracy = accuracy_score(class_test, predictions)\n#accuracy\n\n#matrix = confusion_matrix(class_test, predictions)\n#matrix\n\n#results = classifier.evaluate(pred_test, class_test)\n#results","efccafd8":"#Saving the trained network:\n\n'''\nclassifier_json = classifier.to_json()\nwith open('classifier_breast.json', 'w') as json_file: json_file.write(classifier_json)\nclassifier.save_weights('classifier_breast.h5')\n\n'''","1e351525":"# Binary Classification with Neural Networks using Keras\n\n<hr>"}}