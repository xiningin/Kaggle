{"cell_type":{"4d0e0af2":"code","e903337f":"code","7395a89c":"code","7eace95b":"code","5173145b":"code","a2a2cb7d":"code","4b4e0fa1":"code","eedd2d7e":"code","35c03505":"code","57670145":"code","0b2db92d":"code","41a9c449":"code","bec95ea7":"code","9b117c34":"code","8c1f726a":"code","8d85cefb":"markdown","ac94d340":"markdown","be750c45":"markdown","b850b4f4":"markdown","75e3d49a":"markdown","7f00af08":"markdown","087c2f10":"markdown","0bca2c27":"markdown","084c0644":"markdown","f89cdc43":"markdown","684a3c5f":"markdown"},"source":{"4d0e0af2":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.decomposition import PCA\n\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n%matplotlib notebook\n\nimport seaborn as sns\nsns.set()\nsns.set(style=\"white\")","e903337f":"df = pd.read_csv(\"..\/input\/Emoji Diet Nutritional Data (g) - EmojiFoods (g).csv\")","7395a89c":"df.head()","7eace95b":"labels = df[['name', 'emoji']].values\ndf.drop(['name', 'emoji'], axis=1, inplace=True)\ntable = np.array(df.values)","5173145b":"def norm(v):\n    # Euclidean norm for 1D np.array\n    return (sum(v**2))**0.5\n\ndef similarities_of(emoji_index, table):\n    a = table[emoji_index]\n    results = []\n    for row in table:\n        # cosine similarity\n        result = np.dot(a, row.T) \/ (norm(a) * norm(row))\n        results.append(result)\n    return results","a2a2cb7d":"def print_results(item_id, table, labels, num_print=10):\n    sim = similarities_of(item_id, table)\n    # get original indicies of a sorted array \n    indicies = np.argsort(sim)\n    indicies_m = indicies[::-1][:num_print]\n    indicies_l = indicies[:num_print]\n    \n    print('Find similar to:')\n    print(*labels[indicies_m[0]][::-1])\n    \n    print('----------------')\n    print('The most similar:')\n    # skip the first one \n    for i in indicies_m[1:]:\n        print(*labels[i][::-1], round(sim[i],2))\n    \n    print('----------------')\n    print('The least similar:')\n    for i in indicies_l:\n        print(*labels[i][::-1], round(sim[i],2))","4b4e0fa1":"print_results(11, table, labels, num_print=8)","eedd2d7e":"pca = PCA(n_components=4)\npca_result = pca.fit_transform(table)","35c03505":"plt.scatter(np.array(pca_result).T[0],np.array(pca_result).T[1])","57670145":"fig = plt.figure(figsize=(10,5))\nax = fig.add_subplot(111, projection='3d')\nax.scatter(np.array(pca_result).T[0], np.array(pca_result).T[1], np.array(pca_result).T[2])","0b2db92d":" print(pca.explained_variance_ratio_) ","41a9c449":"s = np.array(pca_result).T[0]\n\nlist(reversed(sorted(range(len(s)), key=lambda k: s[k])))[:5]","bec95ea7":"print(labels[17], labels[18])","9b117c34":"corr = df.corr()","8c1f726a":"# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap,center=0,square=True,  linewidths=.2, cbar_kws={\"shrink\": .5})\n","8d85cefb":"There are two outliers to be seen. Let's find out which emoji are those. ","ac94d340":"Let's continue with PCA to explore and visualize our dataset. ","be750c45":"Next we are going to define a similarity measure. For this case I have chosen to use a cosine similarity. ","b850b4f4":"Finally here is our \"lazy learning\" type of the model. ","75e3d49a":"Let's start by moving columns 'name' and 'emoji' from our dataframe to a new variable (python list). Then we convert the dataframe to a numpy array.","7f00af08":"The final print function is just sorting and formating output, so that we can choose how many items we would like to print.","087c2f10":"**Thanks for reading my notebook.**","0bca2c27":"For some reason it is the potato and the carrot emoji.","084c0644":"And lastly let us look at the correlation matrix of data fetures.  ","f89cdc43":"**Welcome, in this notebook I would like to create a model that is capable of finding related emoji based on their nutritional values.  In addition to that I would like to plot a correlation matrix and do PCA (principal component analysis) to detect some possible outliers. **","684a3c5f":"References & used code from:  \n[Seaborn examples - plot correlation matrix](https:\/\/seaborn.pydata.org\/examples\/many_pairwise_correlations.html)  \n[matplotlib  examples - 3D scatterplot](https:\/\/matplotlib.org\/mpl_toolkits\/mplot3d\/tutorial.html)  \n[sklearn docs - PCA](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.decomposition.PCA.html)"}}