{"cell_type":{"43883638":"code","6f7ab1b6":"code","13aea03c":"code","16ad71e1":"code","d71b4295":"code","b1860af7":"code","df7090bd":"code","59af3760":"code","87ae09c4":"code","d7fea3eb":"code","59d878a6":"code","ab89e235":"code","8fc2e6ef":"code","dedfc0f6":"code","b0dc612e":"code","62f65e5a":"code","6c7461c7":"code","f3eabf3f":"code","5bc3c930":"code","2310074b":"code","939cfaf6":"code","01eb3ef1":"code","c6df5c74":"code","d1185d0b":"code","a0a39912":"code","a55fa8fb":"code","0a57a285":"code","b0107002":"code","f3d4fee5":"code","9dafbe85":"code","6812bec3":"code","d664afb4":"code","562f2144":"code","5b2b2896":"code","a6d4bd2a":"code","e27ab49a":"code","9dd40469":"code","a3bf08e5":"code","6cbdc16f":"code","fa663036":"code","ba67c63f":"code","f56bea97":"code","6eed70e8":"code","872231b0":"code","c12a10ab":"code","51378983":"code","0bd12d0a":"markdown","773cc1f6":"markdown","e02db7fb":"markdown","57da441d":"markdown","ecb58a45":"markdown","9c9aef26":"markdown","be28aef3":"markdown","319a0589":"markdown","7ef844c7":"markdown","1d0357c5":"markdown","154d0574":"markdown","32af8c42":"markdown","0d4a4919":"markdown","ac46f05e":"markdown","02d8ecb2":"markdown","9fa8686a":"markdown","eb2569c6":"markdown","8de09514":"markdown","0164faa6":"markdown","dc45c2b9":"markdown","af9429f9":"markdown","47c90029":"markdown","b161dc51":"markdown","73e2df84":"markdown","06cbfc79":"markdown"},"source":{"43883638":"import numpy as np\nmy_list = [1,2,3]\nnp.array(my_list)","6f7ab1b6":"np.arange(0,10)","13aea03c":"print(np.zeros(3))\nnp.zeros((5,5))","16ad71e1":"np.linspace(0,10,5)","d71b4295":"np.eye(3)   ## Matirx with all Zeror and 1 in digonal","b1860af7":"np.diag(np.array([1,3,5,3,4,5]))        # Populate the disgonal elements only","df7090bd":"print(np.random.randint(1,100))  # 1 Element between 1 and 100\nprint(np.random.randint(1,100,10))  # 10 Random Element between 1 and 100 values will change everytime you run.","59af3760":"arr = np.arange(5)  # This will create no in range from 0 till max -1 \nranarr = np.random.randint(0,50,5) # Random Number between 0 and 50 , 5 Numbers\nprint(arr)\nprint(ranarr)","87ae09c4":"arr = np.arange(10)  # This will create no in range from 0 till max -1 \nranarr = np.random.randint(0,50,10)\nprint(\"List Arr is \",arr)\nprint(\"List Ranarr is \",ranarr)\n\nprint(\"Min of arr :\",arr.argmin(),\" Max of arr :\",arr.argmax())\nprint(\"Min of Ranarr :\",ranarr.min(),\" Max of Ranarr :\",ranarr.max()) ## Please note in cose or random variable its max and not argmax \n","d7fea3eb":"print(arr)\narr.shape\narr.reshape(2,5,1)  ## Reshape Works with x * y or Matrix should be divsible by new matrix x * y","59d878a6":"#Get a value at an index\nprint(ranarr)\n#ranarr[ranarr.max()]  # Identify the error here code is commented to make the notebook run.","ab89e235":"print(arr)\narr[8]  # Identify the error here ","8fc2e6ef":"#Get values in a range\narr[1:5]","dedfc0f6":"## Answer to Question earlier there can be multiple method of doing \n## ** is to give value else it will return array[0]\nprint(ranarr)\nprint(ranarr.max())\ni=np.where(ranarr.max())\nprint(*i)","b0dc612e":"list_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nelement = 3\nlist_numbers.index(element)","62f65e5a":"arr_2d = np.array(([1,3,5],[2,4,6],[3,6,9]))","6c7461c7":"print(arr_2d)\narr_2d[:2,1:]  ## Here we are going from 0 -2 (not 2 which row 1 and 2) column to end ","f3eabf3f":"data = np.random.randint(0,50,10)\nprint(data)\nprint(data[data %5 ==0])\nprint(data[data  >10]) ## Comparision Operator in Numpy is much used in Pandas","5bc3c930":"data = np.random.randint(0,50,20)\ndata2 = data.reshape(2,2,5)  # Shape must be divisible by X* Y of Matrix \nprint(\"Orginal List \",data)\nprint (\"************************************************\")\nprint(\"Array Conversion of Above is :\")\nprint (\"************************************************\")\nprint (data2)\nprint(\"Shape of Arraya is   :\",data2.shape)\nprint(\"Datatype of Array is : \",data2.dtype)\nprint(data2.size)\neven_data = (data % 2 == 0)\nodd_data = (data % 2 != 0)\nprint (even_data)\nprint(\"Orginal List \",data)\nprint(\"Even Numbers are :\",data[even_data])\nprint(\"ODD Numbers are :\",data[odd_data])","2310074b":"data3 = np.arange(30)\ndata3=data3.reshape(5,6)\nprint(data3)\n## Finding 7 -19 rows and 2 -4 columns\ndata3[1:4,1:5]","939cfaf6":"import pandas as pd \nfrom numpy.random import randn\nnp.random.seed(102)","01eb3ef1":"np.random.randn(4,5)","c6df5c74":"df = pd.DataFrame(np.random.randn(4,5),index='A B C D'.split(),columns='U W X Y Z'.split())","d1185d0b":"df","a0a39912":"## Print One or More Rows in Data Frame.\nprint(df['W'])\nprint(df[['W','Z']])\n## Selecting Row in Data Frame\ndf[3:]","a55fa8fb":"type(df['W']) ## Every Column in Dataframe is just a series in Pandas","0a57a285":"df['new'] = df['W'] + df['Y']\nprint(df)\ndf.drop('new',axis=1)","b0107002":"## Selecting Data Based Upon Index or Index Value \nprint(df.loc['D'])\nprint(df.iloc[3])","f3d4fee5":"print(df[df['W']>0][['Y','X']])\nprint(df[df >0])\nprint(df[df['W']<0][['Y','X']])  ## W >0 and Select Y and X \nprint(df[(df['W']<0) & (df['Y'] < 1)]) # Using more than One Condition with and)\nprint(df[(df['W']<0) | (df['Y'] < 1)]) # Using Or Operator ","9dafbe85":"df = pd.DataFrame({'A':[1,2,np.nan],\n                  'B':[5,np.nan,np.nan],\n                  'C':[1,2,3]})\ndf","6812bec3":"print(\"*********************Orginal Data Fram *********************\")\nprint(df)\nprint(df.dropna())## Drop all NA Values\nprint(df.dropna(axis=1)) ## This for Dropping Columns axis=0 is for rows\nprint(df.dropna(thresh=2)) ## Drop only if threshold is met i.e 2 Na values are there","d664afb4":"df.fillna(value='FILL VALUE')","562f2144":"data = {'Company':['GOOG','GOOG','MSFT','MSFT','FB','FB'],\n       'Person':['Sam','Charlie','Amy','Vanessa','Carl','Sarah'],\n       'Sales':[200,120,340,124,243,350]}\ndf1=pd.DataFrame(data)\ndf1","5b2b2896":"df1.groupby('Company') ## This will Create and Object for Group \ndf2=df1.groupby('Company')","a6d4bd2a":"print(df1)\nprint(df2.mean()) \nprint(df2.sum())\nprint(df2.count())\ndf2.describe() # Most Effective way of getting all \ndf2.describe().transpose() ## All in One Command please aggregate will work only numeric fields","e27ab49a":"df1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'],\n                        'B': ['B0', 'B1', 'B2', 'B3'],\n                        'C': ['C0', 'C1', 'C2', 'C3'],\n                        'D': ['D0', 'D1', 'D2', 'D3']},\n                        index=[0, 1, 2, 3])\ndf2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'],\n                        'B': ['B4', 'B5', 'B6', 'B7'],\n                        'C': ['C4', 'C5', 'C6', 'C7'],\n                        'D': ['D4', 'D5', 'D6', 'D7']},\n                         index=[4, 5, 6, 7]) \ndf3 = pd.DataFrame({'A': ['A8', 'A9', 'A10', 'A11'],\n                        'B': ['B8', 'B9', 'B10', 'B11'],\n                        'C': ['C8', 'C9', 'C10', 'C11'],\n                        'D': ['D8', 'D9', 'D10', 'D11']},\n                        index=[8, 9, 10, 11])","9dd40469":"print(df1)\nprint(df2)\nprint(df3)","a3bf08e5":"pd.concat([df1,df2,df3])","6cbdc16f":"pd.concat([df1,df2,df3],axis=1) # Here we are conact on Columns so it will created additional column filled with NA values","fa663036":"left = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],\n                     'A': ['A0', 'A1', 'A2', 'A3'],\n                     'B': ['B0', 'B1', 'B2', 'B3']})\n   \nright = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],\n                          'C': ['C0', 'C1', 'C2', 'C3'],\n                          'D': ['D0', 'D1', 'D2', 'D3']})    \nprint(left)\nprint(right)","ba67c63f":"pd.merge(left,right,how='inner',on='key') # Here the Value of Key is the Same ","f56bea97":"df = pd.DataFrame({'col1':[1,2,3,4],'col2':[444,555,666,444],'col3':['abc','def','ghi','xyz']})\ndf","6eed70e8":"def times2(x):\n    return x*2","872231b0":"df['col1'].apply(times2)\ndf['col2'].apply(times2)\ndf['col3'].apply(len)","c12a10ab":"df[df['col3'].str.contains(\"e|i|o|u|a\")]","51378983":"df['col3'].str.split('@').str[-1].value_counts().head()","0bd12d0a":"## Importan Functions in Pandas","773cc1f6":"## randn \n1.Return a sample (or samples) from the \"standard normal\" distribution. Unlike rand which is uniform:","e02db7fb":"## Arrange","57da441d":"## Apply and Lambda Function ","ecb58a45":"## Thanks for Spending time , Please Upvote if you Like it !!\n1. Share your thoughts and comments on how to improve will incorporte in next Version","9c9aef26":"## Conditional Statement inside a array","be28aef3":"### Pandas ","319a0589":"## Shape\n1. Shape is an attribute that arrays have (not a method):\n1. You can get the dimension of matrix by counting the no of [in the Beggining and end ]","7ef844c7":"## Merge and Joins\n\n1. Concatenation basically glues together DataFrames. Keep in mind that dimensions should match along the axis you are concatenating on. You can use pd.concat and pass in a list of DataFrames to concatenate together:\n1. The merge function allows you to merge DataFrames together using a similar logic as merging SQL Tables together. For example:\n","1d0357c5":"## Filling Na Values","154d0574":"## Conditional Select","32af8c42":"## Adding Removing Columns in Dataframes","0d4a4919":"## Dealing with Null Values ","ac46f05e":"## Max,Min,Argmax,Argmin\n\n1. argmax , argmin is used for range list\n1. max , min is used in random int max and min","02d8ecb2":"<img src=\"https:\/\/media2.giphy.com\/media\/10tVd68l0YEdkQ\/giphy.gif\">\n","9fa8686a":"## Selecting Value from Index\n\n1. loc works with Value of Index for exampl if D is index we search all columns of rows with index of D\n2. iloc works with location for example 0 , 1 100 or so on . ","eb2569c6":"## Indexing Slicing of Array\n1. All the Indexing of an Array is same of List \n1. You can get index of Item of an aray as well \n","8de09514":"Short Read 45 Minutes on Colliding with Numpy and Pandas","0164faa6":"## Arange\nReturn evenly spaced values within a given interval.","dc45c2b9":"## Group By Function ","af9429f9":"### NumPy (short form for Numerical Python) is the most fundamental package designed for scientific computing and data analysis. Most of the other packages such as pandas, statsmodels are built on top of it, and is an important package to know and learn about. At the heart of NumPy is a data structure called **ndarray**. ndarray is a basically a multi-dimensional array that is built specifically for the purpose of numerical data analysis. Python also has array capabilities, but they are more generic. <b>The advantage of using ndarray is that processing is extremely efficient and fast.<\/b> ","47c90029":"## linspace","b161dc51":"## Slicing between Array","73e2df84":"## String Function\n\n1. There are numerous example on string i just included one :)","06cbfc79":"## zeros and ones"}}