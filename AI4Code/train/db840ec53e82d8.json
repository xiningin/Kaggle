{"cell_type":{"06a96679":"code","e93d218c":"code","97f6d618":"code","68d9a751":"code","07850505":"code","3206a95d":"code","73c21d1b":"code","8e1c2481":"code","39b36659":"code","b718d002":"code","44fe58c8":"code","5da64bd3":"code","acc56edc":"code","9dd7399d":"code","4bba2dfd":"code","b5d584a2":"code","4ea0ba91":"code","64f33e37":"code","65bf49e3":"code","81018491":"code","a466da23":"code","218cd6df":"code","1549511e":"code","9cb17faf":"code","3d700abc":"code","f1cdc3c7":"code","04908a58":"code","d51166e3":"code","8466d84d":"code","30728a95":"code","eb793ead":"code","2bf27617":"code","46b0244e":"code","e4062862":"code","2be38843":"code","61f79ce0":"code","ca045cc0":"code","8054b9c0":"code","fc30c3a3":"code","82ad9e32":"markdown","7b3faaab":"markdown","e8501887":"markdown","1a785a2e":"markdown","33b88e73":"markdown","c40b3cb5":"markdown"},"source":{"06a96679":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nfrom sklearn.linear_model import LinearRegression\n\nfrom sklearn.metrics import mean_squared_error, make_scorer\nfrom sklearn.model_selection import cross_val_score, train_test_split\n\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","e93d218c":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/train.csv\")","97f6d618":"#Combining the test & train dataframes and removing Id and SalePrice(Target Variable)\ntotal_data = pd.concat((train.loc[:,\"MSSubClass\":\"SaleCondition\"],test.loc[:,\"MSSubClass\":\"SaleCondition\"]))","68d9a751":"total_data.head(10)","07850505":"plt.figure()\nsns.distplot(train[\"SalePrice\"],fit = norm)\n\nplt.figure()\nstats.probplot(train['SalePrice'], plot=plt)\n\nplt.show()","3206a95d":"\ny = np.log(train[\"SalePrice\"])\n","73c21d1b":"# We are creating a new variable sale_log for further use.While making a model we will use sales_Log.\n# For now I will be using SalePrice \nplt.figure()\nsns.distplot(y,fit = norm)\n\nplt.figure()\nstats.probplot(y, plot=plt)\n\nplt.show()","8e1c2481":"num_cols =  train.select_dtypes(exclude=[\"object\"]).columns","39b36659":"corrmat = train[num_cols].corr()\nmask = np.zeros_like(corrmat,dtype=bool)\nmask[np.triu_indices_from(mask)] = True\nf,ax = plt.subplots(figsize = (11,9))\n\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(corrmat, mask=mask, cmap=cmap,center=0 )\nplt.show()","b718d002":"k=10\ncols =  corrmat.nlargest(k,\"SalePrice\").index\ncm  = np.corrcoef(train[cols].values.T)\nsns.set(font_scale  =1.25)\nhm = sns.heatmap(cm,cbar=True,annot = True,square =True,fmt=\" .2f\",annot_kws={\"size\":10},\n                 yticklabels = cols.values,xticklabels = cols.values)","44fe58c8":"# Highest correlated variables \n# TotalBsmtSF\nplt.figure()\nplt.subplot()\nsns.scatterplot(train[\"TotalBsmtSF\"],train[\"SalePrice\"]).axis(ymin=0, ymax=800000)\n\n\n#GarageArea: Size of garage in square feet\n# Well the  data is scattered every where it has some outliers and dif. has some unsual values like area = 0 \nplt.figure()\nplt.subplot()\nsns.scatterplot(train[\"GarageArea\"],train[\"SalePrice\"]).axis(ymin=0, ymax=800000)\n\n\n# GrLivArea: Above grade (ground) living area square feet\n# there some few outliers \nplt.figure()\nplt.subplot()\nsns.scatterplot(train[\"GrLivArea\"],train[\"SalePrice\"]).axis(ymin=0, ymax=800000)\nplt.show()\n\nplt.figure()\nplt.subplot()\nsns.scatterplot(train[\"1stFlrSF\"],train[\"SalePrice\"]).axis(ymin=0, ymax=800000)\n\nplt.figure()\nplt.subplot()\nsns.scatterplot(train[\"YearBuilt\"],train[\"SalePrice\"]).axis(ymin=0, ymax=800000)\n\nplt.show()\n\n","5da64bd3":"plt.figure(figsize=(5,5,))\nsns.barplot(train[\"OverallQual\"], train[\"SalePrice\"]).axis(ymin=0, ymax=800000)\n\nplt.figure(figsize=(5,5,))\nsns.barplot(train[\"TotRmsAbvGrd\"], train[\"SalePrice\"]).axis(ymin=0, ymax=800000)\n\nplt.figure(figsize=(5,5,))\nsns.barplot(train[\"FullBath\"], train[\"SalePrice\"]).axis(ymin=0, ymax=800000)\n\n\nplt.show()","acc56edc":"# Missing data\nmissing_data= total_data.isnull().sum().sort_values(ascending = False)\nmissing_data[missing_data >0]","9dd7399d":"# Removing cols with more than 90% data missing\ntotal_data=total_data.drop(\"PoolQC\",axis=1)\ntotal_data=total_data.drop(\"MiscFeature\",axis=1)\ntotal_data=total_data.drop(\"Alley\",axis=1)\ntotal_data=total_data.drop(\"Fence\",axis=1)","4bba2dfd":"# Cleaning the data\ntotal_data.FireplaceQu[total_data[\"FireplaceQu\"].isnull()]=\"No\"\n#LotFrontage: Linear feet of street connected to property . \ntotal_data.LotFrontage[total_data[\"LotFrontage\"].isnull()]= 0\n\ntotal_data.GarageType[total_data[\"GarageType\"].isnull()] = \"No\"\ntotal_data.GarageCond[total_data[\"GarageCond\"].isnull()] = \"No\"\ntotal_data.GarageFinish[total_data[\"GarageFinish\"].isnull()] = \"No\"\ntotal_data.GarageQual[total_data[\"GarageQual\"].isnull()] = \"No\"\ntotal_data.GarageYrBlt[total_data[\"GarageYrBlt\"].isnull()] = 0\n\n\ntotal_data.BsmtFinType2[total_data[\"BsmtFinType2\"].isnull()] = \"No\"\ntotal_data.BsmtExposure[total_data[\"BsmtExposure\"].isnull()] = \"No\"\ntotal_data.BsmtQual[total_data[\"BsmtQual\"].isnull()] =\"No\"\ntotal_data.BsmtCond[total_data[\"BsmtCond\"].isnull()] = \"No\"\ntotal_data.BsmtFinType1[total_data[\"BsmtFinType1\"].isnull()] = \"No\"\n\n                   \ntotal_data.MasVnrType[total_data[\"MasVnrType\"].isnull()] = \"No\"\ntotal_data.MasVnrArea[total_data[\"MasVnrArea\"].isnull()] = 0\n\n\ntotal_data.Electrical[total_data[\"Electrical\"].isnull()] = \"SBrkr\"\n\ntotal_data.MSZoning[total_data[\"MSZoning\"].isnull()] = \"RL\"\ntotal_data.Functional[total_data[\"Functional\"].isnull()] = \"Typ\"\ntotal_data.Utilities[total_data[\"Utilities\"].isnull()] = \"AllPub\"\ntotal_data.BsmtFullBath[total_data[\"BsmtFullBath\"].isnull()] = 0\ntotal_data.BsmtHalfBath[total_data[\"BsmtHalfBath\"].isnull()] = 0\ntotal_data.GarageCars[total_data[\"GarageCars\"].isnull()] = 0\ntotal_data.BsmtFinSF2[total_data[\"BsmtFinSF2\"].isnull()] = 0\ntotal_data.BsmtUnfSF[total_data[\"BsmtUnfSF\"].isnull()] = 0\ntotal_data.TotalBsmtSF[total_data[\"TotalBsmtSF\"].isnull()] = 0\n\ntotal_data.SaleType[total_data[\"SaleType\"].isnull()] = \"WD\"\ntotal_data.Exterior2nd[total_data['Exterior2nd'].isnull()] = \"VinylSd\"\n\ntotal_data.Exterior1st[total_data['Exterior1st'].isnull()] = \"VinylSd\"\n\ntotal_data.KitchenQual[total_data['KitchenQual'].isnull()] = \"TA\"\n\ntotal_data.BsmtFinSF1[total_data[\"BsmtFinSF1\"].isnull()] = 0\ntotal_data.GarageArea[total_data[\"GarageArea\"].isnull()] = 0\n\n","b5d584a2":"# Check that all there is no NA value\ntotal_data.isnull().sum().max()","4ea0ba91":"# I would like to encode categorical ordinal data \ntotal_data= total_data.replace({'Street':{'Pave':2,'Grvl':1},\n                       'BldgType': {'1Fam':5 ,'2fmCon':3, 'Duplex':3, 'TwnhsE':4 ,'Twnhs':3},\n                       \n                       'HouseStyle': {'2Story':7 ,'1Story':6 ,'1.5Fin':4 ,'1.5Unf':1, 'SFoyer':2, 'SLvl':5 ,'2.5Unf':3,'2.5Fin':8},\n                       \n                       'ExterQual': {'Gd':4, 'TA':3, 'Ex':5, 'Fa':2},\n                       \n                       'ExterCond': {'TA':3, 'Gd':4, 'Fa':2 ,'Po':1 ,'Ex':5},\n                       \n                       \"BsmtQual\": {'TA':3 ,'Gd':4 ,'Fa':2, 'Po':1 ,'Ex':5,\"No\":0},\n                       \n                       \"BsmtCond\":{'TA':3 ,'Gd':4 ,'Fa':2, 'Po':1 ,'Ex':5,\"No\":0},\n                        \n                        \"BsmtExposure\" : {\"No\" : 0, \"Mn\" : 1, \"Av\": 2, \"Gd\" : 3},\n                       \n                    \n\n                       \n                       \"HeatingQC\":{'TA':3 ,'Gd':4 ,'Fa':2, 'Po':1 ,'Ex':5,'No':0},\n                       \n                       \"FireplaceQu\":{'TA':3 ,'Gd':4 ,'Fa':2, 'Po':1 ,'Ex':5,'No':0},\n                       \n                       \"GarageCond\":{'TA':3 ,'Gd':4 ,'Fa':2, 'Po':1 ,'Ex':5,'No':0},\n                       \n                       \"GarageQual\":{'TA':3 ,'Gd':4 ,'Fa':2, 'Po':1 ,'Ex':5,'No':0},\n                       \n                       \"KitchenQual\":{'TA':3 ,'Gd':4 ,'Fa':2, 'Po':1 ,'Ex':5,'No':0},\n                       \n                        \"PavedDrive\" : {\"N\" : 0, \"P\" : 1, \"Y\" : 2},\n                       \n                        \"BsmtFinType2\" : {\"No\" : 0, \"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3, \"BLQ\" : 4, \"ALQ\" : 5, \"GLQ\" : 6},\n                        \"BsmtFinType1\" : {\"No\" : 0, \"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3, \"BLQ\" : 4, \"ALQ\" : 5, \"GLQ\" : 6},\n                                         \n                       \n                       \"Functional\" : {\"Sal\" : 1, \"Sev\" : 2, \"Maj2\" : 3, \"Maj1\" : 4, \"Mod\": 5, \n                                       \"Min2\" : 6, \"Min1\" : 7, \"Typ\" : 8},\n                       \n                       \"GarageFinish\": {'RFn':2 ,'Unf':1 ,'Fin':3 ,\"No\":0},\n                       \n                       \"PavedDrive\" : {\"N\" : 0, \"P\" : 1, \"Y\" : 2},\n                       \n                       \"Utilities\" : {\"ELO\" : 1, \"NoSeWa\" : 2, \"NoSewr\" : 3, \"AllPub\" : 4}})\n                              \n                                \n                      \n                                       \n                       \n","64f33e37":"# Feauter Engineering \n\ntotal_data[\"Garage_Score\"] = total_data[\"GarageCond\"] + total_data[\"GarageQual\"] + total_data[\"GarageFinish\"]\n\n                          \n\ntotal_data[\"TotalBsmtFinSF\"] = total_data[\"BsmtFinSF1\"] + total_data[\"BsmtFinSF2\"]\n    \ntotal_data[\"Basment_Score\"] = total_data[\"BsmtQual\"] + total_data[\"BsmtCond\"] + total_data[\"BsmtFinType2\"] + total_data[\"BsmtFinType1\"] + total_data[\"BsmtExposure\"]\n\n\ntotal_data[\"total_flr_area\"] = total_data[\"1stFlrSF\"] + total_data[\"2ndFlrSF\"]\n\n\ntotal_data[\"Total_gr_area\"] = total_data[\"GrLivArea\"] + total_data[\"TotalBsmtSF\"]\n\ntotal_data[\"Exter_Score\"] = total_data[\"ExterCond\"] + total_data[\"ExterQual\"]\n\n\ntotal_data[\"Overall_Score\"] = (total_data[\"OverallCond\"] + total_data[\"OverallQual\"])\/2\n\n\n# House Age \ntotal_data[\"House_Age\"] = total_data[\"YearRemodAdd\"] - total_data[\"YearBuilt\"]\ntotal_data[\"Total_Porch\"] = total_data[\"OpenPorchSF\"] + total_data[\"EnclosedPorch\"] + total_data[\"3SsnPorch\"] +  total_data[\"ScreenPorch\"] + total_data[\"WoodDeckSF\"]\n                               \n\ntotal_data[\"Total_baths\"] = total_data[\"BsmtFullBath\"] + 0.5*total_data[\"BsmtHalfBath\"] + total_data[\"FullBath\"] + 0.5*total_data[\"HalfBath\"]\n\n\n\n","65bf49e3":"total_data.columns","81018491":"numeric_cols = total_data.dtypes[total_data.dtypes != \"object\"].index","a466da23":"numeric_cols = total_data[numeric_cols].apply(lambda x:stats.skew(x))","218cd6df":"skew_cols = numeric_cols[abs(numeric_cols) > 0.75 ].index\ntotal_data[skew_cols] = np.log1p(total_data[skew_cols])\n","1549511e":"total_data = pd.get_dummies(total_data)","9cb17faf":"from sklearn.linear_model import Ridge, LassoCV\nfrom sklearn.model_selection import cross_val_score","3d700abc":"X_train = total_data[:train.shape[0]]\nX_test = total_data[train.shape[0]:]\nY = y","f1cdc3c7":"# Defining our valuation function\ndef rmse_cv(model):\n    rmse = np.sqrt(-cross_val_score(model,X_train,y,scoring = \"neg_mean_squared_error\",cv = 5))\n    return rmse","04908a58":"model = Ridge()","d51166e3":"# Hyper parameter tuning .\nalphas = [0.05, 0.1, 0.3, 1, 3, 5, 10, 15, 30, 50, 75]","8466d84d":"cv_ridge = [rmse_cv(Ridge(alpha = alpha)).mean() \n            for alpha in alphas]","30728a95":"cv_ridge = pd.Series(cv_ridge, index = alphas)\ncv_ridge.plot(title = \"Validation \")\nplt.xlabel(\"alpha\")\nplt.ylabel(\"rmse\")","eb793ead":"cv_ridge.min()","2bf27617":"model_lasso = LassoCV(alphas = [1,0.1,0.0001,0.0005]).fit(X_train,y)","46b0244e":"rmse_cv(model_lasso)","e4062862":"rmse_cv(model_lasso).min()","2be38843":"X_test = np.nan_to_num(X_test)","61f79ce0":"Y_pred = np.expm1(model_lasso.predict(X_test))","ca045cc0":"Final = pd.DataFrame()","8054b9c0":"Final[\"Id\"] =test.Id\nFinal[\"SalePrice\"] = Y_pred","fc30c3a3":"Final.to_csv(\"Housing.csv\",index=False )","82ad9e32":"Therefore the minimum rmse is 0.1251 when alpha is 10 .\nLets look into Lasso Regression","7b3faaab":"Since we had used log transformation on the scores .We will get the scores by applying expm1.","e8501887":"Here our target variable is SalePrice . Let us see the distribution of SalePrice","1a785a2e":"The given density plot signifies that the distribution of Sale Price is a log-normal distribution.\nWe should convert the distribution into a normal distribution with the help of log transformation.","33b88e73":"Here RMSE is lowest when alpha =1 .\nLasso Regression performance better than Ridge Regression. ","c40b3cb5":"# Model \nHere I will be using Regularised Linear models Ridge and Lasso Regression. By using cross validation technique hyperparmeters will be tuned.\n"}}