{"cell_type":{"bdab221d":"code","120a62ee":"code","7fb09534":"code","f6cb385f":"code","1428d21d":"code","8f52ebd7":"code","de95c5f7":"code","1a4f1c49":"code","5b3dba66":"code","99c6369f":"code","78fdb6e7":"code","97a1a0c2":"code","85a235fc":"code","ee8018cd":"code","78827ec5":"code","af5a7b51":"code","bc59314f":"code","6d2710b9":"code","b63a0e35":"code","a8ad6fe1":"code","9ac669f0":"code","10cb118b":"code","030553c2":"code","4f85a20f":"code","cc2a2c53":"code","51395dd9":"code","625887f7":"markdown","0ae91080":"markdown","c553b6d6":"markdown","34d95256":"markdown","a113196c":"markdown","7291b38c":"markdown","0d80b72f":"markdown","2b89d48f":"markdown","7f57143b":"markdown","60e25812":"markdown","affbdee7":"markdown","49ea3546":"markdown","5b0555f2":"markdown","7125140c":"markdown","9b1fa4b0":"markdown","33d6b2e1":"markdown","1b6930a1":"markdown","da02f71e":"markdown","53df4cfa":"markdown","3189427e":"markdown","fbec9d76":"markdown","8e169b8d":"markdown","4e4f8317":"markdown","7941a75f":"markdown","64c932af":"markdown","03a87ef5":"markdown","84c2a764":"markdown","f28b65f6":"markdown","63d2484b":"markdown"},"source":{"bdab221d":"import pandas as pd \ncases = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\nimport plotly.offline as py\nimport plotly.express as px\n\n\npy.init_notebook_mode(connected=True)\n\ngrp = cases.groupby(['ObservationDate', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\ngrp = grp.reset_index()\ngrp['Date'] = pd.to_datetime(grp['ObservationDate'])\ngrp['Date'] = grp['Date'].dt.strftime('%m\/%d\/%Y')\ngrp['Active'] = grp['Confirmed'] - grp['Recovered'] - grp['Deaths']\ngrp['Country'] =  grp['Country\/Region']\n\nfig = px.choropleth(grp, locations=\"Country\", locationmode='country names', \n                     color=\"Confirmed\", hover_name=\"Country\/Region\",hover_data = [grp.Recovered,grp.Deaths,grp.Active],projection=\"mercator\",\n                     animation_frame=\"Date\",width=800, height=500,\n                     color_continuous_scale='Reds',\n                     range_color=[1000,50000],\n\n                     title='World Map of Coronavirus')\n\nfig.update(layout_coloraxis_showscale=True)\npy.offline.iplot(fig)","120a62ee":"from keras import backend as K\nfrom keras.preprocessing.image import ImageDataGenerator,load_img, img_to_array\nfrom keras.models import Sequential, Model\nfrom keras.layers import Conv2D, MaxPooling2D,GlobalAveragePooling2D\nfrom keras.layers import Activation, Dropout, BatchNormalization, Flatten, Dense, AvgPool2D,MaxPool2D\nfrom keras.models import Sequential, Model\nfrom keras.applications.vgg16 import VGG16, preprocess_input\nfrom keras.optimizers import Adam, SGD, RMSprop\n\nimport tensorflow as tf\n\nimport os\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport glob\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n%matplotlib inline\n\nimport plotly.offline as py\nimport plotly.express as px\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot","7fb09534":"symptoms={'symptom':['Fever',\n        'Dry cough',\n        'Fatigue',\n        'Sputum production',\n        'Shortness of breath',\n        'Muscle pain',\n        'Sore throat',\n        'Headache',\n        'Chills',\n        'Nausea or vomiting',\n        'Nasal congestion',\n        'Diarrhoea',\n        'Haemoptysis',\n        'Conjunctival congestion'],'percentage':[87.9,67.7,38.1,33.4,18.6,14.8,13.9,13.6,11.4,5.0,4.8,3.7,0.9,0.8]}\n\nsymptoms=pd.DataFrame(data=symptoms,index=range(14))\nsymptoms\n","f6cb385f":"fig = px.pie(symptoms,\n            values=\"percentage\",\n             names=\"symptom\",\n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","1428d21d":"DATASET_DIR = \"..\/input\/covid-19-x-ray-10000-images\/dataset\"\n\n","8f52ebd7":"os.listdir(DATASET_DIR)\n","de95c5f7":"\nnormal_images = []\nfor img_path in glob.glob(DATASET_DIR + '\/normal\/*'):\n    normal_images.append(mpimg.imread(img_path))\n\nfig = plt.figure()\nfig.suptitle('normal')\nplt.imshow(normal_images[0], cmap='gray') \n\n","1a4f1c49":"covid_images = []\nfor img_path in glob.glob(DATASET_DIR + '\/covid\/*'):\n    covid_images.append(mpimg.imread(img_path))\n\nfig = plt.figure()\nfig.suptitle('covid')\nplt.imshow(covid_images[0], cmap='gray') ","5b3dba66":"print(len(normal_images))\nprint(len(covid_images))","99c6369f":"IMG_W = 150\nIMG_H = 150\nCHANNELS = 3\n\nINPUT_SHAPE = (IMG_W, IMG_H, CHANNELS)\nNB_CLASSES = 2\nEPOCHS = 48\nBATCH_SIZE = 6","78fdb6e7":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=INPUT_SHAPE))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(32, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\n\nmodel.add(Conv2D(64,(3,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(Conv2D(250,(3,3)))\nmodel.add(Activation(\"relu\"))\n  \nmodel.add(Conv2D(128,(3,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(AvgPool2D(2,2))\nmodel.add(Conv2D(64,(3,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(AvgPool2D(2,2))\n\nmodel.add(Conv2D(256,(2,2)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPool2D(2,2))\n    \nmodel.add(Flatten())\nmodel.add(Dense(32))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(1))\nmodel.add(Activation(\"sigmoid\"))","97a1a0c2":"model.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy'])\n\n","85a235fc":"model.summary()\nfrom tensorflow.keras.utils import plot_model\nplot_model(model, to_file='model1.png')","ee8018cd":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    validation_split=0.25)\n\ntrain_generator = train_datagen.flow_from_directory(\n    DATASET_DIR,\n    target_size=(IMG_H, IMG_W),\n    batch_size=BATCH_SIZE,\n    class_mode='binary',\n    subset='training')\n\nvalidation_generator = train_datagen.flow_from_directory(\n    DATASET_DIR, \n    target_size=(IMG_H, IMG_W),\n    batch_size=BATCH_SIZE,\n    class_mode='binary',\n    shuffle= False,\n    subset='validation')\n\nhistory = model.fit_generator(\n    train_generator,\n    steps_per_epoch = train_generator.samples \/\/ BATCH_SIZE,\n    validation_data = validation_generator, \n    validation_steps = validation_generator.samples \/\/ BATCH_SIZE,\n    epochs = EPOCHS)","78827ec5":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","af5a7b51":"print(\"training_accuracy\", history.history['accuracy'][-1])\nprint(\"validation_accuracy\", history.history['val_accuracy'][-1])","bc59314f":"label = validation_generator.classes\npred= model.predict(validation_generator)\npredicted_class_indices=np.argmax(pred,axis=1)\nlabels = (validation_generator.class_indices)\nlabels2 = dict((v,k) for k,v in labels.items())\npredictions = [labels2[k] for k in predicted_class_indices]\nprint(predicted_class_indices)\nprint (labels)\nprint (predictions)","6d2710b9":"from sklearn.metrics import confusion_matrix\n\ncf = confusion_matrix(predicted_class_indices,label)\ncf","b63a0e35":"exp_series = pd.Series(label)\npred_series = pd.Series(predicted_class_indices)\npd.crosstab(exp_series, pred_series, rownames=['Actual'], colnames=['Predicted'],margins=True)","a8ad6fe1":"plt.matshow(cf)\nplt.title('Confusion Matrix Plot')\nplt.colorbar()\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.show();","9ac669f0":"pred = pd.read_csv(\"..\/input\/coronavirus-2019ncov\/covid-19-all.csv\")\npred = pred.fillna(0)\npredgrp = pred.groupby(\"Date\")[[\"Confirmed\",\"Recovered\",\"Deaths\"]].sum().reset_index()\npredgrp.head()","10cb118b":"predgrp.describe().T","030553c2":"\nTotal_confirmed = predgrp['Confirmed'].sum()\nTotal_recovered = predgrp['Recovered'].sum()\nTotal_death = predgrp['Deaths'].sum()\ndata = [['Confirmed', Total_confirmed], ['Recovered', Total_recovered], ['Death', Total_death]] \ndf = pd.DataFrame(data, columns = ['state', 'count']) \nfig = px.pie(df,\n             values=\"count\",\n             names=\"state\",\n             title=\"State of Patient\",\n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","4f85a20f":"pred_cnfrm = predgrp.loc[:,[\"Date\",\"Confirmed\"]]\npr_data = pred_cnfrm\npr_data.columns = ['ds','y']\nm=Prophet()\nm.fit(pr_data)\nfuture=m.make_future_dataframe(periods=15)\nforecast=m.predict(future)\nforecast","cc2a2c53":"fig = plot_plotly(m, forecast)\npy.iplot(fig) \n\nfig = m.plot(forecast,xlabel='Date',ylabel='Confirmed Count')","51395dd9":"cnfrm = forecast.loc[:,['ds','trend']]\ncnfrm = cnfrm[cnfrm['trend']>0]\ncnfrm.columns = ['Date','Confirm']\ncnfrm.tail(15)","625887f7":"![](https:\/\/media.giphy.com\/media\/dVuyBgq2z5gVBkFtDc\/giphy.gif)","0ae91080":"# **Prevention**  \n![](http:\/\/defiancelibrary.org\/images\/CoronaVirusInfo.jpg)\n**    To avoid the critical situation people are suggested to do following things** \n*     Avoid contact with people who are sick. \n*     Avoid touching your eyes, nose, and mouth. \n*     Stay home when you are sick. \n*     Cover your cough or sneeze with a tissue, then throw the tissue in the trash. \n*    Clean and disinfect frequently touched objects and surfaces using a regular household  \n*    Wash your hands often with soap and water, especially after going to the bathroom; before eating; and after blowing     your nose, coughing, or sneezing. If soap and water are not readily available, use an alcohol-based hand sanitizer.","c553b6d6":"**Accuracy**","34d95256":"# Detection","a113196c":"# **Reading Data**","7291b38c":"**Plotting Confusion Matrix**","0d80b72f":"**Input Shape, Epochs and Batch Size**","2b89d48f":"**Pie Chart**","7f57143b":"**Coronaviruses are a large family of viruses which may cause illness in animals or humans. In humans, several coronaviruses are known to cause respiratory infections ranging from the common cold to more severe diseases such as Middle East Respiratory Syndrome (MERS) and Severe Acute Respiratory Syndrome (SARS). The most recently discovered coronavirus causes coronavirus disease COVID-19.COVID-19 is the infectious disease caused by the most recently discovered coronavirus. This new virus and disease were unknown before the outbreak began in Wuhan, China, in December 2019**\n* [Source](https:\/\/www.who.int\/news-room\/q-a-detail\/q-a-coronaviruses)","60e25812":"# **Prediction for next 15 days**","affbdee7":"# **Model**","49ea3546":"**Normal Image**","5b0555f2":"* **Epochs** - One Epoch is when an ENTIRE dataset is passed forward and backward through the neural network only ONCE\n* **Batch Size** -Total number of training examples present in a single batch.","7125140c":"**Description of Data**","9b1fa4b0":"Applying Convolutional Neural Network which is a Deep Learning algorithm which can take in an input image, assign importance (learnable weights and biases) to various aspects\/objects in the image and be able to differentiate one from the other. Convolution is a mathematical operation to merge two sets of information.In CNN architectures, pooling is typically performed with 2x2 windows, stride 2 and no padding. While convolution is done with 3x3 windows, stride 1 and with padding","33d6b2e1":"# **Looking into data**","1b6930a1":"**Length of images**","da02f71e":"# **Graphical representation of Prediction**","53df4cfa":"**Labelling and Prediction**","3189427e":"A confusion matrix is a table that is often used to describe the performance of a classification model (or \u201cclassifier\u201d) on a set of test data for which the true values are known. It allows the visualization of the performance of an algorithm.","fbec9d76":"**Covid Image**","8e169b8d":"**Model Summary**","4e4f8317":"# **Confusion Matrix**","7941a75f":"**Plotting Graph - Accuracy and Loss**","64c932af":"# **State of Person**","03a87ef5":"# **Prophet Model**","84c2a764":"# **Coronavirus in World**","f28b65f6":"# Prediction","63d2484b":"# **Symptoms on Covid-19**"}}