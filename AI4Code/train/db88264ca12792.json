{"cell_type":{"9ae30a8d":"code","b438ec86":"code","b5948dd9":"code","d84135b1":"code","c93d28fa":"code","f8e0b6a5":"code","c1806f0b":"code","db0841c8":"code","99fab64f":"code","d1fef7fc":"code","a27d0b1c":"code","f0039e43":"code","4611015f":"code","c1eb9bba":"code","4bace701":"code","adc01fe3":"code","d1e72809":"code","d3e319f5":"code","5599fd21":"code","a9f84d7a":"code","3fb70c75":"code","6a73b273":"code","7391fa6b":"code","532bc94d":"code","4c3e6d41":"code","285f283a":"code","d4845042":"code","027490d4":"code","e4be6ed2":"code","7bf2611c":"code","84c7ca99":"code","fbeb1a04":"code","a03eba11":"code","98d26ef0":"code","80f4484e":"code","53e8077a":"markdown","3f00f0bc":"markdown","780d6a9d":"markdown","9715f5ab":"markdown","677ac618":"markdown","cc168684":"markdown","1c14d54b":"markdown","71430647":"markdown","4656eb3c":"markdown","47705549":"markdown","e41424ef":"markdown","30716088":"markdown","0a4ed651":"markdown","de9f1e16":"markdown","a3d792c8":"markdown","da56d381":"markdown","d0cff53c":"markdown","f46d29c8":"markdown","b4bcadde":"markdown","9543c6b7":"markdown","5e31f0b2":"markdown","680f320b":"markdown","dbcdc6bb":"markdown","4c19e6f5":"markdown","1a4c342f":"markdown","8e91fd6f":"markdown","b8ed725f":"markdown","75af28b3":"markdown","4b80b31e":"markdown","8dca76f3":"markdown","c42e348e":"markdown","d55756da":"markdown","98375491":"markdown","99cb7bd2":"markdown","eaf1967d":"markdown","b19d41ad":"markdown","3c53d575":"markdown","a835bf3d":"markdown","16305859":"markdown","706391c1":"markdown","1a6f7ce6":"markdown","89ae137a":"markdown","3beb4d7e":"markdown","7e04d45f":"markdown","64e613e5":"markdown","6c228463":"markdown","5c0e89ce":"markdown","9f715095":"markdown","a357f2ce":"markdown","9cb69dda":"markdown","ec17e87d":"markdown","03341e1a":"markdown","443c23e9":"markdown","fb6535e4":"markdown","3bb59c23":"markdown","4b192809":"markdown","e10d1783":"markdown","89ac45af":"markdown"},"source":{"9ae30a8d":"#Importing the basic librarires\n\nimport math\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom IPython.display import display\n\n#from brokenaxes import brokenaxes\nfrom statsmodels.formula import api\nfrom sklearn.feature_selection import RFE\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\n\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [10,6]\n\nimport warnings \nwarnings.filterwarnings('ignore')","b438ec86":"#Importing the dataset\n\nfrom sklearn.datasets import load_boston\n\nX = load_boston().data\nY = load_boston().target\n\ntarget = 'MEDV'\nfeatures = load_boston().feature_names\n\ndf = pd.DataFrame(X, columns=features)\ndf['MEDV'] = Y\noriginal_df = df.copy(deep=True)\ndisplay(df.head())\n\nprint('\\n\\033[1mInference:\\033[0m The Datset consists of {} features & {} samples.'.format(df.shape[1], df.shape[0]))","b5948dd9":"#Checking the dtypes of all the columns\n\ndf.info()","d84135b1":"#Checking number of unique rows in each feature\n\ndf.nunique().sort_values()","c93d28fa":"#Checking number of unique rows in each feature\n\nnu = df[features].nunique().sort_values()\nnf = []; cf = []; nnf = 0; ncf = 0; #numerical & categorical features\n\nfor i in range(df[features].shape[1]):\n    if nu.values[i]<=8:cf.append(nu.index[i])\n    else: nf.append(nu.index[i])\n\nprint('\\n\\033[1mInference:\\033[0m The Datset has {} numerical & {} categorical features.'.format(len(nf),len(cf)))","f8e0b6a5":"#Checking the stats of all the columns\n\ndisplay(df.describe())","c1806f0b":"#Let us first analyze the distribution of the target variable\n\nplt.figure(figsize=[8,4])\nsns.distplot(df[target], color='g',hist_kws=dict(edgecolor=\"black\", linewidth=2), bins=30)\nplt.title('Target Variable Distribution - Median Value of Homes ($1Ms)')\nplt.show()","db0841c8":"#Visualising the categorical features \n\nprint('\\033[1mVisualising Categorical Features:'.center(100))\n\nn=2\nplt.figure(figsize=[15,3*math.ceil(len(cf)\/n)])\n\nfor i in range(len(cf)):\n    if df[cf[i]].nunique()<=12:\n        plt.subplot(math.ceil(len(cf)\/n),n,i+1)\n        sns.countplot(df[cf[i]])\n    else:\n        plt.subplot(2,1,2)\n        sns.countplot(df[cf[i]])\n        \nplt.tight_layout()\nplt.show()","99fab64f":"#Visualising the numeric features \n\nprint('\\033[1mNumeric Features Distribution'.center(130))\n\nn=4\n\nclr=['r','g','b','g','b','r']\n\nplt.figure(figsize=[15,3*math.ceil(len(nf)\/n)])\nfor i in range(len(nf)):\n    plt.subplot(math.ceil(len(nf)\/3),n,i+1)\n    sns.distplot(df[nf[i]],hist_kws=dict(edgecolor=\"black\", linewidth=2), bins=10, color=list(np.random.randint([255,255,255])\/255))\nplt.tight_layout()\nplt.show()\n\nplt.figure(figsize=[15,3*math.ceil(len(nf)\/n)])\nfor i in range(len(nf)):\n    plt.subplot(math.ceil(len(nf)\/3),n,i+1)\n    df.boxplot(nf[i])\nplt.tight_layout()\nplt.show()","d1fef7fc":"#Understanding the relationship between all the features\n\ng = sns.pairplot(df)\nplt.title('Pairplots for all the Feature')\ng.map_upper(sns.kdeplot, levels=4, color=\".2\")\nplt.show()","a27d0b1c":"#Removal of any Duplicate rows (if any)\n\ncounter = 0\nrs,cs = original_df.shape\n\ndf.drop_duplicates(inplace=True)\n\nif df.shape==(rs,cs):\n    print('\\n\\033[1mInference:\\033[0m The dataset doesn\\'t have any duplicates')\nelse:\n    print(f'\\n\\033[1mInference:\\033[0m Number of duplicates dropped\/fixed ---> {rs-df.shape[0]}')","f0039e43":"#Check for empty elements\n\nnvc = pd.DataFrame(df.isnull().sum().sort_values(), columns=['Total Null Values'])\nnvc['Percentage'] = round(nvc['Total Null Values']\/df.shape[0],3)*100\nprint(nvc)","4611015f":"#Converting categorical Columns to Numeric\n\ndf3 = df.copy()\n\necc = nvc[nvc['Percentage']!=0].index.values\nfcc = [i for i in cf if i not in ecc]\n#One-Hot Binay Encoding\noh=True\ndm=True\nfor i in fcc:\n    #print(i)\n    if df3[i].nunique()==2:\n        if oh==True: print(\"\\033[1mOne-Hot Encoding on features:\\033[0m\")\n        print(i);oh=False\n        df3[i]=pd.get_dummies(df3[i], drop_first=True, prefix=str(i))\n    if (df3[i].nunique()>2 and df3[i].nunique()<17):\n        if dm==True: print(\"\\n\\033[1mDummy Encoding on features:\\033[0m\")\n        print(i);dm=False\n        df3 = pd.concat([df3.drop([i], axis=1), pd.DataFrame(pd.get_dummies(df3[i], drop_first=True, prefix=str(i)))],axis=1)\n        \ndf3.shape","c1eb9bba":"#Removal of outlier:\n\ndf1 = df3.copy()\n\n#features1 = [i for i in features if i not in ['CHAS','RAD']]\nfeatures1 = nf\n\nfor i in features1:\n    Q1 = df1[i].quantile(0.15)\n    Q3 = df1[i].quantile(0.85)\n    IQR = Q3 - Q1\n    df1 = df1[df1[i] <= (Q3+(1.5*IQR))]\n    df1 = df1[df1[i] >= (Q1-(1.5*IQR))]\n    df1 = df1.reset_index(drop=True)\ndisplay(df1.head())\nprint('\\n\\033[1mInference:\\033[0m\\nBefore removal of outliers, The dataset had {} samples.'.format(df3.shape[0]))\nprint('After removal of outliers, The dataset now has {} samples.'.format(df1.shape[0]))","4bace701":"#Final Dataset size after performing Preprocessing\n\ndf = df1.copy()\ndf.columns=[i.replace('-','_') for i in df.columns]\n\nplt.title('Final Dataset')\nplt.pie([df.shape[0], original_df.shape[0]-df.shape[0]], radius = 1, labels=['Retained','Dropped'], counterclock=False, \n        autopct='%1.1f%%', pctdistance=0.9, explode=[0,0], shadow=True)\nplt.pie([df.shape[0]], labels=['100%'], labeldistance=-0, radius=0.78)\nplt.show()\n\nprint(f'\\n\\033[1mInference:\\033[0m After the cleanup process, {original_df.shape[0]-df.shape[0]} samples were dropped, \\\nwhile retaining {round(100 - (df.shape[0]*100\/(original_df.shape[0])),2)}% of the data.')","adc01fe3":"#Splitting the data intro training & testing sets\n\nm=[]\nfor i in df.columns.values:\n    m.append(i.replace(' ','_'))\n    \ndf.columns = m\nX = df.drop([target],axis=1)\nY = df[target]\nTrain_X, Test_X, Train_Y, Test_Y = train_test_split(X, Y, train_size=0.8, test_size=0.2, random_state=100)\nTrain_X.reset_index(drop=True,inplace=True)\n\nprint('Original set  ---> ',X.shape,Y.shape,'\\nTraining set  ---> ',Train_X.shape,Train_Y.shape,'\\nTesting set   ---> ', Test_X.shape,'', Test_Y.shape)","d1e72809":"#Feature Scaling (Standardization)\n\nstd = StandardScaler()\n\nprint('\\033[1mStandardardization on Training set'.center(120))\nTrain_X_std = std.fit_transform(Train_X)\nTrain_X_std = pd.DataFrame(Train_X_std, columns=X.columns)\ndisplay(Train_X_std.describe())\n\nprint('\\n','\\033[1mStandardardization on Testing set'.center(120))\nTest_X_std = std.transform(Test_X)\nTest_X_std = pd.DataFrame(Test_X_std, columns=X.columns)\ndisplay(Test_X_std.describe())","d3e319f5":"#Checking the correlation\n\nprint('\\033[1mCorrelation Matrix'.center(100))\nplt.figure(figsize=[25,20])\nsns.heatmap(df.corr(), annot=True, vmin=-1, vmax=1, center=0) #cmap='BuGn'\nplt.show()","5599fd21":"#Testing a Linear Regression model with statsmodels\n\nTrain_xy = pd.concat([Train_X_std,Train_Y.reset_index(drop=True)],axis=1)\na = Train_xy.columns.values\n\nAPI = api.ols(formula='{} ~ {}'.format(target,' + '.join(i for i in Train_X.columns)), data=Train_xy).fit()\n#print(API.conf_int())\n#print(API.pvalues)\nAPI.summary()","a9f84d7a":"from sklearn.preprocessing import PolynomialFeatures\nTrr=[]; Tss=[]; n=3\norder=['ord-'+str(i) for i in range(2,n)]\n#Trd = pd.DataFrame(np.zeros((10,n-2)), columns=order)\n#Tsd = pd.DataFrame(np.zeros((10,n-2)), columns=order)\n\nDROP=[];b=[]\n\nfor i in range(len(Train_X_std.columns)):\n    vif = pd.DataFrame()\n    X = Train_X_std.drop(DROP,axis=1)\n    vif['Features'] = X.columns\n    vif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n    vif['VIF'] = round(vif['VIF'], 2)\n    vif = vif.sort_values(by = \"VIF\", ascending = False)\n    vif.reset_index(drop=True, inplace=True)\n    if vif.loc[0][1]>1:\n        DROP.append(vif.loc[0][0])\n        LR = LinearRegression()\n        LR.fit(Train_X_std.drop(DROP,axis=1), Train_Y)\n\n        pred1 = LR.predict(Train_X_std.drop(DROP,axis=1))\n        pred2 = LR.predict(Test_X_std.drop(DROP,axis=1))\n        \n        Trr.append(np.sqrt(mean_squared_error(Train_Y, pred1)))\n        Tss.append(np.sqrt(mean_squared_error(Test_Y, pred2)))\n\n        #Trd.loc[i,'ord-'+str(k)] = round(np.sqrt(mean_squared_error(Train_Y, pred1)),2)\n        #Tsd.loc[i,'ord-'+str(k)] = round(np.sqrt(mean_squared_error(Test_Y, pred2)),2)\n        \nprint('Dropped Features --> ',DROP)\n#plt.plot(b)\n#plt.show()\n#print(API.summary())\n\n# plt.figure(figsize=[20,4])\n# plt.subplot(1,3,1)\n# sns.heatmap(Trd.loc[:6], cmap='BuGn', annot=True, vmin=0, vmax=Trd.max().max())\n# plt.title('Train RMSE')\n# plt.subplot(1,3,2)\n# sns.heatmap(Tsd.loc[:6], cmap='BuGn', annot=True, vmin=0, vmax=Trd.max().max()+10)\n# plt.title('Test RMSE')\n# plt.subplot(1,3,3)\n# sns.heatmap((Trd+Tsd).loc[:6], cmap='BuGn', annot=True, vmin=0, vmax=Trd.max().max()+25)\n# plt.title('Total RMSE')\n# plt.show()\n\nplt.plot(Trr, label='Train RMSE')\nplt.plot(Tss, label='Test RMSE')\n#plt.ylim([19.75,20.75])\nplt.legend()\nplt.grid()\nplt.show()","3fb70c75":"from sklearn.preprocessing import PolynomialFeatures\nTrr=[]; Tss=[]; n=3\norder=['ord-'+str(i) for i in range(2,n)]\nTrd = pd.DataFrame(np.zeros((10,n-2)), columns=order)\nTsd = pd.DataFrame(np.zeros((10,n-2)), columns=order)\n\nm=df.shape[1]-2\nfor i in range(m):\n    lm = LinearRegression()\n    rfe = RFE(lm,n_features_to_select=Train_X_std.shape[1]-i)             # running RFE\n    rfe = rfe.fit(Train_X_std, Train_Y)\n\n    LR = LinearRegression()\n    LR.fit(Train_X_std.loc[:,rfe.support_], Train_Y)\n\n    pred1 = LR.predict(Train_X_std.loc[:,rfe.support_])\n    pred2 = LR.predict(Test_X_std.loc[:,rfe.support_])\n\n    Trr.append(np.sqrt(mean_squared_error(Train_Y, pred1)))\n    Tss.append(np.sqrt(mean_squared_error(Test_Y, pred2)))\n\n# plt.figure(figsize=[20,4])\n# plt.subplot(1,3,1)\n# sns.heatmap(Trd.loc[:6], cmap='BuGn', annot=True, vmin=0, vmax=Trd.max().max())\n# plt.title('Train RMSE')\n# plt.subplot(1,3,2)\n# sns.heatmap(Tsd.loc[:6], cmap='BuGn', annot=True, vmin=0, vmax=Trd.max().max()+10)\n# plt.title('Test RMSE')\n# plt.subplot(1,3,3)\n# sns.heatmap((Trd+Tsd).loc[:6], cmap='BuGn', annot=True, vmin=0, vmax=Trd.max().max()+25)\n# plt.title('Total RMSE')\n# plt.show()\n\nplt.plot(Trr, label='Train RMSE')\nplt.plot(Tss, label='Test RMSE')\n#plt.ylim([19.75,20.75])\nplt.legend()\nplt.grid()\nplt.show()","6a73b273":"from sklearn.decomposition import PCA\n\npca = PCA().fit(Train_X_std)\n\nfig, ax = plt.subplots(figsize=(8,6))\nx_values = range(1, pca.n_components_+1)\nax.bar(x_values, pca.explained_variance_ratio_, lw=2, label='Explained Variance')\nax.plot(x_values, np.cumsum(pca.explained_variance_ratio_), lw=2, label='Cumulative Explained Variance', color='red')\nplt.plot([0,pca.n_components_+1],[0.9,0.9],'g--')\nax.set_title('Explained variance of components')\nax.set_xlabel('Principal Component')\nax.set_ylabel('Explained Variance')\nplt.legend()\nplt.grid()\nplt.show()","7391fa6b":"from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import PolynomialFeatures\nTrr=[]; Tss=[]; n=3\norder=['ord-'+str(i) for i in range(2,n)]\nTrd = pd.DataFrame(np.zeros((10,n-2)), columns=order)\nTsd = pd.DataFrame(np.zeros((10,n-2)), columns=order)\nm=df.shape[1]-1\n\nfor i in range(m):\n    pca = PCA(n_components=Train_X_std.shape[1]-i)\n    Train_X_std_pca = pca.fit_transform(Train_X_std)\n    Test_X_std_pca = pca.fit_transform(Test_X_std)\n    \n    LR = LinearRegression()\n    LR.fit(Train_X_std_pca, Train_Y)\n\n    pred1 = LR.predict(Train_X_std_pca)\n    pred2 = LR.predict(Test_X_std_pca)\n\n    Trr.append(round(np.sqrt(mean_squared_error(Train_Y, pred1)),2))\n    Tss.append(round(np.sqrt(mean_squared_error(Test_Y, pred2)),2))\n\n# plt.figure(figsize=[20,4.5])\n# plt.subplot(1,3,1)\n# sns.heatmap(Trd.loc[:6], cmap='BuGn', annot=True, vmin=0, vmax=Trd.max().max())\n# plt.title('Train RMSE')\n# plt.subplot(1,3,2)\n# sns.heatmap(Tsd.loc[:6], cmap='BuGn', annot=True, vmin=0, vmax=Trd.max().max()+10)\n# plt.title('Test RMSE')\n# plt.subplot(1,3,3)\n# sns.heatmap((Trd+Tsd).loc[:6], cmap='BuGn', annot=True, vmin=0, vmax=Trd.max().max()+25)\n# plt.title('Total RMSE')\n# plt.show()\n\nplt.plot(Trr, label='Train RMSE')\nplt.plot(Tss, label='Test RMSE')\n#plt.ylim([19.5,20.75])\nplt.legend()\nplt.grid()\nplt.show()","532bc94d":"#Shortlisting the selected Features (with RFE)\n\nlm = LinearRegression()\nrfe = RFE(lm,n_features_to_select=Train_X_std.shape[1]-8)             # running RFE\nrfe = rfe.fit(Train_X_std, Train_Y)\n\nLR = LinearRegression()\nLR.fit(Train_X_std.loc[:,rfe.support_], Train_Y)\n\n#print(Train_X_std.loc[:,rfe.support_].columns)\n\npred1 = LR.predict(Train_X_std.loc[:,rfe.support_])\npred2 = LR.predict(Test_X_std.loc[:,rfe.support_])\n\nprint(np.sqrt(mean_squared_error(Train_Y, pred1)))\nprint(np.sqrt(mean_squared_error(Test_Y, pred2)))","4c3e6d41":"#Let us first define a function to evaluate our models\n\nModel_Evaluation_Comparison_Matrix = pd.DataFrame(np.zeros([5,8]), columns=['Train-R2','Test-R2','Train-RSS','Test-RSS',\n                                                                            'Train-MSE','Test-MSE','Train-RMSE','Test-RMSE'])\nrc=np.random.choice(Train_X_std.loc[:,Train_X_std.nunique()>=50].columns.values,3,replace=False)\ndef Evaluate(n, pred1,pred2):\n    #Plotting predicted predicteds alongside the actual datapoints \n    plt.figure(figsize=[15,6])\n    for e,i in enumerate(rc):\n        plt.subplot(2,3,e+1)\n        plt.scatter(y=Train_Y, x=Train_X_std[i], label='Actual')\n        plt.scatter(y=pred1, x=Train_X_std[i], label='Prediction')\n        plt.legend()\n    plt.show()\n\n    #Evaluating the Multiple Linear Regression Model\n\n    print('\\n\\n{}Training Set Metrics{}'.format('-'*20, '-'*20))\n    print('\\nR2-Score on Training set --->',round(r2_score(Train_Y, pred1),20))\n    print('Residual Sum of Squares (RSS) on Training set  --->',round(np.sum(np.square(Train_Y-pred1)),20))\n    print('Mean Squared Error (MSE) on Training set       --->',round(mean_squared_error(Train_Y, pred1),20))\n    print('Root Mean Squared Error (RMSE) on Training set --->',round(np.sqrt(mean_squared_error(Train_Y, pred1)),20))\n\n    print('\\n{}Testing Set Metrics{}'.format('-'*20, '-'*20))\n    print('\\nR2-Score on Testing set --->',round(r2_score(Test_Y, pred2),20))\n    print('Residual Sum of Squares (RSS) on Training set  --->',round(np.sum(np.square(Test_Y-pred2)),20))\n    print('Mean Squared Error (MSE) on Training set       --->',round(mean_squared_error(Test_Y, pred2),20))\n    print('Root Mean Squared Error (RMSE) on Training set --->',round(np.sqrt(mean_squared_error(Test_Y, pred2)),20))\n    print('\\n{}Residual Plots{}'.format('-'*20, '-'*20))\n    \n    Model_Evaluation_Comparison_Matrix.loc[n,'Train-R2']  = round(r2_score(Train_Y, pred1),20)\n    Model_Evaluation_Comparison_Matrix.loc[n,'Test-R2']   = round(r2_score(Test_Y, pred2),20)\n    Model_Evaluation_Comparison_Matrix.loc[n,'Train-RSS'] = round(np.sum(np.square(Train_Y-pred1)),20)\n    Model_Evaluation_Comparison_Matrix.loc[n,'Test-RSS']  = round(np.sum(np.square(Test_Y-pred2)),20)\n    Model_Evaluation_Comparison_Matrix.loc[n,'Train-MSE'] = round(mean_squared_error(Train_Y, pred1),20)\n    Model_Evaluation_Comparison_Matrix.loc[n,'Test-MSE']  = round(mean_squared_error(Test_Y, pred2),20)\n    Model_Evaluation_Comparison_Matrix.loc[n,'Train-RMSE']= round(np.sqrt(mean_squared_error(Train_Y, pred1)),20)\n    Model_Evaluation_Comparison_Matrix.loc[n,'Test-RMSE'] = round(np.sqrt(mean_squared_error(Test_Y, pred2)),20)\n\n    # Plotting y_test and y_pred to understand the spread.\n    plt.figure(figsize=[15,4])\n\n    plt.subplot(1,2,1)\n    sns.distplot((Train_Y - pred1))\n    plt.title('Error Terms')          \n    plt.xlabel('Errors') \n\n    plt.subplot(1,2,2)\n    plt.scatter(Train_Y,pred1)\n    plt.plot([Train_Y.min(),Train_Y.max()],[Train_Y.min(),Train_Y.max()], 'r--')\n    plt.title('Test vs Prediction')         \n    plt.xlabel('y_test')                       \n    plt.ylabel('y_pred')                       \n    plt.show()","285f283a":"#Linear Regression\n\nMLR = LinearRegression().fit(Train_X_std,Train_Y)\npred1 = MLR.predict(Train_X_std)\npred2 = MLR.predict(Test_X_std)\n\nprint('{}{}\\033[1m Evaluating Multiple Linear Regression Model \\033[0m{}{}\\n'.format('<'*3,'-'*35 ,'-'*35,'>'*3))\nprint('The Coeffecient of the Regresion Model was found to be ',MLR.coef_)\nprint('The Intercept of the Regresion Model was found to be ',MLR.intercept_)\n\nEvaluate(0, pred1, pred2)","d4845042":"#Creating a Ridge Regression model\n\nRLR = Ridge().fit(Train_X_std,Train_Y)\npred1 = RLR.predict(Train_X_std)\npred2 = RLR.predict(Test_X_std)\n\nprint('{}{}\\033[1m Evaluating Ridge Regression Model \\033[0m{}{}\\n'.format('<'*3,'-'*35 ,'-'*35,'>'*3))\nprint('The Coeffecient of the Regresion Model was found to be ',MLR.coef_)\nprint('The Intercept of the Regresion Model was found to be ',MLR.intercept_)\n\nEvaluate(1, pred1, pred2)","027490d4":"#Creating a Ridge Regression model\n\nLLR = Lasso().fit(Train_X_std,Train_Y)\npred1 = LLR.predict(Train_X_std)\npred2 = LLR.predict(Test_X_std)\n\nprint('{}{}\\033[1m Evaluating Lasso Regression Model \\033[0m{}{}\\n'.format('<'*3,'-'*35 ,'-'*35,'>'*3))\nprint('The Coeffecient of the Regresion Model was found to be ',MLR.coef_)\nprint('The Intercept of the Regresion Model was found to be ',MLR.intercept_)\n\nEvaluate(2, pred1, pred2)","e4be6ed2":"#Creating a ElasticNet Regression model\n\nENR = ElasticNet().fit(Train_X_std,Train_Y)\npred1 = ENR.predict(Train_X_std)\npred2 = ENR.predict(Test_X_std)\n\nprint('{}{}\\033[1m Evaluating Elastic-Net Regression Model \\033[0m{}{}\\n'.format('<'*3,'-'*35 ,'-'*35,'>'*3))\nprint('The Coeffecient of the Regresion Model was found to be ',MLR.coef_)\nprint('The Intercept of the Regresion Model was found to be ',MLR.intercept_)\n\nEvaluate(3, pred1, pred2)","7bf2611c":"#Checking polynomial regression performance on various degrees\n\nTrr=[]; Tss=[]\nn_degree=8\n\nfor i in range(2,n_degree):\n    #print(f'{i} Degree')\n    poly_reg = PolynomialFeatures(degree=i)\n    X_poly = poly_reg.fit_transform(Train_X_std)\n    X_poly1 = poly_reg.fit_transform(Test_X_std)\n    LR = LinearRegression()\n    LR.fit(X_poly, Train_Y)\n    \n    pred1 = LR.predict(X_poly)\n    Trr.append(np.sqrt(mean_squared_error(Train_Y, pred1)))\n    \n    pred2 = LR.predict(X_poly1)\n    Tss.append(np.sqrt(mean_squared_error(Test_Y, pred2)))\n\nplt.figure(figsize=[15,6])\nplt.subplot(1,2,1)\nplt.plot(range(2,n_degree),Trr, label='Training')\nplt.plot(range(2,n_degree),Tss, label='Testing')\n#plt.plot([1,4],[1,4],'b--')\nplt.title('Polynomial Regression Fit')\n#plt.ylim([0,5])\nplt.xlabel('Degree')\nplt.ylabel('RMSE')\nplt.grid()\nplt.legend()\n#plt.xticks()\n\nplt.subplot(1,2,2)\nplt.plot(range(2,n_degree),Trr, label='Training')\nplt.plot(range(2,n_degree),Tss, label='Testing')\nplt.title('Polynomial Regression Fit')\nplt.ylim([0,30])\nplt.xlabel('Degree')\nplt.ylabel('RMSE')\nplt.grid()\nplt.legend()\n#plt.xticks()\nplt.show()","84c7ca99":"#Using the 2nd Order Polynomial Regression model (degree=2)\n\npoly_reg = PolynomialFeatures(degree=2)\nX_poly = poly_reg.fit_transform(Train_X_std)\nX_poly1 = poly_reg.fit_transform(Test_X_std)\nPR = LinearRegression()\nPR.fit(X_poly, Train_Y)\n\npred1 = PR.predict(X_poly)\npred2 = PR.predict(X_poly1)\n\nprint('{}{}\\033[1m Evaluating Polynomial Regression Model \\033[0m{}{}\\n'.format('<'*3,'-'*35 ,'-'*35,'>'*3))\nprint('The Coeffecient of the Regresion Model was found to be ',MLR.coef_)\nprint('The Intercept of the Regresion Model was found to be ',MLR.intercept_)\n\nEvaluate(4, pred1, pred2)","fbeb1a04":"# Regression Models Results Evaluation\n\nEMC = Model_Evaluation_Comparison_Matrix.copy()\nEMC.index = ['Multiple Linear Regression (MLR)','Ridge Linear Regression (RLR)','Lasso Linear Regression (LLR)','Elastic-Net Regression (ENR)','Polynomial Regression (PNR)']\nEMC","a03eba11":"# R2-Scores Comparison for different Regression Models\n\nR2 = round(EMC['Train-R2'].sort_values(ascending=True),4)\nplt.hlines(y=R2.index, xmin=0, xmax=R2.values)\nplt.plot(R2.values, R2.index,'o')\nplt.title('R2-Scores Comparison for various Regression Models')\nplt.xlabel('R2-Score')\n#plt.ylabel('Regression Models')\nfor i, v in enumerate(R2):\n    plt.text(v+0.02, i-0.05, str(v*100), color='blue')\nplt.xlim([0,1.1])\nplt.show()","98d26ef0":"# Root Mean SquaredError Comparison for different Regression Models\n\ncc = Model_Evaluation_Comparison_Matrix.columns.values\ns=5\n#baxes = brokenaxes(ylims=((0,4),(524,532)))\n#baxes.bar(np.arange(s), Model_Evaluation_Comparison_Matrix[cc[-2]].values, width=0.3, label='RMSE (Training)')\n#baxes.bar(np.arange(s)+0.3, Model_Evaluation_Comparison_Matrix[cc[-1]].values, width=0.3, label='RMSE (Testing)')\n# for index, value in enumerate(Model_Evaluation_Comparison_Matrix[cc[-2]].values):\n#     plt.text(round(value,2), index, str(round(value,2)))\n# for index, value in enumerate(Model_Evaluation_Comparison_Matrix[cc[-1]].values):\n#     plt.text(round(value,2), index, str(round(value,2)))\nplt.bar(np.arange(5), Model_Evaluation_Comparison_Matrix[cc[6]].values, width=0.3, label='RMSE (Training)')\nplt.bar(np.arange(5)+0.3, Model_Evaluation_Comparison_Matrix[cc[7]].values, width=0.3, label='RMSE (Testing)')\nplt.xticks(np.arange(5),EMC.index, rotation =35)\nplt.legend()\n#plt.ylim([0,10])\nplt.show()","80f4484e":"#<<<--------------------------------------------THE END------------------------------------------------>>>","53e8077a":"**Inference:** We can notice that some features have linear relationship, let us futher analyze the detect multicollinearity.","3f00f0bc":"## 5c. Feature Elmination using PCA Decomposition","780d6a9d":"## 6e. Polynomial Regression Model","9715f5ab":"---","677ac618":"<img src=\"https:\/\/raw.githubusercontent.com\/Masterx-AI\/Project_BoomBikes_Share_Prediction\/main\/mr.png\" style=\"width: 600px;float: left;\"\/>","cc168684":"---","1c14d54b":"---","71430647":"<img src=\"https:\/\/raw.githubusercontent.com\/Masterx-AI\/Project_BoomBikes_Share_Prediction\/main\/en.png\" style=\"width: 500px;float: left;\"\/>","4656eb3c":"## 6a. Multiple Linear Regression(MLR)","47705549":"# <center> 2. Exploratory Data Analysis (EDA)","e41424ef":"# <center> 3. Data Preprocessing","30716088":"### 6f. Comparing the Evaluation Metics of the Models","0a4ed651":"**Inference:** The stats seem to be fine, let us do further analysis on the Dataset","de9f1e16":"**Inference:** There seems to be strong multi-correlation between the features. Let us try to fix these...","a3d792c8":"# <center> 5. Feature Selection\/Extraction","da56d381":"---","d0cff53c":"#### Inference:\nIt can be seen that the performance of the modelsis quiet comparable unpon dropping features using VIF, RFE & PCA Techniques. Comparing the RMSE plots, the optimal values were found for dropping most  features using manual RFE Technique. But let us skip these for now, as the advanced ML Algorithms take care of multicollinearity.","f46d29c8":"---","b4bcadde":"---","9543c6b7":"## 6c. Lasso Regression Model","5e31f0b2":"---","680f320b":"**Approach:** \nWe can fix these multicollinearity with two techniques:\n1. Manual Method - Variance Inflation Factor (VIF)\n2. Automatic Method - Recursive Feature Elimination (RFE)\n3. Feature Elmination using PCA Decomposition","dbcdc6bb":"<img src=\"https:\/\/raw.githubusercontent.com\/Masterx-AI\/Project_BoomBikes_Share_Prediction\/main\/ridge.png\" style=\"width: 500px;float: left;\"\/>","4c19e6f5":"**Inference:** The datset doesn't have any inconsistant values.","1a4c342f":"---","8e91fd6f":"**Inference:** There seem to be some outliers. let us fix these in the upcoming section...","b8ed725f":"# <center> Stractegic Plan of Action:","75af28b3":"# <center> 6. Predictive Modelling","4b80b31e":"### Description:\n\nHousing Values in Suburbs of Boston\nThe medv variable is the target variable. \\\nThe Boston data frame has 506 rows and 14 columns.\n\n**This data frame contains the following columns:**\n\n* crim --> per capita crime rate by town.\n\n* zn --> proportion of residential land zoned for lots over 25,000 sq.ft.\n\n* indus --> proportion of non-retail business acres per town.\n\n* chas --> Charles River dummy variable (= 1 if tract bounds river; 0 otherwise).\n\n* nox --> nitrogen oxides concentration (parts per 10 million).\n\n* rm --> average number of rooms per dwelling.\n\n* age --> proportion of owner-occupied units built prior to 1940.\n\n* dis --> weighted mean of distances to five Boston employment centres.\n\n* rad --> index of accessibility to radial highways.\n\n* tax --> full-value property-tax rate per \\$10,000.\n\n* ptratio --> pupil-teacher ratio by town.\n\n* black --> 1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town.\n\n* lstat --> lower status of the population (percent).\n\n* medv --> median value of owner-occupied homes in \\$1000s.\n\n#### Acknowledgements\nHarrison, D. and Rubinfeld, D.L. (1978) Hedonic prices and the demand for clean air. J. Environ. Economics and Management 5, 81\u2013102.\nBelsley D.A., Kuh, E. and Welsch, R.E. (1980) Regression Diagnostics. Identifying Influential Data and Sources of Collinearity. New York: Wiley.\n\n\n### Objective:\n- Understand the Dataset & cleanup (if required).\n- Build Regression models to predict the housing prices in Boston.\n- Also evaluate the models & compare their respective scores like R2, RMSE, etc.","8dca76f3":"<img src=\"https:\/\/raw.githubusercontent.com\/Masterx-AI\/Project_BoomBikes_Share_Prediction\/main\/lasso.png\" style=\"width: 500px;float: left;\"\/>","c42e348e":"# <center> 7. Project Outcomes & Conclusions","d55756da":"**We aim to solve the problem statement by creating a plan of action, Here are some of the necessary steps:**\n1. Data Exploration\n2. Exploratory Data Analysis (EDA)\n3. Data Pre-processing\n4. Data Manipulation\n5. Feature Selection\/Extraction\n6. Predictive Modelling\n7. Project Outcomes & Conclusion","98375491":"---","99cb7bd2":"**Inference:** From the above plot, it is clear that the polynomial regresion models have the highest explainability power  to understand the dataset.","eaf1967d":"### Here are some of the key outcomes of the project:\n- The Dataset was quiet small totally just 506 samples & after preprocessing 8.1% of the datasamples were dropped. \n- Visualising the distribution of data & their relationships, helped us to get some insights on the feature-set.\n- The features had high multicollinearity, hence in Feature Extraction step, we used VIF & RFE Techniques to drop highly correlated features.\n- Testing multiple algorithms with default hyperparamters gave us some understanding for various models performance on this specific dataset.\n- While, Polynomial Regression (Order-2) gave the best overall scores for the current dataset, yet it wise to also consider simpler models like MLR & ENR as they are more generalisable.","b19d41ad":"# <center>1. Data Exploration","3c53d575":"---","a835bf3d":"**Inference:** We can choose 2nd order polynomial regression as it gives the optimal training & testing scores...","16305859":"<center><img src=\"https:\/\/raw.githubusercontent.com\/Masterx-AI\/Project_Boston_Housing_Price_Prediction_\/main\/bh.jpg\" style=\"width: 600px;\"\/>","706391c1":"## 5a. Manual Method - VIF","1a6f7ce6":"---","89ae137a":"**Inference:** Lesser the RMSE, better the model! Also, provided the model should have close proximity with the training & testing scores. \\\nFor this problem, it is can be said that polynomial regressions are the best choice to go with...","3beb4d7e":"---","7e04d45f":"<img src=\"https:\/\/raw.githubusercontent.com\/Masterx-AI\/Project_BoomBikes_Share_Prediction\/main\/pn.png\" style=\"width: 500px;float: left;\"\/>","64e613e5":"---","6c228463":"**Inference:**The Target Variable seems to be be normally distributed, averaging around 20 units.","5c0e89ce":"## 5b. Automatic Method - RFE","9f715095":"---","a357f2ce":"# <center> 4. Data Manipulation","9cb69dda":"---","ec17e87d":" ---","03341e1a":"## 6b. Ridge Regression Model","443c23e9":"**Inference:** There are no categorical features in the dataset.","fb6535e4":"## Objective: \nLet us now try building multiple regression models & compare their evaluation metrics to choose the best fit model both training and testing sets...","3bb59c23":"# <center> \u2605 Machine Learning Project - Boston Housing Price Prediction \u2605\n#### <center> ***Domain: Real-Estate***","4b192809":"---","e10d1783":"## 6d. Elastic-Net Regression","89ac45af":"---"}}