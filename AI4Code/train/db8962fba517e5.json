{"cell_type":{"8f7ddfa5":"code","2a516a4e":"code","e83b0c7e":"code","12b5f17f":"code","c026da34":"code","352ad544":"code","de43db58":"code","5304e23e":"code","89bd62bd":"code","0801284f":"code","759d0200":"code","07d32db5":"code","c7d6df0b":"code","6ccf7b5c":"code","5be4dc12":"code","3e0abc8b":"code","df53f22b":"code","04b2c8b2":"code","8f7757a9":"code","107ff931":"code","e1454593":"code","e7025477":"code","06d0c35c":"code","8d39af62":"code","7c54e378":"code","3fe34d93":"markdown","fb1cc801":"markdown"},"source":{"8f7ddfa5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2a516a4e":"import tensorflow as tf","e83b0c7e":"import pandas as pd\nbank = pd.read_csv('..\/input\/predicting-churn-for-bank-customers\/Churn_Modelling.csv')                \nbank","12b5f17f":"bank.info()","c026da34":"bank[bank.isnull().any(axis=1)]","352ad544":"#Since IDs are unique to each customer, those can be removed for model building\n\nbank1= bank.drop(columns=['RowNumber','CustomerId','Surname'])\nbank1","de43db58":"# One hot encoding for the multi-class variable 'Geography'\n\nbank1=pd.get_dummies(data=bank1, columns=['Geography'])","5304e23e":"# Since Gender is binary, let's encode them\n\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nbank1['Gender'] = le.fit_transform(bank1['Gender'])\n\n\nbank1","89bd62bd":"#Distinguishing Feature and Target set\n\n# Since we're to identify whether the customer will leave or not, our target would be exited and other columns would be our features that help determine the target\n\nX=bank1.drop(columns=['Exited'])\n\n\ny=bank1['Exited'].to_numpy()","0801284f":"#Divide the data into train and test set\n\n# Split into Train and Test set in the ratio of 7:3\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=123)","759d0200":"# Since the target values are of class type, we need to categorize them\ny_train = tf.keras.utils.to_categorical(y_train, num_classes=2)\ny_test = tf.keras.utils.to_categorical(y_test, num_classes=2)","07d32db5":"#Normalize the train and test set\n\n\nfrom sklearn.preprocessing import Normalizer\ntransformer = Normalizer()\nX_train = transformer.fit_transform(X_train)\nX_test = transformer.fit_transform(X_test)","c7d6df0b":"y_train","6ccf7b5c":"y_test","5be4dc12":"#Initialize and Build the model\n\nfrom keras.layers import Dense\n\n# Model Building\n#Initialize Sequential Graph (model)\nmodel1 = tf.keras.Sequential()\n\n#Normalize the data\nmodel1.add(tf.keras.layers.BatchNormalization())\n\n#Add Dense layer for prediction - Keras declares weights and bias automatically\n#model1.add(tf.keras.layers.Dense(10, activation='sigmoid'))\n\n#Output layer with 2 neurons as we have two distinct Class values\nmodel1.add(tf.keras.layers.Dense(2, activation='softmax'))\n\n# Model compilation with SGD and Cross-Entropy\nmodel1.compile(optimizer='sgd', loss='binary_crossentropy',metrics=['accuracy'])","3e0abc8b":"# Model Fit and Predict\n\nmodel1.fit(X_train,y_train,validation_data=(X_test, y_test), epochs=100)","df53f22b":"model1.evaluate(X_test,y_test)","04b2c8b2":"#Model Optimisation\n\n# Model Building\n# Let's nuilding one more hidden layer\n\n#Initialize Sequential Graph (model)\nmodel2 = tf.keras.Sequential()\n\n#Normalize the data\nmodel2.add(tf.keras.layers.BatchNormalization())\n\n#Add Dense layer for prediction - Keras declares weights and bias automatically\nmodel2.add(tf.keras.layers.Dense(100, activation='sigmoid'))\n\n#Add 2nd Dense layer with 8 neurons\nmodel2.add(tf.keras.layers.Dense(100, activation='sigmoid'))\n\n#Output layer with 2 neurons as we have two distinct Class values\nmodel2.add(tf.keras.layers.Dense(2, activation='softmax'))\n\n# Model compilation with SGD and Cross-Entropy\nmodel2.compile(optimizer='sgd', loss='binary_crossentropy',metrics=['accuracy'])","8f7757a9":"model2.fit(X_train,y_train,validation_data=(X_test, y_test), epochs=100)","107ff931":"# Model with 0.5 as the threshold or learning rate\n\n# Model Building\n#Initialize Sequential Graph (model)\n\nfrom tensorflow.keras.optimizers import SGD\nmodel3 = tf.keras.Sequential()\n\n#Normalize the data\nmodel3.add(tf.keras.layers.BatchNormalization())\n\n#Add Dense layer for prediction - Keras declares weights and bias automatically\nmodel3.add(tf.keras.layers.Dense(10, activation='sigmoid',input_shape=(13,)))\n\n#Output layer with 2 neurons as we have two distinct target values\nmodel3.add(tf.keras.layers.Dense(2, activation='softmax'))\n\n# Model compilation with SGD and Cross-Entropy\nsgd = SGD(lr=0.5)\nmodel3.compile(optimizer=sgd, loss='binary_crossentropy',metrics=['accuracy'])","e1454593":"model3.fit(X_train,y_train,validation_data=(X_test, y_test), epochs=50)","e7025477":"model3.evaluate(X_test,y_test)","06d0c35c":"#Predicting the results with 0.5 as threshold\n\n\ny_pred = model3.predict(X_test)\n\n#y_pred1=y_pred.round()\ny_pred","8d39af62":"#Confuson Matrix\n\n# Creating the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test.argmax(axis=1), y_pred.argmax(axis=1))\ncm","7c54e378":"# Accuracy of each Model built\n\n# Model with just Input and Output\nprint (\"Accuracy of Model with just Input and Output is\",model1.evaluate(X_test,y_test));\n\n# Model with Input, two hidden layers and Output\nprint (\"Accuracy of Model with Input, two hidden layers and Output is\",model2.evaluate(X_test,y_test));\n\n# Model with Input, one hidden layer and Output with 0.5 threshold\nprint (\"Accuracy of Model with Input, one hidden layer and Output with 0.5 threshold is\",model3.evaluate(X_test,y_test));","3fe34d93":"# No Null values in the dataset","fb1cc801":"All the models gives the same accuracy."}}