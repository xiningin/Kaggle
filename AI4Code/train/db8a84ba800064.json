{"cell_type":{"6dcc8e06":"code","64c851f3":"code","a5dfe998":"code","faa1b67c":"code","931e2d39":"code","444f76b7":"code","f1fee822":"code","daf4be49":"code","04e3cdfc":"code","c85a02e0":"code","05070ad9":"code","9124e6f9":"code","1e8e2b30":"code","5988c399":"code","ea915007":"code","61b79c44":"code","70cace36":"code","3cf0b017":"markdown","f7c8dc35":"markdown","16516a9f":"markdown"},"source":{"6dcc8e06":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\noriginal_titanic_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntitanic_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","64c851f3":"def name_title(name):\n    start_position = name.find(',') + 2\n    end_position = name.find('.') \n    \n    if name[start_position:end_position] in ['Mr','Miss','Mrs','Master']:\n        return name[start_position:end_position]\n    else:\n        return 'Mr'","a5dfe998":"titanic_data['Title'] = titanic_data['Name'].apply(name_title)\ntitanic_data.drop(['Cabin','PassengerId','Survived','Ticket','Name'], axis = 1, inplace = True)\ntitanic_data.info()","faa1b67c":"box_plot = sns.boxplot(x = 'Title', y = 'Age', data = titanic_data)","931e2d39":"categorical_columns = ['Sex','Embarked','Title']\ntitanic_data = pd.get_dummies(titanic_data,columns = categorical_columns, dtype = int)","444f76b7":"train = titanic_data[titanic_data.notna().all(axis=1)]","f1fee822":"y = train['Age']\ncolumns_to_drop = ['Age','Parch','Embarked_Q','Fare']\ntrain.drop(columns_to_drop, axis = 1, inplace = True)\n\ncolumns=[]\nfor column in train.columns:\n    columns.append(column)\n\nX = train[columns]","daf4be49":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression().fit(X, y)\ny_pred = model.predict(train)","04e3cdfc":"test = titanic_data[titanic_data.isna().any(axis=1)]\ntest.drop(['Age','Parch','Embarked_Q','Fare'], axis = 1, inplace = True)\ntest_pred = model.predict(test)\ntest['Age'] = test_pred\ntrain['Age'] = y","c85a02e0":"sorted_age_filled = pd.concat([train,test]).sort_index()\nage = sorted_age_filled['Age']\noriginal_titanic_data['Age'] = age","05070ad9":"original_titanic_data.info()","9124e6f9":"original_titanic_data['Title'] = original_titanic_data['Name'].apply(name_title)\nsns.boxplot(x = 'Title', y = 'Age', data = original_titanic_data)","1e8e2b30":"original_titanic_data.drop(['Title'], axis = 1, inplace = True)\ntrain = original_titanic_data","5988c399":"y = train['Survived']\ntrain.drop(labels = ['Survived','PassengerId','Name','Ticket','Cabin','Embarked'], axis = 1, inplace = True)\ntrain['Age'].fillna(train['Age'].mean(), inplace = True)\ncategorical_columns = ['Sex']\ntrain = pd.get_dummies(train,columns = categorical_columns, dtype = int)\ntrain.drop(labels = ['Sex_male'], axis = 1, inplace = True)\n\nX = []\nfor column in train.columns:\n    X.append(column)\n\nX = train[X]","ea915007":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression().fit(X, y)\ny_pred = model.predict(train)\n\n#Function to convert the prediction to a one (survived) or zero (not survived)\ndef one_or_zero(abc):\n    if (1 - abc) < (abc - 0):\n        return 1\n    else: \n        return 0\n    \n#Converting the predictions to 1 or 0:\n\nlist_of_predictions = []\n\nfor pred in y_pred:\n    list_of_predictions.append(one_or_zero(pred))\n    \ny_pred = np.asarray(list_of_predictions)\n\n#Accuracy of the same model it trained on\nunique, counts = np.unique( np.asarray(y_pred == y), return_counts=True)\ntrue_false_values = dict(zip(unique, counts))\naccuracy = true_false_values[True]\/len(np.asarray(y_pred == y))\naccuracy","61b79c44":"original_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest.drop(labels = ['PassengerId','Name','Ticket','Cabin','Embarked'], axis = 1, inplace = True)\ntest['Age'].fillna(test['Age'].mean(), inplace = True)\ncategorical_columns = ['Sex']\ntest = pd.get_dummies(test,columns = categorical_columns, dtype = int)\ntest.drop(labels = ['Sex_male'], axis = 1, inplace = True)\ntest['Fare'].fillna(test['Fare'].mean(), inplace = True)\n\ntest_pred = model.predict(test)\nlist_of_predictions_test = []\n\nfor pred in test_pred:\n    list_of_predictions_test.append(one_or_zero(pred))\n    \ntest_pred = np.asarray(list_of_predictions_test)","70cace36":"submission = pd.DataFrame({\n        \"PassengerId\": original_test[\"PassengerId\"],\n        \"Survived\": test_pred\n    }) \n\nfilename = 'submission.csv'\nsubmission.to_csv(filename,index=False)\nprint('Saved file: ' + filename)","3cf0b017":"**Using the model on the test data**","f7c8dc35":"I want to predict the missing ages. I will use linear regression to do so. \n\nThe first step I will perform is to see if the person's title has anything to do with the age.","16516a9f":"Function to get the title from the Name column:"}}