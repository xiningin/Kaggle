{"cell_type":{"7ad2eed2":"code","3619da92":"code","b28960da":"code","37300b84":"code","a25673aa":"code","dacebf98":"code","f897b328":"code","bb6fa80f":"code","da3267e2":"code","2cba7359":"code","f82d0725":"code","1439896b":"code","c6e7ed56":"code","12b1a7b1":"code","c707321f":"code","24efeae8":"code","72ac7327":"code","fcc470c8":"code","f3d5c20c":"code","c76afed2":"code","1b8c280b":"code","8244fe6a":"code","dd4a0bb1":"code","b25eebb1":"code","8234d06b":"code","344eb891":"code","6506655b":"code","01472b93":"code","7af9f8e5":"code","48696da1":"code","851e3c72":"code","4f1e27bf":"code","f77b7cf3":"code","3f5516ad":"code","5190ac91":"code","fa867e3a":"code","0f879de0":"code","47ba02b5":"code","17e76fa3":"code","fcbd6877":"code","61caefd2":"code","c4c5820f":"code","8e6d3b91":"code","7687189d":"code","767033fe":"code","045303cd":"code","618b9bce":"markdown","e1936829":"markdown","7d68084b":"markdown","cb7c1a52":"markdown","d1aa0ef2":"markdown","0254253b":"markdown","b24068a0":"markdown","2fb20c2d":"markdown","6ccc53e8":"markdown","58b2f21b":"markdown","fc90e4cc":"markdown","818df661":"markdown","1b6c8541":"markdown","a0cdb130":"markdown","b102f741":"markdown","b7caff92":"markdown","1dde3ed7":"markdown","22527d18":"markdown","785bbb64":"markdown","f42df5ed":"markdown","1b57ed86":"markdown","c11cab63":"markdown","de1c101c":"markdown","eb256337":"markdown","ea9271d1":"markdown","41c459fb":"markdown","2bada098":"markdown","46541dad":"markdown","9e3b694f":"markdown","70f87a78":"markdown","8394c29f":"markdown","83bbe759":"markdown","696fb307":"markdown","001608fe":"markdown","b4f7c7b9":"markdown","c7333d00":"markdown","77dde4f9":"markdown"},"source":{"7ad2eed2":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Standard packages\nimport json\n\n# Libs to deal with tabular data\nimport numpy as np\nimport pandas as pd\npd.options.mode.chained_assignment = None\nimport geopandas as gpd\n\n# Plotting packages\nimport seaborn as sns\nsns.axes_style(\"darkgrid\")\n%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn')\nfrom matplotlib.patches import Rectangle\n#!pip install pyvis\n#import pyvis\n\n# Lib to create maps\n!pip install git+https:\/\/github.com\/python-visualization\/branca.git@master\nimport folium \nfrom folium import Choropleth, Circle, Marker, CircleMarker, GeoJson, FeatureGroup, LayerControl\nfrom folium.plugins import HeatMap, MarkerCluster\nfrom folium.vector_layers import PolyLine, Polygon\nfrom folium.map import Icon\n\n# Geo data manipulation\nfrom shapely.geometry import LineString, Polygon\n\n# To display stuff in notebook\nfrom IPython.display import display, Markdown\n\n# Network libs\nimport networkx as nx","3619da92":"# Reading GTFS files\nagency = pd.read_csv('..\/input\/sao-paulo-transportation-service\/agency.txt')\nstops = pd.read_csv('..\/input\/sao-paulo-transportation-service\/stops.txt')\nroutes = pd.read_csv('..\/input\/sao-paulo-transportation-service\/routes.txt')\ntrips = pd.read_csv('..\/input\/sao-paulo-transportation-service\/trips.txt')\nstop_times = pd.read_csv('..\/input\/sao-paulo-transportation-service\/stop_times.txt')\ncalendar = pd.read_csv('..\/input\/sao-paulo-transportation-service\/calendar.txt')\nfare_attributes = pd.read_csv('..\/input\/sao-paulo-transportation-service\/fare_attributes.txt')\nfare_rules = pd.read_csv('..\/input\/sao-paulo-transportation-service\/fare_rules.txt')\nshapes = pd.read_csv('..\/input\/sao-paulo-transportation-service\/shapes.txt')\nfrequencies = pd.read_csv('..\/input\/sao-paulo-transportation-service\/frequencies.txt')\n\n# Reading districts of S\u00e3o Paulo\ndistricts = gpd.read_file('..\/input\/districts-of-sao-paulo')\n\n# Demographic info (population)\npopulation = pd.read_excel('..\/input\/sao-paulo-demographic\/demographic_info.xlsx')\n\n# HDI data\nhdi = pd.read_excel('..\/input\/idh-sao-paulo\/idh.xlsx') ","b28960da":"# Routes\n# Dropping columns\nroutes = routes.drop(columns=['agency_id', 'route_text_color'])\n\n# Adding information\nroutes['route_type'] = routes['route_type'].replace({\n    1:'Metro',\n    2:'Rail',\n    3:'Bus'\n})\n\ncolor_region_dict = {\n    '509E2F':'Northwest',\n    '002F6C':'North',\n    'FFD100':'Northeast',\n    'DA291C':'East',\n    '006341':'Southeast',\n    '0082BA':'South',\n    'FF671F':'West',\n    '782F40':'Southwest'\n}\nroutes['region'] = routes['route_color'].replace(color_region_dict)\n\n# Stop times\n# Changing columns\nstop_times = stop_times.drop(columns=['departure_time'])\nstop_times = stop_times.rename(columns={'arrival_time':'time'})\n\n# Converting column time to deltas of time minus start_time\nstop_times['time'] = pd.to_datetime(stop_times['time'])\nstart_times = stop_times[stop_times['stop_sequence'] == 1].set_index('trip_id')['time'].rename('start_time')\nstop_times = stop_times.join(start_times, on='trip_id', how='left')\nstop_times['time'] = stop_times['time'] - stop_times['start_time'] \nstop_times = stop_times.drop(columns=['start_time'])\n\n# Calendar\n# Creating description\ncalendar['description'] = calendar['service_id'].replace({\n    'USD':'All days',\n    'U__':'Business days',\n    'US_':'Business days \/ Saturday',\n    '_SD':'Weekends',\n    '__D':'Sundays',\n    '_S_':'Saturdays'\n})\n\ncalendar = calendar.loc[:, ['service_id', 'description']]\n\n# Fare attributes\n# Dropping columns\nfare_attributes = fare_attributes.drop(columns=['transfers'])\n\n# Adding information\nfare_attributes['payment_method'] = 'On board'\n\n# Fare rules\n# Dropping columns with all values missing.\nfare_rules = fare_rules.drop(columns=['origin_id', 'destination_id', 'contains_id'])\n\n# Frequencies\n# Creating unified time column\nfrequencies['time_bin'] = frequencies['start_time'].apply(lambda x: x[:5])\nfrequencies = frequencies.drop(columns = [\n    'start_time',\n    'end_time'\n])\n\n# Adding number of departures by hour\nfrequencies['n_departures'] = (3600 \/ frequencies['headway_secs']).astype(int)\nfrequencies = frequencies.drop(columns = ['headway_secs'])\n\n# Joins\nroutes_plus = fare_rules.merge(fare_attributes, right_on='fare_id', left_on='fare_id', how='left')\nroutes_plus = routes.merge(routes_plus, right_on='route_id', left_on='route_id', how='left')\nroute_trips = routes.merge(trips, how='left', left_on='route_id', right_on='route_id')\ntrips_service = route_trips.merge(calendar, how='left', left_on='service_id', right_on='service_id')\ntrips_freq = route_trips.merge(frequencies, how='left', left_on='trip_id', right_on='trip_id')\ntrips_stops = route_trips.merge(stop_times, how='left', left_on='trip_id', right_on='trip_id')\ntrips_stops = trips_stops.merge(stops, how='left', left_on='stop_id', right_on='stop_id')\ntrips_shape = route_trips.merge(shapes, how='left', left_on='shape_id', right_on='shape_id')","37300b84":"print(stops.shape)\nstops.sample(5, random_state=42)","a25673aa":"print(routes.shape)\nroutes.sample(5, random_state=42)","dacebf98":"print(trips.shape)\ntrips.head()","f897b328":"print(stop_times.shape)\nstop_times.head()","bb6fa80f":"print(calendar.shape)\ncalendar","da3267e2":"print(fare_attributes.shape)\nfare_attributes","2cba7359":"print(fare_rules.shape)\nfare_rules.head()","f82d0725":"print(shapes.shape)\nshapes.head()","1439896b":"print(frequencies.shape)\nfrequencies.head(5)","c6e7ed56":"# Converting CRS\ndistricts = districts.to_crs(epsg=4326) # GPS lat-long\n\n# Selecting usefull variables\ndistricts = districts.loc[:, ['NOME_DIST', 'COD_DIST', 'COD_SUB', 'geometry']]\n\n# Changing types\ndistricts['COD_SUB'] = pd.to_numeric(districts['COD_SUB'])\ndistricts['COD_DIST'] = pd.to_numeric(districts['COD_DIST'])\n\n# Addind demographic information (populatio, subprefecture)\ndistricts = districts.join(population.set_index('cod_distrito'), on = 'COD_DIST', how = 'left')\ndistricts = districts.drop(columns=['NOME_DIST', 'COD_DIST', 'COD_SUB', '\u00c1rea (km\u00b2)'])\ndistricts = districts.rename(columns={\n    'Subprefeituras':'subprefecture',\n    'Distritos':'district',\n    'Popula\u00e7\u00e3o (2010)':'population'\n})\n\n# Creating dictionary of districts to subprefectures\ndist_to_prefec = {row['district']: row['subprefecture'] for idx, row in districts.iterrows()} \n\n# Creating city polygon\ncity = Polygon(districts['geometry'].unary_union.exterior)\n\n# Creating subprefectures DataFrame\nsubprefectures = districts.loc[:, ['subprefecture', 'geometry']].dissolve('subprefecture').reset_index()\nsubprefectures = subprefectures.join(\n    districts.groupby('subprefecture').sum()['population'], \n    on = 'subprefecture', \n    how='left'\n)\nsubprefectures = subprefectures.join(hdi.set_index('Subprefeituras'), on='subprefecture', how='left')\nsubprefectures['geometry'] = subprefectures['geometry'].apply(lambda x: Polygon(x.exterior))\n\n# Removing prefectures columns\ndistricts = districts.loc[:, ['district', 'population', 'geometry']]","12b1a7b1":"print(districts.shape)\ndistricts.head()","c707321f":"print(subprefectures.shape)\nsubprefectures.head()","24efeae8":"# Calculating area and population density\ncity_population = subprefectures['population'].sum()\ncity_area = subprefectures['geometry'].to_crs(epsg=29193).area.sum() \/ 10**6\ncity_density = int(city_population \/ city_area)\nsubprefectures['pop_density'] = (subprefectures['population'] * 10**6 \/ subprefectures['geometry'].to_crs(epsg=29193).area).astype(int)\n\nprint('S\u00e3o Paulo\\'s population: ', city_population)\nprint('Area (km\u00b2): ', city_area)\nprint('Population density (people\/km\u00b2): ', city_density)\nprint('Mean HDI: ', subprefectures['IDH 2010'].mean())\nprint('Mean HDI (per capita income): ', subprefectures['IDH Renda'].mean())\nprint('Mean HDI (life expectancy): ', subprefectures['IDH Longevidade'].mean())\nprint('Mean HDI (education): ', subprefectures['IDH Educa\u00e7\u00e3o'].mean())\nprint('Number of subprefectures: ', subprefectures.shape[0])","72ac7327":"def create_choropleth(col_name, legend, tooltip_alias):\n    # Creating map\n    regions_map = folium.Map(\n        location=[-23.533773, -46.625290], \n        tiles='cartodbpositron', \n        zoom_start=11,\n        control_scale=True\n    )\n\n    # Subprefecture choropleth\n    choropleth_subpref = Choropleth(\n        geo_data = subprefectures.__geo_interface__,\n        data = subprefectures.set_index('subprefecture')[col_name], \n        name = 'Subprefectures',\n        legend_name = legend,\n        key_on=\"feature.properties.subprefecture\", \n        fill_color='YlGnBu'\n    ).add_to(regions_map)\n\n    # Display Region Label\n    choropleth_subpref.geojson.add_child(\n        folium.features.GeoJsonTooltip(\n            fields = ['subprefecture', col_name],\n            aliases = ['Subprefecture', tooltip_alias]\n        )\n    )\n\n    return regions_map","fcc470c8":"city_map = create_choropleth(\n    col_name = 'pop_density', \n    legend = 'Population density (people\/km2) by subprefectures', \n    tooltip_alias = 'Population density (people\/km\u00b2)'\n)\n\ncity_map","f3d5c20c":"city_map = create_choropleth(\n    col_name = 'IDH 2010', \n    legend = 'HDI by subprefectures', \n    tooltip_alias = 'HDI'\n)\n\ncity_map","c76afed2":"print('Number of routes: ', routes.shape[0])\nprint('Number of route colors: ', routes['route_color'].nunique())","1b8c280b":"routes['route_type'].value_counts()","8244fe6a":"not_bus_routes = routes[routes['route_type'].isin(['Rail', 'Metro'])].reset_index(drop=True)\nnot_bus_routes","dd4a0bb1":"cell_width = 424\ncell_height = 22\nswatch_width = 48\nmargin = 12\ntopmargin = 40\n\nnrows = len(not_bus_routes)\n\nwidth = cell_width + 2 * margin\nheight = cell_height * nrows + margin + topmargin\ndpi = 72\n\nfig, ax = plt.subplots(figsize=(width \/ dpi, height \/ dpi), dpi=dpi)\nfig.subplots_adjust(margin\/width, margin\/height,\n                    (width-margin)\/width, (height-topmargin)\/height)\nax.set_xlim(0, cell_width)\nax.set_ylim(cell_height * (nrows-0.5), -cell_height\/2.)\nax.yaxis.set_visible(False)\nax.xaxis.set_visible(False)\nax.set_axis_off()\nax.set_title('Colors of rail and metro routes', fontsize=16, fontweight='bold', pad=10)\n\nfor idx, df_row in not_bus_routes.iterrows():\n    row = idx\n    y = row * cell_height\n\n    text_pos_x = swatch_width + 7\n\n    ax.text(\n        text_pos_x, y, \n        df_row['route_short_name'] + ': ' + df_row['route_long_name'], \n        fontsize=14,\n        horizontalalignment='left',\n        verticalalignment='center'\n    )\n\n    ax.add_patch(\n        Rectangle(\n            xy=(0, y-9), \n            width=swatch_width,\n            height=18, \n            facecolor='#' + df_row['route_color']\n        )\n    )","b25eebb1":"color_freq = routes['region'].value_counts()[:8]\nregion_color_dict = {v:k for k, v in color_region_dict.items()}\n\nax = sns.barplot(\n    x = color_freq.index, \n    y = color_freq.values,\n    palette = sns.color_palette(['#' + region_color_dict[region] for region in color_freq.index])\n)\nplt.title('Bus routes by region of operation', fontsize=16, fontweight='bold')\nplt.ylabel('Number of routes', fontsize=14)\nplt.xlabel('Region', fontsize=14)\nplt.show()","8234d06b":"routes_plus.groupby(['route_type', 'fare_id'])['route_id'].count()","344eb891":"routes.groupby('route_long_name')['route_id'].nunique().sort_values(ascending=False).head(10)","6506655b":"print('Number of trips: ', trips.shape[0])\nprint('Number of trips by routes: ', trips.shape[0] \/ routes.shape[0])\nprint('{} routes don\\'t have trip information'.format(route_trips.isnull().sum()['trip_id']))","01472b93":"trips_by_routes = route_trips['route_id'].value_counts().value_counts()\n\nsns.barplot(x = trips_by_routes.index, y = trips_by_routes.values)\nplt.title('Number of trips by route', fontsize=16, fontweight='bold')\nplt.ylabel('Frequency of routes', fontsize=15)\nplt.xlabel('Number of trips', fontsize=15)\nplt.show()","7af9f8e5":"directions_by_routes = route_trips.groupby('route_id')['direction_id'].nunique().value_counts()[:2]\n\nsns.barplot(x = directions_by_routes.index, y = directions_by_routes.values)\nplt.title('Number of directions by route', fontsize=16, fontweight='bold')\nplt.ylabel('Frequency of routes', fontsize=15)\nplt.xlabel('Number of directions', fontsize=15)\nplt.show()","48696da1":"trips_distance = trips_shape.groupby('trip_id')['shape_dist_traveled'].max() \/ 1000 # convert to km\n\nprint('Minimum distance traveled: ', trips_distance.min())\nprint('Mean distance traveled: ', trips_distance.mean())\nprint('Maximum distance traveled: ', trips_distance.max())","851e3c72":"sns.distplot(trips_distance)\nplt.title('Distribution of distance traveled by each trip', fontsize=16, fontweight='bold')\nplt.xlabel('Distance traveled (km)', fontsize=14)\nplt.show()","4f1e27bf":"def create_trip_map(trip_id, zoom):\n    \n    def make_circle(position, tooltip, color):\n        return folium.CircleMarker(\n            position,\n            tooltip = tooltip,\n            color = \"#000\",\n            fill_color = color,\n            fill_opacity = 1,\n            radius = 8,\n            weight = 2,\n            opacity = 1,\n        )\n    \n    # Getting list of lat\/long points that compose the path \n    lat_long_df = trips_shape.loc[trips_shape['trip_id'] == trip_id, :].sort_values('shape_pt_sequence')[['shape_pt_lat', 'shape_pt_lon']]\n    path = list(zip(lat_long_df['shape_pt_lat'].tolist(), lat_long_df['shape_pt_lon'].tolist()))\n    \n    # Getting stops information\n    path_stations = trips_stops.loc[trips_stops['trip_id'] == trip_id, :].sort_values('stop_sequence')\n    \n    # Creating map\n    itinerary_map = folium.Map(\n        location = path[len(path)\/\/2], # initialize the map centered in the middle point of the trip\n        tiles = 'cartodbpositron', \n        zoom_start = zoom,\n        control_scale = True\n    )\n    \n    # Adding trip path\n    PolyLine(\n        locations = path\n    ).add_to(itinerary_map)\n    \n    # First station\n    first_row = path_stations.iloc[0, :]\n    make_circle([first_row['stop_lat'], first_row['stop_lon']], first_row['stop_name'], 'green').add_to(itinerary_map)\n    \n    # Last station\n    last_row = path_stations.iloc[-1, :]\n    make_circle([last_row['stop_lat'], last_row['stop_lon']], last_row['stop_name'], 'red').add_to(itinerary_map)\n    \n    # Intermediary stations\n    for idx, row in path_stations.iloc[1:-1].iterrows():\n        make_circle([row['stop_lat'], row['stop_lon']], row['stop_name'], '#ccc').add_to(itinerary_map)\n        \n    return itinerary_map","f77b7cf3":"shortest_trip_id = trips_distance.idxmin()\ntrips_service.loc[trips_service['trip_id'] == shortest_trip_id, [\n    'route_short_name',\n    'route_long_name',\n    'route_type',\n    'region',\n    'trip_headsign',\n    'description'\n]].iloc[0]","3f5516ad":"create_trip_map(shortest_trip_id, 15)","5190ac91":"longest_trip_id = trips_distance.idxmax()\ntrips_service.loc[trips_service['trip_id'] == longest_trip_id, [\n    'route_short_name',\n    'route_long_name',\n    'route_type',\n    'region',\n    'trip_headsign',\n    'description'\n]].iloc[0]","fa867e3a":"create_trip_map(longest_trip_id, 10)","0f879de0":"service_freq = trips_service.groupby('description')['description'].count()\n\nsns.barplot(x = service_freq.index, y = service_freq.values)\nplt.title('Number of trips by service type', fontsize=16, fontweight='bold')\nplt.ylabel('Frequency of trips', fontsize=14)\nplt.xlabel('Type of service', fontsize=14)\nplt.show()","47ba02b5":"histogram = trips_freq.groupby('time_bin')['n_departures'].sum().astype(int)\n\nplt.figure(figsize=(15,5))\nsns.lineplot(x = histogram.index, y = histogram.values)\nplt.title('Number of trip departures along the day', fontsize=16, fontweight='bold')\nplt.ylabel('Departures', fontsize=14)\nplt.xlabel('Hour', fontsize=14)\nplt.show()","17e76fa3":"trip_duration = stop_times.groupby('trip_id').max()[['time', 'stop_sequence']]\n\nprint('Minimum duration: ', trip_duration['time'].min())\nprint('Mean duration: ', trip_duration['time'].mean())\nprint('Maximum duration: ', trip_duration['time'].max(), '\\n')\n\nprint('Minimum number of stops: ', trip_duration['stop_sequence'].min())\nprint('Mean number of stops: ', trip_duration['stop_sequence'].mean())\nprint('Maximum number of stops: ', trip_duration['stop_sequence'].max())","fcbd6877":"sns.distplot(trip_duration['time'].dt.seconds \/ 60)\nplt.title('Distribution of trip durations', fontsize=16, fontweight='bold')\nplt.xlabel('Duration (minutes)', fontsize=14)\nplt.show()","61caefd2":"sns.distplot(trip_duration['stop_sequence'])\nplt.title('Distribution of number of stops by trip', fontsize=16, fontweight='bold')\nplt.xlabel('Stations', fontsize=14)\nplt.show()","c4c5820f":"fastest_trip_id = trip_duration['time'].idxmin()\ntrips_service.loc[trips_service['trip_id'] == fastest_trip_id, [\n    'route_short_name',\n    'route_long_name',\n    'route_type',\n    'region',\n    'trip_headsign',\n    'description'\n]].iloc[0]","8e6d3b91":"slowest_trip_id = trip_duration['time'].idxmax()\ntrips_service.loc[trips_service['trip_id'] == slowest_trip_id, [\n    'route_short_name',\n    'route_long_name',\n    'route_type',\n    'region',\n    'trip_headsign',\n    'description'\n]].iloc[0]","7687189d":"create_trip_map(slowest_trip_id, 13)","767033fe":"# Creating map\nitinerary_map = folium.Map(\n    location = [-23.533773, -46.625290], \n    tiles = 'cartodbpositron', \n    zoom_start = 11,\n    control_scale = True\n)\n\n# Adding city borders\nGeoJson(\n    city,\n    lambda x: {'fillOpacity': 0.0, 'opacity': 0.5},\n    name = 'City borders'\n).add_to(itinerary_map)\n\nfor route_type in ['Bus', 'Metro', 'Rail']:\n\n    # Select relevant trips\n    route_type_df = route_trips.loc[\n        (route_trips['route_type'] == route_type) & \\\n        (route_trips['trip_id'].notnull()) & \\\n        (route_trips['direction_id'] == 0), :\n    ]\n\n    route_type_group = FeatureGroup(name = route_type + ' routes')\n\n    for idx, row in route_type_df.iterrows():\n        \n        # Getting list of lat\/long points that compose the path \n        lat_long_df = trips_shape.loc[\n            (trips_shape['trip_id'] == row['trip_id']) & \\\n            (trips_shape['direction_id'] == 0), :\n        ].sort_values('shape_pt_sequence')[['shape_pt_lat', 'shape_pt_lon']]\n        path = list(zip(lat_long_df['shape_pt_lat'].tolist(), lat_long_df['shape_pt_lon'].tolist()))\n\n        # Adding trip path\n        PolyLine(\n            locations = path,\n            color = 'black' if route_type == 'Bus' else '#' + row['route_color'],\n            weight = 2,\n            tooltip = row['route_short_name'] + ': ' + row['route_long_name']\n        ).add_to(route_type_group)\n\n    # After creating all elements, insert group in the map\n    route_type_group.add_to(itinerary_map)\n\n# Create a controller to show\/hide groups\nLayerControl(\n    collapsed=False\n).add_to(itinerary_map)\n\nitinerary_map","045303cd":"stations_map = folium.Map(\n    location = [-23.533773, -46.625290], \n    tiles = 'cartodbpositron', \n    zoom_start = 11,\n    control_scale = True\n)\n\n# Adding city borders\nGeoJson(\n    city,\n    lambda x: {'fillOpacity': 0.0, 'opacity': 0.2},\n    name = 'City borders'\n).add_to(stations_map)\n\n# Adding Marker clusters\nMarkerCluster(\n    list(zip(stops['stop_lat'].tolist(), stops['stop_lon'].tolist())),\n    popups = list(stops['stop_name']),\n    radius = 10\n).add_to(stations_map)\n\nstations_map","618b9bce":"#### Longest trip\n\nAs we can see below, the longest trip is actually an intercity route. It starts\/ends in S\u00e3o Paulo and ends\/starts in a city called Jundia\u00ed.","e1936829":"#### Slowest trip","7d68084b":"### How frequently does the trips operate?\n\nMost trips have a fixed calendar, that is, they work everyday. ","cb7c1a52":"### What are the fastest and slowest trips?\n\n#### Fastest trip\n\nThe fastest trip is also the the shortest trip, so its itinerary I already showed above. ","d1aa0ef2":"When we look at the HDI, the situation changes a bit. \n\n- Although the east part of S\u00e3o Paulo is the roughly the most populated, it has a lower level of development.\n- The best places to live in S\u00e3o Paulo are in the central area, with subprefectures like Pinheiros and Vila Mariana leading the rank.\n\nIf we think carefully, this distribution of development is very common. The main reason is that most qualified jobs are located in the central area, where stablished companies want to be. High worth people can afford to live near their work places due to high salaries. Thus, they end up inflation the cost of live in the centre. This forces poor people to live near the borders and where conditions are not as good as in the central area (in terms of availability of services and facilities).\n\n# Analyzing routes","0254253b":"S\u00e3o Paulo is a huge city as we can see by the numbers. Its population of about 11 milion people is about the same of Belgium, Cuba and Tunisia. Also, the mean HDI is above the Brazilian mean (0.761) and similar to countries like Uruguay and Turkey. But notice that there is a high difference when we compare the HDI components, for example life expectancy and education.\n\nNow let's visualize the city by its subprefectures with two maps, one for each metric that I showed previously. **Move the cursor on the map to display the subprefecture name and statistic.**","b24068a0":"#### Shortest trip","2fb20c2d":"It is clear that there are two peaks, one at the morning a another one at the afternoon. However, between the peaks the number of departures doesn't decrease much, which is suprinsing for me because I thought the drop would be more significant.\n\n### What is the average duration of trips?\n\nIn this section I'm going to analyze both duration in time and in terms of number of stops passed by.","6ccc53e8":"#### Trips\n\nContains information about the trips that exist in each route. It is possible to have two different paths in a single route, for instance, travelling in one direction and in the opposite direction of a route.","58b2f21b":"According to the table above, every fare is applicable to every route because what matters isn't the route but the combination of types of transportation you take.\n\n#### Duplicated routes\n\nAre there routes with the same start and end points but with different codes?","fc90e4cc":"#### Fare rules\n\nThis table lists which fare each route charge.","818df661":"# Data preparation\n\nIn this step I'm going to parse the data to remove useless columns and translate \"code columns\".\n\n## GTFS\n\nHere we inspect and parse the GTFS data provided by SPTrans.","1b6c8541":"#### Stops\n\nIt has data about bus stops or metro\/rail stations.","a0cdb130":"Since I don't have a shapefile or a GeoJson of the regions, below you can find an image of them taken from the [SPTrans website](http:\/\/www.sptrans.com.br\/informativos\/).\n\n![](http:\/\/www.sptrans.com.br\/images\/mapa-newsletter.png)","b102f741":"### What is the service peak time?\n\nTo figure out the answer, I'm going to analyze how many departures each trip has along the day. In the table frequencies we have the number of departures of each trip by hour, from 00:00:00 to 00:59:00, 01:00:00 to 01:59:00 and so on. In other words, I will build a histogram of departures where the bins are hour invervals.","b7caff92":"# EDA with maps: S\u00e3o Paulo Transportation System\n\n<img src=\"http:\/\/4.bp.blogspot.com\/-Rvyj85Hbc3w\/U4zh2Q9EVFI\/AAAAAAAAAJE\/xqiY8nDymYc\/s1600\/MASP.jpg\" width=\"600\"\/>\n\nSao Paulo is in various aspects the most important city in Brazil. Its population of 11 milion people is almost twice as large as the second most populated city in the country, Rio de Janeiro. Not to mention that its metropolitan area has about 22 milion people, which is roughly 10% of the Brazilian population. When it comes to economy, the city has the highest GDP of the country (R$ 699,28 billion in 2017) and the biggest brazilian companies have headquarters in the metropole. To support this huge globalized city, the prefecture manages a public transportation system of over 2000 routes crossing an area of 1.521 km\u00b2. \n\nIn this notebook I want to make an spacial analysis of the transportation system as well as explore some characteristics of the city. This last part is very important to understand why the system is the way it is. \n\nThis is an on-going project and if it helped or inspired you, please consider giving it an upvote.\n\n# Importing data and libs","1dde3ed7":"#### Fares\n\nAccording to the fare attributes table, every route has the same price and transfer time of 3 hours. However, if you plan to use more than one type of transportation, you must pay more than the fare to use a single type. Let's see if routes have specific ways of charge passangers.","22527d18":"#### Fare attributes\n\nHere we have payment information. Each trip can have a different fare.","785bbb64":"#### Routes\n\nThis table contains routes information, such as code, name and type.","f42df5ed":"#### Stop times\n\nIn this table we have about the sequence of stops each trip goes through.","1b57ed86":"#### Calendar\n\nIt maps an ID to a list of days in which a trip operates.","c11cab63":"#### Shapes\n\nThis table describes in details the path of each trip with a sequence of points (lat, long) which can be a stop or not.**","de1c101c":"# Analyzing trips\n\nEvery route can have more than one trip. To understand why, imagine that a route has different ways to go one way and the reverse way. Also, they can change whether it's a business day or a weekend. \n\nLet's take a look in some basic statistics aboute the trips.","eb256337":"### How far does the trips reach?\n\nAs we can see below, the distance distribution is kinda normal and centered at 15 km. But notice that there are a couple of outliers with very high distances.","ea9271d1":"1. Metro lines don't cover well the entire city, as they are concentrated in the central area. That's the first big problem, since metro routes are more efficient and transport more people.\n2. Rail lines' purpose is to give the neighbor cities access to S\u00e3o Paulo. That's because they were built over an old rail system that connected cities. Nowadays they are adapted to transport passengers due to conurbation.\n3. Bus is the main type of route, though it's not reliable. It often is very delayed, traffic is a serious issue in S\u00e3o Paulo and floods often occur.\n\n# Analyzing stops\n\nRegarding stops, again the centre has more service options. ","41c459fb":"## S\u00e3o Paulo's borders\n\nNow, I'm going to parse the geospacial data containing district and subprefecture borders.","2bada098":"#### Frequencies \n\nIt informs how many departures each trip has along the day. It is like a histogram, where the columns *start_time* and *end_time* defines the bin and the column *headway_secs* defines the inverval between departures in each bin.","46541dad":"#### Bus colors\n\nIn the case of bus routes, there are 8 colors and they represent the region of operation. Below you can see the number of lines by region and the bar colors indicate the region color. Notice that the distribution is kinda uniform.","9e3b694f":"Notice that we have 75 routes with no corresponding trips. I randomly selected 10 of these routes and searched them in the SPTrans website. The result was that they in fact exist but aren't operating at the moment. In the search I could also see the trip shape, but, since we don't a mapping from the trip to the shape, we can't visualize it here.\n\nBelow you can see a plot of the number of trips each route has. Notice that there is no route with more than two trips, that is, there isn't much variation in the itinerary or in the service days.","70f87a78":"#### Directions\n\nRegarding the number of directions of a route, as we can see below, most routes operates in two ways, with just 26% having a single way.","8394c29f":"# Understanding the city\n\nBefore we analyze the transporation system, we must understand the geographical characteristics of S\u00e3o Paulo. To do so, we are going to use  two metrics:\n\n- Population density (people\/km\u00b2)\n- Human Development Index (HDI)\n\nFirst I will show these metrics for the entire city and then present a fine-grained version. The city (prefecture) of S\u00e3o Paulo is organized in subprefectures, which in turn are splitted again in districts. To simplify our analysis, we will focus on the subprefectures for now.","83bbe759":"Conceptually, these routes could be modelled as a single route with many trips. For instance, the itinerary *Term. Pirituba - Term. Lapa* could be a single route with 7 trips instead of 7 different routes.","696fb307":"S\u00e3o Paulo has a large number of routes and they are organized in colors. In addition to that, the transportation system has three types: rail, metro and bus.\n\n#### Types\n\nBelow you can find how many of each type S\u00e3o Paulo has.","001608fe":"Rail lines start with *CPTM* and the metro ones start with *METRO*. Actually, these names corresponds to the names of the public companies that run the rail and metro routes.\n\nOne critic that many specialists talk about is that there are not enough rail and metro routes. These types of transportation are very good because they can carry more people than the others and, overall, they are safier and less prone to delays. If we take for example London, which is very similar to S\u00e3o Paulo in area, we can see a huge difference in the number of subway routes and in their coverage.\n\nOf course, there are a number of ongoing projects to expand the metro network, but all of them suffer from lack of money, conflicting political interests, corruption and huge delays. Let's take the route METR\u00d4 L4 as an example. Its construction started in 2004 and the proposed dealine was 2010. However, the first two stations were concluded only in 2010 and since then the company responsible for the construction has been concluding stations in a very slow pace. As of July 2020, there is still one station to be finished.\n\n#### Metro and rail colors\n\nEach rail and metro route have their own color, which you can see below.","b4f7c7b9":"With this map we can see that:\n\n- The east border of S\u00e3o Paulo is very populated since four subprefectures have over 14.000 people\/km\u00b2. \n- Still in the east part of the city, we have the most populated area of city: Sapopemba. \n- S\u00e9 in the central area and Campo Limpo and Jabaquara in the south part are subprefectures with a high population density compared to its neighborhood.","c7333d00":"### What are the shortest and longest trips?\n\nIn this sections let's visualize the shape of the longer and shorter trips.","77dde4f9":"### How are the trips geographically distributed?\n\nLet's visualize the trips' shape in a map."}}