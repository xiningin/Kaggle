{"cell_type":{"9678e7ba":"code","06143ac0":"code","8fef503f":"code","987abf24":"code","a8c2aa56":"code","ffe0a632":"code","33653e2f":"code","ab867186":"code","bfb80807":"code","480792e6":"code","08347da4":"code","d4a0ceea":"code","bdfd4da7":"code","43a360da":"code","08298920":"code","7dd96702":"code","7885c0a6":"code","8b761d37":"code","87e2eeac":"code","e62b31e0":"code","c0777cae":"markdown","89d2d64d":"markdown","488ff7b4":"markdown","84e443a5":"markdown","e319eba7":"markdown"},"source":{"9678e7ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","06143ac0":"us_videos = pd.read_csv(\"\/kaggle\/input\/youtube-new\/USvideos.csv\")\nus_videos","8fef503f":"us_videos.columns","987abf24":"us_categories = pd.read_json(\"\/kaggle\/input\/youtube-new\/US_category_id.json\")\nus_categories = us_categories.drop(columns=['kind', 'etag'])\nus_categories['kind']=us_categories['items'].map(lambda x: dict(x)['kind'])\nus_categories['etag']=us_categories['items'].map(lambda x: dict(x)['etag'])\nus_categories['category_id']=us_categories['items'].map(lambda x: dict(x)['id'])\nus_categories['channelId']=us_categories['items'].map(lambda x: dict(x)['snippet']['channelId'])\nus_categories['title']=us_categories['items'].map(lambda x: dict(x)['snippet']['title'])\nus_categories['assignable']=us_categories['items'].map(lambda x: dict(x)['snippet']['assignable'])\nus_categories=us_categories.drop(columns=['items'])\nus_categories","a8c2aa56":"us_vid_stats = us_videos.join(us_categories, on=['category_id'], how=\"inner\", lsuffix=\"\", rsuffix=\"_category\")\nus_vid_stats.head()","ffe0a632":"us_vid_stats = us_vid_stats[['views', 'likes', 'dislikes', 'comment_count']]\nus_vid_stats.head()","33653e2f":"us_vid_stats.describe()","ab867186":"us_vid_stats.corr()","bfb80807":"import seaborn as sns","480792e6":"sns.scatterplot(data=us_vid_stats, x='views', y='likes')","08347da4":"sns.scatterplot(data=us_vid_stats, x='dislikes', y='likes')","d4a0ceea":"sns.scatterplot(data=us_vid_stats, x='comment_count', y='likes')","bdfd4da7":"X = us_vid_stats[[\"views\", \"comment_count\"]].values\nY = us_vid_stats[\"likes\"].values\nprint(X[:5])\nprint(Y[:5])","43a360da":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score","08298920":"X_train, X_test, y_train, y_test = train_test_split(X, Y, random_state=123)","7dd96702":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","7885c0a6":"lr = LinearRegression(normalize=True)\nlr.fit(X_train, y_train)","8b761d37":"y_pred = lr.predict(X_test)\nprint(\"MSR: {}\".format(mean_squared_error(y_pred, y_test)))\nprint(\"R2 Score: {}\".format(r2_score(y_pred, y_test)))","87e2eeac":"regr_1 = DecisionTreeRegressor(max_depth=4)\n\nregr_2 = AdaBoostRegressor(DecisionTreeRegressor(max_depth=4),\n                          n_estimators=300, random_state=123)\n\nregr_1.fit(X_train, y_train)\nregr_2.fit(X_train, y_train)\n\n# Predict\ny_1 = regr_1.predict(X_test)\ny_2 = regr_2.predict(X_test)","e62b31e0":"print(\"Decision Tree MSR: {}\".format(mean_squared_error(y_1, y_test)))\nprint(\"Decision Tree R2_Score: {}\".format(r2_score(y_1, y_test)))\nprint(\"AdaBoostRegress MSR: {}\".format(mean_squared_error(y_2, y_test)))\nprint(\"AdaBoostRegress R2_Score: {}\".format(r2_score(y_2, y_test)))","c0777cae":"### Simple Machine Regression Models\nLinear Regression, DecisionTree Regression, Ada Boost Regression","89d2d64d":"## Data Exploration","488ff7b4":"## Data preparation","84e443a5":"## Data Modelling","e319eba7":"## Visualization "}}