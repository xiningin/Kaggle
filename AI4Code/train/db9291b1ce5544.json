{"cell_type":{"9034a8c8":"code","335d5de5":"code","864a7c8d":"code","15d16e81":"code","f8dc8a6e":"code","af35f38b":"code","da31c064":"code","501adfb8":"code","ee2925f0":"code","a30bcf66":"code","c01900cf":"code","5b2d201f":"code","df4b6780":"code","b819ce80":"code","5f8c669e":"code","bf9f8637":"code","e6e40247":"code","875aa32b":"code","7a0b6465":"code","018cc7c3":"code","bdc064ad":"code","114948cd":"code","2d05c622":"code","976ae0f5":"code","7bf4f251":"code","bb3b598e":"code","00f348a6":"code","3774da7b":"code","a40b6470":"code","94d2f2b2":"code","16fc0ca0":"code","793f044a":"code","c38e61ce":"code","0179ec34":"code","945ad428":"code","6289489c":"code","bfcdc1cf":"code","5a063f75":"code","79036b72":"code","4e3dfb45":"code","c6ff62fa":"code","3b1b1a9a":"code","3387cae0":"code","c1f4e1a2":"code","cf39881a":"code","4e8ad1f8":"code","dff957d7":"code","b534a1fd":"code","88b824df":"code","d02b2490":"code","e335e63a":"code","f984fb8e":"code","3e388655":"code","3db7b29a":"code","394b81e7":"code","7bf909a3":"code","36f76be0":"code","7840a2ea":"code","91307730":"code","37fcb9ee":"code","1b58b8a3":"code","10a5078f":"code","a3cffeb8":"code","c1b33117":"code","ca8df0bb":"code","8c0fce24":"code","5e55102e":"code","11cffae5":"code","20c4d5f6":"code","8a4832e8":"code","bcd3e294":"code","eace832b":"code","cf47d95c":"code","3104f328":"code","633a4400":"code","103af65b":"markdown","36371eb6":"markdown","5690ff47":"markdown","5d198eee":"markdown","12d3f1c4":"markdown"},"source":{"9034a8c8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.options.display.max_columns = None\npd.options.display.max_rows = None","335d5de5":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")","864a7c8d":"train.head()","15d16e81":"train.tail()","f8dc8a6e":"train.describe().T","af35f38b":"with open(\"..\/input\/house-prices-advanced-regression-techniques\/data_description.txt\", 'r') as info:\n    info = info.read()\nprint(info)","da31c064":"train.shape","501adfb8":"train.isna().sum()","ee2925f0":"for i in train.columns:\n    print(i,\" : distinct_value\")\n    print(train[i].nunique(), \":No of unique values\")\n    print(train[i].unique())\n    print(\"-\"*30)\n    print(\"\")","a30bcf66":"train.corr()['SalePrice']","c01900cf":"plt.figure(figsize=(12,8))\nsns.heatmap(train.corr())","5b2d201f":" def fillna(df):\n        col = ['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1',\n       'BsmtFinType2','FireplaceQu','GarageFinish','GarageType','GarageQual','GarageCond']\n\n        df['GarageYrBlt'] = df['GarageYrBlt'].fillna(df['YearBuilt'])\n        df['Electrical'] = df['Electrical'].fillna('Mix')\n        df['MasVnrType'] = df['MasVnrType'].fillna('None')\n        df['LotFrontage'] = df['LotFrontage'].fillna(0)\n        df['MasVnrArea'] = df['MasVnrArea'].fillna(0)\n        for i in col:\n            df[i] = df[i].fillna(\"NA\")","df4b6780":"train.info()","b819ce80":"train.head()","5f8c669e":"train['3SsnPorch'].hist()","bf9f8637":"train['3SsnPorch'].value_counts()","e6e40247":"train['LotArea'].hist()","875aa32b":"train['LotArea'].value_counts()","7a0b6465":"train['PoolArea'].hist()","018cc7c3":"train['PoolArea'].value_counts()","bdc064ad":"train['MiscVal'].hist()","114948cd":"train['MiscVal'].value_counts()","2d05c622":"col = ['Heating','RoofMatl','Condition2','Street','Utilities']\nfor i in col:\n    print(train[i].value_counts())\n    print(\"-\"*30)\n    print(\"\")","976ae0f5":"def col_drop(df):\n    df.drop(['Id','Alley','PoolQC','Fence','MiscFeature','3SsnPorch','LotArea',\n             'PoolArea','MiscVal','Heating','RoofMatl','Condition2','Street','Utilities'], \n            axis=1, inplace=True)","7bf4f251":"sns.lineplot(x=train['YearBuilt'], y=train['SalePrice'])","bb3b598e":"train[(train['YearBuilt'] <= 1900)]","00f348a6":"def remove_yearbuild_1900(df):\n    df.drop(df[df['YearBuilt'] <= 1900].index, inplace=True)","3774da7b":"train.shape","a40b6470":"num_col = train.select_dtypes(exclude='object')","94d2f2b2":"num_col.head()","16fc0ca0":"col = ['BsmtFinSF1','BsmtFinSF2','BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF','BsmtFullBath', 'FullBath', 'HalfBath']\n\nnum_df = train[col]\n\nnum_df.head()","793f044a":"num_df['Total'] = num_df['BsmtFinSF1'] + num_df['BsmtFinSF2'] + num_df['BsmtUnfSF']\n\n(num_df['Total']==num_df['TotalBsmtSF']).sum()","c38e61ce":" def new_col(df):\n        col = ['BsmtFinSF1','BsmtFinSF2','BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF','BsmtFullBath', 'FullBath', 'HalfBath']\n\n        df['TotalSF'] = df['TotalBsmtSF'] + df['1stFlrSF'] + df['2ndFlrSF']\n\n        df['TotalBath'] = df['BsmtFullBath'] + df['FullBath'] + df['HalfBath']\n\n        df.drop(col , axis=1, inplace=True)","0179ec34":"def tranform_date(df):\n    #Identifies the type of dwelling involved in the sale.\n    df['MSSubClass'] = df['MSSubClass'].apply(str)\n\n\n    #Year and month sold are transformed into categorical features.\n    df['YrSold'] = df['YrSold'].astype(str)\n    df['MoSold'] = df['MoSold'].astype(str)","945ad428":"def data_preprocessing(df):\n    fillna(df)\n    col_drop(df)\n    #remove_yearbuild_1900(df)\n    new_col(df)\n    tranform_date(df)","6289489c":"data_preprocessing(train)","bfcdc1cf":"train.head()","5a063f75":"cate_col = train.select_dtypes(include='object').columns.values","79036b72":"cate_col","4e3dfb45":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\nfor i in cate_col:\n    labelencoder.fit(list(train[i].values)) \n    train[i] = labelencoder.transform(list(train[i].values))","c6ff62fa":"train.head()","3b1b1a9a":"train.shape","3387cae0":"X = train.drop(['SalePrice'], axis=1)\ny = train['SalePrice']","c1f4e1a2":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=70)","cf39881a":"x_train.shape, x_test.shape, y_train.shape, y_test.shape","4e8ad1f8":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom xgboost import XGBRegressor","dff957d7":"from sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.model_selection import cross_val_score, cross_val_predict, cross_validate","b534a1fd":"lr = LinearRegression()\ndtr = DecisionTreeRegressor()\nrfr = RandomForestRegressor(n_estimators=200, bootstrap=True, min_samples_leaf=3, min_samples_split=8)\nsvr = SVR()\nxgb = XGBRegressor()","88b824df":"rfr.fit(x_train,y_train)\ndata_rf_best = rfr.score(x_test,y_test)*100\ndata_rf_best","d02b2490":"np.sqrt(mean_squared_error(y_test,rfr.predict(x_test)))","e335e63a":"scores = cross_val_score(rfr,X,y,cv=4)\nprint(\"Accuracy: %0.2f (+\/- %0.2f)\" % (scores.mean(), scores.std() * 2))","f984fb8e":"sns.regplot(rfr.predict(x_test),y_test,data=train,color='firebrick')","3e388655":"lr.fit(x_train,y_train)\ndata_lg = lr.score(x_test,y_test)*100\ndata_lg","3db7b29a":"np.sqrt(mean_squared_error(y_test,lr.predict(x_test)))","394b81e7":"scores = cross_val_score(lr,X,y,cv=4)\nprint(\"Accuracy: %0.2f (+\/- %0.2f)\" % (scores.mean(), scores.std() * 2))","7bf909a3":"sns.regplot(lr.predict(x_test),y_test,data=train,color='darkblue')","36f76be0":"dtr.fit(x_train,y_train)\ndata_dtr = dtr.score(x_test,y_test)*100\nmse=mean_squared_error(y_test,dtr.predict(x_test),squared=False)\ndtr_score = (mse)\ndtr_score,data_dtr","7840a2ea":"scores = cross_val_score(dtr,X,y,cv=4)\nprint(\"Accuracy: %0.2f (+\/- %0.2f)\" % (scores.mean(), scores.std() * 2))","91307730":"sns.regplot(dtr.predict(x_test),y_test,data=train,color='green')","37fcb9ee":"data_svm=SVR(kernel='linear',C=3)\ndata_svm.fit(x_train,y_train)\n\ndata_svm_ = data_svm.score(x_test,y_test)*100\nsvm_score=np.sqrt(mean_squared_error(y_test,data_svm.predict(x_test)))\nprint(data_svm_,svm_score)","1b58b8a3":"sns.regplot(data_svm.predict(x_test),y_test,data=train,color='blue')","10a5078f":"xgb.fit(x_train,y_train)\ndf_xgb = xgb.score(x_test,y_test)*100\nxgb_score=np.sqrt(mean_squared_error(y_test,xgb.predict(x_test)))\nprint(df_xgb, xgb_score)","a3cffeb8":"sns.regplot(xgb.predict(x_test),y_test,data=train,color='m')","c1b33117":"xgb.fit(X,y)","ca8df0bb":"test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","8c0fce24":"test.shape","5e55102e":"test_copy = test['Id']","11cffae5":"data_preprocessing(test)","20c4d5f6":"test.head()","8a4832e8":"cat_col = test.select_dtypes(include='object').columns.values\nfor i in cat_col:\n    labelencoder.fit(list(test[i].values)) \n    test[i] = labelencoder.transform(list(test[i].values))","bcd3e294":"test['SalePrice'] = xgb.predict(test)","eace832b":"saleprice = test['SalePrice']","cf47d95c":"output = pd.DataFrame({'Id': test_copy, 'SalePrice':saleprice})","3104f328":"output","633a4400":"output.to_csv(\"Submission.csv\")","103af65b":"RandomForestRegressor","36371eb6":"Linear Regressor","5690ff47":"Decision Tree Regressor","5d198eee":"XGB Boost","12d3f1c4":"Support Vector Machine"}}