{"cell_type":{"59aa6db2":"code","c817adc8":"code","e10d90d7":"code","68fb60a3":"code","52900aae":"code","954cf395":"code","c1b2e5c4":"code","cd5180b2":"code","cd8b533b":"code","49d21818":"code","32d6dc21":"code","36b9be8a":"code","6ddaed7c":"code","9e727689":"code","77961e5a":"code","365314a5":"code","a32bd4b1":"code","1f886a33":"code","c84f8ca8":"code","5772c101":"code","565785c1":"code","1ef5cc40":"code","80129765":"code","52f75293":"markdown","d3890174":"markdown","ff153cf7":"markdown"},"source":{"59aa6db2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow.keras import activations\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.metrics import accuracy_score, mean_squared_error\nfrom sklearn.model_selection import train_test_split\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","c817adc8":"data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","e10d90d7":"data.head()","68fb60a3":"ax = sns.scatterplot(x='Parch', y='Age', hue='Survived', data=data)","52900aae":"submission.head()","954cf395":"print('Mean fare of survived passengers: {}'.format(data[data.Survived == 0].Fare.mean()))\nprint('Mean fare of not survived passengers: {}'.format(data[data.Survived == 1].Fare.mean()))","c1b2e5c4":"ax = sns.scatterplot(x=\"Survived\", y=\"Fare\",\n                sizes=(1, 8), linewidth=0,\n                data=data)","cd5180b2":"ax = sns.catplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data=data, height=6, kind=\"bar\", palette=\"muted\")","cd8b533b":"le = LabelEncoder()\nle.fit(data.Sex)\ndata['Sex'] = pd.Series(le.transform(data['Sex'].values))","49d21818":"data['Age'].fillna(value=data['Age'].mean(), inplace=True)","32d6dc21":"has_age = data[data['Age'].notnull()]","36b9be8a":"sns.set(rc={'figure.figsize':(9.7,6.27)})\nax = sns.heatmap(has_age.corr(), annot=True, linewidths=.25)","6ddaed7c":"regression = LinearRegression().fit(has_age[['Fare', 'Pclass', 'SibSp', 'Parch']], has_age['Age'])\ndata.loc[data.Age.isnull(), 'Age'] = data.apply(lambda x: regression.predict([x[['Fare', 'Pclass', 'SibSp', 'Parch']].values])[0], axis=1)","9e727689":"features_list = ['Sex', 'Fare', 'Pclass', 'SibSp', 'Parch']\nX_train, X_test, y_train, y_test = train_test_split(data[features_list], \n                                                    data['Survived'], test_size=0.25, random_state=42)","77961e5a":"y_train = to_categorical(y_train)","365314a5":"LEARNING_RATE = 0.005\nEPOCHES = 20\nBATCH_SIZE = 32","a32bd4b1":"model = tf.keras.Sequential([\n    tf.keras.layers.Input(len(features_list),),\n    tf.keras.layers.Dense(5, activation=activations.tanh),\n    tf.keras.layers.Dense(4, activation=activations.tanh),\n    tf.keras.layers.Dense(2, activation=activations.tanh),\n    tf.keras.layers.Softmax()\n    ])\n\nmodel.summary()\n\noptimizer_ = tf.keras.optimizers.Adam(learning_rate=LEARNING_RATE)\nloss_ = tf.keras.losses.BinaryCrossentropy()\nmodel.compile(optimizer=optimizer_, loss=loss_)","1f886a33":"history = model.fit(X_train,\n        y_train,\n        batch_size=BATCH_SIZE,\n        epochs=EPOCHES,)","c84f8ca8":"y_pred = np.argmax(model.predict(X_test), axis=1)\nprint('The accuracy of model is {:0.2f}%'.format(accuracy_score(y_test, y_pred)*100))","5772c101":"submission['Age'].fillna(value=data['Age'].mean(), inplace=True)\nsubmission['Sex'] = pd.Series(le.transform(submission['Sex'].values))","565785c1":"results = model.predict(submission[features_list])\nresults[:5]","1ef5cc40":"y_pred = np.argmax(results, axis=1)\ny_pred","80129765":"data = {'PassengerId': submission['PassengerId'], 'Survived': y_pred}\nsubmit = pd.DataFrame(data)\nsubmit.to_csv('submit.csv', index=False)","52f75293":"### Hyperparameters","d3890174":"We will train a _regression_ in order to estimate the ages according to 4 column of **SibSp**, **Parch**, **Fare** and **Pclass**. We chose these column because they have correlation with the **Age**.","ff153cf7":"### Filling up age null values"}}