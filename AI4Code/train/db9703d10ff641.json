{"cell_type":{"1b5f068c":"code","750b9234":"code","4ad7590e":"code","2496cd21":"code","9a6d59c3":"code","54af20f2":"code","42766559":"code","5a99d54a":"code","09dc6dee":"code","080b05ea":"code","4a2b5843":"code","533b7ed9":"code","14678bd9":"code","9973d588":"markdown","0f1880d9":"markdown","dfdf9e6c":"markdown","3c5d3c0b":"markdown","2e5ebdf1":"markdown","8285a63e":"markdown","cd81f747":"markdown","5123a796":"markdown","ea5f6932":"markdown"},"source":{"1b5f068c":"import pickle\n\nwith open('..\/input\/model-weights\/w_tf.pickle', 'rb') as handle:\n    weight = pickle.load(handle)\nwith open('..\/input\/model-weights\/w_step.pickle', 'rb') as handle:\n    weight2 = pickle.load(handle)\nwith open('..\/input\/model-weights\/w_torch.pickle', 'rb') as handle:\n    PARAM = pickle.load(handle)","750b9234":"w = \"weight= %s\"%weight\n%store w >submissionans.py\nw = \"weight2= %s\"%weight2\n%store w >>submissionans.py\nw = \"PARAM= %s\"%PARAM\n%store w >>submissionans.py","4ad7590e":"w = \"weight = %s\"%weight2\n%store w >submission_step.py","2496cd21":"import bz2\nimport base64\nimport numpy as np\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Flatten, GlobalAveragePooling2D, Dense, Conv2D, Activation, Lambda, Add, BatchNormalization, Input\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.regularizers import l1_l2, l2\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import Action, translate\n\n\ndef TorusConv2D(x, ch, kernel, padding=\"same\", strides=1, weight_decay=2e-3):\n    x = Lambda(lambda x: K.tile(x, n=(1,3,3,1)), \n               output_shape=lambda input_shape: (None, 3*input_shape[1], 3*input_shape[2], input_shape[3]))(x)\n    \n    x = Conv2D(ch, kernel, padding=padding, strides=strides,\n                      kernel_regularizer=l2(weight_decay))(x)\n    \n    x = Lambda(lambda x: x[:,int(x.shape[1]\/3):2*int(x.shape[1]\/3), int(x.shape[2]\/3):2*int(x.shape[2]\/3),:], \n               output_shape=lambda input_shape: (None, int(input_shape[1]\/3), int(input_shape[2]\/3), input_shape[3]))(x)\n    return x\n\ndef conv_bn_relu(x0, ch, kernel, padding=\"same\", strides=1, weight_decay=2e-3, add=False):\n    x = TorusConv2D(x0, ch, kernel, padding=padding, strides=strides,\n                      weight_decay=weight_decay)\n    x = BatchNormalization()(x)\n    x = Activation(\"relu\")(x)\n    if add:\n        x = Add()([x0, x])\n    return x\n\ndef GeeseNet(input_shape=(7, 11, 17), layers=12, filters=32, weight_decay=2e-3):\n    input = Input(input_shape)\n    x = conv_bn_relu(input, filters, 3)\n    \n    for i in range(layers):\n        x = conv_bn_relu(x, filters, 3, add=True)\n    \n    x = GlobalAveragePooling2D()(x)\n    \n    output = Dense(4, activation='softmax', kernel_regularizer=l1_l2(l1=0.0005, l2=0.0005))(x)   \n    model = Model(input, output)\n    \n    return model\n\ndef GeeseNet_step(input_shape=(7, 11, 18), layers=12, filters=32, weight_decay=2e-3):\n    input = Input(input_shape)\n    x = conv_bn_relu(input, filters, 3)\n    \n    for i in range(layers):\n        x = conv_bn_relu(x, filters, 3, add=True)\n    \n    x = Flatten()(x)\n    y = tf.reduce_mean(input, axis=[1, 2])\n\n    z = tf.keras.layers.concatenate([x,y])\n    x = Dense(64, activation='selu')(z)     \n    output = Dense(4, activation='softmax', kernel_regularizer=l1_l2(l1=0.000005, l2=0.000005))(x)   \n    model = Model(input, output)\n   \n    return model\n\ndef centerize(b):\n    dy, dx = np.where(b[0])\n    centerize_y = (np.arange(0,7)-3+dy[0])%7\n    centerize_x = (np.arange(0,11)-5+dx[0])%11\n    \n    b = b[:, centerize_y,:]\n    b = b[:, :,centerize_x]\n    \n    return b\n\ndef make_input(obs,obs_prev):\n    b = np.zeros((17, 7 * 11), dtype=np.float32)\n    for p, pos_list in enumerate(obs['geese']):\n\n        for pos in pos_list[:1]:\n            b[0 + (4 + p - obs['index']) % 4, pos] = 1\n\n        for pos in pos_list[-1:]:\n            b[4 + (4 + p - obs['index']) % 4, pos] = 1\n\n        for pos in pos_list:\n            b[8 + (4 + p - obs['index']) % 4, pos] = 1\n\n    if  obs_prev:\n        for p, pos_list in enumerate(obs_prev['geese']):\n            for pos in pos_list[:1]:\n                b[12 + (4 + p - obs['index']) % 4, pos] = 1\n\n    # food\n    for pos in obs['food']:\n        b[16, pos] = 1\n        \n    b = b.reshape(-1, 7, 11)\n    b = centerize(b)\n    b = np.transpose(b, (1,2,0))\n    return b\n\ndef make_input_step(obs,obs_prev):\n    b = np.zeros((18, 7 * 11), dtype=np.float32)\n    if \"step\" in obs:\n        steps = np.zeros((7 * 11), dtype=np.float32) * (obs['step'] \/ 200)\n        b[17,:] = steps\n    for p, pos_list in enumerate(obs['geese']):\n\n        for pos in pos_list[:1]:\n            b[0 + (4 + p - obs['index']) % 4, pos] = 1\n\n        for pos in pos_list[-1:]:\n            b[4 + (4 + p - obs['index']) % 4, pos] = 1\n\n        for pos in pos_list:\n            b[8 + (4 + p - obs['index']) % 4, pos] = 1\n\n    if  obs_prev:\n        for p, pos_list in enumerate(obs_prev['geese']):\n            for pos in pos_list[:1]:\n                b[12 + (4 + p - obs['index']) % 4, pos] = 1\n\n    # food\n    for pos in obs['food']:\n        b[16, pos] = 1\n        \n    b = b.reshape(-1, 7, 11)\n    b = centerize(b)\n    b = np.transpose(b, (1,2,0))\n    return b\n\n\nmodel = GeeseNet(input_shape=(7, 11, 17), layers=12, filters=32, weight_decay=1e-7)\nmodel.set_weights(pickle.loads(bz2.decompress(base64.b64decode(weight))))\n\nmodel_step = GeeseNet_step(input_shape=(7, 11, 18), layers=12, filters=32, weight_decay=1e-7)\nmodel_step.set_weights(pickle.loads(bz2.decompress(base64.b64decode(weight2))))\n\n","9a6d59c3":"def getValidMoves(obs, last_obs, index):   \n        geese = obs.geese\n        pos = geese[index][0]\n        obstacles = {position for goose in geese for position in goose[:-1]}\n        if last_obs is not None: obstacles.add(last_obs.geese[index][0])\n        \n        valid_moves = [\n            translate(pos, action, 11, 7) not in obstacles\n            for action in [Action.NORTH, Action.SOUTH, Action.WEST, Action.EAST]\n        ]\n    \n        return valid_moves\n\n\nACTIONS = ['NORTH', 'SOUTH', 'WEST', 'EAST']\n","54af20f2":"class TFAgent:\n    def __init__(self, net, stochastic = False):\n        self.prev_obs = None\n        self.net = net\n        self.stochastic = stochastic\n\n    def __call__(self, observation, configuration):\n\n        if observation['step'] == 0:\n            self.prev_obs = None\n            valids = 1\n        else:\n            valids = getValidMoves(observation, self.prev_obs, observation.index)\n        state = make_input(observation, self.prev_obs)\n\n        state = tf.expand_dims(state, 0)\n        logits = self.net(state, training=False)\n        logits = tf.squeeze(logits).numpy() * valids + 1e-14\n\n        probs = logits \/ np.sum(logits)\n        self.prev_obs =  observation\n        \n        if self.stochastic:\n            return probs\n\n        else:\n            return ACTIONS[np.argmax(probs)]","42766559":"class TFAgent_step:\n    def __init__(self, net, stochastic = False):\n        self.prev_obs = None\n        self.net = net\n        self.stochastic = stochastic\n\n    def __call__(self, observation, configuration):\n\n        if observation['step'] == 0:\n            self.prev_obs = None\n            valids = 1\n        else:\n            valids = getValidMoves(observation, self.prev_obs, observation.index)\n        state = make_input_step(observation, self.prev_obs)\n\n        state = tf.expand_dims(state, 0)\n        logits = self.net(state, training=False)\n        logits = tf.squeeze(logits).numpy() * valids + 1e-14\n\n        probs = logits \/ np.sum(logits)\n        self.prev_obs =  observation\n        \n        if self.stochastic:\n            return probs\n\n        else:\n            return ACTIONS[np.argmax(probs)]","5a99d54a":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass TorusConv2d_t(nn.Module):\n    def __init__(self, input_dim, output_dim, kernel_size, bn):\n        super().__init__()\n        self.edge_size = (kernel_size[0] \/\/ 2, kernel_size[1] \/\/ 2)\n        self.conv = nn.Conv2d(input_dim, output_dim, kernel_size=kernel_size)\n        self.bn = nn.BatchNorm2d(output_dim) if bn else None\n\n    def forward(self, x):\n        h = torch.cat([x[:,:,:,-self.edge_size[1]:], x, x[:,:,:,:self.edge_size[1]]], dim=3)\n        h = torch.cat([h[:,:,-self.edge_size[0]:], h, h[:,:,:self.edge_size[0]]], dim=2)\n        h = self.conv(h)\n        h = self.bn(h) if self.bn is not None else h\n        return h\n\n\nclass GeeseNet_t(nn.Module):\n    def __init__(self):\n        super().__init__()\n        layers, filters = 12, 32\n        self.conv0 = TorusConv2d_t(17, filters, (3, 3), True)\n        self.blocks = nn.ModuleList([TorusConv2d_t(filters, filters, (3, 3), True) for _ in range(layers)])\n        self.head_p = nn.Linear(filters, 4, bias=False)\n        self.head_v = nn.Linear(filters * 2, 1, bias=False)\n\n    def forward(self, x):\n        h = F.relu_(self.conv0(x))\n        for block in self.blocks:\n            h = F.relu_(h + block(h))\n        h_head = (h * x[:,:1]).view(h.size(0), h.size(1), -1).sum(-1)\n        h_avg = h.view(h.size(0), h.size(1), -1).mean(-1)\n        p = self.head_p(h_head)\n        v = torch.tanh(self.head_v(torch.cat([h_head, h_avg], 1)))\n\n        return {'policy': p, 'value': v}\n\ndef make_input_t(obs, obs_prev):\n    b = np.zeros((17, 7 * 11), dtype=np.float32)\n\n\n    for p, pos_list in enumerate(obs['geese']):\n\n        for pos in pos_list[:1]:\n            b[0 + (p - obs['index']) % 4, pos] = 1\n\n        for pos in pos_list[-1:]:\n            b[4 + (p - obs['index']) % 4, pos] = 1\n\n        for pos in pos_list:\n            b[8 + (p - obs['index']) % 4, pos] = 1\n            \n\n    if obs_prev:\n        for p, pos_list in enumerate(obs_prev['geese']):\n            for pos in pos_list[:1]:\n                b[12 + (p - obs['index']) % 4, pos] = 1\n\n    for pos in obs['food']:\n        b[16, pos] = 1\n\n    return b.reshape(-1, 7, 11)\n\n\nstate_dict = pickle.loads(bz2.decompress(base64.b64decode(PARAM)))\nmodel_t = GeeseNet_t()\nmodel_t.load_state_dict(state_dict)\nmodel_t.eval()\n\nclass TorchAgent:\n    def __init__(self, net, stochastic = False):\n        self.prev_obs = None\n        self.net = net\n        self.stochastic = stochastic\n\n    def __call__(self, observation, configuration):\n\n        if observation['step'] == 0:\n            self.prev_obs = None\n            valids = 1\n        else:\n            valids = getValidMoves(observation, self.prev_obs, observation.index)\n        x = make_input_t(observation, self.prev_obs)\n        with torch.no_grad():\n            xt = torch.from_numpy(x).unsqueeze(0)\n            o = self.net(xt)\n        logits = o['policy'].squeeze(0).detach().numpy() \n\n\n        probs = np.exp(logits) \/ np.sum(np.exp(logits))\n        probs = probs * valids + 1e-14        \n        probs = probs \/ np.sum(probs)\n        self.prev_obs =  observation\n        \n        if self.stochastic:\n            return probs\n\n        else:\n            return ACTIONS[np.argmax(probs)]","09dc6dee":"class Geesamble_Agent:\n    def __init__(self):\n        self.prev_obs = None\n        self.agents = [TFAgent(model, True), TFAgent_step(model_step, True), TorchAgent(model_t, True)]\n        self.w = np.array([[0.34], [0.33], [0.33]])\n    def __call__(self, observation, configuration):\n\n        if observation['step'] == 0:\n            self.prev_obs = None\n            valids = 1\n        else:\n            valids = getValidMoves(observation, self.prev_obs, observation.index)\n\n        logits = [ag(observation, None) for ag in self.agents]\n#         print(logits)\n        probs = np.array(logits) * self.w\n#         print(probs)\n        probs = np.sum(probs, axis = 0)\n#         print(probs)\n        self.prev_obs =  observation\n        \n        return ACTIONS[np.argmax(probs)]\n    \n    ","080b05ea":"%%writefile -a submissionans.py\nimport pickle\nimport bz2\nimport base64\nimport numpy as np\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Flatten, GlobalAveragePooling2D, Dense, Conv2D, Activation, Lambda, Add, BatchNormalization, Input\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.regularizers import l1_l2, l2\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import Action, translate\n\n\n\ndef TorusConv2D(x, ch, kernel, padding=\"same\", strides=1, weight_decay=2e-3):\n    x = Lambda(lambda x: K.tile(x, n=(1,3,3,1)), \n               output_shape=lambda input_shape: (None, 3*input_shape[1], 3*input_shape[2], input_shape[3]))(x)\n    \n    x = Conv2D(ch, kernel, padding=padding, strides=strides,\n                      kernel_regularizer=l2(weight_decay))(x)\n    \n    x = Lambda(lambda x: x[:,int(x.shape[1]\/3):2*int(x.shape[1]\/3), int(x.shape[2]\/3):2*int(x.shape[2]\/3),:], \n               output_shape=lambda input_shape: (None, int(input_shape[1]\/3), int(input_shape[2]\/3), input_shape[3]))(x)\n    return x\n\ndef conv_bn_relu(x0, ch, kernel, padding=\"same\", strides=1, weight_decay=2e-3, add=False):\n    x = TorusConv2D(x0, ch, kernel, padding=padding, strides=strides,\n                      weight_decay=weight_decay)\n    x = BatchNormalization()(x)\n    x = Activation(\"relu\")(x)\n    if add:\n        x = Add()([x0, x])\n    return x\n\ndef GeeseNet(input_shape=(7, 11, 17), layers=12, filters=32, weight_decay=2e-3):\n    input = Input(input_shape)\n    x = conv_bn_relu(input, filters, 3)\n    \n    for i in range(layers):\n        x = conv_bn_relu(x, filters, 3, add=True)\n    \n    x = GlobalAveragePooling2D()(x)\n    \n    output = Dense(4, activation='softmax', kernel_regularizer=l1_l2(l1=0.0005, l2=0.0005))(x)   \n    model = Model(input, output)\n    \n    return model\n\ndef GeeseNet_step(input_shape=(7, 11, 18), layers=12, filters=32, weight_decay=2e-3):\n    input = Input(input_shape)\n    x = conv_bn_relu(input, filters, 3)\n    \n    for i in range(layers):\n        x = conv_bn_relu(x, filters, 3, add=True)\n    \n    x = Flatten()(x)\n    y = tf.reduce_mean(input, axis=[1, 2])\n\n    z = tf.keras.layers.concatenate([x,y])\n    x = Dense(64, activation='selu')(z)     \n    output = Dense(4, activation='softmax', kernel_regularizer=l1_l2(l1=0.000005, l2=0.000005))(x)   \n    model = Model(input, output)\n   \n    return model\n\ndef centerize(b):\n    dy, dx = np.where(b[0])\n    centerize_y = (np.arange(0,7)-3+dy[0])%7\n    centerize_x = (np.arange(0,11)-5+dx[0])%11\n    \n    b = b[:, centerize_y,:]\n    b = b[:, :,centerize_x]\n    \n    return b\n\ndef make_input(obs,obs_prev):\n    b = np.zeros((17, 7 * 11), dtype=np.float32)\n    for p, pos_list in enumerate(obs['geese']):\n\n        for pos in pos_list[:1]:\n            b[0 + (4 + p - obs['index']) % 4, pos] = 1\n\n        for pos in pos_list[-1:]:\n            b[4 + (4 + p - obs['index']) % 4, pos] = 1\n\n        for pos in pos_list:\n            b[8 + (4 + p - obs['index']) % 4, pos] = 1\n\n    if  obs_prev:\n        for p, pos_list in enumerate(obs_prev['geese']):\n            for pos in pos_list[:1]:\n                b[12 + (4 + p - obs['index']) % 4, pos] = 1\n\n    # food\n    for pos in obs['food']:\n        b[16, pos] = 1\n        \n    b = b.reshape(-1, 7, 11)\n    b = centerize(b)\n    b = np.transpose(b, (1,2,0))\n    return b\n\ndef make_input_step(obs,obs_prev):\n    b = np.zeros((18, 7 * 11), dtype=np.float32)\n    if \"step\" in obs:\n        steps = np.zeros((7 * 11), dtype=np.float32) * (obs['step'] \/ 200)\n        b[17,:] = steps\n    for p, pos_list in enumerate(obs['geese']):\n\n        for pos in pos_list[:1]:\n            b[0 + (4 + p - obs['index']) % 4, pos] = 1\n\n        for pos in pos_list[-1:]:\n            b[4 + (4 + p - obs['index']) % 4, pos] = 1\n\n        for pos in pos_list:\n            b[8 + (4 + p - obs['index']) % 4, pos] = 1\n\n    if  obs_prev:\n        for p, pos_list in enumerate(obs_prev['geese']):\n            for pos in pos_list[:1]:\n                b[12 + (4 + p - obs['index']) % 4, pos] = 1\n\n    # food\n    for pos in obs['food']:\n        b[16, pos] = 1\n        \n    b = b.reshape(-1, 7, 11)\n    b = centerize(b)\n    b = np.transpose(b, (1,2,0))\n    return b\n\n\nmodel = GeeseNet(input_shape=(7, 11, 17), layers=12, filters=32, weight_decay=1e-7)\nmodel.set_weights(pickle.loads(bz2.decompress(base64.b64decode(weight))))\n\nmodel_step = GeeseNet_step(input_shape=(7, 11, 18), layers=12, filters=32, weight_decay=1e-7)\nmodel_step.set_weights(pickle.loads(bz2.decompress(base64.b64decode(weight2))))\n\ndef getValidMoves(obs, last_obs, index):   \n        geese = obs.geese\n        pos = geese[index][0]\n        obstacles = {position for goose in geese for position in goose[:-1]}\n        if last_obs is not None: obstacles.add(last_obs.geese[index][0])\n        \n        valid_moves = [\n            translate(pos, action, 11, 7) not in obstacles\n            for action in [Action.NORTH, Action.SOUTH, Action.WEST, Action.EAST]\n        ]\n    \n        return valid_moves\n\n\n\nACTIONS = ['NORTH', 'SOUTH', 'WEST', 'EAST']\nclass TFAgent:\n    def __init__(self, net, stochastic = False):\n        self.prev_obs = None\n        self.net = net\n        self.stochastic = stochastic\n\n    def __call__(self, observation, configuration):\n\n        if observation['step'] == 0:\n            self.prev_obs = None\n            valids = 1\n        else:\n            valids = getValidMoves(observation, self.prev_obs, observation.index)\n        state = make_input(observation, self.prev_obs)\n\n        state = tf.expand_dims(state, 0)\n        logits = self.net(state, training=False)\n        logits = tf.squeeze(logits).numpy() * valids + 1e-14\n\n        probs = logits \/ np.sum(logits)\n        self.prev_obs =  observation\n        \n        if self.stochastic:\n            return probs\n\n        else:\n            return ACTIONS[np.argmax(probs)]\nclass TFAgent_step:\n    def __init__(self, net, stochastic = False):\n        self.prev_obs = None\n        self.net = net\n        self.stochastic = stochastic\n\n    def __call__(self, observation, configuration):\n\n        if observation['step'] == 0:\n            self.prev_obs = None\n            valids = 1\n        else:\n            valids = getValidMoves(observation, self.prev_obs, observation.index)\n        state = make_input_step(observation, self.prev_obs)\n\n        state = tf.expand_dims(state, 0)\n        logits = self.net(state, training=False)\n        logits = tf.squeeze(logits).numpy() * valids + 1e-14\n\n        probs = logits \/ np.sum(logits)\n        self.prev_obs =  observation\n        \n        if self.stochastic:\n            return probs\n\n        else:\n            return ACTIONS[np.argmax(probs)]\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass TorusConv2d_t(nn.Module):\n    def __init__(self, input_dim, output_dim, kernel_size, bn):\n        super().__init__()\n        self.edge_size = (kernel_size[0] \/\/ 2, kernel_size[1] \/\/ 2)\n        self.conv = nn.Conv2d(input_dim, output_dim, kernel_size=kernel_size)\n        self.bn = nn.BatchNorm2d(output_dim) if bn else None\n\n    def forward(self, x):\n        h = torch.cat([x[:,:,:,-self.edge_size[1]:], x, x[:,:,:,:self.edge_size[1]]], dim=3)\n        h = torch.cat([h[:,:,-self.edge_size[0]:], h, h[:,:,:self.edge_size[0]]], dim=2)\n        h = self.conv(h)\n        h = self.bn(h) if self.bn is not None else h\n        return h\n\n\nclass GeeseNet_t(nn.Module):\n    def __init__(self):\n        super().__init__()\n        layers, filters = 12, 32\n        self.conv0 = TorusConv2d_t(17, filters, (3, 3), True)\n        self.blocks = nn.ModuleList([TorusConv2d_t(filters, filters, (3, 3), True) for _ in range(layers)])\n        self.head_p = nn.Linear(filters, 4, bias=False)\n        self.head_v = nn.Linear(filters * 2, 1, bias=False)\n\n    def forward(self, x):\n        h = F.relu_(self.conv0(x))\n        for block in self.blocks:\n            h = F.relu_(h + block(h))\n        h_head = (h * x[:,:1]).view(h.size(0), h.size(1), -1).sum(-1)\n        h_avg = h.view(h.size(0), h.size(1), -1).mean(-1)\n        p = self.head_p(h_head)\n        v = torch.tanh(self.head_v(torch.cat([h_head, h_avg], 1)))\n\n        return {'policy': p, 'value': v}\n\ndef make_input_t(obs, obs_prev):\n    b = np.zeros((17, 7 * 11), dtype=np.float32)\n\n\n    for p, pos_list in enumerate(obs['geese']):\n\n        for pos in pos_list[:1]:\n            b[0 + (4 + p - obs['index']) % 4, pos] = 1\n\n        for pos in pos_list[-1:]:\n            b[4 + (4 + p - obs['index']) % 4, pos] = 1\n\n        for pos in pos_list:\n            b[8 + (4 + p - obs['index']) % 4, pos] = 1\n            \n\n    if obs_prev:\n        for p, pos_list in enumerate(obs_prev['geese']):\n            for pos in pos_list[:1]:\n                b[12 + (4 + p - obs['index']) % 4, pos] = 1\n\n    for pos in obs['food']:\n        b[16, pos] = 1\n\n    return b.reshape(-1, 7, 11)\n\n\nstate_dict = pickle.loads(bz2.decompress(base64.b64decode(PARAM)))\nmodel_t = GeeseNet_t()\nmodel_t.load_state_dict(state_dict)\nmodel_t.eval()\n\nclass TorchAgent:\n    def __init__(self, net, stochastic = False):\n        self.prev_obs = None\n        self.net = net\n        self.stochastic = stochastic\n\n    def __call__(self, observation, configuration):\n\n        if observation['step'] == 0:\n            self.prev_obs = None\n            valids = 1\n        else:\n            valids = getValidMoves(observation, self.prev_obs, observation.index)\n        x = make_input_t(observation, self.prev_obs)\n        with torch.no_grad():\n            xt = torch.from_numpy(x).unsqueeze(0)\n            o = self.net(xt)\n        logits = o['policy'].squeeze(0).detach().numpy() \n\n\n        probs = np.exp(logits) \/ np.sum(np.exp(logits))\n        probs = probs * valids + 1e-14        \n        probs = probs \/ np.sum(probs)\n        self.prev_obs =  observation\n        \n        if self.stochastic:\n            return probs\n\n        else:\n            return ACTIONS[np.argmax(probs)]\n\nclass Geesamble_Agent:\n    def __init__(self):\n        self.prev_obs = None\n        self.agents = [TFAgent(model, True), TFAgent_step(model_step, True), TorchAgent(model_t, True)]\n        self.w = np.array([[0.34], [0.33], [0.33]])\n    def __call__(self, observation, configuration):\n\n        if observation['step'] == 0:\n            self.prev_obs = None\n            valids = 1\n        else:\n            valids = getValidMoves(observation, self.prev_obs, observation.index)\n\n        logits = [ag(observation, None) for ag in self.agents]\n#         print(logits)\n        probs = np.array(logits) * self.w\n#         print(probs)\n        probs = np.sum(probs, axis = 0)\n#         print(probs)\n        self.prev_obs =  observation\n        \n        return ACTIONS[np.argmax(probs)]\n\nagent_ans = Geesamble_Agent()\ndef agent(obs_dict, config_dict):\n\n    return agent_ans(obs_dict, config_dict)","4a2b5843":"%%writefile -a submission_step.py\nimport pickle\nimport bz2\nimport base64\nimport numpy as np\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Flatten, Dense, Conv2D, Activation, Lambda, Add, BatchNormalization, Input\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.regularizers import l1_l2, l2\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import Action, translate\n\n\n# Neural Network for Hungry Geese\ndef TorusConv2D(x, ch, kernel, padding=\"same\", strides=1, weight_decay=2e-3):\n    x = Lambda(lambda x: K.tile(x, n=(1,3,3,1)), \n               output_shape=lambda input_shape: (None, 3*input_shape[1], 3*input_shape[2], input_shape[3]))(x)\n    \n    x = Conv2D(ch, kernel, padding=padding, strides=strides,\n                      kernel_regularizer=l2(weight_decay))(x)\n    \n    x = Lambda(lambda x: x[:,int(x.shape[1]\/3):2*int(x.shape[1]\/3), int(x.shape[2]\/3):2*int(x.shape[2]\/3),:], \n               output_shape=lambda input_shape: (None, int(input_shape[1]\/3), int(input_shape[2]\/3), input_shape[3]))(x)\n    return x\n\ndef conv_bn_relu(x0, ch, kernel, padding=\"same\", strides=1, weight_decay=2e-5, add=False):\n    x = TorusConv2D(x0, ch, kernel, padding=padding, strides=strides,\n                      weight_decay=weight_decay)\n    x = BatchNormalization()(x)\n    x = Activation(\"relu\")(x)\n    if add:\n        x = Add()([x0, x])\n    return x\n\ndef GeeseNet(input_shape=(7, 11, 18), layers=12, filters=32, weight_decay=2e-3):\n    input = Input(input_shape)\n    x = conv_bn_relu(input, filters, 3)\n    \n    for i in range(layers):\n        x = conv_bn_relu(x, filters, 3, add=True)\n    \n    x = Flatten()(x)\n    y = tf.reduce_mean(input, axis=[1, 2])\n\n    z = tf.keras.layers.concatenate([x,y])\n    x = Dense(64, activation='selu')(z)         \n    output = Dense(4, activation='softmax', kernel_regularizer=l1_l2(l1=0.000005, l2=0.000005))(x)   \n    model = Model(input, output)\n    #model.compile(optimizer=RadaBelief(learning_rate=1e-3, epsilon=1e-5), loss='categorical_crossentropy', metrics=['accuracy'])    \n    \n    return model\n\n# Input for Neural Network\ndef centerize(b):\n    dy, dx = np.where(b[0])\n    centerize_y = (np.arange(0,7)-3+dy[0])%7\n    centerize_x = (np.arange(0,11)-5+dx[0])%11\n    \n    b = b[:, centerize_y,:]\n    b = b[:, :,centerize_x]\n    \n    return b\n\ndef make_input(obses):\n    b = np.zeros((18, 7 * 11), dtype=np.float32)\n    obs = obses[-1]\n    if \"step\" in obs:\n        steps = np.zeros((7 * 11), dtype=np.float32) * (obs['step'] \/ 200)\n        b[17,:] = steps\n    for p, pos_list in enumerate(obs['geese']):\n        # head position\n        for pos in pos_list[:1]:\n            b[0 + (4 + p - obs['index']) % 4, pos] = 1\n        # tip position\n        for pos in pos_list[-1:]:\n            b[4 + (4 + p - obs['index']) % 4, pos] = 1\n        # whole position\n        for pos in pos_list:\n            b[8 + (4 + p - obs['index']) % 4, pos] = 1\n            \n    # previous head position\n    if len(obses) > 1:\n        obs_prev = obses[-2]\n        for p, pos_list in enumerate(obs_prev['geese']):\n            for pos in pos_list[:1]:\n                b[12 + (4 + p - obs['index']) % 4, pos] = 1\n\n    # food\n    for pos in obs['food']:\n        b[16, pos] = 1\n        \n    b = b.reshape(-1, 7, 11)\n    b = centerize(b) # Where to place the head is arbiterary dicision.\n\n    return b\n\ndef getValidMoves(obs, last_obs, index):   \n        geese = obs.geese\n        pos = geese[index][0]\n        obstacles = {position for goose in geese for position in goose[:-1]}\n        if last_obs is not None: obstacles.add(last_obs.geese[index][0])\n        \n        valid_moves = [\n            translate(pos, action, 11, 7) not in obstacles\n            for action in [Action.NORTH, Action.SOUTH, Action.WEST, Action.EAST]\n        ]\n    \n        return valid_moves\n\n# Load Keras Model\nmodel = GeeseNet(input_shape=(7, 11, 18), layers=12, filters=32, weight_decay=1e-7)\nmodel.set_weights(pickle.loads(bz2.decompress(base64.b64decode(weight))))\n\nobses = []\n\ndef agent(obs_dict, config_dict):\n    obses.append(obs_dict)\n    if len(obses)<2:\n            obses.append(obs_dict)\n\n    X_test = make_input(obses)\n    X_test = np.transpose(X_test, (1,2,0))\n    X_test = X_test.reshape(-1,7,11,18) # channel last.\n    valids = getValidMoves(obses[-1], obses[-2], obses[-1].index)       \n\n    \n    y_pred = model.predict(X_test) * valids\n \n    \n    actions = ['NORTH', 'SOUTH', 'WEST', 'EAST']\n    return actions[np.argmax(y_pred)]","533b7ed9":"%%time\nfrom tqdm.notebook import tqdm\nfrom kaggle_environments import evaluate\nscores = np.zeros((4))\nag_ens = Geesamble_Agent()\nag_torch1 = TorchAgent(model_t)\nag_tf1 = TFAgent(model)\nag_tf_step = TFAgent_step(model_step)\nfor epoch in tqdm(range(100)):\n    result = evaluate(\"hungry_geese\", [ag_tf1,'submissionans.py','submissionans.py','submissionans.py'])[0]\n    score = np.zeros((4))\n    \n    for i in range(3,0,-1):\n        ind = np.argmax(result)\n        score[ind] += i\n        result[ind] = 0\n    scores = scores + (score -1.5)\nprint(\"results :\", scores)","14678bd9":"from kaggle_environments import make\nenv = make(\"hungry_geese\", debug=True)\n\n\nenv.reset()\nenv.run(['submission_step.py',Geesamble_Agent(),\"submissionans.py\",TFAgent(model)])\nenv.render(mode=\"ipython\", width=600, height=500)","9973d588":"# Testing Geesamble agent","0f1880d9":"# Agent for TF-step model","dfdf9e6c":"# Writing submission","3c5d3c0b":"# Ensemble of Geese agents\n\nThe ensemble consists of:\n\n* [Smart Geese Trained by Reinforcement Learning](https:\/\/www.kaggle.com\/yuricat\/smart-geese-trained-by-reinforcement-learning)\n\n* [Keras Model trained by imitation learning](http:\/\/www.kaggle.com\/richardsmith2\/keras-model-trained-by-imitation-learning)\n\n* my own tiny model trained using [Let's create your agent by supervised learning!](https:\/\/www.kaggle.com\/nejumi\/let-s-create-your-agent-by-supervised-learning)\n\nNotebook includes pipeline for testing the ensemble agent.","2e5ebdf1":"# Import weights from dataset to avoid 1mb limit problem and writing to submission","8285a63e":"# Agent for Torch model","cd81f747":"# TF model functions","5123a796":"# Geesamble Agent for testing\n\nself.w contains weights of each agent in result decision","ea5f6932":"# Agent for TF models"}}