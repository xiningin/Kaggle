{"cell_type":{"3eb20525":"code","87df28f6":"code","f63732a2":"code","f9d4267d":"code","984ad653":"code","99b6b66c":"code","f8bf3400":"code","ac8203c3":"code","85ddf9af":"code","08248561":"code","8c121c69":"code","4482f543":"code","ac0509e6":"code","869c641d":"code","680c1965":"code","32e8a77d":"code","48d2ea28":"code","2ec3a78d":"code","1cb38485":"code","17fafc2a":"markdown","26783a2f":"markdown","303fa4e8":"markdown"},"source":{"3eb20525":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","87df28f6":"import numpy as np\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import accuracy_score\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.tree import DecisionTreeRegressor\n#from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom lightgbm import LGBMClassifier\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import  GridSearchCV\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","f63732a2":"filepath= '\/kaggle\/input\/bike-sharing-demand\/train.csv'\nfilepath1= '\/kaggle\/input\/bike-sharing-demand\/test.csv'\ntestdata= pd.read_csv(filepath1)\ntestdata2=testdata\ntraindata= pd.read_csv(filepath)\ntraindata.head()","f9d4267d":"#We remove the id column in both the training and testing datasets.\ntraindata=traindata.drop('datetime',axis=1)\ntestdata=testdata.drop('datetime',axis=1)\n\n#We also remove the casual and registered columns because they are not present in the test dataset\ntraindata=traindata.drop('casual',axis=1)\ntraindata=traindata.drop('registered',axis=1)","984ad653":"#working with numeric features (They are all numerical features)\nnumeric_features = traindata.select_dtypes(include=[np.number])\nnumeric_features.dtypes","99b6b66c":"#Checking the correlation between each column with the Cover_Type\ncorr = numeric_features.corr()\nprint (corr['count'].sort_values(ascending=False), '\\n')\nprint (corr['count'].sort_values(ascending=False))\n","f8bf3400":"#We see how various features compare with the Cover type\n\ncolumn_names=['temp','atemp','windspeed']                \n\n\nfor i in column_names:\n    plt.scatter(x=traindata[i], y=traindata['count'])\n    plt.ylabel('count')\n    plt.xlabel(i)\n    plt.show()","ac8203c3":"#Lettuce visualize the other columns and see how they relate with counts\n\ncol=['season','holiday','workingday','weather']\nfor i in col:\n    \n    sns.factorplot(x=i,y=\"count\",data=traindata,kind='bar',size=5,aspect=1.5)\n","85ddf9af":"traindata.temp.unique()\nfig,axes=plt.subplots(2,2)\naxes[0,0].hist(x=\"temp\",data=traindata,edgecolor=\"black\",linewidth=2,color='#ff4125')\naxes[0,0].set_title(\"Variation of temp\")\naxes[0,1].hist(x=\"atemp\",data=traindata,edgecolor=\"black\",linewidth=2,color='#ff4125')\naxes[0,1].set_title(\"Variation of atemp\")\naxes[1,0].hist(x=\"windspeed\",data=traindata,edgecolor=\"black\",linewidth=2,color='#ff4125')\naxes[1,0].set_title(\"Variation of windspeed\")\naxes[1,1].hist(x=\"humidity\",data=traindata,edgecolor=\"black\",linewidth=2,color='#ff4125')\naxes[1,1].set_title(\"Variation of humidity\")\nfig.set_size_inches(10,10)","08248561":"#Now we will visualise the remaining features and compare them with the number of rentals\ncolumn_names=['season','holiday','workingday','weather']                \n\nfor i in column_names:\n    feature = traindata.pivot_table(index=i,\n                  values='count')\n    feature.plot(kind='bar', color='blue')\n    plt.xlabel(i)\n    plt.ylabel('counts')\n    plt.xticks(rotation=0)\n    plt.show()","8c121c69":"traindata.temp.unique()\nfig,axes=plt.subplots(2,2)\naxes[0,0].hist(x=\"temp\",data=traindata,edgecolor=\"black\",linewidth=2,color='#ff4125')\naxes[0,0].set_title(\"Variation of temp\")\naxes[0,1].hist(x=\"atemp\",data=traindata,edgecolor=\"black\",linewidth=2,color='#ff4125')\naxes[0,1].set_title(\"Variation of atemp\")\naxes[1,0].hist(x=\"windspeed\",data=traindata,edgecolor=\"black\",linewidth=2,color='#ff4125')\naxes[1,0].set_title(\"Variation of windspeed\")\naxes[1,1].hist(x=\"humidity\",data=traindata,edgecolor=\"black\",linewidth=2,color='#ff4125')\naxes[1,1].set_title(\"Variation of humidity\")\nfig.set_size_inches(10,10)","4482f543":"#Split the data into train and test\ny=traindata['count']\nx=traindata.drop('count',axis=1)\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.70,test_size=0.30, random_state=0)","ac0509e6":"\n#Linear Regression\nlinearRegressor = LinearRegression()\nlinearRegressor.fit(x_train, y_train)\ny_predicted = linearRegressor.predict(x_test)\nmse = mean_squared_error(y_test, y_predicted)\nr = r2_score(y_test, y_predicted)\nmae = mean_absolute_error(y_test,y_predicted)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)","869c641d":"# Decision Tree - CART\nregressor = DecisionTreeRegressor(random_state = 0)\nregressor.fit(x_train, y_train)\ny_predicted_d = regressor.predict(x_test)\nmse = mean_squared_error(y_test, y_predicted_d)\nr = r2_score(y_test, y_predicted_d)\nmae = mean_absolute_error(y_test,y_predicted_d)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)","680c1965":"#Polynomial Regression\npolynomial_features= PolynomialFeatures(degree=2)\nx_poly = polynomial_features.fit_transform(x_train)\nx_poly_test = polynomial_features.fit_transform(x_test)\nmodel = LinearRegression()\nmodel.fit(x_poly, y_train)\ny_predicted_p = model.predict(x_poly_test)\nmse = mean_squared_error(y_test, y_predicted_p)\nr = r2_score(y_test, y_predicted_p)\nmae = mean_absolute_error(y_test,y_predicted_p)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)","32e8a77d":"#for random forest regresion.  (tuning)\nno_of_test=[500]\nparams_dict={'n_estimators':no_of_test,'n_jobs':[-1],'max_features':[\"auto\",'sqrt','log2']}\nclf_rf=GridSearchCV(estimator=RandomForestRegressor(),param_grid=params_dict,scoring='neg_mean_squared_log_error')\nclf_rf.fit(x_train,y_train)\npred=clf_rf.predict(x_test)\nmse = mean_squared_error(y_test, pred)\nr = r2_score(y_test, pred)\nmae = mean_absolute_error(y_test,pred)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)","48d2ea28":"# for KNN  (tuning)\n\nn_neighbors=[]\nfor i in range (0,50,5):\n    if(i!=0):\n        n_neighbors.append(i)\nparams_dict={'n_neighbors':n_neighbors,'n_jobs':[-1]}\nclf_knn=GridSearchCV(estimator=KNeighborsRegressor(),param_grid=params_dict,scoring='neg_mean_squared_log_error')\nclf_knn.fit(x_train,y_train)\npred=clf_knn.predict(x_test)\nmse = mean_squared_error(y_test, pred)\nr = r2_score(y_test, pred)\nmae = mean_absolute_error(y_test,pred)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)","2ec3a78d":"# Thus we can use RandomForest Regresson.\n\nno_of_test=[500]\nparams_dict={'n_estimators':no_of_test,'n_jobs':[-1],'max_features':[\"auto\",'sqrt','log2']}\nclf_rf=GridSearchCV(estimator=RandomForestRegressor(),param_grid=params_dict,scoring='neg_mean_squared_log_error')\nclf_rf.fit(x,y)\nPrediction=clf_rf.predict(testdata)","1cb38485":"predictionlist=Prediction.tolist()\ncounts=testdata2['datetime'].tolist() \noutput=pd.DataFrame(list(zip(counts, predictionlist)),\n              columns=['datetime','count'])\noutput.head()\noutput.to_csv('my_submission(ikeSharingDemand).csv', index=False)","17fafc2a":"****Data Visualization****","26783a2f":"Now we will run a few machine learning techiniques to see which one is the most applicable\n","303fa4e8":"**Finally, we convert the predictions to a csv file for submission.**"}}