{"cell_type":{"d441933f":"code","07da2e0a":"code","133a2cc7":"code","12cb99b8":"code","a4fd5df6":"code","78980ceb":"code","bd048473":"code","918dc3d3":"code","8f007572":"code","8a6f341f":"code","ede21c1c":"code","03522372":"code","c3626d72":"code","0f15598c":"code","a6b1cd0a":"code","8e5e7c5a":"code","3b7d3d4b":"code","332b6332":"code","5b77e361":"code","e669cb39":"code","4a1b2063":"code","5ac14db8":"markdown","91c4fdc9":"markdown","9b324e25":"markdown","e5142509":"markdown","0f883522":"markdown","278b73b2":"markdown","261d9420":"markdown","ce427fc2":"markdown","86538f8e":"markdown","1aa33369":"markdown"},"source":{"d441933f":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('\/kaggle\/input\/top-1000-highest-grossing-movies\/Highest Holywood Grossing Movies.csv',index_col = 'Unnamed: 0')\n\ndf.head()","07da2e0a":"df.shape","133a2cc7":"df.isnull().sum()","12cb99b8":"df.rename(columns={'Domestic Sales (in $)':'Domestic Sales',\n                   'International Sales (in $)':'International Sales',\n                   'World Sales (in $)':'World Sales',\n                   'Release Date':'Release Year'},inplace = True)","a4fd5df6":"df.sort_values(by='World Sales',ascending = False,inplace = True)\ndf.head(10)","78980ceb":"#Examine each title to see if it contains a word like \"(2019) or not.\"\n\nimport re\nx = 0  # Count the number of titles that lack words like \"2003\"\ndef rm_year(val):\n  if re.search('[(0-9)]{6}' ,val):  #regex for words such as \"(2001)\"\n    pass\n  else:\n    global x\n    x = x+1\n  \n  return val\n\n  \ndf['Title'].apply(rm_year)\nprint(x)","bd048473":"#Taking words from titles such as \"2013\" and appending them to the release year columns\n\nimport re\ndef rm_year(val):\n  if re.search('[(0-9)]{6}' ,val):  # regex for words such as \"(2001)\"\n    pos = re.search('[(0-9)]{6}' ,val).start()  \n    return val[pos+1:-1]\n\ndf['Release Year'] = df['Title'].apply(rm_year)","918dc3d3":"#Calculating the amount of money collected based on the year.\n\ndomestic_sales = df.groupby('Release Year')['Domestic Sales'].sum()\nInternational_sales = df.groupby('Release Year')['International Sales'].sum()\nworld_sales = df.groupby('Release Year')['World Sales'].sum()\n\n#Creating New DataFrames for Every Sale\n\ndomestic_sales = pd.DataFrame(list(domestic_sales.items()),columns = ['Year','Sale'])\nInternational_sales = pd.DataFrame(list(International_sales.items()),columns = ['Year','Sale'])\nworld_sales = pd.DataFrame(list(world_sales.items()),columns = ['Year','Sale'])","8f007572":"plt.style.use('ggplot')","8a6f341f":"#Visualizing the total cash collected for each year and sale\n\nplt.figure(figsize=(11, 5))\nplt.plot(domestic_sales['Year'],domestic_sales['Sale'],color = '#00ff15',linestyle = '--',label='Domestic')\nplt.plot(domestic_sales['Year'],International_sales['Sale'],color = '#ff0033',linestyle = '--',label='International')\nplt.plot(domestic_sales['Year'],world_sales['Sale'],color = '#00c3ff',linestyle = '--',label='World')\nplt.xticks(rotation=90)\nplt.xlabel('Year')\nplt.ylabel('Sales (In $)')\nplt.ticklabel_format(style='plain', axis='y')\nplt.title('Sale in Each Year')\nplt.legend()\nplt.show()","ede21c1c":"#eliminating words from titles, such as \"(2019)\" from all titles, because it appears to be too long and takes up too much room.\n\nimport re\ndef rm_year(val):\n  if re.search('[(0-9)]{6}' ,val):\n    pos = re.search('[(0-9)]{6}' ,val).start()\n    return val[:pos]\n\ndf['Title'] = df['Title'].apply(rm_year)","03522372":"#I eliminated some words from this title because it appears to be too long and takes up too much room.\ndf['Title'].replace({'Star Wars: Episode VII - The Force Awakens ':'Star Wars: Episode VII'},inplace = True)\n\nsns.barplot(x='World Sales',y='Title',data = df.head(10),palette='magma')\nplt.ylabel('Movie Name')\nplt.xlabel('Collection (Dollars)')\nplt.title('Top 10 Movies')\nplt.xticks([0,2500000000,2000000000,1500000000,1000000000,500000000], ['0',\"2.5B\",'2B','1.5B','1B','50M'])\nplt.show()","c3626d72":"#The number of times distributors have appeared in the top 100.\nquestion2 = df.head(100)\nquestion2 = question2['Distributor'].value_counts()\nquestion2 = question2.reset_index()\n\n#I eliminated some words from this titles because it appears to be too long and takes up too much room.\n\nquestion2.replace({'Walt Disney Studios Motion Pictures':'Walt Disney',\n                   'Sony Pictures Entertainment (SPE)':'Sony Pictures'},inplace = True)\n\nsns.barplot(x=question2['index'],y=question2['Distributor'],data = question2)\nplt.xticks(rotation=90)\nplt.ylabel('Counts')\nplt.xlabel('Distributors')\nplt.title('The number of times distributors have appeared in the top 100.')\nplt.show()","0f15598c":"#How often do sales occur in each category?\n\n#Creating a new dataframe with only the columns required for visualisation\nnew_df = df.drop(df.columns[[0,1,2,3,7,8,9]],axis = 1)\n\nsns.stripplot(data = new_df,jitter = 0.4,dodge = True,palette='flare')\nplt.xlabel(\"Sale Counts\")\nplt.ylabel(\"Collection ($)\")\nplt.title('Frequency of Sales in each category')\nplt.yticks([2500000000,2000000000,1500000000,1000000000,500000000], [\"2.5B\",'2B','1.5B','1B','50M'])\nplt.show()","a6b1cd0a":"#changing phrases like \"2 hours 30 minutes\" to \"2:30\"\n\ndef rm_letters(val):\n  s = str()\n  for letter in val:\n    if letter in ['0','1','2','3','4','5','6','7','8','9']:\n      s = s+letter\n  if len(str(s)) == 1:  # For words such as \"3 hrs\"\n    s = s+'00'\n  elif len(str(s)) == 2: # For words such as \"3 hrs 9 minutes\"\n    s = s[0]+'0'+s[1]\n  return int(s)\n  \ndf['Movie Runtime'] = df['Movie Runtime'].apply(rm_letters)\ndf['Movie Runtime']","8e5e7c5a":"#Sorting the values based on Movie Runtime\n\nquestion3 = df['Movie Runtime']\nquestion3 = question3.reset_index()\nquestion3.sort_values(by='Movie Runtime',ascending = False,inplace = True)\nquestion3['Movie Runtime'].unique()","3b7d3d4b":"#Creating a dictionary to count the number of values that fall inside certain ranges.Then construct a new dataframe with this dictionary.\n\ndic = {}\ndic['1 hr 00 min - 1 hr 30 min'] = 0\ndic['1 hr 30 min - 1 hr 60 min'] = 0\ndic['2 hr 00 min - 2 hr 30 min'] = 0\ndic['2 hr 30 min - 3 hr 00 min'] = 0\ndic['3 hr 00 min - 3 hr 30 min'] = 0\n\n\n\nfor i in question3['Movie Runtime']:\n  if i > 300 and i <= 330:\n    dic['3 hr 00 min - 3 hr 30 min'] += 1\n  elif i > 230 and i <= 300:\n    dic['2 hr 30 min - 3 hr 00 min'] += 1\n  elif i > 200 and i <= 230:\n    dic['2 hr 00 min - 2 hr 30 min'] += 1\n  elif i > 130 and i <= 200:\n    dic['1 hr 30 min - 1 hr 60 min'] += 1\n  elif i > 100 and i <= 130:\n    dic['1 hr 00 min - 1 hr 30 min'] += 1 \n\n\nrunTimeFreq = pd.DataFrame(list(dic.items()),columns = ['Duration','Count'])\nrunTimeFreq.sort_values(by='Count',ascending = False,inplace = True)","332b6332":"sns.barplot(x=runTimeFreq['Count'],y=runTimeFreq['Duration'],data = runTimeFreq,palette='gnuplot_r')\nplt.title('Frequency of movie runtimes')\nplt.show()","5b77e361":"#I tried several methods to extract the words from the \"Genre\" columns. \n#Nothing else works except this method. I'd appreciate it if anyone could suggest another method.\n\nList = []\ndef sep_values(val):\n  x = str()\n  b1 = True\n  for i in val:\n    if i.isalpha():\n      x += i\n    elif i == \"'\" and b1 == True:\n      b1 = False\n    elif i == \"'\" and b1 == False:\n      b1 = True\n      List.append(x)\n      x = str()\n\n\n\ndf['Genre'].apply(sep_values)\nprint(List[:10])","e669cb39":"from collections import Counter\nFreq = Counter(List)\n\nGenreFreq = pd.DataFrame(list(Freq.items()),columns = ['Genre','Count'])\nGenreFreq.sort_values(by='Count', ascending = False,inplace = True)","4a1b2063":"sns.barplot(x=GenreFreq['Genre'],y=GenreFreq['Count'],data = GenreFreq)\nplt.xticks(rotation=90)\nplt.title('Frequency of movie Genre')\nplt.show()","5ac14db8":"preparing to visualise movie runtimes that have fallen within specified ranges.","91c4fdc9":"# question 3","9b324e25":"#  question 4\n","e5142509":"# Ask Question\n\n1.   What was the total revenue for each year and each category? then use a line plot to visualise them\n2.   What are the top 10 movies based on worldwide collections?\n3.   What is the number of times distributors have appeared in the top 100 based on worldwide collection?\n4.   How often do sales occur in each category?\n5.   How many movie runtime durations have fallen within specified ranges?\n6.   How many films have been produced in each genre?\n\n\n\n","0f883522":"creating a barplot to display the frequency of each genre","278b73b2":"# Question 6","261d9420":"# Question 5","ce427fc2":"# question 2\n","86538f8e":"What are the top 10 movies based on worldwide collections?","1aa33369":"# Question 1"}}