{"cell_type":{"03b659eb":"code","c65c13f1":"code","d314690d":"code","2a425d63":"code","9d793560":"code","b915f295":"code","000039dd":"code","d9620f1d":"code","023698d5":"code","9163c7e1":"code","6942f459":"code","d4977442":"code","dbc2824c":"code","25d2c3e7":"code","a9d47057":"code","bd575fb5":"code","6e5b44d5":"code","4d10d487":"code","a0131714":"code","39393053":"code","7283ec89":"code","239db2c1":"code","4427cdab":"code","b0f837be":"code","dae88d32":"code","53ef1d14":"code","0e6c5926":"code","16ae6cc0":"code","e3f12cf8":"code","30e36f3c":"code","e70afb32":"code","bc87b899":"code","1f2392c8":"code","87e209ef":"code","6da9a288":"code","5a9b56e2":"markdown","6d0df3ab":"markdown","5b927af7":"markdown","7a971d19":"markdown","d796e32e":"markdown","0b8e754e":"markdown","8af8b9c0":"markdown","4ba2826b":"markdown","2d1b1693":"markdown","02c8807c":"markdown","d537581a":"markdown","30b9c19f":"markdown","b29b8fd8":"markdown","a9148ffe":"markdown","097bd9d5":"markdown","2478c630":"markdown","c4c9f047":"markdown","cb62421f":"markdown","6d6f4af9":"markdown","acdc5af5":"markdown","52330d56":"markdown","896a057b":"markdown","e07d6ba4":"markdown","4559d1e5":"markdown","b0714f28":"markdown","73c4a04f":"markdown","f2028eb0":"markdown","e760cfc6":"markdown","67d40750":"markdown"},"source":{"03b659eb":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#Plotly Libraris\nimport plotly.express as px\nimport plotly.graph_objects as go\n#import plotly.figure_factory as ff\n#from plotly.colors import n_colors\nfrom plotly.subplots import make_subplots\n# Minmax scaler\nfrom sklearn.preprocessing import MinMaxScaler\n\n#itertools\nimport itertools\n\n#dataframe display settings\npd.set_option('display.max_columns', 5000000)\npd.set_option('display.max_rows', 50000000)\n\n#to suppress un-necessary warnings\nimport warnings  \nwarnings.filterwarnings('ignore')\n\n\nimport xgboost as xgb\n\n#Importing SKlearn models\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import precision_score, recall_score, accuracy_score, r2_score\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.linear_model import LinearRegression  \nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn import linear_model\n\n#Package to flatten python lists\nfrom pandas.core.common import flatten","c65c13f1":"confirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecoveries_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\nlatest_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/08-22-2020.csv')\nus_medical_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports_us\/08-22-2020.csv')\n#apple_mobility = pd.read_csv('https:\/\/covid19-static.cdn-apple.com\/covid19-mobility-data\/2015HotfixDev7\/v3\/en-us\/applemobilitytrends-2020-08-21.csv')","d314690d":"confirmed_df.head()","2a425d63":"confirmed_group_df = confirmed_df.groupby(by='Country\/Region',as_index=False).sum()\ndeaths_group_df = deaths_df.groupby(by='Country\/Region',as_index=False).sum()\nrecoveries_group_df = recoveries_df.groupby(by='Country\/Region',as_index=False).sum()\n\nactive_group_df = pd.DataFrame(columns=[confirmed_group_df.columns])\nactive_group_df = deaths_group_df.copy()\nfor i in range(confirmed_group_df.shape[0]):\n    for j in range(3, confirmed_group_df.shape[1]):\n        active_group_df.iloc[i,j] = confirmed_group_df.iloc[i,j]-(recoveries_group_df.iloc[i,j]+deaths_group_df.iloc[i,j])","9d793560":"confirmed_df.describe()","b915f295":"base_stats = pd.DataFrame(columns=['Dates','Confirmed','Deaths','Recovered','Active'])\nbase_stats['Dates'] = confirmed_df.columns[4:]\n\nbase_stats['Confirmed'] = base_stats['Dates'].apply(lambda x: confirmed_df[x].sum())\nbase_stats['Deaths'] = base_stats['Dates'].apply(lambda x: deaths_df[x].sum())\nbase_stats['Recovered'] = base_stats['Dates'].apply(lambda x: recoveries_df[x].sum())\nbase_stats.reset_index(drop=False, inplace=True)\nbase_stats['Active'] = base_stats['index'].apply(lambda x: (base_stats['Confirmed'][x]-(base_stats['Deaths'][x]+base_stats['Recovered'][x])))\nbase_stats.head()","000039dd":"latest_stats_fig = go.Figure()\nlatest_stats_fig.add_trace(go.Treemap(labels = ['Confirmed','Active','Recovered','Deaths'],\n                                     parents = ['','Confirmed','Confirmed','Confirmed'],\n                                     values = [base_stats['Confirmed'].sum(), base_stats['Active'].sum(), base_stats['Recovered'].sum(), base_stats['Deaths'].sum()],\n                                      branchvalues=\"total\", marker_colors = ['#118ab2','#ef476f','#06d6a0','#073b4c'],\n                                      textinfo = \"label+text+value\",\n                                      outsidetextfont = {\"size\": 30, \"color\": \"darkblue\"},\n                                      marker = {\"line\": {\"width\": 2}},\n                                        pathbar = {\"visible\": False}\n                                     ))\nlatest_stats_fig.update_layout(#width=1000, \n                               height=300)\nlatest_stats_fig.show()","d9620f1d":"base_stats_fig = go.Figure()\n\nfor column in base_stats.columns.to_list()[2:6]:\n    color_dict = {\n      \"Confirmed\": \"#118ab2\",\n      \"Active\": \"#ef476f\",\n      \"Recovered\": \"#06d6a0\",\n      \"Deaths\": \"#073b4c\"\n        }\n    base_stats_fig.add_trace(\n        go.Scatter(\n            x = base_stats['Dates'],\n            y = base_stats[column],\n            name = column,\n            line = dict(color=color_dict[column]),\n            hovertemplate ='<br><b>Date<\/b>: %{x}'+'<br><i>Count<\/i>:'+'%{y}',\n        )\n    )\n    \nfor column in base_stats.columns.to_list()[2:6]:\n    color_dict = {\n      \"Confirmed\": \"#149ECC\",\n      \"Active\": \"#F47C98\",\n      \"Recovered\": \"#24F9C1\",\n      \"Deaths\": \"#0C6583\"\n        }\n    base_stats_fig.add_trace(\n        go.Scatter(\n            x = base_stats['Dates'],\n            y = base_stats['index'].apply(lambda x: (base_stats[column][x-7:x].sum())\/7 if x>7 else (base_stats[column][0:x].sum())\/7),\n            name = column+\" 7-day Moving Avg.\",\n            line = dict(dash=\"dash\", color=color_dict[column]), showlegend=False,\n            hovertemplate = '<br><b>Date<\/b>: %{x}'+'<br><i>7-day moving avg.<\/i>: %{y}'\n        )\n    )\n    \nbase_stats_fig.update_layout(\n    updatemenus=[\n        dict(\n        buttons=list(\n            [dict(label = 'All Cases',\n                  method = 'update',\n                  args = [{'visible': [True, True, True, True, True, True, True, True]},\n                          {'title': 'All Cases',\n                           'showlegend':True}]),\n             dict(label = 'Confirmed',\n                  method = 'update',\n                  args = [{'visible': [True, False, False, False, True, False, False, False]},\n                          {'title': 'Confirmed',\n                           'showlegend':True}]),\n             dict(label = 'Active',\n                  method = 'update',\n                  args = [{'visible': [False, False, False, True, False, False, False, True]},\n                          {'title': 'Active',\n                           'showlegend':True}]),\n             dict(label = 'Recovered',\n                  method = 'update',\n                  args = [{'visible': [False, False, True, False, False, False, True, False]},\n                          {'title': 'Recovered',\n                           'showlegend':True}]),\n             dict(label = 'Deaths',\n                  method = 'update',\n                  args = [{'visible': [False, True, False, False, False, True, False, False]},\n                          {'title': 'Deaths',\n                           'showlegend':True}]),\n            ]),\n             type = \"dropdown\",\n             direction=\"down\",\n#             pad={\"r\": 10, \"t\": 40},\n             showactive=True,\n             x=0,\n             xanchor=\"left\",\n             y=1.25,\n             yanchor=\"top\"\n        ),\n        dict(\n        buttons=list(\n            [dict(label = 'Linear Scale',\n                  method = 'relayout',\n                  args = [{'yaxis': {'type': 'linear'}},\n                          {'title': 'All Cases',\n                           'showlegend':True}]),\n             dict(label = 'Log Scale',\n                  method = 'relayout',\n                  args = [{'yaxis': {'type': 'log'}},\n                          {'title': 'Confirmed',\n                           'showlegend':True}]),\n            ]),\n             type = \"dropdown\",\n             direction=\"down\",\n#             pad={\"r\": 10, \"t\": 10},\n             showactive=True,\n             x=0,\n             xanchor=\"left\",\n             y=1.36,\n             yanchor=\"top\"\n        )\n    ])\n\n# Add range slider\n# base_stats_fig.update_layout(\n#     xaxis=dict(\n#         rangeselector=dict(\n#             buttons=list([\n#                 dict(count=10,\n#                      label=\"10y\",\n#                      step=\"day\",\n#                      stepmode=\"backward\"),\n#                 dict(count=20,\n#                      label=\"20y\",\n#                      step=\"day\",\n#                      stepmode=\"backward\"),\n#                 dict(count=50,\n#                      label=\"50y\",\n#                      step=\"day\",\n#                      stepmode=\"todate\"),\n#                 dict(count=100,\n#                      label=\"100y\",\n#                      step=\"day\",\n#                      stepmode=\"backward\"),\n#                 dict(step=\"all\")\n#             ])\n#         ),\n#         rangeslider=dict(\n#             visible=True\n#         ),\n#         type=\"date\"\n#     )\n# )\n\nbase_stats_fig.update_xaxes(showticklabels=False)\nbase_stats_fig.update_layout(\n    #height=600, width=600, \n    title_text=\"Basic Statistics for Covid19\", title_x=0.5, title_font_size=20,\n                            legend=dict(orientation='h',yanchor='top',y=1.15,xanchor='right',x=1), paper_bgcolor=\"mintcream\",\n                            xaxis_title=\"Date\", yaxis_title=\"# of Cases\")\nbase_stats_fig.show()","023698d5":"daily_case_fig = make_subplots(rows=2, cols=2, vertical_spacing=0.05, horizontal_spacing=0.04, # shared_yaxes=True,\n                           subplot_titles=('Confirmed','Active','Recovered','Deaths'),\n                            x_title='Dates', y_title='# of Cases',)\n\ndaily_case_fig.add_trace(go.Bar(x=base_stats['Dates'], y=base_stats['index'].apply(lambda x: base_stats['Confirmed'][x]-base_stats['Confirmed'][x-1:x].sum()),\n                              name='Confirmed',hovertemplate = '<br><b>Date<\/b>: %{x}'+'<br><i>Confirmed Count<\/i>: %{y}',\n                                marker=dict(color='#118ab2')),row=1, col=1)\ndaily_case_fig.add_trace(go.Scatter(x=base_stats['Dates'], y=base_stats['index'].apply(lambda x: (base_stats['Confirmed'][x-7:x].sum()-base_stats['Confirmed'][x-8:x-1].sum())\/7 if x>0 else 0),\n                             name='7-day moving average', hovertemplate = '<br><b>Date<\/b>: %{x}'+'<br><i>7-day average<\/i>: %{y}', showlegend=False,\n                                    line=dict(dash=\"dash\", color='#149ECC')),row=1, col=1)\n\ndaily_case_fig.add_trace(go.Bar(x=base_stats['Dates'], y=base_stats['index'].apply(lambda x: base_stats['Active'][x]-base_stats['Active'][x-1:x].sum()), \n                             name='Active',hovertemplate = '<br><b>Date<\/b>: %{x}'+'<br><i>Active Count<\/i>: %{y}',\n                               marker=dict(color='#ef476f')),row=1, col=2)\ndaily_case_fig.add_trace(go.Scatter(x=base_stats['Dates'], y=base_stats['index'].apply(lambda x: (base_stats['Active'][x-7:x].sum()-base_stats['Active'][x-8:x-1].sum())\/7 if x>0 else 0),\n                             name='7-day moving average', hovertemplate = '<br><b>Date<\/b>: %{x}'+'<br><i>7-day average<\/i>: %{y}', showlegend=False,\n                                    line=dict(dash=\"dash\", color='#F47C98')),row=1, col=2)\n\ndaily_case_fig.add_trace(go.Bar(x=base_stats['Dates'], y=base_stats['index'].apply(lambda x: base_stats['Recovered'][x]-base_stats['Recovered'][x-1:x].sum()), \n                              name='Recovered',hovertemplate = '<br><b>Date<\/b>: %{x}'+'<br><i>Recovered Count<\/i>: %{y}',\n                               marker=dict(color='#06d6a0')),row=2, col=1)\ndaily_case_fig.add_trace(go.Scatter(x=base_stats['Dates'], y=base_stats['index'].apply(lambda x: (base_stats['Recovered'][x-7:x].sum()-base_stats['Recovered'][x-8:x-1].sum())\/7 if x>0 else 0),\n                             name='7-day moving average', hovertemplate = '<br><b>Date<\/b>: %{x}'+'<br><i>7-day average<\/i>: %{y}', showlegend=False,\n                                    line=dict(dash=\"dash\", color='#24F9C1')),row=2, col=1)\n\ndaily_case_fig.add_trace(go.Bar(x=base_stats['Dates'], y=base_stats['index'].apply(lambda x: base_stats['Deaths'][x]-base_stats['Deaths'][x-1:x].sum()), \n                              name='Deaths',hovertemplate = '<br><b>Date<\/b>: %{x}'+'<br><i>Death Count<\/i>: %{y}',\n                               marker=dict(color='#073b4c')),row=2, col=2)\ndaily_case_fig.add_trace(go.Scatter(x=base_stats['Dates'], y=base_stats['index'].apply(lambda x: (base_stats['Deaths'][x-7:x].sum()-base_stats['Deaths'][x-8:x-1].sum())\/7 if x>0 else 0),\n                             name='7-day moving average', hovertemplate = '<br><b>Date<\/b>: %{x}'+'<br><i>7-day average<\/i>: %{y}', line=dict(dash=\"dash\", color='#0C6583')),row=2, col=2)\n\n\n\n\ndaily_case_fig.update_xaxes(showticklabels=False)\ndaily_case_fig.update_layout(\n    #height=600, width=1100, \n    title_text=\"Daily change in cases of Covid19\", title_x=0.5, title_font_size=20,\n                            legend=dict(orientation='h',yanchor='top',y=1.1,xanchor='right',x=1), paper_bgcolor=\"mintcream\")\n\n\ndaily_case_fig.show()                    ","9163c7e1":"base_stats_inc_df = pd.DataFrame(columns=['Index', 'Dates', 'Confirmed', 'Deaths', 'Recovered', 'Active', 'Daily Inc.'])\nbase_stats_inc_df[['Index', 'Dates', 'Confirmed', 'Deaths', 'Recovered', 'Active']] = base_stats[['index', 'Dates', 'Confirmed', 'Deaths', 'Recovered', 'Active']]\nbase_stats_inc_df['Daily Inc.'] = base_stats['index'].apply(lambda x: base_stats['Confirmed'][x]-base_stats['Confirmed'][x-1:x].sum())\n#base_stats_inc.head()","6942f459":"days = np.array(base_stats_inc_df[['Index']]).reshape(-1, 1)\ndays_ex = []\nfor i in range(len(days)+30):\n    days_ex = days_ex+[[i]]","d4977442":"prediction_df = pd.DataFrame(columns=['Index', 'Confirmed Pred', 'Deaths Pred', 'Recovered Pred', 'Active Pred', 'Daily Inc. Pred'])\nprediction_df['Index'] = list(flatten(days_ex))\n#prediction_df.head()","dbc2824c":"for col in base_stats_inc_df.columns[2:]:\n\n    count = np.array(base_stats_inc_df[[col]]).reshape(-1, 1)\n\n    X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(\n                                                        days[50:], count[50:], \n                                                        test_size=0.05, shuffle=False)\n\n    MAE, RSE, R2 = [], [], []\n    for j in range(1,10):\n        #creating the model\n        poly = PolynomialFeatures(degree=j)\n        train_x_poly = poly.fit_transform(X_train_confirmed)\n        \n        regr_poly = linear_model.LinearRegression()\n        regr_poly.fit(train_x_poly, y_train_confirmed)\n        \n        y_pred_poly = regr_poly.predict(poly.fit_transform(X_test_confirmed))\n        MAE.append(np.mean(np.absolute(y_pred_poly - y_test_confirmed)))\n        RSE.append(np.mean((y_pred_poly - list(flatten(y_test_confirmed))) ** 2))\n        R2.append(r2_score(y_pred_poly, list(flatten(y_test_confirmed))))\n        \n    deg = RSE.index(min(RSE))+1\n    #print(\"best deg for column {} is {}\".format(col, deg))\n\n    poly = PolynomialFeatures(degree=deg)\n    train_x_poly = poly.fit_transform(X_train_confirmed)\n\n    regr_poly = linear_model.LinearRegression()\n    regr_poly.fit(train_x_poly, y_train_confirmed)\n    col_name = col+' Pred'\n    prediction_df[col_name] = list(flatten(regr_poly.predict(poly.fit_transform(days_ex))))\n","25d2c3e7":"prediction_fig = go.Figure()\npred_dict = {\n  \"Confirmed\": [\"#118ab2\", 'Confirmed', 'Predicted Confirmed','#149ECC'],\n  \"Active\": [\"#ef476f\", 'Deaths', 'Predicted Deaths', '#F47C98'],\n  \"Recovered\": [\"#06d6a0\", 'Recovered', 'Predicted Recovered','#24F9C1'],\n  \"Deaths\": [\"#073b4c\", 'Active', 'Predicted Active','#0C6583'],\n  \"Daily Inc.\": [\"black\", 'Daily Inc.', 'Predicted Daily Inc.','grey']\n    }\n\nfor z in base_stats_inc_df.columns[2:]:\n    \n    z_pred = z+' Pred'\n    prediction_fig.add_trace(go.Scatter(x=list(flatten(days)), y=base_stats_inc_df[z],\n                                       line=dict(color=pred_dict[z][0]), name = pred_dict[z][1],\n                                       hovertemplate ='<br><b>Day number<\/b>: %{x}'+'<br><i>No.of cases <\/i>:'+'%{y}'))\n    \n    prediction_fig.add_trace(go.Scatter(x=list(flatten(days_ex))[50:], y=prediction_df[z_pred][50:],\n                                       line=dict(dash=\"dash\", color='black'), visible=False, name = pred_dict[z][2],\n                                       hovertemplate ='<br><b>Day number<\/b>: %{x}'+'<br><i>Predicted no.of cases <\/i>:'+'%{y}'))\n\n    \n    \n    \nprediction_fig.update_layout(\n    updatemenus=[\n        dict(\n        buttons=list(\n            [dict(label = 'Confirmed',\n                  method = 'update',\n                  args = [{'visible': [True, True, False, False, False, False, False, False, False, False]},\n                          {'title': 'Confirmed Cases',\n                           'showlegend':True}]),\n             dict(label = 'Deaths',\n                  method = 'update',\n                  args = [{'visible': [False, False, True, True, False, False, False, False, False, False]},\n                          {'title': 'Deaths Cases',\n                           'showlegend':True}]),\n             dict(label = 'Recovered',\n                  method = 'update',\n                  args = [{'visible': [False, False, False, False, True, True, False, False, False, False]},\n                          {'title': 'Recovered Cases',\n                           'showlegend':True}]),\n             dict(label = 'Active',\n                  method = 'update',\n                  args = [{'visible': [False, False, False, False, False, False, True, True, False, False]},\n                          {'title': 'Active Cases',\n                           'showlegend':True}]),\n             dict(label = 'Daily Inc.',\n                  method = 'update',\n                  args = [{'visible': [False, False, False, False, False, False, False, False, True, True]},\n                          {'title': 'Daily Inc. Cases',\n                           'showlegend':True}]),\n            ]),\n             type = \"buttons\",\n             direction=\"down\",\n#             pad={\"r\": 10, \"t\": 40},\n             showactive=True,\n#              x=1.01,\n#              xanchor=\"left\",\n             y=1.1,\n             yanchor=\"top\"\n        )\n    ])\n\n\nprediction_fig.update_xaxes(showticklabels=False)\nprediction_fig.update_layout(\n    #height=500, width=1100, \n    title_text=\"Prediction for Covid19 Cases\", title_x=0.5, title_font_size=20,\n                            legend=dict(orientation='h',yanchor='top',y=1.12,xanchor='right',x=1), paper_bgcolor=\"mintcream\",\n                            xaxis_title=\"Number of Days <br> (Click on the buttons at the left to see the predictions)\", yaxis_title=\"Count\")\nprediction_fig.show()","a9d47057":"country_data = go.Figure()\ncountry_data.add_trace(go.Table(\n    header=dict(values=['Country','Confirmed','Active','Recovered','Deaths','Daily Increase','Mortality Rate'],\n                fill = dict(color='#A5B3F3'),\n                line_color='darkslategray',\n                align = ['left'] * 5),\n    cells=dict(values=[confirmed_group_df.sort_values(by=confirmed_group_df.columns[-1], ascending=False)['Country\/Region'], \n                      confirmed_group_df.sort_values(by=confirmed_group_df.columns[-1], ascending=False)['Country\/Region'].apply(lambda x: confirmed_group_df[confirmed_group_df['Country\/Region']==x][confirmed_group_df.columns[4:]].values.tolist()[0][-1]),\n                      confirmed_group_df.sort_values(by=confirmed_group_df.columns[-1], ascending=False)['Country\/Region'].apply(lambda x: active_group_df[active_group_df['Country\/Region']==x][active_group_df.columns[4:]].values.tolist()[0][-1]),\n                      confirmed_group_df.sort_values(by=confirmed_group_df.columns[-1], ascending=False)['Country\/Region'].apply(lambda x: recoveries_group_df[recoveries_group_df['Country\/Region']==x][recoveries_group_df.columns[4:]].values.tolist()[0][-1]),\n                      confirmed_group_df.sort_values(by=confirmed_group_df.columns[-1], ascending=False)['Country\/Region'].apply(lambda x: deaths_group_df[deaths_group_df['Country\/Region']==x][deaths_group_df.columns[4:]].values.tolist()[0][-1]),\n                      confirmed_group_df.sort_values(by=confirmed_group_df.columns[-1], ascending=False)['Country\/Region'].apply(lambda x: confirmed_group_df[confirmed_group_df['Country\/Region']==x][confirmed_group_df.columns[4:]].values.tolist()[0][-1]-confirmed_group_df[confirmed_group_df['Country\/Region']==x][confirmed_group_df.columns[4:]].values.tolist()[0][-2]),\n                      confirmed_group_df.sort_values(by=confirmed_group_df.columns[-1], ascending=False)['Country\/Region'].apply(lambda x: (deaths_group_df[deaths_group_df['Country\/Region']==x][deaths_group_df.columns[4:]].values.tolist()[0][-1]\/confirmed_group_df[confirmed_group_df['Country\/Region']==x][confirmed_group_df.columns[4:]].values.tolist()[0][-1])*100).round(decimals=3)\n                      ],\n               fill = dict(color='#F0FCFD'),\n               line_color='darkslategray',\n               align = ['left'] * 5)))\n\ncountry_data.update_layout(\n    #height=600, width=1100, \n    title_text=\"Country wise stats\",\n                                     title_x=0.5, title_font_size=20,\n                                     paper_bgcolor=\"mintcream\")\ncountry_data.show()","bd575fb5":"base_stats_map_fig = go.Figure()\ndf_dict={\n  \"Confirmed\": [confirmed_group_df,\"blues\",True],\n  \"Active\": [active_group_df,\"reds\",False],\n  \"Recovered\": [recoveries_group_df,\"greens\",False],\n  \"Deaths\": [deaths_group_df,\"gray_r\",False],\n  \"Daily_inc\": [None, \"oranges\", False]\n}\nfor filter_name in ['Confirmed','Active','Recovered','Deaths']:\n\n    base_stats_map_fig.add_trace(go.Choropleth(locations=df_dict[filter_name][0]['Country\/Region'],\n                                       z=df_dict[filter_name][0][confirmed_group_df.columns[-1]],\n                                       locationmode='country names', name=filter_name,\n                                       colorscale=df_dict[filter_name][1], showscale=False,\n                                       colorbar_title=\"# of Cases World wide\", visible=df_dict[filter_name][2],\n                                               hoverinfo = 'all',\n                                       ))\n    \n\nbase_stats_map_fig.add_trace(go.Choropleth(locations=confirmed_group_df.sort_values(by=confirmed_group_df.columns[-1], ascending=False)['Country\/Region'],\n                                       z=confirmed_group_df.sort_values(by=confirmed_group_df.columns[-1], ascending=False)['Country\/Region'].apply(lambda x: confirmed_group_df[confirmed_group_df['Country\/Region']==x][confirmed_group_df.columns[4:]].values.tolist()[0][-1]-confirmed_group_df[confirmed_group_df['Country\/Region']==x][confirmed_group_df.columns[4:]].values.tolist()[0][-2]),\n                                       locationmode='country names', name='Daily increase',\n                                       colorscale=df_dict['Daily_inc'][1], showscale=False,\n                                       colorbar_title=\"# of new Cases World wide\", visible=df_dict['Daily_inc'][2],\n                                               hoverinfo = 'all',\n                                       ))    \n    \n    \n    \nbase_stats_map_fig.update_layout(\n    updatemenus=[\n        dict(\n        buttons=list(\n            [dict(label = 'Confirmed',\n                  method = 'update',\n                  args = [{'visible': [True, False, False, False, False]},\n                          {'title': 'Confirmed',\n                           'showlegend':True}]),\n             dict(label = 'Active',\n                  method = 'update',\n                  args = [{'visible': [False, True, False, False, False]},\n                          {'title': 'Active',\n                           'showlegend':True}]),\n             dict(label = 'Recovered',\n                  method = 'update',\n                  args = [{'visible': [False, False, True, False, False]},\n                          {'title': 'Recovered',\n                           'showlegend':True}]),\n             dict(label = 'Deaths',\n                  method = 'update',\n                  args = [{'visible': [False, False, False, True, False]},\n                          {'title': 'Deaths',\n                           'showlegend':True}]),\n             dict(label = 'Daily Increase',\n                  method = 'update',\n                  args = [{'visible': [False, False, False, False, True]},\n                          {'title': 'Daily Increase',\n                           'showlegend':True}]),\n            ]),\n             type = \"buttons\",\n             direction=\"right\",\n#             pad={\"r\": 10, \"t\": 40},\n             showactive=True,\n             x=-0.1,\n             xanchor=\"left\",\n             y=1.1,\n             yanchor=\"top\"\n        )\n    ])\n\nbase_stats_map_fig.update_xaxes(showticklabels=False)\nbase_stats_map_fig.update_layout(\n    #height=600, width=1100, \n    title_text=\"# of Cases World wide\", title_x=0.5, title_font_size=20,\n                            legend=dict(orientation='h',yanchor='top',y=1.12,xanchor='right',x=1), paper_bgcolor=\"mintcream\")\nbase_stats_map_fig.show()","6e5b44d5":"imp_ratios_fig = go.Figure()\ncolor_dict = {\n  \"Confirmed\": [\"#118ab2\",(base_stats['Deaths']\/base_stats['Confirmed'])*100, 'Deaths\/100 Cases','#149ECC'],\n  \"Active\": [\"#ef476f\",(base_stats['Deaths']\/base_stats['Recovered'])*100, 'Deaths\/100 Recovered','#F47C98'],\n  \"Recovered\": [\"#06d6a0\",(base_stats['Recovered']\/base_stats['Confirmed'])*100, 'Recovered\/100 cases','#24F9C1'],\n  \"Deaths\": [\"#073b4c\",(base_stats['Recovered']\/base_stats['Deaths'])*100, 'Recovered\/100 Deaths','#0C6583']\n    }\nfor column in base_stats.columns.to_list()[2:6]:\n\n    imp_ratios_fig.add_trace(go.Scatter(x = base_stats['Dates'],y = color_dict[column][1],\n            name = color_dict[column][2],line = dict(color=color_dict[column][0]),\n            hovertemplate ='<br><b>Date<\/b>: %{x}'+'<br><i>Ratio <\/i>:'+'%{y}'))\n    imp_ratios_fig.add_trace(go.Scatter(x = base_stats['Dates'],y = [color_dict[column][1].mean()]*base_stats['Dates'].shape[0],\n            name = \"Mean value\",line = dict(dash=\"dash\", color=color_dict[column][3]),\n            hovertemplate ='<br><i>Mean value <\/i>:'+'%{y}', visible=False))\n\nimp_ratios_fig.update_layout(\n    updatemenus=[\n        dict(\n        buttons=list(\n            [dict(label = 'All Ratios',\n                  method = 'update',\n                  args = [{'visible': [True, False, True, False, True, False, True, False]},\n                          {'title': 'All Cases',\n                           'showlegend':True}]),\n             dict(label = 'Deaths\/100 Cases<br>(Mortality rate)',\n                  method = 'update',\n                  args = [{'visible': [True, True, False, False, False, False, False, False]},\n                          {'title': 'Confirmed',\n                           'showlegend':True}]),\n             dict(label = 'Deaths\/100 Recovered',\n                  method = 'update',\n                  args = [{'visible': [False, False, True, True, False, False, False, False]},\n                          {'title': 'Active',\n                           'showlegend':True}]),\n             dict(label = 'Recovered\/100 cases<br>(Recovery rate)',\n                  method = 'update',\n                  args = [{'visible': [False, False, False, False, True, True, False, False]},\n                          {'title': 'Recovered',\n                           'showlegend':True}]),\n             dict(label = 'Recovered\/100 Deaths',\n                  method = 'update',\n                  args = [{'visible': [False, False, False, False, False, False, True, True]},\n                          {'title': 'Deaths',\n                           'showlegend':True}]),\n            ]),\n             type = \"buttons\",\n             direction=\"down\",\n#             pad={\"r\": 10, \"t\": 40},\n             showactive=True,\n             x=1.01,\n             xanchor=\"left\",\n             y=1,\n             yanchor=\"top\"\n        )\n    ])\n\nimp_ratios_fig.update_xaxes(showticklabels=False)\nimp_ratios_fig.update_layout(\n    #height=500, width=1100, \n    title_text=\"Important Ratios for Covid19\", title_x=0.5, title_font_size=20,\n                            legend=dict(orientation='h',yanchor='top',y=1.12,xanchor='right',x=1), paper_bgcolor=\"mintcream\",\n                            xaxis_title=\"Date\", yaxis_title=\"Ratio\")\nimp_ratios_fig.show()","4d10d487":"treemap_fig = go.Figure()\ndf_dict={\n  \"Confirmed\": [confirmed_group_df,True],\n  \"Active\": [active_group_df,False],\n  \"Recovered\": [recoveries_group_df,False],\n  \"Deaths\": [deaths_group_df,False],\n  \"Daily_inc\": [None,False]\n}\nfor column in ['Confirmed','Active','Recovered','Deaths']:\n\n    treemap_fig.add_trace(go.Treemap(labels = confirmed_group_df['Country\/Region'], name=\"Treemap\",\n                                     parents = ['']*confirmed_group_df.shape[0],\n                                     values = df_dict[column][0][confirmed_group_df.columns[-1]],\n                                     branchvalues=\"total\",\n                                     textinfo = \"percent root+label+value+text\", outsidetextfont = {\"size\": 30, \"color\": \"darkblue\"},\n                                     marker = {\"line\": {\"width\": 2}}, pathbar = {\"visible\": False}, visible = df_dict[column][1], \n                                     hovertemplate='<b>%{label} <\/b> <br> Count: %{value}<br>'\n                                     )) \n    \ntreemap_fig.add_trace(go.Treemap(labels = confirmed_group_df.sort_values(by=confirmed_group_df.columns[-1], ascending=False)['Country\/Region'], name=\"Treemap\",\n                                 parents = ['']*confirmed_group_df.shape[0],\n                                 values = confirmed_group_df.sort_values(by=confirmed_group_df.columns[-1], ascending=False)['Country\/Region'].apply(lambda x: confirmed_group_df[confirmed_group_df['Country\/Region']==x][confirmed_group_df.columns[4:]].values.tolist()[0][-1]-confirmed_group_df[confirmed_group_df['Country\/Region']==x][confirmed_group_df.columns[4:]].values.tolist()[0][-2]),\n                                 branchvalues=\"total\",\n                                 textinfo = \"percent root+label+value+text\", outsidetextfont = {\"size\": 30, \"color\": \"darkblue\"},\n                                 marker = {\"line\": {\"width\": 2}}, pathbar = {\"visible\": False}, visible = df_dict['Daily_inc'][1], \n                                 hovertemplate='<b>%{label} <\/b> <br> Count: %{value}<br>'\n                                 )) \n\ntreemap_fig.update_layout(\n    updatemenus=[\n        dict(\n        buttons=list([\n             dict(label = 'Confirmed',\n                  method = 'update',\n                  args = [{'visible': [True, False, False, False, False]},\n                          {'title': 'Confirmed',\n                           'showlegend':True}]),\n             dict(label = 'Active',\n                  method = 'update',\n                  args = [{'visible': [False, True, False, False, False]},\n                          {'title': 'Active',\n                           'showlegend':True}]),\n             dict(label = 'Recovered',\n                  method = 'update',\n                  args = [{'visible': [False, False, True, False, False]},\n                          {'title': 'Recovered',\n                           'showlegend':True}]),\n             dict(label = 'Deaths',\n                  method = 'update',\n                  args = [{'visible': [False, False, False, True, False]},\n                          {'title': 'Deaths',\n                           'showlegend':True}]),\n            dict(label = 'Daily Increase',\n                  method = 'update',\n                  args = [{'visible': [False, False, False, False, True]},\n                          {'title': 'Daily Increase',\n                           'showlegend':True}]),\n            ]),\n             type = \"buttons\",\n             direction=\"down\",\n#             pad={\"r\": 10, \"t\": 40},\n             showactive=True,\n             x=1.01,\n             xanchor=\"left\",\n             y=0.8,\n             yanchor=\"top\"\n        )\n    ])\n\ntreemap_fig.update_layout(\n    #height=600, width=1100, \n    title_text=\"Treemap of Countries <br> The Treemap shows the number of Cases in Different coutries <br> and their percent of total cases worldwide\",\n                          title_x=0.5, title_font_size=15,\n                          legend=dict(orientation='h',yanchor='top',y=1.12,xanchor='right',x=1), paper_bgcolor=\"mintcream\")\ntreemap_fig.show()","a0131714":"base_stats['Dates'] = pd.to_datetime(base_stats[\"Dates\"])\nbase_stats.set_index(base_stats[\"Dates\"],inplace=True)","39393053":"week_month_fig = make_subplots(rows=1, cols=3, vertical_spacing=0.05, horizontal_spacing=0.04, # shared_yaxes=True,\n                           subplot_titles=('Daily Statistics','Weekly Statistics','Monthly Statistics'),y_title='# of Cases',)\n\nfor column in ['Confirmed','Active','Recovered','Deaths']:\n    df_dict={\n      \"Confirmed\": [confirmed_group_df,\"#118ab2\",True],\n      \"Active\": [active_group_df,\"#ef476f\",False],\n      \"Recovered\": [recoveries_group_df,\"#06d6a0\",False],\n      \"Deaths\": [deaths_group_df,\"#073b4c\",False]        \n    }\n    week_month_fig.add_trace(go.Bar(x=list(range(len(base_stats[column].resample('D').sum()))),\n                            y=base_stats[column].resample('D').sum(), visible = df_dict[column][2],\n                            name='Daily '+column,hovertemplate = '<br><b>day<\/b>: %{x}'+'<br><i>Confirmed Count<\/i>: %{y}',\n                            marker=dict(color=df_dict[column][1]), showlegend=False) ,row=1, col=1)\n    week_month_fig.add_trace(go.Bar(x=list(range(len(base_stats[column].resample('W').sum()))),\n                            y=base_stats[column].resample('W').sum(), visible = df_dict[column][2],\n                            name='Weekly '+column,hovertemplate = '<br><b>Week<\/b>: %{x}'+'<br><i>Confirmed Count<\/i>: %{y}',\n                            marker=dict(color=df_dict[column][1]), showlegend=False) ,row=1, col=2)\n    week_month_fig.add_trace(go.Bar(x=list(range(len(base_stats[column].resample('M').sum()))),\n                            y=base_stats[column].resample('M').sum(), visible = df_dict[column][2],\n                            name='Monthly '+column,hovertemplate = '<br><b>Month<\/b>: %{x}'+'<br><i>Confirmed Count<\/i>: %{y}',\n                            marker=dict(color=df_dict[column][1]), showlegend=False) ,row=1, col=3)\n\n\nweek_month_fig.update_layout(\n    updatemenus=[\n        dict(\n        buttons=list([\n             dict(label = 'Confirmed',\n                  method = 'update',\n                  args = [{'visible': [True, True, True, False, False, False, False, False, False, False, False, False]},\n                          {'title': 'Confirmed',\n                           'showlegend':True}]),\n             dict(label = 'Active',\n                  method = 'update',\n                  args = [{'visible': [False, False, False, True, True, True, False, False, False, False, False, False]},\n                          {'title': 'Active',\n                           'showlegend':True}]),\n             dict(label = 'Recovered',\n                  method = 'update',\n                  args = [{'visible': [False, False, False, False, False, False, True, True, True, False, False, False]},\n                          {'title': 'Recovered',\n                           'showlegend':True}]),\n             dict(label = 'Deaths',\n                  method = 'update',\n                  args = [{'visible': [False, False, False, False, False, False, False, False, False, True, True, True]},\n                          {'title': 'Deaths',\n                           'showlegend':True}]),\n            ]),\n             type = \"buttons\",\n            direction=\"right\",\n#             pad={\"r\": 10, \"t\": 40},\n             showactive=True,\n             x=-0.05,\n             xanchor=\"left\",\n             y=1.2,\n             yanchor=\"top\"\n        )\n    ])\n\nweek_month_fig.update_layout(\n    #height=500, width=1150, \n    title_text=\"Weekly\/Monthly Statistics\", title_x=0.5, title_font_size=20,\n                             paper_bgcolor=\"mintcream\")\nweek_month_fig.update_xaxes(title_text=\"Days\", row=1, col=1)\nweek_month_fig.update_xaxes(title_text=\"Weeks\", row=1, col=2)\nweek_month_fig.update_xaxes(title_text=\"Months\", row=1, col=3)\nweek_month_fig.show()","7283ec89":"confirmed_group_sorted_df = confirmed_group_df.sort_values(by=confirmed_group_df.columns[-1], ascending=False)","239db2c1":"\nworld_ani = pd.DataFrame(columns=['Dates','Count', 'Country'])\nCount, Dates, Country = [],[],[]\nfor i in range(20):\n        tree = []\n        Count.extend(confirmed_group_sorted_df[confirmed_group_sorted_df.columns[3:]][i:i+1].T.values.tolist())\n        Dates.extend(confirmed_group_sorted_df.columns[3:])\n        tree.append(confirmed_group_sorted_df.iloc[i,0])\n        tree = tree*(confirmed_group_sorted_df.shape[1]-3)\n        Country.extend(tree)\nworld_ani['Count'] = pd.DataFrame(Count)[0]\nworld_ani['Dates'] = pd.DataFrame(Dates)[0]\nworld_ani['Country'] = pd.DataFrame(Country)[0]\n\n#confirmed_group_df.shape[0]","4427cdab":"\ncases_over_time_fig = px.scatter_geo(world_ani, locations='Country', color=\"Country\",locationmode='country names',\n                     hover_name=\"Country\", size=\"Count\", size_max=50,\n                     animation_frame=\"Dates\", projection=\"natural earth\")\n\n#Increasing the speed of animation\n#cases_over_time_fig.update_layout(transition = {'duration': 1000})\n# cases_over_time_fig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = pow(10, -1000)\n# cases_over_time_fig.layout.updatemenus[0].buttons[0].args[1][\"transition\"][\"duration\"] = pow(10, -1000)\n\ncases_over_time_fig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 2\ncases_over_time_fig.show()","b0f837be":"confirmed_group_sorted_T_df = confirmed_group_sorted_df[0:20].drop(columns=['Lat','Long']).T\nconfirmed_group_sorted_T_df.columns = confirmed_group_sorted_T_df[0:1].values.tolist()[0]\nconfirmed_group_sorted_T_df.drop(['Country\/Region'], inplace=True)\n#confirmed_group_sorted_T_df.head()","dae88d32":"# #############Not currently used############################\n# top_20_countries_df = pd.DataFrame(columns=['Country','Confirmed','Active','Recovered','Deaths'])\n# Confirmed, Active, Recovered, Deaths = [], [], [], []\n\n# top_20_countries_df['Country'] = confirmed_group_sorted_df['Country\/Region'][:20].reset_index(drop=True)\n# for i in top_20_countries_df['Country']:\n#     Confirmed.append(confirmed_group_df.set_index(\"Country\/Region\").loc[i, confirmed_group_df.columns[-1]])\n#     Active.append(confirmed_group_df.set_index(\"Country\/Region\").loc[i, confirmed_group_df.columns[-1]])\n#     Recovered.append(recoveries_group_df.set_index(\"Country\/Region\").loc[i, recoveries_group_df.columns[-1]])\n#     Deaths.append(deaths_group_df.set_index(\"Country\/Region\").loc[i, deaths_group_df.columns[-1]])\n\n# top_20_countries_df['Confirmed'] = pd.DataFrame(Confirmed)\n# top_20_countries_df['Active'] = pd.DataFrame(Active)\n# top_20_countries_df['Recovered'] = pd.DataFrame(Recovered)\n# top_20_countries_df['Deaths'] = pd.DataFrame(Deaths)\n# top_20_countries_df.head()","53ef1d14":"# #############Not currently used############################\n# top_20_countries_df = pd.DataFrame(columns=['Country','Confirmed','Active','Recovered','Deaths'])\n# Confirmed, Active, Recovered, Deaths = [], [], [], []\n\n# top_20_countries_df['Country'] = confirmed_group_sorted_df['Country\/Region'][:20].reset_index(drop=True)\n# for i in top_20_countries_df['Country']:\n#     Confirmed.append(confirmed_group_df.set_index(\"Country\/Region\").loc[i, confirmed_group_df.columns[-1]])\n#     Active.append(confirmed_group_df.set_index(\"Country\/Region\").loc[i, confirmed_group_df.columns[-1]])\n#     Recovered.append(recoveries_group_df.set_index(\"Country\/Region\").loc[i, recoveries_group_df.columns[-1]])\n#     Deaths.append(deaths_group_df.set_index(\"Country\/Region\").loc[i, deaths_group_df.columns[-1]])\n\n# top_20_countries_df['Confirmed'] = pd.DataFrame(Confirmed)\n# top_20_countries_df['Active'] = pd.DataFrame(Active)\n# top_20_countries_df['Recovered'] = pd.DataFrame(Recovered)\n# top_20_countries_df['Deaths'] = pd.DataFrame(Deaths)\n# top_20_countries_df.head()","0e6c5926":"scatter_ani_df = pd.DataFrame(columns=['Dates', 'Country','Confirmed','Recovered','Deaths'])\nDates, Country, Confirmed, Deaths, Recovered = [],[],[],[],[]\nfor i in range(20):\n        temp1 = []\n        Confirmed.extend(confirmed_group_sorted_df[confirmed_group_sorted_df.columns[3:]][i:i+1].T.values.tolist())\n        Dates.extend(confirmed_group_sorted_df.columns[3:])\n        temp1.append(confirmed_group_sorted_df.iloc[i,0])\n        temp = temp1*(confirmed_group_sorted_df.shape[1]-3)\n        Country.extend(temp)\n        \n        Recovered.extend(recoveries_group_df.set_index(recoveries_group_df[\"Country\/Region\"], drop=True)[confirmed_group_sorted_df.columns[3:]].loc[temp1].values.tolist()[0])\n        Deaths.extend(deaths_group_df.set_index(deaths_group_df[\"Country\/Region\"], drop=True)[confirmed_group_sorted_df.columns[3:]].loc[temp1].values.tolist()[0])\n        \n        \n        \nscatter_ani_df['Confirmed'] = pd.DataFrame(Confirmed)[0]\nscatter_ani_df['Dates'] = pd.DataFrame(Dates)[0]\nscatter_ani_df['Country'] = pd.DataFrame(Country)[0]\nscatter_ani_df['Recovered'] = pd.DataFrame(Recovered)[0]\nscatter_ani_df['Deaths'] = pd.DataFrame(Deaths)[0]\n","16ae6cc0":"fig = px.scatter(scatter_ani_df, x=\"Confirmed\", y=\"Deaths\", animation_frame=\"Dates\", animation_group=\"Country\",\n           size=\"Confirmed\", color=\"Country\", hover_name=\"Country\",\n           #log_x=True, \n           size_max=50, range_x=[-10000,39000000], range_y=[-10000,700000])\n\nfig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 50\nfig.show()","e3f12cf8":"affected_countries_df = confirmed_df.groupby(\"Country\/Region\").sum().drop(['Lat','Long'],axis =1).apply(lambda x: x[x > 0].count(), axis =0)","30e36f3c":"affected_countries_fig = go.Figure()\naffected_countries_fig.add_trace(go.Scatter(x = base_stats['Dates'],\n            y = affected_countries_df,\n            name = 'Affected Countries',\n            mode='lines',\n            line = dict(color='#118ab2'),\n            hovertemplate ='<br><b>Date<\/b>: %{x}'+'<br><i>No. of Countries <\/i>:'+'%{y}',\n        )\n    ) \n\naffected_countries_fig.update_xaxes(showticklabels=False)\naffected_countries_fig.update_layout(\n    #height=500, width=1100, \n    title_text=\"Number of Countries Affected With COVID19\",\n                                     title_x=0.5, title_font_size=20, legend=dict(orientation='h',yanchor='top',y=1.12,xanchor='right',x=1),\n                                     paper_bgcolor=\"mintcream\",\n                                    xaxis_title=\"Date\", yaxis_title=\"Number of Countries\")\naffected_countries_fig.show()","e70afb32":"confirmed_group_melted_df = pd.melt(confirmed_group_df, id_vars=['Country\/Region'], value_vars=confirmed_group_df.columns[3:])\nconfirmed_group_melted_df.rename(columns={\"variable\": \"Dates\", \"value\": \"Confirmed\"}, inplace=True)\n\nactive_group_melted_df = pd.melt(active_group_df, id_vars=['Country\/Region'], value_vars=active_group_df.columns[3:])\nactive_group_melted_df.rename(columns={\"variable\": \"Dates\", \"value\": \"Count\"}, inplace=True)\n\nrecovered_group_melted_df = pd.melt(recoveries_group_df, id_vars=['Country\/Region'], value_vars=recoveries_group_df.columns[3:])\nrecovered_group_melted_df.rename(columns={\"variable\": \"Dates\", \"value\": \"Count\"}, inplace=True)\n\ndeaths_group_melted_df = pd.melt(deaths_group_df, id_vars=['Country\/Region'], value_vars=deaths_group_df.columns[3:])\ndeaths_group_melted_df.rename(columns={\"variable\": \"Dates\", \"value\": \"Count\"}, inplace=True)","bc87b899":"country_specific_fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\ndf_dict={\n  \"Confirmed\": [confirmed_group_melted_df ,\"#118ab2\"],\n  \"Active\": [active_group_melted_df ,\"#ef476f\"],\n  \"Recovered\": [recovered_group_melted_df ,\"#06d6a0\"],\n  \"Deaths\": [deaths_group_melted_df ,\"#073b4c\"]        \n}\n\nfor country in confirmed_group_df.sort_values(by=confirmed_group_df.columns[-1], ascending=False)['Country\/Region'].values.tolist()[:20]:\n    country_specific_fig.add_trace(go.Scatter(y=confirmed_group_df[confirmed_group_df['Country\/Region']==country][confirmed_group_df.columns[4:]].values.tolist()[0],\n                                             x=confirmed_group_df.columns[4:],\n                                             mode='lines', visible=(lambda x: True if x==\"US\" else False)(country), \n                                              name=\"Confirmed\", showlegend=True,\n                                             line = dict(dash=\"solid\", color=df_dict['Confirmed'][1])\n                                             ))\n    \n    \n    \n    \n    country_specific_fig.add_trace(go.Bar(y=confirmed_group_df[confirmed_group_df['Country\/Region']==country][confirmed_group_df.columns[4:]].T.reset_index().reset_index().rename(columns={confirmed_group_df[confirmed_group_df['Country\/Region']==country][confirmed_group_df.columns[4:]].T.reset_index().reset_index().columns[-1]:'count','index':'dates','level_0':'index'})['index'].apply(lambda x: confirmed_group_df[confirmed_group_df['Country\/Region']==country][confirmed_group_df.columns[4:]].T.reset_index().reset_index().rename(columns={confirmed_group_df[confirmed_group_df['Country\/Region']==country][confirmed_group_df.columns[4:]].T.reset_index().reset_index().columns[-1]:'count','index':'dates','level_0':'index'})['count'][x]-confirmed_group_df[confirmed_group_df['Country\/Region']==country][confirmed_group_df.columns[4:]].T.reset_index().reset_index().rename(columns={confirmed_group_df[confirmed_group_df['Country\/Region']==country][confirmed_group_df.columns[4:]].T.reset_index().reset_index().columns[-1]:'count','index':'dates','level_0':'index'})['count'][x-1:x].sum()),\n                                         x=confirmed_group_df.columns[4:],\n                                          name=\"Daily Confirmed\", showlegend=True,\n                                          visible=(lambda x: True if x==\"US\" else False)(country),\n                                          yaxis='y2', opacity=0.2))\n    \n    \n    \n    \n    \n    \n#     Trace for average moving\n#     country_specific_fig.add_trace(go.Scatter(y=confirmed_group_melted_df[confirmed_group_melted_df['Country\/Region']==country].reset_index(drop=True).reset_index()['index'].apply(lambda x: (confirmed_group_melted_df[confirmed_group_melted_df['Country\/Region']==country].reset_index(drop=True).reset_index()['Confirmed'][x-7:x].sum())\/7 if x>7 else (confirmed_group_melted_df[confirmed_group_melted_df['Country\/Region']==country].reset_index(drop=True).reset_index()['Confirmed'][0:x].sum())\/7),\n#                                              x=confirmed_group_df.columns[4:],\n#                                              mode='lines', visible=False, name=country, showlegend=False,\n#                                              line = dict(dash=\"dash\"),\n#                                              hovertemplate = '<br><b>Date<\/b>: %{x}'+'<br><i>7-day moving avg.<\/i>: %{y}',\n#                                              ))\n    for i in [\"Active\", \"Recovered\", \"Deaths\"]:\n        country_specific_fig.add_trace(go.Scatter(y=df_dict[i][0][df_dict[i][0]['Country\/Region']==country].reset_index(drop=True).reset_index()['index'].apply(lambda x: (df_dict[i][0][df_dict[i][0]['Country\/Region']==country].reset_index(drop=True).reset_index()['Count'][x-7:x].sum())\/7 if x>7 else (df_dict[i][0][df_dict[i][0]['Country\/Region']==country].reset_index(drop=True).reset_index()['Count'][0:x].sum())\/7),\n                                             x=confirmed_group_df.columns[4:],\n                                             mode='lines', visible=(lambda x: True if x==\"US\" else False)(country),\n                                            name=i, showlegend=True,\n                                             line = dict(dash=\"solid\", color=df_dict[i][1]),\n                                             #hovertemplate = '<br><i>'+i+'<\/i>: %{y:.2f}',\n                                             ))\n\n\ncountry_specific_fig.update_layout(\nupdatemenus=[\n        dict(\n        buttons=list(\n            [dict(label = country,\n                  method = 'update',\n                  args = [{'visible': list(map(lambda x: True if 5*index<=x<=5*index+4 else False, list(range(100))))},\n                          {'title': \"Country :\"+country+\"<br>Position :\"+str(index+1),\n                           'showlegend':True}]) for index, country in enumerate(confirmed_group_df.sort_values(by=confirmed_group_df.columns[-1], ascending=False)['Country\/Region'].values.tolist()[:20])\n            ]),\n             type = \"dropdown\",\n             direction=\"down\",\n             pad={\"r\": 0, \"t\": 0},\n             showactive=True,\n             x=0,\n             xanchor=\"left\",\n             y=1.2,\n             yanchor=\"top\"\n        )\n])\n\n\ncountry_specific_fig.update_xaxes(showticklabels=False)\ncountry_specific_fig.update_layout(\n    #height=500, width=1100, \n                                     title_text=\"Number of Cases in top 50 Countries\",\n                                     title_x=0.5, title_font_size=15, paper_bgcolor=\"mintcream\",\n                                     legend=dict(orientation='h',yanchor='top',y=1.12,xanchor='right',x=1),\n                                     yaxis_title=\"Number of Cases\", hovermode='x unified',\n                                     xaxis=dict(title='Dates <br> The Position of countries is solely based on No. of Confirmed Cases<br>Please use the dropdown to select the country of choice'))\ncountry_specific_fig.show()","1f2392c8":"corr_mat_fig = go.Figure()\n\ncorr_mat_fig = go.Figure(data=go.Splom(\n                dimensions=[dict(label='Confirmed',\n                                 values=base_stats['Confirmed']),\n                            dict(label='Active',\n                                 values=base_stats['Active']),\n                            dict(label='Recovered',\n                                 values=base_stats['Recovered']),\n                            dict(label='Deaths',\n                                 values=base_stats['Deaths'])],\n                text=base_stats['Dates'],\n    diagonal_visible=False,\n    marker=dict(color='red',\n                showscale=False, # colors encode categorical variables\n                line_color='white', line_width=0.5)\n                ))\n\n\ncorr_mat_fig.update_layout(\n    #height=600, width=600, \n                                     title_text=\"Correlation Matrix for types of Cases\",\n                                     title_x=0.5, title_font_size=15, paper_bgcolor=\"mintcream\",\n                                     legend=dict(orientation='h',yanchor='top',y=1.12,xanchor='right',x=1))\n\ncorr_mat_fig.show()\n","87e209ef":"country_data = go.Figure()\ncountry_data.add_trace(go.Table(\n    header=dict(values=['Country','Confirmed','Active','Recovered','Deaths','Mortality Rate'],\n                fill = dict(color='#BDF6A9'),\n                align = ['left'] * 5),\n    cells=dict(values=[active_group_df[active_group_df[active_group_df.columns[-1]]==0]['Country\/Region'].values.tolist(),\n                       active_group_df[active_group_df[active_group_df.columns[-1]]==0]['Country\/Region'].apply(lambda x: confirmed_group_df[confirmed_group_df['Country\/Region']==x][confirmed_group_df.columns[-1]].values.tolist()[0]).values.tolist(),\n                       active_group_df[active_group_df[active_group_df.columns[-1]]==0]['Country\/Region'].apply(lambda x: active_group_df[active_group_df['Country\/Region']==x][active_group_df.columns[-1]].values.tolist()[0]).values.tolist(),\n                       active_group_df[active_group_df[active_group_df.columns[-1]]==0]['Country\/Region'].apply(lambda x: recoveries_group_df[recoveries_group_df['Country\/Region']==x][recoveries_group_df.columns[-1]].values.tolist()[0]).values.tolist(),\n                       active_group_df[active_group_df[active_group_df.columns[-1]]==0]['Country\/Region'].apply(lambda x: deaths_group_df[deaths_group_df['Country\/Region']==x][deaths_group_df.columns[-1]].values.tolist()[0]).values.tolist(),\n                       active_group_df[active_group_df[active_group_df.columns[-1]]==0]['Country\/Region'].apply(lambda x: deaths_group_df[deaths_group_df['Country\/Region']==x][deaths_group_df.columns[-1]].values.tolist()[0]\/confirmed_group_df[confirmed_group_df['Country\/Region']==x][confirmed_group_df.columns[-1]].values.tolist()[0]).values.tolist()\n                      ],\n               fill = dict(color='#DAFACE'),\n               align = ['left'] * 5)))\n\ncountry_data.update_layout(\n    #height=300, width=1100, \n    title_text=\"Countries with no active cases\",\n                                     title_x=0.5, title_font_size=20,\n                                     paper_bgcolor=\"mintcream\")\ncountry_data.show()","6da9a288":"corr = []\nfor i in base_stats.columns[2:]:\n    temp = []\n    for j in base_stats.columns[2:]:\n        temp.append(base_stats[j].sum()\/base_stats[i].sum())\n    corr.append(temp)\n\nff_heatmap = go.Figure(data=go.Heatmap(\n        z=corr,\n        x=base_stats.columns[2:],\n        y=base_stats.columns[2:],\n        colorscale='reds'))\n\nff_heatmap.update_layout(title_text='title', title_x=0.5, \n                   width=600, height=600,\n                   xaxis_showgrid=False,\n                   yaxis_showgrid=False,\n                   yaxis_autorange='reversed'\n                        )\nff_heatmap.update_layout(title_text=\"HeatMap showing Corr. between Cases\",\n                                     title_x=0.5, title_font_size=20,\n                                     paper_bgcolor=\"mintcream\")#height=300, width=1100,\nff_heatmap.show()","5a9b56e2":"# HeatMap","6d0df3ab":"# **COVID19 - Analysis, Interactive Visualizations and Predictions**","5b927af7":"# Cases over time","7a971d19":"# Country wise Visualization on a map","d796e32e":"# Latest status in a glance","0b8e754e":"# Cases over time across the Globe","8af8b9c0":"# Country wise Data Table","4ba2826b":"# Deaths vs confirmed Cases for Top 20 Countries","2d1b1693":"# Correlation Matrix","02c8807c":"# Predictions","d537581a":"# Preprocessing","30b9c19f":"# Countries with no active Cases","b29b8fd8":"![Covid19](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/9\/96\/3D_medical_animation_coronavirus_structure.jpg\/1200px-3D_medical_animation_coronavirus_structure.jpg)\nImage credits: [Wikimedia.org](http:\/\/commons.wikimedia.org\/)\n\n## Introduction to COVID19\nCoronavirus disease 2019 (COVID\u201119) is an infectious disease caused by **severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2)**. It was first identified in **December 2019** in **Wuhan**, Hubei, China, and has resulted in an ongoing pandemic. As of 16 September 2020, more than **29.6 million cases** have been reported across 188 countries and territories with more than **936,000 deaths**; more than 20.1 million people have recovered.<br>\n## How COVID19 Spreads\n![COVID19-spreading](https:\/\/www.lavision.de\/cms_images\/news\/bos-covid19.gif?m=1585647199)\nImage credits: [Lavision.de](https:\/\/www.lavision.de\/en\/news\/2020\/4302\/)\nThe virus is spread primarily via **small droplets from coughing, sneezing, and talking**. The droplets are usually not airborne; however, those standing in close proximity may inhale them and become infected. People may also become infected by touching a contaminated surface and then touching their face. The transmission may also occur through aerosols that can stay suspended in the air for longer periods of time in enclosed spaces. It is most contagious during the first three days after the onset of symptoms, although spread is possible before symptoms appear, and from people who are asymptomatic. <br>\n## COVID19 Diagnosis\n![COVID19-diagnosis](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/a\/a6\/Covid-19-Time-Course-05.gif\/525px-Covid-19-Time-Course-05.gif)\nImage credits: [Wikipedia.org](https:\/\/en.wikipedia.org\/wiki\/COVID-19_testing)\nThe standard method of diagnosis is by **real-time reverse transcription polymerase chain reaction (rRT-PCR)** from a nasopharyngeal swab. Chest CT imaging may also be helpful for diagnosis in individuals where there is a high suspicion of infection based on symptoms and risk factors, however guidelines do not recommend using it for routine.screening.\n## How can we stop COVID19\n![COVID19-stop](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/c\/c5\/Covid-19-curves-graphic-social-v3.gif\/1200px-Covid-19-curves-graphic-social-v3.gif)\nImage credit: [Wikimedia.org](https:\/\/commons.wikimedia.org\/wiki\/File:Covid-19-curves-graphic-social-v3.gif)\nTo prevent the spread of COVID-19:\n* **Clean your hands** often. Use soap and water, or an alcohol-based hand rub.\n* Maintain a safe distance from anyone who is coughing or sneezing.\n* **Wear a mask** when physical distancing is not possible.\n* **Don\u2019t touch** your eyes, nose or mouth.\n* Cover your nose and mouth with your bent elbow or a tissue when you cough or sneeze.\n* **Stay home** if you feel unwell.\n* If you have a fever, cough and difficulty breathing, seek medical attention.\n\n### Note:\n1. The dataset is provided by Jhon Hopking University at their [Github](https:\/\/github.com\/CSSEGISandData\/COVID-19) repo, and is updates daily by them.\n2. Check out my GitHub repo [COVID19---Analysis-Interactive-Visualizations-and-Prediction](https:\/\/github.com\/Surajkumar88\/COVID19---Analysis-Interactive-Visualizations-and-Prediction)\n\n### Sources\n1. [COVID-19 Data Repository by the Center for Systems Science and Engineering (CSSE) at Johns Hopkins University](https:\/\/github.com\/CSSEGISandData\/COVID-19)\n","a9148ffe":"# Number of countries affected over Time","097bd9d5":"<center><h2 style=\"color:black\">I'll be updating this kernel with more visualizations and latest data\ud83d\udcc8<\/h2><\/center>","2478c630":"### Check out my other Kernels:\n* <font style=\"color:chocolate; font-size:20px;line-height:24px;\"><a href='https:\/\/www.kaggle.com\/sandeep2812\/clustering-google-brain-ventilationpressure'>\ud83d\udcb8Google-Brain Ventilation pressure<\/a><\/font>\n* <font style=\"color:chocolate; font-size:20px;line-height:24px;\"><a href='https:\/\/www.kaggle.com\/sandeep2812\/best-multi-classificationmodel-xgb-classifier'>Best multiclass Classification model -XGB Classifier)<\/a><\/font>","c4c9f047":"# Weekly and monthly statistics","cb62421f":"### Version Log:\n\n* Version 21 (6 Jan 2021)  : Fixed some plots\n* Version 19 (9 Dec 2020)  : Added version log\n* Version 18 (30 Nov 2020) : Improved predictions\n* Version 16 (28 Nov 2020) : Added prediction\n* Version 5 (24 Sept 2020) : added GitHub source-code link\n* Version 3 (15 Sept 2020) : Minor tweaks\n* Version 1 (9 Sept 2020)  : First version with interactive visualizations","6d6f4af9":"# Daily Increase in Cases","acdc5af5":"# Important Ratios","52330d56":"# Breakdown of Cases for Top 20 countries","896a057b":"<center><h1 style=\"color:blue\">Don't forget to Upvote if you like it.\ud83d\ude0a<\/h1><\/center>\n<center>Feel free to fork and play with it.<\/center>\n<br><br>\n<center><a href=\"#Contents\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" width=100px>Go to Content<\/a><\/center>\n","e07d6ba4":"# Contents\n<hr>\n\n* [Importing Packages](#Importing-Packages)\n* [Importing Data](#Importing-Data)\n* [Preprocessing](#Preprocessing)\n* [Time Series of Basic Stats](#Time-Series-of-Basic-Stats)\n* [Latest status in a glance](#Latest-status-in-a-glance)\n* [Cases over time across the Globe](#Cases-over-time-across-the-Globe)\n* [Daily Increase in Cases](#Daily-Increase-in-Cases)\n* [Predictions](#Predictions)\n* [Country wise Data Table](#Country-wise-Data-Table)\n* [Country wise Visualization on a map](#Country-wise-Visualization-on-a-map)\n* [Important Ratios](#Important-Ratios)\n* [Treemap showing each country's contribution to total numbers](#Treemap-showing-each-country's-contribution-to-total-numbers)\n* [Weekly and monthly statistics](#Weekly-and-monthly-statistics)\n* [Cases over time](#Cases-over-time)\n* [Cases in Top 10 countries over time](#Cases-in-Top-10-countries-over-time)\n* [Deaths vs confirmed Cases for Top 20 Countries](#Deaths-vs-confirmed-Cases-for-Top-20-Countries)\n* [Number of countries affected over Time](#Number-of-countries-affected-over-Time)\n* [Breakdown of Cases for Top 20 countries](#Breakdown-of-Cases-for-Top-20-countries)\n* [Correlation Matrix](#Correlation-Matrix)\n* [Countries with no active Cases](#Countries-with-no-active-Cases)","4559d1e5":"# Treemap showing each country's contribution to total numbers","b0714f28":"### Follow me:\n* <font style=\"color:green; font-size:20px;line-height:24px;\">Follow me on <a href='https:\/\/sandeepraji.wordpress.com\/'>Wordpress<\/a>.<\/font>\n* <font style=\"color:green; font-size:20px;line-height:24px;\">Follow me on <a href='https:\/\/www.kaggle.com\/sandeep2812'>Kaggle<\/a>.<\/font>","73c4a04f":"# Cases in Top 10 countries over time","f2028eb0":"# Importing Data\n\n* All datasets are sourced from [COVID-19 Data Repository by the Center for Systems Science and Engineering (CSSE) at Johns Hopkins University](https:\/\/github.com\/CSSEGISandData\/COVID-19) which is updated daily by them.\n* Click [here](https:\/\/coronavirus.jhu.edu\/map.html) to visit dashboard created by the Center for Systems Science and Engineering (CSSE) at Johns Hopkins University.","e760cfc6":"# Time Series of Basic Stats","67d40750":"# Importing Packages\n\n* Pandas - for handling datasets\n* Numpy - for operations on dataframes\n* Plotly - for creating visualizations\n* Scikit-learn - for creating models"}}