{"cell_type":{"7f29de7e":"code","91b69f3d":"code","1469b71a":"code","002f577b":"code","d9dea22e":"code","efa8475f":"code","a58e8bff":"code","7522d10e":"code","f95f69b2":"code","1d322536":"code","d5aa35cc":"code","1b94bca8":"markdown","4c00f4a0":"markdown","9056b932":"markdown","98eb64fa":"markdown","40749e01":"markdown","c9170baf":"markdown","b7f9311c":"markdown"},"source":{"7f29de7e":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport glob\n\nfrom scipy.stats import describe\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","91b69f3d":"LABELS = [\"isFraud\"]\nall_files = glob.glob(\"..\/input\/lgmodels\/*.csv\")\nscores = np.zeros(len(all_files))\nfor i in range(len(all_files)):\n    scores[i] = float('.'+all_files[i].split(\".\")[3])","1469b71a":"top = scores.argsort()[::-1]\nfor i, f in enumerate(top):\n    print(i,scores[f],all_files[f])","002f577b":"outs = [pd.read_csv(all_files[f], index_col=0) for f in top]\nconcat_sub = pd.concat(outs, axis=1)\ncols = list(map(lambda x: \"m\" + str(x), range(len(concat_sub.columns))))\nconcat_sub.columns = cols","d9dea22e":"# check correlation\ncorr = concat_sub.corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(len(cols)+2, len(cols)+2))\n\n# Draw the heatmap with the mask and correct aspect ratio\n_ = sns.heatmap(corr,mask=mask,cmap='prism',center=0, linewidths=1,\n                annot=True,fmt='.4f', cbar_kws={\"shrink\":.2})","efa8475f":"mean_corr = corr.mean()\nmean_corr = mean_corr.sort_values(ascending=True)\nmean_corr = mean_corr[:6]\nmean_corr","a58e8bff":"m_gmean1 = 0\nfor n in mean_corr.index:\n    m_gmean1 += np.log(concat_sub[n])\nm_gmean1 = np.exp(m_gmean1\/len(mean_corr))","7522d10e":"rank = np.tril(corr.values,-1)\nrank[rank<0.92] = 1\nm = (rank>0).sum() - (rank>0.97).sum()\nm_gmean2, s = 0, 0\nfor n in range(m):\n    mx = np.unravel_index(rank.argmin(), rank.shape)\n    w = (m-n)\/m\n    m_gmean2 += w*(np.log(concat_sub.iloc[:,mx[0]])+np.log(concat_sub.iloc[:,mx[1]]))\/2\n    s += w\n    rank[mx] = 1\nm_gmean2 = np.exp(m_gmean2\/s)","f95f69b2":"top_mean = 0\ns = 0\nfor n in [0,1,3,7,26]:\n    top_mean += concat_sub.iloc[:,n]*scores[top[n]]\n    s += scores[top[n]]\ntop_mean \/= s","1d322536":"m_gmean = np.exp(0.3*np.log(m_gmean1) + 0.2*np.log(m_gmean2) + 0.5*np.log(top_mean))\ndescribe(m_gmean)","d5aa35cc":"concat_sub['isFraud'] = m_gmean\nconcat_sub[['isFraud']].to_csv('stack_gmean.csv')","1b94bca8":"# Weighted GMEAN by inverse correlation","4c00f4a0":"# Select models with low average correlation","9056b932":"# Top Blends weighted by score\nBased on: https:\/\/www.kaggle.com\/muhakabartay\/0-8518-what-proper-weights-give-ieee-int-blend","98eb64fa":"# GMEAN of models with low average correlation","40749e01":"# Stacking Approach using GMEAN","c9170baf":"Credits to the Experts <br>\nAshish Gupta: [24+ top lgbm models outputs](https:\/\/www.kaggle.com\/roydatascience\/lgmodels)<br>\nKonstantin: [ieee-internal-blend](https:\/\/www.kaggle.com\/kyakovlev\/ieee-internal-blend)<br>","b7f9311c":"# GMEAN Final Stacking"}}