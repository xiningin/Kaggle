{"cell_type":{"2fcc463b":"code","7c36f842":"code","2798e4d3":"code","c685f7b5":"code","ce1e48fa":"code","ad2d3ed0":"code","e7e62dbb":"code","5ed3131f":"code","e490a877":"code","facade71":"code","575fc224":"code","888e0694":"code","1f282da2":"code","210a8caa":"code","859e0694":"code","703b9628":"code","09fea490":"code","57624f04":"code","5de7490f":"code","50db2325":"code","79666d98":"code","a7415841":"code","6ed75fe0":"code","864cd853":"code","bb169fa2":"code","967ebe4b":"code","bc4953b4":"code","45dcef1a":"code","8eca0152":"code","9f8512b6":"code","ebae3992":"markdown","d1114010":"markdown","fbbdb484":"markdown","b573bcda":"markdown","698db6ff":"markdown","2197e6c8":"markdown","8b495f82":"markdown","d5b932ef":"markdown","d9b6b2cc":"markdown","85f4f5de":"markdown","6d205b1e":"markdown","a1b073ee":"markdown"},"source":{"2fcc463b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport warnings\nwarnings.simplefilter(\"ignore\")","7c36f842":"class1 = pd.read_csv(\"..\/input\/zoo-animal-classification\/class.csv\")\nclass1","2798e4d3":"df = pd.read_csv(\"..\/input\/zoo-animal-classification\/zoo.csv\")\ndf.head()","c685f7b5":"df.shape","ce1e48fa":"df[\"class_type\"].unique()","ad2d3ed0":"list(df)","e7e62dbb":"df.drop(\"animal_name\", axis=1, inplace=True)\ndf.head()","5ed3131f":"# Checking for missing values in the dataset\ndf.isna().sum()","e490a877":"df.dtypes","facade71":"# Having a look at the correlation matrix\n\nfig, ax = plt.subplots(figsize=(15,10))\nsns.heatmap(df.corr(), annot=True, fmt='.1g', cmap=\"viridis\", cbar=False, linewidths=0.5, linecolor='black');","575fc224":"NumberofPlayers = df.groupby(pd.Grouper(key='class_type')).size().reset_index(name='count')\nfig = px.treemap(NumberofPlayers, path=['class_type'], values='count')\nfig.update_layout(title_text='Animal Class Types Distribution Tree',\n                  title_x=0.5, title_font=dict(size=25))\nfig.update_traces(textinfo=\"label+value\")\n\nfig.show()","888e0694":"x = df['class_type'].value_counts().index.tolist()\ny = df['class_type'].value_counts().tolist()\n\nfig = px.bar(x=x, y=y, color=x, title=\"Animal Class Type Distribution\",\n             labels={\n                'x': 'Animal Class',\n                'y': 'count'\n                },)\nfig.show()","1f282da2":"labels = [\"Type 1\",\"Type 2\",\"Type 3\",\"Type 4\",\"Type 5\",\"Type 6\",\"Type 7\"]\nvalues = df['class_type'].value_counts().tolist()\n\npx.pie(df, values=values, names=labels, title=\"Animal Class Type Distribution Pie Chart\")","210a8caa":"plt.style.use(\"ggplot\")\nfig, ax = plt.subplots(figsize=(8,6))\nsns.countplot(df[\"legs\"]);","859e0694":"plt.style.use(\"ggplot\")\nfig, ax =plt.subplots(5,3, figsize=(15,25)) \n\nsns.countplot(df[\"domestic\"], palette=\"viridis\", ax=ax[0,0])\nsns.countplot(df[\"hair\"], palette=\"viridis\", ax=ax[0,1])\nsns.countplot(df[\"feathers\"], palette=\"viridis\", ax=ax[0,2])\n\nsns.countplot(df[\"eggs\"], palette=\"viridis\", ax=ax[1,0])\nsns.countplot(df[\"milk\"], palette=\"viridis\", ax=ax[1,1])\nsns.countplot(df[\"airborne\"], palette=\"viridis\", ax=ax[1,2])\n\nsns.countplot(df[\"aquatic\"], palette=\"viridis\", ax=ax[2,0])\nsns.countplot(df[\"predator\"], palette=\"viridis\", ax=ax[2,1])\nsns.countplot(df[\"toothed\"], palette=\"viridis\", ax=ax[2,2])\n\nsns.countplot(df[\"backbone\"], palette=\"viridis\", ax=ax[3,0])\nsns.countplot(df[\"breathes\"], palette=\"viridis\", ax=ax[3,1])\nsns.countplot(df[\"venomous\"], palette=\"viridis\", ax=ax[3,2])\n\nsns.countplot(df[\"fins\"], palette=\"viridis\", ax=ax[4,0])\nsns.countplot(df[\"tail\"], palette=\"viridis\", ax=ax[4,1])\nsns.countplot(df[\"catsize\"], palette=\"viridis\", ax=ax[4,2]);","703b9628":"# X data\nX = df.drop(\"class_type\", axis=1)\nX.head()","09fea490":"# y data\ny = df[\"class_type\"]\ny.head()","57624f04":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","5de7490f":"len(X_train), len(X_test)","50db2325":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train, y_train)","79666d98":"LinearRegressionScore = lr.score(X_test, y_test)\nprint(\"Accuracy obtained by Linear Regression model:\",LinearRegressionScore*100)","a7415841":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 100)\nrf.fit(X_train,y_train)","6ed75fe0":"RandomForestClassifierScore = rf.score(X_test, y_test)\nprint(\"Accuracy obtained by Random Forest Classifier model:\",RandomForestClassifierScore*100)","864cd853":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(4)\nknn.fit(X_train,y_train)","bb169fa2":"KNeighborsClassifierScore = knn.score(X_test, y_test)\nprint(\"Accuracy obtained by K Neighbors Classifier model:\",KNeighborsClassifierScore*100)","967ebe4b":"from catboost import CatBoostClassifier\ncat = CatBoostClassifier(iterations=10)\ncat.fit(X_train, y_train);","bc4953b4":"CatBoostClassifierScore = cat.score(X_test,y_test)\nprint(\"Accuracy obtained by CatBoost Classifier model:\",CatBoostClassifierScore*100)","45dcef1a":"from sklearn.ensemble import GradientBoostingClassifier\ngb = GradientBoostingClassifier()\ngb.fit(X_train, y_train)","8eca0152":"GradientBoostingClassifierScore = gb.score(X_test,y_test)\nprint(\"Accuracy obtained by Gradient Boosting Classifier model:\",GradientBoostingClassifierScore*100)","9f8512b6":"x = [\"K Neighbors Classifier\",\n     \"Random Forest Classifier\",\n     \"Linear Regression\",\n     \"CatBoost Classifier\", \n     \"Gradient Boosting Classifier\"]\n\ny = [KNeighborsClassifierScore,\n     RandomForestClassifierScore,\n     LinearRegressionScore,\n     CatBoostClassifierScore, \n     GradientBoostingClassifierScore]\n\nfig = px.bar(x=x, y=y, color=x, title=\"Model Comparison - Model Accuracy\",\n             labels={\n                'x': 'Model',\n                'y': 'Model Accuracy'},)\nfig.show()","ebae3992":"* Most of the animals have 4 legs\n* Least number of animals have 5 legs","d1114010":"## Gradient Boosting Classifier","fbbdb484":"# Zoo Animal Classification ","b573bcda":"## Random Forest Classifier","698db6ff":"## Importing Libraries","2197e6c8":"## K Neighbors Classifier","8b495f82":"## Linear Regression","d5b932ef":"## Splitting the data into training and test datasets\nHere, we are trying to predict the class type of the animal using the given data. Hence, the `class_type` will be the y label and rest of the data will be the X or the input data.","d9b6b2cc":"The 7 Class Types are:\n\n`1. Mammal` \n\n`2. Bird` \n\n`3. Reptile`\n\n`4. Fish`\n\n`5. Amphibian` \n\n`6. Bug`\n\n`7. Invertebrate`","85f4f5de":"## Loading up the data","6d205b1e":"## CatBoost Classifier","a1b073ee":"#### If you like my work, It will be really great of you to upvote this notebook!\n#### If not then you leaving a comment on what do I need to work on and improve will be really helpful!"}}