{"cell_type":{"bab9b425":"code","d39d0a31":"code","4f6a318e":"code","148c3014":"code","b0c2391f":"code","d2ad4837":"code","d82a4406":"code","133f226b":"code","a83e6a14":"code","01fee573":"code","3cbecd48":"code","739bc8a7":"code","5ef09c5e":"code","a4319c14":"code","e6492838":"code","d76f4b0e":"code","2e89e4b9":"code","983b1c70":"code","41689202":"code","13d008b1":"code","e3b32a1b":"code","31c074e2":"code","e50aceba":"code","192c8c32":"code","bcf5f53b":"code","e5d0c022":"code","082b6255":"code","aaa74499":"code","b07d2558":"code","d6ddaac7":"code","f2b48eb8":"code","dad62efb":"code","5b9bea3a":"code","12576f15":"code","3768918c":"code","cb224a93":"code","b5b7eafd":"code","6d3b450c":"code","76518be6":"code","ab3bef0d":"code","14c20bf5":"code","9e998f87":"code","20dd885f":"code","af56f854":"code","1f57515e":"code","687ff4a2":"markdown","b7739469":"markdown","9c04d858":"markdown","fa9a8c09":"markdown","07fdab9f":"markdown","adf4a3b2":"markdown","01bb96cf":"markdown","c8cf0b04":"markdown","b1584cad":"markdown","71d34231":"markdown","12e33d7e":"markdown","d5191c13":"markdown","f64708a0":"markdown","53eb2b18":"markdown","57efa5ea":"markdown","83f87c71":"markdown","c726ba4a":"markdown","1cf3ae47":"markdown","cf7b7519":"markdown","8cca6eea":"markdown","141af25e":"markdown","65ac442f":"markdown","1d4bcd9d":"markdown","75e166b4":"markdown","4f20e07e":"markdown","46522cd7":"markdown","330b6d93":"markdown","3c936df5":"markdown","48744155":"markdown","1014dd4c":"markdown"},"source":{"bab9b425":"#### IMPORT LIBRARIES\n\n\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy.stats import skew\nfrom scipy.special import boxcox1p\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nfrom sklearn.ensemble import GradientBoostingRegressor\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d39d0a31":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntraindf = train.copy()\ntestdf = test.copy()","4f6a318e":"train.head()","148c3014":"test.head()","b0c2391f":"#### I like colors :-9\n\ntrainshape = (\"Train Data:\",train.shape[0],\"obs, and\", train.shape[1], \"features\" )\nprint(\"\\033[95m {}\\033[00m\" .format(trainshape))\ntestshape = (\"Test Data:\",test.shape[0],\"obs, and\", test.shape[1], \"features\" )\nprint(\"\\033[95m {}\\033[00m\" .format(testshape))","d2ad4837":"# save id \ntrain_id = train[\"Id\"]\ntest_id = test[\"Id\"]\n\n# drop id\ntrain.drop(\"Id\" , axis = 1 , inplace = True)\ntest.drop(\"Id\" , axis = 1 , inplace = True)","d82a4406":"train.describe().T","133f226b":"# Focus Target Variable\n\nsns.distplot(train[\"SalePrice\"] , color = \"g\", bins = 60 , hist_kws={\"alpha\": 0.4});","a83e6a14":"sns.distplot(np.log1p(train[\"SalePrice\"]) , color = \"g\", bins = 60 , hist_kws={\"alpha\": 0.4});","01fee573":"corrmatrix = train.corr()\nplt.figure(figsize = (10,6))\ncolumnss = corrmatrix.nlargest(8, \"SalePrice\")[\"SalePrice\"].index\ncm = np.corrcoef(train[columnss].values.T)\nsns.set(font_scale = 1.1)\nhm = sns.heatmap(cm, cbar = True, annot = True, square = True, cmap = \"RdPu\" ,  fmt = \".2f\", annot_kws = {\"size\": 10},\n                 yticklabels = columnss.values, xticklabels = columnss.values)\nplt.show()","3cbecd48":"f, ax = plt.subplots(figsize = (10, 7))\nsns.boxplot(x = \"OverallQual\", y = \"SalePrice\", data = train);","739bc8a7":"sns.jointplot(x = train[\"GrLivArea\"], y = train[\"SalePrice\"], kind = \"reg\");","5ef09c5e":"sns.boxplot(x = train[\"GarageCars\"], y = train[\"SalePrice\"]);","a4319c14":"train = train.drop(train[(train[\"GrLivArea\"] > 4000) \n                         & (train[\"SalePrice\"] < 200000)].index).reset_index(drop = True)\ntrain = train.drop(train[(train[\"GarageCars\"] > 3) \n                         & (train[\"SalePrice\"] < 300000)].index).reset_index(drop = True)","e6492838":"sns.jointplot(x = train[\"GrLivArea\"], y = train[\"SalePrice\"], kind = \"reg\");","d76f4b0e":"sns.boxplot(x = train[\"GarageCars\"], y = train[\"SalePrice\"]);","2e89e4b9":"df = pd.concat((train, test)).reset_index(drop = True)\ndf.drop([\"SalePrice\"], axis = 1, inplace = True)\ndf.shape","983b1c70":"#### Focus missing values\n\ndf.isna().sum().nlargest(35)","41689202":"sns.set_style(\"whitegrid\")\nf , ax = plt.subplots(figsize = (12, 6))\nmiss = round(df.isnull().mean()*100,2)\nmiss = miss[miss > 0]\nmiss.sort_values(inplace = True)\nmiss.plot.bar(color = \"g\")\nax.set(title=\"Percent missing data by variables\");","13d008b1":"some_miss_columns = [\"PoolQC\",\"MiscFeature\",\"Alley\",\"Fence\",\"FireplaceQu\",\"GarageType\",\"GarageFinish\",\"GarageQual\",\"GarageCond\",\n                  \"BsmtQual\",\"BsmtCond\",\"BsmtExposure\",\"BsmtFinType1\",\"BsmtFinType2\",\"MasVnrType\",\"MSSubClass\"]\n\nfor i in some_miss_columns :\n        df[i].fillna(\"None\" , inplace = True)","e3b32a1b":"df[\"Functional\"] = df[\"Functional\"].fillna(\"Typ\")","31c074e2":"some_miss_columns2 = [\"MSZoning\", \"BsmtFullBath\", \"BsmtHalfBath\", \"Utilities\",\"MSZoning\",\n                      \"Electrical\", \"KitchenQual\", \"SaleType\",\"Exterior1st\", \"Exterior2nd\",\"MasVnrArea\"]\nfor i in some_miss_columns2:\n    df[i].fillna(df[i].mode()[0], inplace = True)","e50aceba":"some_miss_columns3 = [\"GarageYrBlt\", \"GarageArea\", \"GarageCars\",\"BsmtFinSF1\",\"BsmtFinSF2\",\"BsmtUnfSF\",\"TotalBsmtSF\"]\nfor i in some_miss_columns3 :\n    df[i] = df[i].fillna(0)","192c8c32":"df[\"LotFrontage\"] = df.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))","bcf5f53b":"df.isna().sum().nlargest(3)","e5d0c022":"Nm = [\"MSSubClass\",\"MoSold\",\"YrSold\"]\nfor col in Nm:\n    df[col] = df[col].astype(str)","082b6255":"lbe = LabelEncoder()\nencodecolumns = (\"FireplaceQu\",\"BsmtQual\",\"BsmtCond\",\"ExterQual\",\"ExterCond\",\"HeatingQC\",\"GarageQual\",\n                \"GarageCond\",\"PoolQC\",\"KitchenQual\",\"BsmtFinType1\",\"BsmtFinType2\",\"Functional\",\"Fence\",\n                \"BsmtExposure\",\"GarageFinish\",\"LandSlope\",\"LotShape\",\"PavedDrive\",\"Street\",\"Alley\",\n                \"CentralAir\",\"MSSubClass\",\"OverallCond\",\"YrSold\",\"MoSold\")\nfor i in encodecolumns :\n    lbe.fit(list(df[i].values))\n    df[i] = lbe.transform(list(df[i].values))","aaa74499":"train[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\ny = train.SalePrice.values\ny[:5]","b07d2558":"numeric = df.dtypes[df.dtypes != \"object\"].index\nskewed_var = df[numeric].apply(lambda x: skew(x.dropna())).sort_values(ascending = False)\nskewness = pd.DataFrame({\"Skewed Features\" :skewed_var})\nskewness.head()","d6ddaac7":"skewness = skewness[abs(skewness) > 0.75]\nskewed_var2 = skewness.index\nfor i in skewed_var2:\n    df[i] = boxcox1p(df[i], 0.15)\n    df[i] += 1","f2b48eb8":"df = pd.get_dummies(df)\ndf.head()","dad62efb":"X_train = df[:train.shape[0]]\nX_test = df[train.shape[0]:]","5b9bea3a":"dff = df.copy()\n##df_standardize = StandardScaler().fit_transform(dff)\n##I didn't standardize it again because the data is already close to the standard.\npca = PCA()\npca_fit = pca.fit_transform(dff)\npca = PCA().fit(dff)\nplt.plot(np.cumsum(pca.explained_variance_ratio_));","12576f15":"pca = PCA(n_components = 30)\npca_fit = pca.fit_transform(dff)\npca_df = pd.DataFrame(data = pca_fit)\npca_df.head()","3768918c":"n_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle = True, random_state = 42).get_n_splits(X_train.values)\n    rmse = np.sqrt(-cross_val_score(model, X_train.values, y, scoring = \"neg_mean_squared_error\", cv = kf))\n    return(rmse)","cb224a93":"model_xgb = xgb.XGBRegressor(colsample_bytree = 0.2, gamma = 0.0 ,\n                             learning_rate = 0.05, max_depth = 6, \n                             min_child_weight = 1.5, n_estimators = 7200,\n                             reg_alpha = 0.9, reg_lambda = 0.6,\n                             subsample = 0.2,seed = 42,\n                             random_state = 7)\n\nmodel_gbm = GradientBoostingRegressor(n_estimators = 3000, learning_rate = 0.05,\n                                   max_depth = 4, max_features = \"sqrt\",\n                                   min_samples_leaf = 15, min_samples_split = 10, \n                                   loss = \"huber\", random_state = 5)","b5b7eafd":"score = rmsle_cv(model_xgb)\nprint(\"XGBoost score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\nscore = rmsle_cv(model_gbm)\nprint(\"Gradient Boosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","6d3b450c":"## we need this func\n\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","76518be6":"model_xgb.fit(X_train, y)\nxgb_train_pred = model_xgb.predict(X_train)\nxgb_pred = np.expm1(model_xgb.predict(X_test))\nprint(rmsle(y, xgb_train_pred))","ab3bef0d":"xgb_pred[:5]","14c20bf5":"model_gbm.fit(X_train, y)\ngbm_train_pred = model_gbm.predict(X_train)\ngbm_pred = np.expm1(model_gbm.predict(X_test.values))\nprint(rmsle(y, gbm_train_pred))","9e998f87":"gbm_pred[:5]","20dd885f":"trybest = (0.5 * xgb_pred ) + (0.5 * gbm_pred)","af56f854":"submission = pd.DataFrame({\"Id\": test_id, \"SalePrice\": trybest})\nsubmission.head(5)","1f57515e":"submission.to_csv(\"submission.csv\", index = False)","687ff4a2":"![](http:\/\/media.giphy.com\/media\/mofrKGJMwOHM4\/giphy.gif)","b7739469":"It looks like better :) \n\nNow, let's look at the best 8 correlation with heatmap.","9c04d858":"Checking performance of base models by evaluating the cross-validation RMSLE error.","fa9a8c09":"#### - **GBM (Gradient Boosting Machines)**","07fdab9f":"### Lets meet variables\n\n* **SalePrice** : The property's sale price in dollars. This is target variable for predict\n* **MSSubClass**: The building class\n* **MSZoning**: The general zoning classification\n* **LotFrontage**: Linear feet of street connected to property\n* **LotArea**: Lot size in square feet\n* **Street**: Type of road access\n* **Alley**: Type of alley access\n* **LotShape**: General shape of property\n* **LandContour**: Flatness of the property\n* **Utilities**: Type of utilities available\n* **LotConfig**: Lot configuration\n* **LandSlope**: Slope of property\n* **Neighborhood**: Physical locations within Ames city limits\n* **Condition1**: Proximity to main road or railroad\n* **Condition2**: Proximity to main road or railroad (if a second is present)\n* **BldgType**: Type of dwelling\n* **HouseStyle**: Style of dwelling\n* **OverallQual**: Overall material and finish quality\n* **OverallCond**: Overall condition rating\n* **YearBuilt**: Original construction date\n* **YearRemodAdd**: Remodel date\n* **RoofStyle**: Type of roof\n* **RoofMatl**: Roof material\n* **Exterior1st**: Exterior covering on house\n* **Exterior2nd**: Exterior covering on house (if more than one material)\n* **MasVnrType**: Masonry veneer type\n* **MasVnrArea**: Masonry veneer area in square feet\n* **ExterQual**: Exterior material quality\n* **ExterCond**: Present condition of the material on the exterior\n* **Foundation**: Type of foundation\n* **BsmtQual**: Height of the basement\n* **BsmtCond**: General condition of the basement\n* **BsmtExposure**: Walkout or garden level basement walls\n* **BsmtFinType1**: Quality of basement finished area\n* **BsmtFinSF1**: Type 1 finished square feet\n* **BsmtFinType2**: Quality of second finished area (if present)\n* **BsmtFinSF2**: Type 2 finished square feet\n* **BsmtUnfSF**: Unfinished square feet of basement area\n* **TotalBsmtSF**: Total square feet of basement area\n* **Heating**: Type of heating\n* **HeatingQC**: Heating quality and condition\n* **CentralAir**: Central air conditioning\n* **Electrical**: Electrical system\n* **1stFlrSF**: First Floor square feet\n* **2ndFlrSF**: Second floor square feet\n* **LowQualFinSF**: Low quality finished square feet (all floors)\n* **GrLivArea**: Above grade (ground) living area square feet\n* **BsmtFullBath**: Basement full bathrooms\n* **BsmtHalfBath**: Basement half bathrooms\n* **FullBath**: Full bathrooms above grade\n* **HalfBath**: Half baths above grade\n* **Bedroom**: Number of bedrooms above basement level\n* **Kitchen**: Number of kitchens\n* **KitchenQual**: Kitchen quality\n* **TotRmsAbvGrd**: Total rooms above grade (does not include bathrooms)\n* **Functional**: Home functionality rating\n* **Fireplaces**: Number of fireplaces\n* **FireplaceQu**: Fireplace quality\n* **GarageType**: Garage location\n* **GarageYrBlt**: Year garage was built\n* **GarageFinish**: Interior finish of the garage\n* **GarageCars**: Size of garage in car capacity\n* **GarageArea**: Size of garage in square feet\n* **GarageQual**: Garage quality\n* **GarageCond**: Garage condition\n* **PavedDrive**: Paved driveway\n* **WoodDeckSF**: Wood deck area in square feet\n* **OpenPorchSF**: Open porch area in square feet\n* **EnclosedPorch**: Enclosed porch area in square feet\n* **3SsnPorch**: Three season porch area in square feet\n* **ScreenPorch**: Screen porch area in square feet\n* **PoolArea**: Pool area in square feet\n* **PoolQC**: Pool quality\n* **Fence**: Fence quality\n* **MiscFeature**: Miscellaneous feature not covered in other categories\n* **MiscVal**: Value of miscellaneous feature\n* **MoSold**: Month Sold\n* **YrSold**: Year Sold\n* **SaleType**: Type of sale\n* **SaleCondition**: Condition of sale","adf4a3b2":"As can be seen, there are many missing observations in the data.\n\n#### - **Filling missing values**\n\nFor a few columns there is lots of NaN entries.\n\nHowever, reading the data description we find this is not missing data:\n\nFor PoolQC, NaN is not missing data but means no pool, likewise for Fence, FireplaceQu etc.\n\nNow, lets filling NA values :)","01bb96cf":"Now we will apply box cox transformation to these skewed values. So what is box cox transformation?","c8cf0b04":"# Predicting House Prices XGBoost + GBM Models\n\n\n\n**Bugra Sebati E.** - **July 2021**","b1584cad":"#### - **Dummy Variables**\n\nNext step is dummy variables ! \n\nIn statistics and econometrics, particularly in regression analysis, a dummy variable is one that takes only the value 0 or 1 to indicate the absence or presence of some categorical effect that may be expected to shift the outcome.","71d34231":"#### - **Outliers**\n\nCan you see two points at the bottom right on GrLivArea. Yes ! It's outliers !\n\nCar garages result in less Sale Price? That doesn't make much sense.\n\nWe need to remove outliers.","12e33d7e":"We should transform for some variables.","d5191c13":"#### - **Log Transform for SalePrice**\n\nWe must apply logarithmic transformation to our target variable.Because ML models work better with normal distribution.","f64708a0":"As we can see at the above, the target variable SalePrice is not distributed normally.\n\nThis can reduce the performance of the ML regression models because some of them assume normal distribution.\n\nTherfore we need to log transform.","53eb2b18":"#### - **XGBoost**","57efa5ea":"I didn't have much experience with PCA , so I just wanted to try it. Your positive and negative opinions are important to me :)\n\nNow, we will predict models ! Firstly start Cross-validation with k-folds","83f87c71":"#### - **Label Encoder**\n\nConvert this kind of categorical text data into model-understandable numerical data, we use the Label Encoder class.","c726ba4a":"Now let's look at the distribution of the variable with the 3 highest correlations.","1cf3ae47":"You can get better scores with different models and combinations. I just wanted to try these 2 models and a combination in this notebook.\n\n**Thanks for attention ! ;)**","cf7b7519":"#### - **SUBMISSION**","8cca6eea":"It should look better.","141af25e":"#### Since we learn variables, we can start now...\nIf you like this notebook,dont forget to upvote :) **Thanks !**","65ac442f":"![](http:\/\/media1.tenor.com\/images\/286156bd33ce64d69f6a2367557392b5\/tenor.gif?itemid=10804810)\n","1d4bcd9d":"#### - **Box Cox Transformation** \n\n A Box Cox transformation is a transformation of a non-normal dependent variables into a normal shape. Normality is an important assumption for many statistical techniques; if your data isn\u2019t normal, applying a Box-Cox means that you are able to run a broader number of tests.\n \nReferences : Box, G. E. P. and Cox, D. R. (1964). An analysis of transformations.\n\nLets do it.","75e166b4":"With about 30 variables, we can explain 90% of the variance in the dataset.How do we do that ?","4f20e07e":"#### - **Fixing \"Skewed\" features**\n\nWe need to fix all of the skewed data to be more normal so that our models will be more accurate when making predictions.","46522cd7":"Now, we are ready to ML, but i want to try PCA. So what is the PCA ?\n","330b6d93":"#### **PCA (Principal component analysis)**\nPCA is used in exploratory data analysis and for making predictive models. It is commonly used for dimensionality reduction by projecting each data point onto only the first few principal components to obtain lower-dimensional data while preserving as much of the data's variation as possible. The first principal component can equivalently be defined as a direction that maximizes the variance of the projected data. Lets try it.\n\n**Note** : You need to **standardize** the data before using PCA.","3c936df5":"## Introduction\n\nFor this competiton, we are given a data set of 1460 homes, each with a few dozen features of types: float, integer, and categorical. We are tasked with building a regression model to estimate a home's sale price. Total number of attributes equals 81, of which 36 is quantitative, 43 categorical + Id and SalePrice.\n\n**What you can find on this notebook?**\n\n* Understanding the data\n* Exploratory Data Analysis\n* Data Preprocessing\n* PCA Trial\n* GBM and XGBoost Models\n* Submission","48744155":"We've filled out all the missing data.\n\nLet's control.","1014dd4c":"They Look succesfull.\n\nNow, we need to concanete train and test data for some cleaning operations."}}