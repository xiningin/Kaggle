{"cell_type":{"a78298d1":"code","037f0475":"code","69b8f8a3":"code","68b27e57":"code","a869e19e":"code","a05d1782":"code","2f3480ee":"code","269a4639":"code","a9cc02c5":"code","dadc31ac":"markdown","c3396b69":"markdown","e4f92b71":"markdown","5bbba8b2":"markdown","b2b42df9":"markdown","9992a84c":"markdown","faf321ed":"markdown","8aef5722":"markdown"},"source":{"a78298d1":"!pip install scikit-learn","037f0475":"import numpy as np\nimport pandas as pd\n\nimport sklearn.metrics as metrics\nfrom sklearn.model_selection import TimeSeriesSplit\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import make_scorer\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import StackingRegressor\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingRegressor","69b8f8a3":"data = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv')","68b27e57":"data.head()","a869e19e":"def regression_results(y_true, y_pred):\n    # Regression metrics\n    explained_variance=metrics.explained_variance_score(y_true, y_pred)\n    mean_absolute_error=metrics.mean_absolute_error(y_true, y_pred) \n    mse=metrics.mean_squared_error(y_true, y_pred) \n    mean_squared_log_error=metrics.mean_squared_log_error(y_true, y_pred)\n    median_absolute_error=metrics.median_absolute_error(y_true, y_pred)\n    r2=metrics.r2_score(y_true, y_pred)\n    print('explained_variance: ', round(explained_variance,4))    \n    print('mean_squared_log_error: ', round(mean_squared_log_error,4))\n    print('r2: ', round(r2,4))\n    print('MAE: ', round(mean_absolute_error,4))\n    print('MSE: ', round(mse,4))\n    print('RMSE: ', round(np.sqrt(mse),4))","a05d1782":"def rmse(actual, predict):\n    predict = np.array(predict)\n    actual = np.array(actual)\n    distance = predict - actual\n    square_distance = distance ** 2\n    mean_square_distance = square_distance.mean()\n    score = np.sqrt(mean_square_distance)\n    return score\nrmse_score = make_scorer(rmse, greater_is_better = False)","2f3480ee":"NUM_SEED = 23\nmodels = []\nfor i in ['Finland', 'Norway', 'Sweden']:\n    for j in ['KaggleMart', 'KaggleRama']:\n        for l in ['Kaggle Mug', 'Kaggle Hat', 'Kaggle Sticker']:\n            df = data[(data['country'] == i) & (data['store']==j) & (data['product']==l)][['date','num_sold']]\n            df['date'] = pd.to_datetime(df['date'])\n            df['year'] = df.date.dt.year\n            df['month'] = df.date.dt.month\n            df['day'] = df.date.dt.day\n            df['dayofyear'] = df.date.dt.dayofyear\n            df['week'] = df.date.dt.isocalendar().week\n            df['dayofweek'] = df.date.dt.dayofweek\n            df['quater'] = df.date.dt.quarter\n            df = df.dropna()\n            df = df.set_index('date')\n            X_train = df[:'2017'].drop(['num_sold'], axis = 1)\n            y_train = df.loc[:'2017', 'num_sold']\n            X_test = df['2018'].drop(['num_sold'], axis = 1)\n            y_test = df.loc['2018', 'num_sold']\n            estimators = [\n                          ('rf', RandomForestRegressor(n_estimators=100, n_jobs=-1, max_depth=10, random_state=NUM_SEED)),  \n                          ('mlp', MLPRegressor(hidden_layer_sizes=(300,), max_iter=5000,random_state=NUM_SEED)), \n                          ('gbr', GradientBoostingRegressor(learning_rate=1e-2, loss='absolute_error',max_depth=10, n_estimators=300, random_state=NUM_SEED))]\n            model = StackingRegressor(estimators=estimators)\n            param_search = { \n                'cv': [5]\n            }\n            tscv = TimeSeriesSplit(n_splits=10)\n            gsearch = GridSearchCV(estimator=model, cv=tscv, param_grid=param_search, scoring = rmse_score, n_jobs=-1)\n            X_train.head()\n            gsearch.fit(X_train, y_train)\n            best_score = gsearch.best_score_\n            best_model = gsearch.best_estimator_\n            models.append(best_model)\n            y_true = y_test.values\n            y_pred = best_model.predict(X_test)\n            print(f'''Res-ts for {i}, {j}, {l}''')\n            regression_results(y_true, y_pred)","269a4639":"k = 0\ndatatest = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv')\nfor i in ['Finland', 'Norway', 'Sweden']:\n    for j in ['KaggleMart', 'KaggleRama']:\n        for l in ['Kaggle Mug', 'Kaggle Hat', 'Kaggle Sticker']:\n            df = datatest[(datatest['country'] == i) & (datatest['store']==j) & (datatest['product']==l)][['date']]\n            df['date'] = pd.to_datetime(df['date'])\n            df['year'] = df.date.dt.year\n            df['month'] = df.date.dt.month\n            df['day'] = df.date.dt.day\n            df['dayofyear'] = df.date.dt.dayofyear\n            df['week'] = df.date.dt.isocalendar().week\n            df['dayofweek'] = df.date.dt.dayofweek\n            df['quater'] = df.date.dt.quarter\n            df = df.dropna()\n            df = df.set_index('date')\n            X_test = df\n            model = models[k]\n            k = k + 1\n            y_pred = model.predict(X_test)\n            datatest.loc[(datatest['country']==i) & (datatest['store']==j) & (datatest['product']==l),'num_sold'] = y_pred\ndatatest[['row_id', 'num_sold']].to_csv('submission.csv', index=False)","a9cc02c5":"datatest[['row_id', 'num_sold']]","dadc31ac":"# Define new functions for calculus and output metrics","c3396b69":"# Train model","e4f92b71":"# Import all libs","5bbba8b2":"> We have 18 different date series. Features **[country,store,product]** we can delete, because they just say which date series.\n\n> We extract feature from date using **pandas.Series.dt**\n\n\n","b2b42df9":"# Download all requirements (pip install)","9992a84c":"# Download data and analysis it","faf321ed":"# Predict test","8aef5722":"I create 18 ensembles (for each date series) of:\n\n\n*   **RandomForestRegressor**\n*   **MLPRegressor**\n*   **GradientBoostingRegressor**\n\n*Final estimator:* **RidgeCV**"}}