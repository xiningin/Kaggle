{"cell_type":{"2c7ab9bb":"code","18eae13e":"markdown"},"source":{"2c7ab9bb":"import numpy as np\nfrom sklearn import linear_model\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.preprocessing import StandardScaler\nX, y = load_diabetes(return_X_y=True)\nX = StandardScaler().fit_transform(X)\n\nalphas = np.logspace(-6, 6, 13)\none = linear_model.RidgeCV(alphas=alphas, cv=3)\nresult = one.fit(X, y)\n#print(one.score(X, y))\nprint(f\"alphas tried: {alphas}\")\nprint(f\"best alpha from RidgeCV: {one.alpha_}, score {one.score(X, y)}\")\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import KFold\nparameters = {'alpha':alphas}\nmodels = GridSearchCV(linear_model.Ridge(), parameters, cv=KFold(n_splits=3))\nmodels.fit(X, y)\nrts = models.cv_results_['rank_test_score']\nprint(f\"best alpha from GridSearchCV: {alphas[np.where(rts==1)]}\")\nfor k in models.cv_results_.keys():\n    print(k, models.cv_results_[k])","18eae13e":"# Demo for linear regression with regularization\n- RidgeCV()\n- GridSearchCV()"}}