{"cell_type":{"39f2a7b7":"code","7d5ccec7":"code","d09a8194":"code","a0b46775":"code","a12959f0":"code","f72f0d3d":"code","efe0924e":"code","bac526bb":"code","de2c8b39":"code","c838ff3f":"code","24ceab4e":"code","0f3befbf":"code","44bb8a5d":"code","6b50815e":"code","766907e5":"code","8640abdf":"code","a08e6635":"code","87a52212":"code","ba3a25c5":"code","97ba6618":"code","8d449d7b":"code","77f10fad":"code","9f2e1f21":"code","25b4ad0e":"code","9032fc06":"code","043faf01":"code","c29c8bf5":"code","9010b3ac":"code","1b7aa455":"code","c09362c1":"code","c9671f49":"code","39008c49":"code","3284daa7":"code","6b5058e8":"code","179594cb":"code","db796e10":"code","c7b9602e":"code","72b0bc0e":"code","40271064":"code","b4dd50a2":"code","03eec2c1":"markdown","09152d24":"markdown","65a59445":"markdown","67de0836":"markdown","b01111a9":"markdown","3826c098":"markdown","974e7a10":"markdown","c1c5a4ef":"markdown","e4ab8de0":"markdown","040b4b6e":"markdown","ec499998":"markdown","94eb71a2":"markdown","df75b387":"markdown","c28b35b6":"markdown","bbb4e8ae":"markdown","376fab7c":"markdown","51bf74e9":"markdown","8d43c847":"markdown","f4f0d802":"markdown","3b3c142e":"markdown","a763c726":"markdown","7085f828":"markdown","eb7b4b4f":"markdown","e3fc1820":"markdown","221f4069":"markdown","63e9262b":"markdown","656e7716":"markdown","7a930b6d":"markdown","52ef5e94":"markdown","c109efb7":"markdown","5a80f8a9":"markdown","9145f1ba":"markdown","e09526ce":"markdown","8f2d8ccf":"markdown","d7d532c5":"markdown","36d5867c":"markdown","19f50700":"markdown","63bfafe4":"markdown","48e88563":"markdown","c4610ee5":"markdown","1323cc6b":"markdown","b2d80090":"markdown"},"source":{"39f2a7b7":"from datetime import datetime\nnow = datetime.now() \nprint(now)","7d5ccec7":"print(type(now))","d09a8194":"dt = datetime(2020, 1, 19, 12, 20)\nprint(dt)","a0b46775":"dt = datetime(2020, 1, 19, 12, 20) \ndt.timestamp() ","a12959f0":"t = 1579404000.0\nprint(datetime.fromtimestamp(t))","f72f0d3d":"t = 1579404000.0\nprint(datetime.fromtimestamp(t)) # local time","efe0924e":"print(datetime.utcfromtimestamp(t)) # UTC time","bac526bb":"cday = datetime.strptime('2020-01-19 12:20:00', '%Y-%m-%d %H:%M:%S')\nprint(cday)","de2c8b39":"now = datetime.now()\nprint(now.strftime('%a, %b %d %H:%M'))","c838ff3f":"from datetime import timedelta","24ceab4e":"now = datetime.now()\nnow","0f3befbf":"now + timedelta(hours=10)","44bb8a5d":"now - timedelta(days=1)","6b50815e":"now + timedelta(days=2, hours=12)","766907e5":"p = (1, 2)","8640abdf":"from collections import namedtuple\n\nPoint = namedtuple('Point', ['x', 'y'])\np = Point(1, 2)","a08e6635":"p.x","87a52212":"p.y","ba3a25c5":"isinstance(p, Point)","97ba6618":"isinstance(p, tuple)","8d449d7b":"# namedtuple('name', [Attribute(type:list)]):\nCircle = namedtuple('Circle', ['x', 'y', 'r'])","77f10fad":"from collections import deque\n\nq = deque(['a', 'b', 'c'])\nq.append('x')\nq.appendleft('y')\nq","9f2e1f21":"from collections import defaultdict\n\ndd = defaultdict(lambda: 'N\/A')\ndd['key1'] = 'abc'","25b4ad0e":"dd['key1'] # key1 exist","9032fc06":"dd['key2'] # key2 doesn't exist, return default value","043faf01":"from collections import Counter\n\nc = Counter()\nfor ch in 'programming':\n    c[ch] = c[ch] + 1\n    \nc","c29c8bf5":"c.update('hello')\nc","9010b3ac":"import hashlib\n\nmd5 = hashlib.md5()\nmd5.update('how to use md5 in python hashlib?'.encode('utf-8'))\nprint(md5.hexdigest())","1b7aa455":"md5 = hashlib.md5()\nmd5.update('how to use md5 in '.encode('utf-8'))\nmd5.update('python hashlib?'.encode('utf-8'))\nprint(md5.hexdigest())","c09362c1":"md5 = hashlib.md5()\nmd5.update('how to use md0 in python hashlib?'.encode('utf-8'))\nprint(md5.hexdigest())","c9671f49":"sha1 = hashlib.sha1()\nsha1.update('how to use sha1 in '.encode('utf-8'))\nsha1.update('python hashlib?'.encode('utf-8'))\nprint(sha1.hexdigest())","39008c49":"def calc_md5(password):\n    return get_md5(password + 'the-Salt')","3284daa7":"import itertools\n\nnatuals = itertools.count(1)\n# for n in natuals:\n#     print(n)","6b5058e8":"cs = itertools.cycle('ABC') # String is also a sequence.\n# for c in cs:\n#     print(c)","179594cb":"ns = itertools.repeat('A', 3)","db796e10":"for n in ns:\n    print(n)","c7b9602e":"natuals = itertools.count(1)\nns = itertools.takewhile(lambda x: x <= 10, natuals)\nlist(ns)","72b0bc0e":"for c in itertools.chain('ABC', 'XYZ'):\n    print(c)","40271064":"for key, group in itertools.groupby('AAABBBCCAAA'):\n    print(key, list(group))","b4dd50a2":"for key, group in itertools.groupby('AaaBBbcCAAa', lambda c: c.upper()):\n    print(key, list(group))","03eec2c1":"<a id=\"4.1\"><\/a> <br>\n\n## 4.1 chain()\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)\n\n`chain()` could connect all iterable objects into a even bigger iterator:","09152d24":"In this notebook, we are going to talk a little bit about **Python built-in modules**.","65a59445":"`hashlib` in Python provides commonly used Message-Digest algorithm like MD5 and Secure Hash Algorithm 1 (SHA1), etc.\n\nWhat is Message-Digest algorithm? In simple explanation, it could convert data with random length to a fixed length data string(usually in Hexadecimal).\n\nFor example, you wrote an article `'how to use python hashlib - by Michael'` and posted the digest as `'2d73d4f15c0db7f5ecb321b6a65e5d6d'`. If someone wants to change it as `'how to use python hashlib - by Bob'`, you could point out that Bob tempered your article because the digest is different.\n\nMessage-Digest algorithm is a funciton to calculate a `digest` based on any length of the `data` in order to figure our whether the original data has been tempered or not.\n\nMessage-Digest algorithm has one vital feature is that calculating `f(data)` is esay, but through `digest` to get `data` is extremely difficult. Any change in even one bit will produce a totally different digest.\n\nLet's take a look at one MD5 example:","67de0836":"<a id=\"2.3\"><\/a> <br>\n\n## 2.3 defaultdict\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)\n\nWhen using `dict`, if key doesn't exist, it will throw a `KeyError`. If we need to return a default value instead of error, we could use `defaultdict`:","b01111a9":"Although infinite sequence could be iterated forever, but usually we will use `takewhile()` to get a finite sequence:","3826c098":"Actually the comparation rule is defined by function, as long as the elements return be function are the same, those two elements will be considered as one group. For example:","974e7a10":"<a id=\"4\"><\/a> <br>\n\n# 4. itertools\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)\n\n`1itertools` provides multiple methods for operating iterable objects in Python.","c1c5a4ef":"The result is totally different! And we have no way to trace back the original input.\n\nAnother commonly used Message-Digest algorithm is SHA1:","e4ab8de0":"<a id=\"1.7\"><\/a> <br>\n\n## 1.7 datetime addition and substraction\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)\n\nAddition and substraction calculation can just use operators `+` and `-`, but we need to import `timedelta`:","040b4b6e":"<a id=\"Top\"><\/a> <br>\n\n# Contents\n\n1. [datetime](#1)\n    - 1.1 [Get current date and time](#1.1)\n    - 1.2 [Get specific date and time](#1.2)\n    - 1.3 [Convert datetime to timestamp](#1.3)\n    - 1.4 [Convert timestamp to datetime](#1.4)\n    - 1.5 [Convert str to datetime](#1.5)\n    - 1.6 [Convert datetime to str](#1.6)\n    - 1.7 [datetime addition and substraction](#1.7)\n2. [collections](#2)\n    - 2.1 [namedtuple](#2.1)\n    - 2.2 [deque](#2.2)\n    - 2.3 [defaultdict](#2.3)\n    - 2.4 [Counter](#2.4)\n3. [hashlib](#3)\n    - 3.1 [Message-Digest Algorithm Introduction](#3.1)\n    - 3.2 [Message-Digest Algorithm Application](#3.2)\n4. [itertools](#4)\n    - 4.1 [chain](#4.1)\n    - 4.2 [groupby](#4.2)\n5. [Conclustion](#5)","ec499998":"<a id=\"1.3\"><\/a> <br>\n\n## 1.3 Convert datetime to timestamp\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)\n\nIn computer, date is actually stored by numbers. By convention, we set January 1st, 1970, 00:00:00 UTC+00:00 as the `epoch time` (set as `0`, date before 1970 consider as negative values). Current time is seconds that passed from epoch time, called `timestamp`.\n\nYou could consider:\n\n- timestamp = 0 = 1970-1-1 00:00:00 UTC+0:00\n\nThe corresponding Beijing time is:\n\n- timestamp = 0 = 1970-1-1 08:00:00 UTC+8:00\n\nWe can see that timestamp has nothing to do with timezone. Because once timestamp has been setup, it's UTC time will also been confirmed. The timezone is also static. This is why computer stores current time as timestamp type.\n\nConvert a `datetime` to timestamp only need to call `timestamp()`:","94eb71a2":"Except for the behavior that returning default value when error happens, other behaviors are exactly the same as `dict`.","df75b387":"<a id=\"1\"><\/a> <br>\n\n# 1. datetime\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","c28b35b6":"In this tutorial, we introduced the basic concept and usage of `datetime`, `collections`, `hashlib` and `itertools`.\n\nIf you have any problems, or find any bugs, please let a comment below and I will reply to you asap. Thanks!","bbb4e8ae":"<a id=\"4.2\"><\/a> <br>\n\n## 4.2 groupby()\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)\n\n`groupby()` could set aside same elements together:","376fab7c":"If the data big, we could split them by using `update()` and the result will be the same:","51bf74e9":"<a id=\"5\"><\/a> <br>\n\n# 5. Conclusions\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","8d43c847":"After `Salt` process, hackers won't be able to crack the simpliest password as long as they don't know the `Salt`.\n\nBut what if two users in used the same password like `123456`? Since the `Salt` value is the same, which means the MD5 results will also be the same. Is there any ways to avoid that?\n\nYes, using `user name` or `user id`. In most of the cases, `user name` and `user id` will be unique in one website.","f4f0d802":"Be advised: timestamp is a float number. If decimals exist, it means milli-seconds.\n\nIn some programming languages like Java and Javascript, their timestamp use integer to describe milli-seconds. For those cases, we just need to divide timestamp by 1000 to get float values in Python.","3b3c142e":"<a id=\"1.4\"><\/a> <br>\n\n## 1.4 Convert timestamp to datetime\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)\n\nIn order to convert timestamp to `datetime`, we could use `fromtimestamp()` method inside `datetime` module.","a763c726":"Let's change one number to check out the result:","7085f828":"SHA1 will return the result in 160 bit (normally will use Hexadecimal).\n\nSHA256 and SHA512 have higher security level, but it will lower the calculation time, and the digest will be even longer.","eb7b4b4f":"<a id=\"3.2\"><\/a> <br>\n\n## 3.2 Message-Digest Algorithm Application\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)\n\nLet's have a look at the following example:\n\nMost of the websites will store user names and passwords, but how? The answer is \"Database\":\n\n|    name    | password  |\n|    ----    |   ----    | \n|   michael  |  123456   |\n|     bob    |  abc999   |\n|   alice    | alice2008 |\n\nIf the passwords is stored in plain texts, if database got hacked, MY GOD, the owner will be in BIG trouble. Plus, some web engineers also have the access to database which means they could get the user info as well.\n\nSo the correct way to save it is not using plain text by in digests like MD5:\n\n|    name    | password  |\n|    ----    |   ----    | \n|   michael  |  e10adc3949ba59abbe56e057f20f883e   |\n|     bob    |  878ef96e86145580c38c87f0410ad153   |\n|   alice    |  99b1c2188db85afee403b1536010c2c9   |\n\nDoes that mean as long as we use MD5, our password will never be cracked? Absolutely not, suppose a hacker has already hacked the database and got all the password, a smart hacker would do this:\n\nSince a lot of users prefer to set their password as `123456`, `888888`, `password`, hacker could calculate the MD5 for these commonly used password and then get a invertion table:\n\n- 'e10adc3949ba59abbe56e057f20f883e': '123456'\n- '21218cca77804d2ba1922c33e0151105': '888888'\n- '5f4dcc3b5aa765d61d8327deb882cf99': 'password'\n\nIn that way, a hacker will get the MD5 of commonly used passwords. \n\nSo how to improve it? Adding another complicated string to the input data, we call it `Salts`.","e3fc1820":"Since `count()` will create a infinite iterator, the code above will continue forever until we stopped it.\n\n`cycle()` will repeat the input sequence infinitively:","221f4069":"<a id=\"2\"><\/a> <br>\n\n# 2. Collections\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","63e9262b":"`deque` has methods like `append()` and `pop()` from `list`, and also support `appendleft()` and `popleft()` to add and delete from both directions.","656e7716":"However, if someone see `(1, 2)`, it will be difficult for s\/he to find out that this is a coordinate.\n\nDefining another class seems like fussy. So, we could use `namedtuple` for this situation:","7a930b6d":"<a id=\"3\"><\/a> <br>\n\n# 3. hashlib\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","52ef5e94":"Similarly, if we need to define a circle by using coordinate and radius, `namedtupel` could also be helpful:","c109efb7":"<a id=\"1.5\"><\/a> <br>\n\n## 1.5 Convert str to datetime\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)\n\nMany times,use input date and time as strings. In order to process it, we need to convert themt to datetime. There is a method called `datetime.strptime()` to realize it.","5a80f8a9":"`namedtuple` is a function, it used to create a self-defined `tuple` object, and it could restrict the number of the elements in it. Another feature is it can use attributes instead of indices for some specific element.","9145f1ba":"<a id=\"2.1\"><\/a> <br>\n\n## 2.1 namedtuple\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)\n\nWe all know that `tuple` is a immutable set. For example, the coordinate of a point in 2-dimension could be described as follows:","e09526ce":"<a id=\"3.1\"><\/a> <br>\n\n## 3.1 Message-Digest Algorithm Introduction\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)","8f2d8ccf":"<a id=\"1.2\"><\/a> <br>\n\n## 1.2 Get specific date and time\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)\n\nIf you want to get a specific date and time, you could use multiple parameters to achieve this:","d7d532c5":"<a id=\"2.2\"><\/a> <br>\n\n## 2.2 deque\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)\n\nWhen we use `list` to store date, it's very fast to find the element, but relatively small for inserting and deleting. Because `list` is stored sequentially, when data size is huge, inserting and deleting will have low efficiency.\n\n`deque` is here to fix that problem:","36d5867c":"Noticed that `datetime` is a module, `datetime` module also contain a class also named `datetime`. By calling `from datetime import datetime`, you could import class `datetime`.\n\nIf only use `import datetime`, then you have to quote the full name `datetime.datetime`.\n\n`datetime.now()` will return current date and time on the PC you are using. The data type is `datetime`.","19f50700":"Be careful that timestamp is a float number which it has no concept of timezone, while datetime has. The conversion above is happened between timestamp and local time.\n\n*Local time means the timezone set in the current operating system.*\n\nFor example the timezone of Tokyo is GMT+9 (Japan Standard time)\uff1a\n\n- 2020-01-19 12:20:00\n\nIt actual means:\n\n- 2020-01-19 12:20:00 UTC+9:00\n\nWhile Greenwich Mean Time(GMT) is 9 hours below Tokyo time, so UTC+00:00 should be:\n\n- 2020-01-19 03:20:00 UTC+0:00\n\ntimestamp could also be converted to UTC standard time:","63bfafe4":"`repeat()` will repeat the element, but the second parameter could control the repeating times.","48e88563":"<a id=\"1.6\"><\/a> <br>\n\n## 1.6 Convert datetime to str\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)\n\nIf we already have a datetime object, and want to format it as string for users, we could use `strftime()`:","c4610ee5":"The string `'%Y-%m-%d %H:%M:%S'` specifies format for date and time. For more datailed description, please kindly check [Python\u6587\u6863](https:\/\/docs.python.org\/3\/library\/datetime.html#strftime-strptime-behavior)\u3002\n\n**Noticed that datetime after conversion has no info of timezone.*","1323cc6b":"<a id=\"1.1\"><\/a> <br>\n\n## 1.1 Get current date and time\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)\n\nLet's have a look at how to get current date and time:","b2d80090":"<a id=\"2.4\"><\/a> <br>\n\n## 2.4 Counter\n\n[<div style=\"text-align: right\"> Back to Contents <\/div>](#Top)\n\n`Counter` is a simple calculate\/meter to count the number of occurrences."}}