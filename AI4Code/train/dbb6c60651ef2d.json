{"cell_type":{"ef7d26a7":"code","78fe862b":"code","ff54eb6c":"code","b12c990a":"code","35992eb4":"code","2c3c0c52":"code","9ca82367":"code","c785ba0e":"code","55a952e7":"code","d526abb9":"code","b722d835":"code","f662f12e":"code","55caa9a0":"code","cb53eb87":"code","8d34d300":"code","f94520e1":"code","d129710b":"code","d60913d1":"code","69af59be":"code","622c2d36":"code","b382b7d6":"code","0ead8616":"code","e3b83333":"code","e2f2e3c8":"code","324f9980":"code","2c05ea28":"code","61179fb9":"code","b3c14f26":"code","50cf001c":"code","ea0be1dd":"code","91979f0b":"code","226b129f":"code","12cd5715":"code","7c3232a7":"code","171ddee0":"code","a57551d8":"code","63e3b2a1":"code","3e30d99b":"code","3e964712":"code","b6cf511f":"code","d7d77291":"code","c92ebebe":"code","7e5f0f91":"code","237f95dc":"code","8023eae1":"code","306614db":"code","60e1b122":"code","be567a2c":"code","042b6f3e":"code","2a92608f":"code","38077ded":"code","e01cca81":"code","346a7681":"code","dc944c0f":"code","97e6a62b":"code","97921843":"code","64fe1972":"markdown","44d3dcb2":"markdown","fd4939fa":"markdown","d6254f37":"markdown","eb1e4b86":"markdown","4138a485":"markdown","a5a89f1c":"markdown","7ad8127d":"markdown","86425c74":"markdown"},"source":{"ef7d26a7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly           #(version 4.5.0)\nimport plotly.express as px\nimport plotly.io as pio\nimport seaborn as sns\n%matplotlib inline","78fe862b":"data=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')","ff54eb6c":"data.head()","b12c990a":"data.shape","35992eb4":"columns = list(data.columns)\ncolumns","2c3c0c52":"data.info()","9ca82367":"# categorical and numerical column names \ncats = list(data.select_dtypes(include=['object']).columns)\nnums = list(data.select_dtypes(exclude=['object']).columns)\nprint(f'categorical variables:  {cats}')\nprint()\nprint(f'numerical variables:  {nums}')","c785ba0e":"data.nunique(axis=0)","55a952e7":"data.isna().sum()","d526abb9":"# simple heatmap to see where we are missing data\nsns.heatmap(data.isnull(),yticklabels=False,cbar=False,cmap='viridis')","b722d835":"def missing_zero_values_table(dataframe):\n        zero_val = (dataframe == 0.00).astype(int).sum(axis=0)\n        mis_val = dataframe.isnull().sum()\n        mis_val_percent = 100 * dataframe.isnull().sum() \/ len(dataframe)\n        mz_table = pd.concat([zero_val, mis_val, mis_val_percent], axis=1)\n        mz_table = mz_table.rename(\n        columns = {0 : 'Zero Values', 1 : 'Missing Values', 2 : '% of Total Values'})\n        zero_val = (dataframe == 0.00).astype(int).sum(axis=0)\n        mis_val = dataframe.isnull().sum()\n        mis_val_percent = 100 * dataframe.isnull().sum() \/ len(dataframe)\n        mz_table = pd.concat([zero_val, mis_val, mis_val_percent], axis=1)\n        mz_table = mz_table.rename(\n        columns = {0 : 'Zero Values', 1 : 'Missing Values', 2 : '% of Total Values'})\n        mz_table['Data Type'] = dataframe.dtypes\n        mz_table = mz_table[\n            mz_table.iloc[:,1] != 0].sort_values(\n        '% of Total Values', ascending=False).round(1)\n        print (\"Your selected dataframe has \" + str(dataframe.shape[1]) + \" columns and \" + str(dataframe.shape[0]) + \" Rows.\\n\"      \n            \"There are \" + str(mz_table.shape[0]) +\n              \" columns that have missing values.\")\n        return mz_table","f662f12e":"missing_zero_values_table(data)","55caa9a0":"data['FireplaceQu'].value_counts()","cb53eb87":"data['FireplaceQu'].fillna(value='Gd', inplace=True) ","8d34d300":"data['LotFrontage'].mean()","f94520e1":"data['LotFrontage'].fillna(value=70.05, inplace=True)","d129710b":"data['GarageType'].value_counts()","d60913d1":"data['GarageType'].fillna(value='Attchd', inplace=True) ","69af59be":"data['GarageYrBlt'].value_counts()","622c2d36":"data['GarageYrBlt'].fillna(value=2005, inplace=True) ","b382b7d6":"data['GarageFinish'].value_counts()","0ead8616":"data['GarageFinish'].fillna(value='Unf', inplace=True) ","e3b83333":"data['GarageQual'].value_counts()","e2f2e3c8":"data['GarageQual'].fillna(value='TA', inplace=True) ","324f9980":"data['GarageCond'].value_counts()","2c05ea28":"data['GarageCond'].fillna(value='TA', inplace=True) ","61179fb9":"data['BsmtExposure'].value_counts()","b3c14f26":"data['BsmtExposure'].fillna(value='No', inplace=True)","50cf001c":"data['BsmtFinType1'].value_counts()","ea0be1dd":"data['BsmtFinType1'].fillna(value='Unf', inplace=True)","91979f0b":"data['BsmtFinType2'].value_counts()","226b129f":"data['BsmtFinType2'].fillna(value='Unf', inplace=True)","12cd5715":"data['BsmtCond'].value_counts()","7c3232a7":"data['BsmtCond'].fillna(value='TA', inplace=True)","171ddee0":"data['BsmtQual'].value_counts()","a57551d8":"data['BsmtQual'].fillna(value='TA', inplace=True)","63e3b2a1":"data['MasVnrArea'].mean()","3e30d99b":"data['MasVnrArea'].fillna(value=103.6, inplace=True)","3e964712":"data['MasVnrType'].value_counts()","b6cf511f":"data['MasVnrType'].fillna(value='None', inplace=True)","d7d77291":"data = data[~data['Electrical'].isna()]","c92ebebe":"data.drop(['PoolQC','MiscFeature','Alley','Fence'], axis=1,inplace=True)","7e5f0f91":"data.shape","237f95dc":"print(f'total duplicate rows: {data.duplicated().sum()}')\n\n# drop duplicate rows if any\ndata = data[~data.duplicated()]\n","8023eae1":"data.duplicated()","306614db":"num_rows, num_cols = data.shape","60e1b122":"data.to_csv('data_cleaned.csv',index=False)","be567a2c":"df = pd.read_csv(\"data_cleaned.csv\")","042b6f3e":"# categorical and numerical column names \ncats = list(df.select_dtypes(include=['object']).columns)\nnums = list(df.select_dtypes(exclude=['object']).columns)","2a92608f":"# group all variables together having same type\ndata1 = pd.concat((df[cats], df[nums]), axis=1)\ndata1.head()","38077ded":"print(f'categorical variables:  {cats}')","e01cca81":"df_cat = data.loc[:, 'MSZoning':'SaleCondition']\ndf_cat.head()","346a7681":"df_num = df.loc[:, 'Id':]","dc944c0f":"df_num.head()","97e6a62b":"data=pd.melt(df_num)\ndata","97921843":"sns.heatmap(df_num.corr(method='spearman'), annot = False, vmin = -1, vmax = 1, center = 0,cmap = 'coolwarm')\nplt.figure(figsize = (500, 400))","64fe1972":"## Analysis on Categorical Attributes","44d3dcb2":"## Exploratory Data Analysis (EDA)","fd4939fa":"##### First we will check for Missing Data","d6254f37":"## Data Cleaning","eb1e4b86":"### Analysis of Distribution","4138a485":"###### saving cleaned data\n","a5a89f1c":"##  Data","7ad8127d":"#### Import Libraries","86425c74":"## Analysis on Numerical Attributes"}}