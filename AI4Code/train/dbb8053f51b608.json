{"cell_type":{"07f2cbf2":"code","106c7863":"code","c9b6a84b":"code","26b50cfd":"code","1b5ba27b":"code","5c160d20":"code","a3dc0e64":"code","4e6cce2d":"code","0b553ba6":"code","656beda4":"code","e225e3b6":"code","f4527486":"code","12ef2add":"code","304ac036":"code","ea113fe6":"code","43108c0f":"code","aeb68dc9":"code","d810b90d":"code","0838344d":"code","f5514b23":"code","f0002c06":"markdown","570116ae":"markdown","14454a53":"markdown","364778a9":"markdown","864965be":"markdown","6c34b8b3":"markdown","941cb887":"markdown","6c12d458":"markdown","0c02e399":"markdown","c5d33cfa":"markdown","631a7d2b":"markdown","96bc17bf":"markdown","70ccbc2b":"markdown","404301d5":"markdown"},"source":{"07f2cbf2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport fbprophet as Prophet\nfrom sklearn.metrics import mean_squared_error,r2_score\nimport math\nimport time\n%matplotlib inline","106c7863":"df = pd.read_csv('..\/input\/traffic\/DataSet\/train27303.csv')","c9b6a84b":"df.head()","26b50cfd":"df.tail()","1b5ba27b":"df.shape","5c160d20":"plt.figure(figsize=(20,10))\nplt.plot(df['hourly_traffic_count'])\nplt.show()","a3dc0e64":"df = df.iloc[:9792,:]\n\nplt.figure(figsize=(20,10))\nplt.plot(df['hourly_traffic_count'])\nplt.show()","4e6cce2d":"df = df.rename(columns = {'timestamp':'ds','hourly_traffic_count':'y'})\ndf.dtypes","0b553ba6":"df['ds'] = pd.to_datetime(df['ds'])\ndf.dtypes","656beda4":"df","e225e3b6":"train_df = df.iloc[:8928,:]\ntest_df = df.iloc[8928:,:]","f4527486":"train_df","12ef2add":"test_df","304ac036":"start = time.time()\n\nm = Prophet.Prophet(changepoint_prior_scale=0.01)\nm.fit(train_df)\n\nend = time.time()\nprint('Time Required :', end-start,'seconds')","ea113fe6":"test = test_df.iloc[:,0:1]\nfcst = m.predict(test)","43108c0f":"fcst","aeb68dc9":"fig = m.plot(fcst)","d810b90d":"fig2 = m.plot_components(fcst)","0838344d":"plt.figure(figsize=(20,10))\nplt.plot(test_df['ds'],test_df['y'], color = 'red', label = 'Real Traffic Count')\nplt.plot(fcst['ds'],fcst['yhat'].astype(int), color = 'blue', label = 'Predicted Traffic Count')\nplt.title('Traffic Prediction')\nplt.legend()\nplt.show()","f5514b23":"rmse = math.sqrt(mean_squared_error(test_df['y'],fcst['yhat'].astype(int)))\nprint(\"Root Mean Squared Error :\",rmse)\nr_sq = r2_score(test_df['y'],fcst['yhat'].astype(int))\nprint(\"R Squared Score :\",r_sq)\nprint('Time Required :', end-start,'seconds')","f0002c06":"So, from the above visualizaton, we have seen that the errors are almost excluded. So now our dataset is ready. We will do some preprocessing of the data. This is because **FbProphet** needs the dataset to have two columns in specific names: **ds** and **y**. Also the ds column needs to be in datetime format. So, we will check and tune our dataset accordingly. ","570116ae":"# Predicting the Future 3 Days\n\nNow, we will predict the outcome for the next three days. For this, we need a matrix of the timestamps for which out model will predict the traffic count. So, for that, we used the ds column of our test_df and used the predict method to predict the outcome.","14454a53":"# Conclusion\n\nWe have successfully implemented **FbProphet** time series forecasting tool at a minute level dataset and we have got a good score. We can improve the score if we have more amount of data. The FbProphet was successful to capture the pattern, trend and also it showed the seasonal pattern and possible outcome. The  most amazing thing is its timing. It took only a few seconds to fit the data and created such an astonishing result. So, if time is a factor for any purpose, fbprophet is surely a must tool for any time series prediction.","364778a9":"# Visulatization of the Prediction","864965be":"# Evaluation & Accuracy\n","6c34b8b3":"As you can see, the dataset contains 26396 rows of data starting from **2015-10-04 00:00:00** and which ends at **2016-01-03 23:55:00** . At each day, with a 5 minutes interval, the traffic is counted. So, for each day, we get 24x60\/5 = 288 rows or timestamps of traffic data.","941cb887":"# Train Test Split\n\nAs we have decided earlier, we will be using only a month's data starting from **2015-10-04 00:00:00** to **2015-11-03 00:00:00** for training purpose (31days x 288 rows each day = 8928 timestamps) and will try to predict the next 3 days traffic (3x288 = 864 timestamp) for testing purpose.","6c12d458":"# Visualizing the Dataset\n\nNow, lets plot the traffic data and observe the dataset with a visualization.","0c02e399":"Lets compare the Actual Test results with the predicted result.","c5d33cfa":"As you can see above, the dataset is seasonal, that means it has a repeating pattern to it. Thats a good thing. But the problem here is it has missing values, but they are not NaN, they are zero(0). This missing value is because the dataset was created using machine which eventually ran into some error. Thats why the machine could not count traffic. Hence it placed zero at those place. \n\nThere are a several approach to handle those missing value. But for simplicity sake, we are going to exclude the values with error. \n\nTo be more specific, we will be using only a month's data starting from **2015-10-04 00:00:00** to **2015-11-03 00:00:00** for training purpose (31days x 288 rows each day = 8928 timestamps) and will try to predict the next 3 days traffic (3x288 = 864 timestamp) for testing purpose. So, in total we are going to extract 9792 timestamps or rows from our dataset and get a visualization.","631a7d2b":"# Dataset\n\nThe Dataset used here contains the traffic count of a certain road at each 5 minutes interval. There are two columns in the dataset, one is the timestamp and another is the hourly traffic count (which is actually counted in each five minutes interval.","96bc17bf":"# Creating our Prophet Model and Fitting Dataset\n\nThis is the main section of this notebook. We are going to create a model by calling Prophet. But as the core purpose of FbProphet was to deal data in day, month and year basis, so we need to add a parameter **changepoint_prior_scale=0.01** which will help us handle minute wise data for the model. Also we will calculate the time required for fitting the data with our model. We will use the python Time module to calculate the time. ","70ccbc2b":"# Importing Libraries\n\nFirst, we will start by importing necessary libraries for the task. For those who did not install fbprophet can simple do it by **pip install fbprophet** in their terminal. ","404301d5":"# Minute Wise Traffic Prediction Using FbProphet\n![](https:\/\/miro.medium.com\/max\/964\/0*tVCene42rgUTNv9Q.png)\n\nIn this notebook, we will be focusing on predicting minute wise prediction of the number of traffic. We will be using FbProphet, which is a pretty fast time series forecasting algorithm made by  Facebook Team. We will also have a look the **time required** so that we can have a comparison of it with the same dataset for different other models like LSTM, SARIMA etc ( which we will be doing later on in another notebook). So, lets start."}}