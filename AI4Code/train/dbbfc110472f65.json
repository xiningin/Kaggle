{"cell_type":{"adb1bfb7":"code","873e76c0":"code","f9bcfcc1":"code","6df43e71":"code","a69e155f":"code","0f31fef9":"code","718afa74":"code","4382cead":"code","c996e288":"code","04d9c6d7":"code","37e8725c":"code","f88e5d5f":"code","a06ec621":"code","bbf5d516":"code","384a8fde":"code","703fa19f":"code","ab18a402":"code","de6874d1":"code","e9ff09db":"code","e0db918a":"code","849464e7":"code","56454205":"code","b6219443":"code","1a1ab297":"code","ec6b8fe8":"code","578f730c":"code","00e5a4ea":"code","2ef4db84":"code","1993392f":"code","b43d02d1":"code","d7dbe50e":"code","2777abc5":"code","dff2ad36":"code","489d7195":"code","f4cb0997":"code","38f6d5be":"code","875cc9b4":"code","e4f82b93":"code","2a70690d":"markdown","bfe899a2":"markdown","ff0a11d7":"markdown","1cce1ce2":"markdown","3d2a5932":"markdown","2d62775e":"markdown","7fc95bd9":"markdown","524b0443":"markdown","64c839ac":"markdown","60875dda":"markdown"},"source":{"adb1bfb7":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd ","873e76c0":"dataset = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/merc.csv')\ndataset.head(10)","f9bcfcc1":"dataset.info()","6df43e71":"dataset.isnull().sum()","a69e155f":"dataset.model.unique()","0f31fef9":"dataset.fuelType.unique()","718afa74":"dataset.transmission.unique()","4382cead":"y = dataset.price.values\nX = dataset.drop('price', axis=1).values","c996e288":"print(X)\nprint('------>')\nprint(y)","04d9c6d7":"X[0]","37e8725c":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nX[:, 0] = le.fit_transform(X[:, 0]) #model","f88e5d5f":"X[:, 2] = le.fit_transform(X[:, 2]) #transmission","a06ec621":"X[:, 4] = le.fit_transform(X[:, 4]) #fuelType","bbf5d516":"X[0]","384a8fde":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)","703fa19f":"X_train","ab18a402":"X_test","de6874d1":"y_train","e9ff09db":"y_test","e0db918a":"X_train[0], y_train[0]#for prediction","849464e7":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","56454205":"from sklearn.tree import DecisionTreeRegressor\nreg = DecisionTreeRegressor(random_state = 1)\nreg.fit(X_train, y_train)\ny_pred = reg.predict(X_test)\n\n\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(reg, X_train, y_train, cv = 10)\nprint('Accuracy: {:.2f}%'.format(accuracies.mean()*100))\nprint('Std: {:.2f}%'.format(accuracies.std()*100))\n\nfrom sklearn.metrics import r2_score\nr2_score(y_test, y_pred)*100","b6219443":"reg.predict(sc.transform([[0, 2018, 0, 7047, 3, 145, 53.3, 1.3]]))","1a1ab297":"from sklearn.ensemble import RandomForestRegressor\nreg = RandomForestRegressor(n_estimators=10, random_state=42)\nreg.fit(X_train, y_train)\ny_pred = reg.predict(X_test)\n\n\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(reg, X_train, y_train, cv = 10)\nprint('Accuracy: {:.2f}%'.format(accuracies.mean()*100))\nprint('Std: {:.2f}%'.format(accuracies.std()*100))\n\nfrom sklearn.metrics import r2_score\nr2_score(y_test, y_pred)*100","ec6b8fe8":"reg.predict(sc.transform([[0, 2018, 0, 7047, 3, 145, 53.3, 1.3]]))","578f730c":"from xgboost import XGBRegressor\nreg = XGBRegressor()\nreg.fit(X_train, y_train)\ny_pred = reg.predict(X_test)\n\n\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(reg, X_train, y_train, cv = 10)\nprint('Accuracy: {:.2f}%'.format(accuracies.mean()*100))\nprint('Std: {:.2f}%'.format(accuracies.std()*100))\n\nfrom sklearn.metrics import r2_score\nr2_score(y_test, y_pred)*100","00e5a4ea":"reg.predict(sc.transform([[0, 2018, 0, 7047, 3, 145, 53.3, 1.3]]))","2ef4db84":"np.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","1993392f":"import tensorflow as tf\n\nann = tf.keras.models.Sequential()","b43d02d1":"ann.add(tf.keras.layers.Dense(units = 6, activation = 'relu'))","d7dbe50e":"ann.add(tf.keras.layers.Dense(units = 6, activation = 'relu'))","2777abc5":"ann.add(tf.keras.layers.Dense(units = 1))","dff2ad36":"ann.compile(optimizer='adam', loss='mean_squared_error')","489d7195":"#training the model\nann.fit(X_train, y_train, batch_size=50, epochs=300)","f4cb0997":"y_pred = ann.predict(X_test)\ny_pred","38f6d5be":"from sklearn.metrics import r2_score\naccuracy = r2_score(y_test, y_pred)\naccuracy*100","875cc9b4":"ann.predict(sc.transform([[0, 2018, 0, 7047, 3, 145, 53.3, 1.3]]))","e4f82b93":"np.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","2a70690d":"### Importing the dataset","bfe899a2":"### Splitting dataset","ff0a11d7":"### Building an ANN","1cce1ce2":"### Importing the libraries","3d2a5932":"### Feature Scaling","2d62775e":"# TRYING ANN","7fc95bd9":"### Train Model + Cross Validation","524b0443":"#### Compile ANN","64c839ac":"### Variables","60875dda":"### Categorical data"}}