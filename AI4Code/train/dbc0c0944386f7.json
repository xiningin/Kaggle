{"cell_type":{"18743d2b":"code","5b2c22b9":"code","5f42b186":"code","55e97724":"code","849583b8":"code","27ce108d":"code","dfbd4cba":"code","1b8238e2":"code","64e00bf4":"code","0fbc06d5":"code","7ce49b08":"code","aa1780e0":"code","2651a805":"code","811a7481":"code","a624f4a9":"code","9a45222a":"code","1fdc257e":"code","304bf2a6":"code","0d38b4ff":"code","1276a68f":"code","30f24371":"code","b1e6e30e":"code","3685fa25":"code","8b4b0c30":"code","d38c7c94":"code","651cdaaf":"code","84fe5ec1":"code","8a0890e1":"code","489809ca":"code","3b0f32f8":"code","59e48dfb":"code","1e8f5376":"code","a139fda5":"code","9e4fa9ef":"code","d333dd4d":"code","d1439c58":"code","bf37425c":"code","d02ef327":"code","7bfa93f8":"code","86e3a95a":"code","59ec0a9b":"code","62a76cf0":"code","6633f3f9":"code","6146ab01":"code","b0db3184":"code","0272f5fa":"code","465360f7":"code","9beffb7a":"code","25e0f507":"code","21585a77":"code","c97cc8d6":"code","8fe1a4f3":"code","0c5b67bb":"code","e95c3f7d":"code","bc4b06cb":"code","8775c8fa":"code","3f2e36d9":"code","7e0c25b4":"code","06b9fc80":"code","34193aeb":"markdown","17a5d570":"markdown","b67dc067":"markdown","eb3fa7a3":"markdown","a0b12473":"markdown","34a6a678":"markdown","b0fe7f08":"markdown","b909f795":"markdown","d0414ade":"markdown","72619838":"markdown","d369d6ff":"markdown","f7b517c4":"markdown","a8e6a199":"markdown","11758243":"markdown","71a8fd69":"markdown","c5e2c20e":"markdown","255e27f3":"markdown","7873c8b3":"markdown"},"source":{"18743d2b":"import numpy as np\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix\nimport matplotlib.pyplot as plt\n\nimport pandas as pd\nimport shutil\nimport os\nimport imageio\nimport sys\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom PIL import Image, ImageOps\nimport scipy.ndimage as ndi\n\nfrom fastai.vision import *\nfrom fastai.metrics import error_rate","5b2c22b9":"import os\nprint(os.listdir(\"..\/input\/coronahack-chest-xraydataset\/\"))\nprint(os.listdir(\"..\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/\"))","5f42b186":"os.mkdir(\"\/kaggle\/corona_check\")\nos.mkdir(\"\/kaggle\/corona_check\/train\")\nos.mkdir(\"\/kaggle\/corona_check\/test\")\nos.mkdir(\"\/kaggle\/corona_check\/train\/Normal\/\")\nos.mkdir(\"\/kaggle\/corona_check\/train\/COVID19\/\")\nos.mkdir(\"\/kaggle\/corona_check\/test\/Normal\/\")\nos.mkdir(\"\/kaggle\/corona_check\/test\/COVID19\/\")\n","55e97724":"print(os.listdir(\"\/kaggle\/corona_check\/train\/Normal\"))\nprint(os.listdir(\"\/kaggle\/corona_check\/test\/Normal\"))","849583b8":"!cd \/kaggle\/corona_check\/train\/\n!rm \/kaggle\/corona_check\/train\/*.jpeg\n\n!cd \/kaggle\/corona_check\/test\/\n!rm \/kaggle\/corona_check\/test\/*.jpeg","27ce108d":"def copy_img(src_path,dst_path):\n    try:\n        shutil.copy(src_path, dst_path)\n        stmt ='File Copied'\n    except IOError as e:\n        print('Unable to copy file {} to {}'\n              .format(src_path, dst_path))\n        stmt ='Copy Failed - IO Error'\n    except:\n        print('When try copy file {} to {}, unexpected error: {}'\n              .format(src_path, dst_path, sys.exc_info()))\n        stmt ='Copy Failed - other Error'+ sys.exc_info()\n        \n    return stmt ","dfbd4cba":"data_dir=\"..\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/\"\nmetadata_path=\"..\/input\/coronahack-chest-xraydataset\/\"","1b8238e2":"train_dir = os.path.join(data_dir, 'train')\ntest_dir = os.path.join(data_dir, 'test')","64e00bf4":"meta_data = pd.read_csv(metadata_path+'Chest_xray_Corona_Metadata.csv')\nmeta_data.head()","0fbc06d5":"meta_data['File_path']=''\nmeta_data.loc[meta_data['Dataset_type']=='TRAIN','File_path']=train_dir+'\/'\nmeta_data.loc[meta_data['Dataset_type']=='TEST','File_path']=test_dir+'\/'","7ce49b08":"meta_data['X_ray_img_nm_path']=meta_data['File_path']+meta_data['X_ray_image_name']","aa1780e0":"meta_data.head()","2651a805":"meta_COVID_19_train = meta_data[(meta_data['Dataset_type']=='TRAIN') & \n                        ((meta_data['Label']=='Normal')|(meta_data['Label']=='Pnemonia') & (meta_data['Label_2_Virus_category']=='COVID-19'))]\n\n\nmeta_COVID_19_test = meta_data[(meta_data['Dataset_type']=='TEST') & \n                        ((meta_data['Label']=='Normal')|(meta_data['Label']=='Pnemonia') & (meta_data['Label_2_Virus_category']=='COVID-19'))]\n\n\n## Moving the 10 Corona Infected dataset to Test\n\nmeta_data_covid_test = meta_data[meta_data['Label_2_Virus_category']=='COVID-19'].sample(12)\nmeta_COVID_19_train = meta_COVID_19_train[~meta_COVID_19_train['X_ray_image_name'].isin(meta_data_covid_test['X_ray_image_name'])]\nmeta_COVID_19_test_fnl = pd.concat([meta_data_covid_test,meta_COVID_19_test],ignore_index=False)","811a7481":"meta_COVID_19_train.loc[meta_COVID_19_train['Label'] =='Pnemonia','Label']='COVID19'\nmeta_COVID_19_test_fnl.loc[meta_COVID_19_test_fnl['Label'] =='Pnemonia','Label']='COVID19'","a624f4a9":"print(\"===============Train Set==========================\\n\")\nprint(meta_COVID_19_train.groupby(['Label']).agg({'Dataset_type':'count'}))\n\nprint(\"\\n===============Test Set==========================\\n\")\nprint(meta_COVID_19_test_fnl.groupby(['Label']).agg({'Dataset_type':'count'}))","9a45222a":"meta_COVID_19_train['Img_tgt_path']=\"\/kaggle\/corona_check\/train\/\"\nmeta_COVID_19_test_fnl['Img_tgt_path']=\"\/kaggle\/corona_check\/test\/\"","1fdc257e":"meta_COVID_19_train.loc[meta_COVID_19_train['Label']=='Normal','Img_tgt_path']=meta_COVID_19_train['Img_tgt_path']+'Normal\/'\nmeta_COVID_19_train.loc[meta_COVID_19_train['Label']=='COVID19','Img_tgt_path']=meta_COVID_19_train['Img_tgt_path']+'COVID19\/'\n\nmeta_COVID_19_test_fnl.loc[meta_COVID_19_test_fnl['Label']=='Normal','Img_tgt_path']=meta_COVID_19_test_fnl['Img_tgt_path']+'Normal\/'\nmeta_COVID_19_test_fnl.loc[meta_COVID_19_test_fnl['Label']=='COVID19','Img_tgt_path']=meta_COVID_19_test_fnl['Img_tgt_path']+'COVID19\/'","304bf2a6":"meta_COVID_19_train['Move_status'] = np.vectorize(copy_img)(meta_COVID_19_train['X_ray_img_nm_path'],meta_COVID_19_train['Img_tgt_path'])\nmeta_COVID_19_test_fnl['Move_status'] = np.vectorize(copy_img)(meta_COVID_19_test_fnl['X_ray_img_nm_path'],meta_COVID_19_test_fnl['Img_tgt_path'])","0d38b4ff":"xray_dir = \"..\/input\/covidxray\/\"\nxray_names = []\nfor i in range(1,73):\n    name = str(i) + \".jpeg\" #name of each picture\n    xray_names.append(name)\n\ndata = {'name':xray_names}    \n\nxraydf = pd.DataFrame(data)\nxraydf['from'] = xray_dir + xraydf['name'] #add the input folder to each picture name to get location of each picture\nxraydf['to'] = ''\nxraydf['to'].iloc[:50] = \"\/kaggle\/corona_check\/train\/COVID19\/\" + xraydf['name'].iloc[:50] #send 50 images to training folder\nxraydf['to'].iloc[50:] = \"\/kaggle\/corona_check\/test\/COVID19\/\" + xraydf['name'].iloc[50:] #send the rest to test folder\n\n\nxraydf['move_status'] = np.vectorize(copy_img)(xraydf['from'],xraydf['to'])","1276a68f":"dirname = '\/kaggle\/corona_check\/'\ntrain_path = os.path.join(dirname, 'train\/')\ntrain_nrml_pth = os.path.join(train_path, 'Normal\/')\ntrain_covid19_pth = os.path.join(train_path, 'COVID19\/')\n\ntest_path = os.path.join(dirname, 'test\/')\ntest_nrml_pth = os.path.join(train_path, 'Normal\/')\ntest_covid19_pth = os.path.join(train_path, 'COVID19\/')","30f24371":"def plot_imgs(item_dir, num_imgs=25):\n    all_item_dirs = os.listdir(item_dir)\n    item_files = [os.path.join(item_dir, file) for file in all_item_dirs][:num_imgs]\n\n    plt.figure(figsize=(10, 10))\n    for idx, img_path in enumerate(item_files):\n        plt.subplot(5, 5, idx+1)\n\n        img = plt.imread(img_path)\n        plt.imshow(img)\n\n    plt.tight_layout()","b1e6e30e":"plot_imgs(train_nrml_pth)","3685fa25":"plot_imgs(train_covid19_pth)","8b4b0c30":"def plot_img_hist(item_dir, num_img=6):\n  all_item_dirs = os.listdir(item_dir)\n  item_files = [os.path.join(item_dir, file) for file in all_item_dirs][:num_img]\n  \n  #plt.figure(figsize=(10, 10))\n  for idx, img_path in enumerate(item_files):\n    fig1 = plt.figure(idx,figsize=(10, 10))\n    fig1.add_subplot(2, 2, 1)\n    img = mpimg.imread(img_path, )\n    plt.imshow(img)\n    fig1.add_subplot(2, 2, 2)\n    plt.hist(img.ravel(),bins=256, fc='k', ec='k')\n  \n  plt.tight_layout()","d38c7c94":"plot_img_hist(train_nrml_pth,3)","651cdaaf":"plot_img_hist(train_covid19_pth,3)","84fe5ec1":"def plot_img_hist_ndi(item_dir, num_img=6):\n  all_item_dirs = os.listdir(item_dir)\n  item_files = [os.path.join(item_dir, file) for file in all_item_dirs][:num_img]\n  \n  #plt.figure(figsize=(10, 10))\n  for idx, img_path in enumerate(item_files):\n    im = imageio.imread(img_path)\n    hist = ndi.histogram(im, min=0, max=255, bins=256)\n    cdf = hist.cumsum() \/ hist.sum()\n    \n    fig1 = plt.figure(idx,figsize=(10, 10))\n    fig1.add_subplot(2, 3, 1)\n    img = mpimg.imread(img_path, )\n    plt.title(\"No. {}\".format(idx))\n    plt.imshow(img)\n    fig1.add_subplot(2, 3, 2)\n    plt.title(\"Histogram\")\n    plt.plot(hist)\n    fig1.add_subplot(2, 3, 3)\n    plt.title(\"CDF\")\n    plt.plot(cdf)\n\n  plt.tight_layout()","8a0890e1":"plot_img_hist_ndi(train_nrml_pth,2)","489809ca":"plot_img_hist_ndi(train_covid19_pth,2)","3b0f32f8":"fastdata = ImageDataBunch.from_folder('\/kaggle\/corona_check\/', ds_tfms=get_transforms(), size=224, bs=64, valid = 'test').normalize(imagenet_stats)\nfastdata.show_batch(rows=3, figsize=(7, 8))","59e48dfb":"learn34 = cnn_learner(fastdata, models.resnet34, metrics=error_rate)\nlearn101 = cnn_learner(fastdata, models.resnet101, metrics=error_rate)\n","1e8f5376":"defaults.device = torch.device('cuda')\ntorch.backends.cudnn.enabled","a139fda5":"learn34.fit_one_cycle(4)","9e4fa9ef":"learn101.fit_one_cycle(4)","d333dd4d":"learn34.unfreeze() # must be done before calling lr_find\nlearn34.lr_find()\nlearn34.recorder.plot()","d1439c58":"learn101.unfreeze() # must be done before calling lr_find\nlearn101.lr_find()\nlearn101.recorder.plot()","bf37425c":"learn34.fit_one_cycle(4, max_lr=slice(1e-5,1e-4))","d02ef327":"learn101.fit_one_cycle(4, max_lr=slice(1e-5,1e-4))","7bfa93f8":"learn34.save('covid-detection-resnet-34')\nlearn101.save('covid-detection-resnet-101')","86e3a95a":"from fastai.widgets import *","59ec0a9b":"ds, idxs = DatasetFormatter().from_toplosses(learn34)\nImageCleaner(ds, idxs, '\/kaggle\/corona_check\/')","62a76cf0":"ds, idxs = DatasetFormatter().from_toplosses(learn101)\nImageCleaner(ds, idxs, '\/kaggle\/corona_check\/')","6633f3f9":"interp34 = ClassificationInterpretation.from_learner(learn34)\ninterp34.plot_confusion_matrix()","6146ab01":"interp101 = ClassificationInterpretation.from_learner(learn101)\ninterp101.plot_confusion_matrix()","b0db3184":"interp34.plot_top_losses(9, figsize=(15,15))","0272f5fa":"interp101.plot_top_losses(9, figsize=(15,15))","465360f7":"learn16 = cnn_learner(fastdata, models.vgg16_bn, metrics=error_rate)\nlearn19 = cnn_learner(fastdata, models.vgg19_bn, metrics=error_rate)","9beffb7a":"learn16.fit_one_cycle(4)","25e0f507":"learn19.fit_one_cycle(4)","21585a77":"learn16.unfreeze() # must be done before calling lr_find\nlearn16.lr_find()\nlearn16.recorder.plot()","c97cc8d6":"learn19.unfreeze() # must be done before calling lr_find\nlearn19.lr_find()\nlearn19.recorder.plot()","8fe1a4f3":"learn16.fit_one_cycle(4, max_lr=slice(1e-4,1e-3))","0c5b67bb":"learn19.fit_one_cycle(4, max_lr=slice(1e-4,1e-3))","e95c3f7d":"learn16.save('covid-detection-vgg-16')","bc4b06cb":"learn19.save('covid-detection-vgg-19')","8775c8fa":"interp16 = ClassificationInterpretation.from_learner(learn16)\ninterp16.plot_confusion_matrix()","3f2e36d9":"interp19 = ClassificationInterpretation.from_learner(learn19)\ninterp19.plot_confusion_matrix()","7e0c25b4":"interp16.plot_top_losses(9, figsize=(15,15))","06b9fc80":"interp19.plot_top_losses(9, figsize=(15,15))","34193aeb":"> ## Moving the file to seperate path for COVID19 Classification ","17a5d570":"## vgg","b67dc067":"## RESNET\n\nFirst we initialize the model and make sure it's using the GPU","eb3fa7a3":"Now we try and find the optimal learning rates for the other layers","a0b12473":"**Import Metadata information**","34a6a678":"# Exploratory Data Analysis","b0fe7f08":"## Preparing the dataset ","b909f795":"## Importing necessary libraries","d0414ade":"### Dataset contains variety of latest for ease of classification first we will catagorise Normal \/ Healthy & COVID ","72619838":"# fastai\nWe use the fastai API, using the RESNET34, RESNET101, vgg16_bn and vgg19_bn models","d369d6ff":"## Histogram with Mathplotlib","f7b517c4":"By default, only the fully conneted layers at the top are unfrozen","a8e6a199":"You can save the learned model in save states","11758243":"You can show the images with the highest loss, and choose whether to delete them or not.","71a8fd69":"#           CoronaHack - fastai","c5e2c20e":"## Adding additional COVID XRAYS","255e27f3":"About this Notebook:\n\nUsing Coronahack dataset plus some extras, training different models with fastai to predict COVID-19 using X-ray images\n\n[View Writeup Here](https:\/\/drive.google.com\/file\/d\/1kFZkyYo3IgvvJKnicMRSeNoLcODIrBOi\/view?usp=sharing)","7873c8b3":"Show the images with the highest loss (most of these seem to be pictures of babies?)"}}