{"cell_type":{"98b8add1":"code","71a02d5e":"code","430ea785":"code","014e7dd2":"code","43f1b573":"code","1e3398ac":"code","20511998":"code","4f4357d7":"code","6fa4b73e":"code","bc81ebfa":"code","3f434c15":"code","d724d8ef":"code","582d4a61":"code","92060c76":"markdown","ae67f265":"markdown","4f9350e2":"markdown","edf16fed":"markdown","2784d35e":"markdown","5a0042b9":"markdown","ff9251bf":"markdown","7b3471b0":"markdown","3cf7e979":"markdown","d520b2c2":"markdown","c74b2c18":"markdown","908d0261":"markdown","d4d58c40":"markdown"},"source":{"98b8add1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib_venn as venn\nfrom math import pi\nfrom pandas.tools.plotting import parallel_coordinates\nimport plotly.graph_objs as go\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","71a02d5e":"# Define dictionary\ndictionary = {\"column1\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\n              \"column2\":[1,2,3,4,np.nan,6,7,8,np.nan,10,np.nan,12,13,14,15,16,np.nan,18,np.nan,20],\n              \"column3\":[1,2,3,4,np.nan,6,7,8,9,10,11,12,13,np.nan,15,16,17,18,np.nan,20]}\n# Create data frame from dictionary\ndata_missingno = pd.DataFrame(dictionary) \n\n# import missingno library\nimport missingno as msno\nmsno.matrix(data_missingno)\nplt.show()","430ea785":"# missingno bar plot\nmsno.bar(data_missingno)\nplt.show()","014e7dd2":"# load iris data\ndata = pd.read_csv('..\/input\/Iris.csv')\ndata = data.drop(['Id'],axis=1)\n# Make the plot\nplt.figure(figsize=(15,10))\nparallel_coordinates(data, 'Species', colormap=plt.get_cmap(\"Set1\"))\nplt.title(\"Iris data class visualization according to features (setosa, versicolor, virginica)\")\nplt.xlabel(\"Features of data set\")\nplt.ylabel(\"cm\")\nplt.savefig('graph.png')\nplt.show()","43f1b573":"# Calculate the correlation between individuals.\ncorr = data.iloc[:,0:4].corr()\ncorr","1e3398ac":"# import networkx library\nimport networkx as nx\n\n# Transform it in a links data frame (3 columns only):\nlinks = corr.stack().reset_index()\nlinks.columns = ['var1', 'var2','value']\n\n# correlation\nthreshold = -1\n\n# Keep only correlation over a threshold and remove self correlation (cor(A,A)=1)\nlinks_filtered=links.loc[ (links['value'] >= threshold ) & (links['var1'] != links['var2']) ]\n \n# Build your graph\nG=nx.from_pandas_dataframe(links_filtered, 'var1', 'var2')\n \n# Plot the network\nnx.draw_circular(G, with_labels=True, node_color='orange', node_size=300, edge_color='red', linewidths=1, font_size=10)\n","20511998":"data.head()","4f4357d7":"# venn2\nfrom matplotlib_venn import venn2\nsepal_length = data.iloc[:,0]\nsepal_width = data.iloc[:,1]\npetal_length = data.iloc[:,2]\npetal_width = data.iloc[:,3]\n# First way to call the 2 group Venn diagram\nvenn2(subsets = (len(sepal_length)-15, len(sepal_width)-15, 15), set_labels = ('sepal_length', 'sepal_width'))\nplt.show()","6fa4b73e":"# donut plot\nfeature_names = \"sepal_length\",\"sepal_width\",\"petal_length\",\"petal_width\"\nfeature_size = [len(sepal_length),len(sepal_width),len(petal_length),len(petal_width)]\n# create a circle for the center of plot\ncircle = plt.Circle((0,0),0.2,color = \"white\")\nplt.pie(feature_size, labels = feature_names, colors = [\"red\",\"green\",\"blue\",\"cyan\"] )\np = plt.gcf()\np.gca().add_artist(circle)\nplt.title(\"Number of Each Features\")\nplt.show()","bc81ebfa":"# spider graph\ncategories = list(data)[:4]\nN = len(categories)\nangles = [ n \/ float(N)*2*pi for n in range(N)]\nangles = angles + angles[:1]\nplt.figure(figsize = (10,10))\nax = plt.subplot(111,polar = True)\nax.set_theta_offset(pi\/2)\nax.set_theta_direction(-1)\nplt.xticks(angles[:-1],categories)\nax.set_rlabel_position(0)\nplt.yticks([0,2,4,6],[\"0\",\"2\",\"4\",\"6\"],color= \"red\", size = 7)\nplt.ylim(0,6)\n\nvalues = data.loc[0].drop(\"Species\").values.flatten().tolist()\nvalues = values + values[:1]\nax.plot(angles,values,linewidth = 1,linestyle=\"solid\",label =\"setosa\" )\nax.fill(angles,values,\"b\",alpha=0.1)\n\nvalues = data.loc[1].drop(\"Species\").values.flatten().tolist()\nvalues = values + values[:1]\nax.plot(angles,values,linewidth = 1,linestyle=\"solid\",label =\"versicolor\" )\nax.fill(angles,values,\"orange\",alpha=0.1)\nplt.legend(loc = \"upper left\",bbox_to_anchor = (0.1,0.1))\nplt.show()","3f434c15":"# cluster map (dendogram and tree)\ndf = data.loc[:,[\"SepalLengthCm\",\"SepalWidthCm\",\"PetalLengthCm\",\"PetalWidthCm\"]]\ndf1 = data.Species\nx = dict(zip(df1.unique(),\"rgb\"))\nrow_colors = df1.map(x)\ncg = sns.clustermap(df,row_colors=row_colors,figsize=(12, 12),metric=\"correlation\")\nplt.setp(cg.ax_heatmap.yaxis.get_majorticklabels(),rotation = 0,size =8)\nplt.show()","d724d8ef":"# trace1 is line plot\n# go: graph object\ntrace1 = go.Scatter(\n    x=df.index,\n    y=df.SepalLengthCm,\n    mode = \"markers\",\n    xaxis='x2',\n    yaxis='y2',\n    name = \"SepalLengthCm\",\n    marker = dict(color = 'rgba(0, 112, 20, 0.8)'),\n)\n\n# trace2 is histogram\ntrace2 = go.Histogram(\n    x=df.SepalLengthCm,\n    opacity=0.75,\n    name = \"Sepal Length(Cm)\",\n    marker=dict(color='rgba(10, 200, 250, 0.6)'))\n\n# add trace1 and trace2\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.7, 1],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = ' Sepal Length(Cm) Histogram and Scatter Plot'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","582d4a61":"# import data again\ndata = pd.read_csv('..\/input\/Iris.csv')\n# data of iris setosa\niris_setosa = data[data.Species == \"Iris-setosa\"]\n# # data of iris virginica\niris_virginica = data[data.Species == \"Iris-virginica\"]\n\n# trace1 =  iris setosa\ntrace1 = go.Scatter3d(\n    x=iris_setosa.SepalLengthCm,\n    y=iris_setosa.SepalWidthCm,\n    z=iris_setosa.PetalLengthCm,\n    mode='markers',\n    name = \"iris_setosa\",\n    marker=dict(\n        color='rgb(217, 100, 100)',\n        size=12,\n        line=dict(\n            color='rgb(255, 255, 255)',\n            width=0.1\n        )\n    )\n)\n# trace2 =  iris virginica\ntrace2 = go.Scatter3d(\n    x=iris_virginica.SepalLengthCm,\n    y=iris_virginica.SepalWidthCm,\n    z=iris_virginica.PetalLengthCm,\n    mode='markers',\n    name = \"iris_virginica\",\n    marker=dict(\n        color='rgb(54, 170, 127)',\n        size=12,\n        line=dict(\n            color='rgb(204, 204, 204)',\n            width=0.1\n        )\n    )\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = ' 3D iris_setosa and iris_virginica',\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0\n    )\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","92060c76":"* We have 4 individuals(features), and know how close they are related to each other (above correlation table).\n* It is possible to represent these relationships in a network\n* Each individual called as a node. If 2 individuals(features like sepal length and sepal width) are close enough (threshold), then they are linked by a line.\n    * threshold: threshold of the correlation. For example, if we say that threshold = 0.5, network will be established between the nodes that have higher correlation than 0.5\n* I will put -1 that is default threshold value. min(cor(A,B))= -1 so all nodes are connected with each other.\n* You can try threshold = 0.9, you will see that petal length and width are connected with each other.\n* It is alternative to heatmap.\n* As a final words of network charts, they can be used in data sets that are related with populations and their habits. Maybe,we can observe populations are clearly split in X groups according to their habits.\n* Now lets look at our code with iris datasets.","ae67f265":"<a id=\"3\"><\/a> <br>\n## Network Charts (Networkx)\n* We will use iris data that we import at previous part( parallel plot)\n* Network charts are related with correlation network.\n* It can be used instead of heatmaps in seaborn library.\n* At first look at correlation between features.\n    * corr(): gives correlation between features\n    * As you can see from table below, petal length is positively correlated with sepal length and petal width. Also, petal length is negatively correlated with sepal width.","4f9350e2":"<a id=\"7\"><\/a> <br>\n## Cluster Map (Seaborn)\n* Plot a matrix dataset as a hierarchically-clustered heatmap.","edf16fed":"<a id=\"1\"><\/a> <br>\n## Matrix and Bar Plots (Missingno)\n* In data analysis, one of the first steps is cleaning messy datasets and missing values.\n* In order to explore whether data has missign value or not, I always use .info() method from pandas library. It gives a lot of information.\n* Visualization is always attractive for people. Therefore, if we can visualize missign values, it can be better understandable.\n* In order to visualize missign data, we can use missigno package.\n* Lets create pandas dataframe that includes missign values (NaN) and visualize it.\n    * Dictionary: One of the methods of creating data frame is first creating dictionary then put it into pd.DataFrame\n    * data_missingno: Data frame that we will use in this example\n    * import missingno as msno: import missingno library and define as msno (shortcut)\n    * matrix(): Create matrix. Number of rows is number of sample and number of columns is number of features(column1, column2, column3) in data_missingno.\n    * show(): shows the plot\n* The sparkline at right summarizes the general shape of the data completeness and points out the maximum and minimum rows.\n* Missign values are white and non missign values are black in plot.\n* It can be seen from plot column1 does not have missign value. Column2 has five missign values and column3 has three missign values.","2784d35e":"<a id=\"10\"><\/a> <br>\n## Conclusion\n* I want to show some rare visualization techniques that I think rare for me.\n* If you like it or learn something from it, I will be happy when you upvote kernel\n* **If you have any suggestion or advice or feedback, I will be very appreciated to hear them.** \n* Also there are other visualization tutorials:\n    * Bokeh 1: https:\/\/www.kaggle.com\/kanncaa1\/interactive-bokeh-tutorial-part-1\n    * Bokeh 2: https:\/\/www.kaggle.com\/kanncaa1\/interactive-bokeh-tutorial-part-2\n    * Plotly: https:\/\/www.kaggle.com\/kanncaa1\/plotly-tutorial-for-beginners\n    * Seaborn: https:\/\/www.kaggle.com\/kanncaa1\/seaborn-tutorial-for-beginners\n    \n","5a0042b9":"<a id=\"2\"><\/a> <br>\n## Parallel Plots (Pandas)\n* In order to learn parallel plots, we will use famous iris data set from sklearn library\n* Parallel plot allow to compare the feature of several individual observations on a set of numerical variables.\n* Each vertical bar represents a feature(column or variable) like petal length (cm).\n* Values are then plotted as series of lines connected across each axis.\n* Different colors shows different classes like setosa.\n* Parallel plot allow to detect interesting patterns. For example as you can see we can easily classify *setosa* according to *petal width (cm)* feature.\n* Lets look at code.\n    * Load iris data into data frame\n    * parallel_coordinates: we import parallel_coordinates from pandas library\n    * colormap: color map that paints classes with different colors","ff9251bf":"<a id=\"9\"><\/a> <br>\n## Basic 3D Scatter Plot (Plotly)\n* import data again to avoid confusion\n* go.Scatter3d: 3D scatter\n* We will plot iris setosa and iris virginica classes according to their Sepal Length(x), Sepal Width(y), and Petal Length(z).","7b3471b0":"* Apart from matrix plot we can use bar plot to observe missign values.\n* Bar is a simple visualization of nullity by column.\n* Numbers at left side of plot is percentage.\n* Numbers at top of the plot is number of non missign values\n* Numbers at right side of plot is number of sample in data.","3cf7e979":"<a id=\"4\"><\/a> <br>\n## Venn (Matplotlib)\n* You can use venn diagram to visualize the size of groups and their intersection.","d520b2c2":"<a id=\"8\"><\/a> <br>\n## Inset Plots (Plotly)\n* If you do not understand the code check my plotly tutorial.","c74b2c18":" <a id=\"5\"><\/a> <br>\n## Donut (Matplotlib)\n* A donut chart is a pie chart with an area of the center cut out. ","908d0261":"# INTRODUCTION\n* I want to share with you a situation that draws my attention about exploratory data analysis(EDA).\n* When I look at exploratory data analysis I observe that most of the plots or graphs are ordinary like bar plots, heat maps for correlation and maps.\n* Although I like reading different kernels and exploring varied datasets, same visualization plots are boring for me and they do not improve me.\n* On the other hand, in order to make better visualization, you need to improve and fill with more visualization technique your graphic repository. \n* Therefore, I make tutorial about rare visualization techniques. Some of the plots or graphs can be familiar for you but as much as I can, I will try to visualize different graphics.\n* Python is open source and diffent libraries can be used. Lets look at which visualization libraries we will use.\n<br>\n<br>\n* [Matrix and Box Plots (Missingno)](#1)\n* [Parallel Plots (Pandas)](#2)\n* [Network Charts (Networkx)](#3)\n* [Venn (Matplotlib)](#4)\n* [Donut (Matplotlib)](#5)\n* [Spider Chart (Matplotlib)](#6) \n* [Cluster Map (Seaborn)](#7) \n* [Inset Plots (Plotly)](#8) \n* [Basic 3D Scatter Plot (Plotly)](#9) \n* Earthquare Animation (Plotly): https:\/\/www.kaggle.com\/kanncaa1\/earthquake-animation-with-plotly\n<br>\n<br>\n[Conclusion](#10) ","d4d58c40":" <a id=\"6\"><\/a> <br>\n## Spider Chart (Matplotlib)\n* A spider(radar) plot  is a graphical method of displaying multivariate data in the form of a two-dimensional chart of three or more quantitative variables."}}