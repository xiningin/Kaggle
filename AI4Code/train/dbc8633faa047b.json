{"cell_type":{"816ccfcf":"code","f9c9050b":"code","1ff82d41":"code","71e42490":"code","b71e49bb":"code","7d4334e5":"code","e56c8467":"code","5bd98f69":"code","ce58c841":"code","8009eb51":"code","5a568bff":"code","3faf0403":"code","5c6c6764":"code","cbcaaf53":"code","da83484a":"code","412af210":"code","fa77956e":"code","bed6fca0":"code","ce8a62d1":"code","47c08553":"code","a3adf9b5":"code","2afd5338":"code","e4d9536d":"code","ca1f71bd":"code","6997ba11":"code","ac20a687":"code","9ee87907":"code","54877e4b":"code","7dcab759":"code","a5737cd8":"code","5ddae725":"code","04ff7de1":"code","b1514047":"code","f709e682":"code","26f21e26":"code","61c737fe":"code","ba78f8da":"code","e23590af":"code","859dd525":"code","f6376611":"code","763a4a3e":"code","1d490db1":"code","10756cf1":"code","12dcc69c":"code","1aa49493":"code","bf371bf4":"code","c43a1aac":"code","b5938a52":"code","4398abcd":"code","cdc6ab5f":"code","0012af07":"code","b5d66ad6":"code","0c2ac025":"code","47ecfefe":"code","435ef7b5":"markdown","7af14964":"markdown","1e96b403":"markdown","da877f49":"markdown","f05b8a6f":"markdown","d003253d":"markdown","e2267ea2":"markdown","668cadc3":"markdown","3c896474":"markdown","29d13b61":"markdown","97b23f01":"markdown","a6bec20f":"markdown","bc486b12":"markdown","e28f55c4":"markdown","766e3ea0":"markdown","795f1014":"markdown","dace8594":"markdown"},"source":{"816ccfcf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f9c9050b":"import os\nimport torch\nimport torchvision\nimport tarfile\nimport torch.nn as nn\nimport numpy as np\nimport torch.nn.functional as F\nfrom torchvision.datasets.utils import download_url\nfrom torchvision.datasets import ImageFolder\nfrom torch.utils.data import DataLoader\nimport torchvision.transforms as tt\nfrom torch.utils.data import random_split\nfrom torchvision.utils import make_grid\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom tqdm.notebook import tqdm\nimport torchvision.models as models","1ff82d41":"# Load the directory paths to the dataset\nDATA_DIR = '..\/input\/fruits\/fruits-360'\nTRAIN_DIR = DATA_DIR + '\/Training'\nTEST_DIR = DATA_DIR + '\/Test'","71e42490":"# Look at the root directory\nprint('The folders inside the root directory are: ')\nprint(os.listdir(DATA_DIR))\n\n# The classes are the name of the folders inside the Training directory\ntrain_classes = os.listdir(TRAIN_DIR)\nprint('\\nThe classes on the Training directory are: ')\nprint(train_classes)\nprint('The Training directory has %s classes.' %len(train_classes))\n\n# The classes are the name of the folders inside the Test directory\ntest_classes = os.listdir(TEST_DIR)\nprint('\\nThe classes on the Test directory are: ')\nprint(test_classes)\nprint('The Training directory has %s classes. \\n' %len(test_classes))","b71e49bb":"print('\\nThe images inside the \/Test\/Apple Red 2 directory are:')\nprint(os.listdir(TEST_DIR + '\/Apple Red 2'))\nprint('\\nThe \/Test\/Apple Red 2 directory has %s images.' %len(os.listdir(TEST_DIR + '\/Apple Red 2')))","7d4334e5":"train_tfms = tt.Compose([tt.RandomCrop(100, padding=10, padding_mode='reflect'), \n                         tt.RandomHorizontalFlip(),\n                         tt.RandomRotation(20),\n                         tt.ToTensor()\n                         ])\nvalid_tfms = tt.Compose([tt.ToTensor()])","e56c8467":"train_ds = ImageFolder(TRAIN_DIR, train_tfms)\nvalid_ds = ImageFolder(TEST_DIR, valid_tfms)","5bd98f69":"def show_example_train(img, label):\n    print('Label: ', train_ds.classes[label], \"(\"+str(label)+\")\")\n    plt.imshow(img.permute(1, 2, 0))\n    print('Image size: ', img.size())\n\ndef show_example_test(img, label):\n    print('Label: ', valid_ds.classes[label], \"(\"+str(label)+\")\")\n    plt.imshow(img.permute(1, 2, 0))\n    print('Image size: ', img.size())","ce58c841":"show_example_train(*train_ds[0])","8009eb51":"show_example_test(*valid_ds[3695])","5a568bff":"batch_size_custom = 32      # Batch size for custom CNN model\nbatch_size_resnet = 32     # Batch size for resnet CNN model\nrandom_seed = 42\ntorch.manual_seed(random_seed);","3faf0403":"# DataLoaders for Custom CNN Model\ntrain_dl_custom = DataLoader(train_ds, batch_size_custom, shuffle=True, num_workers=3, pin_memory=True)\nvalid_dl_custom = DataLoader(valid_ds, batch_size_custom*2, num_workers=3, pin_memory=True)","5c6c6764":"# DataLoaders for ResNet CNN Model\ntrain_dl_resnet = DataLoader(train_ds, batch_size_resnet, shuffle=True, num_workers=3, pin_memory=True)\nvalid_dl_resnet = DataLoader(valid_ds, batch_size_resnet*2, num_workers=3, pin_memory=True)","cbcaaf53":"def show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(12, 12))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images[:64], nrow=8).permute(1, 2, 0))\n        break","da83484a":"print('train_dl_custom dataloader samples: ')\nshow_batch(train_dl_custom)","412af210":"print('valid_dl_custom dataloader samples: ')\nshow_batch(valid_dl_custom)","fa77956e":"print('train_dl_resnet dataloader samples: ')\nshow_batch(train_dl_resnet)","bed6fca0":"print('valid_dl_resnet dataloader samples: ')\nshow_batch(valid_dl_resnet)","ce8a62d1":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","47c08553":"device = get_default_device()\ndevice","a3adf9b5":"train_dl_custom = DeviceDataLoader(train_dl_custom, device)\nvalid_dl_custom = DeviceDataLoader(valid_dl_custom, device)","2afd5338":"# Device Data Loader for Custom CNN Model\ntrain_dl_resnet = DeviceDataLoader(train_dl_resnet, device)\nvalid_dl_resnet = DeviceDataLoader(valid_dl_resnet, device)","e4d9536d":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\nclass ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                      \n        loss = F.cross_entropy(out, labels)                   # Calculate training loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                                    # Generate predictions\n        loss = F.cross_entropy(out, labels)                   # Calculate validation loss\n        acc = accuracy(out, labels)                           # Calculate accuracy\n        return {'val_loss': loss.detach(),  'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()         # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()            # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], last_lr: {:.10f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_acc']))","ca1f71bd":"def conv_block(in_channels, out_channels, pool=False):\n    layers = [nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1), \n              nn.BatchNorm2d(out_channels),     # Batch Normalization\n              nn.ReLU(inplace=True)]\n    if pool: layers.append(nn.MaxPool2d(2))\n    return nn.Sequential(*layers)\n\nclass CustomCNN(ImageClassificationBase):\n    def __init__(self, in_channels, num_classes):\n        super().__init__()\n        \n        self.conv1 = conv_block(in_channels, 128)                                 # 3 x 64 x 64 \n        self.conv2 = conv_block(128, 256, pool=True)                              # 128 x 32 x 32 \n        self.res1 = nn.Sequential(conv_block(256, 256), conv_block(256, 256))     # 256 x 32 x 32\n        \n        self.conv3 = conv_block(256, 512, pool=True)                              # 512 x 16 x 16\n        self.conv4 = conv_block(512, 1024, pool=True)                             # 1024 x 8 x 8\n        self.res2 = nn.Sequential(conv_block(1024, 1024), conv_block(1024, 1024)) # 1024 x 8 x 8\n\n        self.conv5 = conv_block(1024, 2048, pool=True)                            # 256 x 8 x 8\n        self.conv6 = conv_block(2048, 4096, pool=True)                            # 512 x 4 x 4\n        self.res3 = nn.Sequential(conv_block(4096, 4096), conv_block(4096, 4096)) # 512 x 4 x 4\n        \n        self.classifier = nn.Sequential(nn.MaxPool2d(4),                          # 9216 x 1 x 1\n                                        nn.Flatten(),                             # 9216\n                                        nn.Linear(9216, num_classes))             # 131\n        \n    def forward(self, xb):\n        out = self.conv1(xb)\n        out = self.conv2(out)\n        out = self.res1(out) + out    # Residual Block \n        out = self.conv3(out)\n        out = self.conv4(out)\n        out = self.res2(out) + out    # Residual Block\n        out = self.classifier(out)\n        return out\n\n        # remove the + out to see the differences of adding the output at the end","6997ba11":"class ResNetCNN(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet34(pretrained=True)     # You can change the resnet model here\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 131)          # Output classes\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))\n    \n    def freeze(self):\n        # To freeze the residual layers\n        for param in self.network.parameters():\n            param.require_grad = False\n        for param in self.network.fc.parameters():\n            param.require_grad = True\n    \n    def unfreeze(self):\n        # Unfreeze all layers\n        for param in self.network.parameters():\n            param.require_grad = True","ac20a687":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    print('Evaluating Model ...')\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in tqdm(val_loader)]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    # Set up cutom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n                                                steps_per_epoch=len(train_loader))\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        lrs = []\n        print('\\nTraining Model ...')\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # Gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n        \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","9ee87907":"epochs = 10\nmax_lr = 1e-3\ngrad_clip = 1e-1\nweight_decay = 1e-4\nopt_func = torch.optim.Adam","54877e4b":"input_channels = 3\noutput_classes = 131 \n\ncustom_model = to_device(CustomCNN(input_channels, output_classes), device)\ncustom_model","7dcab759":"for images, labels in train_dl_custom:\n    print('images.shape:', images.shape)\n    out = custom_model(images)\n    print('out.shape:', out.shape)\n    print('out[0]:', out[0])\n    break","a5737cd8":"history_CustomCNN = [evaluate(custom_model, valid_dl_custom)]\nhistory_CustomCNN","5ddae725":"%%time\nhistory_CustomCNN += fit_one_cycle(epochs, max_lr, custom_model, train_dl_custom, valid_dl_custom, \n                                  grad_clip=grad_clip, \n                                  weight_decay=weight_decay, \n                                  opt_func=opt_func)","04ff7de1":"resnet_model = to_device(ResNetCNN(), device)\nresnet_model","b1514047":"history_ResNetCNN = [evaluate(resnet_model, valid_dl_resnet)]\nhistory_ResNetCNN","f709e682":"resnet_model.freeze()","26f21e26":"%%time\nhistory_ResNetCNN += fit_one_cycle(5, 1e-2, resnet_model, train_dl_resnet, valid_dl_resnet, \n                                  grad_clip=grad_clip, \n                                  weight_decay=weight_decay, \n                                  opt_func=opt_func)","61c737fe":"resnet_model.unfreeze()","ba78f8da":"%%time\nhistory_ResNetCNN += fit_one_cycle(5, 1e-3, resnet_model, train_dl_resnet, valid_dl_resnet, \n                                  grad_clip=grad_clip, \n                                  weight_decay=weight_decay, \n                                  opt_func=opt_func)","e23590af":"def plot_accuracies(history, model_name):\n    accuracies = [x['val_acc'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title(model_name + ' - Accuracy vs. No. of epochs');\n\ndef plot_losses(history, model_name):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title(model_name + ' - Loss vs. No. of epochs');\n\ndef plot_lrs(history, model_name):\n    lrs = np.concatenate([x.get('lrs', []) for x in history])\n    plt.plot(lrs)\n    plt.xlabel('Batch no.')\n    plt.ylabel('Learning rate')\n    plt.title(model_name + ' - Learning Rate vs. Batch no.');","859dd525":"plot_accuracies(history_CustomCNN, 'Custom CNN Model')","f6376611":"plot_losses(history_CustomCNN, 'Custom CNN Model')","763a4a3e":"plot_lrs(history_CustomCNN, 'Custom CNN Model')","1d490db1":"plot_accuracies(history_ResNetCNN, 'ResNet CNN Model')","10756cf1":"plot_losses(history_ResNetCNN, 'ResNet CNN Model')","12dcc69c":"plot_lrs(history_ResNetCNN, 'ResNet CNN Model')","1aa49493":"def predict_image(img, model):\n    # Convert to a batch of 1\n    xb = to_device(img.unsqueeze(0), device)\n    # Get predictions from model\n    yb = model(xb)\n    # Pick index with highest probability\n    _, preds  = torch.max(yb, dim=1)\n    # Retrieve the class label\n    return valid_ds.classes[preds[0].item()]","bf371bf4":"img, label = valid_ds[2569]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', valid_ds.classes[label], ', Predicted:', predict_image(img, custom_model))","c43a1aac":"img, label = valid_ds[9856]\n\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', valid_ds.classes[label], ', Predicted:', predict_image(img, custom_model))","b5938a52":"img, label = valid_ds[2569]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', valid_ds.classes[label], ', Predicted:', predict_image(img, resnet_model))","4398abcd":"img, label = valid_ds[9856]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', valid_ds.classes[label], ', Predicted:', predict_image(img, resnet_model))","cdc6ab5f":"import urllib\nfrom PIL import Image\n\ntransform_test = tt.Compose([\n    tt.Resize((100, 100), Image.BILINEAR),\n    tt.CenterCrop((100, 100)),\n    # transforms.RandomHorizontalFlip(),  # only if train\n    tt.ToTensor(),\n#     tt.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)),\n])","0012af07":"url = 'http:\/\/s07.lmbang.com\/M00\/78\/04\/tzlM81UYy26AY6CaAAB7VN6o1XA400.jpg%21r750x600x100.jpg'\nimg = Image.open(urllib.request.urlopen(url))\n\nimg_tensor = transform_test(img)\nplt.imshow(img_tensor.permute(1, 2, 0))\nprint('Predicted:', predict_image(img_tensor[:3], custom_model))","b5d66ad6":"url = 'http:\/\/s07.lmbang.com\/M00\/78\/04\/tzlM81UYy26AY6CaAAB7VN6o1XA400.jpg%21r750x600x100.jpg'\nimg = Image.open(urllib.request.urlopen(url))\n\nimg_tensor = transform_test(img)\nplt.imshow(img_tensor.permute(1, 2, 0))\nprint('Predicted:', predict_image(img_tensor[:3], resnet_model))","0c2ac025":"torch.save(custom_model.state_dict(), 'fruits-360-custom.pth')\ntorch.save(resnet_model.state_dict(), 'fruits-360-resnet.pth')","47ecfefe":"project_name = 'Final Project - Deep Learning with PyTorch'\n!pip install jovian --upgrade --quiet\nimport jovian\njovian.commit(project=project_name,  \n              outputs=['.\/fruits-360-custom.pth', '.\/fruits-360-resnet.pth'],\n              environment=None)","435ef7b5":"# \u66f4\u6539\u4e0b\u9762\u7684url\u5730\u5740\uff0c\u53ef\u4ee5\u8bc6\u522b\u4f60\u60f3\u8981\u627e\u56fe\u7247","7af14964":"# \u7528\u6765\u8f93\u51fa\u56fe\u7247\u548c\u56fe\u7247\u540d\u5b57\u7684\u51fd\u6570","1e96b403":"# \u8f93\u51fa\u4e00\u4e2a\u6d4b\u8bd5\u96c6\u7684\u56fe\u7247\u6d4b\u8bd5\u4e00\u4e0b","da877f49":"# \u8f93\u51fa\u6570\u636e\u96c6\u91cc\u7684\u6570\u636e\uff0c\u5982\u679c\u6570\u636e\u96c6\u6ca1\u52a0\u8f7d\u6210\u529f\u4f1a\u51fa\u9519","f05b8a6f":"# \u8f93\u51fa\u6570\u636e\u96c6\u91cc\u5305\u542b\u7684\u6587\u4ef6\u540d","d003253d":"# \u8bbe\u7f6e\u7528GPU\u8fd8\u662fCPU\u8fdb\u884c\u8bad\u7ec3\uff0c\u5982\u679c\u7528CPU\u4f1a\u5f88\u6162","e2267ea2":"# \u8bbe\u7f6e\u4e00\u4e2a\u968f\u673a\u6570\uff0c\u7528\u4ee5\u8bad\u7ec3\u7684\u65f6\u5019\u968f\u673a\u627e\u4e00\u4e2a\u8bad\u7ec3\u56fe\u7247","668cadc3":"# \u5982\u679c\u5acc\u6162\u7684\u8bdd\uff0c\u628a\u8fd9\u4e2aepochs\u6539\u5c11\u4e00\u70b9\uff0c\u8bad\u7ec3\u4e00\u6b21\u53ef\u80fd\u898110\u5206\u949f\uff0c\u8bad\u7ec310\u6b21100\u5206\u949f\uff0c\u53ef\u662f\u8bad\u7ec3\u6b21\u6570\u5c11\u4e86\u51c6\u786e\u7387\u4f1a\u4e0b\u964d\n## \u4ec5\u4ec5\u5c55\u793a\u7528\u7684\u8bdd\uff0c\u6539\u62101\u6700\u597d\uff0c\u7ed3\u679c\u4e0d\u51c6\u786e\u7684\u8bdd\u8bf4\u660e\u662f\u56e0\u4e3a\u8bad\u7ec3\u5c11\u4e86","3c896474":"# \u8f93\u51fa\u4e00\u4e2a\u8bad\u7ec3\u96c6\u56fe\u7247\u6d4b\u8bd5\u4e00\u4e0b","29d13b61":"# \u521b\u5efa\u8fdb\u884c\u8bad\u7ec3\u7684tensor","97b23f01":"# \u5b9a\u4e49\u8bc4\u4f30\u548c\u8bad\u7ec3\u6a21\u578b","a6bec20f":"# \u6279\u91cf\u8f93\u51fa\u56fe\u7247","bc486b12":"# \u4f7f\u7528pytorch\u7684ImageFolder\u6765\u52a0\u8f7d\u8bad\u7ec3\u6570\u636e","e28f55c4":"# \u8bfb\u53d6\u8bad\u7ec3\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e","766e3ea0":"# \u5f15\u5165PYTORCH\u548cfruits 360\u6570\u636e\u96c6,\u5982\u679c\u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u6ca1\u6709\u52a0\u8f7d\u6570\u636e\u96c6\uff0c\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 + Add data \u627e\u5230fruits 360\uff0c\u70b9\u51fb\u52a0\u5165","795f1014":"# \u8bb0\u5f97\u6539\u4e0b\u9762\u8fd9\u4e2aproject_name","dace8594":"# \u8bbe\u7f6e\u597d\u73af\u5883\u53d8\u91cf\uff0c\u8bbe\u5b9a\u6570\u636e\u96c6\u7684\u4f4d\u7f6e"}}