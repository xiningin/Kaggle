{"cell_type":{"00011d7e":"code","be2c69f9":"code","d65f4f42":"code","ece960db":"code","ec476074":"code","4d6cd321":"code","c5678e2b":"code","33209bd8":"code","baebcd59":"code","c555eb3c":"code","ed6ae194":"code","dff2cae9":"code","68fc9dce":"code","dce3f50d":"code","1021e632":"code","dd743da7":"code","e0e3d781":"code","f46e4c84":"code","b2d0442e":"code","517f6d2c":"code","2f78fa77":"code","5e2e0839":"code","cca8b5d3":"code","5bf83d3d":"code","e5e02f84":"code","1f75a7b0":"code","7e2eea06":"code","a938be30":"code","c2e86fa9":"code","85705461":"code","61972ef9":"code","ef65edb7":"code","1928b6fd":"code","1b2a2bc0":"code","11e04a86":"code","e9d9c07b":"code","bb58007d":"code","e7d82d2c":"code","27b93f24":"code","cdc9ff7d":"code","6bda3f4b":"code","84e5b565":"code","ebea1971":"code","c550388d":"code","397ffa6e":"code","9720b49a":"code","ac85c1aa":"code","bc52b037":"code","c36f0908":"code","178b2d98":"code","1802df30":"code","ebfe5d8c":"code","503794e7":"code","02b86ff4":"code","ded00a88":"code","ef77cdb3":"code","239eb318":"code","6688963b":"code","56ece66e":"code","c0507d4d":"code","f35a904d":"code","b469d40a":"code","cabff546":"code","e0c9f992":"code","852b2548":"code","ca3adc2a":"code","3a9c35ae":"code","161fb120":"code","3c9a2aa6":"code","0c70537e":"code","a728038f":"code","a4a35c7d":"code","4464ab9f":"code","0e9821ba":"code","6b548b1a":"code","20788f1c":"code","535e54e4":"code","9c2c10b6":"code","4a3acd07":"code","4ec70b10":"code","e03dc3cb":"code","d7e4b243":"code","52c08e7a":"code","2fd8faa6":"code","80cf0f3b":"code","aad66325":"code","d25a0d4e":"code","3927b3df":"code","a035c537":"code","279a8ea3":"code","ff281863":"code","79ebfcd5":"code","bf37b32b":"code","7d19e48c":"code","02dbac99":"code","11be2313":"code","991f6e4b":"code","212c7c7a":"code","af0e157a":"code","1a3824bd":"code","e8ec709a":"code","1303358b":"code","6c7fe437":"code","3b6d675d":"code","322a44a3":"code","8f14cf21":"code","6b3e7569":"code","7fb252b4":"code","ad5e4f0e":"code","e1f928b9":"code","2eb84f58":"code","329e302a":"code","80b8827e":"code","98db69e2":"code","003c1a7f":"code","7c31db64":"code","e9d27ee3":"code","d157b613":"code","e6a90ac2":"code","416598ff":"code","6f565c49":"code","900b2904":"code","22d02e5b":"code","089e95d9":"code","6757e4ac":"code","63119e3b":"code","9746d583":"code","e12722a5":"code","517052cf":"code","a540e129":"code","39cc0505":"code","cef2afc6":"code","8aea240c":"code","481466bd":"code","1d8657af":"code","bb40a924":"code","d8093ca8":"code","cd800099":"code","40937fb3":"code","b0e7a4d1":"code","cb7a9607":"code","55aec74d":"code","dd7c4bc7":"code","d11706d1":"code","b76d71c6":"code","39fb58ae":"code","1292c64f":"code","682cc4a4":"code","6db61e4b":"code","d0abe760":"code","ee928a24":"code","fb31bb61":"code","23ba2429":"code","566aad72":"code","1410fa8e":"code","56964653":"code","f86d6eb3":"code","023402aa":"code","db8c341b":"code","fa3721cb":"code","62753c39":"code","d8a540e1":"code","f8869c20":"code","8026c11b":"code","6bd78732":"markdown","0024b966":"markdown","fa98825f":"markdown","b38b1e6e":"markdown","89f08a6f":"markdown","4b58172a":"markdown","bb68f82f":"markdown","07b8ffa4":"markdown","b610eabe":"markdown","968bd570":"markdown","78330108":"markdown","f78c0985":"markdown","ee1be640":"markdown","17aef630":"markdown","5112fbdd":"markdown","fd295dc9":"markdown","621b1cdf":"markdown","19857f19":"markdown","5514c615":"markdown","61a01dee":"markdown","e9e4d919":"markdown","27e01625":"markdown","8527ea43":"markdown","c8df764c":"markdown","03017123":"markdown","86f48936":"markdown","9906819b":"markdown","42a586cf":"markdown","aa429752":"markdown","73755634":"markdown","16fa380f":"markdown","189951fe":"markdown","266fb00b":"markdown","a7522468":"markdown","37c65b43":"markdown","2fd500ba":"markdown","9d55ab51":"markdown","55e65a9d":"markdown","73c14f48":"markdown","f1659e43":"markdown","1f8689f4":"markdown","2b5a7326":"markdown","c9ecf6c2":"markdown","da348627":"markdown","27e9d089":"markdown","c50bfa08":"markdown","b4d16ab9":"markdown","7ca43b8e":"markdown"},"source":{"00011d7e":"# *********************************************************************************************************************\n# * @Assignment: Machine Learning 1 : Lead Scoring Case study\n# *********************************************************************************************************************\n# *\n# * @author    : Poonam Yadav and Hitesh Yevale\n# * @version   : v0.1.1\n# * @StartDate : 09-Mar-2020\n# \n# *********************************************************************************************************************","be2c69f9":"# *********************************************************************************************************************\n# * Suppress Warnings\n# *********************************************************************************************************************\nimport warnings\nwarnings.filterwarnings('ignore')","d65f4f42":"# *********************************************************************************************************************\n# * Import Libraries \n# *********************************************************************************************************************\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime","ece960db":"# *********************************************************************************************************************\n# To Scale our data\nfrom sklearn.preprocessing import scale\nfrom sklearn.preprocessing import StandardScaler\n\n#Model building\nfrom sklearn.datasets import fetch_openml\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nimport statsmodels.api as sm\nfrom sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import precision_recall_curve\nfrom random import sample\nfrom numpy.random import uniform\nimport numpy as np\nfrom math import isnan\n\n\n#display setting\npd.set_option('display.max_rows', 100)\npd.set_option('display.max_columns', 200)\n\n \n# *********************************************************************************************************************","ec476074":"# *********************************************************************************************************************\n# * Loading Data frames\n# *********************************************************************************************************************\nLead_score= pd.read_csv(\"..\/input\/lead-scoring-x-online-education\/Leads X Education.csv\")\nLead_score_backup= Lead_score","4d6cd321":"# ********************************************************************************************************************* \n# * 1. Importing required libraries\n# * 2. Data Reading\n# * 3. Data understanding \n# * 4. Data cleansing \n# * 5. Data Preparation\n# * 6. Model building\n# * 7. Final observations","c5678e2b":"Lead_score.head()","33209bd8":"Lead_score.shape","baebcd59":"Lead_score.info()","c555eb3c":"Lead_score.describe()","ed6ae194":"# Checking for duplicate rows in the dataset\nLead_score.loc[Lead_score.duplicated()]","dff2cae9":"#Conclusion: no duplicates found","68fc9dce":"Lead_score = Lead_score.replace('Select', np.nan)","dce3f50d":"# % of null values\nround(100*(Lead_score.isnull().sum()\/len(Lead_score.index)), 2)\n","1021e632":"Lead_score = Lead_score.drop(Lead_score.loc[:,list(round(100*(Lead_score.isnull().sum()\/len(Lead_score.index)), 2)>70)].columns, 1)","dd743da7":"round(100*(Lead_score.isnull().sum()\/len(Lead_score.index)), 2)","e0e3d781":"Lead_score['Country'] = Lead_score['Country'].apply(lambda x: 'India' if x=='India' else 'Outside India')\nLead_score['Country'].value_counts()","f46e4c84":"Lead_score['Country'].isnull().sum()","b2d0442e":"Lead_score.loc[pd.isnull(Lead_score['Country']), ['Country']] = 'India'","517f6d2c":"Lead_score['Country'].isnull().sum()","2f78fa77":"Lead_score['Specialization'].value_counts()","5e2e0839":"# Lets check the number of null values in this column\nLead_score['Specialization'].isnull().sum()","cca8b5d3":"# Since the amount of null values is high , Lets compute the null values and replace them with text 'Unknown'\nLead_score['Specialization'].fillna(\"Unknown\", inplace = True)\nLead_score['Specialization'].value_counts()","5bf83d3d":"Lead_score['What is your current occupation'].isnull().sum()","e5e02f84":"Lead_score['What is your current occupation'].value_counts()","1f75a7b0":"Lead_score['What is your current occupation'].fillna(\"Unknown\", inplace = True)\nLead_score['What is your current occupation'].value_counts()","7e2eea06":"Lead_score['What matters most to you in choosing a course'].isnull().sum()","a938be30":"Lead_score['What matters most to you in choosing a course'].unique()","c2e86fa9":"# Since this column does not give away a lot of information and mostly are null or 'other' we can drop the column\nLead_score = Lead_score.drop('What matters most to you in choosing a course' , axis= 1)","85705461":"Lead_score['Tags'].value_counts()","61972ef9":"# This column does not add much value to the analysis , hence dropping it. \nLead_score = Lead_score.drop('Tags',axis =1)","ef65edb7":"Lead_score['Lead Quality'].unique()","1928b6fd":"sns.countplot(Lead_score['Lead Quality'])","1b2a2bc0":"# Here all the null values are as good as not sure.\n\nLead_score['Lead Quality'] = Lead_score['Lead Quality'].replace(np.nan, 'Not Sure')","11e04a86":"sns.countplot(Lead_score['Lead Quality'])\n    ","e9d9c07b":"Lead_score['City'].fillna(\"unknown\",inplace = True)\nLead_score['City'].value_counts()","bb58007d":"Lead_score = Lead_score.drop(['Asymmetrique Activity Score', 'Asymmetrique Profile Score'], axis=1)","e7d82d2c":"Lead_score['Asymmetrique Activity Index'].fillna(\"Unknown\", inplace = True)\nLead_score['Asymmetrique Activity Index'].value_counts()\nLead_score['Asymmetrique Profile Index'].fillna(\"Unknown\", inplace = True)\nLead_score['Asymmetrique Profile Index'].value_counts()","27b93f24":"print(Lead_score.columns)","cdc9ff7d":"print(Lead_score['Magazine'].value_counts())\nprint(Lead_score['Receive More Updates About Our Courses'].value_counts())\nprint(Lead_score['Update me on Supply Chain Content'].value_counts())\nprint(Lead_score['I agree to pay the amount through cheque'].value_counts())\n","6bda3f4b":"# Since the above columns have only 1 unique value they do not add any value to the data , let's drop them and all similar\n# columns from the data ","84e5b565":"Lead_score= Lead_score.loc[:,Lead_score.nunique()!=1]","ebea1971":"# Prospect ID gives out the same information as Lead Number , therefore we can drop it from  the dataset \nLead_score = Lead_score.drop('Prospect ID' , axis=1)","c550388d":"print(Lead_score.columns)","397ffa6e":"round(100*(Lead_score.isnull().sum()\/len(Lead_score.index)), 2)","9720b49a":"print(Lead_score['Do Not Email'].value_counts())\nprint(Lead_score['Do Not Call'].value_counts())\nprint(Lead_score['Search'].value_counts())\nprint(Lead_score['Through Recommendations'].value_counts())\nprint(Lead_score['A free copy of Mastering The Interview'].value_counts())\nprint(Lead_score['Newspaper Article'].value_counts())\nprint(Lead_score['X Education Forums'].value_counts())\nprint(Lead_score['Newspaper'].value_counts())\nprint(Lead_score['Digital Advertisement'].value_counts())","ac85c1aa":"# Since these columns do not give away any specific information we can drop these columns .\nLead_score = Lead_score.drop(columns =['Do Not Email' , 'Do Not Call' , 'Search' ,'Through Recommendations' ,'A free copy of Mastering The Interview','Newspaper Article', 'X Education Forums', 'Newspaper', \n            'Digital Advertisement'],axis=1)","bc52b037":"Lead_score.columns","c36f0908":"Lead_score.shape","178b2d98":"# Lets drop rows with null values\nLead_score= Lead_score.dropna()","1802df30":"round(100*(Lead_score.isnull().sum()\/len(Lead_score.index)), 2)","ebfe5d8c":"# Creating dummy variables for categorial variables\n\ncategorical_columns = ['Lead Origin' ,'Country','Lead Quality' ,'Lead Source','Last Activity' , 'Specialization' , 'What is your current occupation'\n                                       ,'City' ,'Last Notable Activity' ,'Asymmetrique Activity Index' , 'Asymmetrique Profile Index']\n\nfor x in categorical_columns:\n    cont = pd.get_dummies(Lead_score[x],prefix=x,drop_first=True)\n    Lead_score = pd.concat([Lead_score,cont],axis=1)\n","503794e7":"Lead_score.shape","02b86ff4":"print(Lead_score.columns)","ded00a88":"Lead_score.head(1)","ef77cdb3":"#dropping the original columns we created dummies for \nLead_score = Lead_score.drop(columns = ['Lead Origin' ,'Country','Lead Quality' ,'Lead Source','Last Activity' , 'Specialization' , 'What is your current occupation'\n                                       ,'City' ,'Last Notable Activity' ,'Asymmetrique Activity Index' , 'Asymmetrique Profile Index'] , axis =1)\n","239eb318":"Lead_score.shape","6688963b":"Lead_score.head()","56ece66e":"#checking for outliers \noutlier_check = Lead_score[['TotalVisits','Total Time Spent on Website','Page Views Per Visit']]\n","c0507d4d":"outlier_check.describe(percentiles=[.01,.1,.2,.25, .5, .75, .90, .95, .99])","f35a904d":"Q1 = Lead_score['Page Views Per Visit'].quantile(0.25)\nQ3 = Lead_score['Page Views Per Visit'].quantile(0.75)\nIQR = Q3 - Q1\nLead_score=Lead_score.loc[(Lead_score['Page Views Per Visit'] >= Q1 - 1.5*IQR) & (Lead_score['Page Views Per Visit'] <= Q3 + 1.5*IQR)]","b469d40a":"Q1 = Lead_score['TotalVisits'].quantile(0.25)\nQ3 = Lead_score['TotalVisits'].quantile(0.75)\nIQR = Q3 - Q1\nLead_score=Lead_score.loc[(Lead_score['TotalVisits'] >= Q1 - 1.5*IQR) & (Lead_score['TotalVisits'] <= Q3 + 1.5*IQR)]","cabff546":"Q1 = Lead_score['Total Time Spent on Website'].quantile(0.25)\nQ3 = Lead_score['Total Time Spent on Website'].quantile(0.75)\nIQR = Q3 - Q1\nLead_score=Lead_score.loc[(Lead_score['Total Time Spent on Website'] >= Q1 - 1.5*IQR) & (Lead_score['Total Time Spent on Website'] <= Q3 + 1.5*IQR)]","e0c9f992":"X = Lead_score.drop(['Lead Number','Converted'], axis=1)\n\nX.head()\n","852b2548":"y = Lead_score['Converted']\n\ny.head()","ca3adc2a":"# Splitting the data into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, test_size=0.3, random_state=100)","3a9c35ae":"#scaling continuous variables\nscaler = StandardScaler()\n\nX_train[['TotalVisits','Total Time Spent on Website','Page Views Per Visit']] = scaler.fit_transform(X_train[['TotalVisits','Total Time Spent on Website','Page Views Per Visit']])\n\nX_train.head()","161fb120":"converted = (sum(Lead_score['Converted'])\/len(Lead_score['Converted'].index))*100\nconverted","3c9a2aa6":"# Almost 37% conversion rate ","0c70537e":"#Logistic regression model\nlogistics = sm.GLM(y_train,(sm.add_constant(X_train)), family = sm.families.Binomial())\nlogistics.fit().summary()\n","a728038f":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()","a4a35c7d":"  # running RFE with 20 variables as output\nfrom sklearn.feature_selection import RFE\nrfe = RFE(logreg, 20)           \nrfe = rfe.fit(X_train, y_train)","4464ab9f":"rfe.support_","0e9821ba":"list(zip(X_train.columns, rfe.support_, rfe.ranking_))","6b548b1a":"X_train.columns[~rfe.support_]","20788f1c":"cols = X_train.columns[rfe.support_]","535e54e4":"X_train_sm = sm.add_constant(X_train[cols])\nlogm1 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm1.fit()\nres.summary()","9c2c10b6":"from statsmodels.stats.outliers_influence import variance_inflation_factor","4a3acd07":"vif = pd.DataFrame()\nvif['Features'] = X_train[cols].columns\nvif['VIF'] = [variance_inflation_factor(X_train[cols].values, i) for i in range(X_train[cols].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","4ec70b10":"plt.figure(figsize=(20,15), dpi=80, facecolor='w', edgecolor='k', frameon='True')\n\ncor = X_train[cols].corr()\nsns.heatmap(cor, annot=True, cmap=\"YlGnBu\")\n\nplt.tight_layout()\nplt.show()","e03dc3cb":"#lets drop the variables with high VIF","d7e4b243":"cols = cols.drop('Lead Quality_Not Sure' , 1)","52c08e7a":"X_train_sm = sm.add_constant(X_train[cols])\nlogm2 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm2.fit()\nres.summary()","2fd8faa6":"vif = pd.DataFrame()\nvif['Features'] = X_train[cols].columns\nvif['VIF'] = [variance_inflation_factor(X_train[cols].values, i) for i in range(X_train[cols].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","80cf0f3b":"cols = cols.drop('Lead Source_Olark Chat' , 1)","aad66325":"X_train_sm = sm.add_constant(X_train[cols])\nlogm3 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm3.fit()\nres.summary()","d25a0d4e":"vif = pd.DataFrame()\nvif['Features'] = X_train[cols].columns\nvif['VIF'] = [variance_inflation_factor(X_train[cols].values, i) for i in range(X_train[cols].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","3927b3df":"cols = cols.drop('Last Notable Activity_Modified' , 1)","a035c537":"X_train_sm = sm.add_constant(X_train[cols])\nlogm4 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm4.fit()\nres.summary()","279a8ea3":"vif = pd.DataFrame()\nvif['Features'] = X_train[cols].columns\nvif['VIF'] = [variance_inflation_factor(X_train[cols].values, i) for i in range(X_train[cols].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","ff281863":"cols = cols.drop('Lead Quality_Might be',1)","79ebfcd5":"X_train_sm = sm.add_constant(X_train[cols])\nlogm5 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm5.fit()\nres.summary()","bf37b32b":"vif = pd.DataFrame()\nvif['Features'] = X_train[cols].columns\nvif['VIF'] = [variance_inflation_factor(X_train[cols].values, i) for i in range(X_train[cols].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","7d19e48c":"plt.figure(figsize=(20,15), dpi=80, facecolor='w', edgecolor='k', frameon='True')\n\ncor = X_train[cols].corr()\nsns.heatmap(cor, annot=True, cmap=\"YlGnBu\")\n\nplt.tight_layout()\nplt.show()","02dbac99":"# This shows now we have very less multi-collinearity compared to earlier Heatmap","11be2313":"y_train_pred = res.predict(X_train_sm)\ny_train_pred[:10]","991f6e4b":"y_train_pred = y_train_pred.values.reshape(-1)\ny_train_pred[:10]","212c7c7a":"y_train_pred_final = pd.DataFrame({'Converted':y_train.values, 'Conversion_Prob':y_train_pred})\ny_train_pred_final['LeadID'] = y_train.index\ny_train_pred_final.head()","af0e157a":"y_train_pred_final['predicted'] = y_train_pred_final.Conversion_Prob.map(lambda x: 1 if x > 0.5 else 0)\n","1a3824bd":"y_train_pred_final.head()","e8ec709a":"# Confusion matrix \nconfusion = metrics.confusion_matrix(y_train_pred_final.Converted, y_train_pred_final.predicted )\nprint(confusion)\n","1303358b":"# Accuracy \nprint(metrics.accuracy_score(y_train_pred_final.Converted, y_train_pred_final.predicted))","6c7fe437":"TP = confusion[1,1] # true positive \nTN = confusion[0,0] # true negatives\nFP = confusion[0,1] # false positives\nFN = confusion[1,0] # false negatives","3b6d675d":"# Sensitivity\nTP \/ float(TP+FN)","322a44a3":"# Specificity\nTN \/ float(TN+FP)\n","8f14cf21":"# Calculate false postive rate - predicting churn when customer does not have churned\nprint(FP\/ float(TN+FP))\n\n# positive predictive value \nprint (TP \/ float(TP+FP))\n\n# Negative predictive value\nprint (TN \/ float(TN+ FN))","6b3e7569":"def plot_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return fpr,tpr, thresholds","7fb252b4":"fpr, tpr, thresholds = metrics.roc_curve( y_train_pred_final.Converted, y_train_pred_final.Conversion_Prob, drop_intermediate = False )","ad5e4f0e":"plot_roc(y_train_pred_final.Converted, y_train_pred_final.Conversion_Prob)","e1f928b9":"def roc_auc(fpr,tpr):\n    AreaUnderCurve = 0.\n    for i in range(len(fpr)-1):\n        AreaUnderCurve += (fpr[i+1]-fpr[i]) * (tpr[i+1]+tpr[i])\n    AreaUnderCurve *= 0.5\n    return AreaUnderCurve","2eb84f58":"auc = roc_auc(fpr,tpr)\nauc","329e302a":"# Let's try and create columns with different probability cutoffs and figure the optimal cutoff \nnumbers = [float(x)\/10 for x in range(10)]\nfor i in numbers: \n    y_train_pred_final[i]= y_train_pred_final.Conversion_Prob.map(lambda x: 1 if x > i else 0)\n\ny_train_pred_final.head()","80b8827e":"cutoff_df = pd.DataFrame( columns = ['prob','accuracy','sensi','speci'])\nfrom sklearn.metrics import confusion_matrix\n\n# TP = confusion[1,1] # true positive \n# TN = confusion[0,0] # true negatives\n# FP = confusion[0,1] # false positives\n# FN = confusion[1,0] # false negatives\n\nnum = [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]\nfor i in num:\n    cm1 = metrics.confusion_matrix(y_train_pred_final.Converted, y_train_pred_final[i] )\n    total1=sum(sum(cm1))\n    accuracy = (cm1[0,0]+cm1[1,1])\/total1\n    \n    speci = cm1[0,0]\/(cm1[0,0]+cm1[0,1])\n    sensi = cm1[1,1]\/(cm1[1,0]+cm1[1,1])\n    cutoff_df.loc[i] =[ i ,accuracy,sensi,speci]\nprint(cutoff_df)\n","98db69e2":"fig = plt.figure(figsize = (12,8))\ncutoff_df.plot.line(x='prob', y=['accuracy','sensi','speci'],figsize=(10,6))\nplt.xticks(np.arange(0, 1, step=0.05), size = 12)\nplt.show()\nfig.savefig('threshold.png')","003c1a7f":"y_train_pred_final['final_predicted'] = y_train_pred_final.Conversion_Prob.map( lambda x: 1 if x > 0.425 else 0)\n\ny_train_pred_final.head()","7c31db64":"# Accuracy\nmetrics.accuracy_score(y_train_pred_final.Converted, y_train_pred_final.final_predicted)","e9d27ee3":"confusion1 = metrics.confusion_matrix(y_train_pred_final.Converted, y_train_pred_final.final_predicted)\nconfusion1","d157b613":"TP = confusion1[1,1] # true positive \nTN = confusion1[0,0] # true negatives\nFP = confusion1[0,1] # false positives\nFN = confusion1[1,0] # false negatives","e6a90ac2":"# Sensitivity\nTP \/ float(TP+FN)","416598ff":"# Specificity\nTN \/ float(TN+FP)","6f565c49":"# Calculating false postive rate - predicting churn when customer does not have churned\nprint(FP\/ float(TN+FP))","900b2904":"# Positive predictive value \nprint (TP \/ float(TP+FP))\n","22d02e5b":"# Negative predictive value\nprint (TN \/ float(TN+ FN))","089e95d9":"precision = confusion1[1,1]\/(confusion1[0,1]+confusion1[1,1])\nprecision","6757e4ac":"recall = confusion1[1,1]\/(confusion1[1,0]+confusion1[1,1])\nrecall","63119e3b":"precision_score(y_train_pred_final.Converted, y_train_pred_final.final_predicted)","9746d583":"recall_score(y_train_pred_final.Converted, y_train_pred_final.final_predicted)","e12722a5":"y_train_pred_final.Converted, y_train_pred_final.final_predicted","517052cf":"p, r, thresholds = precision_recall_curve(y_train_pred_final.Converted, y_train_pred_final.Conversion_Prob)","a540e129":"plt.figure(figsize=(8, 4), dpi=100, facecolor='w', edgecolor='k', frameon='True')\nplt.plot(thresholds, p[:-1], \"g-\")\nplt.plot(thresholds, r[:-1], \"r-\")\nplt.xticks(np.arange(0, 1, step=0.05))\nplt.show()","39cc0505":"F1 = 2*(precision*recall)\/(precision+recall)\nF1","cef2afc6":"X_test[['TotalVisits','Total Time Spent on Website','Page Views Per Visit']] = scaler.transform(X_test[['TotalVisits','Total Time Spent on Website','Page Views Per Visit']])\nX_test.head()","8aea240c":"X_test = X_test[cols]\nX_test.head()","481466bd":"#Adding the constant \nX_test_sm = sm.add_constant(X_test)","1d8657af":"#making predictions on the test data set\ny_test_pred = res.predict(X_test_sm)","bb40a924":"y_test_pred[:10]","d8093ca8":"#converting into an array\ny_pred_1 = pd.DataFrame(y_test_pred)\ny_pred_1.head()","cd800099":"y_test_df = pd.DataFrame(y_test)","40937fb3":"y_test_df['LeadID'] = y_test_df.index","b0e7a4d1":"y_pred_1.reset_index(drop=True, inplace=True)\ny_test_df.reset_index(drop=True, inplace=True)","cb7a9607":"y_pred_final = pd.concat([y_test_df, y_pred_1],axis=1)\ny_pred_final.head()","55aec74d":"y_pred_final.shape","dd7c4bc7":"y_pred_final= y_pred_final.rename(columns={ 0 : 'Conversion_Prob'})","d11706d1":"y_pred_final = y_pred_final.reindex(['LeadID','Converted','Conversion_Prob'], axis=1)","b76d71c6":"y_pred_final.head()","39fb58ae":"y_pred_final['final_predicted'] = y_pred_final.Conversion_Prob.map(lambda x: 1 if x > 0.42 else 0)","1292c64f":"y_pred_final.head()","682cc4a4":"#check the overall accuracy.\naccuracy_score=metrics.accuracy_score(y_pred_final.Converted, y_pred_final.final_predicted)\naccuracy_score","6db61e4b":"confusion_test = metrics.confusion_matrix(y_pred_final.Converted, y_pred_final.final_predicted )\nprint(confusion_test)","d0abe760":"TP = confusion_test[1,1] # true positive \nTN = confusion_test[0,0] # true negatives\nFP = confusion_test[0,1] # false positives\nFN = confusion_test[1,0] # false negatives","ee928a24":"# sensitivity of our logistic regression model\nTP \/ float(TP+FN)\n# specificity\nTN \/ float(TN+FP)\n# Calculate false postive rate - predicting converion when customer does not have converted\nprint(FP\/ float(TN+FP))\n# Positive predictive value \nprint (TP \/ float(TP+FP))\n# Negative predictive value\nprint (TN \/ float(TN+ FN))\n","fb31bb61":"# Precision\nconfusion_test[1,1]\/(confusion_test[0,1]+confusion_test[1,1])","23ba2429":"# Recall\nconfusion_test[1,1]\/(confusion_test[1,0]+confusion_test[1,1])","566aad72":"y_pred_final.Converted, y_pred_final.final_predicted","1410fa8e":"p, r, thresholds = precision_recall_curve(y_pred_final.Converted, y_pred_final.Conversion_Prob)","56964653":"plt.plot(thresholds, p[:-1], \"g-\")\nplt.plot(thresholds, r[:-1], \"r-\")\nplt.show()","f86d6eb3":"fpr, tpr, thresholds = metrics.roc_curve( y_pred_final.Converted, y_pred_final.Conversion_Prob, drop_intermediate = False )","023402aa":"plot_roc(y_pred_final.Converted, y_pred_final.Conversion_Prob)","db8c341b":"y_test_pred = y_test_pred * 100\ny_test_pred[:10]","fa3721cb":"pd.options.display.float_format = '{:.2f}'.format\nnew_params = res.params[1:]\nnew_params","62753c39":"# Getting a relative coeffient value for all the features wrt the feature with the highest coefficient\nfeature_importance = new_params\nfeature_importance = 100.0 * (feature_importance \/ feature_importance.max())\nfeature_importance","d8a540e1":"# Sorting the feature variables based on their relative coefficient values\nsorted_idx = np.argsort(feature_importance,kind='quicksort',order='list of str')\nsorted_idx","f8869c20":"# Plot showing the feature variables based on their relative coefficient values\n# Plotting the scree plot\n%matplotlib inline\nfig = plt.figure(figsize = (12,8))\npos = np.arange(sorted_idx.shape[0]) + .5\n\nfeatfig = plt.figure(figsize=(10,6))\nfeatax = featfig.add_subplot(1, 1, 1)\nfeatax.barh(pos, feature_importance[sorted_idx], align='center', color = 'tab:green',alpha=0.8)\nfeatax.set_yticks(pos)\nfeatax.set_yticklabels(np.array(X_train[cols].columns)[sorted_idx], fontsize=12)\nfeatax.set_xlabel('Relative Feature Importance', fontsize=14)\n\nplt.tight_layout()   \nplt.show()\nfig.savefig('Question1.png')\n","8026c11b":"# selecting top 4 features\npd.DataFrame(feature_importance).reset_index().sort_values(by=0,ascending=False).head(4)","6bd78732":"***7. City***","0024b966":"Replacing 'select' with a null value . The customer did not make a selection here from the given options therefore this value\nis as good as null value ","fa98825f":"Lets replace the null values in Asymmetrique Activity Index and Asymmetrique Profile Index with 'Unknown'","b38b1e6e":"Assessing with statsModels","89f08a6f":"- An index and score assigned to each customer based on their activity and their profile.                                    \n- We can get rid of Asymmetrique Activity Score and Asymmetrique Profile Score as we can look at the index columns for the corresponding information","4b58172a":"***Checking the % of null values after all the computations***","bb68f82f":"Recall = TP \/ TP + FN","07b8ffa4":"### Calculating Accuracy, Sensitivity and Specificity for various probability cutoffs","b610eabe":"Feature selection using RFE","968bd570":"### Plotting Accuracy, Sensitivity and Specificity for various probability cutoffs","78330108":"### 3. Data Understanding","f78c0985":"Using SKlearn","ee1be640":"### Precision and Recall","17aef630":"Lead quality column has 5 unique values except null values, lets check what are those and how usefull are they for further analysis.","5112fbdd":"An AUC can be classified as follows,\n\n0.90 - 1.00 = excellent                                                                                   \n0.80 - 0.90 = good                                                                   \n0.70 - 0.80 = fair                                                                                    \n0.60 - 0.70 = poor                                                                                            \n0.50 - 0.60 = fail                                                                                                   \nSince we got a value of 0.89, our model seems to be doing **GOOD** on the test dataset.\n","fd295dc9":"Optimal cutoff probability is that prob where we get balanced sensitivity and specificity","621b1cdf":"### Steps\/Approach","19857f19":"We will not look at rest of the columns and see which ones will add value to our analysis and which ones can be dropped from the data set.","5514c615":"### Optimal threshold value comes to 0.42 (which is similar to the previous observation)","61a01dee":"Creating new column 'predicted' with 1 if Conversion_Prob > 0.5 else 0","e9e4d919":"### 4. Data Cleansing","27e01625":"We can see that there not a lot of multicollinearity present in our model , lets plot a heat map and check the correlation matrix","8527ea43":"### Selecting the coefficients of the selected features from our final model excluding the intercept","c8df764c":"### Plotting ROC Curve                                                                                                       \nAn ROC curve demonstrates several things:                                                                                      \n\u2022 It shows the tradeoff between sensitivity and specificity (any increase in sensitivity will be accompanied by a decrease in specificity).                                                                                                          \n\u2022 The closer the curve follows the left-hand border and then the top border of the ROC space, the more accurate the test.       \n\u2022 The closer the curve comes to the 45-degree diagonal of the ROC space, the less accurate the test.","03017123":"### 1. Importing Libraries","86f48936":"Lead Quality - Indicates the quality of lead based on the data and intuition of the employee who has been assigned to the lead.","9906819b":"### Predictions on Test data","42a586cf":"We will compute the null values in city column by replacing them with 'Unknown\" because we do not want to loose any data computing it any other way","aa429752":"***6. Lead Quality***","73755634":"Computing the % of null values in each column","16fa380f":"### 2. Data Reading","189951fe":"***4. What matters most to you in choosing a course***","266fb00b":"***2. Specialization***","a7522468":"**Lets look at the following columns with Null Values >20%**\n\nCountry                                         \nSpecialization                                   \nWhat is your current occupation                  \nWhat matters most to you in choosing a course    \nTags                                             \nLead Quality                                    \nCity                                             \nAsymmetrique Activity Index                     \nAsymmetrique Profile Index                      \nAsymmetrique Activity Score                     \nAsymmetrique Profile Score                      ","37c65b43":"***8.Asymmetrique Activity Index***                                                                       \n***9.Asymmetrique Profile Index***                                                                          \n***10.Asymmetrique Activity Score***                                                                             \n***11.Asymmetrique Profile Score***","2fd500ba":"Transfering data to test dataset using scaler function ","9d55ab51":"**Treating NULL Values**\n- Delete columns with Null Values more than 70%\n- Deal with columns with Null Values between 20-40% manually\n- Drop the other columns based on further analysis ","55e65a9d":"Finding optimal cutoff","73c14f48":"### Precision and Recall Tradeoff","f1659e43":"***1. Country :***                                                                                                                   \nAs most of the leads are from India , Computing values in Country column to simplify the data by dividing the data into India and outside India; and replacing the null values with 'India'","1f8689f4":"### Calculate area under the curve","2b5a7326":"**Calculate F1 force**","c9ecf6c2":"**0.425** looks like an optimum cutoff point from the above plot.\n","da348627":"***3. What is your current occupation***","27e9d089":"***5.Tags***                                                                                                       \nTags assigned to customers indicating the current status of the lead.","c50bfa08":"Precision = TP \/ TP + FP","b4d16ab9":"### 6. Model Building","7ca43b8e":"#### *Test-Train split*"}}