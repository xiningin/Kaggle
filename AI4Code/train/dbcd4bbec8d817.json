{"cell_type":{"e66e32c8":"code","471aceaa":"code","55d1b43a":"code","85336ccf":"code","b4cb2216":"code","8ec4937c":"code","ee4fcb4f":"code","0d61bb02":"code","2de23b94":"code","7aa0ab98":"code","e2bf1b57":"code","240ca939":"code","3fcdafe6":"code","821db89b":"code","4c5ae301":"code","718be2a0":"code","d24c4771":"code","84452798":"code","c5e5df40":"code","33e18f42":"code","3ff54b4c":"code","d33cb86f":"code","c8abc344":"code","d7925f17":"code","9440c185":"code","5a9588aa":"code","ecdbbe62":"code","ddfcf3f9":"code","7e51b5e4":"code","acad0ea3":"code","ebff46b2":"code","bf7828a6":"code","3705cf1b":"code","eeccaa35":"code","9896cd6f":"code","05afc027":"code","63eb49d9":"code","e0fe3d29":"code","3fc619c6":"code","9fcf8371":"code","1ec820f5":"code","a3d11136":"code","b8e401f6":"code","fb84c6e1":"code","cd865c27":"code","590cca50":"code","a302a777":"code","605225e1":"code","40825d3c":"markdown","ad0dd9de":"markdown","111f66a8":"markdown","c3ab4d7a":"markdown","e7769114":"markdown","413ee207":"markdown","6c4b999f":"markdown","d2bb8034":"markdown","534192d2":"markdown","ff5e3fcf":"markdown","34ddf9d5":"markdown","56a55ae6":"markdown","97a70844":"markdown","599ef209":"markdown","06c80f52":"markdown","b084b93d":"markdown","e12deb74":"markdown","aa1531e2":"markdown","19b478b8":"markdown","a5455c65":"markdown","90a49610":"markdown","78d37f41":"markdown","7dcd47c0":"markdown","61f2ef5e":"markdown","edc304c0":"markdown","d5b4dca8":"markdown","4f7b21f3":"markdown","256d2dbd":"markdown","29b6d834":"markdown","3e93fdf2":"markdown","4d7d9ac3":"markdown","9be323b7":"markdown","921d9a2b":"markdown","314edadc":"markdown","d4fec310":"markdown","2396e36a":"markdown","2ccd7386":"markdown","1055f8fe":"markdown","4d3eb826":"markdown","2ae36e36":"markdown","292cba53":"markdown","ab285c22":"markdown","f2c19426":"markdown","efe5f2f3":"markdown","2e238fc8":"markdown","b0c66697":"markdown"},"source":{"e66e32c8":"import re\nimport sys\nimport numpy as np\nimport pandas as pd\nimport pandas.api.types as at\nfrom tqdm import tqdm\nfrom datetime import timedelta, datetime, date\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True) \n\nimport xgboost as xgb\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom tqdm.notebook import tqdm\nfrom catboost import CatBoostRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.ensemble import StackingRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.preprocessing import LabelEncoder\n\nimport myfunction as mf\n\nprint('Python       :', sys.version.split('\\n')[0])\nprint('Numpy        :', np.__version__)\n\n# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt\n\n# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 123\n\ndef mape(y_true, y_pred):\n    return np.mean(np.abs((y_pred-y_true)\/y_true))","471aceaa":"VERSION    = 9\nDIR_TRAIN  = '..\/input\/autoru\/' # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b \u043a \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\nDIR_TEST   = '..\/input\/sf-dst-car-price-prediction\/'\nVAL_SIZE   = 0.20   # 20%","55d1b43a":"!ls '..\/input'\n\ntrain = pd.read_csv(DIR_TRAIN+'all_auto_ru_2021-01-08.csv') # \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\ntest = pd.read_csv(DIR_TEST+'test.csv')\nsample_submission = pd.read_csv(DIR_TEST+'sample_submission.csv')\n\npd.set_option('display.max_columns', None)\ndisplay(train.head(2))\ndisplay(test.head(2))","85336ccf":"# \u0412\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043e\u043a\u0438 - sample\ntrain['sample'] = 1\ntest['sample'] = 0\n\n# \u041e\u0441\u0442\u0430\u0432\u0438\u043c \u0432 train \u0442\u043e\u043b\u044c\u043a\u043e \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u0443\u0434\u0430\u043b\u0438\u043c \u0441\u043a\u0440\u044b\u0442\u044b\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f)\ndf_train = train[train['hidden'] == False]\ndf_test = test","b4cb2216":"#  \u0443 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043d\u0430\u0439\u0434\u0435\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0434\u0430\u0442\u0430-\u0441\u0435\u0442\u043e\u0432. \u041d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043b \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0432\u043e\u0441\u043f\u0440\u0438\u044f\u0442\u0438\u044f\ndef check_df_before_merg(d_df1,d_df2):\n    \n    list_of_names1 = list(d_df1.columns)\n    temp_dict = {}\n    temp_dict['feature_train'] = list_of_names1\n    temp_dict['type_train'] = d_df1.dtypes\n    temp_dict['sample_train'] = d_df1.loc[5].values\n    temp_dict['# unique_train'] = d_df1.nunique().values\n    temp_df1 = pd.DataFrame.from_dict(temp_dict)\n    \n    \n    list_of_names2 = list(d_df2.columns)\n    temp_dict2 = {}\n    temp_dict2['feature_test'] = list_of_names2\n    temp_dict2['type_test'] = d_df2.dtypes\n    temp_dict2['sample_test'] = d_df2.loc[5].values\n    temp_dict2['# unique_test'] = d_df2.nunique().values\n    temp_df2 = pd.DataFrame.from_dict(temp_dict2)\n    \n    temp_insert = pd.DataFrame(columns=['< - >'])\n    \n    temp_df = pd.concat([temp_df1,temp_insert, temp_df2], axis=1, sort=False)\n    temp_df.reset_index(inplace = True)\n    del temp_df['index']\n    temp_df['< - >'] = '| - |'\n    display(temp_df)\n\n    temp_dict3 = {}\n    temp_df3= pd.DataFrame(temp_df)\n    temp_list  = []\n    temp_list2  = []\n    temp_list3  = []\n    temp_list4  = []\n    temp_list5  = []\n\n    for i in range(len(temp_df)):\n        if str(temp_df3['type_train'][i]) != str(temp_df3['type_test'][i]):\n            temp_list.append(temp_df3['feature_train'][i])\n            temp_list2.append(temp_df3['feature_test'][i])\n            temp_list3.append(str(temp_df3['type_train'][i]) + ' != ' + str(temp_df3['type_test'][i]))\n            temp_list4.append(i)\n        if temp_df3['# unique_test'][i]>0 and temp_df3['# unique_train'][i]\/temp_df3['# unique_test'][i] > 2:\n            temp_list5.append(i)\n            \n    temp_dict3['index']= temp_list4\n    temp_dict3['feature_train']= temp_list\n    temp_dict3['\u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442 \u0442\u0438\u043f\u044b'] = temp_list3\n    temp_dict3['feature_test']= temp_list2\n\n    temp_df4 = pd.DataFrame.from_dict(temp_dict3)\n    temp_df4.set_index('index',inplace=True)\n\n    print(f'\u0420\u0435\u0437\u044e\u043c\u0435:\\n 1. \u041d\u0435 \u0441\u043e\u0432\u043f\u0430\u043b\u0438 \u0442\u0438\u043f\u044b \u0432:= {len(temp_df4)} \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445\\n')\n    print(f'2. \u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u0432:= {len(temp_list5)} \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 {temp_list5}')\n    display(temp_df4)\n\n# \u041f\u043e\u0441\u043b\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u0432 \u0432\u044b\u044f\u0432\u0438\u043b\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u043d\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u0435\n# \u042d\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u043f\u0430\u0440\u044b \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\u0445, \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \n# \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043a\u043e\u043d\u0441\u043e\u043b\u0438\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u0443\u0436\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043d\u0443\u044e \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445\n\ndrop_cols = ['car_url', 'sell_id', 'image', 'hidden', 'parsing_unixtime', '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435']\n\nfor col in drop_cols:\n    if col in list(df_train.columns):\n        df_train.drop(columns=[col], inplace=True)\n    if col in list(df_test.columns):\n        df_test.drop(columns=[col], inplace=True)\n    \ncheck_df_before_merg(df_train, df_test)","8ec4937c":"df_test['body_type'] = [str(x).lower().replace('.', '') for x in df_test['bodyType']]\ndf_train['body_type'] = [str(x).lower() for x in df_train['bodyType']]\n\n# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0434\u043b\u0438\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0432 train'\u0435 \u043d\u0430 \u043e\u0431\u043e\u0431\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\nbody_type_list = list(df_test['body_type'].unique())\ndef get_perf_type(x, body_type_list):\n    for t in body_type_list:\n        if t in x:\n            return t\n        else: continue\n    else: return '0'\n    \ndf_train['body_type'] = df_train['body_type'].apply(lambda x: get_perf_type(x, body_type_list))\n\n# \u0423\u0434\u0430\u043b\u0438\u043c 7 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u043d\u0430\u0448\u043b\u043e\u0441\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u0442\u0438\u043f\u0430 \u043a\u0443\u0437\u043e\u0432\u0430\ndf_train = df_train[df_train['body_type']!='0']\ndf_train.drop(columns=['bodyType'], inplace=True)\ndf_test.drop(columns=['bodyType'], inplace=True)","ee4fcb4f":"dict_color = {'040001':'\u0447\u0451\u0440\u043d\u044b\u0439', 'EE1D19':'\u043a\u0440\u0430\u0441\u043d\u044b\u0439', '0000CC':'\u0441\u0438\u043d\u0438\u0439', \n              'CACECB':'\u0441\u0435\u0440\u0435\u0431\u0440\u0438\u0441\u0442\u044b\u0439', '007F00':'\u0437\u0435\u043b\u0451\u043d\u044b\u0439', 'FAFBFB':'\u0431\u0435\u043b\u044b\u0439', \n              '97948F':'\u0441\u0435\u0440\u044b\u0439', '22A0F8':'\u0433\u043e\u043b\u0443\u0431\u043e\u0439', '660099':'\u043f\u0443\u0440\u043f\u0443\u0440\u043d\u044b\u0439', \n              '200204':'\u043a\u043e\u0440\u0438\u0447\u043d\u0435\u0432\u044b\u0439', 'C49648':'\u0431\u0435\u0436\u0435\u0432\u044b\u0439', 'DEA522':'\u0437\u043e\u043b\u043e\u0442\u0438\u0441\u0442\u044b\u0439', \n              '4A2197':'\u0444\u0438\u043e\u043b\u0435\u0442\u043e\u0432\u044b\u0439', 'FFD600':'\u0436\u0451\u043b\u0442\u044b\u0439', 'FF8649':'\u043e\u0440\u0430\u043d\u0436\u0435\u0432\u044b\u0439', \n              'FFC0CB':'\u0440\u043e\u0437\u043e\u0432\u044b\u0439'}\ndf_train['color'] = df_train['color'].map(dict_color)\n","0d61bb02":"df_test['engineDisplacement'] = df_test['engineDisplacement'].apply(lambda x: str(x).replace('LTR', ''))","2de23b94":"pattern = re.compile('^(\\d+)\\.*')\ndf_test['enginePower'] = df_test['enginePower'].apply(lambda x: int(str(pattern.findall(x))[2:-2]))\ndf_train['enginePower'] = df_train['enginePower'].astype('int')","7aa0ab98":"df_train['modelDate'] = df_train['modelDate'].fillna(0).astype('int')","e2bf1b57":"df_train['numberOfDoors'] = df_train['numberOfDoors'].fillna(0).astype('int')","240ca939":"df_train['priceCurrency'] = df_train['priceCurrency'].map({'RUR':'RUB'})","3fcdafe6":"df_train['vehicleTransmission'] = df_train['vehicleTransmission'].map({'AUTOMATIC':'\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f', 'MECHANICAL':'\u043c\u0435\u0445\u0430\u043d\u0438\u0447\u0435\u0441\u043a\u0430\u044f',\n                                                                 'ROBOT':'\u0440\u043e\u0431\u043e\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f', 'VARIATOR':'\u0432\u0430\u0440\u0438\u0430\u0442\u043e\u0440'})","821db89b":"df_train['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = df_train['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].map({4.0:'3 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435', 3.0:'3 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435', 2.0:'2\\xa0\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430', 1.0:'1\\xa0\u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446'})","4c5ae301":"def calc_delta_ouned(x):\n    if x['year'] > 0:\n        now = datetime.now()\n        return (now.year - x['year'])*12 - x['month'] + now.month\n    else: return 0\n\ndf_temp = pd.DataFrame(df_train['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'])\npattern = re.compile('\\d{4}')\ndf_temp['year'] = df_temp['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'].apply(lambda x:str(pattern.findall(str(x)))[2:-2])\npattern = re.compile('(\\d{1,2})\\}$')\ndf_temp['month'] = df_temp['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'].apply(lambda x:str(pattern.findall(str(x)))[2:-2])\ndf_temp['year'] = df_temp['year'].map(lambda x: int(x) if len(x)==4 else 0)\ndf_temp['month'] = df_temp['month'].map(lambda x: int(x) if len(x)>0 else 0)\ndf_temp['delta_own'] = df_temp.apply(lambda x: calc_delta_ouned(x), axis=1)\ndf_train['ownership'] = df_temp['delta_own']\n\ndf_temp = pd.DataFrame(df_test['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'])\npattern = re.compile('^\\d{1,2}')\ndf_temp['year'] = df_temp['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'].apply(lambda x:str(pattern.findall(str(x)))[2:-2])\npattern = re.compile('\u0438\\s(\\d{1,2})\\s\u043c')\ndf_temp['month'] = df_temp['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'].apply(lambda x:str(pattern.findall(str(x)))[2:-2])\ndf_temp['year'] = df_temp['year'].map(lambda x: int(x) if len(x)>0 else 0)\ndf_temp['month'] = df_temp['month'].map(lambda x: int(x) if len(x)>0 else 0)\ndf_temp['delta_own'] = df_temp.apply(lambda x: x['year']*12 + x['month'], axis=1)\ndf_test['ownership'] = df_temp['delta_own']\n\n","718be2a0":"df_train['\u041f\u0422\u0421'] = df_train['\u041f\u0422\u0421'].map({'ORIGINAL':'\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b', 'DUPLICATE':'\u0414\u0443\u0431\u043b\u0438\u043a\u0430\u0442'})","d24c4771":"df_train['\u0420\u0443\u043b\u044c'] = df_train['\u0420\u0443\u043b\u044c'].map({'RIGHT':'\u041f\u0440\u0430\u0432\u044b\u0439', 'LEFT':'\u041b\u0435\u0432\u044b\u0439'})","84452798":"df_train['\u0422\u0430\u043c\u043e\u0436\u043d\u044f'] = df_train['\u0422\u0430\u043c\u043e\u0436\u043d\u044f'].map({True: '\u0420\u0430\u0441\u0442\u0430\u043c\u043e\u0436\u0435\u043d', False:'\u041d\u0435 \u0440\u0430\u0441\u0442\u0430\u043c\u043e\u0436\u0435\u043d'})","c5e5df40":"df_train.dropna(subset=['productionDate','mileage'], inplace=True)\ndf_train.dropna(subset=['price'], inplace=True)","33e18f42":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0432\u0435\u043b\u043e \u043a \u0441\u043d\u0438\u0436\u0435\u043d\u0438\u044e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043d\u0430 0.03\n\n#target_brand = df_test['brand'].unique().tolist()\n#df_train['brand'] = df_train['brand'].map(lambda x: x if x in target_brand else 'OTHER')","3ff54b4c":"check_df_before_merg(df_train, df_test)\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) \nmf.brief_summary(data, [100,75,75,75,75,75,150])","d33cb86f":"pattern = re.compile('(\\d{1}\\.\\d{1})')\ndata['engine'] = data['name'].apply(lambda x:str(pattern.findall(str(x)))[2:5])\ndata['engine'] = pd.to_numeric(data['engine'], errors='coerce')\ndata['hybrid'] = data['name'].apply(lambda x: 1 if 'hyb' in x else 0)\n","c8abc344":"data['description'] = data['description'].map(lambda x: str(x).lower())\n\ndata['owner'] = data['description'].apply(lambda x: 1 if '\u0442\u043e\u0440\u0433' in x or '\u043d\u0435 \u043d\u0443\u0436\u0434\u0430\u044e\u0441\u044c' in x or len(x)<200 else 0)\ndata['showroom'] = data['description'].apply(lambda x: 1 if 'traid-in' in x or '\u0434\u0438\u043b\u0435\u0440' in x or '\u0432 \u043a\u0440\u0435\u0434\u0438\u0442' in x or '\u043a\u043b\u0438\u0435\u043d\u0442' in x\n                                             or '\u0431\u0435\u0437 \u043a\u043e\u043c\u0438\u0441' in x or '\u0441\u0442\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0438' in x or '\u0442\u0440\u0435\u0439\u0434-\u0438\u043d' in x \n                                             or '\u0432 \u043d\u0430\u043b\u0438\u0447\u0438\u0438' in x or '\u0432\u044b\u0433\u043e\u0434\u043d\u043e\u0435 \u043f\u0440' in x or '\u0430\u0432\u0442\u043e\u043a\u0440\u0435\u0434\u0438\u0442' in x else 0)\ndisplay(data['owner'].value_counts())\ndisplay(data['showroom'].value_counts())","d7925f17":"share = np.around(data['ownership'].value_counts()[0]\/len(data)*100, 1)\nprint(f'\u0414\u043e\u043b\u044f \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f - {share}%')\n# \u041f\u043e\u043a\u0430 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u043d\u0438\u0447\u0435\u0433\u043e \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0432 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0438 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","9440c185":"drop_cols = ['complectation_dict', 'description', 'equipment_dict', 'engineDisplacement'\n             ,'model_info', 'super_gen', 'vehicleConfiguration', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435', 'name'\n             ,'priceCurrency', '\u0422\u0430\u043c\u043e\u0436\u043d\u044f']\ndata.drop(columns=drop_cols, inplace=True)","5a9588aa":"# \u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u043d\u043e\u0432\u044b\u0439. \u041f\u043e\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c 0\ndata['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].fillna('\u041d\u043e\u0432\u044b\u0439', inplace=True)\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u041f\u0422\u0421 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c '\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b'\ndata['\u041f\u0422\u0421'].fillna('\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b', inplace=True)\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0440\u0430\u0431\u043e\u0447\u0435\u043c \u043e\u0431\u044a\u0435\u043c\u0435 \u0414\u0412\u0421 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u043b\u0435\u044c\u043d\u043e \u0443 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u041f\u043e\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c 0\ndata['engine'].fillna(0, inplace=True)\nmf.brief_summary(data, [100,75,75,75,75,75,150])","ecdbbe62":"def sort_features(df_raw, target_cols, time_cols, num_cols, bin_cols, cat_cols, count_col):\n    for col in df_raw.columns:\n        if col in target_cols or col in time_cols or col in num_cols\\\n            or col in bin_cols or col in cat_cols or col in count_col:\n            continue\n        elif len(df_raw[col].value_counts()) == 1:\n                df_raw.drop(columns=[col], inplace=True)\n        elif at.is_datetime64_any_dtype(df_raw[col]):\n            time_cols.append(col)\n        elif at.is_numeric_dtype(df_raw[col]):\n            if len(df_raw[col].value_counts()) == 2:\n                bin_cols.append(col)\n            else: num_cols.append(col)\n        elif at.is_string_dtype(df_raw[col]):\n            cat_cols.append(col)\n        else: print(f'\u0421\u0442\u043e\u043b\u0431\u0435\u0446 {col} \u043d\u0435 \u0431\u044b\u043b \u043f\u0440\u0438\u0447\u0438\u0441\u043b\u0435\u043d \u043d\u0438 \u043a \u043e\u0434\u043d\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\\n'+'_'*50)\n\n    print_cols_lists(df_raw, target_cols, time_cols, num_cols, bin_cols, cat_cols, count_col)\n\n    return target_cols, time_cols, num_cols, bin_cols, cat_cols, count_col\n\ndef print_cols_lists(df, target_cols, time_cols, num_cols, bin_cols, cat_cols, count_col):\n    print('\\n\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438: ', target_cols)    \n    print('\\n\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u0430\u0442\u044b \u0438\u043b\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438: ', time_cols)    \n    print('\\n\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438: ', cat_cols)    \n    print('\\n\u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438: ', bin_cols)    \n    print('\\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438: ', num_cols)    \n    print('\\n\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438-\u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0438: ', count_col)    \n\n    print('\\n\u0412 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435: \u0441\u0442\u0440\u043e\u043a - ', len(df), '\u043a\u043e\u043b\u043e\u043d\u043e\u043a - ', len(df.columns))\n\n\ntarget_cols = ['price']\nnum_cols, bin_cols, cat_cols, time_cols, count_col = [], [], [], [], []\n\ntarget_cols,time_cols,num_cols,bin_cols,cat_cols,count_col = sort_features(data\n                                                                           ,target_cols,time_cols\n                                                                           ,num_cols,bin_cols\n                                                                           ,cat_cols,count_col)","ddfcf3f9":"for col in cat_cols:\n    df_temp = mf.get_label_encoder(data, col, False)\nmf.view_important_sign(df_temp, num_cols, bin_cols, cat_cols, 'price')","7e51b5e4":"data = mf.normalisation(data, MinMaxScaler(), target_cols + cat_cols)\ndisplay(data.head(1))","acad0ea3":"for colum in cat_cols:\n    data[colum] = data[colum].astype('category').cat.codes\ndisplay(data.head(1))","ebff46b2":"# \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439. \u0420\u043e\u0441\u0442 MAPE \u043f\u0440\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0430 1%\n\n#pf = PolynomialFeatures(2)\n#poly_df = pf.fit_transform(data[num_cols])\n#poly_df = pd.DataFrame(poly_df)\n#poly_df = poly_df.drop(0, axis=1)\n#data = pd.concat([data, poly_df],axis=1)\n#data","bf7828a6":"pd.set_option('display.max_columns', None)\ndisplay(data.sample(3).head(1))\ndisplay(data.describe())","3705cf1b":"X = data.query('sample == 1').drop(['sample', 'price'], axis=1)\ny = data.query('sample == 1')['price'] \nX_sub = data.query('sample == 0').drop(['sample', 'price'], axis=1)","eeccaa35":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=VAL_SIZE, shuffle=True, random_state=RANDOM_SEED)","9896cd6f":"def print_learn_report(start, y_test, y_pred):\n    print('\\n\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f - ', datetime.now() - start)\n    print(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE:{(mape(y_test, y_pred))*100:0.2f}%\")","05afc027":"tmp_train = X_train.copy()\ntmp_train['price'] = y_train","63eb49d9":"# \u041d\u0430\u0445\u043e\u0434\u0438\u043c median \u043f\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\u043c engineDisplacement \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u0438 \u0440\u0430\u0437\u043c\u0435\u0447\u0430\u0435\u043c \u0442\u0435\u0441\u0442\npredict = X_test['engine'].map(tmp_train.groupby('engine')['price'].median())\n\n#\u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0438\u0432\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict.values))*100:0.2f}%\")","e0fe3d29":"start = datetime.now()\n\nmodel = CatBoostRegressor(iterations = 50,\n                          cat_features=cat_cols,\n                          random_seed = RANDOM_SEED,\n                          eval_metric='MAPE',\n                          custom_metric=['R2', 'MAE'],\n                          silent=True,\n                         )\nmodel.fit(X_train, y_train,\n         eval_set=(X_test, y_test),\n         use_best_model=True,\n         verbose=False,\n         plot=True\n         )\n\nmodel.save_model('catboost_model.model')\n\npredict = model.predict(X_test)\nprint_learn_report(start, y_test, predict)","3fc619c6":"start = datetime.now()\n\n\n\nmodel = CatBoostRegressor(cat_features=cat_cols, iterations=50\n                          ,loss_function='MAPE', metric_period=10)\n\ngrid = {'learning_rate': [ 0.13, 0.14, 0.15]\n        ,'depth': [12]\n        ,'l2_leaf_reg': [7, 7.5, 8]\n        ,'random_strength': [0.3]}\n\n#grid_search_result = model.grid_search(grid\n#                                     ,X=X_train\n#                                     ,y=np.log(y_train)\n#                                     ,plot=True\n#                                     ,verbose=False)\n#print('\\n\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f - ', datetime.now() - start)\n#print('\\n\u041d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: ', grid_search_result['params'])\n\n\ncb = CatBoostRegressor(iterations = 5000,\n                       random_seed = RANDOM_SEED,\n                       eval_metric='MAPE',\n                       custom_metric=['R2', 'MAE'],\n                       silent=True,\n                       learning_rate=0.13, depth=12,\n                       l2_leaf_reg=8, random_strength=0.3)\n\n#cb.fit(X_train, np.log(y_train),\n#         eval_set=(X_test, np.log(y_test)),\n#         verbose=False,\n#         use_best_model=True,\n#         plot=True)\n\n#cb.save_model('catboost_log_model.model')\n\n#predict_test = np.exp(cb.predict(X_test))\n#print_learn_report(start, y_test, predict_test)","9fcf8371":"start = datetime.now()\n\nrandom_grid = {'n_estimators': [int(x) for x in np.linspace(start = 100, stop = 400, num = 4)],\n               'max_features': ['auto', 'sqrt'],\n               'max_depth': [int(x) for x in np.linspace(5, 15, num = 6)] + [None],\n               'min_samples_split': [2, 5, 10],\n               'min_samples_leaf': [1, 2, 4],\n               'bootstrap': [True, False]}\n\n#rfr = RandomForestRegressor(random_state = RANDOM_SEED)\n#rf_random = RandomizedSearchCV(estimator = rfr, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=10, random_state=RANDOM_SEED, n_jobs = -1)\n#rf_random.fit(X_train, np.log(y_train))\n#rf_random.best_params_\n\n#best_params_: \n#{'n_estimators': 300,\n# 'min_samples_split': 2,\n# 'min_samples_leaf': 1,\n# 'max_features': 'sqrt',\n# 'max_depth': None,\n# 'bootstrap': False}\n\n#best_rfr = rf_random.best_estimator_\nbest_rfr = RandomForestRegressor(random_state=RANDOM_SEED\n                      , n_estimators=300\n                      , min_samples_split=2\n                      , min_samples_leaf=1\n                      , max_features='sqrt'\n                      , max_depth=None\n                      , bootstrap=False)\n\n#best_rfr.fit(X_train, np.log(y_train))\n\n\n#predict_rfr = np.exp(best_rfr.predict(X_test))\n#print_learn_report(start, y_test, predict_rfr)","1ec820f5":"start = datetime.now()\n\nrandom_grid = {'n_estimators': [int(x) for x in np.linspace(start = 100, stop = 400, num = 8)],\n               'max_features': ['auto', 'sqrt', 'log2'],\n               'max_depth': [int(x) for x in np.linspace(5, 15, num = 6)] + [None],\n               'min_samples_split': [2, 5, 10],\n               'min_samples_leaf': [1, 2, 4]}\n\n#gbr = GradientBoostingRegressor()\n#gbr_random = RandomizedSearchCV(estimator = gbr, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=10, random_state=RANDOM_SEED, n_jobs = -1)\n#gbr_random.fit(X_train, np.log(y_train))\n#gbr_random.best_params_\nbest_gbr = GradientBoostingRegressor(random_state=RANDOM_SEED\n                      , n_estimators=800\n                      , min_samples_split=5\n                      , min_samples_leaf=4\n                      , max_features='sqrt'\n                      , max_depth=9)\n#best_gbr.fit(X_train, np.log(y_train))\n\n#predict_gbr = np.exp(best_gbr.predict(X_test))\n#print_learn_report(start, y_test, predict_gbr)","a3d11136":"start = datetime.now()\n\nxgb_reg = xgb.XGBRegressor(objective='reg:squarederror', colsample_bytree=0.5,\n                          learning_rate=0.05, max_depth=12, alpha=1,\n                          n_estimators=1000)\n#xgb_reg.fit(X_train, np.log(y_train))\n#xgb_red_pred = np.exp(xgb_reg.predict(X_test))\n#print_learn_report(start, y_test, xgb_red_pred)","b8e401f6":"start = datetime.now()\n\nbagg_rfr = BaggingRegressor(best_rfr, n_estimators=3, n_jobs=1, random_state=RANDOM_SEED)\n#bagg_rfr.fit(X_train, np.log(y_train))\n#predict_bagg_rfr = np.exp(bagg_rfr.predict(X_test))\n#print_learn_report(start, y_test, predict_bagg_rfr)","fb84c6e1":"start = datetime.now()\n\nbagg_gbr = BaggingRegressor(best_gbr, n_estimators=3, n_jobs=1, random_state=RANDOM_SEED)\n#bagg_gbr.fit(X_train, np.log(y_train))\n#predict_bagg_gbr = np.exp(bagg_gbr.predict(X_test))\n#print_learn_report(start, y_test, predict_bagg_gbr)","cd865c27":"start = datetime.now()\n\nbagg_xgb = BaggingRegressor(xgb_reg, n_estimators=3, n_jobs=1, random_state=RANDOM_SEED)\n#bagg_xgb.fit(X_train, np.log(y_train))\n#predict_bagg_xgb = np.exp(bagg_xgb.predict(X_test))\n#print_learn_report(start, y_test, predict_bagg_xgb)","590cca50":"start = datetime.now()\n\nestimators=[('b_gbr', BaggingRegressor(GradientBoostingRegressor(random_state=RANDOM_SEED\n                                                                ,n_estimators=800\n                                                                ,min_samples_split=5\n                                                                ,min_samples_leaf=4\n                                                                ,max_features='sqrt'\n                                                                ,max_depth=9)\n                                        ,n_estimators=3\n                                        ,n_jobs=1\n                                        ,random_state=RANDOM_SEED))\n            ,('xgb', xgb.XGBRegressor(objective='reg:squarederror'\n                                      ,colsample_bytree=0.5\n                                      ,learning_rate=0.05\n                                      ,max_depth=12\n                                      ,alpha=1\n                                      ,n_estimators=1000))]\n\nst_ensemble = StackingRegressor(estimators=estimators\n                                ,final_estimator = CatBoostRegressor(iterations = 5000\n                                                                     ,random_seed = RANDOM_SEED\n                                                                     ,eval_metric='MAPE'\n                                                                     ,custom_metric=['R2', 'MAE']\n                                                                     ,silent=True\n                                                                     ,learning_rate=0.13\n                                                                     ,depth=12\n                                                                     ,l2_leaf_reg=8\n                                                                     ,random_strength=0.3))\n\n    \nst_ensemble.fit(X_train, np.log(y_train))\n\npredict_ensemble = np.exp(st_ensemble.predict(X_test))\nprint_learn_report(start, y_test, predict_ensemble)","a302a777":"st_ensemble.fit(X, np.log(y))\n\npredict_submission = np.round(np.exp(st_ensemble.predict(X_sub)),-3)\npredict_submission ","605225e1":"sample_submission['price'] = predict_submission * k\nsample_submission.to_csv(f'submission_v{VERSION}.csv', index=False)\nsample_submission.head(10)","40825d3c":"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f -  0:02:35.895540\n\n\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE:10.62%\n\n\u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0431\u044d\u0433\u0433\u0438\u043d\u0433\u0430 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u044b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0434\u043b\u044f Gradient Boosting Regressor. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b Random Forest Regressor \u0438 XGB Regressor \u0441\u043d\u0438\u0437\u0438\u043b\u0438\u0441\u044c.\n\n# 6. \u0421\u0442\u0435\u043a\u043a\u0438\u043d\u0433. \u0410\u043d\u0441\u0430\u043c\u0431\u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","ad0dd9de":"### 1.2.20. vendor\n\u041d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439\n### 1.2.21. \u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b","111f66a8":"## 3.4. \u041f\u043e\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c","c3ab4d7a":"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f -  0:01:03.301634\n\n\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE:10.87%\n\n## 4.5. XGB Regressor","e7769114":"## 1.4. \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \"\u043b\u0438\u0448\u043d\u0438\u0445\" \u043c\u0430\u0440\u043e\u043a \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 brand","413ee207":"### 1.2.4. complectation_dict\n\u0412\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043c\u0430\u043b\u0430. \u0415\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.\n### 1.2.5. description\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0422\u0421, \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u043e\u043c. \u0411\u0435\u0437 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c.\n### 1.2.6. engineDisplacement\n\u0422\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 'LTR' \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.","6c4b999f":"### 1.2.23. \u041f\u0422\u0421","d2bb8034":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 \u0447\u0435\u043a \u043b\u0438\u0441\u0442: https:\/\/docs.google.com\/spreadsheets\/d\/1I_ErM3U0Cs7Rs1obyZbIEGtVn-H47pHNCi4xdDgUmXY\/edit?usp=sharing","534192d2":"#### \u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430: SkillFactory\n#### \u0421\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: Data Science\n#### \u0413\u0440\u0443\u043f\u043f\u0430: DST-17\n### \u042e\u043d\u0438\u0442 6. \u041f\u0440\u043e\u0435\u043a\u0442 5: \"\u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\"\n##### \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0412\u043b\u0430\u0434\u0438\u043c\u0438\u0440 \u042e\u0448\u043c\u0430\u043d\u043e\u0432\n\n<img src=\"https:\/\/raw.githubusercontent.com\/vyushmanov\/skillfactory_rds\/master\/module_6\/choice_the_car.jpg\"\/>\n\n# \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043f\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c\n","ff5e3fcf":"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f -  0:01:47.575827\n\n\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE:10.73%\n\n## 5.3. \u0421 xgb","34ddf9d5":"## 2.3. \u041f\u0435\u0440\u0438\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f","56a55ae6":"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f -  0:08:29.342993\n\n\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE:10.88%\n\n## 4.3. Random Forest\n\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u043e\u0431\u0443\u0447\u0438\u043c \u043d\u0430 \u043d\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u044c","97a70844":"## 2.5. \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","599ef209":"## 1.1. \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445","06c80f52":"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f -  0:00:58.151827\n\n\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE:10.53%\n\n# 5. \u0411\u044d\u0433\u0433\u0438\u043d\u0433\n## 5.1. \u0421\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043b\u0435\u0441\u043e\u043c","b084b93d":"### 1.2.24. \u041f\u0440\u0438\u0432\u043e\u0434\n\u041d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439\n### 1.2.25. \u0420\u0443\u043b\u044c","e12deb74":"# 1. \u0414\u0430\u043d\u043d\u044b\u0435","aa1531e2":"## 4.1. \u041d\u0430\u0438\u0432\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c\n\u042d\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u0446\u0435\u043d\u0443 \u043f\u043e \u0440\u0430\u0431\u043e\u0447\u0435\u043c\u0443 \u043e\u0431\u044a\u0435\u043c\u0443 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f. \nC \u043d\u0435\u0439 \u0431\u0443\u0434\u0435\u043c \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438.\n\n\n","19b478b8":"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f -  0:00:52.179295\n\n\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE:10.96%\n\n## 4.4. Gradient Boosting Regressor","a5455c65":"# Setup","90a49610":"## 3.5. \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","78d37f41":"### 1.2.16. productionDate\n\u041d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439\n### 1.2.17. super_gen\n\u041f\u043e\u043a\u0430 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0435\u0440\u0432\u043d\u043e\u0433\u043e \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438. \u041f\u043e\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0435\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e.\n### 1.2.18. vehicleConfiguration\n\u041f\u043e\u043a\u0430 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0435\u0440\u0432\u043d\u043e\u0433\u043e \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438. \u041f\u043e\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0435\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e.\n### 1.2.19. vehicleTransmission\n","7dcd47c0":"### 1.2.26. \u0422\u0430\u043c\u043e\u0436\u043d\u044f","61f2ef5e":"### 1.2.12. model_name\n\u041d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439\n### 1.2.13. name\n\u0420\u0435\u0437\u0435\u0440\u0432\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0434\u0430\u043d\u043d\u044b\u0445\n### 1.2.14. numberOfDoors\n\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 0 \u0438 \u043f\u043e\u043f\u0440\u0430\u0432\u0438\u043c \u0444\u043e\u0440\u043c\u0430\u0442 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","edc304c0":"## 1.3. \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438","d5b4dca8":"# 4. \u041c\u043e\u0434\u0435\u043b\u0438","4f7b21f3":"### 1.2.8. equipment_dict\n\u041f\u043e\u043a\u0430 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0437\u0435\u0440\u0432\u043d\u043e\u0433\u043e \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438. \u041f\u043e\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0435\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e.\n### 1.2.9. fuelType\n\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n### 1.2.10. mileage\n\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n### 1.2.11. modelDate\n\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 0 \u0438 \u043f\u043e\u043f\u0440\u0430\u0432\u0438\u043c \u0444\u043e\u0440\u043c\u0430\u0442 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","256d2dbd":"## 1.2. \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432 \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043a \u0432\u0438\u0434\u0443, \u043f\u0440\u0438\u043d\u044f\u0442\u043e\u043c\u0443 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\n\n### 1.2.1. bodyType\n\u041f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043c \u0443\u043a\u0440\u0443\u043f\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043e \u0443\u0440\u043e\u0432\u043d\u044f, \u043f\u0440\u0438\u043d\u044f\u0442\u043e\u0433\u043e \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435","29b6d834":"## 1.5. \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432 \u0432\u044b\u0431\u043e\u0440\u043e\u043a \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435","3e93fdf2":"\u0414\u043b\u044f 5000 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439:\n\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f -  0:09:43.214411\n\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE:12.89%\n### 4.2.2. \u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438 \u043f\u043e\u0434\u0431\u043e\u0440 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0432\u0437\u044f\u0442\u044c \u0442\u0430\u0440\u0433\u0435\u0442 \u0432 \u043b\u043e\u0433\u043e\u0440\u0438\u0444\u043c - \u044d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e np.log \u0438 np.exp).    ","4d7d9ac3":"## 2.6. \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e \u0442\u0438\u043f\u0430\u043c","9be323b7":"# What's next?\n\u0427\u0442\u043e \u0435\u0449\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n\n* \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u043b\u0438 \u043a\u0430\u043a \u0435\u0449\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n* \u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 ML\n* \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Blending & Stacking \u043d\u0435 \u043f\u0440\u0438\u043d\u0435\u0441\u043b\u043e \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e\u0433\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438. \u041d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438\u043c\u0435\u043b\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 Random Forest \u0441 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0435\u0439.","921d9a2b":"### 1.2.15. priceCurrency","314edadc":"### 1.2.7. enginePower","d4fec310":"### 1.2.22. \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435","2396e36a":"# 3. \u041f\u0440\u0435\u0434\u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n## 3.1. \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f","2ccd7386":"### 1.2.2. \n\n\u0422\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 36 \u043c\u0430\u0440\u043e\u043a. \u0412 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0442\u043e\u043b\u044c\u043a\u043e 12: 'SKODA', 'AUDI', 'HONDA', 'VOLVO', 'BMW', 'NISSAN', 'INFINITI',\n       'MERCEDES', 'TOYOTA', 'LEXUS', 'VOLKSWAGEN', 'MITSUBISHI'\n### 1.2.3. color\n\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0432\u0435\u0442\u0430 \u043a ","1055f8fe":"## 4.2. CatBoost\n![](https:\/\/pbs.twimg.com\/media\/DP-jUCyXcAArRTo.png:large)   \n\n\n### 4.2.1. \u041b\u0438\u043d\u0435\u0439\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","4d3eb826":"## 2.7. \u041e\u0446\u0435\u043d\u043a\u0430 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","2ae36e36":"## 3.2. Label Encoding","292cba53":"## 2.4. \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432","ab285c22":"# 2. \u0414\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n## 2.1. \u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 engineDisplacement\n\u041f\u0440\u0438 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0435 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0431\u044b\u043b\u0430 \u0434\u043e\u043f\u0443\u0449\u0435\u043d\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a engineDisplacement \u043f\u043e\u043f\u0430\u043b\u0438 \u043d\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0418\u0441\u043f\u0440\u0430\u0432\u0438\u043c \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0432 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 name. \u0422\u0430\u043a\u0436\u0435 \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0438\u0437 name \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0430\u0432\u0442\u043c\u043e\u0431\u0438\u043b\u044f\u0445 \u0441 \u0433\u0438\u0431\u0440\u0438\u0434\u043d\u043e\u0439 \u0441\u0438\u043b\u043e\u0432\u043e\u0439 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u043e\u0439","f2c19426":"## 3.3. \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","efe5f2f3":"## 2.2. \u0422\u0438\u043f \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430\n\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u043c \u043a\u043e\u0441\u0432\u0435\u043d\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0442\u0438\u043f\u0435 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f \u043a \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044e \u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0435, \u0441\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0435\u043d\u043d\u0430\u044f \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 description. \u0418\u0441\u043f\u043e\u043b\u0437\u0443\u0435\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043f\u043e \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u043c \u0441\u043b\u043e\u0432\u0430\u043c \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u043f\u0440\u043e\u0434\u0430\u0432\u0446\u0430.","2e238fc8":"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f -  0:01:35.995616\n\n\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE:11.24%\n\n## 5.2. \u0421 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u043c \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u043e\u043c","b0c66697":"# 7. Submission"}}