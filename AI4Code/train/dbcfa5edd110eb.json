{"cell_type":{"0e461a44":"code","97f57a28":"code","e9280e46":"code","5bebbdcc":"code","226955bb":"code","680186ac":"code","bbf3a3ec":"code","80d97f19":"code","b44c27ba":"code","3528ab13":"code","cf75e257":"code","c3bc4349":"code","93e4be14":"code","ca350c37":"markdown","52b55cf2":"markdown","2903d14d":"markdown","f0fa2c99":"markdown","b95842e9":"markdown","a072af03":"markdown","ba3f2bcf":"markdown","05b8576c":"markdown","3725da6b":"markdown"},"source":{"0e461a44":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n\n\nimport datetime as dt\nimport matplotlib.pyplot as plt\nimport seaborn as sns","97f57a28":"data = pd.read_csv(\"..\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2020-09-14.csv\")\ndata.Timestamp = pd.to_datetime(data.Timestamp, unit='s')\n#cleaning data:\ndata = data.dropna()\ndata.Timestamp = data.Timestamp.apply(lambda x: dt.datetime(x.year,x.month,x.day))\ndata.head(500)","e9280e46":"data_days_avg = data.groupby(\"Timestamp\", as_index = False).agg(\"mean\")\n\nplt.rcParams.update({'font.size': 12})\nfig, ax = plt.subplots(figsize=(20, 7))\nax = sns.lineplot(x=\"Timestamp\", y=\"Weighted_Price\", data=data_days_avg)\nax.set(ylabel=\"Weighted Price\")\nplt.show()","5bebbdcc":"data_days_sum = data.groupby(\"Timestamp\", as_index = False).agg(\"sum\")\n\nplt.rcParams.update({'font.size': 12})\nfig, ax = plt.subplots(figsize=(20, 7))\nax = sns.lineplot(x=\"Timestamp\", y=\"Volume_(BTC)\", data=data_days_sum)\nax.set(ylabel=\"Volume BTC\")\nplt.show()","226955bb":"data_days_sum = data.groupby(\"Timestamp\", as_index = False).agg(\"sum\")\n\nplt.rcParams.update({'font.size': 12})\nfig, ax = plt.subplots(figsize=(20, 7))\nax = sns.lineplot(x=\"Timestamp\", y=\"Volume_(Currency)\", data=data_days_sum)\nax.set(ylabel=\"Volume (Currency)\")\nplt.show()","680186ac":"data_agg_days = pd.read_csv(\"..\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2020-09-14.csv\")\ndata_agg_days.Timestamp = pd.to_datetime(data_agg_days.Timestamp, unit='s')\ndata_agg_days = data_agg_days.dropna()\ndata_agg_days.Timestamp = data_agg_days.Timestamp.apply(lambda x: dt.datetime(x.year, x.month, x.day))\ndata_agg_days.Timestamp = data_agg_days.Timestamp.apply(lambda x: x.strftime('%Y-%m-%d'))\n\ndata_normalized = data_agg_days.groupby(\"Timestamp\", as_index = False).agg(\"mean\")\ndata_normalized[\"Weighted Price\"] = data_normalized[\"Weighted_Price\"].apply\\\n(lambda x: (x - data_normalized[\"Weighted_Price\"].min()) \/ (data_normalized[\"Weighted_Price\"].max() - data_normalized[\"Weighted_Price\"].min()))\ndata_normalized[\"Volume (Currency)\"] = data_normalized[\"Volume_(Currency)\"].apply\\\n(lambda x: (x - data_normalized[\"Volume_(Currency)\"].min()) \/ (data_normalized[\"Volume_(Currency)\"].max() - data_normalized[\"Volume_(Currency)\"].min()))\n\n\nfig = plt.figure(figsize=(30,10))\nplt.plot( 'Timestamp', 'Volume (Currency)', data=data_normalized, color='red', alpha=0.4)\nplt.plot( 'Timestamp', 'Weighted Price', data=data_normalized, color='lightblue')\n\nplt.tick_params(\n    axis='x',      \n    which='both',      \n    bottom=False,\n    top=False,\n    labelbottom=True)\n\nplt.xlabel('Date')\nplt.ylabel('Normalized Values')\nplt.xticks((\"2012-01-01\", \"2013-01-01\", \"2014-01-01\", \"2015-01-01\", \"2016-01-01\", \"2017-01-01\", \"2018-01-01\",\"2019-01-01\", \"2020-01-01\", \"2021-01-01\"))\n\nplt.legend()\n\nplt.show()","bbf3a3ec":"data_agg_weeks = pd.read_csv(\"..\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2020-09-14.csv\")\ndata_agg_weeks.Timestamp = pd.to_datetime(data_agg_weeks.Timestamp, unit='s')\ndata_agg_weeks = data_agg_weeks.dropna()\ndata_agg_weeks.Timestamp = data_agg_weeks.Timestamp.apply(lambda x: dt.datetime(x.year, x.month, x.day))\ndata_agg_weeks.Timestamp = data_agg_weeks.Timestamp.apply(lambda x: x.strftime('%Y-%m'))\n\ndata_normalized = data_agg_weeks.groupby(\"Timestamp\", as_index = False).agg(\"mean\")\ndata_normalized[\"Weighted Price\"] = data_normalized[\"Weighted_Price\"].apply\\\n(lambda x: (x - data_normalized[\"Weighted_Price\"].min()) \/ (data_normalized[\"Weighted_Price\"].max() - data_normalized[\"Weighted_Price\"].min()))\n\ndata_normalized[\"Volume (Currency)\"] = data_normalized[\"Volume_(Currency)\"].apply\\\n(lambda x: (x - data_normalized[\"Volume_(Currency)\"].min()) \/ (data_normalized[\"Volume_(Currency)\"].max() - data_normalized[\"Volume_(Currency)\"].min()))\n\nfig = plt.figure(figsize=(30,10))\nplt.plot( 'Timestamp', 'Volume (Currency)', data=data_normalized, color='red', alpha=0.4)\nplt.plot( 'Timestamp', 'Weighted Price', data=data_normalized, color='skyblue')\n\nplt.tick_params(\n    axis='x',\n    which='both',\n    bottom=False,\n    top=False,\n    labelbottom=True)\n\nplt.xlabel('Date')\nplt.ylabel('Normalized Values')\nplt.xticks((\"2012-01\", \"2013-01\", \"2014-01\", \"2015-01\", \"2016-01\", \"2017-01\", \"2018-01\",\"2019-01\", \"2020-01\", \"2021-01\"))\n\nplt.legend()\n\nplt.show()","80d97f19":"data_normalized = data_agg_weeks.groupby(\"Timestamp\", as_index = False).agg(\"mean\")\ndata_normalized[\"Weighted_Price\"] = data_normalized[\"Weighted_Price\"].apply\\\n(lambda x: (x - data_normalized[\"Weighted_Price\"].min()) \/ (data_normalized[\"Weighted_Price\"].max() - data_normalized[\"Weighted_Price\"].min()))\n\ndata_normalized[\"Volume_(Currency)\"] = data_normalized[\"Volume_(Currency)\"].apply\\\n(lambda x: (x - data_normalized[\"Volume_(Currency)\"].min()) \/ (data_normalized[\"Volume_(Currency)\"].max() - data_normalized[\"Volume_(Currency)\"].min()))\n\n#plt.rcParams.update({'font.size': 12})\n#fig, ax = plt.subplots(figsize=(20, 7))\n#ax = sns.lineplot(x=\"Timestamp\", y=\"Weighted_Price\", data=data_normalized)\n\nfig = plt.figure(figsize=(30,10))\nplt.plot( 'Timestamp', 'Volume_(Currency)', data=data_normalized, color='red', alpha=0.4)\nplt.plot( 'Timestamp', 'Weighted_Price', data=data_normalized, color='skyblue')\nplt.legend()","b44c27ba":"# data_agg_weeks = pd.read_csv(\"..\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2020-09-14.csv\")\n# data_agg_weeks.Timestamp = pd.to_datetime(data_agg_weeks.Timestamp, unit='s')\n# data_agg_weeks = data_agg_weeks.dropna()\n# data_agg_weeks.Timestamp = data_agg_weeks.Timestamp.apply(lambda x: dt.datetime(x.year, x.month, x.day))\n# data_agg_weeks.Timestamp = data_agg_weeks.Timestamp.apply(lambda x: x.strftime('%Y-%m-%W-%d'))\n\n# data_agg_weeks = data_agg_weeks.groupby(\"Timestamp\", as_index = False).agg(\"mean\")\n\n\n\n# def _helper(start, end):\n#     tmp = []\n#     for i in range(start, end):\n#         tmp.append(data_agg_weeks.loc[i, \"Weighted_Price\"])\n        \n#     helper = 4711\n#     min_ind = 0\n#     for i in range(len(tmp)):\n#         if(tmp[i] < helper):\n#             helper = tmp[i]\n#             min_ind = i\n            \n#     print(tmp)\n#     return min_ind\n            \n        \n\n# Weekdays = [0, 0, 0, 0, 0, 0, 0]\n# prev_rows = 0\n# akt_week = 52\n# for i in range(len(data_agg_weeks)): \n#     if(int(data_agg_weeks.loc[i, \"Timestamp\"].rsplit('-')[2]) == int(akt_week)):\n#         Weekdays[_helper(prev_rows, i)] = Weekdays[_helper(prev_rows, i)] + 1\n#         akt_week = data_agg_weeks.loc[i, \"Timestamp\"].rsplit('-')[2]\n#         prev_rows = i\n#         print((i - 1) - prev_rows)\n#         print(data_agg_weeks.loc[i, \"Timestamp\"].rsplit('-')[2])\n\n\n# print(Weekdays)","3528ab13":"data = pd.read_csv(\"..\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2020-09-14.csv\")\ndata.Timestamp = pd.to_datetime(data.Timestamp, unit='s')\ndata = data.dropna()\n\ndayOfWeek={0:'Mon', 1:'Tue', 2:'Wed', 3:'Thu', 4:'Fri', 5:'Sat', 6:'Sun'}\ndata['Day of Week'] = data['Timestamp'].dt.dayofweek.map(dayOfWeek)\n\n# find indices with min value of that week\nidx = data.groupby([pd.Grouper(key='Timestamp', freq='W-MON')])['Weighted_Price'].transform(min) == data['Weighted_Price']\n\n# remove duplicate day rows\nweekly_lows = data[idx].groupby([pd.Grouper(key='Timestamp', freq='D')]).first().reset_index()\nweekly_lows = weekly_lows.dropna()\n\n\nsns.countplot(x='Day of Week',data=weekly_lows, order=['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'])\n","cf75e257":"import plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ndata = pd.read_csv(\"..\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2020-09-14.csv\")\ndata.Timestamp = pd.to_datetime(data.Timestamp, unit='s')\ndata = data.dropna()\n\ndayOfWeek={0:'Mon', 1:'Tue', 2:'Wed', 3:'Thu', 4:'Fri', 5:'Sat', 6:'Sun'}\ndata['Day of Week'] = data['Timestamp'].dt.dayofweek.map(dayOfWeek)\n\ndata['Time Decimal'] = data['Timestamp'].dt.hour + data['Timestamp'].dt.minute\/60\n\n\ndaily_lows = data[data.groupby([pd.Grouper(key='Timestamp', freq='D')])['Weighted_Price'].transform(min) == data['Weighted_Price']]\nsns.boxplot(x=\"Day of Week\", y=\"Time Decimal\", data=daily_lows, palette='rainbow')\n\n","c3bc4349":"box_tracer = []\nfor key, day in dayOfWeek.items():\n    box_tracer.append(\n        go.Box(\n            y = daily_lows[daily_lows['Day of Week'] == day]['Time Decimal'],\n            name = day\n        )\n    )\niplot(box_tracer)","93e4be14":"import plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\ndata_15_20 = data\ndata_15_20.dropna()\n\n# create valid date range\nstart = dt.datetime(2015, 1, 1, 0, 0, 0, 0)\n\n# find rows between start and end time and find the first row (00:00 monday morning)\nweekly_rows = data_15_20[(data_15_20['Timestamp'] >= start)].groupby([pd.Grouper(key='Timestamp', freq='W-MON')]).first().reset_index()\nweekly_rows.head()\n\ndayOfWeek={0:'Mon', 1:'Tue', 2:'Wed', 3:'Thu', 4:'Fri', 5:'Sat', 6:'Sun'}\ndata_15_20['Day of Week'] = data_15_20['Timestamp'].dt.dayofweek.map(dayOfWeek)\n\ndata_15_20['Time Decimal'] = data_15_20['Timestamp'].dt.hour + data_15_20['Timestamp'].dt.minute\/60\n\n\ndaily_lows = data_15_20[data_15_20.groupby([pd.Grouper(key='Timestamp', freq='D')])['Weighted_Price'].transform(min) == data_15_20['Weighted_Price']]\nsns.boxplot(x=\"Day of Week\", y=\"Time Decimal\", data=daily_lows, palette='rainbow')\n\nbox_tracer = []\nfor key, day in dayOfWeek.items():\n    box_tracer.append(\n        go.Box(\n            y = daily_lows[daily_lows['Day of Week'] == day]['Time Decimal'],\n            name = day\n        )\n    )\niplot(box_tracer)\n\nprint(daily_lows)\n\n\n\n\n","ca350c37":"## Timeline of traded Bitcoin Volume in USD per day","52b55cf2":"# **Bitcoin Historical Data - Jan 2012 to Sept 2020**\n# **Datavisualisation**","2903d14d":"\n## Best Day of Week to Buy\n\n### Determine which day of the week most often has the lowest price.\n","f0fa2c99":"## Timeline of traded Bitcoin volume per day","b95842e9":"## Comparison of monthly Bitcoin volume in USD and weighted price ","a072af03":"\n## Best Time of Day to Buy\n\n### Determine what time of day most often has the lowest price.\n","ba3f2bcf":"## Comparison of daily Bitcoin volume in USD and weighted price ","05b8576c":"loading and cleaning data:","3725da6b":"## Timeline of Bitcoin weighted price daily mean"}}