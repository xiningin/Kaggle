{"cell_type":{"61eae40a":"code","7eb6330e":"code","48cd3281":"code","cff08fb1":"code","6b8b1513":"code","458185b7":"markdown","d9b8fe68":"markdown","e46dcb00":"markdown","3e2eb378":"markdown"},"source":{"61eae40a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport plotly\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\nimport os\nos.chdir('..\/input\/price-volume-data-for-all-us-stocks-etfs\/Stocks')","7eb6330e":"#read data\n# kernels let us navigate through the zipfile as if it were a directory\n\n# trying to read a file of size zero will throw an error, so skip them\nfilenames = [x for x in os.listdir() if x.endswith('.txt') and os.path.getsize(x) > 0]\nfilenames = random.sample(filenames,10)\n","48cd3281":"data = []\nfor filename in filenames:\n    df = pd.read_csv(filename, sep=',')\n    #combine attributes\n    #combine high and low by avg\n    #combine open and close by avg\n    #combine avgHighLow and avgOpenClose\n    df['Price'] = (df['High'] + df['Low'] + df['Open'] + df['Close'])\/4\n\n    #drop obsolete columns for faster processing\n    columns2Drop = ['High', 'Low', 'Open', 'Close', 'OpenInt']\n    df = df.drop(labels=columns2Drop, axis=1)\n\n    #create new attribute of \"movement\"\n    df['Volume*Price'] = df['Volume'] * df['Price']\n    # print(df)\n\n    label, _, _ = filename.split(sep='.')\n    df['Label'] = filename\n    df['Date'] = pd.to_datetime(df['Date'])\n\n    data.append(df)","cff08fb1":"r = lambda: random.randint(0,255)\ntraces = []\n\nfor df in data:\n    clr = str(r()) + str(r()) + str(r())\n#     df = df.sample(n=100, replace=True)\n    df = df.sort_values('Date')\n#     print(df['Label'])\n    label = df['Label'].iloc[0]\n\n    trace = plotly.graph_objs.Scattergl(\n        x=df['Date'],\n        y=df['Price'],\n        mode='line',\n        line=dict(\n            color = clr\n        )\n    )\n    traces.append(trace)\n    \nlayout = plotly.graph_objs.Layout(\n    title='Plot',\n)\nfig = plotly.graph_objs.Figure(data=traces, layout=layout)\n\nplotly.offline.init_notebook_mode(connected=True)\nplotly.offline.iplot(fig, filename='dataplot')\n\n\n\n# Any results you write to the current directory are saved as output.","6b8b1513":"r = lambda: random.randint(0,255)\ntraces = []\n\nfor df in data:\n    clr = str(r()) + str(r()) + str(r())\n#     df = df.sample(n=100, replace=True)\n    df = df.sort_values('Date')\n#     print(df['Label'])\n    label = df['Label'].iloc[0]\n\n    trace = plotly.graph_objs.Scattergl(\n        x=df['Date'],\n        y=np.log(df['Price']),\n        mode='line',\n        line=dict(\n            color = clr\n        )\n    )\n    traces.append(trace)\n\nlayout = plotly.graph_objs.Layout(\n    title='Log Plot',\n)\nfig = plotly.graph_objs.Figure(data=traces, layout=layout)\n\nplotly.offline.init_notebook_mode(connected=True)\nplotly.offline.iplot(fig, filename='dataplot')\n\n# Any results you write to the current directory are saved as output.","458185b7":"Create seperate lines for each company (dataframe). Each line gets a randomized color.","d9b8fe68":"Read in the files into an array of dataframes. This is usefull because we want to plot a seperate line for each company (dataframe). We also process the data here, by combining all the price attributes into one.","e46dcb00":"This is a work in progress. I will be adding to the visualizations, every day.","3e2eb378":"Read all the filenames in the directory, each file consists of datapoints of one company"}}