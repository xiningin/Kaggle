{"cell_type":{"347b51f6":"code","219a8c29":"code","e8c6a0ff":"code","91956c15":"code","4009ab34":"code","9de4b1df":"code","77b2f538":"code","a17f5b19":"code","4ede5e1d":"code","562e396d":"code","da591da0":"code","e2bfedaa":"code","48ced150":"code","e97086ee":"code","8bf86aed":"markdown","9d60cb74":"markdown","d81be63a":"markdown","04bae4ef":"markdown","bf9b0666":"markdown","509a1494":"markdown","53ea303d":"markdown","ef3bd30e":"markdown","79bf8d69":"markdown","e7f406f8":"markdown","29ff85bb":"markdown","e74e68ef":"markdown","ca8de99f":"markdown"},"source":{"347b51f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))        \n\n# Any results you write to the current directory are saved as output.","219a8c29":"import colorsys\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mc\nimport matplotlib.animation as ani\nfrom matplotlib.animation import FuncAnimation\nfrom matplotlib import rc\npd.set_option('display.max_columns', None)","e8c6a0ff":"df = pd.read_csv('\/kaggle\/input\/campeonato-brasileiro-de-futebol\/campeonato-brasileiro-full.csv')","91956c15":"df['Clube 1'] = df['Clube 1'].str.capitalize()\ndf['Clube 2'] = df['Clube 2'].str.capitalize()\ndf['Hor\u00e1rio'].fillna(method='ffill', inplace=True)\ndf['Data'] = pd.to_datetime(df['Data'], format='%Y-%m-%d')","4009ab34":"df['Rodada#'] = df['Rodada'].str.extract('(\\d+)')\n\ndata1 = pd.to_datetime('2001-12-04', format='%Y-%m-%d')\ndata2 = pd.to_datetime('2001-12-23', format='%Y-%m-%d')\ndata3 = pd.to_datetime('2002-11-23', format='%Y-%m-%d')\ndata4 = pd.to_datetime('2002-12-15', format='%Y-%m-%d')\nR = 0\n\ndef rvalue(value):\n    if value['Rodada'] == 'SEGUNDA FASE':\n        R = 35\n        return R\n    elif value['Rodada'] == 'QUARTAS DE FINAL':\n        R = 36\n        return R\n    elif value['Rodada'] == 'SEMI FINAL':\n        R = 37\n        return R\n    elif value['Rodada'] == 'FINAL':\n        R = 38\n        return R\n    elif (value['Rodada'] == 'Quartas de Final') & (value['Data'] > data1 <= data2):\n        R = 28\n        return R\n    elif (value['Rodada'] == 'Semi Final') & (value['Data'] > data1 <= data2):\n        R = 29\n        return R\n    elif (value['Rodada'] == 'Final') & (value['Data'] > data1 <= data2):\n        R = 30\n        return R\n    elif (value['Rodada'] == 'Quartas de Final') & (value['Data'] > data3 <= data4):\n        R = 30\n        return R\n    elif (value['Rodada'] == 'Semi Final') & (value['Data'] > data3 <= data4):\n        R = 31\n        return R\n    elif (value['Rodada'] == 'Final') & (value['Data'] > data3 <= data4):\n        R = 32\n        return R\n    else:\n        return value['Rodada#']\n    \ndf['Rodada#'] = df.apply(rvalue, axis=1)\ndf['Rodada#'] = df['Rodada#'].astype('float64')","9de4b1df":"def mandante(value):\n    if value['Vencedor'] == value['Clube 1']:\n        result = 1\n    else:\n        result = 0\n    return result\ndf['Mandante Vence'] = df.apply(mandante, axis=1)","77b2f538":"clubes = df['Clube 1'].unique()\n\n\nfor i in clubes:\n    def gols(row):\n        if row['Clube 1'] == i:\n            val = row['Clube 1 Gols']\n        elif row['Clube 2'] == i:\n            val = row['Clube 2 Gols']\n        else:\n            val = 0\n        return val\n    df[i] = df.apply(gols, axis=1)\n    df[i] = df[i].cumsum()","a17f5b19":"# Filter only the Date and teams columns. And also clean duplicated lines.\ndf_y = df.drop(df.iloc[:, 0:2], axis=1)\ndf_y = df_y.drop(df_y.iloc[:, 1:15], axis=1)\ndf_y = df_y.drop_duplicates(subset = [\"Data\"])\ndf_y.reset_index(inplace=True)\n\n# Group dates by year.\ndf_y2 = df_y.set_index('Data')\ndf_y2.drop(axis=1, columns='index', inplace=True)\ndf_y2 = df_y2.groupby(pd.Grouper(freq=\"Y\"))\ndf_y2 = df_y2.max()\n\n# RAnk teams by the total goals scored and separating the 9 top teams.\ndf_y3 = df_y2.reset_index()\ns = df_y3.iloc[-1]\ndf_y3 = df_y3.iloc[:, ((-s[1:]).argsort() + 1).reindex(df_y3.columns, fill_value=0)]\ndf_y3 = df_y3.set_index('Data')\ndf_y3 = df_y3[df_y3.columns[:9]]\ndf_y3.dropna(axis=0, how='any', inplace=True)\n\n# For the matrix chart we will need an 'x' column with sequential numbers.\ndf_y3['x'] = range(1, 1+len(df_y3))","4ede5e1d":"# Initialize the figure\nplt.style.use('seaborn-darkgrid')\n \n# create a color palette\npalette = plt.get_cmap('winter', lut=18)\n\n# setting the figure size.\nplt.figure(figsize=(10, 10), dpi=144, tight_layout=True)\n\n# multiple line plot\nnum=0\nfor column in df_y3.drop('x', axis=1):\n    num+=1\n \n    plt.subplot(3,3, num)\n    for v in df_y3.drop('x', axis=1):\n        plt.plot(df_y3['x'], df_y3[v], marker='', color='grey', linewidth=0.6, alpha=0.3)\n    plt.plot(df_y3['x'], df_y3[column], marker='', color=palette(num), linewidth=2.4, alpha=0.9, label=column)\n    plt.xlim(0,20)\n    plt.ylim(0,1200)\n    tiks = list(range(2000, 2020))\n    plt.xticks(np.arange(20), labels=tiks, fontsize=6, rotation=45.0)\n    if num in range(7) :\n        plt.tick_params(labelbottom='off')\n    if num not in [1,4,7] :\n        plt.tick_params(labelleft='off')\n    plt.title(column, loc='left', fontsize=12, fontweight=0, color=palette(num) )\n \n# general title\nplt.suptitle(\"Evolu\u00e7\u00e3o de gols no Brasileir\u00e3o por time.  2000 - 2019\", fontsize=13, fontweight=0, color='black', style='italic', y=1.02)\n \n# Axis title\nplt.text(0.5, 0.02, 'Time', ha='center', va='center')\nplt.text(0.06, 0.5, 'Note', ha='center', va='center', rotation='vertical')","562e396d":"# Eliminating unwanted columns and duplicated rows.\ndf1 = df.drop(df.iloc[:, 0:2], axis=1)\ndf1 = df1.drop(df1.iloc[:, 1:15], axis=1)\ndf1 = df1.drop_duplicates(subset = [\"Data\"])\ndf1.reset_index(inplace=True)\ndf1 = df1.set_index('Data')\ndf1.drop(axis=1, columns='index', inplace=True)\ndf1.index.astype(str)\n\n# Grouping date by month and excluding those where there were no games.\ndf1 = df1.groupby(pd.Grouper(freq=\"M\"))\ndf1 = df1.max()\ndf1.dropna(axis=0, how='any', inplace=True)\n\n# Expanding the dataframe for the smooth transitions of ranks with 5 steps.\nsteps = 5\ndf1 = df1.reset_index()\ndf1.index = df1.index * steps\nlast_idx = df1.index[-1] + 1\ndf_expanded = df1.reindex(range(last_idx))\ndf_expanded['Data'] = df_expanded['Data'].fillna(method='ffill')","da591da0":"def transform_color(color, amount = 0.5):\n\n    try:\n        c = mc.cnames[color]\n    except:\n        c = color\n        c = colorsys.rgb_to_hls(*mc.to_rgb(c))\n    return colorsys.hls_to_rgb(c[0], 1 - amount * (1 - c[1]), c[2])\n\nall_names = df_expanded.columns[1:].tolist()\nrandom_hex_colors = []\nfor i in range(len(all_names)):\n    random_hex_colors.append('#' + '%06X' % randint(0, 0xFFFFFF))\n\nrgb_colors = [transform_color(i, 1) for i in random_hex_colors]\nrgb_colors_opacity = [rgb_colors[x] + (0.5,) for x in range(len(rgb_colors))]\nrgb_colors_dark = [transform_color(i, 1.12) for i in random_hex_colors]\n\n# Defining figsize, resolution and other details.\nfig = plt.Figure(figsize=(6, 3), dpi=144, tight_layout=True)\nax = fig.add_subplot()\ndef nice_axes(ax):\n    plt.rcParams[\"axes.axisbelow\"] = \"line\"\n    ax.set_facecolor('.8')\n    ax.tick_params(labelsize=8, length=0)\n    ax.grid(True, axis='x', color='white')\n    ax.set_axisbelow(True)\n    [spine.set_visible(False) for spine in ax.spines.values()]","e2bfedaa":"# Init routine to clean the axes and avoit noise.\ndef init():\n    ax.clear()\n    nice_axes(ax)\n    ax.set_ylim(.2, 10.8)\n    ax.set_xlim(0, 1200)\n    ax.grid(False, axis='y')\n\n# Creating the animation frames.\ndef update(i):\n    for bar in ax.containers:\n        bar.remove()\n    df_e = df_expanded.copy()\n    idata = df_e.loc[i, 'Data']\n    coluna1 = df_e.columns[1]\n    id_data = df_e.loc[df_e[coluna1].notnull()]\n    valid_index = id_data.loc[id_data['Data'] == idata]\n    vi = valid_index.index\n    s = df_e.iloc[vi[0]]\n    df_e = df_e.iloc[:, ((-s[1:]).argsort() + 1).reindex(df_e.columns, fill_value=0)]\n    df_e = df_e.set_index('Data')\n    df_e = df_e[df_e.columns[:10]]\n    df_rank_e = df_e.rank(axis=1, method='first')\n    df_e = df_e.interpolate()\n    df_rank_e = df_rank_e.interpolate()        \n    labels = df_e.columns\n    y = df_rank_e.iloc[i]\n    width = df_e.iloc[i]\n    normal_colors = dict(zip(df_expanded.columns[1:], rgb_colors_opacity))\n    dark_colors = dict(zip(df_expanded.columns[1:], rgb_colors_dark))    \n    ax.barh(y=y, width=width, color=[normal_colors[x] for x in df_e.columns], edgecolor =([dark_colors[x] for x in df_e.columns]), tick_label=labels)\n    date_str = df_e.index[i].strftime('%B, %Y')\n    ax.set_title(f'Evolu\u00e7\u00e3o de N\u00ba de gols no Brasileir\u00e3o - {date_str}', fontsize='small')","48ced150":"anim = FuncAnimation(fig=fig, func=update, init_func=init, frames=len(df_expanded), interval=100, repeat=False)","e97086ee":"from IPython.display import HTML\n\nrc('animation', html='jshtml')\nrc\n\nHTML(anim.to_jshtml())","8bf86aed":" \n## Preparing the animated chart (bar_chart_race).\n\n### We need a dataframe with a secific format for this chart to work. Only the teams and index will be used.","9d60cb74":"### Importing the dataset.\n","d81be63a":"### Let's prepare a dataframe to analyse the evolution of the goals scored by each of the 9 best teams (highest scores in the period).","04bae4ef":"# Notebook for studies on data of the Campeonato Brasileiro (Brazilian Soccer Championship) in the period between 2000 a 2019.\n### By: Marcus Nudelman Trugilho - October 2020\n## Analysis of the goals for each team and at the end, an animated chart showing the goals evolution trough time.\n### Rmk: you will need the FFmpeg encoder installed in the system to be able to generate the video. It can be found in the address: https:\/\/www.ffmpeg.org\/download.html.","bf9b0666":"\n### To be able to analyse the number of goals of each team, let's create a column for each team. These columns will be used for the matrix and animated charts. We will also define the goals by cumulative sum.","509a1494":"### Let's find out when the home team won, creating a categorical column. The home team is the one in the 'Clube 1' column.","53ea303d":"### Now we create the matrix chart to show the goals evolution of each team isolated, but keeping the others in the background. (Rmk: the original code can be found at: https:\/\/python-graph-gallery.com\/125-small-multiples-for-line-chart\/)","ef3bd30e":"## Importing the necessary libraries.","79bf8d69":"### Adjusting teams names to avoid duplications of columns and defining the format of the dates.","e7f406f8":"### The column Rodadas (turns) has string values. We want to separate the numbers. In the process, we need to understand and change some values so we can define numbers to them. There was a time when the turns reached playoffs and we will set sequential turn numbers to them.","29ff85bb":"### Generating the HTML chart.","e74e68ef":"### Now we will use the bar_chart_race code, created by Ted Petrou, who made a great step by step article to explain how the chart works. The details can be found here: https:\/\/medium.com\/dunder-data\/create-a-bar-chart-race-animation-in-python-with-matplotlib-477ed1590096","ca8de99f":"### Creating the animation sequence."}}