{"cell_type":{"9b28a3ac":"code","89fea4e2":"code","cafeb839":"code","af8d1e31":"code","6a49b541":"code","a6c3997b":"code","d9b9f282":"code","484928c6":"code","3deb9c41":"code","78a324a8":"code","95f79eee":"code","42ff4efd":"code","245fbd80":"code","8c50bf83":"code","4db280a9":"code","681348f8":"code","b91a4415":"code","feed0ae8":"code","894969eb":"code","ca511c4f":"markdown","bfebbe02":"markdown","8e2518d8":"markdown","1d49ca74":"markdown","40dd7880":"markdown","25c83c5e":"markdown","c7f816e0":"markdown","db2b08a0":"markdown","25da1c97":"markdown","38c0706e":"markdown","34c2db9b":"markdown","cdcc1176":"markdown","7b8aeedc":"markdown","f12709ab":"markdown","e968b5c1":"markdown","082471d7":"markdown","cd5cc2be":"markdown","b40aa146":"markdown","0c3aae15":"markdown"},"source":{"9b28a3ac":"# Load the necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Load in the data\nepisodes = pd.read_csv(r'\/kaggle\/input\/friends-episode-data\/friends_episodes.csv')\nimdb = pd.read_csv(r'\/kaggle\/input\/friends-episode-data\/friends_imdb.csv')","89fea4e2":"# View the first 5 rows of the `episodes` dataframe\nepisodes.head()","cafeb839":"# View the first 5 rows of the `imdb` dataframe\nimdb.head()","af8d1e31":"# Print out the number of rows in each dataframe\nprint('episodes: {}'.format(len(episodes.index)))\nprint('imdb: {}'.format(len(imdb.index)))","6a49b541":"# Count the number of episodes in each season in the `episodes` dataframe, then sort by the season\nprint('Episodes\\n {}'.format(episodes.value_counts('season').sort_index()))\n\nprint('')\n# Count the number of episodes in each season in the `imdb` dataframe, then sort by the season\nprint('IMDB\\n {}'.format(imdb.value_counts('season').sort_index()))","a6c3997b":"# Print all rows for season 10 in the episodes dataframe\nepisodes[episodes['season']==10].head(20)","d9b9f282":"# Remove episode 236 from the episodes dataframe, then print out the last 5 episodes in season 10 as well as the number of rows in the dataframe to verify that it worked\nepisodes = episodes[episodes['episode_num_overall'] != 236]\n\nprint('episodes: {}'.format(len(episodes.index)))\nepisodes[episodes['season']==10].tail()","484928c6":"# Merge the two dataframes\ndf = pd.merge(episodes, imdb, how = 'left', left_on=['season', 'episode_num_in_season'], right_on=['season', 'episode_num'])\n\n# Remove columns that we don't need\ndf.drop(['episode_num_in_season', 'title_x', 'episode_num_overall', 'title_y', 'prod_code', 'original_air_date_y'], axis=1, inplace=True)\n\n# Clean up the column names\ndf.rename(columns={'original_air_date_x':'air_date'},inplace=True)\n\n# Order the columns.  I like to do this because it is easier to interpret the data when looking at print outs of the first few rows\ndf = df[['season', 'episode_num', 'directed_by', 'written_by', 'air_date', 'us_viewers', 'imdb_rating', 'total_votes', 'desc']]\n\n# Print the first 5 rows to make sure that the merge worked and that all the information is in df\ndf.head()","3deb9c41":"# Create a list of all the main characters\ncharacters = ['Monica', 'Rachel', 'Phoebe', 'Ross', 'Joey', 'Chandler']\n\n# Using a loop, create a column for each character.  1 indicates the character is mentioned in the decription, 0 indicates they are not mentioned\nfor i in characters:\n    df[i] = df['desc'].str.contains(i, case=False).astype(int)\n    \n# Remove the desc column, as it is no longer necessary\ndf.drop('desc', axis=1, inplace= True)\n\n# Print first 5 rows to make sure we got what we wanted\ndf.head()","78a324a8":"# Create a new dataframe for character importance\nchar_importance = pd.melt(df, id_vars=['season', 'us_viewers', 'imdb_rating'], value_vars=characters, var_name='character', value_name='in_episode')\n\n# Filtered `char_importance` to episodes that the characters appears in\nchar_importance = char_importance[char_importance['in_episode'] == 1]\nchar_importance.head()","95f79eee":"# Create Plot\nplt.figure(figsize=(10,5)) \nsns.countplot(data=char_importance, y='character')\nplt.suptitle('\\'Friends\\' Characters Importance', y = 1, fontsize=15)\nplt.title('*Based on Appearance in Episode Description', y=.999, fontsize=10)","42ff4efd":"# Create plot\nplt.figure(figsize=(15,10)) \nsns.countplot(data=char_importance, y='season', hue='character')\nplt.suptitle('\\'Friends\\' Characters Importance By Season', y = 1, fontsize=15)\nplt.title('*Based on Appearance in Episode Description', y=1.09, fontsize=10)\nplt.xlabel('Appearances')\nplt.ylabel('Season')\nplt.legend(title= 'Characters')","245fbd80":"# Create Average Views for each Character overall \navg_char_views = char_importance[['character', 'imdb_rating']].groupby(['character']).mean().reset_index()\n\n# Plot \nplt.figure(figsize=(10,10)) \nsns.barplot(x='imdb_rating', y='character', data=avg_char_views.sort_values('imdb_rating', ascending=False))\nplt.suptitle('\\'Friends\\' Character Average IMDB Rating', fontsize=20)\nplt.title('Entire Series - Based on IMDB Ratings of Episodes About Character', y=1.05, fontsize=10)\nplt.xlabel('Average IMDB Rating')\nplt.ylabel('Character')\nplt.xlim([8.3, 8.5])","8c50bf83":"# Prep data to be plotted\ndf['us_viewers'] = df['us_viewers'].astype(int)\ndf['written_by'] = df['written_by'].str.split('Teleplay', expand=True)[0]\ndf['written_by'] = df['written_by'].str.replace('Story by: ', '')\n\n# writers dataframe. Group by the writers across entire series\nwriters_df = df[['written_by', 'us_viewers','imdb_rating']].groupby(['written_by']).mean().reset_index()\n\n# How many episodes were done by each writing group\nplt.figure(figsize=(15,12)) \nsns.countplot(data=df, y='written_by', order = df['written_by'].value_counts().index)\nplt.suptitle('How Many Episodes of \\'Friends\\' Were Done by Each Writer? ', y = 1, fontsize=15)\nplt.xlabel('Episodes')\nplt.ylabel('Writing Team')","4db280a9":"# Plotting for each season individually, because one plot for all of them is unclear and difficult to read.\nfor i in df['season'].unique():\n    plt.figure(figsize=(10,5)) \n    temp = df[df['season']==i]\n    sns.countplot(data=temp, y='written_by', order = temp['written_by'].value_counts().index)\n    plt.suptitle('How Many Episodes of \\'Friends\\' Were Done by Each Writer in Season {}?'.format(i), fontsize=15)\n    plt.xlabel('Episodes')\n    plt.ylabel('Writing Teams')","681348f8":"# Create Plot\nplt.figure(figsize=(15,12)) \nsns.barplot(x='us_viewers', y='written_by', data=writers_df.sort_values('us_viewers', ascending=False))\nplt.suptitle('\\'Friends\\' Writer Team Average Number of Views per Episode', fontsize=20)\nplt.title('Entire Series', y=1.05, fontsize=10)\nplt.xlabel('Average Viewers per Episode \\n(In Millions)')\nplt.ylabel('Writers')","b91a4415":"# Create Plot\nplt.figure(figsize=(10,7)) \nsns.countplot(data=df, y = 'directed_by', order = df['directed_by'].value_counts().index)\nplt.suptitle('How many Episodes of \\'Friends\\' Was Each Directing Team Responsible For?', y = 1, fontsize=15)","feed0ae8":"# writers dataframe. Group by the writers across entire series\ndirected_df = df[['directed_by', 'us_viewers','imdb_rating']].groupby(['directed_by']).mean().reset_index()\n\n# plot\nplt.figure(figsize=(15,12)) \nsns.barplot(x='imdb_rating', y='directed_by', data=directed_df.sort_values('imdb_rating', ascending=False))\nplt.suptitle('\\'Friends\\' Each Directing Team\\'s Average IMDB Rating Overall', fontsize=20)\nplt.title('Entire Series', y=1.05, fontsize=10)\nplt.xlabel('Average IMDB Rating')\nplt.ylabel('Writers')","894969eb":"# Create plots\nfor i in df['season'].unique():\n    plt.figure(figsize=(10,5)) \n    temp = df[df['season']==i]\n    sns.countplot(data=temp, y='directed_by', order = temp['directed_by'].value_counts().index)\n    plt.suptitle('How Many Episodes of \\'Friends\\' Were Done by Each Directing Team in Season {}?'.format(i), fontsize=15)\n    plt.xlabel('Episodes')\n    plt.ylabel('Directing Team')","ca511c4f":"### 4.6 Writer Team Average Number of Views Per Episode","bfebbe02":"### 4.2 How Important Was Each Character In Each Season","8e2518d8":"## SECTION 3: Load and Prep the Data\n*Finally*, some code.  Before I get started, I want to point out that cleaning and prepping data is always a little bit tedious, and this is no exception.  As you will see, the `episodes` dataframe has an extra row where the final episode of the show is listed twice.  I went through the process of figuring out why there was extra row and then removed it before combining the data into a single dataframe. <br><br>\n\nIn this section I will:\n1. Load all the libraries and functions that I will be using in the rest of the notebook.  \n2. Load the two CSVs that contain the data.\n>* `episodes` is a dataframe that contains the data from the `friends_episodes.csv` file.\n>* `imdb` is a dataframe that contains the data from the `friends_imdb.csv` file.\n3. Modify the data so that I can combine these two datasets into one, which will be used in the rest of this notebook.\n>* There are a few ways that this could be done.  I briefly explain why I am doing this the way that I am doing below.\n>* Once the data exists in a single dataframe, I will remove the columns that will not be helpful moving forward.\n","1d49ca74":"### 4.8 Each Directing Team's Average IMDB Rating Overall","40dd7880":"As shown above, the `episodes` dataframe has one more row than the `imdb` dataframe.  This means that either `imdb` is missing an episode or `episodes` contains a duplicate episode. Either way, I will remove that row when combing the dataframes, but for the sake of throughness, I am going to figure out which season has the extra episode.  To do this I will count the number of episodes in each season in each dataframe.","25c83c5e":"### 4.5 How Many Episodes Were Done By Each Writing Group In Each Season?","c7f816e0":"I want to combine these two dataframes together into one.  But before I do that, I want to check that they have the same number of rows, as each row should represent an episode.","db2b08a0":"## SECTION 2: Findings\n\nI've listed the outline for this section for as well as a brief description of what I found in each of those subsections.  If you would like to see the visualizations, they are all in section 4 of this notebook as well as the code to generate them.\n\n* **4.1** How Important Was Each Character Over The Course Of The Series\n>  Using my method of extracting character names from the episode description, it appears that Rachel is the most important character to the show overall.  Ross, Chandler, and Monica tie for second place, followed by Joey, and Phoebe was robbed.  Frankly, I think that Joey should have had a greater presence on the show.  That guy was hilarious. How you doin\u2019? \n* **4.2** How Important Was Each Character In Each Season\n> This section is a bit harder to read, but we can see that the importance of each character changes over the series and varies season to season.  In the first season, Phoebe is mentioned in roughly half of the episodes and all other characters are mentioned far more frequently.  I wonder if this means that the writers were not sure that they would keep her character, or if she was just much more important to them in future seasons.  Additionally, Chandler appears to be extremely important in seasons 4 and 9.  Rachel, who I previously said was the most important character, is only mentioned the most times in one season, season 7.  \n* **4.3** Each Character's Average IMDB Rating Per Episode\n> An evaluation of each character\u2019s overall average IMDB rating shows that their importance and rating seem to be closely related.  Again, Rachel comes in first place, followed by Ross (hard eye roll).  There is a bit of variation here in that none of the characters tie, but Phoebe still comes in last.   One note about this measurement \u2013 all the characters scored pretty closely.  The x axis on this visualization set from 8.3 to 8.5 to demonstrate the differences between all the characters.  \n* **4.4** How Many Episodes of 'Friends' Were Written by Each Writing Team?\n>  I\u2019m not sure if this is standard for a TV show, but I am genuinely surprised at the number of writers that worked on this show.   While looking at this, it is apparent that some writers were involved more often than others, and about 20 of the writing teams only wrote one show in the series.  \n* **4.5** How Many Episodes Were Done By Each Writing Group In Each Season?\n>  A season by season break down of the writers paints a similar story \u2013 some writers wrote more than others.  At most, a writing team worked on 4 episodes in a single season, and roughly half of the teams only wrote one episode per season.\n* **4.6** Writer Team Average Number of Views Per Episode\n> Looking at the series overall, every writing team saw more than 1.5 million views.  However, some teams had an average number of views far greater than others. The writing team with the most views saw nearly double the number of views as the writing team with the fewest views.\n* **4.7** How Many Episodes Were Each Directing Team Responsible For?\n> There were no where near as many directors on \u2018Friends\u2019 as there were writers, but there were still more than I expected.  And again, it looks like most of the directors only worked on a few of the episodes, while Gary Halvorson and Kevin S. Bright both worked on over 50 episodes. \n* **4.8** Each Directing Team's Average IMDB Rating Overall\n> Overall, the show did very well and received great ratings.  On average, every directing team scored about an 8 on IMDb.  Joe Regalbuto is an outlier and looks to have scored almost a 9.  Kevin S. Bright who worked on the second most episodes, also received the second highest rating according to IMDB. \n* **4.9** How Many Episodes Did Each Directing Team Work On In Each Season\n> It looks like in most seasons, a few directors did the lion\u2019s share of the work, and other directors only worked on a few episodes.  David Schwimmer, who played Ross is listed as a director who worked on multiple seasons of the show.  In season 7, he worked on 4 episodes and interestingly, in that season Ross was rated at the second most important character. ","25da1c97":"Now that the data is in a single dataframe that contains only the columns of interest, it's time to create some additional columns.  I'm specifically interested in is finding out which characters are listed in the description.  While my knowledge of 'Friends' tells me that all the main characters appeared in every or almost every episode, they are not all listed in each of the descriptions.  I am going to interpret this to mean that the episode focuses on the characters in the description.  ","38c0706e":"# Welcome to my Analysis of the show 'Friends'!\n## SECTION 1: Introduction\n\nIn this notebook I'm going to explore a dataset that I found on [Kaggle.com](www.kaggle.com) containing information about the show \u2018Friends\u2019.  A big thank you to Bill Cruise for posting the data.  If you are interested in checking the data out for yourself, you can find it [here](https:\/\/www.kaggle.com\/bcruise\/friends-episode-data). <br> <br>\n\nThis notebook is just for fun. Just like all other 90s kids, I love \u2018Friends\u2019.  Before I dive into the data, I'm going to provide an overview of my findings. After that I will also provide a step-by-step guide to explain what I am doing and why I am doing it.  Please keep in mind that this notebook is not intended to be an all-inclusive guide to this dataset.  There is a lot more that you could do that I decided against in the interest of time.  Furthermore, I am at a best a data analyst and I am definitely **not** a data scientist, so this is a pretty high-level look at the data.  If you see a mistake or if you have a question, please let me know by leaving a comment here or reach out to me on twitter at [@Ryan_Uhlmeyer](https:\/\/twitter.com\/ryan_uhlmeyer). I'm happy to chat! Tweet nerdy with me!<br><br>\n\nOkay, so now that I have that boring stuff out of the way, let me walk you through what this notebook is and how to read it. <br><br> \n\nThis notebook examines data about the hit 90s TV show 'Friends'.  Later on, I will get into what is in the data, but for now just keep in mind that I am going to be exploring things like who wrote and directed each episode and how well those episodes did according to IMDB.  One of the columns is a very brief description of the episode.  I'm sure that there is a lot of really cool stuff that could be done using some Natural Language Processing (NPL) techniques, but I am not comfortable enough with those tools at this point to employ them.  I *am* going to use that information though.  I am going to extract the names of the characters that are mentioned, and make the assumption that the episode focuses on those characters (despite the fact that Ross obviously thinks the world revolves around him no matter what). <br><br>\n### Notebook Layout: \n#### 1. Introduction (That's this part!)<br>\n>A brief explanation of the purpose and scope of this project.\n#### 2. Findings\n>Not everyone is here for the code, which is a total bummer because coding is fun!  But I get it, we all have our interest and code isn't for everyone.  If you are purely interested in what I have to say about 'Friends', this is the section for you.  I will reference some visualizations and other fun things that are further down in the notebook.  I have done my best to label these clearly, but to avoid redundancy, I have not produced a second set of visualizations for this section.  <br>\n\n>To keep things simple, I am only going to use bar graphs in this notebook.  The notebook started to get long, so I decided not to do any sort of time series analysis nor any correlation analysis.  If you\u2019re interested in that, feel free to take a shot at it yourself.\n#### 3. Load and prep the data for analysis\n>I've done a quick overview of how I prepare the data.  The data provided came as two CSV files, so I touch on how I combine them into one dataframe for analysis.  If you read this section, I assume that if you are interested in the code and that you have some level of familiarity with python.  I will provide a step-by-step walk through, but I am not going to get into the weeds about what the code is doing.\n#### 4. Observations\nThis is where I produce all the findings that are discussed in section 2.  There is quite a bit code here, and all the visualizations.  This section starts with a more detailed outline, so feel free to read that.<br><br>\n\nThat\u2019s it!  Initially I planned to run this data through some machine learning to see if I could predict the IMDB ratings, but the model was wildly inaccurate, so I decided not to include it.  I will try to do some modeling in future notebooks, but this one is just some light visualizations.  I hope you enjoy it!","34c2db9b":"As shown above, the `episodes` dataframe has one extra episode.  Below is a print out all the rows for season 10 so that we can see what's going on.","cdcc1176":"### 4.4 How Many Episodes of 'Friends' Were Written by Each Writing Team?","7b8aeedc":"Now that we have the same number of episodes in each season, it is time to combine the two dataframes.  As previously stated, there are a few ways to do this.  I have chosen to merge the two dataframes on the season and episode number.  Theoretically, we could also combine them using only the title of the episodes, but I have decided against this in case there are any typos or differences in the titles.  Alternatively, if I assume that the episodes appear in the same order in each dataframe, I could also combine them on the index.  However, I have not done any sort of inspection to make sure that this is the case, so I have decided against this method as well. <br>\n\nOnce the data is in one dataframe, I remove the columns that won't be of any interest, and then clean up the headers of the columns that I am keeping.","f12709ab":"### 4.7 How Many Episodes Were Each Directing Team Responsible For?","e968b5c1":"### 4.3 Each Character's Average IMDB Rating Per Episode","082471d7":"It looks like the episode titled 'The Last One' is included twice, and has two different values in the `episode_num_overall` and `prod_code` columns.  Since I will not be using either of those columns, I will remove the final episode.  This should not have any impact on the rest of the analysis.","cd5cc2be":"# SECTION 4: Observations\n\nNow that the data is prepped, it is time to start making some observations.<br>\n\nHere is the order I'm going to look at things in.  I've labeled the sections to make things easier to find.\n* **4.1** How Important Was Each Character Over The Course Of The Series\n* **4.2** How Important Was Each Character In Each Season\n* **4.3** Each Character's Average IMDB Rating Per Episode\n* **4.4** How Many Episodes of 'Friends' Were Written by Each Writing Team?\n* **4.5** How Many Episodes Were Done By Each Writing Group In Each Season?\n* **4.6** Writer Team Average Number of Views Per Episode\n* **4.7** How Many Episodes Were Each Directing Team Responsible For?\n* **4.8** Each Directing Team's Average IMDB Rating Overall\n* **4.9** How Many Episodes Did Each Directing Team Work On In Each Season","b40aa146":"### 4.1  How Important Was Each Character Over The Course Of The Series","0c3aae15":"### 4.9 How Many Episodes Did Each Directing Team Work On In Each Season"}}