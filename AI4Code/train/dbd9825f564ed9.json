{"cell_type":{"3a331b07":"code","babbaae2":"code","4498e741":"code","bf430f6e":"code","af159384":"code","3e8360b5":"code","fb55b269":"code","15d2567e":"code","7ce0e208":"code","7074446b":"code","c3e3ce71":"code","fadea51e":"code","65668295":"code","711cb8a4":"code","ecf4cffb":"code","6251522f":"code","27f35519":"code","1843dbf4":"markdown","b014d52d":"markdown","88822d40":"markdown"},"source":{"3a331b07":"# count number of data samples\nimport os\ni = 0\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/speechdata'):\n    for filename in filenames:\n        i += 1\n#         print(os.path.join(dirname, filename))\nprint(i)","babbaae2":"!apt-get install -y libsndfile-dev","4498e741":"import os, numpy as np\nnp.random.seed(13)\nimport librosa\nfrom sklearn.model_selection import train_test_split","bf430f6e":"import math\ndef get_mfcc(filename):\n    y, sr = librosa.load(filename) # read .wav file\n    hop_length = math.floor(sr*0.010) # 10ms hop\n    win_length = math.floor(sr*0.025) # 25ms frame\n    # mfcc is 13 x T matrix\n    mfcc = librosa.feature.mfcc(\n        y, sr, n_mfcc=13, n_fft=1024,\n        hop_length=hop_length, win_length=win_length)\n    # substract mean from mfcc --> normalize mfcc\n    mfcc = mfcc - np.mean(mfcc, axis=1).reshape((-1,1)) \n    # delta feature 1st order and 2nd order\n    delta1 = librosa.feature.delta(mfcc, order=1)\n    delta2 = librosa.feature.delta(mfcc, order=2)\n    # X is 39 x T\n    X = np.concatenate([mfcc, delta1, delta2], axis=0) # O^r\n    # return T x 39 (transpose of X)\n    return X.T # hmmlearn use T x N matrix\n","af159384":"class_names = ['khong', 'nhieu', 'thoigian', 'nguoi', 'tien']\nn_states = [9, 12, 19, 12, 12]\n# build data\npath = '\/kaggle\/input\/speechdata'\nX, y = {}, {}\nfor idx, cln in enumerate(class_names):\n    files = [os.path.join(path, cln, f) for f in os.listdir(os.path.join(path, cln))]\n    mfcc = [get_mfcc(file) for file in files]\n    label = [idx for i in range(len(mfcc))]\n    X.update( {cln: mfcc} )\n    y.update( {cln: label} )\nprint(X.keys(), y.keys())","3e8360b5":"# split data to train set and test set\nX_train, y_train = {}, {}\nX_test, y_test = {}, {}\nfor key in class_names:\n    data_train, data_test, label_train, label_test = train_test_split(X[key], y[key], test_size = 0.2, random_state=13, shuffle=None)\n    X_train.update( {key: data_train} )\n    y_train.update( {key: label_train} )\n    X_test.update( {key: data_test} )\n    y_test.update( {key: label_test} )\nprint(y_test)","fb55b269":"for key in class_names:\n    print(f'{key} --> x_train: {len(X_train[key])}, y_train: {len(y_train[key])}, x_test: {len(X_test[key])}, y_test: {len(y_test[key])}')","15d2567e":"import hmmlearn.hmm as hmm\nfrom sklearn.cluster import KMeans","7ce0e208":"# train model GaussianHMM\nmodel = {}\nfor idx, key in enumerate(class_names):\n    start_prob = np.full(n_states[idx], 0.0)\n    start_prob[0] = 1.0\n    trans_matrix = np.full((n_states[idx], n_states[idx]), 0.0)\n    np.fill_diagonal(trans_matrix, 0.5)\n    np.fill_diagonal(trans_matrix[0:, 1:], 0.4)\n    np.fill_diagonal(trans_matrix[0:, 2:], 0.1)\n    trans_matrix[-1,-1] = 1.0\n    \n    model[key] = hmm.GaussianHMM(\n        n_components=n_states[idx], \n        verbose=True, \n        n_iter=300, \n        startprob_prior=start_prob, \n        transmat_prior=trans_matrix,\n        params='mc',\n        init_params='stmc',\n        random_state=0\n    )\n\n    model[key].fit(X=np.vstack(X_train[key]), lengths=[x.shape[0] for x in X_train[key]])","7074446b":"print(model)","c3e3ce71":"import pickle\n\n# save model\nfor key in class_names:\n    name = f'model_{key}.pkl'\n    pickle.dump(model[key], open(name, 'wb'))","fadea51e":"import pickle, os\nimport numpy as np\n\nfrom sklearn.metrics import classification_report","65668295":"#load saved models\nmodel = {}\nfor key in class_names:\n     name = f'\/kaggle\/input\/models\/model_{key}.pkl'\n     with open(name, 'rb') as file:\n         model[key] = pickle.load(file)","711cb8a4":"def predict(mfcc):\n    scores = []\n    for key in class_names:\n        logit = model[key].score(mfcc)\n        scores.append(logit)\n\n    pred = np.argmax(scores)\n    return pred","ecf4cffb":"# validating GaussianHMM\ny_true = []\ny_pred = []\nfor key in class_names:\n    print(key)\n    print(y_test[key])\n    for data, target in zip(X_test[key], y_test[key]):\n        pred = predict(data)\n        \n        y_pred.append(pred)\n        y_true.append(target)\nprint(y_true)\nprint(y_pred)","6251522f":"# report\ntarget_names = ['khong', 'nhieu', 'thoigian', 'nguoi', 'tien']\nreport = classification_report(y_true, y_pred, target_names=target_names)\nprint(report)","27f35519":"record_mfcc = get_mfcc('\/kaggle\/input\/datatest\/thoigian\/thoigian\/thoigian_001.wav')\nscores = [model[cname].score(record_mfcc) for cname in class_names]\npred = np.argmax(scores)\nprint(class_names[pred])","1843dbf4":"# train HMM","b014d52d":"# Validate","88822d40":"# Data set up"}}