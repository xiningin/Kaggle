{"cell_type":{"1e718db3":"code","896dcbf2":"code","ee832916":"code","a8a60840":"code","246c3bde":"code","c3ae099c":"code","72aeb38a":"code","35c2cc62":"code","30da9ff8":"code","66a492b0":"code","ab115fb2":"markdown"},"source":{"1e718db3":"import math\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt","896dcbf2":"def gkernel(l=3, sig=2):\n    \"\"\"\\\n    Gaussian Kernel Creator via given length and sigma\n    \"\"\"\n\n    ax = np.linspace(-(l - 1) \/ 2., (l - 1) \/ 2., l)\n    xx, yy = np.meshgrid(ax, ax)\n\n    kernel = np.exp(-0.5 * (np.square(xx) + np.square(yy)) \/ np.square(sig))\n\n    return kernel \/ np.sum(kernel)","ee832916":"img = cv2.imread('..\/input\/drone-dataset-uav\/drone_dataset_yolo\/dataset_txt\/0033.jpg') # Reading Image\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # Converting Image to grayscale\ng_kernel = gkernel(3,2) # Create gaussian kernel with 3x3(odd) size and sigma equals to 2\nprint(\"Gaussian Filter: \",g_kernel) # show the kernel array\ndst = cv2.filter2D(gray,-1,g_kernel) #convolve kernel with image\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # convert BGR(opencv format) to RGB format\n#dst = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB) # convert BGR(opencv format) to RGB format","a8a60840":"plt.figure(figsize=(18, 18))\nplt.subplot(131),plt.imshow(img),plt.title('Original Image') # visualize and give title\nplt.subplot(132),plt.imshow(gray),plt.title('GrayScaled Image')\nplt.subplot(133),plt.imshow(dst),plt.title('Smoothed Image with  Gaussian Filter (sigma=2,3x3 Kernel)')\nplt.show()","246c3bde":"def gaussianKernel2(size, sigma, twoDimensional=True):\n    \"\"\"\n    Creates a gaussian kernel with given sigma and size, 3rd argument is for choose the kernel as 1d or 2d\n    \"\"\"\n    if twoDimensional:\n        kernel = np.fromfunction(lambda x, y: (1\/(2*math.pi*sigma**2)) * math.e ** ((-1*((x-(size-1)\/2)**2+(y-(size-1)\/2)**2))\/(2*sigma**2)), (size, size))\n    else:\n        kernel = np.fromfunction(lambda x: math.e ** ((-1*(x-(size-1)\/2)**2) \/ (2*sigma**2)), (size,))\n    return kernel \/ np.sum(kernel)","c3ae099c":"img = cv2.imread('..\/input\/drone-dataset-uav\/drone_dataset_yolo\/dataset_txt\/0033.jpg') # Reading Image\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\ng_kernel_x = gaussianKernel2(3,1,False) # create a one dim gauss filter with 3 component and sigma equals to 1\nprint('One Dimensional Kernel(x): ',g_kernel_x) # show 1D filter(x)\ng_kernel_y = g_kernel_x.reshape(-1,1) # take transpose of above kernel and obtain y filter\nprint('Transpose Of One Dimensional Kernel(y): ', g_kernel_y) # show 1D filter(y)\ndst = cv2.filter2D(gray,-1,g_kernel_x) #convolve first 1D filter --- NOTE: cv2.filter2D method can work with 1D arrays too\ndst = cv2.filter2D(dst,-1,g_kernel_y) #convolve second 1D filter --- NOTE: cv2.filter2D method can work with 1D arrays too\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # Convert opencv format to general rgb format","72aeb38a":"plt.figure(figsize=(18, 18))\nplt.subplot(131),plt.imshow(img),plt.title('Original') # visualize and give title\nplt.subplot(132),plt.imshow(gray),plt.title('Grayscaled Image')\nplt.subplot(133),plt.imshow(dst),plt.title('Smoothed with  Gaussian Filter (sigma=1,via One Dim Kernels)') # visualize and give title\nplt.show()","35c2cc62":"img = np.zeros((41,41))\nimg[21,21] = 1\ng_kernel = gaussianKernel2(3,1,True)\ng_kernel_x = gaussianKernel2(3,1,False) # create a one dim gauss filter with 3 component and sigma equals to 1\nprint('One Dimensional Kernel(x): ',g_kernel_x) # show 1D filter(x)\ng_kernel_y = g_kernel_x.reshape(-1,1) # take transpose of above kernel and obtain y filter\nprint('Transpose Of One Dimensional Kernel(y): ', g_kernel_y) # show 1D filter(y)\ndst = cv2.filter2D(img,-1,g_kernel_x) #convolve first 1D filter --- NOTE: cv2.filter2D method can work with 1D arrays too\ndst2 = cv2.filter2D(dst,-1,g_kernel_y) #convolve second 1D filter --- NOTE: cv2.filter2D method can work with 1D arrays too\ndst3 = cv2.filter2D(img,-1,g_kernel)  #convolve with 2D filter","30da9ff8":"plt.figure(figsize=(18, 18))\nplt.subplot(141),plt.imshow(img),plt.title('Original') # visualize and give title\nplt.subplot(142),plt.imshow(dst),plt.title('1D Filtered for X')\nplt.subplot(143),plt.imshow(dst2),plt.title('1D filtered for Y')\nplt.subplot(144),plt.imshow(dst3),plt.title('2D filtered ')\nplt.show()","66a492b0":"from mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\n\nx=np.linspace(-10,10, num=3)\ny=np.linspace(-10,10, num=3)\n\nx, y = np.meshgrid(x, y)\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(x,y,g_kernel, cmap=cm.jet)\nplt.show()","ab115fb2":"**Gaussian kernel function**"}}