{"cell_type":{"835b6e3d":"code","d2dcf79d":"code","b84f45b6":"code","4d1423a6":"code","083b2ed5":"code","7d34d652":"code","48d94741":"code","82c25994":"code","a500cb2f":"code","21ff963b":"code","e54eb217":"code","10badab6":"code","51dbc096":"code","0e85edb1":"code","1c3c758a":"code","8562b027":"code","46eff731":"code","45ef46f0":"code","5b3585cf":"code","f5e1f5f0":"code","e8ef7968":"code","b9b3d8ff":"code","60184ff8":"code","6f79efca":"code","49c6cdf9":"code","8478dd76":"code","4b1462d5":"code","3d32e54c":"code","947b62d8":"code","6201b905":"code","82e5a8a2":"code","9126c24f":"code","0d2b5129":"code","e8d4862f":"code","63539239":"markdown","ffed6b06":"markdown","cbf098da":"markdown","08258800":"markdown","e03b7ae7":"markdown","d687bf11":"markdown","923c692a":"markdown","cd91da65":"markdown","8a998ba0":"markdown","04529da2":"markdown","0c526b73":"markdown","ecce1a66":"markdown","fb198d7f":"markdown"},"source":{"835b6e3d":"# Import EDA and plotting libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\n# Models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Model evaluations\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.metrics import precision_score,recall_score,f1_score\nfrom sklearn.metrics import plot_roc_curve","d2dcf79d":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ndf=pd.read_csv('\/kaggle\/input\/telecom-users-dataset\/telecom_users.csv')\ndf.shape","b84f45b6":"#dropping unwanted columns\ndf.drop(['Unnamed: 0','customerID'],axis=1,inplace=True)\n\n# Checking Features types\ndf.info()","4d1423a6":"# Checking for NA values in dataset\ndf.isna().sum()\n","083b2ed5":"df['TotalCharges'].astype(str).astype(float)","7d34d652":"# Finding empty values\n(df['TotalCharges']==' ').sum()","48d94741":"# Replacing the values\ndf['TotalCharges']=df['TotalCharges'].replace(\" \",0)\n\n# Converting Dtype\ndf['TotalCharges']=df['TotalCharges'].astype(str).astype(float)\n\n# Splitting the data set into Churn Yes and No\nChurn_yes=df[df['Churn']=='Yes']\nChurn_no=df[df['Churn']=='No']\n","82c25994":"fig,ax=plt.subplots(2,2,figsize=(20, 15))\nfig.tight_layout(pad=3)\n\n\nsns.boxplot(ax=ax[0,0],y='MonthlyCharges',x='Churn',data=df,hue='Churn')\nsns.boxplot(ax=ax[0,1],y='tenure',x='Churn',data=df,hue='Churn');\n\n#Churn frequency for diff payment methods\npd.crosstab(df.Churn,df.PaymentMethod).plot(ax=ax[1,0],kind='bar')\n# Add some attributes to it\nax[1,0].tick_params(labelrotation=0)\n\n#Churn frequency for diff Contracts types\npd.crosstab(df.Churn,df.Contract).plot(ax=ax[1,1],kind='bar')\n# Add some attributes to it\nax[1,1].tick_params(labelrotation=0)","a500cb2f":"fig,ax=plt.subplots(2,2,figsize=(10, 7))\nfig.tight_layout(pad=3)\n\nsns.histplot(ax=ax[0,0],x='InternetService',data=df,hue='Churn', multiple=\"dodge\",shrink=0.8)\nsns.histplot(ax=ax[0,1],x='OnlineSecurity',data=df,hue='Churn', multiple=\"dodge\",shrink=0.9)\nsns.histplot(ax=ax[1,0],x='OnlineBackup',data=df,hue='Churn', multiple=\"dodge\",shrink=0.8)\nsns.histplot(ax=ax[1,1],x='DeviceProtection',data=df,hue='Churn', multiple=\"dodge\",shrink=0.8);","21ff963b":"fig,ax=plt.subplots(2,2,figsize=(10, 7))\nfig.tight_layout(pad=3)\n\nsns.histplot(ax=ax[0,0],x='TechSupport',data=df,hue='Churn', multiple=\"dodge\",shrink=0.8)\nsns.histplot(ax=ax[0,1],x='StreamingTV',data=df,hue='Churn', multiple=\"dodge\",shrink=0.8)\nsns.histplot(ax=ax[1,0],x='StreamingMovies',data=df,hue='Churn', multiple=\"dodge\",shrink=0.8)\nsns.histplot(ax=ax[1,1],x='MultipleLines',data=df,hue='Churn', multiple=\"dodge\",shrink=0.8);\n","e54eb217":"categorical_columns = ['gender', 'SeniorCitizen', 'Partner', 'Dependents',\n       'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity',\n       'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',\n       'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod',\n       'Churn']\n\nfor i in df[categorical_columns]:\n    df[i] = pd.Categorical(df[i]).codes\n\ndf","10badab6":"# finding the correaltion between diff features\ncorr_matrix = df.corr()\nmask = np.zeros_like(corr_matrix, dtype=bool)\nmask[np.triu_indices_from(mask)] = True\nplt.figure(figsize=(15, 10))\nsns.heatmap(corr_matrix, vmin=-1,\n            annot=True, \n            linewidths=0.5, \n            fmt= \".2f\", \n            cmap=\"YlGnBu\",mask=mask);","51dbc096":"# Splitting the datasets\nX=df.drop('Churn',axis=1)\n\n#Target Variable\ny=df['Churn']","0e85edb1":"# Split data into train & test set\n\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)","1c3c758a":"# Put models in a dictionary\nmodels = {\"KNN\": KNeighborsClassifier(),\n          \"Logistic Regression\": LogisticRegression(), \n          \"Random Forest\": RandomForestClassifier()}\n\n# Create function to fit and score models\ndef fit_and_score(models, X_train, X_test, y_train, y_test):\n\n    # Make a list to keep model scores\n    model_scores = {}\n    # Loop through models\n    for name, model in models.items():\n        # Fit the model to the data\n        model.fit(X_train, y_train)\n        # Evaluate the model and append its score to model_scores\n        model_scores[name] = model.score(X_test, y_test)\n    return model_scores","8562b027":"model_scores=fit_and_score(models, X_train, X_test, y_train, y_test)\nmodel_scores","46eff731":"model_compare=pd.DataFrame(model_scores,index=[\"accuracy\"])\nmodel_compare.T.plot.bar(figsize=(10,7));","45ef46f0":"# Hyperparameter Grid for KNN,Logistic Regression and RandomForest\nknn_grid={'n_neighbors':range(1,21),\n          'weights':['uniform', 'distance'],\n          'leaf_size':range(1,51),\n          'p':[1,2]\n         }\n\nlog_grid = {\"C\": np.logspace(-4, 4, 20),\n            \"solver\": [\"liblinear\"]}\n\nrf_grid={'n_estimators':np.arange(10,1000,50),\n         'max_depth':np.arange(1,32),\n         'min_samples_split':np.arange(2,20,2),\n         'min_samples_leaf':np.arange(1,20,2)}","5b3585cf":"#Tune KNN\nknn_reg=RandomizedSearchCV(KNeighborsClassifier(),\n                      knn_grid,\n                      cv=5,\n                      n_iter=10,\n                      verbose=True)\n\nknn_reg.fit(X_train,y_train)","f5e1f5f0":"knn_reg.best_params_","e8ef7968":"knn_reg.score(X_test,y_test)","b9b3d8ff":"# Tune Logistic regression\nlog_reg=RandomizedSearchCV(LogisticRegression(),\n                      log_grid,\n                      cv=5,\n                      n_iter=10,\n                      verbose=True)\n\nlog_reg.fit(X_train,y_train)","60184ff8":"log_reg.best_params_","6f79efca":"log_reg.score(X_test,y_test)","49c6cdf9":"#Tune Random forest\nrf_reg=RandomizedSearchCV(RandomForestClassifier(),\n                      rf_grid,\n                      cv=5,\n                      n_iter=10,\n                      verbose=True)\n\nrf_reg.fit(X_train,y_train)","8478dd76":"rf_reg.best_params_","4b1462d5":"rf_reg.score(X_test,y_test)","3d32e54c":"y_preds=log_reg.predict(X_test)\ny_preds\ny_test","947b62d8":"# Plot ROC and Calculate AUC\nplot_roc_curve(log_reg,X_test,y_test);","6201b905":"# Confusion Matrix\ndef plot_conf_matrix(y_test,y_preds):\n    fig,ax=plt.subplots(figsize=(3,3))\n    ax=sns.heatmap(confusion_matrix(y_test,y_preds),\n                  annot=True,\n                  cbar=False)\n    plt.xlabel('Predicted Label')\n    plt.ylabel('True Label')\n\nplot_conf_matrix(y_test,y_preds)\n    ","82e5a8a2":"print(classification_report(y_test,y_preds))","9126c24f":"#Create a new classifier with best params\nclf_rs=LogisticRegression(C=206.913808111479,solver='liblinear')","0d2b5129":"metrics={'Accuracy':'accuracy',\n         'Precision':'precision',\n         'Recall':'recall',\n         'F1':'f1'}\n\n#function to check metric for each scoring type using CV method\ndef metrics_cv(metrics,clf,X,y):\n    scores={}\n    for name,metric in metrics.items():\n        cv_score=cross_val_score(clf,X,y,cv=5,scoring=metric)\n        #append values to scores\n        scores[name]=np.mean(cv_score)\n    return scores\n\nmetric=metrics_cv(metrics,clf_rs,X,y)","e8d4862f":"cv_metrics=pd.DataFrame(metric,index=[0])\ncv_metrics.T.plot.bar(title=\"Cross-validated classification metrics\",\n                      legend=False);","63539239":"#### Observation\n\n   * If the internet service is of type fiberoptic there are more number of churn.\n   * Similarly when there are no Online security,Online backup,Device protection provided churn frequency is high\n   * When there is no proper tech support users tend to churn more.\n   * There is no major pattern observed between streamingservices(Streaming Movies or TV)\n   * Users with multiple lines exhibit a 50% churn but there is no particular pattern observed.","ffed6b06":"### Evaluating tuned Models\n* ROC and AUC Curve\n* Confusion Matrix\n* Classification Report\n* Precision\n* Recall\n* F1 Score","cbf098da":"### Expolatory Data Analysis","08258800":"### Hyperparameter Tuning using RandomSearchCV","e03b7ae7":"### Telecom Features\n\n* customerID - customer id\n* gender - client gender (male \/ female)\n* SeniorCitizen - is the client retired (1, 0)\n* Partner - is the client married (Yes, No)\n* Dependents- (Yes,No)\n* tenure - how many months a person has been a client of the company\n* PhoneService - is the telephone service connected (Yes, No)\n* MultipleLines - are multiple phone lines connected (Yes, No, No phone service)\n* InternetService - client's Internet service provider (DSL, Fiber optic, No)\n* OnlineSecurity - is the online security service connected (Yes, No, No internet service)\n* OnlineBackup - is the online backup service activated (Yes, No, No internet service)\n* DeviceProtection - does the client have equipment insurance (Yes, No, No internet service)\n* TechSupport - is the technical support service connected (Yes, No, No internet service)\n* StreamingTV - is the streaming TV service connected (Yes, No, No internet service)\n* StreamingMovies - is the streaming cinema service activated (Yes, No, No internet service)\n* Contract - type of customer contract (Month-to-month, One year, Two year)\n* PaperlessBilling - whether the client uses paperless billing (Yes, No)\n* PaymentMethod - payment method (Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic))\n* MonthlyCharges - current monthly payment\n* TotalCharges - the total amount that the client paid for the services for the entire time\n* Churn - whether there was a churn (Yes or No)\n","d687bf11":"### Model choices\n\n1. Logistic Regression - [`LogisticRegression()`](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LogisticRegression.html)\n2. K-Nearest Neighbors - [`KNeighboursClassifier()`](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neighbors.KNeighborsClassifier.html)\n3. RandomForest - [`RandomForestClassifier()`](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.RandomForestClassifier.html)","923c692a":"### Modelling","cd91da65":"#### Observation\n\n   * Churn rate is more when monthly charges are 60 Currency Units.\n   * Higher the tenure the lesser the Churn rate. i.e. as tenure increases the churn rate decreases.\n   * For Electronic Check payment methods the churn rate is high.\n   * When Contract type is Month to month we have high churn rate compared to others.","8a998ba0":"#### Classification report without cross validation","04529da2":"#### Analysing Churn frequency with other features","0c526b73":"### As we can see though there are no empty values in the dataset we have blank (' ') string in total charges column","ecce1a66":"**No missing values found in the dataset. Let's change the `Dtype` of `TotalCharges` to float.**","fb198d7f":"#### Classification report with cross validation"}}