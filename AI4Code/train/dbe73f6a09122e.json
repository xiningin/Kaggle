{"cell_type":{"c5f983ee":"code","e4a02314":"code","2cf7c0c2":"code","9100b78e":"code","3b73ffb1":"code","6be4d86b":"code","3c386b84":"code","bf5d2fba":"code","5fcbd542":"code","729b5211":"code","36d22fc9":"code","b8fc8891":"code","1705a31e":"code","32bf479e":"code","535b66ce":"code","c12bf1b4":"code","c27b07c4":"code","589c5226":"code","a15bcce2":"code","45859e46":"code","7cbdb6c1":"code","43bf292a":"code","24278d53":"code","bc6dccdd":"code","1f516f16":"code","9a9de82b":"code","5fde95ec":"code","c7b630b0":"code","88aed89b":"code","187bfda2":"code","fa3e3d1a":"code","b70a1b19":"code","c68b2c8c":"code","0bada298":"code","9eecb82b":"code","285b7024":"code","5059ccaf":"code","783b15ce":"code","7f15dfbd":"code","e75a82e3":"code","98017af4":"code","0ea6358e":"markdown","e9a884c6":"markdown","090b7333":"markdown","23213e35":"markdown","c2492c1a":"markdown","0e2a60bb":"markdown","732b55fe":"markdown","84dba7a1":"markdown","fbd03143":"markdown","d1036f71":"markdown","1e9b0163":"markdown","0a390961":"markdown","da2090b3":"markdown","9c911120":"markdown","16f80ff2":"markdown","187f1b5c":"markdown","a1764497":"markdown","e5998e0b":"markdown","79d3234d":"markdown","bd72f374":"markdown","b883222a":"markdown","c8e770cc":"markdown","2185278c":"markdown","437e2670":"markdown","af8cf816":"markdown"},"source":{"c5f983ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e4a02314":"import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.graph_objects as go\n# Module for creating blocks\nfrom plotly.subplots import make_subplots\nfrom scipy.cluster.hierarchy import dendrogram, linkage, fcluster\nprint(\"Setup Complete\")","2cf7c0c2":"dataset=pd.read_csv('\/kaggle\/input\/fifa-20-complete-player-dataset\/players_20.csv')","9100b78e":"dataset.head()","3b73ffb1":"del_col_list=['weight_kg', 'height_cm', 'dob', 'sofifa_id', 'player_url', 'long_name','preferred_foot', 'international_reputation', 'weak_foot','team_jersey_number', 'loaned_from', 'joined', 'contract_valid_until','nation_position', 'nation_jersey_number', 'shooting','power_long_shots', 'mentality_aggression', 'mentality_interceptions','mentality_positioning', 'mentality_vision', 'mentality_penalties','mentality_composure', 'defending_marking', 'defending_standing_tackle', 'skill_ball_control', 'movement_acceleration', 'movement_sprint_speed', 'ls', 'st', 'rs','lw', 'lf', 'cf', 'rf', 'rw', 'lam', 'cam', 'ram', 'lm', 'lcm', 'cm','rcm', 'rm', 'lwb', 'ldm', 'cdm', 'rdm', 'rwb', 'lb', 'lcb', 'cb','rcb', 'rb']\ndataset=dataset.drop(del_col_list, axis=1)\ndataset.head()","6be4d86b":"print(dataset.shape)\ndataset = dataset.drop_duplicates(keep='first')\nprint(dataset.shape)","3c386b84":"missing_data = dataset.isnull().sum().sort_values(ascending=False)\nmissing_data = missing_data.reset_index(drop=False)\nmissing_data = missing_data.rename(columns={\"index\": \"Columns\", 0: \"Value\"})\nmissing_data['Proportion'] = (missing_data['Value']\/len(dataset))*100","bf5d2fba":"cols = [\"dribbling\", \"defending\", \"physic\", \"passing\", \"pace\"]\nfor col in cols:\n    dataset[col] = dataset[col].fillna(dataset[col].median())\ndataset = dataset.fillna(0)\ndataset.isnull().sum()","5fcbd542":"expensive_dataset = dataset.sort_values(by ='wage_eur', ascending=False).head()\nexpensive_dataset","729b5211":"dataset.columns","36d22fc9":"skillers = dataset[(dataset[\"skill_moves\"] == 4) | (dataset[\"skill_moves\"] == 5)]\nskiller_nations = skillers[\"nationality\"].value_counts(normalize=True)\nrest = skiller_nations[10:].sum()\nskiller_nations = skiller_nations[:10]\nskiller_nations[\"Other\"] = rest\npie, ax = plt.subplots(figsize=[12,12])\nlabels = skiller_nations.keys()\nplt.pie(x=skiller_nations, autopct=\"%.1f%%\", labels=labels, pctdistance=0.5, explode=[0.05]*11);\nplt.legend(loc=\"upper right\")\nplt.title(\"Skill moves and countries\", fontsize=14);","b8fc8891":"def find_min_max_in(col):\n\n    top = dataset[col].idxmax()\n    top_df = pd.DataFrame(dataset.loc[0])\n    \n    bottom = dataset[col].idxmin()\n    bottom_df = pd.DataFrame(dataset.loc[1])\n    \n    info_df = pd.concat([top_df, bottom_df], axis=1)\n    return info_df\n\nfind_min_max_in('wage_eur')","1705a31e":"potential_attribute = dataset.sort_values(by ='potential', ascending=False).head()\npotential_attribute","32bf479e":"sns.scatterplot(x=dataset['wage_eur'], y=dataset['potential'])","535b66ce":"dataset[dataset['potential'] >= 93]","c12bf1b4":"def create_polarcharts(\n    stats: list,\n    color: str,\n    img_link: str,\n    name_one: str,\n    name_two: str\n):\n    '''\n    The function accepts the following arguments:\n    \n        stats - takes a list of numeric values of characteristics\n        color - takes the color of the lines in the diagram\n        img_link - accepts a link to an image of a football player\n        name_one - takes the name of the footballer\n        name_two - accepts any additional text\n    \n    '''\n    # Determine the number of rows and columns\n    fig = make_subplots(rows=1, cols=2, \n                        # We indicate the types of graphs in each block\n                        specs=[[{'type': 'xy'}, {\"type\": \"polar\"}]], \n                        # Setting the width of each column\n                        column_widths=[0.5, 0.5])  \n    \n    # Create a Polar Chart\n    fig.add_trace(go.Scatterpolar(\n                     # Passing numeric parameters\n                     r=stats,\n                     # Passing parameter names\n                     theta=['Pace', 'Shooting', 'Passing', 'Dribbling', 'Defending', 'Physic', 'Pace'],\n                     # Setting the fill parameter\n                     fill='toself',\n                     # Specify the signature on hover\n                     hovertemplate='<b>%{theta}<\/b>' + f'<b>: '+'%{r}',\n                     # Specify a caption for the legend\n                     name='',\n                     # Specifying the line color\n                     line=dict(color=color)),\n                     # Specify line and column numbers\n                     row=1, col=2)\n    \n    # Add an image to the chart\n    fig.layout.images = [dict(\n               # Passing a link to the image\n               source=img_link,\n               # Specify the position of the image along the x-axis\n               x=0.05, \n               # Specify the position of the image along the y-axis\n               y=0.5,\n               # Setting the size of the chart\n               sizex=1, \n               sizey=1.6,\n               # Setting the position along the x-axis\n               xanchor=\"center\", \n               # Setting the y-axis position\n               yanchor=\"middle\",\n               # Place the image under the chart\n               layer=\"below\"\n                             )\n                        ]\n\n    fig.update_layout(\n        # Set the name of the chart\n        title=f'<b>{name_one}<\/b><br><sub>{name_two}<\/sub>',\n        # Setting the background color\n        paper_bgcolor=\"rgb(205, 228, 255)\",\n        # Setting the chart theme\n        template='xgridoff',\n        # Passing chart parameters\n        polar=dict(\n             # Background color\n             bgcolor=\"rgb(205, 228, 255)\",\n             # Adding a line with numeric divisions\n             radialaxis=dict(\n                        # Displaying the line\n                        visible = True,\n                        # Set the range of divisions\n                        range = [0, 100]\n                            )\n                   ), \n        # Passing the parameters to the font\n        font=dict(\n                  # Font type\n                  family='Poppins',\n                  # Font size\n                  size=18,\n                  # Font color\n                  color='Black'\n                 )\n    )\n\n    # Displaying the graph\n    fig.show()","c27b07c4":"create_polarcharts([85, 92, 91, 95, 38, 65, 85], \n                   'MidnightBlue',\n                   'https:\/\/lh3.googleusercontent.com\/proxy\/fn0SPZLOyA0QQIPYN0EXPomGEVu7KtwvS5TrajsxrCLeR1aiSp2kSpDSqyilCzKgsH3ACCEA7Yb1O1xkVPIhzQzxcBvYRn1BHJUWYMDZQdRvNt0NRm4fFCMfo6iV5hJErZcUOA',\n                   'L. Messi',\n                   'Forward in FC Barcelona')","589c5226":"graph1 = pd.DataFrame(np.random.rand(10, 6), columns=[\"skill_curve\", \"skill_fk_accuracy\", \"skill_long_passing\", \"movement_agility\", \"movement_reactions\", \"movement_balance\"])\ngraph1.plot.box();","a15bcce2":"sns.heatmap(data = dataset[['age','overall','potential','skill_moves','value_eur','wage_eur','passing']].corr(), annot = True, vmin = -1, vmax = 1, center = 0, cmap=\"YlGnBu\")","45859e46":"# Explore visually the relationship between 'passing' and 'defending' through a scatterplot\nfig, ax = plt.subplots(figsize=(15,8))\nax.scatter(dataset['age'], dataset['overall'], color='violet')\nax.set_xlabel('age')\nax.set_ylabel('overall')\nplt.show()","7cbdb6c1":"dataset.columns","43bf292a":"unique_ages = dataset[\"age\"].unique()\nunique_ages = sorted(unique_ages)\npaces = []\ncounts = []\nfor age in unique_ages:\n    avg_df = dataset[dataset[\"age\"] == age][\"physic\"]\n    count = avg_df.count()\n    mean = avg_df.mean()\n    paces.append( mean)\n    counts.append(count)\nsns.set_style(\"white\")\nplt.figure(figsize=(8, 8));\nsns.scatterplot(x=unique_ages, y=counts, color=\"red\", size=counts);\nsns.despine()\nplt.title(\"Frequency of Ages\");\nplt.xlabel(\"Ages\");\nplt.ylabel(\"Count\");","24278d53":"plt.figure(figsize=(8, 8))\nsns.scatterplot(x=unique_ages, y=paces, size=paces, color=\"magenta\");\nsns.despine()\nplt.title(\"Age vs Average Physic\");\nplt.xlabel(\"Ages\");\nplt.ylabel(\"Average Physic\");","bc6dccdd":"def Club(x):\n    return dataset[dataset['club'] == x ][\n        ['short_name','age','club',\"player_positions\",\"potential\",\"value_eur\"]].sort_values(by=['potential'],ascending=False)\ndef Country(x):\n    return dataset[dataset['nationality'] == x ][['short_name','age','nationality',\"player_positions\",\n                                            \"potential\",\"value_eur\"]].sort_values(by=['potential'],ascending=False)\n","1f516f16":"Chelsea = Club(\"Chelsea\")\nPSG = Club(\"Paris Saint-Germain\")\nJuventus = Club(\"Juventus\")\nBVB = Club(\"Borussia Dortmund\")\nGermany = Country(\"Germany\")\nEngland = Country(\"England\")\nFrance = Country(\"France\")","9a9de82b":"plt.figure(figsize=(30, 12))\nplt.bar(Chelsea[\"short_name\"].head(11),Chelsea[\"potential\"].head(11),color=\"b\")\nplt.xticks(rotation=90,fontsize=20)\nplt.yticks(fontsize=20)\nplt.title(\"Chelsea players\", fontsize = 25)\nplt.ylabel(\"potential\",fontsize = 20)\nplt.xlabel(\"Player\",fontsize = 20)\nplt.grid()\nplt.show()\n\nplt.figure(figsize=(30, 12))\nplt.bar(Juventus[\"short_name\"].head(11),Juventus[\"potential\"].head(11),color=\"k\")\nplt.xticks(rotation=90,fontsize=20)\nplt.yticks(fontsize=20)\nplt.title(\"Juventus players\", fontsize = 25)\nplt.ylabel(\"potential\",fontsize = 20)\nplt.xlabel(\"Player\",fontsize = 20)\nplt.grid()\nplt.show()\n\nplt.figure(figsize=(30, 12))\nplt.bar(Germany[\"short_name\"].head(11),Germany[\"potential\"].head(11),color=\"r\")\nplt.xticks(rotation=90,fontsize=20)\nplt.yticks(fontsize=20)\nplt.title(\"Top 11 German players\", fontsize = 25)\nplt.ylabel(\"potential\",fontsize = 20)\nplt.xlabel(\"Player\",fontsize = 20)\nplt.grid()\nplt.show()\n\nplt.figure(figsize=(30, 12))\nplt.bar(France[\"short_name\"].head(11),France[\"potential\"].head(11),color=\"g\")\nplt.xticks(rotation=90,fontsize=20)\nplt.yticks(fontsize=20)\nplt.title(\"Top 11 French players\", fontsize = 25)\nplt.ylabel(\"potential\",fontsize = 20)\nplt.xlabel(\"Player\",fontsize = 20)\nplt.grid()\nplt.show()","5fde95ec":"dataset.player_positions.head(18278)","c7b630b0":"dataset.skill_moves.head(18278)","88aed89b":"dataset.goalkeeping_handling.head(18278)","187bfda2":"def Country(x):\n    def find_min_max_in(col):\n        work = dataset[col].idxmax()\n        work_df = pd.DataFrame(dataset.loc[work])\n        return work_df\n    return dataset[dataset['nationality'] == x ][['goalkeeping_handling', 'short_name']].sort_values(by=['goalkeeping_handling'],ascending=False)\nfind_min_max_in('goalkeeping_handling')\nCountry1 = Country(\"Argentina\")\nprint(Country1)\ngoalkeeper = Country1.iloc[0][1]\nprint(\"The goalkeeper is :\", goalkeeper)\n# test = dataset.drop(dataset.short_name[goalkeeper])\n# dataset = dataset.drop(dataset.index[[3]])\n# dataset.drop(dataset.short_name[[goalkeeper]], inplace = True)\n# dataset = pd.DataFrame(dataset)\n# for col in dataset.row:\n#     if 'goalkeeper' in row:\n#         del df[row]\n  \n# dataset\ndataset.drop(dataset[dataset['short_name']==goalkeeper].index, inplace = True)\n  ","fa3e3d1a":"# col = dataset.loc[: , \"movement_agility\":\"movement_reactions\"]\n# dataset['centreback_mean'] = col.mean(axis=1)\ndataset['centreback_mean']=dataset['movement_agility'] + dataset['pace']+ dataset['movement_reactions'] + dataset['passing'] + dataset['defending_sliding_tackle'] + dataset['defending']\ndataset","b70a1b19":"def Country(x):\n    def find_min_max_in(col):\n        work = dataset[col].idxmax()\n        work_df = pd.DataFrame(dataset.loc[work])\n        return work_df\n    return dataset[dataset['nationality'] == x ][['centreback_mean', 'short_name']].sort_values(by=['centreback_mean'],ascending=False)\nfind_min_max_in('centreback_mean')\nCountry1 = Country(\"Argentina\")\nprint(Country1)\ncentreback=Country1.iloc[0][1]\nprint(\"The centreback is :\", centreback)\n# dataset=dataset.drop(dataset.index[[822]])\ndataset.drop(dataset[dataset['short_name']==centreback].index, inplace = True)","c68b2c8c":"# col = dataset.loc[: , \"passing\":\"dribbling\"]\n# dataset['centremidfielder_mean'] = col.mean(axis=1)\n# dataset\ndataset['centremidfielder_mean']=dataset['dribbling'] + dataset['passing'] + dataset['pace'] + dataset['movement_agility']+ dataset['movement_reactions'] + dataset['movement_balance'] + dataset['attacking_short_passing']+ dataset['attacking_heading_accuracy']\ndataset","0bada298":"def Country(x):\n    def find_min_max_in(col):\n        work = dataset[col].idxmax()\n        work_df = pd.DataFrame(dataset.loc[work])\n        return work_df\n    return dataset[dataset['nationality'] == x ][['centremidfielder_mean', 'short_name']].sort_values(by=['centremidfielder_mean'],ascending=False)\nfind_min_max_in('centremidfielder_mean')\nCountry1 = Country(\"Argentina\")\nprint(Country1)\ncentremidfielder1=Country1.iloc[0][1]\nprint(\"The centremidfielder one is :\", centremidfielder1)\ncentremidfielder2=Country1.iloc[1][1]\nprint(\"The centremidfielder two is :\", centremidfielder2)\ncentremidfielder3=Country1.iloc[2][1]\nprint(\"The centremidfielder three is :\", centremidfielder3)\n# dataset=dataset.drop(dataset.index[[152]])\n# dataset=dataset.drop(dataset.index[[891]])\n# dataset=dataset.drop(dataset.index[[825]])\ndataset.drop(dataset[dataset['short_name']==centremidfielder1].index, inplace = True)\ndataset.drop(dataset[dataset['short_name']==centremidfielder2].index, inplace = True)\ndataset.drop(dataset[dataset['short_name']==centremidfielder3].index, inplace = True)","9eecb82b":"# col = dataset.loc[: , \"attacking_finishing\":\"power_strength\"]\n# dataset['attackingmidfielder_mean'] = col.mean(axis=1)\n# dataset\ndataset['attackingmidfielder_mean']=dataset['attacking_finishing'] + dataset['passing'] + dataset['pace'] + dataset['attacking_heading_accuracy']+ dataset['attacking_short_passing'] + dataset['attacking_volleys'] + dataset['skill_curve'] \ndataset","285b7024":"def Country(x):\n    def find_min_max_in(col):\n        work = dataset[col].idxmax()\n        work_df = pd.DataFrame(dataset.loc[work])\n        return work_df\n    return dataset[dataset['nationality'] == x ][['attackingmidfielder_mean', 'short_name']].sort_values(by=['attackingmidfielder_mean'],ascending=False)\n# find_min_max_in('attackingmidfielder_mean')\nCountry1 = Country(\"Argentina\")\nprint(Country1)\nattackingmidfielder1=Country1.iloc[0][1]\nprint(\"The attackingmidfielder one is :\", attackingmidfielder1)\nattackingmidfielder2=Country1.iloc[1][1]\nprint(\"The attackingmidfielder two is :\", attackingmidfielder2)\n# dataset=dataset.drop(dataset.index[[2042]])\n# print(dataset.index[dataset['short_name']].tolist())\n# dataset=dataset.drop(dataset.index[[876]])\ndataset.drop(dataset[dataset['short_name']==attackingmidfielder1].index, inplace = True)\ndataset.drop(dataset[dataset['short_name']==attackingmidfielder2].index, inplace = True)","5059ccaf":"# col = dataset.loc[: , \"defending\":\"defending_sliding_tackle\"]\n# dataset['fullback_mean'] = col.mean(axis=1)\n# dataset\ndataset['fullback_mean']=dataset['defending_sliding_tackle'] + dataset['passing'] + dataset['defending'] + dataset['skill_long_passing'] + dataset['power_strength'] \ndataset","783b15ce":"def Country(x):\n    def find_min_max_in(col):\n        work = dataset[col].idxmax()\n        work_df = pd.DataFrame(dataset.loc[work])\n        return work_df\n    return dataset[dataset['nationality'] == x ][['fullback_mean', 'short_name']].sort_values(by=['fullback_mean'],ascending=False)\n# find_min_max_in('fullback_mean')\nCountry1 = Country(\"Argentina\")\nprint(Country1)\nfullback1=Country1.iloc[0][1]\nprint(\"The fullback one is :\", fullback1)\nfullback2=Country1.iloc[1][1]\nprint(\"The fullback two is :\", fullback2)\nfullback3=Country1.iloc[2][1]\nprint(\"The fullback three is :\", fullback3)\n\n# dataset=dataset.drop(dataset.index[[2054]])\n# dataset=dataset.drop(dataset.index[[890]])\n# dataset=dataset.drop(dataset.index[[825]])\ndataset.drop(dataset[dataset['short_name']==fullback1].index, inplace = True)\ndataset.drop(dataset[dataset['short_name']==fullback2].index, inplace = True)\ndataset.drop(dataset[dataset['short_name']==fullback3].index, inplace = True)","7f15dfbd":"# col = dataset.loc[: , \"skill_curve\":\"power_shot_power\"]\n# dataset['stricker_mean'] = col.mean(axis=1)\n# dataset\ndataset['stricker_mean']=dataset['attacking_finishing'] + dataset['attacking_heading_accuracy'] + dataset['attacking_crossing'] + dataset['pace'] + dataset['skill_curve'] + dataset['skill_fk_accuracy'] + dataset['movement_balance'] \ndataset","e75a82e3":"def Country(x):\n#     def find_min_max_in(col):\n#         work = dataset[col].idxmax()\n#         work_df = pd.DataFrame(dataset.loc[work])\n#         return work_df\n    return dataset[dataset['nationality'] == x ][['stricker_mean', 'short_name']].sort_values(by=['stricker_mean'],ascending=False)\n# find_min_max_in('stricker_mean')\nCountry1 = Country(\"Argentina\")\nprint(Country1)\nstricker=Country1.iloc[0][1]\nprint(\"The stricker is :\", stricker)\n# dataset=dataset.drop(dataset.index[[822]])\ndataset.drop(dataset[dataset['short_name']==stricker].index, inplace = True)","98017af4":"print(\"The team is \", stricker, fullback1, fullback2, fullback3, goalkeeper, centremidfielder1, centremidfielder2, centremidfielder3, attackingmidfielder1, attackingmidfielder2, centreback)","0ea6358e":"# **L. Messi Vs Cristiano Ronaldo**","e9a884c6":"# ***DATA EXPLORATION***","090b7333":"**Dropping columns which are not required such as weight, height, dob, player url etc.**","23213e35":"*Sorting the data based on the wage of the players.*","c2492c1a":"**Starting with goalkeeper**","0e2a60bb":"# **MAKING DREAM TEAM FOR ARGENTINA**","732b55fe":"This shows that most football players are from Brazil, followed by Spain and Argentina.","84dba7a1":"![](http:\/\/www.sdxcentral.com\/wp-content\/uploads\/2020\/09\/Intel-AMD-Nvidia-and-Ampere-Join-Oracle-Cloud-Dream-Team.jpg)","fbd03143":"![](http:\/\/i.ytimg.com\/vi\/NOras8n86Fo\/maxresdefault.jpg)","d1036f71":"![](http:\/\/wallpapercave.com\/wp\/wp6913.jpg)","1e9b0163":"# **CONTENTS**\n1. Data Visualisation\n2. Top 11 players for a Club\/Country\n3. Dream Team","0a390961":"# **Figure for the best players in a club\/country**","da2090b3":"**Fullback**","9c911120":"**Centremidfielder**","16f80ff2":"This shows that most of the football players tend to be in the 20-30 age group, which naturally decreases as player age increases.","187f1b5c":"**Attacking Mid fielder**","a1764497":"**Centreback**","e5998e0b":"Removing a particular player from dataset is important to make sure players are not repeated in the final team list.","79d3234d":"# **FINAL DREAM TEAM**","bd72f374":"This depicts that the average physic of players tends to increase as they grow older","b883222a":"**Stricker**","c8e770cc":"**Arranging players with potential higher than 93**","2185278c":"**Analizing various players based on their potential**","437e2670":"![](http:\/\/content.api.news\/v3\/images\/bin\/3e71dbd6f726c5240767dcda0ba0c465)","af8cf816":"**Import all neccessary libraries**"}}