{"cell_type":{"9e2d2066":"code","04da36b7":"code","1ec7c203":"code","16ab2923":"code","0fbc8b26":"code","c11b5219":"code","2ddf0d1d":"code","a67c1542":"code","4605fd65":"code","05209b4e":"code","f3a3c369":"code","9b9403ac":"code","025101ad":"markdown","0c0b0c80":"markdown","6aaa5921":"markdown","07363ef3":"markdown","91bfd2b9":"markdown"},"source":{"9e2d2066":"!pip install git+https:\/\/github.com\/ssut\/py-googletrans.git","04da36b7":"import numpy as np\nimport pandas as pd\nfrom googletrans import Translator\nfrom dask import bag, diagnostics","1ec7c203":"train = pd.read_csv('..\/input\/contradictory-my-dear-watson\/train.csv', index_col=['id'])\ndisplay(train, train.lang_abv.value_counts())","16ab2923":"def translate(words, dest):\n    dest_choices = ['zh-cn',\n                    'ar',\n                    'fr',\n                    'sw',\n                    'ur',\n                    'vi',\n                    'ru',\n                    'hi',\n                    'el',\n                    'th',\n                    'es',\n                    'de',\n                    'tr',\n                    'bg'\n                    ]\n    if not dest:\n        dest = np.random.choice(dest_choices)\n        \n    translator = Translator()\n    decoded = translator.translate(words, dest=dest).text\n    return decoded\n\n\n#TODO: use a dask dataframe instead of all this\ndef trans_parallel(df, dest):\n    premise_bag = bag.from_sequence(df.premise.tolist()).map(translate, dest)\n    hypo_bag =  bag.from_sequence(df.hypothesis.tolist()).map(translate, dest)\n    with diagnostics.ProgressBar():\n        premises = premise_bag.compute()\n        hypos = hypo_bag.compute()\n    df[['premise', 'hypothesis']] = list(zip(premises, hypos))\n    return df\n\n    \neng = train.loc[train.lang_abv == \"en\"].copy() \\\n           .pipe(trans_parallel, dest=None)\n\nnon_eng =  train.loc[train.lang_abv != \"en\"].copy() \\\n                .pipe(trans_parallel, dest='en')\n\ntrain = train.append([eng, non_eng])\n\ntrain.shape","0fbc8b26":"train.to_csv('train_translate_all.csv', index=False)","c11b5219":"test = pd.read_csv('\/kaggle\/input\/contradictory-my-dear-watson\/test.csv', index_col=['id'])\ndisplay(test, test.lang_abv.value_counts())","2ddf0d1d":"eng = test.loc[test.lang_abv == \"en\"].copy() \\\n           .pipe(trans_parallel, dest=None)\n\nnon_eng =  test.loc[test.lang_abv != \"en\"].copy() \\\n                .pipe(trans_parallel, dest='en')\n\ntest = test.append([eng, non_eng])","a67c1542":"test.to_csv('test_translate_all.csv', index=False)","4605fd65":"train = pd.read_csv('..\/input\/contradictory-my-dear-watson\/train.csv', index_col=['id'])\neng = train.pipe(trans_parallel, dest='en')\neng.shape","05209b4e":"eng.to_csv('train_translate_en.csv', index=False)","f3a3c369":"test = pd.read_csv('\/kaggle\/input\/contradictory-my-dear-watson\/test.csv', index_col=['id'])\neng = test.pipe(trans_parallel, dest='en')","9b9403ac":"eng.to_csv('test_translate_en.csv', index=False)","025101ad":"> ### Apply to test","0c0b0c80":"## ALL -> ENG","6aaa5921":"## ENG -> orther, ORTHER -> ENG","07363ef3":"Thanks jpmiller for nice notebook: https:\/\/www.kaggle.com\/jpmiller\/augmenting-data-with-translations","91bfd2b9":"### Apply to test"}}