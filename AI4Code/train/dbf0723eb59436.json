{"cell_type":{"c7bd6b89":"code","2cf55469":"code","cce913a2":"code","27006881":"code","568f29a4":"code","a3159cf7":"code","190562e9":"code","9351793e":"code","f580c918":"code","613b4b61":"code","31e44c55":"code","b3fa0ef8":"code","39162a99":"code","e8ab27d7":"code","44073a8c":"code","017fafae":"code","355fe50b":"code","a45609d4":"code","18a5af69":"code","e454d709":"code","9523da69":"code","b471a40c":"code","7fbb9deb":"code","dcfb166a":"code","b7a44b9f":"code","9b87e98e":"code","3c6159f4":"code","c2e16a00":"code","a9af33dd":"code","5753c3de":"code","ff573d5d":"code","5141624f":"code","411293e5":"code","675bbb08":"code","82def791":"code","d53042fc":"code","62a86b53":"code","516f9e2d":"code","1dcb8dd3":"code","df93cf9b":"code","45347527":"code","ec7128ea":"code","87546d2b":"code","6dacb08e":"code","a94729f0":"code","533f1077":"code","a93c377c":"code","44b2a0e4":"code","88602042":"markdown","ac439870":"markdown","78ef3553":"markdown","03a237c0":"markdown","7d36721e":"markdown","ad01f5f0":"markdown","135564d3":"markdown","3d081279":"markdown","e030fcca":"markdown","215274a3":"markdown","114ae1f4":"markdown","f922e215":"markdown","1a65e604":"markdown","17f96736":"markdown","87697bdb":"markdown","3ce6f461":"markdown","bb61671a":"markdown","a1d2aa14":"markdown","44053021":"markdown","402be7af":"markdown","b046cef2":"markdown","5e265a51":"markdown","a7e5b107":"markdown","48dc2034":"markdown","59c3e443":"markdown","7293e20b":"markdown","7483c277":"markdown","35ec3125":"markdown","7b0ae03d":"markdown","055943cd":"markdown","9dab9056":"markdown","43a553eb":"markdown","5824b1ba":"markdown","d4346991":"markdown","6e99d01d":"markdown","e5603dbe":"markdown","f7201704":"markdown"},"source":{"c7bd6b89":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2cf55469":"# \ud30c\uc774\ud504\ub77c\uc778 \uc5b4\ub5bb\uac8c \uc4f8\uc9c0","cce913a2":"# unique\ud655\uc778","27006881":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.metrics import mean_absolute_error\nimport xgboost\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import cross_val_score, train_test_split, KFold\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.linear_model import LinearRegression, RidgeCV, LassoCV, ElasticNetCV\nfrom sklearn.metrics import mean_squared_error, make_scorer\nfrom IPython.display import display\nimport matplotlib.pyplot as plt\n\nimport warnings\n\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\n\nimport optuna\nfrom optuna import Trial\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.cluster import KMeans","568f29a4":"train = pd.read_csv('..\/input\/pceo-ai-club1\/train.csv', index_col=\"student_id\") #\ubc18\ub4dc\uc2dc index_col\uc744 student_id\ub85c \uc124\uc815\ud574\uc8fc\uc138\uc694\ntest = pd.read_csv('..\/input\/pceo-ai-club1\/test.csv', index_col=\"student_id\")\nsample_submission = pd.read_csv('..\/input\/pceo-ai-club1\/sample_submission.csv', index_col=\"student_id\")","a3159cf7":"train.head()","190562e9":"test.head()","9351793e":"train.isnull().any()","f580c918":"y = train.pretest\nX_no_school = train.drop([\"school_setting\",\"pretest\"], axis=1)\nX_yes_school = train[[\"school_setting\"]]\n\ntest_no_school = test.drop([\"school_setting\"], axis=1)\ntest_yes_school = test[[\"school_setting\"]]","613b4b61":"X_yes_school","31e44c55":"test_yes_school","b3fa0ef8":"# one-hot-encoding\nfrom sklearn.preprocessing import OneHotEncoder\nonehot_encoder = OneHotEncoder()\nX_yes_school_onehot = onehot_encoder.fit_transform(X_yes_school[\"school_setting\"].values.reshape(-1,1))\ntest_yes_school_onehot = onehot_encoder.transform(test_yes_school[\"school_setting\"].values.reshape(-1,1))\n\nX_yes_school_onehot = pd.DataFrame(X_yes_school_onehot.toarray(), columns = [\"Rural\", \"Suburban\", \"Urban\"], index=list(train.index.values))\ntest_yes_school_onehot = pd.DataFrame(test_yes_school_onehot.toarray(), columns = [\"Rural\", \"Suburban\", \"Urban\"], index=list(test.index.values))\n\nprint(X_yes_school_onehot)\nprint(test_yes_school_onehot)\nprint(onehot_encoder.categories_)\n# \ud310\ub2e4\uc2a4 \ub118\ud30c\uc774 \ud30c\uc774\uc36c \uae30\ubcf8\ub9ac\uc2a4\ud2b8","39162a99":"s = (X_no_school.dtypes == 'object')\nobject_cols = list(s[s].index)\nobject_cols","e8ab27d7":"label_X = X_no_school.copy()\nlabel_test = test_no_school.copy()\n\nordinal_encoder = OrdinalEncoder()\nlabel_X[object_cols] = ordinal_encoder.fit_transform(X_no_school[object_cols])\nlabel_test[object_cols] = ordinal_encoder.transform(test_no_school[object_cols])\n\nlabel_X = pd.DataFrame(label_X)\nlabel_test = pd.DataFrame(label_test)","44073a8c":"label_X.head()","017fafae":"label_test.head()","355fe50b":"X = pd.concat([label_X, X_yes_school_onehot], axis=1)\ntest_complete = pd.concat([label_test, test_yes_school_onehot], axis=1)\n# New_X = pd.concat(frames)\n# display(New_X)\n# print(frames)\nX\n\n# \uc65c \uc6d0\ud56b\ud55c\uac70 \uc778\ub371\uc2a4 \uc8fc\uace0, axis 1\uc744 \uc8fc\ub2c8\uae50 \ud574\uacb0\uc774 \ub418\ub294\uac70\uc9c0??","a45609d4":"kmeans = KMeans(n_clusters=3)\nX[\"Cluster\"] = kmeans.fit_predict(X)\nX[\"Cluster\"] = X[\"Cluster\"].astype(\"category\")\n\nX.head()","18a5af69":"X['Cluster'] = pd.to_numeric(X['Cluster'])","e454d709":"sns.relplot(\n    x=\"classroom\", y=\"n_student\", hue=\"Cluster\", data=X, height=6,\n); ","9523da69":"kmeans = KMeans(n_clusters=6)\ntest_complete[\"Cluster\"] = kmeans.fit_predict(test_complete)\ntest_complete[\"Cluster\"] = test_complete[\"Cluster\"].astype(\"category\")\n\ntest_complete.head()","b471a40c":"test_complete['Cluster'] = pd.to_numeric(test_complete['Cluster'])","7fbb9deb":"type(test_complete['Cluster'])\n# \ud310\ub2e4\uc2a4 \uc2dc\ub9ac\uc988 \uad6c\uae00\ub9c1\uc774\ub098 \uae30\ucd08","dcfb166a":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.001, random_state=3, shuffle=True)\n# # kfold cross validition \ud574\ubcf4\uae30","b7a44b9f":"# def lgbm_objective(trial):\n#     # To select which parameters to optimize, please look at the XGBoost documentation:\n#     # https:\/\/xgboost.readthedocs.io\/en\/latest\/parameter.html\n#     param = {\n#         \"objective\": \"regression\",\n#         \"metric\": \"mae\",\n#         \"verbosity\": -1,\n#         \"boosting_type\": \"gbdt\",\n#         \"lambda_l1\": trial.suggest_float(\"lambda_l1\", 1e-8, 10.0, log=True),\n#         \"lambda_l2\": trial.suggest_float(\"lambda_l2\", 1e-8, 10.0, log=True),\n#         \"num_leaves\": trial.suggest_int(\"num_leaves\", 2, 256),\n#         \"feature_fraction\": trial.suggest_float(\"feature_fraction\", 0.4, 1.0),\n#         \"bagging_fraction\": trial.suggest_float(\"bagging_fraction\", 0.4, 1.0),\n#         \"bagging_freq\": trial.suggest_int(\"bagging_freq\", 1, 7),\n#         \"min_child_samples\": trial.suggest_int(\"min_child_samples\", 5, 100),\n#     }\n#     model = LGBMRegressor(**param)  \n    \n#     model.fit(X_train,y_train,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    \n#     preds = model.predict(X_val)\n    \n#     mae = mean_absolute_error(y_val, preds)\n    \n#     return mae","9b87e98e":"# study = optuna.create_study(direction='minimize')\n# study.optimize(lgbm_objective, n_trials=2)\n# print('Number of finished trials:', len(study.trials))\n# print('Best trial:', study.best_trial.params)","3c6159f4":"# lgbm_params = {'lambda_l1': 0.5200298693537239, \n#                'lambda_l2': 1.0774696077969569e-05, \n#                'num_leaves': 35, \n#                'feature_fraction': 0.46695498134027, \n#                'bagging_fraction': 0.807491141571741, \n#                'bagging_freq': 6, \n#                'min_child_samples': 79}\n# model = LGBMRegressor(**lgbm_params)  \n    \n# model.fit(X_train,y_train,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n\n# preds = model.predict(X_val)\n\n# mae = mean_absolute_error(y_val, preds)\n\n# print(mae)\n\n# # 7000\ubc88 \ub3cc\ub824\ubcf8 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 mae -> 0.5090937419732455","c2e16a00":"# # optuna lgbm predict\n# pred_lgb_optuna = model.predict(test_complete)","a9af33dd":"#Validation function\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(X_train.values)\n    rmse= np.sqrt(-cross_val_score(model, X_train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","5753c3de":"model_xgb = xgboost.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.08, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)","ff573d5d":"score = rmsle_cv(model_xgb)\nxgb_score = score.mean()\nprint(\"XGBRegressor score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","5141624f":"model_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.08, n_estimators=20000,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11\n                             )","411293e5":"score = rmsle_cv(model_lgb)\nlgb_score = score.mean()\nprint(\"LGBMRegressor score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\n\n# 3.206 -> estimators = 1500\n# 3.306 -> estimaotrs = 1000\n# 3.1939 -> estimaotrs = 115000 ","675bbb08":"model_CBR = CatBoostRegressor(iterations=1900,\n                              learning_rate=0.08,\n                              depth=4,\n                              l2_leaf_reg=20,\n                              bootstrap_type='Bernoulli',\n                              subsample=0.6, eval_metric='RMSE',\n                              metric_period=50, od_type='Iter',\n                              od_wait=45, random_seed=17,\n                              allow_writing_files=False, verbose=False\n                                )","82def791":"score = rmsle_cv(model_CBR)\nCBR_score = score.mean()\nprint(\"CatBoostRegressor score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))\n\n# 3.22 -> 2000\n# 3.2255 -> iteration","d53042fc":"model_xgb.fit(X_train, y_train)\nmodel_lgb.fit(X_train, y_train)\nmodel_CBR.fit(X_train, y_train)","62a86b53":"type(X['Cluster'])","516f9e2d":"pred_xgb = model_xgb.predict(test_complete)\npred_lgb = model_lgb.predict(test_complete)\npred_CBR = model_CBR.predict(test_complete)","1dcb8dd3":"pred_ensemble = (pred_xgb + pred_lgb + pred_CBR)\/3","df93cf9b":"# pred_ensemble = (pred_lgb_optuna + pred_xgb + pred_CBR)\/3","45347527":"# total_weight = (1. \/ gb_score) + (1. \/ xgb_score) + (1. \/ lgb_score)\n# pred = (pred_gb * (1. \/ gb_score) + pred_xgb * (1. \/ xgb_score) +  pred_lgb * (1. \/ lgb_score)) \/ total_weight\n# mean_absolute_error(pred, y_val)","ec7128ea":"pd_test_pred = pd.DataFrame(pred_ensemble,columns=[\"pretest\"], index=label_test.index)\npd_test_pred.to_csv('kmeans1.csv')","87546d2b":"# \ub2e4\ub978 \ubaa8\ub378 \uacb0\uacfc\uac12 \ub450\uac1c\ub97c \ud3c9\uade0\ub0b4\ub294 \uc559\uc0c1\ube14","6dacb08e":"# \uc559\uc0c1\ube14\ud574\ubcf4\uae30","a94729f0":"# \ubca0\uc774\uc2a4\ub77c\uc778\ucf54\ub4dc","533f1077":"# result = model_xgb.predict(test_complete)","a93c377c":"# submission = pd.DataFrame(result,columns=[\"pretest\"], index=label_test.index)","44b2a0e4":"# submission.to_csv(\"xgb1.csv\")","88602042":"lgbm \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud0c0 \ubcf5\uc6d0\ud558\uae30","ac439870":"# Model fit & predict","78ef3553":"# lgbm","03a237c0":"\uc624\ubc84\ud53c\ud305 \uc870\uc808 = xgboost, k fold crossvalidation\ud574\ubcf4\uae30, feature engineering \ud574\ubcfc\uac83","7d36721e":"# Submit","ad01f5f0":"\uc6d0\ud56b \uc5c6\uc560\ubc84\ub9ac\uae30","135564d3":"# Optuna test","3d081279":"rmse\ub3c4 \ubcf4\uae30","e030fcca":"random state\ub294 \uac19\uc740 \ubaa8\ub378\uc5d0 \uacb0\uacfc\ub97c \uc5ec\ub7ec\ubc88 \uc2e4\ud589\ud588\uc744\ub54c \uac19\uac8c \ub9cc\ub4e4\uc5b4\uc8fc\uae30 \uc704\ud55c \ub140\uc11d\uc784!","215274a3":"lgbm \uc131\ub2a5 \uac1c\uc88b\uc74c","114ae1f4":"# Data Preprocessing","f922e215":"cv = cross-validation","1a65e604":"\uc548\ub155\ud558\uc138\uc694! \uc774\ubc88 \ub300\ud68c Host \uae40\ub3d9\uaddc\uc785\ub2c8\ub2e4. \uc774\ubc88 \ub300\ud68c\ub294 8\uc6d4\uc5d0 \uc788\uc5c8\ub358 AI \uc9d1\uc911 \uad50\uc721\uc758 \uc5f0\uc7a5\uc120\uc0c1\uc73c\ub85c classical ML \ub370\uc774\ud130\ub97c \uc774\uc6a9\ud55c \ub300\ud68c\uc785\ub2c8\ub2e4. \uc9d1\uc911\uad50\uc721 \ub54c\ub294 \uc22b\uc790\ub85c \uc774\ub8e8\uc5b4\uc9c4 \ub370\uc774\ud130\ub9cc \uc0ac\uc6a9\ud588\ub2e4\uba74, \uc774\ubc88 \ub300\ud68c\ub294 \ub300\ubd80\ubd84 \ubb38\uc790\ub85c \ub41c \ub370\uc774\ud130\uac00 \uc911\uc2ec\uc774 \ub429\ub2c8\ub2e4. categorical variable\uc744 \uc5b4\ub5bb\uac8c \uc798 \ubcc0\ud615\ud558\uace0 \uc0c8\ub85c\uc6b4 feature\ub85c \ub9cc\ub4e4\uc5b4\ub0b4\ub294\uc9c0\uac00 \uc911\uc694\ud55c \ub300\ud68c\uc785\ub2c8\ub2e4.\n\n\uc544\ub798\ub294 \uac04\ub2e8\ud55c \ubca0\uc774\uc2a4\ub77c\uc778\uc785\ub2c8\ub2e4. \ub300\ud68c\uc5d0 submission \ud560 \uc218 \uc788\ub294 \ucd5c\uc18c\ud55c\uc758 \ucf54\ub4dc\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798 \ucf54\ub4dc\ub97c \uae30\ubc18\uc73c\ub85c \ud558\uc5ec \uc810\uc218\ub97c \ud5a5\uc0c1\ud558\uace0 \ub9ac\ub354\ubcf4\ub4dc\uc758 \uc0c1\ub2e8\uc5d0 \uc704\uce58\ud558\uc5ec \ubcf4\uc138\uc694!","17f96736":"n_students \uc774\uc678\uc758 feature\ub4e4\uc740 \ubaa8\ub450 categorical\uc785\ub2c8\ub2e4. (cateogical => \ubb38\uc790 \ud615\ud0dc)","87697bdb":"\uadf8\ub2e4\uc9c0 \uc131\ub2a5\uc774 \uc88b\uc9c4 \uc54a\uc558\ub2e4..........","3ce6f461":"cross validation\ud574\ubcf4\uba74 private \uc5d0 \ub354 \uac00\uae4c\uc6b4 \uc810\uc218\uac00\ub2a5","bb61671a":"k-means clusting\n\n1. \ucd08\ubc18\uc5d0 k\uac1c\uc758 cluster\ub97c \ubaa8\uc744\uc9c0 \uc815\ud558\uae30\n2. \ubb34\uc9c0\uc131\uc73c\ub85c centroid\ub97c \ucc0d\uae30\n3. centroid \uc8fc\ubcc0\uc758 \ub370\uc774\ud130\ub4e4\uc744 \uac10\uc9c0\ud558\uace0 \uadf8\ub140\uc11d\ub4e4\uc758 \ud3c9\uade0 \uac00\uc6b4\ub370\uc758 \uac70\ub9ac\ub97c \uad6c\ud558\uace0 \uadf8\ucabd\uc73c\ub85c centroid\ub97c \uc774\ub3d9\n4. \uc810\uc810 \ub2e4\ub978\ub370\uc774\ud130\ub4e4\ub3c4 centroid\uc758 \uc8fc\ubcc0\uc744\uac10\uc9c0\ud558\uace0 \ub370\uc774\ud130\uac04\uc758 \ud3c9\uade0 \uac00\uc6b4\ub370\uc758 \uac70\ub9ac\ub97c \uad6c\ud55c\ub4a4 \ub370\uc774\ud130\ub4e4\uc758 \uc911\uac04\uc9c0\uc810\uc73c\ub85c \uacc4\uc18d\ud574\uc11c \uc774\ub3d9\n5. cluster\ud615\uc131","a1d2aa14":"# Ensemble_build_Up","44053021":"validaition\ub3c4 \uc559\uc0c1\ube14\ud558\uace0 \ud3c9\uac00","402be7af":"\uaddc\uce59\uc744 \uac00\uc9c0\uace0 \ud574\ubcf4\uae30, cross validation\ud558\uace0, feature engineering, lgbm\uc774 \ucacc \uc88b\uc74c, \uc635\ud29c\ub098 \ub3cc\ub9b4\uac83, \ub274\ub7f4 \ub124\ud2b8\uc6cc\ud06c \ub525\ub178\uc774\uc9d5, \uac04 \uc54c\uace0\ub9ac\uc998\ud574\ubcf4\uba74 \uc635\ud29c\ub098 \ub530\ub77c\uc624\uae38 \uc27d\uc9c0 \uc54a\ub2e4. kmeans\ub098 pca  ","b046cef2":"# K-means","5e265a51":"# xgboost","a7e5b107":"\uc26c\uc6b4\uac70 \uba3c\uc800, \uc2f1\uae00\ubaa8\ub378\ub9c1,","48dc2034":"# **One-hotencoding**","59c3e443":"categorical variable\uc744 \uc22b\uc790\ub85c \uc798 \ubc14\uafb8\uc5b4 \uc8fc\uc5c8\uc2b5\ub2c8\ub2e4. Ordinal Encoder\uc5d0 \ub300\ud574 \uc78a\uc5b4\ubc84\ub9b0 \ubd84\ub4e4\uc740 kaggle course\ub97c \ucc38\uace0\ud558\uc138\uc694.\n\n","7293e20b":"\uc704\uc5d0\uc11c \ubcf4\ub2e4\uc2dc\ud53c \ub370\uc774\ud130\uc5d0 null \uac12\uc740 \uc5c6\uc2b5\ub2c8\ub2e4.","7483c277":"# Model train","35ec3125":"# Super Simple EDA","7b0ae03d":"# Ordinal-encoding","055943cd":"2.68001 lgbm estimater\ub791 learning rate \uc870\uc808","9dab9056":"# **\uc774\uc5b4\ubd99\uc5ec\uc8fc\uae30**","43a553eb":"\uc0c8\ub85c\uc6b4 \uc559\uc0c1\ube14 \uae30\ubc95 \uc2dc\ub3c4\ud574\ubcf4\uae30","5824b1ba":"# Catboostregressor","d4346991":"\uc218\ub3c4 \ub77c\ubca8\ub9c1 \uc559\uc0c1\ube14 \uba40\ud2f0\ubaa8\ub378\uc740 \ub098\uc911\uc5d0 \ub9ce\uc774 \ud55c\ub2e4. \ud558\ub098\uc758 \ubaa8\ub378\uc774 \uc798\ub098\uc62c\ub54c\uc88b\uc74c","6e99d01d":"# \uacb0\uacfc\uac12 ensemble","e5603dbe":"xgb, lgbm, catboost\ud574\ubcf4\uae30, optuna, sudo labeling, validaiton\ud574\ubcf4\uae30, accuracy, mae","f7201704":"\uadfc\ub370 \uc774\ub807\uac8c \uad6c\uae00\ub9c1\ud574\uc11c \uc9c0\ub9ac\ub294 \ubaa8\ub378 \ucc38\uace0\ud574\uc11c \uc801\uc6a9\ud558\uba74 \uc2e4\ub825\uc774 \uacfc\uc5f0 \ub298\uc9c0 \uac71\uc815\ub40c"}}