{"cell_type":{"f1f34376":"code","af5282e7":"code","150fafa4":"code","28d1bdf4":"code","67dea541":"code","ded6cbf2":"code","ae87ef2c":"code","2fcab305":"code","db1e758a":"code","861aa5d6":"code","85b817cf":"code","3ddb1186":"code","c6d06ba6":"code","b12e01fd":"code","c53f7bc0":"code","a470d3d8":"code","eccedf51":"code","80f16348":"code","a40abcce":"markdown","a12902cb":"markdown","a3f3a73d":"markdown","c0f5bab7":"markdown","0ed8df65":"markdown","8f88fbe7":"markdown","7e0f9ecd":"markdown","41f7d738":"markdown"},"source":{"f1f34376":"import numpy as np \nimport pandas as pd \n\nimport sklearn.model_selection as model_selection\n\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.compose import make_column_transformer\n\n#For Missing Value Treatment\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.impute import KNNImputer\n\n#For Binning and creating Dummy Variables\nfrom sklearn.feature_selection import SelectKBest, chi2\nfrom sklearn.preprocessing import KBinsDiscretizer, OneHotEncoder\nfrom sklearn.preprocessing import QuantileTransformer, RobustScaler\n\nfrom sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\n\nfrom sklearn.metrics import mean_squared_error","af5282e7":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","150fafa4":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\nsub_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","28d1bdf4":"train.info()","67dea541":"y = train['SalePrice']\nX = train.drop(['SalePrice','Id'], axis = 1)","ded6cbf2":"X_train, X_test, y_train, y_test = model_selection.train_test_split(X,y,test_size=0.2, random_state = 200)","ae87ef2c":"X.dtypes.value_counts()","2fcab305":"#Condidering Numerical Features only\nnumerical_features = [c for c, dtype in zip(X.columns, X.dtypes) if dtype.kind in ['i','f'] ]\ncategorial_features = [c for c, dtype in zip(X.columns, X.dtypes) if dtype.kind not in ['i','f'] ]\n\nprint('Numerical : ' + str(numerical_features))\nprint('Categorical : ' + str(categorial_features))","db1e758a":"#Data Processing Steps\npreprocessor = make_column_transformer(\n    \n    (make_pipeline(\n    KNNImputer(n_neighbors=10),\n    RobustScaler(),\n    KBinsDiscretizer(n_bins = 6),\n    SelectKBest(chi2, k=15),\n    ), numerical_features),\n    \n    (make_pipeline(\n    SimpleImputer(strategy = 'most_frequent'),\n    OneHotEncoder(handle_unknown='ignore'),\n    ), categorial_features)\n    \n)","861aa5d6":"Model Steps\nENet = make_pipeline(preprocessor, ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))\nlasso = make_pipeline(preprocessor, Lasso(alpha =0.0005, random_state=1))\nGBoost = make_pipeline(preprocessor, GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5))","85b817cf":"ENet.fit(X_train, y_train)\nlasso.fit(X_train, y_train)\nGBoost.fit(X_train, y_train)","3ddb1186":"train_score = ENet.score(X_train,y_train)\ntest_score = ENet.score(X_test,y_test)\n\nprint(f'Train Accuracy : {train_score:.3f}')\nprint(f'Test Accuracy : {test_score:.3f}')","c6d06ba6":"train_score = lasso.score(X_train,y_train)\ntest_score = lasso.score(X_test,y_test)\n\nprint(f'Train Accuracy : {train_score:.3f}')\nprint(f'Test Accuracy : {test_score:.3f}')","b12e01fd":"train_score = GBoost.score(X_train,y_train)\ntest_score = GBoost.score(X_test,y_test)\n\nprint(f'Train Accuracy : {train_score:.3f}')\nprint(f'Test Accuracy : {test_score:.3f}')","c53f7bc0":"#Check RMSE\ny_pred = GBoost.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","a470d3d8":"y_sub_pred = GBoost.predict(sub_test.drop(['Id'], axis = 1))","eccedf51":"submission_df = pd.DataFrame({'Id' : sub_test['Id'], 'SalePrice' : y_sub_pred})","80f16348":"submission_df.to_csv('Reg_Model_Pipeline.csv', index = False)\nsubmission_df.head()","a40abcce":"# Check Accuracy","a12902cb":"# Split Data into Train and test ","a3f3a73d":"# Make Submission","c0f5bab7":"# Build Pipeline","0ed8df65":"# Import Data","8f88fbe7":"## GBoost performs best, so we will choose this for submission","7e0f9ecd":"# Fit Model","41f7d738":"# Import Libraries"}}