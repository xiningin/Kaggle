{"cell_type":{"eaa181ad":"code","f0ba893b":"code","4b638a76":"code","d01c1ff8":"code","f6d1994e":"code","7f94e985":"code","b9bd833d":"code","286ec7b3":"code","8527e5da":"code","c08c3f1f":"code","67d97092":"code","2bfd774f":"code","ec6db4b3":"markdown","8a2f95fe":"markdown","e478b664":"markdown","6312521d":"markdown","fb0ed390":"markdown","4484b726":"markdown","5f21e452":"markdown","f2d8e7b6":"markdown","568618b8":"markdown","bc80b715":"markdown","adbdc362":"markdown","ffd3a5b2":"markdown","a2a69c8f":"markdown","6587445e":"markdown","a83f8c5c":"markdown"},"source":{"eaa181ad":"import json\nfrom igraph import *\nfrom os import walk\nimport pandas as pd\nimport itertools\nimport plotly.express as px\n","f0ba893b":"pd.set_option(\"max_colwidth\", -1)","4b638a76":"path_to_challenge = '\/kaggle\/input\/CORD-19-research-challenge\/2020-03-13\/'\nuse_types = ['biorxiv_medrxiv', 'comm_use_subset', 'noncomm_use_subset', 'pmc_custom_license']","d01c1ff8":"def get_use_type_path(path, use_type):\n    use_dir_path = path + use_type + \"\/\" + use_type + \"\/\"\n    f = []\n    #####obtain through all json files in use type directory\n    for (dirpath, dirnames, filenames) in walk(use_dir_path):\n        f.extend(filenames)\n    full_paths = [use_dir_path + file for file in f]\n    return full_paths\n\ndef extract_title_and_author_create_tups(path):\n    title_and_author_results = []\n    with open(path) as file:\n        data = json.load(file)\n        title = data.get('metadata').get('title')\n        paper_authors = [x['first'] + \"|\" +\\\n                         '|'.join(x['middle'])+ \"|\" +\\\n                         x['last']+ \"|\" +\\\n                         x['suffix'] \n                         for x in data.get('metadata').get('authors')]\n        bib_titles = [i[1]['title'] for i in data.get('bib_entries').items()]\n        bib_authors = [i[1]['authors'] for i in data.get('bib_entries').items()]\n        bib_authors_formatted = [x[0]['first'] + \"|\" +\\\n                         '|'.join(x[0]['middle'])+ \"|\" +\\\n                         x[0]['last'] + \"|\" +\\\n                         x[0]['suffix']\n                         for x in bib_authors if len(x) > 0]\n        \n        bib_tup = [(title, bib) for bib in bib_titles]\n        author_tup = list(itertools.product(paper_authors, bib_authors_formatted))\n\n        title_and_author_results.append(bib_tup)\n        title_and_author_results.append(author_tup)\n        \n        return title_and_author_results\n\ndef format_data_to_nodes_and_edges_for_graph(use_types, home_path):\n    paths_to_file = [get_use_type_path(home_path,use) for use in use_types]\n    paths_to_file_flattened =  [item for sublist in paths_to_file for item in sublist]\n    \n    tups = [extract_title_and_author_create_tups(path) for path in paths_to_file_flattened]\n    \n    \n    bibs =  [item[0] for item in tups]\n    bibs_edges =  [item for sublist in bibs for item in sublist]\n    bibs_nodes =  [list(elem) for elem in bibs_edges]\n    bibs_nodes = [item for sublist in bibs_nodes for item in sublist]\n    bibs_nodes = set(bibs_nodes)\n    \n    authors = [item[1] for item in tups]\n    authors_edges = [item for sublist in authors for item in sublist]\n    authors_nodes =  [list(elem) for elem in authors_edges]\n    authors_nodes = [item for sublist in authors_nodes for item in sublist]\n    authors_nodes = set(authors_nodes)\n    \n    return bibs_nodes, bibs_edges,authors_nodes, authors_edges\n\ndef generate_graph(nodes, edges, is_directed = True):\n    print('generating graph')\n    g = Graph(directed=is_directed)\n    g.add_vertices(list(nodes))\n    g.add_edges(edges)\n\n\n    return g\n\ndef betweenness_estimate_df(graph, node_type, is_directed=True):\n    print('calculating estimate')\n\n    estimate = graph.betweenness(directed=is_directed)\n    \n    data = [list(a) for a in zip(graph.vs['name'], estimate)]\n    df = pd.DataFrame.from_records(data)\n    df.columns = [node_type, 'Centrality']\n\n    return df\n\ndef top_n_most_influential(df, top_n = 100, source = '-All'):\n    x_value = df.columns[0]\n    title = \"Top \" + str(top_n) + \" Most Inflential \" + x_value + \"s - \" + source\n    top_n_df = df.sort_values(['Centrality'],\n                                  ascending = False).iloc[0:top_n].reset_index(drop=True)\n\n\n    fig = px.bar(top_n_df,\n                 x=x_value, y=\"Centrality\",\n                 height=400)\n    fig.update_layout(\n    title = title,\n    xaxis_title=\"\")\n\n    fig.show()\n\n    return top_n_df","f6d1994e":"bibs_nodes, bibs_edges, author_nodes, author_edges = \\\nformat_data_to_nodes_and_edges_for_graph(use_types, path_to_challenge)","7f94e985":"bibs_graph = generate_graph(bibs_nodes, bibs_edges)","b9bd833d":"bibs_df = betweenness_estimate_df(bibs_graph, 'Title')","286ec7b3":"top_n_most_influential(bibs_df)","8527e5da":"author_graph = generate_graph(author_nodes, author_edges)","c08c3f1f":"author_df = betweenness_estimate_df(author_graph, 'Author')","67d97092":"top_n_most_influential(author_df)","2bfd774f":"for use in use_types:\n    print(use)\n    bibs_nodes, bibs_edges, author_nodes, author_edges = \\\n        format_data_to_nodes_and_edges_for_graph([use], path_to_challenge)\n    print(use + \"- Title\")\n    bibs_graph = generate_graph(bibs_nodes, bibs_edges)\n    bibs_df = betweenness_estimate_df(bibs_graph, 'Title')\n    top_n_most_influential(bibs_df, source = use)  \n    print(use + \"- Author\")\n    author_graph = generate_graph(author_nodes, author_edges)\n    author_df = betweenness_estimate_df(author_graph, 'Author')\n    top_n_most_influential(author_df, source=use)","ec6db4b3":"![image.png](attachment:image.png)","8a2f95fe":"## <center> **Extract Author and Title**<\/center>\n* Title and Author are located in the paper in 'title' and 'authors' respectively\n* Title and Author for cited papers are located in the 'bib_entries'\n* Authors are concatenated by a pipe '|', as they have multiple keys to their name (first, middle, last, suffix)","e478b664":"### Constants","6312521d":"### Title (Bibliography) Betweenness Centrality","fb0ed390":"<sup>1<\/sup>https:\/\/neo4j.com\/docs\/graph-algorithms\/current\/labs-algorithms\/betweenness-centrality\/","4484b726":"# <center>**Betweenness Centrality of Bibliographic References**<\/center>\n### Using igraph to calculate the influence a study has on other studies, through the bibliography references\n","5f21e452":"## Functions","f2d8e7b6":"### Title (Bibliography) Graph","568618b8":"## <center>**Graph Model**<\/center>\n* Each node will represent a title or author in their own respecitve graphs\n* Most nodes will be connected through bibliography entry, referencing which paper they are quoting\n![image.png](attachment:image.png)","bc80b715":"### Author Graph","adbdc362":"## Betweenness Centrality\n> Use Case: \"Betweenness centrality is a way of detecting the amount of influence a node has over the flow of information in a graph....\"<sup>1<\/sup>\n\n>Calculation:\"The Betweenness Centrality algorithm calculates the shortest (weighted) path between every pair of nodes in a connected graph, using the breadth-first search algorithm. Each node receives a score, based on the number of these shortest paths that pass through the node. Nodes that most frequently lie on these shortest paths will have a higher betweenness centrality score. \"<sup>1<\/sup>\n\n* Let's find out which paper and which author has been the most influential to other papers and authors.","ffd3a5b2":"## Author Betweenness Centrality","a2a69c8f":"### Any constructive criticism on ways to optimize or perform a better analysis would be greatly appreciated.  \n# Stay Healthy, everyone!","6587445e":"## By Source","a83f8c5c":"### import libraries"}}