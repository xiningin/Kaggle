{"cell_type":{"663727a4":"code","42b2df3d":"code","1053b89c":"code","7a39c686":"code","3be7dc04":"code","6be1aa56":"code","02a41862":"code","dbe9c182":"code","a42f8141":"code","b596f827":"code","f4b2a469":"code","9cb5c4e1":"code","0cce226e":"code","c27305f9":"code","03a6a28a":"code","8f13ad10":"code","6f89a83b":"code","376356cc":"code","066c8fed":"code","ddc13e55":"code","0c5f64f8":"code","81534b14":"code","b9def64b":"code","f0925c92":"code","89e9c8cb":"code","3c690826":"code","a1163ee5":"code","b753eb4a":"code","8b6eabdc":"code","11e726fa":"code","5bc5832d":"code","dae75198":"code","f1c19004":"markdown"},"source":{"663727a4":"from IPython.core.display import display, HTML\nfrom sklearn.model_selection import KFold,GroupKFold\nfrom tqdm import tqdm\nimport pandas as pd\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport glob\nimport os\nimport gc\n\nfrom joblib import Parallel, delayed\n\nfrom sklearn import preprocessing, model_selection\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import r2_score\nimport lightgbm as lgb\n\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport numpy.matlib\n\nSTACK=True\n\npath_submissions = '\/'\n\ntarget_name = 'target'\nscores_folds = {}\n\ndata_dir = '..\/input\/optiver-realized-volatility-prediction\/'","42b2df3d":"#\u3068\u308a\u3042\u3048\u305aint32\u306b\u3057\u3066\u3044\u3044\u5909\u6570\u3092\u8fd4\u3059\ndef reduce_64_int(df, verbose=True):\n    li=[]\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    pass\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    pass\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    li.append(col)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    pass\n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    pass\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    pass\n                else:\n                    pass\n    return li\n\ndef reduce_64(df, verbose=True):\n    li=[]\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    pass\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    pass\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    pass\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    pass\n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    pass\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    li.append(col)\n                else:\n                    pass\n    return li\n","1053b89c":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df\n\ndef _roll(a, shift):\n    \"\"\" Roll 1D array elements. Improves the performance of numpy.roll()\"\"\"\n    if not isinstance(a, np.ndarray):\n        a = np.asarray(a)\n    idx = shift % len(a)\n    return np.concatenate([a[-idx:], a[:-idx]])\n\ndef skewness(x):\n    if not isinstance(x, pd.Series):\n        x = pd.Series(x)\n    return pd.Series.skew(x)\n\ndef kurtosis(x):\n    if not isinstance(x, pd.Series):\n        x = pd.Series(x)\n    return pd.Series.kurtosis(x)\n\ndef abs_energy(x):\n    if not isinstance(x, (np.ndarray, pd.Series)):\n        x = np.asarray(x)\n    return np.dot(x, x)\n\ndef minimum(x):\n    return np.min(x)\n\ndef maximum(x):\n    return np.max(x)\n\ndef max_over_min(series):\n    if len(series)<2:\n        return 0\n    if np.min(series) == 0:\n        return np.nan\n    return np.max(series)\/np.min(series)\n\ndef mean_abs_change(x):\n    return np.mean(np.abs(np.diff(x)))\n\ndef number_peaks(x, n):\n    \"\"\"\n    Calculates the number of peaks of at least support n in the time series x. A peak of support n is defined as a\n    subsequence of x where a value occurs, which is bigger than its n neighbours to the left and to the right.\n    \"\"\"\n    x_reduced = x[n:-n]\n\n    res = None\n    for i in range(1, n + 1):\n        result_first = x_reduced > _roll(x, i)[n:-n]\n\n        if res is None:\n            res = result_first\n        else:\n            res &= result_first\n\n        res &= x_reduced > _roll(x, -i)[n:-n]\n    return np.sum(res)\n\nnumber_peaks_2 = lambda x: number_peaks(x,2)\nnumber_peaks_2.__name__ = 'number_peaks_2'\n\nnumber_peaks_5 = lambda x: number_peaks(x,5)\nnumber_peaks_5.__name__ = 'number_peaks_5'\n\nnumber_peaks_10 = lambda x: number_peaks(x,10)\nnumber_peaks_10.__name__ = 'number_peaks_10'\n\ndef count(series):\n    return series.size\n\ndef absolute_sum_of_changes(x):\n    return np.sum(np.abs(np.diff(x)))\n\ndef variance_std_ratio(x):\n    y = np.var(x)\n    if y != 0:\n        return y\/np.sqrt(y)\n    else:\n        return np.nan\n\n\n# Function to calculate the root mean squared percentage error\ndef rmspe(y_true, y_pred):\n    return np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true)))\n\n# Function to early stop with root mean squared percentage error\ndef feval_rmspe(y_pred, lgb_train):\n    y_true = lgb_train.get_label()\n    return 'RMSPE', rmspe(y_true, y_pred), False\n\ndef log_return(series):\n    return np.log(series).diff()\n\ndef realized_volatility(series):\n    return np.sqrt(np.sum(series**2))\n\ndef count_unique(series):\n    return len(np.unique(series))\n\ndef read_train_test():\n    train = pd.read_csv(data_dir+'train.csv')\n    test = pd.read_csv(data_dir+'test.csv')\n    # Create a key to merge with book and trade data\n    train['row_id'] = train['stock_id'].astype(str) + '-' + train['time_id'].astype(str)\n    test['row_id'] = test['stock_id'].astype(str) + '-' + test['time_id'].astype(str)\n    return train,test\n\n\n# Function to calculate first WAP\ndef calc_wap1(df):\n    wap = (df['bid_price1'] * df['ask_size1'] + df['ask_price1'] * df['bid_size1']) \/ (df['bid_size1'] + df['ask_size1'])\n    return wap\n\n# Function to calculate second WAP\ndef calc_wap2(df):\n    wap = (df['bid_price2'] * df['ask_size2'] + df['ask_price2'] * df['bid_size2']) \/ (df['bid_size2'] + df['ask_size2'])\n    return wap\n\ndef calc_wap3(df):\n    wap = (df['bid_price1'] * df['bid_size1'] + df['ask_price1'] * df['ask_size1']) \/ (df['bid_size1'] + df['ask_size1'])\n    return wap\n\ndef calc_wap4(df):\n    wap = (df['bid_price2'] * df['bid_size2'] + df['ask_price2'] * df['ask_size2']) \/ (df['bid_size2'] + df['ask_size2'])\n    return wap\n\n\n# Function to calculate the root mean squared percentage error\ndef rmspe(y_true, y_pred):\n    return np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true)))\n\n# Function to early stop with root mean squared percentage error\ndef feval_rmspe(y_pred, lgb_train):\n    y_true = lgb_train.get_label()\n    return 'RMSPE', rmspe(y_true, y_pred), False","7a39c686":"# Function to preprocess book data (for each stock id)\ndef book_preprocessor(file_path):\n    df = pd.read_parquet(file_path)\n    # Calculate Wap\n    df['wap1'] = calc_wap1(df)\n    df['wap2'] = calc_wap2(df)\n    df['wap3'] = calc_wap3(df)\n    df['wap4'] = calc_wap4(df)\n    # Calculate log returns\n    df['log_return1'] = df.groupby(['time_id'])['wap1'].apply(log_return)\n    df['log_return2'] = df.groupby(['time_id'])['wap2'].apply(log_return)\n    df['log_return3'] = df.groupby(['time_id'])['wap3'].apply(log_return)\n    df['log_return4'] = df.groupby(['time_id'])['wap4'].apply(log_return)\n    # Calculate wap balance\n    df['wap_balance'] = abs(df['wap1'] - df['wap2'])\n    # Calculate spread\n    df['price_spread'] = (df['ask_price1'] - df['bid_price1']) \/ ((df['ask_price1'] + df['bid_price1']) \/ 2)\n    df['price_spread2'] = (df['ask_price2'] - df['bid_price2']) \/ ((df['ask_price2'] + df['bid_price2']) \/ 2)\n    df['bid_spread'] = df['bid_price1'] - df['bid_price2']\n    df['ask_spread'] = df['ask_price1'] - df['ask_price2']\n    df[\"bid_ask_spread\"] = abs(df['bid_spread'] - df['ask_spread'])\n    df['total_volume'] = (df['ask_size1'] + df['ask_size2']) + (df['bid_size1'] + df['bid_size2'])\n    df['volume_imbalance'] = abs((df['ask_size1'] + df['ask_size2']) - (df['bid_size1'] + df['bid_size2']))\n    df['bid_ask_ratio'] = (df['ask_size1']+df['ask_size2'])\/(df['bid_size1']+df['bid_size2'])\n\n    # Dict for aggregations\n    create_feature_dict = {\n        'wap1': [np.sum, np.std,skewness,kurtosis,abs_energy,minimum,maximum,max_over_min,number_peaks_5,mean_abs_change,absolute_sum_of_changes,variance_std_ratio],\n        'wap2': [np.sum, np.std,skewness,kurtosis,abs_energy,minimum,maximum,max_over_min,number_peaks_5,mean_abs_change,absolute_sum_of_changes,variance_std_ratio],\n        'wap3': [np.sum, np.std,skewness,kurtosis,abs_energy,minimum,maximum,max_over_min,number_peaks_5,mean_abs_change,absolute_sum_of_changes,variance_std_ratio],\n        'wap4': [np.sum, np.std,skewness,kurtosis,abs_energy,minimum,maximum,max_over_min,number_peaks_5,mean_abs_change,absolute_sum_of_changes,variance_std_ratio],\n        'log_return1': [np.std,np.var,minimum,maximum,variance_std_ratio,realized_volatility],\n        'log_return2': [np.std,np.var,minimum,maximum,variance_std_ratio,realized_volatility],\n        'log_return3': [np.std,np.var,minimum,maximum,variance_std_ratio,realized_volatility],\n        'log_return4': [np.std,np.var,minimum,maximum,variance_std_ratio,realized_volatility],\n        'wap_balance': [np.sum, np.max],\n        'price_spread':[np.sum, np.max,abs_energy,minimum,maximum,variance_std_ratio],\n        'price_spread2':[np.sum, np.max,abs_energy,minimum,maximum,variance_std_ratio],\n        'bid_spread':[np.sum, np.max,np.std,abs_energy,minimum,maximum,number_peaks_5,mean_abs_change],\n        'ask_spread':[np.sum, np.max,np.std,abs_energy,minimum,maximum,number_peaks_5,mean_abs_change],\n        'total_volume':[np.sum, np.max],\n        'volume_imbalance':[np.sum, np.max],\n        'bid_ask_spread':[np.sum, np.max,np.std,abs_energy,minimum,maximum,number_peaks_5,mean_abs_change],\n        'bid_ask_ratio':[np.sum, np.mean, np.std],\n    }\n    create_feature_dict_time = {\n        'log_return1': [np.std,np.var,minimum,maximum,variance_std_ratio,realized_volatility],\n        'log_return2': [np.std,np.var,minimum,maximum,variance_std_ratio,realized_volatility],\n        'log_return3': [np.std,np.var,minimum,maximum,variance_std_ratio,realized_volatility],\n        'log_return4': [np.std,np.var,minimum,maximum,variance_std_ratio,realized_volatility],\n    }\n    \n    \n    # Function to get group stats for different windows (seconds in bucket)\n    def get_stats_window(fe_dict,seconds_in_bucket, add_suffix = False):\n        # Group by the window\n        df_feature = df[df['seconds_in_bucket'] >= seconds_in_bucket].groupby(['time_id']).agg(fe_dict).reset_index()\n        # Rename columns joining suffix\n        df_feature.columns = ['_'.join(col) for col in df_feature.columns]\n        # Add a suffix to differentiate windows\n        if add_suffix:\n            df_feature = df_feature.add_suffix('_' + str(seconds_in_bucket))\n        return df_feature\n    \n    # Get the stats for different windows\n    df_feature = get_stats_window(create_feature_dict,seconds_in_bucket = 0, add_suffix = False)\n    df_feature_500 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 500, add_suffix = True)\n    df_feature_400 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 400, add_suffix = True)\n    df_feature_300 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 300, add_suffix = True)\n    df_feature_200 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 200, add_suffix = True)\n    df_feature_100 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 100, add_suffix = True)\n\n    # Merge all\n    df_feature = df_feature.merge(df_feature_500, how = 'left', left_on = 'time_id_', right_on = 'time_id__500')\n    df_feature = df_feature.merge(df_feature_400, how = 'left', left_on = 'time_id_', right_on = 'time_id__400')\n    df_feature = df_feature.merge(df_feature_300, how = 'left', left_on = 'time_id_', right_on = 'time_id__300')\n    df_feature = df_feature.merge(df_feature_200, how = 'left', left_on = 'time_id_', right_on = 'time_id__200')\n    df_feature = df_feature.merge(df_feature_100, how = 'left', left_on = 'time_id_', right_on = 'time_id__100')\n    # Drop unnecesary time_ids\n    df_feature.drop(['time_id__500','time_id__400', 'time_id__300', 'time_id__200','time_id__100'], axis = 1, inplace = True)\n    \n    \n    # Create row_id so we can merge\n    stock_id = file_path.split('=')[1]\n    df_feature['row_id'] = df_feature['time_id_'].apply(lambda x: f'{stock_id}-{x}')\n    df_feature.drop(['time_id_'], axis = 1, inplace = True)\n    return df_feature\n\n# Function to preprocess trade data (for each stock id)\ndef trade_preprocessor(file_path):\n    df = pd.read_parquet(file_path)\n    df['log_return'] = df.groupby('time_id')['price'].apply(log_return)\n    df['amount']=df['price']*df['size']\n    # Dict for aggregations\n    create_feature_dict = {\n        'log_return': [np.std,np.var,minimum,maximum,variance_std_ratio,realized_volatility],\n        'seconds_in_bucket':[count_unique],\n        'size':[np.sum, np.max, np.min],\n        'order_count':[np.sum,np.max],\n        'amount':[np.sum,np.max,np.min],\n    }\n    create_feature_dict_time = {\n        'log_return': [np.std,np.var,minimum,maximum,variance_std_ratio,realized_volatility],\n        'seconds_in_bucket':[count_unique],\n        'size':[np.sum],\n        'order_count':[np.sum],\n    }\n    # Function to get group stats for different windows (seconds in bucket)\n    def get_stats_window(fe_dict,seconds_in_bucket, add_suffix = False):\n        # Group by the window\n        df_feature = df[df['seconds_in_bucket'] >= seconds_in_bucket].groupby(['time_id']).agg(fe_dict).reset_index()\n        # Rename columns joining suffix\n        df_feature.columns = ['_'.join(col) for col in df_feature.columns]\n        # Add a suffix to differentiate windows\n        if add_suffix:\n            df_feature = df_feature.add_suffix('_' + str(seconds_in_bucket))\n        return df_feature\n    \n\n    # Get the stats for different windows\n    df_feature = get_stats_window(create_feature_dict,seconds_in_bucket = 0, add_suffix = False)\n    df_feature_500 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 500, add_suffix = True)\n    df_feature_400 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 400, add_suffix = True)\n    df_feature_300 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 300, add_suffix = True)\n    df_feature_200 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 200, add_suffix = True)\n    df_feature_100 = get_stats_window(create_feature_dict_time,seconds_in_bucket = 100, add_suffix = True)\n    \n    def tendency(price, vol):    \n        df_diff = np.diff(price)\n        val = (df_diff\/price[1:])*100\n        power = np.sum(val*vol[1:])\n        return(power)\n    \n    lis = []\n    for n_time_id in df['time_id'].unique():\n        df_id = df[df['time_id'] == n_time_id]        \n        tendencyV = tendency(df_id['price'].values, df_id['size'].values)      \n        f_max = np.sum(df_id['price'].values > np.mean(df_id['price'].values))\n        f_min = np.sum(df_id['price'].values < np.mean(df_id['price'].values))\n        df_max =  np.sum(np.diff(df_id['price'].values) > 0)\n        df_min =  np.sum(np.diff(df_id['price'].values) < 0)\n        # new\n        abs_diff = np.median(np.abs( df_id['price'].values - np.mean(df_id['price'].values)))        \n        energy = np.mean(df_id['price'].values**2)\n        iqr_p = np.percentile(df_id['price'].values,75) - np.percentile(df_id['price'].values,25)\n        \n        # vol vars\n        \n        abs_diff_v = np.median(np.abs( df_id['size'].values - np.mean(df_id['size'].values)))        \n        energy_v = np.sum(df_id['size'].values**2)\n        iqr_p_v = np.percentile(df_id['size'].values,75) - np.percentile(df_id['size'].values,25)\n        \n        lis.append({'time_id':n_time_id,'tendency':tendencyV,'f_max':f_max,'f_min':f_min,'df_max':df_max,'df_min':df_min,\n                   'abs_diff':abs_diff,'energy':energy,'iqr_p':iqr_p,'abs_diff_v':abs_diff_v,'energy_v':energy_v,'iqr_p_v':iqr_p_v})\n    \n    df_lr = pd.DataFrame(lis)\n        \n   \n    df_feature = df_feature.merge(df_lr, how = 'left', left_on = 'time_id_', right_on = 'time_id')\n    \n    # Merge all\n    df_feature = df_feature.merge(df_feature_500, how = 'left', left_on = 'time_id_', right_on = 'time_id__500')\n    df_feature = df_feature.merge(df_feature_400, how = 'left', left_on = 'time_id_', right_on = 'time_id__400')\n    df_feature = df_feature.merge(df_feature_300, how = 'left', left_on = 'time_id_', right_on = 'time_id__300')\n    df_feature = df_feature.merge(df_feature_200, how = 'left', left_on = 'time_id_', right_on = 'time_id__200')\n    df_feature = df_feature.merge(df_feature_100, how = 'left', left_on = 'time_id_', right_on = 'time_id__100')\n    # Drop unnecesary time_ids\n    df_feature.drop(['time_id__500','time_id__400', 'time_id__300', 'time_id__200','time_id','time_id__100'], axis = 1, inplace = True)\n    \n    \n    df_feature = df_feature.add_prefix('trade_')\n    stock_id = file_path.split('=')[1]\n    df_feature['row_id'] = df_feature['trade_time_id_'].apply(lambda x:f'{stock_id}-{x}')\n    df_feature.drop(['trade_time_id_'], axis = 1, inplace = True)\n    return df_feature\n\n# Function to get group stats for the stock_id and time_id\ndef get_time_stock(df):\n    vol_cols = ['log_return1_realized_volatility', 'log_return2_realized_volatility', 'log_return1_realized_volatility_400', 'log_return2_realized_volatility_400', \n                'log_return1_realized_volatility_300', 'log_return2_realized_volatility_300', 'log_return1_realized_volatility_200', 'log_return2_realized_volatility_200', \n                'trade_log_return_realized_volatility', 'trade_log_return_realized_volatility_400', 'trade_log_return_realized_volatility_300', 'trade_log_return_realized_volatility_200']\n\n\n    # Group by the stock id\n    df_stock_id = df.groupby(['stock_id'])[vol_cols].agg(['mean', 'std', 'max', 'min', ]).reset_index()\n    # Rename columns joining suffix\n    df_stock_id.columns = ['_'.join(col) for col in df_stock_id.columns]\n    df_stock_id = df_stock_id.add_suffix('_' + 'stock')\n\n    # Group by the stock id\n    df_time_id = df.groupby(['time_id'])[vol_cols].agg(['mean', 'std', 'max', 'min', ]).reset_index()\n    # Rename columns joining suffix\n    df_time_id.columns = ['_'.join(col) for col in df_time_id.columns]\n    df_time_id = df_time_id.add_suffix('_' + 'time')\n    \n    # Merge with original dataframe\n    df = df.merge(df_stock_id, how = 'left', left_on = ['stock_id'], right_on = ['stock_id__stock'])\n    df = df.merge(df_time_id, how = 'left', left_on = ['time_id'], right_on = ['time_id__time'])\n    df.drop(['stock_id__stock', 'time_id__time'], axis = 1, inplace = True)\n    return df\n    \n# Funtion to make preprocessing function in parallel (for each stock id)\ndef preprocessor(list_stock_ids, is_train = True):\n    \n    # Parrallel for loop\n    def for_joblib(stock_id):\n        # Train\n        if is_train:\n            file_path_book = data_dir + \"book_train.parquet\/stock_id=\" + str(stock_id)\n            file_path_trade = data_dir + \"trade_train.parquet\/stock_id=\" + str(stock_id)\n        # Test\n        else:\n            file_path_book = data_dir + \"book_test.parquet\/stock_id=\" + str(stock_id)\n            file_path_trade = data_dir + \"trade_test.parquet\/stock_id=\" + str(stock_id)\n    \n        # Preprocess book and trade data and merge them\n        df_tmp = pd.merge(book_preprocessor(file_path_book), trade_preprocessor(file_path_trade), on = 'row_id', how = 'left')\n        \n        # Return the merge dataframe\n        return df_tmp\n    \n    # Use parallel api to call paralle for loop\n    df = Parallel(n_jobs = -1, verbose = 1)(delayed(for_joblib)(stock_id) for stock_id in list_stock_ids)\n    # Concatenate all the dataframes that return from Parallel\n    df = pd.concat(df, ignore_index = True)\n    return df\n","3be7dc04":"#\u5229\u7528\u30ab\u30e9\u30e0\u8a2d\u5b9a\n#USE_COLS=pd.read_pickle(\"..\/input\/train-data-opt\/train_f_remove.pickle\").columns\nUSE_COLS=pd.read_pickle(\"..\/input\/train-data-opt\/train_f_marutico.pickle\").columns\nUSE_COLS_TEST=[i for i in USE_COLS if \"target\"!=i]\n\n# Read train and test\n_train,test = read_train_test()\ntrain =pd.read_pickle(\"..\/input\/train-data-opt\/train_f.pickle\")\n\n# Get unique stock ids \n#train_stock_ids = train['stock_id'].unique()\n# Preprocess them using Parallel and our single stock id functions\n#train_ = preprocessor(train_stock_ids, is_train = True)\n#train = train.merge(train_, on = ['row_id'], how = 'left')\n\n# Get unique stock ids \ntest_stock_ids = test['stock_id'].unique()\n\n# Preprocess them using Parallel and our single stock id functions\ntest_ = preprocessor(test_stock_ids, is_train = False)\ntest = test.merge(test_, on = ['row_id'], how = 'left')\n\n# Get group stats of time_id and stock_id\n#train = get_time_stock(train)\ntest = get_time_stock(test)\n\nimport gc\ndel _train,test_stock_ids\ngc.collect()\n\n#\u5916\u308c\u5024\u306e\u4ee3\u8868\n#MED=train[train[\"target\"]>0.02][\"target\"].mean()","6be1aa56":"# replace by order sum (tau)\ntrain['size_tau'] = np.sqrt( 1\/ train['trade_seconds_in_bucket_count_unique'] )\ntest['size_tau'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique'] )\ntrain['size_tau_400'] = np.sqrt( 1\/ train['trade_seconds_in_bucket_count_unique_400'] )\ntest['size_tau_400'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique_400'] )\ntrain['size_tau_300'] = np.sqrt( 1\/ train['trade_seconds_in_bucket_count_unique_300'] )\ntest['size_tau_300'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique_300'] )\ntrain['size_tau_200'] = np.sqrt( 1\/ train['trade_seconds_in_bucket_count_unique_200'] )\ntest['size_tau_200'] = np.sqrt( 1\/ test['trade_seconds_in_bucket_count_unique_200'] )\n\ntrain['size_tau2'] = np.sqrt( 1\/ train['trade_order_count_sum'] )\ntest['size_tau2'] = np.sqrt( 1\/ test['trade_order_count_sum'] )\ntrain['size_tau2_400'] = np.sqrt( 0.33\/ train['trade_order_count_sum'] )\ntest['size_tau2_400'] = np.sqrt( 0.33\/ test['trade_order_count_sum'] )\ntrain['size_tau2_300'] = np.sqrt( 0.5\/ train['trade_order_count_sum'] )\ntest['size_tau2_300'] = np.sqrt( 0.5\/ test['trade_order_count_sum'] )\ntrain['size_tau2_200'] = np.sqrt( 0.66\/ train['trade_order_count_sum'] )\ntest['size_tau2_200'] = np.sqrt( 0.66\/ test['trade_order_count_sum'] )\n\n# delta tau\ntrain['size_tau2_d'] = train['size_tau2_400'] - train['size_tau2']\ntest['size_tau2_d'] = test['size_tau2_400'] - test['size_tau2']\n\ncolNames = [col for col in list(train.columns)\n            if col not in {\"stock_id\", \"time_id\", \"target\", \"row_id\"}]\nlen(colNames)","02a41862":"#float64\u309232\u306b\u5909\u63db\nfeatures = [col for col in train.columns if col not in {\"time_id\", \"target\", \"row_id\"}]\ncols=reduce_64(train[features])\ntrain[cols]=train[cols].astype(\"float32\")\ncols=reduce_64(test[features])\ntest[cols]=test[cols].astype(\"float32\")\n\ncols=reduce_64_int(train[features])\ntrain[cols]=train[cols].astype(\"int32\")\ncols=reduce_64_int(test[features])\ntest[cols]=test[cols].astype(\"int32\")","dbe9c182":"from sklearn.cluster import KMeans\n# making agg features\n\ntrain_p = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\ntrain_p = train_p.pivot(index='time_id', columns='stock_id', values='target')\n\ncorr = train_p.corr()\n\nids = corr.index\n\nkmeans = KMeans(n_clusters=7, random_state=0).fit(corr.values)\nprint(kmeans.labels_)\n\nl = []\nfor n in range(7):\n    l.append ( [ (x-1) for x in ( (ids+1)*(kmeans.labels_ == n)) if x > 0] )\n    \n\nmat = []\nmatTest = []\n\nn = 0\nfor ind in l:\n    print(ind)\n    newDf = train.loc[train['stock_id'].isin(ind) ]\n    newDf = newDf.groupby(['time_id']).agg(np.nanmean)\n    newDf.loc[:,'stock_id'] = str(n)+'c1'\n    mat.append ( newDf )\n    \n    newDf = test.loc[test['stock_id'].isin(ind) ]    \n    newDf = newDf.groupby(['time_id']).agg(np.nanmean)\n    newDf.loc[:,'stock_id'] = str(n)+'c1'\n    matTest.append ( newDf )\n    \n    n+=1\n    \nmat1 = pd.concat(mat).reset_index()\nmat1.drop(columns=['target'],inplace=True)\n\nmat2 = pd.concat(matTest).reset_index()\n\nmat2 = pd.concat([mat2,mat1.loc[mat1.time_id==5]])\nmat1 = mat1.pivot(index='time_id', columns='stock_id')\nmat1.columns = [\"_\".join(x) for x in mat1.columns.ravel()]\nmat1.reset_index(inplace=True)\n\nmat2 = mat2.pivot(index='time_id', columns='stock_id')\nmat2.columns = [\"_\".join(x) for x in mat2.columns.ravel()]\nmat2.reset_index(inplace=True)\n\nnnn = ['time_id',\n     'log_return1_realized_volatility_0c1',\n     'log_return1_realized_volatility_1c1',     \n     'log_return1_realized_volatility_3c1',\n     'log_return1_realized_volatility_4c1',     \n     'log_return1_realized_volatility_6c1',\n     'total_volume_sum_0c1',\n     'total_volume_sum_1c1', \n     'total_volume_sum_3c1',\n     'total_volume_sum_4c1', \n     'total_volume_sum_6c1',\n     'trade_size_sum_0c1',\n     'trade_size_sum_1c1', \n     'trade_size_sum_3c1',\n     'trade_size_sum_4c1', \n     'trade_size_sum_6c1',\n     'trade_order_count_sum_0c1',\n     'trade_order_count_sum_1c1',\n     'trade_order_count_sum_3c1',\n     'trade_order_count_sum_4c1',\n     'trade_order_count_sum_6c1',      \n     'price_spread_sum_0c1',\n     'price_spread_sum_1c1',\n     'price_spread_sum_3c1',\n     'price_spread_sum_4c1',\n     'price_spread_sum_6c1',   \n     'bid_spread_sum_0c1',\n     'bid_spread_sum_1c1',\n     'bid_spread_sum_3c1',\n     'bid_spread_sum_4c1',\n     'bid_spread_sum_6c1',       \n     'ask_spread_sum_0c1',\n     'ask_spread_sum_1c1',\n     'ask_spread_sum_3c1',\n     'ask_spread_sum_4c1',\n     'ask_spread_sum_6c1',   \n     'volume_imbalance_sum_0c1',\n     'volume_imbalance_sum_1c1',\n     'volume_imbalance_sum_3c1',\n     'volume_imbalance_sum_4c1',\n     'volume_imbalance_sum_6c1',       \n     'bid_ask_spread_sum_0c1',\n     'bid_ask_spread_sum_1c1',\n     'bid_ask_spread_sum_3c1',\n     'bid_ask_spread_sum_4c1',\n     'bid_ask_spread_sum_6c1',\n     'size_tau2_0c1',\n     'size_tau2_1c1',\n     'size_tau2_3c1',\n     'size_tau2_4c1',\n     'size_tau2_6c1'] \n\ntrain = pd.merge(train,mat1[nnn],how='left',on='time_id')\ntest = pd.merge(test,mat2[nnn],how='left',on='time_id')\n\nimport gc\ndel mat1,mat2,train_p,corr,ids\ngc.collect()","a42f8141":"#float64\u309232\u306b\u5909\u63db\nfeatures = [col for col in train.columns if col not in {\"time_id\", \"target\", \"row_id\"}]\ncols=reduce_64(train[features])\ntrain[cols]=train[cols].astype(\"float32\")\ncols=reduce_64(test[features])\ntest[cols]=test[cols].astype(\"float32\")\n\ncols=reduce_64_int(train[features])\ntrain[cols]=train[cols].astype(\"int32\")\ncols=reduce_64_int(test[features])\ntest[cols]=test[cols].astype(\"int32\")","b596f827":"\"\"\"\n\u521d\u671f\u8a2d\u5b9a\n\"\"\"\nimport time\nfrom pandarallel import pandarallel\npandarallel.initialize()\n\npath_to_files = \"..\/input\/optiver-realized-volatility-prediction\"\n\nbook_train_files =  path_to_files + '\/book_train.parquet\/stock_id={}'\ntrade_train_files =  path_to_files + '\/trade_train.parquet\/stock_id={}'\n\nbook_test_files =  path_to_files + '\/book_test.parquet\/stock_id={}'\ntrade_test_files =  path_to_files + '\/trade_test.parquet\/stock_id={}'\n\nSMALL_F = 0.00000001\n\nnp.random.seed(111)\n\ncfg = dict(\n    isCollectDataOnly = True,\n    isStockIdUsed = False,\n    isTFModelUsed = False,\n    trainNotUsedCols = ['row_id', 'target', 'time_id', 'stock_id'],\n    predictNotUsedCols = ['row_id', 'time_id', 'stock_id'],\n    useHyperOpt = False,\n    useLabelTransformation = False,\n    volumeBarThreshold = 500.0\n)\n\n# Function to count unique elements of a series\ndef count_unique(series):\n    return len(np.unique(series))\n\ndef log_return(prob):\n    prob += SMALL_F\n    return np.log(prob).diff()\n\ndef log_return2(x):\n    return np.log1p(x.pct_change())\n\ndef realized_volatility(series_log_return):\n    return np.sqrt(np.sum(series_log_return**2))\n\ndef rmspe(y_true, y_pred):\n    return  (np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true))))\n\n\ndef getOscStoch(x):\n    return (x[-1] - np.min(x))\/(np.max(x)-np.min(x)+SMALL_F)\n\ndef getNormVal(x):\n    return (x[-1])\/(np.mean(x)+SMALL_F)\n\ndef getBreath(ret, size):\n    f = ret > 0\n    upside = size[f]\n    downside = size[~f]\n    \n    di = np.sum(upside)\/(np.sum(downside)+SMALL_F)\n    ado = np.sum(upside) - np.sum(downside)\n    \n    return di, ado\n    \ndef rateLastFirst(x):\n    return np.mean(x)\/(np.sum(x)+SMALL_F)\n\ndef rolling_windows_vectorized(array, sub_window_size=2):\n    start = 0\n    max_time = len(array)-sub_window_size\n    sub_windows = (\n        start +\n        # expand_dims are used to convert a 1D array to 2D array.\n        np.expand_dims(np.arange(sub_window_size), 0) +\n        np.expand_dims(np.arange(max_time + 1), 0).T\n    )\n    \n    return array[sub_windows]\n\ndef rolling_windows_vectorized_v2(array, sub_window_size, stride_size):\n    start = 0\n    max_time = len(array)-sub_window_size\n    sub_windows = (\n        start + \n        np.expand_dims(np.arange(sub_window_size), 0) +\n        # Create a rightmost vector as [0, V, 2V, ...].\n        np.expand_dims(np.arange(max_time + 1, step=stride_size), 0).T\n    )\n    \n    return array[sub_windows]    \n\ndef getVolumaBars(i_data, threshold=1000.0):\n    o, h, l, c, v  = 0.0, 0.0, 1000000.0, 0.0, 0.0\n    res_array = []\n    isNewBar = True\n    bar_index = 0.0\n    cum_volume = 0.0\n    data_len = i_data.shape[0]\n    for i in range(data_len):\n        #print(i_data[i])\n        cur_price = i_data[i][0]\n        #print(cur_price)\n        if True == isNewBar:\n            bar_index = i\n            o = cur_price\n            c = 0.0\n            h = 0.0\n            l = 10000000.0\n            v = 0.0\n            \n            isNewBar = False\n\n        if cur_price > h:\n            h = cur_price\n        if cur_price < l:\n            l = cur_price\n\n        v += i_data[i][1]\n        \n        if (v >= threshold) or (i == data_len-1):\n            isNewBar = True\n            #bar_index = i\n            c = cur_price\n            res_array.append([bar_index, o, h, l, c, v])\n\n\n    return pd.DataFrame(res_array, columns=['bar_index', 'open', 'high', 'low', 'close', 'volume'])\n\n\ndef _get_beta(high, low, window):\n\n    beta_r = np.empty(high.shape)\n    beta_r[:] = np.NaN\n\n    ret = np.log(high \/ low)\n    high_low_ret = ret ** 2\n    beta = rolling_windows_vectorized(high_low_ret, 2).sum(axis=1)\n    beta = rolling_windows_vectorized(beta, window).mean(axis=1)\n    beta_r[len(beta_r)-len(beta):] = beta    \n\n    return beta_r\n\n\ndef _get_gamma(high, low):\n    gamma_r = np.empty(high.shape)\n    gamma_r[:] = np.NaN\n\n    high_max = rolling_windows_vectorized(high, 2).max(axis=1)\n    low_min = rolling_windows_vectorized(low, 2).min(axis=1)\n    gamma = np.log(high_max \/ low_min) ** 2\n    gamma_r[len(gamma_r)-len(gamma):] = gamma\n\n    return gamma_r    \n\ndef get_bekker_parkinson_vol2(high, low, window: int = 20):\n\n    beta = _get_beta(high, low, window)\n    gamma = _get_gamma(high, low)\n\n    k2 = (8 \/ np.pi) ** 0.5\n    den = 3 - 2 * 2 ** .5\n    sigma = (2 ** -0.5 - 1) * beta ** 0.5 \/ (k2 * den)\n    sigma += (gamma \/ (k2 ** 2 * den)) ** 0.5\n    sigma[sigma < 0] = 0\n\n    return sigma\n\ndef get_garman_class_vol2(open, high, low, close, window):\n    ret_value = np.empty(high.shape)\n    ret_value[:] = np.NaN\n    ret = np.log(high \/ low)  # High\/Low return\n    close_open_ret = np.log(close \/ open)  # Close\/Open return\n    estimator = 0.5 * ret ** 2 - (2 * np.log(2) - 1) * close_open_ret ** 2\n    ret_v = rolling_windows_vectorized(estimator, window).mean(axis=1)\n    ret_value[len(ret_value)-len(ret_v):] = np.sqrt(ret_v)\n    return ret_value\n\ndef getWindows(n_bars, isSpecialWindow=False, min_bar_length=3):\n    if(True==isSpecialWindow):\n        window_size = n_bars\/\/2\n    else:\n        window_size = n_bars-(min_bar_length-1)\n\n    if(window_size<=0):\n        if(n_bars-1 > 0):\n            window_size = n_bars - 1\n        else:\n            window_size=1\n\n    return window_size\n\ndef getMicrostructuralFeatures(input_df, output_df, col_prefix = '', col_postfix = '', min_bar_length = 3, volumeThreshold = cfg['volumeBarThreshold'], isParkinson=True, isGarman=True, isYyang=True, isBekker=True, isMicro=True, isSpecialWindow=False, micro_cols=[]):\n    \n    v_sum = np.sum(input_df.loc[:, 'size']).astype(np.float64)\n    thres = volumeThreshold if v_sum >= volumeThreshold else v_sum\n    volume_bars = getVolumaBars(input_df.loc[:,['price','size']].to_numpy(), thres)\n\n    window_size = getWindows(len(volume_bars), isSpecialWindow=isSpecialWindow, min_bar_length=min_bar_length)\n\n    if(True == isGarman):\n        col_name = col_prefix+'garman_class_vol'+col_postfix\n        pv = get_garman_class_vol2(volume_bars.open.to_numpy(), volume_bars.high.to_numpy(), volume_bars.low.to_numpy(), volume_bars.close.to_numpy(), window=window_size)\n        pv = pv[~np.isnan(pv)]\n        if(len(pv)>0):\n            output_df.loc[:,col_name] = np.median(pv)\n        else:\n            output_df.loc[:,col_name] = 0.0\n\n    if(True == isBekker):\n        col_name = col_prefix+'bekker_parkinson_vol'+col_postfix\n        pv = get_bekker_parkinson_vol2(volume_bars.high.to_numpy(), volume_bars.low.to_numpy(), window=window_size)\n        pv = pv[~np.isnan(pv)]\n        if(len(pv)>0):\n            output_df.loc[:,col_name] = np.median(pv)\n        else:\n            output_df.loc[:,col_name] = 0.0\n\n    return output_df\n\ndef getDataFromBidAsk_numpy(df, ci):\n    a = 0\n    b = 0\n    spread  = {}\n    for k in [1,2]:\n        #k = i+1\n        bidp = 'bid_price{}'.format(k)\n        askp = 'ask_price{}'.format(k)\n        bids = 'bid_size{}'.format(k)\n        asks = 'ask_size{}'.format(k)\n        #calculate comulative wap\n        a += (df[:,ci[bidp]] * df[:,ci[asks]] + df[:,ci[askp]] * df[:,ci[bids]])\n        b += df[:,ci[bids]] + df[:,ci[asks]]\n\n        #wap 1 and 2\n        spread[f'fb_w_{k}'] = (df[:,ci[bidp]] * df[:,ci[asks]] + df[:,ci[askp]] * df[:,ci[bids]] ) \/ (df[:,ci[bids]] + df[:,ci[asks]] + SMALL_F)\n        spread[f'fb_mid_point_{k}'] = (df[:,ci[askp]]) + (df[:,ci[bidp]]) \/ 2\n        spread[f'fb_volume_total_{k}'] = (df[:,ci[asks]]) + (df[:,ci[bids]])\n\n    \n    # mean wap\n    spread['fb_w'] = (a\/(b+SMALL_F))\n    # rates\n    spread['fb_w_rate'] = (spread['fb_w_1']) \/ (spread['fb_w_2']+SMALL_F) \n    spread['fb_mid_point_rate'] = (spread['fb_mid_point_1']) \/ (spread['fb_mid_point_2']+SMALL_F)\n    #sum volume\n    spread['fb_volume_total'] = spread['fb_volume_total_1'] + spread['fb_volume_total_2']\n\n    \n    ################# test ##################\n    spread['ask_1'] = df[:,ci['ask_price1']]\n    spread['bid_1'] = df[:,ci['bid_price1']]\n    spread['ask_2'] = df[:,ci['ask_price2']]\n    spread['bid_2'] = df[:,ci['bid_price2']]\n    #########################################\n    \n    return spread\n\n\n\ndef Fx(group, stock_id=0, n=10):\n    new_df = pd.DataFrame()\n    name = int(group.time_id.unique()[0])\n    tmp = pd.DataFrame()\n\n    #calculate log return from the following features:\n    cols = [\n        'fb_w', \n        'fb_w_1', \n        'fb_w_2',\n        'fb_mid_point_1',\n        'fb_mid_point_rate',\n        'fb_w_rate',\n    ]\n\n    new_cols = [s + '_lr' for s in cols]\n    group.loc[:,new_cols] = log_return2(group[cols]).to_numpy()\n    group = group[~group['fb_w'].isnull()]\n\n    #calculate realized volatility\n    cols = new_cols\n    new_cols = [s + '_vola' for s in cols]\n    tmp = pd.concat([tmp, pd.DataFrame(realized_volatility(group.loc[:,cols]).to_numpy().reshape(1,-1), columns=new_cols)], axis=1)\n\n    #calculate sum of log return\n    cols = [\n        'fb_w_2_lr',\n    ]\n    new_cols = [s + '_sum' for s in cols]\n    tmp = pd.concat([tmp, pd.DataFrame(np.sum(group.loc[:,cols]).to_numpy().reshape(1,-1), columns=new_cols)], axis=1)\n\n    #calculate sqsum    \n    cols = [\n        'fb_w_lr', \n        'fb_w_1_lr', \n        'fb_w_2_lr',\n        'fb_mid_point_1_lr',\n    ]\n    new_cols = [s + '_sqsum' for s in cols]\n    tmp = pd.concat([tmp, pd.DataFrame(np.sum((group.loc[:,cols])**2).to_numpy().reshape(1,-1), columns=new_cols)], axis=1)\n    \n    #calculate book length\n    tmp.loc[:,'book_length'] = [group.shape[0]]\n\n    #calclulate market microstructural features\n    c = '1'\n    cols_1 = []\n    new_df = pd.DataFrame({'price': group.loc[:,'fb_mid_point_'+c].to_numpy().flatten(), 'size': group.loc[:,'fb_volume_total_'+c].to_numpy().flatten()}).reset_index()\n    tmp = getMicrostructuralFeatures(new_df, tmp, col_prefix = 'fb_', col_postfix = '_'+c, micro_cols=cols_1)\n    c = '2'\n    cols_2 = []  \n    new_df = pd.DataFrame({'price': group.loc[:,'fb_mid_point_'+c].to_numpy().flatten(), 'size': group.loc[:,'fb_volume_total_'+c].to_numpy().flatten()}).reset_index()\n    tmp = getMicrostructuralFeatures(new_df, tmp, col_prefix = 'fb_', col_postfix = '_'+c, micro_cols=cols_2)\n    \n    ############ test idea ################\n    col_name = \"Test_1\"\n    window_size = getWindows(len(group), isSpecialWindow=False, min_bar_length=3)\n    pv = get_bekker_parkinson_vol2(group.ask_1.to_numpy(), group.bid_1.to_numpy(), window=window_size)\n    pv = pv[~np.isnan(pv)]\n    if(len(pv)>0):\n        tmp.loc[:,col_name] = np.median(pv)\n    else:\n        tmp.loc[:,col_name] = 0.0\n\n    col_name = \"Test_2\"\n    window_size = getWindows(len(group), isSpecialWindow=False, min_bar_length=3)\n    pv = get_bekker_parkinson_vol2(group.ask_2.to_numpy(), group.bid_2.to_numpy(), window=window_size)\n    pv = pv[~np.isnan(pv)]\n    if(len(pv)>0):\n        tmp.loc[:,col_name] = np.median(pv)\n    else:\n        tmp.loc[:,col_name] = 0.0\n    #######################################\n    \n    tmp.loc[:,'row_id'] = str(stock_id) + '-' + str(name)\n    tmp.loc[:,'time_id'] = int(name)\n    return tmp\n\ndef getFeaturesFromBookData(df, stock_id, n=10):\n    results = df.groupby(['time_id']).parallel_apply(Fx, stock_id=stock_id, n=n).reset_index(drop=True)\n    return results\n\ndef getDataFromTrade(df):\n    log_ret = log_return(df.price).dropna()\n    rz_vol = realized_volatility(log_ret)\n    \n    tmp = pd.DataFrame()\n\n    \n    tmp.loc[:,'p_vwap_my'] = [np.sum(df['price'].values*df['size'].values)\/(np.sum(df['size'].values+SMALL_F))]\n    tmp.loc[:,'p_rz_vol'] = rz_vol\n    tmp.loc[:,'p_sqsum'] = np.sum(log_ret**2)\n    tmp.loc[:,'p_sum'] = np.sum(log_ret)\n    \n    tmp.loc[:,'p_lr_rate'] = rateLastFirst(log_ret)\n    \n    tmp.loc[:,'p_price_count'] = count_unique(df['price'].to_numpy())\n    tmp.loc[:,'p_sec_count'] = count_unique(df['seconds_in_bucket'].to_numpy())\n\n    cols_p = []  \n    tmp = getMicrostructuralFeatures(df.loc[:, ['price', 'size']], tmp, col_prefix = 'p_', col_postfix = '', isParkinson=False, isGarman=False, isYyang=False, micro_cols=cols_p)\n\n    tmp.loc[:,'p_size_mean'] = np.mean(df['size']) \n\n    time_id = df.time_id.unique()[0]\n    tmp.loc[:,'time_id'] = time_id\n    return tmp\n\ndef getFeaturesFromTradeData(df):\n    return df.groupby(['time_id']).parallel_apply(getDataFromTrade).reset_index(drop=True)\n\ndef constructPreprocessedDataFrame(file_path, isTrain):\n    stock_id = file_path.split('=')[1]\n    df_book_data = pd.read_parquet(file_path)\n    if True == isTrain:\n        df_trade_data =  pd.read_parquet(trade_train_files.format(stock_id))\n    else:\n        df_trade_data =  pd.read_parquet(trade_test_files.format(stock_id))\n\n    print('Processing stock id:', stock_id)\n    #display(df_book_data.time_id.unique())\n    #preprocess book\n    a = time.time()\n    spread = getDataFromBidAsk_numpy(df_book_data.to_numpy(),{k: v for v, k in enumerate(df_book_data.columns.values)})\n    df_book_data = pd.concat([df_book_data,pd.DataFrame(spread)], axis=1)\n    df_book_datar = getFeaturesFromBookData(df_book_data, stock_id, 10)\n    b = time.time()\n    #print(f'preprocess book: {b-a}')\n    \n    #preprocess trade\n    df_trade_datar = getFeaturesFromTradeData(df_trade_data)\n    df_book_datar = df_book_datar.merge(df_trade_datar, on = ['time_id'], how = 'left')\n    c = time.time()\n    #print(f'preprocess trade: {c-b}')\n\n    df_book_datar.loc[:,'stock_id'] = stock_id\n    df_book_datar = df_book_datar.fillna(0.0)\n    return df_book_datar\n\ndef constructBookDataDataFrame(list_file, isTrain=True):\n    df_book = pd.DataFrame()\n    for file in list_file:\n        df_book = pd.concat([df_book, constructPreprocessedDataFrame(file, isTrain=isTrain)])\n    return df_book\n\ndef getDataFromTransformedDataFx(df, prefix=''):\n    cs = ['row_id', 'stock_id', 'time_id']\n    used_cols = list(set(df.columns.to_list()) - set(cs))\n    for c in used_cols:\n        df.loc[:, prefix+c+'_rate'] = df.loc[:,c] \/ (np.mean(df.loc[:,c]) + SMALL_F)\n        df.loc[:, prefix+c+'_diff'] = df.loc[:,c] - (np.mean(df.loc[:,c]) )\n\n    return df\n\ndef getDataFromTransformedData(df):\n    tmp1 = df.groupby(['stock_id']).parallel_apply(getDataFromTransformedDataFx, prefix='stock_id_').reset_index(drop=True)\n    cols_tmp1 = [x for x in tmp1.columns if 'stock_id_' in x]\n    cols_tmp1.append('stock_id')\n    cols_tmp1.append('time_id')\n    tmp2 = df.groupby(['time_id']).parallel_apply(getDataFromTransformedDataFx, prefix='time_id_').reset_index(drop=True)\n    cols_tmp2 = [x for x in tmp2.columns if 'time_id_' in x]\n    cols_tmp2.append('stock_id')\n    cols_tmp2.append('time_id')\n\n    df = df.merge(tmp1.loc[:,cols_tmp1], on = ['stock_id', 'time_id'], how = 'left')\n    df = df.merge(tmp2.loc[:,cols_tmp2], on = ['stock_id', 'time_id'], how = 'left')\n    \n    print(df.shape)\n\n    return df","f4b2a469":"\"\"\"\n\u5b9f\u884c\n\"\"\"\n#\u8a13\u7df4\u30c7\u30fc\u30bf\nlist_order_book_file_train = glob.glob(path_to_files + '\/book_train.parquet\/*')\n#ret_df = constructBookDataDataFrame(list_order_book_file_train)\n#ret_df = getDataFromTransformedData(ret_df)\nret_df = pd.read_pickle(\"..\/input\/ref-df\/ref_df.pkl\")\ncols=[i for i in ret_df.columns if i in USE_COLS] \nret_df=ret_df[cols]\n\n#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\nlist_order_book_file_train = glob.glob(path_to_files + '\/book_test.parquet\/*')\nt_df = constructBookDataDataFrame(list_order_book_file_train, isTrain=False)\nt_df = getDataFromTransformedData(t_df)\ncols=[i for i in t_df.columns if i in USE_COLS] \nt_df=t_df[cols]\n\nret_df[\"stock_id\"]=ret_df[\"stock_id\"].astype(int)\nret_df[\"time_id\"]=ret_df[\"time_id\"].astype(int)\n\nt_df[\"stock_id\"]=t_df[\"stock_id\"].astype(int)\nt_df[\"time_id\"]=t_df[\"time_id\"].astype(int)\n\n#\u5bb9\u91cf\u524a\u6e1b\n#float64\u309232\u306b\u5909\u63db\nfeatures = [col for col in ret_df.columns if col not in {\"time_id\", \"target\", \"row_id\"}]\ncols=reduce_64(ret_df[features])\nret_df[cols]=ret_df[cols].astype(\"float32\")\nt_df[cols]=t_df[cols].astype(\"float32\")\n\n\"\"\"\n\u5206\u6563\u304c\u5c0f\u3055\u3044\u7279\u5fb4\u91cf\u3092\u524a\u9664\u3059\u308b\nfrom sklearn.feature_selection import VarianceThreshold\n\n#\u6b63\u898f\u5316\n_ret=ret_df.drop([\"time_id\",\"stock_id\",\"row_id\"],axis=1)\ndef minmax_norm(df):\n    return (df - df.min()) \/ ( df.max() - df.min())\n_ret = minmax_norm(_ret)\n\n#\u5206\u6563\u3067\u8db3\u304d\u308a\nsel = VarianceThreshold(threshold=0.001)\nsel.fit(_ret)\n\n# get_support\u3067\u4fdd\u6301\u3059\u308b\u30c7\u30fc\u30bf\u306e\u307f\u3092True\u5024\u3001\u305d\u3046\u3067\u306a\u3044\u3082\u306e\u306fFalse\u5024\u3092\u8fd4\u3057\u307e\u3059\ndrop_cols=_ret.loc[:, ~sel.get_support()].columns\nret_df=ret_df.drop(drop_cols,axis=1)\nt_df=t_df.drop(drop_cols,axis=1)\n\nimport gc\ndel _ret\ngc.collect()\n\"\"\"\n\ntrain = pd.merge(train,ret_df,how='left',on=['time_id','stock_id',\"row_id\"])\ntest = pd.merge(test,t_df,how='left',on=['time_id','stock_id',\"row_id\"])\n\nimport gc\ndel ret_df,t_df\ngc.collect()","9cb5c4e1":"#float64\u309232\u306b\u5909\u63db\nfeatures = [col for col in train.columns if col not in {\"time_id\", \"target\", \"row_id\"}]\ncols=reduce_64(train[features])\ntrain[cols]=train[cols].astype(\"float32\")\ncols=reduce_64(test[features])\ntest[cols]=test[cols].astype(\"float32\")\n\ncols=reduce_64_int(train[features])\ntrain[cols]=train[cols].astype(\"int32\")\ncols=reduce_64_int(test[features])\ntest[cols]=test[cols].astype(\"int32\")","0cce226e":"from sklearn.model_selection import KFold,GroupKFold\n\nimport lightgbm as lgb\n\ndef _prob(train,seed0):\n    params = {\n        'objective': 'binary',\n        'metric': 'auc',\n        'max_depth': -1,\n        'max_bin':100,\n        'min_data_in_leaf':250,\n        'learning_rate': 0.05,\n        'subsample': 0.75,\n        'subsample_freq': 4,\n        'feature_fraction': 0.5,\n        'lambda_l1': 0.5,\n        'lambda_l2': 1.0,\n        'n_jobs':-1,\n        'seed':seed0,\n        'feature_fraction_seed': seed0,\n        'bagging_seed': seed0,\n        'drop_seed': seed0,\n        'data_random_seed': seed0,\n    }\n    train[\"class\"]=train[\"target\"].apply(lambda x:1 if x>0.02 else 0)\n    train[\"weight\"]=train[\"target\"].apply(lambda x:10 if x>0.02 else 0.1)\n\n    groups = train['time_id'].copy()\n\n    features = [col for col in train.columns if col not in {\"weight\",\"time_id\", \"target\", \"row_id\",\"class\"}]\n    y = train['class']\n\n    oof_predictions = np.zeros(train.shape[0])\n    test_prob = np.zeros(test.shape[0])\n    kfold = GroupKFold(n_splits = 5)\n    li= enumerate(kfold.split(train, y, groups))\n\n    for fold, (trn_ind, val_ind) in li:\n        print(f'Training fold {fold + 1}')\n        x_train, x_val = train.iloc[trn_ind], train.iloc[val_ind]\n        y_train, y_val = y.iloc[trn_ind], y.iloc[val_ind]\n        \n        train_dataset = lgb.Dataset(x_train[features], y_train,weight=x_train[\"weight\"])\n        val_dataset = lgb.Dataset(x_val[features], y_val,weight=x_val[\"weight\"])\n        model = lgb.train(params = params,\n                          num_boost_round=1000,\n                          train_set = train_dataset, \n                          valid_sets = [train_dataset, val_dataset], \n                          verbose_eval = 200,\n                          early_stopping_rounds=50,\n                          )\n        pred=model.predict(x_val[features])\n        oof_predictions[val_ind] = pred\n        test_prob += model.predict(test[features]) \/ 5\n    \"\"\"\n    #\u30c7\u30fc\u30bf\u3092\u5225\u306b\u4fdd\u5b58\n    from sklearn import metrics\n    \n    prob=train[[\"target\",\"class\"]]\n    import gc\n    del train\n    gc.collect()\n\n    prob[\"prob\"]=oof_predictions\n    prob[prob[\"class\"]==1][\"prob\"]\n    \n    return prob,test_prob\n    \"\"\"\n    return test_prob,oof_predictions\n\ndef train_and_evaluate_lgb(train, test, params):\n    # Hyperparammeters (just basic)\n    groups = train['time_id'].copy()\n\n    features = [col for col in train.columns if col not in {\"time_id\", \"target\", \"row_id\"}]\n    y = train['target']\n    # Create out of folds array\n    oof_predictions = np.zeros(train.shape[0])\n    # Create test array to store predictions\n    test_predictions = np.zeros(test.shape[0])\n    # Create a KFold object\n    #kfold = KFold(n_splits = 5, random_state = 11, shuffle = True)\n    kfold = GroupKFold(n_splits = 5)\n    li= enumerate(kfold.split(train, y, groups))\n\n    # Iterate through each fold\n    #for fold, (trn_ind, val_ind) in enumerate(kfold.split(train)):\n    for fold, (trn_ind, val_ind) in li:\n        print(f'Training fold {fold + 1}')\n        x_train, x_val = train.iloc[trn_ind], train.iloc[val_ind]\n        y_train, y_val = y.iloc[trn_ind], y.iloc[val_ind]\n        # Root mean squared percentage error weights\n        train_weights = 1 \/ np.square(y_train)\n        val_weights = 1 \/ np.square(y_val)\n        train_dataset = lgb.Dataset(x_train[features], y_train, weight = train_weights)\n        val_dataset = lgb.Dataset(x_val[features], y_val, weight = val_weights)\n        model = lgb.train(params = params,\n                          num_boost_round=1000,\n                          train_set = train_dataset, \n                          valid_sets = [train_dataset, val_dataset], \n                          verbose_eval = 250,\n                          early_stopping_rounds=50,\n                          feval = feval_rmspe)\n        # Add predictions to the out of folds array\n        oof_predictions[val_ind] = model.predict(x_val[features])\n        # Predict the test set\n        test_predictions += model.predict(test[features]) \/ 5\n    rmspe_score = rmspe(y, oof_predictions)\n    print(f'Our out of folds RMSPE is {rmspe_score}')\n    lgb.plot_importance(model,max_num_features=20)\n    # Return test predictions\n    #return test_predictions\n    return test_predictions,oof_predictions","c27305f9":"\"\"\"\n\u5916\u308c\u5024(0.02\u4ee5\u4e0a\u304b\u3069\u3046\u304b)\u306e\u78ba\u7387\u3092\u7b97\u51fa\n2seed bagging\n\"\"\"\n\ntest_prob1,oof_predictions1=_prob(train,0)\ntest_prob2,oof_predictions2=_prob(train,10)\ntest_prob=(test_prob1+test_prob2)\/2\noof_predictions=(oof_predictions1+oof_predictions2)\/2\nimport gc\ndel test_prob1,test_prob2\ngc.collect()\n\n\"\"\"\ntrain[\"prob\"]=oof_predictions\ntest[\"prob\"]=test_prob\n\nUSE_COLS=list(USE_COLS)\nUSE_COLS_TEST=list(USE_COLS_TEST)\nUSE_COLS.append(\"prob\")\nUSE_COLS_TEST.append(\"prob\")\n\"\"\"\n","03a6a28a":"\"\"\"\n\u5916\u308c\u5024\u306a\u3057\u3001\u591a\u91cd\u5171\u7dda\u6027\u89e3\u9664\u30c7\u30fc\u30bf\n\"\"\"\nseed0=210\nparams0 = {\n    'objective': 'rmse',\n    'boosting_type': 'gbdt',\n    'max_depth': -1,\n    'max_bin':90,\n    'min_data_in_leaf':500,\n    'learning_rate': 0.06,\n    'subsample': 0.7,\n    'subsample_freq': 4,\n    'feature_fraction': 0.5,\n    'lambda_l1': 1.0,\n    'lambda_l2': 1.0,\n    'categorical_column':[0],\n    'seed':seed0,\n    'feature_fraction_seed': seed0,\n    'bagging_seed': seed0,\n    'drop_seed': seed0,\n    'data_random_seed': seed0,\n    'n_jobs':-1,\n    'verbose': -1}\n\n# Traing and evaluate\npredictions_lgb1,oof_predictions_lgb1= train_and_evaluate_lgb(\n    train[train[\"target\"]<=0.02][USE_COLS],test[USE_COLS_TEST],params0)\n\nseed0=11\nparams0 = {\n    'objective': 'rmse',\n    'boosting_type': 'gbdt',\n    'max_depth': -1,\n    'max_bin':100,\n    'min_data_in_leaf':400,\n    'learning_rate': 0.05,\n    'subsample': 0.72,\n    'subsample_freq': 4,\n    'feature_fraction': 0.55,\n    'lambda_l1': 0.5,\n    'lambda_l2': 1.0,\n    'categorical_column':[0],\n    'seed':seed0,\n    'feature_fraction_seed': seed0,\n    'bagging_seed': seed0,\n    'drop_seed': seed0,\n    'data_random_seed': seed0,\n    'n_jobs':-1,\n    'verbose': -1}\npredictions_lgb2,oof_predictions_lgb2= train_and_evaluate_lgb(\n    train[train[\"target\"]<=0.02][USE_COLS],test[USE_COLS_TEST],params0)\n\nseed0=111\nparams0 = {\n    'objective': 'rmse',\n    'boosting_type': 'gbdt',\n    'max_depth': -1,\n    'max_bin':120,\n    'min_data_in_leaf':300,\n    'learning_rate': 0.04,\n    'subsample': 0.75,\n    'subsample_freq': 4,\n    'feature_fraction': 0.6,\n    'lambda_l1': 0.5,\n    'lambda_l2': 0.5,\n    'categorical_column':[0],\n    'seed':seed0,\n    'feature_fraction_seed': seed0,\n    'bagging_seed': seed0,\n    'drop_seed': seed0,\n    'data_random_seed': seed0,\n    'n_jobs':-1,\n    'verbose': -1}\npredictions_lgb3,oof_predictions_lgb3= train_and_evaluate_lgb(\n    train[train[\"target\"]<=0.02][USE_COLS],test[USE_COLS_TEST],params0)\n\npredictions_lgb1=(predictions_lgb1+predictions_lgb2+predictions_lgb3)\/3\noof_predictions_lgb1=(oof_predictions_lgb1+oof_predictions_lgb2+oof_predictions_lgb3)\/3\n\nimport gc\ndel predictions_lgb2,predictions_lgb3,oof_predictions_lgb2,oof_predictions_lgb3\ngc.collect()","8f13ad10":"\"\"\"\n\u5916\u308c\u5024\u3042\u308a\u3001\u591a\u91cd\u5171\u7dda\u6027\u89e3\u9664\u30c7\u30fc\u30bf\n\n\u5927\u304d\u3044\u5024\u3092\u5c11\u3057\u91cd\u307f\u5927\u304d\u3081\n\"\"\"\ndef train_and_evaluate_lgb(train, test, params):\n    # Hyperparammeters (just basic)\n    groups = train['time_id'].copy()\n\n    features = [col for col in train.columns if col not in {\"time_id\", \"target\", \"row_id\"}]\n    y = train['target']\n    # Create out of folds array\n    oof_predictions = np.zeros(train.shape[0])\n    # Create test array to store predictions\n    test_predictions = np.zeros(test.shape[0])\n    # Create a KFold object\n    #kfold = KFold(n_splits = 5, random_state = 11, shuffle = True)\n    kfold = GroupKFold(n_splits = 5)\n    li= enumerate(kfold.split(train, y, groups))\n\n    # Iterate through each fold\n    #for fold, (trn_ind, val_ind) in enumerate(kfold.split(train)):\n    for fold, (trn_ind, val_ind) in li:\n        print(f'Training fold {fold + 1}')\n        x_train, x_val = train.iloc[trn_ind], train.iloc[val_ind]\n        y_train, y_val = y.iloc[trn_ind], y.iloc[val_ind]\n        # Root mean squared percentage error weights\n        #\"\"\"\n        train_weights = 1\/np.abs(y_train)\n        val_weights = 1\/np.abs(y_val)\n        train_dataset = lgb.Dataset(x_train[features], y_train, weight = train_weights)\n        val_dataset = lgb.Dataset(x_val[features], y_val, weight = val_weights)\n        \"\"\"\n        train_dataset = lgb.Dataset(x_train[features], y_train)\n        val_dataset = lgb.Dataset(x_val[features], y_val)\n        \"\"\"\n        model = lgb.train(params = params,\n                          num_boost_round=1000,\n                          train_set = train_dataset, \n                          valid_sets = [train_dataset, val_dataset], \n                          verbose_eval = 250,\n                          early_stopping_rounds=50,\n                          feval = feval_rmspe)\n        # Add predictions to the out of folds array\n        oof_predictions[val_ind] = model.predict(x_val[features])\n        # Predict the test set\n        test_predictions += model.predict(test[features]) \/ 5\n    rmspe_score = rmspe(y, oof_predictions)\n    print(f'Our out of folds RMSPE is {rmspe_score}')\n    lgb.plot_importance(model,max_num_features=20)\n    # Return test predictions\n    #return test_predictions\n    return test_predictions,oof_predictions\n\nseed0=3\nparams1 = {\n    'objective': 'rmse',\n    'boosting_type': 'gbdt',\n    'max_depth': -1,\n    'max_bin':90,\n    'min_data_in_leaf':200,\n    'learning_rate': 0.06,\n    'subsample': 0.7,\n    'subsample_freq': 4,\n    'feature_fraction': 0.5,\n    'lambda_l1': 1.0,\n    'lambda_l2': 1.0,\n    'categorical_column':[0],\n    'seed':seed0,\n    'feature_fraction_seed': seed0,\n    'bagging_seed': seed0,\n    'drop_seed': seed0,\n    'data_random_seed': seed0,\n    'n_jobs':-1,\n    'verbose': -1}\n\n# Traing and evaluate\npredictions_lgb21,oof_predictions_lgb21= train_and_evaluate_lgb(\n    train[train[\"target\"]<0.07][USE_COLS],test[USE_COLS_TEST],params1)\n\nseed0=33\nparams1 = {\n    'objective': 'rmse',\n    'boosting_type': 'gbdt',\n    'max_depth': -1,\n    'max_bin':100,\n    'min_data_in_leaf':50,\n    'learning_rate': 0.05,\n    'subsample': 0.72,\n    'subsample_freq': 4,\n    'feature_fraction': 0.55,\n    'lambda_l1': 0.5,\n    'lambda_l2': 1.0,\n    'categorical_column':[0],\n    'seed':seed0,\n    'feature_fraction_seed': seed0,\n    'bagging_seed': seed0,\n    'drop_seed': seed0,\n    'data_random_seed': seed0,\n    'n_jobs':-1,\n    'verbose': -1}\n# Traing and evaluate\npredictions_lgb22,oof_predictions_lgb22= train_and_evaluate_lgb(\n    train[train[\"target\"]<0.07][USE_COLS],test[USE_COLS_TEST],params1)\n\n\nseed0=333\nparams1 = {\n    'objective': 'rmse',\n    'boosting_type': 'gbdt',\n    'max_depth': -1,\n    'max_bin':120,\n    'min_data_in_leaf':25,\n    'learning_rate': 0.04,\n    'subsample': 0.75,\n    'subsample_freq': 4,\n    'feature_fraction': 0.6,\n    'lambda_l1': 0.5,\n    'lambda_l2': 0.5,\n    'categorical_column':[0],\n    'seed':seed0,\n    'feature_fraction_seed': seed0,\n    'bagging_seed': seed0,\n    'drop_seed': seed0,\n    'data_random_seed': seed0,\n    'n_jobs':-1,\n    'verbose': -1}\npredictions_lgb23,oof_predictions_lgb23= train_and_evaluate_lgb(\n    train[train[\"target\"]<0.07][USE_COLS],test[USE_COLS_TEST],params1)\n\npredictions_lgb3=(predictions_lgb21+predictions_lgb22+predictions_lgb23)\/3\noof_predictions_lgb3=(oof_predictions_lgb21+oof_predictions_lgb22+oof_predictions_lgb23)\/3\n\nimport gc\ndel predictions_lgb21,predictions_lgb22,predictions_lgb23,oof_predictions_lgb21,oof_predictions_lgb22,oof_predictions_lgb23\ngc.collect()\n","6f89a83b":"from numpy.random import seed\nseed(42)\nimport tensorflow as tf\ntf.random.set_seed(42)\nfrom tensorflow import keras\nimport numpy as np\nfrom keras import backend as K\ndef root_mean_squared_per_error(y_true, y_pred):\n         return K.sqrt(K.mean(K.square( (y_true - y_pred)\/ y_true )))\n    \nes = tf.keras.callbacks.EarlyStopping(\n    monitor='val_loss', patience=20, verbose=0,\n    mode='min',restore_best_weights=True)\n\nplateau = tf.keras.callbacks.ReduceLROnPlateau(\n    monitor='val_loss', factor=0.2, patience=7, verbose=0,\n    mode='min')","376356cc":"# kfold based on the knn++ algorithm\nout_train = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\nout_train = out_train.pivot(index='time_id', columns='stock_id', values='target')\n\n#out_train[out_train.isna().any(axis=1)]\nout_train = out_train.fillna(out_train.mean())\nout_train.head()\n\n# code to add the just the read data after first execution\n\n# data separation based on knn ++\nnfolds = 5 # number of folds\nindex = []\ntotDist = []\nvalues = []\n# generates a matriz with the values of \nmat = out_train.values\n\nscaler = MinMaxScaler(feature_range=(-1, 1))\nmat = scaler.fit_transform(mat)\n\nnind = int(mat.shape[0]\/nfolds) # number of individuals\n\n# adds index in the last column\nmat = np.c_[mat,np.arange(mat.shape[0])]\n\n\nlineNumber = np.random.choice(np.array(mat.shape[0]), size=nfolds, replace=False)\n\nlineNumber = np.sort(lineNumber)[::-1]\n\nfor n in range(nfolds):\n    totDist.append(np.zeros(mat.shape[0]-nfolds))\n\n# saves index\nfor n in range(nfolds):\n    \n    values.append([lineNumber[n]])    \n\n\ns=[]\nfor n in range(nfolds):\n    s.append(mat[lineNumber[n],:])\n    \n    mat = np.delete(mat, obj=lineNumber[n], axis=0)\n\nfor n in range(nind-1):    \n\n    luck = np.random.uniform(0,1,nfolds)\n    \n    for cycle in range(nfolds):\n         # saves the values of index           \n\n        s[cycle] = np.matlib.repmat(s[cycle], mat.shape[0], 1)\n\n        sumDist = np.sum( (mat[:,:-1] - s[cycle][:,:-1])**2 , axis=1)   \n        totDist[cycle] += sumDist        \n                \n        # probabilities\n        f = totDist[cycle]\/np.sum(totDist[cycle]) # normalizing the totdist\n        j = 0\n        kn = 0\n        for val in f:\n            j += val        \n            if (j > luck[cycle]): # the column was selected\n                break\n            kn +=1\n        lineNumber[cycle] = kn\n        \n        # delete line of the value added    \n        for n_iter in range(nfolds):\n            \n            totDist[n_iter] = np.delete(totDist[n_iter],obj=lineNumber[cycle], axis=0)\n            j= 0\n        \n        s[cycle] = mat[lineNumber[cycle],:]\n        values[cycle].append(int(mat[lineNumber[cycle],-1]))\n        mat = np.delete(mat, obj=lineNumber[cycle], axis=0)\n\n\nfor n_mod in range(nfolds):\n    values[n_mod] = out_train.index[values[n_mod]]","066c8fed":"train.replace([np.inf, -np.inf], np.nan,inplace=True)\ntest.replace([np.inf, -np.inf], np.nan,inplace=True)\nqt_train = []\ntrain_nn=train[colNames].copy()\ntest_nn=test[colNames].copy()\n#colNames.remove('row_id')\nfor col in colNames:\n    #print(col)\n    qt = QuantileTransformer(random_state=21,n_quantiles=2000, output_distribution='normal')\n    train_nn[col] = qt.fit_transform(train_nn[[col]])\n    test_nn[col] = qt.transform(test_nn[[col]])    \n    qt_train.append(qt)\ntrain_nn[['stock_id','time_id','target']]=train[['stock_id','time_id','target']]\ntest_nn[['stock_id','time_id']]=test[['stock_id','time_id']]","ddc13e55":"#float64\u309232\u306b\u5909\u63db\nfeatures = [col for col in train.columns if col not in {\"time_id\", \"target\", \"row_id\",\"class\",\"weight\"}]\ncols=reduce_64(train[features])\ntrain[cols]=train[cols].astype(\"float32\")\ncols=reduce_64(test[features])\ntest[cols]=test[cols].astype(\"float32\")\n\ncols=reduce_64_int(train[features])\ntrain[cols]=train[cols].astype(\"int32\")\ncols=reduce_64_int(test[features])\ntest[cols]=test[cols].astype(\"int32\")","0c5f64f8":"# making agg features\nfrom sklearn.cluster import KMeans\ntrain_p = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\ntrain_p = train_p.pivot(index='time_id', columns='stock_id', values='target')\n\ncorr = train_p.corr()\n\nids = corr.index\n\nkmeans = KMeans(n_clusters=7, random_state=0).fit(corr.values)\nprint(kmeans.labels_)\n\nl = []\nfor n in range(7):\n    l.append ( [ (x-1) for x in ( (ids+1)*(kmeans.labels_ == n)) if x > 0] )\n    \n\nmat = []\nmatTest = []\n\nn = 0\nfor ind in l:\n    print(ind)\n    newDf = train_nn.loc[train_nn['stock_id'].isin(ind) ]\n    newDf = newDf.groupby(['time_id']).agg(np.nanmean)\n    newDf.loc[:,'stock_id'] = str(n)+'c1'\n    mat.append ( newDf )\n    \n    newDf = test_nn.loc[test_nn['stock_id'].isin(ind) ]    \n    newDf = newDf.groupby(['time_id']).agg(np.nanmean)\n    newDf.loc[:,'stock_id'] = str(n)+'c1'\n    matTest.append ( newDf )\n    \n    n+=1\n    \nmat1 = pd.concat(mat).reset_index()\nmat1.drop(columns=['target'],inplace=True)\n\nmat2 = pd.concat(matTest).reset_index()\nmat2 = pd.concat([mat2,mat1.loc[mat1.time_id==5]])\n\nnnn = ['time_id',\n     'log_return1_realized_volatility_0c1',\n     'log_return1_realized_volatility_1c1',     \n     'log_return1_realized_volatility_3c1',\n     'log_return1_realized_volatility_4c1',     \n     'log_return1_realized_volatility_6c1',\n     'total_volume_sum_0c1',\n     'total_volume_sum_1c1', \n     'total_volume_sum_3c1',\n     'total_volume_sum_4c1', \n     'total_volume_sum_6c1',\n     'trade_size_sum_0c1',\n     'trade_size_sum_1c1', \n     'trade_size_sum_3c1',\n     'trade_size_sum_4c1', \n     'trade_size_sum_6c1',\n     'trade_order_count_sum_0c1',\n     'trade_order_count_sum_1c1',\n     'trade_order_count_sum_3c1',\n     'trade_order_count_sum_4c1',\n     'trade_order_count_sum_6c1',      \n     'price_spread_sum_0c1',\n     'price_spread_sum_1c1',\n     'price_spread_sum_3c1',\n     'price_spread_sum_4c1',\n     'price_spread_sum_6c1',   \n     'bid_spread_sum_0c1',\n     'bid_spread_sum_1c1',\n     'bid_spread_sum_3c1',\n     'bid_spread_sum_4c1',\n     'bid_spread_sum_6c1',       \n     'ask_spread_sum_0c1',\n     'ask_spread_sum_1c1',\n     'ask_spread_sum_3c1',\n     'ask_spread_sum_4c1',\n     'ask_spread_sum_6c1',   \n     'volume_imbalance_sum_0c1',\n     'volume_imbalance_sum_1c1',\n     'volume_imbalance_sum_3c1',\n     'volume_imbalance_sum_4c1',\n     'volume_imbalance_sum_6c1',       \n     'bid_ask_spread_sum_0c1',\n     'bid_ask_spread_sum_1c1',\n     'bid_ask_spread_sum_3c1',\n     'bid_ask_spread_sum_4c1',\n     'bid_ask_spread_sum_6c1',\n     'size_tau2_0c1',\n     'size_tau2_1c1',\n     'size_tau2_3c1',\n     'size_tau2_4c1',\n     'size_tau2_6c1'] \n\n#\u51e6\u7406\nmat1 = mat1.pivot(index='time_id', columns='stock_id')\nmat1.columns = [\"_\".join(x) for x in mat1.columns.ravel()]\nmat1.reset_index(inplace=True)\n\nmat2 = mat2.pivot(index='time_id', columns='stock_id')\nmat2.columns = [\"_\".join(x) for x in mat2.columns.ravel()]\nmat2.reset_index(inplace=True)\n\ntrain_nn = pd.merge(train_nn,mat1[nnn],how='left',on='time_id')\ntest_nn = pd.merge(test_nn,mat2[nnn],how='left',on='time_id')\n","81534b14":"import gc\ndel train,test\ndel mat1,mat2,train_p,corr,ids,out_train\ngc.collect()","b9def64b":"#https:\/\/bignerdranch.com\/blog\/implementing-swish-activation-function-in-keras\/\nfrom keras.backend import sigmoid\ndef swish(x, beta = 1):\n    return (x * sigmoid(beta * x))\n\nfrom keras.utils.generic_utils import get_custom_objects\nfrom keras.layers import Activation\nget_custom_objects().update({'swish': Activation(swish)})\n\n#hidden_units = (128,64,32)\nstock_embedding_size = 24\n\ncat_data = train_nn['stock_id']\n\ndef base_model(hidden_units):\n    \n    # Each instance will consist of two inputs: a single user id, and a single movie id\n    stock_id_input = keras.Input(shape=(1,), name='stock_id')\n    num_input = keras.Input(shape=(202,), name='num_data')#slight\u306a\u3057\n\n\n    #embedding, flatenning and concatenating\n    stock_embedded = keras.layers.Embedding(max(cat_data)+1, stock_embedding_size, \n                                           input_length=1, name='stock_embedding')(stock_id_input)\n    stock_flattened = keras.layers.Flatten()(stock_embedded)\n    out = keras.layers.Concatenate()([stock_flattened, num_input])\n    \n    # Add one or more hidden layers\n    for n_hidden in hidden_units:\n\n        out = keras.layers.Dense(n_hidden, activation='swish')(out)\n\n    # A single output: our predicted rating\n    out = keras.layers.Dense(1, activation='linear', name='prediction')(out)\n    \n    model = keras.Model(\n    inputs = [stock_id_input, num_input],\n    outputs = out,\n    )\n    \n    return model\n","f0925c92":"\"\"\"\n\u5b9f\u884c\n\"\"\"\n#\u8a13\u7df4\u30c7\u30fc\u30bf\nlist_order_book_file_train = glob.glob(path_to_files + '\/book_train.parquet\/*')\n#ret_df = constructBookDataDataFrame(list_order_book_file_train)\n#ret_df = getDataFromTransformedData(ret_df)\nret_df = pd.read_pickle(\"..\/input\/ref-df\/ref_df.pkl\")\ncols=[i for i in ret_df.columns if i in USE_COLS] \nret_df=ret_df[cols]\n\n#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\nlist_order_book_file_train = glob.glob(path_to_files + '\/book_test.parquet\/*')\nt_df = constructBookDataDataFrame(list_order_book_file_train, isTrain=False)\nt_df = getDataFromTransformedData(t_df)\ncols=[i for i in t_df.columns if i in USE_COLS_TEST] \nt_df=t_df[cols]\n\nret_df[\"stock_id\"]=ret_df[\"stock_id\"].astype(int)\nret_df[\"time_id\"]=ret_df[\"time_id\"].astype(int)\n\nt_df[\"stock_id\"]=t_df[\"stock_id\"].astype(int)\nt_df[\"time_id\"]=t_df[\"time_id\"].astype(int)\n\n\n#NN\u3067\u306f\u3044\u3089\u306a\u3044\nret_df=ret_df.drop(\"row_id\",axis=1)\nt_df=t_df.drop(\"row_id\",axis=1)\n\n#\u5bb9\u91cf\u524a\u6e1b\n#float64\u309232\u306b\u5909\u63db\nfeatures = [col for col in ret_df.columns if col not in {\"time_id\", \"target\", \"row_id\"}]\ncols=reduce_64(ret_df[features])\nret_df[cols]=ret_df[cols].astype(\"float32\")\nt_df[cols]=t_df[cols].astype(\"float32\")\n\n\n\"\"\"\n\u5206\u6563\u304c\u5c0f\u3055\u3044\u7279\u5fb4\u91cf\u3092\u524a\u9664\u3059\u308b\nfrom sklearn.feature_selection import VarianceThreshold\n\n#\u6b63\u898f\u5316\n_ret=ret_df.drop([\"time_id\",\"stock_id\"],axis=1)\ndef minmax_norm(df):\n    return (df - df.min()) \/ ( df.max() - df.min())\n_ret = minmax_norm(_ret)\n\n#\u5206\u6563\u3067\u8db3\u304d\u308a\nsel = VarianceThreshold(threshold=0.001)\nsel.fit(_ret)\n\n# get_support\u3067\u4fdd\u6301\u3059\u308b\u30c7\u30fc\u30bf\u306e\u307f\u3092True\u5024\u3001\u305d\u3046\u3067\u306a\u3044\u3082\u306e\u306fFalse\u5024\u3092\u8fd4\u3057\u307e\u3059\ndrop_cols=_ret.loc[:, ~sel.get_support()].columns\nret_df=ret_df.drop(drop_cols,axis=1)\nt_df=t_df.drop(drop_cols,axis=1)\n\nimport gc\ndel _ret\ngc.collect()\n\"\"\"\n\n\n#\u7d50\u5408\ntrain_nn = pd.merge(train_nn,ret_df,how='left',on=['time_id','stock_id'])\ntest_nn = pd.merge(test_nn,t_df,how='left',on=['time_id','stock_id'])\n\n\nret_df=ret_df.drop(['time_id','stock_id'],axis=1)\nfrom tqdm import tqdm\nfor col in tqdm(ret_df.columns):\n    #print(col)\n    qt = QuantileTransformer(random_state=21,n_quantiles=2000, output_distribution='normal')\n    train_nn[col] = qt.fit_transform(train_nn[[col]])\n    test_nn[col] = qt.transform(test_nn[[col]])    \n    qt_train.append(qt)\n\nimport gc\ndel ret_df,t_df\ngc.collect()","89e9c8cb":"\"\"\"\n\u7279\u5fb4\u91cf\u306e\u524a\u6e1b\n\"\"\"\nUSE_COLS=[i for i in USE_COLS if i!=\"row_id\"]\nUSE_COLS_TEST=[i for i in USE_COLS_TEST if i!=\"row_id\"]","3c690826":"#float64\u309232\u306b\u5909\u63db\nfeatures = [col for col in train_nn.columns if col not in {\"time_id\", \"target\", \"row_id\",\"class\",\"weight\"}]\ncols=reduce_64(train_nn[features])\ntrain_nn[cols]=train_nn[cols].astype(\"float32\")\ncols=reduce_64(test_nn[features])\ntest_nn[cols]=test_nn[cols].astype(\"float32\")\n\ncols=reduce_64_int(train_nn[features])\ntrain_nn[cols]=train_nn[cols].astype(\"int32\")\ncols=reduce_64_int(test_nn[features])\ntest_nn[cols]=test_nn[cols].astype(\"int32\")","a1163ee5":"def _pred(train_nn,test_nn,unit=(128,64,32),rate=0.006,se=0):\n    from numpy.random import seed\n    seed(se)\n    import tensorflow as tf\n    tf.random.set_seed(se)\n    from tensorflow import keras\n\n    target_name='target'\n    scores_folds = {}\n    model_name = 'NN'\n    pred_name = 'pred_{}'.format(model_name)\n\n    n_folds = 5\n    groups = train_nn['time_id'].copy()\n    kf = GroupKFold(n_splits = 5)\n    y = train_nn['target']\n    \n    li= enumerate(kf.split(train_nn, y, groups))\n    scores_folds[model_name] = []\n    counter = 1\n\n    features_to_consider = list(train_nn)\n\n    features_to_consider.remove('time_id')\n    features_to_consider.remove('target')\n    try:\n        features_to_consider.remove('pred_NN')\n    except:\n        pass\n\n    train_nn[features_to_consider] = train_nn[features_to_consider].fillna(train_nn[features_to_consider].mean())\n    test_nn[features_to_consider] = test_nn[features_to_consider].fillna(train_nn[features_to_consider].mean())\n    train_nn[pred_name] = 0\n    test_nn[target_name] = 0\n\n    test_predictions_nn1 = np.zeros(test_nn.shape[0])\n    oof_predictions_nn1 = np.zeros(train_nn.shape[0])\n\n    #for n_count in range(n_folds):\n    for n_count, (trn_ind, val_ind) in li:\n        print('CV {}\/{}'.format(counter, n_folds))\n        print(train_nn)\n        X_train = train_nn.loc[trn_ind, features_to_consider]\n        y_train = train_nn.loc[trn_ind, target_name]\n        X_test = train_nn.loc[val_ind, features_to_consider]\n        y_test = train_nn.loc[val_ind, target_name]\n\n        #############################################################################################\n        # NN\n        #############################################################################################\n\n        model = base_model(unit)\n\n        model.compile(\n            keras.optimizers.Adam(learning_rate=rate),\n            loss=root_mean_squared_per_error\n        )\n\n        try:\n            features_to_consider.remove('stock_id')\n        except:\n            pass\n\n        num_data = X_train[features_to_consider]\n\n        scaler = MinMaxScaler(feature_range=(-1, 1))         \n        num_data = scaler.fit_transform(num_data.values)    \n\n        cat_data = X_train['stock_id']    \n        target =  y_train\n\n        num_data_test = X_test[features_to_consider]\n        num_data_test = scaler.transform(num_data_test.values)\n        cat_data_test = X_test['stock_id']\n\n        model.fit([cat_data, num_data], \n                  target,               \n                  batch_size=2048,\n                  epochs=1000,\n                  validation_data=([cat_data_test, num_data_test], y_test),\n                  callbacks=[es, plateau],\n                  validation_batch_size=len(y_test),\n                  shuffle=True,\n                 verbose = 1)\n\n        preds = model.predict([cat_data_test, num_data_test]).reshape(1,-1)[0]\n        oof_predictions_nn1[val_ind]=preds\n\n        score = round(rmspe(y_true = y_test, y_pred = preds),5)\n        print('Fold {} {}: {}'.format(counter, model_name, score))\n        scores_folds[model_name].append(score)\n\n        tt =scaler.transform(test_nn[features_to_consider].values)\n        test_predictions_nn1 += model.predict([test_nn['stock_id'], tt]).reshape(1,-1)[0].clip(0,1e10)\/n_folds\n\n        counter += 1\n        features_to_consider.append('stock_id')\n    #return test_predictions_nn1,oof_predictions_nn1\n    return test_predictions_nn1","b753eb4a":"\"\"\"\n\u5916\u308c\u5024\u306a\u3057\u3001\u7279\u5fb4\u91cf\u524a\u6e1b\n\"\"\"\ntest_predictions_nn1= _pred(\n    train_nn[train_nn[\"target\"]<=0.02].reset_index().drop(\"index\",axis=1)[USE_COLS],\n    test_nn[USE_COLS_TEST],unit=(128,64,32),rate=0.006,se=1)\n\ntest_predictions_nn2= _pred(\n    train_nn[train_nn[\"target\"]<=0.02].reset_index().drop(\"index\",axis=1)[USE_COLS],\n    test_nn[USE_COLS_TEST],unit=(256,128,64,32),rate=0.005,se=2)\n\ntest_prediction_nn1=(test_predictions_nn1+test_predictions_nn2)\/2\n\nimport gc\ndel test_predictions_nn2\ngc.collect()\n","8b6eabdc":"\"\"\"\n\u5168\u3066\u3001\u7279\u5fb4\u91cf\u524a\u6e1b\n\n2bagging\n\"\"\"\ntest_predictions_nn21= _pred(\n    train_nn[USE_COLS],\n    test_nn[USE_COLS_TEST],unit=(128,64,32),rate=0.006,se=5)\ntest_predictions_nn22= _pred(\n    train_nn[USE_COLS],\n    test_nn[USE_COLS_TEST],unit=(256,128,64,32),rate=0.005,se=4)\n\ntest_prediction_nn3=(test_predictions_nn21+test_predictions_nn22)\/2\n\nimport gc\ndel test_predictions_nn22, test_predictions_nn21\ngc.collect()\n","11e726fa":"#\"\"\"\ndf=pd.DataFrame()\ndf[\"normal\"]=(test_prediction_nn1+predictions_lgb1)\/2#\u5916\u308c\u5024\u4ee5\u5916\ndf[\"all\"]=(test_prediction_nn3+predictions_lgb3)\/2#\u5168\u3066\ndf[\"prob\"]=test_prob\ndf[\"target\"]=0\ndf\n\nidx=df[df[\"prob\"]<0.5].index\ndf.loc[idx,\"target\"]=df.loc[idx,\"normal\"]\nidx=df[df[\"prob\"]>=0.5].index\ndf.loc[idx,\"target\"]=df.loc[idx,\"all\"]\n\ntest=pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/test.csv\")\ntest[target_name] = df[\"target\"]\ndisplay(test[['row_id', target_name]].head(3))\ntest[['row_id', target_name]].to_csv('submission.csv',index = False)\n#\"\"\"","5bc5832d":"\"\"\"\ndf=pd.DataFrame()\ndf[\"normal\"]=(test_prediction_nn1+predictions_lgb1)\/2#\u5916\u308c\u5024\u4ee5\u5916\ndf[\"all\"]=(test_prediction_nn3+predictions_lgb3)\/2#\u5168\u3066\ndf[\"prob\"]=test_prob\ndf[\"target\"]=df[\"prob\"]*df[\"all\"]+(1-df[\"prob\"])*df[\"normal\"]\n\n\ntest=pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/test.csv\")\ntest[target_name] = df[\"target\"]\ndisplay(test[['row_id', target_name]].head(3))\ntest[['row_id', target_name]].to_csv('submission.csv',index = False)\n\"\"\"","dae75198":"\"\"\"\ndf=pd.DataFrame()\ndf[\"target\"]=(test_prediction_nn3+predictions_lgb3)\/2#\u5168\u3066\n\ntest=pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/test.csv\")\ntest[target_name] = df[\"target\"]\ndisplay(test[['row_id', target_name]].head(3))\ntest[['row_id', target_name]].to_csv('submission.csv',index = False)\n\"\"\"","f1c19004":"\u2460\u591a\u91cd\u5171\u7dda\u6027\u89e3\u9664\n\u2461\u7279\u5fb4\u524a\u6e1b\n\u2462\u5916\u308c\u5024\u6709\u7121\n\u2463SEED\n\u2464\u30e2\u30c7\u30eb\u30d1\u30bf\u30fc\u30f3\n\n\u3053\u308c\u3089\u3092\u5909\u66f4\u3057\u305f\u30e2\u30c7\u30eb\u3092\u305d\u308c\u305e\u308c\u8a13\u7df4\u3057\u3001\u4e0b\u8a18\u3067\u30c6\u30b9\u30c8\u7d50\u679c\u3092\u7b97\u51fa\n\n\u5916\u308c\u5024\u3092\u629c\u3044\u305f\u4e88\u6e2c\u5024\uff0a\u5916\u308c\u5024\u3067\u306f\u306a\u3044\u78ba\u7387\uff0b\u5916\u308c\u5024\u00d7\u5916\u308c\u5024\u78ba\u7387"}}