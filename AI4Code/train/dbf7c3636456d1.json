{"cell_type":{"7d5335db":"code","8d4c2d13":"code","f6bb0f25":"code","9e436d72":"code","cc2be862":"code","0fcbaf51":"code","ac9c70fc":"code","8b4ae9d5":"code","2e7878d7":"code","5355fb0d":"code","5d3626a7":"code","3de58344":"code","13c6a766":"code","62faa50f":"code","e037dcc5":"code","e417128c":"code","46de370e":"code","86f37f89":"code","01ec40c9":"code","f3b6d9be":"code","78c5bdf1":"code","daf5a9df":"code","39b9d41e":"code","4d7e0b40":"code","3a21afdf":"code","bdd003c0":"code","fec38b12":"code","11cad3e7":"code","24867389":"markdown","6e618c80":"markdown","49125b15":"markdown","f3758fe7":"markdown","19033b7c":"markdown","2f1a0e59":"markdown","cd226569":"markdown","025ff866":"markdown","5ff5c90d":"markdown","9d05123a":"markdown","ceca30b3":"markdown","94341114":"markdown","b925de3f":"markdown","02140377":"markdown","18a64f0c":"markdown","e859b842":"markdown","92da0db1":"markdown","8883c432":"markdown","b714ded4":"markdown","91907039":"markdown","b0c61d8e":"markdown","e7eac1d1":"markdown","41ca8cce":"markdown","6b50451c":"markdown","25bb1ec8":"markdown"},"source":{"7d5335db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8d4c2d13":"data = pd.read_csv(\"..\/input\/athlete_events.csv\")","f6bb0f25":"data.columns","9e436d72":"data.shape","cc2be862":"data.info()","0fcbaf51":"data.head()","ac9c70fc":"data.tail()","8b4ae9d5":"print((data.Age).value_counts(dropna = False))","2e7878d7":"data.describe()","5355fb0d":"data.boxplot(column = \"Age\")","5d3626a7":"data_tidy = data.head()\ndata_tidy","3de58344":"melted = pd.melt(frame = data_tidy, id_vars = \"Name\", value_vars = [\"Weight\",\"Height\"])\nmelted","13c6a766":"melted.pivot(index = \"Name\", columns = \"variable\", values = \"value\")","62faa50f":"data1 = data.head()\ndata2 = data.tail()\nconc_row = pd.concat([data1,data2], axis = 0, ignore_index = True)\nconc_row","e037dcc5":"data3 = data.Name.tail()\ndata4 = data.Age.tail()\nconc_col = pd.concat([data3,data4], axis = 1)\nconc_col","e417128c":"data.dtypes","46de370e":"data.Name = data.Name.astype('category')\ndata.Year = data.Year.astype('float')","86f37f89":"data.dtypes","01ec40c9":"data.info()","f3b6d9be":"data.Medal.value_counts(dropna = False)","78c5bdf1":"data.Medal.dropna(inplace = True)","daf5a9df":"assert data.Medal.notnull().all()","39b9d41e":"data.Medal.value_counts(dropna = False)","4d7e0b40":"data.Age.value_counts(dropna = False)","3a21afdf":"data.Age.describe()","bdd003c0":"data.Age.fillna(float(26), inplace = True)","fec38b12":"assert data.Age.notnull().all()","11cad3e7":"data.Age.value_counts(dropna = False)","24867389":"As another solution, let's fill the missing values with mean of that value:\n* The number of missing data in *Age* column is 9474 and the mean of age value is 25.55898. ","6e618c80":"# **DIAGNOSIS AND DISCOVERY**","49125b15":"# **CONCATENATING DATA**","f3758fe7":"# **EXPLORATORY DATA ANALYSIS**","19033b7c":"To get some basic statistical information we can use **describe()** method.","2f1a0e59":"In this graph:\n* The black line at top is max.\n* The blue line at top is %75.\n* The green line is median of the age column.\n* The blue line at the bottom is %25.\n* The black line at the bottom is min.\n* The circles are outliers.\n","cd226569":"At the begining we should diagnose or explore data. With *info, head, tail etc.* methods","025ff866":"# **MISSING DATA**\n","5ff5c90d":"We will use **melt()** function for tidy data. At this step, our purpose is not analyzing. We want to standardize our data for analysis. With standardization i mean that, we will reshape data set without changing the data. ","9d05123a":"**value_counts():** As the name suggests, it counts the values. Let's try it:\n\nP.S. If you use this method like that *value_counts()* or *value_counts(dropna = True)*, you will not see the number of missing data. With *dropna = False* you can check the number of missing data.","ceca30b3":"**2) Horizontal Concatenating Example**","94341114":"# **VISUAL EXPLORATORY DATA ANALYSIS**","b925de3f":"# **CHANGING DATA TYPES**","02140377":"As you see, 85% of athletes medal information is NaN. In other words, a large part of the data is missing. Let's try to fix that problem.\n\nIn this situation, dropping is not a good solution. But as you know we are just learning. So let's start with dropping with:","18a64f0c":"Assertions are simply boolean expressions that checks if the conditions return true or not. If it is true, the program does nothing and move to the next line of code. However, if it's false, the program stops and throws an error.(Source: https:\/\/www.programiz.com\/python-programming\/assert-statement)","e859b842":"Reverse of melting with **pivot()**.","92da0db1":"**boxplot():** it visualize basic statistical information.","8883c432":"**When you are analyzing any data, there could be some unclean data. So, what is the *unclean data*?**\n\n**First of all, the column names may cause problems for you: Upper-lower case letters will be irregular, there may be spaces between the words etc.**\n\n**And then, you may experience some missing data. **\n\n**As you know there are thousands of languages around the world and some of them uses different alphabets and writing systems. So, it would be a problem in your analyses.**\n\n**All of these examples correspond to *unclean data*.**\n\n**In conclution, perhaps we will never encounter a proper\/perfect data set throughout our life. Let's learn together, how to deal with it!**","b714ded4":"# **CLEANING DATA**","91907039":"# **PIVOTING DATA**","b0c61d8e":" **P.S. IN PREPARING THIS DOCUMENT, I MOSTLY USED THE KERNEL CALLED \"Data ScienceTutorial for Beginners\". https:\/\/www.kaggle.com\/kanncaa1\/data-sciencetutorial-for-beginners**\n\n **I AM PREPARING THIS KERNEL TO LEARN, NOT TO TEACH. BUT HOPEFULLY, IT WILL ALSO HELPFUL FOR YOU. ENJOY! **","e7eac1d1":"As you see there is some missing data(NaN). In column names, there is no space between the words but there is upper-lower case letters. With this methods we examine some basic problems in our data set. Also, we become familiar with data. There may be other problems, it is just a foreknowledge. ","41ca8cce":"**1) Vertical Concatenating Example**","6b50451c":"# **TIDY DATA**","25bb1ec8":"We can put together two different dataframe with **concat()**."}}