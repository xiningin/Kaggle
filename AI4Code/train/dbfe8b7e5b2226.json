{"cell_type":{"0320f985":"code","b264b3dd":"code","53c0a513":"code","49212e67":"code","ba87fdd7":"code","0b547471":"code","a8b3c37d":"code","12ccf4ed":"code","452a6743":"code","031193db":"code","53929e80":"code","50d9d035":"code","ca189a5a":"code","642248b7":"code","b7edc5c4":"code","aecccdc8":"code","0f6b3299":"code","c1bf206a":"markdown","53130b04":"markdown","1433bb3e":"markdown","8f2b229d":"markdown","11c72680":"markdown","b7b4b4e5":"markdown","9f1b484f":"markdown","25d376a3":"markdown","f36ff2c1":"markdown","1c918b76":"markdown","2afb4a81":"markdown","4960e4e6":"markdown","54b2b91b":"markdown","e9574a44":"markdown","790fcb84":"markdown","1963090b":"markdown","cd753539":"markdown","c93e6f8c":"markdown","7fd9073b":"markdown","d4661d36":"markdown","b1d781f3":"markdown","7c8d57c4":"markdown","1d6a96d2":"markdown","e2630a16":"markdown"},"source":{"0320f985":"import os\nimport pandas as pd\nimport numpy as np\n\nNUM = 51\ndata_path = r'..\/input'\ntrans = np.full([NUM,NUM], np.inf)\npath = pd.read_table(os.path.join(data_path,'task-must-done-update\/path.txt'),sep = ' ')\n\nfor _,b,e,d in path.itertuples():\n    trans[b][e] = d+1  #\u521d\u59cb\u5316\u90bb\u63a5\u8868\nfor ind in range(trans.shape[0]):\n    trans[ind,ind] = 0\n\n# Dijkstra\n\nbegin = 1 #\u8d77\u59cb\u70b9\nend = 10 #\u7ec8\u6b62\u70b9\n\ndef Dijkstra(begin, end, trans):\n    LEN = trans.shape[0]\n    visited = np.full(LEN,False)#\u7528\u4e8e\u8bb0\u5f55\u8bbf\u95ee\n    distance = np.full(LEN,np.Inf)#\u7528\u4e8e\u8bb0\u5f55\u805a\u7c7b\n    path = np.full(LEN,-1)#\u7528\u4e8e\u8bb0\u5f55\u8def\u5f84\n    \n    #\u521d\u59cb\u5316\u8d77\u70b9\n    visited[begin] = True\n    distance[begin] = 0\n    for ind in range(LEN):\n        if trans[begin,ind] < distance[ind]:\n            distance[ind] = trans[begin,ind] #\u82e5\u53ef\u8fbe\u5219\u66ff\u6362\n            path[ind] = begin #\u53ef\u7531begin\u5230\u8fbe\n    \n    # \u9009\u62e9\u4e00\u4e2a\u9876\u70b9\u8fdb\u884c\u8bbf\u95ee\n    for v in range(LEN):\n        # \u5982\u679c\u8bbf\u95ee\u8fc7\u6216\u8005\u4e0d\u53ef\u8fbe\uff0c\u5219\u8df3\u8fc7\u8be5\u70b9\n        if (visited[v]==True) | (distance[v]==np.inf):\n            continue\n            \n        # \u7ecf\u8fc7\u8fd9\u4e2a\u5b9a\u70b9\u7ed9\u5230\u5176\u4ed6\u672a\u8bbf\u95ee\u70b9\u7684\u8ddd\u79bb\u53d8\u5316\u60c5\u51b5\n        for ind in range(LEN):\n            if distance[v]+trans[v,ind] < distance[ind]:#\u5982\u679c\u7ecf\u7531v\u70b9\u8ddd\u79bb\u7f29\u77ed\n                distance[ind] = distance[v]+trans[v,ind]#\u66f4\u6539\u8ddd\u79bb\u5411\u91cf\n                path[ind] = v#\u66f4\u6539\u8def\u5f84\u5411\u91cf\n                \n    #\u5f97\u5230\u6700\u77ed\u8def\u5f84\u957f\u5ea6            \n    dist = distance[end]\n    \n    #\u6c42\u6700\u77ed\u8def\u5f84\n    inv_path = [end]\n    while True:\n        if path[end] == -1:\n            break\n        inv_path.append(path[end])\n        end = path[end]\n        \n    inv_path.reverse()\n    return {\n        'path':inv_path,\n        'dist':dist-len(inv_path)+1 #\u51cf\u53bb\u6bcf\u4e2a\u6709\u5411\u8fb9\u6743\u503c\u4e0a\u52a0\u4e0a\u76841\n        }\n\nDijkstra(1, 10, trans)","b264b3dd":"import pandas as pd \nimport numpy as np\nimport os\ndata_path = r'..\/input'\n# \u52a0\u8f7d\u6570\u636e\nlocations = pd.read_table(os.path.join(data_path,'task-must-done\/tsp.txt'),sep=' ',nrows=16)\nlocations = locations[['Position_X','Position_Y']]\nLEN = locations.shape[0]\ndis = np.zeros((LEN,LEN))\n\n# \u521d\u59cb\u5316\u90bb\u63a5\u8868\nfor i in range(LEN):\n    for j in range(i):\n        p1 = np.array(locations.iloc[i])\n        p2 = np.array(locations.iloc[j])\n        dis[j,i]=np.linalg.norm(p1-p2)\n        dis[i,j]=dis[j,i]\n    dis[i,i] = np.inf","53c0a513":"# \u8d2a\u5a6a\u7b97\u6cd5 \u672a\u4f7f\u7528\nimport pandas as pd \nimport numpy as np\nimport copy\n# \u52a0\u8f7d\u6570\u636e\nlocations = pd.read_table(os.path.join(data_path,'task-must-done\/tsp.txt'),sep=' ',nrows=16)\nlocations = locations[['Position_X','Position_Y']]\nLEN = locations.shape[0]\ndis = np.zeros((LEN,LEN))\n\n# \u521d\u59cb\u5316\u90bb\u63a5\u8868\nfor i in range(LEN):\n    for j in range(i):\n        p1 = np.array(locations.iloc[i])\n        p2 = np.array(locations.iloc[j])\n        dis[j,i]=np.linalg.norm(p1-p2)\n        dis[i,j]=dis[j,i]\n    dis[i,i] = np.inf\n\ndef Greedy(dis,i):\n    visited = np.full(len(dis),False)\n    # \u8bbf\u95ee\u7b2c\u4e00\u4e2a\u70b9\n    d = copy.deepcopy(dis[i,])\n    cost = []\n    path = [i]\n    visited[i]=True\n    \n    while True:\n        nextpoint = d.argmin()\n        if visited[nextpoint]:\n            d[nextpoint]=np.inf\n            if all(visited):\n                path.append(i)\n                cost.append(d[0])\n                return{\n                    'cost':cost,\n                    'path':path\n                }\n            continue\n        visited[nextpoint] = True\n        path.append(nextpoint)\n        cost.append( d.min())\n        d = copy.deepcopy(dis[nextpoint,])\n\n# \u4ece\u4e0d\u540c\u70b9\u51fa\u53d1\u7684\u8d2a\u5fc3\nfor i in range(len(dis)):\n    path = np.full(len(dis)+1,np.nan)\n    cost = np.inf\n    res = Greedy(dis,i)\n    if sum(res['cost']) < cost:\n        cost = sum(res['cost'])\n        path = res['path']\ncost,path","49212e67":"# -*- coding: utf-8 -*-\n\nimport os\n\n#\u8fd4\u56de\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\nimport numpy as np\nimport matplotlib.pyplot as plt\nnp.random.seed(1)\n\n\nloc = pd.read_table(os.path.join(data_path,'task-must-done\/tsp.txt'),sep=' ',nrows=16)\nloc = np.array(loc[['Position_X','Position_Y']])\n \n\ndef getdistmat(loc):\n    '''\u8fd4\u56de\u8ddd\u79bb\u9635'''\n    num = loc.shape[0]\n    distmat = np.zeros((len(loc), len(loc)))\n    # \u521d\u59cb\u5316\u751f\u6210\u8ddd\u79bb\u77e9\u9635\n    for i in range(num):\n        for j in range(i, num):\n            distmat[i][j] = distmat[j][i] = np.linalg.norm(loc[i] - loc[j])\n    return distmat\n \n \ndistmat = getdistmat(loc)\n \nnumant = 100  # \u8682\u8681\u4e2a\u6570\nnumcity = loc.shape[0]\nalpha = 1  # \u4fe1\u606f\u7d20\u91cd\u8981\u7a0b\u5ea6\u56e0\u5b50\nbeta = 5   # \u542f\u53d1\u51fd\u6570\u91cd\u8981\u7a0b\u5ea6\u56e0\u5b50\nrho = 0.1  # \u4fe1\u606f\u7d20\u7684\u6325\u53d1\u901f\u5ea6\nQ = 1      # \u5b8c\u6210\u7387\n \niter = 0       #\u8fed\u4ee3\u521d\u59cb\nitermax = 150  #\u8fed\u4ee3\u603b\u6570\n \netatable = 1.0 \/ (distmat + np.diag([1e10] * numcity))\npheromonetable = np.ones((numcity, numcity))# \u4fe1\u606f\u7d20\u77e9\u9635 16*16\npathtable = np.zeros((numant, numcity)).astype(int)# \u8def\u5f84\u8bb0\u5f55\u8868\uff0c\u8f6c\u5316\u6210\u6574\u578b 100*16\ndistmat = getdistmat(loc)# \u57ce\u5e02\u7684\u8ddd\u79bb\u77e9\u9635 16*16\n \nlengthaver = np.zeros(itermax)  # \u8fed\u4ee3\uff0c\u5b58\u653e\u6bcf\u6b21\u8fed\u4ee3\u540e\uff0c\u8def\u5f84\u7684\u5e73\u5747\u957f\u5ea6  \nlengthbest = np.zeros(itermax)  # \u8fed\u4ee3\uff0c\u5b58\u653e\u6bcf\u6b21\u8fed\u4ee3\u540e\uff0c\u6700\u4f73\u8def\u5f84\u957f\u5ea6  \npathbest = np.zeros((itermax, numcity))  # \u8fed\u4ee3\uff0c\u5b58\u653e\u6bcf\u6b21\u8fed\u4ee3\u540e\uff0c\u6700\u4f73\u8def\u5f84\u57ce\u5e02\u7684\u5750\u6807\n\n\n\n###########################################################\nwhile iter < itermax:#\u8fed\u4ee3\u603b\u6570\n \n    #60\u4e2a\u8682\u8681\u968f\u673a\u653e\u7f6e\u4e8e16\u4e2a\u57ce\u5e02\u4e2d\n    if numant <= numcity:  # \u57ce\u5e02\u6570\u6bd4\u8682\u8681\u6570\u591a\uff0c\u4e0d\u7528\u7ba1\n        pathtable[:, 0] = np.random.permutation(range(numcity))[:numant]\n    else:  # \u8682\u8681\u6570\u6bd4\u57ce\u5e02\u6570\u591a\uff0c\u9700\u8981\u6709\u57ce\u5e02\u653e\u591a\u4e2a\u8682\u8681\n        pathtable[:numcity, 0] = np.random.permutation(range(numcity))[:]\n        pathtable[numcity:, 0] = np.random.randint(numcity,size= numant - numcity)\n    length = np.zeros(numant)  \n \n    #\u672c\u6bb5\u7a0b\u5e8f\u7b97\u51fa\u6bcf\u53ea\/\u7b2ci\u53ea\u8682\u8681\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u57ce\u5e02\u7684\u6982\u7387\n    for i in range(numant):\n \n        visiting = pathtable[i, 0]  # \u5f53\u524d\u6240\u5728\u7684\u57ce\u5e02\n        unvisited = set(range(numcity))#\u672a\u8bbf\u95ee\u7684\u57ce\u5e02\u96c6\u5408\n        unvisited.remove(visiting)  # \u5220\u9664\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u57ce\u5e02\u5143\u7d20\n \n        for j in range(1, numcity):  # \u5faa\u73afnumcity-1\u6b21\uff0c\u8bbf\u95ee\u5269\u4f59\u7684\u6240\u6709numcity-1\u4e2a\u57ce\u5e02\n            # j=1\n            # \u6bcf\u6b21\u7528\u8f6e\u76d8\u6cd5\u9009\u62e9\u4e0b\u4e00\u4e2a\u8981\u8bbf\u95ee\u7684\u57ce\u5e02\n            listunvisited = list(unvisited)\n            #\u672a\u8bbf\u95ee\u57ce\u5e02\u6570\n            probtrans = np.zeros(len(listunvisited))\n            #\u6bcf\u6b21\u5faa\u73af\u90fd\u521d\u59cb\u5316\u8f6c\u79fb\u6982\u7387\u77e9\u9635\n \n \n            #\u4ee5\u4e0b\u662f\u8ba1\u7b97\u8f6c\u79fb\u6982\u7387\n            for k in range(len(listunvisited)):\n                probtrans[k] = np.power(pheromonetable[visiting][listunvisited[k]], alpha) \\\n                               * np.power(etatable[visiting][listunvisited[k]], alpha)\n            #eta-\u4ece\u57ce\u5e02i\u5230\u57ce\u5e02j\u7684\u542f\u53d1\u56e0\u5b50 \u8fd9\u662f\u6982\u7387\u516c\u5f0f\u7684\u5206\u6bcd   \u5176\u4e2d[visiting][listunvis[k]]\u662f\u4ece\u672c\u57ce\u5e02\u5230k\u57ce\u5e02\u7684\u4fe1\u606f\u7d20\n            cumsumprobtrans = (probtrans \/ sum(probtrans)).cumsum()\n            #\u6c42\u51fa\u672c\u53ea\u8682\u8681\u7684\u8f6c\u79fb\u5230\u5404\u4e2a\u57ce\u5e02\u7684\u6982\u7387\u6590\u6ce2\u8872\u6308\u6570\u5217\n \n            cumsumprobtrans -= np.random.rand()# \u968f\u673a\u751f\u6210\u4e0b\u4e2a\u57ce\u5e02\u7684\u8f6c\u79fb\u6982\u7387\uff0c\u518d\u7528\u533a\u95f4\u6bd4\u8f83\n            k = listunvisited[list(cumsumprobtrans > 0).index(True)]# \u51fd\u6570\u9009\u51fa\u7b26\u5408cumsumprobtans>0\u7684\u6570\n            \n            pathtable[i, j] = k# \u4e0b\u4e00\u4e2a\u8981\u8bbf\u95ee\u7684\u57ce\u5e02\n            unvisited.remove(k)#\u5c06\u672a\u8bbf\u95ee\u57ce\u5e02\u5217\u8868\u4e2d\u7684K\u57ce\u5e02\u5220\u53bb\uff0c\u589e\u52a0\u5230\u5df2\u8bbf\u95ee\u57ce\u5e02\u5217\u8868\u4e2d\n \n            length[i] += distmat[visiting][k]#\u8ba1\u7b97\u672c\u57ce\u5e02\u5230K\u57ce\u5e02\u7684\u8ddd\u79bb\n            visiting = k\n \n        length[i] += distmat[visiting][pathtable[i, 0]]# \u8ba1\u7b97\u672c\u53ea\u8682\u8681\u7684\u603b\u7684\u8def\u5f84\u8ddd\u79bb\uff0c\u5305\u62ec\u6700\u540e\u4e00\u4e2a\u57ce\u5e02\u548c\u7b2c\u4e00\u4e2a\u57ce\u5e02\u7684\u8ddd\u79bb\n \n    # \u5305\u542b\u6240\u6709\u8682\u8681\u7684\u4e00\u4e2a\u8fed\u4ee3\u7ed3\u675f\u540e\uff0c\u7edf\u8ba1\u672c\u6b21\u8fed\u4ee3\u7684\u82e5\u5e72\u7edf\u8ba1\u53c2\u6570\n    \n    #\u672c\u8f6e\u7684\u5e73\u5747\u8def\u5f84\n    lengthaver[iter] = length.mean()\n    \n \n    #####\u672c\u90e8\u5206\u662f\u4e3a\u4e86\u6c42\u51fa\u6700\u4f73\u8def\u5f84\n \n    if iter == 0:\n        lengthbest[iter] = length.min()\n        pathbest[iter] = pathtable[length.argmin()].copy()#\u5982\u679c\u662f\u7b2c\u4e00\u8f6e\u8def\u5f84\uff0c\u5219\u9009\u62e9\u672c\u8f6e\u6700\u77ed\u7684\u8def\u5f84,\u5e76\u8fd4\u56de\u7d22\u5f15\u503c\u4e0b\u6807\uff0c\u5e76\u5c06\u5176\u8bb0\u5f55\n    else:\n    #\u540e\u9762\u51e0\u8f6e\u7684\u60c5\u51b5\uff0c\u66f4\u65b0\u6700\u4f73\u8def\u5f84\n        if length.min() > lengthbest[iter - 1]:\n            lengthbest[iter] = lengthbest[iter - 1]\n            pathbest[iter] = pathbest[iter - 1].copy()\n        else:\n            lengthbest[iter] = length.min()\n            pathbest[iter] = pathtable[length.argmin()].copy()\n \n \n    #########\u6b64\u90e8\u5206\u662f\u4e3a\u4e86\u66f4\u65b0\u4fe1\u606f\u7d20\n    changepheromonetable = np.zeros((numcity, numcity))\n    for i in range(numant):#\u66f4\u65b0\u6240\u6709\u7684\u8682\u8681\n        for j in range(numcity - 1):\n            changepheromonetable[pathtable[i, j]][pathtable[i, j + 1]] += Q \/ distmat[pathtable[i, j]][pathtable[i, j + 1]]\n            #\u6839\u636e\u516c\u5f0f\u66f4\u65b0\u672c\u53ea\u8682\u8681\u6539\u53d8\u7684\u57ce\u5e02\u95f4\u7684\u4fe1\u606f\u7d20      Q\/d   \u5176\u4e2dd\u662f\u4ece\u7b2cj\u4e2a\u57ce\u5e02\u5230\u7b2cj+1\u4e2a\u57ce\u5e02\u7684\u8ddd\u79bb\n        changepheromonetable[pathtable[i, j + 1]][pathtable[i, 0]] += Q \/ distmat[pathtable[i, j + 1]][pathtable[i, 0]]\n        #\u9996\u57ce\u5e02\u5230\u6700\u540e\u4e00\u4e2a\u57ce\u5e02 \u6240\u6709\u8682\u8681\u6539\u53d8\u7684\u4fe1\u606f\u7d20\u603b\u548c\n \n    #\u4fe1\u606f\u7d20\u66f4\u65b0\u516c\u5f0fp=(1-\u6325\u53d1\u901f\u7387)*\u73b0\u6709\u4fe1\u606f\u7d20+\u6539\u53d8\u7684\u4fe1\u606f\u7d20\n    pheromonetable = (1 - rho) * pheromonetable + changepheromonetable\n \n    iter += 1  # \u8fed\u4ee3\u6b21\u6570\u6307\u793a\u5668+1\n    \n#\u8fed\u4ee3\u5b8c\u6210\n \n\n \n# \u4f5c\u51fa\u627e\u5230\u7684\u6700\u4f18\u8def\u5f84\u56fe\nlengthbest[-1],pathbest[-1]\n","ba87fdd7":"import os\nimport pandas as pd\nimport numpy as np\ndef Load_data():\n    data_path = r'..\/input'\n    #\u70b9\n    V = pd.read_excel(os.path.join(data_path,'task-opt-done\/map.xls'),sheet_name=0,header=1)\n    V = V[['X\u5750\u6807','Y\u5750\u6807']]\n    #\u8fb9\n    E = pd.read_excel(os.path.join(data_path,'task-opt-done\/map.xls'),sheet_name=1,header=1)\n    NUM = len(V)+len(E)#\u539f\u6709\u7684\u70b9\u4ee5\u53ca\u52a0\u7684\u70b9\n    Adj = np.full((NUM+1,NUM+1),np.inf)#\u4ee5\u8282\u70b9\u7f16\u53f7\u4e3a\u6807\u53f7\n    Addpoint=[]\n    #\u4e3a\u8fb9\u4e0a\u63d2\u5165\u70b9\n    for i,e in enumerate(E.itertuples()):\n        d = np.linalg.norm(V.iloc[e[1]-1]-V.iloc[e[2]-1])\n        Adj[ e[1],i+len(V)+1 ] = d\/2\n        Adj[ i+len(V)+1,e[1] ] = d\/2\n        Adj[ e[2],i+len(V)+1 ] = d\/2\n        Adj[ i+len(V)+1,e[2] ] = d\/2\n        Addpoint.append([i+len(V)+1,*list((V.iloc[e[1]-1]+V.iloc[e[2]-1])\/2),e[1],e[2]])\n    P_add = np.vstack((np.array(V),np.array(Addpoint)[:,1:3]))\n\n    nearest = []\n    for p in [(5112,4806),(9126,4266),(7434 ,1332)]:\n        nearest.append(np.sqrt(((P_add-p)**2).sum(1)).argmin())\n\n    return Adj,Addpoint,nearest,P_add\n\nAdj,addpoint,nearest,P_add = Load_data()\n","0b547471":"## Floyd\ndef Floyd(Adj):\n    NUM=len(Adj)\n    P = np.full((NUM,NUM),-1)\n    Move = Adj.copy()\n    for k in range(NUM):\n        for i in range(NUM):\n            for j in range(NUM):\n\n                if(Move[i,j] > Move[i,k]+Move[k,j]):#\u4e24\u4e2a\u9876\u70b9\u76f4\u63a5\u8f83\u5c0f\u7684\u95f4\u63a5\u8def\u5f84\u66ff\u6362\u8f83\u5927\u7684\u76f4\u63a5\u8def\u5f84\n                    P[i,j] = k                 #\u8bb0\u5f55\u65b0\u8def\u5f84\u7684\u524d\u9a71\n                    Move[i,j] = Move[i,k]+Move[k,j]\n    return Move,P\n\nMove,P = Floyd(Adj)","a8b3c37d":"def Greedy(Move,nearest,n,v_car=40):\n    Point =list(range(50))\n    for k in range(n):\n        point_set=[]\n        #\u8bb0\u5f55\u662f\u5426\u53ef\u4ee5\u4e24\u5206\u949f\u5230\u8fbe\n        tag = np.full(3,False)\n        visited = []\n        visiting = list(range(len(Move)))\n        visiting.pop(0)\n        while len(visiting):\n            p = random.choice(visiting)\n            #\u8bbf\u95ee\u8282\u70b9p\n            visiting.remove(p)\n            visited.append(p)\n            point_set.append(p)\n\n            adj_p = [visiting[ind] for ind,Len in enumerate(Move[p,visiting]) if Len<v_car*3*1000\/60]\n            visited.extend(adj_p)\n            for p in adj_p:\n                visiting.remove(p)\n\n            tag |= Move[p,nearest]<v_car*2*1000\/60\n            if (len(visited)\/len(Move)>=0.9) & all(tag):\n                break\n        for i,t in enumerate(tag):\n            if not t:\n                point_set.append(nearest[i])\n        if len(point_set)<len(Point):\n            Point = point_set\n\n    return Point","12ccf4ed":"def tsp(point_set):\n    distmat = Move[point_set,:][:,point_set]# \u8282\u70b9\u7684\u8ddd\u79bb\u77e9\u9635\n    \n    numant = 100  # \u8682\u8681\u4e2a\u6570\n    numcity = len(distmat)\n    alpha = 1  # \u4fe1\u606f\u7d20\u91cd\u8981\u7a0b\u5ea6\u56e0\u5b50\n    beta = 5   # \u542f\u53d1\u51fd\u6570\u91cd\u8981\u7a0b\u5ea6\u56e0\u5b50\n    rho = 0.1  # \u4fe1\u606f\u7d20\u7684\u6325\u53d1\u901f\u5ea6\n    Q = 1      # \u5b8c\u6210\u7387\n\n    iter = 0       #\u8fed\u4ee3\u521d\u59cb\n    itermax = 150  #\u8fed\u4ee3\u603b\u6570\n    \n    \n    etatable = 1.0 \/ (distmat + np.diag([1e10] * numcity))\n    pheromonetable = np.ones((numcity, numcity))# \u4fe1\u606f\u7d20\u77e9\u9635 16*16\n    pathtable = np.zeros((numant, numcity)).astype(int)# \u8def\u5f84\u8bb0\u5f55\u8868\uff0c\u8f6c\u5316\u6210\u6574\u578b 100*16\n\n\n    degree = [sum(Adj[p]!=np.inf) for p in point_set]#\u8282\u70b9\u7684\u5ea6\n    MAX_degree = max(degree)\n    lengthaver = np.zeros(itermax)  # \u8fed\u4ee3\uff0c\u5b58\u653e\u6bcf\u6b21\u8fed\u4ee3\u540e\uff0c\u8def\u5f84\u7684\u5e73\u5747\u957f\u5ea6  \n    lengthbest = np.zeros(itermax)  # \u8fed\u4ee3\uff0c\u5b58\u653e\u6bcf\u6b21\u8fed\u4ee3\u540e\uff0c\u6700\u4f73\u8def\u5f84\u957f\u5ea6  \n    pathbest = np.zeros((itermax, numcity))  # \u8fed\u4ee3\uff0c\u5b58\u653e\u6bcf\u6b21\u8fed\u4ee3\u540e\uff0c\u6700\u4f73\u8def\u5f84\u57ce\u5e02\u7684\u5750\u6807\n\n\n\n    ###########################################################\n    while iter < itermax:#\u8fed\u4ee3\u603b\u6570\n\n        #60\u4e2a\u8682\u8681\u968f\u673a\u653e\u7f6e\u4e8e16\u4e2a\u57ce\u5e02\u4e2d\n        if numant <= numcity:  # \u57ce\u5e02\u6570\u6bd4\u8682\u8681\u6570\u591a\uff0c\u4e0d\u7528\u7ba1\n            pathtable[:, 0] = np.random.permutation(range(numcity))[:numant]\n        else:  # \u8682\u8681\u6570\u6bd4\u57ce\u5e02\u6570\u591a\uff0c\u9700\u8981\u6709\u57ce\u5e02\u653e\u591a\u4e2a\u8682\u8681\n            pathtable[:numcity, 0] = np.random.permutation(range(numcity))[:]\n            pathtable[numcity:, 0] = np.random.randint(numcity,size= numant - numcity)\n        length = np.zeros(numant)  \n\n        #\u672c\u6bb5\u7a0b\u5e8f\u7b97\u51fa\u6bcf\u53ea\/\u7b2ci\u53ea\u8682\u8681\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u57ce\u5e02\u7684\u6982\u7387\n        for i in range(numant):\n\n            visiting = pathtable[i, 0]  # \u5f53\u524d\u6240\u5728\u7684\u57ce\u5e02\n            unvisited = set(range(numcity))#\u672a\u8bbf\u95ee\u7684\u57ce\u5e02\u96c6\u5408\n            unvisited.remove(visiting)  # \u5220\u9664\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u57ce\u5e02\u5143\u7d20\n\n            for j in range(1, numcity):  # \u5faa\u73afnumcity-1\u6b21\uff0c\u8bbf\u95ee\u5269\u4f59\u7684\u6240\u6709numcity-1\u4e2a\u57ce\u5e02\n                # j=1\n                # \u6bcf\u6b21\u7528\u8f6e\u76d8\u6cd5\u9009\u62e9\u4e0b\u4e00\u4e2a\u8981\u8bbf\u95ee\u7684\u57ce\u5e02\n                listunvisited = list(unvisited)\n                #\u672a\u8bbf\u95ee\u57ce\u5e02\u6570\n                probtrans = np.zeros(len(listunvisited))\n                #\u6bcf\u6b21\u5faa\u73af\u90fd\u521d\u59cb\u5316\u8f6c\u79fb\u6982\u7387\u77e9\u9635\n\n\n                #\u4ee5\u4e0b\u662f\u8ba1\u7b97\u8f6c\u79fb\u6982\u7387\n                for k in range(len(listunvisited)):\n                    probtrans[k] = np.power(pheromonetable[visiting][listunvisited[k]], alpha) \\\n                                   * np.power(etatable[visiting][listunvisited[k]], alpha)\n                #eta-\u4ece\u57ce\u5e02i\u5230\u57ce\u5e02j\u7684\u542f\u53d1\u56e0\u5b50 \u8fd9\u662f\u6982\u7387\u516c\u5f0f\u7684\u5206\u6bcd   \u5176\u4e2d[visiting][listunvis[k]]\u662f\u4ece\u672c\u57ce\u5e02\u5230k\u57ce\u5e02\u7684\u4fe1\u606f\u7d20\n                cumsumprobtrans = (probtrans \/ sum(probtrans)).cumsum()\n                #\u6c42\u51fa\u672c\u53ea\u8682\u8681\u7684\u8f6c\u79fb\u5230\u5404\u4e2a\u57ce\u5e02\u7684\u6982\u7387\u6590\u6ce2\u8872\u6308\u6570\u5217\n\n                cumsumprobtrans -= np.random.rand()# \u968f\u673a\u751f\u6210\u4e0b\u4e2a\u57ce\u5e02\u7684\u8f6c\u79fb\u6982\u7387\uff0c\u518d\u7528\u533a\u95f4\u6bd4\u8f83\n                k = listunvisited[list(cumsumprobtrans > 0).index(True)]# \u51fd\u6570\u9009\u51fa\u7b26\u5408cumsumprobtans>0\u7684\u6570\n\n                pathtable[i, j] = k# \u4e0b\u4e00\u4e2a\u8981\u8bbf\u95ee\u7684\u57ce\u5e02\n                unvisited.remove(k)#\u5c06\u672a\u8bbf\u95ee\u57ce\u5e02\u5217\u8868\u4e2d\u7684K\u57ce\u5e02\u5220\u53bb\uff0c\u589e\u52a0\u5230\u5df2\u8bbf\u95ee\u57ce\u5e02\u5217\u8868\u4e2d\n\n                length[i] += distmat[visiting][k]#\u8ba1\u7b97\u672c\u57ce\u5e02\u5230K\u57ce\u5e02\u7684\u8ddd\u79bb\n                visiting = k\n\n            length[i] += distmat[visiting][pathtable[i, 0]]# \u8ba1\u7b97\u672c\u53ea\u8682\u8681\u7684\u603b\u7684\u8def\u5f84\u8ddd\u79bb\uff0c\u5305\u62ec\u6700\u540e\u4e00\u4e2a\u57ce\u5e02\u548c\u7b2c\u4e00\u4e2a\u57ce\u5e02\u7684\u8ddd\u79bb\n\n        # \u5305\u542b\u6240\u6709\u8682\u8681\u7684\u4e00\u4e2a\u8fed\u4ee3\u7ed3\u675f\u540e\uff0c\u7edf\u8ba1\u672c\u6b21\u8fed\u4ee3\u7684\u82e5\u5e72\u7edf\u8ba1\u53c2\u6570\n\n        #\u672c\u8f6e\u7684\u5e73\u5747\u8def\u5f84\n        lengthaver[iter] = length.mean()\n\n\n        #####\u672c\u90e8\u5206\u662f\u4e3a\u4e86\u6c42\u51fa\u6700\u4f73\u8def\u5f84\n\n        if iter == 0:\n            lengthbest[iter] = length.min()\n            pathbest[iter] = pathtable[length.argmin()].copy()#\u5982\u679c\u662f\u7b2c\u4e00\u8f6e\u8def\u5f84\uff0c\u5219\u9009\u62e9\u672c\u8f6e\u6700\u77ed\u7684\u8def\u5f84,\u5e76\u8fd4\u56de\u7d22\u5f15\u503c\u4e0b\u6807\uff0c\u5e76\u5c06\u5176\u8bb0\u5f55\n        else:\n        #\u540e\u9762\u51e0\u8f6e\u7684\u60c5\u51b5\uff0c\u66f4\u65b0\u6700\u4f73\u8def\u5f84\n            if length.min() > lengthbest[iter - 1]:\n                lengthbest[iter] = lengthbest[iter - 1]\n                pathbest[iter] = pathbest[iter - 1].copy()\n            else:\n                lengthbest[iter] = length.min()\n                pathbest[iter] = pathtable[length.argmin()].copy()\n\n\n        #########\u6b64\u90e8\u5206\u662f\u4e3a\u4e86\u66f4\u65b0\u4fe1\u606f\u7d20\n        changepheromonetable = np.zeros((numcity, numcity))\n        for i in range(numant):#\u66f4\u65b0\u6240\u6709\u7684\u8682\u8681\n            for j in range(numcity - 1):#\u57ce\u5e02\n    #             changepheromonetable[pathtable[i, j]][pathtable[i, j + 1]] += Q \/ distmat[pathtable[i, j]][pathtable[i, j + 1]]\n                #\u6839\u636e\u516c\u5f0f\u66f4\u65b0\u672c\u53ea\u8682\u8681\u6539\u53d8\u7684\u57ce\u5e02\u95f4\u7684\u4fe1\u606f\u7d20   Q\/d   \u5176\u4e2dd\u662f\u4ece\u7b2cj\u4e2a\u57ce\u5e02\u5230\u7b2cj+1\u4e2a\u57ce\u5e02\u7684\u8ddd\u79bb\n                changepheromonetable[pathtable[i, j]][pathtable[i, j + 1]] +=(Q \/ distmat[pathtable[i, j]][pathtable[i, j + 1]])*(MAX_degree\/(degree[j]+degree[j+1]))\n            changepheromonetable[pathtable[i, j + 1]][pathtable[i, 0]] += (Q \/ distmat[pathtable[i, j + 1]][pathtable[i, 0]])*(MAX_degree\/(degree[j]+degree[j+1]))\n            #\u9996\u57ce\u5e02\u5230\u6700\u540e\u4e00\u4e2a\u57ce\u5e02 \u6240\u6709\u8682\u8681\u6539\u53d8\u7684\u4fe1\u606f\u7d20\u603b\u548c\n\n        #\u4fe1\u606f\u7d20\u66f4\u65b0\u516c\u5f0fp=(1-\u6325\u53d1\u901f\u7387)*\u73b0\u6709\u4fe1\u606f\u7d20+\u6539\u53d8\u7684\u4fe1\u606f\u7d20\n        pheromonetable = (1 - rho) * pheromonetable + changepheromonetable\n\n        iter += 1  # \u8fed\u4ee3\u6b21\u6570\u6307\u793a\u5668+1\n\n    #\u8fed\u4ee3\u5b8c\u6210\n\n\n    # \u4f5c\u51fa\u627e\u5230\u7684\u6700\u4f18\u8def\u5f84\u56fe\n#     print(lengthbest[-1],pathbest[-1])\n    return lengthbest[-1],np.array(point_set)[pathbest[-1].astype(int)]","452a6743":"def broad_index(Adj,route_all):\n    visited=np.full(len(Adj),False)\n    for p in route_all:\n        visited|=(Adj[p]!=np.inf)\n    return sum(visited)\/len(visited)\ndef freq_index(Adj,route_all):\n    route_all_len=[]\n    route_all_para=[]\n    for ind,_ in enumerate(route_all):\n        prior_ind = route_all[ind]\n        next_ind = route_all[(ind+1)%len(route_all)]\n        route_all_len.append(Adj[prior_ind,next_ind])\n        vec = Adj[next_ind].copy()\n        vec.sort()\n        route_all_para.append(sum(vec[[0,1]])\/2)#\u8def\u7684\u4e00\u534a\u7684\u548c\u5373\u4e3a\u5747\u503c\n\n    return sum(route_all_para)\/sum(route_all_len)","031193db":"# \u4e24\u70b9\u4e4b\u95f4\u7684\u901a\u8def        \ndef getPath(i, j,path,p_):\n    if i != j:\n        if path[i][j] == -1:\n            p_.append(j)\n        else:\n            getPath(i, path[i][j],P,p_)\n            getPath(path[i][j], j,P,p_)\n    return p_\n#\u5bfb\u627e\u7ecf\u8fc7\u5173\u952e\u8282\u70b9\u7684\u56de\u8def\ndef route(path,P):\n    path_all=[]\n    for ind,_ in enumerate(path):\n        next_p=path[(ind+1)%len(path)]\n        prior_p = path[ind]\n        p_=[]\n        path_all.extend(getPath(prior_p,next_p,P,p_))\n    return path_all","53929e80":"import matplotlib.pyplot as plt\ndef print_map(P_add,path,point_set,l=True,p=True):\n    data_path = r'..\/input'\n    E = pd.read_excel(os.path.join(data_path,'task-opt-done\/map.xls'),sheet_name=1,header=1)\n    for e in E.itertuples():\n        plt.plot( [P_add[e[1]-1][0],P_add[e[2]-1][0]],[P_add[e[1]-1][1],P_add[e[2]-1][1]],color='k',)\n    if l == True:\n        for ind,_ in enumerate(path):\n            plt.plot( [P_add[path[ind]-1][0],P_add[path[(ind+1)%len(path)]-1][0]],[P_add[path[ind]-1][1],P_add[path[(ind+1)%len(path)]-1][1]],color='b')\n    if p==True:\n        for p in point_set:\n            plt.scatter(P_add[p-1][0],P_add[p-1][1],linewidths=100,marker='x',color = 'r')\n    pass","50d9d035":"def print_table(path,vital_point,Adj,P_add):\n    T=0\n    change_car = False\n    vital_point=[v-1 for v in  vital_point]\n    v_car = 40#\u8f66\u901f km\/h\n    N_car = len(vital_point)+1#\u8f66\u7684\u6570\u91cf\n    n_car = 0#\u6b63\u5728\u8fd0\u884c\u8f66\u7684\u7f16\u53f7\n    ind = 0#\u9053\u8def\u8282\u70b9\u6807\u53f7\n    gone_len = 0#\u67d0\u6761\u8def\u5df2\u7ecf\u884c\u8d70\u7684\u8def\u7a0b\n    recoding = np.zeros((4*60+1,N_car,2))\n    way_len = Adj[path[(ind)%len(path)],path[(ind+1)%len(path)]]#\u8def\u957f\n    recoding[0]=np.vstack((P_add[vital_point[0]],P_add[vital_point]))\n    while T < 4*60:\n        T += 1#\u65f6\u95f4\u6d41\u901d\n        recoding[T]=recoding[T-1]#\u5927\u591a\u90fd\u662f\u4e0d\u53d8\u7684\n\n        gone_len += v_car*1000\/60#\u6bcf\u5206\u949f\u90fd\u8d70\u4e00\u6bb5\u8ddd\u79bb\n\n        while way_len-gone_len<=0:#\u5224\u65ad\u662f\u5426\u5df2\u8d70\u8def\u5f84\u8d85\u8fc7\u8def\u7684\u957f\u5ea6\u8def\u7684\u4e2a\u6570\u5927\u4e8e\u7b49\u4e8e1\n            gone_len=gone_len-way_len\n            ind += 1\n            if path[(ind)%len(path)]-1 in vital_point:\n                change_car = True\n                n_car = (n_car+1)%N_car\n            way_len = Adj[path[(ind)%len(path)],path[(ind+1)%len(path)]]\n        #\u7ed9\u51fa\u4e86\u8def\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\n        begin_p = P_add[path[(ind)%len(path)]-1]\n        end_p = P_add[path[(ind+1)%len(path)]-1]\n        #\u8be5\u5206\u949f\u7ed3\u675f\u540e\u8f66\u7684\u4f4d\u7f6e\n        point = begin_p+(begin_p-end_p)\/way_len*gone_len\n        if change_car:\n            recoding[T,(n_car-1)%N_car]=recoding[T,n_car%N_car]\n            change_car = False\n        recoding[T,n_car] = point\n    return recoding\n            ","ca189a5a":"# np.save('Move.npy',Move)\n# np.save('P.npy',P)\nMove=np.load('..\/input\/tasktemp\/Move.npy')\nP = np.load('..\/input\/tasktemp\/P.npy')","642248b7":"import random\nrandom.seed(1)\nnp.random.seed(1)\nimport copy\npoint_set = Greedy(Move,nearest,100)\nshow = copy.deepcopy(point_set)\n\nprint('\u91cd\u8981\u8282\u70b9\uff1a')\nprint(point_set)\n\n#\u5c55\u793a\nfor addp in addpoint:\n    if addp[0] in show:\n        \n        show.remove(addp[0])\n        show.append(addp[3:])\nprint('\u91cd\u8981\u8282\u70b9\u6240\u5728\u4f4d\u7f6e\uff1a')\nprint(show)\nprint('\u91cd\u8981\u8282\u70b9\u4e2a\u6570\uff1a')\nprint(len(show))\nprint('\u8681\u7fa4\u7b97\u6cd5\u7684tsp\u8fd1\u4f3c\u89e3\uff1a')\ntsp_res = tsp(point_set)\nprint(tsp_res)\nroute_all = route(tsp_res[1],P)\nprint('\u6240\u6709\u8def\u5f84:')\nprint(route_all)\n\nprint_map(P_add,route_all,point_set,l=True,p=True)\nprint('\u5e7f\u5ea6\\\u9891\u5ea6\u6307\u6807:')\nprint(broad_index(Adj,route_all),freq_index(Adj,route_all))\n\n\n#\u751f\u6210\u8bb0\u5f55\nrecodings = print_table(route_all,point_set,Adj,P_add)\n\nwith open('2017357770121-Result3.csv','w') as f:\n    f.write(str(recodings.shape[1]))\n    f.write(',')\n    f.write(str(broad_index(Adj,route_all)))\n    f.write(',')\n    f.write(str(freq_index(Adj,route_all)))\n    for ind,Item in enumerate(recodings):\n        f.write('\\n')\n        f.write(str(ind))\n        for Cell in Item:\n            f.write(',')\n            f.write(str(tuple(Cell)))","b7edc5c4":"print_map(P_add,route_all,point_set,l=0,p=True)","aecccdc8":"\nrandom.seed(6)\nnp.random.seed(6)\ndef Greedy_10(Adj,Move,P,nearest,n,v_car=40):\n    visit_rate=0\n    k=0\n    while k < n:\n        point_set=[]\n        #\u8bb0\u5f55\u662f\u5426\u53ef\u4ee5\u4e24\u5206\u949f\u5230\u8fbe\n        tag = np.full(3,False)\n        visited = []\n        visiting = list(range(len(Move)))\n        visiting.pop(0)\n\n        while len(point_set)<9:#len(visiting):\n            p = random.choice(visiting)\n            #\u8bbf\u95ee\u8282\u70b9p\n            visiting.remove(p)\n            visited.append(p)\n            point_set.append(p)\n\n            adj_p = [visiting[ind] for ind,Len in enumerate(Move[p,visiting]) if Len<v_car*3*1000\/60]\n            visited.extend(adj_p)\n            for p in adj_p:\n                visiting.remove(p)\n\n            tag |= Move[p,nearest]<v_car*2*1000\/60\n            if (len(visited)\/len(Move)>=0.9) & all(tag):\n                break\n\n        if not all(tag):\n            continue\n        k+=1\n\n        if 1-1.*(len(visiting))\/len(Move)>visit_rate:\n            visit_rate= 1-len(visiting)\/len(Move)\n            Point = point_set\n            adj_=np.full(len(Adj),False)\n            for p in point_set:\n                adj_[p]=True\n                adj_ |= Adj[p]!=np.inf\n            broad = sum(adj_)\/len(adj_)\n    Point,visit_rate,broad\n    return Point,visit_rate,broad\n\npoint_set,visit_rate,broad_ind = Greedy_10(Adj,Move,P,nearest,100,v_car=40)\n\ntsp_res = tsp(point_set)\nroute_all = route(tsp_res[1],P)\nfreq_ind=freq_index(Adj,route_all)\nprint_map(P_add,path=route_all,point_set=point_set,l=1,p=1)\nprint(point_set,visit_rate,broad_ind,freq_ind)\n#\u8bb0\u5f55\nrecodings = print_table(route_all,point_set,Adj,P_add)\n\nwith open('2017357770121-Result5.csv','w') as f:\n    f.write(str(recodings.shape[1]))\n    f.write(',')\n    f.write(str(broad_index(Adj,route_all)))\n    f.write(',')\n    f.write(str(freq_index(Adj,route_all)))\n    for ind,Item in enumerate(recodings):\n        f.write('\\n')\n        f.write(str(ind))\n        for Cell in Item:\n            f.write(',')\n            f.write(str(tuple(Cell)))","0f6b3299":"random.seed(1)\nnp.random.seed(1)\n\npoint_set = Greedy(Move,nearest,100,v_car=50)\nshow = copy.deepcopy(point_set)\n\nprint('\u91cd\u8981\u8282\u70b9\uff1a')\nprint(point_set)\n\n#\u5c55\u793a\nfor addp in addpoint:\n    if addp[0] in show:\n        \n        show.remove(addp[0])\n        show.append(addp[3:])\nprint('\u91cd\u8981\u8282\u70b9\u6240\u5728\u4f4d\u7f6e\uff1a')\nprint(show)\nprint('\u91cd\u8981\u8282\u70b9\u4e2a\u6570\uff1a')\nprint(len(show))\nprint('\u8681\u7fa4\u7b97\u6cd5\u7684tsp\u8fd1\u4f3c\u89e3\uff1a')\ntsp_res = tsp(point_set)\nprint(tsp_res)\nroute_all = route(tsp_res[1],P)\nprint('\u6240\u6709\u8def\u5f84:')\nprint(route_all)\n\nprint_map(P_add,route_all,point_set,l=True,p=True)\n\nprint('\u5e7f\u5ea6\\\u9891\u5ea6\u6307\u6807:')\nprint(broad_index(Adj,route_all),freq_index(Adj,route_all))\n\n#\u751f\u6210\u8bb0\u5f55\nrecodings = print_table(route_all,point_set,Adj,P_add)\n\nwith open('2017357770121-Result6.csv','w') as f:\n    f.write(str(recodings.shape[1]))\n    f.write(',')\n    f.write(str(broad_index(Adj,route_all)))\n    f.write(',')\n    f.write(str(freq_index(Adj,route_all)))\n    for ind,Item in enumerate(recodings):\n        f.write('\\n')\n        f.write(str(ind))\n        for Cell in Item:\n            f.write(',')\n            f.write(str(tuple(Cell)))","c1bf206a":"### TSP\u95ee\u9898\u6c42\u89e3\n\n","53130b04":"### \u95ee\u9898\u5206\u6790\n\n\u7531\u4e8e\u7ed9\u5b9a\u4e86\u5730\u56fe\u9053\u8def\u8282\u70b9\u5750\u6807\u4ee5\u53ca\u9053\u8def\u8d77\u59cb\u7ec8\u6b62\u8282\u70b9\uff0c\u56e0\u6b64\u53ef\u5c06\u9053\u8def\u62bd\u8c61\u4e3a\u4e00\u4e2a\u65e0\u5411\u8fb9\u8d4b\u6743\u56fe\u3002\u8fb9\u4e3a\u9053\u8def\uff0c\u70b9\u4e3a\u9053\u8def\u4ea4\u6c47\u70b9\u3002\u5c06\u8b66\u8f66\u5de1\u903b\u95ee\u9898\u8f6c\u5316\u4e3a\u56fe\u8bba\u4e2d\u7684\u8282\u70b9\u8986\u76d6\u95ee\u9898\u3002\n\n\u9996\u5148\u6784\u9020\u90bb\u63a5\u77e9\u9635\uff0c\u800c\u540e\u5229\u7528`Floyd`\u7b97\u6cd5\u5904\u7406\uff0c\u5f97\u5230\u4e24\u8282\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u3002\u5e76\u5f97\u5230\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002\n\n#### \u95ee\u9898\u4e00\u5206\u6790\n\n\u95ee\u9898\u4e00\u662f\u5728\u6ee1\u8db3\u8b66\u8f66\u63a5\u8b66\u540e\u4e09\u5206\u949f\u5185\u8d76\u5230\u73b0\u573a\u7684\u6bd4\u4f8b\u4e0d\u4f4e\u4e8e90%\uff0c\u800c\u8d76\u5230\u91cd\u70b9\u90e8\u5206\u7684\u65f6\u95f4\u5fc5\u987b\u5728\u4e24\u5206\u949f\u5185\u7684\u6761\u4ef6\u4e0b\u6c42\u6700\u5c11\u9700\u8981\u5206\u914d\u7684\u8b66\u8f66\u6570\u91cf\u3002\u8be5\u95ee\u9898\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u56fe\u8bba\u8986\u76d6\u7684\u4f18\u5316\u95ee\u9898\u3002\n\n#### \u95ee\u9898\u4e8c\u5206\u6790\n\u95ee\u9898\u4e8c\u9700\u8981\u7ed9\u51fa\u8bc4\u4ef7\u8bad\u7ec3\u6548\u679c\u663e\u8457\u7a0b\u5ea6\u7684\u6709\u5173\u6307\u6807\u3002\u7531\u4e8e\u5de1\u903b\u7684\u76ee\u7684\u5728\u4e8e\u8d77\u5230\u9707\u6151\u4f5c\u7528\uff0c\u964d\u4f4e\u57ce\u5e02\u72af\u7f6a\u7387\uff0c\u4e14\u589e\u52a0\u5e02\u6c11\u5b89\u5168\u611f\uff0c\u5e76\u4e14\u52a0\u5feb\u63a5\u5904\u8b66\u65f6\u95f4\uff0c\u63d0\u9ad8\u53cd\u5e94\u65f6\u6548\u3002\u56e0\u6b64\u8981\u6c42\u53ef\u5f52\u7eb3\u4e3a\u4e24\u65b9\u9762:\u72af\u7f6a\u5a01\u6151\u4e0e\u63a5\u8b66\u6548\u7387\u3002\u4f46\u5728D1\u4e2d\u5df2\u8003\u8651\u5230\u63a5\u8b66\u65f6\u95f4\u65b9\u9762\u7684\u6307\u6807\u3002\u56e0\u6b64\uff0c\u8be5\u95ee\u9898\u4e3b\u8981\u8003\u8651\u5de1\u903b\u7684\u72af\u7f6a\u9707\u6151\u4f5c\u7528\u53ca\u63d0\u5347\u5b89\u5168\u611f\u3002\n\n\u7b14\u8005\u8ba4\u4e3a\uff0c\u9707\u6151\u4f5c\u7528\u4e0e\u63d0\u5347\u5b89\u5168\u611f\u8981\u6c42\u5de1\u903b\u8f66\u9700\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\u63a5\u89e6\u5230\u66f4\u591a\u7684\u4eba\u7fa4\u4ee5\u53ca\u66f4\u52a0\u9891\u7e41\u7684\u9020\u8bbf\u67d0\u5730\u70b9\u3002\u5373\u5728\u4e00\u5b9a\u65f6\u95f4\u6bb5\u5185\u7ecf\u8fc7\u66f4\u591a\u7684\u4e0d\u540c\u9053\u8def\u4e0e\u9053\u8def\u95f4\u8282\u70b9\uff0c\u4ee5\u53ca\u66f4\u52a0\u9891\u7e41\u7684\u5230\u8fbe\u4e4b\u524d\u5df2\u5230\u8fbe\u7684\u8282\u70b9\u3002\u5b9a\u4e49\u5de1\u903b\u8def\u7ebf\u4e0a\u7684\u8282\u70b9\u53ca\u5de1\u903b\u8def\u7ebf\u8282\u70b9\u7684\u90bb\u63a5\u8282\u70b9\u4e3a\u5de1\u903b\u8f66\u7684\u53ef\u89c6\u8282\u70b9\u3002\u56e0\u6b64\u63d0\u51fa\u4ee5\u4e0b\u4e24\u4e2a\u6307\u6807\uff1a\n\n\u5de1\u903b\u5e7f\u5ea6\uff0c\u6307\u5de1\u903b\u8def\u7ebf\u8282\u70b9\u53ca\u8def\u7ebf\u4e0a\u8282\u70b9\u7684\u53ef\u8fbe\u8282\u70b9\u8986\u76d6\u7387\u3002\n\u5de1\u903b\u9891\u5ea6\uff0c\u6307\u5de1\u903b\u8def\u7ebf\n\n#### \u95ee\u9898\u4e09\u5206\u6790\n\u57fa\u4e8e\u95ee\u9898\u4e8c\u4e2d\u63d0\u51fa\u7684\u8bc4\u4ef7\u6307\u6807\uff0c\n\n\u95ee\u9898\u4e09\u7ed9\u51fa\n\n#### \u95ee\u9898\u56db\u5206\u6790\n\u662f\u5728\u95ee\u9898\u4e09\u7684\u57fa\u7840\u4e0a\u8003\u8651\u9690\u853d\u6027\uff0c\u56e0\u6b64\u9700\u8981\u727a\u7272\u5de1\u903b\u7684\u6700\u4f18\u6307\u6807\u503c\u7684\u65b9\u6848\u800c\u83b7\u5f97\u4e00\u5b9a\u7684\u968f\u673a\u6027\u3002\u56e0\u6b64\u672c\u6587\u5f15\u5165\u968f\u673a\u667a\u80fd\u7b97\u6cd5\uff0c\u4f7f\u5f97\u8b66\u8f66\u80fd\u591f\u5728\u9009\u62e9\u8def\u7ebf\u65f6\u5177\u6709\u5f88\u5f3a\u7684\u52a8\u6001\u968f\u673a\u6027\uff0c\u6b64\u65f6\u8b66\u8f66\u7684\u9690\u853d\u6027\u95ee\u9898\u4f1a\u5f97\u5230\u8f83\u5927\u7684\u63d0\u5347\u3002\n\n#### \u95ee\u9898\u4e94\u5206\u6790\n\u5728\u95ee\u9898\u4e09\u7684\u57fa\u7840\u4e0a\uff0c\u56fa\u5b9a\u8b66\u8f66\u6570\u76ee\u4f7f\u5f97\uff0c\u4f18\u5316D1\u4e2d\u7684\u9700\u6c42\u3002\u672c\u9898\u4f9d\u7136\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\u3002\n\n#### \u95ee\u9898\u516d\u5206\u6790\n\u672c\u9898\u4ec5\u4ec5\u63d0\u9ad8\u4e86\u63a5\u8b66\u540e\u7684\u884c\u9a76\u901f\u5ea6\uff0c\u56e0\u6b64\uff0c\u6b64\u65f63\u5206\u949f\u6240\u80fd\u8986\u76d6\u7684\u533a\u57df\u66f4\u5e7f\u3002\u4f9d\u7136\u4f9d\u7167\u95ee\u9898\u4e09\u7684\u7b97\u6cd5\u6c42\u5f97\u65b9\u6848\u3002\n\n#### \u95ee\u9898\u4e03\u5206\u6790\n\u8be5\u95ee\u9898\u8981\u6c42\u8003\u8651\u66f4\u591a\u7684\u56e0\u7d20\uff0c\u9002\u5f53\u6392\u9664\u4e00\u5b9a\u5047\u5b9a\u3002\u8003\u8651\u5230\u73b0\u5b9e\u751f\u6d3b\u60c5\u5f62\uff0c\u672c\u6587\u5f52\u7eb3\u6574\u7406\u63d0\u51fa\u4e00\u7cfb\u5217\u4e9f\u9700\u660e\u786e\u7684\u8981\u7d20\uff0c\u7528\u4ee5\u5b8c\u5584\u5de1\u903b\u6a21\u578b\uff0c\u4f7f\u4e4b\u66f4\u5177\u5408\u7406\u6027\n","1433bb3e":"#### \u83b7\u5f97\u90bb\u63a5\u77e9\u9635","8f2b229d":"# \u7b97\u6cd5\u671f\u672b\u5927\u4f5c\u4e1a\n*\u59d3\u540d* \uff1a `\u5f90\u9a84\u9633`\n*\u5b66\u53f7* \uff1a `2017357770121`","11c72680":"\n#### \u95ee\u9898\u4e00\n\u8003\u8651\u6700\u7b80\u5355\u7684\u8b66\u8f66\u4e0d\u52a8\u7684\u6761\u4ef6\uff0c\u5373\u5c06\u8b66\u8f66\u89c6\u4e3a\u4e00\u4e2a\u9876\u70b9\u3002\u5373\u95ee\u9898\u53d8\u4e3a\u4f7f\u6761\u4ef6\u6ee1\u8db3\u7684\u6700\u4f18\u9876\u70b9\u8986\u76d6\u96c6\u95ee\u9898\u3002\u7531\u4e8e\u4e3aNP\u96be\u95ee\u9898\uff0c\u56e0\u6b64\u91c7\u7528\u8d2a\u5a6a\u7b97\u6cd5\u627e\u8fd1\u4f3c\u6700\u4f18\u89e3\n\n\u7531\u4e0a\u8ff0\u95ee\u98981\u7684\u7ea6\u675f\u53ef\u5217\u51fa\u5982\u4e0b\u8868\u8fbe\n$$\n\\begin{cases}\nV \\sub \\Omega\\\\\nApprochale(v,p)=1&\\forall p\\in P ,\\exist v\\in v\\\\\n\\#\\delta(V)\/\\#\\Omega\\ge90\\%\n\\end{cases}\n$$\n\u5176\u4e2d$\\delta(V)$\u8868\u793a\u70b9\u96c6$V$\u7684\u76f8\u90bb\u70b9\n$$\nApproachable(v,p)=\\begin{cases}1&\u5de1\u903b\u8f66\u4e24\u5206\u949f\u5185\u7531v\u80fd\u5230\u8fbep\\\\\n0&others\\end{cases}\n$$\n\u91c7\u7528\u8d2a\u5a6a\u7b97\u6cd5\u6c42\u89e3\u8be5\u95ee\u9898\n\n#### \u95ee\u9898\u4e8c\n\n\u7531\u524d\u9762\u5206\u6790\u53ef\u77e5\uff0c\u5de1\u903b\u8def\u5f84\u7684\u8986\u76d6\u5230\u7684\u53ef\u89c6\u8282\u70b9\u9700\u8981\u6bd4\u8f83\u5e7f\u3002\u4e14\u5de1\u903b\u8def\u5f84\u5c3d\u53ef\u80fd\u7684\u77ed\uff0c\u624d\u80fd\u4f7f\u5f97\u5de1\u903b\u4e00\u6b21\u7684\u8017\u8d39\u65f6\u95f4\u8f83\u5c0f\uff0c\u4ece\u800c\u63d0\u9ad8\u9891\u5ea6\u3002\u63d0\u51fa\u5e7f\u5ea6\u4e0e\u9891\u5ea6\u6307\u6807\u5982\u4e0b\uff1a\n$$\nB=\\#\\delta(V)\/\\#\\Omega\\\\\nF=\u5de1\u903b\u5fc5\u7ecf\u70b9\u96c6\u90bb\u63a5\u6700\u77ed\u4e24\u8fb9\u957f\u5ea6\u7684\u5747\u503c\u7684\u548c\/\u5de1\u903b\u8ddd\u79bb\n$$\n\n#### \u95ee\u9898\u4e09\n\n\u7531\u524d\u9762\u5206\u6790\u53ef\u77e5\uff0c\u8be5\u95ee\u9898\u5373\u4e3a\u5bfb\u627e\u4e00\u4e2a\u7ecf\u8fc7\u95ee\u9898\u4e00\u4e2d\u6240\u6709\u505c\u9a7b\u70b9\u7684\u6709\u6548\u56de\u8def\u95ee\u9898\u3002\u56e0\u6b64\u4e0d\u59a8\u91c7\u7528\u4e0eTSP\u95ee\u9898\u76f8\u8fd1\u7684\u7b97\u6cd5\u3002\u672c\u95ee\u9898\u91c7\u7528\u6539\u8fdb\u7684\u8681\u7fa4\u7b97\u6cd5\u8fdb\u884c\u6c42\u89e3\u3002\n\n\u5176\u4e2d\u6bcf\u6761\u8def\u5f84\u7684\u4fe1\u606f\u7d20\u7684\u66f4\u65b0\u91cf\u4e3a\n$$\n\\dfrac{Q}{d_{ij}}\\times \\dfrac{2deg_{max}}{deg_i+deg_j}\n$$\n\u5176\u4e2d$Q$\u4e3a\u53d8\u5316\u7387\uff0c$d_{ij}$\u4e3a$i,j$\u8282\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c$deg_i$\u4e3a$i$\u8282\u70b9\u7684\u5ea6\uff0c$deg_{max}$\u4e3a\u6240\u7ecf\u8fc7\u5173\u952e\u8282\u70b9\u7684\u6700\u5927\u5ea6\u6570\u3002\u66f4\u65b0\u65b9\u5411\u4e0e\u95ee\u9898\u4e8c\u4e2d\u7684\u6307\u6807\u57fa\u672c\u543b\u5408\uff0c\u5373\u5bfb\u627e\u8def\u5f84\u6240\u80fd\u7ecf\u8fc7\u7684\u8282\u70b9\u7684\u5ea6\u8f83\u5927\uff0c\u4e14\u8def\u5f84\u8f83\u77ed\u3002\n\n\n\u5e7f\u5ea6\u6307\u6807\u8f83\u5c0f\uff0c\u800c\u9891\u5ea6\u6307\u6807\u8f83\u5927\u3002\u56e0\u6b64\u9700\u8981\u5c3d\u91cf\u63a7\u5236\u9891\u5ea6\uff0c\u4f7f\u7528\u66f4\u591a\u7684\u8b66\u8f66\u7528\u4ee5\u589e\u5927\u5de1\u903b\u7684\u5e7f\u5ea6\u3002\n\n#### \u95ee\u9898\u56db\n\n\u7531\u4e8e\u5bfb\u627e\u6700\u4f18\u8282\u70b9\u7684\u8d2a\u5a6a\u7b97\u6cd5\uff0c\u4ee5\u53ca\u5bfb\u627e\u5408\u9002\u8def\u5f84\u7684\u8681\u7fa4\u7b97\u6cd5\u4e3a\u968f\u673a\u7b97\u6cd5\u3002\u56e0\u6b64\u5f53\u53d6\u4e0d\u540c\u7684\u968f\u673a\u79cd\u5b50\u65f6\uff0c\u5de1\u903b\u8def\u5f84\u4e0e\u7ecf\u8fc7\u8282\u70b9\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u4ece\u800c\u6ee1\u8db3D3\u8981\u6c42\u3002\n\n\n#### \u95ee\u9898\u4e94\n\n\u672c\u9898\u56fa\u5b9a\u5de1\u903b\u8f66\u6570\u76ee\uff0c\u5bfb\u627e\u6ee1\u8db3D1\uff0cD2\u7684\u6700\u4f18\u89e3\u3002\u7531\u4e8e\u8b66\u8f66\u6570\u91cf\u8f83\u5c11\uff0c\u56e0\u6b64\u53ef\u91c7\u7528\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u8fdb\u884c\u6c42\u89e3\u3002\u9700\u8981\u6ee1\u8db3\u5de1\u903b\u95ee\u9898\uff0c\u56e0\u6b64\u53ea\u6709\u4e5d\u4e2a\u5de1\u903b\u8f66\u9759\u6b62\u4e00\u4e2a\u5de1\u903b\u8f66\u5728\u91cd\u8981\u8282\u70b9\u95f4\u5de1\u903b\u3002\n\n#### \u95ee\u9898\u516d\n\n\u82e5\u8b66\u8f66\u63a5\u8b66\u901f\u5ea6\u6709\u6240\u63d0\u5347\uff0c\u5219\u6bcf\u4e2a\u8b66\u8f66\u7684\u8986\u76d6\u8303\u56f4\u53ef\u6709\u6240\u6269\u5927\uff0c\u56e0\u6b64\u9700\u91cd\u65b0\u6c42\u5f97\u95ee\u9898\u4e00\u4e2d\u7684\u91cd\u8981\u8282\u70b9\uff0c\u800c\u540e\u518d\u89e3\u51b3\u95ee\u9898\u4e09\u3002\u5373\u4ec5\u4ec5\u5c06\u95ee\u9898\u4e2d\u7684\u53c2\u6570\u6539\u53d8\u5373\u53ef\u3002\n\u5f53\u8f66\u901f\u63d0\u5347\u65f6\u91cd\u8981\u8282\u70b9\u4e2a\u6570\u4f1a\u6709\u663e\u8457\u4e0b\u964d\uff0c\u5e7f\u5ea6\u6307\u6807\u76f8\u8f83\u4e8e\u7b2c\u4e09\u95ee\u6709\u6240\u4e0b\u964d\uff0c\u56e0\u4e3a\u5f53\u4e00\u4e2a\u8f66\u901f\u589e\u5927\uff0c\u91cd\u8981\u8282\u70b9\u7684\u9009\u53d6\u4e2a\u6570\u5fc5\u5b9a\u964d\u4f4e\u3002\u4e5f\u56e0\u91cd\u8981\u8282\u70b9\u4e2a\u6570\u4e0b\u964d\uff0c\u76f8\u5bf9\u5de1\u903b\u7684\u8def\u5f84\u4e5f\u4f1a\u6709\u4e00\u5b9a\u7684\u7f29\u77ed\uff0c\u56e0\u800c\u9891\u5ea6\u6307\u6807\u6709\u6240\u4e0a\u5347.\n\n#### \u95ee\u9898\u4e03\n\n\u8be5\u95ee\u9898\u9700\u8981\u63d0\u51fa\u66f4\u591a\u7684\u8003\u5bdf\u56e0\u6570\uff0c\u9996\u5148\uff0c\u4e00\u4e9b\u5176\u4ed6\u5ba2\u89c2\u73af\u5883\u56e0\u7d20\u9700\u8981\u8003\u8651\u3002\u8b6c\u5982\u9053\u8def\u4ee5\u53ca\u8282\u70b9\u7684\u4eba\u6d41\u91cf\uff0c\u8f66\u6d41\u91cf\uff0c\u9053\u8def\u662f\u5426\u652f\u6301\u53cc\u884c\u7b49\u3002\u5176\u6b21\u9700\u8981\u8003\u8651\u5de1\u903b\u8f66\u7684\u4e3b\u89c2\u56e0\u7d20\uff0c\u8b6c\u5982\u6bcf\u8f66\u6b21\u53ef\u5de1\u903b\u65f6\u95f4\u8303\u56f4\uff0c\u5de1\u903b\u8f66\u73ed\u7ec4\u8def\u51b5\u719f\u6089\u5ea6\u3002\u6700\u540e\uff0c\u4e00\u4e9b\u5148\u9a8c\u4fe1\u606f\u4e5f\u4e0d\u53ef\u5ffd\u89c6\uff0c\u8b6c\u5982\u5148\u524d\u8be5\u7247\u533a\u7684\u6848\u4ef6\u53d1\u751f\u5386\u53f2\uff0c\u5de1\u903b\u4eba\u5458\u5bf9\u98ce\u9669\u7684\u4e3b\u89c2\u8bc4\u7ea7\u4f30\u8ba1\u7b49\u56e0\u7d20\u3002\u5982\u679c\u7ed9\u4e88\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u5219\u6700\u7ec8\u7684\u5de1\u903b\u8f66\u5b89\u6392\u5c06\u4f1a\u66f4\u52a0\u5408\u7406\u548c\u9ad8\u6548\u3002","b7b4b4e5":"### \u5b9a\u4e49\u51fd\u6570\n\u4ee5\u4e0b\u5206\u522b\u5b9a\u4e49\u5982\u4e0b\u51fd\u6570\u5b9e\u73b0\u5982\u4e0b\u529f\u80fd\n1. \u83b7\u5f97\u90bb\u63a5\u9635\n\n2. \u5b9e\u73b0Floyd\u7b97\u6cd5,\u8d2a\u5a6a\u7b97\u6cd5,tsp\u8fd1\u4f3c\u8681\u7fa4\u7b97\u6cd5\n\n3. \u7ed9\u5b9a\u56de\u8def\u4e2d\u7684\u6709\u5e8f\u8282\u70b9\u6c42\u5f97\u56de\u8def\n\n4. \u5e7f\u5ea6\u9891\u5ea6\u8861\u91cf\u6307\u6807\n\n5. \u56fe\u50cf\u53ef\u89c6\u5316\n\n6. \u8bb0\u5f55\u7ed3\u679c","9f1b484f":"### \u95ee\u9898\u5047\u8bbe\n\n1. \u5047\u5b9a\u9053\u8def\u662f\u53cc\u884c\u9053\uff1b\n2. \u5047\u5b9a\u6848\u4ef6\u90fd\u53d1\u751f\u4e8e\u9053\u8def\u6216\u5176\u4ea4\u6c47\u5904\uff1b\n3. \u5047\u5b9a\u5de1\u903b\u8f66\u5728\u8282\u70b9\u5904\u53ef\u660e\u786e\u89c2\u6d4b\u76f8\u90bb\u8857\u9053\u7684\u5177\u4f53\u60c5\u51b5\uff1b\n4. \u5047\u5b9a\u5de1\u903b\u8f66\u5728\u5de1\u903b\u65f6\u670d\u4ece\u5e73\u5747\u5de1\u903b\u901f\u5ea6\uff0c\u63a5\u8b66\u540e\u670d\u4ece\u5e73\u5747\u884c\u9a76\u901f\u5ea6\uff1b\n5. \u5047\u5b9a\u5de1\u903b\u8b66\u8f66\u5728\u5de1\u903b\u4e2d\u9014\u4e0d\u53d1\u751f\u5176\u4ed6\u610f\u5916\u60c5\u51b5\u5bfc\u81f4\u6682\u505c\uff1b\n6. \u5047\u5b9a\u5de1\u903b\u65f6\u540c\u4e00\u65f6\u523b\u4ec5\u6709\u4e00\u8f86\u5de1\u903b\u8f66\u5728\u91cd\u8981\u8282\u70b9\u9644\u8fd1\u5de1\u903b\uff0c\u5176\u4ed6\u5de1\u903b\u8f66\u5728\u91cd\u8981\u8282\u70b9\u5904\u3002\n7. \u5047\u5b9a\u5de1\u903b\u8b66\u8f66\u5904\u7406\u6848\u4ef6\u540e\u539f\u8def\u8fd4\u56de\u5230\u5de1\u903b\u8def\u7ebf\u7ee7\u7eed\u5de1\u903b\u3002","25d376a3":"#### \u8681\u7fa4\u7b97\u6cd5","f36ff2c1":"### \u95ee\u98986\n\n\u6539\u53d8\u8f66\u901f","1c918b76":"\u4ec5\u4ec5\u6807\u51fa\u5173\u952e\u70b9","2afb4a81":"## \u5fc5\u505a\u9898","4960e4e6":"#### \u8bb0\u5f55\u7ed3\u679c\u51fd\u6570","54b2b91b":"#### \u8d2a\u5a6a\u7b97\u6cd5","e9574a44":"### \u5730\u56fe\u5bfc\u822a\u7b97\u6cd5\u7684\u5b9e\u73b0\n\n\u8be5\u9898\u76ee\u7684\u672c\u8d28\u662f\u5bfb\u627e\u4e24\u4e2a\u9876\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5f84\u3002\u5f53\u8ddd\u79bb\u6743\u503c\u90fd\u4e3a\u6b63\u6570\u65f6\uff0c\u53ef\u91c7\u7528\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\u90e8\u5206\u6709\u5411\u8fb9\u7684\u6743\u503c\u4e3a0\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u6bcf\u4e2a\u73b0\u6709\u8ddd\u79bb\u52a0\u4e00\uff0c\u4f7f\u4e4b\u5168\u90e8\u4e3a\u6b63\u503c\uff0c\u800c\u540e\u518d\u51cf\u53bb\u8def\u5f84\u4e2d\u52a0\u4e0a\u76841\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u603b\u8017\u8d39\u503c\n\n","790fcb84":"### \u95ee\u98981~4","1963090b":"### \u95ee\u98985\n\u5341\u8f86\u8f66\u7684\u5206\u914d","cd753539":"#### \u53ef\u89c6\u5316\u4f5c\u56fe\u51fd\u6570","c93e6f8c":"#### \u5e8f\u5217\u7684\u6700\u77ed\u56de\u8def\n\n\u4e24\u8282\u70b9\u95f4\u7684\u8def\u5f84,\u4ee5\u53ca\u5173\u952e\u70b9\u6240\u80fd\u5f62\u6210\u7684\u8fd1\u4f3c\u6700\u77ed\u56de\u8def","7fd9073b":"#### \u4f5b\u6d1b\u4f9d\u5fb7\u7b97\u6cd5","d4661d36":"### \u7b26\u53f7\u5b9a\u4e49\n\n$\\Omega$:\u9053\u8def\u4ea4\u6c47\u70b9\u96c6\n\n$V$:\u8868\u793a\u95ee\u9898\u4e00\u4e2d\u9009\u4e2d\u70b9\u96c6\n\n$B$:\u6807\u8bc6\u5de1\u903b\u7684\u5e7f\u5ea6\u6307\u6570\n\n$F$:\u6807\u8bc6\u5de1\u903b\u7684\u9891\u5ea6\u6307\u6570\n\n$\\delta(V)$:\u70b9\u96c6V\u4e2d\u70b9\u7684\u6240\u6709\u4e34\u754c\u70b9\u7684\u96c6\u5408(\u79f0\u4f5c\u53ef\u89c6\u70b9)","b1d781f3":"#### \u5e7f\u5ea6\u9891\u5ea6\u8861\u91cf\u6307\u6807","7c8d57c4":"---\n\u52a0\u8f7d\u5b58\u50a8\u597d\u7684\u8017\u8d39\u77e9\u9635\u548c\u8def\u5f84\u77e9\u9635,\u51cf\u5c0f\u8ba1\u7b97\u91cf","1d6a96d2":"\u5206\u6790\u4e0a\u8ff0\u4ee3\u7801\u53ef\u77e5\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^2)$ \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a$O(n^2)$","e2630a16":"## 110\u8b66\u8f66\u914d\u7f6e\u53ca\u5de1\u903b\u65b9\u6848\n\n"}}