{"cell_type":{"bf93b417":"code","1953f42f":"code","5c8c5309":"code","0426aac3":"code","aae8dfad":"code","1d7d77ea":"code","cca7f348":"code","05e4c877":"code","10dd5a2d":"code","7b9d5809":"code","78c82dcf":"code","8e5aabe9":"code","79b4caa9":"code","3f43d90b":"code","fae0be54":"code","32a6c2fc":"code","16e07759":"code","42ebff91":"code","6d5b3101":"code","fc1407b2":"code","f2932aaf":"code","953327b4":"code","53decd39":"code","93b684e7":"code","66cce38f":"code","96c2e856":"code","f704f468":"code","9527e66f":"code","6816926c":"code","0a77c8be":"code","000b1888":"code","cac4f058":"code","71276c1d":"code","ca12cb1e":"code","2cd90213":"code","715fcd89":"code","ccd4cb7f":"code","11a33938":"code","0458e1ca":"code","8779417a":"code","3854e071":"code","7d4c96e5":"code","025c7b02":"code","daf8b132":"code","ebcfd6c2":"code","e54b96ce":"code","4cac1009":"code","93ea74d3":"code","c1abb1ed":"code","c65dcfe7":"code","4482df38":"code","0e94bb2d":"code","02cb336c":"code","83748a67":"markdown","0d313d23":"markdown","50146374":"markdown","ff052180":"markdown","88903425":"markdown","445b28ff":"markdown","e9771a9f":"markdown","fa3a7314":"markdown","a64efbde":"markdown","a511eb24":"markdown","701557ea":"markdown","d40da7f2":"markdown"},"source":{"bf93b417":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn.feature_selection import SelectPercentile\nfrom sklearn.feature_selection import chi2,f_classif\nfrom sklearn.datasets import load_boston\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error \nfrom sklearn.metrics import mean_squared_error \nfrom sklearn.metrics import median_absolute_error\nfrom sklearn.linear_model import Ridge\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import precision_recall_fscore_support\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import auc\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import zero_one_loss","1953f42f":"df=pd.read_csv('..\/input\/housecsv\/houses.csv')","5c8c5309":"df.head()","0426aac3":"df.shape","aae8dfad":"df.isna().sum()","1d7d77ea":"def data_clean(df):\n    df.fillna(0,inplace=True)\n    print(df.isnull().sum())","cca7f348":"data_clean(df)","05e4c877":"list=['price','condition','grade']\n\nfor i in list:\n    print('{} has unique values as {}'.format(i,df[i].unique()))","10dd5a2d":"len(df[df['price']==0])","7b9d5809":"pd.set_option('display.max_columns',32)","78c82dcf":"filter=(df['condition']==0) & (df['price']==0) & (df['grade']==0)\ndf[filter]","8e5aabe9":"data=df[~filter]","79b4caa9":"data.head()","3f43d90b":"data.describe()","fae0be54":"df['lat'].reset_index()","32a6c2fc":"df['price'].reset_index()","16e07759":"house_bathroom=df.groupby(['bathrooms'])['price'].mean().reset_index()\nhouse_bathroom","42ebff91":"house_bathroom=df.groupby(['bathrooms'])['price'].mean().plot(kind='bar')","6d5b3101":"house_bedrooms=df.groupby(['bedrooms'])['price'].mean().reset_index()\nhouse_bedrooms","fc1407b2":"house_bedrooms=df.groupby(['bedrooms'])['price'].mean().plot(kind='bar')","f2932aaf":"house_sqft_living=df.groupby(['sqft_living'])['price'].mean().reset_index()\nhouse_sqft_living","953327b4":"house_sqft_living=df.groupby(['sqft_living'])['price'].mean().plot()","53decd39":"house_sqft_lot=df.groupby(['sqft_lot'])['price'].mean().reset_index()\nhouse_sqft_lot","93b684e7":"house_sqft_lot=df.groupby(['sqft_lot'])['price'].mean().plot()","66cce38f":"house_waterfront=df['waterfront'].value_counts().reset_index()\nhouse_waterfront.columns=['price','waterfront']\nhouse_waterfront","96c2e856":"df1=df.corr()\nsns.heatmap(df1,annot=None,fmt=\"\")","f704f468":"co_relation=data.corr()[\"price\"]\nco_relation","9527e66f":"co_relation.abs().sort_values(ascending=False)","6816926c":"co_relation.abs().sort_values(ascending=False)[1:]","0a77c8be":"import warnings\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\")","000b1888":"cols=df.columns[0:8]\ncols","cac4f058":"for col in cols:\n    print(df.groupby([col])['view'].mean())\n    print('\\n')","71276c1d":"df3=data.copy()","ca12cb1e":"for col in cols:\n    dict=data.groupby([col])['price'].mean().to_dict()\n    data[col]=data[col].map(dict)","2cd90213":"df3.head()","715fcd89":"sns.distplot(data['price'])","ccd4cb7f":"def handle_outlier(col):\n    data[col]=np.log1p(data[col])","11a33938":"handle_outlier('price')\n","0458e1ca":"sns.distplot(data['price'].dropna())","8779417a":"sns.distplot(data['view'])","3854e071":"df.drop(['view','yr_built','yr_renovated','zipcode','long','sqft_living15','waterfront','sqft_living','sqft_lot','sqft_above','sqft_basement'],axis=1,inplace=True)","7d4c96e5":"X = df.iloc[:,:-1] \ny = df.iloc[:, -1]\n","025c7b02":" X[:10]","daf8b132":"y[:10]","ebcfd6c2":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state = 44,shuffle=True)\n","e54b96ce":"X_train","4cac1009":"X_test","93ea74d3":"# Fitting Simple Linear Regression to the Training set\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)","c1abb1ed":"regressor.score(X_train, y_train)\nregressor.score(X_test, y_test)","c65dcfe7":"# Predicting the Test set results\ny_pred = regressor.predict(X_test)\ny_pred[:10]","4482df38":"# calculate the mean_squard_error\nmean_absolute_error(y_test, y_pred)","0e94bb2d":"# calculate the median_absolute_error\nfrom sklearn.metrics import median_absolute_error\nmedian_absolute_error(y_test, y_pred)\n","02cb336c":"#sklearn.linear_model.Ridge(alpha=1.0, fit_intercept=True, normalize=False,\n#                           copy_X=True, max_iter=None, tol=0.001, solver='auto',\n#                           random_state=None)\n\nRidgeRegressionModel = Ridge(alpha=1.0,random_state=33)\nRidgeRegressionModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('Ridge Regression Train Score is : ' , RidgeRegressionModel.score(X_train, y_train))\nprint('----------------------------------------------------')\nprint('Ridge Regression Test Score is : ' , RidgeRegressionModel.score(X_test, y_test))\nprint('----------------------------------------------------')\nprint('Ridge Regression Coef is : ' , RidgeRegressionModel.coef_)\nprint('----------------------------------------------------')\nprint('Ridge Regression intercept is : ' , RidgeRegressionModel.intercept_)\nprint('----------------------------------------------------')\n\n#Calculating Prediction\ny_pred = RidgeRegressionModel.predict(X_test)\n","83748a67":"#### Let's Compere The every columns to price to see how each columns effict the price","0d313d23":"<h1 style=background-color:Tomato;><center> Introductin<\/center><\/h1>\n\n**We know that house prices always change from one house to another, and there are many reasons that control the prices of houses, such as:**\n* home space\n* home location\n* The shape of the house and how it was built\n* The number of rooms the house contains\n\n\ud83d\udfe2 Goal: This notebook has the purpose of analysing and predicting house price","50146374":"## Feature Encoding","ff052180":"![here](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoHCBQVFBgVFRUZGRgaGxobGxsbHBobGx0aIRsaGhobHR0dIy0kGyEqHxoaJTclKi4xNDU0GiM6PzozPi0zNDEBCwsLEA8QHRISHzMqIyozMzMzMzM1NTUzMzMzMzMzMzMzMzM5MzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzMzM\/\/AABEIAK0BJAMBIgACEQEDEQH\/xAAcAAACAwEBAQEAAAAAAAAAAAAABQQGBwMCAQj\/xABREAACAQIDBAUHBgkICAcAAAABAgMAEQQSIQUGMUETIlFhgQcycZGhscFCUmJyorIUFSNTgpLR0uEWJDNDY8Lw8SU0c4OTo7PTF0RUhMPi8v\/EABgBAQADAQAAAAAAAAAAAAAAAAABAgME\/8QAIxEAAgICAgMAAwEBAAAAAAAAAAECESExAxITQVEyYXEiBP\/aAAwDAQACEQMRAD8A2aiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigCiiigPlFQ9o7RigTpJWyrcC9idToNACaWfyvwX58eIce9ahtLZKi3pD+iqtiN\/dnoP6bN3KrH4WpVhfKTDNPHDDExzsFzObceYVQ1\/EioUk9E9JLaL\/RRRVioUUUUAUUVC2ntKLDxmSVwiC2p7TwAHM91ATKKV7G25Bi1ZoXzBSA2hFiRccaaUDVH2iiigCiiigCiiuXSi9vbyv2UArO8eFExw5mUShgmU3BzG1gCRYnUcDTgVjOFbpNt\/wDun+wW\/crZahOy84KNHqiiipKBRRRQBRRRQBRRRQBRXy9F6A+0V8vX2gCiiigCiiigCiiigKR5VEU4EkswIdMoW1mbkG7Ba5v22rH0Zxpw77\/xFbN5TYWfBGwYgOhYLxtcgfaIrLNn4PXSF29It7lrLkmls6eCDktiiTDsw1Yt3An9prvuzGRi4QpZCZEF1PW1YDSrFNhJMhIw0SC3GSRj9lmHupbsWYx4mKQyRqFdSciiwF9Tw9tU4+RNms+Jn6DAr7XONwwBHAgEV0roOEK4iUXIvqLe2u1KJz+Ufw91CGNMw7RVR8p5H4vfUaPF99R8abNVL8oLH8Ffsun31qHovxv\/AEv6evI7KMmJW4uGjPrDj+7WlZh2isY8mDHppR2xqfU1vjWngUjotzYmxxnHaKM47RSiipMrG+cdoozjtFKRX0UFjJnB5gAcTVb2lt1Q6KrhQWsoJAMhAubc+A+NLd5t4o4I2Zj1OAA86RuSr+3uuayDaG0JsRJ08jWYeYATaMA3AXv534k+FpBd90tnyJtcCTtlkDcmBVtbnvbXnetjrJ9zd5llZTIB00d+y7KRYsnYbcR8K1HDYhXUFTcGqpUXnLs8kiiiipKhRRRQBRRRQBSreKV0w8jxtlZRmB05cRr3U1pNvWR+CS3Yr1eI93jw8aIFNwm+eJLhGMZP1ST9k604h3okbknpAYe+s7d3aSykE30y3vTPZ2IZbrmA15341nJtF4pEveLeXGXIE4jHYuUH12v7a0DdXEtJg4HYksUFyeJPC9Y3t9ZC12lB9ArYt0lYYOAO2ZujU3tbTkPAWFXi7RVod0UUVJAUUUUAUUUUAj3wLDBYgqLnozbS\/pPgNfCsdwG0ZcwDPdeZNgfa1bdtidEgkZxmQK1xa9wRa1uY1r88k9igHtuRp66x5Ypo6OCVXkb4rFoSxZ07hlu3sAHtqviRc3E2uL6W9hJqayKdWK+gMb\/eqCcKwa4jYDtI5dutZcapm\/JJ\/T9J7LmV4Y2XgUUj1DsqZSbdV4zhIhE5dFUKGPEkDXu0Nxp2U5rrOFn2k0p67\/W+ApzSJm6zfWPwoVZ9qDtbZUeJjaKTNla1yps2jBhY27RU29fb1JCdCTYO7EGEdniLlnUKc7A6XvpYCnl6+A18vUEttu2ehX2vF69XqSp6Bqvbx7ejhjZmayDQ24ueSL23\/wAaXrpt\/bUcMbszZUXzjzJ5KvaTWPbV2nJjJM79VBpGl9FHxY8zQlHzH46TFy9JLoBoiX0Rb8B38Lnn6LAfTGLcvXXqJQOY\/W\/hXRj3j9b+FWSFi8O0biRDlZTcEcjWpbmb2iRbnQi3SJ2H569oPZ4chWazKDz9v8KiYbEvDIJIzZh6iOYPaDUMk\/T2HmDqGBBB7K7VmO529ilQb9T5SnUxtz9Kn+PG4OkxSBgCOB1FVJOtFFFAFFK9q7Yhw5QTSCPPcKzebpa9zwXiNTpUiCVXAZGDKeDBsw8CDagJlL9s4PpYXjHFhpy15VJsKGUHn7amgYjiYGhm\/KrYX53bXmONWTBYrCjQMrd4jtx9J9tWbae5uDl1ylG1N1Y8eZsbqfVVH2vhDhpCl1ZbdR0tqO8DxHhWc0XiRd4Nnk9ZGOQ35eqtA8nePeTCBXDXjOTMRYMOVu2wtVBxOIjaPz3DdgDW9pq4+S4noJOuWAksFItl0BJ8fhUw0RIvVFFFWKhRRRQGf4HfyRvPgQdrFxGPtE28TTB994wLlU8J4Piw91Zns58wt1B+nkP3x6q8bRwBC3Gv6TH08GNZd5G6hH2XoeUjPKsUcAuxtm6UG3f1UIPrrJ8fITI5zZhnaxPMZjr5tNN1SoxSGTLlDrcG5BGYE6FSOAPEj01H3tcnGYi8ZQF2OQkXX02JHfoedWeYkRw8HjDSYgLeOV0H0bj26UtxjyM35SR3PewJ95r5hIgeMiL3EOx9QU12xETixzXB\/RHqNjWSpM1eV7N93CmD4CCzBiqZTbkRy4DgLVY6pXktWMYFSme5Y5y17FvocsoFvberrXQcrVMDVcfEquYsbAE3OthrzPAVZKpHlPRlwvSIxU9eM24FJEIcH9UUKsl\/jaD84v8Ajwo\/HEH5xfb+ys28nO7WGxIm6aFZMhjC3LC1w9\/NI7B6qtGE3EwDlx+DAdHb+sk16gfhn042qSKLF+N4Pzi+39lH43g\/OL7f2VRd9t08JDgXeLDqjK0dmGYsA0qKdSTe4a2tct1Nz8JPg0kkgDO2e7ZnB0kZRwYAaCgov344g\/Or7aibX23HHGXzgIBdn5W7BzJP+VKP\/DfAhA\/Q8ka2eTnrY9fX41TPKPseGEwCKNUzCS9r626O3E8rn10FCjbe2HxsgY3WNfMQn7TdrH2DQc7kSgDiP1gPhUndjDK0+HRgCrSRKwuNQWUMPVetgxe7Oz1AaSJFFwoOZ0BYmyjqsLkmwFTokx1X+l9sfsr7n+l9sfsrYMJuzs6Rc0cSutyMyySkXGhHn8jceFZVtpVjxE6KcqpJIqjPwVXYAagngOdTYIDt9L7X8KhYhAeY\/WBrasNuhgWhR3i1MaMzdJKupQFibPYDnUHBbtbNklljWFm6IRkv0spVs6lhltJwsPbUWRRl272Ojgcs8bOTpmWRl0+aVCkN261qGxd+sMihFjlAHAG7erS4FUffzZEWHxDRwKUURRvbOTqXcN55J+bzHDvqu4HpCRYvf0j98VhySktM6uGMZKmjbpN+oraRSnwA95pLiPKginqwSH0so\/umqB+Byk8h9Zj7QJahY+CRTqE8Bf25zWMeV3lnTL\/nglof75bfkxTJJYKjJYKrFwLE6MSAM1jfMvJwDa2qPZ2OaNsyu6Htjfoz6tM3iaiyzN0aKz3UMSELMApPNQL5Se3nUrZcRZwF63csmHc\/8OTVq2lk5Uurot+E3rlC2\/DJfQww4P6zuTy414xe+E583FOPHC+9Rf1V7XCuqkZDwGhwbD\/pvlN+3upFjzqVbMvoiZT3nLf41nTvbLWviO8ePlxMiRyTM4ZgLO0jixI5X6M37CPRVjxokSR7IgAORdY75U6g9Gi8KqmypEjbpWFwnml1KBnN7IShuPlNq3BTodanJJGwJkcknUkMg9PHtrT0Zt5JWPmul2iDt3WCj1VoXk+UfgakRCPMzXsb5iNMxPhbwrJsTjIcpVWYAafOJ9JGlaX5LcSHwrqGJCSEAHkLA++9WhopIvFFFFXKhRRRQGH7NxTBbNGW1B1s3dx6SpO0WzRkiJ1FuWYD2Mwpbh5BGOLL6ekPh8n314xu1oiuXO\/6KG3rMh91c9nTR83QdhjE6hPWW4YL2i48zn4emk+9GG6PF4hcmS0jgC5JtmNtb3OmvjTnc3DNJjY+j4hgbsCbW6+unPLbjzqV5UYguPYg+ckbEAnja3b2AVq\/xKY7FMwR5FGP1AL+29ecTEeIjdfrf5Cu2AxHRte58P8AOu20sUjC4BHHjk+Av7ayvJtWDYPJVOBgRmkJs7CzEWXh1V9\/jV2Eg\/wDWKYLbWPwcaRRsuUIh6N0TQlVZsp4vqTc\/OvTfBeUHGg\/lMOh7Tcx+u5IrVzS2c\/jb0arnHf6jVS8o1nwZA45gdRb5LdvppXH5QJj\/UQ+OIUey1Kt4N6pZ48jQw2uOEhc6cPNA0vTyR+jxS+H3yVMqfhCsQCxjsCVBPn3trrypntrE46ObE9DHIy2wuSyZgcxYTEG3WsMt+NqzuPHzxhlTKgawNtCQL\/O8aF3qx\/AYyWw0Hm8OXLWrxl20UlFx2af5SI\/9Hyj6UQ\/50fKvXk+j\/mEPpk\/6r1SN3tk\/h5efFSO7qVQMbA8LkcOwrVgwO6MUMnSQyyxvqAylbgEWIsykcO6rFLJWydoY15oklRwjGcOTGygBCeiubWFxwPPlVc8rqD+bW\/te\/8AN1aXwGK5Y\/Ef8n\/t1WsV5P42LMJGzMSWJy3LE3JNgOJJoSV\/dP8A1nC6\/wBZFzHzlrWt6zKI4eiUsTiYAwCB7JnOYkFTltoc2luNxWeHcae2USJawF7kH7ulMcBsba0CCOHGIiAkheqwuTcm7Rk6k340ZCZb9yHlbDHpVKt0soAMYj6uYEdVVUWJJN7a3rKd4XvicVr\/AF0\/yh+cfuqz4\/Yu1p0Mc2MV0JBy6LqOGqxg+2oH8icTa2eP9Zv3KINmj7Xd0wEhQXdcO2UZc1yI9BlNw3o50g3HmlM06yRqiiLCEWjWO7GG7C6qM1uAHyeFJdm7H2thgRDilAa1w7NJa17Zc6HKNeArrjE226Mj4uIqwKmyqpsRY2IjuD3ioJsVeVHTFMTcXijUcfnSMeH6Prql4SHUdZR6cvxU0027sXEQxhpWDjNq2dnN7aA5rHkajbMxEYYZj7ZB901z8rOrgSomxYU2N5IdPqAn7FLscTfivgV+Aq3QNh5B1Iy57him+NV7a8ZVv9XKdl+lBt+kTXPHZ1PQo6QAAX5Xtcc\/8uw17waqW1Unu\/yAvUfHR6qeFxw15czfjf4V92dHmcDNbvCqdfRmX310+jlz2G8gXKABbuy6ePXrijEeaBf6KE28DcVLxODkUC0l\/RGVAPZ1n91RGjN+tIT9VU97NpWaos2xrFJ\/NCHYk9MvUIHJJLNcCwIuRlv8oGw5uNlYeM2LKeHyRH\/epVAubCERmxjlzOxAOZXVUHW+UQyLougDeNd8DhpHI19WUe+tnow9jd8PG11RWNubrGfVkqXs7eBsBD1Y0kJkOYG6Na2hBAI7qXYTCmJjbNre63VvHqnSuG2yxwzhgQA62uBqbeukWKRctl+UVJbhoChH9rGPvlalY7ftYxpAzHulgP3Xasl2KrZrXg\/3juo9jCm+Nw5y6vgx\/s5ZGb1FjVXNpmi44stz+UiS+mDNv9oP3aKz3o\/7X3\/v0VPdlfGvgwwLONBI9uzNHb7Uy++vW1UJU5zc9l42PIXsuJc21GuXSl6R8csyD0syH7SrXHFSyLGc0mcMxXSTMoACm4IJW\/W80jkKqixI3XxaQYlJGVmCsDlUhbkXtr6baeHOpG+G0Y8ViXlIkS4VQtlPmi3EkUjwOJysCHsRzsn8KmS7UOvVRieJMMLE+OXWoc8UaLjW7IWGQqbqQfrae5q97QSTqdIAiuSFIDG4BUNlBOtswpfi9oyk8Sv1USMfYAqRtdMpRCfNjQg287OokZjyJBfJmHERgcqlR9iUvSJz4gNI+UcWbzGVADc3BjcEL4XFO9lpJa4z27mwhP2176rUIjDdaJhoCbA8wD6Rbv7KY4SaAfJe\/LqRt95dKibyVirLMzgakSG3acD8BSDauJjYnrMDzu0f9xKnQ4uO\/nPl7oMNe3Aa5BUbaskVrHpD2ZmiUfqpaqJ5LtKhVstElnijv1XkRTe5FiwGosoN+ytaXYGDZ5FGFw4CIjj8khvcObcNPN9tZAj5WDxq2ZTdWvwN7qQRwNaNvPh9os0xw4mCmPD5AjkWfpD0oABtfJa\/dXRxs5eRZJG3VGGw80mGVY8iPIFRQqFhzIAF9PcKqW7e9eLmkdZHFgmYZQQb5lHMntq94+ASxYqK4uYJVtfUXVgLjlWT7jOOlc9sf99KuUNAO0pfnmqftHfvGRyvGpQhWIF1N7eurlAitb9hrLN4owMVMPpn4VBBek3nxWXAsSv856TPodMj5Rl10011vTvGbdaMIXLEO8cYy285yQL92lIHwtsJsZ\/pOP1gXH3aZ7eaQfgojUm+IhElkDWju+Ym4OUD52lu2oaySTNj7dfERJKuYK+awJB812XiB9GqVtDf3HJJIilLJI6i6sTZWZRfrcdKt+5ZlOETpkIfNILMgQhc2nVAFvVWWbX\/AKef\/azf9R6lIGs4rakkcZkd2CqMzEakAC5IFLcPtl5i4RpLIUFyV1DIHBtbTQjSp+8hYYSQxi75DlGUMSdABlIObjwtS3drpTJiBIpVR0GTqBQbp17EKL66c7cNKihZVt58dIXeJ2JQZCL8bkEm59VKMFETbzvAA+4inG+SfzqW1hbohrx\/oybD089OQpZgI5CRYofTlP3tKy5XR08Mb9D3DYWQnQzXAHmxyH3PS3aUTZ2uXvzzK6n7TmrPgNlYwg2jBHanQj3SCqrtXCusjBwwIOuYpx8Ca5oNOW0dUrr2LsaoGUHja54fC9fMKkZYZr27mT3MRX3FqQRax04g3HoHDh3XrxDj5IzobekKR9oEV1LRxv8AIer+BqNelv2dHEfaXrhiJ4DoAf0iB7F0rwu25DoCgt2RRX9kd68PK7WLXuT83Lf1hRwqtF7bHewutG5QLlIWNrgXIzB+rbW10Fzbs15VY9nOimzAdwyBh7daU7s4MlHYPa5VGU8wLODpwF+886fw4ZV62bX06e2rvRi9kd8RCZDkNzax\/JhAP1eNLt5nthwCVAL8AONh8q5v6DY1IaNnkOiKNeGh9leNssscDqMxzAAlNbWOl71MR7Ee7+DLk9VbW4lJWA8Y0a1dNoYTJ\/WRfVUTAn9aMd3OoWy5gGP5QDS1mS9+Gg6rWPfap+IxCop\/JNY8HZUcc7jrID7qyaybp0iEHPzE9f8ACivCyL84\/wDDX96ir0jPsyV0x16iWPYkZ178lv8ABqM8WVJDIUyELbLYEPfTiAOGbTMCbd1jYY93plYqMjfUmQns4HW1++l28WEmjibpVyJoAS+e7XGls5twOoHZRRdjsir4Zzm6rkDx+ANMRFmHWlNv0j\/dpRgkuf42psmBFvOQel2HwrKe9nRDWhbjI4wdHY+lLD15j7qeTYCaWHDmOF3IjIzhSSVEjhATa2gF9OTActa9jIArcVPeCT8K17yfS\/6OjANmvJlJ7c7AGw5Ai3PRfCtoK0Yckmnoy1XW98pK8tLHh51gdDzPHW9Odlppe0g\/3ecW9RpPh5MqgBuXBh8KbYPEJaziD9OOX\/4xVWEWKFwAQA5Pb+BIfelK9q4riFZ19MUEPuAJrm2KjUaRYE97R40+wioUuMLXyJCvP8lHMPT51U6l28EA8cx61tQQc\/rtcV4O2cbr\/OsRr\/aP230108KkRuc3Ak\/VF+\/U9a1uypTtW\/Ho5+R5Gfk5kllnxRcGUthHUvIGc3zLlTM2oDXa688vdSPdnAzxSkvFIt0tqjccyns7q0byaOEw+KlABIcDXnaO4Fz2lqdLtlxww6etP3quZ2VjArILEqeXyW7u7uqjbc2PiXxErrBIVZrg5WsRYVsf49f8wvrX96vh24\/5hPWv71SRZnG2sMZdmbPijVSydIXsDdBcqM2vFjcm44jSw0qFs+HaEUYSOfIguQoAYC5zHih4kk8edNd7cWvTl0DxMyjMFfqk+bewuOCjTupdhtoMDZiCPpHJ7Rb3Vk50zVQtWcsfDjJ0CzYkOl82VgF1FwDog7TSOXZzqbXU\/VIYcbcuB7q0GBY2UdSLxxiL67oaWY\/Z8aoMiRgqSSy4yN2N9bEBASByp5CfGyv4JcdhgwhzoGN2yKjXI52IJqNi948W6tHJiGKsCrKVRbjmDZQRTGXa066JIqDhoSf21ed09qo+FGdEYxnKWMdiRfj1Sb6kjkdOFWjKyrjRk0GqmxB1Gmnv7dKb7JwrlwOidj2AsfZY1K352p02IKKqqkd1FgV10zX5HrA2NuFRFZ4VUDNncAqq+dbt04A9+prHlTlo6eKSirZdMDGF4wTA24GOK1+4vhzp6TUGfdTE4li\/83jFz\/SSxhuPZFHYeoUgwb4x7npGRR52Ww9ZbnVj2LsGKZh0kszAat+UZr9umgHtrKHCouy8uZvQm2juq0bWbFwX4dVnI79SopfhtjzgkxyKcvzH6x+qoOY1smF3X2ZGuYYbP3tGXPuqsby4nCocsUYjI\/slUg+njW1tbMMN+ylFZrmMyyk8wCSAbXt\/Sanwrw2EC3LTWtYGy3PoOQtl8anpLG7MOkGduTCwc31BJ1F+2uGSFg4VnQk5WQgMAw7Dfv0qyjZDdDjdrF4exjYSPmYFCGynNbKRqwHZyFW\/8SKRwm8GU\/Gs52MAj3bPoQFy2F+8nW3+BWo7MZQM2SwsLFrDkNdT23FaKKZm2xf+JMP8qSRT2Np7Rp7aV7zYXDR4e0YZyzcQbi47yDr3VYNt7ehiTrkEnkNWPcP28BVEmx0k3Xy5IgWtawXVmILsdLgEDkbAUaQV7OGxIMzXySOo4iwNvWG+7U7avQBbAlWvwsFI8OiT31w2fjAJRGSxRg3CNHsQpIPXHC45X0qROGOr9W3Ysanhf5JBrGUTaLsUJg7i93\/XT96irVhNiPIgdA9j85gCe+3Rtpa3M0VboyvYq82zpI2bo1ObmzkO3b2WBromGknHRTyBEvcu+pGliFty0FdmwmIiJN+kQ+sV3w8qtoGF+wmjtF4xi\/6cBu1g4tfw0MBxAjc\/dNesLgMLIwRMRqxAF4JrXPDUm1N8NhFkNtK+YzZ+IAtFI1j5wclhbu1p47yT2ccWcsTuJhVP5XGIvcAoPo1Y1NYQQwLHhpS5RSFvmYXzs1jw017RUHDbFQsOkfM30RYUzXBRoCqobd5qyjJLCM3KLeXZSMOkoGS4ZRwvYjTuYEDwqRiMaYkDBVv9BspP6trekVb22FDKQCpF+YNq7vuHhoz0mZr97VHjl7HkS0UBN4JH0dpbdhkcj319ZoX1M4UnkVkPtFPtrbQjhkMaR9JbXqrfwJqDDs6bFFmOHyW4XW1\/Uy1nLjo1hy3sSSzxxteOQP3hWX7xq97g4p8U7h9URF43PWJsNT3A6d1UzH7uzKf6Mj0DT7xppudtZMDI7SO+VhYoq3ub6E+jXnzNW41TK8jtejT5djsI3WLJZmDMrKDe3YeR7DShtlyD\/wAtf0f\/AKrpht\/cKVvmtfkSb+oCuX8vojwDk9gUe9iBWjkvpz9G\/R8\/F0n\/AKVvV\/8Aeo2KwkgGmFb1H9+l20d9sUZejiyRggEGQpwPaVuKiYnbGOSSIvi1kRmu6x2JCggkagDXhTsiOjEG14o1cmQujliCBqqi2YaakX17vXUbDdHfqyX5D5B9l6tu8iYbFSLIDPDpY2RCD6bNSp5I8MM8UpkfhldFUEc9Tf3VnJr6bQTrCIcuzmcAiRLAWGaSNe0\/KI53qG2x5eTx\/wDEh\/7lT5d+sQD1bILW0yEe1ajvvKsoHSXLcyMtvUBUKJLkxRiMHIDa4PoIP3SavO6WEneEotkRLZHaNf6Q5g5jsQc1jqx5G1IsNPC\/YPTT3Z2IkRcseIRAOA0HstV1S9lZW1oqu9eDMeJtdRdV81cqWtYBRr2UPtFglzbOQF6TnkAtl7idNewVYsZtPE3tJLE\/cVRvhS3aWz+kyllRLfm1Cg37QNKhxt4ClSpoVwSEjMTYfSOnqqxbI2yiABSc5PEDT1mqnLsqVWPyhyJqNI80fFdO6nSye9G44HFMyZnxII+aGsR6qi4+TZyg9I6knmbk\/Gsa2ft14nDFSwB4VZsbv1h5Y8rYex76dCPIdNsT4d2KQsrLyOXUeg162RscSI2ZNRqDdlB4XuQeykCbYhW5jjUE1JxO3XCL0Zbv1sKf6RPaLL3g8JhoxrGGPEgSSEA8+FudqkviCRlhjUd4TMR+lIW91ZQu8MoPnW7hUtN78YFtGSB22qvWX0ntH4aIm7fWMruQ5HFpDYeqxHoBpFt+ePRHkRrcGAzEeguzWqoJNjJzq\/HmTTqDdmAKrYnF8eKgge65q2VtkWmedi4odOt5tL25JfkASAPVV4i2cy+bHEQdOWo5cvjVLxr7LjULEjO\/zjf3t+yoT7xYmwKk5BoNa0jJUVaZrOHwzBQMgHcBp76Kz3D75YrKPyRPfevlX7Ir1kWDOwN+I50q23seOUZ06j9o01q6bP2bGIxpyr3Js6PsqOvpk9jLtj7Omz5XnyDXnY0wmOMiQMkmcXtYm9W\/Gbtwv2g9opDj93cgOSZhbla\/xqri1o0Uk9kXZWOnLflEYDtAp\/JteOO1wXHPh8TVBl2zOj5M4Ph\/GvEszvxY1zt8jezbpxJFt2l5Qo41Ijh17yB7r1U8dvjiZzqzWvwF7V9jwSc1v6a9yBU4IK6FdZZzNZwXfZGOQwrlVV015kmpvSuRo5HoNZfNtmRBZdPGuUe2Zz\/WEd1T2wFE0yaY+axJ9P8AGlOOxMKefl9hqlybRmYayGlksrXuzFvTVOzovhFwg6GVyVXT2VLGxYzraw9Ndt1cCrRgnn3VZoNnpVlErKRUhs1F4V4mnktkD6DlYfsq\/R7LiI1Wos2xoQdFo+NFe5nM2FlPBjUJ8BJ2X8a0TFbITkSKrO0oyjWDGquCLKdlfhwK36ygd51psMHg0AzSa9ij+FcbXOtWjY2xISVLLm9NQoWHNoqe0YISB+DpKTz40pk2biRr0Tjwr9CYHZ8QUWRR4Cpb4dSNVHqrRcaRn2bPzSkGIDAsrr3kU1XESBh1s1bg2AjJ1RT4VVd4N1YGJdeofoinUWJtibVXLZoix8PiKnS44NoMLf8AVpDh8U0MmQHMO+n02MZUzDjWTdMulZUNtyjPYxZfCk2LgZkJVAAPXTjbWIZjcnWlCkkak+irJkNCZsK41tXfD4WVtFvXXpjmI5VMw+MaM3W1RbumT1VWiVsrdh5D1mAq0QbooBbpPdVMl2pLmuGtfsrtDt6cfLNWtFclw\/kOW1EpArm+4J5yE0iw29OIA416bfLE8NKr2+Iv1Hg3BVRmZxXiPZWEj0eS\/iKqu0N5MTILNIbdg0pbBMxcXJNyKspYuiOuasseLVsx6Nhl5UVdtm7HiaJCRyoqnl\/Rt4f2f\/\/Z)","88903425":"#### Ridge Regression","445b28ff":"### Select important Features using Co-relation","e9771a9f":"### Perform Mean Encoding Technique ","fa3a7314":"##### Load dataset","a64efbde":"#### Lets perform Spatial Analysis","a511eb24":"#### Here we make function use to remove the missing values","701557ea":"* now we see the all data is very clean","d40da7f2":"### \ud83d\udcda Libraries & Functions"}}