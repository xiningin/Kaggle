{"cell_type":{"aef2a6bc":"code","d86dac85":"code","91c702a9":"code","c4bd8a92":"code","7bf73c92":"code","42c7aa17":"code","244fe8ca":"code","b2e42514":"code","af9198d1":"code","089f51f4":"code","13762bc2":"code","f0f8e684":"code","f2703ead":"code","71f2b35a":"code","e121c20c":"code","311b14c6":"code","1e526dec":"code","8f7096c6":"code","47aa0e95":"code","d095382b":"code","16076d09":"code","7858abf3":"code","9cfaf6df":"markdown","de30ff9e":"markdown","27bd50ff":"markdown","b96d1f9c":"markdown","c03a8565":"markdown","c120e63f":"markdown"},"source":{"aef2a6bc":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\nplt.style.use(\"fivethirtyeight\")\n%matplotlib inline\nimport matplotlib\nfrom matplotlib.colors import LinearSegmentedColormap\nfrom pandas_datareader.data import DataReader\n\n# sklearn\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\n# For time stamps\nfrom datetime import datetime\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d86dac85":"dateparse = lambda dates: pd.datetime.strptime(dates, '%d-%m-%Y')\neth=pd.read_csv('..\/input\/meme-cryptocurrency-historical-data\/Ethereum.csv',parse_dates=['Date'], date_parser=dateparse)\neth = eth.iloc[::-1]\neth.tail(5)","91c702a9":"maxValue=eth[eth['Close']==max(eth.Close)]\nprint(\"Highiest value of ethereum\")\nmaxValue","c4bd8a92":"eth.columns = ['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'MarketCap']\neth.describe()","7bf73c92":"print(eth[eth.index == 1].Date)\neth['Year'] = pd.DatetimeIndex(eth['Date']).year","42c7aa17":"eth_2015_2020 = eth[eth.Year.isin([2015, 2020])]\nprint(eth_2015_2020[eth_2015_2020.Year == 2015])\n\nSomaethCotacao2015 = 0\nSomaethCotacao2016 = 0\nSomaethCotacao2017 = 0\nSomaethCotacao2018 = 0\nSomaethCotacao2019 = 0\nSomaethCotacao2020 = 0\nethContDados2015 = 0\nethContDados2016 = 0\nethContDados2017 = 0\nethContDados2018 = 0\nethContDados2019 = 0\nethContDados2020 = 0\n\nfor index, row in eth.iterrows():\n    if row.Year == 2015:\n        SomaethCotacao2015 += (row.High + row.Low) \/ 2\n        ethContDados2015 += 1\n    elif row.Year == 2016:\n        SomaethCotacao2016 += (row.High + row.Low) \/ 2\n        ethContDados2016 += 1\n    elif row.Year == 2017:\n        SomaethCotacao2017 += (row.High + row.Low) \/ 2\n        ethContDados2017 += 1\n    elif row.Year == 2018:\n        SomaethCotacao2018 += (row.High + row.Low) \/ 2\n        ethContDados2018 += 1\n    elif row.Year == 2019:\n        SomaethCotacao2019 += (row.High + row.Low) \/ 2\n        ethContDados2019 += 1\n    elif row.Year == 2020:\n        SomaethCotacao2020 += (row.High + row.Low) \/ 2\n        ethContDados2020 += 1\n\nprint(SomaethCotacao2015)\nprint(ethContDados2015)\nprint(SomaethCotacao2015 \/ ethContDados2015)\n\nprint(SomaethCotacao2020)\nprint(ethContDados2020)\nprint(SomaethCotacao2020 \/ ethContDados2020)","244fe8ca":"ban=pd.read_csv('..\/input\/banana-1-kg-prices-main-world-cities-2010-2020\/cities_banana_prices_historical.24-10-2021.csv')\nban = ban.iloc[::-1]\nban.tail(5)","b2e42514":"print(ban.dtypes)","af9198d1":"ban.columns = ['city', 'region', 'country', 'BanPrice2015', 'BanPrice2016', 'BanPrice2017', 'BanPrice2018', 'BanPrice2019', 'BanPrice2020']","089f51f4":"def fill_zeros(data):\n    d15 = data['BanPrice2015']\n    d16 = data['BanPrice2016']\n    d17 = data['BanPrice2017']\n    d18 = data['BanPrice2018']\n    d19 = data['BanPrice2019']\n    d20 = data['BanPrice2020']\n    \n    if d15 == 0 and d16 != 0 and d17 != 0:\n        data['BanPrice2015'] = (d16 + d17) \/ 2\n    elif d15 == 0 and d16 != 0:\n        data['BanPrice2015'] = d16\n    \n    if d20 == 0 and d19 != 0 and d18 != 0:\n        data['BanPrice2020'] = (d19 + d18) \/ 2\n    elif d15 == 0 and d16 != 0:\n        data['BanPrice2020'] = d19\n    \n    return data\nban = ban.apply(fill_zeros, axis=1)\nban = ban.drop('region', axis=1)\n\nban.head","13762bc2":"ban = ban.loc[~(ban==0).any(axis=1)]\nprint(ban)","f0f8e684":"eth_media_valor_2015 = SomaethCotacao2015 \/ ethContDados2015\neth_media_valor_2016 = SomaethCotacao2016 \/ ethContDados2016\neth_media_valor_2017 = SomaethCotacao2017 \/ ethContDados2017\neth_media_valor_2018 = SomaethCotacao2018 \/ ethContDados2018\neth_media_valor_2019 = SomaethCotacao2019 \/ ethContDados2019\neth_media_valor_2020 = SomaethCotacao2020 \/ ethContDados2020\n\ndef adicionar_campos(dados):\n    dados['BanPriceeth2015'] = dados['BanPrice2015'] \/ eth_media_valor_2015\n    dados['BanPriceeth2016'] = dados['BanPrice2016'] \/ eth_media_valor_2016\n    dados['BanPriceeth2017'] = dados['BanPrice2017'] \/ eth_media_valor_2017\n    dados['BanPriceeth2018'] = dados['BanPrice2018'] \/ eth_media_valor_2018\n    dados['BanPriceeth2019'] = dados['BanPrice2019'] \/ eth_media_valor_2019\n    dados['BanPriceeth2020'] = dados['BanPrice2020'] \/ eth_media_valor_2020\n    \n    bananas_quilo_dolar_2015 = 1 \/ dados['BanPrice2015']\n    bananas_quilo_eth_2015 = 1 \/ dados['BanPriceeth2015']\n    bananas_quilo_dolar_2016 = 1 \/ dados['BanPrice2016']\n    bananas_quilo_eth_2016 = 1 \/ dados['BanPriceeth2016']\n    bananas_quilo_dolar_2017 = 1 \/ dados['BanPrice2017']\n    bananas_quilo_eth_2017 = 1 \/ dados['BanPriceeth2017']\n    bananas_quilo_dolar_2018 = 1 \/ dados['BanPrice2018']\n    bananas_quilo_eth_2018 = 1 \/ dados['BanPriceeth2018']\n    bananas_quilo_dolar_2019 = 1 \/ dados['BanPrice2019']\n    bananas_quilo_eth_2019 = 1 \/ dados['BanPriceeth2019']\n    bananas_quilo_dolar_2020 = 1 \/ dados['BanPrice2020']\n    bananas_quilo_eth_2020 = 1 \/ dados['BanPriceeth2020']\n    \n    dados['PoderDeCompraDolar2015'] = bananas_quilo_dolar_2015\n    dados['PoderDeCompraeth2015'] = bananas_quilo_eth_2015\n    dados['PoderDeCompraDolar2016'] = bananas_quilo_dolar_2016\n    dados['PoderDeCompraeth2016'] = bananas_quilo_eth_2016\n    dados['PoderDeCompraDolar2017'] = bananas_quilo_dolar_2017\n    dados['PoderDeCompraeth2017'] = bananas_quilo_eth_2017\n    dados['PoderDeCompraDolar2018'] = bananas_quilo_dolar_2018\n    dados['PoderDeCompraeth2018'] = bananas_quilo_eth_2018\n    dados['PoderDeCompraDolar2019'] = bananas_quilo_dolar_2019\n    dados['PoderDeCompraeth2019'] = bananas_quilo_eth_2019\n    dados['PoderDeCompraDolar2020'] = bananas_quilo_dolar_2020\n    dados['PoderDeCompraeth2020'] = bananas_quilo_eth_2020\n    \n    dados['AumentoPoderDeCompraDolar'] = bananas_quilo_dolar_2020 - bananas_quilo_dolar_2015\n    dados['AumentoPoderDeCompraeth'] = bananas_quilo_eth_2020 - bananas_quilo_eth_2015\n    \n    dados['DiferencaPoderDeCompraDolarVseth'] = dados['AumentoPoderDeCompraDolar'] - dados['AumentoPoderDeCompraeth']\n    \n    if abs(dados['DiferencaPoderDeCompraDolarVseth']) >= 700:\n        dados['CategoriaDiferencaPoderDeCompra'] = 'High'\n    elif abs(dados['DiferencaPoderDeCompraDolarVseth']) >= 300:\n        dados['CategoriaDiferencaPoderDeCompra'] = 'Medium'\n    elif abs(dados['DiferencaPoderDeCompraDolarVseth']) >= 100:\n        dados['CategoriaDiferencaPoderDeCompra'] = 'Low'\n    else:\n        dados['CategoriaDiferencaPoderDeCompra'] = 'Very Low'\n    \n    return dados\nban = ban.apply(adicionar_campos, axis=1)\nban.head","f2703ead":"sample = ban.sample(10)","71f2b35a":"sample.plot(x='city', y=['BanPrice2015', 'BanPrice2016', 'BanPrice2017', 'BanPrice2018', 'BanPrice2019', 'BanPrice2020'], kind='bar')","e121c20c":"sample.plot(x='city', y=['PoderDeCompraeth2015', 'PoderDeCompraeth2016', 'PoderDeCompraeth2017', 'PoderDeCompraeth2018', 'PoderDeCompraeth2019', 'PoderDeCompraeth2020'], kind='bar')\nsample.plot(x='city', y=['PoderDeCompraDolar2015', 'PoderDeCompraDolar2016', 'PoderDeCompraDolar2017', 'PoderDeCompraDolar2018', 'PoderDeCompraDolar2019', 'PoderDeCompraDolar2020'], kind='bar')","311b14c6":"pc_dolar = ban.AumentoPoderDeCompraDolar.mean()\npc_eth = ban.AumentoPoderDeCompraeth.mean()\nlegendas = ['US$', 'ETH']\n\nprint('{} Kgs\/{}'.format(pc_dolar, 'US$'))\nprint('{} Kgs\/{}'.format(pc_eth, 'ETH'))\n\nplt.bar(legendas, [pc_dolar, pc_eth], color=\"red\")\nplt.xticks(legendas)\nplt.xlabel('Currency')\nplt.ylabel('Kgs \/ unit')\nplt.title('Volume \/ unidade')\n\nplt.show()","1e526dec":"atributos = ['AumentoPoderDeCompraDolar', 'AumentoPoderDeCompraeth']\n\nX = ban[atributos]\ny=ban['CategoriaDiferencaPoderDeCompra']","8f7096c6":"from sklearn.model_selection import train_test_split  \ntreinamento_x, validacao_x, treinamento_y, validacao_y = train_test_split(X, y, test_size = 0.20)\n\nprint(treinamento_x)\nprint(treinamento_y)","47aa0e95":"mlp = MLPClassifier(solver='adam', activation='relu',  hidden_layer_sizes=(500, 500), max_iter=10000, verbose=True, tol=0.000001)","d095382b":"mlp.fit(treinamento_x, treinamento_y)","16076d09":"predicted = mlp.predict(treinamento_x)\npredicted = cross_val_predict(mlp, treinamento_x, treinamento_y, cv=30)","7858abf3":"expected = treinamento_y.values\n\nprint(confusion_matrix(expected, predicted))\n\nprint(\"Esperado:\\n\")\nprint(expected)\nprint(\"Previsto:\\n\")\nprint(predicted)\n\nprint(classification_report(expected, predicted))\nprint(accuracy_score(expected, predicted))","9cfaf6df":"## Preparando o ambiente\n\nPrimeiro vamos preparar o ambiente para fazer as previs\u00f5es e as altera\u00e7\u00f5es nos dados, baixando os pacotes necess\u00e1rios","de30ff9e":"## ethereum","27bd50ff":"## Pre\u00e7os de bananas\n\nPrimeiro importamos o dataset contendo o pre\u00e7o das bananas por \u00e9poca e regi\u00e3o","b96d1f9c":"### Removendo valores ausentes","c03a8565":"## Classifica\u00e7\u00e3o","c120e63f":"## Visualiza\u00e7\u00e3o"}}