{"cell_type":{"230cd9fb":"code","df96df00":"code","5494bb6d":"code","1e2f58bb":"code","bea4c0f2":"code","dce99f72":"code","50e98383":"code","11d80b23":"code","23909d82":"code","5baf0a0a":"code","76ad716c":"code","569ce7e1":"code","c67e6ab7":"code","3a5065b9":"code","5645e375":"code","a0c2d5bf":"markdown","5308a31d":"markdown","abfdabf6":"markdown","4c89b176":"markdown","c50ed05b":"markdown","31e893bb":"markdown","bdb71ad8":"markdown","6a6fa2b8":"markdown"},"source":{"230cd9fb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nos.listdir(\"..\/input\/\")\n\ndata=pd.read_csv('..\/input\/train.csv')\n# Any results you write to the current directory are saved as output.","df96df00":"import keras\nfrom keras.models import Model, Sequential, model_from_json\nfrom keras.optimizers import SGD\nfrom keras.layers import Dense, Dropout, Flatten, Input\nfrom keras.layers import Conv2D, MaxPooling2D, AveragePooling2D, concatenate,Activation\nfrom keras import regularizers\nimport numpy as np\nimport glob\nimport cv2\nimport numpy as np\nimport csv \nimport os\nfrom numpy import genfromtxt\nfrom sklearn import preprocessing\nfrom PIL import Image\nimport matplotlib.pyplot as plt","5494bb6d":"def inception():\n    inputs = Input(shape=(28, 28,1))\n    input_img = Conv2D(32, (5,5), strides = (2,2), activation='relu')(inputs)\n    input_img = Conv2D(16, (3,3), activation='relu')(input_img)\n    \n    tower_4 = MaxPooling2D((3,3), strides=(2,2), padding='same')(input_img)\n    \n    tower_5 = Conv2D(16, (4,4), strides=(2,2), padding='same', activation='relu')(input_img)\n    \n    input_img = concatenate([tower_4, tower_5], axis = 3)\n    \n    tower_1 = AveragePooling2D((3,3), strides=(1,1), padding='same')(input_img)\n    tower_1 = Conv2D(4, (1,1), padding='same', activation='relu')(tower_1)\n    \n    tower_2 = Conv2D(4, (1,1), padding='same', activation='relu')(input_img)\n    tower_2 = Conv2D(4, (2,2), padding='same', activation='relu')(tower_2)\n    \n    tower_3 = Conv2D(4, (1,1), padding='same', activation='relu')(input_img)\n    tower_3 = Conv2D(4, (2,2), padding='same', activation='relu')(tower_3)\n    tower_3 = Conv2D(4, (2,2), padding='same', activation='relu')(tower_3)\n    \n    outputs = concatenate([tower_1, tower_2, tower_3], axis = 3)\n    \n    dense = MaxPooling2D((2, 2), strides=(2,2))(outputs)\n    dense = Flatten(name='flatten')(dense)\n    dense = Dense(128, activation='relu', name='dense_1')(dense)\n    dense = Dropout(0.5)(dense)\n    dense = Dense(10, name='dense_2')(dense)\n    \n    prediction = Activation('softmax', name='softmax')(dense)\n    \n    model = Model(input=inputs, output=prediction)\n    \n    return model\n    ","1e2f58bb":"def line_check(line):\n    line=np.array(line)\n    tran=np.nan_to_num(line)\n    if tran.all()!=line.all():\n        print(1)\n    return tran\n    ","bea4c0f2":"X_train=list()\nY_train=list()\ni=0\nwith open('..\/input\/train.csv') as csvfile: \n    mpg_data = csv.reader(csvfile)\n    for line in mpg_data:\n      if i==0:\n        i+=1\n      else:\n        r=list()\n        Y_train.append(int(line[0]))\n        for j in range(0,784,28):\n          a=line_check(np.array(list(map(int, line[1+j:29+j]))))\n          r.append(a)\n        X_train.append(r)","dce99f72":"x_train=list()\nfor i in range(42000):\n  t=list()\n  t.append(X_train[i])\n  x_train.append(np.dstack(t))\n\nx_train=np.array(x_train)\/255.0","50e98383":"print(np.shape(x_train))\nplt.imshow(x_train[3].reshape(28,28))","11d80b23":"y_train=list()\nfor i in range(len(Y_train)):\n  r=list()\n  r.append(Y_train[i])\n  y_train.append(r)\n  \nenc = preprocessing.OneHotEncoder()\nenc.fit(y_train)\ny_transform= enc.transform(y_train).toarray()\ny_transform.shape\n  ","23909d82":"y_transform=np.array(y_transform)\ny_transform=line_check(y_transform)","5baf0a0a":"model=inception()\nmodel.compile(loss=\"categorical_crossentropy\",optimizer=\"adam\",metrics=['accuracy'])","76ad716c":"model.fit(x_train, y_transform,\n          batch_size=2000,\n          epochs=50,validation_data=(x_train, y_transform))","569ce7e1":"X_test=list()\ni=0\nwith open('..\/input\/test.csv') as csvfile: \n    mpg_data = csv.reader(csvfile)\n    for line in mpg_data:\n      if i==0:\n        i+=1\n      else:\n        r=list()\n        for j in range(0,784,28):\n          r.append(list(map(int, line[0+j:28+j])))\n        X_test.append(r)","c67e6ab7":"x_test=list()\nfor i in range(28000):\n  t=list()\n  t.append(X_test[i])\n  x_test.append(np.dstack(t))\n\nx_test=np.array(x_test)\/255.0","3a5065b9":"print(np.shape(x_test))\nplt.imshow(x_test[3].reshape(28,28))","5645e375":"out = open('result.csv', \"w\")\nout.write(\"ImageId,Label\\n\")\nY_test=model.predict(x_test)\nrows =['']*len(Y_test)\nfor i in range(len(Y_test)):\n  rows[i]='%s,%s\\n' % (i+1,int(np.argmax(Y_test[i])))\nout.writelines(rows)\nout.close()","a0c2d5bf":"data preprocessing","5308a31d":"submitting the results as a csv file","abfdabf6":"starting the inception module","4c89b176":"importing the libraries required","c50ed05b":"preprocessing test data","31e893bb":"function to remove nans from input data","bdb71ad8":"function for inception module using keras ","6a6fa2b8":"training the inception module on input images"}}