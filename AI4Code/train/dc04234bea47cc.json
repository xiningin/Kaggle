{"cell_type":{"4718b099":"code","3664c1b9":"code","93838493":"code","aee4f5b9":"code","e9273b31":"code","c102ffdf":"code","a62dbbca":"markdown","c99d8d70":"markdown"},"source":{"4718b099":"# Importing the libraries\n\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom sklearn.model_selection import StratifiedKFold","3664c1b9":"# Input data files are available in the read-only\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ndata = pd.read_csv('\/kaggle\/input\/connectionist-bench-vowel-recognition\/vowel.data')\ndata.head()","93838493":"#Replacing the header type to string to be compatible with feature selection process\n\n\nfeatuer = []\nfor i in range(len(data.columns)-1):\n  featuer.append(str(i))\n\ndf = pd.DataFrame(data)\n# Replace the header with String value \ncol_rename = {i:j for i,j in zip(df.columns, featuer)}\ndf = df.rename(columns=col_rename, inplace=False)\ndf.head()","aee4f5b9":"X = df.iloc[:, :-1]\ny = df.iloc[:, -1]","e9273b31":"def make_input_fn(X, y, n_epochs=None, shuffle=True):\n    def input_fn():\n        dataset = tf.data.Dataset.from_tensor_slices((dict(X), y))\n        if shuffle:\n            dataset = dataset.shuffle(NUM_EXAMPLES)\n        # For training, cycle thru dataset as many times as need (n_epochs=None).\n        dataset = dataset.repeat(n_epochs)\n        # In memory training doesn't use batching.\n        dataset = dataset.batch(NUM_EXAMPLES)\n        return dataset\n    return input_fn","c102ffdf":"kfold = StratifiedKFold(n_splits=5,\n                        shuffle=True,\n                        random_state=None)\n\nresult = []\nfor cv_i, (train_index, test_index) in enumerate(kfold.split(X, y)):\n    x_train, x_test = X.iloc[train_index], X.iloc[test_index]\n    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n\n    x_train = x_train.astype(\"int64\")\n    y_train = y_train.astype(\"int64\")\n    x_test = x_test.astype(\"int64\")\n    y_test = y_test.astype(\"int64\")\n    \n    NUM_EXAMPLES = len(y)\n\n    train_input_fn = make_input_fn(x_train, y_train)\n    eval_input_fn = make_input_fn(\n        x_test, y_test, shuffle=False, n_epochs=1)\n\n    num_columns = featuer\n\n    feature_columns = []\n\n    for feature_name in num_columns:\n        feature_columns.append(tf.feature_column.numeric_column(feature_name,\n                                                                dtype=tf.float32))\n\n    est = tf.estimator.BoostedTreesClassifier(feature_columns,\n                                              n_batches_per_layer=1,\n                                              n_classes=len(np.unique(y)),\n                                              n_trees=2,\n                                              max_depth=10)\n\n    est.train(train_input_fn, max_steps=100)\n\n\n    est.train(train_input_fn, max_steps=5)\n\n    result.append(est.evaluate(eval_input_fn, steps=1))\n\npd.DataFrame(result)","a62dbbca":"In this Notebook, I have imported the [vowel](https:\/\/www.kaggle.com\/samanemami\/connectionist-bench-vowel-recognition) dataset and used the [BoostedTreeClassifier](https:\/\/github.com\/tensorflow\/estimator\/blob\/781c0d30c6bf100aa174591dd97cb70fc39d294d\/tensorflow_estimator\/python\/estimator\/canned\/boosted_trees.py#L1933) to train the GBM model. \n\nMoreover, I used **Kfold** cross validation for data splitting.\n","c99d8d70":"# If you have any doubt or question about this notebook, please write your comment here."}}