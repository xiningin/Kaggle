{"cell_type":{"65a9380e":"code","42f5bcd9":"code","6e6ea150":"code","929cd466":"code","043576e0":"code","e24552df":"code","b7598ecd":"code","843d1b01":"code","127088d7":"code","3322cdf0":"code","394a150c":"code","3e7de906":"code","9974590f":"code","f0943ab1":"code","63cb4575":"code","3433be76":"code","b9fd7cc4":"code","25383f8f":"code","86f7ff34":"code","87a084d9":"code","7be54bd3":"code","41fef75b":"code","98a48c22":"code","2ab5e273":"markdown","95e24a80":"markdown","61dd0999":"markdown","a7d4ddc9":"markdown","fc786659":"markdown","2651eab8":"markdown","17dac54b":"markdown","bda80a2d":"markdown","43fe2962":"markdown","87ce74a4":"markdown","ad4347e1":"markdown","987362fe":"markdown","c2e02480":"markdown","c56ea02c":"markdown"},"source":{"65a9380e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sklearn \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly_express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","42f5bcd9":"data = pd.read_csv('..\/input\/customer-churn-with-explainable-ai\/Churn_Modelling.csv')\ndata.head()","6e6ea150":"data.info()","929cd466":"data.nunique()","043576e0":"# inspect target results\nfig = px.histogram(data, x='Exited', width=300, height=300)\nfig.update_xaxes(type='category')\n#fig.update_layout(bargap=0.2)\nfig.show()","e24552df":"fig = px.histogram(data, x='CreditScore', width=600, height=300, facet_col=\"Exited\", nbins=40)\nfig.show()","b7598ecd":"# inspect geography\nfig = px.histogram(data, x='Geography', width=300, height=300)\nfig.show()","843d1b01":"# inspect age\nfig = px.box(data, y='Age', facet_col=\"Exited\", width=500, height=300)\nfig.show()","127088d7":"fig = px.histogram(data, x='Balance', facet_col=\"Exited\", width=500, height=300, nbins=30)\nfig.show()","3322cdf0":"from sklearn.preprocessing import LabelEncoder\nlabels = data['Exited']\nle = LabelEncoder()\nle.fit(labels)\nlabels = le.transform(labels)\nclass_names = le.classes_","394a150c":"data = data.drop(['RowNumber', 'CustomerId', 'Surname', 'Exited'], axis = 1) \ndata.head()","3e7de906":"feature_names = data.columns.tolist()","9974590f":"categorical_features = [1,2,7,8]\ncategorical_names = {}\nfor feature in categorical_features:\n    column = data.iloc[:,feature].values\n    le = LabelEncoder()\n    le.fit(column)\n    data.iloc[:, feature] = le.transform(column)\n    categorical_names[feature] = le.classes_","f0943ab1":"data.head(10)","63cb4575":"\ndata.info()","3433be76":"seed = 101 # fix random seed for reproducibility\nnp.random.seed(seed)\n\n# Split Train Test sets\nfrom sklearn.model_selection import train_test_split\ntrain, test, labels_train, labels_test = train_test_split(data, labels, \n                                                    test_size=0.2,\n                                                    stratify=labels,\n                                                    random_state=seed)\nprint(train.shape, test.shape, labels_train.shape, labels.shape)","b9fd7cc4":"import lightgbm as lgb\nfrom bayes_opt import BayesianOptimization\n\ndef modelFitter(colsampleByTree, subsample,maxDepth, num_leaves, num_estimators, learn_rate):   \n    model = lgb.LGBMClassifier(learning_rate=learn_rate, n_estimators=num_estimators.astype(\"int32\"), max_depth=maxDepth.astype(\"int32\"), subsample=subsample, colsample_bytree=colsampleByTree,num_leaves=num_leaves.astype(\"int32\"), is_unbalance = 'true', random_state=seed)\n\n    evalSet  = [(test, labels_test)]\n    model.fit(train, labels_train, eval_metric=\"auc\", eval_set=evalSet, early_stopping_rounds=50, categorical_feature=categorical_features, verbose=False)\n\n    bestScore = model.best_score_[list(model.best_score_.keys())[0]]['auc']\n\n    return bestScore\n\n# Bounded region of parameter space\npbounds = {'colsampleByTree': (0.2,1.0), 'subsample': (0.2,1.0), 'maxDepth': (2,5), 'num_leaves': (4, 40), 'num_estimators': (100, 500), 'learn_rate': (0.02, 0.3)}\n\noptimizer = BayesianOptimization(\n    f=modelFitter,\n    pbounds=pbounds,\n    random_state=1)\n\noptimizer.maximize(init_points=5,n_iter=5)  #n_iter=bayesian, init_points=random\n","25383f8f":"gbtree = lgb.LGBMClassifier(learning_rate=0.10, n_estimators=116, num_leaves= 9, max_depth=3, subsample=0.74, colsample_bytree=0.69, objective = 'binary', is_unbalance = 'true', random_state=seed)\ngbtree.fit(train, labels_train, categorical_feature=categorical_features)","86f7ff34":"y_preds = gbtree.predict(test)","87a084d9":"from sklearn.metrics import accuracy_score,confusion_matrix,classification_report\ndef model_evaluate(): \n    \n    print('Test Accuracy:\\t{:0.1f}%'.format(accuracy_score(labels_test,y_preds)*100))\n    \n    #classification report\n    print('\\n')\n    print(classification_report(labels_test, y_preds))\n\n    #confusion matrix\n    confmat = confusion_matrix(labels_test, y_preds)\n\n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.matshow(confmat, cmap=plt.cm.Blues, alpha=0.3)\n    for i in range(confmat.shape[0]):\n        for j in range(confmat.shape[1]):\n            ax.text(x=j, y=i, s=confmat[i, j], va='center', ha='center')\n    plt.xlabel('Predicted label')\n    plt.ylabel('True label')\n    plt.tight_layout()","7be54bd3":"# evaluate model with test set\nmodel_evaluate()","41fef75b":"#PLot AUC-curve\nimport sklearn.metrics as metrics\ny_pred = gbtree.predict_proba(test)\nfpr, tpr, threshold = metrics.roc_curve(labels_test, y_pred[:,1])\nroc_auc = metrics.auc(fpr, tpr)\n\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","98a48c22":"#PLot PR-curve\nfrom sklearn.metrics import precision_recall_curve\ny_pred = gbtree.predict_proba(test)\nprecision, recall, thresholds = precision_recall_curve(labels_test, y_pred[:,1])\n \nthresholds = np.append(thresholds, 1)\nf1_scores = 2*(precision*recall)\/(precision+recall)\nplt.step(recall, precision, color='b', alpha=0.4, where='post')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.ylim([0.0, 1.05])\nplt.xlim([0.0, 1.0])\nplt.title('Precision-Recall curve')\nplt.show()","2ab5e273":"Looks like credit score is a normal distribution, with the peak between 600-700 for both classes.","95e24a80":"    colsam = 0.69, learn_rate = 0.10, maxDepth =  3, num_estimators = 116, numleaves =  9, subsample = 0.74","61dd0999":"All the customers come from Europe. Most are from France (~50%) while Germany is ~25% and Spain 25%","a7d4ddc9":"There are several columns with categorical data:\nGeography, Gender, HasCrCard, IsActiveMember.\nThe column Exited has the label to be predicted. ","fc786659":"Explicitly define the categorical features, we need this for LIME.\nCategorical data: Geography, Gender, HasCrCard, IsActiveMember.","2651eab8":"Looks like most who exited tend to be older than those who stayed!","17dac54b":"Drop the columns RowNumber, CustomerId, Surname as they are not predictive features, and remove the labels column","bda80a2d":"Start Data Processing","43fe2962":"Start separating out the labels column","87ce74a4":"There are a lot of balances (> 3600) with zero amount!","ad4347e1":"Ok..now the dataframe has all data as integers\/floats, so we are ready to start training the LightGBM classifier!","987362fe":"Let's explore the data! ","c2e02480":"There are 10000 entries, with 14 columns.\nThere are 3 text fields, Surname, Geography & Gender.\nThe rest of the features have number entries, and there are no empty fields.","c56ea02c":"There is a class imbalance issue, with the no. of people exiting 1 quarter that of those that stayed!"}}