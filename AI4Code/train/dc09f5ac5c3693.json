{"cell_type":{"bc8f3ae9":"code","d749f3b6":"code","b8ba34fd":"code","e49908ae":"code","b1d9ed7c":"code","b4727691":"code","01058b4d":"code","8597c5ab":"code","b9f90c47":"code","fc779e5d":"code","e255bd41":"markdown","5813c4d3":"markdown","51746842":"markdown","fdb688d8":"markdown","4fad300c":"markdown","68e2a6a5":"markdown","55e400ad":"markdown","0b0daced":"markdown"},"source":{"bc8f3ae9":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pylab\n\nfrom pylab import *\nfrom mpl_toolkits import mplot3d","d749f3b6":"def f1(mu):\n    return np.sqrt(1-np.sqrt(mu))\ndef f2(mu):\n    return np.sqrt(1-np.sqrt(mu)\/2)\ndef f3(mu):\n    return np.sqrt(1+np.sqrt(mu)\/2)\ndef f4(mu):\n    return np.sqrt(1+np.sqrt(mu))\n\nt1 = np.arange(0, 20, 0.1)\nt2=np.arange(-2,0,0.1)\n\nplt.plot(t1,f1(t1),'r--',t1,f2(t1),'b-',t1,f3(t1),'g--',t1,f4(t1),'m-',t1,0*t1,'k-')\nplt.plot(t2,0*t2,'k--')\nplt.xlabel('$\\mu$')\nplt.ylabel('r')\nplt.show()","b8ba34fd":"def f1(mu):\n    return 1-np.sqrt(mu)\ndef f2(mu):\n    return 1+np.sqrt(mu)\n\nt1 = np.arange(-1, 1, 0.01)\nt2= np.arange(1,5,0.01)\n\nplt.plot(t1,f1(t1),'r--',t1,f2(t1),'b-',t1,t1*0,'k-')\nplt.plot(t2,f2(t2),'b-',t2,t2*0,'k--')\nplt.xlabel('$\\mu$')\nplt.ylabel('r')\nplt.show()","e49908ae":"%matplotlib inline\nimport numpy as np, matplotlib.pyplot as plt, matplotlib.font_manager as fm, os\nfrom scipy.integrate import odeint\nfrom mpl_toolkits.mplot3d.axes3d import Axes3D","b1d9ed7c":"font_family = 'Myriad Pro'\ntitle_font = fm.FontProperties(family=font_family, style='normal', size=20, weight='normal', stretch='normal')","b4727691":"def lorentz_plotter(rh):\n    \n    fig = plt.figure(figsize=(12, 9))\n    \n    \n    for i in np.arange(-3,5,2):\n        # define the initial system state (aka x, y, z positions in space)\n        initial_state = [i, 0, 0]\n\n        # define the time points to solve for, evenly spaced between the start and end times\n        start_time = 0\n        end_time = 10\n        time_points = np.linspace(start_time, end_time,10**4)\n        \n        # define the system parameters sigma, rho, and beta\n        sigma = 10.\n        rho = rh\n        beta  = 8.\/3.\n        \n        # define the lorenz system\n        # x, y, and z make up the system state, t is time, and sigma, rho, beta are the system parameters\n        def lorenz_system(current_state, t):\n    \n            # positions of x, y, z in space at the current time point\n            x, y, z = current_state\n\n            # define the 3 ordinary differential equations known as the lorenz equations\n            dx_dt = sigma * (y - x)\n            dy_dt = x * (rho - z) - y\n            dz_dt = x * y - beta * z\n\n            # return a list of the equations that describe the system\n            return [dx_dt, dy_dt, dz_dt]\n\n        # use odeint() to solve a system of ordinary differential equations\n        # the arguments are: \n        # 1, a function - computes the derivatives\n        # 2, a vector of initial system conditions (aka x, y, z positions in space)\n        # 3, a sequence of time points to solve for\n        # returns an array of x, y, and z value arrays for each time point, with the initial values in the first row\n        xyz = odeint(lorenz_system, initial_state, time_points)\n\n        # extract the individual arrays of x, y, and z values from the array of arrays\n        x = xyz[:, 0]\n        y = xyz[:, 1]\n        z = xyz[:, 2]\n\n        # plot the lorenz attractor in three-dimensional phase space\n        ax = fig.gca(projection='3d')\n        ax.xaxis.set_pane_color((1,1,1,1))\n        ax.yaxis.set_pane_color((1,1,1,1))\n        ax.zaxis.set_pane_color((1,1,1,1))\n        ax.plot(x, y, z, alpha=0.7, linewidth=0.6,label='$x(0)={i}$'.format(i=i))\n        ax.plot(x, z, 'r--', zdir='y', zs=400,linewidth=0.3)\n        \n    plt.title('Lorentz attractor for \u03c1=%d' %rho,fontproperties=title_font)\n    plt.legend(loc='best')\n    plt.show()","01058b4d":"for j in np.arange(170,138,-2):\n    lorentz_plotter(j)","8597c5ab":"%matplotlib inline\nfrom ipywidgets import interact, interactive\nfrom IPython.display import clear_output, display, HTML\n\nimport numpy as np\nfrom scipy import integrate\n\nfrom matplotlib import pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib.colors import cnames\nfrom matplotlib import animation","b9f90c47":"def solve_lorenz(N=10, angle=0.0, max_time=4.0, sigma=10.0, beta=8.\/3, rho=28.0):\n\n    fig = plt.figure()\n    ax = fig.add_axes([0, 0, 1, 1], projection='3d')\n    ax.axis('off')\n\n    # prepare the axes limits\n    ax.set_xlim((-25, 25))\n    ax.set_ylim((-35, 35))\n    ax.set_zlim((5, 55))\n\n    def lorenz_deriv(x_y_z, t0, sigma=sigma, beta=beta, rho=rho):\n        \"\"\"Compute the time-derivative of a Lorenz system.\"\"\"\n        x, y, z = x_y_z\n        return [sigma * (y - x), x * (rho - z) - y, x * y - beta * z]\n\n    # Choose random starting points, uniformly distributed from -15 to 15\n    np.random.seed(1)\n    x0 = -15 + 30 * np.random.random((N, 3))\n\n    # Solve for the trajectories\n    t = np.linspace(0, max_time, int(250*max_time))\n    x_t = np.asarray([integrate.odeint(lorenz_deriv, x0i, t)\n                      for x0i in x0])\n\n    # choose a different color for each trajectory\n    colors = plt.cm.viridis(np.linspace(0, 1, N))\n\n    for i in range(N):\n        x, y, z = x_t[i,:,:].T\n        lines = ax.plot(x, y, z, '-', c=colors[i])\n        plt.setp(lines, linewidth=2)\n\n    ax.view_init(30, angle)\n    plt.show()\n\n    return t, x_t","fc779e5d":"w = interactive(solve_lorenz, angle=(0.,360.), max_time=(0.1, 4.0),\n                N=(0,50), sigma=(0.0,50.0), rho=(0.0,200.0))\ndisplay(w)","e255bd41":"## Define libraries","5813c4d3":"## Biffucation diagrams plot\nWe have the differential equation system $r$:\n\n$$\\dot{r}=r\\left( \\mu-(r^{2}-1)^{2}\\right)\\left( \\mu-4(r^{2}-1)^{2}\\right)$$\n$$\\dot{\\theta}=1$$\n\nWhich has four limit circles. To find them we solve the equation of r-component\n\n$$(r^{2}-1)^{2}=\\mu\\Rightarrow r=\\sqrt{1\\pm\\sqrt{\\mu}}$$\n$$\\mu-4(r^{2}-1)^{2}=0\\Rightarrow r=\\sqrt{1\\pm\\sqrt{\\mu}\/2}$$","51746842":"We define a function which plots the lorentz attractor for different initial conditions. It's colors determines a different initial contition. If the trajectories are dense on a subset of $\\mathbb{R}^{3}$ it means that there is a stable periodic orbit (it is stable because the direction of time is positive).","fdb688d8":"# A game with Lorenz system\nThere we use a more interactive method to change the parameters of our system.","4fad300c":"# Lorentz attractor\nIN THIS CHAPTER I USE THE CODE OF THIS GUY:\n\nAuthor: Geoff Boeing <br \/>\nWeb: http:\/\/geoffboeing.com  <br \/>\n\nThe Lorenz system is nonlinear, three-dimensional, and deterministic. The Lorenz attractor is a set of chaotic solutions of the Lorenz system and is possibly the most famous depiction of a system that exibits chaotic behavior. Very slight changes to the initial conditions of the system lead to wildly different solutions. The system itself describes the movement of a point in a three-dimensional space over time. The system is formally described by three ordinary differential equations that represent the movement of this point (x, y, z). In these equations, t represents time and sigma, rho, and beta are constant system parameters.\n\n$$ \\frac{dx}{dt} = \\sigma (y - x) $$\n\n$$ \\frac{dy}{dt} = x (\\rho - z) - y $$\n\n$$ \\frac{dz}{dt} = x y - \\beta z $$\n\nFor his famous depiction of chaos, Lorenz used the values sigma = 10, beta = 8\/3 and rho = 28. With these parameter values, the system exhibits deterministic chaos. It has a strange attractor with a fractal structure.","68e2a6a5":"We run this functions for different values of $\\rho$, to observe the behaviour of our system under its change of parameters. We can observe a change of its geometry, even it is not clear what kind of bifurcation we have. However, it is clear that for $\\rho<167$ we have some stable periodic orbits. We can also see the x-z plane projection of Lorentz system trajectories.","55e400ad":"# Biffucations and periodic orbits\nWe start with biffucation diagrams of exercises III.24 and III.25. It's just an easy plot! We use dashed lines for the unstable periodic orbits and continous lines for the stable ones. ","0b0daced":"Here we have an easier system, which is described by these differential equations:\n\n$$\\dot{r}=r[\\mu-(r-1)^{2}]$$\n$$\\dot{\\theta}=1$$\n\nAnd its biffucation diagrams can be seen as functions $r=r(\\mu)$:\n\n$$\\mu-(r-1)^{2}=0\\Leftrightarrow r=1\\pm\\sqrt{\\mu}$$\n\nwhich are the radius of limit circles of our system."}}