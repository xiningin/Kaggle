{"cell_type":{"d18f68f0":"code","4f49fa69":"code","13630d7d":"code","02341477":"code","4f76ec0b":"code","c40f2fc6":"code","af9c035a":"code","5bea73bc":"code","fd166f8a":"code","9dc8a38b":"code","5ab282fe":"code","10b91474":"code","dccc3074":"code","f9685f04":"code","842f7623":"code","b7e75cf4":"code","5a47ee10":"code","822efb33":"code","93dac35a":"code","34938337":"code","993fc531":"code","baf19562":"code","87b6a82e":"code","f933bd5e":"code","eb00c388":"code","168b6567":"code","d4ad137c":"code","707c71e8":"code","73138f93":"code","77789e40":"code","2ae2acd1":"code","2c075609":"code","261e8e33":"code","089b3b82":"code","e5667642":"code","ad02ee8c":"code","050078bc":"code","ac62d1c1":"code","48b8a4d3":"code","1e720ff8":"code","09879e47":"code","f37bc9a0":"code","c66dfcd2":"code","ae548c54":"code","b4ca8171":"code","e98dc837":"code","b4cb654c":"code","103b07b1":"code","f39e8dcb":"code","2c711ff6":"code","2f85eb45":"code","c3311dca":"markdown","710ea3f1":"markdown","0971b34a":"markdown","d299a081":"markdown","822982a0":"markdown","2420e344":"markdown","3f0533f1":"markdown","62e3017a":"markdown","27b6d12c":"markdown","f74bf8fd":"markdown","ac52b4f7":"markdown","bb8bff6d":"markdown","565d8a3f":"markdown","63667506":"markdown","15b5d245":"markdown","845a1ef0":"markdown","899815e9":"markdown"},"source":{"d18f68f0":"import plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly import subplots\nimport plotly.figure_factory as ff\nimport matplotlib.pyplot as plt\n\nfrom pandas_profiling import ProfileReport\nimport seaborn as sns\nfrom sklearn import metrics\nfrom scipy import stats\n\nfrom copy import deepcopy","4f49fa69":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","13630d7d":"# Defining all our palette colours.\nprimary_blue = \"#496595\"\nprimary_blue2 = \"#85a1c1\"\nprimary_blue3 = \"#3f4d63\"\nprimary_grey = \"#c6ccd8\"\nprimary_grey2 = \"#696969\"\nprimary_black = \"#202022\"\nprimary_bgcolor = \"#f4f0ea\"\n\nprimary_green = px.colors.qualitative.Plotly[2]","02341477":"df = pd.read_csv('\/kaggle\/input\/d\/gpreda\/covid-world-vaccination-progress\/country_vaccinations.csv')\ndf.head()","4f76ec0b":"report = ProfileReport(df)","c40f2fc6":"report","af9c035a":"df.info()","5bea73bc":"df.loc[df['iso_code'].isnull(), 'country'].value_counts()","fd166f8a":"df['iso_code'] = df['iso_code'].fillna('GBR')","9dc8a38b":"df = df.drop('daily_vaccinations_raw', axis=1)","5ab282fe":"df['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values('date', ascending=True)\n\ndf['date'] = df['date'].dt.strftime('%Y-%m-%d')","10b91474":"unique_dates = df['date'].unique()","dccc3074":"original_df = df.copy()","f9685f04":"for iso_code in df['iso_code'].unique():\n    for inc_date in unique_dates:\n        if df.loc[df['iso_code'] == iso_code, 'date'].str.contains(inc_date).any():\n            continue\n        else:\n            df.loc[len(df)] = [None, iso_code, inc_date] + 11 * [None]","842f7623":"df.shape","b7e75cf4":"df['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values('date', ascending=True)\n\ndf['date'] = df['date'].dt.strftime('%m-%d-%Y')\n\ndf.head()","5a47ee10":"# I will adapt this to Plotly in future versions\nplt.rcParams['figure.dpi'] = 300\n\nfig = plt.figure(figsize=(5, 0.8), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0, hspace=0)\n\nbackground_color = \"#f6f5f5\"\n\nax0 = fig.add_subplot(gs[0, 0])\n\nax0.set_facecolor(primary_bgcolor)\nfor s in [\"top\",\"right\", 'left', 'bottom']:\n    ax0.spines[s].set_visible(False)\nax0.set_xticks([])\nax0.set_yticks([])\n\nax0.grid(which='major', axis='y', zorder=0, color='#EEEEEE')\nax0.text(-0.12, 0.8, 'General Overview', color=primary_black, fontsize=8, ha='left', weight='bold', va='bottom')\nax0.text(-0.12, 0.79, 'A quick glance of world vaccination progress', color='#292929', fontsize=6, ha='left', va='top')\n\nax0.text(0, 0, '150', color=primary_blue, fontsize=20, ha='center', weight='bold', va='bottom')\nax0.text(0, 0, 'country with\\nVaccination Program', color=primary_grey2, fontsize=6, ha='center', va='top', weight='bold')\n\nax0.text(0.2, 0, '10', color=primary_blue, fontsize=20, ha='center', weight='bold', va='bottom')\nax0.text(0.2, 0, 'vaccines\\nused', color=primary_grey2, fontsize=6, ha='center', va='top', weight='bold')\n\nax0.text(0.4, 0, '475', color=primary_blue, fontsize=20, ha='center', weight='bold', va='bottom')\nax0.text(0.4, 0, 'million of\\ntotal vaccinations', color=primary_grey2, fontsize=6, ha='center', va='top', weight='bold')\n\nax0.text(0.65, 0, '269', color=primary_blue, fontsize=20, ha='center', weight='bold', va='bottom')\nax0.text(0.65, 0, 'million of\\npeople vaccinated', color=primary_grey2, fontsize=6, ha='center', va='top', weight='bold')\n\nax0.text(0.9, 0, '103', color=primary_blue, fontsize=20, ha='center', weight='bold', va='bottom')\nax0.text(0.9, 0, 'million of people\\nfully vaccinated', color=primary_grey2, fontsize=6, ha='center', va='top', weight='bold')\n\nplt.show()","822efb33":"tdf = df.copy()\n\n\nfor iso_code in tdf['iso_code'].unique():\n    tdf.loc[tdf['iso_code'] == iso_code, :] = tdf.loc[tdf['iso_code'] == iso_code, :].fillna(method='ffill').fillna(0)\n","93dac35a":"fig = px.choropleth(\n    tdf,                            # Input Dataframe\n    locations=\"iso_code\",           # identify country code column\n    color=\"total_vaccinations\",                     # identify representing column\n    hover_name=\"country\",              # identify hover name\n    animation_frame=\"date\",\n    #category_orders={\"frame\": list(sorted(tdf['date'].unique()))},            # identify date column\n    color_continuous_scale= 'viridis',\n    projection=\"natural earth\",        # select projection\n    range_color=[0,5000000],\n    title='<span style=\"font-size:36px; font-family:Times New Roman\">Number of vaccinations per country<\/span>',\n)             # select range of dataset     \nfig.show() ","34938337":"fig = px.choropleth(\n    tdf,                            # Input Dataframe\n    locations=\"iso_code\",           # identify country code column\n    color=\"daily_vaccinations\",                     # identify representing column\n    hover_name=\"country\",              # identify hover name\n    animation_frame=\"date\",\n    #category_orders={\"frame\": list(sorted(tdf['date'].unique()))},            # identify date column\n    color_continuous_scale= 'viridis',\n    projection=\"natural earth\",        # select projection\n    range_color=[0,1000000],\n    title='<span style=\"font-size:36px; font-family:Times New Roman\">Number of daily vaccinations<\/span>',\n)             # select range of dataset     \nfig.show() ","993fc531":"tdf = df.copy()\ntdf = tdf.dropna(subset=['vaccines'])\n\nvac_df = tdf.groupby(['iso_code','vaccines']).max().reset_index()\nvac_df['vaccines_split'] = vac_df['vaccines'].apply(lambda x: [w.strip() for w in x.split(',')])\nvac_df.head()","baf19562":"from sklearn.preprocessing import MultiLabelBinarizer\n\none_hot = MultiLabelBinarizer()\n\nvac_data = one_hot.fit_transform(vac_df['vaccines_split'])\nvac_names = one_hot.classes_\nvac_countries = vac_df['country']\n\nfinal_vac_df = pd.DataFrame(data=vac_data, columns=vac_names, index=vac_countries)\nfinal_vac_df = final_vac_df.reset_index()\nfinal_vac_df.head()","87b6a82e":"ncountrys_vac = final_vac_df[vac_names].sum(axis=0).sort_values()\ncolors =  [primary_grey]*4 + [primary_blue2]*4 + [primary_blue]*2 \n\n\nfig = go.Figure(go.Bar(\n    x = ncountrys_vac.values,\n    y = ncountrys_vac.index,\n    orientation = 'h',\n))\nfig.update_traces(\n    marker_color=colors,\n    marker_line_color=primary_black,\n    marker_line_width=1.5, \n    opacity=0.6,\n)\nfig.update_layout(\n    title='<span style=\"font-size:36px; font-family:Times New Roman\">Vaccines laboratory distribution by countries<\/span>',\n)\n\n'''\nfig.add_layout_image(\n    dict(\n        source='https:\/\/upload.wikimedia.org\/wikipedia\/commons\/9\/9a\/Flag_of_Afghanistan.svg',\n        x=35, y=\"Moderna\",\n        sizex=2.5, sizey=0.75,\n        xanchor=\"left\", yanchor=\"middle\",\n        sizing='stretch',\n        xref='x',\n        yref=\"y\",\n    )\n)\n'''\n\nfig.show()","f933bd5e":"regions_df = pd.read_csv('\/kaggle\/input\/countries-iso-codes-continent-flags-url\/countries_continents_codes_flags_url.csv')\nfull_df = df.merge(regions_df[['alpha-3', 'region', 'image_url']], left_on='iso_code', right_on='alpha-3')\n\nworld_summary_df = pd.read_csv('\/kaggle\/input\/covid19-global-dataset\/worldometer_coronavirus_summary_data.csv')\nfull_df = full_df.merge(world_summary_df, on='country', how='left')\nfull_df.head()","eb00c388":"full_df['total_deaths_ratio'] = full_df['total_deaths'] \/ full_df['population']\nfull_df['total_confirmed_ratio'] = full_df['total_confirmed'] \/ full_df['population']\nfull_df['total_recovered_ratio'] = full_df['total_recovered'] \/ full_df['population']\n\nworld_summary_df['total_deaths_ratio'] = world_summary_df['total_deaths'] \/ world_summary_df['population']\nworld_summary_df['total_confirmed_ratio'] = world_summary_df['total_confirmed'] \/ world_summary_df['population']\nworld_summary_df['total_recovered_ratio'] = world_summary_df['total_recovered'] \/ world_summary_df['population']","168b6567":"def get_multi_line_title(title:str, subtitle:str):\n    return f'<span style=\"font-size:32px; font-family:Times New Roman\">{title}<br><sub>{subtitle}<\/sub><\/span>'\n\n# Thanks to \ndef plotly_bar_chart(data: pd.DataFrame, xcolumn: str, ycolumn:str, title:str, colors:str, ylabel=\"Count\", n=None):\n    hovertemplate ='<br><b>%{x}<\/b>'+f'<br><b>{ylabel}: <\/b>'+'%{y}<br><extra><\/extra>'    \n    data = data.sort_values(ycolumn, ascending=False).dropna(subset=[ycolumn])        \n    \n    if n is not None: \n        data = data.iloc[:n]\n    else:\n        n = \"\"\n    fig = go.Figure(go.Bar(\n        hoverinfo='skip',\n        x=data[xcolumn], \n        y=data[ycolumn], \n        hovertemplate = hovertemplate,\n        marker=dict(\n            color = data[ycolumn],\n            colorscale=colors,\n        ),\n    ))\n    \n    max_y_val = data[ycolumn].max()\n    for country, flag_url, ppl_vac in zip(data[xcolumn], data['image_url'], data[ycolumn]):\n        if not flag_url or not isinstance(flag_url, str):\n            continue\n        fig.add_layout_image(\n            dict(\n                source=flag_url,\n                x=country, \n                y=ppl_vac + 0.05 * max_y_val,\n                sizex=0.5, \n                sizey=0.08 * max_y_val,\n                xanchor=\"center\", yanchor=\"bottom\",\n                sizing='stretch',\n                xref='x',\n                yref=\"y\",\n            ),\n        )\n    \n    fig.update_yaxes(range=[0, max_y_val + 0.15*max_y_val])\n    \n    fig.update_layout(\n        title=title,\n        xaxis_title=f\"Top {n} {xcolumn.title()}\",\n        yaxis_title=ylabel,\n        plot_bgcolor='rgba(0,0,0,0)',\n        hovermode=\"x\",\n    )\n    \n    fig.show()","d4ad137c":"tdf = full_df.sort_values('people_vaccinated', ascending=False).\\\n    drop_duplicates(subset=['country'], keep='first', ignore_index=True)\ntdf.head()","707c71e8":"title = get_multi_line_title(\"People Vaccinated\", \"Individuals who received the first dose of the vaccine\")\nplotly_bar_chart(tdf, 'country', \"people_vaccinated\", title, \"Blugrn\", n=10)","73138f93":"tdf = full_df.copy()\ntdf = tdf.sort_values('people_vaccinated_per_hundred', ascending=False).\\\n    drop_duplicates(subset=['country'], keep='first', ignore_index=True)","77789e40":"title = get_multi_line_title(\"People Vaccinated per Hundred\", \"Percent of individuals who received the first dose of the vaccine\")\nplotly_bar_chart(tdf, 'country', \"people_vaccinated_per_hundred\", title, \"Blugrn\", n=10, ylabel='Percent')","2ae2acd1":"tdf = full_df.copy()\ntdf = tdf.sort_values('total_vaccinations', ascending=False).\\\n    drop_duplicates(subset=['country'], keep='first', ignore_index=True)","2c075609":"title = get_multi_line_title(\"Total Vaccinations\", \"Total number of vaccinations by country\")\nplotly_bar_chart(tdf, 'country', \"total_vaccinations\", title, \"Purp\", n=10)","261e8e33":"tdf = full_df.copy()\ntdf = tdf.sort_values('total_vaccinations_per_hundred', ascending=False).\\\n    drop_duplicates(subset=['country'], keep='first', ignore_index=True)","089b3b82":"title = get_multi_line_title(\"Total Vaccinations per Hundred\", \"Ratio between vaccination number and total population up to the date in the country;\")\nplotly_bar_chart(tdf, 'country', \"total_vaccinations_per_hundred\", title, \"Purp\", n=10)","e5667642":"regions_df = pd.read_csv('\/kaggle\/input\/countries-iso-codes-continent-flags-url\/countries_continents_codes_flags_url.csv')\n\nregions_df.head()","ad02ee8c":"tdf = df.merge(regions_df[['alpha-3', 'region', 'image_url']], left_on='iso_code', right_on='alpha-3')\ntdf.head()","050078bc":"continents_tdf = tdf.sort_values('people_vaccinated_per_hundred', ascending=False).\\\n    drop_duplicates(subset=['country'], keep='first', ignore_index=True)\n\ncontinents_tdf.head()","ac62d1c1":"continents = ['Europe', 'Africa', 'Asia', 'Americas']\n\n# Initialize figure\nfig = go.Figure()\n\nfor continent in continents:\n    temp_df = continents_tdf.query(f'region == \"{continent}\"')\n    temp_df = temp_df.sort_values('people_vaccinated_per_hundred', ascending=False).iloc[:5]\n    \n    # Add Traces\n    fig.add_trace(\n        go.Bar(\n            y=temp_df['people_vaccinated_per_hundred'],\n            x=temp_df['country'],\n            name=continent,\n            marker={'color': temp_df['people_vaccinated_per_hundred'], 'colorscale': 'tealgrn'},\n            visible=True if continent == 'Europe' else False\n        )\n    )\n    \nbuttons = []\nfor i, continent in enumerate(continents):\n    buttons.append(dict(\n        label=continent,\n        method=\"update\",\n        args=[{\"visible\": [False] * i + [True] + [False] * (2-i+1)},\n              {\"title\": f\"Top 5 countries for {continent}\"}]\n    ))\n    \nfig.update_layout(\n    updatemenus=[\n        dict(\n            type=\"buttons\",\n            direction=\"right\",\n            active=0,\n            x=0.57,\n            y=1.2,\n            buttons=buttons,\n        )\n    ])\n\n# Set title\nfig.update_layout(\n    title_text=\"Top 5 Publishers per region\",\n    xaxis_domain=[0.05, 1.0]\n)\n\nfig.show()","48b8a4d3":"tdf = world_summary_df.sort_values('total_deaths_ratio', ascending=False).\\\n    drop_duplicates(subset=['country'], keep='first', ignore_index=True)\ntdf.head()\n\ntdf = tdf.dropna(subset=['total_deaths_ratio'])","1e720ff8":"# Thanks to https:\/\/www.kaggle.com\/ivannatarov for the idea\nfig = px.scatter_geo(\n         tdf, # Passing the dataframe\n         locations='country', # Select the column with the name of the countries\n         color='continent',\n         locationmode='country names', # We pass the parameter of determining the country on the map (by name)\n         hover_name='country',  # Passing values for the signature on hover\n         size='total_deaths_ratio' # Passing a column with values\n)\n\nfig.update_layout(\n    # Set the name of the map\n    title_text='Deaths ration by country <br><sub>Total number of deaths divided by the population<\/sub>',\n    legend_orientation='h', # Place the legend caption under the chart\n    legend_title_text='', # Remove the name of the legend group\n    # Determine the map display settings (remove the frame, etc.)\n    geo=dict(\n       showframe=False,\n       showcoastlines=False,\n       projection_type='equirectangular'\n    ),\n    # Setting parameters for the text\n    font=dict(\n       family='TimesNewRoman',\n       size=18, \n       color='black'\n    )\n)\n\nfig.show()","09879e47":"tdf = world_summary_df.sort_values('total_confirmed_ratio', ascending=False).\\\n    drop_duplicates(subset=['country'], keep='first', ignore_index=True)\ntdf.head()\n\ntdf = tdf.dropna(subset=['total_confirmed_ratio'])","f37bc9a0":"# Thanks to https:\/\/www.kaggle.com\/ivannatarov for the idea\nfig = px.scatter_geo(\n         tdf, # Passing the dataframe\n         locations='country', # Select the column with the name of the countries\n         color='continent',\n         locationmode='country names', # We pass the parameter of determining the country on the map (by name)\n         hover_name='country',  # Passing values for the signature on hover\n         size='total_confirmed_ratio' # Passing a column with values\n)\n\nfig.update_layout(\n    # Set the name of the map\n    title_text='Confirmed cases ration by country <br><sub>Total number of confirmed cases divided by the population<\/sub>',\n    legend_orientation='h', # Place the legend caption under the chart\n    legend_title_text='', # Remove the name of the legend group\n    # Determine the map display settings (remove the frame, etc.)\n    geo=dict(\n       showframe=False,\n       showcoastlines=False,\n       projection_type='equirectangular'\n    ),\n    # Setting parameters for the text\n    font=dict(\n       family='TimesNewRoman',\n       size=18, \n       color='black'\n    )\n)\n\nfig.show()","c66dfcd2":"world_summary_df.head()","ae548c54":"corrdata = world_summary_df.drop(columns=['country', 'continent'])\n\n## correlation \ncorr = corrdata.corr().abs()\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\ncorr1 = corr.mask(mask)\n\nfig = ff.create_annotated_heatmap(\n    z=corr1.to_numpy().round(2),\n    x=list(corr1.index.values),\n    y=list(corr1.columns.values),       \n    xgap=3, ygap=3,\n    zmin=0, zmax=1,\n    colorscale='blugrn',\n    colorbar_thickness=30,\n    colorbar_ticklen=3,\n)\n\nfig.update_layout(\n    title_text='<span style=\"font-size:32px; font-family:Times New Roman\">Features Correlation Matrix<\/span>', \n    font_family=\"Serif\",\n    titlefont={'size': 24},\n    width=800, height=700,\n    xaxis={'side': 'bottom'},\n    xaxis_showgrid=False,\n    yaxis_showgrid=False,\n    yaxis_autorange='reversed', \n    paper_bgcolor=primary_bgcolor,\n    plot_bgcolor=primary_bgcolor,\n    margin=dict(l=70, r=70, t=70, b=70, pad=1),\n)\nfig.update_xaxes(\n    ticklabelposition=\"outside bottom\",\n)\n\nfig.show()","b4ca8171":"regions_df = pd.read_csv('\/kaggle\/input\/countries-iso-codes-continent-flags-url\/countries_continents_codes_flags_url.csv')\nfull_df = original_df.merge(regions_df[['alpha-3', 'region', 'image_url']], left_on='iso_code', right_on='alpha-3')\n\nfull_df.head()","e98dc837":"vaccination_progress_df = full_df.groupby(['region', 'date']).agg({'people_vaccinated': 'sum', 'daily_vaccinations': 'sum', 'people_vaccinated_per_hundred': 'sum'})\nvaccination_progress_df = vaccination_progress_df.reset_index().sort_values('date')\nvaccination_progress_df = vaccination_progress_df.query('date > \"2021-01-03\" and date < \"2021-04-27\"')\nvaccination_progress_df.head()","b4cb654c":"fig = go.Figure()\nfor region in vaccination_progress_df['region'].unique():\n    fig.add_traces(go.Scatter(\n        x = vaccination_progress_df.query(f'region == \"{region}\"')['date'],\n        y = vaccination_progress_df.query(f'region == \"{region}\"')['people_vaccinated'],\n        fill = 'tozeroy',\n        mode = 'lines',\n        name = region,\n    ))\n    \nfig.update_layout(\n    # Set the name of the map\n    title_text='People vaccinated over time <br><sub>Total number of persons vaccinated between 03\/01 and 27\/04<\/sub>',\n    font=dict(\n       family='Serif',\n       size=18, \n       color='black'\n    )\n)\nfig.show()","103b07b1":"fig = px.area(vaccination_progress_df, x='date', y='people_vaccinated_per_hundred', color='region')\nfig.update_layout(\n    # Set the name of the map\n    title_text='People vaccinated per hundred over time',\n    font=dict(\n       family='Serif',\n       size=18, \n       color='black'\n    )\n)\nfig.show()","f39e8dcb":"covid_cum = pd.read_csv('..\/input\/covid19-global-dataset\/worldometer_coronavirus_summary_data.csv')\ncovid_cum.head()","2c711ff6":"countries= ['Spain', 'France', 'Germany', 'Turkey', 'UK', 'Italy']\neurope_mortality = covid_cum[covid_cum['country'].isin(countries)].sort_values('total_deaths_per_1m_population')\n\nfig = go.Figure(go.Bar(\n    x=europe_mortality['total_deaths_per_1m_population'],\n    y=europe_mortality['country'],\n    orientation='h',\n    marker={'color': europe_mortality['total_deaths_per_1m_population'], 'colorscale': 'tealgrn'},\n) ,layout=go.Layout(height=400, width=700))\n# Customize aspect\nfig.update_traces(\n    # marker_color='rgb(158,202,225)', \n    marker_line_color='rgb(8,48,107)',\n    marker_line_width=1.5, \n    opacity=0.6,\n)\nfig.update_layout(\n    title_text=\"<span style='font-size:30px; font-family:Serif'>Mortality rate - Some European countries<\/span>\",\n    xaxis_title='Total deaths per 1m population',\n)","2f85eb45":"countries= ['Spain', 'France', 'Germany', 'Turkey', 'UK', 'Italy']\neurope_cases = covid_cum[covid_cum['country'].isin(countries)].sort_values('total_cases_per_1m_population')\n\nfig = go.Figure(go.Bar(\n    x=europe_cases['total_cases_per_1m_population'],\n    y=europe_cases['country'],\n    orientation='h',\n    marker={'color': europe_cases['total_cases_per_1m_population'], 'colorscale': 'tealgrn'},\n) ,layout=go.Layout(height=400, width=700))\n# Customize aspect\nfig.update_traces(\n    # marker_color='rgb(158,202,225)', \n    marker_line_color='rgb(8,48,107)',\n    marker_line_width=1.5, \n    opacity=0.6,\n)\nfig.update_layout(\n    title_text=\"<span style='font-size:30px; font-family:Serif'>Mortality rate - Some European countries<\/span>\",\n    xaxis_title='Total cases per 1m population',\n)","c3311dca":"<a id='5'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">5. Covid World Dataset<\/p>","710ea3f1":"<a id='1'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">1. Data cleaning \u2699\ufe0f<\/p>\n\nWe are going to fix some of the missings so the EDA becomes easier and clear","0971b34a":"<a id='2.1'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:120%; text-align:center; border-radius: 15px 50px;\">2.1 Distribution of vaccinations by country<\/p>\n\nWe have to fill the missing with forward filling method from pandas.\n\nAs ***people_fully_vaccinated*** has many missings and the values are only for low number of countries, we are note going to plot.","d299a081":"<a id='2.2'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:120%; text-align:center; border-radius: 15px 50px;\">2.2 Top vaccines Laboratories<\/p>","822982a0":"<a id='2.3'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:120%; text-align:center; border-radius: 15px 50px;\">2.3 Distribution of vaccinatios by country<\/p>","2420e344":"As we can see, not all of the ISO_CODEs has all the dates. So we are going to create a row for those dates with missing values.","3f0533f1":"### Columns to drop\n\nAs we can see, 'daily_vaccinations_raw' has a cleaned variable 'daily_vaccinations' with less missing values, so we can now drop 'daily_vaccinations_raw'","62e3017a":"We can fix this easyly with imputation ('GBR') ","27b6d12c":"### Lets transform date column","f74bf8fd":"Now re-order the dataframe based on '**date**' so we can plot correctly later","ac52b4f7":"In this case, I think that percent of people vaccinated per hundred is the most representative value so I will only plot this values.","bb8bff6d":"<a id='3'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">3. Data visualization \ud83d\udcca by Continent<\/p>","565d8a3f":"# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:250%; text-align:center; border-radius: 15px 50px;\">\ud83d\udc89 COVID-19 \ud83e\udda0\ud83e\uddec World Vaccination Progress \ud83d\udc89<\/p>\n\nThe data contains the following information:  \n\n* **Country** - this is the country for which the vaccination information is provided;     \n* **Country ISO Code** - ISO code for the country;   \n* **Date**- date for the data entry; for some of the dates we have only the daily vaccinations, for others, only the (cumulative) total;   \n* **Total number of vaccin ations** - this is the absolute number of total immunizations in the country;  \n* **Total number of people vaccinated** - a person, depending on the immunization scheme, will receive one or more (typically 2) vaccines; at a certain moment, the number of vaccination might be larger than the number of people;  \n* **Total number of people fully vaccinated** - this is the number of people that received the entire set of immunization according to the immunization scheme (typically 2); at a certain moment in time, there might be a certain number of people that received one vaccine and another number (smaller) of people that received all vaccines in the scheme;  \n* **Daily vaccinations (raw)** - for a certain data entry, the number of vaccination for that date\/country;  \n* **Daily vaccinations** - for a certain data entry, the number of vaccination for that date\/country;  \n* **Total vaccinations per hundred** - ratio (in percent) between vaccination number and total population up to the date in the country;  \n* **Total number of people vaccinated per hundred** - ratio (in percent) between population immunized and total population up to the date in the country;  \n* **Total number of people fully vaccinated per hundred** - ratio (in percent) between population fully immunized and total population up to the date in the country;   \n* **Number of vaccinations per day** - number of daily vaccination for that day and country;   \n* **Daily vaccinations per million** -  ratio (in ppm) between vaccination number and total population for the current date in the country;    \n* **Vaccines used in the country** - total number of vaccines used in the country (up to date);    \n* **Source name** - source of the information (national authority, international organization, local organization etc.);   \n* **Source website** - website of the source of information;","63667506":"<a id='2'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">2. Data visualization \ud83d\udcca by Countries<\/p>\n\nSpecial thanks to Sharlto (https:\/\/www.kaggle.com\/dwin183287\/covid-19-world-vaccination) for this amazing resume chart.","15b5d245":"<a id='4.1'><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:140%; text-align:center; border-radius: 15px 50px;\">4.1 Confirmed cases evolution by continent<\/p>","845a1ef0":"<a id='4'><\/a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">4. World Summary<\/p>","899815e9":"<a id='3.1'><\/a>\n## <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:140%; text-align:center; border-radius: 15px 50px;\">3.1 World Map: vaccinations distribution<\/p>"}}