{"cell_type":{"9f8f6997":"code","423a5ba4":"code","8fa465fd":"code","3c328d98":"code","448d3e68":"code","f9445178":"code","0513e4e7":"code","c52ef3d6":"code","6253cd0b":"code","013c164c":"code","3abc0b15":"code","208e547e":"code","9102670a":"code","68daeaf2":"code","8be6ef74":"code","107e202a":"code","61d537fc":"code","a75de329":"code","da83ec35":"code","b0e0a876":"code","ecaf55d3":"code","2eacc78b":"code","849f240e":"code","9344ffce":"code","13d4826a":"code","13d329f8":"code","e95d925f":"code","cb18b9c8":"code","73ece687":"code","0421c0ff":"code","f454c1d6":"code","271f0ad3":"code","0997f2b8":"code","2c0544bb":"code","25396446":"code","6eb1b0b6":"code","2f334119":"code","b7481391":"code","ce67fbb1":"code","906ecaaf":"code","362c70f6":"code","3dd35973":"code","411a7ffa":"code","01abb1e7":"code","6d5d10b6":"code","20d9f843":"code","b55c15e8":"code","fef50b82":"code","e1245088":"code","3ca2e31c":"code","65414bda":"code","2e5083dc":"code","015ffe9f":"code","e1d999be":"code","59a06098":"code","1ea74695":"code","67d30ad7":"code","eb7a3bf0":"code","f8387661":"code","f7134eb4":"code","996a7a1f":"code","098f02e6":"markdown","e7998ea5":"markdown","eb9ab172":"markdown","46c4bce1":"markdown","b48e78ac":"markdown","f624c723":"markdown","44854fe9":"markdown","735ec42c":"markdown","9a347aab":"markdown","b2e5836b":"markdown","79cbd47f":"markdown","41e5d934":"markdown","6a49cc53":"markdown","ab8a076d":"markdown","a2f5377b":"markdown","34523a02":"markdown","52e34473":"markdown","e157bb64":"markdown","0b2270f6":"markdown","a12d9ca3":"markdown","3def8efd":"markdown","b4973b4f":"markdown","b9ea9861":"markdown","c6d6d3d9":"markdown","c9f7a5c6":"markdown","9b18b324":"markdown","6b2ce982":"markdown","6c3874e9":"markdown","40cea604":"markdown","bb0b24fb":"markdown","06f0225e":"markdown","2aac2feb":"markdown","998e2c91":"markdown","0cd15b2e":"markdown","102d3ca1":"markdown","edad31ac":"markdown","1a92c241":"markdown","b81e1451":"markdown","5f3f0584":"markdown","ae24ff9b":"markdown","0f0f2709":"markdown","d46a59d8":"markdown","491ba9cd":"markdown","062d93dc":"markdown","bf787b77":"markdown","1d1b88c4":"markdown","fc34844a":"markdown","360a0625":"markdown","114d59a7":"markdown"},"source":{"9f8f6997":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport warnings\nfrom datetime import datetime\nimport calendar\nfrom math import sin, cos, sqrt, atan2, radians\nfrom folium import FeatureGroup, LayerControl, Map, Marker\nfrom folium.plugins import HeatMap\nimport matplotlib.dates as mdates\nimport matplotlib as mpl\nfrom datetime import timedelta\nimport datetime as dt\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_colwidth', -1)\nplt.style.use('fivethirtyeight')\nimport folium\nfrom sklearn.cluster import KMeans\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import Imputer\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor\nimport pickle","423a5ba4":"train=pd.read_csv(\"..\/input\/train.csv\")\ntest=pd.read_csv(\"..\/input\/test.csv\")\ntest.shape","8fa465fd":"train['pickup_datetime']=pd.to_datetime(train['pickup_datetime'],format='%Y-%m-%d %H:%M:%S')\ntrain['dropoff_datetime']=pd.to_datetime(train['dropoff_datetime'],format='%Y-%m-%d %H:%M:%S')\ntrain.head()","3c328d98":"train[pd.isnull(train)].sum()","448d3e68":"print(\"Min pickup time:\",min(train['pickup_datetime']))\nprint(\"Max pickup time:\",max(train['pickup_datetime']))","f9445178":"train['pickup_date']= train['pickup_datetime'].dt.date\ntrain['pickup_day']=train['pickup_datetime'].apply(lambda x:x.day)\ntrain['pickup_hour']=train['pickup_datetime'].apply(lambda x:x.hour)\ntrain['pickup_day_of_week']=train['pickup_datetime'].apply(lambda x:calendar.day_name[x.weekday()])\ntrain['dropoff_date']= train['dropoff_datetime'].dt.date\ntrain['dropoff_day']=train['dropoff_datetime'].apply(lambda x:x.day)\ntrain['dropoff_hour']=train['dropoff_datetime'].apply(lambda x:x.hour)\ntrain['dropoff_day_of_week']=train['dropoff_datetime'].apply(lambda x:calendar.day_name[x.weekday()])","0513e4e7":"train['pickup_latitude_round3']=train['pickup_latitude'].apply(lambda x:round(x,3))\ntrain['pickup_longitude_round3']=train['pickup_longitude'].apply(lambda x:round(x,3))\ntrain['dropoff_latitude_round3']=train['dropoff_latitude'].apply(lambda x:round(x,3))\ntrain['dropoff_longitude_round3']=train['dropoff_longitude'].apply(lambda x:round(x,3))\n\ntrain.head()\n","c52ef3d6":"def calculateDistance(row):\n    R=6373.0 # approximate radius of earth in km\n    pickup_lat=radians(row['pickup_latitude'])\n    pickup_lon=radians(row['pickup_longitude'])\n    dropoff_lat=radians(row['dropoff_latitude'])\n    dropoff_lon=radians(row['dropoff_longitude'])\n    dlon = dropoff_lon - pickup_lon\n    dlat = dropoff_lat - pickup_lat\n    a = sin(dlat \/ 2)**2 + cos(pickup_lat) * cos(dropoff_lat) * sin(dlon \/ 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    distance = R * c\n    return distance\n    ","6253cd0b":"train['trip_distance']=train.apply(lambda row:calculateDistance(row),axis=1)\ntrain.head()","013c164c":"train['trip_duration_in_hour']=train['trip_duration'].apply(lambda x:x\/3600)\ntrain.head()","3abc0b15":"plt.figure(figsize=(8,5))\nsns.distplot(train['trip_duration_in_hour']).set_title(\"Distribution of Trip Duration\")\nplt.xlabel(\"Trip Duration (in hour)\")","208e547e":"outlier_trip_duration=train.loc[train['trip_duration_in_hour']>24]\noutlier_trip_duration","9102670a":"outlier_trip_duration=train.loc[train['trip_duration_in_hour']>24]\noutlier_trip_duration","68daeaf2":"plt.figure(figsize=(8,5))\nsns.distplot(np.log(train['trip_duration'].values)).set_title(\"Distribution of Trip Duration\")\nplt.title(\"Distribution of trip duration (sec) in Log Scale\")","8be6ef74":"pickup=train.groupby(['pickup_latitude_round3','pickup_longitude_round3'])['id'].count().reset_index().rename(columns={'id':'Num_Trips'})","107e202a":"\n\npickup_map = folium.Map(location = [40.730610,-73.935242],zoom_start = 10,)\n#print(pickup.shape)\n### For each pickup point add a circlemarker\n'''\nfor index, row in pickup.iterrows():\n    \n    folium.CircleMarker([row['pickup_latitude_round3'], row['pickup_longitude_round3']],\n                        radius=3,\n                        \n                        fill_color=\"#3db7e4\", \n                        fill_opacity=0.9\n                       ).add_to(pickup_map)\n    count=count + 1\n\n\n'''\n\nhm_wide = HeatMap( list(zip(pickup.pickup_latitude_round3.values, pickup.pickup_longitude_round3.values, pickup.Num_Trips.values)),\n                     min_opacity=0.2,\n                     radius=5, blur=15,\n                     max_zoom=1 \n                 )\npickup_map.add_child(hm_wide)\n\npickup_map","61d537fc":"city_long_border = (-74.03, -73.75)\ncity_lat_border = (40.63, 40.85)\nfig, ax = plt.subplots(ncols=1, sharex=True, sharey=True)\nax.scatter(train['pickup_longitude'], train['pickup_latitude'],\n              color='blue', label='train', alpha=0.1)\n\nfig.suptitle('Lat Lng of Pickups in Train Data as Scatter Plot')\n\nax.set_ylabel('latitude')\nax.set_xlabel('longitude')\nplt.ylim(city_lat_border)\nplt.xlim(city_long_border)","a75de329":"drop=train.groupby(['dropoff_latitude_round3','dropoff_longitude_round3'])['id'].count().reset_index().rename(columns={'id':'Num_Trips'})","da83ec35":"drop_map = folium.Map(location = [40.730610,-73.935242],zoom_start = 10,)\n#print(pickup.shape)\n### For each pickup point add a circlemarker\n'''\nfor index, row in drop.iterrows():\n    \n    folium.CircleMarker([row['dropoff_latitude_round3'], row['dropoff_longitude_round3']],\n                        radius=3,\n                        \n                        color=\"#008000\", \n                        fill_opacity=0.9\n                       ).add_to(drop_map)\n    count=count + 1\n\n'''\nhm_wide = HeatMap( list(zip(drop.dropoff_latitude_round3.values, drop.dropoff_longitude_round3.values, drop.Num_Trips.values)),\n                     min_opacity=0.2,\n                     radius=5, blur=15,\n                     max_zoom=1 \n                 )\ndrop_map.add_child(hm_wide)\n\n\n\n\ndrop_map","b0e0a876":"pickup=train.groupby(['pickup_latitude_round3','pickup_longitude_round3'])['trip_duration'].mean().reset_index().rename(columns={'trip_duration':'Avg_Trip_duration'})","ecaf55d3":"pickup_map = folium.Map(location = [40.730610,-73.935242],zoom_start = 10,)\n\n\nhm_wide = HeatMap( list(zip(pickup.pickup_latitude_round3.values, pickup.pickup_longitude_round3.values, pickup.Avg_Trip_duration.values)),\n                     min_opacity=0.2,\n                     radius=7, blur=15,\n                     max_zoom=1 \n                 )\npickup_map.add_child(hm_wide)\npickup_map","2eacc78b":"plt.figure(figsize=(8,5))\nsns.countplot(x=train['pickup_hour']).set_title(\"Pickup Hours Distribution\")","849f240e":"plt.figure(figsize=(8,5))\nsns.countplot(x=train['dropoff_hour']).set_title(\"Dropoff Hours Distribution\")","9344ffce":"plt.figure(figsize=(8,5))\nplt.plot(train.groupby('pickup_date').count()[['id']], 'o-',label='train')\n\n\nplt.title(\"Distribution of Pickups over time\")","13d4826a":"plt.figure(figsize=(8,5))\nsns.kdeplot(np.log(train['trip_distance'].values)).set_title(\"Trip Distance Distribution\")\nplt.xlabel(\"Trip Distance (log)\")","13d329f8":"plt.scatter(np.log(train['trip_distance'].values), np.log(train['trip_duration'].values),\n              color='blue', label='train')\nplt.title(\"Distribution of Trip Distance vs Trip Duration\")\nplt.xlabel(\"Trip Distance (log scale)\")\nplt.ylabel(\"Trip Duration (log scale)\")","e95d925f":"avg_duration_hour=train.groupby(['pickup_hour'])['trip_duration'].mean().reset_index().rename(columns={'trip_duration':'avg_trip_duration'})\nplt.figure(figsize=(8,5))\nplt.plot(train.groupby(['pickup_hour'])['trip_duration'].mean(),'o-')","cb18b9c8":"plt.figure(figsize=(8,5))\nsns.countplot(train['pickup_day_of_week'],order=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday', 'Sunday'])","73ece687":"avg_duration_day=train.groupby(['pickup_day_of_week'])['trip_duration'].mean().reset_index().rename(columns={'trip_duration':'avg_trip_duration'})","0421c0ff":"plt.figure(figsize=(8,5))\nsns.barplot(x='pickup_day_of_week',y='avg_trip_duration',data=avg_duration_day,order=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday', 'Sunday']).set_title(\"Avg Trip Duration vs Pickup Days of Week\")","f454c1d6":"def calculateBearing(lat1,lng1,lat2,lng2):\n    R = 6371 \n    lng_delta_rad = np.radians(lng2 - lng1)\n    lat1, lng1, lat2, lng2 = map(np.radians, (lat1, lng1, lat2, lng2))\n    y = np.sin(lng_delta_rad) * np.cos(lat2)\n    x = np.cos(lat1) * np.sin(lat2) - np.sin(lat1) * np.cos(lat2) * np.cos(lng_delta_rad)\n    return np.degrees(np.arctan2(y, x))","271f0ad3":"train['bearing']=train.apply(lambda row:calculateBearing(row['pickup_latitude_round3'],row['pickup_longitude_round3'],row['dropoff_latitude_round3'],row['dropoff_longitude_round3']),axis=1)","0997f2b8":"sns.kdeplot(train['bearing'])","2c0544bb":"plt.figure(figsize=(8,5))\nplt.scatter(train['bearing'].values,y=np.log(train['trip_duration'].values))\nplt.xlabel(\"Bearing\")\nplt.ylabel(\"Trip Duration (log scale)\")","25396446":"train['store_and_fwd_flag'].value_counts()","6eb1b0b6":"plt.figure(figsize=(8,5))\nsns.kdeplot(np.log(train.loc[train['store_and_fwd_flag']=='Y','trip_duration'].values),label= 'Store and Fwd =Yes')\nsns.kdeplot(np.log(train.loc[train['store_and_fwd_flag']=='N','trip_duration'].values),label= 'Store and Fwd =No')\n   \nplt.title(\"Distribution of  Store and Fwd Flag vs Trip Duration(log scale)\")\nplt.xlabel('Trip Duration (log scale)')\nplt.ylabel('Density')","2f334119":"coords = np.vstack((train[['pickup_latitude', 'pickup_longitude']].values,\n                    train[['dropoff_latitude', 'dropoff_longitude']].values,\n                    test[['pickup_latitude', 'pickup_longitude']].values,\n                    test[['dropoff_latitude', 'dropoff_longitude']].values))\nkmeans = KMeans(n_clusters=8, random_state=0).fit(coords)\ntrain.loc[:, 'pickup_neighbourhood'] = kmeans.predict(train[['pickup_latitude', 'pickup_longitude']])\ntrain.loc[:, 'dropoff_neighbourhood'] = kmeans.predict(train[['dropoff_latitude', 'dropoff_longitude']])\ncity_long_border = (-74.03, -73.75)\ncity_lat_border = (40.63, 40.85)\nfig, ax = plt.subplots(ncols=1, sharex=True, sharey=True)\nax.scatter(train['pickup_longitude'], train['pickup_latitude'],\n              c=train['pickup_neighbourhood'], label='train', alpha=0.1)\n\nfig.suptitle('Pickup Neighbourhood')\n\nax.set_ylabel('latitude')\nax.set_xlabel('longitude')\nplt.ylim(city_lat_border)\nplt.xlim(city_long_border)","b7481391":"plt.figure(figsize=(8,5))\nsns.countplot(train['pickup_neighbourhood']).set_title(\"Distribution of Number of Pickups across Neighbourhoods\")","ce67fbb1":"avg_duration_neighbourhood=train.groupby(['pickup_neighbourhood'])['trip_duration'].mean().reset_index().rename(columns={'trip_duration':'avg_trip_duration'})\nplt.figure(figsize=(8,5))\nsns.barplot(x='pickup_neighbourhood',y='avg_trip_duration',data=avg_duration_neighbourhood).set_title(\"Avg Trip Duration vs Neighbourhood\")","906ecaaf":"train['avg_speed_kph']=train['trip_distance']\/train['trip_duration_in_hour']\nplt.figure(figsize=(8,5))\nsns.kdeplot(train['avg_speed_kph'].values).set_title(\"Distribution of Average Speed (in kph)\")","362c70f6":"print(\"Average speed is\",np.mean(train['avg_speed_kph']),\"kph\") #The average speed is 14 kmph","3dd35973":"avg_speed_per_day=train.groupby(['pickup_day_of_week'])['avg_speed_kph'].mean().reset_index()\nplt.figure(figsize=(8,5))\nsns.barplot(x='pickup_day_of_week',y='avg_speed_kph',data=avg_speed_per_day,order=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday', 'Sunday']).set_title(\"Avg Speed (kph) vs Pickup Days of Week\")","411a7ffa":"test['pickup_datetime']=pd.to_datetime(test['pickup_datetime'],format='%Y-%m-%d %H:%M:%S')\n#test['dropoff_datetime']=pd.to_datetime(test['dropoff_datetime'],format='%Y-%m-%d %H:%M:%S')\ntest['pickup_date']= test['pickup_datetime'].dt.date\ntest['pickup_day']=test['pickup_datetime'].apply(lambda x:x.day)\ntest['pickup_hour']=test['pickup_datetime'].apply(lambda x:x.hour)\ntest['pickup_day_of_week']=test['pickup_datetime'].apply(lambda x:calendar.day_name[x.weekday()])\n#test['dropoff_date']= test['dropoff_datetime'].dt.date\n#test['dropoff_day']=test['dropoff_datetime'].apply(lambda x:x.day)\n#test['dropoff_hour']=test['dropoff_datetime'].apply(lambda x:x.hour)\n#test['dropoff_day_of_week']=test['dropoff_datetime'].apply(lambda x:calendar.day_name[x.weekday()])\ntest['pickup_latitude_round3']=test['pickup_latitude'].apply(lambda x:round(x,3))\ntest['pickup_longitude_round3']=test['pickup_longitude'].apply(lambda x:round(x,3))\ntest['dropoff_latitude_round3']=test['dropoff_latitude'].apply(lambda x:round(x,3))\ntest['dropoff_longitude_round3']=test['dropoff_longitude'].apply(lambda x:round(x,3))\ntest['trip_distance']=test.apply(lambda row:calculateDistance(row),axis=1)\n#test['trip_duration_in_hour']=test['trip_duration'].apply(lambda x:x\/3600)\ntest['bearing']=test.apply(lambda row:calculateBearing(row['pickup_latitude_round3'],row['pickup_longitude_round3'],row['dropoff_latitude_round3'],row['dropoff_longitude_round3']),axis=1)\ntest.loc[:, 'pickup_neighbourhood'] = kmeans.predict(test[['pickup_latitude', 'pickup_longitude']])\ntest.loc[:, 'dropoff_neighbourhood'] = kmeans.predict(test[['dropoff_latitude', 'dropoff_longitude']])","01abb1e7":"drop_cols=['avg_speed_kph','trip_duration_in_hour','dropoff_date','dropoff_day','dropoff_hour','dropoff_day_of_week','dropoff_datetime','pickup_latitude','pickup_longitude','dropoff_latitude','dropoff_longitude']\ntraining=train.drop(drop_cols,axis=1)\ntesting=test.drop(['pickup_latitude','pickup_longitude','dropoff_latitude','dropoff_longitude'],axis=1)\n","6d5d10b6":"training['log_trip_duration']=training['trip_duration'].apply(lambda x:np.log(x))\ntraining.drop(['trip_duration'],axis=1,inplace=True)","20d9f843":"print(\"Training Data Shape \",training.shape)\nprint(\"Testing Data Shape \",testing.shape)","b55c15e8":"def encodeDays(day_of_week):\n    day_dict={'Sunday':0,'Monday':1,'Tuesday':2,'Wednesday':3,'Thursday':4,'Friday':5,'Saturday':6}\n    return day_dict[day_of_week]","fef50b82":"training['pickup_day_of_week']=training['pickup_day_of_week'].apply(lambda x:encodeDays(x))\ntesting['pickup_day_of_week']=testing['pickup_day_of_week'].apply(lambda x:encodeDays(x))\n","e1245088":"training.to_csv(\"input_training.csv\",index=False)\ntesting.to_csv(\"input_testing.csv\",index=False)\ndel training\ndel testing\ndel train\ndel test","3ca2e31c":"def LabelEncoding(train_df,test_df,max_levels=2):\n    for col in train_df:\n        if train_df[col].dtype == 'object':\n            if len(list(train_df[col].unique())) <= max_levels:\n                le = preprocessing.LabelEncoder()\n                le.fit(train_df[col])\n                train_df[col]=le.transform(train_df[col])\n                test_df[col]=le.transform(test_df[col])\n    return [train_df,test_df]\n                \n\ndef readInputAndEncode(input_path,train_file,test_file,target_column):\n    training=pd.read_csv(input_path+train_file)\n    testing=pd.read_csv(input_path+test_file)\n   \n    training,testing=LabelEncoding(training,testing)\n    \n    #print(\"Training Data Shape after Encoding \",training.shape)\n    #print(\"Testing Data Shape after Encoding \",testing.shape)\n    #Check if all train columns are there in test data. If not add the column to test data and replace it with zero\n    train_cols=training.columns.tolist()\n    test_cols=testing.columns.tolist()\n    col_in_train_not_test=set(train_cols)-set(test_cols)\n    for col in col_in_train_not_test:\n        if col!=target_column:\n            testing[col]=0\n    col_in_test_not_train=set(test_cols)-set(train_cols)\n    for col in col_in_test_not_train:\n        training[col]=0\n    print(\"Training Data Shape after Processing \",training.shape)\n    print(\"Testing Data Shape after Processing \",testing.shape)\n    return [training,testing]","65414bda":"train,test=readInputAndEncode(\"\",'input_training.csv','input_testing.csv','log_trip_duration')\ntrain.drop(['pickup_date'],axis=1,inplace=True)\ntest.drop(['pickup_date'],axis=1,inplace=True)\ntrain.drop(['pickup_datetime'],axis=1,inplace=True)\ntest.drop(['pickup_datetime'],axis=1,inplace=True)\ntest_id=test['id']\ntrain.drop(['id'],axis=1,inplace=True)\ntest.drop(['id'],axis=1,inplace=True)","2e5083dc":"def GetFeaturesAndSplit(train,test,target,imputing_strategy='median',split=0.25,imputation=True):\n    labels=np.array(train[target])\n    training=train.drop(target, axis = 1)\n    training = np.array(training)\n    testing=np.array(test)\n    if imputation==True:\n        imputer=Imputer(strategy=imputing_strategy,missing_values=np.nan)\n        imputer.fit(training)\n        training=imputer.transform(training)\n        testing=imputer.transform(testing)\n    train_features, validation_features, train_labels, validation_labels = train_test_split(training, labels, test_size = split, random_state = 42)\n    return [train_features,validation_features,train_labels,validation_labels,testing]","015ffe9f":"train_features,validation_features,train_labels,validation_labels,testing=GetFeaturesAndSplit(train,test,'log_trip_duration',imputation=False)","e1d999be":"lm=linear_model.LinearRegression()\nlm.fit(train_features,train_labels)","59a06098":"valid_pred=lm.predict(validation_features)","1ea74695":"rmse=mean_squared_error(validation_labels,valid_pred)\nprint(\"Root Mean Squared Error for Linear Regression(log scale) \",rmse)","67d30ad7":"test_pred=lm.predict(testing)\nsubmit=pd.DataFrame()\nsubmit['id']=test_id\nsubmit['trip_duration']=np.exp(test_pred)\nsubmit.to_csv(\"submission_linear_regression_baseline.csv\",index=False) #0.64221 on Leader board\ndel submit","eb7a3bf0":"rf = RandomForestRegressor(n_estimators = 100, random_state = 42)","f8387661":"rf.fit(train_features,train_labels)","f7134eb4":"valid_pred_rf=rf.predict(validation_features)\nrmse=mean_squared_error(validation_labels,valid_pred_rf)\nprint(\"Root Mean Squared Error for Random Forest\",rmse)\n","996a7a1f":"test_pred=rf.predict(testing)\nsubmit=pd.DataFrame()\nsubmit['id']=test_id\nsubmit['trip_duration']=np.exp(test_pred)\nsubmit.to_csv(\"submission_random_forest_baseline.csv\",index=False)","098f02e6":"### Distribution of Pickups across Days\n","e7998ea5":"### Is the trip duration higher at different hours?","eb9ab172":"### Round lat lng to 3 decimal places","46c4bce1":"There are trip duration greater than 24 hours. We will have to investigate this?","b48e78ac":" The average trip duration, when trip originates from JFK is higher. If we zoom in, we can see that after the Manhattan, The pickups from JFK tend to have higher trip duration","f624c723":"Trip duration increases between 10 to 15 hours. ","44854fe9":"### Convert to appropriate datatype \n\nconvert pickup dateime and dropoff datetime into date-time object","735ec42c":"### Distribution of Store and FWD Flag","9a347aab":"Dropoff Heatmap is similar to pickup","b2e5836b":"### Number of pickups in each neighbourhood","79cbd47f":"There is a drop seen in the number of pick ups in end the January 2016","41e5d934":"### Building Models","6a49cc53":"### create new day,month, hour info from Pickup time","ab8a076d":"### Trip Duration vs Trip Distance","a2f5377b":"### What is the time period of the dataset?","34523a02":"The data has 6 months of taxi trip data, from Jan to Jun 2016","52e34473":"Log transformation of the trip duration results in a normal distribution. Most trips are between 54 sec (exp(4)) and 2980 sec (exp(8)) .\nThis indicates that most trip are withing one hour. But, there are trips which are less than a minute and need to be explored in detail. There are trips lasting for 100 hours which is weird as the taxi rides are within New York","e157bb64":"The outliers in trip duration are all around bearing -50 degrees","0b2270f6":"### Avg Trip Duration over Days of week","a12d9ca3":"We have to predict trip_duration. We will convert this to log scale and predict","3def8efd":"The average speed is higher on sunday and monday. ","b4973b4f":"The highest average speed is on Thursday","b9ea9861":"### What is the distribution of Trip distance","c6d6d3d9":"### Create a caluclated field Bearing \n\nBearing measures the direction of travel\nThe formula is:\n    \u03b8 = atan2( sin \u0394\u03bb \u22c5 cos \u03c62 , cos \u03c61 \u22c5 sin \u03c62 \u2212 sin \u03c61 \u22c5 cos \u03c62 \u22c5 cos \u0394\u03bb )\n    \u03bb is the longitude","c9f7a5c6":"### Which hours are pickup and dropoff higher?","9b18b324":"### heatmap of trip duration, when pickup originates from a point","6b2ce982":"### Distribution of Average speed","6c3874e9":"From the training data we need to drop \"dropoff datetime features\". We also only keep lat lng rounded to 3 decimal places\n","40cea604":"### Distribution of Bearing","bb0b24fb":"### Bearing vs Trip Duration","06f0225e":"Neighbourhood 2 has very high average Trip duration, though Neighbourhood 0 has majority of pickups","2aac2feb":"Distribution of dropoff hour very similar to pickup hour","998e2c91":"### Exploratory Analysis\n","0cd15b2e":"###  Are there any missing values in the data?","102d3ca1":"### Pickups over the entire time period","edad31ac":"There are trip duration greater than 24 hours. We will have to investigate this\n","1a92c241":"There are no missing values","b81e1451":"### Feature Engineering on Test Data","5f3f0584":"###### This graph clearly shows heavy density of pickups near JFK","ae24ff9b":"The number of pickups are very low on Monday.From Tuesday to Friday the number of pickups keep increasing","0f0f2709":"The pickups are much lower in the early mornings. Most pickips are around highest between 6 to 8 pm","d46a59d8":"There are 4 records which have very high trip duration, but the distance travelled is very low.\nThese are outliers. But is there any particular location to which these trips begin or end?\nTrip duration is also skewed, so let us take log transformation.\n\nWe will not remove these from the analysis, because they might be a part of test data as well\n","491ba9cd":"#### Apply Linear Regression","062d93dc":"### Group Locations into cluster\n\nThis will help creating neighbourhoods. And pickups from certain neightbourhoods may have a longer trip duration","bf787b77":"### Based on Latitude and Longitude get the distance of the trip in km\nThis uses Haversine Distance","1d1b88c4":"####  Heatmap of common locations from where pickup and dropoff occurs","fc34844a":"#### Apply Random Forest Regressor","360a0625":"Let us also encode day of week as numbers","114d59a7":"### Average Speed across days of week - this is indication of traffic speed.\n"}}