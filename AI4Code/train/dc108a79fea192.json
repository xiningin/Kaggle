{"cell_type":{"49fbb4ae":"code","ae9ab61d":"code","933a9655":"code","0808a107":"code","e6f6c39f":"code","bb3b9ef7":"code","f5364523":"code","bff54a4c":"code","a4a33e91":"code","74850cd2":"code","6c735115":"markdown","0b645dab":"markdown","3c37b9b8":"markdown","4ac928ca":"markdown","10eab580":"markdown","164e9110":"markdown","94c13c2b":"markdown","9d302801":"markdown","6128f530":"markdown","b5d962bc":"markdown","4764ecd2":"markdown"},"source":{"49fbb4ae":"import numpy as np\nimport pandas as pd ","ae9ab61d":"data = np.random.rand(25)*10\ndata","933a9655":"result1 = pd.cut(data,5)\nresult1","0808a107":"print(result1.value_counts())","e6f6c39f":"result1 = pd.cut(data,5,labels=np.arange(0, 5, 1))\nresult1","bb3b9ef7":"result1 = pd.cut(data,5,labels=np.arange(5, 0, -1))\nresult1","f5364523":"result2 = pd.qcut(data,5)\nresult2","bff54a4c":"print(result2.value_counts())","a4a33e91":"result2 = pd.qcut(data,5,labels=np.arange(0, 5, 1))\nresult2","74850cd2":"result2 = pd.qcut(data,5,labels=np.arange(5, 0, -1))\nresult2","6c735115":"## cut reverse labeling","0b645dab":"# 3.qcut ( equal size)","3c37b9b8":"## qcut reverse labeling","4ac928ca":"## cut labeling","10eab580":"Bin values into discrete intervals.\n\nUse cut when you need to segment and sort data values into bins. This function is also useful for going from a continuous variable to a categorical variable. For example, cut could convert ages to groups of age ranges. Supports binning into an equal number of bins, or a pre-specified array of bins.","164e9110":"# 2.cut ( equal length)","94c13c2b":"# 1.make data","9d302801":"## cut data by lenght equally","6128f530":"## qcut labeling","b5d962bc":"## cut data by count equally","4764ecd2":"Quantile-based discretization function.\n\nDiscretize variable into equal-sized buckets based on rank or based on sample quantiles. For example 1000 values for 10 quantiles would produce a Categorical object indicating quantile membership for each data point."}}