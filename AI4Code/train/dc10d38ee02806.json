{"cell_type":{"4d68986e":"code","b5106297":"code","8b7faecc":"code","30da078f":"code","e7b82931":"code","2270acec":"code","c454497f":"code","58f9157d":"code","628184a7":"code","bb1b0e45":"code","612c6a98":"code","f26e17cf":"code","58513abf":"code","ab55cd32":"code","af409103":"code","7ad4fa96":"code","4ec8780e":"code","75e47563":"code","67102083":"code","bd5147df":"code","8c3193d7":"code","4b66fc66":"code","3dbccda3":"code","94c8a77c":"code","b498feb4":"code","e88ef7f3":"code","59e814d4":"code","021f5fbd":"code","46fa2ea4":"code","bc502bf3":"code","6f175220":"code","e7526aea":"code","ce7bb195":"code","0ecb0aa1":"code","d19e9a3e":"code","a097a39a":"code","77a61fa0":"code","7ab502b5":"code","2bb91c13":"code","2ee924b4":"code","740ba2cc":"code","b340d6e1":"code","e8410c5d":"code","a69ab3eb":"code","8d0c45d7":"code","80449c29":"code","c8b1a870":"code","cafa9711":"markdown","53a4b121":"markdown","276fab1a":"markdown","0749ea5b":"markdown","17e498ec":"markdown","29216c32":"markdown","155df4d1":"markdown","41bf2c16":"markdown","668149e9":"markdown","c12ff651":"markdown","3c723c22":"markdown","097c8f79":"markdown","44d92738":"markdown","f77d82f4":"markdown","d0472613":"markdown","f4bd312c":"markdown","20060347":"markdown","55004a97":"markdown","838f7c65":"markdown","371377fe":"markdown","7427e4b6":"markdown","e6d5d603":"markdown","dbf89eee":"markdown","d142ae65":"markdown","6452e1af":"markdown","53f54bfe":"markdown","133255ad":"markdown","883cb6d6":"markdown","16f66e9d":"markdown","7c97f791":"markdown","cb4af85c":"markdown","50faa734":"markdown","a63cbd8a":"markdown"},"source":{"4d68986e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b5106297":"df=pd.read_csv(\"..\/input\/zomato.csv\",encoding = \"ISO-8859-1\")\ncountry = pd.read_excel('..\/input\/Country-Code.xlsx')\ndf = pd.merge(df, country, on='Country Code')\ndf.head()","8b7faecc":"df.shape","30da078f":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pandas import DataFrame\n","e7b82931":"df.dtypes","2270acec":"df.head()","c454497f":"df.describe()","58f9157d":"df1=df.groupby([\"Cuisines\"])","628184a7":"df1.mean()\n","bb1b0e45":"df2=df.groupby([\"City\"])\ndf2.mean()","612c6a98":"df3=df[\"City\"].value_counts()\ndf3\n\n\n\n","f26e17cf":"data_country = df.groupby(['Country'], as_index=False).count()[['Country', 'Restaurant ID']]\ndata_country.head()\ndata_country.columns = ['Country', 'No of Restaurant']\nplt.figure(figsize=(20,30))\nplt.bar(data_country['Country'], data_country['No of Restaurant'],color=\"brown\")\nplt.xlabel('Country')\nplt.ylabel('No of Restaurant')\nplt.title('No of Restaurant')\nplt.xticks(rotation = 60)","58513abf":"data_City = df[df['Country'] =='India']\nTotal_city =data_City['City'].value_counts()\nTotal_city.plot.bar(figsize=(20,10))\nplt.title('Restaurants by City')                                             \nplt.xlabel('City')\nplt.ylabel('No of Restaurants')\nplt.show()","ab55cd32":"Cuisine_data =df.groupby(['Cuisines'], as_index=False)['Restaurant ID'].count()\nCuisine_data.columns = ['Cuisines', 'Number of Resturants']\nTop10= (Cuisine_data.sort_values(['Number of Resturants'],ascending=False)).head(10)\nplt.figure(figsize=(20,30))\nsns.barplot(Top10['Cuisines'], Top10['Number of Resturants'])\nplt.xlabel('Cuisines', fontsize=20)\nplt.ylabel('Number of Resturants', fontsize=20)\nplt.title('Top 10 Cuisines on Zomato', fontsize=30)\nplt.show()","af409103":"dummy_cuisines=pd.get_dummies(df[\"Has Online delivery\"])\ndf4=dummy_cuisines.sum()\n","7ad4fa96":"DataFrame(df4)\nx=[\"Yes\",\"No\"]\nplt.bar(x,df4,color=\"red\")\nplt.xlabel(\"Wether the restaurant has an Online delivery\")\nplt.ylabel(\"Count of restaurants\")","4ec8780e":"import matplotlib.pyplot as plt\nimport seaborn as sns","75e47563":"pd.crosstab(df['Rating text'], df['City'])","67102083":"%matplotlib inline","bd5147df":"plt.figure(figsize=(20,10))\nplt.ylabel(\"Number of restaurants\")\nplt.xlabel(\"Aggregate rating\")\nsns.barplot(df[\"Aggregate rating\"],range(1,50))\n\nplt.show()","8c3193d7":"from subprocess import check_output\nfrom wordcloud import WordCloud, STOPWORDS\nstopwords = set(STOPWORDS)\nwordcloud = (WordCloud(width=1440, height=1080, relative_scaling=1, stopwords=stopwords).generate_from_frequencies(df['Restaurant Name'].value_counts()))\n\n\nfig = plt.figure(1,figsize=(30,20))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","4b66fc66":"from sklearn import neighbors\nfrom sklearn.metrics import mean_squared_error \nfrom math import sqrt\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.metrics import r2_score","3dbccda3":"plt.figure(figsize=(10,8))\nplt.scatter(df[\"Votes\"],df[\"Average Cost for two\"],marker=\"*\",color=\"green\")\nplt.xlabel(\"Number of Votes\")\nplt.ylabel(\"Average Cost for two\")\n\n","94c8a77c":"df.corr()","b498feb4":" \ncorrmat = df.corr() \n  \nf,ax = plt.subplots(figsize =(9, 8)) \nsns.heatmap(corrmat, ax = ax, cmap =\"YlGnBu\", linewidths = 0.1) ","e88ef7f3":"from sklearn.model_selection import train_test_split","59e814d4":"x=df[['Currency']]\ny=df['Average Cost for two']\nx_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.8,random_state=42)\ndummies=pd.get_dummies(x_train)\ndummies\ndummies2=pd.get_dummies(x_test)\ndummies2.head()\nk=[]\naccu=[]\nfor i in range(1,50):\n    model = neighbors.KNeighborsRegressor(n_neighbors = i)\n    model.fit(dummies, y_train)  #fit the model\n    pred=model.predict(dummies2) #make prediction on test set\n    a=dummies2.shape\n    accuracy = r2_score(y_test, pred)\n    print(\"For k=\",i)\n    print(\"Accuracy is -\",accuracy*100,'%') \n    k.append(i)\n    accu.append(accuracy)\n    \n","021f5fbd":"plt.plot(k,accu)\nplt.xlabel(\"Value of K\")\nplt.ylabel(\"R2_score\")","46fa2ea4":"model = neighbors.KNeighborsRegressor(n_neighbors = 13)\nmodel.fit(dummies, y_train)  #fit the model\npred=model.predict(dummies2) #make prediction on test set\na=dummies2.shape\naccuracy = r2_score(y_test, pred)\nfor i in range(a[0]):\n    print(\"For \",x_test.iloc[i,:])\n    print(\"average cost for two=\")\n    print(pred[i])","bc502bf3":"accuracy = r2_score(y_test, pred)\nprint(\"Accuracy is -\",accuracy*100,'%') ","6f175220":"x=df[['Currency','Rating text']]\ny=df['Average Cost for two']\nx_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.8,random_state=42)\ndummies=pd.get_dummies(x_train)\ndummies\ndummies2=pd.get_dummies(x_test)\ndummies2.head()\naccur=[]\nK1=[]\nrmse=[]\ny_test2=y_test.values##Converting y_test to numpy array\n\nfor i in range(1,50):\n    model = neighbors.KNeighborsRegressor(n_neighbors = i)\n    model.fit(dummies, y_train)  #fit the model\n    pred=model.predict(dummies2) #make prediction on test set\n    accuracy = r2_score(y_test, pred)\n    error=sqrt(mean_squared_error(y_test2,pred))\n    print(\"For K=\",i)\n    print(\"Root Mean Squared Error is-\",error)\n    print(\"Accuracy is -\",accuracy*100,'%') \n    K1.append(i)\n    rmse.append(error)\n    accur.append(accuracy)\n    \n \n\n","e7526aea":"plt.plot(K1,rmse)\n\nplt.xlabel(\"Value of K\")\nplt.ylabel(\"RMSE\")","ce7bb195":"plt.plot(rmse,accur)\nplt.xlabel(\"RMSE\")\nplt.ylabel(\"R2_score\")","0ecb0aa1":"plt.plot(K1,accur)\n\nplt.xlabel(\"Value of K\")\nplt.ylabel(\"R2_score\")","d19e9a3e":"a=dummies2.shape\nmodel = neighbors.KNeighborsRegressor(n_neighbors = 2)\nmodel.fit(dummies, y_train)  #fit the model\npred=model.predict(dummies2) #make prediction on test set\nfor i in range(a[0]):\n    print(\"For \",x_test.iloc[i,:])\n    print(\"average cost for two=\")\n    print(pred[i])\n","a097a39a":"accuracy = r2_score(y_test, pred)\nprint(\"For K=\",2)\nprint(\"Accuracy is -\",accuracy*100,'%')","77a61fa0":"from sklearn.linear_model import LinearRegression","7ab502b5":"x=df[['Currency','Rating text']]\ny=df['Average Cost for two']\nx_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.8,random_state=42)\ndummies=pd.get_dummies(x_train)\ndummies\ndummies2=pd.get_dummies(x_test)\ndummies2.head()\nlinear_model=LinearRegression()\nlinear_model.fit(dummies,y_train)","2bb91c13":"linear_model.coef_","2ee924b4":"linear_model.intercept_","740ba2cc":"prediction=linear_model.predict(dummies2)\nr2_score(prediction,y_test)","b340d6e1":"error=sqrt(mean_squared_error(y_test,prediction))\nerror ","e8410c5d":"x=df[['Aggregate rating','Price range']]\ny=df['Average Cost for two']\nx_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.6,random_state=42)\nlinear_model=LinearRegression()\nlinear_model.fit(x_train,y_train)","a69ab3eb":"linear_model.coef_","8d0c45d7":"linear_model.intercept_","80449c29":"prediction=linear_model.predict(x_test)\nr2_score(y_test,prediction)","c8b1a870":"error=sqrt(mean_squared_error(y_test,prediction))\nerror","cafa9711":"## **From above it is clear that for various currency based on rating, average cost for two varies.**\n ## For Indian rupees the average cost for two based on rating are approximated as follows-\n ## Poor-Rs.550\n ## Average-Rs.575\n ## Good-Rs.300\n ## Very good-Rs.1400\n ## Not rated-Rs.475\n ## So,with the above prediction any customer can be sure of how they have to spend for their required quality of foods on Indian Rupees","53a4b121":"1. ## Accuracy score is 56.43%.","276fab1a":"### Importing train_test_split method to split the dataset into training and testing for training the model and then testing it.","0749ea5b":"## R2_Score Error vs K values","17e498ec":"# Grouping according to City","29216c32":"## Predicting 'Average Cost for Two' using 'Currency'","155df4d1":"## 1.Predicting 'Average Cost for Two' using 'Currency' and 'Rating text'","41bf2c16":"## Using Linear Regression model","668149e9":"# Results:\n# 1. A bar graph presentation which shows how many restaurants    provide Online Delivery.\n ","c12ff651":"# Above is the Quick view of the dataset","3c723c22":"## We can see that the best accuracy score is for K=13","097c8f79":"## We can observe that the maximum accuracy and minimum RMSE value is corressponding to the K-value=2","44d92738":"# Inference:\n# 1. New Delhi has the highest number of restaraunts associated with Zomato with a count of more than 5000.\n# 2. Gurgaon and Noida are behind New Delhi with count of more than 1000 restaurants associated with Zomato","f77d82f4":"## From this plot it is clear that the highest R2_score is corressponding to the lowest value of RMSE.","d0472613":"## KNN Regression","f4bd312c":"# Result:\n# 1. Restaurants with ratings 3.3 are highest in number.\n# 2. Near about 30 restaurants are unrated.. May be they are new.\n# 3. There are no restaurants having rating less than 3,which may show that Zomato doesn't collaborate with restaurants having ratings less than 3","20060347":"## The Regression model did not work well for this as r2 score is very low","55004a97":"## Accuracy score is about 68.92% which is significant.","838f7c65":"## 9551 rows and 21 columns are there in the dataset","371377fe":"# Checking for the data types","7427e4b6":"# From above scatter plot it is clear that there is almost no relationship between Votes(to restaraunt by its customer) and Average Cost for two.","e6d5d603":"## 2.Predicting 'Average Cost for Two' using 'Price range' and 'Aggregrate Rating'","dbf89eee":"## Correlation between various elements of the dataset","d142ae65":"# Table which shows the count of restaurants on the basis of Rating: Average,Excellent,Good,Not rated,Poor,Very Good in different cities.","6452e1af":"## Using KNN for regression","53f54bfe":"# Inference:\n# 1. Cafe Coffee Day has maximum number of restaurants associated with Zomato in INDIA followed by Domnio's Pizza and Green Chick Chop.","133255ad":"## Here too, the Linear Regression model didn't work well as R2_score is very low.\n## Hence, also from correlation values it is understood that we cannot use Linear Regression model for this dataset.","883cb6d6":"# Grouping data according to cuisines","16f66e9d":"# Inference:\n# 1. Restaurants providing only North-Indian cuisines are the highest in number with count of approximate 850\n# 2. Restaurants providing both Chinese and North Indian and restaurants providing only Chinese are behind the resturants providing both North-Indianwith a count of approx 450 and 380 respectively.","7c97f791":"## Root Mean Squared Error vs K values","cb4af85c":"## Predicting 'Average Cost for Two' using 'Currency' and 'Rating text'","50faa734":"> # Inference:\n# 1. Indian city has maximum number of Zomato restaurants\n# 2. Zomato has its presence in 23 countries but the most important country is India","a63cbd8a":"# So, we should focus on India because of the above reasons"}}