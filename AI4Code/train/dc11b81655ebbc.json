{"cell_type":{"e4dfb63b":"code","13c59623":"code","6a650a74":"code","e9327bc9":"code","7b0b8534":"code","563fb86e":"code","c6c6ac95":"code","fd517530":"code","6f08573b":"code","8c98a28d":"code","f4b5bc8e":"code","9faa7efc":"code","8f10235b":"code","ef217719":"code","eec323d5":"code","d855152c":"code","3f307da8":"code","6a63cdfc":"code","2c8fb961":"markdown","dd2aee25":"markdown","2e07cf97":"markdown","b9c013b2":"markdown","88d9ae22":"markdown","869d924e":"markdown","5d97b5f1":"markdown","fe62e2da":"markdown","825ae4d4":"markdown","3005e9fb":"markdown","5dcdd6ce":"markdown","bfc9a836":"markdown","ec2f4780":"markdown","26901cde":"markdown","e2c95f08":"markdown"},"source":{"e4dfb63b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport dateutil.easter as easter\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import MaxNLocator, FormatStrFormatter, PercentFormatter\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.compose import TransformedTargetRegressor","13c59623":"train_df = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv')\ntest_df = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv')\n\nfor df in [train_df, test_df]:\n    df['date'] = pd.to_datetime(df.date)\n    df.set_index('date', inplace=True, drop=False)\n    \ntrain_df","6a650a74":"print(train_df.groupby(['country', 'store', 'product']).date.count())\n\nprint(\"First day:\", train_df.date.min(), \"  \\n Last day:\", train_df.date.max())\nprint(\"Number of days in four years:\", 365 * 4 + 1) # \uc724\ub144\uc774 \ud3ec\ud568\ub428\nprint(18 * 1461, train_df.shape, train_df.date.isna().sum())","e9327bc9":"train_df.groupby(['country', 'store', 'product']).num_sold.agg(['min', 'max', 'mean'])","7b0b8534":"test_df.date.min(), test_df.date.max()","563fb86e":"kk = train_df.groupby(['country', 'store', 'product']).num_sold.mean().unstack(level='store')\nkk['KaggleRama:KaggleMart'] = kk.KaggleRama \/ kk.KaggleMart\nkk","c6c6ac95":"# group by week\nkk = train_df.groupby(['country', 'store', 'product', train_df.date.dt.week]).num_sold.mean().unstack(level='product')\nkk['Mug\/Sticker'] = kk['Kaggle Mug'] \/ kk['Kaggle Sticker']\nkk['Hat\/Sticker'] = kk['Kaggle Hat'] \/ kk['Kaggle Sticker']\nkk.head(30)","fd517530":"# group by month\nkk = train_df.groupby(['country', 'store', 'product', train_df.date.dt.month]).num_sold.mean().unstack(level='product')\nkk['Mug\/Sticker'] = kk['Kaggle Mug'] \/ kk['Kaggle Sticker']\nkk['Hat\/Sticker'] = kk['Kaggle Hat'] \/ kk['Kaggle Sticker']\nkk","6f08573b":"# group by year\nkk = train_df.groupby(['country', 'store', 'product', train_df.date.dt.year]).num_sold.mean().unstack(level='product')\nkk['Mug\/Sticker'] = kk['Kaggle Mug'] \/ kk['Kaggle Sticker']\nkk['Hat\/Sticker'] = kk['Kaggle Hat'] \/ kk['Kaggle Sticker']\nkk","8c98a28d":"plt.figure(figsize=(18, 12))\nfor i, (combi, df) in enumerate(train_df.groupby(['country', 'store', 'product'])):\n    ax = plt.subplot(6, 3, i+1, ymargin=0.5)\n    ax.hist(df.num_sold, bins=50, color='pink')\n    ax.set_title(combi)\n    \nplt.suptitle(\"Histogram of num_sold\", y=1.03)\nplt.tight_layout(h_pad=3.0)\nplt.show()","f4b5bc8e":"plt.figure(figsize=(18, 12))\nfor i, (combi, df) in enumerate(train_df.groupby(['country', 'store', 'product'])):\n    ax = plt.subplot(6, 3, i+1, ymargin=0.5)\n    ax.plot(df.num_sold)\n    ax.set_title(combi)\n    \nplt.tight_layout(h_pad=0.3)\nplt.suptitle('Daily sales for 2015-2018', y=1.03)\nplt.show()","9faa7efc":"plt.figure(figsize=(18,12))\nfor i, (combi, df) in enumerate(train_df.groupby(['country', 'store', 'product'])):\n    ax = plt.subplot(6, 3, i+1, ymargin=0.5)\n    ax.bar(range(1, 32),\n          df.num_sold[df.date.dt.month==12].groupby(df.date.dt.day).mean(),\n          color=['b'] * 25 + ['y'] * 6)\n    ax.set_title(combi)\n    ax.set_xticks(ticks=range(5, 31, 5))\n\nplt.tight_layout(h_pad=0.3)\nplt.suptitle('Daily sales for December', y=1.03)\nplt.show()\n        ","8f10235b":"plt.figure(figsize=(18, 12))\nfor i, (combi, df) in enumerate(train_df.groupby(['country', 'store', 'product'])):\n    ax = plt.subplot(6, 3, i+1, ymargin=0.5)\n    resampled = df.resample('MS').num_sold.sum()\n    ax.bar(range(len(resampled)), resampled)\n    ax.set_title(combi)\n    ax.set_ylim(resampled.min(), resampled.max())\n    ax.set_xticks(range(0, 48, 12), [f\"Jan {y}\" for y in range(2015, 2019)])\n    \nplt.suptitle('Monthly sales for 2015-2018', y = 1.03)\nplt.tight_layout(h_pad=3.0)\nplt.show()","ef217719":"plt.figure(figsize=(18,12))\nfor i, (combi, df) in enumerate(train_df.groupby(['country', 'store', 'product'])):\n    ax = plt.subplot(6, 3, i+1, ymargin=0.5)\n    resampled = df.resample('MS').sum()\n    resampled = resampled.groupby(resampled.index.month).mean()\n    ax.bar(range(1, 13), resampled.num_sold)\n    ax.set_xticks(ticks=range(1,13), labels='JFMAMJJASOND')\n    ax.set_title(combi)\n    ax.set_ylim(resampled.num_sold.min(), resampled.num_sold.max())\n\nplt.suptitle('Monthly sales for 2015-2018', y=1.03)\nplt.tight_layout(h_pad=3.0)\nplt.show()\n","eec323d5":"plt.figure(figsize=(18, 12))\nfor i, (combi, df) in enumerate(train_df.groupby(['country', 'store', 'product'])):\n    ax = plt.subplot(6, 3, i+1, ymargin=0.5)\n    resampled = df.resample('AS').sum()\n    ax.bar(range(2015, 2019), resampled.num_sold, color='brown')\n    ax.set_title(combi)\n    ax.xaxis.set_major_locator(MaxNLocator(integer=True))\n    ax.set_ylim(0, resampled.num_sold.max())\nplt.suptitle('Growth of yearly sales for 2015-2018', y=1.03)\nplt.tight_layout(h_pad=3.0)\nplt.show()","d855152c":"plt.figure(figsize=(18, 90))\nfor i, (combi, df) in enumerate(train_df.groupby(['country', 'store', 'product'])):\n    ax = plt.subplot(18, 1, i+1, ymargin=0.5)\n    resampled = df[(df.date.dt.month<12) | (df.date.dt.day<25)].resample('AS').num_sold.sum()\n    resampled \/= resampled.iloc[0]\n    resampled_end_of_year = df[(df.date.dt.month==12) | (df.date.dt.day>=25)].resample('AS').num_sold.sum()\n    resampled_end_of_year \/= resampled_end_of_year.iloc[0]\n    ax.bar(range(2015, 2019), resampled, color='brown')\n    ax.bar(range(2015, 2019), resampled_end_of_year, color='orange', width=0.4)\n    \n    X = np.arange(2015, 2019).reshape(-1, 1)\n    lr = TransformedTargetRegressor(LinearRegression(), func=np.log, inverse_func=np.exp)\n    lr.fit(X, resampled)\n    ax.plot(range(2015, 2019), lr.predict(X), color='brown', label=f\"whole year: {lr.predict([[2018]]).squeeze() - 1:.1%}\")\n    lr.fit(X, resampled_end_of_year)\n    ax.plot(range(2015, 2019), lr.predict(X), color='orange', label = f\"end of year: {lr.predict([[2018]]).squeeze() - 1:.1%}\")\n    \n    ax.legend()\n    ax.set_title(f\"Yearly sales for {combi}\")\n    ax.xaxis.set_major_locator(MaxNLocator(integer=True))\nplt.tight_layout(h_pad=3.0)\nplt.show()","3f307da8":"plt.figure(figsize=(12,12))\nfor i, (combi, df) in enumerate(train_df.groupby(['country', 'store', 'product'])):\n    ax = plt.subplot(6, 3, i+1, ymargin=0.5)\n    resampled = df.groupby(df.index.dayofweek).mean()\n    ax.bar(range(7), resampled.num_sold,\n           color = ['b'] * 4 + ['g'] + ['orange'] * 2)\n    ax.set_title(combi)\n    ax.set_xticks(ticks=range(7), labels=('M', 'T', 'W', 'T', 'F', 'S', 'S'))\n    ax.set_ylim(0, resampled.num_sold.max())\nplt.suptitle('Sales per day of the week', y= 1.03)\nplt.tight_layout(h_pad=3.0)\nplt.show()","6a63cdfc":"plt.figure(figsize=(12,12))\nfor i, (year, df) in enumerate(train_df.groupby(train_df.date.dt.year)):\n    df = df.reset_index(drop=True)\n    ax = plt.subplot(4, 1, i+1, ymargin=0.5)\n    april = df.num_sold[(df.date.dt.month==4)].groupby(df.date.dt.day).mean()\n    date_range = pd.date_range(start=f'{year}-04-01', end=f'{year}-04-30', freq='D')\n    easter_date = easter.easter(year)\n    color = ['r' if d == easter_date else 'lightblue' if (d.date() - easter_date).days in range(6) else 'b' if d.dayofweek < 5 else 'orange' for d in date_range]\n    ax.bar(range(1,31),\n          april,\n          color=color)\n    ax.set_title(str(year))\n    ax.set_xticks(ticks=range(5, 31, 5))\nplt.tight_layout(h_pad=3.0)\nplt.suptitle('Daily sales for April', y=1.03)\nplt.show()","2c8fb961":"# KaggleRama\uac00 \uc9c1\uad00\uc801\uc73c\ub85c \ubd10\ub3c4 \ub354 \ub9ce\uc774 \ud314\ub9b0\ub2e4.\n\ubaa8\ub4e0 \uad6d\uac00\uc5d0\uc11c \uc0c1\ud488\uc5d0\uc11c \uce90\uae00\ub77c\ub9c8\uac00 \uce90\uae00\ub9c8\ud2b8\ubcf4\ub2e4 \ub354\ub9ce\uc774 \ud310\ub2e4.\n\n\ub458 \uc0ac\uc774\uc758 \uad00\uacc4\uac00 \uc608\uce21\uac12\uc744 \uad6c\ud558\ub294 \ud78c\ud2b8\uac00 \ub420 \uc218\ub3c4 \uc788\ub2e4.","dd2aee25":"# EDA\n- https:\/\/www.kaggle.com\/ambrosm\/tpsjan22-01-eda-which-makes-sense\/notebookhttps:\/\/www.kaggle.com\/ambrosm\/tpsjan22-01-eda-which-makes-sense\/notebook \ucc38\uace0\ud558\uc138\uc694\n- \uc2dc\uc98c\ubcc4, \uc694\uc77c\ubcc4 \ubc30\ub9ac\uc5d0\uc774\uc158\n- \uc774\uc2a4\ud130\uc758 \ud6a8\uacfc\n- \uc8fc\ub9d0 \ud53c\ud06c\ub97c \uc790\uc138\ud788 \ubcf4\uae30\n- \uc5f0\uac04 \uc131\uc7a5(\uc5f0\ub9d0\uc5d0 \ub354 \ub192\uc74c)\n- \uc65c SMAPE\ub85c \uc810\uc218\ub97c \ub9e4\uae30\ub098","2e07cf97":"# \ub370\uc774\ud130\uc758 \uc644\uacb0\uc131\n\ud2b8\ub808\uc778 \ub370\uc774\ud130\uc5d4 \uc138\uac1c\uc758 \ub098\ub77c, \ub450\uac1c\uc758 \uac00\uac8c, \uc138\uac1c\uc758 \uc0c1\ud488\uc774\uc788\ub2e4. \n18\uac1c\uc758 \uc870\ud569\uc758 1461\uc77c\uc758 \ud310\ub9e4 \ub370\uc774\ud130\uac00 \uc788\ub2e4.\n1461\uc77c\uc740 2015,2016, 2017, 2018 \ub144\uc5d0 \ud3ec\ud568\ub41c\ub2e4.\n\uacb0\uce21\uac12\uc740 \uc5c6\ub2e4.","b9c013b2":"## Weekdays\n- \ubaa8\ub4e0 \uc0c1\ud488\uc5d0\uc11c \uc8fc\ub9d0\uc5d0 \ub9e4\ucd9c\ub7c9\uc774 \uc81c\uc77c \ub9ce\ub2e4\n- \uc8fc\uc911\uc5d0\uc11c\ub3c4 \uae08\uc694\uc77c\uc774 \uac00\uc7a5 \ub9e4\ucd9c\ub7c9\uc774 \uc88b\ub2e4.\n\n### insight\n- \uc6b0\ub9ac\uc758 \ubaa8\ub378\uc740 \uc801\uc5b4\ub3c4 \uc6d4-\ubaa9, \uae08, \ud1a0-\uc77c \uc744 \uad6c\ubd84\uc774 \ub418\uc5b4\uc57c\ud55c\ub2e4.","88d9ae22":"# Time series\n## Daily sales and the year-end peak\n- \uc77c\ubcc4\ub85c \uc870\ud569\uc758 \uc77c\ubcc4 num_sold\ub97c \ubcf4\uba74 \uac01 \ub144\ub3c4\uc758 \ub9d0\uae30\uc5d0 \uc218\uce58\uac00 \ub192\uc544\uc9c0\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.\n- \uc0c1\ud488\ubcc4\ub85c \uadf8\ub798\ud504\uc758 \ud2b9\uc9d5\uc774 \uc788\ub294\ub370 \n    - Kaggle Hat\uc740 \uaca8\uc6b8\ucca0\uc5d0 \ud310\ub9e4\ub7c9\uc774 \uc99d\uac00\ud558\ub294 \uacbd\ud5a5\uc744 \ubcf4\uc774\uace0,\n    - Mug\ub294 Norway, Finland, Sweden \uc21c\uc73c\ub85c \ud310\ub9e4\ub7c9\uc774 \ub9ce\uc740 \uac83\uc744 \ubcf4\uba74 \uad6d\uac00\ubcc4 \ucc28\uc774\uac00 \uc788\ub294 \uac83\uc73c\ub85c \ubcf4\uc774\uace0\n    - Sticker\ub294 \ub300\uccb4\ub85c \uadf8\ub798\ud504\uac00 \ud3c9\ud0c4\ud558\uc9c0\ub9cc Norway\uc758 2\ubd84\uae30\uc5d0 \ub9e4\ucd9c\ub7c9\uc774 \uc99d\uac00\ud558\ub294 \uac83\uc774 \ubcf4\uc778\ub2e4.\n    \n### Insight\n- model\uc5d0 \uacc4\uc808\ubcc4 \ud2b9\uc9d5\uc744 \ubc18\uc601\ud560 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4.\n- \ub144 \ub2e8\uc704\uc758 \uadf8\ub798\ud504 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc9e7\uc740 spike \ub4e4\ub3c4 \ubc18\uc601\ud574\uc57c \ub41c\ub2e4.","869d924e":"## Monthly sales and seasonal variation\n- \uc6d4\ubcc4\ub85c \ub9e4\ucd9c\ub7c9\uc744 \ubd84\uc11d\ud588\uc744 \ub54c \uacc4\uc808\ubcc4 \ubcc0\ud654\uc640 \uc131\uc7a5 \ucd94\uc138\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4.\n- Sticker\uac00 hat\uc5d0 \ube44\ud574 \uc99d\uac00\uc138\uac00 \ub69c\ub837\ud574 \ubcf4\uc778\ub2e4.\n\n### Insight\n- \uc99d\uac00 \ucd94\uc138\ub97c \ud1b5\ud574 \ub2e4\uc74c\ub144\ub3c4(2019)\uc758 \uac12\uc744 \uc608\uce21\ud560 \uc218\ub3c4 \uc788\ub2e4.","5d97b5f1":"- Hat\uc740 \ub300\uccb4\uc801\uc73c\ub85c 4,5 \uc6d4\uc5d0 \ucd5c\ub300\uce58\ub97c \ucc0d\uace0 9\uc6d4\ub2ec\uc5d0 \ucd5c\uc18c\uce58\ub97c \ucc0d\ub294\ub2e4.\n- Mug\ub294 12\uc6d4\ub2ec\uc5d0 \ucd5c\ub300\uce58\ub97c \ucc0d\uace0, 6,7\uc6d4\ub2ec\uc5d0 \ucd5c\uc18c\uce58\ub97c \ucc0d\ub294\ub2e4.\n- Sticker\ub294 12,1\uc6d4\uc5d0 \ucd5c\ub300\uce58\ub97c \ucc0d\uace0, 2\uc6d4\ub2ec\uc5d0 \ucd5c\uc18c\uce58\ub97c \ucc0d\ub294\ub2e4.(5\uc6d4\ub2ec\uc5d0\ub3c4 \uc2a4\ud30c\uc774\ud06c\uac00 \uc788\ub2e4.)","fe62e2da":"# Histograms and SMAPE\n- 18\uac1c\uc758 country-store-product \uc870\ud569\uc740 \ubaa8\ub450 \ub2e4\ub974\uc9c0\ub9cc \ub300\uccb4\ub85c \ud788\uc2a4\ud1a0\uadf8\ub7a8 \uadf8\ub798\ud504\uac00 \ud3b8\ud5a5\ub41c \ubaa8\uc2b5\uc744 \ubcf4\uc5ec\uc900\ub2e4.\n- \ubaa8\ub4e0 \uc0c1\ud488\uc740 \ud3c9\uade0\uc744 \ud55c\ucc38 \ub6f0\uc5b4\ub118\uac8c \ud314\ub9ac\ub294 \ub0a0\ub4e4\uc774 \uc788\ub2e4.\n- \uc774 \uc544\uc6c3\ub77c\uc774\uc5b4\ub4e4\uc774 \ubcf4\ud1b5 \ub0a0\ub4e4\uc5d0 \ube44\ud574 \uc608\uce21\uc744 \ubd80\uc815\ud655\ud558\uac8c \ud560 \uc218\ub3c4 \uc788\ub2e4.\n\n### Insight\n- \uc774\ub7f0 \uc774\uc720\ub4e4 \ub54c\ubb38\uc5d0 SMAPE Evaluation \ubc29\ubc95\uc744 \uc4f0\ub294 \uac83 \uac19\ub2e4.\n- \uadf8\ub798\uc11c \uc801\uc808\ud55c \uc190\uc2e4 \ud568\uc218\ub97c \uace0\ub974\ub294 \uac83\uc774 \uc911\uc694\ud558\ub2e4.\n- log\ub97c \uc608\uce21\ud558\ub294 \uac83\uc774 num_sold\ub97c \uc608\uce21\ud558\ub294 \uac83\ubcf4\ub2e4 \ub354 \ub098\uc744 \uc218 \uc788\ub2e4.\n- ","825ae4d4":"## Growth\n- \ub144\ub3c4\ubcc4\ub85c \ub9e4\ucd9c\ub7c9\uc744 \ud569\ud558\uba74 \uc131\uc7a5 \ucd94\uc138\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4.(\uacc4\uc808\ubcc4 \ubcc0\ud654 \ubb34\uc2dc \uac00\ub2a5)\n    - Norway\ub294 2016\ub144\uc5d0 \uc0b4\uc9dd \ub9c8\uc774\ub108\uc2a4 \uc131\uc7a5\ud588\ub2e4.\n    - Sweden\uc740 2018\ub144 \uc131\uc7a5\uc774 \uac70\uc758 \uc5c6\ub2e4.\n    - \ub300\uccb4\uc801\uc73c\ub85c \ub9e4\ub144 \uc131\uc7a5\ud55c\ub2e4.\n    \n### insight\n- \uad6d\uac00\ubcc4\ub85c \uc131\uc7a5\ub960\uc744 \ubaa8\ub378\ub9c1\ud574\uc57c\ud568\n- \uc131\uc7a5\uc740 \uc9c0\uc218\uc131\uc7a5\uc774\ub098 \uc120\ud615 \uc131\uc7a5\uc774 \uc544\ub2c8\ub2e4.\n- \uc5f0\ub9d0\uc5d0 \ub9e4\ucd9c\uc774 \ubab0\ub9ac\ub294 \uac83\uc744 \uac10\uc548\ud574 \ub2e4\ub978 \uc131\uc7a5\ub960\ub3c4 \ubaa8\ub378\ub9c1\ud574\uc57c\ud568","3005e9fb":"## Easter\n- \ubd80\ud65c\uc808 \uc774\ud6c4\uc758 \ub9e4\ucd9c\ub7c9\uc774 \ud3c9\uc18c\ubcf4\ub2e4 \ub192\ub2e4.\n- \n\n### insight\n- \ubaa8\ub378\uc740 \ubd80\ud65c\uc808\uc758 \ub0a0\uc9dc\ub97c \uc54c\uc544\uc57c\ud558\uace0 \ubd80\ud65c\uc808 \ub2e4\uc74c\uc5d0 \uc218\uc694\uac00 \ub9ce\uc74c\uc744 \uc778\uc2dd\ud574\uc57c\ud568","5dcdd6ce":"# Product","bfc9a836":"- 4\ub144\uac04 \ub9e4\ucd9c\ub7c9\uc758 12\uc6d4 \ud3c9\uade0\uc744 \ub0b4\uc5b4 \uc5f0\ub9d0\uc758 \uc0c1\ud669\uc744 \uc0b4\ud3b4\ubcf4\uc790\n- \ub178\ub780\uc0c9 \ubd80\ubd84\uc744 \ubcf4\uba74 \ud06c\ub9ac\uc2a4\ub9c8\uc2a4 \uc774\ud6c4\uc5d0 \ub9e4\ucd9c\ub7c9\uc774 \uc99d\uac00\ud558\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\ub2e4.","ec2f4780":"\ubaa8\ub4e0 \uc81c\ud488\uc774 \ubaa8\ub4e0 \uac00\uac8c\uc5d0\uc11c \ubaa8\ub4e0 \ub0a0\uc5d0 \ud314\ub838\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ud310\ub9e4\ub7c9\uc740 \ud56d\uc0c1 \uc591\uc758 \uac12\uc744 \uac00\uc9c8 \uac83\uc774\ub2e4.","26901cde":"\ud559\uc2b5 \ub370\uc774\ud130\ub294 2015\ub144\ubd80\ud130 2018\ub144\uae4c\uc9c0\ub97c \ub2e4\ub8ec\ub2e4\uba74, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub294 2019\ub144\uc758 \uac12\uc740 \uad6c\ud558\ub294 \uac83\uc744 \uc694\uad6c\ud560 \uac83\uc774\ub2e4.","e2c95f08":"- \ub370\uc774\ud130\ub97c \uad6d\uac00\ubcc4\ub85c, \ub144\ub3c4\ubcc4\ub85c \uc0c1\ud488\ubcc4\ub85c \uadf8\ub8e8\ud551\ud588\uc744 \ub54c Sticker:Hat:Mug \uc758 \ube44\uc728\uc774 \uac70\uc758 \ube44\uc2b7\ud558\ub2e4. \n- \uc774 \ube44\uc728\uc740 \ub144\ub3c4\ub098 \uad6d\uac00\ub098 \uac00\uac8c\uc5d0\uac8c \ud070 \uc601\ud5a5\uc744 \ubc1b\uc9c0 \uc54a\ub294 \uacbd\ud5a5\uc744 \ubcf4\uc778\ub2e4.\n- \ud558\uc9c0\ub9cc \uc6d4\ubcc4, \uc8fc\ubcc4\ub85c \uadf8\ub8e8\ud551\ud588\uc744 \ub54c\ub294 \ub2e4\ub978 \uacb0\uacfc\ub97c \ubcf4\uc774\uae30 \ub54c\ubb38\uc5d0 \uc2dc\uc98c\ubcc4\ub85c \ub2e4\ub978 \uacbd\ud5a5\uc744 \ubcf4\uc774\ub294 \uac83 \uac19\ub2e4."}}