{"cell_type":{"2241f3cf":"code","62f7c9a1":"code","e6910a99":"code","7bab52ed":"code","44a7fe9c":"code","97387a18":"code","0ff417a8":"code","e4ada128":"code","c4b50154":"code","62784090":"code","f25b48a4":"code","675069da":"code","53d38f1a":"code","d0e97d33":"code","40cda1f4":"code","21bc9978":"code","ca5970c3":"code","cd3c9e41":"code","d0097370":"markdown"},"source":{"2241f3cf":"#importing libaries for various classification techniques\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n#from pandas.plotiing import scatter_matrix\nfrom sklearn.linear_model import LogisticRegression # logistic regression\nfrom sklearn import svm # support vector machine\nfrom sklearn.ensemble import RandomForestClassifier #Random_forest\nfrom sklearn.tree import DecisionTreeClassifier #Decision tree\nfrom sklearn.naive_bayes import GaussianNB #Naive_bayes\nfrom sklearn.neighbors import KNeighborsClassifier #K nearest neighbors\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report","62f7c9a1":"#Reading the data set\ndf =pd.read_csv(\"..\/input\/invehicle-coupon-recommendation\/in-vehicle-coupon-recommendation.csv\")\ndf.info()\ndf.head()","e6910a99":"#Finding the special characters in the data frame\ndf.isin(['?']).sum(axis=0)","7bab52ed":"#Replacing the special character to nan and then drop the columns\ndf['car'] = df['car'].replace('NaN',np.nan)\ndf['CarryAway'] = df['CarryAway'].replace('?',np.nan)\n#Dropping the NaN rows now \ndf.dropna(how='any',inplace=True)","44a7fe9c":"#Assigning the numeric values to the string type variables\nnumber = LabelEncoder()\ndf['destination'] = number.fit_transform(df['destination'])\ndf['passanger'] = number.fit_transform(df['passanger'])\ndf['weather'] = number.fit_transform(df['weather'])\ndf['time'] = number.fit_transform(df['time'])\ndf['coupon'] = number.fit_transform(df['coupon'])\ndf['expiration'] = number.fit_transform(df['expiration'])\ndf['gender'] = number.fit_transform(df['gender'])\ndf['maritalStatus'] = number.fit_transform(df['maritalStatus'])\ndf['education'] = number.fit_transform(df['education'])\ndf['occupation'] = number.fit_transform(df['occupation'])\ndf['Bar'] = number.fit_transform(df['Bar'])\ndf['CoffeeHouse'] = number.fit_transform(df['CoffeeHouse'])\ndf['car'] = number.fit_transform(df['car'])\ndf['CarryAway'] = number.fit_transform(df['CarryAway'])\ndf['income'] = number.fit_transform(df['income'])\ndf['Restaurant20To50'] = number.fit_transform(df['Restaurant20To50'])\ndf['RestaurantLessThan20'] = number.fit_transform(df['RestaurantLessThan20'])","97387a18":"df.head(5)","0ff417a8":"# summarize the class distribution\ntarget = df.values[:,-1]\ncounter = Counter(target)\nfor k,v in counter.items():\n\tper = v \/ len(target) * 100\n\tprint('Class=%s, Count=%d, Percentage=%.3f%%' % (k, v, per))","e4ada128":"#Train_Test splitting\nX = df.drop(['Y'],axis=1)\ny = df['Y']\nX.head()","c4b50154":"y.head()","62784090":"#Declaring the train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.4,random_state=0)","f25b48a4":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = pd.DataFrame(scaler.fit_transform(X_train), columns = X.columns)\nX_test = pd.DataFrame(scaler.transform(X_test), columns = X.columns)","675069da":"X_train.head()","53d38f1a":"# Logistic Regression\nLR = LogisticRegression()\nLR.fit(X_train, y_train)\ny_pred = LR.predict(X_test)\nscore_LR = LR.score(X_test,y_test)\nprint('The accuracy of the Logistic Regression model is', score_LR)\ntargets = ['0' , '1']\nprint(classification_report(y_test, y_pred,target_names=targets))","d0e97d33":"# Support Vector Classifier (SVM\/SVC)\nfrom sklearn.svm import SVC\nsvc = SVC(gamma=0.22)\nsvc.fit(X_train, y_train)\ny_pred = svc.predict(X_test)\nscore_svc = svc.score(X_test,y_test)\nprint('The accuracy of SVC model is', score_svc)\ntargets = ['<=50k' , '>50k']\nprint(classification_report(y_test, y_pred,target_names=targets))","40cda1f4":"# Random Forest Classifier\nRF = RandomForestClassifier()\nRF.fit(X_train, y_train)\ny_pred = RF.predict(X_test)\nscore_RF = RF.score(X_test,y_test)\nprint('The accuracy of the Random Forest Model is', score_RF)\ntargets = ['<=50k' , '>50k']\nprint(classification_report(y_test, y_pred,target_names=targets))","21bc9978":"# Decision Tree\nDT = DecisionTreeClassifier()\nDT.fit(X_train,y_train)\ny_pred = DT.predict(X_test)\nscore_DT = DT.score(X_test,y_test)\nprint(\"The accuracy of the Decision tree model is \",score_DT)\ntargets = ['<=50k' , '>50k']\nprint(classification_report(y_test, y_pred,target_names=targets))","ca5970c3":"# Gaussian Naive Bayes\nGNB = GaussianNB()\nGNB.fit(X_train, y_train)\ny_pred = GNB.predict(X_test)\nscore_GNB = GNB.score(X_test,y_test)\nprint('The accuracy of Gaussian Naive Bayes model is', score_GNB)\ntargets = ['<=50k' , '>50k']\nprint(classification_report(y_test, y_pred,target_names=targets))","cd3c9e41":"# K-Nearest Neighbors\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nscore_knn = knn.score(X_test,y_test)\nprint('The accuracy of the KNN Model is',score_knn)\ntargets = ['<=50k' , '>50k']\nprint(classification_report(y_test, y_pred,target_names=targets))","d0097370":"#various classification techniques"}}