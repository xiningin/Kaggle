{"cell_type":{"9c325214":"code","e3710d94":"code","528fa2f5":"code","4b32bf2e":"code","f3bf88c8":"code","09658201":"code","427eef24":"code","e13546ff":"code","c1da00d4":"code","a9d09f8d":"code","106f8847":"code","bb6c686d":"code","e72df57a":"code","862971f5":"code","f4f213fd":"code","2fbb846b":"code","751021fc":"code","6ed6751f":"code","8ec4bb49":"code","929d9c20":"code","ad2fff66":"code","d99f6ecd":"code","efca1af8":"code","95ce873d":"code","ab457361":"code","8470225e":"code","0c33e93c":"code","660ccab3":"code","46ea4a2c":"code","6762f454":"code","ddb6fc5d":"code","a72dc68c":"code","ce580b04":"code","4169e09a":"code","8fa7af6d":"code","8e39e16d":"code","86306070":"code","c090a5af":"markdown","5a0cb2df":"markdown","e0965aef":"markdown","2f53a147":"markdown","6eff61ba":"markdown","f8633f01":"markdown","ba611f78":"markdown","1186ab77":"markdown","a2c27e42":"markdown","80153e4c":"markdown","cd6dfa6c":"markdown","905dc4e8":"markdown","71c58255":"markdown","05fff2a2":"markdown","b2d93d84":"markdown","1212896b":"markdown","8bb4c55b":"markdown","6fb38962":"markdown","78586ff5":"markdown","1057f890":"markdown","b8732ecb":"markdown","fae92690":"markdown","7523aefe":"markdown","74d4f6ab":"markdown","ea9140db":"markdown","896acdbf":"markdown","5282eb10":"markdown","a3542448":"markdown","0f7fe81e":"markdown","8ec28dc6":"markdown","81815786":"markdown","8a747640":"markdown","e54d0611":"markdown","9a742ea6":"markdown","20a2846d":"markdown","f3ae9512":"markdown","4e1728da":"markdown","97658ede":"markdown","ffe42015":"markdown","0a8ac961":"markdown","299ff3ea":"markdown","04647826":"markdown","cfaabe94":"markdown","7f9dc591":"markdown","042ee619":"markdown","b70dc8e2":"markdown","0d4285fb":"markdown","a5b412d6":"markdown","2185cc06":"markdown","ee4fde06":"markdown","d83fb4a3":"markdown","f3c210d7":"markdown"},"source":{"9c325214":"# \u7814\u7a76\u53c2\u6570\n\n# \u5f00\u59cb\u65e5\u671f\nstart_date = \"2015-05-29\"\n# \u7ed3\u675f\u65e5\u671f\nend_date = \"2020-05-29\"\n\n# \u5e8f\u5217\u9891\u7387\nfreq = \"month\"","e3710d94":"import numpy as np\nimport pandas as pd\nimport statsmodels.api as sm","528fa2f5":"raw = np.load(\"..\/input\/three-factor-ts\/factor_data.npy\", allow_pickle = True)\n\ndict_raw = raw.item()\ndata = dict_raw.copy()\n# \u968f\u673a\u67e5\u770b\u5176\u4e2d\u4e00\u671f\u7684\u6570\u636e\ndict_raw[\"2018-03-30\"]","4b32bf2e":"for key in data.keys():\n    df = data[key].copy()\n    df[\"BM\"] = 1 \/ df[\"PB\"]\n    data[key] = df","f3bf88c8":"may = [i for i in list(data.keys()) if i[5:7] == \"05\"]\n# \u5c55\u793a\u627e\u51fa\u76845\u6708\u6570\u636e\u7684\u65f6\u95f4\u6233\nsorted(may)","09658201":"# \u5bf9\u5b57\u5178\u91cc\u7684\u6bcf\u4e00\u4e2a\u952e\u8fdb\u884c\u904d\u5386\uff08\u5373\u904d\u5386\u65e5\u671f\uff09\nfor key in may:\n    # \u5c06\u8be5\u65e5\u671f\u5bf9\u5e94\u7684\u503c\uff08\u4e5f\u5c31\u662f\u5355\u65e5\u6570\u636e\uff09\u63d0\u53d6\u51fa\u6765\uff0c\u8d4b\u503c\u7ed9\u53d8\u91cfdf\uff0c\u540e\u7eed\u8ba1\u7b97\u5728df\u4e0a\u64cd\u4f5c\n    df = data[key].copy()\n\n# ============== \u5e02\u503c\u63091\uff1a1\u5206\u7ec4 ====================\n    median = df[\"market_value\"].median()\n    # \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5224\u65ad\u5927\u5e02\u503c\u548c\u5c0f\u5e02\u503c\n    def size_grouping(market_value):\n        if market_value <= median:\n            return \"S\"\n        else:\n            return \"B\"\n    # \u5bf9\u4e00\u5929\u6570\u636e\u7684\u6bcf\u4e00\u4e2amarket_value\u503c\u8c03\u7528\u521a\u521a\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u5c06\u7ed3\u679c\u653e\u5728\u8868\u4e2d\u65b0\u589e\u7684\u4e00\u5217Group_size   \n    df[\"Group_size\"] = df[\"market_value\"].apply(size_grouping)\n    \n# ============== BM\u8d26\u9762\u5e02\u503c\u6bd4\u63093 \uff1a4\uff1a3\u5206\u7ec4 ====================\n    down = df[\"BM\"].quantile(3\/10)\n    up = df[\"BM\"].quantile(7\/10)\n    # \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u8fdb\u884c\u5206\u7ec4\n    def bm_grouping(bm):\n        if bm <= down:\n            return \"L\"\n        elif bm <= up:\n            return \"M\"\n        else:\n            return \"H\"\n    # \u5bf9\u4e00\u5929\u6570\u636e\u7684\u6bcf\u4e00\u4e2aBM\u503c\u8c03\u7528\u521a\u521a\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u5c06\u7ed3\u679c\u653e\u5728\u8868\u4e2d\u65b0\u589e\u7684\u4e00\u5217Group_BM \n    df[\"Group_BM\"] = df[\"BM\"].apply(bm_grouping)\n    \n    # \u6700\u540e\u5c06\u8ba1\u7b97\u540e\u7684\u5355\u5929\u6570\u636e\u91cd\u65b0\u653e\u56de\u5b57\u5178\n    data[key] = df","427eef24":"key_ls = list(data.keys())","e13546ff":"dgroup1 = sorted([i  for i in key_ls if 20150529 <= int(i.replace(\"-\",'')) < 20160531])","c1da00d4":"dgroup2 = sorted([i for i in key_ls if 20160531 <= int(i.replace(\"-\",'')) < 20170531])\n\ndgroup3 = sorted([i for i in key_ls if 20170531 <= int(i.replace(\"-\",'')) < 20180531])\n\ndgroup4 = sorted([i for i in key_ls if 20180531 <= int(i.replace(\"-\",'')) < 20190531])\n\ndgroup5 = sorted([i for i in key_ls if 20190531 <= int(i.replace(\"-\",'')) < 20200529])","a9d09f8d":"for key in data.keys():\n    if key in dgroup1:\n        data[key][\"Group_size\"] = data[dgroup1[0]][\"Group_size\"]\n        data[key][\"Group_BM\"] = data[dgroup1[0]][\"Group_BM\"]\n    elif key in dgroup2:\n        data[key][\"Group_size\"] = data[dgroup2[0]][\"Group_size\"]\n        data[key][\"Group_BM\"] = data[dgroup2[0]][\"Group_BM\"]\n    elif key in dgroup3:\n        data[key][\"Group_size\"] = data[dgroup3[0]][\"Group_size\"]\n        data[key][\"Group_BM\"] = data[dgroup3[0]][\"Group_BM\"]  \n    elif key in dgroup4:\n        data[key][\"Group_size\"] = data[dgroup4[0]][\"Group_size\"]\n        data[key][\"Group_BM\"] = data[dgroup4[0]][\"Group_BM\"]  \n    elif key in dgroup5:\n        data[key][\"Group_size\"] = data[dgroup5[0]][\"Group_size\"]\n        data[key][\"Group_BM\"] = data[dgroup5[0]][\"Group_BM\"]  ","106f8847":"def cal_factor(data_day):\n    df = data_day.copy()\n    \n    # \u628a\u6bcf\u7ec4\u6570\u636e\u7b5b\u9009\u51fa\u6765\n    # \u5c0f\u5e02\u503c\u7ec4\n    g_sl = df[(df[\"Group_size\"] == \"S\") & (df[\"Group_BM\"] == \"L\")].copy()\n    g_sm = df[(df[\"Group_size\"] == \"S\") & (df[\"Group_BM\"] == \"M\")].copy()\n    g_sh = df[(df[\"Group_size\"] == \"S\") & (df[\"Group_BM\"] == \"H\")].copy()\n    # \u5927\u5e02\u503c\u7ec4\n    g_bl = df[(df[\"Group_size\"] == \"B\") & (df[\"Group_BM\"] == \"L\")].copy()\n    g_bm = df[(df[\"Group_size\"] == \"B\") & (df[\"Group_BM\"] == \"M\")].copy()\n    g_bh = df[(df[\"Group_size\"] == \"B\") & (df[\"Group_BM\"] == \"H\")].copy()\n    \n    # \u5c066\u4e2a\u7ec4\u653e\u5165\u5217\u8868\n    groups = [g_sl,g_sm,g_sh,g_bl,g_bm,g_bh]\n    \n    # \u8ba1\u7b97\u5e02\u503c\u6743\u91cd\u5e76\u8ba1\u7b97\u6574\u7ec4\u5e02\u503c\u52a0\u6743\u6536\u76ca\u7387\n    for g in groups:\n        g[\"weight\"] = g[\"market_value\"] \/ g[\"market_value\"].sum()\n    \n    # \u8ba1\u7b97\u6574\u7ec4\u5e02\u503c\u52a0\u6743\u6536\u76ca\u7387\n    sl = (g_sl[\"next_return\"] * g_sl[\"weight\"]).sum()\n    sm = (g_sm[\"next_return\"] * g_sm[\"weight\"]).sum()\n    sh = (g_sh[\"next_return\"] * g_sh[\"weight\"]).sum()\n    \n    bl = (g_bl[\"next_return\"] * g_bl[\"weight\"]).sum()\n    bm = (g_bm[\"next_return\"] * g_bm[\"weight\"]).sum()\n    bh = (g_bh[\"next_return\"] * g_bh[\"weight\"]).sum()\n    \n    # \u8ba1\u7b97\u5355\u671f\u56e0\u5b50\u503c\n    SMB = (sl + sm + sh) \/ 3 - (bl + bm + bh) \/3\n    HML = (sh + bh ) \/ 2 - (sl + bl) \/2\n    return SMB,HML","bb6c686d":"df_list = []\nfor key in sorted(list(data.keys())):\n    SMB, HML = cal_factor(data[key])\n    df_list.append(pd.DataFrame({\"SMB\":SMB, \"HML\":HML}, index = [key]))\nfactor_df = pd.concat(df_list)\n# \u5c06index\u8f6c\u4e3adatetime\u683c\u5f0f\nfactor_df.index = pd.to_datetime(factor_df.index)","e72df57a":"factor_df = factor_df.shift(1).dropna()\n\nfactor_df.head()","862971f5":"index_return = pd.read_csv(\"..\/input\/three-factor-ts\/index_return.csv\", index_col = 0, parse_dates = True)\nfactor_df[\"index_return\"] = index_return[\"index_return\"]\nfactor_df.head()","f4f213fd":"risk_free = pd.read_csv(\"..\/input\/three-factor-ts\/risk_free.csv\", index_col = 0, parse_dates = True)\nrisk_free","2fbb846b":"factor_df[\"risk_free\"] = risk_free[\"risk_free\"]\n\nfactor_df.head()","751021fc":"factor_df[\"market_premium\"] = factor_df[\"index_return\"] - factor_df[\"risk_free\"]\n\nindependent = factor_df[[\"SMB\",\"HML\",\"market_premium\"]]\nindependent.head()","6ed6751f":"# \u4ece\u5c0f\u5230\u5927\uff0c1\u4e3a\u6700\u5c0f\uff0c5\u4e3a\u6700\u5927\n# \u904d\u5386\u5b57\u5178\u7684\u952e\uff0c\u63d0\u53d6\u51fa\u6bcf\u4e2a\u952e\u5bf9\u5e94\u7684\u8868\u683c\u8fdb\u884c\u5904\u7406\nfor key in data.keys():\n    df = data[key].copy()\n    \n    # ============BM\u5206\u7ec4============\n    bm_cut = pd.qcut(df[\"BM\"], 5, labels = range(1,6))\n    df[\"BM_rank\"] = bm_cut\n    \n    # ============\u5e02\u503c\u5206\u7ec4============\n    mv_cut = pd.qcut(df[\"market_value\"], 5, labels = range(1,6))\n    df[\"MV_rank\"] = mv_cut\n    \n    data[key] = df\n    # \u5c06\u5904\u7406\u540e\u7684\u8868\u683c\u8986\u76d6\u56de\u5b57\u5178\u7684\u952e\u5bf9\u5e94\u7684\u539f\u8868\u683c","8ec4bb49":"def get_group_return(day_data):\n    df = day_data.copy()\n    \n    # \u5efa\u7acb\u6a21\u677f\u8868\u683c\n    template = pd.DataFrame(index = range(1,6), columns = range(1,6))\n    template.index.name = \"BM_rank\"\n    template.columns.name = \"MV_rank\"\n    \n    # \u904d\u5386\u6a21\u677f\u8868\u683c\u7684\u884c\/\u5217\uff0c\u4ee5\u6b64\u7b5b\u9009\u51fa\u5206\u7ec4\n    for row in template.index:\n        for col in template.columns:\n            group = df[(df[\"BM_rank\"] == row) & (df[\"MV_rank\"] == col)].copy()\n            # \u8ba1\u7b97\u7ec4\u5185\u80a1\u7968\u5e02\u503c\u52a0\u6743\u5e73\u5747\u6536\u76ca\u7387\n            # \u8ba1\u7b97\u6743\u91cd\n            group[\"weight\"] = group[\"market_value\"] \/ group[\"market_value\"].sum()\n            # \u8ba1\u7b97\u52a0\u6743\u6536\u76ca\u7387\n            group_return = (group[\"next_return\"] * group[\"weight\"]).sum()\n            # \u5c06\u6536\u76ca\u7387\u8d4b\u503c\u5230\u6a21\u677f\u7684\u5bf9\u5e94\u4f4d\u7f6e\n            template.loc[row,col] = group_return\n    return template","929d9c20":"return_dict = {}\n\nfor key in sorted(list(data.keys())):\n    day_data = data[key].copy()\n    return_dict[key] = get_group_return(day_data)","ad2fff66":"return_dict[\"2020-05-29\"]","d99f6ecd":"line_ls = []\nfor key in return_dict.keys():\n    df = return_dict[key]\n    \n    line = pd.DataFrame(index = [key])\n    for row in df.index:\n        for col in df.columns:\n            line[\"B{}M{}\".format(row,col)] = [df.loc[row,col]]\n    line_ls.append(line)\n    \n# \u5408\u5e76\u6570\u636e\u5e76\u5339\u914d\u65f6\u95f4\u6233(\u56e0\u4e3a\u65f6\u95f4\u6233\u5bf9\u5e94\u7684\u662f\u4e0b\u671f\u6536\u76ca\u7387),\u5e76\u8f6c\u6362\u4e3adatetime\nseries = pd.concat(line_ls)\ns1 = series.shift(1).dropna()\ns1.index = pd.to_datetime(s1.index)","efca1af8":"s1[\"risk_free\"] = risk_free[\"risk_free\"]\nrisk_premium = s1.iloc[:,:-1].apply(lambda x: x - s1.iloc[:,-1])\n# \u5c06\u8ba1\u7b97\u51fa\u7684\u6bcf\u7ec4\u5e02\u573a\u98ce\u9669\u6ea2\u4ef7\u6570\u636e\u4fdd\u5b58\u5230\u672c\u5730\n#risk_premium.to_csv(\".\/risk_premium.csv\")\n# \u67e5\u770b\u6bcf\u7ec4\u5e02\u573a\u98ce\u9669\u6ea2\u4ef7\nrisk_premium.head()","95ce873d":"m = sm.OLS(risk_premium[\"B1M1\"],sm.add_constant(independent))\nres = m.fit()\nres.summary()","ab457361":"m = sm.OLS(risk_premium[\"B2M1\"],sm.add_constant(independent))\nres = m.fit()\nres.summary()","8470225e":"m = sm.OLS(risk_premium[\"B3M1\"],sm.add_constant(independent))\nres = m.fit()\nres.summary()","0c33e93c":"m = sm.OLS(risk_premium[\"B4M1\"],sm.add_constant(independent))\nres = m.fit()\nres.summary()","660ccab3":"m = sm.OLS(risk_premium[\"B5M1\"],sm.add_constant(independent))\nres = m.fit()\nres.summary()","46ea4a2c":"T = 60\nN = 25\nL = 3","6762f454":"risk_premium.columns","ddb6fc5d":"# \u521b\u5efa\u7a7a\u5217\u8868\u7528\u6765\u63a5\u6536\u6bcf\u4e2a\u6295\u8d44\u7ec4\u5408\u7684\u622a\u8ddd\u9879\nalpha_v = []\n# \u521b\u5efa60 \u00d7 25\u7684\u77e9\u9635\uff0c\u7528\u6765\u63a5\u6536\u6b8b\u5dee\u77e9\u9635\nresi_mat = np.zeros((T,N))\n# \u904d\u538625\u4e2a\u6295\u8d44\u7ec4\u5408\u7684\u5217\u540d\uff0c\u6bcf\u6b21\u5faa\u73af\u5f97\u5230\u4e00\u4e2a\u7ec4\u5408\u768460\u671f\u98ce\u9669\u6ea2\u4ef7\u5e8f\u5217\nfor num,col in enumerate(risk_premium.columns):\n    # \u5c06\u4e00\u4e2a\u7ec4\u5408\u7684\u98ce\u9669\u6ea2\u4ef7\u5e8f\u5217\u4e0e\u4e09\u56e0\u5b50\u8fdb\u884c\u56de\u5f52\n    m = sm.OLS(risk_premium[col].values,sm.add_constant(independent.values))\n    res = m.fit()\n    # \u53d6\u51fa\u5355\u4e2a\u7ec4\u5408\u56de\u5f52\u7ed3\u679c\u7684\u622a\u8ddd\u9879\n    alpha_v.append(res.params[0])\n    # \u53d6\u51fa\u5355\u4e2a\u7ec4\u5408\u56de\u5f52\u7ed3\u679c\u7684\u6b8b\u5dee\u5e8f\u5217\n    resi_mat[:,num] = res.resid\nalpha_v = np.array(alpha_v)","a72dc68c":"resid_cov = np.cov(resi_mat.T) * ((60-1)\/(60-3-1))\n# \u67e5\u770b\u5934\u51e0\u884c\nresid_cov[:5,:]","ce580b04":"mean_v = risk_premium.mean().values\n\nmean_v","4169e09a":"risk_premium_cov = risk_premium.cov().values","8fa7af6d":"grs = (T\/N) * ((T-N-L) \/ (T-L-1)) * ((alpha_v.T.dot(np.linalg.inv(resid_cov)).dot(alpha_v.T))\\\n\/ (1 + mean_v.T.dot(np.linalg.inv(risk_premium_cov)).dot(mean_v)))\n\ngrs","8e39e16d":"from scipy.stats import f\nf.ppf(0.95,dfn=25,dfd=60-25-3)","86306070":"grs > f.ppf(0.95,dfn=25,dfd=60-25-3)","c090a5af":"> \u98ce\u9669\u6ea2\u4ef7\u534f\u65b9\u5dee\u7684\u65e0\u504f\u4f30\u8ba1","5a0cb2df":"> \u622a\u8ddd\u9879\uff08\u963f\u5c14\u6cd5\uff09\u5411\u91cf\u4ee5\u53ca\u6b8b\u5dee\u77e9\u9635","e0965aef":"\n\u6839\u636e\u6211\u4eec\u56e0\u5b50\u6784\u5efa\u7684\u5b9a\u4e49\uff0c\u5206\u7ec4\u4f9d\u636e\u662f\u4e00\u5e74\u4e2d5\u6708\u4efd\u7684\u6570\u636e\uff0c\u6bcf\u5e74\u8c03\u6574\u4e00\u6b21\u5206\u7ec4\n\n\u6240\u4ee5\uff0c\u5bf9\u4e8e\u6211\u4eec\u6570\u636e\u7684\u7b2c\u4e00\u7ec4\uff1a\n\u4ece2015\u5e746\u6708\u5f00\u59cb\u4e00\u76f4\u52302016\u5e744\u6708\u8fd911\u4e2a\u6708\u7684\u5e02\u503c\u3001BM\u8d26\u9762\u5e02\u503c\u6bd4\u5206\u7ec4\u90fd\u4e0e2015\u5e745\u6708\u7684\u76f8\u540c\n\n\u6211\u4eec\u9700\u8981\u4ece\u6240\u6709\u65e5\u671f\u4e2d\u627e\u51fa\u8fd911\u4e2a\u6708\u7684\u65e5\u671f\n\n\u64cd\u4f5c\u65b9\u6cd5\uff1a\n\n\u4f7f\u7528\u5217\u8868\u8868\u8fbe\u5f0f\uff0c\u5c06\u65e5\u671f\u4e2d\u7684\u6a2a\u7ebf\u66ff\u6362\u4e3a\u7a7a\uff0c\u7136\u540e\u8f6c\u6362\u4e3a\u6574\u6570\u5c31\u53ef\u4ee5\u8fdb\u884c\u5927\u5c0f\u6bd4\u8f83\u3002\u4f46\u51e1\u65e5\u671f\u5927\u4e8e20150529\u5e76\u4e14\u5c0f\u4e8e20160531\u7684\u6570\u636e","2f53a147":"# 4. CAPM\u65f6\u95f4\u5e8f\u5217\u68c0\u9a8c\u4e4b\u8054\u5408\u68c0\u9a8c-F\u68c0\u9a8c(GRS)","6eff61ba":"\u6b8b\u5dee\u77e9\u9635\u534f\u65b9\u5dee\u7684\u65e0\u504f\u4f30\u8ba1\u5e94\u8be5\u662f\u4e00\u4e2a25 \u00d7 25\u7684\u77e9\u9635\uff08\u6bcf\u4e2a\u7ec4\u5408\u4e0e\u5176\u4ed6\u7ec4\u5408\u6b8b\u5dee\u5e8f\u5217\u7684\u534f\u65b9\u5dee\uff09\n\n\u76f4\u63a5\u8c03\u7528np.cov()\u5bf9\u6b8b\u5dee\u77e9\u9635\u6c42\u534f\u65b9\u5dee\u5373\u53ef\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u9ed8\u8ba4np.cov\u5728\u8ba1\u7b97\u65f6\uff0c\u4f1a\u81ea\u52a8\u9664\u4ee5 \u89c2\u6d4b\u6570 - 1 \u8fdb\u884c\u6807\u51c6\u5316\uff0c\u4f46\u662fGRS\u7edf\u8ba1\u91cf\u7684\u81ea\u7531\u5ea6\u4e3a \u65f6\u95f4\u671f\u6570 - \u68c0\u9a8c\u7ec4\u5408\u4e2a\u6570 - 1\uff0c\u6240\u4ee5\u8981\u5bf9\u8ba1\u7b97\u51fa\u7684\u5199\u65b9\u5dee\u77e9\u9635\u6574\u4f53\u4e58\u4ee5 60 -1 \u518d\u9664\u4ee5 \u81ea\u7531\u5ea6 60 - 25 - 1","f8633f01":"## 2.3 \u6784\u902025\u4e2a\u5e02\u503c\uff0cBM\u6392\u5e8f\u6295\u8d44\u7ec4\u5408","ba611f78":"# 2.\u6839\u636e\u5e02\u503c\u3001BM\u5206\u7ec4","1186ab77":"\u5c06\u65e0\u98ce\u9669\u5229\u7387\u653e\u5165\u56e0\u5b50\u8868\uff0c\u4ee5\u5bf9\u5e02\u573a\u6536\u76ca\u7387\u56e0\u5b50\u8fdb\u884c\u8c03\u6574","a2c27e42":"## 2.1 \u8bfb\u5165\u4e0a\u8bc1\u6307\u6570\u6536\u76ca\u7387\u6570\u636e","80153e4c":"\u5c06\u7ec4\u5408\u6536\u76ca\u7387\u51cf\u53bb\u65e0\u98ce\u9669\u6536\u76ca\u7387\u83b7\u5f97\u5e02\u573a\u98ce\u9669\u6ea2\u4ef7","cd6dfa6c":"\u904d\u5386\uff0c\u5e76\u8ba1\u7b97\u7ed3\u679c","905dc4e8":"> \u572895%\u7684\u7f6e\u4fe1\u5ea6\u4e0bGRS\u7edf\u8ba1\u91cf\u503c\u5c0f\u4e8eF(25,60-25-3)\u7684\u4e34\u754c\u503c\uff0c\u6240\u4ee5\u4e0d\u80fd\u62d2\u7edd\u539f\u5047\u8bbe\uff01","71c58255":"> \u6b8b\u5dee\u534f\u65b9\u5dee\u7684\u65e0\u504f\u4f30\u8ba1","05fff2a2":"\u5bf9\u65f6\u95f4\u6bb5\u8fdb\u884c\u5206\u7c7b","b2d93d84":"> \u4ee5\u4e09\u56e0\u5b50\u6a21\u578b\u4e3a\u4f8b\n\n![%E4%B8%8B%E8%BD%BD.png](attachment:%E4%B8%8B%E8%BD%BD.png)\n\u5982\u679c\u6211\u4eec\u7684\u4e09\u4e2a\u56e0\u5b50\u6a21\u578b\u5bf9\u80a1\u7968\/\u6295\u8d44\u7ec4\u5408\u8fdb\u884c\u89e3\u91ca\uff0c\u5982\u679c\u89e3\u91ca\u6548\u679c\u597d\uff0c\u90a3\u4e48alpha\u5e94\u8be5\u4e3a0\n\n**\u8fdb\u884c\u5355\u68c0\u9a8c\u5c31\u662f\u68c0\u9a8c\u4e00\u652f\u80a1\u7968\/\u4e00\u4e2a\u6295\u8d44\u7ec4\u5408\u7684alpha\u662f\u5426\u4e3a0\uff08\u5229\u7528\u6a21\u578b\u56de\u5f52\u65f6\uff0c\u622a\u8ddd\u9879\u662f\u5426\u4e3a\u96f6\uff09**  \n**\u65b9\u6cd5\u5c31\u662f\uff1a`\u5bf9\u622a\u8ddd\u9879\u8fdb\u884c\u4e00\u4e2at\u68c0\u9a8c\u5373\u53ef`**   \n\u6211\u4eec\u8fdb\u884c\u56de\u5f52","1212896b":"\u5bfc\u5165\u6240\u9700\u7c7b\u5e93\uff1anumpy, pandas, statsmodels","8bb4c55b":"\u904d\u538625\u4e2a\u7ec4\u5408\u7684\u6ea2\u4ef7\u6536\u76ca\u7387\u8868\u7684\u5217\uff0c\u6bcf\u6b21\u63d0\u53d6\u51fa\u4e00\u5217\u5bf9\u4e09\u4e2a\u56e0\u5b50\u8fdb\u884c\u56de\u5f52\uff0c\u63d0\u53d6\u91cc\u9762\u7684\u622a\u8ddd\u9879\u7684\u4f30\u8ba1\u53c2\u6570","6fb38962":"\u6309\u7ec4\u8ba1\u7b97\u5e02\u503c\u52a0\u6743\u5e73\u5747","78586ff5":"\u8ba1\u7b97bl\u7ec4\u7684\u5e02\u503c\u52a0\u6743\u6536\u76ca\u7387","1057f890":"# 3. CAPM\u65f6\u95f4\u5e8f\u5217\u68c0\u9a8c\u4e4b\u5355\u8d44\u4ea7\u68c0\u9a8c","b8732ecb":"\u4e3a\u6240\u6709\u4e94\u6708\u6570\u636e\u8fdb\u884c\u5206\u7ec4\uff0c","fae92690":"\u5b9a\u4e49\u51fd\u6570","7523aefe":"\u56e0\u6b64\u670995%\u7684\u628a\u63e1\u8ba4\u4e3a\u73b0\u6709\u8bc1\u636e\u65e0\u6cd5\u63a8\u7ffb\u539f\u5047\u8bbe$\\alpha_1 = \\alpha_2 = ... = \\alpha_{25} = 0$, \u5373\u53ef\u4ee5\u8ba4\u4e3a\u4e09\u56e0\u5b50\u6a21\u578b\u5bf9\u4e0a\u8bc1\u6307\u6570\u6210\u5206\u6309\u5e02\u503c\u3001BM\u5206\u7ec4\u7684\u6240\u670925\u7ec4\u6295\u8d44\u7ec4\u5408\u7684\u8d85\u989d\u6536\u76ca\u7387\u89e3\u91ca\u6548\u679c\u826f\u597d","74d4f6ab":"> \u6311\u9009\u51faM1\u60c5\u51b5\u4e0bB1\u5230B5\u7ec4\u8fdb\u884c\u56de\u5f52\n\n\u53ef\u4ee5\u53d1\u73b0\u968f\u7740BM\u7684\u589e\u5927\uff0c\u57fa\u672c\u4e0d\u5f71\u54cd\u4e09\u56e0\u5b50\u6a21\u578b\u7684\u89e3\u91ca\u529b\u5ea6","ea9140db":"\u6839\u636e\u7edf\u8ba1\u91cf\u6784\u9020\u65b9\u6cd5\uff0c\u6784\u9020F\u7edf\u8ba1\u91cf","896acdbf":"\u67e5\u770b\u5176\u4e2d\u4e00\u671f","5282eb10":"> \u8ba1\u7b97F\u7edf\u8ba1\u91cf","a3542448":"> \u81ea\u7531\u5ea6","0f7fe81e":"\u6c42\u8d26\u9762\u5e02\u503c\u6bd4BM\uff0c\u4e3a\u5e02\u51c0\u7387\u7684\u5012\u6570","8ec28dc6":"\u9996\u5148\u63d0\u53d6\u51fa\u5b57\u5178\u6570\u636e\u6240\u6709\u7684\u952e\uff08\u5373\u65e5\u671f\uff09","81815786":"\u5c06\u5e02\u573a\u6536\u76ca\u7387\u51cf\u53bb\u65e0\u98ce\u9669\u6536\u76ca\u7387\u8c03\u6574\u5f97\u5230\u5e02\u573a\u6ea2\u4ef7","8a747640":"# 1.SMB\uff0cHML\u56e0\u5b50\u7684\u6784\u5efa","e54d0611":"   \nSMB: \u89c4\u6a21\u56e0\u5b50  \nHML\uff1a\u8d26\u9762\u5e02\u503c\u6bd4\u56e0\u5b50\n\n\u56e0\u6b64\u6211\u4eec\u9700\u8981\u7684\u6570\u636e\u662f\uff1a\n\nSMB\uff1a\u5e02\u503c\u6570\u636e  \nHML\uff1a\u8d26\u9762\u5e02\u503c\u6bd4(\u6bcf\u80a1\u51c0\u8d44\u4ea7\/\u6bcf\u80a1\u4ef7\u683c\uff0c\u5e02\u51c0\u7387\u7684\u5012\u6570)  ","9a742ea6":"![grs.png](attachment:grs.png)","20a2846d":"\u56e0\u4e3a\u6570\u636e\u4e2d\u7684\u6536\u76ca\u7387\u662f\u4e0b\u671f\u6536\u76ca\u7387\uff0c\u6700\u540e\u8981\u8fdb\u884c\u4e00\u4e2a\u65f6\u95f4\u6233\u7684\u8c03\u6574\uff0c\u4f7f\u5f97\u6570\u636e\u548c\u65e5\u671f\u5bf9\u5e94","f3ae9512":"## 1.1\u8bfb\u53d6\u6570\u636e","4e1728da":"\u8054\u5408\u68c0\u9a8c\u5c31\u662f\u5bf9\u4e00\u7cfb\u5217\u80a1\u7968\/\u6295\u8d44\u7ec4\u5408\u7684alpha\u8fdb\u884c\u68c0\u9a8c\uff0c\u68c0\u9a8c\u8fd9\u4e9b\u80a1\u7968\/\u6295\u8d44\u7ec4\u5408\u7684\u98ce\u9669\u6ea2\u4ef7\u5728\u7528\u6a21\u578b\u89e3\u91ca\u65f6__\u662f\u5426\u540c\u65f6\u4e3a0__\n\n\u6211\u4eec\u901a\u8fc7\u6784\u9020F\u7edf\u8ba1\u91cf\u8fdb\u884c\u8054\u5408\u68c0\u9a8c\uff0c\u68c0\u9a8c\u7684\u539f\u5047\u8bbe\u5c31\u662f __\u6240\u6709\u88ab\u68c0\u9a8c\u80a1\u7968\/\u7ec4\u5408alpha\u540c\u65f6\u4e3a0__\uff0c\u5982\u679c\u4e0d\u80fd\u62d2\u7edd\u539f\u5047\u8bbe\uff0c\u5219\u8bf4\u660e\u6a21\u578b\u89e3\u91ca\u6548\u679c\u826f\u597d\n\n> \u6211\u4eec\u6765\u770bF\u7edf\u8ba1\u91cf\u5982\u4f55\u6784\u9020","97658ede":"\u4e5f\u5c31\u662f25\u4e2a\u6295\u8d44\u7ec4\u5408\u7684\u98ce\u9669\u6ea2\u4ef7\u7684\u5747\u503c","ffe42015":"\u627e\u5230\u6240\u6709\u4e94\u6708\u6570\u636e","0a8ac961":"60\u671f\u56de\u5f52 \u00d7 25\u4e2a\u6295\u8d44\u7ec4\u5408 = 1250\u4e2a\u5143\u7d20\u7684\u6b8b\u5dee\u77e9\u9635","299ff3ea":"## 1.2 \u8ba1\u7b97\u8d26\u9762\u5e02\u503c\u6bd4","04647826":"\u5c06\u5e02\u503c\u548cBM\u4ece\u5c0f\u5230\u5927\u5206\u4e3a5\u7ec4\uff0c\u4ea7\u751f25\u79cd\u7ec4\u5408\uff0c\u8ba1\u7b97\u5e02\u503c\u52a0\u6743\u5e73\u5747\u6536\u76ca\u7387\uff0c\u5f97\u523025\u4e2a\u8d44\u4ea7\u7ec4\u5408\n\npd.qcut\u4e3a\u5206\u4f4d\u6570\u5de6\u5f00\u53f3\u95ed\u533a\u95f4","cfaabe94":"> \u6837\u672c\u5747\u503c\u5411\u91cf ","7f9dc591":"\u8be5\u6570\u636e\u4e3a\u4e0a\u8bc1\u7efc\u6307\u6240\u6709\u6210\u5206\u80a1\u79682015\u5e745\u670829\u65e5\u52302020\u5e745\u670829\u65e5\u5171\u8ba161\u4e2a\u6708\u7684\u6708\u5ea6\u7684\u5e02\u51c0\u7387PB\u3001\u5e02\u503cmarket_value\u3001\u4e0b\u671f\u6536\u76canext_return\u3001\u505c\u724cpaused\u3001ST\u80a1st\u6570\u636e\u3002   \n\u6570\u636e\u4e3a\u9762\u677f\u6570\u636e\uff0c\u6570\u636e\u7ec4\u7ec7\u5f62\u5f0f\u4e3a\u4ee5\u65e5\u671f\u4e3a\u952e\uff0c\u5355\u671f\u6a2a\u622a\u9762\u6570\u636eDataFrame\u4e3a\u503c\u7684\u7684\u5b57\u5178\u3002","042ee619":"![%E4%B8%8B%E8%BD%BD%20%282%29.png](attachment:%E4%B8%8B%E8%BD%BD%20%282%29.png)","b70dc8e2":"\u8f6c\u6362\u4e3a\u5e8f\u5217","0d4285fb":"\u5176\u4f594\u5e74\u7684\u5982\u6cd5\u70ae\u5236","a5b412d6":"## 1.3 \u6784\u5efaSMB, HML\u56e0\u5b50","2185cc06":"## 2.2 \u8bfb\u5165\u65e0\u98ce\u9669\u6536\u76ca\u7387\u6570\u636e\uff1a\n\u6570\u636e\u4e3aCSMAR\u6708\u5ea6\u5316\u65e0\u98ce\u9669\u6536\u76ca\u7387\uff0c\u57fa\u51c6\u4e3a\u4e00\u5e74\u671f\u5b9a\u671f\u6574\u5b58\u6574\u53d6\u5229\u7387","ee4fde06":"\u4e5f\u5c31\u662f\u6211\u4eec\u7684risk_premium\u8fd9\u5f20\u8868\uff0c\u6211\u4eec\u8c03\u7528.values\u5c5e\u6027\u83b7\u5f97ndarray","d83fb4a3":"Alpha\u5c31\u662f\u4e0d\u80fd\u88ab\u5b9a\u4ef7\u6a21\u578b\u89e3\u91ca\u7684\u90e8\u5206\uff0cAlpha \u68c0\u9a8c\u53ef\u4ee5\u7528\u4e8e\u68c0\u9a8c\u5b9a\u4ef7\u6a21\u578b\u662f\u5426\u6709\u6548\uff0c\u5728\u5229\u7528\u6a21\u578b\u8fdb\u884c\u56de\u5f52\u65f6\uff0calpha\u5c31\u662f\u6211\u4eec\u7684\u622a\u8ddd\u9879\u3002","f3c210d7":"> \u67e5\u770b\u4e34\u754c\u503c\n\ngrs\u670d\u4ece\u4e8eF(25,60-25-3)\u5206\u5e03,\u8be5\u5206\u5e03\u4e34\u754c\u503c\u4e3a1.85"}}