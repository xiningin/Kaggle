{"cell_type":{"5f9bfda2":"code","bd76e421":"code","69fa6160":"code","3ed76480":"code","76f70938":"code","66135c1b":"code","a56bf287":"code","e03b9fb6":"code","bd6d4c77":"code","af07209a":"code","03a8bc44":"code","67660c6e":"code","b0ddbdd8":"code","d7f23823":"code","f03012cc":"code","40825b6f":"code","0da77386":"code","f6f46981":"code","2c6e9958":"code","4eb8846a":"code","6e70d961":"code","ef1371c0":"code","66f815a0":"code","5b204564":"code","9ca55888":"code","8c85d329":"code","ec45aad1":"code","a8e8d894":"markdown","8ed54ef5":"markdown"},"source":{"5f9bfda2":"#Import some packages to use\nimport cv2\nimport numpy as np\nimport pandas as pd\nfrom subprocess import check_output\n\nimport matplotlib.pyplot as plt\n%matplotlib inline \n\n#To see our directory\nimport os\nimport random\nimport gc   #Gabage collector for cleaning deleted data from memory","bd76e421":"train_dir = '..\/input\/dogs-vs-cats-redux-kernels-edition\/train'\ntest_dir = '..\/input\/dogs-vs-cats-redux-kernels-edition\/test'\n\ntrain_dogs = ['..\/input\/dogs-vs-cats-redux-kernels-edition\/train\/{}'.format(i) for i in os.listdir(train_dir) if 'dog' in i]  #get dog images\ntrain_cats = ['..\/input\/dogs-vs-cats-redux-kernels-edition\/train\/{}'.format(i) for i in os.listdir(train_dir) if 'cat' in i]  #get cat images\nprint(train_dogs[0])\nprint(train_cats[0])\ntest_imgs = ['..\/input\/dogs-vs-cats-redux-kernels-edition\/test\/{}'.format(i) for i in os.listdir(test_dir)] #get test images\n\ntrain_imgs = train_dogs[:2000] + train_cats[:2000]  # slice the dataset and use 2000 in each class\nrandom.shuffle(train_imgs)  # shuffle it randomly\n\n#Clear list that are useless\ndel train_dogs\ndel train_cats\ngc.collect()   #collect garbage to save memory","69fa6160":" import matplotlib.image as mpimg\n for ima in train_imgs[900:903]:\n     img=mpimg.imread(ima)\n     imgplot = plt.imshow(img)\n     plt.show()","3ed76480":"#Lets declare our image dimensions\n#we are using coloured images. \nnrows = 150\nncolumns = 150\nchannels = 3  #change to 1 if you want to use grayscale image\n\n\n#A function to read and process the images to an acceptable format for our model\ndef read_and_process_image(list_of_images):\n    \"\"\"\n    Returns two arrays: \n        X is an array of resized images\n        y is an array of labels\n    \"\"\"\n    X = [] # images\n    y = [] # labels\n    \n    for image in list_of_images:\n        X.append(cv2.resize(cv2.imread(image, cv2.IMREAD_COLOR), (nrows,ncolumns), interpolation=cv2.INTER_CUBIC)) \n        #Read the image\n        #get the labels\n        if 'dog' in image[-15::]:\n            y.append(1)\n        elif 'cat' in image[-15::]:\n            y.append(0)\n    \n    return X, y","76f70938":"#get the train and label data\nX, y = read_and_process_image(train_imgs)","66135c1b":"#Lets view some of the pics\nplt.figure(figsize=(20,10))\ncolumns = 5\nfor i in range(columns):\n    plt.subplot(5 \/ columns + 1, columns, i + 1)\n    plt.imshow(X[i])","a56bf287":"import seaborn as sns\ndel train_imgs\ngc.collect()\n\n#Convert list to numpy array\nX = np.array(X)\ny = np.array(y)\n\n#Lets plot the label to be sure we just have two class\nsns.countplot(y)\nplt.title('Labels for Cats and Dogs')","e03b9fb6":"print(\"Shape of train images is:\", X.shape)\nprint(\"Shape of labels is:\", y.shape)","bd6d4c77":"#Lets split the data into train and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.20, random_state=2)\n\nprint(\"Shape of train images is:\", X_train.shape)\nprint(\"Shape of validation images is:\", X_val.shape)\nprint(\"Shape of labels is:\", y_train.shape)\nprint(\"Shape of labels is:\", y_val.shape)","af07209a":"#clear memory\ndel X\ndel y\ngc.collect()\n\n#get the length of the train and validation data\nntrain = len(X_train)\nnval = len(X_val)\n\n#We will use a batch size of 32. Note: batch size should be a factor of 2.***4,8,16,32,64...***\nbatch_size = 32","03a8bc44":"from keras.applications import InceptionResNetV2\n\nconv_base = InceptionResNetV2(weights='imagenet', include_top=False, input_shape=(150,150,3))","67660c6e":"conv_base.summary() #print out to see its ","b0ddbdd8":"from keras import layers\nfrom keras import models\n\nmodel = models.Sequential()\nmodel.add(conv_base)\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(8192, activation='relu'))\nmodel.add(layers.Dense(1024, activation='relu'))\nmodel.add(layers.Dense(256, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))  #Sigmoid function at the end because we have just two classes\n'''\nx=layers.Flatten()(conv_base.layers[-5].output)\nx=layers.Dense(8192,activation='relu')(x)\nx=layers.Dense(1024,activation='relu')(x) #we add dense layers so that the model can learn more complex functions and classify for better results.\nx=layers.Dense(512,activation='relu')(x) #dense layer 2\nx=layers.Dense(256,activation='relu')(x) #dense layer 3\npreds=layers.Dense(1,activation='sigmoid')(x) #final layer with softmax activation\nmodel1=models.Model(inputs=conv_base.input,outputs=preds)\n'''","d7f23823":"#Lets see our model\nmodel.summary()","f03012cc":"print('Number of trainable weights before freezing the conv base:', len(model1.trainable_weights))\nconv_base.trainable = False\nprint('Number of trainable weights after freezing the conv base:', len(model1.trainable_weights))","40825b6f":"# In[6]:#check which layer is trainable \nfor i,layer in enumerate(model.layers):\n    if layer.trainable==True:\n        print(i,layer.name,'Ture')\n    else:\n        print(i,layer.name,'False')","0da77386":"'''\nfor layer in model1.layers[:775]:\n    layer.trainable=False\nfor layer in model1.layers[775:]:\n    layer.trainable=True\n'''","f6f46981":"#We'll use the RMSprop optimizer with a learning rate of 0.0001\n#We'll use binary_crossentropy loss because its a binary classification\nfrom keras import optimizers\n\nmodel.compile(loss='binary_crossentropy', optimizer=optimizers.RMSprop(lr=2e-5), metrics=['acc'])","2c6e9958":"#Lets create the augmentation configuration\n#This helps prevent overfitting, since we are using a small dataset\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing.image import img_to_array, load_img\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,   #Scale the image between 0 and 1\n                                    rotation_range=40,\n                                    width_shift_range=0.2,\n                                    height_shift_range=0.2,\n                                    shear_range=0.2,\n                                    zoom_range=0.2,\n                                    horizontal_flip=True,\n                                    fill_mode='nearest')\n\nval_datagen = ImageDataGenerator(rescale=1.\/255)  #We do not augment validation data. we only perform rescale","4eb8846a":"#Create the image generators\ntrain_generator = train_datagen.flow(X_train, y_train,batch_size=batch_size)\nval_generator = val_datagen.flow(X_val, y_val, batch_size=batch_size)","6e70d961":"\n#The training part\n#We train for 64 epochs with about 100 steps per epoch\nhistory = model.fit_generator(train_generator,\n                              steps_per_epoch=ntrain \/\/ batch_size,\n                              epochs=20,\n                              validation_data=val_generator,\n                              validation_steps=nval \/\/ batch_size)","ef1371c0":"#Save the model\nmodel.save_weights('modelTL_wieghts.h5')\nmodel.save('modelTL_keras.h5')","66f815a0":"\n#lets plot the train and val curve\nimport matplotlib.pyplot as plt\n\n#get the details form the history object\nacc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(acc) + 1)\n\n#Train and validation accuracy\nplt.plot(epochs, acc, 'b', label='Training accurarcy')\nplt.plot(epochs, val_acc, 'r', label='Validation accurarcy')\nplt.title('Training and Validation accurarcy')\nplt.legend()\n\nplt.figure()\n#Train and validation loss\nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and Validation loss')\nplt.legend()\n\nplt.show()","5b204564":"\ndef smooth_plot(points, factor=0.7):\n    smooth_pts = []\n    for point in points:\n        if smooth_pts:\n            previous = smooth_pts[-1]\n            smooth_pts.append(previous * factor + point * (1 - factor))\n        else:\n            smooth_pts.append(point)\n    return smooth_pts","9ca55888":"\n#Plot figure\nplt.plot(epochs, smooth_plot(acc), 'b', label='Training accurarcy')\nplt.plot(epochs, smooth_plot(val_acc), 'r', label='Validation accurarcy')\nplt.title('Training and Validation accurarcy')\nplt.legend()\nplt.show()","8c85d329":"#Now lets predict on the first 10 Images of the test set\nX_test, y_test = read_and_process_image(test_imgs[0:10]) #Y_test in this case will be empty.\nx = np.array(X_test)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)","ec45aad1":"i = 0\ncolumns = 5\ntext_labels = []\nplt.figure(figsize=(30,20))\nfor batch in test_datagen.flow(x, batch_size=1):\n    pred = model.predict(batch)\n    if pred > 0.5:\n        text_labels.append('dog')\n    else:\n        text_labels.append('cat')\n    plt.subplot(5 \/ columns + 1, columns, i + 1)\n    plt.title('This is a ' + text_labels[i])\n    imgplot = plt.imshow(batch[0])\n    i += 1\n    if i % 10 == 0:\n        break\nplt.show()","a8e8d894":"Let's create a function that makes our plot looks smoother and cleaner.","8ed54ef5":"Add pretraines model to use "}}