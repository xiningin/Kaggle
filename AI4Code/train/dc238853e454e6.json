{"cell_type":{"62e08014":"code","f0c28d9e":"code","e358f4e7":"code","95be8d3e":"code","93877c20":"code","8cabbb3d":"code","3c3d2f4d":"code","0aa70b80":"code","23dee559":"code","9f33509a":"code","5a3297b5":"code","aa9862ab":"code","b56ba342":"code","fdc737e9":"code","5d45a796":"code","ac7d2158":"code","a2cefbe7":"code","467cd589":"markdown","3d6ea62c":"markdown","b1b50758":"markdown","88f249de":"markdown","a59e7ce6":"markdown","ef7927ec":"markdown","a2c6b392":"markdown","f2dbb70c":"markdown","06745be8":"markdown","04f70a22":"markdown","fa4d82bf":"markdown","43b246b9":"markdown","4b3a7314":"markdown","7c1da1cc":"markdown","e0352247":"markdown","5e6f0c07":"markdown"},"source":{"62e08014":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f0c28d9e":"import time\nfrom datetime import datetime\nimport plotly_express as px\nfrom plotly.offline import init_notebook_mode\nfrom collections import defaultdict\nimport seaborn as sns\nfrom matplotlib.pyplot import figure\ninit_notebook_mode(connected=True)\n\ndef plot_stock_data(data,title):\n    '''function for plotting stock data'''\n    plot = px.line(data, \n                        x=\"Date\", \n                        y=[\"Close\"], \n                        hover_name=\"Date\",\n                        line_shape=\"linear\",\n                        title=title) \n    return plot","e358f4e7":"# get csv encoding type\nimport chardet    \nrawdata = open('..\/input\/stock-spac\/SPAC Spreadsheet - Sort filter and export the SPACTRAX list.csv', 'rb').read()\nresult = chardet.detect(rawdata)\ncharenc = result['encoding']\nprint(charenc)\n\n# load in SPAC data\n# dateparse = lambda c: pd.to_datetime(c, format='%m\/%d\/%Y', errors='coerce')\ndateparse = lambda c: pd.to_datetime(c, format='%Y-%m-%d', errors='coerce')\n        \nspac = pd.read_csv('..\/input\/stock-spac\/SPAC Spreadsheet - Sort filter and export the SPACTRAX list.csv',\n                  parse_dates=['Initial S-1 Date', 'IPO Date', 'Definitive Agreement'], date_parser=dateparse, encoding = charenc)\n","95be8d3e":"spac.head()","93877c20":"print(\"number of all stocks in spacs info csv file  : %d \" % len(spac))\nspac_target_announced = spac[spac['Stage'].isin(['3. Target Announced', '4. Deal Approved', '5. Merger Complete']) ]\nspac_target_announced.dropna(subset=['Definitive Agreement'], inplace=True)\nprint(\"number of all stocks where target is announced: %d \" % len(spac_target_announced)) \nsym_date = spac_target_announced[[\"Shares Symbol\", \"Definitive Agreement\", \"IPO Date\", \"Initial Size (in\u00a0millions)\", \"Tags\", \"Sponsors\", \"Underwriters\"]]","8cabbb3d":"#show some data\nsym_date = sym_date.reset_index()\nsym_date.head()","3c3d2f4d":"#get prices_diffs, prices_pmaxs\n\nfound_count = 0\nprices_diffs_avg= [] # 7days average price difference betweeen accqusition target info released ('Definitive Agreement date')\nprices_diffs_max= [] # 7days max\/average price difference betweeen accqusition target info released ('Definitive Agreement date')\nprices_pmaxs= [] # maximum price of stocks for all time period\nprices_premn= []\nprices_prepreratio1= []\nprices_prepreratio2= []\nprices_prepreratio3= []\nvolume_prepreratio1= []\nvolume_prepreratio2= []\nvolume_prepreratio3= []\n\nfor i in range(len(sym_date)):\n    symbol = sym_date['Shares Symbol'][i]\n    date = sym_date['Definitive Agreement'][i]\n    path = \"..\/input\/stock-spac\/spac_dailyprice\/%s.csv\" % (symbol)\n    if os.path.exists(path):\n        dateparse = lambda dates: pd.datetime.strptime(dates, '%Y-%m-%d')\n        stock = pd.read_csv(path, index_col='Date', parse_dates=['Date'], date_parser=dateparse)\n        # calc 7 day stock prices right BEFORE Definitive Agreement date\n        pre_price = stock[date-pd.to_timedelta(7, unit='d') : date-pd.to_timedelta(1, unit='d')]['Close'] \n        # calc 7 day stock prices right AFTER Definitive Agreement date\n        aft_price = stock[date : date+pd.to_timedelta(7, unit='d')]['Close'] \n        if len(pre_price) < 2:\n            print(\"possible error: not enought pre_price data, merged right after ipo\")\n            print(symbol)\n            print(date)\n            print(i)\n            sym_date = sym_date.drop([i])\n        elif len(aft_price) < 2:\n            print(\"possible error: not enought aft_price data, just announced target\")\n            print(symbol)\n            print(date)\n            print(i)\n            sym_date = sym_date.drop([i])\n        else:\n            # calc 7 day average for both before and after \n            avg_price_diff = np.mean(aft_price) - np.mean(pre_price) \n            prices_diffs_avg.append(avg_price_diff)\n            assert not pd.isna(avg_price_diff), \"possible error: avg_price_diff is nan. {} {}\".format(symbol, date)\n            # calc 7 day max for after and 7 day mean for before\n            avg_price_diff = np.max(aft_price) - np.mean(pre_price) \n            prices_diffs_max.append(avg_price_diff)\n            assert not pd.isna(avg_price_diff), \"possible error: avg_price_diff is nan. {} {}\".format(symbol, date)\n            # \n            tmp = stock[date-pd.to_timedelta(14, unit='d') : date-pd.to_timedelta(7, unit='d')]['Close'] \n            prices_prepreratio1.append(np.mean(pre_price)\/np.mean(tmp) )\n            prices_prepreratio2.append(pre_price[-1]\/np.mean(pre_price) )\n            tmp = stock[date-pd.to_timedelta(31, unit='d') : date-pd.to_timedelta(1, unit='d')]['Close'] \n            prices_prepreratio3.append(pre_price[-1]\/np.mean(tmp) )\n            #\n            pre_vol = stock[date-pd.to_timedelta(7, unit='d') : date-pd.to_timedelta(1, unit='d')]['Volume'] \n            tmp = stock[date-pd.to_timedelta(14, unit='d') : date-pd.to_timedelta(7, unit='d')]['Volume'] \n            if np.mean(tmp) > 0:\n                volume_prepreratio1.append(min(np.mean(pre_vol)\/np.mean(tmp), 4.0 ))\n            else:\n                volume_prepreratio1.append(0)\n            if np.mean(pre_vol) > 0:\n                volume_prepreratio2.append(min(pre_vol[-1]\/np.mean(pre_vol), 4.0 ))\n            else:\n                volume_prepreratio1.append(0)\n            #\n            prices_premn.append(np.mean(pre_price))\n            found_count += 1\n            prices_pmaxs.append(stock[:date]['Close'].max())\n#           if avg_price_diff < 1:\n#               print(pre_price)\n#               print(aft_price)\n#               print(symbol)\n    else:\n        sym_date = sym_date.drop([i])\nprint(found_count)\nprint(len(prices_diffs_avg))\nprint(len(prices_diffs_max))\nprint(len(sym_date))\nprices_diffs_avg = np.array(prices_diffs_avg)  \nprices_diffs_max = np.array(prices_diffs_max)  \nprices_pmaxs = np.array(prices_pmaxs) \nprices_premn = np.array(prices_premn)\nprices_prepreratio1 = np.array(prices_prepreratio1)\nprices_prepreratio2 = np.array(prices_prepreratio2)\nprices_prepreratio3 = np.array(prices_prepreratio3)\nvolume_prepreratio1 = np.array(volume_prepreratio1)\nvolume_prepreratio2 = np.array(volume_prepreratio2)\nvolume_prepreratio3 = np.array(volume_prepreratio3)\n\nsym_date = sym_date.reset_index() \nsym_date[\"Price diff\"] = prices_diffs_max\nsym_date[\"Price premn\"] = prices_premn\nsym_date[\"Price prepriceratio7days\"] = prices_prepreratio1 # average of 7-0 days before aggreement date devide that of  14-7 days \nsym_date[\"Price 7dayaverage\"] = prices_prepreratio2        # last before aggreement date devide that of average of 7-0 days\nsym_date[\"Volume prepriceratio7days\"] = volume_prepreratio1\nsym_date[\"Volume 7dayaverage\"] = volume_prepreratio2","0aa70b80":"\nimport matplotlib.pyplot as plt\n\nn, bins, patches = plt.hist(prices_diffs_max, 24, range=[-3, 20])\nplt.title(\"Histgram: Prices differences between 'Definitive Agreement date' where x axis is the diff value in dollars and y axis is the count\")\nplt.xlabel('Price')\nplt.ylabel('Counts')\nplt.show()\n\nn, bins, patches = plt.hist(prices_pmaxs)\nplt.title(\"Histgram: Maximum price during the whole stock life\")\nplt.xlabel('Price')\nplt.ylabel('Counts')\nplt.show()\n\nprint(\"prices_premn - mean price before Definitive Agreement Date\uff1a\")\nprint(np.mean(prices_premn))\nprint(\"prices_diffs_avg - mean earing per stock for buying spacs before Definitive Agreement Date (and sold on 7 day average after)\uff1a\")\nprint(np.mean(prices_diffs_avg))\nprint(\"prices_diffs_max - mean earing per stock for buying spacs before Definitive Agreement Date (and sold on 7 day maximum after)\uff1a\")\nprint(np.mean(prices_diffs_max))\n# print(prices_diffs_max)\nprint(\"Number of stock that end up lower: {} out of {}\".format(np.sum(prices_diffs_avg<0), len(prices_diffs_avg)))","23dee559":"potential_spac_symbol = []\npotential_spac_pricediffs = []\npotential_spac_diffedates = []\nsudden_price_diff_threshold = 0.5\n\nfor i in range(len(sym_date)):\n    symbol = sym_date['Shares Symbol'][i]\n    date = sym_date['Definitive Agreement'][i]\n    path = \"..\/input\/stock-spac\/spac_dailyprice\/%s.csv\" % (symbol)\n    if os.path.exists(path):\n        dateparse = lambda dates: pd.datetime.strptime(dates, '%Y-%m-%d')\n        stock = pd.read_csv(path, index_col='Date', parse_dates=['Date'], date_parser=dateparse)\n        first_date = stock.index.values[0]\n        if len(stock[:date]) > 45:\n            last_times2 = stock[first_date+pd.to_timedelta(30, unit='d'): date].index.values\n            tmpa = []\n            tmpb = []\n            last_time = last_times2[0]\n            for timee in last_times2:\n                before = stock[timee-pd.to_timedelta(7, unit='d') : timee-pd.to_timedelta(1, unit='d')]['Close'] \n                after = stock[timee : timee + pd.to_timedelta(7, unit='d')]['Close']\n                price_diff = np.mean(after) - np.mean(before)\n                if price_diff > sudden_price_diff_threshold and timee - last_time > pd.to_timedelta(7, unit='d'):\n                    tmpa.append(price_diff)\n                    tmpb.append(date - timee)\n                    last_time = timee \n            potential_spac_symbol.append(symbol)\n            potential_spac_pricediffs.append(tmpa)\n            potential_spac_diffedates.append(tmpb)\n\ncounta = 0\nfor tmp in potential_spac_pricediffs:\n    counta += len(tmp)\ncountb = 0\nfor tmp in potential_spac_diffedates:\n    for tmpp in tmp:\n        if tmpp > pd.to_timedelta(7, unit='d'):\n            countb+=1\n            \n# print(count)\n# print(np.sum(prices_diffs_avg  > 1))\nprint(\"Total number of stocks considered {}\".format(len(potential_spac_symbol)))\nprint(\"Defined suuden increase limit is > {} between 7 days average\".format(sudden_price_diff_threshold))\nprint(\"potential number of sudden increase(including finaldays) {}\".format(counta))\nprint(\"potential number of sudden increase(excluding finaldays) {}\".format(countb))\n            ","9f33509a":"figure(num=None, figsize=(20, 6), dpi=80, facecolor='w', edgecolor='k')\nplt.title(\"The date where SPACs are ipoed\")\nn, bins, patches = plt.hist(sym_date[\"IPO Date\"], bins=26)\nplt.xlabel('Dates')\nplt.ylabel('Counts')\nplt.show()\n\nfigure(num=None, figsize=(20, 6), dpi=80, facecolor='w', edgecolor='k')\nplt.title(\"The date where SPACs announced their final target (Definitive Agreement Date)\")\nn, bins, patches = plt.hist(sym_date[\"Definitive Agreement\"], bins=26)\nplt.xlabel('Dates')\nplt.ylabel('Counts')\nplt.show()\n\nfigure(num=None, figsize=(20, 6), dpi=80, facecolor='w', edgecolor='k')\nplt.title(\"The month of year when Definitive Agreement is announced\")\nsym_date[\"Definitive Agreement\"].groupby(sym_date[\"Definitive Agreement\"].dt.month).count().plot(kind=\"bar\")\nplt.xlabel('Month')\nplt.ylabel('Counts')\nplt.show()\n\nfigure(num=None, figsize=(20, 6), dpi=80, facecolor='w', edgecolor='k')\nreleased_info_after_ipo_days = ((sym_date[\"Definitive Agreement\"] - sym_date[\"IPO Date\"])\/ np.timedelta64(1, 'D')).astype(int)\nprint(\"Average Number of days gapped beteween Definitive Agreement date and IPO Date: %d\" % np.mean(released_info_after_ipo_days))\nn, bins, patches = plt.hist(released_info_after_ipo_days, bins=26)\nsym_date[\"Days gapped\"] = released_info_after_ipo_days\nplt.title(\"Gap beteween Definitive Agreement date  and IPO Date\")\nplt.xlabel('Days')\nplt.ylabel('Counts')\nplt.show()\n","5a3297b5":"days_money_sum = np.array([0.0]*(sym_date[\"Days gapped\"].max()\/\/91+1))\ndays_money_cnt = np.array([0]*(sym_date[\"Days gapped\"].max()\/\/91+1))\n# print(len(days_money_cnt))\nfor index, row in sym_date.iterrows():\n    pos = row[\"Days gapped\"] \/\/ 91\n    days_money_sum[pos] += row[\"Price diff\"]\n    days_money_cnt[pos] += 1\n    \ntmp = days_money_sum\/days_money_cnt\nidx = 1\nfor price, count in zip(tmp, days_money_cnt):\n    print(\"mean earing per stock if acquisition target is announced in the {}th quarter after IPO (out of {} sotcks): {}\".format(idx, count, price))\n    idx += 1\n\nsns.jointplot(x=\"Days gapped\", y=\"Price diff\", data=sym_date, kind='hex', \n              gridsize=40)\nplt.show()","aa9862ab":"\nsns.jointplot(x=\"Price premn\", y=\"Price diff\", data=sym_date, kind='hex', \n              gridsize=40)\nplt.show()\nsns.jointplot(x=\"Price prepriceratio7days\", y=\"Price diff\", data=sym_date, kind='hex', \n              gridsize=40)\nplt.show()\nsns.jointplot(x=\"Price 7dayaverage\", y=\"Price diff\", data=sym_date, kind='hex', \n              gridsize=40)\nplt.show()\nsns.jointplot(x=\"Volume prepriceratio7days\", y=\"Price diff\", data=sym_date, kind='hex', \n              gridsize=40)\nplt.show()\nsns.jointplot(x=\"Volume 7dayaverage\", y=\"Price diff\", data=sym_date, kind='hex', \n              gridsize=40)\nplt.show()","b56ba342":"sns.jointplot(x=\"Initial Size (in\u00a0millions)\", y=\"Price diff\", data=sym_date, kind='hex', \n              gridsize=40)\n\nabc = figure(num=None, figsize=(15, 15), dpi=80, facecolor='w', edgecolor='k')\ntmp_df = sym_date [[\"Initial Size (in\u00a0millions)\", \"Price diff\"]]\ntmp_df.plot(x='Initial Size (in\u00a0millions)', y='Price diff', kind=\"scatter\", marker='.')\nplt.show()","fdc737e9":"cate_money_sum = defaultdict(float)\ncate_money_cnt = defaultdict(int)\n \nfor index, row in sym_date.iterrows():\n    if not pd.isna(row[\"Tags\"]):\n        categories_list = row[\"Tags\"].split(',') \n        categories_list = [i.strip() for i in categories_list]\n        for category in categories_list:\n            cate_money_sum[category] += row[\"Price diff\"]\n            cate_money_cnt[category] += 1\n\nresults = []\nfor k in cate_money_sum.keys():\n    avg = cate_money_sum[k] \/ cate_money_cnt[k]\n    results.append((k, avg, cate_money_cnt[k]))\n    \nresults.sort(key = lambda x: x[1], reverse=True) \nprint(\"mean earing per stock if the company is specialized on the following category and its support cases in int:\")\n\nfor k in results:\n    print(\"%s\\t%.3f\\t%s\"%(k[0],k[1],k[2]))","5d45a796":"spns_money_sum = defaultdict(float)\nspns_money_cnt = defaultdict(int)\n \nfor index, row in sym_date.iterrows():\n    if not pd.isna(row[\"Sponsors\"]):\n        categories_list = row[\"Sponsors\"].split(',') \n        categories_list = [i.strip()[:10] for i in categories_list] \n        # this Sponsors list is really wierd, we have unique strings but are really similar like \"Altimeter Growth Holdings\" and \"Altimeter Growth Holdings 2\"\n        # here we assume theat the first 10 char is unqiue, using regular expression might be better here.\n        for category in categories_list:\n            spns_money_sum[category] += row[\"Price diff\"]\n            spns_money_cnt[category] += 1\n\nresults = []\nfor k in spns_money_sum.keys():\n    avg = spns_money_sum[k] \/ spns_money_cnt[k]\n    results.append((k, avg, spns_money_cnt[k]))\n    \nresults.sort(key = lambda x: x[1], reverse=True) \nprint(\"mean earing per stock if the company has underwriter and its support cases in int:\")\n\ncnt = 0\nfor k in results:\n    print(\"%s\\t%.3f\\t%d\"%(k[0],k[1],k[2]))\n    cnt += k[2]\nprint(\"total number of support cases: %d\" % cnt)","ac7d2158":"undr_money = defaultdict(list)\n \nfor index, row in sym_date.iterrows():\n    if not pd.isna(row[\"Underwriters\"]):\n        categories_list = row[\"Underwriters\"].split(',') \n        categories_list = [i.strip() for i in categories_list]\n        for category in categories_list:\n            undr_money[category].append(row[\"Price diff\"])\n\nresults = []\nfor k in undr_money.keys():\n    avg = np.mean(undr_money[k])\n    results.append((k, avg, len(undr_money[k])))\n    \nresults.sort(key = lambda x: x[1], reverse=True) \nprint(\"mean earing per stock if the company has underwriter and its support cases in int:\")\n\ncnt = 0\nfor k in results:\n    print(\"%s\\t%.3f\\t%d\"%(k[0],k[1],k[2]))\n    cnt += k[2]\nprint(\"total number of support cases: %d\" % cnt)","a2cefbe7":"figure(num=None, figsize=(22, 5), dpi=80, facecolor='w', edgecolor='k')\n\ntmp_df = [[\"Barclays Capital\", k] for k in undr_money[\"Barclays Capital\"]]\ntmp_df += [[\"EarlyBirdCapital\", k] for k in undr_money[\"EarlyBirdCapital\"]]\ntmp_df += [[\"UBS Securities\", k] for k in undr_money[\"UBS Securities\"]]\ntmp_df += [[\"Jefferies\", k] for k in undr_money[\"Jefferies\"]]\ntmp_df += [[\"Morgan Stanley & Co\", k] for k in undr_money[\"Morgan Stanley & Co\"]]\ntmp_df += [[\"Deutsche Bank Securities\", k] for k in undr_money[\"Deutsche Bank Securities\"]]\ntmp_df += [[\"Goldman Sachs & Co\", k] for k in undr_money[\"Goldman Sachs & Co\"]]\ntmp_df += [[\"I-Bankers Securities\", k] for k in undr_money[\"I-Bankers Securities\"]]\ntmp_df += [[\"J.P. Morgan Securities\", k] for k in undr_money[\"J.P. Morgan Securities\"]]\ntmp_df += [[\"Credit Suisse Securities (USA)\", k] for k in undr_money[\"Credit Suisse Securities (USA)\"]]\n\n\ntmp_df = pd.DataFrame(tmp_df, \n                   columns=['category', 'price diff'])\n\n\n\nax = sns.violinplot(x=\"category\", y=\"price diff\",data=tmp_df)\n\n\nplt.show()\n\nprint(undr_money[\"Barclays Capital\"])\nprint(undr_money[\"Goldman Sachs & Co\"])","467cd589":"We can see that SPACs are getting more popular starting from year 2020. And majority of SPACs announced their final target within a year. So, in the worst case scenario, if we purchase SPAC on the IPO date, we will gain \\\\$2 earining after 300 days on average. But we definetly want to shorten this time to reduce risk.\n\nBut anyways, would days beteween Definitive Agreement date and IPO Date affect the price change (our earning strategy)?\n","3d6ea62c":"\n\n# Data preprocessing\n\nAssumption:\n* I use Close price as the day price\n* Spacs information is gathered from here: https:\/\/www.spactrax.com\/companies.html","b1b50758":"# Intro\n\nA special purpose acquisition company (SPAC) is a company with no commercial operations that is formed strictly to raise capital through an initial public offering (IPO) for the purpose of acquiring an existing company. It is gaining more and more attention compared to the original IPO style.\nIf you are interested in more background, please read [this article](https:\/\/www.investopedia.com\/terms\/s\/spac.asp) and [this article](https:\/\/www.specialsituationinvestments.com\/spacs\/) for more detail. \n\nIdeally, when a target acquiring company is introduced by the SPAC, the stock price would increase above $10 as it is no loonger a blank check stock.\nIn this script, we try to see if this statement is true, and how much money we can gain from this. \nFinally, we also want to explore some other features\/indicators that would result in significant price change between the target announced date.","88f249de":"# Let's see if spac prices increase after 'Definitive Agreement date'","a59e7ce6":"While \"Robert W. Baird & Co\" is the best among all, however, there is only 1 support case as of 02\/2021. But let me take a pause here and buy some SPACs that are underwitten by \"Barclays Capital\"","ef7927ec":"From above, we can see that Close price increases after \"Definitive Agreement Date\". And it is about \\\\$2 earining per \\\\$10 for a week. That is some profit for only a short amount of time. However, this number ranges from -2.5 to 17.5. So even if we build a perfect model that predicts this date right, we could still end up losing money for a particular stock. If we could select some stocks to invest, we could end up earning more.","a2c6b392":"# What else would affect the diff value between 'Definitive Agreement' days? \n\nwould it be the days between 'Definitive Agreement' and 'Ipo days', would it be the category of target (Technology, Ecommerce, Software, Healthcare, Financial Services, Artificial Intelligence)?\n\n# # Dates\n\nBecause most acquisitions must complete within 3 years. Lets first see if this time constraint affects the stock moving price between the 'Definitive Agreement Date'.","f2dbb70c":"# # sponsors and underwritters\n\nSimilarly lets see if we could find some storng sponsors and underwritters","06745be8":"# # category\nLets see if category makes more sense:","04f70a22":"# # Initial IPO Size\n\nLets see if ipo size makes more sense:","fa4d82bf":"it seems that target announcement have some minor influence on the stock price differences.","43b246b9":"# How many sudden increase exist besides 'Definitive Agreement'?\n\nBefore checking \"what affect the diff value between 'Definitive Agreement' days?\" Lets see if there exist more potential buying times that end up incease the price of spac all of a sudden.","4b3a7314":"# # Price and Volume","7c1da1cc":"All preprocess is complete!\n\nBut before we can see if we can earn some money, lets define some notions first.\n\n1. \"Definitive Agreement date\" is the date when the final target is announced.\n2. To measure how much many we earn, I introduce two specific evaluation metrics (prices_diffs_max and prices_diffs_avg). Since prices are volatile between Definitive Agreement date. we took the average of price in 5 consecutive trasaction days before and after. Basically, we assumed that we buy @ the 5 day average before Definitive Agreement date and sell with 2 different techinique.\n\nprices_diffs_max: if then sold on 5 trasaction day maximum \n\nprices_diffs_avg: if then sold on 5 trasaction day average\n","e0352247":"From above, we can see that \n\nthings like\uff1a Life Sciences\uff0c Sustainability\uff0c Artificial Intelligence\uff0c Telecommunications\uff0c Media,  Cannabis are great indications on strong suppoters for the market to believe a sucessful acquisitions.\n\nthings like: Hospitality and Fashion makes bad acquisitions for now. It somewhat matches with the covid-19 situation. Since covid, people stays home and travels less, and Hospitality bbusiness is not booming as of now. So there is no hurry in buying those SPACs as well.","5e6f0c07":"# Conclusion and Future work:\n\n* If we guessed the \"Definitive Agreement Date\" right and buy before the SPAC releases info, the average gain per stock is about \\\\$1.628 out of about 10 (max is 2.672). That is some profit for only a week. However, this number ranges from -2.03 to 6.84. So even if we build a perfect model that predicts this date right, we could still end up losing money. How to solve this?\n* Compare version 16 with version 17, the dataset is updated from Feb 2021 to end of March 2021. Because of the general trend (NASDAQ and SP500) went down in Feb and March 2021, we can see that SPAC also went down from 1.6 to 1.2.\n* Some guy in the reddit claimed that we end up gaining more if we buy before \"Definitive Agreement Date\" and sold after \"Merger Completion Date\". Even though this means that we have higher opportunity (time) cost, but how much do we gain? See this [script](https:\/\/www.kaggle.com\/overfit\/spac-explore-merger) for more detail\n* What are some good indicators to predict those days that spac will announce: \n[volume](https:\/\/www.reddit.com\/r\/SPACs\/comments\/jdib8u\/indicators_to_look_for_spac_that_will_announce\/), \n[rumor](https:\/\/api.stocktwits.com\/developers\/docs\/api), \n[sec-fillings](https:\/\/www.semanticscholar.org\/paper\/Predicting-Merger-Targets-and-Acquirers-from-Text-Routledge-Sacchetto\/9bc8fb17a0708b2d9d4597c499bbdb385b9f8c56)\n* It seems that some companies may annouce plan for merger (Form 425 - Prospectuses and communications, business combinations) multiple times, and sometimes this price is higher than the effect on the final Definitive Agreement Date. Maybe we could buy at those times as well to increase profit. See this [script](https:\/\/www.kaggle.com\/overfit\/spac-price-filling-explore) for more detial.\n\nPOST EDIT\n\nFor volume, here we used LSTMs to predict buy time: https:\/\/www.kaggle.com\/overfit\/spac-definiteagreementdate-prediction"}}