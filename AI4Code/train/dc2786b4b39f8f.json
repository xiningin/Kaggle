{"cell_type":{"1405219f":"code","6ddf9ea8":"code","76ad7e5e":"code","513f02a7":"code","adb97272":"code","ea518e34":"code","430053f5":"code","d3e16bc3":"code","0487c635":"code","96d2e168":"code","b9ffe00e":"code","df763195":"code","093b2ce8":"code","93974a95":"code","891e63fe":"code","da25c8f2":"code","fd413899":"code","4bee8ae1":"code","55c9fba5":"code","f77a2ada":"code","2226694b":"code","73f2e1b2":"code","932af349":"code","e46b981b":"code","b67d6204":"code","27895432":"code","a46f0c73":"code","9da9dd53":"code","640c8e8a":"code","c8e7e622":"code","cc95053e":"code","c6f4653e":"code","fd789462":"code","13722079":"code","d51fa513":"code","368b8405":"code","8a449aea":"code","e2aacce1":"code","7d847b24":"code","f7aef399":"code","a81bf92a":"code","24b4b940":"code","8adb5022":"code","79250f57":"code","59aafae1":"code","b38758e0":"markdown","39b1502d":"markdown","5353ec6f":"markdown","a07fc038":"markdown","a74db6af":"markdown","04ad0a84":"markdown","eab6400a":"markdown","eb2dc7bb":"markdown","10296feb":"markdown","065fe91e":"markdown","5887cd29":"markdown"},"source":{"1405219f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6ddf9ea8":"import numpy as np\nimport pandas as pd\nimport scipy\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nimport category_encoders as ce\nfrom catboost import CatBoostClassifier\nfrom sklearn.feature_selection import chi2, f_classif, f_regression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn import model_selection\nimport lightgbm as lgbm\nimport xgboost as xgb\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import StackingClassifier, VotingClassifier\nimport optuna\nimport tqdm\nimport warnings\nimport sklearn.exceptions\nwarnings.filterwarnings('ignore', category=DeprecationWarning)\nwarnings.filterwarnings('ignore', category=FutureWarning)\nwarnings.filterwarnings('ignore', category=RuntimeWarning)\nwarnings.filterwarnings('ignore', category=UserWarning)\nwarnings.filterwarnings(\"ignore\", category=sklearn.exceptions.UndefinedMetricWarning)\n","76ad7e5e":"train = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/test.csv')","513f02a7":"train.head()","adb97272":"test.head()","ea518e34":"train.info()","430053f5":"test.info()","d3e16bc3":"train.nunique()[1:].plot.barh(figsize=(8,12))","0487c635":"fig, ax = plt.subplots(figsize=(12, 6))\nsns.countplot(x='target', data=train)\nax.set_title('Target Distribution')\n","96d2e168":"train.drop(columns=['id']).describe().T.style.bar(subset=['mean'], color='#606ff2')\\\n                            .background_gradient(subset=['std'], cmap='magma_r')\\\n                            .background_gradient(subset=['50%'], cmap='summer')","b9ffe00e":"test.drop(columns=['id']).describe().T.style.bar(subset=['mean'], color='#606ff2')\\\n                            .background_gradient(subset=['std'], cmap='magma_r')\\\n                            .background_gradient(subset=['50%'], cmap='summer')","df763195":"le = LabelEncoder()\ntrain['target'] = le.fit_transform(train['target'])\ntrain.columns\ncols = list(train.columns)\ncols.remove(\"target\")\ncols.remove(\"id\")","093b2ce8":"not_features = ['id', 'target']\nfeatures = []\nfor feat in train.columns:\n    if feat not in not_features:\n        features.append(feat)\nprint(features)","93974a95":"scaler = StandardScaler()\ntrain[features] = scaler.fit_transform(train[features])\ntest[features] = scaler.transform(test[features])","891e63fe":"train","da25c8f2":"X=train.drop(['target','id'],axis=1)\nX\n","fd413899":"Y=train['target']\nY","4bee8ae1":"def objective(trial,data=X,target=Y):\n    \n    X_train, X_test, y_train, y_test = train_test_split(data, target, test_size=0.3,random_state=42)\n    params = {'iterations':trial.suggest_int(\"iterations\", 4000, 15000),\n              'od_wait':trial.suggest_int('od_wait', 500, 2300),\n             'loss_function':'MultiClass',\n              'task_type':\"GPU\",\n              'eval_metric':'MultiClass',\n              'leaf_estimation_method':'Newton',\n              'bootstrap_type': 'Bernoulli',\n              'learning_rate' : trial.suggest_uniform('learning_rate',0.02,0.3),\n              'reg_lambda': trial.suggest_uniform('reg_lambda',1e-5,100),\n              'subsample': trial.suggest_uniform('subsample',0,1),\n              'random_strength': trial.suggest_uniform('random_strength',10,30),\n              'depth': trial.suggest_int('depth',1,6),\n              'min_data_in_leaf': trial.suggest_int('min_data_in_leaf',1,30),\n              'leaf_estimation_iterations': trial.suggest_int('leaf_estimation_iterations',1,6),\n               }\n    model = CatBoostClassifier(**params)  \n    model.fit(X_train,y_train,eval_set=[(X_test,y_test)],early_stopping_rounds=100,verbose=False)\n        \n    y_preds = model.predict_proba(X_test)\n\n\n    log_loss_multi = log_loss(y_test, y_preds)\n    \n    return log_loss_multi","55c9fba5":"OPTUNA_OPTIMIZATION = True\n\nstudy = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=25)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial: score {}, params {}'.format(study.best_trial.value, study.best_trial.params))","f77a2ada":"if OPTUNA_OPTIMIZATION:\n    display(optuna.visualization.plot_optimization_history(study))\n    display(optuna.visualization.plot_slice(study))\n    #display(optuna.visualization.plot_intermediate_values(study))\n    display(optuna.visualization.plot_parallel_coordinate(study))","2226694b":"cat_params = study.best_trial.params\ncat_params['loss_function'] = 'MultiClass'\ncat_params['eval_metric'] = 'MultiClass'\ncat_params['bootstrap_type']= 'Bernoulli'\ncat_params['leaf_estimation_method'] = 'Newton'\ncat_params['random_state'] = 42\ncat_params['task_type']='GPU'\ntest_preds=None\n\nkf = StratifiedKFold(n_splits = 10 , shuffle = True , random_state = 42)\nfor fold, (tr_index , val_index) in enumerate(kf.split(X.values , Y.values)):\n    \n    print(\"-\" * 50)\n    print(f\"Fold {fold + 1}\")\n    \n    x_train,x_val = X.values[tr_index] , X.values[val_index]\n    y_train,y_val = Y.values[tr_index] , Y.values[val_index]\n        \n    eval_set = [(x_val, y_val)]\n    \n    model =CatBoostClassifier(**cat_params)\n    model.fit(x_train, y_train, eval_set = eval_set, verbose = False)\n    \n    train_preds = model.predict(x_train)    \n    val_preds = model.predict_proba(x_val)\n    \n    print(log_loss(y_val, val_preds))\n    \n    if test_preds is None:\n        test_preds = model.predict_proba(test[cols].values)\n    else:\n        test_preds += model.predict_proba(test[cols].values)\n\nprint(\"-\" * 50)\ntest_preds \/= 10","73f2e1b2":"submission1 = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/sample_submission.csv\")\nsubmission1['Class_1']=test_preds[:,0]\nsubmission1['Class_2']=test_preds[:,1]\nsubmission1['Class_3']=test_preds[:,2]\nsubmission1['Class_4']=test_preds[:,3]\nsubmission1.head()","932af349":"def objective(trial,data=X,target=Y):\n    \n    X_train, X_test, y_train, y_test = train_test_split(data, target, test_size=0.3,random_state=42)\n    params = {\n        \"n_estimators\": trial.suggest_int(\"n_estimators\",200,2000,100),\n        \"subsample\": trial.suggest_discrete_uniform(\"subsample\",0.6,1,0.1),\n        \"colsample_bytree\": trial.suggest_discrete_uniform(\"colsample_bytree\",0.6,1,0.1),\n        \"eta\": trial.suggest_loguniform(\"eta\",1e-3,0.1),\n        \"reg_alpha\": trial.suggest_int(\"reg_alpha\",1,50),\n        \"reg_lambda\": trial.suggest_int(\"reg_lambda\",5,100),\n        \"max_depth\": trial.suggest_int(\"max_depth\",5,20),\n        \"min_child_weight\": trial.suggest_int(\"min_child_weight\",5,20),\n    }\n    model = xgb.XGBClassifier(**params, tree_method='gpu_hist', random_state=42)\n    model.fit(X_train,y_train,eval_set=[(X_test,y_test)],verbose = False,eval_metric='mlogloss')\n        \n    y_preds = model.predict_proba(X_test)\n\n\n    log_loss_multi = log_loss(y_test, y_preds)\n    \n    return log_loss_multi","e46b981b":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=25)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial: score {}, params {}'.format(study.best_trial.value, study.best_trial.params))","b67d6204":"if OPTUNA_OPTIMIZATION:\n    display(optuna.visualization.plot_optimization_history(study))\n    display(optuna.visualization.plot_slice(study))\n    #display(optuna.visualization.plot_intermediate_values(study))\n    display(optuna.visualization.plot_parallel_coordinate(study))","27895432":"xgb_params = study.best_trial.params\nxgb_params['tree_method'] = 'gpu_hist'\nxgb_params['random_state'] = 42\ntest_preds1=None\n\nkf = StratifiedKFold(n_splits = 10 , shuffle = True , random_state = 42)\nfor fold, (tr_index , val_index) in enumerate(kf.split(X.values , Y.values)):\n    \n    print(\"-\" * 50)\n    print(f\"Fold {fold + 1}\")\n    \n    x_train,x_val = X.values[tr_index] , X.values[val_index]\n    y_train,y_val = Y.values[tr_index] , Y.values[val_index]\n        \n    eval_set = [(x_val, y_val)]\n    \n    model1 = xgb.XGBClassifier(**xgb_params)\n    model1.fit(x_train, y_train, eval_set = eval_set, eval_metric='mlogloss',verbose=False)\n    \n    train_preds = model1.predict(x_train)    \n    val_preds = model1.predict_proba(x_val)\n    \n    print(log_loss(y_val, val_preds))\n    \n    if test_preds1 is None:\n        test_preds1 = model1.predict_proba(test[cols].values)\n    else:\n        test_preds1 += model1.predict_proba(test[cols].values)\n\nprint(\"-\" * 50)\ntest_preds1 \/= 10","a46f0c73":"submission2 = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/sample_submission.csv\")\nsubmission2['Class_1']=test_preds1[:,0]\nsubmission2['Class_2']=test_preds1[:,1]\nsubmission2['Class_3']=test_preds1[:,2]\nsubmission2['Class_4']=test_preds1[:,3]\nsubmission2.head()","9da9dd53":"def objective(trial,data=X,target=Y):\n    \n    X_train, X_test, y_train, y_test = train_test_split(data, target, test_size=0.3,random_state=42)\n    params = {\n        \"objective\": \"multiclass\",\n        \"num_class\":4,\n        \"metric\": \"multi_logloss\",\n        \"verbosity\": -1,\n        \"boosting_type\": \"gbdt\",\n        \"lambda_l1\": trial.suggest_float(\"lambda_l1\", 1e-8, 10.0, log=True),\n        \"lambda_l2\": trial.suggest_float(\"lambda_l2\", 1e-8, 10.0, log=True),\n        \"num_leaves\": trial.suggest_int(\"num_leaves\", 2, 256),\n        \"feature_fraction\": trial.suggest_float(\"feature_fraction\", 0.4, 1.0),\n        \"bagging_fraction\": trial.suggest_float(\"bagging_fraction\", 0.4, 1.0),\n        \"bagging_freq\": trial.suggest_int(\"bagging_freq\", 1, 7),\n        \"min_child_samples\": trial.suggest_int(\"min_child_samples\", 5, 100),\n    }\n    model = lgbm.LGBMClassifier(**params,random_state=42)\n    model.fit(X_train,y_train,eval_set=[(X_test,y_test)],verbose = False)\n        \n    y_preds = model.predict_proba(X_test)\n\n\n    log_loss_multi = log_loss(y_test, y_preds)\n    \n    return log_loss_multi","640c8e8a":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=25)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial: score {}, params {}'.format(study.best_trial.value, study.best_trial.params))","c8e7e622":"if OPTUNA_OPTIMIZATION:\n    display(optuna.visualization.plot_optimization_history(study))\n    display(optuna.visualization.plot_slice(study))\n    #display(optuna.visualization.plot_intermediate_values(study))\n    display(optuna.visualization.plot_parallel_coordinate(study))","cc95053e":"lgbm_params = study.best_trial.params\nlgbm_params['objective'] = 'multiclass'\nlgbm_params['random_state'] = 42\nlgbm_params['metric'] = 'multi_logloss'\ntest_preds2=None\n\nkf = StratifiedKFold(n_splits = 10 , shuffle = True , random_state = 42)\nfor fold, (tr_index , val_index) in enumerate(kf.split(X.values , Y.values)):\n    \n    print(\"-\" * 50)\n    print(f\"Fold {fold + 1}\")\n    \n    x_train,x_val = X.values[tr_index] , X.values[val_index]\n    y_train,y_val = Y.values[tr_index] , Y.values[val_index]\n        \n    eval_set = [(x_val, y_val)]\n    \n    model2 = lgbm.LGBMClassifier(**lgbm_params)\n    model2.fit(x_train, y_train, eval_set = eval_set,verbose=False)\n    \n    train_preds = model2.predict(x_train)    \n    val_preds = model2.predict_proba(x_val)\n    \n    print(log_loss(y_val, val_preds))\n    \n    if test_preds2 is None:\n        test_preds2 = model2.predict_proba(test[cols].values)\n    else:\n        test_preds2 += model2.predict_proba(test[cols].values)\n\nprint(\"-\" * 50)\ntest_preds2 \/= 10","c6f4653e":"submission3 = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/sample_submission.csv\")\nsubmission3['Class_1']=test_preds2[:,0]\nsubmission3['Class_2']=test_preds2[:,1]\nsubmission3['Class_3']=test_preds2[:,2]\nsubmission3['Class_4']=test_preds2[:,3]\nsubmission3.head()","fd789462":"from keras import layers, models","13722079":"model = models.Sequential()\nmodel.add(layers.Dense(16, input_shape=X.shape,input_dim=50,activation='relu', name=\"Hidden-1\"))\nlayers.BatchNormalization()\nmodel.add(layers.Dropout(0.2))\n\n# model.add(layers.Dense(256, activation='relu'))\n# layers.BatchNormalization()\n# model.add(layers.Dropout(0.25))\n\n# model.add(layers.Dense(128, activation='relu'))\n# layers.BatchNormalization()\n# model.add(layers.Dropout(0.25))\n\n# model.add(layers.Dense(64, activation='relu'))\n# layers.BatchNormalization()\n# model.add(layers.Dropout(0.25))\n\n# model.add(layers.Dense(32, activation='relu'))\n# layers.BatchNormalization()\n# model.add(layers.Dropout(0.25))\n\n# model.add(layers.Dense(16, activation='relu'))\n# layers.BatchNormalization()\n# model.add(layers.Dropout(0.25))\n\nmodel.add(layers.Dense(8, activation='relu'))\nlayers.BatchNormalization()\nmodel.add(layers.Dropout(0.2))\n\nmodel.add(layers.Dense(4, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.summary()","d51fa513":"Y1 = pd.get_dummies(Y)\nY1","368b8405":"history = model.fit(X, Y1, epochs=50,validation_split=0.3)","8a449aea":"plt.figure(figsize=(15,8))\nplt.plot(history.history['loss'],lw=4)\nplt.plot(history.history['val_loss'],lw=4)\nplt.title('Model Loss',fontsize=20)\nplt.ylabel('Loss',fontsize=15)\nplt.xlabel('Epoch',fontsize=15)\nplt.legend(['Train','Test'])\nplt.show()","e2aacce1":"test_preds3=model.predict_proba(test[cols].values)\nsubmission4 = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/sample_submission.csv\")\nsubmission4['Class_1']=test_preds3[:,0]\nsubmission4['Class_2']=test_preds3[:,1]\nsubmission4['Class_3']=test_preds3[:,2]\nsubmission4['Class_4']=test_preds3[:,3]\nsubmission4.head()","7d847b24":"import tensorflow as tf","f7aef399":"tf.keras.utils.plot_model(model, to_file=\"model.png\", show_shapes=True)","a81bf92a":"submission1.to_csv('sub1.csv',index=False)\nsubmission2.to_csv('sub2.csv',index=False)\nsubmission3.to_csv('sub3.csv',index=False)\nsubmission4.to_csv('sub4.csv',index=False)","24b4b940":"res1 = (2*submission1 + submission2 + submission3 + 2*submission4)\/6\nres1.to_csv(\"res1.csv\",index=False)","8adb5022":"res2 = (submission1 + 2*submission2 + 2*submission3 + submission4)\/6\nres2.to_csv(\"res2.csv\",index=False)","79250f57":"res3 = (2*submission1 + 2*submission2 + submission3 + submission4)\/6\nres3.to_csv(\"res3.csv\",index=False)","59aafae1":"res4 = (4*submission1 + 3*submission2 + 2*submission3 + submission4)\/10\nres4.to_csv(\"res4.csv\",index=False)","b38758e0":"<br>\n<h1 style = \"font-size:40px; font-family:cursive ; font-weight : normal; color : #7100B4; text-align: center; border-radius: 100px 100px;\">\u26a1Catboost+XGBoost+Lightgbm+DNN with OPTUNA\u26a1<\/h1>\n<br>","39b1502d":"<h1 style = \"font-family: cursive;display:fill; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #5CFBFA; color :#000000; border-radius: 150px 150px;\">\ud83c\udf00Ensemble time <\/h1>","5353ec6f":"<h1 style = \"font-family: cursive;display:fill; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #5CFBFA; color :#000000; border-radius: 150px 150px;\">\ud83c\udfafXGBoost with OPTUNA <\/h1>","a07fc038":"Playing with weights","a74db6af":"<h1 style = \"font-family: cursive;display:fill; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #5CFBFA; color :#000000; border-radius: 150px 150px;\">\u2705Importing Required Libraries: <\/h1>","04ad0a84":"<h1 style = \"font-family: cursive;display:fill; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #5CFBFA; color :#000000; border-radius: 150px 150px;\">\ud83c\udfafLightGBM with OPTUNA<\/h1>","eab6400a":"<h1 style = \"font-family: cursive;display:fill; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #5CFBFA; color :#000000; border-radius: 150px 150px;\">\ud83d\udd0dBasic Data Exploration: <\/h1>","eb2dc7bb":"<h1 style = \"font-family: cursive;display:fill; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #5CFBFA; color :#000000; border-radius: 150px 150px;\">\ud83c\udfafDNN <\/h1>","10296feb":"![Upvote!](https:\/\/img.shields.io\/badge\/Upvote-If%20you%20like%20my%20work-07b3c8?style=for-the-badge&logo=kaggle)","065fe91e":"<h1 style = \"font-family: cursive;display:fill; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #5CFBFA; color :#000000; border-radius: 150px 150px;\">\ud83c\udfafCatBoost with OPTUNA <\/h1>","5887cd29":"<h1 style = \"font-family: cursive;display:fill; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #5CFBFA; color :#000000; border-radius: 150px 150px;\">\u2692 Data Transformation <\/h1>"}}