{"cell_type":{"52f3807d":"code","6f98ef00":"code","5468458c":"code","691018a6":"code","a8dd2005":"code","560b75c7":"code","9f1bdca3":"code","0aff7939":"code","61e419dd":"code","5ac8d581":"code","942a01e9":"code","60348aa5":"code","6ab8d5cb":"code","1359b159":"code","07b6af22":"code","680c6e6f":"code","e899886f":"code","c9a95f5a":"code","48bb766c":"code","ff516172":"code","27312bc0":"code","861d5014":"code","0cba4190":"code","0ab73249":"code","a5693bf2":"code","c1de1f2b":"code","84cb3562":"code","7e2b3a15":"code","7ebf551f":"code","810d4674":"code","bb827a0d":"code","c1978a10":"code","7719539a":"code","85994d47":"code","e6f0925f":"code","c104b7e7":"code","135f1776":"code","e72b301a":"code","29195dfc":"code","8e0f04a8":"code","8004f655":"code","4640d71e":"code","f71dd975":"code","7b960b0d":"markdown","8489f9d4":"markdown","9d3b3fbb":"markdown","c1a2d9ab":"markdown","4d8ad0e3":"markdown","1e65ed86":"markdown","45e2169d":"markdown","3f0c4a90":"markdown","0612287e":"markdown","72f7f19b":"markdown","71ec647f":"markdown","fac842b4":"markdown","b02fbeeb":"markdown","63f18bdb":"markdown","c1a64d9c":"markdown"},"source":{"52f3807d":"# \ub370\uc774\ud130\ubd84\uc11d \ub77c\uc774\ube0c\ub7ec\ub9ac \ud544\uc218 4\uc885\uc138\ud2b8 \nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","6f98ef00":"base_path = \"..\/input\/dacon-elec-usage-prediction\/\"","5468458c":"train = pd.read_csv(base_path + \"train.csv\", encoding=\"cp949\")\ntest = pd.read_csv(base_path +\"test.csv\", encoding=\"cp949\")\nsubmission = pd.read_csv(base_path + \"sample_submission.csv\")","691018a6":"train","a8dd2005":"# train data \uacb0\uce21\uce58 \ud655\uc778\ntrain[train.isnull().any(axis=1)]","560b75c7":"# test data \uacb0\uce21\uce58 \ud655\uc778\ntest[test.isnull().any(axis=1)]","9f1bdca3":"# \ucf54\ub529 \ud3b8\uc758\ub97c \uc704\ud574\uc11c column \uc774\ub984\uc744 \ubcc0\uacbd\ud569\ub2c8\ub2e4.\ntrain.columns = ['num','date_time','target','temperature','windspeed','humidity','precipitation','insolation','nelec_cool_flag','solar_flag']\ntest.columns = ['num','date_time','temperature','windspeed','humidity','precipitation','insolation','nelec_cool_flag','solar_flag']","0aff7939":"train.describe()","61e419dd":"train.info()","5ac8d581":"test # 60\uac1c\uc758 \uac74\ubb3c X 7\uc77c X 24\uc2dc\uac04 = 10080","942a01e9":"test.info()","60348aa5":"# \uc694\uc77c \uc815\ubcf4 \ucd94\uac00\ndef weekday(x):\n    return pd.to_datetime(x[:10]).weekday()","6ab8d5cb":"# \uc2dc\uac04 \uc815\ubcf4 \ucd94\uac00!\ntrain['weekday'] = train['date_time'].apply(weekday)\ntest['weekday'] = test['date_time'].apply(weekday)\ntrain","1359b159":"#\uac74\ubb3c\ubcc4\ub85c '\ube44\uc804\uae30\ub0c9\ubc29\uc124\ube44\uc6b4\uc601(nelec_cool_flag)'\uacfc '\ud0dc\uc591\uad11\ubcf4\uc720(solar_flag)'\ub97c \ud310\ub2e8\ud574 test set\uc758 \uacb0\uce21\uce58\ub97c \ubcf4\uac04\ud574\uc90d\ub2c8\ub2e4\ntrain[[\"num\", \"nelec_cool_flag\", \"solar_flag\"]]","07b6af22":"building_info = train[[\"num\", \"nelec_cool_flag\", \"solar_flag\"]].drop_duplicates()\n#building_info = train[[\"num\", \"\ube44\uc804\uae30\ub0c9\ubc29\uc124\ube44\uc6b4\uc601\", \"\ud0dc\uc591\uad11\ubcf4\uc720\"]].drop_duplicates()\nbuilding_info","680c6e6f":"test.drop(columns=[\"nelec_cool_flag\", \"solar_flag\"], inplace=True)\ntest = pd.merge(test, building_info, on=\"num\") # num column\uc744 \uae30\uc900\uc73c\ub85c Join!\ntest","e899886f":"train[\"insolation\"].value_counts()","c9a95f5a":"test.head(30)","48bb766c":"test[\"insolation\"].value_counts()","ff516172":"# \uac00\uc7a5 \ucd5c\uadfc\uc5d0 \uae30\ub85d\ub41c \uc815\ubcf4\ub85c \ucc44\uc6cc\uc900\ub2e4!\ntest[\"insolation\"] = test[\"insolation\"].interpolate(method=\"pad\")\ntest[\"insolation\"].value_counts()","27312bc0":"test.head(30)","861d5014":"dummy = train.copy()\n\ndef make_train_nan(data, col, n):\n    new_list = []\n    for idx, temp in enumerate(data[col]):\n        if idx%n==0:\n            new_list.append(temp)\n        else:\n            new_list.append(np.nan)\n    data['{}'.format(col+'_nan')] = new_list","0cba4190":"make_train_nan(dummy, \"temperature\", 3)\nmake_train_nan(dummy, \"windspeed\", 3)\nmake_train_nan(dummy, \"humidity\", 3)\nmake_train_nan(dummy, \"precipitation\", 6)","0ab73249":"dummy","a5693bf2":"def compare_interpolate_methods(data, col, methods, metric):\n    error_dict = dict()\n    for method in methods:\n        if method == \"polynomial\":\n            fillna = data['{}'.format(col+'_nan')].interpolate(method=method, order=2)\n        else:\n            fillna = data['{}'.format(col+'_nan')].interpolate(method=method)\n        if fillna.isna().sum() != 0:\n            fillna = fillna.interpolate(method='linear')\n        error = metric(data['{}'.format(col)], fillna)\n        error_dict['{}'.format(method)] = error\n    \n    return error_dict","c1de1f2b":"from sklearn.metrics import mean_squared_error\n\nall_cols_error_dict = {}\n\nfor column in [\"temperature\", \"windspeed\", \"humidity\", \"precipitation\"]:\n    methods = [\"pad\", \"linear\", \"quadratic\", \"cubic\", \"polynomial\"]\n    error_dict = compare_interpolate_methods(dummy, column, methods, mean_squared_error)\n    all_cols_error_dict[column] = error_dict\n    \nall_cols_error_df = pd.DataFrame(all_cols_error_dict)\nall_cols_error_df","84cb3562":"fig, axes = plt.subplots(1, 4, figsize = (18, 5))\nfor i in range(len(all_cols_error_df.columns)):\n    sns.lineplot(ax=axes[i], data=all_cols_error_df.iloc[:, i].transpose())","7e2b3a15":"#\uae30\uc628 \uacb0\uce21\uce58 \ucc44\uc6b0\uae30\ntest['temperature'] = test['temperature'].interpolate(method='quadratic')\n#\ub9c8\uc9c0\ub9c9 na \ucc44\uc6b0\uae30\ntest['temperature'] = test['temperature'].interpolate(method='linear')\n\n#\ud48d\uc18d \uacb0\uce21\uce58 \ucc44\uc6b0\uae30\ntest['windspeed'] = test['windspeed'].interpolate(method='linear')\n\n#\uc2b5\ub3c4 \uacb0\uce21\uce58 \ucc44\uc6b0\uae30\ntest['humidity'] = test['humidity'].interpolate(method='quadratic')\n#\ub9c8\uc9c0\ub9c9 na \ucc44\uc6b0\uae30\ntest['humidity'] = test['humidity'].interpolate(method='linear')\n\n#\uac15\uc218\ub7c9 \uacb0\uce21\uce58 \ucc44\uc6b0\uae30\ntest['precipitation'] = test['precipitation'].interpolate(method='linear')","7ebf551f":"test[test.isnull().any(axis=1)]","810d4674":"test","bb827a0d":"test.info()","c1978a10":"plt.figure(figsize=(16, 7))\nsns.lineplot(data=train, x=\"weekday\", y=\"target\")\nplt.show()","7719539a":"train.corr()","85994d47":"plt.figure(figsize=(12, 12))\nsns.heatmap(train.corr(), cmap=\"Blues\")","e6f0925f":"# \ud53c\ucc98\uac04 \ube44\uc2b7\ud55c \ubcc0\uc218\ub4e4\uc774 \uc788\ub294\uc9c0 \ud655\uc778\ud558\uae30 \uc704\ud574 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d\uc744 \uc218\ud589\ud569\ub2c8\ub2e4.\ncorr = []\nfor num in range(1,61):\n    df = train[train.num==num]\n    num_corr = df.corr()['target']\n    num_corr = num_corr.drop(['num','nelec_cool_flag','solar_flag','target'])\n    corr.append(num_corr)\ncorr_df = pd.concat(corr, axis=1).T\ncorr_df.index = list(range(1,61))\n\n# \uc2dc\uac01\ud654\nf, ax = plt.subplots(figsize=(20,8))\nplt.title(\"Correlation plot\", fontsize=15)\nsns.heatmap(corr_df.T, cmap=sns.diverging_palette(240,10,as_cmap=True), ax=ax)\nplt.xlabel('Building(num)')\nplt.show()","c104b7e7":"# \ub370\uc774\ud130 \uc911\uc5d0 \uc804\uccb4 \ub370\uc774\ud130\uc758 \ud328\ud134\uc744 \ubc97\uc5b4\ub098\ub294 \ub370\uc774\ud130\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.\ndef get_outlier(df=None, column=None, weight=1.5):\n    # target \uac12\uacfc \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc740 \uc5f4\uc744 \uc6b0\uc120\uc801\uc73c\ub85c \uc9c4\ud589\n    quantile_25 = np.percentile(df[column].values, 25)\n    quantile_75 = np.percentile(df[column].values, 75)\n    \n    IQR = quantile_75 - quantile_25\n    IQR_weight = IQR*weight\n    lowest = quantile_25 - IQR_weight\n    highest = quantile_75 + IQR_weight\n    \n    print('IQR\uc740 %.3f \uc774\ub2e4.' % IQR)\n    print('lower bound \uac12\uc740 %.3f\uc774\ub2e4.' % lowest)\n    print('upper bound \uac12\uc740 %.3f\uc774\ub2e4.' % highest)  \n    \n    outlier_idx = df[column][ (df[column] < lowest) | (df[column] > highest) ].index\n    return outlier_idx","135f1776":"# \uc6d0\ud558\ub294 column\uc744 \uc815\ud558\uace0 \uc2f6\uc744 \ub54c #\uc744 \uc9c0\uc6cc\uc11c \uc0ac\uc6a9\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4!\n#selected_col = input(\"Which column ? \")\nselected_col = \"humidity\"\n\noutlier_idx = get_outlier(df=train, column=selected_col, weight=1.5)\n#train.loc[outlier_idx, selected_col]\ntrain.loc[outlier_idx, :]","e72b301a":"# IQR\uc774 \ub118\uc5b4\uac00\ub294 \ub370\uc774\ud130\ub97c \uc81c\uac70\ud55c\ub2e4\uba74?\ntrain.drop(outlier_idx)","29195dfc":"from sklearn.metrics import mean_absolute_error\nfrom lightgbm import LGBMRegressor\nfrom sklearn.model_selection import KFold","8e0f04a8":"X = train.drop(columns=[\"target\", \"date_time\"])\ny = train.target\n\ntest.drop(columns=[\"date_time\"], inplace=True)","8004f655":"cv = KFold(n_splits=5, shuffle=True, random_state=42)\nfolds = []\n\nfor train_idx, valid_idx in cv.split(X, y):\n    folds.append((train_idx, valid_idx))","4640d71e":"models = {}\n# K-fold Cross-validation\n\nfor fold in range(5):\n    print(f\"============={fold+1} fold ==============\")\n    train_idx, valid_idx = folds[fold]\n    X_train = X.iloc[train_idx, :]\n    y_train = y.iloc[train_idx]\n    X_val = X.iloc[valid_idx, :]\n    y_val = y.iloc[valid_idx]\n\n    model = LGBMRegressor(n_estimators=300, learning_rate=0.01)\n    model.fit(X_train, y_train, eval_set=[(X_train, y_train), (X_val, y_val)],\n              early_stopping_rounds=30, verbose=100)\n    models[fold] = model\n\n    print(\"==========================================\\n\\n\")","f71dd975":"for i in range(5):\n    submission[\"answer\"] += models[i].predict(test) \/ 5\n\nsubmission","7b960b0d":"#### \uac74\ubb3c \uc815\ubcf4","8489f9d4":"### 2-1. \uacb0\uce21\uce58 \ucc98\ub9ac","9d3b3fbb":"Seaborn colormap : https:\/\/chrisalbon.com\/python\/data_visualization\/seaborn_color_palettes\/","c1a2d9ab":"#### \uc77c\uc870\ub7c9 (insolation)","4d8ad0e3":"#### \uae30\uc0c1 \uc815\ubcf4 (\uae30\uc628, \ud48d\uc18d, \uc2b5\ub3c4, \uac15\uc218\ub7c9)\n\n- train data\ub97c \uae30\uc900\uc73c\ub85c \uac00\uc7a5 \uc131\ub2a5\uc774 \uc88b\uc740 interpolation \uae30\ubc95\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.","1e65ed86":"### 3. \uc608\uce21 \ubaa8\ub378 \uad6c\ud604","45e2169d":"### 2-3. \uc774\uc0c1\uce58 \uac80\ucd9c\n\n1) IQR(Inter-Quantile Range)\n\n\n2) Outlier Detection method (e.g. Isolation Forest)","3f0c4a90":"## 2. \ub370\uc774\ud130 \uc804\ucc98\ub9ac","0612287e":"## 1. \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","72f7f19b":"#### IQR","71ec647f":"+ test \uacb0\uce21\uce58\ub97c \ucc44\uc6cc\ubd05\ub2c8\ub2e4.\n+ test \ub370\uc774\ud130\uc758 \ubcc0\uc218\ub294 \uc608\ubcf4 \ub370\uc774\ud130\uc774\uba70, \uc608\ubcf4 \ub370\uc774\ud130\ub294 train \ub370\uc774\ud130\uc758 \uae30\uac04\uc5d0 \uc0dd\uc131\ub41c \uac83\uc774\uae30\uc5d0 \ud65c\uc6a9 \uac00\ub2a5\ud569\ub2c8\ub2e4.\n\n1) \ud3c9\uade0\uc73c\ub85c \ucc44\uc6b0\uae30\n\n\n2) \ucd5c\ube48\uac12\uc73c\ub85c \ucc44\uc6b0\uae30\n\n\n3) \uadfc\ucc98(\uc55e, \ub4a4)\uc5d0 \uc788\ub294 \uac12\uc73c\ub85c \ucc44\uc6b0\uae30\n\n\n4) interpolation","fac842b4":"#### \uc2dc\uac04 \uc815\ubcf4 \ucd94\uac00","b02fbeeb":"## Q. \"\uac74\ubb3c\ubcc4 \ud53c\ucc98\uc640 \uc804\ub825\uc0ac\uc6a9\ub7c9 \uac04\uc758 \uc0c1\uad00\uad00\uacc4\" \uadf8\ub9bc\uc5d0\uc11c \ub2e4\ub978 \uac74\ubb3c\ub4e4\uacfc \ub2e4\ub974\uac8c \ud2b9\uc774\ud55c \ud328\ud134\uc744 \ubcf4\uc774\ub294 \uac74\ubb3c\uc774 \uc788\ub2e4\uba74 \uba87 \ubc88 \uac74\ubb3c\uc778\uc9c0 \uc4f0\uace0, \uc774\uc720\ub97c \uc11c\uc220\ud574\ubcf4\uc138\uc694.\n(\uc5ec\ub7ec\uac1c\uc5ec\ub3c4 \uad1c\ucc2e\uc2b5\ub2c8\ub2e4)\n\nA.","63f18bdb":"## Q. \uc774 \ub54c\uae4c\uc9c0 \ub2e4\uc591\ud55c interpolation \uae30\ubc95\uc73c\ub85c \uacb0\uce21\uce58\ub97c \ucc44\uc6e0\uc2b5\ub2c8\ub2e4.\n\n## \ub9cc\uc57d, interpolation \uae30\ubc95\uc774 \uc544\ub2cc \ud3c9\uade0\uc73c\ub85c \uacb0\uce21\uce58\ub97c \ucc44\uc6b0\uac8c \ub418\uba74 \uc5b4\ub5a4 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud560\uc9c0 \uc11c\uc220\ud558\uc138\uc694.\n\nA. ","c1a64d9c":"### 2-2. \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d"}}