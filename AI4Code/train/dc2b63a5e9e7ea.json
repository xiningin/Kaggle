{"cell_type":{"eb2f3e63":"code","4fcb7de4":"code","d8bbd30e":"code","0375d29e":"code","5aeb4737":"code","0a01d2e2":"code","4f656f59":"code","dba5c7f4":"code","7d85ff7f":"code","f2a10b91":"code","414eabae":"code","29ca8606":"code","254a09a0":"code","910ac192":"code","c441c361":"code","73071f21":"code","67e19052":"code","7942d684":"code","21462fc5":"code","3740784d":"code","a41dc3fd":"markdown","30edcd53":"markdown","e0afa71f":"markdown"},"source":{"eb2f3e63":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4fcb7de4":"#importing useful libraries\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.metrics import mean_squared_error\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import GridSearchCV","d8bbd30e":"#loading data sets in the pandas dataframe \ntrain_data = pd.read_csv('\/kaggle\/input\/30-days-of-ml\/train.csv',index_col='id')\ntest_data = pd.read_csv('\/kaggle\/input\/30-days-of-ml\/test.csv',index_col='id')\nsubmission_data= pd.read_csv('\/kaggle\/input\/30-days-of-ml\/sample_submission.csv')","0375d29e":"#displaying the first five rows of train,test data\ntrain_data.head()","5aeb4737":"test_data.head()","0a01d2e2":"#shape of train_data\n#no. of rows and columns in training dataset\nrows,columns = train_data.shape\nprint('rows:',rows,' columns:',columns)","4f656f59":"#shape of test_data\n#no. of rows and columns in training dataset\nrows_test,columns_test = test_data.shape\nprint('rows:',rows_test,' columns:',columns_test)","dba5c7f4":"#getting the info of dataset\ntrain_data.info()\n#10 categorical features and 13 are numerical features in the dataset","7d85ff7f":"#checking if there are any null values in columns?\nnull_values = train_data.isnull().sum()\nnull_values","f2a10b91":"test_data.info()","414eabae":"train_data.describe()","29ca8606":"#extracting categorical and numerical featues\ncategorical_columns = [col for col in train_data.columns if train_data[col].dtype=='object']\nnumerical_columns = [numerical for numerical in train_data.columns if train_data[numerical].dtypes in ['int64','float64']]\nprint('Categorical Features: ',categorical_columns)\nprint('Numerical Features: ', numerical_columns)","254a09a0":"#performing ordinal encoding on categorical features\nordinal_encoder = OrdinalEncoder()\ntrain_data[categorical_columns]=ordinal_encoder.fit_transform(train_data[categorical_columns])\ntest_data[categorical_columns]=ordinal_encoder.transform(test_data[categorical_columns])","910ac192":"#lets look at training data now\ntrain_data","c441c361":"#splitting the data in X_train and y_train\nX = train_data.copy().drop('target',axis=1)\ny=train_data['target'].copy()","73071f21":"from sklearn.model_selection import train_test_split\nX_train,X_valid,y_train,y_valid = train_test_split(X,y,test_size=0.3,random_state=0) ","67e19052":"from sklearn.model_selection import GridSearchCV\ncv = GridSearchCV(XGBRegressor(),{\n    'n_estimators': [90,100,110],\n    'learning_rate': [0.15,0.2,0.25]\n},cv=3,return_train_score=True)\ncv.fit(X_train,y_train)\ndf = pd.DataFrame(cv.cv_results_)\ndf","7942d684":"xgb_model = XGBRegressor(learning_rate=0.15,n_estimators=110)\nxgb_model.fit(X_train,y_train)","21462fc5":"pred = xgb_model.predict(X_valid)\nrmse=np.sqrt(mean_squared_error(y_valid,pred))\nprint(rmse)","3740784d":"X_test= test_data.copy()\n# Use the model to generate predictions\npredictions = xgb_model.predict(X_test)\n\n# Save the predictions to a CSV file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'target': predictions})\noutput.to_csv('submission.csv', index=False)","a41dc3fd":"**No Null values in the testing data as well**","30edcd53":"There are no null values in the dataset, we are good to move ahead","e0afa71f":"**Descriptive Statistics ^**"}}