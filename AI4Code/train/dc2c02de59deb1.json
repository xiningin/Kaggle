{"cell_type":{"2dddec60":"code","a8f96268":"code","2996e2dd":"code","a37e112c":"code","0baf37f8":"code","93829423":"code","dd7532e0":"code","bf75cf70":"code","4efe2aea":"code","ebc8632f":"code","81c92214":"code","a238c467":"code","8b89f8eb":"code","36528e6f":"code","3d1bdbc6":"code","ebedbb14":"code","3133b1c3":"code","f8da0140":"code","af622bd4":"code","6b12bb84":"code","98f97006":"code","b4a4b567":"code","35b9bb7e":"code","37908643":"code","834c8783":"code","64e62533":"code","d7d8e444":"code","809a94c7":"code","13458a7e":"code","3465a5cd":"code","fcde983c":"code","f6c5374f":"code","1ee9905c":"code","f37b4e7b":"code","dbd90c83":"code","59095521":"code","1c6222e9":"code","083fca1e":"code","8c89c4dc":"code","4c4ca8d1":"code","359b11b3":"code","5693dcbe":"code","4f800228":"code","5c92f3b8":"code","5f6da3d3":"code","db7f9a48":"code","74f0605d":"code","8a7b0365":"code","f66b3683":"code","6ad12a3a":"code","5ed996e9":"code","3226acd5":"code","a55ec76f":"code","2a48e30e":"code","c56e4a90":"code","f015e9c8":"code","f77eaef4":"markdown","9e068467":"markdown","82a5f602":"markdown","9a457565":"markdown","072872f3":"markdown"},"source":{"2dddec60":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a8f96268":"import numpy as np\nimport pandas as pd\npd.options.display.max_columns=200\n\nimport math\n#import pyproj\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\n\nfrom geopy.distance import great_circle\n\nimport lightgbm as lgb\nfrom lightgbm import LGBMRegressor\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\n\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingRegressor\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\nfrom sklearn.inspection import permutation_importance\n\nfrom tqdm import tqdm_notebook as tqdm","2996e2dd":"df_train=pd.read_csv('..\/input\/machine-learning-homework\/train.csv', index_col=0)\ndf_test=pd.read_csv('..\/input\/machine-learning-homework\/test.csv', index_col=0)\ndf_city=pd.read_csv('..\/input\/machine-learning-homework\/city_info.csv', index_col=0)\ndf_station=pd.read_csv('..\/input\/machine-learning-homework\/station_info.csv')","a37e112c":"df_train.insert(9,\"AverageTimeToNearestStation\",0)\ndf_train['AverageTimeToNearestStation']=df_train['MinTimeToNearestStation']*0.5+df_train['MaxTimeToNearestStation']*0.5\ndf_test.insert(9,\"AverageTimeToNearestStation\",0)\ndf_test['AverageTimeToNearestStation']=df_test['MinTimeToNearestStation']*0.5+df_test['MaxTimeToNearestStation']*0.5","0baf37f8":"df_train=df_train.merge(df_station,left_on=\"NearestStation\", right_on=\"Station\", how='left')\ndf_test=df_test.merge(df_station,left_on=\"NearestStation\", right_on=\"Station\", how='left')","93829423":"def calc_distance(df, dist):\n    return great_circle((df.Latitude, df.Longitude), dist).meters","dd7532e0":"station = 'Tokyo'\nlat_dist = df_station[df_station.Station==station].Latitude.values[0]\nlon_dist = df_station[df_station.Station==station].Longitude.values[0]\n\ndf_train.loc[df_train.Latitude.isnull()==False, 'distance_%s'%station] = \\\ndf_train[df_train.Latitude.isnull()==False].apply(calc_distance, dist=(lat_dist, lon_dist), axis=1)","bf75cf70":"station = 'Tokyo'\nlat_dist = df_station[df_station.Station==station].Latitude.values[0]\nlon_dist = df_station[df_station.Station==station].Longitude.values[0]\n\ndf_test.loc[df_test.Latitude.isnull()==False, 'distance_%s'%station] = \\\ndf_test[df_test.Latitude.isnull()==False].apply(calc_distance, dist=(lat_dist, lon_dist), axis=1)","4efe2aea":"y_train=df_train.TradePrice\nX_train=df_train.drop(['TradePrice'],axis=1)\nX_test=df_test.copy()\nX_concat=pd.concat([X_train, X_test])\nprint(len(X_concat))","ebc8632f":"station = 'Tokyo'\nlat_dist = df_station[df_station.Station==station].Latitude.values[0]\nlon_dist = df_station[df_station.Station==station].Longitude.values[0]\n\ndf_city.loc[df_city.Latitude.isnull()==False, 'distance2_%s'%station] = \\\ndf_city[df_city.Latitude.isnull()==False].apply(calc_distance, dist=(lat_dist, lon_dist), axis=1)","81c92214":"X_concat=X_concat.merge(df_city,on=\"Municipality\", how='left')","a238c467":"X_concat2=X_concat.copy()","8b89f8eb":"X_concat2.shape","36528e6f":"print(X_concat2.isnull().sum())","3d1bdbc6":"X_concat2.insert(11,\"FloorPlanNumber\",0)\nX_concat2.insert(25,'FrontageDirectionFlag',0)\nX_concat2.insert(27,\"PrivateRoadFlag\",0)\nX_concat2.FloorPlanNumber=X_concat2.FloorPlanNumber.astype(object)\nX_concat2.FloorPlanNumber=X_concat2.FloorPlan\nX_concat2.FrontageDirectionFlag=X_concat2.FrontageDirectionFlag.astype(object)\nX_concat2.FrontageDirectionFlag=X_concat2.Direction\nX_concat2.PrivateRoadFlag=X_concat2.PrivateRoadFlag.astype(object)\nX_concat2.PrivateRoadFlag=X_concat2.Classification\nX_concat2.insert(1,'TypeFlag',0)\nX_concat2.TypeFlag=X_concat2.Type\nX_concat2.insert(3,\"RegionFlag\",0)\nX_concat2.RegionFlag=X_concat2.Region\nX_concat2.insert(35,'Year2',0)\nX_concat2.insert(43,'kencho',0)\nX_concat2.insert(15,'EconomicArea',0)","ebedbb14":"replace_dict_rooms={\n    '3LDK':4, '4DK':5, '2LDK': 3, '4LDK':5, '2DK':3, '1K':2, '3LDK+S':5, '5LDK':6, '3DK':4, '1LDK':2,\n    '2DK+S':4, 'Open Floor':2, '1DK':2, '1R':2, '4LDK+S':5, '2K':3, '2LDK+S':4, '6DK':7, '1LDK+S':2, '5DK':6,\n    '1R+S':2, '1LK':2, '1K+S':2, '3K':4, '7LDK':8, '4K':5, '3DK+S':4, '3D':4, '1DK+S':3, '6LDK':7,\n    'Studio Apartment':1,'6LDK+S':8, '4L+K':6, '5LDK+S':7, '7DK':9, '3LK':5, '5K':6, '2K+S':4, '8LDK':10, '3LDK+K':5, '3LD':4,\n    '1L':1, '4DK+S':7, '2LK':4, 'Duplex':6,'7LDK+S':9, '4LDK+K':6, '3LD+S':5, '2LD+S':4, '8LDK+S':10, '4L':4, '2L':2,\n    '2LDK+K':4, '2LK+S':4, '5LDK+K':7, '1LD+S':3, '2L+S':4, '3K+S':5, '1DK+K':3, '2LD':3, '1L+S':2, '2D':3, '4D':5}\nX_concat2.FloorPlanNumber.replace(replace_dict_rooms, inplace=True)","3133b1c3":"replace_dict_facing_road={'No facing road':1, 'Southwest':0, 'Northwest':0, 'East':0, 'Northeast':0, 'Southeast':0,\n                          'South':0, 'West':0, 'North':0}\nX_concat2.FrontageDirectionFlag.replace(replace_dict_facing_road, inplace=True)","f8da0140":"replace_dict_private_road={'Private Road':1, 'Road':0, 'City Road':0, 'Prefectural Road':0, 'Village Road':0, \n                           'National Highway':0,\n                           'Access Road':0, 'Agricultural Road':0, 'Ward Road':0, 'Town Road':0, 'Kyoto\/ Osaka Prefectural Road':0,\n                           'Forest Road':0, 'Hokkaido Prefectural Road':0, 'Tokyo Metropolitan Road':0}\nX_concat2.PrivateRoadFlag.replace(replace_dict_private_road, inplace=True)","af622bd4":"replace_dict_type_flag={'Residential Land(Land Only)':1, 'Agricultural Land':0,\n                           'Residential Land(Land and Building)':1, 'Pre-owned Condominiums, etc.':1,\n                           'Forest Land':0}\nX_concat2.TypeFlag.replace(replace_dict_type_flag, inplace=True)","6b12bb84":"replace_dict_region_flag={'Residential Area':0, 'Potential Residential Area':0, 'Commercial Area':1,\n                        'Industrial Area':0}\nX_concat2.RegionFlag.replace(replace_dict_region_flag, inplace=True)","98f97006":"X_concat2['Year2']=X_concat2['Year']+X_concat2['Quarter']*0.25","b4a4b567":"print(X_concat2.isnull().sum())","35b9bb7e":"#X_concat2['FloorAreaRatio'].fillna(200, inplace=True)\nX_concat2['RegionFlag'].fillna(0, inplace=True)","37908643":"X_concat2['EconomicArea']=X_concat2['Area']*(X_concat2['TypeFlag']+X_concat2['RegionFlag']+0.001)*X_concat2['FloorAreaRatio']\/100","834c8783":"X_concat2.head()","64e62533":"X_concat2.drop(['Latitude_x'], axis=1, inplace=True)\nX_concat2.drop(['Longitude_x'],axis=1, inplace=True)\nX_concat2.drop(['Latitude_y'], axis=1, inplace=True)\nX_concat2.drop(['Longitude_y'],axis=1, inplace=True)\n#X_concat2.drop(['Latitude'], axis=1, inplace=True)\n#X_concat2.drop(['Longitude'], axis=1, inplace=True)\nX_concat2.drop(['TimeToNearestStation'], axis=1, inplace=True)\nX_concat2.drop(['Station'], axis=1, inplace=True)\nX_concat2.drop(['Year','Quarter'], axis=1, inplace=True)\nX_concat2.drop(['kencho'], axis=1, inplace=True)\nX_concat2.drop(['distance_Tokyo'], axis=1, inplace=True)\nX_concat2.drop(['EconomicArea'], axis=1, inplace=True)\nX_concat2.drop(['MaxTimeToNearestStation'], axis=1, inplace=True)\nX_concat2.drop(['AverageTimeToNearestStation'], axis=1, inplace=True)\n#X_concat2.drop(['Municipality'])","d7d8e444":"#print(df_station[df_station.Station=='Yokohama'].Latitude.values[0])","809a94c7":"#print(df_station[df_station.Station=='Yokohama'].Ltitude.values[0])","13458a7e":"#\u7def\u5ea6\u3001\u7d4c\u5ea6\u60c5\u5831(station_info\u304b\u3089\uff09\u2192Yokohama(35.46579,139.6223),Omiya(35.90645,139.6239), \n#Takasaki(36.32283,139.0127), Mito(36.37076,140.4763),Utsunomiya(36.55902,139.8985),\n#Chiba(35.61313,140.1134)","3465a5cd":"#X_concat2.head()","fcde983c":"X_concat2[X_concat2.MinTimeToNearestStation.isnull()==True]","f6c5374f":"#MinTimeToNearestStation\u306e\u6b20\u640d\u3092\u88dc\u5b8c\n\nnull_ix=X_concat2[X_concat2.MinTimeToNearestStation.isnull()==True].index\nsummary=X_concat2.groupby(['DistrictName'])['MinTimeToNearestStation'].median()\n#summary\nX_concat2.loc[null_ix, 'MinTimeToNearestStation']=X_concat2.DistrictName.map(summary)\n\nnull_ix=X_concat2[X_concat2.MinTimeToNearestStation.isnull()==True].index\nsummary=X_concat2.groupby(['Municipality'])['MinTimeToNearestStation'].median()\nX_concat2.loc[null_ix, 'MinTimeToNearestStation']=X_concat2.Municipality.map(summary)\n#X_concat2.loc[null_ix]\n\n\n#Municipality\u306b\u3082\u6700\u77ed\u6642\u9593\u304c\u7121\u3044\u306e\u306f\u96e2\u5cf6\u306a\u306e\u3067\u300112\u6642\u9593\u3092\u4ee3\u5165\nX_concat2['MinTimeToNearestStation'].fillna(1200,inplace=True)","1ee9905c":"#FloorAreaRatio\u306e\u6b20\u640d\u3092\u88dc\u5b8c\n\nnull_ix=X_concat2[X_concat2.FloorAreaRatio.isnull()==True].index\nsummary=X_concat2.groupby(['DistrictName'])['FloorAreaRatio'].median()\n#summary\nX_concat2.loc[null_ix, 'FloorAreaRatio']=X_concat2.DistrictName.map(summary)\n\nnull_ix=X_concat2[X_concat2.FloorAreaRatio.isnull()==True].index\nsummary=X_concat2.groupby(['Municipality'])['FloorAreaRatio'].median()\nX_concat2.loc[null_ix, 'FloorAreaRatio']=X_concat2.Municipality.map(summary)\n#X_concat2.loc[null_ix]\n\nX_concat2['FloorAreaRatio'].fillna(200, inplace=True) #\u4e2d\u592e\u5024\u3092\u4ee3\u5165\n","f37b4e7b":"X_concat2.loc[null_ix]","dbd90c83":"print(X_concat2.isnull().sum())","59095521":"print(X_concat2.median())","1c6222e9":"X_concat2.head()","083fca1e":"#\u30d5\u30ed\u30a2\u6570\u306e\u4e2d\u592e\u5024\u304c3\u3001\u9762\u7a4d\u306e\u4e2d\u592e\u5024\u304c120\u306a\u306e\u3067\u3001\u30d5\u30ed\u30a2\u6570\u306f\u9762\u7a4d\/40\u3067NaN\u3092\u7a74\u57cb\u3081\u8a08\u7b97\n#X_concat2['FloorPlanNumber'].fillna(X_concat['Area']\/40,inplace=True)","8c89c4dc":"#\u9762\u7a4d\u4e2d\u592e\u5024\u304c120\u3001\u5bb9\u7a4d\u7387\u4e2d\u592e\u5024\u304c200\u3001\u7dcf\u9762\u7a4d\u4e2d\u592e\u5024\u304c200\u306a\u306e\u3067\u3001\nX_concat2['TotalFloorArea'].fillna(X_concat2['Area']*X_concat2['FloorAreaRatio']\/100*X_concat2['TypeFlag']*0.416, inplace=True)","4c4ca8d1":"X_concat2.head()","359b11b3":"#X_concat2.to_csv('hasebe_analysis_2')","5693dcbe":"#scaler=StandardScaler()\n#X_concat2['Area']=scaler.fit_transform(X_concat2['Area'])","4f800228":"for col in X_concat2.columns:\n    if (X_concat2[col].dtype == 'float64'):\n        scaler=StandardScaler()\n        X_concat2[col]=scaler.fit_transform(X_concat2[col].values.reshape(-1,1))","5c92f3b8":"for col in X_concat2.columns:\n    if (X_concat2[col].dtype == \"object\"):\n        le = LabelEncoder()\n        X_concat2[col]=le.fit_transform(X_concat2[col].fillna('NaN'))\n\nX_train=X_concat2[X_concat2.index.isin(X_train.index)].fillna(-99999)\nX_test=X_concat2[~X_concat2.index.isin(X_train.index)].fillna(-99999)","5f6da3d3":"X_concat2.head()","db7f9a48":"groups=X_train.Prefecture.values\nX_train.drop(['Prefecture'], axis=1, inplace=True)\nX_test.drop(['Prefecture'],axis=1, inplace=True)","74f0605d":"X_train.drop(['Municipality'], axis=1, inplace=True)\nX_test.drop(['Municipality'], axis=1, inplace=True)\nX_train.drop(['DistrictName'], axis=1, inplace=True)\nX_test.drop(['DistrictName'], axis=1, inplace=True)","8a7b0365":"X_train.head()","f66b3683":"X_test.head()","6ad12a3a":"n_fold = 5\ncv = GroupKFold(n_splits=n_fold)\n\ny_pred_train = np.zeros(len(X_train))\ny_pred_test = np.zeros(len(X_test))\nscores = []\n\nfor i, (train_index, val_index) in enumerate(cv.split(X_train, y_train, groups)):\n    X_train_, y_train_ = X_train.iloc[train_index], y_train.iloc[train_index]\n    X_val, y_val = X_train.iloc[val_index], y_train.iloc[val_index]\n    \n    #model = HistGradientBoostingRegressor(learning_rate=0.05, random_state=71, max_iter=500)\n    model = LGBMRegressor()\n    model.fit(X_train_, np.log1p(y_train_))\n    y_pred_val = np.expm1(model.predict(X_val))\n    y_pred_test += np.expm1(model.predict(X_test))\/n_fold\n    \n    y_pred_train[val_index] = y_pred_val\n    score = mean_squared_log_error(y_val, y_pred_val)**0.5\n    scores.append(score)\n    \n    print(\"Fold%d RMSLE: %f\"%(i, score))\n    \nprint(\"Overall RMSLE: %f\u00b1%f\"%(np.mean(scores), np.std(scores)))","5ed996e9":"val_area=['Nerima Ward', 'Kita Ward', 'Itabashi Ward']\nX_val2= X_train[df_train.Municipality.isin(val_area)]\ny_val2= y_train[df_train.Municipality.isin(val_area)]\n\nX_train2=X_train[~df_train.Municipality.isin(val_area)]\ny_train2=y_train[~df_train.Municipality.isin(val_area)]","3226acd5":"X_val2.head()","a55ec76f":"X_train2.head()","2a48e30e":"model=HistGradientBoostingRegressor(learning_rate=0.05, random_state=71, max_iter=500)\nmodel.fit(X_train2, np.log1p(y_train2))\nresult = permutation_importance(model, X_val2, np.log1p(y_val2), n_repeats=10, random_state=71)\n\nperm_sorted_idx=result.importances_mean.argsort()","c56e4a90":"num_features=len(X_val2.columns)\n\nplt.figure(figsize=[8,15])\nplt.title('Permutation Importance')\nplt.barh(range(num_features), result['importances_mean'][perm_sorted_idx], xerr=result['importances_std'][perm_sorted_idx])\nplt.yticks(range(num_features), X_val.columns[perm_sorted_idx])\nplt.show()","f015e9c8":"df_sub=pd.read_csv('..\/input\/machine-learning-homework\/sample_submission.csv', index_col=0)\ndf_sub.TradePrice=y_pred_test\ndf_sub.to_csv('submission.csv')","f77eaef4":"print(X_concat2.Prefecture.unique())","9e068467":"X_concat2.insert(34,'latitude-m',0)\nX_concat2.insert(35,'longitude-m',0)\nX_concat2.insert(36,'distance3',0)","82a5f602":"#\u5404\u90fd\u9053\u5e9c\u770c\u306e\u4e3b\u8981\u99c5\u3092\u9078\u629e\nfor pref in X_concat2['Prefecture']:\n    if pref=='Tokyo':\n        MainStation='Tokyo'\n    elif pref=='Kanagawa Prefecture':\n        MainStation='Yokohama'\n    elif pref=='Chiba Prefecture':\n        MainStation='Chiba'\n    elif pref=='Ibaraki Prefecture':\n        MainStation='Mito'\n    elif pref=='Gunma Prefecture':\n        MainStation='Takasaki'\n    elif pref=='Saitama Prefecture':\n        MainStation='Omiya'\n    elif pref=='Tochigi Prefecture':\n        MainStation='Utsunomiya'\n\n#\u4e3b\u8981\u99c5\u306e\u7d4c\u7def\u5ea6\u60c5\u5831\u3092\u53d6\u5f97        \nlat0=df_station[df_station.Station==MainStation].Latitude.values[0]\nlon0=df_station[df_station.Station==MainStation].Longitude.values[0]\n\n#\u305d\u306e\u571f\u5730\u306e\u7d4c\u7def\u5ea6\u60c5\u5831\u3092\u5909\u6570\u306b\u5165\u529b    \nlat1=X_concat2['Latitude']\nlon1=X_concat2['Longitude']\n    \n#\u914d\u5217\u3092\u30ea\u30b9\u30c8\u306b\u5909\u63db\nlat0.tolist()\nlon0.tolist()\nlat1.tolist()\nlon1.tolist()\n\n#\u7d50\u679c\u3092\u683c\u7d0d    \nX_concat2['distance_to_Mainstation']=great_circle((lat0, lon0),(lat1, lon1))\n            ","9a457565":"#FloorAreaRatio\u306e\u6b20\u640d\u3092\u88dc\u5b8c\n\nnull_ix=X_concat2[X_concat2.FloorAreaRatio.isnull()==True].index\nsummary=X_concat2.groupby(['DistrictName'])['FloorAreaRatio'].median()\n#summary\nX_concat2.loc[null_ix, 'FloorAreaRatio']=X_concat2.DistrictName.map(summary)\n\nnull_ix=X_concat2[X_concat2.FloorAreaRatio.isnull()==True].index\nsummary=X_concat2.groupby(['Municipality'])['FloorAreaRatio'].median()\nX_concat2.loc[null_ix, 'FloorAreaRatio']=X_concat2.Municipality.map(summary)\n#X_concat2.loc[null_ix]\n\n#X_concat2['FloorAreaRatio'].fillna(X_concat2['FloorAreaRatio'].median, inplace=True)","072872f3":"fig, ax=plt.subplots(figsize=(10,15))\nlgb.plot_importance(LGBMModel, model, max_num_features=50, ax=ax, importance_type='gain')"}}