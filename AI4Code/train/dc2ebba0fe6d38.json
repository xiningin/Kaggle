{"cell_type":{"c5832583":"code","7f3196af":"code","6e92bb36":"code","0efa8afe":"code","fa20c288":"code","8f946f42":"code","4f8470af":"code","5c8f9210":"code","3b225458":"code","eb4e58b0":"code","027b0982":"code","c67ff28c":"code","4159eabe":"code","84780e67":"code","8b85670a":"code","c53a5647":"code","a9647ede":"code","c82dc670":"code","462738a2":"code","2dd2d942":"code","a1bb5cfb":"code","19b7b999":"code","25f10ddf":"code","0d0395af":"code","240b57c5":"code","c2884901":"code","7b8123db":"markdown","ccbbc850":"markdown","05f8fa66":"markdown","cf22b78f":"markdown","9d02fbaa":"markdown","cd31f396":"markdown","7253d706":"markdown"},"source":{"c5832583":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7f3196af":"dirname = '\/kaggle\/input\/anime-recommendations-database'\n\nrating_path = os.path.join(dirname, 'rating.csv')\nanime_path = os.path.join(dirname, 'anime.csv')\n\nrating_df = pd.read_csv(rating_path)\nitem_df = pd.read_csv(anime_path)","6e92bb36":"print(rating_df.shape)\nprint(rating_df.head())","0efa8afe":"print(item_df.shape)\nprint(item_df.head())","fa20c288":"rating_df.isna().sum()","8f946f42":"colname_mapping = {\n    'anime_id': 'item_id'\n}\nrating_df = rating_df.rename(columns=colname_mapping)\nitem_df = item_df.rename(columns=colname_mapping)","4f8470af":"print(rating_df.head())\nprint(item_df.head())","5c8f9210":"train = rating_df","3b225458":"from implicit import nearest_neighbours as nn\nimport scipy.sparse as sparse","eb4e58b0":"sparse_item_user = sparse.csr_matrix(\n    (train['rating'].astype(float),\n     (train['item_id'], train['user_id'])))\n\nmodel = nn.CosineRecommender()\n\n# Calculate the confidence by multiplying it by our alpha value.\nalpha_val = 15\ndata_conf = (sparse_item_user * alpha_val).astype('double')\nmodel.fit(data_conf)","027b0982":"items_id = train.item_id.unique().tolist()\nitems_id[:5]","c67ff28c":"def create_item_id_to_similar(model, nb_reco, factor_similar, items_id):\n    return {item_id: [(sim_item_id, sim_score)\n                      for sim_item_id, sim_score in model.similar_items(\n                          item_id, nb_reco * factor_similar)\n                      if sim_item_id != item_id\n                     ]\n            for item_id in items_id\n           }\n\nitem_id_to_similar = create_item_id_to_similar(\n    model=model,\n    nb_reco=10,\n    factor_similar=5,\n    items_id=items_id)","4159eabe":"list(item_id_to_similar.items())[:2]","84780e67":"# visualize similar anime\nmax_item = 3\n\ndef print_item_features(item_id):\n    current_item = item_df[item_df['item_id'] == item_id]\n    print(f\"id: {item_id}\\nname: {current_item['name'].values[0]}\\ngenre: {current_item['genre'].values[0]}\")\n\nfor item_id, sim_item_ids in list(item_id_to_similar.items())[:max_item]:\n    print(\"-----------------------------------------------\")\n    print_item_features(item_id=item_id)\n    print(\"-----------------------------------------------\")\n    sim_item_ids = [id[0] for id in sim_item_ids]\n    for counter, sim_item_id in enumerate(sim_item_ids):\n        print(f\"similarity rank {counter+1}\")\n        print_item_features(item_id=sim_item_id)\n    print(\"-----------------------------------------------\")","8b85670a":"def get_sorted_by_values(items_id,\n                         item_id_to_similar,\n                         nb_reco):   \n    score = {}\n\n    for item_id in items_id:\n        for sim_results in item_id_to_similar[item_id]:\n            score[sim_results[0]] = score.get(sim_results[0], 0) + sim_results[1]\n  \n    # order the dictionary to identify the most similar animes\n    sorted_by_value = sorted(score.items(), key=lambda kv: kv[1], reverse=True)\n    return sorted_by_value","c53a5647":"sorted_by_value = get_sorted_by_values(items_id=items_id[:10],\n                     item_id_to_similar=item_id_to_similar,\n                     nb_reco=5\n                    )","a9647ede":"sorted_by_value","c82dc670":"def user_to_visited_item_id_dict(train,\n                                 user_list):\n    return train.groupby('user_id')['item_id'].apply(lambda g: g.values\n                                                  .tolist()).to_dict()","462738a2":"user_to_visited_item_id_dict = user_to_visited_item_id_dict(train=train,\n                                                            user_list=train.user_id.unique().tolist())","2dd2d942":"def print_visited_item(user_id):\n    visited_item_list = user_to_visited_item_id_dict[user_id]\n    print(f\"For user_id: {user_id}, visited animes (count:{len(visited_item_list)}) are:\")\n    for counter, item_id in enumerate(visited_item_list):\n        print(f\"visited anime {counter+1}\")\n        print_item_features(item_id=item_id)","a1bb5cfb":"print_visited_item(user_id=train.user_id.values[0])","19b7b999":"def compute_recommendation(user_id, user_to_visited_item_id_dict, item_id_to_similar, nb_reco=5):\n    visited_item_list = user_to_visited_item_id_dict[user_id]\n    sorted_by_values = get_sorted_by_values(\n        items_id=visited_item_list,\n        item_id_to_similar=item_id_to_similar,\n        nb_reco=nb_reco\n    )\n    return [id_score[0] for id_score in sorted_by_values][:nb_reco]\n\ndef print_user_recommendation(user_id, user_to_visited_item_id_dict, item_id_to_similar, nb_reco=5):\n    recommendation_list = compute_recommendation(\n        user_id=user_id, \n        user_to_visited_item_id_dict=user_to_visited_item_id_dict, \n        item_id_to_similar=item_id_to_similar, \n        nb_reco=nb_reco)\n    \n    for counter, item_id in enumerate(recommendation_list):\n        print(f\"recommended item {counter+1}\")\n        print_item_features(item_id=item_id)","25f10ddf":"compute_recommendation(\n    user_id=train.user_id.values[0],\n    user_to_visited_item_id_dict=user_to_visited_item_id_dict,\n    item_id_to_similar=item_id_to_similar,\n    nb_reco=5)","0d0395af":"print_user_recommendation(\n    user_id=train.user_id.values[0],\n    user_to_visited_item_id_dict=user_to_visited_item_id_dict,\n    item_id_to_similar=item_id_to_similar,\n    nb_reco=5)","240b57c5":"def print_visited_anime_and_recommendation(\n    user_id,\n    user_to_visited_item_id_dict=user_to_visited_item_id_dict, \n    item_id_to_similar=item_id_to_similar, \n    nb_reco=5\n):\n    \n    print_visited_item(user_id=user_id)\n    \n    print_user_recommendation(\n        user_id=user_id,\n        user_to_visited_item_id_dict=user_to_visited_item_id_dict,\n        item_id_to_similar=item_id_to_similar,\n        nb_reco=nb_reco\n    )\n\n\nimport random\ndef get_random_user(users):\n    return random.choice(users)","c2884901":"print_visited_anime_and_recommendation(\n    user_id=get_random_user(users=train.user_id.unique().tolist())\n)","7b8123db":"# Computation and visualization functions definition","ccbbc850":"We don't have NA on rating_df! Good point.\n\n# Data preparation\n\nLet's rename the anime_id by item_id. From now, the \"animes\" will be called \"items\".","05f8fa66":"# Recommendation visualization for a random user","cf22b78f":"## Simple but effective collaborative filtering recommendation system by anime-similarity ","9d02fbaa":"# Model definition and fitting","cd31f396":"# Item-similarity dict creation","7253d706":"# Data importation"}}