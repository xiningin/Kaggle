{"cell_type":{"99a86af2":"code","9c3b1b36":"code","45b0d6f2":"code","02099af4":"code","bca252ca":"code","1253e099":"code","deec62b1":"code","c7310e4d":"code","127217e9":"code","0c6bfb38":"code","288287dd":"code","2d2b340d":"code","689235e5":"code","5672981e":"code","b7a6f954":"code","6cd6b888":"code","7df1784e":"code","5e7dfe56":"markdown","d37d0758":"markdown","8b0c6716":"markdown","31e91393":"markdown","1d15d5b5":"markdown","b7eae64a":"markdown","614121d2":"markdown"},"source":{"99a86af2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","9c3b1b36":"train=pd.read_csv('..\/input\/Website Phishing.csv')\ntrain.head(10)","45b0d6f2":"a=len(train[train.Result==0])\nb=len(train[train.Result==-1])\nc=len(train[train.Result==1])\nprint(a,\"times 0 repeated in Result\")\nprint(b,\"times -1 repeated in Result\")\nprint(c,\"times 1 repeated in Result\")\n\n","02099af4":"sns.countplot(train['Result'])","bca252ca":"sns.heatmap(train.corr(),annot=True)","1253e099":"sns.pairplot(train)\n","deec62b1":"train.info()\ntrain.describe()","c7310e4d":"X=train.drop('Result',axis=1).values \ny=train['Result'].values","127217e9":"print(X)","0c6bfb38":"# transform the labels to 0's , 1's and -1's\nfrom sklearn.preprocessing import LabelEncoder\nenc = LabelEncoder()\ny = enc.fit_transform(y)\n\nfor i in range(0, len(X)):\n    X[i] = enc.fit_transform(X[i])\n","288287dd":"X","2d2b340d":"sns.heatmap(train.isnull(),cmap='Blues')\n","689235e5":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=10)\n\n# Show the results of the split\nprint(\"Training set has {} samples.\".format(X_train.shape[0]))\nprint(\"Testing set has {} samples.\".format(X_test.shape[0]))\n","5672981e":"from sklearn.naive_bayes import MultinomialNB\n\n#create Naive Bayes object\nmodel=MultinomialNB(alpha=1.0)\n\n#Train the model using training data \nmodel.fit(X_train,y_train)","b7a6f954":"#import Evaluation metrics \nfrom sklearn.metrics import matthews_corrcoef\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\n \n#Test the model using testing data\npredictions = model.predict(X_test)\n","6cd6b888":"from sklearn.metrics import confusion_matrix,classification_report\ncm=confusion_matrix(y_test,predictions)\nsns.heatmap(cm,annot=True)","7df1784e":"print(\"f1 score is \",f1_score(y_test,predictions,average='weighted'))\nprint(\"matthews correlation coefficient is \",matthews_corrcoef(y_test,predictions))\n\n#secondary metric,we should not consider accuracy score because the classes are imbalanced.\n\nprint('****************************************************************************************')\nprint(\"The accuracy of your Naive bayes on testing data is: \",100.0 *accuracy_score(y_test,predictions))\nprint('****************************************************************************************')","5e7dfe56":"# STEP #4: Model Training","d37d0758":"# STEP #1: IMPORT DATASET","8b0c6716":"# STEP #2: Explore \/Visualze Data set","31e91393":"# STEP #0: Import Libraries","1d15d5b5":"# STEP #5: Model Testing","b7eae64a":"# Introduction\nwebsite phishing dataset problem.\nFitting Naive Bayes and creating confusion matrix of predicted values and real values I was able to get  78.81% accuracy.\n","614121d2":"# STEP #3: Prepare the Data for Training \/ Data Cleaning"}}