{"cell_type":{"fdd3de1f":"code","4c76a14e":"code","1f4a9ffd":"code","a8d3c205":"code","f59d5cf6":"code","fdd25d2d":"code","ef936e4a":"markdown","cd7553cf":"markdown","7e948547":"markdown"},"source":{"fdd3de1f":"# Loading libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom plotly import tools\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport os\nprint(os.listdir(\"..\/input\"))","4c76a14e":"# Displaying available data files and directories\ndef dirlist(parent,child,count=0):\n    if os.path.isdir(parent+child+\"\/\"):\n        p_list = os.listdir(parent+child+\"\/\")\n        p_text = parent+child+\"\/\"\n        if len(p_list)>0:\n                count = count + 1\n                for val,child in enumerate(p_list):\n                    print(\"{}-{}\".format(\" \"*(count*4),child))\n                    dirlist(p_text,child,count)\n        else:\n            pass\n    \n    \nfor child in os.listdir(\"..\/input\/cpe-data\/\"):\n    print(\"{}\".format(child))\n    dirlist(\"..\/input\/cpe-data\/\",child)\n        ","1f4a9ffd":"#Let's look at the available department files\n[f for f in os.listdir(\"..\/input\/cpe-data\/\") if f.startswith(\"Dept\")]","a8d3c205":"#Let's start with Dept_23-00089\nos.listdir(\"..\/input\/cpe-data\/Dept_23-00089\/23-00089_ACS_data\/\")","f59d5cf6":"#First, we will look at race,sex and age data\none_df = pd.read_csv(\"..\/input\/cpe-data\/Dept_23-00089\/23-00089_ACS_data\/23-00089_ACS_race-sex-age\/ACS_15_5YR_DP05_with_ann.csv\")\none_df.info()\none_df.describe()","fdd25d2d":"data = [go.Histogram(x=one_df[\"HC01_VC04\"],\n                     name='Male',\n                     opacity=0.7,\n                     marker=dict(\n                        color='rgb(158,202,225)',\n                        line=dict(\n                            color='rgb(8,48,107)',\n                            width=1.5,\n                        )\n                    )),\n        go.Histogram(x=one_df[\"HC01_VC05\"],\n                     name='Female',\n                     opacity=0.7,\n                     marker=dict(\n                        color='rgb(255,254,115)',\n                        line=dict(\n                            color='rgb(255,233,93)',\n                            width=1.5,\n                        )\n                    )),\n        go.Histogram(x=one_df[\"HC01_VC03\"],\n                     name='Total',\n                     opacity=0.7,\n                     marker=dict(\n                        color='rgb(0,255,174)',\n                        line=dict(\n                            color='rgb(51,158,53)',\n                            width=1.5,\n                        )\n                    ))]\n\nupdatemenus = list([\n    dict(type=\"buttons\",\n         active=-1,\n         buttons=list([\n            dict(label = 'Male',\n                 method = 'update',\n                 args = [{'visible': [True, False, False]},\n                         {'title': 'Male'}]),\n            dict(label = 'Female',\n                 method = 'update',\n                 args = [{'visible': [False, True, False]},\n                         {'title': 'Female'}]),\n            dict(label = 'Total',\n                 method = 'update',\n                 args = [{'visible': [False,False,True]},\n                         {'title': 'Total'}]),\n            dict(label = 'Male & Female',\n                 method = 'update',\n                 args = [{'visible': [True, True, False]},\n                         {'title': 'Male & Female'}]),\n             dict(label = 'Male & Total',\n                 method = 'update',\n                 args = [{'visible': [True, False, True]},\n                         {'title': 'Male & Total'}]),\n             dict(label = 'Female & Total',\n                 method = 'update',\n                 args = [{'visible': [False, True, True]},\n                         {'title': 'Female & Total'}]),\n             dict(label = 'All',\n                 method = 'update',\n                 args = [{'visible': [True, True, True]},\n                         {'title': 'All'}])\n        ]),\n    )\n])\nlayout = go.Layout(barmode='overlay')\nlayout['title'] = 'Population Distribution'\nlayout['showlegend'] = True\nlayout['updatemenus'] = updatemenus\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename='update_button')","ef936e4a":"<img src=\"https:\/\/s3.trustandjustice.org\/images\/partners\/cpe.png\">\n\n## Hunting for Insights \/ Exploration - Policing Equity\nThe Center for Policing Equity (CPE) is research scientists, race and equity experts, data virtuosos, and community trainers working together to build more fair and just systems. Police departments across the United States have joined our National Justice Database, the first and largest collection of standardized police behavioral data.\n\n## Data Science for Good : Problem Statement\nHow do you measure justice? And how do you solve the problem of racism in policing? We look for factors that drive racial disparities in policing by analyzing census and police department deployment data. The ultimate goal is to inform police agencies where they can make improvements by identifying deployment areas where racial disparities exist and are not explainable by crime rates and poverty levels. The biggest challenge is automating the combination of police data, census-level data, and other socioeconomic factors.","cd7553cf":"**This will be a work-in-progress kernel till I don't remove this last statement. It is in a very early stage of development. So, please upvote, comment and stay tuned for future versions where I promise to bring out the best out of this data.**","7e948547":"### Distribution of population according to gender"}}