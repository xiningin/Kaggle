{"cell_type":{"9cca6f12":"code","95a045e3":"code","5109f775":"code","0011ed39":"code","05875eeb":"code","000116d2":"code","0a0d213d":"code","4850f38a":"code","8b237641":"code","4878a901":"code","c2a154cb":"code","c3ebab48":"code","1ab48ad7":"code","22d18ac4":"code","162c8428":"code","a7f103c8":"code","b86e6e36":"code","4ee1dcc9":"code","01cd5b2e":"code","18b7dbf7":"code","bf9c360c":"code","7f7d4383":"code","791270f4":"code","1cbb8cfb":"code","850a14e0":"code","4c83f252":"code","56c23b7d":"code","bbf468dd":"code","0c44b4ba":"code","2fc3e2bf":"code","d730faca":"code","c22dadbf":"code","82da70e4":"code","6d6ef3e1":"code","073de65c":"code","be980b54":"code","8e7676f4":"code","b48d3465":"code","3c09c4f3":"code","79d63bb5":"code","414dbd03":"code","f4d68bba":"code","b423ad97":"code","033e7029":"code","4414c552":"code","0aa1037d":"code","3cb96e77":"code","339ca361":"code","7e467f8f":"code","b6004345":"code","affc1c0d":"code","bd608d29":"code","ed97236f":"code","f0a93d5c":"code","a734eb2e":"code","641f45b3":"code","1d271103":"code","d8f2d02e":"markdown"},"source":{"9cca6f12":"import numpy as np\nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","95a045e3":"df1= pd.read_csv(\"\/kaggle\/input\/cheapest-electric-cars\/Cheapestelectriccars-EVDatabase.csv\")","5109f775":"df1.head()","0011ed39":"print(df1.columns.tolist())","05875eeb":"#filling empty data with 0\n\ndf1=df1.fillna('0')","000116d2":"df1['Manufacturer'] = df1.Name.str.split(' ', 1, expand=True)[0]","0a0d213d":"#cleaning the data\n\n#removing currency sign\n\nPriceinUK=[]\nfor item in df1['PriceinUK']:\n    PriceinUK+=[int(item.replace('\u00a3','').replace(',',''))]\ndf1['PriceinUK']=PriceinUK","4850f38a":"PriceinGermany=[]\nfor item in df1['PriceinGermany']:\n    PriceinGermany+=[int(item.replace('\u20ac','').replace(',',''))]\ndf1['PriceinGermany']=PriceinGermany","8b237641":"FastChargeSpeed=[]\nfor item in df1['FastChargeSpeed']:\n    FastChargeSpeed+=[int(item.replace(' km\/h','').replace('-','0'))]\ndf1['FastChargeSpeed']=FastChargeSpeed","4878a901":"Efficiency=[]\nfor item in df1['Efficiency']:\n    Efficiency+=[int(item.replace(' Wh\/km',''))]\ndf1['Efficiency']=Efficiency","c2a154cb":"Range=[]\nfor item in df1['Range']:\n    Range+=[int(item.replace(' km',''))]\ndf1['Range']=Range","c3ebab48":"TopSpeed=[]\nfor item in df1['TopSpeed']:\n    TopSpeed+=[int(item.replace(' km\/h',''))]\ndf1['TopSpeed']=TopSpeed","1ab48ad7":"Acceleration=[]\nfor item in df1['Acceleration']:\n    Acceleration+=[float(item.replace(' sec',''))]\ndf1['Acceleration']=Acceleration","22d18ac4":"Subtitle=[]\nfor item in df1['Subtitle']:\n    Subtitle+=[float(item.replace('Battery Electric Vehicle | ','').replace(' kWh','').replace('      ',''))]\ndf1['Subtitle']=Subtitle","162c8428":"df1= df1.rename(columns = {'Subtitle':'KWH'})","a7f103c8":"df1.head()","b86e6e36":"df1.info()","4ee1dcc9":"df1.corr()","01cd5b2e":"plt.figure(figsize=(8,6))\nsns.heatmap(df1.corr(), annot=True)","18b7dbf7":"sns.countplot(x = 'Drive', data = df1)","bf9c360c":"sns.countplot(x = 'NumberofSeats', data = df1)","7f7d4383":"plt.figure(figsize=(8,6))\nsns.countplot(x = 'NumberofSeats', hue='Drive', data=df1)","791270f4":"plt.figure(figsize=(18,10))\nsns.countplot(y = 'Manufacturer', data = df1)","1cbb8cfb":"sns.catplot(data=df1, kind=\"bar\", x=\"NumberofSeats\", y=\"KWH\",height=6, hue=\"Drive\")\nplt.title(\"Vehicle KWH Compared with Number of Seats and Drive Type\")\nplt.show()","850a14e0":"sns.relplot(x=\"KWH\", y=\"Acceleration\", height=6,hue=\"Drive\",data=df1)","4c83f252":"sns.relplot(x=\"KWH\", y=\"Acceleration\", size=\"NumberofSeats\", height=6,sizes=(15, 100),data=df1)","56c23b7d":"sns.relplot(x=\"TopSpeed\", y=\"Range\",height=6, hue=\"Drive\",data=df1)","bbf468dd":"sns.displot(\n    df1, x=\"TopSpeed\", col=\"Drive\", \n    binwidth=3, height=7, facet_kws=dict(margin_titles=True),\n)","0c44b4ba":"sns.displot(\n    df1, x=\"TopSpeed\", col=\"NumberofSeats\", \n    binwidth=3, height=7, facet_kws=dict(margin_titles=True),\n)","2fc3e2bf":"#relation between price and features\n\nsns.relplot(x=\"PriceinGermany\", y=\"TopSpeed\", height=6,data=df1)","d730faca":"#relation between price and features\n\nsns.relplot(x=\"PriceinUK\", y=\"TopSpeed\", height=6,data=df1)","c22dadbf":"sns.jointplot(x=df1[\"KWH\"], y=df1[\"Range\"], kind=\"hex\", color=\"#4CB391\")","82da70e4":"sns.jointplot(x=df1[\"KWH\"], y=df1[\"Efficiency\"], kind=\"hex\", color=\"#4CB391\")","6d6ef3e1":"sns.relplot(x=\"FastChargeSpeed\", y=\"Efficiency\", height=6,data=df1)","073de65c":"sns.pairplot(df1[[\"KWH\",\"Acceleration\",\"TopSpeed\",\"Range\",\"FastChargeSpeed\"]])","be980b54":"df1.head()","8e7676f4":"c=0\nfor i in range(0, len(df1[\"PriceinUK\"])):\n    if (df1[\"PriceinUK\"][i]==0):\n        c+=1\nprint('Empty Values:',c)        ","b48d3465":" pd.options.mode.chained_assignment = None","3c09c4f3":"for i in range(0, len(df1[\"PriceinUK\"])):\n    if (df1[\"PriceinUK\"][i]==0):\n        val=df1[\"PriceinGermany\"][i]*0.85\n        df1[\"PriceinUK\"][i]=val\n        ","79d63bb5":"df1.head()","414dbd03":"import category_encoders as ce\n\ntrain_df=df1\n\n# create object of Ordinalencoding\nencoder= ce.OrdinalEncoder(cols=['Drive'],return_df=True,\n                           mapping=[{'col':'Drive',\n'mapping':{'Front Wheel Drive':1,'Rear Wheel Drive':2,'All Wheel Drive':3}}])\n\n\n#fit and transform train data \ndf_train = encoder.fit_transform(train_df)#Original data\ndf_train.head()","f4d68bba":"df_train.info()","b423ad97":"X= df_train.drop(['Name', 'PriceinGermany','PriceinUK','Manufacturer'], axis=1)\nX=X.values","033e7029":"X","4414c552":"y=df_train['PriceinUK'].values","0aa1037d":"X.shape","3cb96e77":"y.shape","339ca361":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=7)","7e467f8f":"from sklearn.ensemble import RandomForestRegressor\n# create regressor object\nregressor = RandomForestRegressor(n_estimators = 300, random_state = 0)","b6004345":"# fit the regressor with x and y data\nregressor.fit(X_train, y_train)","affc1c0d":"y_pred= regressor.predict(X_test)","bd608d29":"y_test","ed97236f":"y_pred","f0a93d5c":"#Mean Absolute Error(MAE)\n\nfrom sklearn.metrics import mean_absolute_error\nprint(\"MAE: \",mean_absolute_error(y_test,y_pred))","a734eb2e":"#Mean Squared Error(MSE)\n\nfrom sklearn.metrics import mean_squared_error\nprint(\"MSE: \",mean_squared_error(y_test,y_pred))","641f45b3":"#Root Mean Squared Error(RMSE)\n\nprint(\"RMSE: \",np.sqrt(mean_squared_error(y_test,y_pred)))","1d271103":"#R Squared (R2)\n\nfrom sklearn.metrics import r2_score\nr2 = r2_score(y_test,y_pred)\nprint(\"R2: \",r2)","d8f2d02e":"# Machine Learning Model\n\nWe will predict the price of the vehicle based on all the parameters and data, one thing to be pointed is that many data points are missing. Let us take only the prices in UK Pound.\n\nConsidering 1 Euro = 0.85 Pound\n"}}