{"cell_type":{"541ec02b":"code","67221cb8":"code","53651063":"code","55bc9c06":"code","514efe3e":"code","d0b19e53":"code","bdc77f0a":"code","7efa9592":"code","539e7b8a":"code","33d12ad2":"code","ea2901da":"code","d2ad2955":"code","4df703e4":"code","fa988639":"code","bd05e839":"code","2162d134":"code","de5c31e4":"code","ffbfe37d":"code","06e4a429":"code","924a4fcb":"code","95a340f4":"code","c6264e45":"code","c337cb36":"code","012c7a4f":"code","38c75e9e":"code","5ea859fa":"code","406a266f":"code","08b32081":"code","1c2e769e":"code","5ac45163":"code","f7ef6c77":"code","80656db8":"code","f05b2e47":"code","10122585":"code","2006e4f3":"code","feea0edb":"code","2a22b4b2":"code","f1c3cb30":"code","e75b66c7":"code","0a4d0039":"code","2c55733f":"code","49e11fcf":"code","1f8f108c":"code","f4b05882":"code","dde26bdf":"code","a272d0c0":"code","213b6a2a":"code","753a54c0":"code","84ab1c03":"code","e5a6b636":"code","878a3182":"code","276b6c04":"code","ce7f5da2":"code","9e36d3ce":"code","0931f39e":"code","4b43fdea":"code","7c4b5445":"markdown","6a5a478e":"markdown","0068c102":"markdown"},"source":{"541ec02b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","67221cb8":"inp_train=pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')","53651063":"inp_test=pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","55bc9c06":"inp_train.shape","514efe3e":"inp_test.shape","d0b19e53":"inp_train.describe()","bdc77f0a":"inp_train.isnull().any().sum()","7efa9592":"inp_test.isnull().any().sum()","539e7b8a":"inp_train['label'].value_counts().sort_values(ascending=False)","33d12ad2":"tgt_col=inp_train['label']","ea2901da":"inp_train.drop('label',inplace=True,axis=1)","d2ad2955":"from sklearn.model_selection import train_test_split","4df703e4":"X_train,X_test,y_train,y_test=train_test_split(inp_train,tgt_col,test_size=0.3,random_state=2)","fa988639":"from sklearn.ensemble import RandomForestClassifier","bd05e839":"rfc=RandomForestClassifier(n_estimators=500,n_jobs=-1)","2162d134":"rfc.fit(X_train,y_train)","de5c31e4":"y_rfc_pred=rfc.predict(X_test)","ffbfe37d":"from sklearn.metrics import confusion_matrix","06e4a429":"cm=confusion_matrix(y_test,y_rfc_pred)","924a4fcb":"cm","95a340f4":"from sklearn.metrics import accuracy_score,classification_report","c6264e45":"accuracy_score(y_test,y_rfc_pred)","c337cb36":"print(classification_report(y_test,y_rfc_pred))","012c7a4f":"from xgboost import XGBClassifier","38c75e9e":"XGB_class=XGBClassifier(n_estimators=1000,n_jobs=-1)","5ea859fa":"XGB_class.fit(X_train,y_train)","406a266f":"y_xgb_pred=XGB_class.predict(X_test)","08b32081":"xgb_cm=confusion_matrix(y_test,y_xgb_pred)","1c2e769e":"print(xgb_cm)","5ac45163":"accuracy_score(y_test,y_xgb_pred)","f7ef6c77":"#XGB_class.fit(inp_train,tgt_col)","80656db8":"#y_sub_pred=XGB_class.predict(inp_test)","f05b2e47":"#submission_xgb = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),pd.Series((y_sub_pred),name=\"Label\")],axis = 1)","10122585":"from sklearn.preprocessing import MinMaxScaler","2006e4f3":"MMS=MinMaxScaler()","feea0edb":"inp_train_mm=pd.DataFrame(std_scaling.fit_transform(inp_train))","2a22b4b2":"inp_test_mm=pd.DataFrame(std_scaling.transform(inp_test))","f1c3cb30":"inp_train_mm.columns=inp_train.columns","e75b66c7":"inp_test_mm.columns=inp_test.columns","0a4d0039":"inp_train_mm.describe()","2c55733f":"X_train_nn,X_test_nn,y_train_nn,y_test_nn=train_test_split(inp_train_mm,tgt_col)","49e11fcf":"from sklearn.neural_network import MLPClassifier","1f8f108c":"mlp=MLPClassifier(hidden_layer_sizes=(100), max_iter=500, alpha=1e-4,\n                    solver='sgd', verbose=10, random_state=5,\n                    learning_rate_init=.01)","f4b05882":"mlp.fit(X_train_nn,y_train_nn)","dde26bdf":"y_pred_nn=mlp.predict(X_test_nn)","a272d0c0":"cm_nn=confusion_matrix(y_test_nn,y_pred_nn)","213b6a2a":"print(cm_nn)","753a54c0":"print(classification_report(y_test_nn,y_pred_nn))","84ab1c03":"accuracy_score(y_test_nn,y_pred_nn)","e5a6b636":"mlp_1=MLPClassifier(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,\n              beta_2=0.999, early_stopping=False, epsilon=1e-08,\n              hidden_layer_sizes=100, learning_rate='constant',\n              learning_rate_init=0.01, max_iter=500, momentum=0.9,\n              n_iter_no_change=10, nesterovs_momentum=True, power_t=0.5,\n              random_state=5, shuffle=True, solver='sgd', tol=0.0001,\n              validation_fraction=0.1, verbose=10, warm_start=False)","878a3182":"mlp_1.fit(X_train,y_train)","276b6c04":"nn_whole=MLPClassifier(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,\n              beta_2=0.999, early_stopping=False, epsilon=1e-08,\n              hidden_layer_sizes=100, learning_rate='constant',\n              learning_rate_init=0.01, max_iter=500, momentum=0.9,\n              n_iter_no_change=10, nesterovs_momentum=True, power_t=0.5,\n              random_state=5, shuffle=True, solver='sgd', tol=0.0001,\n              validation_fraction=0.1, verbose=10, warm_start=False)","ce7f5da2":"nn_whole.fit(inp_train_mm,tgt_col)","9e36d3ce":"nn_pred_fin=nn_whole.predict(inp_test_mm)","0931f39e":"nn_df=pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),pd.Series((nn_pred_fin),name=\"Label\")],axis = 1)","4b43fdea":"nn_df.to_csv('nn_sub.csv',index=False)","7c4b5445":"Now let's train the whole input data set ","6a5a478e":"accuracy is 96.55 now let's try to train whole dataset","0068c102":"Now let's try to fit without MinMaxScaler"}}