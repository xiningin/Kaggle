{"cell_type":{"48e3a45f":"code","2d922dea":"code","8b271474":"code","f12b9a84":"code","ff3f02dc":"code","713c1824":"markdown","b03f4a14":"markdown"},"source":{"48e3a45f":"import sys, os, multiprocessing, csv\nfrom urllib import request, error\nfrom PIL import Image\nfrom io import BytesIO","2d922dea":"def parse_data(data_file):\n    csvfile = open(data_file, 'r')\n    csvreader = csv.reader(csvfile)\n    key_url_list = [line[:2] for line in csvreader]\n    return key_url_list[1:]  # Chop off header\n","8b271474":"def download_image(key_url):\n    out_dir = sys.argv[2]\n    (key, url) = key_url\n    filename = os.path.join(out_dir, '{}.jpg'.format(key))\n\n    if os.path.exists(filename):\n        print('Image {} already exists. Skipping download.'.format(filename))\n        return 0\n\n    try:\n        response = request.urlopen(url)\n        image_data = response.read()\n    except:\n        print('Warning: Could not download image {} from {}'.format(key, url))\n        return 1\n\n    try:\n        pil_image = Image.open(BytesIO(image_data))\n    except:\n        print('Warning: Failed to parse image {}'.format(key))\n        return 1\n\n    try:\n        pil_image_rgb = pil_image.convert('RGB')\n    except:\n        print('Warning: Failed to convert image {} to RGB'.format(key))\n        return 1\n\n    try:\n        pil_image_rgb.save(filename, format='JPEG', quality=90)\n    except:\n        print('Warning: Failed to save image {}'.format(filename))\n        return 1\n    \n    return 0\n","f12b9a84":"def loader():\n    if len(sys.argv) != 3:\n        print('Syntax: {} <data_file.csv> <output_dir\/>'.format(sys.argv[0]))\n        sys.exit(0)\n    (data_file, out_dir) = sys.argv[1:]\n\n    if not os.path.exists(out_dir):\n        os.mkdir(out_dir)\n\n    key_url_list = parse_data(data_file)\n    pool = multiprocessing.Pool(processes=20)  # Num of CPUs\n    failures = sum(tqdm.tqdm(pool.imap_unordered(download_image, key_url_list), total=len(key_url_list)))\n    print('Total number of download failures:', failures)\n    pool.close()\n    pool.terminate()","ff3f02dc":"# arg1 : data_file.csv\n# arg2 : output_dir\nif __name__ == '__main__':\n    loader()","713c1824":"This is a simple modify from https:\/\/www.kaggle.com\/tobwey\/landmark-retrieval-challenge-image-downloader","b03f4a14":"Note: requires the tqdm package (pip install tqdm)\n\nNote to Kagglers: This script will not run directly in Kaggle kernels. You\nneed to download it and run it on your local machine.\n\nDownloads images from the Google Landmarks dataset using multiple threads.\nImages that already exist will not be downloaded again, so the script can\nresume a partially completed download. All images will be saved in the JPG\nformat with 90% compression quality.\n"}}