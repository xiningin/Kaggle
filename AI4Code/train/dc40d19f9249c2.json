{"cell_type":{"845babdf":"code","103bc5cc":"code","236cc861":"code","434dc552":"code","89fd31b8":"code","f1c8a130":"code","faff600e":"code","db2944ea":"code","689002bd":"code","9c8edb54":"code","59987d8f":"code","439bf511":"code","e66261fe":"code","9f7935b6":"code","e0a20058":"code","9a8f9b91":"code","090e930b":"code","10f934d3":"code","96ecac47":"code","d19bbb4e":"code","8598402f":"code","6b03e419":"code","37411388":"code","f12f0768":"code","2270bf39":"code","f4891516":"code","2828ff92":"code","3c109ab2":"code","76643535":"code","0284dd7e":"code","51db978f":"code","24ce0e12":"code","91f518d3":"code","59730b47":"code","84e62746":"code","586bae11":"code","993e36bf":"code","148abf82":"code","6dac7c4e":"code","b88c4984":"code","462fb556":"code","b3f0a330":"code","83b3a353":"code","593911d8":"code","16cc81a5":"code","fad47670":"code","a8828774":"code","b17987c9":"code","0dce5286":"code","ed721123":"code","fefc8c2e":"code","ebf73fae":"code","057af255":"code","99eceec5":"code","8b57eb5d":"code","9e53ee77":"code","5bbae404":"code","4799670b":"code","9f50f2e5":"code","ecefd73d":"code","a68e3613":"code","795071d2":"code","4eba3213":"code","26bc43c6":"code","cd5201df":"code","6265bd8d":"code","e9b06048":"code","692e00eb":"markdown","e80e88dd":"markdown","62751abc":"markdown","a4650e2a":"markdown","dc188ece":"markdown"},"source":{"845babdf":"import numpy as np\nimport scipy as sp\nimport pandas as pd\nfrom pandas import DataFrame, Series\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom category_encoders import OrdinalEncoder, OneHotEncoder, TargetEncoder\nfrom tqdm import tqdm_notebook as tqdm\n\nfrom sklearn.ensemble import GradientBoostingClassifier","103bc5cc":"#\u30cf\u30f3\u30ba\u30aa\u30f3\u306e\u30b9\u30e0\u30fc\u30ba\u306a\u9032\u884c\u306e\u305f\u3081\u306b\u5168\u4f53\u306e20\u5206\u306e1\u3060\u3051\u8aad\u307f\u8fbc\u3080\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n#\u5b9f\u969b\u306b\u8ab2\u984c\u3067\u30e2\u30c7\u30ea\u30f3\u30b0\u3059\u308b\u969b\u306b\u306f\"skiprows=lambda x: x%20!=0\"\u3092\u524a\u9664\u3057\u3066\u304f\u3060\u3055\u3044\u3002\ndf_train = pd.read_csv('..\/input\/sales-prediction-of-clothes-in-e-commerce\/train.csv') #, skiprows=lambda x: x %20 != 0\n#df_train = pd.read_csv('..\/input\/homework-for-students2\/train.csv', index_col=0)\ndf_test = pd.read_csv('..\/input\/sales-prediction-of-clothes-in-e-commerce\/test.csv')","236cc861":"len(df_train),len(df_test)","434dc552":"df_train['is_train'] = 1\ndf_test['is_train'] = 0\ndf = pd.concat([df_train,df_test],axis=0)","89fd31b8":"df = df.reset_index(drop=True)","f1c8a130":"df.tail()","faff600e":"len(df_train.product_color.unique()),len(df_test.product_color.unique())","db2944ea":"#color\u3092\u6570\u5b57\u306b\ncolor_dict={}\nfor i,data in enumerate(df.product_color.unique()):\n    color_dict[data] = i","689002bd":"df['product_color_int'] = df['product_color'].map(color_dict)","9c8edb54":"#size\u306e\u8868\u8a18\u63fa\u308c\u3092\u76f4\u3059\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('XS.', 'XS')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('M.', 'M')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('s', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('S.', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('SIZE XS', 'XS')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('S(bust 88cm)', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('3XL', 'XXXL')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('pants-S', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('US-S', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size -XXS', 'XXS')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size-XS', 'XS')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('25-S', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size-S', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('S(Pink & Black)', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('L.', 'L')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size\/S', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('2XL', 'XL')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size S', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size M', 'M')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Suit-S', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('SIZE-XXS', 'XXS')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size S.', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('SIZE XXS', 'XXS')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size S', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('X   L', 'XL')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size-XXS', 'XXS')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size-L', 'L')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('SizeL', 'L')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('S Diameter 30cm', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size4XL', 'XXXXL')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size--S', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('size S', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('S..', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size XXS', 'XXS')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Size-5XL', 'XXXXXL')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('SIZE-4XL', 'XXXXL')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('S (waist58-62cm)', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('32\/L', 'L')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('S Pink', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('5XL', 'XXXXXL')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('1 PC - XL', 'XL')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('SIZE S', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('04-3XL', 'XXXL')\n\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Women Size 37', '37')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('26(Waist 72cm 28inch)', 'S')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('EU39(US8)', '39')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('EU 35', '35')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('US 6.5 (EU 37)', '37')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('Women Size 36', '36')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('04-3XL', 'XXXL')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('US5.5-EU35', '35')\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace('26(Waist 72cm 28inch)', 'S')\n\n\n","59987d8f":"\nother = ['Baby Float Boat', 'Base & Top & Matte Top Coat','10 ml','80 X 200 CM', '30 cm', '100pcs', '20PCS-10PAIRS',  'Pack of 1', '2pcs','AU plug Low quality',  'choose a size',\n       'S\/M(child)', '1 pc.', 'daughter 24M', 'Base Coat',\n       'first  generation', '100 cm','1pc', 'One Size',\n       'Floating Chair for Kid', '10pcs', '4-5 Years', 'Round','100 x 100cm(39.3 x 39.3inch)', 'H01', 'B',\n       '5PAIRS', '40 cm', '1m by 3m', '20pcs']\ndf['product_variation_size_id'] = df['product_variation_size_id'].replace(other, 'other')\n\n","439bf511":"#size\u3092\u6570\u5b57\u306b\nsize_dict={}\nfor i,data in enumerate(df.product_variation_size_id.unique()):\n    size_dict[data] = i\n","e66261fe":"df['product_size_int'] = df['product_variation_size_id'].map(size_dict)\n","9f7935b6":"df.product_variation_size_id.unique()","e0a20058":"#tag \u306e\u6570\ndf['tag_count'] = [len(df.tags.str.split(',')[i]) for i in range(len(df))]\n","9a8f9b91":"df['tag_count'].unique()","090e930b":"#\u5e0c\u671b\u4fa1\u683c\u3068\u306e\u5dee MAPE\u306f\u8ca0\u306e\u5024\u306f\u4f7f\u3048\u306a\u3044\u306e\u3067\u6ce8\u610f-> \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u8a71\u3060\u3063\u305f \u5927\u4f53\u306f\u5e0c\u671b\u4fa1\u683c\u3092\u4e0b\u56de\u308b\u3068\u601d\u3046\u306e\u3067retail_price < price\u306a\u3089\u30d5\u30e9\u30b01\u7acb\u3066\u3068\u304f\ndf['retailprice-price'] = df['retail_price']-df['price']","10f934d3":"df['retailprice-priceFLG'] = [1 if df['retailprice-price'][i] < 0 else 0 for i in range(len(df)) ]\n","96ecac47":"df.head() #title,tags -> \u30c6\u30ad\u30b9\u30c8\u7279\u5fb4\u91cf\u306a\u306e\u3067\u3001tf-idf","d19bbb4e":"#\u3044\u3063\u305f\u3093\u629c\u304f\ndf_train = df[df['is_train'] == 1]\ndf_test = df[df['is_train'] == 0]\ndf_train_TXT = df_train[['title','tags']]\ndf_test_TXT = df_test[['title','tags']]","8598402f":"df = pd.concat([df_train,df_test],axis=0)","6b03e419":"non_use = ['merchant_title','merchant_id']","37411388":"df = df.drop(['title','tags'],axis = 1)\ndf = df.drop(non_use,axis = 1)","f12f0768":"#rate\u306e\u7d71\u8a08\u91cf\nrates = ['rating_five_count','rating_four_count','rating_three_count','rating_two_count','rating_one_count']\ndf['rate_mean'] = df[rates].mean(axis = 1)\ndf['rate_max'] = df[rates].max(axis = 1)\ndf['rate_min'] = df[rates].min(axis = 1)\ndf['rate_range'] = df[rates].max(axis = 1) - df[rates].min(axis = 1)\ndf['rate_std'] = df[rates].std(axis = 1)\n","2270bf39":"#\u307b\u3057\u306e\u5272\u5408\ndf['rate_5'] = df[rates[0]]\/df[rates].sum(axis = 1)\ndf['rate_4'] = df[rates[1]]\/df[rates].sum(axis = 1)\ndf['rate_3'] = df[rates[2]]\/df[rates].sum(axis = 1)\ndf['rate_2'] = df[rates[3]]\/df[rates].sum(axis = 1)\ndf['rate_1'] = df[rates[4]]\/df[rates].sum(axis = 1)","f4891516":"df.head()","2828ff92":"df[df['rate_mean'].isnull()== True].index","3c109ab2":"df.isnull().sum()","76643535":"#size,color,\u5e97\u8217\u8a55\u4fa1\u3001rating_five_count\u3042\u305f\u308a\u3092\u30ab\u30c6\u30b4\u30ea\u3068\u307f\u306a\u3059\n#\u5e97\u8217\u8a55\u4fa1\u3068rating\u306f\u6570\u30675\u3064\u304f\u3089\u3044\u306b\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u305f\u65b9\u304c\u3044\u3044\u304b\u3082 ->\u3042\u3068\u3067\nlen(df['rating_five_count'].unique()),len(df['rating_four_count'].unique())","0284dd7e":"df_train = df[df['is_train'] == 1]\ndf_test = df[df['is_train'] == 0]\ny_train = df_train.units_sold\nX_train = df_train.drop(['units_sold'], axis=1)\n\nX_test = df_test.copy()","51db978f":"#size,color","24ce0e12":"#cats = list(X_train.select_dtypes(include='object').columns)\ncats = ['product_color','product_variation_size_id','merchant_rating']","91f518d3":"\nfor col in cats:\n    summary = X_train[col].value_counts()\n    X_train[col+'cnt'] = X_train[col].map(summary)\n    X_test[col+'cnt'] = X_test[col].map(summary)\n    ","59730b47":"X_test.head()","84e62746":"#cats = list(X_temp.select_dtypes(include='object').columns)","586bae11":"# \u4eca\u5ea6\u306fTarget Encoding\ntarget = 'rating_five_count'\nX_temp = pd.concat([X_train, y_train], axis=1)\n\nfor col in cats:\n\n    # X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\n    summary = X_temp.groupby([col])[target].mean()\n    X_test[col+'_tenc'] = X_test[col].map(summary) \n\n\n    # X_train\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\n    skf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n    enc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n    for i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n        X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n        X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n\n        summary = X_train_.groupby([col])[target].mean()\n        #print(X_val[col].map(summary))\n        enc_train.iloc[val_ix] = X_val[col].map(summary)\n        #print(enc_train.iloc[val_ix])\n    X_train[col+'_tenc']  = enc_train","993e36bf":"X_test.head()","148abf82":"col_list = list(X_test.select_dtypes(include=['int64','float64']).columns)\n","6dac7c4e":"col_list.remove('units_sold')","b88c4984":"X_train[col_list].isnull().sum()","462fb556":"X_train.loc[:, col_list] = X_train[col_list].fillna(-9999)\nX_test.loc[:, col_list] = X_test[col_list].fillna(-9999)","b3f0a330":"df[df['rating_five_count'].isnull() == True].index","83b3a353":"df[df['rating_four_count'].isnull() == True].index","593911d8":"X_train.isnull().sum()","16cc81a5":"#object\u306eNA\u57cb\u3081","fad47670":"categorical_col_list = list(df.select_dtypes(include='object').columns)\n","a8828774":"categorical_col_list","b17987c9":"X_train.loc[:, categorical_col_list] = X_train[categorical_col_list].fillna('NA')\nX_test.loc[:, categorical_col_list] = X_test[categorical_col_list].fillna('NA')","0dce5286":"df[df['product_color'].isnull() == True].index #stripe\u3068\u304b\u30ab\u30e2\u30d5\u30e9\u67c4\u306e\u3082\u306e\u3001nailpolish\u3068\u304b\u304cnall\u306b\u306a\u3063\u3066\u3044\u308b","ed721123":"df[df['product_variation_size_id'].isnull() == True].index","fefc8c2e":"df[categorical_col_list].isnull().sum()","ebf73fae":"X_test.isnull().sum()","057af255":"X_train.info()","99eceec5":"X_train = X_train.drop(['row_id','is_train'],axis = 1)\nX_test = X_test.drop(['row_id','is_train'],axis = 1)","8b57eb5d":"X_train = X_train.drop(['product_color','product_variation_size_id'],axis = 1)\nX_test = X_test.drop(['product_color','product_variation_size_id'],axis = 1)","9e53ee77":"X_test = X_test.drop('units_sold',axis = 1)","5bbae404":"# LGBM\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\n\nparams = {\n    'objective': 'mape',\n    'max_bin': 466,#study.best_params['max_bin'],\n    'metric': 'mape',\n    'learning_rate': 0.05,\n    'num_leaves': 53,#study.best_params['num_leaves'],\n    'num_iterations' : 1000,\n    # early_stopping \u56de\u6570\u6307\u5b9a\n    'early_stopping_rounds' : 100\n}\n\n# params = {\n#     'nthread': 10,\n#     'max_depth': 8,\n#     'task': 'train',\n#     'boosting_type': 'gbdt',\n#     'objective': 'mape',\n#     'metric': 'mape', # this is abs(a-e)\/max(1,a)\n#     'num_leaves': 31,\n#     'learning_rate': 0.25,\n#     'feature_fraction': 0.9,\n#     'bagging_fraction': 0.8,\n#     'bagging_freq': 5,\n#     'lambda_l1': 0.06,\n#     'lambda_l2': 0.1,\n#     'verbose': -1\n# }\n# params = {\n#     'nthread': 10,\n#     'max_depth': 8,\n#     'task': 'train',\n#     'boosting_type': 'gbdt',\n#     'objective': 'regression_l1',\n#     'metric': 'mape', # this is abs(a-e)\/max(1,a)\n#     'num_leaves': 31,\n#     'learning_rate': 0.25,\n#     'feature_fraction': 0.9,\n#     'bagging_fraction': 0.8,\n#     'bagging_freq': 5,\n#     'lambda_l1': 0.06,\n#     'lambda_l2': 0.1,\n#     'verbose': -1\n# }\n\n\n# params = {\n#     # \u4e8c\u5024\u5206\u985e\u554f\u984c\n#     'objective': 'binary',\n#     # \u640d\u5931\u95a2\u6570\u306f\u4e8c\u5024\u306elogloss\n#     'metric': 'auc',\n#     #metric': {'binary_error'}, \n#     # \u6700\u5927\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u56de\u6570\u6307\u5b9a\n#     'num_iterations' : 1000,\n#     # early_stopping \u56de\u6570\u6307\u5b9a\n#     'early_stopping_rounds' : 100,\n# }","4799670b":"from sklearn import metrics\n\ndef get_evaluate(y_test, predict):\n\n    fpr, tpr, thr_arr = metrics.roc_curve(y_test, predict)\n\n    auc = metrics.auc(fpr, tpr)\n    precision = metrics.precision_score(y_test, predict)\n    recall = metrics.recall_score(y_test, predict)      \n\n    return auc, precision, recall","9f50f2e5":"\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import accuracy_score\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold\n\n# k-\u5206\u5272\u4ea4\u5dee\u691c\u8a3c\u3092\u4f7f\u3063\u3066\u5b66\u7fd2\uff06\u4e88\u6e2c\uff08K=10\uff09\nFOLD_NUM = 5\nkf = KFold(n_splits=FOLD_NUM,\n              random_state=42)\n\n#\u691c\u8a3c\u6642\u306e\u30b9\u30b3\u30a2\u3092\u521d\u671f\u5316\nscores = []\n\n#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u5024\u3092\u521d\u671f\u5316\npred_cv = np.zeros(len(X_test.index))\n\n#lgbm\u306e\u30e9\u30a6\u30f3\u30c9\u6570\u3092\u5b9a\u7fa9\nnum_round = 10000\nauc_list = []\nprecision_list = []\nrecall_list = []\noof_preds = np.zeros([y_train.shape[0]])\nsub_preds = np.zeros([X_test.shape[0]])\n\nfor i, (tdx, vdx) in enumerate(kf.split(X_train, y_train)):\n    print(f'Fold : {i}')\n    # \u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u3068\u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u306b\u5206\u5272\n    X_train2, X_valid, y_train2, y_valid = X_train.iloc[tdx], X_train.iloc[vdx], y_train.values[tdx], y_train.values[vdx]#.values[vdx]\n    lgb_train = lgb.Dataset(X_train2, y_train2)\n    lgb_valid = lgb.Dataset(X_valid, y_valid,reference=lgb_train)\n    \n    # \u5b66\u7fd2\u306e\u5b9f\u884c\n    model = lgb.train(params, lgb_train, num_boost_round=num_round,\n                      valid_names=[\"train\", \"valid\"], valid_sets=[lgb_train, lgb_valid],verbose_eval=100)\n \n    oof_preds[vdx] = model.predict(X_valid, num_iteration=model.best_iteration)\n    sub_preds[:] += model.predict(X_test, num_iteration=model.best_iteration) \/ kf.n_splits\n    \n    \n    #vdx += 1\n#     importance_df = pd.DataFrame()\n#     importance_df['feature'] = merged_df.columns\n#     importance_df['importance'] = gbm.feature_importance()\n#     importance_df['fold'] = n_fold + 1\n#     feature_importance_df = pd.concat([feature_importance_df, importance_df], axis=0)\n    #predict_proba = model.predict(X_valid, num_iteration=model.best_iteration)\ne = 2 * abs(y_train - oof_preds) \/ ( abs(y_train)+abs(oof_preds) )\ne = e.mean()\nprint('Full validation score %.4f' %e)\n    \n    # accuracy\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\n    #score_ = accuracy_score(y_valid, predict_proba)\n    #auc, precision, recall = get_evaluate(y_valid, predict_proba.round())\n    #score_ = roc_auc_score(y_valid, predict_proba)\n    #print('AUC:{}, precision:{}, recall:{}'.format(auc, precision, recall))\n\n    #auc_list.append(auc)\n    #precision_list.append(precision)\n    #recall_list.append(recall)\n    #print('CV Score of Fold_%d is %f' % (i, score_))\n    # kfold\u306e\u5e73\u5747\u5024\u3092\u53d6\u5f97\n#     print('Kfold\u5e73\u5747 AUC:{}, precision:{}, recall:{}'.format(np.mean(auc_list), \n#                                                              np.mean(precision_list), \n#                                                              np.mean(recall_list)))\n    \n    \n#     # \u30d5\u30a9\u30fc\u30eb\u30c9\u6bce\u306e\u691c\u8a3c\u6642\u306e\u30b9\u30b3\u30a2\u3092\u683c\u7d0d\n#     scores.append(score_)\n    \n#     #\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\u3092\u6c42\u3081\u308b\n#     submission = model.predict(X_test,num_iteration=model.best_iteration)\n    \n#     #\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\u3092\u30d5\u30a9\u30fc\u30eb\u30c9\u6570\u3067\u5272\u3063\u3066\u84c4\u7a4d\n#     #(\u30d5\u30a9\u30fc\u30eb\u30c9\u6bce\u306e\u4e88\u6e2c\u5024\u306e\u5e73\u5747\u5024\u3092\u6c42\u3081\u308b\u3053\u3068\u3068\u540c\u3058)\n#     pred_cv += submission\/FOLD_NUM\n\n# \u6700\u7d42\u7684\u306a\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u5024\u3092\u52dd\u6557\uff08\uff10\u3000or\u3000\uff11\uff09\u306b\u5909\u63db\n#pred_cv = np.round(pred_cv)\n\n# \u6700\u7d42\u7684\u306aaccuracy\u30b9\u30b3\u30a2\u3092\u5e73\u5747\u5024\u3067\u51fa\u529b\n# print('')\n# print('################################')\n# print('CV_score:'+ str(np.mean(scores)))","ecefd73d":"len(sub_preds),len(X_test)","a68e3613":"y_train,oof_preds","795071d2":"y_train.dtype","4eba3213":"pred = sub_preds","26bc43c6":"submission = pd.read_csv('..\/input\/sales-prediction-of-clothes-in-e-commerce\/sample_submission.csv')","cd5201df":"submission","6265bd8d":"submission['units_sold'] = pred","e9b06048":"submission.to_csv('sub_1.csv',index = False)","692e00eb":"## \u30ab\u30c6\u30b4\u30ea\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","e80e88dd":"### \u30bf\u30fc\u30b2\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\n###NA\u57cb\u3081\u3059\u308b\u524d\u306b\u3084\u3089\u306a\u3044\u3068\u30c0\u30e1","62751abc":"### \u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","a4650e2a":"## \u5b66\u7fd2","dc188ece":"## NA\u57cb\u3081"}}