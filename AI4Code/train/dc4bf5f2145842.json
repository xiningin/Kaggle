{"cell_type":{"97d7f4a4":"code","d4e2d21a":"code","09591234":"code","645de9ed":"code","bfe72b8c":"code","ba68692f":"code","8a0fbaf5":"code","c4427ca2":"code","4daec0fb":"code","af24b4cb":"code","a8037561":"code","c35d437d":"code","5d038a12":"code","497b798a":"code","72ed3942":"code","586afb4e":"code","6fd90851":"code","162a958c":"code","c8251541":"code","08e76482":"code","19f1ee39":"code","e5b78e08":"code","28a54052":"code","229af851":"code","5b96b299":"code","23cd183f":"code","86237301":"code","872289a8":"code","88518d38":"code","6d110378":"markdown","2934adc1":"markdown","b314f10c":"markdown","bf9ddc96":"markdown","4bbabc19":"markdown","e0edd91b":"markdown","181d55f9":"markdown","a55afa38":"markdown","40e580aa":"markdown","d62e9374":"markdown","1748bfa3":"markdown"},"source":{"97d7f4a4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d4e2d21a":"df = pd.read_csv(\"\/kaggle\/input\/cs-challenge\/training_set.csv\")","09591234":"df.info()","645de9ed":"df.isna().sum().sum()","bfe72b8c":"nan_number = df.isna().sum().sum()\nprint(nan_number)","ba68692f":"nan_number*100\/(432170 *79)","8a0fbaf5":"(100*df.isna().sum()\/432170).sort_values(ascending=False).head(20)","c4427ca2":"df = df.sort_values('Date_time')\ndf = df.fillna(method='ffill')","4daec0fb":"df","af24b4cb":"df.isna().sum().sum()","a8037561":"import matplotlib.pyplot as plt\nimport seaborn as sns","c35d437d":"#Using Pearson Correlation\nplt.figure(figsize=(12,10))\ncor = df.corr()\nsns.heatmap(cor)\nplt.show()","5d038a12":"#Correlation with output variable\ncor_target = abs(cor[\"TARGET\"])\n#Selecting highly correlated features\nrelevant_features = cor_target[cor_target>0.5]\nrelevant_features","497b798a":"df_clean = df[relevant_features.index]\ndf_clean","72ed3942":"Y = df_clean['TARGET']\nX = df_clean.drop('TARGET', axis=1)","586afb4e":"from sklearn.preprocessing import StandardScaler\nX = StandardScaler().fit_transform(X)","6fd90851":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.20, random_state=404)","162a958c":"len(X_train) + len(X_test) == len(X)","c8251541":"from sklearn.linear_model import LinearRegression\nreg = LinearRegression().fit(X_train, Y_train)\n\nY_pred = reg.predict(X_test)","08e76482":"hat = pd.DataFrame([Y_pred, Y_test]).T\nhat.columns = ['Prediction' ,'Verit\u00e9']\nhat['erreur'] = abs(hat.iloc[:,0] - hat.iloc[:,1])\nhat","19f1ee39":"from sklearn.metrics import mean_absolute_error\n\nmean_absolute_error(Y_test, Y_pred)","e5b78e08":"df_test = pd.read_csv('\/kaggle\/input\/cs-challenge\/test_set.csv')\nids = df_test['ID']","28a54052":"df_test = df_test[['Generator_converter_speed', 'Generator_converter_speed_min',\n       'Generator_converter_speed_max', 'Generator_speed',\n       'Generator_speed_min', 'Generator_speed_max',\n       'Gearbox_bearing_1_temperature', 'Gearbox_bearing_1_temperature_min',\n       'Gearbox_bearing_1_temperature_max', 'Gearbox_bearing_2_temperature',\n       'Gearbox_bearing_2_temperature_min',\n       'Gearbox_bearing_2_temperature_max', 'Rotor_speed', 'Rotor_speed_min','Rotor_speed_max','Date_time']]","229af851":"df_test = df_test.sort_values('Date_time')\ndf_test = df_test.drop('Date_time', axis=1)\ndf_test = df_test.fillna(method='ffill')","5b96b299":"df_test.isna().sum().sum()","23cd183f":"X_real_world = StandardScaler().fit_transform(df_test)","86237301":"prediction = reg.predict(X_real_world)","872289a8":"results = pd.DataFrame()\nresults['ID'] = ids\nresults['TARGET'] = prediction\nresults.to_csv('linear_results.csv', index=False)","88518d38":"results","6d110378":"# O\u00f9 sont localis\u00e9s les NAN ? ","2934adc1":"# Comment charge t-on les donn\u00e9es ? ","b314f10c":"# Continuit\u00e9 \u00e9l\u00e8ctrique dans le temps ?","bf9ddc96":"# Comment selectionner nos colonnes (features) ? ","4bbabc19":"# Quelle signification on veut donner ? Comment expliquer le remplissage par des ph\u00e9nom\u00e8nes physiques ? ","e0edd91b":"## S\u00e9parons notre jeu d'entrainement et de test","181d55f9":"# A t-on des NAN ? ","a55afa38":"# De quoi est consitut\u00e9 notre DataSet ? ","40e580aa":"## Appliquons une normalisation Z = (X-mean)\/std","d62e9374":"# Tout probl\u00e8me de machine learning supervis\u00e9 peut-etre vu comme :\n\n> **Y = f(X) **  ","1748bfa3":"# S\u00e9parons notre X et notre Y"}}