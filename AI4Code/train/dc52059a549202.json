{"cell_type":{"4d5ad0ba":"code","07e08198":"code","7cd42eac":"code","ff7611fe":"code","0eaeabb1":"code","9786e1c5":"code","5ffbc2bd":"code","9ab18ff0":"code","61cf73b2":"markdown","9f9c6e98":"markdown","f28c0331":"markdown"},"source":{"4d5ad0ba":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","07e08198":"df=pd.read_csv(\"\/kaggle\/input\/housepricing\/HousePrices_HalfMil.csv\")\n\nprint(df.isnull().sum())\narea=float(input(\"Area:\"))\ngarage=int(input(\"Number of garages:\"))\nfireplace=int(input(\"Number of fireplaces:\"))\nbaths=int(input(\"Number of baths:\"))\n\nmarble=input(\"Marble kind (white,black or indian):\")\nif marble.lower().strip()==\"white\":\n    df=df[df[\"White Marble\"]==1]\nif marble.lower().strip()==\"black\":\n    df=df[df[\"Black Marble\"]==1]\nif marble.lower().strip()==\"indian\":\n    df=df[df[\"Indian Marble\"]==1]\n\nfloors=int(input(\"House have floor (yes=1,no=0):\"))\nif floors==1:\n    df=df[df[\"Floors\"]==1]\nelse:\n    df=df[df[\"Floors\"]==0]\n\ncity=int(input(\"City number (1,2,3):\"))\nif city==1:\n    df=df[df[\"City\"]==1]\nif city == 2:\n    df = df[df[\"City\"] == 2]\nif city == 3:\n    df = df[df[\"City\"] == 3]\n\nelectric=int(input(\"House have electric (yes=1,no=0):\"))\nif electric==1:\n    df=df[df[\"Electric\"]==1]\nelse:\n    df = df[df[\"Electric\"] == 0]\n\nfiber=int(input(\"House have fiber (yes=1,no=0):\"))\nif fiber==1:\n    df=df[df[\"Fiber\"]==1]\nelse:\n    df = df[df[\"Fiber\"] == 0]\n\nsolar=int(input(\"House have solar (yes=1,no=0):\"))\nif solar==1:\n    df=df[df[\"Solar\"]==1]\nelse:\n    df = df[df[\"Solar\"] == 0]\n\nglass_doors=int(input(\"House have glass door (yes=1,no=0):\"))\nif glass_doors==1:\n    df=df[df[\"Glass Doors\"]==1]\nelse:\n    df = df[df[\"Glass Doors\"] == 0]\n\npool=int(input(\"House have swimming pool (yes=1,no=0):\"))\nif pool==1:\n    df=df[df[\"Swiming Pool\"]==1]\nelse:\n    df = df[df[\"Swiming Pool\"] == 0]\n\ngarden=int(input(\"House have garden (yes=1,no=0):\"))\nif garden==1:\n    df=df[df[\"Garden\"]==1]\nelse:\n    df = df[df[\"Garden\"] == 0]\n\ndf.drop([\"White Marble\", \"Black Marble\", \"Indian Marble\", \"Floors\", \"City\",\"Electric\",\"Fiber\",\"Solar\",\"Glass Doors\",\"Swiming Pool\",\"Garden\"], axis=1, inplace=True)\n\n\n\ny=df[[\"Prices\"]]\nX=df.drop(\"Prices\",axis=1)\n\nfrom sklearn.linear_model import LinearRegression\nmodel=LinearRegression().fit(X,y)\n\nvalues=[[area],[garage],[fireplace],[baths]]\n\nvalues=pd.DataFrame(values).T\n\nmodel.predict(values)","7cd42eac":"#succes of model\nfrom sklearn.metrics import mean_squared_error\n\nMSE=mean_squared_error(y,model.predict(X))        \nRMSE=np.sqrt(MSE) \n\nprint(MSE,RMSE)","ff7611fe":"#verification\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=99)\n\ntrain_model=LinearRegression().fit(X_train,y_train)\n\n\n#RMSE for train values\nRMSE_train=np.sqrt(mean_squared_error(y_train,train_model.predict(X_train)))\n#RMSE for test values\nRMSE_test=np.sqrt(mean_squared_error(y_test,train_model.predict(X_test)))\n\n\nRMSE_train","0eaeabb1":"RMSE_test","9786e1c5":"#cross validation\nfrom sklearn.model_selection import cross_val_score\n\n\nMSE_crossval=np.mean(-cross_val_score(train_model,X_train,y_train,cv=10,scoring=\"neg_mean_squared_error\"))          \nMSE_crossval","5ffbc2bd":"RMSE_crossval=np.sqrt(MSE_crossval)\nRMSE_crossval","9ab18ff0":"#verification\nfrom sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=99)\n\ntrain_model=LinearRegression().fit(X_train,y_train)\n\n\n#RMSE for train values\nprint(np.sqrt(mean_squared_error(y_train,train_model.predict(X_train))))\n\n#RMSE for test values\nprint(np.sqrt(mean_squared_error(y_test,train_model.predict(X_test))))\n","61cf73b2":"Verification","9f9c6e98":"Calculate MSE and RMSE","f28c0331":"This is estimated price."}}