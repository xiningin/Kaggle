{"cell_type":{"1e892e87":"code","bafc0816":"code","54eafc02":"code","ea321c6c":"code","6097f863":"code","607703d4":"code","9757d785":"code","fb2b1a7e":"code","1eba7dc4":"code","ba32bb97":"code","005d0531":"code","81185fb1":"code","a3840e4b":"code","fe4c2f69":"code","858dd2d2":"code","0c4f7510":"code","e1cf3a14":"markdown","391b64c6":"markdown","608e21c7":"markdown","9aad99cd":"markdown","8cc7e4ef":"markdown","ed82df6c":"markdown","4aa041da":"markdown","acb30c88":"markdown","6bba48bb":"markdown","357e2466":"markdown","cf87b067":"markdown","1d7a87c0":"markdown"},"source":{"1e892e87":"import pandas as pd\nfrom sklearn import preprocessing\nimport nltk \nnltk.download('stopwords')                 # download the stopwords from NLTK\n\nimport re                                  # library for regular expression operations\nimport string                              # for string operations\n\nfrom nltk.corpus import stopwords          # module for stop words that come with NLTK\nfrom nltk.stem import PorterStemmer        # module for stemming\nfrom nltk.tokenize import TweetTokenizer   # module for tokenizing strings\n\nfrom sklearn.linear_model import LogisticRegression  \nfrom sklearn.feature_extraction.text import CountVectorizer  \nfrom sklearn.model_selection import train_test_split  \nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt            # library for visualization\nimport seaborn as sns","bafc0816":"df = pd.read_csv('..\/input\/email-classification-nlp\/SMS_train.csv', encoding='unicode_escape')\ndf","54eafc02":"df = df.drop(['S. No.'], axis=1)  # dropping unnecesary column\nlabel_encoder = preprocessing.LabelEncoder()  # label encoding for 'Label' column\ndf['Label'] = label_encoder.fit_transform(df['Label'])   # label encoding column - MSZoning for an example \ndf","ea321c6c":"df.isnull().any()  # checking for null values if any","6097f863":"def process_mail(mail):\n    \"\"\"Process mail function.\n    Input:\n        mail: a string containing meassage body\n    Output:\n        mail_clean: a list of words containing the processed body\n\n    \"\"\"\n    stemmer = PorterStemmer()\n    stopwords_english = stopwords.words('english')\n    # tokenize reviews\n    tokenizer = TweetTokenizer(preserve_case=False, strip_handles=True,\n                               reduce_len=True)\n    mail_tokens = tokenizer.tokenize(mail)\n\n    mail_clean = []\n    for word in mail_tokens:\n        if (word not in stopwords_english and  # remove stopwords\n                word not in string.punctuation):  # remove punctuation\n            # mail_clean.append(word)\n            stem_word = stemmer.stem(word)  # stemming word\n            mail_clean.append(stem_word)\n\n    return mail_clean","607703d4":"# using the process_mail function for:\n# 1. Removing stop words\n# 2. Tokenization\n# 3. Stemming\nA = []\na = df['Message_body']\nfor i in a:\n  i = process_mail(i)\n  A.append(i)\ndf['Message_body'] = A\ndf","9757d785":"cv = CountVectorizer(max_features=1500, analyzer='word', lowercase=False) ","fb2b1a7e":"df['Message_body'] = df['Message_body'].apply(lambda x: \" \".join(x) )  # to join all words in the lists\nX = cv.fit_transform(df['Message_body'])  # predictor variable 'X'","1eba7dc4":"df","ba32bb97":"y = pd.DataFrame(df['Label'])  # respose variable 'y'\ny.head()","005d0531":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 0)  # splitting in the ratio 80:20","81185fb1":"classifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)","a3840e4b":"y_pred = classifier.predict(X_test)","fe4c2f69":"roc_auc_score(y_test, y_pred)","858dd2d2":"cm = confusion_matrix(y_test, y_pred)\ncm","0c4f7510":"plt.figure(figsize=(6,6))\nsns.heatmap(cm, annot=True, fmt=\".0f\", linewidths=0.5, square = True, cmap = 'Pastel1')\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\nall_sample_title = 'Accuracy Score: {0}'.format(roc_auc_score(y_test, y_pred))\nplt.title(all_sample_title, size = 15)","e1cf3a14":"### Model","391b64c6":"# Predictions are 78.33% accurate.","608e21c7":"### Importing Libraries","9aad99cd":"### Vectorizing","8cc7e4ef":"### Getting our Data","ed82df6c":"# E-MAIL CLASSIFICATION","4aa041da":"### Making Predictions","acb30c88":"### Results' Visualization","6bba48bb":"### Data Preprocessing","357e2466":"### Checking Accuracy","cf87b067":"### Splitting for Training and Testing","1d7a87c0":"### Performing steps in NLP"}}