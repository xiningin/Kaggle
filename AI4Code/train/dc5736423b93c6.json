{"cell_type":{"f8571815":"code","3e40fd3c":"code","4d485172":"code","5b07dde9":"code","f487d20f":"code","731b26f8":"code","e352e552":"code","522931a6":"code","293ec844":"code","1bb4b5af":"code","678657c3":"code","5ee4de85":"code","796d735e":"code","452af2d0":"code","39a66bb1":"code","dc1d71b4":"code","a8d6ebc4":"code","e8e83f11":"code","ff64acd3":"code","3f8f4d16":"code","88d7e9a7":"code","09ce1270":"code","7b14efdc":"code","01f29ca4":"code","77e3d1fc":"code","36c3dee2":"code","65c91c77":"code","fdf629b9":"code","ab5ee931":"code","eb72188d":"code","1d00b660":"code","9b36a597":"code","aafadbc6":"code","a51126a8":"code","b35b1d2b":"code","457d6679":"code","8eae0a2c":"code","49665878":"code","c2df350c":"code","8730c8f0":"code","42c9004b":"code","f21a75c0":"code","d8cafb42":"code","ae029338":"code","17a5e96e":"code","e5c629d6":"code","d6722f73":"code","23eb1dff":"code","77dee7d6":"code","c4ffebd6":"code","6927d7e8":"code","f1e4bcd9":"code","7e71ce08":"code","60a72839":"code","41647777":"code","e2ab6996":"code","d1aa7493":"code","54272dac":"code","9e45c9c1":"code","a1f152ba":"code","44a625c1":"code","93055e35":"code","7258f2c8":"code","eb7e7c2f":"code","588a30ec":"code","7668c845":"code","a43d20da":"code","14e47fd2":"markdown","03e42f58":"markdown","a2360076":"markdown","ed9bd5b5":"markdown","7f317a3a":"markdown","361db608":"markdown","1ebe48f2":"markdown","4873d243":"markdown","ffa399c7":"markdown","68d22dfd":"markdown","0031e49d":"markdown","6c452831":"markdown","9838e03f":"markdown","5c435c33":"markdown","e7bd8e2a":"markdown","d470b14d":"markdown","dbbbbf87":"markdown","e2ba1338":"markdown","4691e83a":"markdown","517e8271":"markdown","e0533686":"markdown","d39378cd":"markdown","166b9f5e":"markdown","b319a2d3":"markdown","e692def2":"markdown","0daed099":"markdown"},"source":{"f8571815":"import numpy as np \nimport pandas as pd \nimport time\nimport json\nimport gc\nimport xgboost as xgb \nfrom sklearn.model_selection import GridSearchCV\nimport matplotlib.pyplot as plt","3e40fd3c":"start = time.time()\ndata_2005 = pd.read_csv('..\/input\/mortality\/2005_data.csv')\ndata_2005.dropna(how='any',axis=1,inplace=True)\ndata_2006 = pd.read_csv('..\/input\/mortality\/2006_data.csv')\ndata_2006.dropna(how='any',axis=1,inplace=True)\ndata_2007 = pd.read_csv('..\/input\/mortality\/2007_data.csv')\ndata_2007.dropna(how='any',axis=1,inplace=True)\ndata_2008 = pd.read_csv('..\/input\/mortality\/2008_data.csv')\ndata_2008.dropna(how='any',axis=1,inplace=True)\ndata_2009 = pd.read_csv('..\/input\/mortality\/2009_data.csv')\ndata_2009.dropna(how='any',axis=1,inplace=True)\ndata_2010 = pd.read_csv('..\/input\/mortality\/2010_data.csv')\ndata_2010.dropna(how='any',axis=1,inplace=True)\ndata_2011 = pd.read_csv('..\/input\/mortality\/2011_data.csv')\ndata_2011.dropna(how='any',axis=1,inplace=True)\ndata_2012 = pd.read_csv('..\/input\/mortality\/2012_data.csv')\ndata_2012.dropna(how='any',axis=1,inplace=True)\ndata_2013= pd.read_csv('..\/input\/mortality\/2013_data.csv')\ndata_2013.dropna(how='any',axis=1,inplace=True)\ndata_2014 = pd.read_csv('..\/input\/mortality\/2014_data.csv')\ndata_2014.dropna(how='any',axis=1,inplace=True)\ndata_2015 = pd.read_csv('..\/input\/mortality\/2015_data.csv')\ndata_2015.dropna(how='any',axis=1,inplace=True)\nprint(time.time()-start)","4d485172":"data_2005.columns","5b07dde9":"features = ['current_data_year','month_of_death','resident_status','sex','race_recode_3','39_cause_recode']\ntrain_1 = data_2005[features]\nfor data in [data_2006,data_2007,data_2008,data_2009,data_2010,data_2011,data_2012,data_2013,data_2014,data_2015]:\n    data = data[features]\n    train_1 = pd.concat([train_1,data],axis=0)","f487d20f":"train_1.sample(2)","731b26f8":"del data_2005\ndel data_2006\ndel data_2007\ndel data_2008\ndel data_2009\ndel data_2010\ndel data_2011\ndel data_2012\ndel data_2013\ndel data_2014\ndel data_2015\ngc.collect()","e352e552":"def read_json(path):\n    with open(path,'r', encoding = 'utf-8') as f:\n        definition = json.load(f)\n    return definition","522931a6":"definition = read_json('..\/input\/mortality\/2005_codes.json')\ndefinition['place_of_death_and_decedents_status']['1'] = 'Hospital, Clinic or Medical Center'","293ec844":"reconstr_cause_definition = {}\nneoplasm = list(range(4,16))\nheart = list(range(19,23))\nfor i in range(1,43):\n    if i in neoplasm:\n        reconstr_cause_definition[i] = 'neoplasm'\n    elif i in heart:\n        reconstr_cause_definition[i] = 'heart'\n    elif i in [38,39]:\n        reconstr_cause_definition[i] = 'accident'\n    else:\n        reconstr_cause_definition[i] = 'others'","1bb4b5af":"train_1['is_resident'] = train_1['resident_status'].apply(lambda x: 'resident' if x==1 or x==4 else 'non-resident')\ntrain_1['reconstr_cause_definition_1'] = train_1['39_cause_recode'].apply(lambda x: reconstr_cause_definition[x])","678657c3":"train_1 = train_1[train_1.reconstr_cause_definition_1!='others']\ntrain_1 =  train_1[['current_data_year','month_of_death','is_resident','sex','race_recode_3','reconstr_cause_definition_1']]\ntrain_1['helper'] = 1","5ee4de85":"train_1.sample(2)","796d735e":"train_1['numeric_month'] = train_1.month_of_death + (train_1.current_data_year-2005)*12","452af2d0":"train_1['is_resident'] = train_1['is_resident'].apply(lambda x: 1 if x=='resident' else 0)","39a66bb1":"train_1['sex'] = train_1['sex'].apply(lambda x: 1 if x=='M' else 0)","dc1d71b4":"reconstr_cause_dict = {'accident':1, 'heart':2, 'neoplasm':3}\ntrain_1['reconstr_cause_definition_1'] = train_1['reconstr_cause_definition_1'].apply(lambda x: reconstr_cause_dict[x])","a8d6ebc4":"death_cnt_group = train_1[['numeric_month','is_resident','sex','race_recode_3','reconstr_cause_definition_1',\n            'helper']].groupby(['numeric_month','is_resident','sex','race_recode_3',\n                                'reconstr_cause_definition_1']).agg('sum').reset_index()","e8e83f11":"death_cnt_group.head(5)","ff64acd3":"death_cnt_group2 = death_cnt_group[['numeric_month','is_resident','helper']].groupby(['numeric_month','is_resident']).agg('mean').reset_index()\ndeath_cnt_group2.columns = ['numeric_month','is_resident','month_avg_resident_death']\ndeath_cnt_group = pd.merge(death_cnt_group, death_cnt_group2, on=['numeric_month','is_resident'], how='left')","3f8f4d16":"death_cnt_group2.head(4)","88d7e9a7":"death_cnt_group3 = death_cnt_group[['numeric_month','sex','helper']].groupby(['numeric_month','sex']).agg('mean').reset_index()\ndeath_cnt_group3.columns = ['numeric_month','sex','month_avg_sex_death']\ndeath_cnt_group = pd.merge(death_cnt_group, death_cnt_group3, on=['numeric_month','sex'], how='left')","09ce1270":"death_cnt_group4 = death_cnt_group[['numeric_month','race_recode_3','helper']].groupby(['numeric_month','race_recode_3']).agg('mean').reset_index()\ndeath_cnt_group4.columns = ['numeric_month','race_recode_3','month_avg_race_death']\ndeath_cnt_group = pd.merge(death_cnt_group, death_cnt_group4, on=['numeric_month','race_recode_3'], how='left')","7b14efdc":"death_cnt_group5 = death_cnt_group[['numeric_month','reconstr_cause_definition_1','helper']].groupby(['numeric_month','reconstr_cause_definition_1']).agg('mean').reset_index()\ndeath_cnt_group5.columns = ['numeric_month','reconstr_cause_definition_1','month_avg_cause_death']\ndeath_cnt_group = pd.merge(death_cnt_group, death_cnt_group5, on=['numeric_month','reconstr_cause_definition_1'], how='left')","01f29ca4":"for col in ['month_avg_resident_death','month_avg_sex_death','month_avg_race_death','month_avg_cause_death']:\n    death_cnt_group[col] = death_cnt_group[col].astype('float16')","77e3d1fc":"def create_lag_feature(df,col,lags):\n    tmp = df[['numeric_month','is_resident','sex','race_recode_3','reconstr_cause_definition_1',col]]\n    for lag in lags:\n        shifted = tmp.copy()\n        shifted['numeric_month'] = shifted['numeric_month'].apply(lambda x: x+lag)\n        shifted.columns = ['numeric_month','is_resident','sex','race_recode_3','reconstr_cause_definition_1',col+'_lag_'+str(lag)]\n        df = pd.merge(df,shifted,on=['numeric_month','is_resident','sex','race_recode_3','reconstr_cause_definition_1'],how='left')\n    return df","36c3dee2":"death_cnt_group = create_lag_feature(death_cnt_group,'helper',[1,6,12])","65c91c77":"for column in ['month_avg_resident_death','month_avg_sex_death','month_avg_race_death','month_avg_cause_death']:\n    death_cnt_group = create_lag_feature(death_cnt_group,column,[1,6,12])","fdf629b9":"death_cnt_group.sample(5)","ab5ee931":"death_cnt_group.fillna(0,inplace = True)","eb72188d":"onehot_race = pd.get_dummies(death_cnt_group.race_recode_3, prefix='race')\ndeath_cnt_group = pd.concat([death_cnt_group, onehot_race],axis=1)","1d00b660":"onehot_cause = pd.get_dummies(death_cnt_group.reconstr_cause_definition_1, prefix='cause')\ndeath_cnt_group = pd.concat([death_cnt_group, onehot_cause],axis=1)","9b36a597":"death_cnt_group.columns","aafadbc6":"death_cnt_group.to_pickle('Training_Regression.pkl')","a51126a8":"death_cnt_group = pd.read_pickle('..\/input\/cleaned-data-for-regression\/Training_Regression (1).pkl')","b35b1d2b":"death_cnt_group.columns","457d6679":"train_columns = ['numeric_month', 'is_resident', 'sex', 'race_1','race_2','cause_1','cause_2',\n       'helper_lag_1', 'helper_lag_6', 'helper_lag_12',\n       'month_avg_resident_death_lag_1', 'month_avg_resident_death_lag_6','month_avg_resident_death_lag_12', \n       'month_avg_sex_death_lag_1','month_avg_sex_death_lag_6', 'month_avg_sex_death_lag_12',\n       'month_avg_race_death_lag_1', 'month_avg_race_death_lag_6','month_avg_race_death_lag_12', \n       'month_avg_cause_death_lag_1','month_avg_cause_death_lag_6', 'month_avg_cause_death_lag_12']","8eae0a2c":"train = death_cnt_group[death_cnt_group.numeric_month<132]\ntrain_X = train[train_columns]\ntrain_y = train['helper']\ntest = death_cnt_group[death_cnt_group.numeric_month==132]\ntest_X = test[train_columns]\ntest_y = test['helper']","49665878":"train_X.columns","c2df350c":"cv_params = {'n_estimators':[300,400,500], 'learning_rate':np.arange(0.3,0.51,0.01)}\nxgb_model = xgb.XGBRegressor(max_depth=8, subsample=0.8, colsample_bytree=0.8, colsample_bynode=0.8,seed=42)\ncv1 = GridSearchCV(estimator=xgb_model, param_grid=cv_params, scoring='neg_root_mean_squared_error', cv=5, verbose=1)\ncv1.fit(train_X, train_y)","8730c8f0":"cv1.best_params_, cv1.best_score_","42c9004b":"cv_xgb_model = xgb.XGBRegressor(n_estimators=500,learning_rate=0.5,max_depth=8,\n                            subsample=0.8, colsample_bytree=0.8, colsample_bynode=0.8,colsample_bylevel=1,\n                            gamma=100, min_child_weight=1, reg_lambda=1, seed=42)\ncv_xgb_model.fit(train_X,train_y, eval_set=[(train_X,train_y),(test_X,test_y)],eval_metric='rmse',early_stopping_rounds=10)","f21a75c0":"cv_xgb_model.get_booster().get_score(importance_type='gain')","d8cafb42":"fig,ax = plt.subplots(figsize=(12,10))\nxgb.plot_importance(cv_xgb_model,ax=ax,importance_type='gain')\nplt.yticks(fontsize=14)","ae029338":"cv_xgb_model.save_model('best_model_1.json')","17a5e96e":"pred_cnt = cv_xgb_model.predict(death_cnt_group[train_columns])","e5c629d6":"death_cnt_group['pred_cnt'] = pred_cnt","d6722f73":"death_cnt_group.sample(2)","23eb1dff":"death_cnt_resident_0 = death_cnt_group[death_cnt_group.is_resident==0]\ngrouped_resident_0 = death_cnt_resident_0[['numeric_month','helper','pred_cnt']].groupby('numeric_month').agg('sum').reset_index()\ngrouped_resident_0.plot(x='numeric_month',y=['helper','pred_cnt'],figsize=(10,5), grid=True, style=['rx','o'])\nplt.title('pred VS true for non-resident trend',fontsize=16)\nplt.legend(loc='upper left',labels=['true','pred'])\nplt.xticks(np.arange(1,134,11))\nplt.xlabel('numeric month',fontsize=14)\nplt.show()","77dee7d6":"fig,ax = plt.subplots(figsize=(10,5))\nax.plot(grouped_resident_0['numeric_month'],grouped_resident_0['helper'],color='red',label='true')\nax.plot(grouped_resident_0['numeric_month'],grouped_resident_0['pred_cnt'],color='blue',label='pred')\nax.set_title('pred VS true for non-resident trend',fontsize=16)\nax.set_xticks(np.arange(1,134,11))\nax.set_xlabel('numeric month',fontsize=14)\nax.legend(loc='upper left',labels=['true','pred'])","c4ffebd6":"death_cnt_resident_1 = death_cnt_group[death_cnt_group.is_resident==1]\ngrouped_resident_1 = death_cnt_resident_1[['numeric_month','helper','pred_cnt']].groupby('numeric_month').agg('sum').reset_index()\ngrouped_resident_1.plot(x='numeric_month',y=['helper','pred_cnt'],figsize=(10,5), grid=True, style=['rx','o'])\nplt.title('pred VS true for resident trend',fontsize=16)\nplt.legend(loc='upper left',labels=['true','pred'])\nplt.xticks(np.arange(1,134,11))\nplt.xlabel('numeric month',fontsize=14)\nplt.show()","6927d7e8":"fig,ax = plt.subplots(figsize=(10,5))\nax.plot(grouped_resident_1['numeric_month'],grouped_resident_1['helper'],color='red',label='true')\nax.plot(grouped_resident_1['numeric_month'],grouped_resident_1['pred_cnt'],color='blue',label='pred')\nax.set_title('pred VS true for resident trend',fontsize=16)\nax.set_xticks(np.arange(1,134,11))\nax.set_xlabel('numeric month',fontsize=14)\nax.legend(loc='upper left',labels=['true','pred'])","f1e4bcd9":"death_cnt_cause_1 = death_cnt_group[death_cnt_group.reconstr_cause_definition_1==1]\ngrouped_cause_1 = death_cnt_cause_1[['numeric_month','helper','pred_cnt']].groupby('numeric_month').agg('sum').reset_index()\ngrouped_cause_1.plot(x='numeric_month',y=['helper','pred_cnt'],figsize=(10,5), grid=True, style=['rx','o'])\nplt.title(\"pred VS true for 'cause:accident' trend\",fontsize=16)\nplt.legend(loc='upper left',labels=['true','pred'])\nplt.xticks(np.arange(1,134,11))\nplt.xlabel('numeric month',fontsize=14)\nplt.show()","7e71ce08":"fig,ax = plt.subplots(figsize=(10,5))\nax.plot(grouped_cause_1['numeric_month'],grouped_cause_1['helper'],color='red',label='true')\nax.plot(grouped_cause_1['numeric_month'],grouped_cause_1['pred_cnt'],color='blue',label='pred')\nax.set_title(\"pred VS true for 'cause:accident' trend\",fontsize=16)\nax.set_xticks(np.arange(1,134,11))\nax.set_xlabel('numeric month', fontsize=14)\nax.legend(loc='upper left')","60a72839":"death_cnt_cause_2 = death_cnt_group[death_cnt_group.reconstr_cause_definition_1==2]\ngrouped_cause_2 = death_cnt_cause_2[['numeric_month','helper','pred_cnt']].groupby('numeric_month').agg('sum').reset_index()\ngrouped_cause_2.plot(x='numeric_month',y=['helper','pred_cnt'],figsize=(10,5), grid=True, style=['rx','o'])\nplt.title(\"pred VS true for 'cause:heart' trend\",fontsize=16)\nplt.legend(loc='upper center',labels=['true','pred'])\nplt.xticks(np.arange(1,134,11))\nplt.xlabel('numeric month',fontsize=14)\nplt.show()","41647777":"fig,ax = plt.subplots(figsize=(10,5))\nax.plot(grouped_cause_2['numeric_month'],grouped_cause_2['helper'],color='red',label='true')\nax.plot(grouped_cause_2['numeric_month'],grouped_cause_2['pred_cnt'],color='blue',label='pred')\nax.set_title(\"pred VS true for 'cause:heart' trend\",fontsize=16)\nax.set_xticks(np.arange(1,134,11))\nax.set_xlabel('numeric month', fontsize=14)\nax.legend(loc='upper center')","e2ab6996":"death_cnt_cause_3 = death_cnt_group[death_cnt_group.reconstr_cause_definition_1==3]\ngrouped_cause_3 = death_cnt_cause_3[['numeric_month','helper','pred_cnt']].groupby('numeric_month').agg('sum').reset_index()\ngrouped_cause_3.plot(x='numeric_month',y=['helper','pred_cnt'],figsize=(10,5), grid=True, style=['rx','o'])\nplt.title(\"pred VS true for 'cause:neoplasm' trend\",fontsize=16)\nplt.xlabel('numeric month',fontsize=14)\nplt.legend(loc='upper left',labels=['true','pred'])\nplt.xticks(np.arange(1,134,11))\nplt.show()","d1aa7493":"fig,ax = plt.subplots(figsize=(10,5))\nax.plot(grouped_cause_3['numeric_month'],grouped_cause_3['helper'],color='red',label='true')\nax.plot(grouped_cause_3['numeric_month'],grouped_cause_3['pred_cnt'],color='blue',label='pred')\nax.set_title(\"pred VS true for 'cause:neoplasm' trend\",fontsize=16)\nax.set_xticks(np.arange(1,134,11))\nax.set_xlabel('numeric month',fontsize=14)\nax.legend(loc='upper left')","54272dac":"death_cnt_sex_0 = death_cnt_group[death_cnt_group.sex==0]\ngrouped_sex_0 = death_cnt_sex_0[['numeric_month','helper','pred_cnt']].groupby('numeric_month').agg('sum').reset_index()\ngrouped_sex_0.plot(x='numeric_month',y=['helper','pred_cnt'],figsize=(10,5), grid=True, style=['rx','o'])\nplt.title('pred VS true for female trend',fontsize=16)\nplt.legend(loc='upper center',labels=['true','pred'])\nplt.xticks(np.arange(1,134,11))\nplt.xlabel('numeric month',fontsize=14)\nplt.show()","9e45c9c1":"fig,ax = plt.subplots(figsize=(10,5))\nax.plot(grouped_sex_0['numeric_month'],grouped_sex_0['helper'],color='red',label='true')\nax.plot(grouped_sex_0['numeric_month'],grouped_sex_0['pred_cnt'],color='blue',label='pred')\nax.set_title(\"pred VS true for female trend\",fontsize=16)\nax.set_xticks(np.arange(1,134,11))\nax.set_xlabel('numeric month',fontsize=14)\nax.legend(loc='upper center')","a1f152ba":"death_cnt_sex_1 = death_cnt_group[death_cnt_group.sex==1]\ngrouped_sex_1 = death_cnt_sex_1[['numeric_month','helper','pred_cnt']].groupby('numeric_month').agg('sum').reset_index()\ngrouped_sex_1.plot(x='numeric_month',y=['helper','pred_cnt'],figsize=(10,5), grid=True, style=['rx','o'])\nplt.title('pred VS true for male trend',fontsize=16)\nplt.legend(loc='upper left',labels=['true','pred'])\nplt.xticks(np.arange(1,134,11))\nplt.xlabel('numeric month',fontsize=14)\nplt.show()","44a625c1":"fig,ax = plt.subplots(figsize=(10,5))\nax.plot(grouped_sex_1['numeric_month'],grouped_sex_1['helper'],color='red',label='true')\nax.plot(grouped_sex_1['numeric_month'],grouped_sex_1['pred_cnt'],color='blue',label='pred')\nax.set_title(\"pred VS true for male trend\",fontsize=16)\nax.set_xticks(np.arange(1,134,11))\nax.set_xlabel('numeric month',fontsize=14)\nax.legend(loc='upper left')","93055e35":"death_cnt_race_1 = death_cnt_group[death_cnt_group.race_recode_3==1]\ngrouped_race_1 = death_cnt_race_1[['numeric_month','helper','pred_cnt']].groupby('numeric_month').agg('sum').reset_index()\ngrouped_race_1.plot(x='numeric_month',y=['helper','pred_cnt'],figsize=(10,5), grid=True, style=['rx','o'])\nplt.title(\"pred VS true for 'race:white' trend\",fontsize=16)\nplt.legend(loc='upper left',labels=['true','pred'])\nplt.xticks(np.arange(1,134,11))\nplt.xlabel('numeric month',fontsize=14)\nplt.show()","7258f2c8":"fig,ax = plt.subplots(figsize=(10,5))\nax.plot(grouped_race_1['numeric_month'],grouped_race_1['helper'],color='red',label='true')\nax.plot(grouped_race_1['numeric_month'],grouped_race_1['pred_cnt'],color='blue',label='pred')\nax.set_title(\"pred VS true for 'race:white' trend\",fontsize=16)\nax.set_xticks(np.arange(1,134,11))\nax.set_xlabel('numeric month',fontsize=14)\nax.legend(loc='upper left')","eb7e7c2f":"death_cnt_race_2 = death_cnt_group[death_cnt_group.race_recode_3==2]\ngrouped_race_2 = death_cnt_race_2[['numeric_month','helper','pred_cnt']].groupby('numeric_month').agg('sum').reset_index()\ngrouped_race_2.plot(x='numeric_month',y=['helper','pred_cnt'],figsize=(10,5), grid=True, style=['rx','o'])\nplt.title(\"pred VS true for 'race:others' trend\",fontsize=16)\nplt.legend(loc='upper left',labels=['true','pred'])\nplt.xticks(np.arange(1,134,11))\nplt.xlabel('numeric month',fontsize=14)\nplt.show()","588a30ec":"fig,ax = plt.subplots(figsize=(10,5))\nax.plot(grouped_race_2['numeric_month'],grouped_race_2['helper'],color='red',label='true')\nax.plot(grouped_race_2['numeric_month'],grouped_race_2['pred_cnt'],color='blue',label='pred')\nax.set_title(\"pred VS true for 'race:others' trend\",fontsize=16)\nax.set_xticks(np.arange(1,134,11))\nax.set_xlabel('numeric month',fontsize=14)\nax.legend(loc='upper left')","7668c845":"death_cnt_race_3 = death_cnt_group[death_cnt_group.race_recode_3==3]\ngrouped_race_3 = death_cnt_race_3[['numeric_month','helper','pred_cnt']].groupby('numeric_month').agg('sum').reset_index()\ngrouped_race_3.plot(x='numeric_month',y=['helper','pred_cnt'],figsize=(10,5), grid=True, style=['rx','o'])\nplt.title(\"pred VS true for 'race:black' trend\",fontsize=16)\nplt.legend(loc='upper left',labels=['true','pred'])\nplt.xticks(np.arange(1,134,11))\nplt.xlabel('numeric month',fontsize=14)\nplt.show()","a43d20da":"fig,ax = plt.subplots(figsize=(10,5))\nax.plot(grouped_race_3['numeric_month'],grouped_race_3['helper'],color='red',label='true')\nax.plot(grouped_race_3['numeric_month'],grouped_race_3['pred_cnt'],color='blue',label='pred')\nax.set_title(\"pred VS true for 'race:black' trend\",fontsize=16)\nax.set_xticks(np.arange(1,134,11))\nax.set_xlabel('numeric month',fontsize=14)\nax.legend(loc='upper left')","14e47fd2":"In this part, I will plot the fit results of different features with two kinds of plot.","03e42f58":"# Modeling and Fine Tuning","a2360076":"The model performs quite well in capturing the female death trend and predicting value.","ed9bd5b5":"The trend from month 40 to 47 (2008.6~2009.2) is not captured well by the model and the values are not predicted quit accurate. The probable reason is that CDC did not record all the non-resident deceased and there is stochastic noise in data.","7f317a3a":"The trend includes resident status, race, gender and death cause of the deceased","361db608":"## Trend of different genders","1ebe48f2":"## Trend of different causes","4873d243":"The model performs well in capturing the white people death trend and predicting value.","ffa399c7":"## Final model","68d22dfd":"The trend in month from 5 to 12 is not captured well and the value is not predicted well by the model. The model performs better than the deceased of other races, but worse than the white peole.","0031e49d":"Lag features has null value so I fill them with 0","6c452831":"## Generate average count and Create time lag features","9838e03f":"The model performs well in capturing the female death trend and predicting value.","5c435c33":"## Trend of different races","e7bd8e2a":"Reconstruct cause of death into four big categories and eliminate the 'others' because I am only interested in the deceased of these three big death causes.","d470b14d":"Typo in the json file","dbbbbf87":"## Trend of different resident status","e2ba1338":"In this notebook, I will try to fit the regression model of the trend of amount of the deceased from 2005 to 2014 and use this model to predict amount of the deceased in 2015","4691e83a":"# Modeling result visualization","517e8271":"# Data Preprocessing and Feature Engineering","e0533686":"The trend is almost captured by the model but the real value is not predicted well. Probably the reason is that accident something out of expect and it is not easy to predict its value by machine learning models.  ","d39378cd":"The trend is not captured well by the model. The probable reason is that there exist stochastic noise in data because of CDC's record flaws. You can see from the figure that the number of the deceased is very small in each year and CDC may not record all the deceased of other races.","166b9f5e":"Convert months in each year into continuous months.","b319a2d3":"The model performs quite well in capturing the resident death trend and value.","e692def2":"The model performs quite well in capturing the heart death trend and value.","0daed099":"The model performs relatively well in capturing the neoplasm death trend and values when compared with accident trend."}}