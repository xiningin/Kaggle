{"cell_type":{"cf1fd963":"code","6b7a0bf6":"code","92129d05":"code","61c1a7b8":"code","22e895ba":"code","ff9e66d6":"code","7a5995a1":"code","2a8245ca":"code","11a25c25":"code","01c8a0d1":"code","06a628c6":"code","c196d6b2":"code","f4ad12e2":"code","cfec9577":"code","0da80868":"code","0dee0394":"code","eb0f84d1":"markdown","8239351c":"markdown","6dee6b26":"markdown","bf128604":"markdown","85aca6f3":"markdown","4b74dc11":"markdown","c845ce5d":"markdown","de6bdaee":"markdown"},"source":{"cf1fd963":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6b7a0bf6":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport numpy as np\nimport pandas as pd\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\nfrom plotly.subplots import make_subplots\n\nfrom pathlib import Path\ndata_dir = Path('\/kaggle\/input\/')\n\nimport os\nprint(os.listdir(data_dir))\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom matplotlib import pyplot as plt\n%matplotlib inline","92129d05":"state_population = pd.read_csv('..\/input\/us-statewise-population.csv')#https:\/\/www.census.gov\/data\/datasets\/time-series\/demo\/popest\/2010s-state-total.html\nstate_population.columns = ['stateid','state','population']\nstate_population.drop(['stateid'],axis=1,inplace=True)\nstate_corona = pd.read_csv('..\/input\/us-cleaned-corona-data.csv', parse_dates=['date'])#https:\/\/www.kaggle.com\/imdevskp\/corona-virus-report.\nstate_corona.state[state_corona.state == 'Puerto Rico'] = 'Puerto Rico Commonwealth'\nfor st in list(set(state_corona.state.unique()) - set(state_population.state)):\n    state_corona.drop(state_corona[state_corona.state == st]. index, axis=0, inplace=True)\nstate_corona = state_corona.merge(state_population,on='state')","61c1a7b8":"# Check if the data is updated\nprint(\"External Data\")\nprint(f\"Earliest Entry: {state_corona['date'].min()}\")\nprint(f\"Last Entry:     {state_corona['date'].max()}\")\nprint(f\"Total Days:     {state_corona['date'].max() - state_corona['date'].min()}\")","22e895ba":"group = state_corona.groupby('date')['date', 'confirmed', 'deaths'].sum().reset_index()\nfig = px.line(group, x=\"date\", y=\"confirmed\", title=\"US Confirmed Cases Over Time\")\nfig.show()","ff9e66d6":"fig = px.line(group, x=\"date\", y=\"deaths\", title=\"US Deaths Over Time\")\nfig.show()","7a5995a1":"cleaned_latest = state_corona[state_corona['date'] == max(state_corona['date'])]\nflg = cleaned_latest.groupby('state')['confirmed', 'population'].agg({'confirmed':'sum', 'population':'mean'}).reset_index()\n\nflg['infectionRate'] = round((flg['confirmed']\/flg['population'])*100, 5)\ntemp = flg[flg['confirmed']>100]\ntemp = temp.sort_values('infectionRate', ascending=False)\n\nfig = px.bar(temp.sort_values(by=\"infectionRate\", ascending=False)[:10][::-1],\n             x = 'infectionRate', y = 'state', \n             title='% of infected people by state', text='infectionRate', height=800, orientation='h',\n             color_discrete_sequence=['red']\n            )\nfig.show()","2a8245ca":"formated_gdf = state_corona.groupby(['date', 'state','Lat','Long'])['confirmed', 'population'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['date'] = pd.to_datetime(formated_gdf['date'])\nformated_gdf['date'] = formated_gdf['date'].dt.strftime('%m\/%d\/%Y')\nformated_gdf['infectionRate'] = round((formated_gdf['confirmed']\/formated_gdf['population'])*100, 8)\nfig = px.scatter_geo(formated_gdf,\n        lon = 'Long',\n        lat = 'Lat',\n        text = 'state',\n        color=\"infectionRate\", \n        size='infectionRate', \n        hover_name=\"state\", \n        range_color= [0, 0.2],\n        animation_frame=\"date\", \n        title='COVID-19: Spread Over Time (Normalized by State Population)', \n        color_continuous_scale=\"portland\"\n        )\nfig.update_layout(\n        geo_scope='usa',\n    )\nfig.show()","11a25c25":"cleaned_latest = state_corona[state_corona['date'] == max(state_corona['date'])]\nflg = cleaned_latest.groupby('state')['confirmed', 'deaths', 'recovered', 'active'].sum().reset_index()\n\nflg['mortalityRate'] = round((flg['deaths']\/flg['confirmed'])*100, 2)\ntemp = flg[flg['confirmed']>100]\ntemp = temp.sort_values('mortalityRate', ascending=False)\n\nfig = px.bar(temp.sort_values(by=\"mortalityRate\", ascending=False)[:10][::-1],\n             x = 'mortalityRate', y = 'state', \n             title='Deaths per 100 Confirmed Cases', text='mortalityRate', height=800, orientation='h',\n             color_discrete_sequence=['darkred']\n            )\nfig.show()","01c8a0d1":"formated_gdf = state_corona.groupby(['date', 'state','Lat','Long'])['confirmed', 'deaths'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['date'] = pd.to_datetime(formated_gdf['date'])\nformated_gdf['date'] = formated_gdf['date'].dt.strftime('%m\/%d\/%Y')\nformated_gdf['mortalityRate'] = round((formated_gdf['deaths']\/formated_gdf['confirmed'])*100, 8)\nformated_gdf['mortalityRate'] = formated_gdf['mortalityRate'].fillna(0)\nfig = px.scatter_geo(formated_gdf,\n        lon = 'Long',\n        lat = 'Lat',\n        text = 'state',\n        color=\"mortalityRate\", \n        size='mortalityRate', \n        hover_name=\"state\", \n        range_color= [0, 0.2],\n        animation_frame=\"date\", \n        title='COVID-19: Spread Over Time (Normalized by State Population)', \n        color_continuous_scale=\"portland\"\n        )\nfig.update_layout(\n        geo_scope='usa',\n    )\nfig.show()","06a628c6":"icu_beds = pd.read_csv('\/kaggle\/input\/us-beds.csv')#https:\/\/www.kff.org\/other\/state-indicator\/beds-by-ownership\/?currentTimeframe=0&sortModel=%7B%22colId%22:%22Location%22,%22sort%22:%22asc%22%7D\nicu_beds.loc[-1] = ['Puerto Rico', 0.0]\nicu_beds.index = icu_beds.index + 1\nicu_beds = icu_beds.sort_index() \nstate_corona = pd.merge(state_corona, icu_beds, on='state')","c196d6b2":"latest_grouped = state_corona.groupby(['Lat','Long','state'])['TotalBeds(1000)'].mean().reset_index()\nfig = px.bar(latest_grouped.sort_values('TotalBeds(1000)', ascending=False)[:10][::-1], \n             x='TotalBeds(1000)', y='state',\n             title='Ratio of ICU Beds per 1000 People', text='TotalBeds(1000)', orientation='h',color_discrete_sequence=['green'] )\nfig.show()","f4ad12e2":"fig = px.scatter_geo(latest_grouped,\n        lon = 'Long',\n        lat = 'Lat',\n        text = 'state',\n        color=\"TotalBeds(1000)\", \n        size='TotalBeds(1000)', \n        hover_name=\"state\", \n        title='Ratio of ICU beds per 1000 people', \n        color_continuous_scale=\"portland\"\n        )\nfig.update_layout(\n        geo_scope='usa',\n    )\nfig.show()","cfec9577":"from fbprophet import Prophet\nall_df = state_corona.groupby('date')['confirmed', 'deaths', 'recovered'].sum().reset_index()\ndf_prophet = all_df.loc[:,[\"date\", 'confirmed']]\ndf_prophet.columns = ['ds','y']\nm_d = Prophet(\n    yearly_seasonality= True,\n    weekly_seasonality = True,\n    daily_seasonality = True,\n    seasonality_mode = 'multiplicative')\nm_d.fit(df_prophet)\nfuture_d = m_d.make_future_dataframe(periods=14)\nfcst_daily = m_d.predict(future_d)\nfcst_daily[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","0da80868":"fig1 = m_d.plot(fcst_daily)","0dee0394":"from fbprophet.plot import plot_plotly\nimport plotly.offline as py\npy.init_notebook_mode()\n\nfig = plot_plotly(m_d, fcst_daily)  # This returns a plotly Figure\npy.iplot(fig)","eb0f84d1":"US Deaths Over Time","8239351c":"COVID-19: Spread Over Time (Normalized by State Population)","6dee6b26":"Ratio of ICU Beds per 1000 People","bf128604":"US Confirmed Cases Over Time","85aca6f3":"% of infected people by state","4b74dc11":"Forecasting for next two weeks","c845ce5d":"Deaths per 100 Confirmed Cases","de6bdaee":"COVID-19: Spread Over Time (Normalized by State Population)"}}